
limestone-template.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002cc  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a550  080002d0  080002d0  000012d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000080  0800a820  0800a820  0000b820  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800a8a0  0800a8a0  0000b8a0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0800a8a8  0800a8a8  0000b8a8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0800a8ac  0800a8ac  0000b8ac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000064  24000000  0800a8b0  0000c000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          0000509c  24000064  0800a914  0000c064  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  24005100  0800a914  0000c100  2**0
                  ALLOC
  9 .lwip_sec     00000160  30000000  30000000  0000d000  2**2
                  ALLOC
 10 .ARM.attributes 0000002e  00000000  00000000  0000c064  2**0
                  CONTENTS, READONLY
 11 .debug_info   0002ca93  00000000  00000000  0000c092  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_abbrev 000047e9  00000000  00000000  00038b25  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_aranges 00001fa8  00000000  00000000  0003d310  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_rnglists 000018d7  00000000  00000000  0003f2b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_macro  000054ca  00000000  00000000  00040b8f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   0002800c  00000000  00000000  00046059  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    00168ded  00000000  00000000  0006e065  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .comment      00000043  00000000  00000000  001d6e52  2**0
                  CONTENTS, READONLY
 19 .debug_frame  00008be0  00000000  00000000  001d6e98  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_line_str 0000006d  00000000  00000000  001dfa78  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002d0 <__do_global_dtors_aux>:
 80002d0:	b510      	push	{r4, lr}
 80002d2:	4c05      	ldr	r4, [pc, #20]	@ (80002e8 <__do_global_dtors_aux+0x18>)
 80002d4:	7823      	ldrb	r3, [r4, #0]
 80002d6:	b933      	cbnz	r3, 80002e6 <__do_global_dtors_aux+0x16>
 80002d8:	4b04      	ldr	r3, [pc, #16]	@ (80002ec <__do_global_dtors_aux+0x1c>)
 80002da:	b113      	cbz	r3, 80002e2 <__do_global_dtors_aux+0x12>
 80002dc:	4804      	ldr	r0, [pc, #16]	@ (80002f0 <__do_global_dtors_aux+0x20>)
 80002de:	f3af 8000 	nop.w
 80002e2:	2301      	movs	r3, #1
 80002e4:	7023      	strb	r3, [r4, #0]
 80002e6:	bd10      	pop	{r4, pc}
 80002e8:	24000064 	.word	0x24000064
 80002ec:	00000000 	.word	0x00000000
 80002f0:	0800a808 	.word	0x0800a808

080002f4 <frame_dummy>:
 80002f4:	b508      	push	{r3, lr}
 80002f6:	4b03      	ldr	r3, [pc, #12]	@ (8000304 <frame_dummy+0x10>)
 80002f8:	b11b      	cbz	r3, 8000302 <frame_dummy+0xe>
 80002fa:	4903      	ldr	r1, [pc, #12]	@ (8000308 <frame_dummy+0x14>)
 80002fc:	4803      	ldr	r0, [pc, #12]	@ (800030c <frame_dummy+0x18>)
 80002fe:	f3af 8000 	nop.w
 8000302:	bd08      	pop	{r3, pc}
 8000304:	00000000 	.word	0x00000000
 8000308:	24000068 	.word	0x24000068
 800030c:	0800a808 	.word	0x0800a808

08000310 <__aeabi_uldivmod>:
 8000310:	b953      	cbnz	r3, 8000328 <__aeabi_uldivmod+0x18>
 8000312:	b94a      	cbnz	r2, 8000328 <__aeabi_uldivmod+0x18>
 8000314:	2900      	cmp	r1, #0
 8000316:	bf08      	it	eq
 8000318:	2800      	cmpeq	r0, #0
 800031a:	bf1c      	itt	ne
 800031c:	f04f 31ff 	movne.w	r1, #4294967295
 8000320:	f04f 30ff 	movne.w	r0, #4294967295
 8000324:	f000 b96a 	b.w	80005fc <__aeabi_idiv0>
 8000328:	f1ad 0c08 	sub.w	ip, sp, #8
 800032c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000330:	f000 f806 	bl	8000340 <__udivmoddi4>
 8000334:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000338:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800033c:	b004      	add	sp, #16
 800033e:	4770      	bx	lr

08000340 <__udivmoddi4>:
 8000340:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000344:	9d08      	ldr	r5, [sp, #32]
 8000346:	460c      	mov	r4, r1
 8000348:	2b00      	cmp	r3, #0
 800034a:	d14e      	bne.n	80003ea <__udivmoddi4+0xaa>
 800034c:	4694      	mov	ip, r2
 800034e:	458c      	cmp	ip, r1
 8000350:	4686      	mov	lr, r0
 8000352:	fab2 f282 	clz	r2, r2
 8000356:	d962      	bls.n	800041e <__udivmoddi4+0xde>
 8000358:	b14a      	cbz	r2, 800036e <__udivmoddi4+0x2e>
 800035a:	f1c2 0320 	rsb	r3, r2, #32
 800035e:	4091      	lsls	r1, r2
 8000360:	fa20 f303 	lsr.w	r3, r0, r3
 8000364:	fa0c fc02 	lsl.w	ip, ip, r2
 8000368:	4319      	orrs	r1, r3
 800036a:	fa00 fe02 	lsl.w	lr, r0, r2
 800036e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000372:	fa1f f68c 	uxth.w	r6, ip
 8000376:	fbb1 f4f7 	udiv	r4, r1, r7
 800037a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800037e:	fb07 1114 	mls	r1, r7, r4, r1
 8000382:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000386:	fb04 f106 	mul.w	r1, r4, r6
 800038a:	4299      	cmp	r1, r3
 800038c:	d90a      	bls.n	80003a4 <__udivmoddi4+0x64>
 800038e:	eb1c 0303 	adds.w	r3, ip, r3
 8000392:	f104 30ff 	add.w	r0, r4, #4294967295
 8000396:	f080 8112 	bcs.w	80005be <__udivmoddi4+0x27e>
 800039a:	4299      	cmp	r1, r3
 800039c:	f240 810f 	bls.w	80005be <__udivmoddi4+0x27e>
 80003a0:	3c02      	subs	r4, #2
 80003a2:	4463      	add	r3, ip
 80003a4:	1a59      	subs	r1, r3, r1
 80003a6:	fa1f f38e 	uxth.w	r3, lr
 80003aa:	fbb1 f0f7 	udiv	r0, r1, r7
 80003ae:	fb07 1110 	mls	r1, r7, r0, r1
 80003b2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003b6:	fb00 f606 	mul.w	r6, r0, r6
 80003ba:	429e      	cmp	r6, r3
 80003bc:	d90a      	bls.n	80003d4 <__udivmoddi4+0x94>
 80003be:	eb1c 0303 	adds.w	r3, ip, r3
 80003c2:	f100 31ff 	add.w	r1, r0, #4294967295
 80003c6:	f080 80fc 	bcs.w	80005c2 <__udivmoddi4+0x282>
 80003ca:	429e      	cmp	r6, r3
 80003cc:	f240 80f9 	bls.w	80005c2 <__udivmoddi4+0x282>
 80003d0:	4463      	add	r3, ip
 80003d2:	3802      	subs	r0, #2
 80003d4:	1b9b      	subs	r3, r3, r6
 80003d6:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80003da:	2100      	movs	r1, #0
 80003dc:	b11d      	cbz	r5, 80003e6 <__udivmoddi4+0xa6>
 80003de:	40d3      	lsrs	r3, r2
 80003e0:	2200      	movs	r2, #0
 80003e2:	e9c5 3200 	strd	r3, r2, [r5]
 80003e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ea:	428b      	cmp	r3, r1
 80003ec:	d905      	bls.n	80003fa <__udivmoddi4+0xba>
 80003ee:	b10d      	cbz	r5, 80003f4 <__udivmoddi4+0xb4>
 80003f0:	e9c5 0100 	strd	r0, r1, [r5]
 80003f4:	2100      	movs	r1, #0
 80003f6:	4608      	mov	r0, r1
 80003f8:	e7f5      	b.n	80003e6 <__udivmoddi4+0xa6>
 80003fa:	fab3 f183 	clz	r1, r3
 80003fe:	2900      	cmp	r1, #0
 8000400:	d146      	bne.n	8000490 <__udivmoddi4+0x150>
 8000402:	42a3      	cmp	r3, r4
 8000404:	d302      	bcc.n	800040c <__udivmoddi4+0xcc>
 8000406:	4290      	cmp	r0, r2
 8000408:	f0c0 80f0 	bcc.w	80005ec <__udivmoddi4+0x2ac>
 800040c:	1a86      	subs	r6, r0, r2
 800040e:	eb64 0303 	sbc.w	r3, r4, r3
 8000412:	2001      	movs	r0, #1
 8000414:	2d00      	cmp	r5, #0
 8000416:	d0e6      	beq.n	80003e6 <__udivmoddi4+0xa6>
 8000418:	e9c5 6300 	strd	r6, r3, [r5]
 800041c:	e7e3      	b.n	80003e6 <__udivmoddi4+0xa6>
 800041e:	2a00      	cmp	r2, #0
 8000420:	f040 8090 	bne.w	8000544 <__udivmoddi4+0x204>
 8000424:	eba1 040c 	sub.w	r4, r1, ip
 8000428:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800042c:	fa1f f78c 	uxth.w	r7, ip
 8000430:	2101      	movs	r1, #1
 8000432:	fbb4 f6f8 	udiv	r6, r4, r8
 8000436:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800043a:	fb08 4416 	mls	r4, r8, r6, r4
 800043e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000442:	fb07 f006 	mul.w	r0, r7, r6
 8000446:	4298      	cmp	r0, r3
 8000448:	d908      	bls.n	800045c <__udivmoddi4+0x11c>
 800044a:	eb1c 0303 	adds.w	r3, ip, r3
 800044e:	f106 34ff 	add.w	r4, r6, #4294967295
 8000452:	d202      	bcs.n	800045a <__udivmoddi4+0x11a>
 8000454:	4298      	cmp	r0, r3
 8000456:	f200 80cd 	bhi.w	80005f4 <__udivmoddi4+0x2b4>
 800045a:	4626      	mov	r6, r4
 800045c:	1a1c      	subs	r4, r3, r0
 800045e:	fa1f f38e 	uxth.w	r3, lr
 8000462:	fbb4 f0f8 	udiv	r0, r4, r8
 8000466:	fb08 4410 	mls	r4, r8, r0, r4
 800046a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800046e:	fb00 f707 	mul.w	r7, r0, r7
 8000472:	429f      	cmp	r7, r3
 8000474:	d908      	bls.n	8000488 <__udivmoddi4+0x148>
 8000476:	eb1c 0303 	adds.w	r3, ip, r3
 800047a:	f100 34ff 	add.w	r4, r0, #4294967295
 800047e:	d202      	bcs.n	8000486 <__udivmoddi4+0x146>
 8000480:	429f      	cmp	r7, r3
 8000482:	f200 80b0 	bhi.w	80005e6 <__udivmoddi4+0x2a6>
 8000486:	4620      	mov	r0, r4
 8000488:	1bdb      	subs	r3, r3, r7
 800048a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800048e:	e7a5      	b.n	80003dc <__udivmoddi4+0x9c>
 8000490:	f1c1 0620 	rsb	r6, r1, #32
 8000494:	408b      	lsls	r3, r1
 8000496:	fa22 f706 	lsr.w	r7, r2, r6
 800049a:	431f      	orrs	r7, r3
 800049c:	fa20 fc06 	lsr.w	ip, r0, r6
 80004a0:	fa04 f301 	lsl.w	r3, r4, r1
 80004a4:	ea43 030c 	orr.w	r3, r3, ip
 80004a8:	40f4      	lsrs	r4, r6
 80004aa:	fa00 f801 	lsl.w	r8, r0, r1
 80004ae:	0c38      	lsrs	r0, r7, #16
 80004b0:	ea4f 4913 	mov.w	r9, r3, lsr #16
 80004b4:	fbb4 fef0 	udiv	lr, r4, r0
 80004b8:	fa1f fc87 	uxth.w	ip, r7
 80004bc:	fb00 441e 	mls	r4, r0, lr, r4
 80004c0:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80004c4:	fb0e f90c 	mul.w	r9, lr, ip
 80004c8:	45a1      	cmp	r9, r4
 80004ca:	fa02 f201 	lsl.w	r2, r2, r1
 80004ce:	d90a      	bls.n	80004e6 <__udivmoddi4+0x1a6>
 80004d0:	193c      	adds	r4, r7, r4
 80004d2:	f10e 3aff 	add.w	sl, lr, #4294967295
 80004d6:	f080 8084 	bcs.w	80005e2 <__udivmoddi4+0x2a2>
 80004da:	45a1      	cmp	r9, r4
 80004dc:	f240 8081 	bls.w	80005e2 <__udivmoddi4+0x2a2>
 80004e0:	f1ae 0e02 	sub.w	lr, lr, #2
 80004e4:	443c      	add	r4, r7
 80004e6:	eba4 0409 	sub.w	r4, r4, r9
 80004ea:	fa1f f983 	uxth.w	r9, r3
 80004ee:	fbb4 f3f0 	udiv	r3, r4, r0
 80004f2:	fb00 4413 	mls	r4, r0, r3, r4
 80004f6:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80004fa:	fb03 fc0c 	mul.w	ip, r3, ip
 80004fe:	45a4      	cmp	ip, r4
 8000500:	d907      	bls.n	8000512 <__udivmoddi4+0x1d2>
 8000502:	193c      	adds	r4, r7, r4
 8000504:	f103 30ff 	add.w	r0, r3, #4294967295
 8000508:	d267      	bcs.n	80005da <__udivmoddi4+0x29a>
 800050a:	45a4      	cmp	ip, r4
 800050c:	d965      	bls.n	80005da <__udivmoddi4+0x29a>
 800050e:	3b02      	subs	r3, #2
 8000510:	443c      	add	r4, r7
 8000512:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000516:	fba0 9302 	umull	r9, r3, r0, r2
 800051a:	eba4 040c 	sub.w	r4, r4, ip
 800051e:	429c      	cmp	r4, r3
 8000520:	46ce      	mov	lr, r9
 8000522:	469c      	mov	ip, r3
 8000524:	d351      	bcc.n	80005ca <__udivmoddi4+0x28a>
 8000526:	d04e      	beq.n	80005c6 <__udivmoddi4+0x286>
 8000528:	b155      	cbz	r5, 8000540 <__udivmoddi4+0x200>
 800052a:	ebb8 030e 	subs.w	r3, r8, lr
 800052e:	eb64 040c 	sbc.w	r4, r4, ip
 8000532:	fa04 f606 	lsl.w	r6, r4, r6
 8000536:	40cb      	lsrs	r3, r1
 8000538:	431e      	orrs	r6, r3
 800053a:	40cc      	lsrs	r4, r1
 800053c:	e9c5 6400 	strd	r6, r4, [r5]
 8000540:	2100      	movs	r1, #0
 8000542:	e750      	b.n	80003e6 <__udivmoddi4+0xa6>
 8000544:	f1c2 0320 	rsb	r3, r2, #32
 8000548:	fa20 f103 	lsr.w	r1, r0, r3
 800054c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000550:	fa24 f303 	lsr.w	r3, r4, r3
 8000554:	4094      	lsls	r4, r2
 8000556:	430c      	orrs	r4, r1
 8000558:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800055c:	fa00 fe02 	lsl.w	lr, r0, r2
 8000560:	fa1f f78c 	uxth.w	r7, ip
 8000564:	fbb3 f0f8 	udiv	r0, r3, r8
 8000568:	fb08 3110 	mls	r1, r8, r0, r3
 800056c:	0c23      	lsrs	r3, r4, #16
 800056e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000572:	fb00 f107 	mul.w	r1, r0, r7
 8000576:	4299      	cmp	r1, r3
 8000578:	d908      	bls.n	800058c <__udivmoddi4+0x24c>
 800057a:	eb1c 0303 	adds.w	r3, ip, r3
 800057e:	f100 36ff 	add.w	r6, r0, #4294967295
 8000582:	d22c      	bcs.n	80005de <__udivmoddi4+0x29e>
 8000584:	4299      	cmp	r1, r3
 8000586:	d92a      	bls.n	80005de <__udivmoddi4+0x29e>
 8000588:	3802      	subs	r0, #2
 800058a:	4463      	add	r3, ip
 800058c:	1a5b      	subs	r3, r3, r1
 800058e:	b2a4      	uxth	r4, r4
 8000590:	fbb3 f1f8 	udiv	r1, r3, r8
 8000594:	fb08 3311 	mls	r3, r8, r1, r3
 8000598:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800059c:	fb01 f307 	mul.w	r3, r1, r7
 80005a0:	42a3      	cmp	r3, r4
 80005a2:	d908      	bls.n	80005b6 <__udivmoddi4+0x276>
 80005a4:	eb1c 0404 	adds.w	r4, ip, r4
 80005a8:	f101 36ff 	add.w	r6, r1, #4294967295
 80005ac:	d213      	bcs.n	80005d6 <__udivmoddi4+0x296>
 80005ae:	42a3      	cmp	r3, r4
 80005b0:	d911      	bls.n	80005d6 <__udivmoddi4+0x296>
 80005b2:	3902      	subs	r1, #2
 80005b4:	4464      	add	r4, ip
 80005b6:	1ae4      	subs	r4, r4, r3
 80005b8:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80005bc:	e739      	b.n	8000432 <__udivmoddi4+0xf2>
 80005be:	4604      	mov	r4, r0
 80005c0:	e6f0      	b.n	80003a4 <__udivmoddi4+0x64>
 80005c2:	4608      	mov	r0, r1
 80005c4:	e706      	b.n	80003d4 <__udivmoddi4+0x94>
 80005c6:	45c8      	cmp	r8, r9
 80005c8:	d2ae      	bcs.n	8000528 <__udivmoddi4+0x1e8>
 80005ca:	ebb9 0e02 	subs.w	lr, r9, r2
 80005ce:	eb63 0c07 	sbc.w	ip, r3, r7
 80005d2:	3801      	subs	r0, #1
 80005d4:	e7a8      	b.n	8000528 <__udivmoddi4+0x1e8>
 80005d6:	4631      	mov	r1, r6
 80005d8:	e7ed      	b.n	80005b6 <__udivmoddi4+0x276>
 80005da:	4603      	mov	r3, r0
 80005dc:	e799      	b.n	8000512 <__udivmoddi4+0x1d2>
 80005de:	4630      	mov	r0, r6
 80005e0:	e7d4      	b.n	800058c <__udivmoddi4+0x24c>
 80005e2:	46d6      	mov	lr, sl
 80005e4:	e77f      	b.n	80004e6 <__udivmoddi4+0x1a6>
 80005e6:	4463      	add	r3, ip
 80005e8:	3802      	subs	r0, #2
 80005ea:	e74d      	b.n	8000488 <__udivmoddi4+0x148>
 80005ec:	4606      	mov	r6, r0
 80005ee:	4623      	mov	r3, r4
 80005f0:	4608      	mov	r0, r1
 80005f2:	e70f      	b.n	8000414 <__udivmoddi4+0xd4>
 80005f4:	3e02      	subs	r6, #2
 80005f6:	4463      	add	r3, ip
 80005f8:	e730      	b.n	800045c <__udivmoddi4+0x11c>
 80005fa:	bf00      	nop

080005fc <__aeabi_idiv0>:
 80005fc:	4770      	bx	lr
 80005fe:	bf00      	nop

08000600 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000600:	b580      	push	{r7, lr}
 8000602:	b084      	sub	sp, #16
 8000604:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
  //SCB->VTOR = FLASH_BASE; // fuck this stupid bug kys
  /* USER CODE END 1 */

  /* MPU Configuration--------------------------------------------------------*/
  MPU_Config();
 8000606:	f000 fd2f 	bl	8001068 <MPU_Config>
  \details Turns on I-Cache
  */
__STATIC_FORCEINLINE void SCB_EnableICache (void)
{
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 800060a:	4b45      	ldr	r3, [pc, #276]	@ (8000720 <main+0x120>)
 800060c:	695b      	ldr	r3, [r3, #20]
 800060e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000612:	2b00      	cmp	r3, #0
 8000614:	d11b      	bne.n	800064e <main+0x4e>
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8000616:	f3bf 8f4f 	dsb	sy
}
 800061a:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800061c:	f3bf 8f6f 	isb	sy
}
 8000620:	bf00      	nop

    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8000622:	4b3f      	ldr	r3, [pc, #252]	@ (8000720 <main+0x120>)
 8000624:	2200      	movs	r2, #0
 8000626:	f8c3 2250 	str.w	r2, [r3, #592]	@ 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 800062a:	f3bf 8f4f 	dsb	sy
}
 800062e:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000630:	f3bf 8f6f 	isb	sy
}
 8000634:	bf00      	nop
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 8000636:	4b3a      	ldr	r3, [pc, #232]	@ (8000720 <main+0x120>)
 8000638:	695b      	ldr	r3, [r3, #20]
 800063a:	4a39      	ldr	r2, [pc, #228]	@ (8000720 <main+0x120>)
 800063c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000640:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8000642:	f3bf 8f4f 	dsb	sy
}
 8000646:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000648:	f3bf 8f6f 	isb	sy
}
 800064c:	e000      	b.n	8000650 <main+0x50>
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 800064e:	bf00      	nop
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
 8000650:	4b33      	ldr	r3, [pc, #204]	@ (8000720 <main+0x120>)
 8000652:	695b      	ldr	r3, [r3, #20]
 8000654:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000658:	2b00      	cmp	r3, #0
 800065a:	d138      	bne.n	80006ce <main+0xce>

    SCB->CSSELR = 0U;                       /* select Level 1 data cache */
 800065c:	4b30      	ldr	r3, [pc, #192]	@ (8000720 <main+0x120>)
 800065e:	2200      	movs	r2, #0
 8000660:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 8000664:	f3bf 8f4f 	dsb	sy
}
 8000668:	bf00      	nop
    __DSB();

    ccsidr = SCB->CCSIDR;
 800066a:	4b2d      	ldr	r3, [pc, #180]	@ (8000720 <main+0x120>)
 800066c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8000670:	60fb      	str	r3, [r7, #12]

                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 8000672:	68fb      	ldr	r3, [r7, #12]
 8000674:	0b5b      	lsrs	r3, r3, #13
 8000676:	f3c3 030e 	ubfx	r3, r3, #0, #15
 800067a:	60bb      	str	r3, [r7, #8]
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 800067c:	68fb      	ldr	r3, [r7, #12]
 800067e:	08db      	lsrs	r3, r3, #3
 8000680:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8000684:	607b      	str	r3, [r7, #4]
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8000686:	68bb      	ldr	r3, [r7, #8]
 8000688:	015a      	lsls	r2, r3, #5
 800068a:	f643 73e0 	movw	r3, #16352	@ 0x3fe0
 800068e:	4013      	ands	r3, r2
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
 8000690:	687a      	ldr	r2, [r7, #4]
 8000692:	0792      	lsls	r2, r2, #30
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8000694:	4922      	ldr	r1, [pc, #136]	@ (8000720 <main+0x120>)
 8000696:	4313      	orrs	r3, r2
 8000698:	f8c1 3260 	str.w	r3, [r1, #608]	@ 0x260
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 800069c:	687b      	ldr	r3, [r7, #4]
 800069e:	1e5a      	subs	r2, r3, #1
 80006a0:	607a      	str	r2, [r7, #4]
 80006a2:	2b00      	cmp	r3, #0
 80006a4:	d1ef      	bne.n	8000686 <main+0x86>
    } while(sets-- != 0U);
 80006a6:	68bb      	ldr	r3, [r7, #8]
 80006a8:	1e5a      	subs	r2, r3, #1
 80006aa:	60ba      	str	r2, [r7, #8]
 80006ac:	2b00      	cmp	r3, #0
 80006ae:	d1e5      	bne.n	800067c <main+0x7c>
  __ASM volatile ("dsb 0xF":::"memory");
 80006b0:	f3bf 8f4f 	dsb	sy
}
 80006b4:	bf00      	nop
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 80006b6:	4b1a      	ldr	r3, [pc, #104]	@ (8000720 <main+0x120>)
 80006b8:	695b      	ldr	r3, [r3, #20]
 80006ba:	4a19      	ldr	r2, [pc, #100]	@ (8000720 <main+0x120>)
 80006bc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80006c0:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 80006c2:	f3bf 8f4f 	dsb	sy
}
 80006c6:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80006c8:	f3bf 8f6f 	isb	sy
}
 80006cc:	e000      	b.n	80006d0 <main+0xd0>
    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
 80006ce:	bf00      	nop
  SCB_EnableDCache();

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80006d0:	f001 fb0c 	bl	8001cec <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80006d4:	f000 f82c 	bl	8000730 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80006d8:	f000 fb8c 	bl	8000df4 <MX_GPIO_Init>
  MX_I2C1_Init();
 80006dc:	f000 f8e6 	bl	80008ac <MX_I2C1_Init>
  MX_I2C5_Init();
 80006e0:	f000 f924 	bl	800092c <MX_I2C5_Init>
  MX_SPI1_Init();
 80006e4:	f000 f98a 	bl	80009fc <MX_SPI1_Init>
  MX_SPI2_Init();
 80006e8:	f000 f9de 	bl	8000aa8 <MX_SPI2_Init>
  MX_SPI4_Init();
 80006ec:	f000 fa32 	bl	8000b54 <MX_SPI4_Init>
  MX_SPI5_Init();
 80006f0:	f000 fa86 	bl	8000c00 <MX_SPI5_Init>
  MX_SPI6_Init();
 80006f4:	f000 fada 	bl	8000cac <MX_SPI6_Init>
  MX_USART10_UART_Init();
 80006f8:	f000 fb30 	bl	8000d5c <MX_USART10_UART_Init>
  MX_RTC_Init();
 80006fc:	f000 f956 	bl	80009ac <MX_RTC_Init>
  MX_ETH_Init();
 8000700:	f000 f888 	bl	8000814 <MX_ETH_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000704:	f007 fa3a 	bl	8007b7c <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8000708:	4a06      	ldr	r2, [pc, #24]	@ (8000724 <main+0x124>)
 800070a:	2100      	movs	r1, #0
 800070c:	4806      	ldr	r0, [pc, #24]	@ (8000728 <main+0x128>)
 800070e:	f007 fa7f 	bl	8007c10 <osThreadNew>
 8000712:	4603      	mov	r3, r0
 8000714:	4a05      	ldr	r2, [pc, #20]	@ (800072c <main+0x12c>)
 8000716:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8000718:	f007 fa54 	bl	8007bc4 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800071c:	bf00      	nop
 800071e:	e7fd      	b.n	800071c <main+0x11c>
 8000720:	e000ed00 	.word	0xe000ed00
 8000724:	0800a844 	.word	0x0800a844
 8000728:	08001055 	.word	0x08001055
 800072c:	24000570 	.word	0x24000570

08000730 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000730:	b580      	push	{r7, lr}
 8000732:	b09c      	sub	sp, #112	@ 0x70
 8000734:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000736:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800073a:	224c      	movs	r2, #76	@ 0x4c
 800073c:	2100      	movs	r1, #0
 800073e:	4618      	mov	r0, r3
 8000740:	f009 ff7a 	bl	800a638 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000744:	1d3b      	adds	r3, r7, #4
 8000746:	2220      	movs	r2, #32
 8000748:	2100      	movs	r1, #0
 800074a:	4618      	mov	r0, r3
 800074c:	f009 ff74 	bl	800a638 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8000750:	2002      	movs	r0, #2
 8000752:	f002 fced 	bl	8003130 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000756:	2300      	movs	r3, #0
 8000758:	603b      	str	r3, [r7, #0]
 800075a:	4b2d      	ldr	r3, [pc, #180]	@ (8000810 <SystemClock_Config+0xe0>)
 800075c:	699b      	ldr	r3, [r3, #24]
 800075e:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8000762:	4a2b      	ldr	r2, [pc, #172]	@ (8000810 <SystemClock_Config+0xe0>)
 8000764:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000768:	6193      	str	r3, [r2, #24]
 800076a:	4b29      	ldr	r3, [pc, #164]	@ (8000810 <SystemClock_Config+0xe0>)
 800076c:	699b      	ldr	r3, [r3, #24]
 800076e:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000772:	603b      	str	r3, [r7, #0]
 8000774:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000776:	bf00      	nop
 8000778:	4b25      	ldr	r3, [pc, #148]	@ (8000810 <SystemClock_Config+0xe0>)
 800077a:	699b      	ldr	r3, [r3, #24]
 800077c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000780:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8000784:	d1f8      	bne.n	8000778 <SystemClock_Config+0x48>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI;
 8000786:	230a      	movs	r3, #10
 8000788:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 800078a:	2301      	movs	r3, #1
 800078c:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSICalibrationValue = 64;
 800078e:	2340      	movs	r3, #64	@ 0x40
 8000790:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8000792:	2301      	movs	r3, #1
 8000794:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000796:	2302      	movs	r3, #2
 8000798:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800079a:	2300      	movs	r3, #0
 800079c:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLM = 4;
 800079e:	2304      	movs	r3, #4
 80007a0:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLN = 12;
 80007a2:	230c      	movs	r3, #12
 80007a4:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLP = 3;
 80007a6:	2303      	movs	r3, #3
 80007a8:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLQ = 3;
 80007aa:	2303      	movs	r3, #3
 80007ac:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 80007ae:	2302      	movs	r3, #2
 80007b0:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 80007b2:	230c      	movs	r3, #12
 80007b4:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 80007b6:	2300      	movs	r3, #0
 80007b8:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 80007ba:	2300      	movs	r3, #0
 80007bc:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80007be:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80007c2:	4618      	mov	r0, r3
 80007c4:	f002 fd0e 	bl	80031e4 <HAL_RCC_OscConfig>
 80007c8:	4603      	mov	r3, r0
 80007ca:	2b00      	cmp	r3, #0
 80007cc:	d001      	beq.n	80007d2 <SystemClock_Config+0xa2>
  {
    Error_Handler();
 80007ce:	f000 fcaf 	bl	8001130 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80007d2:	233f      	movs	r3, #63	@ 0x3f
 80007d4:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80007d6:	2303      	movs	r3, #3
 80007d8:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 80007da:	2300      	movs	r3, #0
 80007dc:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 80007de:	2300      	movs	r3, #0
 80007e0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 80007e2:	2340      	movs	r3, #64	@ 0x40
 80007e4:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 80007e6:	2340      	movs	r3, #64	@ 0x40
 80007e8:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 80007ea:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80007ee:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 80007f0:	2340      	movs	r3, #64	@ 0x40
 80007f2:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80007f4:	1d3b      	adds	r3, r7, #4
 80007f6:	2101      	movs	r1, #1
 80007f8:	4618      	mov	r0, r3
 80007fa:	f003 f8cd 	bl	8003998 <HAL_RCC_ClockConfig>
 80007fe:	4603      	mov	r3, r0
 8000800:	2b00      	cmp	r3, #0
 8000802:	d001      	beq.n	8000808 <SystemClock_Config+0xd8>
  {
    Error_Handler();
 8000804:	f000 fc94 	bl	8001130 <Error_Handler>
  }
}
 8000808:	bf00      	nop
 800080a:	3770      	adds	r7, #112	@ 0x70
 800080c:	46bd      	mov	sp, r7
 800080e:	bd80      	pop	{r7, pc}
 8000810:	58024800 	.word	0x58024800

08000814 <MX_ETH_Init>:
  * @brief ETH Initialization Function
  * @param None
  * @retval None
  */
static void MX_ETH_Init(void)
{
 8000814:	b580      	push	{r7, lr}
 8000816:	af00      	add	r7, sp, #0
   static uint8_t MACAddr[6];

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 8000818:	4b1e      	ldr	r3, [pc, #120]	@ (8000894 <MX_ETH_Init+0x80>)
 800081a:	4a1f      	ldr	r2, [pc, #124]	@ (8000898 <MX_ETH_Init+0x84>)
 800081c:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 800081e:	4b1f      	ldr	r3, [pc, #124]	@ (800089c <MX_ETH_Init+0x88>)
 8000820:	2200      	movs	r2, #0
 8000822:	701a      	strb	r2, [r3, #0]
  MACAddr[1] = 0x80;
 8000824:	4b1d      	ldr	r3, [pc, #116]	@ (800089c <MX_ETH_Init+0x88>)
 8000826:	2280      	movs	r2, #128	@ 0x80
 8000828:	705a      	strb	r2, [r3, #1]
  MACAddr[2] = 0xE1;
 800082a:	4b1c      	ldr	r3, [pc, #112]	@ (800089c <MX_ETH_Init+0x88>)
 800082c:	22e1      	movs	r2, #225	@ 0xe1
 800082e:	709a      	strb	r2, [r3, #2]
  MACAddr[3] = 0x00;
 8000830:	4b1a      	ldr	r3, [pc, #104]	@ (800089c <MX_ETH_Init+0x88>)
 8000832:	2200      	movs	r2, #0
 8000834:	70da      	strb	r2, [r3, #3]
  MACAddr[4] = 0x00;
 8000836:	4b19      	ldr	r3, [pc, #100]	@ (800089c <MX_ETH_Init+0x88>)
 8000838:	2200      	movs	r2, #0
 800083a:	711a      	strb	r2, [r3, #4]
  MACAddr[5] = 0x00;
 800083c:	4b17      	ldr	r3, [pc, #92]	@ (800089c <MX_ETH_Init+0x88>)
 800083e:	2200      	movs	r2, #0
 8000840:	715a      	strb	r2, [r3, #5]
  heth.Init.MACAddr = &MACAddr[0];
 8000842:	4b14      	ldr	r3, [pc, #80]	@ (8000894 <MX_ETH_Init+0x80>)
 8000844:	4a15      	ldr	r2, [pc, #84]	@ (800089c <MX_ETH_Init+0x88>)
 8000846:	605a      	str	r2, [r3, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 8000848:	4b12      	ldr	r3, [pc, #72]	@ (8000894 <MX_ETH_Init+0x80>)
 800084a:	2201      	movs	r2, #1
 800084c:	721a      	strb	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 800084e:	4b11      	ldr	r3, [pc, #68]	@ (8000894 <MX_ETH_Init+0x80>)
 8000850:	4a13      	ldr	r2, [pc, #76]	@ (80008a0 <MX_ETH_Init+0x8c>)
 8000852:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 8000854:	4b0f      	ldr	r3, [pc, #60]	@ (8000894 <MX_ETH_Init+0x80>)
 8000856:	4a13      	ldr	r2, [pc, #76]	@ (80008a4 <MX_ETH_Init+0x90>)
 8000858:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1524;
 800085a:	4b0e      	ldr	r3, [pc, #56]	@ (8000894 <MX_ETH_Init+0x80>)
 800085c:	f240 52f4 	movw	r2, #1524	@ 0x5f4
 8000860:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 8000862:	480c      	ldr	r0, [pc, #48]	@ (8000894 <MX_ETH_Init+0x80>)
 8000864:	f001 fc0a 	bl	800207c <HAL_ETH_Init>
 8000868:	4603      	mov	r3, r0
 800086a:	2b00      	cmp	r3, #0
 800086c:	d001      	beq.n	8000872 <MX_ETH_Init+0x5e>
  {
    Error_Handler();
 800086e:	f000 fc5f 	bl	8001130 <Error_Handler>
  }

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 8000872:	2238      	movs	r2, #56	@ 0x38
 8000874:	2100      	movs	r1, #0
 8000876:	480c      	ldr	r0, [pc, #48]	@ (80008a8 <MX_ETH_Init+0x94>)
 8000878:	f009 fede 	bl	800a638 <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 800087c:	4b0a      	ldr	r3, [pc, #40]	@ (80008a8 <MX_ETH_Init+0x94>)
 800087e:	2221      	movs	r2, #33	@ 0x21
 8000880:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 8000882:	4b09      	ldr	r3, [pc, #36]	@ (80008a8 <MX_ETH_Init+0x94>)
 8000884:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 8000888:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 800088a:	4b07      	ldr	r3, [pc, #28]	@ (80008a8 <MX_ETH_Init+0x94>)
 800088c:	2200      	movs	r2, #0
 800088e:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 8000890:	bf00      	nop
 8000892:	bd80      	pop	{r7, pc}
 8000894:	240000b8 	.word	0x240000b8
 8000898:	40028000 	.word	0x40028000
 800089c:	24000574 	.word	0x24000574
 80008a0:	30000100 	.word	0x30000100
 80008a4:	30000000 	.word	0x30000000
 80008a8:	24000080 	.word	0x24000080

080008ac <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80008ac:	b580      	push	{r7, lr}
 80008ae:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80008b0:	4b1b      	ldr	r3, [pc, #108]	@ (8000920 <MX_I2C1_Init+0x74>)
 80008b2:	4a1c      	ldr	r2, [pc, #112]	@ (8000924 <MX_I2C1_Init+0x78>)
 80008b4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00707CBB;
 80008b6:	4b1a      	ldr	r3, [pc, #104]	@ (8000920 <MX_I2C1_Init+0x74>)
 80008b8:	4a1b      	ldr	r2, [pc, #108]	@ (8000928 <MX_I2C1_Init+0x7c>)
 80008ba:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80008bc:	4b18      	ldr	r3, [pc, #96]	@ (8000920 <MX_I2C1_Init+0x74>)
 80008be:	2200      	movs	r2, #0
 80008c0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80008c2:	4b17      	ldr	r3, [pc, #92]	@ (8000920 <MX_I2C1_Init+0x74>)
 80008c4:	2201      	movs	r2, #1
 80008c6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80008c8:	4b15      	ldr	r3, [pc, #84]	@ (8000920 <MX_I2C1_Init+0x74>)
 80008ca:	2200      	movs	r2, #0
 80008cc:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80008ce:	4b14      	ldr	r3, [pc, #80]	@ (8000920 <MX_I2C1_Init+0x74>)
 80008d0:	2200      	movs	r2, #0
 80008d2:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80008d4:	4b12      	ldr	r3, [pc, #72]	@ (8000920 <MX_I2C1_Init+0x74>)
 80008d6:	2200      	movs	r2, #0
 80008d8:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80008da:	4b11      	ldr	r3, [pc, #68]	@ (8000920 <MX_I2C1_Init+0x74>)
 80008dc:	2200      	movs	r2, #0
 80008de:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80008e0:	4b0f      	ldr	r3, [pc, #60]	@ (8000920 <MX_I2C1_Init+0x74>)
 80008e2:	2200      	movs	r2, #0
 80008e4:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80008e6:	480e      	ldr	r0, [pc, #56]	@ (8000920 <MX_I2C1_Init+0x74>)
 80008e8:	f002 faee 	bl	8002ec8 <HAL_I2C_Init>
 80008ec:	4603      	mov	r3, r0
 80008ee:	2b00      	cmp	r3, #0
 80008f0:	d001      	beq.n	80008f6 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80008f2:	f000 fc1d 	bl	8001130 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80008f6:	2100      	movs	r1, #0
 80008f8:	4809      	ldr	r0, [pc, #36]	@ (8000920 <MX_I2C1_Init+0x74>)
 80008fa:	f002 fb81 	bl	8003000 <HAL_I2CEx_ConfigAnalogFilter>
 80008fe:	4603      	mov	r3, r0
 8000900:	2b00      	cmp	r3, #0
 8000902:	d001      	beq.n	8000908 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000904:	f000 fc14 	bl	8001130 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000908:	2100      	movs	r1, #0
 800090a:	4805      	ldr	r0, [pc, #20]	@ (8000920 <MX_I2C1_Init+0x74>)
 800090c:	f002 fbc3 	bl	8003096 <HAL_I2CEx_ConfigDigitalFilter>
 8000910:	4603      	mov	r3, r0
 8000912:	2b00      	cmp	r3, #0
 8000914:	d001      	beq.n	800091a <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000916:	f000 fc0b 	bl	8001130 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800091a:	bf00      	nop
 800091c:	bd80      	pop	{r7, pc}
 800091e:	bf00      	nop
 8000920:	24000168 	.word	0x24000168
 8000924:	40005400 	.word	0x40005400
 8000928:	00707cbb 	.word	0x00707cbb

0800092c <MX_I2C5_Init>:
  * @brief I2C5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C5_Init(void)
{
 800092c:	b580      	push	{r7, lr}
 800092e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C5_Init 0 */

  /* USER CODE BEGIN I2C5_Init 1 */

  /* USER CODE END I2C5_Init 1 */
  hi2c5.Instance = I2C5;
 8000930:	4b1b      	ldr	r3, [pc, #108]	@ (80009a0 <MX_I2C5_Init+0x74>)
 8000932:	4a1c      	ldr	r2, [pc, #112]	@ (80009a4 <MX_I2C5_Init+0x78>)
 8000934:	601a      	str	r2, [r3, #0]
  hi2c5.Init.Timing = 0x00707CBB;
 8000936:	4b1a      	ldr	r3, [pc, #104]	@ (80009a0 <MX_I2C5_Init+0x74>)
 8000938:	4a1b      	ldr	r2, [pc, #108]	@ (80009a8 <MX_I2C5_Init+0x7c>)
 800093a:	605a      	str	r2, [r3, #4]
  hi2c5.Init.OwnAddress1 = 0;
 800093c:	4b18      	ldr	r3, [pc, #96]	@ (80009a0 <MX_I2C5_Init+0x74>)
 800093e:	2200      	movs	r2, #0
 8000940:	609a      	str	r2, [r3, #8]
  hi2c5.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000942:	4b17      	ldr	r3, [pc, #92]	@ (80009a0 <MX_I2C5_Init+0x74>)
 8000944:	2201      	movs	r2, #1
 8000946:	60da      	str	r2, [r3, #12]
  hi2c5.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000948:	4b15      	ldr	r3, [pc, #84]	@ (80009a0 <MX_I2C5_Init+0x74>)
 800094a:	2200      	movs	r2, #0
 800094c:	611a      	str	r2, [r3, #16]
  hi2c5.Init.OwnAddress2 = 0;
 800094e:	4b14      	ldr	r3, [pc, #80]	@ (80009a0 <MX_I2C5_Init+0x74>)
 8000950:	2200      	movs	r2, #0
 8000952:	615a      	str	r2, [r3, #20]
  hi2c5.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000954:	4b12      	ldr	r3, [pc, #72]	@ (80009a0 <MX_I2C5_Init+0x74>)
 8000956:	2200      	movs	r2, #0
 8000958:	619a      	str	r2, [r3, #24]
  hi2c5.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800095a:	4b11      	ldr	r3, [pc, #68]	@ (80009a0 <MX_I2C5_Init+0x74>)
 800095c:	2200      	movs	r2, #0
 800095e:	61da      	str	r2, [r3, #28]
  hi2c5.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000960:	4b0f      	ldr	r3, [pc, #60]	@ (80009a0 <MX_I2C5_Init+0x74>)
 8000962:	2200      	movs	r2, #0
 8000964:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c5) != HAL_OK)
 8000966:	480e      	ldr	r0, [pc, #56]	@ (80009a0 <MX_I2C5_Init+0x74>)
 8000968:	f002 faae 	bl	8002ec8 <HAL_I2C_Init>
 800096c:	4603      	mov	r3, r0
 800096e:	2b00      	cmp	r3, #0
 8000970:	d001      	beq.n	8000976 <MX_I2C5_Init+0x4a>
  {
    Error_Handler();
 8000972:	f000 fbdd 	bl	8001130 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c5, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000976:	2100      	movs	r1, #0
 8000978:	4809      	ldr	r0, [pc, #36]	@ (80009a0 <MX_I2C5_Init+0x74>)
 800097a:	f002 fb41 	bl	8003000 <HAL_I2CEx_ConfigAnalogFilter>
 800097e:	4603      	mov	r3, r0
 8000980:	2b00      	cmp	r3, #0
 8000982:	d001      	beq.n	8000988 <MX_I2C5_Init+0x5c>
  {
    Error_Handler();
 8000984:	f000 fbd4 	bl	8001130 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c5, 0) != HAL_OK)
 8000988:	2100      	movs	r1, #0
 800098a:	4805      	ldr	r0, [pc, #20]	@ (80009a0 <MX_I2C5_Init+0x74>)
 800098c:	f002 fb83 	bl	8003096 <HAL_I2CEx_ConfigDigitalFilter>
 8000990:	4603      	mov	r3, r0
 8000992:	2b00      	cmp	r3, #0
 8000994:	d001      	beq.n	800099a <MX_I2C5_Init+0x6e>
  {
    Error_Handler();
 8000996:	f000 fbcb 	bl	8001130 <Error_Handler>
  }
  /* USER CODE BEGIN I2C5_Init 2 */

  /* USER CODE END I2C5_Init 2 */

}
 800099a:	bf00      	nop
 800099c:	bd80      	pop	{r7, pc}
 800099e:	bf00      	nop
 80009a0:	240001bc 	.word	0x240001bc
 80009a4:	40006400 	.word	0x40006400
 80009a8:	00707cbb 	.word	0x00707cbb

080009ac <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 80009ac:	b580      	push	{r7, lr}
 80009ae:	af00      	add	r7, sp, #0

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 80009b0:	4b10      	ldr	r3, [pc, #64]	@ (80009f4 <MX_RTC_Init+0x48>)
 80009b2:	4a11      	ldr	r2, [pc, #68]	@ (80009f8 <MX_RTC_Init+0x4c>)
 80009b4:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 80009b6:	4b0f      	ldr	r3, [pc, #60]	@ (80009f4 <MX_RTC_Init+0x48>)
 80009b8:	2200      	movs	r2, #0
 80009ba:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 80009bc:	4b0d      	ldr	r3, [pc, #52]	@ (80009f4 <MX_RTC_Init+0x48>)
 80009be:	227f      	movs	r2, #127	@ 0x7f
 80009c0:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 80009c2:	4b0c      	ldr	r3, [pc, #48]	@ (80009f4 <MX_RTC_Init+0x48>)
 80009c4:	22ff      	movs	r2, #255	@ 0xff
 80009c6:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 80009c8:	4b0a      	ldr	r3, [pc, #40]	@ (80009f4 <MX_RTC_Init+0x48>)
 80009ca:	2200      	movs	r2, #0
 80009cc:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 80009ce:	4b09      	ldr	r3, [pc, #36]	@ (80009f4 <MX_RTC_Init+0x48>)
 80009d0:	2200      	movs	r2, #0
 80009d2:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 80009d4:	4b07      	ldr	r3, [pc, #28]	@ (80009f4 <MX_RTC_Init+0x48>)
 80009d6:	2200      	movs	r2, #0
 80009d8:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 80009da:	4b06      	ldr	r3, [pc, #24]	@ (80009f4 <MX_RTC_Init+0x48>)
 80009dc:	2200      	movs	r2, #0
 80009de:	615a      	str	r2, [r3, #20]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 80009e0:	4804      	ldr	r0, [pc, #16]	@ (80009f4 <MX_RTC_Init+0x48>)
 80009e2:	f005 f969 	bl	8005cb8 <HAL_RTC_Init>
 80009e6:	4603      	mov	r3, r0
 80009e8:	2b00      	cmp	r3, #0
 80009ea:	d001      	beq.n	80009f0 <MX_RTC_Init+0x44>
  {
    Error_Handler();
 80009ec:	f000 fba0 	bl	8001130 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 80009f0:	bf00      	nop
 80009f2:	bd80      	pop	{r7, pc}
 80009f4:	24000210 	.word	0x24000210
 80009f8:	58004000 	.word	0x58004000

080009fc <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80009fc:	b580      	push	{r7, lr}
 80009fe:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000a00:	4b27      	ldr	r3, [pc, #156]	@ (8000aa0 <MX_SPI1_Init+0xa4>)
 8000a02:	4a28      	ldr	r2, [pc, #160]	@ (8000aa4 <MX_SPI1_Init+0xa8>)
 8000a04:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000a06:	4b26      	ldr	r3, [pc, #152]	@ (8000aa0 <MX_SPI1_Init+0xa4>)
 8000a08:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 8000a0c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000a0e:	4b24      	ldr	r3, [pc, #144]	@ (8000aa0 <MX_SPI1_Init+0xa4>)
 8000a10:	2200      	movs	r2, #0
 8000a12:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000a14:	4b22      	ldr	r3, [pc, #136]	@ (8000aa0 <MX_SPI1_Init+0xa4>)
 8000a16:	2207      	movs	r2, #7
 8000a18:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000a1a:	4b21      	ldr	r3, [pc, #132]	@ (8000aa0 <MX_SPI1_Init+0xa4>)
 8000a1c:	2200      	movs	r2, #0
 8000a1e:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000a20:	4b1f      	ldr	r3, [pc, #124]	@ (8000aa0 <MX_SPI1_Init+0xa4>)
 8000a22:	2200      	movs	r2, #0
 8000a24:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000a26:	4b1e      	ldr	r3, [pc, #120]	@ (8000aa0 <MX_SPI1_Init+0xa4>)
 8000a28:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8000a2c:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 8000a2e:	4b1c      	ldr	r3, [pc, #112]	@ (8000aa0 <MX_SPI1_Init+0xa4>)
 8000a30:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 8000a34:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000a36:	4b1a      	ldr	r3, [pc, #104]	@ (8000aa0 <MX_SPI1_Init+0xa4>)
 8000a38:	2200      	movs	r2, #0
 8000a3a:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000a3c:	4b18      	ldr	r3, [pc, #96]	@ (8000aa0 <MX_SPI1_Init+0xa4>)
 8000a3e:	2200      	movs	r2, #0
 8000a40:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000a42:	4b17      	ldr	r3, [pc, #92]	@ (8000aa0 <MX_SPI1_Init+0xa4>)
 8000a44:	2200      	movs	r2, #0
 8000a46:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 0x0;
 8000a48:	4b15      	ldr	r3, [pc, #84]	@ (8000aa0 <MX_SPI1_Init+0xa4>)
 8000a4a:	2200      	movs	r2, #0
 8000a4c:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000a4e:	4b14      	ldr	r3, [pc, #80]	@ (8000aa0 <MX_SPI1_Init+0xa4>)
 8000a50:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000a54:	635a      	str	r2, [r3, #52]	@ 0x34
  hspi1.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8000a56:	4b12      	ldr	r3, [pc, #72]	@ (8000aa0 <MX_SPI1_Init+0xa4>)
 8000a58:	2200      	movs	r2, #0
 8000a5a:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi1.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8000a5c:	4b10      	ldr	r3, [pc, #64]	@ (8000aa0 <MX_SPI1_Init+0xa4>)
 8000a5e:	2200      	movs	r2, #0
 8000a60:	63da      	str	r2, [r3, #60]	@ 0x3c
  hspi1.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8000a62:	4b0f      	ldr	r3, [pc, #60]	@ (8000aa0 <MX_SPI1_Init+0xa4>)
 8000a64:	2200      	movs	r2, #0
 8000a66:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi1.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8000a68:	4b0d      	ldr	r3, [pc, #52]	@ (8000aa0 <MX_SPI1_Init+0xa4>)
 8000a6a:	2200      	movs	r2, #0
 8000a6c:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi1.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8000a6e:	4b0c      	ldr	r3, [pc, #48]	@ (8000aa0 <MX_SPI1_Init+0xa4>)
 8000a70:	2200      	movs	r2, #0
 8000a72:	649a      	str	r2, [r3, #72]	@ 0x48
  hspi1.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8000a74:	4b0a      	ldr	r3, [pc, #40]	@ (8000aa0 <MX_SPI1_Init+0xa4>)
 8000a76:	2200      	movs	r2, #0
 8000a78:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi1.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8000a7a:	4b09      	ldr	r3, [pc, #36]	@ (8000aa0 <MX_SPI1_Init+0xa4>)
 8000a7c:	2200      	movs	r2, #0
 8000a7e:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi1.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8000a80:	4b07      	ldr	r3, [pc, #28]	@ (8000aa0 <MX_SPI1_Init+0xa4>)
 8000a82:	2200      	movs	r2, #0
 8000a84:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi1.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8000a86:	4b06      	ldr	r3, [pc, #24]	@ (8000aa0 <MX_SPI1_Init+0xa4>)
 8000a88:	2200      	movs	r2, #0
 8000a8a:	659a      	str	r2, [r3, #88]	@ 0x58
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000a8c:	4804      	ldr	r0, [pc, #16]	@ (8000aa0 <MX_SPI1_Init+0xa4>)
 8000a8e:	f005 fa2b 	bl	8005ee8 <HAL_SPI_Init>
 8000a92:	4603      	mov	r3, r0
 8000a94:	2b00      	cmp	r3, #0
 8000a96:	d001      	beq.n	8000a9c <MX_SPI1_Init+0xa0>
  {
    Error_Handler();
 8000a98:	f000 fb4a 	bl	8001130 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000a9c:	bf00      	nop
 8000a9e:	bd80      	pop	{r7, pc}
 8000aa0:	24000234 	.word	0x24000234
 8000aa4:	40013000 	.word	0x40013000

08000aa8 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8000aa8:	b580      	push	{r7, lr}
 8000aaa:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8000aac:	4b27      	ldr	r3, [pc, #156]	@ (8000b4c <MX_SPI2_Init+0xa4>)
 8000aae:	4a28      	ldr	r2, [pc, #160]	@ (8000b50 <MX_SPI2_Init+0xa8>)
 8000ab0:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8000ab2:	4b26      	ldr	r3, [pc, #152]	@ (8000b4c <MX_SPI2_Init+0xa4>)
 8000ab4:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 8000ab8:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8000aba:	4b24      	ldr	r3, [pc, #144]	@ (8000b4c <MX_SPI2_Init+0xa4>)
 8000abc:	2200      	movs	r2, #0
 8000abe:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_4BIT;
 8000ac0:	4b22      	ldr	r3, [pc, #136]	@ (8000b4c <MX_SPI2_Init+0xa4>)
 8000ac2:	2203      	movs	r2, #3
 8000ac4:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000ac6:	4b21      	ldr	r3, [pc, #132]	@ (8000b4c <MX_SPI2_Init+0xa4>)
 8000ac8:	2200      	movs	r2, #0
 8000aca:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000acc:	4b1f      	ldr	r3, [pc, #124]	@ (8000b4c <MX_SPI2_Init+0xa4>)
 8000ace:	2200      	movs	r2, #0
 8000ad0:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8000ad2:	4b1e      	ldr	r3, [pc, #120]	@ (8000b4c <MX_SPI2_Init+0xa4>)
 8000ad4:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8000ad8:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000ada:	4b1c      	ldr	r3, [pc, #112]	@ (8000b4c <MX_SPI2_Init+0xa4>)
 8000adc:	2200      	movs	r2, #0
 8000ade:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000ae0:	4b1a      	ldr	r3, [pc, #104]	@ (8000b4c <MX_SPI2_Init+0xa4>)
 8000ae2:	2200      	movs	r2, #0
 8000ae4:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8000ae6:	4b19      	ldr	r3, [pc, #100]	@ (8000b4c <MX_SPI2_Init+0xa4>)
 8000ae8:	2200      	movs	r2, #0
 8000aea:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000aec:	4b17      	ldr	r3, [pc, #92]	@ (8000b4c <MX_SPI2_Init+0xa4>)
 8000aee:	2200      	movs	r2, #0
 8000af0:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 0x0;
 8000af2:	4b16      	ldr	r3, [pc, #88]	@ (8000b4c <MX_SPI2_Init+0xa4>)
 8000af4:	2200      	movs	r2, #0
 8000af6:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000af8:	4b14      	ldr	r3, [pc, #80]	@ (8000b4c <MX_SPI2_Init+0xa4>)
 8000afa:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000afe:	635a      	str	r2, [r3, #52]	@ 0x34
  hspi2.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8000b00:	4b12      	ldr	r3, [pc, #72]	@ (8000b4c <MX_SPI2_Init+0xa4>)
 8000b02:	2200      	movs	r2, #0
 8000b04:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi2.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8000b06:	4b11      	ldr	r3, [pc, #68]	@ (8000b4c <MX_SPI2_Init+0xa4>)
 8000b08:	2200      	movs	r2, #0
 8000b0a:	63da      	str	r2, [r3, #60]	@ 0x3c
  hspi2.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8000b0c:	4b0f      	ldr	r3, [pc, #60]	@ (8000b4c <MX_SPI2_Init+0xa4>)
 8000b0e:	2200      	movs	r2, #0
 8000b10:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi2.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8000b12:	4b0e      	ldr	r3, [pc, #56]	@ (8000b4c <MX_SPI2_Init+0xa4>)
 8000b14:	2200      	movs	r2, #0
 8000b16:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi2.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8000b18:	4b0c      	ldr	r3, [pc, #48]	@ (8000b4c <MX_SPI2_Init+0xa4>)
 8000b1a:	2200      	movs	r2, #0
 8000b1c:	649a      	str	r2, [r3, #72]	@ 0x48
  hspi2.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8000b1e:	4b0b      	ldr	r3, [pc, #44]	@ (8000b4c <MX_SPI2_Init+0xa4>)
 8000b20:	2200      	movs	r2, #0
 8000b22:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi2.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8000b24:	4b09      	ldr	r3, [pc, #36]	@ (8000b4c <MX_SPI2_Init+0xa4>)
 8000b26:	2200      	movs	r2, #0
 8000b28:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi2.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8000b2a:	4b08      	ldr	r3, [pc, #32]	@ (8000b4c <MX_SPI2_Init+0xa4>)
 8000b2c:	2200      	movs	r2, #0
 8000b2e:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi2.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8000b30:	4b06      	ldr	r3, [pc, #24]	@ (8000b4c <MX_SPI2_Init+0xa4>)
 8000b32:	2200      	movs	r2, #0
 8000b34:	659a      	str	r2, [r3, #88]	@ 0x58
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8000b36:	4805      	ldr	r0, [pc, #20]	@ (8000b4c <MX_SPI2_Init+0xa4>)
 8000b38:	f005 f9d6 	bl	8005ee8 <HAL_SPI_Init>
 8000b3c:	4603      	mov	r3, r0
 8000b3e:	2b00      	cmp	r3, #0
 8000b40:	d001      	beq.n	8000b46 <MX_SPI2_Init+0x9e>
  {
    Error_Handler();
 8000b42:	f000 faf5 	bl	8001130 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8000b46:	bf00      	nop
 8000b48:	bd80      	pop	{r7, pc}
 8000b4a:	bf00      	nop
 8000b4c:	240002bc 	.word	0x240002bc
 8000b50:	40003800 	.word	0x40003800

08000b54 <MX_SPI4_Init>:
  * @brief SPI4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI4_Init(void)
{
 8000b54:	b580      	push	{r7, lr}
 8000b56:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI4_Init 1 */

  /* USER CODE END SPI4_Init 1 */
  /* SPI4 parameter configuration*/
  hspi4.Instance = SPI4;
 8000b58:	4b27      	ldr	r3, [pc, #156]	@ (8000bf8 <MX_SPI4_Init+0xa4>)
 8000b5a:	4a28      	ldr	r2, [pc, #160]	@ (8000bfc <MX_SPI4_Init+0xa8>)
 8000b5c:	601a      	str	r2, [r3, #0]
  hspi4.Init.Mode = SPI_MODE_MASTER;
 8000b5e:	4b26      	ldr	r3, [pc, #152]	@ (8000bf8 <MX_SPI4_Init+0xa4>)
 8000b60:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 8000b64:	605a      	str	r2, [r3, #4]
  hspi4.Init.Direction = SPI_DIRECTION_2LINES;
 8000b66:	4b24      	ldr	r3, [pc, #144]	@ (8000bf8 <MX_SPI4_Init+0xa4>)
 8000b68:	2200      	movs	r2, #0
 8000b6a:	609a      	str	r2, [r3, #8]
  hspi4.Init.DataSize = SPI_DATASIZE_8BIT;
 8000b6c:	4b22      	ldr	r3, [pc, #136]	@ (8000bf8 <MX_SPI4_Init+0xa4>)
 8000b6e:	2207      	movs	r2, #7
 8000b70:	60da      	str	r2, [r3, #12]
  hspi4.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000b72:	4b21      	ldr	r3, [pc, #132]	@ (8000bf8 <MX_SPI4_Init+0xa4>)
 8000b74:	2200      	movs	r2, #0
 8000b76:	611a      	str	r2, [r3, #16]
  hspi4.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000b78:	4b1f      	ldr	r3, [pc, #124]	@ (8000bf8 <MX_SPI4_Init+0xa4>)
 8000b7a:	2200      	movs	r2, #0
 8000b7c:	615a      	str	r2, [r3, #20]
  hspi4.Init.NSS = SPI_NSS_HARD_OUTPUT;
 8000b7e:	4b1e      	ldr	r3, [pc, #120]	@ (8000bf8 <MX_SPI4_Init+0xa4>)
 8000b80:	f04f 5200 	mov.w	r2, #536870912	@ 0x20000000
 8000b84:	619a      	str	r2, [r3, #24]
  hspi4.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000b86:	4b1c      	ldr	r3, [pc, #112]	@ (8000bf8 <MX_SPI4_Init+0xa4>)
 8000b88:	2200      	movs	r2, #0
 8000b8a:	61da      	str	r2, [r3, #28]
  hspi4.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000b8c:	4b1a      	ldr	r3, [pc, #104]	@ (8000bf8 <MX_SPI4_Init+0xa4>)
 8000b8e:	2200      	movs	r2, #0
 8000b90:	621a      	str	r2, [r3, #32]
  hspi4.Init.TIMode = SPI_TIMODE_DISABLE;
 8000b92:	4b19      	ldr	r3, [pc, #100]	@ (8000bf8 <MX_SPI4_Init+0xa4>)
 8000b94:	2200      	movs	r2, #0
 8000b96:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi4.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000b98:	4b17      	ldr	r3, [pc, #92]	@ (8000bf8 <MX_SPI4_Init+0xa4>)
 8000b9a:	2200      	movs	r2, #0
 8000b9c:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi4.Init.CRCPolynomial = 0x0;
 8000b9e:	4b16      	ldr	r3, [pc, #88]	@ (8000bf8 <MX_SPI4_Init+0xa4>)
 8000ba0:	2200      	movs	r2, #0
 8000ba2:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi4.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000ba4:	4b14      	ldr	r3, [pc, #80]	@ (8000bf8 <MX_SPI4_Init+0xa4>)
 8000ba6:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000baa:	635a      	str	r2, [r3, #52]	@ 0x34
  hspi4.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8000bac:	4b12      	ldr	r3, [pc, #72]	@ (8000bf8 <MX_SPI4_Init+0xa4>)
 8000bae:	2200      	movs	r2, #0
 8000bb0:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi4.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8000bb2:	4b11      	ldr	r3, [pc, #68]	@ (8000bf8 <MX_SPI4_Init+0xa4>)
 8000bb4:	2200      	movs	r2, #0
 8000bb6:	63da      	str	r2, [r3, #60]	@ 0x3c
  hspi4.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8000bb8:	4b0f      	ldr	r3, [pc, #60]	@ (8000bf8 <MX_SPI4_Init+0xa4>)
 8000bba:	2200      	movs	r2, #0
 8000bbc:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi4.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8000bbe:	4b0e      	ldr	r3, [pc, #56]	@ (8000bf8 <MX_SPI4_Init+0xa4>)
 8000bc0:	2200      	movs	r2, #0
 8000bc2:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi4.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8000bc4:	4b0c      	ldr	r3, [pc, #48]	@ (8000bf8 <MX_SPI4_Init+0xa4>)
 8000bc6:	2200      	movs	r2, #0
 8000bc8:	649a      	str	r2, [r3, #72]	@ 0x48
  hspi4.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8000bca:	4b0b      	ldr	r3, [pc, #44]	@ (8000bf8 <MX_SPI4_Init+0xa4>)
 8000bcc:	2200      	movs	r2, #0
 8000bce:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi4.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8000bd0:	4b09      	ldr	r3, [pc, #36]	@ (8000bf8 <MX_SPI4_Init+0xa4>)
 8000bd2:	2200      	movs	r2, #0
 8000bd4:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi4.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8000bd6:	4b08      	ldr	r3, [pc, #32]	@ (8000bf8 <MX_SPI4_Init+0xa4>)
 8000bd8:	2200      	movs	r2, #0
 8000bda:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi4.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8000bdc:	4b06      	ldr	r3, [pc, #24]	@ (8000bf8 <MX_SPI4_Init+0xa4>)
 8000bde:	2200      	movs	r2, #0
 8000be0:	659a      	str	r2, [r3, #88]	@ 0x58
  if (HAL_SPI_Init(&hspi4) != HAL_OK)
 8000be2:	4805      	ldr	r0, [pc, #20]	@ (8000bf8 <MX_SPI4_Init+0xa4>)
 8000be4:	f005 f980 	bl	8005ee8 <HAL_SPI_Init>
 8000be8:	4603      	mov	r3, r0
 8000bea:	2b00      	cmp	r3, #0
 8000bec:	d001      	beq.n	8000bf2 <MX_SPI4_Init+0x9e>
  {
    Error_Handler();
 8000bee:	f000 fa9f 	bl	8001130 <Error_Handler>
  }
  /* USER CODE BEGIN SPI4_Init 2 */

  /* USER CODE END SPI4_Init 2 */

}
 8000bf2:	bf00      	nop
 8000bf4:	bd80      	pop	{r7, pc}
 8000bf6:	bf00      	nop
 8000bf8:	24000344 	.word	0x24000344
 8000bfc:	40013400 	.word	0x40013400

08000c00 <MX_SPI5_Init>:
  * @brief SPI5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI5_Init(void)
{
 8000c00:	b580      	push	{r7, lr}
 8000c02:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI5_Init 1 */

  /* USER CODE END SPI5_Init 1 */
  /* SPI5 parameter configuration*/
  hspi5.Instance = SPI5;
 8000c04:	4b27      	ldr	r3, [pc, #156]	@ (8000ca4 <MX_SPI5_Init+0xa4>)
 8000c06:	4a28      	ldr	r2, [pc, #160]	@ (8000ca8 <MX_SPI5_Init+0xa8>)
 8000c08:	601a      	str	r2, [r3, #0]
  hspi5.Init.Mode = SPI_MODE_MASTER;
 8000c0a:	4b26      	ldr	r3, [pc, #152]	@ (8000ca4 <MX_SPI5_Init+0xa4>)
 8000c0c:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 8000c10:	605a      	str	r2, [r3, #4]
  hspi5.Init.Direction = SPI_DIRECTION_2LINES;
 8000c12:	4b24      	ldr	r3, [pc, #144]	@ (8000ca4 <MX_SPI5_Init+0xa4>)
 8000c14:	2200      	movs	r2, #0
 8000c16:	609a      	str	r2, [r3, #8]
  hspi5.Init.DataSize = SPI_DATASIZE_8BIT;
 8000c18:	4b22      	ldr	r3, [pc, #136]	@ (8000ca4 <MX_SPI5_Init+0xa4>)
 8000c1a:	2207      	movs	r2, #7
 8000c1c:	60da      	str	r2, [r3, #12]
  hspi5.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000c1e:	4b21      	ldr	r3, [pc, #132]	@ (8000ca4 <MX_SPI5_Init+0xa4>)
 8000c20:	2200      	movs	r2, #0
 8000c22:	611a      	str	r2, [r3, #16]
  hspi5.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000c24:	4b1f      	ldr	r3, [pc, #124]	@ (8000ca4 <MX_SPI5_Init+0xa4>)
 8000c26:	2200      	movs	r2, #0
 8000c28:	615a      	str	r2, [r3, #20]
  hspi5.Init.NSS = SPI_NSS_SOFT;
 8000c2a:	4b1e      	ldr	r3, [pc, #120]	@ (8000ca4 <MX_SPI5_Init+0xa4>)
 8000c2c:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8000c30:	619a      	str	r2, [r3, #24]
  hspi5.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 8000c32:	4b1c      	ldr	r3, [pc, #112]	@ (8000ca4 <MX_SPI5_Init+0xa4>)
 8000c34:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 8000c38:	61da      	str	r2, [r3, #28]
  hspi5.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000c3a:	4b1a      	ldr	r3, [pc, #104]	@ (8000ca4 <MX_SPI5_Init+0xa4>)
 8000c3c:	2200      	movs	r2, #0
 8000c3e:	621a      	str	r2, [r3, #32]
  hspi5.Init.TIMode = SPI_TIMODE_DISABLE;
 8000c40:	4b18      	ldr	r3, [pc, #96]	@ (8000ca4 <MX_SPI5_Init+0xa4>)
 8000c42:	2200      	movs	r2, #0
 8000c44:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi5.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000c46:	4b17      	ldr	r3, [pc, #92]	@ (8000ca4 <MX_SPI5_Init+0xa4>)
 8000c48:	2200      	movs	r2, #0
 8000c4a:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi5.Init.CRCPolynomial = 0x0;
 8000c4c:	4b15      	ldr	r3, [pc, #84]	@ (8000ca4 <MX_SPI5_Init+0xa4>)
 8000c4e:	2200      	movs	r2, #0
 8000c50:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi5.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000c52:	4b14      	ldr	r3, [pc, #80]	@ (8000ca4 <MX_SPI5_Init+0xa4>)
 8000c54:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000c58:	635a      	str	r2, [r3, #52]	@ 0x34
  hspi5.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8000c5a:	4b12      	ldr	r3, [pc, #72]	@ (8000ca4 <MX_SPI5_Init+0xa4>)
 8000c5c:	2200      	movs	r2, #0
 8000c5e:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi5.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8000c60:	4b10      	ldr	r3, [pc, #64]	@ (8000ca4 <MX_SPI5_Init+0xa4>)
 8000c62:	2200      	movs	r2, #0
 8000c64:	63da      	str	r2, [r3, #60]	@ 0x3c
  hspi5.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8000c66:	4b0f      	ldr	r3, [pc, #60]	@ (8000ca4 <MX_SPI5_Init+0xa4>)
 8000c68:	2200      	movs	r2, #0
 8000c6a:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi5.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8000c6c:	4b0d      	ldr	r3, [pc, #52]	@ (8000ca4 <MX_SPI5_Init+0xa4>)
 8000c6e:	2200      	movs	r2, #0
 8000c70:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi5.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8000c72:	4b0c      	ldr	r3, [pc, #48]	@ (8000ca4 <MX_SPI5_Init+0xa4>)
 8000c74:	2200      	movs	r2, #0
 8000c76:	649a      	str	r2, [r3, #72]	@ 0x48
  hspi5.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8000c78:	4b0a      	ldr	r3, [pc, #40]	@ (8000ca4 <MX_SPI5_Init+0xa4>)
 8000c7a:	2200      	movs	r2, #0
 8000c7c:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi5.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8000c7e:	4b09      	ldr	r3, [pc, #36]	@ (8000ca4 <MX_SPI5_Init+0xa4>)
 8000c80:	2200      	movs	r2, #0
 8000c82:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi5.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8000c84:	4b07      	ldr	r3, [pc, #28]	@ (8000ca4 <MX_SPI5_Init+0xa4>)
 8000c86:	2200      	movs	r2, #0
 8000c88:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi5.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8000c8a:	4b06      	ldr	r3, [pc, #24]	@ (8000ca4 <MX_SPI5_Init+0xa4>)
 8000c8c:	2200      	movs	r2, #0
 8000c8e:	659a      	str	r2, [r3, #88]	@ 0x58
  if (HAL_SPI_Init(&hspi5) != HAL_OK)
 8000c90:	4804      	ldr	r0, [pc, #16]	@ (8000ca4 <MX_SPI5_Init+0xa4>)
 8000c92:	f005 f929 	bl	8005ee8 <HAL_SPI_Init>
 8000c96:	4603      	mov	r3, r0
 8000c98:	2b00      	cmp	r3, #0
 8000c9a:	d001      	beq.n	8000ca0 <MX_SPI5_Init+0xa0>
  {
    Error_Handler();
 8000c9c:	f000 fa48 	bl	8001130 <Error_Handler>
  }
  /* USER CODE BEGIN SPI5_Init 2 */

  /* USER CODE END SPI5_Init 2 */

}
 8000ca0:	bf00      	nop
 8000ca2:	bd80      	pop	{r7, pc}
 8000ca4:	240003cc 	.word	0x240003cc
 8000ca8:	40015000 	.word	0x40015000

08000cac <MX_SPI6_Init>:
  * @brief SPI6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI6_Init(void)
{
 8000cac:	b580      	push	{r7, lr}
 8000cae:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI6_Init 1 */

  /* USER CODE END SPI6_Init 1 */
  /* SPI6 parameter configuration*/
  hspi6.Instance = SPI6;
 8000cb0:	4b28      	ldr	r3, [pc, #160]	@ (8000d54 <MX_SPI6_Init+0xa8>)
 8000cb2:	4a29      	ldr	r2, [pc, #164]	@ (8000d58 <MX_SPI6_Init+0xac>)
 8000cb4:	601a      	str	r2, [r3, #0]
  hspi6.Init.Mode = SPI_MODE_MASTER;
 8000cb6:	4b27      	ldr	r3, [pc, #156]	@ (8000d54 <MX_SPI6_Init+0xa8>)
 8000cb8:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 8000cbc:	605a      	str	r2, [r3, #4]
  hspi6.Init.Direction = SPI_DIRECTION_2LINES;
 8000cbe:	4b25      	ldr	r3, [pc, #148]	@ (8000d54 <MX_SPI6_Init+0xa8>)
 8000cc0:	2200      	movs	r2, #0
 8000cc2:	609a      	str	r2, [r3, #8]
  hspi6.Init.DataSize = SPI_DATASIZE_8BIT;
 8000cc4:	4b23      	ldr	r3, [pc, #140]	@ (8000d54 <MX_SPI6_Init+0xa8>)
 8000cc6:	2207      	movs	r2, #7
 8000cc8:	60da      	str	r2, [r3, #12]
  hspi6.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000cca:	4b22      	ldr	r3, [pc, #136]	@ (8000d54 <MX_SPI6_Init+0xa8>)
 8000ccc:	2200      	movs	r2, #0
 8000cce:	611a      	str	r2, [r3, #16]
  hspi6.Init.CLKPhase = SPI_PHASE_2EDGE;
 8000cd0:	4b20      	ldr	r3, [pc, #128]	@ (8000d54 <MX_SPI6_Init+0xa8>)
 8000cd2:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8000cd6:	615a      	str	r2, [r3, #20]
  hspi6.Init.NSS = SPI_NSS_SOFT;
 8000cd8:	4b1e      	ldr	r3, [pc, #120]	@ (8000d54 <MX_SPI6_Init+0xa8>)
 8000cda:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8000cde:	619a      	str	r2, [r3, #24]
  hspi6.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 8000ce0:	4b1c      	ldr	r3, [pc, #112]	@ (8000d54 <MX_SPI6_Init+0xa8>)
 8000ce2:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 8000ce6:	61da      	str	r2, [r3, #28]
  hspi6.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000ce8:	4b1a      	ldr	r3, [pc, #104]	@ (8000d54 <MX_SPI6_Init+0xa8>)
 8000cea:	2200      	movs	r2, #0
 8000cec:	621a      	str	r2, [r3, #32]
  hspi6.Init.TIMode = SPI_TIMODE_DISABLE;
 8000cee:	4b19      	ldr	r3, [pc, #100]	@ (8000d54 <MX_SPI6_Init+0xa8>)
 8000cf0:	2200      	movs	r2, #0
 8000cf2:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi6.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000cf4:	4b17      	ldr	r3, [pc, #92]	@ (8000d54 <MX_SPI6_Init+0xa8>)
 8000cf6:	2200      	movs	r2, #0
 8000cf8:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi6.Init.CRCPolynomial = 0x0;
 8000cfa:	4b16      	ldr	r3, [pc, #88]	@ (8000d54 <MX_SPI6_Init+0xa8>)
 8000cfc:	2200      	movs	r2, #0
 8000cfe:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi6.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000d00:	4b14      	ldr	r3, [pc, #80]	@ (8000d54 <MX_SPI6_Init+0xa8>)
 8000d02:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000d06:	635a      	str	r2, [r3, #52]	@ 0x34
  hspi6.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8000d08:	4b12      	ldr	r3, [pc, #72]	@ (8000d54 <MX_SPI6_Init+0xa8>)
 8000d0a:	2200      	movs	r2, #0
 8000d0c:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi6.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8000d0e:	4b11      	ldr	r3, [pc, #68]	@ (8000d54 <MX_SPI6_Init+0xa8>)
 8000d10:	2200      	movs	r2, #0
 8000d12:	63da      	str	r2, [r3, #60]	@ 0x3c
  hspi6.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8000d14:	4b0f      	ldr	r3, [pc, #60]	@ (8000d54 <MX_SPI6_Init+0xa8>)
 8000d16:	2200      	movs	r2, #0
 8000d18:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi6.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8000d1a:	4b0e      	ldr	r3, [pc, #56]	@ (8000d54 <MX_SPI6_Init+0xa8>)
 8000d1c:	2200      	movs	r2, #0
 8000d1e:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi6.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8000d20:	4b0c      	ldr	r3, [pc, #48]	@ (8000d54 <MX_SPI6_Init+0xa8>)
 8000d22:	2200      	movs	r2, #0
 8000d24:	649a      	str	r2, [r3, #72]	@ 0x48
  hspi6.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8000d26:	4b0b      	ldr	r3, [pc, #44]	@ (8000d54 <MX_SPI6_Init+0xa8>)
 8000d28:	2200      	movs	r2, #0
 8000d2a:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi6.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8000d2c:	4b09      	ldr	r3, [pc, #36]	@ (8000d54 <MX_SPI6_Init+0xa8>)
 8000d2e:	2200      	movs	r2, #0
 8000d30:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi6.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8000d32:	4b08      	ldr	r3, [pc, #32]	@ (8000d54 <MX_SPI6_Init+0xa8>)
 8000d34:	2200      	movs	r2, #0
 8000d36:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi6.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8000d38:	4b06      	ldr	r3, [pc, #24]	@ (8000d54 <MX_SPI6_Init+0xa8>)
 8000d3a:	2200      	movs	r2, #0
 8000d3c:	659a      	str	r2, [r3, #88]	@ 0x58
  if (HAL_SPI_Init(&hspi6) != HAL_OK)
 8000d3e:	4805      	ldr	r0, [pc, #20]	@ (8000d54 <MX_SPI6_Init+0xa8>)
 8000d40:	f005 f8d2 	bl	8005ee8 <HAL_SPI_Init>
 8000d44:	4603      	mov	r3, r0
 8000d46:	2b00      	cmp	r3, #0
 8000d48:	d001      	beq.n	8000d4e <MX_SPI6_Init+0xa2>
  {
    Error_Handler();
 8000d4a:	f000 f9f1 	bl	8001130 <Error_Handler>
  }
  /* USER CODE BEGIN SPI6_Init 2 */

  /* USER CODE END SPI6_Init 2 */

}
 8000d4e:	bf00      	nop
 8000d50:	bd80      	pop	{r7, pc}
 8000d52:	bf00      	nop
 8000d54:	24000454 	.word	0x24000454
 8000d58:	58001400 	.word	0x58001400

08000d5c <MX_USART10_UART_Init>:
  * @brief USART10 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART10_UART_Init(void)
{
 8000d5c:	b580      	push	{r7, lr}
 8000d5e:	af00      	add	r7, sp, #0
  /* USER CODE END USART10_Init 0 */

  /* USER CODE BEGIN USART10_Init 1 */

  /* USER CODE END USART10_Init 1 */
  huart10.Instance = USART10;
 8000d60:	4b22      	ldr	r3, [pc, #136]	@ (8000dec <MX_USART10_UART_Init+0x90>)
 8000d62:	4a23      	ldr	r2, [pc, #140]	@ (8000df0 <MX_USART10_UART_Init+0x94>)
 8000d64:	601a      	str	r2, [r3, #0]
  huart10.Init.BaudRate = 115200;
 8000d66:	4b21      	ldr	r3, [pc, #132]	@ (8000dec <MX_USART10_UART_Init+0x90>)
 8000d68:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000d6c:	605a      	str	r2, [r3, #4]
  huart10.Init.WordLength = UART_WORDLENGTH_8B;
 8000d6e:	4b1f      	ldr	r3, [pc, #124]	@ (8000dec <MX_USART10_UART_Init+0x90>)
 8000d70:	2200      	movs	r2, #0
 8000d72:	609a      	str	r2, [r3, #8]
  huart10.Init.StopBits = UART_STOPBITS_1;
 8000d74:	4b1d      	ldr	r3, [pc, #116]	@ (8000dec <MX_USART10_UART_Init+0x90>)
 8000d76:	2200      	movs	r2, #0
 8000d78:	60da      	str	r2, [r3, #12]
  huart10.Init.Parity = UART_PARITY_NONE;
 8000d7a:	4b1c      	ldr	r3, [pc, #112]	@ (8000dec <MX_USART10_UART_Init+0x90>)
 8000d7c:	2200      	movs	r2, #0
 8000d7e:	611a      	str	r2, [r3, #16]
  huart10.Init.Mode = UART_MODE_TX_RX;
 8000d80:	4b1a      	ldr	r3, [pc, #104]	@ (8000dec <MX_USART10_UART_Init+0x90>)
 8000d82:	220c      	movs	r2, #12
 8000d84:	615a      	str	r2, [r3, #20]
  huart10.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000d86:	4b19      	ldr	r3, [pc, #100]	@ (8000dec <MX_USART10_UART_Init+0x90>)
 8000d88:	2200      	movs	r2, #0
 8000d8a:	619a      	str	r2, [r3, #24]
  huart10.Init.OverSampling = UART_OVERSAMPLING_16;
 8000d8c:	4b17      	ldr	r3, [pc, #92]	@ (8000dec <MX_USART10_UART_Init+0x90>)
 8000d8e:	2200      	movs	r2, #0
 8000d90:	61da      	str	r2, [r3, #28]
  huart10.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000d92:	4b16      	ldr	r3, [pc, #88]	@ (8000dec <MX_USART10_UART_Init+0x90>)
 8000d94:	2200      	movs	r2, #0
 8000d96:	621a      	str	r2, [r3, #32]
  huart10.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000d98:	4b14      	ldr	r3, [pc, #80]	@ (8000dec <MX_USART10_UART_Init+0x90>)
 8000d9a:	2200      	movs	r2, #0
 8000d9c:	625a      	str	r2, [r3, #36]	@ 0x24
  huart10.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000d9e:	4b13      	ldr	r3, [pc, #76]	@ (8000dec <MX_USART10_UART_Init+0x90>)
 8000da0:	2200      	movs	r2, #0
 8000da2:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart10) != HAL_OK)
 8000da4:	4811      	ldr	r0, [pc, #68]	@ (8000dec <MX_USART10_UART_Init+0x90>)
 8000da6:	f005 fcc5 	bl	8006734 <HAL_UART_Init>
 8000daa:	4603      	mov	r3, r0
 8000dac:	2b00      	cmp	r3, #0
 8000dae:	d001      	beq.n	8000db4 <MX_USART10_UART_Init+0x58>
  {
    Error_Handler();
 8000db0:	f000 f9be 	bl	8001130 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart10, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000db4:	2100      	movs	r1, #0
 8000db6:	480d      	ldr	r0, [pc, #52]	@ (8000dec <MX_USART10_UART_Init+0x90>)
 8000db8:	f006 fdd1 	bl	800795e <HAL_UARTEx_SetTxFifoThreshold>
 8000dbc:	4603      	mov	r3, r0
 8000dbe:	2b00      	cmp	r3, #0
 8000dc0:	d001      	beq.n	8000dc6 <MX_USART10_UART_Init+0x6a>
  {
    Error_Handler();
 8000dc2:	f000 f9b5 	bl	8001130 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart10, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000dc6:	2100      	movs	r1, #0
 8000dc8:	4808      	ldr	r0, [pc, #32]	@ (8000dec <MX_USART10_UART_Init+0x90>)
 8000dca:	f006 fe06 	bl	80079da <HAL_UARTEx_SetRxFifoThreshold>
 8000dce:	4603      	mov	r3, r0
 8000dd0:	2b00      	cmp	r3, #0
 8000dd2:	d001      	beq.n	8000dd8 <MX_USART10_UART_Init+0x7c>
  {
    Error_Handler();
 8000dd4:	f000 f9ac 	bl	8001130 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart10) != HAL_OK)
 8000dd8:	4804      	ldr	r0, [pc, #16]	@ (8000dec <MX_USART10_UART_Init+0x90>)
 8000dda:	f006 fd87 	bl	80078ec <HAL_UARTEx_DisableFifoMode>
 8000dde:	4603      	mov	r3, r0
 8000de0:	2b00      	cmp	r3, #0
 8000de2:	d001      	beq.n	8000de8 <MX_USART10_UART_Init+0x8c>
  {
    Error_Handler();
 8000de4:	f000 f9a4 	bl	8001130 <Error_Handler>
  }
  /* USER CODE BEGIN USART10_Init 2 */

  /* USER CODE END USART10_Init 2 */

}
 8000de8:	bf00      	nop
 8000dea:	bd80      	pop	{r7, pc}
 8000dec:	240004dc 	.word	0x240004dc
 8000df0:	40011c00 	.word	0x40011c00

08000df4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000df4:	b580      	push	{r7, lr}
 8000df6:	b08c      	sub	sp, #48	@ 0x30
 8000df8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000dfa:	f107 031c 	add.w	r3, r7, #28
 8000dfe:	2200      	movs	r2, #0
 8000e00:	601a      	str	r2, [r3, #0]
 8000e02:	605a      	str	r2, [r3, #4]
 8000e04:	609a      	str	r2, [r3, #8]
 8000e06:	60da      	str	r2, [r3, #12]
 8000e08:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000e0a:	4b8a      	ldr	r3, [pc, #552]	@ (8001034 <MX_GPIO_Init+0x240>)
 8000e0c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000e10:	4a88      	ldr	r2, [pc, #544]	@ (8001034 <MX_GPIO_Init+0x240>)
 8000e12:	f043 0310 	orr.w	r3, r3, #16
 8000e16:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000e1a:	4b86      	ldr	r3, [pc, #536]	@ (8001034 <MX_GPIO_Init+0x240>)
 8000e1c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000e20:	f003 0310 	and.w	r3, r3, #16
 8000e24:	61bb      	str	r3, [r7, #24]
 8000e26:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000e28:	4b82      	ldr	r3, [pc, #520]	@ (8001034 <MX_GPIO_Init+0x240>)
 8000e2a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000e2e:	4a81      	ldr	r2, [pc, #516]	@ (8001034 <MX_GPIO_Init+0x240>)
 8000e30:	f043 0320 	orr.w	r3, r3, #32
 8000e34:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000e38:	4b7e      	ldr	r3, [pc, #504]	@ (8001034 <MX_GPIO_Init+0x240>)
 8000e3a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000e3e:	f003 0320 	and.w	r3, r3, #32
 8000e42:	617b      	str	r3, [r7, #20]
 8000e44:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000e46:	4b7b      	ldr	r3, [pc, #492]	@ (8001034 <MX_GPIO_Init+0x240>)
 8000e48:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000e4c:	4a79      	ldr	r2, [pc, #484]	@ (8001034 <MX_GPIO_Init+0x240>)
 8000e4e:	f043 0304 	orr.w	r3, r3, #4
 8000e52:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000e56:	4b77      	ldr	r3, [pc, #476]	@ (8001034 <MX_GPIO_Init+0x240>)
 8000e58:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000e5c:	f003 0304 	and.w	r3, r3, #4
 8000e60:	613b      	str	r3, [r7, #16]
 8000e62:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e64:	4b73      	ldr	r3, [pc, #460]	@ (8001034 <MX_GPIO_Init+0x240>)
 8000e66:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000e6a:	4a72      	ldr	r2, [pc, #456]	@ (8001034 <MX_GPIO_Init+0x240>)
 8000e6c:	f043 0301 	orr.w	r3, r3, #1
 8000e70:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000e74:	4b6f      	ldr	r3, [pc, #444]	@ (8001034 <MX_GPIO_Init+0x240>)
 8000e76:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000e7a:	f003 0301 	and.w	r3, r3, #1
 8000e7e:	60fb      	str	r3, [r7, #12]
 8000e80:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e82:	4b6c      	ldr	r3, [pc, #432]	@ (8001034 <MX_GPIO_Init+0x240>)
 8000e84:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000e88:	4a6a      	ldr	r2, [pc, #424]	@ (8001034 <MX_GPIO_Init+0x240>)
 8000e8a:	f043 0302 	orr.w	r3, r3, #2
 8000e8e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000e92:	4b68      	ldr	r3, [pc, #416]	@ (8001034 <MX_GPIO_Init+0x240>)
 8000e94:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000e98:	f003 0302 	and.w	r3, r3, #2
 8000e9c:	60bb      	str	r3, [r7, #8]
 8000e9e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000ea0:	4b64      	ldr	r3, [pc, #400]	@ (8001034 <MX_GPIO_Init+0x240>)
 8000ea2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000ea6:	4a63      	ldr	r2, [pc, #396]	@ (8001034 <MX_GPIO_Init+0x240>)
 8000ea8:	f043 0308 	orr.w	r3, r3, #8
 8000eac:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000eb0:	4b60      	ldr	r3, [pc, #384]	@ (8001034 <MX_GPIO_Init+0x240>)
 8000eb2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000eb6:	f003 0308 	and.w	r3, r3, #8
 8000eba:	607b      	str	r3, [r7, #4]
 8000ebc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000ebe:	4b5d      	ldr	r3, [pc, #372]	@ (8001034 <MX_GPIO_Init+0x240>)
 8000ec0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000ec4:	4a5b      	ldr	r2, [pc, #364]	@ (8001034 <MX_GPIO_Init+0x240>)
 8000ec6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000eca:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000ece:	4b59      	ldr	r3, [pc, #356]	@ (8001034 <MX_GPIO_Init+0x240>)
 8000ed0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000ed4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000ed8:	603b      	str	r3, [r7, #0]
 8000eda:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI5_CS_GPIO_Port, SPI5_CS_Pin, GPIO_PIN_RESET);
 8000edc:	2200      	movs	r2, #0
 8000ede:	2140      	movs	r1, #64	@ 0x40
 8000ee0:	4855      	ldr	r0, [pc, #340]	@ (8001038 <MX_GPIO_Init+0x244>)
 8000ee2:	f001 ffd7 	bl	8002e94 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, RF_NSRT_Pin|VLV_EN1_Pin, GPIO_PIN_RESET);
 8000ee6:	2200      	movs	r2, #0
 8000ee8:	2144      	movs	r1, #68	@ 0x44
 8000eea:	4854      	ldr	r0, [pc, #336]	@ (800103c <MX_GPIO_Init+0x248>)
 8000eec:	f001 ffd2 	bl	8002e94 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, SPI6_CS_Pin|VLV_EN2_Pin|BUFF_CLR_Pin|BUFF_CLK_Pin
 8000ef0:	2200      	movs	r2, #0
 8000ef2:	f248 7101 	movw	r1, #34561	@ 0x8701
 8000ef6:	4852      	ldr	r0, [pc, #328]	@ (8001040 <MX_GPIO_Init+0x24c>)
 8000ef8:	f001 ffcc 	bl	8002e94 <HAL_GPIO_WritePin>
                          |VLV_CTRL_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, TC_CS1_Pin|TC_CS2_Pin, GPIO_PIN_RESET);
 8000efc:	2200      	movs	r2, #0
 8000efe:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 8000f02:	4850      	ldr	r0, [pc, #320]	@ (8001044 <MX_GPIO_Init+0x250>)
 8000f04:	f001 ffc6 	bl	8002e94 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, VLV_EN3_Pin|SPI1_CS_Pin, GPIO_PIN_RESET);
 8000f08:	2200      	movs	r2, #0
 8000f0a:	f44f 61a0 	mov.w	r1, #1280	@ 0x500
 8000f0e:	484e      	ldr	r0, [pc, #312]	@ (8001048 <MX_GPIO_Init+0x254>)
 8000f10:	f001 ffc0 	bl	8002e94 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, BUZZ_Pin|LED_RED_Pin, GPIO_PIN_RESET);
 8000f14:	2200      	movs	r2, #0
 8000f16:	f44f 7140 	mov.w	r1, #768	@ 0x300
 8000f1a:	484c      	ldr	r0, [pc, #304]	@ (800104c <MX_GPIO_Init+0x258>)
 8000f1c:	f001 ffba 	bl	8002e94 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, LED_BLUE_Pin|LED_GREEN_Pin, GPIO_PIN_RESET);
 8000f20:	2200      	movs	r2, #0
 8000f22:	2103      	movs	r1, #3
 8000f24:	484a      	ldr	r0, [pc, #296]	@ (8001050 <MX_GPIO_Init+0x25c>)
 8000f26:	f001 ffb5 	bl	8002e94 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : SPI5_CS_Pin */
  GPIO_InitStruct.Pin = SPI5_CS_Pin;
 8000f2a:	2340      	movs	r3, #64	@ 0x40
 8000f2c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f2e:	2301      	movs	r3, #1
 8000f30:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f32:	2300      	movs	r3, #0
 8000f34:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f36:	2300      	movs	r3, #0
 8000f38:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(SPI5_CS_GPIO_Port, &GPIO_InitStruct);
 8000f3a:	f107 031c 	add.w	r3, r7, #28
 8000f3e:	4619      	mov	r1, r3
 8000f40:	483d      	ldr	r0, [pc, #244]	@ (8001038 <MX_GPIO_Init+0x244>)
 8000f42:	f001 fdff 	bl	8002b44 <HAL_GPIO_Init>

  /*Configure GPIO pin : MODE_SW_Pin */
  GPIO_InitStruct.Pin = MODE_SW_Pin;
 8000f46:	2301      	movs	r3, #1
 8000f48:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000f4a:	2300      	movs	r3, #0
 8000f4c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f4e:	2300      	movs	r3, #0
 8000f50:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(MODE_SW_GPIO_Port, &GPIO_InitStruct);
 8000f52:	f107 031c 	add.w	r3, r7, #28
 8000f56:	4619      	mov	r1, r3
 8000f58:	4838      	ldr	r0, [pc, #224]	@ (800103c <MX_GPIO_Init+0x248>)
 8000f5a:	f001 fdf3 	bl	8002b44 <HAL_GPIO_Init>

  /*Configure GPIO pins : RF_NSRT_Pin VLV_EN1_Pin */
  GPIO_InitStruct.Pin = RF_NSRT_Pin|VLV_EN1_Pin;
 8000f5e:	2344      	movs	r3, #68	@ 0x44
 8000f60:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f62:	2301      	movs	r3, #1
 8000f64:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f66:	2300      	movs	r3, #0
 8000f68:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f6a:	2300      	movs	r3, #0
 8000f6c:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000f6e:	f107 031c 	add.w	r3, r7, #28
 8000f72:	4619      	mov	r1, r3
 8000f74:	4831      	ldr	r0, [pc, #196]	@ (800103c <MX_GPIO_Init+0x248>)
 8000f76:	f001 fde5 	bl	8002b44 <HAL_GPIO_Init>

  /*Configure GPIO pins : SPI6_CS_Pin VLV_EN2_Pin */
  GPIO_InitStruct.Pin = SPI6_CS_Pin|VLV_EN2_Pin;
 8000f7a:	f240 1301 	movw	r3, #257	@ 0x101
 8000f7e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f80:	2301      	movs	r3, #1
 8000f82:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f84:	2300      	movs	r3, #0
 8000f86:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f88:	2300      	movs	r3, #0
 8000f8a:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f8c:	f107 031c 	add.w	r3, r7, #28
 8000f90:	4619      	mov	r1, r3
 8000f92:	482b      	ldr	r0, [pc, #172]	@ (8001040 <MX_GPIO_Init+0x24c>)
 8000f94:	f001 fdd6 	bl	8002b44 <HAL_GPIO_Init>

  /*Configure GPIO pins : TC_CS1_Pin TC_CS2_Pin */
  GPIO_InitStruct.Pin = TC_CS1_Pin|TC_CS2_Pin;
 8000f98:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8000f9c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f9e:	2301      	movs	r3, #1
 8000fa0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fa2:	2300      	movs	r3, #0
 8000fa4:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fa6:	2300      	movs	r3, #0
 8000fa8:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000faa:	f107 031c 	add.w	r3, r7, #28
 8000fae:	4619      	mov	r1, r3
 8000fb0:	4824      	ldr	r0, [pc, #144]	@ (8001044 <MX_GPIO_Init+0x250>)
 8000fb2:	f001 fdc7 	bl	8002b44 <HAL_GPIO_Init>

  /*Configure GPIO pins : VLV_EN3_Pin SPI1_CS_Pin */
  GPIO_InitStruct.Pin = VLV_EN3_Pin|SPI1_CS_Pin;
 8000fb6:	f44f 63a0 	mov.w	r3, #1280	@ 0x500
 8000fba:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000fbc:	2301      	movs	r3, #1
 8000fbe:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fc0:	2300      	movs	r3, #0
 8000fc2:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fc4:	2300      	movs	r3, #0
 8000fc6:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000fc8:	f107 031c 	add.w	r3, r7, #28
 8000fcc:	4619      	mov	r1, r3
 8000fce:	481e      	ldr	r0, [pc, #120]	@ (8001048 <MX_GPIO_Init+0x254>)
 8000fd0:	f001 fdb8 	bl	8002b44 <HAL_GPIO_Init>

  /*Configure GPIO pins : BUFF_CLR_Pin BUFF_CLK_Pin VLV_CTRL_Pin */
  GPIO_InitStruct.Pin = BUFF_CLR_Pin|BUFF_CLK_Pin|VLV_CTRL_Pin;
 8000fd4:	f44f 4306 	mov.w	r3, #34304	@ 0x8600
 8000fd8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000fda:	2301      	movs	r3, #1
 8000fdc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fde:	2300      	movs	r3, #0
 8000fe0:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000fe2:	2303      	movs	r3, #3
 8000fe4:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000fe6:	f107 031c 	add.w	r3, r7, #28
 8000fea:	4619      	mov	r1, r3
 8000fec:	4814      	ldr	r0, [pc, #80]	@ (8001040 <MX_GPIO_Init+0x24c>)
 8000fee:	f001 fda9 	bl	8002b44 <HAL_GPIO_Init>

  /*Configure GPIO pins : BUZZ_Pin LED_RED_Pin */
  GPIO_InitStruct.Pin = BUZZ_Pin|LED_RED_Pin;
 8000ff2:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8000ff6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ff8:	2301      	movs	r3, #1
 8000ffa:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ffc:	2300      	movs	r3, #0
 8000ffe:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001000:	2300      	movs	r3, #0
 8001002:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001004:	f107 031c 	add.w	r3, r7, #28
 8001008:	4619      	mov	r1, r3
 800100a:	4810      	ldr	r0, [pc, #64]	@ (800104c <MX_GPIO_Init+0x258>)
 800100c:	f001 fd9a 	bl	8002b44 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED_BLUE_Pin LED_GREEN_Pin */
  GPIO_InitStruct.Pin = LED_BLUE_Pin|LED_GREEN_Pin;
 8001010:	2303      	movs	r3, #3
 8001012:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001014:	2301      	movs	r3, #1
 8001016:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001018:	2300      	movs	r3, #0
 800101a:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800101c:	2300      	movs	r3, #0
 800101e:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001020:	f107 031c 	add.w	r3, r7, #28
 8001024:	4619      	mov	r1, r3
 8001026:	480a      	ldr	r0, [pc, #40]	@ (8001050 <MX_GPIO_Init+0x25c>)
 8001028:	f001 fd8c 	bl	8002b44 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800102c:	bf00      	nop
 800102e:	3730      	adds	r7, #48	@ 0x30
 8001030:	46bd      	mov	sp, r7
 8001032:	bd80      	pop	{r7, pc}
 8001034:	58024400 	.word	0x58024400
 8001038:	58021400 	.word	0x58021400
 800103c:	58020800 	.word	0x58020800
 8001040:	58020000 	.word	0x58020000
 8001044:	58020c00 	.word	0x58020c00
 8001048:	58021800 	.word	0x58021800
 800104c:	58020400 	.word	0x58020400
 8001050:	58021000 	.word	0x58021000

08001054 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8001054:	b480      	push	{r7}
 8001056:	b083      	sub	sp, #12
 8001058:	af00      	add	r7, sp, #0
 800105a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */

  /* USER CODE END 5 */
}
 800105c:	bf00      	nop
 800105e:	370c      	adds	r7, #12
 8001060:	46bd      	mov	sp, r7
 8001062:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001066:	4770      	bx	lr

08001068 <MPU_Config>:

 /* MPU Configuration */

void MPU_Config(void)
{
 8001068:	b580      	push	{r7, lr}
 800106a:	b084      	sub	sp, #16
 800106c:	af00      	add	r7, sp, #0
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 800106e:	463b      	mov	r3, r7
 8001070:	2200      	movs	r2, #0
 8001072:	601a      	str	r2, [r3, #0]
 8001074:	605a      	str	r2, [r3, #4]
 8001076:	609a      	str	r2, [r3, #8]
 8001078:	60da      	str	r2, [r3, #12]

  /* Disables the MPU */
  HAL_MPU_Disable();
 800107a:	f000 ff87 	bl	8001f8c <HAL_MPU_Disable>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 800107e:	2301      	movs	r3, #1
 8001080:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 8001082:	2300      	movs	r3, #0
 8001084:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x0;
 8001086:	2300      	movs	r3, #0
 8001088:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_4GB;
 800108a:	231f      	movs	r3, #31
 800108c:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x87;
 800108e:	2387      	movs	r3, #135	@ 0x87
 8001090:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 8001092:	2300      	movs	r3, #0
 8001094:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_NO_ACCESS;
 8001096:	2300      	movs	r3, #0
 8001098:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 800109a:	2301      	movs	r3, #1
 800109c:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 800109e:	2301      	movs	r3, #1
 80010a0:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 80010a2:	2300      	movs	r3, #0
 80010a4:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 80010a6:	2300      	movs	r3, #0
 80010a8:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 80010aa:	463b      	mov	r3, r7
 80010ac:	4618      	mov	r0, r3
 80010ae:	f000 ffa5 	bl	8001ffc <HAL_MPU_ConfigRegion>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Number = MPU_REGION_NUMBER1;
 80010b2:	2301      	movs	r3, #1
 80010b4:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x30020000;
 80010b6:	4b13      	ldr	r3, [pc, #76]	@ (8001104 <MPU_Config+0x9c>)
 80010b8:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_128KB;
 80010ba:	2310      	movs	r3, #16
 80010bc:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x0;
 80010be:	2300      	movs	r3, #0
 80010c0:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL1;
 80010c2:	2301      	movs	r3, #1
 80010c4:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_FULL_ACCESS;
 80010c6:	2303      	movs	r3, #3
 80010c8:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.IsShareable = MPU_ACCESS_NOT_SHAREABLE;
 80010ca:	2300      	movs	r3, #0
 80010cc:	737b      	strb	r3, [r7, #13]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 80010ce:	463b      	mov	r3, r7
 80010d0:	4618      	mov	r0, r3
 80010d2:	f000 ff93 	bl	8001ffc <HAL_MPU_ConfigRegion>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Number = MPU_REGION_NUMBER2;
 80010d6:	2302      	movs	r3, #2
 80010d8:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x30040000;
 80010da:	4b0b      	ldr	r3, [pc, #44]	@ (8001108 <MPU_Config+0xa0>)
 80010dc:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_512B;
 80010de:	2308      	movs	r3, #8
 80010e0:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 80010e2:	2300      	movs	r3, #0
 80010e4:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 80010e6:	2301      	movs	r3, #1
 80010e8:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_BUFFERABLE;
 80010ea:	2301      	movs	r3, #1
 80010ec:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 80010ee:	463b      	mov	r3, r7
 80010f0:	4618      	mov	r0, r3
 80010f2:	f000 ff83 	bl	8001ffc <HAL_MPU_ConfigRegion>
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 80010f6:	2004      	movs	r0, #4
 80010f8:	f000 ff60 	bl	8001fbc <HAL_MPU_Enable>

}
 80010fc:	bf00      	nop
 80010fe:	3710      	adds	r7, #16
 8001100:	46bd      	mov	sp, r7
 8001102:	bd80      	pop	{r7, pc}
 8001104:	30020000 	.word	0x30020000
 8001108:	30040000 	.word	0x30040000

0800110c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800110c:	b580      	push	{r7, lr}
 800110e:	b082      	sub	sp, #8
 8001110:	af00      	add	r7, sp, #0
 8001112:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	681b      	ldr	r3, [r3, #0]
 8001118:	4a04      	ldr	r2, [pc, #16]	@ (800112c <HAL_TIM_PeriodElapsedCallback+0x20>)
 800111a:	4293      	cmp	r3, r2
 800111c:	d101      	bne.n	8001122 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800111e:	f000 fe21 	bl	8001d64 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8001122:	bf00      	nop
 8001124:	3708      	adds	r7, #8
 8001126:	46bd      	mov	sp, r7
 8001128:	bd80      	pop	{r7, pc}
 800112a:	bf00      	nop
 800112c:	40001000 	.word	0x40001000

08001130 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001130:	b480      	push	{r7}
 8001132:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  //__disable_irq();
  while (1)
 8001134:	bf00      	nop
 8001136:	e7fd      	b.n	8001134 <Error_Handler+0x4>

08001138 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001138:	b580      	push	{r7, lr}
 800113a:	b082      	sub	sp, #8
 800113c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800113e:	4b0c      	ldr	r3, [pc, #48]	@ (8001170 <HAL_MspInit+0x38>)
 8001140:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8001144:	4a0a      	ldr	r2, [pc, #40]	@ (8001170 <HAL_MspInit+0x38>)
 8001146:	f043 0302 	orr.w	r3, r3, #2
 800114a:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 800114e:	4b08      	ldr	r3, [pc, #32]	@ (8001170 <HAL_MspInit+0x38>)
 8001150:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8001154:	f003 0302 	and.w	r3, r3, #2
 8001158:	607b      	str	r3, [r7, #4]
 800115a:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800115c:	2200      	movs	r2, #0
 800115e:	210f      	movs	r1, #15
 8001160:	f06f 0001 	mvn.w	r0, #1
 8001164:	f000 feea 	bl	8001f3c <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001168:	bf00      	nop
 800116a:	3708      	adds	r7, #8
 800116c:	46bd      	mov	sp, r7
 800116e:	bd80      	pop	{r7, pc}
 8001170:	58024400 	.word	0x58024400

08001174 <HAL_ETH_MspInit>:
* This function configures the hardware resources used in this example
* @param heth: ETH handle pointer
* @retval None
*/
void HAL_ETH_MspInit(ETH_HandleTypeDef* heth)
{
 8001174:	b580      	push	{r7, lr}
 8001176:	b08e      	sub	sp, #56	@ 0x38
 8001178:	af00      	add	r7, sp, #0
 800117a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800117c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001180:	2200      	movs	r2, #0
 8001182:	601a      	str	r2, [r3, #0]
 8001184:	605a      	str	r2, [r3, #4]
 8001186:	609a      	str	r2, [r3, #8]
 8001188:	60da      	str	r2, [r3, #12]
 800118a:	611a      	str	r2, [r3, #16]
  if(heth->Instance==ETH)
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	681b      	ldr	r3, [r3, #0]
 8001190:	4a4d      	ldr	r2, [pc, #308]	@ (80012c8 <HAL_ETH_MspInit+0x154>)
 8001192:	4293      	cmp	r3, r2
 8001194:	f040 8093 	bne.w	80012be <HAL_ETH_MspInit+0x14a>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ETH1MAC_CLK_ENABLE();
 8001198:	4b4c      	ldr	r3, [pc, #304]	@ (80012cc <HAL_ETH_MspInit+0x158>)
 800119a:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800119e:	4a4b      	ldr	r2, [pc, #300]	@ (80012cc <HAL_ETH_MspInit+0x158>)
 80011a0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80011a4:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 80011a8:	4b48      	ldr	r3, [pc, #288]	@ (80012cc <HAL_ETH_MspInit+0x158>)
 80011aa:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80011ae:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80011b2:	623b      	str	r3, [r7, #32]
 80011b4:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_ETH1TX_CLK_ENABLE();
 80011b6:	4b45      	ldr	r3, [pc, #276]	@ (80012cc <HAL_ETH_MspInit+0x158>)
 80011b8:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80011bc:	4a43      	ldr	r2, [pc, #268]	@ (80012cc <HAL_ETH_MspInit+0x158>)
 80011be:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80011c2:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 80011c6:	4b41      	ldr	r3, [pc, #260]	@ (80012cc <HAL_ETH_MspInit+0x158>)
 80011c8:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80011cc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80011d0:	61fb      	str	r3, [r7, #28]
 80011d2:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_ETH1RX_CLK_ENABLE();
 80011d4:	4b3d      	ldr	r3, [pc, #244]	@ (80012cc <HAL_ETH_MspInit+0x158>)
 80011d6:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80011da:	4a3c      	ldr	r2, [pc, #240]	@ (80012cc <HAL_ETH_MspInit+0x158>)
 80011dc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80011e0:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 80011e4:	4b39      	ldr	r3, [pc, #228]	@ (80012cc <HAL_ETH_MspInit+0x158>)
 80011e6:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80011ea:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80011ee:	61bb      	str	r3, [r7, #24]
 80011f0:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80011f2:	4b36      	ldr	r3, [pc, #216]	@ (80012cc <HAL_ETH_MspInit+0x158>)
 80011f4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80011f8:	4a34      	ldr	r2, [pc, #208]	@ (80012cc <HAL_ETH_MspInit+0x158>)
 80011fa:	f043 0304 	orr.w	r3, r3, #4
 80011fe:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001202:	4b32      	ldr	r3, [pc, #200]	@ (80012cc <HAL_ETH_MspInit+0x158>)
 8001204:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001208:	f003 0304 	and.w	r3, r3, #4
 800120c:	617b      	str	r3, [r7, #20]
 800120e:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001210:	4b2e      	ldr	r3, [pc, #184]	@ (80012cc <HAL_ETH_MspInit+0x158>)
 8001212:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001216:	4a2d      	ldr	r2, [pc, #180]	@ (80012cc <HAL_ETH_MspInit+0x158>)
 8001218:	f043 0301 	orr.w	r3, r3, #1
 800121c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001220:	4b2a      	ldr	r3, [pc, #168]	@ (80012cc <HAL_ETH_MspInit+0x158>)
 8001222:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001226:	f003 0301 	and.w	r3, r3, #1
 800122a:	613b      	str	r3, [r7, #16]
 800122c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800122e:	4b27      	ldr	r3, [pc, #156]	@ (80012cc <HAL_ETH_MspInit+0x158>)
 8001230:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001234:	4a25      	ldr	r2, [pc, #148]	@ (80012cc <HAL_ETH_MspInit+0x158>)
 8001236:	f043 0302 	orr.w	r3, r3, #2
 800123a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800123e:	4b23      	ldr	r3, [pc, #140]	@ (80012cc <HAL_ETH_MspInit+0x158>)
 8001240:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001244:	f003 0302 	and.w	r3, r3, #2
 8001248:	60fb      	str	r3, [r7, #12]
 800124a:	68fb      	ldr	r3, [r7, #12]
    PC5     ------> ETH_RXD1
    PB11     ------> ETH_TX_EN
    PB12     ------> ETH_TXD0
    PB13     ------> ETH_TXD1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 800124c:	2332      	movs	r3, #50	@ 0x32
 800124e:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001250:	2302      	movs	r3, #2
 8001252:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001254:	2300      	movs	r3, #0
 8001256:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001258:	2303      	movs	r3, #3
 800125a:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800125c:	230b      	movs	r3, #11
 800125e:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001260:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001264:	4619      	mov	r1, r3
 8001266:	481a      	ldr	r0, [pc, #104]	@ (80012d0 <HAL_ETH_MspInit+0x15c>)
 8001268:	f001 fc6c 	bl	8002b44 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_7;
 800126c:	2386      	movs	r3, #134	@ 0x86
 800126e:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001270:	2302      	movs	r3, #2
 8001272:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001274:	2300      	movs	r3, #0
 8001276:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001278:	2303      	movs	r3, #3
 800127a:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800127c:	230b      	movs	r3, #11
 800127e:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001280:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001284:	4619      	mov	r1, r3
 8001286:	4813      	ldr	r0, [pc, #76]	@ (80012d4 <HAL_ETH_MspInit+0x160>)
 8001288:	f001 fc5c 	bl	8002b44 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13;
 800128c:	f44f 5360 	mov.w	r3, #14336	@ 0x3800
 8001290:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001292:	2302      	movs	r3, #2
 8001294:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001296:	2300      	movs	r3, #0
 8001298:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800129a:	2303      	movs	r3, #3
 800129c:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800129e:	230b      	movs	r3, #11
 80012a0:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80012a2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80012a6:	4619      	mov	r1, r3
 80012a8:	480b      	ldr	r0, [pc, #44]	@ (80012d8 <HAL_ETH_MspInit+0x164>)
 80012aa:	f001 fc4b 	bl	8002b44 <HAL_GPIO_Init>

    /* ETH interrupt Init */
    HAL_NVIC_SetPriority(ETH_IRQn, 5, 0);
 80012ae:	2200      	movs	r2, #0
 80012b0:	2105      	movs	r1, #5
 80012b2:	203d      	movs	r0, #61	@ 0x3d
 80012b4:	f000 fe42 	bl	8001f3c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ETH_IRQn);
 80012b8:	203d      	movs	r0, #61	@ 0x3d
 80012ba:	f000 fe59 	bl	8001f70 <HAL_NVIC_EnableIRQ>

  /* USER CODE END ETH_MspInit 1 */

  }

}
 80012be:	bf00      	nop
 80012c0:	3738      	adds	r7, #56	@ 0x38
 80012c2:	46bd      	mov	sp, r7
 80012c4:	bd80      	pop	{r7, pc}
 80012c6:	bf00      	nop
 80012c8:	40028000 	.word	0x40028000
 80012cc:	58024400 	.word	0x58024400
 80012d0:	58020800 	.word	0x58020800
 80012d4:	58020000 	.word	0x58020000
 80012d8:	58020400 	.word	0x58020400

080012dc <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80012dc:	b580      	push	{r7, lr}
 80012de:	b0ba      	sub	sp, #232	@ 0xe8
 80012e0:	af00      	add	r7, sp, #0
 80012e2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012e4:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 80012e8:	2200      	movs	r2, #0
 80012ea:	601a      	str	r2, [r3, #0]
 80012ec:	605a      	str	r2, [r3, #4]
 80012ee:	609a      	str	r2, [r3, #8]
 80012f0:	60da      	str	r2, [r3, #12]
 80012f2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80012f4:	f107 0318 	add.w	r3, r7, #24
 80012f8:	22b8      	movs	r2, #184	@ 0xb8
 80012fa:	2100      	movs	r1, #0
 80012fc:	4618      	mov	r0, r3
 80012fe:	f009 f99b 	bl	800a638 <memset>
  if(hi2c->Instance==I2C1)
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	681b      	ldr	r3, [r3, #0]
 8001306:	4a4d      	ldr	r2, [pc, #308]	@ (800143c <HAL_I2C_MspInit+0x160>)
 8001308:	4293      	cmp	r3, r2
 800130a:	d146      	bne.n	800139a <HAL_I2C_MspInit+0xbe>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 800130c:	f04f 0208 	mov.w	r2, #8
 8001310:	f04f 0300 	mov.w	r3, #0
 8001314:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C1235CLKSOURCE_D2PCLK1;
 8001318:	2300      	movs	r3, #0
 800131a:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800131e:	f107 0318 	add.w	r3, r7, #24
 8001322:	4618      	mov	r0, r3
 8001324:	f002 ff06 	bl	8004134 <HAL_RCCEx_PeriphCLKConfig>
 8001328:	4603      	mov	r3, r0
 800132a:	2b00      	cmp	r3, #0
 800132c:	d001      	beq.n	8001332 <HAL_I2C_MspInit+0x56>
    {
      Error_Handler();
 800132e:	f7ff feff 	bl	8001130 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001332:	4b43      	ldr	r3, [pc, #268]	@ (8001440 <HAL_I2C_MspInit+0x164>)
 8001334:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001338:	4a41      	ldr	r2, [pc, #260]	@ (8001440 <HAL_I2C_MspInit+0x164>)
 800133a:	f043 0302 	orr.w	r3, r3, #2
 800133e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001342:	4b3f      	ldr	r3, [pc, #252]	@ (8001440 <HAL_I2C_MspInit+0x164>)
 8001344:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001348:	f003 0302 	and.w	r3, r3, #2
 800134c:	617b      	str	r3, [r7, #20]
 800134e:	697b      	ldr	r3, [r7, #20]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001350:	23c0      	movs	r3, #192	@ 0xc0
 8001352:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001356:	2312      	movs	r3, #18
 8001358:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800135c:	2300      	movs	r3, #0
 800135e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001362:	2300      	movs	r3, #0
 8001364:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001368:	2304      	movs	r3, #4
 800136a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800136e:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8001372:	4619      	mov	r1, r3
 8001374:	4833      	ldr	r0, [pc, #204]	@ (8001444 <HAL_I2C_MspInit+0x168>)
 8001376:	f001 fbe5 	bl	8002b44 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800137a:	4b31      	ldr	r3, [pc, #196]	@ (8001440 <HAL_I2C_MspInit+0x164>)
 800137c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001380:	4a2f      	ldr	r2, [pc, #188]	@ (8001440 <HAL_I2C_MspInit+0x164>)
 8001382:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001386:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 800138a:	4b2d      	ldr	r3, [pc, #180]	@ (8001440 <HAL_I2C_MspInit+0x164>)
 800138c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001390:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001394:	613b      	str	r3, [r7, #16]
 8001396:	693b      	ldr	r3, [r7, #16]
  /* USER CODE BEGIN I2C5_MspInit 1 */

  /* USER CODE END I2C5_MspInit 1 */
  }

}
 8001398:	e04b      	b.n	8001432 <HAL_I2C_MspInit+0x156>
  else if(hi2c->Instance==I2C5)
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	681b      	ldr	r3, [r3, #0]
 800139e:	4a2a      	ldr	r2, [pc, #168]	@ (8001448 <HAL_I2C_MspInit+0x16c>)
 80013a0:	4293      	cmp	r3, r2
 80013a2:	d146      	bne.n	8001432 <HAL_I2C_MspInit+0x156>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C5;
 80013a4:	f04f 0208 	mov.w	r2, #8
 80013a8:	f04f 0300 	mov.w	r3, #0
 80013ac:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C1235CLKSOURCE_D2PCLK1;
 80013b0:	2300      	movs	r3, #0
 80013b2:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80013b6:	f107 0318 	add.w	r3, r7, #24
 80013ba:	4618      	mov	r0, r3
 80013bc:	f002 feba 	bl	8004134 <HAL_RCCEx_PeriphCLKConfig>
 80013c0:	4603      	mov	r3, r0
 80013c2:	2b00      	cmp	r3, #0
 80013c4:	d001      	beq.n	80013ca <HAL_I2C_MspInit+0xee>
      Error_Handler();
 80013c6:	f7ff feb3 	bl	8001130 <Error_Handler>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80013ca:	4b1d      	ldr	r3, [pc, #116]	@ (8001440 <HAL_I2C_MspInit+0x164>)
 80013cc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80013d0:	4a1b      	ldr	r2, [pc, #108]	@ (8001440 <HAL_I2C_MspInit+0x164>)
 80013d2:	f043 0304 	orr.w	r3, r3, #4
 80013d6:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80013da:	4b19      	ldr	r3, [pc, #100]	@ (8001440 <HAL_I2C_MspInit+0x164>)
 80013dc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80013e0:	f003 0304 	and.w	r3, r3, #4
 80013e4:	60fb      	str	r3, [r7, #12]
 80013e6:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 80013e8:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 80013ec:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80013f0:	2312      	movs	r3, #18
 80013f2:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013f6:	2300      	movs	r3, #0
 80013f8:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013fc:	2300      	movs	r3, #0
 80013fe:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C5;
 8001402:	2304      	movs	r3, #4
 8001404:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001408:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 800140c:	4619      	mov	r1, r3
 800140e:	480f      	ldr	r0, [pc, #60]	@ (800144c <HAL_I2C_MspInit+0x170>)
 8001410:	f001 fb98 	bl	8002b44 <HAL_GPIO_Init>
    __HAL_RCC_I2C5_CLK_ENABLE();
 8001414:	4b0a      	ldr	r3, [pc, #40]	@ (8001440 <HAL_I2C_MspInit+0x164>)
 8001416:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800141a:	4a09      	ldr	r2, [pc, #36]	@ (8001440 <HAL_I2C_MspInit+0x164>)
 800141c:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8001420:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8001424:	4b06      	ldr	r3, [pc, #24]	@ (8001440 <HAL_I2C_MspInit+0x164>)
 8001426:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800142a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800142e:	60bb      	str	r3, [r7, #8]
 8001430:	68bb      	ldr	r3, [r7, #8]
}
 8001432:	bf00      	nop
 8001434:	37e8      	adds	r7, #232	@ 0xe8
 8001436:	46bd      	mov	sp, r7
 8001438:	bd80      	pop	{r7, pc}
 800143a:	bf00      	nop
 800143c:	40005400 	.word	0x40005400
 8001440:	58024400 	.word	0x58024400
 8001444:	58020400 	.word	0x58020400
 8001448:	40006400 	.word	0x40006400
 800144c:	58020800 	.word	0x58020800

08001450 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8001450:	b580      	push	{r7, lr}
 8001452:	b0b0      	sub	sp, #192	@ 0xc0
 8001454:	af00      	add	r7, sp, #0
 8001456:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001458:	f107 0308 	add.w	r3, r7, #8
 800145c:	22b8      	movs	r2, #184	@ 0xb8
 800145e:	2100      	movs	r1, #0
 8001460:	4618      	mov	r0, r3
 8001462:	f009 f8e9 	bl	800a638 <memset>
  if(hrtc->Instance==RTC)
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	681b      	ldr	r3, [r3, #0]
 800146a:	4a10      	ldr	r2, [pc, #64]	@ (80014ac <HAL_RTC_MspInit+0x5c>)
 800146c:	4293      	cmp	r3, r2
 800146e:	d119      	bne.n	80014a4 <HAL_RTC_MspInit+0x54>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8001470:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 8001474:	f04f 0300 	mov.w	r3, #0
 8001478:	e9c7 2302 	strd	r2, r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 800147c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001480:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001484:	f107 0308 	add.w	r3, r7, #8
 8001488:	4618      	mov	r0, r3
 800148a:	f002 fe53 	bl	8004134 <HAL_RCCEx_PeriphCLKConfig>
 800148e:	4603      	mov	r3, r0
 8001490:	2b00      	cmp	r3, #0
 8001492:	d001      	beq.n	8001498 <HAL_RTC_MspInit+0x48>
    {
      Error_Handler();
 8001494:	f7ff fe4c 	bl	8001130 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8001498:	4b05      	ldr	r3, [pc, #20]	@ (80014b0 <HAL_RTC_MspInit+0x60>)
 800149a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800149c:	4a04      	ldr	r2, [pc, #16]	@ (80014b0 <HAL_RTC_MspInit+0x60>)
 800149e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80014a2:	6713      	str	r3, [r2, #112]	@ 0x70

  /* USER CODE END RTC_MspInit 1 */

  }

}
 80014a4:	bf00      	nop
 80014a6:	37c0      	adds	r7, #192	@ 0xc0
 80014a8:	46bd      	mov	sp, r7
 80014aa:	bd80      	pop	{r7, pc}
 80014ac:	58004000 	.word	0x58004000
 80014b0:	58024400 	.word	0x58024400

080014b4 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80014b4:	b580      	push	{r7, lr}
 80014b6:	b0c4      	sub	sp, #272	@ 0x110
 80014b8:	af00      	add	r7, sp, #0
 80014ba:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80014be:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 80014c2:	6018      	str	r0, [r3, #0]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014c4:	f107 03fc 	add.w	r3, r7, #252	@ 0xfc
 80014c8:	2200      	movs	r2, #0
 80014ca:	601a      	str	r2, [r3, #0]
 80014cc:	605a      	str	r2, [r3, #4]
 80014ce:	609a      	str	r2, [r3, #8]
 80014d0:	60da      	str	r2, [r3, #12]
 80014d2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80014d4:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 80014d8:	22b8      	movs	r2, #184	@ 0xb8
 80014da:	2100      	movs	r1, #0
 80014dc:	4618      	mov	r0, r3
 80014de:	f009 f8ab 	bl	800a638 <memset>
  if(hspi->Instance==SPI1)
 80014e2:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80014e6:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 80014ea:	681b      	ldr	r3, [r3, #0]
 80014ec:	681b      	ldr	r3, [r3, #0]
 80014ee:	4ac3      	ldr	r2, [pc, #780]	@ (80017fc <HAL_SPI_MspInit+0x348>)
 80014f0:	4293      	cmp	r3, r2
 80014f2:	d16b      	bne.n	80015cc <HAL_SPI_MspInit+0x118>

  /* USER CODE END SPI1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI1;
 80014f4:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 80014f8:	f04f 0300 	mov.w	r3, #0
 80014fc:	e9c7 2310 	strd	r2, r3, [r7, #64]	@ 0x40
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL;
 8001500:	2300      	movs	r3, #0
 8001502:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001506:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 800150a:	4618      	mov	r0, r3
 800150c:	f002 fe12 	bl	8004134 <HAL_RCCEx_PeriphCLKConfig>
 8001510:	4603      	mov	r3, r0
 8001512:	2b00      	cmp	r3, #0
 8001514:	d001      	beq.n	800151a <HAL_SPI_MspInit+0x66>
    {
      Error_Handler();
 8001516:	f7ff fe0b 	bl	8001130 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800151a:	4bb9      	ldr	r3, [pc, #740]	@ (8001800 <HAL_SPI_MspInit+0x34c>)
 800151c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001520:	4ab7      	ldr	r2, [pc, #732]	@ (8001800 <HAL_SPI_MspInit+0x34c>)
 8001522:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001526:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 800152a:	4bb5      	ldr	r3, [pc, #724]	@ (8001800 <HAL_SPI_MspInit+0x34c>)
 800152c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001530:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001534:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8001536:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001538:	4bb1      	ldr	r3, [pc, #708]	@ (8001800 <HAL_SPI_MspInit+0x34c>)
 800153a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800153e:	4ab0      	ldr	r2, [pc, #704]	@ (8001800 <HAL_SPI_MspInit+0x34c>)
 8001540:	f043 0308 	orr.w	r3, r3, #8
 8001544:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001548:	4bad      	ldr	r3, [pc, #692]	@ (8001800 <HAL_SPI_MspInit+0x34c>)
 800154a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800154e:	f003 0308 	and.w	r3, r3, #8
 8001552:	63bb      	str	r3, [r7, #56]	@ 0x38
 8001554:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8001556:	4baa      	ldr	r3, [pc, #680]	@ (8001800 <HAL_SPI_MspInit+0x34c>)
 8001558:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800155c:	4aa8      	ldr	r2, [pc, #672]	@ (8001800 <HAL_SPI_MspInit+0x34c>)
 800155e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001562:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001566:	4ba6      	ldr	r3, [pc, #664]	@ (8001800 <HAL_SPI_MspInit+0x34c>)
 8001568:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800156c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001570:	637b      	str	r3, [r7, #52]	@ 0x34
 8001572:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
    /**SPI1 GPIO Configuration
    PD7     ------> SPI1_MOSI
    PG9     ------> SPI1_MISO
    PG11     ------> SPI1_SCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8001574:	2380      	movs	r3, #128	@ 0x80
 8001576:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800157a:	2302      	movs	r3, #2
 800157c:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001580:	2300      	movs	r3, #0
 8001582:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001586:	2300      	movs	r3, #0
 8001588:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800158c:	2305      	movs	r3, #5
 800158e:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001592:	f107 03fc 	add.w	r3, r7, #252	@ 0xfc
 8001596:	4619      	mov	r1, r3
 8001598:	489a      	ldr	r0, [pc, #616]	@ (8001804 <HAL_SPI_MspInit+0x350>)
 800159a:	f001 fad3 	bl	8002b44 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_11;
 800159e:	f44f 6320 	mov.w	r3, #2560	@ 0xa00
 80015a2:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015a6:	2302      	movs	r3, #2
 80015a8:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015ac:	2300      	movs	r3, #0
 80015ae:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015b2:	2300      	movs	r3, #0
 80015b4:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80015b8:	2305      	movs	r3, #5
 80015ba:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80015be:	f107 03fc 	add.w	r3, r7, #252	@ 0xfc
 80015c2:	4619      	mov	r1, r3
 80015c4:	4890      	ldr	r0, [pc, #576]	@ (8001808 <HAL_SPI_MspInit+0x354>)
 80015c6:	f001 fabd 	bl	8002b44 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI6_MspInit 1 */

  /* USER CODE END SPI6_MspInit 1 */
  }

}
 80015ca:	e1b1      	b.n	8001930 <HAL_SPI_MspInit+0x47c>
  else if(hspi->Instance==SPI2)
 80015cc:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80015d0:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 80015d4:	681b      	ldr	r3, [r3, #0]
 80015d6:	681b      	ldr	r3, [r3, #0]
 80015d8:	4a8c      	ldr	r2, [pc, #560]	@ (800180c <HAL_SPI_MspInit+0x358>)
 80015da:	4293      	cmp	r3, r2
 80015dc:	d16b      	bne.n	80016b6 <HAL_SPI_MspInit+0x202>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI2;
 80015de:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 80015e2:	f04f 0300 	mov.w	r3, #0
 80015e6:	e9c7 2310 	strd	r2, r3, [r7, #64]	@ 0x40
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL;
 80015ea:	2300      	movs	r3, #0
 80015ec:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80015f0:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 80015f4:	4618      	mov	r0, r3
 80015f6:	f002 fd9d 	bl	8004134 <HAL_RCCEx_PeriphCLKConfig>
 80015fa:	4603      	mov	r3, r0
 80015fc:	2b00      	cmp	r3, #0
 80015fe:	d001      	beq.n	8001604 <HAL_SPI_MspInit+0x150>
      Error_Handler();
 8001600:	f7ff fd96 	bl	8001130 <Error_Handler>
    __HAL_RCC_SPI2_CLK_ENABLE();
 8001604:	4b7e      	ldr	r3, [pc, #504]	@ (8001800 <HAL_SPI_MspInit+0x34c>)
 8001606:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800160a:	4a7d      	ldr	r2, [pc, #500]	@ (8001800 <HAL_SPI_MspInit+0x34c>)
 800160c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001610:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8001614:	4b7a      	ldr	r3, [pc, #488]	@ (8001800 <HAL_SPI_MspInit+0x34c>)
 8001616:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800161a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800161e:	633b      	str	r3, [r7, #48]	@ 0x30
 8001620:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001622:	4b77      	ldr	r3, [pc, #476]	@ (8001800 <HAL_SPI_MspInit+0x34c>)
 8001624:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001628:	4a75      	ldr	r2, [pc, #468]	@ (8001800 <HAL_SPI_MspInit+0x34c>)
 800162a:	f043 0304 	orr.w	r3, r3, #4
 800162e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001632:	4b73      	ldr	r3, [pc, #460]	@ (8001800 <HAL_SPI_MspInit+0x34c>)
 8001634:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001638:	f003 0304 	and.w	r3, r3, #4
 800163c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800163e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001640:	4b6f      	ldr	r3, [pc, #444]	@ (8001800 <HAL_SPI_MspInit+0x34c>)
 8001642:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001646:	4a6e      	ldr	r2, [pc, #440]	@ (8001800 <HAL_SPI_MspInit+0x34c>)
 8001648:	f043 0302 	orr.w	r3, r3, #2
 800164c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001650:	4b6b      	ldr	r3, [pc, #428]	@ (8001800 <HAL_SPI_MspInit+0x34c>)
 8001652:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001656:	f003 0302 	and.w	r3, r3, #2
 800165a:	62bb      	str	r3, [r7, #40]	@ 0x28
 800165c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 800165e:	2308      	movs	r3, #8
 8001660:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001664:	2302      	movs	r3, #2
 8001666:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800166a:	2300      	movs	r3, #0
 800166c:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001670:	2300      	movs	r3, #0
 8001672:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001676:	2305      	movs	r3, #5
 8001678:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800167c:	f107 03fc 	add.w	r3, r7, #252	@ 0xfc
 8001680:	4619      	mov	r1, r3
 8001682:	4863      	ldr	r0, [pc, #396]	@ (8001810 <HAL_SPI_MspInit+0x35c>)
 8001684:	f001 fa5e 	bl	8002b44 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_14;
 8001688:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 800168c:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001690:	2302      	movs	r3, #2
 8001692:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001696:	2300      	movs	r3, #0
 8001698:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800169c:	2300      	movs	r3, #0
 800169e:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80016a2:	2305      	movs	r3, #5
 80016a4:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80016a8:	f107 03fc 	add.w	r3, r7, #252	@ 0xfc
 80016ac:	4619      	mov	r1, r3
 80016ae:	4859      	ldr	r0, [pc, #356]	@ (8001814 <HAL_SPI_MspInit+0x360>)
 80016b0:	f001 fa48 	bl	8002b44 <HAL_GPIO_Init>
}
 80016b4:	e13c      	b.n	8001930 <HAL_SPI_MspInit+0x47c>
  else if(hspi->Instance==SPI4)
 80016b6:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80016ba:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 80016be:	681b      	ldr	r3, [r3, #0]
 80016c0:	681b      	ldr	r3, [r3, #0]
 80016c2:	4a55      	ldr	r2, [pc, #340]	@ (8001818 <HAL_SPI_MspInit+0x364>)
 80016c4:	4293      	cmp	r3, r2
 80016c6:	d147      	bne.n	8001758 <HAL_SPI_MspInit+0x2a4>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI4;
 80016c8:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80016cc:	f04f 0300 	mov.w	r3, #0
 80016d0:	e9c7 2310 	strd	r2, r3, [r7, #64]	@ 0x40
    PeriphClkInitStruct.Spi45ClockSelection = RCC_SPI45CLKSOURCE_D2PCLK1;
 80016d4:	2300      	movs	r3, #0
 80016d6:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80016da:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 80016de:	4618      	mov	r0, r3
 80016e0:	f002 fd28 	bl	8004134 <HAL_RCCEx_PeriphCLKConfig>
 80016e4:	4603      	mov	r3, r0
 80016e6:	2b00      	cmp	r3, #0
 80016e8:	d001      	beq.n	80016ee <HAL_SPI_MspInit+0x23a>
      Error_Handler();
 80016ea:	f7ff fd21 	bl	8001130 <Error_Handler>
    __HAL_RCC_SPI4_CLK_ENABLE();
 80016ee:	4b44      	ldr	r3, [pc, #272]	@ (8001800 <HAL_SPI_MspInit+0x34c>)
 80016f0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80016f4:	4a42      	ldr	r2, [pc, #264]	@ (8001800 <HAL_SPI_MspInit+0x34c>)
 80016f6:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80016fa:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 80016fe:	4b40      	ldr	r3, [pc, #256]	@ (8001800 <HAL_SPI_MspInit+0x34c>)
 8001700:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001704:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001708:	627b      	str	r3, [r7, #36]	@ 0x24
 800170a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    __HAL_RCC_GPIOE_CLK_ENABLE();
 800170c:	4b3c      	ldr	r3, [pc, #240]	@ (8001800 <HAL_SPI_MspInit+0x34c>)
 800170e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001712:	4a3b      	ldr	r2, [pc, #236]	@ (8001800 <HAL_SPI_MspInit+0x34c>)
 8001714:	f043 0310 	orr.w	r3, r3, #16
 8001718:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800171c:	4b38      	ldr	r3, [pc, #224]	@ (8001800 <HAL_SPI_MspInit+0x34c>)
 800171e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001722:	f003 0310 	and.w	r3, r3, #16
 8001726:	623b      	str	r3, [r7, #32]
 8001728:	6a3b      	ldr	r3, [r7, #32]
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_11|GPIO_PIN_12;
 800172a:	f44f 53c3 	mov.w	r3, #6240	@ 0x1860
 800172e:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001732:	2302      	movs	r3, #2
 8001734:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001738:	2300      	movs	r3, #0
 800173a:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800173e:	2300      	movs	r3, #0
 8001740:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI4;
 8001744:	2305      	movs	r3, #5
 8001746:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800174a:	f107 03fc 	add.w	r3, r7, #252	@ 0xfc
 800174e:	4619      	mov	r1, r3
 8001750:	4832      	ldr	r0, [pc, #200]	@ (800181c <HAL_SPI_MspInit+0x368>)
 8001752:	f001 f9f7 	bl	8002b44 <HAL_GPIO_Init>
}
 8001756:	e0eb      	b.n	8001930 <HAL_SPI_MspInit+0x47c>
  else if(hspi->Instance==SPI5)
 8001758:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800175c:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8001760:	681b      	ldr	r3, [r3, #0]
 8001762:	681b      	ldr	r3, [r3, #0]
 8001764:	4a2e      	ldr	r2, [pc, #184]	@ (8001820 <HAL_SPI_MspInit+0x36c>)
 8001766:	4293      	cmp	r3, r2
 8001768:	d15e      	bne.n	8001828 <HAL_SPI_MspInit+0x374>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI5;
 800176a:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800176e:	f04f 0300 	mov.w	r3, #0
 8001772:	e9c7 2310 	strd	r2, r3, [r7, #64]	@ 0x40
    PeriphClkInitStruct.Spi45ClockSelection = RCC_SPI45CLKSOURCE_D2PCLK1;
 8001776:	2300      	movs	r3, #0
 8001778:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800177c:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8001780:	4618      	mov	r0, r3
 8001782:	f002 fcd7 	bl	8004134 <HAL_RCCEx_PeriphCLKConfig>
 8001786:	4603      	mov	r3, r0
 8001788:	2b00      	cmp	r3, #0
 800178a:	d001      	beq.n	8001790 <HAL_SPI_MspInit+0x2dc>
      Error_Handler();
 800178c:	f7ff fcd0 	bl	8001130 <Error_Handler>
    __HAL_RCC_SPI5_CLK_ENABLE();
 8001790:	4b1b      	ldr	r3, [pc, #108]	@ (8001800 <HAL_SPI_MspInit+0x34c>)
 8001792:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001796:	4a1a      	ldr	r2, [pc, #104]	@ (8001800 <HAL_SPI_MspInit+0x34c>)
 8001798:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800179c:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 80017a0:	4b17      	ldr	r3, [pc, #92]	@ (8001800 <HAL_SPI_MspInit+0x34c>)
 80017a2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80017a6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80017aa:	61fb      	str	r3, [r7, #28]
 80017ac:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 80017ae:	4b14      	ldr	r3, [pc, #80]	@ (8001800 <HAL_SPI_MspInit+0x34c>)
 80017b0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80017b4:	4a12      	ldr	r2, [pc, #72]	@ (8001800 <HAL_SPI_MspInit+0x34c>)
 80017b6:	f043 0320 	orr.w	r3, r3, #32
 80017ba:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80017be:	4b10      	ldr	r3, [pc, #64]	@ (8001800 <HAL_SPI_MspInit+0x34c>)
 80017c0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80017c4:	f003 0320 	and.w	r3, r3, #32
 80017c8:	61bb      	str	r3, [r7, #24]
 80017ca:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
 80017cc:	f44f 7360 	mov.w	r3, #896	@ 0x380
 80017d0:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017d4:	2302      	movs	r3, #2
 80017d6:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017da:	2300      	movs	r3, #0
 80017dc:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017e0:	2300      	movs	r3, #0
 80017e2:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI5;
 80017e6:	2305      	movs	r3, #5
 80017e8:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80017ec:	f107 03fc 	add.w	r3, r7, #252	@ 0xfc
 80017f0:	4619      	mov	r1, r3
 80017f2:	480c      	ldr	r0, [pc, #48]	@ (8001824 <HAL_SPI_MspInit+0x370>)
 80017f4:	f001 f9a6 	bl	8002b44 <HAL_GPIO_Init>
}
 80017f8:	e09a      	b.n	8001930 <HAL_SPI_MspInit+0x47c>
 80017fa:	bf00      	nop
 80017fc:	40013000 	.word	0x40013000
 8001800:	58024400 	.word	0x58024400
 8001804:	58020c00 	.word	0x58020c00
 8001808:	58021800 	.word	0x58021800
 800180c:	40003800 	.word	0x40003800
 8001810:	58020800 	.word	0x58020800
 8001814:	58020400 	.word	0x58020400
 8001818:	40013400 	.word	0x40013400
 800181c:	58021000 	.word	0x58021000
 8001820:	40015000 	.word	0x40015000
 8001824:	58021400 	.word	0x58021400
  else if(hspi->Instance==SPI6)
 8001828:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800182c:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8001830:	681b      	ldr	r3, [r3, #0]
 8001832:	681b      	ldr	r3, [r3, #0]
 8001834:	4a41      	ldr	r2, [pc, #260]	@ (800193c <HAL_SPI_MspInit+0x488>)
 8001836:	4293      	cmp	r3, r2
 8001838:	d17a      	bne.n	8001930 <HAL_SPI_MspInit+0x47c>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI6;
 800183a:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 800183e:	f04f 0300 	mov.w	r3, #0
 8001842:	e9c7 2310 	strd	r2, r3, [r7, #64]	@ 0x40
    PeriphClkInitStruct.Spi6ClockSelection = RCC_SPI6CLKSOURCE_D3PCLK1;
 8001846:	2300      	movs	r3, #0
 8001848:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800184c:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8001850:	4618      	mov	r0, r3
 8001852:	f002 fc6f 	bl	8004134 <HAL_RCCEx_PeriphCLKConfig>
 8001856:	4603      	mov	r3, r0
 8001858:	2b00      	cmp	r3, #0
 800185a:	d001      	beq.n	8001860 <HAL_SPI_MspInit+0x3ac>
      Error_Handler();
 800185c:	f7ff fc68 	bl	8001130 <Error_Handler>
    __HAL_RCC_SPI6_CLK_ENABLE();
 8001860:	4b37      	ldr	r3, [pc, #220]	@ (8001940 <HAL_SPI_MspInit+0x48c>)
 8001862:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8001866:	4a36      	ldr	r2, [pc, #216]	@ (8001940 <HAL_SPI_MspInit+0x48c>)
 8001868:	f043 0320 	orr.w	r3, r3, #32
 800186c:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8001870:	4b33      	ldr	r3, [pc, #204]	@ (8001940 <HAL_SPI_MspInit+0x48c>)
 8001872:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8001876:	f003 0320 	and.w	r3, r3, #32
 800187a:	617b      	str	r3, [r7, #20]
 800187c:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800187e:	4b30      	ldr	r3, [pc, #192]	@ (8001940 <HAL_SPI_MspInit+0x48c>)
 8001880:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001884:	4a2e      	ldr	r2, [pc, #184]	@ (8001940 <HAL_SPI_MspInit+0x48c>)
 8001886:	f043 0301 	orr.w	r3, r3, #1
 800188a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800188e:	4b2c      	ldr	r3, [pc, #176]	@ (8001940 <HAL_SPI_MspInit+0x48c>)
 8001890:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001894:	f003 0201 	and.w	r2, r3, #1
 8001898:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800189c:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 80018a0:	601a      	str	r2, [r3, #0]
 80018a2:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80018a6:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 80018aa:	681b      	ldr	r3, [r3, #0]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 80018ac:	4b24      	ldr	r3, [pc, #144]	@ (8001940 <HAL_SPI_MspInit+0x48c>)
 80018ae:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80018b2:	4a23      	ldr	r2, [pc, #140]	@ (8001940 <HAL_SPI_MspInit+0x48c>)
 80018b4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80018b8:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80018bc:	4b20      	ldr	r3, [pc, #128]	@ (8001940 <HAL_SPI_MspInit+0x48c>)
 80018be:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80018c2:	f003 0240 	and.w	r2, r3, #64	@ 0x40
 80018c6:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80018ca:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80018ce:	601a      	str	r2, [r3, #0]
 80018d0:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80018d4:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80018d8:	681b      	ldr	r3, [r3, #0]
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 80018da:	2360      	movs	r3, #96	@ 0x60
 80018dc:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018e0:	2302      	movs	r3, #2
 80018e2:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018e6:	2300      	movs	r3, #0
 80018e8:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018ec:	2300      	movs	r3, #0
 80018ee:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
    GPIO_InitStruct.Alternate = GPIO_AF8_SPI6;
 80018f2:	2308      	movs	r3, #8
 80018f4:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80018f8:	f107 03fc 	add.w	r3, r7, #252	@ 0xfc
 80018fc:	4619      	mov	r1, r3
 80018fe:	4811      	ldr	r0, [pc, #68]	@ (8001944 <HAL_SPI_MspInit+0x490>)
 8001900:	f001 f920 	bl	8002b44 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_14;
 8001904:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8001908:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800190c:	2302      	movs	r3, #2
 800190e:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001912:	2300      	movs	r3, #0
 8001914:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001918:	2300      	movs	r3, #0
 800191a:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI6;
 800191e:	2305      	movs	r3, #5
 8001920:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001924:	f107 03fc 	add.w	r3, r7, #252	@ 0xfc
 8001928:	4619      	mov	r1, r3
 800192a:	4807      	ldr	r0, [pc, #28]	@ (8001948 <HAL_SPI_MspInit+0x494>)
 800192c:	f001 f90a 	bl	8002b44 <HAL_GPIO_Init>
}
 8001930:	bf00      	nop
 8001932:	f507 7788 	add.w	r7, r7, #272	@ 0x110
 8001936:	46bd      	mov	sp, r7
 8001938:	bd80      	pop	{r7, pc}
 800193a:	bf00      	nop
 800193c:	58001400 	.word	0x58001400
 8001940:	58024400 	.word	0x58024400
 8001944:	58020000 	.word	0x58020000
 8001948:	58021800 	.word	0x58021800

0800194c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800194c:	b580      	push	{r7, lr}
 800194e:	b0b8      	sub	sp, #224	@ 0xe0
 8001950:	af00      	add	r7, sp, #0
 8001952:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001954:	f107 03cc 	add.w	r3, r7, #204	@ 0xcc
 8001958:	2200      	movs	r2, #0
 800195a:	601a      	str	r2, [r3, #0]
 800195c:	605a      	str	r2, [r3, #4]
 800195e:	609a      	str	r2, [r3, #8]
 8001960:	60da      	str	r2, [r3, #12]
 8001962:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001964:	f107 0310 	add.w	r3, r7, #16
 8001968:	22b8      	movs	r2, #184	@ 0xb8
 800196a:	2100      	movs	r1, #0
 800196c:	4618      	mov	r0, r3
 800196e:	f008 fe63 	bl	800a638 <memset>
  if(huart->Instance==USART10)
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	681b      	ldr	r3, [r3, #0]
 8001976:	4a31      	ldr	r2, [pc, #196]	@ (8001a3c <HAL_UART_MspInit+0xf0>)
 8001978:	4293      	cmp	r3, r2
 800197a:	d15a      	bne.n	8001a32 <HAL_UART_MspInit+0xe6>

  /* USER CODE END USART10_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART10;
 800197c:	f04f 0201 	mov.w	r2, #1
 8001980:	f04f 0300 	mov.w	r3, #0
 8001984:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Usart16ClockSelection = RCC_USART16910CLKSOURCE_D2PCLK2;
 8001988:	2300      	movs	r3, #0
 800198a:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800198e:	f107 0310 	add.w	r3, r7, #16
 8001992:	4618      	mov	r0, r3
 8001994:	f002 fbce 	bl	8004134 <HAL_RCCEx_PeriphCLKConfig>
 8001998:	4603      	mov	r3, r0
 800199a:	2b00      	cmp	r3, #0
 800199c:	d001      	beq.n	80019a2 <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 800199e:	f7ff fbc7 	bl	8001130 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART10_CLK_ENABLE();
 80019a2:	4b27      	ldr	r3, [pc, #156]	@ (8001a40 <HAL_UART_MspInit+0xf4>)
 80019a4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80019a8:	4a25      	ldr	r2, [pc, #148]	@ (8001a40 <HAL_UART_MspInit+0xf4>)
 80019aa:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80019ae:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 80019b2:	4b23      	ldr	r3, [pc, #140]	@ (8001a40 <HAL_UART_MspInit+0xf4>)
 80019b4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80019b8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80019bc:	60fb      	str	r3, [r7, #12]
 80019be:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 80019c0:	4b1f      	ldr	r3, [pc, #124]	@ (8001a40 <HAL_UART_MspInit+0xf4>)
 80019c2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80019c6:	4a1e      	ldr	r2, [pc, #120]	@ (8001a40 <HAL_UART_MspInit+0xf4>)
 80019c8:	f043 0310 	orr.w	r3, r3, #16
 80019cc:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80019d0:	4b1b      	ldr	r3, [pc, #108]	@ (8001a40 <HAL_UART_MspInit+0xf4>)
 80019d2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80019d6:	f003 0310 	and.w	r3, r3, #16
 80019da:	60bb      	str	r3, [r7, #8]
 80019dc:	68bb      	ldr	r3, [r7, #8]
    /**USART10 GPIO Configuration
    PE2     ------> USART10_RX
    PE3     ------> USART10_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80019de:	2304      	movs	r3, #4
 80019e0:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019e4:	2302      	movs	r3, #2
 80019e6:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019ea:	2300      	movs	r3, #0
 80019ec:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019f0:	2300      	movs	r3, #0
 80019f2:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF4_USART10;
 80019f6:	2304      	movs	r3, #4
 80019f8:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80019fc:	f107 03cc 	add.w	r3, r7, #204	@ 0xcc
 8001a00:	4619      	mov	r1, r3
 8001a02:	4810      	ldr	r0, [pc, #64]	@ (8001a44 <HAL_UART_MspInit+0xf8>)
 8001a04:	f001 f89e 	bl	8002b44 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001a08:	2308      	movs	r3, #8
 8001a0a:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a0e:	2302      	movs	r3, #2
 8001a10:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a14:	2300      	movs	r3, #0
 8001a16:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a1a:	2300      	movs	r3, #0
 8001a1c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF11_USART10;
 8001a20:	230b      	movs	r3, #11
 8001a22:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001a26:	f107 03cc 	add.w	r3, r7, #204	@ 0xcc
 8001a2a:	4619      	mov	r1, r3
 8001a2c:	4805      	ldr	r0, [pc, #20]	@ (8001a44 <HAL_UART_MspInit+0xf8>)
 8001a2e:	f001 f889 	bl	8002b44 <HAL_GPIO_Init>

  /* USER CODE END USART10_MspInit 1 */

  }

}
 8001a32:	bf00      	nop
 8001a34:	37e0      	adds	r7, #224	@ 0xe0
 8001a36:	46bd      	mov	sp, r7
 8001a38:	bd80      	pop	{r7, pc}
 8001a3a:	bf00      	nop
 8001a3c:	40011c00 	.word	0x40011c00
 8001a40:	58024400 	.word	0x58024400
 8001a44:	58021000 	.word	0x58021000

08001a48 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001a48:	b580      	push	{r7, lr}
 8001a4a:	b090      	sub	sp, #64	@ 0x40
 8001a4c:	af00      	add	r7, sp, #0
 8001a4e:	6078      	str	r0, [r7, #4]
  uint32_t              uwTimclock, uwAPB1Prescaler;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
  /*Configure the TIM6 IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	2b0f      	cmp	r3, #15
 8001a54:	d827      	bhi.n	8001aa6 <HAL_InitTick+0x5e>
   {
     HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0);
 8001a56:	2200      	movs	r2, #0
 8001a58:	6879      	ldr	r1, [r7, #4]
 8001a5a:	2036      	movs	r0, #54	@ 0x36
 8001a5c:	f000 fa6e 	bl	8001f3c <HAL_NVIC_SetPriority>

     /* Enable the TIM6 global Interrupt */
     HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8001a60:	2036      	movs	r0, #54	@ 0x36
 8001a62:	f000 fa85 	bl	8001f70 <HAL_NVIC_EnableIRQ>
     uwTickPrio = TickPriority;
 8001a66:	4a29      	ldr	r2, [pc, #164]	@ (8001b0c <HAL_InitTick+0xc4>)
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8001a6c:	4b28      	ldr	r3, [pc, #160]	@ (8001b10 <HAL_InitTick+0xc8>)
 8001a6e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001a72:	4a27      	ldr	r2, [pc, #156]	@ (8001b10 <HAL_InitTick+0xc8>)
 8001a74:	f043 0310 	orr.w	r3, r3, #16
 8001a78:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8001a7c:	4b24      	ldr	r3, [pc, #144]	@ (8001b10 <HAL_InitTick+0xc8>)
 8001a7e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001a82:	f003 0310 	and.w	r3, r3, #16
 8001a86:	60fb      	str	r3, [r7, #12]
 8001a88:	68fb      	ldr	r3, [r7, #12]
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001a8a:	f107 0210 	add.w	r2, r7, #16
 8001a8e:	f107 0314 	add.w	r3, r7, #20
 8001a92:	4611      	mov	r1, r2
 8001a94:	4618      	mov	r0, r3
 8001a96:	f002 fb0b 	bl	80040b0 <HAL_RCC_GetClockConfig>
  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8001a9a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001a9c:	63bb      	str	r3, [r7, #56]	@ 0x38
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8001a9e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001aa0:	2b00      	cmp	r3, #0
 8001aa2:	d106      	bne.n	8001ab2 <HAL_InitTick+0x6a>
 8001aa4:	e001      	b.n	8001aaa <HAL_InitTick+0x62>
    return HAL_ERROR;
 8001aa6:	2301      	movs	r3, #1
 8001aa8:	e02b      	b.n	8001b02 <HAL_InitTick+0xba>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8001aaa:	f002 fad5 	bl	8004058 <HAL_RCC_GetPCLK1Freq>
 8001aae:	63f8      	str	r0, [r7, #60]	@ 0x3c
 8001ab0:	e004      	b.n	8001abc <HAL_InitTick+0x74>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8001ab2:	f002 fad1 	bl	8004058 <HAL_RCC_GetPCLK1Freq>
 8001ab6:	4603      	mov	r3, r0
 8001ab8:	005b      	lsls	r3, r3, #1
 8001aba:	63fb      	str	r3, [r7, #60]	@ 0x3c
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001abc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001abe:	4a15      	ldr	r2, [pc, #84]	@ (8001b14 <HAL_InitTick+0xcc>)
 8001ac0:	fba2 2303 	umull	r2, r3, r2, r3
 8001ac4:	0c9b      	lsrs	r3, r3, #18
 8001ac6:	3b01      	subs	r3, #1
 8001ac8:	637b      	str	r3, [r7, #52]	@ 0x34

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8001aca:	4b13      	ldr	r3, [pc, #76]	@ (8001b18 <HAL_InitTick+0xd0>)
 8001acc:	4a13      	ldr	r2, [pc, #76]	@ (8001b1c <HAL_InitTick+0xd4>)
 8001ace:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8001ad0:	4b11      	ldr	r3, [pc, #68]	@ (8001b18 <HAL_InitTick+0xd0>)
 8001ad2:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8001ad6:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8001ad8:	4a0f      	ldr	r2, [pc, #60]	@ (8001b18 <HAL_InitTick+0xd0>)
 8001ada:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001adc:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8001ade:	4b0e      	ldr	r3, [pc, #56]	@ (8001b18 <HAL_InitTick+0xd0>)
 8001ae0:	2200      	movs	r2, #0
 8001ae2:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001ae4:	4b0c      	ldr	r3, [pc, #48]	@ (8001b18 <HAL_InitTick+0xd0>)
 8001ae6:	2200      	movs	r2, #0
 8001ae8:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 8001aea:	480b      	ldr	r0, [pc, #44]	@ (8001b18 <HAL_InitTick+0xd0>)
 8001aec:	f004 fb3b 	bl	8006166 <HAL_TIM_Base_Init>
 8001af0:	4603      	mov	r3, r0
 8001af2:	2b00      	cmp	r3, #0
 8001af4:	d104      	bne.n	8001b00 <HAL_InitTick+0xb8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 8001af6:	4808      	ldr	r0, [pc, #32]	@ (8001b18 <HAL_InitTick+0xd0>)
 8001af8:	f004 fb96 	bl	8006228 <HAL_TIM_Base_Start_IT>
 8001afc:	4603      	mov	r3, r0
 8001afe:	e000      	b.n	8001b02 <HAL_InitTick+0xba>
  }

  /* Return function status */
  return HAL_ERROR;
 8001b00:	2301      	movs	r3, #1
}
 8001b02:	4618      	mov	r0, r3
 8001b04:	3740      	adds	r7, #64	@ 0x40
 8001b06:	46bd      	mov	sp, r7
 8001b08:	bd80      	pop	{r7, pc}
 8001b0a:	bf00      	nop
 8001b0c:	24000008 	.word	0x24000008
 8001b10:	58024400 	.word	0x58024400
 8001b14:	431bde83 	.word	0x431bde83
 8001b18:	2400057c 	.word	0x2400057c
 8001b1c:	40001000 	.word	0x40001000

08001b20 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001b20:	b480      	push	{r7}
 8001b22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001b24:	bf00      	nop
 8001b26:	e7fd      	b.n	8001b24 <NMI_Handler+0x4>

08001b28 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001b28:	b480      	push	{r7}
 8001b2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001b2c:	bf00      	nop
 8001b2e:	e7fd      	b.n	8001b2c <HardFault_Handler+0x4>

08001b30 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001b30:	b480      	push	{r7}
 8001b32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001b34:	bf00      	nop
 8001b36:	e7fd      	b.n	8001b34 <MemManage_Handler+0x4>

08001b38 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001b38:	b480      	push	{r7}
 8001b3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001b3c:	bf00      	nop
 8001b3e:	e7fd      	b.n	8001b3c <BusFault_Handler+0x4>

08001b40 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001b40:	b480      	push	{r7}
 8001b42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001b44:	bf00      	nop
 8001b46:	e7fd      	b.n	8001b44 <UsageFault_Handler+0x4>

08001b48 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001b48:	b480      	push	{r7}
 8001b4a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001b4c:	bf00      	nop
 8001b4e:	46bd      	mov	sp, r7
 8001b50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b54:	4770      	bx	lr
	...

08001b58 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1_CH1 and DAC1_CH2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8001b58:	b580      	push	{r7, lr}
 8001b5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8001b5c:	4802      	ldr	r0, [pc, #8]	@ (8001b68 <TIM6_DAC_IRQHandler+0x10>)
 8001b5e:	f004 fbe9 	bl	8006334 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8001b62:	bf00      	nop
 8001b64:	bd80      	pop	{r7, pc}
 8001b66:	bf00      	nop
 8001b68:	2400057c 	.word	0x2400057c

08001b6c <ETH_IRQHandler>:

/**
  * @brief This function handles Ethernet global interrupt.
  */
void ETH_IRQHandler(void)
{
 8001b6c:	b580      	push	{r7, lr}
 8001b6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ETH_IRQn 0 */

  /* USER CODE END ETH_IRQn 0 */
  HAL_ETH_IRQHandler(&heth);
 8001b70:	4802      	ldr	r0, [pc, #8]	@ (8001b7c <ETH_IRQHandler+0x10>)
 8001b72:	f000 fb81 	bl	8002278 <HAL_ETH_IRQHandler>
  /* USER CODE BEGIN ETH_IRQn 1 */

  /* USER CODE END ETH_IRQn 1 */
}
 8001b76:	bf00      	nop
 8001b78:	bd80      	pop	{r7, pc}
 8001b7a:	bf00      	nop
 8001b7c:	240000b8 	.word	0x240000b8

08001b80 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001b80:	b480      	push	{r7}
 8001b82:	b083      	sub	sp, #12
 8001b84:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001b86:	4b3c      	ldr	r3, [pc, #240]	@ (8001c78 <SystemInit+0xf8>)
 8001b88:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001b8c:	4a3a      	ldr	r2, [pc, #232]	@ (8001c78 <SystemInit+0xf8>)
 8001b8e:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001b92:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8001b96:	4b39      	ldr	r3, [pc, #228]	@ (8001c7c <SystemInit+0xfc>)
 8001b98:	681b      	ldr	r3, [r3, #0]
 8001b9a:	f003 030f 	and.w	r3, r3, #15
 8001b9e:	2b06      	cmp	r3, #6
 8001ba0:	d807      	bhi.n	8001bb2 <SystemInit+0x32>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8001ba2:	4b36      	ldr	r3, [pc, #216]	@ (8001c7c <SystemInit+0xfc>)
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	f023 030f 	bic.w	r3, r3, #15
 8001baa:	4a34      	ldr	r2, [pc, #208]	@ (8001c7c <SystemInit+0xfc>)
 8001bac:	f043 0307 	orr.w	r3, r3, #7
 8001bb0:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8001bb2:	4b33      	ldr	r3, [pc, #204]	@ (8001c80 <SystemInit+0x100>)
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	4a32      	ldr	r2, [pc, #200]	@ (8001c80 <SystemInit+0x100>)
 8001bb8:	f043 0301 	orr.w	r3, r3, #1
 8001bbc:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8001bbe:	4b30      	ldr	r3, [pc, #192]	@ (8001c80 <SystemInit+0x100>)
 8001bc0:	2200      	movs	r2, #0
 8001bc2:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8001bc4:	4b2e      	ldr	r3, [pc, #184]	@ (8001c80 <SystemInit+0x100>)
 8001bc6:	681a      	ldr	r2, [r3, #0]
 8001bc8:	492d      	ldr	r1, [pc, #180]	@ (8001c80 <SystemInit+0x100>)
 8001bca:	4b2e      	ldr	r3, [pc, #184]	@ (8001c84 <SystemInit+0x104>)
 8001bcc:	4013      	ands	r3, r2
 8001bce:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8001bd0:	4b2a      	ldr	r3, [pc, #168]	@ (8001c7c <SystemInit+0xfc>)
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	f003 0308 	and.w	r3, r3, #8
 8001bd8:	2b00      	cmp	r3, #0
 8001bda:	d007      	beq.n	8001bec <SystemInit+0x6c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8001bdc:	4b27      	ldr	r3, [pc, #156]	@ (8001c7c <SystemInit+0xfc>)
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	f023 030f 	bic.w	r3, r3, #15
 8001be4:	4a25      	ldr	r2, [pc, #148]	@ (8001c7c <SystemInit+0xfc>)
 8001be6:	f043 0307 	orr.w	r3, r3, #7
 8001bea:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8001bec:	4b24      	ldr	r3, [pc, #144]	@ (8001c80 <SystemInit+0x100>)
 8001bee:	2200      	movs	r2, #0
 8001bf0:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8001bf2:	4b23      	ldr	r3, [pc, #140]	@ (8001c80 <SystemInit+0x100>)
 8001bf4:	2200      	movs	r2, #0
 8001bf6:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8001bf8:	4b21      	ldr	r3, [pc, #132]	@ (8001c80 <SystemInit+0x100>)
 8001bfa:	2200      	movs	r2, #0
 8001bfc:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8001bfe:	4b20      	ldr	r3, [pc, #128]	@ (8001c80 <SystemInit+0x100>)
 8001c00:	4a21      	ldr	r2, [pc, #132]	@ (8001c88 <SystemInit+0x108>)
 8001c02:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8001c04:	4b1e      	ldr	r3, [pc, #120]	@ (8001c80 <SystemInit+0x100>)
 8001c06:	4a21      	ldr	r2, [pc, #132]	@ (8001c8c <SystemInit+0x10c>)
 8001c08:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8001c0a:	4b1d      	ldr	r3, [pc, #116]	@ (8001c80 <SystemInit+0x100>)
 8001c0c:	4a20      	ldr	r2, [pc, #128]	@ (8001c90 <SystemInit+0x110>)
 8001c0e:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8001c10:	4b1b      	ldr	r3, [pc, #108]	@ (8001c80 <SystemInit+0x100>)
 8001c12:	2200      	movs	r2, #0
 8001c14:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8001c16:	4b1a      	ldr	r3, [pc, #104]	@ (8001c80 <SystemInit+0x100>)
 8001c18:	4a1d      	ldr	r2, [pc, #116]	@ (8001c90 <SystemInit+0x110>)
 8001c1a:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8001c1c:	4b18      	ldr	r3, [pc, #96]	@ (8001c80 <SystemInit+0x100>)
 8001c1e:	2200      	movs	r2, #0
 8001c20:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8001c22:	4b17      	ldr	r3, [pc, #92]	@ (8001c80 <SystemInit+0x100>)
 8001c24:	4a1a      	ldr	r2, [pc, #104]	@ (8001c90 <SystemInit+0x110>)
 8001c26:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8001c28:	4b15      	ldr	r3, [pc, #84]	@ (8001c80 <SystemInit+0x100>)
 8001c2a:	2200      	movs	r2, #0
 8001c2c:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001c2e:	4b14      	ldr	r3, [pc, #80]	@ (8001c80 <SystemInit+0x100>)
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	4a13      	ldr	r2, [pc, #76]	@ (8001c80 <SystemInit+0x100>)
 8001c34:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001c38:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8001c3a:	4b11      	ldr	r3, [pc, #68]	@ (8001c80 <SystemInit+0x100>)
 8001c3c:	2200      	movs	r2, #0
 8001c3e:	661a      	str	r2, [r3, #96]	@ 0x60
#if defined(DATA_IN_D2_SRAM)
  /* in case of initialized data in D2 SRAM (AHB SRAM), enable the D2 SRAM clock (AHB SRAM clock) */
#if defined(RCC_AHB2ENR_D2SRAM3EN)
  RCC->AHB2ENR |= (RCC_AHB2ENR_D2SRAM1EN | RCC_AHB2ENR_D2SRAM2EN | RCC_AHB2ENR_D2SRAM3EN);
#elif defined(RCC_AHB2ENR_D2SRAM2EN)
  RCC->AHB2ENR |= (RCC_AHB2ENR_D2SRAM1EN | RCC_AHB2ENR_D2SRAM2EN);
 8001c40:	4b0f      	ldr	r3, [pc, #60]	@ (8001c80 <SystemInit+0x100>)
 8001c42:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8001c46:	4a0e      	ldr	r2, [pc, #56]	@ (8001c80 <SystemInit+0x100>)
 8001c48:	f043 43c0 	orr.w	r3, r3, #1610612736	@ 0x60000000
 8001c4c:	f8c2 30dc 	str.w	r3, [r2, #220]	@ 0xdc
#else
  RCC->AHB2ENR |= (RCC_AHB2ENR_AHBSRAM1EN | RCC_AHB2ENR_AHBSRAM2EN);
#endif /* RCC_AHB2ENR_D2SRAM3EN */

  tmpreg = RCC->AHB2ENR;
 8001c50:	4b0b      	ldr	r3, [pc, #44]	@ (8001c80 <SystemInit+0x100>)
 8001c52:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8001c56:	607b      	str	r3, [r7, #4]
  (void) tmpreg;
 8001c58:	687b      	ldr	r3, [r7, #4]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8001c5a:	4b0e      	ldr	r3, [pc, #56]	@ (8001c94 <SystemInit+0x114>)
 8001c5c:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 8001c60:	601a      	str	r2, [r3, #0]

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
 8001c62:	4b05      	ldr	r3, [pc, #20]	@ (8001c78 <SystemInit+0xf8>)
 8001c64:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8001c68:	609a      	str	r2, [r3, #8]
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8001c6a:	bf00      	nop
 8001c6c:	370c      	adds	r7, #12
 8001c6e:	46bd      	mov	sp, r7
 8001c70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c74:	4770      	bx	lr
 8001c76:	bf00      	nop
 8001c78:	e000ed00 	.word	0xe000ed00
 8001c7c:	52002000 	.word	0x52002000
 8001c80:	58024400 	.word	0x58024400
 8001c84:	eaf6ed7f 	.word	0xeaf6ed7f
 8001c88:	02020200 	.word	0x02020200
 8001c8c:	01ff0000 	.word	0x01ff0000
 8001c90:	01010280 	.word	0x01010280
 8001c94:	52004000 	.word	0x52004000

08001c98 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8001c98:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001cd0 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8001c9c:	f7ff ff70 	bl	8001b80 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001ca0:	480c      	ldr	r0, [pc, #48]	@ (8001cd4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001ca2:	490d      	ldr	r1, [pc, #52]	@ (8001cd8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001ca4:	4a0d      	ldr	r2, [pc, #52]	@ (8001cdc <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001ca6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001ca8:	e002      	b.n	8001cb0 <LoopCopyDataInit>

08001caa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001caa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001cac:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001cae:	3304      	adds	r3, #4

08001cb0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001cb0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001cb2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001cb4:	d3f9      	bcc.n	8001caa <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001cb6:	4a0a      	ldr	r2, [pc, #40]	@ (8001ce0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001cb8:	4c0a      	ldr	r4, [pc, #40]	@ (8001ce4 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001cba:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001cbc:	e001      	b.n	8001cc2 <LoopFillZerobss>

08001cbe <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001cbe:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001cc0:	3204      	adds	r2, #4

08001cc2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001cc2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001cc4:	d3fb      	bcc.n	8001cbe <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001cc6:	f008 fd15 	bl	800a6f4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001cca:	f7fe fc99 	bl	8000600 <main>
  bx  lr
 8001cce:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001cd0:	24050000 	.word	0x24050000
  ldr r0, =_sdata
 8001cd4:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8001cd8:	24000064 	.word	0x24000064
  ldr r2, =_sidata
 8001cdc:	0800a8b0 	.word	0x0800a8b0
  ldr r2, =_sbss
 8001ce0:	24000064 	.word	0x24000064
  ldr r4, =_ebss
 8001ce4:	24005100 	.word	0x24005100

08001ce8 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001ce8:	e7fe      	b.n	8001ce8 <ADC3_IRQHandler>
	...

08001cec <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001cec:	b580      	push	{r7, lr}
 8001cee:	b082      	sub	sp, #8
 8001cf0:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001cf2:	2003      	movs	r0, #3
 8001cf4:	f000 f917 	bl	8001f26 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8001cf8:	f002 f804 	bl	8003d04 <HAL_RCC_GetSysClockFreq>
 8001cfc:	4602      	mov	r2, r0
 8001cfe:	4b15      	ldr	r3, [pc, #84]	@ (8001d54 <HAL_Init+0x68>)
 8001d00:	699b      	ldr	r3, [r3, #24]
 8001d02:	0a1b      	lsrs	r3, r3, #8
 8001d04:	f003 030f 	and.w	r3, r3, #15
 8001d08:	4913      	ldr	r1, [pc, #76]	@ (8001d58 <HAL_Init+0x6c>)
 8001d0a:	5ccb      	ldrb	r3, [r1, r3]
 8001d0c:	f003 031f 	and.w	r3, r3, #31
 8001d10:	fa22 f303 	lsr.w	r3, r2, r3
 8001d14:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8001d16:	4b0f      	ldr	r3, [pc, #60]	@ (8001d54 <HAL_Init+0x68>)
 8001d18:	699b      	ldr	r3, [r3, #24]
 8001d1a:	f003 030f 	and.w	r3, r3, #15
 8001d1e:	4a0e      	ldr	r2, [pc, #56]	@ (8001d58 <HAL_Init+0x6c>)
 8001d20:	5cd3      	ldrb	r3, [r2, r3]
 8001d22:	f003 031f 	and.w	r3, r3, #31
 8001d26:	687a      	ldr	r2, [r7, #4]
 8001d28:	fa22 f303 	lsr.w	r3, r2, r3
 8001d2c:	4a0b      	ldr	r2, [pc, #44]	@ (8001d5c <HAL_Init+0x70>)
 8001d2e:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8001d30:	4a0b      	ldr	r2, [pc, #44]	@ (8001d60 <HAL_Init+0x74>)
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001d36:	200f      	movs	r0, #15
 8001d38:	f7ff fe86 	bl	8001a48 <HAL_InitTick>
 8001d3c:	4603      	mov	r3, r0
 8001d3e:	2b00      	cmp	r3, #0
 8001d40:	d001      	beq.n	8001d46 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8001d42:	2301      	movs	r3, #1
 8001d44:	e002      	b.n	8001d4c <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8001d46:	f7ff f9f7 	bl	8001138 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001d4a:	2300      	movs	r3, #0
}
 8001d4c:	4618      	mov	r0, r3
 8001d4e:	3708      	adds	r7, #8
 8001d50:	46bd      	mov	sp, r7
 8001d52:	bd80      	pop	{r7, pc}
 8001d54:	58024400 	.word	0x58024400
 8001d58:	0800a868 	.word	0x0800a868
 8001d5c:	24000004 	.word	0x24000004
 8001d60:	24000000 	.word	0x24000000

08001d64 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001d64:	b480      	push	{r7}
 8001d66:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001d68:	4b06      	ldr	r3, [pc, #24]	@ (8001d84 <HAL_IncTick+0x20>)
 8001d6a:	781b      	ldrb	r3, [r3, #0]
 8001d6c:	461a      	mov	r2, r3
 8001d6e:	4b06      	ldr	r3, [pc, #24]	@ (8001d88 <HAL_IncTick+0x24>)
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	4413      	add	r3, r2
 8001d74:	4a04      	ldr	r2, [pc, #16]	@ (8001d88 <HAL_IncTick+0x24>)
 8001d76:	6013      	str	r3, [r2, #0]
}
 8001d78:	bf00      	nop
 8001d7a:	46bd      	mov	sp, r7
 8001d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d80:	4770      	bx	lr
 8001d82:	bf00      	nop
 8001d84:	2400000c 	.word	0x2400000c
 8001d88:	240005c8 	.word	0x240005c8

08001d8c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001d8c:	b480      	push	{r7}
 8001d8e:	af00      	add	r7, sp, #0
  return uwTick;
 8001d90:	4b03      	ldr	r3, [pc, #12]	@ (8001da0 <HAL_GetTick+0x14>)
 8001d92:	681b      	ldr	r3, [r3, #0]
}
 8001d94:	4618      	mov	r0, r3
 8001d96:	46bd      	mov	sp, r7
 8001d98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d9c:	4770      	bx	lr
 8001d9e:	bf00      	nop
 8001da0:	240005c8 	.word	0x240005c8

08001da4 <HAL_SYSCFG_ETHInterfaceSelect>:
  *   @arg SYSCFG_ETH_MII : Select the Media Independent Interface
  *   @arg SYSCFG_ETH_RMII: Select the Reduced Media Independent Interface
  * @retval None
  */
void HAL_SYSCFG_ETHInterfaceSelect(uint32_t SYSCFG_ETHInterface)
{
 8001da4:	b480      	push	{r7}
 8001da6:	b083      	sub	sp, #12
 8001da8:	af00      	add	r7, sp, #0
 8001daa:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_SYSCFG_ETHERNET_CONFIG(SYSCFG_ETHInterface));

  MODIFY_REG(SYSCFG->PMCR, SYSCFG_PMCR_EPIS_SEL, (uint32_t)(SYSCFG_ETHInterface));
 8001dac:	4b06      	ldr	r3, [pc, #24]	@ (8001dc8 <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 8001dae:	685b      	ldr	r3, [r3, #4]
 8001db0:	f423 0260 	bic.w	r2, r3, #14680064	@ 0xe00000
 8001db4:	4904      	ldr	r1, [pc, #16]	@ (8001dc8 <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	4313      	orrs	r3, r2
 8001dba:	604b      	str	r3, [r1, #4]
}
 8001dbc:	bf00      	nop
 8001dbe:	370c      	adds	r7, #12
 8001dc0:	46bd      	mov	sp, r7
 8001dc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dc6:	4770      	bx	lr
 8001dc8:	58000400 	.word	0x58000400

08001dcc <__NVIC_SetPriorityGrouping>:
{
 8001dcc:	b480      	push	{r7}
 8001dce:	b085      	sub	sp, #20
 8001dd0:	af00      	add	r7, sp, #0
 8001dd2:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	f003 0307 	and.w	r3, r3, #7
 8001dda:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001ddc:	4b0b      	ldr	r3, [pc, #44]	@ (8001e0c <__NVIC_SetPriorityGrouping+0x40>)
 8001dde:	68db      	ldr	r3, [r3, #12]
 8001de0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001de2:	68ba      	ldr	r2, [r7, #8]
 8001de4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001de8:	4013      	ands	r3, r2
 8001dea:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001dec:	68fb      	ldr	r3, [r7, #12]
 8001dee:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001df0:	68bb      	ldr	r3, [r7, #8]
 8001df2:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001df4:	4b06      	ldr	r3, [pc, #24]	@ (8001e10 <__NVIC_SetPriorityGrouping+0x44>)
 8001df6:	4313      	orrs	r3, r2
 8001df8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001dfa:	4a04      	ldr	r2, [pc, #16]	@ (8001e0c <__NVIC_SetPriorityGrouping+0x40>)
 8001dfc:	68bb      	ldr	r3, [r7, #8]
 8001dfe:	60d3      	str	r3, [r2, #12]
}
 8001e00:	bf00      	nop
 8001e02:	3714      	adds	r7, #20
 8001e04:	46bd      	mov	sp, r7
 8001e06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e0a:	4770      	bx	lr
 8001e0c:	e000ed00 	.word	0xe000ed00
 8001e10:	05fa0000 	.word	0x05fa0000

08001e14 <__NVIC_GetPriorityGrouping>:
{
 8001e14:	b480      	push	{r7}
 8001e16:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001e18:	4b04      	ldr	r3, [pc, #16]	@ (8001e2c <__NVIC_GetPriorityGrouping+0x18>)
 8001e1a:	68db      	ldr	r3, [r3, #12]
 8001e1c:	0a1b      	lsrs	r3, r3, #8
 8001e1e:	f003 0307 	and.w	r3, r3, #7
}
 8001e22:	4618      	mov	r0, r3
 8001e24:	46bd      	mov	sp, r7
 8001e26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e2a:	4770      	bx	lr
 8001e2c:	e000ed00 	.word	0xe000ed00

08001e30 <__NVIC_EnableIRQ>:
{
 8001e30:	b480      	push	{r7}
 8001e32:	b083      	sub	sp, #12
 8001e34:	af00      	add	r7, sp, #0
 8001e36:	4603      	mov	r3, r0
 8001e38:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001e3a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001e3e:	2b00      	cmp	r3, #0
 8001e40:	db0b      	blt.n	8001e5a <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001e42:	88fb      	ldrh	r3, [r7, #6]
 8001e44:	f003 021f 	and.w	r2, r3, #31
 8001e48:	4907      	ldr	r1, [pc, #28]	@ (8001e68 <__NVIC_EnableIRQ+0x38>)
 8001e4a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001e4e:	095b      	lsrs	r3, r3, #5
 8001e50:	2001      	movs	r0, #1
 8001e52:	fa00 f202 	lsl.w	r2, r0, r2
 8001e56:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8001e5a:	bf00      	nop
 8001e5c:	370c      	adds	r7, #12
 8001e5e:	46bd      	mov	sp, r7
 8001e60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e64:	4770      	bx	lr
 8001e66:	bf00      	nop
 8001e68:	e000e100 	.word	0xe000e100

08001e6c <__NVIC_SetPriority>:
{
 8001e6c:	b480      	push	{r7}
 8001e6e:	b083      	sub	sp, #12
 8001e70:	af00      	add	r7, sp, #0
 8001e72:	4603      	mov	r3, r0
 8001e74:	6039      	str	r1, [r7, #0]
 8001e76:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001e78:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001e7c:	2b00      	cmp	r3, #0
 8001e7e:	db0a      	blt.n	8001e96 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001e80:	683b      	ldr	r3, [r7, #0]
 8001e82:	b2da      	uxtb	r2, r3
 8001e84:	490c      	ldr	r1, [pc, #48]	@ (8001eb8 <__NVIC_SetPriority+0x4c>)
 8001e86:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001e8a:	0112      	lsls	r2, r2, #4
 8001e8c:	b2d2      	uxtb	r2, r2
 8001e8e:	440b      	add	r3, r1
 8001e90:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8001e94:	e00a      	b.n	8001eac <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001e96:	683b      	ldr	r3, [r7, #0]
 8001e98:	b2da      	uxtb	r2, r3
 8001e9a:	4908      	ldr	r1, [pc, #32]	@ (8001ebc <__NVIC_SetPriority+0x50>)
 8001e9c:	88fb      	ldrh	r3, [r7, #6]
 8001e9e:	f003 030f 	and.w	r3, r3, #15
 8001ea2:	3b04      	subs	r3, #4
 8001ea4:	0112      	lsls	r2, r2, #4
 8001ea6:	b2d2      	uxtb	r2, r2
 8001ea8:	440b      	add	r3, r1
 8001eaa:	761a      	strb	r2, [r3, #24]
}
 8001eac:	bf00      	nop
 8001eae:	370c      	adds	r7, #12
 8001eb0:	46bd      	mov	sp, r7
 8001eb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eb6:	4770      	bx	lr
 8001eb8:	e000e100 	.word	0xe000e100
 8001ebc:	e000ed00 	.word	0xe000ed00

08001ec0 <NVIC_EncodePriority>:
{
 8001ec0:	b480      	push	{r7}
 8001ec2:	b089      	sub	sp, #36	@ 0x24
 8001ec4:	af00      	add	r7, sp, #0
 8001ec6:	60f8      	str	r0, [r7, #12]
 8001ec8:	60b9      	str	r1, [r7, #8]
 8001eca:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001ecc:	68fb      	ldr	r3, [r7, #12]
 8001ece:	f003 0307 	and.w	r3, r3, #7
 8001ed2:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001ed4:	69fb      	ldr	r3, [r7, #28]
 8001ed6:	f1c3 0307 	rsb	r3, r3, #7
 8001eda:	2b04      	cmp	r3, #4
 8001edc:	bf28      	it	cs
 8001ede:	2304      	movcs	r3, #4
 8001ee0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001ee2:	69fb      	ldr	r3, [r7, #28]
 8001ee4:	3304      	adds	r3, #4
 8001ee6:	2b06      	cmp	r3, #6
 8001ee8:	d902      	bls.n	8001ef0 <NVIC_EncodePriority+0x30>
 8001eea:	69fb      	ldr	r3, [r7, #28]
 8001eec:	3b03      	subs	r3, #3
 8001eee:	e000      	b.n	8001ef2 <NVIC_EncodePriority+0x32>
 8001ef0:	2300      	movs	r3, #0
 8001ef2:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001ef4:	f04f 32ff 	mov.w	r2, #4294967295
 8001ef8:	69bb      	ldr	r3, [r7, #24]
 8001efa:	fa02 f303 	lsl.w	r3, r2, r3
 8001efe:	43da      	mvns	r2, r3
 8001f00:	68bb      	ldr	r3, [r7, #8]
 8001f02:	401a      	ands	r2, r3
 8001f04:	697b      	ldr	r3, [r7, #20]
 8001f06:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001f08:	f04f 31ff 	mov.w	r1, #4294967295
 8001f0c:	697b      	ldr	r3, [r7, #20]
 8001f0e:	fa01 f303 	lsl.w	r3, r1, r3
 8001f12:	43d9      	mvns	r1, r3
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001f18:	4313      	orrs	r3, r2
}
 8001f1a:	4618      	mov	r0, r3
 8001f1c:	3724      	adds	r7, #36	@ 0x24
 8001f1e:	46bd      	mov	sp, r7
 8001f20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f24:	4770      	bx	lr

08001f26 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001f26:	b580      	push	{r7, lr}
 8001f28:	b082      	sub	sp, #8
 8001f2a:	af00      	add	r7, sp, #0
 8001f2c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001f2e:	6878      	ldr	r0, [r7, #4]
 8001f30:	f7ff ff4c 	bl	8001dcc <__NVIC_SetPriorityGrouping>
}
 8001f34:	bf00      	nop
 8001f36:	3708      	adds	r7, #8
 8001f38:	46bd      	mov	sp, r7
 8001f3a:	bd80      	pop	{r7, pc}

08001f3c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001f3c:	b580      	push	{r7, lr}
 8001f3e:	b086      	sub	sp, #24
 8001f40:	af00      	add	r7, sp, #0
 8001f42:	4603      	mov	r3, r0
 8001f44:	60b9      	str	r1, [r7, #8]
 8001f46:	607a      	str	r2, [r7, #4]
 8001f48:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001f4a:	f7ff ff63 	bl	8001e14 <__NVIC_GetPriorityGrouping>
 8001f4e:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001f50:	687a      	ldr	r2, [r7, #4]
 8001f52:	68b9      	ldr	r1, [r7, #8]
 8001f54:	6978      	ldr	r0, [r7, #20]
 8001f56:	f7ff ffb3 	bl	8001ec0 <NVIC_EncodePriority>
 8001f5a:	4602      	mov	r2, r0
 8001f5c:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001f60:	4611      	mov	r1, r2
 8001f62:	4618      	mov	r0, r3
 8001f64:	f7ff ff82 	bl	8001e6c <__NVIC_SetPriority>
}
 8001f68:	bf00      	nop
 8001f6a:	3718      	adds	r7, #24
 8001f6c:	46bd      	mov	sp, r7
 8001f6e:	bd80      	pop	{r7, pc}

08001f70 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001f70:	b580      	push	{r7, lr}
 8001f72:	b082      	sub	sp, #8
 8001f74:	af00      	add	r7, sp, #0
 8001f76:	4603      	mov	r3, r0
 8001f78:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001f7a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001f7e:	4618      	mov	r0, r3
 8001f80:	f7ff ff56 	bl	8001e30 <__NVIC_EnableIRQ>
}
 8001f84:	bf00      	nop
 8001f86:	3708      	adds	r7, #8
 8001f88:	46bd      	mov	sp, r7
 8001f8a:	bd80      	pop	{r7, pc}

08001f8c <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 8001f8c:	b480      	push	{r7}
 8001f8e:	af00      	add	r7, sp, #0
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 8001f90:	f3bf 8f5f 	dmb	sy
}
 8001f94:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 8001f96:	4b07      	ldr	r3, [pc, #28]	@ (8001fb4 <HAL_MPU_Disable+0x28>)
 8001f98:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001f9a:	4a06      	ldr	r2, [pc, #24]	@ (8001fb4 <HAL_MPU_Disable+0x28>)
 8001f9c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001fa0:	6253      	str	r3, [r2, #36]	@ 0x24

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 8001fa2:	4b05      	ldr	r3, [pc, #20]	@ (8001fb8 <HAL_MPU_Disable+0x2c>)
 8001fa4:	2200      	movs	r2, #0
 8001fa6:	605a      	str	r2, [r3, #4]
}
 8001fa8:	bf00      	nop
 8001faa:	46bd      	mov	sp, r7
 8001fac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fb0:	4770      	bx	lr
 8001fb2:	bf00      	nop
 8001fb4:	e000ed00 	.word	0xe000ed00
 8001fb8:	e000ed90 	.word	0xe000ed90

08001fbc <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 8001fbc:	b480      	push	{r7}
 8001fbe:	b083      	sub	sp, #12
 8001fc0:	af00      	add	r7, sp, #0
 8001fc2:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 8001fc4:	4a0b      	ldr	r2, [pc, #44]	@ (8001ff4 <HAL_MPU_Enable+0x38>)
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	f043 0301 	orr.w	r3, r3, #1
 8001fcc:	6053      	str	r3, [r2, #4]

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 8001fce:	4b0a      	ldr	r3, [pc, #40]	@ (8001ff8 <HAL_MPU_Enable+0x3c>)
 8001fd0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001fd2:	4a09      	ldr	r2, [pc, #36]	@ (8001ff8 <HAL_MPU_Enable+0x3c>)
 8001fd4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001fd8:	6253      	str	r3, [r2, #36]	@ 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 8001fda:	f3bf 8f4f 	dsb	sy
}
 8001fde:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001fe0:	f3bf 8f6f 	isb	sy
}
 8001fe4:	bf00      	nop

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 8001fe6:	bf00      	nop
 8001fe8:	370c      	adds	r7, #12
 8001fea:	46bd      	mov	sp, r7
 8001fec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ff0:	4770      	bx	lr
 8001ff2:	bf00      	nop
 8001ff4:	e000ed90 	.word	0xe000ed90
 8001ff8:	e000ed00 	.word	0xe000ed00

08001ffc <HAL_MPU_ConfigRegion>:
  * @param MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(MPU_Region_InitTypeDef *MPU_Init)
{
 8001ffc:	b480      	push	{r7}
 8001ffe:	b083      	sub	sp, #12
 8002000:	af00      	add	r7, sp, #0
 8002002:	6078      	str	r0, [r7, #4]
  assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
  assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
  assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	785a      	ldrb	r2, [r3, #1]
 8002008:	4b1b      	ldr	r3, [pc, #108]	@ (8002078 <HAL_MPU_ConfigRegion+0x7c>)
 800200a:	609a      	str	r2, [r3, #8]

  /* Disable the Region */
  CLEAR_BIT(MPU->RASR, MPU_RASR_ENABLE_Msk);
 800200c:	4b1a      	ldr	r3, [pc, #104]	@ (8002078 <HAL_MPU_ConfigRegion+0x7c>)
 800200e:	691b      	ldr	r3, [r3, #16]
 8002010:	4a19      	ldr	r2, [pc, #100]	@ (8002078 <HAL_MPU_ConfigRegion+0x7c>)
 8002012:	f023 0301 	bic.w	r3, r3, #1
 8002016:	6113      	str	r3, [r2, #16]

  /* Apply configuration */
  MPU->RBAR = MPU_Init->BaseAddress;
 8002018:	4a17      	ldr	r2, [pc, #92]	@ (8002078 <HAL_MPU_ConfigRegion+0x7c>)
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	685b      	ldr	r3, [r3, #4]
 800201e:	60d3      	str	r3, [r2, #12]
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	7b1b      	ldrb	r3, [r3, #12]
 8002024:	071a      	lsls	r2, r3, #28
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	7adb      	ldrb	r3, [r3, #11]
 800202a:	061b      	lsls	r3, r3, #24
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 800202c:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	7a9b      	ldrb	r3, [r3, #10]
 8002032:	04db      	lsls	r3, r3, #19
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8002034:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	7b5b      	ldrb	r3, [r3, #13]
 800203a:	049b      	lsls	r3, r3, #18
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 800203c:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	7b9b      	ldrb	r3, [r3, #14]
 8002042:	045b      	lsls	r3, r3, #17
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8002044:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	7bdb      	ldrb	r3, [r3, #15]
 800204a:	041b      	lsls	r3, r3, #16
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 800204c:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	7a5b      	ldrb	r3, [r3, #9]
 8002052:	021b      	lsls	r3, r3, #8
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8002054:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	7a1b      	ldrb	r3, [r3, #8]
 800205a:	005b      	lsls	r3, r3, #1
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 800205c:	4313      	orrs	r3, r2
              ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 800205e:	687a      	ldr	r2, [r7, #4]
 8002060:	7812      	ldrb	r2, [r2, #0]
 8002062:	4611      	mov	r1, r2
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8002064:	4a04      	ldr	r2, [pc, #16]	@ (8002078 <HAL_MPU_ConfigRegion+0x7c>)
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8002066:	430b      	orrs	r3, r1
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8002068:	6113      	str	r3, [r2, #16]
}
 800206a:	bf00      	nop
 800206c:	370c      	adds	r7, #12
 800206e:	46bd      	mov	sp, r7
 8002070:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002074:	4770      	bx	lr
 8002076:	bf00      	nop
 8002078:	e000ed90 	.word	0xe000ed90

0800207c <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 800207c:	b580      	push	{r7, lr}
 800207e:	b084      	sub	sp, #16
 8002080:	af00      	add	r7, sp, #0
 8002082:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	2b00      	cmp	r3, #0
 8002088:	d101      	bne.n	800208e <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 800208a:	2301      	movs	r3, #1
 800208c:	e0e3      	b.n	8002256 <HAL_ETH_Init+0x1da>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002094:	2b00      	cmp	r3, #0
 8002096:	d106      	bne.n	80020a6 <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	2223      	movs	r2, #35	@ 0x23
 800209c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 80020a0:	6878      	ldr	r0, [r7, #4]
 80020a2:	f7ff f867 	bl	8001174 <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80020a6:	4b6e      	ldr	r3, [pc, #440]	@ (8002260 <HAL_ETH_Init+0x1e4>)
 80020a8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80020ac:	4a6c      	ldr	r2, [pc, #432]	@ (8002260 <HAL_ETH_Init+0x1e4>)
 80020ae:	f043 0302 	orr.w	r3, r3, #2
 80020b2:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 80020b6:	4b6a      	ldr	r3, [pc, #424]	@ (8002260 <HAL_ETH_Init+0x1e4>)
 80020b8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80020bc:	f003 0302 	and.w	r3, r3, #2
 80020c0:	60bb      	str	r3, [r7, #8]
 80020c2:	68bb      	ldr	r3, [r7, #8]

  if (heth->Init.MediaInterface == HAL_ETH_MII_MODE)
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	7a1b      	ldrb	r3, [r3, #8]
 80020c8:	2b00      	cmp	r3, #0
 80020ca:	d103      	bne.n	80020d4 <HAL_ETH_Init+0x58>
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_MII);
 80020cc:	2000      	movs	r0, #0
 80020ce:	f7ff fe69 	bl	8001da4 <HAL_SYSCFG_ETHInterfaceSelect>
 80020d2:	e003      	b.n	80020dc <HAL_ETH_Init+0x60>
  }
  else
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_RMII);
 80020d4:	f44f 0000 	mov.w	r0, #8388608	@ 0x800000
 80020d8:	f7ff fe64 	bl	8001da4 <HAL_SYSCFG_ETHInterfaceSelect>
  }

  /* Dummy read to sync with ETH */
  (void)SYSCFG->PMCR;
 80020dc:	4b61      	ldr	r3, [pc, #388]	@ (8002264 <HAL_ETH_Init+0x1e8>)
 80020de:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR);
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	687a      	ldr	r2, [r7, #4]
 80020ec:	6812      	ldr	r2, [r2, #0]
 80020ee:	f043 0301 	orr.w	r3, r3, #1
 80020f2:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80020f6:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80020f8:	f7ff fe48 	bl	8001d8c <HAL_GetTick>
 80020fc:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 80020fe:	e011      	b.n	8002124 <HAL_ETH_Init+0xa8>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 8002100:	f7ff fe44 	bl	8001d8c <HAL_GetTick>
 8002104:	4602      	mov	r2, r0
 8002106:	68fb      	ldr	r3, [r7, #12]
 8002108:	1ad3      	subs	r3, r2, r3
 800210a:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 800210e:	d909      	bls.n	8002124 <HAL_ETH_Init+0xa8>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	2204      	movs	r2, #4
 8002114:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	22e0      	movs	r2, #224	@ 0xe0
 800211c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      /* Return Error */
      return HAL_ERROR;
 8002120:	2301      	movs	r3, #1
 8002122:	e098      	b.n	8002256 <HAL_ETH_Init+0x1da>
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	f003 0301 	and.w	r3, r3, #1
 8002132:	2b00      	cmp	r3, #0
 8002134:	d1e4      	bne.n	8002100 <HAL_ETH_Init+0x84>
    }
  }

  /*------------------ MDIO CSR Clock Range Configuration --------------------*/
  HAL_ETH_SetMDIOClockRange(heth);
 8002136:	6878      	ldr	r0, [r7, #4]
 8002138:	f000 f9ce 	bl	80024d8 <HAL_ETH_SetMDIOClockRange>

  /*------------------ MAC LPI 1US Tic Counter Configuration --------------------*/
  WRITE_REG(heth->Instance->MAC1USTCR, (((uint32_t)HAL_RCC_GetHCLKFreq() / ETH_MAC_US_TICK) - 1U));
 800213c:	f001 ff5c 	bl	8003ff8 <HAL_RCC_GetHCLKFreq>
 8002140:	4603      	mov	r3, r0
 8002142:	4a49      	ldr	r2, [pc, #292]	@ (8002268 <HAL_ETH_Init+0x1ec>)
 8002144:	fba2 2303 	umull	r2, r3, r2, r3
 8002148:	0c9a      	lsrs	r2, r3, #18
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	3a01      	subs	r2, #1
 8002150:	f8c3 20dc 	str.w	r2, [r3, #220]	@ 0xdc

  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 8002154:	6878      	ldr	r0, [r7, #4]
 8002156:	f000 fbb1 	bl	80028bc <ETH_MACDMAConfig>

  /* SET DSL to 64 bit */
  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_DSL, ETH_DMACCR_DSL_64BIT);
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002162:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
 8002166:	f423 13e0 	bic.w	r3, r3, #1835008	@ 0x1c0000
 800216a:	687a      	ldr	r2, [r7, #4]
 800216c:	6812      	ldr	r2, [r2, #0]
 800216e:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8002172:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8002176:	f8c2 3100 	str.w	r3, [r2, #256]	@ 0x100

  /* Set Receive Buffers Length (must be a multiple of 4) */
  if ((heth->Init.RxBuffLen % 0x4U) != 0x0U)
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	695b      	ldr	r3, [r3, #20]
 800217e:	f003 0303 	and.w	r3, r3, #3
 8002182:	2b00      	cmp	r3, #0
 8002184:	d009      	beq.n	800219a <HAL_ETH_Init+0x11e>
  {
    /* Set Error Code */
    heth->ErrorCode = HAL_ETH_ERROR_PARAM;
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	2201      	movs	r2, #1
 800218a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
    /* Set State as Error */
    heth->gState = HAL_ETH_STATE_ERROR;
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	22e0      	movs	r2, #224	@ 0xe0
 8002192:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    /* Return Error */
    return HAL_ERROR;
 8002196:	2301      	movs	r3, #1
 8002198:	e05d      	b.n	8002256 <HAL_ETH_Init+0x1da>
  }
  else
  {
    MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_RBSZ, ((heth->Init.RxBuffLen) << 1));
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80021a2:	f8d3 2108 	ldr.w	r2, [r3, #264]	@ 0x108
 80021a6:	4b31      	ldr	r3, [pc, #196]	@ (800226c <HAL_ETH_Init+0x1f0>)
 80021a8:	4013      	ands	r3, r2
 80021aa:	687a      	ldr	r2, [r7, #4]
 80021ac:	6952      	ldr	r2, [r2, #20]
 80021ae:	0051      	lsls	r1, r2, #1
 80021b0:	687a      	ldr	r2, [r7, #4]
 80021b2:	6812      	ldr	r2, [r2, #0]
 80021b4:	430b      	orrs	r3, r1
 80021b6:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80021ba:	f8c2 3108 	str.w	r3, [r2, #264]	@ 0x108
  }

  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 80021be:	6878      	ldr	r0, [r7, #4]
 80021c0:	f000 fc19 	bl	80029f6 <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 80021c4:	6878      	ldr	r0, [r7, #4]
 80021c6:	f000 fc5f 	bl	8002a88 <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  /* Set MAC addr bits 32 to 47 */
  heth->Instance->MACA0HR = (((uint32_t)(heth->Init.MACAddr[5]) << 8) | (uint32_t)heth->Init.MACAddr[4]);
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	685b      	ldr	r3, [r3, #4]
 80021ce:	3305      	adds	r3, #5
 80021d0:	781b      	ldrb	r3, [r3, #0]
 80021d2:	021a      	lsls	r2, r3, #8
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	685b      	ldr	r3, [r3, #4]
 80021d8:	3304      	adds	r3, #4
 80021da:	781b      	ldrb	r3, [r3, #0]
 80021dc:	4619      	mov	r1, r3
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	430a      	orrs	r2, r1
 80021e4:	f8c3 2300 	str.w	r2, [r3, #768]	@ 0x300
  /* Set MAC addr bits 0 to 31 */
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	685b      	ldr	r3, [r3, #4]
 80021ec:	3303      	adds	r3, #3
 80021ee:	781b      	ldrb	r3, [r3, #0]
 80021f0:	061a      	lsls	r2, r3, #24
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	685b      	ldr	r3, [r3, #4]
 80021f6:	3302      	adds	r3, #2
 80021f8:	781b      	ldrb	r3, [r3, #0]
 80021fa:	041b      	lsls	r3, r3, #16
 80021fc:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	685b      	ldr	r3, [r3, #4]
 8002202:	3301      	adds	r3, #1
 8002204:	781b      	ldrb	r3, [r3, #0]
 8002206:	021b      	lsls	r3, r3, #8
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8002208:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	685b      	ldr	r3, [r3, #4]
 800220e:	781b      	ldrb	r3, [r3, #0]
 8002210:	4619      	mov	r1, r3
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	681b      	ldr	r3, [r3, #0]
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 8002216:	430a      	orrs	r2, r1
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8002218:	f8c3 2304 	str.w	r2, [r3, #772]	@ 0x304

  /* Disable Rx MMC Interrupts */
  SET_BIT(heth->Instance->MMCRIMR, ETH_MMCRIMR_RXLPITRCIM | ETH_MMCRIMR_RXLPIUSCIM | \
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	f8d3 170c 	ldr.w	r1, [r3, #1804]	@ 0x70c
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	681a      	ldr	r2, [r3, #0]
 8002228:	4b11      	ldr	r3, [pc, #68]	@ (8002270 <HAL_ETH_Init+0x1f4>)
 800222a:	430b      	orrs	r3, r1
 800222c:	f8c2 370c 	str.w	r3, [r2, #1804]	@ 0x70c
          ETH_MMCRIMR_RXUCGPIM | ETH_MMCRIMR_RXALGNERPIM | ETH_MMCRIMR_RXCRCERPIM);

  /* Disable Tx MMC Interrupts */
  SET_BIT(heth->Instance->MMCTIMR, ETH_MMCTIMR_TXLPITRCIM | ETH_MMCTIMR_TXLPIUSCIM | \
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	f8d3 1710 	ldr.w	r1, [r3, #1808]	@ 0x710
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	681a      	ldr	r2, [r3, #0]
 800223c:	4b0d      	ldr	r3, [pc, #52]	@ (8002274 <HAL_ETH_Init+0x1f8>)
 800223e:	430b      	orrs	r3, r1
 8002240:	f8c2 3710 	str.w	r3, [r2, #1808]	@ 0x710
          ETH_MMCTIMR_TXGPKTIM | ETH_MMCTIMR_TXMCOLGPIM | ETH_MMCTIMR_TXSCOLGPIM);

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	2200      	movs	r2, #0
 8002248:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  heth->gState = HAL_ETH_STATE_READY;
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	2210      	movs	r2, #16
 8002250:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8002254:	2300      	movs	r3, #0
}
 8002256:	4618      	mov	r0, r3
 8002258:	3710      	adds	r7, #16
 800225a:	46bd      	mov	sp, r7
 800225c:	bd80      	pop	{r7, pc}
 800225e:	bf00      	nop
 8002260:	58024400 	.word	0x58024400
 8002264:	58000400 	.word	0x58000400
 8002268:	431bde83 	.word	0x431bde83
 800226c:	ffff8001 	.word	0xffff8001
 8002270:	0c020060 	.word	0x0c020060
 8002274:	0c20c000 	.word	0x0c20c000

08002278 <HAL_ETH_IRQHandler>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
void HAL_ETH_IRQHandler(ETH_HandleTypeDef *heth)
{
 8002278:	b580      	push	{r7, lr}
 800227a:	b086      	sub	sp, #24
 800227c:	af00      	add	r7, sp, #0
 800227e:	6078      	str	r0, [r7, #4]
  uint32_t mac_flag = READ_REG(heth->Instance->MACISR);
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8002288:	617b      	str	r3, [r7, #20]
  uint32_t dma_flag = READ_REG(heth->Instance->DMACSR);
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002292:	f8d3 3160 	ldr.w	r3, [r3, #352]	@ 0x160
 8002296:	613b      	str	r3, [r7, #16]
  uint32_t dma_itsource = READ_REG(heth->Instance->DMACIER);
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80022a0:	f8d3 3134 	ldr.w	r3, [r3, #308]	@ 0x134
 80022a4:	60fb      	str	r3, [r7, #12]
  uint32_t exti_d1_flag = READ_REG(EXTI_D1->PR3);
 80022a6:	4b6d      	ldr	r3, [pc, #436]	@ (800245c <HAL_ETH_IRQHandler+0x1e4>)
 80022a8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80022aa:	60bb      	str	r3, [r7, #8]
#if defined(DUAL_CORE)
  uint32_t exti_d2_flag = READ_REG(EXTI_D2->PR3);
#endif /* DUAL_CORE */

  /* Packet received */
  if (((dma_flag & ETH_DMACSR_RI) != 0U) && ((dma_itsource & ETH_DMACIER_RIE) != 0U))
 80022ac:	693b      	ldr	r3, [r7, #16]
 80022ae:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80022b2:	2b00      	cmp	r3, #0
 80022b4:	d010      	beq.n	80022d8 <HAL_ETH_IRQHandler+0x60>
 80022b6:	68fb      	ldr	r3, [r7, #12]
 80022b8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80022bc:	2b00      	cmp	r3, #0
 80022be:	d00b      	beq.n	80022d8 <HAL_ETH_IRQHandler+0x60>
  {
    /* Clear the Eth DMA Rx IT pending bits */
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMACSR_RI | ETH_DMACSR_NIS);
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80022c8:	461a      	mov	r2, r3
 80022ca:	f248 0340 	movw	r3, #32832	@ 0x8040
 80022ce:	f8c2 3160 	str.w	r3, [r2, #352]	@ 0x160
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /*Call registered Receive complete callback*/
    heth->RxCpltCallback(heth);
#else
    /* Receive complete callback */
    HAL_ETH_RxCpltCallback(heth);
 80022d2:	6878      	ldr	r0, [r7, #4]
 80022d4:	f000 f8ce 	bl	8002474 <HAL_ETH_RxCpltCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }

  /* Packet transmitted */
  if (((dma_flag & ETH_DMACSR_TI) != 0U) && ((dma_itsource & ETH_DMACIER_TIE) != 0U))
 80022d8:	693b      	ldr	r3, [r7, #16]
 80022da:	f003 0301 	and.w	r3, r3, #1
 80022de:	2b00      	cmp	r3, #0
 80022e0:	d010      	beq.n	8002304 <HAL_ETH_IRQHandler+0x8c>
 80022e2:	68fb      	ldr	r3, [r7, #12]
 80022e4:	f003 0301 	and.w	r3, r3, #1
 80022e8:	2b00      	cmp	r3, #0
 80022ea:	d00b      	beq.n	8002304 <HAL_ETH_IRQHandler+0x8c>
  {
    /* Clear the Eth DMA Tx IT pending bits */
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMACSR_TI | ETH_DMACSR_NIS);
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80022f4:	461a      	mov	r2, r3
 80022f6:	f248 0301 	movw	r3, #32769	@ 0x8001
 80022fa:	f8c2 3160 	str.w	r3, [r2, #352]	@ 0x160
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /*Call registered Transmit complete callback*/
    heth->TxCpltCallback(heth);
#else
    /* Transfer complete callback */
    HAL_ETH_TxCpltCallback(heth);
 80022fe:	6878      	ldr	r0, [r7, #4]
 8002300:	f000 f8ae 	bl	8002460 <HAL_ETH_TxCpltCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }

  /* ETH DMA Error */
  if (((dma_flag & ETH_DMACSR_AIS) != 0U) && ((dma_itsource & ETH_DMACIER_AIE) != 0U))
 8002304:	693b      	ldr	r3, [r7, #16]
 8002306:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800230a:	2b00      	cmp	r3, #0
 800230c:	d047      	beq.n	800239e <HAL_ETH_IRQHandler+0x126>
 800230e:	68fb      	ldr	r3, [r7, #12]
 8002310:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002314:	2b00      	cmp	r3, #0
 8002316:	d042      	beq.n	800239e <HAL_ETH_IRQHandler+0x126>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_DMA;
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800231e:	f043 0208 	orr.w	r2, r3, #8
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
    /* if fatal bus error occurred */
    if ((dma_flag & ETH_DMACSR_FBE) != 0U)
 8002328:	693b      	ldr	r3, [r7, #16]
 800232a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800232e:	2b00      	cmp	r3, #0
 8002330:	d01e      	beq.n	8002370 <HAL_ETH_IRQHandler+0xf8>
    {
      /* Get DMA error code  */
      heth->DMAErrorCode = READ_BIT(heth->Instance->DMACSR, (ETH_DMACSR_FBE | ETH_DMACSR_TPS | ETH_DMACSR_RPS));
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800233a:	f8d3 2160 	ldr.w	r2, [r3, #352]	@ 0x160
 800233e:	f241 1302 	movw	r3, #4354	@ 0x1102
 8002342:	4013      	ands	r3, r2
 8002344:	687a      	ldr	r2, [r7, #4]
 8002346:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c

      /* Disable all interrupts */
      __HAL_ETH_DMA_DISABLE_IT(heth, ETH_DMACIER_NIE | ETH_DMACIER_AIE);
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002352:	f8d3 3134 	ldr.w	r3, [r3, #308]	@ 0x134
 8002356:	687a      	ldr	r2, [r7, #4]
 8002358:	6812      	ldr	r2, [r2, #0]
 800235a:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 800235e:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8002362:	f8c2 3134 	str.w	r3, [r2, #308]	@ 0x134

      /* Set HAL state to ERROR */
      heth->gState = HAL_ETH_STATE_ERROR;
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	22e0      	movs	r2, #224	@ 0xe0
 800236a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
 800236e:	e013      	b.n	8002398 <HAL_ETH_IRQHandler+0x120>
    }
    else
    {
      /* Get DMA error status  */
      heth->DMAErrorCode = READ_BIT(heth->Instance->DMACSR, (ETH_DMACSR_CDE | ETH_DMACSR_ETI | ETH_DMACSR_RWT |
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002378:	f8d3 3160 	ldr.w	r3, [r3, #352]	@ 0x160
 800237c:	f403 42cd 	and.w	r2, r3, #26240	@ 0x6680
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
                                                             ETH_DMACSR_RBU | ETH_DMACSR_AIS));

      /* Clear the interrupt summary flag */
      __HAL_ETH_DMA_CLEAR_IT(heth, (ETH_DMACSR_CDE | ETH_DMACSR_ETI | ETH_DMACSR_RWT |
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800238e:	461a      	mov	r2, r3
 8002390:	f44f 43cd 	mov.w	r3, #26240	@ 0x6680
 8002394:	f8c2 3160 	str.w	r3, [r2, #352]	@ 0x160
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered Error callback*/
    heth->ErrorCallback(heth);
#else
    /* Ethernet DMA Error callback */
    HAL_ETH_ErrorCallback(heth);
 8002398:	6878      	ldr	r0, [r7, #4]
 800239a:	f000 f875 	bl	8002488 <HAL_ETH_ErrorCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }

  /* ETH MAC Error IT */
  if (((mac_flag & ETH_MACIER_RXSTSIE) == ETH_MACIER_RXSTSIE) || \
 800239e:	697b      	ldr	r3, [r7, #20]
 80023a0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80023a4:	2b00      	cmp	r3, #0
 80023a6:	d104      	bne.n	80023b2 <HAL_ETH_IRQHandler+0x13a>
      ((mac_flag & ETH_MACIER_TXSTSIE) == ETH_MACIER_TXSTSIE))
 80023a8:	697b      	ldr	r3, [r7, #20]
 80023aa:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((mac_flag & ETH_MACIER_RXSTSIE) == ETH_MACIER_RXSTSIE) || \
 80023ae:	2b00      	cmp	r3, #0
 80023b0:	d019      	beq.n	80023e6 <HAL_ETH_IRQHandler+0x16e>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_MAC;
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80023b8:	f043 0210 	orr.w	r2, r3, #16
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Get MAC Rx Tx status and clear Status register pending bit */
    heth->MACErrorCode = READ_REG(heth->Instance->MACRXTXSR);
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	f8d3 20b8 	ldr.w	r2, [r3, #184]	@ 0xb8
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

    heth->gState = HAL_ETH_STATE_ERROR;
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	22e0      	movs	r2, #224	@ 0xe0
 80023d4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered Error callback*/
    heth->ErrorCallback(heth);
#else
    /* Ethernet Error callback */
    HAL_ETH_ErrorCallback(heth);
 80023d8:	6878      	ldr	r0, [r7, #4]
 80023da:	f000 f855 	bl	8002488 <HAL_ETH_ErrorCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
    heth->MACErrorCode = (uint32_t)(0x0U);
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	2200      	movs	r2, #0
 80023e2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  }

  /* ETH PMT IT */
  if ((mac_flag & ETH_MAC_PMT_IT) != 0U)
 80023e6:	697b      	ldr	r3, [r7, #20]
 80023e8:	f003 0310 	and.w	r3, r3, #16
 80023ec:	2b00      	cmp	r3, #0
 80023ee:	d00f      	beq.n	8002410 <HAL_ETH_IRQHandler+0x198>
  {
    /* Get MAC Wake-up source and clear the status register pending bit */
    heth->MACWakeUpEvent = READ_BIT(heth->Instance->MACPCSR, (ETH_MACPCSR_RWKPRCVD | ETH_MACPCSR_MGKPRCVD));
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 80023f8:	f003 0260 	and.w	r2, r3, #96	@ 0x60
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered PMT callback*/
    heth->PMTCallback(heth);
#else
    /* Ethernet PMT callback */
    HAL_ETH_PMTCallback(heth);
 8002402:	6878      	ldr	r0, [r7, #4]
 8002404:	f000 f84a 	bl	800249c <HAL_ETH_PMTCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */

    heth->MACWakeUpEvent = (uint32_t)(0x0U);
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	2200      	movs	r2, #0
 800240c:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
  }

  /* ETH EEE IT */
  if ((mac_flag & ETH_MAC_LPI_IT) != 0U)
 8002410:	697b      	ldr	r3, [r7, #20]
 8002412:	f003 0320 	and.w	r3, r3, #32
 8002416:	2b00      	cmp	r3, #0
 8002418:	d00f      	beq.n	800243a <HAL_ETH_IRQHandler+0x1c2>
  {
    /* Get MAC LPI interrupt source and clear the status register pending bit */
    heth->MACLPIEvent = READ_BIT(heth->Instance->MACLCSR, 0x0000000FU);
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	f8d3 30d0 	ldr.w	r3, [r3, #208]	@ 0xd0
 8002422:	f003 020f 	and.w	r2, r3, #15
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered EEE callback*/
    heth->EEECallback(heth);
#else
    /* Ethernet EEE callback */
    HAL_ETH_EEECallback(heth);
 800242c:	6878      	ldr	r0, [r7, #4]
 800242e:	f000 f83f 	bl	80024b0 <HAL_ETH_EEECallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */

    heth->MACLPIEvent = (uint32_t)(0x0U);
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	2200      	movs	r2, #0
 8002436:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */
    }
  }
#else /* DUAL_CORE not defined */
  /* check ETH WAKEUP exti flag */
  if ((exti_d1_flag & ETH_WAKEUP_EXTI_LINE) != 0U)
 800243a:	68bb      	ldr	r3, [r7, #8]
 800243c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002440:	2b00      	cmp	r3, #0
 8002442:	d006      	beq.n	8002452 <HAL_ETH_IRQHandler+0x1da>
  {
    /* Clear ETH WAKEUP Exti pending bit */
    __HAL_ETH_WAKEUP_EXTI_CLEAR_FLAG(ETH_WAKEUP_EXTI_LINE);
 8002444:	4b05      	ldr	r3, [pc, #20]	@ (800245c <HAL_ETH_IRQHandler+0x1e4>)
 8002446:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 800244a:	629a      	str	r2, [r3, #40]	@ 0x28
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered WakeUp callback*/
    heth->WakeUpCallback(heth);
#else
    /* ETH WAKEUP callback */
    HAL_ETH_WakeUpCallback(heth);
 800244c:	6878      	ldr	r0, [r7, #4]
 800244e:	f000 f839 	bl	80024c4 <HAL_ETH_WakeUpCallback>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }
#endif /* DUAL_CORE */
}
 8002452:	bf00      	nop
 8002454:	3718      	adds	r7, #24
 8002456:	46bd      	mov	sp, r7
 8002458:	bd80      	pop	{r7, pc}
 800245a:	bf00      	nop
 800245c:	58000080 	.word	0x58000080

08002460 <HAL_ETH_TxCpltCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_TxCpltCallback(ETH_HandleTypeDef *heth)
{
 8002460:	b480      	push	{r7}
 8002462:	b083      	sub	sp, #12
 8002464:	af00      	add	r7, sp, #0
 8002466:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_TxCpltCallback could be implemented in the user file
  */
}
 8002468:	bf00      	nop
 800246a:	370c      	adds	r7, #12
 800246c:	46bd      	mov	sp, r7
 800246e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002472:	4770      	bx	lr

08002474 <HAL_ETH_RxCpltCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_RxCpltCallback(ETH_HandleTypeDef *heth)
{
 8002474:	b480      	push	{r7}
 8002476:	b083      	sub	sp, #12
 8002478:	af00      	add	r7, sp, #0
 800247a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_RxCpltCallback could be implemented in the user file
  */
}
 800247c:	bf00      	nop
 800247e:	370c      	adds	r7, #12
 8002480:	46bd      	mov	sp, r7
 8002482:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002486:	4770      	bx	lr

08002488 <HAL_ETH_ErrorCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_ErrorCallback(ETH_HandleTypeDef *heth)
{
 8002488:	b480      	push	{r7}
 800248a:	b083      	sub	sp, #12
 800248c:	af00      	add	r7, sp, #0
 800248e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_ErrorCallback could be implemented in the user file
  */
}
 8002490:	bf00      	nop
 8002492:	370c      	adds	r7, #12
 8002494:	46bd      	mov	sp, r7
 8002496:	f85d 7b04 	ldr.w	r7, [sp], #4
 800249a:	4770      	bx	lr

0800249c <HAL_ETH_PMTCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_PMTCallback(ETH_HandleTypeDef *heth)
{
 800249c:	b480      	push	{r7}
 800249e:	b083      	sub	sp, #12
 80024a0:	af00      	add	r7, sp, #0
 80024a2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_PMTCallback could be implemented in the user file
  */
}
 80024a4:	bf00      	nop
 80024a6:	370c      	adds	r7, #12
 80024a8:	46bd      	mov	sp, r7
 80024aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024ae:	4770      	bx	lr

080024b0 <HAL_ETH_EEECallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_EEECallback(ETH_HandleTypeDef *heth)
{
 80024b0:	b480      	push	{r7}
 80024b2:	b083      	sub	sp, #12
 80024b4:	af00      	add	r7, sp, #0
 80024b6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_EEECallback could be implemented in the user file
  */
}
 80024b8:	bf00      	nop
 80024ba:	370c      	adds	r7, #12
 80024bc:	46bd      	mov	sp, r7
 80024be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024c2:	4770      	bx	lr

080024c4 <HAL_ETH_WakeUpCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_WakeUpCallback(ETH_HandleTypeDef *heth)
{
 80024c4:	b480      	push	{r7}
 80024c6:	b083      	sub	sp, #12
 80024c8:	af00      	add	r7, sp, #0
 80024ca:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ETH_WakeUpCallback could be implemented in the user file
   */
}
 80024cc:	bf00      	nop
 80024ce:	370c      	adds	r7, #12
 80024d0:	46bd      	mov	sp, r7
 80024d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024d6:	4770      	bx	lr

080024d8 <HAL_ETH_SetMDIOClockRange>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
void HAL_ETH_SetMDIOClockRange(ETH_HandleTypeDef *heth)
{
 80024d8:	b580      	push	{r7, lr}
 80024da:	b084      	sub	sp, #16
 80024dc:	af00      	add	r7, sp, #0
 80024de:	6078      	str	r0, [r7, #4]
  uint32_t hclk;
  uint32_t tmpreg;

  /* Get the ETHERNET MACMDIOAR value */
  tmpreg = (heth->Instance)->MACMDIOAR;
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 80024e8:	60fb      	str	r3, [r7, #12]

  /* Clear CSR Clock Range bits */
  tmpreg &= ~ETH_MACMDIOAR_CR;
 80024ea:	68fb      	ldr	r3, [r7, #12]
 80024ec:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 80024f0:	60fb      	str	r3, [r7, #12]

  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 80024f2:	f001 fd81 	bl	8003ff8 <HAL_RCC_GetHCLKFreq>
 80024f6:	60b8      	str	r0, [r7, #8]

  /* Set CR bits depending on hclk value */
  if (hclk < 35000000U)
 80024f8:	68bb      	ldr	r3, [r7, #8]
 80024fa:	4a1a      	ldr	r2, [pc, #104]	@ (8002564 <HAL_ETH_SetMDIOClockRange+0x8c>)
 80024fc:	4293      	cmp	r3, r2
 80024fe:	d804      	bhi.n	800250a <HAL_ETH_SetMDIOClockRange+0x32>
  {
    /* CSR Clock Range between 0-35 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV16;
 8002500:	68fb      	ldr	r3, [r7, #12]
 8002502:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002506:	60fb      	str	r3, [r7, #12]
 8002508:	e022      	b.n	8002550 <HAL_ETH_SetMDIOClockRange+0x78>
  }
  else if (hclk < 60000000U)
 800250a:	68bb      	ldr	r3, [r7, #8]
 800250c:	4a16      	ldr	r2, [pc, #88]	@ (8002568 <HAL_ETH_SetMDIOClockRange+0x90>)
 800250e:	4293      	cmp	r3, r2
 8002510:	d204      	bcs.n	800251c <HAL_ETH_SetMDIOClockRange+0x44>
  {
    /* CSR Clock Range between 35-60 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV26;
 8002512:	68fb      	ldr	r3, [r7, #12]
 8002514:	f443 7340 	orr.w	r3, r3, #768	@ 0x300
 8002518:	60fb      	str	r3, [r7, #12]
 800251a:	e019      	b.n	8002550 <HAL_ETH_SetMDIOClockRange+0x78>
  }
  else if (hclk < 100000000U)
 800251c:	68bb      	ldr	r3, [r7, #8]
 800251e:	4a13      	ldr	r2, [pc, #76]	@ (800256c <HAL_ETH_SetMDIOClockRange+0x94>)
 8002520:	4293      	cmp	r3, r2
 8002522:	d915      	bls.n	8002550 <HAL_ETH_SetMDIOClockRange+0x78>
  {
    /* CSR Clock Range between 60-100 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
  }
  else if (hclk < 150000000U)
 8002524:	68bb      	ldr	r3, [r7, #8]
 8002526:	4a12      	ldr	r2, [pc, #72]	@ (8002570 <HAL_ETH_SetMDIOClockRange+0x98>)
 8002528:	4293      	cmp	r3, r2
 800252a:	d804      	bhi.n	8002536 <HAL_ETH_SetMDIOClockRange+0x5e>
  {
    /* CSR Clock Range between 100-150 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV62;
 800252c:	68fb      	ldr	r3, [r7, #12]
 800252e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002532:	60fb      	str	r3, [r7, #12]
 8002534:	e00c      	b.n	8002550 <HAL_ETH_SetMDIOClockRange+0x78>
  }
  else if (hclk < 250000000U)
 8002536:	68bb      	ldr	r3, [r7, #8]
 8002538:	4a0e      	ldr	r2, [pc, #56]	@ (8002574 <HAL_ETH_SetMDIOClockRange+0x9c>)
 800253a:	4293      	cmp	r3, r2
 800253c:	d804      	bhi.n	8002548 <HAL_ETH_SetMDIOClockRange+0x70>
  {
    /* CSR Clock Range between 150-250 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV102;
 800253e:	68fb      	ldr	r3, [r7, #12]
 8002540:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002544:	60fb      	str	r3, [r7, #12]
 8002546:	e003      	b.n	8002550 <HAL_ETH_SetMDIOClockRange+0x78>
  }
  else /* (hclk >= 250000000U) */
  {
    /* CSR Clock >= 250 MHz */
    tmpreg |= (uint32_t)(ETH_MACMDIOAR_CR_DIV124);
 8002548:	68fb      	ldr	r3, [r7, #12]
 800254a:	f443 63a0 	orr.w	r3, r3, #1280	@ 0x500
 800254e:	60fb      	str	r3, [r7, #12]
  }

  /* Configure the CSR Clock Range */
  (heth->Instance)->MACMDIOAR = (uint32_t)tmpreg;
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	68fa      	ldr	r2, [r7, #12]
 8002556:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
}
 800255a:	bf00      	nop
 800255c:	3710      	adds	r7, #16
 800255e:	46bd      	mov	sp, r7
 8002560:	bd80      	pop	{r7, pc}
 8002562:	bf00      	nop
 8002564:	02160ebf 	.word	0x02160ebf
 8002568:	03938700 	.word	0x03938700
 800256c:	05f5e0ff 	.word	0x05f5e0ff
 8002570:	08f0d17f 	.word	0x08f0d17f
 8002574:	0ee6b27f 	.word	0x0ee6b27f

08002578 <ETH_SetMACConfig>:
/** @addtogroup ETH_Private_Functions   ETH Private Functions
  * @{
  */

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth, const ETH_MACConfigTypeDef *macconf)
{
 8002578:	b480      	push	{r7}
 800257a:	b085      	sub	sp, #20
 800257c:	af00      	add	r7, sp, #0
 800257e:	6078      	str	r0, [r7, #4]
 8002580:	6039      	str	r1, [r7, #0]
  uint32_t macregval;

  /*------------------------ MACCR Configuration --------------------*/
  macregval = (macconf->InterPacketGapVal |
 8002582:	683b      	ldr	r3, [r7, #0]
 8002584:	689a      	ldr	r2, [r3, #8]
               macconf->SourceAddrControl |
 8002586:	683b      	ldr	r3, [r7, #0]
 8002588:	681b      	ldr	r3, [r3, #0]
  macregval = (macconf->InterPacketGapVal |
 800258a:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ChecksumOffload << 27) |
 800258c:	683b      	ldr	r3, [r7, #0]
 800258e:	791b      	ldrb	r3, [r3, #4]
 8002590:	06db      	lsls	r3, r3, #27
               macconf->SourceAddrControl |
 8002592:	431a      	orrs	r2, r3
               ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 8002594:	683b      	ldr	r3, [r7, #0]
 8002596:	7b1b      	ldrb	r3, [r3, #12]
 8002598:	05db      	lsls	r3, r3, #23
               ((uint32_t)macconf->ChecksumOffload << 27) |
 800259a:	431a      	orrs	r2, r3
               ((uint32_t)macconf->Support2KPacket  << 22) |
 800259c:	683b      	ldr	r3, [r7, #0]
 800259e:	7b5b      	ldrb	r3, [r3, #13]
 80025a0:	059b      	lsls	r3, r3, #22
               ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 80025a2:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CRCStripTypePacket << 21) |
 80025a4:	683b      	ldr	r3, [r7, #0]
 80025a6:	7b9b      	ldrb	r3, [r3, #14]
 80025a8:	055b      	lsls	r3, r3, #21
               ((uint32_t)macconf->Support2KPacket  << 22) |
 80025aa:	431a      	orrs	r2, r3
               ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 80025ac:	683b      	ldr	r3, [r7, #0]
 80025ae:	7bdb      	ldrb	r3, [r3, #15]
 80025b0:	051b      	lsls	r3, r3, #20
               ((uint32_t)macconf->CRCStripTypePacket << 21) |
 80025b2:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 80025b4:	683a      	ldr	r2, [r7, #0]
 80025b6:	7c12      	ldrb	r2, [r2, #16]
 80025b8:	2a00      	cmp	r2, #0
 80025ba:	d102      	bne.n	80025c2 <ETH_SetMACConfig+0x4a>
 80025bc:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 80025c0:	e000      	b.n	80025c4 <ETH_SetMACConfig+0x4c>
 80025c2:	2200      	movs	r2, #0
               ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 80025c4:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 80025c6:	683a      	ldr	r2, [r7, #0]
 80025c8:	7c52      	ldrb	r2, [r2, #17]
 80025ca:	2a00      	cmp	r2, #0
 80025cc:	d102      	bne.n	80025d4 <ETH_SetMACConfig+0x5c>
 80025ce:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 80025d2:	e000      	b.n	80025d6 <ETH_SetMACConfig+0x5e>
 80025d4:	2200      	movs	r2, #0
               ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 80025d6:	431a      	orrs	r2, r3
               ((uint32_t)macconf->JumboPacket << 16) |
 80025d8:	683b      	ldr	r3, [r7, #0]
 80025da:	7c9b      	ldrb	r3, [r3, #18]
 80025dc:	041b      	lsls	r3, r3, #16
               ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 80025de:	431a      	orrs	r2, r3
               macconf->Speed |
 80025e0:	683b      	ldr	r3, [r7, #0]
 80025e2:	695b      	ldr	r3, [r3, #20]
               ((uint32_t)macconf->JumboPacket << 16) |
 80025e4:	431a      	orrs	r2, r3
               macconf->DuplexMode |
 80025e6:	683b      	ldr	r3, [r7, #0]
 80025e8:	699b      	ldr	r3, [r3, #24]
               macconf->Speed |
 80025ea:	431a      	orrs	r2, r3
               ((uint32_t)macconf->LoopbackMode << 12) |
 80025ec:	683b      	ldr	r3, [r7, #0]
 80025ee:	7f1b      	ldrb	r3, [r3, #28]
 80025f0:	031b      	lsls	r3, r3, #12
               macconf->DuplexMode |
 80025f2:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11) |
 80025f4:	683b      	ldr	r3, [r7, #0]
 80025f6:	7f5b      	ldrb	r3, [r3, #29]
 80025f8:	02db      	lsls	r3, r3, #11
               ((uint32_t)macconf->LoopbackMode << 12) |
 80025fa:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10) |
 80025fc:	683a      	ldr	r2, [r7, #0]
 80025fe:	7f92      	ldrb	r2, [r2, #30]
 8002600:	2a00      	cmp	r2, #0
 8002602:	d102      	bne.n	800260a <ETH_SetMACConfig+0x92>
 8002604:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002608:	e000      	b.n	800260c <ETH_SetMACConfig+0x94>
 800260a:	2200      	movs	r2, #0
               ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11) |
 800260c:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CarrierSenseDuringTransmit << 9) |
 800260e:	683b      	ldr	r3, [r7, #0]
 8002610:	7fdb      	ldrb	r3, [r3, #31]
 8002612:	025b      	lsls	r3, r3, #9
               ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10) |
 8002614:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8) |
 8002616:	683a      	ldr	r2, [r7, #0]
 8002618:	f892 2020 	ldrb.w	r2, [r2, #32]
 800261c:	2a00      	cmp	r2, #0
 800261e:	d102      	bne.n	8002626 <ETH_SetMACConfig+0xae>
 8002620:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002624:	e000      	b.n	8002628 <ETH_SetMACConfig+0xb0>
 8002626:	2200      	movs	r2, #0
               ((uint32_t)macconf->CarrierSenseDuringTransmit << 9) |
 8002628:	431a      	orrs	r2, r3
               macconf->BackOffLimit |
 800262a:	683b      	ldr	r3, [r7, #0]
 800262c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
               ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8) |
 800262e:	431a      	orrs	r2, r3
               ((uint32_t)macconf->DeferralCheck << 4) |
 8002630:	683b      	ldr	r3, [r7, #0]
 8002632:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8002636:	011b      	lsls	r3, r3, #4
               macconf->BackOffLimit |
 8002638:	431a      	orrs	r2, r3
               macconf->PreambleLength);
 800263a:	683b      	ldr	r3, [r7, #0]
 800263c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
  macregval = (macconf->InterPacketGapVal |
 800263e:	4313      	orrs	r3, r2
 8002640:	60fb      	str	r3, [r7, #12]

  /* Write to MACCR */
  MODIFY_REG(heth->Instance->MACCR, ETH_MACCR_MASK, macregval);
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	681a      	ldr	r2, [r3, #0]
 8002648:	4b56      	ldr	r3, [pc, #344]	@ (80027a4 <ETH_SetMACConfig+0x22c>)
 800264a:	4013      	ands	r3, r2
 800264c:	687a      	ldr	r2, [r7, #4]
 800264e:	6812      	ldr	r2, [r2, #0]
 8002650:	68f9      	ldr	r1, [r7, #12]
 8002652:	430b      	orrs	r3, r1
 8002654:	6013      	str	r3, [r2, #0]

  /*------------------------ MACECR Configuration --------------------*/
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 8002656:	683b      	ldr	r3, [r7, #0]
 8002658:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800265a:	065a      	lsls	r2, r3, #25
               ((uint32_t)macconf->ExtendedInterPacketGap << 24) |
 800265c:	683b      	ldr	r3, [r7, #0]
 800265e:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8002662:	061b      	lsls	r3, r3, #24
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 8002664:	431a      	orrs	r2, r3
               ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18) |
 8002666:	683b      	ldr	r3, [r7, #0]
 8002668:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800266c:	049b      	lsls	r3, r3, #18
               ((uint32_t)macconf->ExtendedInterPacketGap << 24) |
 800266e:	431a      	orrs	r2, r3
               ((uint32_t)macconf->SlowProtocolDetect << 17) |
 8002670:	683b      	ldr	r3, [r7, #0]
 8002672:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8002676:	045b      	lsls	r3, r3, #17
               ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18) |
 8002678:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->CRCCheckingRxPackets == DISABLE) ? 1U : 0U) << 16) |
 800267a:	683a      	ldr	r2, [r7, #0]
 800267c:	f892 2032 	ldrb.w	r2, [r2, #50]	@ 0x32
 8002680:	2a00      	cmp	r2, #0
 8002682:	d102      	bne.n	800268a <ETH_SetMACConfig+0x112>
 8002684:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8002688:	e000      	b.n	800268c <ETH_SetMACConfig+0x114>
 800268a:	2200      	movs	r2, #0
               ((uint32_t)macconf->SlowProtocolDetect << 17) |
 800268c:	431a      	orrs	r2, r3
               macconf->GiantPacketSizeLimit);
 800268e:	683b      	ldr	r3, [r7, #0]
 8002690:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 8002692:	4313      	orrs	r3, r2
 8002694:	60fb      	str	r3, [r7, #12]

  /* Write to MACECR */
  MODIFY_REG(heth->Instance->MACECR, ETH_MACECR_MASK, macregval);
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	685a      	ldr	r2, [r3, #4]
 800269c:	4b42      	ldr	r3, [pc, #264]	@ (80027a8 <ETH_SetMACConfig+0x230>)
 800269e:	4013      	ands	r3, r2
 80026a0:	687a      	ldr	r2, [r7, #4]
 80026a2:	6812      	ldr	r2, [r2, #0]
 80026a4:	68f9      	ldr	r1, [r7, #12]
 80026a6:	430b      	orrs	r3, r1
 80026a8:	6053      	str	r3, [r2, #4]

  /*------------------------ MACWTR Configuration --------------------*/
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 80026aa:	683b      	ldr	r3, [r7, #0]
 80026ac:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80026b0:	021a      	lsls	r2, r3, #8
               macconf->WatchdogTimeout);
 80026b2:	683b      	ldr	r3, [r7, #0]
 80026b4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 80026b6:	4313      	orrs	r3, r2
 80026b8:	60fb      	str	r3, [r7, #12]

  /* Write to MACWTR */
  MODIFY_REG(heth->Instance->MACWTR, ETH_MACWTR_MASK, macregval);
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	68da      	ldr	r2, [r3, #12]
 80026c0:	4b3a      	ldr	r3, [pc, #232]	@ (80027ac <ETH_SetMACConfig+0x234>)
 80026c2:	4013      	ands	r3, r2
 80026c4:	687a      	ldr	r2, [r7, #4]
 80026c6:	6812      	ldr	r2, [r2, #0]
 80026c8:	68f9      	ldr	r1, [r7, #12]
 80026ca:	430b      	orrs	r3, r1
 80026cc:	60d3      	str	r3, [r2, #12]

  /*------------------------ MACTFCR Configuration --------------------*/
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 80026ce:	683b      	ldr	r3, [r7, #0]
 80026d0:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 80026d4:	005a      	lsls	r2, r3, #1
               macconf->PauseLowThreshold |
 80026d6:	683b      	ldr	r3, [r7, #0]
 80026d8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 80026da:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7) |
 80026dc:	683a      	ldr	r2, [r7, #0]
 80026de:	f892 204c 	ldrb.w	r2, [r2, #76]	@ 0x4c
 80026e2:	2a00      	cmp	r2, #0
 80026e4:	d101      	bne.n	80026ea <ETH_SetMACConfig+0x172>
 80026e6:	2280      	movs	r2, #128	@ 0x80
 80026e8:	e000      	b.n	80026ec <ETH_SetMACConfig+0x174>
 80026ea:	2200      	movs	r2, #0
               macconf->PauseLowThreshold |
 80026ec:	431a      	orrs	r2, r3
               (macconf->PauseTime << 16));
 80026ee:	683b      	ldr	r3, [r7, #0]
 80026f0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80026f2:	041b      	lsls	r3, r3, #16
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 80026f4:	4313      	orrs	r3, r2
 80026f6:	60fb      	str	r3, [r7, #12]

  /* Write to MACTFCR */
  MODIFY_REG(heth->Instance->MACTFCR, ETH_MACTFCR_MASK, macregval);
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 80026fe:	f64f 730d 	movw	r3, #65293	@ 0xff0d
 8002702:	4013      	ands	r3, r2
 8002704:	687a      	ldr	r2, [r7, #4]
 8002706:	6812      	ldr	r2, [r2, #0]
 8002708:	68f9      	ldr	r1, [r7, #12]
 800270a:	430b      	orrs	r3, r1
 800270c:	6713      	str	r3, [r2, #112]	@ 0x70

  /*------------------------ MACRFCR Configuration --------------------*/
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 800270e:	683b      	ldr	r3, [r7, #0]
 8002710:	f893 3056 	ldrb.w	r3, [r3, #86]	@ 0x56
 8002714:	461a      	mov	r2, r3
               ((uint32_t)macconf->UnicastPausePacketDetect << 1));
 8002716:	683b      	ldr	r3, [r7, #0]
 8002718:	f893 3055 	ldrb.w	r3, [r3, #85]	@ 0x55
 800271c:	005b      	lsls	r3, r3, #1
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 800271e:	4313      	orrs	r3, r2
 8002720:	60fb      	str	r3, [r7, #12]

  /* Write to MACRFCR */
  MODIFY_REG(heth->Instance->MACRFCR, ETH_MACRFCR_MASK, macregval);
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800272a:	f023 0103 	bic.w	r1, r3, #3
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	68fa      	ldr	r2, [r7, #12]
 8002734:	430a      	orrs	r2, r1
 8002736:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /*------------------------ MTLTQOMR Configuration --------------------*/
  /* Write to MTLTQOMR */
  MODIFY_REG(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_MASK, macconf->TransmitQueueMode);
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	f8d3 3d00 	ldr.w	r3, [r3, #3328]	@ 0xd00
 8002742:	f023 0172 	bic.w	r1, r3, #114	@ 0x72
 8002746:	683b      	ldr	r3, [r7, #0]
 8002748:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	430a      	orrs	r2, r1
 8002750:	f8c3 2d00 	str.w	r2, [r3, #3328]	@ 0xd00

  /*------------------------ MTLRQOMR Configuration --------------------*/
  macregval = (macconf->ReceiveQueueMode |
 8002754:	683b      	ldr	r3, [r7, #0]
 8002756:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 8002758:	683a      	ldr	r2, [r7, #0]
 800275a:	f892 2060 	ldrb.w	r2, [r2, #96]	@ 0x60
 800275e:	2a00      	cmp	r2, #0
 8002760:	d101      	bne.n	8002766 <ETH_SetMACConfig+0x1ee>
 8002762:	2240      	movs	r2, #64	@ 0x40
 8002764:	e000      	b.n	8002768 <ETH_SetMACConfig+0x1f0>
 8002766:	2200      	movs	r2, #0
  macregval = (macconf->ReceiveQueueMode |
 8002768:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ForwardRxErrorPacket << 4) |
 800276a:	683b      	ldr	r3, [r7, #0]
 800276c:	f893 3061 	ldrb.w	r3, [r3, #97]	@ 0x61
 8002770:	011b      	lsls	r3, r3, #4
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 8002772:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ForwardRxUndersizedGoodPacket << 3));
 8002774:	683b      	ldr	r3, [r7, #0]
 8002776:	f893 3062 	ldrb.w	r3, [r3, #98]	@ 0x62
 800277a:	00db      	lsls	r3, r3, #3
  macregval = (macconf->ReceiveQueueMode |
 800277c:	4313      	orrs	r3, r2
 800277e:	60fb      	str	r3, [r7, #12]

  /* Write to MTLRQOMR */
  MODIFY_REG(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_MASK, macregval);
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	@ 0xd30
 8002788:	f023 017b 	bic.w	r1, r3, #123	@ 0x7b
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	68fa      	ldr	r2, [r7, #12]
 8002792:	430a      	orrs	r2, r1
 8002794:	f8c3 2d30 	str.w	r2, [r3, #3376]	@ 0xd30
}
 8002798:	bf00      	nop
 800279a:	3714      	adds	r7, #20
 800279c:	46bd      	mov	sp, r7
 800279e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027a2:	4770      	bx	lr
 80027a4:	00048083 	.word	0x00048083
 80027a8:	c0f88000 	.word	0xc0f88000
 80027ac:	fffffef0 	.word	0xfffffef0

080027b0 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth, const ETH_DMAConfigTypeDef *dmaconf)
{
 80027b0:	b480      	push	{r7}
 80027b2:	b085      	sub	sp, #20
 80027b4:	af00      	add	r7, sp, #0
 80027b6:	6078      	str	r0, [r7, #4]
 80027b8:	6039      	str	r1, [r7, #0]
  uint32_t dmaregval;

  /*------------------------ DMAMR Configuration --------------------*/
  MODIFY_REG(heth->Instance->DMAMR, ETH_DMAMR_MASK, dmaconf->DMAArbitration);
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80027c2:	681a      	ldr	r2, [r3, #0]
 80027c4:	4b38      	ldr	r3, [pc, #224]	@ (80028a8 <ETH_SetDMAConfig+0xf8>)
 80027c6:	4013      	ands	r3, r2
 80027c8:	683a      	ldr	r2, [r7, #0]
 80027ca:	6811      	ldr	r1, [r2, #0]
 80027cc:	687a      	ldr	r2, [r7, #4]
 80027ce:	6812      	ldr	r2, [r2, #0]
 80027d0:	430b      	orrs	r3, r1
 80027d2:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80027d6:	6013      	str	r3, [r2, #0]

  /*------------------------ DMASBMR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 80027d8:	683b      	ldr	r3, [r7, #0]
 80027da:	791b      	ldrb	r3, [r3, #4]
 80027dc:	031a      	lsls	r2, r3, #12
               dmaconf->BurstMode |
 80027de:	683b      	ldr	r3, [r7, #0]
 80027e0:	689b      	ldr	r3, [r3, #8]
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 80027e2:	431a      	orrs	r2, r3
               ((uint32_t)dmaconf->RebuildINCRxBurst << 15));
 80027e4:	683b      	ldr	r3, [r7, #0]
 80027e6:	7b1b      	ldrb	r3, [r3, #12]
 80027e8:	03db      	lsls	r3, r3, #15
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 80027ea:	4313      	orrs	r3, r2
 80027ec:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMASBMR, ETH_DMASBMR_MASK, dmaregval);
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80027f6:	685a      	ldr	r2, [r3, #4]
 80027f8:	4b2c      	ldr	r3, [pc, #176]	@ (80028ac <ETH_SetDMAConfig+0xfc>)
 80027fa:	4013      	ands	r3, r2
 80027fc:	687a      	ldr	r2, [r7, #4]
 80027fe:	6812      	ldr	r2, [r2, #0]
 8002800:	68f9      	ldr	r1, [r7, #12]
 8002802:	430b      	orrs	r3, r1
 8002804:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8002808:	6053      	str	r3, [r2, #4]

  /*------------------------ DMACCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 800280a:	683b      	ldr	r3, [r7, #0]
 800280c:	7b5b      	ldrb	r3, [r3, #13]
 800280e:	041a      	lsls	r2, r3, #16
               dmaconf->MaximumSegmentSize);
 8002810:	683b      	ldr	r3, [r7, #0]
 8002812:	6a1b      	ldr	r3, [r3, #32]
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 8002814:	4313      	orrs	r3, r2
 8002816:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_MASK, dmaregval);
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002820:	f8d3 2100 	ldr.w	r2, [r3, #256]	@ 0x100
 8002824:	4b22      	ldr	r3, [pc, #136]	@ (80028b0 <ETH_SetDMAConfig+0x100>)
 8002826:	4013      	ands	r3, r2
 8002828:	687a      	ldr	r2, [r7, #4]
 800282a:	6812      	ldr	r2, [r2, #0]
 800282c:	68f9      	ldr	r1, [r7, #12]
 800282e:	430b      	orrs	r3, r1
 8002830:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8002834:	f8c2 3100 	str.w	r3, [r2, #256]	@ 0x100

  /*------------------------ DMACTCR Configuration --------------------*/
  dmaregval = (dmaconf->TxDMABurstLength |
 8002838:	683b      	ldr	r3, [r7, #0]
 800283a:	691a      	ldr	r2, [r3, #16]
               ((uint32_t)dmaconf->SecondPacketOperate << 4) |
 800283c:	683b      	ldr	r3, [r7, #0]
 800283e:	7d1b      	ldrb	r3, [r3, #20]
 8002840:	011b      	lsls	r3, r3, #4
  dmaregval = (dmaconf->TxDMABurstLength |
 8002842:	431a      	orrs	r2, r3
               ((uint32_t)dmaconf->TCPSegmentation << 12));
 8002844:	683b      	ldr	r3, [r7, #0]
 8002846:	7f5b      	ldrb	r3, [r3, #29]
 8002848:	031b      	lsls	r3, r3, #12
  dmaregval = (dmaconf->TxDMABurstLength |
 800284a:	4313      	orrs	r3, r2
 800284c:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACTCR, ETH_DMACTCR_MASK, dmaregval);
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002856:	f8d3 2104 	ldr.w	r2, [r3, #260]	@ 0x104
 800285a:	4b16      	ldr	r3, [pc, #88]	@ (80028b4 <ETH_SetDMAConfig+0x104>)
 800285c:	4013      	ands	r3, r2
 800285e:	687a      	ldr	r2, [r7, #4]
 8002860:	6812      	ldr	r2, [r2, #0]
 8002862:	68f9      	ldr	r1, [r7, #12]
 8002864:	430b      	orrs	r3, r1
 8002866:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800286a:	f8c2 3104 	str.w	r3, [r2, #260]	@ 0x104

  /*------------------------ DMACRCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 800286e:	683b      	ldr	r3, [r7, #0]
 8002870:	7f1b      	ldrb	r3, [r3, #28]
 8002872:	07da      	lsls	r2, r3, #31
               dmaconf->RxDMABurstLength);
 8002874:	683b      	ldr	r3, [r7, #0]
 8002876:	699b      	ldr	r3, [r3, #24]
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 8002878:	4313      	orrs	r3, r2
 800287a:	60fb      	str	r3, [r7, #12]

  /* Write to DMACRCR */
  MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_MASK, dmaregval);
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002884:	f8d3 2108 	ldr.w	r2, [r3, #264]	@ 0x108
 8002888:	4b0b      	ldr	r3, [pc, #44]	@ (80028b8 <ETH_SetDMAConfig+0x108>)
 800288a:	4013      	ands	r3, r2
 800288c:	687a      	ldr	r2, [r7, #4]
 800288e:	6812      	ldr	r2, [r2, #0]
 8002890:	68f9      	ldr	r1, [r7, #12]
 8002892:	430b      	orrs	r3, r1
 8002894:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8002898:	f8c2 3108 	str.w	r3, [r2, #264]	@ 0x108
}
 800289c:	bf00      	nop
 800289e:	3714      	adds	r7, #20
 80028a0:	46bd      	mov	sp, r7
 80028a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028a6:	4770      	bx	lr
 80028a8:	ffff87fd 	.word	0xffff87fd
 80028ac:	ffff2ffe 	.word	0xffff2ffe
 80028b0:	fffec000 	.word	0xfffec000
 80028b4:	ffc0efef 	.word	0xffc0efef
 80028b8:	7fc0ffff 	.word	0x7fc0ffff

080028bc <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 80028bc:	b580      	push	{r7, lr}
 80028be:	b0a4      	sub	sp, #144	@ 0x90
 80028c0:	af00      	add	r7, sp, #0
 80028c2:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.AutomaticPadCRCStrip = ENABLE;
 80028c4:	2301      	movs	r3, #1
 80028c6:	f887 303b 	strb.w	r3, [r7, #59]	@ 0x3b
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 80028ca:	2300      	movs	r3, #0
 80028cc:	653b      	str	r3, [r7, #80]	@ 0x50
  macDefaultConf.CarrierSenseBeforeTransmit = DISABLE;
 80028ce:	2300      	movs	r3, #0
 80028d0:	f887 3049 	strb.w	r3, [r7, #73]	@ 0x49
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 80028d4:	2300      	movs	r3, #0
 80028d6:	f887 304b 	strb.w	r3, [r7, #75]	@ 0x4b
  macDefaultConf.ChecksumOffload = ENABLE;
 80028da:	2301      	movs	r3, #1
 80028dc:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
  macDefaultConf.CRCCheckingRxPackets = ENABLE;
 80028e0:	2301      	movs	r3, #1
 80028e2:	f887 305e 	strb.w	r3, [r7, #94]	@ 0x5e
  macDefaultConf.CRCStripTypePacket = ENABLE;
 80028e6:	2301      	movs	r3, #1
 80028e8:	f887 303a 	strb.w	r3, [r7, #58]	@ 0x3a
  macDefaultConf.DeferralCheck = DISABLE;
 80028ec:	2300      	movs	r3, #0
 80028ee:	f887 3054 	strb.w	r3, [r7, #84]	@ 0x54
  macDefaultConf.DropTCPIPChecksumErrorPacket = ENABLE;
 80028f2:	2301      	movs	r3, #1
 80028f4:	f887 308c 	strb.w	r3, [r7, #140]	@ 0x8c
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 80028f8:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80028fc:	647b      	str	r3, [r7, #68]	@ 0x44
  macDefaultConf.ExtendedInterPacketGap = DISABLE;
 80028fe:	2300      	movs	r3, #0
 8002900:	f887 3064 	strb.w	r3, [r7, #100]	@ 0x64
  macDefaultConf.ExtendedInterPacketGapVal = 0x0U;
 8002904:	2300      	movs	r3, #0
 8002906:	66bb      	str	r3, [r7, #104]	@ 0x68
  macDefaultConf.ForwardRxErrorPacket = DISABLE;
 8002908:	2300      	movs	r3, #0
 800290a:	f887 308d 	strb.w	r3, [r7, #141]	@ 0x8d
  macDefaultConf.ForwardRxUndersizedGoodPacket = DISABLE;
 800290e:	2300      	movs	r3, #0
 8002910:	f887 308e 	strb.w	r3, [r7, #142]	@ 0x8e
  macDefaultConf.GiantPacketSizeLimit = 0x618U;
 8002914:	f44f 63c3 	mov.w	r3, #1560	@ 0x618
 8002918:	663b      	str	r3, [r7, #96]	@ 0x60
  macDefaultConf.GiantPacketSizeLimitControl = DISABLE;
 800291a:	2300      	movs	r3, #0
 800291c:	f887 3038 	strb.w	r3, [r7, #56]	@ 0x38
  macDefaultConf.InterPacketGapVal = ETH_INTERPACKETGAP_96BIT;
 8002920:	2300      	movs	r3, #0
 8002922:	637b      	str	r3, [r7, #52]	@ 0x34
  macDefaultConf.Jabber = ENABLE;
 8002924:	2301      	movs	r3, #1
 8002926:	f887 303d 	strb.w	r3, [r7, #61]	@ 0x3d
  macDefaultConf.JumboPacket = DISABLE;
 800292a:	2300      	movs	r3, #0
 800292c:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
  macDefaultConf.LoopbackMode = DISABLE;
 8002930:	2300      	movs	r3, #0
 8002932:	f887 3048 	strb.w	r3, [r7, #72]	@ 0x48
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS_4;
 8002936:	2300      	movs	r3, #0
 8002938:	67fb      	str	r3, [r7, #124]	@ 0x7c
  macDefaultConf.PauseTime = 0x0U;
 800293a:	2300      	movs	r3, #0
 800293c:	677b      	str	r3, [r7, #116]	@ 0x74
  macDefaultConf.PreambleLength = ETH_PREAMBLELENGTH_7;
 800293e:	2300      	movs	r3, #0
 8002940:	65bb      	str	r3, [r7, #88]	@ 0x58
  macDefaultConf.ProgrammableWatchdog = DISABLE;
 8002942:	2300      	movs	r3, #0
 8002944:	f887 306c 	strb.w	r3, [r7, #108]	@ 0x6c
  macDefaultConf.ReceiveFlowControl = DISABLE;
 8002948:	2300      	movs	r3, #0
 800294a:	f887 3082 	strb.w	r3, [r7, #130]	@ 0x82
  macDefaultConf.ReceiveOwn = ENABLE;
 800294e:	2301      	movs	r3, #1
 8002950:	f887 304a 	strb.w	r3, [r7, #74]	@ 0x4a
  macDefaultConf.ReceiveQueueMode = ETH_RECEIVESTOREFORWARD;
 8002954:	2320      	movs	r3, #32
 8002956:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  macDefaultConf.RetryTransmission = ENABLE;
 800295a:	2301      	movs	r3, #1
 800295c:	f887 304c 	strb.w	r3, [r7, #76]	@ 0x4c
  macDefaultConf.SlowProtocolDetect = DISABLE;
 8002960:	2300      	movs	r3, #0
 8002962:	f887 305d 	strb.w	r3, [r7, #93]	@ 0x5d
  macDefaultConf.SourceAddrControl = ETH_SOURCEADDRESS_REPLACE_ADDR0;
 8002966:	f04f 5340 	mov.w	r3, #805306368	@ 0x30000000
 800296a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  macDefaultConf.Speed = ETH_SPEED_100M;
 800296c:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8002970:	643b      	str	r3, [r7, #64]	@ 0x40
  macDefaultConf.Support2KPacket = DISABLE;
 8002972:	2300      	movs	r3, #0
 8002974:	f887 3039 	strb.w	r3, [r7, #57]	@ 0x39
  macDefaultConf.TransmitQueueMode = ETH_TRANSMITSTOREFORWARD;
 8002978:	2302      	movs	r3, #2
 800297a:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  macDefaultConf.TransmitFlowControl = DISABLE;
 800297e:	2300      	movs	r3, #0
 8002980:	f887 3080 	strb.w	r3, [r7, #128]	@ 0x80
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 8002984:	2300      	movs	r3, #0
 8002986:	f887 3081 	strb.w	r3, [r7, #129]	@ 0x81
  macDefaultConf.UnicastSlowProtocolPacketDetect = DISABLE;
 800298a:	2300      	movs	r3, #0
 800298c:	f887 305c 	strb.w	r3, [r7, #92]	@ 0x5c
  macDefaultConf.Watchdog = ENABLE;
 8002990:	2301      	movs	r3, #1
 8002992:	f887 303c 	strb.w	r3, [r7, #60]	@ 0x3c
  macDefaultConf.WatchdogTimeout =  ETH_MACWTR_WTO_2KB;
 8002996:	2300      	movs	r3, #0
 8002998:	673b      	str	r3, [r7, #112]	@ 0x70
  macDefaultConf.ZeroQuantaPause = ENABLE;
 800299a:	2301      	movs	r3, #1
 800299c:	f887 3078 	strb.w	r3, [r7, #120]	@ 0x78

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 80029a0:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80029a4:	4619      	mov	r1, r3
 80029a6:	6878      	ldr	r0, [r7, #4]
 80029a8:	f7ff fde6 	bl	8002578 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 80029ac:	2301      	movs	r3, #1
 80029ae:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 80029b0:	2301      	movs	r3, #1
 80029b2:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_RX1_TX1;
 80029b4:	2300      	movs	r3, #0
 80029b6:	60bb      	str	r3, [r7, #8]
  dmaDefaultConf.FlushRxPacket = DISABLE;
 80029b8:	2300      	movs	r3, #0
 80029ba:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
  dmaDefaultConf.PBLx8Mode = DISABLE;
 80029be:	2300      	movs	r3, #0
 80029c0:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.RebuildINCRxBurst = DISABLE;
 80029c2:	2300      	movs	r3, #0
 80029c4:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 80029c6:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 80029ca:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.SecondPacketOperate = DISABLE;
 80029cc:	2300      	movs	r3, #0
 80029ce:	773b      	strb	r3, [r7, #28]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 80029d0:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 80029d4:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.TCPSegmentation = DISABLE;
 80029d6:	2300      	movs	r3, #0
 80029d8:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
  dmaDefaultConf.MaximumSegmentSize = ETH_SEGMENT_SIZE_DEFAULT;
 80029dc:	f44f 7306 	mov.w	r3, #536	@ 0x218
 80029e0:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 80029e2:	f107 0308 	add.w	r3, r7, #8
 80029e6:	4619      	mov	r1, r3
 80029e8:	6878      	ldr	r0, [r7, #4]
 80029ea:	f7ff fee1 	bl	80027b0 <ETH_SetDMAConfig>
}
 80029ee:	bf00      	nop
 80029f0:	3790      	adds	r7, #144	@ 0x90
 80029f2:	46bd      	mov	sp, r7
 80029f4:	bd80      	pop	{r7, pc}

080029f6 <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 80029f6:	b480      	push	{r7}
 80029f8:	b085      	sub	sp, #20
 80029fa:	af00      	add	r7, sp, #0
 80029fc:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 80029fe:	2300      	movs	r3, #0
 8002a00:	60fb      	str	r3, [r7, #12]
 8002a02:	e01d      	b.n	8002a40 <ETH_DMATxDescListInit+0x4a>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	68d9      	ldr	r1, [r3, #12]
 8002a08:	68fa      	ldr	r2, [r7, #12]
 8002a0a:	4613      	mov	r3, r2
 8002a0c:	005b      	lsls	r3, r3, #1
 8002a0e:	4413      	add	r3, r2
 8002a10:	00db      	lsls	r3, r3, #3
 8002a12:	440b      	add	r3, r1
 8002a14:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0U);
 8002a16:	68bb      	ldr	r3, [r7, #8]
 8002a18:	2200      	movs	r2, #0
 8002a1a:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0U);
 8002a1c:	68bb      	ldr	r3, [r7, #8]
 8002a1e:	2200      	movs	r2, #0
 8002a20:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0U);
 8002a22:	68bb      	ldr	r3, [r7, #8]
 8002a24:	2200      	movs	r2, #0
 8002a26:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0U);
 8002a28:	68bb      	ldr	r3, [r7, #8]
 8002a2a:	2200      	movs	r2, #0
 8002a2c:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 8002a2e:	68b9      	ldr	r1, [r7, #8]
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	68fa      	ldr	r2, [r7, #12]
 8002a34:	3206      	adds	r2, #6
 8002a36:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8002a3a:	68fb      	ldr	r3, [r7, #12]
 8002a3c:	3301      	adds	r3, #1
 8002a3e:	60fb      	str	r3, [r7, #12]
 8002a40:	68fb      	ldr	r3, [r7, #12]
 8002a42:	2b03      	cmp	r3, #3
 8002a44:	d9de      	bls.n	8002a04 <ETH_DMATxDescListInit+0xe>

  }

  heth->TxDescList.CurTxDesc = 0;
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	2200      	movs	r2, #0
 8002a4a:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Set Transmit Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACTDRLR, (ETH_TX_DESC_CNT - 1U));
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002a54:	461a      	mov	r2, r3
 8002a56:	2303      	movs	r3, #3
 8002a58:	f8c2 312c 	str.w	r3, [r2, #300]	@ 0x12c

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMACTDLAR, (uint32_t) heth->Init.TxDesc);
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	68da      	ldr	r2, [r3, #12]
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002a68:	f8c3 2114 	str.w	r2, [r3, #276]	@ 0x114

  /* Set Transmit Descriptor Tail pointer */
  WRITE_REG(heth->Instance->DMACTDTPR, (uint32_t) heth->Init.TxDesc);
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	68da      	ldr	r2, [r3, #12]
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002a78:	f8c3 2120 	str.w	r2, [r3, #288]	@ 0x120
}
 8002a7c:	bf00      	nop
 8002a7e:	3714      	adds	r7, #20
 8002a80:	46bd      	mov	sp, r7
 8002a82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a86:	4770      	bx	lr

08002a88 <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 8002a88:	b480      	push	{r7}
 8002a8a:	b085      	sub	sp, #20
 8002a8c:	af00      	add	r7, sp, #0
 8002a8e:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8002a90:	2300      	movs	r3, #0
 8002a92:	60fb      	str	r3, [r7, #12]
 8002a94:	e023      	b.n	8002ade <ETH_DMARxDescListInit+0x56>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	6919      	ldr	r1, [r3, #16]
 8002a9a:	68fa      	ldr	r2, [r7, #12]
 8002a9c:	4613      	mov	r3, r2
 8002a9e:	005b      	lsls	r3, r3, #1
 8002aa0:	4413      	add	r3, r2
 8002aa2:	00db      	lsls	r3, r3, #3
 8002aa4:	440b      	add	r3, r1
 8002aa6:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0U);
 8002aa8:	68bb      	ldr	r3, [r7, #8]
 8002aaa:	2200      	movs	r2, #0
 8002aac:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0U);
 8002aae:	68bb      	ldr	r3, [r7, #8]
 8002ab0:	2200      	movs	r2, #0
 8002ab2:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0U);
 8002ab4:	68bb      	ldr	r3, [r7, #8]
 8002ab6:	2200      	movs	r2, #0
 8002ab8:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0U);
 8002aba:	68bb      	ldr	r3, [r7, #8]
 8002abc:	2200      	movs	r2, #0
 8002abe:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0U);
 8002ac0:	68bb      	ldr	r3, [r7, #8]
 8002ac2:	2200      	movs	r2, #0
 8002ac4:	611a      	str	r2, [r3, #16]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0U);
 8002ac6:	68bb      	ldr	r3, [r7, #8]
 8002ac8:	2200      	movs	r2, #0
 8002aca:	615a      	str	r2, [r3, #20]

    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 8002acc:	68b9      	ldr	r1, [r7, #8]
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	68fa      	ldr	r2, [r7, #12]
 8002ad2:	3212      	adds	r2, #18
 8002ad4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8002ad8:	68fb      	ldr	r3, [r7, #12]
 8002ada:	3301      	adds	r3, #1
 8002adc:	60fb      	str	r3, [r7, #12]
 8002ade:	68fb      	ldr	r3, [r7, #12]
 8002ae0:	2b03      	cmp	r3, #3
 8002ae2:	d9d8      	bls.n	8002a96 <ETH_DMARxDescListInit+0xe>

  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0U);
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	2200      	movs	r2, #0
 8002ae8:	65da      	str	r2, [r3, #92]	@ 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0U);
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	2200      	movs	r2, #0
 8002aee:	661a      	str	r2, [r3, #96]	@ 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0U);
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	2200      	movs	r2, #0
 8002af4:	669a      	str	r2, [r3, #104]	@ 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0U);
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	2200      	movs	r2, #0
 8002afa:	66da      	str	r2, [r3, #108]	@ 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0U);
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	2200      	movs	r2, #0
 8002b00:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Set Receive Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACRDRLR, ((uint32_t)(ETH_RX_DESC_CNT - 1U)));
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002b0a:	461a      	mov	r2, r3
 8002b0c:	2303      	movs	r3, #3
 8002b0e:	f8c2 3130 	str.w	r3, [r2, #304]	@ 0x130

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMACRDLAR, (uint32_t) heth->Init.RxDesc);
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	691a      	ldr	r2, [r3, #16]
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002b1e:	f8c3 211c 	str.w	r2, [r3, #284]	@ 0x11c

  /* Set Receive Descriptor Tail pointer Address */
  WRITE_REG(heth->Instance->DMACRDTPR, ((uint32_t)(heth->Init.RxDesc + (uint32_t)(ETH_RX_DESC_CNT - 1U))));
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	691b      	ldr	r3, [r3, #16]
 8002b26:	f103 0248 	add.w	r2, r3, #72	@ 0x48
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002b32:	f8c3 2128 	str.w	r2, [r3, #296]	@ 0x128
}
 8002b36:	bf00      	nop
 8002b38:	3714      	adds	r7, #20
 8002b3a:	46bd      	mov	sp, r7
 8002b3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b40:	4770      	bx	lr
	...

08002b44 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002b44:	b480      	push	{r7}
 8002b46:	b089      	sub	sp, #36	@ 0x24
 8002b48:	af00      	add	r7, sp, #0
 8002b4a:	6078      	str	r0, [r7, #4]
 8002b4c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8002b4e:	2300      	movs	r3, #0
 8002b50:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8002b52:	4b86      	ldr	r3, [pc, #536]	@ (8002d6c <HAL_GPIO_Init+0x228>)
 8002b54:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8002b56:	e18c      	b.n	8002e72 <HAL_GPIO_Init+0x32e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8002b58:	683b      	ldr	r3, [r7, #0]
 8002b5a:	681a      	ldr	r2, [r3, #0]
 8002b5c:	2101      	movs	r1, #1
 8002b5e:	69fb      	ldr	r3, [r7, #28]
 8002b60:	fa01 f303 	lsl.w	r3, r1, r3
 8002b64:	4013      	ands	r3, r2
 8002b66:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8002b68:	693b      	ldr	r3, [r7, #16]
 8002b6a:	2b00      	cmp	r3, #0
 8002b6c:	f000 817e 	beq.w	8002e6c <HAL_GPIO_Init+0x328>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002b70:	683b      	ldr	r3, [r7, #0]
 8002b72:	685b      	ldr	r3, [r3, #4]
 8002b74:	f003 0303 	and.w	r3, r3, #3
 8002b78:	2b01      	cmp	r3, #1
 8002b7a:	d005      	beq.n	8002b88 <HAL_GPIO_Init+0x44>
 8002b7c:	683b      	ldr	r3, [r7, #0]
 8002b7e:	685b      	ldr	r3, [r3, #4]
 8002b80:	f003 0303 	and.w	r3, r3, #3
 8002b84:	2b02      	cmp	r3, #2
 8002b86:	d130      	bne.n	8002bea <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	689b      	ldr	r3, [r3, #8]
 8002b8c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8002b8e:	69fb      	ldr	r3, [r7, #28]
 8002b90:	005b      	lsls	r3, r3, #1
 8002b92:	2203      	movs	r2, #3
 8002b94:	fa02 f303 	lsl.w	r3, r2, r3
 8002b98:	43db      	mvns	r3, r3
 8002b9a:	69ba      	ldr	r2, [r7, #24]
 8002b9c:	4013      	ands	r3, r2
 8002b9e:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002ba0:	683b      	ldr	r3, [r7, #0]
 8002ba2:	68da      	ldr	r2, [r3, #12]
 8002ba4:	69fb      	ldr	r3, [r7, #28]
 8002ba6:	005b      	lsls	r3, r3, #1
 8002ba8:	fa02 f303 	lsl.w	r3, r2, r3
 8002bac:	69ba      	ldr	r2, [r7, #24]
 8002bae:	4313      	orrs	r3, r2
 8002bb0:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	69ba      	ldr	r2, [r7, #24]
 8002bb6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	685b      	ldr	r3, [r3, #4]
 8002bbc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002bbe:	2201      	movs	r2, #1
 8002bc0:	69fb      	ldr	r3, [r7, #28]
 8002bc2:	fa02 f303 	lsl.w	r3, r2, r3
 8002bc6:	43db      	mvns	r3, r3
 8002bc8:	69ba      	ldr	r2, [r7, #24]
 8002bca:	4013      	ands	r3, r2
 8002bcc:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002bce:	683b      	ldr	r3, [r7, #0]
 8002bd0:	685b      	ldr	r3, [r3, #4]
 8002bd2:	091b      	lsrs	r3, r3, #4
 8002bd4:	f003 0201 	and.w	r2, r3, #1
 8002bd8:	69fb      	ldr	r3, [r7, #28]
 8002bda:	fa02 f303 	lsl.w	r3, r2, r3
 8002bde:	69ba      	ldr	r2, [r7, #24]
 8002be0:	4313      	orrs	r3, r2
 8002be2:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	69ba      	ldr	r2, [r7, #24]
 8002be8:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002bea:	683b      	ldr	r3, [r7, #0]
 8002bec:	685b      	ldr	r3, [r3, #4]
 8002bee:	f003 0303 	and.w	r3, r3, #3
 8002bf2:	2b03      	cmp	r3, #3
 8002bf4:	d017      	beq.n	8002c26 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	68db      	ldr	r3, [r3, #12]
 8002bfa:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002bfc:	69fb      	ldr	r3, [r7, #28]
 8002bfe:	005b      	lsls	r3, r3, #1
 8002c00:	2203      	movs	r2, #3
 8002c02:	fa02 f303 	lsl.w	r3, r2, r3
 8002c06:	43db      	mvns	r3, r3
 8002c08:	69ba      	ldr	r2, [r7, #24]
 8002c0a:	4013      	ands	r3, r2
 8002c0c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002c0e:	683b      	ldr	r3, [r7, #0]
 8002c10:	689a      	ldr	r2, [r3, #8]
 8002c12:	69fb      	ldr	r3, [r7, #28]
 8002c14:	005b      	lsls	r3, r3, #1
 8002c16:	fa02 f303 	lsl.w	r3, r2, r3
 8002c1a:	69ba      	ldr	r2, [r7, #24]
 8002c1c:	4313      	orrs	r3, r2
 8002c1e:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	69ba      	ldr	r2, [r7, #24]
 8002c24:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002c26:	683b      	ldr	r3, [r7, #0]
 8002c28:	685b      	ldr	r3, [r3, #4]
 8002c2a:	f003 0303 	and.w	r3, r3, #3
 8002c2e:	2b02      	cmp	r3, #2
 8002c30:	d123      	bne.n	8002c7a <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002c32:	69fb      	ldr	r3, [r7, #28]
 8002c34:	08da      	lsrs	r2, r3, #3
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	3208      	adds	r2, #8
 8002c3a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002c3e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8002c40:	69fb      	ldr	r3, [r7, #28]
 8002c42:	f003 0307 	and.w	r3, r3, #7
 8002c46:	009b      	lsls	r3, r3, #2
 8002c48:	220f      	movs	r2, #15
 8002c4a:	fa02 f303 	lsl.w	r3, r2, r3
 8002c4e:	43db      	mvns	r3, r3
 8002c50:	69ba      	ldr	r2, [r7, #24]
 8002c52:	4013      	ands	r3, r2
 8002c54:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8002c56:	683b      	ldr	r3, [r7, #0]
 8002c58:	691a      	ldr	r2, [r3, #16]
 8002c5a:	69fb      	ldr	r3, [r7, #28]
 8002c5c:	f003 0307 	and.w	r3, r3, #7
 8002c60:	009b      	lsls	r3, r3, #2
 8002c62:	fa02 f303 	lsl.w	r3, r2, r3
 8002c66:	69ba      	ldr	r2, [r7, #24]
 8002c68:	4313      	orrs	r3, r2
 8002c6a:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002c6c:	69fb      	ldr	r3, [r7, #28]
 8002c6e:	08da      	lsrs	r2, r3, #3
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	3208      	adds	r2, #8
 8002c74:	69b9      	ldr	r1, [r7, #24]
 8002c76:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8002c80:	69fb      	ldr	r3, [r7, #28]
 8002c82:	005b      	lsls	r3, r3, #1
 8002c84:	2203      	movs	r2, #3
 8002c86:	fa02 f303 	lsl.w	r3, r2, r3
 8002c8a:	43db      	mvns	r3, r3
 8002c8c:	69ba      	ldr	r2, [r7, #24]
 8002c8e:	4013      	ands	r3, r2
 8002c90:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002c92:	683b      	ldr	r3, [r7, #0]
 8002c94:	685b      	ldr	r3, [r3, #4]
 8002c96:	f003 0203 	and.w	r2, r3, #3
 8002c9a:	69fb      	ldr	r3, [r7, #28]
 8002c9c:	005b      	lsls	r3, r3, #1
 8002c9e:	fa02 f303 	lsl.w	r3, r2, r3
 8002ca2:	69ba      	ldr	r2, [r7, #24]
 8002ca4:	4313      	orrs	r3, r2
 8002ca6:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	69ba      	ldr	r2, [r7, #24]
 8002cac:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002cae:	683b      	ldr	r3, [r7, #0]
 8002cb0:	685b      	ldr	r3, [r3, #4]
 8002cb2:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002cb6:	2b00      	cmp	r3, #0
 8002cb8:	f000 80d8 	beq.w	8002e6c <HAL_GPIO_Init+0x328>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002cbc:	4b2c      	ldr	r3, [pc, #176]	@ (8002d70 <HAL_GPIO_Init+0x22c>)
 8002cbe:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8002cc2:	4a2b      	ldr	r2, [pc, #172]	@ (8002d70 <HAL_GPIO_Init+0x22c>)
 8002cc4:	f043 0302 	orr.w	r3, r3, #2
 8002cc8:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8002ccc:	4b28      	ldr	r3, [pc, #160]	@ (8002d70 <HAL_GPIO_Init+0x22c>)
 8002cce:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8002cd2:	f003 0302 	and.w	r3, r3, #2
 8002cd6:	60fb      	str	r3, [r7, #12]
 8002cd8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002cda:	4a26      	ldr	r2, [pc, #152]	@ (8002d74 <HAL_GPIO_Init+0x230>)
 8002cdc:	69fb      	ldr	r3, [r7, #28]
 8002cde:	089b      	lsrs	r3, r3, #2
 8002ce0:	3302      	adds	r3, #2
 8002ce2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002ce6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8002ce8:	69fb      	ldr	r3, [r7, #28]
 8002cea:	f003 0303 	and.w	r3, r3, #3
 8002cee:	009b      	lsls	r3, r3, #2
 8002cf0:	220f      	movs	r2, #15
 8002cf2:	fa02 f303 	lsl.w	r3, r2, r3
 8002cf6:	43db      	mvns	r3, r3
 8002cf8:	69ba      	ldr	r2, [r7, #24]
 8002cfa:	4013      	ands	r3, r2
 8002cfc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	4a1d      	ldr	r2, [pc, #116]	@ (8002d78 <HAL_GPIO_Init+0x234>)
 8002d02:	4293      	cmp	r3, r2
 8002d04:	d04a      	beq.n	8002d9c <HAL_GPIO_Init+0x258>
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	4a1c      	ldr	r2, [pc, #112]	@ (8002d7c <HAL_GPIO_Init+0x238>)
 8002d0a:	4293      	cmp	r3, r2
 8002d0c:	d02b      	beq.n	8002d66 <HAL_GPIO_Init+0x222>
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	4a1b      	ldr	r2, [pc, #108]	@ (8002d80 <HAL_GPIO_Init+0x23c>)
 8002d12:	4293      	cmp	r3, r2
 8002d14:	d025      	beq.n	8002d62 <HAL_GPIO_Init+0x21e>
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	4a1a      	ldr	r2, [pc, #104]	@ (8002d84 <HAL_GPIO_Init+0x240>)
 8002d1a:	4293      	cmp	r3, r2
 8002d1c:	d01f      	beq.n	8002d5e <HAL_GPIO_Init+0x21a>
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	4a19      	ldr	r2, [pc, #100]	@ (8002d88 <HAL_GPIO_Init+0x244>)
 8002d22:	4293      	cmp	r3, r2
 8002d24:	d019      	beq.n	8002d5a <HAL_GPIO_Init+0x216>
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	4a18      	ldr	r2, [pc, #96]	@ (8002d8c <HAL_GPIO_Init+0x248>)
 8002d2a:	4293      	cmp	r3, r2
 8002d2c:	d013      	beq.n	8002d56 <HAL_GPIO_Init+0x212>
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	4a17      	ldr	r2, [pc, #92]	@ (8002d90 <HAL_GPIO_Init+0x24c>)
 8002d32:	4293      	cmp	r3, r2
 8002d34:	d00d      	beq.n	8002d52 <HAL_GPIO_Init+0x20e>
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	4a16      	ldr	r2, [pc, #88]	@ (8002d94 <HAL_GPIO_Init+0x250>)
 8002d3a:	4293      	cmp	r3, r2
 8002d3c:	d007      	beq.n	8002d4e <HAL_GPIO_Init+0x20a>
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	4a15      	ldr	r2, [pc, #84]	@ (8002d98 <HAL_GPIO_Init+0x254>)
 8002d42:	4293      	cmp	r3, r2
 8002d44:	d101      	bne.n	8002d4a <HAL_GPIO_Init+0x206>
 8002d46:	2309      	movs	r3, #9
 8002d48:	e029      	b.n	8002d9e <HAL_GPIO_Init+0x25a>
 8002d4a:	230a      	movs	r3, #10
 8002d4c:	e027      	b.n	8002d9e <HAL_GPIO_Init+0x25a>
 8002d4e:	2307      	movs	r3, #7
 8002d50:	e025      	b.n	8002d9e <HAL_GPIO_Init+0x25a>
 8002d52:	2306      	movs	r3, #6
 8002d54:	e023      	b.n	8002d9e <HAL_GPIO_Init+0x25a>
 8002d56:	2305      	movs	r3, #5
 8002d58:	e021      	b.n	8002d9e <HAL_GPIO_Init+0x25a>
 8002d5a:	2304      	movs	r3, #4
 8002d5c:	e01f      	b.n	8002d9e <HAL_GPIO_Init+0x25a>
 8002d5e:	2303      	movs	r3, #3
 8002d60:	e01d      	b.n	8002d9e <HAL_GPIO_Init+0x25a>
 8002d62:	2302      	movs	r3, #2
 8002d64:	e01b      	b.n	8002d9e <HAL_GPIO_Init+0x25a>
 8002d66:	2301      	movs	r3, #1
 8002d68:	e019      	b.n	8002d9e <HAL_GPIO_Init+0x25a>
 8002d6a:	bf00      	nop
 8002d6c:	58000080 	.word	0x58000080
 8002d70:	58024400 	.word	0x58024400
 8002d74:	58000400 	.word	0x58000400
 8002d78:	58020000 	.word	0x58020000
 8002d7c:	58020400 	.word	0x58020400
 8002d80:	58020800 	.word	0x58020800
 8002d84:	58020c00 	.word	0x58020c00
 8002d88:	58021000 	.word	0x58021000
 8002d8c:	58021400 	.word	0x58021400
 8002d90:	58021800 	.word	0x58021800
 8002d94:	58021c00 	.word	0x58021c00
 8002d98:	58022400 	.word	0x58022400
 8002d9c:	2300      	movs	r3, #0
 8002d9e:	69fa      	ldr	r2, [r7, #28]
 8002da0:	f002 0203 	and.w	r2, r2, #3
 8002da4:	0092      	lsls	r2, r2, #2
 8002da6:	4093      	lsls	r3, r2
 8002da8:	69ba      	ldr	r2, [r7, #24]
 8002daa:	4313      	orrs	r3, r2
 8002dac:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002dae:	4938      	ldr	r1, [pc, #224]	@ (8002e90 <HAL_GPIO_Init+0x34c>)
 8002db0:	69fb      	ldr	r3, [r7, #28]
 8002db2:	089b      	lsrs	r3, r3, #2
 8002db4:	3302      	adds	r3, #2
 8002db6:	69ba      	ldr	r2, [r7, #24]
 8002db8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002dbc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002dc4:	693b      	ldr	r3, [r7, #16]
 8002dc6:	43db      	mvns	r3, r3
 8002dc8:	69ba      	ldr	r2, [r7, #24]
 8002dca:	4013      	ands	r3, r2
 8002dcc:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002dce:	683b      	ldr	r3, [r7, #0]
 8002dd0:	685b      	ldr	r3, [r3, #4]
 8002dd2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002dd6:	2b00      	cmp	r3, #0
 8002dd8:	d003      	beq.n	8002de2 <HAL_GPIO_Init+0x29e>
        {
          temp |= iocurrent;
 8002dda:	69ba      	ldr	r2, [r7, #24]
 8002ddc:	693b      	ldr	r3, [r7, #16]
 8002dde:	4313      	orrs	r3, r2
 8002de0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8002de2:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002de6:	69bb      	ldr	r3, [r7, #24]
 8002de8:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8002dea:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002dee:	685b      	ldr	r3, [r3, #4]
 8002df0:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002df2:	693b      	ldr	r3, [r7, #16]
 8002df4:	43db      	mvns	r3, r3
 8002df6:	69ba      	ldr	r2, [r7, #24]
 8002df8:	4013      	ands	r3, r2
 8002dfa:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002dfc:	683b      	ldr	r3, [r7, #0]
 8002dfe:	685b      	ldr	r3, [r3, #4]
 8002e00:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002e04:	2b00      	cmp	r3, #0
 8002e06:	d003      	beq.n	8002e10 <HAL_GPIO_Init+0x2cc>
        {
          temp |= iocurrent;
 8002e08:	69ba      	ldr	r2, [r7, #24]
 8002e0a:	693b      	ldr	r3, [r7, #16]
 8002e0c:	4313      	orrs	r3, r2
 8002e0e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8002e10:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002e14:	69bb      	ldr	r3, [r7, #24]
 8002e16:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8002e18:	697b      	ldr	r3, [r7, #20]
 8002e1a:	685b      	ldr	r3, [r3, #4]
 8002e1c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002e1e:	693b      	ldr	r3, [r7, #16]
 8002e20:	43db      	mvns	r3, r3
 8002e22:	69ba      	ldr	r2, [r7, #24]
 8002e24:	4013      	ands	r3, r2
 8002e26:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002e28:	683b      	ldr	r3, [r7, #0]
 8002e2a:	685b      	ldr	r3, [r3, #4]
 8002e2c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002e30:	2b00      	cmp	r3, #0
 8002e32:	d003      	beq.n	8002e3c <HAL_GPIO_Init+0x2f8>
        {
          temp |= iocurrent;
 8002e34:	69ba      	ldr	r2, [r7, #24]
 8002e36:	693b      	ldr	r3, [r7, #16]
 8002e38:	4313      	orrs	r3, r2
 8002e3a:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8002e3c:	697b      	ldr	r3, [r7, #20]
 8002e3e:	69ba      	ldr	r2, [r7, #24]
 8002e40:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8002e42:	697b      	ldr	r3, [r7, #20]
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002e48:	693b      	ldr	r3, [r7, #16]
 8002e4a:	43db      	mvns	r3, r3
 8002e4c:	69ba      	ldr	r2, [r7, #24]
 8002e4e:	4013      	ands	r3, r2
 8002e50:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002e52:	683b      	ldr	r3, [r7, #0]
 8002e54:	685b      	ldr	r3, [r3, #4]
 8002e56:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002e5a:	2b00      	cmp	r3, #0
 8002e5c:	d003      	beq.n	8002e66 <HAL_GPIO_Init+0x322>
        {
          temp |= iocurrent;
 8002e5e:	69ba      	ldr	r2, [r7, #24]
 8002e60:	693b      	ldr	r3, [r7, #16]
 8002e62:	4313      	orrs	r3, r2
 8002e64:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8002e66:	697b      	ldr	r3, [r7, #20]
 8002e68:	69ba      	ldr	r2, [r7, #24]
 8002e6a:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8002e6c:	69fb      	ldr	r3, [r7, #28]
 8002e6e:	3301      	adds	r3, #1
 8002e70:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8002e72:	683b      	ldr	r3, [r7, #0]
 8002e74:	681a      	ldr	r2, [r3, #0]
 8002e76:	69fb      	ldr	r3, [r7, #28]
 8002e78:	fa22 f303 	lsr.w	r3, r2, r3
 8002e7c:	2b00      	cmp	r3, #0
 8002e7e:	f47f ae6b 	bne.w	8002b58 <HAL_GPIO_Init+0x14>
  }
}
 8002e82:	bf00      	nop
 8002e84:	bf00      	nop
 8002e86:	3724      	adds	r7, #36	@ 0x24
 8002e88:	46bd      	mov	sp, r7
 8002e8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e8e:	4770      	bx	lr
 8002e90:	58000400 	.word	0x58000400

08002e94 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002e94:	b480      	push	{r7}
 8002e96:	b083      	sub	sp, #12
 8002e98:	af00      	add	r7, sp, #0
 8002e9a:	6078      	str	r0, [r7, #4]
 8002e9c:	460b      	mov	r3, r1
 8002e9e:	807b      	strh	r3, [r7, #2]
 8002ea0:	4613      	mov	r3, r2
 8002ea2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002ea4:	787b      	ldrb	r3, [r7, #1]
 8002ea6:	2b00      	cmp	r3, #0
 8002ea8:	d003      	beq.n	8002eb2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002eaa:	887a      	ldrh	r2, [r7, #2]
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8002eb0:	e003      	b.n	8002eba <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8002eb2:	887b      	ldrh	r3, [r7, #2]
 8002eb4:	041a      	lsls	r2, r3, #16
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	619a      	str	r2, [r3, #24]
}
 8002eba:	bf00      	nop
 8002ebc:	370c      	adds	r7, #12
 8002ebe:	46bd      	mov	sp, r7
 8002ec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ec4:	4770      	bx	lr
	...

08002ec8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002ec8:	b580      	push	{r7, lr}
 8002eca:	b082      	sub	sp, #8
 8002ecc:	af00      	add	r7, sp, #0
 8002ece:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	2b00      	cmp	r3, #0
 8002ed4:	d101      	bne.n	8002eda <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002ed6:	2301      	movs	r3, #1
 8002ed8:	e08b      	b.n	8002ff2 <HAL_I2C_Init+0x12a>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002ee0:	b2db      	uxtb	r3, r3
 8002ee2:	2b00      	cmp	r3, #0
 8002ee4:	d106      	bne.n	8002ef4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	2200      	movs	r2, #0
 8002eea:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8002eee:	6878      	ldr	r0, [r7, #4]
 8002ef0:	f7fe f9f4 	bl	80012dc <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	2224      	movs	r2, #36	@ 0x24
 8002ef8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	681a      	ldr	r2, [r3, #0]
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	f022 0201 	bic.w	r2, r2, #1
 8002f0a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	685a      	ldr	r2, [r3, #4]
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8002f18:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	689a      	ldr	r2, [r3, #8]
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002f28:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	68db      	ldr	r3, [r3, #12]
 8002f2e:	2b01      	cmp	r3, #1
 8002f30:	d107      	bne.n	8002f42 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	689a      	ldr	r2, [r3, #8]
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8002f3e:	609a      	str	r2, [r3, #8]
 8002f40:	e006      	b.n	8002f50 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	689a      	ldr	r2, [r3, #8]
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8002f4e:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	68db      	ldr	r3, [r3, #12]
 8002f54:	2b02      	cmp	r3, #2
 8002f56:	d108      	bne.n	8002f6a <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	685a      	ldr	r2, [r3, #4]
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002f66:	605a      	str	r2, [r3, #4]
 8002f68:	e007      	b.n	8002f7a <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	685a      	ldr	r2, [r3, #4]
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002f78:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	6859      	ldr	r1, [r3, #4]
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	681a      	ldr	r2, [r3, #0]
 8002f84:	4b1d      	ldr	r3, [pc, #116]	@ (8002ffc <HAL_I2C_Init+0x134>)
 8002f86:	430b      	orrs	r3, r1
 8002f88:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	68da      	ldr	r2, [r3, #12]
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002f98:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	691a      	ldr	r2, [r3, #16]
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	695b      	ldr	r3, [r3, #20]
 8002fa2:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	699b      	ldr	r3, [r3, #24]
 8002faa:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	430a      	orrs	r2, r1
 8002fb2:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	69d9      	ldr	r1, [r3, #28]
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	6a1a      	ldr	r2, [r3, #32]
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	430a      	orrs	r2, r1
 8002fc2:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	681a      	ldr	r2, [r3, #0]
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	f042 0201 	orr.w	r2, r2, #1
 8002fd2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	2200      	movs	r2, #0
 8002fd8:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	2220      	movs	r2, #32
 8002fde:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	2200      	movs	r2, #0
 8002fe6:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	2200      	movs	r2, #0
 8002fec:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8002ff0:	2300      	movs	r3, #0
}
 8002ff2:	4618      	mov	r0, r3
 8002ff4:	3708      	adds	r7, #8
 8002ff6:	46bd      	mov	sp, r7
 8002ff8:	bd80      	pop	{r7, pc}
 8002ffa:	bf00      	nop
 8002ffc:	02008000 	.word	0x02008000

08003000 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8003000:	b480      	push	{r7}
 8003002:	b083      	sub	sp, #12
 8003004:	af00      	add	r7, sp, #0
 8003006:	6078      	str	r0, [r7, #4]
 8003008:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003010:	b2db      	uxtb	r3, r3
 8003012:	2b20      	cmp	r3, #32
 8003014:	d138      	bne.n	8003088 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800301c:	2b01      	cmp	r3, #1
 800301e:	d101      	bne.n	8003024 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8003020:	2302      	movs	r3, #2
 8003022:	e032      	b.n	800308a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	2201      	movs	r2, #1
 8003028:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	2224      	movs	r2, #36	@ 0x24
 8003030:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	681a      	ldr	r2, [r3, #0]
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	f022 0201 	bic.w	r2, r2, #1
 8003042:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	681a      	ldr	r2, [r3, #0]
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8003052:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	6819      	ldr	r1, [r3, #0]
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	683a      	ldr	r2, [r7, #0]
 8003060:	430a      	orrs	r2, r1
 8003062:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	681a      	ldr	r2, [r3, #0]
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	f042 0201 	orr.w	r2, r2, #1
 8003072:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	2220      	movs	r2, #32
 8003078:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	2200      	movs	r2, #0
 8003080:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8003084:	2300      	movs	r3, #0
 8003086:	e000      	b.n	800308a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8003088:	2302      	movs	r3, #2
  }
}
 800308a:	4618      	mov	r0, r3
 800308c:	370c      	adds	r7, #12
 800308e:	46bd      	mov	sp, r7
 8003090:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003094:	4770      	bx	lr

08003096 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8003096:	b480      	push	{r7}
 8003098:	b085      	sub	sp, #20
 800309a:	af00      	add	r7, sp, #0
 800309c:	6078      	str	r0, [r7, #4]
 800309e:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80030a6:	b2db      	uxtb	r3, r3
 80030a8:	2b20      	cmp	r3, #32
 80030aa:	d139      	bne.n	8003120 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80030b2:	2b01      	cmp	r3, #1
 80030b4:	d101      	bne.n	80030ba <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80030b6:	2302      	movs	r3, #2
 80030b8:	e033      	b.n	8003122 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	2201      	movs	r2, #1
 80030be:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	2224      	movs	r2, #36	@ 0x24
 80030c6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	681a      	ldr	r2, [r3, #0]
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	f022 0201 	bic.w	r2, r2, #1
 80030d8:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80030e2:	68fb      	ldr	r3, [r7, #12]
 80030e4:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 80030e8:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80030ea:	683b      	ldr	r3, [r7, #0]
 80030ec:	021b      	lsls	r3, r3, #8
 80030ee:	68fa      	ldr	r2, [r7, #12]
 80030f0:	4313      	orrs	r3, r2
 80030f2:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	68fa      	ldr	r2, [r7, #12]
 80030fa:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	681a      	ldr	r2, [r3, #0]
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	f042 0201 	orr.w	r2, r2, #1
 800310a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	2220      	movs	r2, #32
 8003110:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	2200      	movs	r2, #0
 8003118:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800311c:	2300      	movs	r3, #0
 800311e:	e000      	b.n	8003122 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8003120:	2302      	movs	r3, #2
  }
}
 8003122:	4618      	mov	r0, r3
 8003124:	3714      	adds	r7, #20
 8003126:	46bd      	mov	sp, r7
 8003128:	f85d 7b04 	ldr.w	r7, [sp], #4
 800312c:	4770      	bx	lr
	...

08003130 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8003130:	b580      	push	{r7, lr}
 8003132:	b084      	sub	sp, #16
 8003134:	af00      	add	r7, sp, #0
 8003136:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 8003138:	4b29      	ldr	r3, [pc, #164]	@ (80031e0 <HAL_PWREx_ConfigSupply+0xb0>)
 800313a:	68db      	ldr	r3, [r3, #12]
 800313c:	f003 0307 	and.w	r3, r3, #7
 8003140:	2b06      	cmp	r3, #6
 8003142:	d00a      	beq.n	800315a <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8003144:	4b26      	ldr	r3, [pc, #152]	@ (80031e0 <HAL_PWREx_ConfigSupply+0xb0>)
 8003146:	68db      	ldr	r3, [r3, #12]
 8003148:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800314c:	687a      	ldr	r2, [r7, #4]
 800314e:	429a      	cmp	r2, r3
 8003150:	d001      	beq.n	8003156 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8003152:	2301      	movs	r3, #1
 8003154:	e03f      	b.n	80031d6 <HAL_PWREx_ConfigSupply+0xa6>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8003156:	2300      	movs	r3, #0
 8003158:	e03d      	b.n	80031d6 <HAL_PWREx_ConfigSupply+0xa6>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 800315a:	4b21      	ldr	r3, [pc, #132]	@ (80031e0 <HAL_PWREx_ConfigSupply+0xb0>)
 800315c:	68db      	ldr	r3, [r3, #12]
 800315e:	f023 023f 	bic.w	r2, r3, #63	@ 0x3f
 8003162:	491f      	ldr	r1, [pc, #124]	@ (80031e0 <HAL_PWREx_ConfigSupply+0xb0>)
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	4313      	orrs	r3, r2
 8003168:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 800316a:	f7fe fe0f 	bl	8001d8c <HAL_GetTick>
 800316e:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8003170:	e009      	b.n	8003186 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8003172:	f7fe fe0b 	bl	8001d8c <HAL_GetTick>
 8003176:	4602      	mov	r2, r0
 8003178:	68fb      	ldr	r3, [r7, #12]
 800317a:	1ad3      	subs	r3, r2, r3
 800317c:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8003180:	d901      	bls.n	8003186 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8003182:	2301      	movs	r3, #1
 8003184:	e027      	b.n	80031d6 <HAL_PWREx_ConfigSupply+0xa6>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8003186:	4b16      	ldr	r3, [pc, #88]	@ (80031e0 <HAL_PWREx_ConfigSupply+0xb0>)
 8003188:	685b      	ldr	r3, [r3, #4]
 800318a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800318e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003192:	d1ee      	bne.n	8003172 <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	2b1e      	cmp	r3, #30
 8003198:	d008      	beq.n	80031ac <HAL_PWREx_ConfigSupply+0x7c>
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	2b2e      	cmp	r3, #46	@ 0x2e
 800319e:	d005      	beq.n	80031ac <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	2b1d      	cmp	r3, #29
 80031a4:	d002      	beq.n	80031ac <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	2b2d      	cmp	r3, #45	@ 0x2d
 80031aa:	d113      	bne.n	80031d4 <HAL_PWREx_ConfigSupply+0xa4>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 80031ac:	f7fe fdee 	bl	8001d8c <HAL_GetTick>
 80031b0:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 80031b2:	e009      	b.n	80031c8 <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 80031b4:	f7fe fdea 	bl	8001d8c <HAL_GetTick>
 80031b8:	4602      	mov	r2, r0
 80031ba:	68fb      	ldr	r3, [r7, #12]
 80031bc:	1ad3      	subs	r3, r2, r3
 80031be:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80031c2:	d901      	bls.n	80031c8 <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 80031c4:	2301      	movs	r3, #1
 80031c6:	e006      	b.n	80031d6 <HAL_PWREx_ConfigSupply+0xa6>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 80031c8:	4b05      	ldr	r3, [pc, #20]	@ (80031e0 <HAL_PWREx_ConfigSupply+0xb0>)
 80031ca:	68db      	ldr	r3, [r3, #12]
 80031cc:	f003 0311 	and.w	r3, r3, #17
 80031d0:	2b11      	cmp	r3, #17
 80031d2:	d1ef      	bne.n	80031b4 <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 80031d4:	2300      	movs	r3, #0
}
 80031d6:	4618      	mov	r0, r3
 80031d8:	3710      	adds	r7, #16
 80031da:	46bd      	mov	sp, r7
 80031dc:	bd80      	pop	{r7, pc}
 80031de:	bf00      	nop
 80031e0:	58024800 	.word	0x58024800

080031e4 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80031e4:	b580      	push	{r7, lr}
 80031e6:	b08c      	sub	sp, #48	@ 0x30
 80031e8:	af00      	add	r7, sp, #0
 80031ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	2b00      	cmp	r3, #0
 80031f0:	d101      	bne.n	80031f6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80031f2:	2301      	movs	r3, #1
 80031f4:	e3c8      	b.n	8003988 <HAL_RCC_OscConfig+0x7a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	f003 0301 	and.w	r3, r3, #1
 80031fe:	2b00      	cmp	r3, #0
 8003200:	f000 8087 	beq.w	8003312 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003204:	4b88      	ldr	r3, [pc, #544]	@ (8003428 <HAL_RCC_OscConfig+0x244>)
 8003206:	691b      	ldr	r3, [r3, #16]
 8003208:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800320c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800320e:	4b86      	ldr	r3, [pc, #536]	@ (8003428 <HAL_RCC_OscConfig+0x244>)
 8003210:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003212:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8003214:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003216:	2b10      	cmp	r3, #16
 8003218:	d007      	beq.n	800322a <HAL_RCC_OscConfig+0x46>
 800321a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800321c:	2b18      	cmp	r3, #24
 800321e:	d110      	bne.n	8003242 <HAL_RCC_OscConfig+0x5e>
 8003220:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003222:	f003 0303 	and.w	r3, r3, #3
 8003226:	2b02      	cmp	r3, #2
 8003228:	d10b      	bne.n	8003242 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800322a:	4b7f      	ldr	r3, [pc, #508]	@ (8003428 <HAL_RCC_OscConfig+0x244>)
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003232:	2b00      	cmp	r3, #0
 8003234:	d06c      	beq.n	8003310 <HAL_RCC_OscConfig+0x12c>
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	685b      	ldr	r3, [r3, #4]
 800323a:	2b00      	cmp	r3, #0
 800323c:	d168      	bne.n	8003310 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800323e:	2301      	movs	r3, #1
 8003240:	e3a2      	b.n	8003988 <HAL_RCC_OscConfig+0x7a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	685b      	ldr	r3, [r3, #4]
 8003246:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800324a:	d106      	bne.n	800325a <HAL_RCC_OscConfig+0x76>
 800324c:	4b76      	ldr	r3, [pc, #472]	@ (8003428 <HAL_RCC_OscConfig+0x244>)
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	4a75      	ldr	r2, [pc, #468]	@ (8003428 <HAL_RCC_OscConfig+0x244>)
 8003252:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003256:	6013      	str	r3, [r2, #0]
 8003258:	e02e      	b.n	80032b8 <HAL_RCC_OscConfig+0xd4>
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	685b      	ldr	r3, [r3, #4]
 800325e:	2b00      	cmp	r3, #0
 8003260:	d10c      	bne.n	800327c <HAL_RCC_OscConfig+0x98>
 8003262:	4b71      	ldr	r3, [pc, #452]	@ (8003428 <HAL_RCC_OscConfig+0x244>)
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	4a70      	ldr	r2, [pc, #448]	@ (8003428 <HAL_RCC_OscConfig+0x244>)
 8003268:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800326c:	6013      	str	r3, [r2, #0]
 800326e:	4b6e      	ldr	r3, [pc, #440]	@ (8003428 <HAL_RCC_OscConfig+0x244>)
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	4a6d      	ldr	r2, [pc, #436]	@ (8003428 <HAL_RCC_OscConfig+0x244>)
 8003274:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003278:	6013      	str	r3, [r2, #0]
 800327a:	e01d      	b.n	80032b8 <HAL_RCC_OscConfig+0xd4>
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	685b      	ldr	r3, [r3, #4]
 8003280:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003284:	d10c      	bne.n	80032a0 <HAL_RCC_OscConfig+0xbc>
 8003286:	4b68      	ldr	r3, [pc, #416]	@ (8003428 <HAL_RCC_OscConfig+0x244>)
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	4a67      	ldr	r2, [pc, #412]	@ (8003428 <HAL_RCC_OscConfig+0x244>)
 800328c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003290:	6013      	str	r3, [r2, #0]
 8003292:	4b65      	ldr	r3, [pc, #404]	@ (8003428 <HAL_RCC_OscConfig+0x244>)
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	4a64      	ldr	r2, [pc, #400]	@ (8003428 <HAL_RCC_OscConfig+0x244>)
 8003298:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800329c:	6013      	str	r3, [r2, #0]
 800329e:	e00b      	b.n	80032b8 <HAL_RCC_OscConfig+0xd4>
 80032a0:	4b61      	ldr	r3, [pc, #388]	@ (8003428 <HAL_RCC_OscConfig+0x244>)
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	4a60      	ldr	r2, [pc, #384]	@ (8003428 <HAL_RCC_OscConfig+0x244>)
 80032a6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80032aa:	6013      	str	r3, [r2, #0]
 80032ac:	4b5e      	ldr	r3, [pc, #376]	@ (8003428 <HAL_RCC_OscConfig+0x244>)
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	4a5d      	ldr	r2, [pc, #372]	@ (8003428 <HAL_RCC_OscConfig+0x244>)
 80032b2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80032b6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	685b      	ldr	r3, [r3, #4]
 80032bc:	2b00      	cmp	r3, #0
 80032be:	d013      	beq.n	80032e8 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80032c0:	f7fe fd64 	bl	8001d8c <HAL_GetTick>
 80032c4:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80032c6:	e008      	b.n	80032da <HAL_RCC_OscConfig+0xf6>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80032c8:	f7fe fd60 	bl	8001d8c <HAL_GetTick>
 80032cc:	4602      	mov	r2, r0
 80032ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80032d0:	1ad3      	subs	r3, r2, r3
 80032d2:	2b64      	cmp	r3, #100	@ 0x64
 80032d4:	d901      	bls.n	80032da <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80032d6:	2303      	movs	r3, #3
 80032d8:	e356      	b.n	8003988 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80032da:	4b53      	ldr	r3, [pc, #332]	@ (8003428 <HAL_RCC_OscConfig+0x244>)
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80032e2:	2b00      	cmp	r3, #0
 80032e4:	d0f0      	beq.n	80032c8 <HAL_RCC_OscConfig+0xe4>
 80032e6:	e014      	b.n	8003312 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80032e8:	f7fe fd50 	bl	8001d8c <HAL_GetTick>
 80032ec:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80032ee:	e008      	b.n	8003302 <HAL_RCC_OscConfig+0x11e>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80032f0:	f7fe fd4c 	bl	8001d8c <HAL_GetTick>
 80032f4:	4602      	mov	r2, r0
 80032f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80032f8:	1ad3      	subs	r3, r2, r3
 80032fa:	2b64      	cmp	r3, #100	@ 0x64
 80032fc:	d901      	bls.n	8003302 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80032fe:	2303      	movs	r3, #3
 8003300:	e342      	b.n	8003988 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8003302:	4b49      	ldr	r3, [pc, #292]	@ (8003428 <HAL_RCC_OscConfig+0x244>)
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800330a:	2b00      	cmp	r3, #0
 800330c:	d1f0      	bne.n	80032f0 <HAL_RCC_OscConfig+0x10c>
 800330e:	e000      	b.n	8003312 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003310:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	f003 0302 	and.w	r3, r3, #2
 800331a:	2b00      	cmp	r3, #0
 800331c:	f000 808c 	beq.w	8003438 <HAL_RCC_OscConfig+0x254>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003320:	4b41      	ldr	r3, [pc, #260]	@ (8003428 <HAL_RCC_OscConfig+0x244>)
 8003322:	691b      	ldr	r3, [r3, #16]
 8003324:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8003328:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800332a:	4b3f      	ldr	r3, [pc, #252]	@ (8003428 <HAL_RCC_OscConfig+0x244>)
 800332c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800332e:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8003330:	6a3b      	ldr	r3, [r7, #32]
 8003332:	2b00      	cmp	r3, #0
 8003334:	d007      	beq.n	8003346 <HAL_RCC_OscConfig+0x162>
 8003336:	6a3b      	ldr	r3, [r7, #32]
 8003338:	2b18      	cmp	r3, #24
 800333a:	d137      	bne.n	80033ac <HAL_RCC_OscConfig+0x1c8>
 800333c:	69fb      	ldr	r3, [r7, #28]
 800333e:	f003 0303 	and.w	r3, r3, #3
 8003342:	2b00      	cmp	r3, #0
 8003344:	d132      	bne.n	80033ac <HAL_RCC_OscConfig+0x1c8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003346:	4b38      	ldr	r3, [pc, #224]	@ (8003428 <HAL_RCC_OscConfig+0x244>)
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	f003 0304 	and.w	r3, r3, #4
 800334e:	2b00      	cmp	r3, #0
 8003350:	d005      	beq.n	800335e <HAL_RCC_OscConfig+0x17a>
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	68db      	ldr	r3, [r3, #12]
 8003356:	2b00      	cmp	r3, #0
 8003358:	d101      	bne.n	800335e <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 800335a:	2301      	movs	r3, #1
 800335c:	e314      	b.n	8003988 <HAL_RCC_OscConfig+0x7a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800335e:	4b32      	ldr	r3, [pc, #200]	@ (8003428 <HAL_RCC_OscConfig+0x244>)
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	f023 0219 	bic.w	r2, r3, #25
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	68db      	ldr	r3, [r3, #12]
 800336a:	492f      	ldr	r1, [pc, #188]	@ (8003428 <HAL_RCC_OscConfig+0x244>)
 800336c:	4313      	orrs	r3, r2
 800336e:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003370:	f7fe fd0c 	bl	8001d8c <HAL_GetTick>
 8003374:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003376:	e008      	b.n	800338a <HAL_RCC_OscConfig+0x1a6>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003378:	f7fe fd08 	bl	8001d8c <HAL_GetTick>
 800337c:	4602      	mov	r2, r0
 800337e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003380:	1ad3      	subs	r3, r2, r3
 8003382:	2b02      	cmp	r3, #2
 8003384:	d901      	bls.n	800338a <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 8003386:	2303      	movs	r3, #3
 8003388:	e2fe      	b.n	8003988 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800338a:	4b27      	ldr	r3, [pc, #156]	@ (8003428 <HAL_RCC_OscConfig+0x244>)
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	f003 0304 	and.w	r3, r3, #4
 8003392:	2b00      	cmp	r3, #0
 8003394:	d0f0      	beq.n	8003378 <HAL_RCC_OscConfig+0x194>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003396:	4b24      	ldr	r3, [pc, #144]	@ (8003428 <HAL_RCC_OscConfig+0x244>)
 8003398:	685b      	ldr	r3, [r3, #4]
 800339a:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	691b      	ldr	r3, [r3, #16]
 80033a2:	061b      	lsls	r3, r3, #24
 80033a4:	4920      	ldr	r1, [pc, #128]	@ (8003428 <HAL_RCC_OscConfig+0x244>)
 80033a6:	4313      	orrs	r3, r2
 80033a8:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80033aa:	e045      	b.n	8003438 <HAL_RCC_OscConfig+0x254>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	68db      	ldr	r3, [r3, #12]
 80033b0:	2b00      	cmp	r3, #0
 80033b2:	d026      	beq.n	8003402 <HAL_RCC_OscConfig+0x21e>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80033b4:	4b1c      	ldr	r3, [pc, #112]	@ (8003428 <HAL_RCC_OscConfig+0x244>)
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	f023 0219 	bic.w	r2, r3, #25
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	68db      	ldr	r3, [r3, #12]
 80033c0:	4919      	ldr	r1, [pc, #100]	@ (8003428 <HAL_RCC_OscConfig+0x244>)
 80033c2:	4313      	orrs	r3, r2
 80033c4:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80033c6:	f7fe fce1 	bl	8001d8c <HAL_GetTick>
 80033ca:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80033cc:	e008      	b.n	80033e0 <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80033ce:	f7fe fcdd 	bl	8001d8c <HAL_GetTick>
 80033d2:	4602      	mov	r2, r0
 80033d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80033d6:	1ad3      	subs	r3, r2, r3
 80033d8:	2b02      	cmp	r3, #2
 80033da:	d901      	bls.n	80033e0 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 80033dc:	2303      	movs	r3, #3
 80033de:	e2d3      	b.n	8003988 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80033e0:	4b11      	ldr	r3, [pc, #68]	@ (8003428 <HAL_RCC_OscConfig+0x244>)
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	f003 0304 	and.w	r3, r3, #4
 80033e8:	2b00      	cmp	r3, #0
 80033ea:	d0f0      	beq.n	80033ce <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80033ec:	4b0e      	ldr	r3, [pc, #56]	@ (8003428 <HAL_RCC_OscConfig+0x244>)
 80033ee:	685b      	ldr	r3, [r3, #4]
 80033f0:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	691b      	ldr	r3, [r3, #16]
 80033f8:	061b      	lsls	r3, r3, #24
 80033fa:	490b      	ldr	r1, [pc, #44]	@ (8003428 <HAL_RCC_OscConfig+0x244>)
 80033fc:	4313      	orrs	r3, r2
 80033fe:	604b      	str	r3, [r1, #4]
 8003400:	e01a      	b.n	8003438 <HAL_RCC_OscConfig+0x254>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003402:	4b09      	ldr	r3, [pc, #36]	@ (8003428 <HAL_RCC_OscConfig+0x244>)
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	4a08      	ldr	r2, [pc, #32]	@ (8003428 <HAL_RCC_OscConfig+0x244>)
 8003408:	f023 0301 	bic.w	r3, r3, #1
 800340c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800340e:	f7fe fcbd 	bl	8001d8c <HAL_GetTick>
 8003412:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8003414:	e00a      	b.n	800342c <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003416:	f7fe fcb9 	bl	8001d8c <HAL_GetTick>
 800341a:	4602      	mov	r2, r0
 800341c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800341e:	1ad3      	subs	r3, r2, r3
 8003420:	2b02      	cmp	r3, #2
 8003422:	d903      	bls.n	800342c <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 8003424:	2303      	movs	r3, #3
 8003426:	e2af      	b.n	8003988 <HAL_RCC_OscConfig+0x7a4>
 8003428:	58024400 	.word	0x58024400
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800342c:	4b96      	ldr	r3, [pc, #600]	@ (8003688 <HAL_RCC_OscConfig+0x4a4>)
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	f003 0304 	and.w	r3, r3, #4
 8003434:	2b00      	cmp	r3, #0
 8003436:	d1ee      	bne.n	8003416 <HAL_RCC_OscConfig+0x232>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	f003 0310 	and.w	r3, r3, #16
 8003440:	2b00      	cmp	r3, #0
 8003442:	d06a      	beq.n	800351a <HAL_RCC_OscConfig+0x336>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003444:	4b90      	ldr	r3, [pc, #576]	@ (8003688 <HAL_RCC_OscConfig+0x4a4>)
 8003446:	691b      	ldr	r3, [r3, #16]
 8003448:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800344c:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800344e:	4b8e      	ldr	r3, [pc, #568]	@ (8003688 <HAL_RCC_OscConfig+0x4a4>)
 8003450:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003452:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8003454:	69bb      	ldr	r3, [r7, #24]
 8003456:	2b08      	cmp	r3, #8
 8003458:	d007      	beq.n	800346a <HAL_RCC_OscConfig+0x286>
 800345a:	69bb      	ldr	r3, [r7, #24]
 800345c:	2b18      	cmp	r3, #24
 800345e:	d11b      	bne.n	8003498 <HAL_RCC_OscConfig+0x2b4>
 8003460:	697b      	ldr	r3, [r7, #20]
 8003462:	f003 0303 	and.w	r3, r3, #3
 8003466:	2b01      	cmp	r3, #1
 8003468:	d116      	bne.n	8003498 <HAL_RCC_OscConfig+0x2b4>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800346a:	4b87      	ldr	r3, [pc, #540]	@ (8003688 <HAL_RCC_OscConfig+0x4a4>)
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003472:	2b00      	cmp	r3, #0
 8003474:	d005      	beq.n	8003482 <HAL_RCC_OscConfig+0x29e>
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	69db      	ldr	r3, [r3, #28]
 800347a:	2b80      	cmp	r3, #128	@ 0x80
 800347c:	d001      	beq.n	8003482 <HAL_RCC_OscConfig+0x29e>
      {
        return HAL_ERROR;
 800347e:	2301      	movs	r3, #1
 8003480:	e282      	b.n	8003988 <HAL_RCC_OscConfig+0x7a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8003482:	4b81      	ldr	r3, [pc, #516]	@ (8003688 <HAL_RCC_OscConfig+0x4a4>)
 8003484:	68db      	ldr	r3, [r3, #12]
 8003486:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	6a1b      	ldr	r3, [r3, #32]
 800348e:	061b      	lsls	r3, r3, #24
 8003490:	497d      	ldr	r1, [pc, #500]	@ (8003688 <HAL_RCC_OscConfig+0x4a4>)
 8003492:	4313      	orrs	r3, r2
 8003494:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8003496:	e040      	b.n	800351a <HAL_RCC_OscConfig+0x336>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	69db      	ldr	r3, [r3, #28]
 800349c:	2b00      	cmp	r3, #0
 800349e:	d023      	beq.n	80034e8 <HAL_RCC_OscConfig+0x304>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 80034a0:	4b79      	ldr	r3, [pc, #484]	@ (8003688 <HAL_RCC_OscConfig+0x4a4>)
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	4a78      	ldr	r2, [pc, #480]	@ (8003688 <HAL_RCC_OscConfig+0x4a4>)
 80034a6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80034aa:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80034ac:	f7fe fc6e 	bl	8001d8c <HAL_GetTick>
 80034b0:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80034b2:	e008      	b.n	80034c6 <HAL_RCC_OscConfig+0x2e2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 80034b4:	f7fe fc6a 	bl	8001d8c <HAL_GetTick>
 80034b8:	4602      	mov	r2, r0
 80034ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80034bc:	1ad3      	subs	r3, r2, r3
 80034be:	2b02      	cmp	r3, #2
 80034c0:	d901      	bls.n	80034c6 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80034c2:	2303      	movs	r3, #3
 80034c4:	e260      	b.n	8003988 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80034c6:	4b70      	ldr	r3, [pc, #448]	@ (8003688 <HAL_RCC_OscConfig+0x4a4>)
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80034ce:	2b00      	cmp	r3, #0
 80034d0:	d0f0      	beq.n	80034b4 <HAL_RCC_OscConfig+0x2d0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80034d2:	4b6d      	ldr	r3, [pc, #436]	@ (8003688 <HAL_RCC_OscConfig+0x4a4>)
 80034d4:	68db      	ldr	r3, [r3, #12]
 80034d6:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	6a1b      	ldr	r3, [r3, #32]
 80034de:	061b      	lsls	r3, r3, #24
 80034e0:	4969      	ldr	r1, [pc, #420]	@ (8003688 <HAL_RCC_OscConfig+0x4a4>)
 80034e2:	4313      	orrs	r3, r2
 80034e4:	60cb      	str	r3, [r1, #12]
 80034e6:	e018      	b.n	800351a <HAL_RCC_OscConfig+0x336>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 80034e8:	4b67      	ldr	r3, [pc, #412]	@ (8003688 <HAL_RCC_OscConfig+0x4a4>)
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	4a66      	ldr	r2, [pc, #408]	@ (8003688 <HAL_RCC_OscConfig+0x4a4>)
 80034ee:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80034f2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80034f4:	f7fe fc4a 	bl	8001d8c <HAL_GetTick>
 80034f8:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80034fa:	e008      	b.n	800350e <HAL_RCC_OscConfig+0x32a>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 80034fc:	f7fe fc46 	bl	8001d8c <HAL_GetTick>
 8003500:	4602      	mov	r2, r0
 8003502:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003504:	1ad3      	subs	r3, r2, r3
 8003506:	2b02      	cmp	r3, #2
 8003508:	d901      	bls.n	800350e <HAL_RCC_OscConfig+0x32a>
          {
            return HAL_TIMEOUT;
 800350a:	2303      	movs	r3, #3
 800350c:	e23c      	b.n	8003988 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800350e:	4b5e      	ldr	r3, [pc, #376]	@ (8003688 <HAL_RCC_OscConfig+0x4a4>)
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003516:	2b00      	cmp	r3, #0
 8003518:	d1f0      	bne.n	80034fc <HAL_RCC_OscConfig+0x318>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	f003 0308 	and.w	r3, r3, #8
 8003522:	2b00      	cmp	r3, #0
 8003524:	d036      	beq.n	8003594 <HAL_RCC_OscConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	695b      	ldr	r3, [r3, #20]
 800352a:	2b00      	cmp	r3, #0
 800352c:	d019      	beq.n	8003562 <HAL_RCC_OscConfig+0x37e>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800352e:	4b56      	ldr	r3, [pc, #344]	@ (8003688 <HAL_RCC_OscConfig+0x4a4>)
 8003530:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003532:	4a55      	ldr	r2, [pc, #340]	@ (8003688 <HAL_RCC_OscConfig+0x4a4>)
 8003534:	f043 0301 	orr.w	r3, r3, #1
 8003538:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800353a:	f7fe fc27 	bl	8001d8c <HAL_GetTick>
 800353e:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8003540:	e008      	b.n	8003554 <HAL_RCC_OscConfig+0x370>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003542:	f7fe fc23 	bl	8001d8c <HAL_GetTick>
 8003546:	4602      	mov	r2, r0
 8003548:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800354a:	1ad3      	subs	r3, r2, r3
 800354c:	2b02      	cmp	r3, #2
 800354e:	d901      	bls.n	8003554 <HAL_RCC_OscConfig+0x370>
        {
          return HAL_TIMEOUT;
 8003550:	2303      	movs	r3, #3
 8003552:	e219      	b.n	8003988 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8003554:	4b4c      	ldr	r3, [pc, #304]	@ (8003688 <HAL_RCC_OscConfig+0x4a4>)
 8003556:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003558:	f003 0302 	and.w	r3, r3, #2
 800355c:	2b00      	cmp	r3, #0
 800355e:	d0f0      	beq.n	8003542 <HAL_RCC_OscConfig+0x35e>
 8003560:	e018      	b.n	8003594 <HAL_RCC_OscConfig+0x3b0>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003562:	4b49      	ldr	r3, [pc, #292]	@ (8003688 <HAL_RCC_OscConfig+0x4a4>)
 8003564:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003566:	4a48      	ldr	r2, [pc, #288]	@ (8003688 <HAL_RCC_OscConfig+0x4a4>)
 8003568:	f023 0301 	bic.w	r3, r3, #1
 800356c:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800356e:	f7fe fc0d 	bl	8001d8c <HAL_GetTick>
 8003572:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8003574:	e008      	b.n	8003588 <HAL_RCC_OscConfig+0x3a4>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003576:	f7fe fc09 	bl	8001d8c <HAL_GetTick>
 800357a:	4602      	mov	r2, r0
 800357c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800357e:	1ad3      	subs	r3, r2, r3
 8003580:	2b02      	cmp	r3, #2
 8003582:	d901      	bls.n	8003588 <HAL_RCC_OscConfig+0x3a4>
        {
          return HAL_TIMEOUT;
 8003584:	2303      	movs	r3, #3
 8003586:	e1ff      	b.n	8003988 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8003588:	4b3f      	ldr	r3, [pc, #252]	@ (8003688 <HAL_RCC_OscConfig+0x4a4>)
 800358a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800358c:	f003 0302 	and.w	r3, r3, #2
 8003590:	2b00      	cmp	r3, #0
 8003592:	d1f0      	bne.n	8003576 <HAL_RCC_OscConfig+0x392>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	f003 0320 	and.w	r3, r3, #32
 800359c:	2b00      	cmp	r3, #0
 800359e:	d036      	beq.n	800360e <HAL_RCC_OscConfig+0x42a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	699b      	ldr	r3, [r3, #24]
 80035a4:	2b00      	cmp	r3, #0
 80035a6:	d019      	beq.n	80035dc <HAL_RCC_OscConfig+0x3f8>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80035a8:	4b37      	ldr	r3, [pc, #220]	@ (8003688 <HAL_RCC_OscConfig+0x4a4>)
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	4a36      	ldr	r2, [pc, #216]	@ (8003688 <HAL_RCC_OscConfig+0x4a4>)
 80035ae:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80035b2:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80035b4:	f7fe fbea 	bl	8001d8c <HAL_GetTick>
 80035b8:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80035ba:	e008      	b.n	80035ce <HAL_RCC_OscConfig+0x3ea>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80035bc:	f7fe fbe6 	bl	8001d8c <HAL_GetTick>
 80035c0:	4602      	mov	r2, r0
 80035c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80035c4:	1ad3      	subs	r3, r2, r3
 80035c6:	2b02      	cmp	r3, #2
 80035c8:	d901      	bls.n	80035ce <HAL_RCC_OscConfig+0x3ea>
        {
          return HAL_TIMEOUT;
 80035ca:	2303      	movs	r3, #3
 80035cc:	e1dc      	b.n	8003988 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80035ce:	4b2e      	ldr	r3, [pc, #184]	@ (8003688 <HAL_RCC_OscConfig+0x4a4>)
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80035d6:	2b00      	cmp	r3, #0
 80035d8:	d0f0      	beq.n	80035bc <HAL_RCC_OscConfig+0x3d8>
 80035da:	e018      	b.n	800360e <HAL_RCC_OscConfig+0x42a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80035dc:	4b2a      	ldr	r3, [pc, #168]	@ (8003688 <HAL_RCC_OscConfig+0x4a4>)
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	4a29      	ldr	r2, [pc, #164]	@ (8003688 <HAL_RCC_OscConfig+0x4a4>)
 80035e2:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80035e6:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80035e8:	f7fe fbd0 	bl	8001d8c <HAL_GetTick>
 80035ec:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80035ee:	e008      	b.n	8003602 <HAL_RCC_OscConfig+0x41e>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80035f0:	f7fe fbcc 	bl	8001d8c <HAL_GetTick>
 80035f4:	4602      	mov	r2, r0
 80035f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80035f8:	1ad3      	subs	r3, r2, r3
 80035fa:	2b02      	cmp	r3, #2
 80035fc:	d901      	bls.n	8003602 <HAL_RCC_OscConfig+0x41e>
        {
          return HAL_TIMEOUT;
 80035fe:	2303      	movs	r3, #3
 8003600:	e1c2      	b.n	8003988 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8003602:	4b21      	ldr	r3, [pc, #132]	@ (8003688 <HAL_RCC_OscConfig+0x4a4>)
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800360a:	2b00      	cmp	r3, #0
 800360c:	d1f0      	bne.n	80035f0 <HAL_RCC_OscConfig+0x40c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	f003 0304 	and.w	r3, r3, #4
 8003616:	2b00      	cmp	r3, #0
 8003618:	f000 8086 	beq.w	8003728 <HAL_RCC_OscConfig+0x544>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 800361c:	4b1b      	ldr	r3, [pc, #108]	@ (800368c <HAL_RCC_OscConfig+0x4a8>)
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	4a1a      	ldr	r2, [pc, #104]	@ (800368c <HAL_RCC_OscConfig+0x4a8>)
 8003622:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003626:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003628:	f7fe fbb0 	bl	8001d8c <HAL_GetTick>
 800362c:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800362e:	e008      	b.n	8003642 <HAL_RCC_OscConfig+0x45e>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003630:	f7fe fbac 	bl	8001d8c <HAL_GetTick>
 8003634:	4602      	mov	r2, r0
 8003636:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003638:	1ad3      	subs	r3, r2, r3
 800363a:	2b64      	cmp	r3, #100	@ 0x64
 800363c:	d901      	bls.n	8003642 <HAL_RCC_OscConfig+0x45e>
      {
        return HAL_TIMEOUT;
 800363e:	2303      	movs	r3, #3
 8003640:	e1a2      	b.n	8003988 <HAL_RCC_OscConfig+0x7a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003642:	4b12      	ldr	r3, [pc, #72]	@ (800368c <HAL_RCC_OscConfig+0x4a8>)
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800364a:	2b00      	cmp	r3, #0
 800364c:	d0f0      	beq.n	8003630 <HAL_RCC_OscConfig+0x44c>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	689b      	ldr	r3, [r3, #8]
 8003652:	2b01      	cmp	r3, #1
 8003654:	d106      	bne.n	8003664 <HAL_RCC_OscConfig+0x480>
 8003656:	4b0c      	ldr	r3, [pc, #48]	@ (8003688 <HAL_RCC_OscConfig+0x4a4>)
 8003658:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800365a:	4a0b      	ldr	r2, [pc, #44]	@ (8003688 <HAL_RCC_OscConfig+0x4a4>)
 800365c:	f043 0301 	orr.w	r3, r3, #1
 8003660:	6713      	str	r3, [r2, #112]	@ 0x70
 8003662:	e032      	b.n	80036ca <HAL_RCC_OscConfig+0x4e6>
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	689b      	ldr	r3, [r3, #8]
 8003668:	2b00      	cmp	r3, #0
 800366a:	d111      	bne.n	8003690 <HAL_RCC_OscConfig+0x4ac>
 800366c:	4b06      	ldr	r3, [pc, #24]	@ (8003688 <HAL_RCC_OscConfig+0x4a4>)
 800366e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003670:	4a05      	ldr	r2, [pc, #20]	@ (8003688 <HAL_RCC_OscConfig+0x4a4>)
 8003672:	f023 0301 	bic.w	r3, r3, #1
 8003676:	6713      	str	r3, [r2, #112]	@ 0x70
 8003678:	4b03      	ldr	r3, [pc, #12]	@ (8003688 <HAL_RCC_OscConfig+0x4a4>)
 800367a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800367c:	4a02      	ldr	r2, [pc, #8]	@ (8003688 <HAL_RCC_OscConfig+0x4a4>)
 800367e:	f023 0304 	bic.w	r3, r3, #4
 8003682:	6713      	str	r3, [r2, #112]	@ 0x70
 8003684:	e021      	b.n	80036ca <HAL_RCC_OscConfig+0x4e6>
 8003686:	bf00      	nop
 8003688:	58024400 	.word	0x58024400
 800368c:	58024800 	.word	0x58024800
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	689b      	ldr	r3, [r3, #8]
 8003694:	2b05      	cmp	r3, #5
 8003696:	d10c      	bne.n	80036b2 <HAL_RCC_OscConfig+0x4ce>
 8003698:	4b83      	ldr	r3, [pc, #524]	@ (80038a8 <HAL_RCC_OscConfig+0x6c4>)
 800369a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800369c:	4a82      	ldr	r2, [pc, #520]	@ (80038a8 <HAL_RCC_OscConfig+0x6c4>)
 800369e:	f043 0304 	orr.w	r3, r3, #4
 80036a2:	6713      	str	r3, [r2, #112]	@ 0x70
 80036a4:	4b80      	ldr	r3, [pc, #512]	@ (80038a8 <HAL_RCC_OscConfig+0x6c4>)
 80036a6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80036a8:	4a7f      	ldr	r2, [pc, #508]	@ (80038a8 <HAL_RCC_OscConfig+0x6c4>)
 80036aa:	f043 0301 	orr.w	r3, r3, #1
 80036ae:	6713      	str	r3, [r2, #112]	@ 0x70
 80036b0:	e00b      	b.n	80036ca <HAL_RCC_OscConfig+0x4e6>
 80036b2:	4b7d      	ldr	r3, [pc, #500]	@ (80038a8 <HAL_RCC_OscConfig+0x6c4>)
 80036b4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80036b6:	4a7c      	ldr	r2, [pc, #496]	@ (80038a8 <HAL_RCC_OscConfig+0x6c4>)
 80036b8:	f023 0301 	bic.w	r3, r3, #1
 80036bc:	6713      	str	r3, [r2, #112]	@ 0x70
 80036be:	4b7a      	ldr	r3, [pc, #488]	@ (80038a8 <HAL_RCC_OscConfig+0x6c4>)
 80036c0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80036c2:	4a79      	ldr	r2, [pc, #484]	@ (80038a8 <HAL_RCC_OscConfig+0x6c4>)
 80036c4:	f023 0304 	bic.w	r3, r3, #4
 80036c8:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	689b      	ldr	r3, [r3, #8]
 80036ce:	2b00      	cmp	r3, #0
 80036d0:	d015      	beq.n	80036fe <HAL_RCC_OscConfig+0x51a>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80036d2:	f7fe fb5b 	bl	8001d8c <HAL_GetTick>
 80036d6:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80036d8:	e00a      	b.n	80036f0 <HAL_RCC_OscConfig+0x50c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80036da:	f7fe fb57 	bl	8001d8c <HAL_GetTick>
 80036de:	4602      	mov	r2, r0
 80036e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80036e2:	1ad3      	subs	r3, r2, r3
 80036e4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80036e8:	4293      	cmp	r3, r2
 80036ea:	d901      	bls.n	80036f0 <HAL_RCC_OscConfig+0x50c>
        {
          return HAL_TIMEOUT;
 80036ec:	2303      	movs	r3, #3
 80036ee:	e14b      	b.n	8003988 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80036f0:	4b6d      	ldr	r3, [pc, #436]	@ (80038a8 <HAL_RCC_OscConfig+0x6c4>)
 80036f2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80036f4:	f003 0302 	and.w	r3, r3, #2
 80036f8:	2b00      	cmp	r3, #0
 80036fa:	d0ee      	beq.n	80036da <HAL_RCC_OscConfig+0x4f6>
 80036fc:	e014      	b.n	8003728 <HAL_RCC_OscConfig+0x544>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80036fe:	f7fe fb45 	bl	8001d8c <HAL_GetTick>
 8003702:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8003704:	e00a      	b.n	800371c <HAL_RCC_OscConfig+0x538>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003706:	f7fe fb41 	bl	8001d8c <HAL_GetTick>
 800370a:	4602      	mov	r2, r0
 800370c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800370e:	1ad3      	subs	r3, r2, r3
 8003710:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003714:	4293      	cmp	r3, r2
 8003716:	d901      	bls.n	800371c <HAL_RCC_OscConfig+0x538>
        {
          return HAL_TIMEOUT;
 8003718:	2303      	movs	r3, #3
 800371a:	e135      	b.n	8003988 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800371c:	4b62      	ldr	r3, [pc, #392]	@ (80038a8 <HAL_RCC_OscConfig+0x6c4>)
 800371e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003720:	f003 0302 	and.w	r3, r3, #2
 8003724:	2b00      	cmp	r3, #0
 8003726:	d1ee      	bne.n	8003706 <HAL_RCC_OscConfig+0x522>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800372c:	2b00      	cmp	r3, #0
 800372e:	f000 812a 	beq.w	8003986 <HAL_RCC_OscConfig+0x7a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8003732:	4b5d      	ldr	r3, [pc, #372]	@ (80038a8 <HAL_RCC_OscConfig+0x6c4>)
 8003734:	691b      	ldr	r3, [r3, #16]
 8003736:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800373a:	2b18      	cmp	r3, #24
 800373c:	f000 80ba 	beq.w	80038b4 <HAL_RCC_OscConfig+0x6d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003744:	2b02      	cmp	r3, #2
 8003746:	f040 8095 	bne.w	8003874 <HAL_RCC_OscConfig+0x690>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800374a:	4b57      	ldr	r3, [pc, #348]	@ (80038a8 <HAL_RCC_OscConfig+0x6c4>)
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	4a56      	ldr	r2, [pc, #344]	@ (80038a8 <HAL_RCC_OscConfig+0x6c4>)
 8003750:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003754:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003756:	f7fe fb19 	bl	8001d8c <HAL_GetTick>
 800375a:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800375c:	e008      	b.n	8003770 <HAL_RCC_OscConfig+0x58c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800375e:	f7fe fb15 	bl	8001d8c <HAL_GetTick>
 8003762:	4602      	mov	r2, r0
 8003764:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003766:	1ad3      	subs	r3, r2, r3
 8003768:	2b02      	cmp	r3, #2
 800376a:	d901      	bls.n	8003770 <HAL_RCC_OscConfig+0x58c>
          {
            return HAL_TIMEOUT;
 800376c:	2303      	movs	r3, #3
 800376e:	e10b      	b.n	8003988 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003770:	4b4d      	ldr	r3, [pc, #308]	@ (80038a8 <HAL_RCC_OscConfig+0x6c4>)
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003778:	2b00      	cmp	r3, #0
 800377a:	d1f0      	bne.n	800375e <HAL_RCC_OscConfig+0x57a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800377c:	4b4a      	ldr	r3, [pc, #296]	@ (80038a8 <HAL_RCC_OscConfig+0x6c4>)
 800377e:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8003780:	4b4a      	ldr	r3, [pc, #296]	@ (80038ac <HAL_RCC_OscConfig+0x6c8>)
 8003782:	4013      	ands	r3, r2
 8003784:	687a      	ldr	r2, [r7, #4]
 8003786:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 8003788:	687a      	ldr	r2, [r7, #4]
 800378a:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 800378c:	0112      	lsls	r2, r2, #4
 800378e:	430a      	orrs	r2, r1
 8003790:	4945      	ldr	r1, [pc, #276]	@ (80038a8 <HAL_RCC_OscConfig+0x6c4>)
 8003792:	4313      	orrs	r3, r2
 8003794:	628b      	str	r3, [r1, #40]	@ 0x28
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800379a:	3b01      	subs	r3, #1
 800379c:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80037a4:	3b01      	subs	r3, #1
 80037a6:	025b      	lsls	r3, r3, #9
 80037a8:	b29b      	uxth	r3, r3
 80037aa:	431a      	orrs	r2, r3
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80037b0:	3b01      	subs	r3, #1
 80037b2:	041b      	lsls	r3, r3, #16
 80037b4:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 80037b8:	431a      	orrs	r2, r3
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80037be:	3b01      	subs	r3, #1
 80037c0:	061b      	lsls	r3, r3, #24
 80037c2:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 80037c6:	4938      	ldr	r1, [pc, #224]	@ (80038a8 <HAL_RCC_OscConfig+0x6c4>)
 80037c8:	4313      	orrs	r3, r2
 80037ca:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 80037cc:	4b36      	ldr	r3, [pc, #216]	@ (80038a8 <HAL_RCC_OscConfig+0x6c4>)
 80037ce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80037d0:	4a35      	ldr	r2, [pc, #212]	@ (80038a8 <HAL_RCC_OscConfig+0x6c4>)
 80037d2:	f023 0301 	bic.w	r3, r3, #1
 80037d6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80037d8:	4b33      	ldr	r3, [pc, #204]	@ (80038a8 <HAL_RCC_OscConfig+0x6c4>)
 80037da:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80037dc:	4b34      	ldr	r3, [pc, #208]	@ (80038b0 <HAL_RCC_OscConfig+0x6cc>)
 80037de:	4013      	ands	r3, r2
 80037e0:	687a      	ldr	r2, [r7, #4]
 80037e2:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 80037e4:	00d2      	lsls	r2, r2, #3
 80037e6:	4930      	ldr	r1, [pc, #192]	@ (80038a8 <HAL_RCC_OscConfig+0x6c4>)
 80037e8:	4313      	orrs	r3, r2
 80037ea:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 80037ec:	4b2e      	ldr	r3, [pc, #184]	@ (80038a8 <HAL_RCC_OscConfig+0x6c4>)
 80037ee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80037f0:	f023 020c 	bic.w	r2, r3, #12
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80037f8:	492b      	ldr	r1, [pc, #172]	@ (80038a8 <HAL_RCC_OscConfig+0x6c4>)
 80037fa:	4313      	orrs	r3, r2
 80037fc:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 80037fe:	4b2a      	ldr	r3, [pc, #168]	@ (80038a8 <HAL_RCC_OscConfig+0x6c4>)
 8003800:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003802:	f023 0202 	bic.w	r2, r3, #2
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800380a:	4927      	ldr	r1, [pc, #156]	@ (80038a8 <HAL_RCC_OscConfig+0x6c4>)
 800380c:	4313      	orrs	r3, r2
 800380e:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8003810:	4b25      	ldr	r3, [pc, #148]	@ (80038a8 <HAL_RCC_OscConfig+0x6c4>)
 8003812:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003814:	4a24      	ldr	r2, [pc, #144]	@ (80038a8 <HAL_RCC_OscConfig+0x6c4>)
 8003816:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800381a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800381c:	4b22      	ldr	r3, [pc, #136]	@ (80038a8 <HAL_RCC_OscConfig+0x6c4>)
 800381e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003820:	4a21      	ldr	r2, [pc, #132]	@ (80038a8 <HAL_RCC_OscConfig+0x6c4>)
 8003822:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003826:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8003828:	4b1f      	ldr	r3, [pc, #124]	@ (80038a8 <HAL_RCC_OscConfig+0x6c4>)
 800382a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800382c:	4a1e      	ldr	r2, [pc, #120]	@ (80038a8 <HAL_RCC_OscConfig+0x6c4>)
 800382e:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003832:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8003834:	4b1c      	ldr	r3, [pc, #112]	@ (80038a8 <HAL_RCC_OscConfig+0x6c4>)
 8003836:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003838:	4a1b      	ldr	r2, [pc, #108]	@ (80038a8 <HAL_RCC_OscConfig+0x6c4>)
 800383a:	f043 0301 	orr.w	r3, r3, #1
 800383e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003840:	4b19      	ldr	r3, [pc, #100]	@ (80038a8 <HAL_RCC_OscConfig+0x6c4>)
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	4a18      	ldr	r2, [pc, #96]	@ (80038a8 <HAL_RCC_OscConfig+0x6c4>)
 8003846:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800384a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800384c:	f7fe fa9e 	bl	8001d8c <HAL_GetTick>
 8003850:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8003852:	e008      	b.n	8003866 <HAL_RCC_OscConfig+0x682>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003854:	f7fe fa9a 	bl	8001d8c <HAL_GetTick>
 8003858:	4602      	mov	r2, r0
 800385a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800385c:	1ad3      	subs	r3, r2, r3
 800385e:	2b02      	cmp	r3, #2
 8003860:	d901      	bls.n	8003866 <HAL_RCC_OscConfig+0x682>
          {
            return HAL_TIMEOUT;
 8003862:	2303      	movs	r3, #3
 8003864:	e090      	b.n	8003988 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8003866:	4b10      	ldr	r3, [pc, #64]	@ (80038a8 <HAL_RCC_OscConfig+0x6c4>)
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800386e:	2b00      	cmp	r3, #0
 8003870:	d0f0      	beq.n	8003854 <HAL_RCC_OscConfig+0x670>
 8003872:	e088      	b.n	8003986 <HAL_RCC_OscConfig+0x7a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003874:	4b0c      	ldr	r3, [pc, #48]	@ (80038a8 <HAL_RCC_OscConfig+0x6c4>)
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	4a0b      	ldr	r2, [pc, #44]	@ (80038a8 <HAL_RCC_OscConfig+0x6c4>)
 800387a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800387e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003880:	f7fe fa84 	bl	8001d8c <HAL_GetTick>
 8003884:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003886:	e008      	b.n	800389a <HAL_RCC_OscConfig+0x6b6>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003888:	f7fe fa80 	bl	8001d8c <HAL_GetTick>
 800388c:	4602      	mov	r2, r0
 800388e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003890:	1ad3      	subs	r3, r2, r3
 8003892:	2b02      	cmp	r3, #2
 8003894:	d901      	bls.n	800389a <HAL_RCC_OscConfig+0x6b6>
          {
            return HAL_TIMEOUT;
 8003896:	2303      	movs	r3, #3
 8003898:	e076      	b.n	8003988 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800389a:	4b03      	ldr	r3, [pc, #12]	@ (80038a8 <HAL_RCC_OscConfig+0x6c4>)
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80038a2:	2b00      	cmp	r3, #0
 80038a4:	d1f0      	bne.n	8003888 <HAL_RCC_OscConfig+0x6a4>
 80038a6:	e06e      	b.n	8003986 <HAL_RCC_OscConfig+0x7a2>
 80038a8:	58024400 	.word	0x58024400
 80038ac:	fffffc0c 	.word	0xfffffc0c
 80038b0:	ffff0007 	.word	0xffff0007
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 80038b4:	4b36      	ldr	r3, [pc, #216]	@ (8003990 <HAL_RCC_OscConfig+0x7ac>)
 80038b6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80038b8:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 80038ba:	4b35      	ldr	r3, [pc, #212]	@ (8003990 <HAL_RCC_OscConfig+0x7ac>)
 80038bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80038be:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80038c4:	2b01      	cmp	r3, #1
 80038c6:	d031      	beq.n	800392c <HAL_RCC_OscConfig+0x748>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80038c8:	693b      	ldr	r3, [r7, #16]
 80038ca:	f003 0203 	and.w	r2, r3, #3
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80038d2:	429a      	cmp	r2, r3
 80038d4:	d12a      	bne.n	800392c <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80038d6:	693b      	ldr	r3, [r7, #16]
 80038d8:	091b      	lsrs	r3, r3, #4
 80038da:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80038e2:	429a      	cmp	r2, r3
 80038e4:	d122      	bne.n	800392c <HAL_RCC_OscConfig+0x748>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80038e6:	68fb      	ldr	r3, [r7, #12]
 80038e8:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80038f0:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80038f2:	429a      	cmp	r2, r3
 80038f4:	d11a      	bne.n	800392c <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80038f6:	68fb      	ldr	r3, [r7, #12]
 80038f8:	0a5b      	lsrs	r3, r3, #9
 80038fa:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003902:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8003904:	429a      	cmp	r2, r3
 8003906:	d111      	bne.n	800392c <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8003908:	68fb      	ldr	r3, [r7, #12]
 800390a:	0c1b      	lsrs	r3, r3, #16
 800390c:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003914:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8003916:	429a      	cmp	r2, r3
 8003918:	d108      	bne.n	800392c <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 800391a:	68fb      	ldr	r3, [r7, #12]
 800391c:	0e1b      	lsrs	r3, r3, #24
 800391e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003926:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8003928:	429a      	cmp	r2, r3
 800392a:	d001      	beq.n	8003930 <HAL_RCC_OscConfig+0x74c>
      {
        return HAL_ERROR;
 800392c:	2301      	movs	r3, #1
 800392e:	e02b      	b.n	8003988 <HAL_RCC_OscConfig+0x7a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8003930:	4b17      	ldr	r3, [pc, #92]	@ (8003990 <HAL_RCC_OscConfig+0x7ac>)
 8003932:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003934:	08db      	lsrs	r3, r3, #3
 8003936:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800393a:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003940:	693a      	ldr	r2, [r7, #16]
 8003942:	429a      	cmp	r2, r3
 8003944:	d01f      	beq.n	8003986 <HAL_RCC_OscConfig+0x7a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 8003946:	4b12      	ldr	r3, [pc, #72]	@ (8003990 <HAL_RCC_OscConfig+0x7ac>)
 8003948:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800394a:	4a11      	ldr	r2, [pc, #68]	@ (8003990 <HAL_RCC_OscConfig+0x7ac>)
 800394c:	f023 0301 	bic.w	r3, r3, #1
 8003950:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8003952:	f7fe fa1b 	bl	8001d8c <HAL_GetTick>
 8003956:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8003958:	bf00      	nop
 800395a:	f7fe fa17 	bl	8001d8c <HAL_GetTick>
 800395e:	4602      	mov	r2, r0
 8003960:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003962:	4293      	cmp	r3, r2
 8003964:	d0f9      	beq.n	800395a <HAL_RCC_OscConfig+0x776>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8003966:	4b0a      	ldr	r3, [pc, #40]	@ (8003990 <HAL_RCC_OscConfig+0x7ac>)
 8003968:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800396a:	4b0a      	ldr	r3, [pc, #40]	@ (8003994 <HAL_RCC_OscConfig+0x7b0>)
 800396c:	4013      	ands	r3, r2
 800396e:	687a      	ldr	r2, [r7, #4]
 8003970:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8003972:	00d2      	lsls	r2, r2, #3
 8003974:	4906      	ldr	r1, [pc, #24]	@ (8003990 <HAL_RCC_OscConfig+0x7ac>)
 8003976:	4313      	orrs	r3, r2
 8003978:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 800397a:	4b05      	ldr	r3, [pc, #20]	@ (8003990 <HAL_RCC_OscConfig+0x7ac>)
 800397c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800397e:	4a04      	ldr	r2, [pc, #16]	@ (8003990 <HAL_RCC_OscConfig+0x7ac>)
 8003980:	f043 0301 	orr.w	r3, r3, #1
 8003984:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 8003986:	2300      	movs	r3, #0
}
 8003988:	4618      	mov	r0, r3
 800398a:	3730      	adds	r7, #48	@ 0x30
 800398c:	46bd      	mov	sp, r7
 800398e:	bd80      	pop	{r7, pc}
 8003990:	58024400 	.word	0x58024400
 8003994:	ffff0007 	.word	0xffff0007

08003998 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003998:	b580      	push	{r7, lr}
 800399a:	b086      	sub	sp, #24
 800399c:	af00      	add	r7, sp, #0
 800399e:	6078      	str	r0, [r7, #4]
 80039a0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	2b00      	cmp	r3, #0
 80039a6:	d101      	bne.n	80039ac <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80039a8:	2301      	movs	r3, #1
 80039aa:	e19c      	b.n	8003ce6 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80039ac:	4b8a      	ldr	r3, [pc, #552]	@ (8003bd8 <HAL_RCC_ClockConfig+0x240>)
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	f003 030f 	and.w	r3, r3, #15
 80039b4:	683a      	ldr	r2, [r7, #0]
 80039b6:	429a      	cmp	r2, r3
 80039b8:	d910      	bls.n	80039dc <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80039ba:	4b87      	ldr	r3, [pc, #540]	@ (8003bd8 <HAL_RCC_ClockConfig+0x240>)
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	f023 020f 	bic.w	r2, r3, #15
 80039c2:	4985      	ldr	r1, [pc, #532]	@ (8003bd8 <HAL_RCC_ClockConfig+0x240>)
 80039c4:	683b      	ldr	r3, [r7, #0]
 80039c6:	4313      	orrs	r3, r2
 80039c8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80039ca:	4b83      	ldr	r3, [pc, #524]	@ (8003bd8 <HAL_RCC_ClockConfig+0x240>)
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	f003 030f 	and.w	r3, r3, #15
 80039d2:	683a      	ldr	r2, [r7, #0]
 80039d4:	429a      	cmp	r2, r3
 80039d6:	d001      	beq.n	80039dc <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80039d8:	2301      	movs	r3, #1
 80039da:	e184      	b.n	8003ce6 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	f003 0304 	and.w	r3, r3, #4
 80039e4:	2b00      	cmp	r3, #0
 80039e6:	d010      	beq.n	8003a0a <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	691a      	ldr	r2, [r3, #16]
 80039ec:	4b7b      	ldr	r3, [pc, #492]	@ (8003bdc <HAL_RCC_ClockConfig+0x244>)
 80039ee:	699b      	ldr	r3, [r3, #24]
 80039f0:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80039f4:	429a      	cmp	r2, r3
 80039f6:	d908      	bls.n	8003a0a <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80039f8:	4b78      	ldr	r3, [pc, #480]	@ (8003bdc <HAL_RCC_ClockConfig+0x244>)
 80039fa:	699b      	ldr	r3, [r3, #24]
 80039fc:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	691b      	ldr	r3, [r3, #16]
 8003a04:	4975      	ldr	r1, [pc, #468]	@ (8003bdc <HAL_RCC_ClockConfig+0x244>)
 8003a06:	4313      	orrs	r3, r2
 8003a08:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	f003 0308 	and.w	r3, r3, #8
 8003a12:	2b00      	cmp	r3, #0
 8003a14:	d010      	beq.n	8003a38 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	695a      	ldr	r2, [r3, #20]
 8003a1a:	4b70      	ldr	r3, [pc, #448]	@ (8003bdc <HAL_RCC_ClockConfig+0x244>)
 8003a1c:	69db      	ldr	r3, [r3, #28]
 8003a1e:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8003a22:	429a      	cmp	r2, r3
 8003a24:	d908      	bls.n	8003a38 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8003a26:	4b6d      	ldr	r3, [pc, #436]	@ (8003bdc <HAL_RCC_ClockConfig+0x244>)
 8003a28:	69db      	ldr	r3, [r3, #28]
 8003a2a:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	695b      	ldr	r3, [r3, #20]
 8003a32:	496a      	ldr	r1, [pc, #424]	@ (8003bdc <HAL_RCC_ClockConfig+0x244>)
 8003a34:	4313      	orrs	r3, r2
 8003a36:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	f003 0310 	and.w	r3, r3, #16
 8003a40:	2b00      	cmp	r3, #0
 8003a42:	d010      	beq.n	8003a66 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	699a      	ldr	r2, [r3, #24]
 8003a48:	4b64      	ldr	r3, [pc, #400]	@ (8003bdc <HAL_RCC_ClockConfig+0x244>)
 8003a4a:	69db      	ldr	r3, [r3, #28]
 8003a4c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8003a50:	429a      	cmp	r2, r3
 8003a52:	d908      	bls.n	8003a66 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8003a54:	4b61      	ldr	r3, [pc, #388]	@ (8003bdc <HAL_RCC_ClockConfig+0x244>)
 8003a56:	69db      	ldr	r3, [r3, #28]
 8003a58:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	699b      	ldr	r3, [r3, #24]
 8003a60:	495e      	ldr	r1, [pc, #376]	@ (8003bdc <HAL_RCC_ClockConfig+0x244>)
 8003a62:	4313      	orrs	r3, r2
 8003a64:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	f003 0320 	and.w	r3, r3, #32
 8003a6e:	2b00      	cmp	r3, #0
 8003a70:	d010      	beq.n	8003a94 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	69da      	ldr	r2, [r3, #28]
 8003a76:	4b59      	ldr	r3, [pc, #356]	@ (8003bdc <HAL_RCC_ClockConfig+0x244>)
 8003a78:	6a1b      	ldr	r3, [r3, #32]
 8003a7a:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8003a7e:	429a      	cmp	r2, r3
 8003a80:	d908      	bls.n	8003a94 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8003a82:	4b56      	ldr	r3, [pc, #344]	@ (8003bdc <HAL_RCC_ClockConfig+0x244>)
 8003a84:	6a1b      	ldr	r3, [r3, #32]
 8003a86:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	69db      	ldr	r3, [r3, #28]
 8003a8e:	4953      	ldr	r1, [pc, #332]	@ (8003bdc <HAL_RCC_ClockConfig+0x244>)
 8003a90:	4313      	orrs	r3, r2
 8003a92:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	f003 0302 	and.w	r3, r3, #2
 8003a9c:	2b00      	cmp	r3, #0
 8003a9e:	d010      	beq.n	8003ac2 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	68da      	ldr	r2, [r3, #12]
 8003aa4:	4b4d      	ldr	r3, [pc, #308]	@ (8003bdc <HAL_RCC_ClockConfig+0x244>)
 8003aa6:	699b      	ldr	r3, [r3, #24]
 8003aa8:	f003 030f 	and.w	r3, r3, #15
 8003aac:	429a      	cmp	r2, r3
 8003aae:	d908      	bls.n	8003ac2 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003ab0:	4b4a      	ldr	r3, [pc, #296]	@ (8003bdc <HAL_RCC_ClockConfig+0x244>)
 8003ab2:	699b      	ldr	r3, [r3, #24]
 8003ab4:	f023 020f 	bic.w	r2, r3, #15
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	68db      	ldr	r3, [r3, #12]
 8003abc:	4947      	ldr	r1, [pc, #284]	@ (8003bdc <HAL_RCC_ClockConfig+0x244>)
 8003abe:	4313      	orrs	r3, r2
 8003ac0:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	f003 0301 	and.w	r3, r3, #1
 8003aca:	2b00      	cmp	r3, #0
 8003acc:	d055      	beq.n	8003b7a <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8003ace:	4b43      	ldr	r3, [pc, #268]	@ (8003bdc <HAL_RCC_ClockConfig+0x244>)
 8003ad0:	699b      	ldr	r3, [r3, #24]
 8003ad2:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	689b      	ldr	r3, [r3, #8]
 8003ada:	4940      	ldr	r1, [pc, #256]	@ (8003bdc <HAL_RCC_ClockConfig+0x244>)
 8003adc:	4313      	orrs	r3, r2
 8003ade:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	685b      	ldr	r3, [r3, #4]
 8003ae4:	2b02      	cmp	r3, #2
 8003ae6:	d107      	bne.n	8003af8 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003ae8:	4b3c      	ldr	r3, [pc, #240]	@ (8003bdc <HAL_RCC_ClockConfig+0x244>)
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003af0:	2b00      	cmp	r3, #0
 8003af2:	d121      	bne.n	8003b38 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8003af4:	2301      	movs	r3, #1
 8003af6:	e0f6      	b.n	8003ce6 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	685b      	ldr	r3, [r3, #4]
 8003afc:	2b03      	cmp	r3, #3
 8003afe:	d107      	bne.n	8003b10 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8003b00:	4b36      	ldr	r3, [pc, #216]	@ (8003bdc <HAL_RCC_ClockConfig+0x244>)
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003b08:	2b00      	cmp	r3, #0
 8003b0a:	d115      	bne.n	8003b38 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8003b0c:	2301      	movs	r3, #1
 8003b0e:	e0ea      	b.n	8003ce6 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	685b      	ldr	r3, [r3, #4]
 8003b14:	2b01      	cmp	r3, #1
 8003b16:	d107      	bne.n	8003b28 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8003b18:	4b30      	ldr	r3, [pc, #192]	@ (8003bdc <HAL_RCC_ClockConfig+0x244>)
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003b20:	2b00      	cmp	r3, #0
 8003b22:	d109      	bne.n	8003b38 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8003b24:	2301      	movs	r3, #1
 8003b26:	e0de      	b.n	8003ce6 <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003b28:	4b2c      	ldr	r3, [pc, #176]	@ (8003bdc <HAL_RCC_ClockConfig+0x244>)
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	f003 0304 	and.w	r3, r3, #4
 8003b30:	2b00      	cmp	r3, #0
 8003b32:	d101      	bne.n	8003b38 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8003b34:	2301      	movs	r3, #1
 8003b36:	e0d6      	b.n	8003ce6 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003b38:	4b28      	ldr	r3, [pc, #160]	@ (8003bdc <HAL_RCC_ClockConfig+0x244>)
 8003b3a:	691b      	ldr	r3, [r3, #16]
 8003b3c:	f023 0207 	bic.w	r2, r3, #7
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	685b      	ldr	r3, [r3, #4]
 8003b44:	4925      	ldr	r1, [pc, #148]	@ (8003bdc <HAL_RCC_ClockConfig+0x244>)
 8003b46:	4313      	orrs	r3, r2
 8003b48:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003b4a:	f7fe f91f 	bl	8001d8c <HAL_GetTick>
 8003b4e:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003b50:	e00a      	b.n	8003b68 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003b52:	f7fe f91b 	bl	8001d8c <HAL_GetTick>
 8003b56:	4602      	mov	r2, r0
 8003b58:	697b      	ldr	r3, [r7, #20]
 8003b5a:	1ad3      	subs	r3, r2, r3
 8003b5c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003b60:	4293      	cmp	r3, r2
 8003b62:	d901      	bls.n	8003b68 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8003b64:	2303      	movs	r3, #3
 8003b66:	e0be      	b.n	8003ce6 <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003b68:	4b1c      	ldr	r3, [pc, #112]	@ (8003bdc <HAL_RCC_ClockConfig+0x244>)
 8003b6a:	691b      	ldr	r3, [r3, #16]
 8003b6c:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	685b      	ldr	r3, [r3, #4]
 8003b74:	00db      	lsls	r3, r3, #3
 8003b76:	429a      	cmp	r2, r3
 8003b78:	d1eb      	bne.n	8003b52 <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	f003 0302 	and.w	r3, r3, #2
 8003b82:	2b00      	cmp	r3, #0
 8003b84:	d010      	beq.n	8003ba8 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	68da      	ldr	r2, [r3, #12]
 8003b8a:	4b14      	ldr	r3, [pc, #80]	@ (8003bdc <HAL_RCC_ClockConfig+0x244>)
 8003b8c:	699b      	ldr	r3, [r3, #24]
 8003b8e:	f003 030f 	and.w	r3, r3, #15
 8003b92:	429a      	cmp	r2, r3
 8003b94:	d208      	bcs.n	8003ba8 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003b96:	4b11      	ldr	r3, [pc, #68]	@ (8003bdc <HAL_RCC_ClockConfig+0x244>)
 8003b98:	699b      	ldr	r3, [r3, #24]
 8003b9a:	f023 020f 	bic.w	r2, r3, #15
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	68db      	ldr	r3, [r3, #12]
 8003ba2:	490e      	ldr	r1, [pc, #56]	@ (8003bdc <HAL_RCC_ClockConfig+0x244>)
 8003ba4:	4313      	orrs	r3, r2
 8003ba6:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003ba8:	4b0b      	ldr	r3, [pc, #44]	@ (8003bd8 <HAL_RCC_ClockConfig+0x240>)
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	f003 030f 	and.w	r3, r3, #15
 8003bb0:	683a      	ldr	r2, [r7, #0]
 8003bb2:	429a      	cmp	r2, r3
 8003bb4:	d214      	bcs.n	8003be0 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003bb6:	4b08      	ldr	r3, [pc, #32]	@ (8003bd8 <HAL_RCC_ClockConfig+0x240>)
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	f023 020f 	bic.w	r2, r3, #15
 8003bbe:	4906      	ldr	r1, [pc, #24]	@ (8003bd8 <HAL_RCC_ClockConfig+0x240>)
 8003bc0:	683b      	ldr	r3, [r7, #0]
 8003bc2:	4313      	orrs	r3, r2
 8003bc4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003bc6:	4b04      	ldr	r3, [pc, #16]	@ (8003bd8 <HAL_RCC_ClockConfig+0x240>)
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	f003 030f 	and.w	r3, r3, #15
 8003bce:	683a      	ldr	r2, [r7, #0]
 8003bd0:	429a      	cmp	r2, r3
 8003bd2:	d005      	beq.n	8003be0 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8003bd4:	2301      	movs	r3, #1
 8003bd6:	e086      	b.n	8003ce6 <HAL_RCC_ClockConfig+0x34e>
 8003bd8:	52002000 	.word	0x52002000
 8003bdc:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	f003 0304 	and.w	r3, r3, #4
 8003be8:	2b00      	cmp	r3, #0
 8003bea:	d010      	beq.n	8003c0e <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	691a      	ldr	r2, [r3, #16]
 8003bf0:	4b3f      	ldr	r3, [pc, #252]	@ (8003cf0 <HAL_RCC_ClockConfig+0x358>)
 8003bf2:	699b      	ldr	r3, [r3, #24]
 8003bf4:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8003bf8:	429a      	cmp	r2, r3
 8003bfa:	d208      	bcs.n	8003c0e <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8003bfc:	4b3c      	ldr	r3, [pc, #240]	@ (8003cf0 <HAL_RCC_ClockConfig+0x358>)
 8003bfe:	699b      	ldr	r3, [r3, #24]
 8003c00:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	691b      	ldr	r3, [r3, #16]
 8003c08:	4939      	ldr	r1, [pc, #228]	@ (8003cf0 <HAL_RCC_ClockConfig+0x358>)
 8003c0a:	4313      	orrs	r3, r2
 8003c0c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	f003 0308 	and.w	r3, r3, #8
 8003c16:	2b00      	cmp	r3, #0
 8003c18:	d010      	beq.n	8003c3c <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	695a      	ldr	r2, [r3, #20]
 8003c1e:	4b34      	ldr	r3, [pc, #208]	@ (8003cf0 <HAL_RCC_ClockConfig+0x358>)
 8003c20:	69db      	ldr	r3, [r3, #28]
 8003c22:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8003c26:	429a      	cmp	r2, r3
 8003c28:	d208      	bcs.n	8003c3c <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8003c2a:	4b31      	ldr	r3, [pc, #196]	@ (8003cf0 <HAL_RCC_ClockConfig+0x358>)
 8003c2c:	69db      	ldr	r3, [r3, #28]
 8003c2e:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	695b      	ldr	r3, [r3, #20]
 8003c36:	492e      	ldr	r1, [pc, #184]	@ (8003cf0 <HAL_RCC_ClockConfig+0x358>)
 8003c38:	4313      	orrs	r3, r2
 8003c3a:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	f003 0310 	and.w	r3, r3, #16
 8003c44:	2b00      	cmp	r3, #0
 8003c46:	d010      	beq.n	8003c6a <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	699a      	ldr	r2, [r3, #24]
 8003c4c:	4b28      	ldr	r3, [pc, #160]	@ (8003cf0 <HAL_RCC_ClockConfig+0x358>)
 8003c4e:	69db      	ldr	r3, [r3, #28]
 8003c50:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8003c54:	429a      	cmp	r2, r3
 8003c56:	d208      	bcs.n	8003c6a <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8003c58:	4b25      	ldr	r3, [pc, #148]	@ (8003cf0 <HAL_RCC_ClockConfig+0x358>)
 8003c5a:	69db      	ldr	r3, [r3, #28]
 8003c5c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	699b      	ldr	r3, [r3, #24]
 8003c64:	4922      	ldr	r1, [pc, #136]	@ (8003cf0 <HAL_RCC_ClockConfig+0x358>)
 8003c66:	4313      	orrs	r3, r2
 8003c68:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	f003 0320 	and.w	r3, r3, #32
 8003c72:	2b00      	cmp	r3, #0
 8003c74:	d010      	beq.n	8003c98 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	69da      	ldr	r2, [r3, #28]
 8003c7a:	4b1d      	ldr	r3, [pc, #116]	@ (8003cf0 <HAL_RCC_ClockConfig+0x358>)
 8003c7c:	6a1b      	ldr	r3, [r3, #32]
 8003c7e:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8003c82:	429a      	cmp	r2, r3
 8003c84:	d208      	bcs.n	8003c98 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8003c86:	4b1a      	ldr	r3, [pc, #104]	@ (8003cf0 <HAL_RCC_ClockConfig+0x358>)
 8003c88:	6a1b      	ldr	r3, [r3, #32]
 8003c8a:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	69db      	ldr	r3, [r3, #28]
 8003c92:	4917      	ldr	r1, [pc, #92]	@ (8003cf0 <HAL_RCC_ClockConfig+0x358>)
 8003c94:	4313      	orrs	r3, r2
 8003c96:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8003c98:	f000 f834 	bl	8003d04 <HAL_RCC_GetSysClockFreq>
 8003c9c:	4602      	mov	r2, r0
 8003c9e:	4b14      	ldr	r3, [pc, #80]	@ (8003cf0 <HAL_RCC_ClockConfig+0x358>)
 8003ca0:	699b      	ldr	r3, [r3, #24]
 8003ca2:	0a1b      	lsrs	r3, r3, #8
 8003ca4:	f003 030f 	and.w	r3, r3, #15
 8003ca8:	4912      	ldr	r1, [pc, #72]	@ (8003cf4 <HAL_RCC_ClockConfig+0x35c>)
 8003caa:	5ccb      	ldrb	r3, [r1, r3]
 8003cac:	f003 031f 	and.w	r3, r3, #31
 8003cb0:	fa22 f303 	lsr.w	r3, r2, r3
 8003cb4:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8003cb6:	4b0e      	ldr	r3, [pc, #56]	@ (8003cf0 <HAL_RCC_ClockConfig+0x358>)
 8003cb8:	699b      	ldr	r3, [r3, #24]
 8003cba:	f003 030f 	and.w	r3, r3, #15
 8003cbe:	4a0d      	ldr	r2, [pc, #52]	@ (8003cf4 <HAL_RCC_ClockConfig+0x35c>)
 8003cc0:	5cd3      	ldrb	r3, [r2, r3]
 8003cc2:	f003 031f 	and.w	r3, r3, #31
 8003cc6:	693a      	ldr	r2, [r7, #16]
 8003cc8:	fa22 f303 	lsr.w	r3, r2, r3
 8003ccc:	4a0a      	ldr	r2, [pc, #40]	@ (8003cf8 <HAL_RCC_ClockConfig+0x360>)
 8003cce:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8003cd0:	4a0a      	ldr	r2, [pc, #40]	@ (8003cfc <HAL_RCC_ClockConfig+0x364>)
 8003cd2:	693b      	ldr	r3, [r7, #16]
 8003cd4:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8003cd6:	4b0a      	ldr	r3, [pc, #40]	@ (8003d00 <HAL_RCC_ClockConfig+0x368>)
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	4618      	mov	r0, r3
 8003cdc:	f7fd feb4 	bl	8001a48 <HAL_InitTick>
 8003ce0:	4603      	mov	r3, r0
 8003ce2:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8003ce4:	7bfb      	ldrb	r3, [r7, #15]
}
 8003ce6:	4618      	mov	r0, r3
 8003ce8:	3718      	adds	r7, #24
 8003cea:	46bd      	mov	sp, r7
 8003cec:	bd80      	pop	{r7, pc}
 8003cee:	bf00      	nop
 8003cf0:	58024400 	.word	0x58024400
 8003cf4:	0800a868 	.word	0x0800a868
 8003cf8:	24000004 	.word	0x24000004
 8003cfc:	24000000 	.word	0x24000000
 8003d00:	24000008 	.word	0x24000008

08003d04 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003d04:	b480      	push	{r7}
 8003d06:	b089      	sub	sp, #36	@ 0x24
 8003d08:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003d0a:	4bb3      	ldr	r3, [pc, #716]	@ (8003fd8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003d0c:	691b      	ldr	r3, [r3, #16]
 8003d0e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8003d12:	2b18      	cmp	r3, #24
 8003d14:	f200 8155 	bhi.w	8003fc2 <HAL_RCC_GetSysClockFreq+0x2be>
 8003d18:	a201      	add	r2, pc, #4	@ (adr r2, 8003d20 <HAL_RCC_GetSysClockFreq+0x1c>)
 8003d1a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003d1e:	bf00      	nop
 8003d20:	08003d85 	.word	0x08003d85
 8003d24:	08003fc3 	.word	0x08003fc3
 8003d28:	08003fc3 	.word	0x08003fc3
 8003d2c:	08003fc3 	.word	0x08003fc3
 8003d30:	08003fc3 	.word	0x08003fc3
 8003d34:	08003fc3 	.word	0x08003fc3
 8003d38:	08003fc3 	.word	0x08003fc3
 8003d3c:	08003fc3 	.word	0x08003fc3
 8003d40:	08003dab 	.word	0x08003dab
 8003d44:	08003fc3 	.word	0x08003fc3
 8003d48:	08003fc3 	.word	0x08003fc3
 8003d4c:	08003fc3 	.word	0x08003fc3
 8003d50:	08003fc3 	.word	0x08003fc3
 8003d54:	08003fc3 	.word	0x08003fc3
 8003d58:	08003fc3 	.word	0x08003fc3
 8003d5c:	08003fc3 	.word	0x08003fc3
 8003d60:	08003db1 	.word	0x08003db1
 8003d64:	08003fc3 	.word	0x08003fc3
 8003d68:	08003fc3 	.word	0x08003fc3
 8003d6c:	08003fc3 	.word	0x08003fc3
 8003d70:	08003fc3 	.word	0x08003fc3
 8003d74:	08003fc3 	.word	0x08003fc3
 8003d78:	08003fc3 	.word	0x08003fc3
 8003d7c:	08003fc3 	.word	0x08003fc3
 8003d80:	08003db7 	.word	0x08003db7
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003d84:	4b94      	ldr	r3, [pc, #592]	@ (8003fd8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	f003 0320 	and.w	r3, r3, #32
 8003d8c:	2b00      	cmp	r3, #0
 8003d8e:	d009      	beq.n	8003da4 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8003d90:	4b91      	ldr	r3, [pc, #580]	@ (8003fd8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	08db      	lsrs	r3, r3, #3
 8003d96:	f003 0303 	and.w	r3, r3, #3
 8003d9a:	4a90      	ldr	r2, [pc, #576]	@ (8003fdc <HAL_RCC_GetSysClockFreq+0x2d8>)
 8003d9c:	fa22 f303 	lsr.w	r3, r2, r3
 8003da0:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 8003da2:	e111      	b.n	8003fc8 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8003da4:	4b8d      	ldr	r3, [pc, #564]	@ (8003fdc <HAL_RCC_GetSysClockFreq+0x2d8>)
 8003da6:	61bb      	str	r3, [r7, #24]
      break;
 8003da8:	e10e      	b.n	8003fc8 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 8003daa:	4b8d      	ldr	r3, [pc, #564]	@ (8003fe0 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8003dac:	61bb      	str	r3, [r7, #24]
      break;
 8003dae:	e10b      	b.n	8003fc8 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8003db0:	4b8c      	ldr	r3, [pc, #560]	@ (8003fe4 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8003db2:	61bb      	str	r3, [r7, #24]
      break;
 8003db4:	e108      	b.n	8003fc8 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8003db6:	4b88      	ldr	r3, [pc, #544]	@ (8003fd8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003db8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003dba:	f003 0303 	and.w	r3, r3, #3
 8003dbe:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8003dc0:	4b85      	ldr	r3, [pc, #532]	@ (8003fd8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003dc2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003dc4:	091b      	lsrs	r3, r3, #4
 8003dc6:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003dca:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8003dcc:	4b82      	ldr	r3, [pc, #520]	@ (8003fd8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003dce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003dd0:	f003 0301 	and.w	r3, r3, #1
 8003dd4:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8003dd6:	4b80      	ldr	r3, [pc, #512]	@ (8003fd8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003dd8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003dda:	08db      	lsrs	r3, r3, #3
 8003ddc:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8003de0:	68fa      	ldr	r2, [r7, #12]
 8003de2:	fb02 f303 	mul.w	r3, r2, r3
 8003de6:	ee07 3a90 	vmov	s15, r3
 8003dea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003dee:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 8003df2:	693b      	ldr	r3, [r7, #16]
 8003df4:	2b00      	cmp	r3, #0
 8003df6:	f000 80e1 	beq.w	8003fbc <HAL_RCC_GetSysClockFreq+0x2b8>
 8003dfa:	697b      	ldr	r3, [r7, #20]
 8003dfc:	2b02      	cmp	r3, #2
 8003dfe:	f000 8083 	beq.w	8003f08 <HAL_RCC_GetSysClockFreq+0x204>
 8003e02:	697b      	ldr	r3, [r7, #20]
 8003e04:	2b02      	cmp	r3, #2
 8003e06:	f200 80a1 	bhi.w	8003f4c <HAL_RCC_GetSysClockFreq+0x248>
 8003e0a:	697b      	ldr	r3, [r7, #20]
 8003e0c:	2b00      	cmp	r3, #0
 8003e0e:	d003      	beq.n	8003e18 <HAL_RCC_GetSysClockFreq+0x114>
 8003e10:	697b      	ldr	r3, [r7, #20]
 8003e12:	2b01      	cmp	r3, #1
 8003e14:	d056      	beq.n	8003ec4 <HAL_RCC_GetSysClockFreq+0x1c0>
 8003e16:	e099      	b.n	8003f4c <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003e18:	4b6f      	ldr	r3, [pc, #444]	@ (8003fd8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	f003 0320 	and.w	r3, r3, #32
 8003e20:	2b00      	cmp	r3, #0
 8003e22:	d02d      	beq.n	8003e80 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8003e24:	4b6c      	ldr	r3, [pc, #432]	@ (8003fd8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	08db      	lsrs	r3, r3, #3
 8003e2a:	f003 0303 	and.w	r3, r3, #3
 8003e2e:	4a6b      	ldr	r2, [pc, #428]	@ (8003fdc <HAL_RCC_GetSysClockFreq+0x2d8>)
 8003e30:	fa22 f303 	lsr.w	r3, r2, r3
 8003e34:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	ee07 3a90 	vmov	s15, r3
 8003e3c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003e40:	693b      	ldr	r3, [r7, #16]
 8003e42:	ee07 3a90 	vmov	s15, r3
 8003e46:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003e4a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003e4e:	4b62      	ldr	r3, [pc, #392]	@ (8003fd8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003e50:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003e52:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003e56:	ee07 3a90 	vmov	s15, r3
 8003e5a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003e5e:	ed97 6a02 	vldr	s12, [r7, #8]
 8003e62:	eddf 5a61 	vldr	s11, [pc, #388]	@ 8003fe8 <HAL_RCC_GetSysClockFreq+0x2e4>
 8003e66:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003e6a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003e6e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003e72:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003e76:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003e7a:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 8003e7e:	e087      	b.n	8003f90 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8003e80:	693b      	ldr	r3, [r7, #16]
 8003e82:	ee07 3a90 	vmov	s15, r3
 8003e86:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003e8a:	eddf 6a58 	vldr	s13, [pc, #352]	@ 8003fec <HAL_RCC_GetSysClockFreq+0x2e8>
 8003e8e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003e92:	4b51      	ldr	r3, [pc, #324]	@ (8003fd8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003e94:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003e96:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003e9a:	ee07 3a90 	vmov	s15, r3
 8003e9e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003ea2:	ed97 6a02 	vldr	s12, [r7, #8]
 8003ea6:	eddf 5a50 	vldr	s11, [pc, #320]	@ 8003fe8 <HAL_RCC_GetSysClockFreq+0x2e4>
 8003eaa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003eae:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003eb2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003eb6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003eba:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003ebe:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8003ec2:	e065      	b.n	8003f90 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8003ec4:	693b      	ldr	r3, [r7, #16]
 8003ec6:	ee07 3a90 	vmov	s15, r3
 8003eca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003ece:	eddf 6a48 	vldr	s13, [pc, #288]	@ 8003ff0 <HAL_RCC_GetSysClockFreq+0x2ec>
 8003ed2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003ed6:	4b40      	ldr	r3, [pc, #256]	@ (8003fd8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003ed8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003eda:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003ede:	ee07 3a90 	vmov	s15, r3
 8003ee2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003ee6:	ed97 6a02 	vldr	s12, [r7, #8]
 8003eea:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 8003fe8 <HAL_RCC_GetSysClockFreq+0x2e4>
 8003eee:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003ef2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003ef6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003efa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003efe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003f02:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8003f06:	e043      	b.n	8003f90 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8003f08:	693b      	ldr	r3, [r7, #16]
 8003f0a:	ee07 3a90 	vmov	s15, r3
 8003f0e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003f12:	eddf 6a38 	vldr	s13, [pc, #224]	@ 8003ff4 <HAL_RCC_GetSysClockFreq+0x2f0>
 8003f16:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003f1a:	4b2f      	ldr	r3, [pc, #188]	@ (8003fd8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003f1c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003f1e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003f22:	ee07 3a90 	vmov	s15, r3
 8003f26:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003f2a:	ed97 6a02 	vldr	s12, [r7, #8]
 8003f2e:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 8003fe8 <HAL_RCC_GetSysClockFreq+0x2e4>
 8003f32:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003f36:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003f3a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003f3e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003f42:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003f46:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8003f4a:	e021      	b.n	8003f90 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8003f4c:	693b      	ldr	r3, [r7, #16]
 8003f4e:	ee07 3a90 	vmov	s15, r3
 8003f52:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003f56:	eddf 6a26 	vldr	s13, [pc, #152]	@ 8003ff0 <HAL_RCC_GetSysClockFreq+0x2ec>
 8003f5a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003f5e:	4b1e      	ldr	r3, [pc, #120]	@ (8003fd8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003f60:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003f62:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003f66:	ee07 3a90 	vmov	s15, r3
 8003f6a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003f6e:	ed97 6a02 	vldr	s12, [r7, #8]
 8003f72:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 8003fe8 <HAL_RCC_GetSysClockFreq+0x2e4>
 8003f76:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003f7a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003f7e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003f82:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003f86:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003f8a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8003f8e:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8003f90:	4b11      	ldr	r3, [pc, #68]	@ (8003fd8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003f92:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003f94:	0a5b      	lsrs	r3, r3, #9
 8003f96:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003f9a:	3301      	adds	r3, #1
 8003f9c:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8003f9e:	683b      	ldr	r3, [r7, #0]
 8003fa0:	ee07 3a90 	vmov	s15, r3
 8003fa4:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8003fa8:	edd7 6a07 	vldr	s13, [r7, #28]
 8003fac:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003fb0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003fb4:	ee17 3a90 	vmov	r3, s15
 8003fb8:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 8003fba:	e005      	b.n	8003fc8 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8003fbc:	2300      	movs	r3, #0
 8003fbe:	61bb      	str	r3, [r7, #24]
      break;
 8003fc0:	e002      	b.n	8003fc8 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 8003fc2:	4b07      	ldr	r3, [pc, #28]	@ (8003fe0 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8003fc4:	61bb      	str	r3, [r7, #24]
      break;
 8003fc6:	bf00      	nop
  }

  return sysclockfreq;
 8003fc8:	69bb      	ldr	r3, [r7, #24]
}
 8003fca:	4618      	mov	r0, r3
 8003fcc:	3724      	adds	r7, #36	@ 0x24
 8003fce:	46bd      	mov	sp, r7
 8003fd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fd4:	4770      	bx	lr
 8003fd6:	bf00      	nop
 8003fd8:	58024400 	.word	0x58024400
 8003fdc:	03d09000 	.word	0x03d09000
 8003fe0:	003d0900 	.word	0x003d0900
 8003fe4:	02dc6c00 	.word	0x02dc6c00
 8003fe8:	46000000 	.word	0x46000000
 8003fec:	4c742400 	.word	0x4c742400
 8003ff0:	4a742400 	.word	0x4a742400
 8003ff4:	4c371b00 	.word	0x4c371b00

08003ff8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003ff8:	b580      	push	{r7, lr}
 8003ffa:	b082      	sub	sp, #8
 8003ffc:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8003ffe:	f7ff fe81 	bl	8003d04 <HAL_RCC_GetSysClockFreq>
 8004002:	4602      	mov	r2, r0
 8004004:	4b10      	ldr	r3, [pc, #64]	@ (8004048 <HAL_RCC_GetHCLKFreq+0x50>)
 8004006:	699b      	ldr	r3, [r3, #24]
 8004008:	0a1b      	lsrs	r3, r3, #8
 800400a:	f003 030f 	and.w	r3, r3, #15
 800400e:	490f      	ldr	r1, [pc, #60]	@ (800404c <HAL_RCC_GetHCLKFreq+0x54>)
 8004010:	5ccb      	ldrb	r3, [r1, r3]
 8004012:	f003 031f 	and.w	r3, r3, #31
 8004016:	fa22 f303 	lsr.w	r3, r2, r3
 800401a:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800401c:	4b0a      	ldr	r3, [pc, #40]	@ (8004048 <HAL_RCC_GetHCLKFreq+0x50>)
 800401e:	699b      	ldr	r3, [r3, #24]
 8004020:	f003 030f 	and.w	r3, r3, #15
 8004024:	4a09      	ldr	r2, [pc, #36]	@ (800404c <HAL_RCC_GetHCLKFreq+0x54>)
 8004026:	5cd3      	ldrb	r3, [r2, r3]
 8004028:	f003 031f 	and.w	r3, r3, #31
 800402c:	687a      	ldr	r2, [r7, #4]
 800402e:	fa22 f303 	lsr.w	r3, r2, r3
 8004032:	4a07      	ldr	r2, [pc, #28]	@ (8004050 <HAL_RCC_GetHCLKFreq+0x58>)
 8004034:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8004036:	4a07      	ldr	r2, [pc, #28]	@ (8004054 <HAL_RCC_GetHCLKFreq+0x5c>)
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 800403c:	4b04      	ldr	r3, [pc, #16]	@ (8004050 <HAL_RCC_GetHCLKFreq+0x58>)
 800403e:	681b      	ldr	r3, [r3, #0]
}
 8004040:	4618      	mov	r0, r3
 8004042:	3708      	adds	r7, #8
 8004044:	46bd      	mov	sp, r7
 8004046:	bd80      	pop	{r7, pc}
 8004048:	58024400 	.word	0x58024400
 800404c:	0800a868 	.word	0x0800a868
 8004050:	24000004 	.word	0x24000004
 8004054:	24000000 	.word	0x24000000

08004058 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004058:	b580      	push	{r7, lr}
 800405a:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 800405c:	f7ff ffcc 	bl	8003ff8 <HAL_RCC_GetHCLKFreq>
 8004060:	4602      	mov	r2, r0
 8004062:	4b06      	ldr	r3, [pc, #24]	@ (800407c <HAL_RCC_GetPCLK1Freq+0x24>)
 8004064:	69db      	ldr	r3, [r3, #28]
 8004066:	091b      	lsrs	r3, r3, #4
 8004068:	f003 0307 	and.w	r3, r3, #7
 800406c:	4904      	ldr	r1, [pc, #16]	@ (8004080 <HAL_RCC_GetPCLK1Freq+0x28>)
 800406e:	5ccb      	ldrb	r3, [r1, r3]
 8004070:	f003 031f 	and.w	r3, r3, #31
 8004074:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8004078:	4618      	mov	r0, r3
 800407a:	bd80      	pop	{r7, pc}
 800407c:	58024400 	.word	0x58024400
 8004080:	0800a868 	.word	0x0800a868

08004084 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004084:	b580      	push	{r7, lr}
 8004086:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8004088:	f7ff ffb6 	bl	8003ff8 <HAL_RCC_GetHCLKFreq>
 800408c:	4602      	mov	r2, r0
 800408e:	4b06      	ldr	r3, [pc, #24]	@ (80040a8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004090:	69db      	ldr	r3, [r3, #28]
 8004092:	0a1b      	lsrs	r3, r3, #8
 8004094:	f003 0307 	and.w	r3, r3, #7
 8004098:	4904      	ldr	r1, [pc, #16]	@ (80040ac <HAL_RCC_GetPCLK2Freq+0x28>)
 800409a:	5ccb      	ldrb	r3, [r1, r3]
 800409c:	f003 031f 	and.w	r3, r3, #31
 80040a0:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 80040a4:	4618      	mov	r0, r3
 80040a6:	bd80      	pop	{r7, pc}
 80040a8:	58024400 	.word	0x58024400
 80040ac:	0800a868 	.word	0x0800a868

080040b0 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency: Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80040b0:	b480      	push	{r7}
 80040b2:	b083      	sub	sp, #12
 80040b4:	af00      	add	r7, sp, #0
 80040b6:	6078      	str	r0, [r7, #4]
 80040b8:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_D1PCLK1 | RCC_CLOCKTYPE_PCLK1 |
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	223f      	movs	r2, #63	@ 0x3f
 80040be:	601a      	str	r2, [r3, #0]
                                 RCC_CLOCKTYPE_PCLK2 |  RCC_CLOCKTYPE_D3PCLK1  ;

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80040c0:	4b1a      	ldr	r3, [pc, #104]	@ (800412c <HAL_RCC_GetClockConfig+0x7c>)
 80040c2:	691b      	ldr	r3, [r3, #16]
 80040c4:	f003 0207 	and.w	r2, r3, #7
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	605a      	str	r2, [r3, #4]

#if defined(RCC_D1CFGR_D1CPRE)
  /* Get the SYSCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1CPRE);
 80040cc:	4b17      	ldr	r3, [pc, #92]	@ (800412c <HAL_RCC_GetClockConfig+0x7c>)
 80040ce:	699b      	ldr	r3, [r3, #24]
 80040d0:	f403 6270 	and.w	r2, r3, #3840	@ 0xf00
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	609a      	str	r2, [r3, #8]

  /* Get the D1HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_HPRE);
 80040d8:	4b14      	ldr	r3, [pc, #80]	@ (800412c <HAL_RCC_GetClockConfig+0x7c>)
 80040da:	699b      	ldr	r3, [r3, #24]
 80040dc:	f003 020f 	and.w	r2, r3, #15
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	60da      	str	r2, [r3, #12]

  /* Get the APB3 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB3CLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1PPRE);
 80040e4:	4b11      	ldr	r3, [pc, #68]	@ (800412c <HAL_RCC_GetClockConfig+0x7c>)
 80040e6:	699b      	ldr	r3, [r3, #24]
 80040e8:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	611a      	str	r2, [r3, #16]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1);
 80040f0:	4b0e      	ldr	r3, [pc, #56]	@ (800412c <HAL_RCC_GetClockConfig+0x7c>)
 80040f2:	69db      	ldr	r3, [r3, #28]
 80040f4:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	615a      	str	r2, [r3, #20]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2);
 80040fc:	4b0b      	ldr	r3, [pc, #44]	@ (800412c <HAL_RCC_GetClockConfig+0x7c>)
 80040fe:	69db      	ldr	r3, [r3, #28]
 8004100:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	619a      	str	r2, [r3, #24]

  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->D3CFGR & RCC_D3CFGR_D3PPRE);
 8004108:	4b08      	ldr	r3, [pc, #32]	@ (800412c <HAL_RCC_GetClockConfig+0x7c>)
 800410a:	6a1b      	ldr	r3, [r3, #32]
 800410c:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	61da      	str	r2, [r3, #28]
  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE);
#endif

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8004114:	4b06      	ldr	r3, [pc, #24]	@ (8004130 <HAL_RCC_GetClockConfig+0x80>)
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	f003 020f 	and.w	r2, r3, #15
 800411c:	683b      	ldr	r3, [r7, #0]
 800411e:	601a      	str	r2, [r3, #0]
}
 8004120:	bf00      	nop
 8004122:	370c      	adds	r7, #12
 8004124:	46bd      	mov	sp, r7
 8004126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800412a:	4770      	bx	lr
 800412c:	58024400 	.word	0x58024400
 8004130:	52002000 	.word	0x52002000

08004134 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004134:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004138:	b0c6      	sub	sp, #280	@ 0x118
 800413a:	af00      	add	r7, sp, #0
 800413c:	f8c7 0104 	str.w	r0, [r7, #260]	@ 0x104
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004140:	2300      	movs	r3, #0
 8004142:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004146:	2300      	movs	r3, #0
 8004148:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800414c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004150:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004154:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 8004158:	2500      	movs	r5, #0
 800415a:	ea54 0305 	orrs.w	r3, r4, r5
 800415e:	d049      	beq.n	80041f4 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8004160:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004164:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004166:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800416a:	d02f      	beq.n	80041cc <HAL_RCCEx_PeriphCLKConfig+0x98>
 800416c:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8004170:	d828      	bhi.n	80041c4 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8004172:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8004176:	d01a      	beq.n	80041ae <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8004178:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800417c:	d822      	bhi.n	80041c4 <HAL_RCCEx_PeriphCLKConfig+0x90>
 800417e:	2b00      	cmp	r3, #0
 8004180:	d003      	beq.n	800418a <HAL_RCCEx_PeriphCLKConfig+0x56>
 8004182:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004186:	d007      	beq.n	8004198 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8004188:	e01c      	b.n	80041c4 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800418a:	4bab      	ldr	r3, [pc, #684]	@ (8004438 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800418c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800418e:	4aaa      	ldr	r2, [pc, #680]	@ (8004438 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8004190:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004194:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8004196:	e01a      	b.n	80041ce <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8004198:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800419c:	3308      	adds	r3, #8
 800419e:	2102      	movs	r1, #2
 80041a0:	4618      	mov	r0, r3
 80041a2:	f001 fc25 	bl	80059f0 <RCCEx_PLL2_Config>
 80041a6:	4603      	mov	r3, r0
 80041a8:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80041ac:	e00f      	b.n	80041ce <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80041ae:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80041b2:	3328      	adds	r3, #40	@ 0x28
 80041b4:	2102      	movs	r1, #2
 80041b6:	4618      	mov	r0, r3
 80041b8:	f001 fccc 	bl	8005b54 <RCCEx_PLL3_Config>
 80041bc:	4603      	mov	r3, r0
 80041be:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80041c2:	e004      	b.n	80041ce <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80041c4:	2301      	movs	r3, #1
 80041c6:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80041ca:	e000      	b.n	80041ce <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 80041cc:	bf00      	nop
    }

    if (ret == HAL_OK)
 80041ce:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80041d2:	2b00      	cmp	r3, #0
 80041d4:	d10a      	bne.n	80041ec <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 80041d6:	4b98      	ldr	r3, [pc, #608]	@ (8004438 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80041d8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80041da:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 80041de:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80041e2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80041e4:	4a94      	ldr	r2, [pc, #592]	@ (8004438 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80041e6:	430b      	orrs	r3, r1
 80041e8:	6513      	str	r3, [r2, #80]	@ 0x50
 80041ea:	e003      	b.n	80041f4 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80041ec:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80041f0:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80041f4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80041f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80041fc:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 8004200:	f04f 0900 	mov.w	r9, #0
 8004204:	ea58 0309 	orrs.w	r3, r8, r9
 8004208:	d047      	beq.n	800429a <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 800420a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800420e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004210:	2b04      	cmp	r3, #4
 8004212:	d82a      	bhi.n	800426a <HAL_RCCEx_PeriphCLKConfig+0x136>
 8004214:	a201      	add	r2, pc, #4	@ (adr r2, 800421c <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8004216:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800421a:	bf00      	nop
 800421c:	08004231 	.word	0x08004231
 8004220:	0800423f 	.word	0x0800423f
 8004224:	08004255 	.word	0x08004255
 8004228:	08004273 	.word	0x08004273
 800422c:	08004273 	.word	0x08004273
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004230:	4b81      	ldr	r3, [pc, #516]	@ (8004438 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8004232:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004234:	4a80      	ldr	r2, [pc, #512]	@ (8004438 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8004236:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800423a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800423c:	e01a      	b.n	8004274 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800423e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004242:	3308      	adds	r3, #8
 8004244:	2100      	movs	r1, #0
 8004246:	4618      	mov	r0, r3
 8004248:	f001 fbd2 	bl	80059f0 <RCCEx_PLL2_Config>
 800424c:	4603      	mov	r3, r0
 800424e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8004252:	e00f      	b.n	8004274 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8004254:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004258:	3328      	adds	r3, #40	@ 0x28
 800425a:	2100      	movs	r1, #0
 800425c:	4618      	mov	r0, r3
 800425e:	f001 fc79 	bl	8005b54 <RCCEx_PLL3_Config>
 8004262:	4603      	mov	r3, r0
 8004264:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8004268:	e004      	b.n	8004274 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800426a:	2301      	movs	r3, #1
 800426c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8004270:	e000      	b.n	8004274 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 8004272:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004274:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004278:	2b00      	cmp	r3, #0
 800427a:	d10a      	bne.n	8004292 <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800427c:	4b6e      	ldr	r3, [pc, #440]	@ (8004438 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800427e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004280:	f023 0107 	bic.w	r1, r3, #7
 8004284:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004288:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800428a:	4a6b      	ldr	r2, [pc, #428]	@ (8004438 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800428c:	430b      	orrs	r3, r1
 800428e:	6513      	str	r3, [r2, #80]	@ 0x50
 8004290:	e003      	b.n	800429a <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004292:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004296:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 800429a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800429e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80042a2:	f402 6a80 	and.w	sl, r2, #1024	@ 0x400
 80042a6:	f04f 0b00 	mov.w	fp, #0
 80042aa:	ea5a 030b 	orrs.w	r3, sl, fp
 80042ae:	d05b      	beq.n	8004368 <HAL_RCCEx_PeriphCLKConfig+0x234>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 80042b0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80042b4:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80042b8:	f5b3 0f20 	cmp.w	r3, #10485760	@ 0xa00000
 80042bc:	d03b      	beq.n	8004336 <HAL_RCCEx_PeriphCLKConfig+0x202>
 80042be:	f5b3 0f20 	cmp.w	r3, #10485760	@ 0xa00000
 80042c2:	d834      	bhi.n	800432e <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 80042c4:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80042c8:	d037      	beq.n	800433a <HAL_RCCEx_PeriphCLKConfig+0x206>
 80042ca:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80042ce:	d82e      	bhi.n	800432e <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 80042d0:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 80042d4:	d033      	beq.n	800433e <HAL_RCCEx_PeriphCLKConfig+0x20a>
 80042d6:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 80042da:	d828      	bhi.n	800432e <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 80042dc:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80042e0:	d01a      	beq.n	8004318 <HAL_RCCEx_PeriphCLKConfig+0x1e4>
 80042e2:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80042e6:	d822      	bhi.n	800432e <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 80042e8:	2b00      	cmp	r3, #0
 80042ea:	d003      	beq.n	80042f4 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
 80042ec:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80042f0:	d007      	beq.n	8004302 <HAL_RCCEx_PeriphCLKConfig+0x1ce>
 80042f2:	e01c      	b.n	800432e <HAL_RCCEx_PeriphCLKConfig+0x1fa>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80042f4:	4b50      	ldr	r3, [pc, #320]	@ (8004438 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80042f6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80042f8:	4a4f      	ldr	r2, [pc, #316]	@ (8004438 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80042fa:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80042fe:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8004300:	e01e      	b.n	8004340 <HAL_RCCEx_PeriphCLKConfig+0x20c>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004302:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004306:	3308      	adds	r3, #8
 8004308:	2100      	movs	r1, #0
 800430a:	4618      	mov	r0, r3
 800430c:	f001 fb70 	bl	80059f0 <RCCEx_PLL2_Config>
 8004310:	4603      	mov	r3, r0
 8004312:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8004316:	e013      	b.n	8004340 <HAL_RCCEx_PeriphCLKConfig+0x20c>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8004318:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800431c:	3328      	adds	r3, #40	@ 0x28
 800431e:	2100      	movs	r1, #0
 8004320:	4618      	mov	r0, r3
 8004322:	f001 fc17 	bl	8005b54 <RCCEx_PLL3_Config>
 8004326:	4603      	mov	r3, r0
 8004328:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800432c:	e008      	b.n	8004340 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 800432e:	2301      	movs	r3, #1
 8004330:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8004334:	e004      	b.n	8004340 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 8004336:	bf00      	nop
 8004338:	e002      	b.n	8004340 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 800433a:	bf00      	nop
 800433c:	e000      	b.n	8004340 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 800433e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004340:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004344:	2b00      	cmp	r3, #0
 8004346:	d10b      	bne.n	8004360 <HAL_RCCEx_PeriphCLKConfig+0x22c>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8004348:	4b3b      	ldr	r3, [pc, #236]	@ (8004438 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800434a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800434c:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 8004350:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004354:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8004358:	4a37      	ldr	r2, [pc, #220]	@ (8004438 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800435a:	430b      	orrs	r3, r1
 800435c:	6593      	str	r3, [r2, #88]	@ 0x58
 800435e:	e003      	b.n	8004368 <HAL_RCCEx_PeriphCLKConfig+0x234>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004360:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004364:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8004368:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800436c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004370:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 8004374:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8004378:	2300      	movs	r3, #0
 800437a:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 800437e:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 8004382:	460b      	mov	r3, r1
 8004384:	4313      	orrs	r3, r2
 8004386:	d05d      	beq.n	8004444 <HAL_RCCEx_PeriphCLKConfig+0x310>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 8004388:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800438c:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8004390:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 8004394:	d03b      	beq.n	800440e <HAL_RCCEx_PeriphCLKConfig+0x2da>
 8004396:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 800439a:	d834      	bhi.n	8004406 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 800439c:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80043a0:	d037      	beq.n	8004412 <HAL_RCCEx_PeriphCLKConfig+0x2de>
 80043a2:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80043a6:	d82e      	bhi.n	8004406 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 80043a8:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80043ac:	d033      	beq.n	8004416 <HAL_RCCEx_PeriphCLKConfig+0x2e2>
 80043ae:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80043b2:	d828      	bhi.n	8004406 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 80043b4:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80043b8:	d01a      	beq.n	80043f0 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
 80043ba:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80043be:	d822      	bhi.n	8004406 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 80043c0:	2b00      	cmp	r3, #0
 80043c2:	d003      	beq.n	80043cc <HAL_RCCEx_PeriphCLKConfig+0x298>
 80043c4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80043c8:	d007      	beq.n	80043da <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 80043ca:	e01c      	b.n	8004406 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80043cc:	4b1a      	ldr	r3, [pc, #104]	@ (8004438 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80043ce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80043d0:	4a19      	ldr	r2, [pc, #100]	@ (8004438 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80043d2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80043d6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80043d8:	e01e      	b.n	8004418 <HAL_RCCEx_PeriphCLKConfig+0x2e4>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80043da:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80043de:	3308      	adds	r3, #8
 80043e0:	2100      	movs	r1, #0
 80043e2:	4618      	mov	r0, r3
 80043e4:	f001 fb04 	bl	80059f0 <RCCEx_PLL2_Config>
 80043e8:	4603      	mov	r3, r0
 80043ea:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 80043ee:	e013      	b.n	8004418 <HAL_RCCEx_PeriphCLKConfig+0x2e4>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80043f0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80043f4:	3328      	adds	r3, #40	@ 0x28
 80043f6:	2100      	movs	r1, #0
 80043f8:	4618      	mov	r0, r3
 80043fa:	f001 fbab 	bl	8005b54 <RCCEx_PLL3_Config>
 80043fe:	4603      	mov	r3, r0
 8004400:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8004404:	e008      	b.n	8004418 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8004406:	2301      	movs	r3, #1
 8004408:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800440c:	e004      	b.n	8004418 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 800440e:	bf00      	nop
 8004410:	e002      	b.n	8004418 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 8004412:	bf00      	nop
 8004414:	e000      	b.n	8004418 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 8004416:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004418:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800441c:	2b00      	cmp	r3, #0
 800441e:	d10d      	bne.n	800443c <HAL_RCCEx_PeriphCLKConfig+0x308>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8004420:	4b05      	ldr	r3, [pc, #20]	@ (8004438 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8004422:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004424:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 8004428:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800442c:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8004430:	4a01      	ldr	r2, [pc, #4]	@ (8004438 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8004432:	430b      	orrs	r3, r1
 8004434:	6593      	str	r3, [r2, #88]	@ 0x58
 8004436:	e005      	b.n	8004444 <HAL_RCCEx_PeriphCLKConfig+0x310>
 8004438:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800443c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004440:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
  }
#endif  /*QUADSPI*/

#if defined(OCTOSPI1) || defined(OCTOSPI2)
  /*---------------------------- OCTOSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8004444:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004448:	e9d3 2300 	ldrd	r2, r3, [r3]
 800444c:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 8004450:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8004454:	2300      	movs	r3, #0
 8004456:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 800445a:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 800445e:	460b      	mov	r3, r1
 8004460:	4313      	orrs	r3, r2
 8004462:	d03a      	beq.n	80044da <HAL_RCCEx_PeriphCLKConfig+0x3a6>
  {
    switch (PeriphClkInit->OspiClockSelection)
 8004464:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004468:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800446a:	2b30      	cmp	r3, #48	@ 0x30
 800446c:	d01f      	beq.n	80044ae <HAL_RCCEx_PeriphCLKConfig+0x37a>
 800446e:	2b30      	cmp	r3, #48	@ 0x30
 8004470:	d819      	bhi.n	80044a6 <HAL_RCCEx_PeriphCLKConfig+0x372>
 8004472:	2b20      	cmp	r3, #32
 8004474:	d00c      	beq.n	8004490 <HAL_RCCEx_PeriphCLKConfig+0x35c>
 8004476:	2b20      	cmp	r3, #32
 8004478:	d815      	bhi.n	80044a6 <HAL_RCCEx_PeriphCLKConfig+0x372>
 800447a:	2b00      	cmp	r3, #0
 800447c:	d019      	beq.n	80044b2 <HAL_RCCEx_PeriphCLKConfig+0x37e>
 800447e:	2b10      	cmp	r3, #16
 8004480:	d111      	bne.n	80044a6 <HAL_RCCEx_PeriphCLKConfig+0x372>
    {
      case RCC_OSPICLKSOURCE_PLL:      /* PLL is used as clock source for OSPI*/
        /* Enable OSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004482:	4baa      	ldr	r3, [pc, #680]	@ (800472c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8004484:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004486:	4aa9      	ldr	r2, [pc, #676]	@ (800472c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8004488:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800448c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* OSPI clock source configuration done later after clock selection check */
        break;
 800448e:	e011      	b.n	80044b4 <HAL_RCCEx_PeriphCLKConfig+0x380>

      case RCC_OSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for OSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8004490:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004494:	3308      	adds	r3, #8
 8004496:	2102      	movs	r1, #2
 8004498:	4618      	mov	r0, r3
 800449a:	f001 faa9 	bl	80059f0 <RCCEx_PLL2_Config>
 800449e:	4603      	mov	r3, r0
 80044a0:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* OSPI clock source configuration done later after clock selection check */
        break;
 80044a4:	e006      	b.n	80044b4 <HAL_RCCEx_PeriphCLKConfig+0x380>
      case RCC_OSPICLKSOURCE_HCLK:
        /* HCLK clock selected as OSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 80044a6:	2301      	movs	r3, #1
 80044a8:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80044ac:	e002      	b.n	80044b4 <HAL_RCCEx_PeriphCLKConfig+0x380>
        break;
 80044ae:	bf00      	nop
 80044b0:	e000      	b.n	80044b4 <HAL_RCCEx_PeriphCLKConfig+0x380>
        break;
 80044b2:	bf00      	nop
    }

    if (ret == HAL_OK)
 80044b4:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80044b8:	2b00      	cmp	r3, #0
 80044ba:	d10a      	bne.n	80044d2 <HAL_RCCEx_PeriphCLKConfig+0x39e>
    {
      /* Set the source of OSPI clock*/
      __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 80044bc:	4b9b      	ldr	r3, [pc, #620]	@ (800472c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80044be:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80044c0:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 80044c4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80044c8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80044ca:	4a98      	ldr	r2, [pc, #608]	@ (800472c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80044cc:	430b      	orrs	r3, r1
 80044ce:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80044d0:	e003      	b.n	80044da <HAL_RCCEx_PeriphCLKConfig+0x3a6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80044d2:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80044d6:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 80044da:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80044de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80044e2:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 80044e6:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80044ea:	2300      	movs	r3, #0
 80044ec:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 80044f0:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 80044f4:	460b      	mov	r3, r1
 80044f6:	4313      	orrs	r3, r2
 80044f8:	d051      	beq.n	800459e <HAL_RCCEx_PeriphCLKConfig+0x46a>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 80044fa:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80044fe:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004500:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004504:	d035      	beq.n	8004572 <HAL_RCCEx_PeriphCLKConfig+0x43e>
 8004506:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800450a:	d82e      	bhi.n	800456a <HAL_RCCEx_PeriphCLKConfig+0x436>
 800450c:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8004510:	d031      	beq.n	8004576 <HAL_RCCEx_PeriphCLKConfig+0x442>
 8004512:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8004516:	d828      	bhi.n	800456a <HAL_RCCEx_PeriphCLKConfig+0x436>
 8004518:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800451c:	d01a      	beq.n	8004554 <HAL_RCCEx_PeriphCLKConfig+0x420>
 800451e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004522:	d822      	bhi.n	800456a <HAL_RCCEx_PeriphCLKConfig+0x436>
 8004524:	2b00      	cmp	r3, #0
 8004526:	d003      	beq.n	8004530 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
 8004528:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800452c:	d007      	beq.n	800453e <HAL_RCCEx_PeriphCLKConfig+0x40a>
 800452e:	e01c      	b.n	800456a <HAL_RCCEx_PeriphCLKConfig+0x436>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004530:	4b7e      	ldr	r3, [pc, #504]	@ (800472c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8004532:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004534:	4a7d      	ldr	r2, [pc, #500]	@ (800472c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8004536:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800453a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800453c:	e01c      	b.n	8004578 <HAL_RCCEx_PeriphCLKConfig+0x444>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800453e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004542:	3308      	adds	r3, #8
 8004544:	2100      	movs	r1, #0
 8004546:	4618      	mov	r0, r3
 8004548:	f001 fa52 	bl	80059f0 <RCCEx_PLL2_Config>
 800454c:	4603      	mov	r3, r0
 800454e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8004552:	e011      	b.n	8004578 <HAL_RCCEx_PeriphCLKConfig+0x444>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8004554:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004558:	3328      	adds	r3, #40	@ 0x28
 800455a:	2100      	movs	r1, #0
 800455c:	4618      	mov	r0, r3
 800455e:	f001 faf9 	bl	8005b54 <RCCEx_PLL3_Config>
 8004562:	4603      	mov	r3, r0
 8004564:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8004568:	e006      	b.n	8004578 <HAL_RCCEx_PeriphCLKConfig+0x444>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800456a:	2301      	movs	r3, #1
 800456c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8004570:	e002      	b.n	8004578 <HAL_RCCEx_PeriphCLKConfig+0x444>
        break;
 8004572:	bf00      	nop
 8004574:	e000      	b.n	8004578 <HAL_RCCEx_PeriphCLKConfig+0x444>
        break;
 8004576:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004578:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800457c:	2b00      	cmp	r3, #0
 800457e:	d10a      	bne.n	8004596 <HAL_RCCEx_PeriphCLKConfig+0x462>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8004580:	4b6a      	ldr	r3, [pc, #424]	@ (800472c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8004582:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004584:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 8004588:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800458c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800458e:	4a67      	ldr	r2, [pc, #412]	@ (800472c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8004590:	430b      	orrs	r3, r1
 8004592:	6513      	str	r3, [r2, #80]	@ 0x50
 8004594:	e003      	b.n	800459e <HAL_RCCEx_PeriphCLKConfig+0x46a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004596:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800459a:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 800459e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80045a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80045a6:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 80045aa:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80045ae:	2300      	movs	r3, #0
 80045b0:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80045b4:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 80045b8:	460b      	mov	r3, r1
 80045ba:	4313      	orrs	r3, r2
 80045bc:	d053      	beq.n	8004666 <HAL_RCCEx_PeriphCLKConfig+0x532>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 80045be:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80045c2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80045c4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80045c8:	d033      	beq.n	8004632 <HAL_RCCEx_PeriphCLKConfig+0x4fe>
 80045ca:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80045ce:	d82c      	bhi.n	800462a <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 80045d0:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80045d4:	d02f      	beq.n	8004636 <HAL_RCCEx_PeriphCLKConfig+0x502>
 80045d6:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80045da:	d826      	bhi.n	800462a <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 80045dc:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80045e0:	d02b      	beq.n	800463a <HAL_RCCEx_PeriphCLKConfig+0x506>
 80045e2:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80045e6:	d820      	bhi.n	800462a <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 80045e8:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80045ec:	d012      	beq.n	8004614 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
 80045ee:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80045f2:	d81a      	bhi.n	800462a <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 80045f4:	2b00      	cmp	r3, #0
 80045f6:	d022      	beq.n	800463e <HAL_RCCEx_PeriphCLKConfig+0x50a>
 80045f8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80045fc:	d115      	bne.n	800462a <HAL_RCCEx_PeriphCLKConfig+0x4f6>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80045fe:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004602:	3308      	adds	r3, #8
 8004604:	2101      	movs	r1, #1
 8004606:	4618      	mov	r0, r3
 8004608:	f001 f9f2 	bl	80059f0 <RCCEx_PLL2_Config>
 800460c:	4603      	mov	r3, r0
 800460e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8004612:	e015      	b.n	8004640 <HAL_RCCEx_PeriphCLKConfig+0x50c>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8004614:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004618:	3328      	adds	r3, #40	@ 0x28
 800461a:	2101      	movs	r1, #1
 800461c:	4618      	mov	r0, r3
 800461e:	f001 fa99 	bl	8005b54 <RCCEx_PLL3_Config>
 8004622:	4603      	mov	r3, r0
 8004624:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8004628:	e00a      	b.n	8004640 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800462a:	2301      	movs	r3, #1
 800462c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8004630:	e006      	b.n	8004640 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 8004632:	bf00      	nop
 8004634:	e004      	b.n	8004640 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 8004636:	bf00      	nop
 8004638:	e002      	b.n	8004640 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 800463a:	bf00      	nop
 800463c:	e000      	b.n	8004640 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 800463e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004640:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004644:	2b00      	cmp	r3, #0
 8004646:	d10a      	bne.n	800465e <HAL_RCCEx_PeriphCLKConfig+0x52a>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8004648:	4b38      	ldr	r3, [pc, #224]	@ (800472c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800464a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800464c:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 8004650:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004654:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004656:	4a35      	ldr	r2, [pc, #212]	@ (800472c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8004658:	430b      	orrs	r3, r1
 800465a:	6513      	str	r3, [r2, #80]	@ 0x50
 800465c:	e003      	b.n	8004666 <HAL_RCCEx_PeriphCLKConfig+0x532>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800465e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004662:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8004666:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800466a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800466e:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 8004672:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8004676:	2300      	movs	r3, #0
 8004678:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 800467c:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8004680:	460b      	mov	r3, r1
 8004682:	4313      	orrs	r3, r2
 8004684:	d058      	beq.n	8004738 <HAL_RCCEx_PeriphCLKConfig+0x604>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 8004686:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800468a:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 800468e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004692:	d033      	beq.n	80046fc <HAL_RCCEx_PeriphCLKConfig+0x5c8>
 8004694:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004698:	d82c      	bhi.n	80046f4 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 800469a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800469e:	d02f      	beq.n	8004700 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
 80046a0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80046a4:	d826      	bhi.n	80046f4 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 80046a6:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80046aa:	d02b      	beq.n	8004704 <HAL_RCCEx_PeriphCLKConfig+0x5d0>
 80046ac:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80046b0:	d820      	bhi.n	80046f4 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 80046b2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80046b6:	d012      	beq.n	80046de <HAL_RCCEx_PeriphCLKConfig+0x5aa>
 80046b8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80046bc:	d81a      	bhi.n	80046f4 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 80046be:	2b00      	cmp	r3, #0
 80046c0:	d022      	beq.n	8004708 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 80046c2:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80046c6:	d115      	bne.n	80046f4 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80046c8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80046cc:	3308      	adds	r3, #8
 80046ce:	2101      	movs	r1, #1
 80046d0:	4618      	mov	r0, r3
 80046d2:	f001 f98d 	bl	80059f0 <RCCEx_PLL2_Config>
 80046d6:	4603      	mov	r3, r0
 80046d8:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 80046dc:	e015      	b.n	800470a <HAL_RCCEx_PeriphCLKConfig+0x5d6>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80046de:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80046e2:	3328      	adds	r3, #40	@ 0x28
 80046e4:	2101      	movs	r1, #1
 80046e6:	4618      	mov	r0, r3
 80046e8:	f001 fa34 	bl	8005b54 <RCCEx_PLL3_Config>
 80046ec:	4603      	mov	r3, r0
 80046ee:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 80046f2:	e00a      	b.n	800470a <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 80046f4:	2301      	movs	r3, #1
 80046f6:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80046fa:	e006      	b.n	800470a <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 80046fc:	bf00      	nop
 80046fe:	e004      	b.n	800470a <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8004700:	bf00      	nop
 8004702:	e002      	b.n	800470a <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8004704:	bf00      	nop
 8004706:	e000      	b.n	800470a <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8004708:	bf00      	nop
    }

    if (ret == HAL_OK)
 800470a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800470e:	2b00      	cmp	r3, #0
 8004710:	d10e      	bne.n	8004730 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8004712:	4b06      	ldr	r3, [pc, #24]	@ (800472c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8004714:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004716:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 800471a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800471e:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8004722:	4a02      	ldr	r2, [pc, #8]	@ (800472c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8004724:	430b      	orrs	r3, r1
 8004726:	6593      	str	r3, [r2, #88]	@ 0x58
 8004728:	e006      	b.n	8004738 <HAL_RCCEx_PeriphCLKConfig+0x604>
 800472a:	bf00      	nop
 800472c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004730:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004734:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8004738:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800473c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004740:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 8004744:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8004748:	2300      	movs	r3, #0
 800474a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 800474e:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 8004752:	460b      	mov	r3, r1
 8004754:	4313      	orrs	r3, r2
 8004756:	d037      	beq.n	80047c8 <HAL_RCCEx_PeriphCLKConfig+0x694>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8004758:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800475c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800475e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004762:	d00e      	beq.n	8004782 <HAL_RCCEx_PeriphCLKConfig+0x64e>
 8004764:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004768:	d816      	bhi.n	8004798 <HAL_RCCEx_PeriphCLKConfig+0x664>
 800476a:	2b00      	cmp	r3, #0
 800476c:	d018      	beq.n	80047a0 <HAL_RCCEx_PeriphCLKConfig+0x66c>
 800476e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8004772:	d111      	bne.n	8004798 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004774:	4bc4      	ldr	r3, [pc, #784]	@ (8004a88 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004776:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004778:	4ac3      	ldr	r2, [pc, #780]	@ (8004a88 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800477a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800477e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8004780:	e00f      	b.n	80047a2 <HAL_RCCEx_PeriphCLKConfig+0x66e>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004782:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004786:	3308      	adds	r3, #8
 8004788:	2101      	movs	r1, #1
 800478a:	4618      	mov	r0, r3
 800478c:	f001 f930 	bl	80059f0 <RCCEx_PLL2_Config>
 8004790:	4603      	mov	r3, r0
 8004792:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8004796:	e004      	b.n	80047a2 <HAL_RCCEx_PeriphCLKConfig+0x66e>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004798:	2301      	movs	r3, #1
 800479a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800479e:	e000      	b.n	80047a2 <HAL_RCCEx_PeriphCLKConfig+0x66e>
        break;
 80047a0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80047a2:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80047a6:	2b00      	cmp	r3, #0
 80047a8:	d10a      	bne.n	80047c0 <HAL_RCCEx_PeriphCLKConfig+0x68c>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80047aa:	4bb7      	ldr	r3, [pc, #732]	@ (8004a88 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80047ac:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80047ae:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 80047b2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80047b6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80047b8:	4ab3      	ldr	r2, [pc, #716]	@ (8004a88 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80047ba:	430b      	orrs	r3, r1
 80047bc:	6513      	str	r3, [r2, #80]	@ 0x50
 80047be:	e003      	b.n	80047c8 <HAL_RCCEx_PeriphCLKConfig+0x694>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80047c0:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80047c4:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 80047c8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80047cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80047d0:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 80047d4:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80047d8:	2300      	movs	r3, #0
 80047da:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80047de:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 80047e2:	460b      	mov	r3, r1
 80047e4:	4313      	orrs	r3, r2
 80047e6:	d039      	beq.n	800485c <HAL_RCCEx_PeriphCLKConfig+0x728>
  {
    switch (PeriphClkInit->FmcClockSelection)
 80047e8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80047ec:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80047ee:	2b03      	cmp	r3, #3
 80047f0:	d81c      	bhi.n	800482c <HAL_RCCEx_PeriphCLKConfig+0x6f8>
 80047f2:	a201      	add	r2, pc, #4	@ (adr r2, 80047f8 <HAL_RCCEx_PeriphCLKConfig+0x6c4>)
 80047f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80047f8:	08004835 	.word	0x08004835
 80047fc:	08004809 	.word	0x08004809
 8004800:	08004817 	.word	0x08004817
 8004804:	08004835 	.word	0x08004835
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004808:	4b9f      	ldr	r3, [pc, #636]	@ (8004a88 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800480a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800480c:	4a9e      	ldr	r2, [pc, #632]	@ (8004a88 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800480e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004812:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8004814:	e00f      	b.n	8004836 <HAL_RCCEx_PeriphCLKConfig+0x702>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8004816:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800481a:	3308      	adds	r3, #8
 800481c:	2102      	movs	r1, #2
 800481e:	4618      	mov	r0, r3
 8004820:	f001 f8e6 	bl	80059f0 <RCCEx_PLL2_Config>
 8004824:	4603      	mov	r3, r0
 8004826:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* FMC clock source configuration done later after clock selection check */
        break;
 800482a:	e004      	b.n	8004836 <HAL_RCCEx_PeriphCLKConfig+0x702>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 800482c:	2301      	movs	r3, #1
 800482e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8004832:	e000      	b.n	8004836 <HAL_RCCEx_PeriphCLKConfig+0x702>
        break;
 8004834:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004836:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800483a:	2b00      	cmp	r3, #0
 800483c:	d10a      	bne.n	8004854 <HAL_RCCEx_PeriphCLKConfig+0x720>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 800483e:	4b92      	ldr	r3, [pc, #584]	@ (8004a88 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004840:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004842:	f023 0103 	bic.w	r1, r3, #3
 8004846:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800484a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800484c:	4a8e      	ldr	r2, [pc, #568]	@ (8004a88 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800484e:	430b      	orrs	r3, r1
 8004850:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8004852:	e003      	b.n	800485c <HAL_RCCEx_PeriphCLKConfig+0x728>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004854:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004858:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800485c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004860:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004864:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 8004868:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800486c:	2300      	movs	r3, #0
 800486e:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8004872:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8004876:	460b      	mov	r3, r1
 8004878:	4313      	orrs	r3, r2
 800487a:	f000 8099 	beq.w	80049b0 <HAL_RCCEx_PeriphCLKConfig+0x87c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800487e:	4b83      	ldr	r3, [pc, #524]	@ (8004a8c <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	4a82      	ldr	r2, [pc, #520]	@ (8004a8c <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8004884:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004888:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800488a:	f7fd fa7f 	bl	8001d8c <HAL_GetTick>
 800488e:	f8c7 0110 	str.w	r0, [r7, #272]	@ 0x110

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004892:	e00b      	b.n	80048ac <HAL_RCCEx_PeriphCLKConfig+0x778>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004894:	f7fd fa7a 	bl	8001d8c <HAL_GetTick>
 8004898:	4602      	mov	r2, r0
 800489a:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 800489e:	1ad3      	subs	r3, r2, r3
 80048a0:	2b64      	cmp	r3, #100	@ 0x64
 80048a2:	d903      	bls.n	80048ac <HAL_RCCEx_PeriphCLKConfig+0x778>
      {
        ret = HAL_TIMEOUT;
 80048a4:	2303      	movs	r3, #3
 80048a6:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80048aa:	e005      	b.n	80048b8 <HAL_RCCEx_PeriphCLKConfig+0x784>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80048ac:	4b77      	ldr	r3, [pc, #476]	@ (8004a8c <HAL_RCCEx_PeriphCLKConfig+0x958>)
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80048b4:	2b00      	cmp	r3, #0
 80048b6:	d0ed      	beq.n	8004894 <HAL_RCCEx_PeriphCLKConfig+0x760>
      }
    }

    if (ret == HAL_OK)
 80048b8:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80048bc:	2b00      	cmp	r3, #0
 80048be:	d173      	bne.n	80049a8 <HAL_RCCEx_PeriphCLKConfig+0x874>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 80048c0:	4b71      	ldr	r3, [pc, #452]	@ (8004a88 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80048c2:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 80048c4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80048c8:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 80048cc:	4053      	eors	r3, r2
 80048ce:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80048d2:	2b00      	cmp	r3, #0
 80048d4:	d015      	beq.n	8004902 <HAL_RCCEx_PeriphCLKConfig+0x7ce>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80048d6:	4b6c      	ldr	r3, [pc, #432]	@ (8004a88 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80048d8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80048da:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80048de:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80048e2:	4b69      	ldr	r3, [pc, #420]	@ (8004a88 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80048e4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80048e6:	4a68      	ldr	r2, [pc, #416]	@ (8004a88 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80048e8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80048ec:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 80048ee:	4b66      	ldr	r3, [pc, #408]	@ (8004a88 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80048f0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80048f2:	4a65      	ldr	r2, [pc, #404]	@ (8004a88 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80048f4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80048f8:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 80048fa:	4a63      	ldr	r2, [pc, #396]	@ (8004a88 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80048fc:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004900:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8004902:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004906:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800490a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800490e:	d118      	bne.n	8004942 <HAL_RCCEx_PeriphCLKConfig+0x80e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004910:	f7fd fa3c 	bl	8001d8c <HAL_GetTick>
 8004914:	f8c7 0110 	str.w	r0, [r7, #272]	@ 0x110

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004918:	e00d      	b.n	8004936 <HAL_RCCEx_PeriphCLKConfig+0x802>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800491a:	f7fd fa37 	bl	8001d8c <HAL_GetTick>
 800491e:	4602      	mov	r2, r0
 8004920:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8004924:	1ad2      	subs	r2, r2, r3
 8004926:	f241 3388 	movw	r3, #5000	@ 0x1388
 800492a:	429a      	cmp	r2, r3
 800492c:	d903      	bls.n	8004936 <HAL_RCCEx_PeriphCLKConfig+0x802>
          {
            ret = HAL_TIMEOUT;
 800492e:	2303      	movs	r3, #3
 8004930:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
            break;
 8004934:	e005      	b.n	8004942 <HAL_RCCEx_PeriphCLKConfig+0x80e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004936:	4b54      	ldr	r3, [pc, #336]	@ (8004a88 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004938:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800493a:	f003 0302 	and.w	r3, r3, #2
 800493e:	2b00      	cmp	r3, #0
 8004940:	d0eb      	beq.n	800491a <HAL_RCCEx_PeriphCLKConfig+0x7e6>
          }
        }
      }

      if (ret == HAL_OK)
 8004942:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004946:	2b00      	cmp	r3, #0
 8004948:	d129      	bne.n	800499e <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800494a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800494e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8004952:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004956:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800495a:	d10e      	bne.n	800497a <HAL_RCCEx_PeriphCLKConfig+0x846>
 800495c:	4b4a      	ldr	r3, [pc, #296]	@ (8004a88 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800495e:	691b      	ldr	r3, [r3, #16]
 8004960:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 8004964:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004968:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800496c:	091a      	lsrs	r2, r3, #4
 800496e:	4b48      	ldr	r3, [pc, #288]	@ (8004a90 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8004970:	4013      	ands	r3, r2
 8004972:	4a45      	ldr	r2, [pc, #276]	@ (8004a88 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004974:	430b      	orrs	r3, r1
 8004976:	6113      	str	r3, [r2, #16]
 8004978:	e005      	b.n	8004986 <HAL_RCCEx_PeriphCLKConfig+0x852>
 800497a:	4b43      	ldr	r3, [pc, #268]	@ (8004a88 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800497c:	691b      	ldr	r3, [r3, #16]
 800497e:	4a42      	ldr	r2, [pc, #264]	@ (8004a88 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004980:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8004984:	6113      	str	r3, [r2, #16]
 8004986:	4b40      	ldr	r3, [pc, #256]	@ (8004a88 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004988:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 800498a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800498e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8004992:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004996:	4a3c      	ldr	r2, [pc, #240]	@ (8004a88 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004998:	430b      	orrs	r3, r1
 800499a:	6713      	str	r3, [r2, #112]	@ 0x70
 800499c:	e008      	b.n	80049b0 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800499e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80049a2:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
 80049a6:	e003      	b.n	80049b0 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80049a8:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80049ac:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 80049b0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80049b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80049b8:	f002 0301 	and.w	r3, r2, #1
 80049bc:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80049c0:	2300      	movs	r3, #0
 80049c2:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 80049c6:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 80049ca:	460b      	mov	r3, r1
 80049cc:	4313      	orrs	r3, r2
 80049ce:	f000 808f 	beq.w	8004af0 <HAL_RCCEx_PeriphCLKConfig+0x9bc>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 80049d2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80049d6:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80049d8:	2b28      	cmp	r3, #40	@ 0x28
 80049da:	d871      	bhi.n	8004ac0 <HAL_RCCEx_PeriphCLKConfig+0x98c>
 80049dc:	a201      	add	r2, pc, #4	@ (adr r2, 80049e4 <HAL_RCCEx_PeriphCLKConfig+0x8b0>)
 80049de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80049e2:	bf00      	nop
 80049e4:	08004ac9 	.word	0x08004ac9
 80049e8:	08004ac1 	.word	0x08004ac1
 80049ec:	08004ac1 	.word	0x08004ac1
 80049f0:	08004ac1 	.word	0x08004ac1
 80049f4:	08004ac1 	.word	0x08004ac1
 80049f8:	08004ac1 	.word	0x08004ac1
 80049fc:	08004ac1 	.word	0x08004ac1
 8004a00:	08004ac1 	.word	0x08004ac1
 8004a04:	08004a95 	.word	0x08004a95
 8004a08:	08004ac1 	.word	0x08004ac1
 8004a0c:	08004ac1 	.word	0x08004ac1
 8004a10:	08004ac1 	.word	0x08004ac1
 8004a14:	08004ac1 	.word	0x08004ac1
 8004a18:	08004ac1 	.word	0x08004ac1
 8004a1c:	08004ac1 	.word	0x08004ac1
 8004a20:	08004ac1 	.word	0x08004ac1
 8004a24:	08004aab 	.word	0x08004aab
 8004a28:	08004ac1 	.word	0x08004ac1
 8004a2c:	08004ac1 	.word	0x08004ac1
 8004a30:	08004ac1 	.word	0x08004ac1
 8004a34:	08004ac1 	.word	0x08004ac1
 8004a38:	08004ac1 	.word	0x08004ac1
 8004a3c:	08004ac1 	.word	0x08004ac1
 8004a40:	08004ac1 	.word	0x08004ac1
 8004a44:	08004ac9 	.word	0x08004ac9
 8004a48:	08004ac1 	.word	0x08004ac1
 8004a4c:	08004ac1 	.word	0x08004ac1
 8004a50:	08004ac1 	.word	0x08004ac1
 8004a54:	08004ac1 	.word	0x08004ac1
 8004a58:	08004ac1 	.word	0x08004ac1
 8004a5c:	08004ac1 	.word	0x08004ac1
 8004a60:	08004ac1 	.word	0x08004ac1
 8004a64:	08004ac9 	.word	0x08004ac9
 8004a68:	08004ac1 	.word	0x08004ac1
 8004a6c:	08004ac1 	.word	0x08004ac1
 8004a70:	08004ac1 	.word	0x08004ac1
 8004a74:	08004ac1 	.word	0x08004ac1
 8004a78:	08004ac1 	.word	0x08004ac1
 8004a7c:	08004ac1 	.word	0x08004ac1
 8004a80:	08004ac1 	.word	0x08004ac1
 8004a84:	08004ac9 	.word	0x08004ac9
 8004a88:	58024400 	.word	0x58024400
 8004a8c:	58024800 	.word	0x58024800
 8004a90:	00ffffcf 	.word	0x00ffffcf
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004a94:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004a98:	3308      	adds	r3, #8
 8004a9a:	2101      	movs	r1, #1
 8004a9c:	4618      	mov	r0, r3
 8004a9e:	f000 ffa7 	bl	80059f0 <RCCEx_PLL2_Config>
 8004aa2:	4603      	mov	r3, r0
 8004aa4:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8004aa8:	e00f      	b.n	8004aca <HAL_RCCEx_PeriphCLKConfig+0x996>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8004aaa:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004aae:	3328      	adds	r3, #40	@ 0x28
 8004ab0:	2101      	movs	r1, #1
 8004ab2:	4618      	mov	r0, r3
 8004ab4:	f001 f84e 	bl	8005b54 <RCCEx_PLL3_Config>
 8004ab8:	4603      	mov	r3, r0
 8004aba:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8004abe:	e004      	b.n	8004aca <HAL_RCCEx_PeriphCLKConfig+0x996>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004ac0:	2301      	movs	r3, #1
 8004ac2:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8004ac6:	e000      	b.n	8004aca <HAL_RCCEx_PeriphCLKConfig+0x996>
        break;
 8004ac8:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004aca:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004ace:	2b00      	cmp	r3, #0
 8004ad0:	d10a      	bne.n	8004ae8 <HAL_RCCEx_PeriphCLKConfig+0x9b4>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8004ad2:	4bbf      	ldr	r3, [pc, #764]	@ (8004dd0 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8004ad4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004ad6:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 8004ada:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004ade:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004ae0:	4abb      	ldr	r2, [pc, #748]	@ (8004dd0 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8004ae2:	430b      	orrs	r3, r1
 8004ae4:	6553      	str	r3, [r2, #84]	@ 0x54
 8004ae6:	e003      	b.n	8004af0 <HAL_RCCEx_PeriphCLKConfig+0x9bc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004ae8:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004aec:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8004af0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004af4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004af8:	f002 0302 	and.w	r3, r2, #2
 8004afc:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8004b00:	2300      	movs	r3, #0
 8004b02:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8004b06:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 8004b0a:	460b      	mov	r3, r1
 8004b0c:	4313      	orrs	r3, r2
 8004b0e:	d041      	beq.n	8004b94 <HAL_RCCEx_PeriphCLKConfig+0xa60>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 8004b10:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004b14:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004b16:	2b05      	cmp	r3, #5
 8004b18:	d824      	bhi.n	8004b64 <HAL_RCCEx_PeriphCLKConfig+0xa30>
 8004b1a:	a201      	add	r2, pc, #4	@ (adr r2, 8004b20 <HAL_RCCEx_PeriphCLKConfig+0x9ec>)
 8004b1c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004b20:	08004b6d 	.word	0x08004b6d
 8004b24:	08004b39 	.word	0x08004b39
 8004b28:	08004b4f 	.word	0x08004b4f
 8004b2c:	08004b6d 	.word	0x08004b6d
 8004b30:	08004b6d 	.word	0x08004b6d
 8004b34:	08004b6d 	.word	0x08004b6d
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004b38:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004b3c:	3308      	adds	r3, #8
 8004b3e:	2101      	movs	r1, #1
 8004b40:	4618      	mov	r0, r3
 8004b42:	f000 ff55 	bl	80059f0 <RCCEx_PLL2_Config>
 8004b46:	4603      	mov	r3, r0
 8004b48:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8004b4c:	e00f      	b.n	8004b6e <HAL_RCCEx_PeriphCLKConfig+0xa3a>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8004b4e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004b52:	3328      	adds	r3, #40	@ 0x28
 8004b54:	2101      	movs	r1, #1
 8004b56:	4618      	mov	r0, r3
 8004b58:	f000 fffc 	bl	8005b54 <RCCEx_PLL3_Config>
 8004b5c:	4603      	mov	r3, r0
 8004b5e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8004b62:	e004      	b.n	8004b6e <HAL_RCCEx_PeriphCLKConfig+0xa3a>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004b64:	2301      	movs	r3, #1
 8004b66:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8004b6a:	e000      	b.n	8004b6e <HAL_RCCEx_PeriphCLKConfig+0xa3a>
        break;
 8004b6c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004b6e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004b72:	2b00      	cmp	r3, #0
 8004b74:	d10a      	bne.n	8004b8c <HAL_RCCEx_PeriphCLKConfig+0xa58>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8004b76:	4b96      	ldr	r3, [pc, #600]	@ (8004dd0 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8004b78:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004b7a:	f023 0107 	bic.w	r1, r3, #7
 8004b7e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004b82:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004b84:	4a92      	ldr	r2, [pc, #584]	@ (8004dd0 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8004b86:	430b      	orrs	r3, r1
 8004b88:	6553      	str	r3, [r2, #84]	@ 0x54
 8004b8a:	e003      	b.n	8004b94 <HAL_RCCEx_PeriphCLKConfig+0xa60>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004b8c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004b90:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004b94:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004b98:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b9c:	f002 0304 	and.w	r3, r2, #4
 8004ba0:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8004ba4:	2300      	movs	r3, #0
 8004ba6:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8004baa:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8004bae:	460b      	mov	r3, r1
 8004bb0:	4313      	orrs	r3, r2
 8004bb2:	d044      	beq.n	8004c3e <HAL_RCCEx_PeriphCLKConfig+0xb0a>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8004bb4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004bb8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004bbc:	2b05      	cmp	r3, #5
 8004bbe:	d825      	bhi.n	8004c0c <HAL_RCCEx_PeriphCLKConfig+0xad8>
 8004bc0:	a201      	add	r2, pc, #4	@ (adr r2, 8004bc8 <HAL_RCCEx_PeriphCLKConfig+0xa94>)
 8004bc2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004bc6:	bf00      	nop
 8004bc8:	08004c15 	.word	0x08004c15
 8004bcc:	08004be1 	.word	0x08004be1
 8004bd0:	08004bf7 	.word	0x08004bf7
 8004bd4:	08004c15 	.word	0x08004c15
 8004bd8:	08004c15 	.word	0x08004c15
 8004bdc:	08004c15 	.word	0x08004c15
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004be0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004be4:	3308      	adds	r3, #8
 8004be6:	2101      	movs	r1, #1
 8004be8:	4618      	mov	r0, r3
 8004bea:	f000 ff01 	bl	80059f0 <RCCEx_PLL2_Config>
 8004bee:	4603      	mov	r3, r0
 8004bf0:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8004bf4:	e00f      	b.n	8004c16 <HAL_RCCEx_PeriphCLKConfig+0xae2>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8004bf6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004bfa:	3328      	adds	r3, #40	@ 0x28
 8004bfc:	2101      	movs	r1, #1
 8004bfe:	4618      	mov	r0, r3
 8004c00:	f000 ffa8 	bl	8005b54 <RCCEx_PLL3_Config>
 8004c04:	4603      	mov	r3, r0
 8004c06:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8004c0a:	e004      	b.n	8004c16 <HAL_RCCEx_PeriphCLKConfig+0xae2>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004c0c:	2301      	movs	r3, #1
 8004c0e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8004c12:	e000      	b.n	8004c16 <HAL_RCCEx_PeriphCLKConfig+0xae2>
        break;
 8004c14:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004c16:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004c1a:	2b00      	cmp	r3, #0
 8004c1c:	d10b      	bne.n	8004c36 <HAL_RCCEx_PeriphCLKConfig+0xb02>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004c1e:	4b6c      	ldr	r3, [pc, #432]	@ (8004dd0 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8004c20:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004c22:	f023 0107 	bic.w	r1, r3, #7
 8004c26:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004c2a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004c2e:	4a68      	ldr	r2, [pc, #416]	@ (8004dd0 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8004c30:	430b      	orrs	r3, r1
 8004c32:	6593      	str	r3, [r2, #88]	@ 0x58
 8004c34:	e003      	b.n	8004c3e <HAL_RCCEx_PeriphCLKConfig+0xb0a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004c36:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004c3a:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8004c3e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004c42:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c46:	f002 0320 	and.w	r3, r2, #32
 8004c4a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8004c4e:	2300      	movs	r3, #0
 8004c50:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8004c54:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 8004c58:	460b      	mov	r3, r1
 8004c5a:	4313      	orrs	r3, r2
 8004c5c:	d055      	beq.n	8004d0a <HAL_RCCEx_PeriphCLKConfig+0xbd6>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 8004c5e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004c62:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004c66:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004c6a:	d033      	beq.n	8004cd4 <HAL_RCCEx_PeriphCLKConfig+0xba0>
 8004c6c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004c70:	d82c      	bhi.n	8004ccc <HAL_RCCEx_PeriphCLKConfig+0xb98>
 8004c72:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004c76:	d02f      	beq.n	8004cd8 <HAL_RCCEx_PeriphCLKConfig+0xba4>
 8004c78:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004c7c:	d826      	bhi.n	8004ccc <HAL_RCCEx_PeriphCLKConfig+0xb98>
 8004c7e:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8004c82:	d02b      	beq.n	8004cdc <HAL_RCCEx_PeriphCLKConfig+0xba8>
 8004c84:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8004c88:	d820      	bhi.n	8004ccc <HAL_RCCEx_PeriphCLKConfig+0xb98>
 8004c8a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004c8e:	d012      	beq.n	8004cb6 <HAL_RCCEx_PeriphCLKConfig+0xb82>
 8004c90:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004c94:	d81a      	bhi.n	8004ccc <HAL_RCCEx_PeriphCLKConfig+0xb98>
 8004c96:	2b00      	cmp	r3, #0
 8004c98:	d022      	beq.n	8004ce0 <HAL_RCCEx_PeriphCLKConfig+0xbac>
 8004c9a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8004c9e:	d115      	bne.n	8004ccc <HAL_RCCEx_PeriphCLKConfig+0xb98>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004ca0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004ca4:	3308      	adds	r3, #8
 8004ca6:	2100      	movs	r1, #0
 8004ca8:	4618      	mov	r0, r3
 8004caa:	f000 fea1 	bl	80059f0 <RCCEx_PLL2_Config>
 8004cae:	4603      	mov	r3, r0
 8004cb0:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8004cb4:	e015      	b.n	8004ce2 <HAL_RCCEx_PeriphCLKConfig+0xbae>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8004cb6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004cba:	3328      	adds	r3, #40	@ 0x28
 8004cbc:	2102      	movs	r1, #2
 8004cbe:	4618      	mov	r0, r3
 8004cc0:	f000 ff48 	bl	8005b54 <RCCEx_PLL3_Config>
 8004cc4:	4603      	mov	r3, r0
 8004cc6:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8004cca:	e00a      	b.n	8004ce2 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004ccc:	2301      	movs	r3, #1
 8004cce:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8004cd2:	e006      	b.n	8004ce2 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 8004cd4:	bf00      	nop
 8004cd6:	e004      	b.n	8004ce2 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 8004cd8:	bf00      	nop
 8004cda:	e002      	b.n	8004ce2 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 8004cdc:	bf00      	nop
 8004cde:	e000      	b.n	8004ce2 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 8004ce0:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004ce2:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004ce6:	2b00      	cmp	r3, #0
 8004ce8:	d10b      	bne.n	8004d02 <HAL_RCCEx_PeriphCLKConfig+0xbce>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004cea:	4b39      	ldr	r3, [pc, #228]	@ (8004dd0 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8004cec:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004cee:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8004cf2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004cf6:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004cfa:	4a35      	ldr	r2, [pc, #212]	@ (8004dd0 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8004cfc:	430b      	orrs	r3, r1
 8004cfe:	6553      	str	r3, [r2, #84]	@ 0x54
 8004d00:	e003      	b.n	8004d0a <HAL_RCCEx_PeriphCLKConfig+0xbd6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004d02:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004d06:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8004d0a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004d0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d12:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 8004d16:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8004d1a:	2300      	movs	r3, #0
 8004d1c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8004d20:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 8004d24:	460b      	mov	r3, r1
 8004d26:	4313      	orrs	r3, r2
 8004d28:	d058      	beq.n	8004ddc <HAL_RCCEx_PeriphCLKConfig+0xca8>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 8004d2a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004d2e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8004d32:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8004d36:	d033      	beq.n	8004da0 <HAL_RCCEx_PeriphCLKConfig+0xc6c>
 8004d38:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8004d3c:	d82c      	bhi.n	8004d98 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 8004d3e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004d42:	d02f      	beq.n	8004da4 <HAL_RCCEx_PeriphCLKConfig+0xc70>
 8004d44:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004d48:	d826      	bhi.n	8004d98 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 8004d4a:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8004d4e:	d02b      	beq.n	8004da8 <HAL_RCCEx_PeriphCLKConfig+0xc74>
 8004d50:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8004d54:	d820      	bhi.n	8004d98 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 8004d56:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004d5a:	d012      	beq.n	8004d82 <HAL_RCCEx_PeriphCLKConfig+0xc4e>
 8004d5c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004d60:	d81a      	bhi.n	8004d98 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 8004d62:	2b00      	cmp	r3, #0
 8004d64:	d022      	beq.n	8004dac <HAL_RCCEx_PeriphCLKConfig+0xc78>
 8004d66:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004d6a:	d115      	bne.n	8004d98 <HAL_RCCEx_PeriphCLKConfig+0xc64>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004d6c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004d70:	3308      	adds	r3, #8
 8004d72:	2100      	movs	r1, #0
 8004d74:	4618      	mov	r0, r3
 8004d76:	f000 fe3b 	bl	80059f0 <RCCEx_PLL2_Config>
 8004d7a:	4603      	mov	r3, r0
 8004d7c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8004d80:	e015      	b.n	8004dae <HAL_RCCEx_PeriphCLKConfig+0xc7a>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8004d82:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004d86:	3328      	adds	r3, #40	@ 0x28
 8004d88:	2102      	movs	r1, #2
 8004d8a:	4618      	mov	r0, r3
 8004d8c:	f000 fee2 	bl	8005b54 <RCCEx_PLL3_Config>
 8004d90:	4603      	mov	r3, r0
 8004d92:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8004d96:	e00a      	b.n	8004dae <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004d98:	2301      	movs	r3, #1
 8004d9a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8004d9e:	e006      	b.n	8004dae <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 8004da0:	bf00      	nop
 8004da2:	e004      	b.n	8004dae <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 8004da4:	bf00      	nop
 8004da6:	e002      	b.n	8004dae <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 8004da8:	bf00      	nop
 8004daa:	e000      	b.n	8004dae <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 8004dac:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004dae:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004db2:	2b00      	cmp	r3, #0
 8004db4:	d10e      	bne.n	8004dd4 <HAL_RCCEx_PeriphCLKConfig+0xca0>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8004db6:	4b06      	ldr	r3, [pc, #24]	@ (8004dd0 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8004db8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004dba:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 8004dbe:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004dc2:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8004dc6:	4a02      	ldr	r2, [pc, #8]	@ (8004dd0 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8004dc8:	430b      	orrs	r3, r1
 8004dca:	6593      	str	r3, [r2, #88]	@ 0x58
 8004dcc:	e006      	b.n	8004ddc <HAL_RCCEx_PeriphCLKConfig+0xca8>
 8004dce:	bf00      	nop
 8004dd0:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004dd4:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004dd8:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8004ddc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004de0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004de4:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 8004de8:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8004dec:	2300      	movs	r3, #0
 8004dee:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8004df2:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 8004df6:	460b      	mov	r3, r1
 8004df8:	4313      	orrs	r3, r2
 8004dfa:	d055      	beq.n	8004ea8 <HAL_RCCEx_PeriphCLKConfig+0xd74>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 8004dfc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004e00:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8004e04:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8004e08:	d033      	beq.n	8004e72 <HAL_RCCEx_PeriphCLKConfig+0xd3e>
 8004e0a:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8004e0e:	d82c      	bhi.n	8004e6a <HAL_RCCEx_PeriphCLKConfig+0xd36>
 8004e10:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004e14:	d02f      	beq.n	8004e76 <HAL_RCCEx_PeriphCLKConfig+0xd42>
 8004e16:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004e1a:	d826      	bhi.n	8004e6a <HAL_RCCEx_PeriphCLKConfig+0xd36>
 8004e1c:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8004e20:	d02b      	beq.n	8004e7a <HAL_RCCEx_PeriphCLKConfig+0xd46>
 8004e22:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8004e26:	d820      	bhi.n	8004e6a <HAL_RCCEx_PeriphCLKConfig+0xd36>
 8004e28:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004e2c:	d012      	beq.n	8004e54 <HAL_RCCEx_PeriphCLKConfig+0xd20>
 8004e2e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004e32:	d81a      	bhi.n	8004e6a <HAL_RCCEx_PeriphCLKConfig+0xd36>
 8004e34:	2b00      	cmp	r3, #0
 8004e36:	d022      	beq.n	8004e7e <HAL_RCCEx_PeriphCLKConfig+0xd4a>
 8004e38:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004e3c:	d115      	bne.n	8004e6a <HAL_RCCEx_PeriphCLKConfig+0xd36>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004e3e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004e42:	3308      	adds	r3, #8
 8004e44:	2100      	movs	r1, #0
 8004e46:	4618      	mov	r0, r3
 8004e48:	f000 fdd2 	bl	80059f0 <RCCEx_PLL2_Config>
 8004e4c:	4603      	mov	r3, r0
 8004e4e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8004e52:	e015      	b.n	8004e80 <HAL_RCCEx_PeriphCLKConfig+0xd4c>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8004e54:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004e58:	3328      	adds	r3, #40	@ 0x28
 8004e5a:	2102      	movs	r1, #2
 8004e5c:	4618      	mov	r0, r3
 8004e5e:	f000 fe79 	bl	8005b54 <RCCEx_PLL3_Config>
 8004e62:	4603      	mov	r3, r0
 8004e64:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8004e68:	e00a      	b.n	8004e80 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004e6a:	2301      	movs	r3, #1
 8004e6c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8004e70:	e006      	b.n	8004e80 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 8004e72:	bf00      	nop
 8004e74:	e004      	b.n	8004e80 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 8004e76:	bf00      	nop
 8004e78:	e002      	b.n	8004e80 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 8004e7a:	bf00      	nop
 8004e7c:	e000      	b.n	8004e80 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 8004e7e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004e80:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004e84:	2b00      	cmp	r3, #0
 8004e86:	d10b      	bne.n	8004ea0 <HAL_RCCEx_PeriphCLKConfig+0xd6c>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8004e88:	4ba0      	ldr	r3, [pc, #640]	@ (800510c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8004e8a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004e8c:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 8004e90:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004e94:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8004e98:	4a9c      	ldr	r2, [pc, #624]	@ (800510c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8004e9a:	430b      	orrs	r3, r1
 8004e9c:	6593      	str	r3, [r2, #88]	@ 0x58
 8004e9e:	e003      	b.n	8004ea8 <HAL_RCCEx_PeriphCLKConfig+0xd74>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004ea0:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004ea4:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*------------------------------ I2C1/2/3/5* Configuration ------------------------*/
#if defined(I2C5)
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1235) == RCC_PERIPHCLK_I2C1235)
 8004ea8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004eac:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004eb0:	f002 0308 	and.w	r3, r2, #8
 8004eb4:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8004eb8:	2300      	movs	r3, #0
 8004eba:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8004ebe:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 8004ec2:	460b      	mov	r3, r1
 8004ec4:	4313      	orrs	r3, r2
 8004ec6:	d01e      	beq.n	8004f06 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1235CLKSOURCE(PeriphClkInit->I2c1235ClockSelection));

    if ((PeriphClkInit->I2c1235ClockSelection) == RCC_I2C1235CLKSOURCE_PLL3)
 8004ec8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004ecc:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004ed0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004ed4:	d10c      	bne.n	8004ef0 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8004ed6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004eda:	3328      	adds	r3, #40	@ 0x28
 8004edc:	2102      	movs	r1, #2
 8004ede:	4618      	mov	r0, r3
 8004ee0:	f000 fe38 	bl	8005b54 <RCCEx_PLL3_Config>
 8004ee4:	4603      	mov	r3, r0
 8004ee6:	2b00      	cmp	r3, #0
 8004ee8:	d002      	beq.n	8004ef0 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
      {
        status = HAL_ERROR;
 8004eea:	2301      	movs	r3, #1
 8004eec:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
      }
    }

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);
 8004ef0:	4b86      	ldr	r3, [pc, #536]	@ (800510c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8004ef2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004ef4:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8004ef8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004efc:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004f00:	4a82      	ldr	r2, [pc, #520]	@ (800510c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8004f02:	430b      	orrs	r3, r1
 8004f04:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8004f06:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004f0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f0e:	f002 0310 	and.w	r3, r2, #16
 8004f12:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8004f16:	2300      	movs	r3, #0
 8004f18:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8004f1c:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 8004f20:	460b      	mov	r3, r1
 8004f22:	4313      	orrs	r3, r2
 8004f24:	d01e      	beq.n	8004f64 <HAL_RCCEx_PeriphCLKConfig+0xe30>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 8004f26:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004f2a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004f2e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004f32:	d10c      	bne.n	8004f4e <HAL_RCCEx_PeriphCLKConfig+0xe1a>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8004f34:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004f38:	3328      	adds	r3, #40	@ 0x28
 8004f3a:	2102      	movs	r1, #2
 8004f3c:	4618      	mov	r0, r3
 8004f3e:	f000 fe09 	bl	8005b54 <RCCEx_PLL3_Config>
 8004f42:	4603      	mov	r3, r0
 8004f44:	2b00      	cmp	r3, #0
 8004f46:	d002      	beq.n	8004f4e <HAL_RCCEx_PeriphCLKConfig+0xe1a>
      {
        status = HAL_ERROR;
 8004f48:	2301      	movs	r3, #1
 8004f4a:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8004f4e:	4b6f      	ldr	r3, [pc, #444]	@ (800510c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8004f50:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004f52:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8004f56:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004f5a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004f5e:	4a6b      	ldr	r2, [pc, #428]	@ (800510c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8004f60:	430b      	orrs	r3, r1
 8004f62:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004f64:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004f68:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f6c:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 8004f70:	67bb      	str	r3, [r7, #120]	@ 0x78
 8004f72:	2300      	movs	r3, #0
 8004f74:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8004f76:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 8004f7a:	460b      	mov	r3, r1
 8004f7c:	4313      	orrs	r3, r2
 8004f7e:	d03e      	beq.n	8004ffe <HAL_RCCEx_PeriphCLKConfig+0xeca>
  {
    switch (PeriphClkInit->AdcClockSelection)
 8004f80:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004f84:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8004f88:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004f8c:	d022      	beq.n	8004fd4 <HAL_RCCEx_PeriphCLKConfig+0xea0>
 8004f8e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004f92:	d81b      	bhi.n	8004fcc <HAL_RCCEx_PeriphCLKConfig+0xe98>
 8004f94:	2b00      	cmp	r3, #0
 8004f96:	d003      	beq.n	8004fa0 <HAL_RCCEx_PeriphCLKConfig+0xe6c>
 8004f98:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004f9c:	d00b      	beq.n	8004fb6 <HAL_RCCEx_PeriphCLKConfig+0xe82>
 8004f9e:	e015      	b.n	8004fcc <HAL_RCCEx_PeriphCLKConfig+0xe98>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004fa0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004fa4:	3308      	adds	r3, #8
 8004fa6:	2100      	movs	r1, #0
 8004fa8:	4618      	mov	r0, r3
 8004faa:	f000 fd21 	bl	80059f0 <RCCEx_PLL2_Config>
 8004fae:	4603      	mov	r3, r0
 8004fb0:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* ADC clock source configuration done later after clock selection check */
        break;
 8004fb4:	e00f      	b.n	8004fd6 <HAL_RCCEx_PeriphCLKConfig+0xea2>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8004fb6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004fba:	3328      	adds	r3, #40	@ 0x28
 8004fbc:	2102      	movs	r1, #2
 8004fbe:	4618      	mov	r0, r3
 8004fc0:	f000 fdc8 	bl	8005b54 <RCCEx_PLL3_Config>
 8004fc4:	4603      	mov	r3, r0
 8004fc6:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* ADC clock source configuration done later after clock selection check */
        break;
 8004fca:	e004      	b.n	8004fd6 <HAL_RCCEx_PeriphCLKConfig+0xea2>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004fcc:	2301      	movs	r3, #1
 8004fce:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8004fd2:	e000      	b.n	8004fd6 <HAL_RCCEx_PeriphCLKConfig+0xea2>
        break;
 8004fd4:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004fd6:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004fda:	2b00      	cmp	r3, #0
 8004fdc:	d10b      	bne.n	8004ff6 <HAL_RCCEx_PeriphCLKConfig+0xec2>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004fde:	4b4b      	ldr	r3, [pc, #300]	@ (800510c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8004fe0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004fe2:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 8004fe6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004fea:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8004fee:	4a47      	ldr	r2, [pc, #284]	@ (800510c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8004ff0:	430b      	orrs	r3, r1
 8004ff2:	6593      	str	r3, [r2, #88]	@ 0x58
 8004ff4:	e003      	b.n	8004ffe <HAL_RCCEx_PeriphCLKConfig+0xeca>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004ff6:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004ffa:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8004ffe:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005002:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005006:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 800500a:	673b      	str	r3, [r7, #112]	@ 0x70
 800500c:	2300      	movs	r3, #0
 800500e:	677b      	str	r3, [r7, #116]	@ 0x74
 8005010:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 8005014:	460b      	mov	r3, r1
 8005016:	4313      	orrs	r3, r2
 8005018:	d03b      	beq.n	8005092 <HAL_RCCEx_PeriphCLKConfig+0xf5e>
  {

    switch (PeriphClkInit->UsbClockSelection)
 800501a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800501e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005022:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8005026:	d01f      	beq.n	8005068 <HAL_RCCEx_PeriphCLKConfig+0xf34>
 8005028:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800502c:	d818      	bhi.n	8005060 <HAL_RCCEx_PeriphCLKConfig+0xf2c>
 800502e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005032:	d003      	beq.n	800503c <HAL_RCCEx_PeriphCLKConfig+0xf08>
 8005034:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8005038:	d007      	beq.n	800504a <HAL_RCCEx_PeriphCLKConfig+0xf16>
 800503a:	e011      	b.n	8005060 <HAL_RCCEx_PeriphCLKConfig+0xf2c>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800503c:	4b33      	ldr	r3, [pc, #204]	@ (800510c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800503e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005040:	4a32      	ldr	r2, [pc, #200]	@ (800510c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8005042:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005046:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 8005048:	e00f      	b.n	800506a <HAL_RCCEx_PeriphCLKConfig+0xf36>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800504a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800504e:	3328      	adds	r3, #40	@ 0x28
 8005050:	2101      	movs	r1, #1
 8005052:	4618      	mov	r0, r3
 8005054:	f000 fd7e 	bl	8005b54 <RCCEx_PLL3_Config>
 8005058:	4603      	mov	r3, r0
 800505a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* USB clock source configuration done later after clock selection check */
        break;
 800505e:	e004      	b.n	800506a <HAL_RCCEx_PeriphCLKConfig+0xf36>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005060:	2301      	movs	r3, #1
 8005062:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8005066:	e000      	b.n	800506a <HAL_RCCEx_PeriphCLKConfig+0xf36>
        break;
 8005068:	bf00      	nop
    }

    if (ret == HAL_OK)
 800506a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800506e:	2b00      	cmp	r3, #0
 8005070:	d10b      	bne.n	800508a <HAL_RCCEx_PeriphCLKConfig+0xf56>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8005072:	4b26      	ldr	r3, [pc, #152]	@ (800510c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8005074:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005076:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 800507a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800507e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005082:	4a22      	ldr	r2, [pc, #136]	@ (800510c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8005084:	430b      	orrs	r3, r1
 8005086:	6553      	str	r3, [r2, #84]	@ 0x54
 8005088:	e003      	b.n	8005092 <HAL_RCCEx_PeriphCLKConfig+0xf5e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800508a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800508e:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8005092:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005096:	e9d3 2300 	ldrd	r2, r3, [r3]
 800509a:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 800509e:	66bb      	str	r3, [r7, #104]	@ 0x68
 80050a0:	2300      	movs	r3, #0
 80050a2:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80050a4:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 80050a8:	460b      	mov	r3, r1
 80050aa:	4313      	orrs	r3, r2
 80050ac:	d034      	beq.n	8005118 <HAL_RCCEx_PeriphCLKConfig+0xfe4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 80050ae:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80050b2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80050b4:	2b00      	cmp	r3, #0
 80050b6:	d003      	beq.n	80050c0 <HAL_RCCEx_PeriphCLKConfig+0xf8c>
 80050b8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80050bc:	d007      	beq.n	80050ce <HAL_RCCEx_PeriphCLKConfig+0xf9a>
 80050be:	e011      	b.n	80050e4 <HAL_RCCEx_PeriphCLKConfig+0xfb0>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80050c0:	4b12      	ldr	r3, [pc, #72]	@ (800510c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80050c2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80050c4:	4a11      	ldr	r2, [pc, #68]	@ (800510c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80050c6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80050ca:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 80050cc:	e00e      	b.n	80050ec <HAL_RCCEx_PeriphCLKConfig+0xfb8>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80050ce:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80050d2:	3308      	adds	r3, #8
 80050d4:	2102      	movs	r1, #2
 80050d6:	4618      	mov	r0, r3
 80050d8:	f000 fc8a 	bl	80059f0 <RCCEx_PLL2_Config>
 80050dc:	4603      	mov	r3, r0
 80050de:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 80050e2:	e003      	b.n	80050ec <HAL_RCCEx_PeriphCLKConfig+0xfb8>

      default:
        ret = HAL_ERROR;
 80050e4:	2301      	movs	r3, #1
 80050e6:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80050ea:	bf00      	nop
    }

    if (ret == HAL_OK)
 80050ec:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80050f0:	2b00      	cmp	r3, #0
 80050f2:	d10d      	bne.n	8005110 <HAL_RCCEx_PeriphCLKConfig+0xfdc>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 80050f4:	4b05      	ldr	r3, [pc, #20]	@ (800510c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80050f6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80050f8:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 80050fc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005100:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005102:	4a02      	ldr	r2, [pc, #8]	@ (800510c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8005104:	430b      	orrs	r3, r1
 8005106:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8005108:	e006      	b.n	8005118 <HAL_RCCEx_PeriphCLKConfig+0xfe4>
 800510a:	bf00      	nop
 800510c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005110:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005114:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8005118:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800511c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005120:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 8005124:	663b      	str	r3, [r7, #96]	@ 0x60
 8005126:	2300      	movs	r3, #0
 8005128:	667b      	str	r3, [r7, #100]	@ 0x64
 800512a:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 800512e:	460b      	mov	r3, r1
 8005130:	4313      	orrs	r3, r2
 8005132:	d00c      	beq.n	800514e <HAL_RCCEx_PeriphCLKConfig+0x101a>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8005134:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005138:	3328      	adds	r3, #40	@ 0x28
 800513a:	2102      	movs	r1, #2
 800513c:	4618      	mov	r0, r3
 800513e:	f000 fd09 	bl	8005b54 <RCCEx_PLL3_Config>
 8005142:	4603      	mov	r3, r0
 8005144:	2b00      	cmp	r3, #0
 8005146:	d002      	beq.n	800514e <HAL_RCCEx_PeriphCLKConfig+0x101a>
    {
      status = HAL_ERROR;
 8005148:	2301      	movs	r3, #1
 800514a:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800514e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005152:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005156:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 800515a:	65bb      	str	r3, [r7, #88]	@ 0x58
 800515c:	2300      	movs	r3, #0
 800515e:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8005160:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 8005164:	460b      	mov	r3, r1
 8005166:	4313      	orrs	r3, r2
 8005168:	d036      	beq.n	80051d8 <HAL_RCCEx_PeriphCLKConfig+0x10a4>
  {

    switch (PeriphClkInit->RngClockSelection)
 800516a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800516e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8005170:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005174:	d018      	beq.n	80051a8 <HAL_RCCEx_PeriphCLKConfig+0x1074>
 8005176:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800517a:	d811      	bhi.n	80051a0 <HAL_RCCEx_PeriphCLKConfig+0x106c>
 800517c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005180:	d014      	beq.n	80051ac <HAL_RCCEx_PeriphCLKConfig+0x1078>
 8005182:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005186:	d80b      	bhi.n	80051a0 <HAL_RCCEx_PeriphCLKConfig+0x106c>
 8005188:	2b00      	cmp	r3, #0
 800518a:	d011      	beq.n	80051b0 <HAL_RCCEx_PeriphCLKConfig+0x107c>
 800518c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005190:	d106      	bne.n	80051a0 <HAL_RCCEx_PeriphCLKConfig+0x106c>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005192:	4bb7      	ldr	r3, [pc, #732]	@ (8005470 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8005194:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005196:	4ab6      	ldr	r2, [pc, #728]	@ (8005470 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8005198:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800519c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 800519e:	e008      	b.n	80051b2 <HAL_RCCEx_PeriphCLKConfig+0x107e>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80051a0:	2301      	movs	r3, #1
 80051a2:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80051a6:	e004      	b.n	80051b2 <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 80051a8:	bf00      	nop
 80051aa:	e002      	b.n	80051b2 <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 80051ac:	bf00      	nop
 80051ae:	e000      	b.n	80051b2 <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 80051b0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80051b2:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80051b6:	2b00      	cmp	r3, #0
 80051b8:	d10a      	bne.n	80051d0 <HAL_RCCEx_PeriphCLKConfig+0x109c>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80051ba:	4bad      	ldr	r3, [pc, #692]	@ (8005470 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80051bc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80051be:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 80051c2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80051c6:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80051c8:	4aa9      	ldr	r2, [pc, #676]	@ (8005470 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80051ca:	430b      	orrs	r3, r1
 80051cc:	6553      	str	r3, [r2, #84]	@ 0x54
 80051ce:	e003      	b.n	80051d8 <HAL_RCCEx_PeriphCLKConfig+0x10a4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80051d0:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80051d4:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80051d8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80051dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80051e0:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 80051e4:	653b      	str	r3, [r7, #80]	@ 0x50
 80051e6:	2300      	movs	r3, #0
 80051e8:	657b      	str	r3, [r7, #84]	@ 0x54
 80051ea:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 80051ee:	460b      	mov	r3, r1
 80051f0:	4313      	orrs	r3, r2
 80051f2:	d009      	beq.n	8005208 <HAL_RCCEx_PeriphCLKConfig+0x10d4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80051f4:	4b9e      	ldr	r3, [pc, #632]	@ (8005470 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80051f6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80051f8:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 80051fc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005200:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005202:	4a9b      	ldr	r2, [pc, #620]	@ (8005470 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8005204:	430b      	orrs	r3, r1
 8005206:	6513      	str	r3, [r2, #80]	@ 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8005208:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800520c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005210:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 8005214:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005216:	2300      	movs	r3, #0
 8005218:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800521a:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 800521e:	460b      	mov	r3, r1
 8005220:	4313      	orrs	r3, r2
 8005222:	d009      	beq.n	8005238 <HAL_RCCEx_PeriphCLKConfig+0x1104>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8005224:	4b92      	ldr	r3, [pc, #584]	@ (8005470 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8005226:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005228:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 800522c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005230:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8005232:	4a8f      	ldr	r2, [pc, #572]	@ (8005470 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8005234:	430b      	orrs	r3, r1
 8005236:	6513      	str	r3, [r2, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8005238:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800523c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005240:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 8005244:	643b      	str	r3, [r7, #64]	@ 0x40
 8005246:	2300      	movs	r3, #0
 8005248:	647b      	str	r3, [r7, #68]	@ 0x44
 800524a:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 800524e:	460b      	mov	r3, r1
 8005250:	4313      	orrs	r3, r2
 8005252:	d00e      	beq.n	8005272 <HAL_RCCEx_PeriphCLKConfig+0x113e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8005254:	4b86      	ldr	r3, [pc, #536]	@ (8005470 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8005256:	691b      	ldr	r3, [r3, #16]
 8005258:	4a85      	ldr	r2, [pc, #532]	@ (8005470 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800525a:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800525e:	6113      	str	r3, [r2, #16]
 8005260:	4b83      	ldr	r3, [pc, #524]	@ (8005470 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8005262:	6919      	ldr	r1, [r3, #16]
 8005264:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005268:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800526c:	4a80      	ldr	r2, [pc, #512]	@ (8005470 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800526e:	430b      	orrs	r3, r1
 8005270:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8005272:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005276:	e9d3 2300 	ldrd	r2, r3, [r3]
 800527a:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 800527e:	63bb      	str	r3, [r7, #56]	@ 0x38
 8005280:	2300      	movs	r3, #0
 8005282:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005284:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 8005288:	460b      	mov	r3, r1
 800528a:	4313      	orrs	r3, r2
 800528c:	d009      	beq.n	80052a2 <HAL_RCCEx_PeriphCLKConfig+0x116e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 800528e:	4b78      	ldr	r3, [pc, #480]	@ (8005470 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8005290:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005292:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8005296:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800529a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800529c:	4a74      	ldr	r2, [pc, #464]	@ (8005470 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800529e:	430b      	orrs	r3, r1
 80052a0:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80052a2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80052a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80052aa:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 80052ae:	633b      	str	r3, [r7, #48]	@ 0x30
 80052b0:	2300      	movs	r3, #0
 80052b2:	637b      	str	r3, [r7, #52]	@ 0x34
 80052b4:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 80052b8:	460b      	mov	r3, r1
 80052ba:	4313      	orrs	r3, r2
 80052bc:	d00a      	beq.n	80052d4 <HAL_RCCEx_PeriphCLKConfig+0x11a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80052be:	4b6c      	ldr	r3, [pc, #432]	@ (8005470 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80052c0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80052c2:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 80052c6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80052ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80052ce:	4a68      	ldr	r2, [pc, #416]	@ (8005470 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80052d0:	430b      	orrs	r3, r1
 80052d2:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 80052d4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80052d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80052dc:	2100      	movs	r1, #0
 80052de:	62b9      	str	r1, [r7, #40]	@ 0x28
 80052e0:	f003 0301 	and.w	r3, r3, #1
 80052e4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80052e6:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 80052ea:	460b      	mov	r3, r1
 80052ec:	4313      	orrs	r3, r2
 80052ee:	d011      	beq.n	8005314 <HAL_RCCEx_PeriphCLKConfig+0x11e0>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80052f0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80052f4:	3308      	adds	r3, #8
 80052f6:	2100      	movs	r1, #0
 80052f8:	4618      	mov	r0, r3
 80052fa:	f000 fb79 	bl	80059f0 <RCCEx_PLL2_Config>
 80052fe:	4603      	mov	r3, r0
 8005300:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 8005304:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005308:	2b00      	cmp	r3, #0
 800530a:	d003      	beq.n	8005314 <HAL_RCCEx_PeriphCLKConfig+0x11e0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800530c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005310:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 8005314:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005318:	e9d3 2300 	ldrd	r2, r3, [r3]
 800531c:	2100      	movs	r1, #0
 800531e:	6239      	str	r1, [r7, #32]
 8005320:	f003 0302 	and.w	r3, r3, #2
 8005324:	627b      	str	r3, [r7, #36]	@ 0x24
 8005326:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 800532a:	460b      	mov	r3, r1
 800532c:	4313      	orrs	r3, r2
 800532e:	d011      	beq.n	8005354 <HAL_RCCEx_PeriphCLKConfig+0x1220>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8005330:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005334:	3308      	adds	r3, #8
 8005336:	2101      	movs	r1, #1
 8005338:	4618      	mov	r0, r3
 800533a:	f000 fb59 	bl	80059f0 <RCCEx_PLL2_Config>
 800533e:	4603      	mov	r3, r0
 8005340:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 8005344:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005348:	2b00      	cmp	r3, #0
 800534a:	d003      	beq.n	8005354 <HAL_RCCEx_PeriphCLKConfig+0x1220>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800534c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005350:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 8005354:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005358:	e9d3 2300 	ldrd	r2, r3, [r3]
 800535c:	2100      	movs	r1, #0
 800535e:	61b9      	str	r1, [r7, #24]
 8005360:	f003 0304 	and.w	r3, r3, #4
 8005364:	61fb      	str	r3, [r7, #28]
 8005366:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 800536a:	460b      	mov	r3, r1
 800536c:	4313      	orrs	r3, r2
 800536e:	d011      	beq.n	8005394 <HAL_RCCEx_PeriphCLKConfig+0x1260>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8005370:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005374:	3308      	adds	r3, #8
 8005376:	2102      	movs	r1, #2
 8005378:	4618      	mov	r0, r3
 800537a:	f000 fb39 	bl	80059f0 <RCCEx_PLL2_Config>
 800537e:	4603      	mov	r3, r0
 8005380:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 8005384:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005388:	2b00      	cmp	r3, #0
 800538a:	d003      	beq.n	8005394 <HAL_RCCEx_PeriphCLKConfig+0x1260>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800538c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005390:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 8005394:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005398:	e9d3 2300 	ldrd	r2, r3, [r3]
 800539c:	2100      	movs	r1, #0
 800539e:	6139      	str	r1, [r7, #16]
 80053a0:	f003 0308 	and.w	r3, r3, #8
 80053a4:	617b      	str	r3, [r7, #20]
 80053a6:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 80053aa:	460b      	mov	r3, r1
 80053ac:	4313      	orrs	r3, r2
 80053ae:	d011      	beq.n	80053d4 <HAL_RCCEx_PeriphCLKConfig+0x12a0>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80053b0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80053b4:	3328      	adds	r3, #40	@ 0x28
 80053b6:	2100      	movs	r1, #0
 80053b8:	4618      	mov	r0, r3
 80053ba:	f000 fbcb 	bl	8005b54 <RCCEx_PLL3_Config>
 80053be:	4603      	mov	r3, r0
 80053c0:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
  
    if (ret == HAL_OK)
 80053c4:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80053c8:	2b00      	cmp	r3, #0
 80053ca:	d003      	beq.n	80053d4 <HAL_RCCEx_PeriphCLKConfig+0x12a0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80053cc:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80053d0:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 80053d4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80053d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80053dc:	2100      	movs	r1, #0
 80053de:	60b9      	str	r1, [r7, #8]
 80053e0:	f003 0310 	and.w	r3, r3, #16
 80053e4:	60fb      	str	r3, [r7, #12]
 80053e6:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 80053ea:	460b      	mov	r3, r1
 80053ec:	4313      	orrs	r3, r2
 80053ee:	d011      	beq.n	8005414 <HAL_RCCEx_PeriphCLKConfig+0x12e0>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80053f0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80053f4:	3328      	adds	r3, #40	@ 0x28
 80053f6:	2101      	movs	r1, #1
 80053f8:	4618      	mov	r0, r3
 80053fa:	f000 fbab 	bl	8005b54 <RCCEx_PLL3_Config>
 80053fe:	4603      	mov	r3, r0
 8005400:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 8005404:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005408:	2b00      	cmp	r3, #0
 800540a:	d003      	beq.n	8005414 <HAL_RCCEx_PeriphCLKConfig+0x12e0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800540c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005410:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 8005414:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005418:	e9d3 2300 	ldrd	r2, r3, [r3]
 800541c:	2100      	movs	r1, #0
 800541e:	6039      	str	r1, [r7, #0]
 8005420:	f003 0320 	and.w	r3, r3, #32
 8005424:	607b      	str	r3, [r7, #4]
 8005426:	e9d7 1200 	ldrd	r1, r2, [r7]
 800542a:	460b      	mov	r3, r1
 800542c:	4313      	orrs	r3, r2
 800542e:	d011      	beq.n	8005454 <HAL_RCCEx_PeriphCLKConfig+0x1320>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8005430:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005434:	3328      	adds	r3, #40	@ 0x28
 8005436:	2102      	movs	r1, #2
 8005438:	4618      	mov	r0, r3
 800543a:	f000 fb8b 	bl	8005b54 <RCCEx_PLL3_Config>
 800543e:	4603      	mov	r3, r0
 8005440:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 8005444:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005448:	2b00      	cmp	r3, #0
 800544a:	d003      	beq.n	8005454 <HAL_RCCEx_PeriphCLKConfig+0x1320>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800544c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005450:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    } 
  }

  if (status == HAL_OK)
 8005454:	f897 3116 	ldrb.w	r3, [r7, #278]	@ 0x116
 8005458:	2b00      	cmp	r3, #0
 800545a:	d101      	bne.n	8005460 <HAL_RCCEx_PeriphCLKConfig+0x132c>
  {
    return HAL_OK;
 800545c:	2300      	movs	r3, #0
 800545e:	e000      	b.n	8005462 <HAL_RCCEx_PeriphCLKConfig+0x132e>
  }
  return HAL_ERROR;
 8005460:	2301      	movs	r3, #1
}
 8005462:	4618      	mov	r0, r3
 8005464:	f507 778c 	add.w	r7, r7, #280	@ 0x118
 8005468:	46bd      	mov	sp, r7
 800546a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800546e:	bf00      	nop
 8005470:	58024400 	.word	0x58024400

08005474 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8005474:	b580      	push	{r7, lr}
 8005476:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8005478:	f7fe fdbe 	bl	8003ff8 <HAL_RCC_GetHCLKFreq>
 800547c:	4602      	mov	r2, r0
 800547e:	4b06      	ldr	r3, [pc, #24]	@ (8005498 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8005480:	6a1b      	ldr	r3, [r3, #32]
 8005482:	091b      	lsrs	r3, r3, #4
 8005484:	f003 0307 	and.w	r3, r3, #7
 8005488:	4904      	ldr	r1, [pc, #16]	@ (800549c <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 800548a:	5ccb      	ldrb	r3, [r1, r3]
 800548c:	f003 031f 	and.w	r3, r3, #31
 8005490:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8005494:	4618      	mov	r0, r3
 8005496:	bd80      	pop	{r7, pc}
 8005498:	58024400 	.word	0x58024400
 800549c:	0800a868 	.word	0x0800a868

080054a0 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 80054a0:	b480      	push	{r7}
 80054a2:	b089      	sub	sp, #36	@ 0x24
 80054a4:	af00      	add	r7, sp, #0
 80054a6:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80054a8:	4ba1      	ldr	r3, [pc, #644]	@ (8005730 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80054aa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80054ac:	f003 0303 	and.w	r3, r3, #3
 80054b0:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 80054b2:	4b9f      	ldr	r3, [pc, #636]	@ (8005730 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80054b4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80054b6:	0b1b      	lsrs	r3, r3, #12
 80054b8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80054bc:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 80054be:	4b9c      	ldr	r3, [pc, #624]	@ (8005730 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80054c0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80054c2:	091b      	lsrs	r3, r3, #4
 80054c4:	f003 0301 	and.w	r3, r3, #1
 80054c8:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 80054ca:	4b99      	ldr	r3, [pc, #612]	@ (8005730 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80054cc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80054ce:	08db      	lsrs	r3, r3, #3
 80054d0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80054d4:	693a      	ldr	r2, [r7, #16]
 80054d6:	fb02 f303 	mul.w	r3, r2, r3
 80054da:	ee07 3a90 	vmov	s15, r3
 80054de:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80054e2:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 80054e6:	697b      	ldr	r3, [r7, #20]
 80054e8:	2b00      	cmp	r3, #0
 80054ea:	f000 8111 	beq.w	8005710 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 80054ee:	69bb      	ldr	r3, [r7, #24]
 80054f0:	2b02      	cmp	r3, #2
 80054f2:	f000 8083 	beq.w	80055fc <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 80054f6:	69bb      	ldr	r3, [r7, #24]
 80054f8:	2b02      	cmp	r3, #2
 80054fa:	f200 80a1 	bhi.w	8005640 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 80054fe:	69bb      	ldr	r3, [r7, #24]
 8005500:	2b00      	cmp	r3, #0
 8005502:	d003      	beq.n	800550c <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8005504:	69bb      	ldr	r3, [r7, #24]
 8005506:	2b01      	cmp	r3, #1
 8005508:	d056      	beq.n	80055b8 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 800550a:	e099      	b.n	8005640 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800550c:	4b88      	ldr	r3, [pc, #544]	@ (8005730 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800550e:	681b      	ldr	r3, [r3, #0]
 8005510:	f003 0320 	and.w	r3, r3, #32
 8005514:	2b00      	cmp	r3, #0
 8005516:	d02d      	beq.n	8005574 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8005518:	4b85      	ldr	r3, [pc, #532]	@ (8005730 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800551a:	681b      	ldr	r3, [r3, #0]
 800551c:	08db      	lsrs	r3, r3, #3
 800551e:	f003 0303 	and.w	r3, r3, #3
 8005522:	4a84      	ldr	r2, [pc, #528]	@ (8005734 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8005524:	fa22 f303 	lsr.w	r3, r2, r3
 8005528:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800552a:	68bb      	ldr	r3, [r7, #8]
 800552c:	ee07 3a90 	vmov	s15, r3
 8005530:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005534:	697b      	ldr	r3, [r7, #20]
 8005536:	ee07 3a90 	vmov	s15, r3
 800553a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800553e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005542:	4b7b      	ldr	r3, [pc, #492]	@ (8005730 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005544:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005546:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800554a:	ee07 3a90 	vmov	s15, r3
 800554e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005552:	ed97 6a03 	vldr	s12, [r7, #12]
 8005556:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8005738 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800555a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800555e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005562:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005566:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800556a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800556e:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8005572:	e087      	b.n	8005684 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8005574:	697b      	ldr	r3, [r7, #20]
 8005576:	ee07 3a90 	vmov	s15, r3
 800557a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800557e:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 800573c <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8005582:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005586:	4b6a      	ldr	r3, [pc, #424]	@ (8005730 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005588:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800558a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800558e:	ee07 3a90 	vmov	s15, r3
 8005592:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005596:	ed97 6a03 	vldr	s12, [r7, #12]
 800559a:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8005738 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800559e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80055a2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80055a6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80055aa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80055ae:	ee67 7a27 	vmul.f32	s15, s14, s15
 80055b2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80055b6:	e065      	b.n	8005684 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80055b8:	697b      	ldr	r3, [r7, #20]
 80055ba:	ee07 3a90 	vmov	s15, r3
 80055be:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80055c2:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8005740 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 80055c6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80055ca:	4b59      	ldr	r3, [pc, #356]	@ (8005730 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80055cc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80055ce:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80055d2:	ee07 3a90 	vmov	s15, r3
 80055d6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80055da:	ed97 6a03 	vldr	s12, [r7, #12]
 80055de:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8005738 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80055e2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80055e6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80055ea:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80055ee:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80055f2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80055f6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80055fa:	e043      	b.n	8005684 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80055fc:	697b      	ldr	r3, [r7, #20]
 80055fe:	ee07 3a90 	vmov	s15, r3
 8005602:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005606:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8005744 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 800560a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800560e:	4b48      	ldr	r3, [pc, #288]	@ (8005730 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005610:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005612:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005616:	ee07 3a90 	vmov	s15, r3
 800561a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800561e:	ed97 6a03 	vldr	s12, [r7, #12]
 8005622:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8005738 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8005626:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800562a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800562e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005632:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005636:	ee67 7a27 	vmul.f32	s15, s14, s15
 800563a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800563e:	e021      	b.n	8005684 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8005640:	697b      	ldr	r3, [r7, #20]
 8005642:	ee07 3a90 	vmov	s15, r3
 8005646:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800564a:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8005740 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800564e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005652:	4b37      	ldr	r3, [pc, #220]	@ (8005730 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005654:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005656:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800565a:	ee07 3a90 	vmov	s15, r3
 800565e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005662:	ed97 6a03 	vldr	s12, [r7, #12]
 8005666:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8005738 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800566a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800566e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005672:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005676:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800567a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800567e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005682:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 8005684:	4b2a      	ldr	r3, [pc, #168]	@ (8005730 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005686:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005688:	0a5b      	lsrs	r3, r3, #9
 800568a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800568e:	ee07 3a90 	vmov	s15, r3
 8005692:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005696:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800569a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800569e:	edd7 6a07 	vldr	s13, [r7, #28]
 80056a2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80056a6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80056aa:	ee17 2a90 	vmov	r2, s15
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 80056b2:	4b1f      	ldr	r3, [pc, #124]	@ (8005730 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80056b4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80056b6:	0c1b      	lsrs	r3, r3, #16
 80056b8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80056bc:	ee07 3a90 	vmov	s15, r3
 80056c0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80056c4:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80056c8:	ee37 7a87 	vadd.f32	s14, s15, s14
 80056cc:	edd7 6a07 	vldr	s13, [r7, #28]
 80056d0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80056d4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80056d8:	ee17 2a90 	vmov	r2, s15
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 80056e0:	4b13      	ldr	r3, [pc, #76]	@ (8005730 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80056e2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80056e4:	0e1b      	lsrs	r3, r3, #24
 80056e6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80056ea:	ee07 3a90 	vmov	s15, r3
 80056ee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80056f2:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80056f6:	ee37 7a87 	vadd.f32	s14, s15, s14
 80056fa:	edd7 6a07 	vldr	s13, [r7, #28]
 80056fe:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005702:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005706:	ee17 2a90 	vmov	r2, s15
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800570e:	e008      	b.n	8005722 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	2200      	movs	r2, #0
 8005714:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	2200      	movs	r2, #0
 800571a:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	2200      	movs	r2, #0
 8005720:	609a      	str	r2, [r3, #8]
}
 8005722:	bf00      	nop
 8005724:	3724      	adds	r7, #36	@ 0x24
 8005726:	46bd      	mov	sp, r7
 8005728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800572c:	4770      	bx	lr
 800572e:	bf00      	nop
 8005730:	58024400 	.word	0x58024400
 8005734:	03d09000 	.word	0x03d09000
 8005738:	46000000 	.word	0x46000000
 800573c:	4c742400 	.word	0x4c742400
 8005740:	4a742400 	.word	0x4a742400
 8005744:	4c371b00 	.word	0x4c371b00

08005748 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 8005748:	b480      	push	{r7}
 800574a:	b089      	sub	sp, #36	@ 0x24
 800574c:	af00      	add	r7, sp, #0
 800574e:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8005750:	4ba1      	ldr	r3, [pc, #644]	@ (80059d8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005752:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005754:	f003 0303 	and.w	r3, r3, #3
 8005758:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 800575a:	4b9f      	ldr	r3, [pc, #636]	@ (80059d8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800575c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800575e:	0d1b      	lsrs	r3, r3, #20
 8005760:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8005764:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8005766:	4b9c      	ldr	r3, [pc, #624]	@ (80059d8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005768:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800576a:	0a1b      	lsrs	r3, r3, #8
 800576c:	f003 0301 	and.w	r3, r3, #1
 8005770:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 8005772:	4b99      	ldr	r3, [pc, #612]	@ (80059d8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005774:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005776:	08db      	lsrs	r3, r3, #3
 8005778:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800577c:	693a      	ldr	r2, [r7, #16]
 800577e:	fb02 f303 	mul.w	r3, r2, r3
 8005782:	ee07 3a90 	vmov	s15, r3
 8005786:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800578a:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 800578e:	697b      	ldr	r3, [r7, #20]
 8005790:	2b00      	cmp	r3, #0
 8005792:	f000 8111 	beq.w	80059b8 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8005796:	69bb      	ldr	r3, [r7, #24]
 8005798:	2b02      	cmp	r3, #2
 800579a:	f000 8083 	beq.w	80058a4 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 800579e:	69bb      	ldr	r3, [r7, #24]
 80057a0:	2b02      	cmp	r3, #2
 80057a2:	f200 80a1 	bhi.w	80058e8 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 80057a6:	69bb      	ldr	r3, [r7, #24]
 80057a8:	2b00      	cmp	r3, #0
 80057aa:	d003      	beq.n	80057b4 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 80057ac:	69bb      	ldr	r3, [r7, #24]
 80057ae:	2b01      	cmp	r3, #1
 80057b0:	d056      	beq.n	8005860 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 80057b2:	e099      	b.n	80058e8 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80057b4:	4b88      	ldr	r3, [pc, #544]	@ (80059d8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80057b6:	681b      	ldr	r3, [r3, #0]
 80057b8:	f003 0320 	and.w	r3, r3, #32
 80057bc:	2b00      	cmp	r3, #0
 80057be:	d02d      	beq.n	800581c <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80057c0:	4b85      	ldr	r3, [pc, #532]	@ (80059d8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80057c2:	681b      	ldr	r3, [r3, #0]
 80057c4:	08db      	lsrs	r3, r3, #3
 80057c6:	f003 0303 	and.w	r3, r3, #3
 80057ca:	4a84      	ldr	r2, [pc, #528]	@ (80059dc <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 80057cc:	fa22 f303 	lsr.w	r3, r2, r3
 80057d0:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80057d2:	68bb      	ldr	r3, [r7, #8]
 80057d4:	ee07 3a90 	vmov	s15, r3
 80057d8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80057dc:	697b      	ldr	r3, [r7, #20]
 80057de:	ee07 3a90 	vmov	s15, r3
 80057e2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80057e6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80057ea:	4b7b      	ldr	r3, [pc, #492]	@ (80059d8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80057ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80057ee:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80057f2:	ee07 3a90 	vmov	s15, r3
 80057f6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80057fa:	ed97 6a03 	vldr	s12, [r7, #12]
 80057fe:	eddf 5a78 	vldr	s11, [pc, #480]	@ 80059e0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8005802:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005806:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800580a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800580e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005812:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005816:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800581a:	e087      	b.n	800592c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800581c:	697b      	ldr	r3, [r7, #20]
 800581e:	ee07 3a90 	vmov	s15, r3
 8005822:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005826:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 80059e4 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 800582a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800582e:	4b6a      	ldr	r3, [pc, #424]	@ (80059d8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005830:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005832:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005836:	ee07 3a90 	vmov	s15, r3
 800583a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800583e:	ed97 6a03 	vldr	s12, [r7, #12]
 8005842:	eddf 5a67 	vldr	s11, [pc, #412]	@ 80059e0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8005846:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800584a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800584e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005852:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005856:	ee67 7a27 	vmul.f32	s15, s14, s15
 800585a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800585e:	e065      	b.n	800592c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8005860:	697b      	ldr	r3, [r7, #20]
 8005862:	ee07 3a90 	vmov	s15, r3
 8005866:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800586a:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 80059e8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800586e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005872:	4b59      	ldr	r3, [pc, #356]	@ (80059d8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005874:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005876:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800587a:	ee07 3a90 	vmov	s15, r3
 800587e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005882:	ed97 6a03 	vldr	s12, [r7, #12]
 8005886:	eddf 5a56 	vldr	s11, [pc, #344]	@ 80059e0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800588a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800588e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005892:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005896:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800589a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800589e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80058a2:	e043      	b.n	800592c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80058a4:	697b      	ldr	r3, [r7, #20]
 80058a6:	ee07 3a90 	vmov	s15, r3
 80058aa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80058ae:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 80059ec <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 80058b2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80058b6:	4b48      	ldr	r3, [pc, #288]	@ (80059d8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80058b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80058ba:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80058be:	ee07 3a90 	vmov	s15, r3
 80058c2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80058c6:	ed97 6a03 	vldr	s12, [r7, #12]
 80058ca:	eddf 5a45 	vldr	s11, [pc, #276]	@ 80059e0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80058ce:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80058d2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80058d6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80058da:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80058de:	ee67 7a27 	vmul.f32	s15, s14, s15
 80058e2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80058e6:	e021      	b.n	800592c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80058e8:	697b      	ldr	r3, [r7, #20]
 80058ea:	ee07 3a90 	vmov	s15, r3
 80058ee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80058f2:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 80059e8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 80058f6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80058fa:	4b37      	ldr	r3, [pc, #220]	@ (80059d8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80058fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80058fe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005902:	ee07 3a90 	vmov	s15, r3
 8005906:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800590a:	ed97 6a03 	vldr	s12, [r7, #12]
 800590e:	eddf 5a34 	vldr	s11, [pc, #208]	@ 80059e0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8005912:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005916:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800591a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800591e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005922:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005926:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800592a:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 800592c:	4b2a      	ldr	r3, [pc, #168]	@ (80059d8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800592e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005930:	0a5b      	lsrs	r3, r3, #9
 8005932:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005936:	ee07 3a90 	vmov	s15, r3
 800593a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800593e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8005942:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005946:	edd7 6a07 	vldr	s13, [r7, #28]
 800594a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800594e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005952:	ee17 2a90 	vmov	r2, s15
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 800595a:	4b1f      	ldr	r3, [pc, #124]	@ (80059d8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800595c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800595e:	0c1b      	lsrs	r3, r3, #16
 8005960:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005964:	ee07 3a90 	vmov	s15, r3
 8005968:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800596c:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8005970:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005974:	edd7 6a07 	vldr	s13, [r7, #28]
 8005978:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800597c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005980:	ee17 2a90 	vmov	r2, s15
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 8005988:	4b13      	ldr	r3, [pc, #76]	@ (80059d8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800598a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800598c:	0e1b      	lsrs	r3, r3, #24
 800598e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005992:	ee07 3a90 	vmov	s15, r3
 8005996:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800599a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800599e:	ee37 7a87 	vadd.f32	s14, s15, s14
 80059a2:	edd7 6a07 	vldr	s13, [r7, #28]
 80059a6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80059aa:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80059ae:	ee17 2a90 	vmov	r2, s15
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 80059b6:	e008      	b.n	80059ca <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	2200      	movs	r2, #0
 80059bc:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	2200      	movs	r2, #0
 80059c2:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	2200      	movs	r2, #0
 80059c8:	609a      	str	r2, [r3, #8]
}
 80059ca:	bf00      	nop
 80059cc:	3724      	adds	r7, #36	@ 0x24
 80059ce:	46bd      	mov	sp, r7
 80059d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059d4:	4770      	bx	lr
 80059d6:	bf00      	nop
 80059d8:	58024400 	.word	0x58024400
 80059dc:	03d09000 	.word	0x03d09000
 80059e0:	46000000 	.word	0x46000000
 80059e4:	4c742400 	.word	0x4c742400
 80059e8:	4a742400 	.word	0x4a742400
 80059ec:	4c371b00 	.word	0x4c371b00

080059f0 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 80059f0:	b580      	push	{r7, lr}
 80059f2:	b084      	sub	sp, #16
 80059f4:	af00      	add	r7, sp, #0
 80059f6:	6078      	str	r0, [r7, #4]
 80059f8:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80059fa:	2300      	movs	r3, #0
 80059fc:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80059fe:	4b53      	ldr	r3, [pc, #332]	@ (8005b4c <RCCEx_PLL2_Config+0x15c>)
 8005a00:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005a02:	f003 0303 	and.w	r3, r3, #3
 8005a06:	2b03      	cmp	r3, #3
 8005a08:	d101      	bne.n	8005a0e <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8005a0a:	2301      	movs	r3, #1
 8005a0c:	e099      	b.n	8005b42 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8005a0e:	4b4f      	ldr	r3, [pc, #316]	@ (8005b4c <RCCEx_PLL2_Config+0x15c>)
 8005a10:	681b      	ldr	r3, [r3, #0]
 8005a12:	4a4e      	ldr	r2, [pc, #312]	@ (8005b4c <RCCEx_PLL2_Config+0x15c>)
 8005a14:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8005a18:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005a1a:	f7fc f9b7 	bl	8001d8c <HAL_GetTick>
 8005a1e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8005a20:	e008      	b.n	8005a34 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8005a22:	f7fc f9b3 	bl	8001d8c <HAL_GetTick>
 8005a26:	4602      	mov	r2, r0
 8005a28:	68bb      	ldr	r3, [r7, #8]
 8005a2a:	1ad3      	subs	r3, r2, r3
 8005a2c:	2b02      	cmp	r3, #2
 8005a2e:	d901      	bls.n	8005a34 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8005a30:	2303      	movs	r3, #3
 8005a32:	e086      	b.n	8005b42 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8005a34:	4b45      	ldr	r3, [pc, #276]	@ (8005b4c <RCCEx_PLL2_Config+0x15c>)
 8005a36:	681b      	ldr	r3, [r3, #0]
 8005a38:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005a3c:	2b00      	cmp	r3, #0
 8005a3e:	d1f0      	bne.n	8005a22 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8005a40:	4b42      	ldr	r3, [pc, #264]	@ (8005b4c <RCCEx_PLL2_Config+0x15c>)
 8005a42:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005a44:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	681b      	ldr	r3, [r3, #0]
 8005a4c:	031b      	lsls	r3, r3, #12
 8005a4e:	493f      	ldr	r1, [pc, #252]	@ (8005b4c <RCCEx_PLL2_Config+0x15c>)
 8005a50:	4313      	orrs	r3, r2
 8005a52:	628b      	str	r3, [r1, #40]	@ 0x28
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	685b      	ldr	r3, [r3, #4]
 8005a58:	3b01      	subs	r3, #1
 8005a5a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	689b      	ldr	r3, [r3, #8]
 8005a62:	3b01      	subs	r3, #1
 8005a64:	025b      	lsls	r3, r3, #9
 8005a66:	b29b      	uxth	r3, r3
 8005a68:	431a      	orrs	r2, r3
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	68db      	ldr	r3, [r3, #12]
 8005a6e:	3b01      	subs	r3, #1
 8005a70:	041b      	lsls	r3, r3, #16
 8005a72:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8005a76:	431a      	orrs	r2, r3
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	691b      	ldr	r3, [r3, #16]
 8005a7c:	3b01      	subs	r3, #1
 8005a7e:	061b      	lsls	r3, r3, #24
 8005a80:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8005a84:	4931      	ldr	r1, [pc, #196]	@ (8005b4c <RCCEx_PLL2_Config+0x15c>)
 8005a86:	4313      	orrs	r3, r2
 8005a88:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8005a8a:	4b30      	ldr	r3, [pc, #192]	@ (8005b4c <RCCEx_PLL2_Config+0x15c>)
 8005a8c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005a8e:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	695b      	ldr	r3, [r3, #20]
 8005a96:	492d      	ldr	r1, [pc, #180]	@ (8005b4c <RCCEx_PLL2_Config+0x15c>)
 8005a98:	4313      	orrs	r3, r2
 8005a9a:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8005a9c:	4b2b      	ldr	r3, [pc, #172]	@ (8005b4c <RCCEx_PLL2_Config+0x15c>)
 8005a9e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005aa0:	f023 0220 	bic.w	r2, r3, #32
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	699b      	ldr	r3, [r3, #24]
 8005aa8:	4928      	ldr	r1, [pc, #160]	@ (8005b4c <RCCEx_PLL2_Config+0x15c>)
 8005aaa:	4313      	orrs	r3, r2
 8005aac:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8005aae:	4b27      	ldr	r3, [pc, #156]	@ (8005b4c <RCCEx_PLL2_Config+0x15c>)
 8005ab0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005ab2:	4a26      	ldr	r2, [pc, #152]	@ (8005b4c <RCCEx_PLL2_Config+0x15c>)
 8005ab4:	f023 0310 	bic.w	r3, r3, #16
 8005ab8:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8005aba:	4b24      	ldr	r3, [pc, #144]	@ (8005b4c <RCCEx_PLL2_Config+0x15c>)
 8005abc:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8005abe:	4b24      	ldr	r3, [pc, #144]	@ (8005b50 <RCCEx_PLL2_Config+0x160>)
 8005ac0:	4013      	ands	r3, r2
 8005ac2:	687a      	ldr	r2, [r7, #4]
 8005ac4:	69d2      	ldr	r2, [r2, #28]
 8005ac6:	00d2      	lsls	r2, r2, #3
 8005ac8:	4920      	ldr	r1, [pc, #128]	@ (8005b4c <RCCEx_PLL2_Config+0x15c>)
 8005aca:	4313      	orrs	r3, r2
 8005acc:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8005ace:	4b1f      	ldr	r3, [pc, #124]	@ (8005b4c <RCCEx_PLL2_Config+0x15c>)
 8005ad0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005ad2:	4a1e      	ldr	r2, [pc, #120]	@ (8005b4c <RCCEx_PLL2_Config+0x15c>)
 8005ad4:	f043 0310 	orr.w	r3, r3, #16
 8005ad8:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8005ada:	683b      	ldr	r3, [r7, #0]
 8005adc:	2b00      	cmp	r3, #0
 8005ade:	d106      	bne.n	8005aee <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8005ae0:	4b1a      	ldr	r3, [pc, #104]	@ (8005b4c <RCCEx_PLL2_Config+0x15c>)
 8005ae2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005ae4:	4a19      	ldr	r2, [pc, #100]	@ (8005b4c <RCCEx_PLL2_Config+0x15c>)
 8005ae6:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8005aea:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8005aec:	e00f      	b.n	8005b0e <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8005aee:	683b      	ldr	r3, [r7, #0]
 8005af0:	2b01      	cmp	r3, #1
 8005af2:	d106      	bne.n	8005b02 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8005af4:	4b15      	ldr	r3, [pc, #84]	@ (8005b4c <RCCEx_PLL2_Config+0x15c>)
 8005af6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005af8:	4a14      	ldr	r2, [pc, #80]	@ (8005b4c <RCCEx_PLL2_Config+0x15c>)
 8005afa:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005afe:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8005b00:	e005      	b.n	8005b0e <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8005b02:	4b12      	ldr	r3, [pc, #72]	@ (8005b4c <RCCEx_PLL2_Config+0x15c>)
 8005b04:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005b06:	4a11      	ldr	r2, [pc, #68]	@ (8005b4c <RCCEx_PLL2_Config+0x15c>)
 8005b08:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8005b0c:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8005b0e:	4b0f      	ldr	r3, [pc, #60]	@ (8005b4c <RCCEx_PLL2_Config+0x15c>)
 8005b10:	681b      	ldr	r3, [r3, #0]
 8005b12:	4a0e      	ldr	r2, [pc, #56]	@ (8005b4c <RCCEx_PLL2_Config+0x15c>)
 8005b14:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8005b18:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005b1a:	f7fc f937 	bl	8001d8c <HAL_GetTick>
 8005b1e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8005b20:	e008      	b.n	8005b34 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8005b22:	f7fc f933 	bl	8001d8c <HAL_GetTick>
 8005b26:	4602      	mov	r2, r0
 8005b28:	68bb      	ldr	r3, [r7, #8]
 8005b2a:	1ad3      	subs	r3, r2, r3
 8005b2c:	2b02      	cmp	r3, #2
 8005b2e:	d901      	bls.n	8005b34 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8005b30:	2303      	movs	r3, #3
 8005b32:	e006      	b.n	8005b42 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8005b34:	4b05      	ldr	r3, [pc, #20]	@ (8005b4c <RCCEx_PLL2_Config+0x15c>)
 8005b36:	681b      	ldr	r3, [r3, #0]
 8005b38:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005b3c:	2b00      	cmp	r3, #0
 8005b3e:	d0f0      	beq.n	8005b22 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8005b40:	7bfb      	ldrb	r3, [r7, #15]
}
 8005b42:	4618      	mov	r0, r3
 8005b44:	3710      	adds	r7, #16
 8005b46:	46bd      	mov	sp, r7
 8005b48:	bd80      	pop	{r7, pc}
 8005b4a:	bf00      	nop
 8005b4c:	58024400 	.word	0x58024400
 8005b50:	ffff0007 	.word	0xffff0007

08005b54 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8005b54:	b580      	push	{r7, lr}
 8005b56:	b084      	sub	sp, #16
 8005b58:	af00      	add	r7, sp, #0
 8005b5a:	6078      	str	r0, [r7, #4]
 8005b5c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005b5e:	2300      	movs	r3, #0
 8005b60:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8005b62:	4b53      	ldr	r3, [pc, #332]	@ (8005cb0 <RCCEx_PLL3_Config+0x15c>)
 8005b64:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005b66:	f003 0303 	and.w	r3, r3, #3
 8005b6a:	2b03      	cmp	r3, #3
 8005b6c:	d101      	bne.n	8005b72 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8005b6e:	2301      	movs	r3, #1
 8005b70:	e099      	b.n	8005ca6 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8005b72:	4b4f      	ldr	r3, [pc, #316]	@ (8005cb0 <RCCEx_PLL3_Config+0x15c>)
 8005b74:	681b      	ldr	r3, [r3, #0]
 8005b76:	4a4e      	ldr	r2, [pc, #312]	@ (8005cb0 <RCCEx_PLL3_Config+0x15c>)
 8005b78:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005b7c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005b7e:	f7fc f905 	bl	8001d8c <HAL_GetTick>
 8005b82:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8005b84:	e008      	b.n	8005b98 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8005b86:	f7fc f901 	bl	8001d8c <HAL_GetTick>
 8005b8a:	4602      	mov	r2, r0
 8005b8c:	68bb      	ldr	r3, [r7, #8]
 8005b8e:	1ad3      	subs	r3, r2, r3
 8005b90:	2b02      	cmp	r3, #2
 8005b92:	d901      	bls.n	8005b98 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8005b94:	2303      	movs	r3, #3
 8005b96:	e086      	b.n	8005ca6 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8005b98:	4b45      	ldr	r3, [pc, #276]	@ (8005cb0 <RCCEx_PLL3_Config+0x15c>)
 8005b9a:	681b      	ldr	r3, [r3, #0]
 8005b9c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8005ba0:	2b00      	cmp	r3, #0
 8005ba2:	d1f0      	bne.n	8005b86 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8005ba4:	4b42      	ldr	r3, [pc, #264]	@ (8005cb0 <RCCEx_PLL3_Config+0x15c>)
 8005ba6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005ba8:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	681b      	ldr	r3, [r3, #0]
 8005bb0:	051b      	lsls	r3, r3, #20
 8005bb2:	493f      	ldr	r1, [pc, #252]	@ (8005cb0 <RCCEx_PLL3_Config+0x15c>)
 8005bb4:	4313      	orrs	r3, r2
 8005bb6:	628b      	str	r3, [r1, #40]	@ 0x28
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	685b      	ldr	r3, [r3, #4]
 8005bbc:	3b01      	subs	r3, #1
 8005bbe:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	689b      	ldr	r3, [r3, #8]
 8005bc6:	3b01      	subs	r3, #1
 8005bc8:	025b      	lsls	r3, r3, #9
 8005bca:	b29b      	uxth	r3, r3
 8005bcc:	431a      	orrs	r2, r3
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	68db      	ldr	r3, [r3, #12]
 8005bd2:	3b01      	subs	r3, #1
 8005bd4:	041b      	lsls	r3, r3, #16
 8005bd6:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8005bda:	431a      	orrs	r2, r3
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	691b      	ldr	r3, [r3, #16]
 8005be0:	3b01      	subs	r3, #1
 8005be2:	061b      	lsls	r3, r3, #24
 8005be4:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8005be8:	4931      	ldr	r1, [pc, #196]	@ (8005cb0 <RCCEx_PLL3_Config+0x15c>)
 8005bea:	4313      	orrs	r3, r2
 8005bec:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8005bee:	4b30      	ldr	r3, [pc, #192]	@ (8005cb0 <RCCEx_PLL3_Config+0x15c>)
 8005bf0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005bf2:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	695b      	ldr	r3, [r3, #20]
 8005bfa:	492d      	ldr	r1, [pc, #180]	@ (8005cb0 <RCCEx_PLL3_Config+0x15c>)
 8005bfc:	4313      	orrs	r3, r2
 8005bfe:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8005c00:	4b2b      	ldr	r3, [pc, #172]	@ (8005cb0 <RCCEx_PLL3_Config+0x15c>)
 8005c02:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005c04:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	699b      	ldr	r3, [r3, #24]
 8005c0c:	4928      	ldr	r1, [pc, #160]	@ (8005cb0 <RCCEx_PLL3_Config+0x15c>)
 8005c0e:	4313      	orrs	r3, r2
 8005c10:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8005c12:	4b27      	ldr	r3, [pc, #156]	@ (8005cb0 <RCCEx_PLL3_Config+0x15c>)
 8005c14:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005c16:	4a26      	ldr	r2, [pc, #152]	@ (8005cb0 <RCCEx_PLL3_Config+0x15c>)
 8005c18:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005c1c:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8005c1e:	4b24      	ldr	r3, [pc, #144]	@ (8005cb0 <RCCEx_PLL3_Config+0x15c>)
 8005c20:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005c22:	4b24      	ldr	r3, [pc, #144]	@ (8005cb4 <RCCEx_PLL3_Config+0x160>)
 8005c24:	4013      	ands	r3, r2
 8005c26:	687a      	ldr	r2, [r7, #4]
 8005c28:	69d2      	ldr	r2, [r2, #28]
 8005c2a:	00d2      	lsls	r2, r2, #3
 8005c2c:	4920      	ldr	r1, [pc, #128]	@ (8005cb0 <RCCEx_PLL3_Config+0x15c>)
 8005c2e:	4313      	orrs	r3, r2
 8005c30:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8005c32:	4b1f      	ldr	r3, [pc, #124]	@ (8005cb0 <RCCEx_PLL3_Config+0x15c>)
 8005c34:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005c36:	4a1e      	ldr	r2, [pc, #120]	@ (8005cb0 <RCCEx_PLL3_Config+0x15c>)
 8005c38:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005c3c:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8005c3e:	683b      	ldr	r3, [r7, #0]
 8005c40:	2b00      	cmp	r3, #0
 8005c42:	d106      	bne.n	8005c52 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8005c44:	4b1a      	ldr	r3, [pc, #104]	@ (8005cb0 <RCCEx_PLL3_Config+0x15c>)
 8005c46:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005c48:	4a19      	ldr	r2, [pc, #100]	@ (8005cb0 <RCCEx_PLL3_Config+0x15c>)
 8005c4a:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8005c4e:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8005c50:	e00f      	b.n	8005c72 <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8005c52:	683b      	ldr	r3, [r7, #0]
 8005c54:	2b01      	cmp	r3, #1
 8005c56:	d106      	bne.n	8005c66 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8005c58:	4b15      	ldr	r3, [pc, #84]	@ (8005cb0 <RCCEx_PLL3_Config+0x15c>)
 8005c5a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005c5c:	4a14      	ldr	r2, [pc, #80]	@ (8005cb0 <RCCEx_PLL3_Config+0x15c>)
 8005c5e:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8005c62:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8005c64:	e005      	b.n	8005c72 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8005c66:	4b12      	ldr	r3, [pc, #72]	@ (8005cb0 <RCCEx_PLL3_Config+0x15c>)
 8005c68:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005c6a:	4a11      	ldr	r2, [pc, #68]	@ (8005cb0 <RCCEx_PLL3_Config+0x15c>)
 8005c6c:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8005c70:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8005c72:	4b0f      	ldr	r3, [pc, #60]	@ (8005cb0 <RCCEx_PLL3_Config+0x15c>)
 8005c74:	681b      	ldr	r3, [r3, #0]
 8005c76:	4a0e      	ldr	r2, [pc, #56]	@ (8005cb0 <RCCEx_PLL3_Config+0x15c>)
 8005c78:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005c7c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005c7e:	f7fc f885 	bl	8001d8c <HAL_GetTick>
 8005c82:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8005c84:	e008      	b.n	8005c98 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8005c86:	f7fc f881 	bl	8001d8c <HAL_GetTick>
 8005c8a:	4602      	mov	r2, r0
 8005c8c:	68bb      	ldr	r3, [r7, #8]
 8005c8e:	1ad3      	subs	r3, r2, r3
 8005c90:	2b02      	cmp	r3, #2
 8005c92:	d901      	bls.n	8005c98 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8005c94:	2303      	movs	r3, #3
 8005c96:	e006      	b.n	8005ca6 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8005c98:	4b05      	ldr	r3, [pc, #20]	@ (8005cb0 <RCCEx_PLL3_Config+0x15c>)
 8005c9a:	681b      	ldr	r3, [r3, #0]
 8005c9c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8005ca0:	2b00      	cmp	r3, #0
 8005ca2:	d0f0      	beq.n	8005c86 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8005ca4:	7bfb      	ldrb	r3, [r7, #15]
}
 8005ca6:	4618      	mov	r0, r3
 8005ca8:	3710      	adds	r7, #16
 8005caa:	46bd      	mov	sp, r7
 8005cac:	bd80      	pop	{r7, pc}
 8005cae:	bf00      	nop
 8005cb0:	58024400 	.word	0x58024400
 8005cb4:	ffff0007 	.word	0xffff0007

08005cb8 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8005cb8:	b580      	push	{r7, lr}
 8005cba:	b084      	sub	sp, #16
 8005cbc:	af00      	add	r7, sp, #0
 8005cbe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8005cc0:	2301      	movs	r3, #1
 8005cc2:	73fb      	strb	r3, [r7, #15]

  /* Check RTC handler */
  if(hrtc != NULL)
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	2b00      	cmp	r3, #0
 8005cc8:	d071      	beq.n	8005dae <HAL_RTC_Init+0xf6>
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else /*  (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */
    if(hrtc->State == HAL_RTC_STATE_RESET)
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8005cd0:	b2db      	uxtb	r3, r3
 8005cd2:	2b00      	cmp	r3, #0
 8005cd4:	d106      	bne.n	8005ce4 <HAL_RTC_Init+0x2c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	2200      	movs	r2, #0
 8005cda:	f883 2020 	strb.w	r2, [r3, #32]

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 8005cde:	6878      	ldr	r0, [r7, #4]
 8005ce0:	f7fb fbb6 	bl	8001450 <HAL_RTC_MspInit>
    }
#endif /*  (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	2202      	movs	r2, #2
 8005ce8:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Check whether the calendar needs to be initialized */
    if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	681b      	ldr	r3, [r3, #0]
 8005cf0:	68db      	ldr	r3, [r3, #12]
 8005cf2:	f003 0310 	and.w	r3, r3, #16
 8005cf6:	2b10      	cmp	r3, #16
 8005cf8:	d050      	beq.n	8005d9c <HAL_RTC_Init+0xe4>
    {
      /* Disable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	681b      	ldr	r3, [r3, #0]
 8005cfe:	22ca      	movs	r2, #202	@ 0xca
 8005d00:	625a      	str	r2, [r3, #36]	@ 0x24
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	681b      	ldr	r3, [r3, #0]
 8005d06:	2253      	movs	r2, #83	@ 0x53
 8005d08:	625a      	str	r2, [r3, #36]	@ 0x24

     /* Enter Initialization mode */
      status = RTC_EnterInitMode(hrtc);
 8005d0a:	6878      	ldr	r0, [r7, #4]
 8005d0c:	f000 f87a 	bl	8005e04 <RTC_EnterInitMode>
 8005d10:	4603      	mov	r3, r0
 8005d12:	73fb      	strb	r3, [r7, #15]
      if (status == HAL_OK)
 8005d14:	7bfb      	ldrb	r3, [r7, #15]
 8005d16:	2b00      	cmp	r3, #0
 8005d18:	d124      	bne.n	8005d64 <HAL_RTC_Init+0xac>
#if defined(TAMP)
        /* Clear RTC_CR FMT, OSEL, POL and TAMPOE Bits */
        hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE);
#else
        /* Clear RTC_CR FMT, OSEL and POL Bits */
        hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL);
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	681b      	ldr	r3, [r3, #0]
 8005d1e:	6899      	ldr	r1, [r3, #8]
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	681a      	ldr	r2, [r3, #0]
 8005d24:	4b24      	ldr	r3, [pc, #144]	@ (8005db8 <HAL_RTC_Init+0x100>)
 8005d26:	400b      	ands	r3, r1
 8005d28:	6093      	str	r3, [r2, #8]
#endif /* TAMP */

        /* Set RTC_CR register */
        hrtc->Instance->CR |= (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	681b      	ldr	r3, [r3, #0]
 8005d2e:	6899      	ldr	r1, [r3, #8]
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	685a      	ldr	r2, [r3, #4]
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	691b      	ldr	r3, [r3, #16]
 8005d38:	431a      	orrs	r2, r3
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	699b      	ldr	r3, [r3, #24]
 8005d3e:	431a      	orrs	r2, r3
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	681b      	ldr	r3, [r3, #0]
 8005d44:	430a      	orrs	r2, r1
 8005d46:	609a      	str	r2, [r3, #8]

        /* Configure the RTC PRER */
        hrtc->Instance->PRER = (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos) | (hrtc->Init.SynchPrediv << RTC_PRER_PREDIV_S_Pos);
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	689b      	ldr	r3, [r3, #8]
 8005d4c:	0419      	lsls	r1, r3, #16
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	68da      	ldr	r2, [r3, #12]
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	681b      	ldr	r3, [r3, #0]
 8005d56:	430a      	orrs	r2, r1
 8005d58:	611a      	str	r2, [r3, #16]

        /* Exit Initialization mode */
        status = RTC_ExitInitMode(hrtc);
 8005d5a:	6878      	ldr	r0, [r7, #4]
 8005d5c:	f000 f886 	bl	8005e6c <RTC_ExitInitMode>
 8005d60:	4603      	mov	r3, r0
 8005d62:	73fb      	strb	r3, [r7, #15]
      }
      if(status == HAL_OK)
 8005d64:	7bfb      	ldrb	r3, [r7, #15]
 8005d66:	2b00      	cmp	r3, #0
 8005d68:	d113      	bne.n	8005d92 <HAL_RTC_Init+0xda>
      {
#if defined(TAMP)
        hrtc->Instance->CR &= ~(RTC_CR_TAMPALRM_PU | RTC_CR_TAMPALRM_TYPE | RTC_CR_OUT2EN);
        hrtc->Instance->CR |= (hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
#else
        hrtc->Instance->OR &= ~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	681b      	ldr	r3, [r3, #0]
 8005d6e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	681b      	ldr	r3, [r3, #0]
 8005d74:	f022 0203 	bic.w	r2, r2, #3
 8005d78:	64da      	str	r2, [r3, #76]	@ 0x4c
        hrtc->Instance->OR |= (hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	681b      	ldr	r3, [r3, #0]
 8005d7e:	6cd9      	ldr	r1, [r3, #76]	@ 0x4c
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	69da      	ldr	r2, [r3, #28]
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	695b      	ldr	r3, [r3, #20]
 8005d88:	431a      	orrs	r2, r3
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	681b      	ldr	r3, [r3, #0]
 8005d8e:	430a      	orrs	r2, r1
 8005d90:	64da      	str	r2, [r3, #76]	@ 0x4c
#endif /* TAMP */
      }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	681b      	ldr	r3, [r3, #0]
 8005d96:	22ff      	movs	r2, #255	@ 0xff
 8005d98:	625a      	str	r2, [r3, #36]	@ 0x24
 8005d9a:	e001      	b.n	8005da0 <HAL_RTC_Init+0xe8>
    }
    else
    {
      /* The calendar is already initialized */
      status = HAL_OK;
 8005d9c:	2300      	movs	r3, #0
 8005d9e:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 8005da0:	7bfb      	ldrb	r3, [r7, #15]
 8005da2:	2b00      	cmp	r3, #0
 8005da4:	d103      	bne.n	8005dae <HAL_RTC_Init+0xf6>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_READY;
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	2201      	movs	r2, #1
 8005daa:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    }
  }

  /* return status */
  return status;
 8005dae:	7bfb      	ldrb	r3, [r7, #15]
}
 8005db0:	4618      	mov	r0, r3
 8005db2:	3710      	adds	r7, #16
 8005db4:	46bd      	mov	sp, r7
 8005db6:	bd80      	pop	{r7, pc}
 8005db8:	ff8fffbf 	.word	0xff8fffbf

08005dbc <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8005dbc:	b580      	push	{r7, lr}
 8005dbe:	b084      	sub	sp, #16
 8005dc0:	af00      	add	r7, sp, #0
 8005dc2:	6078      	str	r0, [r7, #4]

  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
#if defined(TAMP)
  hrtc->Instance->ICSR = ((uint32_t)(RTC_RSF_MASK & RTC_ICSR_RESERVED_MASK));
#else
  hrtc->Instance->ISR = ((uint32_t)(RTC_RSF_MASK & RTC_ISR_RESERVED_MASK));
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	681b      	ldr	r3, [r3, #0]
 8005dc8:	4a0d      	ldr	r2, [pc, #52]	@ (8005e00 <HAL_RTC_WaitForSynchro+0x44>)
 8005dca:	60da      	str	r2, [r3, #12]
#endif /* TAMP */

  tickstart = HAL_GetTick();
 8005dcc:	f7fb ffde 	bl	8001d8c <HAL_GetTick>
 8005dd0:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
#if defined(TAMP)
  while ((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
#else
    while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8005dd2:	e009      	b.n	8005de8 <HAL_RTC_WaitForSynchro+0x2c>
#endif /* TAMP */
    {
      if((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8005dd4:	f7fb ffda 	bl	8001d8c <HAL_GetTick>
 8005dd8:	4602      	mov	r2, r0
 8005dda:	68fb      	ldr	r3, [r7, #12]
 8005ddc:	1ad3      	subs	r3, r2, r3
 8005dde:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8005de2:	d901      	bls.n	8005de8 <HAL_RTC_WaitForSynchro+0x2c>
      {
        return HAL_TIMEOUT;
 8005de4:	2303      	movs	r3, #3
 8005de6:	e007      	b.n	8005df8 <HAL_RTC_WaitForSynchro+0x3c>
    while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	681b      	ldr	r3, [r3, #0]
 8005dec:	68db      	ldr	r3, [r3, #12]
 8005dee:	f003 0320 	and.w	r3, r3, #32
 8005df2:	2b00      	cmp	r3, #0
 8005df4:	d0ee      	beq.n	8005dd4 <HAL_RTC_WaitForSynchro+0x18>
      }
    }

  return HAL_OK;
 8005df6:	2300      	movs	r3, #0
}
 8005df8:	4618      	mov	r0, r3
 8005dfa:	3710      	adds	r7, #16
 8005dfc:	46bd      	mov	sp, r7
 8005dfe:	bd80      	pop	{r7, pc}
 8005e00:	0003ff5f 	.word	0x0003ff5f

08005e04 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8005e04:	b580      	push	{r7, lr}
 8005e06:	b084      	sub	sp, #16
 8005e08:	af00      	add	r7, sp, #0
 8005e0a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005e0c:	2300      	movs	r3, #0
 8005e0e:	73fb      	strb	r3, [r7, #15]
    tickstart = HAL_GetTick();

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while (((hrtc->Instance->ICSR & RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
#else
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	681b      	ldr	r3, [r3, #0]
 8005e14:	68db      	ldr	r3, [r3, #12]
 8005e16:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005e1a:	2b00      	cmp	r3, #0
 8005e1c:	d120      	bne.n	8005e60 <RTC_EnterInitMode+0x5c>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	681b      	ldr	r3, [r3, #0]
 8005e22:	f04f 32ff 	mov.w	r2, #4294967295
 8005e26:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 8005e28:	f7fb ffb0 	bl	8001d8c <HAL_GetTick>
 8005e2c:	60b8      	str	r0, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while (((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8005e2e:	e00d      	b.n	8005e4c <RTC_EnterInitMode+0x48>
#endif /* TAMP */
    {
      if((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 8005e30:	f7fb ffac 	bl	8001d8c <HAL_GetTick>
 8005e34:	4602      	mov	r2, r0
 8005e36:	68bb      	ldr	r3, [r7, #8]
 8005e38:	1ad3      	subs	r3, r2, r3
 8005e3a:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8005e3e:	d905      	bls.n	8005e4c <RTC_EnterInitMode+0x48>
      {
        status = HAL_TIMEOUT;
 8005e40:	2303      	movs	r3, #3
 8005e42:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	2203      	movs	r2, #3
 8005e48:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    while (((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	681b      	ldr	r3, [r3, #0]
 8005e50:	68db      	ldr	r3, [r3, #12]
 8005e52:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005e56:	2b00      	cmp	r3, #0
 8005e58:	d102      	bne.n	8005e60 <RTC_EnterInitMode+0x5c>
 8005e5a:	7bfb      	ldrb	r3, [r7, #15]
 8005e5c:	2b03      	cmp	r3, #3
 8005e5e:	d1e7      	bne.n	8005e30 <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return status;
 8005e60:	7bfb      	ldrb	r3, [r7, #15]
}
 8005e62:	4618      	mov	r0, r3
 8005e64:	3710      	adds	r7, #16
 8005e66:	46bd      	mov	sp, r7
 8005e68:	bd80      	pop	{r7, pc}
	...

08005e6c <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8005e6c:	b580      	push	{r7, lr}
 8005e6e:	b084      	sub	sp, #16
 8005e70:	af00      	add	r7, sp, #0
 8005e72:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005e74:	2300      	movs	r3, #0
 8005e76:	73fb      	strb	r3, [r7, #15]

  /* Exit Initialization mode */
#if defined(TAMP)
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
#else
  CLEAR_BIT(RTC->ISR, RTC_ISR_INIT);
 8005e78:	4b1a      	ldr	r3, [pc, #104]	@ (8005ee4 <RTC_ExitInitMode+0x78>)
 8005e7a:	68db      	ldr	r3, [r3, #12]
 8005e7c:	4a19      	ldr	r2, [pc, #100]	@ (8005ee4 <RTC_ExitInitMode+0x78>)
 8005e7e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005e82:	60d3      	str	r3, [r2, #12]
#endif /* TAMP */

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 8005e84:	4b17      	ldr	r3, [pc, #92]	@ (8005ee4 <RTC_ExitInitMode+0x78>)
 8005e86:	689b      	ldr	r3, [r3, #8]
 8005e88:	f003 0320 	and.w	r3, r3, #32
 8005e8c:	2b00      	cmp	r3, #0
 8005e8e:	d10c      	bne.n	8005eaa <RTC_ExitInitMode+0x3e>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8005e90:	6878      	ldr	r0, [r7, #4]
 8005e92:	f7ff ff93 	bl	8005dbc <HAL_RTC_WaitForSynchro>
 8005e96:	4603      	mov	r3, r0
 8005e98:	2b00      	cmp	r3, #0
 8005e9a:	d01e      	beq.n	8005eda <RTC_ExitInitMode+0x6e>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	2203      	movs	r2, #3
 8005ea0:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
      status = HAL_TIMEOUT;
 8005ea4:	2303      	movs	r3, #3
 8005ea6:	73fb      	strb	r3, [r7, #15]
 8005ea8:	e017      	b.n	8005eda <RTC_ExitInitMode+0x6e>
    }
  }
  else
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8005eaa:	4b0e      	ldr	r3, [pc, #56]	@ (8005ee4 <RTC_ExitInitMode+0x78>)
 8005eac:	689b      	ldr	r3, [r3, #8]
 8005eae:	4a0d      	ldr	r2, [pc, #52]	@ (8005ee4 <RTC_ExitInitMode+0x78>)
 8005eb0:	f023 0320 	bic.w	r3, r3, #32
 8005eb4:	6093      	str	r3, [r2, #8]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8005eb6:	6878      	ldr	r0, [r7, #4]
 8005eb8:	f7ff ff80 	bl	8005dbc <HAL_RTC_WaitForSynchro>
 8005ebc:	4603      	mov	r3, r0
 8005ebe:	2b00      	cmp	r3, #0
 8005ec0:	d005      	beq.n	8005ece <RTC_ExitInitMode+0x62>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	2203      	movs	r2, #3
 8005ec6:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
      status = HAL_TIMEOUT;
 8005eca:	2303      	movs	r3, #3
 8005ecc:	73fb      	strb	r3, [r7, #15]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8005ece:	4b05      	ldr	r3, [pc, #20]	@ (8005ee4 <RTC_ExitInitMode+0x78>)
 8005ed0:	689b      	ldr	r3, [r3, #8]
 8005ed2:	4a04      	ldr	r2, [pc, #16]	@ (8005ee4 <RTC_ExitInitMode+0x78>)
 8005ed4:	f043 0320 	orr.w	r3, r3, #32
 8005ed8:	6093      	str	r3, [r2, #8]
  }

  return status;
 8005eda:	7bfb      	ldrb	r3, [r7, #15]
}
 8005edc:	4618      	mov	r0, r3
 8005ede:	3710      	adds	r7, #16
 8005ee0:	46bd      	mov	sp, r7
 8005ee2:	bd80      	pop	{r7, pc}
 8005ee4:	58004000 	.word	0x58004000

08005ee8 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005ee8:	b580      	push	{r7, lr}
 8005eea:	b084      	sub	sp, #16
 8005eec:	af00      	add	r7, sp, #0
 8005eee:	6078      	str	r0, [r7, #4]
#if (USE_SPI_CRC != 0UL)
  uint32_t crc_poly_msb_mask;
#endif /* USE_SPI_CRC */

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	2b00      	cmp	r3, #0
 8005ef4:	d101      	bne.n	8005efa <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8005ef6:	2301      	movs	r3, #1
 8005ef8:	e10f      	b.n	800611a <HAL_SPI_Init+0x232>
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	2200      	movs	r2, #0
 8005efe:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	681b      	ldr	r3, [r3, #0]
 8005f04:	4a87      	ldr	r2, [pc, #540]	@ (8006124 <HAL_SPI_Init+0x23c>)
 8005f06:	4293      	cmp	r3, r2
 8005f08:	d00f      	beq.n	8005f2a <HAL_SPI_Init+0x42>
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	681b      	ldr	r3, [r3, #0]
 8005f0e:	4a86      	ldr	r2, [pc, #536]	@ (8006128 <HAL_SPI_Init+0x240>)
 8005f10:	4293      	cmp	r3, r2
 8005f12:	d00a      	beq.n	8005f2a <HAL_SPI_Init+0x42>
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	681b      	ldr	r3, [r3, #0]
 8005f18:	4a84      	ldr	r2, [pc, #528]	@ (800612c <HAL_SPI_Init+0x244>)
 8005f1a:	4293      	cmp	r3, r2
 8005f1c:	d005      	beq.n	8005f2a <HAL_SPI_Init+0x42>
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	68db      	ldr	r3, [r3, #12]
 8005f22:	2b0f      	cmp	r3, #15
 8005f24:	d901      	bls.n	8005f2a <HAL_SPI_Init+0x42>
  {
    return HAL_ERROR;
 8005f26:	2301      	movs	r3, #1
 8005f28:	e0f7      	b.n	800611a <HAL_SPI_Init+0x232>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 8005f2a:	6878      	ldr	r0, [r7, #4]
 8005f2c:	f000 f900 	bl	8006130 <SPI_GetPacketSize>
 8005f30:	60f8      	str	r0, [r7, #12]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	681b      	ldr	r3, [r3, #0]
 8005f36:	4a7b      	ldr	r2, [pc, #492]	@ (8006124 <HAL_SPI_Init+0x23c>)
 8005f38:	4293      	cmp	r3, r2
 8005f3a:	d00c      	beq.n	8005f56 <HAL_SPI_Init+0x6e>
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	681b      	ldr	r3, [r3, #0]
 8005f40:	4a79      	ldr	r2, [pc, #484]	@ (8006128 <HAL_SPI_Init+0x240>)
 8005f42:	4293      	cmp	r3, r2
 8005f44:	d007      	beq.n	8005f56 <HAL_SPI_Init+0x6e>
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	681b      	ldr	r3, [r3, #0]
 8005f4a:	4a78      	ldr	r2, [pc, #480]	@ (800612c <HAL_SPI_Init+0x244>)
 8005f4c:	4293      	cmp	r3, r2
 8005f4e:	d002      	beq.n	8005f56 <HAL_SPI_Init+0x6e>
 8005f50:	68fb      	ldr	r3, [r7, #12]
 8005f52:	2b08      	cmp	r3, #8
 8005f54:	d811      	bhi.n	8005f7a <HAL_SPI_Init+0x92>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 8005f5a:	4a72      	ldr	r2, [pc, #456]	@ (8006124 <HAL_SPI_Init+0x23c>)
 8005f5c:	4293      	cmp	r3, r2
 8005f5e:	d009      	beq.n	8005f74 <HAL_SPI_Init+0x8c>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	681b      	ldr	r3, [r3, #0]
 8005f64:	4a70      	ldr	r2, [pc, #448]	@ (8006128 <HAL_SPI_Init+0x240>)
 8005f66:	4293      	cmp	r3, r2
 8005f68:	d004      	beq.n	8005f74 <HAL_SPI_Init+0x8c>
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	681b      	ldr	r3, [r3, #0]
 8005f6e:	4a6f      	ldr	r2, [pc, #444]	@ (800612c <HAL_SPI_Init+0x244>)
 8005f70:	4293      	cmp	r3, r2
 8005f72:	d104      	bne.n	8005f7e <HAL_SPI_Init+0x96>
 8005f74:	68fb      	ldr	r3, [r7, #12]
 8005f76:	2b10      	cmp	r3, #16
 8005f78:	d901      	bls.n	8005f7e <HAL_SPI_Init+0x96>
  {
    return HAL_ERROR;
 8005f7a:	2301      	movs	r3, #1
 8005f7c:	e0cd      	b.n	800611a <HAL_SPI_Init+0x232>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 8005f84:	b2db      	uxtb	r3, r3
 8005f86:	2b00      	cmp	r3, #0
 8005f88:	d106      	bne.n	8005f98 <HAL_SPI_Init+0xb0>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	2200      	movs	r2, #0
 8005f8e:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8005f92:	6878      	ldr	r0, [r7, #4]
 8005f94:	f7fb fa8e 	bl	80014b4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	2202      	movs	r2, #2
 8005f9c:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	681b      	ldr	r3, [r3, #0]
 8005fa4:	681a      	ldr	r2, [r3, #0]
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	681b      	ldr	r3, [r3, #0]
 8005faa:	f022 0201 	bic.w	r2, r2, #1
 8005fae:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	681b      	ldr	r3, [r3, #0]
 8005fb4:	689b      	ldr	r3, [r3, #8]
 8005fb6:	f403 13f8 	and.w	r3, r3, #2031616	@ 0x1f0000
 8005fba:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	699b      	ldr	r3, [r3, #24]
 8005fc0:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8005fc4:	d119      	bne.n	8005ffa <HAL_SPI_Init+0x112>
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	685b      	ldr	r3, [r3, #4]
 8005fca:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005fce:	d103      	bne.n	8005fd8 <HAL_SPI_Init+0xf0>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 8005fd4:	2b00      	cmp	r3, #0
 8005fd6:	d008      	beq.n	8005fea <HAL_SPI_Init+0x102>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8005fdc:	2b00      	cmp	r3, #0
 8005fde:	d10c      	bne.n	8005ffa <HAL_SPI_Init+0x112>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 8005fe4:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8005fe8:	d107      	bne.n	8005ffa <HAL_SPI_Init+0x112>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	681b      	ldr	r3, [r3, #0]
 8005fee:	681a      	ldr	r2, [r3, #0]
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	681b      	ldr	r3, [r3, #0]
 8005ff4:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8005ff8:	601a      	str	r2, [r3, #0]
  }

  /* SPIx Master Rx Auto Suspend Configuration */
  if (((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER) && (hspi->Init.DataSize >= SPI_DATASIZE_8BIT))
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	685b      	ldr	r3, [r3, #4]
 8005ffe:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006002:	2b00      	cmp	r3, #0
 8006004:	d00f      	beq.n	8006026 <HAL_SPI_Init+0x13e>
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	68db      	ldr	r3, [r3, #12]
 800600a:	2b06      	cmp	r3, #6
 800600c:	d90b      	bls.n	8006026 <HAL_SPI_Init+0x13e>
  {
    MODIFY_REG(hspi->Instance->CR1, SPI_CR1_MASRX, hspi->Init.MasterReceiverAutoSusp);
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	681b      	ldr	r3, [r3, #0]
 8006012:	681b      	ldr	r3, [r3, #0]
 8006014:	f423 7180 	bic.w	r1, r3, #256	@ 0x100
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	681b      	ldr	r3, [r3, #0]
 8006020:	430a      	orrs	r2, r1
 8006022:	601a      	str	r2, [r3, #0]
 8006024:	e007      	b.n	8006036 <HAL_SPI_Init+0x14e>
  }
  else
  {
    CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_MASRX);
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	681b      	ldr	r3, [r3, #0]
 800602a:	681a      	ldr	r2, [r3, #0]
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	681b      	ldr	r3, [r3, #0]
 8006030:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8006034:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	69da      	ldr	r2, [r3, #28]
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800603e:	431a      	orrs	r2, r3
 8006040:	68bb      	ldr	r3, [r7, #8]
 8006042:	431a      	orrs	r2, r3
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006048:	ea42 0103 	orr.w	r1, r2, r3
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	68da      	ldr	r2, [r3, #12]
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	681b      	ldr	r3, [r3, #0]
 8006054:	430a      	orrs	r2, r1
 8006056:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006060:	431a      	orrs	r2, r3
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006066:	431a      	orrs	r2, r3
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	699b      	ldr	r3, [r3, #24]
 800606c:	431a      	orrs	r2, r3
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	691b      	ldr	r3, [r3, #16]
 8006072:	431a      	orrs	r2, r3
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	695b      	ldr	r3, [r3, #20]
 8006078:	431a      	orrs	r2, r3
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	6a1b      	ldr	r3, [r3, #32]
 800607e:	431a      	orrs	r2, r3
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	685b      	ldr	r3, [r3, #4]
 8006084:	431a      	orrs	r2, r3
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800608a:	431a      	orrs	r2, r3
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	689b      	ldr	r3, [r3, #8]
 8006090:	431a      	orrs	r2, r3
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006096:	ea42 0103 	orr.w	r1, r2, r3
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	681b      	ldr	r3, [r3, #0]
 80060a2:	430a      	orrs	r2, r1
 80060a4:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	685b      	ldr	r3, [r3, #4]
 80060aa:	2b00      	cmp	r3, #0
 80060ac:	d113      	bne.n	80060d6 <HAL_SPI_Init+0x1ee>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif /* USE_SPI_CRC */
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	681b      	ldr	r3, [r3, #0]
 80060b2:	689b      	ldr	r3, [r3, #8]
 80060b4:	f423 52c0 	bic.w	r2, r3, #6144	@ 0x1800
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	681b      	ldr	r3, [r3, #0]
 80060bc:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80060c0:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	681b      	ldr	r3, [r3, #0]
 80060c6:	689b      	ldr	r3, [r3, #8]
 80060c8:	f423 62c0 	bic.w	r2, r3, #1536	@ 0x600
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	681b      	ldr	r3, [r3, #0]
 80060d0:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80060d4:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	681b      	ldr	r3, [r3, #0]
 80060da:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	681b      	ldr	r3, [r3, #0]
 80060e0:	f022 0201 	bic.w	r2, r2, #1
 80060e4:	651a      	str	r2, [r3, #80]	@ 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	685b      	ldr	r3, [r3, #4]
 80060ea:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80060ee:	2b00      	cmp	r3, #0
 80060f0:	d00a      	beq.n	8006108 <HAL_SPI_Init+0x220>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	681b      	ldr	r3, [r3, #0]
 80060f6:	68db      	ldr	r3, [r3, #12]
 80060f8:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	681b      	ldr	r3, [r3, #0]
 8006104:	430a      	orrs	r2, r1
 8006106:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	2200      	movs	r2, #0
 800610c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	2201      	movs	r2, #1
 8006114:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  return HAL_OK;
 8006118:	2300      	movs	r3, #0
}
 800611a:	4618      	mov	r0, r3
 800611c:	3710      	adds	r7, #16
 800611e:	46bd      	mov	sp, r7
 8006120:	bd80      	pop	{r7, pc}
 8006122:	bf00      	nop
 8006124:	40013000 	.word	0x40013000
 8006128:	40003800 	.word	0x40003800
 800612c:	40003c00 	.word	0x40003c00

08006130 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(const SPI_HandleTypeDef *hspi)
{
 8006130:	b480      	push	{r7}
 8006132:	b085      	sub	sp, #20
 8006134:	af00      	add	r7, sp, #0
 8006136:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800613c:	095b      	lsrs	r3, r3, #5
 800613e:	3301      	adds	r3, #1
 8006140:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	68db      	ldr	r3, [r3, #12]
 8006146:	3301      	adds	r3, #1
 8006148:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 800614a:	68bb      	ldr	r3, [r7, #8]
 800614c:	3307      	adds	r3, #7
 800614e:	08db      	lsrs	r3, r3, #3
 8006150:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 8006152:	68bb      	ldr	r3, [r7, #8]
 8006154:	68fa      	ldr	r2, [r7, #12]
 8006156:	fb02 f303 	mul.w	r3, r2, r3
}
 800615a:	4618      	mov	r0, r3
 800615c:	3714      	adds	r7, #20
 800615e:	46bd      	mov	sp, r7
 8006160:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006164:	4770      	bx	lr

08006166 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006166:	b580      	push	{r7, lr}
 8006168:	b082      	sub	sp, #8
 800616a:	af00      	add	r7, sp, #0
 800616c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	2b00      	cmp	r3, #0
 8006172:	d101      	bne.n	8006178 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006174:	2301      	movs	r3, #1
 8006176:	e049      	b.n	800620c <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800617e:	b2db      	uxtb	r3, r3
 8006180:	2b00      	cmp	r3, #0
 8006182:	d106      	bne.n	8006192 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	2200      	movs	r2, #0
 8006188:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800618c:	6878      	ldr	r0, [r7, #4]
 800618e:	f000 f841 	bl	8006214 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	2202      	movs	r2, #2
 8006196:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	681a      	ldr	r2, [r3, #0]
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	3304      	adds	r3, #4
 80061a2:	4619      	mov	r1, r3
 80061a4:	4610      	mov	r0, r2
 80061a6:	f000 f9f5 	bl	8006594 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	2201      	movs	r2, #1
 80061ae:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	2201      	movs	r2, #1
 80061b6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	2201      	movs	r2, #1
 80061be:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	2201      	movs	r2, #1
 80061c6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	2201      	movs	r2, #1
 80061ce:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	2201      	movs	r2, #1
 80061d6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	2201      	movs	r2, #1
 80061de:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	2201      	movs	r2, #1
 80061e6:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	2201      	movs	r2, #1
 80061ee:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	2201      	movs	r2, #1
 80061f6:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	2201      	movs	r2, #1
 80061fe:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	2201      	movs	r2, #1
 8006206:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800620a:	2300      	movs	r3, #0
}
 800620c:	4618      	mov	r0, r3
 800620e:	3708      	adds	r7, #8
 8006210:	46bd      	mov	sp, r7
 8006212:	bd80      	pop	{r7, pc}

08006214 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8006214:	b480      	push	{r7}
 8006216:	b083      	sub	sp, #12
 8006218:	af00      	add	r7, sp, #0
 800621a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800621c:	bf00      	nop
 800621e:	370c      	adds	r7, #12
 8006220:	46bd      	mov	sp, r7
 8006222:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006226:	4770      	bx	lr

08006228 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8006228:	b480      	push	{r7}
 800622a:	b085      	sub	sp, #20
 800622c:	af00      	add	r7, sp, #0
 800622e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006236:	b2db      	uxtb	r3, r3
 8006238:	2b01      	cmp	r3, #1
 800623a:	d001      	beq.n	8006240 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800623c:	2301      	movs	r3, #1
 800623e:	e05e      	b.n	80062fe <HAL_TIM_Base_Start_IT+0xd6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	2202      	movs	r2, #2
 8006244:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	681b      	ldr	r3, [r3, #0]
 800624c:	68da      	ldr	r2, [r3, #12]
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	681b      	ldr	r3, [r3, #0]
 8006252:	f042 0201 	orr.w	r2, r2, #1
 8006256:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	681b      	ldr	r3, [r3, #0]
 800625c:	4a2b      	ldr	r2, [pc, #172]	@ (800630c <HAL_TIM_Base_Start_IT+0xe4>)
 800625e:	4293      	cmp	r3, r2
 8006260:	d02c      	beq.n	80062bc <HAL_TIM_Base_Start_IT+0x94>
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	681b      	ldr	r3, [r3, #0]
 8006266:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800626a:	d027      	beq.n	80062bc <HAL_TIM_Base_Start_IT+0x94>
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	681b      	ldr	r3, [r3, #0]
 8006270:	4a27      	ldr	r2, [pc, #156]	@ (8006310 <HAL_TIM_Base_Start_IT+0xe8>)
 8006272:	4293      	cmp	r3, r2
 8006274:	d022      	beq.n	80062bc <HAL_TIM_Base_Start_IT+0x94>
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	681b      	ldr	r3, [r3, #0]
 800627a:	4a26      	ldr	r2, [pc, #152]	@ (8006314 <HAL_TIM_Base_Start_IT+0xec>)
 800627c:	4293      	cmp	r3, r2
 800627e:	d01d      	beq.n	80062bc <HAL_TIM_Base_Start_IT+0x94>
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	681b      	ldr	r3, [r3, #0]
 8006284:	4a24      	ldr	r2, [pc, #144]	@ (8006318 <HAL_TIM_Base_Start_IT+0xf0>)
 8006286:	4293      	cmp	r3, r2
 8006288:	d018      	beq.n	80062bc <HAL_TIM_Base_Start_IT+0x94>
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	681b      	ldr	r3, [r3, #0]
 800628e:	4a23      	ldr	r2, [pc, #140]	@ (800631c <HAL_TIM_Base_Start_IT+0xf4>)
 8006290:	4293      	cmp	r3, r2
 8006292:	d013      	beq.n	80062bc <HAL_TIM_Base_Start_IT+0x94>
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	681b      	ldr	r3, [r3, #0]
 8006298:	4a21      	ldr	r2, [pc, #132]	@ (8006320 <HAL_TIM_Base_Start_IT+0xf8>)
 800629a:	4293      	cmp	r3, r2
 800629c:	d00e      	beq.n	80062bc <HAL_TIM_Base_Start_IT+0x94>
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	681b      	ldr	r3, [r3, #0]
 80062a2:	4a20      	ldr	r2, [pc, #128]	@ (8006324 <HAL_TIM_Base_Start_IT+0xfc>)
 80062a4:	4293      	cmp	r3, r2
 80062a6:	d009      	beq.n	80062bc <HAL_TIM_Base_Start_IT+0x94>
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	681b      	ldr	r3, [r3, #0]
 80062ac:	4a1e      	ldr	r2, [pc, #120]	@ (8006328 <HAL_TIM_Base_Start_IT+0x100>)
 80062ae:	4293      	cmp	r3, r2
 80062b0:	d004      	beq.n	80062bc <HAL_TIM_Base_Start_IT+0x94>
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	681b      	ldr	r3, [r3, #0]
 80062b6:	4a1d      	ldr	r2, [pc, #116]	@ (800632c <HAL_TIM_Base_Start_IT+0x104>)
 80062b8:	4293      	cmp	r3, r2
 80062ba:	d115      	bne.n	80062e8 <HAL_TIM_Base_Start_IT+0xc0>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	681b      	ldr	r3, [r3, #0]
 80062c0:	689a      	ldr	r2, [r3, #8]
 80062c2:	4b1b      	ldr	r3, [pc, #108]	@ (8006330 <HAL_TIM_Base_Start_IT+0x108>)
 80062c4:	4013      	ands	r3, r2
 80062c6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80062c8:	68fb      	ldr	r3, [r7, #12]
 80062ca:	2b06      	cmp	r3, #6
 80062cc:	d015      	beq.n	80062fa <HAL_TIM_Base_Start_IT+0xd2>
 80062ce:	68fb      	ldr	r3, [r7, #12]
 80062d0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80062d4:	d011      	beq.n	80062fa <HAL_TIM_Base_Start_IT+0xd2>
    {
      __HAL_TIM_ENABLE(htim);
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	681b      	ldr	r3, [r3, #0]
 80062da:	681a      	ldr	r2, [r3, #0]
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	681b      	ldr	r3, [r3, #0]
 80062e0:	f042 0201 	orr.w	r2, r2, #1
 80062e4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80062e6:	e008      	b.n	80062fa <HAL_TIM_Base_Start_IT+0xd2>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	681b      	ldr	r3, [r3, #0]
 80062ec:	681a      	ldr	r2, [r3, #0]
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	681b      	ldr	r3, [r3, #0]
 80062f2:	f042 0201 	orr.w	r2, r2, #1
 80062f6:	601a      	str	r2, [r3, #0]
 80062f8:	e000      	b.n	80062fc <HAL_TIM_Base_Start_IT+0xd4>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80062fa:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80062fc:	2300      	movs	r3, #0
}
 80062fe:	4618      	mov	r0, r3
 8006300:	3714      	adds	r7, #20
 8006302:	46bd      	mov	sp, r7
 8006304:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006308:	4770      	bx	lr
 800630a:	bf00      	nop
 800630c:	40010000 	.word	0x40010000
 8006310:	40000400 	.word	0x40000400
 8006314:	40000800 	.word	0x40000800
 8006318:	40000c00 	.word	0x40000c00
 800631c:	40010400 	.word	0x40010400
 8006320:	40001800 	.word	0x40001800
 8006324:	40014000 	.word	0x40014000
 8006328:	4000e000 	.word	0x4000e000
 800632c:	4000e400 	.word	0x4000e400
 8006330:	00010007 	.word	0x00010007

08006334 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006334:	b580      	push	{r7, lr}
 8006336:	b084      	sub	sp, #16
 8006338:	af00      	add	r7, sp, #0
 800633a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	681b      	ldr	r3, [r3, #0]
 8006340:	68db      	ldr	r3, [r3, #12]
 8006342:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	681b      	ldr	r3, [r3, #0]
 8006348:	691b      	ldr	r3, [r3, #16]
 800634a:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800634c:	68bb      	ldr	r3, [r7, #8]
 800634e:	f003 0302 	and.w	r3, r3, #2
 8006352:	2b00      	cmp	r3, #0
 8006354:	d020      	beq.n	8006398 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8006356:	68fb      	ldr	r3, [r7, #12]
 8006358:	f003 0302 	and.w	r3, r3, #2
 800635c:	2b00      	cmp	r3, #0
 800635e:	d01b      	beq.n	8006398 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	681b      	ldr	r3, [r3, #0]
 8006364:	f06f 0202 	mvn.w	r2, #2
 8006368:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	2201      	movs	r2, #1
 800636e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	681b      	ldr	r3, [r3, #0]
 8006374:	699b      	ldr	r3, [r3, #24]
 8006376:	f003 0303 	and.w	r3, r3, #3
 800637a:	2b00      	cmp	r3, #0
 800637c:	d003      	beq.n	8006386 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800637e:	6878      	ldr	r0, [r7, #4]
 8006380:	f000 f8e9 	bl	8006556 <HAL_TIM_IC_CaptureCallback>
 8006384:	e005      	b.n	8006392 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8006386:	6878      	ldr	r0, [r7, #4]
 8006388:	f000 f8db 	bl	8006542 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800638c:	6878      	ldr	r0, [r7, #4]
 800638e:	f000 f8ec 	bl	800656a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	2200      	movs	r2, #0
 8006396:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8006398:	68bb      	ldr	r3, [r7, #8]
 800639a:	f003 0304 	and.w	r3, r3, #4
 800639e:	2b00      	cmp	r3, #0
 80063a0:	d020      	beq.n	80063e4 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80063a2:	68fb      	ldr	r3, [r7, #12]
 80063a4:	f003 0304 	and.w	r3, r3, #4
 80063a8:	2b00      	cmp	r3, #0
 80063aa:	d01b      	beq.n	80063e4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	681b      	ldr	r3, [r3, #0]
 80063b0:	f06f 0204 	mvn.w	r2, #4
 80063b4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	2202      	movs	r2, #2
 80063ba:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	681b      	ldr	r3, [r3, #0]
 80063c0:	699b      	ldr	r3, [r3, #24]
 80063c2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80063c6:	2b00      	cmp	r3, #0
 80063c8:	d003      	beq.n	80063d2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80063ca:	6878      	ldr	r0, [r7, #4]
 80063cc:	f000 f8c3 	bl	8006556 <HAL_TIM_IC_CaptureCallback>
 80063d0:	e005      	b.n	80063de <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80063d2:	6878      	ldr	r0, [r7, #4]
 80063d4:	f000 f8b5 	bl	8006542 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80063d8:	6878      	ldr	r0, [r7, #4]
 80063da:	f000 f8c6 	bl	800656a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	2200      	movs	r2, #0
 80063e2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80063e4:	68bb      	ldr	r3, [r7, #8]
 80063e6:	f003 0308 	and.w	r3, r3, #8
 80063ea:	2b00      	cmp	r3, #0
 80063ec:	d020      	beq.n	8006430 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80063ee:	68fb      	ldr	r3, [r7, #12]
 80063f0:	f003 0308 	and.w	r3, r3, #8
 80063f4:	2b00      	cmp	r3, #0
 80063f6:	d01b      	beq.n	8006430 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	681b      	ldr	r3, [r3, #0]
 80063fc:	f06f 0208 	mvn.w	r2, #8
 8006400:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	2204      	movs	r2, #4
 8006406:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	681b      	ldr	r3, [r3, #0]
 800640c:	69db      	ldr	r3, [r3, #28]
 800640e:	f003 0303 	and.w	r3, r3, #3
 8006412:	2b00      	cmp	r3, #0
 8006414:	d003      	beq.n	800641e <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006416:	6878      	ldr	r0, [r7, #4]
 8006418:	f000 f89d 	bl	8006556 <HAL_TIM_IC_CaptureCallback>
 800641c:	e005      	b.n	800642a <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800641e:	6878      	ldr	r0, [r7, #4]
 8006420:	f000 f88f 	bl	8006542 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006424:	6878      	ldr	r0, [r7, #4]
 8006426:	f000 f8a0 	bl	800656a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	2200      	movs	r2, #0
 800642e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8006430:	68bb      	ldr	r3, [r7, #8]
 8006432:	f003 0310 	and.w	r3, r3, #16
 8006436:	2b00      	cmp	r3, #0
 8006438:	d020      	beq.n	800647c <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800643a:	68fb      	ldr	r3, [r7, #12]
 800643c:	f003 0310 	and.w	r3, r3, #16
 8006440:	2b00      	cmp	r3, #0
 8006442:	d01b      	beq.n	800647c <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	681b      	ldr	r3, [r3, #0]
 8006448:	f06f 0210 	mvn.w	r2, #16
 800644c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	2208      	movs	r2, #8
 8006452:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	681b      	ldr	r3, [r3, #0]
 8006458:	69db      	ldr	r3, [r3, #28]
 800645a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800645e:	2b00      	cmp	r3, #0
 8006460:	d003      	beq.n	800646a <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006462:	6878      	ldr	r0, [r7, #4]
 8006464:	f000 f877 	bl	8006556 <HAL_TIM_IC_CaptureCallback>
 8006468:	e005      	b.n	8006476 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800646a:	6878      	ldr	r0, [r7, #4]
 800646c:	f000 f869 	bl	8006542 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006470:	6878      	ldr	r0, [r7, #4]
 8006472:	f000 f87a 	bl	800656a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	2200      	movs	r2, #0
 800647a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800647c:	68bb      	ldr	r3, [r7, #8]
 800647e:	f003 0301 	and.w	r3, r3, #1
 8006482:	2b00      	cmp	r3, #0
 8006484:	d00c      	beq.n	80064a0 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8006486:	68fb      	ldr	r3, [r7, #12]
 8006488:	f003 0301 	and.w	r3, r3, #1
 800648c:	2b00      	cmp	r3, #0
 800648e:	d007      	beq.n	80064a0 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	681b      	ldr	r3, [r3, #0]
 8006494:	f06f 0201 	mvn.w	r2, #1
 8006498:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800649a:	6878      	ldr	r0, [r7, #4]
 800649c:	f7fa fe36 	bl	800110c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 80064a0:	68bb      	ldr	r3, [r7, #8]
 80064a2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80064a6:	2b00      	cmp	r3, #0
 80064a8:	d104      	bne.n	80064b4 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 80064aa:	68bb      	ldr	r3, [r7, #8]
 80064ac:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 80064b0:	2b00      	cmp	r3, #0
 80064b2:	d00c      	beq.n	80064ce <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80064b4:	68fb      	ldr	r3, [r7, #12]
 80064b6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80064ba:	2b00      	cmp	r3, #0
 80064bc:	d007      	beq.n	80064ce <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	681b      	ldr	r3, [r3, #0]
 80064c2:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 80064c6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80064c8:	6878      	ldr	r0, [r7, #4]
 80064ca:	f000 f91f 	bl	800670c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 80064ce:	68bb      	ldr	r3, [r7, #8]
 80064d0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80064d4:	2b00      	cmp	r3, #0
 80064d6:	d00c      	beq.n	80064f2 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80064d8:	68fb      	ldr	r3, [r7, #12]
 80064da:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80064de:	2b00      	cmp	r3, #0
 80064e0:	d007      	beq.n	80064f2 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	681b      	ldr	r3, [r3, #0]
 80064e6:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 80064ea:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80064ec:	6878      	ldr	r0, [r7, #4]
 80064ee:	f000 f917 	bl	8006720 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80064f2:	68bb      	ldr	r3, [r7, #8]
 80064f4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80064f8:	2b00      	cmp	r3, #0
 80064fa:	d00c      	beq.n	8006516 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80064fc:	68fb      	ldr	r3, [r7, #12]
 80064fe:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006502:	2b00      	cmp	r3, #0
 8006504:	d007      	beq.n	8006516 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	681b      	ldr	r3, [r3, #0]
 800650a:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800650e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006510:	6878      	ldr	r0, [r7, #4]
 8006512:	f000 f834 	bl	800657e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8006516:	68bb      	ldr	r3, [r7, #8]
 8006518:	f003 0320 	and.w	r3, r3, #32
 800651c:	2b00      	cmp	r3, #0
 800651e:	d00c      	beq.n	800653a <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8006520:	68fb      	ldr	r3, [r7, #12]
 8006522:	f003 0320 	and.w	r3, r3, #32
 8006526:	2b00      	cmp	r3, #0
 8006528:	d007      	beq.n	800653a <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	681b      	ldr	r3, [r3, #0]
 800652e:	f06f 0220 	mvn.w	r2, #32
 8006532:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8006534:	6878      	ldr	r0, [r7, #4]
 8006536:	f000 f8df 	bl	80066f8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800653a:	bf00      	nop
 800653c:	3710      	adds	r7, #16
 800653e:	46bd      	mov	sp, r7
 8006540:	bd80      	pop	{r7, pc}

08006542 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006542:	b480      	push	{r7}
 8006544:	b083      	sub	sp, #12
 8006546:	af00      	add	r7, sp, #0
 8006548:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800654a:	bf00      	nop
 800654c:	370c      	adds	r7, #12
 800654e:	46bd      	mov	sp, r7
 8006550:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006554:	4770      	bx	lr

08006556 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006556:	b480      	push	{r7}
 8006558:	b083      	sub	sp, #12
 800655a:	af00      	add	r7, sp, #0
 800655c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800655e:	bf00      	nop
 8006560:	370c      	adds	r7, #12
 8006562:	46bd      	mov	sp, r7
 8006564:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006568:	4770      	bx	lr

0800656a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800656a:	b480      	push	{r7}
 800656c:	b083      	sub	sp, #12
 800656e:	af00      	add	r7, sp, #0
 8006570:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006572:	bf00      	nop
 8006574:	370c      	adds	r7, #12
 8006576:	46bd      	mov	sp, r7
 8006578:	f85d 7b04 	ldr.w	r7, [sp], #4
 800657c:	4770      	bx	lr

0800657e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800657e:	b480      	push	{r7}
 8006580:	b083      	sub	sp, #12
 8006582:	af00      	add	r7, sp, #0
 8006584:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006586:	bf00      	nop
 8006588:	370c      	adds	r7, #12
 800658a:	46bd      	mov	sp, r7
 800658c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006590:	4770      	bx	lr
	...

08006594 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8006594:	b480      	push	{r7}
 8006596:	b085      	sub	sp, #20
 8006598:	af00      	add	r7, sp, #0
 800659a:	6078      	str	r0, [r7, #4]
 800659c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	681b      	ldr	r3, [r3, #0]
 80065a2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	4a4a      	ldr	r2, [pc, #296]	@ (80066d0 <TIM_Base_SetConfig+0x13c>)
 80065a8:	4293      	cmp	r3, r2
 80065aa:	d013      	beq.n	80065d4 <TIM_Base_SetConfig+0x40>
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80065b2:	d00f      	beq.n	80065d4 <TIM_Base_SetConfig+0x40>
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	4a47      	ldr	r2, [pc, #284]	@ (80066d4 <TIM_Base_SetConfig+0x140>)
 80065b8:	4293      	cmp	r3, r2
 80065ba:	d00b      	beq.n	80065d4 <TIM_Base_SetConfig+0x40>
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	4a46      	ldr	r2, [pc, #280]	@ (80066d8 <TIM_Base_SetConfig+0x144>)
 80065c0:	4293      	cmp	r3, r2
 80065c2:	d007      	beq.n	80065d4 <TIM_Base_SetConfig+0x40>
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	4a45      	ldr	r2, [pc, #276]	@ (80066dc <TIM_Base_SetConfig+0x148>)
 80065c8:	4293      	cmp	r3, r2
 80065ca:	d003      	beq.n	80065d4 <TIM_Base_SetConfig+0x40>
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	4a44      	ldr	r2, [pc, #272]	@ (80066e0 <TIM_Base_SetConfig+0x14c>)
 80065d0:	4293      	cmp	r3, r2
 80065d2:	d108      	bne.n	80065e6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80065d4:	68fb      	ldr	r3, [r7, #12]
 80065d6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80065da:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80065dc:	683b      	ldr	r3, [r7, #0]
 80065de:	685b      	ldr	r3, [r3, #4]
 80065e0:	68fa      	ldr	r2, [r7, #12]
 80065e2:	4313      	orrs	r3, r2
 80065e4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	4a39      	ldr	r2, [pc, #228]	@ (80066d0 <TIM_Base_SetConfig+0x13c>)
 80065ea:	4293      	cmp	r3, r2
 80065ec:	d027      	beq.n	800663e <TIM_Base_SetConfig+0xaa>
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80065f4:	d023      	beq.n	800663e <TIM_Base_SetConfig+0xaa>
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	4a36      	ldr	r2, [pc, #216]	@ (80066d4 <TIM_Base_SetConfig+0x140>)
 80065fa:	4293      	cmp	r3, r2
 80065fc:	d01f      	beq.n	800663e <TIM_Base_SetConfig+0xaa>
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	4a35      	ldr	r2, [pc, #212]	@ (80066d8 <TIM_Base_SetConfig+0x144>)
 8006602:	4293      	cmp	r3, r2
 8006604:	d01b      	beq.n	800663e <TIM_Base_SetConfig+0xaa>
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	4a34      	ldr	r2, [pc, #208]	@ (80066dc <TIM_Base_SetConfig+0x148>)
 800660a:	4293      	cmp	r3, r2
 800660c:	d017      	beq.n	800663e <TIM_Base_SetConfig+0xaa>
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	4a33      	ldr	r2, [pc, #204]	@ (80066e0 <TIM_Base_SetConfig+0x14c>)
 8006612:	4293      	cmp	r3, r2
 8006614:	d013      	beq.n	800663e <TIM_Base_SetConfig+0xaa>
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	4a32      	ldr	r2, [pc, #200]	@ (80066e4 <TIM_Base_SetConfig+0x150>)
 800661a:	4293      	cmp	r3, r2
 800661c:	d00f      	beq.n	800663e <TIM_Base_SetConfig+0xaa>
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	4a31      	ldr	r2, [pc, #196]	@ (80066e8 <TIM_Base_SetConfig+0x154>)
 8006622:	4293      	cmp	r3, r2
 8006624:	d00b      	beq.n	800663e <TIM_Base_SetConfig+0xaa>
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	4a30      	ldr	r2, [pc, #192]	@ (80066ec <TIM_Base_SetConfig+0x158>)
 800662a:	4293      	cmp	r3, r2
 800662c:	d007      	beq.n	800663e <TIM_Base_SetConfig+0xaa>
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	4a2f      	ldr	r2, [pc, #188]	@ (80066f0 <TIM_Base_SetConfig+0x15c>)
 8006632:	4293      	cmp	r3, r2
 8006634:	d003      	beq.n	800663e <TIM_Base_SetConfig+0xaa>
 8006636:	687b      	ldr	r3, [r7, #4]
 8006638:	4a2e      	ldr	r2, [pc, #184]	@ (80066f4 <TIM_Base_SetConfig+0x160>)
 800663a:	4293      	cmp	r3, r2
 800663c:	d108      	bne.n	8006650 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800663e:	68fb      	ldr	r3, [r7, #12]
 8006640:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006644:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006646:	683b      	ldr	r3, [r7, #0]
 8006648:	68db      	ldr	r3, [r3, #12]
 800664a:	68fa      	ldr	r2, [r7, #12]
 800664c:	4313      	orrs	r3, r2
 800664e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006650:	68fb      	ldr	r3, [r7, #12]
 8006652:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8006656:	683b      	ldr	r3, [r7, #0]
 8006658:	695b      	ldr	r3, [r3, #20]
 800665a:	4313      	orrs	r3, r2
 800665c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	68fa      	ldr	r2, [r7, #12]
 8006662:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006664:	683b      	ldr	r3, [r7, #0]
 8006666:	689a      	ldr	r2, [r3, #8]
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800666c:	683b      	ldr	r3, [r7, #0]
 800666e:	681a      	ldr	r2, [r3, #0]
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	4a16      	ldr	r2, [pc, #88]	@ (80066d0 <TIM_Base_SetConfig+0x13c>)
 8006678:	4293      	cmp	r3, r2
 800667a:	d00f      	beq.n	800669c <TIM_Base_SetConfig+0x108>
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	4a18      	ldr	r2, [pc, #96]	@ (80066e0 <TIM_Base_SetConfig+0x14c>)
 8006680:	4293      	cmp	r3, r2
 8006682:	d00b      	beq.n	800669c <TIM_Base_SetConfig+0x108>
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	4a17      	ldr	r2, [pc, #92]	@ (80066e4 <TIM_Base_SetConfig+0x150>)
 8006688:	4293      	cmp	r3, r2
 800668a:	d007      	beq.n	800669c <TIM_Base_SetConfig+0x108>
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	4a16      	ldr	r2, [pc, #88]	@ (80066e8 <TIM_Base_SetConfig+0x154>)
 8006690:	4293      	cmp	r3, r2
 8006692:	d003      	beq.n	800669c <TIM_Base_SetConfig+0x108>
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	4a15      	ldr	r2, [pc, #84]	@ (80066ec <TIM_Base_SetConfig+0x158>)
 8006698:	4293      	cmp	r3, r2
 800669a:	d103      	bne.n	80066a4 <TIM_Base_SetConfig+0x110>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800669c:	683b      	ldr	r3, [r7, #0]
 800669e:	691a      	ldr	r2, [r3, #16]
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	2201      	movs	r2, #1
 80066a8:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	691b      	ldr	r3, [r3, #16]
 80066ae:	f003 0301 	and.w	r3, r3, #1
 80066b2:	2b01      	cmp	r3, #1
 80066b4:	d105      	bne.n	80066c2 <TIM_Base_SetConfig+0x12e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80066b6:	687b      	ldr	r3, [r7, #4]
 80066b8:	691b      	ldr	r3, [r3, #16]
 80066ba:	f023 0201 	bic.w	r2, r3, #1
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	611a      	str	r2, [r3, #16]
  }
}
 80066c2:	bf00      	nop
 80066c4:	3714      	adds	r7, #20
 80066c6:	46bd      	mov	sp, r7
 80066c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066cc:	4770      	bx	lr
 80066ce:	bf00      	nop
 80066d0:	40010000 	.word	0x40010000
 80066d4:	40000400 	.word	0x40000400
 80066d8:	40000800 	.word	0x40000800
 80066dc:	40000c00 	.word	0x40000c00
 80066e0:	40010400 	.word	0x40010400
 80066e4:	40014000 	.word	0x40014000
 80066e8:	40014400 	.word	0x40014400
 80066ec:	40014800 	.word	0x40014800
 80066f0:	4000e000 	.word	0x4000e000
 80066f4:	4000e400 	.word	0x4000e400

080066f8 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80066f8:	b480      	push	{r7}
 80066fa:	b083      	sub	sp, #12
 80066fc:	af00      	add	r7, sp, #0
 80066fe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006700:	bf00      	nop
 8006702:	370c      	adds	r7, #12
 8006704:	46bd      	mov	sp, r7
 8006706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800670a:	4770      	bx	lr

0800670c <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800670c:	b480      	push	{r7}
 800670e:	b083      	sub	sp, #12
 8006710:	af00      	add	r7, sp, #0
 8006712:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006714:	bf00      	nop
 8006716:	370c      	adds	r7, #12
 8006718:	46bd      	mov	sp, r7
 800671a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800671e:	4770      	bx	lr

08006720 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8006720:	b480      	push	{r7}
 8006722:	b083      	sub	sp, #12
 8006724:	af00      	add	r7, sp, #0
 8006726:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8006728:	bf00      	nop
 800672a:	370c      	adds	r7, #12
 800672c:	46bd      	mov	sp, r7
 800672e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006732:	4770      	bx	lr

08006734 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006734:	b580      	push	{r7, lr}
 8006736:	b082      	sub	sp, #8
 8006738:	af00      	add	r7, sp, #0
 800673a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	2b00      	cmp	r3, #0
 8006740:	d101      	bne.n	8006746 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006742:	2301      	movs	r3, #1
 8006744:	e042      	b.n	80067cc <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800674c:	2b00      	cmp	r3, #0
 800674e:	d106      	bne.n	800675e <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	2200      	movs	r2, #0
 8006754:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006758:	6878      	ldr	r0, [r7, #4]
 800675a:	f7fb f8f7 	bl	800194c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	2224      	movs	r2, #36	@ 0x24
 8006762:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	681b      	ldr	r3, [r3, #0]
 800676a:	681a      	ldr	r2, [r3, #0]
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	681b      	ldr	r3, [r3, #0]
 8006770:	f022 0201 	bic.w	r2, r2, #1
 8006774:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800677a:	2b00      	cmp	r3, #0
 800677c:	d002      	beq.n	8006784 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 800677e:	6878      	ldr	r0, [r7, #4]
 8006780:	f000 fe94 	bl	80074ac <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8006784:	6878      	ldr	r0, [r7, #4]
 8006786:	f000 f825 	bl	80067d4 <UART_SetConfig>
 800678a:	4603      	mov	r3, r0
 800678c:	2b01      	cmp	r3, #1
 800678e:	d101      	bne.n	8006794 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8006790:	2301      	movs	r3, #1
 8006792:	e01b      	b.n	80067cc <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	681b      	ldr	r3, [r3, #0]
 8006798:	685a      	ldr	r2, [r3, #4]
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	681b      	ldr	r3, [r3, #0]
 800679e:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80067a2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	681b      	ldr	r3, [r3, #0]
 80067a8:	689a      	ldr	r2, [r3, #8]
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	681b      	ldr	r3, [r3, #0]
 80067ae:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80067b2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	681b      	ldr	r3, [r3, #0]
 80067b8:	681a      	ldr	r2, [r3, #0]
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	681b      	ldr	r3, [r3, #0]
 80067be:	f042 0201 	orr.w	r2, r2, #1
 80067c2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80067c4:	6878      	ldr	r0, [r7, #4]
 80067c6:	f000 ff13 	bl	80075f0 <UART_CheckIdleState>
 80067ca:	4603      	mov	r3, r0
}
 80067cc:	4618      	mov	r0, r3
 80067ce:	3708      	adds	r7, #8
 80067d0:	46bd      	mov	sp, r7
 80067d2:	bd80      	pop	{r7, pc}

080067d4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80067d4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80067d8:	b092      	sub	sp, #72	@ 0x48
 80067da:	af00      	add	r7, sp, #0
 80067dc:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80067de:	2300      	movs	r3, #0
 80067e0:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80067e4:	697b      	ldr	r3, [r7, #20]
 80067e6:	689a      	ldr	r2, [r3, #8]
 80067e8:	697b      	ldr	r3, [r7, #20]
 80067ea:	691b      	ldr	r3, [r3, #16]
 80067ec:	431a      	orrs	r2, r3
 80067ee:	697b      	ldr	r3, [r7, #20]
 80067f0:	695b      	ldr	r3, [r3, #20]
 80067f2:	431a      	orrs	r2, r3
 80067f4:	697b      	ldr	r3, [r7, #20]
 80067f6:	69db      	ldr	r3, [r3, #28]
 80067f8:	4313      	orrs	r3, r2
 80067fa:	647b      	str	r3, [r7, #68]	@ 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80067fc:	697b      	ldr	r3, [r7, #20]
 80067fe:	681b      	ldr	r3, [r3, #0]
 8006800:	681a      	ldr	r2, [r3, #0]
 8006802:	4bbe      	ldr	r3, [pc, #760]	@ (8006afc <UART_SetConfig+0x328>)
 8006804:	4013      	ands	r3, r2
 8006806:	697a      	ldr	r2, [r7, #20]
 8006808:	6812      	ldr	r2, [r2, #0]
 800680a:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800680c:	430b      	orrs	r3, r1
 800680e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006810:	697b      	ldr	r3, [r7, #20]
 8006812:	681b      	ldr	r3, [r3, #0]
 8006814:	685b      	ldr	r3, [r3, #4]
 8006816:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800681a:	697b      	ldr	r3, [r7, #20]
 800681c:	68da      	ldr	r2, [r3, #12]
 800681e:	697b      	ldr	r3, [r7, #20]
 8006820:	681b      	ldr	r3, [r3, #0]
 8006822:	430a      	orrs	r2, r1
 8006824:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8006826:	697b      	ldr	r3, [r7, #20]
 8006828:	699b      	ldr	r3, [r3, #24]
 800682a:	647b      	str	r3, [r7, #68]	@ 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800682c:	697b      	ldr	r3, [r7, #20]
 800682e:	681b      	ldr	r3, [r3, #0]
 8006830:	4ab3      	ldr	r2, [pc, #716]	@ (8006b00 <UART_SetConfig+0x32c>)
 8006832:	4293      	cmp	r3, r2
 8006834:	d004      	beq.n	8006840 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8006836:	697b      	ldr	r3, [r7, #20]
 8006838:	6a1b      	ldr	r3, [r3, #32]
 800683a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800683c:	4313      	orrs	r3, r2
 800683e:	647b      	str	r3, [r7, #68]	@ 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006840:	697b      	ldr	r3, [r7, #20]
 8006842:	681b      	ldr	r3, [r3, #0]
 8006844:	689a      	ldr	r2, [r3, #8]
 8006846:	4baf      	ldr	r3, [pc, #700]	@ (8006b04 <UART_SetConfig+0x330>)
 8006848:	4013      	ands	r3, r2
 800684a:	697a      	ldr	r2, [r7, #20]
 800684c:	6812      	ldr	r2, [r2, #0]
 800684e:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8006850:	430b      	orrs	r3, r1
 8006852:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8006854:	697b      	ldr	r3, [r7, #20]
 8006856:	681b      	ldr	r3, [r3, #0]
 8006858:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800685a:	f023 010f 	bic.w	r1, r3, #15
 800685e:	697b      	ldr	r3, [r7, #20]
 8006860:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8006862:	697b      	ldr	r3, [r7, #20]
 8006864:	681b      	ldr	r3, [r3, #0]
 8006866:	430a      	orrs	r2, r1
 8006868:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800686a:	697b      	ldr	r3, [r7, #20]
 800686c:	681b      	ldr	r3, [r3, #0]
 800686e:	4aa6      	ldr	r2, [pc, #664]	@ (8006b08 <UART_SetConfig+0x334>)
 8006870:	4293      	cmp	r3, r2
 8006872:	d177      	bne.n	8006964 <UART_SetConfig+0x190>
 8006874:	4ba5      	ldr	r3, [pc, #660]	@ (8006b0c <UART_SetConfig+0x338>)
 8006876:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006878:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800687c:	2b28      	cmp	r3, #40	@ 0x28
 800687e:	d86d      	bhi.n	800695c <UART_SetConfig+0x188>
 8006880:	a201      	add	r2, pc, #4	@ (adr r2, 8006888 <UART_SetConfig+0xb4>)
 8006882:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006886:	bf00      	nop
 8006888:	0800692d 	.word	0x0800692d
 800688c:	0800695d 	.word	0x0800695d
 8006890:	0800695d 	.word	0x0800695d
 8006894:	0800695d 	.word	0x0800695d
 8006898:	0800695d 	.word	0x0800695d
 800689c:	0800695d 	.word	0x0800695d
 80068a0:	0800695d 	.word	0x0800695d
 80068a4:	0800695d 	.word	0x0800695d
 80068a8:	08006935 	.word	0x08006935
 80068ac:	0800695d 	.word	0x0800695d
 80068b0:	0800695d 	.word	0x0800695d
 80068b4:	0800695d 	.word	0x0800695d
 80068b8:	0800695d 	.word	0x0800695d
 80068bc:	0800695d 	.word	0x0800695d
 80068c0:	0800695d 	.word	0x0800695d
 80068c4:	0800695d 	.word	0x0800695d
 80068c8:	0800693d 	.word	0x0800693d
 80068cc:	0800695d 	.word	0x0800695d
 80068d0:	0800695d 	.word	0x0800695d
 80068d4:	0800695d 	.word	0x0800695d
 80068d8:	0800695d 	.word	0x0800695d
 80068dc:	0800695d 	.word	0x0800695d
 80068e0:	0800695d 	.word	0x0800695d
 80068e4:	0800695d 	.word	0x0800695d
 80068e8:	08006945 	.word	0x08006945
 80068ec:	0800695d 	.word	0x0800695d
 80068f0:	0800695d 	.word	0x0800695d
 80068f4:	0800695d 	.word	0x0800695d
 80068f8:	0800695d 	.word	0x0800695d
 80068fc:	0800695d 	.word	0x0800695d
 8006900:	0800695d 	.word	0x0800695d
 8006904:	0800695d 	.word	0x0800695d
 8006908:	0800694d 	.word	0x0800694d
 800690c:	0800695d 	.word	0x0800695d
 8006910:	0800695d 	.word	0x0800695d
 8006914:	0800695d 	.word	0x0800695d
 8006918:	0800695d 	.word	0x0800695d
 800691c:	0800695d 	.word	0x0800695d
 8006920:	0800695d 	.word	0x0800695d
 8006924:	0800695d 	.word	0x0800695d
 8006928:	08006955 	.word	0x08006955
 800692c:	2301      	movs	r3, #1
 800692e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006932:	e326      	b.n	8006f82 <UART_SetConfig+0x7ae>
 8006934:	2304      	movs	r3, #4
 8006936:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800693a:	e322      	b.n	8006f82 <UART_SetConfig+0x7ae>
 800693c:	2308      	movs	r3, #8
 800693e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006942:	e31e      	b.n	8006f82 <UART_SetConfig+0x7ae>
 8006944:	2310      	movs	r3, #16
 8006946:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800694a:	e31a      	b.n	8006f82 <UART_SetConfig+0x7ae>
 800694c:	2320      	movs	r3, #32
 800694e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006952:	e316      	b.n	8006f82 <UART_SetConfig+0x7ae>
 8006954:	2340      	movs	r3, #64	@ 0x40
 8006956:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800695a:	e312      	b.n	8006f82 <UART_SetConfig+0x7ae>
 800695c:	2380      	movs	r3, #128	@ 0x80
 800695e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006962:	e30e      	b.n	8006f82 <UART_SetConfig+0x7ae>
 8006964:	697b      	ldr	r3, [r7, #20]
 8006966:	681b      	ldr	r3, [r3, #0]
 8006968:	4a69      	ldr	r2, [pc, #420]	@ (8006b10 <UART_SetConfig+0x33c>)
 800696a:	4293      	cmp	r3, r2
 800696c:	d130      	bne.n	80069d0 <UART_SetConfig+0x1fc>
 800696e:	4b67      	ldr	r3, [pc, #412]	@ (8006b0c <UART_SetConfig+0x338>)
 8006970:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006972:	f003 0307 	and.w	r3, r3, #7
 8006976:	2b05      	cmp	r3, #5
 8006978:	d826      	bhi.n	80069c8 <UART_SetConfig+0x1f4>
 800697a:	a201      	add	r2, pc, #4	@ (adr r2, 8006980 <UART_SetConfig+0x1ac>)
 800697c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006980:	08006999 	.word	0x08006999
 8006984:	080069a1 	.word	0x080069a1
 8006988:	080069a9 	.word	0x080069a9
 800698c:	080069b1 	.word	0x080069b1
 8006990:	080069b9 	.word	0x080069b9
 8006994:	080069c1 	.word	0x080069c1
 8006998:	2300      	movs	r3, #0
 800699a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800699e:	e2f0      	b.n	8006f82 <UART_SetConfig+0x7ae>
 80069a0:	2304      	movs	r3, #4
 80069a2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80069a6:	e2ec      	b.n	8006f82 <UART_SetConfig+0x7ae>
 80069a8:	2308      	movs	r3, #8
 80069aa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80069ae:	e2e8      	b.n	8006f82 <UART_SetConfig+0x7ae>
 80069b0:	2310      	movs	r3, #16
 80069b2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80069b6:	e2e4      	b.n	8006f82 <UART_SetConfig+0x7ae>
 80069b8:	2320      	movs	r3, #32
 80069ba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80069be:	e2e0      	b.n	8006f82 <UART_SetConfig+0x7ae>
 80069c0:	2340      	movs	r3, #64	@ 0x40
 80069c2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80069c6:	e2dc      	b.n	8006f82 <UART_SetConfig+0x7ae>
 80069c8:	2380      	movs	r3, #128	@ 0x80
 80069ca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80069ce:	e2d8      	b.n	8006f82 <UART_SetConfig+0x7ae>
 80069d0:	697b      	ldr	r3, [r7, #20]
 80069d2:	681b      	ldr	r3, [r3, #0]
 80069d4:	4a4f      	ldr	r2, [pc, #316]	@ (8006b14 <UART_SetConfig+0x340>)
 80069d6:	4293      	cmp	r3, r2
 80069d8:	d130      	bne.n	8006a3c <UART_SetConfig+0x268>
 80069da:	4b4c      	ldr	r3, [pc, #304]	@ (8006b0c <UART_SetConfig+0x338>)
 80069dc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80069de:	f003 0307 	and.w	r3, r3, #7
 80069e2:	2b05      	cmp	r3, #5
 80069e4:	d826      	bhi.n	8006a34 <UART_SetConfig+0x260>
 80069e6:	a201      	add	r2, pc, #4	@ (adr r2, 80069ec <UART_SetConfig+0x218>)
 80069e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80069ec:	08006a05 	.word	0x08006a05
 80069f0:	08006a0d 	.word	0x08006a0d
 80069f4:	08006a15 	.word	0x08006a15
 80069f8:	08006a1d 	.word	0x08006a1d
 80069fc:	08006a25 	.word	0x08006a25
 8006a00:	08006a2d 	.word	0x08006a2d
 8006a04:	2300      	movs	r3, #0
 8006a06:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006a0a:	e2ba      	b.n	8006f82 <UART_SetConfig+0x7ae>
 8006a0c:	2304      	movs	r3, #4
 8006a0e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006a12:	e2b6      	b.n	8006f82 <UART_SetConfig+0x7ae>
 8006a14:	2308      	movs	r3, #8
 8006a16:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006a1a:	e2b2      	b.n	8006f82 <UART_SetConfig+0x7ae>
 8006a1c:	2310      	movs	r3, #16
 8006a1e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006a22:	e2ae      	b.n	8006f82 <UART_SetConfig+0x7ae>
 8006a24:	2320      	movs	r3, #32
 8006a26:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006a2a:	e2aa      	b.n	8006f82 <UART_SetConfig+0x7ae>
 8006a2c:	2340      	movs	r3, #64	@ 0x40
 8006a2e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006a32:	e2a6      	b.n	8006f82 <UART_SetConfig+0x7ae>
 8006a34:	2380      	movs	r3, #128	@ 0x80
 8006a36:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006a3a:	e2a2      	b.n	8006f82 <UART_SetConfig+0x7ae>
 8006a3c:	697b      	ldr	r3, [r7, #20]
 8006a3e:	681b      	ldr	r3, [r3, #0]
 8006a40:	4a35      	ldr	r2, [pc, #212]	@ (8006b18 <UART_SetConfig+0x344>)
 8006a42:	4293      	cmp	r3, r2
 8006a44:	d130      	bne.n	8006aa8 <UART_SetConfig+0x2d4>
 8006a46:	4b31      	ldr	r3, [pc, #196]	@ (8006b0c <UART_SetConfig+0x338>)
 8006a48:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006a4a:	f003 0307 	and.w	r3, r3, #7
 8006a4e:	2b05      	cmp	r3, #5
 8006a50:	d826      	bhi.n	8006aa0 <UART_SetConfig+0x2cc>
 8006a52:	a201      	add	r2, pc, #4	@ (adr r2, 8006a58 <UART_SetConfig+0x284>)
 8006a54:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006a58:	08006a71 	.word	0x08006a71
 8006a5c:	08006a79 	.word	0x08006a79
 8006a60:	08006a81 	.word	0x08006a81
 8006a64:	08006a89 	.word	0x08006a89
 8006a68:	08006a91 	.word	0x08006a91
 8006a6c:	08006a99 	.word	0x08006a99
 8006a70:	2300      	movs	r3, #0
 8006a72:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006a76:	e284      	b.n	8006f82 <UART_SetConfig+0x7ae>
 8006a78:	2304      	movs	r3, #4
 8006a7a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006a7e:	e280      	b.n	8006f82 <UART_SetConfig+0x7ae>
 8006a80:	2308      	movs	r3, #8
 8006a82:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006a86:	e27c      	b.n	8006f82 <UART_SetConfig+0x7ae>
 8006a88:	2310      	movs	r3, #16
 8006a8a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006a8e:	e278      	b.n	8006f82 <UART_SetConfig+0x7ae>
 8006a90:	2320      	movs	r3, #32
 8006a92:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006a96:	e274      	b.n	8006f82 <UART_SetConfig+0x7ae>
 8006a98:	2340      	movs	r3, #64	@ 0x40
 8006a9a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006a9e:	e270      	b.n	8006f82 <UART_SetConfig+0x7ae>
 8006aa0:	2380      	movs	r3, #128	@ 0x80
 8006aa2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006aa6:	e26c      	b.n	8006f82 <UART_SetConfig+0x7ae>
 8006aa8:	697b      	ldr	r3, [r7, #20]
 8006aaa:	681b      	ldr	r3, [r3, #0]
 8006aac:	4a1b      	ldr	r2, [pc, #108]	@ (8006b1c <UART_SetConfig+0x348>)
 8006aae:	4293      	cmp	r3, r2
 8006ab0:	d142      	bne.n	8006b38 <UART_SetConfig+0x364>
 8006ab2:	4b16      	ldr	r3, [pc, #88]	@ (8006b0c <UART_SetConfig+0x338>)
 8006ab4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006ab6:	f003 0307 	and.w	r3, r3, #7
 8006aba:	2b05      	cmp	r3, #5
 8006abc:	d838      	bhi.n	8006b30 <UART_SetConfig+0x35c>
 8006abe:	a201      	add	r2, pc, #4	@ (adr r2, 8006ac4 <UART_SetConfig+0x2f0>)
 8006ac0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006ac4:	08006add 	.word	0x08006add
 8006ac8:	08006ae5 	.word	0x08006ae5
 8006acc:	08006aed 	.word	0x08006aed
 8006ad0:	08006af5 	.word	0x08006af5
 8006ad4:	08006b21 	.word	0x08006b21
 8006ad8:	08006b29 	.word	0x08006b29
 8006adc:	2300      	movs	r3, #0
 8006ade:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006ae2:	e24e      	b.n	8006f82 <UART_SetConfig+0x7ae>
 8006ae4:	2304      	movs	r3, #4
 8006ae6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006aea:	e24a      	b.n	8006f82 <UART_SetConfig+0x7ae>
 8006aec:	2308      	movs	r3, #8
 8006aee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006af2:	e246      	b.n	8006f82 <UART_SetConfig+0x7ae>
 8006af4:	2310      	movs	r3, #16
 8006af6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006afa:	e242      	b.n	8006f82 <UART_SetConfig+0x7ae>
 8006afc:	cfff69f3 	.word	0xcfff69f3
 8006b00:	58000c00 	.word	0x58000c00
 8006b04:	11fff4ff 	.word	0x11fff4ff
 8006b08:	40011000 	.word	0x40011000
 8006b0c:	58024400 	.word	0x58024400
 8006b10:	40004400 	.word	0x40004400
 8006b14:	40004800 	.word	0x40004800
 8006b18:	40004c00 	.word	0x40004c00
 8006b1c:	40005000 	.word	0x40005000
 8006b20:	2320      	movs	r3, #32
 8006b22:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006b26:	e22c      	b.n	8006f82 <UART_SetConfig+0x7ae>
 8006b28:	2340      	movs	r3, #64	@ 0x40
 8006b2a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006b2e:	e228      	b.n	8006f82 <UART_SetConfig+0x7ae>
 8006b30:	2380      	movs	r3, #128	@ 0x80
 8006b32:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006b36:	e224      	b.n	8006f82 <UART_SetConfig+0x7ae>
 8006b38:	697b      	ldr	r3, [r7, #20]
 8006b3a:	681b      	ldr	r3, [r3, #0]
 8006b3c:	4ab1      	ldr	r2, [pc, #708]	@ (8006e04 <UART_SetConfig+0x630>)
 8006b3e:	4293      	cmp	r3, r2
 8006b40:	d176      	bne.n	8006c30 <UART_SetConfig+0x45c>
 8006b42:	4bb1      	ldr	r3, [pc, #708]	@ (8006e08 <UART_SetConfig+0x634>)
 8006b44:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006b46:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8006b4a:	2b28      	cmp	r3, #40	@ 0x28
 8006b4c:	d86c      	bhi.n	8006c28 <UART_SetConfig+0x454>
 8006b4e:	a201      	add	r2, pc, #4	@ (adr r2, 8006b54 <UART_SetConfig+0x380>)
 8006b50:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006b54:	08006bf9 	.word	0x08006bf9
 8006b58:	08006c29 	.word	0x08006c29
 8006b5c:	08006c29 	.word	0x08006c29
 8006b60:	08006c29 	.word	0x08006c29
 8006b64:	08006c29 	.word	0x08006c29
 8006b68:	08006c29 	.word	0x08006c29
 8006b6c:	08006c29 	.word	0x08006c29
 8006b70:	08006c29 	.word	0x08006c29
 8006b74:	08006c01 	.word	0x08006c01
 8006b78:	08006c29 	.word	0x08006c29
 8006b7c:	08006c29 	.word	0x08006c29
 8006b80:	08006c29 	.word	0x08006c29
 8006b84:	08006c29 	.word	0x08006c29
 8006b88:	08006c29 	.word	0x08006c29
 8006b8c:	08006c29 	.word	0x08006c29
 8006b90:	08006c29 	.word	0x08006c29
 8006b94:	08006c09 	.word	0x08006c09
 8006b98:	08006c29 	.word	0x08006c29
 8006b9c:	08006c29 	.word	0x08006c29
 8006ba0:	08006c29 	.word	0x08006c29
 8006ba4:	08006c29 	.word	0x08006c29
 8006ba8:	08006c29 	.word	0x08006c29
 8006bac:	08006c29 	.word	0x08006c29
 8006bb0:	08006c29 	.word	0x08006c29
 8006bb4:	08006c11 	.word	0x08006c11
 8006bb8:	08006c29 	.word	0x08006c29
 8006bbc:	08006c29 	.word	0x08006c29
 8006bc0:	08006c29 	.word	0x08006c29
 8006bc4:	08006c29 	.word	0x08006c29
 8006bc8:	08006c29 	.word	0x08006c29
 8006bcc:	08006c29 	.word	0x08006c29
 8006bd0:	08006c29 	.word	0x08006c29
 8006bd4:	08006c19 	.word	0x08006c19
 8006bd8:	08006c29 	.word	0x08006c29
 8006bdc:	08006c29 	.word	0x08006c29
 8006be0:	08006c29 	.word	0x08006c29
 8006be4:	08006c29 	.word	0x08006c29
 8006be8:	08006c29 	.word	0x08006c29
 8006bec:	08006c29 	.word	0x08006c29
 8006bf0:	08006c29 	.word	0x08006c29
 8006bf4:	08006c21 	.word	0x08006c21
 8006bf8:	2301      	movs	r3, #1
 8006bfa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006bfe:	e1c0      	b.n	8006f82 <UART_SetConfig+0x7ae>
 8006c00:	2304      	movs	r3, #4
 8006c02:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006c06:	e1bc      	b.n	8006f82 <UART_SetConfig+0x7ae>
 8006c08:	2308      	movs	r3, #8
 8006c0a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006c0e:	e1b8      	b.n	8006f82 <UART_SetConfig+0x7ae>
 8006c10:	2310      	movs	r3, #16
 8006c12:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006c16:	e1b4      	b.n	8006f82 <UART_SetConfig+0x7ae>
 8006c18:	2320      	movs	r3, #32
 8006c1a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006c1e:	e1b0      	b.n	8006f82 <UART_SetConfig+0x7ae>
 8006c20:	2340      	movs	r3, #64	@ 0x40
 8006c22:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006c26:	e1ac      	b.n	8006f82 <UART_SetConfig+0x7ae>
 8006c28:	2380      	movs	r3, #128	@ 0x80
 8006c2a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006c2e:	e1a8      	b.n	8006f82 <UART_SetConfig+0x7ae>
 8006c30:	697b      	ldr	r3, [r7, #20]
 8006c32:	681b      	ldr	r3, [r3, #0]
 8006c34:	4a75      	ldr	r2, [pc, #468]	@ (8006e0c <UART_SetConfig+0x638>)
 8006c36:	4293      	cmp	r3, r2
 8006c38:	d130      	bne.n	8006c9c <UART_SetConfig+0x4c8>
 8006c3a:	4b73      	ldr	r3, [pc, #460]	@ (8006e08 <UART_SetConfig+0x634>)
 8006c3c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006c3e:	f003 0307 	and.w	r3, r3, #7
 8006c42:	2b05      	cmp	r3, #5
 8006c44:	d826      	bhi.n	8006c94 <UART_SetConfig+0x4c0>
 8006c46:	a201      	add	r2, pc, #4	@ (adr r2, 8006c4c <UART_SetConfig+0x478>)
 8006c48:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006c4c:	08006c65 	.word	0x08006c65
 8006c50:	08006c6d 	.word	0x08006c6d
 8006c54:	08006c75 	.word	0x08006c75
 8006c58:	08006c7d 	.word	0x08006c7d
 8006c5c:	08006c85 	.word	0x08006c85
 8006c60:	08006c8d 	.word	0x08006c8d
 8006c64:	2300      	movs	r3, #0
 8006c66:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006c6a:	e18a      	b.n	8006f82 <UART_SetConfig+0x7ae>
 8006c6c:	2304      	movs	r3, #4
 8006c6e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006c72:	e186      	b.n	8006f82 <UART_SetConfig+0x7ae>
 8006c74:	2308      	movs	r3, #8
 8006c76:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006c7a:	e182      	b.n	8006f82 <UART_SetConfig+0x7ae>
 8006c7c:	2310      	movs	r3, #16
 8006c7e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006c82:	e17e      	b.n	8006f82 <UART_SetConfig+0x7ae>
 8006c84:	2320      	movs	r3, #32
 8006c86:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006c8a:	e17a      	b.n	8006f82 <UART_SetConfig+0x7ae>
 8006c8c:	2340      	movs	r3, #64	@ 0x40
 8006c8e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006c92:	e176      	b.n	8006f82 <UART_SetConfig+0x7ae>
 8006c94:	2380      	movs	r3, #128	@ 0x80
 8006c96:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006c9a:	e172      	b.n	8006f82 <UART_SetConfig+0x7ae>
 8006c9c:	697b      	ldr	r3, [r7, #20]
 8006c9e:	681b      	ldr	r3, [r3, #0]
 8006ca0:	4a5b      	ldr	r2, [pc, #364]	@ (8006e10 <UART_SetConfig+0x63c>)
 8006ca2:	4293      	cmp	r3, r2
 8006ca4:	d130      	bne.n	8006d08 <UART_SetConfig+0x534>
 8006ca6:	4b58      	ldr	r3, [pc, #352]	@ (8006e08 <UART_SetConfig+0x634>)
 8006ca8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006caa:	f003 0307 	and.w	r3, r3, #7
 8006cae:	2b05      	cmp	r3, #5
 8006cb0:	d826      	bhi.n	8006d00 <UART_SetConfig+0x52c>
 8006cb2:	a201      	add	r2, pc, #4	@ (adr r2, 8006cb8 <UART_SetConfig+0x4e4>)
 8006cb4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006cb8:	08006cd1 	.word	0x08006cd1
 8006cbc:	08006cd9 	.word	0x08006cd9
 8006cc0:	08006ce1 	.word	0x08006ce1
 8006cc4:	08006ce9 	.word	0x08006ce9
 8006cc8:	08006cf1 	.word	0x08006cf1
 8006ccc:	08006cf9 	.word	0x08006cf9
 8006cd0:	2300      	movs	r3, #0
 8006cd2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006cd6:	e154      	b.n	8006f82 <UART_SetConfig+0x7ae>
 8006cd8:	2304      	movs	r3, #4
 8006cda:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006cde:	e150      	b.n	8006f82 <UART_SetConfig+0x7ae>
 8006ce0:	2308      	movs	r3, #8
 8006ce2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006ce6:	e14c      	b.n	8006f82 <UART_SetConfig+0x7ae>
 8006ce8:	2310      	movs	r3, #16
 8006cea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006cee:	e148      	b.n	8006f82 <UART_SetConfig+0x7ae>
 8006cf0:	2320      	movs	r3, #32
 8006cf2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006cf6:	e144      	b.n	8006f82 <UART_SetConfig+0x7ae>
 8006cf8:	2340      	movs	r3, #64	@ 0x40
 8006cfa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006cfe:	e140      	b.n	8006f82 <UART_SetConfig+0x7ae>
 8006d00:	2380      	movs	r3, #128	@ 0x80
 8006d02:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006d06:	e13c      	b.n	8006f82 <UART_SetConfig+0x7ae>
 8006d08:	697b      	ldr	r3, [r7, #20]
 8006d0a:	681b      	ldr	r3, [r3, #0]
 8006d0c:	4a41      	ldr	r2, [pc, #260]	@ (8006e14 <UART_SetConfig+0x640>)
 8006d0e:	4293      	cmp	r3, r2
 8006d10:	f040 8082 	bne.w	8006e18 <UART_SetConfig+0x644>
 8006d14:	4b3c      	ldr	r3, [pc, #240]	@ (8006e08 <UART_SetConfig+0x634>)
 8006d16:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006d18:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8006d1c:	2b28      	cmp	r3, #40	@ 0x28
 8006d1e:	d86d      	bhi.n	8006dfc <UART_SetConfig+0x628>
 8006d20:	a201      	add	r2, pc, #4	@ (adr r2, 8006d28 <UART_SetConfig+0x554>)
 8006d22:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006d26:	bf00      	nop
 8006d28:	08006dcd 	.word	0x08006dcd
 8006d2c:	08006dfd 	.word	0x08006dfd
 8006d30:	08006dfd 	.word	0x08006dfd
 8006d34:	08006dfd 	.word	0x08006dfd
 8006d38:	08006dfd 	.word	0x08006dfd
 8006d3c:	08006dfd 	.word	0x08006dfd
 8006d40:	08006dfd 	.word	0x08006dfd
 8006d44:	08006dfd 	.word	0x08006dfd
 8006d48:	08006dd5 	.word	0x08006dd5
 8006d4c:	08006dfd 	.word	0x08006dfd
 8006d50:	08006dfd 	.word	0x08006dfd
 8006d54:	08006dfd 	.word	0x08006dfd
 8006d58:	08006dfd 	.word	0x08006dfd
 8006d5c:	08006dfd 	.word	0x08006dfd
 8006d60:	08006dfd 	.word	0x08006dfd
 8006d64:	08006dfd 	.word	0x08006dfd
 8006d68:	08006ddd 	.word	0x08006ddd
 8006d6c:	08006dfd 	.word	0x08006dfd
 8006d70:	08006dfd 	.word	0x08006dfd
 8006d74:	08006dfd 	.word	0x08006dfd
 8006d78:	08006dfd 	.word	0x08006dfd
 8006d7c:	08006dfd 	.word	0x08006dfd
 8006d80:	08006dfd 	.word	0x08006dfd
 8006d84:	08006dfd 	.word	0x08006dfd
 8006d88:	08006de5 	.word	0x08006de5
 8006d8c:	08006dfd 	.word	0x08006dfd
 8006d90:	08006dfd 	.word	0x08006dfd
 8006d94:	08006dfd 	.word	0x08006dfd
 8006d98:	08006dfd 	.word	0x08006dfd
 8006d9c:	08006dfd 	.word	0x08006dfd
 8006da0:	08006dfd 	.word	0x08006dfd
 8006da4:	08006dfd 	.word	0x08006dfd
 8006da8:	08006ded 	.word	0x08006ded
 8006dac:	08006dfd 	.word	0x08006dfd
 8006db0:	08006dfd 	.word	0x08006dfd
 8006db4:	08006dfd 	.word	0x08006dfd
 8006db8:	08006dfd 	.word	0x08006dfd
 8006dbc:	08006dfd 	.word	0x08006dfd
 8006dc0:	08006dfd 	.word	0x08006dfd
 8006dc4:	08006dfd 	.word	0x08006dfd
 8006dc8:	08006df5 	.word	0x08006df5
 8006dcc:	2301      	movs	r3, #1
 8006dce:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006dd2:	e0d6      	b.n	8006f82 <UART_SetConfig+0x7ae>
 8006dd4:	2304      	movs	r3, #4
 8006dd6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006dda:	e0d2      	b.n	8006f82 <UART_SetConfig+0x7ae>
 8006ddc:	2308      	movs	r3, #8
 8006dde:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006de2:	e0ce      	b.n	8006f82 <UART_SetConfig+0x7ae>
 8006de4:	2310      	movs	r3, #16
 8006de6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006dea:	e0ca      	b.n	8006f82 <UART_SetConfig+0x7ae>
 8006dec:	2320      	movs	r3, #32
 8006dee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006df2:	e0c6      	b.n	8006f82 <UART_SetConfig+0x7ae>
 8006df4:	2340      	movs	r3, #64	@ 0x40
 8006df6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006dfa:	e0c2      	b.n	8006f82 <UART_SetConfig+0x7ae>
 8006dfc:	2380      	movs	r3, #128	@ 0x80
 8006dfe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006e02:	e0be      	b.n	8006f82 <UART_SetConfig+0x7ae>
 8006e04:	40011400 	.word	0x40011400
 8006e08:	58024400 	.word	0x58024400
 8006e0c:	40007800 	.word	0x40007800
 8006e10:	40007c00 	.word	0x40007c00
 8006e14:	40011800 	.word	0x40011800
 8006e18:	697b      	ldr	r3, [r7, #20]
 8006e1a:	681b      	ldr	r3, [r3, #0]
 8006e1c:	4aad      	ldr	r2, [pc, #692]	@ (80070d4 <UART_SetConfig+0x900>)
 8006e1e:	4293      	cmp	r3, r2
 8006e20:	d176      	bne.n	8006f10 <UART_SetConfig+0x73c>
 8006e22:	4bad      	ldr	r3, [pc, #692]	@ (80070d8 <UART_SetConfig+0x904>)
 8006e24:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006e26:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8006e2a:	2b28      	cmp	r3, #40	@ 0x28
 8006e2c:	d86c      	bhi.n	8006f08 <UART_SetConfig+0x734>
 8006e2e:	a201      	add	r2, pc, #4	@ (adr r2, 8006e34 <UART_SetConfig+0x660>)
 8006e30:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006e34:	08006ed9 	.word	0x08006ed9
 8006e38:	08006f09 	.word	0x08006f09
 8006e3c:	08006f09 	.word	0x08006f09
 8006e40:	08006f09 	.word	0x08006f09
 8006e44:	08006f09 	.word	0x08006f09
 8006e48:	08006f09 	.word	0x08006f09
 8006e4c:	08006f09 	.word	0x08006f09
 8006e50:	08006f09 	.word	0x08006f09
 8006e54:	08006ee1 	.word	0x08006ee1
 8006e58:	08006f09 	.word	0x08006f09
 8006e5c:	08006f09 	.word	0x08006f09
 8006e60:	08006f09 	.word	0x08006f09
 8006e64:	08006f09 	.word	0x08006f09
 8006e68:	08006f09 	.word	0x08006f09
 8006e6c:	08006f09 	.word	0x08006f09
 8006e70:	08006f09 	.word	0x08006f09
 8006e74:	08006ee9 	.word	0x08006ee9
 8006e78:	08006f09 	.word	0x08006f09
 8006e7c:	08006f09 	.word	0x08006f09
 8006e80:	08006f09 	.word	0x08006f09
 8006e84:	08006f09 	.word	0x08006f09
 8006e88:	08006f09 	.word	0x08006f09
 8006e8c:	08006f09 	.word	0x08006f09
 8006e90:	08006f09 	.word	0x08006f09
 8006e94:	08006ef1 	.word	0x08006ef1
 8006e98:	08006f09 	.word	0x08006f09
 8006e9c:	08006f09 	.word	0x08006f09
 8006ea0:	08006f09 	.word	0x08006f09
 8006ea4:	08006f09 	.word	0x08006f09
 8006ea8:	08006f09 	.word	0x08006f09
 8006eac:	08006f09 	.word	0x08006f09
 8006eb0:	08006f09 	.word	0x08006f09
 8006eb4:	08006ef9 	.word	0x08006ef9
 8006eb8:	08006f09 	.word	0x08006f09
 8006ebc:	08006f09 	.word	0x08006f09
 8006ec0:	08006f09 	.word	0x08006f09
 8006ec4:	08006f09 	.word	0x08006f09
 8006ec8:	08006f09 	.word	0x08006f09
 8006ecc:	08006f09 	.word	0x08006f09
 8006ed0:	08006f09 	.word	0x08006f09
 8006ed4:	08006f01 	.word	0x08006f01
 8006ed8:	2301      	movs	r3, #1
 8006eda:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006ede:	e050      	b.n	8006f82 <UART_SetConfig+0x7ae>
 8006ee0:	2304      	movs	r3, #4
 8006ee2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006ee6:	e04c      	b.n	8006f82 <UART_SetConfig+0x7ae>
 8006ee8:	2308      	movs	r3, #8
 8006eea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006eee:	e048      	b.n	8006f82 <UART_SetConfig+0x7ae>
 8006ef0:	2310      	movs	r3, #16
 8006ef2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006ef6:	e044      	b.n	8006f82 <UART_SetConfig+0x7ae>
 8006ef8:	2320      	movs	r3, #32
 8006efa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006efe:	e040      	b.n	8006f82 <UART_SetConfig+0x7ae>
 8006f00:	2340      	movs	r3, #64	@ 0x40
 8006f02:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006f06:	e03c      	b.n	8006f82 <UART_SetConfig+0x7ae>
 8006f08:	2380      	movs	r3, #128	@ 0x80
 8006f0a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006f0e:	e038      	b.n	8006f82 <UART_SetConfig+0x7ae>
 8006f10:	697b      	ldr	r3, [r7, #20]
 8006f12:	681b      	ldr	r3, [r3, #0]
 8006f14:	4a71      	ldr	r2, [pc, #452]	@ (80070dc <UART_SetConfig+0x908>)
 8006f16:	4293      	cmp	r3, r2
 8006f18:	d130      	bne.n	8006f7c <UART_SetConfig+0x7a8>
 8006f1a:	4b6f      	ldr	r3, [pc, #444]	@ (80070d8 <UART_SetConfig+0x904>)
 8006f1c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006f1e:	f003 0307 	and.w	r3, r3, #7
 8006f22:	2b05      	cmp	r3, #5
 8006f24:	d826      	bhi.n	8006f74 <UART_SetConfig+0x7a0>
 8006f26:	a201      	add	r2, pc, #4	@ (adr r2, 8006f2c <UART_SetConfig+0x758>)
 8006f28:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006f2c:	08006f45 	.word	0x08006f45
 8006f30:	08006f4d 	.word	0x08006f4d
 8006f34:	08006f55 	.word	0x08006f55
 8006f38:	08006f5d 	.word	0x08006f5d
 8006f3c:	08006f65 	.word	0x08006f65
 8006f40:	08006f6d 	.word	0x08006f6d
 8006f44:	2302      	movs	r3, #2
 8006f46:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006f4a:	e01a      	b.n	8006f82 <UART_SetConfig+0x7ae>
 8006f4c:	2304      	movs	r3, #4
 8006f4e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006f52:	e016      	b.n	8006f82 <UART_SetConfig+0x7ae>
 8006f54:	2308      	movs	r3, #8
 8006f56:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006f5a:	e012      	b.n	8006f82 <UART_SetConfig+0x7ae>
 8006f5c:	2310      	movs	r3, #16
 8006f5e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006f62:	e00e      	b.n	8006f82 <UART_SetConfig+0x7ae>
 8006f64:	2320      	movs	r3, #32
 8006f66:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006f6a:	e00a      	b.n	8006f82 <UART_SetConfig+0x7ae>
 8006f6c:	2340      	movs	r3, #64	@ 0x40
 8006f6e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006f72:	e006      	b.n	8006f82 <UART_SetConfig+0x7ae>
 8006f74:	2380      	movs	r3, #128	@ 0x80
 8006f76:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006f7a:	e002      	b.n	8006f82 <UART_SetConfig+0x7ae>
 8006f7c:	2380      	movs	r3, #128	@ 0x80
 8006f7e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8006f82:	697b      	ldr	r3, [r7, #20]
 8006f84:	681b      	ldr	r3, [r3, #0]
 8006f86:	4a55      	ldr	r2, [pc, #340]	@ (80070dc <UART_SetConfig+0x908>)
 8006f88:	4293      	cmp	r3, r2
 8006f8a:	f040 80f8 	bne.w	800717e <UART_SetConfig+0x9aa>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8006f8e:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8006f92:	2b20      	cmp	r3, #32
 8006f94:	dc46      	bgt.n	8007024 <UART_SetConfig+0x850>
 8006f96:	2b02      	cmp	r3, #2
 8006f98:	db75      	blt.n	8007086 <UART_SetConfig+0x8b2>
 8006f9a:	3b02      	subs	r3, #2
 8006f9c:	2b1e      	cmp	r3, #30
 8006f9e:	d872      	bhi.n	8007086 <UART_SetConfig+0x8b2>
 8006fa0:	a201      	add	r2, pc, #4	@ (adr r2, 8006fa8 <UART_SetConfig+0x7d4>)
 8006fa2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006fa6:	bf00      	nop
 8006fa8:	0800702b 	.word	0x0800702b
 8006fac:	08007087 	.word	0x08007087
 8006fb0:	08007033 	.word	0x08007033
 8006fb4:	08007087 	.word	0x08007087
 8006fb8:	08007087 	.word	0x08007087
 8006fbc:	08007087 	.word	0x08007087
 8006fc0:	08007043 	.word	0x08007043
 8006fc4:	08007087 	.word	0x08007087
 8006fc8:	08007087 	.word	0x08007087
 8006fcc:	08007087 	.word	0x08007087
 8006fd0:	08007087 	.word	0x08007087
 8006fd4:	08007087 	.word	0x08007087
 8006fd8:	08007087 	.word	0x08007087
 8006fdc:	08007087 	.word	0x08007087
 8006fe0:	08007053 	.word	0x08007053
 8006fe4:	08007087 	.word	0x08007087
 8006fe8:	08007087 	.word	0x08007087
 8006fec:	08007087 	.word	0x08007087
 8006ff0:	08007087 	.word	0x08007087
 8006ff4:	08007087 	.word	0x08007087
 8006ff8:	08007087 	.word	0x08007087
 8006ffc:	08007087 	.word	0x08007087
 8007000:	08007087 	.word	0x08007087
 8007004:	08007087 	.word	0x08007087
 8007008:	08007087 	.word	0x08007087
 800700c:	08007087 	.word	0x08007087
 8007010:	08007087 	.word	0x08007087
 8007014:	08007087 	.word	0x08007087
 8007018:	08007087 	.word	0x08007087
 800701c:	08007087 	.word	0x08007087
 8007020:	08007079 	.word	0x08007079
 8007024:	2b40      	cmp	r3, #64	@ 0x40
 8007026:	d02a      	beq.n	800707e <UART_SetConfig+0x8aa>
 8007028:	e02d      	b.n	8007086 <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800702a:	f7fe fa23 	bl	8005474 <HAL_RCCEx_GetD3PCLK1Freq>
 800702e:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8007030:	e02f      	b.n	8007092 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007032:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8007036:	4618      	mov	r0, r3
 8007038:	f7fe fa32 	bl	80054a0 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800703c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800703e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007040:	e027      	b.n	8007092 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007042:	f107 0318 	add.w	r3, r7, #24
 8007046:	4618      	mov	r0, r3
 8007048:	f7fe fb7e 	bl	8005748 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800704c:	69fb      	ldr	r3, [r7, #28]
 800704e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007050:	e01f      	b.n	8007092 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007052:	4b21      	ldr	r3, [pc, #132]	@ (80070d8 <UART_SetConfig+0x904>)
 8007054:	681b      	ldr	r3, [r3, #0]
 8007056:	f003 0320 	and.w	r3, r3, #32
 800705a:	2b00      	cmp	r3, #0
 800705c:	d009      	beq.n	8007072 <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800705e:	4b1e      	ldr	r3, [pc, #120]	@ (80070d8 <UART_SetConfig+0x904>)
 8007060:	681b      	ldr	r3, [r3, #0]
 8007062:	08db      	lsrs	r3, r3, #3
 8007064:	f003 0303 	and.w	r3, r3, #3
 8007068:	4a1d      	ldr	r2, [pc, #116]	@ (80070e0 <UART_SetConfig+0x90c>)
 800706a:	fa22 f303 	lsr.w	r3, r2, r3
 800706e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8007070:	e00f      	b.n	8007092 <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 8007072:	4b1b      	ldr	r3, [pc, #108]	@ (80070e0 <UART_SetConfig+0x90c>)
 8007074:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007076:	e00c      	b.n	8007092 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8007078:	4b1a      	ldr	r3, [pc, #104]	@ (80070e4 <UART_SetConfig+0x910>)
 800707a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800707c:	e009      	b.n	8007092 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800707e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007082:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007084:	e005      	b.n	8007092 <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 8007086:	2300      	movs	r3, #0
 8007088:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800708a:	2301      	movs	r3, #1
 800708c:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8007090:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8007092:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007094:	2b00      	cmp	r3, #0
 8007096:	f000 81ee 	beq.w	8007476 <UART_SetConfig+0xca2>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800709a:	697b      	ldr	r3, [r7, #20]
 800709c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800709e:	4a12      	ldr	r2, [pc, #72]	@ (80070e8 <UART_SetConfig+0x914>)
 80070a0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80070a4:	461a      	mov	r2, r3
 80070a6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80070a8:	fbb3 f3f2 	udiv	r3, r3, r2
 80070ac:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80070ae:	697b      	ldr	r3, [r7, #20]
 80070b0:	685a      	ldr	r2, [r3, #4]
 80070b2:	4613      	mov	r3, r2
 80070b4:	005b      	lsls	r3, r3, #1
 80070b6:	4413      	add	r3, r2
 80070b8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80070ba:	429a      	cmp	r2, r3
 80070bc:	d305      	bcc.n	80070ca <UART_SetConfig+0x8f6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80070be:	697b      	ldr	r3, [r7, #20]
 80070c0:	685b      	ldr	r3, [r3, #4]
 80070c2:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80070c4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80070c6:	429a      	cmp	r2, r3
 80070c8:	d910      	bls.n	80070ec <UART_SetConfig+0x918>
      {
        ret = HAL_ERROR;
 80070ca:	2301      	movs	r3, #1
 80070cc:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 80070d0:	e1d1      	b.n	8007476 <UART_SetConfig+0xca2>
 80070d2:	bf00      	nop
 80070d4:	40011c00 	.word	0x40011c00
 80070d8:	58024400 	.word	0x58024400
 80070dc:	58000c00 	.word	0x58000c00
 80070e0:	03d09000 	.word	0x03d09000
 80070e4:	003d0900 	.word	0x003d0900
 80070e8:	0800a878 	.word	0x0800a878
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80070ec:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80070ee:	2200      	movs	r2, #0
 80070f0:	60bb      	str	r3, [r7, #8]
 80070f2:	60fa      	str	r2, [r7, #12]
 80070f4:	697b      	ldr	r3, [r7, #20]
 80070f6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80070f8:	4ac0      	ldr	r2, [pc, #768]	@ (80073fc <UART_SetConfig+0xc28>)
 80070fa:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80070fe:	b29b      	uxth	r3, r3
 8007100:	2200      	movs	r2, #0
 8007102:	603b      	str	r3, [r7, #0]
 8007104:	607a      	str	r2, [r7, #4]
 8007106:	e9d7 2300 	ldrd	r2, r3, [r7]
 800710a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800710e:	f7f9 f8ff 	bl	8000310 <__aeabi_uldivmod>
 8007112:	4602      	mov	r2, r0
 8007114:	460b      	mov	r3, r1
 8007116:	4610      	mov	r0, r2
 8007118:	4619      	mov	r1, r3
 800711a:	f04f 0200 	mov.w	r2, #0
 800711e:	f04f 0300 	mov.w	r3, #0
 8007122:	020b      	lsls	r3, r1, #8
 8007124:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8007128:	0202      	lsls	r2, r0, #8
 800712a:	6979      	ldr	r1, [r7, #20]
 800712c:	6849      	ldr	r1, [r1, #4]
 800712e:	0849      	lsrs	r1, r1, #1
 8007130:	2000      	movs	r0, #0
 8007132:	460c      	mov	r4, r1
 8007134:	4605      	mov	r5, r0
 8007136:	eb12 0804 	adds.w	r8, r2, r4
 800713a:	eb43 0905 	adc.w	r9, r3, r5
 800713e:	697b      	ldr	r3, [r7, #20]
 8007140:	685b      	ldr	r3, [r3, #4]
 8007142:	2200      	movs	r2, #0
 8007144:	469a      	mov	sl, r3
 8007146:	4693      	mov	fp, r2
 8007148:	4652      	mov	r2, sl
 800714a:	465b      	mov	r3, fp
 800714c:	4640      	mov	r0, r8
 800714e:	4649      	mov	r1, r9
 8007150:	f7f9 f8de 	bl	8000310 <__aeabi_uldivmod>
 8007154:	4602      	mov	r2, r0
 8007156:	460b      	mov	r3, r1
 8007158:	4613      	mov	r3, r2
 800715a:	63bb      	str	r3, [r7, #56]	@ 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800715c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800715e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8007162:	d308      	bcc.n	8007176 <UART_SetConfig+0x9a2>
 8007164:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007166:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800716a:	d204      	bcs.n	8007176 <UART_SetConfig+0x9a2>
        {
          huart->Instance->BRR = usartdiv;
 800716c:	697b      	ldr	r3, [r7, #20]
 800716e:	681b      	ldr	r3, [r3, #0]
 8007170:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8007172:	60da      	str	r2, [r3, #12]
 8007174:	e17f      	b.n	8007476 <UART_SetConfig+0xca2>
        }
        else
        {
          ret = HAL_ERROR;
 8007176:	2301      	movs	r3, #1
 8007178:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800717c:	e17b      	b.n	8007476 <UART_SetConfig+0xca2>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800717e:	697b      	ldr	r3, [r7, #20]
 8007180:	69db      	ldr	r3, [r3, #28]
 8007182:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007186:	f040 80bd 	bne.w	8007304 <UART_SetConfig+0xb30>
  {
    switch (clocksource)
 800718a:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800718e:	2b20      	cmp	r3, #32
 8007190:	dc48      	bgt.n	8007224 <UART_SetConfig+0xa50>
 8007192:	2b00      	cmp	r3, #0
 8007194:	db7b      	blt.n	800728e <UART_SetConfig+0xaba>
 8007196:	2b20      	cmp	r3, #32
 8007198:	d879      	bhi.n	800728e <UART_SetConfig+0xaba>
 800719a:	a201      	add	r2, pc, #4	@ (adr r2, 80071a0 <UART_SetConfig+0x9cc>)
 800719c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80071a0:	0800722b 	.word	0x0800722b
 80071a4:	08007233 	.word	0x08007233
 80071a8:	0800728f 	.word	0x0800728f
 80071ac:	0800728f 	.word	0x0800728f
 80071b0:	0800723b 	.word	0x0800723b
 80071b4:	0800728f 	.word	0x0800728f
 80071b8:	0800728f 	.word	0x0800728f
 80071bc:	0800728f 	.word	0x0800728f
 80071c0:	0800724b 	.word	0x0800724b
 80071c4:	0800728f 	.word	0x0800728f
 80071c8:	0800728f 	.word	0x0800728f
 80071cc:	0800728f 	.word	0x0800728f
 80071d0:	0800728f 	.word	0x0800728f
 80071d4:	0800728f 	.word	0x0800728f
 80071d8:	0800728f 	.word	0x0800728f
 80071dc:	0800728f 	.word	0x0800728f
 80071e0:	0800725b 	.word	0x0800725b
 80071e4:	0800728f 	.word	0x0800728f
 80071e8:	0800728f 	.word	0x0800728f
 80071ec:	0800728f 	.word	0x0800728f
 80071f0:	0800728f 	.word	0x0800728f
 80071f4:	0800728f 	.word	0x0800728f
 80071f8:	0800728f 	.word	0x0800728f
 80071fc:	0800728f 	.word	0x0800728f
 8007200:	0800728f 	.word	0x0800728f
 8007204:	0800728f 	.word	0x0800728f
 8007208:	0800728f 	.word	0x0800728f
 800720c:	0800728f 	.word	0x0800728f
 8007210:	0800728f 	.word	0x0800728f
 8007214:	0800728f 	.word	0x0800728f
 8007218:	0800728f 	.word	0x0800728f
 800721c:	0800728f 	.word	0x0800728f
 8007220:	08007281 	.word	0x08007281
 8007224:	2b40      	cmp	r3, #64	@ 0x40
 8007226:	d02e      	beq.n	8007286 <UART_SetConfig+0xab2>
 8007228:	e031      	b.n	800728e <UART_SetConfig+0xaba>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800722a:	f7fc ff15 	bl	8004058 <HAL_RCC_GetPCLK1Freq>
 800722e:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8007230:	e033      	b.n	800729a <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007232:	f7fc ff27 	bl	8004084 <HAL_RCC_GetPCLK2Freq>
 8007236:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8007238:	e02f      	b.n	800729a <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800723a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800723e:	4618      	mov	r0, r3
 8007240:	f7fe f92e 	bl	80054a0 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8007244:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007246:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007248:	e027      	b.n	800729a <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800724a:	f107 0318 	add.w	r3, r7, #24
 800724e:	4618      	mov	r0, r3
 8007250:	f7fe fa7a 	bl	8005748 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8007254:	69fb      	ldr	r3, [r7, #28]
 8007256:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007258:	e01f      	b.n	800729a <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800725a:	4b69      	ldr	r3, [pc, #420]	@ (8007400 <UART_SetConfig+0xc2c>)
 800725c:	681b      	ldr	r3, [r3, #0]
 800725e:	f003 0320 	and.w	r3, r3, #32
 8007262:	2b00      	cmp	r3, #0
 8007264:	d009      	beq.n	800727a <UART_SetConfig+0xaa6>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8007266:	4b66      	ldr	r3, [pc, #408]	@ (8007400 <UART_SetConfig+0xc2c>)
 8007268:	681b      	ldr	r3, [r3, #0]
 800726a:	08db      	lsrs	r3, r3, #3
 800726c:	f003 0303 	and.w	r3, r3, #3
 8007270:	4a64      	ldr	r2, [pc, #400]	@ (8007404 <UART_SetConfig+0xc30>)
 8007272:	fa22 f303 	lsr.w	r3, r2, r3
 8007276:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8007278:	e00f      	b.n	800729a <UART_SetConfig+0xac6>
          pclk = (uint32_t) HSI_VALUE;
 800727a:	4b62      	ldr	r3, [pc, #392]	@ (8007404 <UART_SetConfig+0xc30>)
 800727c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800727e:	e00c      	b.n	800729a <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8007280:	4b61      	ldr	r3, [pc, #388]	@ (8007408 <UART_SetConfig+0xc34>)
 8007282:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007284:	e009      	b.n	800729a <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007286:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800728a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800728c:	e005      	b.n	800729a <UART_SetConfig+0xac6>
      default:
        pclk = 0U;
 800728e:	2300      	movs	r3, #0
 8007290:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8007292:	2301      	movs	r3, #1
 8007294:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8007298:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800729a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800729c:	2b00      	cmp	r3, #0
 800729e:	f000 80ea 	beq.w	8007476 <UART_SetConfig+0xca2>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80072a2:	697b      	ldr	r3, [r7, #20]
 80072a4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80072a6:	4a55      	ldr	r2, [pc, #340]	@ (80073fc <UART_SetConfig+0xc28>)
 80072a8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80072ac:	461a      	mov	r2, r3
 80072ae:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80072b0:	fbb3 f3f2 	udiv	r3, r3, r2
 80072b4:	005a      	lsls	r2, r3, #1
 80072b6:	697b      	ldr	r3, [r7, #20]
 80072b8:	685b      	ldr	r3, [r3, #4]
 80072ba:	085b      	lsrs	r3, r3, #1
 80072bc:	441a      	add	r2, r3
 80072be:	697b      	ldr	r3, [r7, #20]
 80072c0:	685b      	ldr	r3, [r3, #4]
 80072c2:	fbb2 f3f3 	udiv	r3, r2, r3
 80072c6:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80072c8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80072ca:	2b0f      	cmp	r3, #15
 80072cc:	d916      	bls.n	80072fc <UART_SetConfig+0xb28>
 80072ce:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80072d0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80072d4:	d212      	bcs.n	80072fc <UART_SetConfig+0xb28>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80072d6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80072d8:	b29b      	uxth	r3, r3
 80072da:	f023 030f 	bic.w	r3, r3, #15
 80072de:	86fb      	strh	r3, [r7, #54]	@ 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80072e0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80072e2:	085b      	lsrs	r3, r3, #1
 80072e4:	b29b      	uxth	r3, r3
 80072e6:	f003 0307 	and.w	r3, r3, #7
 80072ea:	b29a      	uxth	r2, r3
 80072ec:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 80072ee:	4313      	orrs	r3, r2
 80072f0:	86fb      	strh	r3, [r7, #54]	@ 0x36
        huart->Instance->BRR = brrtemp;
 80072f2:	697b      	ldr	r3, [r7, #20]
 80072f4:	681b      	ldr	r3, [r3, #0]
 80072f6:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 80072f8:	60da      	str	r2, [r3, #12]
 80072fa:	e0bc      	b.n	8007476 <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 80072fc:	2301      	movs	r3, #1
 80072fe:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8007302:	e0b8      	b.n	8007476 <UART_SetConfig+0xca2>
      }
    }
  }
  else
  {
    switch (clocksource)
 8007304:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8007308:	2b20      	cmp	r3, #32
 800730a:	dc4b      	bgt.n	80073a4 <UART_SetConfig+0xbd0>
 800730c:	2b00      	cmp	r3, #0
 800730e:	f2c0 8087 	blt.w	8007420 <UART_SetConfig+0xc4c>
 8007312:	2b20      	cmp	r3, #32
 8007314:	f200 8084 	bhi.w	8007420 <UART_SetConfig+0xc4c>
 8007318:	a201      	add	r2, pc, #4	@ (adr r2, 8007320 <UART_SetConfig+0xb4c>)
 800731a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800731e:	bf00      	nop
 8007320:	080073ab 	.word	0x080073ab
 8007324:	080073b3 	.word	0x080073b3
 8007328:	08007421 	.word	0x08007421
 800732c:	08007421 	.word	0x08007421
 8007330:	080073bb 	.word	0x080073bb
 8007334:	08007421 	.word	0x08007421
 8007338:	08007421 	.word	0x08007421
 800733c:	08007421 	.word	0x08007421
 8007340:	080073cb 	.word	0x080073cb
 8007344:	08007421 	.word	0x08007421
 8007348:	08007421 	.word	0x08007421
 800734c:	08007421 	.word	0x08007421
 8007350:	08007421 	.word	0x08007421
 8007354:	08007421 	.word	0x08007421
 8007358:	08007421 	.word	0x08007421
 800735c:	08007421 	.word	0x08007421
 8007360:	080073db 	.word	0x080073db
 8007364:	08007421 	.word	0x08007421
 8007368:	08007421 	.word	0x08007421
 800736c:	08007421 	.word	0x08007421
 8007370:	08007421 	.word	0x08007421
 8007374:	08007421 	.word	0x08007421
 8007378:	08007421 	.word	0x08007421
 800737c:	08007421 	.word	0x08007421
 8007380:	08007421 	.word	0x08007421
 8007384:	08007421 	.word	0x08007421
 8007388:	08007421 	.word	0x08007421
 800738c:	08007421 	.word	0x08007421
 8007390:	08007421 	.word	0x08007421
 8007394:	08007421 	.word	0x08007421
 8007398:	08007421 	.word	0x08007421
 800739c:	08007421 	.word	0x08007421
 80073a0:	08007413 	.word	0x08007413
 80073a4:	2b40      	cmp	r3, #64	@ 0x40
 80073a6:	d037      	beq.n	8007418 <UART_SetConfig+0xc44>
 80073a8:	e03a      	b.n	8007420 <UART_SetConfig+0xc4c>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80073aa:	f7fc fe55 	bl	8004058 <HAL_RCC_GetPCLK1Freq>
 80073ae:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 80073b0:	e03c      	b.n	800742c <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80073b2:	f7fc fe67 	bl	8004084 <HAL_RCC_GetPCLK2Freq>
 80073b6:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 80073b8:	e038      	b.n	800742c <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80073ba:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80073be:	4618      	mov	r0, r3
 80073c0:	f7fe f86e 	bl	80054a0 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80073c4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80073c6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80073c8:	e030      	b.n	800742c <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80073ca:	f107 0318 	add.w	r3, r7, #24
 80073ce:	4618      	mov	r0, r3
 80073d0:	f7fe f9ba 	bl	8005748 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80073d4:	69fb      	ldr	r3, [r7, #28]
 80073d6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80073d8:	e028      	b.n	800742c <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80073da:	4b09      	ldr	r3, [pc, #36]	@ (8007400 <UART_SetConfig+0xc2c>)
 80073dc:	681b      	ldr	r3, [r3, #0]
 80073de:	f003 0320 	and.w	r3, r3, #32
 80073e2:	2b00      	cmp	r3, #0
 80073e4:	d012      	beq.n	800740c <UART_SetConfig+0xc38>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80073e6:	4b06      	ldr	r3, [pc, #24]	@ (8007400 <UART_SetConfig+0xc2c>)
 80073e8:	681b      	ldr	r3, [r3, #0]
 80073ea:	08db      	lsrs	r3, r3, #3
 80073ec:	f003 0303 	and.w	r3, r3, #3
 80073f0:	4a04      	ldr	r2, [pc, #16]	@ (8007404 <UART_SetConfig+0xc30>)
 80073f2:	fa22 f303 	lsr.w	r3, r2, r3
 80073f6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80073f8:	e018      	b.n	800742c <UART_SetConfig+0xc58>
 80073fa:	bf00      	nop
 80073fc:	0800a878 	.word	0x0800a878
 8007400:	58024400 	.word	0x58024400
 8007404:	03d09000 	.word	0x03d09000
 8007408:	003d0900 	.word	0x003d0900
          pclk = (uint32_t) HSI_VALUE;
 800740c:	4b24      	ldr	r3, [pc, #144]	@ (80074a0 <UART_SetConfig+0xccc>)
 800740e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007410:	e00c      	b.n	800742c <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8007412:	4b24      	ldr	r3, [pc, #144]	@ (80074a4 <UART_SetConfig+0xcd0>)
 8007414:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007416:	e009      	b.n	800742c <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007418:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800741c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800741e:	e005      	b.n	800742c <UART_SetConfig+0xc58>
      default:
        pclk = 0U;
 8007420:	2300      	movs	r3, #0
 8007422:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8007424:	2301      	movs	r3, #1
 8007426:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800742a:	bf00      	nop
    }

    if (pclk != 0U)
 800742c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800742e:	2b00      	cmp	r3, #0
 8007430:	d021      	beq.n	8007476 <UART_SetConfig+0xca2>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007432:	697b      	ldr	r3, [r7, #20]
 8007434:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007436:	4a1c      	ldr	r2, [pc, #112]	@ (80074a8 <UART_SetConfig+0xcd4>)
 8007438:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800743c:	461a      	mov	r2, r3
 800743e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007440:	fbb3 f2f2 	udiv	r2, r3, r2
 8007444:	697b      	ldr	r3, [r7, #20]
 8007446:	685b      	ldr	r3, [r3, #4]
 8007448:	085b      	lsrs	r3, r3, #1
 800744a:	441a      	add	r2, r3
 800744c:	697b      	ldr	r3, [r7, #20]
 800744e:	685b      	ldr	r3, [r3, #4]
 8007450:	fbb2 f3f3 	udiv	r3, r2, r3
 8007454:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007456:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007458:	2b0f      	cmp	r3, #15
 800745a:	d909      	bls.n	8007470 <UART_SetConfig+0xc9c>
 800745c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800745e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007462:	d205      	bcs.n	8007470 <UART_SetConfig+0xc9c>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8007464:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007466:	b29a      	uxth	r2, r3
 8007468:	697b      	ldr	r3, [r7, #20]
 800746a:	681b      	ldr	r3, [r3, #0]
 800746c:	60da      	str	r2, [r3, #12]
 800746e:	e002      	b.n	8007476 <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 8007470:	2301      	movs	r3, #1
 8007472:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8007476:	697b      	ldr	r3, [r7, #20]
 8007478:	2201      	movs	r2, #1
 800747a:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 800747e:	697b      	ldr	r3, [r7, #20]
 8007480:	2201      	movs	r2, #1
 8007482:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8007486:	697b      	ldr	r3, [r7, #20]
 8007488:	2200      	movs	r2, #0
 800748a:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 800748c:	697b      	ldr	r3, [r7, #20]
 800748e:	2200      	movs	r2, #0
 8007490:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8007492:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
}
 8007496:	4618      	mov	r0, r3
 8007498:	3748      	adds	r7, #72	@ 0x48
 800749a:	46bd      	mov	sp, r7
 800749c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80074a0:	03d09000 	.word	0x03d09000
 80074a4:	003d0900 	.word	0x003d0900
 80074a8:	0800a878 	.word	0x0800a878

080074ac <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80074ac:	b480      	push	{r7}
 80074ae:	b083      	sub	sp, #12
 80074b0:	af00      	add	r7, sp, #0
 80074b2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80074b4:	687b      	ldr	r3, [r7, #4]
 80074b6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80074b8:	f003 0308 	and.w	r3, r3, #8
 80074bc:	2b00      	cmp	r3, #0
 80074be:	d00a      	beq.n	80074d6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80074c0:	687b      	ldr	r3, [r7, #4]
 80074c2:	681b      	ldr	r3, [r3, #0]
 80074c4:	685b      	ldr	r3, [r3, #4]
 80074c6:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 80074ca:	687b      	ldr	r3, [r7, #4]
 80074cc:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80074ce:	687b      	ldr	r3, [r7, #4]
 80074d0:	681b      	ldr	r3, [r3, #0]
 80074d2:	430a      	orrs	r2, r1
 80074d4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80074d6:	687b      	ldr	r3, [r7, #4]
 80074d8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80074da:	f003 0301 	and.w	r3, r3, #1
 80074de:	2b00      	cmp	r3, #0
 80074e0:	d00a      	beq.n	80074f8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80074e2:	687b      	ldr	r3, [r7, #4]
 80074e4:	681b      	ldr	r3, [r3, #0]
 80074e6:	685b      	ldr	r3, [r3, #4]
 80074e8:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 80074ec:	687b      	ldr	r3, [r7, #4]
 80074ee:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80074f0:	687b      	ldr	r3, [r7, #4]
 80074f2:	681b      	ldr	r3, [r3, #0]
 80074f4:	430a      	orrs	r2, r1
 80074f6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80074f8:	687b      	ldr	r3, [r7, #4]
 80074fa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80074fc:	f003 0302 	and.w	r3, r3, #2
 8007500:	2b00      	cmp	r3, #0
 8007502:	d00a      	beq.n	800751a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8007504:	687b      	ldr	r3, [r7, #4]
 8007506:	681b      	ldr	r3, [r3, #0]
 8007508:	685b      	ldr	r3, [r3, #4]
 800750a:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800750e:	687b      	ldr	r3, [r7, #4]
 8007510:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8007512:	687b      	ldr	r3, [r7, #4]
 8007514:	681b      	ldr	r3, [r3, #0]
 8007516:	430a      	orrs	r2, r1
 8007518:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800751a:	687b      	ldr	r3, [r7, #4]
 800751c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800751e:	f003 0304 	and.w	r3, r3, #4
 8007522:	2b00      	cmp	r3, #0
 8007524:	d00a      	beq.n	800753c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8007526:	687b      	ldr	r3, [r7, #4]
 8007528:	681b      	ldr	r3, [r3, #0]
 800752a:	685b      	ldr	r3, [r3, #4]
 800752c:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8007530:	687b      	ldr	r3, [r7, #4]
 8007532:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8007534:	687b      	ldr	r3, [r7, #4]
 8007536:	681b      	ldr	r3, [r3, #0]
 8007538:	430a      	orrs	r2, r1
 800753a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800753c:	687b      	ldr	r3, [r7, #4]
 800753e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007540:	f003 0310 	and.w	r3, r3, #16
 8007544:	2b00      	cmp	r3, #0
 8007546:	d00a      	beq.n	800755e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8007548:	687b      	ldr	r3, [r7, #4]
 800754a:	681b      	ldr	r3, [r3, #0]
 800754c:	689b      	ldr	r3, [r3, #8]
 800754e:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8007552:	687b      	ldr	r3, [r7, #4]
 8007554:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8007556:	687b      	ldr	r3, [r7, #4]
 8007558:	681b      	ldr	r3, [r3, #0]
 800755a:	430a      	orrs	r2, r1
 800755c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800755e:	687b      	ldr	r3, [r7, #4]
 8007560:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007562:	f003 0320 	and.w	r3, r3, #32
 8007566:	2b00      	cmp	r3, #0
 8007568:	d00a      	beq.n	8007580 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800756a:	687b      	ldr	r3, [r7, #4]
 800756c:	681b      	ldr	r3, [r3, #0]
 800756e:	689b      	ldr	r3, [r3, #8]
 8007570:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8007574:	687b      	ldr	r3, [r7, #4]
 8007576:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8007578:	687b      	ldr	r3, [r7, #4]
 800757a:	681b      	ldr	r3, [r3, #0]
 800757c:	430a      	orrs	r2, r1
 800757e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8007580:	687b      	ldr	r3, [r7, #4]
 8007582:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007584:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007588:	2b00      	cmp	r3, #0
 800758a:	d01a      	beq.n	80075c2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800758c:	687b      	ldr	r3, [r7, #4]
 800758e:	681b      	ldr	r3, [r3, #0]
 8007590:	685b      	ldr	r3, [r3, #4]
 8007592:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8007596:	687b      	ldr	r3, [r7, #4]
 8007598:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800759a:	687b      	ldr	r3, [r7, #4]
 800759c:	681b      	ldr	r3, [r3, #0]
 800759e:	430a      	orrs	r2, r1
 80075a0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80075a2:	687b      	ldr	r3, [r7, #4]
 80075a4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80075a6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80075aa:	d10a      	bne.n	80075c2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80075ac:	687b      	ldr	r3, [r7, #4]
 80075ae:	681b      	ldr	r3, [r3, #0]
 80075b0:	685b      	ldr	r3, [r3, #4]
 80075b2:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 80075b6:	687b      	ldr	r3, [r7, #4]
 80075b8:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80075ba:	687b      	ldr	r3, [r7, #4]
 80075bc:	681b      	ldr	r3, [r3, #0]
 80075be:	430a      	orrs	r2, r1
 80075c0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80075c2:	687b      	ldr	r3, [r7, #4]
 80075c4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80075c6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80075ca:	2b00      	cmp	r3, #0
 80075cc:	d00a      	beq.n	80075e4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80075ce:	687b      	ldr	r3, [r7, #4]
 80075d0:	681b      	ldr	r3, [r3, #0]
 80075d2:	685b      	ldr	r3, [r3, #4]
 80075d4:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 80075d8:	687b      	ldr	r3, [r7, #4]
 80075da:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80075dc:	687b      	ldr	r3, [r7, #4]
 80075de:	681b      	ldr	r3, [r3, #0]
 80075e0:	430a      	orrs	r2, r1
 80075e2:	605a      	str	r2, [r3, #4]
  }
}
 80075e4:	bf00      	nop
 80075e6:	370c      	adds	r7, #12
 80075e8:	46bd      	mov	sp, r7
 80075ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075ee:	4770      	bx	lr

080075f0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80075f0:	b580      	push	{r7, lr}
 80075f2:	b098      	sub	sp, #96	@ 0x60
 80075f4:	af02      	add	r7, sp, #8
 80075f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80075f8:	687b      	ldr	r3, [r7, #4]
 80075fa:	2200      	movs	r2, #0
 80075fc:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8007600:	f7fa fbc4 	bl	8001d8c <HAL_GetTick>
 8007604:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8007606:	687b      	ldr	r3, [r7, #4]
 8007608:	681b      	ldr	r3, [r3, #0]
 800760a:	681b      	ldr	r3, [r3, #0]
 800760c:	f003 0308 	and.w	r3, r3, #8
 8007610:	2b08      	cmp	r3, #8
 8007612:	d12f      	bne.n	8007674 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007614:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8007618:	9300      	str	r3, [sp, #0]
 800761a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800761c:	2200      	movs	r2, #0
 800761e:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8007622:	6878      	ldr	r0, [r7, #4]
 8007624:	f000 f88e 	bl	8007744 <UART_WaitOnFlagUntilTimeout>
 8007628:	4603      	mov	r3, r0
 800762a:	2b00      	cmp	r3, #0
 800762c:	d022      	beq.n	8007674 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800762e:	687b      	ldr	r3, [r7, #4]
 8007630:	681b      	ldr	r3, [r3, #0]
 8007632:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007634:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007636:	e853 3f00 	ldrex	r3, [r3]
 800763a:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800763c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800763e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8007642:	653b      	str	r3, [r7, #80]	@ 0x50
 8007644:	687b      	ldr	r3, [r7, #4]
 8007646:	681b      	ldr	r3, [r3, #0]
 8007648:	461a      	mov	r2, r3
 800764a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800764c:	647b      	str	r3, [r7, #68]	@ 0x44
 800764e:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007650:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8007652:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8007654:	e841 2300 	strex	r3, r2, [r1]
 8007658:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800765a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800765c:	2b00      	cmp	r3, #0
 800765e:	d1e6      	bne.n	800762e <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8007660:	687b      	ldr	r3, [r7, #4]
 8007662:	2220      	movs	r2, #32
 8007664:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8007668:	687b      	ldr	r3, [r7, #4]
 800766a:	2200      	movs	r2, #0
 800766c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007670:	2303      	movs	r3, #3
 8007672:	e063      	b.n	800773c <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8007674:	687b      	ldr	r3, [r7, #4]
 8007676:	681b      	ldr	r3, [r3, #0]
 8007678:	681b      	ldr	r3, [r3, #0]
 800767a:	f003 0304 	and.w	r3, r3, #4
 800767e:	2b04      	cmp	r3, #4
 8007680:	d149      	bne.n	8007716 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007682:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8007686:	9300      	str	r3, [sp, #0]
 8007688:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800768a:	2200      	movs	r2, #0
 800768c:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8007690:	6878      	ldr	r0, [r7, #4]
 8007692:	f000 f857 	bl	8007744 <UART_WaitOnFlagUntilTimeout>
 8007696:	4603      	mov	r3, r0
 8007698:	2b00      	cmp	r3, #0
 800769a:	d03c      	beq.n	8007716 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800769c:	687b      	ldr	r3, [r7, #4]
 800769e:	681b      	ldr	r3, [r3, #0]
 80076a0:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80076a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80076a4:	e853 3f00 	ldrex	r3, [r3]
 80076a8:	623b      	str	r3, [r7, #32]
   return(result);
 80076aa:	6a3b      	ldr	r3, [r7, #32]
 80076ac:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80076b0:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80076b2:	687b      	ldr	r3, [r7, #4]
 80076b4:	681b      	ldr	r3, [r3, #0]
 80076b6:	461a      	mov	r2, r3
 80076b8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80076ba:	633b      	str	r3, [r7, #48]	@ 0x30
 80076bc:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80076be:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80076c0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80076c2:	e841 2300 	strex	r3, r2, [r1]
 80076c6:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80076c8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80076ca:	2b00      	cmp	r3, #0
 80076cc:	d1e6      	bne.n	800769c <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80076ce:	687b      	ldr	r3, [r7, #4]
 80076d0:	681b      	ldr	r3, [r3, #0]
 80076d2:	3308      	adds	r3, #8
 80076d4:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80076d6:	693b      	ldr	r3, [r7, #16]
 80076d8:	e853 3f00 	ldrex	r3, [r3]
 80076dc:	60fb      	str	r3, [r7, #12]
   return(result);
 80076de:	68fb      	ldr	r3, [r7, #12]
 80076e0:	f023 0301 	bic.w	r3, r3, #1
 80076e4:	64bb      	str	r3, [r7, #72]	@ 0x48
 80076e6:	687b      	ldr	r3, [r7, #4]
 80076e8:	681b      	ldr	r3, [r3, #0]
 80076ea:	3308      	adds	r3, #8
 80076ec:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80076ee:	61fa      	str	r2, [r7, #28]
 80076f0:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80076f2:	69b9      	ldr	r1, [r7, #24]
 80076f4:	69fa      	ldr	r2, [r7, #28]
 80076f6:	e841 2300 	strex	r3, r2, [r1]
 80076fa:	617b      	str	r3, [r7, #20]
   return(result);
 80076fc:	697b      	ldr	r3, [r7, #20]
 80076fe:	2b00      	cmp	r3, #0
 8007700:	d1e5      	bne.n	80076ce <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8007702:	687b      	ldr	r3, [r7, #4]
 8007704:	2220      	movs	r2, #32
 8007706:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 800770a:	687b      	ldr	r3, [r7, #4]
 800770c:	2200      	movs	r2, #0
 800770e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007712:	2303      	movs	r3, #3
 8007714:	e012      	b.n	800773c <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8007716:	687b      	ldr	r3, [r7, #4]
 8007718:	2220      	movs	r2, #32
 800771a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800771e:	687b      	ldr	r3, [r7, #4]
 8007720:	2220      	movs	r2, #32
 8007722:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007726:	687b      	ldr	r3, [r7, #4]
 8007728:	2200      	movs	r2, #0
 800772a:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800772c:	687b      	ldr	r3, [r7, #4]
 800772e:	2200      	movs	r2, #0
 8007730:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8007732:	687b      	ldr	r3, [r7, #4]
 8007734:	2200      	movs	r2, #0
 8007736:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800773a:	2300      	movs	r3, #0
}
 800773c:	4618      	mov	r0, r3
 800773e:	3758      	adds	r7, #88	@ 0x58
 8007740:	46bd      	mov	sp, r7
 8007742:	bd80      	pop	{r7, pc}

08007744 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8007744:	b580      	push	{r7, lr}
 8007746:	b084      	sub	sp, #16
 8007748:	af00      	add	r7, sp, #0
 800774a:	60f8      	str	r0, [r7, #12]
 800774c:	60b9      	str	r1, [r7, #8]
 800774e:	603b      	str	r3, [r7, #0]
 8007750:	4613      	mov	r3, r2
 8007752:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007754:	e04f      	b.n	80077f6 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007756:	69bb      	ldr	r3, [r7, #24]
 8007758:	f1b3 3fff 	cmp.w	r3, #4294967295
 800775c:	d04b      	beq.n	80077f6 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800775e:	f7fa fb15 	bl	8001d8c <HAL_GetTick>
 8007762:	4602      	mov	r2, r0
 8007764:	683b      	ldr	r3, [r7, #0]
 8007766:	1ad3      	subs	r3, r2, r3
 8007768:	69ba      	ldr	r2, [r7, #24]
 800776a:	429a      	cmp	r2, r3
 800776c:	d302      	bcc.n	8007774 <UART_WaitOnFlagUntilTimeout+0x30>
 800776e:	69bb      	ldr	r3, [r7, #24]
 8007770:	2b00      	cmp	r3, #0
 8007772:	d101      	bne.n	8007778 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8007774:	2303      	movs	r3, #3
 8007776:	e04e      	b.n	8007816 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8007778:	68fb      	ldr	r3, [r7, #12]
 800777a:	681b      	ldr	r3, [r3, #0]
 800777c:	681b      	ldr	r3, [r3, #0]
 800777e:	f003 0304 	and.w	r3, r3, #4
 8007782:	2b00      	cmp	r3, #0
 8007784:	d037      	beq.n	80077f6 <UART_WaitOnFlagUntilTimeout+0xb2>
 8007786:	68bb      	ldr	r3, [r7, #8]
 8007788:	2b80      	cmp	r3, #128	@ 0x80
 800778a:	d034      	beq.n	80077f6 <UART_WaitOnFlagUntilTimeout+0xb2>
 800778c:	68bb      	ldr	r3, [r7, #8]
 800778e:	2b40      	cmp	r3, #64	@ 0x40
 8007790:	d031      	beq.n	80077f6 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8007792:	68fb      	ldr	r3, [r7, #12]
 8007794:	681b      	ldr	r3, [r3, #0]
 8007796:	69db      	ldr	r3, [r3, #28]
 8007798:	f003 0308 	and.w	r3, r3, #8
 800779c:	2b08      	cmp	r3, #8
 800779e:	d110      	bne.n	80077c2 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80077a0:	68fb      	ldr	r3, [r7, #12]
 80077a2:	681b      	ldr	r3, [r3, #0]
 80077a4:	2208      	movs	r2, #8
 80077a6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80077a8:	68f8      	ldr	r0, [r7, #12]
 80077aa:	f000 f839 	bl	8007820 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80077ae:	68fb      	ldr	r3, [r7, #12]
 80077b0:	2208      	movs	r2, #8
 80077b2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80077b6:	68fb      	ldr	r3, [r7, #12]
 80077b8:	2200      	movs	r2, #0
 80077ba:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 80077be:	2301      	movs	r3, #1
 80077c0:	e029      	b.n	8007816 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80077c2:	68fb      	ldr	r3, [r7, #12]
 80077c4:	681b      	ldr	r3, [r3, #0]
 80077c6:	69db      	ldr	r3, [r3, #28]
 80077c8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80077cc:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80077d0:	d111      	bne.n	80077f6 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80077d2:	68fb      	ldr	r3, [r7, #12]
 80077d4:	681b      	ldr	r3, [r3, #0]
 80077d6:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80077da:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80077dc:	68f8      	ldr	r0, [r7, #12]
 80077de:	f000 f81f 	bl	8007820 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80077e2:	68fb      	ldr	r3, [r7, #12]
 80077e4:	2220      	movs	r2, #32
 80077e6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80077ea:	68fb      	ldr	r3, [r7, #12]
 80077ec:	2200      	movs	r2, #0
 80077ee:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 80077f2:	2303      	movs	r3, #3
 80077f4:	e00f      	b.n	8007816 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80077f6:	68fb      	ldr	r3, [r7, #12]
 80077f8:	681b      	ldr	r3, [r3, #0]
 80077fa:	69da      	ldr	r2, [r3, #28]
 80077fc:	68bb      	ldr	r3, [r7, #8]
 80077fe:	4013      	ands	r3, r2
 8007800:	68ba      	ldr	r2, [r7, #8]
 8007802:	429a      	cmp	r2, r3
 8007804:	bf0c      	ite	eq
 8007806:	2301      	moveq	r3, #1
 8007808:	2300      	movne	r3, #0
 800780a:	b2db      	uxtb	r3, r3
 800780c:	461a      	mov	r2, r3
 800780e:	79fb      	ldrb	r3, [r7, #7]
 8007810:	429a      	cmp	r2, r3
 8007812:	d0a0      	beq.n	8007756 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007814:	2300      	movs	r3, #0
}
 8007816:	4618      	mov	r0, r3
 8007818:	3710      	adds	r7, #16
 800781a:	46bd      	mov	sp, r7
 800781c:	bd80      	pop	{r7, pc}
	...

08007820 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007820:	b480      	push	{r7}
 8007822:	b095      	sub	sp, #84	@ 0x54
 8007824:	af00      	add	r7, sp, #0
 8007826:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007828:	687b      	ldr	r3, [r7, #4]
 800782a:	681b      	ldr	r3, [r3, #0]
 800782c:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800782e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007830:	e853 3f00 	ldrex	r3, [r3]
 8007834:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8007836:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007838:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800783c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800783e:	687b      	ldr	r3, [r7, #4]
 8007840:	681b      	ldr	r3, [r3, #0]
 8007842:	461a      	mov	r2, r3
 8007844:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007846:	643b      	str	r3, [r7, #64]	@ 0x40
 8007848:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800784a:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800784c:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800784e:	e841 2300 	strex	r3, r2, [r1]
 8007852:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8007854:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007856:	2b00      	cmp	r3, #0
 8007858:	d1e6      	bne.n	8007828 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800785a:	687b      	ldr	r3, [r7, #4]
 800785c:	681b      	ldr	r3, [r3, #0]
 800785e:	3308      	adds	r3, #8
 8007860:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007862:	6a3b      	ldr	r3, [r7, #32]
 8007864:	e853 3f00 	ldrex	r3, [r3]
 8007868:	61fb      	str	r3, [r7, #28]
   return(result);
 800786a:	69fa      	ldr	r2, [r7, #28]
 800786c:	4b1e      	ldr	r3, [pc, #120]	@ (80078e8 <UART_EndRxTransfer+0xc8>)
 800786e:	4013      	ands	r3, r2
 8007870:	64bb      	str	r3, [r7, #72]	@ 0x48
 8007872:	687b      	ldr	r3, [r7, #4]
 8007874:	681b      	ldr	r3, [r3, #0]
 8007876:	3308      	adds	r3, #8
 8007878:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800787a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800787c:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800787e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8007880:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007882:	e841 2300 	strex	r3, r2, [r1]
 8007886:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8007888:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800788a:	2b00      	cmp	r3, #0
 800788c:	d1e5      	bne.n	800785a <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800788e:	687b      	ldr	r3, [r7, #4]
 8007890:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007892:	2b01      	cmp	r3, #1
 8007894:	d118      	bne.n	80078c8 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007896:	687b      	ldr	r3, [r7, #4]
 8007898:	681b      	ldr	r3, [r3, #0]
 800789a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800789c:	68fb      	ldr	r3, [r7, #12]
 800789e:	e853 3f00 	ldrex	r3, [r3]
 80078a2:	60bb      	str	r3, [r7, #8]
   return(result);
 80078a4:	68bb      	ldr	r3, [r7, #8]
 80078a6:	f023 0310 	bic.w	r3, r3, #16
 80078aa:	647b      	str	r3, [r7, #68]	@ 0x44
 80078ac:	687b      	ldr	r3, [r7, #4]
 80078ae:	681b      	ldr	r3, [r3, #0]
 80078b0:	461a      	mov	r2, r3
 80078b2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80078b4:	61bb      	str	r3, [r7, #24]
 80078b6:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80078b8:	6979      	ldr	r1, [r7, #20]
 80078ba:	69ba      	ldr	r2, [r7, #24]
 80078bc:	e841 2300 	strex	r3, r2, [r1]
 80078c0:	613b      	str	r3, [r7, #16]
   return(result);
 80078c2:	693b      	ldr	r3, [r7, #16]
 80078c4:	2b00      	cmp	r3, #0
 80078c6:	d1e6      	bne.n	8007896 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80078c8:	687b      	ldr	r3, [r7, #4]
 80078ca:	2220      	movs	r2, #32
 80078cc:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80078d0:	687b      	ldr	r3, [r7, #4]
 80078d2:	2200      	movs	r2, #0
 80078d4:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80078d6:	687b      	ldr	r3, [r7, #4]
 80078d8:	2200      	movs	r2, #0
 80078da:	675a      	str	r2, [r3, #116]	@ 0x74
}
 80078dc:	bf00      	nop
 80078de:	3754      	adds	r7, #84	@ 0x54
 80078e0:	46bd      	mov	sp, r7
 80078e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078e6:	4770      	bx	lr
 80078e8:	effffffe 	.word	0xeffffffe

080078ec <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 80078ec:	b480      	push	{r7}
 80078ee:	b085      	sub	sp, #20
 80078f0:	af00      	add	r7, sp, #0
 80078f2:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80078f4:	687b      	ldr	r3, [r7, #4]
 80078f6:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80078fa:	2b01      	cmp	r3, #1
 80078fc:	d101      	bne.n	8007902 <HAL_UARTEx_DisableFifoMode+0x16>
 80078fe:	2302      	movs	r3, #2
 8007900:	e027      	b.n	8007952 <HAL_UARTEx_DisableFifoMode+0x66>
 8007902:	687b      	ldr	r3, [r7, #4]
 8007904:	2201      	movs	r2, #1
 8007906:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800790a:	687b      	ldr	r3, [r7, #4]
 800790c:	2224      	movs	r2, #36	@ 0x24
 800790e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007912:	687b      	ldr	r3, [r7, #4]
 8007914:	681b      	ldr	r3, [r3, #0]
 8007916:	681b      	ldr	r3, [r3, #0]
 8007918:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800791a:	687b      	ldr	r3, [r7, #4]
 800791c:	681b      	ldr	r3, [r3, #0]
 800791e:	681a      	ldr	r2, [r3, #0]
 8007920:	687b      	ldr	r3, [r7, #4]
 8007922:	681b      	ldr	r3, [r3, #0]
 8007924:	f022 0201 	bic.w	r2, r2, #1
 8007928:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800792a:	68fb      	ldr	r3, [r7, #12]
 800792c:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8007930:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8007932:	687b      	ldr	r3, [r7, #4]
 8007934:	2200      	movs	r2, #0
 8007936:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007938:	687b      	ldr	r3, [r7, #4]
 800793a:	681b      	ldr	r3, [r3, #0]
 800793c:	68fa      	ldr	r2, [r7, #12]
 800793e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007940:	687b      	ldr	r3, [r7, #4]
 8007942:	2220      	movs	r2, #32
 8007944:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007948:	687b      	ldr	r3, [r7, #4]
 800794a:	2200      	movs	r2, #0
 800794c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8007950:	2300      	movs	r3, #0
}
 8007952:	4618      	mov	r0, r3
 8007954:	3714      	adds	r7, #20
 8007956:	46bd      	mov	sp, r7
 8007958:	f85d 7b04 	ldr.w	r7, [sp], #4
 800795c:	4770      	bx	lr

0800795e <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800795e:	b580      	push	{r7, lr}
 8007960:	b084      	sub	sp, #16
 8007962:	af00      	add	r7, sp, #0
 8007964:	6078      	str	r0, [r7, #4]
 8007966:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007968:	687b      	ldr	r3, [r7, #4]
 800796a:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800796e:	2b01      	cmp	r3, #1
 8007970:	d101      	bne.n	8007976 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8007972:	2302      	movs	r3, #2
 8007974:	e02d      	b.n	80079d2 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8007976:	687b      	ldr	r3, [r7, #4]
 8007978:	2201      	movs	r2, #1
 800797a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800797e:	687b      	ldr	r3, [r7, #4]
 8007980:	2224      	movs	r2, #36	@ 0x24
 8007982:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007986:	687b      	ldr	r3, [r7, #4]
 8007988:	681b      	ldr	r3, [r3, #0]
 800798a:	681b      	ldr	r3, [r3, #0]
 800798c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800798e:	687b      	ldr	r3, [r7, #4]
 8007990:	681b      	ldr	r3, [r3, #0]
 8007992:	681a      	ldr	r2, [r3, #0]
 8007994:	687b      	ldr	r3, [r7, #4]
 8007996:	681b      	ldr	r3, [r3, #0]
 8007998:	f022 0201 	bic.w	r2, r2, #1
 800799c:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800799e:	687b      	ldr	r3, [r7, #4]
 80079a0:	681b      	ldr	r3, [r3, #0]
 80079a2:	689b      	ldr	r3, [r3, #8]
 80079a4:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 80079a8:	687b      	ldr	r3, [r7, #4]
 80079aa:	681b      	ldr	r3, [r3, #0]
 80079ac:	683a      	ldr	r2, [r7, #0]
 80079ae:	430a      	orrs	r2, r1
 80079b0:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80079b2:	6878      	ldr	r0, [r7, #4]
 80079b4:	f000 f850 	bl	8007a58 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80079b8:	687b      	ldr	r3, [r7, #4]
 80079ba:	681b      	ldr	r3, [r3, #0]
 80079bc:	68fa      	ldr	r2, [r7, #12]
 80079be:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80079c0:	687b      	ldr	r3, [r7, #4]
 80079c2:	2220      	movs	r2, #32
 80079c4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80079c8:	687b      	ldr	r3, [r7, #4]
 80079ca:	2200      	movs	r2, #0
 80079cc:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80079d0:	2300      	movs	r3, #0
}
 80079d2:	4618      	mov	r0, r3
 80079d4:	3710      	adds	r7, #16
 80079d6:	46bd      	mov	sp, r7
 80079d8:	bd80      	pop	{r7, pc}

080079da <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80079da:	b580      	push	{r7, lr}
 80079dc:	b084      	sub	sp, #16
 80079de:	af00      	add	r7, sp, #0
 80079e0:	6078      	str	r0, [r7, #4]
 80079e2:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80079e4:	687b      	ldr	r3, [r7, #4]
 80079e6:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80079ea:	2b01      	cmp	r3, #1
 80079ec:	d101      	bne.n	80079f2 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80079ee:	2302      	movs	r3, #2
 80079f0:	e02d      	b.n	8007a4e <HAL_UARTEx_SetRxFifoThreshold+0x74>
 80079f2:	687b      	ldr	r3, [r7, #4]
 80079f4:	2201      	movs	r2, #1
 80079f6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80079fa:	687b      	ldr	r3, [r7, #4]
 80079fc:	2224      	movs	r2, #36	@ 0x24
 80079fe:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007a02:	687b      	ldr	r3, [r7, #4]
 8007a04:	681b      	ldr	r3, [r3, #0]
 8007a06:	681b      	ldr	r3, [r3, #0]
 8007a08:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007a0a:	687b      	ldr	r3, [r7, #4]
 8007a0c:	681b      	ldr	r3, [r3, #0]
 8007a0e:	681a      	ldr	r2, [r3, #0]
 8007a10:	687b      	ldr	r3, [r7, #4]
 8007a12:	681b      	ldr	r3, [r3, #0]
 8007a14:	f022 0201 	bic.w	r2, r2, #1
 8007a18:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8007a1a:	687b      	ldr	r3, [r7, #4]
 8007a1c:	681b      	ldr	r3, [r3, #0]
 8007a1e:	689b      	ldr	r3, [r3, #8]
 8007a20:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 8007a24:	687b      	ldr	r3, [r7, #4]
 8007a26:	681b      	ldr	r3, [r3, #0]
 8007a28:	683a      	ldr	r2, [r7, #0]
 8007a2a:	430a      	orrs	r2, r1
 8007a2c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8007a2e:	6878      	ldr	r0, [r7, #4]
 8007a30:	f000 f812 	bl	8007a58 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007a34:	687b      	ldr	r3, [r7, #4]
 8007a36:	681b      	ldr	r3, [r3, #0]
 8007a38:	68fa      	ldr	r2, [r7, #12]
 8007a3a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007a3c:	687b      	ldr	r3, [r7, #4]
 8007a3e:	2220      	movs	r2, #32
 8007a40:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007a44:	687b      	ldr	r3, [r7, #4]
 8007a46:	2200      	movs	r2, #0
 8007a48:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8007a4c:	2300      	movs	r3, #0
}
 8007a4e:	4618      	mov	r0, r3
 8007a50:	3710      	adds	r7, #16
 8007a52:	46bd      	mov	sp, r7
 8007a54:	bd80      	pop	{r7, pc}
	...

08007a58 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8007a58:	b480      	push	{r7}
 8007a5a:	b085      	sub	sp, #20
 8007a5c:	af00      	add	r7, sp, #0
 8007a5e:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8007a60:	687b      	ldr	r3, [r7, #4]
 8007a62:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007a64:	2b00      	cmp	r3, #0
 8007a66:	d108      	bne.n	8007a7a <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8007a68:	687b      	ldr	r3, [r7, #4]
 8007a6a:	2201      	movs	r2, #1
 8007a6c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 8007a70:	687b      	ldr	r3, [r7, #4]
 8007a72:	2201      	movs	r2, #1
 8007a74:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8007a78:	e031      	b.n	8007ade <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8007a7a:	2310      	movs	r3, #16
 8007a7c:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8007a7e:	2310      	movs	r3, #16
 8007a80:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8007a82:	687b      	ldr	r3, [r7, #4]
 8007a84:	681b      	ldr	r3, [r3, #0]
 8007a86:	689b      	ldr	r3, [r3, #8]
 8007a88:	0e5b      	lsrs	r3, r3, #25
 8007a8a:	b2db      	uxtb	r3, r3
 8007a8c:	f003 0307 	and.w	r3, r3, #7
 8007a90:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8007a92:	687b      	ldr	r3, [r7, #4]
 8007a94:	681b      	ldr	r3, [r3, #0]
 8007a96:	689b      	ldr	r3, [r3, #8]
 8007a98:	0f5b      	lsrs	r3, r3, #29
 8007a9a:	b2db      	uxtb	r3, r3
 8007a9c:	f003 0307 	and.w	r3, r3, #7
 8007aa0:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8007aa2:	7bbb      	ldrb	r3, [r7, #14]
 8007aa4:	7b3a      	ldrb	r2, [r7, #12]
 8007aa6:	4911      	ldr	r1, [pc, #68]	@ (8007aec <UARTEx_SetNbDataToProcess+0x94>)
 8007aa8:	5c8a      	ldrb	r2, [r1, r2]
 8007aaa:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8007aae:	7b3a      	ldrb	r2, [r7, #12]
 8007ab0:	490f      	ldr	r1, [pc, #60]	@ (8007af0 <UARTEx_SetNbDataToProcess+0x98>)
 8007ab2:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8007ab4:	fb93 f3f2 	sdiv	r3, r3, r2
 8007ab8:	b29a      	uxth	r2, r3
 8007aba:	687b      	ldr	r3, [r7, #4]
 8007abc:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8007ac0:	7bfb      	ldrb	r3, [r7, #15]
 8007ac2:	7b7a      	ldrb	r2, [r7, #13]
 8007ac4:	4909      	ldr	r1, [pc, #36]	@ (8007aec <UARTEx_SetNbDataToProcess+0x94>)
 8007ac6:	5c8a      	ldrb	r2, [r1, r2]
 8007ac8:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8007acc:	7b7a      	ldrb	r2, [r7, #13]
 8007ace:	4908      	ldr	r1, [pc, #32]	@ (8007af0 <UARTEx_SetNbDataToProcess+0x98>)
 8007ad0:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8007ad2:	fb93 f3f2 	sdiv	r3, r3, r2
 8007ad6:	b29a      	uxth	r2, r3
 8007ad8:	687b      	ldr	r3, [r7, #4]
 8007ada:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 8007ade:	bf00      	nop
 8007ae0:	3714      	adds	r7, #20
 8007ae2:	46bd      	mov	sp, r7
 8007ae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ae8:	4770      	bx	lr
 8007aea:	bf00      	nop
 8007aec:	0800a890 	.word	0x0800a890
 8007af0:	0800a898 	.word	0x0800a898

08007af4 <__NVIC_SetPriority>:
{
 8007af4:	b480      	push	{r7}
 8007af6:	b083      	sub	sp, #12
 8007af8:	af00      	add	r7, sp, #0
 8007afa:	4603      	mov	r3, r0
 8007afc:	6039      	str	r1, [r7, #0]
 8007afe:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8007b00:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8007b04:	2b00      	cmp	r3, #0
 8007b06:	db0a      	blt.n	8007b1e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007b08:	683b      	ldr	r3, [r7, #0]
 8007b0a:	b2da      	uxtb	r2, r3
 8007b0c:	490c      	ldr	r1, [pc, #48]	@ (8007b40 <__NVIC_SetPriority+0x4c>)
 8007b0e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8007b12:	0112      	lsls	r2, r2, #4
 8007b14:	b2d2      	uxtb	r2, r2
 8007b16:	440b      	add	r3, r1
 8007b18:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8007b1c:	e00a      	b.n	8007b34 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007b1e:	683b      	ldr	r3, [r7, #0]
 8007b20:	b2da      	uxtb	r2, r3
 8007b22:	4908      	ldr	r1, [pc, #32]	@ (8007b44 <__NVIC_SetPriority+0x50>)
 8007b24:	88fb      	ldrh	r3, [r7, #6]
 8007b26:	f003 030f 	and.w	r3, r3, #15
 8007b2a:	3b04      	subs	r3, #4
 8007b2c:	0112      	lsls	r2, r2, #4
 8007b2e:	b2d2      	uxtb	r2, r2
 8007b30:	440b      	add	r3, r1
 8007b32:	761a      	strb	r2, [r3, #24]
}
 8007b34:	bf00      	nop
 8007b36:	370c      	adds	r7, #12
 8007b38:	46bd      	mov	sp, r7
 8007b3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b3e:	4770      	bx	lr
 8007b40:	e000e100 	.word	0xe000e100
 8007b44:	e000ed00 	.word	0xe000ed00

08007b48 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8007b48:	b580      	push	{r7, lr}
 8007b4a:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8007b4c:	4b05      	ldr	r3, [pc, #20]	@ (8007b64 <SysTick_Handler+0x1c>)
 8007b4e:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8007b50:	f001 fcf4 	bl	800953c <xTaskGetSchedulerState>
 8007b54:	4603      	mov	r3, r0
 8007b56:	2b01      	cmp	r3, #1
 8007b58:	d001      	beq.n	8007b5e <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8007b5a:	f002 faed 	bl	800a138 <xPortSysTickHandler>
  }
}
 8007b5e:	bf00      	nop
 8007b60:	bd80      	pop	{r7, pc}
 8007b62:	bf00      	nop
 8007b64:	e000e010 	.word	0xe000e010

08007b68 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8007b68:	b580      	push	{r7, lr}
 8007b6a:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8007b6c:	2100      	movs	r1, #0
 8007b6e:	f06f 0004 	mvn.w	r0, #4
 8007b72:	f7ff ffbf 	bl	8007af4 <__NVIC_SetPriority>
#endif
}
 8007b76:	bf00      	nop
 8007b78:	bd80      	pop	{r7, pc}
	...

08007b7c <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8007b7c:	b480      	push	{r7}
 8007b7e:	b083      	sub	sp, #12
 8007b80:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007b82:	f3ef 8305 	mrs	r3, IPSR
 8007b86:	603b      	str	r3, [r7, #0]
  return(result);
 8007b88:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8007b8a:	2b00      	cmp	r3, #0
 8007b8c:	d003      	beq.n	8007b96 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8007b8e:	f06f 0305 	mvn.w	r3, #5
 8007b92:	607b      	str	r3, [r7, #4]
 8007b94:	e00c      	b.n	8007bb0 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8007b96:	4b0a      	ldr	r3, [pc, #40]	@ (8007bc0 <osKernelInitialize+0x44>)
 8007b98:	681b      	ldr	r3, [r3, #0]
 8007b9a:	2b00      	cmp	r3, #0
 8007b9c:	d105      	bne.n	8007baa <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8007b9e:	4b08      	ldr	r3, [pc, #32]	@ (8007bc0 <osKernelInitialize+0x44>)
 8007ba0:	2201      	movs	r2, #1
 8007ba2:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8007ba4:	2300      	movs	r3, #0
 8007ba6:	607b      	str	r3, [r7, #4]
 8007ba8:	e002      	b.n	8007bb0 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8007baa:	f04f 33ff 	mov.w	r3, #4294967295
 8007bae:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8007bb0:	687b      	ldr	r3, [r7, #4]
}
 8007bb2:	4618      	mov	r0, r3
 8007bb4:	370c      	adds	r7, #12
 8007bb6:	46bd      	mov	sp, r7
 8007bb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bbc:	4770      	bx	lr
 8007bbe:	bf00      	nop
 8007bc0:	240005cc 	.word	0x240005cc

08007bc4 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8007bc4:	b580      	push	{r7, lr}
 8007bc6:	b082      	sub	sp, #8
 8007bc8:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007bca:	f3ef 8305 	mrs	r3, IPSR
 8007bce:	603b      	str	r3, [r7, #0]
  return(result);
 8007bd0:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8007bd2:	2b00      	cmp	r3, #0
 8007bd4:	d003      	beq.n	8007bde <osKernelStart+0x1a>
    stat = osErrorISR;
 8007bd6:	f06f 0305 	mvn.w	r3, #5
 8007bda:	607b      	str	r3, [r7, #4]
 8007bdc:	e010      	b.n	8007c00 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8007bde:	4b0b      	ldr	r3, [pc, #44]	@ (8007c0c <osKernelStart+0x48>)
 8007be0:	681b      	ldr	r3, [r3, #0]
 8007be2:	2b01      	cmp	r3, #1
 8007be4:	d109      	bne.n	8007bfa <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8007be6:	f7ff ffbf 	bl	8007b68 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8007bea:	4b08      	ldr	r3, [pc, #32]	@ (8007c0c <osKernelStart+0x48>)
 8007bec:	2202      	movs	r2, #2
 8007bee:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8007bf0:	f001 f840 	bl	8008c74 <vTaskStartScheduler>
      stat = osOK;
 8007bf4:	2300      	movs	r3, #0
 8007bf6:	607b      	str	r3, [r7, #4]
 8007bf8:	e002      	b.n	8007c00 <osKernelStart+0x3c>
    } else {
      stat = osError;
 8007bfa:	f04f 33ff 	mov.w	r3, #4294967295
 8007bfe:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8007c00:	687b      	ldr	r3, [r7, #4]
}
 8007c02:	4618      	mov	r0, r3
 8007c04:	3708      	adds	r7, #8
 8007c06:	46bd      	mov	sp, r7
 8007c08:	bd80      	pop	{r7, pc}
 8007c0a:	bf00      	nop
 8007c0c:	240005cc 	.word	0x240005cc

08007c10 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8007c10:	b580      	push	{r7, lr}
 8007c12:	b08e      	sub	sp, #56	@ 0x38
 8007c14:	af04      	add	r7, sp, #16
 8007c16:	60f8      	str	r0, [r7, #12]
 8007c18:	60b9      	str	r1, [r7, #8]
 8007c1a:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8007c1c:	2300      	movs	r3, #0
 8007c1e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007c20:	f3ef 8305 	mrs	r3, IPSR
 8007c24:	617b      	str	r3, [r7, #20]
  return(result);
 8007c26:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8007c28:	2b00      	cmp	r3, #0
 8007c2a:	d17e      	bne.n	8007d2a <osThreadNew+0x11a>
 8007c2c:	68fb      	ldr	r3, [r7, #12]
 8007c2e:	2b00      	cmp	r3, #0
 8007c30:	d07b      	beq.n	8007d2a <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8007c32:	2380      	movs	r3, #128	@ 0x80
 8007c34:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8007c36:	2318      	movs	r3, #24
 8007c38:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8007c3a:	2300      	movs	r3, #0
 8007c3c:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 8007c3e:	f04f 33ff 	mov.w	r3, #4294967295
 8007c42:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8007c44:	687b      	ldr	r3, [r7, #4]
 8007c46:	2b00      	cmp	r3, #0
 8007c48:	d045      	beq.n	8007cd6 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8007c4a:	687b      	ldr	r3, [r7, #4]
 8007c4c:	681b      	ldr	r3, [r3, #0]
 8007c4e:	2b00      	cmp	r3, #0
 8007c50:	d002      	beq.n	8007c58 <osThreadNew+0x48>
        name = attr->name;
 8007c52:	687b      	ldr	r3, [r7, #4]
 8007c54:	681b      	ldr	r3, [r3, #0]
 8007c56:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 8007c58:	687b      	ldr	r3, [r7, #4]
 8007c5a:	699b      	ldr	r3, [r3, #24]
 8007c5c:	2b00      	cmp	r3, #0
 8007c5e:	d002      	beq.n	8007c66 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8007c60:	687b      	ldr	r3, [r7, #4]
 8007c62:	699b      	ldr	r3, [r3, #24]
 8007c64:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8007c66:	69fb      	ldr	r3, [r7, #28]
 8007c68:	2b00      	cmp	r3, #0
 8007c6a:	d008      	beq.n	8007c7e <osThreadNew+0x6e>
 8007c6c:	69fb      	ldr	r3, [r7, #28]
 8007c6e:	2b38      	cmp	r3, #56	@ 0x38
 8007c70:	d805      	bhi.n	8007c7e <osThreadNew+0x6e>
 8007c72:	687b      	ldr	r3, [r7, #4]
 8007c74:	685b      	ldr	r3, [r3, #4]
 8007c76:	f003 0301 	and.w	r3, r3, #1
 8007c7a:	2b00      	cmp	r3, #0
 8007c7c:	d001      	beq.n	8007c82 <osThreadNew+0x72>
        return (NULL);
 8007c7e:	2300      	movs	r3, #0
 8007c80:	e054      	b.n	8007d2c <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8007c82:	687b      	ldr	r3, [r7, #4]
 8007c84:	695b      	ldr	r3, [r3, #20]
 8007c86:	2b00      	cmp	r3, #0
 8007c88:	d003      	beq.n	8007c92 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8007c8a:	687b      	ldr	r3, [r7, #4]
 8007c8c:	695b      	ldr	r3, [r3, #20]
 8007c8e:	089b      	lsrs	r3, r3, #2
 8007c90:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8007c92:	687b      	ldr	r3, [r7, #4]
 8007c94:	689b      	ldr	r3, [r3, #8]
 8007c96:	2b00      	cmp	r3, #0
 8007c98:	d00e      	beq.n	8007cb8 <osThreadNew+0xa8>
 8007c9a:	687b      	ldr	r3, [r7, #4]
 8007c9c:	68db      	ldr	r3, [r3, #12]
 8007c9e:	2ba7      	cmp	r3, #167	@ 0xa7
 8007ca0:	d90a      	bls.n	8007cb8 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8007ca2:	687b      	ldr	r3, [r7, #4]
 8007ca4:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8007ca6:	2b00      	cmp	r3, #0
 8007ca8:	d006      	beq.n	8007cb8 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8007caa:	687b      	ldr	r3, [r7, #4]
 8007cac:	695b      	ldr	r3, [r3, #20]
 8007cae:	2b00      	cmp	r3, #0
 8007cb0:	d002      	beq.n	8007cb8 <osThreadNew+0xa8>
        mem = 1;
 8007cb2:	2301      	movs	r3, #1
 8007cb4:	61bb      	str	r3, [r7, #24]
 8007cb6:	e010      	b.n	8007cda <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8007cb8:	687b      	ldr	r3, [r7, #4]
 8007cba:	689b      	ldr	r3, [r3, #8]
 8007cbc:	2b00      	cmp	r3, #0
 8007cbe:	d10c      	bne.n	8007cda <osThreadNew+0xca>
 8007cc0:	687b      	ldr	r3, [r7, #4]
 8007cc2:	68db      	ldr	r3, [r3, #12]
 8007cc4:	2b00      	cmp	r3, #0
 8007cc6:	d108      	bne.n	8007cda <osThreadNew+0xca>
 8007cc8:	687b      	ldr	r3, [r7, #4]
 8007cca:	691b      	ldr	r3, [r3, #16]
 8007ccc:	2b00      	cmp	r3, #0
 8007cce:	d104      	bne.n	8007cda <osThreadNew+0xca>
          mem = 0;
 8007cd0:	2300      	movs	r3, #0
 8007cd2:	61bb      	str	r3, [r7, #24]
 8007cd4:	e001      	b.n	8007cda <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8007cd6:	2300      	movs	r3, #0
 8007cd8:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8007cda:	69bb      	ldr	r3, [r7, #24]
 8007cdc:	2b01      	cmp	r3, #1
 8007cde:	d110      	bne.n	8007d02 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8007ce0:	687b      	ldr	r3, [r7, #4]
 8007ce2:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8007ce4:	687a      	ldr	r2, [r7, #4]
 8007ce6:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8007ce8:	9202      	str	r2, [sp, #8]
 8007cea:	9301      	str	r3, [sp, #4]
 8007cec:	69fb      	ldr	r3, [r7, #28]
 8007cee:	9300      	str	r3, [sp, #0]
 8007cf0:	68bb      	ldr	r3, [r7, #8]
 8007cf2:	6a3a      	ldr	r2, [r7, #32]
 8007cf4:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8007cf6:	68f8      	ldr	r0, [r7, #12]
 8007cf8:	f000 fdfe 	bl	80088f8 <xTaskCreateStatic>
 8007cfc:	4603      	mov	r3, r0
 8007cfe:	613b      	str	r3, [r7, #16]
 8007d00:	e013      	b.n	8007d2a <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8007d02:	69bb      	ldr	r3, [r7, #24]
 8007d04:	2b00      	cmp	r3, #0
 8007d06:	d110      	bne.n	8007d2a <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8007d08:	6a3b      	ldr	r3, [r7, #32]
 8007d0a:	b29a      	uxth	r2, r3
 8007d0c:	f107 0310 	add.w	r3, r7, #16
 8007d10:	9301      	str	r3, [sp, #4]
 8007d12:	69fb      	ldr	r3, [r7, #28]
 8007d14:	9300      	str	r3, [sp, #0]
 8007d16:	68bb      	ldr	r3, [r7, #8]
 8007d18:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8007d1a:	68f8      	ldr	r0, [r7, #12]
 8007d1c:	f000 fe4c 	bl	80089b8 <xTaskCreate>
 8007d20:	4603      	mov	r3, r0
 8007d22:	2b01      	cmp	r3, #1
 8007d24:	d001      	beq.n	8007d2a <osThreadNew+0x11a>
            hTask = NULL;
 8007d26:	2300      	movs	r3, #0
 8007d28:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8007d2a:	693b      	ldr	r3, [r7, #16]
}
 8007d2c:	4618      	mov	r0, r3
 8007d2e:	3728      	adds	r7, #40	@ 0x28
 8007d30:	46bd      	mov	sp, r7
 8007d32:	bd80      	pop	{r7, pc}

08007d34 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8007d34:	b480      	push	{r7}
 8007d36:	b085      	sub	sp, #20
 8007d38:	af00      	add	r7, sp, #0
 8007d3a:	60f8      	str	r0, [r7, #12]
 8007d3c:	60b9      	str	r1, [r7, #8]
 8007d3e:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8007d40:	68fb      	ldr	r3, [r7, #12]
 8007d42:	4a07      	ldr	r2, [pc, #28]	@ (8007d60 <vApplicationGetIdleTaskMemory+0x2c>)
 8007d44:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8007d46:	68bb      	ldr	r3, [r7, #8]
 8007d48:	4a06      	ldr	r2, [pc, #24]	@ (8007d64 <vApplicationGetIdleTaskMemory+0x30>)
 8007d4a:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8007d4c:	687b      	ldr	r3, [r7, #4]
 8007d4e:	2280      	movs	r2, #128	@ 0x80
 8007d50:	601a      	str	r2, [r3, #0]
}
 8007d52:	bf00      	nop
 8007d54:	3714      	adds	r7, #20
 8007d56:	46bd      	mov	sp, r7
 8007d58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d5c:	4770      	bx	lr
 8007d5e:	bf00      	nop
 8007d60:	240005d0 	.word	0x240005d0
 8007d64:	24000678 	.word	0x24000678

08007d68 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8007d68:	b480      	push	{r7}
 8007d6a:	b085      	sub	sp, #20
 8007d6c:	af00      	add	r7, sp, #0
 8007d6e:	60f8      	str	r0, [r7, #12]
 8007d70:	60b9      	str	r1, [r7, #8]
 8007d72:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8007d74:	68fb      	ldr	r3, [r7, #12]
 8007d76:	4a07      	ldr	r2, [pc, #28]	@ (8007d94 <vApplicationGetTimerTaskMemory+0x2c>)
 8007d78:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8007d7a:	68bb      	ldr	r3, [r7, #8]
 8007d7c:	4a06      	ldr	r2, [pc, #24]	@ (8007d98 <vApplicationGetTimerTaskMemory+0x30>)
 8007d7e:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8007d80:	687b      	ldr	r3, [r7, #4]
 8007d82:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8007d86:	601a      	str	r2, [r3, #0]
}
 8007d88:	bf00      	nop
 8007d8a:	3714      	adds	r7, #20
 8007d8c:	46bd      	mov	sp, r7
 8007d8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d92:	4770      	bx	lr
 8007d94:	24000878 	.word	0x24000878
 8007d98:	24000920 	.word	0x24000920

08007d9c <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8007d9c:	b480      	push	{r7}
 8007d9e:	b083      	sub	sp, #12
 8007da0:	af00      	add	r7, sp, #0
 8007da2:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007da4:	687b      	ldr	r3, [r7, #4]
 8007da6:	f103 0208 	add.w	r2, r3, #8
 8007daa:	687b      	ldr	r3, [r7, #4]
 8007dac:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8007dae:	687b      	ldr	r3, [r7, #4]
 8007db0:	f04f 32ff 	mov.w	r2, #4294967295
 8007db4:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007db6:	687b      	ldr	r3, [r7, #4]
 8007db8:	f103 0208 	add.w	r2, r3, #8
 8007dbc:	687b      	ldr	r3, [r7, #4]
 8007dbe:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007dc0:	687b      	ldr	r3, [r7, #4]
 8007dc2:	f103 0208 	add.w	r2, r3, #8
 8007dc6:	687b      	ldr	r3, [r7, #4]
 8007dc8:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8007dca:	687b      	ldr	r3, [r7, #4]
 8007dcc:	2200      	movs	r2, #0
 8007dce:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8007dd0:	bf00      	nop
 8007dd2:	370c      	adds	r7, #12
 8007dd4:	46bd      	mov	sp, r7
 8007dd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dda:	4770      	bx	lr

08007ddc <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8007ddc:	b480      	push	{r7}
 8007dde:	b083      	sub	sp, #12
 8007de0:	af00      	add	r7, sp, #0
 8007de2:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8007de4:	687b      	ldr	r3, [r7, #4]
 8007de6:	2200      	movs	r2, #0
 8007de8:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8007dea:	bf00      	nop
 8007dec:	370c      	adds	r7, #12
 8007dee:	46bd      	mov	sp, r7
 8007df0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007df4:	4770      	bx	lr

08007df6 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8007df6:	b480      	push	{r7}
 8007df8:	b085      	sub	sp, #20
 8007dfa:	af00      	add	r7, sp, #0
 8007dfc:	6078      	str	r0, [r7, #4]
 8007dfe:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8007e00:	687b      	ldr	r3, [r7, #4]
 8007e02:	685b      	ldr	r3, [r3, #4]
 8007e04:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8007e06:	683b      	ldr	r3, [r7, #0]
 8007e08:	68fa      	ldr	r2, [r7, #12]
 8007e0a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8007e0c:	68fb      	ldr	r3, [r7, #12]
 8007e0e:	689a      	ldr	r2, [r3, #8]
 8007e10:	683b      	ldr	r3, [r7, #0]
 8007e12:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8007e14:	68fb      	ldr	r3, [r7, #12]
 8007e16:	689b      	ldr	r3, [r3, #8]
 8007e18:	683a      	ldr	r2, [r7, #0]
 8007e1a:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8007e1c:	68fb      	ldr	r3, [r7, #12]
 8007e1e:	683a      	ldr	r2, [r7, #0]
 8007e20:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8007e22:	683b      	ldr	r3, [r7, #0]
 8007e24:	687a      	ldr	r2, [r7, #4]
 8007e26:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8007e28:	687b      	ldr	r3, [r7, #4]
 8007e2a:	681b      	ldr	r3, [r3, #0]
 8007e2c:	1c5a      	adds	r2, r3, #1
 8007e2e:	687b      	ldr	r3, [r7, #4]
 8007e30:	601a      	str	r2, [r3, #0]
}
 8007e32:	bf00      	nop
 8007e34:	3714      	adds	r7, #20
 8007e36:	46bd      	mov	sp, r7
 8007e38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e3c:	4770      	bx	lr

08007e3e <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8007e3e:	b480      	push	{r7}
 8007e40:	b085      	sub	sp, #20
 8007e42:	af00      	add	r7, sp, #0
 8007e44:	6078      	str	r0, [r7, #4]
 8007e46:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8007e48:	683b      	ldr	r3, [r7, #0]
 8007e4a:	681b      	ldr	r3, [r3, #0]
 8007e4c:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8007e4e:	68bb      	ldr	r3, [r7, #8]
 8007e50:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007e54:	d103      	bne.n	8007e5e <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8007e56:	687b      	ldr	r3, [r7, #4]
 8007e58:	691b      	ldr	r3, [r3, #16]
 8007e5a:	60fb      	str	r3, [r7, #12]
 8007e5c:	e00c      	b.n	8007e78 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8007e5e:	687b      	ldr	r3, [r7, #4]
 8007e60:	3308      	adds	r3, #8
 8007e62:	60fb      	str	r3, [r7, #12]
 8007e64:	e002      	b.n	8007e6c <vListInsert+0x2e>
 8007e66:	68fb      	ldr	r3, [r7, #12]
 8007e68:	685b      	ldr	r3, [r3, #4]
 8007e6a:	60fb      	str	r3, [r7, #12]
 8007e6c:	68fb      	ldr	r3, [r7, #12]
 8007e6e:	685b      	ldr	r3, [r3, #4]
 8007e70:	681b      	ldr	r3, [r3, #0]
 8007e72:	68ba      	ldr	r2, [r7, #8]
 8007e74:	429a      	cmp	r2, r3
 8007e76:	d2f6      	bcs.n	8007e66 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8007e78:	68fb      	ldr	r3, [r7, #12]
 8007e7a:	685a      	ldr	r2, [r3, #4]
 8007e7c:	683b      	ldr	r3, [r7, #0]
 8007e7e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8007e80:	683b      	ldr	r3, [r7, #0]
 8007e82:	685b      	ldr	r3, [r3, #4]
 8007e84:	683a      	ldr	r2, [r7, #0]
 8007e86:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8007e88:	683b      	ldr	r3, [r7, #0]
 8007e8a:	68fa      	ldr	r2, [r7, #12]
 8007e8c:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8007e8e:	68fb      	ldr	r3, [r7, #12]
 8007e90:	683a      	ldr	r2, [r7, #0]
 8007e92:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8007e94:	683b      	ldr	r3, [r7, #0]
 8007e96:	687a      	ldr	r2, [r7, #4]
 8007e98:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8007e9a:	687b      	ldr	r3, [r7, #4]
 8007e9c:	681b      	ldr	r3, [r3, #0]
 8007e9e:	1c5a      	adds	r2, r3, #1
 8007ea0:	687b      	ldr	r3, [r7, #4]
 8007ea2:	601a      	str	r2, [r3, #0]
}
 8007ea4:	bf00      	nop
 8007ea6:	3714      	adds	r7, #20
 8007ea8:	46bd      	mov	sp, r7
 8007eaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007eae:	4770      	bx	lr

08007eb0 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8007eb0:	b480      	push	{r7}
 8007eb2:	b085      	sub	sp, #20
 8007eb4:	af00      	add	r7, sp, #0
 8007eb6:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8007eb8:	687b      	ldr	r3, [r7, #4]
 8007eba:	691b      	ldr	r3, [r3, #16]
 8007ebc:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8007ebe:	687b      	ldr	r3, [r7, #4]
 8007ec0:	685b      	ldr	r3, [r3, #4]
 8007ec2:	687a      	ldr	r2, [r7, #4]
 8007ec4:	6892      	ldr	r2, [r2, #8]
 8007ec6:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8007ec8:	687b      	ldr	r3, [r7, #4]
 8007eca:	689b      	ldr	r3, [r3, #8]
 8007ecc:	687a      	ldr	r2, [r7, #4]
 8007ece:	6852      	ldr	r2, [r2, #4]
 8007ed0:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8007ed2:	68fb      	ldr	r3, [r7, #12]
 8007ed4:	685b      	ldr	r3, [r3, #4]
 8007ed6:	687a      	ldr	r2, [r7, #4]
 8007ed8:	429a      	cmp	r2, r3
 8007eda:	d103      	bne.n	8007ee4 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8007edc:	687b      	ldr	r3, [r7, #4]
 8007ede:	689a      	ldr	r2, [r3, #8]
 8007ee0:	68fb      	ldr	r3, [r7, #12]
 8007ee2:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8007ee4:	687b      	ldr	r3, [r7, #4]
 8007ee6:	2200      	movs	r2, #0
 8007ee8:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8007eea:	68fb      	ldr	r3, [r7, #12]
 8007eec:	681b      	ldr	r3, [r3, #0]
 8007eee:	1e5a      	subs	r2, r3, #1
 8007ef0:	68fb      	ldr	r3, [r7, #12]
 8007ef2:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8007ef4:	68fb      	ldr	r3, [r7, #12]
 8007ef6:	681b      	ldr	r3, [r3, #0]
}
 8007ef8:	4618      	mov	r0, r3
 8007efa:	3714      	adds	r7, #20
 8007efc:	46bd      	mov	sp, r7
 8007efe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f02:	4770      	bx	lr

08007f04 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8007f04:	b580      	push	{r7, lr}
 8007f06:	b084      	sub	sp, #16
 8007f08:	af00      	add	r7, sp, #0
 8007f0a:	6078      	str	r0, [r7, #4]
 8007f0c:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8007f0e:	687b      	ldr	r3, [r7, #4]
 8007f10:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8007f12:	68fb      	ldr	r3, [r7, #12]
 8007f14:	2b00      	cmp	r3, #0
 8007f16:	d10b      	bne.n	8007f30 <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8007f18:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007f1c:	f383 8811 	msr	BASEPRI, r3
 8007f20:	f3bf 8f6f 	isb	sy
 8007f24:	f3bf 8f4f 	dsb	sy
 8007f28:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8007f2a:	bf00      	nop
 8007f2c:	bf00      	nop
 8007f2e:	e7fd      	b.n	8007f2c <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8007f30:	f002 f872 	bl	800a018 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8007f34:	68fb      	ldr	r3, [r7, #12]
 8007f36:	681a      	ldr	r2, [r3, #0]
 8007f38:	68fb      	ldr	r3, [r7, #12]
 8007f3a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007f3c:	68f9      	ldr	r1, [r7, #12]
 8007f3e:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8007f40:	fb01 f303 	mul.w	r3, r1, r3
 8007f44:	441a      	add	r2, r3
 8007f46:	68fb      	ldr	r3, [r7, #12]
 8007f48:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8007f4a:	68fb      	ldr	r3, [r7, #12]
 8007f4c:	2200      	movs	r2, #0
 8007f4e:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8007f50:	68fb      	ldr	r3, [r7, #12]
 8007f52:	681a      	ldr	r2, [r3, #0]
 8007f54:	68fb      	ldr	r3, [r7, #12]
 8007f56:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8007f58:	68fb      	ldr	r3, [r7, #12]
 8007f5a:	681a      	ldr	r2, [r3, #0]
 8007f5c:	68fb      	ldr	r3, [r7, #12]
 8007f5e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007f60:	3b01      	subs	r3, #1
 8007f62:	68f9      	ldr	r1, [r7, #12]
 8007f64:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8007f66:	fb01 f303 	mul.w	r3, r1, r3
 8007f6a:	441a      	add	r2, r3
 8007f6c:	68fb      	ldr	r3, [r7, #12]
 8007f6e:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8007f70:	68fb      	ldr	r3, [r7, #12]
 8007f72:	22ff      	movs	r2, #255	@ 0xff
 8007f74:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8007f78:	68fb      	ldr	r3, [r7, #12]
 8007f7a:	22ff      	movs	r2, #255	@ 0xff
 8007f7c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 8007f80:	683b      	ldr	r3, [r7, #0]
 8007f82:	2b00      	cmp	r3, #0
 8007f84:	d114      	bne.n	8007fb0 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007f86:	68fb      	ldr	r3, [r7, #12]
 8007f88:	691b      	ldr	r3, [r3, #16]
 8007f8a:	2b00      	cmp	r3, #0
 8007f8c:	d01a      	beq.n	8007fc4 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007f8e:	68fb      	ldr	r3, [r7, #12]
 8007f90:	3310      	adds	r3, #16
 8007f92:	4618      	mov	r0, r3
 8007f94:	f001 f90c 	bl	80091b0 <xTaskRemoveFromEventList>
 8007f98:	4603      	mov	r3, r0
 8007f9a:	2b00      	cmp	r3, #0
 8007f9c:	d012      	beq.n	8007fc4 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8007f9e:	4b0d      	ldr	r3, [pc, #52]	@ (8007fd4 <xQueueGenericReset+0xd0>)
 8007fa0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007fa4:	601a      	str	r2, [r3, #0]
 8007fa6:	f3bf 8f4f 	dsb	sy
 8007faa:	f3bf 8f6f 	isb	sy
 8007fae:	e009      	b.n	8007fc4 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8007fb0:	68fb      	ldr	r3, [r7, #12]
 8007fb2:	3310      	adds	r3, #16
 8007fb4:	4618      	mov	r0, r3
 8007fb6:	f7ff fef1 	bl	8007d9c <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8007fba:	68fb      	ldr	r3, [r7, #12]
 8007fbc:	3324      	adds	r3, #36	@ 0x24
 8007fbe:	4618      	mov	r0, r3
 8007fc0:	f7ff feec 	bl	8007d9c <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8007fc4:	f002 f85a 	bl	800a07c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8007fc8:	2301      	movs	r3, #1
}
 8007fca:	4618      	mov	r0, r3
 8007fcc:	3710      	adds	r7, #16
 8007fce:	46bd      	mov	sp, r7
 8007fd0:	bd80      	pop	{r7, pc}
 8007fd2:	bf00      	nop
 8007fd4:	e000ed04 	.word	0xe000ed04

08007fd8 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8007fd8:	b580      	push	{r7, lr}
 8007fda:	b08e      	sub	sp, #56	@ 0x38
 8007fdc:	af02      	add	r7, sp, #8
 8007fde:	60f8      	str	r0, [r7, #12]
 8007fe0:	60b9      	str	r1, [r7, #8]
 8007fe2:	607a      	str	r2, [r7, #4]
 8007fe4:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8007fe6:	68fb      	ldr	r3, [r7, #12]
 8007fe8:	2b00      	cmp	r3, #0
 8007fea:	d10b      	bne.n	8008004 <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 8007fec:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007ff0:	f383 8811 	msr	BASEPRI, r3
 8007ff4:	f3bf 8f6f 	isb	sy
 8007ff8:	f3bf 8f4f 	dsb	sy
 8007ffc:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8007ffe:	bf00      	nop
 8008000:	bf00      	nop
 8008002:	e7fd      	b.n	8008000 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8008004:	683b      	ldr	r3, [r7, #0]
 8008006:	2b00      	cmp	r3, #0
 8008008:	d10b      	bne.n	8008022 <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 800800a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800800e:	f383 8811 	msr	BASEPRI, r3
 8008012:	f3bf 8f6f 	isb	sy
 8008016:	f3bf 8f4f 	dsb	sy
 800801a:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800801c:	bf00      	nop
 800801e:	bf00      	nop
 8008020:	e7fd      	b.n	800801e <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8008022:	687b      	ldr	r3, [r7, #4]
 8008024:	2b00      	cmp	r3, #0
 8008026:	d002      	beq.n	800802e <xQueueGenericCreateStatic+0x56>
 8008028:	68bb      	ldr	r3, [r7, #8]
 800802a:	2b00      	cmp	r3, #0
 800802c:	d001      	beq.n	8008032 <xQueueGenericCreateStatic+0x5a>
 800802e:	2301      	movs	r3, #1
 8008030:	e000      	b.n	8008034 <xQueueGenericCreateStatic+0x5c>
 8008032:	2300      	movs	r3, #0
 8008034:	2b00      	cmp	r3, #0
 8008036:	d10b      	bne.n	8008050 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 8008038:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800803c:	f383 8811 	msr	BASEPRI, r3
 8008040:	f3bf 8f6f 	isb	sy
 8008044:	f3bf 8f4f 	dsb	sy
 8008048:	623b      	str	r3, [r7, #32]
}
 800804a:	bf00      	nop
 800804c:	bf00      	nop
 800804e:	e7fd      	b.n	800804c <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8008050:	687b      	ldr	r3, [r7, #4]
 8008052:	2b00      	cmp	r3, #0
 8008054:	d102      	bne.n	800805c <xQueueGenericCreateStatic+0x84>
 8008056:	68bb      	ldr	r3, [r7, #8]
 8008058:	2b00      	cmp	r3, #0
 800805a:	d101      	bne.n	8008060 <xQueueGenericCreateStatic+0x88>
 800805c:	2301      	movs	r3, #1
 800805e:	e000      	b.n	8008062 <xQueueGenericCreateStatic+0x8a>
 8008060:	2300      	movs	r3, #0
 8008062:	2b00      	cmp	r3, #0
 8008064:	d10b      	bne.n	800807e <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 8008066:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800806a:	f383 8811 	msr	BASEPRI, r3
 800806e:	f3bf 8f6f 	isb	sy
 8008072:	f3bf 8f4f 	dsb	sy
 8008076:	61fb      	str	r3, [r7, #28]
}
 8008078:	bf00      	nop
 800807a:	bf00      	nop
 800807c:	e7fd      	b.n	800807a <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800807e:	2350      	movs	r3, #80	@ 0x50
 8008080:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8008082:	697b      	ldr	r3, [r7, #20]
 8008084:	2b50      	cmp	r3, #80	@ 0x50
 8008086:	d00b      	beq.n	80080a0 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 8008088:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800808c:	f383 8811 	msr	BASEPRI, r3
 8008090:	f3bf 8f6f 	isb	sy
 8008094:	f3bf 8f4f 	dsb	sy
 8008098:	61bb      	str	r3, [r7, #24]
}
 800809a:	bf00      	nop
 800809c:	bf00      	nop
 800809e:	e7fd      	b.n	800809c <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 80080a0:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80080a2:	683b      	ldr	r3, [r7, #0]
 80080a4:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 80080a6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80080a8:	2b00      	cmp	r3, #0
 80080aa:	d00d      	beq.n	80080c8 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80080ac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80080ae:	2201      	movs	r2, #1
 80080b0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80080b4:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 80080b8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80080ba:	9300      	str	r3, [sp, #0]
 80080bc:	4613      	mov	r3, r2
 80080be:	687a      	ldr	r2, [r7, #4]
 80080c0:	68b9      	ldr	r1, [r7, #8]
 80080c2:	68f8      	ldr	r0, [r7, #12]
 80080c4:	f000 f805 	bl	80080d2 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80080c8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 80080ca:	4618      	mov	r0, r3
 80080cc:	3730      	adds	r7, #48	@ 0x30
 80080ce:	46bd      	mov	sp, r7
 80080d0:	bd80      	pop	{r7, pc}

080080d2 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80080d2:	b580      	push	{r7, lr}
 80080d4:	b084      	sub	sp, #16
 80080d6:	af00      	add	r7, sp, #0
 80080d8:	60f8      	str	r0, [r7, #12]
 80080da:	60b9      	str	r1, [r7, #8]
 80080dc:	607a      	str	r2, [r7, #4]
 80080de:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80080e0:	68bb      	ldr	r3, [r7, #8]
 80080e2:	2b00      	cmp	r3, #0
 80080e4:	d103      	bne.n	80080ee <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80080e6:	69bb      	ldr	r3, [r7, #24]
 80080e8:	69ba      	ldr	r2, [r7, #24]
 80080ea:	601a      	str	r2, [r3, #0]
 80080ec:	e002      	b.n	80080f4 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80080ee:	69bb      	ldr	r3, [r7, #24]
 80080f0:	687a      	ldr	r2, [r7, #4]
 80080f2:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80080f4:	69bb      	ldr	r3, [r7, #24]
 80080f6:	68fa      	ldr	r2, [r7, #12]
 80080f8:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80080fa:	69bb      	ldr	r3, [r7, #24]
 80080fc:	68ba      	ldr	r2, [r7, #8]
 80080fe:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8008100:	2101      	movs	r1, #1
 8008102:	69b8      	ldr	r0, [r7, #24]
 8008104:	f7ff fefe 	bl	8007f04 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8008108:	69bb      	ldr	r3, [r7, #24]
 800810a:	78fa      	ldrb	r2, [r7, #3]
 800810c:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8008110:	bf00      	nop
 8008112:	3710      	adds	r7, #16
 8008114:	46bd      	mov	sp, r7
 8008116:	bd80      	pop	{r7, pc}

08008118 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8008118:	b580      	push	{r7, lr}
 800811a:	b08e      	sub	sp, #56	@ 0x38
 800811c:	af00      	add	r7, sp, #0
 800811e:	60f8      	str	r0, [r7, #12]
 8008120:	60b9      	str	r1, [r7, #8]
 8008122:	607a      	str	r2, [r7, #4]
 8008124:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8008126:	2300      	movs	r3, #0
 8008128:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800812a:	68fb      	ldr	r3, [r7, #12]
 800812c:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 800812e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008130:	2b00      	cmp	r3, #0
 8008132:	d10b      	bne.n	800814c <xQueueGenericSend+0x34>
	__asm volatile
 8008134:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008138:	f383 8811 	msr	BASEPRI, r3
 800813c:	f3bf 8f6f 	isb	sy
 8008140:	f3bf 8f4f 	dsb	sy
 8008144:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8008146:	bf00      	nop
 8008148:	bf00      	nop
 800814a:	e7fd      	b.n	8008148 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800814c:	68bb      	ldr	r3, [r7, #8]
 800814e:	2b00      	cmp	r3, #0
 8008150:	d103      	bne.n	800815a <xQueueGenericSend+0x42>
 8008152:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008154:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008156:	2b00      	cmp	r3, #0
 8008158:	d101      	bne.n	800815e <xQueueGenericSend+0x46>
 800815a:	2301      	movs	r3, #1
 800815c:	e000      	b.n	8008160 <xQueueGenericSend+0x48>
 800815e:	2300      	movs	r3, #0
 8008160:	2b00      	cmp	r3, #0
 8008162:	d10b      	bne.n	800817c <xQueueGenericSend+0x64>
	__asm volatile
 8008164:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008168:	f383 8811 	msr	BASEPRI, r3
 800816c:	f3bf 8f6f 	isb	sy
 8008170:	f3bf 8f4f 	dsb	sy
 8008174:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8008176:	bf00      	nop
 8008178:	bf00      	nop
 800817a:	e7fd      	b.n	8008178 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800817c:	683b      	ldr	r3, [r7, #0]
 800817e:	2b02      	cmp	r3, #2
 8008180:	d103      	bne.n	800818a <xQueueGenericSend+0x72>
 8008182:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008184:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008186:	2b01      	cmp	r3, #1
 8008188:	d101      	bne.n	800818e <xQueueGenericSend+0x76>
 800818a:	2301      	movs	r3, #1
 800818c:	e000      	b.n	8008190 <xQueueGenericSend+0x78>
 800818e:	2300      	movs	r3, #0
 8008190:	2b00      	cmp	r3, #0
 8008192:	d10b      	bne.n	80081ac <xQueueGenericSend+0x94>
	__asm volatile
 8008194:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008198:	f383 8811 	msr	BASEPRI, r3
 800819c:	f3bf 8f6f 	isb	sy
 80081a0:	f3bf 8f4f 	dsb	sy
 80081a4:	623b      	str	r3, [r7, #32]
}
 80081a6:	bf00      	nop
 80081a8:	bf00      	nop
 80081aa:	e7fd      	b.n	80081a8 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80081ac:	f001 f9c6 	bl	800953c <xTaskGetSchedulerState>
 80081b0:	4603      	mov	r3, r0
 80081b2:	2b00      	cmp	r3, #0
 80081b4:	d102      	bne.n	80081bc <xQueueGenericSend+0xa4>
 80081b6:	687b      	ldr	r3, [r7, #4]
 80081b8:	2b00      	cmp	r3, #0
 80081ba:	d101      	bne.n	80081c0 <xQueueGenericSend+0xa8>
 80081bc:	2301      	movs	r3, #1
 80081be:	e000      	b.n	80081c2 <xQueueGenericSend+0xaa>
 80081c0:	2300      	movs	r3, #0
 80081c2:	2b00      	cmp	r3, #0
 80081c4:	d10b      	bne.n	80081de <xQueueGenericSend+0xc6>
	__asm volatile
 80081c6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80081ca:	f383 8811 	msr	BASEPRI, r3
 80081ce:	f3bf 8f6f 	isb	sy
 80081d2:	f3bf 8f4f 	dsb	sy
 80081d6:	61fb      	str	r3, [r7, #28]
}
 80081d8:	bf00      	nop
 80081da:	bf00      	nop
 80081dc:	e7fd      	b.n	80081da <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80081de:	f001 ff1b 	bl	800a018 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80081e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80081e4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80081e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80081e8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80081ea:	429a      	cmp	r2, r3
 80081ec:	d302      	bcc.n	80081f4 <xQueueGenericSend+0xdc>
 80081ee:	683b      	ldr	r3, [r7, #0]
 80081f0:	2b02      	cmp	r3, #2
 80081f2:	d129      	bne.n	8008248 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80081f4:	683a      	ldr	r2, [r7, #0]
 80081f6:	68b9      	ldr	r1, [r7, #8]
 80081f8:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80081fa:	f000 fa0f 	bl	800861c <prvCopyDataToQueue>
 80081fe:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8008200:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008202:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008204:	2b00      	cmp	r3, #0
 8008206:	d010      	beq.n	800822a <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008208:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800820a:	3324      	adds	r3, #36	@ 0x24
 800820c:	4618      	mov	r0, r3
 800820e:	f000 ffcf 	bl	80091b0 <xTaskRemoveFromEventList>
 8008212:	4603      	mov	r3, r0
 8008214:	2b00      	cmp	r3, #0
 8008216:	d013      	beq.n	8008240 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8008218:	4b3f      	ldr	r3, [pc, #252]	@ (8008318 <xQueueGenericSend+0x200>)
 800821a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800821e:	601a      	str	r2, [r3, #0]
 8008220:	f3bf 8f4f 	dsb	sy
 8008224:	f3bf 8f6f 	isb	sy
 8008228:	e00a      	b.n	8008240 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800822a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800822c:	2b00      	cmp	r3, #0
 800822e:	d007      	beq.n	8008240 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8008230:	4b39      	ldr	r3, [pc, #228]	@ (8008318 <xQueueGenericSend+0x200>)
 8008232:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008236:	601a      	str	r2, [r3, #0]
 8008238:	f3bf 8f4f 	dsb	sy
 800823c:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8008240:	f001 ff1c 	bl	800a07c <vPortExitCritical>
				return pdPASS;
 8008244:	2301      	movs	r3, #1
 8008246:	e063      	b.n	8008310 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8008248:	687b      	ldr	r3, [r7, #4]
 800824a:	2b00      	cmp	r3, #0
 800824c:	d103      	bne.n	8008256 <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800824e:	f001 ff15 	bl	800a07c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8008252:	2300      	movs	r3, #0
 8008254:	e05c      	b.n	8008310 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8008256:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008258:	2b00      	cmp	r3, #0
 800825a:	d106      	bne.n	800826a <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800825c:	f107 0314 	add.w	r3, r7, #20
 8008260:	4618      	mov	r0, r3
 8008262:	f001 f809 	bl	8009278 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8008266:	2301      	movs	r3, #1
 8008268:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800826a:	f001 ff07 	bl	800a07c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800826e:	f000 fd71 	bl	8008d54 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8008272:	f001 fed1 	bl	800a018 <vPortEnterCritical>
 8008276:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008278:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800827c:	b25b      	sxtb	r3, r3
 800827e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008282:	d103      	bne.n	800828c <xQueueGenericSend+0x174>
 8008284:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008286:	2200      	movs	r2, #0
 8008288:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800828c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800828e:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8008292:	b25b      	sxtb	r3, r3
 8008294:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008298:	d103      	bne.n	80082a2 <xQueueGenericSend+0x18a>
 800829a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800829c:	2200      	movs	r2, #0
 800829e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80082a2:	f001 feeb 	bl	800a07c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80082a6:	1d3a      	adds	r2, r7, #4
 80082a8:	f107 0314 	add.w	r3, r7, #20
 80082ac:	4611      	mov	r1, r2
 80082ae:	4618      	mov	r0, r3
 80082b0:	f000 fff8 	bl	80092a4 <xTaskCheckForTimeOut>
 80082b4:	4603      	mov	r3, r0
 80082b6:	2b00      	cmp	r3, #0
 80082b8:	d124      	bne.n	8008304 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80082ba:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80082bc:	f000 faa6 	bl	800880c <prvIsQueueFull>
 80082c0:	4603      	mov	r3, r0
 80082c2:	2b00      	cmp	r3, #0
 80082c4:	d018      	beq.n	80082f8 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80082c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80082c8:	3310      	adds	r3, #16
 80082ca:	687a      	ldr	r2, [r7, #4]
 80082cc:	4611      	mov	r1, r2
 80082ce:	4618      	mov	r0, r3
 80082d0:	f000 ff1c 	bl	800910c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80082d4:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80082d6:	f000 fa31 	bl	800873c <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80082da:	f000 fd49 	bl	8008d70 <xTaskResumeAll>
 80082de:	4603      	mov	r3, r0
 80082e0:	2b00      	cmp	r3, #0
 80082e2:	f47f af7c 	bne.w	80081de <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 80082e6:	4b0c      	ldr	r3, [pc, #48]	@ (8008318 <xQueueGenericSend+0x200>)
 80082e8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80082ec:	601a      	str	r2, [r3, #0]
 80082ee:	f3bf 8f4f 	dsb	sy
 80082f2:	f3bf 8f6f 	isb	sy
 80082f6:	e772      	b.n	80081de <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80082f8:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80082fa:	f000 fa1f 	bl	800873c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80082fe:	f000 fd37 	bl	8008d70 <xTaskResumeAll>
 8008302:	e76c      	b.n	80081de <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8008304:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8008306:	f000 fa19 	bl	800873c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800830a:	f000 fd31 	bl	8008d70 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800830e:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8008310:	4618      	mov	r0, r3
 8008312:	3738      	adds	r7, #56	@ 0x38
 8008314:	46bd      	mov	sp, r7
 8008316:	bd80      	pop	{r7, pc}
 8008318:	e000ed04 	.word	0xe000ed04

0800831c <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800831c:	b580      	push	{r7, lr}
 800831e:	b090      	sub	sp, #64	@ 0x40
 8008320:	af00      	add	r7, sp, #0
 8008322:	60f8      	str	r0, [r7, #12]
 8008324:	60b9      	str	r1, [r7, #8]
 8008326:	607a      	str	r2, [r7, #4]
 8008328:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800832a:	68fb      	ldr	r3, [r7, #12]
 800832c:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 800832e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008330:	2b00      	cmp	r3, #0
 8008332:	d10b      	bne.n	800834c <xQueueGenericSendFromISR+0x30>
	__asm volatile
 8008334:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008338:	f383 8811 	msr	BASEPRI, r3
 800833c:	f3bf 8f6f 	isb	sy
 8008340:	f3bf 8f4f 	dsb	sy
 8008344:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8008346:	bf00      	nop
 8008348:	bf00      	nop
 800834a:	e7fd      	b.n	8008348 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800834c:	68bb      	ldr	r3, [r7, #8]
 800834e:	2b00      	cmp	r3, #0
 8008350:	d103      	bne.n	800835a <xQueueGenericSendFromISR+0x3e>
 8008352:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008354:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008356:	2b00      	cmp	r3, #0
 8008358:	d101      	bne.n	800835e <xQueueGenericSendFromISR+0x42>
 800835a:	2301      	movs	r3, #1
 800835c:	e000      	b.n	8008360 <xQueueGenericSendFromISR+0x44>
 800835e:	2300      	movs	r3, #0
 8008360:	2b00      	cmp	r3, #0
 8008362:	d10b      	bne.n	800837c <xQueueGenericSendFromISR+0x60>
	__asm volatile
 8008364:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008368:	f383 8811 	msr	BASEPRI, r3
 800836c:	f3bf 8f6f 	isb	sy
 8008370:	f3bf 8f4f 	dsb	sy
 8008374:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8008376:	bf00      	nop
 8008378:	bf00      	nop
 800837a:	e7fd      	b.n	8008378 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800837c:	683b      	ldr	r3, [r7, #0]
 800837e:	2b02      	cmp	r3, #2
 8008380:	d103      	bne.n	800838a <xQueueGenericSendFromISR+0x6e>
 8008382:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008384:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008386:	2b01      	cmp	r3, #1
 8008388:	d101      	bne.n	800838e <xQueueGenericSendFromISR+0x72>
 800838a:	2301      	movs	r3, #1
 800838c:	e000      	b.n	8008390 <xQueueGenericSendFromISR+0x74>
 800838e:	2300      	movs	r3, #0
 8008390:	2b00      	cmp	r3, #0
 8008392:	d10b      	bne.n	80083ac <xQueueGenericSendFromISR+0x90>
	__asm volatile
 8008394:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008398:	f383 8811 	msr	BASEPRI, r3
 800839c:	f3bf 8f6f 	isb	sy
 80083a0:	f3bf 8f4f 	dsb	sy
 80083a4:	623b      	str	r3, [r7, #32]
}
 80083a6:	bf00      	nop
 80083a8:	bf00      	nop
 80083aa:	e7fd      	b.n	80083a8 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80083ac:	f001 ff14 	bl	800a1d8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80083b0:	f3ef 8211 	mrs	r2, BASEPRI
 80083b4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80083b8:	f383 8811 	msr	BASEPRI, r3
 80083bc:	f3bf 8f6f 	isb	sy
 80083c0:	f3bf 8f4f 	dsb	sy
 80083c4:	61fa      	str	r2, [r7, #28]
 80083c6:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 80083c8:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80083ca:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80083cc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80083ce:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80083d0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80083d2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80083d4:	429a      	cmp	r2, r3
 80083d6:	d302      	bcc.n	80083de <xQueueGenericSendFromISR+0xc2>
 80083d8:	683b      	ldr	r3, [r7, #0]
 80083da:	2b02      	cmp	r3, #2
 80083dc:	d12f      	bne.n	800843e <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80083de:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80083e0:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80083e4:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 80083e8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80083ea:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80083ec:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80083ee:	683a      	ldr	r2, [r7, #0]
 80083f0:	68b9      	ldr	r1, [r7, #8]
 80083f2:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 80083f4:	f000 f912 	bl	800861c <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80083f8:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 80083fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008400:	d112      	bne.n	8008428 <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8008402:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008404:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008406:	2b00      	cmp	r3, #0
 8008408:	d016      	beq.n	8008438 <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800840a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800840c:	3324      	adds	r3, #36	@ 0x24
 800840e:	4618      	mov	r0, r3
 8008410:	f000 fece 	bl	80091b0 <xTaskRemoveFromEventList>
 8008414:	4603      	mov	r3, r0
 8008416:	2b00      	cmp	r3, #0
 8008418:	d00e      	beq.n	8008438 <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800841a:	687b      	ldr	r3, [r7, #4]
 800841c:	2b00      	cmp	r3, #0
 800841e:	d00b      	beq.n	8008438 <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8008420:	687b      	ldr	r3, [r7, #4]
 8008422:	2201      	movs	r2, #1
 8008424:	601a      	str	r2, [r3, #0]
 8008426:	e007      	b.n	8008438 <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8008428:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 800842c:	3301      	adds	r3, #1
 800842e:	b2db      	uxtb	r3, r3
 8008430:	b25a      	sxtb	r2, r3
 8008432:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008434:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 8008438:	2301      	movs	r3, #1
 800843a:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 800843c:	e001      	b.n	8008442 <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800843e:	2300      	movs	r3, #0
 8008440:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008442:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008444:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8008446:	697b      	ldr	r3, [r7, #20]
 8008448:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800844c:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800844e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 8008450:	4618      	mov	r0, r3
 8008452:	3740      	adds	r7, #64	@ 0x40
 8008454:	46bd      	mov	sp, r7
 8008456:	bd80      	pop	{r7, pc}

08008458 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8008458:	b580      	push	{r7, lr}
 800845a:	b08c      	sub	sp, #48	@ 0x30
 800845c:	af00      	add	r7, sp, #0
 800845e:	60f8      	str	r0, [r7, #12]
 8008460:	60b9      	str	r1, [r7, #8]
 8008462:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8008464:	2300      	movs	r3, #0
 8008466:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8008468:	68fb      	ldr	r3, [r7, #12]
 800846a:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800846c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800846e:	2b00      	cmp	r3, #0
 8008470:	d10b      	bne.n	800848a <xQueueReceive+0x32>
	__asm volatile
 8008472:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008476:	f383 8811 	msr	BASEPRI, r3
 800847a:	f3bf 8f6f 	isb	sy
 800847e:	f3bf 8f4f 	dsb	sy
 8008482:	623b      	str	r3, [r7, #32]
}
 8008484:	bf00      	nop
 8008486:	bf00      	nop
 8008488:	e7fd      	b.n	8008486 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800848a:	68bb      	ldr	r3, [r7, #8]
 800848c:	2b00      	cmp	r3, #0
 800848e:	d103      	bne.n	8008498 <xQueueReceive+0x40>
 8008490:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008492:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008494:	2b00      	cmp	r3, #0
 8008496:	d101      	bne.n	800849c <xQueueReceive+0x44>
 8008498:	2301      	movs	r3, #1
 800849a:	e000      	b.n	800849e <xQueueReceive+0x46>
 800849c:	2300      	movs	r3, #0
 800849e:	2b00      	cmp	r3, #0
 80084a0:	d10b      	bne.n	80084ba <xQueueReceive+0x62>
	__asm volatile
 80084a2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80084a6:	f383 8811 	msr	BASEPRI, r3
 80084aa:	f3bf 8f6f 	isb	sy
 80084ae:	f3bf 8f4f 	dsb	sy
 80084b2:	61fb      	str	r3, [r7, #28]
}
 80084b4:	bf00      	nop
 80084b6:	bf00      	nop
 80084b8:	e7fd      	b.n	80084b6 <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80084ba:	f001 f83f 	bl	800953c <xTaskGetSchedulerState>
 80084be:	4603      	mov	r3, r0
 80084c0:	2b00      	cmp	r3, #0
 80084c2:	d102      	bne.n	80084ca <xQueueReceive+0x72>
 80084c4:	687b      	ldr	r3, [r7, #4]
 80084c6:	2b00      	cmp	r3, #0
 80084c8:	d101      	bne.n	80084ce <xQueueReceive+0x76>
 80084ca:	2301      	movs	r3, #1
 80084cc:	e000      	b.n	80084d0 <xQueueReceive+0x78>
 80084ce:	2300      	movs	r3, #0
 80084d0:	2b00      	cmp	r3, #0
 80084d2:	d10b      	bne.n	80084ec <xQueueReceive+0x94>
	__asm volatile
 80084d4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80084d8:	f383 8811 	msr	BASEPRI, r3
 80084dc:	f3bf 8f6f 	isb	sy
 80084e0:	f3bf 8f4f 	dsb	sy
 80084e4:	61bb      	str	r3, [r7, #24]
}
 80084e6:	bf00      	nop
 80084e8:	bf00      	nop
 80084ea:	e7fd      	b.n	80084e8 <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80084ec:	f001 fd94 	bl	800a018 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80084f0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80084f2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80084f4:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80084f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80084f8:	2b00      	cmp	r3, #0
 80084fa:	d01f      	beq.n	800853c <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80084fc:	68b9      	ldr	r1, [r7, #8]
 80084fe:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008500:	f000 f8f6 	bl	80086f0 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8008504:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008506:	1e5a      	subs	r2, r3, #1
 8008508:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800850a:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800850c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800850e:	691b      	ldr	r3, [r3, #16]
 8008510:	2b00      	cmp	r3, #0
 8008512:	d00f      	beq.n	8008534 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008514:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008516:	3310      	adds	r3, #16
 8008518:	4618      	mov	r0, r3
 800851a:	f000 fe49 	bl	80091b0 <xTaskRemoveFromEventList>
 800851e:	4603      	mov	r3, r0
 8008520:	2b00      	cmp	r3, #0
 8008522:	d007      	beq.n	8008534 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8008524:	4b3c      	ldr	r3, [pc, #240]	@ (8008618 <xQueueReceive+0x1c0>)
 8008526:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800852a:	601a      	str	r2, [r3, #0]
 800852c:	f3bf 8f4f 	dsb	sy
 8008530:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8008534:	f001 fda2 	bl	800a07c <vPortExitCritical>
				return pdPASS;
 8008538:	2301      	movs	r3, #1
 800853a:	e069      	b.n	8008610 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800853c:	687b      	ldr	r3, [r7, #4]
 800853e:	2b00      	cmp	r3, #0
 8008540:	d103      	bne.n	800854a <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8008542:	f001 fd9b 	bl	800a07c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8008546:	2300      	movs	r3, #0
 8008548:	e062      	b.n	8008610 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800854a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800854c:	2b00      	cmp	r3, #0
 800854e:	d106      	bne.n	800855e <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8008550:	f107 0310 	add.w	r3, r7, #16
 8008554:	4618      	mov	r0, r3
 8008556:	f000 fe8f 	bl	8009278 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800855a:	2301      	movs	r3, #1
 800855c:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800855e:	f001 fd8d 	bl	800a07c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8008562:	f000 fbf7 	bl	8008d54 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8008566:	f001 fd57 	bl	800a018 <vPortEnterCritical>
 800856a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800856c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8008570:	b25b      	sxtb	r3, r3
 8008572:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008576:	d103      	bne.n	8008580 <xQueueReceive+0x128>
 8008578:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800857a:	2200      	movs	r2, #0
 800857c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8008580:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008582:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8008586:	b25b      	sxtb	r3, r3
 8008588:	f1b3 3fff 	cmp.w	r3, #4294967295
 800858c:	d103      	bne.n	8008596 <xQueueReceive+0x13e>
 800858e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008590:	2200      	movs	r2, #0
 8008592:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8008596:	f001 fd71 	bl	800a07c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800859a:	1d3a      	adds	r2, r7, #4
 800859c:	f107 0310 	add.w	r3, r7, #16
 80085a0:	4611      	mov	r1, r2
 80085a2:	4618      	mov	r0, r3
 80085a4:	f000 fe7e 	bl	80092a4 <xTaskCheckForTimeOut>
 80085a8:	4603      	mov	r3, r0
 80085aa:	2b00      	cmp	r3, #0
 80085ac:	d123      	bne.n	80085f6 <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80085ae:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80085b0:	f000 f916 	bl	80087e0 <prvIsQueueEmpty>
 80085b4:	4603      	mov	r3, r0
 80085b6:	2b00      	cmp	r3, #0
 80085b8:	d017      	beq.n	80085ea <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80085ba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80085bc:	3324      	adds	r3, #36	@ 0x24
 80085be:	687a      	ldr	r2, [r7, #4]
 80085c0:	4611      	mov	r1, r2
 80085c2:	4618      	mov	r0, r3
 80085c4:	f000 fda2 	bl	800910c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80085c8:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80085ca:	f000 f8b7 	bl	800873c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80085ce:	f000 fbcf 	bl	8008d70 <xTaskResumeAll>
 80085d2:	4603      	mov	r3, r0
 80085d4:	2b00      	cmp	r3, #0
 80085d6:	d189      	bne.n	80084ec <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 80085d8:	4b0f      	ldr	r3, [pc, #60]	@ (8008618 <xQueueReceive+0x1c0>)
 80085da:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80085de:	601a      	str	r2, [r3, #0]
 80085e0:	f3bf 8f4f 	dsb	sy
 80085e4:	f3bf 8f6f 	isb	sy
 80085e8:	e780      	b.n	80084ec <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 80085ea:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80085ec:	f000 f8a6 	bl	800873c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80085f0:	f000 fbbe 	bl	8008d70 <xTaskResumeAll>
 80085f4:	e77a      	b.n	80084ec <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 80085f6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80085f8:	f000 f8a0 	bl	800873c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80085fc:	f000 fbb8 	bl	8008d70 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8008600:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008602:	f000 f8ed 	bl	80087e0 <prvIsQueueEmpty>
 8008606:	4603      	mov	r3, r0
 8008608:	2b00      	cmp	r3, #0
 800860a:	f43f af6f 	beq.w	80084ec <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800860e:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8008610:	4618      	mov	r0, r3
 8008612:	3730      	adds	r7, #48	@ 0x30
 8008614:	46bd      	mov	sp, r7
 8008616:	bd80      	pop	{r7, pc}
 8008618:	e000ed04 	.word	0xe000ed04

0800861c <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800861c:	b580      	push	{r7, lr}
 800861e:	b086      	sub	sp, #24
 8008620:	af00      	add	r7, sp, #0
 8008622:	60f8      	str	r0, [r7, #12]
 8008624:	60b9      	str	r1, [r7, #8]
 8008626:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8008628:	2300      	movs	r3, #0
 800862a:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800862c:	68fb      	ldr	r3, [r7, #12]
 800862e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008630:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8008632:	68fb      	ldr	r3, [r7, #12]
 8008634:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008636:	2b00      	cmp	r3, #0
 8008638:	d10d      	bne.n	8008656 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800863a:	68fb      	ldr	r3, [r7, #12]
 800863c:	681b      	ldr	r3, [r3, #0]
 800863e:	2b00      	cmp	r3, #0
 8008640:	d14d      	bne.n	80086de <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8008642:	68fb      	ldr	r3, [r7, #12]
 8008644:	689b      	ldr	r3, [r3, #8]
 8008646:	4618      	mov	r0, r3
 8008648:	f000 ff96 	bl	8009578 <xTaskPriorityDisinherit>
 800864c:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800864e:	68fb      	ldr	r3, [r7, #12]
 8008650:	2200      	movs	r2, #0
 8008652:	609a      	str	r2, [r3, #8]
 8008654:	e043      	b.n	80086de <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8008656:	687b      	ldr	r3, [r7, #4]
 8008658:	2b00      	cmp	r3, #0
 800865a:	d119      	bne.n	8008690 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800865c:	68fb      	ldr	r3, [r7, #12]
 800865e:	6858      	ldr	r0, [r3, #4]
 8008660:	68fb      	ldr	r3, [r7, #12]
 8008662:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008664:	461a      	mov	r2, r3
 8008666:	68b9      	ldr	r1, [r7, #8]
 8008668:	f002 f86a 	bl	800a740 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800866c:	68fb      	ldr	r3, [r7, #12]
 800866e:	685a      	ldr	r2, [r3, #4]
 8008670:	68fb      	ldr	r3, [r7, #12]
 8008672:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008674:	441a      	add	r2, r3
 8008676:	68fb      	ldr	r3, [r7, #12]
 8008678:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800867a:	68fb      	ldr	r3, [r7, #12]
 800867c:	685a      	ldr	r2, [r3, #4]
 800867e:	68fb      	ldr	r3, [r7, #12]
 8008680:	689b      	ldr	r3, [r3, #8]
 8008682:	429a      	cmp	r2, r3
 8008684:	d32b      	bcc.n	80086de <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8008686:	68fb      	ldr	r3, [r7, #12]
 8008688:	681a      	ldr	r2, [r3, #0]
 800868a:	68fb      	ldr	r3, [r7, #12]
 800868c:	605a      	str	r2, [r3, #4]
 800868e:	e026      	b.n	80086de <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8008690:	68fb      	ldr	r3, [r7, #12]
 8008692:	68d8      	ldr	r0, [r3, #12]
 8008694:	68fb      	ldr	r3, [r7, #12]
 8008696:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008698:	461a      	mov	r2, r3
 800869a:	68b9      	ldr	r1, [r7, #8]
 800869c:	f002 f850 	bl	800a740 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80086a0:	68fb      	ldr	r3, [r7, #12]
 80086a2:	68da      	ldr	r2, [r3, #12]
 80086a4:	68fb      	ldr	r3, [r7, #12]
 80086a6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80086a8:	425b      	negs	r3, r3
 80086aa:	441a      	add	r2, r3
 80086ac:	68fb      	ldr	r3, [r7, #12]
 80086ae:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80086b0:	68fb      	ldr	r3, [r7, #12]
 80086b2:	68da      	ldr	r2, [r3, #12]
 80086b4:	68fb      	ldr	r3, [r7, #12]
 80086b6:	681b      	ldr	r3, [r3, #0]
 80086b8:	429a      	cmp	r2, r3
 80086ba:	d207      	bcs.n	80086cc <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80086bc:	68fb      	ldr	r3, [r7, #12]
 80086be:	689a      	ldr	r2, [r3, #8]
 80086c0:	68fb      	ldr	r3, [r7, #12]
 80086c2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80086c4:	425b      	negs	r3, r3
 80086c6:	441a      	add	r2, r3
 80086c8:	68fb      	ldr	r3, [r7, #12]
 80086ca:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80086cc:	687b      	ldr	r3, [r7, #4]
 80086ce:	2b02      	cmp	r3, #2
 80086d0:	d105      	bne.n	80086de <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80086d2:	693b      	ldr	r3, [r7, #16]
 80086d4:	2b00      	cmp	r3, #0
 80086d6:	d002      	beq.n	80086de <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80086d8:	693b      	ldr	r3, [r7, #16]
 80086da:	3b01      	subs	r3, #1
 80086dc:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80086de:	693b      	ldr	r3, [r7, #16]
 80086e0:	1c5a      	adds	r2, r3, #1
 80086e2:	68fb      	ldr	r3, [r7, #12]
 80086e4:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 80086e6:	697b      	ldr	r3, [r7, #20]
}
 80086e8:	4618      	mov	r0, r3
 80086ea:	3718      	adds	r7, #24
 80086ec:	46bd      	mov	sp, r7
 80086ee:	bd80      	pop	{r7, pc}

080086f0 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80086f0:	b580      	push	{r7, lr}
 80086f2:	b082      	sub	sp, #8
 80086f4:	af00      	add	r7, sp, #0
 80086f6:	6078      	str	r0, [r7, #4]
 80086f8:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80086fa:	687b      	ldr	r3, [r7, #4]
 80086fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80086fe:	2b00      	cmp	r3, #0
 8008700:	d018      	beq.n	8008734 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8008702:	687b      	ldr	r3, [r7, #4]
 8008704:	68da      	ldr	r2, [r3, #12]
 8008706:	687b      	ldr	r3, [r7, #4]
 8008708:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800870a:	441a      	add	r2, r3
 800870c:	687b      	ldr	r3, [r7, #4]
 800870e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8008710:	687b      	ldr	r3, [r7, #4]
 8008712:	68da      	ldr	r2, [r3, #12]
 8008714:	687b      	ldr	r3, [r7, #4]
 8008716:	689b      	ldr	r3, [r3, #8]
 8008718:	429a      	cmp	r2, r3
 800871a:	d303      	bcc.n	8008724 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800871c:	687b      	ldr	r3, [r7, #4]
 800871e:	681a      	ldr	r2, [r3, #0]
 8008720:	687b      	ldr	r3, [r7, #4]
 8008722:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8008724:	687b      	ldr	r3, [r7, #4]
 8008726:	68d9      	ldr	r1, [r3, #12]
 8008728:	687b      	ldr	r3, [r7, #4]
 800872a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800872c:	461a      	mov	r2, r3
 800872e:	6838      	ldr	r0, [r7, #0]
 8008730:	f002 f806 	bl	800a740 <memcpy>
	}
}
 8008734:	bf00      	nop
 8008736:	3708      	adds	r7, #8
 8008738:	46bd      	mov	sp, r7
 800873a:	bd80      	pop	{r7, pc}

0800873c <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800873c:	b580      	push	{r7, lr}
 800873e:	b084      	sub	sp, #16
 8008740:	af00      	add	r7, sp, #0
 8008742:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8008744:	f001 fc68 	bl	800a018 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8008748:	687b      	ldr	r3, [r7, #4]
 800874a:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800874e:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8008750:	e011      	b.n	8008776 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8008752:	687b      	ldr	r3, [r7, #4]
 8008754:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008756:	2b00      	cmp	r3, #0
 8008758:	d012      	beq.n	8008780 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800875a:	687b      	ldr	r3, [r7, #4]
 800875c:	3324      	adds	r3, #36	@ 0x24
 800875e:	4618      	mov	r0, r3
 8008760:	f000 fd26 	bl	80091b0 <xTaskRemoveFromEventList>
 8008764:	4603      	mov	r3, r0
 8008766:	2b00      	cmp	r3, #0
 8008768:	d001      	beq.n	800876e <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800876a:	f000 fdff 	bl	800936c <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800876e:	7bfb      	ldrb	r3, [r7, #15]
 8008770:	3b01      	subs	r3, #1
 8008772:	b2db      	uxtb	r3, r3
 8008774:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8008776:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800877a:	2b00      	cmp	r3, #0
 800877c:	dce9      	bgt.n	8008752 <prvUnlockQueue+0x16>
 800877e:	e000      	b.n	8008782 <prvUnlockQueue+0x46>
					break;
 8008780:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8008782:	687b      	ldr	r3, [r7, #4]
 8008784:	22ff      	movs	r2, #255	@ 0xff
 8008786:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 800878a:	f001 fc77 	bl	800a07c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800878e:	f001 fc43 	bl	800a018 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8008792:	687b      	ldr	r3, [r7, #4]
 8008794:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8008798:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800879a:	e011      	b.n	80087c0 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800879c:	687b      	ldr	r3, [r7, #4]
 800879e:	691b      	ldr	r3, [r3, #16]
 80087a0:	2b00      	cmp	r3, #0
 80087a2:	d012      	beq.n	80087ca <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80087a4:	687b      	ldr	r3, [r7, #4]
 80087a6:	3310      	adds	r3, #16
 80087a8:	4618      	mov	r0, r3
 80087aa:	f000 fd01 	bl	80091b0 <xTaskRemoveFromEventList>
 80087ae:	4603      	mov	r3, r0
 80087b0:	2b00      	cmp	r3, #0
 80087b2:	d001      	beq.n	80087b8 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80087b4:	f000 fdda 	bl	800936c <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80087b8:	7bbb      	ldrb	r3, [r7, #14]
 80087ba:	3b01      	subs	r3, #1
 80087bc:	b2db      	uxtb	r3, r3
 80087be:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80087c0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80087c4:	2b00      	cmp	r3, #0
 80087c6:	dce9      	bgt.n	800879c <prvUnlockQueue+0x60>
 80087c8:	e000      	b.n	80087cc <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80087ca:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80087cc:	687b      	ldr	r3, [r7, #4]
 80087ce:	22ff      	movs	r2, #255	@ 0xff
 80087d0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 80087d4:	f001 fc52 	bl	800a07c <vPortExitCritical>
}
 80087d8:	bf00      	nop
 80087da:	3710      	adds	r7, #16
 80087dc:	46bd      	mov	sp, r7
 80087de:	bd80      	pop	{r7, pc}

080087e0 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80087e0:	b580      	push	{r7, lr}
 80087e2:	b084      	sub	sp, #16
 80087e4:	af00      	add	r7, sp, #0
 80087e6:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80087e8:	f001 fc16 	bl	800a018 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80087ec:	687b      	ldr	r3, [r7, #4]
 80087ee:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80087f0:	2b00      	cmp	r3, #0
 80087f2:	d102      	bne.n	80087fa <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80087f4:	2301      	movs	r3, #1
 80087f6:	60fb      	str	r3, [r7, #12]
 80087f8:	e001      	b.n	80087fe <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80087fa:	2300      	movs	r3, #0
 80087fc:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80087fe:	f001 fc3d 	bl	800a07c <vPortExitCritical>

	return xReturn;
 8008802:	68fb      	ldr	r3, [r7, #12]
}
 8008804:	4618      	mov	r0, r3
 8008806:	3710      	adds	r7, #16
 8008808:	46bd      	mov	sp, r7
 800880a:	bd80      	pop	{r7, pc}

0800880c <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800880c:	b580      	push	{r7, lr}
 800880e:	b084      	sub	sp, #16
 8008810:	af00      	add	r7, sp, #0
 8008812:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8008814:	f001 fc00 	bl	800a018 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8008818:	687b      	ldr	r3, [r7, #4]
 800881a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800881c:	687b      	ldr	r3, [r7, #4]
 800881e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008820:	429a      	cmp	r2, r3
 8008822:	d102      	bne.n	800882a <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8008824:	2301      	movs	r3, #1
 8008826:	60fb      	str	r3, [r7, #12]
 8008828:	e001      	b.n	800882e <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800882a:	2300      	movs	r3, #0
 800882c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800882e:	f001 fc25 	bl	800a07c <vPortExitCritical>

	return xReturn;
 8008832:	68fb      	ldr	r3, [r7, #12]
}
 8008834:	4618      	mov	r0, r3
 8008836:	3710      	adds	r7, #16
 8008838:	46bd      	mov	sp, r7
 800883a:	bd80      	pop	{r7, pc}

0800883c <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800883c:	b480      	push	{r7}
 800883e:	b085      	sub	sp, #20
 8008840:	af00      	add	r7, sp, #0
 8008842:	6078      	str	r0, [r7, #4]
 8008844:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8008846:	2300      	movs	r3, #0
 8008848:	60fb      	str	r3, [r7, #12]
 800884a:	e014      	b.n	8008876 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800884c:	4a0f      	ldr	r2, [pc, #60]	@ (800888c <vQueueAddToRegistry+0x50>)
 800884e:	68fb      	ldr	r3, [r7, #12]
 8008850:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8008854:	2b00      	cmp	r3, #0
 8008856:	d10b      	bne.n	8008870 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8008858:	490c      	ldr	r1, [pc, #48]	@ (800888c <vQueueAddToRegistry+0x50>)
 800885a:	68fb      	ldr	r3, [r7, #12]
 800885c:	683a      	ldr	r2, [r7, #0]
 800885e:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8008862:	4a0a      	ldr	r2, [pc, #40]	@ (800888c <vQueueAddToRegistry+0x50>)
 8008864:	68fb      	ldr	r3, [r7, #12]
 8008866:	00db      	lsls	r3, r3, #3
 8008868:	4413      	add	r3, r2
 800886a:	687a      	ldr	r2, [r7, #4]
 800886c:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800886e:	e006      	b.n	800887e <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8008870:	68fb      	ldr	r3, [r7, #12]
 8008872:	3301      	adds	r3, #1
 8008874:	60fb      	str	r3, [r7, #12]
 8008876:	68fb      	ldr	r3, [r7, #12]
 8008878:	2b07      	cmp	r3, #7
 800887a:	d9e7      	bls.n	800884c <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800887c:	bf00      	nop
 800887e:	bf00      	nop
 8008880:	3714      	adds	r7, #20
 8008882:	46bd      	mov	sp, r7
 8008884:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008888:	4770      	bx	lr
 800888a:	bf00      	nop
 800888c:	24000d20 	.word	0x24000d20

08008890 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8008890:	b580      	push	{r7, lr}
 8008892:	b086      	sub	sp, #24
 8008894:	af00      	add	r7, sp, #0
 8008896:	60f8      	str	r0, [r7, #12]
 8008898:	60b9      	str	r1, [r7, #8]
 800889a:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800889c:	68fb      	ldr	r3, [r7, #12]
 800889e:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 80088a0:	f001 fbba 	bl	800a018 <vPortEnterCritical>
 80088a4:	697b      	ldr	r3, [r7, #20]
 80088a6:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80088aa:	b25b      	sxtb	r3, r3
 80088ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80088b0:	d103      	bne.n	80088ba <vQueueWaitForMessageRestricted+0x2a>
 80088b2:	697b      	ldr	r3, [r7, #20]
 80088b4:	2200      	movs	r2, #0
 80088b6:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80088ba:	697b      	ldr	r3, [r7, #20]
 80088bc:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80088c0:	b25b      	sxtb	r3, r3
 80088c2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80088c6:	d103      	bne.n	80088d0 <vQueueWaitForMessageRestricted+0x40>
 80088c8:	697b      	ldr	r3, [r7, #20]
 80088ca:	2200      	movs	r2, #0
 80088cc:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80088d0:	f001 fbd4 	bl	800a07c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80088d4:	697b      	ldr	r3, [r7, #20]
 80088d6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80088d8:	2b00      	cmp	r3, #0
 80088da:	d106      	bne.n	80088ea <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80088dc:	697b      	ldr	r3, [r7, #20]
 80088de:	3324      	adds	r3, #36	@ 0x24
 80088e0:	687a      	ldr	r2, [r7, #4]
 80088e2:	68b9      	ldr	r1, [r7, #8]
 80088e4:	4618      	mov	r0, r3
 80088e6:	f000 fc37 	bl	8009158 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 80088ea:	6978      	ldr	r0, [r7, #20]
 80088ec:	f7ff ff26 	bl	800873c <prvUnlockQueue>
	}
 80088f0:	bf00      	nop
 80088f2:	3718      	adds	r7, #24
 80088f4:	46bd      	mov	sp, r7
 80088f6:	bd80      	pop	{r7, pc}

080088f8 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80088f8:	b580      	push	{r7, lr}
 80088fa:	b08e      	sub	sp, #56	@ 0x38
 80088fc:	af04      	add	r7, sp, #16
 80088fe:	60f8      	str	r0, [r7, #12]
 8008900:	60b9      	str	r1, [r7, #8]
 8008902:	607a      	str	r2, [r7, #4]
 8008904:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8008906:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008908:	2b00      	cmp	r3, #0
 800890a:	d10b      	bne.n	8008924 <xTaskCreateStatic+0x2c>
	__asm volatile
 800890c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008910:	f383 8811 	msr	BASEPRI, r3
 8008914:	f3bf 8f6f 	isb	sy
 8008918:	f3bf 8f4f 	dsb	sy
 800891c:	623b      	str	r3, [r7, #32]
}
 800891e:	bf00      	nop
 8008920:	bf00      	nop
 8008922:	e7fd      	b.n	8008920 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8008924:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008926:	2b00      	cmp	r3, #0
 8008928:	d10b      	bne.n	8008942 <xTaskCreateStatic+0x4a>
	__asm volatile
 800892a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800892e:	f383 8811 	msr	BASEPRI, r3
 8008932:	f3bf 8f6f 	isb	sy
 8008936:	f3bf 8f4f 	dsb	sy
 800893a:	61fb      	str	r3, [r7, #28]
}
 800893c:	bf00      	nop
 800893e:	bf00      	nop
 8008940:	e7fd      	b.n	800893e <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8008942:	23a8      	movs	r3, #168	@ 0xa8
 8008944:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8008946:	693b      	ldr	r3, [r7, #16]
 8008948:	2ba8      	cmp	r3, #168	@ 0xa8
 800894a:	d00b      	beq.n	8008964 <xTaskCreateStatic+0x6c>
	__asm volatile
 800894c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008950:	f383 8811 	msr	BASEPRI, r3
 8008954:	f3bf 8f6f 	isb	sy
 8008958:	f3bf 8f4f 	dsb	sy
 800895c:	61bb      	str	r3, [r7, #24]
}
 800895e:	bf00      	nop
 8008960:	bf00      	nop
 8008962:	e7fd      	b.n	8008960 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8008964:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8008966:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008968:	2b00      	cmp	r3, #0
 800896a:	d01e      	beq.n	80089aa <xTaskCreateStatic+0xb2>
 800896c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800896e:	2b00      	cmp	r3, #0
 8008970:	d01b      	beq.n	80089aa <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8008972:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008974:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8008976:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008978:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800897a:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800897c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800897e:	2202      	movs	r2, #2
 8008980:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8008984:	2300      	movs	r3, #0
 8008986:	9303      	str	r3, [sp, #12]
 8008988:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800898a:	9302      	str	r3, [sp, #8]
 800898c:	f107 0314 	add.w	r3, r7, #20
 8008990:	9301      	str	r3, [sp, #4]
 8008992:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008994:	9300      	str	r3, [sp, #0]
 8008996:	683b      	ldr	r3, [r7, #0]
 8008998:	687a      	ldr	r2, [r7, #4]
 800899a:	68b9      	ldr	r1, [r7, #8]
 800899c:	68f8      	ldr	r0, [r7, #12]
 800899e:	f000 f851 	bl	8008a44 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80089a2:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80089a4:	f000 f8f6 	bl	8008b94 <prvAddNewTaskToReadyList>
 80089a8:	e001      	b.n	80089ae <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 80089aa:	2300      	movs	r3, #0
 80089ac:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80089ae:	697b      	ldr	r3, [r7, #20]
	}
 80089b0:	4618      	mov	r0, r3
 80089b2:	3728      	adds	r7, #40	@ 0x28
 80089b4:	46bd      	mov	sp, r7
 80089b6:	bd80      	pop	{r7, pc}

080089b8 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80089b8:	b580      	push	{r7, lr}
 80089ba:	b08c      	sub	sp, #48	@ 0x30
 80089bc:	af04      	add	r7, sp, #16
 80089be:	60f8      	str	r0, [r7, #12]
 80089c0:	60b9      	str	r1, [r7, #8]
 80089c2:	603b      	str	r3, [r7, #0]
 80089c4:	4613      	mov	r3, r2
 80089c6:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80089c8:	88fb      	ldrh	r3, [r7, #6]
 80089ca:	009b      	lsls	r3, r3, #2
 80089cc:	4618      	mov	r0, r3
 80089ce:	f001 fc45 	bl	800a25c <pvPortMalloc>
 80089d2:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80089d4:	697b      	ldr	r3, [r7, #20]
 80089d6:	2b00      	cmp	r3, #0
 80089d8:	d00e      	beq.n	80089f8 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80089da:	20a8      	movs	r0, #168	@ 0xa8
 80089dc:	f001 fc3e 	bl	800a25c <pvPortMalloc>
 80089e0:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80089e2:	69fb      	ldr	r3, [r7, #28]
 80089e4:	2b00      	cmp	r3, #0
 80089e6:	d003      	beq.n	80089f0 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80089e8:	69fb      	ldr	r3, [r7, #28]
 80089ea:	697a      	ldr	r2, [r7, #20]
 80089ec:	631a      	str	r2, [r3, #48]	@ 0x30
 80089ee:	e005      	b.n	80089fc <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80089f0:	6978      	ldr	r0, [r7, #20]
 80089f2:	f001 fd01 	bl	800a3f8 <vPortFree>
 80089f6:	e001      	b.n	80089fc <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80089f8:	2300      	movs	r3, #0
 80089fa:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80089fc:	69fb      	ldr	r3, [r7, #28]
 80089fe:	2b00      	cmp	r3, #0
 8008a00:	d017      	beq.n	8008a32 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8008a02:	69fb      	ldr	r3, [r7, #28]
 8008a04:	2200      	movs	r2, #0
 8008a06:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8008a0a:	88fa      	ldrh	r2, [r7, #6]
 8008a0c:	2300      	movs	r3, #0
 8008a0e:	9303      	str	r3, [sp, #12]
 8008a10:	69fb      	ldr	r3, [r7, #28]
 8008a12:	9302      	str	r3, [sp, #8]
 8008a14:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008a16:	9301      	str	r3, [sp, #4]
 8008a18:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008a1a:	9300      	str	r3, [sp, #0]
 8008a1c:	683b      	ldr	r3, [r7, #0]
 8008a1e:	68b9      	ldr	r1, [r7, #8]
 8008a20:	68f8      	ldr	r0, [r7, #12]
 8008a22:	f000 f80f 	bl	8008a44 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8008a26:	69f8      	ldr	r0, [r7, #28]
 8008a28:	f000 f8b4 	bl	8008b94 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8008a2c:	2301      	movs	r3, #1
 8008a2e:	61bb      	str	r3, [r7, #24]
 8008a30:	e002      	b.n	8008a38 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8008a32:	f04f 33ff 	mov.w	r3, #4294967295
 8008a36:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8008a38:	69bb      	ldr	r3, [r7, #24]
	}
 8008a3a:	4618      	mov	r0, r3
 8008a3c:	3720      	adds	r7, #32
 8008a3e:	46bd      	mov	sp, r7
 8008a40:	bd80      	pop	{r7, pc}
	...

08008a44 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8008a44:	b580      	push	{r7, lr}
 8008a46:	b088      	sub	sp, #32
 8008a48:	af00      	add	r7, sp, #0
 8008a4a:	60f8      	str	r0, [r7, #12]
 8008a4c:	60b9      	str	r1, [r7, #8]
 8008a4e:	607a      	str	r2, [r7, #4]
 8008a50:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8008a52:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008a54:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8008a56:	687b      	ldr	r3, [r7, #4]
 8008a58:	009b      	lsls	r3, r3, #2
 8008a5a:	461a      	mov	r2, r3
 8008a5c:	21a5      	movs	r1, #165	@ 0xa5
 8008a5e:	f001 fdeb 	bl	800a638 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8008a62:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008a64:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8008a66:	6879      	ldr	r1, [r7, #4]
 8008a68:	f06f 4340 	mvn.w	r3, #3221225472	@ 0xc0000000
 8008a6c:	440b      	add	r3, r1
 8008a6e:	009b      	lsls	r3, r3, #2
 8008a70:	4413      	add	r3, r2
 8008a72:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8008a74:	69bb      	ldr	r3, [r7, #24]
 8008a76:	f023 0307 	bic.w	r3, r3, #7
 8008a7a:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8008a7c:	69bb      	ldr	r3, [r7, #24]
 8008a7e:	f003 0307 	and.w	r3, r3, #7
 8008a82:	2b00      	cmp	r3, #0
 8008a84:	d00b      	beq.n	8008a9e <prvInitialiseNewTask+0x5a>
	__asm volatile
 8008a86:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008a8a:	f383 8811 	msr	BASEPRI, r3
 8008a8e:	f3bf 8f6f 	isb	sy
 8008a92:	f3bf 8f4f 	dsb	sy
 8008a96:	617b      	str	r3, [r7, #20]
}
 8008a98:	bf00      	nop
 8008a9a:	bf00      	nop
 8008a9c:	e7fd      	b.n	8008a9a <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8008a9e:	68bb      	ldr	r3, [r7, #8]
 8008aa0:	2b00      	cmp	r3, #0
 8008aa2:	d01f      	beq.n	8008ae4 <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8008aa4:	2300      	movs	r3, #0
 8008aa6:	61fb      	str	r3, [r7, #28]
 8008aa8:	e012      	b.n	8008ad0 <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8008aaa:	68ba      	ldr	r2, [r7, #8]
 8008aac:	69fb      	ldr	r3, [r7, #28]
 8008aae:	4413      	add	r3, r2
 8008ab0:	7819      	ldrb	r1, [r3, #0]
 8008ab2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008ab4:	69fb      	ldr	r3, [r7, #28]
 8008ab6:	4413      	add	r3, r2
 8008ab8:	3334      	adds	r3, #52	@ 0x34
 8008aba:	460a      	mov	r2, r1
 8008abc:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8008abe:	68ba      	ldr	r2, [r7, #8]
 8008ac0:	69fb      	ldr	r3, [r7, #28]
 8008ac2:	4413      	add	r3, r2
 8008ac4:	781b      	ldrb	r3, [r3, #0]
 8008ac6:	2b00      	cmp	r3, #0
 8008ac8:	d006      	beq.n	8008ad8 <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8008aca:	69fb      	ldr	r3, [r7, #28]
 8008acc:	3301      	adds	r3, #1
 8008ace:	61fb      	str	r3, [r7, #28]
 8008ad0:	69fb      	ldr	r3, [r7, #28]
 8008ad2:	2b0f      	cmp	r3, #15
 8008ad4:	d9e9      	bls.n	8008aaa <prvInitialiseNewTask+0x66>
 8008ad6:	e000      	b.n	8008ada <prvInitialiseNewTask+0x96>
			{
				break;
 8008ad8:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8008ada:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008adc:	2200      	movs	r2, #0
 8008ade:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8008ae2:	e003      	b.n	8008aec <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8008ae4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008ae6:	2200      	movs	r2, #0
 8008ae8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8008aec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008aee:	2b37      	cmp	r3, #55	@ 0x37
 8008af0:	d901      	bls.n	8008af6 <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8008af2:	2337      	movs	r3, #55	@ 0x37
 8008af4:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8008af6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008af8:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8008afa:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8008afc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008afe:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8008b00:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8008b02:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008b04:	2200      	movs	r2, #0
 8008b06:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8008b08:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008b0a:	3304      	adds	r3, #4
 8008b0c:	4618      	mov	r0, r3
 8008b0e:	f7ff f965 	bl	8007ddc <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8008b12:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008b14:	3318      	adds	r3, #24
 8008b16:	4618      	mov	r0, r3
 8008b18:	f7ff f960 	bl	8007ddc <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8008b1c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008b1e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008b20:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008b22:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008b24:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8008b28:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008b2a:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8008b2c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008b2e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008b30:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8008b32:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008b34:	2200      	movs	r2, #0
 8008b36:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8008b3a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008b3c:	2200      	movs	r2, #0
 8008b3e:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8008b42:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008b44:	3354      	adds	r3, #84	@ 0x54
 8008b46:	224c      	movs	r2, #76	@ 0x4c
 8008b48:	2100      	movs	r1, #0
 8008b4a:	4618      	mov	r0, r3
 8008b4c:	f001 fd74 	bl	800a638 <memset>
 8008b50:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008b52:	4a0d      	ldr	r2, [pc, #52]	@ (8008b88 <prvInitialiseNewTask+0x144>)
 8008b54:	659a      	str	r2, [r3, #88]	@ 0x58
 8008b56:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008b58:	4a0c      	ldr	r2, [pc, #48]	@ (8008b8c <prvInitialiseNewTask+0x148>)
 8008b5a:	65da      	str	r2, [r3, #92]	@ 0x5c
 8008b5c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008b5e:	4a0c      	ldr	r2, [pc, #48]	@ (8008b90 <prvInitialiseNewTask+0x14c>)
 8008b60:	661a      	str	r2, [r3, #96]	@ 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8008b62:	683a      	ldr	r2, [r7, #0]
 8008b64:	68f9      	ldr	r1, [r7, #12]
 8008b66:	69b8      	ldr	r0, [r7, #24]
 8008b68:	f001 f924 	bl	8009db4 <pxPortInitialiseStack>
 8008b6c:	4602      	mov	r2, r0
 8008b6e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008b70:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8008b72:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008b74:	2b00      	cmp	r3, #0
 8008b76:	d002      	beq.n	8008b7e <prvInitialiseNewTask+0x13a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8008b78:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008b7a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008b7c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008b7e:	bf00      	nop
 8008b80:	3720      	adds	r7, #32
 8008b82:	46bd      	mov	sp, r7
 8008b84:	bd80      	pop	{r7, pc}
 8008b86:	bf00      	nop
 8008b88:	24004fb4 	.word	0x24004fb4
 8008b8c:	2400501c 	.word	0x2400501c
 8008b90:	24005084 	.word	0x24005084

08008b94 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8008b94:	b580      	push	{r7, lr}
 8008b96:	b082      	sub	sp, #8
 8008b98:	af00      	add	r7, sp, #0
 8008b9a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8008b9c:	f001 fa3c 	bl	800a018 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8008ba0:	4b2d      	ldr	r3, [pc, #180]	@ (8008c58 <prvAddNewTaskToReadyList+0xc4>)
 8008ba2:	681b      	ldr	r3, [r3, #0]
 8008ba4:	3301      	adds	r3, #1
 8008ba6:	4a2c      	ldr	r2, [pc, #176]	@ (8008c58 <prvAddNewTaskToReadyList+0xc4>)
 8008ba8:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8008baa:	4b2c      	ldr	r3, [pc, #176]	@ (8008c5c <prvAddNewTaskToReadyList+0xc8>)
 8008bac:	681b      	ldr	r3, [r3, #0]
 8008bae:	2b00      	cmp	r3, #0
 8008bb0:	d109      	bne.n	8008bc6 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8008bb2:	4a2a      	ldr	r2, [pc, #168]	@ (8008c5c <prvAddNewTaskToReadyList+0xc8>)
 8008bb4:	687b      	ldr	r3, [r7, #4]
 8008bb6:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8008bb8:	4b27      	ldr	r3, [pc, #156]	@ (8008c58 <prvAddNewTaskToReadyList+0xc4>)
 8008bba:	681b      	ldr	r3, [r3, #0]
 8008bbc:	2b01      	cmp	r3, #1
 8008bbe:	d110      	bne.n	8008be2 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8008bc0:	f000 fbf8 	bl	80093b4 <prvInitialiseTaskLists>
 8008bc4:	e00d      	b.n	8008be2 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8008bc6:	4b26      	ldr	r3, [pc, #152]	@ (8008c60 <prvAddNewTaskToReadyList+0xcc>)
 8008bc8:	681b      	ldr	r3, [r3, #0]
 8008bca:	2b00      	cmp	r3, #0
 8008bcc:	d109      	bne.n	8008be2 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8008bce:	4b23      	ldr	r3, [pc, #140]	@ (8008c5c <prvAddNewTaskToReadyList+0xc8>)
 8008bd0:	681b      	ldr	r3, [r3, #0]
 8008bd2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008bd4:	687b      	ldr	r3, [r7, #4]
 8008bd6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008bd8:	429a      	cmp	r2, r3
 8008bda:	d802      	bhi.n	8008be2 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8008bdc:	4a1f      	ldr	r2, [pc, #124]	@ (8008c5c <prvAddNewTaskToReadyList+0xc8>)
 8008bde:	687b      	ldr	r3, [r7, #4]
 8008be0:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8008be2:	4b20      	ldr	r3, [pc, #128]	@ (8008c64 <prvAddNewTaskToReadyList+0xd0>)
 8008be4:	681b      	ldr	r3, [r3, #0]
 8008be6:	3301      	adds	r3, #1
 8008be8:	4a1e      	ldr	r2, [pc, #120]	@ (8008c64 <prvAddNewTaskToReadyList+0xd0>)
 8008bea:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8008bec:	4b1d      	ldr	r3, [pc, #116]	@ (8008c64 <prvAddNewTaskToReadyList+0xd0>)
 8008bee:	681a      	ldr	r2, [r3, #0]
 8008bf0:	687b      	ldr	r3, [r7, #4]
 8008bf2:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8008bf4:	687b      	ldr	r3, [r7, #4]
 8008bf6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008bf8:	4b1b      	ldr	r3, [pc, #108]	@ (8008c68 <prvAddNewTaskToReadyList+0xd4>)
 8008bfa:	681b      	ldr	r3, [r3, #0]
 8008bfc:	429a      	cmp	r2, r3
 8008bfe:	d903      	bls.n	8008c08 <prvAddNewTaskToReadyList+0x74>
 8008c00:	687b      	ldr	r3, [r7, #4]
 8008c02:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008c04:	4a18      	ldr	r2, [pc, #96]	@ (8008c68 <prvAddNewTaskToReadyList+0xd4>)
 8008c06:	6013      	str	r3, [r2, #0]
 8008c08:	687b      	ldr	r3, [r7, #4]
 8008c0a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008c0c:	4613      	mov	r3, r2
 8008c0e:	009b      	lsls	r3, r3, #2
 8008c10:	4413      	add	r3, r2
 8008c12:	009b      	lsls	r3, r3, #2
 8008c14:	4a15      	ldr	r2, [pc, #84]	@ (8008c6c <prvAddNewTaskToReadyList+0xd8>)
 8008c16:	441a      	add	r2, r3
 8008c18:	687b      	ldr	r3, [r7, #4]
 8008c1a:	3304      	adds	r3, #4
 8008c1c:	4619      	mov	r1, r3
 8008c1e:	4610      	mov	r0, r2
 8008c20:	f7ff f8e9 	bl	8007df6 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8008c24:	f001 fa2a 	bl	800a07c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8008c28:	4b0d      	ldr	r3, [pc, #52]	@ (8008c60 <prvAddNewTaskToReadyList+0xcc>)
 8008c2a:	681b      	ldr	r3, [r3, #0]
 8008c2c:	2b00      	cmp	r3, #0
 8008c2e:	d00e      	beq.n	8008c4e <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8008c30:	4b0a      	ldr	r3, [pc, #40]	@ (8008c5c <prvAddNewTaskToReadyList+0xc8>)
 8008c32:	681b      	ldr	r3, [r3, #0]
 8008c34:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008c36:	687b      	ldr	r3, [r7, #4]
 8008c38:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008c3a:	429a      	cmp	r2, r3
 8008c3c:	d207      	bcs.n	8008c4e <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8008c3e:	4b0c      	ldr	r3, [pc, #48]	@ (8008c70 <prvAddNewTaskToReadyList+0xdc>)
 8008c40:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008c44:	601a      	str	r2, [r3, #0]
 8008c46:	f3bf 8f4f 	dsb	sy
 8008c4a:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008c4e:	bf00      	nop
 8008c50:	3708      	adds	r7, #8
 8008c52:	46bd      	mov	sp, r7
 8008c54:	bd80      	pop	{r7, pc}
 8008c56:	bf00      	nop
 8008c58:	24001234 	.word	0x24001234
 8008c5c:	24000d60 	.word	0x24000d60
 8008c60:	24001240 	.word	0x24001240
 8008c64:	24001250 	.word	0x24001250
 8008c68:	2400123c 	.word	0x2400123c
 8008c6c:	24000d64 	.word	0x24000d64
 8008c70:	e000ed04 	.word	0xe000ed04

08008c74 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8008c74:	b580      	push	{r7, lr}
 8008c76:	b08a      	sub	sp, #40	@ 0x28
 8008c78:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8008c7a:	2300      	movs	r3, #0
 8008c7c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8008c7e:	2300      	movs	r3, #0
 8008c80:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8008c82:	463a      	mov	r2, r7
 8008c84:	1d39      	adds	r1, r7, #4
 8008c86:	f107 0308 	add.w	r3, r7, #8
 8008c8a:	4618      	mov	r0, r3
 8008c8c:	f7ff f852 	bl	8007d34 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8008c90:	6839      	ldr	r1, [r7, #0]
 8008c92:	687b      	ldr	r3, [r7, #4]
 8008c94:	68ba      	ldr	r2, [r7, #8]
 8008c96:	9202      	str	r2, [sp, #8]
 8008c98:	9301      	str	r3, [sp, #4]
 8008c9a:	2300      	movs	r3, #0
 8008c9c:	9300      	str	r3, [sp, #0]
 8008c9e:	2300      	movs	r3, #0
 8008ca0:	460a      	mov	r2, r1
 8008ca2:	4924      	ldr	r1, [pc, #144]	@ (8008d34 <vTaskStartScheduler+0xc0>)
 8008ca4:	4824      	ldr	r0, [pc, #144]	@ (8008d38 <vTaskStartScheduler+0xc4>)
 8008ca6:	f7ff fe27 	bl	80088f8 <xTaskCreateStatic>
 8008caa:	4603      	mov	r3, r0
 8008cac:	4a23      	ldr	r2, [pc, #140]	@ (8008d3c <vTaskStartScheduler+0xc8>)
 8008cae:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8008cb0:	4b22      	ldr	r3, [pc, #136]	@ (8008d3c <vTaskStartScheduler+0xc8>)
 8008cb2:	681b      	ldr	r3, [r3, #0]
 8008cb4:	2b00      	cmp	r3, #0
 8008cb6:	d002      	beq.n	8008cbe <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8008cb8:	2301      	movs	r3, #1
 8008cba:	617b      	str	r3, [r7, #20]
 8008cbc:	e001      	b.n	8008cc2 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8008cbe:	2300      	movs	r3, #0
 8008cc0:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8008cc2:	697b      	ldr	r3, [r7, #20]
 8008cc4:	2b01      	cmp	r3, #1
 8008cc6:	d102      	bne.n	8008cce <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8008cc8:	f000 fd1a 	bl	8009700 <xTimerCreateTimerTask>
 8008ccc:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8008cce:	697b      	ldr	r3, [r7, #20]
 8008cd0:	2b01      	cmp	r3, #1
 8008cd2:	d11b      	bne.n	8008d0c <vTaskStartScheduler+0x98>
	__asm volatile
 8008cd4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008cd8:	f383 8811 	msr	BASEPRI, r3
 8008cdc:	f3bf 8f6f 	isb	sy
 8008ce0:	f3bf 8f4f 	dsb	sy
 8008ce4:	613b      	str	r3, [r7, #16]
}
 8008ce6:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8008ce8:	4b15      	ldr	r3, [pc, #84]	@ (8008d40 <vTaskStartScheduler+0xcc>)
 8008cea:	681b      	ldr	r3, [r3, #0]
 8008cec:	3354      	adds	r3, #84	@ 0x54
 8008cee:	4a15      	ldr	r2, [pc, #84]	@ (8008d44 <vTaskStartScheduler+0xd0>)
 8008cf0:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8008cf2:	4b15      	ldr	r3, [pc, #84]	@ (8008d48 <vTaskStartScheduler+0xd4>)
 8008cf4:	f04f 32ff 	mov.w	r2, #4294967295
 8008cf8:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8008cfa:	4b14      	ldr	r3, [pc, #80]	@ (8008d4c <vTaskStartScheduler+0xd8>)
 8008cfc:	2201      	movs	r2, #1
 8008cfe:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8008d00:	4b13      	ldr	r3, [pc, #76]	@ (8008d50 <vTaskStartScheduler+0xdc>)
 8008d02:	2200      	movs	r2, #0
 8008d04:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8008d06:	f001 f8e3 	bl	8009ed0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8008d0a:	e00f      	b.n	8008d2c <vTaskStartScheduler+0xb8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8008d0c:	697b      	ldr	r3, [r7, #20]
 8008d0e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008d12:	d10b      	bne.n	8008d2c <vTaskStartScheduler+0xb8>
	__asm volatile
 8008d14:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008d18:	f383 8811 	msr	BASEPRI, r3
 8008d1c:	f3bf 8f6f 	isb	sy
 8008d20:	f3bf 8f4f 	dsb	sy
 8008d24:	60fb      	str	r3, [r7, #12]
}
 8008d26:	bf00      	nop
 8008d28:	bf00      	nop
 8008d2a:	e7fd      	b.n	8008d28 <vTaskStartScheduler+0xb4>
}
 8008d2c:	bf00      	nop
 8008d2e:	3718      	adds	r7, #24
 8008d30:	46bd      	mov	sp, r7
 8008d32:	bd80      	pop	{r7, pc}
 8008d34:	0800a82c 	.word	0x0800a82c
 8008d38:	08009385 	.word	0x08009385
 8008d3c:	24001258 	.word	0x24001258
 8008d40:	24000d60 	.word	0x24000d60
 8008d44:	24000014 	.word	0x24000014
 8008d48:	24001254 	.word	0x24001254
 8008d4c:	24001240 	.word	0x24001240
 8008d50:	24001238 	.word	0x24001238

08008d54 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8008d54:	b480      	push	{r7}
 8008d56:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8008d58:	4b04      	ldr	r3, [pc, #16]	@ (8008d6c <vTaskSuspendAll+0x18>)
 8008d5a:	681b      	ldr	r3, [r3, #0]
 8008d5c:	3301      	adds	r3, #1
 8008d5e:	4a03      	ldr	r2, [pc, #12]	@ (8008d6c <vTaskSuspendAll+0x18>)
 8008d60:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8008d62:	bf00      	nop
 8008d64:	46bd      	mov	sp, r7
 8008d66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d6a:	4770      	bx	lr
 8008d6c:	2400125c 	.word	0x2400125c

08008d70 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8008d70:	b580      	push	{r7, lr}
 8008d72:	b084      	sub	sp, #16
 8008d74:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8008d76:	2300      	movs	r3, #0
 8008d78:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8008d7a:	2300      	movs	r3, #0
 8008d7c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8008d7e:	4b42      	ldr	r3, [pc, #264]	@ (8008e88 <xTaskResumeAll+0x118>)
 8008d80:	681b      	ldr	r3, [r3, #0]
 8008d82:	2b00      	cmp	r3, #0
 8008d84:	d10b      	bne.n	8008d9e <xTaskResumeAll+0x2e>
	__asm volatile
 8008d86:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008d8a:	f383 8811 	msr	BASEPRI, r3
 8008d8e:	f3bf 8f6f 	isb	sy
 8008d92:	f3bf 8f4f 	dsb	sy
 8008d96:	603b      	str	r3, [r7, #0]
}
 8008d98:	bf00      	nop
 8008d9a:	bf00      	nop
 8008d9c:	e7fd      	b.n	8008d9a <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8008d9e:	f001 f93b 	bl	800a018 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8008da2:	4b39      	ldr	r3, [pc, #228]	@ (8008e88 <xTaskResumeAll+0x118>)
 8008da4:	681b      	ldr	r3, [r3, #0]
 8008da6:	3b01      	subs	r3, #1
 8008da8:	4a37      	ldr	r2, [pc, #220]	@ (8008e88 <xTaskResumeAll+0x118>)
 8008daa:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008dac:	4b36      	ldr	r3, [pc, #216]	@ (8008e88 <xTaskResumeAll+0x118>)
 8008dae:	681b      	ldr	r3, [r3, #0]
 8008db0:	2b00      	cmp	r3, #0
 8008db2:	d162      	bne.n	8008e7a <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8008db4:	4b35      	ldr	r3, [pc, #212]	@ (8008e8c <xTaskResumeAll+0x11c>)
 8008db6:	681b      	ldr	r3, [r3, #0]
 8008db8:	2b00      	cmp	r3, #0
 8008dba:	d05e      	beq.n	8008e7a <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8008dbc:	e02f      	b.n	8008e1e <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008dbe:	4b34      	ldr	r3, [pc, #208]	@ (8008e90 <xTaskResumeAll+0x120>)
 8008dc0:	68db      	ldr	r3, [r3, #12]
 8008dc2:	68db      	ldr	r3, [r3, #12]
 8008dc4:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8008dc6:	68fb      	ldr	r3, [r7, #12]
 8008dc8:	3318      	adds	r3, #24
 8008dca:	4618      	mov	r0, r3
 8008dcc:	f7ff f870 	bl	8007eb0 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008dd0:	68fb      	ldr	r3, [r7, #12]
 8008dd2:	3304      	adds	r3, #4
 8008dd4:	4618      	mov	r0, r3
 8008dd6:	f7ff f86b 	bl	8007eb0 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8008dda:	68fb      	ldr	r3, [r7, #12]
 8008ddc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008dde:	4b2d      	ldr	r3, [pc, #180]	@ (8008e94 <xTaskResumeAll+0x124>)
 8008de0:	681b      	ldr	r3, [r3, #0]
 8008de2:	429a      	cmp	r2, r3
 8008de4:	d903      	bls.n	8008dee <xTaskResumeAll+0x7e>
 8008de6:	68fb      	ldr	r3, [r7, #12]
 8008de8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008dea:	4a2a      	ldr	r2, [pc, #168]	@ (8008e94 <xTaskResumeAll+0x124>)
 8008dec:	6013      	str	r3, [r2, #0]
 8008dee:	68fb      	ldr	r3, [r7, #12]
 8008df0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008df2:	4613      	mov	r3, r2
 8008df4:	009b      	lsls	r3, r3, #2
 8008df6:	4413      	add	r3, r2
 8008df8:	009b      	lsls	r3, r3, #2
 8008dfa:	4a27      	ldr	r2, [pc, #156]	@ (8008e98 <xTaskResumeAll+0x128>)
 8008dfc:	441a      	add	r2, r3
 8008dfe:	68fb      	ldr	r3, [r7, #12]
 8008e00:	3304      	adds	r3, #4
 8008e02:	4619      	mov	r1, r3
 8008e04:	4610      	mov	r0, r2
 8008e06:	f7fe fff6 	bl	8007df6 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8008e0a:	68fb      	ldr	r3, [r7, #12]
 8008e0c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008e0e:	4b23      	ldr	r3, [pc, #140]	@ (8008e9c <xTaskResumeAll+0x12c>)
 8008e10:	681b      	ldr	r3, [r3, #0]
 8008e12:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008e14:	429a      	cmp	r2, r3
 8008e16:	d302      	bcc.n	8008e1e <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 8008e18:	4b21      	ldr	r3, [pc, #132]	@ (8008ea0 <xTaskResumeAll+0x130>)
 8008e1a:	2201      	movs	r2, #1
 8008e1c:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8008e1e:	4b1c      	ldr	r3, [pc, #112]	@ (8008e90 <xTaskResumeAll+0x120>)
 8008e20:	681b      	ldr	r3, [r3, #0]
 8008e22:	2b00      	cmp	r3, #0
 8008e24:	d1cb      	bne.n	8008dbe <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8008e26:	68fb      	ldr	r3, [r7, #12]
 8008e28:	2b00      	cmp	r3, #0
 8008e2a:	d001      	beq.n	8008e30 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8008e2c:	f000 fb66 	bl	80094fc <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8008e30:	4b1c      	ldr	r3, [pc, #112]	@ (8008ea4 <xTaskResumeAll+0x134>)
 8008e32:	681b      	ldr	r3, [r3, #0]
 8008e34:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8008e36:	687b      	ldr	r3, [r7, #4]
 8008e38:	2b00      	cmp	r3, #0
 8008e3a:	d010      	beq.n	8008e5e <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8008e3c:	f000 f846 	bl	8008ecc <xTaskIncrementTick>
 8008e40:	4603      	mov	r3, r0
 8008e42:	2b00      	cmp	r3, #0
 8008e44:	d002      	beq.n	8008e4c <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 8008e46:	4b16      	ldr	r3, [pc, #88]	@ (8008ea0 <xTaskResumeAll+0x130>)
 8008e48:	2201      	movs	r2, #1
 8008e4a:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8008e4c:	687b      	ldr	r3, [r7, #4]
 8008e4e:	3b01      	subs	r3, #1
 8008e50:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8008e52:	687b      	ldr	r3, [r7, #4]
 8008e54:	2b00      	cmp	r3, #0
 8008e56:	d1f1      	bne.n	8008e3c <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 8008e58:	4b12      	ldr	r3, [pc, #72]	@ (8008ea4 <xTaskResumeAll+0x134>)
 8008e5a:	2200      	movs	r2, #0
 8008e5c:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8008e5e:	4b10      	ldr	r3, [pc, #64]	@ (8008ea0 <xTaskResumeAll+0x130>)
 8008e60:	681b      	ldr	r3, [r3, #0]
 8008e62:	2b00      	cmp	r3, #0
 8008e64:	d009      	beq.n	8008e7a <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8008e66:	2301      	movs	r3, #1
 8008e68:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8008e6a:	4b0f      	ldr	r3, [pc, #60]	@ (8008ea8 <xTaskResumeAll+0x138>)
 8008e6c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008e70:	601a      	str	r2, [r3, #0]
 8008e72:	f3bf 8f4f 	dsb	sy
 8008e76:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8008e7a:	f001 f8ff 	bl	800a07c <vPortExitCritical>

	return xAlreadyYielded;
 8008e7e:	68bb      	ldr	r3, [r7, #8]
}
 8008e80:	4618      	mov	r0, r3
 8008e82:	3710      	adds	r7, #16
 8008e84:	46bd      	mov	sp, r7
 8008e86:	bd80      	pop	{r7, pc}
 8008e88:	2400125c 	.word	0x2400125c
 8008e8c:	24001234 	.word	0x24001234
 8008e90:	240011f4 	.word	0x240011f4
 8008e94:	2400123c 	.word	0x2400123c
 8008e98:	24000d64 	.word	0x24000d64
 8008e9c:	24000d60 	.word	0x24000d60
 8008ea0:	24001248 	.word	0x24001248
 8008ea4:	24001244 	.word	0x24001244
 8008ea8:	e000ed04 	.word	0xe000ed04

08008eac <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8008eac:	b480      	push	{r7}
 8008eae:	b083      	sub	sp, #12
 8008eb0:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8008eb2:	4b05      	ldr	r3, [pc, #20]	@ (8008ec8 <xTaskGetTickCount+0x1c>)
 8008eb4:	681b      	ldr	r3, [r3, #0]
 8008eb6:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8008eb8:	687b      	ldr	r3, [r7, #4]
}
 8008eba:	4618      	mov	r0, r3
 8008ebc:	370c      	adds	r7, #12
 8008ebe:	46bd      	mov	sp, r7
 8008ec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ec4:	4770      	bx	lr
 8008ec6:	bf00      	nop
 8008ec8:	24001238 	.word	0x24001238

08008ecc <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8008ecc:	b580      	push	{r7, lr}
 8008ece:	b086      	sub	sp, #24
 8008ed0:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8008ed2:	2300      	movs	r3, #0
 8008ed4:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008ed6:	4b4f      	ldr	r3, [pc, #316]	@ (8009014 <xTaskIncrementTick+0x148>)
 8008ed8:	681b      	ldr	r3, [r3, #0]
 8008eda:	2b00      	cmp	r3, #0
 8008edc:	f040 8090 	bne.w	8009000 <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8008ee0:	4b4d      	ldr	r3, [pc, #308]	@ (8009018 <xTaskIncrementTick+0x14c>)
 8008ee2:	681b      	ldr	r3, [r3, #0]
 8008ee4:	3301      	adds	r3, #1
 8008ee6:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8008ee8:	4a4b      	ldr	r2, [pc, #300]	@ (8009018 <xTaskIncrementTick+0x14c>)
 8008eea:	693b      	ldr	r3, [r7, #16]
 8008eec:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8008eee:	693b      	ldr	r3, [r7, #16]
 8008ef0:	2b00      	cmp	r3, #0
 8008ef2:	d121      	bne.n	8008f38 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8008ef4:	4b49      	ldr	r3, [pc, #292]	@ (800901c <xTaskIncrementTick+0x150>)
 8008ef6:	681b      	ldr	r3, [r3, #0]
 8008ef8:	681b      	ldr	r3, [r3, #0]
 8008efa:	2b00      	cmp	r3, #0
 8008efc:	d00b      	beq.n	8008f16 <xTaskIncrementTick+0x4a>
	__asm volatile
 8008efe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008f02:	f383 8811 	msr	BASEPRI, r3
 8008f06:	f3bf 8f6f 	isb	sy
 8008f0a:	f3bf 8f4f 	dsb	sy
 8008f0e:	603b      	str	r3, [r7, #0]
}
 8008f10:	bf00      	nop
 8008f12:	bf00      	nop
 8008f14:	e7fd      	b.n	8008f12 <xTaskIncrementTick+0x46>
 8008f16:	4b41      	ldr	r3, [pc, #260]	@ (800901c <xTaskIncrementTick+0x150>)
 8008f18:	681b      	ldr	r3, [r3, #0]
 8008f1a:	60fb      	str	r3, [r7, #12]
 8008f1c:	4b40      	ldr	r3, [pc, #256]	@ (8009020 <xTaskIncrementTick+0x154>)
 8008f1e:	681b      	ldr	r3, [r3, #0]
 8008f20:	4a3e      	ldr	r2, [pc, #248]	@ (800901c <xTaskIncrementTick+0x150>)
 8008f22:	6013      	str	r3, [r2, #0]
 8008f24:	4a3e      	ldr	r2, [pc, #248]	@ (8009020 <xTaskIncrementTick+0x154>)
 8008f26:	68fb      	ldr	r3, [r7, #12]
 8008f28:	6013      	str	r3, [r2, #0]
 8008f2a:	4b3e      	ldr	r3, [pc, #248]	@ (8009024 <xTaskIncrementTick+0x158>)
 8008f2c:	681b      	ldr	r3, [r3, #0]
 8008f2e:	3301      	adds	r3, #1
 8008f30:	4a3c      	ldr	r2, [pc, #240]	@ (8009024 <xTaskIncrementTick+0x158>)
 8008f32:	6013      	str	r3, [r2, #0]
 8008f34:	f000 fae2 	bl	80094fc <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8008f38:	4b3b      	ldr	r3, [pc, #236]	@ (8009028 <xTaskIncrementTick+0x15c>)
 8008f3a:	681b      	ldr	r3, [r3, #0]
 8008f3c:	693a      	ldr	r2, [r7, #16]
 8008f3e:	429a      	cmp	r2, r3
 8008f40:	d349      	bcc.n	8008fd6 <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008f42:	4b36      	ldr	r3, [pc, #216]	@ (800901c <xTaskIncrementTick+0x150>)
 8008f44:	681b      	ldr	r3, [r3, #0]
 8008f46:	681b      	ldr	r3, [r3, #0]
 8008f48:	2b00      	cmp	r3, #0
 8008f4a:	d104      	bne.n	8008f56 <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008f4c:	4b36      	ldr	r3, [pc, #216]	@ (8009028 <xTaskIncrementTick+0x15c>)
 8008f4e:	f04f 32ff 	mov.w	r2, #4294967295
 8008f52:	601a      	str	r2, [r3, #0]
					break;
 8008f54:	e03f      	b.n	8008fd6 <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008f56:	4b31      	ldr	r3, [pc, #196]	@ (800901c <xTaskIncrementTick+0x150>)
 8008f58:	681b      	ldr	r3, [r3, #0]
 8008f5a:	68db      	ldr	r3, [r3, #12]
 8008f5c:	68db      	ldr	r3, [r3, #12]
 8008f5e:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8008f60:	68bb      	ldr	r3, [r7, #8]
 8008f62:	685b      	ldr	r3, [r3, #4]
 8008f64:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8008f66:	693a      	ldr	r2, [r7, #16]
 8008f68:	687b      	ldr	r3, [r7, #4]
 8008f6a:	429a      	cmp	r2, r3
 8008f6c:	d203      	bcs.n	8008f76 <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8008f6e:	4a2e      	ldr	r2, [pc, #184]	@ (8009028 <xTaskIncrementTick+0x15c>)
 8008f70:	687b      	ldr	r3, [r7, #4]
 8008f72:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8008f74:	e02f      	b.n	8008fd6 <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008f76:	68bb      	ldr	r3, [r7, #8]
 8008f78:	3304      	adds	r3, #4
 8008f7a:	4618      	mov	r0, r3
 8008f7c:	f7fe ff98 	bl	8007eb0 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8008f80:	68bb      	ldr	r3, [r7, #8]
 8008f82:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008f84:	2b00      	cmp	r3, #0
 8008f86:	d004      	beq.n	8008f92 <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8008f88:	68bb      	ldr	r3, [r7, #8]
 8008f8a:	3318      	adds	r3, #24
 8008f8c:	4618      	mov	r0, r3
 8008f8e:	f7fe ff8f 	bl	8007eb0 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8008f92:	68bb      	ldr	r3, [r7, #8]
 8008f94:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008f96:	4b25      	ldr	r3, [pc, #148]	@ (800902c <xTaskIncrementTick+0x160>)
 8008f98:	681b      	ldr	r3, [r3, #0]
 8008f9a:	429a      	cmp	r2, r3
 8008f9c:	d903      	bls.n	8008fa6 <xTaskIncrementTick+0xda>
 8008f9e:	68bb      	ldr	r3, [r7, #8]
 8008fa0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008fa2:	4a22      	ldr	r2, [pc, #136]	@ (800902c <xTaskIncrementTick+0x160>)
 8008fa4:	6013      	str	r3, [r2, #0]
 8008fa6:	68bb      	ldr	r3, [r7, #8]
 8008fa8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008faa:	4613      	mov	r3, r2
 8008fac:	009b      	lsls	r3, r3, #2
 8008fae:	4413      	add	r3, r2
 8008fb0:	009b      	lsls	r3, r3, #2
 8008fb2:	4a1f      	ldr	r2, [pc, #124]	@ (8009030 <xTaskIncrementTick+0x164>)
 8008fb4:	441a      	add	r2, r3
 8008fb6:	68bb      	ldr	r3, [r7, #8]
 8008fb8:	3304      	adds	r3, #4
 8008fba:	4619      	mov	r1, r3
 8008fbc:	4610      	mov	r0, r2
 8008fbe:	f7fe ff1a 	bl	8007df6 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8008fc2:	68bb      	ldr	r3, [r7, #8]
 8008fc4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008fc6:	4b1b      	ldr	r3, [pc, #108]	@ (8009034 <xTaskIncrementTick+0x168>)
 8008fc8:	681b      	ldr	r3, [r3, #0]
 8008fca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008fcc:	429a      	cmp	r2, r3
 8008fce:	d3b8      	bcc.n	8008f42 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 8008fd0:	2301      	movs	r3, #1
 8008fd2:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008fd4:	e7b5      	b.n	8008f42 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8008fd6:	4b17      	ldr	r3, [pc, #92]	@ (8009034 <xTaskIncrementTick+0x168>)
 8008fd8:	681b      	ldr	r3, [r3, #0]
 8008fda:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008fdc:	4914      	ldr	r1, [pc, #80]	@ (8009030 <xTaskIncrementTick+0x164>)
 8008fde:	4613      	mov	r3, r2
 8008fe0:	009b      	lsls	r3, r3, #2
 8008fe2:	4413      	add	r3, r2
 8008fe4:	009b      	lsls	r3, r3, #2
 8008fe6:	440b      	add	r3, r1
 8008fe8:	681b      	ldr	r3, [r3, #0]
 8008fea:	2b01      	cmp	r3, #1
 8008fec:	d901      	bls.n	8008ff2 <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 8008fee:	2301      	movs	r3, #1
 8008ff0:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8008ff2:	4b11      	ldr	r3, [pc, #68]	@ (8009038 <xTaskIncrementTick+0x16c>)
 8008ff4:	681b      	ldr	r3, [r3, #0]
 8008ff6:	2b00      	cmp	r3, #0
 8008ff8:	d007      	beq.n	800900a <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 8008ffa:	2301      	movs	r3, #1
 8008ffc:	617b      	str	r3, [r7, #20]
 8008ffe:	e004      	b.n	800900a <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8009000:	4b0e      	ldr	r3, [pc, #56]	@ (800903c <xTaskIncrementTick+0x170>)
 8009002:	681b      	ldr	r3, [r3, #0]
 8009004:	3301      	adds	r3, #1
 8009006:	4a0d      	ldr	r2, [pc, #52]	@ (800903c <xTaskIncrementTick+0x170>)
 8009008:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800900a:	697b      	ldr	r3, [r7, #20]
}
 800900c:	4618      	mov	r0, r3
 800900e:	3718      	adds	r7, #24
 8009010:	46bd      	mov	sp, r7
 8009012:	bd80      	pop	{r7, pc}
 8009014:	2400125c 	.word	0x2400125c
 8009018:	24001238 	.word	0x24001238
 800901c:	240011ec 	.word	0x240011ec
 8009020:	240011f0 	.word	0x240011f0
 8009024:	2400124c 	.word	0x2400124c
 8009028:	24001254 	.word	0x24001254
 800902c:	2400123c 	.word	0x2400123c
 8009030:	24000d64 	.word	0x24000d64
 8009034:	24000d60 	.word	0x24000d60
 8009038:	24001248 	.word	0x24001248
 800903c:	24001244 	.word	0x24001244

08009040 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8009040:	b480      	push	{r7}
 8009042:	b085      	sub	sp, #20
 8009044:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8009046:	4b2b      	ldr	r3, [pc, #172]	@ (80090f4 <vTaskSwitchContext+0xb4>)
 8009048:	681b      	ldr	r3, [r3, #0]
 800904a:	2b00      	cmp	r3, #0
 800904c:	d003      	beq.n	8009056 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800904e:	4b2a      	ldr	r3, [pc, #168]	@ (80090f8 <vTaskSwitchContext+0xb8>)
 8009050:	2201      	movs	r2, #1
 8009052:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8009054:	e047      	b.n	80090e6 <vTaskSwitchContext+0xa6>
		xYieldPending = pdFALSE;
 8009056:	4b28      	ldr	r3, [pc, #160]	@ (80090f8 <vTaskSwitchContext+0xb8>)
 8009058:	2200      	movs	r2, #0
 800905a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800905c:	4b27      	ldr	r3, [pc, #156]	@ (80090fc <vTaskSwitchContext+0xbc>)
 800905e:	681b      	ldr	r3, [r3, #0]
 8009060:	60fb      	str	r3, [r7, #12]
 8009062:	e011      	b.n	8009088 <vTaskSwitchContext+0x48>
 8009064:	68fb      	ldr	r3, [r7, #12]
 8009066:	2b00      	cmp	r3, #0
 8009068:	d10b      	bne.n	8009082 <vTaskSwitchContext+0x42>
	__asm volatile
 800906a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800906e:	f383 8811 	msr	BASEPRI, r3
 8009072:	f3bf 8f6f 	isb	sy
 8009076:	f3bf 8f4f 	dsb	sy
 800907a:	607b      	str	r3, [r7, #4]
}
 800907c:	bf00      	nop
 800907e:	bf00      	nop
 8009080:	e7fd      	b.n	800907e <vTaskSwitchContext+0x3e>
 8009082:	68fb      	ldr	r3, [r7, #12]
 8009084:	3b01      	subs	r3, #1
 8009086:	60fb      	str	r3, [r7, #12]
 8009088:	491d      	ldr	r1, [pc, #116]	@ (8009100 <vTaskSwitchContext+0xc0>)
 800908a:	68fa      	ldr	r2, [r7, #12]
 800908c:	4613      	mov	r3, r2
 800908e:	009b      	lsls	r3, r3, #2
 8009090:	4413      	add	r3, r2
 8009092:	009b      	lsls	r3, r3, #2
 8009094:	440b      	add	r3, r1
 8009096:	681b      	ldr	r3, [r3, #0]
 8009098:	2b00      	cmp	r3, #0
 800909a:	d0e3      	beq.n	8009064 <vTaskSwitchContext+0x24>
 800909c:	68fa      	ldr	r2, [r7, #12]
 800909e:	4613      	mov	r3, r2
 80090a0:	009b      	lsls	r3, r3, #2
 80090a2:	4413      	add	r3, r2
 80090a4:	009b      	lsls	r3, r3, #2
 80090a6:	4a16      	ldr	r2, [pc, #88]	@ (8009100 <vTaskSwitchContext+0xc0>)
 80090a8:	4413      	add	r3, r2
 80090aa:	60bb      	str	r3, [r7, #8]
 80090ac:	68bb      	ldr	r3, [r7, #8]
 80090ae:	685b      	ldr	r3, [r3, #4]
 80090b0:	685a      	ldr	r2, [r3, #4]
 80090b2:	68bb      	ldr	r3, [r7, #8]
 80090b4:	605a      	str	r2, [r3, #4]
 80090b6:	68bb      	ldr	r3, [r7, #8]
 80090b8:	685a      	ldr	r2, [r3, #4]
 80090ba:	68bb      	ldr	r3, [r7, #8]
 80090bc:	3308      	adds	r3, #8
 80090be:	429a      	cmp	r2, r3
 80090c0:	d104      	bne.n	80090cc <vTaskSwitchContext+0x8c>
 80090c2:	68bb      	ldr	r3, [r7, #8]
 80090c4:	685b      	ldr	r3, [r3, #4]
 80090c6:	685a      	ldr	r2, [r3, #4]
 80090c8:	68bb      	ldr	r3, [r7, #8]
 80090ca:	605a      	str	r2, [r3, #4]
 80090cc:	68bb      	ldr	r3, [r7, #8]
 80090ce:	685b      	ldr	r3, [r3, #4]
 80090d0:	68db      	ldr	r3, [r3, #12]
 80090d2:	4a0c      	ldr	r2, [pc, #48]	@ (8009104 <vTaskSwitchContext+0xc4>)
 80090d4:	6013      	str	r3, [r2, #0]
 80090d6:	4a09      	ldr	r2, [pc, #36]	@ (80090fc <vTaskSwitchContext+0xbc>)
 80090d8:	68fb      	ldr	r3, [r7, #12]
 80090da:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80090dc:	4b09      	ldr	r3, [pc, #36]	@ (8009104 <vTaskSwitchContext+0xc4>)
 80090de:	681b      	ldr	r3, [r3, #0]
 80090e0:	3354      	adds	r3, #84	@ 0x54
 80090e2:	4a09      	ldr	r2, [pc, #36]	@ (8009108 <vTaskSwitchContext+0xc8>)
 80090e4:	6013      	str	r3, [r2, #0]
}
 80090e6:	bf00      	nop
 80090e8:	3714      	adds	r7, #20
 80090ea:	46bd      	mov	sp, r7
 80090ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090f0:	4770      	bx	lr
 80090f2:	bf00      	nop
 80090f4:	2400125c 	.word	0x2400125c
 80090f8:	24001248 	.word	0x24001248
 80090fc:	2400123c 	.word	0x2400123c
 8009100:	24000d64 	.word	0x24000d64
 8009104:	24000d60 	.word	0x24000d60
 8009108:	24000014 	.word	0x24000014

0800910c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800910c:	b580      	push	{r7, lr}
 800910e:	b084      	sub	sp, #16
 8009110:	af00      	add	r7, sp, #0
 8009112:	6078      	str	r0, [r7, #4]
 8009114:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8009116:	687b      	ldr	r3, [r7, #4]
 8009118:	2b00      	cmp	r3, #0
 800911a:	d10b      	bne.n	8009134 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 800911c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009120:	f383 8811 	msr	BASEPRI, r3
 8009124:	f3bf 8f6f 	isb	sy
 8009128:	f3bf 8f4f 	dsb	sy
 800912c:	60fb      	str	r3, [r7, #12]
}
 800912e:	bf00      	nop
 8009130:	bf00      	nop
 8009132:	e7fd      	b.n	8009130 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8009134:	4b07      	ldr	r3, [pc, #28]	@ (8009154 <vTaskPlaceOnEventList+0x48>)
 8009136:	681b      	ldr	r3, [r3, #0]
 8009138:	3318      	adds	r3, #24
 800913a:	4619      	mov	r1, r3
 800913c:	6878      	ldr	r0, [r7, #4]
 800913e:	f7fe fe7e 	bl	8007e3e <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8009142:	2101      	movs	r1, #1
 8009144:	6838      	ldr	r0, [r7, #0]
 8009146:	f000 fa87 	bl	8009658 <prvAddCurrentTaskToDelayedList>
}
 800914a:	bf00      	nop
 800914c:	3710      	adds	r7, #16
 800914e:	46bd      	mov	sp, r7
 8009150:	bd80      	pop	{r7, pc}
 8009152:	bf00      	nop
 8009154:	24000d60 	.word	0x24000d60

08009158 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8009158:	b580      	push	{r7, lr}
 800915a:	b086      	sub	sp, #24
 800915c:	af00      	add	r7, sp, #0
 800915e:	60f8      	str	r0, [r7, #12]
 8009160:	60b9      	str	r1, [r7, #8]
 8009162:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8009164:	68fb      	ldr	r3, [r7, #12]
 8009166:	2b00      	cmp	r3, #0
 8009168:	d10b      	bne.n	8009182 <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 800916a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800916e:	f383 8811 	msr	BASEPRI, r3
 8009172:	f3bf 8f6f 	isb	sy
 8009176:	f3bf 8f4f 	dsb	sy
 800917a:	617b      	str	r3, [r7, #20]
}
 800917c:	bf00      	nop
 800917e:	bf00      	nop
 8009180:	e7fd      	b.n	800917e <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8009182:	4b0a      	ldr	r3, [pc, #40]	@ (80091ac <vTaskPlaceOnEventListRestricted+0x54>)
 8009184:	681b      	ldr	r3, [r3, #0]
 8009186:	3318      	adds	r3, #24
 8009188:	4619      	mov	r1, r3
 800918a:	68f8      	ldr	r0, [r7, #12]
 800918c:	f7fe fe33 	bl	8007df6 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8009190:	687b      	ldr	r3, [r7, #4]
 8009192:	2b00      	cmp	r3, #0
 8009194:	d002      	beq.n	800919c <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 8009196:	f04f 33ff 	mov.w	r3, #4294967295
 800919a:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800919c:	6879      	ldr	r1, [r7, #4]
 800919e:	68b8      	ldr	r0, [r7, #8]
 80091a0:	f000 fa5a 	bl	8009658 <prvAddCurrentTaskToDelayedList>
	}
 80091a4:	bf00      	nop
 80091a6:	3718      	adds	r7, #24
 80091a8:	46bd      	mov	sp, r7
 80091aa:	bd80      	pop	{r7, pc}
 80091ac:	24000d60 	.word	0x24000d60

080091b0 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80091b0:	b580      	push	{r7, lr}
 80091b2:	b086      	sub	sp, #24
 80091b4:	af00      	add	r7, sp, #0
 80091b6:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80091b8:	687b      	ldr	r3, [r7, #4]
 80091ba:	68db      	ldr	r3, [r3, #12]
 80091bc:	68db      	ldr	r3, [r3, #12]
 80091be:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80091c0:	693b      	ldr	r3, [r7, #16]
 80091c2:	2b00      	cmp	r3, #0
 80091c4:	d10b      	bne.n	80091de <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 80091c6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80091ca:	f383 8811 	msr	BASEPRI, r3
 80091ce:	f3bf 8f6f 	isb	sy
 80091d2:	f3bf 8f4f 	dsb	sy
 80091d6:	60fb      	str	r3, [r7, #12]
}
 80091d8:	bf00      	nop
 80091da:	bf00      	nop
 80091dc:	e7fd      	b.n	80091da <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80091de:	693b      	ldr	r3, [r7, #16]
 80091e0:	3318      	adds	r3, #24
 80091e2:	4618      	mov	r0, r3
 80091e4:	f7fe fe64 	bl	8007eb0 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80091e8:	4b1d      	ldr	r3, [pc, #116]	@ (8009260 <xTaskRemoveFromEventList+0xb0>)
 80091ea:	681b      	ldr	r3, [r3, #0]
 80091ec:	2b00      	cmp	r3, #0
 80091ee:	d11d      	bne.n	800922c <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80091f0:	693b      	ldr	r3, [r7, #16]
 80091f2:	3304      	adds	r3, #4
 80091f4:	4618      	mov	r0, r3
 80091f6:	f7fe fe5b 	bl	8007eb0 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80091fa:	693b      	ldr	r3, [r7, #16]
 80091fc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80091fe:	4b19      	ldr	r3, [pc, #100]	@ (8009264 <xTaskRemoveFromEventList+0xb4>)
 8009200:	681b      	ldr	r3, [r3, #0]
 8009202:	429a      	cmp	r2, r3
 8009204:	d903      	bls.n	800920e <xTaskRemoveFromEventList+0x5e>
 8009206:	693b      	ldr	r3, [r7, #16]
 8009208:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800920a:	4a16      	ldr	r2, [pc, #88]	@ (8009264 <xTaskRemoveFromEventList+0xb4>)
 800920c:	6013      	str	r3, [r2, #0]
 800920e:	693b      	ldr	r3, [r7, #16]
 8009210:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009212:	4613      	mov	r3, r2
 8009214:	009b      	lsls	r3, r3, #2
 8009216:	4413      	add	r3, r2
 8009218:	009b      	lsls	r3, r3, #2
 800921a:	4a13      	ldr	r2, [pc, #76]	@ (8009268 <xTaskRemoveFromEventList+0xb8>)
 800921c:	441a      	add	r2, r3
 800921e:	693b      	ldr	r3, [r7, #16]
 8009220:	3304      	adds	r3, #4
 8009222:	4619      	mov	r1, r3
 8009224:	4610      	mov	r0, r2
 8009226:	f7fe fde6 	bl	8007df6 <vListInsertEnd>
 800922a:	e005      	b.n	8009238 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800922c:	693b      	ldr	r3, [r7, #16]
 800922e:	3318      	adds	r3, #24
 8009230:	4619      	mov	r1, r3
 8009232:	480e      	ldr	r0, [pc, #56]	@ (800926c <xTaskRemoveFromEventList+0xbc>)
 8009234:	f7fe fddf 	bl	8007df6 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8009238:	693b      	ldr	r3, [r7, #16]
 800923a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800923c:	4b0c      	ldr	r3, [pc, #48]	@ (8009270 <xTaskRemoveFromEventList+0xc0>)
 800923e:	681b      	ldr	r3, [r3, #0]
 8009240:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009242:	429a      	cmp	r2, r3
 8009244:	d905      	bls.n	8009252 <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8009246:	2301      	movs	r3, #1
 8009248:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800924a:	4b0a      	ldr	r3, [pc, #40]	@ (8009274 <xTaskRemoveFromEventList+0xc4>)
 800924c:	2201      	movs	r2, #1
 800924e:	601a      	str	r2, [r3, #0]
 8009250:	e001      	b.n	8009256 <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 8009252:	2300      	movs	r3, #0
 8009254:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8009256:	697b      	ldr	r3, [r7, #20]
}
 8009258:	4618      	mov	r0, r3
 800925a:	3718      	adds	r7, #24
 800925c:	46bd      	mov	sp, r7
 800925e:	bd80      	pop	{r7, pc}
 8009260:	2400125c 	.word	0x2400125c
 8009264:	2400123c 	.word	0x2400123c
 8009268:	24000d64 	.word	0x24000d64
 800926c:	240011f4 	.word	0x240011f4
 8009270:	24000d60 	.word	0x24000d60
 8009274:	24001248 	.word	0x24001248

08009278 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8009278:	b480      	push	{r7}
 800927a:	b083      	sub	sp, #12
 800927c:	af00      	add	r7, sp, #0
 800927e:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8009280:	4b06      	ldr	r3, [pc, #24]	@ (800929c <vTaskInternalSetTimeOutState+0x24>)
 8009282:	681a      	ldr	r2, [r3, #0]
 8009284:	687b      	ldr	r3, [r7, #4]
 8009286:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8009288:	4b05      	ldr	r3, [pc, #20]	@ (80092a0 <vTaskInternalSetTimeOutState+0x28>)
 800928a:	681a      	ldr	r2, [r3, #0]
 800928c:	687b      	ldr	r3, [r7, #4]
 800928e:	605a      	str	r2, [r3, #4]
}
 8009290:	bf00      	nop
 8009292:	370c      	adds	r7, #12
 8009294:	46bd      	mov	sp, r7
 8009296:	f85d 7b04 	ldr.w	r7, [sp], #4
 800929a:	4770      	bx	lr
 800929c:	2400124c 	.word	0x2400124c
 80092a0:	24001238 	.word	0x24001238

080092a4 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80092a4:	b580      	push	{r7, lr}
 80092a6:	b088      	sub	sp, #32
 80092a8:	af00      	add	r7, sp, #0
 80092aa:	6078      	str	r0, [r7, #4]
 80092ac:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80092ae:	687b      	ldr	r3, [r7, #4]
 80092b0:	2b00      	cmp	r3, #0
 80092b2:	d10b      	bne.n	80092cc <xTaskCheckForTimeOut+0x28>
	__asm volatile
 80092b4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80092b8:	f383 8811 	msr	BASEPRI, r3
 80092bc:	f3bf 8f6f 	isb	sy
 80092c0:	f3bf 8f4f 	dsb	sy
 80092c4:	613b      	str	r3, [r7, #16]
}
 80092c6:	bf00      	nop
 80092c8:	bf00      	nop
 80092ca:	e7fd      	b.n	80092c8 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 80092cc:	683b      	ldr	r3, [r7, #0]
 80092ce:	2b00      	cmp	r3, #0
 80092d0:	d10b      	bne.n	80092ea <xTaskCheckForTimeOut+0x46>
	__asm volatile
 80092d2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80092d6:	f383 8811 	msr	BASEPRI, r3
 80092da:	f3bf 8f6f 	isb	sy
 80092de:	f3bf 8f4f 	dsb	sy
 80092e2:	60fb      	str	r3, [r7, #12]
}
 80092e4:	bf00      	nop
 80092e6:	bf00      	nop
 80092e8:	e7fd      	b.n	80092e6 <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 80092ea:	f000 fe95 	bl	800a018 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80092ee:	4b1d      	ldr	r3, [pc, #116]	@ (8009364 <xTaskCheckForTimeOut+0xc0>)
 80092f0:	681b      	ldr	r3, [r3, #0]
 80092f2:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80092f4:	687b      	ldr	r3, [r7, #4]
 80092f6:	685b      	ldr	r3, [r3, #4]
 80092f8:	69ba      	ldr	r2, [r7, #24]
 80092fa:	1ad3      	subs	r3, r2, r3
 80092fc:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80092fe:	683b      	ldr	r3, [r7, #0]
 8009300:	681b      	ldr	r3, [r3, #0]
 8009302:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009306:	d102      	bne.n	800930e <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8009308:	2300      	movs	r3, #0
 800930a:	61fb      	str	r3, [r7, #28]
 800930c:	e023      	b.n	8009356 <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800930e:	687b      	ldr	r3, [r7, #4]
 8009310:	681a      	ldr	r2, [r3, #0]
 8009312:	4b15      	ldr	r3, [pc, #84]	@ (8009368 <xTaskCheckForTimeOut+0xc4>)
 8009314:	681b      	ldr	r3, [r3, #0]
 8009316:	429a      	cmp	r2, r3
 8009318:	d007      	beq.n	800932a <xTaskCheckForTimeOut+0x86>
 800931a:	687b      	ldr	r3, [r7, #4]
 800931c:	685b      	ldr	r3, [r3, #4]
 800931e:	69ba      	ldr	r2, [r7, #24]
 8009320:	429a      	cmp	r2, r3
 8009322:	d302      	bcc.n	800932a <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8009324:	2301      	movs	r3, #1
 8009326:	61fb      	str	r3, [r7, #28]
 8009328:	e015      	b.n	8009356 <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800932a:	683b      	ldr	r3, [r7, #0]
 800932c:	681b      	ldr	r3, [r3, #0]
 800932e:	697a      	ldr	r2, [r7, #20]
 8009330:	429a      	cmp	r2, r3
 8009332:	d20b      	bcs.n	800934c <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8009334:	683b      	ldr	r3, [r7, #0]
 8009336:	681a      	ldr	r2, [r3, #0]
 8009338:	697b      	ldr	r3, [r7, #20]
 800933a:	1ad2      	subs	r2, r2, r3
 800933c:	683b      	ldr	r3, [r7, #0]
 800933e:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8009340:	6878      	ldr	r0, [r7, #4]
 8009342:	f7ff ff99 	bl	8009278 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8009346:	2300      	movs	r3, #0
 8009348:	61fb      	str	r3, [r7, #28]
 800934a:	e004      	b.n	8009356 <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 800934c:	683b      	ldr	r3, [r7, #0]
 800934e:	2200      	movs	r2, #0
 8009350:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8009352:	2301      	movs	r3, #1
 8009354:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8009356:	f000 fe91 	bl	800a07c <vPortExitCritical>

	return xReturn;
 800935a:	69fb      	ldr	r3, [r7, #28]
}
 800935c:	4618      	mov	r0, r3
 800935e:	3720      	adds	r7, #32
 8009360:	46bd      	mov	sp, r7
 8009362:	bd80      	pop	{r7, pc}
 8009364:	24001238 	.word	0x24001238
 8009368:	2400124c 	.word	0x2400124c

0800936c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800936c:	b480      	push	{r7}
 800936e:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8009370:	4b03      	ldr	r3, [pc, #12]	@ (8009380 <vTaskMissedYield+0x14>)
 8009372:	2201      	movs	r2, #1
 8009374:	601a      	str	r2, [r3, #0]
}
 8009376:	bf00      	nop
 8009378:	46bd      	mov	sp, r7
 800937a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800937e:	4770      	bx	lr
 8009380:	24001248 	.word	0x24001248

08009384 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8009384:	b580      	push	{r7, lr}
 8009386:	b082      	sub	sp, #8
 8009388:	af00      	add	r7, sp, #0
 800938a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800938c:	f000 f852 	bl	8009434 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8009390:	4b06      	ldr	r3, [pc, #24]	@ (80093ac <prvIdleTask+0x28>)
 8009392:	681b      	ldr	r3, [r3, #0]
 8009394:	2b01      	cmp	r3, #1
 8009396:	d9f9      	bls.n	800938c <prvIdleTask+0x8>
			{
				taskYIELD();
 8009398:	4b05      	ldr	r3, [pc, #20]	@ (80093b0 <prvIdleTask+0x2c>)
 800939a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800939e:	601a      	str	r2, [r3, #0]
 80093a0:	f3bf 8f4f 	dsb	sy
 80093a4:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80093a8:	e7f0      	b.n	800938c <prvIdleTask+0x8>
 80093aa:	bf00      	nop
 80093ac:	24000d64 	.word	0x24000d64
 80093b0:	e000ed04 	.word	0xe000ed04

080093b4 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80093b4:	b580      	push	{r7, lr}
 80093b6:	b082      	sub	sp, #8
 80093b8:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80093ba:	2300      	movs	r3, #0
 80093bc:	607b      	str	r3, [r7, #4]
 80093be:	e00c      	b.n	80093da <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80093c0:	687a      	ldr	r2, [r7, #4]
 80093c2:	4613      	mov	r3, r2
 80093c4:	009b      	lsls	r3, r3, #2
 80093c6:	4413      	add	r3, r2
 80093c8:	009b      	lsls	r3, r3, #2
 80093ca:	4a12      	ldr	r2, [pc, #72]	@ (8009414 <prvInitialiseTaskLists+0x60>)
 80093cc:	4413      	add	r3, r2
 80093ce:	4618      	mov	r0, r3
 80093d0:	f7fe fce4 	bl	8007d9c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80093d4:	687b      	ldr	r3, [r7, #4]
 80093d6:	3301      	adds	r3, #1
 80093d8:	607b      	str	r3, [r7, #4]
 80093da:	687b      	ldr	r3, [r7, #4]
 80093dc:	2b37      	cmp	r3, #55	@ 0x37
 80093de:	d9ef      	bls.n	80093c0 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80093e0:	480d      	ldr	r0, [pc, #52]	@ (8009418 <prvInitialiseTaskLists+0x64>)
 80093e2:	f7fe fcdb 	bl	8007d9c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80093e6:	480d      	ldr	r0, [pc, #52]	@ (800941c <prvInitialiseTaskLists+0x68>)
 80093e8:	f7fe fcd8 	bl	8007d9c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80093ec:	480c      	ldr	r0, [pc, #48]	@ (8009420 <prvInitialiseTaskLists+0x6c>)
 80093ee:	f7fe fcd5 	bl	8007d9c <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80093f2:	480c      	ldr	r0, [pc, #48]	@ (8009424 <prvInitialiseTaskLists+0x70>)
 80093f4:	f7fe fcd2 	bl	8007d9c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80093f8:	480b      	ldr	r0, [pc, #44]	@ (8009428 <prvInitialiseTaskLists+0x74>)
 80093fa:	f7fe fccf 	bl	8007d9c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80093fe:	4b0b      	ldr	r3, [pc, #44]	@ (800942c <prvInitialiseTaskLists+0x78>)
 8009400:	4a05      	ldr	r2, [pc, #20]	@ (8009418 <prvInitialiseTaskLists+0x64>)
 8009402:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8009404:	4b0a      	ldr	r3, [pc, #40]	@ (8009430 <prvInitialiseTaskLists+0x7c>)
 8009406:	4a05      	ldr	r2, [pc, #20]	@ (800941c <prvInitialiseTaskLists+0x68>)
 8009408:	601a      	str	r2, [r3, #0]
}
 800940a:	bf00      	nop
 800940c:	3708      	adds	r7, #8
 800940e:	46bd      	mov	sp, r7
 8009410:	bd80      	pop	{r7, pc}
 8009412:	bf00      	nop
 8009414:	24000d64 	.word	0x24000d64
 8009418:	240011c4 	.word	0x240011c4
 800941c:	240011d8 	.word	0x240011d8
 8009420:	240011f4 	.word	0x240011f4
 8009424:	24001208 	.word	0x24001208
 8009428:	24001220 	.word	0x24001220
 800942c:	240011ec 	.word	0x240011ec
 8009430:	240011f0 	.word	0x240011f0

08009434 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8009434:	b580      	push	{r7, lr}
 8009436:	b082      	sub	sp, #8
 8009438:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800943a:	e019      	b.n	8009470 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800943c:	f000 fdec 	bl	800a018 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009440:	4b10      	ldr	r3, [pc, #64]	@ (8009484 <prvCheckTasksWaitingTermination+0x50>)
 8009442:	68db      	ldr	r3, [r3, #12]
 8009444:	68db      	ldr	r3, [r3, #12]
 8009446:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009448:	687b      	ldr	r3, [r7, #4]
 800944a:	3304      	adds	r3, #4
 800944c:	4618      	mov	r0, r3
 800944e:	f7fe fd2f 	bl	8007eb0 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8009452:	4b0d      	ldr	r3, [pc, #52]	@ (8009488 <prvCheckTasksWaitingTermination+0x54>)
 8009454:	681b      	ldr	r3, [r3, #0]
 8009456:	3b01      	subs	r3, #1
 8009458:	4a0b      	ldr	r2, [pc, #44]	@ (8009488 <prvCheckTasksWaitingTermination+0x54>)
 800945a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800945c:	4b0b      	ldr	r3, [pc, #44]	@ (800948c <prvCheckTasksWaitingTermination+0x58>)
 800945e:	681b      	ldr	r3, [r3, #0]
 8009460:	3b01      	subs	r3, #1
 8009462:	4a0a      	ldr	r2, [pc, #40]	@ (800948c <prvCheckTasksWaitingTermination+0x58>)
 8009464:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8009466:	f000 fe09 	bl	800a07c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800946a:	6878      	ldr	r0, [r7, #4]
 800946c:	f000 f810 	bl	8009490 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8009470:	4b06      	ldr	r3, [pc, #24]	@ (800948c <prvCheckTasksWaitingTermination+0x58>)
 8009472:	681b      	ldr	r3, [r3, #0]
 8009474:	2b00      	cmp	r3, #0
 8009476:	d1e1      	bne.n	800943c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8009478:	bf00      	nop
 800947a:	bf00      	nop
 800947c:	3708      	adds	r7, #8
 800947e:	46bd      	mov	sp, r7
 8009480:	bd80      	pop	{r7, pc}
 8009482:	bf00      	nop
 8009484:	24001208 	.word	0x24001208
 8009488:	24001234 	.word	0x24001234
 800948c:	2400121c 	.word	0x2400121c

08009490 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8009490:	b580      	push	{r7, lr}
 8009492:	b084      	sub	sp, #16
 8009494:	af00      	add	r7, sp, #0
 8009496:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8009498:	687b      	ldr	r3, [r7, #4]
 800949a:	3354      	adds	r3, #84	@ 0x54
 800949c:	4618      	mov	r0, r3
 800949e:	f001 f8d3 	bl	800a648 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80094a2:	687b      	ldr	r3, [r7, #4]
 80094a4:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 80094a8:	2b00      	cmp	r3, #0
 80094aa:	d108      	bne.n	80094be <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80094ac:	687b      	ldr	r3, [r7, #4]
 80094ae:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80094b0:	4618      	mov	r0, r3
 80094b2:	f000 ffa1 	bl	800a3f8 <vPortFree>
				vPortFree( pxTCB );
 80094b6:	6878      	ldr	r0, [r7, #4]
 80094b8:	f000 ff9e 	bl	800a3f8 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80094bc:	e019      	b.n	80094f2 <prvDeleteTCB+0x62>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80094be:	687b      	ldr	r3, [r7, #4]
 80094c0:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 80094c4:	2b01      	cmp	r3, #1
 80094c6:	d103      	bne.n	80094d0 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 80094c8:	6878      	ldr	r0, [r7, #4]
 80094ca:	f000 ff95 	bl	800a3f8 <vPortFree>
	}
 80094ce:	e010      	b.n	80094f2 <prvDeleteTCB+0x62>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80094d0:	687b      	ldr	r3, [r7, #4]
 80094d2:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 80094d6:	2b02      	cmp	r3, #2
 80094d8:	d00b      	beq.n	80094f2 <prvDeleteTCB+0x62>
	__asm volatile
 80094da:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80094de:	f383 8811 	msr	BASEPRI, r3
 80094e2:	f3bf 8f6f 	isb	sy
 80094e6:	f3bf 8f4f 	dsb	sy
 80094ea:	60fb      	str	r3, [r7, #12]
}
 80094ec:	bf00      	nop
 80094ee:	bf00      	nop
 80094f0:	e7fd      	b.n	80094ee <prvDeleteTCB+0x5e>
	}
 80094f2:	bf00      	nop
 80094f4:	3710      	adds	r7, #16
 80094f6:	46bd      	mov	sp, r7
 80094f8:	bd80      	pop	{r7, pc}
	...

080094fc <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80094fc:	b480      	push	{r7}
 80094fe:	b083      	sub	sp, #12
 8009500:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8009502:	4b0c      	ldr	r3, [pc, #48]	@ (8009534 <prvResetNextTaskUnblockTime+0x38>)
 8009504:	681b      	ldr	r3, [r3, #0]
 8009506:	681b      	ldr	r3, [r3, #0]
 8009508:	2b00      	cmp	r3, #0
 800950a:	d104      	bne.n	8009516 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800950c:	4b0a      	ldr	r3, [pc, #40]	@ (8009538 <prvResetNextTaskUnblockTime+0x3c>)
 800950e:	f04f 32ff 	mov.w	r2, #4294967295
 8009512:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8009514:	e008      	b.n	8009528 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009516:	4b07      	ldr	r3, [pc, #28]	@ (8009534 <prvResetNextTaskUnblockTime+0x38>)
 8009518:	681b      	ldr	r3, [r3, #0]
 800951a:	68db      	ldr	r3, [r3, #12]
 800951c:	68db      	ldr	r3, [r3, #12]
 800951e:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8009520:	687b      	ldr	r3, [r7, #4]
 8009522:	685b      	ldr	r3, [r3, #4]
 8009524:	4a04      	ldr	r2, [pc, #16]	@ (8009538 <prvResetNextTaskUnblockTime+0x3c>)
 8009526:	6013      	str	r3, [r2, #0]
}
 8009528:	bf00      	nop
 800952a:	370c      	adds	r7, #12
 800952c:	46bd      	mov	sp, r7
 800952e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009532:	4770      	bx	lr
 8009534:	240011ec 	.word	0x240011ec
 8009538:	24001254 	.word	0x24001254

0800953c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800953c:	b480      	push	{r7}
 800953e:	b083      	sub	sp, #12
 8009540:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8009542:	4b0b      	ldr	r3, [pc, #44]	@ (8009570 <xTaskGetSchedulerState+0x34>)
 8009544:	681b      	ldr	r3, [r3, #0]
 8009546:	2b00      	cmp	r3, #0
 8009548:	d102      	bne.n	8009550 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800954a:	2301      	movs	r3, #1
 800954c:	607b      	str	r3, [r7, #4]
 800954e:	e008      	b.n	8009562 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009550:	4b08      	ldr	r3, [pc, #32]	@ (8009574 <xTaskGetSchedulerState+0x38>)
 8009552:	681b      	ldr	r3, [r3, #0]
 8009554:	2b00      	cmp	r3, #0
 8009556:	d102      	bne.n	800955e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8009558:	2302      	movs	r3, #2
 800955a:	607b      	str	r3, [r7, #4]
 800955c:	e001      	b.n	8009562 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800955e:	2300      	movs	r3, #0
 8009560:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8009562:	687b      	ldr	r3, [r7, #4]
	}
 8009564:	4618      	mov	r0, r3
 8009566:	370c      	adds	r7, #12
 8009568:	46bd      	mov	sp, r7
 800956a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800956e:	4770      	bx	lr
 8009570:	24001240 	.word	0x24001240
 8009574:	2400125c 	.word	0x2400125c

08009578 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8009578:	b580      	push	{r7, lr}
 800957a:	b086      	sub	sp, #24
 800957c:	af00      	add	r7, sp, #0
 800957e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8009580:	687b      	ldr	r3, [r7, #4]
 8009582:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8009584:	2300      	movs	r3, #0
 8009586:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8009588:	687b      	ldr	r3, [r7, #4]
 800958a:	2b00      	cmp	r3, #0
 800958c:	d058      	beq.n	8009640 <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800958e:	4b2f      	ldr	r3, [pc, #188]	@ (800964c <xTaskPriorityDisinherit+0xd4>)
 8009590:	681b      	ldr	r3, [r3, #0]
 8009592:	693a      	ldr	r2, [r7, #16]
 8009594:	429a      	cmp	r2, r3
 8009596:	d00b      	beq.n	80095b0 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 8009598:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800959c:	f383 8811 	msr	BASEPRI, r3
 80095a0:	f3bf 8f6f 	isb	sy
 80095a4:	f3bf 8f4f 	dsb	sy
 80095a8:	60fb      	str	r3, [r7, #12]
}
 80095aa:	bf00      	nop
 80095ac:	bf00      	nop
 80095ae:	e7fd      	b.n	80095ac <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 80095b0:	693b      	ldr	r3, [r7, #16]
 80095b2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80095b4:	2b00      	cmp	r3, #0
 80095b6:	d10b      	bne.n	80095d0 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 80095b8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80095bc:	f383 8811 	msr	BASEPRI, r3
 80095c0:	f3bf 8f6f 	isb	sy
 80095c4:	f3bf 8f4f 	dsb	sy
 80095c8:	60bb      	str	r3, [r7, #8]
}
 80095ca:	bf00      	nop
 80095cc:	bf00      	nop
 80095ce:	e7fd      	b.n	80095cc <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 80095d0:	693b      	ldr	r3, [r7, #16]
 80095d2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80095d4:	1e5a      	subs	r2, r3, #1
 80095d6:	693b      	ldr	r3, [r7, #16]
 80095d8:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80095da:	693b      	ldr	r3, [r7, #16]
 80095dc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80095de:	693b      	ldr	r3, [r7, #16]
 80095e0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80095e2:	429a      	cmp	r2, r3
 80095e4:	d02c      	beq.n	8009640 <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80095e6:	693b      	ldr	r3, [r7, #16]
 80095e8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80095ea:	2b00      	cmp	r3, #0
 80095ec:	d128      	bne.n	8009640 <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80095ee:	693b      	ldr	r3, [r7, #16]
 80095f0:	3304      	adds	r3, #4
 80095f2:	4618      	mov	r0, r3
 80095f4:	f7fe fc5c 	bl	8007eb0 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80095f8:	693b      	ldr	r3, [r7, #16]
 80095fa:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80095fc:	693b      	ldr	r3, [r7, #16]
 80095fe:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009600:	693b      	ldr	r3, [r7, #16]
 8009602:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009604:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8009608:	693b      	ldr	r3, [r7, #16]
 800960a:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800960c:	693b      	ldr	r3, [r7, #16]
 800960e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009610:	4b0f      	ldr	r3, [pc, #60]	@ (8009650 <xTaskPriorityDisinherit+0xd8>)
 8009612:	681b      	ldr	r3, [r3, #0]
 8009614:	429a      	cmp	r2, r3
 8009616:	d903      	bls.n	8009620 <xTaskPriorityDisinherit+0xa8>
 8009618:	693b      	ldr	r3, [r7, #16]
 800961a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800961c:	4a0c      	ldr	r2, [pc, #48]	@ (8009650 <xTaskPriorityDisinherit+0xd8>)
 800961e:	6013      	str	r3, [r2, #0]
 8009620:	693b      	ldr	r3, [r7, #16]
 8009622:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009624:	4613      	mov	r3, r2
 8009626:	009b      	lsls	r3, r3, #2
 8009628:	4413      	add	r3, r2
 800962a:	009b      	lsls	r3, r3, #2
 800962c:	4a09      	ldr	r2, [pc, #36]	@ (8009654 <xTaskPriorityDisinherit+0xdc>)
 800962e:	441a      	add	r2, r3
 8009630:	693b      	ldr	r3, [r7, #16]
 8009632:	3304      	adds	r3, #4
 8009634:	4619      	mov	r1, r3
 8009636:	4610      	mov	r0, r2
 8009638:	f7fe fbdd 	bl	8007df6 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800963c:	2301      	movs	r3, #1
 800963e:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8009640:	697b      	ldr	r3, [r7, #20]
	}
 8009642:	4618      	mov	r0, r3
 8009644:	3718      	adds	r7, #24
 8009646:	46bd      	mov	sp, r7
 8009648:	bd80      	pop	{r7, pc}
 800964a:	bf00      	nop
 800964c:	24000d60 	.word	0x24000d60
 8009650:	2400123c 	.word	0x2400123c
 8009654:	24000d64 	.word	0x24000d64

08009658 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8009658:	b580      	push	{r7, lr}
 800965a:	b084      	sub	sp, #16
 800965c:	af00      	add	r7, sp, #0
 800965e:	6078      	str	r0, [r7, #4]
 8009660:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8009662:	4b21      	ldr	r3, [pc, #132]	@ (80096e8 <prvAddCurrentTaskToDelayedList+0x90>)
 8009664:	681b      	ldr	r3, [r3, #0]
 8009666:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8009668:	4b20      	ldr	r3, [pc, #128]	@ (80096ec <prvAddCurrentTaskToDelayedList+0x94>)
 800966a:	681b      	ldr	r3, [r3, #0]
 800966c:	3304      	adds	r3, #4
 800966e:	4618      	mov	r0, r3
 8009670:	f7fe fc1e 	bl	8007eb0 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8009674:	687b      	ldr	r3, [r7, #4]
 8009676:	f1b3 3fff 	cmp.w	r3, #4294967295
 800967a:	d10a      	bne.n	8009692 <prvAddCurrentTaskToDelayedList+0x3a>
 800967c:	683b      	ldr	r3, [r7, #0]
 800967e:	2b00      	cmp	r3, #0
 8009680:	d007      	beq.n	8009692 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009682:	4b1a      	ldr	r3, [pc, #104]	@ (80096ec <prvAddCurrentTaskToDelayedList+0x94>)
 8009684:	681b      	ldr	r3, [r3, #0]
 8009686:	3304      	adds	r3, #4
 8009688:	4619      	mov	r1, r3
 800968a:	4819      	ldr	r0, [pc, #100]	@ (80096f0 <prvAddCurrentTaskToDelayedList+0x98>)
 800968c:	f7fe fbb3 	bl	8007df6 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8009690:	e026      	b.n	80096e0 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8009692:	68fa      	ldr	r2, [r7, #12]
 8009694:	687b      	ldr	r3, [r7, #4]
 8009696:	4413      	add	r3, r2
 8009698:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800969a:	4b14      	ldr	r3, [pc, #80]	@ (80096ec <prvAddCurrentTaskToDelayedList+0x94>)
 800969c:	681b      	ldr	r3, [r3, #0]
 800969e:	68ba      	ldr	r2, [r7, #8]
 80096a0:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80096a2:	68ba      	ldr	r2, [r7, #8]
 80096a4:	68fb      	ldr	r3, [r7, #12]
 80096a6:	429a      	cmp	r2, r3
 80096a8:	d209      	bcs.n	80096be <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80096aa:	4b12      	ldr	r3, [pc, #72]	@ (80096f4 <prvAddCurrentTaskToDelayedList+0x9c>)
 80096ac:	681a      	ldr	r2, [r3, #0]
 80096ae:	4b0f      	ldr	r3, [pc, #60]	@ (80096ec <prvAddCurrentTaskToDelayedList+0x94>)
 80096b0:	681b      	ldr	r3, [r3, #0]
 80096b2:	3304      	adds	r3, #4
 80096b4:	4619      	mov	r1, r3
 80096b6:	4610      	mov	r0, r2
 80096b8:	f7fe fbc1 	bl	8007e3e <vListInsert>
}
 80096bc:	e010      	b.n	80096e0 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80096be:	4b0e      	ldr	r3, [pc, #56]	@ (80096f8 <prvAddCurrentTaskToDelayedList+0xa0>)
 80096c0:	681a      	ldr	r2, [r3, #0]
 80096c2:	4b0a      	ldr	r3, [pc, #40]	@ (80096ec <prvAddCurrentTaskToDelayedList+0x94>)
 80096c4:	681b      	ldr	r3, [r3, #0]
 80096c6:	3304      	adds	r3, #4
 80096c8:	4619      	mov	r1, r3
 80096ca:	4610      	mov	r0, r2
 80096cc:	f7fe fbb7 	bl	8007e3e <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80096d0:	4b0a      	ldr	r3, [pc, #40]	@ (80096fc <prvAddCurrentTaskToDelayedList+0xa4>)
 80096d2:	681b      	ldr	r3, [r3, #0]
 80096d4:	68ba      	ldr	r2, [r7, #8]
 80096d6:	429a      	cmp	r2, r3
 80096d8:	d202      	bcs.n	80096e0 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 80096da:	4a08      	ldr	r2, [pc, #32]	@ (80096fc <prvAddCurrentTaskToDelayedList+0xa4>)
 80096dc:	68bb      	ldr	r3, [r7, #8]
 80096de:	6013      	str	r3, [r2, #0]
}
 80096e0:	bf00      	nop
 80096e2:	3710      	adds	r7, #16
 80096e4:	46bd      	mov	sp, r7
 80096e6:	bd80      	pop	{r7, pc}
 80096e8:	24001238 	.word	0x24001238
 80096ec:	24000d60 	.word	0x24000d60
 80096f0:	24001220 	.word	0x24001220
 80096f4:	240011f0 	.word	0x240011f0
 80096f8:	240011ec 	.word	0x240011ec
 80096fc:	24001254 	.word	0x24001254

08009700 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8009700:	b580      	push	{r7, lr}
 8009702:	b08a      	sub	sp, #40	@ 0x28
 8009704:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8009706:	2300      	movs	r3, #0
 8009708:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800970a:	f000 fb13 	bl	8009d34 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800970e:	4b1d      	ldr	r3, [pc, #116]	@ (8009784 <xTimerCreateTimerTask+0x84>)
 8009710:	681b      	ldr	r3, [r3, #0]
 8009712:	2b00      	cmp	r3, #0
 8009714:	d021      	beq.n	800975a <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8009716:	2300      	movs	r3, #0
 8009718:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800971a:	2300      	movs	r3, #0
 800971c:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800971e:	1d3a      	adds	r2, r7, #4
 8009720:	f107 0108 	add.w	r1, r7, #8
 8009724:	f107 030c 	add.w	r3, r7, #12
 8009728:	4618      	mov	r0, r3
 800972a:	f7fe fb1d 	bl	8007d68 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800972e:	6879      	ldr	r1, [r7, #4]
 8009730:	68bb      	ldr	r3, [r7, #8]
 8009732:	68fa      	ldr	r2, [r7, #12]
 8009734:	9202      	str	r2, [sp, #8]
 8009736:	9301      	str	r3, [sp, #4]
 8009738:	2302      	movs	r3, #2
 800973a:	9300      	str	r3, [sp, #0]
 800973c:	2300      	movs	r3, #0
 800973e:	460a      	mov	r2, r1
 8009740:	4911      	ldr	r1, [pc, #68]	@ (8009788 <xTimerCreateTimerTask+0x88>)
 8009742:	4812      	ldr	r0, [pc, #72]	@ (800978c <xTimerCreateTimerTask+0x8c>)
 8009744:	f7ff f8d8 	bl	80088f8 <xTaskCreateStatic>
 8009748:	4603      	mov	r3, r0
 800974a:	4a11      	ldr	r2, [pc, #68]	@ (8009790 <xTimerCreateTimerTask+0x90>)
 800974c:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800974e:	4b10      	ldr	r3, [pc, #64]	@ (8009790 <xTimerCreateTimerTask+0x90>)
 8009750:	681b      	ldr	r3, [r3, #0]
 8009752:	2b00      	cmp	r3, #0
 8009754:	d001      	beq.n	800975a <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8009756:	2301      	movs	r3, #1
 8009758:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800975a:	697b      	ldr	r3, [r7, #20]
 800975c:	2b00      	cmp	r3, #0
 800975e:	d10b      	bne.n	8009778 <xTimerCreateTimerTask+0x78>
	__asm volatile
 8009760:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009764:	f383 8811 	msr	BASEPRI, r3
 8009768:	f3bf 8f6f 	isb	sy
 800976c:	f3bf 8f4f 	dsb	sy
 8009770:	613b      	str	r3, [r7, #16]
}
 8009772:	bf00      	nop
 8009774:	bf00      	nop
 8009776:	e7fd      	b.n	8009774 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8009778:	697b      	ldr	r3, [r7, #20]
}
 800977a:	4618      	mov	r0, r3
 800977c:	3718      	adds	r7, #24
 800977e:	46bd      	mov	sp, r7
 8009780:	bd80      	pop	{r7, pc}
 8009782:	bf00      	nop
 8009784:	24001290 	.word	0x24001290
 8009788:	0800a834 	.word	0x0800a834
 800978c:	080098cd 	.word	0x080098cd
 8009790:	24001294 	.word	0x24001294

08009794 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8009794:	b580      	push	{r7, lr}
 8009796:	b08a      	sub	sp, #40	@ 0x28
 8009798:	af00      	add	r7, sp, #0
 800979a:	60f8      	str	r0, [r7, #12]
 800979c:	60b9      	str	r1, [r7, #8]
 800979e:	607a      	str	r2, [r7, #4]
 80097a0:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 80097a2:	2300      	movs	r3, #0
 80097a4:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 80097a6:	68fb      	ldr	r3, [r7, #12]
 80097a8:	2b00      	cmp	r3, #0
 80097aa:	d10b      	bne.n	80097c4 <xTimerGenericCommand+0x30>
	__asm volatile
 80097ac:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80097b0:	f383 8811 	msr	BASEPRI, r3
 80097b4:	f3bf 8f6f 	isb	sy
 80097b8:	f3bf 8f4f 	dsb	sy
 80097bc:	623b      	str	r3, [r7, #32]
}
 80097be:	bf00      	nop
 80097c0:	bf00      	nop
 80097c2:	e7fd      	b.n	80097c0 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 80097c4:	4b19      	ldr	r3, [pc, #100]	@ (800982c <xTimerGenericCommand+0x98>)
 80097c6:	681b      	ldr	r3, [r3, #0]
 80097c8:	2b00      	cmp	r3, #0
 80097ca:	d02a      	beq.n	8009822 <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 80097cc:	68bb      	ldr	r3, [r7, #8]
 80097ce:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 80097d0:	687b      	ldr	r3, [r7, #4]
 80097d2:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 80097d4:	68fb      	ldr	r3, [r7, #12]
 80097d6:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 80097d8:	68bb      	ldr	r3, [r7, #8]
 80097da:	2b05      	cmp	r3, #5
 80097dc:	dc18      	bgt.n	8009810 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 80097de:	f7ff fead 	bl	800953c <xTaskGetSchedulerState>
 80097e2:	4603      	mov	r3, r0
 80097e4:	2b02      	cmp	r3, #2
 80097e6:	d109      	bne.n	80097fc <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 80097e8:	4b10      	ldr	r3, [pc, #64]	@ (800982c <xTimerGenericCommand+0x98>)
 80097ea:	6818      	ldr	r0, [r3, #0]
 80097ec:	f107 0110 	add.w	r1, r7, #16
 80097f0:	2300      	movs	r3, #0
 80097f2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80097f4:	f7fe fc90 	bl	8008118 <xQueueGenericSend>
 80097f8:	6278      	str	r0, [r7, #36]	@ 0x24
 80097fa:	e012      	b.n	8009822 <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 80097fc:	4b0b      	ldr	r3, [pc, #44]	@ (800982c <xTimerGenericCommand+0x98>)
 80097fe:	6818      	ldr	r0, [r3, #0]
 8009800:	f107 0110 	add.w	r1, r7, #16
 8009804:	2300      	movs	r3, #0
 8009806:	2200      	movs	r2, #0
 8009808:	f7fe fc86 	bl	8008118 <xQueueGenericSend>
 800980c:	6278      	str	r0, [r7, #36]	@ 0x24
 800980e:	e008      	b.n	8009822 <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8009810:	4b06      	ldr	r3, [pc, #24]	@ (800982c <xTimerGenericCommand+0x98>)
 8009812:	6818      	ldr	r0, [r3, #0]
 8009814:	f107 0110 	add.w	r1, r7, #16
 8009818:	2300      	movs	r3, #0
 800981a:	683a      	ldr	r2, [r7, #0]
 800981c:	f7fe fd7e 	bl	800831c <xQueueGenericSendFromISR>
 8009820:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8009822:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8009824:	4618      	mov	r0, r3
 8009826:	3728      	adds	r7, #40	@ 0x28
 8009828:	46bd      	mov	sp, r7
 800982a:	bd80      	pop	{r7, pc}
 800982c:	24001290 	.word	0x24001290

08009830 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8009830:	b580      	push	{r7, lr}
 8009832:	b088      	sub	sp, #32
 8009834:	af02      	add	r7, sp, #8
 8009836:	6078      	str	r0, [r7, #4]
 8009838:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800983a:	4b23      	ldr	r3, [pc, #140]	@ (80098c8 <prvProcessExpiredTimer+0x98>)
 800983c:	681b      	ldr	r3, [r3, #0]
 800983e:	68db      	ldr	r3, [r3, #12]
 8009840:	68db      	ldr	r3, [r3, #12]
 8009842:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8009844:	697b      	ldr	r3, [r7, #20]
 8009846:	3304      	adds	r3, #4
 8009848:	4618      	mov	r0, r3
 800984a:	f7fe fb31 	bl	8007eb0 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800984e:	697b      	ldr	r3, [r7, #20]
 8009850:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8009854:	f003 0304 	and.w	r3, r3, #4
 8009858:	2b00      	cmp	r3, #0
 800985a:	d023      	beq.n	80098a4 <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800985c:	697b      	ldr	r3, [r7, #20]
 800985e:	699a      	ldr	r2, [r3, #24]
 8009860:	687b      	ldr	r3, [r7, #4]
 8009862:	18d1      	adds	r1, r2, r3
 8009864:	687b      	ldr	r3, [r7, #4]
 8009866:	683a      	ldr	r2, [r7, #0]
 8009868:	6978      	ldr	r0, [r7, #20]
 800986a:	f000 f8d5 	bl	8009a18 <prvInsertTimerInActiveList>
 800986e:	4603      	mov	r3, r0
 8009870:	2b00      	cmp	r3, #0
 8009872:	d020      	beq.n	80098b6 <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8009874:	2300      	movs	r3, #0
 8009876:	9300      	str	r3, [sp, #0]
 8009878:	2300      	movs	r3, #0
 800987a:	687a      	ldr	r2, [r7, #4]
 800987c:	2100      	movs	r1, #0
 800987e:	6978      	ldr	r0, [r7, #20]
 8009880:	f7ff ff88 	bl	8009794 <xTimerGenericCommand>
 8009884:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8009886:	693b      	ldr	r3, [r7, #16]
 8009888:	2b00      	cmp	r3, #0
 800988a:	d114      	bne.n	80098b6 <prvProcessExpiredTimer+0x86>
	__asm volatile
 800988c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009890:	f383 8811 	msr	BASEPRI, r3
 8009894:	f3bf 8f6f 	isb	sy
 8009898:	f3bf 8f4f 	dsb	sy
 800989c:	60fb      	str	r3, [r7, #12]
}
 800989e:	bf00      	nop
 80098a0:	bf00      	nop
 80098a2:	e7fd      	b.n	80098a0 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80098a4:	697b      	ldr	r3, [r7, #20]
 80098a6:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80098aa:	f023 0301 	bic.w	r3, r3, #1
 80098ae:	b2da      	uxtb	r2, r3
 80098b0:	697b      	ldr	r3, [r7, #20]
 80098b2:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80098b6:	697b      	ldr	r3, [r7, #20]
 80098b8:	6a1b      	ldr	r3, [r3, #32]
 80098ba:	6978      	ldr	r0, [r7, #20]
 80098bc:	4798      	blx	r3
}
 80098be:	bf00      	nop
 80098c0:	3718      	adds	r7, #24
 80098c2:	46bd      	mov	sp, r7
 80098c4:	bd80      	pop	{r7, pc}
 80098c6:	bf00      	nop
 80098c8:	24001288 	.word	0x24001288

080098cc <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 80098cc:	b580      	push	{r7, lr}
 80098ce:	b084      	sub	sp, #16
 80098d0:	af00      	add	r7, sp, #0
 80098d2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80098d4:	f107 0308 	add.w	r3, r7, #8
 80098d8:	4618      	mov	r0, r3
 80098da:	f000 f859 	bl	8009990 <prvGetNextExpireTime>
 80098de:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 80098e0:	68bb      	ldr	r3, [r7, #8]
 80098e2:	4619      	mov	r1, r3
 80098e4:	68f8      	ldr	r0, [r7, #12]
 80098e6:	f000 f805 	bl	80098f4 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 80098ea:	f000 f8d7 	bl	8009a9c <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80098ee:	bf00      	nop
 80098f0:	e7f0      	b.n	80098d4 <prvTimerTask+0x8>
	...

080098f4 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 80098f4:	b580      	push	{r7, lr}
 80098f6:	b084      	sub	sp, #16
 80098f8:	af00      	add	r7, sp, #0
 80098fa:	6078      	str	r0, [r7, #4]
 80098fc:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 80098fe:	f7ff fa29 	bl	8008d54 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8009902:	f107 0308 	add.w	r3, r7, #8
 8009906:	4618      	mov	r0, r3
 8009908:	f000 f866 	bl	80099d8 <prvSampleTimeNow>
 800990c:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800990e:	68bb      	ldr	r3, [r7, #8]
 8009910:	2b00      	cmp	r3, #0
 8009912:	d130      	bne.n	8009976 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8009914:	683b      	ldr	r3, [r7, #0]
 8009916:	2b00      	cmp	r3, #0
 8009918:	d10a      	bne.n	8009930 <prvProcessTimerOrBlockTask+0x3c>
 800991a:	687a      	ldr	r2, [r7, #4]
 800991c:	68fb      	ldr	r3, [r7, #12]
 800991e:	429a      	cmp	r2, r3
 8009920:	d806      	bhi.n	8009930 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8009922:	f7ff fa25 	bl	8008d70 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8009926:	68f9      	ldr	r1, [r7, #12]
 8009928:	6878      	ldr	r0, [r7, #4]
 800992a:	f7ff ff81 	bl	8009830 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800992e:	e024      	b.n	800997a <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8009930:	683b      	ldr	r3, [r7, #0]
 8009932:	2b00      	cmp	r3, #0
 8009934:	d008      	beq.n	8009948 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8009936:	4b13      	ldr	r3, [pc, #76]	@ (8009984 <prvProcessTimerOrBlockTask+0x90>)
 8009938:	681b      	ldr	r3, [r3, #0]
 800993a:	681b      	ldr	r3, [r3, #0]
 800993c:	2b00      	cmp	r3, #0
 800993e:	d101      	bne.n	8009944 <prvProcessTimerOrBlockTask+0x50>
 8009940:	2301      	movs	r3, #1
 8009942:	e000      	b.n	8009946 <prvProcessTimerOrBlockTask+0x52>
 8009944:	2300      	movs	r3, #0
 8009946:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8009948:	4b0f      	ldr	r3, [pc, #60]	@ (8009988 <prvProcessTimerOrBlockTask+0x94>)
 800994a:	6818      	ldr	r0, [r3, #0]
 800994c:	687a      	ldr	r2, [r7, #4]
 800994e:	68fb      	ldr	r3, [r7, #12]
 8009950:	1ad3      	subs	r3, r2, r3
 8009952:	683a      	ldr	r2, [r7, #0]
 8009954:	4619      	mov	r1, r3
 8009956:	f7fe ff9b 	bl	8008890 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800995a:	f7ff fa09 	bl	8008d70 <xTaskResumeAll>
 800995e:	4603      	mov	r3, r0
 8009960:	2b00      	cmp	r3, #0
 8009962:	d10a      	bne.n	800997a <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8009964:	4b09      	ldr	r3, [pc, #36]	@ (800998c <prvProcessTimerOrBlockTask+0x98>)
 8009966:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800996a:	601a      	str	r2, [r3, #0]
 800996c:	f3bf 8f4f 	dsb	sy
 8009970:	f3bf 8f6f 	isb	sy
}
 8009974:	e001      	b.n	800997a <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8009976:	f7ff f9fb 	bl	8008d70 <xTaskResumeAll>
}
 800997a:	bf00      	nop
 800997c:	3710      	adds	r7, #16
 800997e:	46bd      	mov	sp, r7
 8009980:	bd80      	pop	{r7, pc}
 8009982:	bf00      	nop
 8009984:	2400128c 	.word	0x2400128c
 8009988:	24001290 	.word	0x24001290
 800998c:	e000ed04 	.word	0xe000ed04

08009990 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8009990:	b480      	push	{r7}
 8009992:	b085      	sub	sp, #20
 8009994:	af00      	add	r7, sp, #0
 8009996:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8009998:	4b0e      	ldr	r3, [pc, #56]	@ (80099d4 <prvGetNextExpireTime+0x44>)
 800999a:	681b      	ldr	r3, [r3, #0]
 800999c:	681b      	ldr	r3, [r3, #0]
 800999e:	2b00      	cmp	r3, #0
 80099a0:	d101      	bne.n	80099a6 <prvGetNextExpireTime+0x16>
 80099a2:	2201      	movs	r2, #1
 80099a4:	e000      	b.n	80099a8 <prvGetNextExpireTime+0x18>
 80099a6:	2200      	movs	r2, #0
 80099a8:	687b      	ldr	r3, [r7, #4]
 80099aa:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 80099ac:	687b      	ldr	r3, [r7, #4]
 80099ae:	681b      	ldr	r3, [r3, #0]
 80099b0:	2b00      	cmp	r3, #0
 80099b2:	d105      	bne.n	80099c0 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80099b4:	4b07      	ldr	r3, [pc, #28]	@ (80099d4 <prvGetNextExpireTime+0x44>)
 80099b6:	681b      	ldr	r3, [r3, #0]
 80099b8:	68db      	ldr	r3, [r3, #12]
 80099ba:	681b      	ldr	r3, [r3, #0]
 80099bc:	60fb      	str	r3, [r7, #12]
 80099be:	e001      	b.n	80099c4 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 80099c0:	2300      	movs	r3, #0
 80099c2:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 80099c4:	68fb      	ldr	r3, [r7, #12]
}
 80099c6:	4618      	mov	r0, r3
 80099c8:	3714      	adds	r7, #20
 80099ca:	46bd      	mov	sp, r7
 80099cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099d0:	4770      	bx	lr
 80099d2:	bf00      	nop
 80099d4:	24001288 	.word	0x24001288

080099d8 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 80099d8:	b580      	push	{r7, lr}
 80099da:	b084      	sub	sp, #16
 80099dc:	af00      	add	r7, sp, #0
 80099de:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 80099e0:	f7ff fa64 	bl	8008eac <xTaskGetTickCount>
 80099e4:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 80099e6:	4b0b      	ldr	r3, [pc, #44]	@ (8009a14 <prvSampleTimeNow+0x3c>)
 80099e8:	681b      	ldr	r3, [r3, #0]
 80099ea:	68fa      	ldr	r2, [r7, #12]
 80099ec:	429a      	cmp	r2, r3
 80099ee:	d205      	bcs.n	80099fc <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 80099f0:	f000 f93a 	bl	8009c68 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 80099f4:	687b      	ldr	r3, [r7, #4]
 80099f6:	2201      	movs	r2, #1
 80099f8:	601a      	str	r2, [r3, #0]
 80099fa:	e002      	b.n	8009a02 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 80099fc:	687b      	ldr	r3, [r7, #4]
 80099fe:	2200      	movs	r2, #0
 8009a00:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8009a02:	4a04      	ldr	r2, [pc, #16]	@ (8009a14 <prvSampleTimeNow+0x3c>)
 8009a04:	68fb      	ldr	r3, [r7, #12]
 8009a06:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8009a08:	68fb      	ldr	r3, [r7, #12]
}
 8009a0a:	4618      	mov	r0, r3
 8009a0c:	3710      	adds	r7, #16
 8009a0e:	46bd      	mov	sp, r7
 8009a10:	bd80      	pop	{r7, pc}
 8009a12:	bf00      	nop
 8009a14:	24001298 	.word	0x24001298

08009a18 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8009a18:	b580      	push	{r7, lr}
 8009a1a:	b086      	sub	sp, #24
 8009a1c:	af00      	add	r7, sp, #0
 8009a1e:	60f8      	str	r0, [r7, #12]
 8009a20:	60b9      	str	r1, [r7, #8]
 8009a22:	607a      	str	r2, [r7, #4]
 8009a24:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8009a26:	2300      	movs	r3, #0
 8009a28:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8009a2a:	68fb      	ldr	r3, [r7, #12]
 8009a2c:	68ba      	ldr	r2, [r7, #8]
 8009a2e:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8009a30:	68fb      	ldr	r3, [r7, #12]
 8009a32:	68fa      	ldr	r2, [r7, #12]
 8009a34:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8009a36:	68ba      	ldr	r2, [r7, #8]
 8009a38:	687b      	ldr	r3, [r7, #4]
 8009a3a:	429a      	cmp	r2, r3
 8009a3c:	d812      	bhi.n	8009a64 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009a3e:	687a      	ldr	r2, [r7, #4]
 8009a40:	683b      	ldr	r3, [r7, #0]
 8009a42:	1ad2      	subs	r2, r2, r3
 8009a44:	68fb      	ldr	r3, [r7, #12]
 8009a46:	699b      	ldr	r3, [r3, #24]
 8009a48:	429a      	cmp	r2, r3
 8009a4a:	d302      	bcc.n	8009a52 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8009a4c:	2301      	movs	r3, #1
 8009a4e:	617b      	str	r3, [r7, #20]
 8009a50:	e01b      	b.n	8009a8a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8009a52:	4b10      	ldr	r3, [pc, #64]	@ (8009a94 <prvInsertTimerInActiveList+0x7c>)
 8009a54:	681a      	ldr	r2, [r3, #0]
 8009a56:	68fb      	ldr	r3, [r7, #12]
 8009a58:	3304      	adds	r3, #4
 8009a5a:	4619      	mov	r1, r3
 8009a5c:	4610      	mov	r0, r2
 8009a5e:	f7fe f9ee 	bl	8007e3e <vListInsert>
 8009a62:	e012      	b.n	8009a8a <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8009a64:	687a      	ldr	r2, [r7, #4]
 8009a66:	683b      	ldr	r3, [r7, #0]
 8009a68:	429a      	cmp	r2, r3
 8009a6a:	d206      	bcs.n	8009a7a <prvInsertTimerInActiveList+0x62>
 8009a6c:	68ba      	ldr	r2, [r7, #8]
 8009a6e:	683b      	ldr	r3, [r7, #0]
 8009a70:	429a      	cmp	r2, r3
 8009a72:	d302      	bcc.n	8009a7a <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8009a74:	2301      	movs	r3, #1
 8009a76:	617b      	str	r3, [r7, #20]
 8009a78:	e007      	b.n	8009a8a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8009a7a:	4b07      	ldr	r3, [pc, #28]	@ (8009a98 <prvInsertTimerInActiveList+0x80>)
 8009a7c:	681a      	ldr	r2, [r3, #0]
 8009a7e:	68fb      	ldr	r3, [r7, #12]
 8009a80:	3304      	adds	r3, #4
 8009a82:	4619      	mov	r1, r3
 8009a84:	4610      	mov	r0, r2
 8009a86:	f7fe f9da 	bl	8007e3e <vListInsert>
		}
	}

	return xProcessTimerNow;
 8009a8a:	697b      	ldr	r3, [r7, #20]
}
 8009a8c:	4618      	mov	r0, r3
 8009a8e:	3718      	adds	r7, #24
 8009a90:	46bd      	mov	sp, r7
 8009a92:	bd80      	pop	{r7, pc}
 8009a94:	2400128c 	.word	0x2400128c
 8009a98:	24001288 	.word	0x24001288

08009a9c <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8009a9c:	b580      	push	{r7, lr}
 8009a9e:	b08e      	sub	sp, #56	@ 0x38
 8009aa0:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8009aa2:	e0ce      	b.n	8009c42 <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8009aa4:	687b      	ldr	r3, [r7, #4]
 8009aa6:	2b00      	cmp	r3, #0
 8009aa8:	da19      	bge.n	8009ade <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8009aaa:	1d3b      	adds	r3, r7, #4
 8009aac:	3304      	adds	r3, #4
 8009aae:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8009ab0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009ab2:	2b00      	cmp	r3, #0
 8009ab4:	d10b      	bne.n	8009ace <prvProcessReceivedCommands+0x32>
	__asm volatile
 8009ab6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009aba:	f383 8811 	msr	BASEPRI, r3
 8009abe:	f3bf 8f6f 	isb	sy
 8009ac2:	f3bf 8f4f 	dsb	sy
 8009ac6:	61fb      	str	r3, [r7, #28]
}
 8009ac8:	bf00      	nop
 8009aca:	bf00      	nop
 8009acc:	e7fd      	b.n	8009aca <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8009ace:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009ad0:	681b      	ldr	r3, [r3, #0]
 8009ad2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8009ad4:	6850      	ldr	r0, [r2, #4]
 8009ad6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8009ad8:	6892      	ldr	r2, [r2, #8]
 8009ada:	4611      	mov	r1, r2
 8009adc:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8009ade:	687b      	ldr	r3, [r7, #4]
 8009ae0:	2b00      	cmp	r3, #0
 8009ae2:	f2c0 80ae 	blt.w	8009c42 <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8009ae6:	68fb      	ldr	r3, [r7, #12]
 8009ae8:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8009aea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009aec:	695b      	ldr	r3, [r3, #20]
 8009aee:	2b00      	cmp	r3, #0
 8009af0:	d004      	beq.n	8009afc <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8009af2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009af4:	3304      	adds	r3, #4
 8009af6:	4618      	mov	r0, r3
 8009af8:	f7fe f9da 	bl	8007eb0 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8009afc:	463b      	mov	r3, r7
 8009afe:	4618      	mov	r0, r3
 8009b00:	f7ff ff6a 	bl	80099d8 <prvSampleTimeNow>
 8009b04:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 8009b06:	687b      	ldr	r3, [r7, #4]
 8009b08:	2b09      	cmp	r3, #9
 8009b0a:	f200 8097 	bhi.w	8009c3c <prvProcessReceivedCommands+0x1a0>
 8009b0e:	a201      	add	r2, pc, #4	@ (adr r2, 8009b14 <prvProcessReceivedCommands+0x78>)
 8009b10:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009b14:	08009b3d 	.word	0x08009b3d
 8009b18:	08009b3d 	.word	0x08009b3d
 8009b1c:	08009b3d 	.word	0x08009b3d
 8009b20:	08009bb3 	.word	0x08009bb3
 8009b24:	08009bc7 	.word	0x08009bc7
 8009b28:	08009c13 	.word	0x08009c13
 8009b2c:	08009b3d 	.word	0x08009b3d
 8009b30:	08009b3d 	.word	0x08009b3d
 8009b34:	08009bb3 	.word	0x08009bb3
 8009b38:	08009bc7 	.word	0x08009bc7
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8009b3c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009b3e:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8009b42:	f043 0301 	orr.w	r3, r3, #1
 8009b46:	b2da      	uxtb	r2, r3
 8009b48:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009b4a:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8009b4e:	68ba      	ldr	r2, [r7, #8]
 8009b50:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009b52:	699b      	ldr	r3, [r3, #24]
 8009b54:	18d1      	adds	r1, r2, r3
 8009b56:	68bb      	ldr	r3, [r7, #8]
 8009b58:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009b5a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8009b5c:	f7ff ff5c 	bl	8009a18 <prvInsertTimerInActiveList>
 8009b60:	4603      	mov	r3, r0
 8009b62:	2b00      	cmp	r3, #0
 8009b64:	d06c      	beq.n	8009c40 <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8009b66:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009b68:	6a1b      	ldr	r3, [r3, #32]
 8009b6a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8009b6c:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8009b6e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009b70:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8009b74:	f003 0304 	and.w	r3, r3, #4
 8009b78:	2b00      	cmp	r3, #0
 8009b7a:	d061      	beq.n	8009c40 <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8009b7c:	68ba      	ldr	r2, [r7, #8]
 8009b7e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009b80:	699b      	ldr	r3, [r3, #24]
 8009b82:	441a      	add	r2, r3
 8009b84:	2300      	movs	r3, #0
 8009b86:	9300      	str	r3, [sp, #0]
 8009b88:	2300      	movs	r3, #0
 8009b8a:	2100      	movs	r1, #0
 8009b8c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8009b8e:	f7ff fe01 	bl	8009794 <xTimerGenericCommand>
 8009b92:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8009b94:	6a3b      	ldr	r3, [r7, #32]
 8009b96:	2b00      	cmp	r3, #0
 8009b98:	d152      	bne.n	8009c40 <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 8009b9a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009b9e:	f383 8811 	msr	BASEPRI, r3
 8009ba2:	f3bf 8f6f 	isb	sy
 8009ba6:	f3bf 8f4f 	dsb	sy
 8009baa:	61bb      	str	r3, [r7, #24]
}
 8009bac:	bf00      	nop
 8009bae:	bf00      	nop
 8009bb0:	e7fd      	b.n	8009bae <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8009bb2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009bb4:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8009bb8:	f023 0301 	bic.w	r3, r3, #1
 8009bbc:	b2da      	uxtb	r2, r3
 8009bbe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009bc0:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8009bc4:	e03d      	b.n	8009c42 <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8009bc6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009bc8:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8009bcc:	f043 0301 	orr.w	r3, r3, #1
 8009bd0:	b2da      	uxtb	r2, r3
 8009bd2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009bd4:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8009bd8:	68ba      	ldr	r2, [r7, #8]
 8009bda:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009bdc:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8009bde:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009be0:	699b      	ldr	r3, [r3, #24]
 8009be2:	2b00      	cmp	r3, #0
 8009be4:	d10b      	bne.n	8009bfe <prvProcessReceivedCommands+0x162>
	__asm volatile
 8009be6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009bea:	f383 8811 	msr	BASEPRI, r3
 8009bee:	f3bf 8f6f 	isb	sy
 8009bf2:	f3bf 8f4f 	dsb	sy
 8009bf6:	617b      	str	r3, [r7, #20]
}
 8009bf8:	bf00      	nop
 8009bfa:	bf00      	nop
 8009bfc:	e7fd      	b.n	8009bfa <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8009bfe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009c00:	699a      	ldr	r2, [r3, #24]
 8009c02:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009c04:	18d1      	adds	r1, r2, r3
 8009c06:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009c08:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009c0a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8009c0c:	f7ff ff04 	bl	8009a18 <prvInsertTimerInActiveList>
					break;
 8009c10:	e017      	b.n	8009c42 <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8009c12:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009c14:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8009c18:	f003 0302 	and.w	r3, r3, #2
 8009c1c:	2b00      	cmp	r3, #0
 8009c1e:	d103      	bne.n	8009c28 <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 8009c20:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8009c22:	f000 fbe9 	bl	800a3f8 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8009c26:	e00c      	b.n	8009c42 <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8009c28:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009c2a:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8009c2e:	f023 0301 	bic.w	r3, r3, #1
 8009c32:	b2da      	uxtb	r2, r3
 8009c34:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009c36:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8009c3a:	e002      	b.n	8009c42 <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 8009c3c:	bf00      	nop
 8009c3e:	e000      	b.n	8009c42 <prvProcessReceivedCommands+0x1a6>
					break;
 8009c40:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8009c42:	4b08      	ldr	r3, [pc, #32]	@ (8009c64 <prvProcessReceivedCommands+0x1c8>)
 8009c44:	681b      	ldr	r3, [r3, #0]
 8009c46:	1d39      	adds	r1, r7, #4
 8009c48:	2200      	movs	r2, #0
 8009c4a:	4618      	mov	r0, r3
 8009c4c:	f7fe fc04 	bl	8008458 <xQueueReceive>
 8009c50:	4603      	mov	r3, r0
 8009c52:	2b00      	cmp	r3, #0
 8009c54:	f47f af26 	bne.w	8009aa4 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 8009c58:	bf00      	nop
 8009c5a:	bf00      	nop
 8009c5c:	3730      	adds	r7, #48	@ 0x30
 8009c5e:	46bd      	mov	sp, r7
 8009c60:	bd80      	pop	{r7, pc}
 8009c62:	bf00      	nop
 8009c64:	24001290 	.word	0x24001290

08009c68 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8009c68:	b580      	push	{r7, lr}
 8009c6a:	b088      	sub	sp, #32
 8009c6c:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8009c6e:	e049      	b.n	8009d04 <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8009c70:	4b2e      	ldr	r3, [pc, #184]	@ (8009d2c <prvSwitchTimerLists+0xc4>)
 8009c72:	681b      	ldr	r3, [r3, #0]
 8009c74:	68db      	ldr	r3, [r3, #12]
 8009c76:	681b      	ldr	r3, [r3, #0]
 8009c78:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009c7a:	4b2c      	ldr	r3, [pc, #176]	@ (8009d2c <prvSwitchTimerLists+0xc4>)
 8009c7c:	681b      	ldr	r3, [r3, #0]
 8009c7e:	68db      	ldr	r3, [r3, #12]
 8009c80:	68db      	ldr	r3, [r3, #12]
 8009c82:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8009c84:	68fb      	ldr	r3, [r7, #12]
 8009c86:	3304      	adds	r3, #4
 8009c88:	4618      	mov	r0, r3
 8009c8a:	f7fe f911 	bl	8007eb0 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8009c8e:	68fb      	ldr	r3, [r7, #12]
 8009c90:	6a1b      	ldr	r3, [r3, #32]
 8009c92:	68f8      	ldr	r0, [r7, #12]
 8009c94:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8009c96:	68fb      	ldr	r3, [r7, #12]
 8009c98:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8009c9c:	f003 0304 	and.w	r3, r3, #4
 8009ca0:	2b00      	cmp	r3, #0
 8009ca2:	d02f      	beq.n	8009d04 <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8009ca4:	68fb      	ldr	r3, [r7, #12]
 8009ca6:	699b      	ldr	r3, [r3, #24]
 8009ca8:	693a      	ldr	r2, [r7, #16]
 8009caa:	4413      	add	r3, r2
 8009cac:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8009cae:	68ba      	ldr	r2, [r7, #8]
 8009cb0:	693b      	ldr	r3, [r7, #16]
 8009cb2:	429a      	cmp	r2, r3
 8009cb4:	d90e      	bls.n	8009cd4 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8009cb6:	68fb      	ldr	r3, [r7, #12]
 8009cb8:	68ba      	ldr	r2, [r7, #8]
 8009cba:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8009cbc:	68fb      	ldr	r3, [r7, #12]
 8009cbe:	68fa      	ldr	r2, [r7, #12]
 8009cc0:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8009cc2:	4b1a      	ldr	r3, [pc, #104]	@ (8009d2c <prvSwitchTimerLists+0xc4>)
 8009cc4:	681a      	ldr	r2, [r3, #0]
 8009cc6:	68fb      	ldr	r3, [r7, #12]
 8009cc8:	3304      	adds	r3, #4
 8009cca:	4619      	mov	r1, r3
 8009ccc:	4610      	mov	r0, r2
 8009cce:	f7fe f8b6 	bl	8007e3e <vListInsert>
 8009cd2:	e017      	b.n	8009d04 <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8009cd4:	2300      	movs	r3, #0
 8009cd6:	9300      	str	r3, [sp, #0]
 8009cd8:	2300      	movs	r3, #0
 8009cda:	693a      	ldr	r2, [r7, #16]
 8009cdc:	2100      	movs	r1, #0
 8009cde:	68f8      	ldr	r0, [r7, #12]
 8009ce0:	f7ff fd58 	bl	8009794 <xTimerGenericCommand>
 8009ce4:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8009ce6:	687b      	ldr	r3, [r7, #4]
 8009ce8:	2b00      	cmp	r3, #0
 8009cea:	d10b      	bne.n	8009d04 <prvSwitchTimerLists+0x9c>
	__asm volatile
 8009cec:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009cf0:	f383 8811 	msr	BASEPRI, r3
 8009cf4:	f3bf 8f6f 	isb	sy
 8009cf8:	f3bf 8f4f 	dsb	sy
 8009cfc:	603b      	str	r3, [r7, #0]
}
 8009cfe:	bf00      	nop
 8009d00:	bf00      	nop
 8009d02:	e7fd      	b.n	8009d00 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8009d04:	4b09      	ldr	r3, [pc, #36]	@ (8009d2c <prvSwitchTimerLists+0xc4>)
 8009d06:	681b      	ldr	r3, [r3, #0]
 8009d08:	681b      	ldr	r3, [r3, #0]
 8009d0a:	2b00      	cmp	r3, #0
 8009d0c:	d1b0      	bne.n	8009c70 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8009d0e:	4b07      	ldr	r3, [pc, #28]	@ (8009d2c <prvSwitchTimerLists+0xc4>)
 8009d10:	681b      	ldr	r3, [r3, #0]
 8009d12:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8009d14:	4b06      	ldr	r3, [pc, #24]	@ (8009d30 <prvSwitchTimerLists+0xc8>)
 8009d16:	681b      	ldr	r3, [r3, #0]
 8009d18:	4a04      	ldr	r2, [pc, #16]	@ (8009d2c <prvSwitchTimerLists+0xc4>)
 8009d1a:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8009d1c:	4a04      	ldr	r2, [pc, #16]	@ (8009d30 <prvSwitchTimerLists+0xc8>)
 8009d1e:	697b      	ldr	r3, [r7, #20]
 8009d20:	6013      	str	r3, [r2, #0]
}
 8009d22:	bf00      	nop
 8009d24:	3718      	adds	r7, #24
 8009d26:	46bd      	mov	sp, r7
 8009d28:	bd80      	pop	{r7, pc}
 8009d2a:	bf00      	nop
 8009d2c:	24001288 	.word	0x24001288
 8009d30:	2400128c 	.word	0x2400128c

08009d34 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8009d34:	b580      	push	{r7, lr}
 8009d36:	b082      	sub	sp, #8
 8009d38:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8009d3a:	f000 f96d 	bl	800a018 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8009d3e:	4b15      	ldr	r3, [pc, #84]	@ (8009d94 <prvCheckForValidListAndQueue+0x60>)
 8009d40:	681b      	ldr	r3, [r3, #0]
 8009d42:	2b00      	cmp	r3, #0
 8009d44:	d120      	bne.n	8009d88 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8009d46:	4814      	ldr	r0, [pc, #80]	@ (8009d98 <prvCheckForValidListAndQueue+0x64>)
 8009d48:	f7fe f828 	bl	8007d9c <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8009d4c:	4813      	ldr	r0, [pc, #76]	@ (8009d9c <prvCheckForValidListAndQueue+0x68>)
 8009d4e:	f7fe f825 	bl	8007d9c <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8009d52:	4b13      	ldr	r3, [pc, #76]	@ (8009da0 <prvCheckForValidListAndQueue+0x6c>)
 8009d54:	4a10      	ldr	r2, [pc, #64]	@ (8009d98 <prvCheckForValidListAndQueue+0x64>)
 8009d56:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8009d58:	4b12      	ldr	r3, [pc, #72]	@ (8009da4 <prvCheckForValidListAndQueue+0x70>)
 8009d5a:	4a10      	ldr	r2, [pc, #64]	@ (8009d9c <prvCheckForValidListAndQueue+0x68>)
 8009d5c:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8009d5e:	2300      	movs	r3, #0
 8009d60:	9300      	str	r3, [sp, #0]
 8009d62:	4b11      	ldr	r3, [pc, #68]	@ (8009da8 <prvCheckForValidListAndQueue+0x74>)
 8009d64:	4a11      	ldr	r2, [pc, #68]	@ (8009dac <prvCheckForValidListAndQueue+0x78>)
 8009d66:	2110      	movs	r1, #16
 8009d68:	200a      	movs	r0, #10
 8009d6a:	f7fe f935 	bl	8007fd8 <xQueueGenericCreateStatic>
 8009d6e:	4603      	mov	r3, r0
 8009d70:	4a08      	ldr	r2, [pc, #32]	@ (8009d94 <prvCheckForValidListAndQueue+0x60>)
 8009d72:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8009d74:	4b07      	ldr	r3, [pc, #28]	@ (8009d94 <prvCheckForValidListAndQueue+0x60>)
 8009d76:	681b      	ldr	r3, [r3, #0]
 8009d78:	2b00      	cmp	r3, #0
 8009d7a:	d005      	beq.n	8009d88 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8009d7c:	4b05      	ldr	r3, [pc, #20]	@ (8009d94 <prvCheckForValidListAndQueue+0x60>)
 8009d7e:	681b      	ldr	r3, [r3, #0]
 8009d80:	490b      	ldr	r1, [pc, #44]	@ (8009db0 <prvCheckForValidListAndQueue+0x7c>)
 8009d82:	4618      	mov	r0, r3
 8009d84:	f7fe fd5a 	bl	800883c <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8009d88:	f000 f978 	bl	800a07c <vPortExitCritical>
}
 8009d8c:	bf00      	nop
 8009d8e:	46bd      	mov	sp, r7
 8009d90:	bd80      	pop	{r7, pc}
 8009d92:	bf00      	nop
 8009d94:	24001290 	.word	0x24001290
 8009d98:	24001260 	.word	0x24001260
 8009d9c:	24001274 	.word	0x24001274
 8009da0:	24001288 	.word	0x24001288
 8009da4:	2400128c 	.word	0x2400128c
 8009da8:	2400133c 	.word	0x2400133c
 8009dac:	2400129c 	.word	0x2400129c
 8009db0:	0800a83c 	.word	0x0800a83c

08009db4 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8009db4:	b480      	push	{r7}
 8009db6:	b085      	sub	sp, #20
 8009db8:	af00      	add	r7, sp, #0
 8009dba:	60f8      	str	r0, [r7, #12]
 8009dbc:	60b9      	str	r1, [r7, #8]
 8009dbe:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8009dc0:	68fb      	ldr	r3, [r7, #12]
 8009dc2:	3b04      	subs	r3, #4
 8009dc4:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8009dc6:	68fb      	ldr	r3, [r7, #12]
 8009dc8:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8009dcc:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8009dce:	68fb      	ldr	r3, [r7, #12]
 8009dd0:	3b04      	subs	r3, #4
 8009dd2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8009dd4:	68bb      	ldr	r3, [r7, #8]
 8009dd6:	f023 0201 	bic.w	r2, r3, #1
 8009dda:	68fb      	ldr	r3, [r7, #12]
 8009ddc:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8009dde:	68fb      	ldr	r3, [r7, #12]
 8009de0:	3b04      	subs	r3, #4
 8009de2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8009de4:	4a0c      	ldr	r2, [pc, #48]	@ (8009e18 <pxPortInitialiseStack+0x64>)
 8009de6:	68fb      	ldr	r3, [r7, #12]
 8009de8:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8009dea:	68fb      	ldr	r3, [r7, #12]
 8009dec:	3b14      	subs	r3, #20
 8009dee:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8009df0:	687a      	ldr	r2, [r7, #4]
 8009df2:	68fb      	ldr	r3, [r7, #12]
 8009df4:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8009df6:	68fb      	ldr	r3, [r7, #12]
 8009df8:	3b04      	subs	r3, #4
 8009dfa:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8009dfc:	68fb      	ldr	r3, [r7, #12]
 8009dfe:	f06f 0202 	mvn.w	r2, #2
 8009e02:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8009e04:	68fb      	ldr	r3, [r7, #12]
 8009e06:	3b20      	subs	r3, #32
 8009e08:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8009e0a:	68fb      	ldr	r3, [r7, #12]
}
 8009e0c:	4618      	mov	r0, r3
 8009e0e:	3714      	adds	r7, #20
 8009e10:	46bd      	mov	sp, r7
 8009e12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e16:	4770      	bx	lr
 8009e18:	08009e1d 	.word	0x08009e1d

08009e1c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8009e1c:	b480      	push	{r7}
 8009e1e:	b085      	sub	sp, #20
 8009e20:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8009e22:	2300      	movs	r3, #0
 8009e24:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8009e26:	4b13      	ldr	r3, [pc, #76]	@ (8009e74 <prvTaskExitError+0x58>)
 8009e28:	681b      	ldr	r3, [r3, #0]
 8009e2a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009e2e:	d00b      	beq.n	8009e48 <prvTaskExitError+0x2c>
	__asm volatile
 8009e30:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009e34:	f383 8811 	msr	BASEPRI, r3
 8009e38:	f3bf 8f6f 	isb	sy
 8009e3c:	f3bf 8f4f 	dsb	sy
 8009e40:	60fb      	str	r3, [r7, #12]
}
 8009e42:	bf00      	nop
 8009e44:	bf00      	nop
 8009e46:	e7fd      	b.n	8009e44 <prvTaskExitError+0x28>
	__asm volatile
 8009e48:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009e4c:	f383 8811 	msr	BASEPRI, r3
 8009e50:	f3bf 8f6f 	isb	sy
 8009e54:	f3bf 8f4f 	dsb	sy
 8009e58:	60bb      	str	r3, [r7, #8]
}
 8009e5a:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8009e5c:	bf00      	nop
 8009e5e:	687b      	ldr	r3, [r7, #4]
 8009e60:	2b00      	cmp	r3, #0
 8009e62:	d0fc      	beq.n	8009e5e <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8009e64:	bf00      	nop
 8009e66:	bf00      	nop
 8009e68:	3714      	adds	r7, #20
 8009e6a:	46bd      	mov	sp, r7
 8009e6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e70:	4770      	bx	lr
 8009e72:	bf00      	nop
 8009e74:	24000010 	.word	0x24000010
	...

08009e80 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8009e80:	4b07      	ldr	r3, [pc, #28]	@ (8009ea0 <pxCurrentTCBConst2>)
 8009e82:	6819      	ldr	r1, [r3, #0]
 8009e84:	6808      	ldr	r0, [r1, #0]
 8009e86:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009e8a:	f380 8809 	msr	PSP, r0
 8009e8e:	f3bf 8f6f 	isb	sy
 8009e92:	f04f 0000 	mov.w	r0, #0
 8009e96:	f380 8811 	msr	BASEPRI, r0
 8009e9a:	4770      	bx	lr
 8009e9c:	f3af 8000 	nop.w

08009ea0 <pxCurrentTCBConst2>:
 8009ea0:	24000d60 	.word	0x24000d60
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8009ea4:	bf00      	nop
 8009ea6:	bf00      	nop

08009ea8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8009ea8:	4808      	ldr	r0, [pc, #32]	@ (8009ecc <prvPortStartFirstTask+0x24>)
 8009eaa:	6800      	ldr	r0, [r0, #0]
 8009eac:	6800      	ldr	r0, [r0, #0]
 8009eae:	f380 8808 	msr	MSP, r0
 8009eb2:	f04f 0000 	mov.w	r0, #0
 8009eb6:	f380 8814 	msr	CONTROL, r0
 8009eba:	b662      	cpsie	i
 8009ebc:	b661      	cpsie	f
 8009ebe:	f3bf 8f4f 	dsb	sy
 8009ec2:	f3bf 8f6f 	isb	sy
 8009ec6:	df00      	svc	0
 8009ec8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8009eca:	bf00      	nop
 8009ecc:	e000ed08 	.word	0xe000ed08

08009ed0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8009ed0:	b580      	push	{r7, lr}
 8009ed2:	b086      	sub	sp, #24
 8009ed4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8009ed6:	4b47      	ldr	r3, [pc, #284]	@ (8009ff4 <xPortStartScheduler+0x124>)
 8009ed8:	681b      	ldr	r3, [r3, #0]
 8009eda:	4a47      	ldr	r2, [pc, #284]	@ (8009ff8 <xPortStartScheduler+0x128>)
 8009edc:	4293      	cmp	r3, r2
 8009ede:	d10b      	bne.n	8009ef8 <xPortStartScheduler+0x28>
	__asm volatile
 8009ee0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009ee4:	f383 8811 	msr	BASEPRI, r3
 8009ee8:	f3bf 8f6f 	isb	sy
 8009eec:	f3bf 8f4f 	dsb	sy
 8009ef0:	613b      	str	r3, [r7, #16]
}
 8009ef2:	bf00      	nop
 8009ef4:	bf00      	nop
 8009ef6:	e7fd      	b.n	8009ef4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8009ef8:	4b3e      	ldr	r3, [pc, #248]	@ (8009ff4 <xPortStartScheduler+0x124>)
 8009efa:	681b      	ldr	r3, [r3, #0]
 8009efc:	4a3f      	ldr	r2, [pc, #252]	@ (8009ffc <xPortStartScheduler+0x12c>)
 8009efe:	4293      	cmp	r3, r2
 8009f00:	d10b      	bne.n	8009f1a <xPortStartScheduler+0x4a>
	__asm volatile
 8009f02:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009f06:	f383 8811 	msr	BASEPRI, r3
 8009f0a:	f3bf 8f6f 	isb	sy
 8009f0e:	f3bf 8f4f 	dsb	sy
 8009f12:	60fb      	str	r3, [r7, #12]
}
 8009f14:	bf00      	nop
 8009f16:	bf00      	nop
 8009f18:	e7fd      	b.n	8009f16 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8009f1a:	4b39      	ldr	r3, [pc, #228]	@ (800a000 <xPortStartScheduler+0x130>)
 8009f1c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8009f1e:	697b      	ldr	r3, [r7, #20]
 8009f20:	781b      	ldrb	r3, [r3, #0]
 8009f22:	b2db      	uxtb	r3, r3
 8009f24:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8009f26:	697b      	ldr	r3, [r7, #20]
 8009f28:	22ff      	movs	r2, #255	@ 0xff
 8009f2a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8009f2c:	697b      	ldr	r3, [r7, #20]
 8009f2e:	781b      	ldrb	r3, [r3, #0]
 8009f30:	b2db      	uxtb	r3, r3
 8009f32:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8009f34:	78fb      	ldrb	r3, [r7, #3]
 8009f36:	b2db      	uxtb	r3, r3
 8009f38:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8009f3c:	b2da      	uxtb	r2, r3
 8009f3e:	4b31      	ldr	r3, [pc, #196]	@ (800a004 <xPortStartScheduler+0x134>)
 8009f40:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8009f42:	4b31      	ldr	r3, [pc, #196]	@ (800a008 <xPortStartScheduler+0x138>)
 8009f44:	2207      	movs	r2, #7
 8009f46:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8009f48:	e009      	b.n	8009f5e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 8009f4a:	4b2f      	ldr	r3, [pc, #188]	@ (800a008 <xPortStartScheduler+0x138>)
 8009f4c:	681b      	ldr	r3, [r3, #0]
 8009f4e:	3b01      	subs	r3, #1
 8009f50:	4a2d      	ldr	r2, [pc, #180]	@ (800a008 <xPortStartScheduler+0x138>)
 8009f52:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8009f54:	78fb      	ldrb	r3, [r7, #3]
 8009f56:	b2db      	uxtb	r3, r3
 8009f58:	005b      	lsls	r3, r3, #1
 8009f5a:	b2db      	uxtb	r3, r3
 8009f5c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8009f5e:	78fb      	ldrb	r3, [r7, #3]
 8009f60:	b2db      	uxtb	r3, r3
 8009f62:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009f66:	2b80      	cmp	r3, #128	@ 0x80
 8009f68:	d0ef      	beq.n	8009f4a <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8009f6a:	4b27      	ldr	r3, [pc, #156]	@ (800a008 <xPortStartScheduler+0x138>)
 8009f6c:	681b      	ldr	r3, [r3, #0]
 8009f6e:	f1c3 0307 	rsb	r3, r3, #7
 8009f72:	2b04      	cmp	r3, #4
 8009f74:	d00b      	beq.n	8009f8e <xPortStartScheduler+0xbe>
	__asm volatile
 8009f76:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009f7a:	f383 8811 	msr	BASEPRI, r3
 8009f7e:	f3bf 8f6f 	isb	sy
 8009f82:	f3bf 8f4f 	dsb	sy
 8009f86:	60bb      	str	r3, [r7, #8]
}
 8009f88:	bf00      	nop
 8009f8a:	bf00      	nop
 8009f8c:	e7fd      	b.n	8009f8a <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8009f8e:	4b1e      	ldr	r3, [pc, #120]	@ (800a008 <xPortStartScheduler+0x138>)
 8009f90:	681b      	ldr	r3, [r3, #0]
 8009f92:	021b      	lsls	r3, r3, #8
 8009f94:	4a1c      	ldr	r2, [pc, #112]	@ (800a008 <xPortStartScheduler+0x138>)
 8009f96:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8009f98:	4b1b      	ldr	r3, [pc, #108]	@ (800a008 <xPortStartScheduler+0x138>)
 8009f9a:	681b      	ldr	r3, [r3, #0]
 8009f9c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8009fa0:	4a19      	ldr	r2, [pc, #100]	@ (800a008 <xPortStartScheduler+0x138>)
 8009fa2:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8009fa4:	687b      	ldr	r3, [r7, #4]
 8009fa6:	b2da      	uxtb	r2, r3
 8009fa8:	697b      	ldr	r3, [r7, #20]
 8009faa:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8009fac:	4b17      	ldr	r3, [pc, #92]	@ (800a00c <xPortStartScheduler+0x13c>)
 8009fae:	681b      	ldr	r3, [r3, #0]
 8009fb0:	4a16      	ldr	r2, [pc, #88]	@ (800a00c <xPortStartScheduler+0x13c>)
 8009fb2:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8009fb6:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8009fb8:	4b14      	ldr	r3, [pc, #80]	@ (800a00c <xPortStartScheduler+0x13c>)
 8009fba:	681b      	ldr	r3, [r3, #0]
 8009fbc:	4a13      	ldr	r2, [pc, #76]	@ (800a00c <xPortStartScheduler+0x13c>)
 8009fbe:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8009fc2:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8009fc4:	f000 f8da 	bl	800a17c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8009fc8:	4b11      	ldr	r3, [pc, #68]	@ (800a010 <xPortStartScheduler+0x140>)
 8009fca:	2200      	movs	r2, #0
 8009fcc:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8009fce:	f000 f8f9 	bl	800a1c4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8009fd2:	4b10      	ldr	r3, [pc, #64]	@ (800a014 <xPortStartScheduler+0x144>)
 8009fd4:	681b      	ldr	r3, [r3, #0]
 8009fd6:	4a0f      	ldr	r2, [pc, #60]	@ (800a014 <xPortStartScheduler+0x144>)
 8009fd8:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 8009fdc:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8009fde:	f7ff ff63 	bl	8009ea8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8009fe2:	f7ff f82d 	bl	8009040 <vTaskSwitchContext>
	prvTaskExitError();
 8009fe6:	f7ff ff19 	bl	8009e1c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8009fea:	2300      	movs	r3, #0
}
 8009fec:	4618      	mov	r0, r3
 8009fee:	3718      	adds	r7, #24
 8009ff0:	46bd      	mov	sp, r7
 8009ff2:	bd80      	pop	{r7, pc}
 8009ff4:	e000ed00 	.word	0xe000ed00
 8009ff8:	410fc271 	.word	0x410fc271
 8009ffc:	410fc270 	.word	0x410fc270
 800a000:	e000e400 	.word	0xe000e400
 800a004:	2400138c 	.word	0x2400138c
 800a008:	24001390 	.word	0x24001390
 800a00c:	e000ed20 	.word	0xe000ed20
 800a010:	24000010 	.word	0x24000010
 800a014:	e000ef34 	.word	0xe000ef34

0800a018 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800a018:	b480      	push	{r7}
 800a01a:	b083      	sub	sp, #12
 800a01c:	af00      	add	r7, sp, #0
	__asm volatile
 800a01e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a022:	f383 8811 	msr	BASEPRI, r3
 800a026:	f3bf 8f6f 	isb	sy
 800a02a:	f3bf 8f4f 	dsb	sy
 800a02e:	607b      	str	r3, [r7, #4]
}
 800a030:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800a032:	4b10      	ldr	r3, [pc, #64]	@ (800a074 <vPortEnterCritical+0x5c>)
 800a034:	681b      	ldr	r3, [r3, #0]
 800a036:	3301      	adds	r3, #1
 800a038:	4a0e      	ldr	r2, [pc, #56]	@ (800a074 <vPortEnterCritical+0x5c>)
 800a03a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800a03c:	4b0d      	ldr	r3, [pc, #52]	@ (800a074 <vPortEnterCritical+0x5c>)
 800a03e:	681b      	ldr	r3, [r3, #0]
 800a040:	2b01      	cmp	r3, #1
 800a042:	d110      	bne.n	800a066 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800a044:	4b0c      	ldr	r3, [pc, #48]	@ (800a078 <vPortEnterCritical+0x60>)
 800a046:	681b      	ldr	r3, [r3, #0]
 800a048:	b2db      	uxtb	r3, r3
 800a04a:	2b00      	cmp	r3, #0
 800a04c:	d00b      	beq.n	800a066 <vPortEnterCritical+0x4e>
	__asm volatile
 800a04e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a052:	f383 8811 	msr	BASEPRI, r3
 800a056:	f3bf 8f6f 	isb	sy
 800a05a:	f3bf 8f4f 	dsb	sy
 800a05e:	603b      	str	r3, [r7, #0]
}
 800a060:	bf00      	nop
 800a062:	bf00      	nop
 800a064:	e7fd      	b.n	800a062 <vPortEnterCritical+0x4a>
	}
}
 800a066:	bf00      	nop
 800a068:	370c      	adds	r7, #12
 800a06a:	46bd      	mov	sp, r7
 800a06c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a070:	4770      	bx	lr
 800a072:	bf00      	nop
 800a074:	24000010 	.word	0x24000010
 800a078:	e000ed04 	.word	0xe000ed04

0800a07c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800a07c:	b480      	push	{r7}
 800a07e:	b083      	sub	sp, #12
 800a080:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800a082:	4b12      	ldr	r3, [pc, #72]	@ (800a0cc <vPortExitCritical+0x50>)
 800a084:	681b      	ldr	r3, [r3, #0]
 800a086:	2b00      	cmp	r3, #0
 800a088:	d10b      	bne.n	800a0a2 <vPortExitCritical+0x26>
	__asm volatile
 800a08a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a08e:	f383 8811 	msr	BASEPRI, r3
 800a092:	f3bf 8f6f 	isb	sy
 800a096:	f3bf 8f4f 	dsb	sy
 800a09a:	607b      	str	r3, [r7, #4]
}
 800a09c:	bf00      	nop
 800a09e:	bf00      	nop
 800a0a0:	e7fd      	b.n	800a09e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800a0a2:	4b0a      	ldr	r3, [pc, #40]	@ (800a0cc <vPortExitCritical+0x50>)
 800a0a4:	681b      	ldr	r3, [r3, #0]
 800a0a6:	3b01      	subs	r3, #1
 800a0a8:	4a08      	ldr	r2, [pc, #32]	@ (800a0cc <vPortExitCritical+0x50>)
 800a0aa:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800a0ac:	4b07      	ldr	r3, [pc, #28]	@ (800a0cc <vPortExitCritical+0x50>)
 800a0ae:	681b      	ldr	r3, [r3, #0]
 800a0b0:	2b00      	cmp	r3, #0
 800a0b2:	d105      	bne.n	800a0c0 <vPortExitCritical+0x44>
 800a0b4:	2300      	movs	r3, #0
 800a0b6:	603b      	str	r3, [r7, #0]
	__asm volatile
 800a0b8:	683b      	ldr	r3, [r7, #0]
 800a0ba:	f383 8811 	msr	BASEPRI, r3
}
 800a0be:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800a0c0:	bf00      	nop
 800a0c2:	370c      	adds	r7, #12
 800a0c4:	46bd      	mov	sp, r7
 800a0c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0ca:	4770      	bx	lr
 800a0cc:	24000010 	.word	0x24000010

0800a0d0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800a0d0:	f3ef 8009 	mrs	r0, PSP
 800a0d4:	f3bf 8f6f 	isb	sy
 800a0d8:	4b15      	ldr	r3, [pc, #84]	@ (800a130 <pxCurrentTCBConst>)
 800a0da:	681a      	ldr	r2, [r3, #0]
 800a0dc:	f01e 0f10 	tst.w	lr, #16
 800a0e0:	bf08      	it	eq
 800a0e2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800a0e6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a0ea:	6010      	str	r0, [r2, #0]
 800a0ec:	e92d 0009 	stmdb	sp!, {r0, r3}
 800a0f0:	f04f 0050 	mov.w	r0, #80	@ 0x50
 800a0f4:	f380 8811 	msr	BASEPRI, r0
 800a0f8:	f3bf 8f4f 	dsb	sy
 800a0fc:	f3bf 8f6f 	isb	sy
 800a100:	f7fe ff9e 	bl	8009040 <vTaskSwitchContext>
 800a104:	f04f 0000 	mov.w	r0, #0
 800a108:	f380 8811 	msr	BASEPRI, r0
 800a10c:	bc09      	pop	{r0, r3}
 800a10e:	6819      	ldr	r1, [r3, #0]
 800a110:	6808      	ldr	r0, [r1, #0]
 800a112:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a116:	f01e 0f10 	tst.w	lr, #16
 800a11a:	bf08      	it	eq
 800a11c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800a120:	f380 8809 	msr	PSP, r0
 800a124:	f3bf 8f6f 	isb	sy
 800a128:	4770      	bx	lr
 800a12a:	bf00      	nop
 800a12c:	f3af 8000 	nop.w

0800a130 <pxCurrentTCBConst>:
 800a130:	24000d60 	.word	0x24000d60
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800a134:	bf00      	nop
 800a136:	bf00      	nop

0800a138 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800a138:	b580      	push	{r7, lr}
 800a13a:	b082      	sub	sp, #8
 800a13c:	af00      	add	r7, sp, #0
	__asm volatile
 800a13e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a142:	f383 8811 	msr	BASEPRI, r3
 800a146:	f3bf 8f6f 	isb	sy
 800a14a:	f3bf 8f4f 	dsb	sy
 800a14e:	607b      	str	r3, [r7, #4]
}
 800a150:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800a152:	f7fe febb 	bl	8008ecc <xTaskIncrementTick>
 800a156:	4603      	mov	r3, r0
 800a158:	2b00      	cmp	r3, #0
 800a15a:	d003      	beq.n	800a164 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800a15c:	4b06      	ldr	r3, [pc, #24]	@ (800a178 <xPortSysTickHandler+0x40>)
 800a15e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a162:	601a      	str	r2, [r3, #0]
 800a164:	2300      	movs	r3, #0
 800a166:	603b      	str	r3, [r7, #0]
	__asm volatile
 800a168:	683b      	ldr	r3, [r7, #0]
 800a16a:	f383 8811 	msr	BASEPRI, r3
}
 800a16e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800a170:	bf00      	nop
 800a172:	3708      	adds	r7, #8
 800a174:	46bd      	mov	sp, r7
 800a176:	bd80      	pop	{r7, pc}
 800a178:	e000ed04 	.word	0xe000ed04

0800a17c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800a17c:	b480      	push	{r7}
 800a17e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800a180:	4b0b      	ldr	r3, [pc, #44]	@ (800a1b0 <vPortSetupTimerInterrupt+0x34>)
 800a182:	2200      	movs	r2, #0
 800a184:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800a186:	4b0b      	ldr	r3, [pc, #44]	@ (800a1b4 <vPortSetupTimerInterrupt+0x38>)
 800a188:	2200      	movs	r2, #0
 800a18a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800a18c:	4b0a      	ldr	r3, [pc, #40]	@ (800a1b8 <vPortSetupTimerInterrupt+0x3c>)
 800a18e:	681b      	ldr	r3, [r3, #0]
 800a190:	4a0a      	ldr	r2, [pc, #40]	@ (800a1bc <vPortSetupTimerInterrupt+0x40>)
 800a192:	fba2 2303 	umull	r2, r3, r2, r3
 800a196:	099b      	lsrs	r3, r3, #6
 800a198:	4a09      	ldr	r2, [pc, #36]	@ (800a1c0 <vPortSetupTimerInterrupt+0x44>)
 800a19a:	3b01      	subs	r3, #1
 800a19c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800a19e:	4b04      	ldr	r3, [pc, #16]	@ (800a1b0 <vPortSetupTimerInterrupt+0x34>)
 800a1a0:	2207      	movs	r2, #7
 800a1a2:	601a      	str	r2, [r3, #0]
}
 800a1a4:	bf00      	nop
 800a1a6:	46bd      	mov	sp, r7
 800a1a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1ac:	4770      	bx	lr
 800a1ae:	bf00      	nop
 800a1b0:	e000e010 	.word	0xe000e010
 800a1b4:	e000e018 	.word	0xe000e018
 800a1b8:	24000000 	.word	0x24000000
 800a1bc:	10624dd3 	.word	0x10624dd3
 800a1c0:	e000e014 	.word	0xe000e014

0800a1c4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800a1c4:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 800a1d4 <vPortEnableVFP+0x10>
 800a1c8:	6801      	ldr	r1, [r0, #0]
 800a1ca:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800a1ce:	6001      	str	r1, [r0, #0]
 800a1d0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800a1d2:	bf00      	nop
 800a1d4:	e000ed88 	.word	0xe000ed88

0800a1d8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800a1d8:	b480      	push	{r7}
 800a1da:	b085      	sub	sp, #20
 800a1dc:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800a1de:	f3ef 8305 	mrs	r3, IPSR
 800a1e2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800a1e4:	68fb      	ldr	r3, [r7, #12]
 800a1e6:	2b0f      	cmp	r3, #15
 800a1e8:	d915      	bls.n	800a216 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800a1ea:	4a18      	ldr	r2, [pc, #96]	@ (800a24c <vPortValidateInterruptPriority+0x74>)
 800a1ec:	68fb      	ldr	r3, [r7, #12]
 800a1ee:	4413      	add	r3, r2
 800a1f0:	781b      	ldrb	r3, [r3, #0]
 800a1f2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800a1f4:	4b16      	ldr	r3, [pc, #88]	@ (800a250 <vPortValidateInterruptPriority+0x78>)
 800a1f6:	781b      	ldrb	r3, [r3, #0]
 800a1f8:	7afa      	ldrb	r2, [r7, #11]
 800a1fa:	429a      	cmp	r2, r3
 800a1fc:	d20b      	bcs.n	800a216 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 800a1fe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a202:	f383 8811 	msr	BASEPRI, r3
 800a206:	f3bf 8f6f 	isb	sy
 800a20a:	f3bf 8f4f 	dsb	sy
 800a20e:	607b      	str	r3, [r7, #4]
}
 800a210:	bf00      	nop
 800a212:	bf00      	nop
 800a214:	e7fd      	b.n	800a212 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800a216:	4b0f      	ldr	r3, [pc, #60]	@ (800a254 <vPortValidateInterruptPriority+0x7c>)
 800a218:	681b      	ldr	r3, [r3, #0]
 800a21a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800a21e:	4b0e      	ldr	r3, [pc, #56]	@ (800a258 <vPortValidateInterruptPriority+0x80>)
 800a220:	681b      	ldr	r3, [r3, #0]
 800a222:	429a      	cmp	r2, r3
 800a224:	d90b      	bls.n	800a23e <vPortValidateInterruptPriority+0x66>
	__asm volatile
 800a226:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a22a:	f383 8811 	msr	BASEPRI, r3
 800a22e:	f3bf 8f6f 	isb	sy
 800a232:	f3bf 8f4f 	dsb	sy
 800a236:	603b      	str	r3, [r7, #0]
}
 800a238:	bf00      	nop
 800a23a:	bf00      	nop
 800a23c:	e7fd      	b.n	800a23a <vPortValidateInterruptPriority+0x62>
	}
 800a23e:	bf00      	nop
 800a240:	3714      	adds	r7, #20
 800a242:	46bd      	mov	sp, r7
 800a244:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a248:	4770      	bx	lr
 800a24a:	bf00      	nop
 800a24c:	e000e3f0 	.word	0xe000e3f0
 800a250:	2400138c 	.word	0x2400138c
 800a254:	e000ed0c 	.word	0xe000ed0c
 800a258:	24001390 	.word	0x24001390

0800a25c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800a25c:	b580      	push	{r7, lr}
 800a25e:	b08a      	sub	sp, #40	@ 0x28
 800a260:	af00      	add	r7, sp, #0
 800a262:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800a264:	2300      	movs	r3, #0
 800a266:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800a268:	f7fe fd74 	bl	8008d54 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800a26c:	4b5c      	ldr	r3, [pc, #368]	@ (800a3e0 <pvPortMalloc+0x184>)
 800a26e:	681b      	ldr	r3, [r3, #0]
 800a270:	2b00      	cmp	r3, #0
 800a272:	d101      	bne.n	800a278 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800a274:	f000 f924 	bl	800a4c0 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800a278:	4b5a      	ldr	r3, [pc, #360]	@ (800a3e4 <pvPortMalloc+0x188>)
 800a27a:	681a      	ldr	r2, [r3, #0]
 800a27c:	687b      	ldr	r3, [r7, #4]
 800a27e:	4013      	ands	r3, r2
 800a280:	2b00      	cmp	r3, #0
 800a282:	f040 8095 	bne.w	800a3b0 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800a286:	687b      	ldr	r3, [r7, #4]
 800a288:	2b00      	cmp	r3, #0
 800a28a:	d01e      	beq.n	800a2ca <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 800a28c:	2208      	movs	r2, #8
 800a28e:	687b      	ldr	r3, [r7, #4]
 800a290:	4413      	add	r3, r2
 800a292:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800a294:	687b      	ldr	r3, [r7, #4]
 800a296:	f003 0307 	and.w	r3, r3, #7
 800a29a:	2b00      	cmp	r3, #0
 800a29c:	d015      	beq.n	800a2ca <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800a29e:	687b      	ldr	r3, [r7, #4]
 800a2a0:	f023 0307 	bic.w	r3, r3, #7
 800a2a4:	3308      	adds	r3, #8
 800a2a6:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800a2a8:	687b      	ldr	r3, [r7, #4]
 800a2aa:	f003 0307 	and.w	r3, r3, #7
 800a2ae:	2b00      	cmp	r3, #0
 800a2b0:	d00b      	beq.n	800a2ca <pvPortMalloc+0x6e>
	__asm volatile
 800a2b2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a2b6:	f383 8811 	msr	BASEPRI, r3
 800a2ba:	f3bf 8f6f 	isb	sy
 800a2be:	f3bf 8f4f 	dsb	sy
 800a2c2:	617b      	str	r3, [r7, #20]
}
 800a2c4:	bf00      	nop
 800a2c6:	bf00      	nop
 800a2c8:	e7fd      	b.n	800a2c6 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800a2ca:	687b      	ldr	r3, [r7, #4]
 800a2cc:	2b00      	cmp	r3, #0
 800a2ce:	d06f      	beq.n	800a3b0 <pvPortMalloc+0x154>
 800a2d0:	4b45      	ldr	r3, [pc, #276]	@ (800a3e8 <pvPortMalloc+0x18c>)
 800a2d2:	681b      	ldr	r3, [r3, #0]
 800a2d4:	687a      	ldr	r2, [r7, #4]
 800a2d6:	429a      	cmp	r2, r3
 800a2d8:	d86a      	bhi.n	800a3b0 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800a2da:	4b44      	ldr	r3, [pc, #272]	@ (800a3ec <pvPortMalloc+0x190>)
 800a2dc:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800a2de:	4b43      	ldr	r3, [pc, #268]	@ (800a3ec <pvPortMalloc+0x190>)
 800a2e0:	681b      	ldr	r3, [r3, #0]
 800a2e2:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800a2e4:	e004      	b.n	800a2f0 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 800a2e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a2e8:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800a2ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a2ec:	681b      	ldr	r3, [r3, #0]
 800a2ee:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800a2f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a2f2:	685b      	ldr	r3, [r3, #4]
 800a2f4:	687a      	ldr	r2, [r7, #4]
 800a2f6:	429a      	cmp	r2, r3
 800a2f8:	d903      	bls.n	800a302 <pvPortMalloc+0xa6>
 800a2fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a2fc:	681b      	ldr	r3, [r3, #0]
 800a2fe:	2b00      	cmp	r3, #0
 800a300:	d1f1      	bne.n	800a2e6 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800a302:	4b37      	ldr	r3, [pc, #220]	@ (800a3e0 <pvPortMalloc+0x184>)
 800a304:	681b      	ldr	r3, [r3, #0]
 800a306:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a308:	429a      	cmp	r2, r3
 800a30a:	d051      	beq.n	800a3b0 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800a30c:	6a3b      	ldr	r3, [r7, #32]
 800a30e:	681b      	ldr	r3, [r3, #0]
 800a310:	2208      	movs	r2, #8
 800a312:	4413      	add	r3, r2
 800a314:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800a316:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a318:	681a      	ldr	r2, [r3, #0]
 800a31a:	6a3b      	ldr	r3, [r7, #32]
 800a31c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800a31e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a320:	685a      	ldr	r2, [r3, #4]
 800a322:	687b      	ldr	r3, [r7, #4]
 800a324:	1ad2      	subs	r2, r2, r3
 800a326:	2308      	movs	r3, #8
 800a328:	005b      	lsls	r3, r3, #1
 800a32a:	429a      	cmp	r2, r3
 800a32c:	d920      	bls.n	800a370 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800a32e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a330:	687b      	ldr	r3, [r7, #4]
 800a332:	4413      	add	r3, r2
 800a334:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800a336:	69bb      	ldr	r3, [r7, #24]
 800a338:	f003 0307 	and.w	r3, r3, #7
 800a33c:	2b00      	cmp	r3, #0
 800a33e:	d00b      	beq.n	800a358 <pvPortMalloc+0xfc>
	__asm volatile
 800a340:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a344:	f383 8811 	msr	BASEPRI, r3
 800a348:	f3bf 8f6f 	isb	sy
 800a34c:	f3bf 8f4f 	dsb	sy
 800a350:	613b      	str	r3, [r7, #16]
}
 800a352:	bf00      	nop
 800a354:	bf00      	nop
 800a356:	e7fd      	b.n	800a354 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800a358:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a35a:	685a      	ldr	r2, [r3, #4]
 800a35c:	687b      	ldr	r3, [r7, #4]
 800a35e:	1ad2      	subs	r2, r2, r3
 800a360:	69bb      	ldr	r3, [r7, #24]
 800a362:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800a364:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a366:	687a      	ldr	r2, [r7, #4]
 800a368:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800a36a:	69b8      	ldr	r0, [r7, #24]
 800a36c:	f000 f90a 	bl	800a584 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800a370:	4b1d      	ldr	r3, [pc, #116]	@ (800a3e8 <pvPortMalloc+0x18c>)
 800a372:	681a      	ldr	r2, [r3, #0]
 800a374:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a376:	685b      	ldr	r3, [r3, #4]
 800a378:	1ad3      	subs	r3, r2, r3
 800a37a:	4a1b      	ldr	r2, [pc, #108]	@ (800a3e8 <pvPortMalloc+0x18c>)
 800a37c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800a37e:	4b1a      	ldr	r3, [pc, #104]	@ (800a3e8 <pvPortMalloc+0x18c>)
 800a380:	681a      	ldr	r2, [r3, #0]
 800a382:	4b1b      	ldr	r3, [pc, #108]	@ (800a3f0 <pvPortMalloc+0x194>)
 800a384:	681b      	ldr	r3, [r3, #0]
 800a386:	429a      	cmp	r2, r3
 800a388:	d203      	bcs.n	800a392 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800a38a:	4b17      	ldr	r3, [pc, #92]	@ (800a3e8 <pvPortMalloc+0x18c>)
 800a38c:	681b      	ldr	r3, [r3, #0]
 800a38e:	4a18      	ldr	r2, [pc, #96]	@ (800a3f0 <pvPortMalloc+0x194>)
 800a390:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800a392:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a394:	685a      	ldr	r2, [r3, #4]
 800a396:	4b13      	ldr	r3, [pc, #76]	@ (800a3e4 <pvPortMalloc+0x188>)
 800a398:	681b      	ldr	r3, [r3, #0]
 800a39a:	431a      	orrs	r2, r3
 800a39c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a39e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800a3a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a3a2:	2200      	movs	r2, #0
 800a3a4:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800a3a6:	4b13      	ldr	r3, [pc, #76]	@ (800a3f4 <pvPortMalloc+0x198>)
 800a3a8:	681b      	ldr	r3, [r3, #0]
 800a3aa:	3301      	adds	r3, #1
 800a3ac:	4a11      	ldr	r2, [pc, #68]	@ (800a3f4 <pvPortMalloc+0x198>)
 800a3ae:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800a3b0:	f7fe fcde 	bl	8008d70 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800a3b4:	69fb      	ldr	r3, [r7, #28]
 800a3b6:	f003 0307 	and.w	r3, r3, #7
 800a3ba:	2b00      	cmp	r3, #0
 800a3bc:	d00b      	beq.n	800a3d6 <pvPortMalloc+0x17a>
	__asm volatile
 800a3be:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a3c2:	f383 8811 	msr	BASEPRI, r3
 800a3c6:	f3bf 8f6f 	isb	sy
 800a3ca:	f3bf 8f4f 	dsb	sy
 800a3ce:	60fb      	str	r3, [r7, #12]
}
 800a3d0:	bf00      	nop
 800a3d2:	bf00      	nop
 800a3d4:	e7fd      	b.n	800a3d2 <pvPortMalloc+0x176>
	return pvReturn;
 800a3d6:	69fb      	ldr	r3, [r7, #28]
}
 800a3d8:	4618      	mov	r0, r3
 800a3da:	3728      	adds	r7, #40	@ 0x28
 800a3dc:	46bd      	mov	sp, r7
 800a3de:	bd80      	pop	{r7, pc}
 800a3e0:	24004f9c 	.word	0x24004f9c
 800a3e4:	24004fb0 	.word	0x24004fb0
 800a3e8:	24004fa0 	.word	0x24004fa0
 800a3ec:	24004f94 	.word	0x24004f94
 800a3f0:	24004fa4 	.word	0x24004fa4
 800a3f4:	24004fa8 	.word	0x24004fa8

0800a3f8 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800a3f8:	b580      	push	{r7, lr}
 800a3fa:	b086      	sub	sp, #24
 800a3fc:	af00      	add	r7, sp, #0
 800a3fe:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800a400:	687b      	ldr	r3, [r7, #4]
 800a402:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800a404:	687b      	ldr	r3, [r7, #4]
 800a406:	2b00      	cmp	r3, #0
 800a408:	d04f      	beq.n	800a4aa <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800a40a:	2308      	movs	r3, #8
 800a40c:	425b      	negs	r3, r3
 800a40e:	697a      	ldr	r2, [r7, #20]
 800a410:	4413      	add	r3, r2
 800a412:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800a414:	697b      	ldr	r3, [r7, #20]
 800a416:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800a418:	693b      	ldr	r3, [r7, #16]
 800a41a:	685a      	ldr	r2, [r3, #4]
 800a41c:	4b25      	ldr	r3, [pc, #148]	@ (800a4b4 <vPortFree+0xbc>)
 800a41e:	681b      	ldr	r3, [r3, #0]
 800a420:	4013      	ands	r3, r2
 800a422:	2b00      	cmp	r3, #0
 800a424:	d10b      	bne.n	800a43e <vPortFree+0x46>
	__asm volatile
 800a426:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a42a:	f383 8811 	msr	BASEPRI, r3
 800a42e:	f3bf 8f6f 	isb	sy
 800a432:	f3bf 8f4f 	dsb	sy
 800a436:	60fb      	str	r3, [r7, #12]
}
 800a438:	bf00      	nop
 800a43a:	bf00      	nop
 800a43c:	e7fd      	b.n	800a43a <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800a43e:	693b      	ldr	r3, [r7, #16]
 800a440:	681b      	ldr	r3, [r3, #0]
 800a442:	2b00      	cmp	r3, #0
 800a444:	d00b      	beq.n	800a45e <vPortFree+0x66>
	__asm volatile
 800a446:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a44a:	f383 8811 	msr	BASEPRI, r3
 800a44e:	f3bf 8f6f 	isb	sy
 800a452:	f3bf 8f4f 	dsb	sy
 800a456:	60bb      	str	r3, [r7, #8]
}
 800a458:	bf00      	nop
 800a45a:	bf00      	nop
 800a45c:	e7fd      	b.n	800a45a <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800a45e:	693b      	ldr	r3, [r7, #16]
 800a460:	685a      	ldr	r2, [r3, #4]
 800a462:	4b14      	ldr	r3, [pc, #80]	@ (800a4b4 <vPortFree+0xbc>)
 800a464:	681b      	ldr	r3, [r3, #0]
 800a466:	4013      	ands	r3, r2
 800a468:	2b00      	cmp	r3, #0
 800a46a:	d01e      	beq.n	800a4aa <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800a46c:	693b      	ldr	r3, [r7, #16]
 800a46e:	681b      	ldr	r3, [r3, #0]
 800a470:	2b00      	cmp	r3, #0
 800a472:	d11a      	bne.n	800a4aa <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800a474:	693b      	ldr	r3, [r7, #16]
 800a476:	685a      	ldr	r2, [r3, #4]
 800a478:	4b0e      	ldr	r3, [pc, #56]	@ (800a4b4 <vPortFree+0xbc>)
 800a47a:	681b      	ldr	r3, [r3, #0]
 800a47c:	43db      	mvns	r3, r3
 800a47e:	401a      	ands	r2, r3
 800a480:	693b      	ldr	r3, [r7, #16]
 800a482:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800a484:	f7fe fc66 	bl	8008d54 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800a488:	693b      	ldr	r3, [r7, #16]
 800a48a:	685a      	ldr	r2, [r3, #4]
 800a48c:	4b0a      	ldr	r3, [pc, #40]	@ (800a4b8 <vPortFree+0xc0>)
 800a48e:	681b      	ldr	r3, [r3, #0]
 800a490:	4413      	add	r3, r2
 800a492:	4a09      	ldr	r2, [pc, #36]	@ (800a4b8 <vPortFree+0xc0>)
 800a494:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800a496:	6938      	ldr	r0, [r7, #16]
 800a498:	f000 f874 	bl	800a584 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800a49c:	4b07      	ldr	r3, [pc, #28]	@ (800a4bc <vPortFree+0xc4>)
 800a49e:	681b      	ldr	r3, [r3, #0]
 800a4a0:	3301      	adds	r3, #1
 800a4a2:	4a06      	ldr	r2, [pc, #24]	@ (800a4bc <vPortFree+0xc4>)
 800a4a4:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800a4a6:	f7fe fc63 	bl	8008d70 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800a4aa:	bf00      	nop
 800a4ac:	3718      	adds	r7, #24
 800a4ae:	46bd      	mov	sp, r7
 800a4b0:	bd80      	pop	{r7, pc}
 800a4b2:	bf00      	nop
 800a4b4:	24004fb0 	.word	0x24004fb0
 800a4b8:	24004fa0 	.word	0x24004fa0
 800a4bc:	24004fac 	.word	0x24004fac

0800a4c0 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800a4c0:	b480      	push	{r7}
 800a4c2:	b085      	sub	sp, #20
 800a4c4:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800a4c6:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 800a4ca:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800a4cc:	4b27      	ldr	r3, [pc, #156]	@ (800a56c <prvHeapInit+0xac>)
 800a4ce:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800a4d0:	68fb      	ldr	r3, [r7, #12]
 800a4d2:	f003 0307 	and.w	r3, r3, #7
 800a4d6:	2b00      	cmp	r3, #0
 800a4d8:	d00c      	beq.n	800a4f4 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800a4da:	68fb      	ldr	r3, [r7, #12]
 800a4dc:	3307      	adds	r3, #7
 800a4de:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800a4e0:	68fb      	ldr	r3, [r7, #12]
 800a4e2:	f023 0307 	bic.w	r3, r3, #7
 800a4e6:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800a4e8:	68ba      	ldr	r2, [r7, #8]
 800a4ea:	68fb      	ldr	r3, [r7, #12]
 800a4ec:	1ad3      	subs	r3, r2, r3
 800a4ee:	4a1f      	ldr	r2, [pc, #124]	@ (800a56c <prvHeapInit+0xac>)
 800a4f0:	4413      	add	r3, r2
 800a4f2:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800a4f4:	68fb      	ldr	r3, [r7, #12]
 800a4f6:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800a4f8:	4a1d      	ldr	r2, [pc, #116]	@ (800a570 <prvHeapInit+0xb0>)
 800a4fa:	687b      	ldr	r3, [r7, #4]
 800a4fc:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800a4fe:	4b1c      	ldr	r3, [pc, #112]	@ (800a570 <prvHeapInit+0xb0>)
 800a500:	2200      	movs	r2, #0
 800a502:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800a504:	687b      	ldr	r3, [r7, #4]
 800a506:	68ba      	ldr	r2, [r7, #8]
 800a508:	4413      	add	r3, r2
 800a50a:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800a50c:	2208      	movs	r2, #8
 800a50e:	68fb      	ldr	r3, [r7, #12]
 800a510:	1a9b      	subs	r3, r3, r2
 800a512:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800a514:	68fb      	ldr	r3, [r7, #12]
 800a516:	f023 0307 	bic.w	r3, r3, #7
 800a51a:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800a51c:	68fb      	ldr	r3, [r7, #12]
 800a51e:	4a15      	ldr	r2, [pc, #84]	@ (800a574 <prvHeapInit+0xb4>)
 800a520:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800a522:	4b14      	ldr	r3, [pc, #80]	@ (800a574 <prvHeapInit+0xb4>)
 800a524:	681b      	ldr	r3, [r3, #0]
 800a526:	2200      	movs	r2, #0
 800a528:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800a52a:	4b12      	ldr	r3, [pc, #72]	@ (800a574 <prvHeapInit+0xb4>)
 800a52c:	681b      	ldr	r3, [r3, #0]
 800a52e:	2200      	movs	r2, #0
 800a530:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800a532:	687b      	ldr	r3, [r7, #4]
 800a534:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800a536:	683b      	ldr	r3, [r7, #0]
 800a538:	68fa      	ldr	r2, [r7, #12]
 800a53a:	1ad2      	subs	r2, r2, r3
 800a53c:	683b      	ldr	r3, [r7, #0]
 800a53e:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800a540:	4b0c      	ldr	r3, [pc, #48]	@ (800a574 <prvHeapInit+0xb4>)
 800a542:	681a      	ldr	r2, [r3, #0]
 800a544:	683b      	ldr	r3, [r7, #0]
 800a546:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800a548:	683b      	ldr	r3, [r7, #0]
 800a54a:	685b      	ldr	r3, [r3, #4]
 800a54c:	4a0a      	ldr	r2, [pc, #40]	@ (800a578 <prvHeapInit+0xb8>)
 800a54e:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800a550:	683b      	ldr	r3, [r7, #0]
 800a552:	685b      	ldr	r3, [r3, #4]
 800a554:	4a09      	ldr	r2, [pc, #36]	@ (800a57c <prvHeapInit+0xbc>)
 800a556:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800a558:	4b09      	ldr	r3, [pc, #36]	@ (800a580 <prvHeapInit+0xc0>)
 800a55a:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800a55e:	601a      	str	r2, [r3, #0]
}
 800a560:	bf00      	nop
 800a562:	3714      	adds	r7, #20
 800a564:	46bd      	mov	sp, r7
 800a566:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a56a:	4770      	bx	lr
 800a56c:	24001394 	.word	0x24001394
 800a570:	24004f94 	.word	0x24004f94
 800a574:	24004f9c 	.word	0x24004f9c
 800a578:	24004fa4 	.word	0x24004fa4
 800a57c:	24004fa0 	.word	0x24004fa0
 800a580:	24004fb0 	.word	0x24004fb0

0800a584 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800a584:	b480      	push	{r7}
 800a586:	b085      	sub	sp, #20
 800a588:	af00      	add	r7, sp, #0
 800a58a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800a58c:	4b28      	ldr	r3, [pc, #160]	@ (800a630 <prvInsertBlockIntoFreeList+0xac>)
 800a58e:	60fb      	str	r3, [r7, #12]
 800a590:	e002      	b.n	800a598 <prvInsertBlockIntoFreeList+0x14>
 800a592:	68fb      	ldr	r3, [r7, #12]
 800a594:	681b      	ldr	r3, [r3, #0]
 800a596:	60fb      	str	r3, [r7, #12]
 800a598:	68fb      	ldr	r3, [r7, #12]
 800a59a:	681b      	ldr	r3, [r3, #0]
 800a59c:	687a      	ldr	r2, [r7, #4]
 800a59e:	429a      	cmp	r2, r3
 800a5a0:	d8f7      	bhi.n	800a592 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800a5a2:	68fb      	ldr	r3, [r7, #12]
 800a5a4:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800a5a6:	68fb      	ldr	r3, [r7, #12]
 800a5a8:	685b      	ldr	r3, [r3, #4]
 800a5aa:	68ba      	ldr	r2, [r7, #8]
 800a5ac:	4413      	add	r3, r2
 800a5ae:	687a      	ldr	r2, [r7, #4]
 800a5b0:	429a      	cmp	r2, r3
 800a5b2:	d108      	bne.n	800a5c6 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800a5b4:	68fb      	ldr	r3, [r7, #12]
 800a5b6:	685a      	ldr	r2, [r3, #4]
 800a5b8:	687b      	ldr	r3, [r7, #4]
 800a5ba:	685b      	ldr	r3, [r3, #4]
 800a5bc:	441a      	add	r2, r3
 800a5be:	68fb      	ldr	r3, [r7, #12]
 800a5c0:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800a5c2:	68fb      	ldr	r3, [r7, #12]
 800a5c4:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800a5c6:	687b      	ldr	r3, [r7, #4]
 800a5c8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800a5ca:	687b      	ldr	r3, [r7, #4]
 800a5cc:	685b      	ldr	r3, [r3, #4]
 800a5ce:	68ba      	ldr	r2, [r7, #8]
 800a5d0:	441a      	add	r2, r3
 800a5d2:	68fb      	ldr	r3, [r7, #12]
 800a5d4:	681b      	ldr	r3, [r3, #0]
 800a5d6:	429a      	cmp	r2, r3
 800a5d8:	d118      	bne.n	800a60c <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800a5da:	68fb      	ldr	r3, [r7, #12]
 800a5dc:	681a      	ldr	r2, [r3, #0]
 800a5de:	4b15      	ldr	r3, [pc, #84]	@ (800a634 <prvInsertBlockIntoFreeList+0xb0>)
 800a5e0:	681b      	ldr	r3, [r3, #0]
 800a5e2:	429a      	cmp	r2, r3
 800a5e4:	d00d      	beq.n	800a602 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800a5e6:	687b      	ldr	r3, [r7, #4]
 800a5e8:	685a      	ldr	r2, [r3, #4]
 800a5ea:	68fb      	ldr	r3, [r7, #12]
 800a5ec:	681b      	ldr	r3, [r3, #0]
 800a5ee:	685b      	ldr	r3, [r3, #4]
 800a5f0:	441a      	add	r2, r3
 800a5f2:	687b      	ldr	r3, [r7, #4]
 800a5f4:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800a5f6:	68fb      	ldr	r3, [r7, #12]
 800a5f8:	681b      	ldr	r3, [r3, #0]
 800a5fa:	681a      	ldr	r2, [r3, #0]
 800a5fc:	687b      	ldr	r3, [r7, #4]
 800a5fe:	601a      	str	r2, [r3, #0]
 800a600:	e008      	b.n	800a614 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800a602:	4b0c      	ldr	r3, [pc, #48]	@ (800a634 <prvInsertBlockIntoFreeList+0xb0>)
 800a604:	681a      	ldr	r2, [r3, #0]
 800a606:	687b      	ldr	r3, [r7, #4]
 800a608:	601a      	str	r2, [r3, #0]
 800a60a:	e003      	b.n	800a614 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800a60c:	68fb      	ldr	r3, [r7, #12]
 800a60e:	681a      	ldr	r2, [r3, #0]
 800a610:	687b      	ldr	r3, [r7, #4]
 800a612:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800a614:	68fa      	ldr	r2, [r7, #12]
 800a616:	687b      	ldr	r3, [r7, #4]
 800a618:	429a      	cmp	r2, r3
 800a61a:	d002      	beq.n	800a622 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800a61c:	68fb      	ldr	r3, [r7, #12]
 800a61e:	687a      	ldr	r2, [r7, #4]
 800a620:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800a622:	bf00      	nop
 800a624:	3714      	adds	r7, #20
 800a626:	46bd      	mov	sp, r7
 800a628:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a62c:	4770      	bx	lr
 800a62e:	bf00      	nop
 800a630:	24004f94 	.word	0x24004f94
 800a634:	24004f9c 	.word	0x24004f9c

0800a638 <memset>:
 800a638:	4402      	add	r2, r0
 800a63a:	4603      	mov	r3, r0
 800a63c:	4293      	cmp	r3, r2
 800a63e:	d100      	bne.n	800a642 <memset+0xa>
 800a640:	4770      	bx	lr
 800a642:	f803 1b01 	strb.w	r1, [r3], #1
 800a646:	e7f9      	b.n	800a63c <memset+0x4>

0800a648 <_reclaim_reent>:
 800a648:	4b29      	ldr	r3, [pc, #164]	@ (800a6f0 <_reclaim_reent+0xa8>)
 800a64a:	681b      	ldr	r3, [r3, #0]
 800a64c:	4283      	cmp	r3, r0
 800a64e:	b570      	push	{r4, r5, r6, lr}
 800a650:	4604      	mov	r4, r0
 800a652:	d04b      	beq.n	800a6ec <_reclaim_reent+0xa4>
 800a654:	69c3      	ldr	r3, [r0, #28]
 800a656:	b1ab      	cbz	r3, 800a684 <_reclaim_reent+0x3c>
 800a658:	68db      	ldr	r3, [r3, #12]
 800a65a:	b16b      	cbz	r3, 800a678 <_reclaim_reent+0x30>
 800a65c:	2500      	movs	r5, #0
 800a65e:	69e3      	ldr	r3, [r4, #28]
 800a660:	68db      	ldr	r3, [r3, #12]
 800a662:	5959      	ldr	r1, [r3, r5]
 800a664:	2900      	cmp	r1, #0
 800a666:	d13b      	bne.n	800a6e0 <_reclaim_reent+0x98>
 800a668:	3504      	adds	r5, #4
 800a66a:	2d80      	cmp	r5, #128	@ 0x80
 800a66c:	d1f7      	bne.n	800a65e <_reclaim_reent+0x16>
 800a66e:	69e3      	ldr	r3, [r4, #28]
 800a670:	4620      	mov	r0, r4
 800a672:	68d9      	ldr	r1, [r3, #12]
 800a674:	f000 f872 	bl	800a75c <_free_r>
 800a678:	69e3      	ldr	r3, [r4, #28]
 800a67a:	6819      	ldr	r1, [r3, #0]
 800a67c:	b111      	cbz	r1, 800a684 <_reclaim_reent+0x3c>
 800a67e:	4620      	mov	r0, r4
 800a680:	f000 f86c 	bl	800a75c <_free_r>
 800a684:	6961      	ldr	r1, [r4, #20]
 800a686:	b111      	cbz	r1, 800a68e <_reclaim_reent+0x46>
 800a688:	4620      	mov	r0, r4
 800a68a:	f000 f867 	bl	800a75c <_free_r>
 800a68e:	69e1      	ldr	r1, [r4, #28]
 800a690:	b111      	cbz	r1, 800a698 <_reclaim_reent+0x50>
 800a692:	4620      	mov	r0, r4
 800a694:	f000 f862 	bl	800a75c <_free_r>
 800a698:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 800a69a:	b111      	cbz	r1, 800a6a2 <_reclaim_reent+0x5a>
 800a69c:	4620      	mov	r0, r4
 800a69e:	f000 f85d 	bl	800a75c <_free_r>
 800a6a2:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800a6a4:	b111      	cbz	r1, 800a6ac <_reclaim_reent+0x64>
 800a6a6:	4620      	mov	r0, r4
 800a6a8:	f000 f858 	bl	800a75c <_free_r>
 800a6ac:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 800a6ae:	b111      	cbz	r1, 800a6b6 <_reclaim_reent+0x6e>
 800a6b0:	4620      	mov	r0, r4
 800a6b2:	f000 f853 	bl	800a75c <_free_r>
 800a6b6:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 800a6b8:	b111      	cbz	r1, 800a6c0 <_reclaim_reent+0x78>
 800a6ba:	4620      	mov	r0, r4
 800a6bc:	f000 f84e 	bl	800a75c <_free_r>
 800a6c0:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 800a6c2:	b111      	cbz	r1, 800a6ca <_reclaim_reent+0x82>
 800a6c4:	4620      	mov	r0, r4
 800a6c6:	f000 f849 	bl	800a75c <_free_r>
 800a6ca:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 800a6cc:	b111      	cbz	r1, 800a6d4 <_reclaim_reent+0x8c>
 800a6ce:	4620      	mov	r0, r4
 800a6d0:	f000 f844 	bl	800a75c <_free_r>
 800a6d4:	6a23      	ldr	r3, [r4, #32]
 800a6d6:	b14b      	cbz	r3, 800a6ec <_reclaim_reent+0xa4>
 800a6d8:	4620      	mov	r0, r4
 800a6da:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800a6de:	4718      	bx	r3
 800a6e0:	680e      	ldr	r6, [r1, #0]
 800a6e2:	4620      	mov	r0, r4
 800a6e4:	f000 f83a 	bl	800a75c <_free_r>
 800a6e8:	4631      	mov	r1, r6
 800a6ea:	e7bb      	b.n	800a664 <_reclaim_reent+0x1c>
 800a6ec:	bd70      	pop	{r4, r5, r6, pc}
 800a6ee:	bf00      	nop
 800a6f0:	24000014 	.word	0x24000014

0800a6f4 <__libc_init_array>:
 800a6f4:	b570      	push	{r4, r5, r6, lr}
 800a6f6:	4d0d      	ldr	r5, [pc, #52]	@ (800a72c <__libc_init_array+0x38>)
 800a6f8:	4c0d      	ldr	r4, [pc, #52]	@ (800a730 <__libc_init_array+0x3c>)
 800a6fa:	1b64      	subs	r4, r4, r5
 800a6fc:	10a4      	asrs	r4, r4, #2
 800a6fe:	2600      	movs	r6, #0
 800a700:	42a6      	cmp	r6, r4
 800a702:	d109      	bne.n	800a718 <__libc_init_array+0x24>
 800a704:	4d0b      	ldr	r5, [pc, #44]	@ (800a734 <__libc_init_array+0x40>)
 800a706:	4c0c      	ldr	r4, [pc, #48]	@ (800a738 <__libc_init_array+0x44>)
 800a708:	f000 f87e 	bl	800a808 <_init>
 800a70c:	1b64      	subs	r4, r4, r5
 800a70e:	10a4      	asrs	r4, r4, #2
 800a710:	2600      	movs	r6, #0
 800a712:	42a6      	cmp	r6, r4
 800a714:	d105      	bne.n	800a722 <__libc_init_array+0x2e>
 800a716:	bd70      	pop	{r4, r5, r6, pc}
 800a718:	f855 3b04 	ldr.w	r3, [r5], #4
 800a71c:	4798      	blx	r3
 800a71e:	3601      	adds	r6, #1
 800a720:	e7ee      	b.n	800a700 <__libc_init_array+0xc>
 800a722:	f855 3b04 	ldr.w	r3, [r5], #4
 800a726:	4798      	blx	r3
 800a728:	3601      	adds	r6, #1
 800a72a:	e7f2      	b.n	800a712 <__libc_init_array+0x1e>
 800a72c:	0800a8a8 	.word	0x0800a8a8
 800a730:	0800a8a8 	.word	0x0800a8a8
 800a734:	0800a8a8 	.word	0x0800a8a8
 800a738:	0800a8ac 	.word	0x0800a8ac

0800a73c <__retarget_lock_acquire_recursive>:
 800a73c:	4770      	bx	lr

0800a73e <__retarget_lock_release_recursive>:
 800a73e:	4770      	bx	lr

0800a740 <memcpy>:
 800a740:	440a      	add	r2, r1
 800a742:	4291      	cmp	r1, r2
 800a744:	f100 33ff 	add.w	r3, r0, #4294967295
 800a748:	d100      	bne.n	800a74c <memcpy+0xc>
 800a74a:	4770      	bx	lr
 800a74c:	b510      	push	{r4, lr}
 800a74e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a752:	f803 4f01 	strb.w	r4, [r3, #1]!
 800a756:	4291      	cmp	r1, r2
 800a758:	d1f9      	bne.n	800a74e <memcpy+0xe>
 800a75a:	bd10      	pop	{r4, pc}

0800a75c <_free_r>:
 800a75c:	b538      	push	{r3, r4, r5, lr}
 800a75e:	4605      	mov	r5, r0
 800a760:	2900      	cmp	r1, #0
 800a762:	d041      	beq.n	800a7e8 <_free_r+0x8c>
 800a764:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a768:	1f0c      	subs	r4, r1, #4
 800a76a:	2b00      	cmp	r3, #0
 800a76c:	bfb8      	it	lt
 800a76e:	18e4      	addlt	r4, r4, r3
 800a770:	f000 f83e 	bl	800a7f0 <__malloc_lock>
 800a774:	4a1d      	ldr	r2, [pc, #116]	@ (800a7ec <_free_r+0x90>)
 800a776:	6813      	ldr	r3, [r2, #0]
 800a778:	b933      	cbnz	r3, 800a788 <_free_r+0x2c>
 800a77a:	6063      	str	r3, [r4, #4]
 800a77c:	6014      	str	r4, [r2, #0]
 800a77e:	4628      	mov	r0, r5
 800a780:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a784:	f000 b83a 	b.w	800a7fc <__malloc_unlock>
 800a788:	42a3      	cmp	r3, r4
 800a78a:	d908      	bls.n	800a79e <_free_r+0x42>
 800a78c:	6820      	ldr	r0, [r4, #0]
 800a78e:	1821      	adds	r1, r4, r0
 800a790:	428b      	cmp	r3, r1
 800a792:	bf01      	itttt	eq
 800a794:	6819      	ldreq	r1, [r3, #0]
 800a796:	685b      	ldreq	r3, [r3, #4]
 800a798:	1809      	addeq	r1, r1, r0
 800a79a:	6021      	streq	r1, [r4, #0]
 800a79c:	e7ed      	b.n	800a77a <_free_r+0x1e>
 800a79e:	461a      	mov	r2, r3
 800a7a0:	685b      	ldr	r3, [r3, #4]
 800a7a2:	b10b      	cbz	r3, 800a7a8 <_free_r+0x4c>
 800a7a4:	42a3      	cmp	r3, r4
 800a7a6:	d9fa      	bls.n	800a79e <_free_r+0x42>
 800a7a8:	6811      	ldr	r1, [r2, #0]
 800a7aa:	1850      	adds	r0, r2, r1
 800a7ac:	42a0      	cmp	r0, r4
 800a7ae:	d10b      	bne.n	800a7c8 <_free_r+0x6c>
 800a7b0:	6820      	ldr	r0, [r4, #0]
 800a7b2:	4401      	add	r1, r0
 800a7b4:	1850      	adds	r0, r2, r1
 800a7b6:	4283      	cmp	r3, r0
 800a7b8:	6011      	str	r1, [r2, #0]
 800a7ba:	d1e0      	bne.n	800a77e <_free_r+0x22>
 800a7bc:	6818      	ldr	r0, [r3, #0]
 800a7be:	685b      	ldr	r3, [r3, #4]
 800a7c0:	6053      	str	r3, [r2, #4]
 800a7c2:	4408      	add	r0, r1
 800a7c4:	6010      	str	r0, [r2, #0]
 800a7c6:	e7da      	b.n	800a77e <_free_r+0x22>
 800a7c8:	d902      	bls.n	800a7d0 <_free_r+0x74>
 800a7ca:	230c      	movs	r3, #12
 800a7cc:	602b      	str	r3, [r5, #0]
 800a7ce:	e7d6      	b.n	800a77e <_free_r+0x22>
 800a7d0:	6820      	ldr	r0, [r4, #0]
 800a7d2:	1821      	adds	r1, r4, r0
 800a7d4:	428b      	cmp	r3, r1
 800a7d6:	bf04      	itt	eq
 800a7d8:	6819      	ldreq	r1, [r3, #0]
 800a7da:	685b      	ldreq	r3, [r3, #4]
 800a7dc:	6063      	str	r3, [r4, #4]
 800a7de:	bf04      	itt	eq
 800a7e0:	1809      	addeq	r1, r1, r0
 800a7e2:	6021      	streq	r1, [r4, #0]
 800a7e4:	6054      	str	r4, [r2, #4]
 800a7e6:	e7ca      	b.n	800a77e <_free_r+0x22>
 800a7e8:	bd38      	pop	{r3, r4, r5, pc}
 800a7ea:	bf00      	nop
 800a7ec:	240050f0 	.word	0x240050f0

0800a7f0 <__malloc_lock>:
 800a7f0:	4801      	ldr	r0, [pc, #4]	@ (800a7f8 <__malloc_lock+0x8>)
 800a7f2:	f7ff bfa3 	b.w	800a73c <__retarget_lock_acquire_recursive>
 800a7f6:	bf00      	nop
 800a7f8:	240050ec 	.word	0x240050ec

0800a7fc <__malloc_unlock>:
 800a7fc:	4801      	ldr	r0, [pc, #4]	@ (800a804 <__malloc_unlock+0x8>)
 800a7fe:	f7ff bf9e 	b.w	800a73e <__retarget_lock_release_recursive>
 800a802:	bf00      	nop
 800a804:	240050ec 	.word	0x240050ec

0800a808 <_init>:
 800a808:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a80a:	bf00      	nop
 800a80c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a80e:	bc08      	pop	{r3}
 800a810:	469e      	mov	lr, r3
 800a812:	4770      	bx	lr

0800a814 <_fini>:
 800a814:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a816:	bf00      	nop
 800a818:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a81a:	bc08      	pop	{r3}
 800a81c:	469e      	mov	lr, r3
 800a81e:	4770      	bx	lr
