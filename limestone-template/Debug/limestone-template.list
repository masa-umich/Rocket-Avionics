
limestone-template.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002cc  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b8b0  080002d0  080002d0  000012d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000080  0800bb80  0800bb80  0000cb80  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800bc00  0800bc00  0000cc00  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0800bc08  0800bc08  0000cc08  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0800bc0c  0800bc0c  0000cc0c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000064  24000000  0800bc10  0000d000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          0000509c  24000064  0800bc74  0000d064  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  24005100  0800bc74  0000d100  2**0
                  ALLOC
  9 .lwip_sec     00000160  30000000  30000000  0000e000  2**2
                  ALLOC
 10 .ARM.attributes 0000002e  00000000  00000000  0000d064  2**0
                  CONTENTS, READONLY
 11 .debug_info   0002dae4  00000000  00000000  0000d092  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_abbrev 00004a5c  00000000  00000000  0003ab76  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_aranges 00002028  00000000  00000000  0003f5d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_rnglists 00001935  00000000  00000000  00041600  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_macro  00037ead  00000000  00000000  00042f35  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   00028ce8  00000000  00000000  0007ade2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    00168fdb  00000000  00000000  000a3aca  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .comment      00000043  00000000  00000000  0020caa5  2**0
                  CONTENTS, READONLY
 19 .debug_frame  00008edc  00000000  00000000  0020cae8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_line_str 0000006d  00000000  00000000  002159c4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002d0 <__do_global_dtors_aux>:
 80002d0:	b510      	push	{r4, lr}
 80002d2:	4c05      	ldr	r4, [pc, #20]	@ (80002e8 <__do_global_dtors_aux+0x18>)
 80002d4:	7823      	ldrb	r3, [r4, #0]
 80002d6:	b933      	cbnz	r3, 80002e6 <__do_global_dtors_aux+0x16>
 80002d8:	4b04      	ldr	r3, [pc, #16]	@ (80002ec <__do_global_dtors_aux+0x1c>)
 80002da:	b113      	cbz	r3, 80002e2 <__do_global_dtors_aux+0x12>
 80002dc:	4804      	ldr	r0, [pc, #16]	@ (80002f0 <__do_global_dtors_aux+0x20>)
 80002de:	f3af 8000 	nop.w
 80002e2:	2301      	movs	r3, #1
 80002e4:	7023      	strb	r3, [r4, #0]
 80002e6:	bd10      	pop	{r4, pc}
 80002e8:	24000064 	.word	0x24000064
 80002ec:	00000000 	.word	0x00000000
 80002f0:	0800bb68 	.word	0x0800bb68

080002f4 <frame_dummy>:
 80002f4:	b508      	push	{r3, lr}
 80002f6:	4b03      	ldr	r3, [pc, #12]	@ (8000304 <frame_dummy+0x10>)
 80002f8:	b11b      	cbz	r3, 8000302 <frame_dummy+0xe>
 80002fa:	4903      	ldr	r1, [pc, #12]	@ (8000308 <frame_dummy+0x14>)
 80002fc:	4803      	ldr	r0, [pc, #12]	@ (800030c <frame_dummy+0x18>)
 80002fe:	f3af 8000 	nop.w
 8000302:	bd08      	pop	{r3, pc}
 8000304:	00000000 	.word	0x00000000
 8000308:	24000068 	.word	0x24000068
 800030c:	0800bb68 	.word	0x0800bb68

08000310 <__aeabi_drsub>:
 8000310:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000314:	e002      	b.n	800031c <__adddf3>
 8000316:	bf00      	nop

08000318 <__aeabi_dsub>:
 8000318:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800031c <__adddf3>:
 800031c:	b530      	push	{r4, r5, lr}
 800031e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000322:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000326:	ea94 0f05 	teq	r4, r5
 800032a:	bf08      	it	eq
 800032c:	ea90 0f02 	teqeq	r0, r2
 8000330:	bf1f      	itttt	ne
 8000332:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000336:	ea55 0c02 	orrsne.w	ip, r5, r2
 800033a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800033e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000342:	f000 80e2 	beq.w	800050a <__adddf3+0x1ee>
 8000346:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800034a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800034e:	bfb8      	it	lt
 8000350:	426d      	neglt	r5, r5
 8000352:	dd0c      	ble.n	800036e <__adddf3+0x52>
 8000354:	442c      	add	r4, r5
 8000356:	ea80 0202 	eor.w	r2, r0, r2
 800035a:	ea81 0303 	eor.w	r3, r1, r3
 800035e:	ea82 0000 	eor.w	r0, r2, r0
 8000362:	ea83 0101 	eor.w	r1, r3, r1
 8000366:	ea80 0202 	eor.w	r2, r0, r2
 800036a:	ea81 0303 	eor.w	r3, r1, r3
 800036e:	2d36      	cmp	r5, #54	@ 0x36
 8000370:	bf88      	it	hi
 8000372:	bd30      	pophi	{r4, r5, pc}
 8000374:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000378:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800037c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000380:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000384:	d002      	beq.n	800038c <__adddf3+0x70>
 8000386:	4240      	negs	r0, r0
 8000388:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800038c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000390:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000394:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000398:	d002      	beq.n	80003a0 <__adddf3+0x84>
 800039a:	4252      	negs	r2, r2
 800039c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80003a0:	ea94 0f05 	teq	r4, r5
 80003a4:	f000 80a7 	beq.w	80004f6 <__adddf3+0x1da>
 80003a8:	f1a4 0401 	sub.w	r4, r4, #1
 80003ac:	f1d5 0e20 	rsbs	lr, r5, #32
 80003b0:	db0d      	blt.n	80003ce <__adddf3+0xb2>
 80003b2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80003b6:	fa22 f205 	lsr.w	r2, r2, r5
 80003ba:	1880      	adds	r0, r0, r2
 80003bc:	f141 0100 	adc.w	r1, r1, #0
 80003c0:	fa03 f20e 	lsl.w	r2, r3, lr
 80003c4:	1880      	adds	r0, r0, r2
 80003c6:	fa43 f305 	asr.w	r3, r3, r5
 80003ca:	4159      	adcs	r1, r3
 80003cc:	e00e      	b.n	80003ec <__adddf3+0xd0>
 80003ce:	f1a5 0520 	sub.w	r5, r5, #32
 80003d2:	f10e 0e20 	add.w	lr, lr, #32
 80003d6:	2a01      	cmp	r2, #1
 80003d8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80003dc:	bf28      	it	cs
 80003de:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003e2:	fa43 f305 	asr.w	r3, r3, r5
 80003e6:	18c0      	adds	r0, r0, r3
 80003e8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003ec:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003f0:	d507      	bpl.n	8000402 <__adddf3+0xe6>
 80003f2:	f04f 0e00 	mov.w	lr, #0
 80003f6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003fa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003fe:	eb6e 0101 	sbc.w	r1, lr, r1
 8000402:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000406:	d31b      	bcc.n	8000440 <__adddf3+0x124>
 8000408:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800040c:	d30c      	bcc.n	8000428 <__adddf3+0x10c>
 800040e:	0849      	lsrs	r1, r1, #1
 8000410:	ea5f 0030 	movs.w	r0, r0, rrx
 8000414:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000418:	f104 0401 	add.w	r4, r4, #1
 800041c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000420:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000424:	f080 809a 	bcs.w	800055c <__adddf3+0x240>
 8000428:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800042c:	bf08      	it	eq
 800042e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000432:	f150 0000 	adcs.w	r0, r0, #0
 8000436:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800043a:	ea41 0105 	orr.w	r1, r1, r5
 800043e:	bd30      	pop	{r4, r5, pc}
 8000440:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000444:	4140      	adcs	r0, r0
 8000446:	eb41 0101 	adc.w	r1, r1, r1
 800044a:	3c01      	subs	r4, #1
 800044c:	bf28      	it	cs
 800044e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000452:	d2e9      	bcs.n	8000428 <__adddf3+0x10c>
 8000454:	f091 0f00 	teq	r1, #0
 8000458:	bf04      	itt	eq
 800045a:	4601      	moveq	r1, r0
 800045c:	2000      	moveq	r0, #0
 800045e:	fab1 f381 	clz	r3, r1
 8000462:	bf08      	it	eq
 8000464:	3320      	addeq	r3, #32
 8000466:	f1a3 030b 	sub.w	r3, r3, #11
 800046a:	f1b3 0220 	subs.w	r2, r3, #32
 800046e:	da0c      	bge.n	800048a <__adddf3+0x16e>
 8000470:	320c      	adds	r2, #12
 8000472:	dd08      	ble.n	8000486 <__adddf3+0x16a>
 8000474:	f102 0c14 	add.w	ip, r2, #20
 8000478:	f1c2 020c 	rsb	r2, r2, #12
 800047c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000480:	fa21 f102 	lsr.w	r1, r1, r2
 8000484:	e00c      	b.n	80004a0 <__adddf3+0x184>
 8000486:	f102 0214 	add.w	r2, r2, #20
 800048a:	bfd8      	it	le
 800048c:	f1c2 0c20 	rsble	ip, r2, #32
 8000490:	fa01 f102 	lsl.w	r1, r1, r2
 8000494:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000498:	bfdc      	itt	le
 800049a:	ea41 010c 	orrle.w	r1, r1, ip
 800049e:	4090      	lslle	r0, r2
 80004a0:	1ae4      	subs	r4, r4, r3
 80004a2:	bfa2      	ittt	ge
 80004a4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80004a8:	4329      	orrge	r1, r5
 80004aa:	bd30      	popge	{r4, r5, pc}
 80004ac:	ea6f 0404 	mvn.w	r4, r4
 80004b0:	3c1f      	subs	r4, #31
 80004b2:	da1c      	bge.n	80004ee <__adddf3+0x1d2>
 80004b4:	340c      	adds	r4, #12
 80004b6:	dc0e      	bgt.n	80004d6 <__adddf3+0x1ba>
 80004b8:	f104 0414 	add.w	r4, r4, #20
 80004bc:	f1c4 0220 	rsb	r2, r4, #32
 80004c0:	fa20 f004 	lsr.w	r0, r0, r4
 80004c4:	fa01 f302 	lsl.w	r3, r1, r2
 80004c8:	ea40 0003 	orr.w	r0, r0, r3
 80004cc:	fa21 f304 	lsr.w	r3, r1, r4
 80004d0:	ea45 0103 	orr.w	r1, r5, r3
 80004d4:	bd30      	pop	{r4, r5, pc}
 80004d6:	f1c4 040c 	rsb	r4, r4, #12
 80004da:	f1c4 0220 	rsb	r2, r4, #32
 80004de:	fa20 f002 	lsr.w	r0, r0, r2
 80004e2:	fa01 f304 	lsl.w	r3, r1, r4
 80004e6:	ea40 0003 	orr.w	r0, r0, r3
 80004ea:	4629      	mov	r1, r5
 80004ec:	bd30      	pop	{r4, r5, pc}
 80004ee:	fa21 f004 	lsr.w	r0, r1, r4
 80004f2:	4629      	mov	r1, r5
 80004f4:	bd30      	pop	{r4, r5, pc}
 80004f6:	f094 0f00 	teq	r4, #0
 80004fa:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80004fe:	bf06      	itte	eq
 8000500:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000504:	3401      	addeq	r4, #1
 8000506:	3d01      	subne	r5, #1
 8000508:	e74e      	b.n	80003a8 <__adddf3+0x8c>
 800050a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800050e:	bf18      	it	ne
 8000510:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000514:	d029      	beq.n	800056a <__adddf3+0x24e>
 8000516:	ea94 0f05 	teq	r4, r5
 800051a:	bf08      	it	eq
 800051c:	ea90 0f02 	teqeq	r0, r2
 8000520:	d005      	beq.n	800052e <__adddf3+0x212>
 8000522:	ea54 0c00 	orrs.w	ip, r4, r0
 8000526:	bf04      	itt	eq
 8000528:	4619      	moveq	r1, r3
 800052a:	4610      	moveq	r0, r2
 800052c:	bd30      	pop	{r4, r5, pc}
 800052e:	ea91 0f03 	teq	r1, r3
 8000532:	bf1e      	ittt	ne
 8000534:	2100      	movne	r1, #0
 8000536:	2000      	movne	r0, #0
 8000538:	bd30      	popne	{r4, r5, pc}
 800053a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800053e:	d105      	bne.n	800054c <__adddf3+0x230>
 8000540:	0040      	lsls	r0, r0, #1
 8000542:	4149      	adcs	r1, r1
 8000544:	bf28      	it	cs
 8000546:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800054a:	bd30      	pop	{r4, r5, pc}
 800054c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000550:	bf3c      	itt	cc
 8000552:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000556:	bd30      	popcc	{r4, r5, pc}
 8000558:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800055c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000560:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000564:	f04f 0000 	mov.w	r0, #0
 8000568:	bd30      	pop	{r4, r5, pc}
 800056a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800056e:	bf1a      	itte	ne
 8000570:	4619      	movne	r1, r3
 8000572:	4610      	movne	r0, r2
 8000574:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000578:	bf1c      	itt	ne
 800057a:	460b      	movne	r3, r1
 800057c:	4602      	movne	r2, r0
 800057e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000582:	bf06      	itte	eq
 8000584:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000588:	ea91 0f03 	teqeq	r1, r3
 800058c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000590:	bd30      	pop	{r4, r5, pc}
 8000592:	bf00      	nop

08000594 <__aeabi_ui2d>:
 8000594:	f090 0f00 	teq	r0, #0
 8000598:	bf04      	itt	eq
 800059a:	2100      	moveq	r1, #0
 800059c:	4770      	bxeq	lr
 800059e:	b530      	push	{r4, r5, lr}
 80005a0:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005a4:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005a8:	f04f 0500 	mov.w	r5, #0
 80005ac:	f04f 0100 	mov.w	r1, #0
 80005b0:	e750      	b.n	8000454 <__adddf3+0x138>
 80005b2:	bf00      	nop

080005b4 <__aeabi_i2d>:
 80005b4:	f090 0f00 	teq	r0, #0
 80005b8:	bf04      	itt	eq
 80005ba:	2100      	moveq	r1, #0
 80005bc:	4770      	bxeq	lr
 80005be:	b530      	push	{r4, r5, lr}
 80005c0:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005c4:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005c8:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 80005cc:	bf48      	it	mi
 80005ce:	4240      	negmi	r0, r0
 80005d0:	f04f 0100 	mov.w	r1, #0
 80005d4:	e73e      	b.n	8000454 <__adddf3+0x138>
 80005d6:	bf00      	nop

080005d8 <__aeabi_f2d>:
 80005d8:	0042      	lsls	r2, r0, #1
 80005da:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80005de:	ea4f 0131 	mov.w	r1, r1, rrx
 80005e2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005e6:	bf1f      	itttt	ne
 80005e8:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80005ec:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80005f0:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80005f4:	4770      	bxne	lr
 80005f6:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80005fa:	bf08      	it	eq
 80005fc:	4770      	bxeq	lr
 80005fe:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000602:	bf04      	itt	eq
 8000604:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000608:	4770      	bxeq	lr
 800060a:	b530      	push	{r4, r5, lr}
 800060c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000610:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000614:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000618:	e71c      	b.n	8000454 <__adddf3+0x138>
 800061a:	bf00      	nop

0800061c <__aeabi_ul2d>:
 800061c:	ea50 0201 	orrs.w	r2, r0, r1
 8000620:	bf08      	it	eq
 8000622:	4770      	bxeq	lr
 8000624:	b530      	push	{r4, r5, lr}
 8000626:	f04f 0500 	mov.w	r5, #0
 800062a:	e00a      	b.n	8000642 <__aeabi_l2d+0x16>

0800062c <__aeabi_l2d>:
 800062c:	ea50 0201 	orrs.w	r2, r0, r1
 8000630:	bf08      	it	eq
 8000632:	4770      	bxeq	lr
 8000634:	b530      	push	{r4, r5, lr}
 8000636:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800063a:	d502      	bpl.n	8000642 <__aeabi_l2d+0x16>
 800063c:	4240      	negs	r0, r0
 800063e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000642:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000646:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800064a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800064e:	f43f aed8 	beq.w	8000402 <__adddf3+0xe6>
 8000652:	f04f 0203 	mov.w	r2, #3
 8000656:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800065a:	bf18      	it	ne
 800065c:	3203      	addne	r2, #3
 800065e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000662:	bf18      	it	ne
 8000664:	3203      	addne	r2, #3
 8000666:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800066a:	f1c2 0320 	rsb	r3, r2, #32
 800066e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000672:	fa20 f002 	lsr.w	r0, r0, r2
 8000676:	fa01 fe03 	lsl.w	lr, r1, r3
 800067a:	ea40 000e 	orr.w	r0, r0, lr
 800067e:	fa21 f102 	lsr.w	r1, r1, r2
 8000682:	4414      	add	r4, r2
 8000684:	e6bd      	b.n	8000402 <__adddf3+0xe6>
 8000686:	bf00      	nop

08000688 <__aeabi_uldivmod>:
 8000688:	b953      	cbnz	r3, 80006a0 <__aeabi_uldivmod+0x18>
 800068a:	b94a      	cbnz	r2, 80006a0 <__aeabi_uldivmod+0x18>
 800068c:	2900      	cmp	r1, #0
 800068e:	bf08      	it	eq
 8000690:	2800      	cmpeq	r0, #0
 8000692:	bf1c      	itt	ne
 8000694:	f04f 31ff 	movne.w	r1, #4294967295
 8000698:	f04f 30ff 	movne.w	r0, #4294967295
 800069c:	f000 b9a2 	b.w	80009e4 <__aeabi_idiv0>
 80006a0:	f1ad 0c08 	sub.w	ip, sp, #8
 80006a4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80006a8:	f000 f83e 	bl	8000728 <__udivmoddi4>
 80006ac:	f8dd e004 	ldr.w	lr, [sp, #4]
 80006b0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80006b4:	b004      	add	sp, #16
 80006b6:	4770      	bx	lr

080006b8 <__aeabi_d2lz>:
 80006b8:	b508      	push	{r3, lr}
 80006ba:	4602      	mov	r2, r0
 80006bc:	460b      	mov	r3, r1
 80006be:	ec43 2b17 	vmov	d7, r2, r3
 80006c2:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 80006c6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80006ca:	d403      	bmi.n	80006d4 <__aeabi_d2lz+0x1c>
 80006cc:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 80006d0:	f000 b80a 	b.w	80006e8 <__aeabi_d2ulz>
 80006d4:	eeb1 7b47 	vneg.f64	d7, d7
 80006d8:	ec51 0b17 	vmov	r0, r1, d7
 80006dc:	f000 f804 	bl	80006e8 <__aeabi_d2ulz>
 80006e0:	4240      	negs	r0, r0
 80006e2:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80006e6:	bd08      	pop	{r3, pc}

080006e8 <__aeabi_d2ulz>:
 80006e8:	ed9f 6b0b 	vldr	d6, [pc, #44]	@ 8000718 <__aeabi_d2ulz+0x30>
 80006ec:	ec41 0b17 	vmov	d7, r0, r1
 80006f0:	ed9f 5b0b 	vldr	d5, [pc, #44]	@ 8000720 <__aeabi_d2ulz+0x38>
 80006f4:	ee27 6b06 	vmul.f64	d6, d7, d6
 80006f8:	eebc 6bc6 	vcvt.u32.f64	s12, d6
 80006fc:	eeb8 4b46 	vcvt.f64.u32	d4, s12
 8000700:	eea4 7b45 	vfms.f64	d7, d4, d5
 8000704:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8000708:	ee16 1a10 	vmov	r1, s12
 800070c:	ee17 0a90 	vmov	r0, s15
 8000710:	4770      	bx	lr
 8000712:	bf00      	nop
 8000714:	f3af 8000 	nop.w
 8000718:	00000000 	.word	0x00000000
 800071c:	3df00000 	.word	0x3df00000
 8000720:	00000000 	.word	0x00000000
 8000724:	41f00000 	.word	0x41f00000

08000728 <__udivmoddi4>:
 8000728:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800072c:	9d08      	ldr	r5, [sp, #32]
 800072e:	460c      	mov	r4, r1
 8000730:	2b00      	cmp	r3, #0
 8000732:	d14e      	bne.n	80007d2 <__udivmoddi4+0xaa>
 8000734:	4694      	mov	ip, r2
 8000736:	458c      	cmp	ip, r1
 8000738:	4686      	mov	lr, r0
 800073a:	fab2 f282 	clz	r2, r2
 800073e:	d962      	bls.n	8000806 <__udivmoddi4+0xde>
 8000740:	b14a      	cbz	r2, 8000756 <__udivmoddi4+0x2e>
 8000742:	f1c2 0320 	rsb	r3, r2, #32
 8000746:	4091      	lsls	r1, r2
 8000748:	fa20 f303 	lsr.w	r3, r0, r3
 800074c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000750:	4319      	orrs	r1, r3
 8000752:	fa00 fe02 	lsl.w	lr, r0, r2
 8000756:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800075a:	fa1f f68c 	uxth.w	r6, ip
 800075e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000762:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000766:	fb07 1114 	mls	r1, r7, r4, r1
 800076a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800076e:	fb04 f106 	mul.w	r1, r4, r6
 8000772:	4299      	cmp	r1, r3
 8000774:	d90a      	bls.n	800078c <__udivmoddi4+0x64>
 8000776:	eb1c 0303 	adds.w	r3, ip, r3
 800077a:	f104 30ff 	add.w	r0, r4, #4294967295
 800077e:	f080 8112 	bcs.w	80009a6 <__udivmoddi4+0x27e>
 8000782:	4299      	cmp	r1, r3
 8000784:	f240 810f 	bls.w	80009a6 <__udivmoddi4+0x27e>
 8000788:	3c02      	subs	r4, #2
 800078a:	4463      	add	r3, ip
 800078c:	1a59      	subs	r1, r3, r1
 800078e:	fa1f f38e 	uxth.w	r3, lr
 8000792:	fbb1 f0f7 	udiv	r0, r1, r7
 8000796:	fb07 1110 	mls	r1, r7, r0, r1
 800079a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800079e:	fb00 f606 	mul.w	r6, r0, r6
 80007a2:	429e      	cmp	r6, r3
 80007a4:	d90a      	bls.n	80007bc <__udivmoddi4+0x94>
 80007a6:	eb1c 0303 	adds.w	r3, ip, r3
 80007aa:	f100 31ff 	add.w	r1, r0, #4294967295
 80007ae:	f080 80fc 	bcs.w	80009aa <__udivmoddi4+0x282>
 80007b2:	429e      	cmp	r6, r3
 80007b4:	f240 80f9 	bls.w	80009aa <__udivmoddi4+0x282>
 80007b8:	4463      	add	r3, ip
 80007ba:	3802      	subs	r0, #2
 80007bc:	1b9b      	subs	r3, r3, r6
 80007be:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80007c2:	2100      	movs	r1, #0
 80007c4:	b11d      	cbz	r5, 80007ce <__udivmoddi4+0xa6>
 80007c6:	40d3      	lsrs	r3, r2
 80007c8:	2200      	movs	r2, #0
 80007ca:	e9c5 3200 	strd	r3, r2, [r5]
 80007ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80007d2:	428b      	cmp	r3, r1
 80007d4:	d905      	bls.n	80007e2 <__udivmoddi4+0xba>
 80007d6:	b10d      	cbz	r5, 80007dc <__udivmoddi4+0xb4>
 80007d8:	e9c5 0100 	strd	r0, r1, [r5]
 80007dc:	2100      	movs	r1, #0
 80007de:	4608      	mov	r0, r1
 80007e0:	e7f5      	b.n	80007ce <__udivmoddi4+0xa6>
 80007e2:	fab3 f183 	clz	r1, r3
 80007e6:	2900      	cmp	r1, #0
 80007e8:	d146      	bne.n	8000878 <__udivmoddi4+0x150>
 80007ea:	42a3      	cmp	r3, r4
 80007ec:	d302      	bcc.n	80007f4 <__udivmoddi4+0xcc>
 80007ee:	4290      	cmp	r0, r2
 80007f0:	f0c0 80f0 	bcc.w	80009d4 <__udivmoddi4+0x2ac>
 80007f4:	1a86      	subs	r6, r0, r2
 80007f6:	eb64 0303 	sbc.w	r3, r4, r3
 80007fa:	2001      	movs	r0, #1
 80007fc:	2d00      	cmp	r5, #0
 80007fe:	d0e6      	beq.n	80007ce <__udivmoddi4+0xa6>
 8000800:	e9c5 6300 	strd	r6, r3, [r5]
 8000804:	e7e3      	b.n	80007ce <__udivmoddi4+0xa6>
 8000806:	2a00      	cmp	r2, #0
 8000808:	f040 8090 	bne.w	800092c <__udivmoddi4+0x204>
 800080c:	eba1 040c 	sub.w	r4, r1, ip
 8000810:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000814:	fa1f f78c 	uxth.w	r7, ip
 8000818:	2101      	movs	r1, #1
 800081a:	fbb4 f6f8 	udiv	r6, r4, r8
 800081e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000822:	fb08 4416 	mls	r4, r8, r6, r4
 8000826:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800082a:	fb07 f006 	mul.w	r0, r7, r6
 800082e:	4298      	cmp	r0, r3
 8000830:	d908      	bls.n	8000844 <__udivmoddi4+0x11c>
 8000832:	eb1c 0303 	adds.w	r3, ip, r3
 8000836:	f106 34ff 	add.w	r4, r6, #4294967295
 800083a:	d202      	bcs.n	8000842 <__udivmoddi4+0x11a>
 800083c:	4298      	cmp	r0, r3
 800083e:	f200 80cd 	bhi.w	80009dc <__udivmoddi4+0x2b4>
 8000842:	4626      	mov	r6, r4
 8000844:	1a1c      	subs	r4, r3, r0
 8000846:	fa1f f38e 	uxth.w	r3, lr
 800084a:	fbb4 f0f8 	udiv	r0, r4, r8
 800084e:	fb08 4410 	mls	r4, r8, r0, r4
 8000852:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000856:	fb00 f707 	mul.w	r7, r0, r7
 800085a:	429f      	cmp	r7, r3
 800085c:	d908      	bls.n	8000870 <__udivmoddi4+0x148>
 800085e:	eb1c 0303 	adds.w	r3, ip, r3
 8000862:	f100 34ff 	add.w	r4, r0, #4294967295
 8000866:	d202      	bcs.n	800086e <__udivmoddi4+0x146>
 8000868:	429f      	cmp	r7, r3
 800086a:	f200 80b0 	bhi.w	80009ce <__udivmoddi4+0x2a6>
 800086e:	4620      	mov	r0, r4
 8000870:	1bdb      	subs	r3, r3, r7
 8000872:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000876:	e7a5      	b.n	80007c4 <__udivmoddi4+0x9c>
 8000878:	f1c1 0620 	rsb	r6, r1, #32
 800087c:	408b      	lsls	r3, r1
 800087e:	fa22 f706 	lsr.w	r7, r2, r6
 8000882:	431f      	orrs	r7, r3
 8000884:	fa20 fc06 	lsr.w	ip, r0, r6
 8000888:	fa04 f301 	lsl.w	r3, r4, r1
 800088c:	ea43 030c 	orr.w	r3, r3, ip
 8000890:	40f4      	lsrs	r4, r6
 8000892:	fa00 f801 	lsl.w	r8, r0, r1
 8000896:	0c38      	lsrs	r0, r7, #16
 8000898:	ea4f 4913 	mov.w	r9, r3, lsr #16
 800089c:	fbb4 fef0 	udiv	lr, r4, r0
 80008a0:	fa1f fc87 	uxth.w	ip, r7
 80008a4:	fb00 441e 	mls	r4, r0, lr, r4
 80008a8:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80008ac:	fb0e f90c 	mul.w	r9, lr, ip
 80008b0:	45a1      	cmp	r9, r4
 80008b2:	fa02 f201 	lsl.w	r2, r2, r1
 80008b6:	d90a      	bls.n	80008ce <__udivmoddi4+0x1a6>
 80008b8:	193c      	adds	r4, r7, r4
 80008ba:	f10e 3aff 	add.w	sl, lr, #4294967295
 80008be:	f080 8084 	bcs.w	80009ca <__udivmoddi4+0x2a2>
 80008c2:	45a1      	cmp	r9, r4
 80008c4:	f240 8081 	bls.w	80009ca <__udivmoddi4+0x2a2>
 80008c8:	f1ae 0e02 	sub.w	lr, lr, #2
 80008cc:	443c      	add	r4, r7
 80008ce:	eba4 0409 	sub.w	r4, r4, r9
 80008d2:	fa1f f983 	uxth.w	r9, r3
 80008d6:	fbb4 f3f0 	udiv	r3, r4, r0
 80008da:	fb00 4413 	mls	r4, r0, r3, r4
 80008de:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80008e2:	fb03 fc0c 	mul.w	ip, r3, ip
 80008e6:	45a4      	cmp	ip, r4
 80008e8:	d907      	bls.n	80008fa <__udivmoddi4+0x1d2>
 80008ea:	193c      	adds	r4, r7, r4
 80008ec:	f103 30ff 	add.w	r0, r3, #4294967295
 80008f0:	d267      	bcs.n	80009c2 <__udivmoddi4+0x29a>
 80008f2:	45a4      	cmp	ip, r4
 80008f4:	d965      	bls.n	80009c2 <__udivmoddi4+0x29a>
 80008f6:	3b02      	subs	r3, #2
 80008f8:	443c      	add	r4, r7
 80008fa:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80008fe:	fba0 9302 	umull	r9, r3, r0, r2
 8000902:	eba4 040c 	sub.w	r4, r4, ip
 8000906:	429c      	cmp	r4, r3
 8000908:	46ce      	mov	lr, r9
 800090a:	469c      	mov	ip, r3
 800090c:	d351      	bcc.n	80009b2 <__udivmoddi4+0x28a>
 800090e:	d04e      	beq.n	80009ae <__udivmoddi4+0x286>
 8000910:	b155      	cbz	r5, 8000928 <__udivmoddi4+0x200>
 8000912:	ebb8 030e 	subs.w	r3, r8, lr
 8000916:	eb64 040c 	sbc.w	r4, r4, ip
 800091a:	fa04 f606 	lsl.w	r6, r4, r6
 800091e:	40cb      	lsrs	r3, r1
 8000920:	431e      	orrs	r6, r3
 8000922:	40cc      	lsrs	r4, r1
 8000924:	e9c5 6400 	strd	r6, r4, [r5]
 8000928:	2100      	movs	r1, #0
 800092a:	e750      	b.n	80007ce <__udivmoddi4+0xa6>
 800092c:	f1c2 0320 	rsb	r3, r2, #32
 8000930:	fa20 f103 	lsr.w	r1, r0, r3
 8000934:	fa0c fc02 	lsl.w	ip, ip, r2
 8000938:	fa24 f303 	lsr.w	r3, r4, r3
 800093c:	4094      	lsls	r4, r2
 800093e:	430c      	orrs	r4, r1
 8000940:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000944:	fa00 fe02 	lsl.w	lr, r0, r2
 8000948:	fa1f f78c 	uxth.w	r7, ip
 800094c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000950:	fb08 3110 	mls	r1, r8, r0, r3
 8000954:	0c23      	lsrs	r3, r4, #16
 8000956:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800095a:	fb00 f107 	mul.w	r1, r0, r7
 800095e:	4299      	cmp	r1, r3
 8000960:	d908      	bls.n	8000974 <__udivmoddi4+0x24c>
 8000962:	eb1c 0303 	adds.w	r3, ip, r3
 8000966:	f100 36ff 	add.w	r6, r0, #4294967295
 800096a:	d22c      	bcs.n	80009c6 <__udivmoddi4+0x29e>
 800096c:	4299      	cmp	r1, r3
 800096e:	d92a      	bls.n	80009c6 <__udivmoddi4+0x29e>
 8000970:	3802      	subs	r0, #2
 8000972:	4463      	add	r3, ip
 8000974:	1a5b      	subs	r3, r3, r1
 8000976:	b2a4      	uxth	r4, r4
 8000978:	fbb3 f1f8 	udiv	r1, r3, r8
 800097c:	fb08 3311 	mls	r3, r8, r1, r3
 8000980:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000984:	fb01 f307 	mul.w	r3, r1, r7
 8000988:	42a3      	cmp	r3, r4
 800098a:	d908      	bls.n	800099e <__udivmoddi4+0x276>
 800098c:	eb1c 0404 	adds.w	r4, ip, r4
 8000990:	f101 36ff 	add.w	r6, r1, #4294967295
 8000994:	d213      	bcs.n	80009be <__udivmoddi4+0x296>
 8000996:	42a3      	cmp	r3, r4
 8000998:	d911      	bls.n	80009be <__udivmoddi4+0x296>
 800099a:	3902      	subs	r1, #2
 800099c:	4464      	add	r4, ip
 800099e:	1ae4      	subs	r4, r4, r3
 80009a0:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80009a4:	e739      	b.n	800081a <__udivmoddi4+0xf2>
 80009a6:	4604      	mov	r4, r0
 80009a8:	e6f0      	b.n	800078c <__udivmoddi4+0x64>
 80009aa:	4608      	mov	r0, r1
 80009ac:	e706      	b.n	80007bc <__udivmoddi4+0x94>
 80009ae:	45c8      	cmp	r8, r9
 80009b0:	d2ae      	bcs.n	8000910 <__udivmoddi4+0x1e8>
 80009b2:	ebb9 0e02 	subs.w	lr, r9, r2
 80009b6:	eb63 0c07 	sbc.w	ip, r3, r7
 80009ba:	3801      	subs	r0, #1
 80009bc:	e7a8      	b.n	8000910 <__udivmoddi4+0x1e8>
 80009be:	4631      	mov	r1, r6
 80009c0:	e7ed      	b.n	800099e <__udivmoddi4+0x276>
 80009c2:	4603      	mov	r3, r0
 80009c4:	e799      	b.n	80008fa <__udivmoddi4+0x1d2>
 80009c6:	4630      	mov	r0, r6
 80009c8:	e7d4      	b.n	8000974 <__udivmoddi4+0x24c>
 80009ca:	46d6      	mov	lr, sl
 80009cc:	e77f      	b.n	80008ce <__udivmoddi4+0x1a6>
 80009ce:	4463      	add	r3, ip
 80009d0:	3802      	subs	r0, #2
 80009d2:	e74d      	b.n	8000870 <__udivmoddi4+0x148>
 80009d4:	4606      	mov	r6, r0
 80009d6:	4623      	mov	r3, r4
 80009d8:	4608      	mov	r0, r1
 80009da:	e70f      	b.n	80007fc <__udivmoddi4+0xd4>
 80009dc:	3e02      	subs	r6, #2
 80009de:	4463      	add	r3, ip
 80009e0:	e730      	b.n	8000844 <__udivmoddi4+0x11c>
 80009e2:	bf00      	nop

080009e4 <__aeabi_idiv0>:
 80009e4:	4770      	bx	lr
 80009e6:	bf00      	nop

080009e8 <MS5611_chipSelect>:
 */

#include "MS5611.h"

//Chip select
void MS5611_chipSelect(MS5611* BAR) {
 80009e8:	b580      	push	{r7, lr}
 80009ea:	b082      	sub	sp, #8
 80009ec:	af00      	add	r7, sp, #0
 80009ee:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(BAR->CS_GPIO_Port, BAR->CS_GPIO_Pin, RESET); //CS pin
 80009f0:	687b      	ldr	r3, [r7, #4]
 80009f2:	6898      	ldr	r0, [r3, #8]
 80009f4:	687b      	ldr	r3, [r7, #4]
 80009f6:	899b      	ldrh	r3, [r3, #12]
 80009f8:	2200      	movs	r2, #0
 80009fa:	4619      	mov	r1, r3
 80009fc:	f002 fe94 	bl	8003728 <HAL_GPIO_WritePin>
}
 8000a00:	bf00      	nop
 8000a02:	3708      	adds	r7, #8
 8000a04:	46bd      	mov	sp, r7
 8000a06:	bd80      	pop	{r7, pc}

08000a08 <MS5611_chipRelease>:

//Chip release
void MS5611_chipRelease(MS5611* BAR) {
 8000a08:	b580      	push	{r7, lr}
 8000a0a:	b082      	sub	sp, #8
 8000a0c:	af00      	add	r7, sp, #0
 8000a0e:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(BAR->CS_GPIO_Port, BAR->CS_GPIO_Pin, SET); //CS pin
 8000a10:	687b      	ldr	r3, [r7, #4]
 8000a12:	6898      	ldr	r0, [r3, #8]
 8000a14:	687b      	ldr	r3, [r7, #4]
 8000a16:	899b      	ldrh	r3, [r3, #12]
 8000a18:	2201      	movs	r2, #1
 8000a1a:	4619      	mov	r1, r3
 8000a1c:	f002 fe84 	bl	8003728 <HAL_GPIO_WritePin>
}
 8000a20:	bf00      	nop
 8000a22:	3708      	adds	r7, #8
 8000a24:	46bd      	mov	sp, r7
 8000a26:	bd80      	pop	{r7, pc}

08000a28 <MS5611_read>:

//Read register from barometer
HAL_StatusTypeDef MS5611_read(MS5611* BAR, uint8_t* rx_buffer, uint8_t num_bytes) {
 8000a28:	b580      	push	{r7, lr}
 8000a2a:	b086      	sub	sp, #24
 8000a2c:	af00      	add	r7, sp, #0
 8000a2e:	60f8      	str	r0, [r7, #12]
 8000a30:	60b9      	str	r1, [r7, #8]
 8000a32:	4613      	mov	r3, r2
 8000a34:	71fb      	strb	r3, [r7, #7]
	HAL_StatusTypeDef status;

	taskENTER_CRITICAL();
 8000a36:	f00a fc9f 	bl	800b378 <vPortEnterCritical>
	
	MS5611_chipSelect(BAR);
 8000a3a:	68f8      	ldr	r0, [r7, #12]
 8000a3c:	f7ff ffd4 	bl	80009e8 <MS5611_chipSelect>
	status = HAL_SPI_Receive(BAR->hspi, (uint8_t *)rx_buffer, num_bytes, BAR->SPI_TIMEOUT);
 8000a40:	68fb      	ldr	r3, [r7, #12]
 8000a42:	6818      	ldr	r0, [r3, #0]
 8000a44:	79fb      	ldrb	r3, [r7, #7]
 8000a46:	b29a      	uxth	r2, r3
 8000a48:	68fb      	ldr	r3, [r7, #12]
 8000a4a:	889b      	ldrh	r3, [r3, #4]
 8000a4c:	68b9      	ldr	r1, [r7, #8]
 8000a4e:	f006 f9a7 	bl	8006da0 <HAL_SPI_Receive>
 8000a52:	4603      	mov	r3, r0
 8000a54:	75fb      	strb	r3, [r7, #23]
	MS5611_chipRelease(BAR);
 8000a56:	68f8      	ldr	r0, [r7, #12]
 8000a58:	f7ff ffd6 	bl	8000a08 <MS5611_chipRelease>
	
	taskEXIT_CRITICAL();
 8000a5c:	f00a fcbe 	bl	800b3dc <vPortExitCritical>

	return status;
 8000a60:	7dfb      	ldrb	r3, [r7, #23]
}
 8000a62:	4618      	mov	r0, r3
 8000a64:	3718      	adds	r7, #24
 8000a66:	46bd      	mov	sp, r7
 8000a68:	bd80      	pop	{r7, pc}

08000a6a <MS5611_write>:

//Write register from barometer
HAL_StatusTypeDef MS5611_write(MS5611* BAR, uint8_t* tx_buffer, uint8_t num_bytes) {
 8000a6a:	b580      	push	{r7, lr}
 8000a6c:	b086      	sub	sp, #24
 8000a6e:	af00      	add	r7, sp, #0
 8000a70:	60f8      	str	r0, [r7, #12]
 8000a72:	60b9      	str	r1, [r7, #8]
 8000a74:	4613      	mov	r3, r2
 8000a76:	71fb      	strb	r3, [r7, #7]
	HAL_StatusTypeDef status;

	taskENTER_CRITICAL();
 8000a78:	f00a fc7e 	bl	800b378 <vPortEnterCritical>

	MS5611_chipSelect(BAR);
 8000a7c:	68f8      	ldr	r0, [r7, #12]
 8000a7e:	f7ff ffb3 	bl	80009e8 <MS5611_chipSelect>
	status = HAL_SPI_Transmit(BAR->hspi, (uint8_t *)tx_buffer, 1, BAR->SPI_TIMEOUT);
 8000a82:	68fb      	ldr	r3, [r7, #12]
 8000a84:	6818      	ldr	r0, [r3, #0]
 8000a86:	68fb      	ldr	r3, [r7, #12]
 8000a88:	889b      	ldrh	r3, [r3, #4]
 8000a8a:	2201      	movs	r2, #1
 8000a8c:	68b9      	ldr	r1, [r7, #8]
 8000a8e:	f005 ff99 	bl	80069c4 <HAL_SPI_Transmit>
 8000a92:	4603      	mov	r3, r0
 8000a94:	75fb      	strb	r3, [r7, #23]
	MS5611_chipRelease(BAR);
 8000a96:	68f8      	ldr	r0, [r7, #12]
 8000a98:	f7ff ffb6 	bl	8000a08 <MS5611_chipRelease>

	taskEXIT_CRITICAL();
 8000a9c:	f00a fc9e 	bl	800b3dc <vPortExitCritical>

	return status;
 8000aa0:	7dfb      	ldrb	r3, [r7, #23]
}
 8000aa2:	4618      	mov	r0, r3
 8000aa4:	3718      	adds	r7, #24
 8000aa6:	46bd      	mov	sp, r7
 8000aa8:	bd80      	pop	{r7, pc}

08000aaa <MS5611_send>:

int MS5611_send(MS5611* BAR, uint8_t reg) {
 8000aaa:	b580      	push	{r7, lr}
 8000aac:	b082      	sub	sp, #8
 8000aae:	af00      	add	r7, sp, #0
 8000ab0:	6078      	str	r0, [r7, #4]
 8000ab2:	460b      	mov	r3, r1
 8000ab4:	70fb      	strb	r3, [r7, #3]
	if (MS5611_write(BAR, &reg, 1) != HAL_OK) {
 8000ab6:	1cfb      	adds	r3, r7, #3
 8000ab8:	2201      	movs	r2, #1
 8000aba:	4619      	mov	r1, r3
 8000abc:	6878      	ldr	r0, [r7, #4]
 8000abe:	f7ff ffd4 	bl	8000a6a <MS5611_write>
 8000ac2:	4603      	mov	r3, r0
 8000ac4:	2b00      	cmp	r3, #0
 8000ac6:	d001      	beq.n	8000acc <MS5611_send+0x22>
		return 1;
 8000ac8:	2301      	movs	r3, #1
 8000aca:	e000      	b.n	8000ace <MS5611_send+0x24>
	} else {
		return 0;
 8000acc:	2300      	movs	r3, #0
	}
}
 8000ace:	4618      	mov	r0, r3
 8000ad0:	3708      	adds	r7, #8
 8000ad2:	46bd      	mov	sp, r7
 8000ad4:	bd80      	pop	{r7, pc}

08000ad6 <MS5611_recieve>:

int MS5611_recieve(MS5611* BAR, uint8_t rx_num_bytes, uint8_t* rx_buffer) {
 8000ad6:	b580      	push	{r7, lr}
 8000ad8:	b084      	sub	sp, #16
 8000ada:	af00      	add	r7, sp, #0
 8000adc:	60f8      	str	r0, [r7, #12]
 8000ade:	460b      	mov	r3, r1
 8000ae0:	607a      	str	r2, [r7, #4]
 8000ae2:	72fb      	strb	r3, [r7, #11]
	if (MS5611_read(BAR, rx_buffer, rx_num_bytes) != HAL_OK) {
 8000ae4:	7afb      	ldrb	r3, [r7, #11]
 8000ae6:	461a      	mov	r2, r3
 8000ae8:	6879      	ldr	r1, [r7, #4]
 8000aea:	68f8      	ldr	r0, [r7, #12]
 8000aec:	f7ff ff9c 	bl	8000a28 <MS5611_read>
 8000af0:	4603      	mov	r3, r0
 8000af2:	2b00      	cmp	r3, #0
 8000af4:	d001      	beq.n	8000afa <MS5611_recieve+0x24>
		return 1;
 8000af6:	2301      	movs	r3, #1
 8000af8:	e000      	b.n	8000afc <MS5611_recieve+0x26>
	}
	return 0;
 8000afa:	2300      	movs	r3, #0
}
 8000afc:	4618      	mov	r0, r3
 8000afe:	3710      	adds	r7, #16
 8000b00:	46bd      	mov	sp, r7
 8000b02:	bd80      	pop	{r7, pc}

08000b04 <MS5611_Reset>:

// Software and memory reset
int MS5611_Reset(MS5611* BAR) {
 8000b04:	b580      	push	{r7, lr}
 8000b06:	b082      	sub	sp, #8
 8000b08:	af00      	add	r7, sp, #0
 8000b0a:	6078      	str	r0, [r7, #4]
	if (!MS5611_send(BAR, MS5611_RESET)) {
 8000b0c:	211e      	movs	r1, #30
 8000b0e:	6878      	ldr	r0, [r7, #4]
 8000b10:	f7ff ffcb 	bl	8000aaa <MS5611_send>
 8000b14:	4603      	mov	r3, r0
 8000b16:	2b00      	cmp	r3, #0
 8000b18:	d104      	bne.n	8000b24 <MS5611_Reset+0x20>
		vTaskDelay(5); // Time for reset
 8000b1a:	2005      	movs	r0, #5
 8000b1c:	f009 fa22 	bl	8009f64 <vTaskDelay>
    	return 0;
 8000b20:	2300      	movs	r3, #0
 8000b22:	e000      	b.n	8000b26 <MS5611_Reset+0x22>
	}
	return 1;
 8000b24:	2301      	movs	r3, #1
}
 8000b26:	4618      	mov	r0, r3
 8000b28:	3708      	adds	r7, #8
 8000b2a:	46bd      	mov	sp, r7
 8000b2c:	bd80      	pop	{r7, pc}

08000b2e <MS5611_readPROM>:

// Read the programmable read only memory
// Note: prom_buffer must be of size 6
int MS5611_readPROM(MS5611* BAR, MS5611_PROM_t* prom_buffer) {
 8000b2e:	b580      	push	{r7, lr}
 8000b30:	b084      	sub	sp, #16
 8000b32:	af00      	add	r7, sp, #0
 8000b34:	6078      	str	r0, [r7, #4]
 8000b36:	6039      	str	r1, [r7, #0]
	for (int i = 0; i < 6; i++) {
 8000b38:	2300      	movs	r3, #0
 8000b3a:	60fb      	str	r3, [r7, #12]
 8000b3c:	e029      	b.n	8000b92 <MS5611_readPROM+0x64>
		if (MS5611_send(BAR, MS5611_PROM + i)) {
 8000b3e:	68fb      	ldr	r3, [r7, #12]
 8000b40:	b2db      	uxtb	r3, r3
 8000b42:	3b60      	subs	r3, #96	@ 0x60
 8000b44:	b2db      	uxtb	r3, r3
 8000b46:	4619      	mov	r1, r3
 8000b48:	6878      	ldr	r0, [r7, #4]
 8000b4a:	f7ff ffae 	bl	8000aaa <MS5611_send>
 8000b4e:	4603      	mov	r3, r0
 8000b50:	2b00      	cmp	r3, #0
 8000b52:	d001      	beq.n	8000b58 <MS5611_readPROM+0x2a>
			return 1;
 8000b54:	2301      	movs	r3, #1
 8000b56:	e020      	b.n	8000b9a <MS5611_readPROM+0x6c>
		}
		uint8_t rx_buffer[2] = {0};
 8000b58:	2300      	movs	r3, #0
 8000b5a:	813b      	strh	r3, [r7, #8]
		if (MS5611_recieve(BAR, 2, rx_buffer)) {
 8000b5c:	f107 0308 	add.w	r3, r7, #8
 8000b60:	461a      	mov	r2, r3
 8000b62:	2102      	movs	r1, #2
 8000b64:	6878      	ldr	r0, [r7, #4]
 8000b66:	f7ff ffb6 	bl	8000ad6 <MS5611_recieve>
 8000b6a:	4603      	mov	r3, r0
 8000b6c:	2b00      	cmp	r3, #0
 8000b6e:	d001      	beq.n	8000b74 <MS5611_readPROM+0x46>
			return 1;
 8000b70:	2301      	movs	r3, #1
 8000b72:	e012      	b.n	8000b9a <MS5611_readPROM+0x6c>
		} else {
			prom_buffer->bytes[i] = (rx_buffer[0] << 8) | rx_buffer[1];
 8000b74:	7a3b      	ldrb	r3, [r7, #8]
 8000b76:	021b      	lsls	r3, r3, #8
 8000b78:	b21a      	sxth	r2, r3
 8000b7a:	7a7b      	ldrb	r3, [r7, #9]
 8000b7c:	b21b      	sxth	r3, r3
 8000b7e:	4313      	orrs	r3, r2
 8000b80:	b21b      	sxth	r3, r3
 8000b82:	b299      	uxth	r1, r3
 8000b84:	683b      	ldr	r3, [r7, #0]
 8000b86:	68fa      	ldr	r2, [r7, #12]
 8000b88:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
	for (int i = 0; i < 6; i++) {
 8000b8c:	68fb      	ldr	r3, [r7, #12]
 8000b8e:	3301      	adds	r3, #1
 8000b90:	60fb      	str	r3, [r7, #12]
 8000b92:	68fb      	ldr	r3, [r7, #12]
 8000b94:	2b05      	cmp	r3, #5
 8000b96:	ddd2      	ble.n	8000b3e <MS5611_readPROM+0x10>
		}
	}
	return 0;
 8000b98:	2300      	movs	r3, #0
}
 8000b9a:	4618      	mov	r0, r3
 8000b9c:	3710      	adds	r7, #16
 8000b9e:	46bd      	mov	sp, r7
 8000ba0:	bd80      	pop	{r7, pc}
	...

08000ba4 <MS5611_presConvert>:

// Pressure convert
// OSR is the "Over Sampling Rate" which determines the resolution of the pressure and temperature
int MS5611_presConvert(MS5611* BAR, uint32_t* pres_raw, OSR osr) {
 8000ba4:	b480      	push	{r7}
 8000ba6:	b087      	sub	sp, #28
 8000ba8:	af00      	add	r7, sp, #0
 8000baa:	60f8      	str	r0, [r7, #12]
 8000bac:	60b9      	str	r1, [r7, #8]
 8000bae:	4613      	mov	r3, r2
 8000bb0:	71fb      	strb	r3, [r7, #7]
	uint8_t cmd = 0x00;
 8000bb2:	2300      	movs	r3, #0
 8000bb4:	75fb      	strb	r3, [r7, #23]
	switch (osr) {
 8000bb6:	79fb      	ldrb	r3, [r7, #7]
 8000bb8:	2b04      	cmp	r3, #4
 8000bba:	d817      	bhi.n	8000bec <MS5611_presConvert+0x48>
 8000bbc:	a201      	add	r2, pc, #4	@ (adr r2, 8000bc4 <MS5611_presConvert+0x20>)
 8000bbe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000bc2:	bf00      	nop
 8000bc4:	08000bd9 	.word	0x08000bd9
 8000bc8:	08000bdd 	.word	0x08000bdd
 8000bcc:	08000be1 	.word	0x08000be1
 8000bd0:	08000be5 	.word	0x08000be5
 8000bd4:	08000be9 	.word	0x08000be9
		case OSR_256:
			cmd = MS5611_D1_OSR_256;
 8000bd8:	2340      	movs	r3, #64	@ 0x40
 8000bda:	75fb      	strb	r3, [r7, #23]
		case OSR_512:
			cmd = MS5611_D1_OSR_512;
 8000bdc:	2342      	movs	r3, #66	@ 0x42
 8000bde:	75fb      	strb	r3, [r7, #23]
		case OSR_1024:
			cmd = MS5611_D1_OSR_1024;
 8000be0:	2344      	movs	r3, #68	@ 0x44
 8000be2:	75fb      	strb	r3, [r7, #23]
		case OSR_2048:
			cmd = MS5611_D1_OSR_2048;
 8000be4:	2346      	movs	r3, #70	@ 0x46
 8000be6:	75fb      	strb	r3, [r7, #23]
		case OSR_4096:
			cmd = MS5611_D1_OSR_4096;
 8000be8:	2348      	movs	r3, #72	@ 0x48
 8000bea:	75fb      	strb	r3, [r7, #23]
		default:
			return 1; // invalid OSR
 8000bec:	2301      	movs	r3, #1
	if (MS5611_recieve(BAR, 3, rx_buffer)) {
		return 1;
	}
	*pres_raw = (rx_buffer[0] << 16) | (rx_buffer[1] << 8) | (rx_buffer[2]);
	return 0;
}
 8000bee:	4618      	mov	r0, r3
 8000bf0:	371c      	adds	r7, #28
 8000bf2:	46bd      	mov	sp, r7
 8000bf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bf8:	4770      	bx	lr
 8000bfa:	bf00      	nop

08000bfc <MS5611_tempConvert>:

//Altitude convert
int MS5611_tempConvert(MS5611* BAR, uint32_t* temp_raw, OSR osr) {
 8000bfc:	b480      	push	{r7}
 8000bfe:	b087      	sub	sp, #28
 8000c00:	af00      	add	r7, sp, #0
 8000c02:	60f8      	str	r0, [r7, #12]
 8000c04:	60b9      	str	r1, [r7, #8]
 8000c06:	4613      	mov	r3, r2
 8000c08:	71fb      	strb	r3, [r7, #7]
	uint8_t cmd = 0x00;
 8000c0a:	2300      	movs	r3, #0
 8000c0c:	75fb      	strb	r3, [r7, #23]
	switch (osr) {
 8000c0e:	79fb      	ldrb	r3, [r7, #7]
 8000c10:	2b04      	cmp	r3, #4
 8000c12:	d817      	bhi.n	8000c44 <MS5611_tempConvert+0x48>
 8000c14:	a201      	add	r2, pc, #4	@ (adr r2, 8000c1c <MS5611_tempConvert+0x20>)
 8000c16:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000c1a:	bf00      	nop
 8000c1c:	08000c31 	.word	0x08000c31
 8000c20:	08000c35 	.word	0x08000c35
 8000c24:	08000c39 	.word	0x08000c39
 8000c28:	08000c3d 	.word	0x08000c3d
 8000c2c:	08000c41 	.word	0x08000c41
		case OSR_256:
			cmd = MS5611_D2_OSR_256;
 8000c30:	2350      	movs	r3, #80	@ 0x50
 8000c32:	75fb      	strb	r3, [r7, #23]
		case OSR_512:
			cmd = MS5611_D2_OSR_512;
 8000c34:	2352      	movs	r3, #82	@ 0x52
 8000c36:	75fb      	strb	r3, [r7, #23]
		case OSR_1024:
			cmd = MS5611_D2_OSR_1024;
 8000c38:	2354      	movs	r3, #84	@ 0x54
 8000c3a:	75fb      	strb	r3, [r7, #23]
		case OSR_2048:
			cmd = MS5611_D2_OSR_2048;
 8000c3c:	2356      	movs	r3, #86	@ 0x56
 8000c3e:	75fb      	strb	r3, [r7, #23]
		case OSR_4096:
			cmd = MS5611_D2_OSR_4096;
 8000c40:	2358      	movs	r3, #88	@ 0x58
 8000c42:	75fb      	strb	r3, [r7, #23]
		default:
			return 1; // invalid OSR
 8000c44:	2301      	movs	r3, #1
	if (MS5611_recieve(BAR, 3, rx_buffer)) {
		return 1;
	}
	*temp_raw = (rx_buffer[0] << 16) | (rx_buffer[1] << 8) | (rx_buffer[2]);
	return 0;
}
 8000c46:	4618      	mov	r0, r3
 8000c48:	371c      	adds	r7, #28
 8000c4a:	46bd      	mov	sp, r7
 8000c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c50:	4770      	bx	lr
 8000c52:	bf00      	nop
 8000c54:	0000      	movs	r0, r0
	...

08000c58 <MS5611_compensateTemp>:

int MS5611_compensateTemp(float* pres, uint32_t pres_raw, uint32_t temp_raw, MS5611_PROM_t* prom) {
 8000c58:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8000c5c:	ed2d 8b02 	vpush	{d8}
 8000c60:	b08a      	sub	sp, #40	@ 0x28
 8000c62:	af00      	add	r7, sp, #0
 8000c64:	60f8      	str	r0, [r7, #12]
 8000c66:	60b9      	str	r1, [r7, #8]
 8000c68:	607a      	str	r2, [r7, #4]
 8000c6a:	603b      	str	r3, [r7, #0]
	int32_t dT = temp_raw - (uint32_t)(prom->constants.C5 * pow(2,8));
 8000c6c:	683b      	ldr	r3, [r7, #0]
 8000c6e:	891b      	ldrh	r3, [r3, #8]
 8000c70:	ee07 3a90 	vmov	s15, r3
 8000c74:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8000c78:	ed9f 6b41 	vldr	d6, [pc, #260]	@ 8000d80 <MS5611_compensateTemp+0x128>
 8000c7c:	ee27 7b06 	vmul.f64	d7, d7, d6
 8000c80:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8000c84:	ee17 2a90 	vmov	r2, s15
 8000c88:	687b      	ldr	r3, [r7, #4]
 8000c8a:	1a9b      	subs	r3, r3, r2
 8000c8c:	627b      	str	r3, [r7, #36]	@ 0x24
	//int32_t temp = 2000 + dT * prom->constants.C6 / pow(2,23); //unused for now

	int64_t offset = prom->constants.C2 * pow(2,16) + (prom->constants.C4 * dT) / pow(2,7);
 8000c8e:	683b      	ldr	r3, [r7, #0]
 8000c90:	885b      	ldrh	r3, [r3, #2]
 8000c92:	ee07 3a90 	vmov	s15, r3
 8000c96:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8000c9a:	ed9f 6b3b 	vldr	d6, [pc, #236]	@ 8000d88 <MS5611_compensateTemp+0x130>
 8000c9e:	ee27 6b06 	vmul.f64	d6, d7, d6
 8000ca2:	683b      	ldr	r3, [r7, #0]
 8000ca4:	88db      	ldrh	r3, [r3, #6]
 8000ca6:	461a      	mov	r2, r3
 8000ca8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000caa:	fb02 f303 	mul.w	r3, r2, r3
 8000cae:	ee07 3a90 	vmov	s15, r3
 8000cb2:	eeb8 5be7 	vcvt.f64.s32	d5, s15
 8000cb6:	ed9f 4b36 	vldr	d4, [pc, #216]	@ 8000d90 <MS5611_compensateTemp+0x138>
 8000cba:	ee85 7b04 	vdiv.f64	d7, d5, d4
 8000cbe:	ee36 7b07 	vadd.f64	d7, d6, d7
 8000cc2:	ec51 0b17 	vmov	r0, r1, d7
 8000cc6:	f7ff fcf7 	bl	80006b8 <__aeabi_d2lz>
 8000cca:	4602      	mov	r2, r0
 8000ccc:	460b      	mov	r3, r1
 8000cce:	e9c7 2306 	strd	r2, r3, [r7, #24]
	int64_t sensitivity = prom->constants.C1 * pow(2,15) + (prom->constants.C3 * dT) / pow(2,8);
 8000cd2:	683b      	ldr	r3, [r7, #0]
 8000cd4:	881b      	ldrh	r3, [r3, #0]
 8000cd6:	ee07 3a90 	vmov	s15, r3
 8000cda:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8000cde:	ed9f 6b2e 	vldr	d6, [pc, #184]	@ 8000d98 <MS5611_compensateTemp+0x140>
 8000ce2:	ee27 6b06 	vmul.f64	d6, d7, d6
 8000ce6:	683b      	ldr	r3, [r7, #0]
 8000ce8:	889b      	ldrh	r3, [r3, #4]
 8000cea:	461a      	mov	r2, r3
 8000cec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000cee:	fb02 f303 	mul.w	r3, r2, r3
 8000cf2:	ee07 3a90 	vmov	s15, r3
 8000cf6:	eeb8 5be7 	vcvt.f64.s32	d5, s15
 8000cfa:	ed9f 4b21 	vldr	d4, [pc, #132]	@ 8000d80 <MS5611_compensateTemp+0x128>
 8000cfe:	ee85 7b04 	vdiv.f64	d7, d5, d4
 8000d02:	ee36 7b07 	vadd.f64	d7, d6, d7
 8000d06:	ec51 0b17 	vmov	r0, r1, d7
 8000d0a:	f7ff fcd5 	bl	80006b8 <__aeabi_d2lz>
 8000d0e:	4602      	mov	r2, r0
 8000d10:	460b      	mov	r3, r1
 8000d12:	e9c7 2304 	strd	r2, r3, [r7, #16]

	*pres = ((pres_raw * sensitivity) / (pow(2,21) - offset)) / pow(2,15);
 8000d16:	68bb      	ldr	r3, [r7, #8]
 8000d18:	2200      	movs	r2, #0
 8000d1a:	4698      	mov	r8, r3
 8000d1c:	4691      	mov	r9, r2
 8000d1e:	693b      	ldr	r3, [r7, #16]
 8000d20:	fb09 f203 	mul.w	r2, r9, r3
 8000d24:	697b      	ldr	r3, [r7, #20]
 8000d26:	fb08 f303 	mul.w	r3, r8, r3
 8000d2a:	4413      	add	r3, r2
 8000d2c:	693a      	ldr	r2, [r7, #16]
 8000d2e:	fba2 4508 	umull	r4, r5, r2, r8
 8000d32:	442b      	add	r3, r5
 8000d34:	461d      	mov	r5, r3
 8000d36:	4620      	mov	r0, r4
 8000d38:	4629      	mov	r1, r5
 8000d3a:	f7ff fc77 	bl	800062c <__aeabi_l2d>
 8000d3e:	ec41 0b18 	vmov	d8, r0, r1
 8000d42:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8000d46:	f7ff fc71 	bl	800062c <__aeabi_l2d>
 8000d4a:	ec41 0b16 	vmov	d6, r0, r1
 8000d4e:	ed9f 7b14 	vldr	d7, [pc, #80]	@ 8000da0 <MS5611_compensateTemp+0x148>
 8000d52:	ee37 7b46 	vsub.f64	d7, d7, d6
 8000d56:	ee88 6b07 	vdiv.f64	d6, d8, d7
 8000d5a:	ed9f 5b0f 	vldr	d5, [pc, #60]	@ 8000d98 <MS5611_compensateTemp+0x140>
 8000d5e:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8000d62:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8000d66:	68fb      	ldr	r3, [r7, #12]
 8000d68:	edc3 7a00 	vstr	s15, [r3]
	return 0;
 8000d6c:	2300      	movs	r3, #0
}
 8000d6e:	4618      	mov	r0, r3
 8000d70:	3728      	adds	r7, #40	@ 0x28
 8000d72:	46bd      	mov	sp, r7
 8000d74:	ecbd 8b02 	vpop	{d8}
 8000d78:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8000d7c:	f3af 8000 	nop.w
 8000d80:	00000000 	.word	0x00000000
 8000d84:	40700000 	.word	0x40700000
 8000d88:	00000000 	.word	0x00000000
 8000d8c:	40f00000 	.word	0x40f00000
 8000d90:	00000000 	.word	0x00000000
 8000d94:	40600000 	.word	0x40600000
 8000d98:	00000000 	.word	0x00000000
 8000d9c:	40e00000 	.word	0x40e00000
 8000da0:	00000000 	.word	0x00000000
 8000da4:	41400000 	.word	0x41400000

08000da8 <MS5611_getPres>:

//Get pressure from barometer
int MS5611_getPres(MS5611* BAR, float* pres, OSR osr) {
 8000da8:	b580      	push	{r7, lr}
 8000daa:	b08a      	sub	sp, #40	@ 0x28
 8000dac:	af00      	add	r7, sp, #0
 8000dae:	60f8      	str	r0, [r7, #12]
 8000db0:	60b9      	str	r1, [r7, #8]
 8000db2:	4613      	mov	r3, r2
 8000db4:	71fb      	strb	r3, [r7, #7]
	MS5611_PROM_t prom = {};
 8000db6:	f107 031c 	add.w	r3, r7, #28
 8000dba:	2200      	movs	r2, #0
 8000dbc:	601a      	str	r2, [r3, #0]
 8000dbe:	605a      	str	r2, [r3, #4]
 8000dc0:	609a      	str	r2, [r3, #8]
	if (MS5611_readPROM(BAR, &prom) == 1) { return 1; }
 8000dc2:	f107 031c 	add.w	r3, r7, #28
 8000dc6:	4619      	mov	r1, r3
 8000dc8:	68f8      	ldr	r0, [r7, #12]
 8000dca:	f7ff feb0 	bl	8000b2e <MS5611_readPROM>
 8000dce:	4603      	mov	r3, r0
 8000dd0:	2b01      	cmp	r3, #1
 8000dd2:	d101      	bne.n	8000dd8 <MS5611_getPres+0x30>
 8000dd4:	2301      	movs	r3, #1
 8000dd6:	e024      	b.n	8000e22 <MS5611_getPres+0x7a>
	uint32_t pres_raw;
	uint32_t temp_raw;
	if (MS5611_presConvert(BAR, &pres_raw, osr) == 1) { return 1; }
 8000dd8:	79fa      	ldrb	r2, [r7, #7]
 8000dda:	f107 0318 	add.w	r3, r7, #24
 8000dde:	4619      	mov	r1, r3
 8000de0:	68f8      	ldr	r0, [r7, #12]
 8000de2:	f7ff fedf 	bl	8000ba4 <MS5611_presConvert>
 8000de6:	4603      	mov	r3, r0
 8000de8:	2b01      	cmp	r3, #1
 8000dea:	d101      	bne.n	8000df0 <MS5611_getPres+0x48>
 8000dec:	2301      	movs	r3, #1
 8000dee:	e018      	b.n	8000e22 <MS5611_getPres+0x7a>
	if (MS5611_tempConvert(BAR, &temp_raw, osr) == 1) { return 1; }
 8000df0:	79fa      	ldrb	r2, [r7, #7]
 8000df2:	f107 0314 	add.w	r3, r7, #20
 8000df6:	4619      	mov	r1, r3
 8000df8:	68f8      	ldr	r0, [r7, #12]
 8000dfa:	f7ff feff 	bl	8000bfc <MS5611_tempConvert>
 8000dfe:	4603      	mov	r3, r0
 8000e00:	2b01      	cmp	r3, #1
 8000e02:	d101      	bne.n	8000e08 <MS5611_getPres+0x60>
 8000e04:	2301      	movs	r3, #1
 8000e06:	e00c      	b.n	8000e22 <MS5611_getPres+0x7a>
	if (MS5611_compensateTemp(pres, pres_raw, temp_raw, &prom) == 1) { return 1; }
 8000e08:	69b9      	ldr	r1, [r7, #24]
 8000e0a:	697a      	ldr	r2, [r7, #20]
 8000e0c:	f107 031c 	add.w	r3, r7, #28
 8000e10:	68b8      	ldr	r0, [r7, #8]
 8000e12:	f7ff ff21 	bl	8000c58 <MS5611_compensateTemp>
 8000e16:	4603      	mov	r3, r0
 8000e18:	2b01      	cmp	r3, #1
 8000e1a:	d101      	bne.n	8000e20 <MS5611_getPres+0x78>
 8000e1c:	2301      	movs	r3, #1
 8000e1e:	e000      	b.n	8000e22 <MS5611_getPres+0x7a>
	return 0;
 8000e20:	2300      	movs	r3, #0
}
 8000e22:	4618      	mov	r0, r3
 8000e24:	3728      	adds	r7, #40	@ 0x28
 8000e26:	46bd      	mov	sp, r7
 8000e28:	bd80      	pop	{r7, pc}
	...

08000e2c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000e2c:	b580      	push	{r7, lr}
 8000e2e:	b084      	sub	sp, #16
 8000e30:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
  //SCB->VTOR = FLASH_BASE; // fuck this stupid bug kys
  /* USER CODE END 1 */

  /* MPU Configuration--------------------------------------------------------*/
  MPU_Config();
 8000e32:	f000 fd63 	bl	80018fc <MPU_Config>
  \details Turns on I-Cache
  */
__STATIC_FORCEINLINE void SCB_EnableICache (void)
{
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 8000e36:	4b45      	ldr	r3, [pc, #276]	@ (8000f4c <main+0x120>)
 8000e38:	695b      	ldr	r3, [r3, #20]
 8000e3a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000e3e:	2b00      	cmp	r3, #0
 8000e40:	d11b      	bne.n	8000e7a <main+0x4e>
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8000e42:	f3bf 8f4f 	dsb	sy
}
 8000e46:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000e48:	f3bf 8f6f 	isb	sy
}
 8000e4c:	bf00      	nop

    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8000e4e:	4b3f      	ldr	r3, [pc, #252]	@ (8000f4c <main+0x120>)
 8000e50:	2200      	movs	r2, #0
 8000e52:	f8c3 2250 	str.w	r2, [r3, #592]	@ 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8000e56:	f3bf 8f4f 	dsb	sy
}
 8000e5a:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000e5c:	f3bf 8f6f 	isb	sy
}
 8000e60:	bf00      	nop
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 8000e62:	4b3a      	ldr	r3, [pc, #232]	@ (8000f4c <main+0x120>)
 8000e64:	695b      	ldr	r3, [r3, #20]
 8000e66:	4a39      	ldr	r2, [pc, #228]	@ (8000f4c <main+0x120>)
 8000e68:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000e6c:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8000e6e:	f3bf 8f4f 	dsb	sy
}
 8000e72:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000e74:	f3bf 8f6f 	isb	sy
}
 8000e78:	e000      	b.n	8000e7c <main+0x50>
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 8000e7a:	bf00      	nop
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
 8000e7c:	4b33      	ldr	r3, [pc, #204]	@ (8000f4c <main+0x120>)
 8000e7e:	695b      	ldr	r3, [r3, #20]
 8000e80:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000e84:	2b00      	cmp	r3, #0
 8000e86:	d138      	bne.n	8000efa <main+0xce>

    SCB->CSSELR = 0U;                       /* select Level 1 data cache */
 8000e88:	4b30      	ldr	r3, [pc, #192]	@ (8000f4c <main+0x120>)
 8000e8a:	2200      	movs	r2, #0
 8000e8c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 8000e90:	f3bf 8f4f 	dsb	sy
}
 8000e94:	bf00      	nop
    __DSB();

    ccsidr = SCB->CCSIDR;
 8000e96:	4b2d      	ldr	r3, [pc, #180]	@ (8000f4c <main+0x120>)
 8000e98:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8000e9c:	60fb      	str	r3, [r7, #12]

                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 8000e9e:	68fb      	ldr	r3, [r7, #12]
 8000ea0:	0b5b      	lsrs	r3, r3, #13
 8000ea2:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8000ea6:	60bb      	str	r3, [r7, #8]
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8000ea8:	68fb      	ldr	r3, [r7, #12]
 8000eaa:	08db      	lsrs	r3, r3, #3
 8000eac:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8000eb0:	607b      	str	r3, [r7, #4]
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8000eb2:	68bb      	ldr	r3, [r7, #8]
 8000eb4:	015a      	lsls	r2, r3, #5
 8000eb6:	f643 73e0 	movw	r3, #16352	@ 0x3fe0
 8000eba:	4013      	ands	r3, r2
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
 8000ebc:	687a      	ldr	r2, [r7, #4]
 8000ebe:	0792      	lsls	r2, r2, #30
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8000ec0:	4922      	ldr	r1, [pc, #136]	@ (8000f4c <main+0x120>)
 8000ec2:	4313      	orrs	r3, r2
 8000ec4:	f8c1 3260 	str.w	r3, [r1, #608]	@ 0x260
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 8000ec8:	687b      	ldr	r3, [r7, #4]
 8000eca:	1e5a      	subs	r2, r3, #1
 8000ecc:	607a      	str	r2, [r7, #4]
 8000ece:	2b00      	cmp	r3, #0
 8000ed0:	d1ef      	bne.n	8000eb2 <main+0x86>
    } while(sets-- != 0U);
 8000ed2:	68bb      	ldr	r3, [r7, #8]
 8000ed4:	1e5a      	subs	r2, r3, #1
 8000ed6:	60ba      	str	r2, [r7, #8]
 8000ed8:	2b00      	cmp	r3, #0
 8000eda:	d1e5      	bne.n	8000ea8 <main+0x7c>
  __ASM volatile ("dsb 0xF":::"memory");
 8000edc:	f3bf 8f4f 	dsb	sy
}
 8000ee0:	bf00      	nop
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 8000ee2:	4b1a      	ldr	r3, [pc, #104]	@ (8000f4c <main+0x120>)
 8000ee4:	695b      	ldr	r3, [r3, #20]
 8000ee6:	4a19      	ldr	r2, [pc, #100]	@ (8000f4c <main+0x120>)
 8000ee8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000eec:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8000eee:	f3bf 8f4f 	dsb	sy
}
 8000ef2:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000ef4:	f3bf 8f6f 	isb	sy
}
 8000ef8:	e000      	b.n	8000efc <main+0xd0>
    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
 8000efa:	bf00      	nop
  SCB_EnableDCache();

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000efc:	f001 fb40 	bl	8002580 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000f00:	f000 f82c 	bl	8000f5c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000f04:	f000 fb8a 	bl	800161c <MX_GPIO_Init>
  MX_I2C1_Init();
 8000f08:	f000 f8e6 	bl	80010d8 <MX_I2C1_Init>
  MX_I2C5_Init();
 8000f0c:	f000 f924 	bl	8001158 <MX_I2C5_Init>
  MX_SPI1_Init();
 8000f10:	f000 f98a 	bl	8001228 <MX_SPI1_Init>
  MX_SPI2_Init();
 8000f14:	f000 f9de 	bl	80012d4 <MX_SPI2_Init>
  MX_SPI4_Init();
 8000f18:	f000 fa32 	bl	8001380 <MX_SPI4_Init>
  MX_SPI5_Init();
 8000f1c:	f000 fa86 	bl	800142c <MX_SPI5_Init>
  MX_SPI6_Init();
 8000f20:	f000 fada 	bl	80014d8 <MX_SPI6_Init>
  MX_USART10_UART_Init();
 8000f24:	f000 fb2e 	bl	8001584 <MX_USART10_UART_Init>
  MX_RTC_Init();
 8000f28:	f000 f956 	bl	80011d8 <MX_RTC_Init>
  MX_ETH_Init();
 8000f2c:	f000 f888 	bl	8001040 <MX_ETH_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000f30:	f007 ff9c 	bl	8008e6c <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8000f34:	4a06      	ldr	r2, [pc, #24]	@ (8000f50 <main+0x124>)
 8000f36:	2100      	movs	r1, #0
 8000f38:	4806      	ldr	r0, [pc, #24]	@ (8000f54 <main+0x128>)
 8000f3a:	f007 ffe1 	bl	8008f00 <osThreadNew>
 8000f3e:	4603      	mov	r3, r0
 8000f40:	4a05      	ldr	r2, [pc, #20]	@ (8000f58 <main+0x12c>)
 8000f42:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8000f44:	f007 ffb6 	bl	8008eb4 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000f48:	bf00      	nop
 8000f4a:	e7fd      	b.n	8000f48 <main+0x11c>
 8000f4c:	e000ed00 	.word	0xe000ed00
 8000f50:	0800bba4 	.word	0x0800bba4
 8000f54:	0800187d 	.word	0x0800187d
 8000f58:	24000570 	.word	0x24000570

08000f5c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000f5c:	b580      	push	{r7, lr}
 8000f5e:	b09c      	sub	sp, #112	@ 0x70
 8000f60:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000f62:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000f66:	224c      	movs	r2, #76	@ 0x4c
 8000f68:	2100      	movs	r1, #0
 8000f6a:	4618      	mov	r0, r3
 8000f6c:	f00a fd14 	bl	800b998 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000f70:	1d3b      	adds	r3, r7, #4
 8000f72:	2220      	movs	r2, #32
 8000f74:	2100      	movs	r1, #0
 8000f76:	4618      	mov	r0, r3
 8000f78:	f00a fd0e 	bl	800b998 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8000f7c:	2002      	movs	r0, #2
 8000f7e:	f002 fd21 	bl	80039c4 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000f82:	2300      	movs	r3, #0
 8000f84:	603b      	str	r3, [r7, #0]
 8000f86:	4b2d      	ldr	r3, [pc, #180]	@ (800103c <SystemClock_Config+0xe0>)
 8000f88:	699b      	ldr	r3, [r3, #24]
 8000f8a:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8000f8e:	4a2b      	ldr	r2, [pc, #172]	@ (800103c <SystemClock_Config+0xe0>)
 8000f90:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000f94:	6193      	str	r3, [r2, #24]
 8000f96:	4b29      	ldr	r3, [pc, #164]	@ (800103c <SystemClock_Config+0xe0>)
 8000f98:	699b      	ldr	r3, [r3, #24]
 8000f9a:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000f9e:	603b      	str	r3, [r7, #0]
 8000fa0:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000fa2:	bf00      	nop
 8000fa4:	4b25      	ldr	r3, [pc, #148]	@ (800103c <SystemClock_Config+0xe0>)
 8000fa6:	699b      	ldr	r3, [r3, #24]
 8000fa8:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000fac:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8000fb0:	d1f8      	bne.n	8000fa4 <SystemClock_Config+0x48>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI;
 8000fb2:	230a      	movs	r3, #10
 8000fb4:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 8000fb6:	2301      	movs	r3, #1
 8000fb8:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSICalibrationValue = 64;
 8000fba:	2340      	movs	r3, #64	@ 0x40
 8000fbc:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8000fbe:	2301      	movs	r3, #1
 8000fc0:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000fc2:	2302      	movs	r3, #2
 8000fc4:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000fc6:	2300      	movs	r3, #0
 8000fc8:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000fca:	2304      	movs	r3, #4
 8000fcc:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLN = 12;
 8000fce:	230c      	movs	r3, #12
 8000fd0:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLP = 3;
 8000fd2:	2303      	movs	r3, #3
 8000fd4:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLQ = 3;
 8000fd6:	2303      	movs	r3, #3
 8000fd8:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000fda:	2302      	movs	r3, #2
 8000fdc:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8000fde:	230c      	movs	r3, #12
 8000fe0:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000fe2:	2300      	movs	r3, #0
 8000fe4:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000fe6:	2300      	movs	r3, #0
 8000fe8:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000fea:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000fee:	4618      	mov	r0, r3
 8000ff0:	f002 fd42 	bl	8003a78 <HAL_RCC_OscConfig>
 8000ff4:	4603      	mov	r3, r0
 8000ff6:	2b00      	cmp	r3, #0
 8000ff8:	d001      	beq.n	8000ffe <SystemClock_Config+0xa2>
  {
    Error_Handler();
 8000ffa:	f000 fce3 	bl	80019c4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000ffe:	233f      	movs	r3, #63	@ 0x3f
 8001000:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001002:	2303      	movs	r3, #3
 8001004:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8001006:	2300      	movs	r3, #0
 8001008:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 800100a:	2300      	movs	r3, #0
 800100c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 800100e:	2340      	movs	r3, #64	@ 0x40
 8001010:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8001012:	2340      	movs	r3, #64	@ 0x40
 8001014:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8001016:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800101a:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 800101c:	2340      	movs	r3, #64	@ 0x40
 800101e:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8001020:	1d3b      	adds	r3, r7, #4
 8001022:	2101      	movs	r1, #1
 8001024:	4618      	mov	r0, r3
 8001026:	f003 f901 	bl	800422c <HAL_RCC_ClockConfig>
 800102a:	4603      	mov	r3, r0
 800102c:	2b00      	cmp	r3, #0
 800102e:	d001      	beq.n	8001034 <SystemClock_Config+0xd8>
  {
    Error_Handler();
 8001030:	f000 fcc8 	bl	80019c4 <Error_Handler>
  }
}
 8001034:	bf00      	nop
 8001036:	3770      	adds	r7, #112	@ 0x70
 8001038:	46bd      	mov	sp, r7
 800103a:	bd80      	pop	{r7, pc}
 800103c:	58024800 	.word	0x58024800

08001040 <MX_ETH_Init>:
  * @brief ETH Initialization Function
  * @param None
  * @retval None
  */
static void MX_ETH_Init(void)
{
 8001040:	b580      	push	{r7, lr}
 8001042:	af00      	add	r7, sp, #0
   static uint8_t MACAddr[6];

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 8001044:	4b1e      	ldr	r3, [pc, #120]	@ (80010c0 <MX_ETH_Init+0x80>)
 8001046:	4a1f      	ldr	r2, [pc, #124]	@ (80010c4 <MX_ETH_Init+0x84>)
 8001048:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 800104a:	4b1f      	ldr	r3, [pc, #124]	@ (80010c8 <MX_ETH_Init+0x88>)
 800104c:	2200      	movs	r2, #0
 800104e:	701a      	strb	r2, [r3, #0]
  MACAddr[1] = 0x80;
 8001050:	4b1d      	ldr	r3, [pc, #116]	@ (80010c8 <MX_ETH_Init+0x88>)
 8001052:	2280      	movs	r2, #128	@ 0x80
 8001054:	705a      	strb	r2, [r3, #1]
  MACAddr[2] = 0xE1;
 8001056:	4b1c      	ldr	r3, [pc, #112]	@ (80010c8 <MX_ETH_Init+0x88>)
 8001058:	22e1      	movs	r2, #225	@ 0xe1
 800105a:	709a      	strb	r2, [r3, #2]
  MACAddr[3] = 0x00;
 800105c:	4b1a      	ldr	r3, [pc, #104]	@ (80010c8 <MX_ETH_Init+0x88>)
 800105e:	2200      	movs	r2, #0
 8001060:	70da      	strb	r2, [r3, #3]
  MACAddr[4] = 0x00;
 8001062:	4b19      	ldr	r3, [pc, #100]	@ (80010c8 <MX_ETH_Init+0x88>)
 8001064:	2200      	movs	r2, #0
 8001066:	711a      	strb	r2, [r3, #4]
  MACAddr[5] = 0x00;
 8001068:	4b17      	ldr	r3, [pc, #92]	@ (80010c8 <MX_ETH_Init+0x88>)
 800106a:	2200      	movs	r2, #0
 800106c:	715a      	strb	r2, [r3, #5]
  heth.Init.MACAddr = &MACAddr[0];
 800106e:	4b14      	ldr	r3, [pc, #80]	@ (80010c0 <MX_ETH_Init+0x80>)
 8001070:	4a15      	ldr	r2, [pc, #84]	@ (80010c8 <MX_ETH_Init+0x88>)
 8001072:	605a      	str	r2, [r3, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 8001074:	4b12      	ldr	r3, [pc, #72]	@ (80010c0 <MX_ETH_Init+0x80>)
 8001076:	2201      	movs	r2, #1
 8001078:	721a      	strb	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 800107a:	4b11      	ldr	r3, [pc, #68]	@ (80010c0 <MX_ETH_Init+0x80>)
 800107c:	4a13      	ldr	r2, [pc, #76]	@ (80010cc <MX_ETH_Init+0x8c>)
 800107e:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 8001080:	4b0f      	ldr	r3, [pc, #60]	@ (80010c0 <MX_ETH_Init+0x80>)
 8001082:	4a13      	ldr	r2, [pc, #76]	@ (80010d0 <MX_ETH_Init+0x90>)
 8001084:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1524;
 8001086:	4b0e      	ldr	r3, [pc, #56]	@ (80010c0 <MX_ETH_Init+0x80>)
 8001088:	f240 52f4 	movw	r2, #1524	@ 0x5f4
 800108c:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 800108e:	480c      	ldr	r0, [pc, #48]	@ (80010c0 <MX_ETH_Init+0x80>)
 8001090:	f001 fc3e 	bl	8002910 <HAL_ETH_Init>
 8001094:	4603      	mov	r3, r0
 8001096:	2b00      	cmp	r3, #0
 8001098:	d001      	beq.n	800109e <MX_ETH_Init+0x5e>
  {
    Error_Handler();
 800109a:	f000 fc93 	bl	80019c4 <Error_Handler>
  }

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 800109e:	2238      	movs	r2, #56	@ 0x38
 80010a0:	2100      	movs	r1, #0
 80010a2:	480c      	ldr	r0, [pc, #48]	@ (80010d4 <MX_ETH_Init+0x94>)
 80010a4:	f00a fc78 	bl	800b998 <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 80010a8:	4b0a      	ldr	r3, [pc, #40]	@ (80010d4 <MX_ETH_Init+0x94>)
 80010aa:	2221      	movs	r2, #33	@ 0x21
 80010ac:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 80010ae:	4b09      	ldr	r3, [pc, #36]	@ (80010d4 <MX_ETH_Init+0x94>)
 80010b0:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 80010b4:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 80010b6:	4b07      	ldr	r3, [pc, #28]	@ (80010d4 <MX_ETH_Init+0x94>)
 80010b8:	2200      	movs	r2, #0
 80010ba:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 80010bc:	bf00      	nop
 80010be:	bd80      	pop	{r7, pc}
 80010c0:	240000b8 	.word	0x240000b8
 80010c4:	40028000 	.word	0x40028000
 80010c8:	24000574 	.word	0x24000574
 80010cc:	30000100 	.word	0x30000100
 80010d0:	30000000 	.word	0x30000000
 80010d4:	24000080 	.word	0x24000080

080010d8 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80010d8:	b580      	push	{r7, lr}
 80010da:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80010dc:	4b1b      	ldr	r3, [pc, #108]	@ (800114c <MX_I2C1_Init+0x74>)
 80010de:	4a1c      	ldr	r2, [pc, #112]	@ (8001150 <MX_I2C1_Init+0x78>)
 80010e0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00707CBB;
 80010e2:	4b1a      	ldr	r3, [pc, #104]	@ (800114c <MX_I2C1_Init+0x74>)
 80010e4:	4a1b      	ldr	r2, [pc, #108]	@ (8001154 <MX_I2C1_Init+0x7c>)
 80010e6:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80010e8:	4b18      	ldr	r3, [pc, #96]	@ (800114c <MX_I2C1_Init+0x74>)
 80010ea:	2200      	movs	r2, #0
 80010ec:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80010ee:	4b17      	ldr	r3, [pc, #92]	@ (800114c <MX_I2C1_Init+0x74>)
 80010f0:	2201      	movs	r2, #1
 80010f2:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80010f4:	4b15      	ldr	r3, [pc, #84]	@ (800114c <MX_I2C1_Init+0x74>)
 80010f6:	2200      	movs	r2, #0
 80010f8:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80010fa:	4b14      	ldr	r3, [pc, #80]	@ (800114c <MX_I2C1_Init+0x74>)
 80010fc:	2200      	movs	r2, #0
 80010fe:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001100:	4b12      	ldr	r3, [pc, #72]	@ (800114c <MX_I2C1_Init+0x74>)
 8001102:	2200      	movs	r2, #0
 8001104:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001106:	4b11      	ldr	r3, [pc, #68]	@ (800114c <MX_I2C1_Init+0x74>)
 8001108:	2200      	movs	r2, #0
 800110a:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800110c:	4b0f      	ldr	r3, [pc, #60]	@ (800114c <MX_I2C1_Init+0x74>)
 800110e:	2200      	movs	r2, #0
 8001110:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001112:	480e      	ldr	r0, [pc, #56]	@ (800114c <MX_I2C1_Init+0x74>)
 8001114:	f002 fb22 	bl	800375c <HAL_I2C_Init>
 8001118:	4603      	mov	r3, r0
 800111a:	2b00      	cmp	r3, #0
 800111c:	d001      	beq.n	8001122 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 800111e:	f000 fc51 	bl	80019c4 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001122:	2100      	movs	r1, #0
 8001124:	4809      	ldr	r0, [pc, #36]	@ (800114c <MX_I2C1_Init+0x74>)
 8001126:	f002 fbb5 	bl	8003894 <HAL_I2CEx_ConfigAnalogFilter>
 800112a:	4603      	mov	r3, r0
 800112c:	2b00      	cmp	r3, #0
 800112e:	d001      	beq.n	8001134 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8001130:	f000 fc48 	bl	80019c4 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8001134:	2100      	movs	r1, #0
 8001136:	4805      	ldr	r0, [pc, #20]	@ (800114c <MX_I2C1_Init+0x74>)
 8001138:	f002 fbf7 	bl	800392a <HAL_I2CEx_ConfigDigitalFilter>
 800113c:	4603      	mov	r3, r0
 800113e:	2b00      	cmp	r3, #0
 8001140:	d001      	beq.n	8001146 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8001142:	f000 fc3f 	bl	80019c4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001146:	bf00      	nop
 8001148:	bd80      	pop	{r7, pc}
 800114a:	bf00      	nop
 800114c:	24000168 	.word	0x24000168
 8001150:	40005400 	.word	0x40005400
 8001154:	00707cbb 	.word	0x00707cbb

08001158 <MX_I2C5_Init>:
  * @brief I2C5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C5_Init(void)
{
 8001158:	b580      	push	{r7, lr}
 800115a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C5_Init 0 */

  /* USER CODE BEGIN I2C5_Init 1 */

  /* USER CODE END I2C5_Init 1 */
  hi2c5.Instance = I2C5;
 800115c:	4b1b      	ldr	r3, [pc, #108]	@ (80011cc <MX_I2C5_Init+0x74>)
 800115e:	4a1c      	ldr	r2, [pc, #112]	@ (80011d0 <MX_I2C5_Init+0x78>)
 8001160:	601a      	str	r2, [r3, #0]
  hi2c5.Init.Timing = 0x00707CBB;
 8001162:	4b1a      	ldr	r3, [pc, #104]	@ (80011cc <MX_I2C5_Init+0x74>)
 8001164:	4a1b      	ldr	r2, [pc, #108]	@ (80011d4 <MX_I2C5_Init+0x7c>)
 8001166:	605a      	str	r2, [r3, #4]
  hi2c5.Init.OwnAddress1 = 0;
 8001168:	4b18      	ldr	r3, [pc, #96]	@ (80011cc <MX_I2C5_Init+0x74>)
 800116a:	2200      	movs	r2, #0
 800116c:	609a      	str	r2, [r3, #8]
  hi2c5.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800116e:	4b17      	ldr	r3, [pc, #92]	@ (80011cc <MX_I2C5_Init+0x74>)
 8001170:	2201      	movs	r2, #1
 8001172:	60da      	str	r2, [r3, #12]
  hi2c5.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001174:	4b15      	ldr	r3, [pc, #84]	@ (80011cc <MX_I2C5_Init+0x74>)
 8001176:	2200      	movs	r2, #0
 8001178:	611a      	str	r2, [r3, #16]
  hi2c5.Init.OwnAddress2 = 0;
 800117a:	4b14      	ldr	r3, [pc, #80]	@ (80011cc <MX_I2C5_Init+0x74>)
 800117c:	2200      	movs	r2, #0
 800117e:	615a      	str	r2, [r3, #20]
  hi2c5.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001180:	4b12      	ldr	r3, [pc, #72]	@ (80011cc <MX_I2C5_Init+0x74>)
 8001182:	2200      	movs	r2, #0
 8001184:	619a      	str	r2, [r3, #24]
  hi2c5.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001186:	4b11      	ldr	r3, [pc, #68]	@ (80011cc <MX_I2C5_Init+0x74>)
 8001188:	2200      	movs	r2, #0
 800118a:	61da      	str	r2, [r3, #28]
  hi2c5.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800118c:	4b0f      	ldr	r3, [pc, #60]	@ (80011cc <MX_I2C5_Init+0x74>)
 800118e:	2200      	movs	r2, #0
 8001190:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c5) != HAL_OK)
 8001192:	480e      	ldr	r0, [pc, #56]	@ (80011cc <MX_I2C5_Init+0x74>)
 8001194:	f002 fae2 	bl	800375c <HAL_I2C_Init>
 8001198:	4603      	mov	r3, r0
 800119a:	2b00      	cmp	r3, #0
 800119c:	d001      	beq.n	80011a2 <MX_I2C5_Init+0x4a>
  {
    Error_Handler();
 800119e:	f000 fc11 	bl	80019c4 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c5, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80011a2:	2100      	movs	r1, #0
 80011a4:	4809      	ldr	r0, [pc, #36]	@ (80011cc <MX_I2C5_Init+0x74>)
 80011a6:	f002 fb75 	bl	8003894 <HAL_I2CEx_ConfigAnalogFilter>
 80011aa:	4603      	mov	r3, r0
 80011ac:	2b00      	cmp	r3, #0
 80011ae:	d001      	beq.n	80011b4 <MX_I2C5_Init+0x5c>
  {
    Error_Handler();
 80011b0:	f000 fc08 	bl	80019c4 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c5, 0) != HAL_OK)
 80011b4:	2100      	movs	r1, #0
 80011b6:	4805      	ldr	r0, [pc, #20]	@ (80011cc <MX_I2C5_Init+0x74>)
 80011b8:	f002 fbb7 	bl	800392a <HAL_I2CEx_ConfigDigitalFilter>
 80011bc:	4603      	mov	r3, r0
 80011be:	2b00      	cmp	r3, #0
 80011c0:	d001      	beq.n	80011c6 <MX_I2C5_Init+0x6e>
  {
    Error_Handler();
 80011c2:	f000 fbff 	bl	80019c4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C5_Init 2 */

  /* USER CODE END I2C5_Init 2 */

}
 80011c6:	bf00      	nop
 80011c8:	bd80      	pop	{r7, pc}
 80011ca:	bf00      	nop
 80011cc:	240001bc 	.word	0x240001bc
 80011d0:	40006400 	.word	0x40006400
 80011d4:	00707cbb 	.word	0x00707cbb

080011d8 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 80011d8:	b580      	push	{r7, lr}
 80011da:	af00      	add	r7, sp, #0

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 80011dc:	4b10      	ldr	r3, [pc, #64]	@ (8001220 <MX_RTC_Init+0x48>)
 80011de:	4a11      	ldr	r2, [pc, #68]	@ (8001224 <MX_RTC_Init+0x4c>)
 80011e0:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 80011e2:	4b0f      	ldr	r3, [pc, #60]	@ (8001220 <MX_RTC_Init+0x48>)
 80011e4:	2200      	movs	r2, #0
 80011e6:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 80011e8:	4b0d      	ldr	r3, [pc, #52]	@ (8001220 <MX_RTC_Init+0x48>)
 80011ea:	227f      	movs	r2, #127	@ 0x7f
 80011ec:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 80011ee:	4b0c      	ldr	r3, [pc, #48]	@ (8001220 <MX_RTC_Init+0x48>)
 80011f0:	22ff      	movs	r2, #255	@ 0xff
 80011f2:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 80011f4:	4b0a      	ldr	r3, [pc, #40]	@ (8001220 <MX_RTC_Init+0x48>)
 80011f6:	2200      	movs	r2, #0
 80011f8:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 80011fa:	4b09      	ldr	r3, [pc, #36]	@ (8001220 <MX_RTC_Init+0x48>)
 80011fc:	2200      	movs	r2, #0
 80011fe:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8001200:	4b07      	ldr	r3, [pc, #28]	@ (8001220 <MX_RTC_Init+0x48>)
 8001202:	2200      	movs	r2, #0
 8001204:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8001206:	4b06      	ldr	r3, [pc, #24]	@ (8001220 <MX_RTC_Init+0x48>)
 8001208:	2200      	movs	r2, #0
 800120a:	615a      	str	r2, [r3, #20]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 800120c:	4804      	ldr	r0, [pc, #16]	@ (8001220 <MX_RTC_Init+0x48>)
 800120e:	f005 f99d 	bl	800654c <HAL_RTC_Init>
 8001212:	4603      	mov	r3, r0
 8001214:	2b00      	cmp	r3, #0
 8001216:	d001      	beq.n	800121c <MX_RTC_Init+0x44>
  {
    Error_Handler();
 8001218:	f000 fbd4 	bl	80019c4 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 800121c:	bf00      	nop
 800121e:	bd80      	pop	{r7, pc}
 8001220:	24000210 	.word	0x24000210
 8001224:	58004000 	.word	0x58004000

08001228 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001228:	b580      	push	{r7, lr}
 800122a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 800122c:	4b27      	ldr	r3, [pc, #156]	@ (80012cc <MX_SPI1_Init+0xa4>)
 800122e:	4a28      	ldr	r2, [pc, #160]	@ (80012d0 <MX_SPI1_Init+0xa8>)
 8001230:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001232:	4b26      	ldr	r3, [pc, #152]	@ (80012cc <MX_SPI1_Init+0xa4>)
 8001234:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 8001238:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800123a:	4b24      	ldr	r3, [pc, #144]	@ (80012cc <MX_SPI1_Init+0xa4>)
 800123c:	2200      	movs	r2, #0
 800123e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001240:	4b22      	ldr	r3, [pc, #136]	@ (80012cc <MX_SPI1_Init+0xa4>)
 8001242:	2207      	movs	r2, #7
 8001244:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001246:	4b21      	ldr	r3, [pc, #132]	@ (80012cc <MX_SPI1_Init+0xa4>)
 8001248:	2200      	movs	r2, #0
 800124a:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800124c:	4b1f      	ldr	r3, [pc, #124]	@ (80012cc <MX_SPI1_Init+0xa4>)
 800124e:	2200      	movs	r2, #0
 8001250:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001252:	4b1e      	ldr	r3, [pc, #120]	@ (80012cc <MX_SPI1_Init+0xa4>)
 8001254:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8001258:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 800125a:	4b1c      	ldr	r3, [pc, #112]	@ (80012cc <MX_SPI1_Init+0xa4>)
 800125c:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 8001260:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001262:	4b1a      	ldr	r3, [pc, #104]	@ (80012cc <MX_SPI1_Init+0xa4>)
 8001264:	2200      	movs	r2, #0
 8001266:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001268:	4b18      	ldr	r3, [pc, #96]	@ (80012cc <MX_SPI1_Init+0xa4>)
 800126a:	2200      	movs	r2, #0
 800126c:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800126e:	4b17      	ldr	r3, [pc, #92]	@ (80012cc <MX_SPI1_Init+0xa4>)
 8001270:	2200      	movs	r2, #0
 8001272:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 0x0;
 8001274:	4b15      	ldr	r3, [pc, #84]	@ (80012cc <MX_SPI1_Init+0xa4>)
 8001276:	2200      	movs	r2, #0
 8001278:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 800127a:	4b14      	ldr	r3, [pc, #80]	@ (80012cc <MX_SPI1_Init+0xa4>)
 800127c:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001280:	635a      	str	r2, [r3, #52]	@ 0x34
  hspi1.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8001282:	4b12      	ldr	r3, [pc, #72]	@ (80012cc <MX_SPI1_Init+0xa4>)
 8001284:	2200      	movs	r2, #0
 8001286:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi1.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8001288:	4b10      	ldr	r3, [pc, #64]	@ (80012cc <MX_SPI1_Init+0xa4>)
 800128a:	2200      	movs	r2, #0
 800128c:	63da      	str	r2, [r3, #60]	@ 0x3c
  hspi1.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 800128e:	4b0f      	ldr	r3, [pc, #60]	@ (80012cc <MX_SPI1_Init+0xa4>)
 8001290:	2200      	movs	r2, #0
 8001292:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi1.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8001294:	4b0d      	ldr	r3, [pc, #52]	@ (80012cc <MX_SPI1_Init+0xa4>)
 8001296:	2200      	movs	r2, #0
 8001298:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi1.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 800129a:	4b0c      	ldr	r3, [pc, #48]	@ (80012cc <MX_SPI1_Init+0xa4>)
 800129c:	2200      	movs	r2, #0
 800129e:	649a      	str	r2, [r3, #72]	@ 0x48
  hspi1.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 80012a0:	4b0a      	ldr	r3, [pc, #40]	@ (80012cc <MX_SPI1_Init+0xa4>)
 80012a2:	2200      	movs	r2, #0
 80012a4:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi1.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 80012a6:	4b09      	ldr	r3, [pc, #36]	@ (80012cc <MX_SPI1_Init+0xa4>)
 80012a8:	2200      	movs	r2, #0
 80012aa:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi1.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 80012ac:	4b07      	ldr	r3, [pc, #28]	@ (80012cc <MX_SPI1_Init+0xa4>)
 80012ae:	2200      	movs	r2, #0
 80012b0:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi1.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 80012b2:	4b06      	ldr	r3, [pc, #24]	@ (80012cc <MX_SPI1_Init+0xa4>)
 80012b4:	2200      	movs	r2, #0
 80012b6:	659a      	str	r2, [r3, #88]	@ 0x58
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80012b8:	4804      	ldr	r0, [pc, #16]	@ (80012cc <MX_SPI1_Init+0xa4>)
 80012ba:	f005 fa5f 	bl	800677c <HAL_SPI_Init>
 80012be:	4603      	mov	r3, r0
 80012c0:	2b00      	cmp	r3, #0
 80012c2:	d001      	beq.n	80012c8 <MX_SPI1_Init+0xa0>
  {
    Error_Handler();
 80012c4:	f000 fb7e 	bl	80019c4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80012c8:	bf00      	nop
 80012ca:	bd80      	pop	{r7, pc}
 80012cc:	24000234 	.word	0x24000234
 80012d0:	40013000 	.word	0x40013000

080012d4 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 80012d4:	b580      	push	{r7, lr}
 80012d6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 80012d8:	4b27      	ldr	r3, [pc, #156]	@ (8001378 <MX_SPI2_Init+0xa4>)
 80012da:	4a28      	ldr	r2, [pc, #160]	@ (800137c <MX_SPI2_Init+0xa8>)
 80012dc:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 80012de:	4b26      	ldr	r3, [pc, #152]	@ (8001378 <MX_SPI2_Init+0xa4>)
 80012e0:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 80012e4:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 80012e6:	4b24      	ldr	r3, [pc, #144]	@ (8001378 <MX_SPI2_Init+0xa4>)
 80012e8:	2200      	movs	r2, #0
 80012ea:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_4BIT;
 80012ec:	4b22      	ldr	r3, [pc, #136]	@ (8001378 <MX_SPI2_Init+0xa4>)
 80012ee:	2203      	movs	r2, #3
 80012f0:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 80012f2:	4b21      	ldr	r3, [pc, #132]	@ (8001378 <MX_SPI2_Init+0xa4>)
 80012f4:	2200      	movs	r2, #0
 80012f6:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 80012f8:	4b1f      	ldr	r3, [pc, #124]	@ (8001378 <MX_SPI2_Init+0xa4>)
 80012fa:	2200      	movs	r2, #0
 80012fc:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 80012fe:	4b1e      	ldr	r3, [pc, #120]	@ (8001378 <MX_SPI2_Init+0xa4>)
 8001300:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8001304:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001306:	4b1c      	ldr	r3, [pc, #112]	@ (8001378 <MX_SPI2_Init+0xa4>)
 8001308:	2200      	movs	r2, #0
 800130a:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800130c:	4b1a      	ldr	r3, [pc, #104]	@ (8001378 <MX_SPI2_Init+0xa4>)
 800130e:	2200      	movs	r2, #0
 8001310:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8001312:	4b19      	ldr	r3, [pc, #100]	@ (8001378 <MX_SPI2_Init+0xa4>)
 8001314:	2200      	movs	r2, #0
 8001316:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001318:	4b17      	ldr	r3, [pc, #92]	@ (8001378 <MX_SPI2_Init+0xa4>)
 800131a:	2200      	movs	r2, #0
 800131c:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 0x0;
 800131e:	4b16      	ldr	r3, [pc, #88]	@ (8001378 <MX_SPI2_Init+0xa4>)
 8001320:	2200      	movs	r2, #0
 8001322:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001324:	4b14      	ldr	r3, [pc, #80]	@ (8001378 <MX_SPI2_Init+0xa4>)
 8001326:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800132a:	635a      	str	r2, [r3, #52]	@ 0x34
  hspi2.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 800132c:	4b12      	ldr	r3, [pc, #72]	@ (8001378 <MX_SPI2_Init+0xa4>)
 800132e:	2200      	movs	r2, #0
 8001330:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi2.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8001332:	4b11      	ldr	r3, [pc, #68]	@ (8001378 <MX_SPI2_Init+0xa4>)
 8001334:	2200      	movs	r2, #0
 8001336:	63da      	str	r2, [r3, #60]	@ 0x3c
  hspi2.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8001338:	4b0f      	ldr	r3, [pc, #60]	@ (8001378 <MX_SPI2_Init+0xa4>)
 800133a:	2200      	movs	r2, #0
 800133c:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi2.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 800133e:	4b0e      	ldr	r3, [pc, #56]	@ (8001378 <MX_SPI2_Init+0xa4>)
 8001340:	2200      	movs	r2, #0
 8001342:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi2.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8001344:	4b0c      	ldr	r3, [pc, #48]	@ (8001378 <MX_SPI2_Init+0xa4>)
 8001346:	2200      	movs	r2, #0
 8001348:	649a      	str	r2, [r3, #72]	@ 0x48
  hspi2.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 800134a:	4b0b      	ldr	r3, [pc, #44]	@ (8001378 <MX_SPI2_Init+0xa4>)
 800134c:	2200      	movs	r2, #0
 800134e:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi2.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8001350:	4b09      	ldr	r3, [pc, #36]	@ (8001378 <MX_SPI2_Init+0xa4>)
 8001352:	2200      	movs	r2, #0
 8001354:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi2.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8001356:	4b08      	ldr	r3, [pc, #32]	@ (8001378 <MX_SPI2_Init+0xa4>)
 8001358:	2200      	movs	r2, #0
 800135a:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi2.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 800135c:	4b06      	ldr	r3, [pc, #24]	@ (8001378 <MX_SPI2_Init+0xa4>)
 800135e:	2200      	movs	r2, #0
 8001360:	659a      	str	r2, [r3, #88]	@ 0x58
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8001362:	4805      	ldr	r0, [pc, #20]	@ (8001378 <MX_SPI2_Init+0xa4>)
 8001364:	f005 fa0a 	bl	800677c <HAL_SPI_Init>
 8001368:	4603      	mov	r3, r0
 800136a:	2b00      	cmp	r3, #0
 800136c:	d001      	beq.n	8001372 <MX_SPI2_Init+0x9e>
  {
    Error_Handler();
 800136e:	f000 fb29 	bl	80019c4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8001372:	bf00      	nop
 8001374:	bd80      	pop	{r7, pc}
 8001376:	bf00      	nop
 8001378:	240002bc 	.word	0x240002bc
 800137c:	40003800 	.word	0x40003800

08001380 <MX_SPI4_Init>:
  * @brief SPI4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI4_Init(void)
{
 8001380:	b580      	push	{r7, lr}
 8001382:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI4_Init 1 */

  /* USER CODE END SPI4_Init 1 */
  /* SPI4 parameter configuration*/
  hspi4.Instance = SPI4;
 8001384:	4b27      	ldr	r3, [pc, #156]	@ (8001424 <MX_SPI4_Init+0xa4>)
 8001386:	4a28      	ldr	r2, [pc, #160]	@ (8001428 <MX_SPI4_Init+0xa8>)
 8001388:	601a      	str	r2, [r3, #0]
  hspi4.Init.Mode = SPI_MODE_MASTER;
 800138a:	4b26      	ldr	r3, [pc, #152]	@ (8001424 <MX_SPI4_Init+0xa4>)
 800138c:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 8001390:	605a      	str	r2, [r3, #4]
  hspi4.Init.Direction = SPI_DIRECTION_2LINES;
 8001392:	4b24      	ldr	r3, [pc, #144]	@ (8001424 <MX_SPI4_Init+0xa4>)
 8001394:	2200      	movs	r2, #0
 8001396:	609a      	str	r2, [r3, #8]
  hspi4.Init.DataSize = SPI_DATASIZE_8BIT;
 8001398:	4b22      	ldr	r3, [pc, #136]	@ (8001424 <MX_SPI4_Init+0xa4>)
 800139a:	2207      	movs	r2, #7
 800139c:	60da      	str	r2, [r3, #12]
  hspi4.Init.CLKPolarity = SPI_POLARITY_LOW;
 800139e:	4b21      	ldr	r3, [pc, #132]	@ (8001424 <MX_SPI4_Init+0xa4>)
 80013a0:	2200      	movs	r2, #0
 80013a2:	611a      	str	r2, [r3, #16]
  hspi4.Init.CLKPhase = SPI_PHASE_1EDGE;
 80013a4:	4b1f      	ldr	r3, [pc, #124]	@ (8001424 <MX_SPI4_Init+0xa4>)
 80013a6:	2200      	movs	r2, #0
 80013a8:	615a      	str	r2, [r3, #20]
  hspi4.Init.NSS = SPI_NSS_HARD_OUTPUT;
 80013aa:	4b1e      	ldr	r3, [pc, #120]	@ (8001424 <MX_SPI4_Init+0xa4>)
 80013ac:	f04f 5200 	mov.w	r2, #536870912	@ 0x20000000
 80013b0:	619a      	str	r2, [r3, #24]
  hspi4.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80013b2:	4b1c      	ldr	r3, [pc, #112]	@ (8001424 <MX_SPI4_Init+0xa4>)
 80013b4:	2200      	movs	r2, #0
 80013b6:	61da      	str	r2, [r3, #28]
  hspi4.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80013b8:	4b1a      	ldr	r3, [pc, #104]	@ (8001424 <MX_SPI4_Init+0xa4>)
 80013ba:	2200      	movs	r2, #0
 80013bc:	621a      	str	r2, [r3, #32]
  hspi4.Init.TIMode = SPI_TIMODE_DISABLE;
 80013be:	4b19      	ldr	r3, [pc, #100]	@ (8001424 <MX_SPI4_Init+0xa4>)
 80013c0:	2200      	movs	r2, #0
 80013c2:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi4.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80013c4:	4b17      	ldr	r3, [pc, #92]	@ (8001424 <MX_SPI4_Init+0xa4>)
 80013c6:	2200      	movs	r2, #0
 80013c8:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi4.Init.CRCPolynomial = 0x0;
 80013ca:	4b16      	ldr	r3, [pc, #88]	@ (8001424 <MX_SPI4_Init+0xa4>)
 80013cc:	2200      	movs	r2, #0
 80013ce:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi4.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80013d0:	4b14      	ldr	r3, [pc, #80]	@ (8001424 <MX_SPI4_Init+0xa4>)
 80013d2:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80013d6:	635a      	str	r2, [r3, #52]	@ 0x34
  hspi4.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 80013d8:	4b12      	ldr	r3, [pc, #72]	@ (8001424 <MX_SPI4_Init+0xa4>)
 80013da:	2200      	movs	r2, #0
 80013dc:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi4.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 80013de:	4b11      	ldr	r3, [pc, #68]	@ (8001424 <MX_SPI4_Init+0xa4>)
 80013e0:	2200      	movs	r2, #0
 80013e2:	63da      	str	r2, [r3, #60]	@ 0x3c
  hspi4.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 80013e4:	4b0f      	ldr	r3, [pc, #60]	@ (8001424 <MX_SPI4_Init+0xa4>)
 80013e6:	2200      	movs	r2, #0
 80013e8:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi4.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 80013ea:	4b0e      	ldr	r3, [pc, #56]	@ (8001424 <MX_SPI4_Init+0xa4>)
 80013ec:	2200      	movs	r2, #0
 80013ee:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi4.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 80013f0:	4b0c      	ldr	r3, [pc, #48]	@ (8001424 <MX_SPI4_Init+0xa4>)
 80013f2:	2200      	movs	r2, #0
 80013f4:	649a      	str	r2, [r3, #72]	@ 0x48
  hspi4.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 80013f6:	4b0b      	ldr	r3, [pc, #44]	@ (8001424 <MX_SPI4_Init+0xa4>)
 80013f8:	2200      	movs	r2, #0
 80013fa:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi4.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 80013fc:	4b09      	ldr	r3, [pc, #36]	@ (8001424 <MX_SPI4_Init+0xa4>)
 80013fe:	2200      	movs	r2, #0
 8001400:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi4.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8001402:	4b08      	ldr	r3, [pc, #32]	@ (8001424 <MX_SPI4_Init+0xa4>)
 8001404:	2200      	movs	r2, #0
 8001406:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi4.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8001408:	4b06      	ldr	r3, [pc, #24]	@ (8001424 <MX_SPI4_Init+0xa4>)
 800140a:	2200      	movs	r2, #0
 800140c:	659a      	str	r2, [r3, #88]	@ 0x58
  if (HAL_SPI_Init(&hspi4) != HAL_OK)
 800140e:	4805      	ldr	r0, [pc, #20]	@ (8001424 <MX_SPI4_Init+0xa4>)
 8001410:	f005 f9b4 	bl	800677c <HAL_SPI_Init>
 8001414:	4603      	mov	r3, r0
 8001416:	2b00      	cmp	r3, #0
 8001418:	d001      	beq.n	800141e <MX_SPI4_Init+0x9e>
  {
    Error_Handler();
 800141a:	f000 fad3 	bl	80019c4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI4_Init 2 */

  /* USER CODE END SPI4_Init 2 */

}
 800141e:	bf00      	nop
 8001420:	bd80      	pop	{r7, pc}
 8001422:	bf00      	nop
 8001424:	24000344 	.word	0x24000344
 8001428:	40013400 	.word	0x40013400

0800142c <MX_SPI5_Init>:
  * @brief SPI5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI5_Init(void)
{
 800142c:	b580      	push	{r7, lr}
 800142e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI5_Init 1 */

  /* USER CODE END SPI5_Init 1 */
  /* SPI5 parameter configuration*/
  hspi5.Instance = SPI5;
 8001430:	4b27      	ldr	r3, [pc, #156]	@ (80014d0 <MX_SPI5_Init+0xa4>)
 8001432:	4a28      	ldr	r2, [pc, #160]	@ (80014d4 <MX_SPI5_Init+0xa8>)
 8001434:	601a      	str	r2, [r3, #0]
  hspi5.Init.Mode = SPI_MODE_MASTER;
 8001436:	4b26      	ldr	r3, [pc, #152]	@ (80014d0 <MX_SPI5_Init+0xa4>)
 8001438:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 800143c:	605a      	str	r2, [r3, #4]
  hspi5.Init.Direction = SPI_DIRECTION_2LINES;
 800143e:	4b24      	ldr	r3, [pc, #144]	@ (80014d0 <MX_SPI5_Init+0xa4>)
 8001440:	2200      	movs	r2, #0
 8001442:	609a      	str	r2, [r3, #8]
  hspi5.Init.DataSize = SPI_DATASIZE_8BIT;
 8001444:	4b22      	ldr	r3, [pc, #136]	@ (80014d0 <MX_SPI5_Init+0xa4>)
 8001446:	2207      	movs	r2, #7
 8001448:	60da      	str	r2, [r3, #12]
  hspi5.Init.CLKPolarity = SPI_POLARITY_LOW;
 800144a:	4b21      	ldr	r3, [pc, #132]	@ (80014d0 <MX_SPI5_Init+0xa4>)
 800144c:	2200      	movs	r2, #0
 800144e:	611a      	str	r2, [r3, #16]
  hspi5.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001450:	4b1f      	ldr	r3, [pc, #124]	@ (80014d0 <MX_SPI5_Init+0xa4>)
 8001452:	2200      	movs	r2, #0
 8001454:	615a      	str	r2, [r3, #20]
  hspi5.Init.NSS = SPI_NSS_SOFT;
 8001456:	4b1e      	ldr	r3, [pc, #120]	@ (80014d0 <MX_SPI5_Init+0xa4>)
 8001458:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 800145c:	619a      	str	r2, [r3, #24]
  hspi5.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 800145e:	4b1c      	ldr	r3, [pc, #112]	@ (80014d0 <MX_SPI5_Init+0xa4>)
 8001460:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 8001464:	61da      	str	r2, [r3, #28]
  hspi5.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001466:	4b1a      	ldr	r3, [pc, #104]	@ (80014d0 <MX_SPI5_Init+0xa4>)
 8001468:	2200      	movs	r2, #0
 800146a:	621a      	str	r2, [r3, #32]
  hspi5.Init.TIMode = SPI_TIMODE_DISABLE;
 800146c:	4b18      	ldr	r3, [pc, #96]	@ (80014d0 <MX_SPI5_Init+0xa4>)
 800146e:	2200      	movs	r2, #0
 8001470:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi5.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001472:	4b17      	ldr	r3, [pc, #92]	@ (80014d0 <MX_SPI5_Init+0xa4>)
 8001474:	2200      	movs	r2, #0
 8001476:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi5.Init.CRCPolynomial = 0x0;
 8001478:	4b15      	ldr	r3, [pc, #84]	@ (80014d0 <MX_SPI5_Init+0xa4>)
 800147a:	2200      	movs	r2, #0
 800147c:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi5.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 800147e:	4b14      	ldr	r3, [pc, #80]	@ (80014d0 <MX_SPI5_Init+0xa4>)
 8001480:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001484:	635a      	str	r2, [r3, #52]	@ 0x34
  hspi5.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8001486:	4b12      	ldr	r3, [pc, #72]	@ (80014d0 <MX_SPI5_Init+0xa4>)
 8001488:	2200      	movs	r2, #0
 800148a:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi5.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 800148c:	4b10      	ldr	r3, [pc, #64]	@ (80014d0 <MX_SPI5_Init+0xa4>)
 800148e:	2200      	movs	r2, #0
 8001490:	63da      	str	r2, [r3, #60]	@ 0x3c
  hspi5.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8001492:	4b0f      	ldr	r3, [pc, #60]	@ (80014d0 <MX_SPI5_Init+0xa4>)
 8001494:	2200      	movs	r2, #0
 8001496:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi5.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8001498:	4b0d      	ldr	r3, [pc, #52]	@ (80014d0 <MX_SPI5_Init+0xa4>)
 800149a:	2200      	movs	r2, #0
 800149c:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi5.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 800149e:	4b0c      	ldr	r3, [pc, #48]	@ (80014d0 <MX_SPI5_Init+0xa4>)
 80014a0:	2200      	movs	r2, #0
 80014a2:	649a      	str	r2, [r3, #72]	@ 0x48
  hspi5.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 80014a4:	4b0a      	ldr	r3, [pc, #40]	@ (80014d0 <MX_SPI5_Init+0xa4>)
 80014a6:	2200      	movs	r2, #0
 80014a8:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi5.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 80014aa:	4b09      	ldr	r3, [pc, #36]	@ (80014d0 <MX_SPI5_Init+0xa4>)
 80014ac:	2200      	movs	r2, #0
 80014ae:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi5.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 80014b0:	4b07      	ldr	r3, [pc, #28]	@ (80014d0 <MX_SPI5_Init+0xa4>)
 80014b2:	2200      	movs	r2, #0
 80014b4:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi5.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 80014b6:	4b06      	ldr	r3, [pc, #24]	@ (80014d0 <MX_SPI5_Init+0xa4>)
 80014b8:	2200      	movs	r2, #0
 80014ba:	659a      	str	r2, [r3, #88]	@ 0x58
  if (HAL_SPI_Init(&hspi5) != HAL_OK)
 80014bc:	4804      	ldr	r0, [pc, #16]	@ (80014d0 <MX_SPI5_Init+0xa4>)
 80014be:	f005 f95d 	bl	800677c <HAL_SPI_Init>
 80014c2:	4603      	mov	r3, r0
 80014c4:	2b00      	cmp	r3, #0
 80014c6:	d001      	beq.n	80014cc <MX_SPI5_Init+0xa0>
  {
    Error_Handler();
 80014c8:	f000 fa7c 	bl	80019c4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI5_Init 2 */

  /* USER CODE END SPI5_Init 2 */

}
 80014cc:	bf00      	nop
 80014ce:	bd80      	pop	{r7, pc}
 80014d0:	240003cc 	.word	0x240003cc
 80014d4:	40015000 	.word	0x40015000

080014d8 <MX_SPI6_Init>:
  * @brief SPI6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI6_Init(void)
{
 80014d8:	b580      	push	{r7, lr}
 80014da:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI6_Init 1 */

  /* USER CODE END SPI6_Init 1 */
  /* SPI6 parameter configuration*/
  hspi6.Instance = SPI6;
 80014dc:	4b27      	ldr	r3, [pc, #156]	@ (800157c <MX_SPI6_Init+0xa4>)
 80014de:	4a28      	ldr	r2, [pc, #160]	@ (8001580 <MX_SPI6_Init+0xa8>)
 80014e0:	601a      	str	r2, [r3, #0]
  hspi6.Init.Mode = SPI_MODE_MASTER;
 80014e2:	4b26      	ldr	r3, [pc, #152]	@ (800157c <MX_SPI6_Init+0xa4>)
 80014e4:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 80014e8:	605a      	str	r2, [r3, #4]
  hspi6.Init.Direction = SPI_DIRECTION_2LINES;
 80014ea:	4b24      	ldr	r3, [pc, #144]	@ (800157c <MX_SPI6_Init+0xa4>)
 80014ec:	2200      	movs	r2, #0
 80014ee:	609a      	str	r2, [r3, #8]
  hspi6.Init.DataSize = SPI_DATASIZE_8BIT;
 80014f0:	4b22      	ldr	r3, [pc, #136]	@ (800157c <MX_SPI6_Init+0xa4>)
 80014f2:	2207      	movs	r2, #7
 80014f4:	60da      	str	r2, [r3, #12]
  hspi6.Init.CLKPolarity = SPI_POLARITY_LOW;
 80014f6:	4b21      	ldr	r3, [pc, #132]	@ (800157c <MX_SPI6_Init+0xa4>)
 80014f8:	2200      	movs	r2, #0
 80014fa:	611a      	str	r2, [r3, #16]
  hspi6.Init.CLKPhase = SPI_PHASE_1EDGE;
 80014fc:	4b1f      	ldr	r3, [pc, #124]	@ (800157c <MX_SPI6_Init+0xa4>)
 80014fe:	2200      	movs	r2, #0
 8001500:	615a      	str	r2, [r3, #20]
  hspi6.Init.NSS = SPI_NSS_SOFT;
 8001502:	4b1e      	ldr	r3, [pc, #120]	@ (800157c <MX_SPI6_Init+0xa4>)
 8001504:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8001508:	619a      	str	r2, [r3, #24]
  hspi6.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 800150a:	4b1c      	ldr	r3, [pc, #112]	@ (800157c <MX_SPI6_Init+0xa4>)
 800150c:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 8001510:	61da      	str	r2, [r3, #28]
  hspi6.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001512:	4b1a      	ldr	r3, [pc, #104]	@ (800157c <MX_SPI6_Init+0xa4>)
 8001514:	2200      	movs	r2, #0
 8001516:	621a      	str	r2, [r3, #32]
  hspi6.Init.TIMode = SPI_TIMODE_DISABLE;
 8001518:	4b18      	ldr	r3, [pc, #96]	@ (800157c <MX_SPI6_Init+0xa4>)
 800151a:	2200      	movs	r2, #0
 800151c:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi6.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800151e:	4b17      	ldr	r3, [pc, #92]	@ (800157c <MX_SPI6_Init+0xa4>)
 8001520:	2200      	movs	r2, #0
 8001522:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi6.Init.CRCPolynomial = 0x0;
 8001524:	4b15      	ldr	r3, [pc, #84]	@ (800157c <MX_SPI6_Init+0xa4>)
 8001526:	2200      	movs	r2, #0
 8001528:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi6.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 800152a:	4b14      	ldr	r3, [pc, #80]	@ (800157c <MX_SPI6_Init+0xa4>)
 800152c:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001530:	635a      	str	r2, [r3, #52]	@ 0x34
  hspi6.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8001532:	4b12      	ldr	r3, [pc, #72]	@ (800157c <MX_SPI6_Init+0xa4>)
 8001534:	2200      	movs	r2, #0
 8001536:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi6.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8001538:	4b10      	ldr	r3, [pc, #64]	@ (800157c <MX_SPI6_Init+0xa4>)
 800153a:	2200      	movs	r2, #0
 800153c:	63da      	str	r2, [r3, #60]	@ 0x3c
  hspi6.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 800153e:	4b0f      	ldr	r3, [pc, #60]	@ (800157c <MX_SPI6_Init+0xa4>)
 8001540:	2200      	movs	r2, #0
 8001542:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi6.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8001544:	4b0d      	ldr	r3, [pc, #52]	@ (800157c <MX_SPI6_Init+0xa4>)
 8001546:	2200      	movs	r2, #0
 8001548:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi6.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 800154a:	4b0c      	ldr	r3, [pc, #48]	@ (800157c <MX_SPI6_Init+0xa4>)
 800154c:	2200      	movs	r2, #0
 800154e:	649a      	str	r2, [r3, #72]	@ 0x48
  hspi6.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8001550:	4b0a      	ldr	r3, [pc, #40]	@ (800157c <MX_SPI6_Init+0xa4>)
 8001552:	2200      	movs	r2, #0
 8001554:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi6.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8001556:	4b09      	ldr	r3, [pc, #36]	@ (800157c <MX_SPI6_Init+0xa4>)
 8001558:	2200      	movs	r2, #0
 800155a:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi6.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 800155c:	4b07      	ldr	r3, [pc, #28]	@ (800157c <MX_SPI6_Init+0xa4>)
 800155e:	2200      	movs	r2, #0
 8001560:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi6.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8001562:	4b06      	ldr	r3, [pc, #24]	@ (800157c <MX_SPI6_Init+0xa4>)
 8001564:	2200      	movs	r2, #0
 8001566:	659a      	str	r2, [r3, #88]	@ 0x58
  if (HAL_SPI_Init(&hspi6) != HAL_OK)
 8001568:	4804      	ldr	r0, [pc, #16]	@ (800157c <MX_SPI6_Init+0xa4>)
 800156a:	f005 f907 	bl	800677c <HAL_SPI_Init>
 800156e:	4603      	mov	r3, r0
 8001570:	2b00      	cmp	r3, #0
 8001572:	d001      	beq.n	8001578 <MX_SPI6_Init+0xa0>
  {
    Error_Handler();
 8001574:	f000 fa26 	bl	80019c4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI6_Init 2 */

  /* USER CODE END SPI6_Init 2 */

}
 8001578:	bf00      	nop
 800157a:	bd80      	pop	{r7, pc}
 800157c:	24000454 	.word	0x24000454
 8001580:	58001400 	.word	0x58001400

08001584 <MX_USART10_UART_Init>:
  * @brief USART10 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART10_UART_Init(void)
{
 8001584:	b580      	push	{r7, lr}
 8001586:	af00      	add	r7, sp, #0
  /* USER CODE END USART10_Init 0 */

  /* USER CODE BEGIN USART10_Init 1 */

  /* USER CODE END USART10_Init 1 */
  huart10.Instance = USART10;
 8001588:	4b22      	ldr	r3, [pc, #136]	@ (8001614 <MX_USART10_UART_Init+0x90>)
 800158a:	4a23      	ldr	r2, [pc, #140]	@ (8001618 <MX_USART10_UART_Init+0x94>)
 800158c:	601a      	str	r2, [r3, #0]
  huart10.Init.BaudRate = 115200;
 800158e:	4b21      	ldr	r3, [pc, #132]	@ (8001614 <MX_USART10_UART_Init+0x90>)
 8001590:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001594:	605a      	str	r2, [r3, #4]
  huart10.Init.WordLength = UART_WORDLENGTH_8B;
 8001596:	4b1f      	ldr	r3, [pc, #124]	@ (8001614 <MX_USART10_UART_Init+0x90>)
 8001598:	2200      	movs	r2, #0
 800159a:	609a      	str	r2, [r3, #8]
  huart10.Init.StopBits = UART_STOPBITS_1;
 800159c:	4b1d      	ldr	r3, [pc, #116]	@ (8001614 <MX_USART10_UART_Init+0x90>)
 800159e:	2200      	movs	r2, #0
 80015a0:	60da      	str	r2, [r3, #12]
  huart10.Init.Parity = UART_PARITY_NONE;
 80015a2:	4b1c      	ldr	r3, [pc, #112]	@ (8001614 <MX_USART10_UART_Init+0x90>)
 80015a4:	2200      	movs	r2, #0
 80015a6:	611a      	str	r2, [r3, #16]
  huart10.Init.Mode = UART_MODE_TX_RX;
 80015a8:	4b1a      	ldr	r3, [pc, #104]	@ (8001614 <MX_USART10_UART_Init+0x90>)
 80015aa:	220c      	movs	r2, #12
 80015ac:	615a      	str	r2, [r3, #20]
  huart10.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80015ae:	4b19      	ldr	r3, [pc, #100]	@ (8001614 <MX_USART10_UART_Init+0x90>)
 80015b0:	2200      	movs	r2, #0
 80015b2:	619a      	str	r2, [r3, #24]
  huart10.Init.OverSampling = UART_OVERSAMPLING_16;
 80015b4:	4b17      	ldr	r3, [pc, #92]	@ (8001614 <MX_USART10_UART_Init+0x90>)
 80015b6:	2200      	movs	r2, #0
 80015b8:	61da      	str	r2, [r3, #28]
  huart10.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80015ba:	4b16      	ldr	r3, [pc, #88]	@ (8001614 <MX_USART10_UART_Init+0x90>)
 80015bc:	2200      	movs	r2, #0
 80015be:	621a      	str	r2, [r3, #32]
  huart10.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80015c0:	4b14      	ldr	r3, [pc, #80]	@ (8001614 <MX_USART10_UART_Init+0x90>)
 80015c2:	2200      	movs	r2, #0
 80015c4:	625a      	str	r2, [r3, #36]	@ 0x24
  huart10.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80015c6:	4b13      	ldr	r3, [pc, #76]	@ (8001614 <MX_USART10_UART_Init+0x90>)
 80015c8:	2200      	movs	r2, #0
 80015ca:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart10) != HAL_OK)
 80015cc:	4811      	ldr	r0, [pc, #68]	@ (8001614 <MX_USART10_UART_Init+0x90>)
 80015ce:	f006 fa29 	bl	8007a24 <HAL_UART_Init>
 80015d2:	4603      	mov	r3, r0
 80015d4:	2b00      	cmp	r3, #0
 80015d6:	d001      	beq.n	80015dc <MX_USART10_UART_Init+0x58>
  {
    Error_Handler();
 80015d8:	f000 f9f4 	bl	80019c4 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart10, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80015dc:	2100      	movs	r1, #0
 80015de:	480d      	ldr	r0, [pc, #52]	@ (8001614 <MX_USART10_UART_Init+0x90>)
 80015e0:	f007 fb35 	bl	8008c4e <HAL_UARTEx_SetTxFifoThreshold>
 80015e4:	4603      	mov	r3, r0
 80015e6:	2b00      	cmp	r3, #0
 80015e8:	d001      	beq.n	80015ee <MX_USART10_UART_Init+0x6a>
  {
    Error_Handler();
 80015ea:	f000 f9eb 	bl	80019c4 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart10, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80015ee:	2100      	movs	r1, #0
 80015f0:	4808      	ldr	r0, [pc, #32]	@ (8001614 <MX_USART10_UART_Init+0x90>)
 80015f2:	f007 fb6a 	bl	8008cca <HAL_UARTEx_SetRxFifoThreshold>
 80015f6:	4603      	mov	r3, r0
 80015f8:	2b00      	cmp	r3, #0
 80015fa:	d001      	beq.n	8001600 <MX_USART10_UART_Init+0x7c>
  {
    Error_Handler();
 80015fc:	f000 f9e2 	bl	80019c4 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart10) != HAL_OK)
 8001600:	4804      	ldr	r0, [pc, #16]	@ (8001614 <MX_USART10_UART_Init+0x90>)
 8001602:	f007 faeb 	bl	8008bdc <HAL_UARTEx_DisableFifoMode>
 8001606:	4603      	mov	r3, r0
 8001608:	2b00      	cmp	r3, #0
 800160a:	d001      	beq.n	8001610 <MX_USART10_UART_Init+0x8c>
  {
    Error_Handler();
 800160c:	f000 f9da 	bl	80019c4 <Error_Handler>
  }
  /* USER CODE BEGIN USART10_Init 2 */

  /* USER CODE END USART10_Init 2 */

}
 8001610:	bf00      	nop
 8001612:	bd80      	pop	{r7, pc}
 8001614:	240004dc 	.word	0x240004dc
 8001618:	40011c00 	.word	0x40011c00

0800161c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800161c:	b580      	push	{r7, lr}
 800161e:	b08c      	sub	sp, #48	@ 0x30
 8001620:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001622:	f107 031c 	add.w	r3, r7, #28
 8001626:	2200      	movs	r2, #0
 8001628:	601a      	str	r2, [r3, #0]
 800162a:	605a      	str	r2, [r3, #4]
 800162c:	609a      	str	r2, [r3, #8]
 800162e:	60da      	str	r2, [r3, #12]
 8001630:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001632:	4b8a      	ldr	r3, [pc, #552]	@ (800185c <MX_GPIO_Init+0x240>)
 8001634:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001638:	4a88      	ldr	r2, [pc, #544]	@ (800185c <MX_GPIO_Init+0x240>)
 800163a:	f043 0310 	orr.w	r3, r3, #16
 800163e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001642:	4b86      	ldr	r3, [pc, #536]	@ (800185c <MX_GPIO_Init+0x240>)
 8001644:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001648:	f003 0310 	and.w	r3, r3, #16
 800164c:	61bb      	str	r3, [r7, #24]
 800164e:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001650:	4b82      	ldr	r3, [pc, #520]	@ (800185c <MX_GPIO_Init+0x240>)
 8001652:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001656:	4a81      	ldr	r2, [pc, #516]	@ (800185c <MX_GPIO_Init+0x240>)
 8001658:	f043 0320 	orr.w	r3, r3, #32
 800165c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001660:	4b7e      	ldr	r3, [pc, #504]	@ (800185c <MX_GPIO_Init+0x240>)
 8001662:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001666:	f003 0320 	and.w	r3, r3, #32
 800166a:	617b      	str	r3, [r7, #20]
 800166c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800166e:	4b7b      	ldr	r3, [pc, #492]	@ (800185c <MX_GPIO_Init+0x240>)
 8001670:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001674:	4a79      	ldr	r2, [pc, #484]	@ (800185c <MX_GPIO_Init+0x240>)
 8001676:	f043 0304 	orr.w	r3, r3, #4
 800167a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800167e:	4b77      	ldr	r3, [pc, #476]	@ (800185c <MX_GPIO_Init+0x240>)
 8001680:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001684:	f003 0304 	and.w	r3, r3, #4
 8001688:	613b      	str	r3, [r7, #16]
 800168a:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800168c:	4b73      	ldr	r3, [pc, #460]	@ (800185c <MX_GPIO_Init+0x240>)
 800168e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001692:	4a72      	ldr	r2, [pc, #456]	@ (800185c <MX_GPIO_Init+0x240>)
 8001694:	f043 0301 	orr.w	r3, r3, #1
 8001698:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800169c:	4b6f      	ldr	r3, [pc, #444]	@ (800185c <MX_GPIO_Init+0x240>)
 800169e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80016a2:	f003 0301 	and.w	r3, r3, #1
 80016a6:	60fb      	str	r3, [r7, #12]
 80016a8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80016aa:	4b6c      	ldr	r3, [pc, #432]	@ (800185c <MX_GPIO_Init+0x240>)
 80016ac:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80016b0:	4a6a      	ldr	r2, [pc, #424]	@ (800185c <MX_GPIO_Init+0x240>)
 80016b2:	f043 0302 	orr.w	r3, r3, #2
 80016b6:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80016ba:	4b68      	ldr	r3, [pc, #416]	@ (800185c <MX_GPIO_Init+0x240>)
 80016bc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80016c0:	f003 0302 	and.w	r3, r3, #2
 80016c4:	60bb      	str	r3, [r7, #8]
 80016c6:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80016c8:	4b64      	ldr	r3, [pc, #400]	@ (800185c <MX_GPIO_Init+0x240>)
 80016ca:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80016ce:	4a63      	ldr	r2, [pc, #396]	@ (800185c <MX_GPIO_Init+0x240>)
 80016d0:	f043 0308 	orr.w	r3, r3, #8
 80016d4:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80016d8:	4b60      	ldr	r3, [pc, #384]	@ (800185c <MX_GPIO_Init+0x240>)
 80016da:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80016de:	f003 0308 	and.w	r3, r3, #8
 80016e2:	607b      	str	r3, [r7, #4]
 80016e4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80016e6:	4b5d      	ldr	r3, [pc, #372]	@ (800185c <MX_GPIO_Init+0x240>)
 80016e8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80016ec:	4a5b      	ldr	r2, [pc, #364]	@ (800185c <MX_GPIO_Init+0x240>)
 80016ee:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80016f2:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80016f6:	4b59      	ldr	r3, [pc, #356]	@ (800185c <MX_GPIO_Init+0x240>)
 80016f8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80016fc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001700:	603b      	str	r3, [r7, #0]
 8001702:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI5_CS_GPIO_Port, SPI5_CS_Pin, GPIO_PIN_RESET);
 8001704:	2200      	movs	r2, #0
 8001706:	2140      	movs	r1, #64	@ 0x40
 8001708:	4855      	ldr	r0, [pc, #340]	@ (8001860 <MX_GPIO_Init+0x244>)
 800170a:	f002 f80d 	bl	8003728 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, RF_NSRT_Pin|VLV_EN1_Pin, GPIO_PIN_RESET);
 800170e:	2200      	movs	r2, #0
 8001710:	2144      	movs	r1, #68	@ 0x44
 8001712:	4854      	ldr	r0, [pc, #336]	@ (8001864 <MX_GPIO_Init+0x248>)
 8001714:	f002 f808 	bl	8003728 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, SPI6_CS_Pin|BAR2_CS_Pin|VLV_EN2_Pin|BUFF_CLR_Pin
 8001718:	2200      	movs	r2, #0
 800171a:	f248 7109 	movw	r1, #34569	@ 0x8709
 800171e:	4852      	ldr	r0, [pc, #328]	@ (8001868 <MX_GPIO_Init+0x24c>)
 8001720:	f002 f802 	bl	8003728 <HAL_GPIO_WritePin>
                          |BUFF_CLK_Pin|VLV_CTRL_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, TC_CS1_Pin|TC_CS2_Pin, GPIO_PIN_RESET);
 8001724:	2200      	movs	r2, #0
 8001726:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 800172a:	4850      	ldr	r0, [pc, #320]	@ (800186c <MX_GPIO_Init+0x250>)
 800172c:	f001 fffc 	bl	8003728 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, VLV_EN3_Pin|SPI1_CS_Pin, GPIO_PIN_RESET);
 8001730:	2200      	movs	r2, #0
 8001732:	f44f 61a0 	mov.w	r1, #1280	@ 0x500
 8001736:	484e      	ldr	r0, [pc, #312]	@ (8001870 <MX_GPIO_Init+0x254>)
 8001738:	f001 fff6 	bl	8003728 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, BUZZ_Pin|LED_RED_Pin, GPIO_PIN_RESET);
 800173c:	2200      	movs	r2, #0
 800173e:	f44f 7140 	mov.w	r1, #768	@ 0x300
 8001742:	484c      	ldr	r0, [pc, #304]	@ (8001874 <MX_GPIO_Init+0x258>)
 8001744:	f001 fff0 	bl	8003728 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, LED_BLUE_Pin|LED_GREEN_Pin, GPIO_PIN_RESET);
 8001748:	2200      	movs	r2, #0
 800174a:	2103      	movs	r1, #3
 800174c:	484a      	ldr	r0, [pc, #296]	@ (8001878 <MX_GPIO_Init+0x25c>)
 800174e:	f001 ffeb 	bl	8003728 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : SPI5_CS_Pin */
  GPIO_InitStruct.Pin = SPI5_CS_Pin;
 8001752:	2340      	movs	r3, #64	@ 0x40
 8001754:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001756:	2301      	movs	r3, #1
 8001758:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800175a:	2300      	movs	r3, #0
 800175c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800175e:	2300      	movs	r3, #0
 8001760:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(SPI5_CS_GPIO_Port, &GPIO_InitStruct);
 8001762:	f107 031c 	add.w	r3, r7, #28
 8001766:	4619      	mov	r1, r3
 8001768:	483d      	ldr	r0, [pc, #244]	@ (8001860 <MX_GPIO_Init+0x244>)
 800176a:	f001 fe35 	bl	80033d8 <HAL_GPIO_Init>

  /*Configure GPIO pin : MODE_SW_Pin */
  GPIO_InitStruct.Pin = MODE_SW_Pin;
 800176e:	2301      	movs	r3, #1
 8001770:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001772:	2300      	movs	r3, #0
 8001774:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001776:	2300      	movs	r3, #0
 8001778:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(MODE_SW_GPIO_Port, &GPIO_InitStruct);
 800177a:	f107 031c 	add.w	r3, r7, #28
 800177e:	4619      	mov	r1, r3
 8001780:	4838      	ldr	r0, [pc, #224]	@ (8001864 <MX_GPIO_Init+0x248>)
 8001782:	f001 fe29 	bl	80033d8 <HAL_GPIO_Init>

  /*Configure GPIO pins : RF_NSRT_Pin VLV_EN1_Pin */
  GPIO_InitStruct.Pin = RF_NSRT_Pin|VLV_EN1_Pin;
 8001786:	2344      	movs	r3, #68	@ 0x44
 8001788:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800178a:	2301      	movs	r3, #1
 800178c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800178e:	2300      	movs	r3, #0
 8001790:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001792:	2300      	movs	r3, #0
 8001794:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001796:	f107 031c 	add.w	r3, r7, #28
 800179a:	4619      	mov	r1, r3
 800179c:	4831      	ldr	r0, [pc, #196]	@ (8001864 <MX_GPIO_Init+0x248>)
 800179e:	f001 fe1b 	bl	80033d8 <HAL_GPIO_Init>

  /*Configure GPIO pins : SPI6_CS_Pin BAR2_CS_Pin VLV_EN2_Pin */
  GPIO_InitStruct.Pin = SPI6_CS_Pin|BAR2_CS_Pin|VLV_EN2_Pin;
 80017a2:	f240 1309 	movw	r3, #265	@ 0x109
 80017a6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80017a8:	2301      	movs	r3, #1
 80017aa:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017ac:	2300      	movs	r3, #0
 80017ae:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017b0:	2300      	movs	r3, #0
 80017b2:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80017b4:	f107 031c 	add.w	r3, r7, #28
 80017b8:	4619      	mov	r1, r3
 80017ba:	482b      	ldr	r0, [pc, #172]	@ (8001868 <MX_GPIO_Init+0x24c>)
 80017bc:	f001 fe0c 	bl	80033d8 <HAL_GPIO_Init>

  /*Configure GPIO pins : TC_CS1_Pin TC_CS2_Pin */
  GPIO_InitStruct.Pin = TC_CS1_Pin|TC_CS2_Pin;
 80017c0:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 80017c4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80017c6:	2301      	movs	r3, #1
 80017c8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017ca:	2300      	movs	r3, #0
 80017cc:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017ce:	2300      	movs	r3, #0
 80017d0:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80017d2:	f107 031c 	add.w	r3, r7, #28
 80017d6:	4619      	mov	r1, r3
 80017d8:	4824      	ldr	r0, [pc, #144]	@ (800186c <MX_GPIO_Init+0x250>)
 80017da:	f001 fdfd 	bl	80033d8 <HAL_GPIO_Init>

  /*Configure GPIO pins : VLV_EN3_Pin SPI1_CS_Pin */
  GPIO_InitStruct.Pin = VLV_EN3_Pin|SPI1_CS_Pin;
 80017de:	f44f 63a0 	mov.w	r3, #1280	@ 0x500
 80017e2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80017e4:	2301      	movs	r3, #1
 80017e6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017e8:	2300      	movs	r3, #0
 80017ea:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017ec:	2300      	movs	r3, #0
 80017ee:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80017f0:	f107 031c 	add.w	r3, r7, #28
 80017f4:	4619      	mov	r1, r3
 80017f6:	481e      	ldr	r0, [pc, #120]	@ (8001870 <MX_GPIO_Init+0x254>)
 80017f8:	f001 fdee 	bl	80033d8 <HAL_GPIO_Init>

  /*Configure GPIO pins : BUFF_CLR_Pin BUFF_CLK_Pin VLV_CTRL_Pin */
  GPIO_InitStruct.Pin = BUFF_CLR_Pin|BUFF_CLK_Pin|VLV_CTRL_Pin;
 80017fc:	f44f 4306 	mov.w	r3, #34304	@ 0x8600
 8001800:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001802:	2301      	movs	r3, #1
 8001804:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001806:	2300      	movs	r3, #0
 8001808:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800180a:	2303      	movs	r3, #3
 800180c:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800180e:	f107 031c 	add.w	r3, r7, #28
 8001812:	4619      	mov	r1, r3
 8001814:	4814      	ldr	r0, [pc, #80]	@ (8001868 <MX_GPIO_Init+0x24c>)
 8001816:	f001 fddf 	bl	80033d8 <HAL_GPIO_Init>

  /*Configure GPIO pins : BUZZ_Pin LED_RED_Pin */
  GPIO_InitStruct.Pin = BUZZ_Pin|LED_RED_Pin;
 800181a:	f44f 7340 	mov.w	r3, #768	@ 0x300
 800181e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001820:	2301      	movs	r3, #1
 8001822:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001824:	2300      	movs	r3, #0
 8001826:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001828:	2300      	movs	r3, #0
 800182a:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800182c:	f107 031c 	add.w	r3, r7, #28
 8001830:	4619      	mov	r1, r3
 8001832:	4810      	ldr	r0, [pc, #64]	@ (8001874 <MX_GPIO_Init+0x258>)
 8001834:	f001 fdd0 	bl	80033d8 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED_BLUE_Pin LED_GREEN_Pin */
  GPIO_InitStruct.Pin = LED_BLUE_Pin|LED_GREEN_Pin;
 8001838:	2303      	movs	r3, #3
 800183a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800183c:	2301      	movs	r3, #1
 800183e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001840:	2300      	movs	r3, #0
 8001842:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001844:	2300      	movs	r3, #0
 8001846:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001848:	f107 031c 	add.w	r3, r7, #28
 800184c:	4619      	mov	r1, r3
 800184e:	480a      	ldr	r0, [pc, #40]	@ (8001878 <MX_GPIO_Init+0x25c>)
 8001850:	f001 fdc2 	bl	80033d8 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001854:	bf00      	nop
 8001856:	3730      	adds	r7, #48	@ 0x30
 8001858:	46bd      	mov	sp, r7
 800185a:	bd80      	pop	{r7, pc}
 800185c:	58024400 	.word	0x58024400
 8001860:	58021400 	.word	0x58021400
 8001864:	58020800 	.word	0x58020800
 8001868:	58020000 	.word	0x58020000
 800186c:	58020c00 	.word	0x58020c00
 8001870:	58021800 	.word	0x58021800
 8001874:	58020400 	.word	0x58020400
 8001878:	58021000 	.word	0x58021000

0800187c <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 800187c:	b580      	push	{r7, lr}
 800187e:	b08c      	sub	sp, #48	@ 0x30
 8001880:	af00      	add	r7, sp, #0
 8001882:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
    MS5611 baro = {0};
 8001884:	f107 0318 	add.w	r3, r7, #24
 8001888:	2200      	movs	r2, #0
 800188a:	601a      	str	r2, [r3, #0]
 800188c:	605a      	str	r2, [r3, #4]
 800188e:	609a      	str	r2, [r3, #8]
 8001890:	60da      	str	r2, [r3, #12]
 8001892:	611a      	str	r2, [r3, #16]
 8001894:	615a      	str	r2, [r3, #20]
	baro.hspi = &hspi6;
 8001896:	4b17      	ldr	r3, [pc, #92]	@ (80018f4 <StartDefaultTask+0x78>)
 8001898:	61bb      	str	r3, [r7, #24]
	baro.CS_GPIO_Pin = BAR2_CS_Pin;
 800189a:	2308      	movs	r3, #8
 800189c:	84bb      	strh	r3, [r7, #36]	@ 0x24
	baro.CS_GPIO_Port = BAR2_CS_GPIO_Port;
 800189e:	4b16      	ldr	r3, [pc, #88]	@ (80018f8 <StartDefaultTask+0x7c>)
 80018a0:	623b      	str	r3, [r7, #32]
	baro.SPI_TIMEOUT = 1000;
 80018a2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80018a6:	83bb      	strh	r3, [r7, #28]
	baro.pres_offset = 0;
 80018a8:	f04f 0300 	mov.w	r3, #0
 80018ac:	62bb      	str	r3, [r7, #40]	@ 0x28
	baro.alt_offset = 0;
 80018ae:	f04f 0300 	mov.w	r3, #0
 80018b2:	62fb      	str	r3, [r7, #44]	@ 0x2c

	MS5611_PROM_t prom = {0};
 80018b4:	f107 030c 	add.w	r3, r7, #12
 80018b8:	2200      	movs	r2, #0
 80018ba:	601a      	str	r2, [r3, #0]
 80018bc:	605a      	str	r2, [r3, #4]
 80018be:	609a      	str	r2, [r3, #8]
	float pres = 0;
 80018c0:	f04f 0300 	mov.w	r3, #0
 80018c4:	60bb      	str	r3, [r7, #8]

	MS5611_Reset(&baro);
 80018c6:	f107 0318 	add.w	r3, r7, #24
 80018ca:	4618      	mov	r0, r3
 80018cc:	f7ff f91a 	bl	8000b04 <MS5611_Reset>
	MS5611_readPROM(&baro, &prom);
 80018d0:	f107 020c 	add.w	r2, r7, #12
 80018d4:	f107 0318 	add.w	r3, r7, #24
 80018d8:	4611      	mov	r1, r2
 80018da:	4618      	mov	r0, r3
 80018dc:	f7ff f927 	bl	8000b2e <MS5611_readPROM>

	for (;;) {
		MS5611_getPres(&baro, &pres, OSR_256);
 80018e0:	f107 0108 	add.w	r1, r7, #8
 80018e4:	f107 0318 	add.w	r3, r7, #24
 80018e8:	2200      	movs	r2, #0
 80018ea:	4618      	mov	r0, r3
 80018ec:	f7ff fa5c 	bl	8000da8 <MS5611_getPres>
 80018f0:	e7f6      	b.n	80018e0 <StartDefaultTask+0x64>
 80018f2:	bf00      	nop
 80018f4:	24000454 	.word	0x24000454
 80018f8:	58020000 	.word	0x58020000

080018fc <MPU_Config>:
}

 /* MPU Configuration */

void MPU_Config(void)
{
 80018fc:	b580      	push	{r7, lr}
 80018fe:	b084      	sub	sp, #16
 8001900:	af00      	add	r7, sp, #0
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 8001902:	463b      	mov	r3, r7
 8001904:	2200      	movs	r2, #0
 8001906:	601a      	str	r2, [r3, #0]
 8001908:	605a      	str	r2, [r3, #4]
 800190a:	609a      	str	r2, [r3, #8]
 800190c:	60da      	str	r2, [r3, #12]

  /* Disables the MPU */
  HAL_MPU_Disable();
 800190e:	f000 ff87 	bl	8002820 <HAL_MPU_Disable>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8001912:	2301      	movs	r3, #1
 8001914:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 8001916:	2300      	movs	r3, #0
 8001918:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x0;
 800191a:	2300      	movs	r3, #0
 800191c:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_4GB;
 800191e:	231f      	movs	r3, #31
 8001920:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x87;
 8001922:	2387      	movs	r3, #135	@ 0x87
 8001924:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 8001926:	2300      	movs	r3, #0
 8001928:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_NO_ACCESS;
 800192a:	2300      	movs	r3, #0
 800192c:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 800192e:	2301      	movs	r3, #1
 8001930:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 8001932:	2301      	movs	r3, #1
 8001934:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 8001936:	2300      	movs	r3, #0
 8001938:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 800193a:	2300      	movs	r3, #0
 800193c:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 800193e:	463b      	mov	r3, r7
 8001940:	4618      	mov	r0, r3
 8001942:	f000 ffa5 	bl	8002890 <HAL_MPU_ConfigRegion>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Number = MPU_REGION_NUMBER1;
 8001946:	2301      	movs	r3, #1
 8001948:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x30020000;
 800194a:	4b13      	ldr	r3, [pc, #76]	@ (8001998 <MPU_Config+0x9c>)
 800194c:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_128KB;
 800194e:	2310      	movs	r3, #16
 8001950:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x0;
 8001952:	2300      	movs	r3, #0
 8001954:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL1;
 8001956:	2301      	movs	r3, #1
 8001958:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_FULL_ACCESS;
 800195a:	2303      	movs	r3, #3
 800195c:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.IsShareable = MPU_ACCESS_NOT_SHAREABLE;
 800195e:	2300      	movs	r3, #0
 8001960:	737b      	strb	r3, [r7, #13]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8001962:	463b      	mov	r3, r7
 8001964:	4618      	mov	r0, r3
 8001966:	f000 ff93 	bl	8002890 <HAL_MPU_ConfigRegion>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Number = MPU_REGION_NUMBER2;
 800196a:	2302      	movs	r3, #2
 800196c:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x30040000;
 800196e:	4b0b      	ldr	r3, [pc, #44]	@ (800199c <MPU_Config+0xa0>)
 8001970:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_512B;
 8001972:	2308      	movs	r3, #8
 8001974:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 8001976:	2300      	movs	r3, #0
 8001978:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 800197a:	2301      	movs	r3, #1
 800197c:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_BUFFERABLE;
 800197e:	2301      	movs	r3, #1
 8001980:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8001982:	463b      	mov	r3, r7
 8001984:	4618      	mov	r0, r3
 8001986:	f000 ff83 	bl	8002890 <HAL_MPU_ConfigRegion>
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 800198a:	2004      	movs	r0, #4
 800198c:	f000 ff60 	bl	8002850 <HAL_MPU_Enable>

}
 8001990:	bf00      	nop
 8001992:	3710      	adds	r7, #16
 8001994:	46bd      	mov	sp, r7
 8001996:	bd80      	pop	{r7, pc}
 8001998:	30020000 	.word	0x30020000
 800199c:	30040000 	.word	0x30040000

080019a0 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80019a0:	b580      	push	{r7, lr}
 80019a2:	b082      	sub	sp, #8
 80019a4:	af00      	add	r7, sp, #0
 80019a6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	4a04      	ldr	r2, [pc, #16]	@ (80019c0 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80019ae:	4293      	cmp	r3, r2
 80019b0:	d101      	bne.n	80019b6 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80019b2:	f000 fe21 	bl	80025f8 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80019b6:	bf00      	nop
 80019b8:	3708      	adds	r7, #8
 80019ba:	46bd      	mov	sp, r7
 80019bc:	bd80      	pop	{r7, pc}
 80019be:	bf00      	nop
 80019c0:	40001000 	.word	0x40001000

080019c4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80019c4:	b480      	push	{r7}
 80019c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  //__disable_irq();
  while (1)
 80019c8:	bf00      	nop
 80019ca:	e7fd      	b.n	80019c8 <Error_Handler+0x4>

080019cc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80019cc:	b580      	push	{r7, lr}
 80019ce:	b082      	sub	sp, #8
 80019d0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80019d2:	4b0c      	ldr	r3, [pc, #48]	@ (8001a04 <HAL_MspInit+0x38>)
 80019d4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80019d8:	4a0a      	ldr	r2, [pc, #40]	@ (8001a04 <HAL_MspInit+0x38>)
 80019da:	f043 0302 	orr.w	r3, r3, #2
 80019de:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 80019e2:	4b08      	ldr	r3, [pc, #32]	@ (8001a04 <HAL_MspInit+0x38>)
 80019e4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80019e8:	f003 0302 	and.w	r3, r3, #2
 80019ec:	607b      	str	r3, [r7, #4]
 80019ee:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80019f0:	2200      	movs	r2, #0
 80019f2:	210f      	movs	r1, #15
 80019f4:	f06f 0001 	mvn.w	r0, #1
 80019f8:	f000 feea 	bl	80027d0 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80019fc:	bf00      	nop
 80019fe:	3708      	adds	r7, #8
 8001a00:	46bd      	mov	sp, r7
 8001a02:	bd80      	pop	{r7, pc}
 8001a04:	58024400 	.word	0x58024400

08001a08 <HAL_ETH_MspInit>:
* This function configures the hardware resources used in this example
* @param heth: ETH handle pointer
* @retval None
*/
void HAL_ETH_MspInit(ETH_HandleTypeDef* heth)
{
 8001a08:	b580      	push	{r7, lr}
 8001a0a:	b08e      	sub	sp, #56	@ 0x38
 8001a0c:	af00      	add	r7, sp, #0
 8001a0e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a10:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001a14:	2200      	movs	r2, #0
 8001a16:	601a      	str	r2, [r3, #0]
 8001a18:	605a      	str	r2, [r3, #4]
 8001a1a:	609a      	str	r2, [r3, #8]
 8001a1c:	60da      	str	r2, [r3, #12]
 8001a1e:	611a      	str	r2, [r3, #16]
  if(heth->Instance==ETH)
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	681b      	ldr	r3, [r3, #0]
 8001a24:	4a4d      	ldr	r2, [pc, #308]	@ (8001b5c <HAL_ETH_MspInit+0x154>)
 8001a26:	4293      	cmp	r3, r2
 8001a28:	f040 8093 	bne.w	8001b52 <HAL_ETH_MspInit+0x14a>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ETH1MAC_CLK_ENABLE();
 8001a2c:	4b4c      	ldr	r3, [pc, #304]	@ (8001b60 <HAL_ETH_MspInit+0x158>)
 8001a2e:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8001a32:	4a4b      	ldr	r2, [pc, #300]	@ (8001b60 <HAL_ETH_MspInit+0x158>)
 8001a34:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001a38:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8001a3c:	4b48      	ldr	r3, [pc, #288]	@ (8001b60 <HAL_ETH_MspInit+0x158>)
 8001a3e:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8001a42:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8001a46:	623b      	str	r3, [r7, #32]
 8001a48:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_ETH1TX_CLK_ENABLE();
 8001a4a:	4b45      	ldr	r3, [pc, #276]	@ (8001b60 <HAL_ETH_MspInit+0x158>)
 8001a4c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8001a50:	4a43      	ldr	r2, [pc, #268]	@ (8001b60 <HAL_ETH_MspInit+0x158>)
 8001a52:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001a56:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8001a5a:	4b41      	ldr	r3, [pc, #260]	@ (8001b60 <HAL_ETH_MspInit+0x158>)
 8001a5c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8001a60:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001a64:	61fb      	str	r3, [r7, #28]
 8001a66:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_ETH1RX_CLK_ENABLE();
 8001a68:	4b3d      	ldr	r3, [pc, #244]	@ (8001b60 <HAL_ETH_MspInit+0x158>)
 8001a6a:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8001a6e:	4a3c      	ldr	r2, [pc, #240]	@ (8001b60 <HAL_ETH_MspInit+0x158>)
 8001a70:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001a74:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8001a78:	4b39      	ldr	r3, [pc, #228]	@ (8001b60 <HAL_ETH_MspInit+0x158>)
 8001a7a:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8001a7e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001a82:	61bb      	str	r3, [r7, #24]
 8001a84:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001a86:	4b36      	ldr	r3, [pc, #216]	@ (8001b60 <HAL_ETH_MspInit+0x158>)
 8001a88:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001a8c:	4a34      	ldr	r2, [pc, #208]	@ (8001b60 <HAL_ETH_MspInit+0x158>)
 8001a8e:	f043 0304 	orr.w	r3, r3, #4
 8001a92:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001a96:	4b32      	ldr	r3, [pc, #200]	@ (8001b60 <HAL_ETH_MspInit+0x158>)
 8001a98:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001a9c:	f003 0304 	and.w	r3, r3, #4
 8001aa0:	617b      	str	r3, [r7, #20]
 8001aa2:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001aa4:	4b2e      	ldr	r3, [pc, #184]	@ (8001b60 <HAL_ETH_MspInit+0x158>)
 8001aa6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001aaa:	4a2d      	ldr	r2, [pc, #180]	@ (8001b60 <HAL_ETH_MspInit+0x158>)
 8001aac:	f043 0301 	orr.w	r3, r3, #1
 8001ab0:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001ab4:	4b2a      	ldr	r3, [pc, #168]	@ (8001b60 <HAL_ETH_MspInit+0x158>)
 8001ab6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001aba:	f003 0301 	and.w	r3, r3, #1
 8001abe:	613b      	str	r3, [r7, #16]
 8001ac0:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001ac2:	4b27      	ldr	r3, [pc, #156]	@ (8001b60 <HAL_ETH_MspInit+0x158>)
 8001ac4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001ac8:	4a25      	ldr	r2, [pc, #148]	@ (8001b60 <HAL_ETH_MspInit+0x158>)
 8001aca:	f043 0302 	orr.w	r3, r3, #2
 8001ace:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001ad2:	4b23      	ldr	r3, [pc, #140]	@ (8001b60 <HAL_ETH_MspInit+0x158>)
 8001ad4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001ad8:	f003 0302 	and.w	r3, r3, #2
 8001adc:	60fb      	str	r3, [r7, #12]
 8001ade:	68fb      	ldr	r3, [r7, #12]
    PC5     ------> ETH_RXD1
    PB11     ------> ETH_TX_EN
    PB12     ------> ETH_TXD0
    PB13     ------> ETH_TXD1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 8001ae0:	2332      	movs	r3, #50	@ 0x32
 8001ae2:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ae4:	2302      	movs	r3, #2
 8001ae6:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ae8:	2300      	movs	r3, #0
 8001aea:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001aec:	2303      	movs	r3, #3
 8001aee:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001af0:	230b      	movs	r3, #11
 8001af2:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001af4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001af8:	4619      	mov	r1, r3
 8001afa:	481a      	ldr	r0, [pc, #104]	@ (8001b64 <HAL_ETH_MspInit+0x15c>)
 8001afc:	f001 fc6c 	bl	80033d8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_7;
 8001b00:	2386      	movs	r3, #134	@ 0x86
 8001b02:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b04:	2302      	movs	r3, #2
 8001b06:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b08:	2300      	movs	r3, #0
 8001b0a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b0c:	2303      	movs	r3, #3
 8001b0e:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001b10:	230b      	movs	r3, #11
 8001b12:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b14:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001b18:	4619      	mov	r1, r3
 8001b1a:	4813      	ldr	r0, [pc, #76]	@ (8001b68 <HAL_ETH_MspInit+0x160>)
 8001b1c:	f001 fc5c 	bl	80033d8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13;
 8001b20:	f44f 5360 	mov.w	r3, #14336	@ 0x3800
 8001b24:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b26:	2302      	movs	r3, #2
 8001b28:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b2a:	2300      	movs	r3, #0
 8001b2c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b2e:	2303      	movs	r3, #3
 8001b30:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001b32:	230b      	movs	r3, #11
 8001b34:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001b36:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001b3a:	4619      	mov	r1, r3
 8001b3c:	480b      	ldr	r0, [pc, #44]	@ (8001b6c <HAL_ETH_MspInit+0x164>)
 8001b3e:	f001 fc4b 	bl	80033d8 <HAL_GPIO_Init>

    /* ETH interrupt Init */
    HAL_NVIC_SetPriority(ETH_IRQn, 5, 0);
 8001b42:	2200      	movs	r2, #0
 8001b44:	2105      	movs	r1, #5
 8001b46:	203d      	movs	r0, #61	@ 0x3d
 8001b48:	f000 fe42 	bl	80027d0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ETH_IRQn);
 8001b4c:	203d      	movs	r0, #61	@ 0x3d
 8001b4e:	f000 fe59 	bl	8002804 <HAL_NVIC_EnableIRQ>

  /* USER CODE END ETH_MspInit 1 */

  }

}
 8001b52:	bf00      	nop
 8001b54:	3738      	adds	r7, #56	@ 0x38
 8001b56:	46bd      	mov	sp, r7
 8001b58:	bd80      	pop	{r7, pc}
 8001b5a:	bf00      	nop
 8001b5c:	40028000 	.word	0x40028000
 8001b60:	58024400 	.word	0x58024400
 8001b64:	58020800 	.word	0x58020800
 8001b68:	58020000 	.word	0x58020000
 8001b6c:	58020400 	.word	0x58020400

08001b70 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001b70:	b580      	push	{r7, lr}
 8001b72:	b0ba      	sub	sp, #232	@ 0xe8
 8001b74:	af00      	add	r7, sp, #0
 8001b76:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b78:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8001b7c:	2200      	movs	r2, #0
 8001b7e:	601a      	str	r2, [r3, #0]
 8001b80:	605a      	str	r2, [r3, #4]
 8001b82:	609a      	str	r2, [r3, #8]
 8001b84:	60da      	str	r2, [r3, #12]
 8001b86:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001b88:	f107 0318 	add.w	r3, r7, #24
 8001b8c:	22b8      	movs	r2, #184	@ 0xb8
 8001b8e:	2100      	movs	r1, #0
 8001b90:	4618      	mov	r0, r3
 8001b92:	f009 ff01 	bl	800b998 <memset>
  if(hi2c->Instance==I2C1)
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	681b      	ldr	r3, [r3, #0]
 8001b9a:	4a4d      	ldr	r2, [pc, #308]	@ (8001cd0 <HAL_I2C_MspInit+0x160>)
 8001b9c:	4293      	cmp	r3, r2
 8001b9e:	d146      	bne.n	8001c2e <HAL_I2C_MspInit+0xbe>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8001ba0:	f04f 0208 	mov.w	r2, #8
 8001ba4:	f04f 0300 	mov.w	r3, #0
 8001ba8:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C1235CLKSOURCE_D2PCLK1;
 8001bac:	2300      	movs	r3, #0
 8001bae:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001bb2:	f107 0318 	add.w	r3, r7, #24
 8001bb6:	4618      	mov	r0, r3
 8001bb8:	f002 ff06 	bl	80049c8 <HAL_RCCEx_PeriphCLKConfig>
 8001bbc:	4603      	mov	r3, r0
 8001bbe:	2b00      	cmp	r3, #0
 8001bc0:	d001      	beq.n	8001bc6 <HAL_I2C_MspInit+0x56>
    {
      Error_Handler();
 8001bc2:	f7ff feff 	bl	80019c4 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001bc6:	4b43      	ldr	r3, [pc, #268]	@ (8001cd4 <HAL_I2C_MspInit+0x164>)
 8001bc8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001bcc:	4a41      	ldr	r2, [pc, #260]	@ (8001cd4 <HAL_I2C_MspInit+0x164>)
 8001bce:	f043 0302 	orr.w	r3, r3, #2
 8001bd2:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001bd6:	4b3f      	ldr	r3, [pc, #252]	@ (8001cd4 <HAL_I2C_MspInit+0x164>)
 8001bd8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001bdc:	f003 0302 	and.w	r3, r3, #2
 8001be0:	617b      	str	r3, [r7, #20]
 8001be2:	697b      	ldr	r3, [r7, #20]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001be4:	23c0      	movs	r3, #192	@ 0xc0
 8001be6:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001bea:	2312      	movs	r3, #18
 8001bec:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bf0:	2300      	movs	r3, #0
 8001bf2:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001bf6:	2300      	movs	r3, #0
 8001bf8:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001bfc:	2304      	movs	r3, #4
 8001bfe:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001c02:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8001c06:	4619      	mov	r1, r3
 8001c08:	4833      	ldr	r0, [pc, #204]	@ (8001cd8 <HAL_I2C_MspInit+0x168>)
 8001c0a:	f001 fbe5 	bl	80033d8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001c0e:	4b31      	ldr	r3, [pc, #196]	@ (8001cd4 <HAL_I2C_MspInit+0x164>)
 8001c10:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001c14:	4a2f      	ldr	r2, [pc, #188]	@ (8001cd4 <HAL_I2C_MspInit+0x164>)
 8001c16:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001c1a:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8001c1e:	4b2d      	ldr	r3, [pc, #180]	@ (8001cd4 <HAL_I2C_MspInit+0x164>)
 8001c20:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001c24:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001c28:	613b      	str	r3, [r7, #16]
 8001c2a:	693b      	ldr	r3, [r7, #16]
  /* USER CODE BEGIN I2C5_MspInit 1 */

  /* USER CODE END I2C5_MspInit 1 */
  }

}
 8001c2c:	e04b      	b.n	8001cc6 <HAL_I2C_MspInit+0x156>
  else if(hi2c->Instance==I2C5)
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	4a2a      	ldr	r2, [pc, #168]	@ (8001cdc <HAL_I2C_MspInit+0x16c>)
 8001c34:	4293      	cmp	r3, r2
 8001c36:	d146      	bne.n	8001cc6 <HAL_I2C_MspInit+0x156>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C5;
 8001c38:	f04f 0208 	mov.w	r2, #8
 8001c3c:	f04f 0300 	mov.w	r3, #0
 8001c40:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C1235CLKSOURCE_D2PCLK1;
 8001c44:	2300      	movs	r3, #0
 8001c46:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001c4a:	f107 0318 	add.w	r3, r7, #24
 8001c4e:	4618      	mov	r0, r3
 8001c50:	f002 feba 	bl	80049c8 <HAL_RCCEx_PeriphCLKConfig>
 8001c54:	4603      	mov	r3, r0
 8001c56:	2b00      	cmp	r3, #0
 8001c58:	d001      	beq.n	8001c5e <HAL_I2C_MspInit+0xee>
      Error_Handler();
 8001c5a:	f7ff feb3 	bl	80019c4 <Error_Handler>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001c5e:	4b1d      	ldr	r3, [pc, #116]	@ (8001cd4 <HAL_I2C_MspInit+0x164>)
 8001c60:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001c64:	4a1b      	ldr	r2, [pc, #108]	@ (8001cd4 <HAL_I2C_MspInit+0x164>)
 8001c66:	f043 0304 	orr.w	r3, r3, #4
 8001c6a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001c6e:	4b19      	ldr	r3, [pc, #100]	@ (8001cd4 <HAL_I2C_MspInit+0x164>)
 8001c70:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001c74:	f003 0304 	and.w	r3, r3, #4
 8001c78:	60fb      	str	r3, [r7, #12]
 8001c7a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8001c7c:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8001c80:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001c84:	2312      	movs	r3, #18
 8001c86:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c8a:	2300      	movs	r3, #0
 8001c8c:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c90:	2300      	movs	r3, #0
 8001c92:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C5;
 8001c96:	2304      	movs	r3, #4
 8001c98:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001c9c:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8001ca0:	4619      	mov	r1, r3
 8001ca2:	480f      	ldr	r0, [pc, #60]	@ (8001ce0 <HAL_I2C_MspInit+0x170>)
 8001ca4:	f001 fb98 	bl	80033d8 <HAL_GPIO_Init>
    __HAL_RCC_I2C5_CLK_ENABLE();
 8001ca8:	4b0a      	ldr	r3, [pc, #40]	@ (8001cd4 <HAL_I2C_MspInit+0x164>)
 8001caa:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001cae:	4a09      	ldr	r2, [pc, #36]	@ (8001cd4 <HAL_I2C_MspInit+0x164>)
 8001cb0:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8001cb4:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8001cb8:	4b06      	ldr	r3, [pc, #24]	@ (8001cd4 <HAL_I2C_MspInit+0x164>)
 8001cba:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001cbe:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001cc2:	60bb      	str	r3, [r7, #8]
 8001cc4:	68bb      	ldr	r3, [r7, #8]
}
 8001cc6:	bf00      	nop
 8001cc8:	37e8      	adds	r7, #232	@ 0xe8
 8001cca:	46bd      	mov	sp, r7
 8001ccc:	bd80      	pop	{r7, pc}
 8001cce:	bf00      	nop
 8001cd0:	40005400 	.word	0x40005400
 8001cd4:	58024400 	.word	0x58024400
 8001cd8:	58020400 	.word	0x58020400
 8001cdc:	40006400 	.word	0x40006400
 8001ce0:	58020800 	.word	0x58020800

08001ce4 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8001ce4:	b580      	push	{r7, lr}
 8001ce6:	b0b0      	sub	sp, #192	@ 0xc0
 8001ce8:	af00      	add	r7, sp, #0
 8001cea:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001cec:	f107 0308 	add.w	r3, r7, #8
 8001cf0:	22b8      	movs	r2, #184	@ 0xb8
 8001cf2:	2100      	movs	r1, #0
 8001cf4:	4618      	mov	r0, r3
 8001cf6:	f009 fe4f 	bl	800b998 <memset>
  if(hrtc->Instance==RTC)
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	4a10      	ldr	r2, [pc, #64]	@ (8001d40 <HAL_RTC_MspInit+0x5c>)
 8001d00:	4293      	cmp	r3, r2
 8001d02:	d119      	bne.n	8001d38 <HAL_RTC_MspInit+0x54>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8001d04:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 8001d08:	f04f 0300 	mov.w	r3, #0
 8001d0c:	e9c7 2302 	strd	r2, r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8001d10:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001d14:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001d18:	f107 0308 	add.w	r3, r7, #8
 8001d1c:	4618      	mov	r0, r3
 8001d1e:	f002 fe53 	bl	80049c8 <HAL_RCCEx_PeriphCLKConfig>
 8001d22:	4603      	mov	r3, r0
 8001d24:	2b00      	cmp	r3, #0
 8001d26:	d001      	beq.n	8001d2c <HAL_RTC_MspInit+0x48>
    {
      Error_Handler();
 8001d28:	f7ff fe4c 	bl	80019c4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8001d2c:	4b05      	ldr	r3, [pc, #20]	@ (8001d44 <HAL_RTC_MspInit+0x60>)
 8001d2e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001d30:	4a04      	ldr	r2, [pc, #16]	@ (8001d44 <HAL_RTC_MspInit+0x60>)
 8001d32:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001d36:	6713      	str	r3, [r2, #112]	@ 0x70

  /* USER CODE END RTC_MspInit 1 */

  }

}
 8001d38:	bf00      	nop
 8001d3a:	37c0      	adds	r7, #192	@ 0xc0
 8001d3c:	46bd      	mov	sp, r7
 8001d3e:	bd80      	pop	{r7, pc}
 8001d40:	58004000 	.word	0x58004000
 8001d44:	58024400 	.word	0x58024400

08001d48 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001d48:	b580      	push	{r7, lr}
 8001d4a:	b0c4      	sub	sp, #272	@ 0x110
 8001d4c:	af00      	add	r7, sp, #0
 8001d4e:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8001d52:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8001d56:	6018      	str	r0, [r3, #0]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d58:	f107 03fc 	add.w	r3, r7, #252	@ 0xfc
 8001d5c:	2200      	movs	r2, #0
 8001d5e:	601a      	str	r2, [r3, #0]
 8001d60:	605a      	str	r2, [r3, #4]
 8001d62:	609a      	str	r2, [r3, #8]
 8001d64:	60da      	str	r2, [r3, #12]
 8001d66:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001d68:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8001d6c:	22b8      	movs	r2, #184	@ 0xb8
 8001d6e:	2100      	movs	r1, #0
 8001d70:	4618      	mov	r0, r3
 8001d72:	f009 fe11 	bl	800b998 <memset>
  if(hspi->Instance==SPI1)
 8001d76:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8001d7a:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	4ac3      	ldr	r2, [pc, #780]	@ (8002090 <HAL_SPI_MspInit+0x348>)
 8001d84:	4293      	cmp	r3, r2
 8001d86:	d16b      	bne.n	8001e60 <HAL_SPI_MspInit+0x118>

  /* USER CODE END SPI1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI1;
 8001d88:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8001d8c:	f04f 0300 	mov.w	r3, #0
 8001d90:	e9c7 2310 	strd	r2, r3, [r7, #64]	@ 0x40
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL;
 8001d94:	2300      	movs	r3, #0
 8001d96:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001d9a:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8001d9e:	4618      	mov	r0, r3
 8001da0:	f002 fe12 	bl	80049c8 <HAL_RCCEx_PeriphCLKConfig>
 8001da4:	4603      	mov	r3, r0
 8001da6:	2b00      	cmp	r3, #0
 8001da8:	d001      	beq.n	8001dae <HAL_SPI_MspInit+0x66>
    {
      Error_Handler();
 8001daa:	f7ff fe0b 	bl	80019c4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001dae:	4bb9      	ldr	r3, [pc, #740]	@ (8002094 <HAL_SPI_MspInit+0x34c>)
 8001db0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001db4:	4ab7      	ldr	r2, [pc, #732]	@ (8002094 <HAL_SPI_MspInit+0x34c>)
 8001db6:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001dba:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8001dbe:	4bb5      	ldr	r3, [pc, #724]	@ (8002094 <HAL_SPI_MspInit+0x34c>)
 8001dc0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001dc4:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001dc8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8001dca:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001dcc:	4bb1      	ldr	r3, [pc, #708]	@ (8002094 <HAL_SPI_MspInit+0x34c>)
 8001dce:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001dd2:	4ab0      	ldr	r2, [pc, #704]	@ (8002094 <HAL_SPI_MspInit+0x34c>)
 8001dd4:	f043 0308 	orr.w	r3, r3, #8
 8001dd8:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001ddc:	4bad      	ldr	r3, [pc, #692]	@ (8002094 <HAL_SPI_MspInit+0x34c>)
 8001dde:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001de2:	f003 0308 	and.w	r3, r3, #8
 8001de6:	63bb      	str	r3, [r7, #56]	@ 0x38
 8001de8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8001dea:	4baa      	ldr	r3, [pc, #680]	@ (8002094 <HAL_SPI_MspInit+0x34c>)
 8001dec:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001df0:	4aa8      	ldr	r2, [pc, #672]	@ (8002094 <HAL_SPI_MspInit+0x34c>)
 8001df2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001df6:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001dfa:	4ba6      	ldr	r3, [pc, #664]	@ (8002094 <HAL_SPI_MspInit+0x34c>)
 8001dfc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001e00:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001e04:	637b      	str	r3, [r7, #52]	@ 0x34
 8001e06:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
    /**SPI1 GPIO Configuration
    PD7     ------> SPI1_MOSI
    PG9     ------> SPI1_MISO
    PG11     ------> SPI1_SCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8001e08:	2380      	movs	r3, #128	@ 0x80
 8001e0a:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e0e:	2302      	movs	r3, #2
 8001e10:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e14:	2300      	movs	r3, #0
 8001e16:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e1a:	2300      	movs	r3, #0
 8001e1c:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001e20:	2305      	movs	r3, #5
 8001e22:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001e26:	f107 03fc 	add.w	r3, r7, #252	@ 0xfc
 8001e2a:	4619      	mov	r1, r3
 8001e2c:	489a      	ldr	r0, [pc, #616]	@ (8002098 <HAL_SPI_MspInit+0x350>)
 8001e2e:	f001 fad3 	bl	80033d8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_11;
 8001e32:	f44f 6320 	mov.w	r3, #2560	@ 0xa00
 8001e36:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e3a:	2302      	movs	r3, #2
 8001e3c:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e40:	2300      	movs	r3, #0
 8001e42:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e46:	2300      	movs	r3, #0
 8001e48:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001e4c:	2305      	movs	r3, #5
 8001e4e:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001e52:	f107 03fc 	add.w	r3, r7, #252	@ 0xfc
 8001e56:	4619      	mov	r1, r3
 8001e58:	4890      	ldr	r0, [pc, #576]	@ (800209c <HAL_SPI_MspInit+0x354>)
 8001e5a:	f001 fabd 	bl	80033d8 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI6_MspInit 1 */

  /* USER CODE END SPI6_MspInit 1 */
  }

}
 8001e5e:	e1b1      	b.n	80021c4 <HAL_SPI_MspInit+0x47c>
  else if(hspi->Instance==SPI2)
 8001e60:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8001e64:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	4a8c      	ldr	r2, [pc, #560]	@ (80020a0 <HAL_SPI_MspInit+0x358>)
 8001e6e:	4293      	cmp	r3, r2
 8001e70:	d16b      	bne.n	8001f4a <HAL_SPI_MspInit+0x202>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI2;
 8001e72:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8001e76:	f04f 0300 	mov.w	r3, #0
 8001e7a:	e9c7 2310 	strd	r2, r3, [r7, #64]	@ 0x40
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL;
 8001e7e:	2300      	movs	r3, #0
 8001e80:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001e84:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8001e88:	4618      	mov	r0, r3
 8001e8a:	f002 fd9d 	bl	80049c8 <HAL_RCCEx_PeriphCLKConfig>
 8001e8e:	4603      	mov	r3, r0
 8001e90:	2b00      	cmp	r3, #0
 8001e92:	d001      	beq.n	8001e98 <HAL_SPI_MspInit+0x150>
      Error_Handler();
 8001e94:	f7ff fd96 	bl	80019c4 <Error_Handler>
    __HAL_RCC_SPI2_CLK_ENABLE();
 8001e98:	4b7e      	ldr	r3, [pc, #504]	@ (8002094 <HAL_SPI_MspInit+0x34c>)
 8001e9a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001e9e:	4a7d      	ldr	r2, [pc, #500]	@ (8002094 <HAL_SPI_MspInit+0x34c>)
 8001ea0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001ea4:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8001ea8:	4b7a      	ldr	r3, [pc, #488]	@ (8002094 <HAL_SPI_MspInit+0x34c>)
 8001eaa:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001eae:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001eb2:	633b      	str	r3, [r7, #48]	@ 0x30
 8001eb4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001eb6:	4b77      	ldr	r3, [pc, #476]	@ (8002094 <HAL_SPI_MspInit+0x34c>)
 8001eb8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001ebc:	4a75      	ldr	r2, [pc, #468]	@ (8002094 <HAL_SPI_MspInit+0x34c>)
 8001ebe:	f043 0304 	orr.w	r3, r3, #4
 8001ec2:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001ec6:	4b73      	ldr	r3, [pc, #460]	@ (8002094 <HAL_SPI_MspInit+0x34c>)
 8001ec8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001ecc:	f003 0304 	and.w	r3, r3, #4
 8001ed0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001ed2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001ed4:	4b6f      	ldr	r3, [pc, #444]	@ (8002094 <HAL_SPI_MspInit+0x34c>)
 8001ed6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001eda:	4a6e      	ldr	r2, [pc, #440]	@ (8002094 <HAL_SPI_MspInit+0x34c>)
 8001edc:	f043 0302 	orr.w	r3, r3, #2
 8001ee0:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001ee4:	4b6b      	ldr	r3, [pc, #428]	@ (8002094 <HAL_SPI_MspInit+0x34c>)
 8001ee6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001eea:	f003 0302 	and.w	r3, r3, #2
 8001eee:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001ef0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001ef2:	2308      	movs	r3, #8
 8001ef4:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ef8:	2302      	movs	r3, #2
 8001efa:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001efe:	2300      	movs	r3, #0
 8001f00:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f04:	2300      	movs	r3, #0
 8001f06:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001f0a:	2305      	movs	r3, #5
 8001f0c:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001f10:	f107 03fc 	add.w	r3, r7, #252	@ 0xfc
 8001f14:	4619      	mov	r1, r3
 8001f16:	4863      	ldr	r0, [pc, #396]	@ (80020a4 <HAL_SPI_MspInit+0x35c>)
 8001f18:	f001 fa5e 	bl	80033d8 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_14;
 8001f1c:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 8001f20:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f24:	2302      	movs	r3, #2
 8001f26:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f2a:	2300      	movs	r3, #0
 8001f2c:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f30:	2300      	movs	r3, #0
 8001f32:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001f36:	2305      	movs	r3, #5
 8001f38:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001f3c:	f107 03fc 	add.w	r3, r7, #252	@ 0xfc
 8001f40:	4619      	mov	r1, r3
 8001f42:	4859      	ldr	r0, [pc, #356]	@ (80020a8 <HAL_SPI_MspInit+0x360>)
 8001f44:	f001 fa48 	bl	80033d8 <HAL_GPIO_Init>
}
 8001f48:	e13c      	b.n	80021c4 <HAL_SPI_MspInit+0x47c>
  else if(hspi->Instance==SPI4)
 8001f4a:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8001f4e:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	4a55      	ldr	r2, [pc, #340]	@ (80020ac <HAL_SPI_MspInit+0x364>)
 8001f58:	4293      	cmp	r3, r2
 8001f5a:	d147      	bne.n	8001fec <HAL_SPI_MspInit+0x2a4>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI4;
 8001f5c:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001f60:	f04f 0300 	mov.w	r3, #0
 8001f64:	e9c7 2310 	strd	r2, r3, [r7, #64]	@ 0x40
    PeriphClkInitStruct.Spi45ClockSelection = RCC_SPI45CLKSOURCE_D2PCLK1;
 8001f68:	2300      	movs	r3, #0
 8001f6a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001f6e:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8001f72:	4618      	mov	r0, r3
 8001f74:	f002 fd28 	bl	80049c8 <HAL_RCCEx_PeriphCLKConfig>
 8001f78:	4603      	mov	r3, r0
 8001f7a:	2b00      	cmp	r3, #0
 8001f7c:	d001      	beq.n	8001f82 <HAL_SPI_MspInit+0x23a>
      Error_Handler();
 8001f7e:	f7ff fd21 	bl	80019c4 <Error_Handler>
    __HAL_RCC_SPI4_CLK_ENABLE();
 8001f82:	4b44      	ldr	r3, [pc, #272]	@ (8002094 <HAL_SPI_MspInit+0x34c>)
 8001f84:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001f88:	4a42      	ldr	r2, [pc, #264]	@ (8002094 <HAL_SPI_MspInit+0x34c>)
 8001f8a:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8001f8e:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8001f92:	4b40      	ldr	r3, [pc, #256]	@ (8002094 <HAL_SPI_MspInit+0x34c>)
 8001f94:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001f98:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001f9c:	627b      	str	r3, [r7, #36]	@ 0x24
 8001f9e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001fa0:	4b3c      	ldr	r3, [pc, #240]	@ (8002094 <HAL_SPI_MspInit+0x34c>)
 8001fa2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001fa6:	4a3b      	ldr	r2, [pc, #236]	@ (8002094 <HAL_SPI_MspInit+0x34c>)
 8001fa8:	f043 0310 	orr.w	r3, r3, #16
 8001fac:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001fb0:	4b38      	ldr	r3, [pc, #224]	@ (8002094 <HAL_SPI_MspInit+0x34c>)
 8001fb2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001fb6:	f003 0310 	and.w	r3, r3, #16
 8001fba:	623b      	str	r3, [r7, #32]
 8001fbc:	6a3b      	ldr	r3, [r7, #32]
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_11|GPIO_PIN_12;
 8001fbe:	f44f 53c3 	mov.w	r3, #6240	@ 0x1860
 8001fc2:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001fc6:	2302      	movs	r3, #2
 8001fc8:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fcc:	2300      	movs	r3, #0
 8001fce:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001fd2:	2300      	movs	r3, #0
 8001fd4:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI4;
 8001fd8:	2305      	movs	r3, #5
 8001fda:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001fde:	f107 03fc 	add.w	r3, r7, #252	@ 0xfc
 8001fe2:	4619      	mov	r1, r3
 8001fe4:	4832      	ldr	r0, [pc, #200]	@ (80020b0 <HAL_SPI_MspInit+0x368>)
 8001fe6:	f001 f9f7 	bl	80033d8 <HAL_GPIO_Init>
}
 8001fea:	e0eb      	b.n	80021c4 <HAL_SPI_MspInit+0x47c>
  else if(hspi->Instance==SPI5)
 8001fec:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8001ff0:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	4a2e      	ldr	r2, [pc, #184]	@ (80020b4 <HAL_SPI_MspInit+0x36c>)
 8001ffa:	4293      	cmp	r3, r2
 8001ffc:	d15e      	bne.n	80020bc <HAL_SPI_MspInit+0x374>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI5;
 8001ffe:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002002:	f04f 0300 	mov.w	r3, #0
 8002006:	e9c7 2310 	strd	r2, r3, [r7, #64]	@ 0x40
    PeriphClkInitStruct.Spi45ClockSelection = RCC_SPI45CLKSOURCE_D2PCLK1;
 800200a:	2300      	movs	r3, #0
 800200c:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002010:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8002014:	4618      	mov	r0, r3
 8002016:	f002 fcd7 	bl	80049c8 <HAL_RCCEx_PeriphCLKConfig>
 800201a:	4603      	mov	r3, r0
 800201c:	2b00      	cmp	r3, #0
 800201e:	d001      	beq.n	8002024 <HAL_SPI_MspInit+0x2dc>
      Error_Handler();
 8002020:	f7ff fcd0 	bl	80019c4 <Error_Handler>
    __HAL_RCC_SPI5_CLK_ENABLE();
 8002024:	4b1b      	ldr	r3, [pc, #108]	@ (8002094 <HAL_SPI_MspInit+0x34c>)
 8002026:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800202a:	4a1a      	ldr	r2, [pc, #104]	@ (8002094 <HAL_SPI_MspInit+0x34c>)
 800202c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002030:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8002034:	4b17      	ldr	r3, [pc, #92]	@ (8002094 <HAL_SPI_MspInit+0x34c>)
 8002036:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800203a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800203e:	61fb      	str	r3, [r7, #28]
 8002040:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8002042:	4b14      	ldr	r3, [pc, #80]	@ (8002094 <HAL_SPI_MspInit+0x34c>)
 8002044:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002048:	4a12      	ldr	r2, [pc, #72]	@ (8002094 <HAL_SPI_MspInit+0x34c>)
 800204a:	f043 0320 	orr.w	r3, r3, #32
 800204e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002052:	4b10      	ldr	r3, [pc, #64]	@ (8002094 <HAL_SPI_MspInit+0x34c>)
 8002054:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002058:	f003 0320 	and.w	r3, r3, #32
 800205c:	61bb      	str	r3, [r7, #24]
 800205e:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
 8002060:	f44f 7360 	mov.w	r3, #896	@ 0x380
 8002064:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002068:	2302      	movs	r3, #2
 800206a:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800206e:	2300      	movs	r3, #0
 8002070:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002074:	2300      	movs	r3, #0
 8002076:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI5;
 800207a:	2305      	movs	r3, #5
 800207c:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8002080:	f107 03fc 	add.w	r3, r7, #252	@ 0xfc
 8002084:	4619      	mov	r1, r3
 8002086:	480c      	ldr	r0, [pc, #48]	@ (80020b8 <HAL_SPI_MspInit+0x370>)
 8002088:	f001 f9a6 	bl	80033d8 <HAL_GPIO_Init>
}
 800208c:	e09a      	b.n	80021c4 <HAL_SPI_MspInit+0x47c>
 800208e:	bf00      	nop
 8002090:	40013000 	.word	0x40013000
 8002094:	58024400 	.word	0x58024400
 8002098:	58020c00 	.word	0x58020c00
 800209c:	58021800 	.word	0x58021800
 80020a0:	40003800 	.word	0x40003800
 80020a4:	58020800 	.word	0x58020800
 80020a8:	58020400 	.word	0x58020400
 80020ac:	40013400 	.word	0x40013400
 80020b0:	58021000 	.word	0x58021000
 80020b4:	40015000 	.word	0x40015000
 80020b8:	58021400 	.word	0x58021400
  else if(hspi->Instance==SPI6)
 80020bc:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80020c0:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	4a41      	ldr	r2, [pc, #260]	@ (80021d0 <HAL_SPI_MspInit+0x488>)
 80020ca:	4293      	cmp	r3, r2
 80020cc:	d17a      	bne.n	80021c4 <HAL_SPI_MspInit+0x47c>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI6;
 80020ce:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80020d2:	f04f 0300 	mov.w	r3, #0
 80020d6:	e9c7 2310 	strd	r2, r3, [r7, #64]	@ 0x40
    PeriphClkInitStruct.Spi6ClockSelection = RCC_SPI6CLKSOURCE_D3PCLK1;
 80020da:	2300      	movs	r3, #0
 80020dc:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80020e0:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 80020e4:	4618      	mov	r0, r3
 80020e6:	f002 fc6f 	bl	80049c8 <HAL_RCCEx_PeriphCLKConfig>
 80020ea:	4603      	mov	r3, r0
 80020ec:	2b00      	cmp	r3, #0
 80020ee:	d001      	beq.n	80020f4 <HAL_SPI_MspInit+0x3ac>
      Error_Handler();
 80020f0:	f7ff fc68 	bl	80019c4 <Error_Handler>
    __HAL_RCC_SPI6_CLK_ENABLE();
 80020f4:	4b37      	ldr	r3, [pc, #220]	@ (80021d4 <HAL_SPI_MspInit+0x48c>)
 80020f6:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80020fa:	4a36      	ldr	r2, [pc, #216]	@ (80021d4 <HAL_SPI_MspInit+0x48c>)
 80020fc:	f043 0320 	orr.w	r3, r3, #32
 8002100:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8002104:	4b33      	ldr	r3, [pc, #204]	@ (80021d4 <HAL_SPI_MspInit+0x48c>)
 8002106:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800210a:	f003 0320 	and.w	r3, r3, #32
 800210e:	617b      	str	r3, [r7, #20]
 8002110:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002112:	4b30      	ldr	r3, [pc, #192]	@ (80021d4 <HAL_SPI_MspInit+0x48c>)
 8002114:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002118:	4a2e      	ldr	r2, [pc, #184]	@ (80021d4 <HAL_SPI_MspInit+0x48c>)
 800211a:	f043 0301 	orr.w	r3, r3, #1
 800211e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002122:	4b2c      	ldr	r3, [pc, #176]	@ (80021d4 <HAL_SPI_MspInit+0x48c>)
 8002124:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002128:	f003 0201 	and.w	r2, r3, #1
 800212c:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8002130:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8002134:	601a      	str	r2, [r3, #0]
 8002136:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800213a:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 800213e:	681b      	ldr	r3, [r3, #0]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8002140:	4b24      	ldr	r3, [pc, #144]	@ (80021d4 <HAL_SPI_MspInit+0x48c>)
 8002142:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002146:	4a23      	ldr	r2, [pc, #140]	@ (80021d4 <HAL_SPI_MspInit+0x48c>)
 8002148:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800214c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002150:	4b20      	ldr	r3, [pc, #128]	@ (80021d4 <HAL_SPI_MspInit+0x48c>)
 8002152:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002156:	f003 0240 	and.w	r2, r3, #64	@ 0x40
 800215a:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800215e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8002162:	601a      	str	r2, [r3, #0]
 8002164:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8002168:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800216c:	681b      	ldr	r3, [r3, #0]
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 800216e:	2360      	movs	r3, #96	@ 0x60
 8002170:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002174:	2302      	movs	r3, #2
 8002176:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800217a:	2300      	movs	r3, #0
 800217c:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002180:	2303      	movs	r3, #3
 8002182:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
    GPIO_InitStruct.Alternate = GPIO_AF8_SPI6;
 8002186:	2308      	movs	r3, #8
 8002188:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800218c:	f107 03fc 	add.w	r3, r7, #252	@ 0xfc
 8002190:	4619      	mov	r1, r3
 8002192:	4811      	ldr	r0, [pc, #68]	@ (80021d8 <HAL_SPI_MspInit+0x490>)
 8002194:	f001 f920 	bl	80033d8 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_14;
 8002198:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 800219c:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021a0:	2302      	movs	r3, #2
 80021a2:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021a6:	2300      	movs	r3, #0
 80021a8:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80021ac:	2303      	movs	r3, #3
 80021ae:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI6;
 80021b2:	2305      	movs	r3, #5
 80021b4:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80021b8:	f107 03fc 	add.w	r3, r7, #252	@ 0xfc
 80021bc:	4619      	mov	r1, r3
 80021be:	4807      	ldr	r0, [pc, #28]	@ (80021dc <HAL_SPI_MspInit+0x494>)
 80021c0:	f001 f90a 	bl	80033d8 <HAL_GPIO_Init>
}
 80021c4:	bf00      	nop
 80021c6:	f507 7788 	add.w	r7, r7, #272	@ 0x110
 80021ca:	46bd      	mov	sp, r7
 80021cc:	bd80      	pop	{r7, pc}
 80021ce:	bf00      	nop
 80021d0:	58001400 	.word	0x58001400
 80021d4:	58024400 	.word	0x58024400
 80021d8:	58020000 	.word	0x58020000
 80021dc:	58021800 	.word	0x58021800

080021e0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80021e0:	b580      	push	{r7, lr}
 80021e2:	b0b8      	sub	sp, #224	@ 0xe0
 80021e4:	af00      	add	r7, sp, #0
 80021e6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80021e8:	f107 03cc 	add.w	r3, r7, #204	@ 0xcc
 80021ec:	2200      	movs	r2, #0
 80021ee:	601a      	str	r2, [r3, #0]
 80021f0:	605a      	str	r2, [r3, #4]
 80021f2:	609a      	str	r2, [r3, #8]
 80021f4:	60da      	str	r2, [r3, #12]
 80021f6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80021f8:	f107 0310 	add.w	r3, r7, #16
 80021fc:	22b8      	movs	r2, #184	@ 0xb8
 80021fe:	2100      	movs	r1, #0
 8002200:	4618      	mov	r0, r3
 8002202:	f009 fbc9 	bl	800b998 <memset>
  if(huart->Instance==USART10)
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	4a31      	ldr	r2, [pc, #196]	@ (80022d0 <HAL_UART_MspInit+0xf0>)
 800220c:	4293      	cmp	r3, r2
 800220e:	d15a      	bne.n	80022c6 <HAL_UART_MspInit+0xe6>

  /* USER CODE END USART10_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART10;
 8002210:	f04f 0201 	mov.w	r2, #1
 8002214:	f04f 0300 	mov.w	r3, #0
 8002218:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Usart16ClockSelection = RCC_USART16910CLKSOURCE_D2PCLK2;
 800221c:	2300      	movs	r3, #0
 800221e:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002222:	f107 0310 	add.w	r3, r7, #16
 8002226:	4618      	mov	r0, r3
 8002228:	f002 fbce 	bl	80049c8 <HAL_RCCEx_PeriphCLKConfig>
 800222c:	4603      	mov	r3, r0
 800222e:	2b00      	cmp	r3, #0
 8002230:	d001      	beq.n	8002236 <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 8002232:	f7ff fbc7 	bl	80019c4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART10_CLK_ENABLE();
 8002236:	4b27      	ldr	r3, [pc, #156]	@ (80022d4 <HAL_UART_MspInit+0xf4>)
 8002238:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800223c:	4a25      	ldr	r2, [pc, #148]	@ (80022d4 <HAL_UART_MspInit+0xf4>)
 800223e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002242:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8002246:	4b23      	ldr	r3, [pc, #140]	@ (80022d4 <HAL_UART_MspInit+0xf4>)
 8002248:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800224c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002250:	60fb      	str	r3, [r7, #12]
 8002252:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8002254:	4b1f      	ldr	r3, [pc, #124]	@ (80022d4 <HAL_UART_MspInit+0xf4>)
 8002256:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800225a:	4a1e      	ldr	r2, [pc, #120]	@ (80022d4 <HAL_UART_MspInit+0xf4>)
 800225c:	f043 0310 	orr.w	r3, r3, #16
 8002260:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002264:	4b1b      	ldr	r3, [pc, #108]	@ (80022d4 <HAL_UART_MspInit+0xf4>)
 8002266:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800226a:	f003 0310 	and.w	r3, r3, #16
 800226e:	60bb      	str	r3, [r7, #8]
 8002270:	68bb      	ldr	r3, [r7, #8]
    /**USART10 GPIO Configuration
    PE2     ------> USART10_RX
    PE3     ------> USART10_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8002272:	2304      	movs	r3, #4
 8002274:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002278:	2302      	movs	r3, #2
 800227a:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800227e:	2300      	movs	r3, #0
 8002280:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002284:	2300      	movs	r3, #0
 8002286:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF4_USART10;
 800228a:	2304      	movs	r3, #4
 800228c:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002290:	f107 03cc 	add.w	r3, r7, #204	@ 0xcc
 8002294:	4619      	mov	r1, r3
 8002296:	4810      	ldr	r0, [pc, #64]	@ (80022d8 <HAL_UART_MspInit+0xf8>)
 8002298:	f001 f89e 	bl	80033d8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 800229c:	2308      	movs	r3, #8
 800229e:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80022a2:	2302      	movs	r3, #2
 80022a4:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022a8:	2300      	movs	r3, #0
 80022aa:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80022ae:	2300      	movs	r3, #0
 80022b0:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF11_USART10;
 80022b4:	230b      	movs	r3, #11
 80022b6:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80022ba:	f107 03cc 	add.w	r3, r7, #204	@ 0xcc
 80022be:	4619      	mov	r1, r3
 80022c0:	4805      	ldr	r0, [pc, #20]	@ (80022d8 <HAL_UART_MspInit+0xf8>)
 80022c2:	f001 f889 	bl	80033d8 <HAL_GPIO_Init>

  /* USER CODE END USART10_MspInit 1 */

  }

}
 80022c6:	bf00      	nop
 80022c8:	37e0      	adds	r7, #224	@ 0xe0
 80022ca:	46bd      	mov	sp, r7
 80022cc:	bd80      	pop	{r7, pc}
 80022ce:	bf00      	nop
 80022d0:	40011c00 	.word	0x40011c00
 80022d4:	58024400 	.word	0x58024400
 80022d8:	58021000 	.word	0x58021000

080022dc <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80022dc:	b580      	push	{r7, lr}
 80022de:	b090      	sub	sp, #64	@ 0x40
 80022e0:	af00      	add	r7, sp, #0
 80022e2:	6078      	str	r0, [r7, #4]
  uint32_t              uwTimclock, uwAPB1Prescaler;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
  /*Configure the TIM6 IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	2b0f      	cmp	r3, #15
 80022e8:	d827      	bhi.n	800233a <HAL_InitTick+0x5e>
   {
     HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0);
 80022ea:	2200      	movs	r2, #0
 80022ec:	6879      	ldr	r1, [r7, #4]
 80022ee:	2036      	movs	r0, #54	@ 0x36
 80022f0:	f000 fa6e 	bl	80027d0 <HAL_NVIC_SetPriority>

     /* Enable the TIM6 global Interrupt */
     HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80022f4:	2036      	movs	r0, #54	@ 0x36
 80022f6:	f000 fa85 	bl	8002804 <HAL_NVIC_EnableIRQ>
     uwTickPrio = TickPriority;
 80022fa:	4a29      	ldr	r2, [pc, #164]	@ (80023a0 <HAL_InitTick+0xc4>)
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8002300:	4b28      	ldr	r3, [pc, #160]	@ (80023a4 <HAL_InitTick+0xc8>)
 8002302:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8002306:	4a27      	ldr	r2, [pc, #156]	@ (80023a4 <HAL_InitTick+0xc8>)
 8002308:	f043 0310 	orr.w	r3, r3, #16
 800230c:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8002310:	4b24      	ldr	r3, [pc, #144]	@ (80023a4 <HAL_InitTick+0xc8>)
 8002312:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8002316:	f003 0310 	and.w	r3, r3, #16
 800231a:	60fb      	str	r3, [r7, #12]
 800231c:	68fb      	ldr	r3, [r7, #12]
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800231e:	f107 0210 	add.w	r2, r7, #16
 8002322:	f107 0314 	add.w	r3, r7, #20
 8002326:	4611      	mov	r1, r2
 8002328:	4618      	mov	r0, r3
 800232a:	f002 fb0b 	bl	8004944 <HAL_RCC_GetClockConfig>
  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 800232e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002330:	63bb      	str	r3, [r7, #56]	@ 0x38
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8002332:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002334:	2b00      	cmp	r3, #0
 8002336:	d106      	bne.n	8002346 <HAL_InitTick+0x6a>
 8002338:	e001      	b.n	800233e <HAL_InitTick+0x62>
    return HAL_ERROR;
 800233a:	2301      	movs	r3, #1
 800233c:	e02b      	b.n	8002396 <HAL_InitTick+0xba>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 800233e:	f002 fad5 	bl	80048ec <HAL_RCC_GetPCLK1Freq>
 8002342:	63f8      	str	r0, [r7, #60]	@ 0x3c
 8002344:	e004      	b.n	8002350 <HAL_InitTick+0x74>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8002346:	f002 fad1 	bl	80048ec <HAL_RCC_GetPCLK1Freq>
 800234a:	4603      	mov	r3, r0
 800234c:	005b      	lsls	r3, r3, #1
 800234e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8002350:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002352:	4a15      	ldr	r2, [pc, #84]	@ (80023a8 <HAL_InitTick+0xcc>)
 8002354:	fba2 2303 	umull	r2, r3, r2, r3
 8002358:	0c9b      	lsrs	r3, r3, #18
 800235a:	3b01      	subs	r3, #1
 800235c:	637b      	str	r3, [r7, #52]	@ 0x34

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 800235e:	4b13      	ldr	r3, [pc, #76]	@ (80023ac <HAL_InitTick+0xd0>)
 8002360:	4a13      	ldr	r2, [pc, #76]	@ (80023b0 <HAL_InitTick+0xd4>)
 8002362:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8002364:	4b11      	ldr	r3, [pc, #68]	@ (80023ac <HAL_InitTick+0xd0>)
 8002366:	f240 32e7 	movw	r2, #999	@ 0x3e7
 800236a:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 800236c:	4a0f      	ldr	r2, [pc, #60]	@ (80023ac <HAL_InitTick+0xd0>)
 800236e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002370:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8002372:	4b0e      	ldr	r3, [pc, #56]	@ (80023ac <HAL_InitTick+0xd0>)
 8002374:	2200      	movs	r2, #0
 8002376:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002378:	4b0c      	ldr	r3, [pc, #48]	@ (80023ac <HAL_InitTick+0xd0>)
 800237a:	2200      	movs	r2, #0
 800237c:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 800237e:	480b      	ldr	r0, [pc, #44]	@ (80023ac <HAL_InitTick+0xd0>)
 8002380:	f005 f869 	bl	8007456 <HAL_TIM_Base_Init>
 8002384:	4603      	mov	r3, r0
 8002386:	2b00      	cmp	r3, #0
 8002388:	d104      	bne.n	8002394 <HAL_InitTick+0xb8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 800238a:	4808      	ldr	r0, [pc, #32]	@ (80023ac <HAL_InitTick+0xd0>)
 800238c:	f005 f8c4 	bl	8007518 <HAL_TIM_Base_Start_IT>
 8002390:	4603      	mov	r3, r0
 8002392:	e000      	b.n	8002396 <HAL_InitTick+0xba>
  }

  /* Return function status */
  return HAL_ERROR;
 8002394:	2301      	movs	r3, #1
}
 8002396:	4618      	mov	r0, r3
 8002398:	3740      	adds	r7, #64	@ 0x40
 800239a:	46bd      	mov	sp, r7
 800239c:	bd80      	pop	{r7, pc}
 800239e:	bf00      	nop
 80023a0:	24000008 	.word	0x24000008
 80023a4:	58024400 	.word	0x58024400
 80023a8:	431bde83 	.word	0x431bde83
 80023ac:	2400057c 	.word	0x2400057c
 80023b0:	40001000 	.word	0x40001000

080023b4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80023b4:	b480      	push	{r7}
 80023b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80023b8:	bf00      	nop
 80023ba:	e7fd      	b.n	80023b8 <NMI_Handler+0x4>

080023bc <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80023bc:	b480      	push	{r7}
 80023be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80023c0:	bf00      	nop
 80023c2:	e7fd      	b.n	80023c0 <HardFault_Handler+0x4>

080023c4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80023c4:	b480      	push	{r7}
 80023c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80023c8:	bf00      	nop
 80023ca:	e7fd      	b.n	80023c8 <MemManage_Handler+0x4>

080023cc <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80023cc:	b480      	push	{r7}
 80023ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80023d0:	bf00      	nop
 80023d2:	e7fd      	b.n	80023d0 <BusFault_Handler+0x4>

080023d4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80023d4:	b480      	push	{r7}
 80023d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80023d8:	bf00      	nop
 80023da:	e7fd      	b.n	80023d8 <UsageFault_Handler+0x4>

080023dc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80023dc:	b480      	push	{r7}
 80023de:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80023e0:	bf00      	nop
 80023e2:	46bd      	mov	sp, r7
 80023e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023e8:	4770      	bx	lr
	...

080023ec <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1_CH1 and DAC1_CH2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 80023ec:	b580      	push	{r7, lr}
 80023ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80023f0:	4802      	ldr	r0, [pc, #8]	@ (80023fc <TIM6_DAC_IRQHandler+0x10>)
 80023f2:	f005 f917 	bl	8007624 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 80023f6:	bf00      	nop
 80023f8:	bd80      	pop	{r7, pc}
 80023fa:	bf00      	nop
 80023fc:	2400057c 	.word	0x2400057c

08002400 <ETH_IRQHandler>:

/**
  * @brief This function handles Ethernet global interrupt.
  */
void ETH_IRQHandler(void)
{
 8002400:	b580      	push	{r7, lr}
 8002402:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ETH_IRQn 0 */

  /* USER CODE END ETH_IRQn 0 */
  HAL_ETH_IRQHandler(&heth);
 8002404:	4802      	ldr	r0, [pc, #8]	@ (8002410 <ETH_IRQHandler+0x10>)
 8002406:	f000 fb81 	bl	8002b0c <HAL_ETH_IRQHandler>
  /* USER CODE BEGIN ETH_IRQn 1 */

  /* USER CODE END ETH_IRQn 1 */
}
 800240a:	bf00      	nop
 800240c:	bd80      	pop	{r7, pc}
 800240e:	bf00      	nop
 8002410:	240000b8 	.word	0x240000b8

08002414 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8002414:	b480      	push	{r7}
 8002416:	b083      	sub	sp, #12
 8002418:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 800241a:	4b3c      	ldr	r3, [pc, #240]	@ (800250c <SystemInit+0xf8>)
 800241c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002420:	4a3a      	ldr	r2, [pc, #232]	@ (800250c <SystemInit+0xf8>)
 8002422:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002426:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 800242a:	4b39      	ldr	r3, [pc, #228]	@ (8002510 <SystemInit+0xfc>)
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	f003 030f 	and.w	r3, r3, #15
 8002432:	2b06      	cmp	r3, #6
 8002434:	d807      	bhi.n	8002446 <SystemInit+0x32>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8002436:	4b36      	ldr	r3, [pc, #216]	@ (8002510 <SystemInit+0xfc>)
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	f023 030f 	bic.w	r3, r3, #15
 800243e:	4a34      	ldr	r2, [pc, #208]	@ (8002510 <SystemInit+0xfc>)
 8002440:	f043 0307 	orr.w	r3, r3, #7
 8002444:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8002446:	4b33      	ldr	r3, [pc, #204]	@ (8002514 <SystemInit+0x100>)
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	4a32      	ldr	r2, [pc, #200]	@ (8002514 <SystemInit+0x100>)
 800244c:	f043 0301 	orr.w	r3, r3, #1
 8002450:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8002452:	4b30      	ldr	r3, [pc, #192]	@ (8002514 <SystemInit+0x100>)
 8002454:	2200      	movs	r2, #0
 8002456:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8002458:	4b2e      	ldr	r3, [pc, #184]	@ (8002514 <SystemInit+0x100>)
 800245a:	681a      	ldr	r2, [r3, #0]
 800245c:	492d      	ldr	r1, [pc, #180]	@ (8002514 <SystemInit+0x100>)
 800245e:	4b2e      	ldr	r3, [pc, #184]	@ (8002518 <SystemInit+0x104>)
 8002460:	4013      	ands	r3, r2
 8002462:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8002464:	4b2a      	ldr	r3, [pc, #168]	@ (8002510 <SystemInit+0xfc>)
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	f003 0308 	and.w	r3, r3, #8
 800246c:	2b00      	cmp	r3, #0
 800246e:	d007      	beq.n	8002480 <SystemInit+0x6c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8002470:	4b27      	ldr	r3, [pc, #156]	@ (8002510 <SystemInit+0xfc>)
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	f023 030f 	bic.w	r3, r3, #15
 8002478:	4a25      	ldr	r2, [pc, #148]	@ (8002510 <SystemInit+0xfc>)
 800247a:	f043 0307 	orr.w	r3, r3, #7
 800247e:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8002480:	4b24      	ldr	r3, [pc, #144]	@ (8002514 <SystemInit+0x100>)
 8002482:	2200      	movs	r2, #0
 8002484:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8002486:	4b23      	ldr	r3, [pc, #140]	@ (8002514 <SystemInit+0x100>)
 8002488:	2200      	movs	r2, #0
 800248a:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 800248c:	4b21      	ldr	r3, [pc, #132]	@ (8002514 <SystemInit+0x100>)
 800248e:	2200      	movs	r2, #0
 8002490:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8002492:	4b20      	ldr	r3, [pc, #128]	@ (8002514 <SystemInit+0x100>)
 8002494:	4a21      	ldr	r2, [pc, #132]	@ (800251c <SystemInit+0x108>)
 8002496:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8002498:	4b1e      	ldr	r3, [pc, #120]	@ (8002514 <SystemInit+0x100>)
 800249a:	4a21      	ldr	r2, [pc, #132]	@ (8002520 <SystemInit+0x10c>)
 800249c:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 800249e:	4b1d      	ldr	r3, [pc, #116]	@ (8002514 <SystemInit+0x100>)
 80024a0:	4a20      	ldr	r2, [pc, #128]	@ (8002524 <SystemInit+0x110>)
 80024a2:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 80024a4:	4b1b      	ldr	r3, [pc, #108]	@ (8002514 <SystemInit+0x100>)
 80024a6:	2200      	movs	r2, #0
 80024a8:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 80024aa:	4b1a      	ldr	r3, [pc, #104]	@ (8002514 <SystemInit+0x100>)
 80024ac:	4a1d      	ldr	r2, [pc, #116]	@ (8002524 <SystemInit+0x110>)
 80024ae:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 80024b0:	4b18      	ldr	r3, [pc, #96]	@ (8002514 <SystemInit+0x100>)
 80024b2:	2200      	movs	r2, #0
 80024b4:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 80024b6:	4b17      	ldr	r3, [pc, #92]	@ (8002514 <SystemInit+0x100>)
 80024b8:	4a1a      	ldr	r2, [pc, #104]	@ (8002524 <SystemInit+0x110>)
 80024ba:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 80024bc:	4b15      	ldr	r3, [pc, #84]	@ (8002514 <SystemInit+0x100>)
 80024be:	2200      	movs	r2, #0
 80024c0:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80024c2:	4b14      	ldr	r3, [pc, #80]	@ (8002514 <SystemInit+0x100>)
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	4a13      	ldr	r2, [pc, #76]	@ (8002514 <SystemInit+0x100>)
 80024c8:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80024cc:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 80024ce:	4b11      	ldr	r3, [pc, #68]	@ (8002514 <SystemInit+0x100>)
 80024d0:	2200      	movs	r2, #0
 80024d2:	661a      	str	r2, [r3, #96]	@ 0x60
#if defined(DATA_IN_D2_SRAM)
  /* in case of initialized data in D2 SRAM (AHB SRAM), enable the D2 SRAM clock (AHB SRAM clock) */
#if defined(RCC_AHB2ENR_D2SRAM3EN)
  RCC->AHB2ENR |= (RCC_AHB2ENR_D2SRAM1EN | RCC_AHB2ENR_D2SRAM2EN | RCC_AHB2ENR_D2SRAM3EN);
#elif defined(RCC_AHB2ENR_D2SRAM2EN)
  RCC->AHB2ENR |= (RCC_AHB2ENR_D2SRAM1EN | RCC_AHB2ENR_D2SRAM2EN);
 80024d4:	4b0f      	ldr	r3, [pc, #60]	@ (8002514 <SystemInit+0x100>)
 80024d6:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 80024da:	4a0e      	ldr	r2, [pc, #56]	@ (8002514 <SystemInit+0x100>)
 80024dc:	f043 43c0 	orr.w	r3, r3, #1610612736	@ 0x60000000
 80024e0:	f8c2 30dc 	str.w	r3, [r2, #220]	@ 0xdc
#else
  RCC->AHB2ENR |= (RCC_AHB2ENR_AHBSRAM1EN | RCC_AHB2ENR_AHBSRAM2EN);
#endif /* RCC_AHB2ENR_D2SRAM3EN */

  tmpreg = RCC->AHB2ENR;
 80024e4:	4b0b      	ldr	r3, [pc, #44]	@ (8002514 <SystemInit+0x100>)
 80024e6:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 80024ea:	607b      	str	r3, [r7, #4]
  (void) tmpreg;
 80024ec:	687b      	ldr	r3, [r7, #4]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 80024ee:	4b0e      	ldr	r3, [pc, #56]	@ (8002528 <SystemInit+0x114>)
 80024f0:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 80024f4:	601a      	str	r2, [r3, #0]

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
 80024f6:	4b05      	ldr	r3, [pc, #20]	@ (800250c <SystemInit+0xf8>)
 80024f8:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 80024fc:	609a      	str	r2, [r3, #8]
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 80024fe:	bf00      	nop
 8002500:	370c      	adds	r7, #12
 8002502:	46bd      	mov	sp, r7
 8002504:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002508:	4770      	bx	lr
 800250a:	bf00      	nop
 800250c:	e000ed00 	.word	0xe000ed00
 8002510:	52002000 	.word	0x52002000
 8002514:	58024400 	.word	0x58024400
 8002518:	eaf6ed7f 	.word	0xeaf6ed7f
 800251c:	02020200 	.word	0x02020200
 8002520:	01ff0000 	.word	0x01ff0000
 8002524:	01010280 	.word	0x01010280
 8002528:	52004000 	.word	0x52004000

0800252c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 800252c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8002564 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8002530:	f7ff ff70 	bl	8002414 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002534:	480c      	ldr	r0, [pc, #48]	@ (8002568 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8002536:	490d      	ldr	r1, [pc, #52]	@ (800256c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002538:	4a0d      	ldr	r2, [pc, #52]	@ (8002570 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800253a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800253c:	e002      	b.n	8002544 <LoopCopyDataInit>

0800253e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800253e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002540:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002542:	3304      	adds	r3, #4

08002544 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002544:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002546:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002548:	d3f9      	bcc.n	800253e <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800254a:	4a0a      	ldr	r2, [pc, #40]	@ (8002574 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800254c:	4c0a      	ldr	r4, [pc, #40]	@ (8002578 <LoopFillZerobss+0x22>)
  movs r3, #0
 800254e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002550:	e001      	b.n	8002556 <LoopFillZerobss>

08002552 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002552:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002554:	3204      	adds	r2, #4

08002556 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002556:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002558:	d3fb      	bcc.n	8002552 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800255a:	f009 fa7b 	bl	800ba54 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800255e:	f7fe fc65 	bl	8000e2c <main>
  bx  lr
 8002562:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8002564:	24050000 	.word	0x24050000
  ldr r0, =_sdata
 8002568:	24000000 	.word	0x24000000
  ldr r1, =_edata
 800256c:	24000064 	.word	0x24000064
  ldr r2, =_sidata
 8002570:	0800bc10 	.word	0x0800bc10
  ldr r2, =_sbss
 8002574:	24000064 	.word	0x24000064
  ldr r4, =_ebss
 8002578:	24005100 	.word	0x24005100

0800257c <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800257c:	e7fe      	b.n	800257c <ADC3_IRQHandler>
	...

08002580 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002580:	b580      	push	{r7, lr}
 8002582:	b082      	sub	sp, #8
 8002584:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002586:	2003      	movs	r0, #3
 8002588:	f000 f917 	bl	80027ba <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800258c:	f002 f804 	bl	8004598 <HAL_RCC_GetSysClockFreq>
 8002590:	4602      	mov	r2, r0
 8002592:	4b15      	ldr	r3, [pc, #84]	@ (80025e8 <HAL_Init+0x68>)
 8002594:	699b      	ldr	r3, [r3, #24]
 8002596:	0a1b      	lsrs	r3, r3, #8
 8002598:	f003 030f 	and.w	r3, r3, #15
 800259c:	4913      	ldr	r1, [pc, #76]	@ (80025ec <HAL_Init+0x6c>)
 800259e:	5ccb      	ldrb	r3, [r1, r3]
 80025a0:	f003 031f 	and.w	r3, r3, #31
 80025a4:	fa22 f303 	lsr.w	r3, r2, r3
 80025a8:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80025aa:	4b0f      	ldr	r3, [pc, #60]	@ (80025e8 <HAL_Init+0x68>)
 80025ac:	699b      	ldr	r3, [r3, #24]
 80025ae:	f003 030f 	and.w	r3, r3, #15
 80025b2:	4a0e      	ldr	r2, [pc, #56]	@ (80025ec <HAL_Init+0x6c>)
 80025b4:	5cd3      	ldrb	r3, [r2, r3]
 80025b6:	f003 031f 	and.w	r3, r3, #31
 80025ba:	687a      	ldr	r2, [r7, #4]
 80025bc:	fa22 f303 	lsr.w	r3, r2, r3
 80025c0:	4a0b      	ldr	r2, [pc, #44]	@ (80025f0 <HAL_Init+0x70>)
 80025c2:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80025c4:	4a0b      	ldr	r2, [pc, #44]	@ (80025f4 <HAL_Init+0x74>)
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80025ca:	200f      	movs	r0, #15
 80025cc:	f7ff fe86 	bl	80022dc <HAL_InitTick>
 80025d0:	4603      	mov	r3, r0
 80025d2:	2b00      	cmp	r3, #0
 80025d4:	d001      	beq.n	80025da <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 80025d6:	2301      	movs	r3, #1
 80025d8:	e002      	b.n	80025e0 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 80025da:	f7ff f9f7 	bl	80019cc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80025de:	2300      	movs	r3, #0
}
 80025e0:	4618      	mov	r0, r3
 80025e2:	3708      	adds	r7, #8
 80025e4:	46bd      	mov	sp, r7
 80025e6:	bd80      	pop	{r7, pc}
 80025e8:	58024400 	.word	0x58024400
 80025ec:	0800bbc8 	.word	0x0800bbc8
 80025f0:	24000004 	.word	0x24000004
 80025f4:	24000000 	.word	0x24000000

080025f8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80025f8:	b480      	push	{r7}
 80025fa:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80025fc:	4b06      	ldr	r3, [pc, #24]	@ (8002618 <HAL_IncTick+0x20>)
 80025fe:	781b      	ldrb	r3, [r3, #0]
 8002600:	461a      	mov	r2, r3
 8002602:	4b06      	ldr	r3, [pc, #24]	@ (800261c <HAL_IncTick+0x24>)
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	4413      	add	r3, r2
 8002608:	4a04      	ldr	r2, [pc, #16]	@ (800261c <HAL_IncTick+0x24>)
 800260a:	6013      	str	r3, [r2, #0]
}
 800260c:	bf00      	nop
 800260e:	46bd      	mov	sp, r7
 8002610:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002614:	4770      	bx	lr
 8002616:	bf00      	nop
 8002618:	2400000c 	.word	0x2400000c
 800261c:	240005c8 	.word	0x240005c8

08002620 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002620:	b480      	push	{r7}
 8002622:	af00      	add	r7, sp, #0
  return uwTick;
 8002624:	4b03      	ldr	r3, [pc, #12]	@ (8002634 <HAL_GetTick+0x14>)
 8002626:	681b      	ldr	r3, [r3, #0]
}
 8002628:	4618      	mov	r0, r3
 800262a:	46bd      	mov	sp, r7
 800262c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002630:	4770      	bx	lr
 8002632:	bf00      	nop
 8002634:	240005c8 	.word	0x240005c8

08002638 <HAL_SYSCFG_ETHInterfaceSelect>:
  *   @arg SYSCFG_ETH_MII : Select the Media Independent Interface
  *   @arg SYSCFG_ETH_RMII: Select the Reduced Media Independent Interface
  * @retval None
  */
void HAL_SYSCFG_ETHInterfaceSelect(uint32_t SYSCFG_ETHInterface)
{
 8002638:	b480      	push	{r7}
 800263a:	b083      	sub	sp, #12
 800263c:	af00      	add	r7, sp, #0
 800263e:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_SYSCFG_ETHERNET_CONFIG(SYSCFG_ETHInterface));

  MODIFY_REG(SYSCFG->PMCR, SYSCFG_PMCR_EPIS_SEL, (uint32_t)(SYSCFG_ETHInterface));
 8002640:	4b06      	ldr	r3, [pc, #24]	@ (800265c <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 8002642:	685b      	ldr	r3, [r3, #4]
 8002644:	f423 0260 	bic.w	r2, r3, #14680064	@ 0xe00000
 8002648:	4904      	ldr	r1, [pc, #16]	@ (800265c <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	4313      	orrs	r3, r2
 800264e:	604b      	str	r3, [r1, #4]
}
 8002650:	bf00      	nop
 8002652:	370c      	adds	r7, #12
 8002654:	46bd      	mov	sp, r7
 8002656:	f85d 7b04 	ldr.w	r7, [sp], #4
 800265a:	4770      	bx	lr
 800265c:	58000400 	.word	0x58000400

08002660 <__NVIC_SetPriorityGrouping>:
{
 8002660:	b480      	push	{r7}
 8002662:	b085      	sub	sp, #20
 8002664:	af00      	add	r7, sp, #0
 8002666:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	f003 0307 	and.w	r3, r3, #7
 800266e:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002670:	4b0b      	ldr	r3, [pc, #44]	@ (80026a0 <__NVIC_SetPriorityGrouping+0x40>)
 8002672:	68db      	ldr	r3, [r3, #12]
 8002674:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002676:	68ba      	ldr	r2, [r7, #8]
 8002678:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800267c:	4013      	ands	r3, r2
 800267e:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002680:	68fb      	ldr	r3, [r7, #12]
 8002682:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002684:	68bb      	ldr	r3, [r7, #8]
 8002686:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8002688:	4b06      	ldr	r3, [pc, #24]	@ (80026a4 <__NVIC_SetPriorityGrouping+0x44>)
 800268a:	4313      	orrs	r3, r2
 800268c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800268e:	4a04      	ldr	r2, [pc, #16]	@ (80026a0 <__NVIC_SetPriorityGrouping+0x40>)
 8002690:	68bb      	ldr	r3, [r7, #8]
 8002692:	60d3      	str	r3, [r2, #12]
}
 8002694:	bf00      	nop
 8002696:	3714      	adds	r7, #20
 8002698:	46bd      	mov	sp, r7
 800269a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800269e:	4770      	bx	lr
 80026a0:	e000ed00 	.word	0xe000ed00
 80026a4:	05fa0000 	.word	0x05fa0000

080026a8 <__NVIC_GetPriorityGrouping>:
{
 80026a8:	b480      	push	{r7}
 80026aa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80026ac:	4b04      	ldr	r3, [pc, #16]	@ (80026c0 <__NVIC_GetPriorityGrouping+0x18>)
 80026ae:	68db      	ldr	r3, [r3, #12]
 80026b0:	0a1b      	lsrs	r3, r3, #8
 80026b2:	f003 0307 	and.w	r3, r3, #7
}
 80026b6:	4618      	mov	r0, r3
 80026b8:	46bd      	mov	sp, r7
 80026ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026be:	4770      	bx	lr
 80026c0:	e000ed00 	.word	0xe000ed00

080026c4 <__NVIC_EnableIRQ>:
{
 80026c4:	b480      	push	{r7}
 80026c6:	b083      	sub	sp, #12
 80026c8:	af00      	add	r7, sp, #0
 80026ca:	4603      	mov	r3, r0
 80026cc:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80026ce:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80026d2:	2b00      	cmp	r3, #0
 80026d4:	db0b      	blt.n	80026ee <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80026d6:	88fb      	ldrh	r3, [r7, #6]
 80026d8:	f003 021f 	and.w	r2, r3, #31
 80026dc:	4907      	ldr	r1, [pc, #28]	@ (80026fc <__NVIC_EnableIRQ+0x38>)
 80026de:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80026e2:	095b      	lsrs	r3, r3, #5
 80026e4:	2001      	movs	r0, #1
 80026e6:	fa00 f202 	lsl.w	r2, r0, r2
 80026ea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80026ee:	bf00      	nop
 80026f0:	370c      	adds	r7, #12
 80026f2:	46bd      	mov	sp, r7
 80026f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026f8:	4770      	bx	lr
 80026fa:	bf00      	nop
 80026fc:	e000e100 	.word	0xe000e100

08002700 <__NVIC_SetPriority>:
{
 8002700:	b480      	push	{r7}
 8002702:	b083      	sub	sp, #12
 8002704:	af00      	add	r7, sp, #0
 8002706:	4603      	mov	r3, r0
 8002708:	6039      	str	r1, [r7, #0]
 800270a:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800270c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002710:	2b00      	cmp	r3, #0
 8002712:	db0a      	blt.n	800272a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002714:	683b      	ldr	r3, [r7, #0]
 8002716:	b2da      	uxtb	r2, r3
 8002718:	490c      	ldr	r1, [pc, #48]	@ (800274c <__NVIC_SetPriority+0x4c>)
 800271a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800271e:	0112      	lsls	r2, r2, #4
 8002720:	b2d2      	uxtb	r2, r2
 8002722:	440b      	add	r3, r1
 8002724:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8002728:	e00a      	b.n	8002740 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800272a:	683b      	ldr	r3, [r7, #0]
 800272c:	b2da      	uxtb	r2, r3
 800272e:	4908      	ldr	r1, [pc, #32]	@ (8002750 <__NVIC_SetPriority+0x50>)
 8002730:	88fb      	ldrh	r3, [r7, #6]
 8002732:	f003 030f 	and.w	r3, r3, #15
 8002736:	3b04      	subs	r3, #4
 8002738:	0112      	lsls	r2, r2, #4
 800273a:	b2d2      	uxtb	r2, r2
 800273c:	440b      	add	r3, r1
 800273e:	761a      	strb	r2, [r3, #24]
}
 8002740:	bf00      	nop
 8002742:	370c      	adds	r7, #12
 8002744:	46bd      	mov	sp, r7
 8002746:	f85d 7b04 	ldr.w	r7, [sp], #4
 800274a:	4770      	bx	lr
 800274c:	e000e100 	.word	0xe000e100
 8002750:	e000ed00 	.word	0xe000ed00

08002754 <NVIC_EncodePriority>:
{
 8002754:	b480      	push	{r7}
 8002756:	b089      	sub	sp, #36	@ 0x24
 8002758:	af00      	add	r7, sp, #0
 800275a:	60f8      	str	r0, [r7, #12]
 800275c:	60b9      	str	r1, [r7, #8]
 800275e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002760:	68fb      	ldr	r3, [r7, #12]
 8002762:	f003 0307 	and.w	r3, r3, #7
 8002766:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002768:	69fb      	ldr	r3, [r7, #28]
 800276a:	f1c3 0307 	rsb	r3, r3, #7
 800276e:	2b04      	cmp	r3, #4
 8002770:	bf28      	it	cs
 8002772:	2304      	movcs	r3, #4
 8002774:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002776:	69fb      	ldr	r3, [r7, #28]
 8002778:	3304      	adds	r3, #4
 800277a:	2b06      	cmp	r3, #6
 800277c:	d902      	bls.n	8002784 <NVIC_EncodePriority+0x30>
 800277e:	69fb      	ldr	r3, [r7, #28]
 8002780:	3b03      	subs	r3, #3
 8002782:	e000      	b.n	8002786 <NVIC_EncodePriority+0x32>
 8002784:	2300      	movs	r3, #0
 8002786:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002788:	f04f 32ff 	mov.w	r2, #4294967295
 800278c:	69bb      	ldr	r3, [r7, #24]
 800278e:	fa02 f303 	lsl.w	r3, r2, r3
 8002792:	43da      	mvns	r2, r3
 8002794:	68bb      	ldr	r3, [r7, #8]
 8002796:	401a      	ands	r2, r3
 8002798:	697b      	ldr	r3, [r7, #20]
 800279a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800279c:	f04f 31ff 	mov.w	r1, #4294967295
 80027a0:	697b      	ldr	r3, [r7, #20]
 80027a2:	fa01 f303 	lsl.w	r3, r1, r3
 80027a6:	43d9      	mvns	r1, r3
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80027ac:	4313      	orrs	r3, r2
}
 80027ae:	4618      	mov	r0, r3
 80027b0:	3724      	adds	r7, #36	@ 0x24
 80027b2:	46bd      	mov	sp, r7
 80027b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027b8:	4770      	bx	lr

080027ba <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80027ba:	b580      	push	{r7, lr}
 80027bc:	b082      	sub	sp, #8
 80027be:	af00      	add	r7, sp, #0
 80027c0:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80027c2:	6878      	ldr	r0, [r7, #4]
 80027c4:	f7ff ff4c 	bl	8002660 <__NVIC_SetPriorityGrouping>
}
 80027c8:	bf00      	nop
 80027ca:	3708      	adds	r7, #8
 80027cc:	46bd      	mov	sp, r7
 80027ce:	bd80      	pop	{r7, pc}

080027d0 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80027d0:	b580      	push	{r7, lr}
 80027d2:	b086      	sub	sp, #24
 80027d4:	af00      	add	r7, sp, #0
 80027d6:	4603      	mov	r3, r0
 80027d8:	60b9      	str	r1, [r7, #8]
 80027da:	607a      	str	r2, [r7, #4]
 80027dc:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80027de:	f7ff ff63 	bl	80026a8 <__NVIC_GetPriorityGrouping>
 80027e2:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80027e4:	687a      	ldr	r2, [r7, #4]
 80027e6:	68b9      	ldr	r1, [r7, #8]
 80027e8:	6978      	ldr	r0, [r7, #20]
 80027ea:	f7ff ffb3 	bl	8002754 <NVIC_EncodePriority>
 80027ee:	4602      	mov	r2, r0
 80027f0:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80027f4:	4611      	mov	r1, r2
 80027f6:	4618      	mov	r0, r3
 80027f8:	f7ff ff82 	bl	8002700 <__NVIC_SetPriority>
}
 80027fc:	bf00      	nop
 80027fe:	3718      	adds	r7, #24
 8002800:	46bd      	mov	sp, r7
 8002802:	bd80      	pop	{r7, pc}

08002804 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002804:	b580      	push	{r7, lr}
 8002806:	b082      	sub	sp, #8
 8002808:	af00      	add	r7, sp, #0
 800280a:	4603      	mov	r3, r0
 800280c:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800280e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002812:	4618      	mov	r0, r3
 8002814:	f7ff ff56 	bl	80026c4 <__NVIC_EnableIRQ>
}
 8002818:	bf00      	nop
 800281a:	3708      	adds	r7, #8
 800281c:	46bd      	mov	sp, r7
 800281e:	bd80      	pop	{r7, pc}

08002820 <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 8002820:	b480      	push	{r7}
 8002822:	af00      	add	r7, sp, #0
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 8002824:	f3bf 8f5f 	dmb	sy
}
 8002828:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 800282a:	4b07      	ldr	r3, [pc, #28]	@ (8002848 <HAL_MPU_Disable+0x28>)
 800282c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800282e:	4a06      	ldr	r2, [pc, #24]	@ (8002848 <HAL_MPU_Disable+0x28>)
 8002830:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002834:	6253      	str	r3, [r2, #36]	@ 0x24

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 8002836:	4b05      	ldr	r3, [pc, #20]	@ (800284c <HAL_MPU_Disable+0x2c>)
 8002838:	2200      	movs	r2, #0
 800283a:	605a      	str	r2, [r3, #4]
}
 800283c:	bf00      	nop
 800283e:	46bd      	mov	sp, r7
 8002840:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002844:	4770      	bx	lr
 8002846:	bf00      	nop
 8002848:	e000ed00 	.word	0xe000ed00
 800284c:	e000ed90 	.word	0xe000ed90

08002850 <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 8002850:	b480      	push	{r7}
 8002852:	b083      	sub	sp, #12
 8002854:	af00      	add	r7, sp, #0
 8002856:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 8002858:	4a0b      	ldr	r2, [pc, #44]	@ (8002888 <HAL_MPU_Enable+0x38>)
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	f043 0301 	orr.w	r3, r3, #1
 8002860:	6053      	str	r3, [r2, #4]

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 8002862:	4b0a      	ldr	r3, [pc, #40]	@ (800288c <HAL_MPU_Enable+0x3c>)
 8002864:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002866:	4a09      	ldr	r2, [pc, #36]	@ (800288c <HAL_MPU_Enable+0x3c>)
 8002868:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800286c:	6253      	str	r3, [r2, #36]	@ 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 800286e:	f3bf 8f4f 	dsb	sy
}
 8002872:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8002874:	f3bf 8f6f 	isb	sy
}
 8002878:	bf00      	nop

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 800287a:	bf00      	nop
 800287c:	370c      	adds	r7, #12
 800287e:	46bd      	mov	sp, r7
 8002880:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002884:	4770      	bx	lr
 8002886:	bf00      	nop
 8002888:	e000ed90 	.word	0xe000ed90
 800288c:	e000ed00 	.word	0xe000ed00

08002890 <HAL_MPU_ConfigRegion>:
  * @param MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(MPU_Region_InitTypeDef *MPU_Init)
{
 8002890:	b480      	push	{r7}
 8002892:	b083      	sub	sp, #12
 8002894:	af00      	add	r7, sp, #0
 8002896:	6078      	str	r0, [r7, #4]
  assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
  assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
  assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	785a      	ldrb	r2, [r3, #1]
 800289c:	4b1b      	ldr	r3, [pc, #108]	@ (800290c <HAL_MPU_ConfigRegion+0x7c>)
 800289e:	609a      	str	r2, [r3, #8]

  /* Disable the Region */
  CLEAR_BIT(MPU->RASR, MPU_RASR_ENABLE_Msk);
 80028a0:	4b1a      	ldr	r3, [pc, #104]	@ (800290c <HAL_MPU_ConfigRegion+0x7c>)
 80028a2:	691b      	ldr	r3, [r3, #16]
 80028a4:	4a19      	ldr	r2, [pc, #100]	@ (800290c <HAL_MPU_ConfigRegion+0x7c>)
 80028a6:	f023 0301 	bic.w	r3, r3, #1
 80028aa:	6113      	str	r3, [r2, #16]

  /* Apply configuration */
  MPU->RBAR = MPU_Init->BaseAddress;
 80028ac:	4a17      	ldr	r2, [pc, #92]	@ (800290c <HAL_MPU_ConfigRegion+0x7c>)
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	685b      	ldr	r3, [r3, #4]
 80028b2:	60d3      	str	r3, [r2, #12]
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	7b1b      	ldrb	r3, [r3, #12]
 80028b8:	071a      	lsls	r2, r3, #28
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	7adb      	ldrb	r3, [r3, #11]
 80028be:	061b      	lsls	r3, r3, #24
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80028c0:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	7a9b      	ldrb	r3, [r3, #10]
 80028c6:	04db      	lsls	r3, r3, #19
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 80028c8:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	7b5b      	ldrb	r3, [r3, #13]
 80028ce:	049b      	lsls	r3, r3, #18
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 80028d0:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	7b9b      	ldrb	r3, [r3, #14]
 80028d6:	045b      	lsls	r3, r3, #17
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 80028d8:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	7bdb      	ldrb	r3, [r3, #15]
 80028de:	041b      	lsls	r3, r3, #16
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 80028e0:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	7a5b      	ldrb	r3, [r3, #9]
 80028e6:	021b      	lsls	r3, r3, #8
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 80028e8:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	7a1b      	ldrb	r3, [r3, #8]
 80028ee:	005b      	lsls	r3, r3, #1
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 80028f0:	4313      	orrs	r3, r2
              ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 80028f2:	687a      	ldr	r2, [r7, #4]
 80028f4:	7812      	ldrb	r2, [r2, #0]
 80028f6:	4611      	mov	r1, r2
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80028f8:	4a04      	ldr	r2, [pc, #16]	@ (800290c <HAL_MPU_ConfigRegion+0x7c>)
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 80028fa:	430b      	orrs	r3, r1
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80028fc:	6113      	str	r3, [r2, #16]
}
 80028fe:	bf00      	nop
 8002900:	370c      	adds	r7, #12
 8002902:	46bd      	mov	sp, r7
 8002904:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002908:	4770      	bx	lr
 800290a:	bf00      	nop
 800290c:	e000ed90 	.word	0xe000ed90

08002910 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8002910:	b580      	push	{r7, lr}
 8002912:	b084      	sub	sp, #16
 8002914:	af00      	add	r7, sp, #0
 8002916:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	2b00      	cmp	r3, #0
 800291c:	d101      	bne.n	8002922 <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 800291e:	2301      	movs	r3, #1
 8002920:	e0e3      	b.n	8002aea <HAL_ETH_Init+0x1da>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002928:	2b00      	cmp	r3, #0
 800292a:	d106      	bne.n	800293a <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	2223      	movs	r2, #35	@ 0x23
 8002930:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8002934:	6878      	ldr	r0, [r7, #4]
 8002936:	f7ff f867 	bl	8001a08 <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800293a:	4b6e      	ldr	r3, [pc, #440]	@ (8002af4 <HAL_ETH_Init+0x1e4>)
 800293c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8002940:	4a6c      	ldr	r2, [pc, #432]	@ (8002af4 <HAL_ETH_Init+0x1e4>)
 8002942:	f043 0302 	orr.w	r3, r3, #2
 8002946:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 800294a:	4b6a      	ldr	r3, [pc, #424]	@ (8002af4 <HAL_ETH_Init+0x1e4>)
 800294c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8002950:	f003 0302 	and.w	r3, r3, #2
 8002954:	60bb      	str	r3, [r7, #8]
 8002956:	68bb      	ldr	r3, [r7, #8]

  if (heth->Init.MediaInterface == HAL_ETH_MII_MODE)
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	7a1b      	ldrb	r3, [r3, #8]
 800295c:	2b00      	cmp	r3, #0
 800295e:	d103      	bne.n	8002968 <HAL_ETH_Init+0x58>
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_MII);
 8002960:	2000      	movs	r0, #0
 8002962:	f7ff fe69 	bl	8002638 <HAL_SYSCFG_ETHInterfaceSelect>
 8002966:	e003      	b.n	8002970 <HAL_ETH_Init+0x60>
  }
  else
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_RMII);
 8002968:	f44f 0000 	mov.w	r0, #8388608	@ 0x800000
 800296c:	f7ff fe64 	bl	8002638 <HAL_SYSCFG_ETHInterfaceSelect>
  }

  /* Dummy read to sync with ETH */
  (void)SYSCFG->PMCR;
 8002970:	4b61      	ldr	r3, [pc, #388]	@ (8002af8 <HAL_ETH_Init+0x1e8>)
 8002972:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR);
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	687a      	ldr	r2, [r7, #4]
 8002980:	6812      	ldr	r2, [r2, #0]
 8002982:	f043 0301 	orr.w	r3, r3, #1
 8002986:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800298a:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800298c:	f7ff fe48 	bl	8002620 <HAL_GetTick>
 8002990:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 8002992:	e011      	b.n	80029b8 <HAL_ETH_Init+0xa8>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 8002994:	f7ff fe44 	bl	8002620 <HAL_GetTick>
 8002998:	4602      	mov	r2, r0
 800299a:	68fb      	ldr	r3, [r7, #12]
 800299c:	1ad3      	subs	r3, r2, r3
 800299e:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 80029a2:	d909      	bls.n	80029b8 <HAL_ETH_Init+0xa8>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	2204      	movs	r2, #4
 80029a8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	22e0      	movs	r2, #224	@ 0xe0
 80029b0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      /* Return Error */
      return HAL_ERROR;
 80029b4:	2301      	movs	r3, #1
 80029b6:	e098      	b.n	8002aea <HAL_ETH_Init+0x1da>
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	f003 0301 	and.w	r3, r3, #1
 80029c6:	2b00      	cmp	r3, #0
 80029c8:	d1e4      	bne.n	8002994 <HAL_ETH_Init+0x84>
    }
  }

  /*------------------ MDIO CSR Clock Range Configuration --------------------*/
  HAL_ETH_SetMDIOClockRange(heth);
 80029ca:	6878      	ldr	r0, [r7, #4]
 80029cc:	f000 f9ce 	bl	8002d6c <HAL_ETH_SetMDIOClockRange>

  /*------------------ MAC LPI 1US Tic Counter Configuration --------------------*/
  WRITE_REG(heth->Instance->MAC1USTCR, (((uint32_t)HAL_RCC_GetHCLKFreq() / ETH_MAC_US_TICK) - 1U));
 80029d0:	f001 ff5c 	bl	800488c <HAL_RCC_GetHCLKFreq>
 80029d4:	4603      	mov	r3, r0
 80029d6:	4a49      	ldr	r2, [pc, #292]	@ (8002afc <HAL_ETH_Init+0x1ec>)
 80029d8:	fba2 2303 	umull	r2, r3, r2, r3
 80029dc:	0c9a      	lsrs	r2, r3, #18
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	3a01      	subs	r2, #1
 80029e4:	f8c3 20dc 	str.w	r2, [r3, #220]	@ 0xdc

  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 80029e8:	6878      	ldr	r0, [r7, #4]
 80029ea:	f000 fbb1 	bl	8003150 <ETH_MACDMAConfig>

  /* SET DSL to 64 bit */
  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_DSL, ETH_DMACCR_DSL_64BIT);
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80029f6:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
 80029fa:	f423 13e0 	bic.w	r3, r3, #1835008	@ 0x1c0000
 80029fe:	687a      	ldr	r2, [r7, #4]
 8002a00:	6812      	ldr	r2, [r2, #0]
 8002a02:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8002a06:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8002a0a:	f8c2 3100 	str.w	r3, [r2, #256]	@ 0x100

  /* Set Receive Buffers Length (must be a multiple of 4) */
  if ((heth->Init.RxBuffLen % 0x4U) != 0x0U)
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	695b      	ldr	r3, [r3, #20]
 8002a12:	f003 0303 	and.w	r3, r3, #3
 8002a16:	2b00      	cmp	r3, #0
 8002a18:	d009      	beq.n	8002a2e <HAL_ETH_Init+0x11e>
  {
    /* Set Error Code */
    heth->ErrorCode = HAL_ETH_ERROR_PARAM;
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	2201      	movs	r2, #1
 8002a1e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
    /* Set State as Error */
    heth->gState = HAL_ETH_STATE_ERROR;
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	22e0      	movs	r2, #224	@ 0xe0
 8002a26:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    /* Return Error */
    return HAL_ERROR;
 8002a2a:	2301      	movs	r3, #1
 8002a2c:	e05d      	b.n	8002aea <HAL_ETH_Init+0x1da>
  }
  else
  {
    MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_RBSZ, ((heth->Init.RxBuffLen) << 1));
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002a36:	f8d3 2108 	ldr.w	r2, [r3, #264]	@ 0x108
 8002a3a:	4b31      	ldr	r3, [pc, #196]	@ (8002b00 <HAL_ETH_Init+0x1f0>)
 8002a3c:	4013      	ands	r3, r2
 8002a3e:	687a      	ldr	r2, [r7, #4]
 8002a40:	6952      	ldr	r2, [r2, #20]
 8002a42:	0051      	lsls	r1, r2, #1
 8002a44:	687a      	ldr	r2, [r7, #4]
 8002a46:	6812      	ldr	r2, [r2, #0]
 8002a48:	430b      	orrs	r3, r1
 8002a4a:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8002a4e:	f8c2 3108 	str.w	r3, [r2, #264]	@ 0x108
  }

  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 8002a52:	6878      	ldr	r0, [r7, #4]
 8002a54:	f000 fc19 	bl	800328a <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 8002a58:	6878      	ldr	r0, [r7, #4]
 8002a5a:	f000 fc5f 	bl	800331c <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  /* Set MAC addr bits 32 to 47 */
  heth->Instance->MACA0HR = (((uint32_t)(heth->Init.MACAddr[5]) << 8) | (uint32_t)heth->Init.MACAddr[4]);
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	685b      	ldr	r3, [r3, #4]
 8002a62:	3305      	adds	r3, #5
 8002a64:	781b      	ldrb	r3, [r3, #0]
 8002a66:	021a      	lsls	r2, r3, #8
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	685b      	ldr	r3, [r3, #4]
 8002a6c:	3304      	adds	r3, #4
 8002a6e:	781b      	ldrb	r3, [r3, #0]
 8002a70:	4619      	mov	r1, r3
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	430a      	orrs	r2, r1
 8002a78:	f8c3 2300 	str.w	r2, [r3, #768]	@ 0x300
  /* Set MAC addr bits 0 to 31 */
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	685b      	ldr	r3, [r3, #4]
 8002a80:	3303      	adds	r3, #3
 8002a82:	781b      	ldrb	r3, [r3, #0]
 8002a84:	061a      	lsls	r2, r3, #24
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	685b      	ldr	r3, [r3, #4]
 8002a8a:	3302      	adds	r3, #2
 8002a8c:	781b      	ldrb	r3, [r3, #0]
 8002a8e:	041b      	lsls	r3, r3, #16
 8002a90:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	685b      	ldr	r3, [r3, #4]
 8002a96:	3301      	adds	r3, #1
 8002a98:	781b      	ldrb	r3, [r3, #0]
 8002a9a:	021b      	lsls	r3, r3, #8
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8002a9c:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	685b      	ldr	r3, [r3, #4]
 8002aa2:	781b      	ldrb	r3, [r3, #0]
 8002aa4:	4619      	mov	r1, r3
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	681b      	ldr	r3, [r3, #0]
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 8002aaa:	430a      	orrs	r2, r1
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8002aac:	f8c3 2304 	str.w	r2, [r3, #772]	@ 0x304

  /* Disable Rx MMC Interrupts */
  SET_BIT(heth->Instance->MMCRIMR, ETH_MMCRIMR_RXLPITRCIM | ETH_MMCRIMR_RXLPIUSCIM | \
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	f8d3 170c 	ldr.w	r1, [r3, #1804]	@ 0x70c
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	681a      	ldr	r2, [r3, #0]
 8002abc:	4b11      	ldr	r3, [pc, #68]	@ (8002b04 <HAL_ETH_Init+0x1f4>)
 8002abe:	430b      	orrs	r3, r1
 8002ac0:	f8c2 370c 	str.w	r3, [r2, #1804]	@ 0x70c
          ETH_MMCRIMR_RXUCGPIM | ETH_MMCRIMR_RXALGNERPIM | ETH_MMCRIMR_RXCRCERPIM);

  /* Disable Tx MMC Interrupts */
  SET_BIT(heth->Instance->MMCTIMR, ETH_MMCTIMR_TXLPITRCIM | ETH_MMCTIMR_TXLPIUSCIM | \
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	f8d3 1710 	ldr.w	r1, [r3, #1808]	@ 0x710
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	681a      	ldr	r2, [r3, #0]
 8002ad0:	4b0d      	ldr	r3, [pc, #52]	@ (8002b08 <HAL_ETH_Init+0x1f8>)
 8002ad2:	430b      	orrs	r3, r1
 8002ad4:	f8c2 3710 	str.w	r3, [r2, #1808]	@ 0x710
          ETH_MMCTIMR_TXGPKTIM | ETH_MMCTIMR_TXMCOLGPIM | ETH_MMCTIMR_TXSCOLGPIM);

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	2200      	movs	r2, #0
 8002adc:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  heth->gState = HAL_ETH_STATE_READY;
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	2210      	movs	r2, #16
 8002ae4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8002ae8:	2300      	movs	r3, #0
}
 8002aea:	4618      	mov	r0, r3
 8002aec:	3710      	adds	r7, #16
 8002aee:	46bd      	mov	sp, r7
 8002af0:	bd80      	pop	{r7, pc}
 8002af2:	bf00      	nop
 8002af4:	58024400 	.word	0x58024400
 8002af8:	58000400 	.word	0x58000400
 8002afc:	431bde83 	.word	0x431bde83
 8002b00:	ffff8001 	.word	0xffff8001
 8002b04:	0c020060 	.word	0x0c020060
 8002b08:	0c20c000 	.word	0x0c20c000

08002b0c <HAL_ETH_IRQHandler>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
void HAL_ETH_IRQHandler(ETH_HandleTypeDef *heth)
{
 8002b0c:	b580      	push	{r7, lr}
 8002b0e:	b086      	sub	sp, #24
 8002b10:	af00      	add	r7, sp, #0
 8002b12:	6078      	str	r0, [r7, #4]
  uint32_t mac_flag = READ_REG(heth->Instance->MACISR);
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8002b1c:	617b      	str	r3, [r7, #20]
  uint32_t dma_flag = READ_REG(heth->Instance->DMACSR);
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002b26:	f8d3 3160 	ldr.w	r3, [r3, #352]	@ 0x160
 8002b2a:	613b      	str	r3, [r7, #16]
  uint32_t dma_itsource = READ_REG(heth->Instance->DMACIER);
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002b34:	f8d3 3134 	ldr.w	r3, [r3, #308]	@ 0x134
 8002b38:	60fb      	str	r3, [r7, #12]
  uint32_t exti_d1_flag = READ_REG(EXTI_D1->PR3);
 8002b3a:	4b6d      	ldr	r3, [pc, #436]	@ (8002cf0 <HAL_ETH_IRQHandler+0x1e4>)
 8002b3c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002b3e:	60bb      	str	r3, [r7, #8]
#if defined(DUAL_CORE)
  uint32_t exti_d2_flag = READ_REG(EXTI_D2->PR3);
#endif /* DUAL_CORE */

  /* Packet received */
  if (((dma_flag & ETH_DMACSR_RI) != 0U) && ((dma_itsource & ETH_DMACIER_RIE) != 0U))
 8002b40:	693b      	ldr	r3, [r7, #16]
 8002b42:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002b46:	2b00      	cmp	r3, #0
 8002b48:	d010      	beq.n	8002b6c <HAL_ETH_IRQHandler+0x60>
 8002b4a:	68fb      	ldr	r3, [r7, #12]
 8002b4c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002b50:	2b00      	cmp	r3, #0
 8002b52:	d00b      	beq.n	8002b6c <HAL_ETH_IRQHandler+0x60>
  {
    /* Clear the Eth DMA Rx IT pending bits */
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMACSR_RI | ETH_DMACSR_NIS);
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002b5c:	461a      	mov	r2, r3
 8002b5e:	f248 0340 	movw	r3, #32832	@ 0x8040
 8002b62:	f8c2 3160 	str.w	r3, [r2, #352]	@ 0x160
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /*Call registered Receive complete callback*/
    heth->RxCpltCallback(heth);
#else
    /* Receive complete callback */
    HAL_ETH_RxCpltCallback(heth);
 8002b66:	6878      	ldr	r0, [r7, #4]
 8002b68:	f000 f8ce 	bl	8002d08 <HAL_ETH_RxCpltCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }

  /* Packet transmitted */
  if (((dma_flag & ETH_DMACSR_TI) != 0U) && ((dma_itsource & ETH_DMACIER_TIE) != 0U))
 8002b6c:	693b      	ldr	r3, [r7, #16]
 8002b6e:	f003 0301 	and.w	r3, r3, #1
 8002b72:	2b00      	cmp	r3, #0
 8002b74:	d010      	beq.n	8002b98 <HAL_ETH_IRQHandler+0x8c>
 8002b76:	68fb      	ldr	r3, [r7, #12]
 8002b78:	f003 0301 	and.w	r3, r3, #1
 8002b7c:	2b00      	cmp	r3, #0
 8002b7e:	d00b      	beq.n	8002b98 <HAL_ETH_IRQHandler+0x8c>
  {
    /* Clear the Eth DMA Tx IT pending bits */
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMACSR_TI | ETH_DMACSR_NIS);
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002b88:	461a      	mov	r2, r3
 8002b8a:	f248 0301 	movw	r3, #32769	@ 0x8001
 8002b8e:	f8c2 3160 	str.w	r3, [r2, #352]	@ 0x160
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /*Call registered Transmit complete callback*/
    heth->TxCpltCallback(heth);
#else
    /* Transfer complete callback */
    HAL_ETH_TxCpltCallback(heth);
 8002b92:	6878      	ldr	r0, [r7, #4]
 8002b94:	f000 f8ae 	bl	8002cf4 <HAL_ETH_TxCpltCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }

  /* ETH DMA Error */
  if (((dma_flag & ETH_DMACSR_AIS) != 0U) && ((dma_itsource & ETH_DMACIER_AIE) != 0U))
 8002b98:	693b      	ldr	r3, [r7, #16]
 8002b9a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002b9e:	2b00      	cmp	r3, #0
 8002ba0:	d047      	beq.n	8002c32 <HAL_ETH_IRQHandler+0x126>
 8002ba2:	68fb      	ldr	r3, [r7, #12]
 8002ba4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002ba8:	2b00      	cmp	r3, #0
 8002baa:	d042      	beq.n	8002c32 <HAL_ETH_IRQHandler+0x126>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_DMA;
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002bb2:	f043 0208 	orr.w	r2, r3, #8
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
    /* if fatal bus error occurred */
    if ((dma_flag & ETH_DMACSR_FBE) != 0U)
 8002bbc:	693b      	ldr	r3, [r7, #16]
 8002bbe:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002bc2:	2b00      	cmp	r3, #0
 8002bc4:	d01e      	beq.n	8002c04 <HAL_ETH_IRQHandler+0xf8>
    {
      /* Get DMA error code  */
      heth->DMAErrorCode = READ_BIT(heth->Instance->DMACSR, (ETH_DMACSR_FBE | ETH_DMACSR_TPS | ETH_DMACSR_RPS));
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002bce:	f8d3 2160 	ldr.w	r2, [r3, #352]	@ 0x160
 8002bd2:	f241 1302 	movw	r3, #4354	@ 0x1102
 8002bd6:	4013      	ands	r3, r2
 8002bd8:	687a      	ldr	r2, [r7, #4]
 8002bda:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c

      /* Disable all interrupts */
      __HAL_ETH_DMA_DISABLE_IT(heth, ETH_DMACIER_NIE | ETH_DMACIER_AIE);
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002be6:	f8d3 3134 	ldr.w	r3, [r3, #308]	@ 0x134
 8002bea:	687a      	ldr	r2, [r7, #4]
 8002bec:	6812      	ldr	r2, [r2, #0]
 8002bee:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8002bf2:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8002bf6:	f8c2 3134 	str.w	r3, [r2, #308]	@ 0x134

      /* Set HAL state to ERROR */
      heth->gState = HAL_ETH_STATE_ERROR;
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	22e0      	movs	r2, #224	@ 0xe0
 8002bfe:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
 8002c02:	e013      	b.n	8002c2c <HAL_ETH_IRQHandler+0x120>
    }
    else
    {
      /* Get DMA error status  */
      heth->DMAErrorCode = READ_BIT(heth->Instance->DMACSR, (ETH_DMACSR_CDE | ETH_DMACSR_ETI | ETH_DMACSR_RWT |
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002c0c:	f8d3 3160 	ldr.w	r3, [r3, #352]	@ 0x160
 8002c10:	f403 42cd 	and.w	r2, r3, #26240	@ 0x6680
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
                                                             ETH_DMACSR_RBU | ETH_DMACSR_AIS));

      /* Clear the interrupt summary flag */
      __HAL_ETH_DMA_CLEAR_IT(heth, (ETH_DMACSR_CDE | ETH_DMACSR_ETI | ETH_DMACSR_RWT |
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002c22:	461a      	mov	r2, r3
 8002c24:	f44f 43cd 	mov.w	r3, #26240	@ 0x6680
 8002c28:	f8c2 3160 	str.w	r3, [r2, #352]	@ 0x160
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered Error callback*/
    heth->ErrorCallback(heth);
#else
    /* Ethernet DMA Error callback */
    HAL_ETH_ErrorCallback(heth);
 8002c2c:	6878      	ldr	r0, [r7, #4]
 8002c2e:	f000 f875 	bl	8002d1c <HAL_ETH_ErrorCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }

  /* ETH MAC Error IT */
  if (((mac_flag & ETH_MACIER_RXSTSIE) == ETH_MACIER_RXSTSIE) || \
 8002c32:	697b      	ldr	r3, [r7, #20]
 8002c34:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002c38:	2b00      	cmp	r3, #0
 8002c3a:	d104      	bne.n	8002c46 <HAL_ETH_IRQHandler+0x13a>
      ((mac_flag & ETH_MACIER_TXSTSIE) == ETH_MACIER_TXSTSIE))
 8002c3c:	697b      	ldr	r3, [r7, #20]
 8002c3e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((mac_flag & ETH_MACIER_RXSTSIE) == ETH_MACIER_RXSTSIE) || \
 8002c42:	2b00      	cmp	r3, #0
 8002c44:	d019      	beq.n	8002c7a <HAL_ETH_IRQHandler+0x16e>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_MAC;
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002c4c:	f043 0210 	orr.w	r2, r3, #16
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Get MAC Rx Tx status and clear Status register pending bit */
    heth->MACErrorCode = READ_REG(heth->Instance->MACRXTXSR);
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	f8d3 20b8 	ldr.w	r2, [r3, #184]	@ 0xb8
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

    heth->gState = HAL_ETH_STATE_ERROR;
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	22e0      	movs	r2, #224	@ 0xe0
 8002c68:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered Error callback*/
    heth->ErrorCallback(heth);
#else
    /* Ethernet Error callback */
    HAL_ETH_ErrorCallback(heth);
 8002c6c:	6878      	ldr	r0, [r7, #4]
 8002c6e:	f000 f855 	bl	8002d1c <HAL_ETH_ErrorCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
    heth->MACErrorCode = (uint32_t)(0x0U);
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	2200      	movs	r2, #0
 8002c76:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  }

  /* ETH PMT IT */
  if ((mac_flag & ETH_MAC_PMT_IT) != 0U)
 8002c7a:	697b      	ldr	r3, [r7, #20]
 8002c7c:	f003 0310 	and.w	r3, r3, #16
 8002c80:	2b00      	cmp	r3, #0
 8002c82:	d00f      	beq.n	8002ca4 <HAL_ETH_IRQHandler+0x198>
  {
    /* Get MAC Wake-up source and clear the status register pending bit */
    heth->MACWakeUpEvent = READ_BIT(heth->Instance->MACPCSR, (ETH_MACPCSR_RWKPRCVD | ETH_MACPCSR_MGKPRCVD));
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8002c8c:	f003 0260 	and.w	r2, r3, #96	@ 0x60
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered PMT callback*/
    heth->PMTCallback(heth);
#else
    /* Ethernet PMT callback */
    HAL_ETH_PMTCallback(heth);
 8002c96:	6878      	ldr	r0, [r7, #4]
 8002c98:	f000 f84a 	bl	8002d30 <HAL_ETH_PMTCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */

    heth->MACWakeUpEvent = (uint32_t)(0x0U);
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	2200      	movs	r2, #0
 8002ca0:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
  }

  /* ETH EEE IT */
  if ((mac_flag & ETH_MAC_LPI_IT) != 0U)
 8002ca4:	697b      	ldr	r3, [r7, #20]
 8002ca6:	f003 0320 	and.w	r3, r3, #32
 8002caa:	2b00      	cmp	r3, #0
 8002cac:	d00f      	beq.n	8002cce <HAL_ETH_IRQHandler+0x1c2>
  {
    /* Get MAC LPI interrupt source and clear the status register pending bit */
    heth->MACLPIEvent = READ_BIT(heth->Instance->MACLCSR, 0x0000000FU);
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	f8d3 30d0 	ldr.w	r3, [r3, #208]	@ 0xd0
 8002cb6:	f003 020f 	and.w	r2, r3, #15
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered EEE callback*/
    heth->EEECallback(heth);
#else
    /* Ethernet EEE callback */
    HAL_ETH_EEECallback(heth);
 8002cc0:	6878      	ldr	r0, [r7, #4]
 8002cc2:	f000 f83f 	bl	8002d44 <HAL_ETH_EEECallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */

    heth->MACLPIEvent = (uint32_t)(0x0U);
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	2200      	movs	r2, #0
 8002cca:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */
    }
  }
#else /* DUAL_CORE not defined */
  /* check ETH WAKEUP exti flag */
  if ((exti_d1_flag & ETH_WAKEUP_EXTI_LINE) != 0U)
 8002cce:	68bb      	ldr	r3, [r7, #8]
 8002cd0:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002cd4:	2b00      	cmp	r3, #0
 8002cd6:	d006      	beq.n	8002ce6 <HAL_ETH_IRQHandler+0x1da>
  {
    /* Clear ETH WAKEUP Exti pending bit */
    __HAL_ETH_WAKEUP_EXTI_CLEAR_FLAG(ETH_WAKEUP_EXTI_LINE);
 8002cd8:	4b05      	ldr	r3, [pc, #20]	@ (8002cf0 <HAL_ETH_IRQHandler+0x1e4>)
 8002cda:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 8002cde:	629a      	str	r2, [r3, #40]	@ 0x28
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered WakeUp callback*/
    heth->WakeUpCallback(heth);
#else
    /* ETH WAKEUP callback */
    HAL_ETH_WakeUpCallback(heth);
 8002ce0:	6878      	ldr	r0, [r7, #4]
 8002ce2:	f000 f839 	bl	8002d58 <HAL_ETH_WakeUpCallback>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }
#endif /* DUAL_CORE */
}
 8002ce6:	bf00      	nop
 8002ce8:	3718      	adds	r7, #24
 8002cea:	46bd      	mov	sp, r7
 8002cec:	bd80      	pop	{r7, pc}
 8002cee:	bf00      	nop
 8002cf0:	58000080 	.word	0x58000080

08002cf4 <HAL_ETH_TxCpltCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_TxCpltCallback(ETH_HandleTypeDef *heth)
{
 8002cf4:	b480      	push	{r7}
 8002cf6:	b083      	sub	sp, #12
 8002cf8:	af00      	add	r7, sp, #0
 8002cfa:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_TxCpltCallback could be implemented in the user file
  */
}
 8002cfc:	bf00      	nop
 8002cfe:	370c      	adds	r7, #12
 8002d00:	46bd      	mov	sp, r7
 8002d02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d06:	4770      	bx	lr

08002d08 <HAL_ETH_RxCpltCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_RxCpltCallback(ETH_HandleTypeDef *heth)
{
 8002d08:	b480      	push	{r7}
 8002d0a:	b083      	sub	sp, #12
 8002d0c:	af00      	add	r7, sp, #0
 8002d0e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_RxCpltCallback could be implemented in the user file
  */
}
 8002d10:	bf00      	nop
 8002d12:	370c      	adds	r7, #12
 8002d14:	46bd      	mov	sp, r7
 8002d16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d1a:	4770      	bx	lr

08002d1c <HAL_ETH_ErrorCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_ErrorCallback(ETH_HandleTypeDef *heth)
{
 8002d1c:	b480      	push	{r7}
 8002d1e:	b083      	sub	sp, #12
 8002d20:	af00      	add	r7, sp, #0
 8002d22:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_ErrorCallback could be implemented in the user file
  */
}
 8002d24:	bf00      	nop
 8002d26:	370c      	adds	r7, #12
 8002d28:	46bd      	mov	sp, r7
 8002d2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d2e:	4770      	bx	lr

08002d30 <HAL_ETH_PMTCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_PMTCallback(ETH_HandleTypeDef *heth)
{
 8002d30:	b480      	push	{r7}
 8002d32:	b083      	sub	sp, #12
 8002d34:	af00      	add	r7, sp, #0
 8002d36:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_PMTCallback could be implemented in the user file
  */
}
 8002d38:	bf00      	nop
 8002d3a:	370c      	adds	r7, #12
 8002d3c:	46bd      	mov	sp, r7
 8002d3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d42:	4770      	bx	lr

08002d44 <HAL_ETH_EEECallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_EEECallback(ETH_HandleTypeDef *heth)
{
 8002d44:	b480      	push	{r7}
 8002d46:	b083      	sub	sp, #12
 8002d48:	af00      	add	r7, sp, #0
 8002d4a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_EEECallback could be implemented in the user file
  */
}
 8002d4c:	bf00      	nop
 8002d4e:	370c      	adds	r7, #12
 8002d50:	46bd      	mov	sp, r7
 8002d52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d56:	4770      	bx	lr

08002d58 <HAL_ETH_WakeUpCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_WakeUpCallback(ETH_HandleTypeDef *heth)
{
 8002d58:	b480      	push	{r7}
 8002d5a:	b083      	sub	sp, #12
 8002d5c:	af00      	add	r7, sp, #0
 8002d5e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ETH_WakeUpCallback could be implemented in the user file
   */
}
 8002d60:	bf00      	nop
 8002d62:	370c      	adds	r7, #12
 8002d64:	46bd      	mov	sp, r7
 8002d66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d6a:	4770      	bx	lr

08002d6c <HAL_ETH_SetMDIOClockRange>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
void HAL_ETH_SetMDIOClockRange(ETH_HandleTypeDef *heth)
{
 8002d6c:	b580      	push	{r7, lr}
 8002d6e:	b084      	sub	sp, #16
 8002d70:	af00      	add	r7, sp, #0
 8002d72:	6078      	str	r0, [r7, #4]
  uint32_t hclk;
  uint32_t tmpreg;

  /* Get the ETHERNET MACMDIOAR value */
  tmpreg = (heth->Instance)->MACMDIOAR;
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8002d7c:	60fb      	str	r3, [r7, #12]

  /* Clear CSR Clock Range bits */
  tmpreg &= ~ETH_MACMDIOAR_CR;
 8002d7e:	68fb      	ldr	r3, [r7, #12]
 8002d80:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8002d84:	60fb      	str	r3, [r7, #12]

  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 8002d86:	f001 fd81 	bl	800488c <HAL_RCC_GetHCLKFreq>
 8002d8a:	60b8      	str	r0, [r7, #8]

  /* Set CR bits depending on hclk value */
  if (hclk < 35000000U)
 8002d8c:	68bb      	ldr	r3, [r7, #8]
 8002d8e:	4a1a      	ldr	r2, [pc, #104]	@ (8002df8 <HAL_ETH_SetMDIOClockRange+0x8c>)
 8002d90:	4293      	cmp	r3, r2
 8002d92:	d804      	bhi.n	8002d9e <HAL_ETH_SetMDIOClockRange+0x32>
  {
    /* CSR Clock Range between 0-35 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV16;
 8002d94:	68fb      	ldr	r3, [r7, #12]
 8002d96:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002d9a:	60fb      	str	r3, [r7, #12]
 8002d9c:	e022      	b.n	8002de4 <HAL_ETH_SetMDIOClockRange+0x78>
  }
  else if (hclk < 60000000U)
 8002d9e:	68bb      	ldr	r3, [r7, #8]
 8002da0:	4a16      	ldr	r2, [pc, #88]	@ (8002dfc <HAL_ETH_SetMDIOClockRange+0x90>)
 8002da2:	4293      	cmp	r3, r2
 8002da4:	d204      	bcs.n	8002db0 <HAL_ETH_SetMDIOClockRange+0x44>
  {
    /* CSR Clock Range between 35-60 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV26;
 8002da6:	68fb      	ldr	r3, [r7, #12]
 8002da8:	f443 7340 	orr.w	r3, r3, #768	@ 0x300
 8002dac:	60fb      	str	r3, [r7, #12]
 8002dae:	e019      	b.n	8002de4 <HAL_ETH_SetMDIOClockRange+0x78>
  }
  else if (hclk < 100000000U)
 8002db0:	68bb      	ldr	r3, [r7, #8]
 8002db2:	4a13      	ldr	r2, [pc, #76]	@ (8002e00 <HAL_ETH_SetMDIOClockRange+0x94>)
 8002db4:	4293      	cmp	r3, r2
 8002db6:	d915      	bls.n	8002de4 <HAL_ETH_SetMDIOClockRange+0x78>
  {
    /* CSR Clock Range between 60-100 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
  }
  else if (hclk < 150000000U)
 8002db8:	68bb      	ldr	r3, [r7, #8]
 8002dba:	4a12      	ldr	r2, [pc, #72]	@ (8002e04 <HAL_ETH_SetMDIOClockRange+0x98>)
 8002dbc:	4293      	cmp	r3, r2
 8002dbe:	d804      	bhi.n	8002dca <HAL_ETH_SetMDIOClockRange+0x5e>
  {
    /* CSR Clock Range between 100-150 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV62;
 8002dc0:	68fb      	ldr	r3, [r7, #12]
 8002dc2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002dc6:	60fb      	str	r3, [r7, #12]
 8002dc8:	e00c      	b.n	8002de4 <HAL_ETH_SetMDIOClockRange+0x78>
  }
  else if (hclk < 250000000U)
 8002dca:	68bb      	ldr	r3, [r7, #8]
 8002dcc:	4a0e      	ldr	r2, [pc, #56]	@ (8002e08 <HAL_ETH_SetMDIOClockRange+0x9c>)
 8002dce:	4293      	cmp	r3, r2
 8002dd0:	d804      	bhi.n	8002ddc <HAL_ETH_SetMDIOClockRange+0x70>
  {
    /* CSR Clock Range between 150-250 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV102;
 8002dd2:	68fb      	ldr	r3, [r7, #12]
 8002dd4:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002dd8:	60fb      	str	r3, [r7, #12]
 8002dda:	e003      	b.n	8002de4 <HAL_ETH_SetMDIOClockRange+0x78>
  }
  else /* (hclk >= 250000000U) */
  {
    /* CSR Clock >= 250 MHz */
    tmpreg |= (uint32_t)(ETH_MACMDIOAR_CR_DIV124);
 8002ddc:	68fb      	ldr	r3, [r7, #12]
 8002dde:	f443 63a0 	orr.w	r3, r3, #1280	@ 0x500
 8002de2:	60fb      	str	r3, [r7, #12]
  }

  /* Configure the CSR Clock Range */
  (heth->Instance)->MACMDIOAR = (uint32_t)tmpreg;
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	68fa      	ldr	r2, [r7, #12]
 8002dea:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
}
 8002dee:	bf00      	nop
 8002df0:	3710      	adds	r7, #16
 8002df2:	46bd      	mov	sp, r7
 8002df4:	bd80      	pop	{r7, pc}
 8002df6:	bf00      	nop
 8002df8:	02160ebf 	.word	0x02160ebf
 8002dfc:	03938700 	.word	0x03938700
 8002e00:	05f5e0ff 	.word	0x05f5e0ff
 8002e04:	08f0d17f 	.word	0x08f0d17f
 8002e08:	0ee6b27f 	.word	0x0ee6b27f

08002e0c <ETH_SetMACConfig>:
/** @addtogroup ETH_Private_Functions   ETH Private Functions
  * @{
  */

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth, const ETH_MACConfigTypeDef *macconf)
{
 8002e0c:	b480      	push	{r7}
 8002e0e:	b085      	sub	sp, #20
 8002e10:	af00      	add	r7, sp, #0
 8002e12:	6078      	str	r0, [r7, #4]
 8002e14:	6039      	str	r1, [r7, #0]
  uint32_t macregval;

  /*------------------------ MACCR Configuration --------------------*/
  macregval = (macconf->InterPacketGapVal |
 8002e16:	683b      	ldr	r3, [r7, #0]
 8002e18:	689a      	ldr	r2, [r3, #8]
               macconf->SourceAddrControl |
 8002e1a:	683b      	ldr	r3, [r7, #0]
 8002e1c:	681b      	ldr	r3, [r3, #0]
  macregval = (macconf->InterPacketGapVal |
 8002e1e:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ChecksumOffload << 27) |
 8002e20:	683b      	ldr	r3, [r7, #0]
 8002e22:	791b      	ldrb	r3, [r3, #4]
 8002e24:	06db      	lsls	r3, r3, #27
               macconf->SourceAddrControl |
 8002e26:	431a      	orrs	r2, r3
               ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 8002e28:	683b      	ldr	r3, [r7, #0]
 8002e2a:	7b1b      	ldrb	r3, [r3, #12]
 8002e2c:	05db      	lsls	r3, r3, #23
               ((uint32_t)macconf->ChecksumOffload << 27) |
 8002e2e:	431a      	orrs	r2, r3
               ((uint32_t)macconf->Support2KPacket  << 22) |
 8002e30:	683b      	ldr	r3, [r7, #0]
 8002e32:	7b5b      	ldrb	r3, [r3, #13]
 8002e34:	059b      	lsls	r3, r3, #22
               ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 8002e36:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CRCStripTypePacket << 21) |
 8002e38:	683b      	ldr	r3, [r7, #0]
 8002e3a:	7b9b      	ldrb	r3, [r3, #14]
 8002e3c:	055b      	lsls	r3, r3, #21
               ((uint32_t)macconf->Support2KPacket  << 22) |
 8002e3e:	431a      	orrs	r2, r3
               ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 8002e40:	683b      	ldr	r3, [r7, #0]
 8002e42:	7bdb      	ldrb	r3, [r3, #15]
 8002e44:	051b      	lsls	r3, r3, #20
               ((uint32_t)macconf->CRCStripTypePacket << 21) |
 8002e46:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 8002e48:	683a      	ldr	r2, [r7, #0]
 8002e4a:	7c12      	ldrb	r2, [r2, #16]
 8002e4c:	2a00      	cmp	r2, #0
 8002e4e:	d102      	bne.n	8002e56 <ETH_SetMACConfig+0x4a>
 8002e50:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 8002e54:	e000      	b.n	8002e58 <ETH_SetMACConfig+0x4c>
 8002e56:	2200      	movs	r2, #0
               ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 8002e58:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 8002e5a:	683a      	ldr	r2, [r7, #0]
 8002e5c:	7c52      	ldrb	r2, [r2, #17]
 8002e5e:	2a00      	cmp	r2, #0
 8002e60:	d102      	bne.n	8002e68 <ETH_SetMACConfig+0x5c>
 8002e62:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8002e66:	e000      	b.n	8002e6a <ETH_SetMACConfig+0x5e>
 8002e68:	2200      	movs	r2, #0
               ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 8002e6a:	431a      	orrs	r2, r3
               ((uint32_t)macconf->JumboPacket << 16) |
 8002e6c:	683b      	ldr	r3, [r7, #0]
 8002e6e:	7c9b      	ldrb	r3, [r3, #18]
 8002e70:	041b      	lsls	r3, r3, #16
               ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 8002e72:	431a      	orrs	r2, r3
               macconf->Speed |
 8002e74:	683b      	ldr	r3, [r7, #0]
 8002e76:	695b      	ldr	r3, [r3, #20]
               ((uint32_t)macconf->JumboPacket << 16) |
 8002e78:	431a      	orrs	r2, r3
               macconf->DuplexMode |
 8002e7a:	683b      	ldr	r3, [r7, #0]
 8002e7c:	699b      	ldr	r3, [r3, #24]
               macconf->Speed |
 8002e7e:	431a      	orrs	r2, r3
               ((uint32_t)macconf->LoopbackMode << 12) |
 8002e80:	683b      	ldr	r3, [r7, #0]
 8002e82:	7f1b      	ldrb	r3, [r3, #28]
 8002e84:	031b      	lsls	r3, r3, #12
               macconf->DuplexMode |
 8002e86:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11) |
 8002e88:	683b      	ldr	r3, [r7, #0]
 8002e8a:	7f5b      	ldrb	r3, [r3, #29]
 8002e8c:	02db      	lsls	r3, r3, #11
               ((uint32_t)macconf->LoopbackMode << 12) |
 8002e8e:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10) |
 8002e90:	683a      	ldr	r2, [r7, #0]
 8002e92:	7f92      	ldrb	r2, [r2, #30]
 8002e94:	2a00      	cmp	r2, #0
 8002e96:	d102      	bne.n	8002e9e <ETH_SetMACConfig+0x92>
 8002e98:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002e9c:	e000      	b.n	8002ea0 <ETH_SetMACConfig+0x94>
 8002e9e:	2200      	movs	r2, #0
               ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11) |
 8002ea0:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CarrierSenseDuringTransmit << 9) |
 8002ea2:	683b      	ldr	r3, [r7, #0]
 8002ea4:	7fdb      	ldrb	r3, [r3, #31]
 8002ea6:	025b      	lsls	r3, r3, #9
               ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10) |
 8002ea8:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8) |
 8002eaa:	683a      	ldr	r2, [r7, #0]
 8002eac:	f892 2020 	ldrb.w	r2, [r2, #32]
 8002eb0:	2a00      	cmp	r2, #0
 8002eb2:	d102      	bne.n	8002eba <ETH_SetMACConfig+0xae>
 8002eb4:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002eb8:	e000      	b.n	8002ebc <ETH_SetMACConfig+0xb0>
 8002eba:	2200      	movs	r2, #0
               ((uint32_t)macconf->CarrierSenseDuringTransmit << 9) |
 8002ebc:	431a      	orrs	r2, r3
               macconf->BackOffLimit |
 8002ebe:	683b      	ldr	r3, [r7, #0]
 8002ec0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
               ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8) |
 8002ec2:	431a      	orrs	r2, r3
               ((uint32_t)macconf->DeferralCheck << 4) |
 8002ec4:	683b      	ldr	r3, [r7, #0]
 8002ec6:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8002eca:	011b      	lsls	r3, r3, #4
               macconf->BackOffLimit |
 8002ecc:	431a      	orrs	r2, r3
               macconf->PreambleLength);
 8002ece:	683b      	ldr	r3, [r7, #0]
 8002ed0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
  macregval = (macconf->InterPacketGapVal |
 8002ed2:	4313      	orrs	r3, r2
 8002ed4:	60fb      	str	r3, [r7, #12]

  /* Write to MACCR */
  MODIFY_REG(heth->Instance->MACCR, ETH_MACCR_MASK, macregval);
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	681a      	ldr	r2, [r3, #0]
 8002edc:	4b56      	ldr	r3, [pc, #344]	@ (8003038 <ETH_SetMACConfig+0x22c>)
 8002ede:	4013      	ands	r3, r2
 8002ee0:	687a      	ldr	r2, [r7, #4]
 8002ee2:	6812      	ldr	r2, [r2, #0]
 8002ee4:	68f9      	ldr	r1, [r7, #12]
 8002ee6:	430b      	orrs	r3, r1
 8002ee8:	6013      	str	r3, [r2, #0]

  /*------------------------ MACECR Configuration --------------------*/
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 8002eea:	683b      	ldr	r3, [r7, #0]
 8002eec:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002eee:	065a      	lsls	r2, r3, #25
               ((uint32_t)macconf->ExtendedInterPacketGap << 24) |
 8002ef0:	683b      	ldr	r3, [r7, #0]
 8002ef2:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8002ef6:	061b      	lsls	r3, r3, #24
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 8002ef8:	431a      	orrs	r2, r3
               ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18) |
 8002efa:	683b      	ldr	r3, [r7, #0]
 8002efc:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8002f00:	049b      	lsls	r3, r3, #18
               ((uint32_t)macconf->ExtendedInterPacketGap << 24) |
 8002f02:	431a      	orrs	r2, r3
               ((uint32_t)macconf->SlowProtocolDetect << 17) |
 8002f04:	683b      	ldr	r3, [r7, #0]
 8002f06:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8002f0a:	045b      	lsls	r3, r3, #17
               ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18) |
 8002f0c:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->CRCCheckingRxPackets == DISABLE) ? 1U : 0U) << 16) |
 8002f0e:	683a      	ldr	r2, [r7, #0]
 8002f10:	f892 2032 	ldrb.w	r2, [r2, #50]	@ 0x32
 8002f14:	2a00      	cmp	r2, #0
 8002f16:	d102      	bne.n	8002f1e <ETH_SetMACConfig+0x112>
 8002f18:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8002f1c:	e000      	b.n	8002f20 <ETH_SetMACConfig+0x114>
 8002f1e:	2200      	movs	r2, #0
               ((uint32_t)macconf->SlowProtocolDetect << 17) |
 8002f20:	431a      	orrs	r2, r3
               macconf->GiantPacketSizeLimit);
 8002f22:	683b      	ldr	r3, [r7, #0]
 8002f24:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 8002f26:	4313      	orrs	r3, r2
 8002f28:	60fb      	str	r3, [r7, #12]

  /* Write to MACECR */
  MODIFY_REG(heth->Instance->MACECR, ETH_MACECR_MASK, macregval);
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	685a      	ldr	r2, [r3, #4]
 8002f30:	4b42      	ldr	r3, [pc, #264]	@ (800303c <ETH_SetMACConfig+0x230>)
 8002f32:	4013      	ands	r3, r2
 8002f34:	687a      	ldr	r2, [r7, #4]
 8002f36:	6812      	ldr	r2, [r2, #0]
 8002f38:	68f9      	ldr	r1, [r7, #12]
 8002f3a:	430b      	orrs	r3, r1
 8002f3c:	6053      	str	r3, [r2, #4]

  /*------------------------ MACWTR Configuration --------------------*/
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 8002f3e:	683b      	ldr	r3, [r7, #0]
 8002f40:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002f44:	021a      	lsls	r2, r3, #8
               macconf->WatchdogTimeout);
 8002f46:	683b      	ldr	r3, [r7, #0]
 8002f48:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 8002f4a:	4313      	orrs	r3, r2
 8002f4c:	60fb      	str	r3, [r7, #12]

  /* Write to MACWTR */
  MODIFY_REG(heth->Instance->MACWTR, ETH_MACWTR_MASK, macregval);
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	68da      	ldr	r2, [r3, #12]
 8002f54:	4b3a      	ldr	r3, [pc, #232]	@ (8003040 <ETH_SetMACConfig+0x234>)
 8002f56:	4013      	ands	r3, r2
 8002f58:	687a      	ldr	r2, [r7, #4]
 8002f5a:	6812      	ldr	r2, [r2, #0]
 8002f5c:	68f9      	ldr	r1, [r7, #12]
 8002f5e:	430b      	orrs	r3, r1
 8002f60:	60d3      	str	r3, [r2, #12]

  /*------------------------ MACTFCR Configuration --------------------*/
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8002f62:	683b      	ldr	r3, [r7, #0]
 8002f64:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 8002f68:	005a      	lsls	r2, r3, #1
               macconf->PauseLowThreshold |
 8002f6a:	683b      	ldr	r3, [r7, #0]
 8002f6c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8002f6e:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7) |
 8002f70:	683a      	ldr	r2, [r7, #0]
 8002f72:	f892 204c 	ldrb.w	r2, [r2, #76]	@ 0x4c
 8002f76:	2a00      	cmp	r2, #0
 8002f78:	d101      	bne.n	8002f7e <ETH_SetMACConfig+0x172>
 8002f7a:	2280      	movs	r2, #128	@ 0x80
 8002f7c:	e000      	b.n	8002f80 <ETH_SetMACConfig+0x174>
 8002f7e:	2200      	movs	r2, #0
               macconf->PauseLowThreshold |
 8002f80:	431a      	orrs	r2, r3
               (macconf->PauseTime << 16));
 8002f82:	683b      	ldr	r3, [r7, #0]
 8002f84:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002f86:	041b      	lsls	r3, r3, #16
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8002f88:	4313      	orrs	r3, r2
 8002f8a:	60fb      	str	r3, [r7, #12]

  /* Write to MACTFCR */
  MODIFY_REG(heth->Instance->MACTFCR, ETH_MACTFCR_MASK, macregval);
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8002f92:	f64f 730d 	movw	r3, #65293	@ 0xff0d
 8002f96:	4013      	ands	r3, r2
 8002f98:	687a      	ldr	r2, [r7, #4]
 8002f9a:	6812      	ldr	r2, [r2, #0]
 8002f9c:	68f9      	ldr	r1, [r7, #12]
 8002f9e:	430b      	orrs	r3, r1
 8002fa0:	6713      	str	r3, [r2, #112]	@ 0x70

  /*------------------------ MACRFCR Configuration --------------------*/
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 8002fa2:	683b      	ldr	r3, [r7, #0]
 8002fa4:	f893 3056 	ldrb.w	r3, [r3, #86]	@ 0x56
 8002fa8:	461a      	mov	r2, r3
               ((uint32_t)macconf->UnicastPausePacketDetect << 1));
 8002faa:	683b      	ldr	r3, [r7, #0]
 8002fac:	f893 3055 	ldrb.w	r3, [r3, #85]	@ 0x55
 8002fb0:	005b      	lsls	r3, r3, #1
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 8002fb2:	4313      	orrs	r3, r2
 8002fb4:	60fb      	str	r3, [r7, #12]

  /* Write to MACRFCR */
  MODIFY_REG(heth->Instance->MACRFCR, ETH_MACRFCR_MASK, macregval);
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002fbe:	f023 0103 	bic.w	r1, r3, #3
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	68fa      	ldr	r2, [r7, #12]
 8002fc8:	430a      	orrs	r2, r1
 8002fca:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /*------------------------ MTLTQOMR Configuration --------------------*/
  /* Write to MTLTQOMR */
  MODIFY_REG(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_MASK, macconf->TransmitQueueMode);
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	f8d3 3d00 	ldr.w	r3, [r3, #3328]	@ 0xd00
 8002fd6:	f023 0172 	bic.w	r1, r3, #114	@ 0x72
 8002fda:	683b      	ldr	r3, [r7, #0]
 8002fdc:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	430a      	orrs	r2, r1
 8002fe4:	f8c3 2d00 	str.w	r2, [r3, #3328]	@ 0xd00

  /*------------------------ MTLRQOMR Configuration --------------------*/
  macregval = (macconf->ReceiveQueueMode |
 8002fe8:	683b      	ldr	r3, [r7, #0]
 8002fea:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 8002fec:	683a      	ldr	r2, [r7, #0]
 8002fee:	f892 2060 	ldrb.w	r2, [r2, #96]	@ 0x60
 8002ff2:	2a00      	cmp	r2, #0
 8002ff4:	d101      	bne.n	8002ffa <ETH_SetMACConfig+0x1ee>
 8002ff6:	2240      	movs	r2, #64	@ 0x40
 8002ff8:	e000      	b.n	8002ffc <ETH_SetMACConfig+0x1f0>
 8002ffa:	2200      	movs	r2, #0
  macregval = (macconf->ReceiveQueueMode |
 8002ffc:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ForwardRxErrorPacket << 4) |
 8002ffe:	683b      	ldr	r3, [r7, #0]
 8003000:	f893 3061 	ldrb.w	r3, [r3, #97]	@ 0x61
 8003004:	011b      	lsls	r3, r3, #4
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 8003006:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ForwardRxUndersizedGoodPacket << 3));
 8003008:	683b      	ldr	r3, [r7, #0]
 800300a:	f893 3062 	ldrb.w	r3, [r3, #98]	@ 0x62
 800300e:	00db      	lsls	r3, r3, #3
  macregval = (macconf->ReceiveQueueMode |
 8003010:	4313      	orrs	r3, r2
 8003012:	60fb      	str	r3, [r7, #12]

  /* Write to MTLRQOMR */
  MODIFY_REG(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_MASK, macregval);
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	@ 0xd30
 800301c:	f023 017b 	bic.w	r1, r3, #123	@ 0x7b
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	68fa      	ldr	r2, [r7, #12]
 8003026:	430a      	orrs	r2, r1
 8003028:	f8c3 2d30 	str.w	r2, [r3, #3376]	@ 0xd30
}
 800302c:	bf00      	nop
 800302e:	3714      	adds	r7, #20
 8003030:	46bd      	mov	sp, r7
 8003032:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003036:	4770      	bx	lr
 8003038:	00048083 	.word	0x00048083
 800303c:	c0f88000 	.word	0xc0f88000
 8003040:	fffffef0 	.word	0xfffffef0

08003044 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth, const ETH_DMAConfigTypeDef *dmaconf)
{
 8003044:	b480      	push	{r7}
 8003046:	b085      	sub	sp, #20
 8003048:	af00      	add	r7, sp, #0
 800304a:	6078      	str	r0, [r7, #4]
 800304c:	6039      	str	r1, [r7, #0]
  uint32_t dmaregval;

  /*------------------------ DMAMR Configuration --------------------*/
  MODIFY_REG(heth->Instance->DMAMR, ETH_DMAMR_MASK, dmaconf->DMAArbitration);
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003056:	681a      	ldr	r2, [r3, #0]
 8003058:	4b38      	ldr	r3, [pc, #224]	@ (800313c <ETH_SetDMAConfig+0xf8>)
 800305a:	4013      	ands	r3, r2
 800305c:	683a      	ldr	r2, [r7, #0]
 800305e:	6811      	ldr	r1, [r2, #0]
 8003060:	687a      	ldr	r2, [r7, #4]
 8003062:	6812      	ldr	r2, [r2, #0]
 8003064:	430b      	orrs	r3, r1
 8003066:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800306a:	6013      	str	r3, [r2, #0]

  /*------------------------ DMASBMR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 800306c:	683b      	ldr	r3, [r7, #0]
 800306e:	791b      	ldrb	r3, [r3, #4]
 8003070:	031a      	lsls	r2, r3, #12
               dmaconf->BurstMode |
 8003072:	683b      	ldr	r3, [r7, #0]
 8003074:	689b      	ldr	r3, [r3, #8]
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8003076:	431a      	orrs	r2, r3
               ((uint32_t)dmaconf->RebuildINCRxBurst << 15));
 8003078:	683b      	ldr	r3, [r7, #0]
 800307a:	7b1b      	ldrb	r3, [r3, #12]
 800307c:	03db      	lsls	r3, r3, #15
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 800307e:	4313      	orrs	r3, r2
 8003080:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMASBMR, ETH_DMASBMR_MASK, dmaregval);
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800308a:	685a      	ldr	r2, [r3, #4]
 800308c:	4b2c      	ldr	r3, [pc, #176]	@ (8003140 <ETH_SetDMAConfig+0xfc>)
 800308e:	4013      	ands	r3, r2
 8003090:	687a      	ldr	r2, [r7, #4]
 8003092:	6812      	ldr	r2, [r2, #0]
 8003094:	68f9      	ldr	r1, [r7, #12]
 8003096:	430b      	orrs	r3, r1
 8003098:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800309c:	6053      	str	r3, [r2, #4]

  /*------------------------ DMACCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 800309e:	683b      	ldr	r3, [r7, #0]
 80030a0:	7b5b      	ldrb	r3, [r3, #13]
 80030a2:	041a      	lsls	r2, r3, #16
               dmaconf->MaximumSegmentSize);
 80030a4:	683b      	ldr	r3, [r7, #0]
 80030a6:	6a1b      	ldr	r3, [r3, #32]
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 80030a8:	4313      	orrs	r3, r2
 80030aa:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_MASK, dmaregval);
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80030b4:	f8d3 2100 	ldr.w	r2, [r3, #256]	@ 0x100
 80030b8:	4b22      	ldr	r3, [pc, #136]	@ (8003144 <ETH_SetDMAConfig+0x100>)
 80030ba:	4013      	ands	r3, r2
 80030bc:	687a      	ldr	r2, [r7, #4]
 80030be:	6812      	ldr	r2, [r2, #0]
 80030c0:	68f9      	ldr	r1, [r7, #12]
 80030c2:	430b      	orrs	r3, r1
 80030c4:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80030c8:	f8c2 3100 	str.w	r3, [r2, #256]	@ 0x100

  /*------------------------ DMACTCR Configuration --------------------*/
  dmaregval = (dmaconf->TxDMABurstLength |
 80030cc:	683b      	ldr	r3, [r7, #0]
 80030ce:	691a      	ldr	r2, [r3, #16]
               ((uint32_t)dmaconf->SecondPacketOperate << 4) |
 80030d0:	683b      	ldr	r3, [r7, #0]
 80030d2:	7d1b      	ldrb	r3, [r3, #20]
 80030d4:	011b      	lsls	r3, r3, #4
  dmaregval = (dmaconf->TxDMABurstLength |
 80030d6:	431a      	orrs	r2, r3
               ((uint32_t)dmaconf->TCPSegmentation << 12));
 80030d8:	683b      	ldr	r3, [r7, #0]
 80030da:	7f5b      	ldrb	r3, [r3, #29]
 80030dc:	031b      	lsls	r3, r3, #12
  dmaregval = (dmaconf->TxDMABurstLength |
 80030de:	4313      	orrs	r3, r2
 80030e0:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACTCR, ETH_DMACTCR_MASK, dmaregval);
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80030ea:	f8d3 2104 	ldr.w	r2, [r3, #260]	@ 0x104
 80030ee:	4b16      	ldr	r3, [pc, #88]	@ (8003148 <ETH_SetDMAConfig+0x104>)
 80030f0:	4013      	ands	r3, r2
 80030f2:	687a      	ldr	r2, [r7, #4]
 80030f4:	6812      	ldr	r2, [r2, #0]
 80030f6:	68f9      	ldr	r1, [r7, #12]
 80030f8:	430b      	orrs	r3, r1
 80030fa:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80030fe:	f8c2 3104 	str.w	r3, [r2, #260]	@ 0x104

  /*------------------------ DMACRCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 8003102:	683b      	ldr	r3, [r7, #0]
 8003104:	7f1b      	ldrb	r3, [r3, #28]
 8003106:	07da      	lsls	r2, r3, #31
               dmaconf->RxDMABurstLength);
 8003108:	683b      	ldr	r3, [r7, #0]
 800310a:	699b      	ldr	r3, [r3, #24]
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 800310c:	4313      	orrs	r3, r2
 800310e:	60fb      	str	r3, [r7, #12]

  /* Write to DMACRCR */
  MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_MASK, dmaregval);
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003118:	f8d3 2108 	ldr.w	r2, [r3, #264]	@ 0x108
 800311c:	4b0b      	ldr	r3, [pc, #44]	@ (800314c <ETH_SetDMAConfig+0x108>)
 800311e:	4013      	ands	r3, r2
 8003120:	687a      	ldr	r2, [r7, #4]
 8003122:	6812      	ldr	r2, [r2, #0]
 8003124:	68f9      	ldr	r1, [r7, #12]
 8003126:	430b      	orrs	r3, r1
 8003128:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800312c:	f8c2 3108 	str.w	r3, [r2, #264]	@ 0x108
}
 8003130:	bf00      	nop
 8003132:	3714      	adds	r7, #20
 8003134:	46bd      	mov	sp, r7
 8003136:	f85d 7b04 	ldr.w	r7, [sp], #4
 800313a:	4770      	bx	lr
 800313c:	ffff87fd 	.word	0xffff87fd
 8003140:	ffff2ffe 	.word	0xffff2ffe
 8003144:	fffec000 	.word	0xfffec000
 8003148:	ffc0efef 	.word	0xffc0efef
 800314c:	7fc0ffff 	.word	0x7fc0ffff

08003150 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 8003150:	b580      	push	{r7, lr}
 8003152:	b0a4      	sub	sp, #144	@ 0x90
 8003154:	af00      	add	r7, sp, #0
 8003156:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.AutomaticPadCRCStrip = ENABLE;
 8003158:	2301      	movs	r3, #1
 800315a:	f887 303b 	strb.w	r3, [r7, #59]	@ 0x3b
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 800315e:	2300      	movs	r3, #0
 8003160:	653b      	str	r3, [r7, #80]	@ 0x50
  macDefaultConf.CarrierSenseBeforeTransmit = DISABLE;
 8003162:	2300      	movs	r3, #0
 8003164:	f887 3049 	strb.w	r3, [r7, #73]	@ 0x49
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 8003168:	2300      	movs	r3, #0
 800316a:	f887 304b 	strb.w	r3, [r7, #75]	@ 0x4b
  macDefaultConf.ChecksumOffload = ENABLE;
 800316e:	2301      	movs	r3, #1
 8003170:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
  macDefaultConf.CRCCheckingRxPackets = ENABLE;
 8003174:	2301      	movs	r3, #1
 8003176:	f887 305e 	strb.w	r3, [r7, #94]	@ 0x5e
  macDefaultConf.CRCStripTypePacket = ENABLE;
 800317a:	2301      	movs	r3, #1
 800317c:	f887 303a 	strb.w	r3, [r7, #58]	@ 0x3a
  macDefaultConf.DeferralCheck = DISABLE;
 8003180:	2300      	movs	r3, #0
 8003182:	f887 3054 	strb.w	r3, [r7, #84]	@ 0x54
  macDefaultConf.DropTCPIPChecksumErrorPacket = ENABLE;
 8003186:	2301      	movs	r3, #1
 8003188:	f887 308c 	strb.w	r3, [r7, #140]	@ 0x8c
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 800318c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8003190:	647b      	str	r3, [r7, #68]	@ 0x44
  macDefaultConf.ExtendedInterPacketGap = DISABLE;
 8003192:	2300      	movs	r3, #0
 8003194:	f887 3064 	strb.w	r3, [r7, #100]	@ 0x64
  macDefaultConf.ExtendedInterPacketGapVal = 0x0U;
 8003198:	2300      	movs	r3, #0
 800319a:	66bb      	str	r3, [r7, #104]	@ 0x68
  macDefaultConf.ForwardRxErrorPacket = DISABLE;
 800319c:	2300      	movs	r3, #0
 800319e:	f887 308d 	strb.w	r3, [r7, #141]	@ 0x8d
  macDefaultConf.ForwardRxUndersizedGoodPacket = DISABLE;
 80031a2:	2300      	movs	r3, #0
 80031a4:	f887 308e 	strb.w	r3, [r7, #142]	@ 0x8e
  macDefaultConf.GiantPacketSizeLimit = 0x618U;
 80031a8:	f44f 63c3 	mov.w	r3, #1560	@ 0x618
 80031ac:	663b      	str	r3, [r7, #96]	@ 0x60
  macDefaultConf.GiantPacketSizeLimitControl = DISABLE;
 80031ae:	2300      	movs	r3, #0
 80031b0:	f887 3038 	strb.w	r3, [r7, #56]	@ 0x38
  macDefaultConf.InterPacketGapVal = ETH_INTERPACKETGAP_96BIT;
 80031b4:	2300      	movs	r3, #0
 80031b6:	637b      	str	r3, [r7, #52]	@ 0x34
  macDefaultConf.Jabber = ENABLE;
 80031b8:	2301      	movs	r3, #1
 80031ba:	f887 303d 	strb.w	r3, [r7, #61]	@ 0x3d
  macDefaultConf.JumboPacket = DISABLE;
 80031be:	2300      	movs	r3, #0
 80031c0:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
  macDefaultConf.LoopbackMode = DISABLE;
 80031c4:	2300      	movs	r3, #0
 80031c6:	f887 3048 	strb.w	r3, [r7, #72]	@ 0x48
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS_4;
 80031ca:	2300      	movs	r3, #0
 80031cc:	67fb      	str	r3, [r7, #124]	@ 0x7c
  macDefaultConf.PauseTime = 0x0U;
 80031ce:	2300      	movs	r3, #0
 80031d0:	677b      	str	r3, [r7, #116]	@ 0x74
  macDefaultConf.PreambleLength = ETH_PREAMBLELENGTH_7;
 80031d2:	2300      	movs	r3, #0
 80031d4:	65bb      	str	r3, [r7, #88]	@ 0x58
  macDefaultConf.ProgrammableWatchdog = DISABLE;
 80031d6:	2300      	movs	r3, #0
 80031d8:	f887 306c 	strb.w	r3, [r7, #108]	@ 0x6c
  macDefaultConf.ReceiveFlowControl = DISABLE;
 80031dc:	2300      	movs	r3, #0
 80031de:	f887 3082 	strb.w	r3, [r7, #130]	@ 0x82
  macDefaultConf.ReceiveOwn = ENABLE;
 80031e2:	2301      	movs	r3, #1
 80031e4:	f887 304a 	strb.w	r3, [r7, #74]	@ 0x4a
  macDefaultConf.ReceiveQueueMode = ETH_RECEIVESTOREFORWARD;
 80031e8:	2320      	movs	r3, #32
 80031ea:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  macDefaultConf.RetryTransmission = ENABLE;
 80031ee:	2301      	movs	r3, #1
 80031f0:	f887 304c 	strb.w	r3, [r7, #76]	@ 0x4c
  macDefaultConf.SlowProtocolDetect = DISABLE;
 80031f4:	2300      	movs	r3, #0
 80031f6:	f887 305d 	strb.w	r3, [r7, #93]	@ 0x5d
  macDefaultConf.SourceAddrControl = ETH_SOURCEADDRESS_REPLACE_ADDR0;
 80031fa:	f04f 5340 	mov.w	r3, #805306368	@ 0x30000000
 80031fe:	62fb      	str	r3, [r7, #44]	@ 0x2c
  macDefaultConf.Speed = ETH_SPEED_100M;
 8003200:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8003204:	643b      	str	r3, [r7, #64]	@ 0x40
  macDefaultConf.Support2KPacket = DISABLE;
 8003206:	2300      	movs	r3, #0
 8003208:	f887 3039 	strb.w	r3, [r7, #57]	@ 0x39
  macDefaultConf.TransmitQueueMode = ETH_TRANSMITSTOREFORWARD;
 800320c:	2302      	movs	r3, #2
 800320e:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  macDefaultConf.TransmitFlowControl = DISABLE;
 8003212:	2300      	movs	r3, #0
 8003214:	f887 3080 	strb.w	r3, [r7, #128]	@ 0x80
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 8003218:	2300      	movs	r3, #0
 800321a:	f887 3081 	strb.w	r3, [r7, #129]	@ 0x81
  macDefaultConf.UnicastSlowProtocolPacketDetect = DISABLE;
 800321e:	2300      	movs	r3, #0
 8003220:	f887 305c 	strb.w	r3, [r7, #92]	@ 0x5c
  macDefaultConf.Watchdog = ENABLE;
 8003224:	2301      	movs	r3, #1
 8003226:	f887 303c 	strb.w	r3, [r7, #60]	@ 0x3c
  macDefaultConf.WatchdogTimeout =  ETH_MACWTR_WTO_2KB;
 800322a:	2300      	movs	r3, #0
 800322c:	673b      	str	r3, [r7, #112]	@ 0x70
  macDefaultConf.ZeroQuantaPause = ENABLE;
 800322e:	2301      	movs	r3, #1
 8003230:	f887 3078 	strb.w	r3, [r7, #120]	@ 0x78

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 8003234:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8003238:	4619      	mov	r1, r3
 800323a:	6878      	ldr	r0, [r7, #4]
 800323c:	f7ff fde6 	bl	8002e0c <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 8003240:	2301      	movs	r3, #1
 8003242:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 8003244:	2301      	movs	r3, #1
 8003246:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_RX1_TX1;
 8003248:	2300      	movs	r3, #0
 800324a:	60bb      	str	r3, [r7, #8]
  dmaDefaultConf.FlushRxPacket = DISABLE;
 800324c:	2300      	movs	r3, #0
 800324e:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
  dmaDefaultConf.PBLx8Mode = DISABLE;
 8003252:	2300      	movs	r3, #0
 8003254:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.RebuildINCRxBurst = DISABLE;
 8003256:	2300      	movs	r3, #0
 8003258:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 800325a:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 800325e:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.SecondPacketOperate = DISABLE;
 8003260:	2300      	movs	r3, #0
 8003262:	773b      	strb	r3, [r7, #28]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8003264:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8003268:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.TCPSegmentation = DISABLE;
 800326a:	2300      	movs	r3, #0
 800326c:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
  dmaDefaultConf.MaximumSegmentSize = ETH_SEGMENT_SIZE_DEFAULT;
 8003270:	f44f 7306 	mov.w	r3, #536	@ 0x218
 8003274:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 8003276:	f107 0308 	add.w	r3, r7, #8
 800327a:	4619      	mov	r1, r3
 800327c:	6878      	ldr	r0, [r7, #4]
 800327e:	f7ff fee1 	bl	8003044 <ETH_SetDMAConfig>
}
 8003282:	bf00      	nop
 8003284:	3790      	adds	r7, #144	@ 0x90
 8003286:	46bd      	mov	sp, r7
 8003288:	bd80      	pop	{r7, pc}

0800328a <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 800328a:	b480      	push	{r7}
 800328c:	b085      	sub	sp, #20
 800328e:	af00      	add	r7, sp, #0
 8003290:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8003292:	2300      	movs	r3, #0
 8003294:	60fb      	str	r3, [r7, #12]
 8003296:	e01d      	b.n	80032d4 <ETH_DMATxDescListInit+0x4a>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	68d9      	ldr	r1, [r3, #12]
 800329c:	68fa      	ldr	r2, [r7, #12]
 800329e:	4613      	mov	r3, r2
 80032a0:	005b      	lsls	r3, r3, #1
 80032a2:	4413      	add	r3, r2
 80032a4:	00db      	lsls	r3, r3, #3
 80032a6:	440b      	add	r3, r1
 80032a8:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0U);
 80032aa:	68bb      	ldr	r3, [r7, #8]
 80032ac:	2200      	movs	r2, #0
 80032ae:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0U);
 80032b0:	68bb      	ldr	r3, [r7, #8]
 80032b2:	2200      	movs	r2, #0
 80032b4:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0U);
 80032b6:	68bb      	ldr	r3, [r7, #8]
 80032b8:	2200      	movs	r2, #0
 80032ba:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0U);
 80032bc:	68bb      	ldr	r3, [r7, #8]
 80032be:	2200      	movs	r2, #0
 80032c0:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 80032c2:	68b9      	ldr	r1, [r7, #8]
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	68fa      	ldr	r2, [r7, #12]
 80032c8:	3206      	adds	r2, #6
 80032ca:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 80032ce:	68fb      	ldr	r3, [r7, #12]
 80032d0:	3301      	adds	r3, #1
 80032d2:	60fb      	str	r3, [r7, #12]
 80032d4:	68fb      	ldr	r3, [r7, #12]
 80032d6:	2b03      	cmp	r3, #3
 80032d8:	d9de      	bls.n	8003298 <ETH_DMATxDescListInit+0xe>

  }

  heth->TxDescList.CurTxDesc = 0;
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	2200      	movs	r2, #0
 80032de:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Set Transmit Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACTDRLR, (ETH_TX_DESC_CNT - 1U));
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80032e8:	461a      	mov	r2, r3
 80032ea:	2303      	movs	r3, #3
 80032ec:	f8c2 312c 	str.w	r3, [r2, #300]	@ 0x12c

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMACTDLAR, (uint32_t) heth->Init.TxDesc);
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	68da      	ldr	r2, [r3, #12]
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80032fc:	f8c3 2114 	str.w	r2, [r3, #276]	@ 0x114

  /* Set Transmit Descriptor Tail pointer */
  WRITE_REG(heth->Instance->DMACTDTPR, (uint32_t) heth->Init.TxDesc);
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	68da      	ldr	r2, [r3, #12]
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800330c:	f8c3 2120 	str.w	r2, [r3, #288]	@ 0x120
}
 8003310:	bf00      	nop
 8003312:	3714      	adds	r7, #20
 8003314:	46bd      	mov	sp, r7
 8003316:	f85d 7b04 	ldr.w	r7, [sp], #4
 800331a:	4770      	bx	lr

0800331c <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 800331c:	b480      	push	{r7}
 800331e:	b085      	sub	sp, #20
 8003320:	af00      	add	r7, sp, #0
 8003322:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8003324:	2300      	movs	r3, #0
 8003326:	60fb      	str	r3, [r7, #12]
 8003328:	e023      	b.n	8003372 <ETH_DMARxDescListInit+0x56>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	6919      	ldr	r1, [r3, #16]
 800332e:	68fa      	ldr	r2, [r7, #12]
 8003330:	4613      	mov	r3, r2
 8003332:	005b      	lsls	r3, r3, #1
 8003334:	4413      	add	r3, r2
 8003336:	00db      	lsls	r3, r3, #3
 8003338:	440b      	add	r3, r1
 800333a:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0U);
 800333c:	68bb      	ldr	r3, [r7, #8]
 800333e:	2200      	movs	r2, #0
 8003340:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0U);
 8003342:	68bb      	ldr	r3, [r7, #8]
 8003344:	2200      	movs	r2, #0
 8003346:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0U);
 8003348:	68bb      	ldr	r3, [r7, #8]
 800334a:	2200      	movs	r2, #0
 800334c:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0U);
 800334e:	68bb      	ldr	r3, [r7, #8]
 8003350:	2200      	movs	r2, #0
 8003352:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0U);
 8003354:	68bb      	ldr	r3, [r7, #8]
 8003356:	2200      	movs	r2, #0
 8003358:	611a      	str	r2, [r3, #16]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0U);
 800335a:	68bb      	ldr	r3, [r7, #8]
 800335c:	2200      	movs	r2, #0
 800335e:	615a      	str	r2, [r3, #20]

    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 8003360:	68b9      	ldr	r1, [r7, #8]
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	68fa      	ldr	r2, [r7, #12]
 8003366:	3212      	adds	r2, #18
 8003368:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 800336c:	68fb      	ldr	r3, [r7, #12]
 800336e:	3301      	adds	r3, #1
 8003370:	60fb      	str	r3, [r7, #12]
 8003372:	68fb      	ldr	r3, [r7, #12]
 8003374:	2b03      	cmp	r3, #3
 8003376:	d9d8      	bls.n	800332a <ETH_DMARxDescListInit+0xe>

  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0U);
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	2200      	movs	r2, #0
 800337c:	65da      	str	r2, [r3, #92]	@ 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0U);
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	2200      	movs	r2, #0
 8003382:	661a      	str	r2, [r3, #96]	@ 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0U);
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	2200      	movs	r2, #0
 8003388:	669a      	str	r2, [r3, #104]	@ 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0U);
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	2200      	movs	r2, #0
 800338e:	66da      	str	r2, [r3, #108]	@ 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0U);
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	2200      	movs	r2, #0
 8003394:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Set Receive Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACRDRLR, ((uint32_t)(ETH_RX_DESC_CNT - 1U)));
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800339e:	461a      	mov	r2, r3
 80033a0:	2303      	movs	r3, #3
 80033a2:	f8c2 3130 	str.w	r3, [r2, #304]	@ 0x130

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMACRDLAR, (uint32_t) heth->Init.RxDesc);
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	691a      	ldr	r2, [r3, #16]
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80033b2:	f8c3 211c 	str.w	r2, [r3, #284]	@ 0x11c

  /* Set Receive Descriptor Tail pointer Address */
  WRITE_REG(heth->Instance->DMACRDTPR, ((uint32_t)(heth->Init.RxDesc + (uint32_t)(ETH_RX_DESC_CNT - 1U))));
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	691b      	ldr	r3, [r3, #16]
 80033ba:	f103 0248 	add.w	r2, r3, #72	@ 0x48
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80033c6:	f8c3 2128 	str.w	r2, [r3, #296]	@ 0x128
}
 80033ca:	bf00      	nop
 80033cc:	3714      	adds	r7, #20
 80033ce:	46bd      	mov	sp, r7
 80033d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033d4:	4770      	bx	lr
	...

080033d8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80033d8:	b480      	push	{r7}
 80033da:	b089      	sub	sp, #36	@ 0x24
 80033dc:	af00      	add	r7, sp, #0
 80033de:	6078      	str	r0, [r7, #4]
 80033e0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80033e2:	2300      	movs	r3, #0
 80033e4:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 80033e6:	4b86      	ldr	r3, [pc, #536]	@ (8003600 <HAL_GPIO_Init+0x228>)
 80033e8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80033ea:	e18c      	b.n	8003706 <HAL_GPIO_Init+0x32e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80033ec:	683b      	ldr	r3, [r7, #0]
 80033ee:	681a      	ldr	r2, [r3, #0]
 80033f0:	2101      	movs	r1, #1
 80033f2:	69fb      	ldr	r3, [r7, #28]
 80033f4:	fa01 f303 	lsl.w	r3, r1, r3
 80033f8:	4013      	ands	r3, r2
 80033fa:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 80033fc:	693b      	ldr	r3, [r7, #16]
 80033fe:	2b00      	cmp	r3, #0
 8003400:	f000 817e 	beq.w	8003700 <HAL_GPIO_Init+0x328>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003404:	683b      	ldr	r3, [r7, #0]
 8003406:	685b      	ldr	r3, [r3, #4]
 8003408:	f003 0303 	and.w	r3, r3, #3
 800340c:	2b01      	cmp	r3, #1
 800340e:	d005      	beq.n	800341c <HAL_GPIO_Init+0x44>
 8003410:	683b      	ldr	r3, [r7, #0]
 8003412:	685b      	ldr	r3, [r3, #4]
 8003414:	f003 0303 	and.w	r3, r3, #3
 8003418:	2b02      	cmp	r3, #2
 800341a:	d130      	bne.n	800347e <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	689b      	ldr	r3, [r3, #8]
 8003420:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8003422:	69fb      	ldr	r3, [r7, #28]
 8003424:	005b      	lsls	r3, r3, #1
 8003426:	2203      	movs	r2, #3
 8003428:	fa02 f303 	lsl.w	r3, r2, r3
 800342c:	43db      	mvns	r3, r3
 800342e:	69ba      	ldr	r2, [r7, #24]
 8003430:	4013      	ands	r3, r2
 8003432:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003434:	683b      	ldr	r3, [r7, #0]
 8003436:	68da      	ldr	r2, [r3, #12]
 8003438:	69fb      	ldr	r3, [r7, #28]
 800343a:	005b      	lsls	r3, r3, #1
 800343c:	fa02 f303 	lsl.w	r3, r2, r3
 8003440:	69ba      	ldr	r2, [r7, #24]
 8003442:	4313      	orrs	r3, r2
 8003444:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	69ba      	ldr	r2, [r7, #24]
 800344a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	685b      	ldr	r3, [r3, #4]
 8003450:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003452:	2201      	movs	r2, #1
 8003454:	69fb      	ldr	r3, [r7, #28]
 8003456:	fa02 f303 	lsl.w	r3, r2, r3
 800345a:	43db      	mvns	r3, r3
 800345c:	69ba      	ldr	r2, [r7, #24]
 800345e:	4013      	ands	r3, r2
 8003460:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003462:	683b      	ldr	r3, [r7, #0]
 8003464:	685b      	ldr	r3, [r3, #4]
 8003466:	091b      	lsrs	r3, r3, #4
 8003468:	f003 0201 	and.w	r2, r3, #1
 800346c:	69fb      	ldr	r3, [r7, #28]
 800346e:	fa02 f303 	lsl.w	r3, r2, r3
 8003472:	69ba      	ldr	r2, [r7, #24]
 8003474:	4313      	orrs	r3, r2
 8003476:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	69ba      	ldr	r2, [r7, #24]
 800347c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800347e:	683b      	ldr	r3, [r7, #0]
 8003480:	685b      	ldr	r3, [r3, #4]
 8003482:	f003 0303 	and.w	r3, r3, #3
 8003486:	2b03      	cmp	r3, #3
 8003488:	d017      	beq.n	80034ba <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	68db      	ldr	r3, [r3, #12]
 800348e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8003490:	69fb      	ldr	r3, [r7, #28]
 8003492:	005b      	lsls	r3, r3, #1
 8003494:	2203      	movs	r2, #3
 8003496:	fa02 f303 	lsl.w	r3, r2, r3
 800349a:	43db      	mvns	r3, r3
 800349c:	69ba      	ldr	r2, [r7, #24]
 800349e:	4013      	ands	r3, r2
 80034a0:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80034a2:	683b      	ldr	r3, [r7, #0]
 80034a4:	689a      	ldr	r2, [r3, #8]
 80034a6:	69fb      	ldr	r3, [r7, #28]
 80034a8:	005b      	lsls	r3, r3, #1
 80034aa:	fa02 f303 	lsl.w	r3, r2, r3
 80034ae:	69ba      	ldr	r2, [r7, #24]
 80034b0:	4313      	orrs	r3, r2
 80034b2:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	69ba      	ldr	r2, [r7, #24]
 80034b8:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80034ba:	683b      	ldr	r3, [r7, #0]
 80034bc:	685b      	ldr	r3, [r3, #4]
 80034be:	f003 0303 	and.w	r3, r3, #3
 80034c2:	2b02      	cmp	r3, #2
 80034c4:	d123      	bne.n	800350e <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80034c6:	69fb      	ldr	r3, [r7, #28]
 80034c8:	08da      	lsrs	r2, r3, #3
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	3208      	adds	r2, #8
 80034ce:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80034d2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80034d4:	69fb      	ldr	r3, [r7, #28]
 80034d6:	f003 0307 	and.w	r3, r3, #7
 80034da:	009b      	lsls	r3, r3, #2
 80034dc:	220f      	movs	r2, #15
 80034de:	fa02 f303 	lsl.w	r3, r2, r3
 80034e2:	43db      	mvns	r3, r3
 80034e4:	69ba      	ldr	r2, [r7, #24]
 80034e6:	4013      	ands	r3, r2
 80034e8:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80034ea:	683b      	ldr	r3, [r7, #0]
 80034ec:	691a      	ldr	r2, [r3, #16]
 80034ee:	69fb      	ldr	r3, [r7, #28]
 80034f0:	f003 0307 	and.w	r3, r3, #7
 80034f4:	009b      	lsls	r3, r3, #2
 80034f6:	fa02 f303 	lsl.w	r3, r2, r3
 80034fa:	69ba      	ldr	r2, [r7, #24]
 80034fc:	4313      	orrs	r3, r2
 80034fe:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003500:	69fb      	ldr	r3, [r7, #28]
 8003502:	08da      	lsrs	r2, r3, #3
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	3208      	adds	r2, #8
 8003508:	69b9      	ldr	r1, [r7, #24]
 800350a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8003514:	69fb      	ldr	r3, [r7, #28]
 8003516:	005b      	lsls	r3, r3, #1
 8003518:	2203      	movs	r2, #3
 800351a:	fa02 f303 	lsl.w	r3, r2, r3
 800351e:	43db      	mvns	r3, r3
 8003520:	69ba      	ldr	r2, [r7, #24]
 8003522:	4013      	ands	r3, r2
 8003524:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003526:	683b      	ldr	r3, [r7, #0]
 8003528:	685b      	ldr	r3, [r3, #4]
 800352a:	f003 0203 	and.w	r2, r3, #3
 800352e:	69fb      	ldr	r3, [r7, #28]
 8003530:	005b      	lsls	r3, r3, #1
 8003532:	fa02 f303 	lsl.w	r3, r2, r3
 8003536:	69ba      	ldr	r2, [r7, #24]
 8003538:	4313      	orrs	r3, r2
 800353a:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	69ba      	ldr	r2, [r7, #24]
 8003540:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003542:	683b      	ldr	r3, [r7, #0]
 8003544:	685b      	ldr	r3, [r3, #4]
 8003546:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800354a:	2b00      	cmp	r3, #0
 800354c:	f000 80d8 	beq.w	8003700 <HAL_GPIO_Init+0x328>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003550:	4b2c      	ldr	r3, [pc, #176]	@ (8003604 <HAL_GPIO_Init+0x22c>)
 8003552:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8003556:	4a2b      	ldr	r2, [pc, #172]	@ (8003604 <HAL_GPIO_Init+0x22c>)
 8003558:	f043 0302 	orr.w	r3, r3, #2
 800355c:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8003560:	4b28      	ldr	r3, [pc, #160]	@ (8003604 <HAL_GPIO_Init+0x22c>)
 8003562:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8003566:	f003 0302 	and.w	r3, r3, #2
 800356a:	60fb      	str	r3, [r7, #12]
 800356c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800356e:	4a26      	ldr	r2, [pc, #152]	@ (8003608 <HAL_GPIO_Init+0x230>)
 8003570:	69fb      	ldr	r3, [r7, #28]
 8003572:	089b      	lsrs	r3, r3, #2
 8003574:	3302      	adds	r3, #2
 8003576:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800357a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800357c:	69fb      	ldr	r3, [r7, #28]
 800357e:	f003 0303 	and.w	r3, r3, #3
 8003582:	009b      	lsls	r3, r3, #2
 8003584:	220f      	movs	r2, #15
 8003586:	fa02 f303 	lsl.w	r3, r2, r3
 800358a:	43db      	mvns	r3, r3
 800358c:	69ba      	ldr	r2, [r7, #24]
 800358e:	4013      	ands	r3, r2
 8003590:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	4a1d      	ldr	r2, [pc, #116]	@ (800360c <HAL_GPIO_Init+0x234>)
 8003596:	4293      	cmp	r3, r2
 8003598:	d04a      	beq.n	8003630 <HAL_GPIO_Init+0x258>
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	4a1c      	ldr	r2, [pc, #112]	@ (8003610 <HAL_GPIO_Init+0x238>)
 800359e:	4293      	cmp	r3, r2
 80035a0:	d02b      	beq.n	80035fa <HAL_GPIO_Init+0x222>
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	4a1b      	ldr	r2, [pc, #108]	@ (8003614 <HAL_GPIO_Init+0x23c>)
 80035a6:	4293      	cmp	r3, r2
 80035a8:	d025      	beq.n	80035f6 <HAL_GPIO_Init+0x21e>
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	4a1a      	ldr	r2, [pc, #104]	@ (8003618 <HAL_GPIO_Init+0x240>)
 80035ae:	4293      	cmp	r3, r2
 80035b0:	d01f      	beq.n	80035f2 <HAL_GPIO_Init+0x21a>
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	4a19      	ldr	r2, [pc, #100]	@ (800361c <HAL_GPIO_Init+0x244>)
 80035b6:	4293      	cmp	r3, r2
 80035b8:	d019      	beq.n	80035ee <HAL_GPIO_Init+0x216>
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	4a18      	ldr	r2, [pc, #96]	@ (8003620 <HAL_GPIO_Init+0x248>)
 80035be:	4293      	cmp	r3, r2
 80035c0:	d013      	beq.n	80035ea <HAL_GPIO_Init+0x212>
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	4a17      	ldr	r2, [pc, #92]	@ (8003624 <HAL_GPIO_Init+0x24c>)
 80035c6:	4293      	cmp	r3, r2
 80035c8:	d00d      	beq.n	80035e6 <HAL_GPIO_Init+0x20e>
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	4a16      	ldr	r2, [pc, #88]	@ (8003628 <HAL_GPIO_Init+0x250>)
 80035ce:	4293      	cmp	r3, r2
 80035d0:	d007      	beq.n	80035e2 <HAL_GPIO_Init+0x20a>
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	4a15      	ldr	r2, [pc, #84]	@ (800362c <HAL_GPIO_Init+0x254>)
 80035d6:	4293      	cmp	r3, r2
 80035d8:	d101      	bne.n	80035de <HAL_GPIO_Init+0x206>
 80035da:	2309      	movs	r3, #9
 80035dc:	e029      	b.n	8003632 <HAL_GPIO_Init+0x25a>
 80035de:	230a      	movs	r3, #10
 80035e0:	e027      	b.n	8003632 <HAL_GPIO_Init+0x25a>
 80035e2:	2307      	movs	r3, #7
 80035e4:	e025      	b.n	8003632 <HAL_GPIO_Init+0x25a>
 80035e6:	2306      	movs	r3, #6
 80035e8:	e023      	b.n	8003632 <HAL_GPIO_Init+0x25a>
 80035ea:	2305      	movs	r3, #5
 80035ec:	e021      	b.n	8003632 <HAL_GPIO_Init+0x25a>
 80035ee:	2304      	movs	r3, #4
 80035f0:	e01f      	b.n	8003632 <HAL_GPIO_Init+0x25a>
 80035f2:	2303      	movs	r3, #3
 80035f4:	e01d      	b.n	8003632 <HAL_GPIO_Init+0x25a>
 80035f6:	2302      	movs	r3, #2
 80035f8:	e01b      	b.n	8003632 <HAL_GPIO_Init+0x25a>
 80035fa:	2301      	movs	r3, #1
 80035fc:	e019      	b.n	8003632 <HAL_GPIO_Init+0x25a>
 80035fe:	bf00      	nop
 8003600:	58000080 	.word	0x58000080
 8003604:	58024400 	.word	0x58024400
 8003608:	58000400 	.word	0x58000400
 800360c:	58020000 	.word	0x58020000
 8003610:	58020400 	.word	0x58020400
 8003614:	58020800 	.word	0x58020800
 8003618:	58020c00 	.word	0x58020c00
 800361c:	58021000 	.word	0x58021000
 8003620:	58021400 	.word	0x58021400
 8003624:	58021800 	.word	0x58021800
 8003628:	58021c00 	.word	0x58021c00
 800362c:	58022400 	.word	0x58022400
 8003630:	2300      	movs	r3, #0
 8003632:	69fa      	ldr	r2, [r7, #28]
 8003634:	f002 0203 	and.w	r2, r2, #3
 8003638:	0092      	lsls	r2, r2, #2
 800363a:	4093      	lsls	r3, r2
 800363c:	69ba      	ldr	r2, [r7, #24]
 800363e:	4313      	orrs	r3, r2
 8003640:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003642:	4938      	ldr	r1, [pc, #224]	@ (8003724 <HAL_GPIO_Init+0x34c>)
 8003644:	69fb      	ldr	r3, [r7, #28]
 8003646:	089b      	lsrs	r3, r3, #2
 8003648:	3302      	adds	r3, #2
 800364a:	69ba      	ldr	r2, [r7, #24]
 800364c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003650:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8003658:	693b      	ldr	r3, [r7, #16]
 800365a:	43db      	mvns	r3, r3
 800365c:	69ba      	ldr	r2, [r7, #24]
 800365e:	4013      	ands	r3, r2
 8003660:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003662:	683b      	ldr	r3, [r7, #0]
 8003664:	685b      	ldr	r3, [r3, #4]
 8003666:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800366a:	2b00      	cmp	r3, #0
 800366c:	d003      	beq.n	8003676 <HAL_GPIO_Init+0x29e>
        {
          temp |= iocurrent;
 800366e:	69ba      	ldr	r2, [r7, #24]
 8003670:	693b      	ldr	r3, [r7, #16]
 8003672:	4313      	orrs	r3, r2
 8003674:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8003676:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800367a:	69bb      	ldr	r3, [r7, #24]
 800367c:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 800367e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003682:	685b      	ldr	r3, [r3, #4]
 8003684:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8003686:	693b      	ldr	r3, [r7, #16]
 8003688:	43db      	mvns	r3, r3
 800368a:	69ba      	ldr	r2, [r7, #24]
 800368c:	4013      	ands	r3, r2
 800368e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003690:	683b      	ldr	r3, [r7, #0]
 8003692:	685b      	ldr	r3, [r3, #4]
 8003694:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003698:	2b00      	cmp	r3, #0
 800369a:	d003      	beq.n	80036a4 <HAL_GPIO_Init+0x2cc>
        {
          temp |= iocurrent;
 800369c:	69ba      	ldr	r2, [r7, #24]
 800369e:	693b      	ldr	r3, [r7, #16]
 80036a0:	4313      	orrs	r3, r2
 80036a2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 80036a4:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80036a8:	69bb      	ldr	r3, [r7, #24]
 80036aa:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 80036ac:	697b      	ldr	r3, [r7, #20]
 80036ae:	685b      	ldr	r3, [r3, #4]
 80036b0:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80036b2:	693b      	ldr	r3, [r7, #16]
 80036b4:	43db      	mvns	r3, r3
 80036b6:	69ba      	ldr	r2, [r7, #24]
 80036b8:	4013      	ands	r3, r2
 80036ba:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80036bc:	683b      	ldr	r3, [r7, #0]
 80036be:	685b      	ldr	r3, [r3, #4]
 80036c0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80036c4:	2b00      	cmp	r3, #0
 80036c6:	d003      	beq.n	80036d0 <HAL_GPIO_Init+0x2f8>
        {
          temp |= iocurrent;
 80036c8:	69ba      	ldr	r2, [r7, #24]
 80036ca:	693b      	ldr	r3, [r7, #16]
 80036cc:	4313      	orrs	r3, r2
 80036ce:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 80036d0:	697b      	ldr	r3, [r7, #20]
 80036d2:	69ba      	ldr	r2, [r7, #24]
 80036d4:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 80036d6:	697b      	ldr	r3, [r7, #20]
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80036dc:	693b      	ldr	r3, [r7, #16]
 80036de:	43db      	mvns	r3, r3
 80036e0:	69ba      	ldr	r2, [r7, #24]
 80036e2:	4013      	ands	r3, r2
 80036e4:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80036e6:	683b      	ldr	r3, [r7, #0]
 80036e8:	685b      	ldr	r3, [r3, #4]
 80036ea:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80036ee:	2b00      	cmp	r3, #0
 80036f0:	d003      	beq.n	80036fa <HAL_GPIO_Init+0x322>
        {
          temp |= iocurrent;
 80036f2:	69ba      	ldr	r2, [r7, #24]
 80036f4:	693b      	ldr	r3, [r7, #16]
 80036f6:	4313      	orrs	r3, r2
 80036f8:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 80036fa:	697b      	ldr	r3, [r7, #20]
 80036fc:	69ba      	ldr	r2, [r7, #24]
 80036fe:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8003700:	69fb      	ldr	r3, [r7, #28]
 8003702:	3301      	adds	r3, #1
 8003704:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8003706:	683b      	ldr	r3, [r7, #0]
 8003708:	681a      	ldr	r2, [r3, #0]
 800370a:	69fb      	ldr	r3, [r7, #28]
 800370c:	fa22 f303 	lsr.w	r3, r2, r3
 8003710:	2b00      	cmp	r3, #0
 8003712:	f47f ae6b 	bne.w	80033ec <HAL_GPIO_Init+0x14>
  }
}
 8003716:	bf00      	nop
 8003718:	bf00      	nop
 800371a:	3724      	adds	r7, #36	@ 0x24
 800371c:	46bd      	mov	sp, r7
 800371e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003722:	4770      	bx	lr
 8003724:	58000400 	.word	0x58000400

08003728 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003728:	b480      	push	{r7}
 800372a:	b083      	sub	sp, #12
 800372c:	af00      	add	r7, sp, #0
 800372e:	6078      	str	r0, [r7, #4]
 8003730:	460b      	mov	r3, r1
 8003732:	807b      	strh	r3, [r7, #2]
 8003734:	4613      	mov	r3, r2
 8003736:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003738:	787b      	ldrb	r3, [r7, #1]
 800373a:	2b00      	cmp	r3, #0
 800373c:	d003      	beq.n	8003746 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800373e:	887a      	ldrh	r2, [r7, #2]
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8003744:	e003      	b.n	800374e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8003746:	887b      	ldrh	r3, [r7, #2]
 8003748:	041a      	lsls	r2, r3, #16
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	619a      	str	r2, [r3, #24]
}
 800374e:	bf00      	nop
 8003750:	370c      	adds	r7, #12
 8003752:	46bd      	mov	sp, r7
 8003754:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003758:	4770      	bx	lr
	...

0800375c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800375c:	b580      	push	{r7, lr}
 800375e:	b082      	sub	sp, #8
 8003760:	af00      	add	r7, sp, #0
 8003762:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	2b00      	cmp	r3, #0
 8003768:	d101      	bne.n	800376e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800376a:	2301      	movs	r3, #1
 800376c:	e08b      	b.n	8003886 <HAL_I2C_Init+0x12a>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003774:	b2db      	uxtb	r3, r3
 8003776:	2b00      	cmp	r3, #0
 8003778:	d106      	bne.n	8003788 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	2200      	movs	r2, #0
 800377e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8003782:	6878      	ldr	r0, [r7, #4]
 8003784:	f7fe f9f4 	bl	8001b70 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	2224      	movs	r2, #36	@ 0x24
 800378c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	681a      	ldr	r2, [r3, #0]
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	f022 0201 	bic.w	r2, r2, #1
 800379e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	685a      	ldr	r2, [r3, #4]
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80037ac:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	689a      	ldr	r2, [r3, #8]
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80037bc:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	68db      	ldr	r3, [r3, #12]
 80037c2:	2b01      	cmp	r3, #1
 80037c4:	d107      	bne.n	80037d6 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	689a      	ldr	r2, [r3, #8]
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80037d2:	609a      	str	r2, [r3, #8]
 80037d4:	e006      	b.n	80037e4 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	689a      	ldr	r2, [r3, #8]
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 80037e2:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	68db      	ldr	r3, [r3, #12]
 80037e8:	2b02      	cmp	r3, #2
 80037ea:	d108      	bne.n	80037fe <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	685a      	ldr	r2, [r3, #4]
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80037fa:	605a      	str	r2, [r3, #4]
 80037fc:	e007      	b.n	800380e <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	685a      	ldr	r2, [r3, #4]
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800380c:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	6859      	ldr	r1, [r3, #4]
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	681a      	ldr	r2, [r3, #0]
 8003818:	4b1d      	ldr	r3, [pc, #116]	@ (8003890 <HAL_I2C_Init+0x134>)
 800381a:	430b      	orrs	r3, r1
 800381c:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	68da      	ldr	r2, [r3, #12]
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800382c:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	691a      	ldr	r2, [r3, #16]
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	695b      	ldr	r3, [r3, #20]
 8003836:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	699b      	ldr	r3, [r3, #24]
 800383e:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	430a      	orrs	r2, r1
 8003846:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	69d9      	ldr	r1, [r3, #28]
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	6a1a      	ldr	r2, [r3, #32]
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	430a      	orrs	r2, r1
 8003856:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	681a      	ldr	r2, [r3, #0]
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	f042 0201 	orr.w	r2, r2, #1
 8003866:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	2200      	movs	r2, #0
 800386c:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	2220      	movs	r2, #32
 8003872:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	2200      	movs	r2, #0
 800387a:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	2200      	movs	r2, #0
 8003880:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8003884:	2300      	movs	r3, #0
}
 8003886:	4618      	mov	r0, r3
 8003888:	3708      	adds	r7, #8
 800388a:	46bd      	mov	sp, r7
 800388c:	bd80      	pop	{r7, pc}
 800388e:	bf00      	nop
 8003890:	02008000 	.word	0x02008000

08003894 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8003894:	b480      	push	{r7}
 8003896:	b083      	sub	sp, #12
 8003898:	af00      	add	r7, sp, #0
 800389a:	6078      	str	r0, [r7, #4]
 800389c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80038a4:	b2db      	uxtb	r3, r3
 80038a6:	2b20      	cmp	r3, #32
 80038a8:	d138      	bne.n	800391c <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80038b0:	2b01      	cmp	r3, #1
 80038b2:	d101      	bne.n	80038b8 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80038b4:	2302      	movs	r3, #2
 80038b6:	e032      	b.n	800391e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	2201      	movs	r2, #1
 80038bc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	2224      	movs	r2, #36	@ 0x24
 80038c4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	681a      	ldr	r2, [r3, #0]
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	f022 0201 	bic.w	r2, r2, #1
 80038d6:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	681a      	ldr	r2, [r3, #0]
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80038e6:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	6819      	ldr	r1, [r3, #0]
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	683a      	ldr	r2, [r7, #0]
 80038f4:	430a      	orrs	r2, r1
 80038f6:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	681a      	ldr	r2, [r3, #0]
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	f042 0201 	orr.w	r2, r2, #1
 8003906:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	2220      	movs	r2, #32
 800390c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	2200      	movs	r2, #0
 8003914:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8003918:	2300      	movs	r3, #0
 800391a:	e000      	b.n	800391e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800391c:	2302      	movs	r3, #2
  }
}
 800391e:	4618      	mov	r0, r3
 8003920:	370c      	adds	r7, #12
 8003922:	46bd      	mov	sp, r7
 8003924:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003928:	4770      	bx	lr

0800392a <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800392a:	b480      	push	{r7}
 800392c:	b085      	sub	sp, #20
 800392e:	af00      	add	r7, sp, #0
 8003930:	6078      	str	r0, [r7, #4]
 8003932:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800393a:	b2db      	uxtb	r3, r3
 800393c:	2b20      	cmp	r3, #32
 800393e:	d139      	bne.n	80039b4 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003946:	2b01      	cmp	r3, #1
 8003948:	d101      	bne.n	800394e <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800394a:	2302      	movs	r3, #2
 800394c:	e033      	b.n	80039b6 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	2201      	movs	r2, #1
 8003952:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	2224      	movs	r2, #36	@ 0x24
 800395a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	681a      	ldr	r2, [r3, #0]
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	f022 0201 	bic.w	r2, r2, #1
 800396c:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8003976:	68fb      	ldr	r3, [r7, #12]
 8003978:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 800397c:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800397e:	683b      	ldr	r3, [r7, #0]
 8003980:	021b      	lsls	r3, r3, #8
 8003982:	68fa      	ldr	r2, [r7, #12]
 8003984:	4313      	orrs	r3, r2
 8003986:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	68fa      	ldr	r2, [r7, #12]
 800398e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	681a      	ldr	r2, [r3, #0]
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	f042 0201 	orr.w	r2, r2, #1
 800399e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	2220      	movs	r2, #32
 80039a4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	2200      	movs	r2, #0
 80039ac:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80039b0:	2300      	movs	r3, #0
 80039b2:	e000      	b.n	80039b6 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80039b4:	2302      	movs	r3, #2
  }
}
 80039b6:	4618      	mov	r0, r3
 80039b8:	3714      	adds	r7, #20
 80039ba:	46bd      	mov	sp, r7
 80039bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039c0:	4770      	bx	lr
	...

080039c4 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 80039c4:	b580      	push	{r7, lr}
 80039c6:	b084      	sub	sp, #16
 80039c8:	af00      	add	r7, sp, #0
 80039ca:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 80039cc:	4b29      	ldr	r3, [pc, #164]	@ (8003a74 <HAL_PWREx_ConfigSupply+0xb0>)
 80039ce:	68db      	ldr	r3, [r3, #12]
 80039d0:	f003 0307 	and.w	r3, r3, #7
 80039d4:	2b06      	cmp	r3, #6
 80039d6:	d00a      	beq.n	80039ee <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 80039d8:	4b26      	ldr	r3, [pc, #152]	@ (8003a74 <HAL_PWREx_ConfigSupply+0xb0>)
 80039da:	68db      	ldr	r3, [r3, #12]
 80039dc:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80039e0:	687a      	ldr	r2, [r7, #4]
 80039e2:	429a      	cmp	r2, r3
 80039e4:	d001      	beq.n	80039ea <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 80039e6:	2301      	movs	r3, #1
 80039e8:	e03f      	b.n	8003a6a <HAL_PWREx_ConfigSupply+0xa6>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 80039ea:	2300      	movs	r3, #0
 80039ec:	e03d      	b.n	8003a6a <HAL_PWREx_ConfigSupply+0xa6>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 80039ee:	4b21      	ldr	r3, [pc, #132]	@ (8003a74 <HAL_PWREx_ConfigSupply+0xb0>)
 80039f0:	68db      	ldr	r3, [r3, #12]
 80039f2:	f023 023f 	bic.w	r2, r3, #63	@ 0x3f
 80039f6:	491f      	ldr	r1, [pc, #124]	@ (8003a74 <HAL_PWREx_ConfigSupply+0xb0>)
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	4313      	orrs	r3, r2
 80039fc:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 80039fe:	f7fe fe0f 	bl	8002620 <HAL_GetTick>
 8003a02:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8003a04:	e009      	b.n	8003a1a <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8003a06:	f7fe fe0b 	bl	8002620 <HAL_GetTick>
 8003a0a:	4602      	mov	r2, r0
 8003a0c:	68fb      	ldr	r3, [r7, #12]
 8003a0e:	1ad3      	subs	r3, r2, r3
 8003a10:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8003a14:	d901      	bls.n	8003a1a <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8003a16:	2301      	movs	r3, #1
 8003a18:	e027      	b.n	8003a6a <HAL_PWREx_ConfigSupply+0xa6>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8003a1a:	4b16      	ldr	r3, [pc, #88]	@ (8003a74 <HAL_PWREx_ConfigSupply+0xb0>)
 8003a1c:	685b      	ldr	r3, [r3, #4]
 8003a1e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003a22:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003a26:	d1ee      	bne.n	8003a06 <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	2b1e      	cmp	r3, #30
 8003a2c:	d008      	beq.n	8003a40 <HAL_PWREx_ConfigSupply+0x7c>
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	2b2e      	cmp	r3, #46	@ 0x2e
 8003a32:	d005      	beq.n	8003a40 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	2b1d      	cmp	r3, #29
 8003a38:	d002      	beq.n	8003a40 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	2b2d      	cmp	r3, #45	@ 0x2d
 8003a3e:	d113      	bne.n	8003a68 <HAL_PWREx_ConfigSupply+0xa4>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 8003a40:	f7fe fdee 	bl	8002620 <HAL_GetTick>
 8003a44:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8003a46:	e009      	b.n	8003a5c <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8003a48:	f7fe fdea 	bl	8002620 <HAL_GetTick>
 8003a4c:	4602      	mov	r2, r0
 8003a4e:	68fb      	ldr	r3, [r7, #12]
 8003a50:	1ad3      	subs	r3, r2, r3
 8003a52:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8003a56:	d901      	bls.n	8003a5c <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 8003a58:	2301      	movs	r3, #1
 8003a5a:	e006      	b.n	8003a6a <HAL_PWREx_ConfigSupply+0xa6>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8003a5c:	4b05      	ldr	r3, [pc, #20]	@ (8003a74 <HAL_PWREx_ConfigSupply+0xb0>)
 8003a5e:	68db      	ldr	r3, [r3, #12]
 8003a60:	f003 0311 	and.w	r3, r3, #17
 8003a64:	2b11      	cmp	r3, #17
 8003a66:	d1ef      	bne.n	8003a48 <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8003a68:	2300      	movs	r3, #0
}
 8003a6a:	4618      	mov	r0, r3
 8003a6c:	3710      	adds	r7, #16
 8003a6e:	46bd      	mov	sp, r7
 8003a70:	bd80      	pop	{r7, pc}
 8003a72:	bf00      	nop
 8003a74:	58024800 	.word	0x58024800

08003a78 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003a78:	b580      	push	{r7, lr}
 8003a7a:	b08c      	sub	sp, #48	@ 0x30
 8003a7c:	af00      	add	r7, sp, #0
 8003a7e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	2b00      	cmp	r3, #0
 8003a84:	d101      	bne.n	8003a8a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003a86:	2301      	movs	r3, #1
 8003a88:	e3c8      	b.n	800421c <HAL_RCC_OscConfig+0x7a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	f003 0301 	and.w	r3, r3, #1
 8003a92:	2b00      	cmp	r3, #0
 8003a94:	f000 8087 	beq.w	8003ba6 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003a98:	4b88      	ldr	r3, [pc, #544]	@ (8003cbc <HAL_RCC_OscConfig+0x244>)
 8003a9a:	691b      	ldr	r3, [r3, #16]
 8003a9c:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8003aa0:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8003aa2:	4b86      	ldr	r3, [pc, #536]	@ (8003cbc <HAL_RCC_OscConfig+0x244>)
 8003aa4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003aa6:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8003aa8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003aaa:	2b10      	cmp	r3, #16
 8003aac:	d007      	beq.n	8003abe <HAL_RCC_OscConfig+0x46>
 8003aae:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003ab0:	2b18      	cmp	r3, #24
 8003ab2:	d110      	bne.n	8003ad6 <HAL_RCC_OscConfig+0x5e>
 8003ab4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003ab6:	f003 0303 	and.w	r3, r3, #3
 8003aba:	2b02      	cmp	r3, #2
 8003abc:	d10b      	bne.n	8003ad6 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003abe:	4b7f      	ldr	r3, [pc, #508]	@ (8003cbc <HAL_RCC_OscConfig+0x244>)
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003ac6:	2b00      	cmp	r3, #0
 8003ac8:	d06c      	beq.n	8003ba4 <HAL_RCC_OscConfig+0x12c>
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	685b      	ldr	r3, [r3, #4]
 8003ace:	2b00      	cmp	r3, #0
 8003ad0:	d168      	bne.n	8003ba4 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8003ad2:	2301      	movs	r3, #1
 8003ad4:	e3a2      	b.n	800421c <HAL_RCC_OscConfig+0x7a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	685b      	ldr	r3, [r3, #4]
 8003ada:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003ade:	d106      	bne.n	8003aee <HAL_RCC_OscConfig+0x76>
 8003ae0:	4b76      	ldr	r3, [pc, #472]	@ (8003cbc <HAL_RCC_OscConfig+0x244>)
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	4a75      	ldr	r2, [pc, #468]	@ (8003cbc <HAL_RCC_OscConfig+0x244>)
 8003ae6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003aea:	6013      	str	r3, [r2, #0]
 8003aec:	e02e      	b.n	8003b4c <HAL_RCC_OscConfig+0xd4>
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	685b      	ldr	r3, [r3, #4]
 8003af2:	2b00      	cmp	r3, #0
 8003af4:	d10c      	bne.n	8003b10 <HAL_RCC_OscConfig+0x98>
 8003af6:	4b71      	ldr	r3, [pc, #452]	@ (8003cbc <HAL_RCC_OscConfig+0x244>)
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	4a70      	ldr	r2, [pc, #448]	@ (8003cbc <HAL_RCC_OscConfig+0x244>)
 8003afc:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003b00:	6013      	str	r3, [r2, #0]
 8003b02:	4b6e      	ldr	r3, [pc, #440]	@ (8003cbc <HAL_RCC_OscConfig+0x244>)
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	4a6d      	ldr	r2, [pc, #436]	@ (8003cbc <HAL_RCC_OscConfig+0x244>)
 8003b08:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003b0c:	6013      	str	r3, [r2, #0]
 8003b0e:	e01d      	b.n	8003b4c <HAL_RCC_OscConfig+0xd4>
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	685b      	ldr	r3, [r3, #4]
 8003b14:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003b18:	d10c      	bne.n	8003b34 <HAL_RCC_OscConfig+0xbc>
 8003b1a:	4b68      	ldr	r3, [pc, #416]	@ (8003cbc <HAL_RCC_OscConfig+0x244>)
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	4a67      	ldr	r2, [pc, #412]	@ (8003cbc <HAL_RCC_OscConfig+0x244>)
 8003b20:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003b24:	6013      	str	r3, [r2, #0]
 8003b26:	4b65      	ldr	r3, [pc, #404]	@ (8003cbc <HAL_RCC_OscConfig+0x244>)
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	4a64      	ldr	r2, [pc, #400]	@ (8003cbc <HAL_RCC_OscConfig+0x244>)
 8003b2c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003b30:	6013      	str	r3, [r2, #0]
 8003b32:	e00b      	b.n	8003b4c <HAL_RCC_OscConfig+0xd4>
 8003b34:	4b61      	ldr	r3, [pc, #388]	@ (8003cbc <HAL_RCC_OscConfig+0x244>)
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	4a60      	ldr	r2, [pc, #384]	@ (8003cbc <HAL_RCC_OscConfig+0x244>)
 8003b3a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003b3e:	6013      	str	r3, [r2, #0]
 8003b40:	4b5e      	ldr	r3, [pc, #376]	@ (8003cbc <HAL_RCC_OscConfig+0x244>)
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	4a5d      	ldr	r2, [pc, #372]	@ (8003cbc <HAL_RCC_OscConfig+0x244>)
 8003b46:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003b4a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	685b      	ldr	r3, [r3, #4]
 8003b50:	2b00      	cmp	r3, #0
 8003b52:	d013      	beq.n	8003b7c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b54:	f7fe fd64 	bl	8002620 <HAL_GetTick>
 8003b58:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003b5a:	e008      	b.n	8003b6e <HAL_RCC_OscConfig+0xf6>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003b5c:	f7fe fd60 	bl	8002620 <HAL_GetTick>
 8003b60:	4602      	mov	r2, r0
 8003b62:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b64:	1ad3      	subs	r3, r2, r3
 8003b66:	2b64      	cmp	r3, #100	@ 0x64
 8003b68:	d901      	bls.n	8003b6e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8003b6a:	2303      	movs	r3, #3
 8003b6c:	e356      	b.n	800421c <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003b6e:	4b53      	ldr	r3, [pc, #332]	@ (8003cbc <HAL_RCC_OscConfig+0x244>)
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003b76:	2b00      	cmp	r3, #0
 8003b78:	d0f0      	beq.n	8003b5c <HAL_RCC_OscConfig+0xe4>
 8003b7a:	e014      	b.n	8003ba6 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b7c:	f7fe fd50 	bl	8002620 <HAL_GetTick>
 8003b80:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8003b82:	e008      	b.n	8003b96 <HAL_RCC_OscConfig+0x11e>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003b84:	f7fe fd4c 	bl	8002620 <HAL_GetTick>
 8003b88:	4602      	mov	r2, r0
 8003b8a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b8c:	1ad3      	subs	r3, r2, r3
 8003b8e:	2b64      	cmp	r3, #100	@ 0x64
 8003b90:	d901      	bls.n	8003b96 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8003b92:	2303      	movs	r3, #3
 8003b94:	e342      	b.n	800421c <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8003b96:	4b49      	ldr	r3, [pc, #292]	@ (8003cbc <HAL_RCC_OscConfig+0x244>)
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003b9e:	2b00      	cmp	r3, #0
 8003ba0:	d1f0      	bne.n	8003b84 <HAL_RCC_OscConfig+0x10c>
 8003ba2:	e000      	b.n	8003ba6 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003ba4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	f003 0302 	and.w	r3, r3, #2
 8003bae:	2b00      	cmp	r3, #0
 8003bb0:	f000 808c 	beq.w	8003ccc <HAL_RCC_OscConfig+0x254>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003bb4:	4b41      	ldr	r3, [pc, #260]	@ (8003cbc <HAL_RCC_OscConfig+0x244>)
 8003bb6:	691b      	ldr	r3, [r3, #16]
 8003bb8:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8003bbc:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8003bbe:	4b3f      	ldr	r3, [pc, #252]	@ (8003cbc <HAL_RCC_OscConfig+0x244>)
 8003bc0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003bc2:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8003bc4:	6a3b      	ldr	r3, [r7, #32]
 8003bc6:	2b00      	cmp	r3, #0
 8003bc8:	d007      	beq.n	8003bda <HAL_RCC_OscConfig+0x162>
 8003bca:	6a3b      	ldr	r3, [r7, #32]
 8003bcc:	2b18      	cmp	r3, #24
 8003bce:	d137      	bne.n	8003c40 <HAL_RCC_OscConfig+0x1c8>
 8003bd0:	69fb      	ldr	r3, [r7, #28]
 8003bd2:	f003 0303 	and.w	r3, r3, #3
 8003bd6:	2b00      	cmp	r3, #0
 8003bd8:	d132      	bne.n	8003c40 <HAL_RCC_OscConfig+0x1c8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003bda:	4b38      	ldr	r3, [pc, #224]	@ (8003cbc <HAL_RCC_OscConfig+0x244>)
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	f003 0304 	and.w	r3, r3, #4
 8003be2:	2b00      	cmp	r3, #0
 8003be4:	d005      	beq.n	8003bf2 <HAL_RCC_OscConfig+0x17a>
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	68db      	ldr	r3, [r3, #12]
 8003bea:	2b00      	cmp	r3, #0
 8003bec:	d101      	bne.n	8003bf2 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8003bee:	2301      	movs	r3, #1
 8003bf0:	e314      	b.n	800421c <HAL_RCC_OscConfig+0x7a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8003bf2:	4b32      	ldr	r3, [pc, #200]	@ (8003cbc <HAL_RCC_OscConfig+0x244>)
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	f023 0219 	bic.w	r2, r3, #25
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	68db      	ldr	r3, [r3, #12]
 8003bfe:	492f      	ldr	r1, [pc, #188]	@ (8003cbc <HAL_RCC_OscConfig+0x244>)
 8003c00:	4313      	orrs	r3, r2
 8003c02:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c04:	f7fe fd0c 	bl	8002620 <HAL_GetTick>
 8003c08:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003c0a:	e008      	b.n	8003c1e <HAL_RCC_OscConfig+0x1a6>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003c0c:	f7fe fd08 	bl	8002620 <HAL_GetTick>
 8003c10:	4602      	mov	r2, r0
 8003c12:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c14:	1ad3      	subs	r3, r2, r3
 8003c16:	2b02      	cmp	r3, #2
 8003c18:	d901      	bls.n	8003c1e <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 8003c1a:	2303      	movs	r3, #3
 8003c1c:	e2fe      	b.n	800421c <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003c1e:	4b27      	ldr	r3, [pc, #156]	@ (8003cbc <HAL_RCC_OscConfig+0x244>)
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	f003 0304 	and.w	r3, r3, #4
 8003c26:	2b00      	cmp	r3, #0
 8003c28:	d0f0      	beq.n	8003c0c <HAL_RCC_OscConfig+0x194>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003c2a:	4b24      	ldr	r3, [pc, #144]	@ (8003cbc <HAL_RCC_OscConfig+0x244>)
 8003c2c:	685b      	ldr	r3, [r3, #4]
 8003c2e:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	691b      	ldr	r3, [r3, #16]
 8003c36:	061b      	lsls	r3, r3, #24
 8003c38:	4920      	ldr	r1, [pc, #128]	@ (8003cbc <HAL_RCC_OscConfig+0x244>)
 8003c3a:	4313      	orrs	r3, r2
 8003c3c:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003c3e:	e045      	b.n	8003ccc <HAL_RCC_OscConfig+0x254>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	68db      	ldr	r3, [r3, #12]
 8003c44:	2b00      	cmp	r3, #0
 8003c46:	d026      	beq.n	8003c96 <HAL_RCC_OscConfig+0x21e>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8003c48:	4b1c      	ldr	r3, [pc, #112]	@ (8003cbc <HAL_RCC_OscConfig+0x244>)
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	f023 0219 	bic.w	r2, r3, #25
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	68db      	ldr	r3, [r3, #12]
 8003c54:	4919      	ldr	r1, [pc, #100]	@ (8003cbc <HAL_RCC_OscConfig+0x244>)
 8003c56:	4313      	orrs	r3, r2
 8003c58:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c5a:	f7fe fce1 	bl	8002620 <HAL_GetTick>
 8003c5e:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003c60:	e008      	b.n	8003c74 <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003c62:	f7fe fcdd 	bl	8002620 <HAL_GetTick>
 8003c66:	4602      	mov	r2, r0
 8003c68:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c6a:	1ad3      	subs	r3, r2, r3
 8003c6c:	2b02      	cmp	r3, #2
 8003c6e:	d901      	bls.n	8003c74 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 8003c70:	2303      	movs	r3, #3
 8003c72:	e2d3      	b.n	800421c <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003c74:	4b11      	ldr	r3, [pc, #68]	@ (8003cbc <HAL_RCC_OscConfig+0x244>)
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	f003 0304 	and.w	r3, r3, #4
 8003c7c:	2b00      	cmp	r3, #0
 8003c7e:	d0f0      	beq.n	8003c62 <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003c80:	4b0e      	ldr	r3, [pc, #56]	@ (8003cbc <HAL_RCC_OscConfig+0x244>)
 8003c82:	685b      	ldr	r3, [r3, #4]
 8003c84:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	691b      	ldr	r3, [r3, #16]
 8003c8c:	061b      	lsls	r3, r3, #24
 8003c8e:	490b      	ldr	r1, [pc, #44]	@ (8003cbc <HAL_RCC_OscConfig+0x244>)
 8003c90:	4313      	orrs	r3, r2
 8003c92:	604b      	str	r3, [r1, #4]
 8003c94:	e01a      	b.n	8003ccc <HAL_RCC_OscConfig+0x254>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003c96:	4b09      	ldr	r3, [pc, #36]	@ (8003cbc <HAL_RCC_OscConfig+0x244>)
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	4a08      	ldr	r2, [pc, #32]	@ (8003cbc <HAL_RCC_OscConfig+0x244>)
 8003c9c:	f023 0301 	bic.w	r3, r3, #1
 8003ca0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ca2:	f7fe fcbd 	bl	8002620 <HAL_GetTick>
 8003ca6:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8003ca8:	e00a      	b.n	8003cc0 <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003caa:	f7fe fcb9 	bl	8002620 <HAL_GetTick>
 8003cae:	4602      	mov	r2, r0
 8003cb0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003cb2:	1ad3      	subs	r3, r2, r3
 8003cb4:	2b02      	cmp	r3, #2
 8003cb6:	d903      	bls.n	8003cc0 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 8003cb8:	2303      	movs	r3, #3
 8003cba:	e2af      	b.n	800421c <HAL_RCC_OscConfig+0x7a4>
 8003cbc:	58024400 	.word	0x58024400
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8003cc0:	4b96      	ldr	r3, [pc, #600]	@ (8003f1c <HAL_RCC_OscConfig+0x4a4>)
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	f003 0304 	and.w	r3, r3, #4
 8003cc8:	2b00      	cmp	r3, #0
 8003cca:	d1ee      	bne.n	8003caa <HAL_RCC_OscConfig+0x232>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	f003 0310 	and.w	r3, r3, #16
 8003cd4:	2b00      	cmp	r3, #0
 8003cd6:	d06a      	beq.n	8003dae <HAL_RCC_OscConfig+0x336>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003cd8:	4b90      	ldr	r3, [pc, #576]	@ (8003f1c <HAL_RCC_OscConfig+0x4a4>)
 8003cda:	691b      	ldr	r3, [r3, #16]
 8003cdc:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8003ce0:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8003ce2:	4b8e      	ldr	r3, [pc, #568]	@ (8003f1c <HAL_RCC_OscConfig+0x4a4>)
 8003ce4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003ce6:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8003ce8:	69bb      	ldr	r3, [r7, #24]
 8003cea:	2b08      	cmp	r3, #8
 8003cec:	d007      	beq.n	8003cfe <HAL_RCC_OscConfig+0x286>
 8003cee:	69bb      	ldr	r3, [r7, #24]
 8003cf0:	2b18      	cmp	r3, #24
 8003cf2:	d11b      	bne.n	8003d2c <HAL_RCC_OscConfig+0x2b4>
 8003cf4:	697b      	ldr	r3, [r7, #20]
 8003cf6:	f003 0303 	and.w	r3, r3, #3
 8003cfa:	2b01      	cmp	r3, #1
 8003cfc:	d116      	bne.n	8003d2c <HAL_RCC_OscConfig+0x2b4>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8003cfe:	4b87      	ldr	r3, [pc, #540]	@ (8003f1c <HAL_RCC_OscConfig+0x4a4>)
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003d06:	2b00      	cmp	r3, #0
 8003d08:	d005      	beq.n	8003d16 <HAL_RCC_OscConfig+0x29e>
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	69db      	ldr	r3, [r3, #28]
 8003d0e:	2b80      	cmp	r3, #128	@ 0x80
 8003d10:	d001      	beq.n	8003d16 <HAL_RCC_OscConfig+0x29e>
      {
        return HAL_ERROR;
 8003d12:	2301      	movs	r3, #1
 8003d14:	e282      	b.n	800421c <HAL_RCC_OscConfig+0x7a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8003d16:	4b81      	ldr	r3, [pc, #516]	@ (8003f1c <HAL_RCC_OscConfig+0x4a4>)
 8003d18:	68db      	ldr	r3, [r3, #12]
 8003d1a:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	6a1b      	ldr	r3, [r3, #32]
 8003d22:	061b      	lsls	r3, r3, #24
 8003d24:	497d      	ldr	r1, [pc, #500]	@ (8003f1c <HAL_RCC_OscConfig+0x4a4>)
 8003d26:	4313      	orrs	r3, r2
 8003d28:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8003d2a:	e040      	b.n	8003dae <HAL_RCC_OscConfig+0x336>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	69db      	ldr	r3, [r3, #28]
 8003d30:	2b00      	cmp	r3, #0
 8003d32:	d023      	beq.n	8003d7c <HAL_RCC_OscConfig+0x304>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8003d34:	4b79      	ldr	r3, [pc, #484]	@ (8003f1c <HAL_RCC_OscConfig+0x4a4>)
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	4a78      	ldr	r2, [pc, #480]	@ (8003f1c <HAL_RCC_OscConfig+0x4a4>)
 8003d3a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003d3e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d40:	f7fe fc6e 	bl	8002620 <HAL_GetTick>
 8003d44:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8003d46:	e008      	b.n	8003d5a <HAL_RCC_OscConfig+0x2e2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8003d48:	f7fe fc6a 	bl	8002620 <HAL_GetTick>
 8003d4c:	4602      	mov	r2, r0
 8003d4e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d50:	1ad3      	subs	r3, r2, r3
 8003d52:	2b02      	cmp	r3, #2
 8003d54:	d901      	bls.n	8003d5a <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8003d56:	2303      	movs	r3, #3
 8003d58:	e260      	b.n	800421c <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8003d5a:	4b70      	ldr	r3, [pc, #448]	@ (8003f1c <HAL_RCC_OscConfig+0x4a4>)
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003d62:	2b00      	cmp	r3, #0
 8003d64:	d0f0      	beq.n	8003d48 <HAL_RCC_OscConfig+0x2d0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8003d66:	4b6d      	ldr	r3, [pc, #436]	@ (8003f1c <HAL_RCC_OscConfig+0x4a4>)
 8003d68:	68db      	ldr	r3, [r3, #12]
 8003d6a:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	6a1b      	ldr	r3, [r3, #32]
 8003d72:	061b      	lsls	r3, r3, #24
 8003d74:	4969      	ldr	r1, [pc, #420]	@ (8003f1c <HAL_RCC_OscConfig+0x4a4>)
 8003d76:	4313      	orrs	r3, r2
 8003d78:	60cb      	str	r3, [r1, #12]
 8003d7a:	e018      	b.n	8003dae <HAL_RCC_OscConfig+0x336>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8003d7c:	4b67      	ldr	r3, [pc, #412]	@ (8003f1c <HAL_RCC_OscConfig+0x4a4>)
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	4a66      	ldr	r2, [pc, #408]	@ (8003f1c <HAL_RCC_OscConfig+0x4a4>)
 8003d82:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003d86:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d88:	f7fe fc4a 	bl	8002620 <HAL_GetTick>
 8003d8c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8003d8e:	e008      	b.n	8003da2 <HAL_RCC_OscConfig+0x32a>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8003d90:	f7fe fc46 	bl	8002620 <HAL_GetTick>
 8003d94:	4602      	mov	r2, r0
 8003d96:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d98:	1ad3      	subs	r3, r2, r3
 8003d9a:	2b02      	cmp	r3, #2
 8003d9c:	d901      	bls.n	8003da2 <HAL_RCC_OscConfig+0x32a>
          {
            return HAL_TIMEOUT;
 8003d9e:	2303      	movs	r3, #3
 8003da0:	e23c      	b.n	800421c <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8003da2:	4b5e      	ldr	r3, [pc, #376]	@ (8003f1c <HAL_RCC_OscConfig+0x4a4>)
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003daa:	2b00      	cmp	r3, #0
 8003dac:	d1f0      	bne.n	8003d90 <HAL_RCC_OscConfig+0x318>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	f003 0308 	and.w	r3, r3, #8
 8003db6:	2b00      	cmp	r3, #0
 8003db8:	d036      	beq.n	8003e28 <HAL_RCC_OscConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	695b      	ldr	r3, [r3, #20]
 8003dbe:	2b00      	cmp	r3, #0
 8003dc0:	d019      	beq.n	8003df6 <HAL_RCC_OscConfig+0x37e>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003dc2:	4b56      	ldr	r3, [pc, #344]	@ (8003f1c <HAL_RCC_OscConfig+0x4a4>)
 8003dc4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003dc6:	4a55      	ldr	r2, [pc, #340]	@ (8003f1c <HAL_RCC_OscConfig+0x4a4>)
 8003dc8:	f043 0301 	orr.w	r3, r3, #1
 8003dcc:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003dce:	f7fe fc27 	bl	8002620 <HAL_GetTick>
 8003dd2:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8003dd4:	e008      	b.n	8003de8 <HAL_RCC_OscConfig+0x370>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003dd6:	f7fe fc23 	bl	8002620 <HAL_GetTick>
 8003dda:	4602      	mov	r2, r0
 8003ddc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003dde:	1ad3      	subs	r3, r2, r3
 8003de0:	2b02      	cmp	r3, #2
 8003de2:	d901      	bls.n	8003de8 <HAL_RCC_OscConfig+0x370>
        {
          return HAL_TIMEOUT;
 8003de4:	2303      	movs	r3, #3
 8003de6:	e219      	b.n	800421c <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8003de8:	4b4c      	ldr	r3, [pc, #304]	@ (8003f1c <HAL_RCC_OscConfig+0x4a4>)
 8003dea:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003dec:	f003 0302 	and.w	r3, r3, #2
 8003df0:	2b00      	cmp	r3, #0
 8003df2:	d0f0      	beq.n	8003dd6 <HAL_RCC_OscConfig+0x35e>
 8003df4:	e018      	b.n	8003e28 <HAL_RCC_OscConfig+0x3b0>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003df6:	4b49      	ldr	r3, [pc, #292]	@ (8003f1c <HAL_RCC_OscConfig+0x4a4>)
 8003df8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003dfa:	4a48      	ldr	r2, [pc, #288]	@ (8003f1c <HAL_RCC_OscConfig+0x4a4>)
 8003dfc:	f023 0301 	bic.w	r3, r3, #1
 8003e00:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003e02:	f7fe fc0d 	bl	8002620 <HAL_GetTick>
 8003e06:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8003e08:	e008      	b.n	8003e1c <HAL_RCC_OscConfig+0x3a4>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003e0a:	f7fe fc09 	bl	8002620 <HAL_GetTick>
 8003e0e:	4602      	mov	r2, r0
 8003e10:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e12:	1ad3      	subs	r3, r2, r3
 8003e14:	2b02      	cmp	r3, #2
 8003e16:	d901      	bls.n	8003e1c <HAL_RCC_OscConfig+0x3a4>
        {
          return HAL_TIMEOUT;
 8003e18:	2303      	movs	r3, #3
 8003e1a:	e1ff      	b.n	800421c <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8003e1c:	4b3f      	ldr	r3, [pc, #252]	@ (8003f1c <HAL_RCC_OscConfig+0x4a4>)
 8003e1e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003e20:	f003 0302 	and.w	r3, r3, #2
 8003e24:	2b00      	cmp	r3, #0
 8003e26:	d1f0      	bne.n	8003e0a <HAL_RCC_OscConfig+0x392>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	f003 0320 	and.w	r3, r3, #32
 8003e30:	2b00      	cmp	r3, #0
 8003e32:	d036      	beq.n	8003ea2 <HAL_RCC_OscConfig+0x42a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	699b      	ldr	r3, [r3, #24]
 8003e38:	2b00      	cmp	r3, #0
 8003e3a:	d019      	beq.n	8003e70 <HAL_RCC_OscConfig+0x3f8>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8003e3c:	4b37      	ldr	r3, [pc, #220]	@ (8003f1c <HAL_RCC_OscConfig+0x4a4>)
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	4a36      	ldr	r2, [pc, #216]	@ (8003f1c <HAL_RCC_OscConfig+0x4a4>)
 8003e42:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8003e46:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8003e48:	f7fe fbea 	bl	8002620 <HAL_GetTick>
 8003e4c:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8003e4e:	e008      	b.n	8003e62 <HAL_RCC_OscConfig+0x3ea>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003e50:	f7fe fbe6 	bl	8002620 <HAL_GetTick>
 8003e54:	4602      	mov	r2, r0
 8003e56:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e58:	1ad3      	subs	r3, r2, r3
 8003e5a:	2b02      	cmp	r3, #2
 8003e5c:	d901      	bls.n	8003e62 <HAL_RCC_OscConfig+0x3ea>
        {
          return HAL_TIMEOUT;
 8003e5e:	2303      	movs	r3, #3
 8003e60:	e1dc      	b.n	800421c <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8003e62:	4b2e      	ldr	r3, [pc, #184]	@ (8003f1c <HAL_RCC_OscConfig+0x4a4>)
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003e6a:	2b00      	cmp	r3, #0
 8003e6c:	d0f0      	beq.n	8003e50 <HAL_RCC_OscConfig+0x3d8>
 8003e6e:	e018      	b.n	8003ea2 <HAL_RCC_OscConfig+0x42a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8003e70:	4b2a      	ldr	r3, [pc, #168]	@ (8003f1c <HAL_RCC_OscConfig+0x4a4>)
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	4a29      	ldr	r2, [pc, #164]	@ (8003f1c <HAL_RCC_OscConfig+0x4a4>)
 8003e76:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8003e7a:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8003e7c:	f7fe fbd0 	bl	8002620 <HAL_GetTick>
 8003e80:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8003e82:	e008      	b.n	8003e96 <HAL_RCC_OscConfig+0x41e>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003e84:	f7fe fbcc 	bl	8002620 <HAL_GetTick>
 8003e88:	4602      	mov	r2, r0
 8003e8a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e8c:	1ad3      	subs	r3, r2, r3
 8003e8e:	2b02      	cmp	r3, #2
 8003e90:	d901      	bls.n	8003e96 <HAL_RCC_OscConfig+0x41e>
        {
          return HAL_TIMEOUT;
 8003e92:	2303      	movs	r3, #3
 8003e94:	e1c2      	b.n	800421c <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8003e96:	4b21      	ldr	r3, [pc, #132]	@ (8003f1c <HAL_RCC_OscConfig+0x4a4>)
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003e9e:	2b00      	cmp	r3, #0
 8003ea0:	d1f0      	bne.n	8003e84 <HAL_RCC_OscConfig+0x40c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	f003 0304 	and.w	r3, r3, #4
 8003eaa:	2b00      	cmp	r3, #0
 8003eac:	f000 8086 	beq.w	8003fbc <HAL_RCC_OscConfig+0x544>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8003eb0:	4b1b      	ldr	r3, [pc, #108]	@ (8003f20 <HAL_RCC_OscConfig+0x4a8>)
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	4a1a      	ldr	r2, [pc, #104]	@ (8003f20 <HAL_RCC_OscConfig+0x4a8>)
 8003eb6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003eba:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003ebc:	f7fe fbb0 	bl	8002620 <HAL_GetTick>
 8003ec0:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003ec2:	e008      	b.n	8003ed6 <HAL_RCC_OscConfig+0x45e>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003ec4:	f7fe fbac 	bl	8002620 <HAL_GetTick>
 8003ec8:	4602      	mov	r2, r0
 8003eca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ecc:	1ad3      	subs	r3, r2, r3
 8003ece:	2b64      	cmp	r3, #100	@ 0x64
 8003ed0:	d901      	bls.n	8003ed6 <HAL_RCC_OscConfig+0x45e>
      {
        return HAL_TIMEOUT;
 8003ed2:	2303      	movs	r3, #3
 8003ed4:	e1a2      	b.n	800421c <HAL_RCC_OscConfig+0x7a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003ed6:	4b12      	ldr	r3, [pc, #72]	@ (8003f20 <HAL_RCC_OscConfig+0x4a8>)
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003ede:	2b00      	cmp	r3, #0
 8003ee0:	d0f0      	beq.n	8003ec4 <HAL_RCC_OscConfig+0x44c>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	689b      	ldr	r3, [r3, #8]
 8003ee6:	2b01      	cmp	r3, #1
 8003ee8:	d106      	bne.n	8003ef8 <HAL_RCC_OscConfig+0x480>
 8003eea:	4b0c      	ldr	r3, [pc, #48]	@ (8003f1c <HAL_RCC_OscConfig+0x4a4>)
 8003eec:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003eee:	4a0b      	ldr	r2, [pc, #44]	@ (8003f1c <HAL_RCC_OscConfig+0x4a4>)
 8003ef0:	f043 0301 	orr.w	r3, r3, #1
 8003ef4:	6713      	str	r3, [r2, #112]	@ 0x70
 8003ef6:	e032      	b.n	8003f5e <HAL_RCC_OscConfig+0x4e6>
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	689b      	ldr	r3, [r3, #8]
 8003efc:	2b00      	cmp	r3, #0
 8003efe:	d111      	bne.n	8003f24 <HAL_RCC_OscConfig+0x4ac>
 8003f00:	4b06      	ldr	r3, [pc, #24]	@ (8003f1c <HAL_RCC_OscConfig+0x4a4>)
 8003f02:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003f04:	4a05      	ldr	r2, [pc, #20]	@ (8003f1c <HAL_RCC_OscConfig+0x4a4>)
 8003f06:	f023 0301 	bic.w	r3, r3, #1
 8003f0a:	6713      	str	r3, [r2, #112]	@ 0x70
 8003f0c:	4b03      	ldr	r3, [pc, #12]	@ (8003f1c <HAL_RCC_OscConfig+0x4a4>)
 8003f0e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003f10:	4a02      	ldr	r2, [pc, #8]	@ (8003f1c <HAL_RCC_OscConfig+0x4a4>)
 8003f12:	f023 0304 	bic.w	r3, r3, #4
 8003f16:	6713      	str	r3, [r2, #112]	@ 0x70
 8003f18:	e021      	b.n	8003f5e <HAL_RCC_OscConfig+0x4e6>
 8003f1a:	bf00      	nop
 8003f1c:	58024400 	.word	0x58024400
 8003f20:	58024800 	.word	0x58024800
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	689b      	ldr	r3, [r3, #8]
 8003f28:	2b05      	cmp	r3, #5
 8003f2a:	d10c      	bne.n	8003f46 <HAL_RCC_OscConfig+0x4ce>
 8003f2c:	4b83      	ldr	r3, [pc, #524]	@ (800413c <HAL_RCC_OscConfig+0x6c4>)
 8003f2e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003f30:	4a82      	ldr	r2, [pc, #520]	@ (800413c <HAL_RCC_OscConfig+0x6c4>)
 8003f32:	f043 0304 	orr.w	r3, r3, #4
 8003f36:	6713      	str	r3, [r2, #112]	@ 0x70
 8003f38:	4b80      	ldr	r3, [pc, #512]	@ (800413c <HAL_RCC_OscConfig+0x6c4>)
 8003f3a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003f3c:	4a7f      	ldr	r2, [pc, #508]	@ (800413c <HAL_RCC_OscConfig+0x6c4>)
 8003f3e:	f043 0301 	orr.w	r3, r3, #1
 8003f42:	6713      	str	r3, [r2, #112]	@ 0x70
 8003f44:	e00b      	b.n	8003f5e <HAL_RCC_OscConfig+0x4e6>
 8003f46:	4b7d      	ldr	r3, [pc, #500]	@ (800413c <HAL_RCC_OscConfig+0x6c4>)
 8003f48:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003f4a:	4a7c      	ldr	r2, [pc, #496]	@ (800413c <HAL_RCC_OscConfig+0x6c4>)
 8003f4c:	f023 0301 	bic.w	r3, r3, #1
 8003f50:	6713      	str	r3, [r2, #112]	@ 0x70
 8003f52:	4b7a      	ldr	r3, [pc, #488]	@ (800413c <HAL_RCC_OscConfig+0x6c4>)
 8003f54:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003f56:	4a79      	ldr	r2, [pc, #484]	@ (800413c <HAL_RCC_OscConfig+0x6c4>)
 8003f58:	f023 0304 	bic.w	r3, r3, #4
 8003f5c:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	689b      	ldr	r3, [r3, #8]
 8003f62:	2b00      	cmp	r3, #0
 8003f64:	d015      	beq.n	8003f92 <HAL_RCC_OscConfig+0x51a>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003f66:	f7fe fb5b 	bl	8002620 <HAL_GetTick>
 8003f6a:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003f6c:	e00a      	b.n	8003f84 <HAL_RCC_OscConfig+0x50c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003f6e:	f7fe fb57 	bl	8002620 <HAL_GetTick>
 8003f72:	4602      	mov	r2, r0
 8003f74:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f76:	1ad3      	subs	r3, r2, r3
 8003f78:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003f7c:	4293      	cmp	r3, r2
 8003f7e:	d901      	bls.n	8003f84 <HAL_RCC_OscConfig+0x50c>
        {
          return HAL_TIMEOUT;
 8003f80:	2303      	movs	r3, #3
 8003f82:	e14b      	b.n	800421c <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003f84:	4b6d      	ldr	r3, [pc, #436]	@ (800413c <HAL_RCC_OscConfig+0x6c4>)
 8003f86:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003f88:	f003 0302 	and.w	r3, r3, #2
 8003f8c:	2b00      	cmp	r3, #0
 8003f8e:	d0ee      	beq.n	8003f6e <HAL_RCC_OscConfig+0x4f6>
 8003f90:	e014      	b.n	8003fbc <HAL_RCC_OscConfig+0x544>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003f92:	f7fe fb45 	bl	8002620 <HAL_GetTick>
 8003f96:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8003f98:	e00a      	b.n	8003fb0 <HAL_RCC_OscConfig+0x538>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003f9a:	f7fe fb41 	bl	8002620 <HAL_GetTick>
 8003f9e:	4602      	mov	r2, r0
 8003fa0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003fa2:	1ad3      	subs	r3, r2, r3
 8003fa4:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003fa8:	4293      	cmp	r3, r2
 8003faa:	d901      	bls.n	8003fb0 <HAL_RCC_OscConfig+0x538>
        {
          return HAL_TIMEOUT;
 8003fac:	2303      	movs	r3, #3
 8003fae:	e135      	b.n	800421c <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8003fb0:	4b62      	ldr	r3, [pc, #392]	@ (800413c <HAL_RCC_OscConfig+0x6c4>)
 8003fb2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003fb4:	f003 0302 	and.w	r3, r3, #2
 8003fb8:	2b00      	cmp	r3, #0
 8003fba:	d1ee      	bne.n	8003f9a <HAL_RCC_OscConfig+0x522>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003fc0:	2b00      	cmp	r3, #0
 8003fc2:	f000 812a 	beq.w	800421a <HAL_RCC_OscConfig+0x7a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8003fc6:	4b5d      	ldr	r3, [pc, #372]	@ (800413c <HAL_RCC_OscConfig+0x6c4>)
 8003fc8:	691b      	ldr	r3, [r3, #16]
 8003fca:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8003fce:	2b18      	cmp	r3, #24
 8003fd0:	f000 80ba 	beq.w	8004148 <HAL_RCC_OscConfig+0x6d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003fd8:	2b02      	cmp	r3, #2
 8003fda:	f040 8095 	bne.w	8004108 <HAL_RCC_OscConfig+0x690>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003fde:	4b57      	ldr	r3, [pc, #348]	@ (800413c <HAL_RCC_OscConfig+0x6c4>)
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	4a56      	ldr	r2, [pc, #344]	@ (800413c <HAL_RCC_OscConfig+0x6c4>)
 8003fe4:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003fe8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003fea:	f7fe fb19 	bl	8002620 <HAL_GetTick>
 8003fee:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003ff0:	e008      	b.n	8004004 <HAL_RCC_OscConfig+0x58c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003ff2:	f7fe fb15 	bl	8002620 <HAL_GetTick>
 8003ff6:	4602      	mov	r2, r0
 8003ff8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ffa:	1ad3      	subs	r3, r2, r3
 8003ffc:	2b02      	cmp	r3, #2
 8003ffe:	d901      	bls.n	8004004 <HAL_RCC_OscConfig+0x58c>
          {
            return HAL_TIMEOUT;
 8004000:	2303      	movs	r3, #3
 8004002:	e10b      	b.n	800421c <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8004004:	4b4d      	ldr	r3, [pc, #308]	@ (800413c <HAL_RCC_OscConfig+0x6c4>)
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800400c:	2b00      	cmp	r3, #0
 800400e:	d1f0      	bne.n	8003ff2 <HAL_RCC_OscConfig+0x57a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004010:	4b4a      	ldr	r3, [pc, #296]	@ (800413c <HAL_RCC_OscConfig+0x6c4>)
 8004012:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8004014:	4b4a      	ldr	r3, [pc, #296]	@ (8004140 <HAL_RCC_OscConfig+0x6c8>)
 8004016:	4013      	ands	r3, r2
 8004018:	687a      	ldr	r2, [r7, #4]
 800401a:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 800401c:	687a      	ldr	r2, [r7, #4]
 800401e:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8004020:	0112      	lsls	r2, r2, #4
 8004022:	430a      	orrs	r2, r1
 8004024:	4945      	ldr	r1, [pc, #276]	@ (800413c <HAL_RCC_OscConfig+0x6c4>)
 8004026:	4313      	orrs	r3, r2
 8004028:	628b      	str	r3, [r1, #40]	@ 0x28
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800402e:	3b01      	subs	r3, #1
 8004030:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004038:	3b01      	subs	r3, #1
 800403a:	025b      	lsls	r3, r3, #9
 800403c:	b29b      	uxth	r3, r3
 800403e:	431a      	orrs	r2, r3
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004044:	3b01      	subs	r3, #1
 8004046:	041b      	lsls	r3, r3, #16
 8004048:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800404c:	431a      	orrs	r2, r3
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004052:	3b01      	subs	r3, #1
 8004054:	061b      	lsls	r3, r3, #24
 8004056:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 800405a:	4938      	ldr	r1, [pc, #224]	@ (800413c <HAL_RCC_OscConfig+0x6c4>)
 800405c:	4313      	orrs	r3, r2
 800405e:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8004060:	4b36      	ldr	r3, [pc, #216]	@ (800413c <HAL_RCC_OscConfig+0x6c4>)
 8004062:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004064:	4a35      	ldr	r2, [pc, #212]	@ (800413c <HAL_RCC_OscConfig+0x6c4>)
 8004066:	f023 0301 	bic.w	r3, r3, #1
 800406a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800406c:	4b33      	ldr	r3, [pc, #204]	@ (800413c <HAL_RCC_OscConfig+0x6c4>)
 800406e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004070:	4b34      	ldr	r3, [pc, #208]	@ (8004144 <HAL_RCC_OscConfig+0x6cc>)
 8004072:	4013      	ands	r3, r2
 8004074:	687a      	ldr	r2, [r7, #4]
 8004076:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8004078:	00d2      	lsls	r2, r2, #3
 800407a:	4930      	ldr	r1, [pc, #192]	@ (800413c <HAL_RCC_OscConfig+0x6c4>)
 800407c:	4313      	orrs	r3, r2
 800407e:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8004080:	4b2e      	ldr	r3, [pc, #184]	@ (800413c <HAL_RCC_OscConfig+0x6c4>)
 8004082:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004084:	f023 020c 	bic.w	r2, r3, #12
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800408c:	492b      	ldr	r1, [pc, #172]	@ (800413c <HAL_RCC_OscConfig+0x6c4>)
 800408e:	4313      	orrs	r3, r2
 8004090:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8004092:	4b2a      	ldr	r3, [pc, #168]	@ (800413c <HAL_RCC_OscConfig+0x6c4>)
 8004094:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004096:	f023 0202 	bic.w	r2, r3, #2
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800409e:	4927      	ldr	r1, [pc, #156]	@ (800413c <HAL_RCC_OscConfig+0x6c4>)
 80040a0:	4313      	orrs	r3, r2
 80040a2:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 80040a4:	4b25      	ldr	r3, [pc, #148]	@ (800413c <HAL_RCC_OscConfig+0x6c4>)
 80040a6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80040a8:	4a24      	ldr	r2, [pc, #144]	@ (800413c <HAL_RCC_OscConfig+0x6c4>)
 80040aa:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80040ae:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80040b0:	4b22      	ldr	r3, [pc, #136]	@ (800413c <HAL_RCC_OscConfig+0x6c4>)
 80040b2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80040b4:	4a21      	ldr	r2, [pc, #132]	@ (800413c <HAL_RCC_OscConfig+0x6c4>)
 80040b6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80040ba:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 80040bc:	4b1f      	ldr	r3, [pc, #124]	@ (800413c <HAL_RCC_OscConfig+0x6c4>)
 80040be:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80040c0:	4a1e      	ldr	r2, [pc, #120]	@ (800413c <HAL_RCC_OscConfig+0x6c4>)
 80040c2:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80040c6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 80040c8:	4b1c      	ldr	r3, [pc, #112]	@ (800413c <HAL_RCC_OscConfig+0x6c4>)
 80040ca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80040cc:	4a1b      	ldr	r2, [pc, #108]	@ (800413c <HAL_RCC_OscConfig+0x6c4>)
 80040ce:	f043 0301 	orr.w	r3, r3, #1
 80040d2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80040d4:	4b19      	ldr	r3, [pc, #100]	@ (800413c <HAL_RCC_OscConfig+0x6c4>)
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	4a18      	ldr	r2, [pc, #96]	@ (800413c <HAL_RCC_OscConfig+0x6c4>)
 80040da:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80040de:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80040e0:	f7fe fa9e 	bl	8002620 <HAL_GetTick>
 80040e4:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80040e6:	e008      	b.n	80040fa <HAL_RCC_OscConfig+0x682>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80040e8:	f7fe fa9a 	bl	8002620 <HAL_GetTick>
 80040ec:	4602      	mov	r2, r0
 80040ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80040f0:	1ad3      	subs	r3, r2, r3
 80040f2:	2b02      	cmp	r3, #2
 80040f4:	d901      	bls.n	80040fa <HAL_RCC_OscConfig+0x682>
          {
            return HAL_TIMEOUT;
 80040f6:	2303      	movs	r3, #3
 80040f8:	e090      	b.n	800421c <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80040fa:	4b10      	ldr	r3, [pc, #64]	@ (800413c <HAL_RCC_OscConfig+0x6c4>)
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004102:	2b00      	cmp	r3, #0
 8004104:	d0f0      	beq.n	80040e8 <HAL_RCC_OscConfig+0x670>
 8004106:	e088      	b.n	800421a <HAL_RCC_OscConfig+0x7a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004108:	4b0c      	ldr	r3, [pc, #48]	@ (800413c <HAL_RCC_OscConfig+0x6c4>)
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	4a0b      	ldr	r2, [pc, #44]	@ (800413c <HAL_RCC_OscConfig+0x6c4>)
 800410e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004112:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004114:	f7fe fa84 	bl	8002620 <HAL_GetTick>
 8004118:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800411a:	e008      	b.n	800412e <HAL_RCC_OscConfig+0x6b6>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800411c:	f7fe fa80 	bl	8002620 <HAL_GetTick>
 8004120:	4602      	mov	r2, r0
 8004122:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004124:	1ad3      	subs	r3, r2, r3
 8004126:	2b02      	cmp	r3, #2
 8004128:	d901      	bls.n	800412e <HAL_RCC_OscConfig+0x6b6>
          {
            return HAL_TIMEOUT;
 800412a:	2303      	movs	r3, #3
 800412c:	e076      	b.n	800421c <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800412e:	4b03      	ldr	r3, [pc, #12]	@ (800413c <HAL_RCC_OscConfig+0x6c4>)
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004136:	2b00      	cmp	r3, #0
 8004138:	d1f0      	bne.n	800411c <HAL_RCC_OscConfig+0x6a4>
 800413a:	e06e      	b.n	800421a <HAL_RCC_OscConfig+0x7a2>
 800413c:	58024400 	.word	0x58024400
 8004140:	fffffc0c 	.word	0xfffffc0c
 8004144:	ffff0007 	.word	0xffff0007
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8004148:	4b36      	ldr	r3, [pc, #216]	@ (8004224 <HAL_RCC_OscConfig+0x7ac>)
 800414a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800414c:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 800414e:	4b35      	ldr	r3, [pc, #212]	@ (8004224 <HAL_RCC_OscConfig+0x7ac>)
 8004150:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004152:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004158:	2b01      	cmp	r3, #1
 800415a:	d031      	beq.n	80041c0 <HAL_RCC_OscConfig+0x748>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800415c:	693b      	ldr	r3, [r7, #16]
 800415e:	f003 0203 	and.w	r2, r3, #3
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004166:	429a      	cmp	r2, r3
 8004168:	d12a      	bne.n	80041c0 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800416a:	693b      	ldr	r3, [r7, #16]
 800416c:	091b      	lsrs	r3, r3, #4
 800416e:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004176:	429a      	cmp	r2, r3
 8004178:	d122      	bne.n	80041c0 <HAL_RCC_OscConfig+0x748>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800417a:	68fb      	ldr	r3, [r7, #12]
 800417c:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004184:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8004186:	429a      	cmp	r2, r3
 8004188:	d11a      	bne.n	80041c0 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800418a:	68fb      	ldr	r3, [r7, #12]
 800418c:	0a5b      	lsrs	r3, r3, #9
 800418e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004196:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8004198:	429a      	cmp	r2, r3
 800419a:	d111      	bne.n	80041c0 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800419c:	68fb      	ldr	r3, [r7, #12]
 800419e:	0c1b      	lsrs	r3, r3, #16
 80041a0:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80041a8:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80041aa:	429a      	cmp	r2, r3
 80041ac:	d108      	bne.n	80041c0 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 80041ae:	68fb      	ldr	r3, [r7, #12]
 80041b0:	0e1b      	lsrs	r3, r3, #24
 80041b2:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80041ba:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80041bc:	429a      	cmp	r2, r3
 80041be:	d001      	beq.n	80041c4 <HAL_RCC_OscConfig+0x74c>
      {
        return HAL_ERROR;
 80041c0:	2301      	movs	r3, #1
 80041c2:	e02b      	b.n	800421c <HAL_RCC_OscConfig+0x7a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 80041c4:	4b17      	ldr	r3, [pc, #92]	@ (8004224 <HAL_RCC_OscConfig+0x7ac>)
 80041c6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80041c8:	08db      	lsrs	r3, r3, #3
 80041ca:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80041ce:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80041d4:	693a      	ldr	r2, [r7, #16]
 80041d6:	429a      	cmp	r2, r3
 80041d8:	d01f      	beq.n	800421a <HAL_RCC_OscConfig+0x7a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 80041da:	4b12      	ldr	r3, [pc, #72]	@ (8004224 <HAL_RCC_OscConfig+0x7ac>)
 80041dc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80041de:	4a11      	ldr	r2, [pc, #68]	@ (8004224 <HAL_RCC_OscConfig+0x7ac>)
 80041e0:	f023 0301 	bic.w	r3, r3, #1
 80041e4:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80041e6:	f7fe fa1b 	bl	8002620 <HAL_GetTick>
 80041ea:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 80041ec:	bf00      	nop
 80041ee:	f7fe fa17 	bl	8002620 <HAL_GetTick>
 80041f2:	4602      	mov	r2, r0
 80041f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80041f6:	4293      	cmp	r3, r2
 80041f8:	d0f9      	beq.n	80041ee <HAL_RCC_OscConfig+0x776>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80041fa:	4b0a      	ldr	r3, [pc, #40]	@ (8004224 <HAL_RCC_OscConfig+0x7ac>)
 80041fc:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80041fe:	4b0a      	ldr	r3, [pc, #40]	@ (8004228 <HAL_RCC_OscConfig+0x7b0>)
 8004200:	4013      	ands	r3, r2
 8004202:	687a      	ldr	r2, [r7, #4]
 8004204:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8004206:	00d2      	lsls	r2, r2, #3
 8004208:	4906      	ldr	r1, [pc, #24]	@ (8004224 <HAL_RCC_OscConfig+0x7ac>)
 800420a:	4313      	orrs	r3, r2
 800420c:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 800420e:	4b05      	ldr	r3, [pc, #20]	@ (8004224 <HAL_RCC_OscConfig+0x7ac>)
 8004210:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004212:	4a04      	ldr	r2, [pc, #16]	@ (8004224 <HAL_RCC_OscConfig+0x7ac>)
 8004214:	f043 0301 	orr.w	r3, r3, #1
 8004218:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 800421a:	2300      	movs	r3, #0
}
 800421c:	4618      	mov	r0, r3
 800421e:	3730      	adds	r7, #48	@ 0x30
 8004220:	46bd      	mov	sp, r7
 8004222:	bd80      	pop	{r7, pc}
 8004224:	58024400 	.word	0x58024400
 8004228:	ffff0007 	.word	0xffff0007

0800422c <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800422c:	b580      	push	{r7, lr}
 800422e:	b086      	sub	sp, #24
 8004230:	af00      	add	r7, sp, #0
 8004232:	6078      	str	r0, [r7, #4]
 8004234:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	2b00      	cmp	r3, #0
 800423a:	d101      	bne.n	8004240 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800423c:	2301      	movs	r3, #1
 800423e:	e19c      	b.n	800457a <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004240:	4b8a      	ldr	r3, [pc, #552]	@ (800446c <HAL_RCC_ClockConfig+0x240>)
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	f003 030f 	and.w	r3, r3, #15
 8004248:	683a      	ldr	r2, [r7, #0]
 800424a:	429a      	cmp	r2, r3
 800424c:	d910      	bls.n	8004270 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800424e:	4b87      	ldr	r3, [pc, #540]	@ (800446c <HAL_RCC_ClockConfig+0x240>)
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	f023 020f 	bic.w	r2, r3, #15
 8004256:	4985      	ldr	r1, [pc, #532]	@ (800446c <HAL_RCC_ClockConfig+0x240>)
 8004258:	683b      	ldr	r3, [r7, #0]
 800425a:	4313      	orrs	r3, r2
 800425c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800425e:	4b83      	ldr	r3, [pc, #524]	@ (800446c <HAL_RCC_ClockConfig+0x240>)
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	f003 030f 	and.w	r3, r3, #15
 8004266:	683a      	ldr	r2, [r7, #0]
 8004268:	429a      	cmp	r2, r3
 800426a:	d001      	beq.n	8004270 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800426c:	2301      	movs	r3, #1
 800426e:	e184      	b.n	800457a <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	f003 0304 	and.w	r3, r3, #4
 8004278:	2b00      	cmp	r3, #0
 800427a:	d010      	beq.n	800429e <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	691a      	ldr	r2, [r3, #16]
 8004280:	4b7b      	ldr	r3, [pc, #492]	@ (8004470 <HAL_RCC_ClockConfig+0x244>)
 8004282:	699b      	ldr	r3, [r3, #24]
 8004284:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8004288:	429a      	cmp	r2, r3
 800428a:	d908      	bls.n	800429e <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800428c:	4b78      	ldr	r3, [pc, #480]	@ (8004470 <HAL_RCC_ClockConfig+0x244>)
 800428e:	699b      	ldr	r3, [r3, #24]
 8004290:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	691b      	ldr	r3, [r3, #16]
 8004298:	4975      	ldr	r1, [pc, #468]	@ (8004470 <HAL_RCC_ClockConfig+0x244>)
 800429a:	4313      	orrs	r3, r2
 800429c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	f003 0308 	and.w	r3, r3, #8
 80042a6:	2b00      	cmp	r3, #0
 80042a8:	d010      	beq.n	80042cc <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	695a      	ldr	r2, [r3, #20]
 80042ae:	4b70      	ldr	r3, [pc, #448]	@ (8004470 <HAL_RCC_ClockConfig+0x244>)
 80042b0:	69db      	ldr	r3, [r3, #28]
 80042b2:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80042b6:	429a      	cmp	r2, r3
 80042b8:	d908      	bls.n	80042cc <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80042ba:	4b6d      	ldr	r3, [pc, #436]	@ (8004470 <HAL_RCC_ClockConfig+0x244>)
 80042bc:	69db      	ldr	r3, [r3, #28]
 80042be:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	695b      	ldr	r3, [r3, #20]
 80042c6:	496a      	ldr	r1, [pc, #424]	@ (8004470 <HAL_RCC_ClockConfig+0x244>)
 80042c8:	4313      	orrs	r3, r2
 80042ca:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	f003 0310 	and.w	r3, r3, #16
 80042d4:	2b00      	cmp	r3, #0
 80042d6:	d010      	beq.n	80042fa <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	699a      	ldr	r2, [r3, #24]
 80042dc:	4b64      	ldr	r3, [pc, #400]	@ (8004470 <HAL_RCC_ClockConfig+0x244>)
 80042de:	69db      	ldr	r3, [r3, #28]
 80042e0:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80042e4:	429a      	cmp	r2, r3
 80042e6:	d908      	bls.n	80042fa <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80042e8:	4b61      	ldr	r3, [pc, #388]	@ (8004470 <HAL_RCC_ClockConfig+0x244>)
 80042ea:	69db      	ldr	r3, [r3, #28]
 80042ec:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	699b      	ldr	r3, [r3, #24]
 80042f4:	495e      	ldr	r1, [pc, #376]	@ (8004470 <HAL_RCC_ClockConfig+0x244>)
 80042f6:	4313      	orrs	r3, r2
 80042f8:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	f003 0320 	and.w	r3, r3, #32
 8004302:	2b00      	cmp	r3, #0
 8004304:	d010      	beq.n	8004328 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	69da      	ldr	r2, [r3, #28]
 800430a:	4b59      	ldr	r3, [pc, #356]	@ (8004470 <HAL_RCC_ClockConfig+0x244>)
 800430c:	6a1b      	ldr	r3, [r3, #32]
 800430e:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8004312:	429a      	cmp	r2, r3
 8004314:	d908      	bls.n	8004328 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8004316:	4b56      	ldr	r3, [pc, #344]	@ (8004470 <HAL_RCC_ClockConfig+0x244>)
 8004318:	6a1b      	ldr	r3, [r3, #32]
 800431a:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	69db      	ldr	r3, [r3, #28]
 8004322:	4953      	ldr	r1, [pc, #332]	@ (8004470 <HAL_RCC_ClockConfig+0x244>)
 8004324:	4313      	orrs	r3, r2
 8004326:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	f003 0302 	and.w	r3, r3, #2
 8004330:	2b00      	cmp	r3, #0
 8004332:	d010      	beq.n	8004356 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	68da      	ldr	r2, [r3, #12]
 8004338:	4b4d      	ldr	r3, [pc, #308]	@ (8004470 <HAL_RCC_ClockConfig+0x244>)
 800433a:	699b      	ldr	r3, [r3, #24]
 800433c:	f003 030f 	and.w	r3, r3, #15
 8004340:	429a      	cmp	r2, r3
 8004342:	d908      	bls.n	8004356 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004344:	4b4a      	ldr	r3, [pc, #296]	@ (8004470 <HAL_RCC_ClockConfig+0x244>)
 8004346:	699b      	ldr	r3, [r3, #24]
 8004348:	f023 020f 	bic.w	r2, r3, #15
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	68db      	ldr	r3, [r3, #12]
 8004350:	4947      	ldr	r1, [pc, #284]	@ (8004470 <HAL_RCC_ClockConfig+0x244>)
 8004352:	4313      	orrs	r3, r2
 8004354:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	f003 0301 	and.w	r3, r3, #1
 800435e:	2b00      	cmp	r3, #0
 8004360:	d055      	beq.n	800440e <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8004362:	4b43      	ldr	r3, [pc, #268]	@ (8004470 <HAL_RCC_ClockConfig+0x244>)
 8004364:	699b      	ldr	r3, [r3, #24]
 8004366:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	689b      	ldr	r3, [r3, #8]
 800436e:	4940      	ldr	r1, [pc, #256]	@ (8004470 <HAL_RCC_ClockConfig+0x244>)
 8004370:	4313      	orrs	r3, r2
 8004372:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	685b      	ldr	r3, [r3, #4]
 8004378:	2b02      	cmp	r3, #2
 800437a:	d107      	bne.n	800438c <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800437c:	4b3c      	ldr	r3, [pc, #240]	@ (8004470 <HAL_RCC_ClockConfig+0x244>)
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004384:	2b00      	cmp	r3, #0
 8004386:	d121      	bne.n	80043cc <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8004388:	2301      	movs	r3, #1
 800438a:	e0f6      	b.n	800457a <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	685b      	ldr	r3, [r3, #4]
 8004390:	2b03      	cmp	r3, #3
 8004392:	d107      	bne.n	80043a4 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8004394:	4b36      	ldr	r3, [pc, #216]	@ (8004470 <HAL_RCC_ClockConfig+0x244>)
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800439c:	2b00      	cmp	r3, #0
 800439e:	d115      	bne.n	80043cc <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80043a0:	2301      	movs	r3, #1
 80043a2:	e0ea      	b.n	800457a <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	685b      	ldr	r3, [r3, #4]
 80043a8:	2b01      	cmp	r3, #1
 80043aa:	d107      	bne.n	80043bc <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80043ac:	4b30      	ldr	r3, [pc, #192]	@ (8004470 <HAL_RCC_ClockConfig+0x244>)
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80043b4:	2b00      	cmp	r3, #0
 80043b6:	d109      	bne.n	80043cc <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80043b8:	2301      	movs	r3, #1
 80043ba:	e0de      	b.n	800457a <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80043bc:	4b2c      	ldr	r3, [pc, #176]	@ (8004470 <HAL_RCC_ClockConfig+0x244>)
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	f003 0304 	and.w	r3, r3, #4
 80043c4:	2b00      	cmp	r3, #0
 80043c6:	d101      	bne.n	80043cc <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80043c8:	2301      	movs	r3, #1
 80043ca:	e0d6      	b.n	800457a <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80043cc:	4b28      	ldr	r3, [pc, #160]	@ (8004470 <HAL_RCC_ClockConfig+0x244>)
 80043ce:	691b      	ldr	r3, [r3, #16]
 80043d0:	f023 0207 	bic.w	r2, r3, #7
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	685b      	ldr	r3, [r3, #4]
 80043d8:	4925      	ldr	r1, [pc, #148]	@ (8004470 <HAL_RCC_ClockConfig+0x244>)
 80043da:	4313      	orrs	r3, r2
 80043dc:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80043de:	f7fe f91f 	bl	8002620 <HAL_GetTick>
 80043e2:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80043e4:	e00a      	b.n	80043fc <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80043e6:	f7fe f91b 	bl	8002620 <HAL_GetTick>
 80043ea:	4602      	mov	r2, r0
 80043ec:	697b      	ldr	r3, [r7, #20]
 80043ee:	1ad3      	subs	r3, r2, r3
 80043f0:	f241 3288 	movw	r2, #5000	@ 0x1388
 80043f4:	4293      	cmp	r3, r2
 80043f6:	d901      	bls.n	80043fc <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 80043f8:	2303      	movs	r3, #3
 80043fa:	e0be      	b.n	800457a <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80043fc:	4b1c      	ldr	r3, [pc, #112]	@ (8004470 <HAL_RCC_ClockConfig+0x244>)
 80043fe:	691b      	ldr	r3, [r3, #16]
 8004400:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	685b      	ldr	r3, [r3, #4]
 8004408:	00db      	lsls	r3, r3, #3
 800440a:	429a      	cmp	r2, r3
 800440c:	d1eb      	bne.n	80043e6 <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	f003 0302 	and.w	r3, r3, #2
 8004416:	2b00      	cmp	r3, #0
 8004418:	d010      	beq.n	800443c <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	68da      	ldr	r2, [r3, #12]
 800441e:	4b14      	ldr	r3, [pc, #80]	@ (8004470 <HAL_RCC_ClockConfig+0x244>)
 8004420:	699b      	ldr	r3, [r3, #24]
 8004422:	f003 030f 	and.w	r3, r3, #15
 8004426:	429a      	cmp	r2, r3
 8004428:	d208      	bcs.n	800443c <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800442a:	4b11      	ldr	r3, [pc, #68]	@ (8004470 <HAL_RCC_ClockConfig+0x244>)
 800442c:	699b      	ldr	r3, [r3, #24]
 800442e:	f023 020f 	bic.w	r2, r3, #15
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	68db      	ldr	r3, [r3, #12]
 8004436:	490e      	ldr	r1, [pc, #56]	@ (8004470 <HAL_RCC_ClockConfig+0x244>)
 8004438:	4313      	orrs	r3, r2
 800443a:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800443c:	4b0b      	ldr	r3, [pc, #44]	@ (800446c <HAL_RCC_ClockConfig+0x240>)
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	f003 030f 	and.w	r3, r3, #15
 8004444:	683a      	ldr	r2, [r7, #0]
 8004446:	429a      	cmp	r2, r3
 8004448:	d214      	bcs.n	8004474 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800444a:	4b08      	ldr	r3, [pc, #32]	@ (800446c <HAL_RCC_ClockConfig+0x240>)
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	f023 020f 	bic.w	r2, r3, #15
 8004452:	4906      	ldr	r1, [pc, #24]	@ (800446c <HAL_RCC_ClockConfig+0x240>)
 8004454:	683b      	ldr	r3, [r7, #0]
 8004456:	4313      	orrs	r3, r2
 8004458:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800445a:	4b04      	ldr	r3, [pc, #16]	@ (800446c <HAL_RCC_ClockConfig+0x240>)
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	f003 030f 	and.w	r3, r3, #15
 8004462:	683a      	ldr	r2, [r7, #0]
 8004464:	429a      	cmp	r2, r3
 8004466:	d005      	beq.n	8004474 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8004468:	2301      	movs	r3, #1
 800446a:	e086      	b.n	800457a <HAL_RCC_ClockConfig+0x34e>
 800446c:	52002000 	.word	0x52002000
 8004470:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	f003 0304 	and.w	r3, r3, #4
 800447c:	2b00      	cmp	r3, #0
 800447e:	d010      	beq.n	80044a2 <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	691a      	ldr	r2, [r3, #16]
 8004484:	4b3f      	ldr	r3, [pc, #252]	@ (8004584 <HAL_RCC_ClockConfig+0x358>)
 8004486:	699b      	ldr	r3, [r3, #24]
 8004488:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800448c:	429a      	cmp	r2, r3
 800448e:	d208      	bcs.n	80044a2 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8004490:	4b3c      	ldr	r3, [pc, #240]	@ (8004584 <HAL_RCC_ClockConfig+0x358>)
 8004492:	699b      	ldr	r3, [r3, #24]
 8004494:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	691b      	ldr	r3, [r3, #16]
 800449c:	4939      	ldr	r1, [pc, #228]	@ (8004584 <HAL_RCC_ClockConfig+0x358>)
 800449e:	4313      	orrs	r3, r2
 80044a0:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	f003 0308 	and.w	r3, r3, #8
 80044aa:	2b00      	cmp	r3, #0
 80044ac:	d010      	beq.n	80044d0 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	695a      	ldr	r2, [r3, #20]
 80044b2:	4b34      	ldr	r3, [pc, #208]	@ (8004584 <HAL_RCC_ClockConfig+0x358>)
 80044b4:	69db      	ldr	r3, [r3, #28]
 80044b6:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80044ba:	429a      	cmp	r2, r3
 80044bc:	d208      	bcs.n	80044d0 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80044be:	4b31      	ldr	r3, [pc, #196]	@ (8004584 <HAL_RCC_ClockConfig+0x358>)
 80044c0:	69db      	ldr	r3, [r3, #28]
 80044c2:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	695b      	ldr	r3, [r3, #20]
 80044ca:	492e      	ldr	r1, [pc, #184]	@ (8004584 <HAL_RCC_ClockConfig+0x358>)
 80044cc:	4313      	orrs	r3, r2
 80044ce:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	f003 0310 	and.w	r3, r3, #16
 80044d8:	2b00      	cmp	r3, #0
 80044da:	d010      	beq.n	80044fe <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	699a      	ldr	r2, [r3, #24]
 80044e0:	4b28      	ldr	r3, [pc, #160]	@ (8004584 <HAL_RCC_ClockConfig+0x358>)
 80044e2:	69db      	ldr	r3, [r3, #28]
 80044e4:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80044e8:	429a      	cmp	r2, r3
 80044ea:	d208      	bcs.n	80044fe <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80044ec:	4b25      	ldr	r3, [pc, #148]	@ (8004584 <HAL_RCC_ClockConfig+0x358>)
 80044ee:	69db      	ldr	r3, [r3, #28]
 80044f0:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	699b      	ldr	r3, [r3, #24]
 80044f8:	4922      	ldr	r1, [pc, #136]	@ (8004584 <HAL_RCC_ClockConfig+0x358>)
 80044fa:	4313      	orrs	r3, r2
 80044fc:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	f003 0320 	and.w	r3, r3, #32
 8004506:	2b00      	cmp	r3, #0
 8004508:	d010      	beq.n	800452c <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	69da      	ldr	r2, [r3, #28]
 800450e:	4b1d      	ldr	r3, [pc, #116]	@ (8004584 <HAL_RCC_ClockConfig+0x358>)
 8004510:	6a1b      	ldr	r3, [r3, #32]
 8004512:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8004516:	429a      	cmp	r2, r3
 8004518:	d208      	bcs.n	800452c <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800451a:	4b1a      	ldr	r3, [pc, #104]	@ (8004584 <HAL_RCC_ClockConfig+0x358>)
 800451c:	6a1b      	ldr	r3, [r3, #32]
 800451e:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	69db      	ldr	r3, [r3, #28]
 8004526:	4917      	ldr	r1, [pc, #92]	@ (8004584 <HAL_RCC_ClockConfig+0x358>)
 8004528:	4313      	orrs	r3, r2
 800452a:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800452c:	f000 f834 	bl	8004598 <HAL_RCC_GetSysClockFreq>
 8004530:	4602      	mov	r2, r0
 8004532:	4b14      	ldr	r3, [pc, #80]	@ (8004584 <HAL_RCC_ClockConfig+0x358>)
 8004534:	699b      	ldr	r3, [r3, #24]
 8004536:	0a1b      	lsrs	r3, r3, #8
 8004538:	f003 030f 	and.w	r3, r3, #15
 800453c:	4912      	ldr	r1, [pc, #72]	@ (8004588 <HAL_RCC_ClockConfig+0x35c>)
 800453e:	5ccb      	ldrb	r3, [r1, r3]
 8004540:	f003 031f 	and.w	r3, r3, #31
 8004544:	fa22 f303 	lsr.w	r3, r2, r3
 8004548:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800454a:	4b0e      	ldr	r3, [pc, #56]	@ (8004584 <HAL_RCC_ClockConfig+0x358>)
 800454c:	699b      	ldr	r3, [r3, #24]
 800454e:	f003 030f 	and.w	r3, r3, #15
 8004552:	4a0d      	ldr	r2, [pc, #52]	@ (8004588 <HAL_RCC_ClockConfig+0x35c>)
 8004554:	5cd3      	ldrb	r3, [r2, r3]
 8004556:	f003 031f 	and.w	r3, r3, #31
 800455a:	693a      	ldr	r2, [r7, #16]
 800455c:	fa22 f303 	lsr.w	r3, r2, r3
 8004560:	4a0a      	ldr	r2, [pc, #40]	@ (800458c <HAL_RCC_ClockConfig+0x360>)
 8004562:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8004564:	4a0a      	ldr	r2, [pc, #40]	@ (8004590 <HAL_RCC_ClockConfig+0x364>)
 8004566:	693b      	ldr	r3, [r7, #16]
 8004568:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 800456a:	4b0a      	ldr	r3, [pc, #40]	@ (8004594 <HAL_RCC_ClockConfig+0x368>)
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	4618      	mov	r0, r3
 8004570:	f7fd feb4 	bl	80022dc <HAL_InitTick>
 8004574:	4603      	mov	r3, r0
 8004576:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8004578:	7bfb      	ldrb	r3, [r7, #15]
}
 800457a:	4618      	mov	r0, r3
 800457c:	3718      	adds	r7, #24
 800457e:	46bd      	mov	sp, r7
 8004580:	bd80      	pop	{r7, pc}
 8004582:	bf00      	nop
 8004584:	58024400 	.word	0x58024400
 8004588:	0800bbc8 	.word	0x0800bbc8
 800458c:	24000004 	.word	0x24000004
 8004590:	24000000 	.word	0x24000000
 8004594:	24000008 	.word	0x24000008

08004598 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004598:	b480      	push	{r7}
 800459a:	b089      	sub	sp, #36	@ 0x24
 800459c:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 800459e:	4bb3      	ldr	r3, [pc, #716]	@ (800486c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80045a0:	691b      	ldr	r3, [r3, #16]
 80045a2:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80045a6:	2b18      	cmp	r3, #24
 80045a8:	f200 8155 	bhi.w	8004856 <HAL_RCC_GetSysClockFreq+0x2be>
 80045ac:	a201      	add	r2, pc, #4	@ (adr r2, 80045b4 <HAL_RCC_GetSysClockFreq+0x1c>)
 80045ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80045b2:	bf00      	nop
 80045b4:	08004619 	.word	0x08004619
 80045b8:	08004857 	.word	0x08004857
 80045bc:	08004857 	.word	0x08004857
 80045c0:	08004857 	.word	0x08004857
 80045c4:	08004857 	.word	0x08004857
 80045c8:	08004857 	.word	0x08004857
 80045cc:	08004857 	.word	0x08004857
 80045d0:	08004857 	.word	0x08004857
 80045d4:	0800463f 	.word	0x0800463f
 80045d8:	08004857 	.word	0x08004857
 80045dc:	08004857 	.word	0x08004857
 80045e0:	08004857 	.word	0x08004857
 80045e4:	08004857 	.word	0x08004857
 80045e8:	08004857 	.word	0x08004857
 80045ec:	08004857 	.word	0x08004857
 80045f0:	08004857 	.word	0x08004857
 80045f4:	08004645 	.word	0x08004645
 80045f8:	08004857 	.word	0x08004857
 80045fc:	08004857 	.word	0x08004857
 8004600:	08004857 	.word	0x08004857
 8004604:	08004857 	.word	0x08004857
 8004608:	08004857 	.word	0x08004857
 800460c:	08004857 	.word	0x08004857
 8004610:	08004857 	.word	0x08004857
 8004614:	0800464b 	.word	0x0800464b
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004618:	4b94      	ldr	r3, [pc, #592]	@ (800486c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	f003 0320 	and.w	r3, r3, #32
 8004620:	2b00      	cmp	r3, #0
 8004622:	d009      	beq.n	8004638 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8004624:	4b91      	ldr	r3, [pc, #580]	@ (800486c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	08db      	lsrs	r3, r3, #3
 800462a:	f003 0303 	and.w	r3, r3, #3
 800462e:	4a90      	ldr	r2, [pc, #576]	@ (8004870 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8004630:	fa22 f303 	lsr.w	r3, r2, r3
 8004634:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 8004636:	e111      	b.n	800485c <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8004638:	4b8d      	ldr	r3, [pc, #564]	@ (8004870 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800463a:	61bb      	str	r3, [r7, #24]
      break;
 800463c:	e10e      	b.n	800485c <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 800463e:	4b8d      	ldr	r3, [pc, #564]	@ (8004874 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8004640:	61bb      	str	r3, [r7, #24]
      break;
 8004642:	e10b      	b.n	800485c <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8004644:	4b8c      	ldr	r3, [pc, #560]	@ (8004878 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8004646:	61bb      	str	r3, [r7, #24]
      break;
 8004648:	e108      	b.n	800485c <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800464a:	4b88      	ldr	r3, [pc, #544]	@ (800486c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800464c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800464e:	f003 0303 	and.w	r3, r3, #3
 8004652:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8004654:	4b85      	ldr	r3, [pc, #532]	@ (800486c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004656:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004658:	091b      	lsrs	r3, r3, #4
 800465a:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800465e:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8004660:	4b82      	ldr	r3, [pc, #520]	@ (800486c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004662:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004664:	f003 0301 	and.w	r3, r3, #1
 8004668:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800466a:	4b80      	ldr	r3, [pc, #512]	@ (800486c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800466c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800466e:	08db      	lsrs	r3, r3, #3
 8004670:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004674:	68fa      	ldr	r2, [r7, #12]
 8004676:	fb02 f303 	mul.w	r3, r2, r3
 800467a:	ee07 3a90 	vmov	s15, r3
 800467e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004682:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 8004686:	693b      	ldr	r3, [r7, #16]
 8004688:	2b00      	cmp	r3, #0
 800468a:	f000 80e1 	beq.w	8004850 <HAL_RCC_GetSysClockFreq+0x2b8>
 800468e:	697b      	ldr	r3, [r7, #20]
 8004690:	2b02      	cmp	r3, #2
 8004692:	f000 8083 	beq.w	800479c <HAL_RCC_GetSysClockFreq+0x204>
 8004696:	697b      	ldr	r3, [r7, #20]
 8004698:	2b02      	cmp	r3, #2
 800469a:	f200 80a1 	bhi.w	80047e0 <HAL_RCC_GetSysClockFreq+0x248>
 800469e:	697b      	ldr	r3, [r7, #20]
 80046a0:	2b00      	cmp	r3, #0
 80046a2:	d003      	beq.n	80046ac <HAL_RCC_GetSysClockFreq+0x114>
 80046a4:	697b      	ldr	r3, [r7, #20]
 80046a6:	2b01      	cmp	r3, #1
 80046a8:	d056      	beq.n	8004758 <HAL_RCC_GetSysClockFreq+0x1c0>
 80046aa:	e099      	b.n	80047e0 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80046ac:	4b6f      	ldr	r3, [pc, #444]	@ (800486c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	f003 0320 	and.w	r3, r3, #32
 80046b4:	2b00      	cmp	r3, #0
 80046b6:	d02d      	beq.n	8004714 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80046b8:	4b6c      	ldr	r3, [pc, #432]	@ (800486c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	08db      	lsrs	r3, r3, #3
 80046be:	f003 0303 	and.w	r3, r3, #3
 80046c2:	4a6b      	ldr	r2, [pc, #428]	@ (8004870 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80046c4:	fa22 f303 	lsr.w	r3, r2, r3
 80046c8:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	ee07 3a90 	vmov	s15, r3
 80046d0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80046d4:	693b      	ldr	r3, [r7, #16]
 80046d6:	ee07 3a90 	vmov	s15, r3
 80046da:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80046de:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80046e2:	4b62      	ldr	r3, [pc, #392]	@ (800486c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80046e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80046e6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80046ea:	ee07 3a90 	vmov	s15, r3
 80046ee:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80046f2:	ed97 6a02 	vldr	s12, [r7, #8]
 80046f6:	eddf 5a61 	vldr	s11, [pc, #388]	@ 800487c <HAL_RCC_GetSysClockFreq+0x2e4>
 80046fa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80046fe:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004702:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004706:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800470a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800470e:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 8004712:	e087      	b.n	8004824 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8004714:	693b      	ldr	r3, [r7, #16]
 8004716:	ee07 3a90 	vmov	s15, r3
 800471a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800471e:	eddf 6a58 	vldr	s13, [pc, #352]	@ 8004880 <HAL_RCC_GetSysClockFreq+0x2e8>
 8004722:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004726:	4b51      	ldr	r3, [pc, #324]	@ (800486c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004728:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800472a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800472e:	ee07 3a90 	vmov	s15, r3
 8004732:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004736:	ed97 6a02 	vldr	s12, [r7, #8]
 800473a:	eddf 5a50 	vldr	s11, [pc, #320]	@ 800487c <HAL_RCC_GetSysClockFreq+0x2e4>
 800473e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004742:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004746:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800474a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800474e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004752:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8004756:	e065      	b.n	8004824 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8004758:	693b      	ldr	r3, [r7, #16]
 800475a:	ee07 3a90 	vmov	s15, r3
 800475e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004762:	eddf 6a48 	vldr	s13, [pc, #288]	@ 8004884 <HAL_RCC_GetSysClockFreq+0x2ec>
 8004766:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800476a:	4b40      	ldr	r3, [pc, #256]	@ (800486c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800476c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800476e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004772:	ee07 3a90 	vmov	s15, r3
 8004776:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800477a:	ed97 6a02 	vldr	s12, [r7, #8]
 800477e:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 800487c <HAL_RCC_GetSysClockFreq+0x2e4>
 8004782:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004786:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800478a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800478e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004792:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004796:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800479a:	e043      	b.n	8004824 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800479c:	693b      	ldr	r3, [r7, #16]
 800479e:	ee07 3a90 	vmov	s15, r3
 80047a2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80047a6:	eddf 6a38 	vldr	s13, [pc, #224]	@ 8004888 <HAL_RCC_GetSysClockFreq+0x2f0>
 80047aa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80047ae:	4b2f      	ldr	r3, [pc, #188]	@ (800486c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80047b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80047b2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80047b6:	ee07 3a90 	vmov	s15, r3
 80047ba:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80047be:	ed97 6a02 	vldr	s12, [r7, #8]
 80047c2:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 800487c <HAL_RCC_GetSysClockFreq+0x2e4>
 80047c6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80047ca:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80047ce:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80047d2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80047d6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80047da:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80047de:	e021      	b.n	8004824 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80047e0:	693b      	ldr	r3, [r7, #16]
 80047e2:	ee07 3a90 	vmov	s15, r3
 80047e6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80047ea:	eddf 6a26 	vldr	s13, [pc, #152]	@ 8004884 <HAL_RCC_GetSysClockFreq+0x2ec>
 80047ee:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80047f2:	4b1e      	ldr	r3, [pc, #120]	@ (800486c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80047f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80047f6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80047fa:	ee07 3a90 	vmov	s15, r3
 80047fe:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004802:	ed97 6a02 	vldr	s12, [r7, #8]
 8004806:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 800487c <HAL_RCC_GetSysClockFreq+0x2e4>
 800480a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800480e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004812:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004816:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800481a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800481e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8004822:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8004824:	4b11      	ldr	r3, [pc, #68]	@ (800486c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004826:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004828:	0a5b      	lsrs	r3, r3, #9
 800482a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800482e:	3301      	adds	r3, #1
 8004830:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8004832:	683b      	ldr	r3, [r7, #0]
 8004834:	ee07 3a90 	vmov	s15, r3
 8004838:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800483c:	edd7 6a07 	vldr	s13, [r7, #28]
 8004840:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004844:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004848:	ee17 3a90 	vmov	r3, s15
 800484c:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 800484e:	e005      	b.n	800485c <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8004850:	2300      	movs	r3, #0
 8004852:	61bb      	str	r3, [r7, #24]
      break;
 8004854:	e002      	b.n	800485c <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 8004856:	4b07      	ldr	r3, [pc, #28]	@ (8004874 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8004858:	61bb      	str	r3, [r7, #24]
      break;
 800485a:	bf00      	nop
  }

  return sysclockfreq;
 800485c:	69bb      	ldr	r3, [r7, #24]
}
 800485e:	4618      	mov	r0, r3
 8004860:	3724      	adds	r7, #36	@ 0x24
 8004862:	46bd      	mov	sp, r7
 8004864:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004868:	4770      	bx	lr
 800486a:	bf00      	nop
 800486c:	58024400 	.word	0x58024400
 8004870:	03d09000 	.word	0x03d09000
 8004874:	003d0900 	.word	0x003d0900
 8004878:	02dc6c00 	.word	0x02dc6c00
 800487c:	46000000 	.word	0x46000000
 8004880:	4c742400 	.word	0x4c742400
 8004884:	4a742400 	.word	0x4a742400
 8004888:	4c371b00 	.word	0x4c371b00

0800488c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800488c:	b580      	push	{r7, lr}
 800488e:	b082      	sub	sp, #8
 8004890:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8004892:	f7ff fe81 	bl	8004598 <HAL_RCC_GetSysClockFreq>
 8004896:	4602      	mov	r2, r0
 8004898:	4b10      	ldr	r3, [pc, #64]	@ (80048dc <HAL_RCC_GetHCLKFreq+0x50>)
 800489a:	699b      	ldr	r3, [r3, #24]
 800489c:	0a1b      	lsrs	r3, r3, #8
 800489e:	f003 030f 	and.w	r3, r3, #15
 80048a2:	490f      	ldr	r1, [pc, #60]	@ (80048e0 <HAL_RCC_GetHCLKFreq+0x54>)
 80048a4:	5ccb      	ldrb	r3, [r1, r3]
 80048a6:	f003 031f 	and.w	r3, r3, #31
 80048aa:	fa22 f303 	lsr.w	r3, r2, r3
 80048ae:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80048b0:	4b0a      	ldr	r3, [pc, #40]	@ (80048dc <HAL_RCC_GetHCLKFreq+0x50>)
 80048b2:	699b      	ldr	r3, [r3, #24]
 80048b4:	f003 030f 	and.w	r3, r3, #15
 80048b8:	4a09      	ldr	r2, [pc, #36]	@ (80048e0 <HAL_RCC_GetHCLKFreq+0x54>)
 80048ba:	5cd3      	ldrb	r3, [r2, r3]
 80048bc:	f003 031f 	and.w	r3, r3, #31
 80048c0:	687a      	ldr	r2, [r7, #4]
 80048c2:	fa22 f303 	lsr.w	r3, r2, r3
 80048c6:	4a07      	ldr	r2, [pc, #28]	@ (80048e4 <HAL_RCC_GetHCLKFreq+0x58>)
 80048c8:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80048ca:	4a07      	ldr	r2, [pc, #28]	@ (80048e8 <HAL_RCC_GetHCLKFreq+0x5c>)
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 80048d0:	4b04      	ldr	r3, [pc, #16]	@ (80048e4 <HAL_RCC_GetHCLKFreq+0x58>)
 80048d2:	681b      	ldr	r3, [r3, #0]
}
 80048d4:	4618      	mov	r0, r3
 80048d6:	3708      	adds	r7, #8
 80048d8:	46bd      	mov	sp, r7
 80048da:	bd80      	pop	{r7, pc}
 80048dc:	58024400 	.word	0x58024400
 80048e0:	0800bbc8 	.word	0x0800bbc8
 80048e4:	24000004 	.word	0x24000004
 80048e8:	24000000 	.word	0x24000000

080048ec <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80048ec:	b580      	push	{r7, lr}
 80048ee:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 80048f0:	f7ff ffcc 	bl	800488c <HAL_RCC_GetHCLKFreq>
 80048f4:	4602      	mov	r2, r0
 80048f6:	4b06      	ldr	r3, [pc, #24]	@ (8004910 <HAL_RCC_GetPCLK1Freq+0x24>)
 80048f8:	69db      	ldr	r3, [r3, #28]
 80048fa:	091b      	lsrs	r3, r3, #4
 80048fc:	f003 0307 	and.w	r3, r3, #7
 8004900:	4904      	ldr	r1, [pc, #16]	@ (8004914 <HAL_RCC_GetPCLK1Freq+0x28>)
 8004902:	5ccb      	ldrb	r3, [r1, r3]
 8004904:	f003 031f 	and.w	r3, r3, #31
 8004908:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 800490c:	4618      	mov	r0, r3
 800490e:	bd80      	pop	{r7, pc}
 8004910:	58024400 	.word	0x58024400
 8004914:	0800bbc8 	.word	0x0800bbc8

08004918 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004918:	b580      	push	{r7, lr}
 800491a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 800491c:	f7ff ffb6 	bl	800488c <HAL_RCC_GetHCLKFreq>
 8004920:	4602      	mov	r2, r0
 8004922:	4b06      	ldr	r3, [pc, #24]	@ (800493c <HAL_RCC_GetPCLK2Freq+0x24>)
 8004924:	69db      	ldr	r3, [r3, #28]
 8004926:	0a1b      	lsrs	r3, r3, #8
 8004928:	f003 0307 	and.w	r3, r3, #7
 800492c:	4904      	ldr	r1, [pc, #16]	@ (8004940 <HAL_RCC_GetPCLK2Freq+0x28>)
 800492e:	5ccb      	ldrb	r3, [r1, r3]
 8004930:	f003 031f 	and.w	r3, r3, #31
 8004934:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8004938:	4618      	mov	r0, r3
 800493a:	bd80      	pop	{r7, pc}
 800493c:	58024400 	.word	0x58024400
 8004940:	0800bbc8 	.word	0x0800bbc8

08004944 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency: Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8004944:	b480      	push	{r7}
 8004946:	b083      	sub	sp, #12
 8004948:	af00      	add	r7, sp, #0
 800494a:	6078      	str	r0, [r7, #4]
 800494c:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_D1PCLK1 | RCC_CLOCKTYPE_PCLK1 |
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	223f      	movs	r2, #63	@ 0x3f
 8004952:	601a      	str	r2, [r3, #0]
                                 RCC_CLOCKTYPE_PCLK2 |  RCC_CLOCKTYPE_D3PCLK1  ;

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8004954:	4b1a      	ldr	r3, [pc, #104]	@ (80049c0 <HAL_RCC_GetClockConfig+0x7c>)
 8004956:	691b      	ldr	r3, [r3, #16]
 8004958:	f003 0207 	and.w	r2, r3, #7
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	605a      	str	r2, [r3, #4]

#if defined(RCC_D1CFGR_D1CPRE)
  /* Get the SYSCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1CPRE);
 8004960:	4b17      	ldr	r3, [pc, #92]	@ (80049c0 <HAL_RCC_GetClockConfig+0x7c>)
 8004962:	699b      	ldr	r3, [r3, #24]
 8004964:	f403 6270 	and.w	r2, r3, #3840	@ 0xf00
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	609a      	str	r2, [r3, #8]

  /* Get the D1HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_HPRE);
 800496c:	4b14      	ldr	r3, [pc, #80]	@ (80049c0 <HAL_RCC_GetClockConfig+0x7c>)
 800496e:	699b      	ldr	r3, [r3, #24]
 8004970:	f003 020f 	and.w	r2, r3, #15
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	60da      	str	r2, [r3, #12]

  /* Get the APB3 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB3CLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1PPRE);
 8004978:	4b11      	ldr	r3, [pc, #68]	@ (80049c0 <HAL_RCC_GetClockConfig+0x7c>)
 800497a:	699b      	ldr	r3, [r3, #24]
 800497c:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	611a      	str	r2, [r3, #16]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1);
 8004984:	4b0e      	ldr	r3, [pc, #56]	@ (80049c0 <HAL_RCC_GetClockConfig+0x7c>)
 8004986:	69db      	ldr	r3, [r3, #28]
 8004988:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	615a      	str	r2, [r3, #20]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2);
 8004990:	4b0b      	ldr	r3, [pc, #44]	@ (80049c0 <HAL_RCC_GetClockConfig+0x7c>)
 8004992:	69db      	ldr	r3, [r3, #28]
 8004994:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	619a      	str	r2, [r3, #24]

  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->D3CFGR & RCC_D3CFGR_D3PPRE);
 800499c:	4b08      	ldr	r3, [pc, #32]	@ (80049c0 <HAL_RCC_GetClockConfig+0x7c>)
 800499e:	6a1b      	ldr	r3, [r3, #32]
 80049a0:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	61da      	str	r2, [r3, #28]
  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE);
#endif

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80049a8:	4b06      	ldr	r3, [pc, #24]	@ (80049c4 <HAL_RCC_GetClockConfig+0x80>)
 80049aa:	681b      	ldr	r3, [r3, #0]
 80049ac:	f003 020f 	and.w	r2, r3, #15
 80049b0:	683b      	ldr	r3, [r7, #0]
 80049b2:	601a      	str	r2, [r3, #0]
}
 80049b4:	bf00      	nop
 80049b6:	370c      	adds	r7, #12
 80049b8:	46bd      	mov	sp, r7
 80049ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049be:	4770      	bx	lr
 80049c0:	58024400 	.word	0x58024400
 80049c4:	52002000 	.word	0x52002000

080049c8 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80049c8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80049cc:	b0c6      	sub	sp, #280	@ 0x118
 80049ce:	af00      	add	r7, sp, #0
 80049d0:	f8c7 0104 	str.w	r0, [r7, #260]	@ 0x104
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80049d4:	2300      	movs	r3, #0
 80049d6:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80049da:	2300      	movs	r3, #0
 80049dc:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80049e0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80049e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80049e8:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 80049ec:	2500      	movs	r5, #0
 80049ee:	ea54 0305 	orrs.w	r3, r4, r5
 80049f2:	d049      	beq.n	8004a88 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 80049f4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80049f8:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80049fa:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80049fe:	d02f      	beq.n	8004a60 <HAL_RCCEx_PeriphCLKConfig+0x98>
 8004a00:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8004a04:	d828      	bhi.n	8004a58 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8004a06:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8004a0a:	d01a      	beq.n	8004a42 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8004a0c:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8004a10:	d822      	bhi.n	8004a58 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8004a12:	2b00      	cmp	r3, #0
 8004a14:	d003      	beq.n	8004a1e <HAL_RCCEx_PeriphCLKConfig+0x56>
 8004a16:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004a1a:	d007      	beq.n	8004a2c <HAL_RCCEx_PeriphCLKConfig+0x64>
 8004a1c:	e01c      	b.n	8004a58 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004a1e:	4bab      	ldr	r3, [pc, #684]	@ (8004ccc <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8004a20:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004a22:	4aaa      	ldr	r2, [pc, #680]	@ (8004ccc <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8004a24:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004a28:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8004a2a:	e01a      	b.n	8004a62 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8004a2c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004a30:	3308      	adds	r3, #8
 8004a32:	2102      	movs	r1, #2
 8004a34:	4618      	mov	r0, r3
 8004a36:	f001 fc25 	bl	8006284 <RCCEx_PLL2_Config>
 8004a3a:	4603      	mov	r3, r0
 8004a3c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8004a40:	e00f      	b.n	8004a62 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8004a42:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004a46:	3328      	adds	r3, #40	@ 0x28
 8004a48:	2102      	movs	r1, #2
 8004a4a:	4618      	mov	r0, r3
 8004a4c:	f001 fccc 	bl	80063e8 <RCCEx_PLL3_Config>
 8004a50:	4603      	mov	r3, r0
 8004a52:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8004a56:	e004      	b.n	8004a62 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004a58:	2301      	movs	r3, #1
 8004a5a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8004a5e:	e000      	b.n	8004a62 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8004a60:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004a62:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004a66:	2b00      	cmp	r3, #0
 8004a68:	d10a      	bne.n	8004a80 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8004a6a:	4b98      	ldr	r3, [pc, #608]	@ (8004ccc <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8004a6c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004a6e:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8004a72:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004a76:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004a78:	4a94      	ldr	r2, [pc, #592]	@ (8004ccc <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8004a7a:	430b      	orrs	r3, r1
 8004a7c:	6513      	str	r3, [r2, #80]	@ 0x50
 8004a7e:	e003      	b.n	8004a88 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004a80:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004a84:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8004a88:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004a8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a90:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 8004a94:	f04f 0900 	mov.w	r9, #0
 8004a98:	ea58 0309 	orrs.w	r3, r8, r9
 8004a9c:	d047      	beq.n	8004b2e <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 8004a9e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004aa2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004aa4:	2b04      	cmp	r3, #4
 8004aa6:	d82a      	bhi.n	8004afe <HAL_RCCEx_PeriphCLKConfig+0x136>
 8004aa8:	a201      	add	r2, pc, #4	@ (adr r2, 8004ab0 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8004aaa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004aae:	bf00      	nop
 8004ab0:	08004ac5 	.word	0x08004ac5
 8004ab4:	08004ad3 	.word	0x08004ad3
 8004ab8:	08004ae9 	.word	0x08004ae9
 8004abc:	08004b07 	.word	0x08004b07
 8004ac0:	08004b07 	.word	0x08004b07
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004ac4:	4b81      	ldr	r3, [pc, #516]	@ (8004ccc <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8004ac6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004ac8:	4a80      	ldr	r2, [pc, #512]	@ (8004ccc <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8004aca:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004ace:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8004ad0:	e01a      	b.n	8004b08 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004ad2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004ad6:	3308      	adds	r3, #8
 8004ad8:	2100      	movs	r1, #0
 8004ada:	4618      	mov	r0, r3
 8004adc:	f001 fbd2 	bl	8006284 <RCCEx_PLL2_Config>
 8004ae0:	4603      	mov	r3, r0
 8004ae2:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8004ae6:	e00f      	b.n	8004b08 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8004ae8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004aec:	3328      	adds	r3, #40	@ 0x28
 8004aee:	2100      	movs	r1, #0
 8004af0:	4618      	mov	r0, r3
 8004af2:	f001 fc79 	bl	80063e8 <RCCEx_PLL3_Config>
 8004af6:	4603      	mov	r3, r0
 8004af8:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8004afc:	e004      	b.n	8004b08 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004afe:	2301      	movs	r3, #1
 8004b00:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8004b04:	e000      	b.n	8004b08 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 8004b06:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004b08:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004b0c:	2b00      	cmp	r3, #0
 8004b0e:	d10a      	bne.n	8004b26 <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004b10:	4b6e      	ldr	r3, [pc, #440]	@ (8004ccc <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8004b12:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004b14:	f023 0107 	bic.w	r1, r3, #7
 8004b18:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004b1c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004b1e:	4a6b      	ldr	r2, [pc, #428]	@ (8004ccc <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8004b20:	430b      	orrs	r3, r1
 8004b22:	6513      	str	r3, [r2, #80]	@ 0x50
 8004b24:	e003      	b.n	8004b2e <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004b26:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004b2a:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8004b2e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004b32:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b36:	f402 6a80 	and.w	sl, r2, #1024	@ 0x400
 8004b3a:	f04f 0b00 	mov.w	fp, #0
 8004b3e:	ea5a 030b 	orrs.w	r3, sl, fp
 8004b42:	d05b      	beq.n	8004bfc <HAL_RCCEx_PeriphCLKConfig+0x234>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 8004b44:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004b48:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8004b4c:	f5b3 0f20 	cmp.w	r3, #10485760	@ 0xa00000
 8004b50:	d03b      	beq.n	8004bca <HAL_RCCEx_PeriphCLKConfig+0x202>
 8004b52:	f5b3 0f20 	cmp.w	r3, #10485760	@ 0xa00000
 8004b56:	d834      	bhi.n	8004bc2 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8004b58:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8004b5c:	d037      	beq.n	8004bce <HAL_RCCEx_PeriphCLKConfig+0x206>
 8004b5e:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8004b62:	d82e      	bhi.n	8004bc2 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8004b64:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8004b68:	d033      	beq.n	8004bd2 <HAL_RCCEx_PeriphCLKConfig+0x20a>
 8004b6a:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8004b6e:	d828      	bhi.n	8004bc2 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8004b70:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004b74:	d01a      	beq.n	8004bac <HAL_RCCEx_PeriphCLKConfig+0x1e4>
 8004b76:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004b7a:	d822      	bhi.n	8004bc2 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8004b7c:	2b00      	cmp	r3, #0
 8004b7e:	d003      	beq.n	8004b88 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
 8004b80:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8004b84:	d007      	beq.n	8004b96 <HAL_RCCEx_PeriphCLKConfig+0x1ce>
 8004b86:	e01c      	b.n	8004bc2 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004b88:	4b50      	ldr	r3, [pc, #320]	@ (8004ccc <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8004b8a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004b8c:	4a4f      	ldr	r2, [pc, #316]	@ (8004ccc <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8004b8e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004b92:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8004b94:	e01e      	b.n	8004bd4 <HAL_RCCEx_PeriphCLKConfig+0x20c>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004b96:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004b9a:	3308      	adds	r3, #8
 8004b9c:	2100      	movs	r1, #0
 8004b9e:	4618      	mov	r0, r3
 8004ba0:	f001 fb70 	bl	8006284 <RCCEx_PLL2_Config>
 8004ba4:	4603      	mov	r3, r0
 8004ba6:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8004baa:	e013      	b.n	8004bd4 <HAL_RCCEx_PeriphCLKConfig+0x20c>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8004bac:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004bb0:	3328      	adds	r3, #40	@ 0x28
 8004bb2:	2100      	movs	r1, #0
 8004bb4:	4618      	mov	r0, r3
 8004bb6:	f001 fc17 	bl	80063e8 <RCCEx_PLL3_Config>
 8004bba:	4603      	mov	r3, r0
 8004bbc:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8004bc0:	e008      	b.n	8004bd4 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8004bc2:	2301      	movs	r3, #1
 8004bc4:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8004bc8:	e004      	b.n	8004bd4 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 8004bca:	bf00      	nop
 8004bcc:	e002      	b.n	8004bd4 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 8004bce:	bf00      	nop
 8004bd0:	e000      	b.n	8004bd4 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 8004bd2:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004bd4:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004bd8:	2b00      	cmp	r3, #0
 8004bda:	d10b      	bne.n	8004bf4 <HAL_RCCEx_PeriphCLKConfig+0x22c>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8004bdc:	4b3b      	ldr	r3, [pc, #236]	@ (8004ccc <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8004bde:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004be0:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 8004be4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004be8:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8004bec:	4a37      	ldr	r2, [pc, #220]	@ (8004ccc <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8004bee:	430b      	orrs	r3, r1
 8004bf0:	6593      	str	r3, [r2, #88]	@ 0x58
 8004bf2:	e003      	b.n	8004bfc <HAL_RCCEx_PeriphCLKConfig+0x234>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004bf4:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004bf8:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8004bfc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004c00:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c04:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 8004c08:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8004c0c:	2300      	movs	r3, #0
 8004c0e:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8004c12:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 8004c16:	460b      	mov	r3, r1
 8004c18:	4313      	orrs	r3, r2
 8004c1a:	d05d      	beq.n	8004cd8 <HAL_RCCEx_PeriphCLKConfig+0x310>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 8004c1c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004c20:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8004c24:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 8004c28:	d03b      	beq.n	8004ca2 <HAL_RCCEx_PeriphCLKConfig+0x2da>
 8004c2a:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 8004c2e:	d834      	bhi.n	8004c9a <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8004c30:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8004c34:	d037      	beq.n	8004ca6 <HAL_RCCEx_PeriphCLKConfig+0x2de>
 8004c36:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8004c3a:	d82e      	bhi.n	8004c9a <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8004c3c:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8004c40:	d033      	beq.n	8004caa <HAL_RCCEx_PeriphCLKConfig+0x2e2>
 8004c42:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8004c46:	d828      	bhi.n	8004c9a <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8004c48:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8004c4c:	d01a      	beq.n	8004c84 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
 8004c4e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8004c52:	d822      	bhi.n	8004c9a <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8004c54:	2b00      	cmp	r3, #0
 8004c56:	d003      	beq.n	8004c60 <HAL_RCCEx_PeriphCLKConfig+0x298>
 8004c58:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8004c5c:	d007      	beq.n	8004c6e <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 8004c5e:	e01c      	b.n	8004c9a <HAL_RCCEx_PeriphCLKConfig+0x2d2>
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004c60:	4b1a      	ldr	r3, [pc, #104]	@ (8004ccc <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8004c62:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004c64:	4a19      	ldr	r2, [pc, #100]	@ (8004ccc <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8004c66:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004c6a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8004c6c:	e01e      	b.n	8004cac <HAL_RCCEx_PeriphCLKConfig+0x2e4>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004c6e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004c72:	3308      	adds	r3, #8
 8004c74:	2100      	movs	r1, #0
 8004c76:	4618      	mov	r0, r3
 8004c78:	f001 fb04 	bl	8006284 <RCCEx_PLL2_Config>
 8004c7c:	4603      	mov	r3, r0
 8004c7e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8004c82:	e013      	b.n	8004cac <HAL_RCCEx_PeriphCLKConfig+0x2e4>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8004c84:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004c88:	3328      	adds	r3, #40	@ 0x28
 8004c8a:	2100      	movs	r1, #0
 8004c8c:	4618      	mov	r0, r3
 8004c8e:	f001 fbab 	bl	80063e8 <RCCEx_PLL3_Config>
 8004c92:	4603      	mov	r3, r0
 8004c94:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8004c98:	e008      	b.n	8004cac <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8004c9a:	2301      	movs	r3, #1
 8004c9c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8004ca0:	e004      	b.n	8004cac <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 8004ca2:	bf00      	nop
 8004ca4:	e002      	b.n	8004cac <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 8004ca6:	bf00      	nop
 8004ca8:	e000      	b.n	8004cac <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 8004caa:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004cac:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004cb0:	2b00      	cmp	r3, #0
 8004cb2:	d10d      	bne.n	8004cd0 <HAL_RCCEx_PeriphCLKConfig+0x308>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8004cb4:	4b05      	ldr	r3, [pc, #20]	@ (8004ccc <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8004cb6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004cb8:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 8004cbc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004cc0:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8004cc4:	4a01      	ldr	r2, [pc, #4]	@ (8004ccc <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8004cc6:	430b      	orrs	r3, r1
 8004cc8:	6593      	str	r3, [r2, #88]	@ 0x58
 8004cca:	e005      	b.n	8004cd8 <HAL_RCCEx_PeriphCLKConfig+0x310>
 8004ccc:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004cd0:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004cd4:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
  }
#endif  /*QUADSPI*/

#if defined(OCTOSPI1) || defined(OCTOSPI2)
  /*---------------------------- OCTOSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8004cd8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004cdc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ce0:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 8004ce4:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8004ce8:	2300      	movs	r3, #0
 8004cea:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8004cee:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 8004cf2:	460b      	mov	r3, r1
 8004cf4:	4313      	orrs	r3, r2
 8004cf6:	d03a      	beq.n	8004d6e <HAL_RCCEx_PeriphCLKConfig+0x3a6>
  {
    switch (PeriphClkInit->OspiClockSelection)
 8004cf8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004cfc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004cfe:	2b30      	cmp	r3, #48	@ 0x30
 8004d00:	d01f      	beq.n	8004d42 <HAL_RCCEx_PeriphCLKConfig+0x37a>
 8004d02:	2b30      	cmp	r3, #48	@ 0x30
 8004d04:	d819      	bhi.n	8004d3a <HAL_RCCEx_PeriphCLKConfig+0x372>
 8004d06:	2b20      	cmp	r3, #32
 8004d08:	d00c      	beq.n	8004d24 <HAL_RCCEx_PeriphCLKConfig+0x35c>
 8004d0a:	2b20      	cmp	r3, #32
 8004d0c:	d815      	bhi.n	8004d3a <HAL_RCCEx_PeriphCLKConfig+0x372>
 8004d0e:	2b00      	cmp	r3, #0
 8004d10:	d019      	beq.n	8004d46 <HAL_RCCEx_PeriphCLKConfig+0x37e>
 8004d12:	2b10      	cmp	r3, #16
 8004d14:	d111      	bne.n	8004d3a <HAL_RCCEx_PeriphCLKConfig+0x372>
    {
      case RCC_OSPICLKSOURCE_PLL:      /* PLL is used as clock source for OSPI*/
        /* Enable OSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004d16:	4baa      	ldr	r3, [pc, #680]	@ (8004fc0 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8004d18:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004d1a:	4aa9      	ldr	r2, [pc, #676]	@ (8004fc0 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8004d1c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004d20:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* OSPI clock source configuration done later after clock selection check */
        break;
 8004d22:	e011      	b.n	8004d48 <HAL_RCCEx_PeriphCLKConfig+0x380>

      case RCC_OSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for OSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8004d24:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004d28:	3308      	adds	r3, #8
 8004d2a:	2102      	movs	r1, #2
 8004d2c:	4618      	mov	r0, r3
 8004d2e:	f001 faa9 	bl	8006284 <RCCEx_PLL2_Config>
 8004d32:	4603      	mov	r3, r0
 8004d34:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* OSPI clock source configuration done later after clock selection check */
        break;
 8004d38:	e006      	b.n	8004d48 <HAL_RCCEx_PeriphCLKConfig+0x380>
      case RCC_OSPICLKSOURCE_HCLK:
        /* HCLK clock selected as OSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8004d3a:	2301      	movs	r3, #1
 8004d3c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8004d40:	e002      	b.n	8004d48 <HAL_RCCEx_PeriphCLKConfig+0x380>
        break;
 8004d42:	bf00      	nop
 8004d44:	e000      	b.n	8004d48 <HAL_RCCEx_PeriphCLKConfig+0x380>
        break;
 8004d46:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004d48:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004d4c:	2b00      	cmp	r3, #0
 8004d4e:	d10a      	bne.n	8004d66 <HAL_RCCEx_PeriphCLKConfig+0x39e>
    {
      /* Set the source of OSPI clock*/
      __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8004d50:	4b9b      	ldr	r3, [pc, #620]	@ (8004fc0 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8004d52:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004d54:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 8004d58:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004d5c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004d5e:	4a98      	ldr	r2, [pc, #608]	@ (8004fc0 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8004d60:	430b      	orrs	r3, r1
 8004d62:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8004d64:	e003      	b.n	8004d6e <HAL_RCCEx_PeriphCLKConfig+0x3a6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004d66:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004d6a:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8004d6e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004d72:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d76:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 8004d7a:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8004d7e:	2300      	movs	r3, #0
 8004d80:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8004d84:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 8004d88:	460b      	mov	r3, r1
 8004d8a:	4313      	orrs	r3, r2
 8004d8c:	d051      	beq.n	8004e32 <HAL_RCCEx_PeriphCLKConfig+0x46a>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 8004d8e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004d92:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004d94:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004d98:	d035      	beq.n	8004e06 <HAL_RCCEx_PeriphCLKConfig+0x43e>
 8004d9a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004d9e:	d82e      	bhi.n	8004dfe <HAL_RCCEx_PeriphCLKConfig+0x436>
 8004da0:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8004da4:	d031      	beq.n	8004e0a <HAL_RCCEx_PeriphCLKConfig+0x442>
 8004da6:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8004daa:	d828      	bhi.n	8004dfe <HAL_RCCEx_PeriphCLKConfig+0x436>
 8004dac:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004db0:	d01a      	beq.n	8004de8 <HAL_RCCEx_PeriphCLKConfig+0x420>
 8004db2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004db6:	d822      	bhi.n	8004dfe <HAL_RCCEx_PeriphCLKConfig+0x436>
 8004db8:	2b00      	cmp	r3, #0
 8004dba:	d003      	beq.n	8004dc4 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
 8004dbc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004dc0:	d007      	beq.n	8004dd2 <HAL_RCCEx_PeriphCLKConfig+0x40a>
 8004dc2:	e01c      	b.n	8004dfe <HAL_RCCEx_PeriphCLKConfig+0x436>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004dc4:	4b7e      	ldr	r3, [pc, #504]	@ (8004fc0 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8004dc6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004dc8:	4a7d      	ldr	r2, [pc, #500]	@ (8004fc0 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8004dca:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004dce:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8004dd0:	e01c      	b.n	8004e0c <HAL_RCCEx_PeriphCLKConfig+0x444>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004dd2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004dd6:	3308      	adds	r3, #8
 8004dd8:	2100      	movs	r1, #0
 8004dda:	4618      	mov	r0, r3
 8004ddc:	f001 fa52 	bl	8006284 <RCCEx_PLL2_Config>
 8004de0:	4603      	mov	r3, r0
 8004de2:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8004de6:	e011      	b.n	8004e0c <HAL_RCCEx_PeriphCLKConfig+0x444>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8004de8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004dec:	3328      	adds	r3, #40	@ 0x28
 8004dee:	2100      	movs	r1, #0
 8004df0:	4618      	mov	r0, r3
 8004df2:	f001 faf9 	bl	80063e8 <RCCEx_PLL3_Config>
 8004df6:	4603      	mov	r3, r0
 8004df8:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8004dfc:	e006      	b.n	8004e0c <HAL_RCCEx_PeriphCLKConfig+0x444>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004dfe:	2301      	movs	r3, #1
 8004e00:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8004e04:	e002      	b.n	8004e0c <HAL_RCCEx_PeriphCLKConfig+0x444>
        break;
 8004e06:	bf00      	nop
 8004e08:	e000      	b.n	8004e0c <HAL_RCCEx_PeriphCLKConfig+0x444>
        break;
 8004e0a:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004e0c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004e10:	2b00      	cmp	r3, #0
 8004e12:	d10a      	bne.n	8004e2a <HAL_RCCEx_PeriphCLKConfig+0x462>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8004e14:	4b6a      	ldr	r3, [pc, #424]	@ (8004fc0 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8004e16:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004e18:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 8004e1c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004e20:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004e22:	4a67      	ldr	r2, [pc, #412]	@ (8004fc0 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8004e24:	430b      	orrs	r3, r1
 8004e26:	6513      	str	r3, [r2, #80]	@ 0x50
 8004e28:	e003      	b.n	8004e32 <HAL_RCCEx_PeriphCLKConfig+0x46a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004e2a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004e2e:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8004e32:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004e36:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e3a:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 8004e3e:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8004e42:	2300      	movs	r3, #0
 8004e44:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8004e48:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 8004e4c:	460b      	mov	r3, r1
 8004e4e:	4313      	orrs	r3, r2
 8004e50:	d053      	beq.n	8004efa <HAL_RCCEx_PeriphCLKConfig+0x532>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 8004e52:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004e56:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004e58:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004e5c:	d033      	beq.n	8004ec6 <HAL_RCCEx_PeriphCLKConfig+0x4fe>
 8004e5e:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004e62:	d82c      	bhi.n	8004ebe <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8004e64:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8004e68:	d02f      	beq.n	8004eca <HAL_RCCEx_PeriphCLKConfig+0x502>
 8004e6a:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8004e6e:	d826      	bhi.n	8004ebe <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8004e70:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8004e74:	d02b      	beq.n	8004ece <HAL_RCCEx_PeriphCLKConfig+0x506>
 8004e76:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8004e7a:	d820      	bhi.n	8004ebe <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8004e7c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004e80:	d012      	beq.n	8004ea8 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
 8004e82:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004e86:	d81a      	bhi.n	8004ebe <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8004e88:	2b00      	cmp	r3, #0
 8004e8a:	d022      	beq.n	8004ed2 <HAL_RCCEx_PeriphCLKConfig+0x50a>
 8004e8c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004e90:	d115      	bne.n	8004ebe <HAL_RCCEx_PeriphCLKConfig+0x4f6>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004e92:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004e96:	3308      	adds	r3, #8
 8004e98:	2101      	movs	r1, #1
 8004e9a:	4618      	mov	r0, r3
 8004e9c:	f001 f9f2 	bl	8006284 <RCCEx_PLL2_Config>
 8004ea0:	4603      	mov	r3, r0
 8004ea2:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8004ea6:	e015      	b.n	8004ed4 <HAL_RCCEx_PeriphCLKConfig+0x50c>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8004ea8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004eac:	3328      	adds	r3, #40	@ 0x28
 8004eae:	2101      	movs	r1, #1
 8004eb0:	4618      	mov	r0, r3
 8004eb2:	f001 fa99 	bl	80063e8 <RCCEx_PLL3_Config>
 8004eb6:	4603      	mov	r3, r0
 8004eb8:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8004ebc:	e00a      	b.n	8004ed4 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004ebe:	2301      	movs	r3, #1
 8004ec0:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8004ec4:	e006      	b.n	8004ed4 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 8004ec6:	bf00      	nop
 8004ec8:	e004      	b.n	8004ed4 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 8004eca:	bf00      	nop
 8004ecc:	e002      	b.n	8004ed4 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 8004ece:	bf00      	nop
 8004ed0:	e000      	b.n	8004ed4 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 8004ed2:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004ed4:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004ed8:	2b00      	cmp	r3, #0
 8004eda:	d10a      	bne.n	8004ef2 <HAL_RCCEx_PeriphCLKConfig+0x52a>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8004edc:	4b38      	ldr	r3, [pc, #224]	@ (8004fc0 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8004ede:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004ee0:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 8004ee4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004ee8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004eea:	4a35      	ldr	r2, [pc, #212]	@ (8004fc0 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8004eec:	430b      	orrs	r3, r1
 8004eee:	6513      	str	r3, [r2, #80]	@ 0x50
 8004ef0:	e003      	b.n	8004efa <HAL_RCCEx_PeriphCLKConfig+0x532>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004ef2:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004ef6:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8004efa:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004efe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f02:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 8004f06:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8004f0a:	2300      	movs	r3, #0
 8004f0c:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8004f10:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8004f14:	460b      	mov	r3, r1
 8004f16:	4313      	orrs	r3, r2
 8004f18:	d058      	beq.n	8004fcc <HAL_RCCEx_PeriphCLKConfig+0x604>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 8004f1a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004f1e:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8004f22:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004f26:	d033      	beq.n	8004f90 <HAL_RCCEx_PeriphCLKConfig+0x5c8>
 8004f28:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004f2c:	d82c      	bhi.n	8004f88 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 8004f2e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004f32:	d02f      	beq.n	8004f94 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
 8004f34:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004f38:	d826      	bhi.n	8004f88 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 8004f3a:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8004f3e:	d02b      	beq.n	8004f98 <HAL_RCCEx_PeriphCLKConfig+0x5d0>
 8004f40:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8004f44:	d820      	bhi.n	8004f88 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 8004f46:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004f4a:	d012      	beq.n	8004f72 <HAL_RCCEx_PeriphCLKConfig+0x5aa>
 8004f4c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004f50:	d81a      	bhi.n	8004f88 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 8004f52:	2b00      	cmp	r3, #0
 8004f54:	d022      	beq.n	8004f9c <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 8004f56:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8004f5a:	d115      	bne.n	8004f88 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004f5c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004f60:	3308      	adds	r3, #8
 8004f62:	2101      	movs	r1, #1
 8004f64:	4618      	mov	r0, r3
 8004f66:	f001 f98d 	bl	8006284 <RCCEx_PLL2_Config>
 8004f6a:	4603      	mov	r3, r0
 8004f6c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8004f70:	e015      	b.n	8004f9e <HAL_RCCEx_PeriphCLKConfig+0x5d6>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8004f72:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004f76:	3328      	adds	r3, #40	@ 0x28
 8004f78:	2101      	movs	r1, #1
 8004f7a:	4618      	mov	r0, r3
 8004f7c:	f001 fa34 	bl	80063e8 <RCCEx_PLL3_Config>
 8004f80:	4603      	mov	r3, r0
 8004f82:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8004f86:	e00a      	b.n	8004f9e <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 8004f88:	2301      	movs	r3, #1
 8004f8a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8004f8e:	e006      	b.n	8004f9e <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8004f90:	bf00      	nop
 8004f92:	e004      	b.n	8004f9e <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8004f94:	bf00      	nop
 8004f96:	e002      	b.n	8004f9e <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8004f98:	bf00      	nop
 8004f9a:	e000      	b.n	8004f9e <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8004f9c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004f9e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004fa2:	2b00      	cmp	r3, #0
 8004fa4:	d10e      	bne.n	8004fc4 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8004fa6:	4b06      	ldr	r3, [pc, #24]	@ (8004fc0 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8004fa8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004faa:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8004fae:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004fb2:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8004fb6:	4a02      	ldr	r2, [pc, #8]	@ (8004fc0 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8004fb8:	430b      	orrs	r3, r1
 8004fba:	6593      	str	r3, [r2, #88]	@ 0x58
 8004fbc:	e006      	b.n	8004fcc <HAL_RCCEx_PeriphCLKConfig+0x604>
 8004fbe:	bf00      	nop
 8004fc0:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004fc4:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004fc8:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8004fcc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004fd0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004fd4:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 8004fd8:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8004fdc:	2300      	movs	r3, #0
 8004fde:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8004fe2:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 8004fe6:	460b      	mov	r3, r1
 8004fe8:	4313      	orrs	r3, r2
 8004fea:	d037      	beq.n	800505c <HAL_RCCEx_PeriphCLKConfig+0x694>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8004fec:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004ff0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004ff2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004ff6:	d00e      	beq.n	8005016 <HAL_RCCEx_PeriphCLKConfig+0x64e>
 8004ff8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004ffc:	d816      	bhi.n	800502c <HAL_RCCEx_PeriphCLKConfig+0x664>
 8004ffe:	2b00      	cmp	r3, #0
 8005000:	d018      	beq.n	8005034 <HAL_RCCEx_PeriphCLKConfig+0x66c>
 8005002:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8005006:	d111      	bne.n	800502c <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005008:	4bc4      	ldr	r3, [pc, #784]	@ (800531c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800500a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800500c:	4ac3      	ldr	r2, [pc, #780]	@ (800531c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800500e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005012:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8005014:	e00f      	b.n	8005036 <HAL_RCCEx_PeriphCLKConfig+0x66e>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8005016:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800501a:	3308      	adds	r3, #8
 800501c:	2101      	movs	r1, #1
 800501e:	4618      	mov	r0, r3
 8005020:	f001 f930 	bl	8006284 <RCCEx_PLL2_Config>
 8005024:	4603      	mov	r3, r0
 8005026:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 800502a:	e004      	b.n	8005036 <HAL_RCCEx_PeriphCLKConfig+0x66e>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800502c:	2301      	movs	r3, #1
 800502e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8005032:	e000      	b.n	8005036 <HAL_RCCEx_PeriphCLKConfig+0x66e>
        break;
 8005034:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005036:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800503a:	2b00      	cmp	r3, #0
 800503c:	d10a      	bne.n	8005054 <HAL_RCCEx_PeriphCLKConfig+0x68c>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800503e:	4bb7      	ldr	r3, [pc, #732]	@ (800531c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8005040:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005042:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8005046:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800504a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800504c:	4ab3      	ldr	r2, [pc, #716]	@ (800531c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800504e:	430b      	orrs	r3, r1
 8005050:	6513      	str	r3, [r2, #80]	@ 0x50
 8005052:	e003      	b.n	800505c <HAL_RCCEx_PeriphCLKConfig+0x694>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005054:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005058:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 800505c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005060:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005064:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 8005068:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800506c:	2300      	movs	r3, #0
 800506e:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8005072:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 8005076:	460b      	mov	r3, r1
 8005078:	4313      	orrs	r3, r2
 800507a:	d039      	beq.n	80050f0 <HAL_RCCEx_PeriphCLKConfig+0x728>
  {
    switch (PeriphClkInit->FmcClockSelection)
 800507c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005080:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005082:	2b03      	cmp	r3, #3
 8005084:	d81c      	bhi.n	80050c0 <HAL_RCCEx_PeriphCLKConfig+0x6f8>
 8005086:	a201      	add	r2, pc, #4	@ (adr r2, 800508c <HAL_RCCEx_PeriphCLKConfig+0x6c4>)
 8005088:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800508c:	080050c9 	.word	0x080050c9
 8005090:	0800509d 	.word	0x0800509d
 8005094:	080050ab 	.word	0x080050ab
 8005098:	080050c9 	.word	0x080050c9
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800509c:	4b9f      	ldr	r3, [pc, #636]	@ (800531c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800509e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80050a0:	4a9e      	ldr	r2, [pc, #632]	@ (800531c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80050a2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80050a6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 80050a8:	e00f      	b.n	80050ca <HAL_RCCEx_PeriphCLKConfig+0x702>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80050aa:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80050ae:	3308      	adds	r3, #8
 80050b0:	2102      	movs	r1, #2
 80050b2:	4618      	mov	r0, r3
 80050b4:	f001 f8e6 	bl	8006284 <RCCEx_PLL2_Config>
 80050b8:	4603      	mov	r3, r0
 80050ba:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* FMC clock source configuration done later after clock selection check */
        break;
 80050be:	e004      	b.n	80050ca <HAL_RCCEx_PeriphCLKConfig+0x702>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 80050c0:	2301      	movs	r3, #1
 80050c2:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80050c6:	e000      	b.n	80050ca <HAL_RCCEx_PeriphCLKConfig+0x702>
        break;
 80050c8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80050ca:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80050ce:	2b00      	cmp	r3, #0
 80050d0:	d10a      	bne.n	80050e8 <HAL_RCCEx_PeriphCLKConfig+0x720>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 80050d2:	4b92      	ldr	r3, [pc, #584]	@ (800531c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80050d4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80050d6:	f023 0103 	bic.w	r1, r3, #3
 80050da:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80050de:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80050e0:	4a8e      	ldr	r2, [pc, #568]	@ (800531c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80050e2:	430b      	orrs	r3, r1
 80050e4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80050e6:	e003      	b.n	80050f0 <HAL_RCCEx_PeriphCLKConfig+0x728>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80050e8:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80050ec:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80050f0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80050f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80050f8:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 80050fc:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8005100:	2300      	movs	r3, #0
 8005102:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8005106:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 800510a:	460b      	mov	r3, r1
 800510c:	4313      	orrs	r3, r2
 800510e:	f000 8099 	beq.w	8005244 <HAL_RCCEx_PeriphCLKConfig+0x87c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005112:	4b83      	ldr	r3, [pc, #524]	@ (8005320 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8005114:	681b      	ldr	r3, [r3, #0]
 8005116:	4a82      	ldr	r2, [pc, #520]	@ (8005320 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8005118:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800511c:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800511e:	f7fd fa7f 	bl	8002620 <HAL_GetTick>
 8005122:	f8c7 0110 	str.w	r0, [r7, #272]	@ 0x110

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005126:	e00b      	b.n	8005140 <HAL_RCCEx_PeriphCLKConfig+0x778>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005128:	f7fd fa7a 	bl	8002620 <HAL_GetTick>
 800512c:	4602      	mov	r2, r0
 800512e:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8005132:	1ad3      	subs	r3, r2, r3
 8005134:	2b64      	cmp	r3, #100	@ 0x64
 8005136:	d903      	bls.n	8005140 <HAL_RCCEx_PeriphCLKConfig+0x778>
      {
        ret = HAL_TIMEOUT;
 8005138:	2303      	movs	r3, #3
 800513a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800513e:	e005      	b.n	800514c <HAL_RCCEx_PeriphCLKConfig+0x784>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005140:	4b77      	ldr	r3, [pc, #476]	@ (8005320 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8005142:	681b      	ldr	r3, [r3, #0]
 8005144:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005148:	2b00      	cmp	r3, #0
 800514a:	d0ed      	beq.n	8005128 <HAL_RCCEx_PeriphCLKConfig+0x760>
      }
    }

    if (ret == HAL_OK)
 800514c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005150:	2b00      	cmp	r3, #0
 8005152:	d173      	bne.n	800523c <HAL_RCCEx_PeriphCLKConfig+0x874>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8005154:	4b71      	ldr	r3, [pc, #452]	@ (800531c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8005156:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8005158:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800515c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8005160:	4053      	eors	r3, r2
 8005162:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005166:	2b00      	cmp	r3, #0
 8005168:	d015      	beq.n	8005196 <HAL_RCCEx_PeriphCLKConfig+0x7ce>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800516a:	4b6c      	ldr	r3, [pc, #432]	@ (800531c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800516c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800516e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005172:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8005176:	4b69      	ldr	r3, [pc, #420]	@ (800531c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8005178:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800517a:	4a68      	ldr	r2, [pc, #416]	@ (800531c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800517c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005180:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8005182:	4b66      	ldr	r3, [pc, #408]	@ (800531c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8005184:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005186:	4a65      	ldr	r2, [pc, #404]	@ (800531c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8005188:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800518c:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 800518e:	4a63      	ldr	r2, [pc, #396]	@ (800531c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8005190:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005194:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8005196:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800519a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800519e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80051a2:	d118      	bne.n	80051d6 <HAL_RCCEx_PeriphCLKConfig+0x80e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80051a4:	f7fd fa3c 	bl	8002620 <HAL_GetTick>
 80051a8:	f8c7 0110 	str.w	r0, [r7, #272]	@ 0x110

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80051ac:	e00d      	b.n	80051ca <HAL_RCCEx_PeriphCLKConfig+0x802>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80051ae:	f7fd fa37 	bl	8002620 <HAL_GetTick>
 80051b2:	4602      	mov	r2, r0
 80051b4:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 80051b8:	1ad2      	subs	r2, r2, r3
 80051ba:	f241 3388 	movw	r3, #5000	@ 0x1388
 80051be:	429a      	cmp	r2, r3
 80051c0:	d903      	bls.n	80051ca <HAL_RCCEx_PeriphCLKConfig+0x802>
          {
            ret = HAL_TIMEOUT;
 80051c2:	2303      	movs	r3, #3
 80051c4:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
            break;
 80051c8:	e005      	b.n	80051d6 <HAL_RCCEx_PeriphCLKConfig+0x80e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80051ca:	4b54      	ldr	r3, [pc, #336]	@ (800531c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80051cc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80051ce:	f003 0302 	and.w	r3, r3, #2
 80051d2:	2b00      	cmp	r3, #0
 80051d4:	d0eb      	beq.n	80051ae <HAL_RCCEx_PeriphCLKConfig+0x7e6>
          }
        }
      }

      if (ret == HAL_OK)
 80051d6:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80051da:	2b00      	cmp	r3, #0
 80051dc:	d129      	bne.n	8005232 <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80051de:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80051e2:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 80051e6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80051ea:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80051ee:	d10e      	bne.n	800520e <HAL_RCCEx_PeriphCLKConfig+0x846>
 80051f0:	4b4a      	ldr	r3, [pc, #296]	@ (800531c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80051f2:	691b      	ldr	r3, [r3, #16]
 80051f4:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 80051f8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80051fc:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8005200:	091a      	lsrs	r2, r3, #4
 8005202:	4b48      	ldr	r3, [pc, #288]	@ (8005324 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8005204:	4013      	ands	r3, r2
 8005206:	4a45      	ldr	r2, [pc, #276]	@ (800531c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8005208:	430b      	orrs	r3, r1
 800520a:	6113      	str	r3, [r2, #16]
 800520c:	e005      	b.n	800521a <HAL_RCCEx_PeriphCLKConfig+0x852>
 800520e:	4b43      	ldr	r3, [pc, #268]	@ (800531c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8005210:	691b      	ldr	r3, [r3, #16]
 8005212:	4a42      	ldr	r2, [pc, #264]	@ (800531c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8005214:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8005218:	6113      	str	r3, [r2, #16]
 800521a:	4b40      	ldr	r3, [pc, #256]	@ (800531c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800521c:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 800521e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005222:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8005226:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800522a:	4a3c      	ldr	r2, [pc, #240]	@ (800531c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800522c:	430b      	orrs	r3, r1
 800522e:	6713      	str	r3, [r2, #112]	@ 0x70
 8005230:	e008      	b.n	8005244 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8005232:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005236:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
 800523a:	e003      	b.n	8005244 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800523c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005240:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8005244:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005248:	e9d3 2300 	ldrd	r2, r3, [r3]
 800524c:	f002 0301 	and.w	r3, r2, #1
 8005250:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8005254:	2300      	movs	r3, #0
 8005256:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 800525a:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 800525e:	460b      	mov	r3, r1
 8005260:	4313      	orrs	r3, r2
 8005262:	f000 808f 	beq.w	8005384 <HAL_RCCEx_PeriphCLKConfig+0x9bc>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 8005266:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800526a:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800526c:	2b28      	cmp	r3, #40	@ 0x28
 800526e:	d871      	bhi.n	8005354 <HAL_RCCEx_PeriphCLKConfig+0x98c>
 8005270:	a201      	add	r2, pc, #4	@ (adr r2, 8005278 <HAL_RCCEx_PeriphCLKConfig+0x8b0>)
 8005272:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005276:	bf00      	nop
 8005278:	0800535d 	.word	0x0800535d
 800527c:	08005355 	.word	0x08005355
 8005280:	08005355 	.word	0x08005355
 8005284:	08005355 	.word	0x08005355
 8005288:	08005355 	.word	0x08005355
 800528c:	08005355 	.word	0x08005355
 8005290:	08005355 	.word	0x08005355
 8005294:	08005355 	.word	0x08005355
 8005298:	08005329 	.word	0x08005329
 800529c:	08005355 	.word	0x08005355
 80052a0:	08005355 	.word	0x08005355
 80052a4:	08005355 	.word	0x08005355
 80052a8:	08005355 	.word	0x08005355
 80052ac:	08005355 	.word	0x08005355
 80052b0:	08005355 	.word	0x08005355
 80052b4:	08005355 	.word	0x08005355
 80052b8:	0800533f 	.word	0x0800533f
 80052bc:	08005355 	.word	0x08005355
 80052c0:	08005355 	.word	0x08005355
 80052c4:	08005355 	.word	0x08005355
 80052c8:	08005355 	.word	0x08005355
 80052cc:	08005355 	.word	0x08005355
 80052d0:	08005355 	.word	0x08005355
 80052d4:	08005355 	.word	0x08005355
 80052d8:	0800535d 	.word	0x0800535d
 80052dc:	08005355 	.word	0x08005355
 80052e0:	08005355 	.word	0x08005355
 80052e4:	08005355 	.word	0x08005355
 80052e8:	08005355 	.word	0x08005355
 80052ec:	08005355 	.word	0x08005355
 80052f0:	08005355 	.word	0x08005355
 80052f4:	08005355 	.word	0x08005355
 80052f8:	0800535d 	.word	0x0800535d
 80052fc:	08005355 	.word	0x08005355
 8005300:	08005355 	.word	0x08005355
 8005304:	08005355 	.word	0x08005355
 8005308:	08005355 	.word	0x08005355
 800530c:	08005355 	.word	0x08005355
 8005310:	08005355 	.word	0x08005355
 8005314:	08005355 	.word	0x08005355
 8005318:	0800535d 	.word	0x0800535d
 800531c:	58024400 	.word	0x58024400
 8005320:	58024800 	.word	0x58024800
 8005324:	00ffffcf 	.word	0x00ffffcf
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8005328:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800532c:	3308      	adds	r3, #8
 800532e:	2101      	movs	r1, #1
 8005330:	4618      	mov	r0, r3
 8005332:	f000 ffa7 	bl	8006284 <RCCEx_PLL2_Config>
 8005336:	4603      	mov	r3, r0
 8005338:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 800533c:	e00f      	b.n	800535e <HAL_RCCEx_PeriphCLKConfig+0x996>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800533e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005342:	3328      	adds	r3, #40	@ 0x28
 8005344:	2101      	movs	r1, #1
 8005346:	4618      	mov	r0, r3
 8005348:	f001 f84e 	bl	80063e8 <RCCEx_PLL3_Config>
 800534c:	4603      	mov	r3, r0
 800534e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8005352:	e004      	b.n	800535e <HAL_RCCEx_PeriphCLKConfig+0x996>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005354:	2301      	movs	r3, #1
 8005356:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800535a:	e000      	b.n	800535e <HAL_RCCEx_PeriphCLKConfig+0x996>
        break;
 800535c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800535e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005362:	2b00      	cmp	r3, #0
 8005364:	d10a      	bne.n	800537c <HAL_RCCEx_PeriphCLKConfig+0x9b4>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8005366:	4bbf      	ldr	r3, [pc, #764]	@ (8005664 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8005368:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800536a:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 800536e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005372:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8005374:	4abb      	ldr	r2, [pc, #748]	@ (8005664 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8005376:	430b      	orrs	r3, r1
 8005378:	6553      	str	r3, [r2, #84]	@ 0x54
 800537a:	e003      	b.n	8005384 <HAL_RCCEx_PeriphCLKConfig+0x9bc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800537c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005380:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8005384:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005388:	e9d3 2300 	ldrd	r2, r3, [r3]
 800538c:	f002 0302 	and.w	r3, r2, #2
 8005390:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8005394:	2300      	movs	r3, #0
 8005396:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800539a:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 800539e:	460b      	mov	r3, r1
 80053a0:	4313      	orrs	r3, r2
 80053a2:	d041      	beq.n	8005428 <HAL_RCCEx_PeriphCLKConfig+0xa60>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 80053a4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80053a8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80053aa:	2b05      	cmp	r3, #5
 80053ac:	d824      	bhi.n	80053f8 <HAL_RCCEx_PeriphCLKConfig+0xa30>
 80053ae:	a201      	add	r2, pc, #4	@ (adr r2, 80053b4 <HAL_RCCEx_PeriphCLKConfig+0x9ec>)
 80053b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80053b4:	08005401 	.word	0x08005401
 80053b8:	080053cd 	.word	0x080053cd
 80053bc:	080053e3 	.word	0x080053e3
 80053c0:	08005401 	.word	0x08005401
 80053c4:	08005401 	.word	0x08005401
 80053c8:	08005401 	.word	0x08005401
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80053cc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80053d0:	3308      	adds	r3, #8
 80053d2:	2101      	movs	r1, #1
 80053d4:	4618      	mov	r0, r3
 80053d6:	f000 ff55 	bl	8006284 <RCCEx_PLL2_Config>
 80053da:	4603      	mov	r3, r0
 80053dc:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 80053e0:	e00f      	b.n	8005402 <HAL_RCCEx_PeriphCLKConfig+0xa3a>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80053e2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80053e6:	3328      	adds	r3, #40	@ 0x28
 80053e8:	2101      	movs	r1, #1
 80053ea:	4618      	mov	r0, r3
 80053ec:	f000 fffc 	bl	80063e8 <RCCEx_PLL3_Config>
 80053f0:	4603      	mov	r3, r0
 80053f2:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 80053f6:	e004      	b.n	8005402 <HAL_RCCEx_PeriphCLKConfig+0xa3a>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80053f8:	2301      	movs	r3, #1
 80053fa:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80053fe:	e000      	b.n	8005402 <HAL_RCCEx_PeriphCLKConfig+0xa3a>
        break;
 8005400:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005402:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005406:	2b00      	cmp	r3, #0
 8005408:	d10a      	bne.n	8005420 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 800540a:	4b96      	ldr	r3, [pc, #600]	@ (8005664 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800540c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800540e:	f023 0107 	bic.w	r1, r3, #7
 8005412:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005416:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005418:	4a92      	ldr	r2, [pc, #584]	@ (8005664 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800541a:	430b      	orrs	r3, r1
 800541c:	6553      	str	r3, [r2, #84]	@ 0x54
 800541e:	e003      	b.n	8005428 <HAL_RCCEx_PeriphCLKConfig+0xa60>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005420:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005424:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8005428:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800542c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005430:	f002 0304 	and.w	r3, r2, #4
 8005434:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8005438:	2300      	movs	r3, #0
 800543a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800543e:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8005442:	460b      	mov	r3, r1
 8005444:	4313      	orrs	r3, r2
 8005446:	d044      	beq.n	80054d2 <HAL_RCCEx_PeriphCLKConfig+0xb0a>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8005448:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800544c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005450:	2b05      	cmp	r3, #5
 8005452:	d825      	bhi.n	80054a0 <HAL_RCCEx_PeriphCLKConfig+0xad8>
 8005454:	a201      	add	r2, pc, #4	@ (adr r2, 800545c <HAL_RCCEx_PeriphCLKConfig+0xa94>)
 8005456:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800545a:	bf00      	nop
 800545c:	080054a9 	.word	0x080054a9
 8005460:	08005475 	.word	0x08005475
 8005464:	0800548b 	.word	0x0800548b
 8005468:	080054a9 	.word	0x080054a9
 800546c:	080054a9 	.word	0x080054a9
 8005470:	080054a9 	.word	0x080054a9
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8005474:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005478:	3308      	adds	r3, #8
 800547a:	2101      	movs	r1, #1
 800547c:	4618      	mov	r0, r3
 800547e:	f000 ff01 	bl	8006284 <RCCEx_PLL2_Config>
 8005482:	4603      	mov	r3, r0
 8005484:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8005488:	e00f      	b.n	80054aa <HAL_RCCEx_PeriphCLKConfig+0xae2>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800548a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800548e:	3328      	adds	r3, #40	@ 0x28
 8005490:	2101      	movs	r1, #1
 8005492:	4618      	mov	r0, r3
 8005494:	f000 ffa8 	bl	80063e8 <RCCEx_PLL3_Config>
 8005498:	4603      	mov	r3, r0
 800549a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800549e:	e004      	b.n	80054aa <HAL_RCCEx_PeriphCLKConfig+0xae2>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80054a0:	2301      	movs	r3, #1
 80054a2:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80054a6:	e000      	b.n	80054aa <HAL_RCCEx_PeriphCLKConfig+0xae2>
        break;
 80054a8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80054aa:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80054ae:	2b00      	cmp	r3, #0
 80054b0:	d10b      	bne.n	80054ca <HAL_RCCEx_PeriphCLKConfig+0xb02>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80054b2:	4b6c      	ldr	r3, [pc, #432]	@ (8005664 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 80054b4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80054b6:	f023 0107 	bic.w	r1, r3, #7
 80054ba:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80054be:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80054c2:	4a68      	ldr	r2, [pc, #416]	@ (8005664 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 80054c4:	430b      	orrs	r3, r1
 80054c6:	6593      	str	r3, [r2, #88]	@ 0x58
 80054c8:	e003      	b.n	80054d2 <HAL_RCCEx_PeriphCLKConfig+0xb0a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80054ca:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80054ce:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80054d2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80054d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80054da:	f002 0320 	and.w	r3, r2, #32
 80054de:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80054e2:	2300      	movs	r3, #0
 80054e4:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 80054e8:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 80054ec:	460b      	mov	r3, r1
 80054ee:	4313      	orrs	r3, r2
 80054f0:	d055      	beq.n	800559e <HAL_RCCEx_PeriphCLKConfig+0xbd6>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 80054f2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80054f6:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80054fa:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80054fe:	d033      	beq.n	8005568 <HAL_RCCEx_PeriphCLKConfig+0xba0>
 8005500:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8005504:	d82c      	bhi.n	8005560 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 8005506:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800550a:	d02f      	beq.n	800556c <HAL_RCCEx_PeriphCLKConfig+0xba4>
 800550c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005510:	d826      	bhi.n	8005560 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 8005512:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8005516:	d02b      	beq.n	8005570 <HAL_RCCEx_PeriphCLKConfig+0xba8>
 8005518:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800551c:	d820      	bhi.n	8005560 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 800551e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005522:	d012      	beq.n	800554a <HAL_RCCEx_PeriphCLKConfig+0xb82>
 8005524:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005528:	d81a      	bhi.n	8005560 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 800552a:	2b00      	cmp	r3, #0
 800552c:	d022      	beq.n	8005574 <HAL_RCCEx_PeriphCLKConfig+0xbac>
 800552e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8005532:	d115      	bne.n	8005560 <HAL_RCCEx_PeriphCLKConfig+0xb98>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005534:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005538:	3308      	adds	r3, #8
 800553a:	2100      	movs	r1, #0
 800553c:	4618      	mov	r0, r3
 800553e:	f000 fea1 	bl	8006284 <RCCEx_PLL2_Config>
 8005542:	4603      	mov	r3, r0
 8005544:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8005548:	e015      	b.n	8005576 <HAL_RCCEx_PeriphCLKConfig+0xbae>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800554a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800554e:	3328      	adds	r3, #40	@ 0x28
 8005550:	2102      	movs	r1, #2
 8005552:	4618      	mov	r0, r3
 8005554:	f000 ff48 	bl	80063e8 <RCCEx_PLL3_Config>
 8005558:	4603      	mov	r3, r0
 800555a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800555e:	e00a      	b.n	8005576 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005560:	2301      	movs	r3, #1
 8005562:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8005566:	e006      	b.n	8005576 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 8005568:	bf00      	nop
 800556a:	e004      	b.n	8005576 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 800556c:	bf00      	nop
 800556e:	e002      	b.n	8005576 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 8005570:	bf00      	nop
 8005572:	e000      	b.n	8005576 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 8005574:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005576:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800557a:	2b00      	cmp	r3, #0
 800557c:	d10b      	bne.n	8005596 <HAL_RCCEx_PeriphCLKConfig+0xbce>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800557e:	4b39      	ldr	r3, [pc, #228]	@ (8005664 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8005580:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005582:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8005586:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800558a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800558e:	4a35      	ldr	r2, [pc, #212]	@ (8005664 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8005590:	430b      	orrs	r3, r1
 8005592:	6553      	str	r3, [r2, #84]	@ 0x54
 8005594:	e003      	b.n	800559e <HAL_RCCEx_PeriphCLKConfig+0xbd6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005596:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800559a:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 800559e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80055a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80055a6:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 80055aa:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80055ae:	2300      	movs	r3, #0
 80055b0:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80055b4:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 80055b8:	460b      	mov	r3, r1
 80055ba:	4313      	orrs	r3, r2
 80055bc:	d058      	beq.n	8005670 <HAL_RCCEx_PeriphCLKConfig+0xca8>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 80055be:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80055c2:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80055c6:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 80055ca:	d033      	beq.n	8005634 <HAL_RCCEx_PeriphCLKConfig+0xc6c>
 80055cc:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 80055d0:	d82c      	bhi.n	800562c <HAL_RCCEx_PeriphCLKConfig+0xc64>
 80055d2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80055d6:	d02f      	beq.n	8005638 <HAL_RCCEx_PeriphCLKConfig+0xc70>
 80055d8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80055dc:	d826      	bhi.n	800562c <HAL_RCCEx_PeriphCLKConfig+0xc64>
 80055de:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80055e2:	d02b      	beq.n	800563c <HAL_RCCEx_PeriphCLKConfig+0xc74>
 80055e4:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80055e8:	d820      	bhi.n	800562c <HAL_RCCEx_PeriphCLKConfig+0xc64>
 80055ea:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80055ee:	d012      	beq.n	8005616 <HAL_RCCEx_PeriphCLKConfig+0xc4e>
 80055f0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80055f4:	d81a      	bhi.n	800562c <HAL_RCCEx_PeriphCLKConfig+0xc64>
 80055f6:	2b00      	cmp	r3, #0
 80055f8:	d022      	beq.n	8005640 <HAL_RCCEx_PeriphCLKConfig+0xc78>
 80055fa:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80055fe:	d115      	bne.n	800562c <HAL_RCCEx_PeriphCLKConfig+0xc64>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005600:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005604:	3308      	adds	r3, #8
 8005606:	2100      	movs	r1, #0
 8005608:	4618      	mov	r0, r3
 800560a:	f000 fe3b 	bl	8006284 <RCCEx_PLL2_Config>
 800560e:	4603      	mov	r3, r0
 8005610:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8005614:	e015      	b.n	8005642 <HAL_RCCEx_PeriphCLKConfig+0xc7a>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8005616:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800561a:	3328      	adds	r3, #40	@ 0x28
 800561c:	2102      	movs	r1, #2
 800561e:	4618      	mov	r0, r3
 8005620:	f000 fee2 	bl	80063e8 <RCCEx_PLL3_Config>
 8005624:	4603      	mov	r3, r0
 8005626:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800562a:	e00a      	b.n	8005642 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800562c:	2301      	movs	r3, #1
 800562e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8005632:	e006      	b.n	8005642 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 8005634:	bf00      	nop
 8005636:	e004      	b.n	8005642 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 8005638:	bf00      	nop
 800563a:	e002      	b.n	8005642 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 800563c:	bf00      	nop
 800563e:	e000      	b.n	8005642 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 8005640:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005642:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005646:	2b00      	cmp	r3, #0
 8005648:	d10e      	bne.n	8005668 <HAL_RCCEx_PeriphCLKConfig+0xca0>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800564a:	4b06      	ldr	r3, [pc, #24]	@ (8005664 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800564c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800564e:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 8005652:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005656:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800565a:	4a02      	ldr	r2, [pc, #8]	@ (8005664 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800565c:	430b      	orrs	r3, r1
 800565e:	6593      	str	r3, [r2, #88]	@ 0x58
 8005660:	e006      	b.n	8005670 <HAL_RCCEx_PeriphCLKConfig+0xca8>
 8005662:	bf00      	nop
 8005664:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005668:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800566c:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8005670:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005674:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005678:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 800567c:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8005680:	2300      	movs	r3, #0
 8005682:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8005686:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 800568a:	460b      	mov	r3, r1
 800568c:	4313      	orrs	r3, r2
 800568e:	d055      	beq.n	800573c <HAL_RCCEx_PeriphCLKConfig+0xd74>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 8005690:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005694:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8005698:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 800569c:	d033      	beq.n	8005706 <HAL_RCCEx_PeriphCLKConfig+0xd3e>
 800569e:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 80056a2:	d82c      	bhi.n	80056fe <HAL_RCCEx_PeriphCLKConfig+0xd36>
 80056a4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80056a8:	d02f      	beq.n	800570a <HAL_RCCEx_PeriphCLKConfig+0xd42>
 80056aa:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80056ae:	d826      	bhi.n	80056fe <HAL_RCCEx_PeriphCLKConfig+0xd36>
 80056b0:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 80056b4:	d02b      	beq.n	800570e <HAL_RCCEx_PeriphCLKConfig+0xd46>
 80056b6:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 80056ba:	d820      	bhi.n	80056fe <HAL_RCCEx_PeriphCLKConfig+0xd36>
 80056bc:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80056c0:	d012      	beq.n	80056e8 <HAL_RCCEx_PeriphCLKConfig+0xd20>
 80056c2:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80056c6:	d81a      	bhi.n	80056fe <HAL_RCCEx_PeriphCLKConfig+0xd36>
 80056c8:	2b00      	cmp	r3, #0
 80056ca:	d022      	beq.n	8005712 <HAL_RCCEx_PeriphCLKConfig+0xd4a>
 80056cc:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80056d0:	d115      	bne.n	80056fe <HAL_RCCEx_PeriphCLKConfig+0xd36>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80056d2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80056d6:	3308      	adds	r3, #8
 80056d8:	2100      	movs	r1, #0
 80056da:	4618      	mov	r0, r3
 80056dc:	f000 fdd2 	bl	8006284 <RCCEx_PLL2_Config>
 80056e0:	4603      	mov	r3, r0
 80056e2:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 80056e6:	e015      	b.n	8005714 <HAL_RCCEx_PeriphCLKConfig+0xd4c>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80056e8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80056ec:	3328      	adds	r3, #40	@ 0x28
 80056ee:	2102      	movs	r1, #2
 80056f0:	4618      	mov	r0, r3
 80056f2:	f000 fe79 	bl	80063e8 <RCCEx_PLL3_Config>
 80056f6:	4603      	mov	r3, r0
 80056f8:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 80056fc:	e00a      	b.n	8005714 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80056fe:	2301      	movs	r3, #1
 8005700:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8005704:	e006      	b.n	8005714 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 8005706:	bf00      	nop
 8005708:	e004      	b.n	8005714 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 800570a:	bf00      	nop
 800570c:	e002      	b.n	8005714 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 800570e:	bf00      	nop
 8005710:	e000      	b.n	8005714 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 8005712:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005714:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005718:	2b00      	cmp	r3, #0
 800571a:	d10b      	bne.n	8005734 <HAL_RCCEx_PeriphCLKConfig+0xd6c>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 800571c:	4ba0      	ldr	r3, [pc, #640]	@ (80059a0 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800571e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005720:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 8005724:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005728:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800572c:	4a9c      	ldr	r2, [pc, #624]	@ (80059a0 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800572e:	430b      	orrs	r3, r1
 8005730:	6593      	str	r3, [r2, #88]	@ 0x58
 8005732:	e003      	b.n	800573c <HAL_RCCEx_PeriphCLKConfig+0xd74>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005734:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005738:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*------------------------------ I2C1/2/3/5* Configuration ------------------------*/
#if defined(I2C5)
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1235) == RCC_PERIPHCLK_I2C1235)
 800573c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005740:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005744:	f002 0308 	and.w	r3, r2, #8
 8005748:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800574c:	2300      	movs	r3, #0
 800574e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8005752:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 8005756:	460b      	mov	r3, r1
 8005758:	4313      	orrs	r3, r2
 800575a:	d01e      	beq.n	800579a <HAL_RCCEx_PeriphCLKConfig+0xdd2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1235CLKSOURCE(PeriphClkInit->I2c1235ClockSelection));

    if ((PeriphClkInit->I2c1235ClockSelection) == RCC_I2C1235CLKSOURCE_PLL3)
 800575c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005760:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005764:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005768:	d10c      	bne.n	8005784 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800576a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800576e:	3328      	adds	r3, #40	@ 0x28
 8005770:	2102      	movs	r1, #2
 8005772:	4618      	mov	r0, r3
 8005774:	f000 fe38 	bl	80063e8 <RCCEx_PLL3_Config>
 8005778:	4603      	mov	r3, r0
 800577a:	2b00      	cmp	r3, #0
 800577c:	d002      	beq.n	8005784 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
      {
        status = HAL_ERROR;
 800577e:	2301      	movs	r3, #1
 8005780:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
      }
    }

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);
 8005784:	4b86      	ldr	r3, [pc, #536]	@ (80059a0 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8005786:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005788:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800578c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005790:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005794:	4a82      	ldr	r2, [pc, #520]	@ (80059a0 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8005796:	430b      	orrs	r3, r1
 8005798:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800579a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800579e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80057a2:	f002 0310 	and.w	r3, r2, #16
 80057a6:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80057aa:	2300      	movs	r3, #0
 80057ac:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80057b0:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 80057b4:	460b      	mov	r3, r1
 80057b6:	4313      	orrs	r3, r2
 80057b8:	d01e      	beq.n	80057f8 <HAL_RCCEx_PeriphCLKConfig+0xe30>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 80057ba:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80057be:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80057c2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80057c6:	d10c      	bne.n	80057e2 <HAL_RCCEx_PeriphCLKConfig+0xe1a>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80057c8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80057cc:	3328      	adds	r3, #40	@ 0x28
 80057ce:	2102      	movs	r1, #2
 80057d0:	4618      	mov	r0, r3
 80057d2:	f000 fe09 	bl	80063e8 <RCCEx_PLL3_Config>
 80057d6:	4603      	mov	r3, r0
 80057d8:	2b00      	cmp	r3, #0
 80057da:	d002      	beq.n	80057e2 <HAL_RCCEx_PeriphCLKConfig+0xe1a>
      {
        status = HAL_ERROR;
 80057dc:	2301      	movs	r3, #1
 80057de:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80057e2:	4b6f      	ldr	r3, [pc, #444]	@ (80059a0 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80057e4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80057e6:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 80057ea:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80057ee:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80057f2:	4a6b      	ldr	r2, [pc, #428]	@ (80059a0 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80057f4:	430b      	orrs	r3, r1
 80057f6:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80057f8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80057fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005800:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 8005804:	67bb      	str	r3, [r7, #120]	@ 0x78
 8005806:	2300      	movs	r3, #0
 8005808:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800580a:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 800580e:	460b      	mov	r3, r1
 8005810:	4313      	orrs	r3, r2
 8005812:	d03e      	beq.n	8005892 <HAL_RCCEx_PeriphCLKConfig+0xeca>
  {
    switch (PeriphClkInit->AdcClockSelection)
 8005814:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005818:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800581c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005820:	d022      	beq.n	8005868 <HAL_RCCEx_PeriphCLKConfig+0xea0>
 8005822:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005826:	d81b      	bhi.n	8005860 <HAL_RCCEx_PeriphCLKConfig+0xe98>
 8005828:	2b00      	cmp	r3, #0
 800582a:	d003      	beq.n	8005834 <HAL_RCCEx_PeriphCLKConfig+0xe6c>
 800582c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005830:	d00b      	beq.n	800584a <HAL_RCCEx_PeriphCLKConfig+0xe82>
 8005832:	e015      	b.n	8005860 <HAL_RCCEx_PeriphCLKConfig+0xe98>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005834:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005838:	3308      	adds	r3, #8
 800583a:	2100      	movs	r1, #0
 800583c:	4618      	mov	r0, r3
 800583e:	f000 fd21 	bl	8006284 <RCCEx_PLL2_Config>
 8005842:	4603      	mov	r3, r0
 8005844:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* ADC clock source configuration done later after clock selection check */
        break;
 8005848:	e00f      	b.n	800586a <HAL_RCCEx_PeriphCLKConfig+0xea2>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800584a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800584e:	3328      	adds	r3, #40	@ 0x28
 8005850:	2102      	movs	r1, #2
 8005852:	4618      	mov	r0, r3
 8005854:	f000 fdc8 	bl	80063e8 <RCCEx_PLL3_Config>
 8005858:	4603      	mov	r3, r0
 800585a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* ADC clock source configuration done later after clock selection check */
        break;
 800585e:	e004      	b.n	800586a <HAL_RCCEx_PeriphCLKConfig+0xea2>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005860:	2301      	movs	r3, #1
 8005862:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8005866:	e000      	b.n	800586a <HAL_RCCEx_PeriphCLKConfig+0xea2>
        break;
 8005868:	bf00      	nop
    }

    if (ret == HAL_OK)
 800586a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800586e:	2b00      	cmp	r3, #0
 8005870:	d10b      	bne.n	800588a <HAL_RCCEx_PeriphCLKConfig+0xec2>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8005872:	4b4b      	ldr	r3, [pc, #300]	@ (80059a0 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8005874:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005876:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 800587a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800587e:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8005882:	4a47      	ldr	r2, [pc, #284]	@ (80059a0 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8005884:	430b      	orrs	r3, r1
 8005886:	6593      	str	r3, [r2, #88]	@ 0x58
 8005888:	e003      	b.n	8005892 <HAL_RCCEx_PeriphCLKConfig+0xeca>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800588a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800588e:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8005892:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005896:	e9d3 2300 	ldrd	r2, r3, [r3]
 800589a:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 800589e:	673b      	str	r3, [r7, #112]	@ 0x70
 80058a0:	2300      	movs	r3, #0
 80058a2:	677b      	str	r3, [r7, #116]	@ 0x74
 80058a4:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 80058a8:	460b      	mov	r3, r1
 80058aa:	4313      	orrs	r3, r2
 80058ac:	d03b      	beq.n	8005926 <HAL_RCCEx_PeriphCLKConfig+0xf5e>
  {

    switch (PeriphClkInit->UsbClockSelection)
 80058ae:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80058b2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80058b6:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80058ba:	d01f      	beq.n	80058fc <HAL_RCCEx_PeriphCLKConfig+0xf34>
 80058bc:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80058c0:	d818      	bhi.n	80058f4 <HAL_RCCEx_PeriphCLKConfig+0xf2c>
 80058c2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80058c6:	d003      	beq.n	80058d0 <HAL_RCCEx_PeriphCLKConfig+0xf08>
 80058c8:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80058cc:	d007      	beq.n	80058de <HAL_RCCEx_PeriphCLKConfig+0xf16>
 80058ce:	e011      	b.n	80058f4 <HAL_RCCEx_PeriphCLKConfig+0xf2c>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80058d0:	4b33      	ldr	r3, [pc, #204]	@ (80059a0 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80058d2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80058d4:	4a32      	ldr	r2, [pc, #200]	@ (80059a0 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80058d6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80058da:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 80058dc:	e00f      	b.n	80058fe <HAL_RCCEx_PeriphCLKConfig+0xf36>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80058de:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80058e2:	3328      	adds	r3, #40	@ 0x28
 80058e4:	2101      	movs	r1, #1
 80058e6:	4618      	mov	r0, r3
 80058e8:	f000 fd7e 	bl	80063e8 <RCCEx_PLL3_Config>
 80058ec:	4603      	mov	r3, r0
 80058ee:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* USB clock source configuration done later after clock selection check */
        break;
 80058f2:	e004      	b.n	80058fe <HAL_RCCEx_PeriphCLKConfig+0xf36>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80058f4:	2301      	movs	r3, #1
 80058f6:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80058fa:	e000      	b.n	80058fe <HAL_RCCEx_PeriphCLKConfig+0xf36>
        break;
 80058fc:	bf00      	nop
    }

    if (ret == HAL_OK)
 80058fe:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005902:	2b00      	cmp	r3, #0
 8005904:	d10b      	bne.n	800591e <HAL_RCCEx_PeriphCLKConfig+0xf56>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8005906:	4b26      	ldr	r3, [pc, #152]	@ (80059a0 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8005908:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800590a:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 800590e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005912:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005916:	4a22      	ldr	r2, [pc, #136]	@ (80059a0 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8005918:	430b      	orrs	r3, r1
 800591a:	6553      	str	r3, [r2, #84]	@ 0x54
 800591c:	e003      	b.n	8005926 <HAL_RCCEx_PeriphCLKConfig+0xf5e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800591e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005922:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8005926:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800592a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800592e:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 8005932:	66bb      	str	r3, [r7, #104]	@ 0x68
 8005934:	2300      	movs	r3, #0
 8005936:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8005938:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 800593c:	460b      	mov	r3, r1
 800593e:	4313      	orrs	r3, r2
 8005940:	d034      	beq.n	80059ac <HAL_RCCEx_PeriphCLKConfig+0xfe4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 8005942:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005946:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005948:	2b00      	cmp	r3, #0
 800594a:	d003      	beq.n	8005954 <HAL_RCCEx_PeriphCLKConfig+0xf8c>
 800594c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005950:	d007      	beq.n	8005962 <HAL_RCCEx_PeriphCLKConfig+0xf9a>
 8005952:	e011      	b.n	8005978 <HAL_RCCEx_PeriphCLKConfig+0xfb0>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005954:	4b12      	ldr	r3, [pc, #72]	@ (80059a0 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8005956:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005958:	4a11      	ldr	r2, [pc, #68]	@ (80059a0 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800595a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800595e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8005960:	e00e      	b.n	8005980 <HAL_RCCEx_PeriphCLKConfig+0xfb8>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8005962:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005966:	3308      	adds	r3, #8
 8005968:	2102      	movs	r1, #2
 800596a:	4618      	mov	r0, r3
 800596c:	f000 fc8a 	bl	8006284 <RCCEx_PLL2_Config>
 8005970:	4603      	mov	r3, r0
 8005972:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8005976:	e003      	b.n	8005980 <HAL_RCCEx_PeriphCLKConfig+0xfb8>

      default:
        ret = HAL_ERROR;
 8005978:	2301      	movs	r3, #1
 800597a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800597e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005980:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005984:	2b00      	cmp	r3, #0
 8005986:	d10d      	bne.n	80059a4 <HAL_RCCEx_PeriphCLKConfig+0xfdc>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8005988:	4b05      	ldr	r3, [pc, #20]	@ (80059a0 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800598a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800598c:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8005990:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005994:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005996:	4a02      	ldr	r2, [pc, #8]	@ (80059a0 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8005998:	430b      	orrs	r3, r1
 800599a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800599c:	e006      	b.n	80059ac <HAL_RCCEx_PeriphCLKConfig+0xfe4>
 800599e:	bf00      	nop
 80059a0:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80059a4:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80059a8:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80059ac:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80059b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80059b4:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 80059b8:	663b      	str	r3, [r7, #96]	@ 0x60
 80059ba:	2300      	movs	r3, #0
 80059bc:	667b      	str	r3, [r7, #100]	@ 0x64
 80059be:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 80059c2:	460b      	mov	r3, r1
 80059c4:	4313      	orrs	r3, r2
 80059c6:	d00c      	beq.n	80059e2 <HAL_RCCEx_PeriphCLKConfig+0x101a>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80059c8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80059cc:	3328      	adds	r3, #40	@ 0x28
 80059ce:	2102      	movs	r1, #2
 80059d0:	4618      	mov	r0, r3
 80059d2:	f000 fd09 	bl	80063e8 <RCCEx_PLL3_Config>
 80059d6:	4603      	mov	r3, r0
 80059d8:	2b00      	cmp	r3, #0
 80059da:	d002      	beq.n	80059e2 <HAL_RCCEx_PeriphCLKConfig+0x101a>
    {
      status = HAL_ERROR;
 80059dc:	2301      	movs	r3, #1
 80059de:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 80059e2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80059e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80059ea:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 80059ee:	65bb      	str	r3, [r7, #88]	@ 0x58
 80059f0:	2300      	movs	r3, #0
 80059f2:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80059f4:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 80059f8:	460b      	mov	r3, r1
 80059fa:	4313      	orrs	r3, r2
 80059fc:	d036      	beq.n	8005a6c <HAL_RCCEx_PeriphCLKConfig+0x10a4>
  {

    switch (PeriphClkInit->RngClockSelection)
 80059fe:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005a02:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8005a04:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005a08:	d018      	beq.n	8005a3c <HAL_RCCEx_PeriphCLKConfig+0x1074>
 8005a0a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005a0e:	d811      	bhi.n	8005a34 <HAL_RCCEx_PeriphCLKConfig+0x106c>
 8005a10:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005a14:	d014      	beq.n	8005a40 <HAL_RCCEx_PeriphCLKConfig+0x1078>
 8005a16:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005a1a:	d80b      	bhi.n	8005a34 <HAL_RCCEx_PeriphCLKConfig+0x106c>
 8005a1c:	2b00      	cmp	r3, #0
 8005a1e:	d011      	beq.n	8005a44 <HAL_RCCEx_PeriphCLKConfig+0x107c>
 8005a20:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005a24:	d106      	bne.n	8005a34 <HAL_RCCEx_PeriphCLKConfig+0x106c>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005a26:	4bb7      	ldr	r3, [pc, #732]	@ (8005d04 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8005a28:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005a2a:	4ab6      	ldr	r2, [pc, #728]	@ (8005d04 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8005a2c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005a30:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 8005a32:	e008      	b.n	8005a46 <HAL_RCCEx_PeriphCLKConfig+0x107e>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005a34:	2301      	movs	r3, #1
 8005a36:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8005a3a:	e004      	b.n	8005a46 <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 8005a3c:	bf00      	nop
 8005a3e:	e002      	b.n	8005a46 <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 8005a40:	bf00      	nop
 8005a42:	e000      	b.n	8005a46 <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 8005a44:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005a46:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005a4a:	2b00      	cmp	r3, #0
 8005a4c:	d10a      	bne.n	8005a64 <HAL_RCCEx_PeriphCLKConfig+0x109c>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8005a4e:	4bad      	ldr	r3, [pc, #692]	@ (8005d04 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8005a50:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005a52:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8005a56:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005a5a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8005a5c:	4aa9      	ldr	r2, [pc, #676]	@ (8005d04 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8005a5e:	430b      	orrs	r3, r1
 8005a60:	6553      	str	r3, [r2, #84]	@ 0x54
 8005a62:	e003      	b.n	8005a6c <HAL_RCCEx_PeriphCLKConfig+0x10a4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005a64:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005a68:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8005a6c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005a70:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a74:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 8005a78:	653b      	str	r3, [r7, #80]	@ 0x50
 8005a7a:	2300      	movs	r3, #0
 8005a7c:	657b      	str	r3, [r7, #84]	@ 0x54
 8005a7e:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 8005a82:	460b      	mov	r3, r1
 8005a84:	4313      	orrs	r3, r2
 8005a86:	d009      	beq.n	8005a9c <HAL_RCCEx_PeriphCLKConfig+0x10d4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8005a88:	4b9e      	ldr	r3, [pc, #632]	@ (8005d04 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8005a8a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005a8c:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8005a90:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005a94:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005a96:	4a9b      	ldr	r2, [pc, #620]	@ (8005d04 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8005a98:	430b      	orrs	r3, r1
 8005a9a:	6513      	str	r3, [r2, #80]	@ 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8005a9c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005aa0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005aa4:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 8005aa8:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005aaa:	2300      	movs	r3, #0
 8005aac:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005aae:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 8005ab2:	460b      	mov	r3, r1
 8005ab4:	4313      	orrs	r3, r2
 8005ab6:	d009      	beq.n	8005acc <HAL_RCCEx_PeriphCLKConfig+0x1104>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8005ab8:	4b92      	ldr	r3, [pc, #584]	@ (8005d04 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8005aba:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005abc:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 8005ac0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005ac4:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8005ac6:	4a8f      	ldr	r2, [pc, #572]	@ (8005d04 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8005ac8:	430b      	orrs	r3, r1
 8005aca:	6513      	str	r3, [r2, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8005acc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005ad0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ad4:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 8005ad8:	643b      	str	r3, [r7, #64]	@ 0x40
 8005ada:	2300      	movs	r3, #0
 8005adc:	647b      	str	r3, [r7, #68]	@ 0x44
 8005ade:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 8005ae2:	460b      	mov	r3, r1
 8005ae4:	4313      	orrs	r3, r2
 8005ae6:	d00e      	beq.n	8005b06 <HAL_RCCEx_PeriphCLKConfig+0x113e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8005ae8:	4b86      	ldr	r3, [pc, #536]	@ (8005d04 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8005aea:	691b      	ldr	r3, [r3, #16]
 8005aec:	4a85      	ldr	r2, [pc, #532]	@ (8005d04 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8005aee:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8005af2:	6113      	str	r3, [r2, #16]
 8005af4:	4b83      	ldr	r3, [pc, #524]	@ (8005d04 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8005af6:	6919      	ldr	r1, [r3, #16]
 8005af8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005afc:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8005b00:	4a80      	ldr	r2, [pc, #512]	@ (8005d04 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8005b02:	430b      	orrs	r3, r1
 8005b04:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8005b06:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005b0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b0e:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 8005b12:	63bb      	str	r3, [r7, #56]	@ 0x38
 8005b14:	2300      	movs	r3, #0
 8005b16:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005b18:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 8005b1c:	460b      	mov	r3, r1
 8005b1e:	4313      	orrs	r3, r2
 8005b20:	d009      	beq.n	8005b36 <HAL_RCCEx_PeriphCLKConfig+0x116e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8005b22:	4b78      	ldr	r3, [pc, #480]	@ (8005d04 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8005b24:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005b26:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8005b2a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005b2e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005b30:	4a74      	ldr	r2, [pc, #464]	@ (8005d04 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8005b32:	430b      	orrs	r3, r1
 8005b34:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8005b36:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005b3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b3e:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 8005b42:	633b      	str	r3, [r7, #48]	@ 0x30
 8005b44:	2300      	movs	r3, #0
 8005b46:	637b      	str	r3, [r7, #52]	@ 0x34
 8005b48:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 8005b4c:	460b      	mov	r3, r1
 8005b4e:	4313      	orrs	r3, r2
 8005b50:	d00a      	beq.n	8005b68 <HAL_RCCEx_PeriphCLKConfig+0x11a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8005b52:	4b6c      	ldr	r3, [pc, #432]	@ (8005d04 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8005b54:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005b56:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 8005b5a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005b5e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005b62:	4a68      	ldr	r2, [pc, #416]	@ (8005d04 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8005b64:	430b      	orrs	r3, r1
 8005b66:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 8005b68:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005b6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b70:	2100      	movs	r1, #0
 8005b72:	62b9      	str	r1, [r7, #40]	@ 0x28
 8005b74:	f003 0301 	and.w	r3, r3, #1
 8005b78:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005b7a:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 8005b7e:	460b      	mov	r3, r1
 8005b80:	4313      	orrs	r3, r2
 8005b82:	d011      	beq.n	8005ba8 <HAL_RCCEx_PeriphCLKConfig+0x11e0>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005b84:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005b88:	3308      	adds	r3, #8
 8005b8a:	2100      	movs	r1, #0
 8005b8c:	4618      	mov	r0, r3
 8005b8e:	f000 fb79 	bl	8006284 <RCCEx_PLL2_Config>
 8005b92:	4603      	mov	r3, r0
 8005b94:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 8005b98:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005b9c:	2b00      	cmp	r3, #0
 8005b9e:	d003      	beq.n	8005ba8 <HAL_RCCEx_PeriphCLKConfig+0x11e0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005ba0:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005ba4:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 8005ba8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005bac:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005bb0:	2100      	movs	r1, #0
 8005bb2:	6239      	str	r1, [r7, #32]
 8005bb4:	f003 0302 	and.w	r3, r3, #2
 8005bb8:	627b      	str	r3, [r7, #36]	@ 0x24
 8005bba:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8005bbe:	460b      	mov	r3, r1
 8005bc0:	4313      	orrs	r3, r2
 8005bc2:	d011      	beq.n	8005be8 <HAL_RCCEx_PeriphCLKConfig+0x1220>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8005bc4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005bc8:	3308      	adds	r3, #8
 8005bca:	2101      	movs	r1, #1
 8005bcc:	4618      	mov	r0, r3
 8005bce:	f000 fb59 	bl	8006284 <RCCEx_PLL2_Config>
 8005bd2:	4603      	mov	r3, r0
 8005bd4:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 8005bd8:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005bdc:	2b00      	cmp	r3, #0
 8005bde:	d003      	beq.n	8005be8 <HAL_RCCEx_PeriphCLKConfig+0x1220>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005be0:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005be4:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 8005be8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005bec:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005bf0:	2100      	movs	r1, #0
 8005bf2:	61b9      	str	r1, [r7, #24]
 8005bf4:	f003 0304 	and.w	r3, r3, #4
 8005bf8:	61fb      	str	r3, [r7, #28]
 8005bfa:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8005bfe:	460b      	mov	r3, r1
 8005c00:	4313      	orrs	r3, r2
 8005c02:	d011      	beq.n	8005c28 <HAL_RCCEx_PeriphCLKConfig+0x1260>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8005c04:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005c08:	3308      	adds	r3, #8
 8005c0a:	2102      	movs	r1, #2
 8005c0c:	4618      	mov	r0, r3
 8005c0e:	f000 fb39 	bl	8006284 <RCCEx_PLL2_Config>
 8005c12:	4603      	mov	r3, r0
 8005c14:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 8005c18:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005c1c:	2b00      	cmp	r3, #0
 8005c1e:	d003      	beq.n	8005c28 <HAL_RCCEx_PeriphCLKConfig+0x1260>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005c20:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005c24:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 8005c28:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005c2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c30:	2100      	movs	r1, #0
 8005c32:	6139      	str	r1, [r7, #16]
 8005c34:	f003 0308 	and.w	r3, r3, #8
 8005c38:	617b      	str	r3, [r7, #20]
 8005c3a:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8005c3e:	460b      	mov	r3, r1
 8005c40:	4313      	orrs	r3, r2
 8005c42:	d011      	beq.n	8005c68 <HAL_RCCEx_PeriphCLKConfig+0x12a0>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8005c44:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005c48:	3328      	adds	r3, #40	@ 0x28
 8005c4a:	2100      	movs	r1, #0
 8005c4c:	4618      	mov	r0, r3
 8005c4e:	f000 fbcb 	bl	80063e8 <RCCEx_PLL3_Config>
 8005c52:	4603      	mov	r3, r0
 8005c54:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
  
    if (ret == HAL_OK)
 8005c58:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005c5c:	2b00      	cmp	r3, #0
 8005c5e:	d003      	beq.n	8005c68 <HAL_RCCEx_PeriphCLKConfig+0x12a0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005c60:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005c64:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 8005c68:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005c6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c70:	2100      	movs	r1, #0
 8005c72:	60b9      	str	r1, [r7, #8]
 8005c74:	f003 0310 	and.w	r3, r3, #16
 8005c78:	60fb      	str	r3, [r7, #12]
 8005c7a:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8005c7e:	460b      	mov	r3, r1
 8005c80:	4313      	orrs	r3, r2
 8005c82:	d011      	beq.n	8005ca8 <HAL_RCCEx_PeriphCLKConfig+0x12e0>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8005c84:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005c88:	3328      	adds	r3, #40	@ 0x28
 8005c8a:	2101      	movs	r1, #1
 8005c8c:	4618      	mov	r0, r3
 8005c8e:	f000 fbab 	bl	80063e8 <RCCEx_PLL3_Config>
 8005c92:	4603      	mov	r3, r0
 8005c94:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 8005c98:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005c9c:	2b00      	cmp	r3, #0
 8005c9e:	d003      	beq.n	8005ca8 <HAL_RCCEx_PeriphCLKConfig+0x12e0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005ca0:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005ca4:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 8005ca8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005cac:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005cb0:	2100      	movs	r1, #0
 8005cb2:	6039      	str	r1, [r7, #0]
 8005cb4:	f003 0320 	and.w	r3, r3, #32
 8005cb8:	607b      	str	r3, [r7, #4]
 8005cba:	e9d7 1200 	ldrd	r1, r2, [r7]
 8005cbe:	460b      	mov	r3, r1
 8005cc0:	4313      	orrs	r3, r2
 8005cc2:	d011      	beq.n	8005ce8 <HAL_RCCEx_PeriphCLKConfig+0x1320>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8005cc4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005cc8:	3328      	adds	r3, #40	@ 0x28
 8005cca:	2102      	movs	r1, #2
 8005ccc:	4618      	mov	r0, r3
 8005cce:	f000 fb8b 	bl	80063e8 <RCCEx_PLL3_Config>
 8005cd2:	4603      	mov	r3, r0
 8005cd4:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 8005cd8:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005cdc:	2b00      	cmp	r3, #0
 8005cde:	d003      	beq.n	8005ce8 <HAL_RCCEx_PeriphCLKConfig+0x1320>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005ce0:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005ce4:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    } 
  }

  if (status == HAL_OK)
 8005ce8:	f897 3116 	ldrb.w	r3, [r7, #278]	@ 0x116
 8005cec:	2b00      	cmp	r3, #0
 8005cee:	d101      	bne.n	8005cf4 <HAL_RCCEx_PeriphCLKConfig+0x132c>
  {
    return HAL_OK;
 8005cf0:	2300      	movs	r3, #0
 8005cf2:	e000      	b.n	8005cf6 <HAL_RCCEx_PeriphCLKConfig+0x132e>
  }
  return HAL_ERROR;
 8005cf4:	2301      	movs	r3, #1
}
 8005cf6:	4618      	mov	r0, r3
 8005cf8:	f507 778c 	add.w	r7, r7, #280	@ 0x118
 8005cfc:	46bd      	mov	sp, r7
 8005cfe:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005d02:	bf00      	nop
 8005d04:	58024400 	.word	0x58024400

08005d08 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8005d08:	b580      	push	{r7, lr}
 8005d0a:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8005d0c:	f7fe fdbe 	bl	800488c <HAL_RCC_GetHCLKFreq>
 8005d10:	4602      	mov	r2, r0
 8005d12:	4b06      	ldr	r3, [pc, #24]	@ (8005d2c <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8005d14:	6a1b      	ldr	r3, [r3, #32]
 8005d16:	091b      	lsrs	r3, r3, #4
 8005d18:	f003 0307 	and.w	r3, r3, #7
 8005d1c:	4904      	ldr	r1, [pc, #16]	@ (8005d30 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8005d1e:	5ccb      	ldrb	r3, [r1, r3]
 8005d20:	f003 031f 	and.w	r3, r3, #31
 8005d24:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8005d28:	4618      	mov	r0, r3
 8005d2a:	bd80      	pop	{r7, pc}
 8005d2c:	58024400 	.word	0x58024400
 8005d30:	0800bbc8 	.word	0x0800bbc8

08005d34 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 8005d34:	b480      	push	{r7}
 8005d36:	b089      	sub	sp, #36	@ 0x24
 8005d38:	af00      	add	r7, sp, #0
 8005d3a:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8005d3c:	4ba1      	ldr	r3, [pc, #644]	@ (8005fc4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005d3e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005d40:	f003 0303 	and.w	r3, r3, #3
 8005d44:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 8005d46:	4b9f      	ldr	r3, [pc, #636]	@ (8005fc4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005d48:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005d4a:	0b1b      	lsrs	r3, r3, #12
 8005d4c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8005d50:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8005d52:	4b9c      	ldr	r3, [pc, #624]	@ (8005fc4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005d54:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005d56:	091b      	lsrs	r3, r3, #4
 8005d58:	f003 0301 	and.w	r3, r3, #1
 8005d5c:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 8005d5e:	4b99      	ldr	r3, [pc, #612]	@ (8005fc4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005d60:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005d62:	08db      	lsrs	r3, r3, #3
 8005d64:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005d68:	693a      	ldr	r2, [r7, #16]
 8005d6a:	fb02 f303 	mul.w	r3, r2, r3
 8005d6e:	ee07 3a90 	vmov	s15, r3
 8005d72:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005d76:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8005d7a:	697b      	ldr	r3, [r7, #20]
 8005d7c:	2b00      	cmp	r3, #0
 8005d7e:	f000 8111 	beq.w	8005fa4 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8005d82:	69bb      	ldr	r3, [r7, #24]
 8005d84:	2b02      	cmp	r3, #2
 8005d86:	f000 8083 	beq.w	8005e90 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8005d8a:	69bb      	ldr	r3, [r7, #24]
 8005d8c:	2b02      	cmp	r3, #2
 8005d8e:	f200 80a1 	bhi.w	8005ed4 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8005d92:	69bb      	ldr	r3, [r7, #24]
 8005d94:	2b00      	cmp	r3, #0
 8005d96:	d003      	beq.n	8005da0 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8005d98:	69bb      	ldr	r3, [r7, #24]
 8005d9a:	2b01      	cmp	r3, #1
 8005d9c:	d056      	beq.n	8005e4c <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8005d9e:	e099      	b.n	8005ed4 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005da0:	4b88      	ldr	r3, [pc, #544]	@ (8005fc4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005da2:	681b      	ldr	r3, [r3, #0]
 8005da4:	f003 0320 	and.w	r3, r3, #32
 8005da8:	2b00      	cmp	r3, #0
 8005daa:	d02d      	beq.n	8005e08 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8005dac:	4b85      	ldr	r3, [pc, #532]	@ (8005fc4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005dae:	681b      	ldr	r3, [r3, #0]
 8005db0:	08db      	lsrs	r3, r3, #3
 8005db2:	f003 0303 	and.w	r3, r3, #3
 8005db6:	4a84      	ldr	r2, [pc, #528]	@ (8005fc8 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8005db8:	fa22 f303 	lsr.w	r3, r2, r3
 8005dbc:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8005dbe:	68bb      	ldr	r3, [r7, #8]
 8005dc0:	ee07 3a90 	vmov	s15, r3
 8005dc4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005dc8:	697b      	ldr	r3, [r7, #20]
 8005dca:	ee07 3a90 	vmov	s15, r3
 8005dce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005dd2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005dd6:	4b7b      	ldr	r3, [pc, #492]	@ (8005fc4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005dd8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005dda:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005dde:	ee07 3a90 	vmov	s15, r3
 8005de2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005de6:	ed97 6a03 	vldr	s12, [r7, #12]
 8005dea:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8005fcc <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8005dee:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005df2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005df6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005dfa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005dfe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005e02:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8005e06:	e087      	b.n	8005f18 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8005e08:	697b      	ldr	r3, [r7, #20]
 8005e0a:	ee07 3a90 	vmov	s15, r3
 8005e0e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005e12:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8005fd0 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8005e16:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005e1a:	4b6a      	ldr	r3, [pc, #424]	@ (8005fc4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005e1c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005e1e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005e22:	ee07 3a90 	vmov	s15, r3
 8005e26:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005e2a:	ed97 6a03 	vldr	s12, [r7, #12]
 8005e2e:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8005fcc <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8005e32:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005e36:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005e3a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005e3e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005e42:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005e46:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005e4a:	e065      	b.n	8005f18 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8005e4c:	697b      	ldr	r3, [r7, #20]
 8005e4e:	ee07 3a90 	vmov	s15, r3
 8005e52:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005e56:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8005fd4 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8005e5a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005e5e:	4b59      	ldr	r3, [pc, #356]	@ (8005fc4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005e60:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005e62:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005e66:	ee07 3a90 	vmov	s15, r3
 8005e6a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005e6e:	ed97 6a03 	vldr	s12, [r7, #12]
 8005e72:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8005fcc <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8005e76:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005e7a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005e7e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005e82:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005e86:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005e8a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005e8e:	e043      	b.n	8005f18 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8005e90:	697b      	ldr	r3, [r7, #20]
 8005e92:	ee07 3a90 	vmov	s15, r3
 8005e96:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005e9a:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8005fd8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8005e9e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005ea2:	4b48      	ldr	r3, [pc, #288]	@ (8005fc4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005ea4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005ea6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005eaa:	ee07 3a90 	vmov	s15, r3
 8005eae:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005eb2:	ed97 6a03 	vldr	s12, [r7, #12]
 8005eb6:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8005fcc <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8005eba:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005ebe:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005ec2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005ec6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005eca:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005ece:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005ed2:	e021      	b.n	8005f18 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8005ed4:	697b      	ldr	r3, [r7, #20]
 8005ed6:	ee07 3a90 	vmov	s15, r3
 8005eda:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005ede:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8005fd4 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8005ee2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005ee6:	4b37      	ldr	r3, [pc, #220]	@ (8005fc4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005ee8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005eea:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005eee:	ee07 3a90 	vmov	s15, r3
 8005ef2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005ef6:	ed97 6a03 	vldr	s12, [r7, #12]
 8005efa:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8005fcc <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8005efe:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005f02:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005f06:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005f0a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005f0e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005f12:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005f16:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 8005f18:	4b2a      	ldr	r3, [pc, #168]	@ (8005fc4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005f1a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005f1c:	0a5b      	lsrs	r3, r3, #9
 8005f1e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005f22:	ee07 3a90 	vmov	s15, r3
 8005f26:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005f2a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8005f2e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005f32:	edd7 6a07 	vldr	s13, [r7, #28]
 8005f36:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005f3a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005f3e:	ee17 2a90 	vmov	r2, s15
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 8005f46:	4b1f      	ldr	r3, [pc, #124]	@ (8005fc4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005f48:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005f4a:	0c1b      	lsrs	r3, r3, #16
 8005f4c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005f50:	ee07 3a90 	vmov	s15, r3
 8005f54:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005f58:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8005f5c:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005f60:	edd7 6a07 	vldr	s13, [r7, #28]
 8005f64:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005f68:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005f6c:	ee17 2a90 	vmov	r2, s15
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 8005f74:	4b13      	ldr	r3, [pc, #76]	@ (8005fc4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005f76:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005f78:	0e1b      	lsrs	r3, r3, #24
 8005f7a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005f7e:	ee07 3a90 	vmov	s15, r3
 8005f82:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005f86:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8005f8a:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005f8e:	edd7 6a07 	vldr	s13, [r7, #28]
 8005f92:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005f96:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005f9a:	ee17 2a90 	vmov	r2, s15
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8005fa2:	e008      	b.n	8005fb6 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	2200      	movs	r2, #0
 8005fa8:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	2200      	movs	r2, #0
 8005fae:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	2200      	movs	r2, #0
 8005fb4:	609a      	str	r2, [r3, #8]
}
 8005fb6:	bf00      	nop
 8005fb8:	3724      	adds	r7, #36	@ 0x24
 8005fba:	46bd      	mov	sp, r7
 8005fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fc0:	4770      	bx	lr
 8005fc2:	bf00      	nop
 8005fc4:	58024400 	.word	0x58024400
 8005fc8:	03d09000 	.word	0x03d09000
 8005fcc:	46000000 	.word	0x46000000
 8005fd0:	4c742400 	.word	0x4c742400
 8005fd4:	4a742400 	.word	0x4a742400
 8005fd8:	4c371b00 	.word	0x4c371b00

08005fdc <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 8005fdc:	b480      	push	{r7}
 8005fde:	b089      	sub	sp, #36	@ 0x24
 8005fe0:	af00      	add	r7, sp, #0
 8005fe2:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8005fe4:	4ba1      	ldr	r3, [pc, #644]	@ (800626c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005fe6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005fe8:	f003 0303 	and.w	r3, r3, #3
 8005fec:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 8005fee:	4b9f      	ldr	r3, [pc, #636]	@ (800626c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005ff0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005ff2:	0d1b      	lsrs	r3, r3, #20
 8005ff4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8005ff8:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8005ffa:	4b9c      	ldr	r3, [pc, #624]	@ (800626c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005ffc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005ffe:	0a1b      	lsrs	r3, r3, #8
 8006000:	f003 0301 	and.w	r3, r3, #1
 8006004:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 8006006:	4b99      	ldr	r3, [pc, #612]	@ (800626c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006008:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800600a:	08db      	lsrs	r3, r3, #3
 800600c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8006010:	693a      	ldr	r2, [r7, #16]
 8006012:	fb02 f303 	mul.w	r3, r2, r3
 8006016:	ee07 3a90 	vmov	s15, r3
 800601a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800601e:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8006022:	697b      	ldr	r3, [r7, #20]
 8006024:	2b00      	cmp	r3, #0
 8006026:	f000 8111 	beq.w	800624c <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 800602a:	69bb      	ldr	r3, [r7, #24]
 800602c:	2b02      	cmp	r3, #2
 800602e:	f000 8083 	beq.w	8006138 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8006032:	69bb      	ldr	r3, [r7, #24]
 8006034:	2b02      	cmp	r3, #2
 8006036:	f200 80a1 	bhi.w	800617c <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 800603a:	69bb      	ldr	r3, [r7, #24]
 800603c:	2b00      	cmp	r3, #0
 800603e:	d003      	beq.n	8006048 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8006040:	69bb      	ldr	r3, [r7, #24]
 8006042:	2b01      	cmp	r3, #1
 8006044:	d056      	beq.n	80060f4 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8006046:	e099      	b.n	800617c <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006048:	4b88      	ldr	r3, [pc, #544]	@ (800626c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800604a:	681b      	ldr	r3, [r3, #0]
 800604c:	f003 0320 	and.w	r3, r3, #32
 8006050:	2b00      	cmp	r3, #0
 8006052:	d02d      	beq.n	80060b0 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8006054:	4b85      	ldr	r3, [pc, #532]	@ (800626c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006056:	681b      	ldr	r3, [r3, #0]
 8006058:	08db      	lsrs	r3, r3, #3
 800605a:	f003 0303 	and.w	r3, r3, #3
 800605e:	4a84      	ldr	r2, [pc, #528]	@ (8006270 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8006060:	fa22 f303 	lsr.w	r3, r2, r3
 8006064:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8006066:	68bb      	ldr	r3, [r7, #8]
 8006068:	ee07 3a90 	vmov	s15, r3
 800606c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006070:	697b      	ldr	r3, [r7, #20]
 8006072:	ee07 3a90 	vmov	s15, r3
 8006076:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800607a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800607e:	4b7b      	ldr	r3, [pc, #492]	@ (800626c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006080:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006082:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006086:	ee07 3a90 	vmov	s15, r3
 800608a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800608e:	ed97 6a03 	vldr	s12, [r7, #12]
 8006092:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8006274 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8006096:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800609a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800609e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80060a2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80060a6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80060aa:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 80060ae:	e087      	b.n	80061c0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80060b0:	697b      	ldr	r3, [r7, #20]
 80060b2:	ee07 3a90 	vmov	s15, r3
 80060b6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80060ba:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8006278 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 80060be:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80060c2:	4b6a      	ldr	r3, [pc, #424]	@ (800626c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80060c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80060c6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80060ca:	ee07 3a90 	vmov	s15, r3
 80060ce:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80060d2:	ed97 6a03 	vldr	s12, [r7, #12]
 80060d6:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8006274 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80060da:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80060de:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80060e2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80060e6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80060ea:	ee67 7a27 	vmul.f32	s15, s14, s15
 80060ee:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80060f2:	e065      	b.n	80061c0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80060f4:	697b      	ldr	r3, [r7, #20]
 80060f6:	ee07 3a90 	vmov	s15, r3
 80060fa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80060fe:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 800627c <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8006102:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006106:	4b59      	ldr	r3, [pc, #356]	@ (800626c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006108:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800610a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800610e:	ee07 3a90 	vmov	s15, r3
 8006112:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006116:	ed97 6a03 	vldr	s12, [r7, #12]
 800611a:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8006274 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800611e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006122:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006126:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800612a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800612e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006132:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006136:	e043      	b.n	80061c0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8006138:	697b      	ldr	r3, [r7, #20]
 800613a:	ee07 3a90 	vmov	s15, r3
 800613e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006142:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8006280 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8006146:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800614a:	4b48      	ldr	r3, [pc, #288]	@ (800626c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800614c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800614e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006152:	ee07 3a90 	vmov	s15, r3
 8006156:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800615a:	ed97 6a03 	vldr	s12, [r7, #12]
 800615e:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8006274 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8006162:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006166:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800616a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800616e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006172:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006176:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800617a:	e021      	b.n	80061c0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800617c:	697b      	ldr	r3, [r7, #20]
 800617e:	ee07 3a90 	vmov	s15, r3
 8006182:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006186:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 800627c <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800618a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800618e:	4b37      	ldr	r3, [pc, #220]	@ (800626c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006190:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006192:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006196:	ee07 3a90 	vmov	s15, r3
 800619a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800619e:	ed97 6a03 	vldr	s12, [r7, #12]
 80061a2:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8006274 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80061a6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80061aa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80061ae:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80061b2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80061b6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80061ba:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80061be:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 80061c0:	4b2a      	ldr	r3, [pc, #168]	@ (800626c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80061c2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80061c4:	0a5b      	lsrs	r3, r3, #9
 80061c6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80061ca:	ee07 3a90 	vmov	s15, r3
 80061ce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80061d2:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80061d6:	ee37 7a87 	vadd.f32	s14, s15, s14
 80061da:	edd7 6a07 	vldr	s13, [r7, #28]
 80061de:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80061e2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80061e6:	ee17 2a90 	vmov	r2, s15
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 80061ee:	4b1f      	ldr	r3, [pc, #124]	@ (800626c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80061f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80061f2:	0c1b      	lsrs	r3, r3, #16
 80061f4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80061f8:	ee07 3a90 	vmov	s15, r3
 80061fc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006200:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8006204:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006208:	edd7 6a07 	vldr	s13, [r7, #28]
 800620c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006210:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006214:	ee17 2a90 	vmov	r2, s15
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 800621c:	4b13      	ldr	r3, [pc, #76]	@ (800626c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800621e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006220:	0e1b      	lsrs	r3, r3, #24
 8006222:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006226:	ee07 3a90 	vmov	s15, r3
 800622a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800622e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8006232:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006236:	edd7 6a07 	vldr	s13, [r7, #28]
 800623a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800623e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006242:	ee17 2a90 	vmov	r2, s15
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800624a:	e008      	b.n	800625e <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	2200      	movs	r2, #0
 8006250:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	2200      	movs	r2, #0
 8006256:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	2200      	movs	r2, #0
 800625c:	609a      	str	r2, [r3, #8]
}
 800625e:	bf00      	nop
 8006260:	3724      	adds	r7, #36	@ 0x24
 8006262:	46bd      	mov	sp, r7
 8006264:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006268:	4770      	bx	lr
 800626a:	bf00      	nop
 800626c:	58024400 	.word	0x58024400
 8006270:	03d09000 	.word	0x03d09000
 8006274:	46000000 	.word	0x46000000
 8006278:	4c742400 	.word	0x4c742400
 800627c:	4a742400 	.word	0x4a742400
 8006280:	4c371b00 	.word	0x4c371b00

08006284 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8006284:	b580      	push	{r7, lr}
 8006286:	b084      	sub	sp, #16
 8006288:	af00      	add	r7, sp, #0
 800628a:	6078      	str	r0, [r7, #4]
 800628c:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800628e:	2300      	movs	r3, #0
 8006290:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8006292:	4b53      	ldr	r3, [pc, #332]	@ (80063e0 <RCCEx_PLL2_Config+0x15c>)
 8006294:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006296:	f003 0303 	and.w	r3, r3, #3
 800629a:	2b03      	cmp	r3, #3
 800629c:	d101      	bne.n	80062a2 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800629e:	2301      	movs	r3, #1
 80062a0:	e099      	b.n	80063d6 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 80062a2:	4b4f      	ldr	r3, [pc, #316]	@ (80063e0 <RCCEx_PLL2_Config+0x15c>)
 80062a4:	681b      	ldr	r3, [r3, #0]
 80062a6:	4a4e      	ldr	r2, [pc, #312]	@ (80063e0 <RCCEx_PLL2_Config+0x15c>)
 80062a8:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80062ac:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80062ae:	f7fc f9b7 	bl	8002620 <HAL_GetTick>
 80062b2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80062b4:	e008      	b.n	80062c8 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 80062b6:	f7fc f9b3 	bl	8002620 <HAL_GetTick>
 80062ba:	4602      	mov	r2, r0
 80062bc:	68bb      	ldr	r3, [r7, #8]
 80062be:	1ad3      	subs	r3, r2, r3
 80062c0:	2b02      	cmp	r3, #2
 80062c2:	d901      	bls.n	80062c8 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 80062c4:	2303      	movs	r3, #3
 80062c6:	e086      	b.n	80063d6 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80062c8:	4b45      	ldr	r3, [pc, #276]	@ (80063e0 <RCCEx_PLL2_Config+0x15c>)
 80062ca:	681b      	ldr	r3, [r3, #0]
 80062cc:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80062d0:	2b00      	cmp	r3, #0
 80062d2:	d1f0      	bne.n	80062b6 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 80062d4:	4b42      	ldr	r3, [pc, #264]	@ (80063e0 <RCCEx_PLL2_Config+0x15c>)
 80062d6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80062d8:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	681b      	ldr	r3, [r3, #0]
 80062e0:	031b      	lsls	r3, r3, #12
 80062e2:	493f      	ldr	r1, [pc, #252]	@ (80063e0 <RCCEx_PLL2_Config+0x15c>)
 80062e4:	4313      	orrs	r3, r2
 80062e6:	628b      	str	r3, [r1, #40]	@ 0x28
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	685b      	ldr	r3, [r3, #4]
 80062ec:	3b01      	subs	r3, #1
 80062ee:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	689b      	ldr	r3, [r3, #8]
 80062f6:	3b01      	subs	r3, #1
 80062f8:	025b      	lsls	r3, r3, #9
 80062fa:	b29b      	uxth	r3, r3
 80062fc:	431a      	orrs	r2, r3
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	68db      	ldr	r3, [r3, #12]
 8006302:	3b01      	subs	r3, #1
 8006304:	041b      	lsls	r3, r3, #16
 8006306:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800630a:	431a      	orrs	r2, r3
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	691b      	ldr	r3, [r3, #16]
 8006310:	3b01      	subs	r3, #1
 8006312:	061b      	lsls	r3, r3, #24
 8006314:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8006318:	4931      	ldr	r1, [pc, #196]	@ (80063e0 <RCCEx_PLL2_Config+0x15c>)
 800631a:	4313      	orrs	r3, r2
 800631c:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800631e:	4b30      	ldr	r3, [pc, #192]	@ (80063e0 <RCCEx_PLL2_Config+0x15c>)
 8006320:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006322:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	695b      	ldr	r3, [r3, #20]
 800632a:	492d      	ldr	r1, [pc, #180]	@ (80063e0 <RCCEx_PLL2_Config+0x15c>)
 800632c:	4313      	orrs	r3, r2
 800632e:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8006330:	4b2b      	ldr	r3, [pc, #172]	@ (80063e0 <RCCEx_PLL2_Config+0x15c>)
 8006332:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006334:	f023 0220 	bic.w	r2, r3, #32
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	699b      	ldr	r3, [r3, #24]
 800633c:	4928      	ldr	r1, [pc, #160]	@ (80063e0 <RCCEx_PLL2_Config+0x15c>)
 800633e:	4313      	orrs	r3, r2
 8006340:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8006342:	4b27      	ldr	r3, [pc, #156]	@ (80063e0 <RCCEx_PLL2_Config+0x15c>)
 8006344:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006346:	4a26      	ldr	r2, [pc, #152]	@ (80063e0 <RCCEx_PLL2_Config+0x15c>)
 8006348:	f023 0310 	bic.w	r3, r3, #16
 800634c:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800634e:	4b24      	ldr	r3, [pc, #144]	@ (80063e0 <RCCEx_PLL2_Config+0x15c>)
 8006350:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8006352:	4b24      	ldr	r3, [pc, #144]	@ (80063e4 <RCCEx_PLL2_Config+0x160>)
 8006354:	4013      	ands	r3, r2
 8006356:	687a      	ldr	r2, [r7, #4]
 8006358:	69d2      	ldr	r2, [r2, #28]
 800635a:	00d2      	lsls	r2, r2, #3
 800635c:	4920      	ldr	r1, [pc, #128]	@ (80063e0 <RCCEx_PLL2_Config+0x15c>)
 800635e:	4313      	orrs	r3, r2
 8006360:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8006362:	4b1f      	ldr	r3, [pc, #124]	@ (80063e0 <RCCEx_PLL2_Config+0x15c>)
 8006364:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006366:	4a1e      	ldr	r2, [pc, #120]	@ (80063e0 <RCCEx_PLL2_Config+0x15c>)
 8006368:	f043 0310 	orr.w	r3, r3, #16
 800636c:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800636e:	683b      	ldr	r3, [r7, #0]
 8006370:	2b00      	cmp	r3, #0
 8006372:	d106      	bne.n	8006382 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8006374:	4b1a      	ldr	r3, [pc, #104]	@ (80063e0 <RCCEx_PLL2_Config+0x15c>)
 8006376:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006378:	4a19      	ldr	r2, [pc, #100]	@ (80063e0 <RCCEx_PLL2_Config+0x15c>)
 800637a:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800637e:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8006380:	e00f      	b.n	80063a2 <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8006382:	683b      	ldr	r3, [r7, #0]
 8006384:	2b01      	cmp	r3, #1
 8006386:	d106      	bne.n	8006396 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8006388:	4b15      	ldr	r3, [pc, #84]	@ (80063e0 <RCCEx_PLL2_Config+0x15c>)
 800638a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800638c:	4a14      	ldr	r2, [pc, #80]	@ (80063e0 <RCCEx_PLL2_Config+0x15c>)
 800638e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8006392:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8006394:	e005      	b.n	80063a2 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8006396:	4b12      	ldr	r3, [pc, #72]	@ (80063e0 <RCCEx_PLL2_Config+0x15c>)
 8006398:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800639a:	4a11      	ldr	r2, [pc, #68]	@ (80063e0 <RCCEx_PLL2_Config+0x15c>)
 800639c:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80063a0:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 80063a2:	4b0f      	ldr	r3, [pc, #60]	@ (80063e0 <RCCEx_PLL2_Config+0x15c>)
 80063a4:	681b      	ldr	r3, [r3, #0]
 80063a6:	4a0e      	ldr	r2, [pc, #56]	@ (80063e0 <RCCEx_PLL2_Config+0x15c>)
 80063a8:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80063ac:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80063ae:	f7fc f937 	bl	8002620 <HAL_GetTick>
 80063b2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80063b4:	e008      	b.n	80063c8 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 80063b6:	f7fc f933 	bl	8002620 <HAL_GetTick>
 80063ba:	4602      	mov	r2, r0
 80063bc:	68bb      	ldr	r3, [r7, #8]
 80063be:	1ad3      	subs	r3, r2, r3
 80063c0:	2b02      	cmp	r3, #2
 80063c2:	d901      	bls.n	80063c8 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 80063c4:	2303      	movs	r3, #3
 80063c6:	e006      	b.n	80063d6 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80063c8:	4b05      	ldr	r3, [pc, #20]	@ (80063e0 <RCCEx_PLL2_Config+0x15c>)
 80063ca:	681b      	ldr	r3, [r3, #0]
 80063cc:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80063d0:	2b00      	cmp	r3, #0
 80063d2:	d0f0      	beq.n	80063b6 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 80063d4:	7bfb      	ldrb	r3, [r7, #15]
}
 80063d6:	4618      	mov	r0, r3
 80063d8:	3710      	adds	r7, #16
 80063da:	46bd      	mov	sp, r7
 80063dc:	bd80      	pop	{r7, pc}
 80063de:	bf00      	nop
 80063e0:	58024400 	.word	0x58024400
 80063e4:	ffff0007 	.word	0xffff0007

080063e8 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 80063e8:	b580      	push	{r7, lr}
 80063ea:	b084      	sub	sp, #16
 80063ec:	af00      	add	r7, sp, #0
 80063ee:	6078      	str	r0, [r7, #4]
 80063f0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80063f2:	2300      	movs	r3, #0
 80063f4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80063f6:	4b53      	ldr	r3, [pc, #332]	@ (8006544 <RCCEx_PLL3_Config+0x15c>)
 80063f8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80063fa:	f003 0303 	and.w	r3, r3, #3
 80063fe:	2b03      	cmp	r3, #3
 8006400:	d101      	bne.n	8006406 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8006402:	2301      	movs	r3, #1
 8006404:	e099      	b.n	800653a <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8006406:	4b4f      	ldr	r3, [pc, #316]	@ (8006544 <RCCEx_PLL3_Config+0x15c>)
 8006408:	681b      	ldr	r3, [r3, #0]
 800640a:	4a4e      	ldr	r2, [pc, #312]	@ (8006544 <RCCEx_PLL3_Config+0x15c>)
 800640c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8006410:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006412:	f7fc f905 	bl	8002620 <HAL_GetTick>
 8006416:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8006418:	e008      	b.n	800642c <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800641a:	f7fc f901 	bl	8002620 <HAL_GetTick>
 800641e:	4602      	mov	r2, r0
 8006420:	68bb      	ldr	r3, [r7, #8]
 8006422:	1ad3      	subs	r3, r2, r3
 8006424:	2b02      	cmp	r3, #2
 8006426:	d901      	bls.n	800642c <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8006428:	2303      	movs	r3, #3
 800642a:	e086      	b.n	800653a <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800642c:	4b45      	ldr	r3, [pc, #276]	@ (8006544 <RCCEx_PLL3_Config+0x15c>)
 800642e:	681b      	ldr	r3, [r3, #0]
 8006430:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8006434:	2b00      	cmp	r3, #0
 8006436:	d1f0      	bne.n	800641a <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8006438:	4b42      	ldr	r3, [pc, #264]	@ (8006544 <RCCEx_PLL3_Config+0x15c>)
 800643a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800643c:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	681b      	ldr	r3, [r3, #0]
 8006444:	051b      	lsls	r3, r3, #20
 8006446:	493f      	ldr	r1, [pc, #252]	@ (8006544 <RCCEx_PLL3_Config+0x15c>)
 8006448:	4313      	orrs	r3, r2
 800644a:	628b      	str	r3, [r1, #40]	@ 0x28
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	685b      	ldr	r3, [r3, #4]
 8006450:	3b01      	subs	r3, #1
 8006452:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	689b      	ldr	r3, [r3, #8]
 800645a:	3b01      	subs	r3, #1
 800645c:	025b      	lsls	r3, r3, #9
 800645e:	b29b      	uxth	r3, r3
 8006460:	431a      	orrs	r2, r3
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	68db      	ldr	r3, [r3, #12]
 8006466:	3b01      	subs	r3, #1
 8006468:	041b      	lsls	r3, r3, #16
 800646a:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800646e:	431a      	orrs	r2, r3
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	691b      	ldr	r3, [r3, #16]
 8006474:	3b01      	subs	r3, #1
 8006476:	061b      	lsls	r3, r3, #24
 8006478:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 800647c:	4931      	ldr	r1, [pc, #196]	@ (8006544 <RCCEx_PLL3_Config+0x15c>)
 800647e:	4313      	orrs	r3, r2
 8006480:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8006482:	4b30      	ldr	r3, [pc, #192]	@ (8006544 <RCCEx_PLL3_Config+0x15c>)
 8006484:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006486:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	695b      	ldr	r3, [r3, #20]
 800648e:	492d      	ldr	r1, [pc, #180]	@ (8006544 <RCCEx_PLL3_Config+0x15c>)
 8006490:	4313      	orrs	r3, r2
 8006492:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8006494:	4b2b      	ldr	r3, [pc, #172]	@ (8006544 <RCCEx_PLL3_Config+0x15c>)
 8006496:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006498:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	699b      	ldr	r3, [r3, #24]
 80064a0:	4928      	ldr	r1, [pc, #160]	@ (8006544 <RCCEx_PLL3_Config+0x15c>)
 80064a2:	4313      	orrs	r3, r2
 80064a4:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 80064a6:	4b27      	ldr	r3, [pc, #156]	@ (8006544 <RCCEx_PLL3_Config+0x15c>)
 80064a8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80064aa:	4a26      	ldr	r2, [pc, #152]	@ (8006544 <RCCEx_PLL3_Config+0x15c>)
 80064ac:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80064b0:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 80064b2:	4b24      	ldr	r3, [pc, #144]	@ (8006544 <RCCEx_PLL3_Config+0x15c>)
 80064b4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80064b6:	4b24      	ldr	r3, [pc, #144]	@ (8006548 <RCCEx_PLL3_Config+0x160>)
 80064b8:	4013      	ands	r3, r2
 80064ba:	687a      	ldr	r2, [r7, #4]
 80064bc:	69d2      	ldr	r2, [r2, #28]
 80064be:	00d2      	lsls	r2, r2, #3
 80064c0:	4920      	ldr	r1, [pc, #128]	@ (8006544 <RCCEx_PLL3_Config+0x15c>)
 80064c2:	4313      	orrs	r3, r2
 80064c4:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 80064c6:	4b1f      	ldr	r3, [pc, #124]	@ (8006544 <RCCEx_PLL3_Config+0x15c>)
 80064c8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80064ca:	4a1e      	ldr	r2, [pc, #120]	@ (8006544 <RCCEx_PLL3_Config+0x15c>)
 80064cc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80064d0:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 80064d2:	683b      	ldr	r3, [r7, #0]
 80064d4:	2b00      	cmp	r3, #0
 80064d6:	d106      	bne.n	80064e6 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 80064d8:	4b1a      	ldr	r3, [pc, #104]	@ (8006544 <RCCEx_PLL3_Config+0x15c>)
 80064da:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80064dc:	4a19      	ldr	r2, [pc, #100]	@ (8006544 <RCCEx_PLL3_Config+0x15c>)
 80064de:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80064e2:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80064e4:	e00f      	b.n	8006506 <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 80064e6:	683b      	ldr	r3, [r7, #0]
 80064e8:	2b01      	cmp	r3, #1
 80064ea:	d106      	bne.n	80064fa <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 80064ec:	4b15      	ldr	r3, [pc, #84]	@ (8006544 <RCCEx_PLL3_Config+0x15c>)
 80064ee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80064f0:	4a14      	ldr	r2, [pc, #80]	@ (8006544 <RCCEx_PLL3_Config+0x15c>)
 80064f2:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80064f6:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80064f8:	e005      	b.n	8006506 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 80064fa:	4b12      	ldr	r3, [pc, #72]	@ (8006544 <RCCEx_PLL3_Config+0x15c>)
 80064fc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80064fe:	4a11      	ldr	r2, [pc, #68]	@ (8006544 <RCCEx_PLL3_Config+0x15c>)
 8006500:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8006504:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8006506:	4b0f      	ldr	r3, [pc, #60]	@ (8006544 <RCCEx_PLL3_Config+0x15c>)
 8006508:	681b      	ldr	r3, [r3, #0]
 800650a:	4a0e      	ldr	r2, [pc, #56]	@ (8006544 <RCCEx_PLL3_Config+0x15c>)
 800650c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006510:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006512:	f7fc f885 	bl	8002620 <HAL_GetTick>
 8006516:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8006518:	e008      	b.n	800652c <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800651a:	f7fc f881 	bl	8002620 <HAL_GetTick>
 800651e:	4602      	mov	r2, r0
 8006520:	68bb      	ldr	r3, [r7, #8]
 8006522:	1ad3      	subs	r3, r2, r3
 8006524:	2b02      	cmp	r3, #2
 8006526:	d901      	bls.n	800652c <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8006528:	2303      	movs	r3, #3
 800652a:	e006      	b.n	800653a <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800652c:	4b05      	ldr	r3, [pc, #20]	@ (8006544 <RCCEx_PLL3_Config+0x15c>)
 800652e:	681b      	ldr	r3, [r3, #0]
 8006530:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8006534:	2b00      	cmp	r3, #0
 8006536:	d0f0      	beq.n	800651a <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8006538:	7bfb      	ldrb	r3, [r7, #15]
}
 800653a:	4618      	mov	r0, r3
 800653c:	3710      	adds	r7, #16
 800653e:	46bd      	mov	sp, r7
 8006540:	bd80      	pop	{r7, pc}
 8006542:	bf00      	nop
 8006544:	58024400 	.word	0x58024400
 8006548:	ffff0007 	.word	0xffff0007

0800654c <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 800654c:	b580      	push	{r7, lr}
 800654e:	b084      	sub	sp, #16
 8006550:	af00      	add	r7, sp, #0
 8006552:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8006554:	2301      	movs	r3, #1
 8006556:	73fb      	strb	r3, [r7, #15]

  /* Check RTC handler */
  if(hrtc != NULL)
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	2b00      	cmp	r3, #0
 800655c:	d071      	beq.n	8006642 <HAL_RTC_Init+0xf6>
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else /*  (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */
    if(hrtc->State == HAL_RTC_STATE_RESET)
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8006564:	b2db      	uxtb	r3, r3
 8006566:	2b00      	cmp	r3, #0
 8006568:	d106      	bne.n	8006578 <HAL_RTC_Init+0x2c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	2200      	movs	r2, #0
 800656e:	f883 2020 	strb.w	r2, [r3, #32]

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 8006572:	6878      	ldr	r0, [r7, #4]
 8006574:	f7fb fbb6 	bl	8001ce4 <HAL_RTC_MspInit>
    }
#endif /*  (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	2202      	movs	r2, #2
 800657c:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Check whether the calendar needs to be initialized */
    if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	681b      	ldr	r3, [r3, #0]
 8006584:	68db      	ldr	r3, [r3, #12]
 8006586:	f003 0310 	and.w	r3, r3, #16
 800658a:	2b10      	cmp	r3, #16
 800658c:	d050      	beq.n	8006630 <HAL_RTC_Init+0xe4>
    {
      /* Disable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	681b      	ldr	r3, [r3, #0]
 8006592:	22ca      	movs	r2, #202	@ 0xca
 8006594:	625a      	str	r2, [r3, #36]	@ 0x24
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	681b      	ldr	r3, [r3, #0]
 800659a:	2253      	movs	r2, #83	@ 0x53
 800659c:	625a      	str	r2, [r3, #36]	@ 0x24

     /* Enter Initialization mode */
      status = RTC_EnterInitMode(hrtc);
 800659e:	6878      	ldr	r0, [r7, #4]
 80065a0:	f000 f87a 	bl	8006698 <RTC_EnterInitMode>
 80065a4:	4603      	mov	r3, r0
 80065a6:	73fb      	strb	r3, [r7, #15]
      if (status == HAL_OK)
 80065a8:	7bfb      	ldrb	r3, [r7, #15]
 80065aa:	2b00      	cmp	r3, #0
 80065ac:	d124      	bne.n	80065f8 <HAL_RTC_Init+0xac>
#if defined(TAMP)
        /* Clear RTC_CR FMT, OSEL, POL and TAMPOE Bits */
        hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE);
#else
        /* Clear RTC_CR FMT, OSEL and POL Bits */
        hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL);
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	681b      	ldr	r3, [r3, #0]
 80065b2:	6899      	ldr	r1, [r3, #8]
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	681a      	ldr	r2, [r3, #0]
 80065b8:	4b24      	ldr	r3, [pc, #144]	@ (800664c <HAL_RTC_Init+0x100>)
 80065ba:	400b      	ands	r3, r1
 80065bc:	6093      	str	r3, [r2, #8]
#endif /* TAMP */

        /* Set RTC_CR register */
        hrtc->Instance->CR |= (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	681b      	ldr	r3, [r3, #0]
 80065c2:	6899      	ldr	r1, [r3, #8]
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	685a      	ldr	r2, [r3, #4]
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	691b      	ldr	r3, [r3, #16]
 80065cc:	431a      	orrs	r2, r3
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	699b      	ldr	r3, [r3, #24]
 80065d2:	431a      	orrs	r2, r3
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	681b      	ldr	r3, [r3, #0]
 80065d8:	430a      	orrs	r2, r1
 80065da:	609a      	str	r2, [r3, #8]

        /* Configure the RTC PRER */
        hrtc->Instance->PRER = (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos) | (hrtc->Init.SynchPrediv << RTC_PRER_PREDIV_S_Pos);
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	689b      	ldr	r3, [r3, #8]
 80065e0:	0419      	lsls	r1, r3, #16
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	68da      	ldr	r2, [r3, #12]
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	681b      	ldr	r3, [r3, #0]
 80065ea:	430a      	orrs	r2, r1
 80065ec:	611a      	str	r2, [r3, #16]

        /* Exit Initialization mode */
        status = RTC_ExitInitMode(hrtc);
 80065ee:	6878      	ldr	r0, [r7, #4]
 80065f0:	f000 f886 	bl	8006700 <RTC_ExitInitMode>
 80065f4:	4603      	mov	r3, r0
 80065f6:	73fb      	strb	r3, [r7, #15]
      }
      if(status == HAL_OK)
 80065f8:	7bfb      	ldrb	r3, [r7, #15]
 80065fa:	2b00      	cmp	r3, #0
 80065fc:	d113      	bne.n	8006626 <HAL_RTC_Init+0xda>
      {
#if defined(TAMP)
        hrtc->Instance->CR &= ~(RTC_CR_TAMPALRM_PU | RTC_CR_TAMPALRM_TYPE | RTC_CR_OUT2EN);
        hrtc->Instance->CR |= (hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
#else
        hrtc->Instance->OR &= ~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	681b      	ldr	r3, [r3, #0]
 8006602:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	681b      	ldr	r3, [r3, #0]
 8006608:	f022 0203 	bic.w	r2, r2, #3
 800660c:	64da      	str	r2, [r3, #76]	@ 0x4c
        hrtc->Instance->OR |= (hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	681b      	ldr	r3, [r3, #0]
 8006612:	6cd9      	ldr	r1, [r3, #76]	@ 0x4c
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	69da      	ldr	r2, [r3, #28]
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	695b      	ldr	r3, [r3, #20]
 800661c:	431a      	orrs	r2, r3
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	681b      	ldr	r3, [r3, #0]
 8006622:	430a      	orrs	r2, r1
 8006624:	64da      	str	r2, [r3, #76]	@ 0x4c
#endif /* TAMP */
      }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	681b      	ldr	r3, [r3, #0]
 800662a:	22ff      	movs	r2, #255	@ 0xff
 800662c:	625a      	str	r2, [r3, #36]	@ 0x24
 800662e:	e001      	b.n	8006634 <HAL_RTC_Init+0xe8>
    }
    else
    {
      /* The calendar is already initialized */
      status = HAL_OK;
 8006630:	2300      	movs	r3, #0
 8006632:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 8006634:	7bfb      	ldrb	r3, [r7, #15]
 8006636:	2b00      	cmp	r3, #0
 8006638:	d103      	bne.n	8006642 <HAL_RTC_Init+0xf6>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_READY;
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	2201      	movs	r2, #1
 800663e:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    }
  }

  /* return status */
  return status;
 8006642:	7bfb      	ldrb	r3, [r7, #15]
}
 8006644:	4618      	mov	r0, r3
 8006646:	3710      	adds	r7, #16
 8006648:	46bd      	mov	sp, r7
 800664a:	bd80      	pop	{r7, pc}
 800664c:	ff8fffbf 	.word	0xff8fffbf

08006650 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8006650:	b580      	push	{r7, lr}
 8006652:	b084      	sub	sp, #16
 8006654:	af00      	add	r7, sp, #0
 8006656:	6078      	str	r0, [r7, #4]

  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
#if defined(TAMP)
  hrtc->Instance->ICSR = ((uint32_t)(RTC_RSF_MASK & RTC_ICSR_RESERVED_MASK));
#else
  hrtc->Instance->ISR = ((uint32_t)(RTC_RSF_MASK & RTC_ISR_RESERVED_MASK));
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	681b      	ldr	r3, [r3, #0]
 800665c:	4a0d      	ldr	r2, [pc, #52]	@ (8006694 <HAL_RTC_WaitForSynchro+0x44>)
 800665e:	60da      	str	r2, [r3, #12]
#endif /* TAMP */

  tickstart = HAL_GetTick();
 8006660:	f7fb ffde 	bl	8002620 <HAL_GetTick>
 8006664:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
#if defined(TAMP)
  while ((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
#else
    while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8006666:	e009      	b.n	800667c <HAL_RTC_WaitForSynchro+0x2c>
#endif /* TAMP */
    {
      if((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8006668:	f7fb ffda 	bl	8002620 <HAL_GetTick>
 800666c:	4602      	mov	r2, r0
 800666e:	68fb      	ldr	r3, [r7, #12]
 8006670:	1ad3      	subs	r3, r2, r3
 8006672:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8006676:	d901      	bls.n	800667c <HAL_RTC_WaitForSynchro+0x2c>
      {
        return HAL_TIMEOUT;
 8006678:	2303      	movs	r3, #3
 800667a:	e007      	b.n	800668c <HAL_RTC_WaitForSynchro+0x3c>
    while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	681b      	ldr	r3, [r3, #0]
 8006680:	68db      	ldr	r3, [r3, #12]
 8006682:	f003 0320 	and.w	r3, r3, #32
 8006686:	2b00      	cmp	r3, #0
 8006688:	d0ee      	beq.n	8006668 <HAL_RTC_WaitForSynchro+0x18>
      }
    }

  return HAL_OK;
 800668a:	2300      	movs	r3, #0
}
 800668c:	4618      	mov	r0, r3
 800668e:	3710      	adds	r7, #16
 8006690:	46bd      	mov	sp, r7
 8006692:	bd80      	pop	{r7, pc}
 8006694:	0003ff5f 	.word	0x0003ff5f

08006698 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8006698:	b580      	push	{r7, lr}
 800669a:	b084      	sub	sp, #16
 800669c:	af00      	add	r7, sp, #0
 800669e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80066a0:	2300      	movs	r3, #0
 80066a2:	73fb      	strb	r3, [r7, #15]
    tickstart = HAL_GetTick();

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while (((hrtc->Instance->ICSR & RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
#else
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	681b      	ldr	r3, [r3, #0]
 80066a8:	68db      	ldr	r3, [r3, #12]
 80066aa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80066ae:	2b00      	cmp	r3, #0
 80066b0:	d120      	bne.n	80066f4 <RTC_EnterInitMode+0x5c>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	681b      	ldr	r3, [r3, #0]
 80066b6:	f04f 32ff 	mov.w	r2, #4294967295
 80066ba:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 80066bc:	f7fb ffb0 	bl	8002620 <HAL_GetTick>
 80066c0:	60b8      	str	r0, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while (((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 80066c2:	e00d      	b.n	80066e0 <RTC_EnterInitMode+0x48>
#endif /* TAMP */
    {
      if((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 80066c4:	f7fb ffac 	bl	8002620 <HAL_GetTick>
 80066c8:	4602      	mov	r2, r0
 80066ca:	68bb      	ldr	r3, [r7, #8]
 80066cc:	1ad3      	subs	r3, r2, r3
 80066ce:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80066d2:	d905      	bls.n	80066e0 <RTC_EnterInitMode+0x48>
      {
        status = HAL_TIMEOUT;
 80066d4:	2303      	movs	r3, #3
 80066d6:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	2203      	movs	r2, #3
 80066dc:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    while (((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	681b      	ldr	r3, [r3, #0]
 80066e4:	68db      	ldr	r3, [r3, #12]
 80066e6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80066ea:	2b00      	cmp	r3, #0
 80066ec:	d102      	bne.n	80066f4 <RTC_EnterInitMode+0x5c>
 80066ee:	7bfb      	ldrb	r3, [r7, #15]
 80066f0:	2b03      	cmp	r3, #3
 80066f2:	d1e7      	bne.n	80066c4 <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return status;
 80066f4:	7bfb      	ldrb	r3, [r7, #15]
}
 80066f6:	4618      	mov	r0, r3
 80066f8:	3710      	adds	r7, #16
 80066fa:	46bd      	mov	sp, r7
 80066fc:	bd80      	pop	{r7, pc}
	...

08006700 <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8006700:	b580      	push	{r7, lr}
 8006702:	b084      	sub	sp, #16
 8006704:	af00      	add	r7, sp, #0
 8006706:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006708:	2300      	movs	r3, #0
 800670a:	73fb      	strb	r3, [r7, #15]

  /* Exit Initialization mode */
#if defined(TAMP)
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
#else
  CLEAR_BIT(RTC->ISR, RTC_ISR_INIT);
 800670c:	4b1a      	ldr	r3, [pc, #104]	@ (8006778 <RTC_ExitInitMode+0x78>)
 800670e:	68db      	ldr	r3, [r3, #12]
 8006710:	4a19      	ldr	r2, [pc, #100]	@ (8006778 <RTC_ExitInitMode+0x78>)
 8006712:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006716:	60d3      	str	r3, [r2, #12]
#endif /* TAMP */

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 8006718:	4b17      	ldr	r3, [pc, #92]	@ (8006778 <RTC_ExitInitMode+0x78>)
 800671a:	689b      	ldr	r3, [r3, #8]
 800671c:	f003 0320 	and.w	r3, r3, #32
 8006720:	2b00      	cmp	r3, #0
 8006722:	d10c      	bne.n	800673e <RTC_ExitInitMode+0x3e>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8006724:	6878      	ldr	r0, [r7, #4]
 8006726:	f7ff ff93 	bl	8006650 <HAL_RTC_WaitForSynchro>
 800672a:	4603      	mov	r3, r0
 800672c:	2b00      	cmp	r3, #0
 800672e:	d01e      	beq.n	800676e <RTC_ExitInitMode+0x6e>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	2203      	movs	r2, #3
 8006734:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
      status = HAL_TIMEOUT;
 8006738:	2303      	movs	r3, #3
 800673a:	73fb      	strb	r3, [r7, #15]
 800673c:	e017      	b.n	800676e <RTC_ExitInitMode+0x6e>
    }
  }
  else
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 800673e:	4b0e      	ldr	r3, [pc, #56]	@ (8006778 <RTC_ExitInitMode+0x78>)
 8006740:	689b      	ldr	r3, [r3, #8]
 8006742:	4a0d      	ldr	r2, [pc, #52]	@ (8006778 <RTC_ExitInitMode+0x78>)
 8006744:	f023 0320 	bic.w	r3, r3, #32
 8006748:	6093      	str	r3, [r2, #8]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800674a:	6878      	ldr	r0, [r7, #4]
 800674c:	f7ff ff80 	bl	8006650 <HAL_RTC_WaitForSynchro>
 8006750:	4603      	mov	r3, r0
 8006752:	2b00      	cmp	r3, #0
 8006754:	d005      	beq.n	8006762 <RTC_ExitInitMode+0x62>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	2203      	movs	r2, #3
 800675a:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
      status = HAL_TIMEOUT;
 800675e:	2303      	movs	r3, #3
 8006760:	73fb      	strb	r3, [r7, #15]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8006762:	4b05      	ldr	r3, [pc, #20]	@ (8006778 <RTC_ExitInitMode+0x78>)
 8006764:	689b      	ldr	r3, [r3, #8]
 8006766:	4a04      	ldr	r2, [pc, #16]	@ (8006778 <RTC_ExitInitMode+0x78>)
 8006768:	f043 0320 	orr.w	r3, r3, #32
 800676c:	6093      	str	r3, [r2, #8]
  }

  return status;
 800676e:	7bfb      	ldrb	r3, [r7, #15]
}
 8006770:	4618      	mov	r0, r3
 8006772:	3710      	adds	r7, #16
 8006774:	46bd      	mov	sp, r7
 8006776:	bd80      	pop	{r7, pc}
 8006778:	58004000 	.word	0x58004000

0800677c <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800677c:	b580      	push	{r7, lr}
 800677e:	b084      	sub	sp, #16
 8006780:	af00      	add	r7, sp, #0
 8006782:	6078      	str	r0, [r7, #4]
#if (USE_SPI_CRC != 0UL)
  uint32_t crc_poly_msb_mask;
#endif /* USE_SPI_CRC */

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	2b00      	cmp	r3, #0
 8006788:	d101      	bne.n	800678e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800678a:	2301      	movs	r3, #1
 800678c:	e10f      	b.n	80069ae <HAL_SPI_Init+0x232>
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	2200      	movs	r2, #0
 8006792:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	681b      	ldr	r3, [r3, #0]
 8006798:	4a87      	ldr	r2, [pc, #540]	@ (80069b8 <HAL_SPI_Init+0x23c>)
 800679a:	4293      	cmp	r3, r2
 800679c:	d00f      	beq.n	80067be <HAL_SPI_Init+0x42>
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	681b      	ldr	r3, [r3, #0]
 80067a2:	4a86      	ldr	r2, [pc, #536]	@ (80069bc <HAL_SPI_Init+0x240>)
 80067a4:	4293      	cmp	r3, r2
 80067a6:	d00a      	beq.n	80067be <HAL_SPI_Init+0x42>
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	681b      	ldr	r3, [r3, #0]
 80067ac:	4a84      	ldr	r2, [pc, #528]	@ (80069c0 <HAL_SPI_Init+0x244>)
 80067ae:	4293      	cmp	r3, r2
 80067b0:	d005      	beq.n	80067be <HAL_SPI_Init+0x42>
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	68db      	ldr	r3, [r3, #12]
 80067b6:	2b0f      	cmp	r3, #15
 80067b8:	d901      	bls.n	80067be <HAL_SPI_Init+0x42>
  {
    return HAL_ERROR;
 80067ba:	2301      	movs	r3, #1
 80067bc:	e0f7      	b.n	80069ae <HAL_SPI_Init+0x232>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 80067be:	6878      	ldr	r0, [r7, #4]
 80067c0:	f000 fe2e 	bl	8007420 <SPI_GetPacketSize>
 80067c4:	60f8      	str	r0, [r7, #12]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	681b      	ldr	r3, [r3, #0]
 80067ca:	4a7b      	ldr	r2, [pc, #492]	@ (80069b8 <HAL_SPI_Init+0x23c>)
 80067cc:	4293      	cmp	r3, r2
 80067ce:	d00c      	beq.n	80067ea <HAL_SPI_Init+0x6e>
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	681b      	ldr	r3, [r3, #0]
 80067d4:	4a79      	ldr	r2, [pc, #484]	@ (80069bc <HAL_SPI_Init+0x240>)
 80067d6:	4293      	cmp	r3, r2
 80067d8:	d007      	beq.n	80067ea <HAL_SPI_Init+0x6e>
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	681b      	ldr	r3, [r3, #0]
 80067de:	4a78      	ldr	r2, [pc, #480]	@ (80069c0 <HAL_SPI_Init+0x244>)
 80067e0:	4293      	cmp	r3, r2
 80067e2:	d002      	beq.n	80067ea <HAL_SPI_Init+0x6e>
 80067e4:	68fb      	ldr	r3, [r7, #12]
 80067e6:	2b08      	cmp	r3, #8
 80067e8:	d811      	bhi.n	800680e <HAL_SPI_Init+0x92>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 80067ee:	4a72      	ldr	r2, [pc, #456]	@ (80069b8 <HAL_SPI_Init+0x23c>)
 80067f0:	4293      	cmp	r3, r2
 80067f2:	d009      	beq.n	8006808 <HAL_SPI_Init+0x8c>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	681b      	ldr	r3, [r3, #0]
 80067f8:	4a70      	ldr	r2, [pc, #448]	@ (80069bc <HAL_SPI_Init+0x240>)
 80067fa:	4293      	cmp	r3, r2
 80067fc:	d004      	beq.n	8006808 <HAL_SPI_Init+0x8c>
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	681b      	ldr	r3, [r3, #0]
 8006802:	4a6f      	ldr	r2, [pc, #444]	@ (80069c0 <HAL_SPI_Init+0x244>)
 8006804:	4293      	cmp	r3, r2
 8006806:	d104      	bne.n	8006812 <HAL_SPI_Init+0x96>
 8006808:	68fb      	ldr	r3, [r7, #12]
 800680a:	2b10      	cmp	r3, #16
 800680c:	d901      	bls.n	8006812 <HAL_SPI_Init+0x96>
  {
    return HAL_ERROR;
 800680e:	2301      	movs	r3, #1
 8006810:	e0cd      	b.n	80069ae <HAL_SPI_Init+0x232>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 8006818:	b2db      	uxtb	r3, r3
 800681a:	2b00      	cmp	r3, #0
 800681c:	d106      	bne.n	800682c <HAL_SPI_Init+0xb0>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800681e:	687b      	ldr	r3, [r7, #4]
 8006820:	2200      	movs	r2, #0
 8006822:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8006826:	6878      	ldr	r0, [r7, #4]
 8006828:	f7fb fa8e 	bl	8001d48 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	2202      	movs	r2, #2
 8006830:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	681b      	ldr	r3, [r3, #0]
 8006838:	681a      	ldr	r2, [r3, #0]
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	681b      	ldr	r3, [r3, #0]
 800683e:	f022 0201 	bic.w	r2, r2, #1
 8006842:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	681b      	ldr	r3, [r3, #0]
 8006848:	689b      	ldr	r3, [r3, #8]
 800684a:	f403 13f8 	and.w	r3, r3, #2031616	@ 0x1f0000
 800684e:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	699b      	ldr	r3, [r3, #24]
 8006854:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8006858:	d119      	bne.n	800688e <HAL_SPI_Init+0x112>
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	685b      	ldr	r3, [r3, #4]
 800685e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8006862:	d103      	bne.n	800686c <HAL_SPI_Init+0xf0>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 8006868:	2b00      	cmp	r3, #0
 800686a:	d008      	beq.n	800687e <HAL_SPI_Init+0x102>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8006870:	2b00      	cmp	r3, #0
 8006872:	d10c      	bne.n	800688e <HAL_SPI_Init+0x112>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 8006878:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800687c:	d107      	bne.n	800688e <HAL_SPI_Init+0x112>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	681b      	ldr	r3, [r3, #0]
 8006882:	681a      	ldr	r2, [r3, #0]
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	681b      	ldr	r3, [r3, #0]
 8006888:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 800688c:	601a      	str	r2, [r3, #0]
  }

  /* SPIx Master Rx Auto Suspend Configuration */
  if (((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER) && (hspi->Init.DataSize >= SPI_DATASIZE_8BIT))
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	685b      	ldr	r3, [r3, #4]
 8006892:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006896:	2b00      	cmp	r3, #0
 8006898:	d00f      	beq.n	80068ba <HAL_SPI_Init+0x13e>
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	68db      	ldr	r3, [r3, #12]
 800689e:	2b06      	cmp	r3, #6
 80068a0:	d90b      	bls.n	80068ba <HAL_SPI_Init+0x13e>
  {
    MODIFY_REG(hspi->Instance->CR1, SPI_CR1_MASRX, hspi->Init.MasterReceiverAutoSusp);
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	681b      	ldr	r3, [r3, #0]
 80068a6:	681b      	ldr	r3, [r3, #0]
 80068a8:	f423 7180 	bic.w	r1, r3, #256	@ 0x100
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	681b      	ldr	r3, [r3, #0]
 80068b4:	430a      	orrs	r2, r1
 80068b6:	601a      	str	r2, [r3, #0]
 80068b8:	e007      	b.n	80068ca <HAL_SPI_Init+0x14e>
  }
  else
  {
    CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_MASRX);
 80068ba:	687b      	ldr	r3, [r7, #4]
 80068bc:	681b      	ldr	r3, [r3, #0]
 80068be:	681a      	ldr	r2, [r3, #0]
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	681b      	ldr	r3, [r3, #0]
 80068c4:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80068c8:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	69da      	ldr	r2, [r3, #28]
 80068ce:	687b      	ldr	r3, [r7, #4]
 80068d0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80068d2:	431a      	orrs	r2, r3
 80068d4:	68bb      	ldr	r3, [r7, #8]
 80068d6:	431a      	orrs	r2, r3
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80068dc:	ea42 0103 	orr.w	r1, r2, r3
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	68da      	ldr	r2, [r3, #12]
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	681b      	ldr	r3, [r3, #0]
 80068e8:	430a      	orrs	r2, r1
 80068ea:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80068f4:	431a      	orrs	r2, r3
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80068fa:	431a      	orrs	r2, r3
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	699b      	ldr	r3, [r3, #24]
 8006900:	431a      	orrs	r2, r3
 8006902:	687b      	ldr	r3, [r7, #4]
 8006904:	691b      	ldr	r3, [r3, #16]
 8006906:	431a      	orrs	r2, r3
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	695b      	ldr	r3, [r3, #20]
 800690c:	431a      	orrs	r2, r3
 800690e:	687b      	ldr	r3, [r7, #4]
 8006910:	6a1b      	ldr	r3, [r3, #32]
 8006912:	431a      	orrs	r2, r3
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	685b      	ldr	r3, [r3, #4]
 8006918:	431a      	orrs	r2, r3
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800691e:	431a      	orrs	r2, r3
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	689b      	ldr	r3, [r3, #8]
 8006924:	431a      	orrs	r2, r3
 8006926:	687b      	ldr	r3, [r7, #4]
 8006928:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800692a:	ea42 0103 	orr.w	r1, r2, r3
 800692e:	687b      	ldr	r3, [r7, #4]
 8006930:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8006932:	687b      	ldr	r3, [r7, #4]
 8006934:	681b      	ldr	r3, [r3, #0]
 8006936:	430a      	orrs	r2, r1
 8006938:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	685b      	ldr	r3, [r3, #4]
 800693e:	2b00      	cmp	r3, #0
 8006940:	d113      	bne.n	800696a <HAL_SPI_Init+0x1ee>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif /* USE_SPI_CRC */
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	681b      	ldr	r3, [r3, #0]
 8006946:	689b      	ldr	r3, [r3, #8]
 8006948:	f423 52c0 	bic.w	r2, r3, #6144	@ 0x1800
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	681b      	ldr	r3, [r3, #0]
 8006950:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8006954:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 8006956:	687b      	ldr	r3, [r7, #4]
 8006958:	681b      	ldr	r3, [r3, #0]
 800695a:	689b      	ldr	r3, [r3, #8]
 800695c:	f423 62c0 	bic.w	r2, r3, #1536	@ 0x600
 8006960:	687b      	ldr	r3, [r7, #4]
 8006962:	681b      	ldr	r3, [r3, #0]
 8006964:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8006968:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	681b      	ldr	r3, [r3, #0]
 800696e:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	681b      	ldr	r3, [r3, #0]
 8006974:	f022 0201 	bic.w	r2, r2, #1
 8006978:	651a      	str	r2, [r3, #80]	@ 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 800697a:	687b      	ldr	r3, [r7, #4]
 800697c:	685b      	ldr	r3, [r3, #4]
 800697e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006982:	2b00      	cmp	r3, #0
 8006984:	d00a      	beq.n	800699c <HAL_SPI_Init+0x220>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	681b      	ldr	r3, [r3, #0]
 800698a:	68db      	ldr	r3, [r3, #12]
 800698c:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	681b      	ldr	r3, [r3, #0]
 8006998:	430a      	orrs	r2, r1
 800699a:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	2200      	movs	r2, #0
 80069a0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	2201      	movs	r2, #1
 80069a8:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  return HAL_OK;
 80069ac:	2300      	movs	r3, #0
}
 80069ae:	4618      	mov	r0, r3
 80069b0:	3710      	adds	r7, #16
 80069b2:	46bd      	mov	sp, r7
 80069b4:	bd80      	pop	{r7, pc}
 80069b6:	bf00      	nop
 80069b8:	40013000 	.word	0x40013000
 80069bc:	40003800 	.word	0x40003800
 80069c0:	40003c00 	.word	0x40003c00

080069c4 <HAL_SPI_Transmit>:
  * @param  Size   : amount of data to be sent
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80069c4:	b580      	push	{r7, lr}
 80069c6:	b088      	sub	sp, #32
 80069c8:	af02      	add	r7, sp, #8
 80069ca:	60f8      	str	r0, [r7, #12]
 80069cc:	60b9      	str	r1, [r7, #8]
 80069ce:	603b      	str	r3, [r7, #0]
 80069d0:	4613      	mov	r3, r2
 80069d2:	80fb      	strh	r3, [r7, #6]
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 80069d4:	68fb      	ldr	r3, [r7, #12]
 80069d6:	681b      	ldr	r3, [r3, #0]
 80069d8:	3320      	adds	r3, #32
 80069da:	617b      	str	r3, [r7, #20]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_TXONLY(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80069dc:	f7fb fe20 	bl	8002620 <HAL_GetTick>
 80069e0:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 80069e2:	68fb      	ldr	r3, [r7, #12]
 80069e4:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 80069e8:	b2db      	uxtb	r3, r3
 80069ea:	2b01      	cmp	r3, #1
 80069ec:	d001      	beq.n	80069f2 <HAL_SPI_Transmit+0x2e>
  {
    return HAL_BUSY;
 80069ee:	2302      	movs	r3, #2
 80069f0:	e1d1      	b.n	8006d96 <HAL_SPI_Transmit+0x3d2>
  }

  if ((pData == NULL) || (Size == 0UL))
 80069f2:	68bb      	ldr	r3, [r7, #8]
 80069f4:	2b00      	cmp	r3, #0
 80069f6:	d002      	beq.n	80069fe <HAL_SPI_Transmit+0x3a>
 80069f8:	88fb      	ldrh	r3, [r7, #6]
 80069fa:	2b00      	cmp	r3, #0
 80069fc:	d101      	bne.n	8006a02 <HAL_SPI_Transmit+0x3e>
  {
    return HAL_ERROR;
 80069fe:	2301      	movs	r3, #1
 8006a00:	e1c9      	b.n	8006d96 <HAL_SPI_Transmit+0x3d2>
  }

  /* Lock the process */
  __HAL_LOCK(hspi);
 8006a02:	68fb      	ldr	r3, [r7, #12]
 8006a04:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 8006a08:	2b01      	cmp	r3, #1
 8006a0a:	d101      	bne.n	8006a10 <HAL_SPI_Transmit+0x4c>
 8006a0c:	2302      	movs	r3, #2
 8006a0e:	e1c2      	b.n	8006d96 <HAL_SPI_Transmit+0x3d2>
 8006a10:	68fb      	ldr	r3, [r7, #12]
 8006a12:	2201      	movs	r2, #1
 8006a14:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8006a18:	68fb      	ldr	r3, [r7, #12]
 8006a1a:	2203      	movs	r2, #3
 8006a1c:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006a20:	68fb      	ldr	r3, [r7, #12]
 8006a22:	2200      	movs	r2, #0
 8006a24:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8006a28:	68fb      	ldr	r3, [r7, #12]
 8006a2a:	68ba      	ldr	r2, [r7, #8]
 8006a2c:	65da      	str	r2, [r3, #92]	@ 0x5c
  hspi->TxXferSize  = Size;
 8006a2e:	68fb      	ldr	r3, [r7, #12]
 8006a30:	88fa      	ldrh	r2, [r7, #6]
 8006a32:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
  hspi->TxXferCount = Size;
 8006a36:	68fb      	ldr	r3, [r7, #12]
 8006a38:	88fa      	ldrh	r2, [r7, #6]
 8006a3a:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = NULL;
 8006a3e:	68fb      	ldr	r3, [r7, #12]
 8006a40:	2200      	movs	r2, #0
 8006a42:	665a      	str	r2, [r3, #100]	@ 0x64
  hspi->RxXferSize  = (uint16_t) 0UL;
 8006a44:	68fb      	ldr	r3, [r7, #12]
 8006a46:	2200      	movs	r2, #0
 8006a48:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  hspi->RxXferCount = (uint16_t) 0UL;
 8006a4c:	68fb      	ldr	r3, [r7, #12]
 8006a4e:	2200      	movs	r2, #0
 8006a50:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  hspi->TxISR       = NULL;
 8006a54:	68fb      	ldr	r3, [r7, #12]
 8006a56:	2200      	movs	r2, #0
 8006a58:	675a      	str	r2, [r3, #116]	@ 0x74
  hspi->RxISR       = NULL;
 8006a5a:	68fb      	ldr	r3, [r7, #12]
 8006a5c:	2200      	movs	r2, #0
 8006a5e:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006a60:	68fb      	ldr	r3, [r7, #12]
 8006a62:	689b      	ldr	r3, [r3, #8]
 8006a64:	f5b3 2fc0 	cmp.w	r3, #393216	@ 0x60000
 8006a68:	d108      	bne.n	8006a7c <HAL_SPI_Transmit+0xb8>
  {
    SPI_1LINE_TX(hspi);
 8006a6a:	68fb      	ldr	r3, [r7, #12]
 8006a6c:	681b      	ldr	r3, [r3, #0]
 8006a6e:	681a      	ldr	r2, [r3, #0]
 8006a70:	68fb      	ldr	r3, [r7, #12]
 8006a72:	681b      	ldr	r3, [r3, #0]
 8006a74:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8006a78:	601a      	str	r2, [r3, #0]
 8006a7a:	e009      	b.n	8006a90 <HAL_SPI_Transmit+0xcc>
  }
  else
  {
    SPI_2LINES_TX(hspi);
 8006a7c:	68fb      	ldr	r3, [r7, #12]
 8006a7e:	681b      	ldr	r3, [r3, #0]
 8006a80:	68db      	ldr	r3, [r3, #12]
 8006a82:	f423 22c0 	bic.w	r2, r3, #393216	@ 0x60000
 8006a86:	68fb      	ldr	r3, [r7, #12]
 8006a88:	681b      	ldr	r3, [r3, #0]
 8006a8a:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 8006a8e:	60da      	str	r2, [r3, #12]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 8006a90:	68fb      	ldr	r3, [r7, #12]
 8006a92:	681b      	ldr	r3, [r3, #0]
 8006a94:	685a      	ldr	r2, [r3, #4]
 8006a96:	4b96      	ldr	r3, [pc, #600]	@ (8006cf0 <HAL_SPI_Transmit+0x32c>)
 8006a98:	4013      	ands	r3, r2
 8006a9a:	88f9      	ldrh	r1, [r7, #6]
 8006a9c:	68fa      	ldr	r2, [r7, #12]
 8006a9e:	6812      	ldr	r2, [r2, #0]
 8006aa0:	430b      	orrs	r3, r1
 8006aa2:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 8006aa4:	68fb      	ldr	r3, [r7, #12]
 8006aa6:	681b      	ldr	r3, [r3, #0]
 8006aa8:	681a      	ldr	r2, [r3, #0]
 8006aaa:	68fb      	ldr	r3, [r7, #12]
 8006aac:	681b      	ldr	r3, [r3, #0]
 8006aae:	f042 0201 	orr.w	r2, r2, #1
 8006ab2:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006ab4:	68fb      	ldr	r3, [r7, #12]
 8006ab6:	685b      	ldr	r3, [r3, #4]
 8006ab8:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8006abc:	d107      	bne.n	8006ace <HAL_SPI_Transmit+0x10a>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 8006abe:	68fb      	ldr	r3, [r7, #12]
 8006ac0:	681b      	ldr	r3, [r3, #0]
 8006ac2:	681a      	ldr	r2, [r3, #0]
 8006ac4:	68fb      	ldr	r3, [r7, #12]
 8006ac6:	681b      	ldr	r3, [r3, #0]
 8006ac8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006acc:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 8006ace:	68fb      	ldr	r3, [r7, #12]
 8006ad0:	68db      	ldr	r3, [r3, #12]
 8006ad2:	2b0f      	cmp	r3, #15
 8006ad4:	d947      	bls.n	8006b66 <HAL_SPI_Transmit+0x1a2>
  {
    /* Transmit data in 32 Bit mode */
    while (hspi->TxXferCount > 0UL)
 8006ad6:	e03f      	b.n	8006b58 <HAL_SPI_Transmit+0x194>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 8006ad8:	68fb      	ldr	r3, [r7, #12]
 8006ada:	681b      	ldr	r3, [r3, #0]
 8006adc:	695b      	ldr	r3, [r3, #20]
 8006ade:	f003 0302 	and.w	r3, r3, #2
 8006ae2:	2b02      	cmp	r3, #2
 8006ae4:	d114      	bne.n	8006b10 <HAL_SPI_Transmit+0x14c>
      {
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 8006ae6:	68fb      	ldr	r3, [r7, #12]
 8006ae8:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8006aea:	68fb      	ldr	r3, [r7, #12]
 8006aec:	681b      	ldr	r3, [r3, #0]
 8006aee:	6812      	ldr	r2, [r2, #0]
 8006af0:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 8006af2:	68fb      	ldr	r3, [r7, #12]
 8006af4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006af6:	1d1a      	adds	r2, r3, #4
 8006af8:	68fb      	ldr	r3, [r7, #12]
 8006afa:	65da      	str	r2, [r3, #92]	@ 0x5c
        hspi->TxXferCount--;
 8006afc:	68fb      	ldr	r3, [r7, #12]
 8006afe:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8006b02:	b29b      	uxth	r3, r3
 8006b04:	3b01      	subs	r3, #1
 8006b06:	b29a      	uxth	r2, r3
 8006b08:	68fb      	ldr	r3, [r7, #12]
 8006b0a:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 8006b0e:	e023      	b.n	8006b58 <HAL_SPI_Transmit+0x194>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006b10:	f7fb fd86 	bl	8002620 <HAL_GetTick>
 8006b14:	4602      	mov	r2, r0
 8006b16:	693b      	ldr	r3, [r7, #16]
 8006b18:	1ad3      	subs	r3, r2, r3
 8006b1a:	683a      	ldr	r2, [r7, #0]
 8006b1c:	429a      	cmp	r2, r3
 8006b1e:	d803      	bhi.n	8006b28 <HAL_SPI_Transmit+0x164>
 8006b20:	683b      	ldr	r3, [r7, #0]
 8006b22:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006b26:	d102      	bne.n	8006b2e <HAL_SPI_Transmit+0x16a>
 8006b28:	683b      	ldr	r3, [r7, #0]
 8006b2a:	2b00      	cmp	r3, #0
 8006b2c:	d114      	bne.n	8006b58 <HAL_SPI_Transmit+0x194>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8006b2e:	68f8      	ldr	r0, [r7, #12]
 8006b30:	f000 fba8 	bl	8007284 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8006b34:	68fb      	ldr	r3, [r7, #12]
 8006b36:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006b3a:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8006b3e:	68fb      	ldr	r3, [r7, #12]
 8006b40:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8006b44:	68fb      	ldr	r3, [r7, #12]
 8006b46:	2201      	movs	r2, #1
 8006b48:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8006b4c:	68fb      	ldr	r3, [r7, #12]
 8006b4e:	2200      	movs	r2, #0
 8006b50:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 8006b54:	2303      	movs	r3, #3
 8006b56:	e11e      	b.n	8006d96 <HAL_SPI_Transmit+0x3d2>
    while (hspi->TxXferCount > 0UL)
 8006b58:	68fb      	ldr	r3, [r7, #12]
 8006b5a:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8006b5e:	b29b      	uxth	r3, r3
 8006b60:	2b00      	cmp	r3, #0
 8006b62:	d1b9      	bne.n	8006ad8 <HAL_SPI_Transmit+0x114>
 8006b64:	e0f1      	b.n	8006d4a <HAL_SPI_Transmit+0x386>
        }
      }
    }
  }
  /* Transmit data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8006b66:	68fb      	ldr	r3, [r7, #12]
 8006b68:	68db      	ldr	r3, [r3, #12]
 8006b6a:	2b07      	cmp	r3, #7
 8006b6c:	f240 80e6 	bls.w	8006d3c <HAL_SPI_Transmit+0x378>
  {
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0UL)
 8006b70:	e05d      	b.n	8006c2e <HAL_SPI_Transmit+0x26a>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 8006b72:	68fb      	ldr	r3, [r7, #12]
 8006b74:	681b      	ldr	r3, [r3, #0]
 8006b76:	695b      	ldr	r3, [r3, #20]
 8006b78:	f003 0302 	and.w	r3, r3, #2
 8006b7c:	2b02      	cmp	r3, #2
 8006b7e:	d132      	bne.n	8006be6 <HAL_SPI_Transmit+0x222>
      {
        if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 8006b80:	68fb      	ldr	r3, [r7, #12]
 8006b82:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8006b86:	b29b      	uxth	r3, r3
 8006b88:	2b01      	cmp	r3, #1
 8006b8a:	d918      	bls.n	8006bbe <HAL_SPI_Transmit+0x1fa>
 8006b8c:	68fb      	ldr	r3, [r7, #12]
 8006b8e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006b90:	2b00      	cmp	r3, #0
 8006b92:	d014      	beq.n	8006bbe <HAL_SPI_Transmit+0x1fa>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 8006b94:	68fb      	ldr	r3, [r7, #12]
 8006b96:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8006b98:	68fb      	ldr	r3, [r7, #12]
 8006b9a:	681b      	ldr	r3, [r3, #0]
 8006b9c:	6812      	ldr	r2, [r2, #0]
 8006b9e:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 8006ba0:	68fb      	ldr	r3, [r7, #12]
 8006ba2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006ba4:	1d1a      	adds	r2, r3, #4
 8006ba6:	68fb      	ldr	r3, [r7, #12]
 8006ba8:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 8006baa:	68fb      	ldr	r3, [r7, #12]
 8006bac:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8006bb0:	b29b      	uxth	r3, r3
 8006bb2:	3b02      	subs	r3, #2
 8006bb4:	b29a      	uxth	r2, r3
 8006bb6:	68fb      	ldr	r3, [r7, #12]
 8006bb8:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 8006bbc:	e037      	b.n	8006c2e <HAL_SPI_Transmit+0x26a>
        }
        else
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 8006bbe:	68fb      	ldr	r3, [r7, #12]
 8006bc0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006bc2:	881a      	ldrh	r2, [r3, #0]
 8006bc4:	697b      	ldr	r3, [r7, #20]
 8006bc6:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8006bc8:	68fb      	ldr	r3, [r7, #12]
 8006bca:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006bcc:	1c9a      	adds	r2, r3, #2
 8006bce:	68fb      	ldr	r3, [r7, #12]
 8006bd0:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount--;
 8006bd2:	68fb      	ldr	r3, [r7, #12]
 8006bd4:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8006bd8:	b29b      	uxth	r3, r3
 8006bda:	3b01      	subs	r3, #1
 8006bdc:	b29a      	uxth	r2, r3
 8006bde:	68fb      	ldr	r3, [r7, #12]
 8006be0:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 8006be4:	e023      	b.n	8006c2e <HAL_SPI_Transmit+0x26a>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006be6:	f7fb fd1b 	bl	8002620 <HAL_GetTick>
 8006bea:	4602      	mov	r2, r0
 8006bec:	693b      	ldr	r3, [r7, #16]
 8006bee:	1ad3      	subs	r3, r2, r3
 8006bf0:	683a      	ldr	r2, [r7, #0]
 8006bf2:	429a      	cmp	r2, r3
 8006bf4:	d803      	bhi.n	8006bfe <HAL_SPI_Transmit+0x23a>
 8006bf6:	683b      	ldr	r3, [r7, #0]
 8006bf8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006bfc:	d102      	bne.n	8006c04 <HAL_SPI_Transmit+0x240>
 8006bfe:	683b      	ldr	r3, [r7, #0]
 8006c00:	2b00      	cmp	r3, #0
 8006c02:	d114      	bne.n	8006c2e <HAL_SPI_Transmit+0x26a>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8006c04:	68f8      	ldr	r0, [r7, #12]
 8006c06:	f000 fb3d 	bl	8007284 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8006c0a:	68fb      	ldr	r3, [r7, #12]
 8006c0c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006c10:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8006c14:	68fb      	ldr	r3, [r7, #12]
 8006c16:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8006c1a:	68fb      	ldr	r3, [r7, #12]
 8006c1c:	2201      	movs	r2, #1
 8006c1e:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8006c22:	68fb      	ldr	r3, [r7, #12]
 8006c24:	2200      	movs	r2, #0
 8006c26:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 8006c2a:	2303      	movs	r3, #3
 8006c2c:	e0b3      	b.n	8006d96 <HAL_SPI_Transmit+0x3d2>
    while (hspi->TxXferCount > 0UL)
 8006c2e:	68fb      	ldr	r3, [r7, #12]
 8006c30:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8006c34:	b29b      	uxth	r3, r3
 8006c36:	2b00      	cmp	r3, #0
 8006c38:	d19b      	bne.n	8006b72 <HAL_SPI_Transmit+0x1ae>
 8006c3a:	e086      	b.n	8006d4a <HAL_SPI_Transmit+0x386>
  else
  {
    while (hspi->TxXferCount > 0UL)
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 8006c3c:	68fb      	ldr	r3, [r7, #12]
 8006c3e:	681b      	ldr	r3, [r3, #0]
 8006c40:	695b      	ldr	r3, [r3, #20]
 8006c42:	f003 0302 	and.w	r3, r3, #2
 8006c46:	2b02      	cmp	r3, #2
 8006c48:	d154      	bne.n	8006cf4 <HAL_SPI_Transmit+0x330>
      {
        if ((hspi->TxXferCount > 3UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_03DATA))
 8006c4a:	68fb      	ldr	r3, [r7, #12]
 8006c4c:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8006c50:	b29b      	uxth	r3, r3
 8006c52:	2b03      	cmp	r3, #3
 8006c54:	d918      	bls.n	8006c88 <HAL_SPI_Transmit+0x2c4>
 8006c56:	68fb      	ldr	r3, [r7, #12]
 8006c58:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006c5a:	2b40      	cmp	r3, #64	@ 0x40
 8006c5c:	d914      	bls.n	8006c88 <HAL_SPI_Transmit+0x2c4>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 8006c5e:	68fb      	ldr	r3, [r7, #12]
 8006c60:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8006c62:	68fb      	ldr	r3, [r7, #12]
 8006c64:	681b      	ldr	r3, [r3, #0]
 8006c66:	6812      	ldr	r2, [r2, #0]
 8006c68:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 8006c6a:	68fb      	ldr	r3, [r7, #12]
 8006c6c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006c6e:	1d1a      	adds	r2, r3, #4
 8006c70:	68fb      	ldr	r3, [r7, #12]
 8006c72:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount -= (uint16_t)4UL;
 8006c74:	68fb      	ldr	r3, [r7, #12]
 8006c76:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8006c7a:	b29b      	uxth	r3, r3
 8006c7c:	3b04      	subs	r3, #4
 8006c7e:	b29a      	uxth	r2, r3
 8006c80:	68fb      	ldr	r3, [r7, #12]
 8006c82:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 8006c86:	e059      	b.n	8006d3c <HAL_SPI_Transmit+0x378>
        }
        else if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 8006c88:	68fb      	ldr	r3, [r7, #12]
 8006c8a:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8006c8e:	b29b      	uxth	r3, r3
 8006c90:	2b01      	cmp	r3, #1
 8006c92:	d917      	bls.n	8006cc4 <HAL_SPI_Transmit+0x300>
 8006c94:	68fb      	ldr	r3, [r7, #12]
 8006c96:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006c98:	2b00      	cmp	r3, #0
 8006c9a:	d013      	beq.n	8006cc4 <HAL_SPI_Transmit+0x300>
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 8006c9c:	68fb      	ldr	r3, [r7, #12]
 8006c9e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006ca0:	881a      	ldrh	r2, [r3, #0]
 8006ca2:	697b      	ldr	r3, [r7, #20]
 8006ca4:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8006ca6:	68fb      	ldr	r3, [r7, #12]
 8006ca8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006caa:	1c9a      	adds	r2, r3, #2
 8006cac:	68fb      	ldr	r3, [r7, #12]
 8006cae:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 8006cb0:	68fb      	ldr	r3, [r7, #12]
 8006cb2:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8006cb6:	b29b      	uxth	r3, r3
 8006cb8:	3b02      	subs	r3, #2
 8006cba:	b29a      	uxth	r2, r3
 8006cbc:	68fb      	ldr	r3, [r7, #12]
 8006cbe:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 8006cc2:	e03b      	b.n	8006d3c <HAL_SPI_Transmit+0x378>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->TXDR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8006cc4:	68fb      	ldr	r3, [r7, #12]
 8006cc6:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8006cc8:	68fb      	ldr	r3, [r7, #12]
 8006cca:	681b      	ldr	r3, [r3, #0]
 8006ccc:	3320      	adds	r3, #32
 8006cce:	7812      	ldrb	r2, [r2, #0]
 8006cd0:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr += sizeof(uint8_t);
 8006cd2:	68fb      	ldr	r3, [r7, #12]
 8006cd4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006cd6:	1c5a      	adds	r2, r3, #1
 8006cd8:	68fb      	ldr	r3, [r7, #12]
 8006cda:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount--;
 8006cdc:	68fb      	ldr	r3, [r7, #12]
 8006cde:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8006ce2:	b29b      	uxth	r3, r3
 8006ce4:	3b01      	subs	r3, #1
 8006ce6:	b29a      	uxth	r2, r3
 8006ce8:	68fb      	ldr	r3, [r7, #12]
 8006cea:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 8006cee:	e025      	b.n	8006d3c <HAL_SPI_Transmit+0x378>
 8006cf0:	ffff0000 	.word	0xffff0000
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006cf4:	f7fb fc94 	bl	8002620 <HAL_GetTick>
 8006cf8:	4602      	mov	r2, r0
 8006cfa:	693b      	ldr	r3, [r7, #16]
 8006cfc:	1ad3      	subs	r3, r2, r3
 8006cfe:	683a      	ldr	r2, [r7, #0]
 8006d00:	429a      	cmp	r2, r3
 8006d02:	d803      	bhi.n	8006d0c <HAL_SPI_Transmit+0x348>
 8006d04:	683b      	ldr	r3, [r7, #0]
 8006d06:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006d0a:	d102      	bne.n	8006d12 <HAL_SPI_Transmit+0x34e>
 8006d0c:	683b      	ldr	r3, [r7, #0]
 8006d0e:	2b00      	cmp	r3, #0
 8006d10:	d114      	bne.n	8006d3c <HAL_SPI_Transmit+0x378>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8006d12:	68f8      	ldr	r0, [r7, #12]
 8006d14:	f000 fab6 	bl	8007284 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8006d18:	68fb      	ldr	r3, [r7, #12]
 8006d1a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006d1e:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8006d22:	68fb      	ldr	r3, [r7, #12]
 8006d24:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8006d28:	68fb      	ldr	r3, [r7, #12]
 8006d2a:	2201      	movs	r2, #1
 8006d2c:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8006d30:	68fb      	ldr	r3, [r7, #12]
 8006d32:	2200      	movs	r2, #0
 8006d34:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 8006d38:	2303      	movs	r3, #3
 8006d3a:	e02c      	b.n	8006d96 <HAL_SPI_Transmit+0x3d2>
    while (hspi->TxXferCount > 0UL)
 8006d3c:	68fb      	ldr	r3, [r7, #12]
 8006d3e:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8006d42:	b29b      	uxth	r3, r3
 8006d44:	2b00      	cmp	r3, #0
 8006d46:	f47f af79 	bne.w	8006c3c <HAL_SPI_Transmit+0x278>
      }
    }
  }

  /* Wait for Tx (and CRC) data to be sent */
  if (SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_EOT, RESET, Timeout, tickstart) != HAL_OK)
 8006d4a:	693b      	ldr	r3, [r7, #16]
 8006d4c:	9300      	str	r3, [sp, #0]
 8006d4e:	683b      	ldr	r3, [r7, #0]
 8006d50:	2200      	movs	r2, #0
 8006d52:	2108      	movs	r1, #8
 8006d54:	68f8      	ldr	r0, [r7, #12]
 8006d56:	f000 fb35 	bl	80073c4 <SPI_WaitOnFlagUntilTimeout>
 8006d5a:	4603      	mov	r3, r0
 8006d5c:	2b00      	cmp	r3, #0
 8006d5e:	d007      	beq.n	8006d70 <HAL_SPI_Transmit+0x3ac>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006d60:	68fb      	ldr	r3, [r7, #12]
 8006d62:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006d66:	f043 0220 	orr.w	r2, r3, #32
 8006d6a:	68fb      	ldr	r3, [r7, #12]
 8006d6c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  }

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 8006d70:	68f8      	ldr	r0, [r7, #12]
 8006d72:	f000 fa87 	bl	8007284 <SPI_CloseTransfer>

  hspi->State = HAL_SPI_STATE_READY;
 8006d76:	68fb      	ldr	r3, [r7, #12]
 8006d78:	2201      	movs	r2, #1
 8006d7a:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8006d7e:	68fb      	ldr	r3, [r7, #12]
 8006d80:	2200      	movs	r2, #0
 8006d82:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006d86:	68fb      	ldr	r3, [r7, #12]
 8006d88:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006d8c:	2b00      	cmp	r3, #0
 8006d8e:	d001      	beq.n	8006d94 <HAL_SPI_Transmit+0x3d0>
  {
    return HAL_ERROR;
 8006d90:	2301      	movs	r3, #1
 8006d92:	e000      	b.n	8006d96 <HAL_SPI_Transmit+0x3d2>
  }
  else
  {
    return HAL_OK;
 8006d94:	2300      	movs	r3, #0
  }
}
 8006d96:	4618      	mov	r0, r3
 8006d98:	3718      	adds	r7, #24
 8006d9a:	46bd      	mov	sp, r7
 8006d9c:	bd80      	pop	{r7, pc}
 8006d9e:	bf00      	nop

08006da0 <HAL_SPI_Receive>:
  * @param  Size   : amount of data to be received
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006da0:	b580      	push	{r7, lr}
 8006da2:	b088      	sub	sp, #32
 8006da4:	af00      	add	r7, sp, #0
 8006da6:	60f8      	str	r0, [r7, #12]
 8006da8:	60b9      	str	r1, [r7, #8]
 8006daa:	603b      	str	r3, [r7, #0]
 8006dac:	4613      	mov	r3, r2
 8006dae:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  uint32_t temp_sr_reg;
  uint16_t init_max_data_in_fifo;
  init_max_data_in_fifo = (((uint16_t)(hspi->Init.FifoThreshold >> 5U) + 1U));
 8006db0:	68fb      	ldr	r3, [r7, #12]
 8006db2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006db4:	095b      	lsrs	r3, r3, #5
 8006db6:	b29b      	uxth	r3, r3
 8006db8:	3301      	adds	r3, #1
 8006dba:	83fb      	strh	r3, [r7, #30]
#if defined (__GNUC__)
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 8006dbc:	68fb      	ldr	r3, [r7, #12]
 8006dbe:	681b      	ldr	r3, [r3, #0]
 8006dc0:	3330      	adds	r3, #48	@ 0x30
 8006dc2:	61bb      	str	r3, [r7, #24]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_RXONLY(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006dc4:	f7fb fc2c 	bl	8002620 <HAL_GetTick>
 8006dc8:	6178      	str	r0, [r7, #20]

  if (hspi->State != HAL_SPI_STATE_READY)
 8006dca:	68fb      	ldr	r3, [r7, #12]
 8006dcc:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 8006dd0:	b2db      	uxtb	r3, r3
 8006dd2:	2b01      	cmp	r3, #1
 8006dd4:	d001      	beq.n	8006dda <HAL_SPI_Receive+0x3a>
  {
    return HAL_BUSY;
 8006dd6:	2302      	movs	r3, #2
 8006dd8:	e250      	b.n	800727c <HAL_SPI_Receive+0x4dc>
  }

  if ((pData == NULL) || (Size == 0UL))
 8006dda:	68bb      	ldr	r3, [r7, #8]
 8006ddc:	2b00      	cmp	r3, #0
 8006dde:	d002      	beq.n	8006de6 <HAL_SPI_Receive+0x46>
 8006de0:	88fb      	ldrh	r3, [r7, #6]
 8006de2:	2b00      	cmp	r3, #0
 8006de4:	d101      	bne.n	8006dea <HAL_SPI_Receive+0x4a>
  {
    return HAL_ERROR;
 8006de6:	2301      	movs	r3, #1
 8006de8:	e248      	b.n	800727c <HAL_SPI_Receive+0x4dc>
  }

  /* Lock the process */
  __HAL_LOCK(hspi);
 8006dea:	68fb      	ldr	r3, [r7, #12]
 8006dec:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 8006df0:	2b01      	cmp	r3, #1
 8006df2:	d101      	bne.n	8006df8 <HAL_SPI_Receive+0x58>
 8006df4:	2302      	movs	r3, #2
 8006df6:	e241      	b.n	800727c <HAL_SPI_Receive+0x4dc>
 8006df8:	68fb      	ldr	r3, [r7, #12]
 8006dfa:	2201      	movs	r2, #1
 8006dfc:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8006e00:	68fb      	ldr	r3, [r7, #12]
 8006e02:	2204      	movs	r2, #4
 8006e04:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006e08:	68fb      	ldr	r3, [r7, #12]
 8006e0a:	2200      	movs	r2, #0
 8006e0c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8006e10:	68fb      	ldr	r3, [r7, #12]
 8006e12:	68ba      	ldr	r2, [r7, #8]
 8006e14:	665a      	str	r2, [r3, #100]	@ 0x64
  hspi->RxXferSize  = Size;
 8006e16:	68fb      	ldr	r3, [r7, #12]
 8006e18:	88fa      	ldrh	r2, [r7, #6]
 8006e1a:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  hspi->RxXferCount = Size;
 8006e1e:	68fb      	ldr	r3, [r7, #12]
 8006e20:	88fa      	ldrh	r2, [r7, #6]
 8006e22:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = NULL;
 8006e26:	68fb      	ldr	r3, [r7, #12]
 8006e28:	2200      	movs	r2, #0
 8006e2a:	65da      	str	r2, [r3, #92]	@ 0x5c
  hspi->TxXferSize  = (uint16_t) 0UL;
 8006e2c:	68fb      	ldr	r3, [r7, #12]
 8006e2e:	2200      	movs	r2, #0
 8006e30:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
  hspi->TxXferCount = (uint16_t) 0UL;
 8006e34:	68fb      	ldr	r3, [r7, #12]
 8006e36:	2200      	movs	r2, #0
 8006e38:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
  hspi->RxISR       = NULL;
 8006e3c:	68fb      	ldr	r3, [r7, #12]
 8006e3e:	2200      	movs	r2, #0
 8006e40:	671a      	str	r2, [r3, #112]	@ 0x70
  hspi->TxISR       = NULL;
 8006e42:	68fb      	ldr	r3, [r7, #12]
 8006e44:	2200      	movs	r2, #0
 8006e46:	675a      	str	r2, [r3, #116]	@ 0x74

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006e48:	68fb      	ldr	r3, [r7, #12]
 8006e4a:	689b      	ldr	r3, [r3, #8]
 8006e4c:	f5b3 2fc0 	cmp.w	r3, #393216	@ 0x60000
 8006e50:	d108      	bne.n	8006e64 <HAL_SPI_Receive+0xc4>
  {
    SPI_1LINE_RX(hspi);
 8006e52:	68fb      	ldr	r3, [r7, #12]
 8006e54:	681b      	ldr	r3, [r3, #0]
 8006e56:	681a      	ldr	r2, [r3, #0]
 8006e58:	68fb      	ldr	r3, [r7, #12]
 8006e5a:	681b      	ldr	r3, [r3, #0]
 8006e5c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8006e60:	601a      	str	r2, [r3, #0]
 8006e62:	e009      	b.n	8006e78 <HAL_SPI_Receive+0xd8>
  }
  else
  {
    SPI_2LINES_RX(hspi);
 8006e64:	68fb      	ldr	r3, [r7, #12]
 8006e66:	681b      	ldr	r3, [r3, #0]
 8006e68:	68db      	ldr	r3, [r3, #12]
 8006e6a:	f423 22c0 	bic.w	r2, r3, #393216	@ 0x60000
 8006e6e:	68fb      	ldr	r3, [r7, #12]
 8006e70:	681b      	ldr	r3, [r3, #0]
 8006e72:	f442 2280 	orr.w	r2, r2, #262144	@ 0x40000
 8006e76:	60da      	str	r2, [r3, #12]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 8006e78:	68fb      	ldr	r3, [r7, #12]
 8006e7a:	681b      	ldr	r3, [r3, #0]
 8006e7c:	685a      	ldr	r2, [r3, #4]
 8006e7e:	4b95      	ldr	r3, [pc, #596]	@ (80070d4 <HAL_SPI_Receive+0x334>)
 8006e80:	4013      	ands	r3, r2
 8006e82:	88f9      	ldrh	r1, [r7, #6]
 8006e84:	68fa      	ldr	r2, [r7, #12]
 8006e86:	6812      	ldr	r2, [r2, #0]
 8006e88:	430b      	orrs	r3, r1
 8006e8a:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 8006e8c:	68fb      	ldr	r3, [r7, #12]
 8006e8e:	681b      	ldr	r3, [r3, #0]
 8006e90:	681a      	ldr	r2, [r3, #0]
 8006e92:	68fb      	ldr	r3, [r7, #12]
 8006e94:	681b      	ldr	r3, [r3, #0]
 8006e96:	f042 0201 	orr.w	r2, r2, #1
 8006e9a:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006e9c:	68fb      	ldr	r3, [r7, #12]
 8006e9e:	685b      	ldr	r3, [r3, #4]
 8006ea0:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8006ea4:	d107      	bne.n	8006eb6 <HAL_SPI_Receive+0x116>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 8006ea6:	68fb      	ldr	r3, [r7, #12]
 8006ea8:	681b      	ldr	r3, [r3, #0]
 8006eaa:	681a      	ldr	r2, [r3, #0]
 8006eac:	68fb      	ldr	r3, [r7, #12]
 8006eae:	681b      	ldr	r3, [r3, #0]
 8006eb0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006eb4:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 8006eb6:	68fb      	ldr	r3, [r7, #12]
 8006eb8:	68db      	ldr	r3, [r3, #12]
 8006eba:	2b0f      	cmp	r3, #15
 8006ebc:	d96c      	bls.n	8006f98 <HAL_SPI_Receive+0x1f8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
 8006ebe:	e064      	b.n	8006f8a <HAL_SPI_Receive+0x1ea>
    {
      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 8006ec0:	68fb      	ldr	r3, [r7, #12]
 8006ec2:	681b      	ldr	r3, [r3, #0]
 8006ec4:	695b      	ldr	r3, [r3, #20]
 8006ec6:	613b      	str	r3, [r7, #16]

      /* Check the RXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 8006ec8:	68fb      	ldr	r3, [r7, #12]
 8006eca:	681b      	ldr	r3, [r3, #0]
 8006ecc:	695b      	ldr	r3, [r3, #20]
 8006ece:	f003 0301 	and.w	r3, r3, #1
 8006ed2:	2b01      	cmp	r3, #1
 8006ed4:	d114      	bne.n	8006f00 <HAL_SPI_Receive+0x160>
      {
        *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 8006ed6:	68fb      	ldr	r3, [r7, #12]
 8006ed8:	681a      	ldr	r2, [r3, #0]
 8006eda:	68fb      	ldr	r3, [r7, #12]
 8006edc:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006ede:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8006ee0:	601a      	str	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint32_t);
 8006ee2:	68fb      	ldr	r3, [r7, #12]
 8006ee4:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006ee6:	1d1a      	adds	r2, r3, #4
 8006ee8:	68fb      	ldr	r3, [r7, #12]
 8006eea:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount--;
 8006eec:	68fb      	ldr	r3, [r7, #12]
 8006eee:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8006ef2:	b29b      	uxth	r3, r3
 8006ef4:	3b01      	subs	r3, #1
 8006ef6:	b29a      	uxth	r2, r3
 8006ef8:	68fb      	ldr	r3, [r7, #12]
 8006efa:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 8006efe:	e044      	b.n	8006f8a <HAL_SPI_Receive+0x1ea>
      }
      /* Check RXWNE flag if RXP cannot be reached */
      else if ((hspi->RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 8006f00:	68fb      	ldr	r3, [r7, #12]
 8006f02:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8006f06:	b29b      	uxth	r3, r3
 8006f08:	8bfa      	ldrh	r2, [r7, #30]
 8006f0a:	429a      	cmp	r2, r3
 8006f0c:	d919      	bls.n	8006f42 <HAL_SPI_Receive+0x1a2>
 8006f0e:	693b      	ldr	r3, [r7, #16]
 8006f10:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8006f14:	2b00      	cmp	r3, #0
 8006f16:	d014      	beq.n	8006f42 <HAL_SPI_Receive+0x1a2>
      {
        *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 8006f18:	68fb      	ldr	r3, [r7, #12]
 8006f1a:	681a      	ldr	r2, [r3, #0]
 8006f1c:	68fb      	ldr	r3, [r7, #12]
 8006f1e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006f20:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8006f22:	601a      	str	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint32_t);
 8006f24:	68fb      	ldr	r3, [r7, #12]
 8006f26:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006f28:	1d1a      	adds	r2, r3, #4
 8006f2a:	68fb      	ldr	r3, [r7, #12]
 8006f2c:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount--;
 8006f2e:	68fb      	ldr	r3, [r7, #12]
 8006f30:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8006f34:	b29b      	uxth	r3, r3
 8006f36:	3b01      	subs	r3, #1
 8006f38:	b29a      	uxth	r2, r3
 8006f3a:	68fb      	ldr	r3, [r7, #12]
 8006f3c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 8006f40:	e023      	b.n	8006f8a <HAL_SPI_Receive+0x1ea>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006f42:	f7fb fb6d 	bl	8002620 <HAL_GetTick>
 8006f46:	4602      	mov	r2, r0
 8006f48:	697b      	ldr	r3, [r7, #20]
 8006f4a:	1ad3      	subs	r3, r2, r3
 8006f4c:	683a      	ldr	r2, [r7, #0]
 8006f4e:	429a      	cmp	r2, r3
 8006f50:	d803      	bhi.n	8006f5a <HAL_SPI_Receive+0x1ba>
 8006f52:	683b      	ldr	r3, [r7, #0]
 8006f54:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006f58:	d102      	bne.n	8006f60 <HAL_SPI_Receive+0x1c0>
 8006f5a:	683b      	ldr	r3, [r7, #0]
 8006f5c:	2b00      	cmp	r3, #0
 8006f5e:	d114      	bne.n	8006f8a <HAL_SPI_Receive+0x1ea>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8006f60:	68f8      	ldr	r0, [r7, #12]
 8006f62:	f000 f98f 	bl	8007284 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8006f66:	68fb      	ldr	r3, [r7, #12]
 8006f68:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006f6c:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8006f70:	68fb      	ldr	r3, [r7, #12]
 8006f72:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8006f76:	68fb      	ldr	r3, [r7, #12]
 8006f78:	2201      	movs	r2, #1
 8006f7a:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8006f7e:	68fb      	ldr	r3, [r7, #12]
 8006f80:	2200      	movs	r2, #0
 8006f82:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 8006f86:	2303      	movs	r3, #3
 8006f88:	e178      	b.n	800727c <HAL_SPI_Receive+0x4dc>
    while (hspi->RxXferCount > 0UL)
 8006f8a:	68fb      	ldr	r3, [r7, #12]
 8006f8c:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8006f90:	b29b      	uxth	r3, r3
 8006f92:	2b00      	cmp	r3, #0
 8006f94:	d194      	bne.n	8006ec0 <HAL_SPI_Receive+0x120>
 8006f96:	e15e      	b.n	8007256 <HAL_SPI_Receive+0x4b6>
        }
      }
    }
  }
  /* Receive data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8006f98:	68fb      	ldr	r3, [r7, #12]
 8006f9a:	68db      	ldr	r3, [r3, #12]
 8006f9c:	2b07      	cmp	r3, #7
 8006f9e:	f240 8153 	bls.w	8007248 <HAL_SPI_Receive+0x4a8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
 8006fa2:	e08f      	b.n	80070c4 <HAL_SPI_Receive+0x324>
    {
      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 8006fa4:	68fb      	ldr	r3, [r7, #12]
 8006fa6:	681b      	ldr	r3, [r3, #0]
 8006fa8:	695b      	ldr	r3, [r3, #20]
 8006faa:	613b      	str	r3, [r7, #16]

      /* Check the RXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 8006fac:	68fb      	ldr	r3, [r7, #12]
 8006fae:	681b      	ldr	r3, [r3, #0]
 8006fb0:	695b      	ldr	r3, [r3, #20]
 8006fb2:	f003 0301 	and.w	r3, r3, #1
 8006fb6:	2b01      	cmp	r3, #1
 8006fb8:	d114      	bne.n	8006fe4 <HAL_SPI_Receive+0x244>
      {
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 8006fba:	68fb      	ldr	r3, [r7, #12]
 8006fbc:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006fbe:	69ba      	ldr	r2, [r7, #24]
 8006fc0:	8812      	ldrh	r2, [r2, #0]
 8006fc2:	b292      	uxth	r2, r2
 8006fc4:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8006fc6:	68fb      	ldr	r3, [r7, #12]
 8006fc8:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006fca:	1c9a      	adds	r2, r3, #2
 8006fcc:	68fb      	ldr	r3, [r7, #12]
 8006fce:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount--;
 8006fd0:	68fb      	ldr	r3, [r7, #12]
 8006fd2:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8006fd6:	b29b      	uxth	r3, r3
 8006fd8:	3b01      	subs	r3, #1
 8006fda:	b29a      	uxth	r2, r3
 8006fdc:	68fb      	ldr	r3, [r7, #12]
 8006fde:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 8006fe2:	e06f      	b.n	80070c4 <HAL_SPI_Receive+0x324>
      }
      /* Check RXWNE flag if RXP cannot be reached */
      else if ((hspi->RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 8006fe4:	68fb      	ldr	r3, [r7, #12]
 8006fe6:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8006fea:	b29b      	uxth	r3, r3
 8006fec:	8bfa      	ldrh	r2, [r7, #30]
 8006fee:	429a      	cmp	r2, r3
 8006ff0:	d924      	bls.n	800703c <HAL_SPI_Receive+0x29c>
 8006ff2:	693b      	ldr	r3, [r7, #16]
 8006ff4:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8006ff8:	2b00      	cmp	r3, #0
 8006ffa:	d01f      	beq.n	800703c <HAL_SPI_Receive+0x29c>
      {
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 8006ffc:	68fb      	ldr	r3, [r7, #12]
 8006ffe:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007000:	69ba      	ldr	r2, [r7, #24]
 8007002:	8812      	ldrh	r2, [r2, #0]
 8007004:	b292      	uxth	r2, r2
 8007006:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8007008:	68fb      	ldr	r3, [r7, #12]
 800700a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800700c:	1c9a      	adds	r2, r3, #2
 800700e:	68fb      	ldr	r3, [r7, #12]
 8007010:	665a      	str	r2, [r3, #100]	@ 0x64
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 8007012:	68fb      	ldr	r3, [r7, #12]
 8007014:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007016:	69ba      	ldr	r2, [r7, #24]
 8007018:	8812      	ldrh	r2, [r2, #0]
 800701a:	b292      	uxth	r2, r2
 800701c:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800701e:	68fb      	ldr	r3, [r7, #12]
 8007020:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007022:	1c9a      	adds	r2, r3, #2
 8007024:	68fb      	ldr	r3, [r7, #12]
 8007026:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount -= (uint16_t)2UL;
 8007028:	68fb      	ldr	r3, [r7, #12]
 800702a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800702e:	b29b      	uxth	r3, r3
 8007030:	3b02      	subs	r3, #2
 8007032:	b29a      	uxth	r2, r3
 8007034:	68fb      	ldr	r3, [r7, #12]
 8007036:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 800703a:	e043      	b.n	80070c4 <HAL_SPI_Receive+0x324>
      }
      /* Check RXPLVL flags when RXWNE cannot be reached */
      else if ((hspi->RxXferCount == 1UL) && ((temp_sr_reg & SPI_SR_RXPLVL_0) != 0UL))
 800703c:	68fb      	ldr	r3, [r7, #12]
 800703e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8007042:	b29b      	uxth	r3, r3
 8007044:	2b01      	cmp	r3, #1
 8007046:	d119      	bne.n	800707c <HAL_SPI_Receive+0x2dc>
 8007048:	693b      	ldr	r3, [r7, #16]
 800704a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800704e:	2b00      	cmp	r3, #0
 8007050:	d014      	beq.n	800707c <HAL_SPI_Receive+0x2dc>
      {
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 8007052:	68fb      	ldr	r3, [r7, #12]
 8007054:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007056:	69ba      	ldr	r2, [r7, #24]
 8007058:	8812      	ldrh	r2, [r2, #0]
 800705a:	b292      	uxth	r2, r2
 800705c:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800705e:	68fb      	ldr	r3, [r7, #12]
 8007060:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007062:	1c9a      	adds	r2, r3, #2
 8007064:	68fb      	ldr	r3, [r7, #12]
 8007066:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount--;
 8007068:	68fb      	ldr	r3, [r7, #12]
 800706a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800706e:	b29b      	uxth	r3, r3
 8007070:	3b01      	subs	r3, #1
 8007072:	b29a      	uxth	r2, r3
 8007074:	68fb      	ldr	r3, [r7, #12]
 8007076:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 800707a:	e023      	b.n	80070c4 <HAL_SPI_Receive+0x324>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800707c:	f7fb fad0 	bl	8002620 <HAL_GetTick>
 8007080:	4602      	mov	r2, r0
 8007082:	697b      	ldr	r3, [r7, #20]
 8007084:	1ad3      	subs	r3, r2, r3
 8007086:	683a      	ldr	r2, [r7, #0]
 8007088:	429a      	cmp	r2, r3
 800708a:	d803      	bhi.n	8007094 <HAL_SPI_Receive+0x2f4>
 800708c:	683b      	ldr	r3, [r7, #0]
 800708e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007092:	d102      	bne.n	800709a <HAL_SPI_Receive+0x2fa>
 8007094:	683b      	ldr	r3, [r7, #0]
 8007096:	2b00      	cmp	r3, #0
 8007098:	d114      	bne.n	80070c4 <HAL_SPI_Receive+0x324>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800709a:	68f8      	ldr	r0, [r7, #12]
 800709c:	f000 f8f2 	bl	8007284 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 80070a0:	68fb      	ldr	r3, [r7, #12]
 80070a2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80070a6:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80070aa:	68fb      	ldr	r3, [r7, #12]
 80070ac:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 80070b0:	68fb      	ldr	r3, [r7, #12]
 80070b2:	2201      	movs	r2, #1
 80070b4:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 80070b8:	68fb      	ldr	r3, [r7, #12]
 80070ba:	2200      	movs	r2, #0
 80070bc:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 80070c0:	2303      	movs	r3, #3
 80070c2:	e0db      	b.n	800727c <HAL_SPI_Receive+0x4dc>
    while (hspi->RxXferCount > 0UL)
 80070c4:	68fb      	ldr	r3, [r7, #12]
 80070c6:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 80070ca:	b29b      	uxth	r3, r3
 80070cc:	2b00      	cmp	r3, #0
 80070ce:	f47f af69 	bne.w	8006fa4 <HAL_SPI_Receive+0x204>
 80070d2:	e0c0      	b.n	8007256 <HAL_SPI_Receive+0x4b6>
 80070d4:	ffff0000 	.word	0xffff0000
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
    {
      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 80070d8:	68fb      	ldr	r3, [r7, #12]
 80070da:	681b      	ldr	r3, [r3, #0]
 80070dc:	695b      	ldr	r3, [r3, #20]
 80070de:	613b      	str	r3, [r7, #16]

      /* Check the RXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 80070e0:	68fb      	ldr	r3, [r7, #12]
 80070e2:	681b      	ldr	r3, [r3, #0]
 80070e4:	695b      	ldr	r3, [r3, #20]
 80070e6:	f003 0301 	and.w	r3, r3, #1
 80070ea:	2b01      	cmp	r3, #1
 80070ec:	d117      	bne.n	800711e <HAL_SPI_Receive+0x37e>
      {
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 80070ee:	68fb      	ldr	r3, [r7, #12]
 80070f0:	681b      	ldr	r3, [r3, #0]
 80070f2:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 80070f6:	68fb      	ldr	r3, [r7, #12]
 80070f8:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80070fa:	7812      	ldrb	r2, [r2, #0]
 80070fc:	b2d2      	uxtb	r2, r2
 80070fe:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8007100:	68fb      	ldr	r3, [r7, #12]
 8007102:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007104:	1c5a      	adds	r2, r3, #1
 8007106:	68fb      	ldr	r3, [r7, #12]
 8007108:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount--;
 800710a:	68fb      	ldr	r3, [r7, #12]
 800710c:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8007110:	b29b      	uxth	r3, r3
 8007112:	3b01      	subs	r3, #1
 8007114:	b29a      	uxth	r2, r3
 8007116:	68fb      	ldr	r3, [r7, #12]
 8007118:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 800711c:	e094      	b.n	8007248 <HAL_SPI_Receive+0x4a8>
      }
      /* Check RXWNE flag if RXP cannot be reached */
      else if ((hspi->RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 800711e:	68fb      	ldr	r3, [r7, #12]
 8007120:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8007124:	b29b      	uxth	r3, r3
 8007126:	8bfa      	ldrh	r2, [r7, #30]
 8007128:	429a      	cmp	r2, r3
 800712a:	d946      	bls.n	80071ba <HAL_SPI_Receive+0x41a>
 800712c:	693b      	ldr	r3, [r7, #16]
 800712e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8007132:	2b00      	cmp	r3, #0
 8007134:	d041      	beq.n	80071ba <HAL_SPI_Receive+0x41a>
      {
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8007136:	68fb      	ldr	r3, [r7, #12]
 8007138:	681b      	ldr	r3, [r3, #0]
 800713a:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800713e:	68fb      	ldr	r3, [r7, #12]
 8007140:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007142:	7812      	ldrb	r2, [r2, #0]
 8007144:	b2d2      	uxtb	r2, r2
 8007146:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8007148:	68fb      	ldr	r3, [r7, #12]
 800714a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800714c:	1c5a      	adds	r2, r3, #1
 800714e:	68fb      	ldr	r3, [r7, #12]
 8007150:	665a      	str	r2, [r3, #100]	@ 0x64
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8007152:	68fb      	ldr	r3, [r7, #12]
 8007154:	681b      	ldr	r3, [r3, #0]
 8007156:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800715a:	68fb      	ldr	r3, [r7, #12]
 800715c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800715e:	7812      	ldrb	r2, [r2, #0]
 8007160:	b2d2      	uxtb	r2, r2
 8007162:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8007164:	68fb      	ldr	r3, [r7, #12]
 8007166:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007168:	1c5a      	adds	r2, r3, #1
 800716a:	68fb      	ldr	r3, [r7, #12]
 800716c:	665a      	str	r2, [r3, #100]	@ 0x64
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800716e:	68fb      	ldr	r3, [r7, #12]
 8007170:	681b      	ldr	r3, [r3, #0]
 8007172:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8007176:	68fb      	ldr	r3, [r7, #12]
 8007178:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800717a:	7812      	ldrb	r2, [r2, #0]
 800717c:	b2d2      	uxtb	r2, r2
 800717e:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8007180:	68fb      	ldr	r3, [r7, #12]
 8007182:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007184:	1c5a      	adds	r2, r3, #1
 8007186:	68fb      	ldr	r3, [r7, #12]
 8007188:	665a      	str	r2, [r3, #100]	@ 0x64
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800718a:	68fb      	ldr	r3, [r7, #12]
 800718c:	681b      	ldr	r3, [r3, #0]
 800718e:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8007192:	68fb      	ldr	r3, [r7, #12]
 8007194:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007196:	7812      	ldrb	r2, [r2, #0]
 8007198:	b2d2      	uxtb	r2, r2
 800719a:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800719c:	68fb      	ldr	r3, [r7, #12]
 800719e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80071a0:	1c5a      	adds	r2, r3, #1
 80071a2:	68fb      	ldr	r3, [r7, #12]
 80071a4:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount -= (uint16_t)4UL;
 80071a6:	68fb      	ldr	r3, [r7, #12]
 80071a8:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 80071ac:	b29b      	uxth	r3, r3
 80071ae:	3b04      	subs	r3, #4
 80071b0:	b29a      	uxth	r2, r3
 80071b2:	68fb      	ldr	r3, [r7, #12]
 80071b4:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 80071b8:	e046      	b.n	8007248 <HAL_SPI_Receive+0x4a8>
      }
      /* Check RXPLVL flags when RXWNE cannot be reached */
      else if ((hspi->RxXferCount < 4UL) && ((temp_sr_reg & SPI_SR_RXPLVL_Msk) != 0UL))
 80071ba:	68fb      	ldr	r3, [r7, #12]
 80071bc:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 80071c0:	b29b      	uxth	r3, r3
 80071c2:	2b03      	cmp	r3, #3
 80071c4:	d81c      	bhi.n	8007200 <HAL_SPI_Receive+0x460>
 80071c6:	693b      	ldr	r3, [r7, #16]
 80071c8:	f403 43c0 	and.w	r3, r3, #24576	@ 0x6000
 80071cc:	2b00      	cmp	r3, #0
 80071ce:	d017      	beq.n	8007200 <HAL_SPI_Receive+0x460>
      {
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 80071d0:	68fb      	ldr	r3, [r7, #12]
 80071d2:	681b      	ldr	r3, [r3, #0]
 80071d4:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 80071d8:	68fb      	ldr	r3, [r7, #12]
 80071da:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80071dc:	7812      	ldrb	r2, [r2, #0]
 80071de:	b2d2      	uxtb	r2, r2
 80071e0:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 80071e2:	68fb      	ldr	r3, [r7, #12]
 80071e4:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80071e6:	1c5a      	adds	r2, r3, #1
 80071e8:	68fb      	ldr	r3, [r7, #12]
 80071ea:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount--;
 80071ec:	68fb      	ldr	r3, [r7, #12]
 80071ee:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 80071f2:	b29b      	uxth	r3, r3
 80071f4:	3b01      	subs	r3, #1
 80071f6:	b29a      	uxth	r2, r3
 80071f8:	68fb      	ldr	r3, [r7, #12]
 80071fa:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 80071fe:	e023      	b.n	8007248 <HAL_SPI_Receive+0x4a8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007200:	f7fb fa0e 	bl	8002620 <HAL_GetTick>
 8007204:	4602      	mov	r2, r0
 8007206:	697b      	ldr	r3, [r7, #20]
 8007208:	1ad3      	subs	r3, r2, r3
 800720a:	683a      	ldr	r2, [r7, #0]
 800720c:	429a      	cmp	r2, r3
 800720e:	d803      	bhi.n	8007218 <HAL_SPI_Receive+0x478>
 8007210:	683b      	ldr	r3, [r7, #0]
 8007212:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007216:	d102      	bne.n	800721e <HAL_SPI_Receive+0x47e>
 8007218:	683b      	ldr	r3, [r7, #0]
 800721a:	2b00      	cmp	r3, #0
 800721c:	d114      	bne.n	8007248 <HAL_SPI_Receive+0x4a8>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800721e:	68f8      	ldr	r0, [r7, #12]
 8007220:	f000 f830 	bl	8007284 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8007224:	68fb      	ldr	r3, [r7, #12]
 8007226:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800722a:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800722e:	68fb      	ldr	r3, [r7, #12]
 8007230:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8007234:	68fb      	ldr	r3, [r7, #12]
 8007236:	2201      	movs	r2, #1
 8007238:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800723c:	68fb      	ldr	r3, [r7, #12]
 800723e:	2200      	movs	r2, #0
 8007240:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 8007244:	2303      	movs	r3, #3
 8007246:	e019      	b.n	800727c <HAL_SPI_Receive+0x4dc>
    while (hspi->RxXferCount > 0UL)
 8007248:	68fb      	ldr	r3, [r7, #12]
 800724a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800724e:	b29b      	uxth	r3, r3
 8007250:	2b00      	cmp	r3, #0
 8007252:	f47f af41 	bne.w	80070d8 <HAL_SPI_Receive+0x338>
    }
  }
#endif /* USE_SPI_CRC */

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 8007256:	68f8      	ldr	r0, [r7, #12]
 8007258:	f000 f814 	bl	8007284 <SPI_CloseTransfer>

  hspi->State = HAL_SPI_STATE_READY;
 800725c:	68fb      	ldr	r3, [r7, #12]
 800725e:	2201      	movs	r2, #1
 8007260:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8007264:	68fb      	ldr	r3, [r7, #12]
 8007266:	2200      	movs	r2, #0
 8007268:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80


  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800726c:	68fb      	ldr	r3, [r7, #12]
 800726e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007272:	2b00      	cmp	r3, #0
 8007274:	d001      	beq.n	800727a <HAL_SPI_Receive+0x4da>
  {
    return HAL_ERROR;
 8007276:	2301      	movs	r3, #1
 8007278:	e000      	b.n	800727c <HAL_SPI_Receive+0x4dc>
  }
  else
  {
    return HAL_OK;
 800727a:	2300      	movs	r3, #0
  }
}
 800727c:	4618      	mov	r0, r3
 800727e:	3720      	adds	r7, #32
 8007280:	46bd      	mov	sp, r7
 8007282:	bd80      	pop	{r7, pc}

08007284 <SPI_CloseTransfer>:
  *               the configuration information for SPI module.
  * @retval HAL_ERROR: if any error detected
  *         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
 8007284:	b480      	push	{r7}
 8007286:	b085      	sub	sp, #20
 8007288:	af00      	add	r7, sp, #0
 800728a:	6078      	str	r0, [r7, #4]
  uint32_t itflag = hspi->Instance->SR;
 800728c:	687b      	ldr	r3, [r7, #4]
 800728e:	681b      	ldr	r3, [r3, #0]
 8007290:	695b      	ldr	r3, [r3, #20]
 8007292:	60fb      	str	r3, [r7, #12]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 8007294:	687b      	ldr	r3, [r7, #4]
 8007296:	681b      	ldr	r3, [r3, #0]
 8007298:	699a      	ldr	r2, [r3, #24]
 800729a:	687b      	ldr	r3, [r7, #4]
 800729c:	681b      	ldr	r3, [r3, #0]
 800729e:	f042 0208 	orr.w	r2, r2, #8
 80072a2:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 80072a4:	687b      	ldr	r3, [r7, #4]
 80072a6:	681b      	ldr	r3, [r3, #0]
 80072a8:	699a      	ldr	r2, [r3, #24]
 80072aa:	687b      	ldr	r3, [r7, #4]
 80072ac:	681b      	ldr	r3, [r3, #0]
 80072ae:	f042 0210 	orr.w	r2, r2, #16
 80072b2:	619a      	str	r2, [r3, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80072b4:	687b      	ldr	r3, [r7, #4]
 80072b6:	681b      	ldr	r3, [r3, #0]
 80072b8:	681a      	ldr	r2, [r3, #0]
 80072ba:	687b      	ldr	r3, [r7, #4]
 80072bc:	681b      	ldr	r3, [r3, #0]
 80072be:	f022 0201 	bic.w	r2, r2, #1
 80072c2:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | \
 80072c4:	687b      	ldr	r3, [r7, #4]
 80072c6:	681b      	ldr	r3, [r3, #0]
 80072c8:	6919      	ldr	r1, [r3, #16]
 80072ca:	687b      	ldr	r3, [r7, #4]
 80072cc:	681a      	ldr	r2, [r3, #0]
 80072ce:	4b3c      	ldr	r3, [pc, #240]	@ (80073c0 <SPI_CloseTransfer+0x13c>)
 80072d0:	400b      	ands	r3, r1
 80072d2:	6113      	str	r3, [r2, #16]
                              SPI_IT_FRE | SPI_IT_MODF));

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 80072d4:	687b      	ldr	r3, [r7, #4]
 80072d6:	681b      	ldr	r3, [r3, #0]
 80072d8:	689a      	ldr	r2, [r3, #8]
 80072da:	687b      	ldr	r3, [r7, #4]
 80072dc:	681b      	ldr	r3, [r3, #0]
 80072de:	f422 4240 	bic.w	r2, r2, #49152	@ 0xc000
 80072e2:	609a      	str	r2, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80072e4:	687b      	ldr	r3, [r7, #4]
 80072e6:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 80072ea:	b2db      	uxtb	r3, r3
 80072ec:	2b04      	cmp	r3, #4
 80072ee:	d014      	beq.n	800731a <SPI_CloseTransfer+0x96>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 80072f0:	68fb      	ldr	r3, [r7, #12]
 80072f2:	f003 0320 	and.w	r3, r3, #32
 80072f6:	2b00      	cmp	r3, #0
 80072f8:	d00f      	beq.n	800731a <SPI_CloseTransfer+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 80072fa:	687b      	ldr	r3, [r7, #4]
 80072fc:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007300:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8007304:	687b      	ldr	r3, [r7, #4]
 8007306:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 800730a:	687b      	ldr	r3, [r7, #4]
 800730c:	681b      	ldr	r3, [r3, #0]
 800730e:	699a      	ldr	r2, [r3, #24]
 8007310:	687b      	ldr	r3, [r7, #4]
 8007312:	681b      	ldr	r3, [r3, #0]
 8007314:	f042 0220 	orr.w	r2, r2, #32
 8007318:	619a      	str	r2, [r3, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 800731a:	687b      	ldr	r3, [r7, #4]
 800731c:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 8007320:	b2db      	uxtb	r3, r3
 8007322:	2b03      	cmp	r3, #3
 8007324:	d014      	beq.n	8007350 <SPI_CloseTransfer+0xcc>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 8007326:	68fb      	ldr	r3, [r7, #12]
 8007328:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800732c:	2b00      	cmp	r3, #0
 800732e:	d00f      	beq.n	8007350 <SPI_CloseTransfer+0xcc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8007330:	687b      	ldr	r3, [r7, #4]
 8007332:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007336:	f043 0204 	orr.w	r2, r3, #4
 800733a:	687b      	ldr	r3, [r7, #4]
 800733c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8007340:	687b      	ldr	r3, [r7, #4]
 8007342:	681b      	ldr	r3, [r3, #0]
 8007344:	699a      	ldr	r2, [r3, #24]
 8007346:	687b      	ldr	r3, [r7, #4]
 8007348:	681b      	ldr	r3, [r3, #0]
 800734a:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800734e:	619a      	str	r2, [r3, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 8007350:	68fb      	ldr	r3, [r7, #12]
 8007352:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8007356:	2b00      	cmp	r3, #0
 8007358:	d00f      	beq.n	800737a <SPI_CloseTransfer+0xf6>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800735a:	687b      	ldr	r3, [r7, #4]
 800735c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007360:	f043 0201 	orr.w	r2, r3, #1
 8007364:	687b      	ldr	r3, [r7, #4]
 8007366:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800736a:	687b      	ldr	r3, [r7, #4]
 800736c:	681b      	ldr	r3, [r3, #0]
 800736e:	699a      	ldr	r2, [r3, #24]
 8007370:	687b      	ldr	r3, [r7, #4]
 8007372:	681b      	ldr	r3, [r3, #0]
 8007374:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8007378:	619a      	str	r2, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 800737a:	68fb      	ldr	r3, [r7, #12]
 800737c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007380:	2b00      	cmp	r3, #0
 8007382:	d00f      	beq.n	80073a4 <SPI_CloseTransfer+0x120>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8007384:	687b      	ldr	r3, [r7, #4]
 8007386:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800738a:	f043 0208 	orr.w	r2, r3, #8
 800738e:	687b      	ldr	r3, [r7, #4]
 8007390:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 8007394:	687b      	ldr	r3, [r7, #4]
 8007396:	681b      	ldr	r3, [r3, #0]
 8007398:	699a      	ldr	r2, [r3, #24]
 800739a:	687b      	ldr	r3, [r7, #4]
 800739c:	681b      	ldr	r3, [r3, #0]
 800739e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80073a2:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 80073a4:	687b      	ldr	r3, [r7, #4]
 80073a6:	2200      	movs	r2, #0
 80073a8:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
  hspi->RxXferCount = (uint16_t)0UL;
 80073ac:	687b      	ldr	r3, [r7, #4]
 80073ae:	2200      	movs	r2, #0
 80073b0:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
}
 80073b4:	bf00      	nop
 80073b6:	3714      	adds	r7, #20
 80073b8:	46bd      	mov	sp, r7
 80073ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073be:	4770      	bx	lr
 80073c0:	fffffc90 	.word	0xfffffc90

080073c4 <SPI_WaitOnFlagUntilTimeout>:
  * @param Tickstart: Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitOnFlagUntilTimeout(const SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 80073c4:	b580      	push	{r7, lr}
 80073c6:	b084      	sub	sp, #16
 80073c8:	af00      	add	r7, sp, #0
 80073ca:	60f8      	str	r0, [r7, #12]
 80073cc:	60b9      	str	r1, [r7, #8]
 80073ce:	603b      	str	r3, [r7, #0]
 80073d0:	4613      	mov	r3, r2
 80073d2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 80073d4:	e010      	b.n	80073f8 <SPI_WaitOnFlagUntilTimeout+0x34>
  {
    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80073d6:	f7fb f923 	bl	8002620 <HAL_GetTick>
 80073da:	4602      	mov	r2, r0
 80073dc:	69bb      	ldr	r3, [r7, #24]
 80073de:	1ad3      	subs	r3, r2, r3
 80073e0:	683a      	ldr	r2, [r7, #0]
 80073e2:	429a      	cmp	r2, r3
 80073e4:	d803      	bhi.n	80073ee <SPI_WaitOnFlagUntilTimeout+0x2a>
 80073e6:	683b      	ldr	r3, [r7, #0]
 80073e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80073ec:	d102      	bne.n	80073f4 <SPI_WaitOnFlagUntilTimeout+0x30>
 80073ee:	683b      	ldr	r3, [r7, #0]
 80073f0:	2b00      	cmp	r3, #0
 80073f2:	d101      	bne.n	80073f8 <SPI_WaitOnFlagUntilTimeout+0x34>
    {
      return HAL_TIMEOUT;
 80073f4:	2303      	movs	r3, #3
 80073f6:	e00f      	b.n	8007418 <SPI_WaitOnFlagUntilTimeout+0x54>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 80073f8:	68fb      	ldr	r3, [r7, #12]
 80073fa:	681b      	ldr	r3, [r3, #0]
 80073fc:	695a      	ldr	r2, [r3, #20]
 80073fe:	68bb      	ldr	r3, [r7, #8]
 8007400:	4013      	ands	r3, r2
 8007402:	68ba      	ldr	r2, [r7, #8]
 8007404:	429a      	cmp	r2, r3
 8007406:	bf0c      	ite	eq
 8007408:	2301      	moveq	r3, #1
 800740a:	2300      	movne	r3, #0
 800740c:	b2db      	uxtb	r3, r3
 800740e:	461a      	mov	r2, r3
 8007410:	79fb      	ldrb	r3, [r7, #7]
 8007412:	429a      	cmp	r2, r3
 8007414:	d0df      	beq.n	80073d6 <SPI_WaitOnFlagUntilTimeout+0x12>
    }
  }
  return HAL_OK;
 8007416:	2300      	movs	r3, #0
}
 8007418:	4618      	mov	r0, r3
 800741a:	3710      	adds	r7, #16
 800741c:	46bd      	mov	sp, r7
 800741e:	bd80      	pop	{r7, pc}

08007420 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(const SPI_HandleTypeDef *hspi)
{
 8007420:	b480      	push	{r7}
 8007422:	b085      	sub	sp, #20
 8007424:	af00      	add	r7, sp, #0
 8007426:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 8007428:	687b      	ldr	r3, [r7, #4]
 800742a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800742c:	095b      	lsrs	r3, r3, #5
 800742e:	3301      	adds	r3, #1
 8007430:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 8007432:	687b      	ldr	r3, [r7, #4]
 8007434:	68db      	ldr	r3, [r3, #12]
 8007436:	3301      	adds	r3, #1
 8007438:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 800743a:	68bb      	ldr	r3, [r7, #8]
 800743c:	3307      	adds	r3, #7
 800743e:	08db      	lsrs	r3, r3, #3
 8007440:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 8007442:	68bb      	ldr	r3, [r7, #8]
 8007444:	68fa      	ldr	r2, [r7, #12]
 8007446:	fb02 f303 	mul.w	r3, r2, r3
}
 800744a:	4618      	mov	r0, r3
 800744c:	3714      	adds	r7, #20
 800744e:	46bd      	mov	sp, r7
 8007450:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007454:	4770      	bx	lr

08007456 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8007456:	b580      	push	{r7, lr}
 8007458:	b082      	sub	sp, #8
 800745a:	af00      	add	r7, sp, #0
 800745c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800745e:	687b      	ldr	r3, [r7, #4]
 8007460:	2b00      	cmp	r3, #0
 8007462:	d101      	bne.n	8007468 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8007464:	2301      	movs	r3, #1
 8007466:	e049      	b.n	80074fc <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007468:	687b      	ldr	r3, [r7, #4]
 800746a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800746e:	b2db      	uxtb	r3, r3
 8007470:	2b00      	cmp	r3, #0
 8007472:	d106      	bne.n	8007482 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007474:	687b      	ldr	r3, [r7, #4]
 8007476:	2200      	movs	r2, #0
 8007478:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800747c:	6878      	ldr	r0, [r7, #4]
 800747e:	f000 f841 	bl	8007504 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007482:	687b      	ldr	r3, [r7, #4]
 8007484:	2202      	movs	r2, #2
 8007486:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800748a:	687b      	ldr	r3, [r7, #4]
 800748c:	681a      	ldr	r2, [r3, #0]
 800748e:	687b      	ldr	r3, [r7, #4]
 8007490:	3304      	adds	r3, #4
 8007492:	4619      	mov	r1, r3
 8007494:	4610      	mov	r0, r2
 8007496:	f000 f9f5 	bl	8007884 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800749a:	687b      	ldr	r3, [r7, #4]
 800749c:	2201      	movs	r2, #1
 800749e:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80074a2:	687b      	ldr	r3, [r7, #4]
 80074a4:	2201      	movs	r2, #1
 80074a6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80074aa:	687b      	ldr	r3, [r7, #4]
 80074ac:	2201      	movs	r2, #1
 80074ae:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80074b2:	687b      	ldr	r3, [r7, #4]
 80074b4:	2201      	movs	r2, #1
 80074b6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80074ba:	687b      	ldr	r3, [r7, #4]
 80074bc:	2201      	movs	r2, #1
 80074be:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80074c2:	687b      	ldr	r3, [r7, #4]
 80074c4:	2201      	movs	r2, #1
 80074c6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80074ca:	687b      	ldr	r3, [r7, #4]
 80074cc:	2201      	movs	r2, #1
 80074ce:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80074d2:	687b      	ldr	r3, [r7, #4]
 80074d4:	2201      	movs	r2, #1
 80074d6:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80074da:	687b      	ldr	r3, [r7, #4]
 80074dc:	2201      	movs	r2, #1
 80074de:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80074e2:	687b      	ldr	r3, [r7, #4]
 80074e4:	2201      	movs	r2, #1
 80074e6:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80074ea:	687b      	ldr	r3, [r7, #4]
 80074ec:	2201      	movs	r2, #1
 80074ee:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80074f2:	687b      	ldr	r3, [r7, #4]
 80074f4:	2201      	movs	r2, #1
 80074f6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80074fa:	2300      	movs	r3, #0
}
 80074fc:	4618      	mov	r0, r3
 80074fe:	3708      	adds	r7, #8
 8007500:	46bd      	mov	sp, r7
 8007502:	bd80      	pop	{r7, pc}

08007504 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8007504:	b480      	push	{r7}
 8007506:	b083      	sub	sp, #12
 8007508:	af00      	add	r7, sp, #0
 800750a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800750c:	bf00      	nop
 800750e:	370c      	adds	r7, #12
 8007510:	46bd      	mov	sp, r7
 8007512:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007516:	4770      	bx	lr

08007518 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8007518:	b480      	push	{r7}
 800751a:	b085      	sub	sp, #20
 800751c:	af00      	add	r7, sp, #0
 800751e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8007520:	687b      	ldr	r3, [r7, #4]
 8007522:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007526:	b2db      	uxtb	r3, r3
 8007528:	2b01      	cmp	r3, #1
 800752a:	d001      	beq.n	8007530 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800752c:	2301      	movs	r3, #1
 800752e:	e05e      	b.n	80075ee <HAL_TIM_Base_Start_IT+0xd6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007530:	687b      	ldr	r3, [r7, #4]
 8007532:	2202      	movs	r2, #2
 8007534:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8007538:	687b      	ldr	r3, [r7, #4]
 800753a:	681b      	ldr	r3, [r3, #0]
 800753c:	68da      	ldr	r2, [r3, #12]
 800753e:	687b      	ldr	r3, [r7, #4]
 8007540:	681b      	ldr	r3, [r3, #0]
 8007542:	f042 0201 	orr.w	r2, r2, #1
 8007546:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007548:	687b      	ldr	r3, [r7, #4]
 800754a:	681b      	ldr	r3, [r3, #0]
 800754c:	4a2b      	ldr	r2, [pc, #172]	@ (80075fc <HAL_TIM_Base_Start_IT+0xe4>)
 800754e:	4293      	cmp	r3, r2
 8007550:	d02c      	beq.n	80075ac <HAL_TIM_Base_Start_IT+0x94>
 8007552:	687b      	ldr	r3, [r7, #4]
 8007554:	681b      	ldr	r3, [r3, #0]
 8007556:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800755a:	d027      	beq.n	80075ac <HAL_TIM_Base_Start_IT+0x94>
 800755c:	687b      	ldr	r3, [r7, #4]
 800755e:	681b      	ldr	r3, [r3, #0]
 8007560:	4a27      	ldr	r2, [pc, #156]	@ (8007600 <HAL_TIM_Base_Start_IT+0xe8>)
 8007562:	4293      	cmp	r3, r2
 8007564:	d022      	beq.n	80075ac <HAL_TIM_Base_Start_IT+0x94>
 8007566:	687b      	ldr	r3, [r7, #4]
 8007568:	681b      	ldr	r3, [r3, #0]
 800756a:	4a26      	ldr	r2, [pc, #152]	@ (8007604 <HAL_TIM_Base_Start_IT+0xec>)
 800756c:	4293      	cmp	r3, r2
 800756e:	d01d      	beq.n	80075ac <HAL_TIM_Base_Start_IT+0x94>
 8007570:	687b      	ldr	r3, [r7, #4]
 8007572:	681b      	ldr	r3, [r3, #0]
 8007574:	4a24      	ldr	r2, [pc, #144]	@ (8007608 <HAL_TIM_Base_Start_IT+0xf0>)
 8007576:	4293      	cmp	r3, r2
 8007578:	d018      	beq.n	80075ac <HAL_TIM_Base_Start_IT+0x94>
 800757a:	687b      	ldr	r3, [r7, #4]
 800757c:	681b      	ldr	r3, [r3, #0]
 800757e:	4a23      	ldr	r2, [pc, #140]	@ (800760c <HAL_TIM_Base_Start_IT+0xf4>)
 8007580:	4293      	cmp	r3, r2
 8007582:	d013      	beq.n	80075ac <HAL_TIM_Base_Start_IT+0x94>
 8007584:	687b      	ldr	r3, [r7, #4]
 8007586:	681b      	ldr	r3, [r3, #0]
 8007588:	4a21      	ldr	r2, [pc, #132]	@ (8007610 <HAL_TIM_Base_Start_IT+0xf8>)
 800758a:	4293      	cmp	r3, r2
 800758c:	d00e      	beq.n	80075ac <HAL_TIM_Base_Start_IT+0x94>
 800758e:	687b      	ldr	r3, [r7, #4]
 8007590:	681b      	ldr	r3, [r3, #0]
 8007592:	4a20      	ldr	r2, [pc, #128]	@ (8007614 <HAL_TIM_Base_Start_IT+0xfc>)
 8007594:	4293      	cmp	r3, r2
 8007596:	d009      	beq.n	80075ac <HAL_TIM_Base_Start_IT+0x94>
 8007598:	687b      	ldr	r3, [r7, #4]
 800759a:	681b      	ldr	r3, [r3, #0]
 800759c:	4a1e      	ldr	r2, [pc, #120]	@ (8007618 <HAL_TIM_Base_Start_IT+0x100>)
 800759e:	4293      	cmp	r3, r2
 80075a0:	d004      	beq.n	80075ac <HAL_TIM_Base_Start_IT+0x94>
 80075a2:	687b      	ldr	r3, [r7, #4]
 80075a4:	681b      	ldr	r3, [r3, #0]
 80075a6:	4a1d      	ldr	r2, [pc, #116]	@ (800761c <HAL_TIM_Base_Start_IT+0x104>)
 80075a8:	4293      	cmp	r3, r2
 80075aa:	d115      	bne.n	80075d8 <HAL_TIM_Base_Start_IT+0xc0>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80075ac:	687b      	ldr	r3, [r7, #4]
 80075ae:	681b      	ldr	r3, [r3, #0]
 80075b0:	689a      	ldr	r2, [r3, #8]
 80075b2:	4b1b      	ldr	r3, [pc, #108]	@ (8007620 <HAL_TIM_Base_Start_IT+0x108>)
 80075b4:	4013      	ands	r3, r2
 80075b6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80075b8:	68fb      	ldr	r3, [r7, #12]
 80075ba:	2b06      	cmp	r3, #6
 80075bc:	d015      	beq.n	80075ea <HAL_TIM_Base_Start_IT+0xd2>
 80075be:	68fb      	ldr	r3, [r7, #12]
 80075c0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80075c4:	d011      	beq.n	80075ea <HAL_TIM_Base_Start_IT+0xd2>
    {
      __HAL_TIM_ENABLE(htim);
 80075c6:	687b      	ldr	r3, [r7, #4]
 80075c8:	681b      	ldr	r3, [r3, #0]
 80075ca:	681a      	ldr	r2, [r3, #0]
 80075cc:	687b      	ldr	r3, [r7, #4]
 80075ce:	681b      	ldr	r3, [r3, #0]
 80075d0:	f042 0201 	orr.w	r2, r2, #1
 80075d4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80075d6:	e008      	b.n	80075ea <HAL_TIM_Base_Start_IT+0xd2>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80075d8:	687b      	ldr	r3, [r7, #4]
 80075da:	681b      	ldr	r3, [r3, #0]
 80075dc:	681a      	ldr	r2, [r3, #0]
 80075de:	687b      	ldr	r3, [r7, #4]
 80075e0:	681b      	ldr	r3, [r3, #0]
 80075e2:	f042 0201 	orr.w	r2, r2, #1
 80075e6:	601a      	str	r2, [r3, #0]
 80075e8:	e000      	b.n	80075ec <HAL_TIM_Base_Start_IT+0xd4>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80075ea:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80075ec:	2300      	movs	r3, #0
}
 80075ee:	4618      	mov	r0, r3
 80075f0:	3714      	adds	r7, #20
 80075f2:	46bd      	mov	sp, r7
 80075f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075f8:	4770      	bx	lr
 80075fa:	bf00      	nop
 80075fc:	40010000 	.word	0x40010000
 8007600:	40000400 	.word	0x40000400
 8007604:	40000800 	.word	0x40000800
 8007608:	40000c00 	.word	0x40000c00
 800760c:	40010400 	.word	0x40010400
 8007610:	40001800 	.word	0x40001800
 8007614:	40014000 	.word	0x40014000
 8007618:	4000e000 	.word	0x4000e000
 800761c:	4000e400 	.word	0x4000e400
 8007620:	00010007 	.word	0x00010007

08007624 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8007624:	b580      	push	{r7, lr}
 8007626:	b084      	sub	sp, #16
 8007628:	af00      	add	r7, sp, #0
 800762a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800762c:	687b      	ldr	r3, [r7, #4]
 800762e:	681b      	ldr	r3, [r3, #0]
 8007630:	68db      	ldr	r3, [r3, #12]
 8007632:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8007634:	687b      	ldr	r3, [r7, #4]
 8007636:	681b      	ldr	r3, [r3, #0]
 8007638:	691b      	ldr	r3, [r3, #16]
 800763a:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800763c:	68bb      	ldr	r3, [r7, #8]
 800763e:	f003 0302 	and.w	r3, r3, #2
 8007642:	2b00      	cmp	r3, #0
 8007644:	d020      	beq.n	8007688 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8007646:	68fb      	ldr	r3, [r7, #12]
 8007648:	f003 0302 	and.w	r3, r3, #2
 800764c:	2b00      	cmp	r3, #0
 800764e:	d01b      	beq.n	8007688 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8007650:	687b      	ldr	r3, [r7, #4]
 8007652:	681b      	ldr	r3, [r3, #0]
 8007654:	f06f 0202 	mvn.w	r2, #2
 8007658:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800765a:	687b      	ldr	r3, [r7, #4]
 800765c:	2201      	movs	r2, #1
 800765e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8007660:	687b      	ldr	r3, [r7, #4]
 8007662:	681b      	ldr	r3, [r3, #0]
 8007664:	699b      	ldr	r3, [r3, #24]
 8007666:	f003 0303 	and.w	r3, r3, #3
 800766a:	2b00      	cmp	r3, #0
 800766c:	d003      	beq.n	8007676 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800766e:	6878      	ldr	r0, [r7, #4]
 8007670:	f000 f8e9 	bl	8007846 <HAL_TIM_IC_CaptureCallback>
 8007674:	e005      	b.n	8007682 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8007676:	6878      	ldr	r0, [r7, #4]
 8007678:	f000 f8db 	bl	8007832 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800767c:	6878      	ldr	r0, [r7, #4]
 800767e:	f000 f8ec 	bl	800785a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007682:	687b      	ldr	r3, [r7, #4]
 8007684:	2200      	movs	r2, #0
 8007686:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8007688:	68bb      	ldr	r3, [r7, #8]
 800768a:	f003 0304 	and.w	r3, r3, #4
 800768e:	2b00      	cmp	r3, #0
 8007690:	d020      	beq.n	80076d4 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8007692:	68fb      	ldr	r3, [r7, #12]
 8007694:	f003 0304 	and.w	r3, r3, #4
 8007698:	2b00      	cmp	r3, #0
 800769a:	d01b      	beq.n	80076d4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800769c:	687b      	ldr	r3, [r7, #4]
 800769e:	681b      	ldr	r3, [r3, #0]
 80076a0:	f06f 0204 	mvn.w	r2, #4
 80076a4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80076a6:	687b      	ldr	r3, [r7, #4]
 80076a8:	2202      	movs	r2, #2
 80076aa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80076ac:	687b      	ldr	r3, [r7, #4]
 80076ae:	681b      	ldr	r3, [r3, #0]
 80076b0:	699b      	ldr	r3, [r3, #24]
 80076b2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80076b6:	2b00      	cmp	r3, #0
 80076b8:	d003      	beq.n	80076c2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80076ba:	6878      	ldr	r0, [r7, #4]
 80076bc:	f000 f8c3 	bl	8007846 <HAL_TIM_IC_CaptureCallback>
 80076c0:	e005      	b.n	80076ce <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80076c2:	6878      	ldr	r0, [r7, #4]
 80076c4:	f000 f8b5 	bl	8007832 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80076c8:	6878      	ldr	r0, [r7, #4]
 80076ca:	f000 f8c6 	bl	800785a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80076ce:	687b      	ldr	r3, [r7, #4]
 80076d0:	2200      	movs	r2, #0
 80076d2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80076d4:	68bb      	ldr	r3, [r7, #8]
 80076d6:	f003 0308 	and.w	r3, r3, #8
 80076da:	2b00      	cmp	r3, #0
 80076dc:	d020      	beq.n	8007720 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80076de:	68fb      	ldr	r3, [r7, #12]
 80076e0:	f003 0308 	and.w	r3, r3, #8
 80076e4:	2b00      	cmp	r3, #0
 80076e6:	d01b      	beq.n	8007720 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80076e8:	687b      	ldr	r3, [r7, #4]
 80076ea:	681b      	ldr	r3, [r3, #0]
 80076ec:	f06f 0208 	mvn.w	r2, #8
 80076f0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80076f2:	687b      	ldr	r3, [r7, #4]
 80076f4:	2204      	movs	r2, #4
 80076f6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80076f8:	687b      	ldr	r3, [r7, #4]
 80076fa:	681b      	ldr	r3, [r3, #0]
 80076fc:	69db      	ldr	r3, [r3, #28]
 80076fe:	f003 0303 	and.w	r3, r3, #3
 8007702:	2b00      	cmp	r3, #0
 8007704:	d003      	beq.n	800770e <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007706:	6878      	ldr	r0, [r7, #4]
 8007708:	f000 f89d 	bl	8007846 <HAL_TIM_IC_CaptureCallback>
 800770c:	e005      	b.n	800771a <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800770e:	6878      	ldr	r0, [r7, #4]
 8007710:	f000 f88f 	bl	8007832 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007714:	6878      	ldr	r0, [r7, #4]
 8007716:	f000 f8a0 	bl	800785a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800771a:	687b      	ldr	r3, [r7, #4]
 800771c:	2200      	movs	r2, #0
 800771e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8007720:	68bb      	ldr	r3, [r7, #8]
 8007722:	f003 0310 	and.w	r3, r3, #16
 8007726:	2b00      	cmp	r3, #0
 8007728:	d020      	beq.n	800776c <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800772a:	68fb      	ldr	r3, [r7, #12]
 800772c:	f003 0310 	and.w	r3, r3, #16
 8007730:	2b00      	cmp	r3, #0
 8007732:	d01b      	beq.n	800776c <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8007734:	687b      	ldr	r3, [r7, #4]
 8007736:	681b      	ldr	r3, [r3, #0]
 8007738:	f06f 0210 	mvn.w	r2, #16
 800773c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800773e:	687b      	ldr	r3, [r7, #4]
 8007740:	2208      	movs	r2, #8
 8007742:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8007744:	687b      	ldr	r3, [r7, #4]
 8007746:	681b      	ldr	r3, [r3, #0]
 8007748:	69db      	ldr	r3, [r3, #28]
 800774a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800774e:	2b00      	cmp	r3, #0
 8007750:	d003      	beq.n	800775a <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007752:	6878      	ldr	r0, [r7, #4]
 8007754:	f000 f877 	bl	8007846 <HAL_TIM_IC_CaptureCallback>
 8007758:	e005      	b.n	8007766 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800775a:	6878      	ldr	r0, [r7, #4]
 800775c:	f000 f869 	bl	8007832 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007760:	6878      	ldr	r0, [r7, #4]
 8007762:	f000 f87a 	bl	800785a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007766:	687b      	ldr	r3, [r7, #4]
 8007768:	2200      	movs	r2, #0
 800776a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800776c:	68bb      	ldr	r3, [r7, #8]
 800776e:	f003 0301 	and.w	r3, r3, #1
 8007772:	2b00      	cmp	r3, #0
 8007774:	d00c      	beq.n	8007790 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8007776:	68fb      	ldr	r3, [r7, #12]
 8007778:	f003 0301 	and.w	r3, r3, #1
 800777c:	2b00      	cmp	r3, #0
 800777e:	d007      	beq.n	8007790 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8007780:	687b      	ldr	r3, [r7, #4]
 8007782:	681b      	ldr	r3, [r3, #0]
 8007784:	f06f 0201 	mvn.w	r2, #1
 8007788:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800778a:	6878      	ldr	r0, [r7, #4]
 800778c:	f7fa f908 	bl	80019a0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8007790:	68bb      	ldr	r3, [r7, #8]
 8007792:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007796:	2b00      	cmp	r3, #0
 8007798:	d104      	bne.n	80077a4 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 800779a:	68bb      	ldr	r3, [r7, #8]
 800779c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 80077a0:	2b00      	cmp	r3, #0
 80077a2:	d00c      	beq.n	80077be <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80077a4:	68fb      	ldr	r3, [r7, #12]
 80077a6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80077aa:	2b00      	cmp	r3, #0
 80077ac:	d007      	beq.n	80077be <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 80077ae:	687b      	ldr	r3, [r7, #4]
 80077b0:	681b      	ldr	r3, [r3, #0]
 80077b2:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 80077b6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80077b8:	6878      	ldr	r0, [r7, #4]
 80077ba:	f000 f91f 	bl	80079fc <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 80077be:	68bb      	ldr	r3, [r7, #8]
 80077c0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80077c4:	2b00      	cmp	r3, #0
 80077c6:	d00c      	beq.n	80077e2 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80077c8:	68fb      	ldr	r3, [r7, #12]
 80077ca:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80077ce:	2b00      	cmp	r3, #0
 80077d0:	d007      	beq.n	80077e2 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80077d2:	687b      	ldr	r3, [r7, #4]
 80077d4:	681b      	ldr	r3, [r3, #0]
 80077d6:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 80077da:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80077dc:	6878      	ldr	r0, [r7, #4]
 80077de:	f000 f917 	bl	8007a10 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80077e2:	68bb      	ldr	r3, [r7, #8]
 80077e4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80077e8:	2b00      	cmp	r3, #0
 80077ea:	d00c      	beq.n	8007806 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80077ec:	68fb      	ldr	r3, [r7, #12]
 80077ee:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80077f2:	2b00      	cmp	r3, #0
 80077f4:	d007      	beq.n	8007806 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80077f6:	687b      	ldr	r3, [r7, #4]
 80077f8:	681b      	ldr	r3, [r3, #0]
 80077fa:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80077fe:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8007800:	6878      	ldr	r0, [r7, #4]
 8007802:	f000 f834 	bl	800786e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8007806:	68bb      	ldr	r3, [r7, #8]
 8007808:	f003 0320 	and.w	r3, r3, #32
 800780c:	2b00      	cmp	r3, #0
 800780e:	d00c      	beq.n	800782a <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8007810:	68fb      	ldr	r3, [r7, #12]
 8007812:	f003 0320 	and.w	r3, r3, #32
 8007816:	2b00      	cmp	r3, #0
 8007818:	d007      	beq.n	800782a <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800781a:	687b      	ldr	r3, [r7, #4]
 800781c:	681b      	ldr	r3, [r3, #0]
 800781e:	f06f 0220 	mvn.w	r2, #32
 8007822:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8007824:	6878      	ldr	r0, [r7, #4]
 8007826:	f000 f8df 	bl	80079e8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800782a:	bf00      	nop
 800782c:	3710      	adds	r7, #16
 800782e:	46bd      	mov	sp, r7
 8007830:	bd80      	pop	{r7, pc}

08007832 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007832:	b480      	push	{r7}
 8007834:	b083      	sub	sp, #12
 8007836:	af00      	add	r7, sp, #0
 8007838:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800783a:	bf00      	nop
 800783c:	370c      	adds	r7, #12
 800783e:	46bd      	mov	sp, r7
 8007840:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007844:	4770      	bx	lr

08007846 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8007846:	b480      	push	{r7}
 8007848:	b083      	sub	sp, #12
 800784a:	af00      	add	r7, sp, #0
 800784c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800784e:	bf00      	nop
 8007850:	370c      	adds	r7, #12
 8007852:	46bd      	mov	sp, r7
 8007854:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007858:	4770      	bx	lr

0800785a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800785a:	b480      	push	{r7}
 800785c:	b083      	sub	sp, #12
 800785e:	af00      	add	r7, sp, #0
 8007860:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8007862:	bf00      	nop
 8007864:	370c      	adds	r7, #12
 8007866:	46bd      	mov	sp, r7
 8007868:	f85d 7b04 	ldr.w	r7, [sp], #4
 800786c:	4770      	bx	lr

0800786e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800786e:	b480      	push	{r7}
 8007870:	b083      	sub	sp, #12
 8007872:	af00      	add	r7, sp, #0
 8007874:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8007876:	bf00      	nop
 8007878:	370c      	adds	r7, #12
 800787a:	46bd      	mov	sp, r7
 800787c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007880:	4770      	bx	lr
	...

08007884 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8007884:	b480      	push	{r7}
 8007886:	b085      	sub	sp, #20
 8007888:	af00      	add	r7, sp, #0
 800788a:	6078      	str	r0, [r7, #4]
 800788c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800788e:	687b      	ldr	r3, [r7, #4]
 8007890:	681b      	ldr	r3, [r3, #0]
 8007892:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007894:	687b      	ldr	r3, [r7, #4]
 8007896:	4a4a      	ldr	r2, [pc, #296]	@ (80079c0 <TIM_Base_SetConfig+0x13c>)
 8007898:	4293      	cmp	r3, r2
 800789a:	d013      	beq.n	80078c4 <TIM_Base_SetConfig+0x40>
 800789c:	687b      	ldr	r3, [r7, #4]
 800789e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80078a2:	d00f      	beq.n	80078c4 <TIM_Base_SetConfig+0x40>
 80078a4:	687b      	ldr	r3, [r7, #4]
 80078a6:	4a47      	ldr	r2, [pc, #284]	@ (80079c4 <TIM_Base_SetConfig+0x140>)
 80078a8:	4293      	cmp	r3, r2
 80078aa:	d00b      	beq.n	80078c4 <TIM_Base_SetConfig+0x40>
 80078ac:	687b      	ldr	r3, [r7, #4]
 80078ae:	4a46      	ldr	r2, [pc, #280]	@ (80079c8 <TIM_Base_SetConfig+0x144>)
 80078b0:	4293      	cmp	r3, r2
 80078b2:	d007      	beq.n	80078c4 <TIM_Base_SetConfig+0x40>
 80078b4:	687b      	ldr	r3, [r7, #4]
 80078b6:	4a45      	ldr	r2, [pc, #276]	@ (80079cc <TIM_Base_SetConfig+0x148>)
 80078b8:	4293      	cmp	r3, r2
 80078ba:	d003      	beq.n	80078c4 <TIM_Base_SetConfig+0x40>
 80078bc:	687b      	ldr	r3, [r7, #4]
 80078be:	4a44      	ldr	r2, [pc, #272]	@ (80079d0 <TIM_Base_SetConfig+0x14c>)
 80078c0:	4293      	cmp	r3, r2
 80078c2:	d108      	bne.n	80078d6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80078c4:	68fb      	ldr	r3, [r7, #12]
 80078c6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80078ca:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80078cc:	683b      	ldr	r3, [r7, #0]
 80078ce:	685b      	ldr	r3, [r3, #4]
 80078d0:	68fa      	ldr	r2, [r7, #12]
 80078d2:	4313      	orrs	r3, r2
 80078d4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80078d6:	687b      	ldr	r3, [r7, #4]
 80078d8:	4a39      	ldr	r2, [pc, #228]	@ (80079c0 <TIM_Base_SetConfig+0x13c>)
 80078da:	4293      	cmp	r3, r2
 80078dc:	d027      	beq.n	800792e <TIM_Base_SetConfig+0xaa>
 80078de:	687b      	ldr	r3, [r7, #4]
 80078e0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80078e4:	d023      	beq.n	800792e <TIM_Base_SetConfig+0xaa>
 80078e6:	687b      	ldr	r3, [r7, #4]
 80078e8:	4a36      	ldr	r2, [pc, #216]	@ (80079c4 <TIM_Base_SetConfig+0x140>)
 80078ea:	4293      	cmp	r3, r2
 80078ec:	d01f      	beq.n	800792e <TIM_Base_SetConfig+0xaa>
 80078ee:	687b      	ldr	r3, [r7, #4]
 80078f0:	4a35      	ldr	r2, [pc, #212]	@ (80079c8 <TIM_Base_SetConfig+0x144>)
 80078f2:	4293      	cmp	r3, r2
 80078f4:	d01b      	beq.n	800792e <TIM_Base_SetConfig+0xaa>
 80078f6:	687b      	ldr	r3, [r7, #4]
 80078f8:	4a34      	ldr	r2, [pc, #208]	@ (80079cc <TIM_Base_SetConfig+0x148>)
 80078fa:	4293      	cmp	r3, r2
 80078fc:	d017      	beq.n	800792e <TIM_Base_SetConfig+0xaa>
 80078fe:	687b      	ldr	r3, [r7, #4]
 8007900:	4a33      	ldr	r2, [pc, #204]	@ (80079d0 <TIM_Base_SetConfig+0x14c>)
 8007902:	4293      	cmp	r3, r2
 8007904:	d013      	beq.n	800792e <TIM_Base_SetConfig+0xaa>
 8007906:	687b      	ldr	r3, [r7, #4]
 8007908:	4a32      	ldr	r2, [pc, #200]	@ (80079d4 <TIM_Base_SetConfig+0x150>)
 800790a:	4293      	cmp	r3, r2
 800790c:	d00f      	beq.n	800792e <TIM_Base_SetConfig+0xaa>
 800790e:	687b      	ldr	r3, [r7, #4]
 8007910:	4a31      	ldr	r2, [pc, #196]	@ (80079d8 <TIM_Base_SetConfig+0x154>)
 8007912:	4293      	cmp	r3, r2
 8007914:	d00b      	beq.n	800792e <TIM_Base_SetConfig+0xaa>
 8007916:	687b      	ldr	r3, [r7, #4]
 8007918:	4a30      	ldr	r2, [pc, #192]	@ (80079dc <TIM_Base_SetConfig+0x158>)
 800791a:	4293      	cmp	r3, r2
 800791c:	d007      	beq.n	800792e <TIM_Base_SetConfig+0xaa>
 800791e:	687b      	ldr	r3, [r7, #4]
 8007920:	4a2f      	ldr	r2, [pc, #188]	@ (80079e0 <TIM_Base_SetConfig+0x15c>)
 8007922:	4293      	cmp	r3, r2
 8007924:	d003      	beq.n	800792e <TIM_Base_SetConfig+0xaa>
 8007926:	687b      	ldr	r3, [r7, #4]
 8007928:	4a2e      	ldr	r2, [pc, #184]	@ (80079e4 <TIM_Base_SetConfig+0x160>)
 800792a:	4293      	cmp	r3, r2
 800792c:	d108      	bne.n	8007940 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800792e:	68fb      	ldr	r3, [r7, #12]
 8007930:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007934:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007936:	683b      	ldr	r3, [r7, #0]
 8007938:	68db      	ldr	r3, [r3, #12]
 800793a:	68fa      	ldr	r2, [r7, #12]
 800793c:	4313      	orrs	r3, r2
 800793e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007940:	68fb      	ldr	r3, [r7, #12]
 8007942:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8007946:	683b      	ldr	r3, [r7, #0]
 8007948:	695b      	ldr	r3, [r3, #20]
 800794a:	4313      	orrs	r3, r2
 800794c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800794e:	687b      	ldr	r3, [r7, #4]
 8007950:	68fa      	ldr	r2, [r7, #12]
 8007952:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007954:	683b      	ldr	r3, [r7, #0]
 8007956:	689a      	ldr	r2, [r3, #8]
 8007958:	687b      	ldr	r3, [r7, #4]
 800795a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800795c:	683b      	ldr	r3, [r7, #0]
 800795e:	681a      	ldr	r2, [r3, #0]
 8007960:	687b      	ldr	r3, [r7, #4]
 8007962:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007964:	687b      	ldr	r3, [r7, #4]
 8007966:	4a16      	ldr	r2, [pc, #88]	@ (80079c0 <TIM_Base_SetConfig+0x13c>)
 8007968:	4293      	cmp	r3, r2
 800796a:	d00f      	beq.n	800798c <TIM_Base_SetConfig+0x108>
 800796c:	687b      	ldr	r3, [r7, #4]
 800796e:	4a18      	ldr	r2, [pc, #96]	@ (80079d0 <TIM_Base_SetConfig+0x14c>)
 8007970:	4293      	cmp	r3, r2
 8007972:	d00b      	beq.n	800798c <TIM_Base_SetConfig+0x108>
 8007974:	687b      	ldr	r3, [r7, #4]
 8007976:	4a17      	ldr	r2, [pc, #92]	@ (80079d4 <TIM_Base_SetConfig+0x150>)
 8007978:	4293      	cmp	r3, r2
 800797a:	d007      	beq.n	800798c <TIM_Base_SetConfig+0x108>
 800797c:	687b      	ldr	r3, [r7, #4]
 800797e:	4a16      	ldr	r2, [pc, #88]	@ (80079d8 <TIM_Base_SetConfig+0x154>)
 8007980:	4293      	cmp	r3, r2
 8007982:	d003      	beq.n	800798c <TIM_Base_SetConfig+0x108>
 8007984:	687b      	ldr	r3, [r7, #4]
 8007986:	4a15      	ldr	r2, [pc, #84]	@ (80079dc <TIM_Base_SetConfig+0x158>)
 8007988:	4293      	cmp	r3, r2
 800798a:	d103      	bne.n	8007994 <TIM_Base_SetConfig+0x110>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800798c:	683b      	ldr	r3, [r7, #0]
 800798e:	691a      	ldr	r2, [r3, #16]
 8007990:	687b      	ldr	r3, [r7, #4]
 8007992:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007994:	687b      	ldr	r3, [r7, #4]
 8007996:	2201      	movs	r2, #1
 8007998:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800799a:	687b      	ldr	r3, [r7, #4]
 800799c:	691b      	ldr	r3, [r3, #16]
 800799e:	f003 0301 	and.w	r3, r3, #1
 80079a2:	2b01      	cmp	r3, #1
 80079a4:	d105      	bne.n	80079b2 <TIM_Base_SetConfig+0x12e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80079a6:	687b      	ldr	r3, [r7, #4]
 80079a8:	691b      	ldr	r3, [r3, #16]
 80079aa:	f023 0201 	bic.w	r2, r3, #1
 80079ae:	687b      	ldr	r3, [r7, #4]
 80079b0:	611a      	str	r2, [r3, #16]
  }
}
 80079b2:	bf00      	nop
 80079b4:	3714      	adds	r7, #20
 80079b6:	46bd      	mov	sp, r7
 80079b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079bc:	4770      	bx	lr
 80079be:	bf00      	nop
 80079c0:	40010000 	.word	0x40010000
 80079c4:	40000400 	.word	0x40000400
 80079c8:	40000800 	.word	0x40000800
 80079cc:	40000c00 	.word	0x40000c00
 80079d0:	40010400 	.word	0x40010400
 80079d4:	40014000 	.word	0x40014000
 80079d8:	40014400 	.word	0x40014400
 80079dc:	40014800 	.word	0x40014800
 80079e0:	4000e000 	.word	0x4000e000
 80079e4:	4000e400 	.word	0x4000e400

080079e8 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80079e8:	b480      	push	{r7}
 80079ea:	b083      	sub	sp, #12
 80079ec:	af00      	add	r7, sp, #0
 80079ee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80079f0:	bf00      	nop
 80079f2:	370c      	adds	r7, #12
 80079f4:	46bd      	mov	sp, r7
 80079f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079fa:	4770      	bx	lr

080079fc <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80079fc:	b480      	push	{r7}
 80079fe:	b083      	sub	sp, #12
 8007a00:	af00      	add	r7, sp, #0
 8007a02:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8007a04:	bf00      	nop
 8007a06:	370c      	adds	r7, #12
 8007a08:	46bd      	mov	sp, r7
 8007a0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a0e:	4770      	bx	lr

08007a10 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8007a10:	b480      	push	{r7}
 8007a12:	b083      	sub	sp, #12
 8007a14:	af00      	add	r7, sp, #0
 8007a16:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8007a18:	bf00      	nop
 8007a1a:	370c      	adds	r7, #12
 8007a1c:	46bd      	mov	sp, r7
 8007a1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a22:	4770      	bx	lr

08007a24 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007a24:	b580      	push	{r7, lr}
 8007a26:	b082      	sub	sp, #8
 8007a28:	af00      	add	r7, sp, #0
 8007a2a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007a2c:	687b      	ldr	r3, [r7, #4]
 8007a2e:	2b00      	cmp	r3, #0
 8007a30:	d101      	bne.n	8007a36 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007a32:	2301      	movs	r3, #1
 8007a34:	e042      	b.n	8007abc <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8007a36:	687b      	ldr	r3, [r7, #4]
 8007a38:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007a3c:	2b00      	cmp	r3, #0
 8007a3e:	d106      	bne.n	8007a4e <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007a40:	687b      	ldr	r3, [r7, #4]
 8007a42:	2200      	movs	r2, #0
 8007a44:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007a48:	6878      	ldr	r0, [r7, #4]
 8007a4a:	f7fa fbc9 	bl	80021e0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007a4e:	687b      	ldr	r3, [r7, #4]
 8007a50:	2224      	movs	r2, #36	@ 0x24
 8007a52:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8007a56:	687b      	ldr	r3, [r7, #4]
 8007a58:	681b      	ldr	r3, [r3, #0]
 8007a5a:	681a      	ldr	r2, [r3, #0]
 8007a5c:	687b      	ldr	r3, [r7, #4]
 8007a5e:	681b      	ldr	r3, [r3, #0]
 8007a60:	f022 0201 	bic.w	r2, r2, #1
 8007a64:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8007a66:	687b      	ldr	r3, [r7, #4]
 8007a68:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007a6a:	2b00      	cmp	r3, #0
 8007a6c:	d002      	beq.n	8007a74 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8007a6e:	6878      	ldr	r0, [r7, #4]
 8007a70:	f000 fe94 	bl	800879c <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8007a74:	6878      	ldr	r0, [r7, #4]
 8007a76:	f000 f825 	bl	8007ac4 <UART_SetConfig>
 8007a7a:	4603      	mov	r3, r0
 8007a7c:	2b01      	cmp	r3, #1
 8007a7e:	d101      	bne.n	8007a84 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8007a80:	2301      	movs	r3, #1
 8007a82:	e01b      	b.n	8007abc <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007a84:	687b      	ldr	r3, [r7, #4]
 8007a86:	681b      	ldr	r3, [r3, #0]
 8007a88:	685a      	ldr	r2, [r3, #4]
 8007a8a:	687b      	ldr	r3, [r7, #4]
 8007a8c:	681b      	ldr	r3, [r3, #0]
 8007a8e:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8007a92:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007a94:	687b      	ldr	r3, [r7, #4]
 8007a96:	681b      	ldr	r3, [r3, #0]
 8007a98:	689a      	ldr	r2, [r3, #8]
 8007a9a:	687b      	ldr	r3, [r7, #4]
 8007a9c:	681b      	ldr	r3, [r3, #0]
 8007a9e:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8007aa2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8007aa4:	687b      	ldr	r3, [r7, #4]
 8007aa6:	681b      	ldr	r3, [r3, #0]
 8007aa8:	681a      	ldr	r2, [r3, #0]
 8007aaa:	687b      	ldr	r3, [r7, #4]
 8007aac:	681b      	ldr	r3, [r3, #0]
 8007aae:	f042 0201 	orr.w	r2, r2, #1
 8007ab2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8007ab4:	6878      	ldr	r0, [r7, #4]
 8007ab6:	f000 ff13 	bl	80088e0 <UART_CheckIdleState>
 8007aba:	4603      	mov	r3, r0
}
 8007abc:	4618      	mov	r0, r3
 8007abe:	3708      	adds	r7, #8
 8007ac0:	46bd      	mov	sp, r7
 8007ac2:	bd80      	pop	{r7, pc}

08007ac4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007ac4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007ac8:	b092      	sub	sp, #72	@ 0x48
 8007aca:	af00      	add	r7, sp, #0
 8007acc:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8007ace:	2300      	movs	r3, #0
 8007ad0:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8007ad4:	697b      	ldr	r3, [r7, #20]
 8007ad6:	689a      	ldr	r2, [r3, #8]
 8007ad8:	697b      	ldr	r3, [r7, #20]
 8007ada:	691b      	ldr	r3, [r3, #16]
 8007adc:	431a      	orrs	r2, r3
 8007ade:	697b      	ldr	r3, [r7, #20]
 8007ae0:	695b      	ldr	r3, [r3, #20]
 8007ae2:	431a      	orrs	r2, r3
 8007ae4:	697b      	ldr	r3, [r7, #20]
 8007ae6:	69db      	ldr	r3, [r3, #28]
 8007ae8:	4313      	orrs	r3, r2
 8007aea:	647b      	str	r3, [r7, #68]	@ 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8007aec:	697b      	ldr	r3, [r7, #20]
 8007aee:	681b      	ldr	r3, [r3, #0]
 8007af0:	681a      	ldr	r2, [r3, #0]
 8007af2:	4bbe      	ldr	r3, [pc, #760]	@ (8007dec <UART_SetConfig+0x328>)
 8007af4:	4013      	ands	r3, r2
 8007af6:	697a      	ldr	r2, [r7, #20]
 8007af8:	6812      	ldr	r2, [r2, #0]
 8007afa:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8007afc:	430b      	orrs	r3, r1
 8007afe:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007b00:	697b      	ldr	r3, [r7, #20]
 8007b02:	681b      	ldr	r3, [r3, #0]
 8007b04:	685b      	ldr	r3, [r3, #4]
 8007b06:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8007b0a:	697b      	ldr	r3, [r7, #20]
 8007b0c:	68da      	ldr	r2, [r3, #12]
 8007b0e:	697b      	ldr	r3, [r7, #20]
 8007b10:	681b      	ldr	r3, [r3, #0]
 8007b12:	430a      	orrs	r2, r1
 8007b14:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8007b16:	697b      	ldr	r3, [r7, #20]
 8007b18:	699b      	ldr	r3, [r3, #24]
 8007b1a:	647b      	str	r3, [r7, #68]	@ 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8007b1c:	697b      	ldr	r3, [r7, #20]
 8007b1e:	681b      	ldr	r3, [r3, #0]
 8007b20:	4ab3      	ldr	r2, [pc, #716]	@ (8007df0 <UART_SetConfig+0x32c>)
 8007b22:	4293      	cmp	r3, r2
 8007b24:	d004      	beq.n	8007b30 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8007b26:	697b      	ldr	r3, [r7, #20]
 8007b28:	6a1b      	ldr	r3, [r3, #32]
 8007b2a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8007b2c:	4313      	orrs	r3, r2
 8007b2e:	647b      	str	r3, [r7, #68]	@ 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8007b30:	697b      	ldr	r3, [r7, #20]
 8007b32:	681b      	ldr	r3, [r3, #0]
 8007b34:	689a      	ldr	r2, [r3, #8]
 8007b36:	4baf      	ldr	r3, [pc, #700]	@ (8007df4 <UART_SetConfig+0x330>)
 8007b38:	4013      	ands	r3, r2
 8007b3a:	697a      	ldr	r2, [r7, #20]
 8007b3c:	6812      	ldr	r2, [r2, #0]
 8007b3e:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8007b40:	430b      	orrs	r3, r1
 8007b42:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8007b44:	697b      	ldr	r3, [r7, #20]
 8007b46:	681b      	ldr	r3, [r3, #0]
 8007b48:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007b4a:	f023 010f 	bic.w	r1, r3, #15
 8007b4e:	697b      	ldr	r3, [r7, #20]
 8007b50:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8007b52:	697b      	ldr	r3, [r7, #20]
 8007b54:	681b      	ldr	r3, [r3, #0]
 8007b56:	430a      	orrs	r2, r1
 8007b58:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8007b5a:	697b      	ldr	r3, [r7, #20]
 8007b5c:	681b      	ldr	r3, [r3, #0]
 8007b5e:	4aa6      	ldr	r2, [pc, #664]	@ (8007df8 <UART_SetConfig+0x334>)
 8007b60:	4293      	cmp	r3, r2
 8007b62:	d177      	bne.n	8007c54 <UART_SetConfig+0x190>
 8007b64:	4ba5      	ldr	r3, [pc, #660]	@ (8007dfc <UART_SetConfig+0x338>)
 8007b66:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007b68:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8007b6c:	2b28      	cmp	r3, #40	@ 0x28
 8007b6e:	d86d      	bhi.n	8007c4c <UART_SetConfig+0x188>
 8007b70:	a201      	add	r2, pc, #4	@ (adr r2, 8007b78 <UART_SetConfig+0xb4>)
 8007b72:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007b76:	bf00      	nop
 8007b78:	08007c1d 	.word	0x08007c1d
 8007b7c:	08007c4d 	.word	0x08007c4d
 8007b80:	08007c4d 	.word	0x08007c4d
 8007b84:	08007c4d 	.word	0x08007c4d
 8007b88:	08007c4d 	.word	0x08007c4d
 8007b8c:	08007c4d 	.word	0x08007c4d
 8007b90:	08007c4d 	.word	0x08007c4d
 8007b94:	08007c4d 	.word	0x08007c4d
 8007b98:	08007c25 	.word	0x08007c25
 8007b9c:	08007c4d 	.word	0x08007c4d
 8007ba0:	08007c4d 	.word	0x08007c4d
 8007ba4:	08007c4d 	.word	0x08007c4d
 8007ba8:	08007c4d 	.word	0x08007c4d
 8007bac:	08007c4d 	.word	0x08007c4d
 8007bb0:	08007c4d 	.word	0x08007c4d
 8007bb4:	08007c4d 	.word	0x08007c4d
 8007bb8:	08007c2d 	.word	0x08007c2d
 8007bbc:	08007c4d 	.word	0x08007c4d
 8007bc0:	08007c4d 	.word	0x08007c4d
 8007bc4:	08007c4d 	.word	0x08007c4d
 8007bc8:	08007c4d 	.word	0x08007c4d
 8007bcc:	08007c4d 	.word	0x08007c4d
 8007bd0:	08007c4d 	.word	0x08007c4d
 8007bd4:	08007c4d 	.word	0x08007c4d
 8007bd8:	08007c35 	.word	0x08007c35
 8007bdc:	08007c4d 	.word	0x08007c4d
 8007be0:	08007c4d 	.word	0x08007c4d
 8007be4:	08007c4d 	.word	0x08007c4d
 8007be8:	08007c4d 	.word	0x08007c4d
 8007bec:	08007c4d 	.word	0x08007c4d
 8007bf0:	08007c4d 	.word	0x08007c4d
 8007bf4:	08007c4d 	.word	0x08007c4d
 8007bf8:	08007c3d 	.word	0x08007c3d
 8007bfc:	08007c4d 	.word	0x08007c4d
 8007c00:	08007c4d 	.word	0x08007c4d
 8007c04:	08007c4d 	.word	0x08007c4d
 8007c08:	08007c4d 	.word	0x08007c4d
 8007c0c:	08007c4d 	.word	0x08007c4d
 8007c10:	08007c4d 	.word	0x08007c4d
 8007c14:	08007c4d 	.word	0x08007c4d
 8007c18:	08007c45 	.word	0x08007c45
 8007c1c:	2301      	movs	r3, #1
 8007c1e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007c22:	e326      	b.n	8008272 <UART_SetConfig+0x7ae>
 8007c24:	2304      	movs	r3, #4
 8007c26:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007c2a:	e322      	b.n	8008272 <UART_SetConfig+0x7ae>
 8007c2c:	2308      	movs	r3, #8
 8007c2e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007c32:	e31e      	b.n	8008272 <UART_SetConfig+0x7ae>
 8007c34:	2310      	movs	r3, #16
 8007c36:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007c3a:	e31a      	b.n	8008272 <UART_SetConfig+0x7ae>
 8007c3c:	2320      	movs	r3, #32
 8007c3e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007c42:	e316      	b.n	8008272 <UART_SetConfig+0x7ae>
 8007c44:	2340      	movs	r3, #64	@ 0x40
 8007c46:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007c4a:	e312      	b.n	8008272 <UART_SetConfig+0x7ae>
 8007c4c:	2380      	movs	r3, #128	@ 0x80
 8007c4e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007c52:	e30e      	b.n	8008272 <UART_SetConfig+0x7ae>
 8007c54:	697b      	ldr	r3, [r7, #20]
 8007c56:	681b      	ldr	r3, [r3, #0]
 8007c58:	4a69      	ldr	r2, [pc, #420]	@ (8007e00 <UART_SetConfig+0x33c>)
 8007c5a:	4293      	cmp	r3, r2
 8007c5c:	d130      	bne.n	8007cc0 <UART_SetConfig+0x1fc>
 8007c5e:	4b67      	ldr	r3, [pc, #412]	@ (8007dfc <UART_SetConfig+0x338>)
 8007c60:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007c62:	f003 0307 	and.w	r3, r3, #7
 8007c66:	2b05      	cmp	r3, #5
 8007c68:	d826      	bhi.n	8007cb8 <UART_SetConfig+0x1f4>
 8007c6a:	a201      	add	r2, pc, #4	@ (adr r2, 8007c70 <UART_SetConfig+0x1ac>)
 8007c6c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007c70:	08007c89 	.word	0x08007c89
 8007c74:	08007c91 	.word	0x08007c91
 8007c78:	08007c99 	.word	0x08007c99
 8007c7c:	08007ca1 	.word	0x08007ca1
 8007c80:	08007ca9 	.word	0x08007ca9
 8007c84:	08007cb1 	.word	0x08007cb1
 8007c88:	2300      	movs	r3, #0
 8007c8a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007c8e:	e2f0      	b.n	8008272 <UART_SetConfig+0x7ae>
 8007c90:	2304      	movs	r3, #4
 8007c92:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007c96:	e2ec      	b.n	8008272 <UART_SetConfig+0x7ae>
 8007c98:	2308      	movs	r3, #8
 8007c9a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007c9e:	e2e8      	b.n	8008272 <UART_SetConfig+0x7ae>
 8007ca0:	2310      	movs	r3, #16
 8007ca2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007ca6:	e2e4      	b.n	8008272 <UART_SetConfig+0x7ae>
 8007ca8:	2320      	movs	r3, #32
 8007caa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007cae:	e2e0      	b.n	8008272 <UART_SetConfig+0x7ae>
 8007cb0:	2340      	movs	r3, #64	@ 0x40
 8007cb2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007cb6:	e2dc      	b.n	8008272 <UART_SetConfig+0x7ae>
 8007cb8:	2380      	movs	r3, #128	@ 0x80
 8007cba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007cbe:	e2d8      	b.n	8008272 <UART_SetConfig+0x7ae>
 8007cc0:	697b      	ldr	r3, [r7, #20]
 8007cc2:	681b      	ldr	r3, [r3, #0]
 8007cc4:	4a4f      	ldr	r2, [pc, #316]	@ (8007e04 <UART_SetConfig+0x340>)
 8007cc6:	4293      	cmp	r3, r2
 8007cc8:	d130      	bne.n	8007d2c <UART_SetConfig+0x268>
 8007cca:	4b4c      	ldr	r3, [pc, #304]	@ (8007dfc <UART_SetConfig+0x338>)
 8007ccc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007cce:	f003 0307 	and.w	r3, r3, #7
 8007cd2:	2b05      	cmp	r3, #5
 8007cd4:	d826      	bhi.n	8007d24 <UART_SetConfig+0x260>
 8007cd6:	a201      	add	r2, pc, #4	@ (adr r2, 8007cdc <UART_SetConfig+0x218>)
 8007cd8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007cdc:	08007cf5 	.word	0x08007cf5
 8007ce0:	08007cfd 	.word	0x08007cfd
 8007ce4:	08007d05 	.word	0x08007d05
 8007ce8:	08007d0d 	.word	0x08007d0d
 8007cec:	08007d15 	.word	0x08007d15
 8007cf0:	08007d1d 	.word	0x08007d1d
 8007cf4:	2300      	movs	r3, #0
 8007cf6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007cfa:	e2ba      	b.n	8008272 <UART_SetConfig+0x7ae>
 8007cfc:	2304      	movs	r3, #4
 8007cfe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007d02:	e2b6      	b.n	8008272 <UART_SetConfig+0x7ae>
 8007d04:	2308      	movs	r3, #8
 8007d06:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007d0a:	e2b2      	b.n	8008272 <UART_SetConfig+0x7ae>
 8007d0c:	2310      	movs	r3, #16
 8007d0e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007d12:	e2ae      	b.n	8008272 <UART_SetConfig+0x7ae>
 8007d14:	2320      	movs	r3, #32
 8007d16:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007d1a:	e2aa      	b.n	8008272 <UART_SetConfig+0x7ae>
 8007d1c:	2340      	movs	r3, #64	@ 0x40
 8007d1e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007d22:	e2a6      	b.n	8008272 <UART_SetConfig+0x7ae>
 8007d24:	2380      	movs	r3, #128	@ 0x80
 8007d26:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007d2a:	e2a2      	b.n	8008272 <UART_SetConfig+0x7ae>
 8007d2c:	697b      	ldr	r3, [r7, #20]
 8007d2e:	681b      	ldr	r3, [r3, #0]
 8007d30:	4a35      	ldr	r2, [pc, #212]	@ (8007e08 <UART_SetConfig+0x344>)
 8007d32:	4293      	cmp	r3, r2
 8007d34:	d130      	bne.n	8007d98 <UART_SetConfig+0x2d4>
 8007d36:	4b31      	ldr	r3, [pc, #196]	@ (8007dfc <UART_SetConfig+0x338>)
 8007d38:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007d3a:	f003 0307 	and.w	r3, r3, #7
 8007d3e:	2b05      	cmp	r3, #5
 8007d40:	d826      	bhi.n	8007d90 <UART_SetConfig+0x2cc>
 8007d42:	a201      	add	r2, pc, #4	@ (adr r2, 8007d48 <UART_SetConfig+0x284>)
 8007d44:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007d48:	08007d61 	.word	0x08007d61
 8007d4c:	08007d69 	.word	0x08007d69
 8007d50:	08007d71 	.word	0x08007d71
 8007d54:	08007d79 	.word	0x08007d79
 8007d58:	08007d81 	.word	0x08007d81
 8007d5c:	08007d89 	.word	0x08007d89
 8007d60:	2300      	movs	r3, #0
 8007d62:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007d66:	e284      	b.n	8008272 <UART_SetConfig+0x7ae>
 8007d68:	2304      	movs	r3, #4
 8007d6a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007d6e:	e280      	b.n	8008272 <UART_SetConfig+0x7ae>
 8007d70:	2308      	movs	r3, #8
 8007d72:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007d76:	e27c      	b.n	8008272 <UART_SetConfig+0x7ae>
 8007d78:	2310      	movs	r3, #16
 8007d7a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007d7e:	e278      	b.n	8008272 <UART_SetConfig+0x7ae>
 8007d80:	2320      	movs	r3, #32
 8007d82:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007d86:	e274      	b.n	8008272 <UART_SetConfig+0x7ae>
 8007d88:	2340      	movs	r3, #64	@ 0x40
 8007d8a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007d8e:	e270      	b.n	8008272 <UART_SetConfig+0x7ae>
 8007d90:	2380      	movs	r3, #128	@ 0x80
 8007d92:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007d96:	e26c      	b.n	8008272 <UART_SetConfig+0x7ae>
 8007d98:	697b      	ldr	r3, [r7, #20]
 8007d9a:	681b      	ldr	r3, [r3, #0]
 8007d9c:	4a1b      	ldr	r2, [pc, #108]	@ (8007e0c <UART_SetConfig+0x348>)
 8007d9e:	4293      	cmp	r3, r2
 8007da0:	d142      	bne.n	8007e28 <UART_SetConfig+0x364>
 8007da2:	4b16      	ldr	r3, [pc, #88]	@ (8007dfc <UART_SetConfig+0x338>)
 8007da4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007da6:	f003 0307 	and.w	r3, r3, #7
 8007daa:	2b05      	cmp	r3, #5
 8007dac:	d838      	bhi.n	8007e20 <UART_SetConfig+0x35c>
 8007dae:	a201      	add	r2, pc, #4	@ (adr r2, 8007db4 <UART_SetConfig+0x2f0>)
 8007db0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007db4:	08007dcd 	.word	0x08007dcd
 8007db8:	08007dd5 	.word	0x08007dd5
 8007dbc:	08007ddd 	.word	0x08007ddd
 8007dc0:	08007de5 	.word	0x08007de5
 8007dc4:	08007e11 	.word	0x08007e11
 8007dc8:	08007e19 	.word	0x08007e19
 8007dcc:	2300      	movs	r3, #0
 8007dce:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007dd2:	e24e      	b.n	8008272 <UART_SetConfig+0x7ae>
 8007dd4:	2304      	movs	r3, #4
 8007dd6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007dda:	e24a      	b.n	8008272 <UART_SetConfig+0x7ae>
 8007ddc:	2308      	movs	r3, #8
 8007dde:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007de2:	e246      	b.n	8008272 <UART_SetConfig+0x7ae>
 8007de4:	2310      	movs	r3, #16
 8007de6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007dea:	e242      	b.n	8008272 <UART_SetConfig+0x7ae>
 8007dec:	cfff69f3 	.word	0xcfff69f3
 8007df0:	58000c00 	.word	0x58000c00
 8007df4:	11fff4ff 	.word	0x11fff4ff
 8007df8:	40011000 	.word	0x40011000
 8007dfc:	58024400 	.word	0x58024400
 8007e00:	40004400 	.word	0x40004400
 8007e04:	40004800 	.word	0x40004800
 8007e08:	40004c00 	.word	0x40004c00
 8007e0c:	40005000 	.word	0x40005000
 8007e10:	2320      	movs	r3, #32
 8007e12:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007e16:	e22c      	b.n	8008272 <UART_SetConfig+0x7ae>
 8007e18:	2340      	movs	r3, #64	@ 0x40
 8007e1a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007e1e:	e228      	b.n	8008272 <UART_SetConfig+0x7ae>
 8007e20:	2380      	movs	r3, #128	@ 0x80
 8007e22:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007e26:	e224      	b.n	8008272 <UART_SetConfig+0x7ae>
 8007e28:	697b      	ldr	r3, [r7, #20]
 8007e2a:	681b      	ldr	r3, [r3, #0]
 8007e2c:	4ab1      	ldr	r2, [pc, #708]	@ (80080f4 <UART_SetConfig+0x630>)
 8007e2e:	4293      	cmp	r3, r2
 8007e30:	d176      	bne.n	8007f20 <UART_SetConfig+0x45c>
 8007e32:	4bb1      	ldr	r3, [pc, #708]	@ (80080f8 <UART_SetConfig+0x634>)
 8007e34:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007e36:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8007e3a:	2b28      	cmp	r3, #40	@ 0x28
 8007e3c:	d86c      	bhi.n	8007f18 <UART_SetConfig+0x454>
 8007e3e:	a201      	add	r2, pc, #4	@ (adr r2, 8007e44 <UART_SetConfig+0x380>)
 8007e40:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007e44:	08007ee9 	.word	0x08007ee9
 8007e48:	08007f19 	.word	0x08007f19
 8007e4c:	08007f19 	.word	0x08007f19
 8007e50:	08007f19 	.word	0x08007f19
 8007e54:	08007f19 	.word	0x08007f19
 8007e58:	08007f19 	.word	0x08007f19
 8007e5c:	08007f19 	.word	0x08007f19
 8007e60:	08007f19 	.word	0x08007f19
 8007e64:	08007ef1 	.word	0x08007ef1
 8007e68:	08007f19 	.word	0x08007f19
 8007e6c:	08007f19 	.word	0x08007f19
 8007e70:	08007f19 	.word	0x08007f19
 8007e74:	08007f19 	.word	0x08007f19
 8007e78:	08007f19 	.word	0x08007f19
 8007e7c:	08007f19 	.word	0x08007f19
 8007e80:	08007f19 	.word	0x08007f19
 8007e84:	08007ef9 	.word	0x08007ef9
 8007e88:	08007f19 	.word	0x08007f19
 8007e8c:	08007f19 	.word	0x08007f19
 8007e90:	08007f19 	.word	0x08007f19
 8007e94:	08007f19 	.word	0x08007f19
 8007e98:	08007f19 	.word	0x08007f19
 8007e9c:	08007f19 	.word	0x08007f19
 8007ea0:	08007f19 	.word	0x08007f19
 8007ea4:	08007f01 	.word	0x08007f01
 8007ea8:	08007f19 	.word	0x08007f19
 8007eac:	08007f19 	.word	0x08007f19
 8007eb0:	08007f19 	.word	0x08007f19
 8007eb4:	08007f19 	.word	0x08007f19
 8007eb8:	08007f19 	.word	0x08007f19
 8007ebc:	08007f19 	.word	0x08007f19
 8007ec0:	08007f19 	.word	0x08007f19
 8007ec4:	08007f09 	.word	0x08007f09
 8007ec8:	08007f19 	.word	0x08007f19
 8007ecc:	08007f19 	.word	0x08007f19
 8007ed0:	08007f19 	.word	0x08007f19
 8007ed4:	08007f19 	.word	0x08007f19
 8007ed8:	08007f19 	.word	0x08007f19
 8007edc:	08007f19 	.word	0x08007f19
 8007ee0:	08007f19 	.word	0x08007f19
 8007ee4:	08007f11 	.word	0x08007f11
 8007ee8:	2301      	movs	r3, #1
 8007eea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007eee:	e1c0      	b.n	8008272 <UART_SetConfig+0x7ae>
 8007ef0:	2304      	movs	r3, #4
 8007ef2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007ef6:	e1bc      	b.n	8008272 <UART_SetConfig+0x7ae>
 8007ef8:	2308      	movs	r3, #8
 8007efa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007efe:	e1b8      	b.n	8008272 <UART_SetConfig+0x7ae>
 8007f00:	2310      	movs	r3, #16
 8007f02:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007f06:	e1b4      	b.n	8008272 <UART_SetConfig+0x7ae>
 8007f08:	2320      	movs	r3, #32
 8007f0a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007f0e:	e1b0      	b.n	8008272 <UART_SetConfig+0x7ae>
 8007f10:	2340      	movs	r3, #64	@ 0x40
 8007f12:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007f16:	e1ac      	b.n	8008272 <UART_SetConfig+0x7ae>
 8007f18:	2380      	movs	r3, #128	@ 0x80
 8007f1a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007f1e:	e1a8      	b.n	8008272 <UART_SetConfig+0x7ae>
 8007f20:	697b      	ldr	r3, [r7, #20]
 8007f22:	681b      	ldr	r3, [r3, #0]
 8007f24:	4a75      	ldr	r2, [pc, #468]	@ (80080fc <UART_SetConfig+0x638>)
 8007f26:	4293      	cmp	r3, r2
 8007f28:	d130      	bne.n	8007f8c <UART_SetConfig+0x4c8>
 8007f2a:	4b73      	ldr	r3, [pc, #460]	@ (80080f8 <UART_SetConfig+0x634>)
 8007f2c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007f2e:	f003 0307 	and.w	r3, r3, #7
 8007f32:	2b05      	cmp	r3, #5
 8007f34:	d826      	bhi.n	8007f84 <UART_SetConfig+0x4c0>
 8007f36:	a201      	add	r2, pc, #4	@ (adr r2, 8007f3c <UART_SetConfig+0x478>)
 8007f38:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007f3c:	08007f55 	.word	0x08007f55
 8007f40:	08007f5d 	.word	0x08007f5d
 8007f44:	08007f65 	.word	0x08007f65
 8007f48:	08007f6d 	.word	0x08007f6d
 8007f4c:	08007f75 	.word	0x08007f75
 8007f50:	08007f7d 	.word	0x08007f7d
 8007f54:	2300      	movs	r3, #0
 8007f56:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007f5a:	e18a      	b.n	8008272 <UART_SetConfig+0x7ae>
 8007f5c:	2304      	movs	r3, #4
 8007f5e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007f62:	e186      	b.n	8008272 <UART_SetConfig+0x7ae>
 8007f64:	2308      	movs	r3, #8
 8007f66:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007f6a:	e182      	b.n	8008272 <UART_SetConfig+0x7ae>
 8007f6c:	2310      	movs	r3, #16
 8007f6e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007f72:	e17e      	b.n	8008272 <UART_SetConfig+0x7ae>
 8007f74:	2320      	movs	r3, #32
 8007f76:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007f7a:	e17a      	b.n	8008272 <UART_SetConfig+0x7ae>
 8007f7c:	2340      	movs	r3, #64	@ 0x40
 8007f7e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007f82:	e176      	b.n	8008272 <UART_SetConfig+0x7ae>
 8007f84:	2380      	movs	r3, #128	@ 0x80
 8007f86:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007f8a:	e172      	b.n	8008272 <UART_SetConfig+0x7ae>
 8007f8c:	697b      	ldr	r3, [r7, #20]
 8007f8e:	681b      	ldr	r3, [r3, #0]
 8007f90:	4a5b      	ldr	r2, [pc, #364]	@ (8008100 <UART_SetConfig+0x63c>)
 8007f92:	4293      	cmp	r3, r2
 8007f94:	d130      	bne.n	8007ff8 <UART_SetConfig+0x534>
 8007f96:	4b58      	ldr	r3, [pc, #352]	@ (80080f8 <UART_SetConfig+0x634>)
 8007f98:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007f9a:	f003 0307 	and.w	r3, r3, #7
 8007f9e:	2b05      	cmp	r3, #5
 8007fa0:	d826      	bhi.n	8007ff0 <UART_SetConfig+0x52c>
 8007fa2:	a201      	add	r2, pc, #4	@ (adr r2, 8007fa8 <UART_SetConfig+0x4e4>)
 8007fa4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007fa8:	08007fc1 	.word	0x08007fc1
 8007fac:	08007fc9 	.word	0x08007fc9
 8007fb0:	08007fd1 	.word	0x08007fd1
 8007fb4:	08007fd9 	.word	0x08007fd9
 8007fb8:	08007fe1 	.word	0x08007fe1
 8007fbc:	08007fe9 	.word	0x08007fe9
 8007fc0:	2300      	movs	r3, #0
 8007fc2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007fc6:	e154      	b.n	8008272 <UART_SetConfig+0x7ae>
 8007fc8:	2304      	movs	r3, #4
 8007fca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007fce:	e150      	b.n	8008272 <UART_SetConfig+0x7ae>
 8007fd0:	2308      	movs	r3, #8
 8007fd2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007fd6:	e14c      	b.n	8008272 <UART_SetConfig+0x7ae>
 8007fd8:	2310      	movs	r3, #16
 8007fda:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007fde:	e148      	b.n	8008272 <UART_SetConfig+0x7ae>
 8007fe0:	2320      	movs	r3, #32
 8007fe2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007fe6:	e144      	b.n	8008272 <UART_SetConfig+0x7ae>
 8007fe8:	2340      	movs	r3, #64	@ 0x40
 8007fea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007fee:	e140      	b.n	8008272 <UART_SetConfig+0x7ae>
 8007ff0:	2380      	movs	r3, #128	@ 0x80
 8007ff2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007ff6:	e13c      	b.n	8008272 <UART_SetConfig+0x7ae>
 8007ff8:	697b      	ldr	r3, [r7, #20]
 8007ffa:	681b      	ldr	r3, [r3, #0]
 8007ffc:	4a41      	ldr	r2, [pc, #260]	@ (8008104 <UART_SetConfig+0x640>)
 8007ffe:	4293      	cmp	r3, r2
 8008000:	f040 8082 	bne.w	8008108 <UART_SetConfig+0x644>
 8008004:	4b3c      	ldr	r3, [pc, #240]	@ (80080f8 <UART_SetConfig+0x634>)
 8008006:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008008:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800800c:	2b28      	cmp	r3, #40	@ 0x28
 800800e:	d86d      	bhi.n	80080ec <UART_SetConfig+0x628>
 8008010:	a201      	add	r2, pc, #4	@ (adr r2, 8008018 <UART_SetConfig+0x554>)
 8008012:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008016:	bf00      	nop
 8008018:	080080bd 	.word	0x080080bd
 800801c:	080080ed 	.word	0x080080ed
 8008020:	080080ed 	.word	0x080080ed
 8008024:	080080ed 	.word	0x080080ed
 8008028:	080080ed 	.word	0x080080ed
 800802c:	080080ed 	.word	0x080080ed
 8008030:	080080ed 	.word	0x080080ed
 8008034:	080080ed 	.word	0x080080ed
 8008038:	080080c5 	.word	0x080080c5
 800803c:	080080ed 	.word	0x080080ed
 8008040:	080080ed 	.word	0x080080ed
 8008044:	080080ed 	.word	0x080080ed
 8008048:	080080ed 	.word	0x080080ed
 800804c:	080080ed 	.word	0x080080ed
 8008050:	080080ed 	.word	0x080080ed
 8008054:	080080ed 	.word	0x080080ed
 8008058:	080080cd 	.word	0x080080cd
 800805c:	080080ed 	.word	0x080080ed
 8008060:	080080ed 	.word	0x080080ed
 8008064:	080080ed 	.word	0x080080ed
 8008068:	080080ed 	.word	0x080080ed
 800806c:	080080ed 	.word	0x080080ed
 8008070:	080080ed 	.word	0x080080ed
 8008074:	080080ed 	.word	0x080080ed
 8008078:	080080d5 	.word	0x080080d5
 800807c:	080080ed 	.word	0x080080ed
 8008080:	080080ed 	.word	0x080080ed
 8008084:	080080ed 	.word	0x080080ed
 8008088:	080080ed 	.word	0x080080ed
 800808c:	080080ed 	.word	0x080080ed
 8008090:	080080ed 	.word	0x080080ed
 8008094:	080080ed 	.word	0x080080ed
 8008098:	080080dd 	.word	0x080080dd
 800809c:	080080ed 	.word	0x080080ed
 80080a0:	080080ed 	.word	0x080080ed
 80080a4:	080080ed 	.word	0x080080ed
 80080a8:	080080ed 	.word	0x080080ed
 80080ac:	080080ed 	.word	0x080080ed
 80080b0:	080080ed 	.word	0x080080ed
 80080b4:	080080ed 	.word	0x080080ed
 80080b8:	080080e5 	.word	0x080080e5
 80080bc:	2301      	movs	r3, #1
 80080be:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80080c2:	e0d6      	b.n	8008272 <UART_SetConfig+0x7ae>
 80080c4:	2304      	movs	r3, #4
 80080c6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80080ca:	e0d2      	b.n	8008272 <UART_SetConfig+0x7ae>
 80080cc:	2308      	movs	r3, #8
 80080ce:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80080d2:	e0ce      	b.n	8008272 <UART_SetConfig+0x7ae>
 80080d4:	2310      	movs	r3, #16
 80080d6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80080da:	e0ca      	b.n	8008272 <UART_SetConfig+0x7ae>
 80080dc:	2320      	movs	r3, #32
 80080de:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80080e2:	e0c6      	b.n	8008272 <UART_SetConfig+0x7ae>
 80080e4:	2340      	movs	r3, #64	@ 0x40
 80080e6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80080ea:	e0c2      	b.n	8008272 <UART_SetConfig+0x7ae>
 80080ec:	2380      	movs	r3, #128	@ 0x80
 80080ee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80080f2:	e0be      	b.n	8008272 <UART_SetConfig+0x7ae>
 80080f4:	40011400 	.word	0x40011400
 80080f8:	58024400 	.word	0x58024400
 80080fc:	40007800 	.word	0x40007800
 8008100:	40007c00 	.word	0x40007c00
 8008104:	40011800 	.word	0x40011800
 8008108:	697b      	ldr	r3, [r7, #20]
 800810a:	681b      	ldr	r3, [r3, #0]
 800810c:	4aad      	ldr	r2, [pc, #692]	@ (80083c4 <UART_SetConfig+0x900>)
 800810e:	4293      	cmp	r3, r2
 8008110:	d176      	bne.n	8008200 <UART_SetConfig+0x73c>
 8008112:	4bad      	ldr	r3, [pc, #692]	@ (80083c8 <UART_SetConfig+0x904>)
 8008114:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008116:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800811a:	2b28      	cmp	r3, #40	@ 0x28
 800811c:	d86c      	bhi.n	80081f8 <UART_SetConfig+0x734>
 800811e:	a201      	add	r2, pc, #4	@ (adr r2, 8008124 <UART_SetConfig+0x660>)
 8008120:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008124:	080081c9 	.word	0x080081c9
 8008128:	080081f9 	.word	0x080081f9
 800812c:	080081f9 	.word	0x080081f9
 8008130:	080081f9 	.word	0x080081f9
 8008134:	080081f9 	.word	0x080081f9
 8008138:	080081f9 	.word	0x080081f9
 800813c:	080081f9 	.word	0x080081f9
 8008140:	080081f9 	.word	0x080081f9
 8008144:	080081d1 	.word	0x080081d1
 8008148:	080081f9 	.word	0x080081f9
 800814c:	080081f9 	.word	0x080081f9
 8008150:	080081f9 	.word	0x080081f9
 8008154:	080081f9 	.word	0x080081f9
 8008158:	080081f9 	.word	0x080081f9
 800815c:	080081f9 	.word	0x080081f9
 8008160:	080081f9 	.word	0x080081f9
 8008164:	080081d9 	.word	0x080081d9
 8008168:	080081f9 	.word	0x080081f9
 800816c:	080081f9 	.word	0x080081f9
 8008170:	080081f9 	.word	0x080081f9
 8008174:	080081f9 	.word	0x080081f9
 8008178:	080081f9 	.word	0x080081f9
 800817c:	080081f9 	.word	0x080081f9
 8008180:	080081f9 	.word	0x080081f9
 8008184:	080081e1 	.word	0x080081e1
 8008188:	080081f9 	.word	0x080081f9
 800818c:	080081f9 	.word	0x080081f9
 8008190:	080081f9 	.word	0x080081f9
 8008194:	080081f9 	.word	0x080081f9
 8008198:	080081f9 	.word	0x080081f9
 800819c:	080081f9 	.word	0x080081f9
 80081a0:	080081f9 	.word	0x080081f9
 80081a4:	080081e9 	.word	0x080081e9
 80081a8:	080081f9 	.word	0x080081f9
 80081ac:	080081f9 	.word	0x080081f9
 80081b0:	080081f9 	.word	0x080081f9
 80081b4:	080081f9 	.word	0x080081f9
 80081b8:	080081f9 	.word	0x080081f9
 80081bc:	080081f9 	.word	0x080081f9
 80081c0:	080081f9 	.word	0x080081f9
 80081c4:	080081f1 	.word	0x080081f1
 80081c8:	2301      	movs	r3, #1
 80081ca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80081ce:	e050      	b.n	8008272 <UART_SetConfig+0x7ae>
 80081d0:	2304      	movs	r3, #4
 80081d2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80081d6:	e04c      	b.n	8008272 <UART_SetConfig+0x7ae>
 80081d8:	2308      	movs	r3, #8
 80081da:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80081de:	e048      	b.n	8008272 <UART_SetConfig+0x7ae>
 80081e0:	2310      	movs	r3, #16
 80081e2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80081e6:	e044      	b.n	8008272 <UART_SetConfig+0x7ae>
 80081e8:	2320      	movs	r3, #32
 80081ea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80081ee:	e040      	b.n	8008272 <UART_SetConfig+0x7ae>
 80081f0:	2340      	movs	r3, #64	@ 0x40
 80081f2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80081f6:	e03c      	b.n	8008272 <UART_SetConfig+0x7ae>
 80081f8:	2380      	movs	r3, #128	@ 0x80
 80081fa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80081fe:	e038      	b.n	8008272 <UART_SetConfig+0x7ae>
 8008200:	697b      	ldr	r3, [r7, #20]
 8008202:	681b      	ldr	r3, [r3, #0]
 8008204:	4a71      	ldr	r2, [pc, #452]	@ (80083cc <UART_SetConfig+0x908>)
 8008206:	4293      	cmp	r3, r2
 8008208:	d130      	bne.n	800826c <UART_SetConfig+0x7a8>
 800820a:	4b6f      	ldr	r3, [pc, #444]	@ (80083c8 <UART_SetConfig+0x904>)
 800820c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800820e:	f003 0307 	and.w	r3, r3, #7
 8008212:	2b05      	cmp	r3, #5
 8008214:	d826      	bhi.n	8008264 <UART_SetConfig+0x7a0>
 8008216:	a201      	add	r2, pc, #4	@ (adr r2, 800821c <UART_SetConfig+0x758>)
 8008218:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800821c:	08008235 	.word	0x08008235
 8008220:	0800823d 	.word	0x0800823d
 8008224:	08008245 	.word	0x08008245
 8008228:	0800824d 	.word	0x0800824d
 800822c:	08008255 	.word	0x08008255
 8008230:	0800825d 	.word	0x0800825d
 8008234:	2302      	movs	r3, #2
 8008236:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800823a:	e01a      	b.n	8008272 <UART_SetConfig+0x7ae>
 800823c:	2304      	movs	r3, #4
 800823e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008242:	e016      	b.n	8008272 <UART_SetConfig+0x7ae>
 8008244:	2308      	movs	r3, #8
 8008246:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800824a:	e012      	b.n	8008272 <UART_SetConfig+0x7ae>
 800824c:	2310      	movs	r3, #16
 800824e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008252:	e00e      	b.n	8008272 <UART_SetConfig+0x7ae>
 8008254:	2320      	movs	r3, #32
 8008256:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800825a:	e00a      	b.n	8008272 <UART_SetConfig+0x7ae>
 800825c:	2340      	movs	r3, #64	@ 0x40
 800825e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008262:	e006      	b.n	8008272 <UART_SetConfig+0x7ae>
 8008264:	2380      	movs	r3, #128	@ 0x80
 8008266:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800826a:	e002      	b.n	8008272 <UART_SetConfig+0x7ae>
 800826c:	2380      	movs	r3, #128	@ 0x80
 800826e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8008272:	697b      	ldr	r3, [r7, #20]
 8008274:	681b      	ldr	r3, [r3, #0]
 8008276:	4a55      	ldr	r2, [pc, #340]	@ (80083cc <UART_SetConfig+0x908>)
 8008278:	4293      	cmp	r3, r2
 800827a:	f040 80f8 	bne.w	800846e <UART_SetConfig+0x9aa>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800827e:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8008282:	2b20      	cmp	r3, #32
 8008284:	dc46      	bgt.n	8008314 <UART_SetConfig+0x850>
 8008286:	2b02      	cmp	r3, #2
 8008288:	db75      	blt.n	8008376 <UART_SetConfig+0x8b2>
 800828a:	3b02      	subs	r3, #2
 800828c:	2b1e      	cmp	r3, #30
 800828e:	d872      	bhi.n	8008376 <UART_SetConfig+0x8b2>
 8008290:	a201      	add	r2, pc, #4	@ (adr r2, 8008298 <UART_SetConfig+0x7d4>)
 8008292:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008296:	bf00      	nop
 8008298:	0800831b 	.word	0x0800831b
 800829c:	08008377 	.word	0x08008377
 80082a0:	08008323 	.word	0x08008323
 80082a4:	08008377 	.word	0x08008377
 80082a8:	08008377 	.word	0x08008377
 80082ac:	08008377 	.word	0x08008377
 80082b0:	08008333 	.word	0x08008333
 80082b4:	08008377 	.word	0x08008377
 80082b8:	08008377 	.word	0x08008377
 80082bc:	08008377 	.word	0x08008377
 80082c0:	08008377 	.word	0x08008377
 80082c4:	08008377 	.word	0x08008377
 80082c8:	08008377 	.word	0x08008377
 80082cc:	08008377 	.word	0x08008377
 80082d0:	08008343 	.word	0x08008343
 80082d4:	08008377 	.word	0x08008377
 80082d8:	08008377 	.word	0x08008377
 80082dc:	08008377 	.word	0x08008377
 80082e0:	08008377 	.word	0x08008377
 80082e4:	08008377 	.word	0x08008377
 80082e8:	08008377 	.word	0x08008377
 80082ec:	08008377 	.word	0x08008377
 80082f0:	08008377 	.word	0x08008377
 80082f4:	08008377 	.word	0x08008377
 80082f8:	08008377 	.word	0x08008377
 80082fc:	08008377 	.word	0x08008377
 8008300:	08008377 	.word	0x08008377
 8008304:	08008377 	.word	0x08008377
 8008308:	08008377 	.word	0x08008377
 800830c:	08008377 	.word	0x08008377
 8008310:	08008369 	.word	0x08008369
 8008314:	2b40      	cmp	r3, #64	@ 0x40
 8008316:	d02a      	beq.n	800836e <UART_SetConfig+0x8aa>
 8008318:	e02d      	b.n	8008376 <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800831a:	f7fd fcf5 	bl	8005d08 <HAL_RCCEx_GetD3PCLK1Freq>
 800831e:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8008320:	e02f      	b.n	8008382 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008322:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8008326:	4618      	mov	r0, r3
 8008328:	f7fd fd04 	bl	8005d34 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800832c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800832e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008330:	e027      	b.n	8008382 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008332:	f107 0318 	add.w	r3, r7, #24
 8008336:	4618      	mov	r0, r3
 8008338:	f7fd fe50 	bl	8005fdc <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800833c:	69fb      	ldr	r3, [r7, #28]
 800833e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008340:	e01f      	b.n	8008382 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008342:	4b21      	ldr	r3, [pc, #132]	@ (80083c8 <UART_SetConfig+0x904>)
 8008344:	681b      	ldr	r3, [r3, #0]
 8008346:	f003 0320 	and.w	r3, r3, #32
 800834a:	2b00      	cmp	r3, #0
 800834c:	d009      	beq.n	8008362 <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800834e:	4b1e      	ldr	r3, [pc, #120]	@ (80083c8 <UART_SetConfig+0x904>)
 8008350:	681b      	ldr	r3, [r3, #0]
 8008352:	08db      	lsrs	r3, r3, #3
 8008354:	f003 0303 	and.w	r3, r3, #3
 8008358:	4a1d      	ldr	r2, [pc, #116]	@ (80083d0 <UART_SetConfig+0x90c>)
 800835a:	fa22 f303 	lsr.w	r3, r2, r3
 800835e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8008360:	e00f      	b.n	8008382 <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 8008362:	4b1b      	ldr	r3, [pc, #108]	@ (80083d0 <UART_SetConfig+0x90c>)
 8008364:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008366:	e00c      	b.n	8008382 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8008368:	4b1a      	ldr	r3, [pc, #104]	@ (80083d4 <UART_SetConfig+0x910>)
 800836a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800836c:	e009      	b.n	8008382 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800836e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8008372:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008374:	e005      	b.n	8008382 <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 8008376:	2300      	movs	r3, #0
 8008378:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800837a:	2301      	movs	r3, #1
 800837c:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8008380:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8008382:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008384:	2b00      	cmp	r3, #0
 8008386:	f000 81ee 	beq.w	8008766 <UART_SetConfig+0xca2>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800838a:	697b      	ldr	r3, [r7, #20]
 800838c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800838e:	4a12      	ldr	r2, [pc, #72]	@ (80083d8 <UART_SetConfig+0x914>)
 8008390:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008394:	461a      	mov	r2, r3
 8008396:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008398:	fbb3 f3f2 	udiv	r3, r3, r2
 800839c:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800839e:	697b      	ldr	r3, [r7, #20]
 80083a0:	685a      	ldr	r2, [r3, #4]
 80083a2:	4613      	mov	r3, r2
 80083a4:	005b      	lsls	r3, r3, #1
 80083a6:	4413      	add	r3, r2
 80083a8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80083aa:	429a      	cmp	r2, r3
 80083ac:	d305      	bcc.n	80083ba <UART_SetConfig+0x8f6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80083ae:	697b      	ldr	r3, [r7, #20]
 80083b0:	685b      	ldr	r3, [r3, #4]
 80083b2:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80083b4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80083b6:	429a      	cmp	r2, r3
 80083b8:	d910      	bls.n	80083dc <UART_SetConfig+0x918>
      {
        ret = HAL_ERROR;
 80083ba:	2301      	movs	r3, #1
 80083bc:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 80083c0:	e1d1      	b.n	8008766 <UART_SetConfig+0xca2>
 80083c2:	bf00      	nop
 80083c4:	40011c00 	.word	0x40011c00
 80083c8:	58024400 	.word	0x58024400
 80083cc:	58000c00 	.word	0x58000c00
 80083d0:	03d09000 	.word	0x03d09000
 80083d4:	003d0900 	.word	0x003d0900
 80083d8:	0800bbd8 	.word	0x0800bbd8
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80083dc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80083de:	2200      	movs	r2, #0
 80083e0:	60bb      	str	r3, [r7, #8]
 80083e2:	60fa      	str	r2, [r7, #12]
 80083e4:	697b      	ldr	r3, [r7, #20]
 80083e6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80083e8:	4ac0      	ldr	r2, [pc, #768]	@ (80086ec <UART_SetConfig+0xc28>)
 80083ea:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80083ee:	b29b      	uxth	r3, r3
 80083f0:	2200      	movs	r2, #0
 80083f2:	603b      	str	r3, [r7, #0]
 80083f4:	607a      	str	r2, [r7, #4]
 80083f6:	e9d7 2300 	ldrd	r2, r3, [r7]
 80083fa:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80083fe:	f7f8 f943 	bl	8000688 <__aeabi_uldivmod>
 8008402:	4602      	mov	r2, r0
 8008404:	460b      	mov	r3, r1
 8008406:	4610      	mov	r0, r2
 8008408:	4619      	mov	r1, r3
 800840a:	f04f 0200 	mov.w	r2, #0
 800840e:	f04f 0300 	mov.w	r3, #0
 8008412:	020b      	lsls	r3, r1, #8
 8008414:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8008418:	0202      	lsls	r2, r0, #8
 800841a:	6979      	ldr	r1, [r7, #20]
 800841c:	6849      	ldr	r1, [r1, #4]
 800841e:	0849      	lsrs	r1, r1, #1
 8008420:	2000      	movs	r0, #0
 8008422:	460c      	mov	r4, r1
 8008424:	4605      	mov	r5, r0
 8008426:	eb12 0804 	adds.w	r8, r2, r4
 800842a:	eb43 0905 	adc.w	r9, r3, r5
 800842e:	697b      	ldr	r3, [r7, #20]
 8008430:	685b      	ldr	r3, [r3, #4]
 8008432:	2200      	movs	r2, #0
 8008434:	469a      	mov	sl, r3
 8008436:	4693      	mov	fp, r2
 8008438:	4652      	mov	r2, sl
 800843a:	465b      	mov	r3, fp
 800843c:	4640      	mov	r0, r8
 800843e:	4649      	mov	r1, r9
 8008440:	f7f8 f922 	bl	8000688 <__aeabi_uldivmod>
 8008444:	4602      	mov	r2, r0
 8008446:	460b      	mov	r3, r1
 8008448:	4613      	mov	r3, r2
 800844a:	63bb      	str	r3, [r7, #56]	@ 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800844c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800844e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8008452:	d308      	bcc.n	8008466 <UART_SetConfig+0x9a2>
 8008454:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008456:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800845a:	d204      	bcs.n	8008466 <UART_SetConfig+0x9a2>
        {
          huart->Instance->BRR = usartdiv;
 800845c:	697b      	ldr	r3, [r7, #20]
 800845e:	681b      	ldr	r3, [r3, #0]
 8008460:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8008462:	60da      	str	r2, [r3, #12]
 8008464:	e17f      	b.n	8008766 <UART_SetConfig+0xca2>
        }
        else
        {
          ret = HAL_ERROR;
 8008466:	2301      	movs	r3, #1
 8008468:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800846c:	e17b      	b.n	8008766 <UART_SetConfig+0xca2>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800846e:	697b      	ldr	r3, [r7, #20]
 8008470:	69db      	ldr	r3, [r3, #28]
 8008472:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8008476:	f040 80bd 	bne.w	80085f4 <UART_SetConfig+0xb30>
  {
    switch (clocksource)
 800847a:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800847e:	2b20      	cmp	r3, #32
 8008480:	dc48      	bgt.n	8008514 <UART_SetConfig+0xa50>
 8008482:	2b00      	cmp	r3, #0
 8008484:	db7b      	blt.n	800857e <UART_SetConfig+0xaba>
 8008486:	2b20      	cmp	r3, #32
 8008488:	d879      	bhi.n	800857e <UART_SetConfig+0xaba>
 800848a:	a201      	add	r2, pc, #4	@ (adr r2, 8008490 <UART_SetConfig+0x9cc>)
 800848c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008490:	0800851b 	.word	0x0800851b
 8008494:	08008523 	.word	0x08008523
 8008498:	0800857f 	.word	0x0800857f
 800849c:	0800857f 	.word	0x0800857f
 80084a0:	0800852b 	.word	0x0800852b
 80084a4:	0800857f 	.word	0x0800857f
 80084a8:	0800857f 	.word	0x0800857f
 80084ac:	0800857f 	.word	0x0800857f
 80084b0:	0800853b 	.word	0x0800853b
 80084b4:	0800857f 	.word	0x0800857f
 80084b8:	0800857f 	.word	0x0800857f
 80084bc:	0800857f 	.word	0x0800857f
 80084c0:	0800857f 	.word	0x0800857f
 80084c4:	0800857f 	.word	0x0800857f
 80084c8:	0800857f 	.word	0x0800857f
 80084cc:	0800857f 	.word	0x0800857f
 80084d0:	0800854b 	.word	0x0800854b
 80084d4:	0800857f 	.word	0x0800857f
 80084d8:	0800857f 	.word	0x0800857f
 80084dc:	0800857f 	.word	0x0800857f
 80084e0:	0800857f 	.word	0x0800857f
 80084e4:	0800857f 	.word	0x0800857f
 80084e8:	0800857f 	.word	0x0800857f
 80084ec:	0800857f 	.word	0x0800857f
 80084f0:	0800857f 	.word	0x0800857f
 80084f4:	0800857f 	.word	0x0800857f
 80084f8:	0800857f 	.word	0x0800857f
 80084fc:	0800857f 	.word	0x0800857f
 8008500:	0800857f 	.word	0x0800857f
 8008504:	0800857f 	.word	0x0800857f
 8008508:	0800857f 	.word	0x0800857f
 800850c:	0800857f 	.word	0x0800857f
 8008510:	08008571 	.word	0x08008571
 8008514:	2b40      	cmp	r3, #64	@ 0x40
 8008516:	d02e      	beq.n	8008576 <UART_SetConfig+0xab2>
 8008518:	e031      	b.n	800857e <UART_SetConfig+0xaba>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800851a:	f7fc f9e7 	bl	80048ec <HAL_RCC_GetPCLK1Freq>
 800851e:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8008520:	e033      	b.n	800858a <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008522:	f7fc f9f9 	bl	8004918 <HAL_RCC_GetPCLK2Freq>
 8008526:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8008528:	e02f      	b.n	800858a <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800852a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800852e:	4618      	mov	r0, r3
 8008530:	f7fd fc00 	bl	8005d34 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8008534:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008536:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008538:	e027      	b.n	800858a <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800853a:	f107 0318 	add.w	r3, r7, #24
 800853e:	4618      	mov	r0, r3
 8008540:	f7fd fd4c 	bl	8005fdc <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8008544:	69fb      	ldr	r3, [r7, #28]
 8008546:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008548:	e01f      	b.n	800858a <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800854a:	4b69      	ldr	r3, [pc, #420]	@ (80086f0 <UART_SetConfig+0xc2c>)
 800854c:	681b      	ldr	r3, [r3, #0]
 800854e:	f003 0320 	and.w	r3, r3, #32
 8008552:	2b00      	cmp	r3, #0
 8008554:	d009      	beq.n	800856a <UART_SetConfig+0xaa6>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8008556:	4b66      	ldr	r3, [pc, #408]	@ (80086f0 <UART_SetConfig+0xc2c>)
 8008558:	681b      	ldr	r3, [r3, #0]
 800855a:	08db      	lsrs	r3, r3, #3
 800855c:	f003 0303 	and.w	r3, r3, #3
 8008560:	4a64      	ldr	r2, [pc, #400]	@ (80086f4 <UART_SetConfig+0xc30>)
 8008562:	fa22 f303 	lsr.w	r3, r2, r3
 8008566:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8008568:	e00f      	b.n	800858a <UART_SetConfig+0xac6>
          pclk = (uint32_t) HSI_VALUE;
 800856a:	4b62      	ldr	r3, [pc, #392]	@ (80086f4 <UART_SetConfig+0xc30>)
 800856c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800856e:	e00c      	b.n	800858a <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8008570:	4b61      	ldr	r3, [pc, #388]	@ (80086f8 <UART_SetConfig+0xc34>)
 8008572:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008574:	e009      	b.n	800858a <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008576:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800857a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800857c:	e005      	b.n	800858a <UART_SetConfig+0xac6>
      default:
        pclk = 0U;
 800857e:	2300      	movs	r3, #0
 8008580:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8008582:	2301      	movs	r3, #1
 8008584:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8008588:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800858a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800858c:	2b00      	cmp	r3, #0
 800858e:	f000 80ea 	beq.w	8008766 <UART_SetConfig+0xca2>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008592:	697b      	ldr	r3, [r7, #20]
 8008594:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008596:	4a55      	ldr	r2, [pc, #340]	@ (80086ec <UART_SetConfig+0xc28>)
 8008598:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800859c:	461a      	mov	r2, r3
 800859e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80085a0:	fbb3 f3f2 	udiv	r3, r3, r2
 80085a4:	005a      	lsls	r2, r3, #1
 80085a6:	697b      	ldr	r3, [r7, #20]
 80085a8:	685b      	ldr	r3, [r3, #4]
 80085aa:	085b      	lsrs	r3, r3, #1
 80085ac:	441a      	add	r2, r3
 80085ae:	697b      	ldr	r3, [r7, #20]
 80085b0:	685b      	ldr	r3, [r3, #4]
 80085b2:	fbb2 f3f3 	udiv	r3, r2, r3
 80085b6:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80085b8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80085ba:	2b0f      	cmp	r3, #15
 80085bc:	d916      	bls.n	80085ec <UART_SetConfig+0xb28>
 80085be:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80085c0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80085c4:	d212      	bcs.n	80085ec <UART_SetConfig+0xb28>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80085c6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80085c8:	b29b      	uxth	r3, r3
 80085ca:	f023 030f 	bic.w	r3, r3, #15
 80085ce:	86fb      	strh	r3, [r7, #54]	@ 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80085d0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80085d2:	085b      	lsrs	r3, r3, #1
 80085d4:	b29b      	uxth	r3, r3
 80085d6:	f003 0307 	and.w	r3, r3, #7
 80085da:	b29a      	uxth	r2, r3
 80085dc:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 80085de:	4313      	orrs	r3, r2
 80085e0:	86fb      	strh	r3, [r7, #54]	@ 0x36
        huart->Instance->BRR = brrtemp;
 80085e2:	697b      	ldr	r3, [r7, #20]
 80085e4:	681b      	ldr	r3, [r3, #0]
 80085e6:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 80085e8:	60da      	str	r2, [r3, #12]
 80085ea:	e0bc      	b.n	8008766 <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 80085ec:	2301      	movs	r3, #1
 80085ee:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 80085f2:	e0b8      	b.n	8008766 <UART_SetConfig+0xca2>
      }
    }
  }
  else
  {
    switch (clocksource)
 80085f4:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 80085f8:	2b20      	cmp	r3, #32
 80085fa:	dc4b      	bgt.n	8008694 <UART_SetConfig+0xbd0>
 80085fc:	2b00      	cmp	r3, #0
 80085fe:	f2c0 8087 	blt.w	8008710 <UART_SetConfig+0xc4c>
 8008602:	2b20      	cmp	r3, #32
 8008604:	f200 8084 	bhi.w	8008710 <UART_SetConfig+0xc4c>
 8008608:	a201      	add	r2, pc, #4	@ (adr r2, 8008610 <UART_SetConfig+0xb4c>)
 800860a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800860e:	bf00      	nop
 8008610:	0800869b 	.word	0x0800869b
 8008614:	080086a3 	.word	0x080086a3
 8008618:	08008711 	.word	0x08008711
 800861c:	08008711 	.word	0x08008711
 8008620:	080086ab 	.word	0x080086ab
 8008624:	08008711 	.word	0x08008711
 8008628:	08008711 	.word	0x08008711
 800862c:	08008711 	.word	0x08008711
 8008630:	080086bb 	.word	0x080086bb
 8008634:	08008711 	.word	0x08008711
 8008638:	08008711 	.word	0x08008711
 800863c:	08008711 	.word	0x08008711
 8008640:	08008711 	.word	0x08008711
 8008644:	08008711 	.word	0x08008711
 8008648:	08008711 	.word	0x08008711
 800864c:	08008711 	.word	0x08008711
 8008650:	080086cb 	.word	0x080086cb
 8008654:	08008711 	.word	0x08008711
 8008658:	08008711 	.word	0x08008711
 800865c:	08008711 	.word	0x08008711
 8008660:	08008711 	.word	0x08008711
 8008664:	08008711 	.word	0x08008711
 8008668:	08008711 	.word	0x08008711
 800866c:	08008711 	.word	0x08008711
 8008670:	08008711 	.word	0x08008711
 8008674:	08008711 	.word	0x08008711
 8008678:	08008711 	.word	0x08008711
 800867c:	08008711 	.word	0x08008711
 8008680:	08008711 	.word	0x08008711
 8008684:	08008711 	.word	0x08008711
 8008688:	08008711 	.word	0x08008711
 800868c:	08008711 	.word	0x08008711
 8008690:	08008703 	.word	0x08008703
 8008694:	2b40      	cmp	r3, #64	@ 0x40
 8008696:	d037      	beq.n	8008708 <UART_SetConfig+0xc44>
 8008698:	e03a      	b.n	8008710 <UART_SetConfig+0xc4c>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800869a:	f7fc f927 	bl	80048ec <HAL_RCC_GetPCLK1Freq>
 800869e:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 80086a0:	e03c      	b.n	800871c <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80086a2:	f7fc f939 	bl	8004918 <HAL_RCC_GetPCLK2Freq>
 80086a6:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 80086a8:	e038      	b.n	800871c <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80086aa:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80086ae:	4618      	mov	r0, r3
 80086b0:	f7fd fb40 	bl	8005d34 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80086b4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80086b6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80086b8:	e030      	b.n	800871c <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80086ba:	f107 0318 	add.w	r3, r7, #24
 80086be:	4618      	mov	r0, r3
 80086c0:	f7fd fc8c 	bl	8005fdc <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80086c4:	69fb      	ldr	r3, [r7, #28]
 80086c6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80086c8:	e028      	b.n	800871c <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80086ca:	4b09      	ldr	r3, [pc, #36]	@ (80086f0 <UART_SetConfig+0xc2c>)
 80086cc:	681b      	ldr	r3, [r3, #0]
 80086ce:	f003 0320 	and.w	r3, r3, #32
 80086d2:	2b00      	cmp	r3, #0
 80086d4:	d012      	beq.n	80086fc <UART_SetConfig+0xc38>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80086d6:	4b06      	ldr	r3, [pc, #24]	@ (80086f0 <UART_SetConfig+0xc2c>)
 80086d8:	681b      	ldr	r3, [r3, #0]
 80086da:	08db      	lsrs	r3, r3, #3
 80086dc:	f003 0303 	and.w	r3, r3, #3
 80086e0:	4a04      	ldr	r2, [pc, #16]	@ (80086f4 <UART_SetConfig+0xc30>)
 80086e2:	fa22 f303 	lsr.w	r3, r2, r3
 80086e6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80086e8:	e018      	b.n	800871c <UART_SetConfig+0xc58>
 80086ea:	bf00      	nop
 80086ec:	0800bbd8 	.word	0x0800bbd8
 80086f0:	58024400 	.word	0x58024400
 80086f4:	03d09000 	.word	0x03d09000
 80086f8:	003d0900 	.word	0x003d0900
          pclk = (uint32_t) HSI_VALUE;
 80086fc:	4b24      	ldr	r3, [pc, #144]	@ (8008790 <UART_SetConfig+0xccc>)
 80086fe:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008700:	e00c      	b.n	800871c <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8008702:	4b24      	ldr	r3, [pc, #144]	@ (8008794 <UART_SetConfig+0xcd0>)
 8008704:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008706:	e009      	b.n	800871c <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008708:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800870c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800870e:	e005      	b.n	800871c <UART_SetConfig+0xc58>
      default:
        pclk = 0U;
 8008710:	2300      	movs	r3, #0
 8008712:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8008714:	2301      	movs	r3, #1
 8008716:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800871a:	bf00      	nop
    }

    if (pclk != 0U)
 800871c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800871e:	2b00      	cmp	r3, #0
 8008720:	d021      	beq.n	8008766 <UART_SetConfig+0xca2>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008722:	697b      	ldr	r3, [r7, #20]
 8008724:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008726:	4a1c      	ldr	r2, [pc, #112]	@ (8008798 <UART_SetConfig+0xcd4>)
 8008728:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800872c:	461a      	mov	r2, r3
 800872e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008730:	fbb3 f2f2 	udiv	r2, r3, r2
 8008734:	697b      	ldr	r3, [r7, #20]
 8008736:	685b      	ldr	r3, [r3, #4]
 8008738:	085b      	lsrs	r3, r3, #1
 800873a:	441a      	add	r2, r3
 800873c:	697b      	ldr	r3, [r7, #20]
 800873e:	685b      	ldr	r3, [r3, #4]
 8008740:	fbb2 f3f3 	udiv	r3, r2, r3
 8008744:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008746:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008748:	2b0f      	cmp	r3, #15
 800874a:	d909      	bls.n	8008760 <UART_SetConfig+0xc9c>
 800874c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800874e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008752:	d205      	bcs.n	8008760 <UART_SetConfig+0xc9c>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8008754:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008756:	b29a      	uxth	r2, r3
 8008758:	697b      	ldr	r3, [r7, #20]
 800875a:	681b      	ldr	r3, [r3, #0]
 800875c:	60da      	str	r2, [r3, #12]
 800875e:	e002      	b.n	8008766 <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 8008760:	2301      	movs	r3, #1
 8008762:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8008766:	697b      	ldr	r3, [r7, #20]
 8008768:	2201      	movs	r2, #1
 800876a:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 800876e:	697b      	ldr	r3, [r7, #20]
 8008770:	2201      	movs	r2, #1
 8008772:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8008776:	697b      	ldr	r3, [r7, #20]
 8008778:	2200      	movs	r2, #0
 800877a:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 800877c:	697b      	ldr	r3, [r7, #20]
 800877e:	2200      	movs	r2, #0
 8008780:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8008782:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
}
 8008786:	4618      	mov	r0, r3
 8008788:	3748      	adds	r7, #72	@ 0x48
 800878a:	46bd      	mov	sp, r7
 800878c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8008790:	03d09000 	.word	0x03d09000
 8008794:	003d0900 	.word	0x003d0900
 8008798:	0800bbd8 	.word	0x0800bbd8

0800879c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800879c:	b480      	push	{r7}
 800879e:	b083      	sub	sp, #12
 80087a0:	af00      	add	r7, sp, #0
 80087a2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80087a4:	687b      	ldr	r3, [r7, #4]
 80087a6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80087a8:	f003 0308 	and.w	r3, r3, #8
 80087ac:	2b00      	cmp	r3, #0
 80087ae:	d00a      	beq.n	80087c6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80087b0:	687b      	ldr	r3, [r7, #4]
 80087b2:	681b      	ldr	r3, [r3, #0]
 80087b4:	685b      	ldr	r3, [r3, #4]
 80087b6:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 80087ba:	687b      	ldr	r3, [r7, #4]
 80087bc:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80087be:	687b      	ldr	r3, [r7, #4]
 80087c0:	681b      	ldr	r3, [r3, #0]
 80087c2:	430a      	orrs	r2, r1
 80087c4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80087c6:	687b      	ldr	r3, [r7, #4]
 80087c8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80087ca:	f003 0301 	and.w	r3, r3, #1
 80087ce:	2b00      	cmp	r3, #0
 80087d0:	d00a      	beq.n	80087e8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80087d2:	687b      	ldr	r3, [r7, #4]
 80087d4:	681b      	ldr	r3, [r3, #0]
 80087d6:	685b      	ldr	r3, [r3, #4]
 80087d8:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 80087dc:	687b      	ldr	r3, [r7, #4]
 80087de:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80087e0:	687b      	ldr	r3, [r7, #4]
 80087e2:	681b      	ldr	r3, [r3, #0]
 80087e4:	430a      	orrs	r2, r1
 80087e6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80087e8:	687b      	ldr	r3, [r7, #4]
 80087ea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80087ec:	f003 0302 	and.w	r3, r3, #2
 80087f0:	2b00      	cmp	r3, #0
 80087f2:	d00a      	beq.n	800880a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80087f4:	687b      	ldr	r3, [r7, #4]
 80087f6:	681b      	ldr	r3, [r3, #0]
 80087f8:	685b      	ldr	r3, [r3, #4]
 80087fa:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 80087fe:	687b      	ldr	r3, [r7, #4]
 8008800:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8008802:	687b      	ldr	r3, [r7, #4]
 8008804:	681b      	ldr	r3, [r3, #0]
 8008806:	430a      	orrs	r2, r1
 8008808:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800880a:	687b      	ldr	r3, [r7, #4]
 800880c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800880e:	f003 0304 	and.w	r3, r3, #4
 8008812:	2b00      	cmp	r3, #0
 8008814:	d00a      	beq.n	800882c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8008816:	687b      	ldr	r3, [r7, #4]
 8008818:	681b      	ldr	r3, [r3, #0]
 800881a:	685b      	ldr	r3, [r3, #4]
 800881c:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8008820:	687b      	ldr	r3, [r7, #4]
 8008822:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8008824:	687b      	ldr	r3, [r7, #4]
 8008826:	681b      	ldr	r3, [r3, #0]
 8008828:	430a      	orrs	r2, r1
 800882a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800882c:	687b      	ldr	r3, [r7, #4]
 800882e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008830:	f003 0310 	and.w	r3, r3, #16
 8008834:	2b00      	cmp	r3, #0
 8008836:	d00a      	beq.n	800884e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8008838:	687b      	ldr	r3, [r7, #4]
 800883a:	681b      	ldr	r3, [r3, #0]
 800883c:	689b      	ldr	r3, [r3, #8]
 800883e:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8008842:	687b      	ldr	r3, [r7, #4]
 8008844:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8008846:	687b      	ldr	r3, [r7, #4]
 8008848:	681b      	ldr	r3, [r3, #0]
 800884a:	430a      	orrs	r2, r1
 800884c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800884e:	687b      	ldr	r3, [r7, #4]
 8008850:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008852:	f003 0320 	and.w	r3, r3, #32
 8008856:	2b00      	cmp	r3, #0
 8008858:	d00a      	beq.n	8008870 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800885a:	687b      	ldr	r3, [r7, #4]
 800885c:	681b      	ldr	r3, [r3, #0]
 800885e:	689b      	ldr	r3, [r3, #8]
 8008860:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8008864:	687b      	ldr	r3, [r7, #4]
 8008866:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8008868:	687b      	ldr	r3, [r7, #4]
 800886a:	681b      	ldr	r3, [r3, #0]
 800886c:	430a      	orrs	r2, r1
 800886e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8008870:	687b      	ldr	r3, [r7, #4]
 8008872:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008874:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008878:	2b00      	cmp	r3, #0
 800887a:	d01a      	beq.n	80088b2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800887c:	687b      	ldr	r3, [r7, #4]
 800887e:	681b      	ldr	r3, [r3, #0]
 8008880:	685b      	ldr	r3, [r3, #4]
 8008882:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8008886:	687b      	ldr	r3, [r7, #4]
 8008888:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800888a:	687b      	ldr	r3, [r7, #4]
 800888c:	681b      	ldr	r3, [r3, #0]
 800888e:	430a      	orrs	r2, r1
 8008890:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8008892:	687b      	ldr	r3, [r7, #4]
 8008894:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008896:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800889a:	d10a      	bne.n	80088b2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800889c:	687b      	ldr	r3, [r7, #4]
 800889e:	681b      	ldr	r3, [r3, #0]
 80088a0:	685b      	ldr	r3, [r3, #4]
 80088a2:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 80088a6:	687b      	ldr	r3, [r7, #4]
 80088a8:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80088aa:	687b      	ldr	r3, [r7, #4]
 80088ac:	681b      	ldr	r3, [r3, #0]
 80088ae:	430a      	orrs	r2, r1
 80088b0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80088b2:	687b      	ldr	r3, [r7, #4]
 80088b4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80088b6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80088ba:	2b00      	cmp	r3, #0
 80088bc:	d00a      	beq.n	80088d4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80088be:	687b      	ldr	r3, [r7, #4]
 80088c0:	681b      	ldr	r3, [r3, #0]
 80088c2:	685b      	ldr	r3, [r3, #4]
 80088c4:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 80088c8:	687b      	ldr	r3, [r7, #4]
 80088ca:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80088cc:	687b      	ldr	r3, [r7, #4]
 80088ce:	681b      	ldr	r3, [r3, #0]
 80088d0:	430a      	orrs	r2, r1
 80088d2:	605a      	str	r2, [r3, #4]
  }
}
 80088d4:	bf00      	nop
 80088d6:	370c      	adds	r7, #12
 80088d8:	46bd      	mov	sp, r7
 80088da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088de:	4770      	bx	lr

080088e0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80088e0:	b580      	push	{r7, lr}
 80088e2:	b098      	sub	sp, #96	@ 0x60
 80088e4:	af02      	add	r7, sp, #8
 80088e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80088e8:	687b      	ldr	r3, [r7, #4]
 80088ea:	2200      	movs	r2, #0
 80088ec:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80088f0:	f7f9 fe96 	bl	8002620 <HAL_GetTick>
 80088f4:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80088f6:	687b      	ldr	r3, [r7, #4]
 80088f8:	681b      	ldr	r3, [r3, #0]
 80088fa:	681b      	ldr	r3, [r3, #0]
 80088fc:	f003 0308 	and.w	r3, r3, #8
 8008900:	2b08      	cmp	r3, #8
 8008902:	d12f      	bne.n	8008964 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008904:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8008908:	9300      	str	r3, [sp, #0]
 800890a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800890c:	2200      	movs	r2, #0
 800890e:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8008912:	6878      	ldr	r0, [r7, #4]
 8008914:	f000 f88e 	bl	8008a34 <UART_WaitOnFlagUntilTimeout>
 8008918:	4603      	mov	r3, r0
 800891a:	2b00      	cmp	r3, #0
 800891c:	d022      	beq.n	8008964 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800891e:	687b      	ldr	r3, [r7, #4]
 8008920:	681b      	ldr	r3, [r3, #0]
 8008922:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008924:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008926:	e853 3f00 	ldrex	r3, [r3]
 800892a:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800892c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800892e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8008932:	653b      	str	r3, [r7, #80]	@ 0x50
 8008934:	687b      	ldr	r3, [r7, #4]
 8008936:	681b      	ldr	r3, [r3, #0]
 8008938:	461a      	mov	r2, r3
 800893a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800893c:	647b      	str	r3, [r7, #68]	@ 0x44
 800893e:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008940:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8008942:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8008944:	e841 2300 	strex	r3, r2, [r1]
 8008948:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800894a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800894c:	2b00      	cmp	r3, #0
 800894e:	d1e6      	bne.n	800891e <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8008950:	687b      	ldr	r3, [r7, #4]
 8008952:	2220      	movs	r2, #32
 8008954:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8008958:	687b      	ldr	r3, [r7, #4]
 800895a:	2200      	movs	r2, #0
 800895c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008960:	2303      	movs	r3, #3
 8008962:	e063      	b.n	8008a2c <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8008964:	687b      	ldr	r3, [r7, #4]
 8008966:	681b      	ldr	r3, [r3, #0]
 8008968:	681b      	ldr	r3, [r3, #0]
 800896a:	f003 0304 	and.w	r3, r3, #4
 800896e:	2b04      	cmp	r3, #4
 8008970:	d149      	bne.n	8008a06 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008972:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8008976:	9300      	str	r3, [sp, #0]
 8008978:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800897a:	2200      	movs	r2, #0
 800897c:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8008980:	6878      	ldr	r0, [r7, #4]
 8008982:	f000 f857 	bl	8008a34 <UART_WaitOnFlagUntilTimeout>
 8008986:	4603      	mov	r3, r0
 8008988:	2b00      	cmp	r3, #0
 800898a:	d03c      	beq.n	8008a06 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800898c:	687b      	ldr	r3, [r7, #4]
 800898e:	681b      	ldr	r3, [r3, #0]
 8008990:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008992:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008994:	e853 3f00 	ldrex	r3, [r3]
 8008998:	623b      	str	r3, [r7, #32]
   return(result);
 800899a:	6a3b      	ldr	r3, [r7, #32]
 800899c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80089a0:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80089a2:	687b      	ldr	r3, [r7, #4]
 80089a4:	681b      	ldr	r3, [r3, #0]
 80089a6:	461a      	mov	r2, r3
 80089a8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80089aa:	633b      	str	r3, [r7, #48]	@ 0x30
 80089ac:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80089ae:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80089b0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80089b2:	e841 2300 	strex	r3, r2, [r1]
 80089b6:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80089b8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80089ba:	2b00      	cmp	r3, #0
 80089bc:	d1e6      	bne.n	800898c <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80089be:	687b      	ldr	r3, [r7, #4]
 80089c0:	681b      	ldr	r3, [r3, #0]
 80089c2:	3308      	adds	r3, #8
 80089c4:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80089c6:	693b      	ldr	r3, [r7, #16]
 80089c8:	e853 3f00 	ldrex	r3, [r3]
 80089cc:	60fb      	str	r3, [r7, #12]
   return(result);
 80089ce:	68fb      	ldr	r3, [r7, #12]
 80089d0:	f023 0301 	bic.w	r3, r3, #1
 80089d4:	64bb      	str	r3, [r7, #72]	@ 0x48
 80089d6:	687b      	ldr	r3, [r7, #4]
 80089d8:	681b      	ldr	r3, [r3, #0]
 80089da:	3308      	adds	r3, #8
 80089dc:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80089de:	61fa      	str	r2, [r7, #28]
 80089e0:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80089e2:	69b9      	ldr	r1, [r7, #24]
 80089e4:	69fa      	ldr	r2, [r7, #28]
 80089e6:	e841 2300 	strex	r3, r2, [r1]
 80089ea:	617b      	str	r3, [r7, #20]
   return(result);
 80089ec:	697b      	ldr	r3, [r7, #20]
 80089ee:	2b00      	cmp	r3, #0
 80089f0:	d1e5      	bne.n	80089be <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 80089f2:	687b      	ldr	r3, [r7, #4]
 80089f4:	2220      	movs	r2, #32
 80089f6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 80089fa:	687b      	ldr	r3, [r7, #4]
 80089fc:	2200      	movs	r2, #0
 80089fe:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008a02:	2303      	movs	r3, #3
 8008a04:	e012      	b.n	8008a2c <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8008a06:	687b      	ldr	r3, [r7, #4]
 8008a08:	2220      	movs	r2, #32
 8008a0a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8008a0e:	687b      	ldr	r3, [r7, #4]
 8008a10:	2220      	movs	r2, #32
 8008a12:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008a16:	687b      	ldr	r3, [r7, #4]
 8008a18:	2200      	movs	r2, #0
 8008a1a:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008a1c:	687b      	ldr	r3, [r7, #4]
 8008a1e:	2200      	movs	r2, #0
 8008a20:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8008a22:	687b      	ldr	r3, [r7, #4]
 8008a24:	2200      	movs	r2, #0
 8008a26:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8008a2a:	2300      	movs	r3, #0
}
 8008a2c:	4618      	mov	r0, r3
 8008a2e:	3758      	adds	r7, #88	@ 0x58
 8008a30:	46bd      	mov	sp, r7
 8008a32:	bd80      	pop	{r7, pc}

08008a34 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8008a34:	b580      	push	{r7, lr}
 8008a36:	b084      	sub	sp, #16
 8008a38:	af00      	add	r7, sp, #0
 8008a3a:	60f8      	str	r0, [r7, #12]
 8008a3c:	60b9      	str	r1, [r7, #8]
 8008a3e:	603b      	str	r3, [r7, #0]
 8008a40:	4613      	mov	r3, r2
 8008a42:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008a44:	e04f      	b.n	8008ae6 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008a46:	69bb      	ldr	r3, [r7, #24]
 8008a48:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008a4c:	d04b      	beq.n	8008ae6 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008a4e:	f7f9 fde7 	bl	8002620 <HAL_GetTick>
 8008a52:	4602      	mov	r2, r0
 8008a54:	683b      	ldr	r3, [r7, #0]
 8008a56:	1ad3      	subs	r3, r2, r3
 8008a58:	69ba      	ldr	r2, [r7, #24]
 8008a5a:	429a      	cmp	r2, r3
 8008a5c:	d302      	bcc.n	8008a64 <UART_WaitOnFlagUntilTimeout+0x30>
 8008a5e:	69bb      	ldr	r3, [r7, #24]
 8008a60:	2b00      	cmp	r3, #0
 8008a62:	d101      	bne.n	8008a68 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8008a64:	2303      	movs	r3, #3
 8008a66:	e04e      	b.n	8008b06 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8008a68:	68fb      	ldr	r3, [r7, #12]
 8008a6a:	681b      	ldr	r3, [r3, #0]
 8008a6c:	681b      	ldr	r3, [r3, #0]
 8008a6e:	f003 0304 	and.w	r3, r3, #4
 8008a72:	2b00      	cmp	r3, #0
 8008a74:	d037      	beq.n	8008ae6 <UART_WaitOnFlagUntilTimeout+0xb2>
 8008a76:	68bb      	ldr	r3, [r7, #8]
 8008a78:	2b80      	cmp	r3, #128	@ 0x80
 8008a7a:	d034      	beq.n	8008ae6 <UART_WaitOnFlagUntilTimeout+0xb2>
 8008a7c:	68bb      	ldr	r3, [r7, #8]
 8008a7e:	2b40      	cmp	r3, #64	@ 0x40
 8008a80:	d031      	beq.n	8008ae6 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8008a82:	68fb      	ldr	r3, [r7, #12]
 8008a84:	681b      	ldr	r3, [r3, #0]
 8008a86:	69db      	ldr	r3, [r3, #28]
 8008a88:	f003 0308 	and.w	r3, r3, #8
 8008a8c:	2b08      	cmp	r3, #8
 8008a8e:	d110      	bne.n	8008ab2 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8008a90:	68fb      	ldr	r3, [r7, #12]
 8008a92:	681b      	ldr	r3, [r3, #0]
 8008a94:	2208      	movs	r2, #8
 8008a96:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8008a98:	68f8      	ldr	r0, [r7, #12]
 8008a9a:	f000 f839 	bl	8008b10 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8008a9e:	68fb      	ldr	r3, [r7, #12]
 8008aa0:	2208      	movs	r2, #8
 8008aa2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8008aa6:	68fb      	ldr	r3, [r7, #12]
 8008aa8:	2200      	movs	r2, #0
 8008aaa:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 8008aae:	2301      	movs	r3, #1
 8008ab0:	e029      	b.n	8008b06 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8008ab2:	68fb      	ldr	r3, [r7, #12]
 8008ab4:	681b      	ldr	r3, [r3, #0]
 8008ab6:	69db      	ldr	r3, [r3, #28]
 8008ab8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8008abc:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8008ac0:	d111      	bne.n	8008ae6 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8008ac2:	68fb      	ldr	r3, [r7, #12]
 8008ac4:	681b      	ldr	r3, [r3, #0]
 8008ac6:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8008aca:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8008acc:	68f8      	ldr	r0, [r7, #12]
 8008ace:	f000 f81f 	bl	8008b10 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8008ad2:	68fb      	ldr	r3, [r7, #12]
 8008ad4:	2220      	movs	r2, #32
 8008ad6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8008ada:	68fb      	ldr	r3, [r7, #12]
 8008adc:	2200      	movs	r2, #0
 8008ade:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8008ae2:	2303      	movs	r3, #3
 8008ae4:	e00f      	b.n	8008b06 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008ae6:	68fb      	ldr	r3, [r7, #12]
 8008ae8:	681b      	ldr	r3, [r3, #0]
 8008aea:	69da      	ldr	r2, [r3, #28]
 8008aec:	68bb      	ldr	r3, [r7, #8]
 8008aee:	4013      	ands	r3, r2
 8008af0:	68ba      	ldr	r2, [r7, #8]
 8008af2:	429a      	cmp	r2, r3
 8008af4:	bf0c      	ite	eq
 8008af6:	2301      	moveq	r3, #1
 8008af8:	2300      	movne	r3, #0
 8008afa:	b2db      	uxtb	r3, r3
 8008afc:	461a      	mov	r2, r3
 8008afe:	79fb      	ldrb	r3, [r7, #7]
 8008b00:	429a      	cmp	r2, r3
 8008b02:	d0a0      	beq.n	8008a46 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8008b04:	2300      	movs	r3, #0
}
 8008b06:	4618      	mov	r0, r3
 8008b08:	3710      	adds	r7, #16
 8008b0a:	46bd      	mov	sp, r7
 8008b0c:	bd80      	pop	{r7, pc}
	...

08008b10 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8008b10:	b480      	push	{r7}
 8008b12:	b095      	sub	sp, #84	@ 0x54
 8008b14:	af00      	add	r7, sp, #0
 8008b16:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8008b18:	687b      	ldr	r3, [r7, #4]
 8008b1a:	681b      	ldr	r3, [r3, #0]
 8008b1c:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008b1e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008b20:	e853 3f00 	ldrex	r3, [r3]
 8008b24:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8008b26:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008b28:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8008b2c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8008b2e:	687b      	ldr	r3, [r7, #4]
 8008b30:	681b      	ldr	r3, [r3, #0]
 8008b32:	461a      	mov	r2, r3
 8008b34:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008b36:	643b      	str	r3, [r7, #64]	@ 0x40
 8008b38:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008b3a:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8008b3c:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8008b3e:	e841 2300 	strex	r3, r2, [r1]
 8008b42:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8008b44:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008b46:	2b00      	cmp	r3, #0
 8008b48:	d1e6      	bne.n	8008b18 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8008b4a:	687b      	ldr	r3, [r7, #4]
 8008b4c:	681b      	ldr	r3, [r3, #0]
 8008b4e:	3308      	adds	r3, #8
 8008b50:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008b52:	6a3b      	ldr	r3, [r7, #32]
 8008b54:	e853 3f00 	ldrex	r3, [r3]
 8008b58:	61fb      	str	r3, [r7, #28]
   return(result);
 8008b5a:	69fa      	ldr	r2, [r7, #28]
 8008b5c:	4b1e      	ldr	r3, [pc, #120]	@ (8008bd8 <UART_EndRxTransfer+0xc8>)
 8008b5e:	4013      	ands	r3, r2
 8008b60:	64bb      	str	r3, [r7, #72]	@ 0x48
 8008b62:	687b      	ldr	r3, [r7, #4]
 8008b64:	681b      	ldr	r3, [r3, #0]
 8008b66:	3308      	adds	r3, #8
 8008b68:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8008b6a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8008b6c:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008b6e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8008b70:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8008b72:	e841 2300 	strex	r3, r2, [r1]
 8008b76:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8008b78:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008b7a:	2b00      	cmp	r3, #0
 8008b7c:	d1e5      	bne.n	8008b4a <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008b7e:	687b      	ldr	r3, [r7, #4]
 8008b80:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008b82:	2b01      	cmp	r3, #1
 8008b84:	d118      	bne.n	8008bb8 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008b86:	687b      	ldr	r3, [r7, #4]
 8008b88:	681b      	ldr	r3, [r3, #0]
 8008b8a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008b8c:	68fb      	ldr	r3, [r7, #12]
 8008b8e:	e853 3f00 	ldrex	r3, [r3]
 8008b92:	60bb      	str	r3, [r7, #8]
   return(result);
 8008b94:	68bb      	ldr	r3, [r7, #8]
 8008b96:	f023 0310 	bic.w	r3, r3, #16
 8008b9a:	647b      	str	r3, [r7, #68]	@ 0x44
 8008b9c:	687b      	ldr	r3, [r7, #4]
 8008b9e:	681b      	ldr	r3, [r3, #0]
 8008ba0:	461a      	mov	r2, r3
 8008ba2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8008ba4:	61bb      	str	r3, [r7, #24]
 8008ba6:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008ba8:	6979      	ldr	r1, [r7, #20]
 8008baa:	69ba      	ldr	r2, [r7, #24]
 8008bac:	e841 2300 	strex	r3, r2, [r1]
 8008bb0:	613b      	str	r3, [r7, #16]
   return(result);
 8008bb2:	693b      	ldr	r3, [r7, #16]
 8008bb4:	2b00      	cmp	r3, #0
 8008bb6:	d1e6      	bne.n	8008b86 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8008bb8:	687b      	ldr	r3, [r7, #4]
 8008bba:	2220      	movs	r2, #32
 8008bbc:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008bc0:	687b      	ldr	r3, [r7, #4]
 8008bc2:	2200      	movs	r2, #0
 8008bc4:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8008bc6:	687b      	ldr	r3, [r7, #4]
 8008bc8:	2200      	movs	r2, #0
 8008bca:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8008bcc:	bf00      	nop
 8008bce:	3754      	adds	r7, #84	@ 0x54
 8008bd0:	46bd      	mov	sp, r7
 8008bd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bd6:	4770      	bx	lr
 8008bd8:	effffffe 	.word	0xeffffffe

08008bdc <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8008bdc:	b480      	push	{r7}
 8008bde:	b085      	sub	sp, #20
 8008be0:	af00      	add	r7, sp, #0
 8008be2:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008be4:	687b      	ldr	r3, [r7, #4]
 8008be6:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8008bea:	2b01      	cmp	r3, #1
 8008bec:	d101      	bne.n	8008bf2 <HAL_UARTEx_DisableFifoMode+0x16>
 8008bee:	2302      	movs	r3, #2
 8008bf0:	e027      	b.n	8008c42 <HAL_UARTEx_DisableFifoMode+0x66>
 8008bf2:	687b      	ldr	r3, [r7, #4]
 8008bf4:	2201      	movs	r2, #1
 8008bf6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8008bfa:	687b      	ldr	r3, [r7, #4]
 8008bfc:	2224      	movs	r2, #36	@ 0x24
 8008bfe:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008c02:	687b      	ldr	r3, [r7, #4]
 8008c04:	681b      	ldr	r3, [r3, #0]
 8008c06:	681b      	ldr	r3, [r3, #0]
 8008c08:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008c0a:	687b      	ldr	r3, [r7, #4]
 8008c0c:	681b      	ldr	r3, [r3, #0]
 8008c0e:	681a      	ldr	r2, [r3, #0]
 8008c10:	687b      	ldr	r3, [r7, #4]
 8008c12:	681b      	ldr	r3, [r3, #0]
 8008c14:	f022 0201 	bic.w	r2, r2, #1
 8008c18:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8008c1a:	68fb      	ldr	r3, [r7, #12]
 8008c1c:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8008c20:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8008c22:	687b      	ldr	r3, [r7, #4]
 8008c24:	2200      	movs	r2, #0
 8008c26:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008c28:	687b      	ldr	r3, [r7, #4]
 8008c2a:	681b      	ldr	r3, [r3, #0]
 8008c2c:	68fa      	ldr	r2, [r7, #12]
 8008c2e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008c30:	687b      	ldr	r3, [r7, #4]
 8008c32:	2220      	movs	r2, #32
 8008c34:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008c38:	687b      	ldr	r3, [r7, #4]
 8008c3a:	2200      	movs	r2, #0
 8008c3c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8008c40:	2300      	movs	r3, #0
}
 8008c42:	4618      	mov	r0, r3
 8008c44:	3714      	adds	r7, #20
 8008c46:	46bd      	mov	sp, r7
 8008c48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c4c:	4770      	bx	lr

08008c4e <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8008c4e:	b580      	push	{r7, lr}
 8008c50:	b084      	sub	sp, #16
 8008c52:	af00      	add	r7, sp, #0
 8008c54:	6078      	str	r0, [r7, #4]
 8008c56:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008c58:	687b      	ldr	r3, [r7, #4]
 8008c5a:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8008c5e:	2b01      	cmp	r3, #1
 8008c60:	d101      	bne.n	8008c66 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8008c62:	2302      	movs	r3, #2
 8008c64:	e02d      	b.n	8008cc2 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8008c66:	687b      	ldr	r3, [r7, #4]
 8008c68:	2201      	movs	r2, #1
 8008c6a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8008c6e:	687b      	ldr	r3, [r7, #4]
 8008c70:	2224      	movs	r2, #36	@ 0x24
 8008c72:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008c76:	687b      	ldr	r3, [r7, #4]
 8008c78:	681b      	ldr	r3, [r3, #0]
 8008c7a:	681b      	ldr	r3, [r3, #0]
 8008c7c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008c7e:	687b      	ldr	r3, [r7, #4]
 8008c80:	681b      	ldr	r3, [r3, #0]
 8008c82:	681a      	ldr	r2, [r3, #0]
 8008c84:	687b      	ldr	r3, [r7, #4]
 8008c86:	681b      	ldr	r3, [r3, #0]
 8008c88:	f022 0201 	bic.w	r2, r2, #1
 8008c8c:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8008c8e:	687b      	ldr	r3, [r7, #4]
 8008c90:	681b      	ldr	r3, [r3, #0]
 8008c92:	689b      	ldr	r3, [r3, #8]
 8008c94:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 8008c98:	687b      	ldr	r3, [r7, #4]
 8008c9a:	681b      	ldr	r3, [r3, #0]
 8008c9c:	683a      	ldr	r2, [r7, #0]
 8008c9e:	430a      	orrs	r2, r1
 8008ca0:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8008ca2:	6878      	ldr	r0, [r7, #4]
 8008ca4:	f000 f850 	bl	8008d48 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008ca8:	687b      	ldr	r3, [r7, #4]
 8008caa:	681b      	ldr	r3, [r3, #0]
 8008cac:	68fa      	ldr	r2, [r7, #12]
 8008cae:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008cb0:	687b      	ldr	r3, [r7, #4]
 8008cb2:	2220      	movs	r2, #32
 8008cb4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008cb8:	687b      	ldr	r3, [r7, #4]
 8008cba:	2200      	movs	r2, #0
 8008cbc:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8008cc0:	2300      	movs	r3, #0
}
 8008cc2:	4618      	mov	r0, r3
 8008cc4:	3710      	adds	r7, #16
 8008cc6:	46bd      	mov	sp, r7
 8008cc8:	bd80      	pop	{r7, pc}

08008cca <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8008cca:	b580      	push	{r7, lr}
 8008ccc:	b084      	sub	sp, #16
 8008cce:	af00      	add	r7, sp, #0
 8008cd0:	6078      	str	r0, [r7, #4]
 8008cd2:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008cd4:	687b      	ldr	r3, [r7, #4]
 8008cd6:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8008cda:	2b01      	cmp	r3, #1
 8008cdc:	d101      	bne.n	8008ce2 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8008cde:	2302      	movs	r3, #2
 8008ce0:	e02d      	b.n	8008d3e <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8008ce2:	687b      	ldr	r3, [r7, #4]
 8008ce4:	2201      	movs	r2, #1
 8008ce6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8008cea:	687b      	ldr	r3, [r7, #4]
 8008cec:	2224      	movs	r2, #36	@ 0x24
 8008cee:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008cf2:	687b      	ldr	r3, [r7, #4]
 8008cf4:	681b      	ldr	r3, [r3, #0]
 8008cf6:	681b      	ldr	r3, [r3, #0]
 8008cf8:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008cfa:	687b      	ldr	r3, [r7, #4]
 8008cfc:	681b      	ldr	r3, [r3, #0]
 8008cfe:	681a      	ldr	r2, [r3, #0]
 8008d00:	687b      	ldr	r3, [r7, #4]
 8008d02:	681b      	ldr	r3, [r3, #0]
 8008d04:	f022 0201 	bic.w	r2, r2, #1
 8008d08:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8008d0a:	687b      	ldr	r3, [r7, #4]
 8008d0c:	681b      	ldr	r3, [r3, #0]
 8008d0e:	689b      	ldr	r3, [r3, #8]
 8008d10:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 8008d14:	687b      	ldr	r3, [r7, #4]
 8008d16:	681b      	ldr	r3, [r3, #0]
 8008d18:	683a      	ldr	r2, [r7, #0]
 8008d1a:	430a      	orrs	r2, r1
 8008d1c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8008d1e:	6878      	ldr	r0, [r7, #4]
 8008d20:	f000 f812 	bl	8008d48 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008d24:	687b      	ldr	r3, [r7, #4]
 8008d26:	681b      	ldr	r3, [r3, #0]
 8008d28:	68fa      	ldr	r2, [r7, #12]
 8008d2a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008d2c:	687b      	ldr	r3, [r7, #4]
 8008d2e:	2220      	movs	r2, #32
 8008d30:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008d34:	687b      	ldr	r3, [r7, #4]
 8008d36:	2200      	movs	r2, #0
 8008d38:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8008d3c:	2300      	movs	r3, #0
}
 8008d3e:	4618      	mov	r0, r3
 8008d40:	3710      	adds	r7, #16
 8008d42:	46bd      	mov	sp, r7
 8008d44:	bd80      	pop	{r7, pc}
	...

08008d48 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8008d48:	b480      	push	{r7}
 8008d4a:	b085      	sub	sp, #20
 8008d4c:	af00      	add	r7, sp, #0
 8008d4e:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8008d50:	687b      	ldr	r3, [r7, #4]
 8008d52:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008d54:	2b00      	cmp	r3, #0
 8008d56:	d108      	bne.n	8008d6a <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8008d58:	687b      	ldr	r3, [r7, #4]
 8008d5a:	2201      	movs	r2, #1
 8008d5c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 8008d60:	687b      	ldr	r3, [r7, #4]
 8008d62:	2201      	movs	r2, #1
 8008d64:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8008d68:	e031      	b.n	8008dce <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8008d6a:	2310      	movs	r3, #16
 8008d6c:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8008d6e:	2310      	movs	r3, #16
 8008d70:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8008d72:	687b      	ldr	r3, [r7, #4]
 8008d74:	681b      	ldr	r3, [r3, #0]
 8008d76:	689b      	ldr	r3, [r3, #8]
 8008d78:	0e5b      	lsrs	r3, r3, #25
 8008d7a:	b2db      	uxtb	r3, r3
 8008d7c:	f003 0307 	and.w	r3, r3, #7
 8008d80:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8008d82:	687b      	ldr	r3, [r7, #4]
 8008d84:	681b      	ldr	r3, [r3, #0]
 8008d86:	689b      	ldr	r3, [r3, #8]
 8008d88:	0f5b      	lsrs	r3, r3, #29
 8008d8a:	b2db      	uxtb	r3, r3
 8008d8c:	f003 0307 	and.w	r3, r3, #7
 8008d90:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8008d92:	7bbb      	ldrb	r3, [r7, #14]
 8008d94:	7b3a      	ldrb	r2, [r7, #12]
 8008d96:	4911      	ldr	r1, [pc, #68]	@ (8008ddc <UARTEx_SetNbDataToProcess+0x94>)
 8008d98:	5c8a      	ldrb	r2, [r1, r2]
 8008d9a:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8008d9e:	7b3a      	ldrb	r2, [r7, #12]
 8008da0:	490f      	ldr	r1, [pc, #60]	@ (8008de0 <UARTEx_SetNbDataToProcess+0x98>)
 8008da2:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8008da4:	fb93 f3f2 	sdiv	r3, r3, r2
 8008da8:	b29a      	uxth	r2, r3
 8008daa:	687b      	ldr	r3, [r7, #4]
 8008dac:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8008db0:	7bfb      	ldrb	r3, [r7, #15]
 8008db2:	7b7a      	ldrb	r2, [r7, #13]
 8008db4:	4909      	ldr	r1, [pc, #36]	@ (8008ddc <UARTEx_SetNbDataToProcess+0x94>)
 8008db6:	5c8a      	ldrb	r2, [r1, r2]
 8008db8:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8008dbc:	7b7a      	ldrb	r2, [r7, #13]
 8008dbe:	4908      	ldr	r1, [pc, #32]	@ (8008de0 <UARTEx_SetNbDataToProcess+0x98>)
 8008dc0:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8008dc2:	fb93 f3f2 	sdiv	r3, r3, r2
 8008dc6:	b29a      	uxth	r2, r3
 8008dc8:	687b      	ldr	r3, [r7, #4]
 8008dca:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 8008dce:	bf00      	nop
 8008dd0:	3714      	adds	r7, #20
 8008dd2:	46bd      	mov	sp, r7
 8008dd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dd8:	4770      	bx	lr
 8008dda:	bf00      	nop
 8008ddc:	0800bbf0 	.word	0x0800bbf0
 8008de0:	0800bbf8 	.word	0x0800bbf8

08008de4 <__NVIC_SetPriority>:
{
 8008de4:	b480      	push	{r7}
 8008de6:	b083      	sub	sp, #12
 8008de8:	af00      	add	r7, sp, #0
 8008dea:	4603      	mov	r3, r0
 8008dec:	6039      	str	r1, [r7, #0]
 8008dee:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8008df0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8008df4:	2b00      	cmp	r3, #0
 8008df6:	db0a      	blt.n	8008e0e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8008df8:	683b      	ldr	r3, [r7, #0]
 8008dfa:	b2da      	uxtb	r2, r3
 8008dfc:	490c      	ldr	r1, [pc, #48]	@ (8008e30 <__NVIC_SetPriority+0x4c>)
 8008dfe:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8008e02:	0112      	lsls	r2, r2, #4
 8008e04:	b2d2      	uxtb	r2, r2
 8008e06:	440b      	add	r3, r1
 8008e08:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8008e0c:	e00a      	b.n	8008e24 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8008e0e:	683b      	ldr	r3, [r7, #0]
 8008e10:	b2da      	uxtb	r2, r3
 8008e12:	4908      	ldr	r1, [pc, #32]	@ (8008e34 <__NVIC_SetPriority+0x50>)
 8008e14:	88fb      	ldrh	r3, [r7, #6]
 8008e16:	f003 030f 	and.w	r3, r3, #15
 8008e1a:	3b04      	subs	r3, #4
 8008e1c:	0112      	lsls	r2, r2, #4
 8008e1e:	b2d2      	uxtb	r2, r2
 8008e20:	440b      	add	r3, r1
 8008e22:	761a      	strb	r2, [r3, #24]
}
 8008e24:	bf00      	nop
 8008e26:	370c      	adds	r7, #12
 8008e28:	46bd      	mov	sp, r7
 8008e2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e2e:	4770      	bx	lr
 8008e30:	e000e100 	.word	0xe000e100
 8008e34:	e000ed00 	.word	0xe000ed00

08008e38 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8008e38:	b580      	push	{r7, lr}
 8008e3a:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8008e3c:	4b05      	ldr	r3, [pc, #20]	@ (8008e54 <SysTick_Handler+0x1c>)
 8008e3e:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8008e40:	f001 fd2a 	bl	800a898 <xTaskGetSchedulerState>
 8008e44:	4603      	mov	r3, r0
 8008e46:	2b01      	cmp	r3, #1
 8008e48:	d001      	beq.n	8008e4e <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8008e4a:	f002 fb25 	bl	800b498 <xPortSysTickHandler>
  }
}
 8008e4e:	bf00      	nop
 8008e50:	bd80      	pop	{r7, pc}
 8008e52:	bf00      	nop
 8008e54:	e000e010 	.word	0xe000e010

08008e58 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8008e58:	b580      	push	{r7, lr}
 8008e5a:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8008e5c:	2100      	movs	r1, #0
 8008e5e:	f06f 0004 	mvn.w	r0, #4
 8008e62:	f7ff ffbf 	bl	8008de4 <__NVIC_SetPriority>
#endif
}
 8008e66:	bf00      	nop
 8008e68:	bd80      	pop	{r7, pc}
	...

08008e6c <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8008e6c:	b480      	push	{r7}
 8008e6e:	b083      	sub	sp, #12
 8008e70:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008e72:	f3ef 8305 	mrs	r3, IPSR
 8008e76:	603b      	str	r3, [r7, #0]
  return(result);
 8008e78:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8008e7a:	2b00      	cmp	r3, #0
 8008e7c:	d003      	beq.n	8008e86 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8008e7e:	f06f 0305 	mvn.w	r3, #5
 8008e82:	607b      	str	r3, [r7, #4]
 8008e84:	e00c      	b.n	8008ea0 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8008e86:	4b0a      	ldr	r3, [pc, #40]	@ (8008eb0 <osKernelInitialize+0x44>)
 8008e88:	681b      	ldr	r3, [r3, #0]
 8008e8a:	2b00      	cmp	r3, #0
 8008e8c:	d105      	bne.n	8008e9a <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8008e8e:	4b08      	ldr	r3, [pc, #32]	@ (8008eb0 <osKernelInitialize+0x44>)
 8008e90:	2201      	movs	r2, #1
 8008e92:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8008e94:	2300      	movs	r3, #0
 8008e96:	607b      	str	r3, [r7, #4]
 8008e98:	e002      	b.n	8008ea0 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8008e9a:	f04f 33ff 	mov.w	r3, #4294967295
 8008e9e:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8008ea0:	687b      	ldr	r3, [r7, #4]
}
 8008ea2:	4618      	mov	r0, r3
 8008ea4:	370c      	adds	r7, #12
 8008ea6:	46bd      	mov	sp, r7
 8008ea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008eac:	4770      	bx	lr
 8008eae:	bf00      	nop
 8008eb0:	240005cc 	.word	0x240005cc

08008eb4 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8008eb4:	b580      	push	{r7, lr}
 8008eb6:	b082      	sub	sp, #8
 8008eb8:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008eba:	f3ef 8305 	mrs	r3, IPSR
 8008ebe:	603b      	str	r3, [r7, #0]
  return(result);
 8008ec0:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8008ec2:	2b00      	cmp	r3, #0
 8008ec4:	d003      	beq.n	8008ece <osKernelStart+0x1a>
    stat = osErrorISR;
 8008ec6:	f06f 0305 	mvn.w	r3, #5
 8008eca:	607b      	str	r3, [r7, #4]
 8008ecc:	e010      	b.n	8008ef0 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8008ece:	4b0b      	ldr	r3, [pc, #44]	@ (8008efc <osKernelStart+0x48>)
 8008ed0:	681b      	ldr	r3, [r3, #0]
 8008ed2:	2b01      	cmp	r3, #1
 8008ed4:	d109      	bne.n	8008eea <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8008ed6:	f7ff ffbf 	bl	8008e58 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8008eda:	4b08      	ldr	r3, [pc, #32]	@ (8008efc <osKernelStart+0x48>)
 8008edc:	2202      	movs	r2, #2
 8008ede:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8008ee0:	f001 f876 	bl	8009fd0 <vTaskStartScheduler>
      stat = osOK;
 8008ee4:	2300      	movs	r3, #0
 8008ee6:	607b      	str	r3, [r7, #4]
 8008ee8:	e002      	b.n	8008ef0 <osKernelStart+0x3c>
    } else {
      stat = osError;
 8008eea:	f04f 33ff 	mov.w	r3, #4294967295
 8008eee:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8008ef0:	687b      	ldr	r3, [r7, #4]
}
 8008ef2:	4618      	mov	r0, r3
 8008ef4:	3708      	adds	r7, #8
 8008ef6:	46bd      	mov	sp, r7
 8008ef8:	bd80      	pop	{r7, pc}
 8008efa:	bf00      	nop
 8008efc:	240005cc 	.word	0x240005cc

08008f00 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8008f00:	b580      	push	{r7, lr}
 8008f02:	b08e      	sub	sp, #56	@ 0x38
 8008f04:	af04      	add	r7, sp, #16
 8008f06:	60f8      	str	r0, [r7, #12]
 8008f08:	60b9      	str	r1, [r7, #8]
 8008f0a:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8008f0c:	2300      	movs	r3, #0
 8008f0e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008f10:	f3ef 8305 	mrs	r3, IPSR
 8008f14:	617b      	str	r3, [r7, #20]
  return(result);
 8008f16:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8008f18:	2b00      	cmp	r3, #0
 8008f1a:	d17e      	bne.n	800901a <osThreadNew+0x11a>
 8008f1c:	68fb      	ldr	r3, [r7, #12]
 8008f1e:	2b00      	cmp	r3, #0
 8008f20:	d07b      	beq.n	800901a <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8008f22:	2380      	movs	r3, #128	@ 0x80
 8008f24:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8008f26:	2318      	movs	r3, #24
 8008f28:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8008f2a:	2300      	movs	r3, #0
 8008f2c:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 8008f2e:	f04f 33ff 	mov.w	r3, #4294967295
 8008f32:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8008f34:	687b      	ldr	r3, [r7, #4]
 8008f36:	2b00      	cmp	r3, #0
 8008f38:	d045      	beq.n	8008fc6 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8008f3a:	687b      	ldr	r3, [r7, #4]
 8008f3c:	681b      	ldr	r3, [r3, #0]
 8008f3e:	2b00      	cmp	r3, #0
 8008f40:	d002      	beq.n	8008f48 <osThreadNew+0x48>
        name = attr->name;
 8008f42:	687b      	ldr	r3, [r7, #4]
 8008f44:	681b      	ldr	r3, [r3, #0]
 8008f46:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 8008f48:	687b      	ldr	r3, [r7, #4]
 8008f4a:	699b      	ldr	r3, [r3, #24]
 8008f4c:	2b00      	cmp	r3, #0
 8008f4e:	d002      	beq.n	8008f56 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8008f50:	687b      	ldr	r3, [r7, #4]
 8008f52:	699b      	ldr	r3, [r3, #24]
 8008f54:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8008f56:	69fb      	ldr	r3, [r7, #28]
 8008f58:	2b00      	cmp	r3, #0
 8008f5a:	d008      	beq.n	8008f6e <osThreadNew+0x6e>
 8008f5c:	69fb      	ldr	r3, [r7, #28]
 8008f5e:	2b38      	cmp	r3, #56	@ 0x38
 8008f60:	d805      	bhi.n	8008f6e <osThreadNew+0x6e>
 8008f62:	687b      	ldr	r3, [r7, #4]
 8008f64:	685b      	ldr	r3, [r3, #4]
 8008f66:	f003 0301 	and.w	r3, r3, #1
 8008f6a:	2b00      	cmp	r3, #0
 8008f6c:	d001      	beq.n	8008f72 <osThreadNew+0x72>
        return (NULL);
 8008f6e:	2300      	movs	r3, #0
 8008f70:	e054      	b.n	800901c <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8008f72:	687b      	ldr	r3, [r7, #4]
 8008f74:	695b      	ldr	r3, [r3, #20]
 8008f76:	2b00      	cmp	r3, #0
 8008f78:	d003      	beq.n	8008f82 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8008f7a:	687b      	ldr	r3, [r7, #4]
 8008f7c:	695b      	ldr	r3, [r3, #20]
 8008f7e:	089b      	lsrs	r3, r3, #2
 8008f80:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8008f82:	687b      	ldr	r3, [r7, #4]
 8008f84:	689b      	ldr	r3, [r3, #8]
 8008f86:	2b00      	cmp	r3, #0
 8008f88:	d00e      	beq.n	8008fa8 <osThreadNew+0xa8>
 8008f8a:	687b      	ldr	r3, [r7, #4]
 8008f8c:	68db      	ldr	r3, [r3, #12]
 8008f8e:	2ba7      	cmp	r3, #167	@ 0xa7
 8008f90:	d90a      	bls.n	8008fa8 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8008f92:	687b      	ldr	r3, [r7, #4]
 8008f94:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8008f96:	2b00      	cmp	r3, #0
 8008f98:	d006      	beq.n	8008fa8 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8008f9a:	687b      	ldr	r3, [r7, #4]
 8008f9c:	695b      	ldr	r3, [r3, #20]
 8008f9e:	2b00      	cmp	r3, #0
 8008fa0:	d002      	beq.n	8008fa8 <osThreadNew+0xa8>
        mem = 1;
 8008fa2:	2301      	movs	r3, #1
 8008fa4:	61bb      	str	r3, [r7, #24]
 8008fa6:	e010      	b.n	8008fca <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8008fa8:	687b      	ldr	r3, [r7, #4]
 8008faa:	689b      	ldr	r3, [r3, #8]
 8008fac:	2b00      	cmp	r3, #0
 8008fae:	d10c      	bne.n	8008fca <osThreadNew+0xca>
 8008fb0:	687b      	ldr	r3, [r7, #4]
 8008fb2:	68db      	ldr	r3, [r3, #12]
 8008fb4:	2b00      	cmp	r3, #0
 8008fb6:	d108      	bne.n	8008fca <osThreadNew+0xca>
 8008fb8:	687b      	ldr	r3, [r7, #4]
 8008fba:	691b      	ldr	r3, [r3, #16]
 8008fbc:	2b00      	cmp	r3, #0
 8008fbe:	d104      	bne.n	8008fca <osThreadNew+0xca>
          mem = 0;
 8008fc0:	2300      	movs	r3, #0
 8008fc2:	61bb      	str	r3, [r7, #24]
 8008fc4:	e001      	b.n	8008fca <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8008fc6:	2300      	movs	r3, #0
 8008fc8:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8008fca:	69bb      	ldr	r3, [r7, #24]
 8008fcc:	2b01      	cmp	r3, #1
 8008fce:	d110      	bne.n	8008ff2 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8008fd0:	687b      	ldr	r3, [r7, #4]
 8008fd2:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8008fd4:	687a      	ldr	r2, [r7, #4]
 8008fd6:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8008fd8:	9202      	str	r2, [sp, #8]
 8008fda:	9301      	str	r3, [sp, #4]
 8008fdc:	69fb      	ldr	r3, [r7, #28]
 8008fde:	9300      	str	r3, [sp, #0]
 8008fe0:	68bb      	ldr	r3, [r7, #8]
 8008fe2:	6a3a      	ldr	r2, [r7, #32]
 8008fe4:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8008fe6:	68f8      	ldr	r0, [r7, #12]
 8008fe8:	f000 fdfe 	bl	8009be8 <xTaskCreateStatic>
 8008fec:	4603      	mov	r3, r0
 8008fee:	613b      	str	r3, [r7, #16]
 8008ff0:	e013      	b.n	800901a <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8008ff2:	69bb      	ldr	r3, [r7, #24]
 8008ff4:	2b00      	cmp	r3, #0
 8008ff6:	d110      	bne.n	800901a <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8008ff8:	6a3b      	ldr	r3, [r7, #32]
 8008ffa:	b29a      	uxth	r2, r3
 8008ffc:	f107 0310 	add.w	r3, r7, #16
 8009000:	9301      	str	r3, [sp, #4]
 8009002:	69fb      	ldr	r3, [r7, #28]
 8009004:	9300      	str	r3, [sp, #0]
 8009006:	68bb      	ldr	r3, [r7, #8]
 8009008:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800900a:	68f8      	ldr	r0, [r7, #12]
 800900c:	f000 fe4c 	bl	8009ca8 <xTaskCreate>
 8009010:	4603      	mov	r3, r0
 8009012:	2b01      	cmp	r3, #1
 8009014:	d001      	beq.n	800901a <osThreadNew+0x11a>
            hTask = NULL;
 8009016:	2300      	movs	r3, #0
 8009018:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 800901a:	693b      	ldr	r3, [r7, #16]
}
 800901c:	4618      	mov	r0, r3
 800901e:	3728      	adds	r7, #40	@ 0x28
 8009020:	46bd      	mov	sp, r7
 8009022:	bd80      	pop	{r7, pc}

08009024 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8009024:	b480      	push	{r7}
 8009026:	b085      	sub	sp, #20
 8009028:	af00      	add	r7, sp, #0
 800902a:	60f8      	str	r0, [r7, #12]
 800902c:	60b9      	str	r1, [r7, #8]
 800902e:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8009030:	68fb      	ldr	r3, [r7, #12]
 8009032:	4a07      	ldr	r2, [pc, #28]	@ (8009050 <vApplicationGetIdleTaskMemory+0x2c>)
 8009034:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8009036:	68bb      	ldr	r3, [r7, #8]
 8009038:	4a06      	ldr	r2, [pc, #24]	@ (8009054 <vApplicationGetIdleTaskMemory+0x30>)
 800903a:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800903c:	687b      	ldr	r3, [r7, #4]
 800903e:	2280      	movs	r2, #128	@ 0x80
 8009040:	601a      	str	r2, [r3, #0]
}
 8009042:	bf00      	nop
 8009044:	3714      	adds	r7, #20
 8009046:	46bd      	mov	sp, r7
 8009048:	f85d 7b04 	ldr.w	r7, [sp], #4
 800904c:	4770      	bx	lr
 800904e:	bf00      	nop
 8009050:	240005d0 	.word	0x240005d0
 8009054:	24000678 	.word	0x24000678

08009058 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8009058:	b480      	push	{r7}
 800905a:	b085      	sub	sp, #20
 800905c:	af00      	add	r7, sp, #0
 800905e:	60f8      	str	r0, [r7, #12]
 8009060:	60b9      	str	r1, [r7, #8]
 8009062:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8009064:	68fb      	ldr	r3, [r7, #12]
 8009066:	4a07      	ldr	r2, [pc, #28]	@ (8009084 <vApplicationGetTimerTaskMemory+0x2c>)
 8009068:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800906a:	68bb      	ldr	r3, [r7, #8]
 800906c:	4a06      	ldr	r2, [pc, #24]	@ (8009088 <vApplicationGetTimerTaskMemory+0x30>)
 800906e:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8009070:	687b      	ldr	r3, [r7, #4]
 8009072:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8009076:	601a      	str	r2, [r3, #0]
}
 8009078:	bf00      	nop
 800907a:	3714      	adds	r7, #20
 800907c:	46bd      	mov	sp, r7
 800907e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009082:	4770      	bx	lr
 8009084:	24000878 	.word	0x24000878
 8009088:	24000920 	.word	0x24000920

0800908c <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800908c:	b480      	push	{r7}
 800908e:	b083      	sub	sp, #12
 8009090:	af00      	add	r7, sp, #0
 8009092:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8009094:	687b      	ldr	r3, [r7, #4]
 8009096:	f103 0208 	add.w	r2, r3, #8
 800909a:	687b      	ldr	r3, [r7, #4]
 800909c:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800909e:	687b      	ldr	r3, [r7, #4]
 80090a0:	f04f 32ff 	mov.w	r2, #4294967295
 80090a4:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80090a6:	687b      	ldr	r3, [r7, #4]
 80090a8:	f103 0208 	add.w	r2, r3, #8
 80090ac:	687b      	ldr	r3, [r7, #4]
 80090ae:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80090b0:	687b      	ldr	r3, [r7, #4]
 80090b2:	f103 0208 	add.w	r2, r3, #8
 80090b6:	687b      	ldr	r3, [r7, #4]
 80090b8:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80090ba:	687b      	ldr	r3, [r7, #4]
 80090bc:	2200      	movs	r2, #0
 80090be:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80090c0:	bf00      	nop
 80090c2:	370c      	adds	r7, #12
 80090c4:	46bd      	mov	sp, r7
 80090c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090ca:	4770      	bx	lr

080090cc <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80090cc:	b480      	push	{r7}
 80090ce:	b083      	sub	sp, #12
 80090d0:	af00      	add	r7, sp, #0
 80090d2:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80090d4:	687b      	ldr	r3, [r7, #4]
 80090d6:	2200      	movs	r2, #0
 80090d8:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80090da:	bf00      	nop
 80090dc:	370c      	adds	r7, #12
 80090de:	46bd      	mov	sp, r7
 80090e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090e4:	4770      	bx	lr

080090e6 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80090e6:	b480      	push	{r7}
 80090e8:	b085      	sub	sp, #20
 80090ea:	af00      	add	r7, sp, #0
 80090ec:	6078      	str	r0, [r7, #4]
 80090ee:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80090f0:	687b      	ldr	r3, [r7, #4]
 80090f2:	685b      	ldr	r3, [r3, #4]
 80090f4:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80090f6:	683b      	ldr	r3, [r7, #0]
 80090f8:	68fa      	ldr	r2, [r7, #12]
 80090fa:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80090fc:	68fb      	ldr	r3, [r7, #12]
 80090fe:	689a      	ldr	r2, [r3, #8]
 8009100:	683b      	ldr	r3, [r7, #0]
 8009102:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8009104:	68fb      	ldr	r3, [r7, #12]
 8009106:	689b      	ldr	r3, [r3, #8]
 8009108:	683a      	ldr	r2, [r7, #0]
 800910a:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800910c:	68fb      	ldr	r3, [r7, #12]
 800910e:	683a      	ldr	r2, [r7, #0]
 8009110:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8009112:	683b      	ldr	r3, [r7, #0]
 8009114:	687a      	ldr	r2, [r7, #4]
 8009116:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8009118:	687b      	ldr	r3, [r7, #4]
 800911a:	681b      	ldr	r3, [r3, #0]
 800911c:	1c5a      	adds	r2, r3, #1
 800911e:	687b      	ldr	r3, [r7, #4]
 8009120:	601a      	str	r2, [r3, #0]
}
 8009122:	bf00      	nop
 8009124:	3714      	adds	r7, #20
 8009126:	46bd      	mov	sp, r7
 8009128:	f85d 7b04 	ldr.w	r7, [sp], #4
 800912c:	4770      	bx	lr

0800912e <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800912e:	b480      	push	{r7}
 8009130:	b085      	sub	sp, #20
 8009132:	af00      	add	r7, sp, #0
 8009134:	6078      	str	r0, [r7, #4]
 8009136:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8009138:	683b      	ldr	r3, [r7, #0]
 800913a:	681b      	ldr	r3, [r3, #0]
 800913c:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800913e:	68bb      	ldr	r3, [r7, #8]
 8009140:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009144:	d103      	bne.n	800914e <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8009146:	687b      	ldr	r3, [r7, #4]
 8009148:	691b      	ldr	r3, [r3, #16]
 800914a:	60fb      	str	r3, [r7, #12]
 800914c:	e00c      	b.n	8009168 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800914e:	687b      	ldr	r3, [r7, #4]
 8009150:	3308      	adds	r3, #8
 8009152:	60fb      	str	r3, [r7, #12]
 8009154:	e002      	b.n	800915c <vListInsert+0x2e>
 8009156:	68fb      	ldr	r3, [r7, #12]
 8009158:	685b      	ldr	r3, [r3, #4]
 800915a:	60fb      	str	r3, [r7, #12]
 800915c:	68fb      	ldr	r3, [r7, #12]
 800915e:	685b      	ldr	r3, [r3, #4]
 8009160:	681b      	ldr	r3, [r3, #0]
 8009162:	68ba      	ldr	r2, [r7, #8]
 8009164:	429a      	cmp	r2, r3
 8009166:	d2f6      	bcs.n	8009156 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8009168:	68fb      	ldr	r3, [r7, #12]
 800916a:	685a      	ldr	r2, [r3, #4]
 800916c:	683b      	ldr	r3, [r7, #0]
 800916e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8009170:	683b      	ldr	r3, [r7, #0]
 8009172:	685b      	ldr	r3, [r3, #4]
 8009174:	683a      	ldr	r2, [r7, #0]
 8009176:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8009178:	683b      	ldr	r3, [r7, #0]
 800917a:	68fa      	ldr	r2, [r7, #12]
 800917c:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800917e:	68fb      	ldr	r3, [r7, #12]
 8009180:	683a      	ldr	r2, [r7, #0]
 8009182:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8009184:	683b      	ldr	r3, [r7, #0]
 8009186:	687a      	ldr	r2, [r7, #4]
 8009188:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800918a:	687b      	ldr	r3, [r7, #4]
 800918c:	681b      	ldr	r3, [r3, #0]
 800918e:	1c5a      	adds	r2, r3, #1
 8009190:	687b      	ldr	r3, [r7, #4]
 8009192:	601a      	str	r2, [r3, #0]
}
 8009194:	bf00      	nop
 8009196:	3714      	adds	r7, #20
 8009198:	46bd      	mov	sp, r7
 800919a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800919e:	4770      	bx	lr

080091a0 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80091a0:	b480      	push	{r7}
 80091a2:	b085      	sub	sp, #20
 80091a4:	af00      	add	r7, sp, #0
 80091a6:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80091a8:	687b      	ldr	r3, [r7, #4]
 80091aa:	691b      	ldr	r3, [r3, #16]
 80091ac:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80091ae:	687b      	ldr	r3, [r7, #4]
 80091b0:	685b      	ldr	r3, [r3, #4]
 80091b2:	687a      	ldr	r2, [r7, #4]
 80091b4:	6892      	ldr	r2, [r2, #8]
 80091b6:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80091b8:	687b      	ldr	r3, [r7, #4]
 80091ba:	689b      	ldr	r3, [r3, #8]
 80091bc:	687a      	ldr	r2, [r7, #4]
 80091be:	6852      	ldr	r2, [r2, #4]
 80091c0:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80091c2:	68fb      	ldr	r3, [r7, #12]
 80091c4:	685b      	ldr	r3, [r3, #4]
 80091c6:	687a      	ldr	r2, [r7, #4]
 80091c8:	429a      	cmp	r2, r3
 80091ca:	d103      	bne.n	80091d4 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80091cc:	687b      	ldr	r3, [r7, #4]
 80091ce:	689a      	ldr	r2, [r3, #8]
 80091d0:	68fb      	ldr	r3, [r7, #12]
 80091d2:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80091d4:	687b      	ldr	r3, [r7, #4]
 80091d6:	2200      	movs	r2, #0
 80091d8:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80091da:	68fb      	ldr	r3, [r7, #12]
 80091dc:	681b      	ldr	r3, [r3, #0]
 80091de:	1e5a      	subs	r2, r3, #1
 80091e0:	68fb      	ldr	r3, [r7, #12]
 80091e2:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80091e4:	68fb      	ldr	r3, [r7, #12]
 80091e6:	681b      	ldr	r3, [r3, #0]
}
 80091e8:	4618      	mov	r0, r3
 80091ea:	3714      	adds	r7, #20
 80091ec:	46bd      	mov	sp, r7
 80091ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091f2:	4770      	bx	lr

080091f4 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80091f4:	b580      	push	{r7, lr}
 80091f6:	b084      	sub	sp, #16
 80091f8:	af00      	add	r7, sp, #0
 80091fa:	6078      	str	r0, [r7, #4]
 80091fc:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 80091fe:	687b      	ldr	r3, [r7, #4]
 8009200:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8009202:	68fb      	ldr	r3, [r7, #12]
 8009204:	2b00      	cmp	r3, #0
 8009206:	d10b      	bne.n	8009220 <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8009208:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800920c:	f383 8811 	msr	BASEPRI, r3
 8009210:	f3bf 8f6f 	isb	sy
 8009214:	f3bf 8f4f 	dsb	sy
 8009218:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800921a:	bf00      	nop
 800921c:	bf00      	nop
 800921e:	e7fd      	b.n	800921c <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8009220:	f002 f8aa 	bl	800b378 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8009224:	68fb      	ldr	r3, [r7, #12]
 8009226:	681a      	ldr	r2, [r3, #0]
 8009228:	68fb      	ldr	r3, [r7, #12]
 800922a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800922c:	68f9      	ldr	r1, [r7, #12]
 800922e:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8009230:	fb01 f303 	mul.w	r3, r1, r3
 8009234:	441a      	add	r2, r3
 8009236:	68fb      	ldr	r3, [r7, #12]
 8009238:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800923a:	68fb      	ldr	r3, [r7, #12]
 800923c:	2200      	movs	r2, #0
 800923e:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8009240:	68fb      	ldr	r3, [r7, #12]
 8009242:	681a      	ldr	r2, [r3, #0]
 8009244:	68fb      	ldr	r3, [r7, #12]
 8009246:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8009248:	68fb      	ldr	r3, [r7, #12]
 800924a:	681a      	ldr	r2, [r3, #0]
 800924c:	68fb      	ldr	r3, [r7, #12]
 800924e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009250:	3b01      	subs	r3, #1
 8009252:	68f9      	ldr	r1, [r7, #12]
 8009254:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8009256:	fb01 f303 	mul.w	r3, r1, r3
 800925a:	441a      	add	r2, r3
 800925c:	68fb      	ldr	r3, [r7, #12]
 800925e:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8009260:	68fb      	ldr	r3, [r7, #12]
 8009262:	22ff      	movs	r2, #255	@ 0xff
 8009264:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8009268:	68fb      	ldr	r3, [r7, #12]
 800926a:	22ff      	movs	r2, #255	@ 0xff
 800926c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 8009270:	683b      	ldr	r3, [r7, #0]
 8009272:	2b00      	cmp	r3, #0
 8009274:	d114      	bne.n	80092a0 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8009276:	68fb      	ldr	r3, [r7, #12]
 8009278:	691b      	ldr	r3, [r3, #16]
 800927a:	2b00      	cmp	r3, #0
 800927c:	d01a      	beq.n	80092b4 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800927e:	68fb      	ldr	r3, [r7, #12]
 8009280:	3310      	adds	r3, #16
 8009282:	4618      	mov	r0, r3
 8009284:	f001 f942 	bl	800a50c <xTaskRemoveFromEventList>
 8009288:	4603      	mov	r3, r0
 800928a:	2b00      	cmp	r3, #0
 800928c:	d012      	beq.n	80092b4 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800928e:	4b0d      	ldr	r3, [pc, #52]	@ (80092c4 <xQueueGenericReset+0xd0>)
 8009290:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009294:	601a      	str	r2, [r3, #0]
 8009296:	f3bf 8f4f 	dsb	sy
 800929a:	f3bf 8f6f 	isb	sy
 800929e:	e009      	b.n	80092b4 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80092a0:	68fb      	ldr	r3, [r7, #12]
 80092a2:	3310      	adds	r3, #16
 80092a4:	4618      	mov	r0, r3
 80092a6:	f7ff fef1 	bl	800908c <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80092aa:	68fb      	ldr	r3, [r7, #12]
 80092ac:	3324      	adds	r3, #36	@ 0x24
 80092ae:	4618      	mov	r0, r3
 80092b0:	f7ff feec 	bl	800908c <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80092b4:	f002 f892 	bl	800b3dc <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80092b8:	2301      	movs	r3, #1
}
 80092ba:	4618      	mov	r0, r3
 80092bc:	3710      	adds	r7, #16
 80092be:	46bd      	mov	sp, r7
 80092c0:	bd80      	pop	{r7, pc}
 80092c2:	bf00      	nop
 80092c4:	e000ed04 	.word	0xe000ed04

080092c8 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80092c8:	b580      	push	{r7, lr}
 80092ca:	b08e      	sub	sp, #56	@ 0x38
 80092cc:	af02      	add	r7, sp, #8
 80092ce:	60f8      	str	r0, [r7, #12]
 80092d0:	60b9      	str	r1, [r7, #8]
 80092d2:	607a      	str	r2, [r7, #4]
 80092d4:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80092d6:	68fb      	ldr	r3, [r7, #12]
 80092d8:	2b00      	cmp	r3, #0
 80092da:	d10b      	bne.n	80092f4 <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 80092dc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80092e0:	f383 8811 	msr	BASEPRI, r3
 80092e4:	f3bf 8f6f 	isb	sy
 80092e8:	f3bf 8f4f 	dsb	sy
 80092ec:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 80092ee:	bf00      	nop
 80092f0:	bf00      	nop
 80092f2:	e7fd      	b.n	80092f0 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80092f4:	683b      	ldr	r3, [r7, #0]
 80092f6:	2b00      	cmp	r3, #0
 80092f8:	d10b      	bne.n	8009312 <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 80092fa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80092fe:	f383 8811 	msr	BASEPRI, r3
 8009302:	f3bf 8f6f 	isb	sy
 8009306:	f3bf 8f4f 	dsb	sy
 800930a:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800930c:	bf00      	nop
 800930e:	bf00      	nop
 8009310:	e7fd      	b.n	800930e <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8009312:	687b      	ldr	r3, [r7, #4]
 8009314:	2b00      	cmp	r3, #0
 8009316:	d002      	beq.n	800931e <xQueueGenericCreateStatic+0x56>
 8009318:	68bb      	ldr	r3, [r7, #8]
 800931a:	2b00      	cmp	r3, #0
 800931c:	d001      	beq.n	8009322 <xQueueGenericCreateStatic+0x5a>
 800931e:	2301      	movs	r3, #1
 8009320:	e000      	b.n	8009324 <xQueueGenericCreateStatic+0x5c>
 8009322:	2300      	movs	r3, #0
 8009324:	2b00      	cmp	r3, #0
 8009326:	d10b      	bne.n	8009340 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 8009328:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800932c:	f383 8811 	msr	BASEPRI, r3
 8009330:	f3bf 8f6f 	isb	sy
 8009334:	f3bf 8f4f 	dsb	sy
 8009338:	623b      	str	r3, [r7, #32]
}
 800933a:	bf00      	nop
 800933c:	bf00      	nop
 800933e:	e7fd      	b.n	800933c <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8009340:	687b      	ldr	r3, [r7, #4]
 8009342:	2b00      	cmp	r3, #0
 8009344:	d102      	bne.n	800934c <xQueueGenericCreateStatic+0x84>
 8009346:	68bb      	ldr	r3, [r7, #8]
 8009348:	2b00      	cmp	r3, #0
 800934a:	d101      	bne.n	8009350 <xQueueGenericCreateStatic+0x88>
 800934c:	2301      	movs	r3, #1
 800934e:	e000      	b.n	8009352 <xQueueGenericCreateStatic+0x8a>
 8009350:	2300      	movs	r3, #0
 8009352:	2b00      	cmp	r3, #0
 8009354:	d10b      	bne.n	800936e <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 8009356:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800935a:	f383 8811 	msr	BASEPRI, r3
 800935e:	f3bf 8f6f 	isb	sy
 8009362:	f3bf 8f4f 	dsb	sy
 8009366:	61fb      	str	r3, [r7, #28]
}
 8009368:	bf00      	nop
 800936a:	bf00      	nop
 800936c:	e7fd      	b.n	800936a <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800936e:	2350      	movs	r3, #80	@ 0x50
 8009370:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8009372:	697b      	ldr	r3, [r7, #20]
 8009374:	2b50      	cmp	r3, #80	@ 0x50
 8009376:	d00b      	beq.n	8009390 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 8009378:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800937c:	f383 8811 	msr	BASEPRI, r3
 8009380:	f3bf 8f6f 	isb	sy
 8009384:	f3bf 8f4f 	dsb	sy
 8009388:	61bb      	str	r3, [r7, #24]
}
 800938a:	bf00      	nop
 800938c:	bf00      	nop
 800938e:	e7fd      	b.n	800938c <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8009390:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8009392:	683b      	ldr	r3, [r7, #0]
 8009394:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 8009396:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009398:	2b00      	cmp	r3, #0
 800939a:	d00d      	beq.n	80093b8 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800939c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800939e:	2201      	movs	r2, #1
 80093a0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80093a4:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 80093a8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80093aa:	9300      	str	r3, [sp, #0]
 80093ac:	4613      	mov	r3, r2
 80093ae:	687a      	ldr	r2, [r7, #4]
 80093b0:	68b9      	ldr	r1, [r7, #8]
 80093b2:	68f8      	ldr	r0, [r7, #12]
 80093b4:	f000 f805 	bl	80093c2 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80093b8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 80093ba:	4618      	mov	r0, r3
 80093bc:	3730      	adds	r7, #48	@ 0x30
 80093be:	46bd      	mov	sp, r7
 80093c0:	bd80      	pop	{r7, pc}

080093c2 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80093c2:	b580      	push	{r7, lr}
 80093c4:	b084      	sub	sp, #16
 80093c6:	af00      	add	r7, sp, #0
 80093c8:	60f8      	str	r0, [r7, #12]
 80093ca:	60b9      	str	r1, [r7, #8]
 80093cc:	607a      	str	r2, [r7, #4]
 80093ce:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80093d0:	68bb      	ldr	r3, [r7, #8]
 80093d2:	2b00      	cmp	r3, #0
 80093d4:	d103      	bne.n	80093de <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80093d6:	69bb      	ldr	r3, [r7, #24]
 80093d8:	69ba      	ldr	r2, [r7, #24]
 80093da:	601a      	str	r2, [r3, #0]
 80093dc:	e002      	b.n	80093e4 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80093de:	69bb      	ldr	r3, [r7, #24]
 80093e0:	687a      	ldr	r2, [r7, #4]
 80093e2:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80093e4:	69bb      	ldr	r3, [r7, #24]
 80093e6:	68fa      	ldr	r2, [r7, #12]
 80093e8:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80093ea:	69bb      	ldr	r3, [r7, #24]
 80093ec:	68ba      	ldr	r2, [r7, #8]
 80093ee:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80093f0:	2101      	movs	r1, #1
 80093f2:	69b8      	ldr	r0, [r7, #24]
 80093f4:	f7ff fefe 	bl	80091f4 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 80093f8:	69bb      	ldr	r3, [r7, #24]
 80093fa:	78fa      	ldrb	r2, [r7, #3]
 80093fc:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8009400:	bf00      	nop
 8009402:	3710      	adds	r7, #16
 8009404:	46bd      	mov	sp, r7
 8009406:	bd80      	pop	{r7, pc}

08009408 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8009408:	b580      	push	{r7, lr}
 800940a:	b08e      	sub	sp, #56	@ 0x38
 800940c:	af00      	add	r7, sp, #0
 800940e:	60f8      	str	r0, [r7, #12]
 8009410:	60b9      	str	r1, [r7, #8]
 8009412:	607a      	str	r2, [r7, #4]
 8009414:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8009416:	2300      	movs	r3, #0
 8009418:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800941a:	68fb      	ldr	r3, [r7, #12]
 800941c:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 800941e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009420:	2b00      	cmp	r3, #0
 8009422:	d10b      	bne.n	800943c <xQueueGenericSend+0x34>
	__asm volatile
 8009424:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009428:	f383 8811 	msr	BASEPRI, r3
 800942c:	f3bf 8f6f 	isb	sy
 8009430:	f3bf 8f4f 	dsb	sy
 8009434:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8009436:	bf00      	nop
 8009438:	bf00      	nop
 800943a:	e7fd      	b.n	8009438 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800943c:	68bb      	ldr	r3, [r7, #8]
 800943e:	2b00      	cmp	r3, #0
 8009440:	d103      	bne.n	800944a <xQueueGenericSend+0x42>
 8009442:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009444:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009446:	2b00      	cmp	r3, #0
 8009448:	d101      	bne.n	800944e <xQueueGenericSend+0x46>
 800944a:	2301      	movs	r3, #1
 800944c:	e000      	b.n	8009450 <xQueueGenericSend+0x48>
 800944e:	2300      	movs	r3, #0
 8009450:	2b00      	cmp	r3, #0
 8009452:	d10b      	bne.n	800946c <xQueueGenericSend+0x64>
	__asm volatile
 8009454:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009458:	f383 8811 	msr	BASEPRI, r3
 800945c:	f3bf 8f6f 	isb	sy
 8009460:	f3bf 8f4f 	dsb	sy
 8009464:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8009466:	bf00      	nop
 8009468:	bf00      	nop
 800946a:	e7fd      	b.n	8009468 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800946c:	683b      	ldr	r3, [r7, #0]
 800946e:	2b02      	cmp	r3, #2
 8009470:	d103      	bne.n	800947a <xQueueGenericSend+0x72>
 8009472:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009474:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009476:	2b01      	cmp	r3, #1
 8009478:	d101      	bne.n	800947e <xQueueGenericSend+0x76>
 800947a:	2301      	movs	r3, #1
 800947c:	e000      	b.n	8009480 <xQueueGenericSend+0x78>
 800947e:	2300      	movs	r3, #0
 8009480:	2b00      	cmp	r3, #0
 8009482:	d10b      	bne.n	800949c <xQueueGenericSend+0x94>
	__asm volatile
 8009484:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009488:	f383 8811 	msr	BASEPRI, r3
 800948c:	f3bf 8f6f 	isb	sy
 8009490:	f3bf 8f4f 	dsb	sy
 8009494:	623b      	str	r3, [r7, #32]
}
 8009496:	bf00      	nop
 8009498:	bf00      	nop
 800949a:	e7fd      	b.n	8009498 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800949c:	f001 f9fc 	bl	800a898 <xTaskGetSchedulerState>
 80094a0:	4603      	mov	r3, r0
 80094a2:	2b00      	cmp	r3, #0
 80094a4:	d102      	bne.n	80094ac <xQueueGenericSend+0xa4>
 80094a6:	687b      	ldr	r3, [r7, #4]
 80094a8:	2b00      	cmp	r3, #0
 80094aa:	d101      	bne.n	80094b0 <xQueueGenericSend+0xa8>
 80094ac:	2301      	movs	r3, #1
 80094ae:	e000      	b.n	80094b2 <xQueueGenericSend+0xaa>
 80094b0:	2300      	movs	r3, #0
 80094b2:	2b00      	cmp	r3, #0
 80094b4:	d10b      	bne.n	80094ce <xQueueGenericSend+0xc6>
	__asm volatile
 80094b6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80094ba:	f383 8811 	msr	BASEPRI, r3
 80094be:	f3bf 8f6f 	isb	sy
 80094c2:	f3bf 8f4f 	dsb	sy
 80094c6:	61fb      	str	r3, [r7, #28]
}
 80094c8:	bf00      	nop
 80094ca:	bf00      	nop
 80094cc:	e7fd      	b.n	80094ca <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80094ce:	f001 ff53 	bl	800b378 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80094d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80094d4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80094d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80094d8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80094da:	429a      	cmp	r2, r3
 80094dc:	d302      	bcc.n	80094e4 <xQueueGenericSend+0xdc>
 80094de:	683b      	ldr	r3, [r7, #0]
 80094e0:	2b02      	cmp	r3, #2
 80094e2:	d129      	bne.n	8009538 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80094e4:	683a      	ldr	r2, [r7, #0]
 80094e6:	68b9      	ldr	r1, [r7, #8]
 80094e8:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80094ea:	f000 fa0f 	bl	800990c <prvCopyDataToQueue>
 80094ee:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80094f0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80094f2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80094f4:	2b00      	cmp	r3, #0
 80094f6:	d010      	beq.n	800951a <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80094f8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80094fa:	3324      	adds	r3, #36	@ 0x24
 80094fc:	4618      	mov	r0, r3
 80094fe:	f001 f805 	bl	800a50c <xTaskRemoveFromEventList>
 8009502:	4603      	mov	r3, r0
 8009504:	2b00      	cmp	r3, #0
 8009506:	d013      	beq.n	8009530 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8009508:	4b3f      	ldr	r3, [pc, #252]	@ (8009608 <xQueueGenericSend+0x200>)
 800950a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800950e:	601a      	str	r2, [r3, #0]
 8009510:	f3bf 8f4f 	dsb	sy
 8009514:	f3bf 8f6f 	isb	sy
 8009518:	e00a      	b.n	8009530 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800951a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800951c:	2b00      	cmp	r3, #0
 800951e:	d007      	beq.n	8009530 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8009520:	4b39      	ldr	r3, [pc, #228]	@ (8009608 <xQueueGenericSend+0x200>)
 8009522:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009526:	601a      	str	r2, [r3, #0]
 8009528:	f3bf 8f4f 	dsb	sy
 800952c:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8009530:	f001 ff54 	bl	800b3dc <vPortExitCritical>
				return pdPASS;
 8009534:	2301      	movs	r3, #1
 8009536:	e063      	b.n	8009600 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8009538:	687b      	ldr	r3, [r7, #4]
 800953a:	2b00      	cmp	r3, #0
 800953c:	d103      	bne.n	8009546 <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800953e:	f001 ff4d 	bl	800b3dc <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8009542:	2300      	movs	r3, #0
 8009544:	e05c      	b.n	8009600 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8009546:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009548:	2b00      	cmp	r3, #0
 800954a:	d106      	bne.n	800955a <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800954c:	f107 0314 	add.w	r3, r7, #20
 8009550:	4618      	mov	r0, r3
 8009552:	f001 f83f 	bl	800a5d4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8009556:	2301      	movs	r3, #1
 8009558:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800955a:	f001 ff3f 	bl	800b3dc <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800955e:	f000 fda7 	bl	800a0b0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8009562:	f001 ff09 	bl	800b378 <vPortEnterCritical>
 8009566:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009568:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800956c:	b25b      	sxtb	r3, r3
 800956e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009572:	d103      	bne.n	800957c <xQueueGenericSend+0x174>
 8009574:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009576:	2200      	movs	r2, #0
 8009578:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800957c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800957e:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8009582:	b25b      	sxtb	r3, r3
 8009584:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009588:	d103      	bne.n	8009592 <xQueueGenericSend+0x18a>
 800958a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800958c:	2200      	movs	r2, #0
 800958e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8009592:	f001 ff23 	bl	800b3dc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8009596:	1d3a      	adds	r2, r7, #4
 8009598:	f107 0314 	add.w	r3, r7, #20
 800959c:	4611      	mov	r1, r2
 800959e:	4618      	mov	r0, r3
 80095a0:	f001 f82e 	bl	800a600 <xTaskCheckForTimeOut>
 80095a4:	4603      	mov	r3, r0
 80095a6:	2b00      	cmp	r3, #0
 80095a8:	d124      	bne.n	80095f4 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80095aa:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80095ac:	f000 faa6 	bl	8009afc <prvIsQueueFull>
 80095b0:	4603      	mov	r3, r0
 80095b2:	2b00      	cmp	r3, #0
 80095b4:	d018      	beq.n	80095e8 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80095b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80095b8:	3310      	adds	r3, #16
 80095ba:	687a      	ldr	r2, [r7, #4]
 80095bc:	4611      	mov	r1, r2
 80095be:	4618      	mov	r0, r3
 80095c0:	f000 ff52 	bl	800a468 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80095c4:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80095c6:	f000 fa31 	bl	8009a2c <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80095ca:	f000 fd7f 	bl	800a0cc <xTaskResumeAll>
 80095ce:	4603      	mov	r3, r0
 80095d0:	2b00      	cmp	r3, #0
 80095d2:	f47f af7c 	bne.w	80094ce <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 80095d6:	4b0c      	ldr	r3, [pc, #48]	@ (8009608 <xQueueGenericSend+0x200>)
 80095d8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80095dc:	601a      	str	r2, [r3, #0]
 80095de:	f3bf 8f4f 	dsb	sy
 80095e2:	f3bf 8f6f 	isb	sy
 80095e6:	e772      	b.n	80094ce <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80095e8:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80095ea:	f000 fa1f 	bl	8009a2c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80095ee:	f000 fd6d 	bl	800a0cc <xTaskResumeAll>
 80095f2:	e76c      	b.n	80094ce <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80095f4:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80095f6:	f000 fa19 	bl	8009a2c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80095fa:	f000 fd67 	bl	800a0cc <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80095fe:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8009600:	4618      	mov	r0, r3
 8009602:	3738      	adds	r7, #56	@ 0x38
 8009604:	46bd      	mov	sp, r7
 8009606:	bd80      	pop	{r7, pc}
 8009608:	e000ed04 	.word	0xe000ed04

0800960c <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800960c:	b580      	push	{r7, lr}
 800960e:	b090      	sub	sp, #64	@ 0x40
 8009610:	af00      	add	r7, sp, #0
 8009612:	60f8      	str	r0, [r7, #12]
 8009614:	60b9      	str	r1, [r7, #8]
 8009616:	607a      	str	r2, [r7, #4]
 8009618:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800961a:	68fb      	ldr	r3, [r7, #12]
 800961c:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 800961e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009620:	2b00      	cmp	r3, #0
 8009622:	d10b      	bne.n	800963c <xQueueGenericSendFromISR+0x30>
	__asm volatile
 8009624:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009628:	f383 8811 	msr	BASEPRI, r3
 800962c:	f3bf 8f6f 	isb	sy
 8009630:	f3bf 8f4f 	dsb	sy
 8009634:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8009636:	bf00      	nop
 8009638:	bf00      	nop
 800963a:	e7fd      	b.n	8009638 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800963c:	68bb      	ldr	r3, [r7, #8]
 800963e:	2b00      	cmp	r3, #0
 8009640:	d103      	bne.n	800964a <xQueueGenericSendFromISR+0x3e>
 8009642:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009644:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009646:	2b00      	cmp	r3, #0
 8009648:	d101      	bne.n	800964e <xQueueGenericSendFromISR+0x42>
 800964a:	2301      	movs	r3, #1
 800964c:	e000      	b.n	8009650 <xQueueGenericSendFromISR+0x44>
 800964e:	2300      	movs	r3, #0
 8009650:	2b00      	cmp	r3, #0
 8009652:	d10b      	bne.n	800966c <xQueueGenericSendFromISR+0x60>
	__asm volatile
 8009654:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009658:	f383 8811 	msr	BASEPRI, r3
 800965c:	f3bf 8f6f 	isb	sy
 8009660:	f3bf 8f4f 	dsb	sy
 8009664:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8009666:	bf00      	nop
 8009668:	bf00      	nop
 800966a:	e7fd      	b.n	8009668 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800966c:	683b      	ldr	r3, [r7, #0]
 800966e:	2b02      	cmp	r3, #2
 8009670:	d103      	bne.n	800967a <xQueueGenericSendFromISR+0x6e>
 8009672:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009674:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009676:	2b01      	cmp	r3, #1
 8009678:	d101      	bne.n	800967e <xQueueGenericSendFromISR+0x72>
 800967a:	2301      	movs	r3, #1
 800967c:	e000      	b.n	8009680 <xQueueGenericSendFromISR+0x74>
 800967e:	2300      	movs	r3, #0
 8009680:	2b00      	cmp	r3, #0
 8009682:	d10b      	bne.n	800969c <xQueueGenericSendFromISR+0x90>
	__asm volatile
 8009684:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009688:	f383 8811 	msr	BASEPRI, r3
 800968c:	f3bf 8f6f 	isb	sy
 8009690:	f3bf 8f4f 	dsb	sy
 8009694:	623b      	str	r3, [r7, #32]
}
 8009696:	bf00      	nop
 8009698:	bf00      	nop
 800969a:	e7fd      	b.n	8009698 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800969c:	f001 ff4c 	bl	800b538 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80096a0:	f3ef 8211 	mrs	r2, BASEPRI
 80096a4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80096a8:	f383 8811 	msr	BASEPRI, r3
 80096ac:	f3bf 8f6f 	isb	sy
 80096b0:	f3bf 8f4f 	dsb	sy
 80096b4:	61fa      	str	r2, [r7, #28]
 80096b6:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 80096b8:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80096ba:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80096bc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80096be:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80096c0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80096c2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80096c4:	429a      	cmp	r2, r3
 80096c6:	d302      	bcc.n	80096ce <xQueueGenericSendFromISR+0xc2>
 80096c8:	683b      	ldr	r3, [r7, #0]
 80096ca:	2b02      	cmp	r3, #2
 80096cc:	d12f      	bne.n	800972e <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80096ce:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80096d0:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80096d4:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 80096d8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80096da:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80096dc:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80096de:	683a      	ldr	r2, [r7, #0]
 80096e0:	68b9      	ldr	r1, [r7, #8]
 80096e2:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 80096e4:	f000 f912 	bl	800990c <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80096e8:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 80096ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 80096f0:	d112      	bne.n	8009718 <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80096f2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80096f4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80096f6:	2b00      	cmp	r3, #0
 80096f8:	d016      	beq.n	8009728 <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80096fa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80096fc:	3324      	adds	r3, #36	@ 0x24
 80096fe:	4618      	mov	r0, r3
 8009700:	f000 ff04 	bl	800a50c <xTaskRemoveFromEventList>
 8009704:	4603      	mov	r3, r0
 8009706:	2b00      	cmp	r3, #0
 8009708:	d00e      	beq.n	8009728 <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800970a:	687b      	ldr	r3, [r7, #4]
 800970c:	2b00      	cmp	r3, #0
 800970e:	d00b      	beq.n	8009728 <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8009710:	687b      	ldr	r3, [r7, #4]
 8009712:	2201      	movs	r2, #1
 8009714:	601a      	str	r2, [r3, #0]
 8009716:	e007      	b.n	8009728 <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8009718:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 800971c:	3301      	adds	r3, #1
 800971e:	b2db      	uxtb	r3, r3
 8009720:	b25a      	sxtb	r2, r3
 8009722:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009724:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 8009728:	2301      	movs	r3, #1
 800972a:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 800972c:	e001      	b.n	8009732 <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800972e:	2300      	movs	r3, #0
 8009730:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8009732:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009734:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8009736:	697b      	ldr	r3, [r7, #20]
 8009738:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800973c:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800973e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 8009740:	4618      	mov	r0, r3
 8009742:	3740      	adds	r7, #64	@ 0x40
 8009744:	46bd      	mov	sp, r7
 8009746:	bd80      	pop	{r7, pc}

08009748 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8009748:	b580      	push	{r7, lr}
 800974a:	b08c      	sub	sp, #48	@ 0x30
 800974c:	af00      	add	r7, sp, #0
 800974e:	60f8      	str	r0, [r7, #12]
 8009750:	60b9      	str	r1, [r7, #8]
 8009752:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8009754:	2300      	movs	r3, #0
 8009756:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8009758:	68fb      	ldr	r3, [r7, #12]
 800975a:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800975c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800975e:	2b00      	cmp	r3, #0
 8009760:	d10b      	bne.n	800977a <xQueueReceive+0x32>
	__asm volatile
 8009762:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009766:	f383 8811 	msr	BASEPRI, r3
 800976a:	f3bf 8f6f 	isb	sy
 800976e:	f3bf 8f4f 	dsb	sy
 8009772:	623b      	str	r3, [r7, #32]
}
 8009774:	bf00      	nop
 8009776:	bf00      	nop
 8009778:	e7fd      	b.n	8009776 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800977a:	68bb      	ldr	r3, [r7, #8]
 800977c:	2b00      	cmp	r3, #0
 800977e:	d103      	bne.n	8009788 <xQueueReceive+0x40>
 8009780:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009782:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009784:	2b00      	cmp	r3, #0
 8009786:	d101      	bne.n	800978c <xQueueReceive+0x44>
 8009788:	2301      	movs	r3, #1
 800978a:	e000      	b.n	800978e <xQueueReceive+0x46>
 800978c:	2300      	movs	r3, #0
 800978e:	2b00      	cmp	r3, #0
 8009790:	d10b      	bne.n	80097aa <xQueueReceive+0x62>
	__asm volatile
 8009792:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009796:	f383 8811 	msr	BASEPRI, r3
 800979a:	f3bf 8f6f 	isb	sy
 800979e:	f3bf 8f4f 	dsb	sy
 80097a2:	61fb      	str	r3, [r7, #28]
}
 80097a4:	bf00      	nop
 80097a6:	bf00      	nop
 80097a8:	e7fd      	b.n	80097a6 <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80097aa:	f001 f875 	bl	800a898 <xTaskGetSchedulerState>
 80097ae:	4603      	mov	r3, r0
 80097b0:	2b00      	cmp	r3, #0
 80097b2:	d102      	bne.n	80097ba <xQueueReceive+0x72>
 80097b4:	687b      	ldr	r3, [r7, #4]
 80097b6:	2b00      	cmp	r3, #0
 80097b8:	d101      	bne.n	80097be <xQueueReceive+0x76>
 80097ba:	2301      	movs	r3, #1
 80097bc:	e000      	b.n	80097c0 <xQueueReceive+0x78>
 80097be:	2300      	movs	r3, #0
 80097c0:	2b00      	cmp	r3, #0
 80097c2:	d10b      	bne.n	80097dc <xQueueReceive+0x94>
	__asm volatile
 80097c4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80097c8:	f383 8811 	msr	BASEPRI, r3
 80097cc:	f3bf 8f6f 	isb	sy
 80097d0:	f3bf 8f4f 	dsb	sy
 80097d4:	61bb      	str	r3, [r7, #24]
}
 80097d6:	bf00      	nop
 80097d8:	bf00      	nop
 80097da:	e7fd      	b.n	80097d8 <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80097dc:	f001 fdcc 	bl	800b378 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80097e0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80097e2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80097e4:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80097e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80097e8:	2b00      	cmp	r3, #0
 80097ea:	d01f      	beq.n	800982c <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80097ec:	68b9      	ldr	r1, [r7, #8]
 80097ee:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80097f0:	f000 f8f6 	bl	80099e0 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80097f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80097f6:	1e5a      	subs	r2, r3, #1
 80097f8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80097fa:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80097fc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80097fe:	691b      	ldr	r3, [r3, #16]
 8009800:	2b00      	cmp	r3, #0
 8009802:	d00f      	beq.n	8009824 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8009804:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009806:	3310      	adds	r3, #16
 8009808:	4618      	mov	r0, r3
 800980a:	f000 fe7f 	bl	800a50c <xTaskRemoveFromEventList>
 800980e:	4603      	mov	r3, r0
 8009810:	2b00      	cmp	r3, #0
 8009812:	d007      	beq.n	8009824 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8009814:	4b3c      	ldr	r3, [pc, #240]	@ (8009908 <xQueueReceive+0x1c0>)
 8009816:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800981a:	601a      	str	r2, [r3, #0]
 800981c:	f3bf 8f4f 	dsb	sy
 8009820:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8009824:	f001 fdda 	bl	800b3dc <vPortExitCritical>
				return pdPASS;
 8009828:	2301      	movs	r3, #1
 800982a:	e069      	b.n	8009900 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800982c:	687b      	ldr	r3, [r7, #4]
 800982e:	2b00      	cmp	r3, #0
 8009830:	d103      	bne.n	800983a <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8009832:	f001 fdd3 	bl	800b3dc <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8009836:	2300      	movs	r3, #0
 8009838:	e062      	b.n	8009900 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800983a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800983c:	2b00      	cmp	r3, #0
 800983e:	d106      	bne.n	800984e <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8009840:	f107 0310 	add.w	r3, r7, #16
 8009844:	4618      	mov	r0, r3
 8009846:	f000 fec5 	bl	800a5d4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800984a:	2301      	movs	r3, #1
 800984c:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800984e:	f001 fdc5 	bl	800b3dc <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8009852:	f000 fc2d 	bl	800a0b0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8009856:	f001 fd8f 	bl	800b378 <vPortEnterCritical>
 800985a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800985c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8009860:	b25b      	sxtb	r3, r3
 8009862:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009866:	d103      	bne.n	8009870 <xQueueReceive+0x128>
 8009868:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800986a:	2200      	movs	r2, #0
 800986c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8009870:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009872:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8009876:	b25b      	sxtb	r3, r3
 8009878:	f1b3 3fff 	cmp.w	r3, #4294967295
 800987c:	d103      	bne.n	8009886 <xQueueReceive+0x13e>
 800987e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009880:	2200      	movs	r2, #0
 8009882:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8009886:	f001 fda9 	bl	800b3dc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800988a:	1d3a      	adds	r2, r7, #4
 800988c:	f107 0310 	add.w	r3, r7, #16
 8009890:	4611      	mov	r1, r2
 8009892:	4618      	mov	r0, r3
 8009894:	f000 feb4 	bl	800a600 <xTaskCheckForTimeOut>
 8009898:	4603      	mov	r3, r0
 800989a:	2b00      	cmp	r3, #0
 800989c:	d123      	bne.n	80098e6 <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800989e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80098a0:	f000 f916 	bl	8009ad0 <prvIsQueueEmpty>
 80098a4:	4603      	mov	r3, r0
 80098a6:	2b00      	cmp	r3, #0
 80098a8:	d017      	beq.n	80098da <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80098aa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80098ac:	3324      	adds	r3, #36	@ 0x24
 80098ae:	687a      	ldr	r2, [r7, #4]
 80098b0:	4611      	mov	r1, r2
 80098b2:	4618      	mov	r0, r3
 80098b4:	f000 fdd8 	bl	800a468 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80098b8:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80098ba:	f000 f8b7 	bl	8009a2c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80098be:	f000 fc05 	bl	800a0cc <xTaskResumeAll>
 80098c2:	4603      	mov	r3, r0
 80098c4:	2b00      	cmp	r3, #0
 80098c6:	d189      	bne.n	80097dc <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 80098c8:	4b0f      	ldr	r3, [pc, #60]	@ (8009908 <xQueueReceive+0x1c0>)
 80098ca:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80098ce:	601a      	str	r2, [r3, #0]
 80098d0:	f3bf 8f4f 	dsb	sy
 80098d4:	f3bf 8f6f 	isb	sy
 80098d8:	e780      	b.n	80097dc <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 80098da:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80098dc:	f000 f8a6 	bl	8009a2c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80098e0:	f000 fbf4 	bl	800a0cc <xTaskResumeAll>
 80098e4:	e77a      	b.n	80097dc <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 80098e6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80098e8:	f000 f8a0 	bl	8009a2c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80098ec:	f000 fbee 	bl	800a0cc <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80098f0:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80098f2:	f000 f8ed 	bl	8009ad0 <prvIsQueueEmpty>
 80098f6:	4603      	mov	r3, r0
 80098f8:	2b00      	cmp	r3, #0
 80098fa:	f43f af6f 	beq.w	80097dc <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80098fe:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8009900:	4618      	mov	r0, r3
 8009902:	3730      	adds	r7, #48	@ 0x30
 8009904:	46bd      	mov	sp, r7
 8009906:	bd80      	pop	{r7, pc}
 8009908:	e000ed04 	.word	0xe000ed04

0800990c <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800990c:	b580      	push	{r7, lr}
 800990e:	b086      	sub	sp, #24
 8009910:	af00      	add	r7, sp, #0
 8009912:	60f8      	str	r0, [r7, #12]
 8009914:	60b9      	str	r1, [r7, #8]
 8009916:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8009918:	2300      	movs	r3, #0
 800991a:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800991c:	68fb      	ldr	r3, [r7, #12]
 800991e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009920:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8009922:	68fb      	ldr	r3, [r7, #12]
 8009924:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009926:	2b00      	cmp	r3, #0
 8009928:	d10d      	bne.n	8009946 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800992a:	68fb      	ldr	r3, [r7, #12]
 800992c:	681b      	ldr	r3, [r3, #0]
 800992e:	2b00      	cmp	r3, #0
 8009930:	d14d      	bne.n	80099ce <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8009932:	68fb      	ldr	r3, [r7, #12]
 8009934:	689b      	ldr	r3, [r3, #8]
 8009936:	4618      	mov	r0, r3
 8009938:	f000 ffcc 	bl	800a8d4 <xTaskPriorityDisinherit>
 800993c:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800993e:	68fb      	ldr	r3, [r7, #12]
 8009940:	2200      	movs	r2, #0
 8009942:	609a      	str	r2, [r3, #8]
 8009944:	e043      	b.n	80099ce <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8009946:	687b      	ldr	r3, [r7, #4]
 8009948:	2b00      	cmp	r3, #0
 800994a:	d119      	bne.n	8009980 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800994c:	68fb      	ldr	r3, [r7, #12]
 800994e:	6858      	ldr	r0, [r3, #4]
 8009950:	68fb      	ldr	r3, [r7, #12]
 8009952:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009954:	461a      	mov	r2, r3
 8009956:	68b9      	ldr	r1, [r7, #8]
 8009958:	f002 f8a2 	bl	800baa0 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800995c:	68fb      	ldr	r3, [r7, #12]
 800995e:	685a      	ldr	r2, [r3, #4]
 8009960:	68fb      	ldr	r3, [r7, #12]
 8009962:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009964:	441a      	add	r2, r3
 8009966:	68fb      	ldr	r3, [r7, #12]
 8009968:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800996a:	68fb      	ldr	r3, [r7, #12]
 800996c:	685a      	ldr	r2, [r3, #4]
 800996e:	68fb      	ldr	r3, [r7, #12]
 8009970:	689b      	ldr	r3, [r3, #8]
 8009972:	429a      	cmp	r2, r3
 8009974:	d32b      	bcc.n	80099ce <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8009976:	68fb      	ldr	r3, [r7, #12]
 8009978:	681a      	ldr	r2, [r3, #0]
 800997a:	68fb      	ldr	r3, [r7, #12]
 800997c:	605a      	str	r2, [r3, #4]
 800997e:	e026      	b.n	80099ce <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8009980:	68fb      	ldr	r3, [r7, #12]
 8009982:	68d8      	ldr	r0, [r3, #12]
 8009984:	68fb      	ldr	r3, [r7, #12]
 8009986:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009988:	461a      	mov	r2, r3
 800998a:	68b9      	ldr	r1, [r7, #8]
 800998c:	f002 f888 	bl	800baa0 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8009990:	68fb      	ldr	r3, [r7, #12]
 8009992:	68da      	ldr	r2, [r3, #12]
 8009994:	68fb      	ldr	r3, [r7, #12]
 8009996:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009998:	425b      	negs	r3, r3
 800999a:	441a      	add	r2, r3
 800999c:	68fb      	ldr	r3, [r7, #12]
 800999e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80099a0:	68fb      	ldr	r3, [r7, #12]
 80099a2:	68da      	ldr	r2, [r3, #12]
 80099a4:	68fb      	ldr	r3, [r7, #12]
 80099a6:	681b      	ldr	r3, [r3, #0]
 80099a8:	429a      	cmp	r2, r3
 80099aa:	d207      	bcs.n	80099bc <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80099ac:	68fb      	ldr	r3, [r7, #12]
 80099ae:	689a      	ldr	r2, [r3, #8]
 80099b0:	68fb      	ldr	r3, [r7, #12]
 80099b2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80099b4:	425b      	negs	r3, r3
 80099b6:	441a      	add	r2, r3
 80099b8:	68fb      	ldr	r3, [r7, #12]
 80099ba:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80099bc:	687b      	ldr	r3, [r7, #4]
 80099be:	2b02      	cmp	r3, #2
 80099c0:	d105      	bne.n	80099ce <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80099c2:	693b      	ldr	r3, [r7, #16]
 80099c4:	2b00      	cmp	r3, #0
 80099c6:	d002      	beq.n	80099ce <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80099c8:	693b      	ldr	r3, [r7, #16]
 80099ca:	3b01      	subs	r3, #1
 80099cc:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80099ce:	693b      	ldr	r3, [r7, #16]
 80099d0:	1c5a      	adds	r2, r3, #1
 80099d2:	68fb      	ldr	r3, [r7, #12]
 80099d4:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 80099d6:	697b      	ldr	r3, [r7, #20]
}
 80099d8:	4618      	mov	r0, r3
 80099da:	3718      	adds	r7, #24
 80099dc:	46bd      	mov	sp, r7
 80099de:	bd80      	pop	{r7, pc}

080099e0 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80099e0:	b580      	push	{r7, lr}
 80099e2:	b082      	sub	sp, #8
 80099e4:	af00      	add	r7, sp, #0
 80099e6:	6078      	str	r0, [r7, #4]
 80099e8:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80099ea:	687b      	ldr	r3, [r7, #4]
 80099ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80099ee:	2b00      	cmp	r3, #0
 80099f0:	d018      	beq.n	8009a24 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80099f2:	687b      	ldr	r3, [r7, #4]
 80099f4:	68da      	ldr	r2, [r3, #12]
 80099f6:	687b      	ldr	r3, [r7, #4]
 80099f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80099fa:	441a      	add	r2, r3
 80099fc:	687b      	ldr	r3, [r7, #4]
 80099fe:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8009a00:	687b      	ldr	r3, [r7, #4]
 8009a02:	68da      	ldr	r2, [r3, #12]
 8009a04:	687b      	ldr	r3, [r7, #4]
 8009a06:	689b      	ldr	r3, [r3, #8]
 8009a08:	429a      	cmp	r2, r3
 8009a0a:	d303      	bcc.n	8009a14 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8009a0c:	687b      	ldr	r3, [r7, #4]
 8009a0e:	681a      	ldr	r2, [r3, #0]
 8009a10:	687b      	ldr	r3, [r7, #4]
 8009a12:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8009a14:	687b      	ldr	r3, [r7, #4]
 8009a16:	68d9      	ldr	r1, [r3, #12]
 8009a18:	687b      	ldr	r3, [r7, #4]
 8009a1a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009a1c:	461a      	mov	r2, r3
 8009a1e:	6838      	ldr	r0, [r7, #0]
 8009a20:	f002 f83e 	bl	800baa0 <memcpy>
	}
}
 8009a24:	bf00      	nop
 8009a26:	3708      	adds	r7, #8
 8009a28:	46bd      	mov	sp, r7
 8009a2a:	bd80      	pop	{r7, pc}

08009a2c <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8009a2c:	b580      	push	{r7, lr}
 8009a2e:	b084      	sub	sp, #16
 8009a30:	af00      	add	r7, sp, #0
 8009a32:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8009a34:	f001 fca0 	bl	800b378 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8009a38:	687b      	ldr	r3, [r7, #4]
 8009a3a:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8009a3e:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8009a40:	e011      	b.n	8009a66 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8009a42:	687b      	ldr	r3, [r7, #4]
 8009a44:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009a46:	2b00      	cmp	r3, #0
 8009a48:	d012      	beq.n	8009a70 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8009a4a:	687b      	ldr	r3, [r7, #4]
 8009a4c:	3324      	adds	r3, #36	@ 0x24
 8009a4e:	4618      	mov	r0, r3
 8009a50:	f000 fd5c 	bl	800a50c <xTaskRemoveFromEventList>
 8009a54:	4603      	mov	r3, r0
 8009a56:	2b00      	cmp	r3, #0
 8009a58:	d001      	beq.n	8009a5e <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8009a5a:	f000 fe35 	bl	800a6c8 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8009a5e:	7bfb      	ldrb	r3, [r7, #15]
 8009a60:	3b01      	subs	r3, #1
 8009a62:	b2db      	uxtb	r3, r3
 8009a64:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8009a66:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009a6a:	2b00      	cmp	r3, #0
 8009a6c:	dce9      	bgt.n	8009a42 <prvUnlockQueue+0x16>
 8009a6e:	e000      	b.n	8009a72 <prvUnlockQueue+0x46>
					break;
 8009a70:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8009a72:	687b      	ldr	r3, [r7, #4]
 8009a74:	22ff      	movs	r2, #255	@ 0xff
 8009a76:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 8009a7a:	f001 fcaf 	bl	800b3dc <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8009a7e:	f001 fc7b 	bl	800b378 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8009a82:	687b      	ldr	r3, [r7, #4]
 8009a84:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8009a88:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8009a8a:	e011      	b.n	8009ab0 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8009a8c:	687b      	ldr	r3, [r7, #4]
 8009a8e:	691b      	ldr	r3, [r3, #16]
 8009a90:	2b00      	cmp	r3, #0
 8009a92:	d012      	beq.n	8009aba <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8009a94:	687b      	ldr	r3, [r7, #4]
 8009a96:	3310      	adds	r3, #16
 8009a98:	4618      	mov	r0, r3
 8009a9a:	f000 fd37 	bl	800a50c <xTaskRemoveFromEventList>
 8009a9e:	4603      	mov	r3, r0
 8009aa0:	2b00      	cmp	r3, #0
 8009aa2:	d001      	beq.n	8009aa8 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8009aa4:	f000 fe10 	bl	800a6c8 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8009aa8:	7bbb      	ldrb	r3, [r7, #14]
 8009aaa:	3b01      	subs	r3, #1
 8009aac:	b2db      	uxtb	r3, r3
 8009aae:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8009ab0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009ab4:	2b00      	cmp	r3, #0
 8009ab6:	dce9      	bgt.n	8009a8c <prvUnlockQueue+0x60>
 8009ab8:	e000      	b.n	8009abc <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8009aba:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8009abc:	687b      	ldr	r3, [r7, #4]
 8009abe:	22ff      	movs	r2, #255	@ 0xff
 8009ac0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 8009ac4:	f001 fc8a 	bl	800b3dc <vPortExitCritical>
}
 8009ac8:	bf00      	nop
 8009aca:	3710      	adds	r7, #16
 8009acc:	46bd      	mov	sp, r7
 8009ace:	bd80      	pop	{r7, pc}

08009ad0 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8009ad0:	b580      	push	{r7, lr}
 8009ad2:	b084      	sub	sp, #16
 8009ad4:	af00      	add	r7, sp, #0
 8009ad6:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8009ad8:	f001 fc4e 	bl	800b378 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8009adc:	687b      	ldr	r3, [r7, #4]
 8009ade:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009ae0:	2b00      	cmp	r3, #0
 8009ae2:	d102      	bne.n	8009aea <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8009ae4:	2301      	movs	r3, #1
 8009ae6:	60fb      	str	r3, [r7, #12]
 8009ae8:	e001      	b.n	8009aee <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8009aea:	2300      	movs	r3, #0
 8009aec:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8009aee:	f001 fc75 	bl	800b3dc <vPortExitCritical>

	return xReturn;
 8009af2:	68fb      	ldr	r3, [r7, #12]
}
 8009af4:	4618      	mov	r0, r3
 8009af6:	3710      	adds	r7, #16
 8009af8:	46bd      	mov	sp, r7
 8009afa:	bd80      	pop	{r7, pc}

08009afc <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8009afc:	b580      	push	{r7, lr}
 8009afe:	b084      	sub	sp, #16
 8009b00:	af00      	add	r7, sp, #0
 8009b02:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8009b04:	f001 fc38 	bl	800b378 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8009b08:	687b      	ldr	r3, [r7, #4]
 8009b0a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8009b0c:	687b      	ldr	r3, [r7, #4]
 8009b0e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009b10:	429a      	cmp	r2, r3
 8009b12:	d102      	bne.n	8009b1a <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8009b14:	2301      	movs	r3, #1
 8009b16:	60fb      	str	r3, [r7, #12]
 8009b18:	e001      	b.n	8009b1e <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8009b1a:	2300      	movs	r3, #0
 8009b1c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8009b1e:	f001 fc5d 	bl	800b3dc <vPortExitCritical>

	return xReturn;
 8009b22:	68fb      	ldr	r3, [r7, #12]
}
 8009b24:	4618      	mov	r0, r3
 8009b26:	3710      	adds	r7, #16
 8009b28:	46bd      	mov	sp, r7
 8009b2a:	bd80      	pop	{r7, pc}

08009b2c <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8009b2c:	b480      	push	{r7}
 8009b2e:	b085      	sub	sp, #20
 8009b30:	af00      	add	r7, sp, #0
 8009b32:	6078      	str	r0, [r7, #4]
 8009b34:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8009b36:	2300      	movs	r3, #0
 8009b38:	60fb      	str	r3, [r7, #12]
 8009b3a:	e014      	b.n	8009b66 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8009b3c:	4a0f      	ldr	r2, [pc, #60]	@ (8009b7c <vQueueAddToRegistry+0x50>)
 8009b3e:	68fb      	ldr	r3, [r7, #12]
 8009b40:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8009b44:	2b00      	cmp	r3, #0
 8009b46:	d10b      	bne.n	8009b60 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8009b48:	490c      	ldr	r1, [pc, #48]	@ (8009b7c <vQueueAddToRegistry+0x50>)
 8009b4a:	68fb      	ldr	r3, [r7, #12]
 8009b4c:	683a      	ldr	r2, [r7, #0]
 8009b4e:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8009b52:	4a0a      	ldr	r2, [pc, #40]	@ (8009b7c <vQueueAddToRegistry+0x50>)
 8009b54:	68fb      	ldr	r3, [r7, #12]
 8009b56:	00db      	lsls	r3, r3, #3
 8009b58:	4413      	add	r3, r2
 8009b5a:	687a      	ldr	r2, [r7, #4]
 8009b5c:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8009b5e:	e006      	b.n	8009b6e <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8009b60:	68fb      	ldr	r3, [r7, #12]
 8009b62:	3301      	adds	r3, #1
 8009b64:	60fb      	str	r3, [r7, #12]
 8009b66:	68fb      	ldr	r3, [r7, #12]
 8009b68:	2b07      	cmp	r3, #7
 8009b6a:	d9e7      	bls.n	8009b3c <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8009b6c:	bf00      	nop
 8009b6e:	bf00      	nop
 8009b70:	3714      	adds	r7, #20
 8009b72:	46bd      	mov	sp, r7
 8009b74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b78:	4770      	bx	lr
 8009b7a:	bf00      	nop
 8009b7c:	24000d20 	.word	0x24000d20

08009b80 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8009b80:	b580      	push	{r7, lr}
 8009b82:	b086      	sub	sp, #24
 8009b84:	af00      	add	r7, sp, #0
 8009b86:	60f8      	str	r0, [r7, #12]
 8009b88:	60b9      	str	r1, [r7, #8]
 8009b8a:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8009b8c:	68fb      	ldr	r3, [r7, #12]
 8009b8e:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8009b90:	f001 fbf2 	bl	800b378 <vPortEnterCritical>
 8009b94:	697b      	ldr	r3, [r7, #20]
 8009b96:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8009b9a:	b25b      	sxtb	r3, r3
 8009b9c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009ba0:	d103      	bne.n	8009baa <vQueueWaitForMessageRestricted+0x2a>
 8009ba2:	697b      	ldr	r3, [r7, #20]
 8009ba4:	2200      	movs	r2, #0
 8009ba6:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8009baa:	697b      	ldr	r3, [r7, #20]
 8009bac:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8009bb0:	b25b      	sxtb	r3, r3
 8009bb2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009bb6:	d103      	bne.n	8009bc0 <vQueueWaitForMessageRestricted+0x40>
 8009bb8:	697b      	ldr	r3, [r7, #20]
 8009bba:	2200      	movs	r2, #0
 8009bbc:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8009bc0:	f001 fc0c 	bl	800b3dc <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8009bc4:	697b      	ldr	r3, [r7, #20]
 8009bc6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009bc8:	2b00      	cmp	r3, #0
 8009bca:	d106      	bne.n	8009bda <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8009bcc:	697b      	ldr	r3, [r7, #20]
 8009bce:	3324      	adds	r3, #36	@ 0x24
 8009bd0:	687a      	ldr	r2, [r7, #4]
 8009bd2:	68b9      	ldr	r1, [r7, #8]
 8009bd4:	4618      	mov	r0, r3
 8009bd6:	f000 fc6d 	bl	800a4b4 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8009bda:	6978      	ldr	r0, [r7, #20]
 8009bdc:	f7ff ff26 	bl	8009a2c <prvUnlockQueue>
	}
 8009be0:	bf00      	nop
 8009be2:	3718      	adds	r7, #24
 8009be4:	46bd      	mov	sp, r7
 8009be6:	bd80      	pop	{r7, pc}

08009be8 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8009be8:	b580      	push	{r7, lr}
 8009bea:	b08e      	sub	sp, #56	@ 0x38
 8009bec:	af04      	add	r7, sp, #16
 8009bee:	60f8      	str	r0, [r7, #12]
 8009bf0:	60b9      	str	r1, [r7, #8]
 8009bf2:	607a      	str	r2, [r7, #4]
 8009bf4:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8009bf6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009bf8:	2b00      	cmp	r3, #0
 8009bfa:	d10b      	bne.n	8009c14 <xTaskCreateStatic+0x2c>
	__asm volatile
 8009bfc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009c00:	f383 8811 	msr	BASEPRI, r3
 8009c04:	f3bf 8f6f 	isb	sy
 8009c08:	f3bf 8f4f 	dsb	sy
 8009c0c:	623b      	str	r3, [r7, #32]
}
 8009c0e:	bf00      	nop
 8009c10:	bf00      	nop
 8009c12:	e7fd      	b.n	8009c10 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8009c14:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009c16:	2b00      	cmp	r3, #0
 8009c18:	d10b      	bne.n	8009c32 <xTaskCreateStatic+0x4a>
	__asm volatile
 8009c1a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009c1e:	f383 8811 	msr	BASEPRI, r3
 8009c22:	f3bf 8f6f 	isb	sy
 8009c26:	f3bf 8f4f 	dsb	sy
 8009c2a:	61fb      	str	r3, [r7, #28]
}
 8009c2c:	bf00      	nop
 8009c2e:	bf00      	nop
 8009c30:	e7fd      	b.n	8009c2e <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8009c32:	23a8      	movs	r3, #168	@ 0xa8
 8009c34:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8009c36:	693b      	ldr	r3, [r7, #16]
 8009c38:	2ba8      	cmp	r3, #168	@ 0xa8
 8009c3a:	d00b      	beq.n	8009c54 <xTaskCreateStatic+0x6c>
	__asm volatile
 8009c3c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009c40:	f383 8811 	msr	BASEPRI, r3
 8009c44:	f3bf 8f6f 	isb	sy
 8009c48:	f3bf 8f4f 	dsb	sy
 8009c4c:	61bb      	str	r3, [r7, #24]
}
 8009c4e:	bf00      	nop
 8009c50:	bf00      	nop
 8009c52:	e7fd      	b.n	8009c50 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8009c54:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8009c56:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009c58:	2b00      	cmp	r3, #0
 8009c5a:	d01e      	beq.n	8009c9a <xTaskCreateStatic+0xb2>
 8009c5c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009c5e:	2b00      	cmp	r3, #0
 8009c60:	d01b      	beq.n	8009c9a <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8009c62:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009c64:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8009c66:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009c68:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8009c6a:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8009c6c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009c6e:	2202      	movs	r2, #2
 8009c70:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8009c74:	2300      	movs	r3, #0
 8009c76:	9303      	str	r3, [sp, #12]
 8009c78:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009c7a:	9302      	str	r3, [sp, #8]
 8009c7c:	f107 0314 	add.w	r3, r7, #20
 8009c80:	9301      	str	r3, [sp, #4]
 8009c82:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009c84:	9300      	str	r3, [sp, #0]
 8009c86:	683b      	ldr	r3, [r7, #0]
 8009c88:	687a      	ldr	r2, [r7, #4]
 8009c8a:	68b9      	ldr	r1, [r7, #8]
 8009c8c:	68f8      	ldr	r0, [r7, #12]
 8009c8e:	f000 f851 	bl	8009d34 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8009c92:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8009c94:	f000 f8f6 	bl	8009e84 <prvAddNewTaskToReadyList>
 8009c98:	e001      	b.n	8009c9e <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 8009c9a:	2300      	movs	r3, #0
 8009c9c:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8009c9e:	697b      	ldr	r3, [r7, #20]
	}
 8009ca0:	4618      	mov	r0, r3
 8009ca2:	3728      	adds	r7, #40	@ 0x28
 8009ca4:	46bd      	mov	sp, r7
 8009ca6:	bd80      	pop	{r7, pc}

08009ca8 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8009ca8:	b580      	push	{r7, lr}
 8009caa:	b08c      	sub	sp, #48	@ 0x30
 8009cac:	af04      	add	r7, sp, #16
 8009cae:	60f8      	str	r0, [r7, #12]
 8009cb0:	60b9      	str	r1, [r7, #8]
 8009cb2:	603b      	str	r3, [r7, #0]
 8009cb4:	4613      	mov	r3, r2
 8009cb6:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8009cb8:	88fb      	ldrh	r3, [r7, #6]
 8009cba:	009b      	lsls	r3, r3, #2
 8009cbc:	4618      	mov	r0, r3
 8009cbe:	f001 fc7d 	bl	800b5bc <pvPortMalloc>
 8009cc2:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8009cc4:	697b      	ldr	r3, [r7, #20]
 8009cc6:	2b00      	cmp	r3, #0
 8009cc8:	d00e      	beq.n	8009ce8 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8009cca:	20a8      	movs	r0, #168	@ 0xa8
 8009ccc:	f001 fc76 	bl	800b5bc <pvPortMalloc>
 8009cd0:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8009cd2:	69fb      	ldr	r3, [r7, #28]
 8009cd4:	2b00      	cmp	r3, #0
 8009cd6:	d003      	beq.n	8009ce0 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8009cd8:	69fb      	ldr	r3, [r7, #28]
 8009cda:	697a      	ldr	r2, [r7, #20]
 8009cdc:	631a      	str	r2, [r3, #48]	@ 0x30
 8009cde:	e005      	b.n	8009cec <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8009ce0:	6978      	ldr	r0, [r7, #20]
 8009ce2:	f001 fd39 	bl	800b758 <vPortFree>
 8009ce6:	e001      	b.n	8009cec <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8009ce8:	2300      	movs	r3, #0
 8009cea:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8009cec:	69fb      	ldr	r3, [r7, #28]
 8009cee:	2b00      	cmp	r3, #0
 8009cf0:	d017      	beq.n	8009d22 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8009cf2:	69fb      	ldr	r3, [r7, #28]
 8009cf4:	2200      	movs	r2, #0
 8009cf6:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8009cfa:	88fa      	ldrh	r2, [r7, #6]
 8009cfc:	2300      	movs	r3, #0
 8009cfe:	9303      	str	r3, [sp, #12]
 8009d00:	69fb      	ldr	r3, [r7, #28]
 8009d02:	9302      	str	r3, [sp, #8]
 8009d04:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009d06:	9301      	str	r3, [sp, #4]
 8009d08:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009d0a:	9300      	str	r3, [sp, #0]
 8009d0c:	683b      	ldr	r3, [r7, #0]
 8009d0e:	68b9      	ldr	r1, [r7, #8]
 8009d10:	68f8      	ldr	r0, [r7, #12]
 8009d12:	f000 f80f 	bl	8009d34 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8009d16:	69f8      	ldr	r0, [r7, #28]
 8009d18:	f000 f8b4 	bl	8009e84 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8009d1c:	2301      	movs	r3, #1
 8009d1e:	61bb      	str	r3, [r7, #24]
 8009d20:	e002      	b.n	8009d28 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8009d22:	f04f 33ff 	mov.w	r3, #4294967295
 8009d26:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8009d28:	69bb      	ldr	r3, [r7, #24]
	}
 8009d2a:	4618      	mov	r0, r3
 8009d2c:	3720      	adds	r7, #32
 8009d2e:	46bd      	mov	sp, r7
 8009d30:	bd80      	pop	{r7, pc}
	...

08009d34 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8009d34:	b580      	push	{r7, lr}
 8009d36:	b088      	sub	sp, #32
 8009d38:	af00      	add	r7, sp, #0
 8009d3a:	60f8      	str	r0, [r7, #12]
 8009d3c:	60b9      	str	r1, [r7, #8]
 8009d3e:	607a      	str	r2, [r7, #4]
 8009d40:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8009d42:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009d44:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8009d46:	687b      	ldr	r3, [r7, #4]
 8009d48:	009b      	lsls	r3, r3, #2
 8009d4a:	461a      	mov	r2, r3
 8009d4c:	21a5      	movs	r1, #165	@ 0xa5
 8009d4e:	f001 fe23 	bl	800b998 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8009d52:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009d54:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8009d56:	6879      	ldr	r1, [r7, #4]
 8009d58:	f06f 4340 	mvn.w	r3, #3221225472	@ 0xc0000000
 8009d5c:	440b      	add	r3, r1
 8009d5e:	009b      	lsls	r3, r3, #2
 8009d60:	4413      	add	r3, r2
 8009d62:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8009d64:	69bb      	ldr	r3, [r7, #24]
 8009d66:	f023 0307 	bic.w	r3, r3, #7
 8009d6a:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8009d6c:	69bb      	ldr	r3, [r7, #24]
 8009d6e:	f003 0307 	and.w	r3, r3, #7
 8009d72:	2b00      	cmp	r3, #0
 8009d74:	d00b      	beq.n	8009d8e <prvInitialiseNewTask+0x5a>
	__asm volatile
 8009d76:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009d7a:	f383 8811 	msr	BASEPRI, r3
 8009d7e:	f3bf 8f6f 	isb	sy
 8009d82:	f3bf 8f4f 	dsb	sy
 8009d86:	617b      	str	r3, [r7, #20]
}
 8009d88:	bf00      	nop
 8009d8a:	bf00      	nop
 8009d8c:	e7fd      	b.n	8009d8a <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8009d8e:	68bb      	ldr	r3, [r7, #8]
 8009d90:	2b00      	cmp	r3, #0
 8009d92:	d01f      	beq.n	8009dd4 <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8009d94:	2300      	movs	r3, #0
 8009d96:	61fb      	str	r3, [r7, #28]
 8009d98:	e012      	b.n	8009dc0 <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8009d9a:	68ba      	ldr	r2, [r7, #8]
 8009d9c:	69fb      	ldr	r3, [r7, #28]
 8009d9e:	4413      	add	r3, r2
 8009da0:	7819      	ldrb	r1, [r3, #0]
 8009da2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009da4:	69fb      	ldr	r3, [r7, #28]
 8009da6:	4413      	add	r3, r2
 8009da8:	3334      	adds	r3, #52	@ 0x34
 8009daa:	460a      	mov	r2, r1
 8009dac:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8009dae:	68ba      	ldr	r2, [r7, #8]
 8009db0:	69fb      	ldr	r3, [r7, #28]
 8009db2:	4413      	add	r3, r2
 8009db4:	781b      	ldrb	r3, [r3, #0]
 8009db6:	2b00      	cmp	r3, #0
 8009db8:	d006      	beq.n	8009dc8 <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8009dba:	69fb      	ldr	r3, [r7, #28]
 8009dbc:	3301      	adds	r3, #1
 8009dbe:	61fb      	str	r3, [r7, #28]
 8009dc0:	69fb      	ldr	r3, [r7, #28]
 8009dc2:	2b0f      	cmp	r3, #15
 8009dc4:	d9e9      	bls.n	8009d9a <prvInitialiseNewTask+0x66>
 8009dc6:	e000      	b.n	8009dca <prvInitialiseNewTask+0x96>
			{
				break;
 8009dc8:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8009dca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009dcc:	2200      	movs	r2, #0
 8009dce:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8009dd2:	e003      	b.n	8009ddc <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8009dd4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009dd6:	2200      	movs	r2, #0
 8009dd8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8009ddc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009dde:	2b37      	cmp	r3, #55	@ 0x37
 8009de0:	d901      	bls.n	8009de6 <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8009de2:	2337      	movs	r3, #55	@ 0x37
 8009de4:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8009de6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009de8:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8009dea:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8009dec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009dee:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8009df0:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8009df2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009df4:	2200      	movs	r2, #0
 8009df6:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8009df8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009dfa:	3304      	adds	r3, #4
 8009dfc:	4618      	mov	r0, r3
 8009dfe:	f7ff f965 	bl	80090cc <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8009e02:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009e04:	3318      	adds	r3, #24
 8009e06:	4618      	mov	r0, r3
 8009e08:	f7ff f960 	bl	80090cc <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8009e0c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009e0e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009e10:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009e12:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009e14:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8009e18:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009e1a:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8009e1c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009e1e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009e20:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8009e22:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009e24:	2200      	movs	r2, #0
 8009e26:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8009e2a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009e2c:	2200      	movs	r2, #0
 8009e2e:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8009e32:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009e34:	3354      	adds	r3, #84	@ 0x54
 8009e36:	224c      	movs	r2, #76	@ 0x4c
 8009e38:	2100      	movs	r1, #0
 8009e3a:	4618      	mov	r0, r3
 8009e3c:	f001 fdac 	bl	800b998 <memset>
 8009e40:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009e42:	4a0d      	ldr	r2, [pc, #52]	@ (8009e78 <prvInitialiseNewTask+0x144>)
 8009e44:	659a      	str	r2, [r3, #88]	@ 0x58
 8009e46:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009e48:	4a0c      	ldr	r2, [pc, #48]	@ (8009e7c <prvInitialiseNewTask+0x148>)
 8009e4a:	65da      	str	r2, [r3, #92]	@ 0x5c
 8009e4c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009e4e:	4a0c      	ldr	r2, [pc, #48]	@ (8009e80 <prvInitialiseNewTask+0x14c>)
 8009e50:	661a      	str	r2, [r3, #96]	@ 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8009e52:	683a      	ldr	r2, [r7, #0]
 8009e54:	68f9      	ldr	r1, [r7, #12]
 8009e56:	69b8      	ldr	r0, [r7, #24]
 8009e58:	f001 f95a 	bl	800b110 <pxPortInitialiseStack>
 8009e5c:	4602      	mov	r2, r0
 8009e5e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009e60:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8009e62:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009e64:	2b00      	cmp	r3, #0
 8009e66:	d002      	beq.n	8009e6e <prvInitialiseNewTask+0x13a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8009e68:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009e6a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009e6c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8009e6e:	bf00      	nop
 8009e70:	3720      	adds	r7, #32
 8009e72:	46bd      	mov	sp, r7
 8009e74:	bd80      	pop	{r7, pc}
 8009e76:	bf00      	nop
 8009e78:	24004fb4 	.word	0x24004fb4
 8009e7c:	2400501c 	.word	0x2400501c
 8009e80:	24005084 	.word	0x24005084

08009e84 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8009e84:	b580      	push	{r7, lr}
 8009e86:	b082      	sub	sp, #8
 8009e88:	af00      	add	r7, sp, #0
 8009e8a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8009e8c:	f001 fa74 	bl	800b378 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8009e90:	4b2d      	ldr	r3, [pc, #180]	@ (8009f48 <prvAddNewTaskToReadyList+0xc4>)
 8009e92:	681b      	ldr	r3, [r3, #0]
 8009e94:	3301      	adds	r3, #1
 8009e96:	4a2c      	ldr	r2, [pc, #176]	@ (8009f48 <prvAddNewTaskToReadyList+0xc4>)
 8009e98:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8009e9a:	4b2c      	ldr	r3, [pc, #176]	@ (8009f4c <prvAddNewTaskToReadyList+0xc8>)
 8009e9c:	681b      	ldr	r3, [r3, #0]
 8009e9e:	2b00      	cmp	r3, #0
 8009ea0:	d109      	bne.n	8009eb6 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8009ea2:	4a2a      	ldr	r2, [pc, #168]	@ (8009f4c <prvAddNewTaskToReadyList+0xc8>)
 8009ea4:	687b      	ldr	r3, [r7, #4]
 8009ea6:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8009ea8:	4b27      	ldr	r3, [pc, #156]	@ (8009f48 <prvAddNewTaskToReadyList+0xc4>)
 8009eaa:	681b      	ldr	r3, [r3, #0]
 8009eac:	2b01      	cmp	r3, #1
 8009eae:	d110      	bne.n	8009ed2 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8009eb0:	f000 fc2e 	bl	800a710 <prvInitialiseTaskLists>
 8009eb4:	e00d      	b.n	8009ed2 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8009eb6:	4b26      	ldr	r3, [pc, #152]	@ (8009f50 <prvAddNewTaskToReadyList+0xcc>)
 8009eb8:	681b      	ldr	r3, [r3, #0]
 8009eba:	2b00      	cmp	r3, #0
 8009ebc:	d109      	bne.n	8009ed2 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8009ebe:	4b23      	ldr	r3, [pc, #140]	@ (8009f4c <prvAddNewTaskToReadyList+0xc8>)
 8009ec0:	681b      	ldr	r3, [r3, #0]
 8009ec2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009ec4:	687b      	ldr	r3, [r7, #4]
 8009ec6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009ec8:	429a      	cmp	r2, r3
 8009eca:	d802      	bhi.n	8009ed2 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8009ecc:	4a1f      	ldr	r2, [pc, #124]	@ (8009f4c <prvAddNewTaskToReadyList+0xc8>)
 8009ece:	687b      	ldr	r3, [r7, #4]
 8009ed0:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8009ed2:	4b20      	ldr	r3, [pc, #128]	@ (8009f54 <prvAddNewTaskToReadyList+0xd0>)
 8009ed4:	681b      	ldr	r3, [r3, #0]
 8009ed6:	3301      	adds	r3, #1
 8009ed8:	4a1e      	ldr	r2, [pc, #120]	@ (8009f54 <prvAddNewTaskToReadyList+0xd0>)
 8009eda:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8009edc:	4b1d      	ldr	r3, [pc, #116]	@ (8009f54 <prvAddNewTaskToReadyList+0xd0>)
 8009ede:	681a      	ldr	r2, [r3, #0]
 8009ee0:	687b      	ldr	r3, [r7, #4]
 8009ee2:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8009ee4:	687b      	ldr	r3, [r7, #4]
 8009ee6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009ee8:	4b1b      	ldr	r3, [pc, #108]	@ (8009f58 <prvAddNewTaskToReadyList+0xd4>)
 8009eea:	681b      	ldr	r3, [r3, #0]
 8009eec:	429a      	cmp	r2, r3
 8009eee:	d903      	bls.n	8009ef8 <prvAddNewTaskToReadyList+0x74>
 8009ef0:	687b      	ldr	r3, [r7, #4]
 8009ef2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009ef4:	4a18      	ldr	r2, [pc, #96]	@ (8009f58 <prvAddNewTaskToReadyList+0xd4>)
 8009ef6:	6013      	str	r3, [r2, #0]
 8009ef8:	687b      	ldr	r3, [r7, #4]
 8009efa:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009efc:	4613      	mov	r3, r2
 8009efe:	009b      	lsls	r3, r3, #2
 8009f00:	4413      	add	r3, r2
 8009f02:	009b      	lsls	r3, r3, #2
 8009f04:	4a15      	ldr	r2, [pc, #84]	@ (8009f5c <prvAddNewTaskToReadyList+0xd8>)
 8009f06:	441a      	add	r2, r3
 8009f08:	687b      	ldr	r3, [r7, #4]
 8009f0a:	3304      	adds	r3, #4
 8009f0c:	4619      	mov	r1, r3
 8009f0e:	4610      	mov	r0, r2
 8009f10:	f7ff f8e9 	bl	80090e6 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8009f14:	f001 fa62 	bl	800b3dc <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8009f18:	4b0d      	ldr	r3, [pc, #52]	@ (8009f50 <prvAddNewTaskToReadyList+0xcc>)
 8009f1a:	681b      	ldr	r3, [r3, #0]
 8009f1c:	2b00      	cmp	r3, #0
 8009f1e:	d00e      	beq.n	8009f3e <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8009f20:	4b0a      	ldr	r3, [pc, #40]	@ (8009f4c <prvAddNewTaskToReadyList+0xc8>)
 8009f22:	681b      	ldr	r3, [r3, #0]
 8009f24:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009f26:	687b      	ldr	r3, [r7, #4]
 8009f28:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009f2a:	429a      	cmp	r2, r3
 8009f2c:	d207      	bcs.n	8009f3e <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8009f2e:	4b0c      	ldr	r3, [pc, #48]	@ (8009f60 <prvAddNewTaskToReadyList+0xdc>)
 8009f30:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009f34:	601a      	str	r2, [r3, #0]
 8009f36:	f3bf 8f4f 	dsb	sy
 8009f3a:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8009f3e:	bf00      	nop
 8009f40:	3708      	adds	r7, #8
 8009f42:	46bd      	mov	sp, r7
 8009f44:	bd80      	pop	{r7, pc}
 8009f46:	bf00      	nop
 8009f48:	24001234 	.word	0x24001234
 8009f4c:	24000d60 	.word	0x24000d60
 8009f50:	24001240 	.word	0x24001240
 8009f54:	24001250 	.word	0x24001250
 8009f58:	2400123c 	.word	0x2400123c
 8009f5c:	24000d64 	.word	0x24000d64
 8009f60:	e000ed04 	.word	0xe000ed04

08009f64 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8009f64:	b580      	push	{r7, lr}
 8009f66:	b084      	sub	sp, #16
 8009f68:	af00      	add	r7, sp, #0
 8009f6a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8009f6c:	2300      	movs	r3, #0
 8009f6e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8009f70:	687b      	ldr	r3, [r7, #4]
 8009f72:	2b00      	cmp	r3, #0
 8009f74:	d018      	beq.n	8009fa8 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8009f76:	4b14      	ldr	r3, [pc, #80]	@ (8009fc8 <vTaskDelay+0x64>)
 8009f78:	681b      	ldr	r3, [r3, #0]
 8009f7a:	2b00      	cmp	r3, #0
 8009f7c:	d00b      	beq.n	8009f96 <vTaskDelay+0x32>
	__asm volatile
 8009f7e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009f82:	f383 8811 	msr	BASEPRI, r3
 8009f86:	f3bf 8f6f 	isb	sy
 8009f8a:	f3bf 8f4f 	dsb	sy
 8009f8e:	60bb      	str	r3, [r7, #8]
}
 8009f90:	bf00      	nop
 8009f92:	bf00      	nop
 8009f94:	e7fd      	b.n	8009f92 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8009f96:	f000 f88b 	bl	800a0b0 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8009f9a:	2100      	movs	r1, #0
 8009f9c:	6878      	ldr	r0, [r7, #4]
 8009f9e:	f000 fd09 	bl	800a9b4 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8009fa2:	f000 f893 	bl	800a0cc <xTaskResumeAll>
 8009fa6:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8009fa8:	68fb      	ldr	r3, [r7, #12]
 8009faa:	2b00      	cmp	r3, #0
 8009fac:	d107      	bne.n	8009fbe <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 8009fae:	4b07      	ldr	r3, [pc, #28]	@ (8009fcc <vTaskDelay+0x68>)
 8009fb0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009fb4:	601a      	str	r2, [r3, #0]
 8009fb6:	f3bf 8f4f 	dsb	sy
 8009fba:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8009fbe:	bf00      	nop
 8009fc0:	3710      	adds	r7, #16
 8009fc2:	46bd      	mov	sp, r7
 8009fc4:	bd80      	pop	{r7, pc}
 8009fc6:	bf00      	nop
 8009fc8:	2400125c 	.word	0x2400125c
 8009fcc:	e000ed04 	.word	0xe000ed04

08009fd0 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8009fd0:	b580      	push	{r7, lr}
 8009fd2:	b08a      	sub	sp, #40	@ 0x28
 8009fd4:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8009fd6:	2300      	movs	r3, #0
 8009fd8:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8009fda:	2300      	movs	r3, #0
 8009fdc:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8009fde:	463a      	mov	r2, r7
 8009fe0:	1d39      	adds	r1, r7, #4
 8009fe2:	f107 0308 	add.w	r3, r7, #8
 8009fe6:	4618      	mov	r0, r3
 8009fe8:	f7ff f81c 	bl	8009024 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8009fec:	6839      	ldr	r1, [r7, #0]
 8009fee:	687b      	ldr	r3, [r7, #4]
 8009ff0:	68ba      	ldr	r2, [r7, #8]
 8009ff2:	9202      	str	r2, [sp, #8]
 8009ff4:	9301      	str	r3, [sp, #4]
 8009ff6:	2300      	movs	r3, #0
 8009ff8:	9300      	str	r3, [sp, #0]
 8009ffa:	2300      	movs	r3, #0
 8009ffc:	460a      	mov	r2, r1
 8009ffe:	4924      	ldr	r1, [pc, #144]	@ (800a090 <vTaskStartScheduler+0xc0>)
 800a000:	4824      	ldr	r0, [pc, #144]	@ (800a094 <vTaskStartScheduler+0xc4>)
 800a002:	f7ff fdf1 	bl	8009be8 <xTaskCreateStatic>
 800a006:	4603      	mov	r3, r0
 800a008:	4a23      	ldr	r2, [pc, #140]	@ (800a098 <vTaskStartScheduler+0xc8>)
 800a00a:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800a00c:	4b22      	ldr	r3, [pc, #136]	@ (800a098 <vTaskStartScheduler+0xc8>)
 800a00e:	681b      	ldr	r3, [r3, #0]
 800a010:	2b00      	cmp	r3, #0
 800a012:	d002      	beq.n	800a01a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800a014:	2301      	movs	r3, #1
 800a016:	617b      	str	r3, [r7, #20]
 800a018:	e001      	b.n	800a01e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800a01a:	2300      	movs	r3, #0
 800a01c:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800a01e:	697b      	ldr	r3, [r7, #20]
 800a020:	2b01      	cmp	r3, #1
 800a022:	d102      	bne.n	800a02a <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800a024:	f000 fd1a 	bl	800aa5c <xTimerCreateTimerTask>
 800a028:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800a02a:	697b      	ldr	r3, [r7, #20]
 800a02c:	2b01      	cmp	r3, #1
 800a02e:	d11b      	bne.n	800a068 <vTaskStartScheduler+0x98>
	__asm volatile
 800a030:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a034:	f383 8811 	msr	BASEPRI, r3
 800a038:	f3bf 8f6f 	isb	sy
 800a03c:	f3bf 8f4f 	dsb	sy
 800a040:	613b      	str	r3, [r7, #16]
}
 800a042:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800a044:	4b15      	ldr	r3, [pc, #84]	@ (800a09c <vTaskStartScheduler+0xcc>)
 800a046:	681b      	ldr	r3, [r3, #0]
 800a048:	3354      	adds	r3, #84	@ 0x54
 800a04a:	4a15      	ldr	r2, [pc, #84]	@ (800a0a0 <vTaskStartScheduler+0xd0>)
 800a04c:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800a04e:	4b15      	ldr	r3, [pc, #84]	@ (800a0a4 <vTaskStartScheduler+0xd4>)
 800a050:	f04f 32ff 	mov.w	r2, #4294967295
 800a054:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800a056:	4b14      	ldr	r3, [pc, #80]	@ (800a0a8 <vTaskStartScheduler+0xd8>)
 800a058:	2201      	movs	r2, #1
 800a05a:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800a05c:	4b13      	ldr	r3, [pc, #76]	@ (800a0ac <vTaskStartScheduler+0xdc>)
 800a05e:	2200      	movs	r2, #0
 800a060:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800a062:	f001 f8e5 	bl	800b230 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800a066:	e00f      	b.n	800a088 <vTaskStartScheduler+0xb8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800a068:	697b      	ldr	r3, [r7, #20]
 800a06a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a06e:	d10b      	bne.n	800a088 <vTaskStartScheduler+0xb8>
	__asm volatile
 800a070:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a074:	f383 8811 	msr	BASEPRI, r3
 800a078:	f3bf 8f6f 	isb	sy
 800a07c:	f3bf 8f4f 	dsb	sy
 800a080:	60fb      	str	r3, [r7, #12]
}
 800a082:	bf00      	nop
 800a084:	bf00      	nop
 800a086:	e7fd      	b.n	800a084 <vTaskStartScheduler+0xb4>
}
 800a088:	bf00      	nop
 800a08a:	3718      	adds	r7, #24
 800a08c:	46bd      	mov	sp, r7
 800a08e:	bd80      	pop	{r7, pc}
 800a090:	0800bb8c 	.word	0x0800bb8c
 800a094:	0800a6e1 	.word	0x0800a6e1
 800a098:	24001258 	.word	0x24001258
 800a09c:	24000d60 	.word	0x24000d60
 800a0a0:	24000014 	.word	0x24000014
 800a0a4:	24001254 	.word	0x24001254
 800a0a8:	24001240 	.word	0x24001240
 800a0ac:	24001238 	.word	0x24001238

0800a0b0 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800a0b0:	b480      	push	{r7}
 800a0b2:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800a0b4:	4b04      	ldr	r3, [pc, #16]	@ (800a0c8 <vTaskSuspendAll+0x18>)
 800a0b6:	681b      	ldr	r3, [r3, #0]
 800a0b8:	3301      	adds	r3, #1
 800a0ba:	4a03      	ldr	r2, [pc, #12]	@ (800a0c8 <vTaskSuspendAll+0x18>)
 800a0bc:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800a0be:	bf00      	nop
 800a0c0:	46bd      	mov	sp, r7
 800a0c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0c6:	4770      	bx	lr
 800a0c8:	2400125c 	.word	0x2400125c

0800a0cc <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800a0cc:	b580      	push	{r7, lr}
 800a0ce:	b084      	sub	sp, #16
 800a0d0:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800a0d2:	2300      	movs	r3, #0
 800a0d4:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800a0d6:	2300      	movs	r3, #0
 800a0d8:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800a0da:	4b42      	ldr	r3, [pc, #264]	@ (800a1e4 <xTaskResumeAll+0x118>)
 800a0dc:	681b      	ldr	r3, [r3, #0]
 800a0de:	2b00      	cmp	r3, #0
 800a0e0:	d10b      	bne.n	800a0fa <xTaskResumeAll+0x2e>
	__asm volatile
 800a0e2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a0e6:	f383 8811 	msr	BASEPRI, r3
 800a0ea:	f3bf 8f6f 	isb	sy
 800a0ee:	f3bf 8f4f 	dsb	sy
 800a0f2:	603b      	str	r3, [r7, #0]
}
 800a0f4:	bf00      	nop
 800a0f6:	bf00      	nop
 800a0f8:	e7fd      	b.n	800a0f6 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800a0fa:	f001 f93d 	bl	800b378 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800a0fe:	4b39      	ldr	r3, [pc, #228]	@ (800a1e4 <xTaskResumeAll+0x118>)
 800a100:	681b      	ldr	r3, [r3, #0]
 800a102:	3b01      	subs	r3, #1
 800a104:	4a37      	ldr	r2, [pc, #220]	@ (800a1e4 <xTaskResumeAll+0x118>)
 800a106:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a108:	4b36      	ldr	r3, [pc, #216]	@ (800a1e4 <xTaskResumeAll+0x118>)
 800a10a:	681b      	ldr	r3, [r3, #0]
 800a10c:	2b00      	cmp	r3, #0
 800a10e:	d162      	bne.n	800a1d6 <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800a110:	4b35      	ldr	r3, [pc, #212]	@ (800a1e8 <xTaskResumeAll+0x11c>)
 800a112:	681b      	ldr	r3, [r3, #0]
 800a114:	2b00      	cmp	r3, #0
 800a116:	d05e      	beq.n	800a1d6 <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800a118:	e02f      	b.n	800a17a <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a11a:	4b34      	ldr	r3, [pc, #208]	@ (800a1ec <xTaskResumeAll+0x120>)
 800a11c:	68db      	ldr	r3, [r3, #12]
 800a11e:	68db      	ldr	r3, [r3, #12]
 800a120:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800a122:	68fb      	ldr	r3, [r7, #12]
 800a124:	3318      	adds	r3, #24
 800a126:	4618      	mov	r0, r3
 800a128:	f7ff f83a 	bl	80091a0 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800a12c:	68fb      	ldr	r3, [r7, #12]
 800a12e:	3304      	adds	r3, #4
 800a130:	4618      	mov	r0, r3
 800a132:	f7ff f835 	bl	80091a0 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800a136:	68fb      	ldr	r3, [r7, #12]
 800a138:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a13a:	4b2d      	ldr	r3, [pc, #180]	@ (800a1f0 <xTaskResumeAll+0x124>)
 800a13c:	681b      	ldr	r3, [r3, #0]
 800a13e:	429a      	cmp	r2, r3
 800a140:	d903      	bls.n	800a14a <xTaskResumeAll+0x7e>
 800a142:	68fb      	ldr	r3, [r7, #12]
 800a144:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a146:	4a2a      	ldr	r2, [pc, #168]	@ (800a1f0 <xTaskResumeAll+0x124>)
 800a148:	6013      	str	r3, [r2, #0]
 800a14a:	68fb      	ldr	r3, [r7, #12]
 800a14c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a14e:	4613      	mov	r3, r2
 800a150:	009b      	lsls	r3, r3, #2
 800a152:	4413      	add	r3, r2
 800a154:	009b      	lsls	r3, r3, #2
 800a156:	4a27      	ldr	r2, [pc, #156]	@ (800a1f4 <xTaskResumeAll+0x128>)
 800a158:	441a      	add	r2, r3
 800a15a:	68fb      	ldr	r3, [r7, #12]
 800a15c:	3304      	adds	r3, #4
 800a15e:	4619      	mov	r1, r3
 800a160:	4610      	mov	r0, r2
 800a162:	f7fe ffc0 	bl	80090e6 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800a166:	68fb      	ldr	r3, [r7, #12]
 800a168:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a16a:	4b23      	ldr	r3, [pc, #140]	@ (800a1f8 <xTaskResumeAll+0x12c>)
 800a16c:	681b      	ldr	r3, [r3, #0]
 800a16e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a170:	429a      	cmp	r2, r3
 800a172:	d302      	bcc.n	800a17a <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 800a174:	4b21      	ldr	r3, [pc, #132]	@ (800a1fc <xTaskResumeAll+0x130>)
 800a176:	2201      	movs	r2, #1
 800a178:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800a17a:	4b1c      	ldr	r3, [pc, #112]	@ (800a1ec <xTaskResumeAll+0x120>)
 800a17c:	681b      	ldr	r3, [r3, #0]
 800a17e:	2b00      	cmp	r3, #0
 800a180:	d1cb      	bne.n	800a11a <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800a182:	68fb      	ldr	r3, [r7, #12]
 800a184:	2b00      	cmp	r3, #0
 800a186:	d001      	beq.n	800a18c <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800a188:	f000 fb66 	bl	800a858 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800a18c:	4b1c      	ldr	r3, [pc, #112]	@ (800a200 <xTaskResumeAll+0x134>)
 800a18e:	681b      	ldr	r3, [r3, #0]
 800a190:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800a192:	687b      	ldr	r3, [r7, #4]
 800a194:	2b00      	cmp	r3, #0
 800a196:	d010      	beq.n	800a1ba <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800a198:	f000 f846 	bl	800a228 <xTaskIncrementTick>
 800a19c:	4603      	mov	r3, r0
 800a19e:	2b00      	cmp	r3, #0
 800a1a0:	d002      	beq.n	800a1a8 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 800a1a2:	4b16      	ldr	r3, [pc, #88]	@ (800a1fc <xTaskResumeAll+0x130>)
 800a1a4:	2201      	movs	r2, #1
 800a1a6:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800a1a8:	687b      	ldr	r3, [r7, #4]
 800a1aa:	3b01      	subs	r3, #1
 800a1ac:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800a1ae:	687b      	ldr	r3, [r7, #4]
 800a1b0:	2b00      	cmp	r3, #0
 800a1b2:	d1f1      	bne.n	800a198 <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 800a1b4:	4b12      	ldr	r3, [pc, #72]	@ (800a200 <xTaskResumeAll+0x134>)
 800a1b6:	2200      	movs	r2, #0
 800a1b8:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800a1ba:	4b10      	ldr	r3, [pc, #64]	@ (800a1fc <xTaskResumeAll+0x130>)
 800a1bc:	681b      	ldr	r3, [r3, #0]
 800a1be:	2b00      	cmp	r3, #0
 800a1c0:	d009      	beq.n	800a1d6 <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800a1c2:	2301      	movs	r3, #1
 800a1c4:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800a1c6:	4b0f      	ldr	r3, [pc, #60]	@ (800a204 <xTaskResumeAll+0x138>)
 800a1c8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a1cc:	601a      	str	r2, [r3, #0]
 800a1ce:	f3bf 8f4f 	dsb	sy
 800a1d2:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800a1d6:	f001 f901 	bl	800b3dc <vPortExitCritical>

	return xAlreadyYielded;
 800a1da:	68bb      	ldr	r3, [r7, #8]
}
 800a1dc:	4618      	mov	r0, r3
 800a1de:	3710      	adds	r7, #16
 800a1e0:	46bd      	mov	sp, r7
 800a1e2:	bd80      	pop	{r7, pc}
 800a1e4:	2400125c 	.word	0x2400125c
 800a1e8:	24001234 	.word	0x24001234
 800a1ec:	240011f4 	.word	0x240011f4
 800a1f0:	2400123c 	.word	0x2400123c
 800a1f4:	24000d64 	.word	0x24000d64
 800a1f8:	24000d60 	.word	0x24000d60
 800a1fc:	24001248 	.word	0x24001248
 800a200:	24001244 	.word	0x24001244
 800a204:	e000ed04 	.word	0xe000ed04

0800a208 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800a208:	b480      	push	{r7}
 800a20a:	b083      	sub	sp, #12
 800a20c:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800a20e:	4b05      	ldr	r3, [pc, #20]	@ (800a224 <xTaskGetTickCount+0x1c>)
 800a210:	681b      	ldr	r3, [r3, #0]
 800a212:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800a214:	687b      	ldr	r3, [r7, #4]
}
 800a216:	4618      	mov	r0, r3
 800a218:	370c      	adds	r7, #12
 800a21a:	46bd      	mov	sp, r7
 800a21c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a220:	4770      	bx	lr
 800a222:	bf00      	nop
 800a224:	24001238 	.word	0x24001238

0800a228 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800a228:	b580      	push	{r7, lr}
 800a22a:	b086      	sub	sp, #24
 800a22c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800a22e:	2300      	movs	r3, #0
 800a230:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a232:	4b4f      	ldr	r3, [pc, #316]	@ (800a370 <xTaskIncrementTick+0x148>)
 800a234:	681b      	ldr	r3, [r3, #0]
 800a236:	2b00      	cmp	r3, #0
 800a238:	f040 8090 	bne.w	800a35c <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800a23c:	4b4d      	ldr	r3, [pc, #308]	@ (800a374 <xTaskIncrementTick+0x14c>)
 800a23e:	681b      	ldr	r3, [r3, #0]
 800a240:	3301      	adds	r3, #1
 800a242:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800a244:	4a4b      	ldr	r2, [pc, #300]	@ (800a374 <xTaskIncrementTick+0x14c>)
 800a246:	693b      	ldr	r3, [r7, #16]
 800a248:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800a24a:	693b      	ldr	r3, [r7, #16]
 800a24c:	2b00      	cmp	r3, #0
 800a24e:	d121      	bne.n	800a294 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 800a250:	4b49      	ldr	r3, [pc, #292]	@ (800a378 <xTaskIncrementTick+0x150>)
 800a252:	681b      	ldr	r3, [r3, #0]
 800a254:	681b      	ldr	r3, [r3, #0]
 800a256:	2b00      	cmp	r3, #0
 800a258:	d00b      	beq.n	800a272 <xTaskIncrementTick+0x4a>
	__asm volatile
 800a25a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a25e:	f383 8811 	msr	BASEPRI, r3
 800a262:	f3bf 8f6f 	isb	sy
 800a266:	f3bf 8f4f 	dsb	sy
 800a26a:	603b      	str	r3, [r7, #0]
}
 800a26c:	bf00      	nop
 800a26e:	bf00      	nop
 800a270:	e7fd      	b.n	800a26e <xTaskIncrementTick+0x46>
 800a272:	4b41      	ldr	r3, [pc, #260]	@ (800a378 <xTaskIncrementTick+0x150>)
 800a274:	681b      	ldr	r3, [r3, #0]
 800a276:	60fb      	str	r3, [r7, #12]
 800a278:	4b40      	ldr	r3, [pc, #256]	@ (800a37c <xTaskIncrementTick+0x154>)
 800a27a:	681b      	ldr	r3, [r3, #0]
 800a27c:	4a3e      	ldr	r2, [pc, #248]	@ (800a378 <xTaskIncrementTick+0x150>)
 800a27e:	6013      	str	r3, [r2, #0]
 800a280:	4a3e      	ldr	r2, [pc, #248]	@ (800a37c <xTaskIncrementTick+0x154>)
 800a282:	68fb      	ldr	r3, [r7, #12]
 800a284:	6013      	str	r3, [r2, #0]
 800a286:	4b3e      	ldr	r3, [pc, #248]	@ (800a380 <xTaskIncrementTick+0x158>)
 800a288:	681b      	ldr	r3, [r3, #0]
 800a28a:	3301      	adds	r3, #1
 800a28c:	4a3c      	ldr	r2, [pc, #240]	@ (800a380 <xTaskIncrementTick+0x158>)
 800a28e:	6013      	str	r3, [r2, #0]
 800a290:	f000 fae2 	bl	800a858 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800a294:	4b3b      	ldr	r3, [pc, #236]	@ (800a384 <xTaskIncrementTick+0x15c>)
 800a296:	681b      	ldr	r3, [r3, #0]
 800a298:	693a      	ldr	r2, [r7, #16]
 800a29a:	429a      	cmp	r2, r3
 800a29c:	d349      	bcc.n	800a332 <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800a29e:	4b36      	ldr	r3, [pc, #216]	@ (800a378 <xTaskIncrementTick+0x150>)
 800a2a0:	681b      	ldr	r3, [r3, #0]
 800a2a2:	681b      	ldr	r3, [r3, #0]
 800a2a4:	2b00      	cmp	r3, #0
 800a2a6:	d104      	bne.n	800a2b2 <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a2a8:	4b36      	ldr	r3, [pc, #216]	@ (800a384 <xTaskIncrementTick+0x15c>)
 800a2aa:	f04f 32ff 	mov.w	r2, #4294967295
 800a2ae:	601a      	str	r2, [r3, #0]
					break;
 800a2b0:	e03f      	b.n	800a332 <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a2b2:	4b31      	ldr	r3, [pc, #196]	@ (800a378 <xTaskIncrementTick+0x150>)
 800a2b4:	681b      	ldr	r3, [r3, #0]
 800a2b6:	68db      	ldr	r3, [r3, #12]
 800a2b8:	68db      	ldr	r3, [r3, #12]
 800a2ba:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800a2bc:	68bb      	ldr	r3, [r7, #8]
 800a2be:	685b      	ldr	r3, [r3, #4]
 800a2c0:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800a2c2:	693a      	ldr	r2, [r7, #16]
 800a2c4:	687b      	ldr	r3, [r7, #4]
 800a2c6:	429a      	cmp	r2, r3
 800a2c8:	d203      	bcs.n	800a2d2 <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800a2ca:	4a2e      	ldr	r2, [pc, #184]	@ (800a384 <xTaskIncrementTick+0x15c>)
 800a2cc:	687b      	ldr	r3, [r7, #4]
 800a2ce:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800a2d0:	e02f      	b.n	800a332 <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800a2d2:	68bb      	ldr	r3, [r7, #8]
 800a2d4:	3304      	adds	r3, #4
 800a2d6:	4618      	mov	r0, r3
 800a2d8:	f7fe ff62 	bl	80091a0 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800a2dc:	68bb      	ldr	r3, [r7, #8]
 800a2de:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a2e0:	2b00      	cmp	r3, #0
 800a2e2:	d004      	beq.n	800a2ee <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800a2e4:	68bb      	ldr	r3, [r7, #8]
 800a2e6:	3318      	adds	r3, #24
 800a2e8:	4618      	mov	r0, r3
 800a2ea:	f7fe ff59 	bl	80091a0 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800a2ee:	68bb      	ldr	r3, [r7, #8]
 800a2f0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a2f2:	4b25      	ldr	r3, [pc, #148]	@ (800a388 <xTaskIncrementTick+0x160>)
 800a2f4:	681b      	ldr	r3, [r3, #0]
 800a2f6:	429a      	cmp	r2, r3
 800a2f8:	d903      	bls.n	800a302 <xTaskIncrementTick+0xda>
 800a2fa:	68bb      	ldr	r3, [r7, #8]
 800a2fc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a2fe:	4a22      	ldr	r2, [pc, #136]	@ (800a388 <xTaskIncrementTick+0x160>)
 800a300:	6013      	str	r3, [r2, #0]
 800a302:	68bb      	ldr	r3, [r7, #8]
 800a304:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a306:	4613      	mov	r3, r2
 800a308:	009b      	lsls	r3, r3, #2
 800a30a:	4413      	add	r3, r2
 800a30c:	009b      	lsls	r3, r3, #2
 800a30e:	4a1f      	ldr	r2, [pc, #124]	@ (800a38c <xTaskIncrementTick+0x164>)
 800a310:	441a      	add	r2, r3
 800a312:	68bb      	ldr	r3, [r7, #8]
 800a314:	3304      	adds	r3, #4
 800a316:	4619      	mov	r1, r3
 800a318:	4610      	mov	r0, r2
 800a31a:	f7fe fee4 	bl	80090e6 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800a31e:	68bb      	ldr	r3, [r7, #8]
 800a320:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a322:	4b1b      	ldr	r3, [pc, #108]	@ (800a390 <xTaskIncrementTick+0x168>)
 800a324:	681b      	ldr	r3, [r3, #0]
 800a326:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a328:	429a      	cmp	r2, r3
 800a32a:	d3b8      	bcc.n	800a29e <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 800a32c:	2301      	movs	r3, #1
 800a32e:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800a330:	e7b5      	b.n	800a29e <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800a332:	4b17      	ldr	r3, [pc, #92]	@ (800a390 <xTaskIncrementTick+0x168>)
 800a334:	681b      	ldr	r3, [r3, #0]
 800a336:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a338:	4914      	ldr	r1, [pc, #80]	@ (800a38c <xTaskIncrementTick+0x164>)
 800a33a:	4613      	mov	r3, r2
 800a33c:	009b      	lsls	r3, r3, #2
 800a33e:	4413      	add	r3, r2
 800a340:	009b      	lsls	r3, r3, #2
 800a342:	440b      	add	r3, r1
 800a344:	681b      	ldr	r3, [r3, #0]
 800a346:	2b01      	cmp	r3, #1
 800a348:	d901      	bls.n	800a34e <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 800a34a:	2301      	movs	r3, #1
 800a34c:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800a34e:	4b11      	ldr	r3, [pc, #68]	@ (800a394 <xTaskIncrementTick+0x16c>)
 800a350:	681b      	ldr	r3, [r3, #0]
 800a352:	2b00      	cmp	r3, #0
 800a354:	d007      	beq.n	800a366 <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 800a356:	2301      	movs	r3, #1
 800a358:	617b      	str	r3, [r7, #20]
 800a35a:	e004      	b.n	800a366 <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800a35c:	4b0e      	ldr	r3, [pc, #56]	@ (800a398 <xTaskIncrementTick+0x170>)
 800a35e:	681b      	ldr	r3, [r3, #0]
 800a360:	3301      	adds	r3, #1
 800a362:	4a0d      	ldr	r2, [pc, #52]	@ (800a398 <xTaskIncrementTick+0x170>)
 800a364:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800a366:	697b      	ldr	r3, [r7, #20]
}
 800a368:	4618      	mov	r0, r3
 800a36a:	3718      	adds	r7, #24
 800a36c:	46bd      	mov	sp, r7
 800a36e:	bd80      	pop	{r7, pc}
 800a370:	2400125c 	.word	0x2400125c
 800a374:	24001238 	.word	0x24001238
 800a378:	240011ec 	.word	0x240011ec
 800a37c:	240011f0 	.word	0x240011f0
 800a380:	2400124c 	.word	0x2400124c
 800a384:	24001254 	.word	0x24001254
 800a388:	2400123c 	.word	0x2400123c
 800a38c:	24000d64 	.word	0x24000d64
 800a390:	24000d60 	.word	0x24000d60
 800a394:	24001248 	.word	0x24001248
 800a398:	24001244 	.word	0x24001244

0800a39c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800a39c:	b480      	push	{r7}
 800a39e:	b085      	sub	sp, #20
 800a3a0:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800a3a2:	4b2b      	ldr	r3, [pc, #172]	@ (800a450 <vTaskSwitchContext+0xb4>)
 800a3a4:	681b      	ldr	r3, [r3, #0]
 800a3a6:	2b00      	cmp	r3, #0
 800a3a8:	d003      	beq.n	800a3b2 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800a3aa:	4b2a      	ldr	r3, [pc, #168]	@ (800a454 <vTaskSwitchContext+0xb8>)
 800a3ac:	2201      	movs	r2, #1
 800a3ae:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800a3b0:	e047      	b.n	800a442 <vTaskSwitchContext+0xa6>
		xYieldPending = pdFALSE;
 800a3b2:	4b28      	ldr	r3, [pc, #160]	@ (800a454 <vTaskSwitchContext+0xb8>)
 800a3b4:	2200      	movs	r2, #0
 800a3b6:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a3b8:	4b27      	ldr	r3, [pc, #156]	@ (800a458 <vTaskSwitchContext+0xbc>)
 800a3ba:	681b      	ldr	r3, [r3, #0]
 800a3bc:	60fb      	str	r3, [r7, #12]
 800a3be:	e011      	b.n	800a3e4 <vTaskSwitchContext+0x48>
 800a3c0:	68fb      	ldr	r3, [r7, #12]
 800a3c2:	2b00      	cmp	r3, #0
 800a3c4:	d10b      	bne.n	800a3de <vTaskSwitchContext+0x42>
	__asm volatile
 800a3c6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a3ca:	f383 8811 	msr	BASEPRI, r3
 800a3ce:	f3bf 8f6f 	isb	sy
 800a3d2:	f3bf 8f4f 	dsb	sy
 800a3d6:	607b      	str	r3, [r7, #4]
}
 800a3d8:	bf00      	nop
 800a3da:	bf00      	nop
 800a3dc:	e7fd      	b.n	800a3da <vTaskSwitchContext+0x3e>
 800a3de:	68fb      	ldr	r3, [r7, #12]
 800a3e0:	3b01      	subs	r3, #1
 800a3e2:	60fb      	str	r3, [r7, #12]
 800a3e4:	491d      	ldr	r1, [pc, #116]	@ (800a45c <vTaskSwitchContext+0xc0>)
 800a3e6:	68fa      	ldr	r2, [r7, #12]
 800a3e8:	4613      	mov	r3, r2
 800a3ea:	009b      	lsls	r3, r3, #2
 800a3ec:	4413      	add	r3, r2
 800a3ee:	009b      	lsls	r3, r3, #2
 800a3f0:	440b      	add	r3, r1
 800a3f2:	681b      	ldr	r3, [r3, #0]
 800a3f4:	2b00      	cmp	r3, #0
 800a3f6:	d0e3      	beq.n	800a3c0 <vTaskSwitchContext+0x24>
 800a3f8:	68fa      	ldr	r2, [r7, #12]
 800a3fa:	4613      	mov	r3, r2
 800a3fc:	009b      	lsls	r3, r3, #2
 800a3fe:	4413      	add	r3, r2
 800a400:	009b      	lsls	r3, r3, #2
 800a402:	4a16      	ldr	r2, [pc, #88]	@ (800a45c <vTaskSwitchContext+0xc0>)
 800a404:	4413      	add	r3, r2
 800a406:	60bb      	str	r3, [r7, #8]
 800a408:	68bb      	ldr	r3, [r7, #8]
 800a40a:	685b      	ldr	r3, [r3, #4]
 800a40c:	685a      	ldr	r2, [r3, #4]
 800a40e:	68bb      	ldr	r3, [r7, #8]
 800a410:	605a      	str	r2, [r3, #4]
 800a412:	68bb      	ldr	r3, [r7, #8]
 800a414:	685a      	ldr	r2, [r3, #4]
 800a416:	68bb      	ldr	r3, [r7, #8]
 800a418:	3308      	adds	r3, #8
 800a41a:	429a      	cmp	r2, r3
 800a41c:	d104      	bne.n	800a428 <vTaskSwitchContext+0x8c>
 800a41e:	68bb      	ldr	r3, [r7, #8]
 800a420:	685b      	ldr	r3, [r3, #4]
 800a422:	685a      	ldr	r2, [r3, #4]
 800a424:	68bb      	ldr	r3, [r7, #8]
 800a426:	605a      	str	r2, [r3, #4]
 800a428:	68bb      	ldr	r3, [r7, #8]
 800a42a:	685b      	ldr	r3, [r3, #4]
 800a42c:	68db      	ldr	r3, [r3, #12]
 800a42e:	4a0c      	ldr	r2, [pc, #48]	@ (800a460 <vTaskSwitchContext+0xc4>)
 800a430:	6013      	str	r3, [r2, #0]
 800a432:	4a09      	ldr	r2, [pc, #36]	@ (800a458 <vTaskSwitchContext+0xbc>)
 800a434:	68fb      	ldr	r3, [r7, #12]
 800a436:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800a438:	4b09      	ldr	r3, [pc, #36]	@ (800a460 <vTaskSwitchContext+0xc4>)
 800a43a:	681b      	ldr	r3, [r3, #0]
 800a43c:	3354      	adds	r3, #84	@ 0x54
 800a43e:	4a09      	ldr	r2, [pc, #36]	@ (800a464 <vTaskSwitchContext+0xc8>)
 800a440:	6013      	str	r3, [r2, #0]
}
 800a442:	bf00      	nop
 800a444:	3714      	adds	r7, #20
 800a446:	46bd      	mov	sp, r7
 800a448:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a44c:	4770      	bx	lr
 800a44e:	bf00      	nop
 800a450:	2400125c 	.word	0x2400125c
 800a454:	24001248 	.word	0x24001248
 800a458:	2400123c 	.word	0x2400123c
 800a45c:	24000d64 	.word	0x24000d64
 800a460:	24000d60 	.word	0x24000d60
 800a464:	24000014 	.word	0x24000014

0800a468 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800a468:	b580      	push	{r7, lr}
 800a46a:	b084      	sub	sp, #16
 800a46c:	af00      	add	r7, sp, #0
 800a46e:	6078      	str	r0, [r7, #4]
 800a470:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800a472:	687b      	ldr	r3, [r7, #4]
 800a474:	2b00      	cmp	r3, #0
 800a476:	d10b      	bne.n	800a490 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 800a478:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a47c:	f383 8811 	msr	BASEPRI, r3
 800a480:	f3bf 8f6f 	isb	sy
 800a484:	f3bf 8f4f 	dsb	sy
 800a488:	60fb      	str	r3, [r7, #12]
}
 800a48a:	bf00      	nop
 800a48c:	bf00      	nop
 800a48e:	e7fd      	b.n	800a48c <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800a490:	4b07      	ldr	r3, [pc, #28]	@ (800a4b0 <vTaskPlaceOnEventList+0x48>)
 800a492:	681b      	ldr	r3, [r3, #0]
 800a494:	3318      	adds	r3, #24
 800a496:	4619      	mov	r1, r3
 800a498:	6878      	ldr	r0, [r7, #4]
 800a49a:	f7fe fe48 	bl	800912e <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800a49e:	2101      	movs	r1, #1
 800a4a0:	6838      	ldr	r0, [r7, #0]
 800a4a2:	f000 fa87 	bl	800a9b4 <prvAddCurrentTaskToDelayedList>
}
 800a4a6:	bf00      	nop
 800a4a8:	3710      	adds	r7, #16
 800a4aa:	46bd      	mov	sp, r7
 800a4ac:	bd80      	pop	{r7, pc}
 800a4ae:	bf00      	nop
 800a4b0:	24000d60 	.word	0x24000d60

0800a4b4 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800a4b4:	b580      	push	{r7, lr}
 800a4b6:	b086      	sub	sp, #24
 800a4b8:	af00      	add	r7, sp, #0
 800a4ba:	60f8      	str	r0, [r7, #12]
 800a4bc:	60b9      	str	r1, [r7, #8]
 800a4be:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800a4c0:	68fb      	ldr	r3, [r7, #12]
 800a4c2:	2b00      	cmp	r3, #0
 800a4c4:	d10b      	bne.n	800a4de <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 800a4c6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a4ca:	f383 8811 	msr	BASEPRI, r3
 800a4ce:	f3bf 8f6f 	isb	sy
 800a4d2:	f3bf 8f4f 	dsb	sy
 800a4d6:	617b      	str	r3, [r7, #20]
}
 800a4d8:	bf00      	nop
 800a4da:	bf00      	nop
 800a4dc:	e7fd      	b.n	800a4da <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800a4de:	4b0a      	ldr	r3, [pc, #40]	@ (800a508 <vTaskPlaceOnEventListRestricted+0x54>)
 800a4e0:	681b      	ldr	r3, [r3, #0]
 800a4e2:	3318      	adds	r3, #24
 800a4e4:	4619      	mov	r1, r3
 800a4e6:	68f8      	ldr	r0, [r7, #12]
 800a4e8:	f7fe fdfd 	bl	80090e6 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800a4ec:	687b      	ldr	r3, [r7, #4]
 800a4ee:	2b00      	cmp	r3, #0
 800a4f0:	d002      	beq.n	800a4f8 <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 800a4f2:	f04f 33ff 	mov.w	r3, #4294967295
 800a4f6:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800a4f8:	6879      	ldr	r1, [r7, #4]
 800a4fa:	68b8      	ldr	r0, [r7, #8]
 800a4fc:	f000 fa5a 	bl	800a9b4 <prvAddCurrentTaskToDelayedList>
	}
 800a500:	bf00      	nop
 800a502:	3718      	adds	r7, #24
 800a504:	46bd      	mov	sp, r7
 800a506:	bd80      	pop	{r7, pc}
 800a508:	24000d60 	.word	0x24000d60

0800a50c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800a50c:	b580      	push	{r7, lr}
 800a50e:	b086      	sub	sp, #24
 800a510:	af00      	add	r7, sp, #0
 800a512:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a514:	687b      	ldr	r3, [r7, #4]
 800a516:	68db      	ldr	r3, [r3, #12]
 800a518:	68db      	ldr	r3, [r3, #12]
 800a51a:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800a51c:	693b      	ldr	r3, [r7, #16]
 800a51e:	2b00      	cmp	r3, #0
 800a520:	d10b      	bne.n	800a53a <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 800a522:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a526:	f383 8811 	msr	BASEPRI, r3
 800a52a:	f3bf 8f6f 	isb	sy
 800a52e:	f3bf 8f4f 	dsb	sy
 800a532:	60fb      	str	r3, [r7, #12]
}
 800a534:	bf00      	nop
 800a536:	bf00      	nop
 800a538:	e7fd      	b.n	800a536 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800a53a:	693b      	ldr	r3, [r7, #16]
 800a53c:	3318      	adds	r3, #24
 800a53e:	4618      	mov	r0, r3
 800a540:	f7fe fe2e 	bl	80091a0 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a544:	4b1d      	ldr	r3, [pc, #116]	@ (800a5bc <xTaskRemoveFromEventList+0xb0>)
 800a546:	681b      	ldr	r3, [r3, #0]
 800a548:	2b00      	cmp	r3, #0
 800a54a:	d11d      	bne.n	800a588 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800a54c:	693b      	ldr	r3, [r7, #16]
 800a54e:	3304      	adds	r3, #4
 800a550:	4618      	mov	r0, r3
 800a552:	f7fe fe25 	bl	80091a0 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800a556:	693b      	ldr	r3, [r7, #16]
 800a558:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a55a:	4b19      	ldr	r3, [pc, #100]	@ (800a5c0 <xTaskRemoveFromEventList+0xb4>)
 800a55c:	681b      	ldr	r3, [r3, #0]
 800a55e:	429a      	cmp	r2, r3
 800a560:	d903      	bls.n	800a56a <xTaskRemoveFromEventList+0x5e>
 800a562:	693b      	ldr	r3, [r7, #16]
 800a564:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a566:	4a16      	ldr	r2, [pc, #88]	@ (800a5c0 <xTaskRemoveFromEventList+0xb4>)
 800a568:	6013      	str	r3, [r2, #0]
 800a56a:	693b      	ldr	r3, [r7, #16]
 800a56c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a56e:	4613      	mov	r3, r2
 800a570:	009b      	lsls	r3, r3, #2
 800a572:	4413      	add	r3, r2
 800a574:	009b      	lsls	r3, r3, #2
 800a576:	4a13      	ldr	r2, [pc, #76]	@ (800a5c4 <xTaskRemoveFromEventList+0xb8>)
 800a578:	441a      	add	r2, r3
 800a57a:	693b      	ldr	r3, [r7, #16]
 800a57c:	3304      	adds	r3, #4
 800a57e:	4619      	mov	r1, r3
 800a580:	4610      	mov	r0, r2
 800a582:	f7fe fdb0 	bl	80090e6 <vListInsertEnd>
 800a586:	e005      	b.n	800a594 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800a588:	693b      	ldr	r3, [r7, #16]
 800a58a:	3318      	adds	r3, #24
 800a58c:	4619      	mov	r1, r3
 800a58e:	480e      	ldr	r0, [pc, #56]	@ (800a5c8 <xTaskRemoveFromEventList+0xbc>)
 800a590:	f7fe fda9 	bl	80090e6 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800a594:	693b      	ldr	r3, [r7, #16]
 800a596:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a598:	4b0c      	ldr	r3, [pc, #48]	@ (800a5cc <xTaskRemoveFromEventList+0xc0>)
 800a59a:	681b      	ldr	r3, [r3, #0]
 800a59c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a59e:	429a      	cmp	r2, r3
 800a5a0:	d905      	bls.n	800a5ae <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800a5a2:	2301      	movs	r3, #1
 800a5a4:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800a5a6:	4b0a      	ldr	r3, [pc, #40]	@ (800a5d0 <xTaskRemoveFromEventList+0xc4>)
 800a5a8:	2201      	movs	r2, #1
 800a5aa:	601a      	str	r2, [r3, #0]
 800a5ac:	e001      	b.n	800a5b2 <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 800a5ae:	2300      	movs	r3, #0
 800a5b0:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800a5b2:	697b      	ldr	r3, [r7, #20]
}
 800a5b4:	4618      	mov	r0, r3
 800a5b6:	3718      	adds	r7, #24
 800a5b8:	46bd      	mov	sp, r7
 800a5ba:	bd80      	pop	{r7, pc}
 800a5bc:	2400125c 	.word	0x2400125c
 800a5c0:	2400123c 	.word	0x2400123c
 800a5c4:	24000d64 	.word	0x24000d64
 800a5c8:	240011f4 	.word	0x240011f4
 800a5cc:	24000d60 	.word	0x24000d60
 800a5d0:	24001248 	.word	0x24001248

0800a5d4 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800a5d4:	b480      	push	{r7}
 800a5d6:	b083      	sub	sp, #12
 800a5d8:	af00      	add	r7, sp, #0
 800a5da:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800a5dc:	4b06      	ldr	r3, [pc, #24]	@ (800a5f8 <vTaskInternalSetTimeOutState+0x24>)
 800a5de:	681a      	ldr	r2, [r3, #0]
 800a5e0:	687b      	ldr	r3, [r7, #4]
 800a5e2:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800a5e4:	4b05      	ldr	r3, [pc, #20]	@ (800a5fc <vTaskInternalSetTimeOutState+0x28>)
 800a5e6:	681a      	ldr	r2, [r3, #0]
 800a5e8:	687b      	ldr	r3, [r7, #4]
 800a5ea:	605a      	str	r2, [r3, #4]
}
 800a5ec:	bf00      	nop
 800a5ee:	370c      	adds	r7, #12
 800a5f0:	46bd      	mov	sp, r7
 800a5f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5f6:	4770      	bx	lr
 800a5f8:	2400124c 	.word	0x2400124c
 800a5fc:	24001238 	.word	0x24001238

0800a600 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800a600:	b580      	push	{r7, lr}
 800a602:	b088      	sub	sp, #32
 800a604:	af00      	add	r7, sp, #0
 800a606:	6078      	str	r0, [r7, #4]
 800a608:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800a60a:	687b      	ldr	r3, [r7, #4]
 800a60c:	2b00      	cmp	r3, #0
 800a60e:	d10b      	bne.n	800a628 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 800a610:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a614:	f383 8811 	msr	BASEPRI, r3
 800a618:	f3bf 8f6f 	isb	sy
 800a61c:	f3bf 8f4f 	dsb	sy
 800a620:	613b      	str	r3, [r7, #16]
}
 800a622:	bf00      	nop
 800a624:	bf00      	nop
 800a626:	e7fd      	b.n	800a624 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800a628:	683b      	ldr	r3, [r7, #0]
 800a62a:	2b00      	cmp	r3, #0
 800a62c:	d10b      	bne.n	800a646 <xTaskCheckForTimeOut+0x46>
	__asm volatile
 800a62e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a632:	f383 8811 	msr	BASEPRI, r3
 800a636:	f3bf 8f6f 	isb	sy
 800a63a:	f3bf 8f4f 	dsb	sy
 800a63e:	60fb      	str	r3, [r7, #12]
}
 800a640:	bf00      	nop
 800a642:	bf00      	nop
 800a644:	e7fd      	b.n	800a642 <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 800a646:	f000 fe97 	bl	800b378 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800a64a:	4b1d      	ldr	r3, [pc, #116]	@ (800a6c0 <xTaskCheckForTimeOut+0xc0>)
 800a64c:	681b      	ldr	r3, [r3, #0]
 800a64e:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800a650:	687b      	ldr	r3, [r7, #4]
 800a652:	685b      	ldr	r3, [r3, #4]
 800a654:	69ba      	ldr	r2, [r7, #24]
 800a656:	1ad3      	subs	r3, r2, r3
 800a658:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800a65a:	683b      	ldr	r3, [r7, #0]
 800a65c:	681b      	ldr	r3, [r3, #0]
 800a65e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a662:	d102      	bne.n	800a66a <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800a664:	2300      	movs	r3, #0
 800a666:	61fb      	str	r3, [r7, #28]
 800a668:	e023      	b.n	800a6b2 <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800a66a:	687b      	ldr	r3, [r7, #4]
 800a66c:	681a      	ldr	r2, [r3, #0]
 800a66e:	4b15      	ldr	r3, [pc, #84]	@ (800a6c4 <xTaskCheckForTimeOut+0xc4>)
 800a670:	681b      	ldr	r3, [r3, #0]
 800a672:	429a      	cmp	r2, r3
 800a674:	d007      	beq.n	800a686 <xTaskCheckForTimeOut+0x86>
 800a676:	687b      	ldr	r3, [r7, #4]
 800a678:	685b      	ldr	r3, [r3, #4]
 800a67a:	69ba      	ldr	r2, [r7, #24]
 800a67c:	429a      	cmp	r2, r3
 800a67e:	d302      	bcc.n	800a686 <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800a680:	2301      	movs	r3, #1
 800a682:	61fb      	str	r3, [r7, #28]
 800a684:	e015      	b.n	800a6b2 <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800a686:	683b      	ldr	r3, [r7, #0]
 800a688:	681b      	ldr	r3, [r3, #0]
 800a68a:	697a      	ldr	r2, [r7, #20]
 800a68c:	429a      	cmp	r2, r3
 800a68e:	d20b      	bcs.n	800a6a8 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800a690:	683b      	ldr	r3, [r7, #0]
 800a692:	681a      	ldr	r2, [r3, #0]
 800a694:	697b      	ldr	r3, [r7, #20]
 800a696:	1ad2      	subs	r2, r2, r3
 800a698:	683b      	ldr	r3, [r7, #0]
 800a69a:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800a69c:	6878      	ldr	r0, [r7, #4]
 800a69e:	f7ff ff99 	bl	800a5d4 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800a6a2:	2300      	movs	r3, #0
 800a6a4:	61fb      	str	r3, [r7, #28]
 800a6a6:	e004      	b.n	800a6b2 <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 800a6a8:	683b      	ldr	r3, [r7, #0]
 800a6aa:	2200      	movs	r2, #0
 800a6ac:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800a6ae:	2301      	movs	r3, #1
 800a6b0:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800a6b2:	f000 fe93 	bl	800b3dc <vPortExitCritical>

	return xReturn;
 800a6b6:	69fb      	ldr	r3, [r7, #28]
}
 800a6b8:	4618      	mov	r0, r3
 800a6ba:	3720      	adds	r7, #32
 800a6bc:	46bd      	mov	sp, r7
 800a6be:	bd80      	pop	{r7, pc}
 800a6c0:	24001238 	.word	0x24001238
 800a6c4:	2400124c 	.word	0x2400124c

0800a6c8 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800a6c8:	b480      	push	{r7}
 800a6ca:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800a6cc:	4b03      	ldr	r3, [pc, #12]	@ (800a6dc <vTaskMissedYield+0x14>)
 800a6ce:	2201      	movs	r2, #1
 800a6d0:	601a      	str	r2, [r3, #0]
}
 800a6d2:	bf00      	nop
 800a6d4:	46bd      	mov	sp, r7
 800a6d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6da:	4770      	bx	lr
 800a6dc:	24001248 	.word	0x24001248

0800a6e0 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800a6e0:	b580      	push	{r7, lr}
 800a6e2:	b082      	sub	sp, #8
 800a6e4:	af00      	add	r7, sp, #0
 800a6e6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800a6e8:	f000 f852 	bl	800a790 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800a6ec:	4b06      	ldr	r3, [pc, #24]	@ (800a708 <prvIdleTask+0x28>)
 800a6ee:	681b      	ldr	r3, [r3, #0]
 800a6f0:	2b01      	cmp	r3, #1
 800a6f2:	d9f9      	bls.n	800a6e8 <prvIdleTask+0x8>
			{
				taskYIELD();
 800a6f4:	4b05      	ldr	r3, [pc, #20]	@ (800a70c <prvIdleTask+0x2c>)
 800a6f6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a6fa:	601a      	str	r2, [r3, #0]
 800a6fc:	f3bf 8f4f 	dsb	sy
 800a700:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800a704:	e7f0      	b.n	800a6e8 <prvIdleTask+0x8>
 800a706:	bf00      	nop
 800a708:	24000d64 	.word	0x24000d64
 800a70c:	e000ed04 	.word	0xe000ed04

0800a710 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800a710:	b580      	push	{r7, lr}
 800a712:	b082      	sub	sp, #8
 800a714:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800a716:	2300      	movs	r3, #0
 800a718:	607b      	str	r3, [r7, #4]
 800a71a:	e00c      	b.n	800a736 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800a71c:	687a      	ldr	r2, [r7, #4]
 800a71e:	4613      	mov	r3, r2
 800a720:	009b      	lsls	r3, r3, #2
 800a722:	4413      	add	r3, r2
 800a724:	009b      	lsls	r3, r3, #2
 800a726:	4a12      	ldr	r2, [pc, #72]	@ (800a770 <prvInitialiseTaskLists+0x60>)
 800a728:	4413      	add	r3, r2
 800a72a:	4618      	mov	r0, r3
 800a72c:	f7fe fcae 	bl	800908c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800a730:	687b      	ldr	r3, [r7, #4]
 800a732:	3301      	adds	r3, #1
 800a734:	607b      	str	r3, [r7, #4]
 800a736:	687b      	ldr	r3, [r7, #4]
 800a738:	2b37      	cmp	r3, #55	@ 0x37
 800a73a:	d9ef      	bls.n	800a71c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800a73c:	480d      	ldr	r0, [pc, #52]	@ (800a774 <prvInitialiseTaskLists+0x64>)
 800a73e:	f7fe fca5 	bl	800908c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800a742:	480d      	ldr	r0, [pc, #52]	@ (800a778 <prvInitialiseTaskLists+0x68>)
 800a744:	f7fe fca2 	bl	800908c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800a748:	480c      	ldr	r0, [pc, #48]	@ (800a77c <prvInitialiseTaskLists+0x6c>)
 800a74a:	f7fe fc9f 	bl	800908c <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800a74e:	480c      	ldr	r0, [pc, #48]	@ (800a780 <prvInitialiseTaskLists+0x70>)
 800a750:	f7fe fc9c 	bl	800908c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800a754:	480b      	ldr	r0, [pc, #44]	@ (800a784 <prvInitialiseTaskLists+0x74>)
 800a756:	f7fe fc99 	bl	800908c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800a75a:	4b0b      	ldr	r3, [pc, #44]	@ (800a788 <prvInitialiseTaskLists+0x78>)
 800a75c:	4a05      	ldr	r2, [pc, #20]	@ (800a774 <prvInitialiseTaskLists+0x64>)
 800a75e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800a760:	4b0a      	ldr	r3, [pc, #40]	@ (800a78c <prvInitialiseTaskLists+0x7c>)
 800a762:	4a05      	ldr	r2, [pc, #20]	@ (800a778 <prvInitialiseTaskLists+0x68>)
 800a764:	601a      	str	r2, [r3, #0]
}
 800a766:	bf00      	nop
 800a768:	3708      	adds	r7, #8
 800a76a:	46bd      	mov	sp, r7
 800a76c:	bd80      	pop	{r7, pc}
 800a76e:	bf00      	nop
 800a770:	24000d64 	.word	0x24000d64
 800a774:	240011c4 	.word	0x240011c4
 800a778:	240011d8 	.word	0x240011d8
 800a77c:	240011f4 	.word	0x240011f4
 800a780:	24001208 	.word	0x24001208
 800a784:	24001220 	.word	0x24001220
 800a788:	240011ec 	.word	0x240011ec
 800a78c:	240011f0 	.word	0x240011f0

0800a790 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800a790:	b580      	push	{r7, lr}
 800a792:	b082      	sub	sp, #8
 800a794:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800a796:	e019      	b.n	800a7cc <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800a798:	f000 fdee 	bl	800b378 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a79c:	4b10      	ldr	r3, [pc, #64]	@ (800a7e0 <prvCheckTasksWaitingTermination+0x50>)
 800a79e:	68db      	ldr	r3, [r3, #12]
 800a7a0:	68db      	ldr	r3, [r3, #12]
 800a7a2:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800a7a4:	687b      	ldr	r3, [r7, #4]
 800a7a6:	3304      	adds	r3, #4
 800a7a8:	4618      	mov	r0, r3
 800a7aa:	f7fe fcf9 	bl	80091a0 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800a7ae:	4b0d      	ldr	r3, [pc, #52]	@ (800a7e4 <prvCheckTasksWaitingTermination+0x54>)
 800a7b0:	681b      	ldr	r3, [r3, #0]
 800a7b2:	3b01      	subs	r3, #1
 800a7b4:	4a0b      	ldr	r2, [pc, #44]	@ (800a7e4 <prvCheckTasksWaitingTermination+0x54>)
 800a7b6:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800a7b8:	4b0b      	ldr	r3, [pc, #44]	@ (800a7e8 <prvCheckTasksWaitingTermination+0x58>)
 800a7ba:	681b      	ldr	r3, [r3, #0]
 800a7bc:	3b01      	subs	r3, #1
 800a7be:	4a0a      	ldr	r2, [pc, #40]	@ (800a7e8 <prvCheckTasksWaitingTermination+0x58>)
 800a7c0:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800a7c2:	f000 fe0b 	bl	800b3dc <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800a7c6:	6878      	ldr	r0, [r7, #4]
 800a7c8:	f000 f810 	bl	800a7ec <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800a7cc:	4b06      	ldr	r3, [pc, #24]	@ (800a7e8 <prvCheckTasksWaitingTermination+0x58>)
 800a7ce:	681b      	ldr	r3, [r3, #0]
 800a7d0:	2b00      	cmp	r3, #0
 800a7d2:	d1e1      	bne.n	800a798 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800a7d4:	bf00      	nop
 800a7d6:	bf00      	nop
 800a7d8:	3708      	adds	r7, #8
 800a7da:	46bd      	mov	sp, r7
 800a7dc:	bd80      	pop	{r7, pc}
 800a7de:	bf00      	nop
 800a7e0:	24001208 	.word	0x24001208
 800a7e4:	24001234 	.word	0x24001234
 800a7e8:	2400121c 	.word	0x2400121c

0800a7ec <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800a7ec:	b580      	push	{r7, lr}
 800a7ee:	b084      	sub	sp, #16
 800a7f0:	af00      	add	r7, sp, #0
 800a7f2:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800a7f4:	687b      	ldr	r3, [r7, #4]
 800a7f6:	3354      	adds	r3, #84	@ 0x54
 800a7f8:	4618      	mov	r0, r3
 800a7fa:	f001 f8d5 	bl	800b9a8 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800a7fe:	687b      	ldr	r3, [r7, #4]
 800a800:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 800a804:	2b00      	cmp	r3, #0
 800a806:	d108      	bne.n	800a81a <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800a808:	687b      	ldr	r3, [r7, #4]
 800a80a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a80c:	4618      	mov	r0, r3
 800a80e:	f000 ffa3 	bl	800b758 <vPortFree>
				vPortFree( pxTCB );
 800a812:	6878      	ldr	r0, [r7, #4]
 800a814:	f000 ffa0 	bl	800b758 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800a818:	e019      	b.n	800a84e <prvDeleteTCB+0x62>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800a81a:	687b      	ldr	r3, [r7, #4]
 800a81c:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 800a820:	2b01      	cmp	r3, #1
 800a822:	d103      	bne.n	800a82c <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 800a824:	6878      	ldr	r0, [r7, #4]
 800a826:	f000 ff97 	bl	800b758 <vPortFree>
	}
 800a82a:	e010      	b.n	800a84e <prvDeleteTCB+0x62>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800a82c:	687b      	ldr	r3, [r7, #4]
 800a82e:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 800a832:	2b02      	cmp	r3, #2
 800a834:	d00b      	beq.n	800a84e <prvDeleteTCB+0x62>
	__asm volatile
 800a836:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a83a:	f383 8811 	msr	BASEPRI, r3
 800a83e:	f3bf 8f6f 	isb	sy
 800a842:	f3bf 8f4f 	dsb	sy
 800a846:	60fb      	str	r3, [r7, #12]
}
 800a848:	bf00      	nop
 800a84a:	bf00      	nop
 800a84c:	e7fd      	b.n	800a84a <prvDeleteTCB+0x5e>
	}
 800a84e:	bf00      	nop
 800a850:	3710      	adds	r7, #16
 800a852:	46bd      	mov	sp, r7
 800a854:	bd80      	pop	{r7, pc}
	...

0800a858 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800a858:	b480      	push	{r7}
 800a85a:	b083      	sub	sp, #12
 800a85c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800a85e:	4b0c      	ldr	r3, [pc, #48]	@ (800a890 <prvResetNextTaskUnblockTime+0x38>)
 800a860:	681b      	ldr	r3, [r3, #0]
 800a862:	681b      	ldr	r3, [r3, #0]
 800a864:	2b00      	cmp	r3, #0
 800a866:	d104      	bne.n	800a872 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800a868:	4b0a      	ldr	r3, [pc, #40]	@ (800a894 <prvResetNextTaskUnblockTime+0x3c>)
 800a86a:	f04f 32ff 	mov.w	r2, #4294967295
 800a86e:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800a870:	e008      	b.n	800a884 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a872:	4b07      	ldr	r3, [pc, #28]	@ (800a890 <prvResetNextTaskUnblockTime+0x38>)
 800a874:	681b      	ldr	r3, [r3, #0]
 800a876:	68db      	ldr	r3, [r3, #12]
 800a878:	68db      	ldr	r3, [r3, #12]
 800a87a:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800a87c:	687b      	ldr	r3, [r7, #4]
 800a87e:	685b      	ldr	r3, [r3, #4]
 800a880:	4a04      	ldr	r2, [pc, #16]	@ (800a894 <prvResetNextTaskUnblockTime+0x3c>)
 800a882:	6013      	str	r3, [r2, #0]
}
 800a884:	bf00      	nop
 800a886:	370c      	adds	r7, #12
 800a888:	46bd      	mov	sp, r7
 800a88a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a88e:	4770      	bx	lr
 800a890:	240011ec 	.word	0x240011ec
 800a894:	24001254 	.word	0x24001254

0800a898 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800a898:	b480      	push	{r7}
 800a89a:	b083      	sub	sp, #12
 800a89c:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800a89e:	4b0b      	ldr	r3, [pc, #44]	@ (800a8cc <xTaskGetSchedulerState+0x34>)
 800a8a0:	681b      	ldr	r3, [r3, #0]
 800a8a2:	2b00      	cmp	r3, #0
 800a8a4:	d102      	bne.n	800a8ac <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800a8a6:	2301      	movs	r3, #1
 800a8a8:	607b      	str	r3, [r7, #4]
 800a8aa:	e008      	b.n	800a8be <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a8ac:	4b08      	ldr	r3, [pc, #32]	@ (800a8d0 <xTaskGetSchedulerState+0x38>)
 800a8ae:	681b      	ldr	r3, [r3, #0]
 800a8b0:	2b00      	cmp	r3, #0
 800a8b2:	d102      	bne.n	800a8ba <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800a8b4:	2302      	movs	r3, #2
 800a8b6:	607b      	str	r3, [r7, #4]
 800a8b8:	e001      	b.n	800a8be <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800a8ba:	2300      	movs	r3, #0
 800a8bc:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800a8be:	687b      	ldr	r3, [r7, #4]
	}
 800a8c0:	4618      	mov	r0, r3
 800a8c2:	370c      	adds	r7, #12
 800a8c4:	46bd      	mov	sp, r7
 800a8c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8ca:	4770      	bx	lr
 800a8cc:	24001240 	.word	0x24001240
 800a8d0:	2400125c 	.word	0x2400125c

0800a8d4 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800a8d4:	b580      	push	{r7, lr}
 800a8d6:	b086      	sub	sp, #24
 800a8d8:	af00      	add	r7, sp, #0
 800a8da:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800a8dc:	687b      	ldr	r3, [r7, #4]
 800a8de:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800a8e0:	2300      	movs	r3, #0
 800a8e2:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800a8e4:	687b      	ldr	r3, [r7, #4]
 800a8e6:	2b00      	cmp	r3, #0
 800a8e8:	d058      	beq.n	800a99c <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800a8ea:	4b2f      	ldr	r3, [pc, #188]	@ (800a9a8 <xTaskPriorityDisinherit+0xd4>)
 800a8ec:	681b      	ldr	r3, [r3, #0]
 800a8ee:	693a      	ldr	r2, [r7, #16]
 800a8f0:	429a      	cmp	r2, r3
 800a8f2:	d00b      	beq.n	800a90c <xTaskPriorityDisinherit+0x38>
	__asm volatile
 800a8f4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a8f8:	f383 8811 	msr	BASEPRI, r3
 800a8fc:	f3bf 8f6f 	isb	sy
 800a900:	f3bf 8f4f 	dsb	sy
 800a904:	60fb      	str	r3, [r7, #12]
}
 800a906:	bf00      	nop
 800a908:	bf00      	nop
 800a90a:	e7fd      	b.n	800a908 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800a90c:	693b      	ldr	r3, [r7, #16]
 800a90e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a910:	2b00      	cmp	r3, #0
 800a912:	d10b      	bne.n	800a92c <xTaskPriorityDisinherit+0x58>
	__asm volatile
 800a914:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a918:	f383 8811 	msr	BASEPRI, r3
 800a91c:	f3bf 8f6f 	isb	sy
 800a920:	f3bf 8f4f 	dsb	sy
 800a924:	60bb      	str	r3, [r7, #8]
}
 800a926:	bf00      	nop
 800a928:	bf00      	nop
 800a92a:	e7fd      	b.n	800a928 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 800a92c:	693b      	ldr	r3, [r7, #16]
 800a92e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a930:	1e5a      	subs	r2, r3, #1
 800a932:	693b      	ldr	r3, [r7, #16]
 800a934:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800a936:	693b      	ldr	r3, [r7, #16]
 800a938:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a93a:	693b      	ldr	r3, [r7, #16]
 800a93c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800a93e:	429a      	cmp	r2, r3
 800a940:	d02c      	beq.n	800a99c <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800a942:	693b      	ldr	r3, [r7, #16]
 800a944:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a946:	2b00      	cmp	r3, #0
 800a948:	d128      	bne.n	800a99c <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800a94a:	693b      	ldr	r3, [r7, #16]
 800a94c:	3304      	adds	r3, #4
 800a94e:	4618      	mov	r0, r3
 800a950:	f7fe fc26 	bl	80091a0 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800a954:	693b      	ldr	r3, [r7, #16]
 800a956:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800a958:	693b      	ldr	r3, [r7, #16]
 800a95a:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a95c:	693b      	ldr	r3, [r7, #16]
 800a95e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a960:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800a964:	693b      	ldr	r3, [r7, #16]
 800a966:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800a968:	693b      	ldr	r3, [r7, #16]
 800a96a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a96c:	4b0f      	ldr	r3, [pc, #60]	@ (800a9ac <xTaskPriorityDisinherit+0xd8>)
 800a96e:	681b      	ldr	r3, [r3, #0]
 800a970:	429a      	cmp	r2, r3
 800a972:	d903      	bls.n	800a97c <xTaskPriorityDisinherit+0xa8>
 800a974:	693b      	ldr	r3, [r7, #16]
 800a976:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a978:	4a0c      	ldr	r2, [pc, #48]	@ (800a9ac <xTaskPriorityDisinherit+0xd8>)
 800a97a:	6013      	str	r3, [r2, #0]
 800a97c:	693b      	ldr	r3, [r7, #16]
 800a97e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a980:	4613      	mov	r3, r2
 800a982:	009b      	lsls	r3, r3, #2
 800a984:	4413      	add	r3, r2
 800a986:	009b      	lsls	r3, r3, #2
 800a988:	4a09      	ldr	r2, [pc, #36]	@ (800a9b0 <xTaskPriorityDisinherit+0xdc>)
 800a98a:	441a      	add	r2, r3
 800a98c:	693b      	ldr	r3, [r7, #16]
 800a98e:	3304      	adds	r3, #4
 800a990:	4619      	mov	r1, r3
 800a992:	4610      	mov	r0, r2
 800a994:	f7fe fba7 	bl	80090e6 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800a998:	2301      	movs	r3, #1
 800a99a:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800a99c:	697b      	ldr	r3, [r7, #20]
	}
 800a99e:	4618      	mov	r0, r3
 800a9a0:	3718      	adds	r7, #24
 800a9a2:	46bd      	mov	sp, r7
 800a9a4:	bd80      	pop	{r7, pc}
 800a9a6:	bf00      	nop
 800a9a8:	24000d60 	.word	0x24000d60
 800a9ac:	2400123c 	.word	0x2400123c
 800a9b0:	24000d64 	.word	0x24000d64

0800a9b4 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800a9b4:	b580      	push	{r7, lr}
 800a9b6:	b084      	sub	sp, #16
 800a9b8:	af00      	add	r7, sp, #0
 800a9ba:	6078      	str	r0, [r7, #4]
 800a9bc:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800a9be:	4b21      	ldr	r3, [pc, #132]	@ (800aa44 <prvAddCurrentTaskToDelayedList+0x90>)
 800a9c0:	681b      	ldr	r3, [r3, #0]
 800a9c2:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800a9c4:	4b20      	ldr	r3, [pc, #128]	@ (800aa48 <prvAddCurrentTaskToDelayedList+0x94>)
 800a9c6:	681b      	ldr	r3, [r3, #0]
 800a9c8:	3304      	adds	r3, #4
 800a9ca:	4618      	mov	r0, r3
 800a9cc:	f7fe fbe8 	bl	80091a0 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800a9d0:	687b      	ldr	r3, [r7, #4]
 800a9d2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a9d6:	d10a      	bne.n	800a9ee <prvAddCurrentTaskToDelayedList+0x3a>
 800a9d8:	683b      	ldr	r3, [r7, #0]
 800a9da:	2b00      	cmp	r3, #0
 800a9dc:	d007      	beq.n	800a9ee <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800a9de:	4b1a      	ldr	r3, [pc, #104]	@ (800aa48 <prvAddCurrentTaskToDelayedList+0x94>)
 800a9e0:	681b      	ldr	r3, [r3, #0]
 800a9e2:	3304      	adds	r3, #4
 800a9e4:	4619      	mov	r1, r3
 800a9e6:	4819      	ldr	r0, [pc, #100]	@ (800aa4c <prvAddCurrentTaskToDelayedList+0x98>)
 800a9e8:	f7fe fb7d 	bl	80090e6 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800a9ec:	e026      	b.n	800aa3c <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800a9ee:	68fa      	ldr	r2, [r7, #12]
 800a9f0:	687b      	ldr	r3, [r7, #4]
 800a9f2:	4413      	add	r3, r2
 800a9f4:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800a9f6:	4b14      	ldr	r3, [pc, #80]	@ (800aa48 <prvAddCurrentTaskToDelayedList+0x94>)
 800a9f8:	681b      	ldr	r3, [r3, #0]
 800a9fa:	68ba      	ldr	r2, [r7, #8]
 800a9fc:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800a9fe:	68ba      	ldr	r2, [r7, #8]
 800aa00:	68fb      	ldr	r3, [r7, #12]
 800aa02:	429a      	cmp	r2, r3
 800aa04:	d209      	bcs.n	800aa1a <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800aa06:	4b12      	ldr	r3, [pc, #72]	@ (800aa50 <prvAddCurrentTaskToDelayedList+0x9c>)
 800aa08:	681a      	ldr	r2, [r3, #0]
 800aa0a:	4b0f      	ldr	r3, [pc, #60]	@ (800aa48 <prvAddCurrentTaskToDelayedList+0x94>)
 800aa0c:	681b      	ldr	r3, [r3, #0]
 800aa0e:	3304      	adds	r3, #4
 800aa10:	4619      	mov	r1, r3
 800aa12:	4610      	mov	r0, r2
 800aa14:	f7fe fb8b 	bl	800912e <vListInsert>
}
 800aa18:	e010      	b.n	800aa3c <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800aa1a:	4b0e      	ldr	r3, [pc, #56]	@ (800aa54 <prvAddCurrentTaskToDelayedList+0xa0>)
 800aa1c:	681a      	ldr	r2, [r3, #0]
 800aa1e:	4b0a      	ldr	r3, [pc, #40]	@ (800aa48 <prvAddCurrentTaskToDelayedList+0x94>)
 800aa20:	681b      	ldr	r3, [r3, #0]
 800aa22:	3304      	adds	r3, #4
 800aa24:	4619      	mov	r1, r3
 800aa26:	4610      	mov	r0, r2
 800aa28:	f7fe fb81 	bl	800912e <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800aa2c:	4b0a      	ldr	r3, [pc, #40]	@ (800aa58 <prvAddCurrentTaskToDelayedList+0xa4>)
 800aa2e:	681b      	ldr	r3, [r3, #0]
 800aa30:	68ba      	ldr	r2, [r7, #8]
 800aa32:	429a      	cmp	r2, r3
 800aa34:	d202      	bcs.n	800aa3c <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800aa36:	4a08      	ldr	r2, [pc, #32]	@ (800aa58 <prvAddCurrentTaskToDelayedList+0xa4>)
 800aa38:	68bb      	ldr	r3, [r7, #8]
 800aa3a:	6013      	str	r3, [r2, #0]
}
 800aa3c:	bf00      	nop
 800aa3e:	3710      	adds	r7, #16
 800aa40:	46bd      	mov	sp, r7
 800aa42:	bd80      	pop	{r7, pc}
 800aa44:	24001238 	.word	0x24001238
 800aa48:	24000d60 	.word	0x24000d60
 800aa4c:	24001220 	.word	0x24001220
 800aa50:	240011f0 	.word	0x240011f0
 800aa54:	240011ec 	.word	0x240011ec
 800aa58:	24001254 	.word	0x24001254

0800aa5c <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800aa5c:	b580      	push	{r7, lr}
 800aa5e:	b08a      	sub	sp, #40	@ 0x28
 800aa60:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800aa62:	2300      	movs	r3, #0
 800aa64:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800aa66:	f000 fb13 	bl	800b090 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800aa6a:	4b1d      	ldr	r3, [pc, #116]	@ (800aae0 <xTimerCreateTimerTask+0x84>)
 800aa6c:	681b      	ldr	r3, [r3, #0]
 800aa6e:	2b00      	cmp	r3, #0
 800aa70:	d021      	beq.n	800aab6 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800aa72:	2300      	movs	r3, #0
 800aa74:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800aa76:	2300      	movs	r3, #0
 800aa78:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800aa7a:	1d3a      	adds	r2, r7, #4
 800aa7c:	f107 0108 	add.w	r1, r7, #8
 800aa80:	f107 030c 	add.w	r3, r7, #12
 800aa84:	4618      	mov	r0, r3
 800aa86:	f7fe fae7 	bl	8009058 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800aa8a:	6879      	ldr	r1, [r7, #4]
 800aa8c:	68bb      	ldr	r3, [r7, #8]
 800aa8e:	68fa      	ldr	r2, [r7, #12]
 800aa90:	9202      	str	r2, [sp, #8]
 800aa92:	9301      	str	r3, [sp, #4]
 800aa94:	2302      	movs	r3, #2
 800aa96:	9300      	str	r3, [sp, #0]
 800aa98:	2300      	movs	r3, #0
 800aa9a:	460a      	mov	r2, r1
 800aa9c:	4911      	ldr	r1, [pc, #68]	@ (800aae4 <xTimerCreateTimerTask+0x88>)
 800aa9e:	4812      	ldr	r0, [pc, #72]	@ (800aae8 <xTimerCreateTimerTask+0x8c>)
 800aaa0:	f7ff f8a2 	bl	8009be8 <xTaskCreateStatic>
 800aaa4:	4603      	mov	r3, r0
 800aaa6:	4a11      	ldr	r2, [pc, #68]	@ (800aaec <xTimerCreateTimerTask+0x90>)
 800aaa8:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800aaaa:	4b10      	ldr	r3, [pc, #64]	@ (800aaec <xTimerCreateTimerTask+0x90>)
 800aaac:	681b      	ldr	r3, [r3, #0]
 800aaae:	2b00      	cmp	r3, #0
 800aab0:	d001      	beq.n	800aab6 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800aab2:	2301      	movs	r3, #1
 800aab4:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800aab6:	697b      	ldr	r3, [r7, #20]
 800aab8:	2b00      	cmp	r3, #0
 800aaba:	d10b      	bne.n	800aad4 <xTimerCreateTimerTask+0x78>
	__asm volatile
 800aabc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800aac0:	f383 8811 	msr	BASEPRI, r3
 800aac4:	f3bf 8f6f 	isb	sy
 800aac8:	f3bf 8f4f 	dsb	sy
 800aacc:	613b      	str	r3, [r7, #16]
}
 800aace:	bf00      	nop
 800aad0:	bf00      	nop
 800aad2:	e7fd      	b.n	800aad0 <xTimerCreateTimerTask+0x74>
	return xReturn;
 800aad4:	697b      	ldr	r3, [r7, #20]
}
 800aad6:	4618      	mov	r0, r3
 800aad8:	3718      	adds	r7, #24
 800aada:	46bd      	mov	sp, r7
 800aadc:	bd80      	pop	{r7, pc}
 800aade:	bf00      	nop
 800aae0:	24001290 	.word	0x24001290
 800aae4:	0800bb94 	.word	0x0800bb94
 800aae8:	0800ac29 	.word	0x0800ac29
 800aaec:	24001294 	.word	0x24001294

0800aaf0 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800aaf0:	b580      	push	{r7, lr}
 800aaf2:	b08a      	sub	sp, #40	@ 0x28
 800aaf4:	af00      	add	r7, sp, #0
 800aaf6:	60f8      	str	r0, [r7, #12]
 800aaf8:	60b9      	str	r1, [r7, #8]
 800aafa:	607a      	str	r2, [r7, #4]
 800aafc:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800aafe:	2300      	movs	r3, #0
 800ab00:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800ab02:	68fb      	ldr	r3, [r7, #12]
 800ab04:	2b00      	cmp	r3, #0
 800ab06:	d10b      	bne.n	800ab20 <xTimerGenericCommand+0x30>
	__asm volatile
 800ab08:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ab0c:	f383 8811 	msr	BASEPRI, r3
 800ab10:	f3bf 8f6f 	isb	sy
 800ab14:	f3bf 8f4f 	dsb	sy
 800ab18:	623b      	str	r3, [r7, #32]
}
 800ab1a:	bf00      	nop
 800ab1c:	bf00      	nop
 800ab1e:	e7fd      	b.n	800ab1c <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800ab20:	4b19      	ldr	r3, [pc, #100]	@ (800ab88 <xTimerGenericCommand+0x98>)
 800ab22:	681b      	ldr	r3, [r3, #0]
 800ab24:	2b00      	cmp	r3, #0
 800ab26:	d02a      	beq.n	800ab7e <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800ab28:	68bb      	ldr	r3, [r7, #8]
 800ab2a:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800ab2c:	687b      	ldr	r3, [r7, #4]
 800ab2e:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800ab30:	68fb      	ldr	r3, [r7, #12]
 800ab32:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800ab34:	68bb      	ldr	r3, [r7, #8]
 800ab36:	2b05      	cmp	r3, #5
 800ab38:	dc18      	bgt.n	800ab6c <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800ab3a:	f7ff fead 	bl	800a898 <xTaskGetSchedulerState>
 800ab3e:	4603      	mov	r3, r0
 800ab40:	2b02      	cmp	r3, #2
 800ab42:	d109      	bne.n	800ab58 <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800ab44:	4b10      	ldr	r3, [pc, #64]	@ (800ab88 <xTimerGenericCommand+0x98>)
 800ab46:	6818      	ldr	r0, [r3, #0]
 800ab48:	f107 0110 	add.w	r1, r7, #16
 800ab4c:	2300      	movs	r3, #0
 800ab4e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800ab50:	f7fe fc5a 	bl	8009408 <xQueueGenericSend>
 800ab54:	6278      	str	r0, [r7, #36]	@ 0x24
 800ab56:	e012      	b.n	800ab7e <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800ab58:	4b0b      	ldr	r3, [pc, #44]	@ (800ab88 <xTimerGenericCommand+0x98>)
 800ab5a:	6818      	ldr	r0, [r3, #0]
 800ab5c:	f107 0110 	add.w	r1, r7, #16
 800ab60:	2300      	movs	r3, #0
 800ab62:	2200      	movs	r2, #0
 800ab64:	f7fe fc50 	bl	8009408 <xQueueGenericSend>
 800ab68:	6278      	str	r0, [r7, #36]	@ 0x24
 800ab6a:	e008      	b.n	800ab7e <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800ab6c:	4b06      	ldr	r3, [pc, #24]	@ (800ab88 <xTimerGenericCommand+0x98>)
 800ab6e:	6818      	ldr	r0, [r3, #0]
 800ab70:	f107 0110 	add.w	r1, r7, #16
 800ab74:	2300      	movs	r3, #0
 800ab76:	683a      	ldr	r2, [r7, #0]
 800ab78:	f7fe fd48 	bl	800960c <xQueueGenericSendFromISR>
 800ab7c:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800ab7e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800ab80:	4618      	mov	r0, r3
 800ab82:	3728      	adds	r7, #40	@ 0x28
 800ab84:	46bd      	mov	sp, r7
 800ab86:	bd80      	pop	{r7, pc}
 800ab88:	24001290 	.word	0x24001290

0800ab8c <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800ab8c:	b580      	push	{r7, lr}
 800ab8e:	b088      	sub	sp, #32
 800ab90:	af02      	add	r7, sp, #8
 800ab92:	6078      	str	r0, [r7, #4]
 800ab94:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ab96:	4b23      	ldr	r3, [pc, #140]	@ (800ac24 <prvProcessExpiredTimer+0x98>)
 800ab98:	681b      	ldr	r3, [r3, #0]
 800ab9a:	68db      	ldr	r3, [r3, #12]
 800ab9c:	68db      	ldr	r3, [r3, #12]
 800ab9e:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800aba0:	697b      	ldr	r3, [r7, #20]
 800aba2:	3304      	adds	r3, #4
 800aba4:	4618      	mov	r0, r3
 800aba6:	f7fe fafb 	bl	80091a0 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800abaa:	697b      	ldr	r3, [r7, #20]
 800abac:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800abb0:	f003 0304 	and.w	r3, r3, #4
 800abb4:	2b00      	cmp	r3, #0
 800abb6:	d023      	beq.n	800ac00 <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800abb8:	697b      	ldr	r3, [r7, #20]
 800abba:	699a      	ldr	r2, [r3, #24]
 800abbc:	687b      	ldr	r3, [r7, #4]
 800abbe:	18d1      	adds	r1, r2, r3
 800abc0:	687b      	ldr	r3, [r7, #4]
 800abc2:	683a      	ldr	r2, [r7, #0]
 800abc4:	6978      	ldr	r0, [r7, #20]
 800abc6:	f000 f8d5 	bl	800ad74 <prvInsertTimerInActiveList>
 800abca:	4603      	mov	r3, r0
 800abcc:	2b00      	cmp	r3, #0
 800abce:	d020      	beq.n	800ac12 <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800abd0:	2300      	movs	r3, #0
 800abd2:	9300      	str	r3, [sp, #0]
 800abd4:	2300      	movs	r3, #0
 800abd6:	687a      	ldr	r2, [r7, #4]
 800abd8:	2100      	movs	r1, #0
 800abda:	6978      	ldr	r0, [r7, #20]
 800abdc:	f7ff ff88 	bl	800aaf0 <xTimerGenericCommand>
 800abe0:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800abe2:	693b      	ldr	r3, [r7, #16]
 800abe4:	2b00      	cmp	r3, #0
 800abe6:	d114      	bne.n	800ac12 <prvProcessExpiredTimer+0x86>
	__asm volatile
 800abe8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800abec:	f383 8811 	msr	BASEPRI, r3
 800abf0:	f3bf 8f6f 	isb	sy
 800abf4:	f3bf 8f4f 	dsb	sy
 800abf8:	60fb      	str	r3, [r7, #12]
}
 800abfa:	bf00      	nop
 800abfc:	bf00      	nop
 800abfe:	e7fd      	b.n	800abfc <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800ac00:	697b      	ldr	r3, [r7, #20]
 800ac02:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800ac06:	f023 0301 	bic.w	r3, r3, #1
 800ac0a:	b2da      	uxtb	r2, r3
 800ac0c:	697b      	ldr	r3, [r7, #20]
 800ac0e:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800ac12:	697b      	ldr	r3, [r7, #20]
 800ac14:	6a1b      	ldr	r3, [r3, #32]
 800ac16:	6978      	ldr	r0, [r7, #20]
 800ac18:	4798      	blx	r3
}
 800ac1a:	bf00      	nop
 800ac1c:	3718      	adds	r7, #24
 800ac1e:	46bd      	mov	sp, r7
 800ac20:	bd80      	pop	{r7, pc}
 800ac22:	bf00      	nop
 800ac24:	24001288 	.word	0x24001288

0800ac28 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800ac28:	b580      	push	{r7, lr}
 800ac2a:	b084      	sub	sp, #16
 800ac2c:	af00      	add	r7, sp, #0
 800ac2e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800ac30:	f107 0308 	add.w	r3, r7, #8
 800ac34:	4618      	mov	r0, r3
 800ac36:	f000 f859 	bl	800acec <prvGetNextExpireTime>
 800ac3a:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800ac3c:	68bb      	ldr	r3, [r7, #8]
 800ac3e:	4619      	mov	r1, r3
 800ac40:	68f8      	ldr	r0, [r7, #12]
 800ac42:	f000 f805 	bl	800ac50 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800ac46:	f000 f8d7 	bl	800adf8 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800ac4a:	bf00      	nop
 800ac4c:	e7f0      	b.n	800ac30 <prvTimerTask+0x8>
	...

0800ac50 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800ac50:	b580      	push	{r7, lr}
 800ac52:	b084      	sub	sp, #16
 800ac54:	af00      	add	r7, sp, #0
 800ac56:	6078      	str	r0, [r7, #4]
 800ac58:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800ac5a:	f7ff fa29 	bl	800a0b0 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800ac5e:	f107 0308 	add.w	r3, r7, #8
 800ac62:	4618      	mov	r0, r3
 800ac64:	f000 f866 	bl	800ad34 <prvSampleTimeNow>
 800ac68:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800ac6a:	68bb      	ldr	r3, [r7, #8]
 800ac6c:	2b00      	cmp	r3, #0
 800ac6e:	d130      	bne.n	800acd2 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800ac70:	683b      	ldr	r3, [r7, #0]
 800ac72:	2b00      	cmp	r3, #0
 800ac74:	d10a      	bne.n	800ac8c <prvProcessTimerOrBlockTask+0x3c>
 800ac76:	687a      	ldr	r2, [r7, #4]
 800ac78:	68fb      	ldr	r3, [r7, #12]
 800ac7a:	429a      	cmp	r2, r3
 800ac7c:	d806      	bhi.n	800ac8c <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800ac7e:	f7ff fa25 	bl	800a0cc <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800ac82:	68f9      	ldr	r1, [r7, #12]
 800ac84:	6878      	ldr	r0, [r7, #4]
 800ac86:	f7ff ff81 	bl	800ab8c <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800ac8a:	e024      	b.n	800acd6 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800ac8c:	683b      	ldr	r3, [r7, #0]
 800ac8e:	2b00      	cmp	r3, #0
 800ac90:	d008      	beq.n	800aca4 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800ac92:	4b13      	ldr	r3, [pc, #76]	@ (800ace0 <prvProcessTimerOrBlockTask+0x90>)
 800ac94:	681b      	ldr	r3, [r3, #0]
 800ac96:	681b      	ldr	r3, [r3, #0]
 800ac98:	2b00      	cmp	r3, #0
 800ac9a:	d101      	bne.n	800aca0 <prvProcessTimerOrBlockTask+0x50>
 800ac9c:	2301      	movs	r3, #1
 800ac9e:	e000      	b.n	800aca2 <prvProcessTimerOrBlockTask+0x52>
 800aca0:	2300      	movs	r3, #0
 800aca2:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800aca4:	4b0f      	ldr	r3, [pc, #60]	@ (800ace4 <prvProcessTimerOrBlockTask+0x94>)
 800aca6:	6818      	ldr	r0, [r3, #0]
 800aca8:	687a      	ldr	r2, [r7, #4]
 800acaa:	68fb      	ldr	r3, [r7, #12]
 800acac:	1ad3      	subs	r3, r2, r3
 800acae:	683a      	ldr	r2, [r7, #0]
 800acb0:	4619      	mov	r1, r3
 800acb2:	f7fe ff65 	bl	8009b80 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800acb6:	f7ff fa09 	bl	800a0cc <xTaskResumeAll>
 800acba:	4603      	mov	r3, r0
 800acbc:	2b00      	cmp	r3, #0
 800acbe:	d10a      	bne.n	800acd6 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800acc0:	4b09      	ldr	r3, [pc, #36]	@ (800ace8 <prvProcessTimerOrBlockTask+0x98>)
 800acc2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800acc6:	601a      	str	r2, [r3, #0]
 800acc8:	f3bf 8f4f 	dsb	sy
 800accc:	f3bf 8f6f 	isb	sy
}
 800acd0:	e001      	b.n	800acd6 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800acd2:	f7ff f9fb 	bl	800a0cc <xTaskResumeAll>
}
 800acd6:	bf00      	nop
 800acd8:	3710      	adds	r7, #16
 800acda:	46bd      	mov	sp, r7
 800acdc:	bd80      	pop	{r7, pc}
 800acde:	bf00      	nop
 800ace0:	2400128c 	.word	0x2400128c
 800ace4:	24001290 	.word	0x24001290
 800ace8:	e000ed04 	.word	0xe000ed04

0800acec <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800acec:	b480      	push	{r7}
 800acee:	b085      	sub	sp, #20
 800acf0:	af00      	add	r7, sp, #0
 800acf2:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800acf4:	4b0e      	ldr	r3, [pc, #56]	@ (800ad30 <prvGetNextExpireTime+0x44>)
 800acf6:	681b      	ldr	r3, [r3, #0]
 800acf8:	681b      	ldr	r3, [r3, #0]
 800acfa:	2b00      	cmp	r3, #0
 800acfc:	d101      	bne.n	800ad02 <prvGetNextExpireTime+0x16>
 800acfe:	2201      	movs	r2, #1
 800ad00:	e000      	b.n	800ad04 <prvGetNextExpireTime+0x18>
 800ad02:	2200      	movs	r2, #0
 800ad04:	687b      	ldr	r3, [r7, #4]
 800ad06:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800ad08:	687b      	ldr	r3, [r7, #4]
 800ad0a:	681b      	ldr	r3, [r3, #0]
 800ad0c:	2b00      	cmp	r3, #0
 800ad0e:	d105      	bne.n	800ad1c <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800ad10:	4b07      	ldr	r3, [pc, #28]	@ (800ad30 <prvGetNextExpireTime+0x44>)
 800ad12:	681b      	ldr	r3, [r3, #0]
 800ad14:	68db      	ldr	r3, [r3, #12]
 800ad16:	681b      	ldr	r3, [r3, #0]
 800ad18:	60fb      	str	r3, [r7, #12]
 800ad1a:	e001      	b.n	800ad20 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800ad1c:	2300      	movs	r3, #0
 800ad1e:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800ad20:	68fb      	ldr	r3, [r7, #12]
}
 800ad22:	4618      	mov	r0, r3
 800ad24:	3714      	adds	r7, #20
 800ad26:	46bd      	mov	sp, r7
 800ad28:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad2c:	4770      	bx	lr
 800ad2e:	bf00      	nop
 800ad30:	24001288 	.word	0x24001288

0800ad34 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800ad34:	b580      	push	{r7, lr}
 800ad36:	b084      	sub	sp, #16
 800ad38:	af00      	add	r7, sp, #0
 800ad3a:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800ad3c:	f7ff fa64 	bl	800a208 <xTaskGetTickCount>
 800ad40:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800ad42:	4b0b      	ldr	r3, [pc, #44]	@ (800ad70 <prvSampleTimeNow+0x3c>)
 800ad44:	681b      	ldr	r3, [r3, #0]
 800ad46:	68fa      	ldr	r2, [r7, #12]
 800ad48:	429a      	cmp	r2, r3
 800ad4a:	d205      	bcs.n	800ad58 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800ad4c:	f000 f93a 	bl	800afc4 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800ad50:	687b      	ldr	r3, [r7, #4]
 800ad52:	2201      	movs	r2, #1
 800ad54:	601a      	str	r2, [r3, #0]
 800ad56:	e002      	b.n	800ad5e <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800ad58:	687b      	ldr	r3, [r7, #4]
 800ad5a:	2200      	movs	r2, #0
 800ad5c:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800ad5e:	4a04      	ldr	r2, [pc, #16]	@ (800ad70 <prvSampleTimeNow+0x3c>)
 800ad60:	68fb      	ldr	r3, [r7, #12]
 800ad62:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800ad64:	68fb      	ldr	r3, [r7, #12]
}
 800ad66:	4618      	mov	r0, r3
 800ad68:	3710      	adds	r7, #16
 800ad6a:	46bd      	mov	sp, r7
 800ad6c:	bd80      	pop	{r7, pc}
 800ad6e:	bf00      	nop
 800ad70:	24001298 	.word	0x24001298

0800ad74 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800ad74:	b580      	push	{r7, lr}
 800ad76:	b086      	sub	sp, #24
 800ad78:	af00      	add	r7, sp, #0
 800ad7a:	60f8      	str	r0, [r7, #12]
 800ad7c:	60b9      	str	r1, [r7, #8]
 800ad7e:	607a      	str	r2, [r7, #4]
 800ad80:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800ad82:	2300      	movs	r3, #0
 800ad84:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800ad86:	68fb      	ldr	r3, [r7, #12]
 800ad88:	68ba      	ldr	r2, [r7, #8]
 800ad8a:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800ad8c:	68fb      	ldr	r3, [r7, #12]
 800ad8e:	68fa      	ldr	r2, [r7, #12]
 800ad90:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800ad92:	68ba      	ldr	r2, [r7, #8]
 800ad94:	687b      	ldr	r3, [r7, #4]
 800ad96:	429a      	cmp	r2, r3
 800ad98:	d812      	bhi.n	800adc0 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ad9a:	687a      	ldr	r2, [r7, #4]
 800ad9c:	683b      	ldr	r3, [r7, #0]
 800ad9e:	1ad2      	subs	r2, r2, r3
 800ada0:	68fb      	ldr	r3, [r7, #12]
 800ada2:	699b      	ldr	r3, [r3, #24]
 800ada4:	429a      	cmp	r2, r3
 800ada6:	d302      	bcc.n	800adae <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800ada8:	2301      	movs	r3, #1
 800adaa:	617b      	str	r3, [r7, #20]
 800adac:	e01b      	b.n	800ade6 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800adae:	4b10      	ldr	r3, [pc, #64]	@ (800adf0 <prvInsertTimerInActiveList+0x7c>)
 800adb0:	681a      	ldr	r2, [r3, #0]
 800adb2:	68fb      	ldr	r3, [r7, #12]
 800adb4:	3304      	adds	r3, #4
 800adb6:	4619      	mov	r1, r3
 800adb8:	4610      	mov	r0, r2
 800adba:	f7fe f9b8 	bl	800912e <vListInsert>
 800adbe:	e012      	b.n	800ade6 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800adc0:	687a      	ldr	r2, [r7, #4]
 800adc2:	683b      	ldr	r3, [r7, #0]
 800adc4:	429a      	cmp	r2, r3
 800adc6:	d206      	bcs.n	800add6 <prvInsertTimerInActiveList+0x62>
 800adc8:	68ba      	ldr	r2, [r7, #8]
 800adca:	683b      	ldr	r3, [r7, #0]
 800adcc:	429a      	cmp	r2, r3
 800adce:	d302      	bcc.n	800add6 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800add0:	2301      	movs	r3, #1
 800add2:	617b      	str	r3, [r7, #20]
 800add4:	e007      	b.n	800ade6 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800add6:	4b07      	ldr	r3, [pc, #28]	@ (800adf4 <prvInsertTimerInActiveList+0x80>)
 800add8:	681a      	ldr	r2, [r3, #0]
 800adda:	68fb      	ldr	r3, [r7, #12]
 800addc:	3304      	adds	r3, #4
 800adde:	4619      	mov	r1, r3
 800ade0:	4610      	mov	r0, r2
 800ade2:	f7fe f9a4 	bl	800912e <vListInsert>
		}
	}

	return xProcessTimerNow;
 800ade6:	697b      	ldr	r3, [r7, #20]
}
 800ade8:	4618      	mov	r0, r3
 800adea:	3718      	adds	r7, #24
 800adec:	46bd      	mov	sp, r7
 800adee:	bd80      	pop	{r7, pc}
 800adf0:	2400128c 	.word	0x2400128c
 800adf4:	24001288 	.word	0x24001288

0800adf8 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800adf8:	b580      	push	{r7, lr}
 800adfa:	b08e      	sub	sp, #56	@ 0x38
 800adfc:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800adfe:	e0ce      	b.n	800af9e <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800ae00:	687b      	ldr	r3, [r7, #4]
 800ae02:	2b00      	cmp	r3, #0
 800ae04:	da19      	bge.n	800ae3a <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800ae06:	1d3b      	adds	r3, r7, #4
 800ae08:	3304      	adds	r3, #4
 800ae0a:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800ae0c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ae0e:	2b00      	cmp	r3, #0
 800ae10:	d10b      	bne.n	800ae2a <prvProcessReceivedCommands+0x32>
	__asm volatile
 800ae12:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ae16:	f383 8811 	msr	BASEPRI, r3
 800ae1a:	f3bf 8f6f 	isb	sy
 800ae1e:	f3bf 8f4f 	dsb	sy
 800ae22:	61fb      	str	r3, [r7, #28]
}
 800ae24:	bf00      	nop
 800ae26:	bf00      	nop
 800ae28:	e7fd      	b.n	800ae26 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800ae2a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ae2c:	681b      	ldr	r3, [r3, #0]
 800ae2e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800ae30:	6850      	ldr	r0, [r2, #4]
 800ae32:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800ae34:	6892      	ldr	r2, [r2, #8]
 800ae36:	4611      	mov	r1, r2
 800ae38:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800ae3a:	687b      	ldr	r3, [r7, #4]
 800ae3c:	2b00      	cmp	r3, #0
 800ae3e:	f2c0 80ae 	blt.w	800af9e <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800ae42:	68fb      	ldr	r3, [r7, #12]
 800ae44:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800ae46:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ae48:	695b      	ldr	r3, [r3, #20]
 800ae4a:	2b00      	cmp	r3, #0
 800ae4c:	d004      	beq.n	800ae58 <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800ae4e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ae50:	3304      	adds	r3, #4
 800ae52:	4618      	mov	r0, r3
 800ae54:	f7fe f9a4 	bl	80091a0 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800ae58:	463b      	mov	r3, r7
 800ae5a:	4618      	mov	r0, r3
 800ae5c:	f7ff ff6a 	bl	800ad34 <prvSampleTimeNow>
 800ae60:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 800ae62:	687b      	ldr	r3, [r7, #4]
 800ae64:	2b09      	cmp	r3, #9
 800ae66:	f200 8097 	bhi.w	800af98 <prvProcessReceivedCommands+0x1a0>
 800ae6a:	a201      	add	r2, pc, #4	@ (adr r2, 800ae70 <prvProcessReceivedCommands+0x78>)
 800ae6c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ae70:	0800ae99 	.word	0x0800ae99
 800ae74:	0800ae99 	.word	0x0800ae99
 800ae78:	0800ae99 	.word	0x0800ae99
 800ae7c:	0800af0f 	.word	0x0800af0f
 800ae80:	0800af23 	.word	0x0800af23
 800ae84:	0800af6f 	.word	0x0800af6f
 800ae88:	0800ae99 	.word	0x0800ae99
 800ae8c:	0800ae99 	.word	0x0800ae99
 800ae90:	0800af0f 	.word	0x0800af0f
 800ae94:	0800af23 	.word	0x0800af23
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800ae98:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ae9a:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800ae9e:	f043 0301 	orr.w	r3, r3, #1
 800aea2:	b2da      	uxtb	r2, r3
 800aea4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800aea6:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800aeaa:	68ba      	ldr	r2, [r7, #8]
 800aeac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800aeae:	699b      	ldr	r3, [r3, #24]
 800aeb0:	18d1      	adds	r1, r2, r3
 800aeb2:	68bb      	ldr	r3, [r7, #8]
 800aeb4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800aeb6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800aeb8:	f7ff ff5c 	bl	800ad74 <prvInsertTimerInActiveList>
 800aebc:	4603      	mov	r3, r0
 800aebe:	2b00      	cmp	r3, #0
 800aec0:	d06c      	beq.n	800af9c <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800aec2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800aec4:	6a1b      	ldr	r3, [r3, #32]
 800aec6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800aec8:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800aeca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800aecc:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800aed0:	f003 0304 	and.w	r3, r3, #4
 800aed4:	2b00      	cmp	r3, #0
 800aed6:	d061      	beq.n	800af9c <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800aed8:	68ba      	ldr	r2, [r7, #8]
 800aeda:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800aedc:	699b      	ldr	r3, [r3, #24]
 800aede:	441a      	add	r2, r3
 800aee0:	2300      	movs	r3, #0
 800aee2:	9300      	str	r3, [sp, #0]
 800aee4:	2300      	movs	r3, #0
 800aee6:	2100      	movs	r1, #0
 800aee8:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800aeea:	f7ff fe01 	bl	800aaf0 <xTimerGenericCommand>
 800aeee:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800aef0:	6a3b      	ldr	r3, [r7, #32]
 800aef2:	2b00      	cmp	r3, #0
 800aef4:	d152      	bne.n	800af9c <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 800aef6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800aefa:	f383 8811 	msr	BASEPRI, r3
 800aefe:	f3bf 8f6f 	isb	sy
 800af02:	f3bf 8f4f 	dsb	sy
 800af06:	61bb      	str	r3, [r7, #24]
}
 800af08:	bf00      	nop
 800af0a:	bf00      	nop
 800af0c:	e7fd      	b.n	800af0a <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800af0e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800af10:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800af14:	f023 0301 	bic.w	r3, r3, #1
 800af18:	b2da      	uxtb	r2, r3
 800af1a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800af1c:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 800af20:	e03d      	b.n	800af9e <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800af22:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800af24:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800af28:	f043 0301 	orr.w	r3, r3, #1
 800af2c:	b2da      	uxtb	r2, r3
 800af2e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800af30:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800af34:	68ba      	ldr	r2, [r7, #8]
 800af36:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800af38:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800af3a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800af3c:	699b      	ldr	r3, [r3, #24]
 800af3e:	2b00      	cmp	r3, #0
 800af40:	d10b      	bne.n	800af5a <prvProcessReceivedCommands+0x162>
	__asm volatile
 800af42:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800af46:	f383 8811 	msr	BASEPRI, r3
 800af4a:	f3bf 8f6f 	isb	sy
 800af4e:	f3bf 8f4f 	dsb	sy
 800af52:	617b      	str	r3, [r7, #20]
}
 800af54:	bf00      	nop
 800af56:	bf00      	nop
 800af58:	e7fd      	b.n	800af56 <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800af5a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800af5c:	699a      	ldr	r2, [r3, #24]
 800af5e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800af60:	18d1      	adds	r1, r2, r3
 800af62:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800af64:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800af66:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800af68:	f7ff ff04 	bl	800ad74 <prvInsertTimerInActiveList>
					break;
 800af6c:	e017      	b.n	800af9e <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800af6e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800af70:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800af74:	f003 0302 	and.w	r3, r3, #2
 800af78:	2b00      	cmp	r3, #0
 800af7a:	d103      	bne.n	800af84 <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 800af7c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800af7e:	f000 fbeb 	bl	800b758 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800af82:	e00c      	b.n	800af9e <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800af84:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800af86:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800af8a:	f023 0301 	bic.w	r3, r3, #1
 800af8e:	b2da      	uxtb	r2, r3
 800af90:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800af92:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 800af96:	e002      	b.n	800af9e <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 800af98:	bf00      	nop
 800af9a:	e000      	b.n	800af9e <prvProcessReceivedCommands+0x1a6>
					break;
 800af9c:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800af9e:	4b08      	ldr	r3, [pc, #32]	@ (800afc0 <prvProcessReceivedCommands+0x1c8>)
 800afa0:	681b      	ldr	r3, [r3, #0]
 800afa2:	1d39      	adds	r1, r7, #4
 800afa4:	2200      	movs	r2, #0
 800afa6:	4618      	mov	r0, r3
 800afa8:	f7fe fbce 	bl	8009748 <xQueueReceive>
 800afac:	4603      	mov	r3, r0
 800afae:	2b00      	cmp	r3, #0
 800afb0:	f47f af26 	bne.w	800ae00 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 800afb4:	bf00      	nop
 800afb6:	bf00      	nop
 800afb8:	3730      	adds	r7, #48	@ 0x30
 800afba:	46bd      	mov	sp, r7
 800afbc:	bd80      	pop	{r7, pc}
 800afbe:	bf00      	nop
 800afc0:	24001290 	.word	0x24001290

0800afc4 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800afc4:	b580      	push	{r7, lr}
 800afc6:	b088      	sub	sp, #32
 800afc8:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800afca:	e049      	b.n	800b060 <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800afcc:	4b2e      	ldr	r3, [pc, #184]	@ (800b088 <prvSwitchTimerLists+0xc4>)
 800afce:	681b      	ldr	r3, [r3, #0]
 800afd0:	68db      	ldr	r3, [r3, #12]
 800afd2:	681b      	ldr	r3, [r3, #0]
 800afd4:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800afd6:	4b2c      	ldr	r3, [pc, #176]	@ (800b088 <prvSwitchTimerLists+0xc4>)
 800afd8:	681b      	ldr	r3, [r3, #0]
 800afda:	68db      	ldr	r3, [r3, #12]
 800afdc:	68db      	ldr	r3, [r3, #12]
 800afde:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800afe0:	68fb      	ldr	r3, [r7, #12]
 800afe2:	3304      	adds	r3, #4
 800afe4:	4618      	mov	r0, r3
 800afe6:	f7fe f8db 	bl	80091a0 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800afea:	68fb      	ldr	r3, [r7, #12]
 800afec:	6a1b      	ldr	r3, [r3, #32]
 800afee:	68f8      	ldr	r0, [r7, #12]
 800aff0:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800aff2:	68fb      	ldr	r3, [r7, #12]
 800aff4:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800aff8:	f003 0304 	and.w	r3, r3, #4
 800affc:	2b00      	cmp	r3, #0
 800affe:	d02f      	beq.n	800b060 <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800b000:	68fb      	ldr	r3, [r7, #12]
 800b002:	699b      	ldr	r3, [r3, #24]
 800b004:	693a      	ldr	r2, [r7, #16]
 800b006:	4413      	add	r3, r2
 800b008:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800b00a:	68ba      	ldr	r2, [r7, #8]
 800b00c:	693b      	ldr	r3, [r7, #16]
 800b00e:	429a      	cmp	r2, r3
 800b010:	d90e      	bls.n	800b030 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800b012:	68fb      	ldr	r3, [r7, #12]
 800b014:	68ba      	ldr	r2, [r7, #8]
 800b016:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800b018:	68fb      	ldr	r3, [r7, #12]
 800b01a:	68fa      	ldr	r2, [r7, #12]
 800b01c:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800b01e:	4b1a      	ldr	r3, [pc, #104]	@ (800b088 <prvSwitchTimerLists+0xc4>)
 800b020:	681a      	ldr	r2, [r3, #0]
 800b022:	68fb      	ldr	r3, [r7, #12]
 800b024:	3304      	adds	r3, #4
 800b026:	4619      	mov	r1, r3
 800b028:	4610      	mov	r0, r2
 800b02a:	f7fe f880 	bl	800912e <vListInsert>
 800b02e:	e017      	b.n	800b060 <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800b030:	2300      	movs	r3, #0
 800b032:	9300      	str	r3, [sp, #0]
 800b034:	2300      	movs	r3, #0
 800b036:	693a      	ldr	r2, [r7, #16]
 800b038:	2100      	movs	r1, #0
 800b03a:	68f8      	ldr	r0, [r7, #12]
 800b03c:	f7ff fd58 	bl	800aaf0 <xTimerGenericCommand>
 800b040:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800b042:	687b      	ldr	r3, [r7, #4]
 800b044:	2b00      	cmp	r3, #0
 800b046:	d10b      	bne.n	800b060 <prvSwitchTimerLists+0x9c>
	__asm volatile
 800b048:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b04c:	f383 8811 	msr	BASEPRI, r3
 800b050:	f3bf 8f6f 	isb	sy
 800b054:	f3bf 8f4f 	dsb	sy
 800b058:	603b      	str	r3, [r7, #0]
}
 800b05a:	bf00      	nop
 800b05c:	bf00      	nop
 800b05e:	e7fd      	b.n	800b05c <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800b060:	4b09      	ldr	r3, [pc, #36]	@ (800b088 <prvSwitchTimerLists+0xc4>)
 800b062:	681b      	ldr	r3, [r3, #0]
 800b064:	681b      	ldr	r3, [r3, #0]
 800b066:	2b00      	cmp	r3, #0
 800b068:	d1b0      	bne.n	800afcc <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800b06a:	4b07      	ldr	r3, [pc, #28]	@ (800b088 <prvSwitchTimerLists+0xc4>)
 800b06c:	681b      	ldr	r3, [r3, #0]
 800b06e:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800b070:	4b06      	ldr	r3, [pc, #24]	@ (800b08c <prvSwitchTimerLists+0xc8>)
 800b072:	681b      	ldr	r3, [r3, #0]
 800b074:	4a04      	ldr	r2, [pc, #16]	@ (800b088 <prvSwitchTimerLists+0xc4>)
 800b076:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800b078:	4a04      	ldr	r2, [pc, #16]	@ (800b08c <prvSwitchTimerLists+0xc8>)
 800b07a:	697b      	ldr	r3, [r7, #20]
 800b07c:	6013      	str	r3, [r2, #0]
}
 800b07e:	bf00      	nop
 800b080:	3718      	adds	r7, #24
 800b082:	46bd      	mov	sp, r7
 800b084:	bd80      	pop	{r7, pc}
 800b086:	bf00      	nop
 800b088:	24001288 	.word	0x24001288
 800b08c:	2400128c 	.word	0x2400128c

0800b090 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800b090:	b580      	push	{r7, lr}
 800b092:	b082      	sub	sp, #8
 800b094:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800b096:	f000 f96f 	bl	800b378 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800b09a:	4b15      	ldr	r3, [pc, #84]	@ (800b0f0 <prvCheckForValidListAndQueue+0x60>)
 800b09c:	681b      	ldr	r3, [r3, #0]
 800b09e:	2b00      	cmp	r3, #0
 800b0a0:	d120      	bne.n	800b0e4 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800b0a2:	4814      	ldr	r0, [pc, #80]	@ (800b0f4 <prvCheckForValidListAndQueue+0x64>)
 800b0a4:	f7fd fff2 	bl	800908c <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800b0a8:	4813      	ldr	r0, [pc, #76]	@ (800b0f8 <prvCheckForValidListAndQueue+0x68>)
 800b0aa:	f7fd ffef 	bl	800908c <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800b0ae:	4b13      	ldr	r3, [pc, #76]	@ (800b0fc <prvCheckForValidListAndQueue+0x6c>)
 800b0b0:	4a10      	ldr	r2, [pc, #64]	@ (800b0f4 <prvCheckForValidListAndQueue+0x64>)
 800b0b2:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800b0b4:	4b12      	ldr	r3, [pc, #72]	@ (800b100 <prvCheckForValidListAndQueue+0x70>)
 800b0b6:	4a10      	ldr	r2, [pc, #64]	@ (800b0f8 <prvCheckForValidListAndQueue+0x68>)
 800b0b8:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800b0ba:	2300      	movs	r3, #0
 800b0bc:	9300      	str	r3, [sp, #0]
 800b0be:	4b11      	ldr	r3, [pc, #68]	@ (800b104 <prvCheckForValidListAndQueue+0x74>)
 800b0c0:	4a11      	ldr	r2, [pc, #68]	@ (800b108 <prvCheckForValidListAndQueue+0x78>)
 800b0c2:	2110      	movs	r1, #16
 800b0c4:	200a      	movs	r0, #10
 800b0c6:	f7fe f8ff 	bl	80092c8 <xQueueGenericCreateStatic>
 800b0ca:	4603      	mov	r3, r0
 800b0cc:	4a08      	ldr	r2, [pc, #32]	@ (800b0f0 <prvCheckForValidListAndQueue+0x60>)
 800b0ce:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800b0d0:	4b07      	ldr	r3, [pc, #28]	@ (800b0f0 <prvCheckForValidListAndQueue+0x60>)
 800b0d2:	681b      	ldr	r3, [r3, #0]
 800b0d4:	2b00      	cmp	r3, #0
 800b0d6:	d005      	beq.n	800b0e4 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800b0d8:	4b05      	ldr	r3, [pc, #20]	@ (800b0f0 <prvCheckForValidListAndQueue+0x60>)
 800b0da:	681b      	ldr	r3, [r3, #0]
 800b0dc:	490b      	ldr	r1, [pc, #44]	@ (800b10c <prvCheckForValidListAndQueue+0x7c>)
 800b0de:	4618      	mov	r0, r3
 800b0e0:	f7fe fd24 	bl	8009b2c <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800b0e4:	f000 f97a 	bl	800b3dc <vPortExitCritical>
}
 800b0e8:	bf00      	nop
 800b0ea:	46bd      	mov	sp, r7
 800b0ec:	bd80      	pop	{r7, pc}
 800b0ee:	bf00      	nop
 800b0f0:	24001290 	.word	0x24001290
 800b0f4:	24001260 	.word	0x24001260
 800b0f8:	24001274 	.word	0x24001274
 800b0fc:	24001288 	.word	0x24001288
 800b100:	2400128c 	.word	0x2400128c
 800b104:	2400133c 	.word	0x2400133c
 800b108:	2400129c 	.word	0x2400129c
 800b10c:	0800bb9c 	.word	0x0800bb9c

0800b110 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800b110:	b480      	push	{r7}
 800b112:	b085      	sub	sp, #20
 800b114:	af00      	add	r7, sp, #0
 800b116:	60f8      	str	r0, [r7, #12]
 800b118:	60b9      	str	r1, [r7, #8]
 800b11a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800b11c:	68fb      	ldr	r3, [r7, #12]
 800b11e:	3b04      	subs	r3, #4
 800b120:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800b122:	68fb      	ldr	r3, [r7, #12]
 800b124:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800b128:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800b12a:	68fb      	ldr	r3, [r7, #12]
 800b12c:	3b04      	subs	r3, #4
 800b12e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800b130:	68bb      	ldr	r3, [r7, #8]
 800b132:	f023 0201 	bic.w	r2, r3, #1
 800b136:	68fb      	ldr	r3, [r7, #12]
 800b138:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800b13a:	68fb      	ldr	r3, [r7, #12]
 800b13c:	3b04      	subs	r3, #4
 800b13e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800b140:	4a0c      	ldr	r2, [pc, #48]	@ (800b174 <pxPortInitialiseStack+0x64>)
 800b142:	68fb      	ldr	r3, [r7, #12]
 800b144:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800b146:	68fb      	ldr	r3, [r7, #12]
 800b148:	3b14      	subs	r3, #20
 800b14a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800b14c:	687a      	ldr	r2, [r7, #4]
 800b14e:	68fb      	ldr	r3, [r7, #12]
 800b150:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800b152:	68fb      	ldr	r3, [r7, #12]
 800b154:	3b04      	subs	r3, #4
 800b156:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800b158:	68fb      	ldr	r3, [r7, #12]
 800b15a:	f06f 0202 	mvn.w	r2, #2
 800b15e:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800b160:	68fb      	ldr	r3, [r7, #12]
 800b162:	3b20      	subs	r3, #32
 800b164:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800b166:	68fb      	ldr	r3, [r7, #12]
}
 800b168:	4618      	mov	r0, r3
 800b16a:	3714      	adds	r7, #20
 800b16c:	46bd      	mov	sp, r7
 800b16e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b172:	4770      	bx	lr
 800b174:	0800b179 	.word	0x0800b179

0800b178 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800b178:	b480      	push	{r7}
 800b17a:	b085      	sub	sp, #20
 800b17c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800b17e:	2300      	movs	r3, #0
 800b180:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800b182:	4b13      	ldr	r3, [pc, #76]	@ (800b1d0 <prvTaskExitError+0x58>)
 800b184:	681b      	ldr	r3, [r3, #0]
 800b186:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b18a:	d00b      	beq.n	800b1a4 <prvTaskExitError+0x2c>
	__asm volatile
 800b18c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b190:	f383 8811 	msr	BASEPRI, r3
 800b194:	f3bf 8f6f 	isb	sy
 800b198:	f3bf 8f4f 	dsb	sy
 800b19c:	60fb      	str	r3, [r7, #12]
}
 800b19e:	bf00      	nop
 800b1a0:	bf00      	nop
 800b1a2:	e7fd      	b.n	800b1a0 <prvTaskExitError+0x28>
	__asm volatile
 800b1a4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b1a8:	f383 8811 	msr	BASEPRI, r3
 800b1ac:	f3bf 8f6f 	isb	sy
 800b1b0:	f3bf 8f4f 	dsb	sy
 800b1b4:	60bb      	str	r3, [r7, #8]
}
 800b1b6:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800b1b8:	bf00      	nop
 800b1ba:	687b      	ldr	r3, [r7, #4]
 800b1bc:	2b00      	cmp	r3, #0
 800b1be:	d0fc      	beq.n	800b1ba <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800b1c0:	bf00      	nop
 800b1c2:	bf00      	nop
 800b1c4:	3714      	adds	r7, #20
 800b1c6:	46bd      	mov	sp, r7
 800b1c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1cc:	4770      	bx	lr
 800b1ce:	bf00      	nop
 800b1d0:	24000010 	.word	0x24000010
	...

0800b1e0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800b1e0:	4b07      	ldr	r3, [pc, #28]	@ (800b200 <pxCurrentTCBConst2>)
 800b1e2:	6819      	ldr	r1, [r3, #0]
 800b1e4:	6808      	ldr	r0, [r1, #0]
 800b1e6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b1ea:	f380 8809 	msr	PSP, r0
 800b1ee:	f3bf 8f6f 	isb	sy
 800b1f2:	f04f 0000 	mov.w	r0, #0
 800b1f6:	f380 8811 	msr	BASEPRI, r0
 800b1fa:	4770      	bx	lr
 800b1fc:	f3af 8000 	nop.w

0800b200 <pxCurrentTCBConst2>:
 800b200:	24000d60 	.word	0x24000d60
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800b204:	bf00      	nop
 800b206:	bf00      	nop

0800b208 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800b208:	4808      	ldr	r0, [pc, #32]	@ (800b22c <prvPortStartFirstTask+0x24>)
 800b20a:	6800      	ldr	r0, [r0, #0]
 800b20c:	6800      	ldr	r0, [r0, #0]
 800b20e:	f380 8808 	msr	MSP, r0
 800b212:	f04f 0000 	mov.w	r0, #0
 800b216:	f380 8814 	msr	CONTROL, r0
 800b21a:	b662      	cpsie	i
 800b21c:	b661      	cpsie	f
 800b21e:	f3bf 8f4f 	dsb	sy
 800b222:	f3bf 8f6f 	isb	sy
 800b226:	df00      	svc	0
 800b228:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800b22a:	bf00      	nop
 800b22c:	e000ed08 	.word	0xe000ed08

0800b230 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800b230:	b580      	push	{r7, lr}
 800b232:	b086      	sub	sp, #24
 800b234:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800b236:	4b47      	ldr	r3, [pc, #284]	@ (800b354 <xPortStartScheduler+0x124>)
 800b238:	681b      	ldr	r3, [r3, #0]
 800b23a:	4a47      	ldr	r2, [pc, #284]	@ (800b358 <xPortStartScheduler+0x128>)
 800b23c:	4293      	cmp	r3, r2
 800b23e:	d10b      	bne.n	800b258 <xPortStartScheduler+0x28>
	__asm volatile
 800b240:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b244:	f383 8811 	msr	BASEPRI, r3
 800b248:	f3bf 8f6f 	isb	sy
 800b24c:	f3bf 8f4f 	dsb	sy
 800b250:	613b      	str	r3, [r7, #16]
}
 800b252:	bf00      	nop
 800b254:	bf00      	nop
 800b256:	e7fd      	b.n	800b254 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800b258:	4b3e      	ldr	r3, [pc, #248]	@ (800b354 <xPortStartScheduler+0x124>)
 800b25a:	681b      	ldr	r3, [r3, #0]
 800b25c:	4a3f      	ldr	r2, [pc, #252]	@ (800b35c <xPortStartScheduler+0x12c>)
 800b25e:	4293      	cmp	r3, r2
 800b260:	d10b      	bne.n	800b27a <xPortStartScheduler+0x4a>
	__asm volatile
 800b262:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b266:	f383 8811 	msr	BASEPRI, r3
 800b26a:	f3bf 8f6f 	isb	sy
 800b26e:	f3bf 8f4f 	dsb	sy
 800b272:	60fb      	str	r3, [r7, #12]
}
 800b274:	bf00      	nop
 800b276:	bf00      	nop
 800b278:	e7fd      	b.n	800b276 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800b27a:	4b39      	ldr	r3, [pc, #228]	@ (800b360 <xPortStartScheduler+0x130>)
 800b27c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800b27e:	697b      	ldr	r3, [r7, #20]
 800b280:	781b      	ldrb	r3, [r3, #0]
 800b282:	b2db      	uxtb	r3, r3
 800b284:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800b286:	697b      	ldr	r3, [r7, #20]
 800b288:	22ff      	movs	r2, #255	@ 0xff
 800b28a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800b28c:	697b      	ldr	r3, [r7, #20]
 800b28e:	781b      	ldrb	r3, [r3, #0]
 800b290:	b2db      	uxtb	r3, r3
 800b292:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800b294:	78fb      	ldrb	r3, [r7, #3]
 800b296:	b2db      	uxtb	r3, r3
 800b298:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800b29c:	b2da      	uxtb	r2, r3
 800b29e:	4b31      	ldr	r3, [pc, #196]	@ (800b364 <xPortStartScheduler+0x134>)
 800b2a0:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800b2a2:	4b31      	ldr	r3, [pc, #196]	@ (800b368 <xPortStartScheduler+0x138>)
 800b2a4:	2207      	movs	r2, #7
 800b2a6:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800b2a8:	e009      	b.n	800b2be <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 800b2aa:	4b2f      	ldr	r3, [pc, #188]	@ (800b368 <xPortStartScheduler+0x138>)
 800b2ac:	681b      	ldr	r3, [r3, #0]
 800b2ae:	3b01      	subs	r3, #1
 800b2b0:	4a2d      	ldr	r2, [pc, #180]	@ (800b368 <xPortStartScheduler+0x138>)
 800b2b2:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800b2b4:	78fb      	ldrb	r3, [r7, #3]
 800b2b6:	b2db      	uxtb	r3, r3
 800b2b8:	005b      	lsls	r3, r3, #1
 800b2ba:	b2db      	uxtb	r3, r3
 800b2bc:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800b2be:	78fb      	ldrb	r3, [r7, #3]
 800b2c0:	b2db      	uxtb	r3, r3
 800b2c2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800b2c6:	2b80      	cmp	r3, #128	@ 0x80
 800b2c8:	d0ef      	beq.n	800b2aa <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800b2ca:	4b27      	ldr	r3, [pc, #156]	@ (800b368 <xPortStartScheduler+0x138>)
 800b2cc:	681b      	ldr	r3, [r3, #0]
 800b2ce:	f1c3 0307 	rsb	r3, r3, #7
 800b2d2:	2b04      	cmp	r3, #4
 800b2d4:	d00b      	beq.n	800b2ee <xPortStartScheduler+0xbe>
	__asm volatile
 800b2d6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b2da:	f383 8811 	msr	BASEPRI, r3
 800b2de:	f3bf 8f6f 	isb	sy
 800b2e2:	f3bf 8f4f 	dsb	sy
 800b2e6:	60bb      	str	r3, [r7, #8]
}
 800b2e8:	bf00      	nop
 800b2ea:	bf00      	nop
 800b2ec:	e7fd      	b.n	800b2ea <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800b2ee:	4b1e      	ldr	r3, [pc, #120]	@ (800b368 <xPortStartScheduler+0x138>)
 800b2f0:	681b      	ldr	r3, [r3, #0]
 800b2f2:	021b      	lsls	r3, r3, #8
 800b2f4:	4a1c      	ldr	r2, [pc, #112]	@ (800b368 <xPortStartScheduler+0x138>)
 800b2f6:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800b2f8:	4b1b      	ldr	r3, [pc, #108]	@ (800b368 <xPortStartScheduler+0x138>)
 800b2fa:	681b      	ldr	r3, [r3, #0]
 800b2fc:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800b300:	4a19      	ldr	r2, [pc, #100]	@ (800b368 <xPortStartScheduler+0x138>)
 800b302:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800b304:	687b      	ldr	r3, [r7, #4]
 800b306:	b2da      	uxtb	r2, r3
 800b308:	697b      	ldr	r3, [r7, #20]
 800b30a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800b30c:	4b17      	ldr	r3, [pc, #92]	@ (800b36c <xPortStartScheduler+0x13c>)
 800b30e:	681b      	ldr	r3, [r3, #0]
 800b310:	4a16      	ldr	r2, [pc, #88]	@ (800b36c <xPortStartScheduler+0x13c>)
 800b312:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800b316:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800b318:	4b14      	ldr	r3, [pc, #80]	@ (800b36c <xPortStartScheduler+0x13c>)
 800b31a:	681b      	ldr	r3, [r3, #0]
 800b31c:	4a13      	ldr	r2, [pc, #76]	@ (800b36c <xPortStartScheduler+0x13c>)
 800b31e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 800b322:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800b324:	f000 f8da 	bl	800b4dc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800b328:	4b11      	ldr	r3, [pc, #68]	@ (800b370 <xPortStartScheduler+0x140>)
 800b32a:	2200      	movs	r2, #0
 800b32c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800b32e:	f000 f8f9 	bl	800b524 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800b332:	4b10      	ldr	r3, [pc, #64]	@ (800b374 <xPortStartScheduler+0x144>)
 800b334:	681b      	ldr	r3, [r3, #0]
 800b336:	4a0f      	ldr	r2, [pc, #60]	@ (800b374 <xPortStartScheduler+0x144>)
 800b338:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 800b33c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800b33e:	f7ff ff63 	bl	800b208 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800b342:	f7ff f82b 	bl	800a39c <vTaskSwitchContext>
	prvTaskExitError();
 800b346:	f7ff ff17 	bl	800b178 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800b34a:	2300      	movs	r3, #0
}
 800b34c:	4618      	mov	r0, r3
 800b34e:	3718      	adds	r7, #24
 800b350:	46bd      	mov	sp, r7
 800b352:	bd80      	pop	{r7, pc}
 800b354:	e000ed00 	.word	0xe000ed00
 800b358:	410fc271 	.word	0x410fc271
 800b35c:	410fc270 	.word	0x410fc270
 800b360:	e000e400 	.word	0xe000e400
 800b364:	2400138c 	.word	0x2400138c
 800b368:	24001390 	.word	0x24001390
 800b36c:	e000ed20 	.word	0xe000ed20
 800b370:	24000010 	.word	0x24000010
 800b374:	e000ef34 	.word	0xe000ef34

0800b378 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800b378:	b480      	push	{r7}
 800b37a:	b083      	sub	sp, #12
 800b37c:	af00      	add	r7, sp, #0
	__asm volatile
 800b37e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b382:	f383 8811 	msr	BASEPRI, r3
 800b386:	f3bf 8f6f 	isb	sy
 800b38a:	f3bf 8f4f 	dsb	sy
 800b38e:	607b      	str	r3, [r7, #4]
}
 800b390:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800b392:	4b10      	ldr	r3, [pc, #64]	@ (800b3d4 <vPortEnterCritical+0x5c>)
 800b394:	681b      	ldr	r3, [r3, #0]
 800b396:	3301      	adds	r3, #1
 800b398:	4a0e      	ldr	r2, [pc, #56]	@ (800b3d4 <vPortEnterCritical+0x5c>)
 800b39a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800b39c:	4b0d      	ldr	r3, [pc, #52]	@ (800b3d4 <vPortEnterCritical+0x5c>)
 800b39e:	681b      	ldr	r3, [r3, #0]
 800b3a0:	2b01      	cmp	r3, #1
 800b3a2:	d110      	bne.n	800b3c6 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800b3a4:	4b0c      	ldr	r3, [pc, #48]	@ (800b3d8 <vPortEnterCritical+0x60>)
 800b3a6:	681b      	ldr	r3, [r3, #0]
 800b3a8:	b2db      	uxtb	r3, r3
 800b3aa:	2b00      	cmp	r3, #0
 800b3ac:	d00b      	beq.n	800b3c6 <vPortEnterCritical+0x4e>
	__asm volatile
 800b3ae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b3b2:	f383 8811 	msr	BASEPRI, r3
 800b3b6:	f3bf 8f6f 	isb	sy
 800b3ba:	f3bf 8f4f 	dsb	sy
 800b3be:	603b      	str	r3, [r7, #0]
}
 800b3c0:	bf00      	nop
 800b3c2:	bf00      	nop
 800b3c4:	e7fd      	b.n	800b3c2 <vPortEnterCritical+0x4a>
	}
}
 800b3c6:	bf00      	nop
 800b3c8:	370c      	adds	r7, #12
 800b3ca:	46bd      	mov	sp, r7
 800b3cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3d0:	4770      	bx	lr
 800b3d2:	bf00      	nop
 800b3d4:	24000010 	.word	0x24000010
 800b3d8:	e000ed04 	.word	0xe000ed04

0800b3dc <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800b3dc:	b480      	push	{r7}
 800b3de:	b083      	sub	sp, #12
 800b3e0:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800b3e2:	4b12      	ldr	r3, [pc, #72]	@ (800b42c <vPortExitCritical+0x50>)
 800b3e4:	681b      	ldr	r3, [r3, #0]
 800b3e6:	2b00      	cmp	r3, #0
 800b3e8:	d10b      	bne.n	800b402 <vPortExitCritical+0x26>
	__asm volatile
 800b3ea:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b3ee:	f383 8811 	msr	BASEPRI, r3
 800b3f2:	f3bf 8f6f 	isb	sy
 800b3f6:	f3bf 8f4f 	dsb	sy
 800b3fa:	607b      	str	r3, [r7, #4]
}
 800b3fc:	bf00      	nop
 800b3fe:	bf00      	nop
 800b400:	e7fd      	b.n	800b3fe <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800b402:	4b0a      	ldr	r3, [pc, #40]	@ (800b42c <vPortExitCritical+0x50>)
 800b404:	681b      	ldr	r3, [r3, #0]
 800b406:	3b01      	subs	r3, #1
 800b408:	4a08      	ldr	r2, [pc, #32]	@ (800b42c <vPortExitCritical+0x50>)
 800b40a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800b40c:	4b07      	ldr	r3, [pc, #28]	@ (800b42c <vPortExitCritical+0x50>)
 800b40e:	681b      	ldr	r3, [r3, #0]
 800b410:	2b00      	cmp	r3, #0
 800b412:	d105      	bne.n	800b420 <vPortExitCritical+0x44>
 800b414:	2300      	movs	r3, #0
 800b416:	603b      	str	r3, [r7, #0]
	__asm volatile
 800b418:	683b      	ldr	r3, [r7, #0]
 800b41a:	f383 8811 	msr	BASEPRI, r3
}
 800b41e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800b420:	bf00      	nop
 800b422:	370c      	adds	r7, #12
 800b424:	46bd      	mov	sp, r7
 800b426:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b42a:	4770      	bx	lr
 800b42c:	24000010 	.word	0x24000010

0800b430 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800b430:	f3ef 8009 	mrs	r0, PSP
 800b434:	f3bf 8f6f 	isb	sy
 800b438:	4b15      	ldr	r3, [pc, #84]	@ (800b490 <pxCurrentTCBConst>)
 800b43a:	681a      	ldr	r2, [r3, #0]
 800b43c:	f01e 0f10 	tst.w	lr, #16
 800b440:	bf08      	it	eq
 800b442:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800b446:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b44a:	6010      	str	r0, [r2, #0]
 800b44c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800b450:	f04f 0050 	mov.w	r0, #80	@ 0x50
 800b454:	f380 8811 	msr	BASEPRI, r0
 800b458:	f3bf 8f4f 	dsb	sy
 800b45c:	f3bf 8f6f 	isb	sy
 800b460:	f7fe ff9c 	bl	800a39c <vTaskSwitchContext>
 800b464:	f04f 0000 	mov.w	r0, #0
 800b468:	f380 8811 	msr	BASEPRI, r0
 800b46c:	bc09      	pop	{r0, r3}
 800b46e:	6819      	ldr	r1, [r3, #0]
 800b470:	6808      	ldr	r0, [r1, #0]
 800b472:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b476:	f01e 0f10 	tst.w	lr, #16
 800b47a:	bf08      	it	eq
 800b47c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800b480:	f380 8809 	msr	PSP, r0
 800b484:	f3bf 8f6f 	isb	sy
 800b488:	4770      	bx	lr
 800b48a:	bf00      	nop
 800b48c:	f3af 8000 	nop.w

0800b490 <pxCurrentTCBConst>:
 800b490:	24000d60 	.word	0x24000d60
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800b494:	bf00      	nop
 800b496:	bf00      	nop

0800b498 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800b498:	b580      	push	{r7, lr}
 800b49a:	b082      	sub	sp, #8
 800b49c:	af00      	add	r7, sp, #0
	__asm volatile
 800b49e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b4a2:	f383 8811 	msr	BASEPRI, r3
 800b4a6:	f3bf 8f6f 	isb	sy
 800b4aa:	f3bf 8f4f 	dsb	sy
 800b4ae:	607b      	str	r3, [r7, #4]
}
 800b4b0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800b4b2:	f7fe feb9 	bl	800a228 <xTaskIncrementTick>
 800b4b6:	4603      	mov	r3, r0
 800b4b8:	2b00      	cmp	r3, #0
 800b4ba:	d003      	beq.n	800b4c4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800b4bc:	4b06      	ldr	r3, [pc, #24]	@ (800b4d8 <xPortSysTickHandler+0x40>)
 800b4be:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800b4c2:	601a      	str	r2, [r3, #0]
 800b4c4:	2300      	movs	r3, #0
 800b4c6:	603b      	str	r3, [r7, #0]
	__asm volatile
 800b4c8:	683b      	ldr	r3, [r7, #0]
 800b4ca:	f383 8811 	msr	BASEPRI, r3
}
 800b4ce:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800b4d0:	bf00      	nop
 800b4d2:	3708      	adds	r7, #8
 800b4d4:	46bd      	mov	sp, r7
 800b4d6:	bd80      	pop	{r7, pc}
 800b4d8:	e000ed04 	.word	0xe000ed04

0800b4dc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800b4dc:	b480      	push	{r7}
 800b4de:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800b4e0:	4b0b      	ldr	r3, [pc, #44]	@ (800b510 <vPortSetupTimerInterrupt+0x34>)
 800b4e2:	2200      	movs	r2, #0
 800b4e4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800b4e6:	4b0b      	ldr	r3, [pc, #44]	@ (800b514 <vPortSetupTimerInterrupt+0x38>)
 800b4e8:	2200      	movs	r2, #0
 800b4ea:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800b4ec:	4b0a      	ldr	r3, [pc, #40]	@ (800b518 <vPortSetupTimerInterrupt+0x3c>)
 800b4ee:	681b      	ldr	r3, [r3, #0]
 800b4f0:	4a0a      	ldr	r2, [pc, #40]	@ (800b51c <vPortSetupTimerInterrupt+0x40>)
 800b4f2:	fba2 2303 	umull	r2, r3, r2, r3
 800b4f6:	099b      	lsrs	r3, r3, #6
 800b4f8:	4a09      	ldr	r2, [pc, #36]	@ (800b520 <vPortSetupTimerInterrupt+0x44>)
 800b4fa:	3b01      	subs	r3, #1
 800b4fc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800b4fe:	4b04      	ldr	r3, [pc, #16]	@ (800b510 <vPortSetupTimerInterrupt+0x34>)
 800b500:	2207      	movs	r2, #7
 800b502:	601a      	str	r2, [r3, #0]
}
 800b504:	bf00      	nop
 800b506:	46bd      	mov	sp, r7
 800b508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b50c:	4770      	bx	lr
 800b50e:	bf00      	nop
 800b510:	e000e010 	.word	0xe000e010
 800b514:	e000e018 	.word	0xe000e018
 800b518:	24000000 	.word	0x24000000
 800b51c:	10624dd3 	.word	0x10624dd3
 800b520:	e000e014 	.word	0xe000e014

0800b524 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800b524:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 800b534 <vPortEnableVFP+0x10>
 800b528:	6801      	ldr	r1, [r0, #0]
 800b52a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800b52e:	6001      	str	r1, [r0, #0]
 800b530:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800b532:	bf00      	nop
 800b534:	e000ed88 	.word	0xe000ed88

0800b538 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800b538:	b480      	push	{r7}
 800b53a:	b085      	sub	sp, #20
 800b53c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800b53e:	f3ef 8305 	mrs	r3, IPSR
 800b542:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800b544:	68fb      	ldr	r3, [r7, #12]
 800b546:	2b0f      	cmp	r3, #15
 800b548:	d915      	bls.n	800b576 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800b54a:	4a18      	ldr	r2, [pc, #96]	@ (800b5ac <vPortValidateInterruptPriority+0x74>)
 800b54c:	68fb      	ldr	r3, [r7, #12]
 800b54e:	4413      	add	r3, r2
 800b550:	781b      	ldrb	r3, [r3, #0]
 800b552:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800b554:	4b16      	ldr	r3, [pc, #88]	@ (800b5b0 <vPortValidateInterruptPriority+0x78>)
 800b556:	781b      	ldrb	r3, [r3, #0]
 800b558:	7afa      	ldrb	r2, [r7, #11]
 800b55a:	429a      	cmp	r2, r3
 800b55c:	d20b      	bcs.n	800b576 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 800b55e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b562:	f383 8811 	msr	BASEPRI, r3
 800b566:	f3bf 8f6f 	isb	sy
 800b56a:	f3bf 8f4f 	dsb	sy
 800b56e:	607b      	str	r3, [r7, #4]
}
 800b570:	bf00      	nop
 800b572:	bf00      	nop
 800b574:	e7fd      	b.n	800b572 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800b576:	4b0f      	ldr	r3, [pc, #60]	@ (800b5b4 <vPortValidateInterruptPriority+0x7c>)
 800b578:	681b      	ldr	r3, [r3, #0]
 800b57a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800b57e:	4b0e      	ldr	r3, [pc, #56]	@ (800b5b8 <vPortValidateInterruptPriority+0x80>)
 800b580:	681b      	ldr	r3, [r3, #0]
 800b582:	429a      	cmp	r2, r3
 800b584:	d90b      	bls.n	800b59e <vPortValidateInterruptPriority+0x66>
	__asm volatile
 800b586:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b58a:	f383 8811 	msr	BASEPRI, r3
 800b58e:	f3bf 8f6f 	isb	sy
 800b592:	f3bf 8f4f 	dsb	sy
 800b596:	603b      	str	r3, [r7, #0]
}
 800b598:	bf00      	nop
 800b59a:	bf00      	nop
 800b59c:	e7fd      	b.n	800b59a <vPortValidateInterruptPriority+0x62>
	}
 800b59e:	bf00      	nop
 800b5a0:	3714      	adds	r7, #20
 800b5a2:	46bd      	mov	sp, r7
 800b5a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5a8:	4770      	bx	lr
 800b5aa:	bf00      	nop
 800b5ac:	e000e3f0 	.word	0xe000e3f0
 800b5b0:	2400138c 	.word	0x2400138c
 800b5b4:	e000ed0c 	.word	0xe000ed0c
 800b5b8:	24001390 	.word	0x24001390

0800b5bc <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800b5bc:	b580      	push	{r7, lr}
 800b5be:	b08a      	sub	sp, #40	@ 0x28
 800b5c0:	af00      	add	r7, sp, #0
 800b5c2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800b5c4:	2300      	movs	r3, #0
 800b5c6:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800b5c8:	f7fe fd72 	bl	800a0b0 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800b5cc:	4b5c      	ldr	r3, [pc, #368]	@ (800b740 <pvPortMalloc+0x184>)
 800b5ce:	681b      	ldr	r3, [r3, #0]
 800b5d0:	2b00      	cmp	r3, #0
 800b5d2:	d101      	bne.n	800b5d8 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800b5d4:	f000 f924 	bl	800b820 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800b5d8:	4b5a      	ldr	r3, [pc, #360]	@ (800b744 <pvPortMalloc+0x188>)
 800b5da:	681a      	ldr	r2, [r3, #0]
 800b5dc:	687b      	ldr	r3, [r7, #4]
 800b5de:	4013      	ands	r3, r2
 800b5e0:	2b00      	cmp	r3, #0
 800b5e2:	f040 8095 	bne.w	800b710 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800b5e6:	687b      	ldr	r3, [r7, #4]
 800b5e8:	2b00      	cmp	r3, #0
 800b5ea:	d01e      	beq.n	800b62a <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 800b5ec:	2208      	movs	r2, #8
 800b5ee:	687b      	ldr	r3, [r7, #4]
 800b5f0:	4413      	add	r3, r2
 800b5f2:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800b5f4:	687b      	ldr	r3, [r7, #4]
 800b5f6:	f003 0307 	and.w	r3, r3, #7
 800b5fa:	2b00      	cmp	r3, #0
 800b5fc:	d015      	beq.n	800b62a <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800b5fe:	687b      	ldr	r3, [r7, #4]
 800b600:	f023 0307 	bic.w	r3, r3, #7
 800b604:	3308      	adds	r3, #8
 800b606:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800b608:	687b      	ldr	r3, [r7, #4]
 800b60a:	f003 0307 	and.w	r3, r3, #7
 800b60e:	2b00      	cmp	r3, #0
 800b610:	d00b      	beq.n	800b62a <pvPortMalloc+0x6e>
	__asm volatile
 800b612:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b616:	f383 8811 	msr	BASEPRI, r3
 800b61a:	f3bf 8f6f 	isb	sy
 800b61e:	f3bf 8f4f 	dsb	sy
 800b622:	617b      	str	r3, [r7, #20]
}
 800b624:	bf00      	nop
 800b626:	bf00      	nop
 800b628:	e7fd      	b.n	800b626 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800b62a:	687b      	ldr	r3, [r7, #4]
 800b62c:	2b00      	cmp	r3, #0
 800b62e:	d06f      	beq.n	800b710 <pvPortMalloc+0x154>
 800b630:	4b45      	ldr	r3, [pc, #276]	@ (800b748 <pvPortMalloc+0x18c>)
 800b632:	681b      	ldr	r3, [r3, #0]
 800b634:	687a      	ldr	r2, [r7, #4]
 800b636:	429a      	cmp	r2, r3
 800b638:	d86a      	bhi.n	800b710 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800b63a:	4b44      	ldr	r3, [pc, #272]	@ (800b74c <pvPortMalloc+0x190>)
 800b63c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800b63e:	4b43      	ldr	r3, [pc, #268]	@ (800b74c <pvPortMalloc+0x190>)
 800b640:	681b      	ldr	r3, [r3, #0]
 800b642:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800b644:	e004      	b.n	800b650 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 800b646:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b648:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800b64a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b64c:	681b      	ldr	r3, [r3, #0]
 800b64e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800b650:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b652:	685b      	ldr	r3, [r3, #4]
 800b654:	687a      	ldr	r2, [r7, #4]
 800b656:	429a      	cmp	r2, r3
 800b658:	d903      	bls.n	800b662 <pvPortMalloc+0xa6>
 800b65a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b65c:	681b      	ldr	r3, [r3, #0]
 800b65e:	2b00      	cmp	r3, #0
 800b660:	d1f1      	bne.n	800b646 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800b662:	4b37      	ldr	r3, [pc, #220]	@ (800b740 <pvPortMalloc+0x184>)
 800b664:	681b      	ldr	r3, [r3, #0]
 800b666:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800b668:	429a      	cmp	r2, r3
 800b66a:	d051      	beq.n	800b710 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800b66c:	6a3b      	ldr	r3, [r7, #32]
 800b66e:	681b      	ldr	r3, [r3, #0]
 800b670:	2208      	movs	r2, #8
 800b672:	4413      	add	r3, r2
 800b674:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800b676:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b678:	681a      	ldr	r2, [r3, #0]
 800b67a:	6a3b      	ldr	r3, [r7, #32]
 800b67c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800b67e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b680:	685a      	ldr	r2, [r3, #4]
 800b682:	687b      	ldr	r3, [r7, #4]
 800b684:	1ad2      	subs	r2, r2, r3
 800b686:	2308      	movs	r3, #8
 800b688:	005b      	lsls	r3, r3, #1
 800b68a:	429a      	cmp	r2, r3
 800b68c:	d920      	bls.n	800b6d0 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800b68e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800b690:	687b      	ldr	r3, [r7, #4]
 800b692:	4413      	add	r3, r2
 800b694:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800b696:	69bb      	ldr	r3, [r7, #24]
 800b698:	f003 0307 	and.w	r3, r3, #7
 800b69c:	2b00      	cmp	r3, #0
 800b69e:	d00b      	beq.n	800b6b8 <pvPortMalloc+0xfc>
	__asm volatile
 800b6a0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b6a4:	f383 8811 	msr	BASEPRI, r3
 800b6a8:	f3bf 8f6f 	isb	sy
 800b6ac:	f3bf 8f4f 	dsb	sy
 800b6b0:	613b      	str	r3, [r7, #16]
}
 800b6b2:	bf00      	nop
 800b6b4:	bf00      	nop
 800b6b6:	e7fd      	b.n	800b6b4 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800b6b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b6ba:	685a      	ldr	r2, [r3, #4]
 800b6bc:	687b      	ldr	r3, [r7, #4]
 800b6be:	1ad2      	subs	r2, r2, r3
 800b6c0:	69bb      	ldr	r3, [r7, #24]
 800b6c2:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800b6c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b6c6:	687a      	ldr	r2, [r7, #4]
 800b6c8:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800b6ca:	69b8      	ldr	r0, [r7, #24]
 800b6cc:	f000 f90a 	bl	800b8e4 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800b6d0:	4b1d      	ldr	r3, [pc, #116]	@ (800b748 <pvPortMalloc+0x18c>)
 800b6d2:	681a      	ldr	r2, [r3, #0]
 800b6d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b6d6:	685b      	ldr	r3, [r3, #4]
 800b6d8:	1ad3      	subs	r3, r2, r3
 800b6da:	4a1b      	ldr	r2, [pc, #108]	@ (800b748 <pvPortMalloc+0x18c>)
 800b6dc:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800b6de:	4b1a      	ldr	r3, [pc, #104]	@ (800b748 <pvPortMalloc+0x18c>)
 800b6e0:	681a      	ldr	r2, [r3, #0]
 800b6e2:	4b1b      	ldr	r3, [pc, #108]	@ (800b750 <pvPortMalloc+0x194>)
 800b6e4:	681b      	ldr	r3, [r3, #0]
 800b6e6:	429a      	cmp	r2, r3
 800b6e8:	d203      	bcs.n	800b6f2 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800b6ea:	4b17      	ldr	r3, [pc, #92]	@ (800b748 <pvPortMalloc+0x18c>)
 800b6ec:	681b      	ldr	r3, [r3, #0]
 800b6ee:	4a18      	ldr	r2, [pc, #96]	@ (800b750 <pvPortMalloc+0x194>)
 800b6f0:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800b6f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b6f4:	685a      	ldr	r2, [r3, #4]
 800b6f6:	4b13      	ldr	r3, [pc, #76]	@ (800b744 <pvPortMalloc+0x188>)
 800b6f8:	681b      	ldr	r3, [r3, #0]
 800b6fa:	431a      	orrs	r2, r3
 800b6fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b6fe:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800b700:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b702:	2200      	movs	r2, #0
 800b704:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800b706:	4b13      	ldr	r3, [pc, #76]	@ (800b754 <pvPortMalloc+0x198>)
 800b708:	681b      	ldr	r3, [r3, #0]
 800b70a:	3301      	adds	r3, #1
 800b70c:	4a11      	ldr	r2, [pc, #68]	@ (800b754 <pvPortMalloc+0x198>)
 800b70e:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800b710:	f7fe fcdc 	bl	800a0cc <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800b714:	69fb      	ldr	r3, [r7, #28]
 800b716:	f003 0307 	and.w	r3, r3, #7
 800b71a:	2b00      	cmp	r3, #0
 800b71c:	d00b      	beq.n	800b736 <pvPortMalloc+0x17a>
	__asm volatile
 800b71e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b722:	f383 8811 	msr	BASEPRI, r3
 800b726:	f3bf 8f6f 	isb	sy
 800b72a:	f3bf 8f4f 	dsb	sy
 800b72e:	60fb      	str	r3, [r7, #12]
}
 800b730:	bf00      	nop
 800b732:	bf00      	nop
 800b734:	e7fd      	b.n	800b732 <pvPortMalloc+0x176>
	return pvReturn;
 800b736:	69fb      	ldr	r3, [r7, #28]
}
 800b738:	4618      	mov	r0, r3
 800b73a:	3728      	adds	r7, #40	@ 0x28
 800b73c:	46bd      	mov	sp, r7
 800b73e:	bd80      	pop	{r7, pc}
 800b740:	24004f9c 	.word	0x24004f9c
 800b744:	24004fb0 	.word	0x24004fb0
 800b748:	24004fa0 	.word	0x24004fa0
 800b74c:	24004f94 	.word	0x24004f94
 800b750:	24004fa4 	.word	0x24004fa4
 800b754:	24004fa8 	.word	0x24004fa8

0800b758 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800b758:	b580      	push	{r7, lr}
 800b75a:	b086      	sub	sp, #24
 800b75c:	af00      	add	r7, sp, #0
 800b75e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800b760:	687b      	ldr	r3, [r7, #4]
 800b762:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800b764:	687b      	ldr	r3, [r7, #4]
 800b766:	2b00      	cmp	r3, #0
 800b768:	d04f      	beq.n	800b80a <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800b76a:	2308      	movs	r3, #8
 800b76c:	425b      	negs	r3, r3
 800b76e:	697a      	ldr	r2, [r7, #20]
 800b770:	4413      	add	r3, r2
 800b772:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800b774:	697b      	ldr	r3, [r7, #20]
 800b776:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800b778:	693b      	ldr	r3, [r7, #16]
 800b77a:	685a      	ldr	r2, [r3, #4]
 800b77c:	4b25      	ldr	r3, [pc, #148]	@ (800b814 <vPortFree+0xbc>)
 800b77e:	681b      	ldr	r3, [r3, #0]
 800b780:	4013      	ands	r3, r2
 800b782:	2b00      	cmp	r3, #0
 800b784:	d10b      	bne.n	800b79e <vPortFree+0x46>
	__asm volatile
 800b786:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b78a:	f383 8811 	msr	BASEPRI, r3
 800b78e:	f3bf 8f6f 	isb	sy
 800b792:	f3bf 8f4f 	dsb	sy
 800b796:	60fb      	str	r3, [r7, #12]
}
 800b798:	bf00      	nop
 800b79a:	bf00      	nop
 800b79c:	e7fd      	b.n	800b79a <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800b79e:	693b      	ldr	r3, [r7, #16]
 800b7a0:	681b      	ldr	r3, [r3, #0]
 800b7a2:	2b00      	cmp	r3, #0
 800b7a4:	d00b      	beq.n	800b7be <vPortFree+0x66>
	__asm volatile
 800b7a6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b7aa:	f383 8811 	msr	BASEPRI, r3
 800b7ae:	f3bf 8f6f 	isb	sy
 800b7b2:	f3bf 8f4f 	dsb	sy
 800b7b6:	60bb      	str	r3, [r7, #8]
}
 800b7b8:	bf00      	nop
 800b7ba:	bf00      	nop
 800b7bc:	e7fd      	b.n	800b7ba <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800b7be:	693b      	ldr	r3, [r7, #16]
 800b7c0:	685a      	ldr	r2, [r3, #4]
 800b7c2:	4b14      	ldr	r3, [pc, #80]	@ (800b814 <vPortFree+0xbc>)
 800b7c4:	681b      	ldr	r3, [r3, #0]
 800b7c6:	4013      	ands	r3, r2
 800b7c8:	2b00      	cmp	r3, #0
 800b7ca:	d01e      	beq.n	800b80a <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800b7cc:	693b      	ldr	r3, [r7, #16]
 800b7ce:	681b      	ldr	r3, [r3, #0]
 800b7d0:	2b00      	cmp	r3, #0
 800b7d2:	d11a      	bne.n	800b80a <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800b7d4:	693b      	ldr	r3, [r7, #16]
 800b7d6:	685a      	ldr	r2, [r3, #4]
 800b7d8:	4b0e      	ldr	r3, [pc, #56]	@ (800b814 <vPortFree+0xbc>)
 800b7da:	681b      	ldr	r3, [r3, #0]
 800b7dc:	43db      	mvns	r3, r3
 800b7de:	401a      	ands	r2, r3
 800b7e0:	693b      	ldr	r3, [r7, #16]
 800b7e2:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800b7e4:	f7fe fc64 	bl	800a0b0 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800b7e8:	693b      	ldr	r3, [r7, #16]
 800b7ea:	685a      	ldr	r2, [r3, #4]
 800b7ec:	4b0a      	ldr	r3, [pc, #40]	@ (800b818 <vPortFree+0xc0>)
 800b7ee:	681b      	ldr	r3, [r3, #0]
 800b7f0:	4413      	add	r3, r2
 800b7f2:	4a09      	ldr	r2, [pc, #36]	@ (800b818 <vPortFree+0xc0>)
 800b7f4:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800b7f6:	6938      	ldr	r0, [r7, #16]
 800b7f8:	f000 f874 	bl	800b8e4 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800b7fc:	4b07      	ldr	r3, [pc, #28]	@ (800b81c <vPortFree+0xc4>)
 800b7fe:	681b      	ldr	r3, [r3, #0]
 800b800:	3301      	adds	r3, #1
 800b802:	4a06      	ldr	r2, [pc, #24]	@ (800b81c <vPortFree+0xc4>)
 800b804:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800b806:	f7fe fc61 	bl	800a0cc <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800b80a:	bf00      	nop
 800b80c:	3718      	adds	r7, #24
 800b80e:	46bd      	mov	sp, r7
 800b810:	bd80      	pop	{r7, pc}
 800b812:	bf00      	nop
 800b814:	24004fb0 	.word	0x24004fb0
 800b818:	24004fa0 	.word	0x24004fa0
 800b81c:	24004fac 	.word	0x24004fac

0800b820 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800b820:	b480      	push	{r7}
 800b822:	b085      	sub	sp, #20
 800b824:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800b826:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 800b82a:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800b82c:	4b27      	ldr	r3, [pc, #156]	@ (800b8cc <prvHeapInit+0xac>)
 800b82e:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800b830:	68fb      	ldr	r3, [r7, #12]
 800b832:	f003 0307 	and.w	r3, r3, #7
 800b836:	2b00      	cmp	r3, #0
 800b838:	d00c      	beq.n	800b854 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800b83a:	68fb      	ldr	r3, [r7, #12]
 800b83c:	3307      	adds	r3, #7
 800b83e:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800b840:	68fb      	ldr	r3, [r7, #12]
 800b842:	f023 0307 	bic.w	r3, r3, #7
 800b846:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800b848:	68ba      	ldr	r2, [r7, #8]
 800b84a:	68fb      	ldr	r3, [r7, #12]
 800b84c:	1ad3      	subs	r3, r2, r3
 800b84e:	4a1f      	ldr	r2, [pc, #124]	@ (800b8cc <prvHeapInit+0xac>)
 800b850:	4413      	add	r3, r2
 800b852:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800b854:	68fb      	ldr	r3, [r7, #12]
 800b856:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800b858:	4a1d      	ldr	r2, [pc, #116]	@ (800b8d0 <prvHeapInit+0xb0>)
 800b85a:	687b      	ldr	r3, [r7, #4]
 800b85c:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800b85e:	4b1c      	ldr	r3, [pc, #112]	@ (800b8d0 <prvHeapInit+0xb0>)
 800b860:	2200      	movs	r2, #0
 800b862:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800b864:	687b      	ldr	r3, [r7, #4]
 800b866:	68ba      	ldr	r2, [r7, #8]
 800b868:	4413      	add	r3, r2
 800b86a:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800b86c:	2208      	movs	r2, #8
 800b86e:	68fb      	ldr	r3, [r7, #12]
 800b870:	1a9b      	subs	r3, r3, r2
 800b872:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800b874:	68fb      	ldr	r3, [r7, #12]
 800b876:	f023 0307 	bic.w	r3, r3, #7
 800b87a:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800b87c:	68fb      	ldr	r3, [r7, #12]
 800b87e:	4a15      	ldr	r2, [pc, #84]	@ (800b8d4 <prvHeapInit+0xb4>)
 800b880:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800b882:	4b14      	ldr	r3, [pc, #80]	@ (800b8d4 <prvHeapInit+0xb4>)
 800b884:	681b      	ldr	r3, [r3, #0]
 800b886:	2200      	movs	r2, #0
 800b888:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800b88a:	4b12      	ldr	r3, [pc, #72]	@ (800b8d4 <prvHeapInit+0xb4>)
 800b88c:	681b      	ldr	r3, [r3, #0]
 800b88e:	2200      	movs	r2, #0
 800b890:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800b892:	687b      	ldr	r3, [r7, #4]
 800b894:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800b896:	683b      	ldr	r3, [r7, #0]
 800b898:	68fa      	ldr	r2, [r7, #12]
 800b89a:	1ad2      	subs	r2, r2, r3
 800b89c:	683b      	ldr	r3, [r7, #0]
 800b89e:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800b8a0:	4b0c      	ldr	r3, [pc, #48]	@ (800b8d4 <prvHeapInit+0xb4>)
 800b8a2:	681a      	ldr	r2, [r3, #0]
 800b8a4:	683b      	ldr	r3, [r7, #0]
 800b8a6:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800b8a8:	683b      	ldr	r3, [r7, #0]
 800b8aa:	685b      	ldr	r3, [r3, #4]
 800b8ac:	4a0a      	ldr	r2, [pc, #40]	@ (800b8d8 <prvHeapInit+0xb8>)
 800b8ae:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800b8b0:	683b      	ldr	r3, [r7, #0]
 800b8b2:	685b      	ldr	r3, [r3, #4]
 800b8b4:	4a09      	ldr	r2, [pc, #36]	@ (800b8dc <prvHeapInit+0xbc>)
 800b8b6:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800b8b8:	4b09      	ldr	r3, [pc, #36]	@ (800b8e0 <prvHeapInit+0xc0>)
 800b8ba:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800b8be:	601a      	str	r2, [r3, #0]
}
 800b8c0:	bf00      	nop
 800b8c2:	3714      	adds	r7, #20
 800b8c4:	46bd      	mov	sp, r7
 800b8c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8ca:	4770      	bx	lr
 800b8cc:	24001394 	.word	0x24001394
 800b8d0:	24004f94 	.word	0x24004f94
 800b8d4:	24004f9c 	.word	0x24004f9c
 800b8d8:	24004fa4 	.word	0x24004fa4
 800b8dc:	24004fa0 	.word	0x24004fa0
 800b8e0:	24004fb0 	.word	0x24004fb0

0800b8e4 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800b8e4:	b480      	push	{r7}
 800b8e6:	b085      	sub	sp, #20
 800b8e8:	af00      	add	r7, sp, #0
 800b8ea:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800b8ec:	4b28      	ldr	r3, [pc, #160]	@ (800b990 <prvInsertBlockIntoFreeList+0xac>)
 800b8ee:	60fb      	str	r3, [r7, #12]
 800b8f0:	e002      	b.n	800b8f8 <prvInsertBlockIntoFreeList+0x14>
 800b8f2:	68fb      	ldr	r3, [r7, #12]
 800b8f4:	681b      	ldr	r3, [r3, #0]
 800b8f6:	60fb      	str	r3, [r7, #12]
 800b8f8:	68fb      	ldr	r3, [r7, #12]
 800b8fa:	681b      	ldr	r3, [r3, #0]
 800b8fc:	687a      	ldr	r2, [r7, #4]
 800b8fe:	429a      	cmp	r2, r3
 800b900:	d8f7      	bhi.n	800b8f2 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800b902:	68fb      	ldr	r3, [r7, #12]
 800b904:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800b906:	68fb      	ldr	r3, [r7, #12]
 800b908:	685b      	ldr	r3, [r3, #4]
 800b90a:	68ba      	ldr	r2, [r7, #8]
 800b90c:	4413      	add	r3, r2
 800b90e:	687a      	ldr	r2, [r7, #4]
 800b910:	429a      	cmp	r2, r3
 800b912:	d108      	bne.n	800b926 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800b914:	68fb      	ldr	r3, [r7, #12]
 800b916:	685a      	ldr	r2, [r3, #4]
 800b918:	687b      	ldr	r3, [r7, #4]
 800b91a:	685b      	ldr	r3, [r3, #4]
 800b91c:	441a      	add	r2, r3
 800b91e:	68fb      	ldr	r3, [r7, #12]
 800b920:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800b922:	68fb      	ldr	r3, [r7, #12]
 800b924:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800b926:	687b      	ldr	r3, [r7, #4]
 800b928:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800b92a:	687b      	ldr	r3, [r7, #4]
 800b92c:	685b      	ldr	r3, [r3, #4]
 800b92e:	68ba      	ldr	r2, [r7, #8]
 800b930:	441a      	add	r2, r3
 800b932:	68fb      	ldr	r3, [r7, #12]
 800b934:	681b      	ldr	r3, [r3, #0]
 800b936:	429a      	cmp	r2, r3
 800b938:	d118      	bne.n	800b96c <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800b93a:	68fb      	ldr	r3, [r7, #12]
 800b93c:	681a      	ldr	r2, [r3, #0]
 800b93e:	4b15      	ldr	r3, [pc, #84]	@ (800b994 <prvInsertBlockIntoFreeList+0xb0>)
 800b940:	681b      	ldr	r3, [r3, #0]
 800b942:	429a      	cmp	r2, r3
 800b944:	d00d      	beq.n	800b962 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800b946:	687b      	ldr	r3, [r7, #4]
 800b948:	685a      	ldr	r2, [r3, #4]
 800b94a:	68fb      	ldr	r3, [r7, #12]
 800b94c:	681b      	ldr	r3, [r3, #0]
 800b94e:	685b      	ldr	r3, [r3, #4]
 800b950:	441a      	add	r2, r3
 800b952:	687b      	ldr	r3, [r7, #4]
 800b954:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800b956:	68fb      	ldr	r3, [r7, #12]
 800b958:	681b      	ldr	r3, [r3, #0]
 800b95a:	681a      	ldr	r2, [r3, #0]
 800b95c:	687b      	ldr	r3, [r7, #4]
 800b95e:	601a      	str	r2, [r3, #0]
 800b960:	e008      	b.n	800b974 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800b962:	4b0c      	ldr	r3, [pc, #48]	@ (800b994 <prvInsertBlockIntoFreeList+0xb0>)
 800b964:	681a      	ldr	r2, [r3, #0]
 800b966:	687b      	ldr	r3, [r7, #4]
 800b968:	601a      	str	r2, [r3, #0]
 800b96a:	e003      	b.n	800b974 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800b96c:	68fb      	ldr	r3, [r7, #12]
 800b96e:	681a      	ldr	r2, [r3, #0]
 800b970:	687b      	ldr	r3, [r7, #4]
 800b972:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800b974:	68fa      	ldr	r2, [r7, #12]
 800b976:	687b      	ldr	r3, [r7, #4]
 800b978:	429a      	cmp	r2, r3
 800b97a:	d002      	beq.n	800b982 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800b97c:	68fb      	ldr	r3, [r7, #12]
 800b97e:	687a      	ldr	r2, [r7, #4]
 800b980:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800b982:	bf00      	nop
 800b984:	3714      	adds	r7, #20
 800b986:	46bd      	mov	sp, r7
 800b988:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b98c:	4770      	bx	lr
 800b98e:	bf00      	nop
 800b990:	24004f94 	.word	0x24004f94
 800b994:	24004f9c 	.word	0x24004f9c

0800b998 <memset>:
 800b998:	4402      	add	r2, r0
 800b99a:	4603      	mov	r3, r0
 800b99c:	4293      	cmp	r3, r2
 800b99e:	d100      	bne.n	800b9a2 <memset+0xa>
 800b9a0:	4770      	bx	lr
 800b9a2:	f803 1b01 	strb.w	r1, [r3], #1
 800b9a6:	e7f9      	b.n	800b99c <memset+0x4>

0800b9a8 <_reclaim_reent>:
 800b9a8:	4b29      	ldr	r3, [pc, #164]	@ (800ba50 <_reclaim_reent+0xa8>)
 800b9aa:	681b      	ldr	r3, [r3, #0]
 800b9ac:	4283      	cmp	r3, r0
 800b9ae:	b570      	push	{r4, r5, r6, lr}
 800b9b0:	4604      	mov	r4, r0
 800b9b2:	d04b      	beq.n	800ba4c <_reclaim_reent+0xa4>
 800b9b4:	69c3      	ldr	r3, [r0, #28]
 800b9b6:	b1ab      	cbz	r3, 800b9e4 <_reclaim_reent+0x3c>
 800b9b8:	68db      	ldr	r3, [r3, #12]
 800b9ba:	b16b      	cbz	r3, 800b9d8 <_reclaim_reent+0x30>
 800b9bc:	2500      	movs	r5, #0
 800b9be:	69e3      	ldr	r3, [r4, #28]
 800b9c0:	68db      	ldr	r3, [r3, #12]
 800b9c2:	5959      	ldr	r1, [r3, r5]
 800b9c4:	2900      	cmp	r1, #0
 800b9c6:	d13b      	bne.n	800ba40 <_reclaim_reent+0x98>
 800b9c8:	3504      	adds	r5, #4
 800b9ca:	2d80      	cmp	r5, #128	@ 0x80
 800b9cc:	d1f7      	bne.n	800b9be <_reclaim_reent+0x16>
 800b9ce:	69e3      	ldr	r3, [r4, #28]
 800b9d0:	4620      	mov	r0, r4
 800b9d2:	68d9      	ldr	r1, [r3, #12]
 800b9d4:	f000 f872 	bl	800babc <_free_r>
 800b9d8:	69e3      	ldr	r3, [r4, #28]
 800b9da:	6819      	ldr	r1, [r3, #0]
 800b9dc:	b111      	cbz	r1, 800b9e4 <_reclaim_reent+0x3c>
 800b9de:	4620      	mov	r0, r4
 800b9e0:	f000 f86c 	bl	800babc <_free_r>
 800b9e4:	6961      	ldr	r1, [r4, #20]
 800b9e6:	b111      	cbz	r1, 800b9ee <_reclaim_reent+0x46>
 800b9e8:	4620      	mov	r0, r4
 800b9ea:	f000 f867 	bl	800babc <_free_r>
 800b9ee:	69e1      	ldr	r1, [r4, #28]
 800b9f0:	b111      	cbz	r1, 800b9f8 <_reclaim_reent+0x50>
 800b9f2:	4620      	mov	r0, r4
 800b9f4:	f000 f862 	bl	800babc <_free_r>
 800b9f8:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 800b9fa:	b111      	cbz	r1, 800ba02 <_reclaim_reent+0x5a>
 800b9fc:	4620      	mov	r0, r4
 800b9fe:	f000 f85d 	bl	800babc <_free_r>
 800ba02:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800ba04:	b111      	cbz	r1, 800ba0c <_reclaim_reent+0x64>
 800ba06:	4620      	mov	r0, r4
 800ba08:	f000 f858 	bl	800babc <_free_r>
 800ba0c:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 800ba0e:	b111      	cbz	r1, 800ba16 <_reclaim_reent+0x6e>
 800ba10:	4620      	mov	r0, r4
 800ba12:	f000 f853 	bl	800babc <_free_r>
 800ba16:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 800ba18:	b111      	cbz	r1, 800ba20 <_reclaim_reent+0x78>
 800ba1a:	4620      	mov	r0, r4
 800ba1c:	f000 f84e 	bl	800babc <_free_r>
 800ba20:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 800ba22:	b111      	cbz	r1, 800ba2a <_reclaim_reent+0x82>
 800ba24:	4620      	mov	r0, r4
 800ba26:	f000 f849 	bl	800babc <_free_r>
 800ba2a:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 800ba2c:	b111      	cbz	r1, 800ba34 <_reclaim_reent+0x8c>
 800ba2e:	4620      	mov	r0, r4
 800ba30:	f000 f844 	bl	800babc <_free_r>
 800ba34:	6a23      	ldr	r3, [r4, #32]
 800ba36:	b14b      	cbz	r3, 800ba4c <_reclaim_reent+0xa4>
 800ba38:	4620      	mov	r0, r4
 800ba3a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800ba3e:	4718      	bx	r3
 800ba40:	680e      	ldr	r6, [r1, #0]
 800ba42:	4620      	mov	r0, r4
 800ba44:	f000 f83a 	bl	800babc <_free_r>
 800ba48:	4631      	mov	r1, r6
 800ba4a:	e7bb      	b.n	800b9c4 <_reclaim_reent+0x1c>
 800ba4c:	bd70      	pop	{r4, r5, r6, pc}
 800ba4e:	bf00      	nop
 800ba50:	24000014 	.word	0x24000014

0800ba54 <__libc_init_array>:
 800ba54:	b570      	push	{r4, r5, r6, lr}
 800ba56:	4d0d      	ldr	r5, [pc, #52]	@ (800ba8c <__libc_init_array+0x38>)
 800ba58:	4c0d      	ldr	r4, [pc, #52]	@ (800ba90 <__libc_init_array+0x3c>)
 800ba5a:	1b64      	subs	r4, r4, r5
 800ba5c:	10a4      	asrs	r4, r4, #2
 800ba5e:	2600      	movs	r6, #0
 800ba60:	42a6      	cmp	r6, r4
 800ba62:	d109      	bne.n	800ba78 <__libc_init_array+0x24>
 800ba64:	4d0b      	ldr	r5, [pc, #44]	@ (800ba94 <__libc_init_array+0x40>)
 800ba66:	4c0c      	ldr	r4, [pc, #48]	@ (800ba98 <__libc_init_array+0x44>)
 800ba68:	f000 f87e 	bl	800bb68 <_init>
 800ba6c:	1b64      	subs	r4, r4, r5
 800ba6e:	10a4      	asrs	r4, r4, #2
 800ba70:	2600      	movs	r6, #0
 800ba72:	42a6      	cmp	r6, r4
 800ba74:	d105      	bne.n	800ba82 <__libc_init_array+0x2e>
 800ba76:	bd70      	pop	{r4, r5, r6, pc}
 800ba78:	f855 3b04 	ldr.w	r3, [r5], #4
 800ba7c:	4798      	blx	r3
 800ba7e:	3601      	adds	r6, #1
 800ba80:	e7ee      	b.n	800ba60 <__libc_init_array+0xc>
 800ba82:	f855 3b04 	ldr.w	r3, [r5], #4
 800ba86:	4798      	blx	r3
 800ba88:	3601      	adds	r6, #1
 800ba8a:	e7f2      	b.n	800ba72 <__libc_init_array+0x1e>
 800ba8c:	0800bc08 	.word	0x0800bc08
 800ba90:	0800bc08 	.word	0x0800bc08
 800ba94:	0800bc08 	.word	0x0800bc08
 800ba98:	0800bc0c 	.word	0x0800bc0c

0800ba9c <__retarget_lock_acquire_recursive>:
 800ba9c:	4770      	bx	lr

0800ba9e <__retarget_lock_release_recursive>:
 800ba9e:	4770      	bx	lr

0800baa0 <memcpy>:
 800baa0:	440a      	add	r2, r1
 800baa2:	4291      	cmp	r1, r2
 800baa4:	f100 33ff 	add.w	r3, r0, #4294967295
 800baa8:	d100      	bne.n	800baac <memcpy+0xc>
 800baaa:	4770      	bx	lr
 800baac:	b510      	push	{r4, lr}
 800baae:	f811 4b01 	ldrb.w	r4, [r1], #1
 800bab2:	f803 4f01 	strb.w	r4, [r3, #1]!
 800bab6:	4291      	cmp	r1, r2
 800bab8:	d1f9      	bne.n	800baae <memcpy+0xe>
 800baba:	bd10      	pop	{r4, pc}

0800babc <_free_r>:
 800babc:	b538      	push	{r3, r4, r5, lr}
 800babe:	4605      	mov	r5, r0
 800bac0:	2900      	cmp	r1, #0
 800bac2:	d041      	beq.n	800bb48 <_free_r+0x8c>
 800bac4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800bac8:	1f0c      	subs	r4, r1, #4
 800baca:	2b00      	cmp	r3, #0
 800bacc:	bfb8      	it	lt
 800bace:	18e4      	addlt	r4, r4, r3
 800bad0:	f000 f83e 	bl	800bb50 <__malloc_lock>
 800bad4:	4a1d      	ldr	r2, [pc, #116]	@ (800bb4c <_free_r+0x90>)
 800bad6:	6813      	ldr	r3, [r2, #0]
 800bad8:	b933      	cbnz	r3, 800bae8 <_free_r+0x2c>
 800bada:	6063      	str	r3, [r4, #4]
 800badc:	6014      	str	r4, [r2, #0]
 800bade:	4628      	mov	r0, r5
 800bae0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800bae4:	f000 b83a 	b.w	800bb5c <__malloc_unlock>
 800bae8:	42a3      	cmp	r3, r4
 800baea:	d908      	bls.n	800bafe <_free_r+0x42>
 800baec:	6820      	ldr	r0, [r4, #0]
 800baee:	1821      	adds	r1, r4, r0
 800baf0:	428b      	cmp	r3, r1
 800baf2:	bf01      	itttt	eq
 800baf4:	6819      	ldreq	r1, [r3, #0]
 800baf6:	685b      	ldreq	r3, [r3, #4]
 800baf8:	1809      	addeq	r1, r1, r0
 800bafa:	6021      	streq	r1, [r4, #0]
 800bafc:	e7ed      	b.n	800bada <_free_r+0x1e>
 800bafe:	461a      	mov	r2, r3
 800bb00:	685b      	ldr	r3, [r3, #4]
 800bb02:	b10b      	cbz	r3, 800bb08 <_free_r+0x4c>
 800bb04:	42a3      	cmp	r3, r4
 800bb06:	d9fa      	bls.n	800bafe <_free_r+0x42>
 800bb08:	6811      	ldr	r1, [r2, #0]
 800bb0a:	1850      	adds	r0, r2, r1
 800bb0c:	42a0      	cmp	r0, r4
 800bb0e:	d10b      	bne.n	800bb28 <_free_r+0x6c>
 800bb10:	6820      	ldr	r0, [r4, #0]
 800bb12:	4401      	add	r1, r0
 800bb14:	1850      	adds	r0, r2, r1
 800bb16:	4283      	cmp	r3, r0
 800bb18:	6011      	str	r1, [r2, #0]
 800bb1a:	d1e0      	bne.n	800bade <_free_r+0x22>
 800bb1c:	6818      	ldr	r0, [r3, #0]
 800bb1e:	685b      	ldr	r3, [r3, #4]
 800bb20:	6053      	str	r3, [r2, #4]
 800bb22:	4408      	add	r0, r1
 800bb24:	6010      	str	r0, [r2, #0]
 800bb26:	e7da      	b.n	800bade <_free_r+0x22>
 800bb28:	d902      	bls.n	800bb30 <_free_r+0x74>
 800bb2a:	230c      	movs	r3, #12
 800bb2c:	602b      	str	r3, [r5, #0]
 800bb2e:	e7d6      	b.n	800bade <_free_r+0x22>
 800bb30:	6820      	ldr	r0, [r4, #0]
 800bb32:	1821      	adds	r1, r4, r0
 800bb34:	428b      	cmp	r3, r1
 800bb36:	bf04      	itt	eq
 800bb38:	6819      	ldreq	r1, [r3, #0]
 800bb3a:	685b      	ldreq	r3, [r3, #4]
 800bb3c:	6063      	str	r3, [r4, #4]
 800bb3e:	bf04      	itt	eq
 800bb40:	1809      	addeq	r1, r1, r0
 800bb42:	6021      	streq	r1, [r4, #0]
 800bb44:	6054      	str	r4, [r2, #4]
 800bb46:	e7ca      	b.n	800bade <_free_r+0x22>
 800bb48:	bd38      	pop	{r3, r4, r5, pc}
 800bb4a:	bf00      	nop
 800bb4c:	240050f0 	.word	0x240050f0

0800bb50 <__malloc_lock>:
 800bb50:	4801      	ldr	r0, [pc, #4]	@ (800bb58 <__malloc_lock+0x8>)
 800bb52:	f7ff bfa3 	b.w	800ba9c <__retarget_lock_acquire_recursive>
 800bb56:	bf00      	nop
 800bb58:	240050ec 	.word	0x240050ec

0800bb5c <__malloc_unlock>:
 800bb5c:	4801      	ldr	r0, [pc, #4]	@ (800bb64 <__malloc_unlock+0x8>)
 800bb5e:	f7ff bf9e 	b.w	800ba9e <__retarget_lock_release_recursive>
 800bb62:	bf00      	nop
 800bb64:	240050ec 	.word	0x240050ec

0800bb68 <_init>:
 800bb68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bb6a:	bf00      	nop
 800bb6c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bb6e:	bc08      	pop	{r3}
 800bb70:	469e      	mov	lr, r3
 800bb72:	4770      	bx	lr

0800bb74 <_fini>:
 800bb74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bb76:	bf00      	nop
 800bb78:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bb7a:	bc08      	pop	{r3}
 800bb7c:	469e      	mov	lr, r3
 800bb7e:	4770      	bx	lr
