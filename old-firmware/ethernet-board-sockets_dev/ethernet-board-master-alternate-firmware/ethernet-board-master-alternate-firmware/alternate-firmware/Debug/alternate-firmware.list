
alternate-firmware.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08020000  08020000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00019764  08020190  08020190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00003e9c  080398f4  080398f4  000298f4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0803d790  0803d790  00030098  2**0
                  CONTENTS
  4 .ARM          00000008  0803d790  0803d790  0002d790  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0803d798  0803d798  00030098  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0803d798  0803d798  0002d798  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0803d79c  0803d79c  0002d79c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000098  20000000  0803d7a0  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00030098  2**0
                  CONTENTS
 10 .bss          0000efd8  20000098  20000098  00030098  2**2
                  ALLOC
 11 ._user_heap_stack 00010400  2000f070  2000f070  00030098  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00030098  2**0
                  CONTENTS, READONLY
 13 .debug_info   000387bb  00000000  00000000  000300c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00008421  00000000  00000000  00068883  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00002680  00000000  00000000  00070ca8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 000024d8  00000000  00000000  00073328  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000360a8  00000000  00000000  00075800  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0003bfe5  00000000  00000000  000ab8a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000f6e77  00000000  00000000  000e788d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  001de704  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000a71c  00000000  00000000  001de754  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08020190 <__do_global_dtors_aux>:
 8020190:	b510      	push	{r4, lr}
 8020192:	4c05      	ldr	r4, [pc, #20]	; (80201a8 <__do_global_dtors_aux+0x18>)
 8020194:	7823      	ldrb	r3, [r4, #0]
 8020196:	b933      	cbnz	r3, 80201a6 <__do_global_dtors_aux+0x16>
 8020198:	4b04      	ldr	r3, [pc, #16]	; (80201ac <__do_global_dtors_aux+0x1c>)
 802019a:	b113      	cbz	r3, 80201a2 <__do_global_dtors_aux+0x12>
 802019c:	4804      	ldr	r0, [pc, #16]	; (80201b0 <__do_global_dtors_aux+0x20>)
 802019e:	f3af 8000 	nop.w
 80201a2:	2301      	movs	r3, #1
 80201a4:	7023      	strb	r3, [r4, #0]
 80201a6:	bd10      	pop	{r4, pc}
 80201a8:	20000098 	.word	0x20000098
 80201ac:	00000000 	.word	0x00000000
 80201b0:	080398dc 	.word	0x080398dc

080201b4 <frame_dummy>:
 80201b4:	b508      	push	{r3, lr}
 80201b6:	4b03      	ldr	r3, [pc, #12]	; (80201c4 <frame_dummy+0x10>)
 80201b8:	b11b      	cbz	r3, 80201c2 <frame_dummy+0xe>
 80201ba:	4903      	ldr	r1, [pc, #12]	; (80201c8 <frame_dummy+0x14>)
 80201bc:	4803      	ldr	r0, [pc, #12]	; (80201cc <frame_dummy+0x18>)
 80201be:	f3af 8000 	nop.w
 80201c2:	bd08      	pop	{r3, pc}
 80201c4:	00000000 	.word	0x00000000
 80201c8:	2000009c 	.word	0x2000009c
 80201cc:	080398dc 	.word	0x080398dc

080201d0 <strlen>:
 80201d0:	4603      	mov	r3, r0
 80201d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80201d6:	2a00      	cmp	r2, #0
 80201d8:	d1fb      	bne.n	80201d2 <strlen+0x2>
 80201da:	1a18      	subs	r0, r3, r0
 80201dc:	3801      	subs	r0, #1
 80201de:	4770      	bx	lr

080201e0 <memchr>:
 80201e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80201e4:	2a10      	cmp	r2, #16
 80201e6:	db2b      	blt.n	8020240 <memchr+0x60>
 80201e8:	f010 0f07 	tst.w	r0, #7
 80201ec:	d008      	beq.n	8020200 <memchr+0x20>
 80201ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80201f2:	3a01      	subs	r2, #1
 80201f4:	428b      	cmp	r3, r1
 80201f6:	d02d      	beq.n	8020254 <memchr+0x74>
 80201f8:	f010 0f07 	tst.w	r0, #7
 80201fc:	b342      	cbz	r2, 8020250 <memchr+0x70>
 80201fe:	d1f6      	bne.n	80201ee <memchr+0xe>
 8020200:	b4f0      	push	{r4, r5, r6, r7}
 8020202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8020206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 802020a:	f022 0407 	bic.w	r4, r2, #7
 802020e:	f07f 0700 	mvns.w	r7, #0
 8020212:	2300      	movs	r3, #0
 8020214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8020218:	3c08      	subs	r4, #8
 802021a:	ea85 0501 	eor.w	r5, r5, r1
 802021e:	ea86 0601 	eor.w	r6, r6, r1
 8020222:	fa85 f547 	uadd8	r5, r5, r7
 8020226:	faa3 f587 	sel	r5, r3, r7
 802022a:	fa86 f647 	uadd8	r6, r6, r7
 802022e:	faa5 f687 	sel	r6, r5, r7
 8020232:	b98e      	cbnz	r6, 8020258 <memchr+0x78>
 8020234:	d1ee      	bne.n	8020214 <memchr+0x34>
 8020236:	bcf0      	pop	{r4, r5, r6, r7}
 8020238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 802023c:	f002 0207 	and.w	r2, r2, #7
 8020240:	b132      	cbz	r2, 8020250 <memchr+0x70>
 8020242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8020246:	3a01      	subs	r2, #1
 8020248:	ea83 0301 	eor.w	r3, r3, r1
 802024c:	b113      	cbz	r3, 8020254 <memchr+0x74>
 802024e:	d1f8      	bne.n	8020242 <memchr+0x62>
 8020250:	2000      	movs	r0, #0
 8020252:	4770      	bx	lr
 8020254:	3801      	subs	r0, #1
 8020256:	4770      	bx	lr
 8020258:	2d00      	cmp	r5, #0
 802025a:	bf06      	itte	eq
 802025c:	4635      	moveq	r5, r6
 802025e:	3803      	subeq	r0, #3
 8020260:	3807      	subne	r0, #7
 8020262:	f015 0f01 	tst.w	r5, #1
 8020266:	d107      	bne.n	8020278 <memchr+0x98>
 8020268:	3001      	adds	r0, #1
 802026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 802026e:	bf02      	ittt	eq
 8020270:	3001      	addeq	r0, #1
 8020272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8020276:	3001      	addeq	r0, #1
 8020278:	bcf0      	pop	{r4, r5, r6, r7}
 802027a:	3801      	subs	r0, #1
 802027c:	4770      	bx	lr
 802027e:	bf00      	nop

08020280 <__aeabi_uldivmod>:
 8020280:	b953      	cbnz	r3, 8020298 <__aeabi_uldivmod+0x18>
 8020282:	b94a      	cbnz	r2, 8020298 <__aeabi_uldivmod+0x18>
 8020284:	2900      	cmp	r1, #0
 8020286:	bf08      	it	eq
 8020288:	2800      	cmpeq	r0, #0
 802028a:	bf1c      	itt	ne
 802028c:	f04f 31ff 	movne.w	r1, #4294967295
 8020290:	f04f 30ff 	movne.w	r0, #4294967295
 8020294:	f000 b974 	b.w	8020580 <__aeabi_idiv0>
 8020298:	f1ad 0c08 	sub.w	ip, sp, #8
 802029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80202a0:	f000 f806 	bl	80202b0 <__udivmoddi4>
 80202a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80202a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80202ac:	b004      	add	sp, #16
 80202ae:	4770      	bx	lr

080202b0 <__udivmoddi4>:
 80202b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80202b4:	9d08      	ldr	r5, [sp, #32]
 80202b6:	4604      	mov	r4, r0
 80202b8:	468e      	mov	lr, r1
 80202ba:	2b00      	cmp	r3, #0
 80202bc:	d14d      	bne.n	802035a <__udivmoddi4+0xaa>
 80202be:	428a      	cmp	r2, r1
 80202c0:	4694      	mov	ip, r2
 80202c2:	d969      	bls.n	8020398 <__udivmoddi4+0xe8>
 80202c4:	fab2 f282 	clz	r2, r2
 80202c8:	b152      	cbz	r2, 80202e0 <__udivmoddi4+0x30>
 80202ca:	fa01 f302 	lsl.w	r3, r1, r2
 80202ce:	f1c2 0120 	rsb	r1, r2, #32
 80202d2:	fa20 f101 	lsr.w	r1, r0, r1
 80202d6:	fa0c fc02 	lsl.w	ip, ip, r2
 80202da:	ea41 0e03 	orr.w	lr, r1, r3
 80202de:	4094      	lsls	r4, r2
 80202e0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80202e4:	0c21      	lsrs	r1, r4, #16
 80202e6:	fbbe f6f8 	udiv	r6, lr, r8
 80202ea:	fa1f f78c 	uxth.w	r7, ip
 80202ee:	fb08 e316 	mls	r3, r8, r6, lr
 80202f2:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80202f6:	fb06 f107 	mul.w	r1, r6, r7
 80202fa:	4299      	cmp	r1, r3
 80202fc:	d90a      	bls.n	8020314 <__udivmoddi4+0x64>
 80202fe:	eb1c 0303 	adds.w	r3, ip, r3
 8020302:	f106 30ff 	add.w	r0, r6, #4294967295
 8020306:	f080 811f 	bcs.w	8020548 <__udivmoddi4+0x298>
 802030a:	4299      	cmp	r1, r3
 802030c:	f240 811c 	bls.w	8020548 <__udivmoddi4+0x298>
 8020310:	3e02      	subs	r6, #2
 8020312:	4463      	add	r3, ip
 8020314:	1a5b      	subs	r3, r3, r1
 8020316:	b2a4      	uxth	r4, r4
 8020318:	fbb3 f0f8 	udiv	r0, r3, r8
 802031c:	fb08 3310 	mls	r3, r8, r0, r3
 8020320:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8020324:	fb00 f707 	mul.w	r7, r0, r7
 8020328:	42a7      	cmp	r7, r4
 802032a:	d90a      	bls.n	8020342 <__udivmoddi4+0x92>
 802032c:	eb1c 0404 	adds.w	r4, ip, r4
 8020330:	f100 33ff 	add.w	r3, r0, #4294967295
 8020334:	f080 810a 	bcs.w	802054c <__udivmoddi4+0x29c>
 8020338:	42a7      	cmp	r7, r4
 802033a:	f240 8107 	bls.w	802054c <__udivmoddi4+0x29c>
 802033e:	4464      	add	r4, ip
 8020340:	3802      	subs	r0, #2
 8020342:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8020346:	1be4      	subs	r4, r4, r7
 8020348:	2600      	movs	r6, #0
 802034a:	b11d      	cbz	r5, 8020354 <__udivmoddi4+0xa4>
 802034c:	40d4      	lsrs	r4, r2
 802034e:	2300      	movs	r3, #0
 8020350:	e9c5 4300 	strd	r4, r3, [r5]
 8020354:	4631      	mov	r1, r6
 8020356:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 802035a:	428b      	cmp	r3, r1
 802035c:	d909      	bls.n	8020372 <__udivmoddi4+0xc2>
 802035e:	2d00      	cmp	r5, #0
 8020360:	f000 80ef 	beq.w	8020542 <__udivmoddi4+0x292>
 8020364:	2600      	movs	r6, #0
 8020366:	e9c5 0100 	strd	r0, r1, [r5]
 802036a:	4630      	mov	r0, r6
 802036c:	4631      	mov	r1, r6
 802036e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8020372:	fab3 f683 	clz	r6, r3
 8020376:	2e00      	cmp	r6, #0
 8020378:	d14a      	bne.n	8020410 <__udivmoddi4+0x160>
 802037a:	428b      	cmp	r3, r1
 802037c:	d302      	bcc.n	8020384 <__udivmoddi4+0xd4>
 802037e:	4282      	cmp	r2, r0
 8020380:	f200 80f9 	bhi.w	8020576 <__udivmoddi4+0x2c6>
 8020384:	1a84      	subs	r4, r0, r2
 8020386:	eb61 0303 	sbc.w	r3, r1, r3
 802038a:	2001      	movs	r0, #1
 802038c:	469e      	mov	lr, r3
 802038e:	2d00      	cmp	r5, #0
 8020390:	d0e0      	beq.n	8020354 <__udivmoddi4+0xa4>
 8020392:	e9c5 4e00 	strd	r4, lr, [r5]
 8020396:	e7dd      	b.n	8020354 <__udivmoddi4+0xa4>
 8020398:	b902      	cbnz	r2, 802039c <__udivmoddi4+0xec>
 802039a:	deff      	udf	#255	; 0xff
 802039c:	fab2 f282 	clz	r2, r2
 80203a0:	2a00      	cmp	r2, #0
 80203a2:	f040 8092 	bne.w	80204ca <__udivmoddi4+0x21a>
 80203a6:	eba1 010c 	sub.w	r1, r1, ip
 80203aa:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80203ae:	fa1f fe8c 	uxth.w	lr, ip
 80203b2:	2601      	movs	r6, #1
 80203b4:	0c20      	lsrs	r0, r4, #16
 80203b6:	fbb1 f3f7 	udiv	r3, r1, r7
 80203ba:	fb07 1113 	mls	r1, r7, r3, r1
 80203be:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80203c2:	fb0e f003 	mul.w	r0, lr, r3
 80203c6:	4288      	cmp	r0, r1
 80203c8:	d908      	bls.n	80203dc <__udivmoddi4+0x12c>
 80203ca:	eb1c 0101 	adds.w	r1, ip, r1
 80203ce:	f103 38ff 	add.w	r8, r3, #4294967295
 80203d2:	d202      	bcs.n	80203da <__udivmoddi4+0x12a>
 80203d4:	4288      	cmp	r0, r1
 80203d6:	f200 80cb 	bhi.w	8020570 <__udivmoddi4+0x2c0>
 80203da:	4643      	mov	r3, r8
 80203dc:	1a09      	subs	r1, r1, r0
 80203de:	b2a4      	uxth	r4, r4
 80203e0:	fbb1 f0f7 	udiv	r0, r1, r7
 80203e4:	fb07 1110 	mls	r1, r7, r0, r1
 80203e8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80203ec:	fb0e fe00 	mul.w	lr, lr, r0
 80203f0:	45a6      	cmp	lr, r4
 80203f2:	d908      	bls.n	8020406 <__udivmoddi4+0x156>
 80203f4:	eb1c 0404 	adds.w	r4, ip, r4
 80203f8:	f100 31ff 	add.w	r1, r0, #4294967295
 80203fc:	d202      	bcs.n	8020404 <__udivmoddi4+0x154>
 80203fe:	45a6      	cmp	lr, r4
 8020400:	f200 80bb 	bhi.w	802057a <__udivmoddi4+0x2ca>
 8020404:	4608      	mov	r0, r1
 8020406:	eba4 040e 	sub.w	r4, r4, lr
 802040a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 802040e:	e79c      	b.n	802034a <__udivmoddi4+0x9a>
 8020410:	f1c6 0720 	rsb	r7, r6, #32
 8020414:	40b3      	lsls	r3, r6
 8020416:	fa22 fc07 	lsr.w	ip, r2, r7
 802041a:	ea4c 0c03 	orr.w	ip, ip, r3
 802041e:	fa20 f407 	lsr.w	r4, r0, r7
 8020422:	fa01 f306 	lsl.w	r3, r1, r6
 8020426:	431c      	orrs	r4, r3
 8020428:	40f9      	lsrs	r1, r7
 802042a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 802042e:	fa00 f306 	lsl.w	r3, r0, r6
 8020432:	fbb1 f8f9 	udiv	r8, r1, r9
 8020436:	0c20      	lsrs	r0, r4, #16
 8020438:	fa1f fe8c 	uxth.w	lr, ip
 802043c:	fb09 1118 	mls	r1, r9, r8, r1
 8020440:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8020444:	fb08 f00e 	mul.w	r0, r8, lr
 8020448:	4288      	cmp	r0, r1
 802044a:	fa02 f206 	lsl.w	r2, r2, r6
 802044e:	d90b      	bls.n	8020468 <__udivmoddi4+0x1b8>
 8020450:	eb1c 0101 	adds.w	r1, ip, r1
 8020454:	f108 3aff 	add.w	sl, r8, #4294967295
 8020458:	f080 8088 	bcs.w	802056c <__udivmoddi4+0x2bc>
 802045c:	4288      	cmp	r0, r1
 802045e:	f240 8085 	bls.w	802056c <__udivmoddi4+0x2bc>
 8020462:	f1a8 0802 	sub.w	r8, r8, #2
 8020466:	4461      	add	r1, ip
 8020468:	1a09      	subs	r1, r1, r0
 802046a:	b2a4      	uxth	r4, r4
 802046c:	fbb1 f0f9 	udiv	r0, r1, r9
 8020470:	fb09 1110 	mls	r1, r9, r0, r1
 8020474:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8020478:	fb00 fe0e 	mul.w	lr, r0, lr
 802047c:	458e      	cmp	lr, r1
 802047e:	d908      	bls.n	8020492 <__udivmoddi4+0x1e2>
 8020480:	eb1c 0101 	adds.w	r1, ip, r1
 8020484:	f100 34ff 	add.w	r4, r0, #4294967295
 8020488:	d26c      	bcs.n	8020564 <__udivmoddi4+0x2b4>
 802048a:	458e      	cmp	lr, r1
 802048c:	d96a      	bls.n	8020564 <__udivmoddi4+0x2b4>
 802048e:	3802      	subs	r0, #2
 8020490:	4461      	add	r1, ip
 8020492:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8020496:	fba0 9402 	umull	r9, r4, r0, r2
 802049a:	eba1 010e 	sub.w	r1, r1, lr
 802049e:	42a1      	cmp	r1, r4
 80204a0:	46c8      	mov	r8, r9
 80204a2:	46a6      	mov	lr, r4
 80204a4:	d356      	bcc.n	8020554 <__udivmoddi4+0x2a4>
 80204a6:	d053      	beq.n	8020550 <__udivmoddi4+0x2a0>
 80204a8:	b15d      	cbz	r5, 80204c2 <__udivmoddi4+0x212>
 80204aa:	ebb3 0208 	subs.w	r2, r3, r8
 80204ae:	eb61 010e 	sbc.w	r1, r1, lr
 80204b2:	fa01 f707 	lsl.w	r7, r1, r7
 80204b6:	fa22 f306 	lsr.w	r3, r2, r6
 80204ba:	40f1      	lsrs	r1, r6
 80204bc:	431f      	orrs	r7, r3
 80204be:	e9c5 7100 	strd	r7, r1, [r5]
 80204c2:	2600      	movs	r6, #0
 80204c4:	4631      	mov	r1, r6
 80204c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80204ca:	f1c2 0320 	rsb	r3, r2, #32
 80204ce:	40d8      	lsrs	r0, r3
 80204d0:	fa0c fc02 	lsl.w	ip, ip, r2
 80204d4:	fa21 f303 	lsr.w	r3, r1, r3
 80204d8:	4091      	lsls	r1, r2
 80204da:	4301      	orrs	r1, r0
 80204dc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80204e0:	fa1f fe8c 	uxth.w	lr, ip
 80204e4:	fbb3 f0f7 	udiv	r0, r3, r7
 80204e8:	fb07 3610 	mls	r6, r7, r0, r3
 80204ec:	0c0b      	lsrs	r3, r1, #16
 80204ee:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80204f2:	fb00 f60e 	mul.w	r6, r0, lr
 80204f6:	429e      	cmp	r6, r3
 80204f8:	fa04 f402 	lsl.w	r4, r4, r2
 80204fc:	d908      	bls.n	8020510 <__udivmoddi4+0x260>
 80204fe:	eb1c 0303 	adds.w	r3, ip, r3
 8020502:	f100 38ff 	add.w	r8, r0, #4294967295
 8020506:	d22f      	bcs.n	8020568 <__udivmoddi4+0x2b8>
 8020508:	429e      	cmp	r6, r3
 802050a:	d92d      	bls.n	8020568 <__udivmoddi4+0x2b8>
 802050c:	3802      	subs	r0, #2
 802050e:	4463      	add	r3, ip
 8020510:	1b9b      	subs	r3, r3, r6
 8020512:	b289      	uxth	r1, r1
 8020514:	fbb3 f6f7 	udiv	r6, r3, r7
 8020518:	fb07 3316 	mls	r3, r7, r6, r3
 802051c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8020520:	fb06 f30e 	mul.w	r3, r6, lr
 8020524:	428b      	cmp	r3, r1
 8020526:	d908      	bls.n	802053a <__udivmoddi4+0x28a>
 8020528:	eb1c 0101 	adds.w	r1, ip, r1
 802052c:	f106 38ff 	add.w	r8, r6, #4294967295
 8020530:	d216      	bcs.n	8020560 <__udivmoddi4+0x2b0>
 8020532:	428b      	cmp	r3, r1
 8020534:	d914      	bls.n	8020560 <__udivmoddi4+0x2b0>
 8020536:	3e02      	subs	r6, #2
 8020538:	4461      	add	r1, ip
 802053a:	1ac9      	subs	r1, r1, r3
 802053c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8020540:	e738      	b.n	80203b4 <__udivmoddi4+0x104>
 8020542:	462e      	mov	r6, r5
 8020544:	4628      	mov	r0, r5
 8020546:	e705      	b.n	8020354 <__udivmoddi4+0xa4>
 8020548:	4606      	mov	r6, r0
 802054a:	e6e3      	b.n	8020314 <__udivmoddi4+0x64>
 802054c:	4618      	mov	r0, r3
 802054e:	e6f8      	b.n	8020342 <__udivmoddi4+0x92>
 8020550:	454b      	cmp	r3, r9
 8020552:	d2a9      	bcs.n	80204a8 <__udivmoddi4+0x1f8>
 8020554:	ebb9 0802 	subs.w	r8, r9, r2
 8020558:	eb64 0e0c 	sbc.w	lr, r4, ip
 802055c:	3801      	subs	r0, #1
 802055e:	e7a3      	b.n	80204a8 <__udivmoddi4+0x1f8>
 8020560:	4646      	mov	r6, r8
 8020562:	e7ea      	b.n	802053a <__udivmoddi4+0x28a>
 8020564:	4620      	mov	r0, r4
 8020566:	e794      	b.n	8020492 <__udivmoddi4+0x1e2>
 8020568:	4640      	mov	r0, r8
 802056a:	e7d1      	b.n	8020510 <__udivmoddi4+0x260>
 802056c:	46d0      	mov	r8, sl
 802056e:	e77b      	b.n	8020468 <__udivmoddi4+0x1b8>
 8020570:	3b02      	subs	r3, #2
 8020572:	4461      	add	r1, ip
 8020574:	e732      	b.n	80203dc <__udivmoddi4+0x12c>
 8020576:	4630      	mov	r0, r6
 8020578:	e709      	b.n	802038e <__udivmoddi4+0xde>
 802057a:	4464      	add	r4, ip
 802057c:	3802      	subs	r0, #2
 802057e:	e742      	b.n	8020406 <__udivmoddi4+0x156>

08020580 <__aeabi_idiv0>:
 8020580:	4770      	bx	lr
 8020582:	bf00      	nop

08020584 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8020584:	b480      	push	{r7}
 8020586:	b085      	sub	sp, #20
 8020588:	af00      	add	r7, sp, #0
 802058a:	60f8      	str	r0, [r7, #12]
 802058c:	60b9      	str	r1, [r7, #8]
 802058e:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8020590:	68fb      	ldr	r3, [r7, #12]
 8020592:	4a07      	ldr	r2, [pc, #28]	; (80205b0 <vApplicationGetIdleTaskMemory+0x2c>)
 8020594:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8020596:	68bb      	ldr	r3, [r7, #8]
 8020598:	4a06      	ldr	r2, [pc, #24]	; (80205b4 <vApplicationGetIdleTaskMemory+0x30>)
 802059a:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 802059c:	687b      	ldr	r3, [r7, #4]
 802059e:	2280      	movs	r2, #128	; 0x80
 80205a0:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 80205a2:	bf00      	nop
 80205a4:	3714      	adds	r7, #20
 80205a6:	46bd      	mov	sp, r7
 80205a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80205ac:	4770      	bx	lr
 80205ae:	bf00      	nop
 80205b0:	200000b4 	.word	0x200000b4
 80205b4:	20000168 	.word	0x20000168

080205b8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80205b8:	b5b0      	push	{r4, r5, r7, lr}
 80205ba:	b096      	sub	sp, #88	; 0x58
 80205bc:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80205be:	f001 fa4d 	bl	8021a5c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80205c2:	f000 f84b 	bl	802065c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80205c6:	f000 f8db 	bl	8020780 <MX_GPIO_Init>
  MX_RTC_Init();
 80205ca:	f000 f8b3 	bl	8020734 <MX_RTC_Init>
	/* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of tcpTask */
  osThreadDef(tcpTask, StartTCPTask, osPriorityAboveNormal, 0, 512);
 80205ce:	4b1d      	ldr	r3, [pc, #116]	; (8020644 <main+0x8c>)
 80205d0:	f107 043c 	add.w	r4, r7, #60	; 0x3c
 80205d4:	461d      	mov	r5, r3
 80205d6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80205d8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80205da:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80205de:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  tcpTaskHandle = osThreadCreate(osThread(tcpTask), NULL);
 80205e2:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80205e6:	2100      	movs	r1, #0
 80205e8:	4618      	mov	r0, r3
 80205ea:	f004 ff13 	bl	8025414 <osThreadCreate>
 80205ee:	4603      	mov	r3, r0
 80205f0:	4a15      	ldr	r2, [pc, #84]	; (8020648 <main+0x90>)
 80205f2:	6013      	str	r3, [r2, #0]

  /* definition and creation of heartbeatTask */
  osThreadDef(heartbeatTask, StartHeartbeatTask, osPriorityNormal, 0, 256);
 80205f4:	4b15      	ldr	r3, [pc, #84]	; (802064c <main+0x94>)
 80205f6:	f107 0420 	add.w	r4, r7, #32
 80205fa:	461d      	mov	r5, r3
 80205fc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80205fe:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8020600:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8020604:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  heartbeatTaskHandle = osThreadCreate(osThread(heartbeatTask), NULL);
 8020608:	f107 0320 	add.w	r3, r7, #32
 802060c:	2100      	movs	r1, #0
 802060e:	4618      	mov	r0, r3
 8020610:	f004 ff00 	bl	8025414 <osThreadCreate>
 8020614:	4603      	mov	r3, r0
 8020616:	4a0e      	ldr	r2, [pc, #56]	; (8020650 <main+0x98>)
 8020618:	6013      	str	r3, [r2, #0]

  /* definition and creation of rxMessages */
  osThreadDef(rxMessages, StartRXMessages, osPriorityIdle, 0, 256);
 802061a:	4b0e      	ldr	r3, [pc, #56]	; (8020654 <main+0x9c>)
 802061c:	1d3c      	adds	r4, r7, #4
 802061e:	461d      	mov	r5, r3
 8020620:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8020622:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8020624:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8020628:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  rxMessagesHandle = osThreadCreate(osThread(rxMessages), NULL);
 802062c:	1d3b      	adds	r3, r7, #4
 802062e:	2100      	movs	r1, #0
 8020630:	4618      	mov	r0, r3
 8020632:	f004 feef 	bl	8025414 <osThreadCreate>
 8020636:	4603      	mov	r3, r0
 8020638:	4a07      	ldr	r2, [pc, #28]	; (8020658 <main+0xa0>)
 802063a:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_THREADS */

  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 802063c:	f004 fed3 	bl	80253e6 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1) {
 8020640:	e7fe      	b.n	8020640 <main+0x88>
 8020642:	bf00      	nop
 8020644:	08039984 	.word	0x08039984
 8020648:	20000388 	.word	0x20000388
 802064c:	080399a0 	.word	0x080399a0
 8020650:	2000038c 	.word	0x2000038c
 8020654:	080399bc 	.word	0x080399bc
 8020658:	20000390 	.word	0x20000390

0802065c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 802065c:	b580      	push	{r7, lr}
 802065e:	b094      	sub	sp, #80	; 0x50
 8020660:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8020662:	f107 0320 	add.w	r3, r7, #32
 8020666:	2230      	movs	r2, #48	; 0x30
 8020668:	2100      	movs	r1, #0
 802066a:	4618      	mov	r0, r3
 802066c:	f018 f910 	bl	8038890 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8020670:	f107 030c 	add.w	r3, r7, #12
 8020674:	2200      	movs	r2, #0
 8020676:	601a      	str	r2, [r3, #0]
 8020678:	605a      	str	r2, [r3, #4]
 802067a:	609a      	str	r2, [r3, #8]
 802067c:	60da      	str	r2, [r3, #12]
 802067e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8020680:	2300      	movs	r3, #0
 8020682:	60bb      	str	r3, [r7, #8]
 8020684:	4b29      	ldr	r3, [pc, #164]	; (802072c <SystemClock_Config+0xd0>)
 8020686:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8020688:	4a28      	ldr	r2, [pc, #160]	; (802072c <SystemClock_Config+0xd0>)
 802068a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 802068e:	6413      	str	r3, [r2, #64]	; 0x40
 8020690:	4b26      	ldr	r3, [pc, #152]	; (802072c <SystemClock_Config+0xd0>)
 8020692:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8020694:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8020698:	60bb      	str	r3, [r7, #8]
 802069a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 802069c:	2300      	movs	r3, #0
 802069e:	607b      	str	r3, [r7, #4]
 80206a0:	4b23      	ldr	r3, [pc, #140]	; (8020730 <SystemClock_Config+0xd4>)
 80206a2:	681b      	ldr	r3, [r3, #0]
 80206a4:	4a22      	ldr	r2, [pc, #136]	; (8020730 <SystemClock_Config+0xd4>)
 80206a6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80206aa:	6013      	str	r3, [r2, #0]
 80206ac:	4b20      	ldr	r3, [pc, #128]	; (8020730 <SystemClock_Config+0xd4>)
 80206ae:	681b      	ldr	r3, [r3, #0]
 80206b0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80206b4:	607b      	str	r3, [r7, #4]
 80206b6:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI;
 80206b8:	230a      	movs	r3, #10
 80206ba:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80206bc:	2301      	movs	r3, #1
 80206be:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80206c0:	2310      	movs	r3, #16
 80206c2:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 80206c4:	2301      	movs	r3, #1
 80206c6:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80206c8:	2302      	movs	r3, #2
 80206ca:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80206cc:	2300      	movs	r3, #0
 80206ce:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80206d0:	2308      	movs	r3, #8
 80206d2:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 80206d4:	23a8      	movs	r3, #168	; 0xa8
 80206d6:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80206d8:	2302      	movs	r3, #2
 80206da:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80206dc:	2304      	movs	r3, #4
 80206de:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80206e0:	f107 0320 	add.w	r3, r7, #32
 80206e4:	4618      	mov	r0, r3
 80206e6:	f002 ff49 	bl	802357c <HAL_RCC_OscConfig>
 80206ea:	4603      	mov	r3, r0
 80206ec:	2b00      	cmp	r3, #0
 80206ee:	d001      	beq.n	80206f4 <SystemClock_Config+0x98>
  {
    Error_Handler();
 80206f0:	f000 f990 	bl	8020a14 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80206f4:	230f      	movs	r3, #15
 80206f6:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80206f8:	2302      	movs	r3, #2
 80206fa:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80206fc:	2300      	movs	r3, #0
 80206fe:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8020700:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8020704:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8020706:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 802070a:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 802070c:	f107 030c 	add.w	r3, r7, #12
 8020710:	2105      	movs	r1, #5
 8020712:	4618      	mov	r0, r3
 8020714:	f003 f9aa 	bl	8023a6c <HAL_RCC_ClockConfig>
 8020718:	4603      	mov	r3, r0
 802071a:	2b00      	cmp	r3, #0
 802071c:	d001      	beq.n	8020722 <SystemClock_Config+0xc6>
  {
    Error_Handler();
 802071e:	f000 f979 	bl	8020a14 <Error_Handler>
  }
}
 8020722:	bf00      	nop
 8020724:	3750      	adds	r7, #80	; 0x50
 8020726:	46bd      	mov	sp, r7
 8020728:	bd80      	pop	{r7, pc}
 802072a:	bf00      	nop
 802072c:	40023800 	.word	0x40023800
 8020730:	40007000 	.word	0x40007000

08020734 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8020734:	b580      	push	{r7, lr}
 8020736:	af00      	add	r7, sp, #0

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8020738:	4b0f      	ldr	r3, [pc, #60]	; (8020778 <MX_RTC_Init+0x44>)
 802073a:	4a10      	ldr	r2, [pc, #64]	; (802077c <MX_RTC_Init+0x48>)
 802073c:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 802073e:	4b0e      	ldr	r3, [pc, #56]	; (8020778 <MX_RTC_Init+0x44>)
 8020740:	2200      	movs	r2, #0
 8020742:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8020744:	4b0c      	ldr	r3, [pc, #48]	; (8020778 <MX_RTC_Init+0x44>)
 8020746:	227f      	movs	r2, #127	; 0x7f
 8020748:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 802074a:	4b0b      	ldr	r3, [pc, #44]	; (8020778 <MX_RTC_Init+0x44>)
 802074c:	22ff      	movs	r2, #255	; 0xff
 802074e:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8020750:	4b09      	ldr	r3, [pc, #36]	; (8020778 <MX_RTC_Init+0x44>)
 8020752:	2200      	movs	r2, #0
 8020754:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8020756:	4b08      	ldr	r3, [pc, #32]	; (8020778 <MX_RTC_Init+0x44>)
 8020758:	2200      	movs	r2, #0
 802075a:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 802075c:	4b06      	ldr	r3, [pc, #24]	; (8020778 <MX_RTC_Init+0x44>)
 802075e:	2200      	movs	r2, #0
 8020760:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8020762:	4805      	ldr	r0, [pc, #20]	; (8020778 <MX_RTC_Init+0x44>)
 8020764:	f003 fc62 	bl	802402c <HAL_RTC_Init>
 8020768:	4603      	mov	r3, r0
 802076a:	2b00      	cmp	r3, #0
 802076c:	d001      	beq.n	8020772 <MX_RTC_Init+0x3e>
  {
    Error_Handler();
 802076e:	f000 f951 	bl	8020a14 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8020772:	bf00      	nop
 8020774:	bd80      	pop	{r7, pc}
 8020776:	bf00      	nop
 8020778:	20000368 	.word	0x20000368
 802077c:	40002800 	.word	0x40002800

08020780 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8020780:	b580      	push	{r7, lr}
 8020782:	b08a      	sub	sp, #40	; 0x28
 8020784:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8020786:	f107 0314 	add.w	r3, r7, #20
 802078a:	2200      	movs	r2, #0
 802078c:	601a      	str	r2, [r3, #0]
 802078e:	605a      	str	r2, [r3, #4]
 8020790:	609a      	str	r2, [r3, #8]
 8020792:	60da      	str	r2, [r3, #12]
 8020794:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8020796:	2300      	movs	r3, #0
 8020798:	613b      	str	r3, [r7, #16]
 802079a:	4b4a      	ldr	r3, [pc, #296]	; (80208c4 <MX_GPIO_Init+0x144>)
 802079c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 802079e:	4a49      	ldr	r2, [pc, #292]	; (80208c4 <MX_GPIO_Init+0x144>)
 80207a0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80207a4:	6313      	str	r3, [r2, #48]	; 0x30
 80207a6:	4b47      	ldr	r3, [pc, #284]	; (80208c4 <MX_GPIO_Init+0x144>)
 80207a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80207aa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80207ae:	613b      	str	r3, [r7, #16]
 80207b0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80207b2:	2300      	movs	r3, #0
 80207b4:	60fb      	str	r3, [r7, #12]
 80207b6:	4b43      	ldr	r3, [pc, #268]	; (80208c4 <MX_GPIO_Init+0x144>)
 80207b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80207ba:	4a42      	ldr	r2, [pc, #264]	; (80208c4 <MX_GPIO_Init+0x144>)
 80207bc:	f043 0304 	orr.w	r3, r3, #4
 80207c0:	6313      	str	r3, [r2, #48]	; 0x30
 80207c2:	4b40      	ldr	r3, [pc, #256]	; (80208c4 <MX_GPIO_Init+0x144>)
 80207c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80207c6:	f003 0304 	and.w	r3, r3, #4
 80207ca:	60fb      	str	r3, [r7, #12]
 80207cc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80207ce:	2300      	movs	r3, #0
 80207d0:	60bb      	str	r3, [r7, #8]
 80207d2:	4b3c      	ldr	r3, [pc, #240]	; (80208c4 <MX_GPIO_Init+0x144>)
 80207d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80207d6:	4a3b      	ldr	r2, [pc, #236]	; (80208c4 <MX_GPIO_Init+0x144>)
 80207d8:	f043 0301 	orr.w	r3, r3, #1
 80207dc:	6313      	str	r3, [r2, #48]	; 0x30
 80207de:	4b39      	ldr	r3, [pc, #228]	; (80208c4 <MX_GPIO_Init+0x144>)
 80207e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80207e2:	f003 0301 	and.w	r3, r3, #1
 80207e6:	60bb      	str	r3, [r7, #8]
 80207e8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80207ea:	2300      	movs	r3, #0
 80207ec:	607b      	str	r3, [r7, #4]
 80207ee:	4b35      	ldr	r3, [pc, #212]	; (80208c4 <MX_GPIO_Init+0x144>)
 80207f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80207f2:	4a34      	ldr	r2, [pc, #208]	; (80208c4 <MX_GPIO_Init+0x144>)
 80207f4:	f043 0302 	orr.w	r3, r3, #2
 80207f8:	6313      	str	r3, [r2, #48]	; 0x30
 80207fa:	4b32      	ldr	r3, [pc, #200]	; (80208c4 <MX_GPIO_Init+0x144>)
 80207fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80207fe:	f003 0302 	and.w	r3, r3, #2
 8020802:	607b      	str	r3, [r7, #4]
 8020804:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8020806:	2300      	movs	r3, #0
 8020808:	603b      	str	r3, [r7, #0]
 802080a:	4b2e      	ldr	r3, [pc, #184]	; (80208c4 <MX_GPIO_Init+0x144>)
 802080c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 802080e:	4a2d      	ldr	r2, [pc, #180]	; (80208c4 <MX_GPIO_Init+0x144>)
 8020810:	f043 0308 	orr.w	r3, r3, #8
 8020814:	6313      	str	r3, [r2, #48]	; 0x30
 8020816:	4b2b      	ldr	r3, [pc, #172]	; (80208c4 <MX_GPIO_Init+0x144>)
 8020818:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 802081a:	f003 0308 	and.w	r3, r3, #8
 802081e:	603b      	str	r3, [r7, #0]
 8020820:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED3_GPIO_Port, LED3_Pin, GPIO_PIN_RESET);
 8020822:	2200      	movs	r2, #0
 8020824:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8020828:	4827      	ldr	r0, [pc, #156]	; (80208c8 <MX_GPIO_Init+0x148>)
 802082a:	f002 fe4b 	bl	80234c4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, LED2_Pin|LED1_Pin|LED0_Pin, GPIO_PIN_RESET);
 802082e:	2200      	movs	r2, #0
 8020830:	f44f 71e0 	mov.w	r1, #448	; 0x1c0
 8020834:	4825      	ldr	r0, [pc, #148]	; (80208cc <MX_GPIO_Init+0x14c>)
 8020836:	f002 fe45 	bl	80234c4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(BOOT_CHARGE_GPIO_Port, BOOT_CHARGE_Pin, GPIO_PIN_RESET);
 802083a:	2200      	movs	r2, #0
 802083c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8020840:	4823      	ldr	r0, [pc, #140]	; (80208d0 <MX_GPIO_Init+0x150>)
 8020842:	f002 fe3f 	bl	80234c4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED3_Pin */
  GPIO_InitStruct.Pin = LED3_Pin;
 8020846:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 802084a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 802084c:	2301      	movs	r3, #1
 802084e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8020850:	2300      	movs	r3, #0
 8020852:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8020854:	2300      	movs	r3, #0
 8020856:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LED3_GPIO_Port, &GPIO_InitStruct);
 8020858:	f107 0314 	add.w	r3, r7, #20
 802085c:	4619      	mov	r1, r3
 802085e:	481a      	ldr	r0, [pc, #104]	; (80208c8 <MX_GPIO_Init+0x148>)
 8020860:	f002 fc94 	bl	802318c <HAL_GPIO_Init>

  /*Configure GPIO pins : LED2_Pin LED1_Pin LED0_Pin */
  GPIO_InitStruct.Pin = LED2_Pin|LED1_Pin|LED0_Pin;
 8020864:	f44f 73e0 	mov.w	r3, #448	; 0x1c0
 8020868:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 802086a:	2301      	movs	r3, #1
 802086c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 802086e:	2300      	movs	r3, #0
 8020870:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8020872:	2300      	movs	r3, #0
 8020874:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8020876:	f107 0314 	add.w	r3, r7, #20
 802087a:	4619      	mov	r1, r3
 802087c:	4813      	ldr	r0, [pc, #76]	; (80208cc <MX_GPIO_Init+0x14c>)
 802087e:	f002 fc85 	bl	802318c <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT_CHARGE_Pin */
  GPIO_InitStruct.Pin = BOOT_CHARGE_Pin;
 8020882:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8020886:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8020888:	2301      	movs	r3, #1
 802088a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 802088c:	2300      	movs	r3, #0
 802088e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8020890:	2300      	movs	r3, #0
 8020892:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(BOOT_CHARGE_GPIO_Port, &GPIO_InitStruct);
 8020894:	f107 0314 	add.w	r3, r7, #20
 8020898:	4619      	mov	r1, r3
 802089a:	480d      	ldr	r0, [pc, #52]	; (80208d0 <MX_GPIO_Init+0x150>)
 802089c:	f002 fc76 	bl	802318c <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT_READ_Pin */
  GPIO_InitStruct.Pin = BOOT_READ_Pin;
 80208a0:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80208a4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80208a6:	2300      	movs	r3, #0
 80208a8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80208aa:	2300      	movs	r3, #0
 80208ac:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(BOOT_READ_GPIO_Port, &GPIO_InitStruct);
 80208ae:	f107 0314 	add.w	r3, r7, #20
 80208b2:	4619      	mov	r1, r3
 80208b4:	4806      	ldr	r0, [pc, #24]	; (80208d0 <MX_GPIO_Init+0x150>)
 80208b6:	f002 fc69 	bl	802318c <HAL_GPIO_Init>

}
 80208ba:	bf00      	nop
 80208bc:	3728      	adds	r7, #40	; 0x28
 80208be:	46bd      	mov	sp, r7
 80208c0:	bd80      	pop	{r7, pc}
 80208c2:	bf00      	nop
 80208c4:	40023800 	.word	0x40023800
 80208c8:	40020c00 	.word	0x40020c00
 80208cc:	40020800 	.word	0x40020800
 80208d0:	40020000 	.word	0x40020000

080208d4 <StartTCPTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTCPTask */
void StartTCPTask(void const * argument)
{
 80208d4:	b580      	push	{r7, lr}
 80208d6:	b082      	sub	sp, #8
 80208d8:	af00      	add	r7, sp, #0
 80208da:	6078      	str	r0, [r7, #4]
  /* init code for LWIP */
  MX_LWIP_Init();
 80208dc:	f003 ff68 	bl	80247b0 <MX_LWIP_Init>
  /* USER CODE BEGIN 5 */

  server_init();
 80208e0:	f000 fb46 	bl	8020f70 <server_init>

	/* Infinite loop */
	for (;;) {
		osDelay(1);
 80208e4:	2001      	movs	r0, #1
 80208e6:	f004 fde1 	bl	80254ac <osDelay>
 80208ea:	e7fb      	b.n	80208e4 <StartTCPTask+0x10>

080208ec <StartHeartbeatTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartHeartbeatTask */
void StartHeartbeatTask(void const * argument)
{
 80208ec:	b580      	push	{r7, lr}
 80208ee:	b084      	sub	sp, #16
 80208f0:	af00      	add	r7, sp, #0
 80208f2:	6078      	str	r0, [r7, #4]
  for(;;)
  {
	  /*
	   *  Heartbeat LED0
	   */
	  HAL_GPIO_TogglePin(LED0_GPIO_Port, LED0_Pin);
 80208f4:	f44f 7180 	mov.w	r1, #256	; 0x100
 80208f8:	480b      	ldr	r0, [pc, #44]	; (8020928 <StartHeartbeatTask+0x3c>)
 80208fa:	f002 fdfc 	bl	80234f6 <HAL_GPIO_TogglePin>

	  char* msg = malloc(12);
 80208fe:	200c      	movs	r0, #12
 8020900:	f017 ff98 	bl	8038834 <malloc>
 8020904:	4603      	mov	r3, r0
 8020906:	60fb      	str	r3, [r7, #12]
	  memcpy(msg, "heartbeat\r\n", 12);
 8020908:	220c      	movs	r2, #12
 802090a:	4908      	ldr	r1, [pc, #32]	; (802092c <StartHeartbeatTask+0x40>)
 802090c:	68f8      	ldr	r0, [r7, #12]
 802090e:	f017 ffb1 	bl	8038874 <memcpy>

	  server_sendMsg(ALL_CONNECTIONS,  msg, 12);
 8020912:	220c      	movs	r2, #12
 8020914:	68f9      	ldr	r1, [r7, #12]
 8020916:	f04f 30ff 	mov.w	r0, #4294967295
 802091a:	f000 fd13 	bl	8021344 <server_sendMsg>

	  osDelay(500);
 802091e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8020922:	f004 fdc3 	bl	80254ac <osDelay>
  {
 8020926:	e7e5      	b.n	80208f4 <StartHeartbeatTask+0x8>
 8020928:	40020800 	.word	0x40020800
 802092c:	080399d8 	.word	0x080399d8

08020930 <StartRXMessages>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartRXMessages */
void StartRXMessages(void const * argument)
{
 8020930:	b590      	push	{r4, r7, lr}
 8020932:	f5ad 7d21 	sub.w	sp, sp, #644	; 0x284
 8020936:	af02      	add	r7, sp, #8
 8020938:	f507 731e 	add.w	r3, r7, #632	; 0x278
 802093c:	f5a3 731d 	sub.w	r3, r3, #628	; 0x274
 8020940:	6018      	str	r0, [r3, #0]
  /* USER CODE BEGIN StartRXMessages */

	char ret_buf[MAX_MSG_LEN];
	char buf[MAX_MSG_LEN];

	u16_t ret_len = 0;
 8020942:	f507 731e 	add.w	r3, r7, #632	; 0x278
 8020946:	f2a3 235e 	subw	r3, r3, #606	; 0x25e
 802094a:	2200      	movs	r2, #0
 802094c:	801a      	strh	r2, [r3, #0]

  /* Infinite loop */
  for(;;)
  {
	struct message msg = {-1, buf, MAX_MSG_LEN};
 802094e:	f507 731e 	add.w	r3, r7, #632	; 0x278
 8020952:	f5a3 731b 	sub.w	r3, r3, #620	; 0x26c
 8020956:	f04f 32ff 	mov.w	r2, #4294967295
 802095a:	601a      	str	r2, [r3, #0]
 802095c:	f507 731e 	add.w	r3, r7, #632	; 0x278
 8020960:	f5a3 731b 	sub.w	r3, r3, #620	; 0x26c
 8020964:	f107 021c 	add.w	r2, r7, #28
 8020968:	605a      	str	r2, [r3, #4]
 802096a:	f507 731e 	add.w	r3, r7, #632	; 0x278
 802096e:	f5a3 731b 	sub.w	r3, r3, #620	; 0x26c
 8020972:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8020976:	609a      	str	r2, [r3, #8]
	server_retrieveMsg(&msg);
 8020978:	f107 030c 	add.w	r3, r7, #12
 802097c:	4618      	mov	r0, r3
 802097e:	f000 fd3b 	bl	80213f8 <server_retrieveMsg>
	parse_t rc = devparse(msg.buf, msg.len, ret_buf, &ret_len, msg.connfd);
 8020982:	f507 731e 	add.w	r3, r7, #632	; 0x278
 8020986:	f5a3 731b 	sub.w	r3, r3, #620	; 0x26c
 802098a:	6858      	ldr	r0, [r3, #4]
 802098c:	f507 731e 	add.w	r3, r7, #632	; 0x278
 8020990:	f5a3 731b 	sub.w	r3, r3, #620	; 0x26c
 8020994:	689b      	ldr	r3, [r3, #8]
 8020996:	b299      	uxth	r1, r3
 8020998:	f507 731e 	add.w	r3, r7, #632	; 0x278
 802099c:	f5a3 731b 	sub.w	r3, r3, #620	; 0x26c
 80209a0:	681b      	ldr	r3, [r3, #0]
 80209a2:	f107 041a 	add.w	r4, r7, #26
 80209a6:	f507 72a4 	add.w	r2, r7, #328	; 0x148
 80209aa:	9300      	str	r3, [sp, #0]
 80209ac:	4623      	mov	r3, r4
 80209ae:	f000 fa41 	bl	8020e34 <devparse>
 80209b2:	4603      	mov	r3, r0
 80209b4:	f887 3277 	strb.w	r3, [r7, #631]	; 0x277

	if (ret_len > 0) {
 80209b8:	f507 731e 	add.w	r3, r7, #632	; 0x278
 80209bc:	f2a3 235e 	subw	r3, r3, #606	; 0x25e
 80209c0:	881b      	ldrh	r3, [r3, #0]
 80209c2:	2b00      	cmp	r3, #0
 80209c4:	d00f      	beq.n	80209e6 <StartRXMessages+0xb6>
		server_sendMsg(msg.connfd, ret_buf, ret_len);
 80209c6:	f507 731e 	add.w	r3, r7, #632	; 0x278
 80209ca:	f5a3 731b 	sub.w	r3, r3, #620	; 0x26c
 80209ce:	6818      	ldr	r0, [r3, #0]
 80209d0:	f507 731e 	add.w	r3, r7, #632	; 0x278
 80209d4:	f2a3 235e 	subw	r3, r3, #606	; 0x25e
 80209d8:	881b      	ldrh	r3, [r3, #0]
 80209da:	461a      	mov	r2, r3
 80209dc:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 80209e0:	4619      	mov	r1, r3
 80209e2:	f000 fcaf 	bl	8021344 <server_sendMsg>
	}

	osDelay(1);
 80209e6:	2001      	movs	r0, #1
 80209e8:	f004 fd60 	bl	80254ac <osDelay>
  {
 80209ec:	e7af      	b.n	802094e <StartRXMessages+0x1e>
	...

080209f0 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80209f0:	b580      	push	{r7, lr}
 80209f2:	b082      	sub	sp, #8
 80209f4:	af00      	add	r7, sp, #0
 80209f6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 80209f8:	687b      	ldr	r3, [r7, #4]
 80209fa:	681b      	ldr	r3, [r3, #0]
 80209fc:	4a04      	ldr	r2, [pc, #16]	; (8020a10 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80209fe:	4293      	cmp	r3, r2
 8020a00:	d101      	bne.n	8020a06 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8020a02:	f001 f84d 	bl	8021aa0 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8020a06:	bf00      	nop
 8020a08:	3708      	adds	r7, #8
 8020a0a:	46bd      	mov	sp, r7
 8020a0c:	bd80      	pop	{r7, pc}
 8020a0e:	bf00      	nop
 8020a10:	40001000 	.word	0x40001000

08020a14 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8020a14:	b480      	push	{r7}
 8020a16:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8020a18:	b672      	cpsid	i
}
 8020a1a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8020a1c:	e7fe      	b.n	8020a1c <Error_Handler+0x8>
	...

08020a20 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8020a20:	b580      	push	{r7, lr}
 8020a22:	b082      	sub	sp, #8
 8020a24:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8020a26:	2300      	movs	r3, #0
 8020a28:	607b      	str	r3, [r7, #4]
 8020a2a:	4b12      	ldr	r3, [pc, #72]	; (8020a74 <HAL_MspInit+0x54>)
 8020a2c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8020a2e:	4a11      	ldr	r2, [pc, #68]	; (8020a74 <HAL_MspInit+0x54>)
 8020a30:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8020a34:	6453      	str	r3, [r2, #68]	; 0x44
 8020a36:	4b0f      	ldr	r3, [pc, #60]	; (8020a74 <HAL_MspInit+0x54>)
 8020a38:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8020a3a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8020a3e:	607b      	str	r3, [r7, #4]
 8020a40:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8020a42:	2300      	movs	r3, #0
 8020a44:	603b      	str	r3, [r7, #0]
 8020a46:	4b0b      	ldr	r3, [pc, #44]	; (8020a74 <HAL_MspInit+0x54>)
 8020a48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8020a4a:	4a0a      	ldr	r2, [pc, #40]	; (8020a74 <HAL_MspInit+0x54>)
 8020a4c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8020a50:	6413      	str	r3, [r2, #64]	; 0x40
 8020a52:	4b08      	ldr	r3, [pc, #32]	; (8020a74 <HAL_MspInit+0x54>)
 8020a54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8020a56:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8020a5a:	603b      	str	r3, [r7, #0]
 8020a5c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8020a5e:	2200      	movs	r2, #0
 8020a60:	210f      	movs	r1, #15
 8020a62:	f06f 0001 	mvn.w	r0, #1
 8020a66:	f001 f917 	bl	8021c98 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8020a6a:	bf00      	nop
 8020a6c:	3708      	adds	r7, #8
 8020a6e:	46bd      	mov	sp, r7
 8020a70:	bd80      	pop	{r7, pc}
 8020a72:	bf00      	nop
 8020a74:	40023800 	.word	0x40023800

08020a78 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8020a78:	b580      	push	{r7, lr}
 8020a7a:	b086      	sub	sp, #24
 8020a7c:	af00      	add	r7, sp, #0
 8020a7e:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8020a80:	f107 0308 	add.w	r3, r7, #8
 8020a84:	2200      	movs	r2, #0
 8020a86:	601a      	str	r2, [r3, #0]
 8020a88:	605a      	str	r2, [r3, #4]
 8020a8a:	609a      	str	r2, [r3, #8]
 8020a8c:	60da      	str	r2, [r3, #12]
  if(hrtc->Instance==RTC)
 8020a8e:	687b      	ldr	r3, [r7, #4]
 8020a90:	681b      	ldr	r3, [r3, #0]
 8020a92:	4a0c      	ldr	r2, [pc, #48]	; (8020ac4 <HAL_RTC_MspInit+0x4c>)
 8020a94:	4293      	cmp	r3, r2
 8020a96:	d111      	bne.n	8020abc <HAL_RTC_MspInit+0x44>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8020a98:	2302      	movs	r3, #2
 8020a9a:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8020a9c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8020aa0:	617b      	str	r3, [r7, #20]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8020aa2:	f107 0308 	add.w	r3, r7, #8
 8020aa6:	4618      	mov	r0, r3
 8020aa8:	f003 f9de 	bl	8023e68 <HAL_RCCEx_PeriphCLKConfig>
 8020aac:	4603      	mov	r3, r0
 8020aae:	2b00      	cmp	r3, #0
 8020ab0:	d001      	beq.n	8020ab6 <HAL_RTC_MspInit+0x3e>
    {
      Error_Handler();
 8020ab2:	f7ff ffaf 	bl	8020a14 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8020ab6:	4b04      	ldr	r3, [pc, #16]	; (8020ac8 <HAL_RTC_MspInit+0x50>)
 8020ab8:	2201      	movs	r2, #1
 8020aba:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8020abc:	bf00      	nop
 8020abe:	3718      	adds	r7, #24
 8020ac0:	46bd      	mov	sp, r7
 8020ac2:	bd80      	pop	{r7, pc}
 8020ac4:	40002800 	.word	0x40002800
 8020ac8:	42470e3c 	.word	0x42470e3c

08020acc <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8020acc:	b580      	push	{r7, lr}
 8020ace:	b08e      	sub	sp, #56	; 0x38
 8020ad0:	af00      	add	r7, sp, #0
 8020ad2:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8020ad4:	2300      	movs	r3, #0
 8020ad6:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8020ad8:	2300      	movs	r3, #0
 8020ada:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8020adc:	2300      	movs	r3, #0
 8020ade:	60fb      	str	r3, [r7, #12]
 8020ae0:	4b33      	ldr	r3, [pc, #204]	; (8020bb0 <HAL_InitTick+0xe4>)
 8020ae2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8020ae4:	4a32      	ldr	r2, [pc, #200]	; (8020bb0 <HAL_InitTick+0xe4>)
 8020ae6:	f043 0310 	orr.w	r3, r3, #16
 8020aea:	6413      	str	r3, [r2, #64]	; 0x40
 8020aec:	4b30      	ldr	r3, [pc, #192]	; (8020bb0 <HAL_InitTick+0xe4>)
 8020aee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8020af0:	f003 0310 	and.w	r3, r3, #16
 8020af4:	60fb      	str	r3, [r7, #12]
 8020af6:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8020af8:	f107 0210 	add.w	r2, r7, #16
 8020afc:	f107 0314 	add.w	r3, r7, #20
 8020b00:	4611      	mov	r1, r2
 8020b02:	4618      	mov	r0, r3
 8020b04:	f003 f97e 	bl	8023e04 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8020b08:	6a3b      	ldr	r3, [r7, #32]
 8020b0a:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8020b0c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8020b0e:	2b00      	cmp	r3, #0
 8020b10:	d103      	bne.n	8020b1a <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8020b12:	f003 f963 	bl	8023ddc <HAL_RCC_GetPCLK1Freq>
 8020b16:	6378      	str	r0, [r7, #52]	; 0x34
 8020b18:	e004      	b.n	8020b24 <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8020b1a:	f003 f95f 	bl	8023ddc <HAL_RCC_GetPCLK1Freq>
 8020b1e:	4603      	mov	r3, r0
 8020b20:	005b      	lsls	r3, r3, #1
 8020b22:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8020b24:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8020b26:	4a23      	ldr	r2, [pc, #140]	; (8020bb4 <HAL_InitTick+0xe8>)
 8020b28:	fba2 2303 	umull	r2, r3, r2, r3
 8020b2c:	0c9b      	lsrs	r3, r3, #18
 8020b2e:	3b01      	subs	r3, #1
 8020b30:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8020b32:	4b21      	ldr	r3, [pc, #132]	; (8020bb8 <HAL_InitTick+0xec>)
 8020b34:	4a21      	ldr	r2, [pc, #132]	; (8020bbc <HAL_InitTick+0xf0>)
 8020b36:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8020b38:	4b1f      	ldr	r3, [pc, #124]	; (8020bb8 <HAL_InitTick+0xec>)
 8020b3a:	f240 32e7 	movw	r2, #999	; 0x3e7
 8020b3e:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8020b40:	4a1d      	ldr	r2, [pc, #116]	; (8020bb8 <HAL_InitTick+0xec>)
 8020b42:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8020b44:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8020b46:	4b1c      	ldr	r3, [pc, #112]	; (8020bb8 <HAL_InitTick+0xec>)
 8020b48:	2200      	movs	r2, #0
 8020b4a:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8020b4c:	4b1a      	ldr	r3, [pc, #104]	; (8020bb8 <HAL_InitTick+0xec>)
 8020b4e:	2200      	movs	r2, #0
 8020b50:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8020b52:	4b19      	ldr	r3, [pc, #100]	; (8020bb8 <HAL_InitTick+0xec>)
 8020b54:	2200      	movs	r2, #0
 8020b56:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 8020b58:	4817      	ldr	r0, [pc, #92]	; (8020bb8 <HAL_InitTick+0xec>)
 8020b5a:	f003 fb7b 	bl	8024254 <HAL_TIM_Base_Init>
 8020b5e:	4603      	mov	r3, r0
 8020b60:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 8020b64:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8020b68:	2b00      	cmp	r3, #0
 8020b6a:	d11b      	bne.n	8020ba4 <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8020b6c:	4812      	ldr	r0, [pc, #72]	; (8020bb8 <HAL_InitTick+0xec>)
 8020b6e:	f003 fbcb 	bl	8024308 <HAL_TIM_Base_Start_IT>
 8020b72:	4603      	mov	r3, r0
 8020b74:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 8020b78:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8020b7c:	2b00      	cmp	r3, #0
 8020b7e:	d111      	bne.n	8020ba4 <HAL_InitTick+0xd8>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8020b80:	2036      	movs	r0, #54	; 0x36
 8020b82:	f001 f8a5 	bl	8021cd0 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8020b86:	687b      	ldr	r3, [r7, #4]
 8020b88:	2b0f      	cmp	r3, #15
 8020b8a:	d808      	bhi.n	8020b9e <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 8020b8c:	2200      	movs	r2, #0
 8020b8e:	6879      	ldr	r1, [r7, #4]
 8020b90:	2036      	movs	r0, #54	; 0x36
 8020b92:	f001 f881 	bl	8021c98 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8020b96:	4a0a      	ldr	r2, [pc, #40]	; (8020bc0 <HAL_InitTick+0xf4>)
 8020b98:	687b      	ldr	r3, [r7, #4]
 8020b9a:	6013      	str	r3, [r2, #0]
 8020b9c:	e002      	b.n	8020ba4 <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 8020b9e:	2301      	movs	r3, #1
 8020ba0:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8020ba4:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 8020ba8:	4618      	mov	r0, r3
 8020baa:	3738      	adds	r7, #56	; 0x38
 8020bac:	46bd      	mov	sp, r7
 8020bae:	bd80      	pop	{r7, pc}
 8020bb0:	40023800 	.word	0x40023800
 8020bb4:	431bde83 	.word	0x431bde83
 8020bb8:	20000394 	.word	0x20000394
 8020bbc:	40001000 	.word	0x40001000
 8020bc0:	20000008 	.word	0x20000008

08020bc4 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 8020bc4:	b480      	push	{r7}
 8020bc6:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8020bc8:	f3bf 8f4f 	dsb	sy
}
 8020bcc:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8020bce:	4b06      	ldr	r3, [pc, #24]	; (8020be8 <__NVIC_SystemReset+0x24>)
 8020bd0:	68db      	ldr	r3, [r3, #12]
 8020bd2:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8020bd6:	4904      	ldr	r1, [pc, #16]	; (8020be8 <__NVIC_SystemReset+0x24>)
 8020bd8:	4b04      	ldr	r3, [pc, #16]	; (8020bec <__NVIC_SystemReset+0x28>)
 8020bda:	4313      	orrs	r3, r2
 8020bdc:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 8020bde:	f3bf 8f4f 	dsb	sy
}
 8020be2:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 8020be4:	bf00      	nop
 8020be6:	e7fd      	b.n	8020be4 <__NVIC_SystemReset+0x20>
 8020be8:	e000ed00 	.word	0xe000ed00
 8020bec:	05fa0004 	.word	0x05fa0004

08020bf0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8020bf0:	b480      	push	{r7}
 8020bf2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8020bf4:	e7fe      	b.n	8020bf4 <NMI_Handler+0x4>

08020bf6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8020bf6:	b580      	push	{r7, lr}
 8020bf8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

	NVIC_SystemReset();
 8020bfa:	f7ff ffe3 	bl	8020bc4 <__NVIC_SystemReset>

08020bfe <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8020bfe:	b480      	push	{r7}
 8020c00:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8020c02:	e7fe      	b.n	8020c02 <MemManage_Handler+0x4>

08020c04 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8020c04:	b480      	push	{r7}
 8020c06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8020c08:	e7fe      	b.n	8020c08 <BusFault_Handler+0x4>

08020c0a <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8020c0a:	b480      	push	{r7}
 8020c0c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8020c0e:	e7fe      	b.n	8020c0e <UsageFault_Handler+0x4>

08020c10 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8020c10:	b480      	push	{r7}
 8020c12:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8020c14:	bf00      	nop
 8020c16:	46bd      	mov	sp, r7
 8020c18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020c1c:	4770      	bx	lr
	...

08020c20 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8020c20:	b580      	push	{r7, lr}
 8020c22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8020c24:	4802      	ldr	r0, [pc, #8]	; (8020c30 <TIM6_DAC_IRQHandler+0x10>)
 8020c26:	f003 fbdf 	bl	80243e8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8020c2a:	bf00      	nop
 8020c2c:	bd80      	pop	{r7, pc}
 8020c2e:	bf00      	nop
 8020c30:	20000394 	.word	0x20000394

08020c34 <ETH_IRQHandler>:

/**
  * @brief This function handles Ethernet global interrupt.
  */
void ETH_IRQHandler(void)
{
 8020c34:	b580      	push	{r7, lr}
 8020c36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ETH_IRQn 0 */

  /* USER CODE END ETH_IRQn 0 */
  HAL_ETH_IRQHandler(&heth);
 8020c38:	4802      	ldr	r0, [pc, #8]	; (8020c44 <ETH_IRQHandler+0x10>)
 8020c3a:	f001 fbd1 	bl	80223e0 <HAL_ETH_IRQHandler>
  /* USER CODE BEGIN ETH_IRQn 1 */

  /* USER CODE END ETH_IRQn 1 */
}
 8020c3e:	bf00      	nop
 8020c40:	bd80      	pop	{r7, pc}
 8020c42:	bf00      	nop
 8020c44:	20004f3c 	.word	0x20004f3c

08020c48 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8020c48:	b480      	push	{r7}
 8020c4a:	af00      	add	r7, sp, #0
  return 1;
 8020c4c:	2301      	movs	r3, #1
}
 8020c4e:	4618      	mov	r0, r3
 8020c50:	46bd      	mov	sp, r7
 8020c52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020c56:	4770      	bx	lr

08020c58 <_kill>:

int _kill(int pid, int sig)
{
 8020c58:	b480      	push	{r7}
 8020c5a:	b083      	sub	sp, #12
 8020c5c:	af00      	add	r7, sp, #0
 8020c5e:	6078      	str	r0, [r7, #4]
 8020c60:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8020c62:	4b05      	ldr	r3, [pc, #20]	; (8020c78 <_kill+0x20>)
 8020c64:	2216      	movs	r2, #22
 8020c66:	601a      	str	r2, [r3, #0]
  return -1;
 8020c68:	f04f 33ff 	mov.w	r3, #4294967295
}
 8020c6c:	4618      	mov	r0, r3
 8020c6e:	370c      	adds	r7, #12
 8020c70:	46bd      	mov	sp, r7
 8020c72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020c76:	4770      	bx	lr
 8020c78:	2000f06c 	.word	0x2000f06c

08020c7c <_exit>:

void _exit (int status)
{
 8020c7c:	b580      	push	{r7, lr}
 8020c7e:	b082      	sub	sp, #8
 8020c80:	af00      	add	r7, sp, #0
 8020c82:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8020c84:	f04f 31ff 	mov.w	r1, #4294967295
 8020c88:	6878      	ldr	r0, [r7, #4]
 8020c8a:	f7ff ffe5 	bl	8020c58 <_kill>
  while (1) {}    /* Make sure we hang here */
 8020c8e:	e7fe      	b.n	8020c8e <_exit+0x12>

08020c90 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8020c90:	b580      	push	{r7, lr}
 8020c92:	b086      	sub	sp, #24
 8020c94:	af00      	add	r7, sp, #0
 8020c96:	60f8      	str	r0, [r7, #12]
 8020c98:	60b9      	str	r1, [r7, #8]
 8020c9a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8020c9c:	2300      	movs	r3, #0
 8020c9e:	617b      	str	r3, [r7, #20]
 8020ca0:	e00a      	b.n	8020cb8 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8020ca2:	f3af 8000 	nop.w
 8020ca6:	4601      	mov	r1, r0
 8020ca8:	68bb      	ldr	r3, [r7, #8]
 8020caa:	1c5a      	adds	r2, r3, #1
 8020cac:	60ba      	str	r2, [r7, #8]
 8020cae:	b2ca      	uxtb	r2, r1
 8020cb0:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8020cb2:	697b      	ldr	r3, [r7, #20]
 8020cb4:	3301      	adds	r3, #1
 8020cb6:	617b      	str	r3, [r7, #20]
 8020cb8:	697a      	ldr	r2, [r7, #20]
 8020cba:	687b      	ldr	r3, [r7, #4]
 8020cbc:	429a      	cmp	r2, r3
 8020cbe:	dbf0      	blt.n	8020ca2 <_read+0x12>
  }

  return len;
 8020cc0:	687b      	ldr	r3, [r7, #4]
}
 8020cc2:	4618      	mov	r0, r3
 8020cc4:	3718      	adds	r7, #24
 8020cc6:	46bd      	mov	sp, r7
 8020cc8:	bd80      	pop	{r7, pc}

08020cca <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8020cca:	b580      	push	{r7, lr}
 8020ccc:	b086      	sub	sp, #24
 8020cce:	af00      	add	r7, sp, #0
 8020cd0:	60f8      	str	r0, [r7, #12]
 8020cd2:	60b9      	str	r1, [r7, #8]
 8020cd4:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8020cd6:	2300      	movs	r3, #0
 8020cd8:	617b      	str	r3, [r7, #20]
 8020cda:	e009      	b.n	8020cf0 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8020cdc:	68bb      	ldr	r3, [r7, #8]
 8020cde:	1c5a      	adds	r2, r3, #1
 8020ce0:	60ba      	str	r2, [r7, #8]
 8020ce2:	781b      	ldrb	r3, [r3, #0]
 8020ce4:	4618      	mov	r0, r3
 8020ce6:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8020cea:	697b      	ldr	r3, [r7, #20]
 8020cec:	3301      	adds	r3, #1
 8020cee:	617b      	str	r3, [r7, #20]
 8020cf0:	697a      	ldr	r2, [r7, #20]
 8020cf2:	687b      	ldr	r3, [r7, #4]
 8020cf4:	429a      	cmp	r2, r3
 8020cf6:	dbf1      	blt.n	8020cdc <_write+0x12>
  }
  return len;
 8020cf8:	687b      	ldr	r3, [r7, #4]
}
 8020cfa:	4618      	mov	r0, r3
 8020cfc:	3718      	adds	r7, #24
 8020cfe:	46bd      	mov	sp, r7
 8020d00:	bd80      	pop	{r7, pc}

08020d02 <_close>:

int _close(int file)
{
 8020d02:	b480      	push	{r7}
 8020d04:	b083      	sub	sp, #12
 8020d06:	af00      	add	r7, sp, #0
 8020d08:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8020d0a:	f04f 33ff 	mov.w	r3, #4294967295
}
 8020d0e:	4618      	mov	r0, r3
 8020d10:	370c      	adds	r7, #12
 8020d12:	46bd      	mov	sp, r7
 8020d14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020d18:	4770      	bx	lr

08020d1a <_fstat>:


int _fstat(int file, struct stat *st)
{
 8020d1a:	b480      	push	{r7}
 8020d1c:	b083      	sub	sp, #12
 8020d1e:	af00      	add	r7, sp, #0
 8020d20:	6078      	str	r0, [r7, #4]
 8020d22:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8020d24:	683b      	ldr	r3, [r7, #0]
 8020d26:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8020d2a:	605a      	str	r2, [r3, #4]
  return 0;
 8020d2c:	2300      	movs	r3, #0
}
 8020d2e:	4618      	mov	r0, r3
 8020d30:	370c      	adds	r7, #12
 8020d32:	46bd      	mov	sp, r7
 8020d34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020d38:	4770      	bx	lr

08020d3a <_isatty>:

int _isatty(int file)
{
 8020d3a:	b480      	push	{r7}
 8020d3c:	b083      	sub	sp, #12
 8020d3e:	af00      	add	r7, sp, #0
 8020d40:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8020d42:	2301      	movs	r3, #1
}
 8020d44:	4618      	mov	r0, r3
 8020d46:	370c      	adds	r7, #12
 8020d48:	46bd      	mov	sp, r7
 8020d4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020d4e:	4770      	bx	lr

08020d50 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8020d50:	b480      	push	{r7}
 8020d52:	b085      	sub	sp, #20
 8020d54:	af00      	add	r7, sp, #0
 8020d56:	60f8      	str	r0, [r7, #12]
 8020d58:	60b9      	str	r1, [r7, #8]
 8020d5a:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8020d5c:	2300      	movs	r3, #0
}
 8020d5e:	4618      	mov	r0, r3
 8020d60:	3714      	adds	r7, #20
 8020d62:	46bd      	mov	sp, r7
 8020d64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020d68:	4770      	bx	lr
	...

08020d6c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8020d6c:	b480      	push	{r7}
 8020d6e:	b087      	sub	sp, #28
 8020d70:	af00      	add	r7, sp, #0
 8020d72:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8020d74:	4a14      	ldr	r2, [pc, #80]	; (8020dc8 <_sbrk+0x5c>)
 8020d76:	4b15      	ldr	r3, [pc, #84]	; (8020dcc <_sbrk+0x60>)
 8020d78:	1ad3      	subs	r3, r2, r3
 8020d7a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8020d7c:	697b      	ldr	r3, [r7, #20]
 8020d7e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8020d80:	4b13      	ldr	r3, [pc, #76]	; (8020dd0 <_sbrk+0x64>)
 8020d82:	681b      	ldr	r3, [r3, #0]
 8020d84:	2b00      	cmp	r3, #0
 8020d86:	d102      	bne.n	8020d8e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8020d88:	4b11      	ldr	r3, [pc, #68]	; (8020dd0 <_sbrk+0x64>)
 8020d8a:	4a12      	ldr	r2, [pc, #72]	; (8020dd4 <_sbrk+0x68>)
 8020d8c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8020d8e:	4b10      	ldr	r3, [pc, #64]	; (8020dd0 <_sbrk+0x64>)
 8020d90:	681a      	ldr	r2, [r3, #0]
 8020d92:	687b      	ldr	r3, [r7, #4]
 8020d94:	4413      	add	r3, r2
 8020d96:	693a      	ldr	r2, [r7, #16]
 8020d98:	429a      	cmp	r2, r3
 8020d9a:	d205      	bcs.n	8020da8 <_sbrk+0x3c>
  {
    errno = ENOMEM;
 8020d9c:	4b0e      	ldr	r3, [pc, #56]	; (8020dd8 <_sbrk+0x6c>)
 8020d9e:	220c      	movs	r2, #12
 8020da0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8020da2:	f04f 33ff 	mov.w	r3, #4294967295
 8020da6:	e009      	b.n	8020dbc <_sbrk+0x50>
  }

  prev_heap_end = __sbrk_heap_end;
 8020da8:	4b09      	ldr	r3, [pc, #36]	; (8020dd0 <_sbrk+0x64>)
 8020daa:	681b      	ldr	r3, [r3, #0]
 8020dac:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8020dae:	4b08      	ldr	r3, [pc, #32]	; (8020dd0 <_sbrk+0x64>)
 8020db0:	681a      	ldr	r2, [r3, #0]
 8020db2:	687b      	ldr	r3, [r7, #4]
 8020db4:	4413      	add	r3, r2
 8020db6:	4a06      	ldr	r2, [pc, #24]	; (8020dd0 <_sbrk+0x64>)
 8020db8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8020dba:	68fb      	ldr	r3, [r7, #12]
}
 8020dbc:	4618      	mov	r0, r3
 8020dbe:	371c      	adds	r7, #28
 8020dc0:	46bd      	mov	sp, r7
 8020dc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020dc6:	4770      	bx	lr
 8020dc8:	20020000 	.word	0x20020000
 8020dcc:	00000400 	.word	0x00000400
 8020dd0:	200003dc 	.word	0x200003dc
 8020dd4:	2000f070 	.word	0x2000f070
 8020dd8:	2000f06c 	.word	0x2000f06c

08020ddc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8020ddc:	b480      	push	{r7}
 8020dde:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8020de0:	4b07      	ldr	r3, [pc, #28]	; (8020e00 <SystemInit+0x24>)
 8020de2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8020de6:	4a06      	ldr	r2, [pc, #24]	; (8020e00 <SystemInit+0x24>)
 8020de8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8020dec:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  SystemInit_ExtMemCtl(); 
#endif /* DATA_IN_ExtSRAM || DATA_IN_ExtSDRAM */

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
 8020df0:	4b03      	ldr	r3, [pc, #12]	; (8020e00 <SystemInit+0x24>)
 8020df2:	4a04      	ldr	r2, [pc, #16]	; (8020e04 <SystemInit+0x28>)
 8020df4:	609a      	str	r2, [r3, #8]
#endif /* USER_VECT_TAB_ADDRESS */
}
 8020df6:	bf00      	nop
 8020df8:	46bd      	mov	sp, r7
 8020dfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020dfe:	4770      	bx	lr
 8020e00:	e000ed00 	.word	0xe000ed00
 8020e04:	08020000 	.word	0x08020000

08020e08 <__NVIC_SystemReset>:
{
 8020e08:	b480      	push	{r7}
 8020e0a:	af00      	add	r7, sp, #0
  __ASM volatile ("dsb 0xF":::"memory");
 8020e0c:	f3bf 8f4f 	dsb	sy
}
 8020e10:	bf00      	nop
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8020e12:	4b06      	ldr	r3, [pc, #24]	; (8020e2c <__NVIC_SystemReset+0x24>)
 8020e14:	68db      	ldr	r3, [r3, #12]
 8020e16:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8020e1a:	4904      	ldr	r1, [pc, #16]	; (8020e2c <__NVIC_SystemReset+0x24>)
 8020e1c:	4b04      	ldr	r3, [pc, #16]	; (8020e30 <__NVIC_SystemReset+0x28>)
 8020e1e:	4313      	orrs	r3, r2
 8020e20:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 8020e22:	f3bf 8f4f 	dsb	sy
}
 8020e26:	bf00      	nop
    __NOP();
 8020e28:	bf00      	nop
 8020e2a:	e7fd      	b.n	8020e28 <__NVIC_SystemReset+0x20>
 8020e2c:	e000ed00 	.word	0xe000ed00
 8020e30:	05fa0004 	.word	0x05fa0004

08020e34 <devparse>:
sys_mutex_t* conn_mu;

#ifndef DEVPARSE
#define DEVPARSE
parse_t devparse(char *data, u16_t len, char *response, u16_t *ret_len,
		int connfd) {
 8020e34:	b580      	push	{r7, lr}
 8020e36:	b086      	sub	sp, #24
 8020e38:	af00      	add	r7, sp, #0
 8020e3a:	60f8      	str	r0, [r7, #12]
 8020e3c:	607a      	str	r2, [r7, #4]
 8020e3e:	603b      	str	r3, [r7, #0]
 8020e40:	460b      	mov	r3, r1
 8020e42:	817b      	strh	r3, [r7, #10]
	 *  	6 bits: opcode
	 */

	char *str;

	if (len > 0) {
 8020e44:	897b      	ldrh	r3, [r7, #10]
 8020e46:	2b00      	cmp	r3, #0
 8020e48:	d077      	beq.n	8020f3a <devparse+0x106>

		u8_t opcode = (*data); //>> 2); // get opcode from first 6 bits
 8020e4a:	68fb      	ldr	r3, [r7, #12]
 8020e4c:	781b      	ldrb	r3, [r3, #0]
 8020e4e:	75fb      	strb	r3, [r7, #23]

		switch (opcode) {
 8020e50:	7dfb      	ldrb	r3, [r7, #23]
 8020e52:	3b41      	subs	r3, #65	; 0x41
 8020e54:	2b11      	cmp	r3, #17
 8020e56:	d85f      	bhi.n	8020f18 <devparse+0xe4>
 8020e58:	a201      	add	r2, pc, #4	; (adr r2, 8020e60 <devparse+0x2c>)
 8020e5a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8020e5e:	bf00      	nop
 8020e60:	08020ea9 	.word	0x08020ea9
 8020e64:	08020f19 	.word	0x08020f19
 8020e68:	08020f19 	.word	0x08020f19
 8020e6c:	08020f19 	.word	0x08020f19
 8020e70:	08020f19 	.word	0x08020f19
 8020e74:	08020f19 	.word	0x08020f19
 8020e78:	08020ef9 	.word	0x08020ef9
 8020e7c:	08020f19 	.word	0x08020f19
 8020e80:	08020edd 	.word	0x08020edd
 8020e84:	08020f19 	.word	0x08020f19
 8020e88:	08020f19 	.word	0x08020f19
 8020e8c:	08020f19 	.word	0x08020f19
 8020e90:	08020f19 	.word	0x08020f19
 8020e94:	08020f19 	.word	0x08020f19
 8020e98:	08020f19 	.word	0x08020f19
 8020e9c:	08020f19 	.word	0x08020f19
 8020ea0:	08020f19 	.word	0x08020f19
 8020ea4:	08020ef5 	.word	0x08020ef5
		case 'A':
			HAL_GPIO_TogglePin(LED1_GPIO_Port, LED1_Pin); // Toggle LED1
 8020ea8:	2180      	movs	r1, #128	; 0x80
 8020eaa:	4826      	ldr	r0, [pc, #152]	; (8020f44 <devparse+0x110>)
 8020eac:	f002 fb23 	bl	80234f6 <HAL_GPIO_TogglePin>

			str = malloc(15);
 8020eb0:	200f      	movs	r0, #15
 8020eb2:	f017 fcbf 	bl	8038834 <malloc>
 8020eb6:	4603      	mov	r3, r0
 8020eb8:	613b      	str	r3, [r7, #16]
			memcpy(str, "Toggled LED1\r\n", 15);
 8020eba:	220f      	movs	r2, #15
 8020ebc:	4922      	ldr	r1, [pc, #136]	; (8020f48 <devparse+0x114>)
 8020ebe:	6938      	ldr	r0, [r7, #16]
 8020ec0:	f017 fcd8 	bl	8038874 <memcpy>
			*ret_len = strlen(str);
 8020ec4:	6938      	ldr	r0, [r7, #16]
 8020ec6:	f7ff f983 	bl	80201d0 <strlen>
 8020eca:	4603      	mov	r3, r0
 8020ecc:	b29a      	uxth	r2, r3
 8020ece:	683b      	ldr	r3, [r7, #0]
 8020ed0:	801a      	strh	r2, [r3, #0]
			strcpy(response, str);
 8020ed2:	6939      	ldr	r1, [r7, #16]
 8020ed4:	6878      	ldr	r0, [r7, #4]
 8020ed6:	f018 fa50 	bl	803937a <strcpy>

			break;
 8020eda:	e02c      	b.n	8020f36 <devparse+0x102>
		case 'I':
			/*
			 * Set IAP Flag
			 */
			HAL_PWR_EnableBkUpAccess();
 8020edc:	f002 fb26 	bl	802352c <HAL_PWR_EnableBkUpAccess>
			// Clears IAP Flag in RTC Backup data Register 1
			HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_DR1, 0xDEE2);
 8020ee0:	f64d 62e2 	movw	r2, #57058	; 0xdee2
 8020ee4:	2101      	movs	r1, #1
 8020ee6:	4819      	ldr	r0, [pc, #100]	; (8020f4c <devparse+0x118>)
 8020ee8:	f003 f99a 	bl	8024220 <HAL_RTCEx_BKUPWrite>
			HAL_PWR_DisableBkUpAccess();
 8020eec:	f002 fb32 	bl	8023554 <HAL_PWR_DisableBkUpAccess>
			*ret_len = strlen(str);
			strcpy(response, str);

			server_sendMsg(connfd, response, ret_len, 0);*/

			NVIC_SystemReset();
 8020ef0:	f7ff ff8a 	bl	8020e08 <__NVIC_SystemReset>
			*ret_len = strlen(str);
			strcpy(response, str);

			server_sendMsg(connfd, response, ret_len, 0);*/

			NVIC_SystemReset();
 8020ef4:	f7ff ff88 	bl	8020e08 <__NVIC_SystemReset>
			break;

		case 'G':
			*ret_len = strlen(GIT_INFO);
 8020ef8:	4b15      	ldr	r3, [pc, #84]	; (8020f50 <devparse+0x11c>)
 8020efa:	681b      	ldr	r3, [r3, #0]
 8020efc:	4618      	mov	r0, r3
 8020efe:	f7ff f967 	bl	80201d0 <strlen>
 8020f02:	4603      	mov	r3, r0
 8020f04:	b29a      	uxth	r2, r3
 8020f06:	683b      	ldr	r3, [r7, #0]
 8020f08:	801a      	strh	r2, [r3, #0]
			strcpy(response, GIT_INFO);
 8020f0a:	4b11      	ldr	r3, [pc, #68]	; (8020f50 <devparse+0x11c>)
 8020f0c:	681b      	ldr	r3, [r3, #0]
 8020f0e:	4619      	mov	r1, r3
 8020f10:	6878      	ldr	r0, [r7, #4]
 8020f12:	f018 fa32 	bl	803937a <strcpy>

			break;
 8020f16:	e00e      	b.n	8020f36 <devparse+0x102>

		default:
			str = malloc(18);
 8020f18:	2012      	movs	r0, #18
 8020f1a:	f017 fc8b 	bl	8038834 <malloc>
 8020f1e:	4603      	mov	r3, r0
 8020f20:	613b      	str	r3, [r7, #16]
			memcpy(str, "Unknown Command\r\n", 18);
 8020f22:	2212      	movs	r2, #18
 8020f24:	490b      	ldr	r1, [pc, #44]	; (8020f54 <devparse+0x120>)
 8020f26:	6938      	ldr	r0, [r7, #16]
 8020f28:	f017 fca4 	bl	8038874 <memcpy>
			strcpy(response, str);
 8020f2c:	6939      	ldr	r1, [r7, #16]
 8020f2e:	6878      	ldr	r0, [r7, #4]
 8020f30:	f018 fa23 	bl	803937a <strcpy>

			break;
 8020f34:	bf00      	nop
		}

		return PARSE_OK;
 8020f36:	2300      	movs	r3, #0
 8020f38:	e000      	b.n	8020f3c <devparse+0x108>
	} else {
		return PARSE_ERR;
 8020f3a:	2301      	movs	r3, #1
	}

}
 8020f3c:	4618      	mov	r0, r3
 8020f3e:	3718      	adds	r7, #24
 8020f40:	46bd      	mov	sp, r7
 8020f42:	bd80      	pop	{r7, pc}
 8020f44:	40020800 	.word	0x40020800
 8020f48:	08039a50 	.word	0x08039a50
 8020f4c:	20000368 	.word	0x20000368
 8020f50:	20000004 	.word	0x20000004
 8020f54:	08039a60 	.word	0x08039a60

08020f58 <msgFreeCallback>:
#endif

void msgFreeCallback(void * data) {
 8020f58:	b580      	push	{r7, lr}
 8020f5a:	b082      	sub	sp, #8
 8020f5c:	af00      	add	r7, sp, #0
 8020f5e:	6078      	str	r0, [r7, #4]
	free(data);
 8020f60:	6878      	ldr	r0, [r7, #4]
 8020f62:	f017 fc6f 	bl	8038844 <free>
}
 8020f66:	bf00      	nop
 8020f68:	3708      	adds	r7, #8
 8020f6a:	46bd      	mov	sp, r7
 8020f6c:	bd80      	pop	{r7, pc}
	...

08020f70 <server_init>:

/*
 * Starts the TCP server
 * Creates a listen thread, a recv thread, and a send thread
 */
void server_init() {
 8020f70:	b580      	push	{r7, lr}
 8020f72:	b084      	sub	sp, #16
 8020f74:	af02      	add	r7, sp, #8

	memset(connections, -1, MAX_CONN_NUM * sizeof(int));
 8020f76:	2220      	movs	r2, #32
 8020f78:	f04f 31ff 	mov.w	r1, #4294967295
 8020f7c:	4823      	ldr	r0, [pc, #140]	; (802100c <server_init+0x9c>)
 8020f7e:	f017 fc87 	bl	8038890 <memset>

	conn_mu = malloc(sizeof(sys_mutex_t));
 8020f82:	2004      	movs	r0, #4
 8020f84:	f017 fc56 	bl	8038834 <malloc>
 8020f88:	4603      	mov	r3, r0
 8020f8a:	461a      	mov	r2, r3
 8020f8c:	4b20      	ldr	r3, [pc, #128]	; (8021010 <server_init+0xa0>)
 8020f8e:	601a      	str	r2, [r3, #0]
	err_t err = sys_mutex_new(conn_mu);
 8020f90:	4b1f      	ldr	r3, [pc, #124]	; (8021010 <server_init+0xa0>)
 8020f92:	681b      	ldr	r3, [r3, #0]
 8020f94:	4618      	mov	r0, r3
 8020f96:	f017 fa5b 	bl	8038450 <sys_mutex_new>
 8020f9a:	4603      	mov	r3, r0
 8020f9c:	71fb      	strb	r3, [r7, #7]

	// size of list element is max message size + length and connfd integers
	rxMsgBuffer = list_create(MAX_MSG_LEN + 2*sizeof(int), msgFreeCallback);
 8020f9e:	491d      	ldr	r1, [pc, #116]	; (8021014 <server_init+0xa4>)
 8020fa0:	f44f 709a 	mov.w	r0, #308	; 0x134
 8020fa4:	f000 fab6 	bl	8021514 <list_create>
 8020fa8:	4603      	mov	r3, r0
 8020faa:	4a1b      	ldr	r2, [pc, #108]	; (8021018 <server_init+0xa8>)
 8020fac:	6013      	str	r3, [r2, #0]
	txMsgBuffer = list_create(MAX_MSG_LEN + 2*sizeof(int), msgFreeCallback);
 8020fae:	4919      	ldr	r1, [pc, #100]	; (8021014 <server_init+0xa4>)
 8020fb0:	f44f 709a 	mov.w	r0, #308	; 0x134
 8020fb4:	f000 faae 	bl	8021514 <list_create>
 8020fb8:	4603      	mov	r3, r0
 8020fba:	4a18      	ldr	r2, [pc, #96]	; (802101c <server_init+0xac>)
 8020fbc:	6013      	str	r3, [r2, #0]

	if (err == ERR_OK) {
 8020fbe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8020fc2:	2b00      	cmp	r3, #0
 8020fc4:	d11b      	bne.n	8020ffe <server_init+0x8e>

		// prime server to connect to clients
		if ( NULL == sys_thread_new("server_listen_thread", server_listen, NULL, 512,
 8020fc6:	2300      	movs	r3, #0
 8020fc8:	9300      	str	r3, [sp, #0]
 8020fca:	f44f 7300 	mov.w	r3, #512	; 0x200
 8020fce:	2200      	movs	r2, #0
 8020fd0:	4913      	ldr	r1, [pc, #76]	; (8021020 <server_init+0xb0>)
 8020fd2:	4814      	ldr	r0, [pc, #80]	; (8021024 <server_init+0xb4>)
 8020fd4:	f017 fa94 	bl	8038500 <sys_thread_new>
						osPriorityNormal)) {
		}

		// prime server to receive messages from clients
		if ( NULL == sys_thread_new("server_recv_thread", server_recv, NULL, 512,
 8020fd8:	2300      	movs	r3, #0
 8020fda:	9300      	str	r3, [sp, #0]
 8020fdc:	f44f 7300 	mov.w	r3, #512	; 0x200
 8020fe0:	2200      	movs	r2, #0
 8020fe2:	4911      	ldr	r1, [pc, #68]	; (8021028 <server_init+0xb8>)
 8020fe4:	4811      	ldr	r0, [pc, #68]	; (802102c <server_init+0xbc>)
 8020fe6:	f017 fa8b 	bl	8038500 <sys_thread_new>
						osPriorityNormal)) {
		}

		// prime server to send messages to clients
		if ( NULL == sys_thread_new("server_recv_thread", server_send, NULL, 512,
 8020fea:	2300      	movs	r3, #0
 8020fec:	9300      	str	r3, [sp, #0]
 8020fee:	f44f 7300 	mov.w	r3, #512	; 0x200
 8020ff2:	2200      	movs	r2, #0
 8020ff4:	490e      	ldr	r1, [pc, #56]	; (8021030 <server_init+0xc0>)
 8020ff6:	480d      	ldr	r0, [pc, #52]	; (802102c <server_init+0xbc>)
 8020ff8:	f017 fa82 	bl	8038500 <sys_thread_new>
		}
	}
	else {
		printf("Error in server init\r\n");
	}
}
 8020ffc:	e002      	b.n	8021004 <server_init+0x94>
		printf("Error in server init\r\n");
 8020ffe:	480d      	ldr	r0, [pc, #52]	; (8021034 <server_init+0xc4>)
 8021000:	f018 f8b8 	bl	8039174 <puts>
}
 8021004:	bf00      	nop
 8021006:	3708      	adds	r7, #8
 8021008:	46bd      	mov	sp, r7
 802100a:	bd80      	pop	{r7, pc}
 802100c:	200003e8 	.word	0x200003e8
 8021010:	20000408 	.word	0x20000408
 8021014:	08020f59 	.word	0x08020f59
 8021018:	200003e0 	.word	0x200003e0
 802101c:	200003e4 	.word	0x200003e4
 8021020:	08021039 	.word	0x08021039
 8021024:	08039a74 	.word	0x08039a74
 8021028:	080212f1 	.word	0x080212f1
 802102c:	08039a8c 	.word	0x08039a8c
 8021030:	08021419 	.word	0x08021419
 8021034:	08039aa0 	.word	0x08039aa0

08021038 <server_listen>:

/*
 * Sets the server in listen mode
 * When a connection is established, a fd is generated and pushed to the connections list for use
 */
void server_listen(void *arg) {
 8021038:	b580      	push	{r7, lr}
 802103a:	b08e      	sub	sp, #56	; 0x38
 802103c:	af00      	add	r7, sp, #0
 802103e:	6078      	str	r0, [r7, #4]
	int listen_sockfd, connfd;
	socklen_t clilen;

	/* IPv4 socket address structure */
	struct sockaddr_in serv, cli;
	serv.sin_family = AF_INET;
 8021040:	2302      	movs	r3, #2
 8021042:	767b      	strb	r3, [r7, #25]
	serv.sin_port = htons(SERVER_PORT);
 8021044:	f24c 3050 	movw	r0, #50000	; 0xc350
 8021048:	f00b fc6c 	bl	802c924 <lwip_htons>
 802104c:	4603      	mov	r3, r0
 802104e:	837b      	strh	r3, [r7, #26]
	serv.sin_addr.s_addr = (in_addr_t) ipaddr.addr;
 8021050:	4b19      	ldr	r3, [pc, #100]	; (80210b8 <server_listen+0x80>)
 8021052:	681b      	ldr	r3, [r3, #0]
 8021054:	61fb      	str	r3, [r7, #28]

	LWIP_UNUSED_ARG(arg);

	/* Create a new socket fd for listening */
	listen_sockfd = socket(AF_INET, SOCK_STREAM, 6); // 6 is the DARPA protocol # for tcp
 8021056:	2206      	movs	r2, #6
 8021058:	2101      	movs	r1, #1
 802105a:	2002      	movs	r0, #2
 802105c:	f00a fc96 	bl	802b98c <lwip_socket>
 8021060:	6378      	str	r0, [r7, #52]	; 0x34

	if (listen_sockfd != -1) {
 8021062:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8021064:	f1b3 3fff 	cmp.w	r3, #4294967295
 8021068:	d021      	beq.n	80210ae <server_listen+0x76>
		/* Bind socket to server port */
		err = bind(listen_sockfd, (struct sockaddr* ) &serv, sizeof(serv));
 802106a:	f107 0318 	add.w	r3, r7, #24
 802106e:	2210      	movs	r2, #16
 8021070:	4619      	mov	r1, r3
 8021072:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8021074:	f009 ff36 	bl	802aee4 <lwip_bind>
 8021078:	6338      	str	r0, [r7, #48]	; 0x30

		if (err == 0) {
 802107a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 802107c:	2b00      	cmp	r3, #0
 802107e:	d113      	bne.n	80210a8 <server_listen+0x70>
			/* Tell connection to go into listening mode. */
			err = listen(listen_sockfd, MAX_CONN_NUM);
 8021080:	2108      	movs	r1, #8
 8021082:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8021084:	f009 fff2 	bl	802b06c <lwip_listen>
 8021088:	6338      	str	r0, [r7, #48]	; 0x30

			for (;;) {
				clilen = sizeof(cli);
 802108a:	2310      	movs	r3, #16
 802108c:	62bb      	str	r3, [r7, #40]	; 0x28

				// Block until new connection, accept any that appear
				connfd = accept(listen_sockfd, (struct sockaddr* ) &cli, &clilen);
 802108e:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8021092:	f107 0308 	add.w	r3, r7, #8
 8021096:	4619      	mov	r1, r3
 8021098:	6b78      	ldr	r0, [r7, #52]	; 0x34
 802109a:	f009 fe05 	bl	802aca8 <lwip_accept>
 802109e:	62f8      	str	r0, [r7, #44]	; 0x2c

				server_addConnection(connfd);
 80210a0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80210a2:	f000 f80b 	bl	80210bc <server_addConnection>
				clilen = sizeof(cli);
 80210a6:	e7f0      	b.n	802108a <server_listen+0x52>
			} // end for(;;)
		} else { // Bind failed
			close(listen_sockfd);
 80210a8:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80210aa:	f009 ff89 	bl	802afc0 <lwip_close>
		}
	} else { // Socket creation failed

	}
}
 80210ae:	bf00      	nop
 80210b0:	3738      	adds	r7, #56	; 0x38
 80210b2:	46bd      	mov	sp, r7
 80210b4:	bd80      	pop	{r7, pc}
 80210b6:	bf00      	nop
 80210b8:	20000444 	.word	0x20000444

080210bc <server_addConnection>:

/*
 * Adds socket to connections list
 */
void server_addConnection(int connfd) {
 80210bc:	b580      	push	{r7, lr}
 80210be:	b084      	sub	sp, #16
 80210c0:	af00      	add	r7, sp, #0
 80210c2:	6078      	str	r0, [r7, #4]

	sys_mutex_lock(conn_mu);
 80210c4:	4b13      	ldr	r3, [pc, #76]	; (8021114 <server_addConnection+0x58>)
 80210c6:	681b      	ldr	r3, [r3, #0]
 80210c8:	4618      	mov	r0, r3
 80210ca:	f017 f9fd 	bl	80384c8 <sys_mutex_lock>

	for (int i = 0; i < MAX_CONN_NUM; ++i) {
 80210ce:	2300      	movs	r3, #0
 80210d0:	60fb      	str	r3, [r7, #12]
 80210d2:	e014      	b.n	80210fe <server_addConnection+0x42>
		if (connections[i] == -1) {
 80210d4:	4a10      	ldr	r2, [pc, #64]	; (8021118 <server_addConnection+0x5c>)
 80210d6:	68fb      	ldr	r3, [r7, #12]
 80210d8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80210dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80210e0:	d10a      	bne.n	80210f8 <server_addConnection+0x3c>
			connections[i] = connfd;
 80210e2:	490d      	ldr	r1, [pc, #52]	; (8021118 <server_addConnection+0x5c>)
 80210e4:	68fb      	ldr	r3, [r7, #12]
 80210e6:	687a      	ldr	r2, [r7, #4]
 80210e8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

			sys_mutex_unlock(conn_mu);
 80210ec:	4b09      	ldr	r3, [pc, #36]	; (8021114 <server_addConnection+0x58>)
 80210ee:	681b      	ldr	r3, [r3, #0]
 80210f0:	4618      	mov	r0, r3
 80210f2:	f017 f9f8 	bl	80384e6 <sys_mutex_unlock>
			return;
 80210f6:	e00a      	b.n	802110e <server_addConnection+0x52>
	for (int i = 0; i < MAX_CONN_NUM; ++i) {
 80210f8:	68fb      	ldr	r3, [r7, #12]
 80210fa:	3301      	adds	r3, #1
 80210fc:	60fb      	str	r3, [r7, #12]
 80210fe:	68fb      	ldr	r3, [r7, #12]
 8021100:	2b07      	cmp	r3, #7
 8021102:	dde7      	ble.n	80210d4 <server_addConnection+0x18>
		}
	}

	sys_mutex_unlock(conn_mu);
 8021104:	4b03      	ldr	r3, [pc, #12]	; (8021114 <server_addConnection+0x58>)
 8021106:	681b      	ldr	r3, [r3, #0]
 8021108:	4618      	mov	r0, r3
 802110a:	f017 f9ec 	bl	80384e6 <sys_mutex_unlock>

}
 802110e:	3710      	adds	r7, #16
 8021110:	46bd      	mov	sp, r7
 8021112:	bd80      	pop	{r7, pc}
 8021114:	20000408 	.word	0x20000408
 8021118:	200003e8 	.word	0x200003e8

0802111c <server_removeConnection>:

/*
 * Removes socket from connections list and frees fd for a new socket to use
 */
void server_removeConnection(int connfd) {
 802111c:	b580      	push	{r7, lr}
 802111e:	b084      	sub	sp, #16
 8021120:	af00      	add	r7, sp, #0
 8021122:	6078      	str	r0, [r7, #4]

	sys_mutex_lock(conn_mu);
 8021124:	4b15      	ldr	r3, [pc, #84]	; (802117c <server_removeConnection+0x60>)
 8021126:	681b      	ldr	r3, [r3, #0]
 8021128:	4618      	mov	r0, r3
 802112a:	f017 f9cd 	bl	80384c8 <sys_mutex_lock>

	for (int i = 0; i < MAX_CONN_NUM; ++i) {
 802112e:	2300      	movs	r3, #0
 8021130:	60fb      	str	r3, [r7, #12]
 8021132:	e018      	b.n	8021166 <server_removeConnection+0x4a>
		if (connections[i] == connfd) {
 8021134:	4a12      	ldr	r2, [pc, #72]	; (8021180 <server_removeConnection+0x64>)
 8021136:	68fb      	ldr	r3, [r7, #12]
 8021138:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 802113c:	687a      	ldr	r2, [r7, #4]
 802113e:	429a      	cmp	r2, r3
 8021140:	d10e      	bne.n	8021160 <server_removeConnection+0x44>
			connections[i] = -1;
 8021142:	4a0f      	ldr	r2, [pc, #60]	; (8021180 <server_removeConnection+0x64>)
 8021144:	68fb      	ldr	r3, [r7, #12]
 8021146:	f04f 31ff 	mov.w	r1, #4294967295
 802114a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
			close(connfd);
 802114e:	6878      	ldr	r0, [r7, #4]
 8021150:	f009 ff36 	bl	802afc0 <lwip_close>

			sys_mutex_unlock(conn_mu);
 8021154:	4b09      	ldr	r3, [pc, #36]	; (802117c <server_removeConnection+0x60>)
 8021156:	681b      	ldr	r3, [r3, #0]
 8021158:	4618      	mov	r0, r3
 802115a:	f017 f9c4 	bl	80384e6 <sys_mutex_unlock>
			return;
 802115e:	e00a      	b.n	8021176 <server_removeConnection+0x5a>
	for (int i = 0; i < MAX_CONN_NUM; ++i) {
 8021160:	68fb      	ldr	r3, [r7, #12]
 8021162:	3301      	adds	r3, #1
 8021164:	60fb      	str	r3, [r7, #12]
 8021166:	68fb      	ldr	r3, [r7, #12]
 8021168:	2b07      	cmp	r3, #7
 802116a:	dde3      	ble.n	8021134 <server_removeConnection+0x18>
		}
	}

	sys_mutex_unlock(conn_mu);
 802116c:	4b03      	ldr	r3, [pc, #12]	; (802117c <server_removeConnection+0x60>)
 802116e:	681b      	ldr	r3, [r3, #0]
 8021170:	4618      	mov	r0, r3
 8021172:	f017 f9b8 	bl	80384e6 <sys_mutex_unlock>
}
 8021176:	3710      	adds	r7, #16
 8021178:	46bd      	mov	sp, r7
 802117a:	bd80      	pop	{r7, pc}
 802117c:	20000408 	.word	0x20000408
 8021180:	200003e8 	.word	0x200003e8

08021184 <server_setFDs>:
	}

	sys_mutex_unlock(conn_mu);
}

void server_setFDs(fd_set *rfds) {
 8021184:	b580      	push	{r7, lr}
 8021186:	b086      	sub	sp, #24
 8021188:	af00      	add	r7, sp, #0
 802118a:	6078      	str	r0, [r7, #4]
	FD_ZERO(rfds);
 802118c:	687b      	ldr	r3, [r7, #4]
 802118e:	60fb      	str	r3, [r7, #12]
 8021190:	2302      	movs	r3, #2
 8021192:	617b      	str	r3, [r7, #20]
 8021194:	e007      	b.n	80211a6 <server_setFDs+0x22>
 8021196:	697b      	ldr	r3, [r7, #20]
 8021198:	3b01      	subs	r3, #1
 802119a:	617b      	str	r3, [r7, #20]
 802119c:	68fb      	ldr	r3, [r7, #12]
 802119e:	697a      	ldr	r2, [r7, #20]
 80211a0:	2100      	movs	r1, #0
 80211a2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 80211a6:	697b      	ldr	r3, [r7, #20]
 80211a8:	2b00      	cmp	r3, #0
 80211aa:	d1f4      	bne.n	8021196 <server_setFDs+0x12>

	sys_mutex_lock(conn_mu);
 80211ac:	4b1d      	ldr	r3, [pc, #116]	; (8021224 <server_setFDs+0xa0>)
 80211ae:	681b      	ldr	r3, [r3, #0]
 80211b0:	4618      	mov	r0, r3
 80211b2:	f017 f989 	bl	80384c8 <sys_mutex_lock>

	for (int i = 0; i < MAX_CONN_NUM; ++i) {
 80211b6:	2300      	movs	r3, #0
 80211b8:	613b      	str	r3, [r7, #16]
 80211ba:	e027      	b.n	802120c <server_setFDs+0x88>
		if (connections[i] != -1) {
 80211bc:	4a1a      	ldr	r2, [pc, #104]	; (8021228 <server_setFDs+0xa4>)
 80211be:	693b      	ldr	r3, [r7, #16]
 80211c0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80211c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80211c8:	d01d      	beq.n	8021206 <server_setFDs+0x82>
			FD_SET(connections[i], rfds);
 80211ca:	4a17      	ldr	r2, [pc, #92]	; (8021228 <server_setFDs+0xa4>)
 80211cc:	693b      	ldr	r3, [r7, #16]
 80211ce:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80211d2:	2b00      	cmp	r3, #0
 80211d4:	da00      	bge.n	80211d8 <server_setFDs+0x54>
 80211d6:	331f      	adds	r3, #31
 80211d8:	115b      	asrs	r3, r3, #5
 80211da:	461a      	mov	r2, r3
 80211dc:	687b      	ldr	r3, [r7, #4]
 80211de:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80211e2:	4811      	ldr	r0, [pc, #68]	; (8021228 <server_setFDs+0xa4>)
 80211e4:	693b      	ldr	r3, [r7, #16]
 80211e6:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 80211ea:	4258      	negs	r0, r3
 80211ec:	f003 031f 	and.w	r3, r3, #31
 80211f0:	f000 001f 	and.w	r0, r0, #31
 80211f4:	bf58      	it	pl
 80211f6:	4243      	negpl	r3, r0
 80211f8:	2001      	movs	r0, #1
 80211fa:	fa00 f303 	lsl.w	r3, r0, r3
 80211fe:	4319      	orrs	r1, r3
 8021200:	687b      	ldr	r3, [r7, #4]
 8021202:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	for (int i = 0; i < MAX_CONN_NUM; ++i) {
 8021206:	693b      	ldr	r3, [r7, #16]
 8021208:	3301      	adds	r3, #1
 802120a:	613b      	str	r3, [r7, #16]
 802120c:	693b      	ldr	r3, [r7, #16]
 802120e:	2b07      	cmp	r3, #7
 8021210:	ddd4      	ble.n	80211bc <server_setFDs+0x38>
		}
	}

	sys_mutex_unlock(conn_mu);
 8021212:	4b04      	ldr	r3, [pc, #16]	; (8021224 <server_setFDs+0xa0>)
 8021214:	681b      	ldr	r3, [r3, #0]
 8021216:	4618      	mov	r0, r3
 8021218:	f017 f965 	bl	80384e6 <sys_mutex_unlock>
}
 802121c:	bf00      	nop
 802121e:	3718      	adds	r7, #24
 8021220:	46bd      	mov	sp, r7
 8021222:	bd80      	pop	{r7, pc}
 8021224:	20000408 	.word	0x20000408
 8021228:	200003e8 	.word	0x200003e8

0802122c <server_handleRecv>:

void server_handleRecv(fd_set *rfds) {
 802122c:	b580      	push	{r7, lr}
 802122e:	b08a      	sub	sp, #40	; 0x28
 8021230:	af00      	add	r7, sp, #0
 8021232:	6078      	str	r0, [r7, #4]

	sys_mutex_lock(conn_mu);
 8021234:	4b2b      	ldr	r3, [pc, #172]	; (80212e4 <server_handleRecv+0xb8>)
 8021236:	681b      	ldr	r3, [r3, #0]
 8021238:	4618      	mov	r0, r3
 802123a:	f017 f945 	bl	80384c8 <sys_mutex_lock>

	for (int i = 0; i < MAX_CONN_NUM; ++i) {
 802123e:	2300      	movs	r3, #0
 8021240:	627b      	str	r3, [r7, #36]	; 0x24
 8021242:	e046      	b.n	80212d2 <server_handleRecv+0xa6>

		if (connections[i] != -1) {
 8021244:	4a28      	ldr	r2, [pc, #160]	; (80212e8 <server_handleRecv+0xbc>)
 8021246:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8021248:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 802124c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8021250:	d037      	beq.n	80212c2 <server_handleRecv+0x96>
			int connfd = connections[i];
 8021252:	4a25      	ldr	r2, [pc, #148]	; (80212e8 <server_handleRecv+0xbc>)
 8021254:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8021256:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 802125a:	623b      	str	r3, [r7, #32]

			if (FD_ISSET(connfd, rfds)) { // FD data recv
 802125c:	6a3b      	ldr	r3, [r7, #32]
 802125e:	2b00      	cmp	r3, #0
 8021260:	da00      	bge.n	8021264 <server_handleRecv+0x38>
 8021262:	331f      	adds	r3, #31
 8021264:	115b      	asrs	r3, r3, #5
 8021266:	461a      	mov	r2, r3
 8021268:	687b      	ldr	r3, [r7, #4]
 802126a:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 802126e:	6a3b      	ldr	r3, [r7, #32]
 8021270:	4259      	negs	r1, r3
 8021272:	f003 031f 	and.w	r3, r3, #31
 8021276:	f001 011f 	and.w	r1, r1, #31
 802127a:	bf58      	it	pl
 802127c:	424b      	negpl	r3, r1
 802127e:	fa22 f303 	lsr.w	r3, r2, r3
 8021282:	f003 0301 	and.w	r3, r3, #1
 8021286:	2b00      	cmp	r3, #0
 8021288:	d01b      	beq.n	80212c2 <server_handleRecv+0x96>

				char* buf = malloc(MAX_MSG_LEN);
 802128a:	f44f 7096 	mov.w	r0, #300	; 0x12c
 802128e:	f017 fad1 	bl	8038834 <malloc>
 8021292:	4603      	mov	r3, r0
 8021294:	61fb      	str	r3, [r7, #28]

				int n = recv(connfd, buf, MAX_MSG_LEN, 0);
 8021296:	2300      	movs	r3, #0
 8021298:	f44f 7296 	mov.w	r2, #300	; 0x12c
 802129c:	69f9      	ldr	r1, [r7, #28]
 802129e:	6a38      	ldr	r0, [r7, #32]
 80212a0:	f00a fa4e 	bl	802b740 <lwip_recv>
 80212a4:	61b8      	str	r0, [r7, #24]
				// recv all waiting data

				struct message msg = {connfd, buf, n};
 80212a6:	6a3b      	ldr	r3, [r7, #32]
 80212a8:	60fb      	str	r3, [r7, #12]
 80212aa:	69fb      	ldr	r3, [r7, #28]
 80212ac:	613b      	str	r3, [r7, #16]
 80212ae:	69bb      	ldr	r3, [r7, #24]
 80212b0:	617b      	str	r3, [r7, #20]

				list_push(rxMsgBuffer, (void*)(&msg));
 80212b2:	4b0e      	ldr	r3, [pc, #56]	; (80212ec <server_handleRecv+0xc0>)
 80212b4:	681b      	ldr	r3, [r3, #0]
 80212b6:	f107 020c 	add.w	r2, r7, #12
 80212ba:	4611      	mov	r1, r2
 80212bc:	4618      	mov	r0, r3
 80212be:	f000 f8fb 	bl	80214b8 <list_push>

			}
		}
		sys_mutex_unlock(conn_mu);
 80212c2:	4b08      	ldr	r3, [pc, #32]	; (80212e4 <server_handleRecv+0xb8>)
 80212c4:	681b      	ldr	r3, [r3, #0]
 80212c6:	4618      	mov	r0, r3
 80212c8:	f017 f90d 	bl	80384e6 <sys_mutex_unlock>
	for (int i = 0; i < MAX_CONN_NUM; ++i) {
 80212cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80212ce:	3301      	adds	r3, #1
 80212d0:	627b      	str	r3, [r7, #36]	; 0x24
 80212d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80212d4:	2b07      	cmp	r3, #7
 80212d6:	ddb5      	ble.n	8021244 <server_handleRecv+0x18>
	}
}
 80212d8:	bf00      	nop
 80212da:	bf00      	nop
 80212dc:	3728      	adds	r7, #40	; 0x28
 80212de:	46bd      	mov	sp, r7
 80212e0:	bd80      	pop	{r7, pc}
 80212e2:	bf00      	nop
 80212e4:	20000408 	.word	0x20000408
 80212e8:	200003e8 	.word	0x200003e8
 80212ec:	200003e0 	.word	0x200003e0

080212f0 <server_recv>:

void server_recv(void *arg) {
 80212f0:	b580      	push	{r7, lr}
 80212f2:	b08c      	sub	sp, #48	; 0x30
 80212f4:	af02      	add	r7, sp, #8
 80212f6:	6078      	str	r0, [r7, #4]
	LWIP_UNUSED_ARG(arg);

	/* Process the new connection. */
	/* receive the data from the client */
	for (;;) {
		server_setFDs(&rfds);
 80212f8:	f107 031c 	add.w	r3, r7, #28
 80212fc:	4618      	mov	r0, r3
 80212fe:	f7ff ff41 	bl	8021184 <server_setFDs>

		// Wait 1 second
		tv.tv_sec = 1;
 8021302:	f04f 0201 	mov.w	r2, #1
 8021306:	f04f 0300 	mov.w	r3, #0
 802130a:	e9c7 2302 	strd	r2, r3, [r7, #8]
		tv.tv_usec = 0;
 802130e:	2300      	movs	r3, #0
 8021310:	613b      	str	r3, [r7, #16]

		retval = select(MAX_CONN_NUM+1, &rfds, NULL, NULL, &tv);
 8021312:	f107 011c 	add.w	r1, r7, #28
 8021316:	f107 0308 	add.w	r3, r7, #8
 802131a:	9300      	str	r3, [sp, #0]
 802131c:	2300      	movs	r3, #0
 802131e:	2200      	movs	r2, #0
 8021320:	2009      	movs	r0, #9
 8021322:	f00a fd99 	bl	802be58 <lwip_select>
 8021326:	6278      	str	r0, [r7, #36]	; 0x24

		if (retval == -1) { // error
 8021328:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802132a:	f1b3 3fff 	cmp.w	r3, #4294967295
 802132e:	d0e3      	beq.n	80212f8 <server_recv+0x8>
			//server_probeConnections();
		} else if (retval) { // FD_ISSET will have some true fd
 8021330:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8021332:	2b00      	cmp	r3, #0
 8021334:	d0e0      	beq.n	80212f8 <server_recv+0x8>
			server_handleRecv(&rfds);
 8021336:	f107 031c 	add.w	r3, r7, #28
 802133a:	4618      	mov	r0, r3
 802133c:	f7ff ff76 	bl	802122c <server_handleRecv>
		server_setFDs(&rfds);
 8021340:	e7da      	b.n	80212f8 <server_recv+0x8>
	...

08021344 <server_sendMsg>:
	server_removeAllConnections();

	vTaskDelete(NULL);
}

void server_sendMsg(int destIP, char* data, int len) {
 8021344:	b580      	push	{r7, lr}
 8021346:	b08c      	sub	sp, #48	; 0x30
 8021348:	af00      	add	r7, sp, #0
 802134a:	60f8      	str	r0, [r7, #12]
 802134c:	60b9      	str	r1, [r7, #8]
 802134e:	607a      	str	r2, [r7, #4]

	if (destIP == ALL_CONNECTIONS) {
 8021350:	68fb      	ldr	r3, [r7, #12]
 8021352:	f1b3 3fff 	cmp.w	r3, #4294967295
 8021356:	d12d      	bne.n	80213b4 <server_sendMsg+0x70>
		sys_mutex_lock(conn_mu);
 8021358:	4b24      	ldr	r3, [pc, #144]	; (80213ec <server_sendMsg+0xa8>)
 802135a:	681b      	ldr	r3, [r3, #0]
 802135c:	4618      	mov	r0, r3
 802135e:	f017 f8b3 	bl	80384c8 <sys_mutex_lock>
		for (int i = 0; i < MAX_CONN_NUM; ++i) {
 8021362:	2300      	movs	r3, #0
 8021364:	62fb      	str	r3, [r7, #44]	; 0x2c
 8021366:	e01c      	b.n	80213a2 <server_sendMsg+0x5e>

			if (connections[i] != -1) {
 8021368:	4a21      	ldr	r2, [pc, #132]	; (80213f0 <server_sendMsg+0xac>)
 802136a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 802136c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8021370:	f1b3 3fff 	cmp.w	r3, #4294967295
 8021374:	d012      	beq.n	802139c <server_sendMsg+0x58>
				int connfd = connections[i];
 8021376:	4a1e      	ldr	r2, [pc, #120]	; (80213f0 <server_sendMsg+0xac>)
 8021378:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 802137a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 802137e:	62bb      	str	r3, [r7, #40]	; 0x28

				struct message msg = {connfd, data, len};
 8021380:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8021382:	61fb      	str	r3, [r7, #28]
 8021384:	68bb      	ldr	r3, [r7, #8]
 8021386:	623b      	str	r3, [r7, #32]
 8021388:	687b      	ldr	r3, [r7, #4]
 802138a:	627b      	str	r3, [r7, #36]	; 0x24

				list_push(txMsgBuffer, (void*)(&msg));
 802138c:	4b19      	ldr	r3, [pc, #100]	; (80213f4 <server_sendMsg+0xb0>)
 802138e:	681b      	ldr	r3, [r3, #0]
 8021390:	f107 021c 	add.w	r2, r7, #28
 8021394:	4611      	mov	r1, r2
 8021396:	4618      	mov	r0, r3
 8021398:	f000 f88e 	bl	80214b8 <list_push>
		for (int i = 0; i < MAX_CONN_NUM; ++i) {
 802139c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 802139e:	3301      	adds	r3, #1
 80213a0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80213a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80213a4:	2b07      	cmp	r3, #7
 80213a6:	dddf      	ble.n	8021368 <server_sendMsg+0x24>
			}
		}
		sys_mutex_unlock(conn_mu);
 80213a8:	4b10      	ldr	r3, [pc, #64]	; (80213ec <server_sendMsg+0xa8>)
 80213aa:	681b      	ldr	r3, [r3, #0]
 80213ac:	4618      	mov	r0, r3
 80213ae:	f017 f89a 	bl	80384e6 <sys_mutex_unlock>
//				break;
//			}
//		}
		sys_mutex_unlock(conn_mu);
	}
}
 80213b2:	e017      	b.n	80213e4 <server_sendMsg+0xa0>
		sys_mutex_lock(conn_mu);
 80213b4:	4b0d      	ldr	r3, [pc, #52]	; (80213ec <server_sendMsg+0xa8>)
 80213b6:	681b      	ldr	r3, [r3, #0]
 80213b8:	4618      	mov	r0, r3
 80213ba:	f017 f885 	bl	80384c8 <sys_mutex_lock>
				struct message msg = {destIP, data, len};
 80213be:	68fb      	ldr	r3, [r7, #12]
 80213c0:	613b      	str	r3, [r7, #16]
 80213c2:	68bb      	ldr	r3, [r7, #8]
 80213c4:	617b      	str	r3, [r7, #20]
 80213c6:	687b      	ldr	r3, [r7, #4]
 80213c8:	61bb      	str	r3, [r7, #24]
				list_push(txMsgBuffer, (void*)(&msg));
 80213ca:	4b0a      	ldr	r3, [pc, #40]	; (80213f4 <server_sendMsg+0xb0>)
 80213cc:	681b      	ldr	r3, [r3, #0]
 80213ce:	f107 0210 	add.w	r2, r7, #16
 80213d2:	4611      	mov	r1, r2
 80213d4:	4618      	mov	r0, r3
 80213d6:	f000 f86f 	bl	80214b8 <list_push>
		sys_mutex_unlock(conn_mu);
 80213da:	4b04      	ldr	r3, [pc, #16]	; (80213ec <server_sendMsg+0xa8>)
 80213dc:	681b      	ldr	r3, [r3, #0]
 80213de:	4618      	mov	r0, r3
 80213e0:	f017 f881 	bl	80384e6 <sys_mutex_unlock>
}
 80213e4:	bf00      	nop
 80213e6:	3730      	adds	r7, #48	; 0x30
 80213e8:	46bd      	mov	sp, r7
 80213ea:	bd80      	pop	{r7, pc}
 80213ec:	20000408 	.word	0x20000408
 80213f0:	200003e8 	.word	0x200003e8
 80213f4:	200003e4 	.word	0x200003e4

080213f8 <server_retrieveMsg>:

void server_retrieveMsg(struct message* msg) {
 80213f8:	b580      	push	{r7, lr}
 80213fa:	b082      	sub	sp, #8
 80213fc:	af00      	add	r7, sp, #0
 80213fe:	6078      	str	r0, [r7, #4]
	list_pop(rxMsgBuffer, (void*)(msg));
 8021400:	4b04      	ldr	r3, [pc, #16]	; (8021414 <server_retrieveMsg+0x1c>)
 8021402:	681b      	ldr	r3, [r3, #0]
 8021404:	6879      	ldr	r1, [r7, #4]
 8021406:	4618      	mov	r0, r3
 8021408:	f000 f863 	bl	80214d2 <list_pop>
}
 802140c:	bf00      	nop
 802140e:	3708      	adds	r7, #8
 8021410:	46bd      	mov	sp, r7
 8021412:	bd80      	pop	{r7, pc}
 8021414:	200003e0 	.word	0x200003e0

08021418 <server_send>:

void server_send(void* args) {
 8021418:	b580      	push	{r7, lr}
 802141a:	b0d0      	sub	sp, #320	; 0x140
 802141c:	af00      	add	r7, sp, #0
 802141e:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8021422:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8021426:	6018      	str	r0, [r3, #0]

	char buf[MAX_MSG_LEN];

	for (;;) {

		struct message msg = {-1, buf, MAX_MSG_LEN};
 8021428:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 802142c:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8021430:	f04f 32ff 	mov.w	r2, #4294967295
 8021434:	601a      	str	r2, [r3, #0]
 8021436:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 802143a:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 802143e:	f107 0214 	add.w	r2, r7, #20
 8021442:	605a      	str	r2, [r3, #4]
 8021444:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8021448:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 802144c:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8021450:	609a      	str	r2, [r3, #8]

		list_pop(txMsgBuffer, (void*)(&msg));
 8021452:	4b18      	ldr	r3, [pc, #96]	; (80214b4 <server_send+0x9c>)
 8021454:	681b      	ldr	r3, [r3, #0]
 8021456:	f107 0208 	add.w	r2, r7, #8
 802145a:	4611      	mov	r1, r2
 802145c:	4618      	mov	r0, r3
 802145e:	f000 f838 	bl	80214d2 <list_pop>

		if (-1 == send(msg.connfd, msg.buf, msg.len, 0)) { // opts = 0
 8021462:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8021466:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 802146a:	6818      	ldr	r0, [r3, #0]
 802146c:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8021470:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8021474:	6859      	ldr	r1, [r3, #4]
 8021476:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 802147a:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 802147e:	689b      	ldr	r3, [r3, #8]
 8021480:	461a      	mov	r2, r3
 8021482:	2300      	movs	r3, #0
 8021484:	f00a f972 	bl	802b76c <lwip_send>
 8021488:	4603      	mov	r3, r0
 802148a:	f1b3 3fff 	cmp.w	r3, #4294967295
 802148e:	d107      	bne.n	80214a0 <server_send+0x88>
			// message failed to send
			server_removeConnection(msg.connfd);
 8021490:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8021494:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8021498:	681b      	ldr	r3, [r3, #0]
 802149a:	4618      	mov	r0, r3
 802149c:	f7ff fe3e 	bl	802111c <server_removeConnection>
		}

		free(msg.buf);
 80214a0:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 80214a4:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 80214a8:	685b      	ldr	r3, [r3, #4]
 80214aa:	4618      	mov	r0, r3
 80214ac:	f017 f9ca 	bl	8038844 <free>
	for (;;) {
 80214b0:	e7ba      	b.n	8021428 <server_send+0x10>
 80214b2:	bf00      	nop
 80214b4:	200003e4 	.word	0x200003e4

080214b8 <list_push>:
 *
 * Thread Safe Queue
 *
 */

void list_push(List *list, void* data) {
 80214b8:	b580      	push	{r7, lr}
 80214ba:	b082      	sub	sp, #8
 80214bc:	af00      	add	r7, sp, #0
 80214be:	6078      	str	r0, [r7, #4]
 80214c0:	6039      	str	r1, [r7, #0]
	list_add(list, data); // push to front
 80214c2:	6839      	ldr	r1, [r7, #0]
 80214c4:	6878      	ldr	r0, [r7, #4]
 80214c6:	f000 f869 	bl	802159c <list_add>
}
 80214ca:	bf00      	nop
 80214cc:	3708      	adds	r7, #8
 80214ce:	46bd      	mov	sp, r7
 80214d0:	bd80      	pop	{r7, pc}

080214d2 <list_pop>:

void list_pop(List *list, void* data) {
 80214d2:	b580      	push	{r7, lr}
 80214d4:	b082      	sub	sp, #8
 80214d6:	af00      	add	r7, sp, #0
 80214d8:	6078      	str	r0, [r7, #4]
 80214da:	6039      	str	r1, [r7, #0]
	list_remove(list, data); // pop from end
 80214dc:	6839      	ldr	r1, [r7, #0]
 80214de:	6878      	ldr	r0, [r7, #4]
 80214e0:	f000 f8be 	bl	8021660 <list_remove>
}
 80214e4:	bf00      	nop
 80214e6:	3708      	adds	r7, #8
 80214e8:	46bd      	mov	sp, r7
 80214ea:	bd80      	pop	{r7, pc}

080214ec <free_node_data>:

void free_node_data(CallbackFree free_callback, void *data) {
 80214ec:	b580      	push	{r7, lr}
 80214ee:	b082      	sub	sp, #8
 80214f0:	af00      	add	r7, sp, #0
 80214f2:	6078      	str	r0, [r7, #4]
 80214f4:	6039      	str	r1, [r7, #0]
	if (free_callback != NULL)
 80214f6:	687b      	ldr	r3, [r7, #4]
 80214f8:	2b00      	cmp	r3, #0
 80214fa:	d003      	beq.n	8021504 <free_node_data+0x18>
		free_callback(data);
 80214fc:	687b      	ldr	r3, [r7, #4]
 80214fe:	6838      	ldr	r0, [r7, #0]
 8021500:	4798      	blx	r3
	else
		free(data);
}
 8021502:	e002      	b.n	802150a <free_node_data+0x1e>
		free(data);
 8021504:	6838      	ldr	r0, [r7, #0]
 8021506:	f017 f99d 	bl	8038844 <free>
}
 802150a:	bf00      	nop
 802150c:	3708      	adds	r7, #8
 802150e:	46bd      	mov	sp, r7
 8021510:	bd80      	pop	{r7, pc}
	...

08021514 <list_create>:

List *list_create(int dataSize, CallbackFree free_callback) {
 8021514:	b580      	push	{r7, lr}
 8021516:	b084      	sub	sp, #16
 8021518:	af00      	add	r7, sp, #0
 802151a:	6078      	str	r0, [r7, #4]
 802151c:	6039      	str	r1, [r7, #0]
	assert(dataSize > 0);
 802151e:	687b      	ldr	r3, [r7, #4]
 8021520:	2b00      	cmp	r3, #0
 8021522:	dc05      	bgt.n	8021530 <list_create+0x1c>
 8021524:	4b1a      	ldr	r3, [pc, #104]	; (8021590 <list_create+0x7c>)
 8021526:	4a1b      	ldr	r2, [pc, #108]	; (8021594 <list_create+0x80>)
 8021528:	2120      	movs	r1, #32
 802152a:	481b      	ldr	r0, [pc, #108]	; (8021598 <list_create+0x84>)
 802152c:	f017 f82c 	bl	8038588 <__assert_func>

	List *list = (List *)malloc(sizeof(List));
 8021530:	2020      	movs	r0, #32
 8021532:	f017 f97f 	bl	8038834 <malloc>
 8021536:	4603      	mov	r3, r0
 8021538:	60fb      	str	r3, [r7, #12]
	list->count = 0;
 802153a:	68fb      	ldr	r3, [r7, #12]
 802153c:	2200      	movs	r2, #0
 802153e:	601a      	str	r2, [r3, #0]
	list->data_size = dataSize;
 8021540:	68fb      	ldr	r3, [r7, #12]
 8021542:	687a      	ldr	r2, [r7, #4]
 8021544:	605a      	str	r2, [r3, #4]
	list->head = calloc(sizeof(Node), 1); // next init to NULL
 8021546:	2101      	movs	r1, #1
 8021548:	2008      	movs	r0, #8
 802154a:	f017 f83b 	bl	80385c4 <calloc>
 802154e:	4603      	mov	r3, r0
 8021550:	461a      	mov	r2, r3
 8021552:	68fb      	ldr	r3, [r7, #12]
 8021554:	609a      	str	r2, [r3, #8]
	list->callback_free = free_callback;
 8021556:	68fb      	ldr	r3, [r7, #12]
 8021558:	683a      	ldr	r2, [r7, #0]
 802155a:	611a      	str	r2, [r3, #16]
	list->mutex = xSemaphoreCreateMutex();
 802155c:	2001      	movs	r0, #1
 802155e:	f004 fc3a 	bl	8025dd6 <xQueueCreateMutex>
 8021562:	4602      	mov	r2, r0
 8021564:	68fb      	ldr	r3, [r7, #12]
 8021566:	615a      	str	r2, [r3, #20]
	list->msgs = xSemaphoreCreateCounting(MAX_QUEUE_SIZE, 0);
 8021568:	2100      	movs	r1, #0
 802156a:	2064      	movs	r0, #100	; 0x64
 802156c:	f004 fc9d 	bl	8025eaa <xQueueCreateCountingSemaphore>
 8021570:	4602      	mov	r2, r0
 8021572:	68fb      	ldr	r3, [r7, #12]
 8021574:	619a      	str	r2, [r3, #24]
	list->remainingSpace = xSemaphoreCreateCounting(MAX_QUEUE_SIZE, MAX_QUEUE_SIZE);
 8021576:	2164      	movs	r1, #100	; 0x64
 8021578:	2064      	movs	r0, #100	; 0x64
 802157a:	f004 fc96 	bl	8025eaa <xQueueCreateCountingSemaphore>
 802157e:	4602      	mov	r2, r0
 8021580:	68fb      	ldr	r3, [r7, #12]
 8021582:	61da      	str	r2, [r3, #28]

	return list;
 8021584:	68fb      	ldr	r3, [r7, #12]
}
 8021586:	4618      	mov	r0, r3
 8021588:	3710      	adds	r7, #16
 802158a:	46bd      	mov	sp, r7
 802158c:	bd80      	pop	{r7, pc}
 802158e:	bf00      	nop
 8021590:	08039ab8 	.word	0x08039ab8
 8021594:	0803d46c 	.word	0x0803d46c
 8021598:	08039ac8 	.word	0x08039ac8

0802159c <list_add>:

	free(list);
}


void list_add(List *list, void *data) { // push to front
 802159c:	b580      	push	{r7, lr}
 802159e:	b084      	sub	sp, #16
 80215a0:	af00      	add	r7, sp, #0
 80215a2:	6078      	str	r0, [r7, #4]
 80215a4:	6039      	str	r1, [r7, #0]

	assert(list != NULL);
 80215a6:	687b      	ldr	r3, [r7, #4]
 80215a8:	2b00      	cmp	r3, #0
 80215aa:	d105      	bne.n	80215b8 <list_add+0x1c>
 80215ac:	4b28      	ldr	r3, [pc, #160]	; (8021650 <list_add+0xb4>)
 80215ae:	4a29      	ldr	r2, [pc, #164]	; (8021654 <list_add+0xb8>)
 80215b0:	2145      	movs	r1, #69	; 0x45
 80215b2:	4829      	ldr	r0, [pc, #164]	; (8021658 <list_add+0xbc>)
 80215b4:	f016 ffe8 	bl	8038588 <__assert_func>

	xSemaphoreTake(list->remainingSpace, portMAX_DELAY); // Only add to queue if there is space
 80215b8:	687b      	ldr	r3, [r7, #4]
 80215ba:	69db      	ldr	r3, [r3, #28]
 80215bc:	f04f 31ff 	mov.w	r1, #4294967295
 80215c0:	4618      	mov	r0, r3
 80215c2:	f004 ffab 	bl	802651c <xQueueSemaphoreTake>

	xSemaphoreTake(list->mutex, portMAX_DELAY); // Lock mutex
 80215c6:	687b      	ldr	r3, [r7, #4]
 80215c8:	695b      	ldr	r3, [r3, #20]
 80215ca:	f04f 31ff 	mov.w	r1, #4294967295
 80215ce:	4618      	mov	r0, r3
 80215d0:	f004 ffa4 	bl	802651c <xQueueSemaphoreTake>

	assert(data != NULL);
 80215d4:	683b      	ldr	r3, [r7, #0]
 80215d6:	2b00      	cmp	r3, #0
 80215d8:	d105      	bne.n	80215e6 <list_add+0x4a>
 80215da:	4b20      	ldr	r3, [pc, #128]	; (802165c <list_add+0xc0>)
 80215dc:	4a1d      	ldr	r2, [pc, #116]	; (8021654 <list_add+0xb8>)
 80215de:	214b      	movs	r1, #75	; 0x4b
 80215e0:	481d      	ldr	r0, [pc, #116]	; (8021658 <list_add+0xbc>)
 80215e2:	f016 ffd1 	bl	8038588 <__assert_func>

	Node *newNode = malloc(sizeof(Node));
 80215e6:	2008      	movs	r0, #8
 80215e8:	f017 f924 	bl	8038834 <malloc>
 80215ec:	4603      	mov	r3, r0
 80215ee:	60fb      	str	r3, [r7, #12]
	newNode->data = malloc(list->data_size);
 80215f0:	687b      	ldr	r3, [r7, #4]
 80215f2:	685b      	ldr	r3, [r3, #4]
 80215f4:	4618      	mov	r0, r3
 80215f6:	f017 f91d 	bl	8038834 <malloc>
 80215fa:	4603      	mov	r3, r0
 80215fc:	461a      	mov	r2, r3
 80215fe:	68fb      	ldr	r3, [r7, #12]
 8021600:	601a      	str	r2, [r3, #0]
	memcpy(newNode->data, data, list->data_size);
 8021602:	68fb      	ldr	r3, [r7, #12]
 8021604:	6818      	ldr	r0, [r3, #0]
 8021606:	687b      	ldr	r3, [r7, #4]
 8021608:	685b      	ldr	r3, [r3, #4]
 802160a:	461a      	mov	r2, r3
 802160c:	6839      	ldr	r1, [r7, #0]
 802160e:	f017 f931 	bl	8038874 <memcpy>

	newNode->next = list->head;
 8021612:	687b      	ldr	r3, [r7, #4]
 8021614:	689a      	ldr	r2, [r3, #8]
 8021616:	68fb      	ldr	r3, [r7, #12]
 8021618:	605a      	str	r2, [r3, #4]
	list->head = newNode;
 802161a:	687b      	ldr	r3, [r7, #4]
 802161c:	68fa      	ldr	r2, [r7, #12]
 802161e:	609a      	str	r2, [r3, #8]
	list->count++;
 8021620:	687b      	ldr	r3, [r7, #4]
 8021622:	681b      	ldr	r3, [r3, #0]
 8021624:	1c5a      	adds	r2, r3, #1
 8021626:	687b      	ldr	r3, [r7, #4]
 8021628:	601a      	str	r2, [r3, #0]

	xSemaphoreGive(list->mutex); // Unlock mutex
 802162a:	687b      	ldr	r3, [r7, #4]
 802162c:	6958      	ldr	r0, [r3, #20]
 802162e:	2300      	movs	r3, #0
 8021630:	2200      	movs	r2, #0
 8021632:	2100      	movs	r1, #0
 8021634:	f004 fc6c 	bl	8025f10 <xQueueGenericSend>

	xSemaphoreGive(list->msgs); // Notify waiting consumers
 8021638:	687b      	ldr	r3, [r7, #4]
 802163a:	6998      	ldr	r0, [r3, #24]
 802163c:	2300      	movs	r3, #0
 802163e:	2200      	movs	r2, #0
 8021640:	2100      	movs	r1, #0
 8021642:	f004 fc65 	bl	8025f10 <xQueueGenericSend>
}
 8021646:	bf00      	nop
 8021648:	3710      	adds	r7, #16
 802164a:	46bd      	mov	sp, r7
 802164c:	bd80      	pop	{r7, pc}
 802164e:	bf00      	nop
 8021650:	08039ae0 	.word	0x08039ae0
 8021654:	0803d478 	.word	0x0803d478
 8021658:	08039ac8 	.word	0x08039ac8
 802165c:	08039af0 	.word	0x08039af0

08021660 <list_remove>:

void list_remove(List *list, void* data) {
 8021660:	b580      	push	{r7, lr}
 8021662:	b084      	sub	sp, #16
 8021664:	af00      	add	r7, sp, #0
 8021666:	6078      	str	r0, [r7, #4]
 8021668:	6039      	str	r1, [r7, #0]

	assert(list != NULL);
 802166a:	687b      	ldr	r3, [r7, #4]
 802166c:	2b00      	cmp	r3, #0
 802166e:	d105      	bne.n	802167c <list_remove+0x1c>
 8021670:	4b31      	ldr	r3, [pc, #196]	; (8021738 <list_remove+0xd8>)
 8021672:	4a32      	ldr	r2, [pc, #200]	; (802173c <list_remove+0xdc>)
 8021674:	215c      	movs	r1, #92	; 0x5c
 8021676:	4832      	ldr	r0, [pc, #200]	; (8021740 <list_remove+0xe0>)
 8021678:	f016 ff86 	bl	8038588 <__assert_func>

	xSemaphoreTake(list->msgs, portMAX_DELAY); // Remove message when at least one exists
 802167c:	687b      	ldr	r3, [r7, #4]
 802167e:	699b      	ldr	r3, [r3, #24]
 8021680:	f04f 31ff 	mov.w	r1, #4294967295
 8021684:	4618      	mov	r0, r3
 8021686:	f004 ff49 	bl	802651c <xQueueSemaphoreTake>

	xSemaphoreTake(list->mutex, portMAX_DELAY); // Lock mutex
 802168a:	687b      	ldr	r3, [r7, #4]
 802168c:	695b      	ldr	r3, [r3, #20]
 802168e:	f04f 31ff 	mov.w	r1, #4294967295
 8021692:	4618      	mov	r0, r3
 8021694:	f004 ff42 	bl	802651c <xQueueSemaphoreTake>

	assert(list->count > 0);
 8021698:	687b      	ldr	r3, [r7, #4]
 802169a:	681b      	ldr	r3, [r3, #0]
 802169c:	2b00      	cmp	r3, #0
 802169e:	dc05      	bgt.n	80216ac <list_remove+0x4c>
 80216a0:	4b28      	ldr	r3, [pc, #160]	; (8021744 <list_remove+0xe4>)
 80216a2:	4a26      	ldr	r2, [pc, #152]	; (802173c <list_remove+0xdc>)
 80216a4:	2162      	movs	r1, #98	; 0x62
 80216a6:	4826      	ldr	r0, [pc, #152]	; (8021740 <list_remove+0xe0>)
 80216a8:	f016 ff6e 	bl	8038588 <__assert_func>

	Node *prev_node = NULL;
 80216ac:	2300      	movs	r3, #0
 80216ae:	60fb      	str	r3, [r7, #12]
	Node *curr_node = list->head;
 80216b0:	687b      	ldr	r3, [r7, #4]
 80216b2:	689b      	ldr	r3, [r3, #8]
 80216b4:	60bb      	str	r3, [r7, #8]

	// Condition OK because count > 0
	while (curr_node->next->next != NULL){ // look for last node in list
 80216b6:	e004      	b.n	80216c2 <list_remove+0x62>
		prev_node = curr_node;
 80216b8:	68bb      	ldr	r3, [r7, #8]
 80216ba:	60fb      	str	r3, [r7, #12]
		curr_node = prev_node->next;
 80216bc:	68fb      	ldr	r3, [r7, #12]
 80216be:	685b      	ldr	r3, [r3, #4]
 80216c0:	60bb      	str	r3, [r7, #8]
	while (curr_node->next->next != NULL){ // look for last node in list
 80216c2:	68bb      	ldr	r3, [r7, #8]
 80216c4:	685b      	ldr	r3, [r3, #4]
 80216c6:	685b      	ldr	r3, [r3, #4]
 80216c8:	2b00      	cmp	r3, #0
 80216ca:	d1f5      	bne.n	80216b8 <list_remove+0x58>
	}

	memcpy(data, curr_node->data, list->data_size);
 80216cc:	68bb      	ldr	r3, [r7, #8]
 80216ce:	6819      	ldr	r1, [r3, #0]
 80216d0:	687b      	ldr	r3, [r7, #4]
 80216d2:	685b      	ldr	r3, [r3, #4]
 80216d4:	461a      	mov	r2, r3
 80216d6:	6838      	ldr	r0, [r7, #0]
 80216d8:	f017 f8cc 	bl	8038874 <memcpy>

	if (prev_node != NULL) {
 80216dc:	68fb      	ldr	r3, [r7, #12]
 80216de:	2b00      	cmp	r3, #0
 80216e0:	d004      	beq.n	80216ec <list_remove+0x8c>
		prev_node->next = curr_node->next;
 80216e2:	68bb      	ldr	r3, [r7, #8]
 80216e4:	685a      	ldr	r2, [r3, #4]
 80216e6:	68fb      	ldr	r3, [r7, #12]
 80216e8:	605a      	str	r2, [r3, #4]
 80216ea:	e003      	b.n	80216f4 <list_remove+0x94>
	} else {
		list->head = curr_node->next;
 80216ec:	68bb      	ldr	r3, [r7, #8]
 80216ee:	685a      	ldr	r2, [r3, #4]
 80216f0:	687b      	ldr	r3, [r7, #4]
 80216f2:	609a      	str	r2, [r3, #8]
	}
	free_node_data(list->callback_free, curr_node->data);
 80216f4:	687b      	ldr	r3, [r7, #4]
 80216f6:	691a      	ldr	r2, [r3, #16]
 80216f8:	68bb      	ldr	r3, [r7, #8]
 80216fa:	681b      	ldr	r3, [r3, #0]
 80216fc:	4619      	mov	r1, r3
 80216fe:	4610      	mov	r0, r2
 8021700:	f7ff fef4 	bl	80214ec <free_node_data>
	free(curr_node);
 8021704:	68b8      	ldr	r0, [r7, #8]
 8021706:	f017 f89d 	bl	8038844 <free>

	list->count--;
 802170a:	687b      	ldr	r3, [r7, #4]
 802170c:	681b      	ldr	r3, [r3, #0]
 802170e:	1e5a      	subs	r2, r3, #1
 8021710:	687b      	ldr	r3, [r7, #4]
 8021712:	601a      	str	r2, [r3, #0]

	xSemaphoreGive(list->mutex); // Unlock mutex
 8021714:	687b      	ldr	r3, [r7, #4]
 8021716:	6958      	ldr	r0, [r3, #20]
 8021718:	2300      	movs	r3, #0
 802171a:	2200      	movs	r2, #0
 802171c:	2100      	movs	r1, #0
 802171e:	f004 fbf7 	bl	8025f10 <xQueueGenericSend>

	xSemaphoreGive(list->remainingSpace); // Notify waiting producers
 8021722:	687b      	ldr	r3, [r7, #4]
 8021724:	69d8      	ldr	r0, [r3, #28]
 8021726:	2300      	movs	r3, #0
 8021728:	2200      	movs	r2, #0
 802172a:	2100      	movs	r1, #0
 802172c:	f004 fbf0 	bl	8025f10 <xQueueGenericSend>
}
 8021730:	bf00      	nop
 8021732:	3710      	adds	r7, #16
 8021734:	46bd      	mov	sp, r7
 8021736:	bd80      	pop	{r7, pc}
 8021738:	08039ae0 	.word	0x08039ae0
 802173c:	0803d484 	.word	0x0803d484
 8021740:	08039ac8 	.word	0x08039ac8
 8021744:	08039b00 	.word	0x08039b00

08021748 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8021748:	f8df d034 	ldr.w	sp, [pc, #52]	; 8021780 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 802174c:	480d      	ldr	r0, [pc, #52]	; (8021784 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 802174e:	490e      	ldr	r1, [pc, #56]	; (8021788 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8021750:	4a0e      	ldr	r2, [pc, #56]	; (802178c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8021752:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8021754:	e002      	b.n	802175c <LoopCopyDataInit>

08021756 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8021756:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8021758:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 802175a:	3304      	adds	r3, #4

0802175c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 802175c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 802175e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8021760:	d3f9      	bcc.n	8021756 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8021762:	4a0b      	ldr	r2, [pc, #44]	; (8021790 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8021764:	4c0b      	ldr	r4, [pc, #44]	; (8021794 <LoopFillZerobss+0x26>)
  movs r3, #0
 8021766:	2300      	movs	r3, #0
  b LoopFillZerobss
 8021768:	e001      	b.n	802176e <LoopFillZerobss>

0802176a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 802176a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 802176c:	3204      	adds	r2, #4

0802176e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 802176e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8021770:	d3fb      	bcc.n	802176a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8021772:	f7ff fb33 	bl	8020ddc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8021776:	f017 f835 	bl	80387e4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 802177a:	f7fe ff1d 	bl	80205b8 <main>
  bx  lr    
 802177e:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8021780:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8021784:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8021788:	20000098 	.word	0x20000098
  ldr r2, =_sidata
 802178c:	0803d7a0 	.word	0x0803d7a0
  ldr r2, =_sbss
 8021790:	20000098 	.word	0x20000098
  ldr r4, =_ebss
 8021794:	2000f070 	.word	0x2000f070

08021798 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8021798:	e7fe      	b.n	8021798 <ADC_IRQHandler>

0802179a <LAN8742_RegisterBusIO>:
  * @param  ioctx: holds device IO functions.  
  * @retval LAN8742_STATUS_OK  if OK
  *         LAN8742_STATUS_ERROR if missing mandatory function
  */
int32_t  LAN8742_RegisterBusIO(lan8742_Object_t *pObj, lan8742_IOCtx_t *ioctx)
{
 802179a:	b480      	push	{r7}
 802179c:	b083      	sub	sp, #12
 802179e:	af00      	add	r7, sp, #0
 80217a0:	6078      	str	r0, [r7, #4]
 80217a2:	6039      	str	r1, [r7, #0]
  if(!pObj || !ioctx->ReadReg || !ioctx->WriteReg || !ioctx->GetTick)
 80217a4:	687b      	ldr	r3, [r7, #4]
 80217a6:	2b00      	cmp	r3, #0
 80217a8:	d00b      	beq.n	80217c2 <LAN8742_RegisterBusIO+0x28>
 80217aa:	683b      	ldr	r3, [r7, #0]
 80217ac:	68db      	ldr	r3, [r3, #12]
 80217ae:	2b00      	cmp	r3, #0
 80217b0:	d007      	beq.n	80217c2 <LAN8742_RegisterBusIO+0x28>
 80217b2:	683b      	ldr	r3, [r7, #0]
 80217b4:	689b      	ldr	r3, [r3, #8]
 80217b6:	2b00      	cmp	r3, #0
 80217b8:	d003      	beq.n	80217c2 <LAN8742_RegisterBusIO+0x28>
 80217ba:	683b      	ldr	r3, [r7, #0]
 80217bc:	691b      	ldr	r3, [r3, #16]
 80217be:	2b00      	cmp	r3, #0
 80217c0:	d102      	bne.n	80217c8 <LAN8742_RegisterBusIO+0x2e>
  {
    return LAN8742_STATUS_ERROR;
 80217c2:	f04f 33ff 	mov.w	r3, #4294967295
 80217c6:	e014      	b.n	80217f2 <LAN8742_RegisterBusIO+0x58>
  }
  
  pObj->IO.Init = ioctx->Init;
 80217c8:	683b      	ldr	r3, [r7, #0]
 80217ca:	681a      	ldr	r2, [r3, #0]
 80217cc:	687b      	ldr	r3, [r7, #4]
 80217ce:	609a      	str	r2, [r3, #8]
  pObj->IO.DeInit = ioctx->DeInit;
 80217d0:	683b      	ldr	r3, [r7, #0]
 80217d2:	685a      	ldr	r2, [r3, #4]
 80217d4:	687b      	ldr	r3, [r7, #4]
 80217d6:	60da      	str	r2, [r3, #12]
  pObj->IO.ReadReg = ioctx->ReadReg;
 80217d8:	683b      	ldr	r3, [r7, #0]
 80217da:	68da      	ldr	r2, [r3, #12]
 80217dc:	687b      	ldr	r3, [r7, #4]
 80217de:	615a      	str	r2, [r3, #20]
  pObj->IO.WriteReg = ioctx->WriteReg;
 80217e0:	683b      	ldr	r3, [r7, #0]
 80217e2:	689a      	ldr	r2, [r3, #8]
 80217e4:	687b      	ldr	r3, [r7, #4]
 80217e6:	611a      	str	r2, [r3, #16]
  pObj->IO.GetTick = ioctx->GetTick;
 80217e8:	683b      	ldr	r3, [r7, #0]
 80217ea:	691a      	ldr	r2, [r3, #16]
 80217ec:	687b      	ldr	r3, [r7, #4]
 80217ee:	619a      	str	r2, [r3, #24]
  
  return LAN8742_STATUS_OK;
 80217f0:	2300      	movs	r3, #0
}
 80217f2:	4618      	mov	r0, r3
 80217f4:	370c      	adds	r7, #12
 80217f6:	46bd      	mov	sp, r7
 80217f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80217fc:	4770      	bx	lr

080217fe <LAN8742_Init>:
  *         LAN8742_STATUS_READ_ERROR if connot read register
  *         LAN8742_STATUS_WRITE_ERROR if connot write to register
  *         LAN8742_STATUS_RESET_TIMEOUT if cannot perform a software reset
  */
 int32_t LAN8742_Init(lan8742_Object_t *pObj)
 {
 80217fe:	b580      	push	{r7, lr}
 8021800:	b086      	sub	sp, #24
 8021802:	af00      	add	r7, sp, #0
 8021804:	6078      	str	r0, [r7, #4]
   uint32_t tickstart = 0, regvalue = 0, addr = 0;
 8021806:	2300      	movs	r3, #0
 8021808:	60fb      	str	r3, [r7, #12]
 802180a:	2300      	movs	r3, #0
 802180c:	60bb      	str	r3, [r7, #8]
 802180e:	2300      	movs	r3, #0
 8021810:	617b      	str	r3, [r7, #20]
   int32_t status = LAN8742_STATUS_OK;
 8021812:	2300      	movs	r3, #0
 8021814:	613b      	str	r3, [r7, #16]
   
   if(pObj->Is_Initialized == 0)
 8021816:	687b      	ldr	r3, [r7, #4]
 8021818:	685b      	ldr	r3, [r3, #4]
 802181a:	2b00      	cmp	r3, #0
 802181c:	d17c      	bne.n	8021918 <LAN8742_Init+0x11a>
   {
     if(pObj->IO.Init != 0)
 802181e:	687b      	ldr	r3, [r7, #4]
 8021820:	689b      	ldr	r3, [r3, #8]
 8021822:	2b00      	cmp	r3, #0
 8021824:	d002      	beq.n	802182c <LAN8742_Init+0x2e>
     {
       /* GPIO and Clocks initialization */
       pObj->IO.Init();
 8021826:	687b      	ldr	r3, [r7, #4]
 8021828:	689b      	ldr	r3, [r3, #8]
 802182a:	4798      	blx	r3
     }
   
     /* for later check */
     pObj->DevAddr = LAN8742_MAX_DEV_ADDR + 1;
 802182c:	687b      	ldr	r3, [r7, #4]
 802182e:	2220      	movs	r2, #32
 8021830:	601a      	str	r2, [r3, #0]
   
     /* Get the device address from special mode register */  
     for(addr = 0; addr <= LAN8742_MAX_DEV_ADDR; addr ++)
 8021832:	2300      	movs	r3, #0
 8021834:	617b      	str	r3, [r7, #20]
 8021836:	e01c      	b.n	8021872 <LAN8742_Init+0x74>
     {
       if(pObj->IO.ReadReg(addr, LAN8742_SMR, &regvalue) < 0)
 8021838:	687b      	ldr	r3, [r7, #4]
 802183a:	695b      	ldr	r3, [r3, #20]
 802183c:	f107 0208 	add.w	r2, r7, #8
 8021840:	2112      	movs	r1, #18
 8021842:	6978      	ldr	r0, [r7, #20]
 8021844:	4798      	blx	r3
 8021846:	4603      	mov	r3, r0
 8021848:	2b00      	cmp	r3, #0
 802184a:	da03      	bge.n	8021854 <LAN8742_Init+0x56>
       { 
         status = LAN8742_STATUS_READ_ERROR;
 802184c:	f06f 0304 	mvn.w	r3, #4
 8021850:	613b      	str	r3, [r7, #16]
         /* Can't read from this device address 
            continue with next address */
         continue;
 8021852:	e00b      	b.n	802186c <LAN8742_Init+0x6e>
       }
     
       if((regvalue & LAN8742_SMR_PHY_ADDR) == addr)
 8021854:	68bb      	ldr	r3, [r7, #8]
 8021856:	f003 031f 	and.w	r3, r3, #31
 802185a:	697a      	ldr	r2, [r7, #20]
 802185c:	429a      	cmp	r2, r3
 802185e:	d105      	bne.n	802186c <LAN8742_Init+0x6e>
       {
         pObj->DevAddr = addr;
 8021860:	687b      	ldr	r3, [r7, #4]
 8021862:	697a      	ldr	r2, [r7, #20]
 8021864:	601a      	str	r2, [r3, #0]
         status = LAN8742_STATUS_OK;
 8021866:	2300      	movs	r3, #0
 8021868:	613b      	str	r3, [r7, #16]
         break;
 802186a:	e005      	b.n	8021878 <LAN8742_Init+0x7a>
     for(addr = 0; addr <= LAN8742_MAX_DEV_ADDR; addr ++)
 802186c:	697b      	ldr	r3, [r7, #20]
 802186e:	3301      	adds	r3, #1
 8021870:	617b      	str	r3, [r7, #20]
 8021872:	697b      	ldr	r3, [r7, #20]
 8021874:	2b1f      	cmp	r3, #31
 8021876:	d9df      	bls.n	8021838 <LAN8742_Init+0x3a>
       }
     }
   
     if(pObj->DevAddr > LAN8742_MAX_DEV_ADDR)
 8021878:	687b      	ldr	r3, [r7, #4]
 802187a:	681b      	ldr	r3, [r3, #0]
 802187c:	2b1f      	cmp	r3, #31
 802187e:	d902      	bls.n	8021886 <LAN8742_Init+0x88>
     {
       status = LAN8742_STATUS_ADDRESS_ERROR;
 8021880:	f06f 0302 	mvn.w	r3, #2
 8021884:	613b      	str	r3, [r7, #16]
     }
     
     /* if device address is matched */
     if(status == LAN8742_STATUS_OK)
 8021886:	693b      	ldr	r3, [r7, #16]
 8021888:	2b00      	cmp	r3, #0
 802188a:	d145      	bne.n	8021918 <LAN8742_Init+0x11a>
     {
       /* set a software reset  */
       if(pObj->IO.WriteReg(pObj->DevAddr, LAN8742_BCR, LAN8742_BCR_SOFT_RESET) >= 0)
 802188c:	687b      	ldr	r3, [r7, #4]
 802188e:	691b      	ldr	r3, [r3, #16]
 8021890:	687a      	ldr	r2, [r7, #4]
 8021892:	6810      	ldr	r0, [r2, #0]
 8021894:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8021898:	2100      	movs	r1, #0
 802189a:	4798      	blx	r3
 802189c:	4603      	mov	r3, r0
 802189e:	2b00      	cmp	r3, #0
 80218a0:	db37      	blt.n	8021912 <LAN8742_Init+0x114>
       { 
         /* get software reset status */
         if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BCR, &regvalue) >= 0)
 80218a2:	687b      	ldr	r3, [r7, #4]
 80218a4:	695b      	ldr	r3, [r3, #20]
 80218a6:	687a      	ldr	r2, [r7, #4]
 80218a8:	6810      	ldr	r0, [r2, #0]
 80218aa:	f107 0208 	add.w	r2, r7, #8
 80218ae:	2100      	movs	r1, #0
 80218b0:	4798      	blx	r3
 80218b2:	4603      	mov	r3, r0
 80218b4:	2b00      	cmp	r3, #0
 80218b6:	db28      	blt.n	802190a <LAN8742_Init+0x10c>
         { 
           tickstart = pObj->IO.GetTick();
 80218b8:	687b      	ldr	r3, [r7, #4]
 80218ba:	699b      	ldr	r3, [r3, #24]
 80218bc:	4798      	blx	r3
 80218be:	4603      	mov	r3, r0
 80218c0:	60fb      	str	r3, [r7, #12]
           
           /* wait until software reset is done or timeout occured  */
           while(regvalue & LAN8742_BCR_SOFT_RESET)
 80218c2:	e01c      	b.n	80218fe <LAN8742_Init+0x100>
           {
             if((pObj->IO.GetTick() - tickstart) <= LAN8742_SW_RESET_TO)
 80218c4:	687b      	ldr	r3, [r7, #4]
 80218c6:	699b      	ldr	r3, [r3, #24]
 80218c8:	4798      	blx	r3
 80218ca:	4603      	mov	r3, r0
 80218cc:	461a      	mov	r2, r3
 80218ce:	68fb      	ldr	r3, [r7, #12]
 80218d0:	1ad3      	subs	r3, r2, r3
 80218d2:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80218d6:	d80e      	bhi.n	80218f6 <LAN8742_Init+0xf8>
             {
               if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BCR, &regvalue) < 0)
 80218d8:	687b      	ldr	r3, [r7, #4]
 80218da:	695b      	ldr	r3, [r3, #20]
 80218dc:	687a      	ldr	r2, [r7, #4]
 80218de:	6810      	ldr	r0, [r2, #0]
 80218e0:	f107 0208 	add.w	r2, r7, #8
 80218e4:	2100      	movs	r1, #0
 80218e6:	4798      	blx	r3
 80218e8:	4603      	mov	r3, r0
 80218ea:	2b00      	cmp	r3, #0
 80218ec:	da07      	bge.n	80218fe <LAN8742_Init+0x100>
               { 
                 status = LAN8742_STATUS_READ_ERROR;
 80218ee:	f06f 0304 	mvn.w	r3, #4
 80218f2:	613b      	str	r3, [r7, #16]
                 break;
 80218f4:	e010      	b.n	8021918 <LAN8742_Init+0x11a>
               }
             }
             else
             {
               status = LAN8742_STATUS_RESET_TIMEOUT;
 80218f6:	f06f 0301 	mvn.w	r3, #1
 80218fa:	613b      	str	r3, [r7, #16]
               break;
 80218fc:	e00c      	b.n	8021918 <LAN8742_Init+0x11a>
           while(regvalue & LAN8742_BCR_SOFT_RESET)
 80218fe:	68bb      	ldr	r3, [r7, #8]
 8021900:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8021904:	2b00      	cmp	r3, #0
 8021906:	d1dd      	bne.n	80218c4 <LAN8742_Init+0xc6>
 8021908:	e006      	b.n	8021918 <LAN8742_Init+0x11a>
             }
           } 
         }
         else
         {
           status = LAN8742_STATUS_READ_ERROR;
 802190a:	f06f 0304 	mvn.w	r3, #4
 802190e:	613b      	str	r3, [r7, #16]
 8021910:	e002      	b.n	8021918 <LAN8742_Init+0x11a>
         }
       }
       else
       {
         status = LAN8742_STATUS_WRITE_ERROR;
 8021912:	f06f 0303 	mvn.w	r3, #3
 8021916:	613b      	str	r3, [r7, #16]
       }
     }
   }
      
   if(status == LAN8742_STATUS_OK)
 8021918:	693b      	ldr	r3, [r7, #16]
 802191a:	2b00      	cmp	r3, #0
 802191c:	d112      	bne.n	8021944 <LAN8742_Init+0x146>
   {
     tickstart =  pObj->IO.GetTick();
 802191e:	687b      	ldr	r3, [r7, #4]
 8021920:	699b      	ldr	r3, [r3, #24]
 8021922:	4798      	blx	r3
 8021924:	4603      	mov	r3, r0
 8021926:	60fb      	str	r3, [r7, #12]
     
     /* Wait for 2s to perform initialization */
     while((pObj->IO.GetTick() - tickstart) <= LAN8742_INIT_TO)
 8021928:	bf00      	nop
 802192a:	687b      	ldr	r3, [r7, #4]
 802192c:	699b      	ldr	r3, [r3, #24]
 802192e:	4798      	blx	r3
 8021930:	4603      	mov	r3, r0
 8021932:	461a      	mov	r2, r3
 8021934:	68fb      	ldr	r3, [r7, #12]
 8021936:	1ad3      	subs	r3, r2, r3
 8021938:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 802193c:	d9f5      	bls.n	802192a <LAN8742_Init+0x12c>
     {
     }
     pObj->Is_Initialized = 1;
 802193e:	687b      	ldr	r3, [r7, #4]
 8021940:	2201      	movs	r2, #1
 8021942:	605a      	str	r2, [r3, #4]
   }
   
   return status;
 8021944:	693b      	ldr	r3, [r7, #16]
 }
 8021946:	4618      	mov	r0, r3
 8021948:	3718      	adds	r7, #24
 802194a:	46bd      	mov	sp, r7
 802194c:	bd80      	pop	{r7, pc}

0802194e <LAN8742_GetLinkState>:
  *         LAN8742_STATUS_10MBITS_HALFDUPLEX  if 10Mb/s HD       
  *         LAN8742_STATUS_READ_ERROR if connot read register
  *         LAN8742_STATUS_WRITE_ERROR if connot write to register
  */
int32_t LAN8742_GetLinkState(lan8742_Object_t *pObj)
{
 802194e:	b580      	push	{r7, lr}
 8021950:	b084      	sub	sp, #16
 8021952:	af00      	add	r7, sp, #0
 8021954:	6078      	str	r0, [r7, #4]
  uint32_t readval = 0;
 8021956:	2300      	movs	r3, #0
 8021958:	60fb      	str	r3, [r7, #12]
  
  /* Read Status register  */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BSR, &readval) < 0)
 802195a:	687b      	ldr	r3, [r7, #4]
 802195c:	695b      	ldr	r3, [r3, #20]
 802195e:	687a      	ldr	r2, [r7, #4]
 8021960:	6810      	ldr	r0, [r2, #0]
 8021962:	f107 020c 	add.w	r2, r7, #12
 8021966:	2101      	movs	r1, #1
 8021968:	4798      	blx	r3
 802196a:	4603      	mov	r3, r0
 802196c:	2b00      	cmp	r3, #0
 802196e:	da02      	bge.n	8021976 <LAN8742_GetLinkState+0x28>
  {
    return LAN8742_STATUS_READ_ERROR;
 8021970:	f06f 0304 	mvn.w	r3, #4
 8021974:	e06e      	b.n	8021a54 <LAN8742_GetLinkState+0x106>
  }
  
  /* Read Status register again */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BSR, &readval) < 0)
 8021976:	687b      	ldr	r3, [r7, #4]
 8021978:	695b      	ldr	r3, [r3, #20]
 802197a:	687a      	ldr	r2, [r7, #4]
 802197c:	6810      	ldr	r0, [r2, #0]
 802197e:	f107 020c 	add.w	r2, r7, #12
 8021982:	2101      	movs	r1, #1
 8021984:	4798      	blx	r3
 8021986:	4603      	mov	r3, r0
 8021988:	2b00      	cmp	r3, #0
 802198a:	da02      	bge.n	8021992 <LAN8742_GetLinkState+0x44>
  {
    return LAN8742_STATUS_READ_ERROR;
 802198c:	f06f 0304 	mvn.w	r3, #4
 8021990:	e060      	b.n	8021a54 <LAN8742_GetLinkState+0x106>
  }
  
  if((readval & LAN8742_BSR_LINK_STATUS) == 0)
 8021992:	68fb      	ldr	r3, [r7, #12]
 8021994:	f003 0304 	and.w	r3, r3, #4
 8021998:	2b00      	cmp	r3, #0
 802199a:	d101      	bne.n	80219a0 <LAN8742_GetLinkState+0x52>
  {
    /* Return Link Down status */
    return LAN8742_STATUS_LINK_DOWN;    
 802199c:	2301      	movs	r3, #1
 802199e:	e059      	b.n	8021a54 <LAN8742_GetLinkState+0x106>
  }
  
  /* Check Auto negotiaition */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BCR, &readval) < 0)
 80219a0:	687b      	ldr	r3, [r7, #4]
 80219a2:	695b      	ldr	r3, [r3, #20]
 80219a4:	687a      	ldr	r2, [r7, #4]
 80219a6:	6810      	ldr	r0, [r2, #0]
 80219a8:	f107 020c 	add.w	r2, r7, #12
 80219ac:	2100      	movs	r1, #0
 80219ae:	4798      	blx	r3
 80219b0:	4603      	mov	r3, r0
 80219b2:	2b00      	cmp	r3, #0
 80219b4:	da02      	bge.n	80219bc <LAN8742_GetLinkState+0x6e>
  {
    return LAN8742_STATUS_READ_ERROR;
 80219b6:	f06f 0304 	mvn.w	r3, #4
 80219ba:	e04b      	b.n	8021a54 <LAN8742_GetLinkState+0x106>
  }
  
  if((readval & LAN8742_BCR_AUTONEGO_EN) != LAN8742_BCR_AUTONEGO_EN)
 80219bc:	68fb      	ldr	r3, [r7, #12]
 80219be:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80219c2:	2b00      	cmp	r3, #0
 80219c4:	d11b      	bne.n	80219fe <LAN8742_GetLinkState+0xb0>
  {
    if(((readval & LAN8742_BCR_SPEED_SELECT) == LAN8742_BCR_SPEED_SELECT) && ((readval & LAN8742_BCR_DUPLEX_MODE) == LAN8742_BCR_DUPLEX_MODE)) 
 80219c6:	68fb      	ldr	r3, [r7, #12]
 80219c8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80219cc:	2b00      	cmp	r3, #0
 80219ce:	d006      	beq.n	80219de <LAN8742_GetLinkState+0x90>
 80219d0:	68fb      	ldr	r3, [r7, #12]
 80219d2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80219d6:	2b00      	cmp	r3, #0
 80219d8:	d001      	beq.n	80219de <LAN8742_GetLinkState+0x90>
    {
      return LAN8742_STATUS_100MBITS_FULLDUPLEX;
 80219da:	2302      	movs	r3, #2
 80219dc:	e03a      	b.n	8021a54 <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_BCR_SPEED_SELECT) == LAN8742_BCR_SPEED_SELECT)
 80219de:	68fb      	ldr	r3, [r7, #12]
 80219e0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80219e4:	2b00      	cmp	r3, #0
 80219e6:	d001      	beq.n	80219ec <LAN8742_GetLinkState+0x9e>
    {
      return LAN8742_STATUS_100MBITS_HALFDUPLEX;
 80219e8:	2303      	movs	r3, #3
 80219ea:	e033      	b.n	8021a54 <LAN8742_GetLinkState+0x106>
    }        
    else if ((readval & LAN8742_BCR_DUPLEX_MODE) == LAN8742_BCR_DUPLEX_MODE)
 80219ec:	68fb      	ldr	r3, [r7, #12]
 80219ee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80219f2:	2b00      	cmp	r3, #0
 80219f4:	d001      	beq.n	80219fa <LAN8742_GetLinkState+0xac>
    {
      return LAN8742_STATUS_10MBITS_FULLDUPLEX;
 80219f6:	2304      	movs	r3, #4
 80219f8:	e02c      	b.n	8021a54 <LAN8742_GetLinkState+0x106>
    }
    else
    {
      return LAN8742_STATUS_10MBITS_HALFDUPLEX;
 80219fa:	2305      	movs	r3, #5
 80219fc:	e02a      	b.n	8021a54 <LAN8742_GetLinkState+0x106>
    }  		
  }
  else /* Auto Nego enabled */
  {
    if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_PHYSCSR, &readval) < 0)
 80219fe:	687b      	ldr	r3, [r7, #4]
 8021a00:	695b      	ldr	r3, [r3, #20]
 8021a02:	687a      	ldr	r2, [r7, #4]
 8021a04:	6810      	ldr	r0, [r2, #0]
 8021a06:	f107 020c 	add.w	r2, r7, #12
 8021a0a:	211f      	movs	r1, #31
 8021a0c:	4798      	blx	r3
 8021a0e:	4603      	mov	r3, r0
 8021a10:	2b00      	cmp	r3, #0
 8021a12:	da02      	bge.n	8021a1a <LAN8742_GetLinkState+0xcc>
    {
      return LAN8742_STATUS_READ_ERROR;
 8021a14:	f06f 0304 	mvn.w	r3, #4
 8021a18:	e01c      	b.n	8021a54 <LAN8742_GetLinkState+0x106>
    }
    
    /* Check if auto nego not done */
    if((readval & LAN8742_PHYSCSR_AUTONEGO_DONE) == 0)
 8021a1a:	68fb      	ldr	r3, [r7, #12]
 8021a1c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8021a20:	2b00      	cmp	r3, #0
 8021a22:	d101      	bne.n	8021a28 <LAN8742_GetLinkState+0xda>
    {
      return LAN8742_STATUS_AUTONEGO_NOTDONE;
 8021a24:	2306      	movs	r3, #6
 8021a26:	e015      	b.n	8021a54 <LAN8742_GetLinkState+0x106>
    }
    
    if((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_100BTX_FD)
 8021a28:	68fb      	ldr	r3, [r7, #12]
 8021a2a:	f003 031c 	and.w	r3, r3, #28
 8021a2e:	2b18      	cmp	r3, #24
 8021a30:	d101      	bne.n	8021a36 <LAN8742_GetLinkState+0xe8>
    {
      return LAN8742_STATUS_100MBITS_FULLDUPLEX;
 8021a32:	2302      	movs	r3, #2
 8021a34:	e00e      	b.n	8021a54 <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_100BTX_HD)
 8021a36:	68fb      	ldr	r3, [r7, #12]
 8021a38:	f003 031c 	and.w	r3, r3, #28
 8021a3c:	2b08      	cmp	r3, #8
 8021a3e:	d101      	bne.n	8021a44 <LAN8742_GetLinkState+0xf6>
    {
      return LAN8742_STATUS_100MBITS_HALFDUPLEX;
 8021a40:	2303      	movs	r3, #3
 8021a42:	e007      	b.n	8021a54 <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_10BT_FD)
 8021a44:	68fb      	ldr	r3, [r7, #12]
 8021a46:	f003 031c 	and.w	r3, r3, #28
 8021a4a:	2b14      	cmp	r3, #20
 8021a4c:	d101      	bne.n	8021a52 <LAN8742_GetLinkState+0x104>
    {
      return LAN8742_STATUS_10MBITS_FULLDUPLEX;
 8021a4e:	2304      	movs	r3, #4
 8021a50:	e000      	b.n	8021a54 <LAN8742_GetLinkState+0x106>
    }
    else
    {
      return LAN8742_STATUS_10MBITS_HALFDUPLEX;
 8021a52:	2305      	movs	r3, #5
    }				
  }
}
 8021a54:	4618      	mov	r0, r3
 8021a56:	3710      	adds	r7, #16
 8021a58:	46bd      	mov	sp, r7
 8021a5a:	bd80      	pop	{r7, pc}

08021a5c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8021a5c:	b580      	push	{r7, lr}
 8021a5e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8021a60:	4b0e      	ldr	r3, [pc, #56]	; (8021a9c <HAL_Init+0x40>)
 8021a62:	681b      	ldr	r3, [r3, #0]
 8021a64:	4a0d      	ldr	r2, [pc, #52]	; (8021a9c <HAL_Init+0x40>)
 8021a66:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8021a6a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8021a6c:	4b0b      	ldr	r3, [pc, #44]	; (8021a9c <HAL_Init+0x40>)
 8021a6e:	681b      	ldr	r3, [r3, #0]
 8021a70:	4a0a      	ldr	r2, [pc, #40]	; (8021a9c <HAL_Init+0x40>)
 8021a72:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8021a76:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8021a78:	4b08      	ldr	r3, [pc, #32]	; (8021a9c <HAL_Init+0x40>)
 8021a7a:	681b      	ldr	r3, [r3, #0]
 8021a7c:	4a07      	ldr	r2, [pc, #28]	; (8021a9c <HAL_Init+0x40>)
 8021a7e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8021a82:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8021a84:	2003      	movs	r0, #3
 8021a86:	f000 f8fc 	bl	8021c82 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8021a8a:	200f      	movs	r0, #15
 8021a8c:	f7ff f81e 	bl	8020acc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8021a90:	f7fe ffc6 	bl	8020a20 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8021a94:	2300      	movs	r3, #0
}
 8021a96:	4618      	mov	r0, r3
 8021a98:	bd80      	pop	{r7, pc}
 8021a9a:	bf00      	nop
 8021a9c:	40023c00 	.word	0x40023c00

08021aa0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8021aa0:	b480      	push	{r7}
 8021aa2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8021aa4:	4b06      	ldr	r3, [pc, #24]	; (8021ac0 <HAL_IncTick+0x20>)
 8021aa6:	781b      	ldrb	r3, [r3, #0]
 8021aa8:	461a      	mov	r2, r3
 8021aaa:	4b06      	ldr	r3, [pc, #24]	; (8021ac4 <HAL_IncTick+0x24>)
 8021aac:	681b      	ldr	r3, [r3, #0]
 8021aae:	4413      	add	r3, r2
 8021ab0:	4a04      	ldr	r2, [pc, #16]	; (8021ac4 <HAL_IncTick+0x24>)
 8021ab2:	6013      	str	r3, [r2, #0]
}
 8021ab4:	bf00      	nop
 8021ab6:	46bd      	mov	sp, r7
 8021ab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8021abc:	4770      	bx	lr
 8021abe:	bf00      	nop
 8021ac0:	2000000c 	.word	0x2000000c
 8021ac4:	2000040c 	.word	0x2000040c

08021ac8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8021ac8:	b480      	push	{r7}
 8021aca:	af00      	add	r7, sp, #0
  return uwTick;
 8021acc:	4b03      	ldr	r3, [pc, #12]	; (8021adc <HAL_GetTick+0x14>)
 8021ace:	681b      	ldr	r3, [r3, #0]
}
 8021ad0:	4618      	mov	r0, r3
 8021ad2:	46bd      	mov	sp, r7
 8021ad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8021ad8:	4770      	bx	lr
 8021ada:	bf00      	nop
 8021adc:	2000040c 	.word	0x2000040c

08021ae0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8021ae0:	b580      	push	{r7, lr}
 8021ae2:	b084      	sub	sp, #16
 8021ae4:	af00      	add	r7, sp, #0
 8021ae6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8021ae8:	f7ff ffee 	bl	8021ac8 <HAL_GetTick>
 8021aec:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8021aee:	687b      	ldr	r3, [r7, #4]
 8021af0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8021af2:	68fb      	ldr	r3, [r7, #12]
 8021af4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8021af8:	d005      	beq.n	8021b06 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8021afa:	4b0a      	ldr	r3, [pc, #40]	; (8021b24 <HAL_Delay+0x44>)
 8021afc:	781b      	ldrb	r3, [r3, #0]
 8021afe:	461a      	mov	r2, r3
 8021b00:	68fb      	ldr	r3, [r7, #12]
 8021b02:	4413      	add	r3, r2
 8021b04:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8021b06:	bf00      	nop
 8021b08:	f7ff ffde 	bl	8021ac8 <HAL_GetTick>
 8021b0c:	4602      	mov	r2, r0
 8021b0e:	68bb      	ldr	r3, [r7, #8]
 8021b10:	1ad3      	subs	r3, r2, r3
 8021b12:	68fa      	ldr	r2, [r7, #12]
 8021b14:	429a      	cmp	r2, r3
 8021b16:	d8f7      	bhi.n	8021b08 <HAL_Delay+0x28>
  {
  }
}
 8021b18:	bf00      	nop
 8021b1a:	bf00      	nop
 8021b1c:	3710      	adds	r7, #16
 8021b1e:	46bd      	mov	sp, r7
 8021b20:	bd80      	pop	{r7, pc}
 8021b22:	bf00      	nop
 8021b24:	2000000c 	.word	0x2000000c

08021b28 <__NVIC_SetPriorityGrouping>:
{
 8021b28:	b480      	push	{r7}
 8021b2a:	b085      	sub	sp, #20
 8021b2c:	af00      	add	r7, sp, #0
 8021b2e:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8021b30:	687b      	ldr	r3, [r7, #4]
 8021b32:	f003 0307 	and.w	r3, r3, #7
 8021b36:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8021b38:	4b0c      	ldr	r3, [pc, #48]	; (8021b6c <__NVIC_SetPriorityGrouping+0x44>)
 8021b3a:	68db      	ldr	r3, [r3, #12]
 8021b3c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8021b3e:	68ba      	ldr	r2, [r7, #8]
 8021b40:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8021b44:	4013      	ands	r3, r2
 8021b46:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8021b48:	68fb      	ldr	r3, [r7, #12]
 8021b4a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8021b4c:	68bb      	ldr	r3, [r7, #8]
 8021b4e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8021b50:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8021b54:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8021b58:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8021b5a:	4a04      	ldr	r2, [pc, #16]	; (8021b6c <__NVIC_SetPriorityGrouping+0x44>)
 8021b5c:	68bb      	ldr	r3, [r7, #8]
 8021b5e:	60d3      	str	r3, [r2, #12]
}
 8021b60:	bf00      	nop
 8021b62:	3714      	adds	r7, #20
 8021b64:	46bd      	mov	sp, r7
 8021b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8021b6a:	4770      	bx	lr
 8021b6c:	e000ed00 	.word	0xe000ed00

08021b70 <__NVIC_GetPriorityGrouping>:
{
 8021b70:	b480      	push	{r7}
 8021b72:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8021b74:	4b04      	ldr	r3, [pc, #16]	; (8021b88 <__NVIC_GetPriorityGrouping+0x18>)
 8021b76:	68db      	ldr	r3, [r3, #12]
 8021b78:	0a1b      	lsrs	r3, r3, #8
 8021b7a:	f003 0307 	and.w	r3, r3, #7
}
 8021b7e:	4618      	mov	r0, r3
 8021b80:	46bd      	mov	sp, r7
 8021b82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8021b86:	4770      	bx	lr
 8021b88:	e000ed00 	.word	0xe000ed00

08021b8c <__NVIC_EnableIRQ>:
{
 8021b8c:	b480      	push	{r7}
 8021b8e:	b083      	sub	sp, #12
 8021b90:	af00      	add	r7, sp, #0
 8021b92:	4603      	mov	r3, r0
 8021b94:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8021b96:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8021b9a:	2b00      	cmp	r3, #0
 8021b9c:	db0b      	blt.n	8021bb6 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8021b9e:	79fb      	ldrb	r3, [r7, #7]
 8021ba0:	f003 021f 	and.w	r2, r3, #31
 8021ba4:	4907      	ldr	r1, [pc, #28]	; (8021bc4 <__NVIC_EnableIRQ+0x38>)
 8021ba6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8021baa:	095b      	lsrs	r3, r3, #5
 8021bac:	2001      	movs	r0, #1
 8021bae:	fa00 f202 	lsl.w	r2, r0, r2
 8021bb2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8021bb6:	bf00      	nop
 8021bb8:	370c      	adds	r7, #12
 8021bba:	46bd      	mov	sp, r7
 8021bbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8021bc0:	4770      	bx	lr
 8021bc2:	bf00      	nop
 8021bc4:	e000e100 	.word	0xe000e100

08021bc8 <__NVIC_SetPriority>:
{
 8021bc8:	b480      	push	{r7}
 8021bca:	b083      	sub	sp, #12
 8021bcc:	af00      	add	r7, sp, #0
 8021bce:	4603      	mov	r3, r0
 8021bd0:	6039      	str	r1, [r7, #0]
 8021bd2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8021bd4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8021bd8:	2b00      	cmp	r3, #0
 8021bda:	db0a      	blt.n	8021bf2 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8021bdc:	683b      	ldr	r3, [r7, #0]
 8021bde:	b2da      	uxtb	r2, r3
 8021be0:	490c      	ldr	r1, [pc, #48]	; (8021c14 <__NVIC_SetPriority+0x4c>)
 8021be2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8021be6:	0112      	lsls	r2, r2, #4
 8021be8:	b2d2      	uxtb	r2, r2
 8021bea:	440b      	add	r3, r1
 8021bec:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8021bf0:	e00a      	b.n	8021c08 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8021bf2:	683b      	ldr	r3, [r7, #0]
 8021bf4:	b2da      	uxtb	r2, r3
 8021bf6:	4908      	ldr	r1, [pc, #32]	; (8021c18 <__NVIC_SetPriority+0x50>)
 8021bf8:	79fb      	ldrb	r3, [r7, #7]
 8021bfa:	f003 030f 	and.w	r3, r3, #15
 8021bfe:	3b04      	subs	r3, #4
 8021c00:	0112      	lsls	r2, r2, #4
 8021c02:	b2d2      	uxtb	r2, r2
 8021c04:	440b      	add	r3, r1
 8021c06:	761a      	strb	r2, [r3, #24]
}
 8021c08:	bf00      	nop
 8021c0a:	370c      	adds	r7, #12
 8021c0c:	46bd      	mov	sp, r7
 8021c0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8021c12:	4770      	bx	lr
 8021c14:	e000e100 	.word	0xe000e100
 8021c18:	e000ed00 	.word	0xe000ed00

08021c1c <NVIC_EncodePriority>:
{
 8021c1c:	b480      	push	{r7}
 8021c1e:	b089      	sub	sp, #36	; 0x24
 8021c20:	af00      	add	r7, sp, #0
 8021c22:	60f8      	str	r0, [r7, #12]
 8021c24:	60b9      	str	r1, [r7, #8]
 8021c26:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8021c28:	68fb      	ldr	r3, [r7, #12]
 8021c2a:	f003 0307 	and.w	r3, r3, #7
 8021c2e:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8021c30:	69fb      	ldr	r3, [r7, #28]
 8021c32:	f1c3 0307 	rsb	r3, r3, #7
 8021c36:	2b04      	cmp	r3, #4
 8021c38:	bf28      	it	cs
 8021c3a:	2304      	movcs	r3, #4
 8021c3c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8021c3e:	69fb      	ldr	r3, [r7, #28]
 8021c40:	3304      	adds	r3, #4
 8021c42:	2b06      	cmp	r3, #6
 8021c44:	d902      	bls.n	8021c4c <NVIC_EncodePriority+0x30>
 8021c46:	69fb      	ldr	r3, [r7, #28]
 8021c48:	3b03      	subs	r3, #3
 8021c4a:	e000      	b.n	8021c4e <NVIC_EncodePriority+0x32>
 8021c4c:	2300      	movs	r3, #0
 8021c4e:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8021c50:	f04f 32ff 	mov.w	r2, #4294967295
 8021c54:	69bb      	ldr	r3, [r7, #24]
 8021c56:	fa02 f303 	lsl.w	r3, r2, r3
 8021c5a:	43da      	mvns	r2, r3
 8021c5c:	68bb      	ldr	r3, [r7, #8]
 8021c5e:	401a      	ands	r2, r3
 8021c60:	697b      	ldr	r3, [r7, #20]
 8021c62:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8021c64:	f04f 31ff 	mov.w	r1, #4294967295
 8021c68:	697b      	ldr	r3, [r7, #20]
 8021c6a:	fa01 f303 	lsl.w	r3, r1, r3
 8021c6e:	43d9      	mvns	r1, r3
 8021c70:	687b      	ldr	r3, [r7, #4]
 8021c72:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8021c74:	4313      	orrs	r3, r2
}
 8021c76:	4618      	mov	r0, r3
 8021c78:	3724      	adds	r7, #36	; 0x24
 8021c7a:	46bd      	mov	sp, r7
 8021c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8021c80:	4770      	bx	lr

08021c82 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8021c82:	b580      	push	{r7, lr}
 8021c84:	b082      	sub	sp, #8
 8021c86:	af00      	add	r7, sp, #0
 8021c88:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8021c8a:	6878      	ldr	r0, [r7, #4]
 8021c8c:	f7ff ff4c 	bl	8021b28 <__NVIC_SetPriorityGrouping>
}
 8021c90:	bf00      	nop
 8021c92:	3708      	adds	r7, #8
 8021c94:	46bd      	mov	sp, r7
 8021c96:	bd80      	pop	{r7, pc}

08021c98 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8021c98:	b580      	push	{r7, lr}
 8021c9a:	b086      	sub	sp, #24
 8021c9c:	af00      	add	r7, sp, #0
 8021c9e:	4603      	mov	r3, r0
 8021ca0:	60b9      	str	r1, [r7, #8]
 8021ca2:	607a      	str	r2, [r7, #4]
 8021ca4:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8021ca6:	2300      	movs	r3, #0
 8021ca8:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8021caa:	f7ff ff61 	bl	8021b70 <__NVIC_GetPriorityGrouping>
 8021cae:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8021cb0:	687a      	ldr	r2, [r7, #4]
 8021cb2:	68b9      	ldr	r1, [r7, #8]
 8021cb4:	6978      	ldr	r0, [r7, #20]
 8021cb6:	f7ff ffb1 	bl	8021c1c <NVIC_EncodePriority>
 8021cba:	4602      	mov	r2, r0
 8021cbc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8021cc0:	4611      	mov	r1, r2
 8021cc2:	4618      	mov	r0, r3
 8021cc4:	f7ff ff80 	bl	8021bc8 <__NVIC_SetPriority>
}
 8021cc8:	bf00      	nop
 8021cca:	3718      	adds	r7, #24
 8021ccc:	46bd      	mov	sp, r7
 8021cce:	bd80      	pop	{r7, pc}

08021cd0 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8021cd0:	b580      	push	{r7, lr}
 8021cd2:	b082      	sub	sp, #8
 8021cd4:	af00      	add	r7, sp, #0
 8021cd6:	4603      	mov	r3, r0
 8021cd8:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8021cda:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8021cde:	4618      	mov	r0, r3
 8021ce0:	f7ff ff54 	bl	8021b8c <__NVIC_EnableIRQ>
}
 8021ce4:	bf00      	nop
 8021ce6:	3708      	adds	r7, #8
 8021ce8:	46bd      	mov	sp, r7
 8021cea:	bd80      	pop	{r7, pc}

08021cec <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8021cec:	b580      	push	{r7, lr}
 8021cee:	b084      	sub	sp, #16
 8021cf0:	af00      	add	r7, sp, #0
 8021cf2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 8021cf4:	687b      	ldr	r3, [r7, #4]
 8021cf6:	2b00      	cmp	r3, #0
 8021cf8:	d101      	bne.n	8021cfe <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 8021cfa:	2301      	movs	r3, #1
 8021cfc:	e06c      	b.n	8021dd8 <HAL_ETH_Init+0xec>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 8021cfe:	687b      	ldr	r3, [r7, #4]
 8021d00:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8021d04:	2b00      	cmp	r3, #0
 8021d06:	d106      	bne.n	8021d16 <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 8021d08:	687b      	ldr	r3, [r7, #4]
 8021d0a:	2223      	movs	r2, #35	; 0x23
 8021d0c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8021d10:	6878      	ldr	r0, [r7, #4]
 8021d12:	f003 f939 	bl	8024f88 <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8021d16:	2300      	movs	r3, #0
 8021d18:	60bb      	str	r3, [r7, #8]
 8021d1a:	4b31      	ldr	r3, [pc, #196]	; (8021de0 <HAL_ETH_Init+0xf4>)
 8021d1c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8021d1e:	4a30      	ldr	r2, [pc, #192]	; (8021de0 <HAL_ETH_Init+0xf4>)
 8021d20:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8021d24:	6453      	str	r3, [r2, #68]	; 0x44
 8021d26:	4b2e      	ldr	r3, [pc, #184]	; (8021de0 <HAL_ETH_Init+0xf4>)
 8021d28:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8021d2a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8021d2e:	60bb      	str	r3, [r7, #8]
 8021d30:	68bb      	ldr	r3, [r7, #8]

  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 8021d32:	4b2c      	ldr	r3, [pc, #176]	; (8021de4 <HAL_ETH_Init+0xf8>)
 8021d34:	685b      	ldr	r3, [r3, #4]
 8021d36:	4a2b      	ldr	r2, [pc, #172]	; (8021de4 <HAL_ETH_Init+0xf8>)
 8021d38:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8021d3c:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 8021d3e:	4b29      	ldr	r3, [pc, #164]	; (8021de4 <HAL_ETH_Init+0xf8>)
 8021d40:	685a      	ldr	r2, [r3, #4]
 8021d42:	687b      	ldr	r3, [r7, #4]
 8021d44:	689b      	ldr	r3, [r3, #8]
 8021d46:	4927      	ldr	r1, [pc, #156]	; (8021de4 <HAL_ETH_Init+0xf8>)
 8021d48:	4313      	orrs	r3, r2
 8021d4a:	604b      	str	r3, [r1, #4]
  /* Dummy read to sync SYSCFG with ETH */
  (void)SYSCFG->PMC;
 8021d4c:	4b25      	ldr	r3, [pc, #148]	; (8021de4 <HAL_ETH_Init+0xf8>)
 8021d4e:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR);
 8021d50:	687b      	ldr	r3, [r7, #4]
 8021d52:	681b      	ldr	r3, [r3, #0]
 8021d54:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8021d58:	681b      	ldr	r3, [r3, #0]
 8021d5a:	687a      	ldr	r2, [r7, #4]
 8021d5c:	6812      	ldr	r2, [r2, #0]
 8021d5e:	f043 0301 	orr.w	r3, r3, #1
 8021d62:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8021d66:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8021d68:	f7ff feae 	bl	8021ac8 <HAL_GetTick>
 8021d6c:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 8021d6e:	e011      	b.n	8021d94 <HAL_ETH_Init+0xa8>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 8021d70:	f7ff feaa 	bl	8021ac8 <HAL_GetTick>
 8021d74:	4602      	mov	r2, r0
 8021d76:	68fb      	ldr	r3, [r7, #12]
 8021d78:	1ad3      	subs	r3, r2, r3
 8021d7a:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8021d7e:	d909      	bls.n	8021d94 <HAL_ETH_Init+0xa8>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 8021d80:	687b      	ldr	r3, [r7, #4]
 8021d82:	2204      	movs	r2, #4
 8021d84:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 8021d88:	687b      	ldr	r3, [r7, #4]
 8021d8a:	22e0      	movs	r2, #224	; 0xe0
 8021d8c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      /* Return Error */
      return HAL_ERROR;
 8021d90:	2301      	movs	r3, #1
 8021d92:	e021      	b.n	8021dd8 <HAL_ETH_Init+0xec>
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 8021d94:	687b      	ldr	r3, [r7, #4]
 8021d96:	681b      	ldr	r3, [r3, #0]
 8021d98:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8021d9c:	681b      	ldr	r3, [r3, #0]
 8021d9e:	f003 0301 	and.w	r3, r3, #1
 8021da2:	2b00      	cmp	r3, #0
 8021da4:	d1e4      	bne.n	8021d70 <HAL_ETH_Init+0x84>
    }
  }


  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 8021da6:	6878      	ldr	r0, [r7, #4]
 8021da8:	f000 ff4a 	bl	8022c40 <ETH_MACDMAConfig>


  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 8021dac:	6878      	ldr	r0, [r7, #4]
 8021dae:	f000 fff1 	bl	8022d94 <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 8021db2:	6878      	ldr	r0, [r7, #4]
 8021db4:	f001 f847 	bl	8022e46 <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 8021db8:	687b      	ldr	r3, [r7, #4]
 8021dba:	685b      	ldr	r3, [r3, #4]
 8021dbc:	461a      	mov	r2, r3
 8021dbe:	2100      	movs	r1, #0
 8021dc0:	6878      	ldr	r0, [r7, #4]
 8021dc2:	f000 ffaf 	bl	8022d24 <ETH_MACAddressConfig>

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 8021dc6:	687b      	ldr	r3, [r7, #4]
 8021dc8:	2200      	movs	r2, #0
 8021dca:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  heth->gState = HAL_ETH_STATE_READY;
 8021dce:	687b      	ldr	r3, [r7, #4]
 8021dd0:	2210      	movs	r2, #16
 8021dd2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8021dd6:	2300      	movs	r3, #0
}
 8021dd8:	4618      	mov	r0, r3
 8021dda:	3710      	adds	r7, #16
 8021ddc:	46bd      	mov	sp, r7
 8021dde:	bd80      	pop	{r7, pc}
 8021de0:	40023800 	.word	0x40023800
 8021de4:	40013800 	.word	0x40013800

08021de8 <HAL_ETH_Start_IT>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Start_IT(ETH_HandleTypeDef *heth)
{
 8021de8:	b580      	push	{r7, lr}
 8021dea:	b084      	sub	sp, #16
 8021dec:	af00      	add	r7, sp, #0
 8021dee:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg1;

  if (heth->gState == HAL_ETH_STATE_READY)
 8021df0:	687b      	ldr	r3, [r7, #4]
 8021df2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8021df6:	2b10      	cmp	r3, #16
 8021df8:	d17f      	bne.n	8021efa <HAL_ETH_Start_IT+0x112>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 8021dfa:	687b      	ldr	r3, [r7, #4]
 8021dfc:	2223      	movs	r2, #35	; 0x23
 8021dfe:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* save IT mode to ETH Handle */
    heth->RxDescList.ItMode = 1U;
 8021e02:	687b      	ldr	r3, [r7, #4]
 8021e04:	2201      	movs	r2, #1
 8021e06:	659a      	str	r2, [r3, #88]	; 0x58
    /* Disable MMC Interrupts */
    SET_BIT(heth->Instance->MACIMR, ETH_MACIMR_TSTIM | ETH_MACIMR_PMTIM);
 8021e08:	687b      	ldr	r3, [r7, #4]
 8021e0a:	681b      	ldr	r3, [r3, #0]
 8021e0c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8021e0e:	687b      	ldr	r3, [r7, #4]
 8021e10:	681b      	ldr	r3, [r3, #0]
 8021e12:	f442 7202 	orr.w	r2, r2, #520	; 0x208
 8021e16:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable Rx MMC Interrupts */
    SET_BIT(heth->Instance->MMCRIMR, ETH_MMCRIMR_RGUFM | ETH_MMCRIMR_RFAEM | \
 8021e18:	687b      	ldr	r3, [r7, #4]
 8021e1a:	681b      	ldr	r3, [r3, #0]
 8021e1c:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
 8021e20:	687a      	ldr	r2, [r7, #4]
 8021e22:	6812      	ldr	r2, [r2, #0]
 8021e24:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8021e28:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8021e2c:	f8c2 310c 	str.w	r3, [r2, #268]	; 0x10c
            ETH_MMCRIMR_RFCEM);

    /* Disable Tx MMC Interrupts */
    SET_BIT(heth->Instance->MMCTIMR, ETH_MMCTIMR_TGFM | ETH_MMCTIMR_TGFMSCM | \
 8021e30:	687b      	ldr	r3, [r7, #4]
 8021e32:	681b      	ldr	r3, [r3, #0]
 8021e34:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
 8021e38:	687b      	ldr	r3, [r7, #4]
 8021e3a:	681b      	ldr	r3, [r3, #0]
 8021e3c:	f442 1203 	orr.w	r2, r2, #2146304	; 0x20c000
 8021e40:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
            ETH_MMCTIMR_TGFSCM);

    /* Set nombre of descriptors to build */
    heth->RxDescList.RxBuildDescCnt = ETH_RX_DESC_CNT;
 8021e44:	687b      	ldr	r3, [r7, #4]
 8021e46:	2204      	movs	r2, #4
 8021e48:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Build all descriptors */
    ETH_UpdateDescriptor(heth);
 8021e4a:	6878      	ldr	r0, [r7, #4]
 8021e4c:	f000 f9f8 	bl	8022240 <ETH_UpdateDescriptor>

    /* Enable the MAC transmission */
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
 8021e50:	687b      	ldr	r3, [r7, #4]
 8021e52:	681b      	ldr	r3, [r3, #0]
 8021e54:	681a      	ldr	r2, [r3, #0]
 8021e56:	687b      	ldr	r3, [r7, #4]
 8021e58:	681b      	ldr	r3, [r3, #0]
 8021e5a:	f042 0208 	orr.w	r2, r2, #8
 8021e5e:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 8021e60:	687b      	ldr	r3, [r7, #4]
 8021e62:	681b      	ldr	r3, [r3, #0]
 8021e64:	681b      	ldr	r3, [r3, #0]
 8021e66:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8021e68:	2001      	movs	r0, #1
 8021e6a:	f7ff fe39 	bl	8021ae0 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 8021e6e:	687b      	ldr	r3, [r7, #4]
 8021e70:	681b      	ldr	r3, [r3, #0]
 8021e72:	68fa      	ldr	r2, [r7, #12]
 8021e74:	601a      	str	r2, [r3, #0]

    /* Enable the MAC reception */
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_RE);
 8021e76:	687b      	ldr	r3, [r7, #4]
 8021e78:	681b      	ldr	r3, [r3, #0]
 8021e7a:	681a      	ldr	r2, [r3, #0]
 8021e7c:	687b      	ldr	r3, [r7, #4]
 8021e7e:	681b      	ldr	r3, [r3, #0]
 8021e80:	f042 0204 	orr.w	r2, r2, #4
 8021e84:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 8021e86:	687b      	ldr	r3, [r7, #4]
 8021e88:	681b      	ldr	r3, [r3, #0]
 8021e8a:	681b      	ldr	r3, [r3, #0]
 8021e8c:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8021e8e:	2001      	movs	r0, #1
 8021e90:	f7ff fe26 	bl	8021ae0 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 8021e94:	687b      	ldr	r3, [r7, #4]
 8021e96:	681b      	ldr	r3, [r3, #0]
 8021e98:	68fa      	ldr	r2, [r7, #12]
 8021e9a:	601a      	str	r2, [r3, #0]

    /* Flush Transmit FIFO */
    ETH_FlushTransmitFIFO(heth);
 8021e9c:	6878      	ldr	r0, [r7, #4]
 8021e9e:	f000 fd70 	bl	8022982 <ETH_FlushTransmitFIFO>

    /* Enable the DMA transmission */
    SET_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_ST);
 8021ea2:	687b      	ldr	r3, [r7, #4]
 8021ea4:	681b      	ldr	r3, [r3, #0]
 8021ea6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8021eaa:	699b      	ldr	r3, [r3, #24]
 8021eac:	687a      	ldr	r2, [r7, #4]
 8021eae:	6812      	ldr	r2, [r2, #0]
 8021eb0:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8021eb4:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8021eb8:	6193      	str	r3, [r2, #24]

    /* Enable the DMA reception */
    SET_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_SR);
 8021eba:	687b      	ldr	r3, [r7, #4]
 8021ebc:	681b      	ldr	r3, [r3, #0]
 8021ebe:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8021ec2:	699b      	ldr	r3, [r3, #24]
 8021ec4:	687a      	ldr	r2, [r7, #4]
 8021ec6:	6812      	ldr	r2, [r2, #0]
 8021ec8:	f043 0302 	orr.w	r3, r3, #2
 8021ecc:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8021ed0:	6193      	str	r3, [r2, #24]
    /* Enable ETH DMA interrupts:
    - Tx complete interrupt
    - Rx complete interrupt
    - Fatal bus interrupt
    */
    __HAL_ETH_DMA_ENABLE_IT(heth, (ETH_DMAIER_NISE | ETH_DMAIER_RIE | ETH_DMAIER_TIE  |
 8021ed2:	687b      	ldr	r3, [r7, #4]
 8021ed4:	681b      	ldr	r3, [r3, #0]
 8021ed6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8021eda:	69db      	ldr	r3, [r3, #28]
 8021edc:	687a      	ldr	r2, [r7, #4]
 8021ede:	6812      	ldr	r2, [r2, #0]
 8021ee0:	f443 33d0 	orr.w	r3, r3, #106496	; 0x1a000
 8021ee4:	f043 03c1 	orr.w	r3, r3, #193	; 0xc1
 8021ee8:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8021eec:	61d3      	str	r3, [r2, #28]
                                   ETH_DMAIER_FBEIE | ETH_DMAIER_AISE | ETH_DMAIER_RBUIE));

    heth->gState = HAL_ETH_STATE_STARTED;
 8021eee:	687b      	ldr	r3, [r7, #4]
 8021ef0:	2223      	movs	r2, #35	; 0x23
 8021ef2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    return HAL_OK;
 8021ef6:	2300      	movs	r3, #0
 8021ef8:	e000      	b.n	8021efc <HAL_ETH_Start_IT+0x114>
  }
  else
  {
    return HAL_ERROR;
 8021efa:	2301      	movs	r3, #1
  }
}
 8021efc:	4618      	mov	r0, r3
 8021efe:	3710      	adds	r7, #16
 8021f00:	46bd      	mov	sp, r7
 8021f02:	bd80      	pop	{r7, pc}

08021f04 <HAL_ETH_Stop_IT>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Stop_IT(ETH_HandleTypeDef *heth)
{
 8021f04:	b580      	push	{r7, lr}
 8021f06:	b086      	sub	sp, #24
 8021f08:	af00      	add	r7, sp, #0
 8021f0a:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t descindex;
  uint32_t tmpreg1;

  if (heth->gState == HAL_ETH_STATE_STARTED)
 8021f0c:	687b      	ldr	r3, [r7, #4]
 8021f0e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8021f12:	2b23      	cmp	r3, #35	; 0x23
 8021f14:	d170      	bne.n	8021ff8 <HAL_ETH_Stop_IT+0xf4>
  {
    /* Set the ETH peripheral state to BUSY */
    heth->gState = HAL_ETH_STATE_BUSY;
 8021f16:	687b      	ldr	r3, [r7, #4]
 8021f18:	2223      	movs	r2, #35	; 0x23
 8021f1a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    __HAL_ETH_DMA_DISABLE_IT(heth, (ETH_DMAIER_NISE | ETH_DMAIER_RIE | ETH_DMAIER_TIE  |
 8021f1e:	687b      	ldr	r3, [r7, #4]
 8021f20:	681b      	ldr	r3, [r3, #0]
 8021f22:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8021f26:	69db      	ldr	r3, [r3, #28]
 8021f28:	687a      	ldr	r2, [r7, #4]
 8021f2a:	6812      	ldr	r2, [r2, #0]
 8021f2c:	f423 33d0 	bic.w	r3, r3, #106496	; 0x1a000
 8021f30:	f023 03c1 	bic.w	r3, r3, #193	; 0xc1
 8021f34:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8021f38:	61d3      	str	r3, [r2, #28]
                                    ETH_DMAIER_FBEIE | ETH_DMAIER_AISE | ETH_DMAIER_RBUIE));

    /* Disable the DMA transmission */
    CLEAR_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_ST);
 8021f3a:	687b      	ldr	r3, [r7, #4]
 8021f3c:	681b      	ldr	r3, [r3, #0]
 8021f3e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8021f42:	699b      	ldr	r3, [r3, #24]
 8021f44:	687a      	ldr	r2, [r7, #4]
 8021f46:	6812      	ldr	r2, [r2, #0]
 8021f48:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8021f4c:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8021f50:	6193      	str	r3, [r2, #24]

    /* Disable the DMA reception */
    CLEAR_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_SR);
 8021f52:	687b      	ldr	r3, [r7, #4]
 8021f54:	681b      	ldr	r3, [r3, #0]
 8021f56:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8021f5a:	699b      	ldr	r3, [r3, #24]
 8021f5c:	687a      	ldr	r2, [r7, #4]
 8021f5e:	6812      	ldr	r2, [r2, #0]
 8021f60:	f023 0302 	bic.w	r3, r3, #2
 8021f64:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8021f68:	6193      	str	r3, [r2, #24]

    /* Disable the MAC reception */
    CLEAR_BIT(heth->Instance->MACCR, ETH_MACCR_RE);
 8021f6a:	687b      	ldr	r3, [r7, #4]
 8021f6c:	681b      	ldr	r3, [r3, #0]
 8021f6e:	681a      	ldr	r2, [r3, #0]
 8021f70:	687b      	ldr	r3, [r7, #4]
 8021f72:	681b      	ldr	r3, [r3, #0]
 8021f74:	f022 0204 	bic.w	r2, r2, #4
 8021f78:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 8021f7a:	687b      	ldr	r3, [r7, #4]
 8021f7c:	681b      	ldr	r3, [r3, #0]
 8021f7e:	681b      	ldr	r3, [r3, #0]
 8021f80:	613b      	str	r3, [r7, #16]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8021f82:	2001      	movs	r0, #1
 8021f84:	f7ff fdac 	bl	8021ae0 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 8021f88:	687b      	ldr	r3, [r7, #4]
 8021f8a:	681b      	ldr	r3, [r3, #0]
 8021f8c:	693a      	ldr	r2, [r7, #16]
 8021f8e:	601a      	str	r2, [r3, #0]

    /* Flush Transmit FIFO */
    ETH_FlushTransmitFIFO(heth);
 8021f90:	6878      	ldr	r0, [r7, #4]
 8021f92:	f000 fcf6 	bl	8022982 <ETH_FlushTransmitFIFO>

    /* Disable the MAC transmission */
    CLEAR_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
 8021f96:	687b      	ldr	r3, [r7, #4]
 8021f98:	681b      	ldr	r3, [r3, #0]
 8021f9a:	681a      	ldr	r2, [r3, #0]
 8021f9c:	687b      	ldr	r3, [r7, #4]
 8021f9e:	681b      	ldr	r3, [r3, #0]
 8021fa0:	f022 0208 	bic.w	r2, r2, #8
 8021fa4:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 8021fa6:	687b      	ldr	r3, [r7, #4]
 8021fa8:	681b      	ldr	r3, [r3, #0]
 8021faa:	681b      	ldr	r3, [r3, #0]
 8021fac:	613b      	str	r3, [r7, #16]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8021fae:	2001      	movs	r0, #1
 8021fb0:	f7ff fd96 	bl	8021ae0 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 8021fb4:	687b      	ldr	r3, [r7, #4]
 8021fb6:	681b      	ldr	r3, [r3, #0]
 8021fb8:	693a      	ldr	r2, [r7, #16]
 8021fba:	601a      	str	r2, [r3, #0]

    /* Clear IOC bit to all Rx descriptors */
    for (descindex = 0; descindex < (uint32_t)ETH_RX_DESC_CNT; descindex++)
 8021fbc:	2300      	movs	r3, #0
 8021fbe:	617b      	str	r3, [r7, #20]
 8021fc0:	e00e      	b.n	8021fe0 <HAL_ETH_Stop_IT+0xdc>
    {
      dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descindex];
 8021fc2:	687b      	ldr	r3, [r7, #4]
 8021fc4:	697a      	ldr	r2, [r7, #20]
 8021fc6:	3212      	adds	r2, #18
 8021fc8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8021fcc:	60fb      	str	r3, [r7, #12]
      SET_BIT(dmarxdesc->DESC1, ETH_DMARXDESC_DIC);
 8021fce:	68fb      	ldr	r3, [r7, #12]
 8021fd0:	685b      	ldr	r3, [r3, #4]
 8021fd2:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8021fd6:	68fb      	ldr	r3, [r7, #12]
 8021fd8:	605a      	str	r2, [r3, #4]
    for (descindex = 0; descindex < (uint32_t)ETH_RX_DESC_CNT; descindex++)
 8021fda:	697b      	ldr	r3, [r7, #20]
 8021fdc:	3301      	adds	r3, #1
 8021fde:	617b      	str	r3, [r7, #20]
 8021fe0:	697b      	ldr	r3, [r7, #20]
 8021fe2:	2b03      	cmp	r3, #3
 8021fe4:	d9ed      	bls.n	8021fc2 <HAL_ETH_Stop_IT+0xbe>
    }

    heth->RxDescList.ItMode = 0U;
 8021fe6:	687b      	ldr	r3, [r7, #4]
 8021fe8:	2200      	movs	r2, #0
 8021fea:	659a      	str	r2, [r3, #88]	; 0x58

    heth->gState = HAL_ETH_STATE_READY;
 8021fec:	687b      	ldr	r3, [r7, #4]
 8021fee:	2210      	movs	r2, #16
 8021ff0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Return function status */
    return HAL_OK;
 8021ff4:	2300      	movs	r3, #0
 8021ff6:	e000      	b.n	8021ffa <HAL_ETH_Stop_IT+0xf6>
  }
  else
  {
    return HAL_ERROR;
 8021ff8:	2301      	movs	r3, #1
  }
}
 8021ffa:	4618      	mov	r0, r3
 8021ffc:	3718      	adds	r7, #24
 8021ffe:	46bd      	mov	sp, r7
 8022000:	bd80      	pop	{r7, pc}

08022002 <HAL_ETH_Transmit_IT>:
  *         the configuration information for ETHERNET module
  * @param  pTxConfig: Hold the configuration of packet to be transmitted
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Transmit_IT(ETH_HandleTypeDef *heth, ETH_TxPacketConfig *pTxConfig)
{
 8022002:	b580      	push	{r7, lr}
 8022004:	b082      	sub	sp, #8
 8022006:	af00      	add	r7, sp, #0
 8022008:	6078      	str	r0, [r7, #4]
 802200a:	6039      	str	r1, [r7, #0]
  if (pTxConfig == NULL)
 802200c:	683b      	ldr	r3, [r7, #0]
 802200e:	2b00      	cmp	r3, #0
 8022010:	d109      	bne.n	8022026 <HAL_ETH_Transmit_IT+0x24>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_PARAM;
 8022012:	687b      	ldr	r3, [r7, #4]
 8022014:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8022018:	f043 0201 	orr.w	r2, r3, #1
 802201c:	687b      	ldr	r3, [r7, #4]
 802201e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    return HAL_ERROR;
 8022022:	2301      	movs	r3, #1
 8022024:	e045      	b.n	80220b2 <HAL_ETH_Transmit_IT+0xb0>
  }

  if (heth->gState == HAL_ETH_STATE_STARTED)
 8022026:	687b      	ldr	r3, [r7, #4]
 8022028:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 802202c:	2b23      	cmp	r3, #35	; 0x23
 802202e:	d13f      	bne.n	80220b0 <HAL_ETH_Transmit_IT+0xae>
  {
    /* Save the packet pointer to release.  */
    heth->TxDescList.CurrentPacketAddress = (uint32_t *)pTxConfig->pData;
 8022030:	683b      	ldr	r3, [r7, #0]
 8022032:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8022034:	687b      	ldr	r3, [r7, #4]
 8022036:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Config DMA Tx descriptor by Tx Packet info */
    if (ETH_Prepare_Tx_Descriptors(heth, pTxConfig, 1) != HAL_ETH_ERROR_NONE)
 8022038:	2201      	movs	r2, #1
 802203a:	6839      	ldr	r1, [r7, #0]
 802203c:	6878      	ldr	r0, [r7, #4]
 802203e:	f000 ff6f 	bl	8022f20 <ETH_Prepare_Tx_Descriptors>
 8022042:	4603      	mov	r3, r0
 8022044:	2b00      	cmp	r3, #0
 8022046:	d009      	beq.n	802205c <HAL_ETH_Transmit_IT+0x5a>
    {
      heth->ErrorCode |= HAL_ETH_ERROR_BUSY;
 8022048:	687b      	ldr	r3, [r7, #4]
 802204a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 802204e:	f043 0202 	orr.w	r2, r3, #2
 8022052:	687b      	ldr	r3, [r7, #4]
 8022054:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      return HAL_ERROR;
 8022058:	2301      	movs	r3, #1
 802205a:	e02a      	b.n	80220b2 <HAL_ETH_Transmit_IT+0xb0>
  __ASM volatile ("dsb 0xF":::"memory");
 802205c:	f3bf 8f4f 	dsb	sy
}
 8022060:	bf00      	nop

    /* Ensure completion of descriptor preparation before transmission start */
    __DSB();

    /* Incr current tx desc index */
    INCR_TX_DESC_INDEX(heth->TxDescList.CurTxDesc, 1U);
 8022062:	687b      	ldr	r3, [r7, #4]
 8022064:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8022066:	1c5a      	adds	r2, r3, #1
 8022068:	687b      	ldr	r3, [r7, #4]
 802206a:	629a      	str	r2, [r3, #40]	; 0x28
 802206c:	687b      	ldr	r3, [r7, #4]
 802206e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8022070:	2b03      	cmp	r3, #3
 8022072:	d904      	bls.n	802207e <HAL_ETH_Transmit_IT+0x7c>
 8022074:	687b      	ldr	r3, [r7, #4]
 8022076:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8022078:	1f1a      	subs	r2, r3, #4
 802207a:	687b      	ldr	r3, [r7, #4]
 802207c:	629a      	str	r2, [r3, #40]	; 0x28

    /* Start transmission */
    /* issue a poll command to Tx DMA by writing address of next immediate free descriptor */
    if (((heth->Instance)->DMASR & ETH_DMASR_TBUS) != (uint32_t)RESET)
 802207e:	687b      	ldr	r3, [r7, #4]
 8022080:	681b      	ldr	r3, [r3, #0]
 8022082:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8022086:	695b      	ldr	r3, [r3, #20]
 8022088:	f003 0304 	and.w	r3, r3, #4
 802208c:	2b00      	cmp	r3, #0
 802208e:	d00d      	beq.n	80220ac <HAL_ETH_Transmit_IT+0xaa>
    {
      /* Clear TBUS ETHERNET DMA flag */
      (heth->Instance)->DMASR = ETH_DMASR_TBUS;
 8022090:	687b      	ldr	r3, [r7, #4]
 8022092:	681b      	ldr	r3, [r3, #0]
 8022094:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8022098:	461a      	mov	r2, r3
 802209a:	2304      	movs	r3, #4
 802209c:	6153      	str	r3, [r2, #20]
      /* Resume DMA transmission*/
      (heth->Instance)->DMATPDR = 0U;
 802209e:	687b      	ldr	r3, [r7, #4]
 80220a0:	681b      	ldr	r3, [r3, #0]
 80220a2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80220a6:	461a      	mov	r2, r3
 80220a8:	2300      	movs	r3, #0
 80220aa:	6053      	str	r3, [r2, #4]
    }

    return HAL_OK;
 80220ac:	2300      	movs	r3, #0
 80220ae:	e000      	b.n	80220b2 <HAL_ETH_Transmit_IT+0xb0>

  }
  else
  {
    return HAL_ERROR;
 80220b0:	2301      	movs	r3, #1
  }
}
 80220b2:	4618      	mov	r0, r3
 80220b4:	3708      	adds	r7, #8
 80220b6:	46bd      	mov	sp, r7
 80220b8:	bd80      	pop	{r7, pc}

080220ba <HAL_ETH_ReadData>:
  *         the configuration information for ETHERNET module
  * @param  pAppBuff: Pointer to an application buffer to receive the packet.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadData(ETH_HandleTypeDef *heth, void **pAppBuff)
{
 80220ba:	b580      	push	{r7, lr}
 80220bc:	b088      	sub	sp, #32
 80220be:	af00      	add	r7, sp, #0
 80220c0:	6078      	str	r0, [r7, #4]
 80220c2:	6039      	str	r1, [r7, #0]
  uint32_t descidx;
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t desccnt = 0U;
 80220c4:	2300      	movs	r3, #0
 80220c6:	617b      	str	r3, [r7, #20]
  uint32_t desccntmax;
  uint32_t bufflength;
  uint8_t rxdataready = 0U;
 80220c8:	2300      	movs	r3, #0
 80220ca:	73fb      	strb	r3, [r7, #15]


  if (pAppBuff == NULL)
 80220cc:	683b      	ldr	r3, [r7, #0]
 80220ce:	2b00      	cmp	r3, #0
 80220d0:	d109      	bne.n	80220e6 <HAL_ETH_ReadData+0x2c>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_PARAM;
 80220d2:	687b      	ldr	r3, [r7, #4]
 80220d4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80220d8:	f043 0201 	orr.w	r2, r3, #1
 80220dc:	687b      	ldr	r3, [r7, #4]
 80220de:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    return HAL_ERROR;
 80220e2:	2301      	movs	r3, #1
 80220e4:	e0a8      	b.n	8022238 <HAL_ETH_ReadData+0x17e>
  }

  if (heth->gState != HAL_ETH_STATE_STARTED)
 80220e6:	687b      	ldr	r3, [r7, #4]
 80220e8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80220ec:	2b23      	cmp	r3, #35	; 0x23
 80220ee:	d001      	beq.n	80220f4 <HAL_ETH_ReadData+0x3a>
  {
    return HAL_ERROR;
 80220f0:	2301      	movs	r3, #1
 80220f2:	e0a1      	b.n	8022238 <HAL_ETH_ReadData+0x17e>
  }

  descidx = heth->RxDescList.RxDescIdx;
 80220f4:	687b      	ldr	r3, [r7, #4]
 80220f6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80220f8:	61fb      	str	r3, [r7, #28]
  dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 80220fa:	687b      	ldr	r3, [r7, #4]
 80220fc:	69fa      	ldr	r2, [r7, #28]
 80220fe:	3212      	adds	r2, #18
 8022100:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8022104:	61bb      	str	r3, [r7, #24]
  desccntmax = ETH_RX_DESC_CNT - heth->RxDescList.RxBuildDescCnt;
 8022106:	687b      	ldr	r3, [r7, #4]
 8022108:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 802210a:	f1c3 0304 	rsb	r3, r3, #4
 802210e:	60bb      	str	r3, [r7, #8]

  /* Check if descriptor is not owned by DMA */
  while ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 8022110:	e06a      	b.n	80221e8 <HAL_ETH_ReadData+0x12e>
         && (rxdataready == 0U))
  {
    if (READ_BIT(dmarxdesc->DESC0,  ETH_DMARXDESC_LS)  != (uint32_t)RESET)
 8022112:	69bb      	ldr	r3, [r7, #24]
 8022114:	681b      	ldr	r3, [r3, #0]
 8022116:	f403 7380 	and.w	r3, r3, #256	; 0x100
 802211a:	2b00      	cmp	r3, #0
 802211c:	d007      	beq.n	802212e <HAL_ETH_ReadData+0x74>
    {
      /* Get timestamp high */
      heth->RxDescList.TimeStamp.TimeStampHigh = dmarxdesc->DESC6;
 802211e:	69bb      	ldr	r3, [r7, #24]
 8022120:	699a      	ldr	r2, [r3, #24]
 8022122:	687b      	ldr	r3, [r7, #4]
 8022124:	679a      	str	r2, [r3, #120]	; 0x78
      /* Get timestamp low */
      heth->RxDescList.TimeStamp.TimeStampLow  = dmarxdesc->DESC7;
 8022126:	69bb      	ldr	r3, [r7, #24]
 8022128:	69da      	ldr	r2, [r3, #28]
 802212a:	687b      	ldr	r3, [r7, #4]
 802212c:	675a      	str	r2, [r3, #116]	; 0x74
    }
    if ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_FS) != (uint32_t)RESET) || (heth->RxDescList.pRxStart != NULL))
 802212e:	69bb      	ldr	r3, [r7, #24]
 8022130:	681b      	ldr	r3, [r3, #0]
 8022132:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8022136:	2b00      	cmp	r3, #0
 8022138:	d103      	bne.n	8022142 <HAL_ETH_ReadData+0x88>
 802213a:	687b      	ldr	r3, [r7, #4]
 802213c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 802213e:	2b00      	cmp	r3, #0
 8022140:	d040      	beq.n	80221c4 <HAL_ETH_ReadData+0x10a>
    {
      /* Check first descriptor */
      if (READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_FS) != (uint32_t)RESET)
 8022142:	69bb      	ldr	r3, [r7, #24]
 8022144:	681b      	ldr	r3, [r3, #0]
 8022146:	f403 7300 	and.w	r3, r3, #512	; 0x200
 802214a:	2b00      	cmp	r3, #0
 802214c:	d005      	beq.n	802215a <HAL_ETH_ReadData+0xa0>
      {
        heth->RxDescList.RxDescCnt = 0;
 802214e:	687b      	ldr	r3, [r7, #4]
 8022150:	2200      	movs	r2, #0
 8022152:	661a      	str	r2, [r3, #96]	; 0x60
        heth->RxDescList.RxDataLength = 0;
 8022154:	687b      	ldr	r3, [r7, #4]
 8022156:	2200      	movs	r2, #0
 8022158:	665a      	str	r2, [r3, #100]	; 0x64
      }

      /* Check if last descriptor */
      bufflength = heth->Init.RxBuffLen;
 802215a:	687b      	ldr	r3, [r7, #4]
 802215c:	695b      	ldr	r3, [r3, #20]
 802215e:	613b      	str	r3, [r7, #16]
      if (READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_LS) != (uint32_t)RESET)
 8022160:	69bb      	ldr	r3, [r7, #24]
 8022162:	681b      	ldr	r3, [r3, #0]
 8022164:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8022168:	2b00      	cmp	r3, #0
 802216a:	d00c      	beq.n	8022186 <HAL_ETH_ReadData+0xcc>
      {
        /* Get the Frame Length of the received packet: substruct 4 bytes of the CRC */
        bufflength = ((dmarxdesc->DESC0 & ETH_DMARXDESC_FL) >> ETH_DMARXDESC_FRAMELENGTHSHIFT) - 4U;
 802216c:	69bb      	ldr	r3, [r7, #24]
 802216e:	681b      	ldr	r3, [r3, #0]
 8022170:	0c1b      	lsrs	r3, r3, #16
 8022172:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8022176:	3b04      	subs	r3, #4
 8022178:	613b      	str	r3, [r7, #16]

        /* Save Last descriptor index */
        heth->RxDescList.pRxLastRxDesc = dmarxdesc->DESC0;
 802217a:	69bb      	ldr	r3, [r7, #24]
 802217c:	681a      	ldr	r2, [r3, #0]
 802217e:	687b      	ldr	r3, [r7, #4]
 8022180:	671a      	str	r2, [r3, #112]	; 0x70

        /* Packet ready */
        rxdataready = 1;
 8022182:	2301      	movs	r3, #1
 8022184:	73fb      	strb	r3, [r7, #15]
      }

      /* Link data */
      WRITE_REG(dmarxdesc->BackupAddr0, dmarxdesc->DESC2);
 8022186:	69bb      	ldr	r3, [r7, #24]
 8022188:	689a      	ldr	r2, [r3, #8]
 802218a:	69bb      	ldr	r3, [r7, #24]
 802218c:	621a      	str	r2, [r3, #32]
      /*Call registered Link callback*/
      heth->rxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
                           (uint8_t *)dmarxdesc->BackupAddr0, bufflength);
#else
      /* Link callback */
      HAL_ETH_RxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
 802218e:	687b      	ldr	r3, [r7, #4]
 8022190:	f103 007c 	add.w	r0, r3, #124	; 0x7c
 8022194:	687b      	ldr	r3, [r7, #4]
 8022196:	f103 0180 	add.w	r1, r3, #128	; 0x80
                             (uint8_t *)dmarxdesc->BackupAddr0, (uint16_t) bufflength);
 802219a:	69bb      	ldr	r3, [r7, #24]
 802219c:	6a1b      	ldr	r3, [r3, #32]
      HAL_ETH_RxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
 802219e:	461a      	mov	r2, r3
 80221a0:	693b      	ldr	r3, [r7, #16]
 80221a2:	b29b      	uxth	r3, r3
 80221a4:	f003 f8aa 	bl	80252fc <HAL_ETH_RxLinkCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
      heth->RxDescList.RxDescCnt++;
 80221a8:	687b      	ldr	r3, [r7, #4]
 80221aa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80221ac:	1c5a      	adds	r2, r3, #1
 80221ae:	687b      	ldr	r3, [r7, #4]
 80221b0:	661a      	str	r2, [r3, #96]	; 0x60
      heth->RxDescList.RxDataLength += bufflength;
 80221b2:	687b      	ldr	r3, [r7, #4]
 80221b4:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 80221b6:	693b      	ldr	r3, [r7, #16]
 80221b8:	441a      	add	r2, r3
 80221ba:	687b      	ldr	r3, [r7, #4]
 80221bc:	665a      	str	r2, [r3, #100]	; 0x64

      /* Clear buffer pointer */
      dmarxdesc->BackupAddr0 = 0;
 80221be:	69bb      	ldr	r3, [r7, #24]
 80221c0:	2200      	movs	r2, #0
 80221c2:	621a      	str	r2, [r3, #32]
    }

    /* Increment current rx descriptor index */
    INCR_RX_DESC_INDEX(descidx, 1U);
 80221c4:	69fb      	ldr	r3, [r7, #28]
 80221c6:	3301      	adds	r3, #1
 80221c8:	61fb      	str	r3, [r7, #28]
 80221ca:	69fb      	ldr	r3, [r7, #28]
 80221cc:	2b03      	cmp	r3, #3
 80221ce:	d902      	bls.n	80221d6 <HAL_ETH_ReadData+0x11c>
 80221d0:	69fb      	ldr	r3, [r7, #28]
 80221d2:	3b04      	subs	r3, #4
 80221d4:	61fb      	str	r3, [r7, #28]
    /* Get current descriptor address */
    dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 80221d6:	687b      	ldr	r3, [r7, #4]
 80221d8:	69fa      	ldr	r2, [r7, #28]
 80221da:	3212      	adds	r2, #18
 80221dc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80221e0:	61bb      	str	r3, [r7, #24]
    desccnt++;
 80221e2:	697b      	ldr	r3, [r7, #20]
 80221e4:	3301      	adds	r3, #1
 80221e6:	617b      	str	r3, [r7, #20]
  while ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 80221e8:	69bb      	ldr	r3, [r7, #24]
 80221ea:	681b      	ldr	r3, [r3, #0]
 80221ec:	2b00      	cmp	r3, #0
 80221ee:	db06      	blt.n	80221fe <HAL_ETH_ReadData+0x144>
 80221f0:	697a      	ldr	r2, [r7, #20]
 80221f2:	68bb      	ldr	r3, [r7, #8]
 80221f4:	429a      	cmp	r2, r3
 80221f6:	d202      	bcs.n	80221fe <HAL_ETH_ReadData+0x144>
         && (rxdataready == 0U))
 80221f8:	7bfb      	ldrb	r3, [r7, #15]
 80221fa:	2b00      	cmp	r3, #0
 80221fc:	d089      	beq.n	8022112 <HAL_ETH_ReadData+0x58>
  }

  heth->RxDescList.RxBuildDescCnt += desccnt;
 80221fe:	687b      	ldr	r3, [r7, #4]
 8022200:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8022202:	697b      	ldr	r3, [r7, #20]
 8022204:	441a      	add	r2, r3
 8022206:	687b      	ldr	r3, [r7, #4]
 8022208:	66da      	str	r2, [r3, #108]	; 0x6c
  if ((heth->RxDescList.RxBuildDescCnt) != 0U)
 802220a:	687b      	ldr	r3, [r7, #4]
 802220c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 802220e:	2b00      	cmp	r3, #0
 8022210:	d002      	beq.n	8022218 <HAL_ETH_ReadData+0x15e>
  {
    /* Update Descriptors */
    ETH_UpdateDescriptor(heth);
 8022212:	6878      	ldr	r0, [r7, #4]
 8022214:	f000 f814 	bl	8022240 <ETH_UpdateDescriptor>
  }

  heth->RxDescList.RxDescIdx = descidx;
 8022218:	687b      	ldr	r3, [r7, #4]
 802221a:	69fa      	ldr	r2, [r7, #28]
 802221c:	65da      	str	r2, [r3, #92]	; 0x5c

  if (rxdataready == 1U)
 802221e:	7bfb      	ldrb	r3, [r7, #15]
 8022220:	2b01      	cmp	r3, #1
 8022222:	d108      	bne.n	8022236 <HAL_ETH_ReadData+0x17c>
  {
    /* Return received packet */
    *pAppBuff = heth->RxDescList.pRxStart;
 8022224:	687b      	ldr	r3, [r7, #4]
 8022226:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 8022228:	683b      	ldr	r3, [r7, #0]
 802222a:	601a      	str	r2, [r3, #0]
    /* Reset first element */
    heth->RxDescList.pRxStart = NULL;
 802222c:	687b      	ldr	r3, [r7, #4]
 802222e:	2200      	movs	r2, #0
 8022230:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8022232:	2300      	movs	r3, #0
 8022234:	e000      	b.n	8022238 <HAL_ETH_ReadData+0x17e>
  }

  /* Packet not ready */
  return HAL_ERROR;
 8022236:	2301      	movs	r3, #1
}
 8022238:	4618      	mov	r0, r3
 802223a:	3720      	adds	r7, #32
 802223c:	46bd      	mov	sp, r7
 802223e:	bd80      	pop	{r7, pc}

08022240 <ETH_UpdateDescriptor>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_UpdateDescriptor(ETH_HandleTypeDef *heth)
{
 8022240:	b580      	push	{r7, lr}
 8022242:	b088      	sub	sp, #32
 8022244:	af00      	add	r7, sp, #0
 8022246:	6078      	str	r0, [r7, #4]
  uint32_t descidx;
  uint32_t desccount;
  ETH_DMADescTypeDef *dmarxdesc;
  uint8_t *buff = NULL;
 8022248:	2300      	movs	r3, #0
 802224a:	60fb      	str	r3, [r7, #12]
  uint8_t allocStatus = 1U;
 802224c:	2301      	movs	r3, #1
 802224e:	74fb      	strb	r3, [r7, #19]

  descidx = heth->RxDescList.RxBuildDescIdx;
 8022250:	687b      	ldr	r3, [r7, #4]
 8022252:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8022254:	61fb      	str	r3, [r7, #28]
  dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 8022256:	687b      	ldr	r3, [r7, #4]
 8022258:	69fa      	ldr	r2, [r7, #28]
 802225a:	3212      	adds	r2, #18
 802225c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8022260:	617b      	str	r3, [r7, #20]
  desccount = heth->RxDescList.RxBuildDescCnt;
 8022262:	687b      	ldr	r3, [r7, #4]
 8022264:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8022266:	61bb      	str	r3, [r7, #24]

  while ((desccount > 0U) && (allocStatus != 0U))
 8022268:	e040      	b.n	80222ec <ETH_UpdateDescriptor+0xac>
  {
    /* Check if a buffer's attached the descriptor */
    if (READ_REG(dmarxdesc->BackupAddr0) == 0U)
 802226a:	697b      	ldr	r3, [r7, #20]
 802226c:	6a1b      	ldr	r3, [r3, #32]
 802226e:	2b00      	cmp	r3, #0
 8022270:	d112      	bne.n	8022298 <ETH_UpdateDescriptor+0x58>
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /*Call registered Allocate callback*/
      heth->rxAllocateCallback(&buff);
#else
      /* Allocate callback */
      HAL_ETH_RxAllocateCallback(&buff);
 8022272:	f107 030c 	add.w	r3, r7, #12
 8022276:	4618      	mov	r0, r3
 8022278:	f003 f810 	bl	802529c <HAL_ETH_RxAllocateCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
      if (buff == NULL)
 802227c:	68fb      	ldr	r3, [r7, #12]
 802227e:	2b00      	cmp	r3, #0
 8022280:	d102      	bne.n	8022288 <ETH_UpdateDescriptor+0x48>
      {
        allocStatus = 0U;
 8022282:	2300      	movs	r3, #0
 8022284:	74fb      	strb	r3, [r7, #19]
 8022286:	e007      	b.n	8022298 <ETH_UpdateDescriptor+0x58>
      }
      else
      {
        WRITE_REG(dmarxdesc->BackupAddr0, (uint32_t)buff);
 8022288:	68fb      	ldr	r3, [r7, #12]
 802228a:	461a      	mov	r2, r3
 802228c:	697b      	ldr	r3, [r7, #20]
 802228e:	621a      	str	r2, [r3, #32]
        WRITE_REG(dmarxdesc->DESC2, (uint32_t)buff);
 8022290:	68fb      	ldr	r3, [r7, #12]
 8022292:	461a      	mov	r2, r3
 8022294:	697b      	ldr	r3, [r7, #20]
 8022296:	609a      	str	r2, [r3, #8]
      }
    }

    if (allocStatus != 0U)
 8022298:	7cfb      	ldrb	r3, [r7, #19]
 802229a:	2b00      	cmp	r3, #0
 802229c:	d026      	beq.n	80222ec <ETH_UpdateDescriptor+0xac>
    {
      if (heth->RxDescList.ItMode == 0U)
 802229e:	687b      	ldr	r3, [r7, #4]
 80222a0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80222a2:	2b00      	cmp	r3, #0
 80222a4:	d103      	bne.n	80222ae <ETH_UpdateDescriptor+0x6e>
      {
        WRITE_REG(dmarxdesc->DESC1, ETH_DMARXDESC_DIC | ETH_RX_BUF_SIZE | ETH_DMARXDESC_RCH);
 80222a6:	697b      	ldr	r3, [r7, #20]
 80222a8:	4a1e      	ldr	r2, [pc, #120]	; (8022324 <ETH_UpdateDescriptor+0xe4>)
 80222aa:	605a      	str	r2, [r3, #4]
 80222ac:	e003      	b.n	80222b6 <ETH_UpdateDescriptor+0x76>
      }
      else
      {
        WRITE_REG(dmarxdesc->DESC1, ETH_RX_BUF_SIZE | ETH_DMARXDESC_RCH);
 80222ae:	697b      	ldr	r3, [r7, #20]
 80222b0:	f44f 428c 	mov.w	r2, #17920	; 0x4600
 80222b4:	605a      	str	r2, [r3, #4]
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 80222b6:	f3bf 8f5f 	dmb	sy
}
 80222ba:	bf00      	nop
         is fully performed.
         The __DMB() instruction is added to avoid any potential compiler optimization that
         may lead to abnormal behavior. */
      __DMB();

      SET_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN);
 80222bc:	697b      	ldr	r3, [r7, #20]
 80222be:	681b      	ldr	r3, [r3, #0]
 80222c0:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80222c4:	697b      	ldr	r3, [r7, #20]
 80222c6:	601a      	str	r2, [r3, #0]

      /* Increment current rx descriptor index */
      INCR_RX_DESC_INDEX(descidx, 1U);
 80222c8:	69fb      	ldr	r3, [r7, #28]
 80222ca:	3301      	adds	r3, #1
 80222cc:	61fb      	str	r3, [r7, #28]
 80222ce:	69fb      	ldr	r3, [r7, #28]
 80222d0:	2b03      	cmp	r3, #3
 80222d2:	d902      	bls.n	80222da <ETH_UpdateDescriptor+0x9a>
 80222d4:	69fb      	ldr	r3, [r7, #28]
 80222d6:	3b04      	subs	r3, #4
 80222d8:	61fb      	str	r3, [r7, #28]
      /* Get current descriptor address */
      dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 80222da:	687b      	ldr	r3, [r7, #4]
 80222dc:	69fa      	ldr	r2, [r7, #28]
 80222de:	3212      	adds	r2, #18
 80222e0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80222e4:	617b      	str	r3, [r7, #20]
      desccount--;
 80222e6:	69bb      	ldr	r3, [r7, #24]
 80222e8:	3b01      	subs	r3, #1
 80222ea:	61bb      	str	r3, [r7, #24]
  while ((desccount > 0U) && (allocStatus != 0U))
 80222ec:	69bb      	ldr	r3, [r7, #24]
 80222ee:	2b00      	cmp	r3, #0
 80222f0:	d002      	beq.n	80222f8 <ETH_UpdateDescriptor+0xb8>
 80222f2:	7cfb      	ldrb	r3, [r7, #19]
 80222f4:	2b00      	cmp	r3, #0
 80222f6:	d1b8      	bne.n	802226a <ETH_UpdateDescriptor+0x2a>
    }
  }

  if (heth->RxDescList.RxBuildDescCnt != desccount)
 80222f8:	687b      	ldr	r3, [r7, #4]
 80222fa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80222fc:	69ba      	ldr	r2, [r7, #24]
 80222fe:	429a      	cmp	r2, r3
 8022300:	d00c      	beq.n	802231c <ETH_UpdateDescriptor+0xdc>
  {
    /* Set the Tail pointer address */
    WRITE_REG(heth->Instance->DMARPDR, 0);
 8022302:	687b      	ldr	r3, [r7, #4]
 8022304:	681b      	ldr	r3, [r3, #0]
 8022306:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 802230a:	461a      	mov	r2, r3
 802230c:	2300      	movs	r3, #0
 802230e:	6093      	str	r3, [r2, #8]

    heth->RxDescList.RxBuildDescIdx = descidx;
 8022310:	687b      	ldr	r3, [r7, #4]
 8022312:	69fa      	ldr	r2, [r7, #28]
 8022314:	669a      	str	r2, [r3, #104]	; 0x68
    heth->RxDescList.RxBuildDescCnt = desccount;
 8022316:	687b      	ldr	r3, [r7, #4]
 8022318:	69ba      	ldr	r2, [r7, #24]
 802231a:	66da      	str	r2, [r3, #108]	; 0x6c
  }
}
 802231c:	bf00      	nop
 802231e:	3720      	adds	r7, #32
 8022320:	46bd      	mov	sp, r7
 8022322:	bd80      	pop	{r7, pc}
 8022324:	80004600 	.word	0x80004600

08022328 <HAL_ETH_ReleaseTxPacket>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReleaseTxPacket(ETH_HandleTypeDef *heth)
{
 8022328:	b580      	push	{r7, lr}
 802232a:	b086      	sub	sp, #24
 802232c:	af00      	add	r7, sp, #0
 802232e:	6078      	str	r0, [r7, #4]
  ETH_TxDescListTypeDef *dmatxdesclist = &heth->TxDescList;
 8022330:	687b      	ldr	r3, [r7, #4]
 8022332:	3318      	adds	r3, #24
 8022334:	60bb      	str	r3, [r7, #8]
  uint32_t numOfBuf =  dmatxdesclist->BuffersInUse;
 8022336:	68bb      	ldr	r3, [r7, #8]
 8022338:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 802233a:	617b      	str	r3, [r7, #20]
  uint32_t idx =       dmatxdesclist->releaseIndex;
 802233c:	68bb      	ldr	r3, [r7, #8]
 802233e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8022340:	613b      	str	r3, [r7, #16]
  uint8_t pktTxStatus = 1U;
 8022342:	2301      	movs	r3, #1
 8022344:	73fb      	strb	r3, [r7, #15]
#ifdef HAL_ETH_USE_PTP
  ETH_TimeStampTypeDef *timestamp = &heth->TxTimestamp;
#endif /* HAL_ETH_USE_PTP */

  /* Loop through buffers in use.  */
  while ((numOfBuf != 0U) && (pktTxStatus != 0U))
 8022346:	e03f      	b.n	80223c8 <HAL_ETH_ReleaseTxPacket+0xa0>
  {
    pktInUse = 1U;
 8022348:	2301      	movs	r3, #1
 802234a:	73bb      	strb	r3, [r7, #14]
    numOfBuf--;
 802234c:	697b      	ldr	r3, [r7, #20]
 802234e:	3b01      	subs	r3, #1
 8022350:	617b      	str	r3, [r7, #20]
    /* If no packet, just examine the next packet.  */
    if (dmatxdesclist->PacketAddress[idx] == NULL)
 8022352:	68ba      	ldr	r2, [r7, #8]
 8022354:	693b      	ldr	r3, [r7, #16]
 8022356:	3304      	adds	r3, #4
 8022358:	009b      	lsls	r3, r3, #2
 802235a:	4413      	add	r3, r2
 802235c:	685b      	ldr	r3, [r3, #4]
 802235e:	2b00      	cmp	r3, #0
 8022360:	d106      	bne.n	8022370 <HAL_ETH_ReleaseTxPacket+0x48>
    {
      /* No packet in use, skip to next.  */
      idx = (idx + 1U) & (ETH_TX_DESC_CNT - 1U);
 8022362:	693b      	ldr	r3, [r7, #16]
 8022364:	3301      	adds	r3, #1
 8022366:	f003 0303 	and.w	r3, r3, #3
 802236a:	613b      	str	r3, [r7, #16]
      pktInUse = 0U;
 802236c:	2300      	movs	r3, #0
 802236e:	73bb      	strb	r3, [r7, #14]
    }

    if (pktInUse != 0U)
 8022370:	7bbb      	ldrb	r3, [r7, #14]
 8022372:	2b00      	cmp	r3, #0
 8022374:	d028      	beq.n	80223c8 <HAL_ETH_ReleaseTxPacket+0xa0>
    {
      /* Determine if the packet has been transmitted.  */
      if ((heth->Init.TxDesc[idx].DESC0 & ETH_DMATXDESC_OWN) == 0U)
 8022376:	687b      	ldr	r3, [r7, #4]
 8022378:	68d9      	ldr	r1, [r3, #12]
 802237a:	693a      	ldr	r2, [r7, #16]
 802237c:	4613      	mov	r3, r2
 802237e:	009b      	lsls	r3, r3, #2
 8022380:	4413      	add	r3, r2
 8022382:	00db      	lsls	r3, r3, #3
 8022384:	440b      	add	r3, r1
 8022386:	681b      	ldr	r3, [r3, #0]
 8022388:	2b00      	cmp	r3, #0
 802238a:	db1b      	blt.n	80223c4 <HAL_ETH_ReleaseTxPacket+0x9c>
#ifdef HAL_ETH_USE_PTP
        /* Handle Ptp  */
        HAL_ETH_TxPtpCallback(dmatxdesclist->PacketAddress[idx], timestamp);
#endif  /* HAL_ETH_USE_PTP */
        /* Release the packet.  */
        HAL_ETH_TxFreeCallback(dmatxdesclist->PacketAddress[idx]);
 802238c:	68ba      	ldr	r2, [r7, #8]
 802238e:	693b      	ldr	r3, [r7, #16]
 8022390:	3304      	adds	r3, #4
 8022392:	009b      	lsls	r3, r3, #2
 8022394:	4413      	add	r3, r2
 8022396:	685b      	ldr	r3, [r3, #4]
 8022398:	4618      	mov	r0, r3
 802239a:	f002 ffef 	bl	802537c <HAL_ETH_TxFreeCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */

        /* Clear the entry in the in-use array.  */
        dmatxdesclist->PacketAddress[idx] = NULL;
 802239e:	68ba      	ldr	r2, [r7, #8]
 80223a0:	693b      	ldr	r3, [r7, #16]
 80223a2:	3304      	adds	r3, #4
 80223a4:	009b      	lsls	r3, r3, #2
 80223a6:	4413      	add	r3, r2
 80223a8:	2200      	movs	r2, #0
 80223aa:	605a      	str	r2, [r3, #4]

        /* Update the transmit relesae index and number of buffers in use.  */
        idx = (idx + 1U) & (ETH_TX_DESC_CNT - 1U);
 80223ac:	693b      	ldr	r3, [r7, #16]
 80223ae:	3301      	adds	r3, #1
 80223b0:	f003 0303 	and.w	r3, r3, #3
 80223b4:	613b      	str	r3, [r7, #16]
        dmatxdesclist->BuffersInUse = numOfBuf;
 80223b6:	68bb      	ldr	r3, [r7, #8]
 80223b8:	697a      	ldr	r2, [r7, #20]
 80223ba:	629a      	str	r2, [r3, #40]	; 0x28
        dmatxdesclist->releaseIndex = idx;
 80223bc:	68bb      	ldr	r3, [r7, #8]
 80223be:	693a      	ldr	r2, [r7, #16]
 80223c0:	62da      	str	r2, [r3, #44]	; 0x2c
 80223c2:	e001      	b.n	80223c8 <HAL_ETH_ReleaseTxPacket+0xa0>
      }
      else
      {
        /* Get out of the loop!  */
        pktTxStatus = 0U;
 80223c4:	2300      	movs	r3, #0
 80223c6:	73fb      	strb	r3, [r7, #15]
  while ((numOfBuf != 0U) && (pktTxStatus != 0U))
 80223c8:	697b      	ldr	r3, [r7, #20]
 80223ca:	2b00      	cmp	r3, #0
 80223cc:	d002      	beq.n	80223d4 <HAL_ETH_ReleaseTxPacket+0xac>
 80223ce:	7bfb      	ldrb	r3, [r7, #15]
 80223d0:	2b00      	cmp	r3, #0
 80223d2:	d1b9      	bne.n	8022348 <HAL_ETH_ReleaseTxPacket+0x20>
      }
    }
  }
  return HAL_OK;
 80223d4:	2300      	movs	r3, #0
}
 80223d6:	4618      	mov	r0, r3
 80223d8:	3718      	adds	r7, #24
 80223da:	46bd      	mov	sp, r7
 80223dc:	bd80      	pop	{r7, pc}
	...

080223e0 <HAL_ETH_IRQHandler>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
void HAL_ETH_IRQHandler(ETH_HandleTypeDef *heth)
{
 80223e0:	b580      	push	{r7, lr}
 80223e2:	b082      	sub	sp, #8
 80223e4:	af00      	add	r7, sp, #0
 80223e6:	6078      	str	r0, [r7, #4]
  /* Packet received */
  if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMASR_RS))
 80223e8:	687b      	ldr	r3, [r7, #4]
 80223ea:	681b      	ldr	r3, [r3, #0]
 80223ec:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80223f0:	695b      	ldr	r3, [r3, #20]
 80223f2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80223f6:	2b40      	cmp	r3, #64	; 0x40
 80223f8:	d112      	bne.n	8022420 <HAL_ETH_IRQHandler+0x40>
  {
    if (__HAL_ETH_DMA_GET_IT_SOURCE(heth, ETH_DMAIER_RIE))
 80223fa:	687b      	ldr	r3, [r7, #4]
 80223fc:	681b      	ldr	r3, [r3, #0]
 80223fe:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8022402:	69db      	ldr	r3, [r3, #28]
 8022404:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8022408:	2b40      	cmp	r3, #64	; 0x40
 802240a:	d109      	bne.n	8022420 <HAL_ETH_IRQHandler+0x40>
    {
      /* Clear the Eth DMA Rx IT pending bits */
      __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMASR_RS | ETH_DMASR_NIS);
 802240c:	687b      	ldr	r3, [r7, #4]
 802240e:	681b      	ldr	r3, [r3, #0]
 8022410:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8022414:	461a      	mov	r2, r3
 8022416:	4b50      	ldr	r3, [pc, #320]	; (8022558 <HAL_ETH_IRQHandler+0x178>)
 8022418:	6153      	str	r3, [r2, #20]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /*Call registered Receive complete callback*/
      heth->RxCpltCallback(heth);
#else
      /* Receive complete callback */
      HAL_ETH_RxCpltCallback(heth);
 802241a:	6878      	ldr	r0, [r7, #4]
 802241c:	f002 fb18 	bl	8024a50 <HAL_ETH_RxCpltCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
    }
  }

  /* Packet transmitted */
  if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMASR_TS))
 8022420:	687b      	ldr	r3, [r7, #4]
 8022422:	681b      	ldr	r3, [r3, #0]
 8022424:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8022428:	695b      	ldr	r3, [r3, #20]
 802242a:	f003 0301 	and.w	r3, r3, #1
 802242e:	2b01      	cmp	r3, #1
 8022430:	d113      	bne.n	802245a <HAL_ETH_IRQHandler+0x7a>
  {
    if (__HAL_ETH_DMA_GET_IT_SOURCE(heth, ETH_DMAIER_TIE))
 8022432:	687b      	ldr	r3, [r7, #4]
 8022434:	681b      	ldr	r3, [r3, #0]
 8022436:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 802243a:	69db      	ldr	r3, [r3, #28]
 802243c:	f003 0301 	and.w	r3, r3, #1
 8022440:	2b01      	cmp	r3, #1
 8022442:	d10a      	bne.n	802245a <HAL_ETH_IRQHandler+0x7a>
    {
      /* Clear the Eth DMA Tx IT pending bits */
      __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMASR_TS | ETH_DMASR_NIS);
 8022444:	687b      	ldr	r3, [r7, #4]
 8022446:	681b      	ldr	r3, [r3, #0]
 8022448:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 802244c:	461a      	mov	r2, r3
 802244e:	f04f 1301 	mov.w	r3, #65537	; 0x10001
 8022452:	6153      	str	r3, [r2, #20]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /*Call registered Transmit complete callback*/
      heth->TxCpltCallback(heth);
#else
      /* Transfer complete callback */
      HAL_ETH_TxCpltCallback(heth);
 8022454:	6878      	ldr	r0, [r7, #4]
 8022456:	f002 fb0b 	bl	8024a70 <HAL_ETH_TxCpltCallback>
    }
  }


  /* ETH DMA Error */
  if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMASR_AIS))
 802245a:	687b      	ldr	r3, [r7, #4]
 802245c:	681b      	ldr	r3, [r3, #0]
 802245e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8022462:	695b      	ldr	r3, [r3, #20]
 8022464:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8022468:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 802246c:	d14c      	bne.n	8022508 <HAL_ETH_IRQHandler+0x128>
  {
    if (__HAL_ETH_DMA_GET_IT_SOURCE(heth, ETH_DMAIER_AISE))
 802246e:	687b      	ldr	r3, [r7, #4]
 8022470:	681b      	ldr	r3, [r3, #0]
 8022472:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8022476:	69db      	ldr	r3, [r3, #28]
 8022478:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 802247c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8022480:	d142      	bne.n	8022508 <HAL_ETH_IRQHandler+0x128>
    {
      heth->ErrorCode |= HAL_ETH_ERROR_DMA;
 8022482:	687b      	ldr	r3, [r7, #4]
 8022484:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8022488:	f043 0208 	orr.w	r2, r3, #8
 802248c:	687b      	ldr	r3, [r7, #4]
 802248e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      /* if fatal bus error occurred */
      if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMASR_FBES))
 8022492:	687b      	ldr	r3, [r7, #4]
 8022494:	681b      	ldr	r3, [r3, #0]
 8022496:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 802249a:	695b      	ldr	r3, [r3, #20]
 802249c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80224a0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80224a4:	d11a      	bne.n	80224dc <HAL_ETH_IRQHandler+0xfc>
      {
        /* Get DMA error code  */
        heth->DMAErrorCode = READ_BIT(heth->Instance->DMASR, (ETH_DMASR_FBES | ETH_DMASR_TPS | ETH_DMASR_RPS));
 80224a6:	687b      	ldr	r3, [r7, #4]
 80224a8:	681b      	ldr	r3, [r3, #0]
 80224aa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80224ae:	695a      	ldr	r2, [r3, #20]
 80224b0:	4b2a      	ldr	r3, [pc, #168]	; (802255c <HAL_ETH_IRQHandler+0x17c>)
 80224b2:	4013      	ands	r3, r2
 80224b4:	687a      	ldr	r2, [r7, #4]
 80224b6:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c

        /* Disable all interrupts */
        __HAL_ETH_DMA_DISABLE_IT(heth, ETH_DMAIER_NISE | ETH_DMAIER_AISE);
 80224ba:	687b      	ldr	r3, [r7, #4]
 80224bc:	681b      	ldr	r3, [r3, #0]
 80224be:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80224c2:	69db      	ldr	r3, [r3, #28]
 80224c4:	687a      	ldr	r2, [r7, #4]
 80224c6:	6812      	ldr	r2, [r2, #0]
 80224c8:	f423 33c0 	bic.w	r3, r3, #98304	; 0x18000
 80224cc:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80224d0:	61d3      	str	r3, [r2, #28]

        /* Set HAL state to ERROR */
        heth->gState = HAL_ETH_STATE_ERROR;
 80224d2:	687b      	ldr	r3, [r7, #4]
 80224d4:	22e0      	movs	r2, #224	; 0xe0
 80224d6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
 80224da:	e012      	b.n	8022502 <HAL_ETH_IRQHandler+0x122>
      }
      else
      {
        /* Get DMA error status  */
        heth->DMAErrorCode = READ_BIT(heth->Instance->DMASR, (ETH_DMASR_ETS | ETH_DMASR_RWTS |
 80224dc:	687b      	ldr	r3, [r7, #4]
 80224de:	681b      	ldr	r3, [r3, #0]
 80224e0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80224e4:	695a      	ldr	r2, [r3, #20]
 80224e6:	f248 6380 	movw	r3, #34432	; 0x8680
 80224ea:	4013      	ands	r3, r2
 80224ec:	687a      	ldr	r2, [r7, #4]
 80224ee:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
                                                              ETH_DMASR_RBUS | ETH_DMASR_AIS));

        /* Clear the interrupt summary flag */
        __HAL_ETH_DMA_CLEAR_IT(heth, (ETH_DMASR_ETS | ETH_DMASR_RWTS |
 80224f2:	687b      	ldr	r3, [r7, #4]
 80224f4:	681b      	ldr	r3, [r3, #0]
 80224f6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80224fa:	461a      	mov	r2, r3
 80224fc:	f248 6380 	movw	r3, #34432	; 0x8680
 8022500:	6153      	str	r3, [r2, #20]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /* Call registered Error callback*/
      heth->ErrorCallback(heth);
#else
      /* Ethernet DMA Error callback */
      HAL_ETH_ErrorCallback(heth);
 8022502:	6878      	ldr	r0, [r7, #4]
 8022504:	f002 fac4 	bl	8024a90 <HAL_ETH_ErrorCallback>
    }
  }


  /* ETH PMT IT */
  if (__HAL_ETH_MAC_GET_IT(heth, ETH_MAC_PMT_IT))
 8022508:	687b      	ldr	r3, [r7, #4]
 802250a:	681b      	ldr	r3, [r3, #0]
 802250c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 802250e:	f003 0308 	and.w	r3, r3, #8
 8022512:	2b08      	cmp	r3, #8
 8022514:	d10e      	bne.n	8022534 <HAL_ETH_IRQHandler+0x154>
  {
    /* Get MAC Wake-up source and clear the status register pending bit */
    heth->MACWakeUpEvent = READ_BIT(heth->Instance->MACPMTCSR, (ETH_MACPMTCSR_WFR | ETH_MACPMTCSR_MPR));
 8022516:	687b      	ldr	r3, [r7, #4]
 8022518:	681b      	ldr	r3, [r3, #0]
 802251a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 802251c:	f003 0260 	and.w	r2, r3, #96	; 0x60
 8022520:	687b      	ldr	r3, [r7, #4]
 8022522:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered PMT callback*/
    heth->PMTCallback(heth);
#else
    /* Ethernet PMT callback */
    HAL_ETH_PMTCallback(heth);
 8022526:	6878      	ldr	r0, [r7, #4]
 8022528:	f000 f81c 	bl	8022564 <HAL_ETH_PMTCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */

    heth->MACWakeUpEvent = (uint32_t)(0x0U);
 802252c:	687b      	ldr	r3, [r7, #4]
 802252e:	2200      	movs	r2, #0
 8022530:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  }


  /* check ETH WAKEUP exti flag */
  if (__HAL_ETH_WAKEUP_EXTI_GET_FLAG(ETH_WAKEUP_EXTI_LINE) != (uint32_t)RESET)
 8022534:	4b0a      	ldr	r3, [pc, #40]	; (8022560 <HAL_ETH_IRQHandler+0x180>)
 8022536:	695b      	ldr	r3, [r3, #20]
 8022538:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 802253c:	2b00      	cmp	r3, #0
 802253e:	d006      	beq.n	802254e <HAL_ETH_IRQHandler+0x16e>
  {
    /* Clear ETH WAKEUP Exti pending bit */
    __HAL_ETH_WAKEUP_EXTI_CLEAR_FLAG(ETH_WAKEUP_EXTI_LINE);
 8022540:	4b07      	ldr	r3, [pc, #28]	; (8022560 <HAL_ETH_IRQHandler+0x180>)
 8022542:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8022546:	615a      	str	r2, [r3, #20]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered WakeUp callback*/
    heth->WakeUpCallback(heth);
#else
    /* ETH WAKEUP callback */
    HAL_ETH_WakeUpCallback(heth);
 8022548:	6878      	ldr	r0, [r7, #4]
 802254a:	f000 f815 	bl	8022578 <HAL_ETH_WakeUpCallback>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }
}
 802254e:	bf00      	nop
 8022550:	3708      	adds	r7, #8
 8022552:	46bd      	mov	sp, r7
 8022554:	bd80      	pop	{r7, pc}
 8022556:	bf00      	nop
 8022558:	00010040 	.word	0x00010040
 802255c:	007e2000 	.word	0x007e2000
 8022560:	40013c00 	.word	0x40013c00

08022564 <HAL_ETH_PMTCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_PMTCallback(ETH_HandleTypeDef *heth)
{
 8022564:	b480      	push	{r7}
 8022566:	b083      	sub	sp, #12
 8022568:	af00      	add	r7, sp, #0
 802256a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_PMTCallback could be implemented in the user file
  */
}
 802256c:	bf00      	nop
 802256e:	370c      	adds	r7, #12
 8022570:	46bd      	mov	sp, r7
 8022572:	f85d 7b04 	ldr.w	r7, [sp], #4
 8022576:	4770      	bx	lr

08022578 <HAL_ETH_WakeUpCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_WakeUpCallback(ETH_HandleTypeDef *heth)
{
 8022578:	b480      	push	{r7}
 802257a:	b083      	sub	sp, #12
 802257c:	af00      	add	r7, sp, #0
 802257e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ETH_WakeUpCallback could be implemented in the user file
   */
}
 8022580:	bf00      	nop
 8022582:	370c      	adds	r7, #12
 8022584:	46bd      	mov	sp, r7
 8022586:	f85d 7b04 	ldr.w	r7, [sp], #4
 802258a:	4770      	bx	lr

0802258c <HAL_ETH_ReadPHYRegister>:
  * @param pRegValue: parameter to hold read value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadPHYRegister(ETH_HandleTypeDef *heth, uint32_t PHYAddr, uint32_t PHYReg,
                                          uint32_t *pRegValue)
{
 802258c:	b580      	push	{r7, lr}
 802258e:	b086      	sub	sp, #24
 8022590:	af00      	add	r7, sp, #0
 8022592:	60f8      	str	r0, [r7, #12]
 8022594:	60b9      	str	r1, [r7, #8]
 8022596:	607a      	str	r2, [r7, #4]
 8022598:	603b      	str	r3, [r7, #0]
  uint32_t tmpreg1;
  uint32_t tickstart;

  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = heth->Instance->MACMIIAR;
 802259a:	68fb      	ldr	r3, [r7, #12]
 802259c:	681b      	ldr	r3, [r3, #0]
 802259e:	691b      	ldr	r3, [r3, #16]
 80225a0:	617b      	str	r3, [r7, #20]

  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 80225a2:	697b      	ldr	r3, [r7, #20]
 80225a4:	f003 031c 	and.w	r3, r3, #28
 80225a8:	617b      	str	r3, [r7, #20]

  /* Prepare the MII address register value */
  tmpreg1 |= ((PHYAddr << 11U) & ETH_MACMIIAR_PA);                        /* Set the PHY device address   */
 80225aa:	68bb      	ldr	r3, [r7, #8]
 80225ac:	02db      	lsls	r3, r3, #11
 80225ae:	b29b      	uxth	r3, r3
 80225b0:	697a      	ldr	r2, [r7, #20]
 80225b2:	4313      	orrs	r3, r2
 80225b4:	617b      	str	r3, [r7, #20]
  tmpreg1 |= (((uint32_t)PHYReg << 6U) & ETH_MACMIIAR_MR);                /* Set the PHY register address */
 80225b6:	687b      	ldr	r3, [r7, #4]
 80225b8:	019b      	lsls	r3, r3, #6
 80225ba:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 80225be:	697a      	ldr	r2, [r7, #20]
 80225c0:	4313      	orrs	r3, r2
 80225c2:	617b      	str	r3, [r7, #20]
  tmpreg1 &= ~ETH_MACMIIAR_MW;                                            /* Set the read mode            */
 80225c4:	697b      	ldr	r3, [r7, #20]
 80225c6:	f023 0302 	bic.w	r3, r3, #2
 80225ca:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MB;                                             /* Set the MII Busy bit         */
 80225cc:	697b      	ldr	r3, [r7, #20]
 80225ce:	f043 0301 	orr.w	r3, r3, #1
 80225d2:	617b      	str	r3, [r7, #20]

  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg1;
 80225d4:	68fb      	ldr	r3, [r7, #12]
 80225d6:	681b      	ldr	r3, [r3, #0]
 80225d8:	697a      	ldr	r2, [r7, #20]
 80225da:	611a      	str	r2, [r3, #16]


  tickstart = HAL_GetTick();
 80225dc:	f7ff fa74 	bl	8021ac8 <HAL_GetTick>
 80225e0:	6138      	str	r0, [r7, #16]

  /* Check for the Busy flag */
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 80225e2:	e00d      	b.n	8022600 <HAL_ETH_ReadPHYRegister+0x74>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > PHY_READ_TO)
 80225e4:	f7ff fa70 	bl	8021ac8 <HAL_GetTick>
 80225e8:	4602      	mov	r2, r0
 80225ea:	693b      	ldr	r3, [r7, #16]
 80225ec:	1ad3      	subs	r3, r2, r3
 80225ee:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80225f2:	d301      	bcc.n	80225f8 <HAL_ETH_ReadPHYRegister+0x6c>
    {
      return HAL_ERROR;
 80225f4:	2301      	movs	r3, #1
 80225f6:	e010      	b.n	802261a <HAL_ETH_ReadPHYRegister+0x8e>
    }

    tmpreg1 = heth->Instance->MACMIIAR;
 80225f8:	68fb      	ldr	r3, [r7, #12]
 80225fa:	681b      	ldr	r3, [r3, #0]
 80225fc:	691b      	ldr	r3, [r3, #16]
 80225fe:	617b      	str	r3, [r7, #20]
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8022600:	697b      	ldr	r3, [r7, #20]
 8022602:	f003 0301 	and.w	r3, r3, #1
 8022606:	2b00      	cmp	r3, #0
 8022608:	d1ec      	bne.n	80225e4 <HAL_ETH_ReadPHYRegister+0x58>
  }

  /* Get MACMIIDR value */
  *pRegValue = (uint16_t)(heth->Instance->MACMIIDR);
 802260a:	68fb      	ldr	r3, [r7, #12]
 802260c:	681b      	ldr	r3, [r3, #0]
 802260e:	695b      	ldr	r3, [r3, #20]
 8022610:	b29b      	uxth	r3, r3
 8022612:	461a      	mov	r2, r3
 8022614:	683b      	ldr	r3, [r7, #0]
 8022616:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 8022618:	2300      	movs	r3, #0
}
 802261a:	4618      	mov	r0, r3
 802261c:	3718      	adds	r7, #24
 802261e:	46bd      	mov	sp, r7
 8022620:	bd80      	pop	{r7, pc}

08022622 <HAL_ETH_WritePHYRegister>:
  * @param  RegValue: the value to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_WritePHYRegister(ETH_HandleTypeDef *heth, uint32_t PHYAddr, uint32_t PHYReg,
                                           uint32_t RegValue)
{
 8022622:	b580      	push	{r7, lr}
 8022624:	b086      	sub	sp, #24
 8022626:	af00      	add	r7, sp, #0
 8022628:	60f8      	str	r0, [r7, #12]
 802262a:	60b9      	str	r1, [r7, #8]
 802262c:	607a      	str	r2, [r7, #4]
 802262e:	603b      	str	r3, [r7, #0]
  uint32_t tmpreg1;
  uint32_t tickstart;

  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = heth->Instance->MACMIIAR;
 8022630:	68fb      	ldr	r3, [r7, #12]
 8022632:	681b      	ldr	r3, [r3, #0]
 8022634:	691b      	ldr	r3, [r3, #16]
 8022636:	617b      	str	r3, [r7, #20]

  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 8022638:	697b      	ldr	r3, [r7, #20]
 802263a:	f003 031c 	and.w	r3, r3, #28
 802263e:	617b      	str	r3, [r7, #20]

  /* Prepare the MII register address value */
  tmpreg1 |= ((PHYAddr << 11U) & ETH_MACMIIAR_PA);                      /* Set the PHY device address */
 8022640:	68bb      	ldr	r3, [r7, #8]
 8022642:	02db      	lsls	r3, r3, #11
 8022644:	b29b      	uxth	r3, r3
 8022646:	697a      	ldr	r2, [r7, #20]
 8022648:	4313      	orrs	r3, r2
 802264a:	617b      	str	r3, [r7, #20]
  tmpreg1 |= (((uint32_t)PHYReg << 6U) & ETH_MACMIIAR_MR);              /* Set the PHY register address */
 802264c:	687b      	ldr	r3, [r7, #4]
 802264e:	019b      	lsls	r3, r3, #6
 8022650:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 8022654:	697a      	ldr	r2, [r7, #20]
 8022656:	4313      	orrs	r3, r2
 8022658:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MW;                                           /* Set the write mode */
 802265a:	697b      	ldr	r3, [r7, #20]
 802265c:	f043 0302 	orr.w	r3, r3, #2
 8022660:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MB;                                           /* Set the MII Busy bit */
 8022662:	697b      	ldr	r3, [r7, #20]
 8022664:	f043 0301 	orr.w	r3, r3, #1
 8022668:	617b      	str	r3, [r7, #20]

  /* Give the value to the MII data register */
  heth->Instance->MACMIIDR = (uint16_t)RegValue;
 802266a:	683b      	ldr	r3, [r7, #0]
 802266c:	b29a      	uxth	r2, r3
 802266e:	68fb      	ldr	r3, [r7, #12]
 8022670:	681b      	ldr	r3, [r3, #0]
 8022672:	615a      	str	r2, [r3, #20]

  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg1;
 8022674:	68fb      	ldr	r3, [r7, #12]
 8022676:	681b      	ldr	r3, [r3, #0]
 8022678:	697a      	ldr	r2, [r7, #20]
 802267a:	611a      	str	r2, [r3, #16]

  /* Get tick */
  tickstart = HAL_GetTick();
 802267c:	f7ff fa24 	bl	8021ac8 <HAL_GetTick>
 8022680:	6138      	str	r0, [r7, #16]

  /* Check for the Busy flag */
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8022682:	e00d      	b.n	80226a0 <HAL_ETH_WritePHYRegister+0x7e>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > PHY_WRITE_TO)
 8022684:	f7ff fa20 	bl	8021ac8 <HAL_GetTick>
 8022688:	4602      	mov	r2, r0
 802268a:	693b      	ldr	r3, [r7, #16]
 802268c:	1ad3      	subs	r3, r2, r3
 802268e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8022692:	d301      	bcc.n	8022698 <HAL_ETH_WritePHYRegister+0x76>
    {
      return HAL_ERROR;
 8022694:	2301      	movs	r3, #1
 8022696:	e009      	b.n	80226ac <HAL_ETH_WritePHYRegister+0x8a>
    }

    tmpreg1 = heth->Instance->MACMIIAR;
 8022698:	68fb      	ldr	r3, [r7, #12]
 802269a:	681b      	ldr	r3, [r3, #0]
 802269c:	691b      	ldr	r3, [r3, #16]
 802269e:	617b      	str	r3, [r7, #20]
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 80226a0:	697b      	ldr	r3, [r7, #20]
 80226a2:	f003 0301 	and.w	r3, r3, #1
 80226a6:	2b00      	cmp	r3, #0
 80226a8:	d1ec      	bne.n	8022684 <HAL_ETH_WritePHYRegister+0x62>
  }

  return HAL_OK;
 80226aa:	2300      	movs	r3, #0
}
 80226ac:	4618      	mov	r0, r3
 80226ae:	3718      	adds	r7, #24
 80226b0:	46bd      	mov	sp, r7
 80226b2:	bd80      	pop	{r7, pc}

080226b4 <HAL_ETH_GetMACConfig>:
  * @param  macconf: pointer to a ETH_MACConfigTypeDef structure that will hold
  *         the configuration of the MAC.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_ETH_GetMACConfig(ETH_HandleTypeDef *heth, ETH_MACConfigTypeDef *macconf)
{
 80226b4:	b480      	push	{r7}
 80226b6:	b083      	sub	sp, #12
 80226b8:	af00      	add	r7, sp, #0
 80226ba:	6078      	str	r0, [r7, #4]
 80226bc:	6039      	str	r1, [r7, #0]
  if (macconf == NULL)
 80226be:	683b      	ldr	r3, [r7, #0]
 80226c0:	2b00      	cmp	r3, #0
 80226c2:	d101      	bne.n	80226c8 <HAL_ETH_GetMACConfig+0x14>
  {
    return HAL_ERROR;
 80226c4:	2301      	movs	r3, #1
 80226c6:	e0d9      	b.n	802287c <HAL_ETH_GetMACConfig+0x1c8>
  }

  /* Get MAC parameters */
  macconf->DeferralCheck = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DC) >> 4) > 0U) ? ENABLE : DISABLE;
 80226c8:	687b      	ldr	r3, [r7, #4]
 80226ca:	681b      	ldr	r3, [r3, #0]
 80226cc:	681b      	ldr	r3, [r3, #0]
 80226ce:	f003 0310 	and.w	r3, r3, #16
 80226d2:	2b00      	cmp	r3, #0
 80226d4:	bf14      	ite	ne
 80226d6:	2301      	movne	r3, #1
 80226d8:	2300      	moveq	r3, #0
 80226da:	b2db      	uxtb	r3, r3
 80226dc:	461a      	mov	r2, r3
 80226de:	683b      	ldr	r3, [r7, #0]
 80226e0:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
  macconf->BackOffLimit = READ_BIT(heth->Instance->MACCR, ETH_MACCR_BL);
 80226e4:	687b      	ldr	r3, [r7, #4]
 80226e6:	681b      	ldr	r3, [r3, #0]
 80226e8:	681b      	ldr	r3, [r3, #0]
 80226ea:	f003 0260 	and.w	r2, r3, #96	; 0x60
 80226ee:	683b      	ldr	r3, [r7, #0]
 80226f0:	625a      	str	r2, [r3, #36]	; 0x24
  macconf->RetryTransmission = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_RD) >> 9) == 0U) ? ENABLE : DISABLE;
 80226f2:	687b      	ldr	r3, [r7, #4]
 80226f4:	681b      	ldr	r3, [r3, #0]
 80226f6:	681b      	ldr	r3, [r3, #0]
 80226f8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80226fc:	2b00      	cmp	r3, #0
 80226fe:	bf0c      	ite	eq
 8022700:	2301      	moveq	r3, #1
 8022702:	2300      	movne	r3, #0
 8022704:	b2db      	uxtb	r3, r3
 8022706:	461a      	mov	r2, r3
 8022708:	683b      	ldr	r3, [r7, #0]
 802270a:	f883 2020 	strb.w	r2, [r3, #32]
  macconf->CarrierSenseDuringTransmit = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_CSD) >> 16) > 0U)
 802270e:	687b      	ldr	r3, [r7, #4]
 8022710:	681b      	ldr	r3, [r3, #0]
 8022712:	681b      	ldr	r3, [r3, #0]
 8022714:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
                                        ? ENABLE : DISABLE;
 8022718:	2b00      	cmp	r3, #0
 802271a:	bf14      	ite	ne
 802271c:	2301      	movne	r3, #1
 802271e:	2300      	moveq	r3, #0
 8022720:	b2db      	uxtb	r3, r3
 8022722:	461a      	mov	r2, r3
  macconf->CarrierSenseDuringTransmit = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_CSD) >> 16) > 0U)
 8022724:	683b      	ldr	r3, [r7, #0]
 8022726:	77da      	strb	r2, [r3, #31]
  macconf->ReceiveOwn = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_ROD) >> 13) == 0U) ? ENABLE : DISABLE;
 8022728:	687b      	ldr	r3, [r7, #4]
 802272a:	681b      	ldr	r3, [r3, #0]
 802272c:	681b      	ldr	r3, [r3, #0]
 802272e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8022732:	2b00      	cmp	r3, #0
 8022734:	bf0c      	ite	eq
 8022736:	2301      	moveq	r3, #1
 8022738:	2300      	movne	r3, #0
 802273a:	b2db      	uxtb	r3, r3
 802273c:	461a      	mov	r2, r3
 802273e:	683b      	ldr	r3, [r7, #0]
 8022740:	779a      	strb	r2, [r3, #30]
  macconf->LoopbackMode = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_LM) >> 12) > 0U) ? ENABLE : DISABLE;
 8022742:	687b      	ldr	r3, [r7, #4]
 8022744:	681b      	ldr	r3, [r3, #0]
 8022746:	681b      	ldr	r3, [r3, #0]
 8022748:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 802274c:	2b00      	cmp	r3, #0
 802274e:	bf14      	ite	ne
 8022750:	2301      	movne	r3, #1
 8022752:	2300      	moveq	r3, #0
 8022754:	b2db      	uxtb	r3, r3
 8022756:	461a      	mov	r2, r3
 8022758:	683b      	ldr	r3, [r7, #0]
 802275a:	771a      	strb	r2, [r3, #28]
  macconf->DuplexMode = READ_BIT(heth->Instance->MACCR, ETH_MACCR_DM);
 802275c:	687b      	ldr	r3, [r7, #4]
 802275e:	681b      	ldr	r3, [r3, #0]
 8022760:	681b      	ldr	r3, [r3, #0]
 8022762:	f403 6200 	and.w	r2, r3, #2048	; 0x800
 8022766:	683b      	ldr	r3, [r7, #0]
 8022768:	619a      	str	r2, [r3, #24]
  macconf->Speed = READ_BIT(heth->Instance->MACCR, ETH_MACCR_FES);
 802276a:	687b      	ldr	r3, [r7, #4]
 802276c:	681b      	ldr	r3, [r3, #0]
 802276e:	681b      	ldr	r3, [r3, #0]
 8022770:	f403 4280 	and.w	r2, r3, #16384	; 0x4000
 8022774:	683b      	ldr	r3, [r7, #0]
 8022776:	615a      	str	r2, [r3, #20]
  macconf->Jabber = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_JD) >> 22) == 0U) ? ENABLE : DISABLE;
 8022778:	687b      	ldr	r3, [r7, #4]
 802277a:	681b      	ldr	r3, [r3, #0]
 802277c:	681b      	ldr	r3, [r3, #0]
 802277e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8022782:	2b00      	cmp	r3, #0
 8022784:	bf0c      	ite	eq
 8022786:	2301      	moveq	r3, #1
 8022788:	2300      	movne	r3, #0
 802278a:	b2db      	uxtb	r3, r3
 802278c:	461a      	mov	r2, r3
 802278e:	683b      	ldr	r3, [r7, #0]
 8022790:	745a      	strb	r2, [r3, #17]
  macconf->Watchdog = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_WD) >> 23) == 0U) ? ENABLE : DISABLE;
 8022792:	687b      	ldr	r3, [r7, #4]
 8022794:	681b      	ldr	r3, [r3, #0]
 8022796:	681b      	ldr	r3, [r3, #0]
 8022798:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 802279c:	2b00      	cmp	r3, #0
 802279e:	bf0c      	ite	eq
 80227a0:	2301      	moveq	r3, #1
 80227a2:	2300      	movne	r3, #0
 80227a4:	b2db      	uxtb	r3, r3
 80227a6:	461a      	mov	r2, r3
 80227a8:	683b      	ldr	r3, [r7, #0]
 80227aa:	741a      	strb	r2, [r3, #16]
  macconf->AutomaticPadCRCStrip = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_APCS) >> 7) > 0U) ? ENABLE : DISABLE;
 80227ac:	687b      	ldr	r3, [r7, #4]
 80227ae:	681b      	ldr	r3, [r3, #0]
 80227b0:	681b      	ldr	r3, [r3, #0]
 80227b2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80227b6:	2b00      	cmp	r3, #0
 80227b8:	bf14      	ite	ne
 80227ba:	2301      	movne	r3, #1
 80227bc:	2300      	moveq	r3, #0
 80227be:	b2db      	uxtb	r3, r3
 80227c0:	461a      	mov	r2, r3
 80227c2:	683b      	ldr	r3, [r7, #0]
 80227c4:	73da      	strb	r2, [r3, #15]
  macconf->InterPacketGapVal = READ_BIT(heth->Instance->MACCR, ETH_MACCR_IFG);
 80227c6:	687b      	ldr	r3, [r7, #4]
 80227c8:	681b      	ldr	r3, [r3, #0]
 80227ca:	681b      	ldr	r3, [r3, #0]
 80227cc:	f403 2260 	and.w	r2, r3, #917504	; 0xe0000
 80227d0:	683b      	ldr	r3, [r7, #0]
 80227d2:	609a      	str	r2, [r3, #8]
  macconf->ChecksumOffload = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_IPCO) >> 10U) > 0U) ? ENABLE : DISABLE;
 80227d4:	687b      	ldr	r3, [r7, #4]
 80227d6:	681b      	ldr	r3, [r3, #0]
 80227d8:	681b      	ldr	r3, [r3, #0]
 80227da:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80227de:	2b00      	cmp	r3, #0
 80227e0:	bf14      	ite	ne
 80227e2:	2301      	movne	r3, #1
 80227e4:	2300      	moveq	r3, #0
 80227e6:	b2db      	uxtb	r3, r3
 80227e8:	461a      	mov	r2, r3
 80227ea:	683b      	ldr	r3, [r7, #0]
 80227ec:	711a      	strb	r2, [r3, #4]


  macconf->TransmitFlowControl = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_TFCE) >> 1) > 0U) ? ENABLE : DISABLE;
 80227ee:	687b      	ldr	r3, [r7, #4]
 80227f0:	681b      	ldr	r3, [r3, #0]
 80227f2:	699b      	ldr	r3, [r3, #24]
 80227f4:	f003 0302 	and.w	r3, r3, #2
 80227f8:	2b00      	cmp	r3, #0
 80227fa:	bf14      	ite	ne
 80227fc:	2301      	movne	r3, #1
 80227fe:	2300      	moveq	r3, #0
 8022800:	b2db      	uxtb	r3, r3
 8022802:	461a      	mov	r2, r3
 8022804:	683b      	ldr	r3, [r7, #0]
 8022806:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  macconf->ZeroQuantaPause = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_ZQPD) >> 7) == 0U) ? ENABLE : DISABLE;
 802280a:	687b      	ldr	r3, [r7, #4]
 802280c:	681b      	ldr	r3, [r3, #0]
 802280e:	699b      	ldr	r3, [r3, #24]
 8022810:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8022814:	2b00      	cmp	r3, #0
 8022816:	bf0c      	ite	eq
 8022818:	2301      	moveq	r3, #1
 802281a:	2300      	movne	r3, #0
 802281c:	b2db      	uxtb	r3, r3
 802281e:	461a      	mov	r2, r3
 8022820:	683b      	ldr	r3, [r7, #0]
 8022822:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
  macconf->PauseLowThreshold = READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_PLT);
 8022826:	687b      	ldr	r3, [r7, #4]
 8022828:	681b      	ldr	r3, [r3, #0]
 802282a:	699b      	ldr	r3, [r3, #24]
 802282c:	f003 0230 	and.w	r2, r3, #48	; 0x30
 8022830:	683b      	ldr	r3, [r7, #0]
 8022832:	651a      	str	r2, [r3, #80]	; 0x50
  macconf->PauseTime = (READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_PT) >> 16);
 8022834:	687b      	ldr	r3, [r7, #4]
 8022836:	681b      	ldr	r3, [r3, #0]
 8022838:	699b      	ldr	r3, [r3, #24]
 802283a:	0c1b      	lsrs	r3, r3, #16
 802283c:	b29a      	uxth	r2, r3
 802283e:	683b      	ldr	r3, [r7, #0]
 8022840:	649a      	str	r2, [r3, #72]	; 0x48
  macconf->ReceiveFlowControl = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_RFCE) >> 2U) > 0U) ? ENABLE : DISABLE;
 8022842:	687b      	ldr	r3, [r7, #4]
 8022844:	681b      	ldr	r3, [r3, #0]
 8022846:	699b      	ldr	r3, [r3, #24]
 8022848:	f003 0304 	and.w	r3, r3, #4
 802284c:	2b00      	cmp	r3, #0
 802284e:	bf14      	ite	ne
 8022850:	2301      	movne	r3, #1
 8022852:	2300      	moveq	r3, #0
 8022854:	b2db      	uxtb	r3, r3
 8022856:	461a      	mov	r2, r3
 8022858:	683b      	ldr	r3, [r7, #0]
 802285a:	f883 2056 	strb.w	r2, [r3, #86]	; 0x56
  macconf->UnicastPausePacketDetect = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_UPFD) >> 3U) > 0U)
 802285e:	687b      	ldr	r3, [r7, #4]
 8022860:	681b      	ldr	r3, [r3, #0]
 8022862:	699b      	ldr	r3, [r3, #24]
 8022864:	f003 0308 	and.w	r3, r3, #8
                                      ? ENABLE : DISABLE;
 8022868:	2b00      	cmp	r3, #0
 802286a:	bf14      	ite	ne
 802286c:	2301      	movne	r3, #1
 802286e:	2300      	moveq	r3, #0
 8022870:	b2db      	uxtb	r3, r3
 8022872:	461a      	mov	r2, r3
  macconf->UnicastPausePacketDetect = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_UPFD) >> 3U) > 0U)
 8022874:	683b      	ldr	r3, [r7, #0]
 8022876:	f883 2055 	strb.w	r2, [r3, #85]	; 0x55

  return HAL_OK;
 802287a:	2300      	movs	r3, #0
}
 802287c:	4618      	mov	r0, r3
 802287e:	370c      	adds	r7, #12
 8022880:	46bd      	mov	sp, r7
 8022882:	f85d 7b04 	ldr.w	r7, [sp], #4
 8022886:	4770      	bx	lr

08022888 <HAL_ETH_SetMACConfig>:
  * @param  macconf: pointer to a ETH_MACConfigTypeDef structure that contains
  *         the configuration of the MAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 8022888:	b580      	push	{r7, lr}
 802288a:	b082      	sub	sp, #8
 802288c:	af00      	add	r7, sp, #0
 802288e:	6078      	str	r0, [r7, #4]
 8022890:	6039      	str	r1, [r7, #0]
  if (macconf == NULL)
 8022892:	683b      	ldr	r3, [r7, #0]
 8022894:	2b00      	cmp	r3, #0
 8022896:	d101      	bne.n	802289c <HAL_ETH_SetMACConfig+0x14>
  {
    return HAL_ERROR;
 8022898:	2301      	movs	r3, #1
 802289a:	e00b      	b.n	80228b4 <HAL_ETH_SetMACConfig+0x2c>
  }

  if (heth->gState == HAL_ETH_STATE_READY)
 802289c:	687b      	ldr	r3, [r7, #4]
 802289e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80228a2:	2b10      	cmp	r3, #16
 80228a4:	d105      	bne.n	80228b2 <HAL_ETH_SetMACConfig+0x2a>
  {
    ETH_SetMACConfig(heth, macconf);
 80228a6:	6839      	ldr	r1, [r7, #0]
 80228a8:	6878      	ldr	r0, [r7, #4]
 80228aa:	f000 f88f 	bl	80229cc <ETH_SetMACConfig>

    return HAL_OK;
 80228ae:	2300      	movs	r3, #0
 80228b0:	e000      	b.n	80228b4 <HAL_ETH_SetMACConfig+0x2c>
  }
  else
  {
    return HAL_ERROR;
 80228b2:	2301      	movs	r3, #1
  }
}
 80228b4:	4618      	mov	r0, r3
 80228b6:	3708      	adds	r7, #8
 80228b8:	46bd      	mov	sp, r7
 80228ba:	bd80      	pop	{r7, pc}

080228bc <HAL_ETH_SetMDIOClockRange>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
void HAL_ETH_SetMDIOClockRange(ETH_HandleTypeDef *heth)
{
 80228bc:	b580      	push	{r7, lr}
 80228be:	b084      	sub	sp, #16
 80228c0:	af00      	add	r7, sp, #0
 80228c2:	6078      	str	r0, [r7, #4]
  uint32_t hclk;
  uint32_t tmpreg;

  /* Get the ETHERNET MACMIIAR value */
  tmpreg = (heth->Instance)->MACMIIAR;
 80228c4:	687b      	ldr	r3, [r7, #4]
 80228c6:	681b      	ldr	r3, [r3, #0]
 80228c8:	691b      	ldr	r3, [r3, #16]
 80228ca:	60fb      	str	r3, [r7, #12]
  /* Clear CSR Clock Range CR[2:0] bits */
  tmpreg &= ETH_MACMIIAR_CR_MASK;
 80228cc:	68fb      	ldr	r3, [r7, #12]
 80228ce:	f023 031c 	bic.w	r3, r3, #28
 80228d2:	60fb      	str	r3, [r7, #12]

  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 80228d4:	f001 fa76 	bl	8023dc4 <HAL_RCC_GetHCLKFreq>
 80228d8:	60b8      	str	r0, [r7, #8]

  /* Set CR bits depending on hclk value */
  if ((hclk >= 20000000U) && (hclk < 35000000U))
 80228da:	68bb      	ldr	r3, [r7, #8]
 80228dc:	4a1d      	ldr	r2, [pc, #116]	; (8022954 <HAL_ETH_SetMDIOClockRange+0x98>)
 80228de:	4293      	cmp	r3, r2
 80228e0:	d908      	bls.n	80228f4 <HAL_ETH_SetMDIOClockRange+0x38>
 80228e2:	68bb      	ldr	r3, [r7, #8]
 80228e4:	4a1c      	ldr	r2, [pc, #112]	; (8022958 <HAL_ETH_SetMDIOClockRange+0x9c>)
 80228e6:	4293      	cmp	r3, r2
 80228e8:	d804      	bhi.n	80228f4 <HAL_ETH_SetMDIOClockRange+0x38>
  {
    /* CSR Clock Range between 20-35 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div16;
 80228ea:	68fb      	ldr	r3, [r7, #12]
 80228ec:	f043 0308 	orr.w	r3, r3, #8
 80228f0:	60fb      	str	r3, [r7, #12]
 80228f2:	e027      	b.n	8022944 <HAL_ETH_SetMDIOClockRange+0x88>
  }
  else if ((hclk >= 35000000U) && (hclk < 60000000U))
 80228f4:	68bb      	ldr	r3, [r7, #8]
 80228f6:	4a18      	ldr	r2, [pc, #96]	; (8022958 <HAL_ETH_SetMDIOClockRange+0x9c>)
 80228f8:	4293      	cmp	r3, r2
 80228fa:	d908      	bls.n	802290e <HAL_ETH_SetMDIOClockRange+0x52>
 80228fc:	68bb      	ldr	r3, [r7, #8]
 80228fe:	4a17      	ldr	r2, [pc, #92]	; (802295c <HAL_ETH_SetMDIOClockRange+0xa0>)
 8022900:	4293      	cmp	r3, r2
 8022902:	d204      	bcs.n	802290e <HAL_ETH_SetMDIOClockRange+0x52>
  {
    /* CSR Clock Range between 35-60 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div26;
 8022904:	68fb      	ldr	r3, [r7, #12]
 8022906:	f043 030c 	orr.w	r3, r3, #12
 802290a:	60fb      	str	r3, [r7, #12]
 802290c:	e01a      	b.n	8022944 <HAL_ETH_SetMDIOClockRange+0x88>
  }
  else if ((hclk >= 60000000U) && (hclk < 100000000U))
 802290e:	68bb      	ldr	r3, [r7, #8]
 8022910:	4a12      	ldr	r2, [pc, #72]	; (802295c <HAL_ETH_SetMDIOClockRange+0xa0>)
 8022912:	4293      	cmp	r3, r2
 8022914:	d303      	bcc.n	802291e <HAL_ETH_SetMDIOClockRange+0x62>
 8022916:	68bb      	ldr	r3, [r7, #8]
 8022918:	4a11      	ldr	r2, [pc, #68]	; (8022960 <HAL_ETH_SetMDIOClockRange+0xa4>)
 802291a:	4293      	cmp	r3, r2
 802291c:	d911      	bls.n	8022942 <HAL_ETH_SetMDIOClockRange+0x86>
  {
    /* CSR Clock Range between 60-100 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div42;
  }
  else if ((hclk >= 100000000U) && (hclk < 150000000U))
 802291e:	68bb      	ldr	r3, [r7, #8]
 8022920:	4a0f      	ldr	r2, [pc, #60]	; (8022960 <HAL_ETH_SetMDIOClockRange+0xa4>)
 8022922:	4293      	cmp	r3, r2
 8022924:	d908      	bls.n	8022938 <HAL_ETH_SetMDIOClockRange+0x7c>
 8022926:	68bb      	ldr	r3, [r7, #8]
 8022928:	4a0e      	ldr	r2, [pc, #56]	; (8022964 <HAL_ETH_SetMDIOClockRange+0xa8>)
 802292a:	4293      	cmp	r3, r2
 802292c:	d804      	bhi.n	8022938 <HAL_ETH_SetMDIOClockRange+0x7c>
  {
    /* CSR Clock Range between 100-150 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div62;
 802292e:	68fb      	ldr	r3, [r7, #12]
 8022930:	f043 0304 	orr.w	r3, r3, #4
 8022934:	60fb      	str	r3, [r7, #12]
 8022936:	e005      	b.n	8022944 <HAL_ETH_SetMDIOClockRange+0x88>
  }
  else /* ((hclk >= 150000000)&&(hclk <= 183000000))*/
  {
    /* CSR Clock Range between 150-183 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div102;
 8022938:	68fb      	ldr	r3, [r7, #12]
 802293a:	f043 0310 	orr.w	r3, r3, #16
 802293e:	60fb      	str	r3, [r7, #12]
 8022940:	e000      	b.n	8022944 <HAL_ETH_SetMDIOClockRange+0x88>
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div42;
 8022942:	bf00      	nop
  }

  /* Write to ETHERNET MAC MIIAR: Configure the ETHERNET CSR Clock Range */
  (heth->Instance)->MACMIIAR = (uint32_t)tmpreg;
 8022944:	687b      	ldr	r3, [r7, #4]
 8022946:	681b      	ldr	r3, [r3, #0]
 8022948:	68fa      	ldr	r2, [r7, #12]
 802294a:	611a      	str	r2, [r3, #16]
}
 802294c:	bf00      	nop
 802294e:	3710      	adds	r7, #16
 8022950:	46bd      	mov	sp, r7
 8022952:	bd80      	pop	{r7, pc}
 8022954:	01312cff 	.word	0x01312cff
 8022958:	02160ebf 	.word	0x02160ebf
 802295c:	03938700 	.word	0x03938700
 8022960:	05f5e0ff 	.word	0x05f5e0ff
 8022964:	08f0d17f 	.word	0x08f0d17f

08022968 <HAL_ETH_GetDMAError>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval ETH DMA Error Code
  */
uint32_t HAL_ETH_GetDMAError(ETH_HandleTypeDef *heth)
{
 8022968:	b480      	push	{r7}
 802296a:	b083      	sub	sp, #12
 802296c:	af00      	add	r7, sp, #0
 802296e:	6078      	str	r0, [r7, #4]
  return heth->DMAErrorCode;
 8022970:	687b      	ldr	r3, [r7, #4]
 8022972:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
}
 8022976:	4618      	mov	r0, r3
 8022978:	370c      	adds	r7, #12
 802297a:	46bd      	mov	sp, r7
 802297c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8022980:	4770      	bx	lr

08022982 <ETH_FlushTransmitFIFO>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_FlushTransmitFIFO(ETH_HandleTypeDef *heth)
{
 8022982:	b580      	push	{r7, lr}
 8022984:	b084      	sub	sp, #16
 8022986:	af00      	add	r7, sp, #0
 8022988:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg = 0;
 802298a:	2300      	movs	r3, #0
 802298c:	60fb      	str	r3, [r7, #12]

  /* Set the Flush Transmit FIFO bit */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_FTF;
 802298e:	687b      	ldr	r3, [r7, #4]
 8022990:	681b      	ldr	r3, [r3, #0]
 8022992:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8022996:	699b      	ldr	r3, [r3, #24]
 8022998:	687a      	ldr	r2, [r7, #4]
 802299a:	6812      	ldr	r2, [r2, #0]
 802299c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80229a0:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80229a4:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = (heth->Instance)->DMAOMR;
 80229a6:	687b      	ldr	r3, [r7, #4]
 80229a8:	681b      	ldr	r3, [r3, #0]
 80229aa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80229ae:	699b      	ldr	r3, [r3, #24]
 80229b0:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80229b2:	2001      	movs	r0, #1
 80229b4:	f7ff f894 	bl	8021ae0 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg;
 80229b8:	687b      	ldr	r3, [r7, #4]
 80229ba:	681a      	ldr	r2, [r3, #0]
 80229bc:	68fb      	ldr	r3, [r7, #12]
 80229be:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80229c2:	6193      	str	r3, [r2, #24]
}
 80229c4:	bf00      	nop
 80229c6:	3710      	adds	r7, #16
 80229c8:	46bd      	mov	sp, r7
 80229ca:	bd80      	pop	{r7, pc}

080229cc <ETH_SetMACConfig>:

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 80229cc:	b580      	push	{r7, lr}
 80229ce:	b084      	sub	sp, #16
 80229d0:	af00      	add	r7, sp, #0
 80229d2:	6078      	str	r0, [r7, #4]
 80229d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 80229d6:	687b      	ldr	r3, [r7, #4]
 80229d8:	681b      	ldr	r3, [r3, #0]
 80229da:	681b      	ldr	r3, [r3, #0]
 80229dc:	60fb      	str	r3, [r7, #12]
  /* Clear WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 80229de:	68fa      	ldr	r2, [r7, #12]
 80229e0:	4b51      	ldr	r3, [pc, #324]	; (8022b28 <ETH_SetMACConfig+0x15c>)
 80229e2:	4013      	ands	r3, r2
 80229e4:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 80229e6:	683b      	ldr	r3, [r7, #0]
 80229e8:	7c1b      	ldrb	r3, [r3, #16]
 80229ea:	2b00      	cmp	r3, #0
 80229ec:	d102      	bne.n	80229f4 <ETH_SetMACConfig+0x28>
 80229ee:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 80229f2:	e000      	b.n	80229f6 <ETH_SetMACConfig+0x2a>
 80229f4:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 80229f6:	683b      	ldr	r3, [r7, #0]
 80229f8:	7c5b      	ldrb	r3, [r3, #17]
 80229fa:	2b00      	cmp	r3, #0
 80229fc:	d102      	bne.n	8022a04 <ETH_SetMACConfig+0x38>
 80229fe:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8022a02:	e000      	b.n	8022a06 <ETH_SetMACConfig+0x3a>
 8022a04:	2300      	movs	r3, #0
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8022a06:	431a      	orrs	r2, r3
                        (uint32_t)macconf->InterPacketGapVal |
 8022a08:	683b      	ldr	r3, [r7, #0]
 8022a0a:	689b      	ldr	r3, [r3, #8]
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 8022a0c:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 8022a0e:	683b      	ldr	r3, [r7, #0]
 8022a10:	7fdb      	ldrb	r3, [r3, #31]
 8022a12:	041b      	lsls	r3, r3, #16
                        (uint32_t)macconf->InterPacketGapVal |
 8022a14:	431a      	orrs	r2, r3
                        macconf->Speed |
 8022a16:	683b      	ldr	r3, [r7, #0]
 8022a18:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 8022a1a:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8022a1c:	683a      	ldr	r2, [r7, #0]
 8022a1e:	7f92      	ldrb	r2, [r2, #30]
 8022a20:	2a00      	cmp	r2, #0
 8022a22:	d102      	bne.n	8022a2a <ETH_SetMACConfig+0x5e>
 8022a24:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8022a28:	e000      	b.n	8022a2c <ETH_SetMACConfig+0x60>
 8022a2a:	2200      	movs	r2, #0
                        macconf->Speed |
 8022a2c:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 8022a2e:	683b      	ldr	r3, [r7, #0]
 8022a30:	7f1b      	ldrb	r3, [r3, #28]
 8022a32:	031b      	lsls	r3, r3, #12
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8022a34:	431a      	orrs	r2, r3
                        macconf->DuplexMode |
 8022a36:	683b      	ldr	r3, [r7, #0]
 8022a38:	699b      	ldr	r3, [r3, #24]
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 8022a3a:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 8022a3c:	683b      	ldr	r3, [r7, #0]
 8022a3e:	791b      	ldrb	r3, [r3, #4]
 8022a40:	029b      	lsls	r3, r3, #10
                        macconf->DuplexMode |
 8022a42:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 8022a44:	683a      	ldr	r2, [r7, #0]
 8022a46:	f892 2020 	ldrb.w	r2, [r2, #32]
 8022a4a:	2a00      	cmp	r2, #0
 8022a4c:	d102      	bne.n	8022a54 <ETH_SetMACConfig+0x88>
 8022a4e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8022a52:	e000      	b.n	8022a56 <ETH_SetMACConfig+0x8a>
 8022a54:	2200      	movs	r2, #0
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 8022a56:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8022a58:	683b      	ldr	r3, [r7, #0]
 8022a5a:	7bdb      	ldrb	r3, [r3, #15]
 8022a5c:	01db      	lsls	r3, r3, #7
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 8022a5e:	431a      	orrs	r2, r3
                        macconf->BackOffLimit |
 8022a60:	683b      	ldr	r3, [r7, #0]
 8022a62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8022a64:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->DeferralCheck << 4U));
 8022a66:	683b      	ldr	r3, [r7, #0]
 8022a68:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8022a6c:	011b      	lsls	r3, r3, #4
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8022a6e:	4313      	orrs	r3, r2
 8022a70:	68fa      	ldr	r2, [r7, #12]
 8022a72:	4313      	orrs	r3, r2
 8022a74:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 8022a76:	687b      	ldr	r3, [r7, #4]
 8022a78:	681b      	ldr	r3, [r3, #0]
 8022a7a:	68fa      	ldr	r2, [r7, #12]
 8022a7c:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 8022a7e:	687b      	ldr	r3, [r7, #4]
 8022a80:	681b      	ldr	r3, [r3, #0]
 8022a82:	681b      	ldr	r3, [r3, #0]
 8022a84:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8022a86:	2001      	movs	r0, #1
 8022a88:	f7ff f82a 	bl	8021ae0 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8022a8c:	687b      	ldr	r3, [r7, #4]
 8022a8e:	681b      	ldr	r3, [r3, #0]
 8022a90:	68fa      	ldr	r2, [r7, #12]
 8022a92:	601a      	str	r2, [r3, #0]

  /*----------------------- ETHERNET MACFCR Configuration --------------------*/

  /* Get the ETHERNET MACFCR value */
  tmpreg1 = (heth->Instance)->MACFCR;
 8022a94:	687b      	ldr	r3, [r7, #4]
 8022a96:	681b      	ldr	r3, [r3, #0]
 8022a98:	699b      	ldr	r3, [r3, #24]
 8022a9a:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 8022a9c:	68fa      	ldr	r2, [r7, #12]
 8022a9e:	f64f 7341 	movw	r3, #65345	; 0xff41
 8022aa2:	4013      	ands	r3, r2
 8022aa4:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8022aa6:	683b      	ldr	r3, [r7, #0]
 8022aa8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8022aaa:	041b      	lsls	r3, r3, #16
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 8022aac:	683a      	ldr	r2, [r7, #0]
 8022aae:	f892 204c 	ldrb.w	r2, [r2, #76]	; 0x4c
 8022ab2:	2a00      	cmp	r2, #0
 8022ab4:	d101      	bne.n	8022aba <ETH_SetMACConfig+0xee>
 8022ab6:	2280      	movs	r2, #128	; 0x80
 8022ab8:	e000      	b.n	8022abc <ETH_SetMACConfig+0xf0>
 8022aba:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8022abc:	431a      	orrs	r2, r3
                        macconf->PauseLowThreshold |
 8022abe:	683b      	ldr	r3, [r7, #0]
 8022ac0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 8022ac2:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 8022ac4:	683a      	ldr	r2, [r7, #0]
 8022ac6:	f892 2055 	ldrb.w	r2, [r2, #85]	; 0x55
 8022aca:	2a01      	cmp	r2, #1
 8022acc:	d101      	bne.n	8022ad2 <ETH_SetMACConfig+0x106>
 8022ace:	2208      	movs	r2, #8
 8022ad0:	e000      	b.n	8022ad4 <ETH_SetMACConfig+0x108>
 8022ad2:	2200      	movs	r2, #0
                        macconf->PauseLowThreshold |
 8022ad4:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveFlowControl == ENABLE) ? 1U : 0U) << 2U) |
 8022ad6:	683a      	ldr	r2, [r7, #0]
 8022ad8:	f892 2056 	ldrb.w	r2, [r2, #86]	; 0x56
 8022adc:	2a01      	cmp	r2, #1
 8022ade:	d101      	bne.n	8022ae4 <ETH_SetMACConfig+0x118>
 8022ae0:	2204      	movs	r2, #4
 8022ae2:	e000      	b.n	8022ae6 <ETH_SetMACConfig+0x11a>
 8022ae4:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 8022ae6:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->TransmitFlowControl == ENABLE) ? 1U : 0U) << 1U));
 8022ae8:	683a      	ldr	r2, [r7, #0]
 8022aea:	f892 2054 	ldrb.w	r2, [r2, #84]	; 0x54
 8022aee:	2a01      	cmp	r2, #1
 8022af0:	d101      	bne.n	8022af6 <ETH_SetMACConfig+0x12a>
 8022af2:	2202      	movs	r2, #2
 8022af4:	e000      	b.n	8022af8 <ETH_SetMACConfig+0x12c>
 8022af6:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8022af8:	4313      	orrs	r3, r2
 8022afa:	68fa      	ldr	r2, [r7, #12]
 8022afc:	4313      	orrs	r3, r2
 8022afe:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACFCR */
  (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 8022b00:	687b      	ldr	r3, [r7, #4]
 8022b02:	681b      	ldr	r3, [r3, #0]
 8022b04:	68fa      	ldr	r2, [r7, #12]
 8022b06:	619a      	str	r2, [r3, #24]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACFCR;
 8022b08:	687b      	ldr	r3, [r7, #4]
 8022b0a:	681b      	ldr	r3, [r3, #0]
 8022b0c:	699b      	ldr	r3, [r3, #24]
 8022b0e:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8022b10:	2001      	movs	r0, #1
 8022b12:	f7fe ffe5 	bl	8021ae0 <HAL_Delay>
  (heth->Instance)->MACFCR = tmpreg1;
 8022b16:	687b      	ldr	r3, [r7, #4]
 8022b18:	681b      	ldr	r3, [r3, #0]
 8022b1a:	68fa      	ldr	r2, [r7, #12]
 8022b1c:	619a      	str	r2, [r3, #24]
}
 8022b1e:	bf00      	nop
 8022b20:	3710      	adds	r7, #16
 8022b22:	46bd      	mov	sp, r7
 8022b24:	bd80      	pop	{r7, pc}
 8022b26:	bf00      	nop
 8022b28:	ff20810f 	.word	0xff20810f

08022b2c <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 8022b2c:	b580      	push	{r7, lr}
 8022b2e:	b084      	sub	sp, #16
 8022b30:	af00      	add	r7, sp, #0
 8022b32:	6078      	str	r0, [r7, #4]
 8022b34:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*----------------------- ETHERNET DMAOMR Configuration --------------------*/
  /* Get the ETHERNET DMAOMR value */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8022b36:	687b      	ldr	r3, [r7, #4]
 8022b38:	681b      	ldr	r3, [r3, #0]
 8022b3a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8022b3e:	699b      	ldr	r3, [r3, #24]
 8022b40:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 8022b42:	68fa      	ldr	r2, [r7, #12]
 8022b44:	4b3d      	ldr	r3, [pc, #244]	; (8022c3c <ETH_SetDMAConfig+0x110>)
 8022b46:	4013      	ands	r3, r2
 8022b48:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8022b4a:	683b      	ldr	r3, [r7, #0]
 8022b4c:	7b1b      	ldrb	r3, [r3, #12]
 8022b4e:	2b00      	cmp	r3, #0
 8022b50:	d102      	bne.n	8022b58 <ETH_SetDMAConfig+0x2c>
 8022b52:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8022b56:	e000      	b.n	8022b5a <ETH_SetDMAConfig+0x2e>
 8022b58:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 8022b5a:	683b      	ldr	r3, [r7, #0]
 8022b5c:	7b5b      	ldrb	r3, [r3, #13]
 8022b5e:	065b      	lsls	r3, r3, #25
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8022b60:	4313      	orrs	r3, r2
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 8022b62:	683a      	ldr	r2, [r7, #0]
 8022b64:	7f52      	ldrb	r2, [r2, #29]
 8022b66:	2a00      	cmp	r2, #0
 8022b68:	d102      	bne.n	8022b70 <ETH_SetDMAConfig+0x44>
 8022b6a:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8022b6e:	e000      	b.n	8022b72 <ETH_SetDMAConfig+0x46>
 8022b70:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 8022b72:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8022b74:	683b      	ldr	r3, [r7, #0]
 8022b76:	7b9b      	ldrb	r3, [r3, #14]
 8022b78:	055b      	lsls	r3, r3, #21
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 8022b7a:	431a      	orrs	r2, r3
                        dmaconf->TransmitThresholdControl |
 8022b7c:	683b      	ldr	r3, [r7, #0]
 8022b7e:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8022b80:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8022b82:	683b      	ldr	r3, [r7, #0]
 8022b84:	7f1b      	ldrb	r3, [r3, #28]
 8022b86:	01db      	lsls	r3, r3, #7
                        dmaconf->TransmitThresholdControl |
 8022b88:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 8022b8a:	683b      	ldr	r3, [r7, #0]
 8022b8c:	7f9b      	ldrb	r3, [r3, #30]
 8022b8e:	019b      	lsls	r3, r3, #6
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8022b90:	431a      	orrs	r2, r3
                        dmaconf->ReceiveThresholdControl |
 8022b92:	683b      	ldr	r3, [r7, #0]
 8022b94:	6a1b      	ldr	r3, [r3, #32]
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 8022b96:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->SecondFrameOperate << 2U));
 8022b98:	683b      	ldr	r3, [r7, #0]
 8022b9a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8022b9e:	009b      	lsls	r3, r3, #2
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8022ba0:	4313      	orrs	r3, r2
 8022ba2:	68fa      	ldr	r2, [r7, #12]
 8022ba4:	4313      	orrs	r3, r2
 8022ba6:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET DMAOMR */
  (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 8022ba8:	687b      	ldr	r3, [r7, #4]
 8022baa:	681b      	ldr	r3, [r3, #0]
 8022bac:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8022bb0:	461a      	mov	r2, r3
 8022bb2:	68fb      	ldr	r3, [r7, #12]
 8022bb4:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8022bb6:	687b      	ldr	r3, [r7, #4]
 8022bb8:	681b      	ldr	r3, [r3, #0]
 8022bba:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8022bbe:	699b      	ldr	r3, [r3, #24]
 8022bc0:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8022bc2:	2001      	movs	r0, #1
 8022bc4:	f7fe ff8c 	bl	8021ae0 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 8022bc8:	687b      	ldr	r3, [r7, #4]
 8022bca:	681b      	ldr	r3, [r3, #0]
 8022bcc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8022bd0:	461a      	mov	r2, r3
 8022bd2:	68fb      	ldr	r3, [r7, #12]
 8022bd4:	6193      	str	r3, [r2, #24]

  /*----------------------- ETHERNET DMABMR Configuration --------------------*/
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8022bd6:	683b      	ldr	r3, [r7, #0]
 8022bd8:	791b      	ldrb	r3, [r3, #4]
 8022bda:	065a      	lsls	r2, r3, #25
                                        dmaconf->BurstMode |
 8022bdc:	683b      	ldr	r3, [r7, #0]
 8022bde:	689b      	ldr	r3, [r3, #8]
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8022be0:	431a      	orrs	r2, r3
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 8022be2:	683b      	ldr	r3, [r7, #0]
 8022be4:	699b      	ldr	r3, [r3, #24]
                                        dmaconf->BurstMode |
 8022be6:	431a      	orrs	r2, r3
                                                                       Rx it is applied for the other */
                                        dmaconf->TxDMABurstLength |
 8022be8:	683b      	ldr	r3, [r7, #0]
 8022bea:	691b      	ldr	r3, [r3, #16]
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 8022bec:	431a      	orrs	r2, r3
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 8022bee:	683b      	ldr	r3, [r7, #0]
 8022bf0:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8022bf4:	01db      	lsls	r3, r3, #7
                                        dmaconf->TxDMABurstLength |
 8022bf6:	431a      	orrs	r2, r3
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8022bf8:	683b      	ldr	r3, [r7, #0]
 8022bfa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8022bfc:	009b      	lsls	r3, r3, #2
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 8022bfe:	431a      	orrs	r2, r3
                                        dmaconf->DMAArbitration |
 8022c00:	683b      	ldr	r3, [r7, #0]
 8022c02:	681b      	ldr	r3, [r3, #0]
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8022c04:	4313      	orrs	r3, r2
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8022c06:	687a      	ldr	r2, [r7, #4]
 8022c08:	6812      	ldr	r2, [r2, #0]
 8022c0a:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8022c0e:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8022c12:	6013      	str	r3, [r2, #0]
                                        ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMABMR;
 8022c14:	687b      	ldr	r3, [r7, #4]
 8022c16:	681b      	ldr	r3, [r3, #0]
 8022c18:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8022c1c:	681b      	ldr	r3, [r3, #0]
 8022c1e:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8022c20:	2001      	movs	r0, #1
 8022c22:	f7fe ff5d 	bl	8021ae0 <HAL_Delay>
  (heth->Instance)->DMABMR = tmpreg1;
 8022c26:	687b      	ldr	r3, [r7, #4]
 8022c28:	681b      	ldr	r3, [r3, #0]
 8022c2a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8022c2e:	461a      	mov	r2, r3
 8022c30:	68fb      	ldr	r3, [r7, #12]
 8022c32:	6013      	str	r3, [r2, #0]
}
 8022c34:	bf00      	nop
 8022c36:	3710      	adds	r7, #16
 8022c38:	46bd      	mov	sp, r7
 8022c3a:	bd80      	pop	{r7, pc}
 8022c3c:	f8de3f23 	.word	0xf8de3f23

08022c40 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 8022c40:	b580      	push	{r7, lr}
 8022c42:	b0a6      	sub	sp, #152	; 0x98
 8022c44:	af00      	add	r7, sp, #0
 8022c46:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.Watchdog = ENABLE;
 8022c48:	2301      	movs	r3, #1
 8022c4a:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
  macDefaultConf.Jabber = ENABLE;
 8022c4e:	2301      	movs	r3, #1
 8022c50:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
  macDefaultConf.InterPacketGapVal = ETH_INTERFRAMEGAP_96BIT;
 8022c54:	2300      	movs	r3, #0
 8022c56:	63fb      	str	r3, [r7, #60]	; 0x3c
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 8022c58:	2300      	movs	r3, #0
 8022c5a:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
  macDefaultConf.ReceiveOwn = ENABLE;
 8022c5e:	2301      	movs	r3, #1
 8022c60:	f887 3052 	strb.w	r3, [r7, #82]	; 0x52
  macDefaultConf.LoopbackMode = DISABLE;
 8022c64:	2300      	movs	r3, #0
 8022c66:	f887 3050 	strb.w	r3, [r7, #80]	; 0x50
  macDefaultConf.ChecksumOffload = ENABLE;
 8022c6a:	2301      	movs	r3, #1
 8022c6c:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  macDefaultConf.RetryTransmission = DISABLE;
 8022c70:	2300      	movs	r3, #0
 8022c72:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
  macDefaultConf.AutomaticPadCRCStrip = DISABLE;
 8022c76:	2300      	movs	r3, #0
 8022c78:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8022c7c:	2300      	movs	r3, #0
 8022c7e:	65bb      	str	r3, [r7, #88]	; 0x58
  macDefaultConf.DeferralCheck = DISABLE;
 8022c80:	2300      	movs	r3, #0
 8022c82:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  macDefaultConf.PauseTime = 0x0U;
 8022c86:	2300      	movs	r3, #0
 8022c88:	67fb      	str	r3, [r7, #124]	; 0x7c
  macDefaultConf.ZeroQuantaPause = DISABLE;
 8022c8a:	2300      	movs	r3, #0
 8022c8c:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 8022c90:	2300      	movs	r3, #0
 8022c92:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macDefaultConf.ReceiveFlowControl = DISABLE;
 8022c96:	2300      	movs	r3, #0
 8022c98:	f887 308a 	strb.w	r3, [r7, #138]	; 0x8a
  macDefaultConf.TransmitFlowControl = DISABLE;
 8022c9c:	2300      	movs	r3, #0
 8022c9e:	f887 3088 	strb.w	r3, [r7, #136]	; 0x88
  macDefaultConf.Speed = ETH_SPEED_100M;
 8022ca2:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8022ca6:	64bb      	str	r3, [r7, #72]	; 0x48
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 8022ca8:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8022cac:	64fb      	str	r3, [r7, #76]	; 0x4c
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 8022cae:	2300      	movs	r3, #0
 8022cb0:	f887 3089 	strb.w	r3, [r7, #137]	; 0x89

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 8022cb4:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8022cb8:	4619      	mov	r1, r3
 8022cba:	6878      	ldr	r0, [r7, #4]
 8022cbc:	f7ff fe86 	bl	80229cc <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.DropTCPIPChecksumErrorFrame = ENABLE;
 8022cc0:	2301      	movs	r3, #1
 8022cc2:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.ReceiveStoreForward = ENABLE;
 8022cc4:	2301      	movs	r3, #1
 8022cc6:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.FlushRxPacket = ENABLE;
 8022cc8:	2301      	movs	r3, #1
 8022cca:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  dmaDefaultConf.TransmitStoreForward = ENABLE;
 8022cce:	2301      	movs	r3, #1
 8022cd0:	75bb      	strb	r3, [r7, #22]
  dmaDefaultConf.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 8022cd2:	2300      	movs	r3, #0
 8022cd4:	61fb      	str	r3, [r7, #28]
  dmaDefaultConf.ForwardErrorFrames = DISABLE;
 8022cd6:	2300      	movs	r3, #0
 8022cd8:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  dmaDefaultConf.ForwardUndersizedGoodFrames = DISABLE;
 8022cdc:	2300      	movs	r3, #0
 8022cde:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  dmaDefaultConf.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 8022ce2:	2300      	movs	r3, #0
 8022ce4:	62bb      	str	r3, [r7, #40]	; 0x28
  dmaDefaultConf.SecondFrameOperate = ENABLE;
 8022ce6:	2301      	movs	r3, #1
 8022ce8:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 8022cec:	2301      	movs	r3, #1
 8022cee:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 8022cf0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8022cf4:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8022cf6:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8022cfa:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8022cfc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8022d00:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.EnhancedDescriptorFormat = ENABLE;
 8022d02:	2301      	movs	r3, #1
 8022d04:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
  dmaDefaultConf.DescriptorSkipLength = 0x0U;
 8022d08:	2300      	movs	r3, #0
 8022d0a:	633b      	str	r3, [r7, #48]	; 0x30
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 8022d0c:	2300      	movs	r3, #0
 8022d0e:	60bb      	str	r3, [r7, #8]

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 8022d10:	f107 0308 	add.w	r3, r7, #8
 8022d14:	4619      	mov	r1, r3
 8022d16:	6878      	ldr	r0, [r7, #4]
 8022d18:	f7ff ff08 	bl	8022b2c <ETH_SetDMAConfig>
}
 8022d1c:	bf00      	nop
 8022d1e:	3798      	adds	r7, #152	; 0x98
 8022d20:	46bd      	mov	sp, r7
 8022d22:	bd80      	pop	{r7, pc}

08022d24 <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 8022d24:	b480      	push	{r7}
 8022d26:	b087      	sub	sp, #28
 8022d28:	af00      	add	r7, sp, #0
 8022d2a:	60f8      	str	r0, [r7, #12]
 8022d2c:	60b9      	str	r1, [r7, #8]
 8022d2e:	607a      	str	r2, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);

  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 8022d30:	687b      	ldr	r3, [r7, #4]
 8022d32:	3305      	adds	r3, #5
 8022d34:	781b      	ldrb	r3, [r3, #0]
 8022d36:	021b      	lsls	r3, r3, #8
 8022d38:	687a      	ldr	r2, [r7, #4]
 8022d3a:	3204      	adds	r2, #4
 8022d3c:	7812      	ldrb	r2, [r2, #0]
 8022d3e:	4313      	orrs	r3, r2
 8022d40:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 8022d42:	68ba      	ldr	r2, [r7, #8]
 8022d44:	4b11      	ldr	r3, [pc, #68]	; (8022d8c <ETH_MACAddressConfig+0x68>)
 8022d46:	4413      	add	r3, r2
 8022d48:	461a      	mov	r2, r3
 8022d4a:	697b      	ldr	r3, [r7, #20]
 8022d4c:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 8022d4e:	687b      	ldr	r3, [r7, #4]
 8022d50:	3303      	adds	r3, #3
 8022d52:	781b      	ldrb	r3, [r3, #0]
 8022d54:	061a      	lsls	r2, r3, #24
 8022d56:	687b      	ldr	r3, [r7, #4]
 8022d58:	3302      	adds	r3, #2
 8022d5a:	781b      	ldrb	r3, [r3, #0]
 8022d5c:	041b      	lsls	r3, r3, #16
 8022d5e:	431a      	orrs	r2, r3
 8022d60:	687b      	ldr	r3, [r7, #4]
 8022d62:	3301      	adds	r3, #1
 8022d64:	781b      	ldrb	r3, [r3, #0]
 8022d66:	021b      	lsls	r3, r3, #8
 8022d68:	4313      	orrs	r3, r2
 8022d6a:	687a      	ldr	r2, [r7, #4]
 8022d6c:	7812      	ldrb	r2, [r2, #0]
 8022d6e:	4313      	orrs	r3, r2
 8022d70:	617b      	str	r3, [r7, #20]

  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 8022d72:	68ba      	ldr	r2, [r7, #8]
 8022d74:	4b06      	ldr	r3, [pc, #24]	; (8022d90 <ETH_MACAddressConfig+0x6c>)
 8022d76:	4413      	add	r3, r2
 8022d78:	461a      	mov	r2, r3
 8022d7a:	697b      	ldr	r3, [r7, #20]
 8022d7c:	6013      	str	r3, [r2, #0]
}
 8022d7e:	bf00      	nop
 8022d80:	371c      	adds	r7, #28
 8022d82:	46bd      	mov	sp, r7
 8022d84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8022d88:	4770      	bx	lr
 8022d8a:	bf00      	nop
 8022d8c:	40028040 	.word	0x40028040
 8022d90:	40028044 	.word	0x40028044

08022d94 <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 8022d94:	b480      	push	{r7}
 8022d96:	b085      	sub	sp, #20
 8022d98:	af00      	add	r7, sp, #0
 8022d9a:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8022d9c:	2300      	movs	r3, #0
 8022d9e:	60fb      	str	r3, [r7, #12]
 8022da0:	e03e      	b.n	8022e20 <ETH_DMATxDescListInit+0x8c>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 8022da2:	687b      	ldr	r3, [r7, #4]
 8022da4:	68d9      	ldr	r1, [r3, #12]
 8022da6:	68fa      	ldr	r2, [r7, #12]
 8022da8:	4613      	mov	r3, r2
 8022daa:	009b      	lsls	r3, r3, #2
 8022dac:	4413      	add	r3, r2
 8022dae:	00db      	lsls	r3, r3, #3
 8022db0:	440b      	add	r3, r1
 8022db2:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0);
 8022db4:	68bb      	ldr	r3, [r7, #8]
 8022db6:	2200      	movs	r2, #0
 8022db8:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 8022dba:	68bb      	ldr	r3, [r7, #8]
 8022dbc:	2200      	movs	r2, #0
 8022dbe:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0);
 8022dc0:	68bb      	ldr	r3, [r7, #8]
 8022dc2:	2200      	movs	r2, #0
 8022dc4:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0);
 8022dc6:	68bb      	ldr	r3, [r7, #8]
 8022dc8:	2200      	movs	r2, #0
 8022dca:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 8022dcc:	68b9      	ldr	r1, [r7, #8]
 8022dce:	687b      	ldr	r3, [r7, #4]
 8022dd0:	68fa      	ldr	r2, [r7, #12]
 8022dd2:	3206      	adds	r2, #6
 8022dd4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    /* Set Second Address Chained bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_TCH);
 8022dd8:	68bb      	ldr	r3, [r7, #8]
 8022dda:	681b      	ldr	r3, [r3, #0]
 8022ddc:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8022de0:	68bb      	ldr	r3, [r7, #8]
 8022de2:	601a      	str	r2, [r3, #0]

    if (i < ((uint32_t)ETH_TX_DESC_CNT - 1U))
 8022de4:	68fb      	ldr	r3, [r7, #12]
 8022de6:	2b02      	cmp	r3, #2
 8022de8:	d80c      	bhi.n	8022e04 <ETH_DMATxDescListInit+0x70>
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc + i + 1U));
 8022dea:	687b      	ldr	r3, [r7, #4]
 8022dec:	68d9      	ldr	r1, [r3, #12]
 8022dee:	68fb      	ldr	r3, [r7, #12]
 8022df0:	1c5a      	adds	r2, r3, #1
 8022df2:	4613      	mov	r3, r2
 8022df4:	009b      	lsls	r3, r3, #2
 8022df6:	4413      	add	r3, r2
 8022df8:	00db      	lsls	r3, r3, #3
 8022dfa:	440b      	add	r3, r1
 8022dfc:	461a      	mov	r2, r3
 8022dfe:	68bb      	ldr	r3, [r7, #8]
 8022e00:	60da      	str	r2, [r3, #12]
 8022e02:	e004      	b.n	8022e0e <ETH_DMATxDescListInit+0x7a>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc));
 8022e04:	687b      	ldr	r3, [r7, #4]
 8022e06:	68db      	ldr	r3, [r3, #12]
 8022e08:	461a      	mov	r2, r3
 8022e0a:	68bb      	ldr	r3, [r7, #8]
 8022e0c:	60da      	str	r2, [r3, #12]
    }

    /* Set the DMA Tx descriptors checksum insertion */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL);
 8022e0e:	68bb      	ldr	r3, [r7, #8]
 8022e10:	681b      	ldr	r3, [r3, #0]
 8022e12:	f443 0240 	orr.w	r2, r3, #12582912	; 0xc00000
 8022e16:	68bb      	ldr	r3, [r7, #8]
 8022e18:	601a      	str	r2, [r3, #0]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8022e1a:	68fb      	ldr	r3, [r7, #12]
 8022e1c:	3301      	adds	r3, #1
 8022e1e:	60fb      	str	r3, [r7, #12]
 8022e20:	68fb      	ldr	r3, [r7, #12]
 8022e22:	2b03      	cmp	r3, #3
 8022e24:	d9bd      	bls.n	8022da2 <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 8022e26:	687b      	ldr	r3, [r7, #4]
 8022e28:	2200      	movs	r2, #0
 8022e2a:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMATDLAR, (uint32_t) heth->Init.TxDesc);
 8022e2c:	687b      	ldr	r3, [r7, #4]
 8022e2e:	68da      	ldr	r2, [r3, #12]
 8022e30:	687b      	ldr	r3, [r7, #4]
 8022e32:	681b      	ldr	r3, [r3, #0]
 8022e34:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8022e38:	611a      	str	r2, [r3, #16]
}
 8022e3a:	bf00      	nop
 8022e3c:	3714      	adds	r7, #20
 8022e3e:	46bd      	mov	sp, r7
 8022e40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8022e44:	4770      	bx	lr

08022e46 <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 8022e46:	b480      	push	{r7}
 8022e48:	b085      	sub	sp, #20
 8022e4a:	af00      	add	r7, sp, #0
 8022e4c:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8022e4e:	2300      	movs	r3, #0
 8022e50:	60fb      	str	r3, [r7, #12]
 8022e52:	e046      	b.n	8022ee2 <ETH_DMARxDescListInit+0x9c>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 8022e54:	687b      	ldr	r3, [r7, #4]
 8022e56:	6919      	ldr	r1, [r3, #16]
 8022e58:	68fa      	ldr	r2, [r7, #12]
 8022e5a:	4613      	mov	r3, r2
 8022e5c:	009b      	lsls	r3, r3, #2
 8022e5e:	4413      	add	r3, r2
 8022e60:	00db      	lsls	r3, r3, #3
 8022e62:	440b      	add	r3, r1
 8022e64:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0);
 8022e66:	68bb      	ldr	r3, [r7, #8]
 8022e68:	2200      	movs	r2, #0
 8022e6a:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0);
 8022e6c:	68bb      	ldr	r3, [r7, #8]
 8022e6e:	2200      	movs	r2, #0
 8022e70:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0);
 8022e72:	68bb      	ldr	r3, [r7, #8]
 8022e74:	2200      	movs	r2, #0
 8022e76:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0);
 8022e78:	68bb      	ldr	r3, [r7, #8]
 8022e7a:	2200      	movs	r2, #0
 8022e7c:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0);
 8022e7e:	68bb      	ldr	r3, [r7, #8]
 8022e80:	2200      	movs	r2, #0
 8022e82:	621a      	str	r2, [r3, #32]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0);
 8022e84:	68bb      	ldr	r3, [r7, #8]
 8022e86:	2200      	movs	r2, #0
 8022e88:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set Own bit of the Rx descriptor Status */
    dmarxdesc->DESC0 = ETH_DMARXDESC_OWN;
 8022e8a:	68bb      	ldr	r3, [r7, #8]
 8022e8c:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8022e90:	601a      	str	r2, [r3, #0]

    /* Set Buffer1 size and Second Address Chained bit */
    dmarxdesc->DESC1 = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;
 8022e92:	68bb      	ldr	r3, [r7, #8]
 8022e94:	f44f 428c 	mov.w	r2, #17920	; 0x4600
 8022e98:	605a      	str	r2, [r3, #4]

    /* Enable Ethernet DMA Rx Descriptor interrupt */
    dmarxdesc->DESC1 &= ~ETH_DMARXDESC_DIC;
 8022e9a:	68bb      	ldr	r3, [r7, #8]
 8022e9c:	685b      	ldr	r3, [r3, #4]
 8022e9e:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8022ea2:	68bb      	ldr	r3, [r7, #8]
 8022ea4:	605a      	str	r2, [r3, #4]

    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 8022ea6:	68b9      	ldr	r1, [r7, #8]
 8022ea8:	687b      	ldr	r3, [r7, #4]
 8022eaa:	68fa      	ldr	r2, [r7, #12]
 8022eac:	3212      	adds	r2, #18
 8022eae:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    if (i < ((uint32_t)ETH_RX_DESC_CNT - 1U))
 8022eb2:	68fb      	ldr	r3, [r7, #12]
 8022eb4:	2b02      	cmp	r3, #2
 8022eb6:	d80c      	bhi.n	8022ed2 <ETH_DMARxDescListInit+0x8c>
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc + i + 1U));
 8022eb8:	687b      	ldr	r3, [r7, #4]
 8022eba:	6919      	ldr	r1, [r3, #16]
 8022ebc:	68fb      	ldr	r3, [r7, #12]
 8022ebe:	1c5a      	adds	r2, r3, #1
 8022ec0:	4613      	mov	r3, r2
 8022ec2:	009b      	lsls	r3, r3, #2
 8022ec4:	4413      	add	r3, r2
 8022ec6:	00db      	lsls	r3, r3, #3
 8022ec8:	440b      	add	r3, r1
 8022eca:	461a      	mov	r2, r3
 8022ecc:	68bb      	ldr	r3, [r7, #8]
 8022ece:	60da      	str	r2, [r3, #12]
 8022ed0:	e004      	b.n	8022edc <ETH_DMARxDescListInit+0x96>
    }
    else
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc));
 8022ed2:	687b      	ldr	r3, [r7, #4]
 8022ed4:	691b      	ldr	r3, [r3, #16]
 8022ed6:	461a      	mov	r2, r3
 8022ed8:	68bb      	ldr	r3, [r7, #8]
 8022eda:	60da      	str	r2, [r3, #12]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8022edc:	68fb      	ldr	r3, [r7, #12]
 8022ede:	3301      	adds	r3, #1
 8022ee0:	60fb      	str	r3, [r7, #12]
 8022ee2:	68fb      	ldr	r3, [r7, #12]
 8022ee4:	2b03      	cmp	r3, #3
 8022ee6:	d9b5      	bls.n	8022e54 <ETH_DMARxDescListInit+0xe>
    }
  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0);
 8022ee8:	687b      	ldr	r3, [r7, #4]
 8022eea:	2200      	movs	r2, #0
 8022eec:	65da      	str	r2, [r3, #92]	; 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0);
 8022eee:	687b      	ldr	r3, [r7, #4]
 8022ef0:	2200      	movs	r2, #0
 8022ef2:	661a      	str	r2, [r3, #96]	; 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0);
 8022ef4:	687b      	ldr	r3, [r7, #4]
 8022ef6:	2200      	movs	r2, #0
 8022ef8:	669a      	str	r2, [r3, #104]	; 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0);
 8022efa:	687b      	ldr	r3, [r7, #4]
 8022efc:	2200      	movs	r2, #0
 8022efe:	66da      	str	r2, [r3, #108]	; 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0);
 8022f00:	687b      	ldr	r3, [r7, #4]
 8022f02:	2200      	movs	r2, #0
 8022f04:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMARDLAR, (uint32_t) heth->Init.RxDesc);
 8022f06:	687b      	ldr	r3, [r7, #4]
 8022f08:	691a      	ldr	r2, [r3, #16]
 8022f0a:	687b      	ldr	r3, [r7, #4]
 8022f0c:	681b      	ldr	r3, [r3, #0]
 8022f0e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8022f12:	60da      	str	r2, [r3, #12]
}
 8022f14:	bf00      	nop
 8022f16:	3714      	adds	r7, #20
 8022f18:	46bd      	mov	sp, r7
 8022f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8022f1e:	4770      	bx	lr

08022f20 <ETH_Prepare_Tx_Descriptors>:
  * @param  pTxConfig: Tx packet configuration
  * @param  ItMode: Enable or disable Tx EOT interrept
  * @retval Status
  */
static uint32_t ETH_Prepare_Tx_Descriptors(ETH_HandleTypeDef *heth, ETH_TxPacketConfig *pTxConfig, uint32_t ItMode)
{
 8022f20:	b480      	push	{r7}
 8022f22:	b08d      	sub	sp, #52	; 0x34
 8022f24:	af00      	add	r7, sp, #0
 8022f26:	60f8      	str	r0, [r7, #12]
 8022f28:	60b9      	str	r1, [r7, #8]
 8022f2a:	607a      	str	r2, [r7, #4]
  ETH_TxDescListTypeDef *dmatxdesclist = &heth->TxDescList;
 8022f2c:	68fb      	ldr	r3, [r7, #12]
 8022f2e:	3318      	adds	r3, #24
 8022f30:	617b      	str	r3, [r7, #20]
  uint32_t descidx = dmatxdesclist->CurTxDesc;
 8022f32:	697b      	ldr	r3, [r7, #20]
 8022f34:	691b      	ldr	r3, [r3, #16]
 8022f36:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t firstdescidx = dmatxdesclist->CurTxDesc;
 8022f38:	697b      	ldr	r3, [r7, #20]
 8022f3a:	691b      	ldr	r3, [r3, #16]
 8022f3c:	613b      	str	r3, [r7, #16]
  uint32_t idx;
  uint32_t descnbr = 0;
 8022f3e:	2300      	movs	r3, #0
 8022f40:	627b      	str	r3, [r7, #36]	; 0x24
  ETH_DMADescTypeDef *dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8022f42:	697b      	ldr	r3, [r7, #20]
 8022f44:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8022f46:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8022f4a:	623b      	str	r3, [r7, #32]

  ETH_BufferTypeDef  *txbuffer = pTxConfig->TxBuffer;
 8022f4c:	68bb      	ldr	r3, [r7, #8]
 8022f4e:	689b      	ldr	r3, [r3, #8]
 8022f50:	61fb      	str	r3, [r7, #28]
  uint32_t           bd_count = 0;
 8022f52:	2300      	movs	r3, #0
 8022f54:	61bb      	str	r3, [r7, #24]

  /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
  if ((READ_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN) == ETH_DMATXDESC_OWN)
 8022f56:	6a3b      	ldr	r3, [r7, #32]
 8022f58:	681b      	ldr	r3, [r3, #0]
 8022f5a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8022f5e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8022f62:	d007      	beq.n	8022f74 <ETH_Prepare_Tx_Descriptors+0x54>
      || (dmatxdesclist->PacketAddress[descidx] != NULL))
 8022f64:	697a      	ldr	r2, [r7, #20]
 8022f66:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8022f68:	3304      	adds	r3, #4
 8022f6a:	009b      	lsls	r3, r3, #2
 8022f6c:	4413      	add	r3, r2
 8022f6e:	685b      	ldr	r3, [r3, #4]
 8022f70:	2b00      	cmp	r3, #0
 8022f72:	d001      	beq.n	8022f78 <ETH_Prepare_Tx_Descriptors+0x58>
  {
    return HAL_ETH_ERROR_BUSY;
 8022f74:	2302      	movs	r3, #2
 8022f76:	e103      	b.n	8023180 <ETH_Prepare_Tx_Descriptors+0x260>
  }


  descnbr += 1U;
 8022f78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8022f7a:	3301      	adds	r3, #1
 8022f7c:	627b      	str	r3, [r7, #36]	; 0x24

  /* Set header or buffer 1 address */
  WRITE_REG(dmatxdesc->DESC2, (uint32_t)txbuffer->buffer);
 8022f7e:	69fb      	ldr	r3, [r7, #28]
 8022f80:	681b      	ldr	r3, [r3, #0]
 8022f82:	461a      	mov	r2, r3
 8022f84:	6a3b      	ldr	r3, [r7, #32]
 8022f86:	609a      	str	r2, [r3, #8]

  /* Set header or buffer 1 Length */
  MODIFY_REG(dmatxdesc->DESC1, ETH_DMATXDESC_TBS1, txbuffer->len);
 8022f88:	6a3b      	ldr	r3, [r7, #32]
 8022f8a:	685b      	ldr	r3, [r3, #4]
 8022f8c:	f423 53ff 	bic.w	r3, r3, #8160	; 0x1fe0
 8022f90:	f023 031f 	bic.w	r3, r3, #31
 8022f94:	69fa      	ldr	r2, [r7, #28]
 8022f96:	6852      	ldr	r2, [r2, #4]
 8022f98:	431a      	orrs	r2, r3
 8022f9a:	6a3b      	ldr	r3, [r7, #32]
 8022f9c:	605a      	str	r2, [r3, #4]

  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CSUM) != 0U)
 8022f9e:	68bb      	ldr	r3, [r7, #8]
 8022fa0:	681b      	ldr	r3, [r3, #0]
 8022fa2:	f003 0301 	and.w	r3, r3, #1
 8022fa6:	2b00      	cmp	r3, #0
 8022fa8:	d008      	beq.n	8022fbc <ETH_Prepare_Tx_Descriptors+0x9c>
  {
    MODIFY_REG(dmatxdesc->DESC0, ETH_DMATXDESC_CIC, pTxConfig->ChecksumCtrl);
 8022faa:	6a3b      	ldr	r3, [r7, #32]
 8022fac:	681b      	ldr	r3, [r3, #0]
 8022fae:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8022fb2:	68bb      	ldr	r3, [r7, #8]
 8022fb4:	695b      	ldr	r3, [r3, #20]
 8022fb6:	431a      	orrs	r2, r3
 8022fb8:	6a3b      	ldr	r3, [r7, #32]
 8022fba:	601a      	str	r2, [r3, #0]
  }

  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CRCPAD) != 0U)
 8022fbc:	68bb      	ldr	r3, [r7, #8]
 8022fbe:	681b      	ldr	r3, [r3, #0]
 8022fc0:	f003 0320 	and.w	r3, r3, #32
 8022fc4:	2b00      	cmp	r3, #0
 8022fc6:	d008      	beq.n	8022fda <ETH_Prepare_Tx_Descriptors+0xba>
  {
    MODIFY_REG(dmatxdesc->DESC0, ETH_CRC_PAD_DISABLE, pTxConfig->CRCPadCtrl);
 8022fc8:	6a3b      	ldr	r3, [r7, #32]
 8022fca:	681b      	ldr	r3, [r3, #0]
 8022fcc:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8022fd0:	68bb      	ldr	r3, [r7, #8]
 8022fd2:	691b      	ldr	r3, [r3, #16]
 8022fd4:	431a      	orrs	r2, r3
 8022fd6:	6a3b      	ldr	r3, [r7, #32]
 8022fd8:	601a      	str	r2, [r3, #0]
  }


  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_VLANTAG) != 0U)
 8022fda:	68bb      	ldr	r3, [r7, #8]
 8022fdc:	681b      	ldr	r3, [r3, #0]
 8022fde:	f003 0304 	and.w	r3, r3, #4
 8022fe2:	2b00      	cmp	r3, #0
 8022fe4:	d005      	beq.n	8022ff2 <ETH_Prepare_Tx_Descriptors+0xd2>
  {
    /* Set Vlan Type */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_VF);
 8022fe6:	6a3b      	ldr	r3, [r7, #32]
 8022fe8:	681b      	ldr	r3, [r3, #0]
 8022fea:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8022fee:	6a3b      	ldr	r3, [r7, #32]
 8022ff0:	601a      	str	r2, [r3, #0]
  }

  /* Mark it as First Descriptor */
  SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_FS);
 8022ff2:	6a3b      	ldr	r3, [r7, #32]
 8022ff4:	681b      	ldr	r3, [r3, #0]
 8022ff6:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8022ffa:	6a3b      	ldr	r3, [r7, #32]
 8022ffc:	601a      	str	r2, [r3, #0]
  __ASM volatile ("dmb 0xF":::"memory");
 8022ffe:	f3bf 8f5f 	dmb	sy
}
 8023002:	bf00      	nop

  /* Ensure rest of descriptor is written to RAM before the OWN bit */
  __DMB();
  /* set OWN bit of FIRST descriptor */
  SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN);
 8023004:	6a3b      	ldr	r3, [r7, #32]
 8023006:	681b      	ldr	r3, [r3, #0]
 8023008:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 802300c:	6a3b      	ldr	r3, [r7, #32]
 802300e:	601a      	str	r2, [r3, #0]

  /* only if the packet is split into more than one descriptors > 1 */
  while (txbuffer->next != NULL)
 8023010:	e084      	b.n	802311c <ETH_Prepare_Tx_Descriptors+0x1fc>
  {
    /* Clear the LD bit of previous descriptor */
    CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_LS);
 8023012:	6a3b      	ldr	r3, [r7, #32]
 8023014:	681b      	ldr	r3, [r3, #0]
 8023016:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 802301a:	6a3b      	ldr	r3, [r7, #32]
 802301c:	601a      	str	r2, [r3, #0]
    if (ItMode != ((uint32_t)RESET))
 802301e:	687b      	ldr	r3, [r7, #4]
 8023020:	2b00      	cmp	r3, #0
 8023022:	d006      	beq.n	8023032 <ETH_Prepare_Tx_Descriptors+0x112>
    {
      /* Set Interrupt on completion bit */
      SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 8023024:	6a3b      	ldr	r3, [r7, #32]
 8023026:	681b      	ldr	r3, [r3, #0]
 8023028:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 802302c:	6a3b      	ldr	r3, [r7, #32]
 802302e:	601a      	str	r2, [r3, #0]
 8023030:	e005      	b.n	802303e <ETH_Prepare_Tx_Descriptors+0x11e>
    }
    else
    {
      /* Clear Interrupt on completion bit */
      CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 8023032:	6a3b      	ldr	r3, [r7, #32]
 8023034:	681b      	ldr	r3, [r3, #0]
 8023036:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 802303a:	6a3b      	ldr	r3, [r7, #32]
 802303c:	601a      	str	r2, [r3, #0]
    }
    /* Increment current tx descriptor index */
    INCR_TX_DESC_INDEX(descidx, 1U);
 802303e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8023040:	3301      	adds	r3, #1
 8023042:	62fb      	str	r3, [r7, #44]	; 0x2c
 8023044:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8023046:	2b03      	cmp	r3, #3
 8023048:	d902      	bls.n	8023050 <ETH_Prepare_Tx_Descriptors+0x130>
 802304a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 802304c:	3b04      	subs	r3, #4
 802304e:	62fb      	str	r3, [r7, #44]	; 0x2c
    /* Get current descriptor address */
    dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8023050:	697b      	ldr	r3, [r7, #20]
 8023052:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8023054:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8023058:	623b      	str	r3, [r7, #32]

    /* Clear the FD bit of new Descriptor */
    CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_FS);
 802305a:	6a3b      	ldr	r3, [r7, #32]
 802305c:	681b      	ldr	r3, [r3, #0]
 802305e:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8023062:	6a3b      	ldr	r3, [r7, #32]
 8023064:	601a      	str	r2, [r3, #0]

    /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
    if ((READ_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN) == ETH_DMATXDESC_OWN)
 8023066:	6a3b      	ldr	r3, [r7, #32]
 8023068:	681b      	ldr	r3, [r3, #0]
 802306a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 802306e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8023072:	d007      	beq.n	8023084 <ETH_Prepare_Tx_Descriptors+0x164>
        || (dmatxdesclist->PacketAddress[descidx] != NULL))
 8023074:	697a      	ldr	r2, [r7, #20]
 8023076:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8023078:	3304      	adds	r3, #4
 802307a:	009b      	lsls	r3, r3, #2
 802307c:	4413      	add	r3, r2
 802307e:	685b      	ldr	r3, [r3, #4]
 8023080:	2b00      	cmp	r3, #0
 8023082:	d029      	beq.n	80230d8 <ETH_Prepare_Tx_Descriptors+0x1b8>
    {
      descidx = firstdescidx;
 8023084:	693b      	ldr	r3, [r7, #16]
 8023086:	62fb      	str	r3, [r7, #44]	; 0x2c
      dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8023088:	697b      	ldr	r3, [r7, #20]
 802308a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 802308c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8023090:	623b      	str	r3, [r7, #32]

      /* clear previous desc own bit */
      for (idx = 0; idx < descnbr; idx ++)
 8023092:	2300      	movs	r3, #0
 8023094:	62bb      	str	r3, [r7, #40]	; 0x28
 8023096:	e019      	b.n	80230cc <ETH_Prepare_Tx_Descriptors+0x1ac>
  __ASM volatile ("dmb 0xF":::"memory");
 8023098:	f3bf 8f5f 	dmb	sy
}
 802309c:	bf00      	nop
      {
        /* Ensure rest of descriptor is written to RAM before the OWN bit */
        __DMB();

        CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN);
 802309e:	6a3b      	ldr	r3, [r7, #32]
 80230a0:	681b      	ldr	r3, [r3, #0]
 80230a2:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80230a6:	6a3b      	ldr	r3, [r7, #32]
 80230a8:	601a      	str	r2, [r3, #0]

        /* Increment current tx descriptor index */
        INCR_TX_DESC_INDEX(descidx, 1U);
 80230aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80230ac:	3301      	adds	r3, #1
 80230ae:	62fb      	str	r3, [r7, #44]	; 0x2c
 80230b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80230b2:	2b03      	cmp	r3, #3
 80230b4:	d902      	bls.n	80230bc <ETH_Prepare_Tx_Descriptors+0x19c>
 80230b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80230b8:	3b04      	subs	r3, #4
 80230ba:	62fb      	str	r3, [r7, #44]	; 0x2c
        /* Get current descriptor address */
        dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 80230bc:	697b      	ldr	r3, [r7, #20]
 80230be:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80230c0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80230c4:	623b      	str	r3, [r7, #32]
      for (idx = 0; idx < descnbr; idx ++)
 80230c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80230c8:	3301      	adds	r3, #1
 80230ca:	62bb      	str	r3, [r7, #40]	; 0x28
 80230cc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80230ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80230d0:	429a      	cmp	r2, r3
 80230d2:	d3e1      	bcc.n	8023098 <ETH_Prepare_Tx_Descriptors+0x178>
      }

      return HAL_ETH_ERROR_BUSY;
 80230d4:	2302      	movs	r3, #2
 80230d6:	e053      	b.n	8023180 <ETH_Prepare_Tx_Descriptors+0x260>
    }

    descnbr += 1U;
 80230d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80230da:	3301      	adds	r3, #1
 80230dc:	627b      	str	r3, [r7, #36]	; 0x24

    /* Get the next Tx buffer in the list */
    txbuffer = txbuffer->next;
 80230de:	69fb      	ldr	r3, [r7, #28]
 80230e0:	689b      	ldr	r3, [r3, #8]
 80230e2:	61fb      	str	r3, [r7, #28]

    /* Set header or buffer 1 address */
    WRITE_REG(dmatxdesc->DESC2, (uint32_t)txbuffer->buffer);
 80230e4:	69fb      	ldr	r3, [r7, #28]
 80230e6:	681b      	ldr	r3, [r3, #0]
 80230e8:	461a      	mov	r2, r3
 80230ea:	6a3b      	ldr	r3, [r7, #32]
 80230ec:	609a      	str	r2, [r3, #8]

    /* Set header or buffer 1 Length */
    MODIFY_REG(dmatxdesc->DESC1, ETH_DMATXDESC_TBS1, txbuffer->len);
 80230ee:	6a3b      	ldr	r3, [r7, #32]
 80230f0:	685b      	ldr	r3, [r3, #4]
 80230f2:	f423 53ff 	bic.w	r3, r3, #8160	; 0x1fe0
 80230f6:	f023 031f 	bic.w	r3, r3, #31
 80230fa:	69fa      	ldr	r2, [r7, #28]
 80230fc:	6852      	ldr	r2, [r2, #4]
 80230fe:	431a      	orrs	r2, r3
 8023100:	6a3b      	ldr	r3, [r7, #32]
 8023102:	605a      	str	r2, [r3, #4]

    bd_count += 1U;
 8023104:	69bb      	ldr	r3, [r7, #24]
 8023106:	3301      	adds	r3, #1
 8023108:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("dmb 0xF":::"memory");
 802310a:	f3bf 8f5f 	dmb	sy
}
 802310e:	bf00      	nop

    /* Ensure rest of descriptor is written to RAM before the OWN bit */
    __DMB();
    /* Set Own bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN);
 8023110:	6a3b      	ldr	r3, [r7, #32]
 8023112:	681b      	ldr	r3, [r3, #0]
 8023114:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8023118:	6a3b      	ldr	r3, [r7, #32]
 802311a:	601a      	str	r2, [r3, #0]
  while (txbuffer->next != NULL)
 802311c:	69fb      	ldr	r3, [r7, #28]
 802311e:	689b      	ldr	r3, [r3, #8]
 8023120:	2b00      	cmp	r3, #0
 8023122:	f47f af76 	bne.w	8023012 <ETH_Prepare_Tx_Descriptors+0xf2>
  }

  if (ItMode != ((uint32_t)RESET))
 8023126:	687b      	ldr	r3, [r7, #4]
 8023128:	2b00      	cmp	r3, #0
 802312a:	d006      	beq.n	802313a <ETH_Prepare_Tx_Descriptors+0x21a>
  {
    /* Set Interrupt on completion bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 802312c:	6a3b      	ldr	r3, [r7, #32]
 802312e:	681b      	ldr	r3, [r3, #0]
 8023130:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8023134:	6a3b      	ldr	r3, [r7, #32]
 8023136:	601a      	str	r2, [r3, #0]
 8023138:	e005      	b.n	8023146 <ETH_Prepare_Tx_Descriptors+0x226>
  }
  else
  {
    /* Clear Interrupt on completion bit */
    CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 802313a:	6a3b      	ldr	r3, [r7, #32]
 802313c:	681b      	ldr	r3, [r3, #0]
 802313e:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8023142:	6a3b      	ldr	r3, [r7, #32]
 8023144:	601a      	str	r2, [r3, #0]
  }

  /* Mark it as LAST descriptor */
  SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_LS);
 8023146:	6a3b      	ldr	r3, [r7, #32]
 8023148:	681b      	ldr	r3, [r3, #0]
 802314a:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 802314e:	6a3b      	ldr	r3, [r7, #32]
 8023150:	601a      	str	r2, [r3, #0]
  /* Save the current packet address to expose it to the application */
  dmatxdesclist->PacketAddress[descidx] = dmatxdesclist->CurrentPacketAddress;
 8023152:	697b      	ldr	r3, [r7, #20]
 8023154:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8023156:	6979      	ldr	r1, [r7, #20]
 8023158:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 802315a:	3304      	adds	r3, #4
 802315c:	009b      	lsls	r3, r3, #2
 802315e:	440b      	add	r3, r1
 8023160:	605a      	str	r2, [r3, #4]

  dmatxdesclist->CurTxDesc = descidx;
 8023162:	697b      	ldr	r3, [r7, #20]
 8023164:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8023166:	611a      	str	r2, [r3, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 8023168:	b672      	cpsid	i
}
 802316a:	bf00      	nop

  /* disable the interrupt */
  __disable_irq();

  dmatxdesclist->BuffersInUse += bd_count + 1U;
 802316c:	697b      	ldr	r3, [r7, #20]
 802316e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8023170:	69bb      	ldr	r3, [r7, #24]
 8023172:	4413      	add	r3, r2
 8023174:	1c5a      	adds	r2, r3, #1
 8023176:	697b      	ldr	r3, [r7, #20]
 8023178:	629a      	str	r2, [r3, #40]	; 0x28
  __ASM volatile ("cpsie i" : : : "memory");
 802317a:	b662      	cpsie	i
}
 802317c:	bf00      	nop
  /* Enable interrupts back */
  __enable_irq();


  /* Return function status */
  return HAL_ETH_ERROR_NONE;
 802317e:	2300      	movs	r3, #0
}
 8023180:	4618      	mov	r0, r3
 8023182:	3734      	adds	r7, #52	; 0x34
 8023184:	46bd      	mov	sp, r7
 8023186:	f85d 7b04 	ldr.w	r7, [sp], #4
 802318a:	4770      	bx	lr

0802318c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 802318c:	b480      	push	{r7}
 802318e:	b089      	sub	sp, #36	; 0x24
 8023190:	af00      	add	r7, sp, #0
 8023192:	6078      	str	r0, [r7, #4]
 8023194:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8023196:	2300      	movs	r3, #0
 8023198:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 802319a:	2300      	movs	r3, #0
 802319c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 802319e:	2300      	movs	r3, #0
 80231a0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80231a2:	2300      	movs	r3, #0
 80231a4:	61fb      	str	r3, [r7, #28]
 80231a6:	e16b      	b.n	8023480 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80231a8:	2201      	movs	r2, #1
 80231aa:	69fb      	ldr	r3, [r7, #28]
 80231ac:	fa02 f303 	lsl.w	r3, r2, r3
 80231b0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80231b2:	683b      	ldr	r3, [r7, #0]
 80231b4:	681b      	ldr	r3, [r3, #0]
 80231b6:	697a      	ldr	r2, [r7, #20]
 80231b8:	4013      	ands	r3, r2
 80231ba:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80231bc:	693a      	ldr	r2, [r7, #16]
 80231be:	697b      	ldr	r3, [r7, #20]
 80231c0:	429a      	cmp	r2, r3
 80231c2:	f040 815a 	bne.w	802347a <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80231c6:	683b      	ldr	r3, [r7, #0]
 80231c8:	685b      	ldr	r3, [r3, #4]
 80231ca:	f003 0303 	and.w	r3, r3, #3
 80231ce:	2b01      	cmp	r3, #1
 80231d0:	d005      	beq.n	80231de <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80231d2:	683b      	ldr	r3, [r7, #0]
 80231d4:	685b      	ldr	r3, [r3, #4]
 80231d6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80231da:	2b02      	cmp	r3, #2
 80231dc:	d130      	bne.n	8023240 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80231de:	687b      	ldr	r3, [r7, #4]
 80231e0:	689b      	ldr	r3, [r3, #8]
 80231e2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80231e4:	69fb      	ldr	r3, [r7, #28]
 80231e6:	005b      	lsls	r3, r3, #1
 80231e8:	2203      	movs	r2, #3
 80231ea:	fa02 f303 	lsl.w	r3, r2, r3
 80231ee:	43db      	mvns	r3, r3
 80231f0:	69ba      	ldr	r2, [r7, #24]
 80231f2:	4013      	ands	r3, r2
 80231f4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80231f6:	683b      	ldr	r3, [r7, #0]
 80231f8:	68da      	ldr	r2, [r3, #12]
 80231fa:	69fb      	ldr	r3, [r7, #28]
 80231fc:	005b      	lsls	r3, r3, #1
 80231fe:	fa02 f303 	lsl.w	r3, r2, r3
 8023202:	69ba      	ldr	r2, [r7, #24]
 8023204:	4313      	orrs	r3, r2
 8023206:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8023208:	687b      	ldr	r3, [r7, #4]
 802320a:	69ba      	ldr	r2, [r7, #24]
 802320c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 802320e:	687b      	ldr	r3, [r7, #4]
 8023210:	685b      	ldr	r3, [r3, #4]
 8023212:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8023214:	2201      	movs	r2, #1
 8023216:	69fb      	ldr	r3, [r7, #28]
 8023218:	fa02 f303 	lsl.w	r3, r2, r3
 802321c:	43db      	mvns	r3, r3
 802321e:	69ba      	ldr	r2, [r7, #24]
 8023220:	4013      	ands	r3, r2
 8023222:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8023224:	683b      	ldr	r3, [r7, #0]
 8023226:	685b      	ldr	r3, [r3, #4]
 8023228:	091b      	lsrs	r3, r3, #4
 802322a:	f003 0201 	and.w	r2, r3, #1
 802322e:	69fb      	ldr	r3, [r7, #28]
 8023230:	fa02 f303 	lsl.w	r3, r2, r3
 8023234:	69ba      	ldr	r2, [r7, #24]
 8023236:	4313      	orrs	r3, r2
 8023238:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 802323a:	687b      	ldr	r3, [r7, #4]
 802323c:	69ba      	ldr	r2, [r7, #24]
 802323e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8023240:	683b      	ldr	r3, [r7, #0]
 8023242:	685b      	ldr	r3, [r3, #4]
 8023244:	f003 0303 	and.w	r3, r3, #3
 8023248:	2b03      	cmp	r3, #3
 802324a:	d017      	beq.n	802327c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 802324c:	687b      	ldr	r3, [r7, #4]
 802324e:	68db      	ldr	r3, [r3, #12]
 8023250:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8023252:	69fb      	ldr	r3, [r7, #28]
 8023254:	005b      	lsls	r3, r3, #1
 8023256:	2203      	movs	r2, #3
 8023258:	fa02 f303 	lsl.w	r3, r2, r3
 802325c:	43db      	mvns	r3, r3
 802325e:	69ba      	ldr	r2, [r7, #24]
 8023260:	4013      	ands	r3, r2
 8023262:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8023264:	683b      	ldr	r3, [r7, #0]
 8023266:	689a      	ldr	r2, [r3, #8]
 8023268:	69fb      	ldr	r3, [r7, #28]
 802326a:	005b      	lsls	r3, r3, #1
 802326c:	fa02 f303 	lsl.w	r3, r2, r3
 8023270:	69ba      	ldr	r2, [r7, #24]
 8023272:	4313      	orrs	r3, r2
 8023274:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8023276:	687b      	ldr	r3, [r7, #4]
 8023278:	69ba      	ldr	r2, [r7, #24]
 802327a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 802327c:	683b      	ldr	r3, [r7, #0]
 802327e:	685b      	ldr	r3, [r3, #4]
 8023280:	f003 0303 	and.w	r3, r3, #3
 8023284:	2b02      	cmp	r3, #2
 8023286:	d123      	bne.n	80232d0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8023288:	69fb      	ldr	r3, [r7, #28]
 802328a:	08da      	lsrs	r2, r3, #3
 802328c:	687b      	ldr	r3, [r7, #4]
 802328e:	3208      	adds	r2, #8
 8023290:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8023294:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8023296:	69fb      	ldr	r3, [r7, #28]
 8023298:	f003 0307 	and.w	r3, r3, #7
 802329c:	009b      	lsls	r3, r3, #2
 802329e:	220f      	movs	r2, #15
 80232a0:	fa02 f303 	lsl.w	r3, r2, r3
 80232a4:	43db      	mvns	r3, r3
 80232a6:	69ba      	ldr	r2, [r7, #24]
 80232a8:	4013      	ands	r3, r2
 80232aa:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80232ac:	683b      	ldr	r3, [r7, #0]
 80232ae:	691a      	ldr	r2, [r3, #16]
 80232b0:	69fb      	ldr	r3, [r7, #28]
 80232b2:	f003 0307 	and.w	r3, r3, #7
 80232b6:	009b      	lsls	r3, r3, #2
 80232b8:	fa02 f303 	lsl.w	r3, r2, r3
 80232bc:	69ba      	ldr	r2, [r7, #24]
 80232be:	4313      	orrs	r3, r2
 80232c0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80232c2:	69fb      	ldr	r3, [r7, #28]
 80232c4:	08da      	lsrs	r2, r3, #3
 80232c6:	687b      	ldr	r3, [r7, #4]
 80232c8:	3208      	adds	r2, #8
 80232ca:	69b9      	ldr	r1, [r7, #24]
 80232cc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80232d0:	687b      	ldr	r3, [r7, #4]
 80232d2:	681b      	ldr	r3, [r3, #0]
 80232d4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80232d6:	69fb      	ldr	r3, [r7, #28]
 80232d8:	005b      	lsls	r3, r3, #1
 80232da:	2203      	movs	r2, #3
 80232dc:	fa02 f303 	lsl.w	r3, r2, r3
 80232e0:	43db      	mvns	r3, r3
 80232e2:	69ba      	ldr	r2, [r7, #24]
 80232e4:	4013      	ands	r3, r2
 80232e6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80232e8:	683b      	ldr	r3, [r7, #0]
 80232ea:	685b      	ldr	r3, [r3, #4]
 80232ec:	f003 0203 	and.w	r2, r3, #3
 80232f0:	69fb      	ldr	r3, [r7, #28]
 80232f2:	005b      	lsls	r3, r3, #1
 80232f4:	fa02 f303 	lsl.w	r3, r2, r3
 80232f8:	69ba      	ldr	r2, [r7, #24]
 80232fa:	4313      	orrs	r3, r2
 80232fc:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80232fe:	687b      	ldr	r3, [r7, #4]
 8023300:	69ba      	ldr	r2, [r7, #24]
 8023302:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8023304:	683b      	ldr	r3, [r7, #0]
 8023306:	685b      	ldr	r3, [r3, #4]
 8023308:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 802330c:	2b00      	cmp	r3, #0
 802330e:	f000 80b4 	beq.w	802347a <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8023312:	2300      	movs	r3, #0
 8023314:	60fb      	str	r3, [r7, #12]
 8023316:	4b60      	ldr	r3, [pc, #384]	; (8023498 <HAL_GPIO_Init+0x30c>)
 8023318:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 802331a:	4a5f      	ldr	r2, [pc, #380]	; (8023498 <HAL_GPIO_Init+0x30c>)
 802331c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8023320:	6453      	str	r3, [r2, #68]	; 0x44
 8023322:	4b5d      	ldr	r3, [pc, #372]	; (8023498 <HAL_GPIO_Init+0x30c>)
 8023324:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8023326:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 802332a:	60fb      	str	r3, [r7, #12]
 802332c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 802332e:	4a5b      	ldr	r2, [pc, #364]	; (802349c <HAL_GPIO_Init+0x310>)
 8023330:	69fb      	ldr	r3, [r7, #28]
 8023332:	089b      	lsrs	r3, r3, #2
 8023334:	3302      	adds	r3, #2
 8023336:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 802333a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 802333c:	69fb      	ldr	r3, [r7, #28]
 802333e:	f003 0303 	and.w	r3, r3, #3
 8023342:	009b      	lsls	r3, r3, #2
 8023344:	220f      	movs	r2, #15
 8023346:	fa02 f303 	lsl.w	r3, r2, r3
 802334a:	43db      	mvns	r3, r3
 802334c:	69ba      	ldr	r2, [r7, #24]
 802334e:	4013      	ands	r3, r2
 8023350:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8023352:	687b      	ldr	r3, [r7, #4]
 8023354:	4a52      	ldr	r2, [pc, #328]	; (80234a0 <HAL_GPIO_Init+0x314>)
 8023356:	4293      	cmp	r3, r2
 8023358:	d02b      	beq.n	80233b2 <HAL_GPIO_Init+0x226>
 802335a:	687b      	ldr	r3, [r7, #4]
 802335c:	4a51      	ldr	r2, [pc, #324]	; (80234a4 <HAL_GPIO_Init+0x318>)
 802335e:	4293      	cmp	r3, r2
 8023360:	d025      	beq.n	80233ae <HAL_GPIO_Init+0x222>
 8023362:	687b      	ldr	r3, [r7, #4]
 8023364:	4a50      	ldr	r2, [pc, #320]	; (80234a8 <HAL_GPIO_Init+0x31c>)
 8023366:	4293      	cmp	r3, r2
 8023368:	d01f      	beq.n	80233aa <HAL_GPIO_Init+0x21e>
 802336a:	687b      	ldr	r3, [r7, #4]
 802336c:	4a4f      	ldr	r2, [pc, #316]	; (80234ac <HAL_GPIO_Init+0x320>)
 802336e:	4293      	cmp	r3, r2
 8023370:	d019      	beq.n	80233a6 <HAL_GPIO_Init+0x21a>
 8023372:	687b      	ldr	r3, [r7, #4]
 8023374:	4a4e      	ldr	r2, [pc, #312]	; (80234b0 <HAL_GPIO_Init+0x324>)
 8023376:	4293      	cmp	r3, r2
 8023378:	d013      	beq.n	80233a2 <HAL_GPIO_Init+0x216>
 802337a:	687b      	ldr	r3, [r7, #4]
 802337c:	4a4d      	ldr	r2, [pc, #308]	; (80234b4 <HAL_GPIO_Init+0x328>)
 802337e:	4293      	cmp	r3, r2
 8023380:	d00d      	beq.n	802339e <HAL_GPIO_Init+0x212>
 8023382:	687b      	ldr	r3, [r7, #4]
 8023384:	4a4c      	ldr	r2, [pc, #304]	; (80234b8 <HAL_GPIO_Init+0x32c>)
 8023386:	4293      	cmp	r3, r2
 8023388:	d007      	beq.n	802339a <HAL_GPIO_Init+0x20e>
 802338a:	687b      	ldr	r3, [r7, #4]
 802338c:	4a4b      	ldr	r2, [pc, #300]	; (80234bc <HAL_GPIO_Init+0x330>)
 802338e:	4293      	cmp	r3, r2
 8023390:	d101      	bne.n	8023396 <HAL_GPIO_Init+0x20a>
 8023392:	2307      	movs	r3, #7
 8023394:	e00e      	b.n	80233b4 <HAL_GPIO_Init+0x228>
 8023396:	2308      	movs	r3, #8
 8023398:	e00c      	b.n	80233b4 <HAL_GPIO_Init+0x228>
 802339a:	2306      	movs	r3, #6
 802339c:	e00a      	b.n	80233b4 <HAL_GPIO_Init+0x228>
 802339e:	2305      	movs	r3, #5
 80233a0:	e008      	b.n	80233b4 <HAL_GPIO_Init+0x228>
 80233a2:	2304      	movs	r3, #4
 80233a4:	e006      	b.n	80233b4 <HAL_GPIO_Init+0x228>
 80233a6:	2303      	movs	r3, #3
 80233a8:	e004      	b.n	80233b4 <HAL_GPIO_Init+0x228>
 80233aa:	2302      	movs	r3, #2
 80233ac:	e002      	b.n	80233b4 <HAL_GPIO_Init+0x228>
 80233ae:	2301      	movs	r3, #1
 80233b0:	e000      	b.n	80233b4 <HAL_GPIO_Init+0x228>
 80233b2:	2300      	movs	r3, #0
 80233b4:	69fa      	ldr	r2, [r7, #28]
 80233b6:	f002 0203 	and.w	r2, r2, #3
 80233ba:	0092      	lsls	r2, r2, #2
 80233bc:	4093      	lsls	r3, r2
 80233be:	69ba      	ldr	r2, [r7, #24]
 80233c0:	4313      	orrs	r3, r2
 80233c2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80233c4:	4935      	ldr	r1, [pc, #212]	; (802349c <HAL_GPIO_Init+0x310>)
 80233c6:	69fb      	ldr	r3, [r7, #28]
 80233c8:	089b      	lsrs	r3, r3, #2
 80233ca:	3302      	adds	r3, #2
 80233cc:	69ba      	ldr	r2, [r7, #24]
 80233ce:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80233d2:	4b3b      	ldr	r3, [pc, #236]	; (80234c0 <HAL_GPIO_Init+0x334>)
 80233d4:	689b      	ldr	r3, [r3, #8]
 80233d6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80233d8:	693b      	ldr	r3, [r7, #16]
 80233da:	43db      	mvns	r3, r3
 80233dc:	69ba      	ldr	r2, [r7, #24]
 80233de:	4013      	ands	r3, r2
 80233e0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80233e2:	683b      	ldr	r3, [r7, #0]
 80233e4:	685b      	ldr	r3, [r3, #4]
 80233e6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80233ea:	2b00      	cmp	r3, #0
 80233ec:	d003      	beq.n	80233f6 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80233ee:	69ba      	ldr	r2, [r7, #24]
 80233f0:	693b      	ldr	r3, [r7, #16]
 80233f2:	4313      	orrs	r3, r2
 80233f4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80233f6:	4a32      	ldr	r2, [pc, #200]	; (80234c0 <HAL_GPIO_Init+0x334>)
 80233f8:	69bb      	ldr	r3, [r7, #24]
 80233fa:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80233fc:	4b30      	ldr	r3, [pc, #192]	; (80234c0 <HAL_GPIO_Init+0x334>)
 80233fe:	68db      	ldr	r3, [r3, #12]
 8023400:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8023402:	693b      	ldr	r3, [r7, #16]
 8023404:	43db      	mvns	r3, r3
 8023406:	69ba      	ldr	r2, [r7, #24]
 8023408:	4013      	ands	r3, r2
 802340a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 802340c:	683b      	ldr	r3, [r7, #0]
 802340e:	685b      	ldr	r3, [r3, #4]
 8023410:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8023414:	2b00      	cmp	r3, #0
 8023416:	d003      	beq.n	8023420 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8023418:	69ba      	ldr	r2, [r7, #24]
 802341a:	693b      	ldr	r3, [r7, #16]
 802341c:	4313      	orrs	r3, r2
 802341e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8023420:	4a27      	ldr	r2, [pc, #156]	; (80234c0 <HAL_GPIO_Init+0x334>)
 8023422:	69bb      	ldr	r3, [r7, #24]
 8023424:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8023426:	4b26      	ldr	r3, [pc, #152]	; (80234c0 <HAL_GPIO_Init+0x334>)
 8023428:	685b      	ldr	r3, [r3, #4]
 802342a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 802342c:	693b      	ldr	r3, [r7, #16]
 802342e:	43db      	mvns	r3, r3
 8023430:	69ba      	ldr	r2, [r7, #24]
 8023432:	4013      	ands	r3, r2
 8023434:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8023436:	683b      	ldr	r3, [r7, #0]
 8023438:	685b      	ldr	r3, [r3, #4]
 802343a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 802343e:	2b00      	cmp	r3, #0
 8023440:	d003      	beq.n	802344a <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8023442:	69ba      	ldr	r2, [r7, #24]
 8023444:	693b      	ldr	r3, [r7, #16]
 8023446:	4313      	orrs	r3, r2
 8023448:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 802344a:	4a1d      	ldr	r2, [pc, #116]	; (80234c0 <HAL_GPIO_Init+0x334>)
 802344c:	69bb      	ldr	r3, [r7, #24]
 802344e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8023450:	4b1b      	ldr	r3, [pc, #108]	; (80234c0 <HAL_GPIO_Init+0x334>)
 8023452:	681b      	ldr	r3, [r3, #0]
 8023454:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8023456:	693b      	ldr	r3, [r7, #16]
 8023458:	43db      	mvns	r3, r3
 802345a:	69ba      	ldr	r2, [r7, #24]
 802345c:	4013      	ands	r3, r2
 802345e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8023460:	683b      	ldr	r3, [r7, #0]
 8023462:	685b      	ldr	r3, [r3, #4]
 8023464:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8023468:	2b00      	cmp	r3, #0
 802346a:	d003      	beq.n	8023474 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 802346c:	69ba      	ldr	r2, [r7, #24]
 802346e:	693b      	ldr	r3, [r7, #16]
 8023470:	4313      	orrs	r3, r2
 8023472:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8023474:	4a12      	ldr	r2, [pc, #72]	; (80234c0 <HAL_GPIO_Init+0x334>)
 8023476:	69bb      	ldr	r3, [r7, #24]
 8023478:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 802347a:	69fb      	ldr	r3, [r7, #28]
 802347c:	3301      	adds	r3, #1
 802347e:	61fb      	str	r3, [r7, #28]
 8023480:	69fb      	ldr	r3, [r7, #28]
 8023482:	2b0f      	cmp	r3, #15
 8023484:	f67f ae90 	bls.w	80231a8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8023488:	bf00      	nop
 802348a:	bf00      	nop
 802348c:	3724      	adds	r7, #36	; 0x24
 802348e:	46bd      	mov	sp, r7
 8023490:	f85d 7b04 	ldr.w	r7, [sp], #4
 8023494:	4770      	bx	lr
 8023496:	bf00      	nop
 8023498:	40023800 	.word	0x40023800
 802349c:	40013800 	.word	0x40013800
 80234a0:	40020000 	.word	0x40020000
 80234a4:	40020400 	.word	0x40020400
 80234a8:	40020800 	.word	0x40020800
 80234ac:	40020c00 	.word	0x40020c00
 80234b0:	40021000 	.word	0x40021000
 80234b4:	40021400 	.word	0x40021400
 80234b8:	40021800 	.word	0x40021800
 80234bc:	40021c00 	.word	0x40021c00
 80234c0:	40013c00 	.word	0x40013c00

080234c4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80234c4:	b480      	push	{r7}
 80234c6:	b083      	sub	sp, #12
 80234c8:	af00      	add	r7, sp, #0
 80234ca:	6078      	str	r0, [r7, #4]
 80234cc:	460b      	mov	r3, r1
 80234ce:	807b      	strh	r3, [r7, #2]
 80234d0:	4613      	mov	r3, r2
 80234d2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80234d4:	787b      	ldrb	r3, [r7, #1]
 80234d6:	2b00      	cmp	r3, #0
 80234d8:	d003      	beq.n	80234e2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80234da:	887a      	ldrh	r2, [r7, #2]
 80234dc:	687b      	ldr	r3, [r7, #4]
 80234de:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80234e0:	e003      	b.n	80234ea <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80234e2:	887b      	ldrh	r3, [r7, #2]
 80234e4:	041a      	lsls	r2, r3, #16
 80234e6:	687b      	ldr	r3, [r7, #4]
 80234e8:	619a      	str	r2, [r3, #24]
}
 80234ea:	bf00      	nop
 80234ec:	370c      	adds	r7, #12
 80234ee:	46bd      	mov	sp, r7
 80234f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80234f4:	4770      	bx	lr

080234f6 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80234f6:	b480      	push	{r7}
 80234f8:	b085      	sub	sp, #20
 80234fa:	af00      	add	r7, sp, #0
 80234fc:	6078      	str	r0, [r7, #4]
 80234fe:	460b      	mov	r3, r1
 8023500:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8023502:	687b      	ldr	r3, [r7, #4]
 8023504:	695b      	ldr	r3, [r3, #20]
 8023506:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8023508:	887a      	ldrh	r2, [r7, #2]
 802350a:	68fb      	ldr	r3, [r7, #12]
 802350c:	4013      	ands	r3, r2
 802350e:	041a      	lsls	r2, r3, #16
 8023510:	68fb      	ldr	r3, [r7, #12]
 8023512:	43d9      	mvns	r1, r3
 8023514:	887b      	ldrh	r3, [r7, #2]
 8023516:	400b      	ands	r3, r1
 8023518:	431a      	orrs	r2, r3
 802351a:	687b      	ldr	r3, [r7, #4]
 802351c:	619a      	str	r2, [r3, #24]
}
 802351e:	bf00      	nop
 8023520:	3714      	adds	r7, #20
 8023522:	46bd      	mov	sp, r7
 8023524:	f85d 7b04 	ldr.w	r7, [sp], #4
 8023528:	4770      	bx	lr
	...

0802352c <HAL_PWR_EnableBkUpAccess>:
  *         in backup domain protection disabling/enabling after programming the
  *         DBP bit" section.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 802352c:	b480      	push	{r7}
 802352e:	b083      	sub	sp, #12
 8023530:	af00      	add	r7, sp, #0
  __IO uint32_t dummyread;
  *(__IO uint32_t *) CR_DBP_BB = (uint32_t)ENABLE;
 8023532:	4b06      	ldr	r3, [pc, #24]	; (802354c <HAL_PWR_EnableBkUpAccess+0x20>)
 8023534:	2201      	movs	r2, #1
 8023536:	601a      	str	r2, [r3, #0]
  dummyread = PWR->CR;
 8023538:	4b05      	ldr	r3, [pc, #20]	; (8023550 <HAL_PWR_EnableBkUpAccess+0x24>)
 802353a:	681b      	ldr	r3, [r3, #0]
 802353c:	607b      	str	r3, [r7, #4]
  UNUSED(dummyread);
 802353e:	687b      	ldr	r3, [r7, #4]
}
 8023540:	bf00      	nop
 8023542:	370c      	adds	r7, #12
 8023544:	46bd      	mov	sp, r7
 8023546:	f85d 7b04 	ldr.w	r7, [sp], #4
 802354a:	4770      	bx	lr
 802354c:	420e0020 	.word	0x420e0020
 8023550:	40007000 	.word	0x40007000

08023554 <HAL_PWR_DisableBkUpAccess>:
  *         in backup domain protection disabling/enabling after programming the
  *         DBP bit" section.
  * @retval None
  */
void HAL_PWR_DisableBkUpAccess(void)
{
 8023554:	b480      	push	{r7}
 8023556:	b083      	sub	sp, #12
 8023558:	af00      	add	r7, sp, #0
  __IO uint32_t dummyread;
  *(__IO uint32_t *) CR_DBP_BB = (uint32_t)DISABLE;
 802355a:	4b06      	ldr	r3, [pc, #24]	; (8023574 <HAL_PWR_DisableBkUpAccess+0x20>)
 802355c:	2200      	movs	r2, #0
 802355e:	601a      	str	r2, [r3, #0]
  dummyread = PWR->CR;
 8023560:	4b05      	ldr	r3, [pc, #20]	; (8023578 <HAL_PWR_DisableBkUpAccess+0x24>)
 8023562:	681b      	ldr	r3, [r3, #0]
 8023564:	607b      	str	r3, [r7, #4]
  UNUSED(dummyread);
 8023566:	687b      	ldr	r3, [r7, #4]
}
 8023568:	bf00      	nop
 802356a:	370c      	adds	r7, #12
 802356c:	46bd      	mov	sp, r7
 802356e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8023572:	4770      	bx	lr
 8023574:	420e0020 	.word	0x420e0020
 8023578:	40007000 	.word	0x40007000

0802357c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 802357c:	b580      	push	{r7, lr}
 802357e:	b086      	sub	sp, #24
 8023580:	af00      	add	r7, sp, #0
 8023582:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8023584:	687b      	ldr	r3, [r7, #4]
 8023586:	2b00      	cmp	r3, #0
 8023588:	d101      	bne.n	802358e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 802358a:	2301      	movs	r3, #1
 802358c:	e267      	b.n	8023a5e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 802358e:	687b      	ldr	r3, [r7, #4]
 8023590:	681b      	ldr	r3, [r3, #0]
 8023592:	f003 0301 	and.w	r3, r3, #1
 8023596:	2b00      	cmp	r3, #0
 8023598:	d075      	beq.n	8023686 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 802359a:	4b88      	ldr	r3, [pc, #544]	; (80237bc <HAL_RCC_OscConfig+0x240>)
 802359c:	689b      	ldr	r3, [r3, #8]
 802359e:	f003 030c 	and.w	r3, r3, #12
 80235a2:	2b04      	cmp	r3, #4
 80235a4:	d00c      	beq.n	80235c0 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80235a6:	4b85      	ldr	r3, [pc, #532]	; (80237bc <HAL_RCC_OscConfig+0x240>)
 80235a8:	689b      	ldr	r3, [r3, #8]
 80235aa:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80235ae:	2b08      	cmp	r3, #8
 80235b0:	d112      	bne.n	80235d8 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80235b2:	4b82      	ldr	r3, [pc, #520]	; (80237bc <HAL_RCC_OscConfig+0x240>)
 80235b4:	685b      	ldr	r3, [r3, #4]
 80235b6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80235ba:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80235be:	d10b      	bne.n	80235d8 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80235c0:	4b7e      	ldr	r3, [pc, #504]	; (80237bc <HAL_RCC_OscConfig+0x240>)
 80235c2:	681b      	ldr	r3, [r3, #0]
 80235c4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80235c8:	2b00      	cmp	r3, #0
 80235ca:	d05b      	beq.n	8023684 <HAL_RCC_OscConfig+0x108>
 80235cc:	687b      	ldr	r3, [r7, #4]
 80235ce:	685b      	ldr	r3, [r3, #4]
 80235d0:	2b00      	cmp	r3, #0
 80235d2:	d157      	bne.n	8023684 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80235d4:	2301      	movs	r3, #1
 80235d6:	e242      	b.n	8023a5e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80235d8:	687b      	ldr	r3, [r7, #4]
 80235da:	685b      	ldr	r3, [r3, #4]
 80235dc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80235e0:	d106      	bne.n	80235f0 <HAL_RCC_OscConfig+0x74>
 80235e2:	4b76      	ldr	r3, [pc, #472]	; (80237bc <HAL_RCC_OscConfig+0x240>)
 80235e4:	681b      	ldr	r3, [r3, #0]
 80235e6:	4a75      	ldr	r2, [pc, #468]	; (80237bc <HAL_RCC_OscConfig+0x240>)
 80235e8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80235ec:	6013      	str	r3, [r2, #0]
 80235ee:	e01d      	b.n	802362c <HAL_RCC_OscConfig+0xb0>
 80235f0:	687b      	ldr	r3, [r7, #4]
 80235f2:	685b      	ldr	r3, [r3, #4]
 80235f4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80235f8:	d10c      	bne.n	8023614 <HAL_RCC_OscConfig+0x98>
 80235fa:	4b70      	ldr	r3, [pc, #448]	; (80237bc <HAL_RCC_OscConfig+0x240>)
 80235fc:	681b      	ldr	r3, [r3, #0]
 80235fe:	4a6f      	ldr	r2, [pc, #444]	; (80237bc <HAL_RCC_OscConfig+0x240>)
 8023600:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8023604:	6013      	str	r3, [r2, #0]
 8023606:	4b6d      	ldr	r3, [pc, #436]	; (80237bc <HAL_RCC_OscConfig+0x240>)
 8023608:	681b      	ldr	r3, [r3, #0]
 802360a:	4a6c      	ldr	r2, [pc, #432]	; (80237bc <HAL_RCC_OscConfig+0x240>)
 802360c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8023610:	6013      	str	r3, [r2, #0]
 8023612:	e00b      	b.n	802362c <HAL_RCC_OscConfig+0xb0>
 8023614:	4b69      	ldr	r3, [pc, #420]	; (80237bc <HAL_RCC_OscConfig+0x240>)
 8023616:	681b      	ldr	r3, [r3, #0]
 8023618:	4a68      	ldr	r2, [pc, #416]	; (80237bc <HAL_RCC_OscConfig+0x240>)
 802361a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 802361e:	6013      	str	r3, [r2, #0]
 8023620:	4b66      	ldr	r3, [pc, #408]	; (80237bc <HAL_RCC_OscConfig+0x240>)
 8023622:	681b      	ldr	r3, [r3, #0]
 8023624:	4a65      	ldr	r2, [pc, #404]	; (80237bc <HAL_RCC_OscConfig+0x240>)
 8023626:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 802362a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 802362c:	687b      	ldr	r3, [r7, #4]
 802362e:	685b      	ldr	r3, [r3, #4]
 8023630:	2b00      	cmp	r3, #0
 8023632:	d013      	beq.n	802365c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8023634:	f7fe fa48 	bl	8021ac8 <HAL_GetTick>
 8023638:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 802363a:	e008      	b.n	802364e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 802363c:	f7fe fa44 	bl	8021ac8 <HAL_GetTick>
 8023640:	4602      	mov	r2, r0
 8023642:	693b      	ldr	r3, [r7, #16]
 8023644:	1ad3      	subs	r3, r2, r3
 8023646:	2b64      	cmp	r3, #100	; 0x64
 8023648:	d901      	bls.n	802364e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 802364a:	2303      	movs	r3, #3
 802364c:	e207      	b.n	8023a5e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 802364e:	4b5b      	ldr	r3, [pc, #364]	; (80237bc <HAL_RCC_OscConfig+0x240>)
 8023650:	681b      	ldr	r3, [r3, #0]
 8023652:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8023656:	2b00      	cmp	r3, #0
 8023658:	d0f0      	beq.n	802363c <HAL_RCC_OscConfig+0xc0>
 802365a:	e014      	b.n	8023686 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 802365c:	f7fe fa34 	bl	8021ac8 <HAL_GetTick>
 8023660:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8023662:	e008      	b.n	8023676 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8023664:	f7fe fa30 	bl	8021ac8 <HAL_GetTick>
 8023668:	4602      	mov	r2, r0
 802366a:	693b      	ldr	r3, [r7, #16]
 802366c:	1ad3      	subs	r3, r2, r3
 802366e:	2b64      	cmp	r3, #100	; 0x64
 8023670:	d901      	bls.n	8023676 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8023672:	2303      	movs	r3, #3
 8023674:	e1f3      	b.n	8023a5e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8023676:	4b51      	ldr	r3, [pc, #324]	; (80237bc <HAL_RCC_OscConfig+0x240>)
 8023678:	681b      	ldr	r3, [r3, #0]
 802367a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 802367e:	2b00      	cmp	r3, #0
 8023680:	d1f0      	bne.n	8023664 <HAL_RCC_OscConfig+0xe8>
 8023682:	e000      	b.n	8023686 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8023684:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8023686:	687b      	ldr	r3, [r7, #4]
 8023688:	681b      	ldr	r3, [r3, #0]
 802368a:	f003 0302 	and.w	r3, r3, #2
 802368e:	2b00      	cmp	r3, #0
 8023690:	d063      	beq.n	802375a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8023692:	4b4a      	ldr	r3, [pc, #296]	; (80237bc <HAL_RCC_OscConfig+0x240>)
 8023694:	689b      	ldr	r3, [r3, #8]
 8023696:	f003 030c 	and.w	r3, r3, #12
 802369a:	2b00      	cmp	r3, #0
 802369c:	d00b      	beq.n	80236b6 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 802369e:	4b47      	ldr	r3, [pc, #284]	; (80237bc <HAL_RCC_OscConfig+0x240>)
 80236a0:	689b      	ldr	r3, [r3, #8]
 80236a2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80236a6:	2b08      	cmp	r3, #8
 80236a8:	d11c      	bne.n	80236e4 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80236aa:	4b44      	ldr	r3, [pc, #272]	; (80237bc <HAL_RCC_OscConfig+0x240>)
 80236ac:	685b      	ldr	r3, [r3, #4]
 80236ae:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80236b2:	2b00      	cmp	r3, #0
 80236b4:	d116      	bne.n	80236e4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80236b6:	4b41      	ldr	r3, [pc, #260]	; (80237bc <HAL_RCC_OscConfig+0x240>)
 80236b8:	681b      	ldr	r3, [r3, #0]
 80236ba:	f003 0302 	and.w	r3, r3, #2
 80236be:	2b00      	cmp	r3, #0
 80236c0:	d005      	beq.n	80236ce <HAL_RCC_OscConfig+0x152>
 80236c2:	687b      	ldr	r3, [r7, #4]
 80236c4:	68db      	ldr	r3, [r3, #12]
 80236c6:	2b01      	cmp	r3, #1
 80236c8:	d001      	beq.n	80236ce <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80236ca:	2301      	movs	r3, #1
 80236cc:	e1c7      	b.n	8023a5e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80236ce:	4b3b      	ldr	r3, [pc, #236]	; (80237bc <HAL_RCC_OscConfig+0x240>)
 80236d0:	681b      	ldr	r3, [r3, #0]
 80236d2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80236d6:	687b      	ldr	r3, [r7, #4]
 80236d8:	691b      	ldr	r3, [r3, #16]
 80236da:	00db      	lsls	r3, r3, #3
 80236dc:	4937      	ldr	r1, [pc, #220]	; (80237bc <HAL_RCC_OscConfig+0x240>)
 80236de:	4313      	orrs	r3, r2
 80236e0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80236e2:	e03a      	b.n	802375a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80236e4:	687b      	ldr	r3, [r7, #4]
 80236e6:	68db      	ldr	r3, [r3, #12]
 80236e8:	2b00      	cmp	r3, #0
 80236ea:	d020      	beq.n	802372e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80236ec:	4b34      	ldr	r3, [pc, #208]	; (80237c0 <HAL_RCC_OscConfig+0x244>)
 80236ee:	2201      	movs	r2, #1
 80236f0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80236f2:	f7fe f9e9 	bl	8021ac8 <HAL_GetTick>
 80236f6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80236f8:	e008      	b.n	802370c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80236fa:	f7fe f9e5 	bl	8021ac8 <HAL_GetTick>
 80236fe:	4602      	mov	r2, r0
 8023700:	693b      	ldr	r3, [r7, #16]
 8023702:	1ad3      	subs	r3, r2, r3
 8023704:	2b02      	cmp	r3, #2
 8023706:	d901      	bls.n	802370c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8023708:	2303      	movs	r3, #3
 802370a:	e1a8      	b.n	8023a5e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 802370c:	4b2b      	ldr	r3, [pc, #172]	; (80237bc <HAL_RCC_OscConfig+0x240>)
 802370e:	681b      	ldr	r3, [r3, #0]
 8023710:	f003 0302 	and.w	r3, r3, #2
 8023714:	2b00      	cmp	r3, #0
 8023716:	d0f0      	beq.n	80236fa <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8023718:	4b28      	ldr	r3, [pc, #160]	; (80237bc <HAL_RCC_OscConfig+0x240>)
 802371a:	681b      	ldr	r3, [r3, #0]
 802371c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8023720:	687b      	ldr	r3, [r7, #4]
 8023722:	691b      	ldr	r3, [r3, #16]
 8023724:	00db      	lsls	r3, r3, #3
 8023726:	4925      	ldr	r1, [pc, #148]	; (80237bc <HAL_RCC_OscConfig+0x240>)
 8023728:	4313      	orrs	r3, r2
 802372a:	600b      	str	r3, [r1, #0]
 802372c:	e015      	b.n	802375a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 802372e:	4b24      	ldr	r3, [pc, #144]	; (80237c0 <HAL_RCC_OscConfig+0x244>)
 8023730:	2200      	movs	r2, #0
 8023732:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8023734:	f7fe f9c8 	bl	8021ac8 <HAL_GetTick>
 8023738:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 802373a:	e008      	b.n	802374e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 802373c:	f7fe f9c4 	bl	8021ac8 <HAL_GetTick>
 8023740:	4602      	mov	r2, r0
 8023742:	693b      	ldr	r3, [r7, #16]
 8023744:	1ad3      	subs	r3, r2, r3
 8023746:	2b02      	cmp	r3, #2
 8023748:	d901      	bls.n	802374e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 802374a:	2303      	movs	r3, #3
 802374c:	e187      	b.n	8023a5e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 802374e:	4b1b      	ldr	r3, [pc, #108]	; (80237bc <HAL_RCC_OscConfig+0x240>)
 8023750:	681b      	ldr	r3, [r3, #0]
 8023752:	f003 0302 	and.w	r3, r3, #2
 8023756:	2b00      	cmp	r3, #0
 8023758:	d1f0      	bne.n	802373c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 802375a:	687b      	ldr	r3, [r7, #4]
 802375c:	681b      	ldr	r3, [r3, #0]
 802375e:	f003 0308 	and.w	r3, r3, #8
 8023762:	2b00      	cmp	r3, #0
 8023764:	d036      	beq.n	80237d4 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8023766:	687b      	ldr	r3, [r7, #4]
 8023768:	695b      	ldr	r3, [r3, #20]
 802376a:	2b00      	cmp	r3, #0
 802376c:	d016      	beq.n	802379c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 802376e:	4b15      	ldr	r3, [pc, #84]	; (80237c4 <HAL_RCC_OscConfig+0x248>)
 8023770:	2201      	movs	r2, #1
 8023772:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8023774:	f7fe f9a8 	bl	8021ac8 <HAL_GetTick>
 8023778:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 802377a:	e008      	b.n	802378e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 802377c:	f7fe f9a4 	bl	8021ac8 <HAL_GetTick>
 8023780:	4602      	mov	r2, r0
 8023782:	693b      	ldr	r3, [r7, #16]
 8023784:	1ad3      	subs	r3, r2, r3
 8023786:	2b02      	cmp	r3, #2
 8023788:	d901      	bls.n	802378e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 802378a:	2303      	movs	r3, #3
 802378c:	e167      	b.n	8023a5e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 802378e:	4b0b      	ldr	r3, [pc, #44]	; (80237bc <HAL_RCC_OscConfig+0x240>)
 8023790:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8023792:	f003 0302 	and.w	r3, r3, #2
 8023796:	2b00      	cmp	r3, #0
 8023798:	d0f0      	beq.n	802377c <HAL_RCC_OscConfig+0x200>
 802379a:	e01b      	b.n	80237d4 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 802379c:	4b09      	ldr	r3, [pc, #36]	; (80237c4 <HAL_RCC_OscConfig+0x248>)
 802379e:	2200      	movs	r2, #0
 80237a0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80237a2:	f7fe f991 	bl	8021ac8 <HAL_GetTick>
 80237a6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80237a8:	e00e      	b.n	80237c8 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80237aa:	f7fe f98d 	bl	8021ac8 <HAL_GetTick>
 80237ae:	4602      	mov	r2, r0
 80237b0:	693b      	ldr	r3, [r7, #16]
 80237b2:	1ad3      	subs	r3, r2, r3
 80237b4:	2b02      	cmp	r3, #2
 80237b6:	d907      	bls.n	80237c8 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80237b8:	2303      	movs	r3, #3
 80237ba:	e150      	b.n	8023a5e <HAL_RCC_OscConfig+0x4e2>
 80237bc:	40023800 	.word	0x40023800
 80237c0:	42470000 	.word	0x42470000
 80237c4:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80237c8:	4b88      	ldr	r3, [pc, #544]	; (80239ec <HAL_RCC_OscConfig+0x470>)
 80237ca:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80237cc:	f003 0302 	and.w	r3, r3, #2
 80237d0:	2b00      	cmp	r3, #0
 80237d2:	d1ea      	bne.n	80237aa <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80237d4:	687b      	ldr	r3, [r7, #4]
 80237d6:	681b      	ldr	r3, [r3, #0]
 80237d8:	f003 0304 	and.w	r3, r3, #4
 80237dc:	2b00      	cmp	r3, #0
 80237de:	f000 8097 	beq.w	8023910 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80237e2:	2300      	movs	r3, #0
 80237e4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80237e6:	4b81      	ldr	r3, [pc, #516]	; (80239ec <HAL_RCC_OscConfig+0x470>)
 80237e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80237ea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80237ee:	2b00      	cmp	r3, #0
 80237f0:	d10f      	bne.n	8023812 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80237f2:	2300      	movs	r3, #0
 80237f4:	60bb      	str	r3, [r7, #8]
 80237f6:	4b7d      	ldr	r3, [pc, #500]	; (80239ec <HAL_RCC_OscConfig+0x470>)
 80237f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80237fa:	4a7c      	ldr	r2, [pc, #496]	; (80239ec <HAL_RCC_OscConfig+0x470>)
 80237fc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8023800:	6413      	str	r3, [r2, #64]	; 0x40
 8023802:	4b7a      	ldr	r3, [pc, #488]	; (80239ec <HAL_RCC_OscConfig+0x470>)
 8023804:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8023806:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 802380a:	60bb      	str	r3, [r7, #8]
 802380c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 802380e:	2301      	movs	r3, #1
 8023810:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8023812:	4b77      	ldr	r3, [pc, #476]	; (80239f0 <HAL_RCC_OscConfig+0x474>)
 8023814:	681b      	ldr	r3, [r3, #0]
 8023816:	f403 7380 	and.w	r3, r3, #256	; 0x100
 802381a:	2b00      	cmp	r3, #0
 802381c:	d118      	bne.n	8023850 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 802381e:	4b74      	ldr	r3, [pc, #464]	; (80239f0 <HAL_RCC_OscConfig+0x474>)
 8023820:	681b      	ldr	r3, [r3, #0]
 8023822:	4a73      	ldr	r2, [pc, #460]	; (80239f0 <HAL_RCC_OscConfig+0x474>)
 8023824:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8023828:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 802382a:	f7fe f94d 	bl	8021ac8 <HAL_GetTick>
 802382e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8023830:	e008      	b.n	8023844 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8023832:	f7fe f949 	bl	8021ac8 <HAL_GetTick>
 8023836:	4602      	mov	r2, r0
 8023838:	693b      	ldr	r3, [r7, #16]
 802383a:	1ad3      	subs	r3, r2, r3
 802383c:	2b02      	cmp	r3, #2
 802383e:	d901      	bls.n	8023844 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8023840:	2303      	movs	r3, #3
 8023842:	e10c      	b.n	8023a5e <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8023844:	4b6a      	ldr	r3, [pc, #424]	; (80239f0 <HAL_RCC_OscConfig+0x474>)
 8023846:	681b      	ldr	r3, [r3, #0]
 8023848:	f403 7380 	and.w	r3, r3, #256	; 0x100
 802384c:	2b00      	cmp	r3, #0
 802384e:	d0f0      	beq.n	8023832 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8023850:	687b      	ldr	r3, [r7, #4]
 8023852:	689b      	ldr	r3, [r3, #8]
 8023854:	2b01      	cmp	r3, #1
 8023856:	d106      	bne.n	8023866 <HAL_RCC_OscConfig+0x2ea>
 8023858:	4b64      	ldr	r3, [pc, #400]	; (80239ec <HAL_RCC_OscConfig+0x470>)
 802385a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 802385c:	4a63      	ldr	r2, [pc, #396]	; (80239ec <HAL_RCC_OscConfig+0x470>)
 802385e:	f043 0301 	orr.w	r3, r3, #1
 8023862:	6713      	str	r3, [r2, #112]	; 0x70
 8023864:	e01c      	b.n	80238a0 <HAL_RCC_OscConfig+0x324>
 8023866:	687b      	ldr	r3, [r7, #4]
 8023868:	689b      	ldr	r3, [r3, #8]
 802386a:	2b05      	cmp	r3, #5
 802386c:	d10c      	bne.n	8023888 <HAL_RCC_OscConfig+0x30c>
 802386e:	4b5f      	ldr	r3, [pc, #380]	; (80239ec <HAL_RCC_OscConfig+0x470>)
 8023870:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8023872:	4a5e      	ldr	r2, [pc, #376]	; (80239ec <HAL_RCC_OscConfig+0x470>)
 8023874:	f043 0304 	orr.w	r3, r3, #4
 8023878:	6713      	str	r3, [r2, #112]	; 0x70
 802387a:	4b5c      	ldr	r3, [pc, #368]	; (80239ec <HAL_RCC_OscConfig+0x470>)
 802387c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 802387e:	4a5b      	ldr	r2, [pc, #364]	; (80239ec <HAL_RCC_OscConfig+0x470>)
 8023880:	f043 0301 	orr.w	r3, r3, #1
 8023884:	6713      	str	r3, [r2, #112]	; 0x70
 8023886:	e00b      	b.n	80238a0 <HAL_RCC_OscConfig+0x324>
 8023888:	4b58      	ldr	r3, [pc, #352]	; (80239ec <HAL_RCC_OscConfig+0x470>)
 802388a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 802388c:	4a57      	ldr	r2, [pc, #348]	; (80239ec <HAL_RCC_OscConfig+0x470>)
 802388e:	f023 0301 	bic.w	r3, r3, #1
 8023892:	6713      	str	r3, [r2, #112]	; 0x70
 8023894:	4b55      	ldr	r3, [pc, #340]	; (80239ec <HAL_RCC_OscConfig+0x470>)
 8023896:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8023898:	4a54      	ldr	r2, [pc, #336]	; (80239ec <HAL_RCC_OscConfig+0x470>)
 802389a:	f023 0304 	bic.w	r3, r3, #4
 802389e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80238a0:	687b      	ldr	r3, [r7, #4]
 80238a2:	689b      	ldr	r3, [r3, #8]
 80238a4:	2b00      	cmp	r3, #0
 80238a6:	d015      	beq.n	80238d4 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80238a8:	f7fe f90e 	bl	8021ac8 <HAL_GetTick>
 80238ac:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80238ae:	e00a      	b.n	80238c6 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80238b0:	f7fe f90a 	bl	8021ac8 <HAL_GetTick>
 80238b4:	4602      	mov	r2, r0
 80238b6:	693b      	ldr	r3, [r7, #16]
 80238b8:	1ad3      	subs	r3, r2, r3
 80238ba:	f241 3288 	movw	r2, #5000	; 0x1388
 80238be:	4293      	cmp	r3, r2
 80238c0:	d901      	bls.n	80238c6 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80238c2:	2303      	movs	r3, #3
 80238c4:	e0cb      	b.n	8023a5e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80238c6:	4b49      	ldr	r3, [pc, #292]	; (80239ec <HAL_RCC_OscConfig+0x470>)
 80238c8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80238ca:	f003 0302 	and.w	r3, r3, #2
 80238ce:	2b00      	cmp	r3, #0
 80238d0:	d0ee      	beq.n	80238b0 <HAL_RCC_OscConfig+0x334>
 80238d2:	e014      	b.n	80238fe <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80238d4:	f7fe f8f8 	bl	8021ac8 <HAL_GetTick>
 80238d8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80238da:	e00a      	b.n	80238f2 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80238dc:	f7fe f8f4 	bl	8021ac8 <HAL_GetTick>
 80238e0:	4602      	mov	r2, r0
 80238e2:	693b      	ldr	r3, [r7, #16]
 80238e4:	1ad3      	subs	r3, r2, r3
 80238e6:	f241 3288 	movw	r2, #5000	; 0x1388
 80238ea:	4293      	cmp	r3, r2
 80238ec:	d901      	bls.n	80238f2 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80238ee:	2303      	movs	r3, #3
 80238f0:	e0b5      	b.n	8023a5e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80238f2:	4b3e      	ldr	r3, [pc, #248]	; (80239ec <HAL_RCC_OscConfig+0x470>)
 80238f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80238f6:	f003 0302 	and.w	r3, r3, #2
 80238fa:	2b00      	cmp	r3, #0
 80238fc:	d1ee      	bne.n	80238dc <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80238fe:	7dfb      	ldrb	r3, [r7, #23]
 8023900:	2b01      	cmp	r3, #1
 8023902:	d105      	bne.n	8023910 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8023904:	4b39      	ldr	r3, [pc, #228]	; (80239ec <HAL_RCC_OscConfig+0x470>)
 8023906:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8023908:	4a38      	ldr	r2, [pc, #224]	; (80239ec <HAL_RCC_OscConfig+0x470>)
 802390a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 802390e:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8023910:	687b      	ldr	r3, [r7, #4]
 8023912:	699b      	ldr	r3, [r3, #24]
 8023914:	2b00      	cmp	r3, #0
 8023916:	f000 80a1 	beq.w	8023a5c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 802391a:	4b34      	ldr	r3, [pc, #208]	; (80239ec <HAL_RCC_OscConfig+0x470>)
 802391c:	689b      	ldr	r3, [r3, #8]
 802391e:	f003 030c 	and.w	r3, r3, #12
 8023922:	2b08      	cmp	r3, #8
 8023924:	d05c      	beq.n	80239e0 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8023926:	687b      	ldr	r3, [r7, #4]
 8023928:	699b      	ldr	r3, [r3, #24]
 802392a:	2b02      	cmp	r3, #2
 802392c:	d141      	bne.n	80239b2 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 802392e:	4b31      	ldr	r3, [pc, #196]	; (80239f4 <HAL_RCC_OscConfig+0x478>)
 8023930:	2200      	movs	r2, #0
 8023932:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8023934:	f7fe f8c8 	bl	8021ac8 <HAL_GetTick>
 8023938:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 802393a:	e008      	b.n	802394e <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 802393c:	f7fe f8c4 	bl	8021ac8 <HAL_GetTick>
 8023940:	4602      	mov	r2, r0
 8023942:	693b      	ldr	r3, [r7, #16]
 8023944:	1ad3      	subs	r3, r2, r3
 8023946:	2b02      	cmp	r3, #2
 8023948:	d901      	bls.n	802394e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 802394a:	2303      	movs	r3, #3
 802394c:	e087      	b.n	8023a5e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 802394e:	4b27      	ldr	r3, [pc, #156]	; (80239ec <HAL_RCC_OscConfig+0x470>)
 8023950:	681b      	ldr	r3, [r3, #0]
 8023952:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8023956:	2b00      	cmp	r3, #0
 8023958:	d1f0      	bne.n	802393c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 802395a:	687b      	ldr	r3, [r7, #4]
 802395c:	69da      	ldr	r2, [r3, #28]
 802395e:	687b      	ldr	r3, [r7, #4]
 8023960:	6a1b      	ldr	r3, [r3, #32]
 8023962:	431a      	orrs	r2, r3
 8023964:	687b      	ldr	r3, [r7, #4]
 8023966:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8023968:	019b      	lsls	r3, r3, #6
 802396a:	431a      	orrs	r2, r3
 802396c:	687b      	ldr	r3, [r7, #4]
 802396e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8023970:	085b      	lsrs	r3, r3, #1
 8023972:	3b01      	subs	r3, #1
 8023974:	041b      	lsls	r3, r3, #16
 8023976:	431a      	orrs	r2, r3
 8023978:	687b      	ldr	r3, [r7, #4]
 802397a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 802397c:	061b      	lsls	r3, r3, #24
 802397e:	491b      	ldr	r1, [pc, #108]	; (80239ec <HAL_RCC_OscConfig+0x470>)
 8023980:	4313      	orrs	r3, r2
 8023982:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8023984:	4b1b      	ldr	r3, [pc, #108]	; (80239f4 <HAL_RCC_OscConfig+0x478>)
 8023986:	2201      	movs	r2, #1
 8023988:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 802398a:	f7fe f89d 	bl	8021ac8 <HAL_GetTick>
 802398e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8023990:	e008      	b.n	80239a4 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8023992:	f7fe f899 	bl	8021ac8 <HAL_GetTick>
 8023996:	4602      	mov	r2, r0
 8023998:	693b      	ldr	r3, [r7, #16]
 802399a:	1ad3      	subs	r3, r2, r3
 802399c:	2b02      	cmp	r3, #2
 802399e:	d901      	bls.n	80239a4 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80239a0:	2303      	movs	r3, #3
 80239a2:	e05c      	b.n	8023a5e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80239a4:	4b11      	ldr	r3, [pc, #68]	; (80239ec <HAL_RCC_OscConfig+0x470>)
 80239a6:	681b      	ldr	r3, [r3, #0]
 80239a8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80239ac:	2b00      	cmp	r3, #0
 80239ae:	d0f0      	beq.n	8023992 <HAL_RCC_OscConfig+0x416>
 80239b0:	e054      	b.n	8023a5c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80239b2:	4b10      	ldr	r3, [pc, #64]	; (80239f4 <HAL_RCC_OscConfig+0x478>)
 80239b4:	2200      	movs	r2, #0
 80239b6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80239b8:	f7fe f886 	bl	8021ac8 <HAL_GetTick>
 80239bc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80239be:	e008      	b.n	80239d2 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80239c0:	f7fe f882 	bl	8021ac8 <HAL_GetTick>
 80239c4:	4602      	mov	r2, r0
 80239c6:	693b      	ldr	r3, [r7, #16]
 80239c8:	1ad3      	subs	r3, r2, r3
 80239ca:	2b02      	cmp	r3, #2
 80239cc:	d901      	bls.n	80239d2 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80239ce:	2303      	movs	r3, #3
 80239d0:	e045      	b.n	8023a5e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80239d2:	4b06      	ldr	r3, [pc, #24]	; (80239ec <HAL_RCC_OscConfig+0x470>)
 80239d4:	681b      	ldr	r3, [r3, #0]
 80239d6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80239da:	2b00      	cmp	r3, #0
 80239dc:	d1f0      	bne.n	80239c0 <HAL_RCC_OscConfig+0x444>
 80239de:	e03d      	b.n	8023a5c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80239e0:	687b      	ldr	r3, [r7, #4]
 80239e2:	699b      	ldr	r3, [r3, #24]
 80239e4:	2b01      	cmp	r3, #1
 80239e6:	d107      	bne.n	80239f8 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80239e8:	2301      	movs	r3, #1
 80239ea:	e038      	b.n	8023a5e <HAL_RCC_OscConfig+0x4e2>
 80239ec:	40023800 	.word	0x40023800
 80239f0:	40007000 	.word	0x40007000
 80239f4:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80239f8:	4b1b      	ldr	r3, [pc, #108]	; (8023a68 <HAL_RCC_OscConfig+0x4ec>)
 80239fa:	685b      	ldr	r3, [r3, #4]
 80239fc:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80239fe:	687b      	ldr	r3, [r7, #4]
 8023a00:	699b      	ldr	r3, [r3, #24]
 8023a02:	2b01      	cmp	r3, #1
 8023a04:	d028      	beq.n	8023a58 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8023a06:	68fb      	ldr	r3, [r7, #12]
 8023a08:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8023a0c:	687b      	ldr	r3, [r7, #4]
 8023a0e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8023a10:	429a      	cmp	r2, r3
 8023a12:	d121      	bne.n	8023a58 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8023a14:	68fb      	ldr	r3, [r7, #12]
 8023a16:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8023a1a:	687b      	ldr	r3, [r7, #4]
 8023a1c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8023a1e:	429a      	cmp	r2, r3
 8023a20:	d11a      	bne.n	8023a58 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8023a22:	68fa      	ldr	r2, [r7, #12]
 8023a24:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8023a28:	4013      	ands	r3, r2
 8023a2a:	687a      	ldr	r2, [r7, #4]
 8023a2c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8023a2e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8023a30:	4293      	cmp	r3, r2
 8023a32:	d111      	bne.n	8023a58 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8023a34:	68fb      	ldr	r3, [r7, #12]
 8023a36:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8023a3a:	687b      	ldr	r3, [r7, #4]
 8023a3c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8023a3e:	085b      	lsrs	r3, r3, #1
 8023a40:	3b01      	subs	r3, #1
 8023a42:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8023a44:	429a      	cmp	r2, r3
 8023a46:	d107      	bne.n	8023a58 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8023a48:	68fb      	ldr	r3, [r7, #12]
 8023a4a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8023a4e:	687b      	ldr	r3, [r7, #4]
 8023a50:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8023a52:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8023a54:	429a      	cmp	r2, r3
 8023a56:	d001      	beq.n	8023a5c <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8023a58:	2301      	movs	r3, #1
 8023a5a:	e000      	b.n	8023a5e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8023a5c:	2300      	movs	r3, #0
}
 8023a5e:	4618      	mov	r0, r3
 8023a60:	3718      	adds	r7, #24
 8023a62:	46bd      	mov	sp, r7
 8023a64:	bd80      	pop	{r7, pc}
 8023a66:	bf00      	nop
 8023a68:	40023800 	.word	0x40023800

08023a6c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8023a6c:	b580      	push	{r7, lr}
 8023a6e:	b084      	sub	sp, #16
 8023a70:	af00      	add	r7, sp, #0
 8023a72:	6078      	str	r0, [r7, #4]
 8023a74:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8023a76:	687b      	ldr	r3, [r7, #4]
 8023a78:	2b00      	cmp	r3, #0
 8023a7a:	d101      	bne.n	8023a80 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8023a7c:	2301      	movs	r3, #1
 8023a7e:	e0cc      	b.n	8023c1a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8023a80:	4b68      	ldr	r3, [pc, #416]	; (8023c24 <HAL_RCC_ClockConfig+0x1b8>)
 8023a82:	681b      	ldr	r3, [r3, #0]
 8023a84:	f003 0307 	and.w	r3, r3, #7
 8023a88:	683a      	ldr	r2, [r7, #0]
 8023a8a:	429a      	cmp	r2, r3
 8023a8c:	d90c      	bls.n	8023aa8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8023a8e:	4b65      	ldr	r3, [pc, #404]	; (8023c24 <HAL_RCC_ClockConfig+0x1b8>)
 8023a90:	683a      	ldr	r2, [r7, #0]
 8023a92:	b2d2      	uxtb	r2, r2
 8023a94:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8023a96:	4b63      	ldr	r3, [pc, #396]	; (8023c24 <HAL_RCC_ClockConfig+0x1b8>)
 8023a98:	681b      	ldr	r3, [r3, #0]
 8023a9a:	f003 0307 	and.w	r3, r3, #7
 8023a9e:	683a      	ldr	r2, [r7, #0]
 8023aa0:	429a      	cmp	r2, r3
 8023aa2:	d001      	beq.n	8023aa8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8023aa4:	2301      	movs	r3, #1
 8023aa6:	e0b8      	b.n	8023c1a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8023aa8:	687b      	ldr	r3, [r7, #4]
 8023aaa:	681b      	ldr	r3, [r3, #0]
 8023aac:	f003 0302 	and.w	r3, r3, #2
 8023ab0:	2b00      	cmp	r3, #0
 8023ab2:	d020      	beq.n	8023af6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8023ab4:	687b      	ldr	r3, [r7, #4]
 8023ab6:	681b      	ldr	r3, [r3, #0]
 8023ab8:	f003 0304 	and.w	r3, r3, #4
 8023abc:	2b00      	cmp	r3, #0
 8023abe:	d005      	beq.n	8023acc <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8023ac0:	4b59      	ldr	r3, [pc, #356]	; (8023c28 <HAL_RCC_ClockConfig+0x1bc>)
 8023ac2:	689b      	ldr	r3, [r3, #8]
 8023ac4:	4a58      	ldr	r2, [pc, #352]	; (8023c28 <HAL_RCC_ClockConfig+0x1bc>)
 8023ac6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8023aca:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8023acc:	687b      	ldr	r3, [r7, #4]
 8023ace:	681b      	ldr	r3, [r3, #0]
 8023ad0:	f003 0308 	and.w	r3, r3, #8
 8023ad4:	2b00      	cmp	r3, #0
 8023ad6:	d005      	beq.n	8023ae4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8023ad8:	4b53      	ldr	r3, [pc, #332]	; (8023c28 <HAL_RCC_ClockConfig+0x1bc>)
 8023ada:	689b      	ldr	r3, [r3, #8]
 8023adc:	4a52      	ldr	r2, [pc, #328]	; (8023c28 <HAL_RCC_ClockConfig+0x1bc>)
 8023ade:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8023ae2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8023ae4:	4b50      	ldr	r3, [pc, #320]	; (8023c28 <HAL_RCC_ClockConfig+0x1bc>)
 8023ae6:	689b      	ldr	r3, [r3, #8]
 8023ae8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8023aec:	687b      	ldr	r3, [r7, #4]
 8023aee:	689b      	ldr	r3, [r3, #8]
 8023af0:	494d      	ldr	r1, [pc, #308]	; (8023c28 <HAL_RCC_ClockConfig+0x1bc>)
 8023af2:	4313      	orrs	r3, r2
 8023af4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8023af6:	687b      	ldr	r3, [r7, #4]
 8023af8:	681b      	ldr	r3, [r3, #0]
 8023afa:	f003 0301 	and.w	r3, r3, #1
 8023afe:	2b00      	cmp	r3, #0
 8023b00:	d044      	beq.n	8023b8c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8023b02:	687b      	ldr	r3, [r7, #4]
 8023b04:	685b      	ldr	r3, [r3, #4]
 8023b06:	2b01      	cmp	r3, #1
 8023b08:	d107      	bne.n	8023b1a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8023b0a:	4b47      	ldr	r3, [pc, #284]	; (8023c28 <HAL_RCC_ClockConfig+0x1bc>)
 8023b0c:	681b      	ldr	r3, [r3, #0]
 8023b0e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8023b12:	2b00      	cmp	r3, #0
 8023b14:	d119      	bne.n	8023b4a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8023b16:	2301      	movs	r3, #1
 8023b18:	e07f      	b.n	8023c1a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8023b1a:	687b      	ldr	r3, [r7, #4]
 8023b1c:	685b      	ldr	r3, [r3, #4]
 8023b1e:	2b02      	cmp	r3, #2
 8023b20:	d003      	beq.n	8023b2a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8023b22:	687b      	ldr	r3, [r7, #4]
 8023b24:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8023b26:	2b03      	cmp	r3, #3
 8023b28:	d107      	bne.n	8023b3a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8023b2a:	4b3f      	ldr	r3, [pc, #252]	; (8023c28 <HAL_RCC_ClockConfig+0x1bc>)
 8023b2c:	681b      	ldr	r3, [r3, #0]
 8023b2e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8023b32:	2b00      	cmp	r3, #0
 8023b34:	d109      	bne.n	8023b4a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8023b36:	2301      	movs	r3, #1
 8023b38:	e06f      	b.n	8023c1a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8023b3a:	4b3b      	ldr	r3, [pc, #236]	; (8023c28 <HAL_RCC_ClockConfig+0x1bc>)
 8023b3c:	681b      	ldr	r3, [r3, #0]
 8023b3e:	f003 0302 	and.w	r3, r3, #2
 8023b42:	2b00      	cmp	r3, #0
 8023b44:	d101      	bne.n	8023b4a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8023b46:	2301      	movs	r3, #1
 8023b48:	e067      	b.n	8023c1a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8023b4a:	4b37      	ldr	r3, [pc, #220]	; (8023c28 <HAL_RCC_ClockConfig+0x1bc>)
 8023b4c:	689b      	ldr	r3, [r3, #8]
 8023b4e:	f023 0203 	bic.w	r2, r3, #3
 8023b52:	687b      	ldr	r3, [r7, #4]
 8023b54:	685b      	ldr	r3, [r3, #4]
 8023b56:	4934      	ldr	r1, [pc, #208]	; (8023c28 <HAL_RCC_ClockConfig+0x1bc>)
 8023b58:	4313      	orrs	r3, r2
 8023b5a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8023b5c:	f7fd ffb4 	bl	8021ac8 <HAL_GetTick>
 8023b60:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8023b62:	e00a      	b.n	8023b7a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8023b64:	f7fd ffb0 	bl	8021ac8 <HAL_GetTick>
 8023b68:	4602      	mov	r2, r0
 8023b6a:	68fb      	ldr	r3, [r7, #12]
 8023b6c:	1ad3      	subs	r3, r2, r3
 8023b6e:	f241 3288 	movw	r2, #5000	; 0x1388
 8023b72:	4293      	cmp	r3, r2
 8023b74:	d901      	bls.n	8023b7a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8023b76:	2303      	movs	r3, #3
 8023b78:	e04f      	b.n	8023c1a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8023b7a:	4b2b      	ldr	r3, [pc, #172]	; (8023c28 <HAL_RCC_ClockConfig+0x1bc>)
 8023b7c:	689b      	ldr	r3, [r3, #8]
 8023b7e:	f003 020c 	and.w	r2, r3, #12
 8023b82:	687b      	ldr	r3, [r7, #4]
 8023b84:	685b      	ldr	r3, [r3, #4]
 8023b86:	009b      	lsls	r3, r3, #2
 8023b88:	429a      	cmp	r2, r3
 8023b8a:	d1eb      	bne.n	8023b64 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8023b8c:	4b25      	ldr	r3, [pc, #148]	; (8023c24 <HAL_RCC_ClockConfig+0x1b8>)
 8023b8e:	681b      	ldr	r3, [r3, #0]
 8023b90:	f003 0307 	and.w	r3, r3, #7
 8023b94:	683a      	ldr	r2, [r7, #0]
 8023b96:	429a      	cmp	r2, r3
 8023b98:	d20c      	bcs.n	8023bb4 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8023b9a:	4b22      	ldr	r3, [pc, #136]	; (8023c24 <HAL_RCC_ClockConfig+0x1b8>)
 8023b9c:	683a      	ldr	r2, [r7, #0]
 8023b9e:	b2d2      	uxtb	r2, r2
 8023ba0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8023ba2:	4b20      	ldr	r3, [pc, #128]	; (8023c24 <HAL_RCC_ClockConfig+0x1b8>)
 8023ba4:	681b      	ldr	r3, [r3, #0]
 8023ba6:	f003 0307 	and.w	r3, r3, #7
 8023baa:	683a      	ldr	r2, [r7, #0]
 8023bac:	429a      	cmp	r2, r3
 8023bae:	d001      	beq.n	8023bb4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8023bb0:	2301      	movs	r3, #1
 8023bb2:	e032      	b.n	8023c1a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8023bb4:	687b      	ldr	r3, [r7, #4]
 8023bb6:	681b      	ldr	r3, [r3, #0]
 8023bb8:	f003 0304 	and.w	r3, r3, #4
 8023bbc:	2b00      	cmp	r3, #0
 8023bbe:	d008      	beq.n	8023bd2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8023bc0:	4b19      	ldr	r3, [pc, #100]	; (8023c28 <HAL_RCC_ClockConfig+0x1bc>)
 8023bc2:	689b      	ldr	r3, [r3, #8]
 8023bc4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8023bc8:	687b      	ldr	r3, [r7, #4]
 8023bca:	68db      	ldr	r3, [r3, #12]
 8023bcc:	4916      	ldr	r1, [pc, #88]	; (8023c28 <HAL_RCC_ClockConfig+0x1bc>)
 8023bce:	4313      	orrs	r3, r2
 8023bd0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8023bd2:	687b      	ldr	r3, [r7, #4]
 8023bd4:	681b      	ldr	r3, [r3, #0]
 8023bd6:	f003 0308 	and.w	r3, r3, #8
 8023bda:	2b00      	cmp	r3, #0
 8023bdc:	d009      	beq.n	8023bf2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8023bde:	4b12      	ldr	r3, [pc, #72]	; (8023c28 <HAL_RCC_ClockConfig+0x1bc>)
 8023be0:	689b      	ldr	r3, [r3, #8]
 8023be2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8023be6:	687b      	ldr	r3, [r7, #4]
 8023be8:	691b      	ldr	r3, [r3, #16]
 8023bea:	00db      	lsls	r3, r3, #3
 8023bec:	490e      	ldr	r1, [pc, #56]	; (8023c28 <HAL_RCC_ClockConfig+0x1bc>)
 8023bee:	4313      	orrs	r3, r2
 8023bf0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8023bf2:	f000 f821 	bl	8023c38 <HAL_RCC_GetSysClockFreq>
 8023bf6:	4602      	mov	r2, r0
 8023bf8:	4b0b      	ldr	r3, [pc, #44]	; (8023c28 <HAL_RCC_ClockConfig+0x1bc>)
 8023bfa:	689b      	ldr	r3, [r3, #8]
 8023bfc:	091b      	lsrs	r3, r3, #4
 8023bfe:	f003 030f 	and.w	r3, r3, #15
 8023c02:	490a      	ldr	r1, [pc, #40]	; (8023c2c <HAL_RCC_ClockConfig+0x1c0>)
 8023c04:	5ccb      	ldrb	r3, [r1, r3]
 8023c06:	fa22 f303 	lsr.w	r3, r2, r3
 8023c0a:	4a09      	ldr	r2, [pc, #36]	; (8023c30 <HAL_RCC_ClockConfig+0x1c4>)
 8023c0c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8023c0e:	4b09      	ldr	r3, [pc, #36]	; (8023c34 <HAL_RCC_ClockConfig+0x1c8>)
 8023c10:	681b      	ldr	r3, [r3, #0]
 8023c12:	4618      	mov	r0, r3
 8023c14:	f7fc ff5a 	bl	8020acc <HAL_InitTick>

  return HAL_OK;
 8023c18:	2300      	movs	r3, #0
}
 8023c1a:	4618      	mov	r0, r3
 8023c1c:	3710      	adds	r7, #16
 8023c1e:	46bd      	mov	sp, r7
 8023c20:	bd80      	pop	{r7, pc}
 8023c22:	bf00      	nop
 8023c24:	40023c00 	.word	0x40023c00
 8023c28:	40023800 	.word	0x40023800
 8023c2c:	0803d454 	.word	0x0803d454
 8023c30:	20000000 	.word	0x20000000
 8023c34:	20000008 	.word	0x20000008

08023c38 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8023c38:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8023c3c:	b090      	sub	sp, #64	; 0x40
 8023c3e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8023c40:	2300      	movs	r3, #0
 8023c42:	637b      	str	r3, [r7, #52]	; 0x34
 8023c44:	2300      	movs	r3, #0
 8023c46:	63fb      	str	r3, [r7, #60]	; 0x3c
 8023c48:	2300      	movs	r3, #0
 8023c4a:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8023c4c:	2300      	movs	r3, #0
 8023c4e:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8023c50:	4b59      	ldr	r3, [pc, #356]	; (8023db8 <HAL_RCC_GetSysClockFreq+0x180>)
 8023c52:	689b      	ldr	r3, [r3, #8]
 8023c54:	f003 030c 	and.w	r3, r3, #12
 8023c58:	2b08      	cmp	r3, #8
 8023c5a:	d00d      	beq.n	8023c78 <HAL_RCC_GetSysClockFreq+0x40>
 8023c5c:	2b08      	cmp	r3, #8
 8023c5e:	f200 80a1 	bhi.w	8023da4 <HAL_RCC_GetSysClockFreq+0x16c>
 8023c62:	2b00      	cmp	r3, #0
 8023c64:	d002      	beq.n	8023c6c <HAL_RCC_GetSysClockFreq+0x34>
 8023c66:	2b04      	cmp	r3, #4
 8023c68:	d003      	beq.n	8023c72 <HAL_RCC_GetSysClockFreq+0x3a>
 8023c6a:	e09b      	b.n	8023da4 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8023c6c:	4b53      	ldr	r3, [pc, #332]	; (8023dbc <HAL_RCC_GetSysClockFreq+0x184>)
 8023c6e:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8023c70:	e09b      	b.n	8023daa <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8023c72:	4b53      	ldr	r3, [pc, #332]	; (8023dc0 <HAL_RCC_GetSysClockFreq+0x188>)
 8023c74:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8023c76:	e098      	b.n	8023daa <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8023c78:	4b4f      	ldr	r3, [pc, #316]	; (8023db8 <HAL_RCC_GetSysClockFreq+0x180>)
 8023c7a:	685b      	ldr	r3, [r3, #4]
 8023c7c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8023c80:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8023c82:	4b4d      	ldr	r3, [pc, #308]	; (8023db8 <HAL_RCC_GetSysClockFreq+0x180>)
 8023c84:	685b      	ldr	r3, [r3, #4]
 8023c86:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8023c8a:	2b00      	cmp	r3, #0
 8023c8c:	d028      	beq.n	8023ce0 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8023c8e:	4b4a      	ldr	r3, [pc, #296]	; (8023db8 <HAL_RCC_GetSysClockFreq+0x180>)
 8023c90:	685b      	ldr	r3, [r3, #4]
 8023c92:	099b      	lsrs	r3, r3, #6
 8023c94:	2200      	movs	r2, #0
 8023c96:	623b      	str	r3, [r7, #32]
 8023c98:	627a      	str	r2, [r7, #36]	; 0x24
 8023c9a:	6a3b      	ldr	r3, [r7, #32]
 8023c9c:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8023ca0:	2100      	movs	r1, #0
 8023ca2:	4b47      	ldr	r3, [pc, #284]	; (8023dc0 <HAL_RCC_GetSysClockFreq+0x188>)
 8023ca4:	fb03 f201 	mul.w	r2, r3, r1
 8023ca8:	2300      	movs	r3, #0
 8023caa:	fb00 f303 	mul.w	r3, r0, r3
 8023cae:	4413      	add	r3, r2
 8023cb0:	4a43      	ldr	r2, [pc, #268]	; (8023dc0 <HAL_RCC_GetSysClockFreq+0x188>)
 8023cb2:	fba0 1202 	umull	r1, r2, r0, r2
 8023cb6:	62fa      	str	r2, [r7, #44]	; 0x2c
 8023cb8:	460a      	mov	r2, r1
 8023cba:	62ba      	str	r2, [r7, #40]	; 0x28
 8023cbc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8023cbe:	4413      	add	r3, r2
 8023cc0:	62fb      	str	r3, [r7, #44]	; 0x2c
 8023cc2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8023cc4:	2200      	movs	r2, #0
 8023cc6:	61bb      	str	r3, [r7, #24]
 8023cc8:	61fa      	str	r2, [r7, #28]
 8023cca:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8023cce:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8023cd2:	f7fc fad5 	bl	8020280 <__aeabi_uldivmod>
 8023cd6:	4602      	mov	r2, r0
 8023cd8:	460b      	mov	r3, r1
 8023cda:	4613      	mov	r3, r2
 8023cdc:	63fb      	str	r3, [r7, #60]	; 0x3c
 8023cde:	e053      	b.n	8023d88 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8023ce0:	4b35      	ldr	r3, [pc, #212]	; (8023db8 <HAL_RCC_GetSysClockFreq+0x180>)
 8023ce2:	685b      	ldr	r3, [r3, #4]
 8023ce4:	099b      	lsrs	r3, r3, #6
 8023ce6:	2200      	movs	r2, #0
 8023ce8:	613b      	str	r3, [r7, #16]
 8023cea:	617a      	str	r2, [r7, #20]
 8023cec:	693b      	ldr	r3, [r7, #16]
 8023cee:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8023cf2:	f04f 0b00 	mov.w	fp, #0
 8023cf6:	4652      	mov	r2, sl
 8023cf8:	465b      	mov	r3, fp
 8023cfa:	f04f 0000 	mov.w	r0, #0
 8023cfe:	f04f 0100 	mov.w	r1, #0
 8023d02:	0159      	lsls	r1, r3, #5
 8023d04:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8023d08:	0150      	lsls	r0, r2, #5
 8023d0a:	4602      	mov	r2, r0
 8023d0c:	460b      	mov	r3, r1
 8023d0e:	ebb2 080a 	subs.w	r8, r2, sl
 8023d12:	eb63 090b 	sbc.w	r9, r3, fp
 8023d16:	f04f 0200 	mov.w	r2, #0
 8023d1a:	f04f 0300 	mov.w	r3, #0
 8023d1e:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8023d22:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8023d26:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8023d2a:	ebb2 0408 	subs.w	r4, r2, r8
 8023d2e:	eb63 0509 	sbc.w	r5, r3, r9
 8023d32:	f04f 0200 	mov.w	r2, #0
 8023d36:	f04f 0300 	mov.w	r3, #0
 8023d3a:	00eb      	lsls	r3, r5, #3
 8023d3c:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8023d40:	00e2      	lsls	r2, r4, #3
 8023d42:	4614      	mov	r4, r2
 8023d44:	461d      	mov	r5, r3
 8023d46:	eb14 030a 	adds.w	r3, r4, sl
 8023d4a:	603b      	str	r3, [r7, #0]
 8023d4c:	eb45 030b 	adc.w	r3, r5, fp
 8023d50:	607b      	str	r3, [r7, #4]
 8023d52:	f04f 0200 	mov.w	r2, #0
 8023d56:	f04f 0300 	mov.w	r3, #0
 8023d5a:	e9d7 4500 	ldrd	r4, r5, [r7]
 8023d5e:	4629      	mov	r1, r5
 8023d60:	028b      	lsls	r3, r1, #10
 8023d62:	4621      	mov	r1, r4
 8023d64:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8023d68:	4621      	mov	r1, r4
 8023d6a:	028a      	lsls	r2, r1, #10
 8023d6c:	4610      	mov	r0, r2
 8023d6e:	4619      	mov	r1, r3
 8023d70:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8023d72:	2200      	movs	r2, #0
 8023d74:	60bb      	str	r3, [r7, #8]
 8023d76:	60fa      	str	r2, [r7, #12]
 8023d78:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8023d7c:	f7fc fa80 	bl	8020280 <__aeabi_uldivmod>
 8023d80:	4602      	mov	r2, r0
 8023d82:	460b      	mov	r3, r1
 8023d84:	4613      	mov	r3, r2
 8023d86:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8023d88:	4b0b      	ldr	r3, [pc, #44]	; (8023db8 <HAL_RCC_GetSysClockFreq+0x180>)
 8023d8a:	685b      	ldr	r3, [r3, #4]
 8023d8c:	0c1b      	lsrs	r3, r3, #16
 8023d8e:	f003 0303 	and.w	r3, r3, #3
 8023d92:	3301      	adds	r3, #1
 8023d94:	005b      	lsls	r3, r3, #1
 8023d96:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8023d98:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8023d9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8023d9c:	fbb2 f3f3 	udiv	r3, r2, r3
 8023da0:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8023da2:	e002      	b.n	8023daa <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8023da4:	4b05      	ldr	r3, [pc, #20]	; (8023dbc <HAL_RCC_GetSysClockFreq+0x184>)
 8023da6:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8023da8:	bf00      	nop
    }
  }
  return sysclockfreq;
 8023daa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8023dac:	4618      	mov	r0, r3
 8023dae:	3740      	adds	r7, #64	; 0x40
 8023db0:	46bd      	mov	sp, r7
 8023db2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8023db6:	bf00      	nop
 8023db8:	40023800 	.word	0x40023800
 8023dbc:	00f42400 	.word	0x00f42400
 8023dc0:	02faf080 	.word	0x02faf080

08023dc4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8023dc4:	b480      	push	{r7}
 8023dc6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8023dc8:	4b03      	ldr	r3, [pc, #12]	; (8023dd8 <HAL_RCC_GetHCLKFreq+0x14>)
 8023dca:	681b      	ldr	r3, [r3, #0]
}
 8023dcc:	4618      	mov	r0, r3
 8023dce:	46bd      	mov	sp, r7
 8023dd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8023dd4:	4770      	bx	lr
 8023dd6:	bf00      	nop
 8023dd8:	20000000 	.word	0x20000000

08023ddc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8023ddc:	b580      	push	{r7, lr}
 8023dde:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8023de0:	f7ff fff0 	bl	8023dc4 <HAL_RCC_GetHCLKFreq>
 8023de4:	4602      	mov	r2, r0
 8023de6:	4b05      	ldr	r3, [pc, #20]	; (8023dfc <HAL_RCC_GetPCLK1Freq+0x20>)
 8023de8:	689b      	ldr	r3, [r3, #8]
 8023dea:	0a9b      	lsrs	r3, r3, #10
 8023dec:	f003 0307 	and.w	r3, r3, #7
 8023df0:	4903      	ldr	r1, [pc, #12]	; (8023e00 <HAL_RCC_GetPCLK1Freq+0x24>)
 8023df2:	5ccb      	ldrb	r3, [r1, r3]
 8023df4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8023df8:	4618      	mov	r0, r3
 8023dfa:	bd80      	pop	{r7, pc}
 8023dfc:	40023800 	.word	0x40023800
 8023e00:	0803d464 	.word	0x0803d464

08023e04 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8023e04:	b480      	push	{r7}
 8023e06:	b083      	sub	sp, #12
 8023e08:	af00      	add	r7, sp, #0
 8023e0a:	6078      	str	r0, [r7, #4]
 8023e0c:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8023e0e:	687b      	ldr	r3, [r7, #4]
 8023e10:	220f      	movs	r2, #15
 8023e12:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8023e14:	4b12      	ldr	r3, [pc, #72]	; (8023e60 <HAL_RCC_GetClockConfig+0x5c>)
 8023e16:	689b      	ldr	r3, [r3, #8]
 8023e18:	f003 0203 	and.w	r2, r3, #3
 8023e1c:	687b      	ldr	r3, [r7, #4]
 8023e1e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8023e20:	4b0f      	ldr	r3, [pc, #60]	; (8023e60 <HAL_RCC_GetClockConfig+0x5c>)
 8023e22:	689b      	ldr	r3, [r3, #8]
 8023e24:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8023e28:	687b      	ldr	r3, [r7, #4]
 8023e2a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8023e2c:	4b0c      	ldr	r3, [pc, #48]	; (8023e60 <HAL_RCC_GetClockConfig+0x5c>)
 8023e2e:	689b      	ldr	r3, [r3, #8]
 8023e30:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8023e34:	687b      	ldr	r3, [r7, #4]
 8023e36:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8023e38:	4b09      	ldr	r3, [pc, #36]	; (8023e60 <HAL_RCC_GetClockConfig+0x5c>)
 8023e3a:	689b      	ldr	r3, [r3, #8]
 8023e3c:	08db      	lsrs	r3, r3, #3
 8023e3e:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8023e42:	687b      	ldr	r3, [r7, #4]
 8023e44:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8023e46:	4b07      	ldr	r3, [pc, #28]	; (8023e64 <HAL_RCC_GetClockConfig+0x60>)
 8023e48:	681b      	ldr	r3, [r3, #0]
 8023e4a:	f003 0207 	and.w	r2, r3, #7
 8023e4e:	683b      	ldr	r3, [r7, #0]
 8023e50:	601a      	str	r2, [r3, #0]
}
 8023e52:	bf00      	nop
 8023e54:	370c      	adds	r7, #12
 8023e56:	46bd      	mov	sp, r7
 8023e58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8023e5c:	4770      	bx	lr
 8023e5e:	bf00      	nop
 8023e60:	40023800 	.word	0x40023800
 8023e64:	40023c00 	.word	0x40023c00

08023e68 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8023e68:	b580      	push	{r7, lr}
 8023e6a:	b086      	sub	sp, #24
 8023e6c:	af00      	add	r7, sp, #0
 8023e6e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8023e70:	2300      	movs	r3, #0
 8023e72:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8023e74:	2300      	movs	r3, #0
 8023e76:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8023e78:	687b      	ldr	r3, [r7, #4]
 8023e7a:	681b      	ldr	r3, [r3, #0]
 8023e7c:	f003 0301 	and.w	r3, r3, #1
 8023e80:	2b00      	cmp	r3, #0
 8023e82:	d105      	bne.n	8023e90 <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8023e84:	687b      	ldr	r3, [r7, #4]
 8023e86:	681b      	ldr	r3, [r3, #0]
 8023e88:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8023e8c:	2b00      	cmp	r3, #0
 8023e8e:	d035      	beq.n	8023efc <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8023e90:	4b62      	ldr	r3, [pc, #392]	; (802401c <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8023e92:	2200      	movs	r2, #0
 8023e94:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8023e96:	f7fd fe17 	bl	8021ac8 <HAL_GetTick>
 8023e9a:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8023e9c:	e008      	b.n	8023eb0 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8023e9e:	f7fd fe13 	bl	8021ac8 <HAL_GetTick>
 8023ea2:	4602      	mov	r2, r0
 8023ea4:	697b      	ldr	r3, [r7, #20]
 8023ea6:	1ad3      	subs	r3, r2, r3
 8023ea8:	2b02      	cmp	r3, #2
 8023eaa:	d901      	bls.n	8023eb0 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8023eac:	2303      	movs	r3, #3
 8023eae:	e0b0      	b.n	8024012 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8023eb0:	4b5b      	ldr	r3, [pc, #364]	; (8024020 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8023eb2:	681b      	ldr	r3, [r3, #0]
 8023eb4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8023eb8:	2b00      	cmp	r3, #0
 8023eba:	d1f0      	bne.n	8023e9e <HAL_RCCEx_PeriphCLKConfig+0x36>
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8023ebc:	687b      	ldr	r3, [r7, #4]
 8023ebe:	685b      	ldr	r3, [r3, #4]
 8023ec0:	019a      	lsls	r2, r3, #6
 8023ec2:	687b      	ldr	r3, [r7, #4]
 8023ec4:	689b      	ldr	r3, [r3, #8]
 8023ec6:	071b      	lsls	r3, r3, #28
 8023ec8:	4955      	ldr	r1, [pc, #340]	; (8024020 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8023eca:	4313      	orrs	r3, r2
 8023ecc:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8023ed0:	4b52      	ldr	r3, [pc, #328]	; (802401c <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8023ed2:	2201      	movs	r2, #1
 8023ed4:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8023ed6:	f7fd fdf7 	bl	8021ac8 <HAL_GetTick>
 8023eda:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8023edc:	e008      	b.n	8023ef0 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8023ede:	f7fd fdf3 	bl	8021ac8 <HAL_GetTick>
 8023ee2:	4602      	mov	r2, r0
 8023ee4:	697b      	ldr	r3, [r7, #20]
 8023ee6:	1ad3      	subs	r3, r2, r3
 8023ee8:	2b02      	cmp	r3, #2
 8023eea:	d901      	bls.n	8023ef0 <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8023eec:	2303      	movs	r3, #3
 8023eee:	e090      	b.n	8024012 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8023ef0:	4b4b      	ldr	r3, [pc, #300]	; (8024020 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8023ef2:	681b      	ldr	r3, [r3, #0]
 8023ef4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8023ef8:	2b00      	cmp	r3, #0
 8023efa:	d0f0      	beq.n	8023ede <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8023efc:	687b      	ldr	r3, [r7, #4]
 8023efe:	681b      	ldr	r3, [r3, #0]
 8023f00:	f003 0302 	and.w	r3, r3, #2
 8023f04:	2b00      	cmp	r3, #0
 8023f06:	f000 8083 	beq.w	8024010 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8023f0a:	2300      	movs	r3, #0
 8023f0c:	60fb      	str	r3, [r7, #12]
 8023f0e:	4b44      	ldr	r3, [pc, #272]	; (8024020 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8023f10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8023f12:	4a43      	ldr	r2, [pc, #268]	; (8024020 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8023f14:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8023f18:	6413      	str	r3, [r2, #64]	; 0x40
 8023f1a:	4b41      	ldr	r3, [pc, #260]	; (8024020 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8023f1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8023f1e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8023f22:	60fb      	str	r3, [r7, #12]
 8023f24:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8023f26:	4b3f      	ldr	r3, [pc, #252]	; (8024024 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8023f28:	681b      	ldr	r3, [r3, #0]
 8023f2a:	4a3e      	ldr	r2, [pc, #248]	; (8024024 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8023f2c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8023f30:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8023f32:	f7fd fdc9 	bl	8021ac8 <HAL_GetTick>
 8023f36:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8023f38:	e008      	b.n	8023f4c <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8023f3a:	f7fd fdc5 	bl	8021ac8 <HAL_GetTick>
 8023f3e:	4602      	mov	r2, r0
 8023f40:	697b      	ldr	r3, [r7, #20]
 8023f42:	1ad3      	subs	r3, r2, r3
 8023f44:	2b02      	cmp	r3, #2
 8023f46:	d901      	bls.n	8023f4c <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 8023f48:	2303      	movs	r3, #3
 8023f4a:	e062      	b.n	8024012 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8023f4c:	4b35      	ldr	r3, [pc, #212]	; (8024024 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8023f4e:	681b      	ldr	r3, [r3, #0]
 8023f50:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8023f54:	2b00      	cmp	r3, #0
 8023f56:	d0f0      	beq.n	8023f3a <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8023f58:	4b31      	ldr	r3, [pc, #196]	; (8024020 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8023f5a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8023f5c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8023f60:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8023f62:	693b      	ldr	r3, [r7, #16]
 8023f64:	2b00      	cmp	r3, #0
 8023f66:	d02f      	beq.n	8023fc8 <HAL_RCCEx_PeriphCLKConfig+0x160>
 8023f68:	687b      	ldr	r3, [r7, #4]
 8023f6a:	68db      	ldr	r3, [r3, #12]
 8023f6c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8023f70:	693a      	ldr	r2, [r7, #16]
 8023f72:	429a      	cmp	r2, r3
 8023f74:	d028      	beq.n	8023fc8 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8023f76:	4b2a      	ldr	r3, [pc, #168]	; (8024020 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8023f78:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8023f7a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8023f7e:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8023f80:	4b29      	ldr	r3, [pc, #164]	; (8024028 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8023f82:	2201      	movs	r2, #1
 8023f84:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8023f86:	4b28      	ldr	r3, [pc, #160]	; (8024028 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8023f88:	2200      	movs	r2, #0
 8023f8a:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8023f8c:	4a24      	ldr	r2, [pc, #144]	; (8024020 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8023f8e:	693b      	ldr	r3, [r7, #16]
 8023f90:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8023f92:	4b23      	ldr	r3, [pc, #140]	; (8024020 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8023f94:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8023f96:	f003 0301 	and.w	r3, r3, #1
 8023f9a:	2b01      	cmp	r3, #1
 8023f9c:	d114      	bne.n	8023fc8 <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8023f9e:	f7fd fd93 	bl	8021ac8 <HAL_GetTick>
 8023fa2:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8023fa4:	e00a      	b.n	8023fbc <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8023fa6:	f7fd fd8f 	bl	8021ac8 <HAL_GetTick>
 8023faa:	4602      	mov	r2, r0
 8023fac:	697b      	ldr	r3, [r7, #20]
 8023fae:	1ad3      	subs	r3, r2, r3
 8023fb0:	f241 3288 	movw	r2, #5000	; 0x1388
 8023fb4:	4293      	cmp	r3, r2
 8023fb6:	d901      	bls.n	8023fbc <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 8023fb8:	2303      	movs	r3, #3
 8023fba:	e02a      	b.n	8024012 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8023fbc:	4b18      	ldr	r3, [pc, #96]	; (8024020 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8023fbe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8023fc0:	f003 0302 	and.w	r3, r3, #2
 8023fc4:	2b00      	cmp	r3, #0
 8023fc6:	d0ee      	beq.n	8023fa6 <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8023fc8:	687b      	ldr	r3, [r7, #4]
 8023fca:	68db      	ldr	r3, [r3, #12]
 8023fcc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8023fd0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8023fd4:	d10d      	bne.n	8023ff2 <HAL_RCCEx_PeriphCLKConfig+0x18a>
 8023fd6:	4b12      	ldr	r3, [pc, #72]	; (8024020 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8023fd8:	689b      	ldr	r3, [r3, #8]
 8023fda:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8023fde:	687b      	ldr	r3, [r7, #4]
 8023fe0:	68db      	ldr	r3, [r3, #12]
 8023fe2:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8023fe6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8023fea:	490d      	ldr	r1, [pc, #52]	; (8024020 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8023fec:	4313      	orrs	r3, r2
 8023fee:	608b      	str	r3, [r1, #8]
 8023ff0:	e005      	b.n	8023ffe <HAL_RCCEx_PeriphCLKConfig+0x196>
 8023ff2:	4b0b      	ldr	r3, [pc, #44]	; (8024020 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8023ff4:	689b      	ldr	r3, [r3, #8]
 8023ff6:	4a0a      	ldr	r2, [pc, #40]	; (8024020 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8023ff8:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8023ffc:	6093      	str	r3, [r2, #8]
 8023ffe:	4b08      	ldr	r3, [pc, #32]	; (8024020 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8024000:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8024002:	687b      	ldr	r3, [r7, #4]
 8024004:	68db      	ldr	r3, [r3, #12]
 8024006:	f3c3 030b 	ubfx	r3, r3, #0, #12
 802400a:	4905      	ldr	r1, [pc, #20]	; (8024020 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 802400c:	4313      	orrs	r3, r2
 802400e:	670b      	str	r3, [r1, #112]	; 0x70
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8024010:	2300      	movs	r3, #0
}
 8024012:	4618      	mov	r0, r3
 8024014:	3718      	adds	r7, #24
 8024016:	46bd      	mov	sp, r7
 8024018:	bd80      	pop	{r7, pc}
 802401a:	bf00      	nop
 802401c:	42470068 	.word	0x42470068
 8024020:	40023800 	.word	0x40023800
 8024024:	40007000 	.word	0x40007000
 8024028:	42470e40 	.word	0x42470e40

0802402c <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 802402c:	b580      	push	{r7, lr}
 802402e:	b084      	sub	sp, #16
 8024030:	af00      	add	r7, sp, #0
 8024032:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8024034:	2301      	movs	r3, #1
 8024036:	73fb      	strb	r3, [r7, #15]

  /* Check RTC handler validity */
  if (hrtc == NULL)
 8024038:	687b      	ldr	r3, [r7, #4]
 802403a:	2b00      	cmp	r3, #0
 802403c:	d101      	bne.n	8024042 <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 802403e:	2301      	movs	r3, #1
 8024040:	e066      	b.n	8024110 <HAL_RTC_Init+0xe4>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else /* USE_HAL_RTC_REGISTER_CALLBACKS */
  if (hrtc->State == HAL_RTC_STATE_RESET)
 8024042:	687b      	ldr	r3, [r7, #4]
 8024044:	7f5b      	ldrb	r3, [r3, #29]
 8024046:	b2db      	uxtb	r3, r3
 8024048:	2b00      	cmp	r3, #0
 802404a:	d105      	bne.n	8024058 <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 802404c:	687b      	ldr	r3, [r7, #4]
 802404e:	2200      	movs	r2, #0
 8024050:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8024052:	6878      	ldr	r0, [r7, #4]
 8024054:	f7fc fd10 	bl	8020a78 <HAL_RTC_MspInit>
  }
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8024058:	687b      	ldr	r3, [r7, #4]
 802405a:	2202      	movs	r2, #2
 802405c:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 802405e:	687b      	ldr	r3, [r7, #4]
 8024060:	681b      	ldr	r3, [r3, #0]
 8024062:	22ca      	movs	r2, #202	; 0xca
 8024064:	625a      	str	r2, [r3, #36]	; 0x24
 8024066:	687b      	ldr	r3, [r7, #4]
 8024068:	681b      	ldr	r3, [r3, #0]
 802406a:	2253      	movs	r2, #83	; 0x53
 802406c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 802406e:	6878      	ldr	r0, [r7, #4]
 8024070:	f000 f87a 	bl	8024168 <RTC_EnterInitMode>
 8024074:	4603      	mov	r3, r0
 8024076:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 8024078:	7bfb      	ldrb	r3, [r7, #15]
 802407a:	2b00      	cmp	r3, #0
 802407c:	d12c      	bne.n	80240d8 <HAL_RTC_Init+0xac>
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 802407e:	687b      	ldr	r3, [r7, #4]
 8024080:	681b      	ldr	r3, [r3, #0]
 8024082:	689b      	ldr	r3, [r3, #8]
 8024084:	687a      	ldr	r2, [r7, #4]
 8024086:	6812      	ldr	r2, [r2, #0]
 8024088:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 802408c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8024090:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8024092:	687b      	ldr	r3, [r7, #4]
 8024094:	681b      	ldr	r3, [r3, #0]
 8024096:	6899      	ldr	r1, [r3, #8]
 8024098:	687b      	ldr	r3, [r7, #4]
 802409a:	685a      	ldr	r2, [r3, #4]
 802409c:	687b      	ldr	r3, [r7, #4]
 802409e:	691b      	ldr	r3, [r3, #16]
 80240a0:	431a      	orrs	r2, r3
 80240a2:	687b      	ldr	r3, [r7, #4]
 80240a4:	695b      	ldr	r3, [r3, #20]
 80240a6:	431a      	orrs	r2, r3
 80240a8:	687b      	ldr	r3, [r7, #4]
 80240aa:	681b      	ldr	r3, [r3, #0]
 80240ac:	430a      	orrs	r2, r1
 80240ae:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 80240b0:	687b      	ldr	r3, [r7, #4]
 80240b2:	681b      	ldr	r3, [r3, #0]
 80240b4:	687a      	ldr	r2, [r7, #4]
 80240b6:	68d2      	ldr	r2, [r2, #12]
 80240b8:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 80240ba:	687b      	ldr	r3, [r7, #4]
 80240bc:	681b      	ldr	r3, [r3, #0]
 80240be:	6919      	ldr	r1, [r3, #16]
 80240c0:	687b      	ldr	r3, [r7, #4]
 80240c2:	689b      	ldr	r3, [r3, #8]
 80240c4:	041a      	lsls	r2, r3, #16
 80240c6:	687b      	ldr	r3, [r7, #4]
 80240c8:	681b      	ldr	r3, [r3, #0]
 80240ca:	430a      	orrs	r2, r1
 80240cc:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 80240ce:	6878      	ldr	r0, [r7, #4]
 80240d0:	f000 f881 	bl	80241d6 <RTC_ExitInitMode>
 80240d4:	4603      	mov	r3, r0
 80240d6:	73fb      	strb	r3, [r7, #15]
  }

  if (status == HAL_OK)
 80240d8:	7bfb      	ldrb	r3, [r7, #15]
 80240da:	2b00      	cmp	r3, #0
 80240dc:	d113      	bne.n	8024106 <HAL_RTC_Init+0xda>
  {
    hrtc->Instance->TAFCR &= (uint32_t)~RTC_OUTPUT_TYPE_PUSHPULL;
 80240de:	687b      	ldr	r3, [r7, #4]
 80240e0:	681b      	ldr	r3, [r3, #0]
 80240e2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80240e4:	687b      	ldr	r3, [r7, #4]
 80240e6:	681b      	ldr	r3, [r3, #0]
 80240e8:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80240ec:	641a      	str	r2, [r3, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 80240ee:	687b      	ldr	r3, [r7, #4]
 80240f0:	681b      	ldr	r3, [r3, #0]
 80240f2:	6c19      	ldr	r1, [r3, #64]	; 0x40
 80240f4:	687b      	ldr	r3, [r7, #4]
 80240f6:	699a      	ldr	r2, [r3, #24]
 80240f8:	687b      	ldr	r3, [r7, #4]
 80240fa:	681b      	ldr	r3, [r3, #0]
 80240fc:	430a      	orrs	r2, r1
 80240fe:	641a      	str	r2, [r3, #64]	; 0x40

    hrtc->State = HAL_RTC_STATE_READY;
 8024100:	687b      	ldr	r3, [r7, #4]
 8024102:	2201      	movs	r2, #1
 8024104:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8024106:	687b      	ldr	r3, [r7, #4]
 8024108:	681b      	ldr	r3, [r3, #0]
 802410a:	22ff      	movs	r2, #255	; 0xff
 802410c:	625a      	str	r2, [r3, #36]	; 0x24

  return status;
 802410e:	7bfb      	ldrb	r3, [r7, #15]
}
 8024110:	4618      	mov	r0, r3
 8024112:	3710      	adds	r7, #16
 8024114:	46bd      	mov	sp, r7
 8024116:	bd80      	pop	{r7, pc}

08024118 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8024118:	b580      	push	{r7, lr}
 802411a:	b084      	sub	sp, #16
 802411c:	af00      	add	r7, sp, #0
 802411e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8024120:	2300      	movs	r3, #0
 8024122:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8024124:	687b      	ldr	r3, [r7, #4]
 8024126:	681b      	ldr	r3, [r3, #0]
 8024128:	68da      	ldr	r2, [r3, #12]
 802412a:	687b      	ldr	r3, [r7, #4]
 802412c:	681b      	ldr	r3, [r3, #0]
 802412e:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8024132:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 8024134:	f7fd fcc8 	bl	8021ac8 <HAL_GetTick>
 8024138:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 802413a:	e009      	b.n	8024150 <HAL_RTC_WaitForSynchro+0x38>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 802413c:	f7fd fcc4 	bl	8021ac8 <HAL_GetTick>
 8024140:	4602      	mov	r2, r0
 8024142:	68fb      	ldr	r3, [r7, #12]
 8024144:	1ad3      	subs	r3, r2, r3
 8024146:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 802414a:	d901      	bls.n	8024150 <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 802414c:	2303      	movs	r3, #3
 802414e:	e007      	b.n	8024160 <HAL_RTC_WaitForSynchro+0x48>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8024150:	687b      	ldr	r3, [r7, #4]
 8024152:	681b      	ldr	r3, [r3, #0]
 8024154:	68db      	ldr	r3, [r3, #12]
 8024156:	f003 0320 	and.w	r3, r3, #32
 802415a:	2b00      	cmp	r3, #0
 802415c:	d0ee      	beq.n	802413c <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 802415e:	2300      	movs	r3, #0
}
 8024160:	4618      	mov	r0, r3
 8024162:	3710      	adds	r7, #16
 8024164:	46bd      	mov	sp, r7
 8024166:	bd80      	pop	{r7, pc}

08024168 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8024168:	b580      	push	{r7, lr}
 802416a:	b084      	sub	sp, #16
 802416c:	af00      	add	r7, sp, #0
 802416e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8024170:	2300      	movs	r3, #0
 8024172:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8024174:	2300      	movs	r3, #0
 8024176:	73fb      	strb	r3, [r7, #15]

  /* Check that Initialization mode is not already set */
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 8024178:	687b      	ldr	r3, [r7, #4]
 802417a:	681b      	ldr	r3, [r3, #0]
 802417c:	68db      	ldr	r3, [r3, #12]
 802417e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8024182:	2b00      	cmp	r3, #0
 8024184:	d122      	bne.n	80241cc <RTC_EnterInitMode+0x64>
  {
    /* Set INIT bit to enter Initialization mode */
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8024186:	687b      	ldr	r3, [r7, #4]
 8024188:	681b      	ldr	r3, [r3, #0]
 802418a:	68da      	ldr	r2, [r3, #12]
 802418c:	687b      	ldr	r3, [r7, #4]
 802418e:	681b      	ldr	r3, [r3, #0]
 8024190:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8024194:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8024196:	f7fd fc97 	bl	8021ac8 <HAL_GetTick>
 802419a:	60b8      	str	r0, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 802419c:	e00c      	b.n	80241b8 <RTC_EnterInitMode+0x50>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 802419e:	f7fd fc93 	bl	8021ac8 <HAL_GetTick>
 80241a2:	4602      	mov	r2, r0
 80241a4:	68bb      	ldr	r3, [r7, #8]
 80241a6:	1ad3      	subs	r3, r2, r3
 80241a8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80241ac:	d904      	bls.n	80241b8 <RTC_EnterInitMode+0x50>
      {
        /* Set RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 80241ae:	687b      	ldr	r3, [r7, #4]
 80241b0:	2204      	movs	r2, #4
 80241b2:	775a      	strb	r2, [r3, #29]
        status = HAL_ERROR;
 80241b4:	2301      	movs	r3, #1
 80241b6:	73fb      	strb	r3, [r7, #15]
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 80241b8:	687b      	ldr	r3, [r7, #4]
 80241ba:	681b      	ldr	r3, [r3, #0]
 80241bc:	68db      	ldr	r3, [r3, #12]
 80241be:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80241c2:	2b00      	cmp	r3, #0
 80241c4:	d102      	bne.n	80241cc <RTC_EnterInitMode+0x64>
 80241c6:	7bfb      	ldrb	r3, [r7, #15]
 80241c8:	2b01      	cmp	r3, #1
 80241ca:	d1e8      	bne.n	802419e <RTC_EnterInitMode+0x36>
      }
    }
  }

  return status;
 80241cc:	7bfb      	ldrb	r3, [r7, #15]
}
 80241ce:	4618      	mov	r0, r3
 80241d0:	3710      	adds	r7, #16
 80241d2:	46bd      	mov	sp, r7
 80241d4:	bd80      	pop	{r7, pc}

080241d6 <RTC_ExitInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 80241d6:	b580      	push	{r7, lr}
 80241d8:	b084      	sub	sp, #16
 80241da:	af00      	add	r7, sp, #0
 80241dc:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80241de:	2300      	movs	r3, #0
 80241e0:	73fb      	strb	r3, [r7, #15]

  /* Clear INIT bit to exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 80241e2:	687b      	ldr	r3, [r7, #4]
 80241e4:	681b      	ldr	r3, [r3, #0]
 80241e6:	68da      	ldr	r2, [r3, #12]
 80241e8:	687b      	ldr	r3, [r7, #4]
 80241ea:	681b      	ldr	r3, [r3, #0]
 80241ec:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80241f0:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 80241f2:	687b      	ldr	r3, [r7, #4]
 80241f4:	681b      	ldr	r3, [r3, #0]
 80241f6:	689b      	ldr	r3, [r3, #8]
 80241f8:	f003 0320 	and.w	r3, r3, #32
 80241fc:	2b00      	cmp	r3, #0
 80241fe:	d10a      	bne.n	8024216 <RTC_ExitInitMode+0x40>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8024200:	6878      	ldr	r0, [r7, #4]
 8024202:	f7ff ff89 	bl	8024118 <HAL_RTC_WaitForSynchro>
 8024206:	4603      	mov	r3, r0
 8024208:	2b00      	cmp	r3, #0
 802420a:	d004      	beq.n	8024216 <RTC_ExitInitMode+0x40>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 802420c:	687b      	ldr	r3, [r7, #4]
 802420e:	2204      	movs	r2, #4
 8024210:	775a      	strb	r2, [r3, #29]
      status = HAL_ERROR;
 8024212:	2301      	movs	r3, #1
 8024214:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 8024216:	7bfb      	ldrb	r3, [r7, #15]
}
 8024218:	4618      	mov	r0, r3
 802421a:	3710      	adds	r7, #16
 802421c:	46bd      	mov	sp, r7
 802421e:	bd80      	pop	{r7, pc}

08024220 <HAL_RTCEx_BKUPWrite>:
  *                                 to specify the register.
  * @param  Data Data to be written in the specified RTC Backup data register.
  * @retval None
  */
void HAL_RTCEx_BKUPWrite(RTC_HandleTypeDef *hrtc, uint32_t BackupRegister, uint32_t Data)
{
 8024220:	b480      	push	{r7}
 8024222:	b087      	sub	sp, #28
 8024224:	af00      	add	r7, sp, #0
 8024226:	60f8      	str	r0, [r7, #12]
 8024228:	60b9      	str	r1, [r7, #8]
 802422a:	607a      	str	r2, [r7, #4]
  uint32_t tmp = 0U;
 802422c:	2300      	movs	r3, #0
 802422e:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t) & (hrtc->Instance->BKP0R);
 8024230:	68fb      	ldr	r3, [r7, #12]
 8024232:	681b      	ldr	r3, [r3, #0]
 8024234:	3350      	adds	r3, #80	; 0x50
 8024236:	617b      	str	r3, [r7, #20]
  tmp += (BackupRegister * 4U);
 8024238:	68bb      	ldr	r3, [r7, #8]
 802423a:	009b      	lsls	r3, r3, #2
 802423c:	697a      	ldr	r2, [r7, #20]
 802423e:	4413      	add	r3, r2
 8024240:	617b      	str	r3, [r7, #20]

  /* Write the specified register */
  *(__IO uint32_t *)tmp = (uint32_t)Data;
 8024242:	697b      	ldr	r3, [r7, #20]
 8024244:	687a      	ldr	r2, [r7, #4]
 8024246:	601a      	str	r2, [r3, #0]
}
 8024248:	bf00      	nop
 802424a:	371c      	adds	r7, #28
 802424c:	46bd      	mov	sp, r7
 802424e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8024252:	4770      	bx	lr

08024254 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8024254:	b580      	push	{r7, lr}
 8024256:	b082      	sub	sp, #8
 8024258:	af00      	add	r7, sp, #0
 802425a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 802425c:	687b      	ldr	r3, [r7, #4]
 802425e:	2b00      	cmp	r3, #0
 8024260:	d101      	bne.n	8024266 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8024262:	2301      	movs	r3, #1
 8024264:	e041      	b.n	80242ea <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8024266:	687b      	ldr	r3, [r7, #4]
 8024268:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 802426c:	b2db      	uxtb	r3, r3
 802426e:	2b00      	cmp	r3, #0
 8024270:	d106      	bne.n	8024280 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8024272:	687b      	ldr	r3, [r7, #4]
 8024274:	2200      	movs	r2, #0
 8024276:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 802427a:	6878      	ldr	r0, [r7, #4]
 802427c:	f000 f839 	bl	80242f2 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8024280:	687b      	ldr	r3, [r7, #4]
 8024282:	2202      	movs	r2, #2
 8024284:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8024288:	687b      	ldr	r3, [r7, #4]
 802428a:	681a      	ldr	r2, [r3, #0]
 802428c:	687b      	ldr	r3, [r7, #4]
 802428e:	3304      	adds	r3, #4
 8024290:	4619      	mov	r1, r3
 8024292:	4610      	mov	r0, r2
 8024294:	f000 f9d8 	bl	8024648 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8024298:	687b      	ldr	r3, [r7, #4]
 802429a:	2201      	movs	r2, #1
 802429c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80242a0:	687b      	ldr	r3, [r7, #4]
 80242a2:	2201      	movs	r2, #1
 80242a4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80242a8:	687b      	ldr	r3, [r7, #4]
 80242aa:	2201      	movs	r2, #1
 80242ac:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80242b0:	687b      	ldr	r3, [r7, #4]
 80242b2:	2201      	movs	r2, #1
 80242b4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80242b8:	687b      	ldr	r3, [r7, #4]
 80242ba:	2201      	movs	r2, #1
 80242bc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80242c0:	687b      	ldr	r3, [r7, #4]
 80242c2:	2201      	movs	r2, #1
 80242c4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80242c8:	687b      	ldr	r3, [r7, #4]
 80242ca:	2201      	movs	r2, #1
 80242cc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80242d0:	687b      	ldr	r3, [r7, #4]
 80242d2:	2201      	movs	r2, #1
 80242d4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80242d8:	687b      	ldr	r3, [r7, #4]
 80242da:	2201      	movs	r2, #1
 80242dc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80242e0:	687b      	ldr	r3, [r7, #4]
 80242e2:	2201      	movs	r2, #1
 80242e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80242e8:	2300      	movs	r3, #0
}
 80242ea:	4618      	mov	r0, r3
 80242ec:	3708      	adds	r7, #8
 80242ee:	46bd      	mov	sp, r7
 80242f0:	bd80      	pop	{r7, pc}

080242f2 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80242f2:	b480      	push	{r7}
 80242f4:	b083      	sub	sp, #12
 80242f6:	af00      	add	r7, sp, #0
 80242f8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80242fa:	bf00      	nop
 80242fc:	370c      	adds	r7, #12
 80242fe:	46bd      	mov	sp, r7
 8024300:	f85d 7b04 	ldr.w	r7, [sp], #4
 8024304:	4770      	bx	lr
	...

08024308 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8024308:	b480      	push	{r7}
 802430a:	b085      	sub	sp, #20
 802430c:	af00      	add	r7, sp, #0
 802430e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8024310:	687b      	ldr	r3, [r7, #4]
 8024312:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8024316:	b2db      	uxtb	r3, r3
 8024318:	2b01      	cmp	r3, #1
 802431a:	d001      	beq.n	8024320 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 802431c:	2301      	movs	r3, #1
 802431e:	e04e      	b.n	80243be <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8024320:	687b      	ldr	r3, [r7, #4]
 8024322:	2202      	movs	r2, #2
 8024324:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8024328:	687b      	ldr	r3, [r7, #4]
 802432a:	681b      	ldr	r3, [r3, #0]
 802432c:	68da      	ldr	r2, [r3, #12]
 802432e:	687b      	ldr	r3, [r7, #4]
 8024330:	681b      	ldr	r3, [r3, #0]
 8024332:	f042 0201 	orr.w	r2, r2, #1
 8024336:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8024338:	687b      	ldr	r3, [r7, #4]
 802433a:	681b      	ldr	r3, [r3, #0]
 802433c:	4a23      	ldr	r2, [pc, #140]	; (80243cc <HAL_TIM_Base_Start_IT+0xc4>)
 802433e:	4293      	cmp	r3, r2
 8024340:	d022      	beq.n	8024388 <HAL_TIM_Base_Start_IT+0x80>
 8024342:	687b      	ldr	r3, [r7, #4]
 8024344:	681b      	ldr	r3, [r3, #0]
 8024346:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 802434a:	d01d      	beq.n	8024388 <HAL_TIM_Base_Start_IT+0x80>
 802434c:	687b      	ldr	r3, [r7, #4]
 802434e:	681b      	ldr	r3, [r3, #0]
 8024350:	4a1f      	ldr	r2, [pc, #124]	; (80243d0 <HAL_TIM_Base_Start_IT+0xc8>)
 8024352:	4293      	cmp	r3, r2
 8024354:	d018      	beq.n	8024388 <HAL_TIM_Base_Start_IT+0x80>
 8024356:	687b      	ldr	r3, [r7, #4]
 8024358:	681b      	ldr	r3, [r3, #0]
 802435a:	4a1e      	ldr	r2, [pc, #120]	; (80243d4 <HAL_TIM_Base_Start_IT+0xcc>)
 802435c:	4293      	cmp	r3, r2
 802435e:	d013      	beq.n	8024388 <HAL_TIM_Base_Start_IT+0x80>
 8024360:	687b      	ldr	r3, [r7, #4]
 8024362:	681b      	ldr	r3, [r3, #0]
 8024364:	4a1c      	ldr	r2, [pc, #112]	; (80243d8 <HAL_TIM_Base_Start_IT+0xd0>)
 8024366:	4293      	cmp	r3, r2
 8024368:	d00e      	beq.n	8024388 <HAL_TIM_Base_Start_IT+0x80>
 802436a:	687b      	ldr	r3, [r7, #4]
 802436c:	681b      	ldr	r3, [r3, #0]
 802436e:	4a1b      	ldr	r2, [pc, #108]	; (80243dc <HAL_TIM_Base_Start_IT+0xd4>)
 8024370:	4293      	cmp	r3, r2
 8024372:	d009      	beq.n	8024388 <HAL_TIM_Base_Start_IT+0x80>
 8024374:	687b      	ldr	r3, [r7, #4]
 8024376:	681b      	ldr	r3, [r3, #0]
 8024378:	4a19      	ldr	r2, [pc, #100]	; (80243e0 <HAL_TIM_Base_Start_IT+0xd8>)
 802437a:	4293      	cmp	r3, r2
 802437c:	d004      	beq.n	8024388 <HAL_TIM_Base_Start_IT+0x80>
 802437e:	687b      	ldr	r3, [r7, #4]
 8024380:	681b      	ldr	r3, [r3, #0]
 8024382:	4a18      	ldr	r2, [pc, #96]	; (80243e4 <HAL_TIM_Base_Start_IT+0xdc>)
 8024384:	4293      	cmp	r3, r2
 8024386:	d111      	bne.n	80243ac <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8024388:	687b      	ldr	r3, [r7, #4]
 802438a:	681b      	ldr	r3, [r3, #0]
 802438c:	689b      	ldr	r3, [r3, #8]
 802438e:	f003 0307 	and.w	r3, r3, #7
 8024392:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8024394:	68fb      	ldr	r3, [r7, #12]
 8024396:	2b06      	cmp	r3, #6
 8024398:	d010      	beq.n	80243bc <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 802439a:	687b      	ldr	r3, [r7, #4]
 802439c:	681b      	ldr	r3, [r3, #0]
 802439e:	681a      	ldr	r2, [r3, #0]
 80243a0:	687b      	ldr	r3, [r7, #4]
 80243a2:	681b      	ldr	r3, [r3, #0]
 80243a4:	f042 0201 	orr.w	r2, r2, #1
 80243a8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80243aa:	e007      	b.n	80243bc <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80243ac:	687b      	ldr	r3, [r7, #4]
 80243ae:	681b      	ldr	r3, [r3, #0]
 80243b0:	681a      	ldr	r2, [r3, #0]
 80243b2:	687b      	ldr	r3, [r7, #4]
 80243b4:	681b      	ldr	r3, [r3, #0]
 80243b6:	f042 0201 	orr.w	r2, r2, #1
 80243ba:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80243bc:	2300      	movs	r3, #0
}
 80243be:	4618      	mov	r0, r3
 80243c0:	3714      	adds	r7, #20
 80243c2:	46bd      	mov	sp, r7
 80243c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80243c8:	4770      	bx	lr
 80243ca:	bf00      	nop
 80243cc:	40010000 	.word	0x40010000
 80243d0:	40000400 	.word	0x40000400
 80243d4:	40000800 	.word	0x40000800
 80243d8:	40000c00 	.word	0x40000c00
 80243dc:	40010400 	.word	0x40010400
 80243e0:	40014000 	.word	0x40014000
 80243e4:	40001800 	.word	0x40001800

080243e8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80243e8:	b580      	push	{r7, lr}
 80243ea:	b082      	sub	sp, #8
 80243ec:	af00      	add	r7, sp, #0
 80243ee:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80243f0:	687b      	ldr	r3, [r7, #4]
 80243f2:	681b      	ldr	r3, [r3, #0]
 80243f4:	691b      	ldr	r3, [r3, #16]
 80243f6:	f003 0302 	and.w	r3, r3, #2
 80243fa:	2b02      	cmp	r3, #2
 80243fc:	d122      	bne.n	8024444 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80243fe:	687b      	ldr	r3, [r7, #4]
 8024400:	681b      	ldr	r3, [r3, #0]
 8024402:	68db      	ldr	r3, [r3, #12]
 8024404:	f003 0302 	and.w	r3, r3, #2
 8024408:	2b02      	cmp	r3, #2
 802440a:	d11b      	bne.n	8024444 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 802440c:	687b      	ldr	r3, [r7, #4]
 802440e:	681b      	ldr	r3, [r3, #0]
 8024410:	f06f 0202 	mvn.w	r2, #2
 8024414:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8024416:	687b      	ldr	r3, [r7, #4]
 8024418:	2201      	movs	r2, #1
 802441a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 802441c:	687b      	ldr	r3, [r7, #4]
 802441e:	681b      	ldr	r3, [r3, #0]
 8024420:	699b      	ldr	r3, [r3, #24]
 8024422:	f003 0303 	and.w	r3, r3, #3
 8024426:	2b00      	cmp	r3, #0
 8024428:	d003      	beq.n	8024432 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 802442a:	6878      	ldr	r0, [r7, #4]
 802442c:	f000 f8ee 	bl	802460c <HAL_TIM_IC_CaptureCallback>
 8024430:	e005      	b.n	802443e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8024432:	6878      	ldr	r0, [r7, #4]
 8024434:	f000 f8e0 	bl	80245f8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8024438:	6878      	ldr	r0, [r7, #4]
 802443a:	f000 f8f1 	bl	8024620 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 802443e:	687b      	ldr	r3, [r7, #4]
 8024440:	2200      	movs	r2, #0
 8024442:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8024444:	687b      	ldr	r3, [r7, #4]
 8024446:	681b      	ldr	r3, [r3, #0]
 8024448:	691b      	ldr	r3, [r3, #16]
 802444a:	f003 0304 	and.w	r3, r3, #4
 802444e:	2b04      	cmp	r3, #4
 8024450:	d122      	bne.n	8024498 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8024452:	687b      	ldr	r3, [r7, #4]
 8024454:	681b      	ldr	r3, [r3, #0]
 8024456:	68db      	ldr	r3, [r3, #12]
 8024458:	f003 0304 	and.w	r3, r3, #4
 802445c:	2b04      	cmp	r3, #4
 802445e:	d11b      	bne.n	8024498 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8024460:	687b      	ldr	r3, [r7, #4]
 8024462:	681b      	ldr	r3, [r3, #0]
 8024464:	f06f 0204 	mvn.w	r2, #4
 8024468:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 802446a:	687b      	ldr	r3, [r7, #4]
 802446c:	2202      	movs	r2, #2
 802446e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8024470:	687b      	ldr	r3, [r7, #4]
 8024472:	681b      	ldr	r3, [r3, #0]
 8024474:	699b      	ldr	r3, [r3, #24]
 8024476:	f403 7340 	and.w	r3, r3, #768	; 0x300
 802447a:	2b00      	cmp	r3, #0
 802447c:	d003      	beq.n	8024486 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 802447e:	6878      	ldr	r0, [r7, #4]
 8024480:	f000 f8c4 	bl	802460c <HAL_TIM_IC_CaptureCallback>
 8024484:	e005      	b.n	8024492 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8024486:	6878      	ldr	r0, [r7, #4]
 8024488:	f000 f8b6 	bl	80245f8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 802448c:	6878      	ldr	r0, [r7, #4]
 802448e:	f000 f8c7 	bl	8024620 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8024492:	687b      	ldr	r3, [r7, #4]
 8024494:	2200      	movs	r2, #0
 8024496:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8024498:	687b      	ldr	r3, [r7, #4]
 802449a:	681b      	ldr	r3, [r3, #0]
 802449c:	691b      	ldr	r3, [r3, #16]
 802449e:	f003 0308 	and.w	r3, r3, #8
 80244a2:	2b08      	cmp	r3, #8
 80244a4:	d122      	bne.n	80244ec <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80244a6:	687b      	ldr	r3, [r7, #4]
 80244a8:	681b      	ldr	r3, [r3, #0]
 80244aa:	68db      	ldr	r3, [r3, #12]
 80244ac:	f003 0308 	and.w	r3, r3, #8
 80244b0:	2b08      	cmp	r3, #8
 80244b2:	d11b      	bne.n	80244ec <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80244b4:	687b      	ldr	r3, [r7, #4]
 80244b6:	681b      	ldr	r3, [r3, #0]
 80244b8:	f06f 0208 	mvn.w	r2, #8
 80244bc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80244be:	687b      	ldr	r3, [r7, #4]
 80244c0:	2204      	movs	r2, #4
 80244c2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80244c4:	687b      	ldr	r3, [r7, #4]
 80244c6:	681b      	ldr	r3, [r3, #0]
 80244c8:	69db      	ldr	r3, [r3, #28]
 80244ca:	f003 0303 	and.w	r3, r3, #3
 80244ce:	2b00      	cmp	r3, #0
 80244d0:	d003      	beq.n	80244da <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80244d2:	6878      	ldr	r0, [r7, #4]
 80244d4:	f000 f89a 	bl	802460c <HAL_TIM_IC_CaptureCallback>
 80244d8:	e005      	b.n	80244e6 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80244da:	6878      	ldr	r0, [r7, #4]
 80244dc:	f000 f88c 	bl	80245f8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80244e0:	6878      	ldr	r0, [r7, #4]
 80244e2:	f000 f89d 	bl	8024620 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80244e6:	687b      	ldr	r3, [r7, #4]
 80244e8:	2200      	movs	r2, #0
 80244ea:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80244ec:	687b      	ldr	r3, [r7, #4]
 80244ee:	681b      	ldr	r3, [r3, #0]
 80244f0:	691b      	ldr	r3, [r3, #16]
 80244f2:	f003 0310 	and.w	r3, r3, #16
 80244f6:	2b10      	cmp	r3, #16
 80244f8:	d122      	bne.n	8024540 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80244fa:	687b      	ldr	r3, [r7, #4]
 80244fc:	681b      	ldr	r3, [r3, #0]
 80244fe:	68db      	ldr	r3, [r3, #12]
 8024500:	f003 0310 	and.w	r3, r3, #16
 8024504:	2b10      	cmp	r3, #16
 8024506:	d11b      	bne.n	8024540 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8024508:	687b      	ldr	r3, [r7, #4]
 802450a:	681b      	ldr	r3, [r3, #0]
 802450c:	f06f 0210 	mvn.w	r2, #16
 8024510:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8024512:	687b      	ldr	r3, [r7, #4]
 8024514:	2208      	movs	r2, #8
 8024516:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8024518:	687b      	ldr	r3, [r7, #4]
 802451a:	681b      	ldr	r3, [r3, #0]
 802451c:	69db      	ldr	r3, [r3, #28]
 802451e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8024522:	2b00      	cmp	r3, #0
 8024524:	d003      	beq.n	802452e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8024526:	6878      	ldr	r0, [r7, #4]
 8024528:	f000 f870 	bl	802460c <HAL_TIM_IC_CaptureCallback>
 802452c:	e005      	b.n	802453a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 802452e:	6878      	ldr	r0, [r7, #4]
 8024530:	f000 f862 	bl	80245f8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8024534:	6878      	ldr	r0, [r7, #4]
 8024536:	f000 f873 	bl	8024620 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 802453a:	687b      	ldr	r3, [r7, #4]
 802453c:	2200      	movs	r2, #0
 802453e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8024540:	687b      	ldr	r3, [r7, #4]
 8024542:	681b      	ldr	r3, [r3, #0]
 8024544:	691b      	ldr	r3, [r3, #16]
 8024546:	f003 0301 	and.w	r3, r3, #1
 802454a:	2b01      	cmp	r3, #1
 802454c:	d10e      	bne.n	802456c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 802454e:	687b      	ldr	r3, [r7, #4]
 8024550:	681b      	ldr	r3, [r3, #0]
 8024552:	68db      	ldr	r3, [r3, #12]
 8024554:	f003 0301 	and.w	r3, r3, #1
 8024558:	2b01      	cmp	r3, #1
 802455a:	d107      	bne.n	802456c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 802455c:	687b      	ldr	r3, [r7, #4]
 802455e:	681b      	ldr	r3, [r3, #0]
 8024560:	f06f 0201 	mvn.w	r2, #1
 8024564:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8024566:	6878      	ldr	r0, [r7, #4]
 8024568:	f7fc fa42 	bl	80209f0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 802456c:	687b      	ldr	r3, [r7, #4]
 802456e:	681b      	ldr	r3, [r3, #0]
 8024570:	691b      	ldr	r3, [r3, #16]
 8024572:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8024576:	2b80      	cmp	r3, #128	; 0x80
 8024578:	d10e      	bne.n	8024598 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 802457a:	687b      	ldr	r3, [r7, #4]
 802457c:	681b      	ldr	r3, [r3, #0]
 802457e:	68db      	ldr	r3, [r3, #12]
 8024580:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8024584:	2b80      	cmp	r3, #128	; 0x80
 8024586:	d107      	bne.n	8024598 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8024588:	687b      	ldr	r3, [r7, #4]
 802458a:	681b      	ldr	r3, [r3, #0]
 802458c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8024590:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8024592:	6878      	ldr	r0, [r7, #4]
 8024594:	f000 f902 	bl	802479c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8024598:	687b      	ldr	r3, [r7, #4]
 802459a:	681b      	ldr	r3, [r3, #0]
 802459c:	691b      	ldr	r3, [r3, #16]
 802459e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80245a2:	2b40      	cmp	r3, #64	; 0x40
 80245a4:	d10e      	bne.n	80245c4 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80245a6:	687b      	ldr	r3, [r7, #4]
 80245a8:	681b      	ldr	r3, [r3, #0]
 80245aa:	68db      	ldr	r3, [r3, #12]
 80245ac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80245b0:	2b40      	cmp	r3, #64	; 0x40
 80245b2:	d107      	bne.n	80245c4 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80245b4:	687b      	ldr	r3, [r7, #4]
 80245b6:	681b      	ldr	r3, [r3, #0]
 80245b8:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80245bc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80245be:	6878      	ldr	r0, [r7, #4]
 80245c0:	f000 f838 	bl	8024634 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80245c4:	687b      	ldr	r3, [r7, #4]
 80245c6:	681b      	ldr	r3, [r3, #0]
 80245c8:	691b      	ldr	r3, [r3, #16]
 80245ca:	f003 0320 	and.w	r3, r3, #32
 80245ce:	2b20      	cmp	r3, #32
 80245d0:	d10e      	bne.n	80245f0 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80245d2:	687b      	ldr	r3, [r7, #4]
 80245d4:	681b      	ldr	r3, [r3, #0]
 80245d6:	68db      	ldr	r3, [r3, #12]
 80245d8:	f003 0320 	and.w	r3, r3, #32
 80245dc:	2b20      	cmp	r3, #32
 80245de:	d107      	bne.n	80245f0 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80245e0:	687b      	ldr	r3, [r7, #4]
 80245e2:	681b      	ldr	r3, [r3, #0]
 80245e4:	f06f 0220 	mvn.w	r2, #32
 80245e8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80245ea:	6878      	ldr	r0, [r7, #4]
 80245ec:	f000 f8cc 	bl	8024788 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80245f0:	bf00      	nop
 80245f2:	3708      	adds	r7, #8
 80245f4:	46bd      	mov	sp, r7
 80245f6:	bd80      	pop	{r7, pc}

080245f8 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80245f8:	b480      	push	{r7}
 80245fa:	b083      	sub	sp, #12
 80245fc:	af00      	add	r7, sp, #0
 80245fe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8024600:	bf00      	nop
 8024602:	370c      	adds	r7, #12
 8024604:	46bd      	mov	sp, r7
 8024606:	f85d 7b04 	ldr.w	r7, [sp], #4
 802460a:	4770      	bx	lr

0802460c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 802460c:	b480      	push	{r7}
 802460e:	b083      	sub	sp, #12
 8024610:	af00      	add	r7, sp, #0
 8024612:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8024614:	bf00      	nop
 8024616:	370c      	adds	r7, #12
 8024618:	46bd      	mov	sp, r7
 802461a:	f85d 7b04 	ldr.w	r7, [sp], #4
 802461e:	4770      	bx	lr

08024620 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8024620:	b480      	push	{r7}
 8024622:	b083      	sub	sp, #12
 8024624:	af00      	add	r7, sp, #0
 8024626:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8024628:	bf00      	nop
 802462a:	370c      	adds	r7, #12
 802462c:	46bd      	mov	sp, r7
 802462e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8024632:	4770      	bx	lr

08024634 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8024634:	b480      	push	{r7}
 8024636:	b083      	sub	sp, #12
 8024638:	af00      	add	r7, sp, #0
 802463a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 802463c:	bf00      	nop
 802463e:	370c      	adds	r7, #12
 8024640:	46bd      	mov	sp, r7
 8024642:	f85d 7b04 	ldr.w	r7, [sp], #4
 8024646:	4770      	bx	lr

08024648 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8024648:	b480      	push	{r7}
 802464a:	b085      	sub	sp, #20
 802464c:	af00      	add	r7, sp, #0
 802464e:	6078      	str	r0, [r7, #4]
 8024650:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8024652:	687b      	ldr	r3, [r7, #4]
 8024654:	681b      	ldr	r3, [r3, #0]
 8024656:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8024658:	687b      	ldr	r3, [r7, #4]
 802465a:	4a40      	ldr	r2, [pc, #256]	; (802475c <TIM_Base_SetConfig+0x114>)
 802465c:	4293      	cmp	r3, r2
 802465e:	d013      	beq.n	8024688 <TIM_Base_SetConfig+0x40>
 8024660:	687b      	ldr	r3, [r7, #4]
 8024662:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8024666:	d00f      	beq.n	8024688 <TIM_Base_SetConfig+0x40>
 8024668:	687b      	ldr	r3, [r7, #4]
 802466a:	4a3d      	ldr	r2, [pc, #244]	; (8024760 <TIM_Base_SetConfig+0x118>)
 802466c:	4293      	cmp	r3, r2
 802466e:	d00b      	beq.n	8024688 <TIM_Base_SetConfig+0x40>
 8024670:	687b      	ldr	r3, [r7, #4]
 8024672:	4a3c      	ldr	r2, [pc, #240]	; (8024764 <TIM_Base_SetConfig+0x11c>)
 8024674:	4293      	cmp	r3, r2
 8024676:	d007      	beq.n	8024688 <TIM_Base_SetConfig+0x40>
 8024678:	687b      	ldr	r3, [r7, #4]
 802467a:	4a3b      	ldr	r2, [pc, #236]	; (8024768 <TIM_Base_SetConfig+0x120>)
 802467c:	4293      	cmp	r3, r2
 802467e:	d003      	beq.n	8024688 <TIM_Base_SetConfig+0x40>
 8024680:	687b      	ldr	r3, [r7, #4]
 8024682:	4a3a      	ldr	r2, [pc, #232]	; (802476c <TIM_Base_SetConfig+0x124>)
 8024684:	4293      	cmp	r3, r2
 8024686:	d108      	bne.n	802469a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8024688:	68fb      	ldr	r3, [r7, #12]
 802468a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 802468e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8024690:	683b      	ldr	r3, [r7, #0]
 8024692:	685b      	ldr	r3, [r3, #4]
 8024694:	68fa      	ldr	r2, [r7, #12]
 8024696:	4313      	orrs	r3, r2
 8024698:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 802469a:	687b      	ldr	r3, [r7, #4]
 802469c:	4a2f      	ldr	r2, [pc, #188]	; (802475c <TIM_Base_SetConfig+0x114>)
 802469e:	4293      	cmp	r3, r2
 80246a0:	d02b      	beq.n	80246fa <TIM_Base_SetConfig+0xb2>
 80246a2:	687b      	ldr	r3, [r7, #4]
 80246a4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80246a8:	d027      	beq.n	80246fa <TIM_Base_SetConfig+0xb2>
 80246aa:	687b      	ldr	r3, [r7, #4]
 80246ac:	4a2c      	ldr	r2, [pc, #176]	; (8024760 <TIM_Base_SetConfig+0x118>)
 80246ae:	4293      	cmp	r3, r2
 80246b0:	d023      	beq.n	80246fa <TIM_Base_SetConfig+0xb2>
 80246b2:	687b      	ldr	r3, [r7, #4]
 80246b4:	4a2b      	ldr	r2, [pc, #172]	; (8024764 <TIM_Base_SetConfig+0x11c>)
 80246b6:	4293      	cmp	r3, r2
 80246b8:	d01f      	beq.n	80246fa <TIM_Base_SetConfig+0xb2>
 80246ba:	687b      	ldr	r3, [r7, #4]
 80246bc:	4a2a      	ldr	r2, [pc, #168]	; (8024768 <TIM_Base_SetConfig+0x120>)
 80246be:	4293      	cmp	r3, r2
 80246c0:	d01b      	beq.n	80246fa <TIM_Base_SetConfig+0xb2>
 80246c2:	687b      	ldr	r3, [r7, #4]
 80246c4:	4a29      	ldr	r2, [pc, #164]	; (802476c <TIM_Base_SetConfig+0x124>)
 80246c6:	4293      	cmp	r3, r2
 80246c8:	d017      	beq.n	80246fa <TIM_Base_SetConfig+0xb2>
 80246ca:	687b      	ldr	r3, [r7, #4]
 80246cc:	4a28      	ldr	r2, [pc, #160]	; (8024770 <TIM_Base_SetConfig+0x128>)
 80246ce:	4293      	cmp	r3, r2
 80246d0:	d013      	beq.n	80246fa <TIM_Base_SetConfig+0xb2>
 80246d2:	687b      	ldr	r3, [r7, #4]
 80246d4:	4a27      	ldr	r2, [pc, #156]	; (8024774 <TIM_Base_SetConfig+0x12c>)
 80246d6:	4293      	cmp	r3, r2
 80246d8:	d00f      	beq.n	80246fa <TIM_Base_SetConfig+0xb2>
 80246da:	687b      	ldr	r3, [r7, #4]
 80246dc:	4a26      	ldr	r2, [pc, #152]	; (8024778 <TIM_Base_SetConfig+0x130>)
 80246de:	4293      	cmp	r3, r2
 80246e0:	d00b      	beq.n	80246fa <TIM_Base_SetConfig+0xb2>
 80246e2:	687b      	ldr	r3, [r7, #4]
 80246e4:	4a25      	ldr	r2, [pc, #148]	; (802477c <TIM_Base_SetConfig+0x134>)
 80246e6:	4293      	cmp	r3, r2
 80246e8:	d007      	beq.n	80246fa <TIM_Base_SetConfig+0xb2>
 80246ea:	687b      	ldr	r3, [r7, #4]
 80246ec:	4a24      	ldr	r2, [pc, #144]	; (8024780 <TIM_Base_SetConfig+0x138>)
 80246ee:	4293      	cmp	r3, r2
 80246f0:	d003      	beq.n	80246fa <TIM_Base_SetConfig+0xb2>
 80246f2:	687b      	ldr	r3, [r7, #4]
 80246f4:	4a23      	ldr	r2, [pc, #140]	; (8024784 <TIM_Base_SetConfig+0x13c>)
 80246f6:	4293      	cmp	r3, r2
 80246f8:	d108      	bne.n	802470c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80246fa:	68fb      	ldr	r3, [r7, #12]
 80246fc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8024700:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8024702:	683b      	ldr	r3, [r7, #0]
 8024704:	68db      	ldr	r3, [r3, #12]
 8024706:	68fa      	ldr	r2, [r7, #12]
 8024708:	4313      	orrs	r3, r2
 802470a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 802470c:	68fb      	ldr	r3, [r7, #12]
 802470e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8024712:	683b      	ldr	r3, [r7, #0]
 8024714:	695b      	ldr	r3, [r3, #20]
 8024716:	4313      	orrs	r3, r2
 8024718:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 802471a:	687b      	ldr	r3, [r7, #4]
 802471c:	68fa      	ldr	r2, [r7, #12]
 802471e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8024720:	683b      	ldr	r3, [r7, #0]
 8024722:	689a      	ldr	r2, [r3, #8]
 8024724:	687b      	ldr	r3, [r7, #4]
 8024726:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8024728:	683b      	ldr	r3, [r7, #0]
 802472a:	681a      	ldr	r2, [r3, #0]
 802472c:	687b      	ldr	r3, [r7, #4]
 802472e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8024730:	687b      	ldr	r3, [r7, #4]
 8024732:	4a0a      	ldr	r2, [pc, #40]	; (802475c <TIM_Base_SetConfig+0x114>)
 8024734:	4293      	cmp	r3, r2
 8024736:	d003      	beq.n	8024740 <TIM_Base_SetConfig+0xf8>
 8024738:	687b      	ldr	r3, [r7, #4]
 802473a:	4a0c      	ldr	r2, [pc, #48]	; (802476c <TIM_Base_SetConfig+0x124>)
 802473c:	4293      	cmp	r3, r2
 802473e:	d103      	bne.n	8024748 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8024740:	683b      	ldr	r3, [r7, #0]
 8024742:	691a      	ldr	r2, [r3, #16]
 8024744:	687b      	ldr	r3, [r7, #4]
 8024746:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8024748:	687b      	ldr	r3, [r7, #4]
 802474a:	2201      	movs	r2, #1
 802474c:	615a      	str	r2, [r3, #20]
}
 802474e:	bf00      	nop
 8024750:	3714      	adds	r7, #20
 8024752:	46bd      	mov	sp, r7
 8024754:	f85d 7b04 	ldr.w	r7, [sp], #4
 8024758:	4770      	bx	lr
 802475a:	bf00      	nop
 802475c:	40010000 	.word	0x40010000
 8024760:	40000400 	.word	0x40000400
 8024764:	40000800 	.word	0x40000800
 8024768:	40000c00 	.word	0x40000c00
 802476c:	40010400 	.word	0x40010400
 8024770:	40014000 	.word	0x40014000
 8024774:	40014400 	.word	0x40014400
 8024778:	40014800 	.word	0x40014800
 802477c:	40001800 	.word	0x40001800
 8024780:	40001c00 	.word	0x40001c00
 8024784:	40002000 	.word	0x40002000

08024788 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8024788:	b480      	push	{r7}
 802478a:	b083      	sub	sp, #12
 802478c:	af00      	add	r7, sp, #0
 802478e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8024790:	bf00      	nop
 8024792:	370c      	adds	r7, #12
 8024794:	46bd      	mov	sp, r7
 8024796:	f85d 7b04 	ldr.w	r7, [sp], #4
 802479a:	4770      	bx	lr

0802479c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 802479c:	b480      	push	{r7}
 802479e:	b083      	sub	sp, #12
 80247a0:	af00      	add	r7, sp, #0
 80247a2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80247a4:	bf00      	nop
 80247a6:	370c      	adds	r7, #12
 80247a8:	46bd      	mov	sp, r7
 80247aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80247ae:	4770      	bx	lr

080247b0 <MX_LWIP_Init>:

/**
  * LwIP initialization function
  */
void MX_LWIP_Init(void)
{
 80247b0:	b5b0      	push	{r4, r5, r7, lr}
 80247b2:	b08c      	sub	sp, #48	; 0x30
 80247b4:	af04      	add	r7, sp, #16
  /* IP addresses initialization */
  IP_ADDRESS[0] = 192;
 80247b6:	4b96      	ldr	r3, [pc, #600]	; (8024a10 <MX_LWIP_Init+0x260>)
 80247b8:	22c0      	movs	r2, #192	; 0xc0
 80247ba:	701a      	strb	r2, [r3, #0]
  IP_ADDRESS[1] = 168;
 80247bc:	4b94      	ldr	r3, [pc, #592]	; (8024a10 <MX_LWIP_Init+0x260>)
 80247be:	22a8      	movs	r2, #168	; 0xa8
 80247c0:	705a      	strb	r2, [r3, #1]
  IP_ADDRESS[2] = 50;
 80247c2:	4b93      	ldr	r3, [pc, #588]	; (8024a10 <MX_LWIP_Init+0x260>)
 80247c4:	2232      	movs	r2, #50	; 0x32
 80247c6:	709a      	strb	r2, [r3, #2]
  IP_ADDRESS[3] = 10;
 80247c8:	4b91      	ldr	r3, [pc, #580]	; (8024a10 <MX_LWIP_Init+0x260>)
 80247ca:	220a      	movs	r2, #10
 80247cc:	70da      	strb	r2, [r3, #3]
  NETMASK_ADDRESS[0] = 255;
 80247ce:	4b91      	ldr	r3, [pc, #580]	; (8024a14 <MX_LWIP_Init+0x264>)
 80247d0:	22ff      	movs	r2, #255	; 0xff
 80247d2:	701a      	strb	r2, [r3, #0]
  NETMASK_ADDRESS[1] = 255;
 80247d4:	4b8f      	ldr	r3, [pc, #572]	; (8024a14 <MX_LWIP_Init+0x264>)
 80247d6:	22ff      	movs	r2, #255	; 0xff
 80247d8:	705a      	strb	r2, [r3, #1]
  NETMASK_ADDRESS[2] = 255;
 80247da:	4b8e      	ldr	r3, [pc, #568]	; (8024a14 <MX_LWIP_Init+0x264>)
 80247dc:	22ff      	movs	r2, #255	; 0xff
 80247de:	709a      	strb	r2, [r3, #2]
  NETMASK_ADDRESS[3] = 0;
 80247e0:	4b8c      	ldr	r3, [pc, #560]	; (8024a14 <MX_LWIP_Init+0x264>)
 80247e2:	2200      	movs	r2, #0
 80247e4:	70da      	strb	r2, [r3, #3]
  GATEWAY_ADDRESS[0] = 192;
 80247e6:	4b8c      	ldr	r3, [pc, #560]	; (8024a18 <MX_LWIP_Init+0x268>)
 80247e8:	22c0      	movs	r2, #192	; 0xc0
 80247ea:	701a      	strb	r2, [r3, #0]
  GATEWAY_ADDRESS[1] = 168;
 80247ec:	4b8a      	ldr	r3, [pc, #552]	; (8024a18 <MX_LWIP_Init+0x268>)
 80247ee:	22a8      	movs	r2, #168	; 0xa8
 80247f0:	705a      	strb	r2, [r3, #1]
  GATEWAY_ADDRESS[2] = 50;
 80247f2:	4b89      	ldr	r3, [pc, #548]	; (8024a18 <MX_LWIP_Init+0x268>)
 80247f4:	2232      	movs	r2, #50	; 0x32
 80247f6:	709a      	strb	r2, [r3, #2]
  GATEWAY_ADDRESS[3] = 1;
 80247f8:	4b87      	ldr	r3, [pc, #540]	; (8024a18 <MX_LWIP_Init+0x268>)
 80247fa:	2201      	movs	r2, #1
 80247fc:	70da      	strb	r2, [r3, #3]

/* USER CODE BEGIN IP_ADDRESSES */
/* USER CODE END IP_ADDRESSES */

  /* Initilialize the LwIP stack with RTOS */
  tcpip_init( NULL, NULL );
 80247fe:	2100      	movs	r1, #0
 8024800:	2000      	movs	r0, #0
 8024802:	f008 f845 	bl	802c890 <tcpip_init>

  /* IP addresses initialization without DHCP (IPv4) */
  IP4_ADDR(&ipaddr, IP_ADDRESS[0], IP_ADDRESS[1], IP_ADDRESS[2], IP_ADDRESS[3]);
 8024806:	4b82      	ldr	r3, [pc, #520]	; (8024a10 <MX_LWIP_Init+0x260>)
 8024808:	781b      	ldrb	r3, [r3, #0]
 802480a:	061a      	lsls	r2, r3, #24
 802480c:	4b80      	ldr	r3, [pc, #512]	; (8024a10 <MX_LWIP_Init+0x260>)
 802480e:	785b      	ldrb	r3, [r3, #1]
 8024810:	041b      	lsls	r3, r3, #16
 8024812:	431a      	orrs	r2, r3
 8024814:	4b7e      	ldr	r3, [pc, #504]	; (8024a10 <MX_LWIP_Init+0x260>)
 8024816:	789b      	ldrb	r3, [r3, #2]
 8024818:	021b      	lsls	r3, r3, #8
 802481a:	4313      	orrs	r3, r2
 802481c:	4a7c      	ldr	r2, [pc, #496]	; (8024a10 <MX_LWIP_Init+0x260>)
 802481e:	78d2      	ldrb	r2, [r2, #3]
 8024820:	4313      	orrs	r3, r2
 8024822:	061a      	lsls	r2, r3, #24
 8024824:	4b7a      	ldr	r3, [pc, #488]	; (8024a10 <MX_LWIP_Init+0x260>)
 8024826:	781b      	ldrb	r3, [r3, #0]
 8024828:	0619      	lsls	r1, r3, #24
 802482a:	4b79      	ldr	r3, [pc, #484]	; (8024a10 <MX_LWIP_Init+0x260>)
 802482c:	785b      	ldrb	r3, [r3, #1]
 802482e:	041b      	lsls	r3, r3, #16
 8024830:	4319      	orrs	r1, r3
 8024832:	4b77      	ldr	r3, [pc, #476]	; (8024a10 <MX_LWIP_Init+0x260>)
 8024834:	789b      	ldrb	r3, [r3, #2]
 8024836:	021b      	lsls	r3, r3, #8
 8024838:	430b      	orrs	r3, r1
 802483a:	4975      	ldr	r1, [pc, #468]	; (8024a10 <MX_LWIP_Init+0x260>)
 802483c:	78c9      	ldrb	r1, [r1, #3]
 802483e:	430b      	orrs	r3, r1
 8024840:	021b      	lsls	r3, r3, #8
 8024842:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8024846:	431a      	orrs	r2, r3
 8024848:	4b71      	ldr	r3, [pc, #452]	; (8024a10 <MX_LWIP_Init+0x260>)
 802484a:	781b      	ldrb	r3, [r3, #0]
 802484c:	0619      	lsls	r1, r3, #24
 802484e:	4b70      	ldr	r3, [pc, #448]	; (8024a10 <MX_LWIP_Init+0x260>)
 8024850:	785b      	ldrb	r3, [r3, #1]
 8024852:	041b      	lsls	r3, r3, #16
 8024854:	4319      	orrs	r1, r3
 8024856:	4b6e      	ldr	r3, [pc, #440]	; (8024a10 <MX_LWIP_Init+0x260>)
 8024858:	789b      	ldrb	r3, [r3, #2]
 802485a:	021b      	lsls	r3, r3, #8
 802485c:	430b      	orrs	r3, r1
 802485e:	496c      	ldr	r1, [pc, #432]	; (8024a10 <MX_LWIP_Init+0x260>)
 8024860:	78c9      	ldrb	r1, [r1, #3]
 8024862:	430b      	orrs	r3, r1
 8024864:	0a1b      	lsrs	r3, r3, #8
 8024866:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 802486a:	431a      	orrs	r2, r3
 802486c:	4b68      	ldr	r3, [pc, #416]	; (8024a10 <MX_LWIP_Init+0x260>)
 802486e:	781b      	ldrb	r3, [r3, #0]
 8024870:	0619      	lsls	r1, r3, #24
 8024872:	4b67      	ldr	r3, [pc, #412]	; (8024a10 <MX_LWIP_Init+0x260>)
 8024874:	785b      	ldrb	r3, [r3, #1]
 8024876:	041b      	lsls	r3, r3, #16
 8024878:	4319      	orrs	r1, r3
 802487a:	4b65      	ldr	r3, [pc, #404]	; (8024a10 <MX_LWIP_Init+0x260>)
 802487c:	789b      	ldrb	r3, [r3, #2]
 802487e:	021b      	lsls	r3, r3, #8
 8024880:	430b      	orrs	r3, r1
 8024882:	4963      	ldr	r1, [pc, #396]	; (8024a10 <MX_LWIP_Init+0x260>)
 8024884:	78c9      	ldrb	r1, [r1, #3]
 8024886:	430b      	orrs	r3, r1
 8024888:	0e1b      	lsrs	r3, r3, #24
 802488a:	4313      	orrs	r3, r2
 802488c:	4a63      	ldr	r2, [pc, #396]	; (8024a1c <MX_LWIP_Init+0x26c>)
 802488e:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&netmask, NETMASK_ADDRESS[0], NETMASK_ADDRESS[1] , NETMASK_ADDRESS[2], NETMASK_ADDRESS[3]);
 8024890:	4b60      	ldr	r3, [pc, #384]	; (8024a14 <MX_LWIP_Init+0x264>)
 8024892:	781b      	ldrb	r3, [r3, #0]
 8024894:	061a      	lsls	r2, r3, #24
 8024896:	4b5f      	ldr	r3, [pc, #380]	; (8024a14 <MX_LWIP_Init+0x264>)
 8024898:	785b      	ldrb	r3, [r3, #1]
 802489a:	041b      	lsls	r3, r3, #16
 802489c:	431a      	orrs	r2, r3
 802489e:	4b5d      	ldr	r3, [pc, #372]	; (8024a14 <MX_LWIP_Init+0x264>)
 80248a0:	789b      	ldrb	r3, [r3, #2]
 80248a2:	021b      	lsls	r3, r3, #8
 80248a4:	4313      	orrs	r3, r2
 80248a6:	4a5b      	ldr	r2, [pc, #364]	; (8024a14 <MX_LWIP_Init+0x264>)
 80248a8:	78d2      	ldrb	r2, [r2, #3]
 80248aa:	4313      	orrs	r3, r2
 80248ac:	061a      	lsls	r2, r3, #24
 80248ae:	4b59      	ldr	r3, [pc, #356]	; (8024a14 <MX_LWIP_Init+0x264>)
 80248b0:	781b      	ldrb	r3, [r3, #0]
 80248b2:	0619      	lsls	r1, r3, #24
 80248b4:	4b57      	ldr	r3, [pc, #348]	; (8024a14 <MX_LWIP_Init+0x264>)
 80248b6:	785b      	ldrb	r3, [r3, #1]
 80248b8:	041b      	lsls	r3, r3, #16
 80248ba:	4319      	orrs	r1, r3
 80248bc:	4b55      	ldr	r3, [pc, #340]	; (8024a14 <MX_LWIP_Init+0x264>)
 80248be:	789b      	ldrb	r3, [r3, #2]
 80248c0:	021b      	lsls	r3, r3, #8
 80248c2:	430b      	orrs	r3, r1
 80248c4:	4953      	ldr	r1, [pc, #332]	; (8024a14 <MX_LWIP_Init+0x264>)
 80248c6:	78c9      	ldrb	r1, [r1, #3]
 80248c8:	430b      	orrs	r3, r1
 80248ca:	021b      	lsls	r3, r3, #8
 80248cc:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80248d0:	431a      	orrs	r2, r3
 80248d2:	4b50      	ldr	r3, [pc, #320]	; (8024a14 <MX_LWIP_Init+0x264>)
 80248d4:	781b      	ldrb	r3, [r3, #0]
 80248d6:	0619      	lsls	r1, r3, #24
 80248d8:	4b4e      	ldr	r3, [pc, #312]	; (8024a14 <MX_LWIP_Init+0x264>)
 80248da:	785b      	ldrb	r3, [r3, #1]
 80248dc:	041b      	lsls	r3, r3, #16
 80248de:	4319      	orrs	r1, r3
 80248e0:	4b4c      	ldr	r3, [pc, #304]	; (8024a14 <MX_LWIP_Init+0x264>)
 80248e2:	789b      	ldrb	r3, [r3, #2]
 80248e4:	021b      	lsls	r3, r3, #8
 80248e6:	430b      	orrs	r3, r1
 80248e8:	494a      	ldr	r1, [pc, #296]	; (8024a14 <MX_LWIP_Init+0x264>)
 80248ea:	78c9      	ldrb	r1, [r1, #3]
 80248ec:	430b      	orrs	r3, r1
 80248ee:	0a1b      	lsrs	r3, r3, #8
 80248f0:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80248f4:	431a      	orrs	r2, r3
 80248f6:	4b47      	ldr	r3, [pc, #284]	; (8024a14 <MX_LWIP_Init+0x264>)
 80248f8:	781b      	ldrb	r3, [r3, #0]
 80248fa:	0619      	lsls	r1, r3, #24
 80248fc:	4b45      	ldr	r3, [pc, #276]	; (8024a14 <MX_LWIP_Init+0x264>)
 80248fe:	785b      	ldrb	r3, [r3, #1]
 8024900:	041b      	lsls	r3, r3, #16
 8024902:	4319      	orrs	r1, r3
 8024904:	4b43      	ldr	r3, [pc, #268]	; (8024a14 <MX_LWIP_Init+0x264>)
 8024906:	789b      	ldrb	r3, [r3, #2]
 8024908:	021b      	lsls	r3, r3, #8
 802490a:	430b      	orrs	r3, r1
 802490c:	4941      	ldr	r1, [pc, #260]	; (8024a14 <MX_LWIP_Init+0x264>)
 802490e:	78c9      	ldrb	r1, [r1, #3]
 8024910:	430b      	orrs	r3, r1
 8024912:	0e1b      	lsrs	r3, r3, #24
 8024914:	4313      	orrs	r3, r2
 8024916:	4a42      	ldr	r2, [pc, #264]	; (8024a20 <MX_LWIP_Init+0x270>)
 8024918:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&gw, GATEWAY_ADDRESS[0], GATEWAY_ADDRESS[1], GATEWAY_ADDRESS[2], GATEWAY_ADDRESS[3]);
 802491a:	4b3f      	ldr	r3, [pc, #252]	; (8024a18 <MX_LWIP_Init+0x268>)
 802491c:	781b      	ldrb	r3, [r3, #0]
 802491e:	061a      	lsls	r2, r3, #24
 8024920:	4b3d      	ldr	r3, [pc, #244]	; (8024a18 <MX_LWIP_Init+0x268>)
 8024922:	785b      	ldrb	r3, [r3, #1]
 8024924:	041b      	lsls	r3, r3, #16
 8024926:	431a      	orrs	r2, r3
 8024928:	4b3b      	ldr	r3, [pc, #236]	; (8024a18 <MX_LWIP_Init+0x268>)
 802492a:	789b      	ldrb	r3, [r3, #2]
 802492c:	021b      	lsls	r3, r3, #8
 802492e:	4313      	orrs	r3, r2
 8024930:	4a39      	ldr	r2, [pc, #228]	; (8024a18 <MX_LWIP_Init+0x268>)
 8024932:	78d2      	ldrb	r2, [r2, #3]
 8024934:	4313      	orrs	r3, r2
 8024936:	061a      	lsls	r2, r3, #24
 8024938:	4b37      	ldr	r3, [pc, #220]	; (8024a18 <MX_LWIP_Init+0x268>)
 802493a:	781b      	ldrb	r3, [r3, #0]
 802493c:	0619      	lsls	r1, r3, #24
 802493e:	4b36      	ldr	r3, [pc, #216]	; (8024a18 <MX_LWIP_Init+0x268>)
 8024940:	785b      	ldrb	r3, [r3, #1]
 8024942:	041b      	lsls	r3, r3, #16
 8024944:	4319      	orrs	r1, r3
 8024946:	4b34      	ldr	r3, [pc, #208]	; (8024a18 <MX_LWIP_Init+0x268>)
 8024948:	789b      	ldrb	r3, [r3, #2]
 802494a:	021b      	lsls	r3, r3, #8
 802494c:	430b      	orrs	r3, r1
 802494e:	4932      	ldr	r1, [pc, #200]	; (8024a18 <MX_LWIP_Init+0x268>)
 8024950:	78c9      	ldrb	r1, [r1, #3]
 8024952:	430b      	orrs	r3, r1
 8024954:	021b      	lsls	r3, r3, #8
 8024956:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 802495a:	431a      	orrs	r2, r3
 802495c:	4b2e      	ldr	r3, [pc, #184]	; (8024a18 <MX_LWIP_Init+0x268>)
 802495e:	781b      	ldrb	r3, [r3, #0]
 8024960:	0619      	lsls	r1, r3, #24
 8024962:	4b2d      	ldr	r3, [pc, #180]	; (8024a18 <MX_LWIP_Init+0x268>)
 8024964:	785b      	ldrb	r3, [r3, #1]
 8024966:	041b      	lsls	r3, r3, #16
 8024968:	4319      	orrs	r1, r3
 802496a:	4b2b      	ldr	r3, [pc, #172]	; (8024a18 <MX_LWIP_Init+0x268>)
 802496c:	789b      	ldrb	r3, [r3, #2]
 802496e:	021b      	lsls	r3, r3, #8
 8024970:	430b      	orrs	r3, r1
 8024972:	4929      	ldr	r1, [pc, #164]	; (8024a18 <MX_LWIP_Init+0x268>)
 8024974:	78c9      	ldrb	r1, [r1, #3]
 8024976:	430b      	orrs	r3, r1
 8024978:	0a1b      	lsrs	r3, r3, #8
 802497a:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 802497e:	431a      	orrs	r2, r3
 8024980:	4b25      	ldr	r3, [pc, #148]	; (8024a18 <MX_LWIP_Init+0x268>)
 8024982:	781b      	ldrb	r3, [r3, #0]
 8024984:	0619      	lsls	r1, r3, #24
 8024986:	4b24      	ldr	r3, [pc, #144]	; (8024a18 <MX_LWIP_Init+0x268>)
 8024988:	785b      	ldrb	r3, [r3, #1]
 802498a:	041b      	lsls	r3, r3, #16
 802498c:	4319      	orrs	r1, r3
 802498e:	4b22      	ldr	r3, [pc, #136]	; (8024a18 <MX_LWIP_Init+0x268>)
 8024990:	789b      	ldrb	r3, [r3, #2]
 8024992:	021b      	lsls	r3, r3, #8
 8024994:	430b      	orrs	r3, r1
 8024996:	4920      	ldr	r1, [pc, #128]	; (8024a18 <MX_LWIP_Init+0x268>)
 8024998:	78c9      	ldrb	r1, [r1, #3]
 802499a:	430b      	orrs	r3, r1
 802499c:	0e1b      	lsrs	r3, r3, #24
 802499e:	4313      	orrs	r3, r2
 80249a0:	4a20      	ldr	r2, [pc, #128]	; (8024a24 <MX_LWIP_Init+0x274>)
 80249a2:	6013      	str	r3, [r2, #0]

  /* add the network interface (IPv4/IPv6) with RTOS */
  netif_add(&gnetif, &ipaddr, &netmask, &gw, NULL, &ethernetif_init, &tcpip_input);
 80249a4:	4b20      	ldr	r3, [pc, #128]	; (8024a28 <MX_LWIP_Init+0x278>)
 80249a6:	9302      	str	r3, [sp, #8]
 80249a8:	4b20      	ldr	r3, [pc, #128]	; (8024a2c <MX_LWIP_Init+0x27c>)
 80249aa:	9301      	str	r3, [sp, #4]
 80249ac:	2300      	movs	r3, #0
 80249ae:	9300      	str	r3, [sp, #0]
 80249b0:	4b1c      	ldr	r3, [pc, #112]	; (8024a24 <MX_LWIP_Init+0x274>)
 80249b2:	4a1b      	ldr	r2, [pc, #108]	; (8024a20 <MX_LWIP_Init+0x270>)
 80249b4:	4919      	ldr	r1, [pc, #100]	; (8024a1c <MX_LWIP_Init+0x26c>)
 80249b6:	481e      	ldr	r0, [pc, #120]	; (8024a30 <MX_LWIP_Init+0x280>)
 80249b8:	f008 fe04 	bl	802d5c4 <netif_add>

  /* Registers the default network interface */
  netif_set_default(&gnetif);
 80249bc:	481c      	ldr	r0, [pc, #112]	; (8024a30 <MX_LWIP_Init+0x280>)
 80249be:	f008 ffb3 	bl	802d928 <netif_set_default>

  if (netif_is_link_up(&gnetif))
 80249c2:	4b1b      	ldr	r3, [pc, #108]	; (8024a30 <MX_LWIP_Init+0x280>)
 80249c4:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80249c8:	089b      	lsrs	r3, r3, #2
 80249ca:	f003 0301 	and.w	r3, r3, #1
 80249ce:	b2db      	uxtb	r3, r3
 80249d0:	2b00      	cmp	r3, #0
 80249d2:	d003      	beq.n	80249dc <MX_LWIP_Init+0x22c>
  {
    /* When the netif is fully configured this function must be called */
    netif_set_up(&gnetif);
 80249d4:	4816      	ldr	r0, [pc, #88]	; (8024a30 <MX_LWIP_Init+0x280>)
 80249d6:	f008 ffb7 	bl	802d948 <netif_set_up>
 80249da:	e002      	b.n	80249e2 <MX_LWIP_Init+0x232>
  }
  else
  {
    /* When the netif link is down this function must be called */
    netif_set_down(&gnetif);
 80249dc:	4814      	ldr	r0, [pc, #80]	; (8024a30 <MX_LWIP_Init+0x280>)
 80249de:	f009 f81f 	bl	802da20 <netif_set_down>
  }

  /* Set the link callback function, this function is called on change of link status*/
  netif_set_link_callback(&gnetif, ethernet_link_status_updated);
 80249e2:	4914      	ldr	r1, [pc, #80]	; (8024a34 <MX_LWIP_Init+0x284>)
 80249e4:	4812      	ldr	r0, [pc, #72]	; (8024a30 <MX_LWIP_Init+0x280>)
 80249e6:	f009 f8b1 	bl	802db4c <netif_set_link_callback>

  /* Create the Ethernet link handler thread */
/* USER CODE BEGIN H7_OS_THREAD_DEF_CREATE_CMSIS_RTOS_V1 */
  osThreadDef(EthLink, ethernet_link_thread, osPriorityBelowNormal, 0, configMINIMAL_STACK_SIZE *2);
 80249ea:	4b13      	ldr	r3, [pc, #76]	; (8024a38 <MX_LWIP_Init+0x288>)
 80249ec:	1d3c      	adds	r4, r7, #4
 80249ee:	461d      	mov	r5, r3
 80249f0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80249f2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80249f4:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80249f8:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  osThreadCreate (osThread(EthLink), &gnetif);
 80249fc:	1d3b      	adds	r3, r7, #4
 80249fe:	490c      	ldr	r1, [pc, #48]	; (8024a30 <MX_LWIP_Init+0x280>)
 8024a00:	4618      	mov	r0, r3
 8024a02:	f000 fd07 	bl	8025414 <osThreadCreate>
/* USER CODE END H7_OS_THREAD_DEF_CREATE_CMSIS_RTOS_V1 */

/* USER CODE BEGIN 3 */

/* USER CODE END 3 */
}
 8024a06:	bf00      	nop
 8024a08:	3720      	adds	r7, #32
 8024a0a:	46bd      	mov	sp, r7
 8024a0c:	bdb0      	pop	{r4, r5, r7, pc}
 8024a0e:	bf00      	nop
 8024a10:	20000450 	.word	0x20000450
 8024a14:	20000454 	.word	0x20000454
 8024a18:	20000458 	.word	0x20000458
 8024a1c:	20000444 	.word	0x20000444
 8024a20:	20000448 	.word	0x20000448
 8024a24:	2000044c 	.word	0x2000044c
 8024a28:	0802c7a1 	.word	0x0802c7a1
 8024a2c:	08024edd 	.word	0x08024edd
 8024a30:	20000410 	.word	0x20000410
 8024a34:	08024a3d 	.word	0x08024a3d
 8024a38:	08039b18 	.word	0x08039b18

08024a3c <ethernet_link_status_updated>:
  * @brief  Notify the User about the network interface config status
  * @param  netif: the network interface
  * @retval None
  */
static void ethernet_link_status_updated(struct netif *netif)
{
 8024a3c:	b480      	push	{r7}
 8024a3e:	b083      	sub	sp, #12
 8024a40:	af00      	add	r7, sp, #0
 8024a42:	6078      	str	r0, [r7, #4]
  else /* netif is down */
  {
/* USER CODE BEGIN 6 */
/* USER CODE END 6 */
  }
}
 8024a44:	bf00      	nop
 8024a46:	370c      	adds	r7, #12
 8024a48:	46bd      	mov	sp, r7
 8024a4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8024a4e:	4770      	bx	lr

08024a50 <HAL_ETH_RxCpltCallback>:
  * @brief  Ethernet Rx Transfer completed callback
  * @param  handlerEth: ETH handler
  * @retval None
  */
void HAL_ETH_RxCpltCallback(ETH_HandleTypeDef *handlerEth)
{
 8024a50:	b580      	push	{r7, lr}
 8024a52:	b082      	sub	sp, #8
 8024a54:	af00      	add	r7, sp, #0
 8024a56:	6078      	str	r0, [r7, #4]
  osSemaphoreRelease(RxPktSemaphore);
 8024a58:	4b04      	ldr	r3, [pc, #16]	; (8024a6c <HAL_ETH_RxCpltCallback+0x1c>)
 8024a5a:	681b      	ldr	r3, [r3, #0]
 8024a5c:	4618      	mov	r0, r3
 8024a5e:	f000 fe63 	bl	8025728 <osSemaphoreRelease>
}
 8024a62:	bf00      	nop
 8024a64:	3708      	adds	r7, #8
 8024a66:	46bd      	mov	sp, r7
 8024a68:	bd80      	pop	{r7, pc}
 8024a6a:	bf00      	nop
 8024a6c:	20004f34 	.word	0x20004f34

08024a70 <HAL_ETH_TxCpltCallback>:
  * @brief  Ethernet Tx Transfer completed callback
  * @param  handlerEth: ETH handler
  * @retval None
  */
void HAL_ETH_TxCpltCallback(ETH_HandleTypeDef *handlerEth)
{
 8024a70:	b580      	push	{r7, lr}
 8024a72:	b082      	sub	sp, #8
 8024a74:	af00      	add	r7, sp, #0
 8024a76:	6078      	str	r0, [r7, #4]
  osSemaphoreRelease(TxPktSemaphore);
 8024a78:	4b04      	ldr	r3, [pc, #16]	; (8024a8c <HAL_ETH_TxCpltCallback+0x1c>)
 8024a7a:	681b      	ldr	r3, [r3, #0]
 8024a7c:	4618      	mov	r0, r3
 8024a7e:	f000 fe53 	bl	8025728 <osSemaphoreRelease>
}
 8024a82:	bf00      	nop
 8024a84:	3708      	adds	r7, #8
 8024a86:	46bd      	mov	sp, r7
 8024a88:	bd80      	pop	{r7, pc}
 8024a8a:	bf00      	nop
 8024a8c:	20004f38 	.word	0x20004f38

08024a90 <HAL_ETH_ErrorCallback>:
  * @brief  Ethernet DMA transfer error callback
  * @param  handlerEth: ETH handler
  * @retval None
  */
void HAL_ETH_ErrorCallback(ETH_HandleTypeDef *handlerEth)
{
 8024a90:	b580      	push	{r7, lr}
 8024a92:	b082      	sub	sp, #8
 8024a94:	af00      	add	r7, sp, #0
 8024a96:	6078      	str	r0, [r7, #4]
  if((HAL_ETH_GetDMAError(handlerEth) & ETH_DMASR_RBUS) == ETH_DMASR_RBUS)
 8024a98:	6878      	ldr	r0, [r7, #4]
 8024a9a:	f7fd ff65 	bl	8022968 <HAL_ETH_GetDMAError>
 8024a9e:	4603      	mov	r3, r0
 8024aa0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8024aa4:	2b80      	cmp	r3, #128	; 0x80
 8024aa6:	d104      	bne.n	8024ab2 <HAL_ETH_ErrorCallback+0x22>
  {
     osSemaphoreRelease(RxPktSemaphore);
 8024aa8:	4b04      	ldr	r3, [pc, #16]	; (8024abc <HAL_ETH_ErrorCallback+0x2c>)
 8024aaa:	681b      	ldr	r3, [r3, #0]
 8024aac:	4618      	mov	r0, r3
 8024aae:	f000 fe3b 	bl	8025728 <osSemaphoreRelease>
  }
}
 8024ab2:	bf00      	nop
 8024ab4:	3708      	adds	r7, #8
 8024ab6:	46bd      	mov	sp, r7
 8024ab8:	bd80      	pop	{r7, pc}
 8024aba:	bf00      	nop
 8024abc:	20004f34 	.word	0x20004f34

08024ac0 <low_level_init>:
 *
 * @param netif the already initialized lwip network interface structure
 *        for this ethernetif
 */
static void low_level_init(struct netif *netif)
{
 8024ac0:	b5b0      	push	{r4, r5, r7, lr}
 8024ac2:	b0a8      	sub	sp, #160	; 0xa0
 8024ac4:	af00      	add	r7, sp, #0
 8024ac6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_eth_init_status = HAL_OK;
 8024ac8:	2300      	movs	r3, #0
 8024aca:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
  uint32_t duplex, speed = 0;
 8024ace:	2300      	movs	r3, #0
 8024ad0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  int32_t PHYLinkState = 0;
 8024ad4:	2300      	movs	r3, #0
 8024ad6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  ETH_MACConfigTypeDef MACConf = {0};
 8024ada:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8024ade:	2264      	movs	r2, #100	; 0x64
 8024ae0:	2100      	movs	r1, #0
 8024ae2:	4618      	mov	r0, r3
 8024ae4:	f013 fed4 	bl	8038890 <memset>
  /* Start ETH HAL Init */

   uint8_t MACAddr[6] ;
  heth.Instance = ETH;
 8024ae8:	4b85      	ldr	r3, [pc, #532]	; (8024d00 <low_level_init+0x240>)
 8024aea:	4a86      	ldr	r2, [pc, #536]	; (8024d04 <low_level_init+0x244>)
 8024aec:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 8024aee:	2300      	movs	r3, #0
 8024af0:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  MACAddr[1] = 0x80;
 8024af4:	2380      	movs	r3, #128	; 0x80
 8024af6:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  MACAddr[2] = 0xE1;
 8024afa:	23e1      	movs	r3, #225	; 0xe1
 8024afc:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  MACAddr[3] = 0x00;
 8024b00:	2300      	movs	r3, #0
 8024b02:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  MACAddr[4] = 0x00;
 8024b06:	2300      	movs	r3, #0
 8024b08:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
  MACAddr[5] = 0x00;
 8024b0c:	2300      	movs	r3, #0
 8024b0e:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
  heth.Init.MACAddr = &MACAddr[0];
 8024b12:	4a7b      	ldr	r2, [pc, #492]	; (8024d00 <low_level_init+0x240>)
 8024b14:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8024b18:	6053      	str	r3, [r2, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 8024b1a:	4b79      	ldr	r3, [pc, #484]	; (8024d00 <low_level_init+0x240>)
 8024b1c:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8024b20:	609a      	str	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 8024b22:	4b77      	ldr	r3, [pc, #476]	; (8024d00 <low_level_init+0x240>)
 8024b24:	4a78      	ldr	r2, [pc, #480]	; (8024d08 <low_level_init+0x248>)
 8024b26:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 8024b28:	4b75      	ldr	r3, [pc, #468]	; (8024d00 <low_level_init+0x240>)
 8024b2a:	4a78      	ldr	r2, [pc, #480]	; (8024d0c <low_level_init+0x24c>)
 8024b2c:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1536;
 8024b2e:	4b74      	ldr	r3, [pc, #464]	; (8024d00 <low_level_init+0x240>)
 8024b30:	f44f 62c0 	mov.w	r2, #1536	; 0x600
 8024b34:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  hal_eth_init_status = HAL_ETH_Init(&heth);
 8024b36:	4872      	ldr	r0, [pc, #456]	; (8024d00 <low_level_init+0x240>)
 8024b38:	f7fd f8d8 	bl	8021cec <HAL_ETH_Init>
 8024b3c:	4603      	mov	r3, r0
 8024b3e:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 8024b42:	2238      	movs	r2, #56	; 0x38
 8024b44:	2100      	movs	r1, #0
 8024b46:	4872      	ldr	r0, [pc, #456]	; (8024d10 <low_level_init+0x250>)
 8024b48:	f013 fea2 	bl	8038890 <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 8024b4c:	4b70      	ldr	r3, [pc, #448]	; (8024d10 <low_level_init+0x250>)
 8024b4e:	2221      	movs	r2, #33	; 0x21
 8024b50:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 8024b52:	4b6f      	ldr	r3, [pc, #444]	; (8024d10 <low_level_init+0x250>)
 8024b54:	f44f 0240 	mov.w	r2, #12582912	; 0xc00000
 8024b58:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 8024b5a:	4b6d      	ldr	r3, [pc, #436]	; (8024d10 <low_level_init+0x250>)
 8024b5c:	2200      	movs	r2, #0
 8024b5e:	611a      	str	r2, [r3, #16]

  /* End ETH HAL Init */

  /* Initialize the RX POOL */
  LWIP_MEMPOOL_INIT(RX_POOL);
 8024b60:	486c      	ldr	r0, [pc, #432]	; (8024d14 <low_level_init+0x254>)
 8024b62:	f008 fbb7 	bl	802d2d4 <memp_init_pool>

#if LWIP_ARP || LWIP_ETHERNET

  /* set MAC hardware address length */
  netif->hwaddr_len = ETH_HWADDR_LEN;
 8024b66:	687b      	ldr	r3, [r7, #4]
 8024b68:	2206      	movs	r2, #6
 8024b6a:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  /* set MAC hardware address */
  netif->hwaddr[0] =  heth.Init.MACAddr[0];
 8024b6e:	4b64      	ldr	r3, [pc, #400]	; (8024d00 <low_level_init+0x240>)
 8024b70:	685b      	ldr	r3, [r3, #4]
 8024b72:	781a      	ldrb	r2, [r3, #0]
 8024b74:	687b      	ldr	r3, [r7, #4]
 8024b76:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
  netif->hwaddr[1] =  heth.Init.MACAddr[1];
 8024b7a:	4b61      	ldr	r3, [pc, #388]	; (8024d00 <low_level_init+0x240>)
 8024b7c:	685b      	ldr	r3, [r3, #4]
 8024b7e:	785a      	ldrb	r2, [r3, #1]
 8024b80:	687b      	ldr	r3, [r7, #4]
 8024b82:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
  netif->hwaddr[2] =  heth.Init.MACAddr[2];
 8024b86:	4b5e      	ldr	r3, [pc, #376]	; (8024d00 <low_level_init+0x240>)
 8024b88:	685b      	ldr	r3, [r3, #4]
 8024b8a:	789a      	ldrb	r2, [r3, #2]
 8024b8c:	687b      	ldr	r3, [r7, #4]
 8024b8e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
  netif->hwaddr[3] =  heth.Init.MACAddr[3];
 8024b92:	4b5b      	ldr	r3, [pc, #364]	; (8024d00 <low_level_init+0x240>)
 8024b94:	685b      	ldr	r3, [r3, #4]
 8024b96:	78da      	ldrb	r2, [r3, #3]
 8024b98:	687b      	ldr	r3, [r7, #4]
 8024b9a:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
  netif->hwaddr[4] =  heth.Init.MACAddr[4];
 8024b9e:	4b58      	ldr	r3, [pc, #352]	; (8024d00 <low_level_init+0x240>)
 8024ba0:	685b      	ldr	r3, [r3, #4]
 8024ba2:	791a      	ldrb	r2, [r3, #4]
 8024ba4:	687b      	ldr	r3, [r7, #4]
 8024ba6:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
  netif->hwaddr[5] =  heth.Init.MACAddr[5];
 8024baa:	4b55      	ldr	r3, [pc, #340]	; (8024d00 <low_level_init+0x240>)
 8024bac:	685b      	ldr	r3, [r3, #4]
 8024bae:	795a      	ldrb	r2, [r3, #5]
 8024bb0:	687b      	ldr	r3, [r7, #4]
 8024bb2:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b

  /* maximum transfer unit */
  netif->mtu = ETH_MAX_PAYLOAD;
 8024bb6:	687b      	ldr	r3, [r7, #4]
 8024bb8:	f240 52dc 	movw	r2, #1500	; 0x5dc
 8024bbc:	849a      	strh	r2, [r3, #36]	; 0x24

  /* Accept broadcast address and ARP traffic */
  /* don't set NETIF_FLAG_ETHARP if this device is not an ethernet one */
  #if LWIP_ARP
    netif->flags |= NETIF_FLAG_BROADCAST | NETIF_FLAG_ETHARP;
 8024bbe:	687b      	ldr	r3, [r7, #4]
 8024bc0:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8024bc4:	f043 030a 	orr.w	r3, r3, #10
 8024bc8:	b2da      	uxtb	r2, r3
 8024bca:	687b      	ldr	r3, [r7, #4]
 8024bcc:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
  #else
    netif->flags |= NETIF_FLAG_BROADCAST;
  #endif /* LWIP_ARP */

  /* create a binary semaphore used for informing ethernetif of frame reception */
  RxPktSemaphore = xSemaphoreCreateBinary();
 8024bd0:	2203      	movs	r2, #3
 8024bd2:	2100      	movs	r1, #0
 8024bd4:	2001      	movs	r0, #1
 8024bd6:	f001 f88b 	bl	8025cf0 <xQueueGenericCreate>
 8024bda:	4603      	mov	r3, r0
 8024bdc:	4a4e      	ldr	r2, [pc, #312]	; (8024d18 <low_level_init+0x258>)
 8024bde:	6013      	str	r3, [r2, #0]

  /* create a binary semaphore used for informing ethernetif of frame transmission */
  TxPktSemaphore = xSemaphoreCreateBinary();
 8024be0:	2203      	movs	r2, #3
 8024be2:	2100      	movs	r1, #0
 8024be4:	2001      	movs	r0, #1
 8024be6:	f001 f883 	bl	8025cf0 <xQueueGenericCreate>
 8024bea:	4603      	mov	r3, r0
 8024bec:	4a4b      	ldr	r2, [pc, #300]	; (8024d1c <low_level_init+0x25c>)
 8024bee:	6013      	str	r3, [r2, #0]

  /* create the task that handles the ETH_MAC */
/* USER CODE BEGIN OS_THREAD_DEF_CREATE_CMSIS_RTOS_V1 */
  osThreadDef(EthIf, ethernetif_input, osPriorityRealtime, 0, INTERFACE_THREAD_STACK_SIZE);
 8024bf0:	4b4b      	ldr	r3, [pc, #300]	; (8024d20 <low_level_init+0x260>)
 8024bf2:	f107 0408 	add.w	r4, r7, #8
 8024bf6:	461d      	mov	r5, r3
 8024bf8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8024bfa:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8024bfc:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8024c00:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  osThreadCreate (osThread(EthIf), netif);
 8024c04:	f107 0308 	add.w	r3, r7, #8
 8024c08:	6879      	ldr	r1, [r7, #4]
 8024c0a:	4618      	mov	r0, r3
 8024c0c:	f000 fc02 	bl	8025414 <osThreadCreate>

/* USER CODE BEGIN PHY_PRE_CONFIG */

/* USER CODE END PHY_PRE_CONFIG */
  /* Set PHY IO functions */
  LAN8742_RegisterBusIO(&LAN8742, &LAN8742_IOCtx);
 8024c10:	4944      	ldr	r1, [pc, #272]	; (8024d24 <low_level_init+0x264>)
 8024c12:	4845      	ldr	r0, [pc, #276]	; (8024d28 <low_level_init+0x268>)
 8024c14:	f7fc fdc1 	bl	802179a <LAN8742_RegisterBusIO>

  /* Initialize the LAN8742 ETH PHY */
  LAN8742_Init(&LAN8742);
 8024c18:	4843      	ldr	r0, [pc, #268]	; (8024d28 <low_level_init+0x268>)
 8024c1a:	f7fc fdf0 	bl	80217fe <LAN8742_Init>

  if (hal_eth_init_status == HAL_OK)
 8024c1e:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 8024c22:	2b00      	cmp	r3, #0
 8024c24:	d165      	bne.n	8024cf2 <low_level_init+0x232>
  {
    PHYLinkState = LAN8742_GetLinkState(&LAN8742);
 8024c26:	4840      	ldr	r0, [pc, #256]	; (8024d28 <low_level_init+0x268>)
 8024c28:	f7fc fe91 	bl	802194e <LAN8742_GetLinkState>
 8024c2c:	f8c7 0090 	str.w	r0, [r7, #144]	; 0x90

    /* Get link state */
    if(PHYLinkState <= LAN8742_STATUS_LINK_DOWN)
 8024c30:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8024c34:	2b01      	cmp	r3, #1
 8024c36:	dc06      	bgt.n	8024c46 <low_level_init+0x186>
    {
      netif_set_link_down(netif);
 8024c38:	6878      	ldr	r0, [r7, #4]
 8024c3a:	f008 ff57 	bl	802daec <netif_set_link_down>
      netif_set_down(netif);
 8024c3e:	6878      	ldr	r0, [r7, #4]
 8024c40:	f008 feee 	bl	802da20 <netif_set_down>
#endif /* LWIP_ARP || LWIP_ETHERNET */

/* USER CODE BEGIN LOW_LEVEL_INIT */

/* USER CODE END LOW_LEVEL_INIT */
}
 8024c44:	e057      	b.n	8024cf6 <low_level_init+0x236>
      switch (PHYLinkState)
 8024c46:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8024c4a:	3b02      	subs	r3, #2
 8024c4c:	2b03      	cmp	r3, #3
 8024c4e:	d82b      	bhi.n	8024ca8 <low_level_init+0x1e8>
 8024c50:	a201      	add	r2, pc, #4	; (adr r2, 8024c58 <low_level_init+0x198>)
 8024c52:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8024c56:	bf00      	nop
 8024c58:	08024c69 	.word	0x08024c69
 8024c5c:	08024c7b 	.word	0x08024c7b
 8024c60:	08024c8b 	.word	0x08024c8b
 8024c64:	08024c9b 	.word	0x08024c9b
        duplex = ETH_FULLDUPLEX_MODE;
 8024c68:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8024c6c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
        speed = ETH_SPEED_100M;
 8024c70:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8024c74:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
        break;
 8024c78:	e01f      	b.n	8024cba <low_level_init+0x1fa>
        duplex = ETH_HALFDUPLEX_MODE;
 8024c7a:	2300      	movs	r3, #0
 8024c7c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
        speed = ETH_SPEED_100M;
 8024c80:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8024c84:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
        break;
 8024c88:	e017      	b.n	8024cba <low_level_init+0x1fa>
        duplex = ETH_FULLDUPLEX_MODE;
 8024c8a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8024c8e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
        speed = ETH_SPEED_10M;
 8024c92:	2300      	movs	r3, #0
 8024c94:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
        break;
 8024c98:	e00f      	b.n	8024cba <low_level_init+0x1fa>
        duplex = ETH_HALFDUPLEX_MODE;
 8024c9a:	2300      	movs	r3, #0
 8024c9c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
        speed = ETH_SPEED_10M;
 8024ca0:	2300      	movs	r3, #0
 8024ca2:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
        break;
 8024ca6:	e008      	b.n	8024cba <low_level_init+0x1fa>
        duplex = ETH_FULLDUPLEX_MODE;
 8024ca8:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8024cac:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
        speed = ETH_SPEED_100M;
 8024cb0:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8024cb4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
        break;
 8024cb8:	bf00      	nop
    HAL_ETH_GetMACConfig(&heth, &MACConf);
 8024cba:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8024cbe:	4619      	mov	r1, r3
 8024cc0:	480f      	ldr	r0, [pc, #60]	; (8024d00 <low_level_init+0x240>)
 8024cc2:	f7fd fcf7 	bl	80226b4 <HAL_ETH_GetMACConfig>
    MACConf.DuplexMode = duplex;
 8024cc6:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8024cca:	647b      	str	r3, [r7, #68]	; 0x44
    MACConf.Speed = speed;
 8024ccc:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8024cd0:	643b      	str	r3, [r7, #64]	; 0x40
    HAL_ETH_SetMACConfig(&heth, &MACConf);
 8024cd2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8024cd6:	4619      	mov	r1, r3
 8024cd8:	4809      	ldr	r0, [pc, #36]	; (8024d00 <low_level_init+0x240>)
 8024cda:	f7fd fdd5 	bl	8022888 <HAL_ETH_SetMACConfig>
    HAL_ETH_Start_IT(&heth);
 8024cde:	4808      	ldr	r0, [pc, #32]	; (8024d00 <low_level_init+0x240>)
 8024ce0:	f7fd f882 	bl	8021de8 <HAL_ETH_Start_IT>
    netif_set_up(netif);
 8024ce4:	6878      	ldr	r0, [r7, #4]
 8024ce6:	f008 fe2f 	bl	802d948 <netif_set_up>
    netif_set_link_up(netif);
 8024cea:	6878      	ldr	r0, [r7, #4]
 8024cec:	f008 feca 	bl	802da84 <netif_set_link_up>
}
 8024cf0:	e001      	b.n	8024cf6 <low_level_init+0x236>
    Error_Handler();
 8024cf2:	f7fb fe8f 	bl	8020a14 <Error_Handler>
}
 8024cf6:	bf00      	nop
 8024cf8:	37a0      	adds	r7, #160	; 0xa0
 8024cfa:	46bd      	mov	sp, r7
 8024cfc:	bdb0      	pop	{r4, r5, r7, pc}
 8024cfe:	bf00      	nop
 8024d00:	20004f3c 	.word	0x20004f3c
 8024d04:	40028000 	.word	0x40028000
 8024d08:	20004e94 	.word	0x20004e94
 8024d0c:	20004df4 	.word	0x20004df4
 8024d10:	20004fec 	.word	0x20004fec
 8024d14:	0803d490 	.word	0x0803d490
 8024d18:	20004f34 	.word	0x20004f34
 8024d1c:	20004f38 	.word	0x20004f38
 8024d20:	08039b3c 	.word	0x08039b3c
 8024d24:	20000010 	.word	0x20000010
 8024d28:	20005024 	.word	0x20005024

08024d2c <low_level_output>:
 *       to become available since the stack doesn't retry to send a packet
 *       dropped because of memory failure (except for the TCP timers).
 */

static err_t low_level_output(struct netif *netif, struct pbuf *p)
{
 8024d2c:	b580      	push	{r7, lr}
 8024d2e:	b092      	sub	sp, #72	; 0x48
 8024d30:	af00      	add	r7, sp, #0
 8024d32:	6078      	str	r0, [r7, #4]
 8024d34:	6039      	str	r1, [r7, #0]
  uint32_t i = 0U;
 8024d36:	2300      	movs	r3, #0
 8024d38:	647b      	str	r3, [r7, #68]	; 0x44
  struct pbuf *q = NULL;
 8024d3a:	2300      	movs	r3, #0
 8024d3c:	643b      	str	r3, [r7, #64]	; 0x40
  err_t errval = ERR_OK;
 8024d3e:	2300      	movs	r3, #0
 8024d40:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  ETH_BufferTypeDef Txbuffer[ETH_TX_DESC_CNT] = {0};
 8024d44:	f107 030c 	add.w	r3, r7, #12
 8024d48:	2230      	movs	r2, #48	; 0x30
 8024d4a:	2100      	movs	r1, #0
 8024d4c:	4618      	mov	r0, r3
 8024d4e:	f013 fd9f 	bl	8038890 <memset>

  memset(Txbuffer, 0 , ETH_TX_DESC_CNT*sizeof(ETH_BufferTypeDef));
 8024d52:	f107 030c 	add.w	r3, r7, #12
 8024d56:	2230      	movs	r2, #48	; 0x30
 8024d58:	2100      	movs	r1, #0
 8024d5a:	4618      	mov	r0, r3
 8024d5c:	f013 fd98 	bl	8038890 <memset>

  for(q = p; q != NULL; q = q->next)
 8024d60:	683b      	ldr	r3, [r7, #0]
 8024d62:	643b      	str	r3, [r7, #64]	; 0x40
 8024d64:	e045      	b.n	8024df2 <low_level_output+0xc6>
  {
    if(i >= ETH_TX_DESC_CNT)
 8024d66:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8024d68:	2b03      	cmp	r3, #3
 8024d6a:	d902      	bls.n	8024d72 <low_level_output+0x46>
      return ERR_IF;
 8024d6c:	f06f 030b 	mvn.w	r3, #11
 8024d70:	e065      	b.n	8024e3e <low_level_output+0x112>

    Txbuffer[i].buffer = q->payload;
 8024d72:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8024d74:	6859      	ldr	r1, [r3, #4]
 8024d76:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8024d78:	4613      	mov	r3, r2
 8024d7a:	005b      	lsls	r3, r3, #1
 8024d7c:	4413      	add	r3, r2
 8024d7e:	009b      	lsls	r3, r3, #2
 8024d80:	3348      	adds	r3, #72	; 0x48
 8024d82:	443b      	add	r3, r7
 8024d84:	3b3c      	subs	r3, #60	; 0x3c
 8024d86:	6019      	str	r1, [r3, #0]
    Txbuffer[i].len = q->len;
 8024d88:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8024d8a:	895b      	ldrh	r3, [r3, #10]
 8024d8c:	4619      	mov	r1, r3
 8024d8e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8024d90:	4613      	mov	r3, r2
 8024d92:	005b      	lsls	r3, r3, #1
 8024d94:	4413      	add	r3, r2
 8024d96:	009b      	lsls	r3, r3, #2
 8024d98:	3348      	adds	r3, #72	; 0x48
 8024d9a:	443b      	add	r3, r7
 8024d9c:	3b38      	subs	r3, #56	; 0x38
 8024d9e:	6019      	str	r1, [r3, #0]

    if(i>0)
 8024da0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8024da2:	2b00      	cmp	r3, #0
 8024da4:	d011      	beq.n	8024dca <low_level_output+0x9e>
    {
      Txbuffer[i-1].next = &Txbuffer[i];
 8024da6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8024da8:	1e5a      	subs	r2, r3, #1
 8024daa:	f107 000c 	add.w	r0, r7, #12
 8024dae:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8024db0:	460b      	mov	r3, r1
 8024db2:	005b      	lsls	r3, r3, #1
 8024db4:	440b      	add	r3, r1
 8024db6:	009b      	lsls	r3, r3, #2
 8024db8:	18c1      	adds	r1, r0, r3
 8024dba:	4613      	mov	r3, r2
 8024dbc:	005b      	lsls	r3, r3, #1
 8024dbe:	4413      	add	r3, r2
 8024dc0:	009b      	lsls	r3, r3, #2
 8024dc2:	3348      	adds	r3, #72	; 0x48
 8024dc4:	443b      	add	r3, r7
 8024dc6:	3b34      	subs	r3, #52	; 0x34
 8024dc8:	6019      	str	r1, [r3, #0]
    }

    if(q->next == NULL)
 8024dca:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8024dcc:	681b      	ldr	r3, [r3, #0]
 8024dce:	2b00      	cmp	r3, #0
 8024dd0:	d109      	bne.n	8024de6 <low_level_output+0xba>
    {
      Txbuffer[i].next = NULL;
 8024dd2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8024dd4:	4613      	mov	r3, r2
 8024dd6:	005b      	lsls	r3, r3, #1
 8024dd8:	4413      	add	r3, r2
 8024dda:	009b      	lsls	r3, r3, #2
 8024ddc:	3348      	adds	r3, #72	; 0x48
 8024dde:	443b      	add	r3, r7
 8024de0:	3b34      	subs	r3, #52	; 0x34
 8024de2:	2200      	movs	r2, #0
 8024de4:	601a      	str	r2, [r3, #0]
    }

    i++;
 8024de6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8024de8:	3301      	adds	r3, #1
 8024dea:	647b      	str	r3, [r7, #68]	; 0x44
  for(q = p; q != NULL; q = q->next)
 8024dec:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8024dee:	681b      	ldr	r3, [r3, #0]
 8024df0:	643b      	str	r3, [r7, #64]	; 0x40
 8024df2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8024df4:	2b00      	cmp	r3, #0
 8024df6:	d1b6      	bne.n	8024d66 <low_level_output+0x3a>
  }

  TxConfig.Length = p->tot_len;
 8024df8:	683b      	ldr	r3, [r7, #0]
 8024dfa:	891b      	ldrh	r3, [r3, #8]
 8024dfc:	461a      	mov	r2, r3
 8024dfe:	4b12      	ldr	r3, [pc, #72]	; (8024e48 <low_level_output+0x11c>)
 8024e00:	605a      	str	r2, [r3, #4]
  TxConfig.TxBuffer = Txbuffer;
 8024e02:	4a11      	ldr	r2, [pc, #68]	; (8024e48 <low_level_output+0x11c>)
 8024e04:	f107 030c 	add.w	r3, r7, #12
 8024e08:	6093      	str	r3, [r2, #8]
  TxConfig.pData = p;
 8024e0a:	4a0f      	ldr	r2, [pc, #60]	; (8024e48 <low_level_output+0x11c>)
 8024e0c:	683b      	ldr	r3, [r7, #0]
 8024e0e:	6353      	str	r3, [r2, #52]	; 0x34

  pbuf_ref(p);
 8024e10:	6838      	ldr	r0, [r7, #0]
 8024e12:	f009 fb21 	bl	802e458 <pbuf_ref>

  HAL_ETH_Transmit_IT(&heth, &TxConfig);
 8024e16:	490c      	ldr	r1, [pc, #48]	; (8024e48 <low_level_output+0x11c>)
 8024e18:	480c      	ldr	r0, [pc, #48]	; (8024e4c <low_level_output+0x120>)
 8024e1a:	f7fd f8f2 	bl	8022002 <HAL_ETH_Transmit_IT>
  while(osSemaphoreWait(TxPktSemaphore, TIME_WAITING_FOR_INPUT)!=osOK)
 8024e1e:	bf00      	nop
 8024e20:	4b0b      	ldr	r3, [pc, #44]	; (8024e50 <low_level_output+0x124>)
 8024e22:	681b      	ldr	r3, [r3, #0]
 8024e24:	f04f 31ff 	mov.w	r1, #4294967295
 8024e28:	4618      	mov	r0, r3
 8024e2a:	f000 fc2f 	bl	802568c <osSemaphoreWait>
 8024e2e:	4603      	mov	r3, r0
 8024e30:	2b00      	cmp	r3, #0
 8024e32:	d1f5      	bne.n	8024e20 <low_level_output+0xf4>

  {
  }

  HAL_ETH_ReleaseTxPacket(&heth);
 8024e34:	4805      	ldr	r0, [pc, #20]	; (8024e4c <low_level_output+0x120>)
 8024e36:	f7fd fa77 	bl	8022328 <HAL_ETH_ReleaseTxPacket>

  return errval;
 8024e3a:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
}
 8024e3e:	4618      	mov	r0, r3
 8024e40:	3748      	adds	r7, #72	; 0x48
 8024e42:	46bd      	mov	sp, r7
 8024e44:	bd80      	pop	{r7, pc}
 8024e46:	bf00      	nop
 8024e48:	20004fec 	.word	0x20004fec
 8024e4c:	20004f3c 	.word	0x20004f3c
 8024e50:	20004f38 	.word	0x20004f38

08024e54 <low_level_input>:
 * @param netif the lwip network interface structure for this ethernetif
 * @return a pbuf filled with the received packet (including MAC header)
 *         NULL on memory error
   */
static struct pbuf * low_level_input(struct netif *netif)
{
 8024e54:	b580      	push	{r7, lr}
 8024e56:	b084      	sub	sp, #16
 8024e58:	af00      	add	r7, sp, #0
 8024e5a:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 8024e5c:	2300      	movs	r3, #0
 8024e5e:	60fb      	str	r3, [r7, #12]

  if(RxAllocStatus == RX_ALLOC_OK)
 8024e60:	4b07      	ldr	r3, [pc, #28]	; (8024e80 <low_level_input+0x2c>)
 8024e62:	781b      	ldrb	r3, [r3, #0]
 8024e64:	2b00      	cmp	r3, #0
 8024e66:	d105      	bne.n	8024e74 <low_level_input+0x20>
  {
    HAL_ETH_ReadData(&heth, (void **)&p);
 8024e68:	f107 030c 	add.w	r3, r7, #12
 8024e6c:	4619      	mov	r1, r3
 8024e6e:	4805      	ldr	r0, [pc, #20]	; (8024e84 <low_level_input+0x30>)
 8024e70:	f7fd f923 	bl	80220ba <HAL_ETH_ReadData>
  }

  return p;
 8024e74:	68fb      	ldr	r3, [r7, #12]
}
 8024e76:	4618      	mov	r0, r3
 8024e78:	3710      	adds	r7, #16
 8024e7a:	46bd      	mov	sp, r7
 8024e7c:	bd80      	pop	{r7, pc}
 8024e7e:	bf00      	nop
 8024e80:	20004df0 	.word	0x20004df0
 8024e84:	20004f3c 	.word	0x20004f3c

08024e88 <ethernetif_input>:
 * the appropriate input function is called.
 *
 * @param netif the lwip network interface structure for this ethernetif
 */
static void ethernetif_input(void const * argument)
{
 8024e88:	b580      	push	{r7, lr}
 8024e8a:	b084      	sub	sp, #16
 8024e8c:	af00      	add	r7, sp, #0
 8024e8e:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 8024e90:	2300      	movs	r3, #0
 8024e92:	60fb      	str	r3, [r7, #12]
  struct netif *netif = (struct netif *) argument;
 8024e94:	687b      	ldr	r3, [r7, #4]
 8024e96:	60bb      	str	r3, [r7, #8]

  for( ;; )
  {
    if (osSemaphoreWait(RxPktSemaphore, TIME_WAITING_FOR_INPUT) == osOK)
 8024e98:	4b0f      	ldr	r3, [pc, #60]	; (8024ed8 <ethernetif_input+0x50>)
 8024e9a:	681b      	ldr	r3, [r3, #0]
 8024e9c:	f04f 31ff 	mov.w	r1, #4294967295
 8024ea0:	4618      	mov	r0, r3
 8024ea2:	f000 fbf3 	bl	802568c <osSemaphoreWait>
 8024ea6:	4603      	mov	r3, r0
 8024ea8:	2b00      	cmp	r3, #0
 8024eaa:	d1f5      	bne.n	8024e98 <ethernetif_input+0x10>
    {
      do
      {
        p = low_level_input( netif );
 8024eac:	68b8      	ldr	r0, [r7, #8]
 8024eae:	f7ff ffd1 	bl	8024e54 <low_level_input>
 8024eb2:	60f8      	str	r0, [r7, #12]
        if (p != NULL)
 8024eb4:	68fb      	ldr	r3, [r7, #12]
 8024eb6:	2b00      	cmp	r3, #0
 8024eb8:	d00a      	beq.n	8024ed0 <ethernetif_input+0x48>
        {
          if (netif->input( p, netif) != ERR_OK )
 8024eba:	68bb      	ldr	r3, [r7, #8]
 8024ebc:	691b      	ldr	r3, [r3, #16]
 8024ebe:	68b9      	ldr	r1, [r7, #8]
 8024ec0:	68f8      	ldr	r0, [r7, #12]
 8024ec2:	4798      	blx	r3
 8024ec4:	4603      	mov	r3, r0
 8024ec6:	2b00      	cmp	r3, #0
 8024ec8:	d002      	beq.n	8024ed0 <ethernetif_input+0x48>
          {
            pbuf_free(p);
 8024eca:	68f8      	ldr	r0, [r7, #12]
 8024ecc:	f009 fa1e 	bl	802e30c <pbuf_free>
          }
        }
      } while(p!=NULL);
 8024ed0:	68fb      	ldr	r3, [r7, #12]
 8024ed2:	2b00      	cmp	r3, #0
 8024ed4:	d1ea      	bne.n	8024eac <ethernetif_input+0x24>
    if (osSemaphoreWait(RxPktSemaphore, TIME_WAITING_FOR_INPUT) == osOK)
 8024ed6:	e7df      	b.n	8024e98 <ethernetif_input+0x10>
 8024ed8:	20004f34 	.word	0x20004f34

08024edc <ethernetif_init>:
 * @return ERR_OK if the loopif is initialized
 *         ERR_MEM if private data couldn't be allocated
 *         any other err_t on error
 */
err_t ethernetif_init(struct netif *netif)
{
 8024edc:	b580      	push	{r7, lr}
 8024ede:	b082      	sub	sp, #8
 8024ee0:	af00      	add	r7, sp, #0
 8024ee2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("netif != NULL", (netif != NULL));
 8024ee4:	687b      	ldr	r3, [r7, #4]
 8024ee6:	2b00      	cmp	r3, #0
 8024ee8:	d106      	bne.n	8024ef8 <ethernetif_init+0x1c>
 8024eea:	4b0e      	ldr	r3, [pc, #56]	; (8024f24 <ethernetif_init+0x48>)
 8024eec:	f240 12df 	movw	r2, #479	; 0x1df
 8024ef0:	490d      	ldr	r1, [pc, #52]	; (8024f28 <ethernetif_init+0x4c>)
 8024ef2:	480e      	ldr	r0, [pc, #56]	; (8024f2c <ethernetif_init+0x50>)
 8024ef4:	f014 f8b8 	bl	8039068 <iprintf>
   * The last argument should be replaced with your link speed, in units
   * of bits per second.
   */
  // MIB2_INIT_NETIF(netif, snmp_ifType_ethernet_csmacd, LINK_SPEED_OF_YOUR_NETIF_IN_BPS);

  netif->name[0] = IFNAME0;
 8024ef8:	687b      	ldr	r3, [r7, #4]
 8024efa:	2273      	movs	r2, #115	; 0x73
 8024efc:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
  netif->name[1] = IFNAME1;
 8024f00:	687b      	ldr	r3, [r7, #4]
 8024f02:	2274      	movs	r2, #116	; 0x74
 8024f04:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
   * is available...) */

#if LWIP_IPV4
#if LWIP_ARP || LWIP_ETHERNET
#if LWIP_ARP
  netif->output = etharp_output;
 8024f08:	687b      	ldr	r3, [r7, #4]
 8024f0a:	4a09      	ldr	r2, [pc, #36]	; (8024f30 <ethernetif_init+0x54>)
 8024f0c:	615a      	str	r2, [r3, #20]

#if LWIP_IPV6
  netif->output_ip6 = ethip6_output;
#endif /* LWIP_IPV6 */

  netif->linkoutput = low_level_output;
 8024f0e:	687b      	ldr	r3, [r7, #4]
 8024f10:	4a08      	ldr	r2, [pc, #32]	; (8024f34 <ethernetif_init+0x58>)
 8024f12:	619a      	str	r2, [r3, #24]

  /* initialize the hardware */
  low_level_init(netif);
 8024f14:	6878      	ldr	r0, [r7, #4]
 8024f16:	f7ff fdd3 	bl	8024ac0 <low_level_init>

  return ERR_OK;
 8024f1a:	2300      	movs	r3, #0
}
 8024f1c:	4618      	mov	r0, r3
 8024f1e:	3708      	adds	r7, #8
 8024f20:	46bd      	mov	sp, r7
 8024f22:	bd80      	pop	{r7, pc}
 8024f24:	08039b58 	.word	0x08039b58
 8024f28:	08039b74 	.word	0x08039b74
 8024f2c:	08039b84 	.word	0x08039b84
 8024f30:	08036169 	.word	0x08036169
 8024f34:	08024d2d 	.word	0x08024d2d

08024f38 <pbuf_free_custom>:
  * @brief  Custom Rx pbuf free callback
  * @param  pbuf: pbuf to be freed
  * @retval None
  */
void pbuf_free_custom(struct pbuf *p)
{
 8024f38:	b580      	push	{r7, lr}
 8024f3a:	b084      	sub	sp, #16
 8024f3c:	af00      	add	r7, sp, #0
 8024f3e:	6078      	str	r0, [r7, #4]
  struct pbuf_custom* custom_pbuf = (struct pbuf_custom*)p;
 8024f40:	687b      	ldr	r3, [r7, #4]
 8024f42:	60fb      	str	r3, [r7, #12]
  LWIP_MEMPOOL_FREE(RX_POOL, custom_pbuf);
 8024f44:	68f9      	ldr	r1, [r7, #12]
 8024f46:	4809      	ldr	r0, [pc, #36]	; (8024f6c <pbuf_free_custom+0x34>)
 8024f48:	f008 fae6 	bl	802d518 <memp_free_pool>

  /* If the Rx Buffer Pool was exhausted, signal the ethernetif_input task to
   * call HAL_ETH_GetRxDataBuffer to rebuild the Rx descriptors. */

  if (RxAllocStatus == RX_ALLOC_ERROR)
 8024f4c:	4b08      	ldr	r3, [pc, #32]	; (8024f70 <pbuf_free_custom+0x38>)
 8024f4e:	781b      	ldrb	r3, [r3, #0]
 8024f50:	2b01      	cmp	r3, #1
 8024f52:	d107      	bne.n	8024f64 <pbuf_free_custom+0x2c>
  {
    RxAllocStatus = RX_ALLOC_OK;
 8024f54:	4b06      	ldr	r3, [pc, #24]	; (8024f70 <pbuf_free_custom+0x38>)
 8024f56:	2200      	movs	r2, #0
 8024f58:	701a      	strb	r2, [r3, #0]
    osSemaphoreRelease(RxPktSemaphore);
 8024f5a:	4b06      	ldr	r3, [pc, #24]	; (8024f74 <pbuf_free_custom+0x3c>)
 8024f5c:	681b      	ldr	r3, [r3, #0]
 8024f5e:	4618      	mov	r0, r3
 8024f60:	f000 fbe2 	bl	8025728 <osSemaphoreRelease>
  }
}
 8024f64:	bf00      	nop
 8024f66:	3710      	adds	r7, #16
 8024f68:	46bd      	mov	sp, r7
 8024f6a:	bd80      	pop	{r7, pc}
 8024f6c:	0803d490 	.word	0x0803d490
 8024f70:	20004df0 	.word	0x20004df0
 8024f74:	20004f34 	.word	0x20004f34

08024f78 <sys_now>:
*         when LWIP_TIMERS == 1 and NO_SYS == 1
* @param  None
* @retval Time
*/
u32_t sys_now(void)
{
 8024f78:	b580      	push	{r7, lr}
 8024f7a:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 8024f7c:	f7fc fda4 	bl	8021ac8 <HAL_GetTick>
 8024f80:	4603      	mov	r3, r0
}
 8024f82:	4618      	mov	r0, r3
 8024f84:	bd80      	pop	{r7, pc}
	...

08024f88 <HAL_ETH_MspInit>:
  * @param  ethHandle: ETH handle
  * @retval None
  */

void HAL_ETH_MspInit(ETH_HandleTypeDef* ethHandle)
{
 8024f88:	b580      	push	{r7, lr}
 8024f8a:	b08e      	sub	sp, #56	; 0x38
 8024f8c:	af00      	add	r7, sp, #0
 8024f8e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8024f90:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8024f94:	2200      	movs	r2, #0
 8024f96:	601a      	str	r2, [r3, #0]
 8024f98:	605a      	str	r2, [r3, #4]
 8024f9a:	609a      	str	r2, [r3, #8]
 8024f9c:	60da      	str	r2, [r3, #12]
 8024f9e:	611a      	str	r2, [r3, #16]
  if(ethHandle->Instance==ETH)
 8024fa0:	687b      	ldr	r3, [r7, #4]
 8024fa2:	681b      	ldr	r3, [r3, #0]
 8024fa4:	4a4a      	ldr	r2, [pc, #296]	; (80250d0 <HAL_ETH_MspInit+0x148>)
 8024fa6:	4293      	cmp	r3, r2
 8024fa8:	f040 808d 	bne.w	80250c6 <HAL_ETH_MspInit+0x13e>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Enable Peripheral clock */
    __HAL_RCC_ETH_CLK_ENABLE();
 8024fac:	2300      	movs	r3, #0
 8024fae:	623b      	str	r3, [r7, #32]
 8024fb0:	4b48      	ldr	r3, [pc, #288]	; (80250d4 <HAL_ETH_MspInit+0x14c>)
 8024fb2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8024fb4:	4a47      	ldr	r2, [pc, #284]	; (80250d4 <HAL_ETH_MspInit+0x14c>)
 8024fb6:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8024fba:	6313      	str	r3, [r2, #48]	; 0x30
 8024fbc:	4b45      	ldr	r3, [pc, #276]	; (80250d4 <HAL_ETH_MspInit+0x14c>)
 8024fbe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8024fc0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8024fc4:	623b      	str	r3, [r7, #32]
 8024fc6:	6a3b      	ldr	r3, [r7, #32]
 8024fc8:	2300      	movs	r3, #0
 8024fca:	61fb      	str	r3, [r7, #28]
 8024fcc:	4b41      	ldr	r3, [pc, #260]	; (80250d4 <HAL_ETH_MspInit+0x14c>)
 8024fce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8024fd0:	4a40      	ldr	r2, [pc, #256]	; (80250d4 <HAL_ETH_MspInit+0x14c>)
 8024fd2:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8024fd6:	6313      	str	r3, [r2, #48]	; 0x30
 8024fd8:	4b3e      	ldr	r3, [pc, #248]	; (80250d4 <HAL_ETH_MspInit+0x14c>)
 8024fda:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8024fdc:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8024fe0:	61fb      	str	r3, [r7, #28]
 8024fe2:	69fb      	ldr	r3, [r7, #28]
 8024fe4:	2300      	movs	r3, #0
 8024fe6:	61bb      	str	r3, [r7, #24]
 8024fe8:	4b3a      	ldr	r3, [pc, #232]	; (80250d4 <HAL_ETH_MspInit+0x14c>)
 8024fea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8024fec:	4a39      	ldr	r2, [pc, #228]	; (80250d4 <HAL_ETH_MspInit+0x14c>)
 8024fee:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8024ff2:	6313      	str	r3, [r2, #48]	; 0x30
 8024ff4:	4b37      	ldr	r3, [pc, #220]	; (80250d4 <HAL_ETH_MspInit+0x14c>)
 8024ff6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8024ff8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8024ffc:	61bb      	str	r3, [r7, #24]
 8024ffe:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8025000:	2300      	movs	r3, #0
 8025002:	617b      	str	r3, [r7, #20]
 8025004:	4b33      	ldr	r3, [pc, #204]	; (80250d4 <HAL_ETH_MspInit+0x14c>)
 8025006:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8025008:	4a32      	ldr	r2, [pc, #200]	; (80250d4 <HAL_ETH_MspInit+0x14c>)
 802500a:	f043 0304 	orr.w	r3, r3, #4
 802500e:	6313      	str	r3, [r2, #48]	; 0x30
 8025010:	4b30      	ldr	r3, [pc, #192]	; (80250d4 <HAL_ETH_MspInit+0x14c>)
 8025012:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8025014:	f003 0304 	and.w	r3, r3, #4
 8025018:	617b      	str	r3, [r7, #20]
 802501a:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 802501c:	2300      	movs	r3, #0
 802501e:	613b      	str	r3, [r7, #16]
 8025020:	4b2c      	ldr	r3, [pc, #176]	; (80250d4 <HAL_ETH_MspInit+0x14c>)
 8025022:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8025024:	4a2b      	ldr	r2, [pc, #172]	; (80250d4 <HAL_ETH_MspInit+0x14c>)
 8025026:	f043 0301 	orr.w	r3, r3, #1
 802502a:	6313      	str	r3, [r2, #48]	; 0x30
 802502c:	4b29      	ldr	r3, [pc, #164]	; (80250d4 <HAL_ETH_MspInit+0x14c>)
 802502e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8025030:	f003 0301 	and.w	r3, r3, #1
 8025034:	613b      	str	r3, [r7, #16]
 8025036:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8025038:	2300      	movs	r3, #0
 802503a:	60fb      	str	r3, [r7, #12]
 802503c:	4b25      	ldr	r3, [pc, #148]	; (80250d4 <HAL_ETH_MspInit+0x14c>)
 802503e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8025040:	4a24      	ldr	r2, [pc, #144]	; (80250d4 <HAL_ETH_MspInit+0x14c>)
 8025042:	f043 0302 	orr.w	r3, r3, #2
 8025046:	6313      	str	r3, [r2, #48]	; 0x30
 8025048:	4b22      	ldr	r3, [pc, #136]	; (80250d4 <HAL_ETH_MspInit+0x14c>)
 802504a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 802504c:	f003 0302 	and.w	r3, r3, #2
 8025050:	60fb      	str	r3, [r7, #12]
 8025052:	68fb      	ldr	r3, [r7, #12]
    PC5     ------> ETH_RXD1
    PB11     ------> ETH_TX_EN
    PB12     ------> ETH_TXD0
    PB13     ------> ETH_TXD1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 8025054:	2332      	movs	r3, #50	; 0x32
 8025056:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8025058:	2302      	movs	r3, #2
 802505a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 802505c:	2300      	movs	r3, #0
 802505e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8025060:	2303      	movs	r3, #3
 8025062:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8025064:	230b      	movs	r3, #11
 8025066:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8025068:	f107 0324 	add.w	r3, r7, #36	; 0x24
 802506c:	4619      	mov	r1, r3
 802506e:	481a      	ldr	r0, [pc, #104]	; (80250d8 <HAL_ETH_MspInit+0x150>)
 8025070:	f7fe f88c 	bl	802318c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_7;
 8025074:	2386      	movs	r3, #134	; 0x86
 8025076:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8025078:	2302      	movs	r3, #2
 802507a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 802507c:	2300      	movs	r3, #0
 802507e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8025080:	2303      	movs	r3, #3
 8025082:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8025084:	230b      	movs	r3, #11
 8025086:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8025088:	f107 0324 	add.w	r3, r7, #36	; 0x24
 802508c:	4619      	mov	r1, r3
 802508e:	4813      	ldr	r0, [pc, #76]	; (80250dc <HAL_ETH_MspInit+0x154>)
 8025090:	f7fe f87c 	bl	802318c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13;
 8025094:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8025098:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 802509a:	2302      	movs	r3, #2
 802509c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 802509e:	2300      	movs	r3, #0
 80250a0:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80250a2:	2303      	movs	r3, #3
 80250a4:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80250a6:	230b      	movs	r3, #11
 80250a8:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80250aa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80250ae:	4619      	mov	r1, r3
 80250b0:	480b      	ldr	r0, [pc, #44]	; (80250e0 <HAL_ETH_MspInit+0x158>)
 80250b2:	f7fe f86b 	bl	802318c <HAL_GPIO_Init>

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(ETH_IRQn, 5, 0);
 80250b6:	2200      	movs	r2, #0
 80250b8:	2105      	movs	r1, #5
 80250ba:	203d      	movs	r0, #61	; 0x3d
 80250bc:	f7fc fdec 	bl	8021c98 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ETH_IRQn);
 80250c0:	203d      	movs	r0, #61	; 0x3d
 80250c2:	f7fc fe05 	bl	8021cd0 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }
}
 80250c6:	bf00      	nop
 80250c8:	3738      	adds	r7, #56	; 0x38
 80250ca:	46bd      	mov	sp, r7
 80250cc:	bd80      	pop	{r7, pc}
 80250ce:	bf00      	nop
 80250d0:	40028000 	.word	0x40028000
 80250d4:	40023800 	.word	0x40023800
 80250d8:	40020800 	.word	0x40020800
 80250dc:	40020000 	.word	0x40020000
 80250e0:	40020400 	.word	0x40020400

080250e4 <ETH_PHY_IO_Init>:
  * @brief  Initializes the MDIO interface GPIO and clocks.
  * @param  None
  * @retval 0 if OK, -1 if ERROR
  */
int32_t ETH_PHY_IO_Init(void)
{
 80250e4:	b580      	push	{r7, lr}
 80250e6:	af00      	add	r7, sp, #0
  /* We assume that MDIO GPIO configuration is already done
     in the ETH_MspInit() else it should be done here
  */

  /* Configure the MDIO Clock */
  HAL_ETH_SetMDIOClockRange(&heth);
 80250e8:	4802      	ldr	r0, [pc, #8]	; (80250f4 <ETH_PHY_IO_Init+0x10>)
 80250ea:	f7fd fbe7 	bl	80228bc <HAL_ETH_SetMDIOClockRange>

  return 0;
 80250ee:	2300      	movs	r3, #0
}
 80250f0:	4618      	mov	r0, r3
 80250f2:	bd80      	pop	{r7, pc}
 80250f4:	20004f3c 	.word	0x20004f3c

080250f8 <ETH_PHY_IO_DeInit>:
  * @brief  De-Initializes the MDIO interface .
  * @param  None
  * @retval 0 if OK, -1 if ERROR
  */
int32_t ETH_PHY_IO_DeInit (void)
{
 80250f8:	b480      	push	{r7}
 80250fa:	af00      	add	r7, sp, #0
  return 0;
 80250fc:	2300      	movs	r3, #0
}
 80250fe:	4618      	mov	r0, r3
 8025100:	46bd      	mov	sp, r7
 8025102:	f85d 7b04 	ldr.w	r7, [sp], #4
 8025106:	4770      	bx	lr

08025108 <ETH_PHY_IO_ReadReg>:
  * @param  RegAddr: PHY register address
  * @param  pRegVal: pointer to hold the register value
  * @retval 0 if OK -1 if Error
  */
int32_t ETH_PHY_IO_ReadReg(uint32_t DevAddr, uint32_t RegAddr, uint32_t *pRegVal)
{
 8025108:	b580      	push	{r7, lr}
 802510a:	b084      	sub	sp, #16
 802510c:	af00      	add	r7, sp, #0
 802510e:	60f8      	str	r0, [r7, #12]
 8025110:	60b9      	str	r1, [r7, #8]
 8025112:	607a      	str	r2, [r7, #4]
  if(HAL_ETH_ReadPHYRegister(&heth, DevAddr, RegAddr, pRegVal) != HAL_OK)
 8025114:	687b      	ldr	r3, [r7, #4]
 8025116:	68ba      	ldr	r2, [r7, #8]
 8025118:	68f9      	ldr	r1, [r7, #12]
 802511a:	4807      	ldr	r0, [pc, #28]	; (8025138 <ETH_PHY_IO_ReadReg+0x30>)
 802511c:	f7fd fa36 	bl	802258c <HAL_ETH_ReadPHYRegister>
 8025120:	4603      	mov	r3, r0
 8025122:	2b00      	cmp	r3, #0
 8025124:	d002      	beq.n	802512c <ETH_PHY_IO_ReadReg+0x24>
  {
    return -1;
 8025126:	f04f 33ff 	mov.w	r3, #4294967295
 802512a:	e000      	b.n	802512e <ETH_PHY_IO_ReadReg+0x26>
  }

  return 0;
 802512c:	2300      	movs	r3, #0
}
 802512e:	4618      	mov	r0, r3
 8025130:	3710      	adds	r7, #16
 8025132:	46bd      	mov	sp, r7
 8025134:	bd80      	pop	{r7, pc}
 8025136:	bf00      	nop
 8025138:	20004f3c 	.word	0x20004f3c

0802513c <ETH_PHY_IO_WriteReg>:
  * @param  RegAddr: PHY register address
  * @param  RegVal: Value to be written
  * @retval 0 if OK -1 if Error
  */
int32_t ETH_PHY_IO_WriteReg(uint32_t DevAddr, uint32_t RegAddr, uint32_t RegVal)
{
 802513c:	b580      	push	{r7, lr}
 802513e:	b084      	sub	sp, #16
 8025140:	af00      	add	r7, sp, #0
 8025142:	60f8      	str	r0, [r7, #12]
 8025144:	60b9      	str	r1, [r7, #8]
 8025146:	607a      	str	r2, [r7, #4]
  if(HAL_ETH_WritePHYRegister(&heth, DevAddr, RegAddr, RegVal) != HAL_OK)
 8025148:	687b      	ldr	r3, [r7, #4]
 802514a:	68ba      	ldr	r2, [r7, #8]
 802514c:	68f9      	ldr	r1, [r7, #12]
 802514e:	4807      	ldr	r0, [pc, #28]	; (802516c <ETH_PHY_IO_WriteReg+0x30>)
 8025150:	f7fd fa67 	bl	8022622 <HAL_ETH_WritePHYRegister>
 8025154:	4603      	mov	r3, r0
 8025156:	2b00      	cmp	r3, #0
 8025158:	d002      	beq.n	8025160 <ETH_PHY_IO_WriteReg+0x24>
  {
    return -1;
 802515a:	f04f 33ff 	mov.w	r3, #4294967295
 802515e:	e000      	b.n	8025162 <ETH_PHY_IO_WriteReg+0x26>
  }

  return 0;
 8025160:	2300      	movs	r3, #0
}
 8025162:	4618      	mov	r0, r3
 8025164:	3710      	adds	r7, #16
 8025166:	46bd      	mov	sp, r7
 8025168:	bd80      	pop	{r7, pc}
 802516a:	bf00      	nop
 802516c:	20004f3c 	.word	0x20004f3c

08025170 <ETH_PHY_IO_GetTick>:
/**
  * @brief  Get the time in millisecons used for internal PHY driver process.
  * @retval Time value
  */
int32_t ETH_PHY_IO_GetTick(void)
{
 8025170:	b580      	push	{r7, lr}
 8025172:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 8025174:	f7fc fca8 	bl	8021ac8 <HAL_GetTick>
 8025178:	4603      	mov	r3, r0
}
 802517a:	4618      	mov	r0, r3
 802517c:	bd80      	pop	{r7, pc}
	...

08025180 <ethernet_link_thread>:
  * @brief  Check the ETH link state then update ETH driver and netif link accordingly.
  * @retval None
  */

void ethernet_link_thread(void const * argument)
{
 8025180:	b580      	push	{r7, lr}
 8025182:	b0a0      	sub	sp, #128	; 0x80
 8025184:	af00      	add	r7, sp, #0
 8025186:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef MACConf = {0};
 8025188:	f107 0308 	add.w	r3, r7, #8
 802518c:	2264      	movs	r2, #100	; 0x64
 802518e:	2100      	movs	r1, #0
 8025190:	4618      	mov	r0, r3
 8025192:	f013 fb7d 	bl	8038890 <memset>
  int32_t PHYLinkState = 0;
 8025196:	2300      	movs	r3, #0
 8025198:	673b      	str	r3, [r7, #112]	; 0x70
  uint32_t linkchanged = 0U, speed = 0U, duplex = 0U;
 802519a:	2300      	movs	r3, #0
 802519c:	67fb      	str	r3, [r7, #124]	; 0x7c
 802519e:	2300      	movs	r3, #0
 80251a0:	67bb      	str	r3, [r7, #120]	; 0x78
 80251a2:	2300      	movs	r3, #0
 80251a4:	677b      	str	r3, [r7, #116]	; 0x74

  struct netif *netif = (struct netif *) argument;
 80251a6:	687b      	ldr	r3, [r7, #4]
 80251a8:	66fb      	str	r3, [r7, #108]	; 0x6c

/* USER CODE END ETH link init */

  for(;;)
  {
  PHYLinkState = LAN8742_GetLinkState(&LAN8742);
 80251aa:	483a      	ldr	r0, [pc, #232]	; (8025294 <ethernet_link_thread+0x114>)
 80251ac:	f7fc fbcf 	bl	802194e <LAN8742_GetLinkState>
 80251b0:	6738      	str	r0, [r7, #112]	; 0x70

  if(netif_is_link_up(netif) && (PHYLinkState <= LAN8742_STATUS_LINK_DOWN))
 80251b2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80251b4:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80251b8:	089b      	lsrs	r3, r3, #2
 80251ba:	f003 0301 	and.w	r3, r3, #1
 80251be:	b2db      	uxtb	r3, r3
 80251c0:	2b00      	cmp	r3, #0
 80251c2:	d00c      	beq.n	80251de <ethernet_link_thread+0x5e>
 80251c4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80251c6:	2b01      	cmp	r3, #1
 80251c8:	dc09      	bgt.n	80251de <ethernet_link_thread+0x5e>
  {
    HAL_ETH_Stop_IT(&heth);
 80251ca:	4833      	ldr	r0, [pc, #204]	; (8025298 <ethernet_link_thread+0x118>)
 80251cc:	f7fc fe9a 	bl	8021f04 <HAL_ETH_Stop_IT>
    netif_set_down(netif);
 80251d0:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 80251d2:	f008 fc25 	bl	802da20 <netif_set_down>
    netif_set_link_down(netif);
 80251d6:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 80251d8:	f008 fc88 	bl	802daec <netif_set_link_down>
 80251dc:	e055      	b.n	802528a <ethernet_link_thread+0x10a>
  }
  else if(!netif_is_link_up(netif) && (PHYLinkState > LAN8742_STATUS_LINK_DOWN))
 80251de:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80251e0:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80251e4:	f003 0304 	and.w	r3, r3, #4
 80251e8:	2b00      	cmp	r3, #0
 80251ea:	d14e      	bne.n	802528a <ethernet_link_thread+0x10a>
 80251ec:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80251ee:	2b01      	cmp	r3, #1
 80251f0:	dd4b      	ble.n	802528a <ethernet_link_thread+0x10a>
  {
    switch (PHYLinkState)
 80251f2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80251f4:	3b02      	subs	r3, #2
 80251f6:	2b03      	cmp	r3, #3
 80251f8:	d82a      	bhi.n	8025250 <ethernet_link_thread+0xd0>
 80251fa:	a201      	add	r2, pc, #4	; (adr r2, 8025200 <ethernet_link_thread+0x80>)
 80251fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8025200:	08025211 	.word	0x08025211
 8025204:	08025223 	.word	0x08025223
 8025208:	08025233 	.word	0x08025233
 802520c:	08025243 	.word	0x08025243
    {
    case LAN8742_STATUS_100MBITS_FULLDUPLEX:
      duplex = ETH_FULLDUPLEX_MODE;
 8025210:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8025214:	677b      	str	r3, [r7, #116]	; 0x74
      speed = ETH_SPEED_100M;
 8025216:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 802521a:	67bb      	str	r3, [r7, #120]	; 0x78
      linkchanged = 1;
 802521c:	2301      	movs	r3, #1
 802521e:	67fb      	str	r3, [r7, #124]	; 0x7c
      break;
 8025220:	e017      	b.n	8025252 <ethernet_link_thread+0xd2>
    case LAN8742_STATUS_100MBITS_HALFDUPLEX:
      duplex = ETH_HALFDUPLEX_MODE;
 8025222:	2300      	movs	r3, #0
 8025224:	677b      	str	r3, [r7, #116]	; 0x74
      speed = ETH_SPEED_100M;
 8025226:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 802522a:	67bb      	str	r3, [r7, #120]	; 0x78
      linkchanged = 1;
 802522c:	2301      	movs	r3, #1
 802522e:	67fb      	str	r3, [r7, #124]	; 0x7c
      break;
 8025230:	e00f      	b.n	8025252 <ethernet_link_thread+0xd2>
    case LAN8742_STATUS_10MBITS_FULLDUPLEX:
      duplex = ETH_FULLDUPLEX_MODE;
 8025232:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8025236:	677b      	str	r3, [r7, #116]	; 0x74
      speed = ETH_SPEED_10M;
 8025238:	2300      	movs	r3, #0
 802523a:	67bb      	str	r3, [r7, #120]	; 0x78
      linkchanged = 1;
 802523c:	2301      	movs	r3, #1
 802523e:	67fb      	str	r3, [r7, #124]	; 0x7c
      break;
 8025240:	e007      	b.n	8025252 <ethernet_link_thread+0xd2>
    case LAN8742_STATUS_10MBITS_HALFDUPLEX:
      duplex = ETH_HALFDUPLEX_MODE;
 8025242:	2300      	movs	r3, #0
 8025244:	677b      	str	r3, [r7, #116]	; 0x74
      speed = ETH_SPEED_10M;
 8025246:	2300      	movs	r3, #0
 8025248:	67bb      	str	r3, [r7, #120]	; 0x78
      linkchanged = 1;
 802524a:	2301      	movs	r3, #1
 802524c:	67fb      	str	r3, [r7, #124]	; 0x7c
      break;
 802524e:	e000      	b.n	8025252 <ethernet_link_thread+0xd2>
    default:
      break;
 8025250:	bf00      	nop
    }

    if(linkchanged)
 8025252:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8025254:	2b00      	cmp	r3, #0
 8025256:	d018      	beq.n	802528a <ethernet_link_thread+0x10a>
    {
      /* Get MAC Config MAC */
      HAL_ETH_GetMACConfig(&heth, &MACConf);
 8025258:	f107 0308 	add.w	r3, r7, #8
 802525c:	4619      	mov	r1, r3
 802525e:	480e      	ldr	r0, [pc, #56]	; (8025298 <ethernet_link_thread+0x118>)
 8025260:	f7fd fa28 	bl	80226b4 <HAL_ETH_GetMACConfig>
      MACConf.DuplexMode = duplex;
 8025264:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8025266:	623b      	str	r3, [r7, #32]
      MACConf.Speed = speed;
 8025268:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 802526a:	61fb      	str	r3, [r7, #28]
      HAL_ETH_SetMACConfig(&heth, &MACConf);
 802526c:	f107 0308 	add.w	r3, r7, #8
 8025270:	4619      	mov	r1, r3
 8025272:	4809      	ldr	r0, [pc, #36]	; (8025298 <ethernet_link_thread+0x118>)
 8025274:	f7fd fb08 	bl	8022888 <HAL_ETH_SetMACConfig>
      HAL_ETH_Start_IT(&heth);
 8025278:	4807      	ldr	r0, [pc, #28]	; (8025298 <ethernet_link_thread+0x118>)
 802527a:	f7fc fdb5 	bl	8021de8 <HAL_ETH_Start_IT>
      netif_set_up(netif);
 802527e:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8025280:	f008 fb62 	bl	802d948 <netif_set_up>
      netif_set_link_up(netif);
 8025284:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8025286:	f008 fbfd 	bl	802da84 <netif_set_link_up>

/* USER CODE BEGIN ETH link Thread core code for User BSP */

/* USER CODE END ETH link Thread core code for User BSP */

    osDelay(100);
 802528a:	2064      	movs	r0, #100	; 0x64
 802528c:	f000 f90e 	bl	80254ac <osDelay>
  PHYLinkState = LAN8742_GetLinkState(&LAN8742);
 8025290:	e78b      	b.n	80251aa <ethernet_link_thread+0x2a>
 8025292:	bf00      	nop
 8025294:	20005024 	.word	0x20005024
 8025298:	20004f3c 	.word	0x20004f3c

0802529c <HAL_ETH_RxAllocateCallback>:
  }
}

void HAL_ETH_RxAllocateCallback(uint8_t **buff)
{
 802529c:	b580      	push	{r7, lr}
 802529e:	b086      	sub	sp, #24
 80252a0:	af02      	add	r7, sp, #8
 80252a2:	6078      	str	r0, [r7, #4]
/* USER CODE BEGIN HAL ETH RxAllocateCallback */
  struct pbuf_custom *p = LWIP_MEMPOOL_ALLOC(RX_POOL);
 80252a4:	4812      	ldr	r0, [pc, #72]	; (80252f0 <HAL_ETH_RxAllocateCallback+0x54>)
 80252a6:	f008 f8bd 	bl	802d424 <memp_malloc_pool>
 80252aa:	60f8      	str	r0, [r7, #12]
  if (p)
 80252ac:	68fb      	ldr	r3, [r7, #12]
 80252ae:	2b00      	cmp	r3, #0
 80252b0:	d014      	beq.n	80252dc <HAL_ETH_RxAllocateCallback+0x40>
  {
    /* Get the buff from the struct pbuf address. */
    *buff = (uint8_t *)p + offsetof(RxBuff_t, buff);
 80252b2:	68fb      	ldr	r3, [r7, #12]
 80252b4:	f103 0220 	add.w	r2, r3, #32
 80252b8:	687b      	ldr	r3, [r7, #4]
 80252ba:	601a      	str	r2, [r3, #0]
    p->custom_free_function = pbuf_free_custom;
 80252bc:	68fb      	ldr	r3, [r7, #12]
 80252be:	4a0d      	ldr	r2, [pc, #52]	; (80252f4 <HAL_ETH_RxAllocateCallback+0x58>)
 80252c0:	611a      	str	r2, [r3, #16]
    /* Initialize the struct pbuf.
    * This must be performed whenever a buffer's allocated because it may be
    * changed by lwIP or the app, e.g., pbuf_free decrements ref. */
    pbuf_alloced_custom(PBUF_RAW, 0, PBUF_REF, p, *buff, ETH_RX_BUF_SIZE);
 80252c2:	687b      	ldr	r3, [r7, #4]
 80252c4:	681b      	ldr	r3, [r3, #0]
 80252c6:	f44f 62c0 	mov.w	r2, #1536	; 0x600
 80252ca:	9201      	str	r2, [sp, #4]
 80252cc:	9300      	str	r3, [sp, #0]
 80252ce:	68fb      	ldr	r3, [r7, #12]
 80252d0:	2241      	movs	r2, #65	; 0x41
 80252d2:	2100      	movs	r1, #0
 80252d4:	2000      	movs	r0, #0
 80252d6:	f008 fe2d 	bl	802df34 <pbuf_alloced_custom>
  {
    RxAllocStatus = RX_ALLOC_ERROR;
    *buff = NULL;
  }
/* USER CODE END HAL ETH RxAllocateCallback */
}
 80252da:	e005      	b.n	80252e8 <HAL_ETH_RxAllocateCallback+0x4c>
    RxAllocStatus = RX_ALLOC_ERROR;
 80252dc:	4b06      	ldr	r3, [pc, #24]	; (80252f8 <HAL_ETH_RxAllocateCallback+0x5c>)
 80252de:	2201      	movs	r2, #1
 80252e0:	701a      	strb	r2, [r3, #0]
    *buff = NULL;
 80252e2:	687b      	ldr	r3, [r7, #4]
 80252e4:	2200      	movs	r2, #0
 80252e6:	601a      	str	r2, [r3, #0]
}
 80252e8:	bf00      	nop
 80252ea:	3710      	adds	r7, #16
 80252ec:	46bd      	mov	sp, r7
 80252ee:	bd80      	pop	{r7, pc}
 80252f0:	0803d490 	.word	0x0803d490
 80252f4:	08024f39 	.word	0x08024f39
 80252f8:	20004df0 	.word	0x20004df0

080252fc <HAL_ETH_RxLinkCallback>:

void HAL_ETH_RxLinkCallback(void **pStart, void **pEnd, uint8_t *buff, uint16_t Length)
{
 80252fc:	b480      	push	{r7}
 80252fe:	b089      	sub	sp, #36	; 0x24
 8025300:	af00      	add	r7, sp, #0
 8025302:	60f8      	str	r0, [r7, #12]
 8025304:	60b9      	str	r1, [r7, #8]
 8025306:	607a      	str	r2, [r7, #4]
 8025308:	807b      	strh	r3, [r7, #2]
/* USER CODE BEGIN HAL ETH RxLinkCallback */

  struct pbuf **ppStart = (struct pbuf **)pStart;
 802530a:	68fb      	ldr	r3, [r7, #12]
 802530c:	61bb      	str	r3, [r7, #24]
  struct pbuf **ppEnd = (struct pbuf **)pEnd;
 802530e:	68bb      	ldr	r3, [r7, #8]
 8025310:	617b      	str	r3, [r7, #20]
  struct pbuf *p = NULL;
 8025312:	2300      	movs	r3, #0
 8025314:	61fb      	str	r3, [r7, #28]

  /* Get the struct pbuf from the buff address. */
  p = (struct pbuf *)(buff - offsetof(RxBuff_t, buff));
 8025316:	687b      	ldr	r3, [r7, #4]
 8025318:	3b20      	subs	r3, #32
 802531a:	61fb      	str	r3, [r7, #28]
  p->next = NULL;
 802531c:	69fb      	ldr	r3, [r7, #28]
 802531e:	2200      	movs	r2, #0
 8025320:	601a      	str	r2, [r3, #0]
  p->tot_len = 0;
 8025322:	69fb      	ldr	r3, [r7, #28]
 8025324:	2200      	movs	r2, #0
 8025326:	811a      	strh	r2, [r3, #8]
  p->len = Length;
 8025328:	69fb      	ldr	r3, [r7, #28]
 802532a:	887a      	ldrh	r2, [r7, #2]
 802532c:	815a      	strh	r2, [r3, #10]

  /* Chain the buffer. */
  if (!*ppStart)
 802532e:	69bb      	ldr	r3, [r7, #24]
 8025330:	681b      	ldr	r3, [r3, #0]
 8025332:	2b00      	cmp	r3, #0
 8025334:	d103      	bne.n	802533e <HAL_ETH_RxLinkCallback+0x42>
  {
    /* The first buffer of the packet. */
    *ppStart = p;
 8025336:	69bb      	ldr	r3, [r7, #24]
 8025338:	69fa      	ldr	r2, [r7, #28]
 802533a:	601a      	str	r2, [r3, #0]
 802533c:	e003      	b.n	8025346 <HAL_ETH_RxLinkCallback+0x4a>
  }
  else
  {
    /* Chain the buffer to the end of the packet. */
    (*ppEnd)->next = p;
 802533e:	697b      	ldr	r3, [r7, #20]
 8025340:	681b      	ldr	r3, [r3, #0]
 8025342:	69fa      	ldr	r2, [r7, #28]
 8025344:	601a      	str	r2, [r3, #0]
  }
  *ppEnd  = p;
 8025346:	697b      	ldr	r3, [r7, #20]
 8025348:	69fa      	ldr	r2, [r7, #28]
 802534a:	601a      	str	r2, [r3, #0]

  /* Update the total length of all the buffers of the chain. Each pbuf in the chain should have its tot_len
   * set to its own length, plus the length of all the following pbufs in the chain. */
  for (p = *ppStart; p != NULL; p = p->next)
 802534c:	69bb      	ldr	r3, [r7, #24]
 802534e:	681b      	ldr	r3, [r3, #0]
 8025350:	61fb      	str	r3, [r7, #28]
 8025352:	e009      	b.n	8025368 <HAL_ETH_RxLinkCallback+0x6c>
  {
    p->tot_len += Length;
 8025354:	69fb      	ldr	r3, [r7, #28]
 8025356:	891a      	ldrh	r2, [r3, #8]
 8025358:	887b      	ldrh	r3, [r7, #2]
 802535a:	4413      	add	r3, r2
 802535c:	b29a      	uxth	r2, r3
 802535e:	69fb      	ldr	r3, [r7, #28]
 8025360:	811a      	strh	r2, [r3, #8]
  for (p = *ppStart; p != NULL; p = p->next)
 8025362:	69fb      	ldr	r3, [r7, #28]
 8025364:	681b      	ldr	r3, [r3, #0]
 8025366:	61fb      	str	r3, [r7, #28]
 8025368:	69fb      	ldr	r3, [r7, #28]
 802536a:	2b00      	cmp	r3, #0
 802536c:	d1f2      	bne.n	8025354 <HAL_ETH_RxLinkCallback+0x58>
  }

/* USER CODE END HAL ETH RxLinkCallback */
}
 802536e:	bf00      	nop
 8025370:	bf00      	nop
 8025372:	3724      	adds	r7, #36	; 0x24
 8025374:	46bd      	mov	sp, r7
 8025376:	f85d 7b04 	ldr.w	r7, [sp], #4
 802537a:	4770      	bx	lr

0802537c <HAL_ETH_TxFreeCallback>:

void HAL_ETH_TxFreeCallback(uint32_t * buff)
{
 802537c:	b580      	push	{r7, lr}
 802537e:	b082      	sub	sp, #8
 8025380:	af00      	add	r7, sp, #0
 8025382:	6078      	str	r0, [r7, #4]
/* USER CODE BEGIN HAL ETH TxFreeCallback */

  pbuf_free((struct pbuf *)buff);
 8025384:	6878      	ldr	r0, [r7, #4]
 8025386:	f008 ffc1 	bl	802e30c <pbuf_free>

/* USER CODE END HAL ETH TxFreeCallback */
}
 802538a:	bf00      	nop
 802538c:	3708      	adds	r7, #8
 802538e:	46bd      	mov	sp, r7
 8025390:	bd80      	pop	{r7, pc}

08025392 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8025392:	b480      	push	{r7}
 8025394:	b085      	sub	sp, #20
 8025396:	af00      	add	r7, sp, #0
 8025398:	4603      	mov	r3, r0
 802539a:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 802539c:	2300      	movs	r3, #0
 802539e:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 80253a0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80253a4:	2b84      	cmp	r3, #132	; 0x84
 80253a6:	d005      	beq.n	80253b4 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 80253a8:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80253ac:	68fb      	ldr	r3, [r7, #12]
 80253ae:	4413      	add	r3, r2
 80253b0:	3303      	adds	r3, #3
 80253b2:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 80253b4:	68fb      	ldr	r3, [r7, #12]
}
 80253b6:	4618      	mov	r0, r3
 80253b8:	3714      	adds	r7, #20
 80253ba:	46bd      	mov	sp, r7
 80253bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80253c0:	4770      	bx	lr

080253c2 <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 80253c2:	b480      	push	{r7}
 80253c4:	b083      	sub	sp, #12
 80253c6:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80253c8:	f3ef 8305 	mrs	r3, IPSR
 80253cc:	607b      	str	r3, [r7, #4]
  return(result);
 80253ce:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 80253d0:	2b00      	cmp	r3, #0
 80253d2:	bf14      	ite	ne
 80253d4:	2301      	movne	r3, #1
 80253d6:	2300      	moveq	r3, #0
 80253d8:	b2db      	uxtb	r3, r3
}
 80253da:	4618      	mov	r0, r3
 80253dc:	370c      	adds	r7, #12
 80253de:	46bd      	mov	sp, r7
 80253e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80253e4:	4770      	bx	lr

080253e6 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 80253e6:	b580      	push	{r7, lr}
 80253e8:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 80253ea:	f001 fdb3 	bl	8026f54 <vTaskStartScheduler>
  
  return osOK;
 80253ee:	2300      	movs	r3, #0
}
 80253f0:	4618      	mov	r0, r3
 80253f2:	bd80      	pop	{r7, pc}

080253f4 <osKernelSysTick>:
* @param  None
* @retval None
* @note   MUST REMAIN UNCHANGED: \b osKernelSysTick shall be consistent in every CMSIS-RTOS.
*/
uint32_t osKernelSysTick(void)
{
 80253f4:	b580      	push	{r7, lr}
 80253f6:	af00      	add	r7, sp, #0
  if (inHandlerMode()) {
 80253f8:	f7ff ffe3 	bl	80253c2 <inHandlerMode>
 80253fc:	4603      	mov	r3, r0
 80253fe:	2b00      	cmp	r3, #0
 8025400:	d003      	beq.n	802540a <osKernelSysTick+0x16>
    return xTaskGetTickCountFromISR();
 8025402:	f001 fecb 	bl	802719c <xTaskGetTickCountFromISR>
 8025406:	4603      	mov	r3, r0
 8025408:	e002      	b.n	8025410 <osKernelSysTick+0x1c>
  }
  else {
    return xTaskGetTickCount();
 802540a:	f001 feb7 	bl	802717c <xTaskGetTickCount>
 802540e:	4603      	mov	r3, r0
  }
}
 8025410:	4618      	mov	r0, r3
 8025412:	bd80      	pop	{r7, pc}

08025414 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8025414:	b5f0      	push	{r4, r5, r6, r7, lr}
 8025416:	b089      	sub	sp, #36	; 0x24
 8025418:	af04      	add	r7, sp, #16
 802541a:	6078      	str	r0, [r7, #4]
 802541c:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 802541e:	687b      	ldr	r3, [r7, #4]
 8025420:	695b      	ldr	r3, [r3, #20]
 8025422:	2b00      	cmp	r3, #0
 8025424:	d020      	beq.n	8025468 <osThreadCreate+0x54>
 8025426:	687b      	ldr	r3, [r7, #4]
 8025428:	699b      	ldr	r3, [r3, #24]
 802542a:	2b00      	cmp	r3, #0
 802542c:	d01c      	beq.n	8025468 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 802542e:	687b      	ldr	r3, [r7, #4]
 8025430:	685c      	ldr	r4, [r3, #4]
 8025432:	687b      	ldr	r3, [r7, #4]
 8025434:	681d      	ldr	r5, [r3, #0]
 8025436:	687b      	ldr	r3, [r7, #4]
 8025438:	691e      	ldr	r6, [r3, #16]
 802543a:	687b      	ldr	r3, [r7, #4]
 802543c:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8025440:	4618      	mov	r0, r3
 8025442:	f7ff ffa6 	bl	8025392 <makeFreeRtosPriority>
 8025446:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 8025448:	687b      	ldr	r3, [r7, #4]
 802544a:	695b      	ldr	r3, [r3, #20]
 802544c:	687a      	ldr	r2, [r7, #4]
 802544e:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8025450:	9202      	str	r2, [sp, #8]
 8025452:	9301      	str	r3, [sp, #4]
 8025454:	9100      	str	r1, [sp, #0]
 8025456:	683b      	ldr	r3, [r7, #0]
 8025458:	4632      	mov	r2, r6
 802545a:	4629      	mov	r1, r5
 802545c:	4620      	mov	r0, r4
 802545e:	f001 fb9b 	bl	8026b98 <xTaskCreateStatic>
 8025462:	4603      	mov	r3, r0
 8025464:	60fb      	str	r3, [r7, #12]
 8025466:	e01c      	b.n	80254a2 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8025468:	687b      	ldr	r3, [r7, #4]
 802546a:	685c      	ldr	r4, [r3, #4]
 802546c:	687b      	ldr	r3, [r7, #4]
 802546e:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8025470:	687b      	ldr	r3, [r7, #4]
 8025472:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8025474:	b29e      	uxth	r6, r3
 8025476:	687b      	ldr	r3, [r7, #4]
 8025478:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 802547c:	4618      	mov	r0, r3
 802547e:	f7ff ff88 	bl	8025392 <makeFreeRtosPriority>
 8025482:	4602      	mov	r2, r0
 8025484:	f107 030c 	add.w	r3, r7, #12
 8025488:	9301      	str	r3, [sp, #4]
 802548a:	9200      	str	r2, [sp, #0]
 802548c:	683b      	ldr	r3, [r7, #0]
 802548e:	4632      	mov	r2, r6
 8025490:	4629      	mov	r1, r5
 8025492:	4620      	mov	r0, r4
 8025494:	f001 fbdd 	bl	8026c52 <xTaskCreate>
 8025498:	4603      	mov	r3, r0
 802549a:	2b01      	cmp	r3, #1
 802549c:	d001      	beq.n	80254a2 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 802549e:	2300      	movs	r3, #0
 80254a0:	e000      	b.n	80254a4 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 80254a2:	68fb      	ldr	r3, [r7, #12]
}
 80254a4:	4618      	mov	r0, r3
 80254a6:	3714      	adds	r7, #20
 80254a8:	46bd      	mov	sp, r7
 80254aa:	bdf0      	pop	{r4, r5, r6, r7, pc}

080254ac <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 80254ac:	b580      	push	{r7, lr}
 80254ae:	b084      	sub	sp, #16
 80254b0:	af00      	add	r7, sp, #0
 80254b2:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 80254b4:	687b      	ldr	r3, [r7, #4]
 80254b6:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 80254b8:	68fb      	ldr	r3, [r7, #12]
 80254ba:	2b00      	cmp	r3, #0
 80254bc:	d001      	beq.n	80254c2 <osDelay+0x16>
 80254be:	68fb      	ldr	r3, [r7, #12]
 80254c0:	e000      	b.n	80254c4 <osDelay+0x18>
 80254c2:	2301      	movs	r3, #1
 80254c4:	4618      	mov	r0, r3
 80254c6:	f001 fd11 	bl	8026eec <vTaskDelay>
  
  return osOK;
 80254ca:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 80254cc:	4618      	mov	r0, r3
 80254ce:	3710      	adds	r7, #16
 80254d0:	46bd      	mov	sp, r7
 80254d2:	bd80      	pop	{r7, pc}

080254d4 <osMutexCreate>:
* @param  mutex_def     mutex definition referenced with \ref osMutex.
* @retval  mutex ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMutexCreate shall be consistent in every CMSIS-RTOS.
*/
osMutexId osMutexCreate (const osMutexDef_t *mutex_def)
{
 80254d4:	b580      	push	{r7, lr}
 80254d6:	b082      	sub	sp, #8
 80254d8:	af00      	add	r7, sp, #0
 80254da:	6078      	str	r0, [r7, #4]
#if ( configUSE_MUTEXES == 1)

#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if (mutex_def->controlblock != NULL) {
 80254dc:	687b      	ldr	r3, [r7, #4]
 80254de:	685b      	ldr	r3, [r3, #4]
 80254e0:	2b00      	cmp	r3, #0
 80254e2:	d007      	beq.n	80254f4 <osMutexCreate+0x20>
    return xSemaphoreCreateMutexStatic( mutex_def->controlblock );
 80254e4:	687b      	ldr	r3, [r7, #4]
 80254e6:	685b      	ldr	r3, [r3, #4]
 80254e8:	4619      	mov	r1, r3
 80254ea:	2001      	movs	r0, #1
 80254ec:	f000 fc8b 	bl	8025e06 <xQueueCreateMutexStatic>
 80254f0:	4603      	mov	r3, r0
 80254f2:	e003      	b.n	80254fc <osMutexCreate+0x28>
     }
  else {
    return xSemaphoreCreateMutex(); 
 80254f4:	2001      	movs	r0, #1
 80254f6:	f000 fc6e 	bl	8025dd6 <xQueueCreateMutex>
 80254fa:	4603      	mov	r3, r0
    return xSemaphoreCreateMutex(); 
#endif
#else
  return NULL;
#endif
}
 80254fc:	4618      	mov	r0, r3
 80254fe:	3708      	adds	r7, #8
 8025500:	46bd      	mov	sp, r7
 8025502:	bd80      	pop	{r7, pc}

08025504 <osMutexWait>:
* @param millisec      timeout value or 0 in case of no time-out.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMutexWait shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexWait (osMutexId mutex_id, uint32_t millisec)
{
 8025504:	b580      	push	{r7, lr}
 8025506:	b084      	sub	sp, #16
 8025508:	af00      	add	r7, sp, #0
 802550a:	6078      	str	r0, [r7, #4]
 802550c:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 802550e:	2300      	movs	r3, #0
 8025510:	60bb      	str	r3, [r7, #8]
  
  
  if (mutex_id == NULL) {
 8025512:	687b      	ldr	r3, [r7, #4]
 8025514:	2b00      	cmp	r3, #0
 8025516:	d101      	bne.n	802551c <osMutexWait+0x18>
    return osErrorParameter;
 8025518:	2380      	movs	r3, #128	; 0x80
 802551a:	e03a      	b.n	8025592 <osMutexWait+0x8e>
  }
  
  ticks = 0;
 802551c:	2300      	movs	r3, #0
 802551e:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 8025520:	683b      	ldr	r3, [r7, #0]
 8025522:	f1b3 3fff 	cmp.w	r3, #4294967295
 8025526:	d103      	bne.n	8025530 <osMutexWait+0x2c>
    ticks = portMAX_DELAY;
 8025528:	f04f 33ff 	mov.w	r3, #4294967295
 802552c:	60fb      	str	r3, [r7, #12]
 802552e:	e009      	b.n	8025544 <osMutexWait+0x40>
  }
  else if (millisec != 0) {
 8025530:	683b      	ldr	r3, [r7, #0]
 8025532:	2b00      	cmp	r3, #0
 8025534:	d006      	beq.n	8025544 <osMutexWait+0x40>
    ticks = millisec / portTICK_PERIOD_MS;
 8025536:	683b      	ldr	r3, [r7, #0]
 8025538:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 802553a:	68fb      	ldr	r3, [r7, #12]
 802553c:	2b00      	cmp	r3, #0
 802553e:	d101      	bne.n	8025544 <osMutexWait+0x40>
      ticks = 1;
 8025540:	2301      	movs	r3, #1
 8025542:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 8025544:	f7ff ff3d 	bl	80253c2 <inHandlerMode>
 8025548:	4603      	mov	r3, r0
 802554a:	2b00      	cmp	r3, #0
 802554c:	d017      	beq.n	802557e <osMutexWait+0x7a>
    if (xSemaphoreTakeFromISR(mutex_id, &taskWoken) != pdTRUE) {
 802554e:	f107 0308 	add.w	r3, r7, #8
 8025552:	461a      	mov	r2, r3
 8025554:	2100      	movs	r1, #0
 8025556:	6878      	ldr	r0, [r7, #4]
 8025558:	f001 f8ec 	bl	8026734 <xQueueReceiveFromISR>
 802555c:	4603      	mov	r3, r0
 802555e:	2b01      	cmp	r3, #1
 8025560:	d001      	beq.n	8025566 <osMutexWait+0x62>
      return osErrorOS;
 8025562:	23ff      	movs	r3, #255	; 0xff
 8025564:	e015      	b.n	8025592 <osMutexWait+0x8e>
    }
	portEND_SWITCHING_ISR(taskWoken);
 8025566:	68bb      	ldr	r3, [r7, #8]
 8025568:	2b00      	cmp	r3, #0
 802556a:	d011      	beq.n	8025590 <osMutexWait+0x8c>
 802556c:	4b0b      	ldr	r3, [pc, #44]	; (802559c <osMutexWait+0x98>)
 802556e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8025572:	601a      	str	r2, [r3, #0]
 8025574:	f3bf 8f4f 	dsb	sy
 8025578:	f3bf 8f6f 	isb	sy
 802557c:	e008      	b.n	8025590 <osMutexWait+0x8c>
  } 
  else if (xSemaphoreTake(mutex_id, ticks) != pdTRUE) {
 802557e:	68f9      	ldr	r1, [r7, #12]
 8025580:	6878      	ldr	r0, [r7, #4]
 8025582:	f000 ffcb 	bl	802651c <xQueueSemaphoreTake>
 8025586:	4603      	mov	r3, r0
 8025588:	2b01      	cmp	r3, #1
 802558a:	d001      	beq.n	8025590 <osMutexWait+0x8c>
    return osErrorOS;
 802558c:	23ff      	movs	r3, #255	; 0xff
 802558e:	e000      	b.n	8025592 <osMutexWait+0x8e>
  }
  
  return osOK;
 8025590:	2300      	movs	r3, #0
}
 8025592:	4618      	mov	r0, r3
 8025594:	3710      	adds	r7, #16
 8025596:	46bd      	mov	sp, r7
 8025598:	bd80      	pop	{r7, pc}
 802559a:	bf00      	nop
 802559c:	e000ed04 	.word	0xe000ed04

080255a0 <osMutexRelease>:
* @param mutex_id      mutex ID obtained by \ref osMutexCreate.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMutexRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexRelease (osMutexId mutex_id)
{
 80255a0:	b580      	push	{r7, lr}
 80255a2:	b084      	sub	sp, #16
 80255a4:	af00      	add	r7, sp, #0
 80255a6:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 80255a8:	2300      	movs	r3, #0
 80255aa:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 80255ac:	2300      	movs	r3, #0
 80255ae:	60bb      	str	r3, [r7, #8]
  
  if (inHandlerMode()) {
 80255b0:	f7ff ff07 	bl	80253c2 <inHandlerMode>
 80255b4:	4603      	mov	r3, r0
 80255b6:	2b00      	cmp	r3, #0
 80255b8:	d016      	beq.n	80255e8 <osMutexRelease+0x48>
    if (xSemaphoreGiveFromISR(mutex_id, &taskWoken) != pdTRUE) {
 80255ba:	f107 0308 	add.w	r3, r7, #8
 80255be:	4619      	mov	r1, r3
 80255c0:	6878      	ldr	r0, [r7, #4]
 80255c2:	f000 fe3e 	bl	8026242 <xQueueGiveFromISR>
 80255c6:	4603      	mov	r3, r0
 80255c8:	2b01      	cmp	r3, #1
 80255ca:	d001      	beq.n	80255d0 <osMutexRelease+0x30>
      return osErrorOS;
 80255cc:	23ff      	movs	r3, #255	; 0xff
 80255ce:	e017      	b.n	8025600 <osMutexRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 80255d0:	68bb      	ldr	r3, [r7, #8]
 80255d2:	2b00      	cmp	r3, #0
 80255d4:	d013      	beq.n	80255fe <osMutexRelease+0x5e>
 80255d6:	4b0c      	ldr	r3, [pc, #48]	; (8025608 <osMutexRelease+0x68>)
 80255d8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80255dc:	601a      	str	r2, [r3, #0]
 80255de:	f3bf 8f4f 	dsb	sy
 80255e2:	f3bf 8f6f 	isb	sy
 80255e6:	e00a      	b.n	80255fe <osMutexRelease+0x5e>
  }
  else if (xSemaphoreGive(mutex_id) != pdTRUE) 
 80255e8:	2300      	movs	r3, #0
 80255ea:	2200      	movs	r2, #0
 80255ec:	2100      	movs	r1, #0
 80255ee:	6878      	ldr	r0, [r7, #4]
 80255f0:	f000 fc8e 	bl	8025f10 <xQueueGenericSend>
 80255f4:	4603      	mov	r3, r0
 80255f6:	2b01      	cmp	r3, #1
 80255f8:	d001      	beq.n	80255fe <osMutexRelease+0x5e>
  {
    result = osErrorOS;
 80255fa:	23ff      	movs	r3, #255	; 0xff
 80255fc:	60fb      	str	r3, [r7, #12]
  }
  return result;
 80255fe:	68fb      	ldr	r3, [r7, #12]
}
 8025600:	4618      	mov	r0, r3
 8025602:	3710      	adds	r7, #16
 8025604:	46bd      	mov	sp, r7
 8025606:	bd80      	pop	{r7, pc}
 8025608:	e000ed04 	.word	0xe000ed04

0802560c <osSemaphoreCreate>:
* @param count         number of available resources.
* @retval  semaphore ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreCreate shall be consistent in every CMSIS-RTOS.
*/
osSemaphoreId osSemaphoreCreate (const osSemaphoreDef_t *semaphore_def, int32_t count)
{ 
 802560c:	b580      	push	{r7, lr}
 802560e:	b086      	sub	sp, #24
 8025610:	af02      	add	r7, sp, #8
 8025612:	6078      	str	r0, [r7, #4]
 8025614:	6039      	str	r1, [r7, #0]
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  osSemaphoreId sema;
  
  if (semaphore_def->controlblock != NULL){
 8025616:	687b      	ldr	r3, [r7, #4]
 8025618:	685b      	ldr	r3, [r3, #4]
 802561a:	2b00      	cmp	r3, #0
 802561c:	d016      	beq.n	802564c <osSemaphoreCreate+0x40>
    if (count == 1) {
 802561e:	683b      	ldr	r3, [r7, #0]
 8025620:	2b01      	cmp	r3, #1
 8025622:	d10a      	bne.n	802563a <osSemaphoreCreate+0x2e>
      return xSemaphoreCreateBinaryStatic( semaphore_def->controlblock );
 8025624:	687b      	ldr	r3, [r7, #4]
 8025626:	685b      	ldr	r3, [r3, #4]
 8025628:	2203      	movs	r2, #3
 802562a:	9200      	str	r2, [sp, #0]
 802562c:	2200      	movs	r2, #0
 802562e:	2100      	movs	r1, #0
 8025630:	2001      	movs	r0, #1
 8025632:	f000 fae5 	bl	8025c00 <xQueueGenericCreateStatic>
 8025636:	4603      	mov	r3, r0
 8025638:	e023      	b.n	8025682 <osSemaphoreCreate+0x76>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )
      return xSemaphoreCreateCountingStatic( count, count, semaphore_def->controlblock );
 802563a:	6838      	ldr	r0, [r7, #0]
 802563c:	6839      	ldr	r1, [r7, #0]
 802563e:	687b      	ldr	r3, [r7, #4]
 8025640:	685b      	ldr	r3, [r3, #4]
 8025642:	461a      	mov	r2, r3
 8025644:	f000 fbfa 	bl	8025e3c <xQueueCreateCountingSemaphoreStatic>
 8025648:	4603      	mov	r3, r0
 802564a:	e01a      	b.n	8025682 <osSemaphoreCreate+0x76>
      return NULL;
#endif
    }
  }
  else {
    if (count == 1) {
 802564c:	683b      	ldr	r3, [r7, #0]
 802564e:	2b01      	cmp	r3, #1
 8025650:	d110      	bne.n	8025674 <osSemaphoreCreate+0x68>
      vSemaphoreCreateBinary(sema);
 8025652:	2203      	movs	r2, #3
 8025654:	2100      	movs	r1, #0
 8025656:	2001      	movs	r0, #1
 8025658:	f000 fb4a 	bl	8025cf0 <xQueueGenericCreate>
 802565c:	60f8      	str	r0, [r7, #12]
 802565e:	68fb      	ldr	r3, [r7, #12]
 8025660:	2b00      	cmp	r3, #0
 8025662:	d005      	beq.n	8025670 <osSemaphoreCreate+0x64>
 8025664:	2300      	movs	r3, #0
 8025666:	2200      	movs	r2, #0
 8025668:	2100      	movs	r1, #0
 802566a:	68f8      	ldr	r0, [r7, #12]
 802566c:	f000 fc50 	bl	8025f10 <xQueueGenericSend>
      return sema;
 8025670:	68fb      	ldr	r3, [r7, #12]
 8025672:	e006      	b.n	8025682 <osSemaphoreCreate+0x76>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )	
      return xSemaphoreCreateCounting(count, count);
 8025674:	683b      	ldr	r3, [r7, #0]
 8025676:	683a      	ldr	r2, [r7, #0]
 8025678:	4611      	mov	r1, r2
 802567a:	4618      	mov	r0, r3
 802567c:	f000 fc15 	bl	8025eaa <xQueueCreateCountingSemaphore>
 8025680:	4603      	mov	r3, r0
#else
    return NULL;
#endif
  }
#endif
}
 8025682:	4618      	mov	r0, r3
 8025684:	3710      	adds	r7, #16
 8025686:	46bd      	mov	sp, r7
 8025688:	bd80      	pop	{r7, pc}
	...

0802568c <osSemaphoreWait>:
* @param  millisec      timeout value or 0 in case of no time-out.
* @retval  number of available tokens, or -1 in case of incorrect parameters.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreWait shall be consistent in every CMSIS-RTOS.
*/
int32_t osSemaphoreWait (osSemaphoreId semaphore_id, uint32_t millisec)
{
 802568c:	b580      	push	{r7, lr}
 802568e:	b084      	sub	sp, #16
 8025690:	af00      	add	r7, sp, #0
 8025692:	6078      	str	r0, [r7, #4]
 8025694:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 8025696:	2300      	movs	r3, #0
 8025698:	60bb      	str	r3, [r7, #8]
  
  
  if (semaphore_id == NULL) {
 802569a:	687b      	ldr	r3, [r7, #4]
 802569c:	2b00      	cmp	r3, #0
 802569e:	d101      	bne.n	80256a4 <osSemaphoreWait+0x18>
    return osErrorParameter;
 80256a0:	2380      	movs	r3, #128	; 0x80
 80256a2:	e03a      	b.n	802571a <osSemaphoreWait+0x8e>
  }
  
  ticks = 0;
 80256a4:	2300      	movs	r3, #0
 80256a6:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 80256a8:	683b      	ldr	r3, [r7, #0]
 80256aa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80256ae:	d103      	bne.n	80256b8 <osSemaphoreWait+0x2c>
    ticks = portMAX_DELAY;
 80256b0:	f04f 33ff 	mov.w	r3, #4294967295
 80256b4:	60fb      	str	r3, [r7, #12]
 80256b6:	e009      	b.n	80256cc <osSemaphoreWait+0x40>
  }
  else if (millisec != 0) {
 80256b8:	683b      	ldr	r3, [r7, #0]
 80256ba:	2b00      	cmp	r3, #0
 80256bc:	d006      	beq.n	80256cc <osSemaphoreWait+0x40>
    ticks = millisec / portTICK_PERIOD_MS;
 80256be:	683b      	ldr	r3, [r7, #0]
 80256c0:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 80256c2:	68fb      	ldr	r3, [r7, #12]
 80256c4:	2b00      	cmp	r3, #0
 80256c6:	d101      	bne.n	80256cc <osSemaphoreWait+0x40>
      ticks = 1;
 80256c8:	2301      	movs	r3, #1
 80256ca:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 80256cc:	f7ff fe79 	bl	80253c2 <inHandlerMode>
 80256d0:	4603      	mov	r3, r0
 80256d2:	2b00      	cmp	r3, #0
 80256d4:	d017      	beq.n	8025706 <osSemaphoreWait+0x7a>
    if (xSemaphoreTakeFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 80256d6:	f107 0308 	add.w	r3, r7, #8
 80256da:	461a      	mov	r2, r3
 80256dc:	2100      	movs	r1, #0
 80256de:	6878      	ldr	r0, [r7, #4]
 80256e0:	f001 f828 	bl	8026734 <xQueueReceiveFromISR>
 80256e4:	4603      	mov	r3, r0
 80256e6:	2b01      	cmp	r3, #1
 80256e8:	d001      	beq.n	80256ee <osSemaphoreWait+0x62>
      return osErrorOS;
 80256ea:	23ff      	movs	r3, #255	; 0xff
 80256ec:	e015      	b.n	802571a <osSemaphoreWait+0x8e>
    }
	portEND_SWITCHING_ISR(taskWoken);
 80256ee:	68bb      	ldr	r3, [r7, #8]
 80256f0:	2b00      	cmp	r3, #0
 80256f2:	d011      	beq.n	8025718 <osSemaphoreWait+0x8c>
 80256f4:	4b0b      	ldr	r3, [pc, #44]	; (8025724 <osSemaphoreWait+0x98>)
 80256f6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80256fa:	601a      	str	r2, [r3, #0]
 80256fc:	f3bf 8f4f 	dsb	sy
 8025700:	f3bf 8f6f 	isb	sy
 8025704:	e008      	b.n	8025718 <osSemaphoreWait+0x8c>
  }  
  else if (xSemaphoreTake(semaphore_id, ticks) != pdTRUE) {
 8025706:	68f9      	ldr	r1, [r7, #12]
 8025708:	6878      	ldr	r0, [r7, #4]
 802570a:	f000 ff07 	bl	802651c <xQueueSemaphoreTake>
 802570e:	4603      	mov	r3, r0
 8025710:	2b01      	cmp	r3, #1
 8025712:	d001      	beq.n	8025718 <osSemaphoreWait+0x8c>
    return osErrorOS;
 8025714:	23ff      	movs	r3, #255	; 0xff
 8025716:	e000      	b.n	802571a <osSemaphoreWait+0x8e>
  }
  
  return osOK;
 8025718:	2300      	movs	r3, #0
}
 802571a:	4618      	mov	r0, r3
 802571c:	3710      	adds	r7, #16
 802571e:	46bd      	mov	sp, r7
 8025720:	bd80      	pop	{r7, pc}
 8025722:	bf00      	nop
 8025724:	e000ed04 	.word	0xe000ed04

08025728 <osSemaphoreRelease>:
* @param  semaphore_id  semaphore object referenced with \ref osSemaphore.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osSemaphoreRelease (osSemaphoreId semaphore_id)
{
 8025728:	b580      	push	{r7, lr}
 802572a:	b084      	sub	sp, #16
 802572c:	af00      	add	r7, sp, #0
 802572e:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 8025730:	2300      	movs	r3, #0
 8025732:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 8025734:	2300      	movs	r3, #0
 8025736:	60bb      	str	r3, [r7, #8]
  
  
  if (inHandlerMode()) {
 8025738:	f7ff fe43 	bl	80253c2 <inHandlerMode>
 802573c:	4603      	mov	r3, r0
 802573e:	2b00      	cmp	r3, #0
 8025740:	d016      	beq.n	8025770 <osSemaphoreRelease+0x48>
    if (xSemaphoreGiveFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 8025742:	f107 0308 	add.w	r3, r7, #8
 8025746:	4619      	mov	r1, r3
 8025748:	6878      	ldr	r0, [r7, #4]
 802574a:	f000 fd7a 	bl	8026242 <xQueueGiveFromISR>
 802574e:	4603      	mov	r3, r0
 8025750:	2b01      	cmp	r3, #1
 8025752:	d001      	beq.n	8025758 <osSemaphoreRelease+0x30>
      return osErrorOS;
 8025754:	23ff      	movs	r3, #255	; 0xff
 8025756:	e017      	b.n	8025788 <osSemaphoreRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 8025758:	68bb      	ldr	r3, [r7, #8]
 802575a:	2b00      	cmp	r3, #0
 802575c:	d013      	beq.n	8025786 <osSemaphoreRelease+0x5e>
 802575e:	4b0c      	ldr	r3, [pc, #48]	; (8025790 <osSemaphoreRelease+0x68>)
 8025760:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8025764:	601a      	str	r2, [r3, #0]
 8025766:	f3bf 8f4f 	dsb	sy
 802576a:	f3bf 8f6f 	isb	sy
 802576e:	e00a      	b.n	8025786 <osSemaphoreRelease+0x5e>
  }
  else {
    if (xSemaphoreGive(semaphore_id) != pdTRUE) {
 8025770:	2300      	movs	r3, #0
 8025772:	2200      	movs	r2, #0
 8025774:	2100      	movs	r1, #0
 8025776:	6878      	ldr	r0, [r7, #4]
 8025778:	f000 fbca 	bl	8025f10 <xQueueGenericSend>
 802577c:	4603      	mov	r3, r0
 802577e:	2b01      	cmp	r3, #1
 8025780:	d001      	beq.n	8025786 <osSemaphoreRelease+0x5e>
      result = osErrorOS;
 8025782:	23ff      	movs	r3, #255	; 0xff
 8025784:	60fb      	str	r3, [r7, #12]
    }
  }
  
  return result;
 8025786:	68fb      	ldr	r3, [r7, #12]
}
 8025788:	4618      	mov	r0, r3
 802578a:	3710      	adds	r7, #16
 802578c:	46bd      	mov	sp, r7
 802578e:	bd80      	pop	{r7, pc}
 8025790:	e000ed04 	.word	0xe000ed04

08025794 <osSemaphoreDelete>:
* @param  semaphore_id  semaphore object referenced with \ref osSemaphore.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreDelete shall be consistent in every CMSIS-RTOS.
*/
osStatus osSemaphoreDelete (osSemaphoreId semaphore_id)
{
 8025794:	b580      	push	{r7, lr}
 8025796:	b082      	sub	sp, #8
 8025798:	af00      	add	r7, sp, #0
 802579a:	6078      	str	r0, [r7, #4]
  if (inHandlerMode()) {
 802579c:	f7ff fe11 	bl	80253c2 <inHandlerMode>
 80257a0:	4603      	mov	r3, r0
 80257a2:	2b00      	cmp	r3, #0
 80257a4:	d001      	beq.n	80257aa <osSemaphoreDelete+0x16>
    return osErrorISR;
 80257a6:	2382      	movs	r3, #130	; 0x82
 80257a8:	e003      	b.n	80257b2 <osSemaphoreDelete+0x1e>
  }

  vSemaphoreDelete(semaphore_id);
 80257aa:	6878      	ldr	r0, [r7, #4]
 80257ac:	f001 f87e 	bl	80268ac <vQueueDelete>

  return osOK; 
 80257b0:	2300      	movs	r3, #0
}
 80257b2:	4618      	mov	r0, r3
 80257b4:	3708      	adds	r7, #8
 80257b6:	46bd      	mov	sp, r7
 80257b8:	bd80      	pop	{r7, pc}

080257ba <osMessageCreate>:
* @param  thread_id     thread ID (obtained by \ref osThreadCreate or \ref osThreadGetId) or NULL.
* @retval  message queue ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMessageCreate shall be consistent in every CMSIS-RTOS.
*/
osMessageQId osMessageCreate (const osMessageQDef_t *queue_def, osThreadId thread_id)
{
 80257ba:	b590      	push	{r4, r7, lr}
 80257bc:	b085      	sub	sp, #20
 80257be:	af02      	add	r7, sp, #8
 80257c0:	6078      	str	r0, [r7, #4]
 80257c2:	6039      	str	r1, [r7, #0]
  (void) thread_id;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if ((queue_def->buffer != NULL) && (queue_def->controlblock != NULL)) {
 80257c4:	687b      	ldr	r3, [r7, #4]
 80257c6:	689b      	ldr	r3, [r3, #8]
 80257c8:	2b00      	cmp	r3, #0
 80257ca:	d011      	beq.n	80257f0 <osMessageCreate+0x36>
 80257cc:	687b      	ldr	r3, [r7, #4]
 80257ce:	68db      	ldr	r3, [r3, #12]
 80257d0:	2b00      	cmp	r3, #0
 80257d2:	d00d      	beq.n	80257f0 <osMessageCreate+0x36>
    return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
 80257d4:	687b      	ldr	r3, [r7, #4]
 80257d6:	6818      	ldr	r0, [r3, #0]
 80257d8:	687b      	ldr	r3, [r7, #4]
 80257da:	6859      	ldr	r1, [r3, #4]
 80257dc:	687b      	ldr	r3, [r7, #4]
 80257de:	689a      	ldr	r2, [r3, #8]
 80257e0:	687b      	ldr	r3, [r7, #4]
 80257e2:	68db      	ldr	r3, [r3, #12]
 80257e4:	2400      	movs	r4, #0
 80257e6:	9400      	str	r4, [sp, #0]
 80257e8:	f000 fa0a 	bl	8025c00 <xQueueGenericCreateStatic>
 80257ec:	4603      	mov	r3, r0
 80257ee:	e008      	b.n	8025802 <osMessageCreate+0x48>
  }
  else {
    return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
 80257f0:	687b      	ldr	r3, [r7, #4]
 80257f2:	6818      	ldr	r0, [r3, #0]
 80257f4:	687b      	ldr	r3, [r7, #4]
 80257f6:	685b      	ldr	r3, [r3, #4]
 80257f8:	2200      	movs	r2, #0
 80257fa:	4619      	mov	r1, r3
 80257fc:	f000 fa78 	bl	8025cf0 <xQueueGenericCreate>
 8025800:	4603      	mov	r3, r0
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
#else  
  return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
#endif
}
 8025802:	4618      	mov	r0, r3
 8025804:	370c      	adds	r7, #12
 8025806:	46bd      	mov	sp, r7
 8025808:	bd90      	pop	{r4, r7, pc}
	...

0802580c <osMessagePut>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMessagePut shall be consistent in every CMSIS-RTOS.
*/
osStatus osMessagePut (osMessageQId queue_id, uint32_t info, uint32_t millisec)
{
 802580c:	b580      	push	{r7, lr}
 802580e:	b086      	sub	sp, #24
 8025810:	af00      	add	r7, sp, #0
 8025812:	60f8      	str	r0, [r7, #12]
 8025814:	60b9      	str	r1, [r7, #8]
 8025816:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken = pdFALSE;
 8025818:	2300      	movs	r3, #0
 802581a:	613b      	str	r3, [r7, #16]
  TickType_t ticks;
  
  ticks = millisec / portTICK_PERIOD_MS;
 802581c:	687b      	ldr	r3, [r7, #4]
 802581e:	617b      	str	r3, [r7, #20]
  if (ticks == 0) {
 8025820:	697b      	ldr	r3, [r7, #20]
 8025822:	2b00      	cmp	r3, #0
 8025824:	d101      	bne.n	802582a <osMessagePut+0x1e>
    ticks = 1;
 8025826:	2301      	movs	r3, #1
 8025828:	617b      	str	r3, [r7, #20]
  }
  
  if (inHandlerMode()) {
 802582a:	f7ff fdca 	bl	80253c2 <inHandlerMode>
 802582e:	4603      	mov	r3, r0
 8025830:	2b00      	cmp	r3, #0
 8025832:	d018      	beq.n	8025866 <osMessagePut+0x5a>
    if (xQueueSendFromISR(queue_id, &info, &taskWoken) != pdTRUE) {
 8025834:	f107 0210 	add.w	r2, r7, #16
 8025838:	f107 0108 	add.w	r1, r7, #8
 802583c:	2300      	movs	r3, #0
 802583e:	68f8      	ldr	r0, [r7, #12]
 8025840:	f000 fc64 	bl	802610c <xQueueGenericSendFromISR>
 8025844:	4603      	mov	r3, r0
 8025846:	2b01      	cmp	r3, #1
 8025848:	d001      	beq.n	802584e <osMessagePut+0x42>
      return osErrorOS;
 802584a:	23ff      	movs	r3, #255	; 0xff
 802584c:	e018      	b.n	8025880 <osMessagePut+0x74>
    }
    portEND_SWITCHING_ISR(taskWoken);
 802584e:	693b      	ldr	r3, [r7, #16]
 8025850:	2b00      	cmp	r3, #0
 8025852:	d014      	beq.n	802587e <osMessagePut+0x72>
 8025854:	4b0c      	ldr	r3, [pc, #48]	; (8025888 <osMessagePut+0x7c>)
 8025856:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 802585a:	601a      	str	r2, [r3, #0]
 802585c:	f3bf 8f4f 	dsb	sy
 8025860:	f3bf 8f6f 	isb	sy
 8025864:	e00b      	b.n	802587e <osMessagePut+0x72>
  }
  else {
    if (xQueueSend(queue_id, &info, ticks) != pdTRUE) {
 8025866:	f107 0108 	add.w	r1, r7, #8
 802586a:	2300      	movs	r3, #0
 802586c:	697a      	ldr	r2, [r7, #20]
 802586e:	68f8      	ldr	r0, [r7, #12]
 8025870:	f000 fb4e 	bl	8025f10 <xQueueGenericSend>
 8025874:	4603      	mov	r3, r0
 8025876:	2b01      	cmp	r3, #1
 8025878:	d001      	beq.n	802587e <osMessagePut+0x72>
      return osErrorOS;
 802587a:	23ff      	movs	r3, #255	; 0xff
 802587c:	e000      	b.n	8025880 <osMessagePut+0x74>
    }
  }
  
  return osOK;
 802587e:	2300      	movs	r3, #0
}
 8025880:	4618      	mov	r0, r3
 8025882:	3718      	adds	r7, #24
 8025884:	46bd      	mov	sp, r7
 8025886:	bd80      	pop	{r7, pc}
 8025888:	e000ed04 	.word	0xe000ed04

0802588c <osMessageGet>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval event information that includes status code.
* @note   MUST REMAIN UNCHANGED: \b osMessageGet shall be consistent in every CMSIS-RTOS.
*/
osEvent osMessageGet (osMessageQId queue_id, uint32_t millisec)
{
 802588c:	b590      	push	{r4, r7, lr}
 802588e:	b08b      	sub	sp, #44	; 0x2c
 8025890:	af00      	add	r7, sp, #0
 8025892:	60f8      	str	r0, [r7, #12]
 8025894:	60b9      	str	r1, [r7, #8]
 8025896:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken;
  TickType_t ticks;
  osEvent event;
  
  event.def.message_id = queue_id;
 8025898:	68bb      	ldr	r3, [r7, #8]
 802589a:	61fb      	str	r3, [r7, #28]
  event.value.v = 0;
 802589c:	2300      	movs	r3, #0
 802589e:	61bb      	str	r3, [r7, #24]
  
  if (queue_id == NULL) {
 80258a0:	68bb      	ldr	r3, [r7, #8]
 80258a2:	2b00      	cmp	r3, #0
 80258a4:	d10a      	bne.n	80258bc <osMessageGet+0x30>
    event.status = osErrorParameter;
 80258a6:	2380      	movs	r3, #128	; 0x80
 80258a8:	617b      	str	r3, [r7, #20]
    return event;
 80258aa:	68fb      	ldr	r3, [r7, #12]
 80258ac:	461c      	mov	r4, r3
 80258ae:	f107 0314 	add.w	r3, r7, #20
 80258b2:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80258b6:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80258ba:	e054      	b.n	8025966 <osMessageGet+0xda>
  }
  
  taskWoken = pdFALSE;
 80258bc:	2300      	movs	r3, #0
 80258be:	623b      	str	r3, [r7, #32]
  
  ticks = 0;
 80258c0:	2300      	movs	r3, #0
 80258c2:	627b      	str	r3, [r7, #36]	; 0x24
  if (millisec == osWaitForever) {
 80258c4:	687b      	ldr	r3, [r7, #4]
 80258c6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80258ca:	d103      	bne.n	80258d4 <osMessageGet+0x48>
    ticks = portMAX_DELAY;
 80258cc:	f04f 33ff 	mov.w	r3, #4294967295
 80258d0:	627b      	str	r3, [r7, #36]	; 0x24
 80258d2:	e009      	b.n	80258e8 <osMessageGet+0x5c>
  }
  else if (millisec != 0) {
 80258d4:	687b      	ldr	r3, [r7, #4]
 80258d6:	2b00      	cmp	r3, #0
 80258d8:	d006      	beq.n	80258e8 <osMessageGet+0x5c>
    ticks = millisec / portTICK_PERIOD_MS;
 80258da:	687b      	ldr	r3, [r7, #4]
 80258dc:	627b      	str	r3, [r7, #36]	; 0x24
    if (ticks == 0) {
 80258de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80258e0:	2b00      	cmp	r3, #0
 80258e2:	d101      	bne.n	80258e8 <osMessageGet+0x5c>
      ticks = 1;
 80258e4:	2301      	movs	r3, #1
 80258e6:	627b      	str	r3, [r7, #36]	; 0x24
    }
  }
  
  if (inHandlerMode()) {
 80258e8:	f7ff fd6b 	bl	80253c2 <inHandlerMode>
 80258ec:	4603      	mov	r3, r0
 80258ee:	2b00      	cmp	r3, #0
 80258f0:	d01c      	beq.n	802592c <osMessageGet+0xa0>
    if (xQueueReceiveFromISR(queue_id, &event.value.v, &taskWoken) == pdTRUE) {
 80258f2:	f107 0220 	add.w	r2, r7, #32
 80258f6:	f107 0314 	add.w	r3, r7, #20
 80258fa:	3304      	adds	r3, #4
 80258fc:	4619      	mov	r1, r3
 80258fe:	68b8      	ldr	r0, [r7, #8]
 8025900:	f000 ff18 	bl	8026734 <xQueueReceiveFromISR>
 8025904:	4603      	mov	r3, r0
 8025906:	2b01      	cmp	r3, #1
 8025908:	d102      	bne.n	8025910 <osMessageGet+0x84>
      /* We have mail */
      event.status = osEventMessage;
 802590a:	2310      	movs	r3, #16
 802590c:	617b      	str	r3, [r7, #20]
 802590e:	e001      	b.n	8025914 <osMessageGet+0x88>
    }
    else {
      event.status = osOK;
 8025910:	2300      	movs	r3, #0
 8025912:	617b      	str	r3, [r7, #20]
    }
    portEND_SWITCHING_ISR(taskWoken);
 8025914:	6a3b      	ldr	r3, [r7, #32]
 8025916:	2b00      	cmp	r3, #0
 8025918:	d01d      	beq.n	8025956 <osMessageGet+0xca>
 802591a:	4b15      	ldr	r3, [pc, #84]	; (8025970 <osMessageGet+0xe4>)
 802591c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8025920:	601a      	str	r2, [r3, #0]
 8025922:	f3bf 8f4f 	dsb	sy
 8025926:	f3bf 8f6f 	isb	sy
 802592a:	e014      	b.n	8025956 <osMessageGet+0xca>
  }
  else {
    if (xQueueReceive(queue_id, &event.value.v, ticks) == pdTRUE) {
 802592c:	f107 0314 	add.w	r3, r7, #20
 8025930:	3304      	adds	r3, #4
 8025932:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8025934:	4619      	mov	r1, r3
 8025936:	68b8      	ldr	r0, [r7, #8]
 8025938:	f000 fd10 	bl	802635c <xQueueReceive>
 802593c:	4603      	mov	r3, r0
 802593e:	2b01      	cmp	r3, #1
 8025940:	d102      	bne.n	8025948 <osMessageGet+0xbc>
      /* We have mail */
      event.status = osEventMessage;
 8025942:	2310      	movs	r3, #16
 8025944:	617b      	str	r3, [r7, #20]
 8025946:	e006      	b.n	8025956 <osMessageGet+0xca>
    }
    else {
      event.status = (ticks == 0) ? osOK : osEventTimeout;
 8025948:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802594a:	2b00      	cmp	r3, #0
 802594c:	d101      	bne.n	8025952 <osMessageGet+0xc6>
 802594e:	2300      	movs	r3, #0
 8025950:	e000      	b.n	8025954 <osMessageGet+0xc8>
 8025952:	2340      	movs	r3, #64	; 0x40
 8025954:	617b      	str	r3, [r7, #20]
    }
  }
  
  return event;
 8025956:	68fb      	ldr	r3, [r7, #12]
 8025958:	461c      	mov	r4, r3
 802595a:	f107 0314 	add.w	r3, r7, #20
 802595e:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8025962:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 8025966:	68f8      	ldr	r0, [r7, #12]
 8025968:	372c      	adds	r7, #44	; 0x2c
 802596a:	46bd      	mov	sp, r7
 802596c:	bd90      	pop	{r4, r7, pc}
 802596e:	bf00      	nop
 8025970:	e000ed04 	.word	0xe000ed04

08025974 <osMessageWaiting>:
* @brief  Get the number of messaged stored in a queue.
* @param  queue_id  message queue ID obtained with \ref osMessageCreate.
* @retval number of messages stored in a queue.
*/
uint32_t osMessageWaiting(osMessageQId queue_id)
{
 8025974:	b580      	push	{r7, lr}
 8025976:	b082      	sub	sp, #8
 8025978:	af00      	add	r7, sp, #0
 802597a:	6078      	str	r0, [r7, #4]
  if (inHandlerMode()) {
 802597c:	f7ff fd21 	bl	80253c2 <inHandlerMode>
 8025980:	4603      	mov	r3, r0
 8025982:	2b00      	cmp	r3, #0
 8025984:	d004      	beq.n	8025990 <osMessageWaiting+0x1c>
    return uxQueueMessagesWaitingFromISR(queue_id);
 8025986:	6878      	ldr	r0, [r7, #4]
 8025988:	f000 ff72 	bl	8026870 <uxQueueMessagesWaitingFromISR>
 802598c:	4603      	mov	r3, r0
 802598e:	e003      	b.n	8025998 <osMessageWaiting+0x24>
  }
  else
  {
    return uxQueueMessagesWaiting(queue_id);
 8025990:	6878      	ldr	r0, [r7, #4]
 8025992:	f000 ff4f 	bl	8026834 <uxQueueMessagesWaiting>
 8025996:	4603      	mov	r3, r0
  }
}
 8025998:	4618      	mov	r0, r3
 802599a:	3708      	adds	r7, #8
 802599c:	46bd      	mov	sp, r7
 802599e:	bd80      	pop	{r7, pc}

080259a0 <osMessageDelete>:
* @brief Delete a Message Queue
* @param  queue_id  message queue ID obtained with \ref osMessageCreate.
* @retval  status code that indicates the execution status of the function.
*/
osStatus osMessageDelete (osMessageQId queue_id)
{
 80259a0:	b580      	push	{r7, lr}
 80259a2:	b082      	sub	sp, #8
 80259a4:	af00      	add	r7, sp, #0
 80259a6:	6078      	str	r0, [r7, #4]
  if (inHandlerMode()) {
 80259a8:	f7ff fd0b 	bl	80253c2 <inHandlerMode>
 80259ac:	4603      	mov	r3, r0
 80259ae:	2b00      	cmp	r3, #0
 80259b0:	d001      	beq.n	80259b6 <osMessageDelete+0x16>
    return osErrorISR;
 80259b2:	2382      	movs	r3, #130	; 0x82
 80259b4:	e003      	b.n	80259be <osMessageDelete+0x1e>
  }

  vQueueDelete(queue_id);
 80259b6:	6878      	ldr	r0, [r7, #4]
 80259b8:	f000 ff78 	bl	80268ac <vQueueDelete>

  return osOK; 
 80259bc:	2300      	movs	r3, #0
}
 80259be:	4618      	mov	r0, r3
 80259c0:	3708      	adds	r7, #8
 80259c2:	46bd      	mov	sp, r7
 80259c4:	bd80      	pop	{r7, pc}

080259c6 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80259c6:	b480      	push	{r7}
 80259c8:	b083      	sub	sp, #12
 80259ca:	af00      	add	r7, sp, #0
 80259cc:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80259ce:	687b      	ldr	r3, [r7, #4]
 80259d0:	f103 0208 	add.w	r2, r3, #8
 80259d4:	687b      	ldr	r3, [r7, #4]
 80259d6:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80259d8:	687b      	ldr	r3, [r7, #4]
 80259da:	f04f 32ff 	mov.w	r2, #4294967295
 80259de:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80259e0:	687b      	ldr	r3, [r7, #4]
 80259e2:	f103 0208 	add.w	r2, r3, #8
 80259e6:	687b      	ldr	r3, [r7, #4]
 80259e8:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80259ea:	687b      	ldr	r3, [r7, #4]
 80259ec:	f103 0208 	add.w	r2, r3, #8
 80259f0:	687b      	ldr	r3, [r7, #4]
 80259f2:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80259f4:	687b      	ldr	r3, [r7, #4]
 80259f6:	2200      	movs	r2, #0
 80259f8:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80259fa:	bf00      	nop
 80259fc:	370c      	adds	r7, #12
 80259fe:	46bd      	mov	sp, r7
 8025a00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8025a04:	4770      	bx	lr

08025a06 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8025a06:	b480      	push	{r7}
 8025a08:	b083      	sub	sp, #12
 8025a0a:	af00      	add	r7, sp, #0
 8025a0c:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8025a0e:	687b      	ldr	r3, [r7, #4]
 8025a10:	2200      	movs	r2, #0
 8025a12:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8025a14:	bf00      	nop
 8025a16:	370c      	adds	r7, #12
 8025a18:	46bd      	mov	sp, r7
 8025a1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8025a1e:	4770      	bx	lr

08025a20 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8025a20:	b480      	push	{r7}
 8025a22:	b085      	sub	sp, #20
 8025a24:	af00      	add	r7, sp, #0
 8025a26:	6078      	str	r0, [r7, #4]
 8025a28:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8025a2a:	687b      	ldr	r3, [r7, #4]
 8025a2c:	685b      	ldr	r3, [r3, #4]
 8025a2e:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8025a30:	683b      	ldr	r3, [r7, #0]
 8025a32:	68fa      	ldr	r2, [r7, #12]
 8025a34:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8025a36:	68fb      	ldr	r3, [r7, #12]
 8025a38:	689a      	ldr	r2, [r3, #8]
 8025a3a:	683b      	ldr	r3, [r7, #0]
 8025a3c:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8025a3e:	68fb      	ldr	r3, [r7, #12]
 8025a40:	689b      	ldr	r3, [r3, #8]
 8025a42:	683a      	ldr	r2, [r7, #0]
 8025a44:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8025a46:	68fb      	ldr	r3, [r7, #12]
 8025a48:	683a      	ldr	r2, [r7, #0]
 8025a4a:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8025a4c:	683b      	ldr	r3, [r7, #0]
 8025a4e:	687a      	ldr	r2, [r7, #4]
 8025a50:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8025a52:	687b      	ldr	r3, [r7, #4]
 8025a54:	681b      	ldr	r3, [r3, #0]
 8025a56:	1c5a      	adds	r2, r3, #1
 8025a58:	687b      	ldr	r3, [r7, #4]
 8025a5a:	601a      	str	r2, [r3, #0]
}
 8025a5c:	bf00      	nop
 8025a5e:	3714      	adds	r7, #20
 8025a60:	46bd      	mov	sp, r7
 8025a62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8025a66:	4770      	bx	lr

08025a68 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8025a68:	b480      	push	{r7}
 8025a6a:	b085      	sub	sp, #20
 8025a6c:	af00      	add	r7, sp, #0
 8025a6e:	6078      	str	r0, [r7, #4]
 8025a70:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8025a72:	683b      	ldr	r3, [r7, #0]
 8025a74:	681b      	ldr	r3, [r3, #0]
 8025a76:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8025a78:	68bb      	ldr	r3, [r7, #8]
 8025a7a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8025a7e:	d103      	bne.n	8025a88 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8025a80:	687b      	ldr	r3, [r7, #4]
 8025a82:	691b      	ldr	r3, [r3, #16]
 8025a84:	60fb      	str	r3, [r7, #12]
 8025a86:	e00c      	b.n	8025aa2 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8025a88:	687b      	ldr	r3, [r7, #4]
 8025a8a:	3308      	adds	r3, #8
 8025a8c:	60fb      	str	r3, [r7, #12]
 8025a8e:	e002      	b.n	8025a96 <vListInsert+0x2e>
 8025a90:	68fb      	ldr	r3, [r7, #12]
 8025a92:	685b      	ldr	r3, [r3, #4]
 8025a94:	60fb      	str	r3, [r7, #12]
 8025a96:	68fb      	ldr	r3, [r7, #12]
 8025a98:	685b      	ldr	r3, [r3, #4]
 8025a9a:	681b      	ldr	r3, [r3, #0]
 8025a9c:	68ba      	ldr	r2, [r7, #8]
 8025a9e:	429a      	cmp	r2, r3
 8025aa0:	d2f6      	bcs.n	8025a90 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8025aa2:	68fb      	ldr	r3, [r7, #12]
 8025aa4:	685a      	ldr	r2, [r3, #4]
 8025aa6:	683b      	ldr	r3, [r7, #0]
 8025aa8:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8025aaa:	683b      	ldr	r3, [r7, #0]
 8025aac:	685b      	ldr	r3, [r3, #4]
 8025aae:	683a      	ldr	r2, [r7, #0]
 8025ab0:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8025ab2:	683b      	ldr	r3, [r7, #0]
 8025ab4:	68fa      	ldr	r2, [r7, #12]
 8025ab6:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8025ab8:	68fb      	ldr	r3, [r7, #12]
 8025aba:	683a      	ldr	r2, [r7, #0]
 8025abc:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8025abe:	683b      	ldr	r3, [r7, #0]
 8025ac0:	687a      	ldr	r2, [r7, #4]
 8025ac2:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8025ac4:	687b      	ldr	r3, [r7, #4]
 8025ac6:	681b      	ldr	r3, [r3, #0]
 8025ac8:	1c5a      	adds	r2, r3, #1
 8025aca:	687b      	ldr	r3, [r7, #4]
 8025acc:	601a      	str	r2, [r3, #0]
}
 8025ace:	bf00      	nop
 8025ad0:	3714      	adds	r7, #20
 8025ad2:	46bd      	mov	sp, r7
 8025ad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8025ad8:	4770      	bx	lr

08025ada <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8025ada:	b480      	push	{r7}
 8025adc:	b085      	sub	sp, #20
 8025ade:	af00      	add	r7, sp, #0
 8025ae0:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8025ae2:	687b      	ldr	r3, [r7, #4]
 8025ae4:	691b      	ldr	r3, [r3, #16]
 8025ae6:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8025ae8:	687b      	ldr	r3, [r7, #4]
 8025aea:	685b      	ldr	r3, [r3, #4]
 8025aec:	687a      	ldr	r2, [r7, #4]
 8025aee:	6892      	ldr	r2, [r2, #8]
 8025af0:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8025af2:	687b      	ldr	r3, [r7, #4]
 8025af4:	689b      	ldr	r3, [r3, #8]
 8025af6:	687a      	ldr	r2, [r7, #4]
 8025af8:	6852      	ldr	r2, [r2, #4]
 8025afa:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8025afc:	68fb      	ldr	r3, [r7, #12]
 8025afe:	685b      	ldr	r3, [r3, #4]
 8025b00:	687a      	ldr	r2, [r7, #4]
 8025b02:	429a      	cmp	r2, r3
 8025b04:	d103      	bne.n	8025b0e <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8025b06:	687b      	ldr	r3, [r7, #4]
 8025b08:	689a      	ldr	r2, [r3, #8]
 8025b0a:	68fb      	ldr	r3, [r7, #12]
 8025b0c:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8025b0e:	687b      	ldr	r3, [r7, #4]
 8025b10:	2200      	movs	r2, #0
 8025b12:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8025b14:	68fb      	ldr	r3, [r7, #12]
 8025b16:	681b      	ldr	r3, [r3, #0]
 8025b18:	1e5a      	subs	r2, r3, #1
 8025b1a:	68fb      	ldr	r3, [r7, #12]
 8025b1c:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8025b1e:	68fb      	ldr	r3, [r7, #12]
 8025b20:	681b      	ldr	r3, [r3, #0]
}
 8025b22:	4618      	mov	r0, r3
 8025b24:	3714      	adds	r7, #20
 8025b26:	46bd      	mov	sp, r7
 8025b28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8025b2c:	4770      	bx	lr
	...

08025b30 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8025b30:	b580      	push	{r7, lr}
 8025b32:	b084      	sub	sp, #16
 8025b34:	af00      	add	r7, sp, #0
 8025b36:	6078      	str	r0, [r7, #4]
 8025b38:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8025b3a:	687b      	ldr	r3, [r7, #4]
 8025b3c:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8025b3e:	68fb      	ldr	r3, [r7, #12]
 8025b40:	2b00      	cmp	r3, #0
 8025b42:	d10a      	bne.n	8025b5a <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8025b44:	f04f 0350 	mov.w	r3, #80	; 0x50
 8025b48:	f383 8811 	msr	BASEPRI, r3
 8025b4c:	f3bf 8f6f 	isb	sy
 8025b50:	f3bf 8f4f 	dsb	sy
 8025b54:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8025b56:	bf00      	nop
 8025b58:	e7fe      	b.n	8025b58 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8025b5a:	f002 f97b 	bl	8027e54 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8025b5e:	68fb      	ldr	r3, [r7, #12]
 8025b60:	681a      	ldr	r2, [r3, #0]
 8025b62:	68fb      	ldr	r3, [r7, #12]
 8025b64:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8025b66:	68f9      	ldr	r1, [r7, #12]
 8025b68:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8025b6a:	fb01 f303 	mul.w	r3, r1, r3
 8025b6e:	441a      	add	r2, r3
 8025b70:	68fb      	ldr	r3, [r7, #12]
 8025b72:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8025b74:	68fb      	ldr	r3, [r7, #12]
 8025b76:	2200      	movs	r2, #0
 8025b78:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8025b7a:	68fb      	ldr	r3, [r7, #12]
 8025b7c:	681a      	ldr	r2, [r3, #0]
 8025b7e:	68fb      	ldr	r3, [r7, #12]
 8025b80:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8025b82:	68fb      	ldr	r3, [r7, #12]
 8025b84:	681a      	ldr	r2, [r3, #0]
 8025b86:	68fb      	ldr	r3, [r7, #12]
 8025b88:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8025b8a:	3b01      	subs	r3, #1
 8025b8c:	68f9      	ldr	r1, [r7, #12]
 8025b8e:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8025b90:	fb01 f303 	mul.w	r3, r1, r3
 8025b94:	441a      	add	r2, r3
 8025b96:	68fb      	ldr	r3, [r7, #12]
 8025b98:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8025b9a:	68fb      	ldr	r3, [r7, #12]
 8025b9c:	22ff      	movs	r2, #255	; 0xff
 8025b9e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8025ba2:	68fb      	ldr	r3, [r7, #12]
 8025ba4:	22ff      	movs	r2, #255	; 0xff
 8025ba6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8025baa:	683b      	ldr	r3, [r7, #0]
 8025bac:	2b00      	cmp	r3, #0
 8025bae:	d114      	bne.n	8025bda <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8025bb0:	68fb      	ldr	r3, [r7, #12]
 8025bb2:	691b      	ldr	r3, [r3, #16]
 8025bb4:	2b00      	cmp	r3, #0
 8025bb6:	d01a      	beq.n	8025bee <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8025bb8:	68fb      	ldr	r3, [r7, #12]
 8025bba:	3310      	adds	r3, #16
 8025bbc:	4618      	mov	r0, r3
 8025bbe:	f001 fc3d 	bl	802743c <xTaskRemoveFromEventList>
 8025bc2:	4603      	mov	r3, r0
 8025bc4:	2b00      	cmp	r3, #0
 8025bc6:	d012      	beq.n	8025bee <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8025bc8:	4b0c      	ldr	r3, [pc, #48]	; (8025bfc <xQueueGenericReset+0xcc>)
 8025bca:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8025bce:	601a      	str	r2, [r3, #0]
 8025bd0:	f3bf 8f4f 	dsb	sy
 8025bd4:	f3bf 8f6f 	isb	sy
 8025bd8:	e009      	b.n	8025bee <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8025bda:	68fb      	ldr	r3, [r7, #12]
 8025bdc:	3310      	adds	r3, #16
 8025bde:	4618      	mov	r0, r3
 8025be0:	f7ff fef1 	bl	80259c6 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8025be4:	68fb      	ldr	r3, [r7, #12]
 8025be6:	3324      	adds	r3, #36	; 0x24
 8025be8:	4618      	mov	r0, r3
 8025bea:	f7ff feec 	bl	80259c6 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8025bee:	f002 f961 	bl	8027eb4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8025bf2:	2301      	movs	r3, #1
}
 8025bf4:	4618      	mov	r0, r3
 8025bf6:	3710      	adds	r7, #16
 8025bf8:	46bd      	mov	sp, r7
 8025bfa:	bd80      	pop	{r7, pc}
 8025bfc:	e000ed04 	.word	0xe000ed04

08025c00 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8025c00:	b580      	push	{r7, lr}
 8025c02:	b08e      	sub	sp, #56	; 0x38
 8025c04:	af02      	add	r7, sp, #8
 8025c06:	60f8      	str	r0, [r7, #12]
 8025c08:	60b9      	str	r1, [r7, #8]
 8025c0a:	607a      	str	r2, [r7, #4]
 8025c0c:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8025c0e:	68fb      	ldr	r3, [r7, #12]
 8025c10:	2b00      	cmp	r3, #0
 8025c12:	d10a      	bne.n	8025c2a <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8025c14:	f04f 0350 	mov.w	r3, #80	; 0x50
 8025c18:	f383 8811 	msr	BASEPRI, r3
 8025c1c:	f3bf 8f6f 	isb	sy
 8025c20:	f3bf 8f4f 	dsb	sy
 8025c24:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8025c26:	bf00      	nop
 8025c28:	e7fe      	b.n	8025c28 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8025c2a:	683b      	ldr	r3, [r7, #0]
 8025c2c:	2b00      	cmp	r3, #0
 8025c2e:	d10a      	bne.n	8025c46 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8025c30:	f04f 0350 	mov.w	r3, #80	; 0x50
 8025c34:	f383 8811 	msr	BASEPRI, r3
 8025c38:	f3bf 8f6f 	isb	sy
 8025c3c:	f3bf 8f4f 	dsb	sy
 8025c40:	627b      	str	r3, [r7, #36]	; 0x24
}
 8025c42:	bf00      	nop
 8025c44:	e7fe      	b.n	8025c44 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8025c46:	687b      	ldr	r3, [r7, #4]
 8025c48:	2b00      	cmp	r3, #0
 8025c4a:	d002      	beq.n	8025c52 <xQueueGenericCreateStatic+0x52>
 8025c4c:	68bb      	ldr	r3, [r7, #8]
 8025c4e:	2b00      	cmp	r3, #0
 8025c50:	d001      	beq.n	8025c56 <xQueueGenericCreateStatic+0x56>
 8025c52:	2301      	movs	r3, #1
 8025c54:	e000      	b.n	8025c58 <xQueueGenericCreateStatic+0x58>
 8025c56:	2300      	movs	r3, #0
 8025c58:	2b00      	cmp	r3, #0
 8025c5a:	d10a      	bne.n	8025c72 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8025c5c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8025c60:	f383 8811 	msr	BASEPRI, r3
 8025c64:	f3bf 8f6f 	isb	sy
 8025c68:	f3bf 8f4f 	dsb	sy
 8025c6c:	623b      	str	r3, [r7, #32]
}
 8025c6e:	bf00      	nop
 8025c70:	e7fe      	b.n	8025c70 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8025c72:	687b      	ldr	r3, [r7, #4]
 8025c74:	2b00      	cmp	r3, #0
 8025c76:	d102      	bne.n	8025c7e <xQueueGenericCreateStatic+0x7e>
 8025c78:	68bb      	ldr	r3, [r7, #8]
 8025c7a:	2b00      	cmp	r3, #0
 8025c7c:	d101      	bne.n	8025c82 <xQueueGenericCreateStatic+0x82>
 8025c7e:	2301      	movs	r3, #1
 8025c80:	e000      	b.n	8025c84 <xQueueGenericCreateStatic+0x84>
 8025c82:	2300      	movs	r3, #0
 8025c84:	2b00      	cmp	r3, #0
 8025c86:	d10a      	bne.n	8025c9e <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8025c88:	f04f 0350 	mov.w	r3, #80	; 0x50
 8025c8c:	f383 8811 	msr	BASEPRI, r3
 8025c90:	f3bf 8f6f 	isb	sy
 8025c94:	f3bf 8f4f 	dsb	sy
 8025c98:	61fb      	str	r3, [r7, #28]
}
 8025c9a:	bf00      	nop
 8025c9c:	e7fe      	b.n	8025c9c <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8025c9e:	2348      	movs	r3, #72	; 0x48
 8025ca0:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8025ca2:	697b      	ldr	r3, [r7, #20]
 8025ca4:	2b48      	cmp	r3, #72	; 0x48
 8025ca6:	d00a      	beq.n	8025cbe <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8025ca8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8025cac:	f383 8811 	msr	BASEPRI, r3
 8025cb0:	f3bf 8f6f 	isb	sy
 8025cb4:	f3bf 8f4f 	dsb	sy
 8025cb8:	61bb      	str	r3, [r7, #24]
}
 8025cba:	bf00      	nop
 8025cbc:	e7fe      	b.n	8025cbc <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8025cbe:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8025cc0:	683b      	ldr	r3, [r7, #0]
 8025cc2:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8025cc4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8025cc6:	2b00      	cmp	r3, #0
 8025cc8:	d00d      	beq.n	8025ce6 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8025cca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8025ccc:	2201      	movs	r2, #1
 8025cce:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8025cd2:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8025cd6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8025cd8:	9300      	str	r3, [sp, #0]
 8025cda:	4613      	mov	r3, r2
 8025cdc:	687a      	ldr	r2, [r7, #4]
 8025cde:	68b9      	ldr	r1, [r7, #8]
 8025ce0:	68f8      	ldr	r0, [r7, #12]
 8025ce2:	f000 f83f 	bl	8025d64 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8025ce6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8025ce8:	4618      	mov	r0, r3
 8025cea:	3730      	adds	r7, #48	; 0x30
 8025cec:	46bd      	mov	sp, r7
 8025cee:	bd80      	pop	{r7, pc}

08025cf0 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8025cf0:	b580      	push	{r7, lr}
 8025cf2:	b08a      	sub	sp, #40	; 0x28
 8025cf4:	af02      	add	r7, sp, #8
 8025cf6:	60f8      	str	r0, [r7, #12]
 8025cf8:	60b9      	str	r1, [r7, #8]
 8025cfa:	4613      	mov	r3, r2
 8025cfc:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8025cfe:	68fb      	ldr	r3, [r7, #12]
 8025d00:	2b00      	cmp	r3, #0
 8025d02:	d10a      	bne.n	8025d1a <xQueueGenericCreate+0x2a>
	__asm volatile
 8025d04:	f04f 0350 	mov.w	r3, #80	; 0x50
 8025d08:	f383 8811 	msr	BASEPRI, r3
 8025d0c:	f3bf 8f6f 	isb	sy
 8025d10:	f3bf 8f4f 	dsb	sy
 8025d14:	613b      	str	r3, [r7, #16]
}
 8025d16:	bf00      	nop
 8025d18:	e7fe      	b.n	8025d18 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8025d1a:	68fb      	ldr	r3, [r7, #12]
 8025d1c:	68ba      	ldr	r2, [r7, #8]
 8025d1e:	fb02 f303 	mul.w	r3, r2, r3
 8025d22:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8025d24:	69fb      	ldr	r3, [r7, #28]
 8025d26:	3348      	adds	r3, #72	; 0x48
 8025d28:	4618      	mov	r0, r3
 8025d2a:	f002 f9b5 	bl	8028098 <pvPortMalloc>
 8025d2e:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8025d30:	69bb      	ldr	r3, [r7, #24]
 8025d32:	2b00      	cmp	r3, #0
 8025d34:	d011      	beq.n	8025d5a <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8025d36:	69bb      	ldr	r3, [r7, #24]
 8025d38:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8025d3a:	697b      	ldr	r3, [r7, #20]
 8025d3c:	3348      	adds	r3, #72	; 0x48
 8025d3e:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8025d40:	69bb      	ldr	r3, [r7, #24]
 8025d42:	2200      	movs	r2, #0
 8025d44:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8025d48:	79fa      	ldrb	r2, [r7, #7]
 8025d4a:	69bb      	ldr	r3, [r7, #24]
 8025d4c:	9300      	str	r3, [sp, #0]
 8025d4e:	4613      	mov	r3, r2
 8025d50:	697a      	ldr	r2, [r7, #20]
 8025d52:	68b9      	ldr	r1, [r7, #8]
 8025d54:	68f8      	ldr	r0, [r7, #12]
 8025d56:	f000 f805 	bl	8025d64 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8025d5a:	69bb      	ldr	r3, [r7, #24]
	}
 8025d5c:	4618      	mov	r0, r3
 8025d5e:	3720      	adds	r7, #32
 8025d60:	46bd      	mov	sp, r7
 8025d62:	bd80      	pop	{r7, pc}

08025d64 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8025d64:	b580      	push	{r7, lr}
 8025d66:	b084      	sub	sp, #16
 8025d68:	af00      	add	r7, sp, #0
 8025d6a:	60f8      	str	r0, [r7, #12]
 8025d6c:	60b9      	str	r1, [r7, #8]
 8025d6e:	607a      	str	r2, [r7, #4]
 8025d70:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8025d72:	68bb      	ldr	r3, [r7, #8]
 8025d74:	2b00      	cmp	r3, #0
 8025d76:	d103      	bne.n	8025d80 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8025d78:	69bb      	ldr	r3, [r7, #24]
 8025d7a:	69ba      	ldr	r2, [r7, #24]
 8025d7c:	601a      	str	r2, [r3, #0]
 8025d7e:	e002      	b.n	8025d86 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8025d80:	69bb      	ldr	r3, [r7, #24]
 8025d82:	687a      	ldr	r2, [r7, #4]
 8025d84:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8025d86:	69bb      	ldr	r3, [r7, #24]
 8025d88:	68fa      	ldr	r2, [r7, #12]
 8025d8a:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8025d8c:	69bb      	ldr	r3, [r7, #24]
 8025d8e:	68ba      	ldr	r2, [r7, #8]
 8025d90:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8025d92:	2101      	movs	r1, #1
 8025d94:	69b8      	ldr	r0, [r7, #24]
 8025d96:	f7ff fecb 	bl	8025b30 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8025d9a:	bf00      	nop
 8025d9c:	3710      	adds	r7, #16
 8025d9e:	46bd      	mov	sp, r7
 8025da0:	bd80      	pop	{r7, pc}

08025da2 <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 8025da2:	b580      	push	{r7, lr}
 8025da4:	b082      	sub	sp, #8
 8025da6:	af00      	add	r7, sp, #0
 8025da8:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 8025daa:	687b      	ldr	r3, [r7, #4]
 8025dac:	2b00      	cmp	r3, #0
 8025dae:	d00e      	beq.n	8025dce <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 8025db0:	687b      	ldr	r3, [r7, #4]
 8025db2:	2200      	movs	r2, #0
 8025db4:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 8025db6:	687b      	ldr	r3, [r7, #4]
 8025db8:	2200      	movs	r2, #0
 8025dba:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 8025dbc:	687b      	ldr	r3, [r7, #4]
 8025dbe:	2200      	movs	r2, #0
 8025dc0:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8025dc2:	2300      	movs	r3, #0
 8025dc4:	2200      	movs	r2, #0
 8025dc6:	2100      	movs	r1, #0
 8025dc8:	6878      	ldr	r0, [r7, #4]
 8025dca:	f000 f8a1 	bl	8025f10 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 8025dce:	bf00      	nop
 8025dd0:	3708      	adds	r7, #8
 8025dd2:	46bd      	mov	sp, r7
 8025dd4:	bd80      	pop	{r7, pc}

08025dd6 <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 8025dd6:	b580      	push	{r7, lr}
 8025dd8:	b086      	sub	sp, #24
 8025dda:	af00      	add	r7, sp, #0
 8025ddc:	4603      	mov	r3, r0
 8025dde:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8025de0:	2301      	movs	r3, #1
 8025de2:	617b      	str	r3, [r7, #20]
 8025de4:	2300      	movs	r3, #0
 8025de6:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 8025de8:	79fb      	ldrb	r3, [r7, #7]
 8025dea:	461a      	mov	r2, r3
 8025dec:	6939      	ldr	r1, [r7, #16]
 8025dee:	6978      	ldr	r0, [r7, #20]
 8025df0:	f7ff ff7e 	bl	8025cf0 <xQueueGenericCreate>
 8025df4:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8025df6:	68f8      	ldr	r0, [r7, #12]
 8025df8:	f7ff ffd3 	bl	8025da2 <prvInitialiseMutex>

		return xNewQueue;
 8025dfc:	68fb      	ldr	r3, [r7, #12]
	}
 8025dfe:	4618      	mov	r0, r3
 8025e00:	3718      	adds	r7, #24
 8025e02:	46bd      	mov	sp, r7
 8025e04:	bd80      	pop	{r7, pc}

08025e06 <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 8025e06:	b580      	push	{r7, lr}
 8025e08:	b088      	sub	sp, #32
 8025e0a:	af02      	add	r7, sp, #8
 8025e0c:	4603      	mov	r3, r0
 8025e0e:	6039      	str	r1, [r7, #0]
 8025e10:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8025e12:	2301      	movs	r3, #1
 8025e14:	617b      	str	r3, [r7, #20]
 8025e16:	2300      	movs	r3, #0
 8025e18:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 8025e1a:	79fb      	ldrb	r3, [r7, #7]
 8025e1c:	9300      	str	r3, [sp, #0]
 8025e1e:	683b      	ldr	r3, [r7, #0]
 8025e20:	2200      	movs	r2, #0
 8025e22:	6939      	ldr	r1, [r7, #16]
 8025e24:	6978      	ldr	r0, [r7, #20]
 8025e26:	f7ff feeb 	bl	8025c00 <xQueueGenericCreateStatic>
 8025e2a:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8025e2c:	68f8      	ldr	r0, [r7, #12]
 8025e2e:	f7ff ffb8 	bl	8025da2 <prvInitialiseMutex>

		return xNewQueue;
 8025e32:	68fb      	ldr	r3, [r7, #12]
	}
 8025e34:	4618      	mov	r0, r3
 8025e36:	3718      	adds	r7, #24
 8025e38:	46bd      	mov	sp, r7
 8025e3a:	bd80      	pop	{r7, pc}

08025e3c <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 8025e3c:	b580      	push	{r7, lr}
 8025e3e:	b08a      	sub	sp, #40	; 0x28
 8025e40:	af02      	add	r7, sp, #8
 8025e42:	60f8      	str	r0, [r7, #12]
 8025e44:	60b9      	str	r1, [r7, #8]
 8025e46:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 8025e48:	68fb      	ldr	r3, [r7, #12]
 8025e4a:	2b00      	cmp	r3, #0
 8025e4c:	d10a      	bne.n	8025e64 <xQueueCreateCountingSemaphoreStatic+0x28>
	__asm volatile
 8025e4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8025e52:	f383 8811 	msr	BASEPRI, r3
 8025e56:	f3bf 8f6f 	isb	sy
 8025e5a:	f3bf 8f4f 	dsb	sy
 8025e5e:	61bb      	str	r3, [r7, #24]
}
 8025e60:	bf00      	nop
 8025e62:	e7fe      	b.n	8025e62 <xQueueCreateCountingSemaphoreStatic+0x26>
		configASSERT( uxInitialCount <= uxMaxCount );
 8025e64:	68ba      	ldr	r2, [r7, #8]
 8025e66:	68fb      	ldr	r3, [r7, #12]
 8025e68:	429a      	cmp	r2, r3
 8025e6a:	d90a      	bls.n	8025e82 <xQueueCreateCountingSemaphoreStatic+0x46>
	__asm volatile
 8025e6c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8025e70:	f383 8811 	msr	BASEPRI, r3
 8025e74:	f3bf 8f6f 	isb	sy
 8025e78:	f3bf 8f4f 	dsb	sy
 8025e7c:	617b      	str	r3, [r7, #20]
}
 8025e7e:	bf00      	nop
 8025e80:	e7fe      	b.n	8025e80 <xQueueCreateCountingSemaphoreStatic+0x44>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8025e82:	2302      	movs	r3, #2
 8025e84:	9300      	str	r3, [sp, #0]
 8025e86:	687b      	ldr	r3, [r7, #4]
 8025e88:	2200      	movs	r2, #0
 8025e8a:	2100      	movs	r1, #0
 8025e8c:	68f8      	ldr	r0, [r7, #12]
 8025e8e:	f7ff feb7 	bl	8025c00 <xQueueGenericCreateStatic>
 8025e92:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 8025e94:	69fb      	ldr	r3, [r7, #28]
 8025e96:	2b00      	cmp	r3, #0
 8025e98:	d002      	beq.n	8025ea0 <xQueueCreateCountingSemaphoreStatic+0x64>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8025e9a:	69fb      	ldr	r3, [r7, #28]
 8025e9c:	68ba      	ldr	r2, [r7, #8]
 8025e9e:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 8025ea0:	69fb      	ldr	r3, [r7, #28]
	}
 8025ea2:	4618      	mov	r0, r3
 8025ea4:	3720      	adds	r7, #32
 8025ea6:	46bd      	mov	sp, r7
 8025ea8:	bd80      	pop	{r7, pc}

08025eaa <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 8025eaa:	b580      	push	{r7, lr}
 8025eac:	b086      	sub	sp, #24
 8025eae:	af00      	add	r7, sp, #0
 8025eb0:	6078      	str	r0, [r7, #4]
 8025eb2:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 8025eb4:	687b      	ldr	r3, [r7, #4]
 8025eb6:	2b00      	cmp	r3, #0
 8025eb8:	d10a      	bne.n	8025ed0 <xQueueCreateCountingSemaphore+0x26>
	__asm volatile
 8025eba:	f04f 0350 	mov.w	r3, #80	; 0x50
 8025ebe:	f383 8811 	msr	BASEPRI, r3
 8025ec2:	f3bf 8f6f 	isb	sy
 8025ec6:	f3bf 8f4f 	dsb	sy
 8025eca:	613b      	str	r3, [r7, #16]
}
 8025ecc:	bf00      	nop
 8025ece:	e7fe      	b.n	8025ece <xQueueCreateCountingSemaphore+0x24>
		configASSERT( uxInitialCount <= uxMaxCount );
 8025ed0:	683a      	ldr	r2, [r7, #0]
 8025ed2:	687b      	ldr	r3, [r7, #4]
 8025ed4:	429a      	cmp	r2, r3
 8025ed6:	d90a      	bls.n	8025eee <xQueueCreateCountingSemaphore+0x44>
	__asm volatile
 8025ed8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8025edc:	f383 8811 	msr	BASEPRI, r3
 8025ee0:	f3bf 8f6f 	isb	sy
 8025ee4:	f3bf 8f4f 	dsb	sy
 8025ee8:	60fb      	str	r3, [r7, #12]
}
 8025eea:	bf00      	nop
 8025eec:	e7fe      	b.n	8025eec <xQueueCreateCountingSemaphore+0x42>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8025eee:	2202      	movs	r2, #2
 8025ef0:	2100      	movs	r1, #0
 8025ef2:	6878      	ldr	r0, [r7, #4]
 8025ef4:	f7ff fefc 	bl	8025cf0 <xQueueGenericCreate>
 8025ef8:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 8025efa:	697b      	ldr	r3, [r7, #20]
 8025efc:	2b00      	cmp	r3, #0
 8025efe:	d002      	beq.n	8025f06 <xQueueCreateCountingSemaphore+0x5c>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8025f00:	697b      	ldr	r3, [r7, #20]
 8025f02:	683a      	ldr	r2, [r7, #0]
 8025f04:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 8025f06:	697b      	ldr	r3, [r7, #20]
	}
 8025f08:	4618      	mov	r0, r3
 8025f0a:	3718      	adds	r7, #24
 8025f0c:	46bd      	mov	sp, r7
 8025f0e:	bd80      	pop	{r7, pc}

08025f10 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8025f10:	b580      	push	{r7, lr}
 8025f12:	b08e      	sub	sp, #56	; 0x38
 8025f14:	af00      	add	r7, sp, #0
 8025f16:	60f8      	str	r0, [r7, #12]
 8025f18:	60b9      	str	r1, [r7, #8]
 8025f1a:	607a      	str	r2, [r7, #4]
 8025f1c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8025f1e:	2300      	movs	r3, #0
 8025f20:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8025f22:	68fb      	ldr	r3, [r7, #12]
 8025f24:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8025f26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8025f28:	2b00      	cmp	r3, #0
 8025f2a:	d10a      	bne.n	8025f42 <xQueueGenericSend+0x32>
	__asm volatile
 8025f2c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8025f30:	f383 8811 	msr	BASEPRI, r3
 8025f34:	f3bf 8f6f 	isb	sy
 8025f38:	f3bf 8f4f 	dsb	sy
 8025f3c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8025f3e:	bf00      	nop
 8025f40:	e7fe      	b.n	8025f40 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8025f42:	68bb      	ldr	r3, [r7, #8]
 8025f44:	2b00      	cmp	r3, #0
 8025f46:	d103      	bne.n	8025f50 <xQueueGenericSend+0x40>
 8025f48:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8025f4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8025f4c:	2b00      	cmp	r3, #0
 8025f4e:	d101      	bne.n	8025f54 <xQueueGenericSend+0x44>
 8025f50:	2301      	movs	r3, #1
 8025f52:	e000      	b.n	8025f56 <xQueueGenericSend+0x46>
 8025f54:	2300      	movs	r3, #0
 8025f56:	2b00      	cmp	r3, #0
 8025f58:	d10a      	bne.n	8025f70 <xQueueGenericSend+0x60>
	__asm volatile
 8025f5a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8025f5e:	f383 8811 	msr	BASEPRI, r3
 8025f62:	f3bf 8f6f 	isb	sy
 8025f66:	f3bf 8f4f 	dsb	sy
 8025f6a:	627b      	str	r3, [r7, #36]	; 0x24
}
 8025f6c:	bf00      	nop
 8025f6e:	e7fe      	b.n	8025f6e <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8025f70:	683b      	ldr	r3, [r7, #0]
 8025f72:	2b02      	cmp	r3, #2
 8025f74:	d103      	bne.n	8025f7e <xQueueGenericSend+0x6e>
 8025f76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8025f78:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8025f7a:	2b01      	cmp	r3, #1
 8025f7c:	d101      	bne.n	8025f82 <xQueueGenericSend+0x72>
 8025f7e:	2301      	movs	r3, #1
 8025f80:	e000      	b.n	8025f84 <xQueueGenericSend+0x74>
 8025f82:	2300      	movs	r3, #0
 8025f84:	2b00      	cmp	r3, #0
 8025f86:	d10a      	bne.n	8025f9e <xQueueGenericSend+0x8e>
	__asm volatile
 8025f88:	f04f 0350 	mov.w	r3, #80	; 0x50
 8025f8c:	f383 8811 	msr	BASEPRI, r3
 8025f90:	f3bf 8f6f 	isb	sy
 8025f94:	f3bf 8f4f 	dsb	sy
 8025f98:	623b      	str	r3, [r7, #32]
}
 8025f9a:	bf00      	nop
 8025f9c:	e7fe      	b.n	8025f9c <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8025f9e:	f001 fc0d 	bl	80277bc <xTaskGetSchedulerState>
 8025fa2:	4603      	mov	r3, r0
 8025fa4:	2b00      	cmp	r3, #0
 8025fa6:	d102      	bne.n	8025fae <xQueueGenericSend+0x9e>
 8025fa8:	687b      	ldr	r3, [r7, #4]
 8025faa:	2b00      	cmp	r3, #0
 8025fac:	d101      	bne.n	8025fb2 <xQueueGenericSend+0xa2>
 8025fae:	2301      	movs	r3, #1
 8025fb0:	e000      	b.n	8025fb4 <xQueueGenericSend+0xa4>
 8025fb2:	2300      	movs	r3, #0
 8025fb4:	2b00      	cmp	r3, #0
 8025fb6:	d10a      	bne.n	8025fce <xQueueGenericSend+0xbe>
	__asm volatile
 8025fb8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8025fbc:	f383 8811 	msr	BASEPRI, r3
 8025fc0:	f3bf 8f6f 	isb	sy
 8025fc4:	f3bf 8f4f 	dsb	sy
 8025fc8:	61fb      	str	r3, [r7, #28]
}
 8025fca:	bf00      	nop
 8025fcc:	e7fe      	b.n	8025fcc <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8025fce:	f001 ff41 	bl	8027e54 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8025fd2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8025fd4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8025fd6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8025fd8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8025fda:	429a      	cmp	r2, r3
 8025fdc:	d302      	bcc.n	8025fe4 <xQueueGenericSend+0xd4>
 8025fde:	683b      	ldr	r3, [r7, #0]
 8025fe0:	2b02      	cmp	r3, #2
 8025fe2:	d129      	bne.n	8026038 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8025fe4:	683a      	ldr	r2, [r7, #0]
 8025fe6:	68b9      	ldr	r1, [r7, #8]
 8025fe8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8025fea:	f000 fc9a 	bl	8026922 <prvCopyDataToQueue>
 8025fee:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8025ff0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8025ff2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8025ff4:	2b00      	cmp	r3, #0
 8025ff6:	d010      	beq.n	802601a <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8025ff8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8025ffa:	3324      	adds	r3, #36	; 0x24
 8025ffc:	4618      	mov	r0, r3
 8025ffe:	f001 fa1d 	bl	802743c <xTaskRemoveFromEventList>
 8026002:	4603      	mov	r3, r0
 8026004:	2b00      	cmp	r3, #0
 8026006:	d013      	beq.n	8026030 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8026008:	4b3f      	ldr	r3, [pc, #252]	; (8026108 <xQueueGenericSend+0x1f8>)
 802600a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 802600e:	601a      	str	r2, [r3, #0]
 8026010:	f3bf 8f4f 	dsb	sy
 8026014:	f3bf 8f6f 	isb	sy
 8026018:	e00a      	b.n	8026030 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 802601a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 802601c:	2b00      	cmp	r3, #0
 802601e:	d007      	beq.n	8026030 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8026020:	4b39      	ldr	r3, [pc, #228]	; (8026108 <xQueueGenericSend+0x1f8>)
 8026022:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8026026:	601a      	str	r2, [r3, #0]
 8026028:	f3bf 8f4f 	dsb	sy
 802602c:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8026030:	f001 ff40 	bl	8027eb4 <vPortExitCritical>
				return pdPASS;
 8026034:	2301      	movs	r3, #1
 8026036:	e063      	b.n	8026100 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8026038:	687b      	ldr	r3, [r7, #4]
 802603a:	2b00      	cmp	r3, #0
 802603c:	d103      	bne.n	8026046 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 802603e:	f001 ff39 	bl	8027eb4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8026042:	2300      	movs	r3, #0
 8026044:	e05c      	b.n	8026100 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8026046:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8026048:	2b00      	cmp	r3, #0
 802604a:	d106      	bne.n	802605a <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 802604c:	f107 0314 	add.w	r3, r7, #20
 8026050:	4618      	mov	r0, r3
 8026052:	f001 fa55 	bl	8027500 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8026056:	2301      	movs	r3, #1
 8026058:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 802605a:	f001 ff2b 	bl	8027eb4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 802605e:	f000 ffe3 	bl	8027028 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8026062:	f001 fef7 	bl	8027e54 <vPortEnterCritical>
 8026066:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8026068:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 802606c:	b25b      	sxtb	r3, r3
 802606e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8026072:	d103      	bne.n	802607c <xQueueGenericSend+0x16c>
 8026074:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8026076:	2200      	movs	r2, #0
 8026078:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 802607c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 802607e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8026082:	b25b      	sxtb	r3, r3
 8026084:	f1b3 3fff 	cmp.w	r3, #4294967295
 8026088:	d103      	bne.n	8026092 <xQueueGenericSend+0x182>
 802608a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 802608c:	2200      	movs	r2, #0
 802608e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8026092:	f001 ff0f 	bl	8027eb4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8026096:	1d3a      	adds	r2, r7, #4
 8026098:	f107 0314 	add.w	r3, r7, #20
 802609c:	4611      	mov	r1, r2
 802609e:	4618      	mov	r0, r3
 80260a0:	f001 fa44 	bl	802752c <xTaskCheckForTimeOut>
 80260a4:	4603      	mov	r3, r0
 80260a6:	2b00      	cmp	r3, #0
 80260a8:	d124      	bne.n	80260f4 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80260aa:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80260ac:	f000 fd31 	bl	8026b12 <prvIsQueueFull>
 80260b0:	4603      	mov	r3, r0
 80260b2:	2b00      	cmp	r3, #0
 80260b4:	d018      	beq.n	80260e8 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80260b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80260b8:	3310      	adds	r3, #16
 80260ba:	687a      	ldr	r2, [r7, #4]
 80260bc:	4611      	mov	r1, r2
 80260be:	4618      	mov	r0, r3
 80260c0:	f001 f998 	bl	80273f4 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80260c4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80260c6:	f000 fcbc 	bl	8026a42 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80260ca:	f000 ffbb 	bl	8027044 <xTaskResumeAll>
 80260ce:	4603      	mov	r3, r0
 80260d0:	2b00      	cmp	r3, #0
 80260d2:	f47f af7c 	bne.w	8025fce <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 80260d6:	4b0c      	ldr	r3, [pc, #48]	; (8026108 <xQueueGenericSend+0x1f8>)
 80260d8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80260dc:	601a      	str	r2, [r3, #0]
 80260de:	f3bf 8f4f 	dsb	sy
 80260e2:	f3bf 8f6f 	isb	sy
 80260e6:	e772      	b.n	8025fce <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80260e8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80260ea:	f000 fcaa 	bl	8026a42 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80260ee:	f000 ffa9 	bl	8027044 <xTaskResumeAll>
 80260f2:	e76c      	b.n	8025fce <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80260f4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80260f6:	f000 fca4 	bl	8026a42 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80260fa:	f000 ffa3 	bl	8027044 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80260fe:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8026100:	4618      	mov	r0, r3
 8026102:	3738      	adds	r7, #56	; 0x38
 8026104:	46bd      	mov	sp, r7
 8026106:	bd80      	pop	{r7, pc}
 8026108:	e000ed04 	.word	0xe000ed04

0802610c <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 802610c:	b580      	push	{r7, lr}
 802610e:	b090      	sub	sp, #64	; 0x40
 8026110:	af00      	add	r7, sp, #0
 8026112:	60f8      	str	r0, [r7, #12]
 8026114:	60b9      	str	r1, [r7, #8]
 8026116:	607a      	str	r2, [r7, #4]
 8026118:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 802611a:	68fb      	ldr	r3, [r7, #12]
 802611c:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 802611e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8026120:	2b00      	cmp	r3, #0
 8026122:	d10a      	bne.n	802613a <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8026124:	f04f 0350 	mov.w	r3, #80	; 0x50
 8026128:	f383 8811 	msr	BASEPRI, r3
 802612c:	f3bf 8f6f 	isb	sy
 8026130:	f3bf 8f4f 	dsb	sy
 8026134:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8026136:	bf00      	nop
 8026138:	e7fe      	b.n	8026138 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 802613a:	68bb      	ldr	r3, [r7, #8]
 802613c:	2b00      	cmp	r3, #0
 802613e:	d103      	bne.n	8026148 <xQueueGenericSendFromISR+0x3c>
 8026140:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8026142:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8026144:	2b00      	cmp	r3, #0
 8026146:	d101      	bne.n	802614c <xQueueGenericSendFromISR+0x40>
 8026148:	2301      	movs	r3, #1
 802614a:	e000      	b.n	802614e <xQueueGenericSendFromISR+0x42>
 802614c:	2300      	movs	r3, #0
 802614e:	2b00      	cmp	r3, #0
 8026150:	d10a      	bne.n	8026168 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8026152:	f04f 0350 	mov.w	r3, #80	; 0x50
 8026156:	f383 8811 	msr	BASEPRI, r3
 802615a:	f3bf 8f6f 	isb	sy
 802615e:	f3bf 8f4f 	dsb	sy
 8026162:	627b      	str	r3, [r7, #36]	; 0x24
}
 8026164:	bf00      	nop
 8026166:	e7fe      	b.n	8026166 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8026168:	683b      	ldr	r3, [r7, #0]
 802616a:	2b02      	cmp	r3, #2
 802616c:	d103      	bne.n	8026176 <xQueueGenericSendFromISR+0x6a>
 802616e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8026170:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8026172:	2b01      	cmp	r3, #1
 8026174:	d101      	bne.n	802617a <xQueueGenericSendFromISR+0x6e>
 8026176:	2301      	movs	r3, #1
 8026178:	e000      	b.n	802617c <xQueueGenericSendFromISR+0x70>
 802617a:	2300      	movs	r3, #0
 802617c:	2b00      	cmp	r3, #0
 802617e:	d10a      	bne.n	8026196 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8026180:	f04f 0350 	mov.w	r3, #80	; 0x50
 8026184:	f383 8811 	msr	BASEPRI, r3
 8026188:	f3bf 8f6f 	isb	sy
 802618c:	f3bf 8f4f 	dsb	sy
 8026190:	623b      	str	r3, [r7, #32]
}
 8026192:	bf00      	nop
 8026194:	e7fe      	b.n	8026194 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8026196:	f001 ff3f 	bl	8028018 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 802619a:	f3ef 8211 	mrs	r2, BASEPRI
 802619e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80261a2:	f383 8811 	msr	BASEPRI, r3
 80261a6:	f3bf 8f6f 	isb	sy
 80261aa:	f3bf 8f4f 	dsb	sy
 80261ae:	61fa      	str	r2, [r7, #28]
 80261b0:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 80261b2:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80261b4:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80261b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80261b8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80261ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80261bc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80261be:	429a      	cmp	r2, r3
 80261c0:	d302      	bcc.n	80261c8 <xQueueGenericSendFromISR+0xbc>
 80261c2:	683b      	ldr	r3, [r7, #0]
 80261c4:	2b02      	cmp	r3, #2
 80261c6:	d12f      	bne.n	8026228 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80261c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80261ca:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80261ce:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 80261d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80261d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80261d6:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80261d8:	683a      	ldr	r2, [r7, #0]
 80261da:	68b9      	ldr	r1, [r7, #8]
 80261dc:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80261de:	f000 fba0 	bl	8026922 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80261e2:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 80261e6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80261ea:	d112      	bne.n	8026212 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80261ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80261ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80261f0:	2b00      	cmp	r3, #0
 80261f2:	d016      	beq.n	8026222 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80261f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80261f6:	3324      	adds	r3, #36	; 0x24
 80261f8:	4618      	mov	r0, r3
 80261fa:	f001 f91f 	bl	802743c <xTaskRemoveFromEventList>
 80261fe:	4603      	mov	r3, r0
 8026200:	2b00      	cmp	r3, #0
 8026202:	d00e      	beq.n	8026222 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8026204:	687b      	ldr	r3, [r7, #4]
 8026206:	2b00      	cmp	r3, #0
 8026208:	d00b      	beq.n	8026222 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 802620a:	687b      	ldr	r3, [r7, #4]
 802620c:	2201      	movs	r2, #1
 802620e:	601a      	str	r2, [r3, #0]
 8026210:	e007      	b.n	8026222 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8026212:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8026216:	3301      	adds	r3, #1
 8026218:	b2db      	uxtb	r3, r3
 802621a:	b25a      	sxtb	r2, r3
 802621c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 802621e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8026222:	2301      	movs	r3, #1
 8026224:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 8026226:	e001      	b.n	802622c <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8026228:	2300      	movs	r3, #0
 802622a:	63fb      	str	r3, [r7, #60]	; 0x3c
 802622c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 802622e:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8026230:	697b      	ldr	r3, [r7, #20]
 8026232:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8026236:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8026238:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 802623a:	4618      	mov	r0, r3
 802623c:	3740      	adds	r7, #64	; 0x40
 802623e:	46bd      	mov	sp, r7
 8026240:	bd80      	pop	{r7, pc}

08026242 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8026242:	b580      	push	{r7, lr}
 8026244:	b08e      	sub	sp, #56	; 0x38
 8026246:	af00      	add	r7, sp, #0
 8026248:	6078      	str	r0, [r7, #4]
 802624a:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 802624c:	687b      	ldr	r3, [r7, #4]
 802624e:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 8026250:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8026252:	2b00      	cmp	r3, #0
 8026254:	d10a      	bne.n	802626c <xQueueGiveFromISR+0x2a>
	__asm volatile
 8026256:	f04f 0350 	mov.w	r3, #80	; 0x50
 802625a:	f383 8811 	msr	BASEPRI, r3
 802625e:	f3bf 8f6f 	isb	sy
 8026262:	f3bf 8f4f 	dsb	sy
 8026266:	623b      	str	r3, [r7, #32]
}
 8026268:	bf00      	nop
 802626a:	e7fe      	b.n	802626a <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 802626c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 802626e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8026270:	2b00      	cmp	r3, #0
 8026272:	d00a      	beq.n	802628a <xQueueGiveFromISR+0x48>
	__asm volatile
 8026274:	f04f 0350 	mov.w	r3, #80	; 0x50
 8026278:	f383 8811 	msr	BASEPRI, r3
 802627c:	f3bf 8f6f 	isb	sy
 8026280:	f3bf 8f4f 	dsb	sy
 8026284:	61fb      	str	r3, [r7, #28]
}
 8026286:	bf00      	nop
 8026288:	e7fe      	b.n	8026288 <xQueueGiveFromISR+0x46>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 802628a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 802628c:	681b      	ldr	r3, [r3, #0]
 802628e:	2b00      	cmp	r3, #0
 8026290:	d103      	bne.n	802629a <xQueueGiveFromISR+0x58>
 8026292:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8026294:	689b      	ldr	r3, [r3, #8]
 8026296:	2b00      	cmp	r3, #0
 8026298:	d101      	bne.n	802629e <xQueueGiveFromISR+0x5c>
 802629a:	2301      	movs	r3, #1
 802629c:	e000      	b.n	80262a0 <xQueueGiveFromISR+0x5e>
 802629e:	2300      	movs	r3, #0
 80262a0:	2b00      	cmp	r3, #0
 80262a2:	d10a      	bne.n	80262ba <xQueueGiveFromISR+0x78>
	__asm volatile
 80262a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80262a8:	f383 8811 	msr	BASEPRI, r3
 80262ac:	f3bf 8f6f 	isb	sy
 80262b0:	f3bf 8f4f 	dsb	sy
 80262b4:	61bb      	str	r3, [r7, #24]
}
 80262b6:	bf00      	nop
 80262b8:	e7fe      	b.n	80262b8 <xQueueGiveFromISR+0x76>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80262ba:	f001 fead 	bl	8028018 <vPortValidateInterruptPriority>
	__asm volatile
 80262be:	f3ef 8211 	mrs	r2, BASEPRI
 80262c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80262c6:	f383 8811 	msr	BASEPRI, r3
 80262ca:	f3bf 8f6f 	isb	sy
 80262ce:	f3bf 8f4f 	dsb	sy
 80262d2:	617a      	str	r2, [r7, #20]
 80262d4:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 80262d6:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80262d8:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80262da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80262dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80262de:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 80262e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80262e2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80262e4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80262e6:	429a      	cmp	r2, r3
 80262e8:	d22b      	bcs.n	8026342 <xQueueGiveFromISR+0x100>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80262ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80262ec:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80262f0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80262f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80262f6:	1c5a      	adds	r2, r3, #1
 80262f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80262fa:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80262fc:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8026300:	f1b3 3fff 	cmp.w	r3, #4294967295
 8026304:	d112      	bne.n	802632c <xQueueGiveFromISR+0xea>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8026306:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8026308:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 802630a:	2b00      	cmp	r3, #0
 802630c:	d016      	beq.n	802633c <xQueueGiveFromISR+0xfa>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 802630e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8026310:	3324      	adds	r3, #36	; 0x24
 8026312:	4618      	mov	r0, r3
 8026314:	f001 f892 	bl	802743c <xTaskRemoveFromEventList>
 8026318:	4603      	mov	r3, r0
 802631a:	2b00      	cmp	r3, #0
 802631c:	d00e      	beq.n	802633c <xQueueGiveFromISR+0xfa>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 802631e:	683b      	ldr	r3, [r7, #0]
 8026320:	2b00      	cmp	r3, #0
 8026322:	d00b      	beq.n	802633c <xQueueGiveFromISR+0xfa>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8026324:	683b      	ldr	r3, [r7, #0]
 8026326:	2201      	movs	r2, #1
 8026328:	601a      	str	r2, [r3, #0]
 802632a:	e007      	b.n	802633c <xQueueGiveFromISR+0xfa>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 802632c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8026330:	3301      	adds	r3, #1
 8026332:	b2db      	uxtb	r3, r3
 8026334:	b25a      	sxtb	r2, r3
 8026336:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8026338:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 802633c:	2301      	movs	r3, #1
 802633e:	637b      	str	r3, [r7, #52]	; 0x34
 8026340:	e001      	b.n	8026346 <xQueueGiveFromISR+0x104>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8026342:	2300      	movs	r3, #0
 8026344:	637b      	str	r3, [r7, #52]	; 0x34
 8026346:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8026348:	60fb      	str	r3, [r7, #12]
	__asm volatile
 802634a:	68fb      	ldr	r3, [r7, #12]
 802634c:	f383 8811 	msr	BASEPRI, r3
}
 8026350:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8026352:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8026354:	4618      	mov	r0, r3
 8026356:	3738      	adds	r7, #56	; 0x38
 8026358:	46bd      	mov	sp, r7
 802635a:	bd80      	pop	{r7, pc}

0802635c <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 802635c:	b580      	push	{r7, lr}
 802635e:	b08c      	sub	sp, #48	; 0x30
 8026360:	af00      	add	r7, sp, #0
 8026362:	60f8      	str	r0, [r7, #12]
 8026364:	60b9      	str	r1, [r7, #8]
 8026366:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8026368:	2300      	movs	r3, #0
 802636a:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 802636c:	68fb      	ldr	r3, [r7, #12]
 802636e:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8026370:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8026372:	2b00      	cmp	r3, #0
 8026374:	d10a      	bne.n	802638c <xQueueReceive+0x30>
	__asm volatile
 8026376:	f04f 0350 	mov.w	r3, #80	; 0x50
 802637a:	f383 8811 	msr	BASEPRI, r3
 802637e:	f3bf 8f6f 	isb	sy
 8026382:	f3bf 8f4f 	dsb	sy
 8026386:	623b      	str	r3, [r7, #32]
}
 8026388:	bf00      	nop
 802638a:	e7fe      	b.n	802638a <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 802638c:	68bb      	ldr	r3, [r7, #8]
 802638e:	2b00      	cmp	r3, #0
 8026390:	d103      	bne.n	802639a <xQueueReceive+0x3e>
 8026392:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8026394:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8026396:	2b00      	cmp	r3, #0
 8026398:	d101      	bne.n	802639e <xQueueReceive+0x42>
 802639a:	2301      	movs	r3, #1
 802639c:	e000      	b.n	80263a0 <xQueueReceive+0x44>
 802639e:	2300      	movs	r3, #0
 80263a0:	2b00      	cmp	r3, #0
 80263a2:	d10a      	bne.n	80263ba <xQueueReceive+0x5e>
	__asm volatile
 80263a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80263a8:	f383 8811 	msr	BASEPRI, r3
 80263ac:	f3bf 8f6f 	isb	sy
 80263b0:	f3bf 8f4f 	dsb	sy
 80263b4:	61fb      	str	r3, [r7, #28]
}
 80263b6:	bf00      	nop
 80263b8:	e7fe      	b.n	80263b8 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80263ba:	f001 f9ff 	bl	80277bc <xTaskGetSchedulerState>
 80263be:	4603      	mov	r3, r0
 80263c0:	2b00      	cmp	r3, #0
 80263c2:	d102      	bne.n	80263ca <xQueueReceive+0x6e>
 80263c4:	687b      	ldr	r3, [r7, #4]
 80263c6:	2b00      	cmp	r3, #0
 80263c8:	d101      	bne.n	80263ce <xQueueReceive+0x72>
 80263ca:	2301      	movs	r3, #1
 80263cc:	e000      	b.n	80263d0 <xQueueReceive+0x74>
 80263ce:	2300      	movs	r3, #0
 80263d0:	2b00      	cmp	r3, #0
 80263d2:	d10a      	bne.n	80263ea <xQueueReceive+0x8e>
	__asm volatile
 80263d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80263d8:	f383 8811 	msr	BASEPRI, r3
 80263dc:	f3bf 8f6f 	isb	sy
 80263e0:	f3bf 8f4f 	dsb	sy
 80263e4:	61bb      	str	r3, [r7, #24]
}
 80263e6:	bf00      	nop
 80263e8:	e7fe      	b.n	80263e8 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80263ea:	f001 fd33 	bl	8027e54 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80263ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80263f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80263f2:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80263f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80263f6:	2b00      	cmp	r3, #0
 80263f8:	d01f      	beq.n	802643a <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80263fa:	68b9      	ldr	r1, [r7, #8]
 80263fc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80263fe:	f000 fafa 	bl	80269f6 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8026402:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8026404:	1e5a      	subs	r2, r3, #1
 8026406:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8026408:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 802640a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802640c:	691b      	ldr	r3, [r3, #16]
 802640e:	2b00      	cmp	r3, #0
 8026410:	d00f      	beq.n	8026432 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8026412:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8026414:	3310      	adds	r3, #16
 8026416:	4618      	mov	r0, r3
 8026418:	f001 f810 	bl	802743c <xTaskRemoveFromEventList>
 802641c:	4603      	mov	r3, r0
 802641e:	2b00      	cmp	r3, #0
 8026420:	d007      	beq.n	8026432 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8026422:	4b3d      	ldr	r3, [pc, #244]	; (8026518 <xQueueReceive+0x1bc>)
 8026424:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8026428:	601a      	str	r2, [r3, #0]
 802642a:	f3bf 8f4f 	dsb	sy
 802642e:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8026432:	f001 fd3f 	bl	8027eb4 <vPortExitCritical>
				return pdPASS;
 8026436:	2301      	movs	r3, #1
 8026438:	e069      	b.n	802650e <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 802643a:	687b      	ldr	r3, [r7, #4]
 802643c:	2b00      	cmp	r3, #0
 802643e:	d103      	bne.n	8026448 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8026440:	f001 fd38 	bl	8027eb4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8026444:	2300      	movs	r3, #0
 8026446:	e062      	b.n	802650e <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8026448:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 802644a:	2b00      	cmp	r3, #0
 802644c:	d106      	bne.n	802645c <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 802644e:	f107 0310 	add.w	r3, r7, #16
 8026452:	4618      	mov	r0, r3
 8026454:	f001 f854 	bl	8027500 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8026458:	2301      	movs	r3, #1
 802645a:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 802645c:	f001 fd2a 	bl	8027eb4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8026460:	f000 fde2 	bl	8027028 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8026464:	f001 fcf6 	bl	8027e54 <vPortEnterCritical>
 8026468:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802646a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 802646e:	b25b      	sxtb	r3, r3
 8026470:	f1b3 3fff 	cmp.w	r3, #4294967295
 8026474:	d103      	bne.n	802647e <xQueueReceive+0x122>
 8026476:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8026478:	2200      	movs	r2, #0
 802647a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 802647e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8026480:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8026484:	b25b      	sxtb	r3, r3
 8026486:	f1b3 3fff 	cmp.w	r3, #4294967295
 802648a:	d103      	bne.n	8026494 <xQueueReceive+0x138>
 802648c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802648e:	2200      	movs	r2, #0
 8026490:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8026494:	f001 fd0e 	bl	8027eb4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8026498:	1d3a      	adds	r2, r7, #4
 802649a:	f107 0310 	add.w	r3, r7, #16
 802649e:	4611      	mov	r1, r2
 80264a0:	4618      	mov	r0, r3
 80264a2:	f001 f843 	bl	802752c <xTaskCheckForTimeOut>
 80264a6:	4603      	mov	r3, r0
 80264a8:	2b00      	cmp	r3, #0
 80264aa:	d123      	bne.n	80264f4 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80264ac:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80264ae:	f000 fb1a 	bl	8026ae6 <prvIsQueueEmpty>
 80264b2:	4603      	mov	r3, r0
 80264b4:	2b00      	cmp	r3, #0
 80264b6:	d017      	beq.n	80264e8 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80264b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80264ba:	3324      	adds	r3, #36	; 0x24
 80264bc:	687a      	ldr	r2, [r7, #4]
 80264be:	4611      	mov	r1, r2
 80264c0:	4618      	mov	r0, r3
 80264c2:	f000 ff97 	bl	80273f4 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80264c6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80264c8:	f000 fabb 	bl	8026a42 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80264cc:	f000 fdba 	bl	8027044 <xTaskResumeAll>
 80264d0:	4603      	mov	r3, r0
 80264d2:	2b00      	cmp	r3, #0
 80264d4:	d189      	bne.n	80263ea <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 80264d6:	4b10      	ldr	r3, [pc, #64]	; (8026518 <xQueueReceive+0x1bc>)
 80264d8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80264dc:	601a      	str	r2, [r3, #0]
 80264de:	f3bf 8f4f 	dsb	sy
 80264e2:	f3bf 8f6f 	isb	sy
 80264e6:	e780      	b.n	80263ea <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 80264e8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80264ea:	f000 faaa 	bl	8026a42 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80264ee:	f000 fda9 	bl	8027044 <xTaskResumeAll>
 80264f2:	e77a      	b.n	80263ea <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 80264f4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80264f6:	f000 faa4 	bl	8026a42 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80264fa:	f000 fda3 	bl	8027044 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80264fe:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8026500:	f000 faf1 	bl	8026ae6 <prvIsQueueEmpty>
 8026504:	4603      	mov	r3, r0
 8026506:	2b00      	cmp	r3, #0
 8026508:	f43f af6f 	beq.w	80263ea <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 802650c:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 802650e:	4618      	mov	r0, r3
 8026510:	3730      	adds	r7, #48	; 0x30
 8026512:	46bd      	mov	sp, r7
 8026514:	bd80      	pop	{r7, pc}
 8026516:	bf00      	nop
 8026518:	e000ed04 	.word	0xe000ed04

0802651c <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 802651c:	b580      	push	{r7, lr}
 802651e:	b08e      	sub	sp, #56	; 0x38
 8026520:	af00      	add	r7, sp, #0
 8026522:	6078      	str	r0, [r7, #4]
 8026524:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8026526:	2300      	movs	r3, #0
 8026528:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 802652a:	687b      	ldr	r3, [r7, #4]
 802652c:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 802652e:	2300      	movs	r3, #0
 8026530:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8026532:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8026534:	2b00      	cmp	r3, #0
 8026536:	d10a      	bne.n	802654e <xQueueSemaphoreTake+0x32>
	__asm volatile
 8026538:	f04f 0350 	mov.w	r3, #80	; 0x50
 802653c:	f383 8811 	msr	BASEPRI, r3
 8026540:	f3bf 8f6f 	isb	sy
 8026544:	f3bf 8f4f 	dsb	sy
 8026548:	623b      	str	r3, [r7, #32]
}
 802654a:	bf00      	nop
 802654c:	e7fe      	b.n	802654c <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 802654e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8026550:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8026552:	2b00      	cmp	r3, #0
 8026554:	d00a      	beq.n	802656c <xQueueSemaphoreTake+0x50>
	__asm volatile
 8026556:	f04f 0350 	mov.w	r3, #80	; 0x50
 802655a:	f383 8811 	msr	BASEPRI, r3
 802655e:	f3bf 8f6f 	isb	sy
 8026562:	f3bf 8f4f 	dsb	sy
 8026566:	61fb      	str	r3, [r7, #28]
}
 8026568:	bf00      	nop
 802656a:	e7fe      	b.n	802656a <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 802656c:	f001 f926 	bl	80277bc <xTaskGetSchedulerState>
 8026570:	4603      	mov	r3, r0
 8026572:	2b00      	cmp	r3, #0
 8026574:	d102      	bne.n	802657c <xQueueSemaphoreTake+0x60>
 8026576:	683b      	ldr	r3, [r7, #0]
 8026578:	2b00      	cmp	r3, #0
 802657a:	d101      	bne.n	8026580 <xQueueSemaphoreTake+0x64>
 802657c:	2301      	movs	r3, #1
 802657e:	e000      	b.n	8026582 <xQueueSemaphoreTake+0x66>
 8026580:	2300      	movs	r3, #0
 8026582:	2b00      	cmp	r3, #0
 8026584:	d10a      	bne.n	802659c <xQueueSemaphoreTake+0x80>
	__asm volatile
 8026586:	f04f 0350 	mov.w	r3, #80	; 0x50
 802658a:	f383 8811 	msr	BASEPRI, r3
 802658e:	f3bf 8f6f 	isb	sy
 8026592:	f3bf 8f4f 	dsb	sy
 8026596:	61bb      	str	r3, [r7, #24]
}
 8026598:	bf00      	nop
 802659a:	e7fe      	b.n	802659a <xQueueSemaphoreTake+0x7e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 802659c:	f001 fc5a 	bl	8027e54 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 80265a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80265a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80265a4:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 80265a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80265a8:	2b00      	cmp	r3, #0
 80265aa:	d024      	beq.n	80265f6 <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 80265ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80265ae:	1e5a      	subs	r2, r3, #1
 80265b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80265b2:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80265b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80265b6:	681b      	ldr	r3, [r3, #0]
 80265b8:	2b00      	cmp	r3, #0
 80265ba:	d104      	bne.n	80265c6 <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 80265bc:	f001 faa6 	bl	8027b0c <pvTaskIncrementMutexHeldCount>
 80265c0:	4602      	mov	r2, r0
 80265c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80265c4:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80265c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80265c8:	691b      	ldr	r3, [r3, #16]
 80265ca:	2b00      	cmp	r3, #0
 80265cc:	d00f      	beq.n	80265ee <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80265ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80265d0:	3310      	adds	r3, #16
 80265d2:	4618      	mov	r0, r3
 80265d4:	f000 ff32 	bl	802743c <xTaskRemoveFromEventList>
 80265d8:	4603      	mov	r3, r0
 80265da:	2b00      	cmp	r3, #0
 80265dc:	d007      	beq.n	80265ee <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80265de:	4b54      	ldr	r3, [pc, #336]	; (8026730 <xQueueSemaphoreTake+0x214>)
 80265e0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80265e4:	601a      	str	r2, [r3, #0]
 80265e6:	f3bf 8f4f 	dsb	sy
 80265ea:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80265ee:	f001 fc61 	bl	8027eb4 <vPortExitCritical>
				return pdPASS;
 80265f2:	2301      	movs	r3, #1
 80265f4:	e097      	b.n	8026726 <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80265f6:	683b      	ldr	r3, [r7, #0]
 80265f8:	2b00      	cmp	r3, #0
 80265fa:	d111      	bne.n	8026620 <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 80265fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80265fe:	2b00      	cmp	r3, #0
 8026600:	d00a      	beq.n	8026618 <xQueueSemaphoreTake+0xfc>
	__asm volatile
 8026602:	f04f 0350 	mov.w	r3, #80	; 0x50
 8026606:	f383 8811 	msr	BASEPRI, r3
 802660a:	f3bf 8f6f 	isb	sy
 802660e:	f3bf 8f4f 	dsb	sy
 8026612:	617b      	str	r3, [r7, #20]
}
 8026614:	bf00      	nop
 8026616:	e7fe      	b.n	8026616 <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8026618:	f001 fc4c 	bl	8027eb4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 802661c:	2300      	movs	r3, #0
 802661e:	e082      	b.n	8026726 <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 8026620:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8026622:	2b00      	cmp	r3, #0
 8026624:	d106      	bne.n	8026634 <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8026626:	f107 030c 	add.w	r3, r7, #12
 802662a:	4618      	mov	r0, r3
 802662c:	f000 ff68 	bl	8027500 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8026630:	2301      	movs	r3, #1
 8026632:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8026634:	f001 fc3e 	bl	8027eb4 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8026638:	f000 fcf6 	bl	8027028 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 802663c:	f001 fc0a 	bl	8027e54 <vPortEnterCritical>
 8026640:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8026642:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8026646:	b25b      	sxtb	r3, r3
 8026648:	f1b3 3fff 	cmp.w	r3, #4294967295
 802664c:	d103      	bne.n	8026656 <xQueueSemaphoreTake+0x13a>
 802664e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8026650:	2200      	movs	r2, #0
 8026652:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8026656:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8026658:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 802665c:	b25b      	sxtb	r3, r3
 802665e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8026662:	d103      	bne.n	802666c <xQueueSemaphoreTake+0x150>
 8026664:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8026666:	2200      	movs	r2, #0
 8026668:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 802666c:	f001 fc22 	bl	8027eb4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8026670:	463a      	mov	r2, r7
 8026672:	f107 030c 	add.w	r3, r7, #12
 8026676:	4611      	mov	r1, r2
 8026678:	4618      	mov	r0, r3
 802667a:	f000 ff57 	bl	802752c <xTaskCheckForTimeOut>
 802667e:	4603      	mov	r3, r0
 8026680:	2b00      	cmp	r3, #0
 8026682:	d132      	bne.n	80266ea <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8026684:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8026686:	f000 fa2e 	bl	8026ae6 <prvIsQueueEmpty>
 802668a:	4603      	mov	r3, r0
 802668c:	2b00      	cmp	r3, #0
 802668e:	d026      	beq.n	80266de <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8026690:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8026692:	681b      	ldr	r3, [r3, #0]
 8026694:	2b00      	cmp	r3, #0
 8026696:	d109      	bne.n	80266ac <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 8026698:	f001 fbdc 	bl	8027e54 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 802669c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 802669e:	689b      	ldr	r3, [r3, #8]
 80266a0:	4618      	mov	r0, r3
 80266a2:	f001 f8a9 	bl	80277f8 <xTaskPriorityInherit>
 80266a6:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 80266a8:	f001 fc04 	bl	8027eb4 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80266ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80266ae:	3324      	adds	r3, #36	; 0x24
 80266b0:	683a      	ldr	r2, [r7, #0]
 80266b2:	4611      	mov	r1, r2
 80266b4:	4618      	mov	r0, r3
 80266b6:	f000 fe9d 	bl	80273f4 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80266ba:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80266bc:	f000 f9c1 	bl	8026a42 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80266c0:	f000 fcc0 	bl	8027044 <xTaskResumeAll>
 80266c4:	4603      	mov	r3, r0
 80266c6:	2b00      	cmp	r3, #0
 80266c8:	f47f af68 	bne.w	802659c <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 80266cc:	4b18      	ldr	r3, [pc, #96]	; (8026730 <xQueueSemaphoreTake+0x214>)
 80266ce:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80266d2:	601a      	str	r2, [r3, #0]
 80266d4:	f3bf 8f4f 	dsb	sy
 80266d8:	f3bf 8f6f 	isb	sy
 80266dc:	e75e      	b.n	802659c <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 80266de:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80266e0:	f000 f9af 	bl	8026a42 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80266e4:	f000 fcae 	bl	8027044 <xTaskResumeAll>
 80266e8:	e758      	b.n	802659c <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 80266ea:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80266ec:	f000 f9a9 	bl	8026a42 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80266f0:	f000 fca8 	bl	8027044 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80266f4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80266f6:	f000 f9f6 	bl	8026ae6 <prvIsQueueEmpty>
 80266fa:	4603      	mov	r3, r0
 80266fc:	2b00      	cmp	r3, #0
 80266fe:	f43f af4d 	beq.w	802659c <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8026702:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8026704:	2b00      	cmp	r3, #0
 8026706:	d00d      	beq.n	8026724 <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 8026708:	f001 fba4 	bl	8027e54 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 802670c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 802670e:	f000 f8f0 	bl	80268f2 <prvGetDisinheritPriorityAfterTimeout>
 8026712:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8026714:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8026716:	689b      	ldr	r3, [r3, #8]
 8026718:	6a79      	ldr	r1, [r7, #36]	; 0x24
 802671a:	4618      	mov	r0, r3
 802671c:	f001 f968 	bl	80279f0 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8026720:	f001 fbc8 	bl	8027eb4 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8026724:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8026726:	4618      	mov	r0, r3
 8026728:	3738      	adds	r7, #56	; 0x38
 802672a:	46bd      	mov	sp, r7
 802672c:	bd80      	pop	{r7, pc}
 802672e:	bf00      	nop
 8026730:	e000ed04 	.word	0xe000ed04

08026734 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8026734:	b580      	push	{r7, lr}
 8026736:	b08e      	sub	sp, #56	; 0x38
 8026738:	af00      	add	r7, sp, #0
 802673a:	60f8      	str	r0, [r7, #12]
 802673c:	60b9      	str	r1, [r7, #8]
 802673e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8026740:	68fb      	ldr	r3, [r7, #12]
 8026742:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8026744:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8026746:	2b00      	cmp	r3, #0
 8026748:	d10a      	bne.n	8026760 <xQueueReceiveFromISR+0x2c>
	__asm volatile
 802674a:	f04f 0350 	mov.w	r3, #80	; 0x50
 802674e:	f383 8811 	msr	BASEPRI, r3
 8026752:	f3bf 8f6f 	isb	sy
 8026756:	f3bf 8f4f 	dsb	sy
 802675a:	623b      	str	r3, [r7, #32]
}
 802675c:	bf00      	nop
 802675e:	e7fe      	b.n	802675e <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8026760:	68bb      	ldr	r3, [r7, #8]
 8026762:	2b00      	cmp	r3, #0
 8026764:	d103      	bne.n	802676e <xQueueReceiveFromISR+0x3a>
 8026766:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8026768:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 802676a:	2b00      	cmp	r3, #0
 802676c:	d101      	bne.n	8026772 <xQueueReceiveFromISR+0x3e>
 802676e:	2301      	movs	r3, #1
 8026770:	e000      	b.n	8026774 <xQueueReceiveFromISR+0x40>
 8026772:	2300      	movs	r3, #0
 8026774:	2b00      	cmp	r3, #0
 8026776:	d10a      	bne.n	802678e <xQueueReceiveFromISR+0x5a>
	__asm volatile
 8026778:	f04f 0350 	mov.w	r3, #80	; 0x50
 802677c:	f383 8811 	msr	BASEPRI, r3
 8026780:	f3bf 8f6f 	isb	sy
 8026784:	f3bf 8f4f 	dsb	sy
 8026788:	61fb      	str	r3, [r7, #28]
}
 802678a:	bf00      	nop
 802678c:	e7fe      	b.n	802678c <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 802678e:	f001 fc43 	bl	8028018 <vPortValidateInterruptPriority>
	__asm volatile
 8026792:	f3ef 8211 	mrs	r2, BASEPRI
 8026796:	f04f 0350 	mov.w	r3, #80	; 0x50
 802679a:	f383 8811 	msr	BASEPRI, r3
 802679e:	f3bf 8f6f 	isb	sy
 80267a2:	f3bf 8f4f 	dsb	sy
 80267a6:	61ba      	str	r2, [r7, #24]
 80267a8:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 80267aa:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80267ac:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80267ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80267b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80267b2:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80267b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80267b6:	2b00      	cmp	r3, #0
 80267b8:	d02f      	beq.n	802681a <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 80267ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80267bc:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80267c0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 80267c4:	68b9      	ldr	r1, [r7, #8]
 80267c6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80267c8:	f000 f915 	bl	80269f6 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80267cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80267ce:	1e5a      	subs	r2, r3, #1
 80267d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80267d2:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 80267d4:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80267d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80267dc:	d112      	bne.n	8026804 <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80267de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80267e0:	691b      	ldr	r3, [r3, #16]
 80267e2:	2b00      	cmp	r3, #0
 80267e4:	d016      	beq.n	8026814 <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80267e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80267e8:	3310      	adds	r3, #16
 80267ea:	4618      	mov	r0, r3
 80267ec:	f000 fe26 	bl	802743c <xTaskRemoveFromEventList>
 80267f0:	4603      	mov	r3, r0
 80267f2:	2b00      	cmp	r3, #0
 80267f4:	d00e      	beq.n	8026814 <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 80267f6:	687b      	ldr	r3, [r7, #4]
 80267f8:	2b00      	cmp	r3, #0
 80267fa:	d00b      	beq.n	8026814 <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 80267fc:	687b      	ldr	r3, [r7, #4]
 80267fe:	2201      	movs	r2, #1
 8026800:	601a      	str	r2, [r3, #0]
 8026802:	e007      	b.n	8026814 <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8026804:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8026808:	3301      	adds	r3, #1
 802680a:	b2db      	uxtb	r3, r3
 802680c:	b25a      	sxtb	r2, r3
 802680e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8026810:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 8026814:	2301      	movs	r3, #1
 8026816:	637b      	str	r3, [r7, #52]	; 0x34
 8026818:	e001      	b.n	802681e <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 802681a:	2300      	movs	r3, #0
 802681c:	637b      	str	r3, [r7, #52]	; 0x34
 802681e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8026820:	613b      	str	r3, [r7, #16]
	__asm volatile
 8026822:	693b      	ldr	r3, [r7, #16]
 8026824:	f383 8811 	msr	BASEPRI, r3
}
 8026828:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 802682a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 802682c:	4618      	mov	r0, r3
 802682e:	3738      	adds	r7, #56	; 0x38
 8026830:	46bd      	mov	sp, r7
 8026832:	bd80      	pop	{r7, pc}

08026834 <uxQueueMessagesWaiting>:
	return xReturn;
}
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaiting( const QueueHandle_t xQueue )
{
 8026834:	b580      	push	{r7, lr}
 8026836:	b084      	sub	sp, #16
 8026838:	af00      	add	r7, sp, #0
 802683a:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;

	configASSERT( xQueue );
 802683c:	687b      	ldr	r3, [r7, #4]
 802683e:	2b00      	cmp	r3, #0
 8026840:	d10a      	bne.n	8026858 <uxQueueMessagesWaiting+0x24>
	__asm volatile
 8026842:	f04f 0350 	mov.w	r3, #80	; 0x50
 8026846:	f383 8811 	msr	BASEPRI, r3
 802684a:	f3bf 8f6f 	isb	sy
 802684e:	f3bf 8f4f 	dsb	sy
 8026852:	60bb      	str	r3, [r7, #8]
}
 8026854:	bf00      	nop
 8026856:	e7fe      	b.n	8026856 <uxQueueMessagesWaiting+0x22>

	taskENTER_CRITICAL();
 8026858:	f001 fafc 	bl	8027e54 <vPortEnterCritical>
	{
		uxReturn = ( ( Queue_t * ) xQueue )->uxMessagesWaiting;
 802685c:	687b      	ldr	r3, [r7, #4]
 802685e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8026860:	60fb      	str	r3, [r7, #12]
	}
	taskEXIT_CRITICAL();
 8026862:	f001 fb27 	bl	8027eb4 <vPortExitCritical>

	return uxReturn;
 8026866:	68fb      	ldr	r3, [r7, #12]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 8026868:	4618      	mov	r0, r3
 802686a:	3710      	adds	r7, #16
 802686c:	46bd      	mov	sp, r7
 802686e:	bd80      	pop	{r7, pc}

08026870 <uxQueueMessagesWaitingFromISR>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaitingFromISR( const QueueHandle_t xQueue )
{
 8026870:	b480      	push	{r7}
 8026872:	b087      	sub	sp, #28
 8026874:	af00      	add	r7, sp, #0
 8026876:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;
Queue_t * const pxQueue = xQueue;
 8026878:	687b      	ldr	r3, [r7, #4]
 802687a:	617b      	str	r3, [r7, #20]

	configASSERT( pxQueue );
 802687c:	697b      	ldr	r3, [r7, #20]
 802687e:	2b00      	cmp	r3, #0
 8026880:	d10a      	bne.n	8026898 <uxQueueMessagesWaitingFromISR+0x28>
	__asm volatile
 8026882:	f04f 0350 	mov.w	r3, #80	; 0x50
 8026886:	f383 8811 	msr	BASEPRI, r3
 802688a:	f3bf 8f6f 	isb	sy
 802688e:	f3bf 8f4f 	dsb	sy
 8026892:	60fb      	str	r3, [r7, #12]
}
 8026894:	bf00      	nop
 8026896:	e7fe      	b.n	8026896 <uxQueueMessagesWaitingFromISR+0x26>
	uxReturn = pxQueue->uxMessagesWaiting;
 8026898:	697b      	ldr	r3, [r7, #20]
 802689a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 802689c:	613b      	str	r3, [r7, #16]

	return uxReturn;
 802689e:	693b      	ldr	r3, [r7, #16]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 80268a0:	4618      	mov	r0, r3
 80268a2:	371c      	adds	r7, #28
 80268a4:	46bd      	mov	sp, r7
 80268a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80268aa:	4770      	bx	lr

080268ac <vQueueDelete>:
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 80268ac:	b580      	push	{r7, lr}
 80268ae:	b084      	sub	sp, #16
 80268b0:	af00      	add	r7, sp, #0
 80268b2:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 80268b4:	687b      	ldr	r3, [r7, #4]
 80268b6:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80268b8:	68fb      	ldr	r3, [r7, #12]
 80268ba:	2b00      	cmp	r3, #0
 80268bc:	d10a      	bne.n	80268d4 <vQueueDelete+0x28>
	__asm volatile
 80268be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80268c2:	f383 8811 	msr	BASEPRI, r3
 80268c6:	f3bf 8f6f 	isb	sy
 80268ca:	f3bf 8f4f 	dsb	sy
 80268ce:	60bb      	str	r3, [r7, #8]
}
 80268d0:	bf00      	nop
 80268d2:	e7fe      	b.n	80268d2 <vQueueDelete+0x26>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 80268d4:	68f8      	ldr	r0, [r7, #12]
 80268d6:	f000 f935 	bl	8026b44 <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 80268da:	68fb      	ldr	r3, [r7, #12]
 80268dc:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 80268e0:	2b00      	cmp	r3, #0
 80268e2:	d102      	bne.n	80268ea <vQueueDelete+0x3e>
		{
			vPortFree( pxQueue );
 80268e4:	68f8      	ldr	r0, [r7, #12]
 80268e6:	f001 fca3 	bl	8028230 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 80268ea:	bf00      	nop
 80268ec:	3710      	adds	r7, #16
 80268ee:	46bd      	mov	sp, r7
 80268f0:	bd80      	pop	{r7, pc}

080268f2 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 80268f2:	b480      	push	{r7}
 80268f4:	b085      	sub	sp, #20
 80268f6:	af00      	add	r7, sp, #0
 80268f8:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 80268fa:	687b      	ldr	r3, [r7, #4]
 80268fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80268fe:	2b00      	cmp	r3, #0
 8026900:	d006      	beq.n	8026910 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8026902:	687b      	ldr	r3, [r7, #4]
 8026904:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8026906:	681b      	ldr	r3, [r3, #0]
 8026908:	f1c3 0310 	rsb	r3, r3, #16
 802690c:	60fb      	str	r3, [r7, #12]
 802690e:	e001      	b.n	8026914 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8026910:	2300      	movs	r3, #0
 8026912:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8026914:	68fb      	ldr	r3, [r7, #12]
	}
 8026916:	4618      	mov	r0, r3
 8026918:	3714      	adds	r7, #20
 802691a:	46bd      	mov	sp, r7
 802691c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8026920:	4770      	bx	lr

08026922 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8026922:	b580      	push	{r7, lr}
 8026924:	b086      	sub	sp, #24
 8026926:	af00      	add	r7, sp, #0
 8026928:	60f8      	str	r0, [r7, #12]
 802692a:	60b9      	str	r1, [r7, #8]
 802692c:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 802692e:	2300      	movs	r3, #0
 8026930:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8026932:	68fb      	ldr	r3, [r7, #12]
 8026934:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8026936:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8026938:	68fb      	ldr	r3, [r7, #12]
 802693a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 802693c:	2b00      	cmp	r3, #0
 802693e:	d10d      	bne.n	802695c <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8026940:	68fb      	ldr	r3, [r7, #12]
 8026942:	681b      	ldr	r3, [r3, #0]
 8026944:	2b00      	cmp	r3, #0
 8026946:	d14d      	bne.n	80269e4 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8026948:	68fb      	ldr	r3, [r7, #12]
 802694a:	689b      	ldr	r3, [r3, #8]
 802694c:	4618      	mov	r0, r3
 802694e:	f000 ffc9 	bl	80278e4 <xTaskPriorityDisinherit>
 8026952:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8026954:	68fb      	ldr	r3, [r7, #12]
 8026956:	2200      	movs	r2, #0
 8026958:	609a      	str	r2, [r3, #8]
 802695a:	e043      	b.n	80269e4 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 802695c:	687b      	ldr	r3, [r7, #4]
 802695e:	2b00      	cmp	r3, #0
 8026960:	d119      	bne.n	8026996 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8026962:	68fb      	ldr	r3, [r7, #12]
 8026964:	6858      	ldr	r0, [r3, #4]
 8026966:	68fb      	ldr	r3, [r7, #12]
 8026968:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 802696a:	461a      	mov	r2, r3
 802696c:	68b9      	ldr	r1, [r7, #8]
 802696e:	f011 ff81 	bl	8038874 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8026972:	68fb      	ldr	r3, [r7, #12]
 8026974:	685a      	ldr	r2, [r3, #4]
 8026976:	68fb      	ldr	r3, [r7, #12]
 8026978:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 802697a:	441a      	add	r2, r3
 802697c:	68fb      	ldr	r3, [r7, #12]
 802697e:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8026980:	68fb      	ldr	r3, [r7, #12]
 8026982:	685a      	ldr	r2, [r3, #4]
 8026984:	68fb      	ldr	r3, [r7, #12]
 8026986:	689b      	ldr	r3, [r3, #8]
 8026988:	429a      	cmp	r2, r3
 802698a:	d32b      	bcc.n	80269e4 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 802698c:	68fb      	ldr	r3, [r7, #12]
 802698e:	681a      	ldr	r2, [r3, #0]
 8026990:	68fb      	ldr	r3, [r7, #12]
 8026992:	605a      	str	r2, [r3, #4]
 8026994:	e026      	b.n	80269e4 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8026996:	68fb      	ldr	r3, [r7, #12]
 8026998:	68d8      	ldr	r0, [r3, #12]
 802699a:	68fb      	ldr	r3, [r7, #12]
 802699c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 802699e:	461a      	mov	r2, r3
 80269a0:	68b9      	ldr	r1, [r7, #8]
 80269a2:	f011 ff67 	bl	8038874 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80269a6:	68fb      	ldr	r3, [r7, #12]
 80269a8:	68da      	ldr	r2, [r3, #12]
 80269aa:	68fb      	ldr	r3, [r7, #12]
 80269ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80269ae:	425b      	negs	r3, r3
 80269b0:	441a      	add	r2, r3
 80269b2:	68fb      	ldr	r3, [r7, #12]
 80269b4:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80269b6:	68fb      	ldr	r3, [r7, #12]
 80269b8:	68da      	ldr	r2, [r3, #12]
 80269ba:	68fb      	ldr	r3, [r7, #12]
 80269bc:	681b      	ldr	r3, [r3, #0]
 80269be:	429a      	cmp	r2, r3
 80269c0:	d207      	bcs.n	80269d2 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80269c2:	68fb      	ldr	r3, [r7, #12]
 80269c4:	689a      	ldr	r2, [r3, #8]
 80269c6:	68fb      	ldr	r3, [r7, #12]
 80269c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80269ca:	425b      	negs	r3, r3
 80269cc:	441a      	add	r2, r3
 80269ce:	68fb      	ldr	r3, [r7, #12]
 80269d0:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80269d2:	687b      	ldr	r3, [r7, #4]
 80269d4:	2b02      	cmp	r3, #2
 80269d6:	d105      	bne.n	80269e4 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80269d8:	693b      	ldr	r3, [r7, #16]
 80269da:	2b00      	cmp	r3, #0
 80269dc:	d002      	beq.n	80269e4 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80269de:	693b      	ldr	r3, [r7, #16]
 80269e0:	3b01      	subs	r3, #1
 80269e2:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80269e4:	693b      	ldr	r3, [r7, #16]
 80269e6:	1c5a      	adds	r2, r3, #1
 80269e8:	68fb      	ldr	r3, [r7, #12]
 80269ea:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 80269ec:	697b      	ldr	r3, [r7, #20]
}
 80269ee:	4618      	mov	r0, r3
 80269f0:	3718      	adds	r7, #24
 80269f2:	46bd      	mov	sp, r7
 80269f4:	bd80      	pop	{r7, pc}

080269f6 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80269f6:	b580      	push	{r7, lr}
 80269f8:	b082      	sub	sp, #8
 80269fa:	af00      	add	r7, sp, #0
 80269fc:	6078      	str	r0, [r7, #4]
 80269fe:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8026a00:	687b      	ldr	r3, [r7, #4]
 8026a02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8026a04:	2b00      	cmp	r3, #0
 8026a06:	d018      	beq.n	8026a3a <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8026a08:	687b      	ldr	r3, [r7, #4]
 8026a0a:	68da      	ldr	r2, [r3, #12]
 8026a0c:	687b      	ldr	r3, [r7, #4]
 8026a0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8026a10:	441a      	add	r2, r3
 8026a12:	687b      	ldr	r3, [r7, #4]
 8026a14:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8026a16:	687b      	ldr	r3, [r7, #4]
 8026a18:	68da      	ldr	r2, [r3, #12]
 8026a1a:	687b      	ldr	r3, [r7, #4]
 8026a1c:	689b      	ldr	r3, [r3, #8]
 8026a1e:	429a      	cmp	r2, r3
 8026a20:	d303      	bcc.n	8026a2a <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8026a22:	687b      	ldr	r3, [r7, #4]
 8026a24:	681a      	ldr	r2, [r3, #0]
 8026a26:	687b      	ldr	r3, [r7, #4]
 8026a28:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8026a2a:	687b      	ldr	r3, [r7, #4]
 8026a2c:	68d9      	ldr	r1, [r3, #12]
 8026a2e:	687b      	ldr	r3, [r7, #4]
 8026a30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8026a32:	461a      	mov	r2, r3
 8026a34:	6838      	ldr	r0, [r7, #0]
 8026a36:	f011 ff1d 	bl	8038874 <memcpy>
	}
}
 8026a3a:	bf00      	nop
 8026a3c:	3708      	adds	r7, #8
 8026a3e:	46bd      	mov	sp, r7
 8026a40:	bd80      	pop	{r7, pc}

08026a42 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8026a42:	b580      	push	{r7, lr}
 8026a44:	b084      	sub	sp, #16
 8026a46:	af00      	add	r7, sp, #0
 8026a48:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8026a4a:	f001 fa03 	bl	8027e54 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8026a4e:	687b      	ldr	r3, [r7, #4]
 8026a50:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8026a54:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8026a56:	e011      	b.n	8026a7c <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8026a58:	687b      	ldr	r3, [r7, #4]
 8026a5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8026a5c:	2b00      	cmp	r3, #0
 8026a5e:	d012      	beq.n	8026a86 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8026a60:	687b      	ldr	r3, [r7, #4]
 8026a62:	3324      	adds	r3, #36	; 0x24
 8026a64:	4618      	mov	r0, r3
 8026a66:	f000 fce9 	bl	802743c <xTaskRemoveFromEventList>
 8026a6a:	4603      	mov	r3, r0
 8026a6c:	2b00      	cmp	r3, #0
 8026a6e:	d001      	beq.n	8026a74 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8026a70:	f000 fdbe 	bl	80275f0 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8026a74:	7bfb      	ldrb	r3, [r7, #15]
 8026a76:	3b01      	subs	r3, #1
 8026a78:	b2db      	uxtb	r3, r3
 8026a7a:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8026a7c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8026a80:	2b00      	cmp	r3, #0
 8026a82:	dce9      	bgt.n	8026a58 <prvUnlockQueue+0x16>
 8026a84:	e000      	b.n	8026a88 <prvUnlockQueue+0x46>
					break;
 8026a86:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8026a88:	687b      	ldr	r3, [r7, #4]
 8026a8a:	22ff      	movs	r2, #255	; 0xff
 8026a8c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8026a90:	f001 fa10 	bl	8027eb4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8026a94:	f001 f9de 	bl	8027e54 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8026a98:	687b      	ldr	r3, [r7, #4]
 8026a9a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8026a9e:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8026aa0:	e011      	b.n	8026ac6 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8026aa2:	687b      	ldr	r3, [r7, #4]
 8026aa4:	691b      	ldr	r3, [r3, #16]
 8026aa6:	2b00      	cmp	r3, #0
 8026aa8:	d012      	beq.n	8026ad0 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8026aaa:	687b      	ldr	r3, [r7, #4]
 8026aac:	3310      	adds	r3, #16
 8026aae:	4618      	mov	r0, r3
 8026ab0:	f000 fcc4 	bl	802743c <xTaskRemoveFromEventList>
 8026ab4:	4603      	mov	r3, r0
 8026ab6:	2b00      	cmp	r3, #0
 8026ab8:	d001      	beq.n	8026abe <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8026aba:	f000 fd99 	bl	80275f0 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8026abe:	7bbb      	ldrb	r3, [r7, #14]
 8026ac0:	3b01      	subs	r3, #1
 8026ac2:	b2db      	uxtb	r3, r3
 8026ac4:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8026ac6:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8026aca:	2b00      	cmp	r3, #0
 8026acc:	dce9      	bgt.n	8026aa2 <prvUnlockQueue+0x60>
 8026ace:	e000      	b.n	8026ad2 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8026ad0:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8026ad2:	687b      	ldr	r3, [r7, #4]
 8026ad4:	22ff      	movs	r2, #255	; 0xff
 8026ad6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8026ada:	f001 f9eb 	bl	8027eb4 <vPortExitCritical>
}
 8026ade:	bf00      	nop
 8026ae0:	3710      	adds	r7, #16
 8026ae2:	46bd      	mov	sp, r7
 8026ae4:	bd80      	pop	{r7, pc}

08026ae6 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8026ae6:	b580      	push	{r7, lr}
 8026ae8:	b084      	sub	sp, #16
 8026aea:	af00      	add	r7, sp, #0
 8026aec:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8026aee:	f001 f9b1 	bl	8027e54 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8026af2:	687b      	ldr	r3, [r7, #4]
 8026af4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8026af6:	2b00      	cmp	r3, #0
 8026af8:	d102      	bne.n	8026b00 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8026afa:	2301      	movs	r3, #1
 8026afc:	60fb      	str	r3, [r7, #12]
 8026afe:	e001      	b.n	8026b04 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8026b00:	2300      	movs	r3, #0
 8026b02:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8026b04:	f001 f9d6 	bl	8027eb4 <vPortExitCritical>

	return xReturn;
 8026b08:	68fb      	ldr	r3, [r7, #12]
}
 8026b0a:	4618      	mov	r0, r3
 8026b0c:	3710      	adds	r7, #16
 8026b0e:	46bd      	mov	sp, r7
 8026b10:	bd80      	pop	{r7, pc}

08026b12 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8026b12:	b580      	push	{r7, lr}
 8026b14:	b084      	sub	sp, #16
 8026b16:	af00      	add	r7, sp, #0
 8026b18:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8026b1a:	f001 f99b 	bl	8027e54 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8026b1e:	687b      	ldr	r3, [r7, #4]
 8026b20:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8026b22:	687b      	ldr	r3, [r7, #4]
 8026b24:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8026b26:	429a      	cmp	r2, r3
 8026b28:	d102      	bne.n	8026b30 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8026b2a:	2301      	movs	r3, #1
 8026b2c:	60fb      	str	r3, [r7, #12]
 8026b2e:	e001      	b.n	8026b34 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8026b30:	2300      	movs	r3, #0
 8026b32:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8026b34:	f001 f9be 	bl	8027eb4 <vPortExitCritical>

	return xReturn;
 8026b38:	68fb      	ldr	r3, [r7, #12]
}
 8026b3a:	4618      	mov	r0, r3
 8026b3c:	3710      	adds	r7, #16
 8026b3e:	46bd      	mov	sp, r7
 8026b40:	bd80      	pop	{r7, pc}
	...

08026b44 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 8026b44:	b480      	push	{r7}
 8026b46:	b085      	sub	sp, #20
 8026b48:	af00      	add	r7, sp, #0
 8026b4a:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8026b4c:	2300      	movs	r3, #0
 8026b4e:	60fb      	str	r3, [r7, #12]
 8026b50:	e016      	b.n	8026b80 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 8026b52:	4a10      	ldr	r2, [pc, #64]	; (8026b94 <vQueueUnregisterQueue+0x50>)
 8026b54:	68fb      	ldr	r3, [r7, #12]
 8026b56:	00db      	lsls	r3, r3, #3
 8026b58:	4413      	add	r3, r2
 8026b5a:	685b      	ldr	r3, [r3, #4]
 8026b5c:	687a      	ldr	r2, [r7, #4]
 8026b5e:	429a      	cmp	r2, r3
 8026b60:	d10b      	bne.n	8026b7a <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 8026b62:	4a0c      	ldr	r2, [pc, #48]	; (8026b94 <vQueueUnregisterQueue+0x50>)
 8026b64:	68fb      	ldr	r3, [r7, #12]
 8026b66:	2100      	movs	r1, #0
 8026b68:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 8026b6c:	4a09      	ldr	r2, [pc, #36]	; (8026b94 <vQueueUnregisterQueue+0x50>)
 8026b6e:	68fb      	ldr	r3, [r7, #12]
 8026b70:	00db      	lsls	r3, r3, #3
 8026b72:	4413      	add	r3, r2
 8026b74:	2200      	movs	r2, #0
 8026b76:	605a      	str	r2, [r3, #4]
				break;
 8026b78:	e006      	b.n	8026b88 <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8026b7a:	68fb      	ldr	r3, [r7, #12]
 8026b7c:	3301      	adds	r3, #1
 8026b7e:	60fb      	str	r3, [r7, #12]
 8026b80:	68fb      	ldr	r3, [r7, #12]
 8026b82:	2b07      	cmp	r3, #7
 8026b84:	d9e5      	bls.n	8026b52 <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 8026b86:	bf00      	nop
 8026b88:	bf00      	nop
 8026b8a:	3714      	adds	r7, #20
 8026b8c:	46bd      	mov	sp, r7
 8026b8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8026b92:	4770      	bx	lr
 8026b94:	20005044 	.word	0x20005044

08026b98 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8026b98:	b580      	push	{r7, lr}
 8026b9a:	b08e      	sub	sp, #56	; 0x38
 8026b9c:	af04      	add	r7, sp, #16
 8026b9e:	60f8      	str	r0, [r7, #12]
 8026ba0:	60b9      	str	r1, [r7, #8]
 8026ba2:	607a      	str	r2, [r7, #4]
 8026ba4:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8026ba6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8026ba8:	2b00      	cmp	r3, #0
 8026baa:	d10a      	bne.n	8026bc2 <xTaskCreateStatic+0x2a>
	__asm volatile
 8026bac:	f04f 0350 	mov.w	r3, #80	; 0x50
 8026bb0:	f383 8811 	msr	BASEPRI, r3
 8026bb4:	f3bf 8f6f 	isb	sy
 8026bb8:	f3bf 8f4f 	dsb	sy
 8026bbc:	623b      	str	r3, [r7, #32]
}
 8026bbe:	bf00      	nop
 8026bc0:	e7fe      	b.n	8026bc0 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8026bc2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8026bc4:	2b00      	cmp	r3, #0
 8026bc6:	d10a      	bne.n	8026bde <xTaskCreateStatic+0x46>
	__asm volatile
 8026bc8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8026bcc:	f383 8811 	msr	BASEPRI, r3
 8026bd0:	f3bf 8f6f 	isb	sy
 8026bd4:	f3bf 8f4f 	dsb	sy
 8026bd8:	61fb      	str	r3, [r7, #28]
}
 8026bda:	bf00      	nop
 8026bdc:	e7fe      	b.n	8026bdc <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8026bde:	23b4      	movs	r3, #180	; 0xb4
 8026be0:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8026be2:	693b      	ldr	r3, [r7, #16]
 8026be4:	2bb4      	cmp	r3, #180	; 0xb4
 8026be6:	d00a      	beq.n	8026bfe <xTaskCreateStatic+0x66>
	__asm volatile
 8026be8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8026bec:	f383 8811 	msr	BASEPRI, r3
 8026bf0:	f3bf 8f6f 	isb	sy
 8026bf4:	f3bf 8f4f 	dsb	sy
 8026bf8:	61bb      	str	r3, [r7, #24]
}
 8026bfa:	bf00      	nop
 8026bfc:	e7fe      	b.n	8026bfc <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8026bfe:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8026c00:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8026c02:	2b00      	cmp	r3, #0
 8026c04:	d01e      	beq.n	8026c44 <xTaskCreateStatic+0xac>
 8026c06:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8026c08:	2b00      	cmp	r3, #0
 8026c0a:	d01b      	beq.n	8026c44 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8026c0c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8026c0e:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8026c10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8026c12:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8026c14:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8026c16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8026c18:	2202      	movs	r2, #2
 8026c1a:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8026c1e:	2300      	movs	r3, #0
 8026c20:	9303      	str	r3, [sp, #12]
 8026c22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8026c24:	9302      	str	r3, [sp, #8]
 8026c26:	f107 0314 	add.w	r3, r7, #20
 8026c2a:	9301      	str	r3, [sp, #4]
 8026c2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8026c2e:	9300      	str	r3, [sp, #0]
 8026c30:	683b      	ldr	r3, [r7, #0]
 8026c32:	687a      	ldr	r2, [r7, #4]
 8026c34:	68b9      	ldr	r1, [r7, #8]
 8026c36:	68f8      	ldr	r0, [r7, #12]
 8026c38:	f000 f850 	bl	8026cdc <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8026c3c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8026c3e:	f000 f8eb 	bl	8026e18 <prvAddNewTaskToReadyList>
 8026c42:	e001      	b.n	8026c48 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8026c44:	2300      	movs	r3, #0
 8026c46:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8026c48:	697b      	ldr	r3, [r7, #20]
	}
 8026c4a:	4618      	mov	r0, r3
 8026c4c:	3728      	adds	r7, #40	; 0x28
 8026c4e:	46bd      	mov	sp, r7
 8026c50:	bd80      	pop	{r7, pc}

08026c52 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8026c52:	b580      	push	{r7, lr}
 8026c54:	b08c      	sub	sp, #48	; 0x30
 8026c56:	af04      	add	r7, sp, #16
 8026c58:	60f8      	str	r0, [r7, #12]
 8026c5a:	60b9      	str	r1, [r7, #8]
 8026c5c:	603b      	str	r3, [r7, #0]
 8026c5e:	4613      	mov	r3, r2
 8026c60:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8026c62:	88fb      	ldrh	r3, [r7, #6]
 8026c64:	009b      	lsls	r3, r3, #2
 8026c66:	4618      	mov	r0, r3
 8026c68:	f001 fa16 	bl	8028098 <pvPortMalloc>
 8026c6c:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8026c6e:	697b      	ldr	r3, [r7, #20]
 8026c70:	2b00      	cmp	r3, #0
 8026c72:	d00e      	beq.n	8026c92 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8026c74:	20b4      	movs	r0, #180	; 0xb4
 8026c76:	f001 fa0f 	bl	8028098 <pvPortMalloc>
 8026c7a:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8026c7c:	69fb      	ldr	r3, [r7, #28]
 8026c7e:	2b00      	cmp	r3, #0
 8026c80:	d003      	beq.n	8026c8a <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8026c82:	69fb      	ldr	r3, [r7, #28]
 8026c84:	697a      	ldr	r2, [r7, #20]
 8026c86:	631a      	str	r2, [r3, #48]	; 0x30
 8026c88:	e005      	b.n	8026c96 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8026c8a:	6978      	ldr	r0, [r7, #20]
 8026c8c:	f001 fad0 	bl	8028230 <vPortFree>
 8026c90:	e001      	b.n	8026c96 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8026c92:	2300      	movs	r3, #0
 8026c94:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8026c96:	69fb      	ldr	r3, [r7, #28]
 8026c98:	2b00      	cmp	r3, #0
 8026c9a:	d017      	beq.n	8026ccc <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8026c9c:	69fb      	ldr	r3, [r7, #28]
 8026c9e:	2200      	movs	r2, #0
 8026ca0:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8026ca4:	88fa      	ldrh	r2, [r7, #6]
 8026ca6:	2300      	movs	r3, #0
 8026ca8:	9303      	str	r3, [sp, #12]
 8026caa:	69fb      	ldr	r3, [r7, #28]
 8026cac:	9302      	str	r3, [sp, #8]
 8026cae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8026cb0:	9301      	str	r3, [sp, #4]
 8026cb2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8026cb4:	9300      	str	r3, [sp, #0]
 8026cb6:	683b      	ldr	r3, [r7, #0]
 8026cb8:	68b9      	ldr	r1, [r7, #8]
 8026cba:	68f8      	ldr	r0, [r7, #12]
 8026cbc:	f000 f80e 	bl	8026cdc <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8026cc0:	69f8      	ldr	r0, [r7, #28]
 8026cc2:	f000 f8a9 	bl	8026e18 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8026cc6:	2301      	movs	r3, #1
 8026cc8:	61bb      	str	r3, [r7, #24]
 8026cca:	e002      	b.n	8026cd2 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8026ccc:	f04f 33ff 	mov.w	r3, #4294967295
 8026cd0:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8026cd2:	69bb      	ldr	r3, [r7, #24]
	}
 8026cd4:	4618      	mov	r0, r3
 8026cd6:	3720      	adds	r7, #32
 8026cd8:	46bd      	mov	sp, r7
 8026cda:	bd80      	pop	{r7, pc}

08026cdc <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8026cdc:	b580      	push	{r7, lr}
 8026cde:	b088      	sub	sp, #32
 8026ce0:	af00      	add	r7, sp, #0
 8026ce2:	60f8      	str	r0, [r7, #12]
 8026ce4:	60b9      	str	r1, [r7, #8]
 8026ce6:	607a      	str	r2, [r7, #4]
 8026ce8:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8026cea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8026cec:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8026cee:	687b      	ldr	r3, [r7, #4]
 8026cf0:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8026cf4:	3b01      	subs	r3, #1
 8026cf6:	009b      	lsls	r3, r3, #2
 8026cf8:	4413      	add	r3, r2
 8026cfa:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8026cfc:	69bb      	ldr	r3, [r7, #24]
 8026cfe:	f023 0307 	bic.w	r3, r3, #7
 8026d02:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8026d04:	69bb      	ldr	r3, [r7, #24]
 8026d06:	f003 0307 	and.w	r3, r3, #7
 8026d0a:	2b00      	cmp	r3, #0
 8026d0c:	d00a      	beq.n	8026d24 <prvInitialiseNewTask+0x48>
	__asm volatile
 8026d0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8026d12:	f383 8811 	msr	BASEPRI, r3
 8026d16:	f3bf 8f6f 	isb	sy
 8026d1a:	f3bf 8f4f 	dsb	sy
 8026d1e:	617b      	str	r3, [r7, #20]
}
 8026d20:	bf00      	nop
 8026d22:	e7fe      	b.n	8026d22 <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8026d24:	68bb      	ldr	r3, [r7, #8]
 8026d26:	2b00      	cmp	r3, #0
 8026d28:	d01f      	beq.n	8026d6a <prvInitialiseNewTask+0x8e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8026d2a:	2300      	movs	r3, #0
 8026d2c:	61fb      	str	r3, [r7, #28]
 8026d2e:	e012      	b.n	8026d56 <prvInitialiseNewTask+0x7a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8026d30:	68ba      	ldr	r2, [r7, #8]
 8026d32:	69fb      	ldr	r3, [r7, #28]
 8026d34:	4413      	add	r3, r2
 8026d36:	7819      	ldrb	r1, [r3, #0]
 8026d38:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8026d3a:	69fb      	ldr	r3, [r7, #28]
 8026d3c:	4413      	add	r3, r2
 8026d3e:	3334      	adds	r3, #52	; 0x34
 8026d40:	460a      	mov	r2, r1
 8026d42:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8026d44:	68ba      	ldr	r2, [r7, #8]
 8026d46:	69fb      	ldr	r3, [r7, #28]
 8026d48:	4413      	add	r3, r2
 8026d4a:	781b      	ldrb	r3, [r3, #0]
 8026d4c:	2b00      	cmp	r3, #0
 8026d4e:	d006      	beq.n	8026d5e <prvInitialiseNewTask+0x82>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8026d50:	69fb      	ldr	r3, [r7, #28]
 8026d52:	3301      	adds	r3, #1
 8026d54:	61fb      	str	r3, [r7, #28]
 8026d56:	69fb      	ldr	r3, [r7, #28]
 8026d58:	2b0f      	cmp	r3, #15
 8026d5a:	d9e9      	bls.n	8026d30 <prvInitialiseNewTask+0x54>
 8026d5c:	e000      	b.n	8026d60 <prvInitialiseNewTask+0x84>
			{
				break;
 8026d5e:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8026d60:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8026d62:	2200      	movs	r2, #0
 8026d64:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8026d68:	e003      	b.n	8026d72 <prvInitialiseNewTask+0x96>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8026d6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8026d6c:	2200      	movs	r2, #0
 8026d6e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8026d72:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8026d74:	2b0f      	cmp	r3, #15
 8026d76:	d901      	bls.n	8026d7c <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8026d78:	230f      	movs	r3, #15
 8026d7a:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8026d7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8026d7e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8026d80:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8026d82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8026d84:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8026d86:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8026d88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8026d8a:	2200      	movs	r2, #0
 8026d8c:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8026d8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8026d90:	3304      	adds	r3, #4
 8026d92:	4618      	mov	r0, r3
 8026d94:	f7fe fe37 	bl	8025a06 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8026d98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8026d9a:	3318      	adds	r3, #24
 8026d9c:	4618      	mov	r0, r3
 8026d9e:	f7fe fe32 	bl	8025a06 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8026da2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8026da4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8026da6:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8026da8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8026daa:	f1c3 0210 	rsb	r2, r3, #16
 8026dae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8026db0:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8026db2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8026db4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8026db6:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8026db8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8026dba:	2200      	movs	r2, #0
 8026dbc:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8026dc0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8026dc2:	2200      	movs	r2, #0
 8026dc4:	f883 20b0 	strb.w	r2, [r3, #176]	; 0xb0
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8026dc8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8026dca:	334c      	adds	r3, #76	; 0x4c
 8026dcc:	2260      	movs	r2, #96	; 0x60
 8026dce:	2100      	movs	r1, #0
 8026dd0:	4618      	mov	r0, r3
 8026dd2:	f011 fd5d 	bl	8038890 <memset>
 8026dd6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8026dd8:	4a0c      	ldr	r2, [pc, #48]	; (8026e0c <prvInitialiseNewTask+0x130>)
 8026dda:	651a      	str	r2, [r3, #80]	; 0x50
 8026ddc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8026dde:	4a0c      	ldr	r2, [pc, #48]	; (8026e10 <prvInitialiseNewTask+0x134>)
 8026de0:	655a      	str	r2, [r3, #84]	; 0x54
 8026de2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8026de4:	4a0b      	ldr	r2, [pc, #44]	; (8026e14 <prvInitialiseNewTask+0x138>)
 8026de6:	659a      	str	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8026de8:	683a      	ldr	r2, [r7, #0]
 8026dea:	68f9      	ldr	r1, [r7, #12]
 8026dec:	69b8      	ldr	r0, [r7, #24]
 8026dee:	f000 ff07 	bl	8027c00 <pxPortInitialiseStack>
 8026df2:	4602      	mov	r2, r0
 8026df4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8026df6:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8026df8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8026dfa:	2b00      	cmp	r3, #0
 8026dfc:	d002      	beq.n	8026e04 <prvInitialiseNewTask+0x128>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8026dfe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8026e00:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8026e02:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8026e04:	bf00      	nop
 8026e06:	3720      	adds	r7, #32
 8026e08:	46bd      	mov	sp, r7
 8026e0a:	bd80      	pop	{r7, pc}
 8026e0c:	0803d6a4 	.word	0x0803d6a4
 8026e10:	0803d6c4 	.word	0x0803d6c4
 8026e14:	0803d684 	.word	0x0803d684

08026e18 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8026e18:	b580      	push	{r7, lr}
 8026e1a:	b082      	sub	sp, #8
 8026e1c:	af00      	add	r7, sp, #0
 8026e1e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8026e20:	f001 f818 	bl	8027e54 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8026e24:	4b2a      	ldr	r3, [pc, #168]	; (8026ed0 <prvAddNewTaskToReadyList+0xb8>)
 8026e26:	681b      	ldr	r3, [r3, #0]
 8026e28:	3301      	adds	r3, #1
 8026e2a:	4a29      	ldr	r2, [pc, #164]	; (8026ed0 <prvAddNewTaskToReadyList+0xb8>)
 8026e2c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8026e2e:	4b29      	ldr	r3, [pc, #164]	; (8026ed4 <prvAddNewTaskToReadyList+0xbc>)
 8026e30:	681b      	ldr	r3, [r3, #0]
 8026e32:	2b00      	cmp	r3, #0
 8026e34:	d109      	bne.n	8026e4a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8026e36:	4a27      	ldr	r2, [pc, #156]	; (8026ed4 <prvAddNewTaskToReadyList+0xbc>)
 8026e38:	687b      	ldr	r3, [r7, #4]
 8026e3a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8026e3c:	4b24      	ldr	r3, [pc, #144]	; (8026ed0 <prvAddNewTaskToReadyList+0xb8>)
 8026e3e:	681b      	ldr	r3, [r3, #0]
 8026e40:	2b01      	cmp	r3, #1
 8026e42:	d110      	bne.n	8026e66 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8026e44:	f000 fbf8 	bl	8027638 <prvInitialiseTaskLists>
 8026e48:	e00d      	b.n	8026e66 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8026e4a:	4b23      	ldr	r3, [pc, #140]	; (8026ed8 <prvAddNewTaskToReadyList+0xc0>)
 8026e4c:	681b      	ldr	r3, [r3, #0]
 8026e4e:	2b00      	cmp	r3, #0
 8026e50:	d109      	bne.n	8026e66 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8026e52:	4b20      	ldr	r3, [pc, #128]	; (8026ed4 <prvAddNewTaskToReadyList+0xbc>)
 8026e54:	681b      	ldr	r3, [r3, #0]
 8026e56:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8026e58:	687b      	ldr	r3, [r7, #4]
 8026e5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8026e5c:	429a      	cmp	r2, r3
 8026e5e:	d802      	bhi.n	8026e66 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8026e60:	4a1c      	ldr	r2, [pc, #112]	; (8026ed4 <prvAddNewTaskToReadyList+0xbc>)
 8026e62:	687b      	ldr	r3, [r7, #4]
 8026e64:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8026e66:	4b1d      	ldr	r3, [pc, #116]	; (8026edc <prvAddNewTaskToReadyList+0xc4>)
 8026e68:	681b      	ldr	r3, [r3, #0]
 8026e6a:	3301      	adds	r3, #1
 8026e6c:	4a1b      	ldr	r2, [pc, #108]	; (8026edc <prvAddNewTaskToReadyList+0xc4>)
 8026e6e:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8026e70:	687b      	ldr	r3, [r7, #4]
 8026e72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8026e74:	2201      	movs	r2, #1
 8026e76:	409a      	lsls	r2, r3
 8026e78:	4b19      	ldr	r3, [pc, #100]	; (8026ee0 <prvAddNewTaskToReadyList+0xc8>)
 8026e7a:	681b      	ldr	r3, [r3, #0]
 8026e7c:	4313      	orrs	r3, r2
 8026e7e:	4a18      	ldr	r2, [pc, #96]	; (8026ee0 <prvAddNewTaskToReadyList+0xc8>)
 8026e80:	6013      	str	r3, [r2, #0]
 8026e82:	687b      	ldr	r3, [r7, #4]
 8026e84:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8026e86:	4613      	mov	r3, r2
 8026e88:	009b      	lsls	r3, r3, #2
 8026e8a:	4413      	add	r3, r2
 8026e8c:	009b      	lsls	r3, r3, #2
 8026e8e:	4a15      	ldr	r2, [pc, #84]	; (8026ee4 <prvAddNewTaskToReadyList+0xcc>)
 8026e90:	441a      	add	r2, r3
 8026e92:	687b      	ldr	r3, [r7, #4]
 8026e94:	3304      	adds	r3, #4
 8026e96:	4619      	mov	r1, r3
 8026e98:	4610      	mov	r0, r2
 8026e9a:	f7fe fdc1 	bl	8025a20 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8026e9e:	f001 f809 	bl	8027eb4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8026ea2:	4b0d      	ldr	r3, [pc, #52]	; (8026ed8 <prvAddNewTaskToReadyList+0xc0>)
 8026ea4:	681b      	ldr	r3, [r3, #0]
 8026ea6:	2b00      	cmp	r3, #0
 8026ea8:	d00e      	beq.n	8026ec8 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8026eaa:	4b0a      	ldr	r3, [pc, #40]	; (8026ed4 <prvAddNewTaskToReadyList+0xbc>)
 8026eac:	681b      	ldr	r3, [r3, #0]
 8026eae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8026eb0:	687b      	ldr	r3, [r7, #4]
 8026eb2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8026eb4:	429a      	cmp	r2, r3
 8026eb6:	d207      	bcs.n	8026ec8 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8026eb8:	4b0b      	ldr	r3, [pc, #44]	; (8026ee8 <prvAddNewTaskToReadyList+0xd0>)
 8026eba:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8026ebe:	601a      	str	r2, [r3, #0]
 8026ec0:	f3bf 8f4f 	dsb	sy
 8026ec4:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8026ec8:	bf00      	nop
 8026eca:	3708      	adds	r7, #8
 8026ecc:	46bd      	mov	sp, r7
 8026ece:	bd80      	pop	{r7, pc}
 8026ed0:	20005238 	.word	0x20005238
 8026ed4:	20005084 	.word	0x20005084
 8026ed8:	20005244 	.word	0x20005244
 8026edc:	20005254 	.word	0x20005254
 8026ee0:	20005240 	.word	0x20005240
 8026ee4:	20005088 	.word	0x20005088
 8026ee8:	e000ed04 	.word	0xe000ed04

08026eec <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8026eec:	b580      	push	{r7, lr}
 8026eee:	b084      	sub	sp, #16
 8026ef0:	af00      	add	r7, sp, #0
 8026ef2:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8026ef4:	2300      	movs	r3, #0
 8026ef6:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8026ef8:	687b      	ldr	r3, [r7, #4]
 8026efa:	2b00      	cmp	r3, #0
 8026efc:	d017      	beq.n	8026f2e <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8026efe:	4b13      	ldr	r3, [pc, #76]	; (8026f4c <vTaskDelay+0x60>)
 8026f00:	681b      	ldr	r3, [r3, #0]
 8026f02:	2b00      	cmp	r3, #0
 8026f04:	d00a      	beq.n	8026f1c <vTaskDelay+0x30>
	__asm volatile
 8026f06:	f04f 0350 	mov.w	r3, #80	; 0x50
 8026f0a:	f383 8811 	msr	BASEPRI, r3
 8026f0e:	f3bf 8f6f 	isb	sy
 8026f12:	f3bf 8f4f 	dsb	sy
 8026f16:	60bb      	str	r3, [r7, #8]
}
 8026f18:	bf00      	nop
 8026f1a:	e7fe      	b.n	8026f1a <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8026f1c:	f000 f884 	bl	8027028 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8026f20:	2100      	movs	r1, #0
 8026f22:	6878      	ldr	r0, [r7, #4]
 8026f24:	f000 fe06 	bl	8027b34 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8026f28:	f000 f88c 	bl	8027044 <xTaskResumeAll>
 8026f2c:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8026f2e:	68fb      	ldr	r3, [r7, #12]
 8026f30:	2b00      	cmp	r3, #0
 8026f32:	d107      	bne.n	8026f44 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8026f34:	4b06      	ldr	r3, [pc, #24]	; (8026f50 <vTaskDelay+0x64>)
 8026f36:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8026f3a:	601a      	str	r2, [r3, #0]
 8026f3c:	f3bf 8f4f 	dsb	sy
 8026f40:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8026f44:	bf00      	nop
 8026f46:	3710      	adds	r7, #16
 8026f48:	46bd      	mov	sp, r7
 8026f4a:	bd80      	pop	{r7, pc}
 8026f4c:	20005260 	.word	0x20005260
 8026f50:	e000ed04 	.word	0xe000ed04

08026f54 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8026f54:	b580      	push	{r7, lr}
 8026f56:	b08a      	sub	sp, #40	; 0x28
 8026f58:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8026f5a:	2300      	movs	r3, #0
 8026f5c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8026f5e:	2300      	movs	r3, #0
 8026f60:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8026f62:	463a      	mov	r2, r7
 8026f64:	1d39      	adds	r1, r7, #4
 8026f66:	f107 0308 	add.w	r3, r7, #8
 8026f6a:	4618      	mov	r0, r3
 8026f6c:	f7f9 fb0a 	bl	8020584 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8026f70:	6839      	ldr	r1, [r7, #0]
 8026f72:	687b      	ldr	r3, [r7, #4]
 8026f74:	68ba      	ldr	r2, [r7, #8]
 8026f76:	9202      	str	r2, [sp, #8]
 8026f78:	9301      	str	r3, [sp, #4]
 8026f7a:	2300      	movs	r3, #0
 8026f7c:	9300      	str	r3, [sp, #0]
 8026f7e:	2300      	movs	r3, #0
 8026f80:	460a      	mov	r2, r1
 8026f82:	4921      	ldr	r1, [pc, #132]	; (8027008 <vTaskStartScheduler+0xb4>)
 8026f84:	4821      	ldr	r0, [pc, #132]	; (802700c <vTaskStartScheduler+0xb8>)
 8026f86:	f7ff fe07 	bl	8026b98 <xTaskCreateStatic>
 8026f8a:	4603      	mov	r3, r0
 8026f8c:	4a20      	ldr	r2, [pc, #128]	; (8027010 <vTaskStartScheduler+0xbc>)
 8026f8e:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8026f90:	4b1f      	ldr	r3, [pc, #124]	; (8027010 <vTaskStartScheduler+0xbc>)
 8026f92:	681b      	ldr	r3, [r3, #0]
 8026f94:	2b00      	cmp	r3, #0
 8026f96:	d002      	beq.n	8026f9e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8026f98:	2301      	movs	r3, #1
 8026f9a:	617b      	str	r3, [r7, #20]
 8026f9c:	e001      	b.n	8026fa2 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8026f9e:	2300      	movs	r3, #0
 8026fa0:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8026fa2:	697b      	ldr	r3, [r7, #20]
 8026fa4:	2b01      	cmp	r3, #1
 8026fa6:	d11b      	bne.n	8026fe0 <vTaskStartScheduler+0x8c>
	__asm volatile
 8026fa8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8026fac:	f383 8811 	msr	BASEPRI, r3
 8026fb0:	f3bf 8f6f 	isb	sy
 8026fb4:	f3bf 8f4f 	dsb	sy
 8026fb8:	613b      	str	r3, [r7, #16]
}
 8026fba:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8026fbc:	4b15      	ldr	r3, [pc, #84]	; (8027014 <vTaskStartScheduler+0xc0>)
 8026fbe:	681b      	ldr	r3, [r3, #0]
 8026fc0:	334c      	adds	r3, #76	; 0x4c
 8026fc2:	4a15      	ldr	r2, [pc, #84]	; (8027018 <vTaskStartScheduler+0xc4>)
 8026fc4:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8026fc6:	4b15      	ldr	r3, [pc, #84]	; (802701c <vTaskStartScheduler+0xc8>)
 8026fc8:	f04f 32ff 	mov.w	r2, #4294967295
 8026fcc:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8026fce:	4b14      	ldr	r3, [pc, #80]	; (8027020 <vTaskStartScheduler+0xcc>)
 8026fd0:	2201      	movs	r2, #1
 8026fd2:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8026fd4:	4b13      	ldr	r3, [pc, #76]	; (8027024 <vTaskStartScheduler+0xd0>)
 8026fd6:	2200      	movs	r2, #0
 8026fd8:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8026fda:	f000 fe99 	bl	8027d10 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8026fde:	e00e      	b.n	8026ffe <vTaskStartScheduler+0xaa>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8026fe0:	697b      	ldr	r3, [r7, #20]
 8026fe2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8026fe6:	d10a      	bne.n	8026ffe <vTaskStartScheduler+0xaa>
	__asm volatile
 8026fe8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8026fec:	f383 8811 	msr	BASEPRI, r3
 8026ff0:	f3bf 8f6f 	isb	sy
 8026ff4:	f3bf 8f4f 	dsb	sy
 8026ff8:	60fb      	str	r3, [r7, #12]
}
 8026ffa:	bf00      	nop
 8026ffc:	e7fe      	b.n	8026ffc <vTaskStartScheduler+0xa8>
}
 8026ffe:	bf00      	nop
 8027000:	3718      	adds	r7, #24
 8027002:	46bd      	mov	sp, r7
 8027004:	bd80      	pop	{r7, pc}
 8027006:	bf00      	nop
 8027008:	08039bac 	.word	0x08039bac
 802700c:	08027609 	.word	0x08027609
 8027010:	2000525c 	.word	0x2000525c
 8027014:	20005084 	.word	0x20005084
 8027018:	20000034 	.word	0x20000034
 802701c:	20005258 	.word	0x20005258
 8027020:	20005244 	.word	0x20005244
 8027024:	2000523c 	.word	0x2000523c

08027028 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8027028:	b480      	push	{r7}
 802702a:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 802702c:	4b04      	ldr	r3, [pc, #16]	; (8027040 <vTaskSuspendAll+0x18>)
 802702e:	681b      	ldr	r3, [r3, #0]
 8027030:	3301      	adds	r3, #1
 8027032:	4a03      	ldr	r2, [pc, #12]	; (8027040 <vTaskSuspendAll+0x18>)
 8027034:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8027036:	bf00      	nop
 8027038:	46bd      	mov	sp, r7
 802703a:	f85d 7b04 	ldr.w	r7, [sp], #4
 802703e:	4770      	bx	lr
 8027040:	20005260 	.word	0x20005260

08027044 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8027044:	b580      	push	{r7, lr}
 8027046:	b084      	sub	sp, #16
 8027048:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 802704a:	2300      	movs	r3, #0
 802704c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 802704e:	2300      	movs	r3, #0
 8027050:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8027052:	4b41      	ldr	r3, [pc, #260]	; (8027158 <xTaskResumeAll+0x114>)
 8027054:	681b      	ldr	r3, [r3, #0]
 8027056:	2b00      	cmp	r3, #0
 8027058:	d10a      	bne.n	8027070 <xTaskResumeAll+0x2c>
	__asm volatile
 802705a:	f04f 0350 	mov.w	r3, #80	; 0x50
 802705e:	f383 8811 	msr	BASEPRI, r3
 8027062:	f3bf 8f6f 	isb	sy
 8027066:	f3bf 8f4f 	dsb	sy
 802706a:	603b      	str	r3, [r7, #0]
}
 802706c:	bf00      	nop
 802706e:	e7fe      	b.n	802706e <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8027070:	f000 fef0 	bl	8027e54 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8027074:	4b38      	ldr	r3, [pc, #224]	; (8027158 <xTaskResumeAll+0x114>)
 8027076:	681b      	ldr	r3, [r3, #0]
 8027078:	3b01      	subs	r3, #1
 802707a:	4a37      	ldr	r2, [pc, #220]	; (8027158 <xTaskResumeAll+0x114>)
 802707c:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 802707e:	4b36      	ldr	r3, [pc, #216]	; (8027158 <xTaskResumeAll+0x114>)
 8027080:	681b      	ldr	r3, [r3, #0]
 8027082:	2b00      	cmp	r3, #0
 8027084:	d161      	bne.n	802714a <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8027086:	4b35      	ldr	r3, [pc, #212]	; (802715c <xTaskResumeAll+0x118>)
 8027088:	681b      	ldr	r3, [r3, #0]
 802708a:	2b00      	cmp	r3, #0
 802708c:	d05d      	beq.n	802714a <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 802708e:	e02e      	b.n	80270ee <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8027090:	4b33      	ldr	r3, [pc, #204]	; (8027160 <xTaskResumeAll+0x11c>)
 8027092:	68db      	ldr	r3, [r3, #12]
 8027094:	68db      	ldr	r3, [r3, #12]
 8027096:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8027098:	68fb      	ldr	r3, [r7, #12]
 802709a:	3318      	adds	r3, #24
 802709c:	4618      	mov	r0, r3
 802709e:	f7fe fd1c 	bl	8025ada <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80270a2:	68fb      	ldr	r3, [r7, #12]
 80270a4:	3304      	adds	r3, #4
 80270a6:	4618      	mov	r0, r3
 80270a8:	f7fe fd17 	bl	8025ada <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80270ac:	68fb      	ldr	r3, [r7, #12]
 80270ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80270b0:	2201      	movs	r2, #1
 80270b2:	409a      	lsls	r2, r3
 80270b4:	4b2b      	ldr	r3, [pc, #172]	; (8027164 <xTaskResumeAll+0x120>)
 80270b6:	681b      	ldr	r3, [r3, #0]
 80270b8:	4313      	orrs	r3, r2
 80270ba:	4a2a      	ldr	r2, [pc, #168]	; (8027164 <xTaskResumeAll+0x120>)
 80270bc:	6013      	str	r3, [r2, #0]
 80270be:	68fb      	ldr	r3, [r7, #12]
 80270c0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80270c2:	4613      	mov	r3, r2
 80270c4:	009b      	lsls	r3, r3, #2
 80270c6:	4413      	add	r3, r2
 80270c8:	009b      	lsls	r3, r3, #2
 80270ca:	4a27      	ldr	r2, [pc, #156]	; (8027168 <xTaskResumeAll+0x124>)
 80270cc:	441a      	add	r2, r3
 80270ce:	68fb      	ldr	r3, [r7, #12]
 80270d0:	3304      	adds	r3, #4
 80270d2:	4619      	mov	r1, r3
 80270d4:	4610      	mov	r0, r2
 80270d6:	f7fe fca3 	bl	8025a20 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80270da:	68fb      	ldr	r3, [r7, #12]
 80270dc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80270de:	4b23      	ldr	r3, [pc, #140]	; (802716c <xTaskResumeAll+0x128>)
 80270e0:	681b      	ldr	r3, [r3, #0]
 80270e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80270e4:	429a      	cmp	r2, r3
 80270e6:	d302      	bcc.n	80270ee <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 80270e8:	4b21      	ldr	r3, [pc, #132]	; (8027170 <xTaskResumeAll+0x12c>)
 80270ea:	2201      	movs	r2, #1
 80270ec:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80270ee:	4b1c      	ldr	r3, [pc, #112]	; (8027160 <xTaskResumeAll+0x11c>)
 80270f0:	681b      	ldr	r3, [r3, #0]
 80270f2:	2b00      	cmp	r3, #0
 80270f4:	d1cc      	bne.n	8027090 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80270f6:	68fb      	ldr	r3, [r7, #12]
 80270f8:	2b00      	cmp	r3, #0
 80270fa:	d001      	beq.n	8027100 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80270fc:	f000 fb3e 	bl	802777c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8027100:	4b1c      	ldr	r3, [pc, #112]	; (8027174 <xTaskResumeAll+0x130>)
 8027102:	681b      	ldr	r3, [r3, #0]
 8027104:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8027106:	687b      	ldr	r3, [r7, #4]
 8027108:	2b00      	cmp	r3, #0
 802710a:	d010      	beq.n	802712e <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 802710c:	f000 f858 	bl	80271c0 <xTaskIncrementTick>
 8027110:	4603      	mov	r3, r0
 8027112:	2b00      	cmp	r3, #0
 8027114:	d002      	beq.n	802711c <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 8027116:	4b16      	ldr	r3, [pc, #88]	; (8027170 <xTaskResumeAll+0x12c>)
 8027118:	2201      	movs	r2, #1
 802711a:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 802711c:	687b      	ldr	r3, [r7, #4]
 802711e:	3b01      	subs	r3, #1
 8027120:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8027122:	687b      	ldr	r3, [r7, #4]
 8027124:	2b00      	cmp	r3, #0
 8027126:	d1f1      	bne.n	802710c <xTaskResumeAll+0xc8>

						xPendedTicks = 0;
 8027128:	4b12      	ldr	r3, [pc, #72]	; (8027174 <xTaskResumeAll+0x130>)
 802712a:	2200      	movs	r2, #0
 802712c:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 802712e:	4b10      	ldr	r3, [pc, #64]	; (8027170 <xTaskResumeAll+0x12c>)
 8027130:	681b      	ldr	r3, [r3, #0]
 8027132:	2b00      	cmp	r3, #0
 8027134:	d009      	beq.n	802714a <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8027136:	2301      	movs	r3, #1
 8027138:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 802713a:	4b0f      	ldr	r3, [pc, #60]	; (8027178 <xTaskResumeAll+0x134>)
 802713c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8027140:	601a      	str	r2, [r3, #0]
 8027142:	f3bf 8f4f 	dsb	sy
 8027146:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 802714a:	f000 feb3 	bl	8027eb4 <vPortExitCritical>

	return xAlreadyYielded;
 802714e:	68bb      	ldr	r3, [r7, #8]
}
 8027150:	4618      	mov	r0, r3
 8027152:	3710      	adds	r7, #16
 8027154:	46bd      	mov	sp, r7
 8027156:	bd80      	pop	{r7, pc}
 8027158:	20005260 	.word	0x20005260
 802715c:	20005238 	.word	0x20005238
 8027160:	200051f8 	.word	0x200051f8
 8027164:	20005240 	.word	0x20005240
 8027168:	20005088 	.word	0x20005088
 802716c:	20005084 	.word	0x20005084
 8027170:	2000524c 	.word	0x2000524c
 8027174:	20005248 	.word	0x20005248
 8027178:	e000ed04 	.word	0xe000ed04

0802717c <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 802717c:	b480      	push	{r7}
 802717e:	b083      	sub	sp, #12
 8027180:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8027182:	4b05      	ldr	r3, [pc, #20]	; (8027198 <xTaskGetTickCount+0x1c>)
 8027184:	681b      	ldr	r3, [r3, #0]
 8027186:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8027188:	687b      	ldr	r3, [r7, #4]
}
 802718a:	4618      	mov	r0, r3
 802718c:	370c      	adds	r7, #12
 802718e:	46bd      	mov	sp, r7
 8027190:	f85d 7b04 	ldr.w	r7, [sp], #4
 8027194:	4770      	bx	lr
 8027196:	bf00      	nop
 8027198:	2000523c 	.word	0x2000523c

0802719c <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 802719c:	b580      	push	{r7, lr}
 802719e:	b082      	sub	sp, #8
 80271a0:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80271a2:	f000 ff39 	bl	8028018 <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 80271a6:	2300      	movs	r3, #0
 80271a8:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 80271aa:	4b04      	ldr	r3, [pc, #16]	; (80271bc <xTaskGetTickCountFromISR+0x20>)
 80271ac:	681b      	ldr	r3, [r3, #0]
 80271ae:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80271b0:	683b      	ldr	r3, [r7, #0]
}
 80271b2:	4618      	mov	r0, r3
 80271b4:	3708      	adds	r7, #8
 80271b6:	46bd      	mov	sp, r7
 80271b8:	bd80      	pop	{r7, pc}
 80271ba:	bf00      	nop
 80271bc:	2000523c 	.word	0x2000523c

080271c0 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80271c0:	b580      	push	{r7, lr}
 80271c2:	b086      	sub	sp, #24
 80271c4:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80271c6:	2300      	movs	r3, #0
 80271c8:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80271ca:	4b4e      	ldr	r3, [pc, #312]	; (8027304 <xTaskIncrementTick+0x144>)
 80271cc:	681b      	ldr	r3, [r3, #0]
 80271ce:	2b00      	cmp	r3, #0
 80271d0:	f040 808e 	bne.w	80272f0 <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80271d4:	4b4c      	ldr	r3, [pc, #304]	; (8027308 <xTaskIncrementTick+0x148>)
 80271d6:	681b      	ldr	r3, [r3, #0]
 80271d8:	3301      	adds	r3, #1
 80271da:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80271dc:	4a4a      	ldr	r2, [pc, #296]	; (8027308 <xTaskIncrementTick+0x148>)
 80271de:	693b      	ldr	r3, [r7, #16]
 80271e0:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80271e2:	693b      	ldr	r3, [r7, #16]
 80271e4:	2b00      	cmp	r3, #0
 80271e6:	d120      	bne.n	802722a <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 80271e8:	4b48      	ldr	r3, [pc, #288]	; (802730c <xTaskIncrementTick+0x14c>)
 80271ea:	681b      	ldr	r3, [r3, #0]
 80271ec:	681b      	ldr	r3, [r3, #0]
 80271ee:	2b00      	cmp	r3, #0
 80271f0:	d00a      	beq.n	8027208 <xTaskIncrementTick+0x48>
	__asm volatile
 80271f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80271f6:	f383 8811 	msr	BASEPRI, r3
 80271fa:	f3bf 8f6f 	isb	sy
 80271fe:	f3bf 8f4f 	dsb	sy
 8027202:	603b      	str	r3, [r7, #0]
}
 8027204:	bf00      	nop
 8027206:	e7fe      	b.n	8027206 <xTaskIncrementTick+0x46>
 8027208:	4b40      	ldr	r3, [pc, #256]	; (802730c <xTaskIncrementTick+0x14c>)
 802720a:	681b      	ldr	r3, [r3, #0]
 802720c:	60fb      	str	r3, [r7, #12]
 802720e:	4b40      	ldr	r3, [pc, #256]	; (8027310 <xTaskIncrementTick+0x150>)
 8027210:	681b      	ldr	r3, [r3, #0]
 8027212:	4a3e      	ldr	r2, [pc, #248]	; (802730c <xTaskIncrementTick+0x14c>)
 8027214:	6013      	str	r3, [r2, #0]
 8027216:	4a3e      	ldr	r2, [pc, #248]	; (8027310 <xTaskIncrementTick+0x150>)
 8027218:	68fb      	ldr	r3, [r7, #12]
 802721a:	6013      	str	r3, [r2, #0]
 802721c:	4b3d      	ldr	r3, [pc, #244]	; (8027314 <xTaskIncrementTick+0x154>)
 802721e:	681b      	ldr	r3, [r3, #0]
 8027220:	3301      	adds	r3, #1
 8027222:	4a3c      	ldr	r2, [pc, #240]	; (8027314 <xTaskIncrementTick+0x154>)
 8027224:	6013      	str	r3, [r2, #0]
 8027226:	f000 faa9 	bl	802777c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 802722a:	4b3b      	ldr	r3, [pc, #236]	; (8027318 <xTaskIncrementTick+0x158>)
 802722c:	681b      	ldr	r3, [r3, #0]
 802722e:	693a      	ldr	r2, [r7, #16]
 8027230:	429a      	cmp	r2, r3
 8027232:	d348      	bcc.n	80272c6 <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8027234:	4b35      	ldr	r3, [pc, #212]	; (802730c <xTaskIncrementTick+0x14c>)
 8027236:	681b      	ldr	r3, [r3, #0]
 8027238:	681b      	ldr	r3, [r3, #0]
 802723a:	2b00      	cmp	r3, #0
 802723c:	d104      	bne.n	8027248 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 802723e:	4b36      	ldr	r3, [pc, #216]	; (8027318 <xTaskIncrementTick+0x158>)
 8027240:	f04f 32ff 	mov.w	r2, #4294967295
 8027244:	601a      	str	r2, [r3, #0]
					break;
 8027246:	e03e      	b.n	80272c6 <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8027248:	4b30      	ldr	r3, [pc, #192]	; (802730c <xTaskIncrementTick+0x14c>)
 802724a:	681b      	ldr	r3, [r3, #0]
 802724c:	68db      	ldr	r3, [r3, #12]
 802724e:	68db      	ldr	r3, [r3, #12]
 8027250:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8027252:	68bb      	ldr	r3, [r7, #8]
 8027254:	685b      	ldr	r3, [r3, #4]
 8027256:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8027258:	693a      	ldr	r2, [r7, #16]
 802725a:	687b      	ldr	r3, [r7, #4]
 802725c:	429a      	cmp	r2, r3
 802725e:	d203      	bcs.n	8027268 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8027260:	4a2d      	ldr	r2, [pc, #180]	; (8027318 <xTaskIncrementTick+0x158>)
 8027262:	687b      	ldr	r3, [r7, #4]
 8027264:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8027266:	e02e      	b.n	80272c6 <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8027268:	68bb      	ldr	r3, [r7, #8]
 802726a:	3304      	adds	r3, #4
 802726c:	4618      	mov	r0, r3
 802726e:	f7fe fc34 	bl	8025ada <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8027272:	68bb      	ldr	r3, [r7, #8]
 8027274:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8027276:	2b00      	cmp	r3, #0
 8027278:	d004      	beq.n	8027284 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 802727a:	68bb      	ldr	r3, [r7, #8]
 802727c:	3318      	adds	r3, #24
 802727e:	4618      	mov	r0, r3
 8027280:	f7fe fc2b 	bl	8025ada <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8027284:	68bb      	ldr	r3, [r7, #8]
 8027286:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8027288:	2201      	movs	r2, #1
 802728a:	409a      	lsls	r2, r3
 802728c:	4b23      	ldr	r3, [pc, #140]	; (802731c <xTaskIncrementTick+0x15c>)
 802728e:	681b      	ldr	r3, [r3, #0]
 8027290:	4313      	orrs	r3, r2
 8027292:	4a22      	ldr	r2, [pc, #136]	; (802731c <xTaskIncrementTick+0x15c>)
 8027294:	6013      	str	r3, [r2, #0]
 8027296:	68bb      	ldr	r3, [r7, #8]
 8027298:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 802729a:	4613      	mov	r3, r2
 802729c:	009b      	lsls	r3, r3, #2
 802729e:	4413      	add	r3, r2
 80272a0:	009b      	lsls	r3, r3, #2
 80272a2:	4a1f      	ldr	r2, [pc, #124]	; (8027320 <xTaskIncrementTick+0x160>)
 80272a4:	441a      	add	r2, r3
 80272a6:	68bb      	ldr	r3, [r7, #8]
 80272a8:	3304      	adds	r3, #4
 80272aa:	4619      	mov	r1, r3
 80272ac:	4610      	mov	r0, r2
 80272ae:	f7fe fbb7 	bl	8025a20 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80272b2:	68bb      	ldr	r3, [r7, #8]
 80272b4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80272b6:	4b1b      	ldr	r3, [pc, #108]	; (8027324 <xTaskIncrementTick+0x164>)
 80272b8:	681b      	ldr	r3, [r3, #0]
 80272ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80272bc:	429a      	cmp	r2, r3
 80272be:	d3b9      	bcc.n	8027234 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 80272c0:	2301      	movs	r3, #1
 80272c2:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80272c4:	e7b6      	b.n	8027234 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80272c6:	4b17      	ldr	r3, [pc, #92]	; (8027324 <xTaskIncrementTick+0x164>)
 80272c8:	681b      	ldr	r3, [r3, #0]
 80272ca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80272cc:	4914      	ldr	r1, [pc, #80]	; (8027320 <xTaskIncrementTick+0x160>)
 80272ce:	4613      	mov	r3, r2
 80272d0:	009b      	lsls	r3, r3, #2
 80272d2:	4413      	add	r3, r2
 80272d4:	009b      	lsls	r3, r3, #2
 80272d6:	440b      	add	r3, r1
 80272d8:	681b      	ldr	r3, [r3, #0]
 80272da:	2b01      	cmp	r3, #1
 80272dc:	d901      	bls.n	80272e2 <xTaskIncrementTick+0x122>
			{
				xSwitchRequired = pdTRUE;
 80272de:	2301      	movs	r3, #1
 80272e0:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 80272e2:	4b11      	ldr	r3, [pc, #68]	; (8027328 <xTaskIncrementTick+0x168>)
 80272e4:	681b      	ldr	r3, [r3, #0]
 80272e6:	2b00      	cmp	r3, #0
 80272e8:	d007      	beq.n	80272fa <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 80272ea:	2301      	movs	r3, #1
 80272ec:	617b      	str	r3, [r7, #20]
 80272ee:	e004      	b.n	80272fa <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 80272f0:	4b0e      	ldr	r3, [pc, #56]	; (802732c <xTaskIncrementTick+0x16c>)
 80272f2:	681b      	ldr	r3, [r3, #0]
 80272f4:	3301      	adds	r3, #1
 80272f6:	4a0d      	ldr	r2, [pc, #52]	; (802732c <xTaskIncrementTick+0x16c>)
 80272f8:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 80272fa:	697b      	ldr	r3, [r7, #20]
}
 80272fc:	4618      	mov	r0, r3
 80272fe:	3718      	adds	r7, #24
 8027300:	46bd      	mov	sp, r7
 8027302:	bd80      	pop	{r7, pc}
 8027304:	20005260 	.word	0x20005260
 8027308:	2000523c 	.word	0x2000523c
 802730c:	200051f0 	.word	0x200051f0
 8027310:	200051f4 	.word	0x200051f4
 8027314:	20005250 	.word	0x20005250
 8027318:	20005258 	.word	0x20005258
 802731c:	20005240 	.word	0x20005240
 8027320:	20005088 	.word	0x20005088
 8027324:	20005084 	.word	0x20005084
 8027328:	2000524c 	.word	0x2000524c
 802732c:	20005248 	.word	0x20005248

08027330 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8027330:	b480      	push	{r7}
 8027332:	b087      	sub	sp, #28
 8027334:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8027336:	4b29      	ldr	r3, [pc, #164]	; (80273dc <vTaskSwitchContext+0xac>)
 8027338:	681b      	ldr	r3, [r3, #0]
 802733a:	2b00      	cmp	r3, #0
 802733c:	d003      	beq.n	8027346 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 802733e:	4b28      	ldr	r3, [pc, #160]	; (80273e0 <vTaskSwitchContext+0xb0>)
 8027340:	2201      	movs	r2, #1
 8027342:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8027344:	e044      	b.n	80273d0 <vTaskSwitchContext+0xa0>
		xYieldPending = pdFALSE;
 8027346:	4b26      	ldr	r3, [pc, #152]	; (80273e0 <vTaskSwitchContext+0xb0>)
 8027348:	2200      	movs	r2, #0
 802734a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 802734c:	4b25      	ldr	r3, [pc, #148]	; (80273e4 <vTaskSwitchContext+0xb4>)
 802734e:	681b      	ldr	r3, [r3, #0]
 8027350:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8027352:	68fb      	ldr	r3, [r7, #12]
 8027354:	fab3 f383 	clz	r3, r3
 8027358:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 802735a:	7afb      	ldrb	r3, [r7, #11]
 802735c:	f1c3 031f 	rsb	r3, r3, #31
 8027360:	617b      	str	r3, [r7, #20]
 8027362:	4921      	ldr	r1, [pc, #132]	; (80273e8 <vTaskSwitchContext+0xb8>)
 8027364:	697a      	ldr	r2, [r7, #20]
 8027366:	4613      	mov	r3, r2
 8027368:	009b      	lsls	r3, r3, #2
 802736a:	4413      	add	r3, r2
 802736c:	009b      	lsls	r3, r3, #2
 802736e:	440b      	add	r3, r1
 8027370:	681b      	ldr	r3, [r3, #0]
 8027372:	2b00      	cmp	r3, #0
 8027374:	d10a      	bne.n	802738c <vTaskSwitchContext+0x5c>
	__asm volatile
 8027376:	f04f 0350 	mov.w	r3, #80	; 0x50
 802737a:	f383 8811 	msr	BASEPRI, r3
 802737e:	f3bf 8f6f 	isb	sy
 8027382:	f3bf 8f4f 	dsb	sy
 8027386:	607b      	str	r3, [r7, #4]
}
 8027388:	bf00      	nop
 802738a:	e7fe      	b.n	802738a <vTaskSwitchContext+0x5a>
 802738c:	697a      	ldr	r2, [r7, #20]
 802738e:	4613      	mov	r3, r2
 8027390:	009b      	lsls	r3, r3, #2
 8027392:	4413      	add	r3, r2
 8027394:	009b      	lsls	r3, r3, #2
 8027396:	4a14      	ldr	r2, [pc, #80]	; (80273e8 <vTaskSwitchContext+0xb8>)
 8027398:	4413      	add	r3, r2
 802739a:	613b      	str	r3, [r7, #16]
 802739c:	693b      	ldr	r3, [r7, #16]
 802739e:	685b      	ldr	r3, [r3, #4]
 80273a0:	685a      	ldr	r2, [r3, #4]
 80273a2:	693b      	ldr	r3, [r7, #16]
 80273a4:	605a      	str	r2, [r3, #4]
 80273a6:	693b      	ldr	r3, [r7, #16]
 80273a8:	685a      	ldr	r2, [r3, #4]
 80273aa:	693b      	ldr	r3, [r7, #16]
 80273ac:	3308      	adds	r3, #8
 80273ae:	429a      	cmp	r2, r3
 80273b0:	d104      	bne.n	80273bc <vTaskSwitchContext+0x8c>
 80273b2:	693b      	ldr	r3, [r7, #16]
 80273b4:	685b      	ldr	r3, [r3, #4]
 80273b6:	685a      	ldr	r2, [r3, #4]
 80273b8:	693b      	ldr	r3, [r7, #16]
 80273ba:	605a      	str	r2, [r3, #4]
 80273bc:	693b      	ldr	r3, [r7, #16]
 80273be:	685b      	ldr	r3, [r3, #4]
 80273c0:	68db      	ldr	r3, [r3, #12]
 80273c2:	4a0a      	ldr	r2, [pc, #40]	; (80273ec <vTaskSwitchContext+0xbc>)
 80273c4:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80273c6:	4b09      	ldr	r3, [pc, #36]	; (80273ec <vTaskSwitchContext+0xbc>)
 80273c8:	681b      	ldr	r3, [r3, #0]
 80273ca:	334c      	adds	r3, #76	; 0x4c
 80273cc:	4a08      	ldr	r2, [pc, #32]	; (80273f0 <vTaskSwitchContext+0xc0>)
 80273ce:	6013      	str	r3, [r2, #0]
}
 80273d0:	bf00      	nop
 80273d2:	371c      	adds	r7, #28
 80273d4:	46bd      	mov	sp, r7
 80273d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80273da:	4770      	bx	lr
 80273dc:	20005260 	.word	0x20005260
 80273e0:	2000524c 	.word	0x2000524c
 80273e4:	20005240 	.word	0x20005240
 80273e8:	20005088 	.word	0x20005088
 80273ec:	20005084 	.word	0x20005084
 80273f0:	20000034 	.word	0x20000034

080273f4 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80273f4:	b580      	push	{r7, lr}
 80273f6:	b084      	sub	sp, #16
 80273f8:	af00      	add	r7, sp, #0
 80273fa:	6078      	str	r0, [r7, #4]
 80273fc:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80273fe:	687b      	ldr	r3, [r7, #4]
 8027400:	2b00      	cmp	r3, #0
 8027402:	d10a      	bne.n	802741a <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8027404:	f04f 0350 	mov.w	r3, #80	; 0x50
 8027408:	f383 8811 	msr	BASEPRI, r3
 802740c:	f3bf 8f6f 	isb	sy
 8027410:	f3bf 8f4f 	dsb	sy
 8027414:	60fb      	str	r3, [r7, #12]
}
 8027416:	bf00      	nop
 8027418:	e7fe      	b.n	8027418 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 802741a:	4b07      	ldr	r3, [pc, #28]	; (8027438 <vTaskPlaceOnEventList+0x44>)
 802741c:	681b      	ldr	r3, [r3, #0]
 802741e:	3318      	adds	r3, #24
 8027420:	4619      	mov	r1, r3
 8027422:	6878      	ldr	r0, [r7, #4]
 8027424:	f7fe fb20 	bl	8025a68 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8027428:	2101      	movs	r1, #1
 802742a:	6838      	ldr	r0, [r7, #0]
 802742c:	f000 fb82 	bl	8027b34 <prvAddCurrentTaskToDelayedList>
}
 8027430:	bf00      	nop
 8027432:	3710      	adds	r7, #16
 8027434:	46bd      	mov	sp, r7
 8027436:	bd80      	pop	{r7, pc}
 8027438:	20005084 	.word	0x20005084

0802743c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 802743c:	b580      	push	{r7, lr}
 802743e:	b086      	sub	sp, #24
 8027440:	af00      	add	r7, sp, #0
 8027442:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8027444:	687b      	ldr	r3, [r7, #4]
 8027446:	68db      	ldr	r3, [r3, #12]
 8027448:	68db      	ldr	r3, [r3, #12]
 802744a:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 802744c:	693b      	ldr	r3, [r7, #16]
 802744e:	2b00      	cmp	r3, #0
 8027450:	d10a      	bne.n	8027468 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8027452:	f04f 0350 	mov.w	r3, #80	; 0x50
 8027456:	f383 8811 	msr	BASEPRI, r3
 802745a:	f3bf 8f6f 	isb	sy
 802745e:	f3bf 8f4f 	dsb	sy
 8027462:	60fb      	str	r3, [r7, #12]
}
 8027464:	bf00      	nop
 8027466:	e7fe      	b.n	8027466 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8027468:	693b      	ldr	r3, [r7, #16]
 802746a:	3318      	adds	r3, #24
 802746c:	4618      	mov	r0, r3
 802746e:	f7fe fb34 	bl	8025ada <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8027472:	4b1d      	ldr	r3, [pc, #116]	; (80274e8 <xTaskRemoveFromEventList+0xac>)
 8027474:	681b      	ldr	r3, [r3, #0]
 8027476:	2b00      	cmp	r3, #0
 8027478:	d11c      	bne.n	80274b4 <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 802747a:	693b      	ldr	r3, [r7, #16]
 802747c:	3304      	adds	r3, #4
 802747e:	4618      	mov	r0, r3
 8027480:	f7fe fb2b 	bl	8025ada <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8027484:	693b      	ldr	r3, [r7, #16]
 8027486:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8027488:	2201      	movs	r2, #1
 802748a:	409a      	lsls	r2, r3
 802748c:	4b17      	ldr	r3, [pc, #92]	; (80274ec <xTaskRemoveFromEventList+0xb0>)
 802748e:	681b      	ldr	r3, [r3, #0]
 8027490:	4313      	orrs	r3, r2
 8027492:	4a16      	ldr	r2, [pc, #88]	; (80274ec <xTaskRemoveFromEventList+0xb0>)
 8027494:	6013      	str	r3, [r2, #0]
 8027496:	693b      	ldr	r3, [r7, #16]
 8027498:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 802749a:	4613      	mov	r3, r2
 802749c:	009b      	lsls	r3, r3, #2
 802749e:	4413      	add	r3, r2
 80274a0:	009b      	lsls	r3, r3, #2
 80274a2:	4a13      	ldr	r2, [pc, #76]	; (80274f0 <xTaskRemoveFromEventList+0xb4>)
 80274a4:	441a      	add	r2, r3
 80274a6:	693b      	ldr	r3, [r7, #16]
 80274a8:	3304      	adds	r3, #4
 80274aa:	4619      	mov	r1, r3
 80274ac:	4610      	mov	r0, r2
 80274ae:	f7fe fab7 	bl	8025a20 <vListInsertEnd>
 80274b2:	e005      	b.n	80274c0 <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80274b4:	693b      	ldr	r3, [r7, #16]
 80274b6:	3318      	adds	r3, #24
 80274b8:	4619      	mov	r1, r3
 80274ba:	480e      	ldr	r0, [pc, #56]	; (80274f4 <xTaskRemoveFromEventList+0xb8>)
 80274bc:	f7fe fab0 	bl	8025a20 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80274c0:	693b      	ldr	r3, [r7, #16]
 80274c2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80274c4:	4b0c      	ldr	r3, [pc, #48]	; (80274f8 <xTaskRemoveFromEventList+0xbc>)
 80274c6:	681b      	ldr	r3, [r3, #0]
 80274c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80274ca:	429a      	cmp	r2, r3
 80274cc:	d905      	bls.n	80274da <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80274ce:	2301      	movs	r3, #1
 80274d0:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80274d2:	4b0a      	ldr	r3, [pc, #40]	; (80274fc <xTaskRemoveFromEventList+0xc0>)
 80274d4:	2201      	movs	r2, #1
 80274d6:	601a      	str	r2, [r3, #0]
 80274d8:	e001      	b.n	80274de <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 80274da:	2300      	movs	r3, #0
 80274dc:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 80274de:	697b      	ldr	r3, [r7, #20]
}
 80274e0:	4618      	mov	r0, r3
 80274e2:	3718      	adds	r7, #24
 80274e4:	46bd      	mov	sp, r7
 80274e6:	bd80      	pop	{r7, pc}
 80274e8:	20005260 	.word	0x20005260
 80274ec:	20005240 	.word	0x20005240
 80274f0:	20005088 	.word	0x20005088
 80274f4:	200051f8 	.word	0x200051f8
 80274f8:	20005084 	.word	0x20005084
 80274fc:	2000524c 	.word	0x2000524c

08027500 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8027500:	b480      	push	{r7}
 8027502:	b083      	sub	sp, #12
 8027504:	af00      	add	r7, sp, #0
 8027506:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8027508:	4b06      	ldr	r3, [pc, #24]	; (8027524 <vTaskInternalSetTimeOutState+0x24>)
 802750a:	681a      	ldr	r2, [r3, #0]
 802750c:	687b      	ldr	r3, [r7, #4]
 802750e:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8027510:	4b05      	ldr	r3, [pc, #20]	; (8027528 <vTaskInternalSetTimeOutState+0x28>)
 8027512:	681a      	ldr	r2, [r3, #0]
 8027514:	687b      	ldr	r3, [r7, #4]
 8027516:	605a      	str	r2, [r3, #4]
}
 8027518:	bf00      	nop
 802751a:	370c      	adds	r7, #12
 802751c:	46bd      	mov	sp, r7
 802751e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8027522:	4770      	bx	lr
 8027524:	20005250 	.word	0x20005250
 8027528:	2000523c 	.word	0x2000523c

0802752c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 802752c:	b580      	push	{r7, lr}
 802752e:	b088      	sub	sp, #32
 8027530:	af00      	add	r7, sp, #0
 8027532:	6078      	str	r0, [r7, #4]
 8027534:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8027536:	687b      	ldr	r3, [r7, #4]
 8027538:	2b00      	cmp	r3, #0
 802753a:	d10a      	bne.n	8027552 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 802753c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8027540:	f383 8811 	msr	BASEPRI, r3
 8027544:	f3bf 8f6f 	isb	sy
 8027548:	f3bf 8f4f 	dsb	sy
 802754c:	613b      	str	r3, [r7, #16]
}
 802754e:	bf00      	nop
 8027550:	e7fe      	b.n	8027550 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8027552:	683b      	ldr	r3, [r7, #0]
 8027554:	2b00      	cmp	r3, #0
 8027556:	d10a      	bne.n	802756e <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8027558:	f04f 0350 	mov.w	r3, #80	; 0x50
 802755c:	f383 8811 	msr	BASEPRI, r3
 8027560:	f3bf 8f6f 	isb	sy
 8027564:	f3bf 8f4f 	dsb	sy
 8027568:	60fb      	str	r3, [r7, #12]
}
 802756a:	bf00      	nop
 802756c:	e7fe      	b.n	802756c <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 802756e:	f000 fc71 	bl	8027e54 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8027572:	4b1d      	ldr	r3, [pc, #116]	; (80275e8 <xTaskCheckForTimeOut+0xbc>)
 8027574:	681b      	ldr	r3, [r3, #0]
 8027576:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8027578:	687b      	ldr	r3, [r7, #4]
 802757a:	685b      	ldr	r3, [r3, #4]
 802757c:	69ba      	ldr	r2, [r7, #24]
 802757e:	1ad3      	subs	r3, r2, r3
 8027580:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8027582:	683b      	ldr	r3, [r7, #0]
 8027584:	681b      	ldr	r3, [r3, #0]
 8027586:	f1b3 3fff 	cmp.w	r3, #4294967295
 802758a:	d102      	bne.n	8027592 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 802758c:	2300      	movs	r3, #0
 802758e:	61fb      	str	r3, [r7, #28]
 8027590:	e023      	b.n	80275da <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8027592:	687b      	ldr	r3, [r7, #4]
 8027594:	681a      	ldr	r2, [r3, #0]
 8027596:	4b15      	ldr	r3, [pc, #84]	; (80275ec <xTaskCheckForTimeOut+0xc0>)
 8027598:	681b      	ldr	r3, [r3, #0]
 802759a:	429a      	cmp	r2, r3
 802759c:	d007      	beq.n	80275ae <xTaskCheckForTimeOut+0x82>
 802759e:	687b      	ldr	r3, [r7, #4]
 80275a0:	685b      	ldr	r3, [r3, #4]
 80275a2:	69ba      	ldr	r2, [r7, #24]
 80275a4:	429a      	cmp	r2, r3
 80275a6:	d302      	bcc.n	80275ae <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 80275a8:	2301      	movs	r3, #1
 80275aa:	61fb      	str	r3, [r7, #28]
 80275ac:	e015      	b.n	80275da <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80275ae:	683b      	ldr	r3, [r7, #0]
 80275b0:	681b      	ldr	r3, [r3, #0]
 80275b2:	697a      	ldr	r2, [r7, #20]
 80275b4:	429a      	cmp	r2, r3
 80275b6:	d20b      	bcs.n	80275d0 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80275b8:	683b      	ldr	r3, [r7, #0]
 80275ba:	681a      	ldr	r2, [r3, #0]
 80275bc:	697b      	ldr	r3, [r7, #20]
 80275be:	1ad2      	subs	r2, r2, r3
 80275c0:	683b      	ldr	r3, [r7, #0]
 80275c2:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80275c4:	6878      	ldr	r0, [r7, #4]
 80275c6:	f7ff ff9b 	bl	8027500 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80275ca:	2300      	movs	r3, #0
 80275cc:	61fb      	str	r3, [r7, #28]
 80275ce:	e004      	b.n	80275da <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 80275d0:	683b      	ldr	r3, [r7, #0]
 80275d2:	2200      	movs	r2, #0
 80275d4:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80275d6:	2301      	movs	r3, #1
 80275d8:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 80275da:	f000 fc6b 	bl	8027eb4 <vPortExitCritical>

	return xReturn;
 80275de:	69fb      	ldr	r3, [r7, #28]
}
 80275e0:	4618      	mov	r0, r3
 80275e2:	3720      	adds	r7, #32
 80275e4:	46bd      	mov	sp, r7
 80275e6:	bd80      	pop	{r7, pc}
 80275e8:	2000523c 	.word	0x2000523c
 80275ec:	20005250 	.word	0x20005250

080275f0 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80275f0:	b480      	push	{r7}
 80275f2:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80275f4:	4b03      	ldr	r3, [pc, #12]	; (8027604 <vTaskMissedYield+0x14>)
 80275f6:	2201      	movs	r2, #1
 80275f8:	601a      	str	r2, [r3, #0]
}
 80275fa:	bf00      	nop
 80275fc:	46bd      	mov	sp, r7
 80275fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8027602:	4770      	bx	lr
 8027604:	2000524c 	.word	0x2000524c

08027608 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8027608:	b580      	push	{r7, lr}
 802760a:	b082      	sub	sp, #8
 802760c:	af00      	add	r7, sp, #0
 802760e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8027610:	f000 f852 	bl	80276b8 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8027614:	4b06      	ldr	r3, [pc, #24]	; (8027630 <prvIdleTask+0x28>)
 8027616:	681b      	ldr	r3, [r3, #0]
 8027618:	2b01      	cmp	r3, #1
 802761a:	d9f9      	bls.n	8027610 <prvIdleTask+0x8>
			{
				taskYIELD();
 802761c:	4b05      	ldr	r3, [pc, #20]	; (8027634 <prvIdleTask+0x2c>)
 802761e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8027622:	601a      	str	r2, [r3, #0]
 8027624:	f3bf 8f4f 	dsb	sy
 8027628:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 802762c:	e7f0      	b.n	8027610 <prvIdleTask+0x8>
 802762e:	bf00      	nop
 8027630:	20005088 	.word	0x20005088
 8027634:	e000ed04 	.word	0xe000ed04

08027638 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8027638:	b580      	push	{r7, lr}
 802763a:	b082      	sub	sp, #8
 802763c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 802763e:	2300      	movs	r3, #0
 8027640:	607b      	str	r3, [r7, #4]
 8027642:	e00c      	b.n	802765e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8027644:	687a      	ldr	r2, [r7, #4]
 8027646:	4613      	mov	r3, r2
 8027648:	009b      	lsls	r3, r3, #2
 802764a:	4413      	add	r3, r2
 802764c:	009b      	lsls	r3, r3, #2
 802764e:	4a12      	ldr	r2, [pc, #72]	; (8027698 <prvInitialiseTaskLists+0x60>)
 8027650:	4413      	add	r3, r2
 8027652:	4618      	mov	r0, r3
 8027654:	f7fe f9b7 	bl	80259c6 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8027658:	687b      	ldr	r3, [r7, #4]
 802765a:	3301      	adds	r3, #1
 802765c:	607b      	str	r3, [r7, #4]
 802765e:	687b      	ldr	r3, [r7, #4]
 8027660:	2b0f      	cmp	r3, #15
 8027662:	d9ef      	bls.n	8027644 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8027664:	480d      	ldr	r0, [pc, #52]	; (802769c <prvInitialiseTaskLists+0x64>)
 8027666:	f7fe f9ae 	bl	80259c6 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 802766a:	480d      	ldr	r0, [pc, #52]	; (80276a0 <prvInitialiseTaskLists+0x68>)
 802766c:	f7fe f9ab 	bl	80259c6 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8027670:	480c      	ldr	r0, [pc, #48]	; (80276a4 <prvInitialiseTaskLists+0x6c>)
 8027672:	f7fe f9a8 	bl	80259c6 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8027676:	480c      	ldr	r0, [pc, #48]	; (80276a8 <prvInitialiseTaskLists+0x70>)
 8027678:	f7fe f9a5 	bl	80259c6 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 802767c:	480b      	ldr	r0, [pc, #44]	; (80276ac <prvInitialiseTaskLists+0x74>)
 802767e:	f7fe f9a2 	bl	80259c6 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8027682:	4b0b      	ldr	r3, [pc, #44]	; (80276b0 <prvInitialiseTaskLists+0x78>)
 8027684:	4a05      	ldr	r2, [pc, #20]	; (802769c <prvInitialiseTaskLists+0x64>)
 8027686:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8027688:	4b0a      	ldr	r3, [pc, #40]	; (80276b4 <prvInitialiseTaskLists+0x7c>)
 802768a:	4a05      	ldr	r2, [pc, #20]	; (80276a0 <prvInitialiseTaskLists+0x68>)
 802768c:	601a      	str	r2, [r3, #0]
}
 802768e:	bf00      	nop
 8027690:	3708      	adds	r7, #8
 8027692:	46bd      	mov	sp, r7
 8027694:	bd80      	pop	{r7, pc}
 8027696:	bf00      	nop
 8027698:	20005088 	.word	0x20005088
 802769c:	200051c8 	.word	0x200051c8
 80276a0:	200051dc 	.word	0x200051dc
 80276a4:	200051f8 	.word	0x200051f8
 80276a8:	2000520c 	.word	0x2000520c
 80276ac:	20005224 	.word	0x20005224
 80276b0:	200051f0 	.word	0x200051f0
 80276b4:	200051f4 	.word	0x200051f4

080276b8 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80276b8:	b580      	push	{r7, lr}
 80276ba:	b082      	sub	sp, #8
 80276bc:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80276be:	e019      	b.n	80276f4 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80276c0:	f000 fbc8 	bl	8027e54 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80276c4:	4b10      	ldr	r3, [pc, #64]	; (8027708 <prvCheckTasksWaitingTermination+0x50>)
 80276c6:	68db      	ldr	r3, [r3, #12]
 80276c8:	68db      	ldr	r3, [r3, #12]
 80276ca:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80276cc:	687b      	ldr	r3, [r7, #4]
 80276ce:	3304      	adds	r3, #4
 80276d0:	4618      	mov	r0, r3
 80276d2:	f7fe fa02 	bl	8025ada <uxListRemove>
				--uxCurrentNumberOfTasks;
 80276d6:	4b0d      	ldr	r3, [pc, #52]	; (802770c <prvCheckTasksWaitingTermination+0x54>)
 80276d8:	681b      	ldr	r3, [r3, #0]
 80276da:	3b01      	subs	r3, #1
 80276dc:	4a0b      	ldr	r2, [pc, #44]	; (802770c <prvCheckTasksWaitingTermination+0x54>)
 80276de:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80276e0:	4b0b      	ldr	r3, [pc, #44]	; (8027710 <prvCheckTasksWaitingTermination+0x58>)
 80276e2:	681b      	ldr	r3, [r3, #0]
 80276e4:	3b01      	subs	r3, #1
 80276e6:	4a0a      	ldr	r2, [pc, #40]	; (8027710 <prvCheckTasksWaitingTermination+0x58>)
 80276e8:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80276ea:	f000 fbe3 	bl	8027eb4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80276ee:	6878      	ldr	r0, [r7, #4]
 80276f0:	f000 f810 	bl	8027714 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80276f4:	4b06      	ldr	r3, [pc, #24]	; (8027710 <prvCheckTasksWaitingTermination+0x58>)
 80276f6:	681b      	ldr	r3, [r3, #0]
 80276f8:	2b00      	cmp	r3, #0
 80276fa:	d1e1      	bne.n	80276c0 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80276fc:	bf00      	nop
 80276fe:	bf00      	nop
 8027700:	3708      	adds	r7, #8
 8027702:	46bd      	mov	sp, r7
 8027704:	bd80      	pop	{r7, pc}
 8027706:	bf00      	nop
 8027708:	2000520c 	.word	0x2000520c
 802770c:	20005238 	.word	0x20005238
 8027710:	20005220 	.word	0x20005220

08027714 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8027714:	b580      	push	{r7, lr}
 8027716:	b084      	sub	sp, #16
 8027718:	af00      	add	r7, sp, #0
 802771a:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 802771c:	687b      	ldr	r3, [r7, #4]
 802771e:	334c      	adds	r3, #76	; 0x4c
 8027720:	4618      	mov	r0, r3
 8027722:	f011 fd7b 	bl	803921c <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8027726:	687b      	ldr	r3, [r7, #4]
 8027728:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 802772c:	2b00      	cmp	r3, #0
 802772e:	d108      	bne.n	8027742 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8027730:	687b      	ldr	r3, [r7, #4]
 8027732:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8027734:	4618      	mov	r0, r3
 8027736:	f000 fd7b 	bl	8028230 <vPortFree>
				vPortFree( pxTCB );
 802773a:	6878      	ldr	r0, [r7, #4]
 802773c:	f000 fd78 	bl	8028230 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8027740:	e018      	b.n	8027774 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8027742:	687b      	ldr	r3, [r7, #4]
 8027744:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 8027748:	2b01      	cmp	r3, #1
 802774a:	d103      	bne.n	8027754 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 802774c:	6878      	ldr	r0, [r7, #4]
 802774e:	f000 fd6f 	bl	8028230 <vPortFree>
	}
 8027752:	e00f      	b.n	8027774 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8027754:	687b      	ldr	r3, [r7, #4]
 8027756:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 802775a:	2b02      	cmp	r3, #2
 802775c:	d00a      	beq.n	8027774 <prvDeleteTCB+0x60>
	__asm volatile
 802775e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8027762:	f383 8811 	msr	BASEPRI, r3
 8027766:	f3bf 8f6f 	isb	sy
 802776a:	f3bf 8f4f 	dsb	sy
 802776e:	60fb      	str	r3, [r7, #12]
}
 8027770:	bf00      	nop
 8027772:	e7fe      	b.n	8027772 <prvDeleteTCB+0x5e>
	}
 8027774:	bf00      	nop
 8027776:	3710      	adds	r7, #16
 8027778:	46bd      	mov	sp, r7
 802777a:	bd80      	pop	{r7, pc}

0802777c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 802777c:	b480      	push	{r7}
 802777e:	b083      	sub	sp, #12
 8027780:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8027782:	4b0c      	ldr	r3, [pc, #48]	; (80277b4 <prvResetNextTaskUnblockTime+0x38>)
 8027784:	681b      	ldr	r3, [r3, #0]
 8027786:	681b      	ldr	r3, [r3, #0]
 8027788:	2b00      	cmp	r3, #0
 802778a:	d104      	bne.n	8027796 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 802778c:	4b0a      	ldr	r3, [pc, #40]	; (80277b8 <prvResetNextTaskUnblockTime+0x3c>)
 802778e:	f04f 32ff 	mov.w	r2, #4294967295
 8027792:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8027794:	e008      	b.n	80277a8 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8027796:	4b07      	ldr	r3, [pc, #28]	; (80277b4 <prvResetNextTaskUnblockTime+0x38>)
 8027798:	681b      	ldr	r3, [r3, #0]
 802779a:	68db      	ldr	r3, [r3, #12]
 802779c:	68db      	ldr	r3, [r3, #12]
 802779e:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80277a0:	687b      	ldr	r3, [r7, #4]
 80277a2:	685b      	ldr	r3, [r3, #4]
 80277a4:	4a04      	ldr	r2, [pc, #16]	; (80277b8 <prvResetNextTaskUnblockTime+0x3c>)
 80277a6:	6013      	str	r3, [r2, #0]
}
 80277a8:	bf00      	nop
 80277aa:	370c      	adds	r7, #12
 80277ac:	46bd      	mov	sp, r7
 80277ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80277b2:	4770      	bx	lr
 80277b4:	200051f0 	.word	0x200051f0
 80277b8:	20005258 	.word	0x20005258

080277bc <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80277bc:	b480      	push	{r7}
 80277be:	b083      	sub	sp, #12
 80277c0:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80277c2:	4b0b      	ldr	r3, [pc, #44]	; (80277f0 <xTaskGetSchedulerState+0x34>)
 80277c4:	681b      	ldr	r3, [r3, #0]
 80277c6:	2b00      	cmp	r3, #0
 80277c8:	d102      	bne.n	80277d0 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80277ca:	2301      	movs	r3, #1
 80277cc:	607b      	str	r3, [r7, #4]
 80277ce:	e008      	b.n	80277e2 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80277d0:	4b08      	ldr	r3, [pc, #32]	; (80277f4 <xTaskGetSchedulerState+0x38>)
 80277d2:	681b      	ldr	r3, [r3, #0]
 80277d4:	2b00      	cmp	r3, #0
 80277d6:	d102      	bne.n	80277de <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80277d8:	2302      	movs	r3, #2
 80277da:	607b      	str	r3, [r7, #4]
 80277dc:	e001      	b.n	80277e2 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80277de:	2300      	movs	r3, #0
 80277e0:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80277e2:	687b      	ldr	r3, [r7, #4]
	}
 80277e4:	4618      	mov	r0, r3
 80277e6:	370c      	adds	r7, #12
 80277e8:	46bd      	mov	sp, r7
 80277ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80277ee:	4770      	bx	lr
 80277f0:	20005244 	.word	0x20005244
 80277f4:	20005260 	.word	0x20005260

080277f8 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 80277f8:	b580      	push	{r7, lr}
 80277fa:	b084      	sub	sp, #16
 80277fc:	af00      	add	r7, sp, #0
 80277fe:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8027800:	687b      	ldr	r3, [r7, #4]
 8027802:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8027804:	2300      	movs	r3, #0
 8027806:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8027808:	687b      	ldr	r3, [r7, #4]
 802780a:	2b00      	cmp	r3, #0
 802780c:	d05e      	beq.n	80278cc <xTaskPriorityInherit+0xd4>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 802780e:	68bb      	ldr	r3, [r7, #8]
 8027810:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8027812:	4b31      	ldr	r3, [pc, #196]	; (80278d8 <xTaskPriorityInherit+0xe0>)
 8027814:	681b      	ldr	r3, [r3, #0]
 8027816:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8027818:	429a      	cmp	r2, r3
 802781a:	d24e      	bcs.n	80278ba <xTaskPriorityInherit+0xc2>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 802781c:	68bb      	ldr	r3, [r7, #8]
 802781e:	699b      	ldr	r3, [r3, #24]
 8027820:	2b00      	cmp	r3, #0
 8027822:	db06      	blt.n	8027832 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8027824:	4b2c      	ldr	r3, [pc, #176]	; (80278d8 <xTaskPriorityInherit+0xe0>)
 8027826:	681b      	ldr	r3, [r3, #0]
 8027828:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 802782a:	f1c3 0210 	rsb	r2, r3, #16
 802782e:	68bb      	ldr	r3, [r7, #8]
 8027830:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8027832:	68bb      	ldr	r3, [r7, #8]
 8027834:	6959      	ldr	r1, [r3, #20]
 8027836:	68bb      	ldr	r3, [r7, #8]
 8027838:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 802783a:	4613      	mov	r3, r2
 802783c:	009b      	lsls	r3, r3, #2
 802783e:	4413      	add	r3, r2
 8027840:	009b      	lsls	r3, r3, #2
 8027842:	4a26      	ldr	r2, [pc, #152]	; (80278dc <xTaskPriorityInherit+0xe4>)
 8027844:	4413      	add	r3, r2
 8027846:	4299      	cmp	r1, r3
 8027848:	d12f      	bne.n	80278aa <xTaskPriorityInherit+0xb2>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 802784a:	68bb      	ldr	r3, [r7, #8]
 802784c:	3304      	adds	r3, #4
 802784e:	4618      	mov	r0, r3
 8027850:	f7fe f943 	bl	8025ada <uxListRemove>
 8027854:	4603      	mov	r3, r0
 8027856:	2b00      	cmp	r3, #0
 8027858:	d10a      	bne.n	8027870 <xTaskPriorityInherit+0x78>
					{
						/* It is known that the task is in its ready list so
						there is no need to check again and the port level
						reset macro can be called directly. */
						portRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority, uxTopReadyPriority );
 802785a:	68bb      	ldr	r3, [r7, #8]
 802785c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 802785e:	2201      	movs	r2, #1
 8027860:	fa02 f303 	lsl.w	r3, r2, r3
 8027864:	43da      	mvns	r2, r3
 8027866:	4b1e      	ldr	r3, [pc, #120]	; (80278e0 <xTaskPriorityInherit+0xe8>)
 8027868:	681b      	ldr	r3, [r3, #0]
 802786a:	4013      	ands	r3, r2
 802786c:	4a1c      	ldr	r2, [pc, #112]	; (80278e0 <xTaskPriorityInherit+0xe8>)
 802786e:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8027870:	4b19      	ldr	r3, [pc, #100]	; (80278d8 <xTaskPriorityInherit+0xe0>)
 8027872:	681b      	ldr	r3, [r3, #0]
 8027874:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8027876:	68bb      	ldr	r3, [r7, #8]
 8027878:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 802787a:	68bb      	ldr	r3, [r7, #8]
 802787c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 802787e:	2201      	movs	r2, #1
 8027880:	409a      	lsls	r2, r3
 8027882:	4b17      	ldr	r3, [pc, #92]	; (80278e0 <xTaskPriorityInherit+0xe8>)
 8027884:	681b      	ldr	r3, [r3, #0]
 8027886:	4313      	orrs	r3, r2
 8027888:	4a15      	ldr	r2, [pc, #84]	; (80278e0 <xTaskPriorityInherit+0xe8>)
 802788a:	6013      	str	r3, [r2, #0]
 802788c:	68bb      	ldr	r3, [r7, #8]
 802788e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8027890:	4613      	mov	r3, r2
 8027892:	009b      	lsls	r3, r3, #2
 8027894:	4413      	add	r3, r2
 8027896:	009b      	lsls	r3, r3, #2
 8027898:	4a10      	ldr	r2, [pc, #64]	; (80278dc <xTaskPriorityInherit+0xe4>)
 802789a:	441a      	add	r2, r3
 802789c:	68bb      	ldr	r3, [r7, #8]
 802789e:	3304      	adds	r3, #4
 80278a0:	4619      	mov	r1, r3
 80278a2:	4610      	mov	r0, r2
 80278a4:	f7fe f8bc 	bl	8025a20 <vListInsertEnd>
 80278a8:	e004      	b.n	80278b4 <xTaskPriorityInherit+0xbc>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 80278aa:	4b0b      	ldr	r3, [pc, #44]	; (80278d8 <xTaskPriorityInherit+0xe0>)
 80278ac:	681b      	ldr	r3, [r3, #0]
 80278ae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80278b0:	68bb      	ldr	r3, [r7, #8]
 80278b2:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 80278b4:	2301      	movs	r3, #1
 80278b6:	60fb      	str	r3, [r7, #12]
 80278b8:	e008      	b.n	80278cc <xTaskPriorityInherit+0xd4>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 80278ba:	68bb      	ldr	r3, [r7, #8]
 80278bc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80278be:	4b06      	ldr	r3, [pc, #24]	; (80278d8 <xTaskPriorityInherit+0xe0>)
 80278c0:	681b      	ldr	r3, [r3, #0]
 80278c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80278c4:	429a      	cmp	r2, r3
 80278c6:	d201      	bcs.n	80278cc <xTaskPriorityInherit+0xd4>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 80278c8:	2301      	movs	r3, #1
 80278ca:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80278cc:	68fb      	ldr	r3, [r7, #12]
	}
 80278ce:	4618      	mov	r0, r3
 80278d0:	3710      	adds	r7, #16
 80278d2:	46bd      	mov	sp, r7
 80278d4:	bd80      	pop	{r7, pc}
 80278d6:	bf00      	nop
 80278d8:	20005084 	.word	0x20005084
 80278dc:	20005088 	.word	0x20005088
 80278e0:	20005240 	.word	0x20005240

080278e4 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80278e4:	b580      	push	{r7, lr}
 80278e6:	b086      	sub	sp, #24
 80278e8:	af00      	add	r7, sp, #0
 80278ea:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 80278ec:	687b      	ldr	r3, [r7, #4]
 80278ee:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 80278f0:	2300      	movs	r3, #0
 80278f2:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80278f4:	687b      	ldr	r3, [r7, #4]
 80278f6:	2b00      	cmp	r3, #0
 80278f8:	d06e      	beq.n	80279d8 <xTaskPriorityDisinherit+0xf4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80278fa:	4b3a      	ldr	r3, [pc, #232]	; (80279e4 <xTaskPriorityDisinherit+0x100>)
 80278fc:	681b      	ldr	r3, [r3, #0]
 80278fe:	693a      	ldr	r2, [r7, #16]
 8027900:	429a      	cmp	r2, r3
 8027902:	d00a      	beq.n	802791a <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8027904:	f04f 0350 	mov.w	r3, #80	; 0x50
 8027908:	f383 8811 	msr	BASEPRI, r3
 802790c:	f3bf 8f6f 	isb	sy
 8027910:	f3bf 8f4f 	dsb	sy
 8027914:	60fb      	str	r3, [r7, #12]
}
 8027916:	bf00      	nop
 8027918:	e7fe      	b.n	8027918 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 802791a:	693b      	ldr	r3, [r7, #16]
 802791c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 802791e:	2b00      	cmp	r3, #0
 8027920:	d10a      	bne.n	8027938 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8027922:	f04f 0350 	mov.w	r3, #80	; 0x50
 8027926:	f383 8811 	msr	BASEPRI, r3
 802792a:	f3bf 8f6f 	isb	sy
 802792e:	f3bf 8f4f 	dsb	sy
 8027932:	60bb      	str	r3, [r7, #8]
}
 8027934:	bf00      	nop
 8027936:	e7fe      	b.n	8027936 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8027938:	693b      	ldr	r3, [r7, #16]
 802793a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 802793c:	1e5a      	subs	r2, r3, #1
 802793e:	693b      	ldr	r3, [r7, #16]
 8027940:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8027942:	693b      	ldr	r3, [r7, #16]
 8027944:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8027946:	693b      	ldr	r3, [r7, #16]
 8027948:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 802794a:	429a      	cmp	r2, r3
 802794c:	d044      	beq.n	80279d8 <xTaskPriorityDisinherit+0xf4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 802794e:	693b      	ldr	r3, [r7, #16]
 8027950:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8027952:	2b00      	cmp	r3, #0
 8027954:	d140      	bne.n	80279d8 <xTaskPriorityDisinherit+0xf4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8027956:	693b      	ldr	r3, [r7, #16]
 8027958:	3304      	adds	r3, #4
 802795a:	4618      	mov	r0, r3
 802795c:	f7fe f8bd 	bl	8025ada <uxListRemove>
 8027960:	4603      	mov	r3, r0
 8027962:	2b00      	cmp	r3, #0
 8027964:	d115      	bne.n	8027992 <xTaskPriorityDisinherit+0xae>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8027966:	693b      	ldr	r3, [r7, #16]
 8027968:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 802796a:	491f      	ldr	r1, [pc, #124]	; (80279e8 <xTaskPriorityDisinherit+0x104>)
 802796c:	4613      	mov	r3, r2
 802796e:	009b      	lsls	r3, r3, #2
 8027970:	4413      	add	r3, r2
 8027972:	009b      	lsls	r3, r3, #2
 8027974:	440b      	add	r3, r1
 8027976:	681b      	ldr	r3, [r3, #0]
 8027978:	2b00      	cmp	r3, #0
 802797a:	d10a      	bne.n	8027992 <xTaskPriorityDisinherit+0xae>
 802797c:	693b      	ldr	r3, [r7, #16]
 802797e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8027980:	2201      	movs	r2, #1
 8027982:	fa02 f303 	lsl.w	r3, r2, r3
 8027986:	43da      	mvns	r2, r3
 8027988:	4b18      	ldr	r3, [pc, #96]	; (80279ec <xTaskPriorityDisinherit+0x108>)
 802798a:	681b      	ldr	r3, [r3, #0]
 802798c:	4013      	ands	r3, r2
 802798e:	4a17      	ldr	r2, [pc, #92]	; (80279ec <xTaskPriorityDisinherit+0x108>)
 8027990:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8027992:	693b      	ldr	r3, [r7, #16]
 8027994:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8027996:	693b      	ldr	r3, [r7, #16]
 8027998:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 802799a:	693b      	ldr	r3, [r7, #16]
 802799c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 802799e:	f1c3 0210 	rsb	r2, r3, #16
 80279a2:	693b      	ldr	r3, [r7, #16]
 80279a4:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80279a6:	693b      	ldr	r3, [r7, #16]
 80279a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80279aa:	2201      	movs	r2, #1
 80279ac:	409a      	lsls	r2, r3
 80279ae:	4b0f      	ldr	r3, [pc, #60]	; (80279ec <xTaskPriorityDisinherit+0x108>)
 80279b0:	681b      	ldr	r3, [r3, #0]
 80279b2:	4313      	orrs	r3, r2
 80279b4:	4a0d      	ldr	r2, [pc, #52]	; (80279ec <xTaskPriorityDisinherit+0x108>)
 80279b6:	6013      	str	r3, [r2, #0]
 80279b8:	693b      	ldr	r3, [r7, #16]
 80279ba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80279bc:	4613      	mov	r3, r2
 80279be:	009b      	lsls	r3, r3, #2
 80279c0:	4413      	add	r3, r2
 80279c2:	009b      	lsls	r3, r3, #2
 80279c4:	4a08      	ldr	r2, [pc, #32]	; (80279e8 <xTaskPriorityDisinherit+0x104>)
 80279c6:	441a      	add	r2, r3
 80279c8:	693b      	ldr	r3, [r7, #16]
 80279ca:	3304      	adds	r3, #4
 80279cc:	4619      	mov	r1, r3
 80279ce:	4610      	mov	r0, r2
 80279d0:	f7fe f826 	bl	8025a20 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80279d4:	2301      	movs	r3, #1
 80279d6:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80279d8:	697b      	ldr	r3, [r7, #20]
	}
 80279da:	4618      	mov	r0, r3
 80279dc:	3718      	adds	r7, #24
 80279de:	46bd      	mov	sp, r7
 80279e0:	bd80      	pop	{r7, pc}
 80279e2:	bf00      	nop
 80279e4:	20005084 	.word	0x20005084
 80279e8:	20005088 	.word	0x20005088
 80279ec:	20005240 	.word	0x20005240

080279f0 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 80279f0:	b580      	push	{r7, lr}
 80279f2:	b088      	sub	sp, #32
 80279f4:	af00      	add	r7, sp, #0
 80279f6:	6078      	str	r0, [r7, #4]
 80279f8:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 80279fa:	687b      	ldr	r3, [r7, #4]
 80279fc:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 80279fe:	2301      	movs	r3, #1
 8027a00:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8027a02:	687b      	ldr	r3, [r7, #4]
 8027a04:	2b00      	cmp	r3, #0
 8027a06:	d077      	beq.n	8027af8 <vTaskPriorityDisinheritAfterTimeout+0x108>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8027a08:	69bb      	ldr	r3, [r7, #24]
 8027a0a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8027a0c:	2b00      	cmp	r3, #0
 8027a0e:	d10a      	bne.n	8027a26 <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 8027a10:	f04f 0350 	mov.w	r3, #80	; 0x50
 8027a14:	f383 8811 	msr	BASEPRI, r3
 8027a18:	f3bf 8f6f 	isb	sy
 8027a1c:	f3bf 8f4f 	dsb	sy
 8027a20:	60fb      	str	r3, [r7, #12]
}
 8027a22:	bf00      	nop
 8027a24:	e7fe      	b.n	8027a24 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8027a26:	69bb      	ldr	r3, [r7, #24]
 8027a28:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8027a2a:	683a      	ldr	r2, [r7, #0]
 8027a2c:	429a      	cmp	r2, r3
 8027a2e:	d902      	bls.n	8027a36 <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8027a30:	683b      	ldr	r3, [r7, #0]
 8027a32:	61fb      	str	r3, [r7, #28]
 8027a34:	e002      	b.n	8027a3c <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8027a36:	69bb      	ldr	r3, [r7, #24]
 8027a38:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8027a3a:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8027a3c:	69bb      	ldr	r3, [r7, #24]
 8027a3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8027a40:	69fa      	ldr	r2, [r7, #28]
 8027a42:	429a      	cmp	r2, r3
 8027a44:	d058      	beq.n	8027af8 <vTaskPriorityDisinheritAfterTimeout+0x108>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8027a46:	69bb      	ldr	r3, [r7, #24]
 8027a48:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8027a4a:	697a      	ldr	r2, [r7, #20]
 8027a4c:	429a      	cmp	r2, r3
 8027a4e:	d153      	bne.n	8027af8 <vTaskPriorityDisinheritAfterTimeout+0x108>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8027a50:	4b2b      	ldr	r3, [pc, #172]	; (8027b00 <vTaskPriorityDisinheritAfterTimeout+0x110>)
 8027a52:	681b      	ldr	r3, [r3, #0]
 8027a54:	69ba      	ldr	r2, [r7, #24]
 8027a56:	429a      	cmp	r2, r3
 8027a58:	d10a      	bne.n	8027a70 <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 8027a5a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8027a5e:	f383 8811 	msr	BASEPRI, r3
 8027a62:	f3bf 8f6f 	isb	sy
 8027a66:	f3bf 8f4f 	dsb	sy
 8027a6a:	60bb      	str	r3, [r7, #8]
}
 8027a6c:	bf00      	nop
 8027a6e:	e7fe      	b.n	8027a6e <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8027a70:	69bb      	ldr	r3, [r7, #24]
 8027a72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8027a74:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8027a76:	69bb      	ldr	r3, [r7, #24]
 8027a78:	69fa      	ldr	r2, [r7, #28]
 8027a7a:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8027a7c:	69bb      	ldr	r3, [r7, #24]
 8027a7e:	699b      	ldr	r3, [r3, #24]
 8027a80:	2b00      	cmp	r3, #0
 8027a82:	db04      	blt.n	8027a8e <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8027a84:	69fb      	ldr	r3, [r7, #28]
 8027a86:	f1c3 0210 	rsb	r2, r3, #16
 8027a8a:	69bb      	ldr	r3, [r7, #24]
 8027a8c:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8027a8e:	69bb      	ldr	r3, [r7, #24]
 8027a90:	6959      	ldr	r1, [r3, #20]
 8027a92:	693a      	ldr	r2, [r7, #16]
 8027a94:	4613      	mov	r3, r2
 8027a96:	009b      	lsls	r3, r3, #2
 8027a98:	4413      	add	r3, r2
 8027a9a:	009b      	lsls	r3, r3, #2
 8027a9c:	4a19      	ldr	r2, [pc, #100]	; (8027b04 <vTaskPriorityDisinheritAfterTimeout+0x114>)
 8027a9e:	4413      	add	r3, r2
 8027aa0:	4299      	cmp	r1, r3
 8027aa2:	d129      	bne.n	8027af8 <vTaskPriorityDisinheritAfterTimeout+0x108>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8027aa4:	69bb      	ldr	r3, [r7, #24]
 8027aa6:	3304      	adds	r3, #4
 8027aa8:	4618      	mov	r0, r3
 8027aaa:	f7fe f816 	bl	8025ada <uxListRemove>
 8027aae:	4603      	mov	r3, r0
 8027ab0:	2b00      	cmp	r3, #0
 8027ab2:	d10a      	bne.n	8027aca <vTaskPriorityDisinheritAfterTimeout+0xda>
						{
							/* It is known that the task is in its ready list so
							there is no need to check again and the port level
							reset macro can be called directly. */
							portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 8027ab4:	69bb      	ldr	r3, [r7, #24]
 8027ab6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8027ab8:	2201      	movs	r2, #1
 8027aba:	fa02 f303 	lsl.w	r3, r2, r3
 8027abe:	43da      	mvns	r2, r3
 8027ac0:	4b11      	ldr	r3, [pc, #68]	; (8027b08 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 8027ac2:	681b      	ldr	r3, [r3, #0]
 8027ac4:	4013      	ands	r3, r2
 8027ac6:	4a10      	ldr	r2, [pc, #64]	; (8027b08 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 8027ac8:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8027aca:	69bb      	ldr	r3, [r7, #24]
 8027acc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8027ace:	2201      	movs	r2, #1
 8027ad0:	409a      	lsls	r2, r3
 8027ad2:	4b0d      	ldr	r3, [pc, #52]	; (8027b08 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 8027ad4:	681b      	ldr	r3, [r3, #0]
 8027ad6:	4313      	orrs	r3, r2
 8027ad8:	4a0b      	ldr	r2, [pc, #44]	; (8027b08 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 8027ada:	6013      	str	r3, [r2, #0]
 8027adc:	69bb      	ldr	r3, [r7, #24]
 8027ade:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8027ae0:	4613      	mov	r3, r2
 8027ae2:	009b      	lsls	r3, r3, #2
 8027ae4:	4413      	add	r3, r2
 8027ae6:	009b      	lsls	r3, r3, #2
 8027ae8:	4a06      	ldr	r2, [pc, #24]	; (8027b04 <vTaskPriorityDisinheritAfterTimeout+0x114>)
 8027aea:	441a      	add	r2, r3
 8027aec:	69bb      	ldr	r3, [r7, #24]
 8027aee:	3304      	adds	r3, #4
 8027af0:	4619      	mov	r1, r3
 8027af2:	4610      	mov	r0, r2
 8027af4:	f7fd ff94 	bl	8025a20 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8027af8:	bf00      	nop
 8027afa:	3720      	adds	r7, #32
 8027afc:	46bd      	mov	sp, r7
 8027afe:	bd80      	pop	{r7, pc}
 8027b00:	20005084 	.word	0x20005084
 8027b04:	20005088 	.word	0x20005088
 8027b08:	20005240 	.word	0x20005240

08027b0c <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 8027b0c:	b480      	push	{r7}
 8027b0e:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8027b10:	4b07      	ldr	r3, [pc, #28]	; (8027b30 <pvTaskIncrementMutexHeldCount+0x24>)
 8027b12:	681b      	ldr	r3, [r3, #0]
 8027b14:	2b00      	cmp	r3, #0
 8027b16:	d004      	beq.n	8027b22 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8027b18:	4b05      	ldr	r3, [pc, #20]	; (8027b30 <pvTaskIncrementMutexHeldCount+0x24>)
 8027b1a:	681b      	ldr	r3, [r3, #0]
 8027b1c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8027b1e:	3201      	adds	r2, #1
 8027b20:	649a      	str	r2, [r3, #72]	; 0x48
		}

		return pxCurrentTCB;
 8027b22:	4b03      	ldr	r3, [pc, #12]	; (8027b30 <pvTaskIncrementMutexHeldCount+0x24>)
 8027b24:	681b      	ldr	r3, [r3, #0]
	}
 8027b26:	4618      	mov	r0, r3
 8027b28:	46bd      	mov	sp, r7
 8027b2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8027b2e:	4770      	bx	lr
 8027b30:	20005084 	.word	0x20005084

08027b34 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8027b34:	b580      	push	{r7, lr}
 8027b36:	b084      	sub	sp, #16
 8027b38:	af00      	add	r7, sp, #0
 8027b3a:	6078      	str	r0, [r7, #4]
 8027b3c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8027b3e:	4b29      	ldr	r3, [pc, #164]	; (8027be4 <prvAddCurrentTaskToDelayedList+0xb0>)
 8027b40:	681b      	ldr	r3, [r3, #0]
 8027b42:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8027b44:	4b28      	ldr	r3, [pc, #160]	; (8027be8 <prvAddCurrentTaskToDelayedList+0xb4>)
 8027b46:	681b      	ldr	r3, [r3, #0]
 8027b48:	3304      	adds	r3, #4
 8027b4a:	4618      	mov	r0, r3
 8027b4c:	f7fd ffc5 	bl	8025ada <uxListRemove>
 8027b50:	4603      	mov	r3, r0
 8027b52:	2b00      	cmp	r3, #0
 8027b54:	d10b      	bne.n	8027b6e <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8027b56:	4b24      	ldr	r3, [pc, #144]	; (8027be8 <prvAddCurrentTaskToDelayedList+0xb4>)
 8027b58:	681b      	ldr	r3, [r3, #0]
 8027b5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8027b5c:	2201      	movs	r2, #1
 8027b5e:	fa02 f303 	lsl.w	r3, r2, r3
 8027b62:	43da      	mvns	r2, r3
 8027b64:	4b21      	ldr	r3, [pc, #132]	; (8027bec <prvAddCurrentTaskToDelayedList+0xb8>)
 8027b66:	681b      	ldr	r3, [r3, #0]
 8027b68:	4013      	ands	r3, r2
 8027b6a:	4a20      	ldr	r2, [pc, #128]	; (8027bec <prvAddCurrentTaskToDelayedList+0xb8>)
 8027b6c:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8027b6e:	687b      	ldr	r3, [r7, #4]
 8027b70:	f1b3 3fff 	cmp.w	r3, #4294967295
 8027b74:	d10a      	bne.n	8027b8c <prvAddCurrentTaskToDelayedList+0x58>
 8027b76:	683b      	ldr	r3, [r7, #0]
 8027b78:	2b00      	cmp	r3, #0
 8027b7a:	d007      	beq.n	8027b8c <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8027b7c:	4b1a      	ldr	r3, [pc, #104]	; (8027be8 <prvAddCurrentTaskToDelayedList+0xb4>)
 8027b7e:	681b      	ldr	r3, [r3, #0]
 8027b80:	3304      	adds	r3, #4
 8027b82:	4619      	mov	r1, r3
 8027b84:	481a      	ldr	r0, [pc, #104]	; (8027bf0 <prvAddCurrentTaskToDelayedList+0xbc>)
 8027b86:	f7fd ff4b 	bl	8025a20 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8027b8a:	e026      	b.n	8027bda <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8027b8c:	68fa      	ldr	r2, [r7, #12]
 8027b8e:	687b      	ldr	r3, [r7, #4]
 8027b90:	4413      	add	r3, r2
 8027b92:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8027b94:	4b14      	ldr	r3, [pc, #80]	; (8027be8 <prvAddCurrentTaskToDelayedList+0xb4>)
 8027b96:	681b      	ldr	r3, [r3, #0]
 8027b98:	68ba      	ldr	r2, [r7, #8]
 8027b9a:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8027b9c:	68ba      	ldr	r2, [r7, #8]
 8027b9e:	68fb      	ldr	r3, [r7, #12]
 8027ba0:	429a      	cmp	r2, r3
 8027ba2:	d209      	bcs.n	8027bb8 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8027ba4:	4b13      	ldr	r3, [pc, #76]	; (8027bf4 <prvAddCurrentTaskToDelayedList+0xc0>)
 8027ba6:	681a      	ldr	r2, [r3, #0]
 8027ba8:	4b0f      	ldr	r3, [pc, #60]	; (8027be8 <prvAddCurrentTaskToDelayedList+0xb4>)
 8027baa:	681b      	ldr	r3, [r3, #0]
 8027bac:	3304      	adds	r3, #4
 8027bae:	4619      	mov	r1, r3
 8027bb0:	4610      	mov	r0, r2
 8027bb2:	f7fd ff59 	bl	8025a68 <vListInsert>
}
 8027bb6:	e010      	b.n	8027bda <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8027bb8:	4b0f      	ldr	r3, [pc, #60]	; (8027bf8 <prvAddCurrentTaskToDelayedList+0xc4>)
 8027bba:	681a      	ldr	r2, [r3, #0]
 8027bbc:	4b0a      	ldr	r3, [pc, #40]	; (8027be8 <prvAddCurrentTaskToDelayedList+0xb4>)
 8027bbe:	681b      	ldr	r3, [r3, #0]
 8027bc0:	3304      	adds	r3, #4
 8027bc2:	4619      	mov	r1, r3
 8027bc4:	4610      	mov	r0, r2
 8027bc6:	f7fd ff4f 	bl	8025a68 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8027bca:	4b0c      	ldr	r3, [pc, #48]	; (8027bfc <prvAddCurrentTaskToDelayedList+0xc8>)
 8027bcc:	681b      	ldr	r3, [r3, #0]
 8027bce:	68ba      	ldr	r2, [r7, #8]
 8027bd0:	429a      	cmp	r2, r3
 8027bd2:	d202      	bcs.n	8027bda <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8027bd4:	4a09      	ldr	r2, [pc, #36]	; (8027bfc <prvAddCurrentTaskToDelayedList+0xc8>)
 8027bd6:	68bb      	ldr	r3, [r7, #8]
 8027bd8:	6013      	str	r3, [r2, #0]
}
 8027bda:	bf00      	nop
 8027bdc:	3710      	adds	r7, #16
 8027bde:	46bd      	mov	sp, r7
 8027be0:	bd80      	pop	{r7, pc}
 8027be2:	bf00      	nop
 8027be4:	2000523c 	.word	0x2000523c
 8027be8:	20005084 	.word	0x20005084
 8027bec:	20005240 	.word	0x20005240
 8027bf0:	20005224 	.word	0x20005224
 8027bf4:	200051f4 	.word	0x200051f4
 8027bf8:	200051f0 	.word	0x200051f0
 8027bfc:	20005258 	.word	0x20005258

08027c00 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8027c00:	b480      	push	{r7}
 8027c02:	b085      	sub	sp, #20
 8027c04:	af00      	add	r7, sp, #0
 8027c06:	60f8      	str	r0, [r7, #12]
 8027c08:	60b9      	str	r1, [r7, #8]
 8027c0a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8027c0c:	68fb      	ldr	r3, [r7, #12]
 8027c0e:	3b04      	subs	r3, #4
 8027c10:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8027c12:	68fb      	ldr	r3, [r7, #12]
 8027c14:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8027c18:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8027c1a:	68fb      	ldr	r3, [r7, #12]
 8027c1c:	3b04      	subs	r3, #4
 8027c1e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8027c20:	68bb      	ldr	r3, [r7, #8]
 8027c22:	f023 0201 	bic.w	r2, r3, #1
 8027c26:	68fb      	ldr	r3, [r7, #12]
 8027c28:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8027c2a:	68fb      	ldr	r3, [r7, #12]
 8027c2c:	3b04      	subs	r3, #4
 8027c2e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8027c30:	4a0c      	ldr	r2, [pc, #48]	; (8027c64 <pxPortInitialiseStack+0x64>)
 8027c32:	68fb      	ldr	r3, [r7, #12]
 8027c34:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8027c36:	68fb      	ldr	r3, [r7, #12]
 8027c38:	3b14      	subs	r3, #20
 8027c3a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8027c3c:	687a      	ldr	r2, [r7, #4]
 8027c3e:	68fb      	ldr	r3, [r7, #12]
 8027c40:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8027c42:	68fb      	ldr	r3, [r7, #12]
 8027c44:	3b04      	subs	r3, #4
 8027c46:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8027c48:	68fb      	ldr	r3, [r7, #12]
 8027c4a:	f06f 0202 	mvn.w	r2, #2
 8027c4e:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8027c50:	68fb      	ldr	r3, [r7, #12]
 8027c52:	3b20      	subs	r3, #32
 8027c54:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8027c56:	68fb      	ldr	r3, [r7, #12]
}
 8027c58:	4618      	mov	r0, r3
 8027c5a:	3714      	adds	r7, #20
 8027c5c:	46bd      	mov	sp, r7
 8027c5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8027c62:	4770      	bx	lr
 8027c64:	08027c69 	.word	0x08027c69

08027c68 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8027c68:	b480      	push	{r7}
 8027c6a:	b085      	sub	sp, #20
 8027c6c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8027c6e:	2300      	movs	r3, #0
 8027c70:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8027c72:	4b12      	ldr	r3, [pc, #72]	; (8027cbc <prvTaskExitError+0x54>)
 8027c74:	681b      	ldr	r3, [r3, #0]
 8027c76:	f1b3 3fff 	cmp.w	r3, #4294967295
 8027c7a:	d00a      	beq.n	8027c92 <prvTaskExitError+0x2a>
	__asm volatile
 8027c7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8027c80:	f383 8811 	msr	BASEPRI, r3
 8027c84:	f3bf 8f6f 	isb	sy
 8027c88:	f3bf 8f4f 	dsb	sy
 8027c8c:	60fb      	str	r3, [r7, #12]
}
 8027c8e:	bf00      	nop
 8027c90:	e7fe      	b.n	8027c90 <prvTaskExitError+0x28>
	__asm volatile
 8027c92:	f04f 0350 	mov.w	r3, #80	; 0x50
 8027c96:	f383 8811 	msr	BASEPRI, r3
 8027c9a:	f3bf 8f6f 	isb	sy
 8027c9e:	f3bf 8f4f 	dsb	sy
 8027ca2:	60bb      	str	r3, [r7, #8]
}
 8027ca4:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8027ca6:	bf00      	nop
 8027ca8:	687b      	ldr	r3, [r7, #4]
 8027caa:	2b00      	cmp	r3, #0
 8027cac:	d0fc      	beq.n	8027ca8 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8027cae:	bf00      	nop
 8027cb0:	bf00      	nop
 8027cb2:	3714      	adds	r7, #20
 8027cb4:	46bd      	mov	sp, r7
 8027cb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8027cba:	4770      	bx	lr
 8027cbc:	20000024 	.word	0x20000024

08027cc0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8027cc0:	4b07      	ldr	r3, [pc, #28]	; (8027ce0 <pxCurrentTCBConst2>)
 8027cc2:	6819      	ldr	r1, [r3, #0]
 8027cc4:	6808      	ldr	r0, [r1, #0]
 8027cc6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8027cca:	f380 8809 	msr	PSP, r0
 8027cce:	f3bf 8f6f 	isb	sy
 8027cd2:	f04f 0000 	mov.w	r0, #0
 8027cd6:	f380 8811 	msr	BASEPRI, r0
 8027cda:	4770      	bx	lr
 8027cdc:	f3af 8000 	nop.w

08027ce0 <pxCurrentTCBConst2>:
 8027ce0:	20005084 	.word	0x20005084
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8027ce4:	bf00      	nop
 8027ce6:	bf00      	nop

08027ce8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8027ce8:	4808      	ldr	r0, [pc, #32]	; (8027d0c <prvPortStartFirstTask+0x24>)
 8027cea:	6800      	ldr	r0, [r0, #0]
 8027cec:	6800      	ldr	r0, [r0, #0]
 8027cee:	f380 8808 	msr	MSP, r0
 8027cf2:	f04f 0000 	mov.w	r0, #0
 8027cf6:	f380 8814 	msr	CONTROL, r0
 8027cfa:	b662      	cpsie	i
 8027cfc:	b661      	cpsie	f
 8027cfe:	f3bf 8f4f 	dsb	sy
 8027d02:	f3bf 8f6f 	isb	sy
 8027d06:	df00      	svc	0
 8027d08:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8027d0a:	bf00      	nop
 8027d0c:	e000ed08 	.word	0xe000ed08

08027d10 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8027d10:	b580      	push	{r7, lr}
 8027d12:	b086      	sub	sp, #24
 8027d14:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8027d16:	4b46      	ldr	r3, [pc, #280]	; (8027e30 <xPortStartScheduler+0x120>)
 8027d18:	681b      	ldr	r3, [r3, #0]
 8027d1a:	4a46      	ldr	r2, [pc, #280]	; (8027e34 <xPortStartScheduler+0x124>)
 8027d1c:	4293      	cmp	r3, r2
 8027d1e:	d10a      	bne.n	8027d36 <xPortStartScheduler+0x26>
	__asm volatile
 8027d20:	f04f 0350 	mov.w	r3, #80	; 0x50
 8027d24:	f383 8811 	msr	BASEPRI, r3
 8027d28:	f3bf 8f6f 	isb	sy
 8027d2c:	f3bf 8f4f 	dsb	sy
 8027d30:	613b      	str	r3, [r7, #16]
}
 8027d32:	bf00      	nop
 8027d34:	e7fe      	b.n	8027d34 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8027d36:	4b3e      	ldr	r3, [pc, #248]	; (8027e30 <xPortStartScheduler+0x120>)
 8027d38:	681b      	ldr	r3, [r3, #0]
 8027d3a:	4a3f      	ldr	r2, [pc, #252]	; (8027e38 <xPortStartScheduler+0x128>)
 8027d3c:	4293      	cmp	r3, r2
 8027d3e:	d10a      	bne.n	8027d56 <xPortStartScheduler+0x46>
	__asm volatile
 8027d40:	f04f 0350 	mov.w	r3, #80	; 0x50
 8027d44:	f383 8811 	msr	BASEPRI, r3
 8027d48:	f3bf 8f6f 	isb	sy
 8027d4c:	f3bf 8f4f 	dsb	sy
 8027d50:	60fb      	str	r3, [r7, #12]
}
 8027d52:	bf00      	nop
 8027d54:	e7fe      	b.n	8027d54 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8027d56:	4b39      	ldr	r3, [pc, #228]	; (8027e3c <xPortStartScheduler+0x12c>)
 8027d58:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8027d5a:	697b      	ldr	r3, [r7, #20]
 8027d5c:	781b      	ldrb	r3, [r3, #0]
 8027d5e:	b2db      	uxtb	r3, r3
 8027d60:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8027d62:	697b      	ldr	r3, [r7, #20]
 8027d64:	22ff      	movs	r2, #255	; 0xff
 8027d66:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8027d68:	697b      	ldr	r3, [r7, #20]
 8027d6a:	781b      	ldrb	r3, [r3, #0]
 8027d6c:	b2db      	uxtb	r3, r3
 8027d6e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8027d70:	78fb      	ldrb	r3, [r7, #3]
 8027d72:	b2db      	uxtb	r3, r3
 8027d74:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8027d78:	b2da      	uxtb	r2, r3
 8027d7a:	4b31      	ldr	r3, [pc, #196]	; (8027e40 <xPortStartScheduler+0x130>)
 8027d7c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8027d7e:	4b31      	ldr	r3, [pc, #196]	; (8027e44 <xPortStartScheduler+0x134>)
 8027d80:	2207      	movs	r2, #7
 8027d82:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8027d84:	e009      	b.n	8027d9a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8027d86:	4b2f      	ldr	r3, [pc, #188]	; (8027e44 <xPortStartScheduler+0x134>)
 8027d88:	681b      	ldr	r3, [r3, #0]
 8027d8a:	3b01      	subs	r3, #1
 8027d8c:	4a2d      	ldr	r2, [pc, #180]	; (8027e44 <xPortStartScheduler+0x134>)
 8027d8e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8027d90:	78fb      	ldrb	r3, [r7, #3]
 8027d92:	b2db      	uxtb	r3, r3
 8027d94:	005b      	lsls	r3, r3, #1
 8027d96:	b2db      	uxtb	r3, r3
 8027d98:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8027d9a:	78fb      	ldrb	r3, [r7, #3]
 8027d9c:	b2db      	uxtb	r3, r3
 8027d9e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8027da2:	2b80      	cmp	r3, #128	; 0x80
 8027da4:	d0ef      	beq.n	8027d86 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8027da6:	4b27      	ldr	r3, [pc, #156]	; (8027e44 <xPortStartScheduler+0x134>)
 8027da8:	681b      	ldr	r3, [r3, #0]
 8027daa:	f1c3 0307 	rsb	r3, r3, #7
 8027dae:	2b04      	cmp	r3, #4
 8027db0:	d00a      	beq.n	8027dc8 <xPortStartScheduler+0xb8>
	__asm volatile
 8027db2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8027db6:	f383 8811 	msr	BASEPRI, r3
 8027dba:	f3bf 8f6f 	isb	sy
 8027dbe:	f3bf 8f4f 	dsb	sy
 8027dc2:	60bb      	str	r3, [r7, #8]
}
 8027dc4:	bf00      	nop
 8027dc6:	e7fe      	b.n	8027dc6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8027dc8:	4b1e      	ldr	r3, [pc, #120]	; (8027e44 <xPortStartScheduler+0x134>)
 8027dca:	681b      	ldr	r3, [r3, #0]
 8027dcc:	021b      	lsls	r3, r3, #8
 8027dce:	4a1d      	ldr	r2, [pc, #116]	; (8027e44 <xPortStartScheduler+0x134>)
 8027dd0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8027dd2:	4b1c      	ldr	r3, [pc, #112]	; (8027e44 <xPortStartScheduler+0x134>)
 8027dd4:	681b      	ldr	r3, [r3, #0]
 8027dd6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8027dda:	4a1a      	ldr	r2, [pc, #104]	; (8027e44 <xPortStartScheduler+0x134>)
 8027ddc:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8027dde:	687b      	ldr	r3, [r7, #4]
 8027de0:	b2da      	uxtb	r2, r3
 8027de2:	697b      	ldr	r3, [r7, #20]
 8027de4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8027de6:	4b18      	ldr	r3, [pc, #96]	; (8027e48 <xPortStartScheduler+0x138>)
 8027de8:	681b      	ldr	r3, [r3, #0]
 8027dea:	4a17      	ldr	r2, [pc, #92]	; (8027e48 <xPortStartScheduler+0x138>)
 8027dec:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8027df0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8027df2:	4b15      	ldr	r3, [pc, #84]	; (8027e48 <xPortStartScheduler+0x138>)
 8027df4:	681b      	ldr	r3, [r3, #0]
 8027df6:	4a14      	ldr	r2, [pc, #80]	; (8027e48 <xPortStartScheduler+0x138>)
 8027df8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8027dfc:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8027dfe:	f000 f8dd 	bl	8027fbc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8027e02:	4b12      	ldr	r3, [pc, #72]	; (8027e4c <xPortStartScheduler+0x13c>)
 8027e04:	2200      	movs	r2, #0
 8027e06:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8027e08:	f000 f8fc 	bl	8028004 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8027e0c:	4b10      	ldr	r3, [pc, #64]	; (8027e50 <xPortStartScheduler+0x140>)
 8027e0e:	681b      	ldr	r3, [r3, #0]
 8027e10:	4a0f      	ldr	r2, [pc, #60]	; (8027e50 <xPortStartScheduler+0x140>)
 8027e12:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8027e16:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8027e18:	f7ff ff66 	bl	8027ce8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8027e1c:	f7ff fa88 	bl	8027330 <vTaskSwitchContext>
	prvTaskExitError();
 8027e20:	f7ff ff22 	bl	8027c68 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8027e24:	2300      	movs	r3, #0
}
 8027e26:	4618      	mov	r0, r3
 8027e28:	3718      	adds	r7, #24
 8027e2a:	46bd      	mov	sp, r7
 8027e2c:	bd80      	pop	{r7, pc}
 8027e2e:	bf00      	nop
 8027e30:	e000ed00 	.word	0xe000ed00
 8027e34:	410fc271 	.word	0x410fc271
 8027e38:	410fc270 	.word	0x410fc270
 8027e3c:	e000e400 	.word	0xe000e400
 8027e40:	20005264 	.word	0x20005264
 8027e44:	20005268 	.word	0x20005268
 8027e48:	e000ed20 	.word	0xe000ed20
 8027e4c:	20000024 	.word	0x20000024
 8027e50:	e000ef34 	.word	0xe000ef34

08027e54 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8027e54:	b480      	push	{r7}
 8027e56:	b083      	sub	sp, #12
 8027e58:	af00      	add	r7, sp, #0
	__asm volatile
 8027e5a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8027e5e:	f383 8811 	msr	BASEPRI, r3
 8027e62:	f3bf 8f6f 	isb	sy
 8027e66:	f3bf 8f4f 	dsb	sy
 8027e6a:	607b      	str	r3, [r7, #4]
}
 8027e6c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8027e6e:	4b0f      	ldr	r3, [pc, #60]	; (8027eac <vPortEnterCritical+0x58>)
 8027e70:	681b      	ldr	r3, [r3, #0]
 8027e72:	3301      	adds	r3, #1
 8027e74:	4a0d      	ldr	r2, [pc, #52]	; (8027eac <vPortEnterCritical+0x58>)
 8027e76:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8027e78:	4b0c      	ldr	r3, [pc, #48]	; (8027eac <vPortEnterCritical+0x58>)
 8027e7a:	681b      	ldr	r3, [r3, #0]
 8027e7c:	2b01      	cmp	r3, #1
 8027e7e:	d10f      	bne.n	8027ea0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8027e80:	4b0b      	ldr	r3, [pc, #44]	; (8027eb0 <vPortEnterCritical+0x5c>)
 8027e82:	681b      	ldr	r3, [r3, #0]
 8027e84:	b2db      	uxtb	r3, r3
 8027e86:	2b00      	cmp	r3, #0
 8027e88:	d00a      	beq.n	8027ea0 <vPortEnterCritical+0x4c>
	__asm volatile
 8027e8a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8027e8e:	f383 8811 	msr	BASEPRI, r3
 8027e92:	f3bf 8f6f 	isb	sy
 8027e96:	f3bf 8f4f 	dsb	sy
 8027e9a:	603b      	str	r3, [r7, #0]
}
 8027e9c:	bf00      	nop
 8027e9e:	e7fe      	b.n	8027e9e <vPortEnterCritical+0x4a>
	}
}
 8027ea0:	bf00      	nop
 8027ea2:	370c      	adds	r7, #12
 8027ea4:	46bd      	mov	sp, r7
 8027ea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8027eaa:	4770      	bx	lr
 8027eac:	20000024 	.word	0x20000024
 8027eb0:	e000ed04 	.word	0xe000ed04

08027eb4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8027eb4:	b480      	push	{r7}
 8027eb6:	b083      	sub	sp, #12
 8027eb8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8027eba:	4b12      	ldr	r3, [pc, #72]	; (8027f04 <vPortExitCritical+0x50>)
 8027ebc:	681b      	ldr	r3, [r3, #0]
 8027ebe:	2b00      	cmp	r3, #0
 8027ec0:	d10a      	bne.n	8027ed8 <vPortExitCritical+0x24>
	__asm volatile
 8027ec2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8027ec6:	f383 8811 	msr	BASEPRI, r3
 8027eca:	f3bf 8f6f 	isb	sy
 8027ece:	f3bf 8f4f 	dsb	sy
 8027ed2:	607b      	str	r3, [r7, #4]
}
 8027ed4:	bf00      	nop
 8027ed6:	e7fe      	b.n	8027ed6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8027ed8:	4b0a      	ldr	r3, [pc, #40]	; (8027f04 <vPortExitCritical+0x50>)
 8027eda:	681b      	ldr	r3, [r3, #0]
 8027edc:	3b01      	subs	r3, #1
 8027ede:	4a09      	ldr	r2, [pc, #36]	; (8027f04 <vPortExitCritical+0x50>)
 8027ee0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8027ee2:	4b08      	ldr	r3, [pc, #32]	; (8027f04 <vPortExitCritical+0x50>)
 8027ee4:	681b      	ldr	r3, [r3, #0]
 8027ee6:	2b00      	cmp	r3, #0
 8027ee8:	d105      	bne.n	8027ef6 <vPortExitCritical+0x42>
 8027eea:	2300      	movs	r3, #0
 8027eec:	603b      	str	r3, [r7, #0]
	__asm volatile
 8027eee:	683b      	ldr	r3, [r7, #0]
 8027ef0:	f383 8811 	msr	BASEPRI, r3
}
 8027ef4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8027ef6:	bf00      	nop
 8027ef8:	370c      	adds	r7, #12
 8027efa:	46bd      	mov	sp, r7
 8027efc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8027f00:	4770      	bx	lr
 8027f02:	bf00      	nop
 8027f04:	20000024 	.word	0x20000024
	...

08027f10 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8027f10:	f3ef 8009 	mrs	r0, PSP
 8027f14:	f3bf 8f6f 	isb	sy
 8027f18:	4b15      	ldr	r3, [pc, #84]	; (8027f70 <pxCurrentTCBConst>)
 8027f1a:	681a      	ldr	r2, [r3, #0]
 8027f1c:	f01e 0f10 	tst.w	lr, #16
 8027f20:	bf08      	it	eq
 8027f22:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8027f26:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8027f2a:	6010      	str	r0, [r2, #0]
 8027f2c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8027f30:	f04f 0050 	mov.w	r0, #80	; 0x50
 8027f34:	f380 8811 	msr	BASEPRI, r0
 8027f38:	f3bf 8f4f 	dsb	sy
 8027f3c:	f3bf 8f6f 	isb	sy
 8027f40:	f7ff f9f6 	bl	8027330 <vTaskSwitchContext>
 8027f44:	f04f 0000 	mov.w	r0, #0
 8027f48:	f380 8811 	msr	BASEPRI, r0
 8027f4c:	bc09      	pop	{r0, r3}
 8027f4e:	6819      	ldr	r1, [r3, #0]
 8027f50:	6808      	ldr	r0, [r1, #0]
 8027f52:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8027f56:	f01e 0f10 	tst.w	lr, #16
 8027f5a:	bf08      	it	eq
 8027f5c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8027f60:	f380 8809 	msr	PSP, r0
 8027f64:	f3bf 8f6f 	isb	sy
 8027f68:	4770      	bx	lr
 8027f6a:	bf00      	nop
 8027f6c:	f3af 8000 	nop.w

08027f70 <pxCurrentTCBConst>:
 8027f70:	20005084 	.word	0x20005084
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8027f74:	bf00      	nop
 8027f76:	bf00      	nop

08027f78 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8027f78:	b580      	push	{r7, lr}
 8027f7a:	b082      	sub	sp, #8
 8027f7c:	af00      	add	r7, sp, #0
	__asm volatile
 8027f7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8027f82:	f383 8811 	msr	BASEPRI, r3
 8027f86:	f3bf 8f6f 	isb	sy
 8027f8a:	f3bf 8f4f 	dsb	sy
 8027f8e:	607b      	str	r3, [r7, #4]
}
 8027f90:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8027f92:	f7ff f915 	bl	80271c0 <xTaskIncrementTick>
 8027f96:	4603      	mov	r3, r0
 8027f98:	2b00      	cmp	r3, #0
 8027f9a:	d003      	beq.n	8027fa4 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8027f9c:	4b06      	ldr	r3, [pc, #24]	; (8027fb8 <SysTick_Handler+0x40>)
 8027f9e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8027fa2:	601a      	str	r2, [r3, #0]
 8027fa4:	2300      	movs	r3, #0
 8027fa6:	603b      	str	r3, [r7, #0]
	__asm volatile
 8027fa8:	683b      	ldr	r3, [r7, #0]
 8027faa:	f383 8811 	msr	BASEPRI, r3
}
 8027fae:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8027fb0:	bf00      	nop
 8027fb2:	3708      	adds	r7, #8
 8027fb4:	46bd      	mov	sp, r7
 8027fb6:	bd80      	pop	{r7, pc}
 8027fb8:	e000ed04 	.word	0xe000ed04

08027fbc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8027fbc:	b480      	push	{r7}
 8027fbe:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8027fc0:	4b0b      	ldr	r3, [pc, #44]	; (8027ff0 <vPortSetupTimerInterrupt+0x34>)
 8027fc2:	2200      	movs	r2, #0
 8027fc4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8027fc6:	4b0b      	ldr	r3, [pc, #44]	; (8027ff4 <vPortSetupTimerInterrupt+0x38>)
 8027fc8:	2200      	movs	r2, #0
 8027fca:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8027fcc:	4b0a      	ldr	r3, [pc, #40]	; (8027ff8 <vPortSetupTimerInterrupt+0x3c>)
 8027fce:	681b      	ldr	r3, [r3, #0]
 8027fd0:	4a0a      	ldr	r2, [pc, #40]	; (8027ffc <vPortSetupTimerInterrupt+0x40>)
 8027fd2:	fba2 2303 	umull	r2, r3, r2, r3
 8027fd6:	099b      	lsrs	r3, r3, #6
 8027fd8:	4a09      	ldr	r2, [pc, #36]	; (8028000 <vPortSetupTimerInterrupt+0x44>)
 8027fda:	3b01      	subs	r3, #1
 8027fdc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8027fde:	4b04      	ldr	r3, [pc, #16]	; (8027ff0 <vPortSetupTimerInterrupt+0x34>)
 8027fe0:	2207      	movs	r2, #7
 8027fe2:	601a      	str	r2, [r3, #0]
}
 8027fe4:	bf00      	nop
 8027fe6:	46bd      	mov	sp, r7
 8027fe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8027fec:	4770      	bx	lr
 8027fee:	bf00      	nop
 8027ff0:	e000e010 	.word	0xe000e010
 8027ff4:	e000e018 	.word	0xe000e018
 8027ff8:	20000000 	.word	0x20000000
 8027ffc:	10624dd3 	.word	0x10624dd3
 8028000:	e000e014 	.word	0xe000e014

08028004 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8028004:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8028014 <vPortEnableVFP+0x10>
 8028008:	6801      	ldr	r1, [r0, #0]
 802800a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 802800e:	6001      	str	r1, [r0, #0]
 8028010:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8028012:	bf00      	nop
 8028014:	e000ed88 	.word	0xe000ed88

08028018 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8028018:	b480      	push	{r7}
 802801a:	b085      	sub	sp, #20
 802801c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 802801e:	f3ef 8305 	mrs	r3, IPSR
 8028022:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8028024:	68fb      	ldr	r3, [r7, #12]
 8028026:	2b0f      	cmp	r3, #15
 8028028:	d914      	bls.n	8028054 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 802802a:	4a17      	ldr	r2, [pc, #92]	; (8028088 <vPortValidateInterruptPriority+0x70>)
 802802c:	68fb      	ldr	r3, [r7, #12]
 802802e:	4413      	add	r3, r2
 8028030:	781b      	ldrb	r3, [r3, #0]
 8028032:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8028034:	4b15      	ldr	r3, [pc, #84]	; (802808c <vPortValidateInterruptPriority+0x74>)
 8028036:	781b      	ldrb	r3, [r3, #0]
 8028038:	7afa      	ldrb	r2, [r7, #11]
 802803a:	429a      	cmp	r2, r3
 802803c:	d20a      	bcs.n	8028054 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 802803e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8028042:	f383 8811 	msr	BASEPRI, r3
 8028046:	f3bf 8f6f 	isb	sy
 802804a:	f3bf 8f4f 	dsb	sy
 802804e:	607b      	str	r3, [r7, #4]
}
 8028050:	bf00      	nop
 8028052:	e7fe      	b.n	8028052 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8028054:	4b0e      	ldr	r3, [pc, #56]	; (8028090 <vPortValidateInterruptPriority+0x78>)
 8028056:	681b      	ldr	r3, [r3, #0]
 8028058:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 802805c:	4b0d      	ldr	r3, [pc, #52]	; (8028094 <vPortValidateInterruptPriority+0x7c>)
 802805e:	681b      	ldr	r3, [r3, #0]
 8028060:	429a      	cmp	r2, r3
 8028062:	d90a      	bls.n	802807a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8028064:	f04f 0350 	mov.w	r3, #80	; 0x50
 8028068:	f383 8811 	msr	BASEPRI, r3
 802806c:	f3bf 8f6f 	isb	sy
 8028070:	f3bf 8f4f 	dsb	sy
 8028074:	603b      	str	r3, [r7, #0]
}
 8028076:	bf00      	nop
 8028078:	e7fe      	b.n	8028078 <vPortValidateInterruptPriority+0x60>
	}
 802807a:	bf00      	nop
 802807c:	3714      	adds	r7, #20
 802807e:	46bd      	mov	sp, r7
 8028080:	f85d 7b04 	ldr.w	r7, [sp], #4
 8028084:	4770      	bx	lr
 8028086:	bf00      	nop
 8028088:	e000e3f0 	.word	0xe000e3f0
 802808c:	20005264 	.word	0x20005264
 8028090:	e000ed0c 	.word	0xe000ed0c
 8028094:	20005268 	.word	0x20005268

08028098 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8028098:	b580      	push	{r7, lr}
 802809a:	b08a      	sub	sp, #40	; 0x28
 802809c:	af00      	add	r7, sp, #0
 802809e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80280a0:	2300      	movs	r3, #0
 80280a2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80280a4:	f7fe ffc0 	bl	8027028 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80280a8:	4b5b      	ldr	r3, [pc, #364]	; (8028218 <pvPortMalloc+0x180>)
 80280aa:	681b      	ldr	r3, [r3, #0]
 80280ac:	2b00      	cmp	r3, #0
 80280ae:	d101      	bne.n	80280b4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80280b0:	f000 f920 	bl	80282f4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80280b4:	4b59      	ldr	r3, [pc, #356]	; (802821c <pvPortMalloc+0x184>)
 80280b6:	681a      	ldr	r2, [r3, #0]
 80280b8:	687b      	ldr	r3, [r7, #4]
 80280ba:	4013      	ands	r3, r2
 80280bc:	2b00      	cmp	r3, #0
 80280be:	f040 8093 	bne.w	80281e8 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80280c2:	687b      	ldr	r3, [r7, #4]
 80280c4:	2b00      	cmp	r3, #0
 80280c6:	d01d      	beq.n	8028104 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 80280c8:	2208      	movs	r2, #8
 80280ca:	687b      	ldr	r3, [r7, #4]
 80280cc:	4413      	add	r3, r2
 80280ce:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80280d0:	687b      	ldr	r3, [r7, #4]
 80280d2:	f003 0307 	and.w	r3, r3, #7
 80280d6:	2b00      	cmp	r3, #0
 80280d8:	d014      	beq.n	8028104 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80280da:	687b      	ldr	r3, [r7, #4]
 80280dc:	f023 0307 	bic.w	r3, r3, #7
 80280e0:	3308      	adds	r3, #8
 80280e2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80280e4:	687b      	ldr	r3, [r7, #4]
 80280e6:	f003 0307 	and.w	r3, r3, #7
 80280ea:	2b00      	cmp	r3, #0
 80280ec:	d00a      	beq.n	8028104 <pvPortMalloc+0x6c>
	__asm volatile
 80280ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80280f2:	f383 8811 	msr	BASEPRI, r3
 80280f6:	f3bf 8f6f 	isb	sy
 80280fa:	f3bf 8f4f 	dsb	sy
 80280fe:	617b      	str	r3, [r7, #20]
}
 8028100:	bf00      	nop
 8028102:	e7fe      	b.n	8028102 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8028104:	687b      	ldr	r3, [r7, #4]
 8028106:	2b00      	cmp	r3, #0
 8028108:	d06e      	beq.n	80281e8 <pvPortMalloc+0x150>
 802810a:	4b45      	ldr	r3, [pc, #276]	; (8028220 <pvPortMalloc+0x188>)
 802810c:	681b      	ldr	r3, [r3, #0]
 802810e:	687a      	ldr	r2, [r7, #4]
 8028110:	429a      	cmp	r2, r3
 8028112:	d869      	bhi.n	80281e8 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8028114:	4b43      	ldr	r3, [pc, #268]	; (8028224 <pvPortMalloc+0x18c>)
 8028116:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8028118:	4b42      	ldr	r3, [pc, #264]	; (8028224 <pvPortMalloc+0x18c>)
 802811a:	681b      	ldr	r3, [r3, #0]
 802811c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 802811e:	e004      	b.n	802812a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8028120:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8028122:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8028124:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8028126:	681b      	ldr	r3, [r3, #0]
 8028128:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 802812a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802812c:	685b      	ldr	r3, [r3, #4]
 802812e:	687a      	ldr	r2, [r7, #4]
 8028130:	429a      	cmp	r2, r3
 8028132:	d903      	bls.n	802813c <pvPortMalloc+0xa4>
 8028134:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8028136:	681b      	ldr	r3, [r3, #0]
 8028138:	2b00      	cmp	r3, #0
 802813a:	d1f1      	bne.n	8028120 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 802813c:	4b36      	ldr	r3, [pc, #216]	; (8028218 <pvPortMalloc+0x180>)
 802813e:	681b      	ldr	r3, [r3, #0]
 8028140:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8028142:	429a      	cmp	r2, r3
 8028144:	d050      	beq.n	80281e8 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8028146:	6a3b      	ldr	r3, [r7, #32]
 8028148:	681b      	ldr	r3, [r3, #0]
 802814a:	2208      	movs	r2, #8
 802814c:	4413      	add	r3, r2
 802814e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8028150:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8028152:	681a      	ldr	r2, [r3, #0]
 8028154:	6a3b      	ldr	r3, [r7, #32]
 8028156:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8028158:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802815a:	685a      	ldr	r2, [r3, #4]
 802815c:	687b      	ldr	r3, [r7, #4]
 802815e:	1ad2      	subs	r2, r2, r3
 8028160:	2308      	movs	r3, #8
 8028162:	005b      	lsls	r3, r3, #1
 8028164:	429a      	cmp	r2, r3
 8028166:	d91f      	bls.n	80281a8 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8028168:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 802816a:	687b      	ldr	r3, [r7, #4]
 802816c:	4413      	add	r3, r2
 802816e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8028170:	69bb      	ldr	r3, [r7, #24]
 8028172:	f003 0307 	and.w	r3, r3, #7
 8028176:	2b00      	cmp	r3, #0
 8028178:	d00a      	beq.n	8028190 <pvPortMalloc+0xf8>
	__asm volatile
 802817a:	f04f 0350 	mov.w	r3, #80	; 0x50
 802817e:	f383 8811 	msr	BASEPRI, r3
 8028182:	f3bf 8f6f 	isb	sy
 8028186:	f3bf 8f4f 	dsb	sy
 802818a:	613b      	str	r3, [r7, #16]
}
 802818c:	bf00      	nop
 802818e:	e7fe      	b.n	802818e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8028190:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8028192:	685a      	ldr	r2, [r3, #4]
 8028194:	687b      	ldr	r3, [r7, #4]
 8028196:	1ad2      	subs	r2, r2, r3
 8028198:	69bb      	ldr	r3, [r7, #24]
 802819a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 802819c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802819e:	687a      	ldr	r2, [r7, #4]
 80281a0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80281a2:	69b8      	ldr	r0, [r7, #24]
 80281a4:	f000 f908 	bl	80283b8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80281a8:	4b1d      	ldr	r3, [pc, #116]	; (8028220 <pvPortMalloc+0x188>)
 80281aa:	681a      	ldr	r2, [r3, #0]
 80281ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80281ae:	685b      	ldr	r3, [r3, #4]
 80281b0:	1ad3      	subs	r3, r2, r3
 80281b2:	4a1b      	ldr	r2, [pc, #108]	; (8028220 <pvPortMalloc+0x188>)
 80281b4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80281b6:	4b1a      	ldr	r3, [pc, #104]	; (8028220 <pvPortMalloc+0x188>)
 80281b8:	681a      	ldr	r2, [r3, #0]
 80281ba:	4b1b      	ldr	r3, [pc, #108]	; (8028228 <pvPortMalloc+0x190>)
 80281bc:	681b      	ldr	r3, [r3, #0]
 80281be:	429a      	cmp	r2, r3
 80281c0:	d203      	bcs.n	80281ca <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80281c2:	4b17      	ldr	r3, [pc, #92]	; (8028220 <pvPortMalloc+0x188>)
 80281c4:	681b      	ldr	r3, [r3, #0]
 80281c6:	4a18      	ldr	r2, [pc, #96]	; (8028228 <pvPortMalloc+0x190>)
 80281c8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80281ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80281cc:	685a      	ldr	r2, [r3, #4]
 80281ce:	4b13      	ldr	r3, [pc, #76]	; (802821c <pvPortMalloc+0x184>)
 80281d0:	681b      	ldr	r3, [r3, #0]
 80281d2:	431a      	orrs	r2, r3
 80281d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80281d6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80281d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80281da:	2200      	movs	r2, #0
 80281dc:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 80281de:	4b13      	ldr	r3, [pc, #76]	; (802822c <pvPortMalloc+0x194>)
 80281e0:	681b      	ldr	r3, [r3, #0]
 80281e2:	3301      	adds	r3, #1
 80281e4:	4a11      	ldr	r2, [pc, #68]	; (802822c <pvPortMalloc+0x194>)
 80281e6:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80281e8:	f7fe ff2c 	bl	8027044 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80281ec:	69fb      	ldr	r3, [r7, #28]
 80281ee:	f003 0307 	and.w	r3, r3, #7
 80281f2:	2b00      	cmp	r3, #0
 80281f4:	d00a      	beq.n	802820c <pvPortMalloc+0x174>
	__asm volatile
 80281f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80281fa:	f383 8811 	msr	BASEPRI, r3
 80281fe:	f3bf 8f6f 	isb	sy
 8028202:	f3bf 8f4f 	dsb	sy
 8028206:	60fb      	str	r3, [r7, #12]
}
 8028208:	bf00      	nop
 802820a:	e7fe      	b.n	802820a <pvPortMalloc+0x172>
	return pvReturn;
 802820c:	69fb      	ldr	r3, [r7, #28]
}
 802820e:	4618      	mov	r0, r3
 8028210:	3728      	adds	r7, #40	; 0x28
 8028212:	46bd      	mov	sp, r7
 8028214:	bd80      	pop	{r7, pc}
 8028216:	bf00      	nop
 8028218:	2000b274 	.word	0x2000b274
 802821c:	2000b288 	.word	0x2000b288
 8028220:	2000b278 	.word	0x2000b278
 8028224:	2000b26c 	.word	0x2000b26c
 8028228:	2000b27c 	.word	0x2000b27c
 802822c:	2000b280 	.word	0x2000b280

08028230 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8028230:	b580      	push	{r7, lr}
 8028232:	b086      	sub	sp, #24
 8028234:	af00      	add	r7, sp, #0
 8028236:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8028238:	687b      	ldr	r3, [r7, #4]
 802823a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 802823c:	687b      	ldr	r3, [r7, #4]
 802823e:	2b00      	cmp	r3, #0
 8028240:	d04d      	beq.n	80282de <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8028242:	2308      	movs	r3, #8
 8028244:	425b      	negs	r3, r3
 8028246:	697a      	ldr	r2, [r7, #20]
 8028248:	4413      	add	r3, r2
 802824a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 802824c:	697b      	ldr	r3, [r7, #20]
 802824e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8028250:	693b      	ldr	r3, [r7, #16]
 8028252:	685a      	ldr	r2, [r3, #4]
 8028254:	4b24      	ldr	r3, [pc, #144]	; (80282e8 <vPortFree+0xb8>)
 8028256:	681b      	ldr	r3, [r3, #0]
 8028258:	4013      	ands	r3, r2
 802825a:	2b00      	cmp	r3, #0
 802825c:	d10a      	bne.n	8028274 <vPortFree+0x44>
	__asm volatile
 802825e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8028262:	f383 8811 	msr	BASEPRI, r3
 8028266:	f3bf 8f6f 	isb	sy
 802826a:	f3bf 8f4f 	dsb	sy
 802826e:	60fb      	str	r3, [r7, #12]
}
 8028270:	bf00      	nop
 8028272:	e7fe      	b.n	8028272 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8028274:	693b      	ldr	r3, [r7, #16]
 8028276:	681b      	ldr	r3, [r3, #0]
 8028278:	2b00      	cmp	r3, #0
 802827a:	d00a      	beq.n	8028292 <vPortFree+0x62>
	__asm volatile
 802827c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8028280:	f383 8811 	msr	BASEPRI, r3
 8028284:	f3bf 8f6f 	isb	sy
 8028288:	f3bf 8f4f 	dsb	sy
 802828c:	60bb      	str	r3, [r7, #8]
}
 802828e:	bf00      	nop
 8028290:	e7fe      	b.n	8028290 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8028292:	693b      	ldr	r3, [r7, #16]
 8028294:	685a      	ldr	r2, [r3, #4]
 8028296:	4b14      	ldr	r3, [pc, #80]	; (80282e8 <vPortFree+0xb8>)
 8028298:	681b      	ldr	r3, [r3, #0]
 802829a:	4013      	ands	r3, r2
 802829c:	2b00      	cmp	r3, #0
 802829e:	d01e      	beq.n	80282de <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80282a0:	693b      	ldr	r3, [r7, #16]
 80282a2:	681b      	ldr	r3, [r3, #0]
 80282a4:	2b00      	cmp	r3, #0
 80282a6:	d11a      	bne.n	80282de <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80282a8:	693b      	ldr	r3, [r7, #16]
 80282aa:	685a      	ldr	r2, [r3, #4]
 80282ac:	4b0e      	ldr	r3, [pc, #56]	; (80282e8 <vPortFree+0xb8>)
 80282ae:	681b      	ldr	r3, [r3, #0]
 80282b0:	43db      	mvns	r3, r3
 80282b2:	401a      	ands	r2, r3
 80282b4:	693b      	ldr	r3, [r7, #16]
 80282b6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80282b8:	f7fe feb6 	bl	8027028 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80282bc:	693b      	ldr	r3, [r7, #16]
 80282be:	685a      	ldr	r2, [r3, #4]
 80282c0:	4b0a      	ldr	r3, [pc, #40]	; (80282ec <vPortFree+0xbc>)
 80282c2:	681b      	ldr	r3, [r3, #0]
 80282c4:	4413      	add	r3, r2
 80282c6:	4a09      	ldr	r2, [pc, #36]	; (80282ec <vPortFree+0xbc>)
 80282c8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80282ca:	6938      	ldr	r0, [r7, #16]
 80282cc:	f000 f874 	bl	80283b8 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 80282d0:	4b07      	ldr	r3, [pc, #28]	; (80282f0 <vPortFree+0xc0>)
 80282d2:	681b      	ldr	r3, [r3, #0]
 80282d4:	3301      	adds	r3, #1
 80282d6:	4a06      	ldr	r2, [pc, #24]	; (80282f0 <vPortFree+0xc0>)
 80282d8:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 80282da:	f7fe feb3 	bl	8027044 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80282de:	bf00      	nop
 80282e0:	3718      	adds	r7, #24
 80282e2:	46bd      	mov	sp, r7
 80282e4:	bd80      	pop	{r7, pc}
 80282e6:	bf00      	nop
 80282e8:	2000b288 	.word	0x2000b288
 80282ec:	2000b278 	.word	0x2000b278
 80282f0:	2000b284 	.word	0x2000b284

080282f4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80282f4:	b480      	push	{r7}
 80282f6:	b085      	sub	sp, #20
 80282f8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80282fa:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 80282fe:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8028300:	4b27      	ldr	r3, [pc, #156]	; (80283a0 <prvHeapInit+0xac>)
 8028302:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8028304:	68fb      	ldr	r3, [r7, #12]
 8028306:	f003 0307 	and.w	r3, r3, #7
 802830a:	2b00      	cmp	r3, #0
 802830c:	d00c      	beq.n	8028328 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 802830e:	68fb      	ldr	r3, [r7, #12]
 8028310:	3307      	adds	r3, #7
 8028312:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8028314:	68fb      	ldr	r3, [r7, #12]
 8028316:	f023 0307 	bic.w	r3, r3, #7
 802831a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 802831c:	68ba      	ldr	r2, [r7, #8]
 802831e:	68fb      	ldr	r3, [r7, #12]
 8028320:	1ad3      	subs	r3, r2, r3
 8028322:	4a1f      	ldr	r2, [pc, #124]	; (80283a0 <prvHeapInit+0xac>)
 8028324:	4413      	add	r3, r2
 8028326:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8028328:	68fb      	ldr	r3, [r7, #12]
 802832a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 802832c:	4a1d      	ldr	r2, [pc, #116]	; (80283a4 <prvHeapInit+0xb0>)
 802832e:	687b      	ldr	r3, [r7, #4]
 8028330:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8028332:	4b1c      	ldr	r3, [pc, #112]	; (80283a4 <prvHeapInit+0xb0>)
 8028334:	2200      	movs	r2, #0
 8028336:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8028338:	687b      	ldr	r3, [r7, #4]
 802833a:	68ba      	ldr	r2, [r7, #8]
 802833c:	4413      	add	r3, r2
 802833e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8028340:	2208      	movs	r2, #8
 8028342:	68fb      	ldr	r3, [r7, #12]
 8028344:	1a9b      	subs	r3, r3, r2
 8028346:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8028348:	68fb      	ldr	r3, [r7, #12]
 802834a:	f023 0307 	bic.w	r3, r3, #7
 802834e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8028350:	68fb      	ldr	r3, [r7, #12]
 8028352:	4a15      	ldr	r2, [pc, #84]	; (80283a8 <prvHeapInit+0xb4>)
 8028354:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8028356:	4b14      	ldr	r3, [pc, #80]	; (80283a8 <prvHeapInit+0xb4>)
 8028358:	681b      	ldr	r3, [r3, #0]
 802835a:	2200      	movs	r2, #0
 802835c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 802835e:	4b12      	ldr	r3, [pc, #72]	; (80283a8 <prvHeapInit+0xb4>)
 8028360:	681b      	ldr	r3, [r3, #0]
 8028362:	2200      	movs	r2, #0
 8028364:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8028366:	687b      	ldr	r3, [r7, #4]
 8028368:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 802836a:	683b      	ldr	r3, [r7, #0]
 802836c:	68fa      	ldr	r2, [r7, #12]
 802836e:	1ad2      	subs	r2, r2, r3
 8028370:	683b      	ldr	r3, [r7, #0]
 8028372:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8028374:	4b0c      	ldr	r3, [pc, #48]	; (80283a8 <prvHeapInit+0xb4>)
 8028376:	681a      	ldr	r2, [r3, #0]
 8028378:	683b      	ldr	r3, [r7, #0]
 802837a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 802837c:	683b      	ldr	r3, [r7, #0]
 802837e:	685b      	ldr	r3, [r3, #4]
 8028380:	4a0a      	ldr	r2, [pc, #40]	; (80283ac <prvHeapInit+0xb8>)
 8028382:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8028384:	683b      	ldr	r3, [r7, #0]
 8028386:	685b      	ldr	r3, [r3, #4]
 8028388:	4a09      	ldr	r2, [pc, #36]	; (80283b0 <prvHeapInit+0xbc>)
 802838a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 802838c:	4b09      	ldr	r3, [pc, #36]	; (80283b4 <prvHeapInit+0xc0>)
 802838e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8028392:	601a      	str	r2, [r3, #0]
}
 8028394:	bf00      	nop
 8028396:	3714      	adds	r7, #20
 8028398:	46bd      	mov	sp, r7
 802839a:	f85d 7b04 	ldr.w	r7, [sp], #4
 802839e:	4770      	bx	lr
 80283a0:	2000526c 	.word	0x2000526c
 80283a4:	2000b26c 	.word	0x2000b26c
 80283a8:	2000b274 	.word	0x2000b274
 80283ac:	2000b27c 	.word	0x2000b27c
 80283b0:	2000b278 	.word	0x2000b278
 80283b4:	2000b288 	.word	0x2000b288

080283b8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80283b8:	b480      	push	{r7}
 80283ba:	b085      	sub	sp, #20
 80283bc:	af00      	add	r7, sp, #0
 80283be:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80283c0:	4b28      	ldr	r3, [pc, #160]	; (8028464 <prvInsertBlockIntoFreeList+0xac>)
 80283c2:	60fb      	str	r3, [r7, #12]
 80283c4:	e002      	b.n	80283cc <prvInsertBlockIntoFreeList+0x14>
 80283c6:	68fb      	ldr	r3, [r7, #12]
 80283c8:	681b      	ldr	r3, [r3, #0]
 80283ca:	60fb      	str	r3, [r7, #12]
 80283cc:	68fb      	ldr	r3, [r7, #12]
 80283ce:	681b      	ldr	r3, [r3, #0]
 80283d0:	687a      	ldr	r2, [r7, #4]
 80283d2:	429a      	cmp	r2, r3
 80283d4:	d8f7      	bhi.n	80283c6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80283d6:	68fb      	ldr	r3, [r7, #12]
 80283d8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80283da:	68fb      	ldr	r3, [r7, #12]
 80283dc:	685b      	ldr	r3, [r3, #4]
 80283de:	68ba      	ldr	r2, [r7, #8]
 80283e0:	4413      	add	r3, r2
 80283e2:	687a      	ldr	r2, [r7, #4]
 80283e4:	429a      	cmp	r2, r3
 80283e6:	d108      	bne.n	80283fa <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80283e8:	68fb      	ldr	r3, [r7, #12]
 80283ea:	685a      	ldr	r2, [r3, #4]
 80283ec:	687b      	ldr	r3, [r7, #4]
 80283ee:	685b      	ldr	r3, [r3, #4]
 80283f0:	441a      	add	r2, r3
 80283f2:	68fb      	ldr	r3, [r7, #12]
 80283f4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80283f6:	68fb      	ldr	r3, [r7, #12]
 80283f8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80283fa:	687b      	ldr	r3, [r7, #4]
 80283fc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80283fe:	687b      	ldr	r3, [r7, #4]
 8028400:	685b      	ldr	r3, [r3, #4]
 8028402:	68ba      	ldr	r2, [r7, #8]
 8028404:	441a      	add	r2, r3
 8028406:	68fb      	ldr	r3, [r7, #12]
 8028408:	681b      	ldr	r3, [r3, #0]
 802840a:	429a      	cmp	r2, r3
 802840c:	d118      	bne.n	8028440 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 802840e:	68fb      	ldr	r3, [r7, #12]
 8028410:	681a      	ldr	r2, [r3, #0]
 8028412:	4b15      	ldr	r3, [pc, #84]	; (8028468 <prvInsertBlockIntoFreeList+0xb0>)
 8028414:	681b      	ldr	r3, [r3, #0]
 8028416:	429a      	cmp	r2, r3
 8028418:	d00d      	beq.n	8028436 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 802841a:	687b      	ldr	r3, [r7, #4]
 802841c:	685a      	ldr	r2, [r3, #4]
 802841e:	68fb      	ldr	r3, [r7, #12]
 8028420:	681b      	ldr	r3, [r3, #0]
 8028422:	685b      	ldr	r3, [r3, #4]
 8028424:	441a      	add	r2, r3
 8028426:	687b      	ldr	r3, [r7, #4]
 8028428:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 802842a:	68fb      	ldr	r3, [r7, #12]
 802842c:	681b      	ldr	r3, [r3, #0]
 802842e:	681a      	ldr	r2, [r3, #0]
 8028430:	687b      	ldr	r3, [r7, #4]
 8028432:	601a      	str	r2, [r3, #0]
 8028434:	e008      	b.n	8028448 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8028436:	4b0c      	ldr	r3, [pc, #48]	; (8028468 <prvInsertBlockIntoFreeList+0xb0>)
 8028438:	681a      	ldr	r2, [r3, #0]
 802843a:	687b      	ldr	r3, [r7, #4]
 802843c:	601a      	str	r2, [r3, #0]
 802843e:	e003      	b.n	8028448 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8028440:	68fb      	ldr	r3, [r7, #12]
 8028442:	681a      	ldr	r2, [r3, #0]
 8028444:	687b      	ldr	r3, [r7, #4]
 8028446:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8028448:	68fa      	ldr	r2, [r7, #12]
 802844a:	687b      	ldr	r3, [r7, #4]
 802844c:	429a      	cmp	r2, r3
 802844e:	d002      	beq.n	8028456 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8028450:	68fb      	ldr	r3, [r7, #12]
 8028452:	687a      	ldr	r2, [r7, #4]
 8028454:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8028456:	bf00      	nop
 8028458:	3714      	adds	r7, #20
 802845a:	46bd      	mov	sp, r7
 802845c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8028460:	4770      	bx	lr
 8028462:	bf00      	nop
 8028464:	2000b26c 	.word	0x2000b26c
 8028468:	2000b274 	.word	0x2000b274

0802846c <netconn_apimsg>:
 * @param apimsg a struct containing the function to call and its parameters
 * @return ERR_OK if the function was called, another err_t if not
 */
static err_t
netconn_apimsg(tcpip_callback_fn fn, struct api_msg *apimsg)
{
 802846c:	b580      	push	{r7, lr}
 802846e:	b084      	sub	sp, #16
 8028470:	af00      	add	r7, sp, #0
 8028472:	6078      	str	r0, [r7, #4]
 8028474:	6039      	str	r1, [r7, #0]

#if LWIP_NETCONN_SEM_PER_THREAD
  apimsg->op_completed_sem = LWIP_NETCONN_THREAD_SEM_GET();
#endif /* LWIP_NETCONN_SEM_PER_THREAD */

  err = tcpip_send_msg_wait_sem(fn, apimsg, LWIP_API_MSG_SEM(apimsg));
 8028476:	683b      	ldr	r3, [r7, #0]
 8028478:	681b      	ldr	r3, [r3, #0]
 802847a:	330c      	adds	r3, #12
 802847c:	461a      	mov	r2, r3
 802847e:	6839      	ldr	r1, [r7, #0]
 8028480:	6878      	ldr	r0, [r7, #4]
 8028482:	f004 f9ef 	bl	802c864 <tcpip_send_msg_wait_sem>
 8028486:	4603      	mov	r3, r0
 8028488:	73fb      	strb	r3, [r7, #15]
  if (err == ERR_OK) {
 802848a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 802848e:	2b00      	cmp	r3, #0
 8028490:	d103      	bne.n	802849a <netconn_apimsg+0x2e>
    return apimsg->err;
 8028492:	683b      	ldr	r3, [r7, #0]
 8028494:	f993 3004 	ldrsb.w	r3, [r3, #4]
 8028498:	e001      	b.n	802849e <netconn_apimsg+0x32>
  }
  return err;
 802849a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 802849e:	4618      	mov	r0, r3
 80284a0:	3710      	adds	r7, #16
 80284a2:	46bd      	mov	sp, r7
 80284a4:	bd80      	pop	{r7, pc}
	...

080284a8 <netconn_new_with_proto_and_callback>:
 * @return a newly allocated struct netconn or
 *         NULL on memory error
 */
struct netconn *
netconn_new_with_proto_and_callback(enum netconn_type t, u8_t proto, netconn_callback callback)
{
 80284a8:	b580      	push	{r7, lr}
 80284aa:	b08c      	sub	sp, #48	; 0x30
 80284ac:	af00      	add	r7, sp, #0
 80284ae:	4603      	mov	r3, r0
 80284b0:	603a      	str	r2, [r7, #0]
 80284b2:	71fb      	strb	r3, [r7, #7]
 80284b4:	460b      	mov	r3, r1
 80284b6:	71bb      	strb	r3, [r7, #6]
  struct netconn *conn;
  API_MSG_VAR_DECLARE(msg);
  API_MSG_VAR_ALLOC_RETURN_NULL(msg);

  conn = netconn_alloc(t, callback);
 80284b8:	79fb      	ldrb	r3, [r7, #7]
 80284ba:	6839      	ldr	r1, [r7, #0]
 80284bc:	4618      	mov	r0, r3
 80284be:	f001 f9c9 	bl	8029854 <netconn_alloc>
 80284c2:	62f8      	str	r0, [r7, #44]	; 0x2c
  if (conn != NULL) {
 80284c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80284c6:	2b00      	cmp	r3, #0
 80284c8:	d054      	beq.n	8028574 <netconn_new_with_proto_and_callback+0xcc>
    err_t err;

    API_MSG_VAR_REF(msg).msg.n.proto = proto;
 80284ca:	79bb      	ldrb	r3, [r7, #6]
 80284cc:	743b      	strb	r3, [r7, #16]
    API_MSG_VAR_REF(msg).conn = conn;
 80284ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80284d0:	60bb      	str	r3, [r7, #8]
    err = netconn_apimsg(lwip_netconn_do_newconn, &API_MSG_VAR_REF(msg));
 80284d2:	f107 0308 	add.w	r3, r7, #8
 80284d6:	4619      	mov	r1, r3
 80284d8:	4829      	ldr	r0, [pc, #164]	; (8028580 <netconn_new_with_proto_and_callback+0xd8>)
 80284da:	f7ff ffc7 	bl	802846c <netconn_apimsg>
 80284de:	4603      	mov	r3, r0
 80284e0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    if (err != ERR_OK) {
 80284e4:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 80284e8:	2b00      	cmp	r3, #0
 80284ea:	d043      	beq.n	8028574 <netconn_new_with_proto_and_callback+0xcc>
      LWIP_ASSERT("freeing conn without freeing pcb", conn->pcb.tcp == NULL);
 80284ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80284ee:	685b      	ldr	r3, [r3, #4]
 80284f0:	2b00      	cmp	r3, #0
 80284f2:	d005      	beq.n	8028500 <netconn_new_with_proto_and_callback+0x58>
 80284f4:	4b23      	ldr	r3, [pc, #140]	; (8028584 <netconn_new_with_proto_and_callback+0xdc>)
 80284f6:	22a3      	movs	r2, #163	; 0xa3
 80284f8:	4923      	ldr	r1, [pc, #140]	; (8028588 <netconn_new_with_proto_and_callback+0xe0>)
 80284fa:	4824      	ldr	r0, [pc, #144]	; (802858c <netconn_new_with_proto_and_callback+0xe4>)
 80284fc:	f010 fdb4 	bl	8039068 <iprintf>
      LWIP_ASSERT("conn has no recvmbox", sys_mbox_valid(&conn->recvmbox));
 8028500:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8028502:	3310      	adds	r3, #16
 8028504:	4618      	mov	r0, r3
 8028506:	f00f feba 	bl	803827e <sys_mbox_valid>
 802850a:	4603      	mov	r3, r0
 802850c:	2b00      	cmp	r3, #0
 802850e:	d105      	bne.n	802851c <netconn_new_with_proto_and_callback+0x74>
 8028510:	4b1c      	ldr	r3, [pc, #112]	; (8028584 <netconn_new_with_proto_and_callback+0xdc>)
 8028512:	22a4      	movs	r2, #164	; 0xa4
 8028514:	491e      	ldr	r1, [pc, #120]	; (8028590 <netconn_new_with_proto_and_callback+0xe8>)
 8028516:	481d      	ldr	r0, [pc, #116]	; (802858c <netconn_new_with_proto_and_callback+0xe4>)
 8028518:	f010 fda6 	bl	8039068 <iprintf>
#if LWIP_TCP
      LWIP_ASSERT("conn->acceptmbox shouldn't exist", !sys_mbox_valid(&conn->acceptmbox));
 802851c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 802851e:	3314      	adds	r3, #20
 8028520:	4618      	mov	r0, r3
 8028522:	f00f feac 	bl	803827e <sys_mbox_valid>
 8028526:	4603      	mov	r3, r0
 8028528:	2b00      	cmp	r3, #0
 802852a:	d005      	beq.n	8028538 <netconn_new_with_proto_and_callback+0x90>
 802852c:	4b15      	ldr	r3, [pc, #84]	; (8028584 <netconn_new_with_proto_and_callback+0xdc>)
 802852e:	22a6      	movs	r2, #166	; 0xa6
 8028530:	4918      	ldr	r1, [pc, #96]	; (8028594 <netconn_new_with_proto_and_callback+0xec>)
 8028532:	4816      	ldr	r0, [pc, #88]	; (802858c <netconn_new_with_proto_and_callback+0xe4>)
 8028534:	f010 fd98 	bl	8039068 <iprintf>
#endif /* LWIP_TCP */
#if !LWIP_NETCONN_SEM_PER_THREAD
      LWIP_ASSERT("conn has no op_completed", sys_sem_valid(&conn->op_completed));
 8028538:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 802853a:	330c      	adds	r3, #12
 802853c:	4618      	mov	r0, r3
 802853e:	f00f ff5b 	bl	80383f8 <sys_sem_valid>
 8028542:	4603      	mov	r3, r0
 8028544:	2b00      	cmp	r3, #0
 8028546:	d105      	bne.n	8028554 <netconn_new_with_proto_and_callback+0xac>
 8028548:	4b0e      	ldr	r3, [pc, #56]	; (8028584 <netconn_new_with_proto_and_callback+0xdc>)
 802854a:	22a9      	movs	r2, #169	; 0xa9
 802854c:	4912      	ldr	r1, [pc, #72]	; (8028598 <netconn_new_with_proto_and_callback+0xf0>)
 802854e:	480f      	ldr	r0, [pc, #60]	; (802858c <netconn_new_with_proto_and_callback+0xe4>)
 8028550:	f010 fd8a 	bl	8039068 <iprintf>
      sys_sem_free(&conn->op_completed);
 8028554:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8028556:	330c      	adds	r3, #12
 8028558:	4618      	mov	r0, r3
 802855a:	f00f ff35 	bl	80383c8 <sys_sem_free>
#endif /* !LWIP_NETCONN_SEM_PER_THREAD */
      sys_mbox_free(&conn->recvmbox);
 802855e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8028560:	3310      	adds	r3, #16
 8028562:	4618      	mov	r0, r3
 8028564:	f00f fde4 	bl	8038130 <sys_mbox_free>
      memp_free(MEMP_NETCONN, conn);
 8028568:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 802856a:	2007      	movs	r0, #7
 802856c:	f004 fff8 	bl	802d560 <memp_free>
      API_MSG_VAR_FREE(msg);
      return NULL;
 8028570:	2300      	movs	r3, #0
 8028572:	e000      	b.n	8028576 <netconn_new_with_proto_and_callback+0xce>
    }
  }
  API_MSG_VAR_FREE(msg);
  return conn;
 8028574:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 8028576:	4618      	mov	r0, r3
 8028578:	3730      	adds	r7, #48	; 0x30
 802857a:	46bd      	mov	sp, r7
 802857c:	bd80      	pop	{r7, pc}
 802857e:	bf00      	nop
 8028580:	08029829 	.word	0x08029829
 8028584:	08039bb4 	.word	0x08039bb4
 8028588:	08039be8 	.word	0x08039be8
 802858c:	08039c0c 	.word	0x08039c0c
 8028590:	08039c34 	.word	0x08039c34
 8028594:	08039c4c 	.word	0x08039c4c
 8028598:	08039c70 	.word	0x08039c70

0802859c <netconn_prepare_delete>:
 * @param conn the netconn to delete
 * @return ERR_OK if the connection was deleted
 */
err_t
netconn_prepare_delete(struct netconn *conn)
{
 802859c:	b580      	push	{r7, lr}
 802859e:	b08c      	sub	sp, #48	; 0x30
 80285a0:	af00      	add	r7, sp, #0
 80285a2:	6078      	str	r0, [r7, #4]
  err_t err;
  API_MSG_VAR_DECLARE(msg);

  /* No ASSERT here because possible to get a (conn == NULL) if we got an accept error */
  if (conn == NULL) {
 80285a4:	687b      	ldr	r3, [r7, #4]
 80285a6:	2b00      	cmp	r3, #0
 80285a8:	d101      	bne.n	80285ae <netconn_prepare_delete+0x12>
    return ERR_OK;
 80285aa:	2300      	movs	r3, #0
 80285ac:	e014      	b.n	80285d8 <netconn_prepare_delete+0x3c>
  }

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
 80285ae:	687b      	ldr	r3, [r7, #4]
 80285b0:	60fb      	str	r3, [r7, #12]
  /* get the time we started, which is later compared to
     sys_now() + conn->send_timeout */
  API_MSG_VAR_REF(msg).msg.sd.time_started = sys_now();
#else /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
#if LWIP_TCP
  API_MSG_VAR_REF(msg).msg.sd.polls_left =
 80285b2:	2329      	movs	r3, #41	; 0x29
 80285b4:	757b      	strb	r3, [r7, #21]
    ((LWIP_TCP_CLOSE_TIMEOUT_MS_DEFAULT + TCP_SLOW_INTERVAL - 1) / TCP_SLOW_INTERVAL) + 1;
#endif /* LWIP_TCP */
#endif /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
  err = netconn_apimsg(lwip_netconn_do_delconn, &API_MSG_VAR_REF(msg));
 80285b6:	f107 030c 	add.w	r3, r7, #12
 80285ba:	4619      	mov	r1, r3
 80285bc:	4808      	ldr	r0, [pc, #32]	; (80285e0 <netconn_prepare_delete+0x44>)
 80285be:	f7ff ff55 	bl	802846c <netconn_apimsg>
 80285c2:	4603      	mov	r3, r0
 80285c4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  API_MSG_VAR_FREE(msg);

  if (err != ERR_OK) {
 80285c8:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 80285cc:	2b00      	cmp	r3, #0
 80285ce:	d002      	beq.n	80285d6 <netconn_prepare_delete+0x3a>
    return err;
 80285d0:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 80285d4:	e000      	b.n	80285d8 <netconn_prepare_delete+0x3c>
  }
  return ERR_OK;
 80285d6:	2300      	movs	r3, #0
}
 80285d8:	4618      	mov	r0, r3
 80285da:	3730      	adds	r7, #48	; 0x30
 80285dc:	46bd      	mov	sp, r7
 80285de:	bd80      	pop	{r7, pc}
 80285e0:	08029d9d 	.word	0x08029d9d

080285e4 <netconn_delete>:
 * @param conn the netconn to delete
 * @return ERR_OK if the connection was deleted
 */
err_t
netconn_delete(struct netconn *conn)
{
 80285e4:	b580      	push	{r7, lr}
 80285e6:	b084      	sub	sp, #16
 80285e8:	af00      	add	r7, sp, #0
 80285ea:	6078      	str	r0, [r7, #4]
  err_t err;

  /* No ASSERT here because possible to get a (conn == NULL) if we got an accept error */
  if (conn == NULL) {
 80285ec:	687b      	ldr	r3, [r7, #4]
 80285ee:	2b00      	cmp	r3, #0
 80285f0:	d101      	bne.n	80285f6 <netconn_delete+0x12>
    return ERR_OK;
 80285f2:	2300      	movs	r3, #0
 80285f4:	e00d      	b.n	8028612 <netconn_delete+0x2e>
    /* Already called netconn_prepare_delete() before */
    err = ERR_OK;
  } else
#endif /* LWIP_NETCONN_FULLDUPLEX */
  {
    err = netconn_prepare_delete(conn);
 80285f6:	6878      	ldr	r0, [r7, #4]
 80285f8:	f7ff ffd0 	bl	802859c <netconn_prepare_delete>
 80285fc:	4603      	mov	r3, r0
 80285fe:	73fb      	strb	r3, [r7, #15]
  }
  if (err == ERR_OK) {
 8028600:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8028604:	2b00      	cmp	r3, #0
 8028606:	d102      	bne.n	802860e <netconn_delete+0x2a>
    netconn_free(conn);
 8028608:	6878      	ldr	r0, [r7, #4]
 802860a:	f001 f995 	bl	8029938 <netconn_free>
  }
  return err;
 802860e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8028612:	4618      	mov	r0, r3
 8028614:	3710      	adds	r7, #16
 8028616:	46bd      	mov	sp, r7
 8028618:	bd80      	pop	{r7, pc}
	...

0802861c <netconn_getaddr>:
 * @return ERR_CONN for invalid connections
 *         ERR_OK if the information was retrieved
 */
err_t
netconn_getaddr(struct netconn *conn, ip_addr_t *addr, u16_t *port, u8_t local)
{
 802861c:	b580      	push	{r7, lr}
 802861e:	b08e      	sub	sp, #56	; 0x38
 8028620:	af00      	add	r7, sp, #0
 8028622:	60f8      	str	r0, [r7, #12]
 8028624:	60b9      	str	r1, [r7, #8]
 8028626:	607a      	str	r2, [r7, #4]
 8028628:	70fb      	strb	r3, [r7, #3]
  API_MSG_VAR_DECLARE(msg);
  err_t err;

  LWIP_ERROR("netconn_getaddr: invalid conn", (conn != NULL), return ERR_ARG;);
 802862a:	68fb      	ldr	r3, [r7, #12]
 802862c:	2b00      	cmp	r3, #0
 802862e:	d109      	bne.n	8028644 <netconn_getaddr+0x28>
 8028630:	4b1d      	ldr	r3, [pc, #116]	; (80286a8 <netconn_getaddr+0x8c>)
 8028632:	f44f 7289 	mov.w	r2, #274	; 0x112
 8028636:	491d      	ldr	r1, [pc, #116]	; (80286ac <netconn_getaddr+0x90>)
 8028638:	481d      	ldr	r0, [pc, #116]	; (80286b0 <netconn_getaddr+0x94>)
 802863a:	f010 fd15 	bl	8039068 <iprintf>
 802863e:	f06f 030f 	mvn.w	r3, #15
 8028642:	e02d      	b.n	80286a0 <netconn_getaddr+0x84>
  LWIP_ERROR("netconn_getaddr: invalid addr", (addr != NULL), return ERR_ARG;);
 8028644:	68bb      	ldr	r3, [r7, #8]
 8028646:	2b00      	cmp	r3, #0
 8028648:	d109      	bne.n	802865e <netconn_getaddr+0x42>
 802864a:	4b17      	ldr	r3, [pc, #92]	; (80286a8 <netconn_getaddr+0x8c>)
 802864c:	f240 1213 	movw	r2, #275	; 0x113
 8028650:	4918      	ldr	r1, [pc, #96]	; (80286b4 <netconn_getaddr+0x98>)
 8028652:	4817      	ldr	r0, [pc, #92]	; (80286b0 <netconn_getaddr+0x94>)
 8028654:	f010 fd08 	bl	8039068 <iprintf>
 8028658:	f06f 030f 	mvn.w	r3, #15
 802865c:	e020      	b.n	80286a0 <netconn_getaddr+0x84>
  LWIP_ERROR("netconn_getaddr: invalid port", (port != NULL), return ERR_ARG;);
 802865e:	687b      	ldr	r3, [r7, #4]
 8028660:	2b00      	cmp	r3, #0
 8028662:	d109      	bne.n	8028678 <netconn_getaddr+0x5c>
 8028664:	4b10      	ldr	r3, [pc, #64]	; (80286a8 <netconn_getaddr+0x8c>)
 8028666:	f44f 728a 	mov.w	r2, #276	; 0x114
 802866a:	4913      	ldr	r1, [pc, #76]	; (80286b8 <netconn_getaddr+0x9c>)
 802866c:	4810      	ldr	r0, [pc, #64]	; (80286b0 <netconn_getaddr+0x94>)
 802866e:	f010 fcfb 	bl	8039068 <iprintf>
 8028672:	f06f 030f 	mvn.w	r3, #15
 8028676:	e013      	b.n	80286a0 <netconn_getaddr+0x84>

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
 8028678:	68fb      	ldr	r3, [r7, #12]
 802867a:	617b      	str	r3, [r7, #20]
  API_MSG_VAR_REF(msg).msg.ad.local = local;
 802867c:	78fb      	ldrb	r3, [r7, #3]
 802867e:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
#if LWIP_MPU_COMPATIBLE
  err = netconn_apimsg(lwip_netconn_do_getaddr, &API_MSG_VAR_REF(msg));
  *addr = msg->msg.ad.ipaddr;
  *port = msg->msg.ad.port;
#else /* LWIP_MPU_COMPATIBLE */
  msg.msg.ad.ipaddr = addr;
 8028682:	68bb      	ldr	r3, [r7, #8]
 8028684:	61fb      	str	r3, [r7, #28]
  msg.msg.ad.port = port;
 8028686:	687b      	ldr	r3, [r7, #4]
 8028688:	623b      	str	r3, [r7, #32]
  err = netconn_apimsg(lwip_netconn_do_getaddr, &msg);
 802868a:	f107 0314 	add.w	r3, r7, #20
 802868e:	4619      	mov	r1, r3
 8028690:	480a      	ldr	r0, [pc, #40]	; (80286bc <netconn_getaddr+0xa0>)
 8028692:	f7ff feeb 	bl	802846c <netconn_apimsg>
 8028696:	4603      	mov	r3, r0
 8028698:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
#endif /* LWIP_MPU_COMPATIBLE */
  API_MSG_VAR_FREE(msg);

  return err;
 802869c:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
}
 80286a0:	4618      	mov	r0, r3
 80286a2:	3738      	adds	r7, #56	; 0x38
 80286a4:	46bd      	mov	sp, r7
 80286a6:	bd80      	pop	{r7, pc}
 80286a8:	08039bb4 	.word	0x08039bb4
 80286ac:	08039c8c 	.word	0x08039c8c
 80286b0:	08039c0c 	.word	0x08039c0c
 80286b4:	08039cac 	.word	0x08039cac
 80286b8:	08039ccc 	.word	0x08039ccc
 80286bc:	0802a6c9 	.word	0x0802a6c9

080286c0 <netconn_bind>:
 * @param port the local port to bind the netconn to (not used for RAW)
 * @return ERR_OK if bound, any other err_t on failure
 */
err_t
netconn_bind(struct netconn *conn, const ip_addr_t *addr, u16_t port)
{
 80286c0:	b580      	push	{r7, lr}
 80286c2:	b08e      	sub	sp, #56	; 0x38
 80286c4:	af00      	add	r7, sp, #0
 80286c6:	60f8      	str	r0, [r7, #12]
 80286c8:	60b9      	str	r1, [r7, #8]
 80286ca:	4613      	mov	r3, r2
 80286cc:	80fb      	strh	r3, [r7, #6]
  API_MSG_VAR_DECLARE(msg);
  err_t err;

  LWIP_ERROR("netconn_bind: invalid conn", (conn != NULL), return ERR_ARG;);
 80286ce:	68fb      	ldr	r3, [r7, #12]
 80286d0:	2b00      	cmp	r3, #0
 80286d2:	d109      	bne.n	80286e8 <netconn_bind+0x28>
 80286d4:	4b11      	ldr	r3, [pc, #68]	; (802871c <netconn_bind+0x5c>)
 80286d6:	f44f 729c 	mov.w	r2, #312	; 0x138
 80286da:	4911      	ldr	r1, [pc, #68]	; (8028720 <netconn_bind+0x60>)
 80286dc:	4811      	ldr	r0, [pc, #68]	; (8028724 <netconn_bind+0x64>)
 80286de:	f010 fcc3 	bl	8039068 <iprintf>
 80286e2:	f06f 030f 	mvn.w	r3, #15
 80286e6:	e015      	b.n	8028714 <netconn_bind+0x54>

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IP_ADDR_ANY alias) to subsequent functions */
  if (addr == NULL) {
 80286e8:	68bb      	ldr	r3, [r7, #8]
 80286ea:	2b00      	cmp	r3, #0
 80286ec:	d101      	bne.n	80286f2 <netconn_bind+0x32>
    addr = IP4_ADDR_ANY;
 80286ee:	4b0e      	ldr	r3, [pc, #56]	; (8028728 <netconn_bind+0x68>)
 80286f0:	60bb      	str	r3, [r7, #8]
    addr = IP_ANY_TYPE;
  }
#endif /* LWIP_IPV4 && LWIP_IPV6 */

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
 80286f2:	68fb      	ldr	r3, [r7, #12]
 80286f4:	617b      	str	r3, [r7, #20]
  API_MSG_VAR_REF(msg).msg.bc.ipaddr = API_MSG_VAR_REF(addr);
 80286f6:	68bb      	ldr	r3, [r7, #8]
 80286f8:	61fb      	str	r3, [r7, #28]
  API_MSG_VAR_REF(msg).msg.bc.port = port;
 80286fa:	88fb      	ldrh	r3, [r7, #6]
 80286fc:	843b      	strh	r3, [r7, #32]
  err = netconn_apimsg(lwip_netconn_do_bind, &API_MSG_VAR_REF(msg));
 80286fe:	f107 0314 	add.w	r3, r7, #20
 8028702:	4619      	mov	r1, r3
 8028704:	4809      	ldr	r0, [pc, #36]	; (802872c <netconn_bind+0x6c>)
 8028706:	f7ff feb1 	bl	802846c <netconn_apimsg>
 802870a:	4603      	mov	r3, r0
 802870c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
  API_MSG_VAR_FREE(msg);

  return err;
 8028710:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
}
 8028714:	4618      	mov	r0, r3
 8028716:	3738      	adds	r7, #56	; 0x38
 8028718:	46bd      	mov	sp, r7
 802871a:	bd80      	pop	{r7, pc}
 802871c:	08039bb4 	.word	0x08039bb4
 8028720:	08039cec 	.word	0x08039cec
 8028724:	08039c0c 	.word	0x08039c0c
 8028728:	0803d62c 	.word	0x0803d62c
 802872c:	08029f69 	.word	0x08029f69

08028730 <netconn_listen_with_backlog>:
 * @return ERR_OK if the netconn was set to listen (UDP and RAW netconns
 *         don't return any error (yet?))
 */
err_t
netconn_listen_with_backlog(struct netconn *conn, u8_t backlog)
{
 8028730:	b580      	push	{r7, lr}
 8028732:	b08c      	sub	sp, #48	; 0x30
 8028734:	af00      	add	r7, sp, #0
 8028736:	6078      	str	r0, [r7, #4]
 8028738:	460b      	mov	r3, r1
 802873a:	70fb      	strb	r3, [r7, #3]
  err_t err;

  /* This does no harm. If TCP_LISTEN_BACKLOG is off, backlog is unused. */
  LWIP_UNUSED_ARG(backlog);

  LWIP_ERROR("netconn_listen: invalid conn", (conn != NULL), return ERR_ARG;);
 802873c:	687b      	ldr	r3, [r7, #4]
 802873e:	2b00      	cmp	r3, #0
 8028740:	d109      	bne.n	8028756 <netconn_listen_with_backlog+0x26>
 8028742:	4b0d      	ldr	r3, [pc, #52]	; (8028778 <netconn_listen_with_backlog+0x48>)
 8028744:	f240 12bb 	movw	r2, #443	; 0x1bb
 8028748:	490c      	ldr	r1, [pc, #48]	; (802877c <netconn_listen_with_backlog+0x4c>)
 802874a:	480d      	ldr	r0, [pc, #52]	; (8028780 <netconn_listen_with_backlog+0x50>)
 802874c:	f010 fc8c 	bl	8039068 <iprintf>
 8028750:	f06f 030f 	mvn.w	r3, #15
 8028754:	e00c      	b.n	8028770 <netconn_listen_with_backlog+0x40>

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
 8028756:	687b      	ldr	r3, [r7, #4]
 8028758:	60fb      	str	r3, [r7, #12]
#if TCP_LISTEN_BACKLOG
  API_MSG_VAR_REF(msg).msg.lb.backlog = backlog;
#endif /* TCP_LISTEN_BACKLOG */
  err = netconn_apimsg(lwip_netconn_do_listen, &API_MSG_VAR_REF(msg));
 802875a:	f107 030c 	add.w	r3, r7, #12
 802875e:	4619      	mov	r1, r3
 8028760:	4808      	ldr	r0, [pc, #32]	; (8028784 <netconn_listen_with_backlog+0x54>)
 8028762:	f7ff fe83 	bl	802846c <netconn_apimsg>
 8028766:	4603      	mov	r3, r0
 8028768:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  API_MSG_VAR_FREE(msg);

  return err;
 802876c:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
#else /* LWIP_TCP */
  LWIP_UNUSED_ARG(conn);
  LWIP_UNUSED_ARG(backlog);
  return ERR_ARG;
#endif /* LWIP_TCP */
}
 8028770:	4618      	mov	r0, r3
 8028772:	3730      	adds	r7, #48	; 0x30
 8028774:	46bd      	mov	sp, r7
 8028776:	bd80      	pop	{r7, pc}
 8028778:	08039bb4 	.word	0x08039bb4
 802877c:	08039d6c 	.word	0x08039d6c
 8028780:	08039c0c 	.word	0x08039c0c
 8028784:	08029fdd 	.word	0x08029fdd

08028788 <netconn_accept>:
 * @return ERR_OK if a new connection has been received or an error
 *                code otherwise
 */
err_t
netconn_accept(struct netconn *conn, struct netconn **new_conn)
{
 8028788:	b580      	push	{r7, lr}
 802878a:	b086      	sub	sp, #24
 802878c:	af00      	add	r7, sp, #0
 802878e:	6078      	str	r0, [r7, #4]
 8028790:	6039      	str	r1, [r7, #0]
  struct netconn *newconn;
#if TCP_LISTEN_BACKLOG
  API_MSG_VAR_DECLARE(msg);
#endif /* TCP_LISTEN_BACKLOG */

  LWIP_ERROR("netconn_accept: invalid pointer",    (new_conn != NULL),                  return ERR_ARG;);
 8028792:	683b      	ldr	r3, [r7, #0]
 8028794:	2b00      	cmp	r3, #0
 8028796:	d109      	bne.n	80287ac <netconn_accept+0x24>
 8028798:	4b42      	ldr	r3, [pc, #264]	; (80288a4 <netconn_accept+0x11c>)
 802879a:	f240 12e1 	movw	r2, #481	; 0x1e1
 802879e:	4942      	ldr	r1, [pc, #264]	; (80288a8 <netconn_accept+0x120>)
 80287a0:	4842      	ldr	r0, [pc, #264]	; (80288ac <netconn_accept+0x124>)
 80287a2:	f010 fc61 	bl	8039068 <iprintf>
 80287a6:	f06f 030f 	mvn.w	r3, #15
 80287aa:	e077      	b.n	802889c <netconn_accept+0x114>
  *new_conn = NULL;
 80287ac:	683b      	ldr	r3, [r7, #0]
 80287ae:	2200      	movs	r2, #0
 80287b0:	601a      	str	r2, [r3, #0]
  LWIP_ERROR("netconn_accept: invalid conn",       (conn != NULL),                      return ERR_ARG;);
 80287b2:	687b      	ldr	r3, [r7, #4]
 80287b4:	2b00      	cmp	r3, #0
 80287b6:	d109      	bne.n	80287cc <netconn_accept+0x44>
 80287b8:	4b3a      	ldr	r3, [pc, #232]	; (80288a4 <netconn_accept+0x11c>)
 80287ba:	f240 12e3 	movw	r2, #483	; 0x1e3
 80287be:	493c      	ldr	r1, [pc, #240]	; (80288b0 <netconn_accept+0x128>)
 80287c0:	483a      	ldr	r0, [pc, #232]	; (80288ac <netconn_accept+0x124>)
 80287c2:	f010 fc51 	bl	8039068 <iprintf>
 80287c6:	f06f 030f 	mvn.w	r3, #15
 80287ca:	e067      	b.n	802889c <netconn_accept+0x114>

  /* NOTE: Although the opengroup spec says a pending error shall be returned to
           send/recv/getsockopt(SO_ERROR) only, we return it for listening
           connections also, to handle embedded-system errors */
  err = netconn_err(conn);
 80287cc:	6878      	ldr	r0, [r7, #4]
 80287ce:	f000 fbb5 	bl	8028f3c <netconn_err>
 80287d2:	4603      	mov	r3, r0
 80287d4:	74fb      	strb	r3, [r7, #19]
  if (err != ERR_OK) {
 80287d6:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80287da:	2b00      	cmp	r3, #0
 80287dc:	d002      	beq.n	80287e4 <netconn_accept+0x5c>
    /* return pending error */
    return err;
 80287de:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80287e2:	e05b      	b.n	802889c <netconn_accept+0x114>
  }
  if (!NETCONN_ACCEPTMBOX_WAITABLE(conn)) {
 80287e4:	687b      	ldr	r3, [r7, #4]
 80287e6:	3314      	adds	r3, #20
 80287e8:	4618      	mov	r0, r3
 80287ea:	f00f fd48 	bl	803827e <sys_mbox_valid>
 80287ee:	4603      	mov	r3, r0
 80287f0:	2b00      	cmp	r3, #0
 80287f2:	d006      	beq.n	8028802 <netconn_accept+0x7a>
 80287f4:	687b      	ldr	r3, [r7, #4]
 80287f6:	f893 3020 	ldrb.w	r3, [r3, #32]
 80287fa:	f003 0301 	and.w	r3, r3, #1
 80287fe:	2b00      	cmp	r3, #0
 8028800:	d002      	beq.n	8028808 <netconn_accept+0x80>
    /* don't accept if closed: this might block the application task
       waiting on acceptmbox forever! */
    return ERR_CLSD;
 8028802:	f06f 030e 	mvn.w	r3, #14
 8028806:	e049      	b.n	802889c <netconn_accept+0x114>
  }

  API_MSG_VAR_ALLOC_ACCEPT(msg);

  NETCONN_MBOX_WAITING_INC(conn);
  if (netconn_is_nonblocking(conn)) {
 8028808:	687b      	ldr	r3, [r7, #4]
 802880a:	f893 3020 	ldrb.w	r3, [r3, #32]
 802880e:	f003 0302 	and.w	r3, r3, #2
 8028812:	2b00      	cmp	r3, #0
 8028814:	d00e      	beq.n	8028834 <netconn_accept+0xac>
    if (sys_arch_mbox_tryfetch(&conn->acceptmbox, &accept_ptr) == SYS_ARCH_TIMEOUT) {
 8028816:	687b      	ldr	r3, [r7, #4]
 8028818:	3314      	adds	r3, #20
 802881a:	f107 020c 	add.w	r2, r7, #12
 802881e:	4611      	mov	r1, r2
 8028820:	4618      	mov	r0, r3
 8028822:	f00f fd10 	bl	8038246 <sys_arch_mbox_tryfetch>
 8028826:	4603      	mov	r3, r0
 8028828:	f1b3 3fff 	cmp.w	r3, #4294967295
 802882c:	d113      	bne.n	8028856 <netconn_accept+0xce>
      API_MSG_VAR_FREE_ACCEPT(msg);
      NETCONN_MBOX_WAITING_DEC(conn);
      return ERR_WOULDBLOCK;
 802882e:	f06f 0306 	mvn.w	r3, #6
 8028832:	e033      	b.n	802889c <netconn_accept+0x114>
    }
  } else {
#if LWIP_SO_RCVTIMEO
    if (sys_arch_mbox_fetch(&conn->acceptmbox, &accept_ptr, conn->recv_timeout) == SYS_ARCH_TIMEOUT) {
 8028834:	687b      	ldr	r3, [r7, #4]
 8028836:	f103 0014 	add.w	r0, r3, #20
 802883a:	687b      	ldr	r3, [r7, #4]
 802883c:	69da      	ldr	r2, [r3, #28]
 802883e:	f107 030c 	add.w	r3, r7, #12
 8028842:	4619      	mov	r1, r3
 8028844:	f00f fcc0 	bl	80381c8 <sys_arch_mbox_fetch>
 8028848:	4603      	mov	r3, r0
 802884a:	f1b3 3fff 	cmp.w	r3, #4294967295
 802884e:	d102      	bne.n	8028856 <netconn_accept+0xce>
      API_MSG_VAR_FREE_ACCEPT(msg);
      NETCONN_MBOX_WAITING_DEC(conn);
      return ERR_TIMEOUT;
 8028850:	f06f 0302 	mvn.w	r3, #2
 8028854:	e022      	b.n	802889c <netconn_accept+0x114>
    }
  }
#endif

  /* Register event with callback */
  API_EVENT(conn, NETCONN_EVT_RCVMINUS, 0);
 8028856:	687b      	ldr	r3, [r7, #4]
 8028858:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 802885a:	2b00      	cmp	r3, #0
 802885c:	d005      	beq.n	802886a <netconn_accept+0xe2>
 802885e:	687b      	ldr	r3, [r7, #4]
 8028860:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8028862:	2200      	movs	r2, #0
 8028864:	2101      	movs	r1, #1
 8028866:	6878      	ldr	r0, [r7, #4]
 8028868:	4798      	blx	r3

  if (lwip_netconn_is_err_msg(accept_ptr, &err)) {
 802886a:	68fb      	ldr	r3, [r7, #12]
 802886c:	f107 0213 	add.w	r2, r7, #19
 8028870:	4611      	mov	r1, r2
 8028872:	4618      	mov	r0, r3
 8028874:	f000 fbb4 	bl	8028fe0 <lwip_netconn_is_err_msg>
 8028878:	4603      	mov	r3, r0
 802887a:	2b00      	cmp	r3, #0
 802887c:	d002      	beq.n	8028884 <netconn_accept+0xfc>
    /* a connection has been aborted: e.g. out of pcbs or out of netconns during accept */
    API_MSG_VAR_FREE_ACCEPT(msg);
    return err;
 802887e:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8028882:	e00b      	b.n	802889c <netconn_accept+0x114>
  }
  if (accept_ptr == NULL) {
 8028884:	68fb      	ldr	r3, [r7, #12]
 8028886:	2b00      	cmp	r3, #0
 8028888:	d102      	bne.n	8028890 <netconn_accept+0x108>
    /* connection has been aborted */
    API_MSG_VAR_FREE_ACCEPT(msg);
    return ERR_CLSD;
 802888a:	f06f 030e 	mvn.w	r3, #14
 802888e:	e005      	b.n	802889c <netconn_accept+0x114>
  }
  newconn = (struct netconn *)accept_ptr;
 8028890:	68fb      	ldr	r3, [r7, #12]
 8028892:	617b      	str	r3, [r7, #20]
  /* don't care for the return value of lwip_netconn_do_recv */
  netconn_apimsg(lwip_netconn_do_accepted, &API_MSG_VAR_REF(msg));
  API_MSG_VAR_FREE(msg);
#endif /* TCP_LISTEN_BACKLOG */

  *new_conn = newconn;
 8028894:	683b      	ldr	r3, [r7, #0]
 8028896:	697a      	ldr	r2, [r7, #20]
 8028898:	601a      	str	r2, [r3, #0]
  /* don't set conn->last_err: it's only ERR_OK, anyway */
  return ERR_OK;
 802889a:	2300      	movs	r3, #0
#else /* LWIP_TCP */
  LWIP_UNUSED_ARG(conn);
  LWIP_UNUSED_ARG(new_conn);
  return ERR_ARG;
#endif /* LWIP_TCP */
}
 802889c:	4618      	mov	r0, r3
 802889e:	3718      	adds	r7, #24
 80288a0:	46bd      	mov	sp, r7
 80288a2:	bd80      	pop	{r7, pc}
 80288a4:	08039bb4 	.word	0x08039bb4
 80288a8:	08039d8c 	.word	0x08039d8c
 80288ac:	08039c0c 	.word	0x08039c0c
 80288b0:	08039dac 	.word	0x08039dac

080288b4 <netconn_recv_data>:
 *         ERR_WOULDBLOCK if the netconn is nonblocking but would block to wait for data
 *         ERR_TIMEOUT if the netconn has a receive timeout and no data was received
 */
static err_t
netconn_recv_data(struct netconn *conn, void **new_buf, u8_t apiflags)
{
 80288b4:	b580      	push	{r7, lr}
 80288b6:	b088      	sub	sp, #32
 80288b8:	af00      	add	r7, sp, #0
 80288ba:	60f8      	str	r0, [r7, #12]
 80288bc:	60b9      	str	r1, [r7, #8]
 80288be:	4613      	mov	r3, r2
 80288c0:	71fb      	strb	r3, [r7, #7]
  void *buf = NULL;
 80288c2:	2300      	movs	r3, #0
 80288c4:	61bb      	str	r3, [r7, #24]
  u16_t len;

  LWIP_ERROR("netconn_recv: invalid pointer", (new_buf != NULL), return ERR_ARG;);
 80288c6:	68bb      	ldr	r3, [r7, #8]
 80288c8:	2b00      	cmp	r3, #0
 80288ca:	d109      	bne.n	80288e0 <netconn_recv_data+0x2c>
 80288cc:	4b5e      	ldr	r3, [pc, #376]	; (8028a48 <netconn_recv_data+0x194>)
 80288ce:	f44f 7212 	mov.w	r2, #584	; 0x248
 80288d2:	495e      	ldr	r1, [pc, #376]	; (8028a4c <netconn_recv_data+0x198>)
 80288d4:	485e      	ldr	r0, [pc, #376]	; (8028a50 <netconn_recv_data+0x19c>)
 80288d6:	f010 fbc7 	bl	8039068 <iprintf>
 80288da:	f06f 030f 	mvn.w	r3, #15
 80288de:	e0ae      	b.n	8028a3e <netconn_recv_data+0x18a>
  *new_buf = NULL;
 80288e0:	68bb      	ldr	r3, [r7, #8]
 80288e2:	2200      	movs	r2, #0
 80288e4:	601a      	str	r2, [r3, #0]
  LWIP_ERROR("netconn_recv: invalid conn",    (conn != NULL),    return ERR_ARG;);
 80288e6:	68fb      	ldr	r3, [r7, #12]
 80288e8:	2b00      	cmp	r3, #0
 80288ea:	d109      	bne.n	8028900 <netconn_recv_data+0x4c>
 80288ec:	4b56      	ldr	r3, [pc, #344]	; (8028a48 <netconn_recv_data+0x194>)
 80288ee:	f240 224a 	movw	r2, #586	; 0x24a
 80288f2:	4958      	ldr	r1, [pc, #352]	; (8028a54 <netconn_recv_data+0x1a0>)
 80288f4:	4856      	ldr	r0, [pc, #344]	; (8028a50 <netconn_recv_data+0x19c>)
 80288f6:	f010 fbb7 	bl	8039068 <iprintf>
 80288fa:	f06f 030f 	mvn.w	r3, #15
 80288fe:	e09e      	b.n	8028a3e <netconn_recv_data+0x18a>

  if (!NETCONN_RECVMBOX_WAITABLE(conn)) {
 8028900:	68fb      	ldr	r3, [r7, #12]
 8028902:	3310      	adds	r3, #16
 8028904:	4618      	mov	r0, r3
 8028906:	f00f fcba 	bl	803827e <sys_mbox_valid>
 802890a:	4603      	mov	r3, r0
 802890c:	2b00      	cmp	r3, #0
 802890e:	d10e      	bne.n	802892e <netconn_recv_data+0x7a>
    err_t err = netconn_err(conn);
 8028910:	68f8      	ldr	r0, [r7, #12]
 8028912:	f000 fb13 	bl	8028f3c <netconn_err>
 8028916:	4603      	mov	r3, r0
 8028918:	773b      	strb	r3, [r7, #28]
    if (err != ERR_OK) {
 802891a:	f997 301c 	ldrsb.w	r3, [r7, #28]
 802891e:	2b00      	cmp	r3, #0
 8028920:	d002      	beq.n	8028928 <netconn_recv_data+0x74>
      /* return pending error */
      return err;
 8028922:	f997 301c 	ldrsb.w	r3, [r7, #28]
 8028926:	e08a      	b.n	8028a3e <netconn_recv_data+0x18a>
    }
    return ERR_CONN;
 8028928:	f06f 030a 	mvn.w	r3, #10
 802892c:	e087      	b.n	8028a3e <netconn_recv_data+0x18a>
  }

  NETCONN_MBOX_WAITING_INC(conn);
  if (netconn_is_nonblocking(conn) || (apiflags & NETCONN_DONTBLOCK) ||
 802892e:	68fb      	ldr	r3, [r7, #12]
 8028930:	f893 3020 	ldrb.w	r3, [r3, #32]
 8028934:	f003 0302 	and.w	r3, r3, #2
 8028938:	2b00      	cmp	r3, #0
 802893a:	d110      	bne.n	802895e <netconn_recv_data+0xaa>
 802893c:	79fb      	ldrb	r3, [r7, #7]
 802893e:	f003 0304 	and.w	r3, r3, #4
 8028942:	2b00      	cmp	r3, #0
 8028944:	d10b      	bne.n	802895e <netconn_recv_data+0xaa>
      (conn->flags & NETCONN_FLAG_MBOXCLOSED) || (conn->pending_err != ERR_OK)) {
 8028946:	68fb      	ldr	r3, [r7, #12]
 8028948:	f893 3020 	ldrb.w	r3, [r3, #32]
 802894c:	f003 0301 	and.w	r3, r3, #1
  if (netconn_is_nonblocking(conn) || (apiflags & NETCONN_DONTBLOCK) ||
 8028950:	2b00      	cmp	r3, #0
 8028952:	d104      	bne.n	802895e <netconn_recv_data+0xaa>
      (conn->flags & NETCONN_FLAG_MBOXCLOSED) || (conn->pending_err != ERR_OK)) {
 8028954:	68fb      	ldr	r3, [r7, #12]
 8028956:	f993 3008 	ldrsb.w	r3, [r3, #8]
 802895a:	2b00      	cmp	r3, #0
 802895c:	d024      	beq.n	80289a8 <netconn_recv_data+0xf4>
    if (sys_arch_mbox_tryfetch(&conn->recvmbox, &buf) == SYS_ARCH_TIMEOUT) {
 802895e:	68fb      	ldr	r3, [r7, #12]
 8028960:	3310      	adds	r3, #16
 8028962:	f107 0218 	add.w	r2, r7, #24
 8028966:	4611      	mov	r1, r2
 8028968:	4618      	mov	r0, r3
 802896a:	f00f fc6c 	bl	8038246 <sys_arch_mbox_tryfetch>
 802896e:	4603      	mov	r3, r0
 8028970:	f1b3 3fff 	cmp.w	r3, #4294967295
 8028974:	d129      	bne.n	80289ca <netconn_recv_data+0x116>
      err_t err;
      NETCONN_MBOX_WAITING_DEC(conn);
      err = netconn_err(conn);
 8028976:	68f8      	ldr	r0, [r7, #12]
 8028978:	f000 fae0 	bl	8028f3c <netconn_err>
 802897c:	4603      	mov	r3, r0
 802897e:	777b      	strb	r3, [r7, #29]
      if (err != ERR_OK) {
 8028980:	f997 301d 	ldrsb.w	r3, [r7, #29]
 8028984:	2b00      	cmp	r3, #0
 8028986:	d002      	beq.n	802898e <netconn_recv_data+0xda>
        /* return pending error */
        return err;
 8028988:	f997 301d 	ldrsb.w	r3, [r7, #29]
 802898c:	e057      	b.n	8028a3e <netconn_recv_data+0x18a>
      }
      if (conn->flags & NETCONN_FLAG_MBOXCLOSED) {
 802898e:	68fb      	ldr	r3, [r7, #12]
 8028990:	f893 3020 	ldrb.w	r3, [r3, #32]
 8028994:	f003 0301 	and.w	r3, r3, #1
 8028998:	2b00      	cmp	r3, #0
 802899a:	d002      	beq.n	80289a2 <netconn_recv_data+0xee>
        return ERR_CONN;
 802899c:	f06f 030a 	mvn.w	r3, #10
 80289a0:	e04d      	b.n	8028a3e <netconn_recv_data+0x18a>
      }
      return ERR_WOULDBLOCK;
 80289a2:	f06f 0306 	mvn.w	r3, #6
 80289a6:	e04a      	b.n	8028a3e <netconn_recv_data+0x18a>
    }
  } else {
#if LWIP_SO_RCVTIMEO
    if (sys_arch_mbox_fetch(&conn->recvmbox, &buf, conn->recv_timeout) == SYS_ARCH_TIMEOUT) {
 80289a8:	68fb      	ldr	r3, [r7, #12]
 80289aa:	f103 0010 	add.w	r0, r3, #16
 80289ae:	68fb      	ldr	r3, [r7, #12]
 80289b0:	69da      	ldr	r2, [r3, #28]
 80289b2:	f107 0318 	add.w	r3, r7, #24
 80289b6:	4619      	mov	r1, r3
 80289b8:	f00f fc06 	bl	80381c8 <sys_arch_mbox_fetch>
 80289bc:	4603      	mov	r3, r0
 80289be:	f1b3 3fff 	cmp.w	r3, #4294967295
 80289c2:	d102      	bne.n	80289ca <netconn_recv_data+0x116>
      NETCONN_MBOX_WAITING_DEC(conn);
      return ERR_TIMEOUT;
 80289c4:	f06f 0302 	mvn.w	r3, #2
 80289c8:	e039      	b.n	8028a3e <netconn_recv_data+0x18a>
  }
#endif

#if LWIP_TCP
#if (LWIP_UDP || LWIP_RAW)
  if (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP)
 80289ca:	68fb      	ldr	r3, [r7, #12]
 80289cc:	781b      	ldrb	r3, [r3, #0]
 80289ce:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80289d2:	2b10      	cmp	r3, #16
 80289d4:	d117      	bne.n	8028a06 <netconn_recv_data+0x152>
#endif /* (LWIP_UDP || LWIP_RAW) */
  {
    err_t err;
    /* Check if this is an error message or a pbuf */
    if (lwip_netconn_is_err_msg(buf, &err)) {
 80289d6:	69bb      	ldr	r3, [r7, #24]
 80289d8:	f107 0217 	add.w	r2, r7, #23
 80289dc:	4611      	mov	r1, r2
 80289de:	4618      	mov	r0, r3
 80289e0:	f000 fafe 	bl	8028fe0 <lwip_netconn_is_err_msg>
 80289e4:	4603      	mov	r3, r0
 80289e6:	2b00      	cmp	r3, #0
 80289e8:	d009      	beq.n	80289fe <netconn_recv_data+0x14a>
      /* new_buf has been zeroed above already */
      if (err == ERR_CLSD) {
 80289ea:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80289ee:	f113 0f0f 	cmn.w	r3, #15
 80289f2:	d101      	bne.n	80289f8 <netconn_recv_data+0x144>
        /* connection closed translates to ERR_OK with *new_buf == NULL */
        return ERR_OK;
 80289f4:	2300      	movs	r3, #0
 80289f6:	e022      	b.n	8028a3e <netconn_recv_data+0x18a>
      }
      return err;
 80289f8:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80289fc:	e01f      	b.n	8028a3e <netconn_recv_data+0x18a>
    }
    len = ((struct pbuf *)buf)->tot_len;
 80289fe:	69bb      	ldr	r3, [r7, #24]
 8028a00:	891b      	ldrh	r3, [r3, #8]
 8028a02:	83fb      	strh	r3, [r7, #30]
 8028a04:	e00d      	b.n	8028a22 <netconn_recv_data+0x16e>
#if LWIP_TCP && (LWIP_UDP || LWIP_RAW)
  else
#endif /* LWIP_TCP && (LWIP_UDP || LWIP_RAW) */
#if (LWIP_UDP || LWIP_RAW)
  {
    LWIP_ASSERT("buf != NULL", buf != NULL);
 8028a06:	69bb      	ldr	r3, [r7, #24]
 8028a08:	2b00      	cmp	r3, #0
 8028a0a:	d106      	bne.n	8028a1a <netconn_recv_data+0x166>
 8028a0c:	4b0e      	ldr	r3, [pc, #56]	; (8028a48 <netconn_recv_data+0x194>)
 8028a0e:	f240 2291 	movw	r2, #657	; 0x291
 8028a12:	4911      	ldr	r1, [pc, #68]	; (8028a58 <netconn_recv_data+0x1a4>)
 8028a14:	480e      	ldr	r0, [pc, #56]	; (8028a50 <netconn_recv_data+0x19c>)
 8028a16:	f010 fb27 	bl	8039068 <iprintf>
    len = netbuf_len((struct netbuf *)buf);
 8028a1a:	69bb      	ldr	r3, [r7, #24]
 8028a1c:	681b      	ldr	r3, [r3, #0]
 8028a1e:	891b      	ldrh	r3, [r3, #8]
 8028a20:	83fb      	strh	r3, [r7, #30]

#if LWIP_SO_RCVBUF
  SYS_ARCH_DEC(conn->recv_avail, len);
#endif /* LWIP_SO_RCVBUF */
  /* Register event with callback */
  API_EVENT(conn, NETCONN_EVT_RCVMINUS, len);
 8028a22:	68fb      	ldr	r3, [r7, #12]
 8028a24:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8028a26:	2b00      	cmp	r3, #0
 8028a28:	d005      	beq.n	8028a36 <netconn_recv_data+0x182>
 8028a2a:	68fb      	ldr	r3, [r7, #12]
 8028a2c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8028a2e:	8bfa      	ldrh	r2, [r7, #30]
 8028a30:	2101      	movs	r1, #1
 8028a32:	68f8      	ldr	r0, [r7, #12]
 8028a34:	4798      	blx	r3

  LWIP_DEBUGF(API_LIB_DEBUG, ("netconn_recv_data: received %p, len=%"U16_F"\n", buf, len));

  *new_buf = buf;
 8028a36:	69ba      	ldr	r2, [r7, #24]
 8028a38:	68bb      	ldr	r3, [r7, #8]
 8028a3a:	601a      	str	r2, [r3, #0]
  /* don't set conn->last_err: it's only ERR_OK, anyway */
  return ERR_OK;
 8028a3c:	2300      	movs	r3, #0
}
 8028a3e:	4618      	mov	r0, r3
 8028a40:	3720      	adds	r7, #32
 8028a42:	46bd      	mov	sp, r7
 8028a44:	bd80      	pop	{r7, pc}
 8028a46:	bf00      	nop
 8028a48:	08039bb4 	.word	0x08039bb4
 8028a4c:	08039dcc 	.word	0x08039dcc
 8028a50:	08039c0c 	.word	0x08039c0c
 8028a54:	08039dec 	.word	0x08039dec
 8028a58:	08039e08 	.word	0x08039e08

08028a5c <netconn_tcp_recvd_msg>:

#if LWIP_TCP
static err_t
netconn_tcp_recvd_msg(struct netconn *conn, size_t len, struct api_msg *msg)
{
 8028a5c:	b580      	push	{r7, lr}
 8028a5e:	b084      	sub	sp, #16
 8028a60:	af00      	add	r7, sp, #0
 8028a62:	60f8      	str	r0, [r7, #12]
 8028a64:	60b9      	str	r1, [r7, #8]
 8028a66:	607a      	str	r2, [r7, #4]
  LWIP_ERROR("netconn_recv_tcp_pbuf: invalid conn", (conn != NULL) &&
 8028a68:	68fb      	ldr	r3, [r7, #12]
 8028a6a:	2b00      	cmp	r3, #0
 8028a6c:	d005      	beq.n	8028a7a <netconn_tcp_recvd_msg+0x1e>
 8028a6e:	68fb      	ldr	r3, [r7, #12]
 8028a70:	781b      	ldrb	r3, [r3, #0]
 8028a72:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8028a76:	2b10      	cmp	r3, #16
 8028a78:	d009      	beq.n	8028a8e <netconn_tcp_recvd_msg+0x32>
 8028a7a:	4b0c      	ldr	r3, [pc, #48]	; (8028aac <netconn_tcp_recvd_msg+0x50>)
 8028a7c:	f240 22a7 	movw	r2, #679	; 0x2a7
 8028a80:	490b      	ldr	r1, [pc, #44]	; (8028ab0 <netconn_tcp_recvd_msg+0x54>)
 8028a82:	480c      	ldr	r0, [pc, #48]	; (8028ab4 <netconn_tcp_recvd_msg+0x58>)
 8028a84:	f010 faf0 	bl	8039068 <iprintf>
 8028a88:	f06f 030f 	mvn.w	r3, #15
 8028a8c:	e00a      	b.n	8028aa4 <netconn_tcp_recvd_msg+0x48>
             NETCONNTYPE_GROUP(netconn_type(conn)) == NETCONN_TCP, return ERR_ARG;);

  msg->conn = conn;
 8028a8e:	687b      	ldr	r3, [r7, #4]
 8028a90:	68fa      	ldr	r2, [r7, #12]
 8028a92:	601a      	str	r2, [r3, #0]
  msg->msg.r.len = len;
 8028a94:	687b      	ldr	r3, [r7, #4]
 8028a96:	68ba      	ldr	r2, [r7, #8]
 8028a98:	609a      	str	r2, [r3, #8]

  return netconn_apimsg(lwip_netconn_do_recv, msg);
 8028a9a:	6879      	ldr	r1, [r7, #4]
 8028a9c:	4806      	ldr	r0, [pc, #24]	; (8028ab8 <netconn_tcp_recvd_msg+0x5c>)
 8028a9e:	f7ff fce5 	bl	802846c <netconn_apimsg>
 8028aa2:	4603      	mov	r3, r0
}
 8028aa4:	4618      	mov	r0, r3
 8028aa6:	3710      	adds	r7, #16
 8028aa8:	46bd      	mov	sp, r7
 8028aaa:	bd80      	pop	{r7, pc}
 8028aac:	08039bb4 	.word	0x08039bb4
 8028ab0:	08039e14 	.word	0x08039e14
 8028ab4:	08039c0c 	.word	0x08039c0c
 8028ab8:	0802a1a7 	.word	0x0802a1a7

08028abc <netconn_tcp_recvd>:

err_t
netconn_tcp_recvd(struct netconn *conn, size_t len)
{
 8028abc:	b580      	push	{r7, lr}
 8028abe:	b08c      	sub	sp, #48	; 0x30
 8028ac0:	af00      	add	r7, sp, #0
 8028ac2:	6078      	str	r0, [r7, #4]
 8028ac4:	6039      	str	r1, [r7, #0]
  err_t err;
  API_MSG_VAR_DECLARE(msg);
  LWIP_ERROR("netconn_recv_tcp_pbuf: invalid conn", (conn != NULL) &&
 8028ac6:	687b      	ldr	r3, [r7, #4]
 8028ac8:	2b00      	cmp	r3, #0
 8028aca:	d005      	beq.n	8028ad8 <netconn_tcp_recvd+0x1c>
 8028acc:	687b      	ldr	r3, [r7, #4]
 8028ace:	781b      	ldrb	r3, [r3, #0]
 8028ad0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8028ad4:	2b10      	cmp	r3, #16
 8028ad6:	d009      	beq.n	8028aec <netconn_tcp_recvd+0x30>
 8028ad8:	4b0c      	ldr	r3, [pc, #48]	; (8028b0c <netconn_tcp_recvd+0x50>)
 8028ada:	f240 22b5 	movw	r2, #693	; 0x2b5
 8028ade:	490c      	ldr	r1, [pc, #48]	; (8028b10 <netconn_tcp_recvd+0x54>)
 8028ae0:	480c      	ldr	r0, [pc, #48]	; (8028b14 <netconn_tcp_recvd+0x58>)
 8028ae2:	f010 fac1 	bl	8039068 <iprintf>
 8028ae6:	f06f 030f 	mvn.w	r3, #15
 8028aea:	e00b      	b.n	8028b04 <netconn_tcp_recvd+0x48>
             NETCONNTYPE_GROUP(netconn_type(conn)) == NETCONN_TCP, return ERR_ARG;);

  API_MSG_VAR_ALLOC(msg);
  err = netconn_tcp_recvd_msg(conn, len, &API_VAR_REF(msg));
 8028aec:	f107 030c 	add.w	r3, r7, #12
 8028af0:	461a      	mov	r2, r3
 8028af2:	6839      	ldr	r1, [r7, #0]
 8028af4:	6878      	ldr	r0, [r7, #4]
 8028af6:	f7ff ffb1 	bl	8028a5c <netconn_tcp_recvd_msg>
 8028afa:	4603      	mov	r3, r0
 8028afc:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  API_MSG_VAR_FREE(msg);
  return err;
 8028b00:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
}
 8028b04:	4618      	mov	r0, r3
 8028b06:	3730      	adds	r7, #48	; 0x30
 8028b08:	46bd      	mov	sp, r7
 8028b0a:	bd80      	pop	{r7, pc}
 8028b0c:	08039bb4 	.word	0x08039bb4
 8028b10:	08039e14 	.word	0x08039e14
 8028b14:	08039c0c 	.word	0x08039c0c

08028b18 <netconn_recv_data_tcp>:

static err_t
netconn_recv_data_tcp(struct netconn *conn, struct pbuf **new_buf, u8_t apiflags)
{
 8028b18:	b580      	push	{r7, lr}
 8028b1a:	b090      	sub	sp, #64	; 0x40
 8028b1c:	af00      	add	r7, sp, #0
 8028b1e:	60f8      	str	r0, [r7, #12]
 8028b20:	60b9      	str	r1, [r7, #8]
 8028b22:	4613      	mov	r3, r2
 8028b24:	71fb      	strb	r3, [r7, #7]
  API_MSG_VAR_DECLARE(msg);
#if LWIP_MPU_COMPATIBLE
  msg = NULL;
#endif

  if (!NETCONN_RECVMBOX_WAITABLE(conn)) {
 8028b26:	68fb      	ldr	r3, [r7, #12]
 8028b28:	3310      	adds	r3, #16
 8028b2a:	4618      	mov	r0, r3
 8028b2c:	f00f fba7 	bl	803827e <sys_mbox_valid>
 8028b30:	4603      	mov	r3, r0
 8028b32:	2b00      	cmp	r3, #0
 8028b34:	d102      	bne.n	8028b3c <netconn_recv_data_tcp+0x24>
    /* This only happens when calling this function more than once *after* receiving FIN */
    return ERR_CONN;
 8028b36:	f06f 030a 	mvn.w	r3, #10
 8028b3a:	e072      	b.n	8028c22 <netconn_recv_data_tcp+0x10a>
  }
  if (netconn_is_flag_set(conn, NETCONN_FIN_RX_PENDING)) {
 8028b3c:	68fb      	ldr	r3, [r7, #12]
 8028b3e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8028b42:	b25b      	sxtb	r3, r3
 8028b44:	2b00      	cmp	r3, #0
 8028b46:	da09      	bge.n	8028b5c <netconn_recv_data_tcp+0x44>
    netconn_clear_flags(conn, NETCONN_FIN_RX_PENDING);
 8028b48:	68fb      	ldr	r3, [r7, #12]
 8028b4a:	f893 3020 	ldrb.w	r3, [r3, #32]
 8028b4e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8028b52:	b2da      	uxtb	r2, r3
 8028b54:	68fb      	ldr	r3, [r7, #12]
 8028b56:	f883 2020 	strb.w	r2, [r3, #32]
    goto handle_fin;
 8028b5a:	e03b      	b.n	8028bd4 <netconn_recv_data_tcp+0xbc>
    /* need to allocate API message here so empty message pool does not result in event loss
      * see bug #47512: MPU_COMPATIBLE may fail on empty pool */
    API_MSG_VAR_ALLOC(msg);
  }

  err = netconn_recv_data(conn, (void **)new_buf, apiflags);
 8028b5c:	79fb      	ldrb	r3, [r7, #7]
 8028b5e:	461a      	mov	r2, r3
 8028b60:	68b9      	ldr	r1, [r7, #8]
 8028b62:	68f8      	ldr	r0, [r7, #12]
 8028b64:	f7ff fea6 	bl	80288b4 <netconn_recv_data>
 8028b68:	4603      	mov	r3, r0
 8028b6a:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  if (err != ERR_OK) {
 8028b6e:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8028b72:	2b00      	cmp	r3, #0
 8028b74:	d002      	beq.n	8028b7c <netconn_recv_data_tcp+0x64>
    if (!(apiflags & NETCONN_NOAUTORCVD)) {
      API_MSG_VAR_FREE(msg);
    }
    return err;
 8028b76:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8028b7a:	e052      	b.n	8028c22 <netconn_recv_data_tcp+0x10a>
  }
  buf = *new_buf;
 8028b7c:	68bb      	ldr	r3, [r7, #8]
 8028b7e:	681b      	ldr	r3, [r3, #0]
 8028b80:	63bb      	str	r3, [r7, #56]	; 0x38
  if (!(apiflags & NETCONN_NOAUTORCVD)) {
 8028b82:	79fb      	ldrb	r3, [r7, #7]
 8028b84:	f003 0308 	and.w	r3, r3, #8
 8028b88:	2b00      	cmp	r3, #0
 8028b8a:	d10e      	bne.n	8028baa <netconn_recv_data_tcp+0x92>
    /* Let the stack know that we have taken the data. */
    u16_t len = buf ? buf->tot_len : 1;
 8028b8c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8028b8e:	2b00      	cmp	r3, #0
 8028b90:	d002      	beq.n	8028b98 <netconn_recv_data_tcp+0x80>
 8028b92:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8028b94:	891b      	ldrh	r3, [r3, #8]
 8028b96:	e000      	b.n	8028b9a <netconn_recv_data_tcp+0x82>
 8028b98:	2301      	movs	r3, #1
 8028b9a:	86fb      	strh	r3, [r7, #54]	; 0x36
    /* don't care for the return value of lwip_netconn_do_recv */
    /* @todo: this should really be fixed, e.g. by retrying in poll on error */
    netconn_tcp_recvd_msg(conn, len,  &API_VAR_REF(msg));
 8028b9c:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8028b9e:	f107 0214 	add.w	r2, r7, #20
 8028ba2:	4619      	mov	r1, r3
 8028ba4:	68f8      	ldr	r0, [r7, #12]
 8028ba6:	f7ff ff59 	bl	8028a5c <netconn_tcp_recvd_msg>
    API_MSG_VAR_FREE(msg);
  }

  /* If we are closed, we indicate that we no longer wish to use the socket */
  if (buf == NULL) {
 8028baa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8028bac:	2b00      	cmp	r3, #0
 8028bae:	d136      	bne.n	8028c1e <netconn_recv_data_tcp+0x106>
    if (apiflags & NETCONN_NOFIN) {
 8028bb0:	79fb      	ldrb	r3, [r7, #7]
 8028bb2:	f003 0310 	and.w	r3, r3, #16
 8028bb6:	2b00      	cmp	r3, #0
 8028bb8:	d00b      	beq.n	8028bd2 <netconn_recv_data_tcp+0xba>
      /* received a FIN but the caller cannot handle it right now:
         re-enqueue it and return "no data" */
      netconn_set_flags(conn, NETCONN_FIN_RX_PENDING);
 8028bba:	68fb      	ldr	r3, [r7, #12]
 8028bbc:	f893 3020 	ldrb.w	r3, [r3, #32]
 8028bc0:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8028bc4:	b2da      	uxtb	r2, r3
 8028bc6:	68fb      	ldr	r3, [r7, #12]
 8028bc8:	f883 2020 	strb.w	r2, [r3, #32]
      return ERR_WOULDBLOCK;
 8028bcc:	f06f 0306 	mvn.w	r3, #6
 8028bd0:	e027      	b.n	8028c22 <netconn_recv_data_tcp+0x10a>
    } else {
handle_fin:
 8028bd2:	bf00      	nop
      API_EVENT(conn, NETCONN_EVT_RCVMINUS, 0);
 8028bd4:	68fb      	ldr	r3, [r7, #12]
 8028bd6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8028bd8:	2b00      	cmp	r3, #0
 8028bda:	d005      	beq.n	8028be8 <netconn_recv_data_tcp+0xd0>
 8028bdc:	68fb      	ldr	r3, [r7, #12]
 8028bde:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8028be0:	2200      	movs	r2, #0
 8028be2:	2101      	movs	r1, #1
 8028be4:	68f8      	ldr	r0, [r7, #12]
 8028be6:	4798      	blx	r3
      if (conn->pcb.ip == NULL) {
 8028be8:	68fb      	ldr	r3, [r7, #12]
 8028bea:	685b      	ldr	r3, [r3, #4]
 8028bec:	2b00      	cmp	r3, #0
 8028bee:	d10f      	bne.n	8028c10 <netconn_recv_data_tcp+0xf8>
        /* race condition: RST during recv */
        err = netconn_err(conn);
 8028bf0:	68f8      	ldr	r0, [r7, #12]
 8028bf2:	f000 f9a3 	bl	8028f3c <netconn_err>
 8028bf6:	4603      	mov	r3, r0
 8028bf8:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
        if (err != ERR_OK) {
 8028bfc:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8028c00:	2b00      	cmp	r3, #0
 8028c02:	d002      	beq.n	8028c0a <netconn_recv_data_tcp+0xf2>
          return err;
 8028c04:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8028c08:	e00b      	b.n	8028c22 <netconn_recv_data_tcp+0x10a>
        }
        return ERR_RST;
 8028c0a:	f06f 030d 	mvn.w	r3, #13
 8028c0e:	e008      	b.n	8028c22 <netconn_recv_data_tcp+0x10a>
      }
      /* RX side is closed, so deallocate the recvmbox */
      netconn_close_shutdown(conn, NETCONN_SHUT_RD);
 8028c10:	2101      	movs	r1, #1
 8028c12:	68f8      	ldr	r0, [r7, #12]
 8028c14:	f000 f962 	bl	8028edc <netconn_close_shutdown>
      /* Don' store ERR_CLSD as conn->err since we are only half-closed */
      return ERR_CLSD;
 8028c18:	f06f 030e 	mvn.w	r3, #14
 8028c1c:	e001      	b.n	8028c22 <netconn_recv_data_tcp+0x10a>
    }
  }
  return err;
 8028c1e:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
}
 8028c22:	4618      	mov	r0, r3
 8028c24:	3740      	adds	r7, #64	; 0x40
 8028c26:	46bd      	mov	sp, r7
 8028c28:	bd80      	pop	{r7, pc}
	...

08028c2c <netconn_recv_tcp_pbuf_flags>:
 *                memory error or another error, @see netconn_recv_data)
 *         ERR_ARG if conn is not a TCP netconn
 */
err_t
netconn_recv_tcp_pbuf_flags(struct netconn *conn, struct pbuf **new_buf, u8_t apiflags)
{
 8028c2c:	b580      	push	{r7, lr}
 8028c2e:	b084      	sub	sp, #16
 8028c30:	af00      	add	r7, sp, #0
 8028c32:	60f8      	str	r0, [r7, #12]
 8028c34:	60b9      	str	r1, [r7, #8]
 8028c36:	4613      	mov	r3, r2
 8028c38:	71fb      	strb	r3, [r7, #7]
  LWIP_ERROR("netconn_recv_tcp_pbuf: invalid conn", (conn != NULL) &&
 8028c3a:	68fb      	ldr	r3, [r7, #12]
 8028c3c:	2b00      	cmp	r3, #0
 8028c3e:	d005      	beq.n	8028c4c <netconn_recv_tcp_pbuf_flags+0x20>
 8028c40:	68fb      	ldr	r3, [r7, #12]
 8028c42:	781b      	ldrb	r3, [r3, #0]
 8028c44:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8028c48:	2b10      	cmp	r3, #16
 8028c4a:	d009      	beq.n	8028c60 <netconn_recv_tcp_pbuf_flags+0x34>
 8028c4c:	4b0a      	ldr	r3, [pc, #40]	; (8028c78 <netconn_recv_tcp_pbuf_flags+0x4c>)
 8028c4e:	f240 3225 	movw	r2, #805	; 0x325
 8028c52:	490a      	ldr	r1, [pc, #40]	; (8028c7c <netconn_recv_tcp_pbuf_flags+0x50>)
 8028c54:	480a      	ldr	r0, [pc, #40]	; (8028c80 <netconn_recv_tcp_pbuf_flags+0x54>)
 8028c56:	f010 fa07 	bl	8039068 <iprintf>
 8028c5a:	f06f 030f 	mvn.w	r3, #15
 8028c5e:	e006      	b.n	8028c6e <netconn_recv_tcp_pbuf_flags+0x42>
             NETCONNTYPE_GROUP(netconn_type(conn)) == NETCONN_TCP, return ERR_ARG;);

  return netconn_recv_data_tcp(conn, new_buf, apiflags);
 8028c60:	79fb      	ldrb	r3, [r7, #7]
 8028c62:	461a      	mov	r2, r3
 8028c64:	68b9      	ldr	r1, [r7, #8]
 8028c66:	68f8      	ldr	r0, [r7, #12]
 8028c68:	f7ff ff56 	bl	8028b18 <netconn_recv_data_tcp>
 8028c6c:	4603      	mov	r3, r0
}
 8028c6e:	4618      	mov	r0, r3
 8028c70:	3710      	adds	r7, #16
 8028c72:	46bd      	mov	sp, r7
 8028c74:	bd80      	pop	{r7, pc}
 8028c76:	bf00      	nop
 8028c78:	08039bb4 	.word	0x08039bb4
 8028c7c:	08039e14 	.word	0x08039e14
 8028c80:	08039c0c 	.word	0x08039c0c

08028c84 <netconn_recv_udp_raw_netbuf_flags>:
 *                memory error or another error)
 *         ERR_ARG if conn is not a UDP/RAW netconn
 */
err_t
netconn_recv_udp_raw_netbuf_flags(struct netconn *conn, struct netbuf **new_buf, u8_t apiflags)
{
 8028c84:	b580      	push	{r7, lr}
 8028c86:	b084      	sub	sp, #16
 8028c88:	af00      	add	r7, sp, #0
 8028c8a:	60f8      	str	r0, [r7, #12]
 8028c8c:	60b9      	str	r1, [r7, #8]
 8028c8e:	4613      	mov	r3, r2
 8028c90:	71fb      	strb	r3, [r7, #7]
  LWIP_ERROR("netconn_recv_udp_raw_netbuf: invalid conn", (conn != NULL) &&
 8028c92:	68fb      	ldr	r3, [r7, #12]
 8028c94:	2b00      	cmp	r3, #0
 8028c96:	d005      	beq.n	8028ca4 <netconn_recv_udp_raw_netbuf_flags+0x20>
 8028c98:	68fb      	ldr	r3, [r7, #12]
 8028c9a:	781b      	ldrb	r3, [r3, #0]
 8028c9c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8028ca0:	2b10      	cmp	r3, #16
 8028ca2:	d109      	bne.n	8028cb8 <netconn_recv_udp_raw_netbuf_flags+0x34>
 8028ca4:	4b0a      	ldr	r3, [pc, #40]	; (8028cd0 <netconn_recv_udp_raw_netbuf_flags+0x4c>)
 8028ca6:	f44f 7253 	mov.w	r2, #844	; 0x34c
 8028caa:	490a      	ldr	r1, [pc, #40]	; (8028cd4 <netconn_recv_udp_raw_netbuf_flags+0x50>)
 8028cac:	480a      	ldr	r0, [pc, #40]	; (8028cd8 <netconn_recv_udp_raw_netbuf_flags+0x54>)
 8028cae:	f010 f9db 	bl	8039068 <iprintf>
 8028cb2:	f06f 030f 	mvn.w	r3, #15
 8028cb6:	e006      	b.n	8028cc6 <netconn_recv_udp_raw_netbuf_flags+0x42>
             NETCONNTYPE_GROUP(netconn_type(conn)) != NETCONN_TCP, return ERR_ARG;);

  return netconn_recv_data(conn, (void **)new_buf, apiflags);
 8028cb8:	79fb      	ldrb	r3, [r7, #7]
 8028cba:	461a      	mov	r2, r3
 8028cbc:	68b9      	ldr	r1, [r7, #8]
 8028cbe:	68f8      	ldr	r0, [r7, #12]
 8028cc0:	f7ff fdf8 	bl	80288b4 <netconn_recv_data>
 8028cc4:	4603      	mov	r3, r0
}
 8028cc6:	4618      	mov	r0, r3
 8028cc8:	3710      	adds	r7, #16
 8028cca:	46bd      	mov	sp, r7
 8028ccc:	bd80      	pop	{r7, pc}
 8028cce:	bf00      	nop
 8028cd0:	08039bb4 	.word	0x08039bb4
 8028cd4:	08039e38 	.word	0x08039e38
 8028cd8:	08039c0c 	.word	0x08039c0c

08028cdc <netconn_send>:
 * @param buf a netbuf containing the data to send
 * @return ERR_OK if data was sent, any other err_t on error
 */
err_t
netconn_send(struct netconn *conn, struct netbuf *buf)
{
 8028cdc:	b580      	push	{r7, lr}
 8028cde:	b08c      	sub	sp, #48	; 0x30
 8028ce0:	af00      	add	r7, sp, #0
 8028ce2:	6078      	str	r0, [r7, #4]
 8028ce4:	6039      	str	r1, [r7, #0]
  API_MSG_VAR_DECLARE(msg);
  err_t err;

  LWIP_ERROR("netconn_send: invalid conn",  (conn != NULL), return ERR_ARG;);
 8028ce6:	687b      	ldr	r3, [r7, #4]
 8028ce8:	2b00      	cmp	r3, #0
 8028cea:	d109      	bne.n	8028d00 <netconn_send+0x24>
 8028cec:	4b0e      	ldr	r3, [pc, #56]	; (8028d28 <netconn_send+0x4c>)
 8028cee:	f240 32b2 	movw	r2, #946	; 0x3b2
 8028cf2:	490e      	ldr	r1, [pc, #56]	; (8028d2c <netconn_send+0x50>)
 8028cf4:	480e      	ldr	r0, [pc, #56]	; (8028d30 <netconn_send+0x54>)
 8028cf6:	f010 f9b7 	bl	8039068 <iprintf>
 8028cfa:	f06f 030f 	mvn.w	r3, #15
 8028cfe:	e00e      	b.n	8028d1e <netconn_send+0x42>

  LWIP_DEBUGF(API_LIB_DEBUG, ("netconn_send: sending %"U16_F" bytes\n", buf->p->tot_len));

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
 8028d00:	687b      	ldr	r3, [r7, #4]
 8028d02:	60fb      	str	r3, [r7, #12]
  API_MSG_VAR_REF(msg).msg.b = buf;
 8028d04:	683b      	ldr	r3, [r7, #0]
 8028d06:	617b      	str	r3, [r7, #20]
  err = netconn_apimsg(lwip_netconn_do_send, &API_MSG_VAR_REF(msg));
 8028d08:	f107 030c 	add.w	r3, r7, #12
 8028d0c:	4619      	mov	r1, r3
 8028d0e:	4809      	ldr	r0, [pc, #36]	; (8028d34 <netconn_send+0x58>)
 8028d10:	f7ff fbac 	bl	802846c <netconn_apimsg>
 8028d14:	4603      	mov	r3, r0
 8028d16:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  API_MSG_VAR_FREE(msg);

  return err;
 8028d1a:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
}
 8028d1e:	4618      	mov	r0, r3
 8028d20:	3730      	adds	r7, #48	; 0x30
 8028d22:	46bd      	mov	sp, r7
 8028d24:	bd80      	pop	{r7, pc}
 8028d26:	bf00      	nop
 8028d28:	08039bb4 	.word	0x08039bb4
 8028d2c:	08039e70 	.word	0x08039e70
 8028d30:	08039c0c 	.word	0x08039c0c
 8028d34:	0802a10d 	.word	0x0802a10d

08028d38 <netconn_write_partly>:
 * @return ERR_OK if data was sent, any other err_t on error
 */
err_t
netconn_write_partly(struct netconn *conn, const void *dataptr, size_t size,
                     u8_t apiflags, size_t *bytes_written)
{
 8028d38:	b580      	push	{r7, lr}
 8028d3a:	b088      	sub	sp, #32
 8028d3c:	af02      	add	r7, sp, #8
 8028d3e:	60f8      	str	r0, [r7, #12]
 8028d40:	60b9      	str	r1, [r7, #8]
 8028d42:	607a      	str	r2, [r7, #4]
 8028d44:	70fb      	strb	r3, [r7, #3]
  struct netvector vector;
  vector.ptr = dataptr;
 8028d46:	68bb      	ldr	r3, [r7, #8]
 8028d48:	613b      	str	r3, [r7, #16]
  vector.len = size;
 8028d4a:	687b      	ldr	r3, [r7, #4]
 8028d4c:	617b      	str	r3, [r7, #20]
  return netconn_write_vectors_partly(conn, &vector, 1, apiflags, bytes_written);
 8028d4e:	78fa      	ldrb	r2, [r7, #3]
 8028d50:	f107 0110 	add.w	r1, r7, #16
 8028d54:	6a3b      	ldr	r3, [r7, #32]
 8028d56:	9300      	str	r3, [sp, #0]
 8028d58:	4613      	mov	r3, r2
 8028d5a:	2201      	movs	r2, #1
 8028d5c:	68f8      	ldr	r0, [r7, #12]
 8028d5e:	f000 f805 	bl	8028d6c <netconn_write_vectors_partly>
 8028d62:	4603      	mov	r3, r0
}
 8028d64:	4618      	mov	r0, r3
 8028d66:	3718      	adds	r7, #24
 8028d68:	46bd      	mov	sp, r7
 8028d6a:	bd80      	pop	{r7, pc}

08028d6c <netconn_write_vectors_partly>:
 * @return ERR_OK if data was sent, any other err_t on error
 */
err_t
netconn_write_vectors_partly(struct netconn *conn, struct netvector *vectors, u16_t vectorcnt,
                             u8_t apiflags, size_t *bytes_written)
{
 8028d6c:	b580      	push	{r7, lr}
 8028d6e:	b092      	sub	sp, #72	; 0x48
 8028d70:	af00      	add	r7, sp, #0
 8028d72:	60f8      	str	r0, [r7, #12]
 8028d74:	60b9      	str	r1, [r7, #8]
 8028d76:	4611      	mov	r1, r2
 8028d78:	461a      	mov	r2, r3
 8028d7a:	460b      	mov	r3, r1
 8028d7c:	80fb      	strh	r3, [r7, #6]
 8028d7e:	4613      	mov	r3, r2
 8028d80:	717b      	strb	r3, [r7, #5]
  err_t err;
  u8_t dontblock;
  size_t size;
  int i;

  LWIP_ERROR("netconn_write: invalid conn",  (conn != NULL), return ERR_ARG;);
 8028d82:	68fb      	ldr	r3, [r7, #12]
 8028d84:	2b00      	cmp	r3, #0
 8028d86:	d109      	bne.n	8028d9c <netconn_write_vectors_partly+0x30>
 8028d88:	4b4e      	ldr	r3, [pc, #312]	; (8028ec4 <netconn_write_vectors_partly+0x158>)
 8028d8a:	f240 32ee 	movw	r2, #1006	; 0x3ee
 8028d8e:	494e      	ldr	r1, [pc, #312]	; (8028ec8 <netconn_write_vectors_partly+0x15c>)
 8028d90:	484e      	ldr	r0, [pc, #312]	; (8028ecc <netconn_write_vectors_partly+0x160>)
 8028d92:	f010 f969 	bl	8039068 <iprintf>
 8028d96:	f06f 030f 	mvn.w	r3, #15
 8028d9a:	e08f      	b.n	8028ebc <netconn_write_vectors_partly+0x150>
  LWIP_ERROR("netconn_write: invalid conn->type",  (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP), return ERR_VAL;);
 8028d9c:	68fb      	ldr	r3, [r7, #12]
 8028d9e:	781b      	ldrb	r3, [r3, #0]
 8028da0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8028da4:	2b10      	cmp	r3, #16
 8028da6:	d009      	beq.n	8028dbc <netconn_write_vectors_partly+0x50>
 8028da8:	4b46      	ldr	r3, [pc, #280]	; (8028ec4 <netconn_write_vectors_partly+0x158>)
 8028daa:	f240 32ef 	movw	r2, #1007	; 0x3ef
 8028dae:	4948      	ldr	r1, [pc, #288]	; (8028ed0 <netconn_write_vectors_partly+0x164>)
 8028db0:	4846      	ldr	r0, [pc, #280]	; (8028ecc <netconn_write_vectors_partly+0x160>)
 8028db2:	f010 f959 	bl	8039068 <iprintf>
 8028db6:	f06f 0305 	mvn.w	r3, #5
 8028dba:	e07f      	b.n	8028ebc <netconn_write_vectors_partly+0x150>
  dontblock = netconn_is_nonblocking(conn) || (apiflags & NETCONN_DONTBLOCK);
 8028dbc:	68fb      	ldr	r3, [r7, #12]
 8028dbe:	f893 3020 	ldrb.w	r3, [r3, #32]
 8028dc2:	f003 0302 	and.w	r3, r3, #2
 8028dc6:	2b00      	cmp	r3, #0
 8028dc8:	d104      	bne.n	8028dd4 <netconn_write_vectors_partly+0x68>
 8028dca:	797b      	ldrb	r3, [r7, #5]
 8028dcc:	f003 0304 	and.w	r3, r3, #4
 8028dd0:	2b00      	cmp	r3, #0
 8028dd2:	d001      	beq.n	8028dd8 <netconn_write_vectors_partly+0x6c>
 8028dd4:	2301      	movs	r3, #1
 8028dd6:	e000      	b.n	8028dda <netconn_write_vectors_partly+0x6e>
 8028dd8:	2300      	movs	r3, #0
 8028dda:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
#if LWIP_SO_SNDTIMEO
  if (conn->send_timeout != 0) {
    dontblock = 1;
  }
#endif /* LWIP_SO_SNDTIMEO */
  if (dontblock && !bytes_written) {
 8028dde:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8028de2:	2b00      	cmp	r3, #0
 8028de4:	d005      	beq.n	8028df2 <netconn_write_vectors_partly+0x86>
 8028de6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8028de8:	2b00      	cmp	r3, #0
 8028dea:	d102      	bne.n	8028df2 <netconn_write_vectors_partly+0x86>
    /* This implies netconn_write() cannot be used for non-blocking send, since
       it has no way to return the number of bytes written. */
    return ERR_VAL;
 8028dec:	f06f 0305 	mvn.w	r3, #5
 8028df0:	e064      	b.n	8028ebc <netconn_write_vectors_partly+0x150>
  }

  /* sum up the total size */
  size = 0;
 8028df2:	2300      	movs	r3, #0
 8028df4:	647b      	str	r3, [r7, #68]	; 0x44
  for (i = 0; i < vectorcnt; i++) {
 8028df6:	2300      	movs	r3, #0
 8028df8:	643b      	str	r3, [r7, #64]	; 0x40
 8028dfa:	e015      	b.n	8028e28 <netconn_write_vectors_partly+0xbc>
    size += vectors[i].len;
 8028dfc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8028dfe:	00db      	lsls	r3, r3, #3
 8028e00:	68ba      	ldr	r2, [r7, #8]
 8028e02:	4413      	add	r3, r2
 8028e04:	685b      	ldr	r3, [r3, #4]
 8028e06:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8028e08:	4413      	add	r3, r2
 8028e0a:	647b      	str	r3, [r7, #68]	; 0x44
    if (size < vectors[i].len) {
 8028e0c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8028e0e:	00db      	lsls	r3, r3, #3
 8028e10:	68ba      	ldr	r2, [r7, #8]
 8028e12:	4413      	add	r3, r2
 8028e14:	685b      	ldr	r3, [r3, #4]
 8028e16:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8028e18:	429a      	cmp	r2, r3
 8028e1a:	d202      	bcs.n	8028e22 <netconn_write_vectors_partly+0xb6>
      /* overflow */
      return ERR_VAL;
 8028e1c:	f06f 0305 	mvn.w	r3, #5
 8028e20:	e04c      	b.n	8028ebc <netconn_write_vectors_partly+0x150>
  for (i = 0; i < vectorcnt; i++) {
 8028e22:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8028e24:	3301      	adds	r3, #1
 8028e26:	643b      	str	r3, [r7, #64]	; 0x40
 8028e28:	88fb      	ldrh	r3, [r7, #6]
 8028e2a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8028e2c:	429a      	cmp	r2, r3
 8028e2e:	dbe5      	blt.n	8028dfc <netconn_write_vectors_partly+0x90>
    }
  }
  if (size == 0) {
 8028e30:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8028e32:	2b00      	cmp	r3, #0
 8028e34:	d101      	bne.n	8028e3a <netconn_write_vectors_partly+0xce>
    return ERR_OK;
 8028e36:	2300      	movs	r3, #0
 8028e38:	e040      	b.n	8028ebc <netconn_write_vectors_partly+0x150>
  } else if (size > SSIZE_MAX) {
 8028e3a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8028e3c:	2b00      	cmp	r3, #0
 8028e3e:	da0a      	bge.n	8028e56 <netconn_write_vectors_partly+0xea>
    ssize_t limited;
    /* this is required by the socket layer (cannot send full size_t range) */
    if (!bytes_written) {
 8028e40:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8028e42:	2b00      	cmp	r3, #0
 8028e44:	d102      	bne.n	8028e4c <netconn_write_vectors_partly+0xe0>
      return ERR_VAL;
 8028e46:	f06f 0305 	mvn.w	r3, #5
 8028e4a:	e037      	b.n	8028ebc <netconn_write_vectors_partly+0x150>
    }
    /* limit the amount of data to send */
    limited = SSIZE_MAX;
 8028e4c:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 8028e50:	63bb      	str	r3, [r7, #56]	; 0x38
    size = (size_t)limited;
 8028e52:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8028e54:	647b      	str	r3, [r7, #68]	; 0x44
  }

  API_MSG_VAR_ALLOC(msg);
  /* non-blocking write sends as much  */
  API_MSG_VAR_REF(msg).conn = conn;
 8028e56:	68fb      	ldr	r3, [r7, #12]
 8028e58:	617b      	str	r3, [r7, #20]
  API_MSG_VAR_REF(msg).msg.w.vector = vectors;
 8028e5a:	68bb      	ldr	r3, [r7, #8]
 8028e5c:	61fb      	str	r3, [r7, #28]
  API_MSG_VAR_REF(msg).msg.w.vector_cnt = vectorcnt;
 8028e5e:	88fb      	ldrh	r3, [r7, #6]
 8028e60:	843b      	strh	r3, [r7, #32]
  API_MSG_VAR_REF(msg).msg.w.vector_off = 0;
 8028e62:	2300      	movs	r3, #0
 8028e64:	627b      	str	r3, [r7, #36]	; 0x24
  API_MSG_VAR_REF(msg).msg.w.apiflags = apiflags;
 8028e66:	797b      	ldrb	r3, [r7, #5]
 8028e68:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  API_MSG_VAR_REF(msg).msg.w.len = size;
 8028e6c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8028e6e:	62bb      	str	r3, [r7, #40]	; 0x28
  API_MSG_VAR_REF(msg).msg.w.offset = 0;
 8028e70:	2300      	movs	r3, #0
 8028e72:	62fb      	str	r3, [r7, #44]	; 0x2c
#endif /* LWIP_SO_SNDTIMEO */

  /* For locking the core: this _can_ be delayed on low memory/low send buffer,
     but if it is, this is done inside api_msg.c:do_write(), so we can use the
     non-blocking version here. */
  err = netconn_apimsg(lwip_netconn_do_write, &API_MSG_VAR_REF(msg));
 8028e74:	f107 0314 	add.w	r3, r7, #20
 8028e78:	4619      	mov	r1, r3
 8028e7a:	4816      	ldr	r0, [pc, #88]	; (8028ed4 <netconn_write_vectors_partly+0x168>)
 8028e7c:	f7ff faf6 	bl	802846c <netconn_apimsg>
 8028e80:	4603      	mov	r3, r0
 8028e82:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
  if (err == ERR_OK) {
 8028e86:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 8028e8a:	2b00      	cmp	r3, #0
 8028e8c:	d114      	bne.n	8028eb8 <netconn_write_vectors_partly+0x14c>
    if (bytes_written != NULL) {
 8028e8e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8028e90:	2b00      	cmp	r3, #0
 8028e92:	d002      	beq.n	8028e9a <netconn_write_vectors_partly+0x12e>
      *bytes_written = API_MSG_VAR_REF(msg).msg.w.offset;
 8028e94:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8028e96:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8028e98:	601a      	str	r2, [r3, #0]
    }
    /* for blocking, check all requested bytes were written, NOTE: send_timeout is
       treated as dontblock (see dontblock assignment above) */
    if (!dontblock) {
 8028e9a:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8028e9e:	2b00      	cmp	r3, #0
 8028ea0:	d10a      	bne.n	8028eb8 <netconn_write_vectors_partly+0x14c>
      LWIP_ASSERT("do_write failed to write all bytes", API_MSG_VAR_REF(msg).msg.w.offset == size);
 8028ea2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8028ea4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8028ea6:	429a      	cmp	r2, r3
 8028ea8:	d006      	beq.n	8028eb8 <netconn_write_vectors_partly+0x14c>
 8028eaa:	4b06      	ldr	r3, [pc, #24]	; (8028ec4 <netconn_write_vectors_partly+0x158>)
 8028eac:	f44f 6286 	mov.w	r2, #1072	; 0x430
 8028eb0:	4909      	ldr	r1, [pc, #36]	; (8028ed8 <netconn_write_vectors_partly+0x16c>)
 8028eb2:	4806      	ldr	r0, [pc, #24]	; (8028ecc <netconn_write_vectors_partly+0x160>)
 8028eb4:	f010 f8d8 	bl	8039068 <iprintf>
    }
  }
  API_MSG_VAR_FREE(msg);

  return err;
 8028eb8:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
}
 8028ebc:	4618      	mov	r0, r3
 8028ebe:	3748      	adds	r7, #72	; 0x48
 8028ec0:	46bd      	mov	sp, r7
 8028ec2:	bd80      	pop	{r7, pc}
 8028ec4:	08039bb4 	.word	0x08039bb4
 8028ec8:	08039e8c 	.word	0x08039e8c
 8028ecc:	08039c0c 	.word	0x08039c0c
 8028ed0:	08039ea8 	.word	0x08039ea8
 8028ed4:	0802a5b1 	.word	0x0802a5b1
 8028ed8:	08039ecc 	.word	0x08039ecc

08028edc <netconn_close_shutdown>:
 * @param how fully close or only shutdown one side?
 * @return ERR_OK if the netconn was closed, any other err_t on error
 */
static err_t
netconn_close_shutdown(struct netconn *conn, u8_t how)
{
 8028edc:	b580      	push	{r7, lr}
 8028ede:	b08c      	sub	sp, #48	; 0x30
 8028ee0:	af00      	add	r7, sp, #0
 8028ee2:	6078      	str	r0, [r7, #4]
 8028ee4:	460b      	mov	r3, r1
 8028ee6:	70fb      	strb	r3, [r7, #3]
  API_MSG_VAR_DECLARE(msg);
  err_t err;
  LWIP_UNUSED_ARG(how);

  LWIP_ERROR("netconn_close: invalid conn",  (conn != NULL), return ERR_ARG;);
 8028ee8:	687b      	ldr	r3, [r7, #4]
 8028eea:	2b00      	cmp	r3, #0
 8028eec:	d109      	bne.n	8028f02 <netconn_close_shutdown+0x26>
 8028eee:	4b0f      	ldr	r3, [pc, #60]	; (8028f2c <netconn_close_shutdown+0x50>)
 8028ef0:	f240 4247 	movw	r2, #1095	; 0x447
 8028ef4:	490e      	ldr	r1, [pc, #56]	; (8028f30 <netconn_close_shutdown+0x54>)
 8028ef6:	480f      	ldr	r0, [pc, #60]	; (8028f34 <netconn_close_shutdown+0x58>)
 8028ef8:	f010 f8b6 	bl	8039068 <iprintf>
 8028efc:	f06f 030f 	mvn.w	r3, #15
 8028f00:	e010      	b.n	8028f24 <netconn_close_shutdown+0x48>

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
 8028f02:	687b      	ldr	r3, [r7, #4]
 8028f04:	60fb      	str	r3, [r7, #12]
#if LWIP_TCP
  /* shutting down both ends is the same as closing */
  API_MSG_VAR_REF(msg).msg.sd.shut = how;
 8028f06:	78fb      	ldrb	r3, [r7, #3]
 8028f08:	753b      	strb	r3, [r7, #20]
#if LWIP_SO_SNDTIMEO || LWIP_SO_LINGER
  /* get the time we started, which is later compared to
     sys_now() + conn->send_timeout */
  API_MSG_VAR_REF(msg).msg.sd.time_started = sys_now();
#else /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
  API_MSG_VAR_REF(msg).msg.sd.polls_left =
 8028f0a:	2329      	movs	r3, #41	; 0x29
 8028f0c:	757b      	strb	r3, [r7, #21]
    ((LWIP_TCP_CLOSE_TIMEOUT_MS_DEFAULT + TCP_SLOW_INTERVAL - 1) / TCP_SLOW_INTERVAL) + 1;
#endif /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
#endif /* LWIP_TCP */
  err = netconn_apimsg(lwip_netconn_do_close, &API_MSG_VAR_REF(msg));
 8028f0e:	f107 030c 	add.w	r3, r7, #12
 8028f12:	4619      	mov	r1, r3
 8028f14:	4808      	ldr	r0, [pc, #32]	; (8028f38 <netconn_close_shutdown+0x5c>)
 8028f16:	f7ff faa9 	bl	802846c <netconn_apimsg>
 8028f1a:	4603      	mov	r3, r0
 8028f1c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  API_MSG_VAR_FREE(msg);

  return err;
 8028f20:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
}
 8028f24:	4618      	mov	r0, r3
 8028f26:	3730      	adds	r7, #48	; 0x30
 8028f28:	46bd      	mov	sp, r7
 8028f2a:	bd80      	pop	{r7, pc}
 8028f2c:	08039bb4 	.word	0x08039bb4
 8028f30:	08039ef0 	.word	0x08039ef0
 8028f34:	08039c0c 	.word	0x08039c0c
 8028f38:	0802a7d5 	.word	0x0802a7d5

08028f3c <netconn_err>:
 * @param conn the netconn to get the error from
 * @return and pending error or ERR_OK if no error was pending
 */
err_t
netconn_err(struct netconn *conn)
{
 8028f3c:	b580      	push	{r7, lr}
 8028f3e:	b084      	sub	sp, #16
 8028f40:	af00      	add	r7, sp, #0
 8028f42:	6078      	str	r0, [r7, #4]
  err_t err;
  SYS_ARCH_DECL_PROTECT(lev);
  if (conn == NULL) {
 8028f44:	687b      	ldr	r3, [r7, #4]
 8028f46:	2b00      	cmp	r3, #0
 8028f48:	d101      	bne.n	8028f4e <netconn_err+0x12>
    return ERR_OK;
 8028f4a:	2300      	movs	r3, #0
 8028f4c:	e00d      	b.n	8028f6a <netconn_err+0x2e>
  }
  SYS_ARCH_PROTECT(lev);
 8028f4e:	f00f fafd 	bl	803854c <sys_arch_protect>
 8028f52:	60f8      	str	r0, [r7, #12]
  err = conn->pending_err;
 8028f54:	687b      	ldr	r3, [r7, #4]
 8028f56:	7a1b      	ldrb	r3, [r3, #8]
 8028f58:	72fb      	strb	r3, [r7, #11]
  conn->pending_err = ERR_OK;
 8028f5a:	687b      	ldr	r3, [r7, #4]
 8028f5c:	2200      	movs	r2, #0
 8028f5e:	721a      	strb	r2, [r3, #8]
  SYS_ARCH_UNPROTECT(lev);
 8028f60:	68f8      	ldr	r0, [r7, #12]
 8028f62:	f00f fb01 	bl	8038568 <sys_arch_unprotect>
  return err;
 8028f66:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 8028f6a:	4618      	mov	r0, r3
 8028f6c:	3710      	adds	r7, #16
 8028f6e:	46bd      	mov	sp, r7
 8028f70:	bd80      	pop	{r7, pc}
	...

08028f74 <lwip_netconn_err_to_msg>:
const u8_t netconn_closed = 0;

/** Translate an error to a unique void* passed via an mbox */
static void *
lwip_netconn_err_to_msg(err_t err)
{
 8028f74:	b580      	push	{r7, lr}
 8028f76:	b082      	sub	sp, #8
 8028f78:	af00      	add	r7, sp, #0
 8028f7a:	4603      	mov	r3, r0
 8028f7c:	71fb      	strb	r3, [r7, #7]
  switch (err) {
 8028f7e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8028f82:	f113 0f0d 	cmn.w	r3, #13
 8028f86:	d009      	beq.n	8028f9c <lwip_netconn_err_to_msg+0x28>
 8028f88:	f113 0f0d 	cmn.w	r3, #13
 8028f8c:	dc0c      	bgt.n	8028fa8 <lwip_netconn_err_to_msg+0x34>
 8028f8e:	f113 0f0f 	cmn.w	r3, #15
 8028f92:	d007      	beq.n	8028fa4 <lwip_netconn_err_to_msg+0x30>
 8028f94:	f113 0f0e 	cmn.w	r3, #14
 8028f98:	d002      	beq.n	8028fa0 <lwip_netconn_err_to_msg+0x2c>
 8028f9a:	e005      	b.n	8028fa8 <lwip_netconn_err_to_msg+0x34>
    case ERR_ABRT:
      return LWIP_CONST_CAST(void *, &netconn_aborted);
 8028f9c:	4b0a      	ldr	r3, [pc, #40]	; (8028fc8 <lwip_netconn_err_to_msg+0x54>)
 8028f9e:	e00e      	b.n	8028fbe <lwip_netconn_err_to_msg+0x4a>
    case ERR_RST:
      return LWIP_CONST_CAST(void *, &netconn_reset);
 8028fa0:	4b0a      	ldr	r3, [pc, #40]	; (8028fcc <lwip_netconn_err_to_msg+0x58>)
 8028fa2:	e00c      	b.n	8028fbe <lwip_netconn_err_to_msg+0x4a>
    case ERR_CLSD:
      return LWIP_CONST_CAST(void *, &netconn_closed);
 8028fa4:	4b0a      	ldr	r3, [pc, #40]	; (8028fd0 <lwip_netconn_err_to_msg+0x5c>)
 8028fa6:	e00a      	b.n	8028fbe <lwip_netconn_err_to_msg+0x4a>
    default:
      LWIP_ASSERT("unhandled error", err == ERR_OK);
 8028fa8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8028fac:	2b00      	cmp	r3, #0
 8028fae:	d005      	beq.n	8028fbc <lwip_netconn_err_to_msg+0x48>
 8028fb0:	4b08      	ldr	r3, [pc, #32]	; (8028fd4 <lwip_netconn_err_to_msg+0x60>)
 8028fb2:	227d      	movs	r2, #125	; 0x7d
 8028fb4:	4908      	ldr	r1, [pc, #32]	; (8028fd8 <lwip_netconn_err_to_msg+0x64>)
 8028fb6:	4809      	ldr	r0, [pc, #36]	; (8028fdc <lwip_netconn_err_to_msg+0x68>)
 8028fb8:	f010 f856 	bl	8039068 <iprintf>
      return NULL;
 8028fbc:	2300      	movs	r3, #0
  }
}
 8028fbe:	4618      	mov	r0, r3
 8028fc0:	3708      	adds	r7, #8
 8028fc2:	46bd      	mov	sp, r7
 8028fc4:	bd80      	pop	{r7, pc}
 8028fc6:	bf00      	nop
 8028fc8:	0803d4a0 	.word	0x0803d4a0
 8028fcc:	0803d4a1 	.word	0x0803d4a1
 8028fd0:	0803d4a2 	.word	0x0803d4a2
 8028fd4:	08039f0c 	.word	0x08039f0c
 8028fd8:	08039f40 	.word	0x08039f40
 8028fdc:	08039f50 	.word	0x08039f50

08028fe0 <lwip_netconn_is_err_msg>:

int
lwip_netconn_is_err_msg(void *msg, err_t *err)
{
 8028fe0:	b580      	push	{r7, lr}
 8028fe2:	b082      	sub	sp, #8
 8028fe4:	af00      	add	r7, sp, #0
 8028fe6:	6078      	str	r0, [r7, #4]
 8028fe8:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("err != NULL", err != NULL);
 8028fea:	683b      	ldr	r3, [r7, #0]
 8028fec:	2b00      	cmp	r3, #0
 8028fee:	d105      	bne.n	8028ffc <lwip_netconn_is_err_msg+0x1c>
 8028ff0:	4b12      	ldr	r3, [pc, #72]	; (802903c <lwip_netconn_is_err_msg+0x5c>)
 8028ff2:	2285      	movs	r2, #133	; 0x85
 8028ff4:	4912      	ldr	r1, [pc, #72]	; (8029040 <lwip_netconn_is_err_msg+0x60>)
 8028ff6:	4813      	ldr	r0, [pc, #76]	; (8029044 <lwip_netconn_is_err_msg+0x64>)
 8028ff8:	f010 f836 	bl	8039068 <iprintf>

  if (msg == &netconn_aborted) {
 8028ffc:	687b      	ldr	r3, [r7, #4]
 8028ffe:	4a12      	ldr	r2, [pc, #72]	; (8029048 <lwip_netconn_is_err_msg+0x68>)
 8029000:	4293      	cmp	r3, r2
 8029002:	d104      	bne.n	802900e <lwip_netconn_is_err_msg+0x2e>
    *err = ERR_ABRT;
 8029004:	683b      	ldr	r3, [r7, #0]
 8029006:	22f3      	movs	r2, #243	; 0xf3
 8029008:	701a      	strb	r2, [r3, #0]
    return 1;
 802900a:	2301      	movs	r3, #1
 802900c:	e012      	b.n	8029034 <lwip_netconn_is_err_msg+0x54>
  } else if (msg == &netconn_reset) {
 802900e:	687b      	ldr	r3, [r7, #4]
 8029010:	4a0e      	ldr	r2, [pc, #56]	; (802904c <lwip_netconn_is_err_msg+0x6c>)
 8029012:	4293      	cmp	r3, r2
 8029014:	d104      	bne.n	8029020 <lwip_netconn_is_err_msg+0x40>
    *err = ERR_RST;
 8029016:	683b      	ldr	r3, [r7, #0]
 8029018:	22f2      	movs	r2, #242	; 0xf2
 802901a:	701a      	strb	r2, [r3, #0]
    return 1;
 802901c:	2301      	movs	r3, #1
 802901e:	e009      	b.n	8029034 <lwip_netconn_is_err_msg+0x54>
  } else if (msg == &netconn_closed) {
 8029020:	687b      	ldr	r3, [r7, #4]
 8029022:	4a0b      	ldr	r2, [pc, #44]	; (8029050 <lwip_netconn_is_err_msg+0x70>)
 8029024:	4293      	cmp	r3, r2
 8029026:	d104      	bne.n	8029032 <lwip_netconn_is_err_msg+0x52>
    *err = ERR_CLSD;
 8029028:	683b      	ldr	r3, [r7, #0]
 802902a:	22f1      	movs	r2, #241	; 0xf1
 802902c:	701a      	strb	r2, [r3, #0]
    return 1;
 802902e:	2301      	movs	r3, #1
 8029030:	e000      	b.n	8029034 <lwip_netconn_is_err_msg+0x54>
  }
  return 0;
 8029032:	2300      	movs	r3, #0
}
 8029034:	4618      	mov	r0, r3
 8029036:	3708      	adds	r7, #8
 8029038:	46bd      	mov	sp, r7
 802903a:	bd80      	pop	{r7, pc}
 802903c:	08039f0c 	.word	0x08039f0c
 8029040:	08039f78 	.word	0x08039f78
 8029044:	08039f50 	.word	0x08039f50
 8029048:	0803d4a0 	.word	0x0803d4a0
 802904c:	0803d4a1 	.word	0x0803d4a1
 8029050:	0803d4a2 	.word	0x0803d4a2

08029054 <recv_udp>:
 * @see udp.h (struct udp_pcb.recv) for parameters
 */
static void
recv_udp(void *arg, struct udp_pcb *pcb, struct pbuf *p,
         const ip_addr_t *addr, u16_t port)
{
 8029054:	b580      	push	{r7, lr}
 8029056:	b088      	sub	sp, #32
 8029058:	af00      	add	r7, sp, #0
 802905a:	60f8      	str	r0, [r7, #12]
 802905c:	60b9      	str	r1, [r7, #8]
 802905e:	607a      	str	r2, [r7, #4]
 8029060:	603b      	str	r3, [r7, #0]
#if LWIP_SO_RCVBUF
  int recv_avail;
#endif /* LWIP_SO_RCVBUF */

  LWIP_UNUSED_ARG(pcb); /* only used for asserts... */
  LWIP_ASSERT("recv_udp must have a pcb argument", pcb != NULL);
 8029062:	68bb      	ldr	r3, [r7, #8]
 8029064:	2b00      	cmp	r3, #0
 8029066:	d105      	bne.n	8029074 <recv_udp+0x20>
 8029068:	4b34      	ldr	r3, [pc, #208]	; (802913c <recv_udp+0xe8>)
 802906a:	22e5      	movs	r2, #229	; 0xe5
 802906c:	4934      	ldr	r1, [pc, #208]	; (8029140 <recv_udp+0xec>)
 802906e:	4835      	ldr	r0, [pc, #212]	; (8029144 <recv_udp+0xf0>)
 8029070:	f00f fffa 	bl	8039068 <iprintf>
  LWIP_ASSERT("recv_udp must have an argument", arg != NULL);
 8029074:	68fb      	ldr	r3, [r7, #12]
 8029076:	2b00      	cmp	r3, #0
 8029078:	d105      	bne.n	8029086 <recv_udp+0x32>
 802907a:	4b30      	ldr	r3, [pc, #192]	; (802913c <recv_udp+0xe8>)
 802907c:	22e6      	movs	r2, #230	; 0xe6
 802907e:	4932      	ldr	r1, [pc, #200]	; (8029148 <recv_udp+0xf4>)
 8029080:	4830      	ldr	r0, [pc, #192]	; (8029144 <recv_udp+0xf0>)
 8029082:	f00f fff1 	bl	8039068 <iprintf>
  conn = (struct netconn *)arg;
 8029086:	68fb      	ldr	r3, [r7, #12]
 8029088:	61fb      	str	r3, [r7, #28]

  if (conn == NULL) {
 802908a:	69fb      	ldr	r3, [r7, #28]
 802908c:	2b00      	cmp	r3, #0
 802908e:	d103      	bne.n	8029098 <recv_udp+0x44>
    pbuf_free(p);
 8029090:	6878      	ldr	r0, [r7, #4]
 8029092:	f005 f93b 	bl	802e30c <pbuf_free>
    return;
 8029096:	e04d      	b.n	8029134 <recv_udp+0xe0>
  }

  LWIP_ASSERT("recv_udp: recv for wrong pcb!", conn->pcb.udp == pcb);
 8029098:	69fb      	ldr	r3, [r7, #28]
 802909a:	685b      	ldr	r3, [r3, #4]
 802909c:	68ba      	ldr	r2, [r7, #8]
 802909e:	429a      	cmp	r2, r3
 80290a0:	d005      	beq.n	80290ae <recv_udp+0x5a>
 80290a2:	4b26      	ldr	r3, [pc, #152]	; (802913c <recv_udp+0xe8>)
 80290a4:	22ee      	movs	r2, #238	; 0xee
 80290a6:	4929      	ldr	r1, [pc, #164]	; (802914c <recv_udp+0xf8>)
 80290a8:	4826      	ldr	r0, [pc, #152]	; (8029144 <recv_udp+0xf0>)
 80290aa:	f00f ffdd 	bl	8039068 <iprintf>
#if LWIP_SO_RCVBUF
  SYS_ARCH_GET(conn->recv_avail, recv_avail);
  if (!NETCONN_MBOX_VALID(conn, &conn->recvmbox) ||
      ((recv_avail + (int)(p->tot_len)) > conn->recv_bufsize)) {
#else  /* LWIP_SO_RCVBUF */
  if (!NETCONN_MBOX_VALID(conn, &conn->recvmbox)) {
 80290ae:	69fb      	ldr	r3, [r7, #28]
 80290b0:	3310      	adds	r3, #16
 80290b2:	4618      	mov	r0, r3
 80290b4:	f00f f8e3 	bl	803827e <sys_mbox_valid>
 80290b8:	4603      	mov	r3, r0
 80290ba:	2b00      	cmp	r3, #0
 80290bc:	d103      	bne.n	80290c6 <recv_udp+0x72>
#endif /* LWIP_SO_RCVBUF */
    pbuf_free(p);
 80290be:	6878      	ldr	r0, [r7, #4]
 80290c0:	f005 f924 	bl	802e30c <pbuf_free>
    return;
 80290c4:	e036      	b.n	8029134 <recv_udp+0xe0>
  }

  buf = (struct netbuf *)memp_malloc(MEMP_NETBUF);
 80290c6:	2006      	movs	r0, #6
 80290c8:	f004 f9ce 	bl	802d468 <memp_malloc>
 80290cc:	61b8      	str	r0, [r7, #24]
  if (buf == NULL) {
 80290ce:	69bb      	ldr	r3, [r7, #24]
 80290d0:	2b00      	cmp	r3, #0
 80290d2:	d103      	bne.n	80290dc <recv_udp+0x88>
    pbuf_free(p);
 80290d4:	6878      	ldr	r0, [r7, #4]
 80290d6:	f005 f919 	bl	802e30c <pbuf_free>
    return;
 80290da:	e02b      	b.n	8029134 <recv_udp+0xe0>
  } else {
    buf->p = p;
 80290dc:	69bb      	ldr	r3, [r7, #24]
 80290de:	687a      	ldr	r2, [r7, #4]
 80290e0:	601a      	str	r2, [r3, #0]
    buf->ptr = p;
 80290e2:	69bb      	ldr	r3, [r7, #24]
 80290e4:	687a      	ldr	r2, [r7, #4]
 80290e6:	605a      	str	r2, [r3, #4]
    ip_addr_set(&buf->addr, addr);
 80290e8:	683b      	ldr	r3, [r7, #0]
 80290ea:	2b00      	cmp	r3, #0
 80290ec:	d002      	beq.n	80290f4 <recv_udp+0xa0>
 80290ee:	683b      	ldr	r3, [r7, #0]
 80290f0:	681b      	ldr	r3, [r3, #0]
 80290f2:	e000      	b.n	80290f6 <recv_udp+0xa2>
 80290f4:	2300      	movs	r3, #0
 80290f6:	69ba      	ldr	r2, [r7, #24]
 80290f8:	6093      	str	r3, [r2, #8]
    buf->port = port;
 80290fa:	69bb      	ldr	r3, [r7, #24]
 80290fc:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 80290fe:	819a      	strh	r2, [r3, #12]
      buf->toport_chksum = udphdr->dest;
    }
#endif /* LWIP_NETBUF_RECVINFO */
  }

  len = p->tot_len;
 8029100:	687b      	ldr	r3, [r7, #4]
 8029102:	891b      	ldrh	r3, [r3, #8]
 8029104:	82fb      	strh	r3, [r7, #22]
  if (sys_mbox_trypost(&conn->recvmbox, buf) != ERR_OK) {
 8029106:	69fb      	ldr	r3, [r7, #28]
 8029108:	3310      	adds	r3, #16
 802910a:	69b9      	ldr	r1, [r7, #24]
 802910c:	4618      	mov	r0, r3
 802910e:	f00f f837 	bl	8038180 <sys_mbox_trypost>
 8029112:	4603      	mov	r3, r0
 8029114:	2b00      	cmp	r3, #0
 8029116:	d003      	beq.n	8029120 <recv_udp+0xcc>
    netbuf_delete(buf);
 8029118:	69b8      	ldr	r0, [r7, #24]
 802911a:	f001 fc05 	bl	802a928 <netbuf_delete>
    return;
 802911e:	e009      	b.n	8029134 <recv_udp+0xe0>
  } else {
#if LWIP_SO_RCVBUF
    SYS_ARCH_INC(conn->recv_avail, len);
#endif /* LWIP_SO_RCVBUF */
    /* Register event with callback */
    API_EVENT(conn, NETCONN_EVT_RCVPLUS, len);
 8029120:	69fb      	ldr	r3, [r7, #28]
 8029122:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8029124:	2b00      	cmp	r3, #0
 8029126:	d005      	beq.n	8029134 <recv_udp+0xe0>
 8029128:	69fb      	ldr	r3, [r7, #28]
 802912a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 802912c:	8afa      	ldrh	r2, [r7, #22]
 802912e:	2100      	movs	r1, #0
 8029130:	69f8      	ldr	r0, [r7, #28]
 8029132:	4798      	blx	r3
  }
}
 8029134:	3720      	adds	r7, #32
 8029136:	46bd      	mov	sp, r7
 8029138:	bd80      	pop	{r7, pc}
 802913a:	bf00      	nop
 802913c:	08039f0c 	.word	0x08039f0c
 8029140:	08039f84 	.word	0x08039f84
 8029144:	08039f50 	.word	0x08039f50
 8029148:	08039fa8 	.word	0x08039fa8
 802914c:	08039fc8 	.word	0x08039fc8

08029150 <recv_tcp>:
 *
 * @see tcp.h (struct tcp_pcb.recv) for parameters and return value
 */
static err_t
recv_tcp(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
 8029150:	b580      	push	{r7, lr}
 8029152:	b088      	sub	sp, #32
 8029154:	af00      	add	r7, sp, #0
 8029156:	60f8      	str	r0, [r7, #12]
 8029158:	60b9      	str	r1, [r7, #8]
 802915a:	607a      	str	r2, [r7, #4]
 802915c:	70fb      	strb	r3, [r7, #3]
  struct netconn *conn;
  u16_t len;
  void *msg;

  LWIP_UNUSED_ARG(pcb);
  LWIP_ASSERT("recv_tcp must have a pcb argument", pcb != NULL);
 802915e:	68bb      	ldr	r3, [r7, #8]
 8029160:	2b00      	cmp	r3, #0
 8029162:	d106      	bne.n	8029172 <recv_tcp+0x22>
 8029164:	4b36      	ldr	r3, [pc, #216]	; (8029240 <recv_tcp+0xf0>)
 8029166:	f44f 7296 	mov.w	r2, #300	; 0x12c
 802916a:	4936      	ldr	r1, [pc, #216]	; (8029244 <recv_tcp+0xf4>)
 802916c:	4836      	ldr	r0, [pc, #216]	; (8029248 <recv_tcp+0xf8>)
 802916e:	f00f ff7b 	bl	8039068 <iprintf>
  LWIP_ASSERT("recv_tcp must have an argument", arg != NULL);
 8029172:	68fb      	ldr	r3, [r7, #12]
 8029174:	2b00      	cmp	r3, #0
 8029176:	d106      	bne.n	8029186 <recv_tcp+0x36>
 8029178:	4b31      	ldr	r3, [pc, #196]	; (8029240 <recv_tcp+0xf0>)
 802917a:	f240 122d 	movw	r2, #301	; 0x12d
 802917e:	4933      	ldr	r1, [pc, #204]	; (802924c <recv_tcp+0xfc>)
 8029180:	4831      	ldr	r0, [pc, #196]	; (8029248 <recv_tcp+0xf8>)
 8029182:	f00f ff71 	bl	8039068 <iprintf>
  LWIP_ASSERT("err != ERR_OK unhandled", err == ERR_OK);
 8029186:	f997 3003 	ldrsb.w	r3, [r7, #3]
 802918a:	2b00      	cmp	r3, #0
 802918c:	d006      	beq.n	802919c <recv_tcp+0x4c>
 802918e:	4b2c      	ldr	r3, [pc, #176]	; (8029240 <recv_tcp+0xf0>)
 8029190:	f44f 7297 	mov.w	r2, #302	; 0x12e
 8029194:	492e      	ldr	r1, [pc, #184]	; (8029250 <recv_tcp+0x100>)
 8029196:	482c      	ldr	r0, [pc, #176]	; (8029248 <recv_tcp+0xf8>)
 8029198:	f00f ff66 	bl	8039068 <iprintf>
  LWIP_UNUSED_ARG(err); /* for LWIP_NOASSERT */
  conn = (struct netconn *)arg;
 802919c:	68fb      	ldr	r3, [r7, #12]
 802919e:	617b      	str	r3, [r7, #20]

  if (conn == NULL) {
 80291a0:	697b      	ldr	r3, [r7, #20]
 80291a2:	2b00      	cmp	r3, #0
 80291a4:	d102      	bne.n	80291ac <recv_tcp+0x5c>
    return ERR_VAL;
 80291a6:	f06f 0305 	mvn.w	r3, #5
 80291aa:	e045      	b.n	8029238 <recv_tcp+0xe8>
  }
  LWIP_ASSERT("recv_tcp: recv for wrong pcb!", conn->pcb.tcp == pcb);
 80291ac:	697b      	ldr	r3, [r7, #20]
 80291ae:	685b      	ldr	r3, [r3, #4]
 80291b0:	68ba      	ldr	r2, [r7, #8]
 80291b2:	429a      	cmp	r2, r3
 80291b4:	d006      	beq.n	80291c4 <recv_tcp+0x74>
 80291b6:	4b22      	ldr	r3, [pc, #136]	; (8029240 <recv_tcp+0xf0>)
 80291b8:	f240 1235 	movw	r2, #309	; 0x135
 80291bc:	4925      	ldr	r1, [pc, #148]	; (8029254 <recv_tcp+0x104>)
 80291be:	4822      	ldr	r0, [pc, #136]	; (8029248 <recv_tcp+0xf8>)
 80291c0:	f00f ff52 	bl	8039068 <iprintf>

  if (!NETCONN_MBOX_VALID(conn, &conn->recvmbox)) {
 80291c4:	697b      	ldr	r3, [r7, #20]
 80291c6:	3310      	adds	r3, #16
 80291c8:	4618      	mov	r0, r3
 80291ca:	f00f f858 	bl	803827e <sys_mbox_valid>
 80291ce:	4603      	mov	r3, r0
 80291d0:	2b00      	cmp	r3, #0
 80291d2:	d10d      	bne.n	80291f0 <recv_tcp+0xa0>
    /* recvmbox already deleted */
    if (p != NULL) {
 80291d4:	687b      	ldr	r3, [r7, #4]
 80291d6:	2b00      	cmp	r3, #0
 80291d8:	d008      	beq.n	80291ec <recv_tcp+0x9c>
      tcp_recved(pcb, p->tot_len);
 80291da:	687b      	ldr	r3, [r7, #4]
 80291dc:	891b      	ldrh	r3, [r3, #8]
 80291de:	4619      	mov	r1, r3
 80291e0:	68b8      	ldr	r0, [r7, #8]
 80291e2:	f006 f863 	bl	802f2ac <tcp_recved>
      pbuf_free(p);
 80291e6:	6878      	ldr	r0, [r7, #4]
 80291e8:	f005 f890 	bl	802e30c <pbuf_free>
    }
    return ERR_OK;
 80291ec:	2300      	movs	r3, #0
 80291ee:	e023      	b.n	8029238 <recv_tcp+0xe8>
  }
  /* Unlike for UDP or RAW pcbs, don't check for available space
     using recv_avail since that could break the connection
     (data is already ACKed) */

  if (p != NULL) {
 80291f0:	687b      	ldr	r3, [r7, #4]
 80291f2:	2b00      	cmp	r3, #0
 80291f4:	d005      	beq.n	8029202 <recv_tcp+0xb2>
    msg = p;
 80291f6:	687b      	ldr	r3, [r7, #4]
 80291f8:	61bb      	str	r3, [r7, #24]
    len = p->tot_len;
 80291fa:	687b      	ldr	r3, [r7, #4]
 80291fc:	891b      	ldrh	r3, [r3, #8]
 80291fe:	83fb      	strh	r3, [r7, #30]
 8029200:	e003      	b.n	802920a <recv_tcp+0xba>
  } else {
    msg = LWIP_CONST_CAST(void *, &netconn_closed);
 8029202:	4b15      	ldr	r3, [pc, #84]	; (8029258 <recv_tcp+0x108>)
 8029204:	61bb      	str	r3, [r7, #24]
    len = 0;
 8029206:	2300      	movs	r3, #0
 8029208:	83fb      	strh	r3, [r7, #30]
  }

  if (sys_mbox_trypost(&conn->recvmbox, msg) != ERR_OK) {
 802920a:	697b      	ldr	r3, [r7, #20]
 802920c:	3310      	adds	r3, #16
 802920e:	69b9      	ldr	r1, [r7, #24]
 8029210:	4618      	mov	r0, r3
 8029212:	f00e ffb5 	bl	8038180 <sys_mbox_trypost>
 8029216:	4603      	mov	r3, r0
 8029218:	2b00      	cmp	r3, #0
 802921a:	d002      	beq.n	8029222 <recv_tcp+0xd2>
    /* don't deallocate p: it is presented to us later again from tcp_fasttmr! */
    return ERR_MEM;
 802921c:	f04f 33ff 	mov.w	r3, #4294967295
 8029220:	e00a      	b.n	8029238 <recv_tcp+0xe8>
  } else {
#if LWIP_SO_RCVBUF
    SYS_ARCH_INC(conn->recv_avail, len);
#endif /* LWIP_SO_RCVBUF */
    /* Register event with callback */
    API_EVENT(conn, NETCONN_EVT_RCVPLUS, len);
 8029222:	697b      	ldr	r3, [r7, #20]
 8029224:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8029226:	2b00      	cmp	r3, #0
 8029228:	d005      	beq.n	8029236 <recv_tcp+0xe6>
 802922a:	697b      	ldr	r3, [r7, #20]
 802922c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 802922e:	8bfa      	ldrh	r2, [r7, #30]
 8029230:	2100      	movs	r1, #0
 8029232:	6978      	ldr	r0, [r7, #20]
 8029234:	4798      	blx	r3
  }

  return ERR_OK;
 8029236:	2300      	movs	r3, #0
}
 8029238:	4618      	mov	r0, r3
 802923a:	3720      	adds	r7, #32
 802923c:	46bd      	mov	sp, r7
 802923e:	bd80      	pop	{r7, pc}
 8029240:	08039f0c 	.word	0x08039f0c
 8029244:	08039fe8 	.word	0x08039fe8
 8029248:	08039f50 	.word	0x08039f50
 802924c:	0803a00c 	.word	0x0803a00c
 8029250:	0803a02c 	.word	0x0803a02c
 8029254:	0803a044 	.word	0x0803a044
 8029258:	0803d4a2 	.word	0x0803d4a2

0802925c <poll_tcp>:
 *
 * @see tcp.h (struct tcp_pcb.poll) for parameters and return value
 */
static err_t
poll_tcp(void *arg, struct tcp_pcb *pcb)
{
 802925c:	b580      	push	{r7, lr}
 802925e:	b084      	sub	sp, #16
 8029260:	af00      	add	r7, sp, #0
 8029262:	6078      	str	r0, [r7, #4]
 8029264:	6039      	str	r1, [r7, #0]
  struct netconn *conn = (struct netconn *)arg;
 8029266:	687b      	ldr	r3, [r7, #4]
 8029268:	60fb      	str	r3, [r7, #12]

  LWIP_UNUSED_ARG(pcb);
  LWIP_ASSERT("conn != NULL", (conn != NULL));
 802926a:	68fb      	ldr	r3, [r7, #12]
 802926c:	2b00      	cmp	r3, #0
 802926e:	d106      	bne.n	802927e <poll_tcp+0x22>
 8029270:	4b2b      	ldr	r3, [pc, #172]	; (8029320 <poll_tcp+0xc4>)
 8029272:	f44f 72b5 	mov.w	r2, #362	; 0x16a
 8029276:	492b      	ldr	r1, [pc, #172]	; (8029324 <poll_tcp+0xc8>)
 8029278:	482b      	ldr	r0, [pc, #172]	; (8029328 <poll_tcp+0xcc>)
 802927a:	f00f fef5 	bl	8039068 <iprintf>

  if (conn->state == NETCONN_WRITE) {
 802927e:	68fb      	ldr	r3, [r7, #12]
 8029280:	785b      	ldrb	r3, [r3, #1]
 8029282:	2b01      	cmp	r3, #1
 8029284:	d104      	bne.n	8029290 <poll_tcp+0x34>
    lwip_netconn_do_writemore(conn  WRITE_DELAYED);
 8029286:	2101      	movs	r1, #1
 8029288:	68f8      	ldr	r0, [r7, #12]
 802928a:	f000 ffc1 	bl	802a210 <lwip_netconn_do_writemore>
 802928e:	e016      	b.n	80292be <poll_tcp+0x62>
  } else if (conn->state == NETCONN_CLOSE) {
 8029290:	68fb      	ldr	r3, [r7, #12]
 8029292:	785b      	ldrb	r3, [r3, #1]
 8029294:	2b04      	cmp	r3, #4
 8029296:	d112      	bne.n	80292be <poll_tcp+0x62>
#if !LWIP_SO_SNDTIMEO && !LWIP_SO_LINGER
    if (conn->current_msg && conn->current_msg->msg.sd.polls_left) {
 8029298:	68fb      	ldr	r3, [r7, #12]
 802929a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 802929c:	2b00      	cmp	r3, #0
 802929e:	d00a      	beq.n	80292b6 <poll_tcp+0x5a>
 80292a0:	68fb      	ldr	r3, [r7, #12]
 80292a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80292a4:	7a5b      	ldrb	r3, [r3, #9]
 80292a6:	2b00      	cmp	r3, #0
 80292a8:	d005      	beq.n	80292b6 <poll_tcp+0x5a>
      conn->current_msg->msg.sd.polls_left--;
 80292aa:	68fb      	ldr	r3, [r7, #12]
 80292ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80292ae:	7a5a      	ldrb	r2, [r3, #9]
 80292b0:	3a01      	subs	r2, #1
 80292b2:	b2d2      	uxtb	r2, r2
 80292b4:	725a      	strb	r2, [r3, #9]
    }
#endif /* !LWIP_SO_SNDTIMEO && !LWIP_SO_LINGER */
    lwip_netconn_do_close_internal(conn  WRITE_DELAYED);
 80292b6:	2101      	movs	r1, #1
 80292b8:	68f8      	ldr	r0, [r7, #12]
 80292ba:	f000 fc05 	bl	8029ac8 <lwip_netconn_do_close_internal>
  }
  /* @todo: implement connect timeout here? */

  /* Did a nonblocking write fail before? Then check available write-space. */
  if (conn->flags & NETCONN_FLAG_CHECK_WRITESPACE) {
 80292be:	68fb      	ldr	r3, [r7, #12]
 80292c0:	f893 3020 	ldrb.w	r3, [r3, #32]
 80292c4:	f003 0310 	and.w	r3, r3, #16
 80292c8:	2b00      	cmp	r3, #0
 80292ca:	d023      	beq.n	8029314 <poll_tcp+0xb8>
    /* If the queued byte- or pbuf-count drops below the configured low-water limit,
       let select mark this pcb as writable again. */
    if ((conn->pcb.tcp != NULL) && (tcp_sndbuf(conn->pcb.tcp) > TCP_SNDLOWAT) &&
 80292cc:	68fb      	ldr	r3, [r7, #12]
 80292ce:	685b      	ldr	r3, [r3, #4]
 80292d0:	2b00      	cmp	r3, #0
 80292d2:	d01f      	beq.n	8029314 <poll_tcp+0xb8>
 80292d4:	68fb      	ldr	r3, [r7, #12]
 80292d6:	685b      	ldr	r3, [r3, #4]
 80292d8:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 80292dc:	f5b3 6f86 	cmp.w	r3, #1072	; 0x430
 80292e0:	d318      	bcc.n	8029314 <poll_tcp+0xb8>
        (tcp_sndqueuelen(conn->pcb.tcp) < TCP_SNDQUEUELOWAT)) {
 80292e2:	68fb      	ldr	r3, [r7, #12]
 80292e4:	685b      	ldr	r3, [r3, #4]
 80292e6:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
    if ((conn->pcb.tcp != NULL) && (tcp_sndbuf(conn->pcb.tcp) > TCP_SNDLOWAT) &&
 80292ea:	2b04      	cmp	r3, #4
 80292ec:	d812      	bhi.n	8029314 <poll_tcp+0xb8>
      netconn_clear_flags(conn, NETCONN_FLAG_CHECK_WRITESPACE);
 80292ee:	68fb      	ldr	r3, [r7, #12]
 80292f0:	f893 3020 	ldrb.w	r3, [r3, #32]
 80292f4:	f023 0310 	bic.w	r3, r3, #16
 80292f8:	b2da      	uxtb	r2, r3
 80292fa:	68fb      	ldr	r3, [r7, #12]
 80292fc:	f883 2020 	strb.w	r2, [r3, #32]
      API_EVENT(conn, NETCONN_EVT_SENDPLUS, 0);
 8029300:	68fb      	ldr	r3, [r7, #12]
 8029302:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8029304:	2b00      	cmp	r3, #0
 8029306:	d005      	beq.n	8029314 <poll_tcp+0xb8>
 8029308:	68fb      	ldr	r3, [r7, #12]
 802930a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 802930c:	2200      	movs	r2, #0
 802930e:	2102      	movs	r1, #2
 8029310:	68f8      	ldr	r0, [r7, #12]
 8029312:	4798      	blx	r3
    }
  }

  return ERR_OK;
 8029314:	2300      	movs	r3, #0
}
 8029316:	4618      	mov	r0, r3
 8029318:	3710      	adds	r7, #16
 802931a:	46bd      	mov	sp, r7
 802931c:	bd80      	pop	{r7, pc}
 802931e:	bf00      	nop
 8029320:	08039f0c 	.word	0x08039f0c
 8029324:	0803a064 	.word	0x0803a064
 8029328:	08039f50 	.word	0x08039f50

0802932c <sent_tcp>:
 *
 * @see tcp.h (struct tcp_pcb.sent) for parameters and return value
 */
static err_t
sent_tcp(void *arg, struct tcp_pcb *pcb, u16_t len)
{
 802932c:	b580      	push	{r7, lr}
 802932e:	b086      	sub	sp, #24
 8029330:	af00      	add	r7, sp, #0
 8029332:	60f8      	str	r0, [r7, #12]
 8029334:	60b9      	str	r1, [r7, #8]
 8029336:	4613      	mov	r3, r2
 8029338:	80fb      	strh	r3, [r7, #6]
  struct netconn *conn = (struct netconn *)arg;
 802933a:	68fb      	ldr	r3, [r7, #12]
 802933c:	617b      	str	r3, [r7, #20]

  LWIP_UNUSED_ARG(pcb);
  LWIP_ASSERT("conn != NULL", (conn != NULL));
 802933e:	697b      	ldr	r3, [r7, #20]
 8029340:	2b00      	cmp	r3, #0
 8029342:	d106      	bne.n	8029352 <sent_tcp+0x26>
 8029344:	4b21      	ldr	r3, [pc, #132]	; (80293cc <sent_tcp+0xa0>)
 8029346:	f240 1293 	movw	r2, #403	; 0x193
 802934a:	4921      	ldr	r1, [pc, #132]	; (80293d0 <sent_tcp+0xa4>)
 802934c:	4821      	ldr	r0, [pc, #132]	; (80293d4 <sent_tcp+0xa8>)
 802934e:	f00f fe8b 	bl	8039068 <iprintf>

  if (conn) {
 8029352:	697b      	ldr	r3, [r7, #20]
 8029354:	2b00      	cmp	r3, #0
 8029356:	d034      	beq.n	80293c2 <sent_tcp+0x96>
    if (conn->state == NETCONN_WRITE) {
 8029358:	697b      	ldr	r3, [r7, #20]
 802935a:	785b      	ldrb	r3, [r3, #1]
 802935c:	2b01      	cmp	r3, #1
 802935e:	d104      	bne.n	802936a <sent_tcp+0x3e>
      lwip_netconn_do_writemore(conn  WRITE_DELAYED);
 8029360:	2101      	movs	r1, #1
 8029362:	6978      	ldr	r0, [r7, #20]
 8029364:	f000 ff54 	bl	802a210 <lwip_netconn_do_writemore>
 8029368:	e007      	b.n	802937a <sent_tcp+0x4e>
    } else if (conn->state == NETCONN_CLOSE) {
 802936a:	697b      	ldr	r3, [r7, #20]
 802936c:	785b      	ldrb	r3, [r3, #1]
 802936e:	2b04      	cmp	r3, #4
 8029370:	d103      	bne.n	802937a <sent_tcp+0x4e>
      lwip_netconn_do_close_internal(conn  WRITE_DELAYED);
 8029372:	2101      	movs	r1, #1
 8029374:	6978      	ldr	r0, [r7, #20]
 8029376:	f000 fba7 	bl	8029ac8 <lwip_netconn_do_close_internal>
    }

    /* If the queued byte- or pbuf-count drops below the configured low-water limit,
       let select mark this pcb as writable again. */
    if ((conn->pcb.tcp != NULL) && (tcp_sndbuf(conn->pcb.tcp) > TCP_SNDLOWAT) &&
 802937a:	697b      	ldr	r3, [r7, #20]
 802937c:	685b      	ldr	r3, [r3, #4]
 802937e:	2b00      	cmp	r3, #0
 8029380:	d01f      	beq.n	80293c2 <sent_tcp+0x96>
 8029382:	697b      	ldr	r3, [r7, #20]
 8029384:	685b      	ldr	r3, [r3, #4]
 8029386:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 802938a:	f5b3 6f86 	cmp.w	r3, #1072	; 0x430
 802938e:	d318      	bcc.n	80293c2 <sent_tcp+0x96>
        (tcp_sndqueuelen(conn->pcb.tcp) < TCP_SNDQUEUELOWAT)) {
 8029390:	697b      	ldr	r3, [r7, #20]
 8029392:	685b      	ldr	r3, [r3, #4]
 8029394:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
    if ((conn->pcb.tcp != NULL) && (tcp_sndbuf(conn->pcb.tcp) > TCP_SNDLOWAT) &&
 8029398:	2b04      	cmp	r3, #4
 802939a:	d812      	bhi.n	80293c2 <sent_tcp+0x96>
      netconn_clear_flags(conn, NETCONN_FLAG_CHECK_WRITESPACE);
 802939c:	697b      	ldr	r3, [r7, #20]
 802939e:	f893 3020 	ldrb.w	r3, [r3, #32]
 80293a2:	f023 0310 	bic.w	r3, r3, #16
 80293a6:	b2da      	uxtb	r2, r3
 80293a8:	697b      	ldr	r3, [r7, #20]
 80293aa:	f883 2020 	strb.w	r2, [r3, #32]
      API_EVENT(conn, NETCONN_EVT_SENDPLUS, len);
 80293ae:	697b      	ldr	r3, [r7, #20]
 80293b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80293b2:	2b00      	cmp	r3, #0
 80293b4:	d005      	beq.n	80293c2 <sent_tcp+0x96>
 80293b6:	697b      	ldr	r3, [r7, #20]
 80293b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80293ba:	88fa      	ldrh	r2, [r7, #6]
 80293bc:	2102      	movs	r1, #2
 80293be:	6978      	ldr	r0, [r7, #20]
 80293c0:	4798      	blx	r3
    }
  }

  return ERR_OK;
 80293c2:	2300      	movs	r3, #0
}
 80293c4:	4618      	mov	r0, r3
 80293c6:	3718      	adds	r7, #24
 80293c8:	46bd      	mov	sp, r7
 80293ca:	bd80      	pop	{r7, pc}
 80293cc:	08039f0c 	.word	0x08039f0c
 80293d0:	0803a064 	.word	0x0803a064
 80293d4:	08039f50 	.word	0x08039f50

080293d8 <err_tcp>:
 *
 * @see tcp.h (struct tcp_pcb.err) for parameters
 */
static void
err_tcp(void *arg, err_t err)
{
 80293d8:	b580      	push	{r7, lr}
 80293da:	b088      	sub	sp, #32
 80293dc:	af00      	add	r7, sp, #0
 80293de:	6078      	str	r0, [r7, #4]
 80293e0:	460b      	mov	r3, r1
 80293e2:	70fb      	strb	r3, [r7, #3]
  struct netconn *conn;
  enum netconn_state old_state;
  void *mbox_msg;
  SYS_ARCH_DECL_PROTECT(lev);

  conn = (struct netconn *)arg;
 80293e4:	687b      	ldr	r3, [r7, #4]
 80293e6:	61fb      	str	r3, [r7, #28]
  LWIP_ASSERT("conn != NULL", (conn != NULL));
 80293e8:	69fb      	ldr	r3, [r7, #28]
 80293ea:	2b00      	cmp	r3, #0
 80293ec:	d106      	bne.n	80293fc <err_tcp+0x24>
 80293ee:	4b61      	ldr	r3, [pc, #388]	; (8029574 <err_tcp+0x19c>)
 80293f0:	f44f 72dc 	mov.w	r2, #440	; 0x1b8
 80293f4:	4960      	ldr	r1, [pc, #384]	; (8029578 <err_tcp+0x1a0>)
 80293f6:	4861      	ldr	r0, [pc, #388]	; (802957c <err_tcp+0x1a4>)
 80293f8:	f00f fe36 	bl	8039068 <iprintf>

  SYS_ARCH_PROTECT(lev);
 80293fc:	f00f f8a6 	bl	803854c <sys_arch_protect>
 8029400:	61b8      	str	r0, [r7, #24]

  /* when err is called, the pcb is deallocated, so delete the reference */
  conn->pcb.tcp = NULL;
 8029402:	69fb      	ldr	r3, [r7, #28]
 8029404:	2200      	movs	r2, #0
 8029406:	605a      	str	r2, [r3, #4]
  /* store pending error */
  conn->pending_err = err;
 8029408:	69fb      	ldr	r3, [r7, #28]
 802940a:	78fa      	ldrb	r2, [r7, #3]
 802940c:	721a      	strb	r2, [r3, #8]
  /* prevent application threads from blocking on 'recvmbox'/'acceptmbox' */
  conn->flags |= NETCONN_FLAG_MBOXCLOSED;
 802940e:	69fb      	ldr	r3, [r7, #28]
 8029410:	f893 3020 	ldrb.w	r3, [r3, #32]
 8029414:	f043 0301 	orr.w	r3, r3, #1
 8029418:	b2da      	uxtb	r2, r3
 802941a:	69fb      	ldr	r3, [r7, #28]
 802941c:	f883 2020 	strb.w	r2, [r3, #32]

  /* reset conn->state now before waking up other threads */
  old_state = conn->state;
 8029420:	69fb      	ldr	r3, [r7, #28]
 8029422:	785b      	ldrb	r3, [r3, #1]
 8029424:	75fb      	strb	r3, [r7, #23]
  conn->state = NETCONN_NONE;
 8029426:	69fb      	ldr	r3, [r7, #28]
 8029428:	2200      	movs	r2, #0
 802942a:	705a      	strb	r2, [r3, #1]

  SYS_ARCH_UNPROTECT(lev);
 802942c:	69b8      	ldr	r0, [r7, #24]
 802942e:	f00f f89b 	bl	8038568 <sys_arch_unprotect>

  /* Notify the user layer about a connection error. Used to signal select. */
  API_EVENT(conn, NETCONN_EVT_ERROR, 0);
 8029432:	69fb      	ldr	r3, [r7, #28]
 8029434:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8029436:	2b00      	cmp	r3, #0
 8029438:	d005      	beq.n	8029446 <err_tcp+0x6e>
 802943a:	69fb      	ldr	r3, [r7, #28]
 802943c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 802943e:	2200      	movs	r2, #0
 8029440:	2104      	movs	r1, #4
 8029442:	69f8      	ldr	r0, [r7, #28]
 8029444:	4798      	blx	r3
  /* Try to release selects pending on 'read' or 'write', too.
     They will get an error if they actually try to read or write. */
  API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
 8029446:	69fb      	ldr	r3, [r7, #28]
 8029448:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 802944a:	2b00      	cmp	r3, #0
 802944c:	d005      	beq.n	802945a <err_tcp+0x82>
 802944e:	69fb      	ldr	r3, [r7, #28]
 8029450:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8029452:	2200      	movs	r2, #0
 8029454:	2100      	movs	r1, #0
 8029456:	69f8      	ldr	r0, [r7, #28]
 8029458:	4798      	blx	r3
  API_EVENT(conn, NETCONN_EVT_SENDPLUS, 0);
 802945a:	69fb      	ldr	r3, [r7, #28]
 802945c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 802945e:	2b00      	cmp	r3, #0
 8029460:	d005      	beq.n	802946e <err_tcp+0x96>
 8029462:	69fb      	ldr	r3, [r7, #28]
 8029464:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8029466:	2200      	movs	r2, #0
 8029468:	2102      	movs	r1, #2
 802946a:	69f8      	ldr	r0, [r7, #28]
 802946c:	4798      	blx	r3

  mbox_msg = lwip_netconn_err_to_msg(err);
 802946e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8029472:	4618      	mov	r0, r3
 8029474:	f7ff fd7e 	bl	8028f74 <lwip_netconn_err_to_msg>
 8029478:	6138      	str	r0, [r7, #16]
  /* pass error message to recvmbox to wake up pending recv */
  if (NETCONN_MBOX_VALID(conn, &conn->recvmbox)) {
 802947a:	69fb      	ldr	r3, [r7, #28]
 802947c:	3310      	adds	r3, #16
 802947e:	4618      	mov	r0, r3
 8029480:	f00e fefd 	bl	803827e <sys_mbox_valid>
 8029484:	4603      	mov	r3, r0
 8029486:	2b00      	cmp	r3, #0
 8029488:	d005      	beq.n	8029496 <err_tcp+0xbe>
    /* use trypost to prevent deadlock */
    sys_mbox_trypost(&conn->recvmbox, mbox_msg);
 802948a:	69fb      	ldr	r3, [r7, #28]
 802948c:	3310      	adds	r3, #16
 802948e:	6939      	ldr	r1, [r7, #16]
 8029490:	4618      	mov	r0, r3
 8029492:	f00e fe75 	bl	8038180 <sys_mbox_trypost>
  }
  /* pass error message to acceptmbox to wake up pending accept */
  if (NETCONN_MBOX_VALID(conn, &conn->acceptmbox)) {
 8029496:	69fb      	ldr	r3, [r7, #28]
 8029498:	3314      	adds	r3, #20
 802949a:	4618      	mov	r0, r3
 802949c:	f00e feef 	bl	803827e <sys_mbox_valid>
 80294a0:	4603      	mov	r3, r0
 80294a2:	2b00      	cmp	r3, #0
 80294a4:	d005      	beq.n	80294b2 <err_tcp+0xda>
    /* use trypost to preven deadlock */
    sys_mbox_trypost(&conn->acceptmbox, mbox_msg);
 80294a6:	69fb      	ldr	r3, [r7, #28]
 80294a8:	3314      	adds	r3, #20
 80294aa:	6939      	ldr	r1, [r7, #16]
 80294ac:	4618      	mov	r0, r3
 80294ae:	f00e fe67 	bl	8038180 <sys_mbox_trypost>
  }

  if ((old_state == NETCONN_WRITE) || (old_state == NETCONN_CLOSE) ||
 80294b2:	7dfb      	ldrb	r3, [r7, #23]
 80294b4:	2b01      	cmp	r3, #1
 80294b6:	d005      	beq.n	80294c4 <err_tcp+0xec>
 80294b8:	7dfb      	ldrb	r3, [r7, #23]
 80294ba:	2b04      	cmp	r3, #4
 80294bc:	d002      	beq.n	80294c4 <err_tcp+0xec>
 80294be:	7dfb      	ldrb	r3, [r7, #23]
 80294c0:	2b03      	cmp	r3, #3
 80294c2:	d146      	bne.n	8029552 <err_tcp+0x17a>
      (old_state == NETCONN_CONNECT)) {
    /* calling lwip_netconn_do_writemore/lwip_netconn_do_close_internal is not necessary
       since the pcb has already been deleted! */
    int was_nonblocking_connect = IN_NONBLOCKING_CONNECT(conn);
 80294c4:	69fb      	ldr	r3, [r7, #28]
 80294c6:	f893 3020 	ldrb.w	r3, [r3, #32]
 80294ca:	f003 0304 	and.w	r3, r3, #4
 80294ce:	2b00      	cmp	r3, #0
 80294d0:	bf14      	ite	ne
 80294d2:	2301      	movne	r3, #1
 80294d4:	2300      	moveq	r3, #0
 80294d6:	b2db      	uxtb	r3, r3
 80294d8:	60fb      	str	r3, [r7, #12]
    SET_NONBLOCKING_CONNECT(conn, 0);
 80294da:	69fb      	ldr	r3, [r7, #28]
 80294dc:	f893 3020 	ldrb.w	r3, [r3, #32]
 80294e0:	f023 0304 	bic.w	r3, r3, #4
 80294e4:	b2da      	uxtb	r2, r3
 80294e6:	69fb      	ldr	r3, [r7, #28]
 80294e8:	f883 2020 	strb.w	r2, [r3, #32]

    if (!was_nonblocking_connect) {
 80294ec:	68fb      	ldr	r3, [r7, #12]
 80294ee:	2b00      	cmp	r3, #0
 80294f0:	d13b      	bne.n	802956a <err_tcp+0x192>
      sys_sem_t *op_completed_sem;
      /* set error return code */
      LWIP_ASSERT("conn->current_msg != NULL", conn->current_msg != NULL);
 80294f2:	69fb      	ldr	r3, [r7, #28]
 80294f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80294f6:	2b00      	cmp	r3, #0
 80294f8:	d106      	bne.n	8029508 <err_tcp+0x130>
 80294fa:	4b1e      	ldr	r3, [pc, #120]	; (8029574 <err_tcp+0x19c>)
 80294fc:	f44f 72f3 	mov.w	r2, #486	; 0x1e6
 8029500:	491f      	ldr	r1, [pc, #124]	; (8029580 <err_tcp+0x1a8>)
 8029502:	481e      	ldr	r0, [pc, #120]	; (802957c <err_tcp+0x1a4>)
 8029504:	f00f fdb0 	bl	8039068 <iprintf>
      if (old_state == NETCONN_CLOSE) {
 8029508:	7dfb      	ldrb	r3, [r7, #23]
 802950a:	2b04      	cmp	r3, #4
 802950c:	d104      	bne.n	8029518 <err_tcp+0x140>
        /* let close succeed: the connection is closed after all... */
        conn->current_msg->err = ERR_OK;
 802950e:	69fb      	ldr	r3, [r7, #28]
 8029510:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8029512:	2200      	movs	r2, #0
 8029514:	711a      	strb	r2, [r3, #4]
 8029516:	e003      	b.n	8029520 <err_tcp+0x148>
      } else {
        /* Write and connect fail */
        conn->current_msg->err = err;
 8029518:	69fb      	ldr	r3, [r7, #28]
 802951a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 802951c:	78fa      	ldrb	r2, [r7, #3]
 802951e:	711a      	strb	r2, [r3, #4]
      }
      op_completed_sem = LWIP_API_MSG_SEM(conn->current_msg);
 8029520:	69fb      	ldr	r3, [r7, #28]
 8029522:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8029524:	681b      	ldr	r3, [r3, #0]
 8029526:	330c      	adds	r3, #12
 8029528:	60bb      	str	r3, [r7, #8]
      LWIP_ASSERT("inavlid op_completed_sem", sys_sem_valid(op_completed_sem));
 802952a:	68b8      	ldr	r0, [r7, #8]
 802952c:	f00e ff64 	bl	80383f8 <sys_sem_valid>
 8029530:	4603      	mov	r3, r0
 8029532:	2b00      	cmp	r3, #0
 8029534:	d106      	bne.n	8029544 <err_tcp+0x16c>
 8029536:	4b0f      	ldr	r3, [pc, #60]	; (8029574 <err_tcp+0x19c>)
 8029538:	f240 12ef 	movw	r2, #495	; 0x1ef
 802953c:	4911      	ldr	r1, [pc, #68]	; (8029584 <err_tcp+0x1ac>)
 802953e:	480f      	ldr	r0, [pc, #60]	; (802957c <err_tcp+0x1a4>)
 8029540:	f00f fd92 	bl	8039068 <iprintf>
      conn->current_msg = NULL;
 8029544:	69fb      	ldr	r3, [r7, #28]
 8029546:	2200      	movs	r2, #0
 8029548:	625a      	str	r2, [r3, #36]	; 0x24
      /* wake up the waiting task */
      sys_sem_signal(op_completed_sem);
 802954a:	68b8      	ldr	r0, [r7, #8]
 802954c:	f00e ff2f 	bl	80383ae <sys_sem_signal>
      (old_state == NETCONN_CONNECT)) {
 8029550:	e00b      	b.n	802956a <err_tcp+0x192>
    } else {
      /* @todo: test what happens for error on nonblocking connect */
    }
  } else {
    LWIP_ASSERT("conn->current_msg == NULL", conn->current_msg == NULL);
 8029552:	69fb      	ldr	r3, [r7, #28]
 8029554:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8029556:	2b00      	cmp	r3, #0
 8029558:	d008      	beq.n	802956c <err_tcp+0x194>
 802955a:	4b06      	ldr	r3, [pc, #24]	; (8029574 <err_tcp+0x19c>)
 802955c:	f240 12f7 	movw	r2, #503	; 0x1f7
 8029560:	4909      	ldr	r1, [pc, #36]	; (8029588 <err_tcp+0x1b0>)
 8029562:	4806      	ldr	r0, [pc, #24]	; (802957c <err_tcp+0x1a4>)
 8029564:	f00f fd80 	bl	8039068 <iprintf>
  }
}
 8029568:	e000      	b.n	802956c <err_tcp+0x194>
      (old_state == NETCONN_CONNECT)) {
 802956a:	bf00      	nop
}
 802956c:	bf00      	nop
 802956e:	3720      	adds	r7, #32
 8029570:	46bd      	mov	sp, r7
 8029572:	bd80      	pop	{r7, pc}
 8029574:	08039f0c 	.word	0x08039f0c
 8029578:	0803a064 	.word	0x0803a064
 802957c:	08039f50 	.word	0x08039f50
 8029580:	0803a074 	.word	0x0803a074
 8029584:	0803a090 	.word	0x0803a090
 8029588:	0803a0ac 	.word	0x0803a0ac

0802958c <setup_tcp>:
 *
 * @param conn the TCP netconn to setup
 */
static void
setup_tcp(struct netconn *conn)
{
 802958c:	b580      	push	{r7, lr}
 802958e:	b084      	sub	sp, #16
 8029590:	af00      	add	r7, sp, #0
 8029592:	6078      	str	r0, [r7, #4]
  struct tcp_pcb *pcb;

  pcb = conn->pcb.tcp;
 8029594:	687b      	ldr	r3, [r7, #4]
 8029596:	685b      	ldr	r3, [r3, #4]
 8029598:	60fb      	str	r3, [r7, #12]
  tcp_arg(pcb, conn);
 802959a:	6879      	ldr	r1, [r7, #4]
 802959c:	68f8      	ldr	r0, [r7, #12]
 802959e:	f006 fd75 	bl	803008c <tcp_arg>
  tcp_recv(pcb, recv_tcp);
 80295a2:	490a      	ldr	r1, [pc, #40]	; (80295cc <setup_tcp+0x40>)
 80295a4:	68f8      	ldr	r0, [r7, #12]
 80295a6:	f006 fd83 	bl	80300b0 <tcp_recv>
  tcp_sent(pcb, sent_tcp);
 80295aa:	4909      	ldr	r1, [pc, #36]	; (80295d0 <setup_tcp+0x44>)
 80295ac:	68f8      	ldr	r0, [r7, #12]
 80295ae:	f006 fda1 	bl	80300f4 <tcp_sent>
  tcp_poll(pcb, poll_tcp, NETCONN_TCP_POLL_INTERVAL);
 80295b2:	2202      	movs	r2, #2
 80295b4:	4907      	ldr	r1, [pc, #28]	; (80295d4 <setup_tcp+0x48>)
 80295b6:	68f8      	ldr	r0, [r7, #12]
 80295b8:	f006 fdf8 	bl	80301ac <tcp_poll>
  tcp_err(pcb, err_tcp);
 80295bc:	4906      	ldr	r1, [pc, #24]	; (80295d8 <setup_tcp+0x4c>)
 80295be:	68f8      	ldr	r0, [r7, #12]
 80295c0:	f006 fdba 	bl	8030138 <tcp_err>
}
 80295c4:	bf00      	nop
 80295c6:	3710      	adds	r7, #16
 80295c8:	46bd      	mov	sp, r7
 80295ca:	bd80      	pop	{r7, pc}
 80295cc:	08029151 	.word	0x08029151
 80295d0:	0802932d 	.word	0x0802932d
 80295d4:	0802925d 	.word	0x0802925d
 80295d8:	080293d9 	.word	0x080293d9

080295dc <accept_function>:
 *
 * @see tcp.h (struct tcp_pcb_listen.accept) for parameters and return value
 */
static err_t
accept_function(void *arg, struct tcp_pcb *newpcb, err_t err)
{
 80295dc:	b590      	push	{r4, r7, lr}
 80295de:	b089      	sub	sp, #36	; 0x24
 80295e0:	af00      	add	r7, sp, #0
 80295e2:	60f8      	str	r0, [r7, #12]
 80295e4:	60b9      	str	r1, [r7, #8]
 80295e6:	4613      	mov	r3, r2
 80295e8:	71fb      	strb	r3, [r7, #7]
  struct netconn *newconn;
  struct netconn *conn = (struct netconn *)arg;
 80295ea:	68fb      	ldr	r3, [r7, #12]
 80295ec:	61fb      	str	r3, [r7, #28]

  if (conn == NULL) {
 80295ee:	69fb      	ldr	r3, [r7, #28]
 80295f0:	2b00      	cmp	r3, #0
 80295f2:	d102      	bne.n	80295fa <accept_function+0x1e>
    return ERR_VAL;
 80295f4:	f06f 0305 	mvn.w	r3, #5
 80295f8:	e0a1      	b.n	802973e <accept_function+0x162>
  }
  if (!NETCONN_MBOX_VALID(conn, &conn->acceptmbox)) {
 80295fa:	69fb      	ldr	r3, [r7, #28]
 80295fc:	3314      	adds	r3, #20
 80295fe:	4618      	mov	r0, r3
 8029600:	f00e fe3d 	bl	803827e <sys_mbox_valid>
 8029604:	4603      	mov	r3, r0
 8029606:	2b00      	cmp	r3, #0
 8029608:	d102      	bne.n	8029610 <accept_function+0x34>
    LWIP_DEBUGF(API_MSG_DEBUG, ("accept_function: acceptmbox already deleted\n"));
    return ERR_VAL;
 802960a:	f06f 0305 	mvn.w	r3, #5
 802960e:	e096      	b.n	802973e <accept_function+0x162>
  }

  if (newpcb == NULL) {
 8029610:	68bb      	ldr	r3, [r7, #8]
 8029612:	2b00      	cmp	r3, #0
 8029614:	d11b      	bne.n	802964e <accept_function+0x72>
    /* out-of-pcbs during connect: pass on this error to the application */
    if (sys_mbox_trypost(&conn->acceptmbox, lwip_netconn_err_to_msg(ERR_ABRT)) == ERR_OK) {
 8029616:	69fb      	ldr	r3, [r7, #28]
 8029618:	f103 0414 	add.w	r4, r3, #20
 802961c:	f06f 000c 	mvn.w	r0, #12
 8029620:	f7ff fca8 	bl	8028f74 <lwip_netconn_err_to_msg>
 8029624:	4603      	mov	r3, r0
 8029626:	4619      	mov	r1, r3
 8029628:	4620      	mov	r0, r4
 802962a:	f00e fda9 	bl	8038180 <sys_mbox_trypost>
 802962e:	4603      	mov	r3, r0
 8029630:	2b00      	cmp	r3, #0
 8029632:	d109      	bne.n	8029648 <accept_function+0x6c>
      /* Register event with callback */
      API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
 8029634:	69fb      	ldr	r3, [r7, #28]
 8029636:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8029638:	2b00      	cmp	r3, #0
 802963a:	d005      	beq.n	8029648 <accept_function+0x6c>
 802963c:	69fb      	ldr	r3, [r7, #28]
 802963e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8029640:	2200      	movs	r2, #0
 8029642:	2100      	movs	r1, #0
 8029644:	69f8      	ldr	r0, [r7, #28]
 8029646:	4798      	blx	r3
    }
    return ERR_VAL;
 8029648:	f06f 0305 	mvn.w	r3, #5
 802964c:	e077      	b.n	802973e <accept_function+0x162>
  }
  LWIP_ASSERT("expect newpcb == NULL or err == ERR_OK", err == ERR_OK);
 802964e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8029652:	2b00      	cmp	r3, #0
 8029654:	d006      	beq.n	8029664 <accept_function+0x88>
 8029656:	4b3c      	ldr	r3, [pc, #240]	; (8029748 <accept_function+0x16c>)
 8029658:	f240 222a 	movw	r2, #554	; 0x22a
 802965c:	493b      	ldr	r1, [pc, #236]	; (802974c <accept_function+0x170>)
 802965e:	483c      	ldr	r0, [pc, #240]	; (8029750 <accept_function+0x174>)
 8029660:	f00f fd02 	bl	8039068 <iprintf>

  LWIP_DEBUGF(API_MSG_DEBUG, ("accept_function: newpcb->state: %s\n", tcp_debug_state_str(newpcb->state)));

  /* We have to set the callback here even though
   * the new socket is unknown. newconn->socket is marked as -1. */
  newconn = netconn_alloc(conn->type, conn->callback);
 8029664:	69fb      	ldr	r3, [r7, #28]
 8029666:	781a      	ldrb	r2, [r3, #0]
 8029668:	69fb      	ldr	r3, [r7, #28]
 802966a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 802966c:	4619      	mov	r1, r3
 802966e:	4610      	mov	r0, r2
 8029670:	f000 f8f0 	bl	8029854 <netconn_alloc>
 8029674:	61b8      	str	r0, [r7, #24]
  if (newconn == NULL) {
 8029676:	69bb      	ldr	r3, [r7, #24]
 8029678:	2b00      	cmp	r3, #0
 802967a:	d11b      	bne.n	80296b4 <accept_function+0xd8>
    /* outof netconns: pass on this error to the application */
    if (sys_mbox_trypost(&conn->acceptmbox, lwip_netconn_err_to_msg(ERR_ABRT)) == ERR_OK) {
 802967c:	69fb      	ldr	r3, [r7, #28]
 802967e:	f103 0414 	add.w	r4, r3, #20
 8029682:	f06f 000c 	mvn.w	r0, #12
 8029686:	f7ff fc75 	bl	8028f74 <lwip_netconn_err_to_msg>
 802968a:	4603      	mov	r3, r0
 802968c:	4619      	mov	r1, r3
 802968e:	4620      	mov	r0, r4
 8029690:	f00e fd76 	bl	8038180 <sys_mbox_trypost>
 8029694:	4603      	mov	r3, r0
 8029696:	2b00      	cmp	r3, #0
 8029698:	d109      	bne.n	80296ae <accept_function+0xd2>
      /* Register event with callback */
      API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
 802969a:	69fb      	ldr	r3, [r7, #28]
 802969c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 802969e:	2b00      	cmp	r3, #0
 80296a0:	d005      	beq.n	80296ae <accept_function+0xd2>
 80296a2:	69fb      	ldr	r3, [r7, #28]
 80296a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80296a6:	2200      	movs	r2, #0
 80296a8:	2100      	movs	r1, #0
 80296aa:	69f8      	ldr	r0, [r7, #28]
 80296ac:	4798      	blx	r3
    }
    return ERR_MEM;
 80296ae:	f04f 33ff 	mov.w	r3, #4294967295
 80296b2:	e044      	b.n	802973e <accept_function+0x162>
  }
  newconn->pcb.tcp = newpcb;
 80296b4:	69bb      	ldr	r3, [r7, #24]
 80296b6:	68ba      	ldr	r2, [r7, #8]
 80296b8:	605a      	str	r2, [r3, #4]
  setup_tcp(newconn);
 80296ba:	69b8      	ldr	r0, [r7, #24]
 80296bc:	f7ff ff66 	bl	802958c <setup_tcp>

  /* handle backlog counter */
  tcp_backlog_delayed(newpcb);

  if (sys_mbox_trypost(&conn->acceptmbox, newconn) != ERR_OK) {
 80296c0:	69fb      	ldr	r3, [r7, #28]
 80296c2:	3314      	adds	r3, #20
 80296c4:	69b9      	ldr	r1, [r7, #24]
 80296c6:	4618      	mov	r0, r3
 80296c8:	f00e fd5a 	bl	8038180 <sys_mbox_trypost>
 80296cc:	4603      	mov	r3, r0
 80296ce:	2b00      	cmp	r3, #0
 80296d0:	d02a      	beq.n	8029728 <accept_function+0x14c>
    /* When returning != ERR_OK, the pcb is aborted in tcp_process(),
       so do nothing here! */
    /* remove all references to this netconn from the pcb */
    struct tcp_pcb *pcb = newconn->pcb.tcp;
 80296d2:	69bb      	ldr	r3, [r7, #24]
 80296d4:	685b      	ldr	r3, [r3, #4]
 80296d6:	617b      	str	r3, [r7, #20]
    tcp_arg(pcb, NULL);
 80296d8:	2100      	movs	r1, #0
 80296da:	6978      	ldr	r0, [r7, #20]
 80296dc:	f006 fcd6 	bl	803008c <tcp_arg>
    tcp_recv(pcb, NULL);
 80296e0:	2100      	movs	r1, #0
 80296e2:	6978      	ldr	r0, [r7, #20]
 80296e4:	f006 fce4 	bl	80300b0 <tcp_recv>
    tcp_sent(pcb, NULL);
 80296e8:	2100      	movs	r1, #0
 80296ea:	6978      	ldr	r0, [r7, #20]
 80296ec:	f006 fd02 	bl	80300f4 <tcp_sent>
    tcp_poll(pcb, NULL, 0);
 80296f0:	2200      	movs	r2, #0
 80296f2:	2100      	movs	r1, #0
 80296f4:	6978      	ldr	r0, [r7, #20]
 80296f6:	f006 fd59 	bl	80301ac <tcp_poll>
    tcp_err(pcb, NULL);
 80296fa:	2100      	movs	r1, #0
 80296fc:	6978      	ldr	r0, [r7, #20]
 80296fe:	f006 fd1b 	bl	8030138 <tcp_err>
    /* remove reference from to the pcb from this netconn */
    newconn->pcb.tcp = NULL;
 8029702:	69bb      	ldr	r3, [r7, #24]
 8029704:	2200      	movs	r2, #0
 8029706:	605a      	str	r2, [r3, #4]
    /* no need to drain since we know the recvmbox is empty. */
    sys_mbox_free(&newconn->recvmbox);
 8029708:	69bb      	ldr	r3, [r7, #24]
 802970a:	3310      	adds	r3, #16
 802970c:	4618      	mov	r0, r3
 802970e:	f00e fd0f 	bl	8038130 <sys_mbox_free>
    sys_mbox_set_invalid(&newconn->recvmbox);
 8029712:	69bb      	ldr	r3, [r7, #24]
 8029714:	3310      	adds	r3, #16
 8029716:	4618      	mov	r0, r3
 8029718:	f00e fdc2 	bl	80382a0 <sys_mbox_set_invalid>
    netconn_free(newconn);
 802971c:	69b8      	ldr	r0, [r7, #24]
 802971e:	f000 f90b 	bl	8029938 <netconn_free>
    return ERR_MEM;
 8029722:	f04f 33ff 	mov.w	r3, #4294967295
 8029726:	e00a      	b.n	802973e <accept_function+0x162>
  } else {
    /* Register event with callback */
    API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
 8029728:	69fb      	ldr	r3, [r7, #28]
 802972a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 802972c:	2b00      	cmp	r3, #0
 802972e:	d005      	beq.n	802973c <accept_function+0x160>
 8029730:	69fb      	ldr	r3, [r7, #28]
 8029732:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8029734:	2200      	movs	r2, #0
 8029736:	2100      	movs	r1, #0
 8029738:	69f8      	ldr	r0, [r7, #28]
 802973a:	4798      	blx	r3
  }

  return ERR_OK;
 802973c:	2300      	movs	r3, #0
}
 802973e:	4618      	mov	r0, r3
 8029740:	3724      	adds	r7, #36	; 0x24
 8029742:	46bd      	mov	sp, r7
 8029744:	bd90      	pop	{r4, r7, pc}
 8029746:	bf00      	nop
 8029748:	08039f0c 	.word	0x08039f0c
 802974c:	0803a0c8 	.word	0x0803a0c8
 8029750:	08039f50 	.word	0x08039f50

08029754 <pcb_new>:
 *
 * @param msg the api_msg describing the connection type
 */
static void
pcb_new(struct api_msg *msg)
{
 8029754:	b590      	push	{r4, r7, lr}
 8029756:	b085      	sub	sp, #20
 8029758:	af00      	add	r7, sp, #0
 802975a:	6078      	str	r0, [r7, #4]
  enum lwip_ip_addr_type iptype = IPADDR_TYPE_V4;
 802975c:	2300      	movs	r3, #0
 802975e:	73fb      	strb	r3, [r7, #15]

  LWIP_ASSERT("pcb_new: pcb already allocated", msg->conn->pcb.tcp == NULL);
 8029760:	687b      	ldr	r3, [r7, #4]
 8029762:	681b      	ldr	r3, [r3, #0]
 8029764:	685b      	ldr	r3, [r3, #4]
 8029766:	2b00      	cmp	r3, #0
 8029768:	d006      	beq.n	8029778 <pcb_new+0x24>
 802976a:	4b2b      	ldr	r3, [pc, #172]	; (8029818 <pcb_new+0xc4>)
 802976c:	f240 2265 	movw	r2, #613	; 0x265
 8029770:	492a      	ldr	r1, [pc, #168]	; (802981c <pcb_new+0xc8>)
 8029772:	482b      	ldr	r0, [pc, #172]	; (8029820 <pcb_new+0xcc>)
 8029774:	f00f fc78 	bl	8039068 <iprintf>
    iptype = IPADDR_TYPE_ANY;
  }
#endif

  /* Allocate a PCB for this connection */
  switch (NETCONNTYPE_GROUP(msg->conn->type)) {
 8029778:	687b      	ldr	r3, [r7, #4]
 802977a:	681b      	ldr	r3, [r3, #0]
 802977c:	781b      	ldrb	r3, [r3, #0]
 802977e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8029782:	2b10      	cmp	r3, #16
 8029784:	d022      	beq.n	80297cc <pcb_new+0x78>
 8029786:	2b20      	cmp	r3, #32
 8029788:	d133      	bne.n	80297f2 <pcb_new+0x9e>
      }
      break;
#endif /* LWIP_RAW */
#if LWIP_UDP
    case NETCONN_UDP:
      msg->conn->pcb.udp = udp_new_ip_type(iptype);
 802978a:	687b      	ldr	r3, [r7, #4]
 802978c:	681c      	ldr	r4, [r3, #0]
 802978e:	7bfb      	ldrb	r3, [r7, #15]
 8029790:	4618      	mov	r0, r3
 8029792:	f00c f846 	bl	8035822 <udp_new_ip_type>
 8029796:	4603      	mov	r3, r0
 8029798:	6063      	str	r3, [r4, #4]
      if (msg->conn->pcb.udp != NULL) {
 802979a:	687b      	ldr	r3, [r7, #4]
 802979c:	681b      	ldr	r3, [r3, #0]
 802979e:	685b      	ldr	r3, [r3, #4]
 80297a0:	2b00      	cmp	r3, #0
 80297a2:	d02a      	beq.n	80297fa <pcb_new+0xa6>
#if LWIP_UDPLITE
        if (NETCONNTYPE_ISUDPLITE(msg->conn->type)) {
          udp_setflags(msg->conn->pcb.udp, UDP_FLAGS_UDPLITE);
        }
#endif /* LWIP_UDPLITE */
        if (NETCONNTYPE_ISUDPNOCHKSUM(msg->conn->type)) {
 80297a4:	687b      	ldr	r3, [r7, #4]
 80297a6:	681b      	ldr	r3, [r3, #0]
 80297a8:	781b      	ldrb	r3, [r3, #0]
 80297aa:	2b22      	cmp	r3, #34	; 0x22
 80297ac:	d104      	bne.n	80297b8 <pcb_new+0x64>
          udp_setflags(msg->conn->pcb.udp, UDP_FLAGS_NOCHKSUM);
 80297ae:	687b      	ldr	r3, [r7, #4]
 80297b0:	681b      	ldr	r3, [r3, #0]
 80297b2:	685b      	ldr	r3, [r3, #4]
 80297b4:	2201      	movs	r2, #1
 80297b6:	741a      	strb	r2, [r3, #16]
        }
        udp_recv(msg->conn->pcb.udp, recv_udp, msg->conn);
 80297b8:	687b      	ldr	r3, [r7, #4]
 80297ba:	681b      	ldr	r3, [r3, #0]
 80297bc:	6858      	ldr	r0, [r3, #4]
 80297be:	687b      	ldr	r3, [r7, #4]
 80297c0:	681b      	ldr	r3, [r3, #0]
 80297c2:	461a      	mov	r2, r3
 80297c4:	4917      	ldr	r1, [pc, #92]	; (8029824 <pcb_new+0xd0>)
 80297c6:	f00b ffb3 	bl	8035730 <udp_recv>
      }
      break;
 80297ca:	e016      	b.n	80297fa <pcb_new+0xa6>
#endif /* LWIP_UDP */
#if LWIP_TCP
    case NETCONN_TCP:
      msg->conn->pcb.tcp = tcp_new_ip_type(iptype);
 80297cc:	687b      	ldr	r3, [r7, #4]
 80297ce:	681c      	ldr	r4, [r3, #0]
 80297d0:	7bfb      	ldrb	r3, [r7, #15]
 80297d2:	4618      	mov	r0, r3
 80297d4:	f006 fc4c 	bl	8030070 <tcp_new_ip_type>
 80297d8:	4603      	mov	r3, r0
 80297da:	6063      	str	r3, [r4, #4]
      if (msg->conn->pcb.tcp != NULL) {
 80297dc:	687b      	ldr	r3, [r7, #4]
 80297de:	681b      	ldr	r3, [r3, #0]
 80297e0:	685b      	ldr	r3, [r3, #4]
 80297e2:	2b00      	cmp	r3, #0
 80297e4:	d00b      	beq.n	80297fe <pcb_new+0xaa>
        setup_tcp(msg->conn);
 80297e6:	687b      	ldr	r3, [r7, #4]
 80297e8:	681b      	ldr	r3, [r3, #0]
 80297ea:	4618      	mov	r0, r3
 80297ec:	f7ff fece 	bl	802958c <setup_tcp>
      }
      break;
 80297f0:	e005      	b.n	80297fe <pcb_new+0xaa>
#endif /* LWIP_TCP */
    default:
      /* Unsupported netconn type, e.g. protocol disabled */
      msg->err = ERR_VAL;
 80297f2:	687b      	ldr	r3, [r7, #4]
 80297f4:	22fa      	movs	r2, #250	; 0xfa
 80297f6:	711a      	strb	r2, [r3, #4]
      return;
 80297f8:	e00a      	b.n	8029810 <pcb_new+0xbc>
      break;
 80297fa:	bf00      	nop
 80297fc:	e000      	b.n	8029800 <pcb_new+0xac>
      break;
 80297fe:	bf00      	nop
  }
  if (msg->conn->pcb.ip == NULL) {
 8029800:	687b      	ldr	r3, [r7, #4]
 8029802:	681b      	ldr	r3, [r3, #0]
 8029804:	685b      	ldr	r3, [r3, #4]
 8029806:	2b00      	cmp	r3, #0
 8029808:	d102      	bne.n	8029810 <pcb_new+0xbc>
    msg->err = ERR_MEM;
 802980a:	687b      	ldr	r3, [r7, #4]
 802980c:	22ff      	movs	r2, #255	; 0xff
 802980e:	711a      	strb	r2, [r3, #4]
  }
}
 8029810:	3714      	adds	r7, #20
 8029812:	46bd      	mov	sp, r7
 8029814:	bd90      	pop	{r4, r7, pc}
 8029816:	bf00      	nop
 8029818:	08039f0c 	.word	0x08039f0c
 802981c:	0803a0f0 	.word	0x0803a0f0
 8029820:	08039f50 	.word	0x08039f50
 8029824:	08029055 	.word	0x08029055

08029828 <lwip_netconn_do_newconn>:
 *
 * @param m the api_msg describing the connection type
 */
void
lwip_netconn_do_newconn(void *m)
{
 8029828:	b580      	push	{r7, lr}
 802982a:	b084      	sub	sp, #16
 802982c:	af00      	add	r7, sp, #0
 802982e:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 8029830:	687b      	ldr	r3, [r7, #4]
 8029832:	60fb      	str	r3, [r7, #12]

  msg->err = ERR_OK;
 8029834:	68fb      	ldr	r3, [r7, #12]
 8029836:	2200      	movs	r2, #0
 8029838:	711a      	strb	r2, [r3, #4]
  if (msg->conn->pcb.tcp == NULL) {
 802983a:	68fb      	ldr	r3, [r7, #12]
 802983c:	681b      	ldr	r3, [r3, #0]
 802983e:	685b      	ldr	r3, [r3, #4]
 8029840:	2b00      	cmp	r3, #0
 8029842:	d102      	bne.n	802984a <lwip_netconn_do_newconn+0x22>
    pcb_new(msg);
 8029844:	68f8      	ldr	r0, [r7, #12]
 8029846:	f7ff ff85 	bl	8029754 <pcb_new>
  /* Else? This "new" connection already has a PCB allocated. */
  /* Is this an error condition? Should it be deleted? */
  /* We currently just are happy and return. */

  TCPIP_APIMSG_ACK(msg);
}
 802984a:	bf00      	nop
 802984c:	3710      	adds	r7, #16
 802984e:	46bd      	mov	sp, r7
 8029850:	bd80      	pop	{r7, pc}
	...

08029854 <netconn_alloc>:
 * @return a newly allocated struct netconn or
 *         NULL on memory error
 */
struct netconn *
netconn_alloc(enum netconn_type t, netconn_callback callback)
{
 8029854:	b580      	push	{r7, lr}
 8029856:	b086      	sub	sp, #24
 8029858:	af00      	add	r7, sp, #0
 802985a:	4603      	mov	r3, r0
 802985c:	6039      	str	r1, [r7, #0]
 802985e:	71fb      	strb	r3, [r7, #7]
  struct netconn *conn;
  int size;
  u8_t init_flags = 0;
 8029860:	2300      	movs	r3, #0
 8029862:	74fb      	strb	r3, [r7, #19]

  conn = (struct netconn *)memp_malloc(MEMP_NETCONN);
 8029864:	2007      	movs	r0, #7
 8029866:	f003 fdff 	bl	802d468 <memp_malloc>
 802986a:	60f8      	str	r0, [r7, #12]
  if (conn == NULL) {
 802986c:	68fb      	ldr	r3, [r7, #12]
 802986e:	2b00      	cmp	r3, #0
 8029870:	d101      	bne.n	8029876 <netconn_alloc+0x22>
    return NULL;
 8029872:	2300      	movs	r3, #0
 8029874:	e056      	b.n	8029924 <netconn_alloc+0xd0>
  }

  conn->pending_err = ERR_OK;
 8029876:	68fb      	ldr	r3, [r7, #12]
 8029878:	2200      	movs	r2, #0
 802987a:	721a      	strb	r2, [r3, #8]
  conn->type = t;
 802987c:	68fb      	ldr	r3, [r7, #12]
 802987e:	79fa      	ldrb	r2, [r7, #7]
 8029880:	701a      	strb	r2, [r3, #0]
  conn->pcb.tcp = NULL;
 8029882:	68fb      	ldr	r3, [r7, #12]
 8029884:	2200      	movs	r2, #0
 8029886:	605a      	str	r2, [r3, #4]

  /* If all sizes are the same, every compiler should optimize this switch to nothing */
  switch (NETCONNTYPE_GROUP(t)) {
 8029888:	79fb      	ldrb	r3, [r7, #7]
 802988a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 802988e:	2b10      	cmp	r3, #16
 8029890:	d004      	beq.n	802989c <netconn_alloc+0x48>
 8029892:	2b20      	cmp	r3, #32
 8029894:	d105      	bne.n	80298a2 <netconn_alloc+0x4e>
      size = DEFAULT_RAW_RECVMBOX_SIZE;
      break;
#endif /* LWIP_RAW */
#if LWIP_UDP
    case NETCONN_UDP:
      size = DEFAULT_UDP_RECVMBOX_SIZE;
 8029896:	2306      	movs	r3, #6
 8029898:	617b      	str	r3, [r7, #20]
#if LWIP_NETBUF_RECVINFO
      init_flags |= NETCONN_FLAG_PKTINFO;
#endif /* LWIP_NETBUF_RECVINFO */
      break;
 802989a:	e00a      	b.n	80298b2 <netconn_alloc+0x5e>
#endif /* LWIP_UDP */
#if LWIP_TCP
    case NETCONN_TCP:
      size = DEFAULT_TCP_RECVMBOX_SIZE;
 802989c:	2306      	movs	r3, #6
 802989e:	617b      	str	r3, [r7, #20]
      break;
 80298a0:	e007      	b.n	80298b2 <netconn_alloc+0x5e>
#endif /* LWIP_TCP */
    default:
      LWIP_ASSERT("netconn_alloc: undefined netconn_type", 0);
 80298a2:	4b22      	ldr	r3, [pc, #136]	; (802992c <netconn_alloc+0xd8>)
 80298a4:	f240 22e5 	movw	r2, #741	; 0x2e5
 80298a8:	4921      	ldr	r1, [pc, #132]	; (8029930 <netconn_alloc+0xdc>)
 80298aa:	4822      	ldr	r0, [pc, #136]	; (8029934 <netconn_alloc+0xe0>)
 80298ac:	f00f fbdc 	bl	8039068 <iprintf>
      goto free_and_return;
 80298b0:	e033      	b.n	802991a <netconn_alloc+0xc6>
  }

  if (sys_mbox_new(&conn->recvmbox, size) != ERR_OK) {
 80298b2:	68fb      	ldr	r3, [r7, #12]
 80298b4:	3310      	adds	r3, #16
 80298b6:	6979      	ldr	r1, [r7, #20]
 80298b8:	4618      	mov	r0, r3
 80298ba:	f00e fbff 	bl	80380bc <sys_mbox_new>
 80298be:	4603      	mov	r3, r0
 80298c0:	2b00      	cmp	r3, #0
 80298c2:	d129      	bne.n	8029918 <netconn_alloc+0xc4>
    goto free_and_return;
  }
#if !LWIP_NETCONN_SEM_PER_THREAD
  if (sys_sem_new(&conn->op_completed, 0) != ERR_OK) {
 80298c4:	68fb      	ldr	r3, [r7, #12]
 80298c6:	330c      	adds	r3, #12
 80298c8:	2100      	movs	r1, #0
 80298ca:	4618      	mov	r0, r3
 80298cc:	f00e fcf6 	bl	80382bc <sys_sem_new>
 80298d0:	4603      	mov	r3, r0
 80298d2:	2b00      	cmp	r3, #0
 80298d4:	d005      	beq.n	80298e2 <netconn_alloc+0x8e>
    sys_mbox_free(&conn->recvmbox);
 80298d6:	68fb      	ldr	r3, [r7, #12]
 80298d8:	3310      	adds	r3, #16
 80298da:	4618      	mov	r0, r3
 80298dc:	f00e fc28 	bl	8038130 <sys_mbox_free>
    goto free_and_return;
 80298e0:	e01b      	b.n	802991a <netconn_alloc+0xc6>
  }
#endif

#if LWIP_TCP
  sys_mbox_set_invalid(&conn->acceptmbox);
 80298e2:	68fb      	ldr	r3, [r7, #12]
 80298e4:	3314      	adds	r3, #20
 80298e6:	4618      	mov	r0, r3
 80298e8:	f00e fcda 	bl	80382a0 <sys_mbox_set_invalid>
#endif
  conn->state        = NETCONN_NONE;
 80298ec:	68fb      	ldr	r3, [r7, #12]
 80298ee:	2200      	movs	r2, #0
 80298f0:	705a      	strb	r2, [r3, #1]
#if LWIP_SOCKET
  /* initialize socket to -1 since 0 is a valid socket */
  conn->socket       = -1;
 80298f2:	68fb      	ldr	r3, [r7, #12]
 80298f4:	f04f 32ff 	mov.w	r2, #4294967295
 80298f8:	619a      	str	r2, [r3, #24]
#endif /* LWIP_SOCKET */
  conn->callback     = callback;
 80298fa:	68fb      	ldr	r3, [r7, #12]
 80298fc:	683a      	ldr	r2, [r7, #0]
 80298fe:	629a      	str	r2, [r3, #40]	; 0x28
#if LWIP_TCP
  conn->current_msg  = NULL;
 8029900:	68fb      	ldr	r3, [r7, #12]
 8029902:	2200      	movs	r2, #0
 8029904:	625a      	str	r2, [r3, #36]	; 0x24
#endif /* LWIP_TCP */
#if LWIP_SO_SNDTIMEO
  conn->send_timeout = 0;
#endif /* LWIP_SO_SNDTIMEO */
#if LWIP_SO_RCVTIMEO
  conn->recv_timeout = 0;
 8029906:	68fb      	ldr	r3, [r7, #12]
 8029908:	2200      	movs	r2, #0
 802990a:	61da      	str	r2, [r3, #28]
  conn->recv_avail   = 0;
#endif /* LWIP_SO_RCVBUF */
#if LWIP_SO_LINGER
  conn->linger = -1;
#endif /* LWIP_SO_LINGER */
  conn->flags = init_flags;
 802990c:	68fb      	ldr	r3, [r7, #12]
 802990e:	7cfa      	ldrb	r2, [r7, #19]
 8029910:	f883 2020 	strb.w	r2, [r3, #32]
  return conn;
 8029914:	68fb      	ldr	r3, [r7, #12]
 8029916:	e005      	b.n	8029924 <netconn_alloc+0xd0>
    goto free_and_return;
 8029918:	bf00      	nop
free_and_return:
  memp_free(MEMP_NETCONN, conn);
 802991a:	68f9      	ldr	r1, [r7, #12]
 802991c:	2007      	movs	r0, #7
 802991e:	f003 fe1f 	bl	802d560 <memp_free>
  return NULL;
 8029922:	2300      	movs	r3, #0
}
 8029924:	4618      	mov	r0, r3
 8029926:	3718      	adds	r7, #24
 8029928:	46bd      	mov	sp, r7
 802992a:	bd80      	pop	{r7, pc}
 802992c:	08039f0c 	.word	0x08039f0c
 8029930:	0803a110 	.word	0x0803a110
 8029934:	08039f50 	.word	0x08039f50

08029938 <netconn_free>:
 *
 * @param conn the netconn to free
 */
void
netconn_free(struct netconn *conn)
{
 8029938:	b580      	push	{r7, lr}
 802993a:	b082      	sub	sp, #8
 802993c:	af00      	add	r7, sp, #0
 802993e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("PCB must be deallocated outside this function", conn->pcb.tcp == NULL);
 8029940:	687b      	ldr	r3, [r7, #4]
 8029942:	685b      	ldr	r3, [r3, #4]
 8029944:	2b00      	cmp	r3, #0
 8029946:	d006      	beq.n	8029956 <netconn_free+0x1e>
 8029948:	4b1b      	ldr	r3, [pc, #108]	; (80299b8 <netconn_free+0x80>)
 802994a:	f44f 7247 	mov.w	r2, #796	; 0x31c
 802994e:	491b      	ldr	r1, [pc, #108]	; (80299bc <netconn_free+0x84>)
 8029950:	481b      	ldr	r0, [pc, #108]	; (80299c0 <netconn_free+0x88>)
 8029952:	f00f fb89 	bl	8039068 <iprintf>
#if LWIP_NETCONN_FULLDUPLEX
  /* in fullduplex, netconn is drained here */
  netconn_drain(conn);
#endif /* LWIP_NETCONN_FULLDUPLEX */

  LWIP_ASSERT("recvmbox must be deallocated before calling this function",
 8029956:	687b      	ldr	r3, [r7, #4]
 8029958:	3310      	adds	r3, #16
 802995a:	4618      	mov	r0, r3
 802995c:	f00e fc8f 	bl	803827e <sys_mbox_valid>
 8029960:	4603      	mov	r3, r0
 8029962:	2b00      	cmp	r3, #0
 8029964:	d006      	beq.n	8029974 <netconn_free+0x3c>
 8029966:	4b14      	ldr	r3, [pc, #80]	; (80299b8 <netconn_free+0x80>)
 8029968:	f240 3223 	movw	r2, #803	; 0x323
 802996c:	4915      	ldr	r1, [pc, #84]	; (80299c4 <netconn_free+0x8c>)
 802996e:	4814      	ldr	r0, [pc, #80]	; (80299c0 <netconn_free+0x88>)
 8029970:	f00f fb7a 	bl	8039068 <iprintf>
              !sys_mbox_valid(&conn->recvmbox));
#if LWIP_TCP
  LWIP_ASSERT("acceptmbox must be deallocated before calling this function",
 8029974:	687b      	ldr	r3, [r7, #4]
 8029976:	3314      	adds	r3, #20
 8029978:	4618      	mov	r0, r3
 802997a:	f00e fc80 	bl	803827e <sys_mbox_valid>
 802997e:	4603      	mov	r3, r0
 8029980:	2b00      	cmp	r3, #0
 8029982:	d006      	beq.n	8029992 <netconn_free+0x5a>
 8029984:	4b0c      	ldr	r3, [pc, #48]	; (80299b8 <netconn_free+0x80>)
 8029986:	f240 3226 	movw	r2, #806	; 0x326
 802998a:	490f      	ldr	r1, [pc, #60]	; (80299c8 <netconn_free+0x90>)
 802998c:	480c      	ldr	r0, [pc, #48]	; (80299c0 <netconn_free+0x88>)
 802998e:	f00f fb6b 	bl	8039068 <iprintf>
              !sys_mbox_valid(&conn->acceptmbox));
#endif /* LWIP_TCP */

#if !LWIP_NETCONN_SEM_PER_THREAD
  sys_sem_free(&conn->op_completed);
 8029992:	687b      	ldr	r3, [r7, #4]
 8029994:	330c      	adds	r3, #12
 8029996:	4618      	mov	r0, r3
 8029998:	f00e fd16 	bl	80383c8 <sys_sem_free>
  sys_sem_set_invalid(&conn->op_completed);
 802999c:	687b      	ldr	r3, [r7, #4]
 802999e:	330c      	adds	r3, #12
 80299a0:	4618      	mov	r0, r3
 80299a2:	f00e fd3a 	bl	803841a <sys_sem_set_invalid>
#endif

  memp_free(MEMP_NETCONN, conn);
 80299a6:	6879      	ldr	r1, [r7, #4]
 80299a8:	2007      	movs	r0, #7
 80299aa:	f003 fdd9 	bl	802d560 <memp_free>
}
 80299ae:	bf00      	nop
 80299b0:	3708      	adds	r7, #8
 80299b2:	46bd      	mov	sp, r7
 80299b4:	bd80      	pop	{r7, pc}
 80299b6:	bf00      	nop
 80299b8:	08039f0c 	.word	0x08039f0c
 80299bc:	0803a138 	.word	0x0803a138
 80299c0:	08039f50 	.word	0x08039f50
 80299c4:	0803a168 	.word	0x0803a168
 80299c8:	0803a1a4 	.word	0x0803a1a4

080299cc <netconn_drain>:
 * @bytes_drained bytes drained from recvmbox
 * @accepts_drained pending connections drained from acceptmbox
 */
static void
netconn_drain(struct netconn *conn)
{
 80299cc:	b580      	push	{r7, lr}
 80299ce:	b086      	sub	sp, #24
 80299d0:	af00      	add	r7, sp, #0
 80299d2:	6078      	str	r0, [r7, #4]
#if LWIP_NETCONN_FULLDUPLEX
  LWIP_ASSERT("netconn marked closed", conn->flags & NETCONN_FLAG_MBOXINVALID);
#endif /* LWIP_NETCONN_FULLDUPLEX */

  /* Delete and drain the recvmbox. */
  if (sys_mbox_valid(&conn->recvmbox)) {
 80299d4:	687b      	ldr	r3, [r7, #4]
 80299d6:	3310      	adds	r3, #16
 80299d8:	4618      	mov	r0, r3
 80299da:	f00e fc50 	bl	803827e <sys_mbox_valid>
 80299de:	4603      	mov	r3, r0
 80299e0:	2b00      	cmp	r3, #0
 80299e2:	d02f      	beq.n	8029a44 <netconn_drain+0x78>
    while (sys_mbox_tryfetch(&conn->recvmbox, &mem) != SYS_MBOX_EMPTY) {
 80299e4:	e018      	b.n	8029a18 <netconn_drain+0x4c>
#if LWIP_NETCONN_FULLDUPLEX
      if (!lwip_netconn_is_deallocated_msg(mem))
#endif /* LWIP_NETCONN_FULLDUPLEX */
      {
#if LWIP_TCP
        if (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP) {
 80299e6:	687b      	ldr	r3, [r7, #4]
 80299e8:	781b      	ldrb	r3, [r3, #0]
 80299ea:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80299ee:	2b10      	cmp	r3, #16
 80299f0:	d10e      	bne.n	8029a10 <netconn_drain+0x44>
          err_t err;
          if (!lwip_netconn_is_err_msg(mem, &err)) {
 80299f2:	693b      	ldr	r3, [r7, #16]
 80299f4:	f107 020f 	add.w	r2, r7, #15
 80299f8:	4611      	mov	r1, r2
 80299fa:	4618      	mov	r0, r3
 80299fc:	f7ff faf0 	bl	8028fe0 <lwip_netconn_is_err_msg>
 8029a00:	4603      	mov	r3, r0
 8029a02:	2b00      	cmp	r3, #0
 8029a04:	d108      	bne.n	8029a18 <netconn_drain+0x4c>
            pbuf_free((struct pbuf *)mem);
 8029a06:	693b      	ldr	r3, [r7, #16]
 8029a08:	4618      	mov	r0, r3
 8029a0a:	f004 fc7f 	bl	802e30c <pbuf_free>
 8029a0e:	e003      	b.n	8029a18 <netconn_drain+0x4c>
          }
        } else
#endif /* LWIP_TCP */
        {
          netbuf_delete((struct netbuf *)mem);
 8029a10:	693b      	ldr	r3, [r7, #16]
 8029a12:	4618      	mov	r0, r3
 8029a14:	f000 ff88 	bl	802a928 <netbuf_delete>
    while (sys_mbox_tryfetch(&conn->recvmbox, &mem) != SYS_MBOX_EMPTY) {
 8029a18:	687b      	ldr	r3, [r7, #4]
 8029a1a:	3310      	adds	r3, #16
 8029a1c:	f107 0210 	add.w	r2, r7, #16
 8029a20:	4611      	mov	r1, r2
 8029a22:	4618      	mov	r0, r3
 8029a24:	f00e fc0f 	bl	8038246 <sys_arch_mbox_tryfetch>
 8029a28:	4603      	mov	r3, r0
 8029a2a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8029a2e:	d1da      	bne.n	80299e6 <netconn_drain+0x1a>
        }
      }
    }
    sys_mbox_free(&conn->recvmbox);
 8029a30:	687b      	ldr	r3, [r7, #4]
 8029a32:	3310      	adds	r3, #16
 8029a34:	4618      	mov	r0, r3
 8029a36:	f00e fb7b 	bl	8038130 <sys_mbox_free>
    sys_mbox_set_invalid(&conn->recvmbox);
 8029a3a:	687b      	ldr	r3, [r7, #4]
 8029a3c:	3310      	adds	r3, #16
 8029a3e:	4618      	mov	r0, r3
 8029a40:	f00e fc2e 	bl	80382a0 <sys_mbox_set_invalid>
  }

  /* Delete and drain the acceptmbox. */
#if LWIP_TCP
  if (sys_mbox_valid(&conn->acceptmbox)) {
 8029a44:	687b      	ldr	r3, [r7, #4]
 8029a46:	3314      	adds	r3, #20
 8029a48:	4618      	mov	r0, r3
 8029a4a:	f00e fc18 	bl	803827e <sys_mbox_valid>
 8029a4e:	4603      	mov	r3, r0
 8029a50:	2b00      	cmp	r3, #0
 8029a52:	d034      	beq.n	8029abe <netconn_drain+0xf2>
    while (sys_mbox_tryfetch(&conn->acceptmbox, &mem) != SYS_MBOX_EMPTY) {
 8029a54:	e01d      	b.n	8029a92 <netconn_drain+0xc6>
#if LWIP_NETCONN_FULLDUPLEX
      if (!lwip_netconn_is_deallocated_msg(mem))
#endif /* LWIP_NETCONN_FULLDUPLEX */
      {
        err_t err;
        if (!lwip_netconn_is_err_msg(mem, &err)) {
 8029a56:	693b      	ldr	r3, [r7, #16]
 8029a58:	f107 020e 	add.w	r2, r7, #14
 8029a5c:	4611      	mov	r1, r2
 8029a5e:	4618      	mov	r0, r3
 8029a60:	f7ff fabe 	bl	8028fe0 <lwip_netconn_is_err_msg>
 8029a64:	4603      	mov	r3, r0
 8029a66:	2b00      	cmp	r3, #0
 8029a68:	d113      	bne.n	8029a92 <netconn_drain+0xc6>
          struct netconn *newconn = (struct netconn *)mem;
 8029a6a:	693b      	ldr	r3, [r7, #16]
 8029a6c:	617b      	str	r3, [r7, #20]
          /* Only tcp pcbs have an acceptmbox, so no need to check conn->type */
          /* pcb might be set to NULL already by err_tcp() */
          /* drain recvmbox */
          netconn_drain(newconn);
 8029a6e:	6978      	ldr	r0, [r7, #20]
 8029a70:	f7ff ffac 	bl	80299cc <netconn_drain>
          if (newconn->pcb.tcp != NULL) {
 8029a74:	697b      	ldr	r3, [r7, #20]
 8029a76:	685b      	ldr	r3, [r3, #4]
 8029a78:	2b00      	cmp	r3, #0
 8029a7a:	d007      	beq.n	8029a8c <netconn_drain+0xc0>
            tcp_abort(newconn->pcb.tcp);
 8029a7c:	697b      	ldr	r3, [r7, #20]
 8029a7e:	685b      	ldr	r3, [r3, #4]
 8029a80:	4618      	mov	r0, r3
 8029a82:	f005 fa4b 	bl	802ef1c <tcp_abort>
            newconn->pcb.tcp = NULL;
 8029a86:	697b      	ldr	r3, [r7, #20]
 8029a88:	2200      	movs	r2, #0
 8029a8a:	605a      	str	r2, [r3, #4]
          }
          netconn_free(newconn);
 8029a8c:	6978      	ldr	r0, [r7, #20]
 8029a8e:	f7ff ff53 	bl	8029938 <netconn_free>
    while (sys_mbox_tryfetch(&conn->acceptmbox, &mem) != SYS_MBOX_EMPTY) {
 8029a92:	687b      	ldr	r3, [r7, #4]
 8029a94:	3314      	adds	r3, #20
 8029a96:	f107 0210 	add.w	r2, r7, #16
 8029a9a:	4611      	mov	r1, r2
 8029a9c:	4618      	mov	r0, r3
 8029a9e:	f00e fbd2 	bl	8038246 <sys_arch_mbox_tryfetch>
 8029aa2:	4603      	mov	r3, r0
 8029aa4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8029aa8:	d1d5      	bne.n	8029a56 <netconn_drain+0x8a>
        }
      }
    }
    sys_mbox_free(&conn->acceptmbox);
 8029aaa:	687b      	ldr	r3, [r7, #4]
 8029aac:	3314      	adds	r3, #20
 8029aae:	4618      	mov	r0, r3
 8029ab0:	f00e fb3e 	bl	8038130 <sys_mbox_free>
    sys_mbox_set_invalid(&conn->acceptmbox);
 8029ab4:	687b      	ldr	r3, [r7, #4]
 8029ab6:	3314      	adds	r3, #20
 8029ab8:	4618      	mov	r0, r3
 8029aba:	f00e fbf1 	bl	80382a0 <sys_mbox_set_invalid>
  }
#endif /* LWIP_TCP */
}
 8029abe:	bf00      	nop
 8029ac0:	3718      	adds	r7, #24
 8029ac2:	46bd      	mov	sp, r7
 8029ac4:	bd80      	pop	{r7, pc}
	...

08029ac8 <lwip_netconn_do_close_internal>:
 *
 * @param conn the TCP netconn to close
 */
static err_t
lwip_netconn_do_close_internal(struct netconn *conn  WRITE_DELAYED_PARAM)
{
 8029ac8:	b580      	push	{r7, lr}
 8029aca:	b086      	sub	sp, #24
 8029acc:	af00      	add	r7, sp, #0
 8029ace:	6078      	str	r0, [r7, #4]
 8029ad0:	460b      	mov	r3, r1
 8029ad2:	70fb      	strb	r3, [r7, #3]
  err_t err;
  u8_t shut, shut_rx, shut_tx, shut_close;
  u8_t close_finished = 0;
 8029ad4:	2300      	movs	r3, #0
 8029ad6:	757b      	strb	r3, [r7, #21]
  struct tcp_pcb *tpcb;
#if LWIP_SO_LINGER
  u8_t linger_wait_required = 0;
#endif /* LWIP_SO_LINGER */

  LWIP_ASSERT("invalid conn", (conn != NULL));
 8029ad8:	687b      	ldr	r3, [r7, #4]
 8029ada:	2b00      	cmp	r3, #0
 8029adc:	d106      	bne.n	8029aec <lwip_netconn_do_close_internal+0x24>
 8029ade:	4b87      	ldr	r3, [pc, #540]	; (8029cfc <lwip_netconn_do_close_internal+0x234>)
 8029ae0:	f240 32a2 	movw	r2, #930	; 0x3a2
 8029ae4:	4986      	ldr	r1, [pc, #536]	; (8029d00 <lwip_netconn_do_close_internal+0x238>)
 8029ae6:	4887      	ldr	r0, [pc, #540]	; (8029d04 <lwip_netconn_do_close_internal+0x23c>)
 8029ae8:	f00f fabe 	bl	8039068 <iprintf>
  LWIP_ASSERT("this is for tcp netconns only", (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP));
 8029aec:	687b      	ldr	r3, [r7, #4]
 8029aee:	781b      	ldrb	r3, [r3, #0]
 8029af0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8029af4:	2b10      	cmp	r3, #16
 8029af6:	d006      	beq.n	8029b06 <lwip_netconn_do_close_internal+0x3e>
 8029af8:	4b80      	ldr	r3, [pc, #512]	; (8029cfc <lwip_netconn_do_close_internal+0x234>)
 8029afa:	f240 32a3 	movw	r2, #931	; 0x3a3
 8029afe:	4982      	ldr	r1, [pc, #520]	; (8029d08 <lwip_netconn_do_close_internal+0x240>)
 8029b00:	4880      	ldr	r0, [pc, #512]	; (8029d04 <lwip_netconn_do_close_internal+0x23c>)
 8029b02:	f00f fab1 	bl	8039068 <iprintf>
  LWIP_ASSERT("conn must be in state NETCONN_CLOSE", (conn->state == NETCONN_CLOSE));
 8029b06:	687b      	ldr	r3, [r7, #4]
 8029b08:	785b      	ldrb	r3, [r3, #1]
 8029b0a:	2b04      	cmp	r3, #4
 8029b0c:	d006      	beq.n	8029b1c <lwip_netconn_do_close_internal+0x54>
 8029b0e:	4b7b      	ldr	r3, [pc, #492]	; (8029cfc <lwip_netconn_do_close_internal+0x234>)
 8029b10:	f44f 7269 	mov.w	r2, #932	; 0x3a4
 8029b14:	497d      	ldr	r1, [pc, #500]	; (8029d0c <lwip_netconn_do_close_internal+0x244>)
 8029b16:	487b      	ldr	r0, [pc, #492]	; (8029d04 <lwip_netconn_do_close_internal+0x23c>)
 8029b18:	f00f faa6 	bl	8039068 <iprintf>
  LWIP_ASSERT("pcb already closed", (conn->pcb.tcp != NULL));
 8029b1c:	687b      	ldr	r3, [r7, #4]
 8029b1e:	685b      	ldr	r3, [r3, #4]
 8029b20:	2b00      	cmp	r3, #0
 8029b22:	d106      	bne.n	8029b32 <lwip_netconn_do_close_internal+0x6a>
 8029b24:	4b75      	ldr	r3, [pc, #468]	; (8029cfc <lwip_netconn_do_close_internal+0x234>)
 8029b26:	f240 32a5 	movw	r2, #933	; 0x3a5
 8029b2a:	4979      	ldr	r1, [pc, #484]	; (8029d10 <lwip_netconn_do_close_internal+0x248>)
 8029b2c:	4875      	ldr	r0, [pc, #468]	; (8029d04 <lwip_netconn_do_close_internal+0x23c>)
 8029b2e:	f00f fa9b 	bl	8039068 <iprintf>
  LWIP_ASSERT("conn->current_msg != NULL", conn->current_msg != NULL);
 8029b32:	687b      	ldr	r3, [r7, #4]
 8029b34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8029b36:	2b00      	cmp	r3, #0
 8029b38:	d106      	bne.n	8029b48 <lwip_netconn_do_close_internal+0x80>
 8029b3a:	4b70      	ldr	r3, [pc, #448]	; (8029cfc <lwip_netconn_do_close_internal+0x234>)
 8029b3c:	f240 32a6 	movw	r2, #934	; 0x3a6
 8029b40:	4974      	ldr	r1, [pc, #464]	; (8029d14 <lwip_netconn_do_close_internal+0x24c>)
 8029b42:	4870      	ldr	r0, [pc, #448]	; (8029d04 <lwip_netconn_do_close_internal+0x23c>)
 8029b44:	f00f fa90 	bl	8039068 <iprintf>

  tpcb = conn->pcb.tcp;
 8029b48:	687b      	ldr	r3, [r7, #4]
 8029b4a:	685b      	ldr	r3, [r3, #4]
 8029b4c:	613b      	str	r3, [r7, #16]
  shut = conn->current_msg->msg.sd.shut;
 8029b4e:	687b      	ldr	r3, [r7, #4]
 8029b50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8029b52:	7a1b      	ldrb	r3, [r3, #8]
 8029b54:	73fb      	strb	r3, [r7, #15]
  shut_rx = shut & NETCONN_SHUT_RD;
 8029b56:	7bfb      	ldrb	r3, [r7, #15]
 8029b58:	f003 0301 	and.w	r3, r3, #1
 8029b5c:	73bb      	strb	r3, [r7, #14]
  shut_tx = shut & NETCONN_SHUT_WR;
 8029b5e:	7bfb      	ldrb	r3, [r7, #15]
 8029b60:	f003 0302 	and.w	r3, r3, #2
 8029b64:	737b      	strb	r3, [r7, #13]
  /* shutting down both ends is the same as closing
     (also if RD or WR side was shut down before already) */
  if (shut == NETCONN_SHUT_RDWR) {
 8029b66:	7bfb      	ldrb	r3, [r7, #15]
 8029b68:	2b03      	cmp	r3, #3
 8029b6a:	d102      	bne.n	8029b72 <lwip_netconn_do_close_internal+0xaa>
    shut_close = 1;
 8029b6c:	2301      	movs	r3, #1
 8029b6e:	75bb      	strb	r3, [r7, #22]
 8029b70:	e01f      	b.n	8029bb2 <lwip_netconn_do_close_internal+0xea>
  } else if (shut_rx &&
 8029b72:	7bbb      	ldrb	r3, [r7, #14]
 8029b74:	2b00      	cmp	r3, #0
 8029b76:	d00e      	beq.n	8029b96 <lwip_netconn_do_close_internal+0xce>
             ((tpcb->state == FIN_WAIT_1) ||
 8029b78:	693b      	ldr	r3, [r7, #16]
 8029b7a:	7d1b      	ldrb	r3, [r3, #20]
  } else if (shut_rx &&
 8029b7c:	2b05      	cmp	r3, #5
 8029b7e:	d007      	beq.n	8029b90 <lwip_netconn_do_close_internal+0xc8>
              (tpcb->state == FIN_WAIT_2) ||
 8029b80:	693b      	ldr	r3, [r7, #16]
 8029b82:	7d1b      	ldrb	r3, [r3, #20]
             ((tpcb->state == FIN_WAIT_1) ||
 8029b84:	2b06      	cmp	r3, #6
 8029b86:	d003      	beq.n	8029b90 <lwip_netconn_do_close_internal+0xc8>
              (tpcb->state == CLOSING))) {
 8029b88:	693b      	ldr	r3, [r7, #16]
 8029b8a:	7d1b      	ldrb	r3, [r3, #20]
              (tpcb->state == FIN_WAIT_2) ||
 8029b8c:	2b08      	cmp	r3, #8
 8029b8e:	d102      	bne.n	8029b96 <lwip_netconn_do_close_internal+0xce>
    shut_close = 1;
 8029b90:	2301      	movs	r3, #1
 8029b92:	75bb      	strb	r3, [r7, #22]
 8029b94:	e00d      	b.n	8029bb2 <lwip_netconn_do_close_internal+0xea>
  } else if (shut_tx && ((tpcb->flags & TF_RXCLOSED) != 0)) {
 8029b96:	7b7b      	ldrb	r3, [r7, #13]
 8029b98:	2b00      	cmp	r3, #0
 8029b9a:	d008      	beq.n	8029bae <lwip_netconn_do_close_internal+0xe6>
 8029b9c:	693b      	ldr	r3, [r7, #16]
 8029b9e:	8b5b      	ldrh	r3, [r3, #26]
 8029ba0:	f003 0310 	and.w	r3, r3, #16
 8029ba4:	2b00      	cmp	r3, #0
 8029ba6:	d002      	beq.n	8029bae <lwip_netconn_do_close_internal+0xe6>
    shut_close = 1;
 8029ba8:	2301      	movs	r3, #1
 8029baa:	75bb      	strb	r3, [r7, #22]
 8029bac:	e001      	b.n	8029bb2 <lwip_netconn_do_close_internal+0xea>
  } else {
    shut_close = 0;
 8029bae:	2300      	movs	r3, #0
 8029bb0:	75bb      	strb	r3, [r7, #22]
  }

  /* Set back some callback pointers */
  if (shut_close) {
 8029bb2:	7dbb      	ldrb	r3, [r7, #22]
 8029bb4:	2b00      	cmp	r3, #0
 8029bb6:	d003      	beq.n	8029bc0 <lwip_netconn_do_close_internal+0xf8>
    tcp_arg(tpcb, NULL);
 8029bb8:	2100      	movs	r1, #0
 8029bba:	6938      	ldr	r0, [r7, #16]
 8029bbc:	f006 fa66 	bl	803008c <tcp_arg>
  }
  if (tpcb->state == LISTEN) {
 8029bc0:	693b      	ldr	r3, [r7, #16]
 8029bc2:	7d1b      	ldrb	r3, [r3, #20]
 8029bc4:	2b01      	cmp	r3, #1
 8029bc6:	d104      	bne.n	8029bd2 <lwip_netconn_do_close_internal+0x10a>
    tcp_accept(tpcb, NULL);
 8029bc8:	2100      	movs	r1, #0
 8029bca:	6938      	ldr	r0, [r7, #16]
 8029bcc:	f006 fad6 	bl	803017c <tcp_accept>
 8029bd0:	e01d      	b.n	8029c0e <lwip_netconn_do_close_internal+0x146>
  } else {
    /* some callbacks have to be reset if tcp_close is not successful */
    if (shut_rx) {
 8029bd2:	7bbb      	ldrb	r3, [r7, #14]
 8029bd4:	2b00      	cmp	r3, #0
 8029bd6:	d007      	beq.n	8029be8 <lwip_netconn_do_close_internal+0x120>
      tcp_recv(tpcb, NULL);
 8029bd8:	2100      	movs	r1, #0
 8029bda:	6938      	ldr	r0, [r7, #16]
 8029bdc:	f006 fa68 	bl	80300b0 <tcp_recv>
      tcp_accept(tpcb, NULL);
 8029be0:	2100      	movs	r1, #0
 8029be2:	6938      	ldr	r0, [r7, #16]
 8029be4:	f006 faca 	bl	803017c <tcp_accept>
    }
    if (shut_tx) {
 8029be8:	7b7b      	ldrb	r3, [r7, #13]
 8029bea:	2b00      	cmp	r3, #0
 8029bec:	d003      	beq.n	8029bf6 <lwip_netconn_do_close_internal+0x12e>
      tcp_sent(tpcb, NULL);
 8029bee:	2100      	movs	r1, #0
 8029bf0:	6938      	ldr	r0, [r7, #16]
 8029bf2:	f006 fa7f 	bl	80300f4 <tcp_sent>
    }
    if (shut_close) {
 8029bf6:	7dbb      	ldrb	r3, [r7, #22]
 8029bf8:	2b00      	cmp	r3, #0
 8029bfa:	d008      	beq.n	8029c0e <lwip_netconn_do_close_internal+0x146>
      tcp_poll(tpcb, NULL, 0);
 8029bfc:	2200      	movs	r2, #0
 8029bfe:	2100      	movs	r1, #0
 8029c00:	6938      	ldr	r0, [r7, #16]
 8029c02:	f006 fad3 	bl	80301ac <tcp_poll>
      tcp_err(tpcb, NULL);
 8029c06:	2100      	movs	r1, #0
 8029c08:	6938      	ldr	r0, [r7, #16]
 8029c0a:	f006 fa95 	bl	8030138 <tcp_err>
    }
  }
  /* Try to close the connection */
  if (shut_close) {
 8029c0e:	7dbb      	ldrb	r3, [r7, #22]
 8029c10:	2b00      	cmp	r3, #0
 8029c12:	d005      	beq.n	8029c20 <lwip_netconn_do_close_internal+0x158>
      }
    }
    if ((err == ERR_OK) && (tpcb != NULL))
#endif /* LWIP_SO_LINGER */
    {
      err = tcp_close(tpcb);
 8029c14:	6938      	ldr	r0, [r7, #16]
 8029c16:	f005 f83b 	bl	802ec90 <tcp_close>
 8029c1a:	4603      	mov	r3, r0
 8029c1c:	75fb      	strb	r3, [r7, #23]
 8029c1e:	e007      	b.n	8029c30 <lwip_netconn_do_close_internal+0x168>
    }
  } else {
    err = tcp_shutdown(tpcb, shut_rx, shut_tx);
 8029c20:	7bbb      	ldrb	r3, [r7, #14]
 8029c22:	7b7a      	ldrb	r2, [r7, #13]
 8029c24:	4619      	mov	r1, r3
 8029c26:	6938      	ldr	r0, [r7, #16]
 8029c28:	f005 f85e 	bl	802ece8 <tcp_shutdown>
 8029c2c:	4603      	mov	r3, r0
 8029c2e:	75fb      	strb	r3, [r7, #23]
  }
  if (err == ERR_OK) {
 8029c30:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8029c34:	2b00      	cmp	r3, #0
 8029c36:	d102      	bne.n	8029c3e <lwip_netconn_do_close_internal+0x176>
    close_finished = 1;
 8029c38:	2301      	movs	r3, #1
 8029c3a:	757b      	strb	r3, [r7, #21]
 8029c3c:	e016      	b.n	8029c6c <lwip_netconn_do_close_internal+0x1a4>
      close_finished = 0;
      err = ERR_INPROGRESS;
    }
#endif /* LWIP_SO_LINGER */
  } else {
    if (err == ERR_MEM) {
 8029c3e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8029c42:	f1b3 3fff 	cmp.w	r3, #4294967295
 8029c46:	d10f      	bne.n	8029c68 <lwip_netconn_do_close_internal+0x1a0>
        close_timeout = conn->linger * 1000U;
      }
#endif
      if ((s32_t)(sys_now() - conn->current_msg->msg.sd.time_started) >= close_timeout) {
#else /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
      if (conn->current_msg->msg.sd.polls_left == 0) {
 8029c48:	687b      	ldr	r3, [r7, #4]
 8029c4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8029c4c:	7a5b      	ldrb	r3, [r3, #9]
 8029c4e:	2b00      	cmp	r3, #0
 8029c50:	d10c      	bne.n	8029c6c <lwip_netconn_do_close_internal+0x1a4>
#endif /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
        close_finished = 1;
 8029c52:	2301      	movs	r3, #1
 8029c54:	757b      	strb	r3, [r7, #21]
        if (shut_close) {
 8029c56:	7dbb      	ldrb	r3, [r7, #22]
 8029c58:	2b00      	cmp	r3, #0
 8029c5a:	d007      	beq.n	8029c6c <lwip_netconn_do_close_internal+0x1a4>
          /* in this case, we want to RST the connection */
          tcp_abort(tpcb);
 8029c5c:	6938      	ldr	r0, [r7, #16]
 8029c5e:	f005 f95d 	bl	802ef1c <tcp_abort>
          err = ERR_OK;
 8029c62:	2300      	movs	r3, #0
 8029c64:	75fb      	strb	r3, [r7, #23]
 8029c66:	e001      	b.n	8029c6c <lwip_netconn_do_close_internal+0x1a4>
        }
      }
    } else {
      /* Closing failed for a non-memory error: give up */
      close_finished = 1;
 8029c68:	2301      	movs	r3, #1
 8029c6a:	757b      	strb	r3, [r7, #21]
    }
  }
  if (close_finished) {
 8029c6c:	7d7b      	ldrb	r3, [r7, #21]
 8029c6e:	2b00      	cmp	r3, #0
 8029c70:	d052      	beq.n	8029d18 <lwip_netconn_do_close_internal+0x250>
    /* Closing done (succeeded, non-memory error, nonblocking error or timeout) */
    sys_sem_t *op_completed_sem = LWIP_API_MSG_SEM(conn->current_msg);
 8029c72:	687b      	ldr	r3, [r7, #4]
 8029c74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8029c76:	681b      	ldr	r3, [r3, #0]
 8029c78:	330c      	adds	r3, #12
 8029c7a:	60bb      	str	r3, [r7, #8]
    conn->current_msg->err = err;
 8029c7c:	687b      	ldr	r3, [r7, #4]
 8029c7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8029c80:	7dfa      	ldrb	r2, [r7, #23]
 8029c82:	711a      	strb	r2, [r3, #4]
    conn->current_msg = NULL;
 8029c84:	687b      	ldr	r3, [r7, #4]
 8029c86:	2200      	movs	r2, #0
 8029c88:	625a      	str	r2, [r3, #36]	; 0x24
    conn->state = NETCONN_NONE;
 8029c8a:	687b      	ldr	r3, [r7, #4]
 8029c8c:	2200      	movs	r2, #0
 8029c8e:	705a      	strb	r2, [r3, #1]
    if (err == ERR_OK) {
 8029c90:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8029c94:	2b00      	cmp	r3, #0
 8029c96:	d129      	bne.n	8029cec <lwip_netconn_do_close_internal+0x224>
      if (shut_close) {
 8029c98:	7dbb      	ldrb	r3, [r7, #22]
 8029c9a:	2b00      	cmp	r3, #0
 8029c9c:	d00c      	beq.n	8029cb8 <lwip_netconn_do_close_internal+0x1f0>
        /* Set back some callback pointers as conn is going away */
        conn->pcb.tcp = NULL;
 8029c9e:	687b      	ldr	r3, [r7, #4]
 8029ca0:	2200      	movs	r2, #0
 8029ca2:	605a      	str	r2, [r3, #4]
        /* Trigger select() in socket layer. Make sure everybody notices activity
         on the connection, error first! */
        API_EVENT(conn, NETCONN_EVT_ERROR, 0);
 8029ca4:	687b      	ldr	r3, [r7, #4]
 8029ca6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8029ca8:	2b00      	cmp	r3, #0
 8029caa:	d005      	beq.n	8029cb8 <lwip_netconn_do_close_internal+0x1f0>
 8029cac:	687b      	ldr	r3, [r7, #4]
 8029cae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8029cb0:	2200      	movs	r2, #0
 8029cb2:	2104      	movs	r1, #4
 8029cb4:	6878      	ldr	r0, [r7, #4]
 8029cb6:	4798      	blx	r3
      }
      if (shut_rx) {
 8029cb8:	7bbb      	ldrb	r3, [r7, #14]
 8029cba:	2b00      	cmp	r3, #0
 8029cbc:	d009      	beq.n	8029cd2 <lwip_netconn_do_close_internal+0x20a>
        API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
 8029cbe:	687b      	ldr	r3, [r7, #4]
 8029cc0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8029cc2:	2b00      	cmp	r3, #0
 8029cc4:	d005      	beq.n	8029cd2 <lwip_netconn_do_close_internal+0x20a>
 8029cc6:	687b      	ldr	r3, [r7, #4]
 8029cc8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8029cca:	2200      	movs	r2, #0
 8029ccc:	2100      	movs	r1, #0
 8029cce:	6878      	ldr	r0, [r7, #4]
 8029cd0:	4798      	blx	r3
      }
      if (shut_tx) {
 8029cd2:	7b7b      	ldrb	r3, [r7, #13]
 8029cd4:	2b00      	cmp	r3, #0
 8029cd6:	d009      	beq.n	8029cec <lwip_netconn_do_close_internal+0x224>
        API_EVENT(conn, NETCONN_EVT_SENDPLUS, 0);
 8029cd8:	687b      	ldr	r3, [r7, #4]
 8029cda:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8029cdc:	2b00      	cmp	r3, #0
 8029cde:	d005      	beq.n	8029cec <lwip_netconn_do_close_internal+0x224>
 8029ce0:	687b      	ldr	r3, [r7, #4]
 8029ce2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8029ce4:	2200      	movs	r2, #0
 8029ce6:	2102      	movs	r1, #2
 8029ce8:	6878      	ldr	r0, [r7, #4]
 8029cea:	4798      	blx	r3
      }
    }
#if LWIP_TCPIP_CORE_LOCKING
    if (delayed)
 8029cec:	78fb      	ldrb	r3, [r7, #3]
 8029cee:	2b00      	cmp	r3, #0
 8029cf0:	d002      	beq.n	8029cf8 <lwip_netconn_do_close_internal+0x230>
#endif
    {
      /* wake up the application task */
      sys_sem_signal(op_completed_sem);
 8029cf2:	68b8      	ldr	r0, [r7, #8]
 8029cf4:	f00e fb5b 	bl	80383ae <sys_sem_signal>
    }
    return ERR_OK;
 8029cf8:	2300      	movs	r3, #0
 8029cfa:	e03c      	b.n	8029d76 <lwip_netconn_do_close_internal+0x2ae>
 8029cfc:	08039f0c 	.word	0x08039f0c
 8029d00:	0803a1e0 	.word	0x0803a1e0
 8029d04:	08039f50 	.word	0x08039f50
 8029d08:	0803a1f0 	.word	0x0803a1f0
 8029d0c:	0803a210 	.word	0x0803a210
 8029d10:	0803a234 	.word	0x0803a234
 8029d14:	0803a074 	.word	0x0803a074
  }
  if (!close_finished) {
 8029d18:	7d7b      	ldrb	r3, [r7, #21]
 8029d1a:	2b00      	cmp	r3, #0
 8029d1c:	d11e      	bne.n	8029d5c <lwip_netconn_do_close_internal+0x294>
    /* Closing failed and we want to wait: restore some of the callbacks */
    /* Closing of listen pcb will never fail! */
    LWIP_ASSERT("Closing a listen pcb may not fail!", (tpcb->state != LISTEN));
 8029d1e:	693b      	ldr	r3, [r7, #16]
 8029d20:	7d1b      	ldrb	r3, [r3, #20]
 8029d22:	2b01      	cmp	r3, #1
 8029d24:	d106      	bne.n	8029d34 <lwip_netconn_do_close_internal+0x26c>
 8029d26:	4b16      	ldr	r3, [pc, #88]	; (8029d80 <lwip_netconn_do_close_internal+0x2b8>)
 8029d28:	f240 4241 	movw	r2, #1089	; 0x441
 8029d2c:	4915      	ldr	r1, [pc, #84]	; (8029d84 <lwip_netconn_do_close_internal+0x2bc>)
 8029d2e:	4816      	ldr	r0, [pc, #88]	; (8029d88 <lwip_netconn_do_close_internal+0x2c0>)
 8029d30:	f00f f99a 	bl	8039068 <iprintf>
    if (shut_tx) {
 8029d34:	7b7b      	ldrb	r3, [r7, #13]
 8029d36:	2b00      	cmp	r3, #0
 8029d38:	d003      	beq.n	8029d42 <lwip_netconn_do_close_internal+0x27a>
      tcp_sent(tpcb, sent_tcp);
 8029d3a:	4914      	ldr	r1, [pc, #80]	; (8029d8c <lwip_netconn_do_close_internal+0x2c4>)
 8029d3c:	6938      	ldr	r0, [r7, #16]
 8029d3e:	f006 f9d9 	bl	80300f4 <tcp_sent>
    }
    /* when waiting for close, set up poll interval to 500ms */
    tcp_poll(tpcb, poll_tcp, 1);
 8029d42:	2201      	movs	r2, #1
 8029d44:	4912      	ldr	r1, [pc, #72]	; (8029d90 <lwip_netconn_do_close_internal+0x2c8>)
 8029d46:	6938      	ldr	r0, [r7, #16]
 8029d48:	f006 fa30 	bl	80301ac <tcp_poll>
    tcp_err(tpcb, err_tcp);
 8029d4c:	4911      	ldr	r1, [pc, #68]	; (8029d94 <lwip_netconn_do_close_internal+0x2cc>)
 8029d4e:	6938      	ldr	r0, [r7, #16]
 8029d50:	f006 f9f2 	bl	8030138 <tcp_err>
    tcp_arg(tpcb, conn);
 8029d54:	6879      	ldr	r1, [r7, #4]
 8029d56:	6938      	ldr	r0, [r7, #16]
 8029d58:	f006 f998 	bl	803008c <tcp_arg>
    /* don't restore recv callback: we don't want to receive any more data */
  }
  /* If closing didn't succeed, we get called again either
     from poll_tcp or from sent_tcp */
  LWIP_ASSERT("err != ERR_OK", err != ERR_OK);
 8029d5c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8029d60:	2b00      	cmp	r3, #0
 8029d62:	d106      	bne.n	8029d72 <lwip_netconn_do_close_internal+0x2aa>
 8029d64:	4b06      	ldr	r3, [pc, #24]	; (8029d80 <lwip_netconn_do_close_internal+0x2b8>)
 8029d66:	f240 424d 	movw	r2, #1101	; 0x44d
 8029d6a:	490b      	ldr	r1, [pc, #44]	; (8029d98 <lwip_netconn_do_close_internal+0x2d0>)
 8029d6c:	4806      	ldr	r0, [pc, #24]	; (8029d88 <lwip_netconn_do_close_internal+0x2c0>)
 8029d6e:	f00f f97b 	bl	8039068 <iprintf>
  return err;
 8029d72:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8029d76:	4618      	mov	r0, r3
 8029d78:	3718      	adds	r7, #24
 8029d7a:	46bd      	mov	sp, r7
 8029d7c:	bd80      	pop	{r7, pc}
 8029d7e:	bf00      	nop
 8029d80:	08039f0c 	.word	0x08039f0c
 8029d84:	0803a248 	.word	0x0803a248
 8029d88:	08039f50 	.word	0x08039f50
 8029d8c:	0802932d 	.word	0x0802932d
 8029d90:	0802925d 	.word	0x0802925d
 8029d94:	080293d9 	.word	0x080293d9
 8029d98:	0803a26c 	.word	0x0803a26c

08029d9c <lwip_netconn_do_delconn>:
 *
 * @param m the api_msg pointing to the connection
 */
void
lwip_netconn_do_delconn(void *m)
{
 8029d9c:	b580      	push	{r7, lr}
 8029d9e:	b084      	sub	sp, #16
 8029da0:	af00      	add	r7, sp, #0
 8029da2:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 8029da4:	687b      	ldr	r3, [r7, #4]
 8029da6:	60fb      	str	r3, [r7, #12]

  enum netconn_state state = msg->conn->state;
 8029da8:	68fb      	ldr	r3, [r7, #12]
 8029daa:	681b      	ldr	r3, [r3, #0]
 8029dac:	785b      	ldrb	r3, [r3, #1]
 8029dae:	72fb      	strb	r3, [r7, #11]
  LWIP_ASSERT("netconn state error", /* this only happens for TCP netconns */
 8029db0:	7afb      	ldrb	r3, [r7, #11]
 8029db2:	2b00      	cmp	r3, #0
 8029db4:	d00d      	beq.n	8029dd2 <lwip_netconn_do_delconn+0x36>
 8029db6:	68fb      	ldr	r3, [r7, #12]
 8029db8:	681b      	ldr	r3, [r3, #0]
 8029dba:	781b      	ldrb	r3, [r3, #0]
 8029dbc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8029dc0:	2b10      	cmp	r3, #16
 8029dc2:	d006      	beq.n	8029dd2 <lwip_netconn_do_delconn+0x36>
 8029dc4:	4b61      	ldr	r3, [pc, #388]	; (8029f4c <lwip_netconn_do_delconn+0x1b0>)
 8029dc6:	f240 425e 	movw	r2, #1118	; 0x45e
 8029dca:	4961      	ldr	r1, [pc, #388]	; (8029f50 <lwip_netconn_do_delconn+0x1b4>)
 8029dcc:	4861      	ldr	r0, [pc, #388]	; (8029f54 <lwip_netconn_do_delconn+0x1b8>)
 8029dce:	f00f f94b 	bl	8039068 <iprintf>
      msg->conn->state = NETCONN_NONE;
      sys_sem_signal(op_completed_sem);
    }
  }
#else /* LWIP_NETCONN_FULLDUPLEX */
  if (((state != NETCONN_NONE) &&
 8029dd2:	7afb      	ldrb	r3, [r7, #11]
 8029dd4:	2b00      	cmp	r3, #0
 8029dd6:	d005      	beq.n	8029de4 <lwip_netconn_do_delconn+0x48>
 8029dd8:	7afb      	ldrb	r3, [r7, #11]
 8029dda:	2b02      	cmp	r3, #2
 8029ddc:	d002      	beq.n	8029de4 <lwip_netconn_do_delconn+0x48>
       (state != NETCONN_LISTEN) &&
 8029dde:	7afb      	ldrb	r3, [r7, #11]
 8029de0:	2b03      	cmp	r3, #3
 8029de2:	d10a      	bne.n	8029dfa <lwip_netconn_do_delconn+0x5e>
       (state != NETCONN_CONNECT)) ||
 8029de4:	7afb      	ldrb	r3, [r7, #11]
 8029de6:	2b03      	cmp	r3, #3
 8029de8:	d10b      	bne.n	8029e02 <lwip_netconn_do_delconn+0x66>
      ((state == NETCONN_CONNECT) && !IN_NONBLOCKING_CONNECT(msg->conn))) {
 8029dea:	68fb      	ldr	r3, [r7, #12]
 8029dec:	681b      	ldr	r3, [r3, #0]
 8029dee:	f893 3020 	ldrb.w	r3, [r3, #32]
 8029df2:	f003 0304 	and.w	r3, r3, #4
 8029df6:	2b00      	cmp	r3, #0
 8029df8:	d103      	bne.n	8029e02 <lwip_netconn_do_delconn+0x66>
    /* This means either a blocking write or blocking connect is running
       (nonblocking write returns and sets state to NONE) */
    msg->err = ERR_INPROGRESS;
 8029dfa:	68fb      	ldr	r3, [r7, #12]
 8029dfc:	22fb      	movs	r2, #251	; 0xfb
 8029dfe:	711a      	strb	r2, [r3, #4]
 8029e00:	e098      	b.n	8029f34 <lwip_netconn_do_delconn+0x198>
  } else
#endif /* LWIP_NETCONN_FULLDUPLEX */
  {
    LWIP_ASSERT("blocking connect in progress",
 8029e02:	7afb      	ldrb	r3, [r7, #11]
 8029e04:	2b03      	cmp	r3, #3
 8029e06:	d10e      	bne.n	8029e26 <lwip_netconn_do_delconn+0x8a>
 8029e08:	68fb      	ldr	r3, [r7, #12]
 8029e0a:	681b      	ldr	r3, [r3, #0]
 8029e0c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8029e10:	f003 0304 	and.w	r3, r3, #4
 8029e14:	2b00      	cmp	r3, #0
 8029e16:	d106      	bne.n	8029e26 <lwip_netconn_do_delconn+0x8a>
 8029e18:	4b4c      	ldr	r3, [pc, #304]	; (8029f4c <lwip_netconn_do_delconn+0x1b0>)
 8029e1a:	f240 427a 	movw	r2, #1146	; 0x47a
 8029e1e:	494e      	ldr	r1, [pc, #312]	; (8029f58 <lwip_netconn_do_delconn+0x1bc>)
 8029e20:	484c      	ldr	r0, [pc, #304]	; (8029f54 <lwip_netconn_do_delconn+0x1b8>)
 8029e22:	f00f f921 	bl	8039068 <iprintf>
                (state != NETCONN_CONNECT) || IN_NONBLOCKING_CONNECT(msg->conn));
    msg->err = ERR_OK;
 8029e26:	68fb      	ldr	r3, [r7, #12]
 8029e28:	2200      	movs	r2, #0
 8029e2a:	711a      	strb	r2, [r3, #4]
#if LWIP_NETCONN_FULLDUPLEX
    /* Mark mboxes invalid */
    netconn_mark_mbox_invalid(msg->conn);
#else /* LWIP_NETCONN_FULLDUPLEX */
    netconn_drain(msg->conn);
 8029e2c:	68fb      	ldr	r3, [r7, #12]
 8029e2e:	681b      	ldr	r3, [r3, #0]
 8029e30:	4618      	mov	r0, r3
 8029e32:	f7ff fdcb 	bl	80299cc <netconn_drain>
#endif /* LWIP_NETCONN_FULLDUPLEX */

    if (msg->conn->pcb.tcp != NULL) {
 8029e36:	68fb      	ldr	r3, [r7, #12]
 8029e38:	681b      	ldr	r3, [r3, #0]
 8029e3a:	685b      	ldr	r3, [r3, #4]
 8029e3c:	2b00      	cmp	r3, #0
 8029e3e:	d05f      	beq.n	8029f00 <lwip_netconn_do_delconn+0x164>

      switch (NETCONNTYPE_GROUP(msg->conn->type)) {
 8029e40:	68fb      	ldr	r3, [r7, #12]
 8029e42:	681b      	ldr	r3, [r3, #0]
 8029e44:	781b      	ldrb	r3, [r3, #0]
 8029e46:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8029e4a:	2b10      	cmp	r3, #16
 8029e4c:	d00d      	beq.n	8029e6a <lwip_netconn_do_delconn+0xce>
 8029e4e:	2b20      	cmp	r3, #32
 8029e50:	d151      	bne.n	8029ef6 <lwip_netconn_do_delconn+0x15a>
          raw_remove(msg->conn->pcb.raw);
          break;
#endif /* LWIP_RAW */
#if LWIP_UDP
        case NETCONN_UDP:
          msg->conn->pcb.udp->recv_arg = NULL;
 8029e52:	68fb      	ldr	r3, [r7, #12]
 8029e54:	681b      	ldr	r3, [r3, #0]
 8029e56:	685b      	ldr	r3, [r3, #4]
 8029e58:	2200      	movs	r2, #0
 8029e5a:	61da      	str	r2, [r3, #28]
          udp_remove(msg->conn->pcb.udp);
 8029e5c:	68fb      	ldr	r3, [r7, #12]
 8029e5e:	681b      	ldr	r3, [r3, #0]
 8029e60:	685b      	ldr	r3, [r3, #4]
 8029e62:	4618      	mov	r0, r3
 8029e64:	f00b fc84 	bl	8035770 <udp_remove>
          break;
 8029e68:	e046      	b.n	8029ef8 <lwip_netconn_do_delconn+0x15c>
#endif /* LWIP_UDP */
#if LWIP_TCP
        case NETCONN_TCP:
          LWIP_ASSERT("already writing or closing", msg->conn->current_msg == NULL);
 8029e6a:	68fb      	ldr	r3, [r7, #12]
 8029e6c:	681b      	ldr	r3, [r3, #0]
 8029e6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8029e70:	2b00      	cmp	r3, #0
 8029e72:	d006      	beq.n	8029e82 <lwip_netconn_do_delconn+0xe6>
 8029e74:	4b35      	ldr	r3, [pc, #212]	; (8029f4c <lwip_netconn_do_delconn+0x1b0>)
 8029e76:	f240 4294 	movw	r2, #1172	; 0x494
 8029e7a:	4938      	ldr	r1, [pc, #224]	; (8029f5c <lwip_netconn_do_delconn+0x1c0>)
 8029e7c:	4835      	ldr	r0, [pc, #212]	; (8029f54 <lwip_netconn_do_delconn+0x1b8>)
 8029e7e:	f00f f8f3 	bl	8039068 <iprintf>
          msg->conn->state = NETCONN_CLOSE;
 8029e82:	68fb      	ldr	r3, [r7, #12]
 8029e84:	681b      	ldr	r3, [r3, #0]
 8029e86:	2204      	movs	r2, #4
 8029e88:	705a      	strb	r2, [r3, #1]
          msg->msg.sd.shut = NETCONN_SHUT_RDWR;
 8029e8a:	68fb      	ldr	r3, [r7, #12]
 8029e8c:	2203      	movs	r2, #3
 8029e8e:	721a      	strb	r2, [r3, #8]
          msg->conn->current_msg = msg;
 8029e90:	68fb      	ldr	r3, [r7, #12]
 8029e92:	681b      	ldr	r3, [r3, #0]
 8029e94:	68fa      	ldr	r2, [r7, #12]
 8029e96:	625a      	str	r2, [r3, #36]	; 0x24
#if LWIP_TCPIP_CORE_LOCKING
          if (lwip_netconn_do_close_internal(msg->conn, 0) != ERR_OK) {
 8029e98:	68fb      	ldr	r3, [r7, #12]
 8029e9a:	681b      	ldr	r3, [r3, #0]
 8029e9c:	2100      	movs	r1, #0
 8029e9e:	4618      	mov	r0, r3
 8029ea0:	f7ff fe12 	bl	8029ac8 <lwip_netconn_do_close_internal>
 8029ea4:	4603      	mov	r3, r0
 8029ea6:	2b00      	cmp	r3, #0
 8029ea8:	d04b      	beq.n	8029f42 <lwip_netconn_do_delconn+0x1a6>
            LWIP_ASSERT("state!", msg->conn->state == NETCONN_CLOSE);
 8029eaa:	68fb      	ldr	r3, [r7, #12]
 8029eac:	681b      	ldr	r3, [r3, #0]
 8029eae:	785b      	ldrb	r3, [r3, #1]
 8029eb0:	2b04      	cmp	r3, #4
 8029eb2:	d006      	beq.n	8029ec2 <lwip_netconn_do_delconn+0x126>
 8029eb4:	4b25      	ldr	r3, [pc, #148]	; (8029f4c <lwip_netconn_do_delconn+0x1b0>)
 8029eb6:	f240 429a 	movw	r2, #1178	; 0x49a
 8029eba:	4929      	ldr	r1, [pc, #164]	; (8029f60 <lwip_netconn_do_delconn+0x1c4>)
 8029ebc:	4825      	ldr	r0, [pc, #148]	; (8029f54 <lwip_netconn_do_delconn+0x1b8>)
 8029ebe:	f00f f8d3 	bl	8039068 <iprintf>
            UNLOCK_TCPIP_CORE();
 8029ec2:	4828      	ldr	r0, [pc, #160]	; (8029f64 <lwip_netconn_do_delconn+0x1c8>)
 8029ec4:	f00e fb0f 	bl	80384e6 <sys_mutex_unlock>
            sys_arch_sem_wait(LWIP_API_MSG_SEM(msg), 0);
 8029ec8:	68fb      	ldr	r3, [r7, #12]
 8029eca:	681b      	ldr	r3, [r3, #0]
 8029ecc:	330c      	adds	r3, #12
 8029ece:	2100      	movs	r1, #0
 8029ed0:	4618      	mov	r0, r3
 8029ed2:	f00e fa3b 	bl	803834c <sys_arch_sem_wait>
            LOCK_TCPIP_CORE();
 8029ed6:	4823      	ldr	r0, [pc, #140]	; (8029f64 <lwip_netconn_do_delconn+0x1c8>)
 8029ed8:	f00e faf6 	bl	80384c8 <sys_mutex_lock>
            LWIP_ASSERT("state!", msg->conn->state == NETCONN_NONE);
 8029edc:	68fb      	ldr	r3, [r7, #12]
 8029ede:	681b      	ldr	r3, [r3, #0]
 8029ee0:	785b      	ldrb	r3, [r3, #1]
 8029ee2:	2b00      	cmp	r3, #0
 8029ee4:	d02d      	beq.n	8029f42 <lwip_netconn_do_delconn+0x1a6>
 8029ee6:	4b19      	ldr	r3, [pc, #100]	; (8029f4c <lwip_netconn_do_delconn+0x1b0>)
 8029ee8:	f240 429e 	movw	r2, #1182	; 0x49e
 8029eec:	491c      	ldr	r1, [pc, #112]	; (8029f60 <lwip_netconn_do_delconn+0x1c4>)
 8029eee:	4819      	ldr	r0, [pc, #100]	; (8029f54 <lwip_netconn_do_delconn+0x1b8>)
 8029ef0:	f00f f8ba 	bl	8039068 <iprintf>
#else /* LWIP_TCPIP_CORE_LOCKING */
          lwip_netconn_do_close_internal(msg->conn);
#endif /* LWIP_TCPIP_CORE_LOCKING */
          /* API_EVENT is called inside lwip_netconn_do_close_internal, before releasing
             the application thread, so we can return at this point! */
          return;
 8029ef4:	e025      	b.n	8029f42 <lwip_netconn_do_delconn+0x1a6>
#endif /* LWIP_TCP */
        default:
          break;
 8029ef6:	bf00      	nop
      }
      msg->conn->pcb.tcp = NULL;
 8029ef8:	68fb      	ldr	r3, [r7, #12]
 8029efa:	681b      	ldr	r3, [r3, #0]
 8029efc:	2200      	movs	r2, #0
 8029efe:	605a      	str	r2, [r3, #4]
    }
    /* tcp netconns don't come here! */

    /* @todo: this lets select make the socket readable and writable,
       which is wrong! errfd instead? */
    API_EVENT(msg->conn, NETCONN_EVT_RCVPLUS, 0);
 8029f00:	68fb      	ldr	r3, [r7, #12]
 8029f02:	681b      	ldr	r3, [r3, #0]
 8029f04:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8029f06:	2b00      	cmp	r3, #0
 8029f08:	d007      	beq.n	8029f1a <lwip_netconn_do_delconn+0x17e>
 8029f0a:	68fb      	ldr	r3, [r7, #12]
 8029f0c:	681b      	ldr	r3, [r3, #0]
 8029f0e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8029f10:	68fa      	ldr	r2, [r7, #12]
 8029f12:	6810      	ldr	r0, [r2, #0]
 8029f14:	2200      	movs	r2, #0
 8029f16:	2100      	movs	r1, #0
 8029f18:	4798      	blx	r3
    API_EVENT(msg->conn, NETCONN_EVT_SENDPLUS, 0);
 8029f1a:	68fb      	ldr	r3, [r7, #12]
 8029f1c:	681b      	ldr	r3, [r3, #0]
 8029f1e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8029f20:	2b00      	cmp	r3, #0
 8029f22:	d007      	beq.n	8029f34 <lwip_netconn_do_delconn+0x198>
 8029f24:	68fb      	ldr	r3, [r7, #12]
 8029f26:	681b      	ldr	r3, [r3, #0]
 8029f28:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8029f2a:	68fa      	ldr	r2, [r7, #12]
 8029f2c:	6810      	ldr	r0, [r2, #0]
 8029f2e:	2200      	movs	r2, #0
 8029f30:	2102      	movs	r1, #2
 8029f32:	4798      	blx	r3
  }
  if (sys_sem_valid(LWIP_API_MSG_SEM(msg))) {
 8029f34:	68fb      	ldr	r3, [r7, #12]
 8029f36:	681b      	ldr	r3, [r3, #0]
 8029f38:	330c      	adds	r3, #12
 8029f3a:	4618      	mov	r0, r3
 8029f3c:	f00e fa5c 	bl	80383f8 <sys_sem_valid>
 8029f40:	e000      	b.n	8029f44 <lwip_netconn_do_delconn+0x1a8>
          return;
 8029f42:	bf00      	nop
    TCPIP_APIMSG_ACK(msg);
  }
}
 8029f44:	3710      	adds	r7, #16
 8029f46:	46bd      	mov	sp, r7
 8029f48:	bd80      	pop	{r7, pc}
 8029f4a:	bf00      	nop
 8029f4c:	08039f0c 	.word	0x08039f0c
 8029f50:	0803a27c 	.word	0x0803a27c
 8029f54:	08039f50 	.word	0x08039f50
 8029f58:	0803a290 	.word	0x0803a290
 8029f5c:	0803a2b0 	.word	0x0803a2b0
 8029f60:	0803a2cc 	.word	0x0803a2cc
 8029f64:	2000b31c 	.word	0x2000b31c

08029f68 <lwip_netconn_do_bind>:
 * @param m the api_msg pointing to the connection and containing
 *          the IP address and port to bind to
 */
void
lwip_netconn_do_bind(void *m)
{
 8029f68:	b580      	push	{r7, lr}
 8029f6a:	b084      	sub	sp, #16
 8029f6c:	af00      	add	r7, sp, #0
 8029f6e:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 8029f70:	687b      	ldr	r3, [r7, #4]
 8029f72:	60bb      	str	r3, [r7, #8]
  err_t err;

  if (msg->conn->pcb.tcp != NULL) {
 8029f74:	68bb      	ldr	r3, [r7, #8]
 8029f76:	681b      	ldr	r3, [r3, #0]
 8029f78:	685b      	ldr	r3, [r3, #4]
 8029f7a:	2b00      	cmp	r3, #0
 8029f7c:	d025      	beq.n	8029fca <lwip_netconn_do_bind+0x62>
    switch (NETCONNTYPE_GROUP(msg->conn->type)) {
 8029f7e:	68bb      	ldr	r3, [r7, #8]
 8029f80:	681b      	ldr	r3, [r3, #0]
 8029f82:	781b      	ldrb	r3, [r3, #0]
 8029f84:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8029f88:	2b10      	cmp	r3, #16
 8029f8a:	d00e      	beq.n	8029faa <lwip_netconn_do_bind+0x42>
 8029f8c:	2b20      	cmp	r3, #32
 8029f8e:	d119      	bne.n	8029fc4 <lwip_netconn_do_bind+0x5c>
        err = raw_bind(msg->conn->pcb.raw, API_EXPR_REF(msg->msg.bc.ipaddr));
        break;
#endif /* LWIP_RAW */
#if LWIP_UDP
      case NETCONN_UDP:
        err = udp_bind(msg->conn->pcb.udp, API_EXPR_REF(msg->msg.bc.ipaddr), msg->msg.bc.port);
 8029f90:	68bb      	ldr	r3, [r7, #8]
 8029f92:	681b      	ldr	r3, [r3, #0]
 8029f94:	6858      	ldr	r0, [r3, #4]
 8029f96:	68bb      	ldr	r3, [r7, #8]
 8029f98:	6899      	ldr	r1, [r3, #8]
 8029f9a:	68bb      	ldr	r3, [r7, #8]
 8029f9c:	899b      	ldrh	r3, [r3, #12]
 8029f9e:	461a      	mov	r2, r3
 8029fa0:	f00b fb3e 	bl	8035620 <udp_bind>
 8029fa4:	4603      	mov	r3, r0
 8029fa6:	73fb      	strb	r3, [r7, #15]
        break;
 8029fa8:	e011      	b.n	8029fce <lwip_netconn_do_bind+0x66>
#endif /* LWIP_UDP */
#if LWIP_TCP
      case NETCONN_TCP:
        err = tcp_bind(msg->conn->pcb.tcp, API_EXPR_REF(msg->msg.bc.ipaddr), msg->msg.bc.port);
 8029faa:	68bb      	ldr	r3, [r7, #8]
 8029fac:	681b      	ldr	r3, [r3, #0]
 8029fae:	6858      	ldr	r0, [r3, #4]
 8029fb0:	68bb      	ldr	r3, [r7, #8]
 8029fb2:	6899      	ldr	r1, [r3, #8]
 8029fb4:	68bb      	ldr	r3, [r7, #8]
 8029fb6:	899b      	ldrh	r3, [r3, #12]
 8029fb8:	461a      	mov	r2, r3
 8029fba:	f004 ffbb 	bl	802ef34 <tcp_bind>
 8029fbe:	4603      	mov	r3, r0
 8029fc0:	73fb      	strb	r3, [r7, #15]
        break;
 8029fc2:	e004      	b.n	8029fce <lwip_netconn_do_bind+0x66>
#endif /* LWIP_TCP */
      default:
        err = ERR_VAL;
 8029fc4:	23fa      	movs	r3, #250	; 0xfa
 8029fc6:	73fb      	strb	r3, [r7, #15]
        break;
 8029fc8:	e001      	b.n	8029fce <lwip_netconn_do_bind+0x66>
    }
  } else {
    err = ERR_VAL;
 8029fca:	23fa      	movs	r3, #250	; 0xfa
 8029fcc:	73fb      	strb	r3, [r7, #15]
  }
  msg->err = err;
 8029fce:	68bb      	ldr	r3, [r7, #8]
 8029fd0:	7bfa      	ldrb	r2, [r7, #15]
 8029fd2:	711a      	strb	r2, [r3, #4]
  TCPIP_APIMSG_ACK(msg);
}
 8029fd4:	bf00      	nop
 8029fd6:	3710      	adds	r7, #16
 8029fd8:	46bd      	mov	sp, r7
 8029fda:	bd80      	pop	{r7, pc}

08029fdc <lwip_netconn_do_listen>:
 *
 * @param m the api_msg pointing to the connection
 */
void
lwip_netconn_do_listen(void *m)
{
 8029fdc:	b580      	push	{r7, lr}
 8029fde:	b086      	sub	sp, #24
 8029fe0:	af00      	add	r7, sp, #0
 8029fe2:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 8029fe4:	687b      	ldr	r3, [r7, #4]
 8029fe6:	617b      	str	r3, [r7, #20]
  err_t err;

  if (msg->conn->pcb.tcp != NULL) {
 8029fe8:	697b      	ldr	r3, [r7, #20]
 8029fea:	681b      	ldr	r3, [r3, #0]
 8029fec:	685b      	ldr	r3, [r3, #4]
 8029fee:	2b00      	cmp	r3, #0
 8029ff0:	d07f      	beq.n	802a0f2 <lwip_netconn_do_listen+0x116>
    if (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) {
 8029ff2:	697b      	ldr	r3, [r7, #20]
 8029ff4:	681b      	ldr	r3, [r3, #0]
 8029ff6:	781b      	ldrb	r3, [r3, #0]
 8029ff8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8029ffc:	2b10      	cmp	r3, #16
 8029ffe:	d175      	bne.n	802a0ec <lwip_netconn_do_listen+0x110>
      if (msg->conn->state == NETCONN_NONE) {
 802a000:	697b      	ldr	r3, [r7, #20]
 802a002:	681b      	ldr	r3, [r3, #0]
 802a004:	785b      	ldrb	r3, [r3, #1]
 802a006:	2b00      	cmp	r3, #0
 802a008:	d165      	bne.n	802a0d6 <lwip_netconn_do_listen+0xfa>
        struct tcp_pcb *lpcb;
        if (msg->conn->pcb.tcp->state != CLOSED) {
 802a00a:	697b      	ldr	r3, [r7, #20]
 802a00c:	681b      	ldr	r3, [r3, #0]
 802a00e:	685b      	ldr	r3, [r3, #4]
 802a010:	7d1b      	ldrb	r3, [r3, #20]
 802a012:	2b00      	cmp	r3, #0
 802a014:	d002      	beq.n	802a01c <lwip_netconn_do_listen+0x40>
          /* connection is not closed, cannot listen */
          err = ERR_VAL;
 802a016:	23fa      	movs	r3, #250	; 0xfa
 802a018:	72fb      	strb	r3, [r7, #11]
 802a01a:	e06c      	b.n	802a0f6 <lwip_netconn_do_listen+0x11a>
        } else {
          u8_t backlog;
#if TCP_LISTEN_BACKLOG
          backlog = msg->msg.lb.backlog;
#else  /* TCP_LISTEN_BACKLOG */
          backlog = TCP_DEFAULT_LISTEN_BACKLOG;
 802a01c:	23ff      	movs	r3, #255	; 0xff
 802a01e:	74fb      	strb	r3, [r7, #19]
            IP_SET_TYPE_VAL(msg->conn->pcb.tcp->local_ip,  IPADDR_TYPE_ANY);
            IP_SET_TYPE_VAL(msg->conn->pcb.tcp->remote_ip, IPADDR_TYPE_ANY);
          }
#endif /* LWIP_IPV4 && LWIP_IPV6 */

          lpcb = tcp_listen_with_backlog_and_err(msg->conn->pcb.tcp, backlog, &err);
 802a020:	697b      	ldr	r3, [r7, #20]
 802a022:	681b      	ldr	r3, [r3, #0]
 802a024:	685b      	ldr	r3, [r3, #4]
 802a026:	f107 020b 	add.w	r2, r7, #11
 802a02a:	7cf9      	ldrb	r1, [r7, #19]
 802a02c:	4618      	mov	r0, r3
 802a02e:	f005 f839 	bl	802f0a4 <tcp_listen_with_backlog_and_err>
 802a032:	60f8      	str	r0, [r7, #12]

          if (lpcb == NULL) {
 802a034:	68fb      	ldr	r3, [r7, #12]
 802a036:	2b00      	cmp	r3, #0
 802a038:	d05d      	beq.n	802a0f6 <lwip_netconn_do_listen+0x11a>
            /* in this case, the old pcb is still allocated */
          } else {
            /* delete the recvmbox and allocate the acceptmbox */
            if (sys_mbox_valid(&msg->conn->recvmbox)) {
 802a03a:	697b      	ldr	r3, [r7, #20]
 802a03c:	681b      	ldr	r3, [r3, #0]
 802a03e:	3310      	adds	r3, #16
 802a040:	4618      	mov	r0, r3
 802a042:	f00e f91c 	bl	803827e <sys_mbox_valid>
 802a046:	4603      	mov	r3, r0
 802a048:	2b00      	cmp	r3, #0
 802a04a:	d00b      	beq.n	802a064 <lwip_netconn_do_listen+0x88>
              /** @todo: should we drain the recvmbox here? */
              sys_mbox_free(&msg->conn->recvmbox);
 802a04c:	697b      	ldr	r3, [r7, #20]
 802a04e:	681b      	ldr	r3, [r3, #0]
 802a050:	3310      	adds	r3, #16
 802a052:	4618      	mov	r0, r3
 802a054:	f00e f86c 	bl	8038130 <sys_mbox_free>
              sys_mbox_set_invalid(&msg->conn->recvmbox);
 802a058:	697b      	ldr	r3, [r7, #20]
 802a05a:	681b      	ldr	r3, [r3, #0]
 802a05c:	3310      	adds	r3, #16
 802a05e:	4618      	mov	r0, r3
 802a060:	f00e f91e 	bl	80382a0 <sys_mbox_set_invalid>
            }
            err = ERR_OK;
 802a064:	2300      	movs	r3, #0
 802a066:	72fb      	strb	r3, [r7, #11]
            if (!sys_mbox_valid(&msg->conn->acceptmbox)) {
 802a068:	697b      	ldr	r3, [r7, #20]
 802a06a:	681b      	ldr	r3, [r3, #0]
 802a06c:	3314      	adds	r3, #20
 802a06e:	4618      	mov	r0, r3
 802a070:	f00e f905 	bl	803827e <sys_mbox_valid>
 802a074:	4603      	mov	r3, r0
 802a076:	2b00      	cmp	r3, #0
 802a078:	d108      	bne.n	802a08c <lwip_netconn_do_listen+0xb0>
              err = sys_mbox_new(&msg->conn->acceptmbox, DEFAULT_ACCEPTMBOX_SIZE);
 802a07a:	697b      	ldr	r3, [r7, #20]
 802a07c:	681b      	ldr	r3, [r3, #0]
 802a07e:	3314      	adds	r3, #20
 802a080:	2106      	movs	r1, #6
 802a082:	4618      	mov	r0, r3
 802a084:	f00e f81a 	bl	80380bc <sys_mbox_new>
 802a088:	4603      	mov	r3, r0
 802a08a:	72fb      	strb	r3, [r7, #11]
            }
            if (err == ERR_OK) {
 802a08c:	f997 300b 	ldrsb.w	r3, [r7, #11]
 802a090:	2b00      	cmp	r3, #0
 802a092:	d118      	bne.n	802a0c6 <lwip_netconn_do_listen+0xea>
              msg->conn->state = NETCONN_LISTEN;
 802a094:	697b      	ldr	r3, [r7, #20]
 802a096:	681b      	ldr	r3, [r3, #0]
 802a098:	2202      	movs	r2, #2
 802a09a:	705a      	strb	r2, [r3, #1]
              msg->conn->pcb.tcp = lpcb;
 802a09c:	697b      	ldr	r3, [r7, #20]
 802a09e:	681b      	ldr	r3, [r3, #0]
 802a0a0:	68fa      	ldr	r2, [r7, #12]
 802a0a2:	605a      	str	r2, [r3, #4]
              tcp_arg(msg->conn->pcb.tcp, msg->conn);
 802a0a4:	697b      	ldr	r3, [r7, #20]
 802a0a6:	681b      	ldr	r3, [r3, #0]
 802a0a8:	685a      	ldr	r2, [r3, #4]
 802a0aa:	697b      	ldr	r3, [r7, #20]
 802a0ac:	681b      	ldr	r3, [r3, #0]
 802a0ae:	4619      	mov	r1, r3
 802a0b0:	4610      	mov	r0, r2
 802a0b2:	f005 ffeb 	bl	803008c <tcp_arg>
              tcp_accept(msg->conn->pcb.tcp, accept_function);
 802a0b6:	697b      	ldr	r3, [r7, #20]
 802a0b8:	681b      	ldr	r3, [r3, #0]
 802a0ba:	685b      	ldr	r3, [r3, #4]
 802a0bc:	4912      	ldr	r1, [pc, #72]	; (802a108 <lwip_netconn_do_listen+0x12c>)
 802a0be:	4618      	mov	r0, r3
 802a0c0:	f006 f85c 	bl	803017c <tcp_accept>
 802a0c4:	e017      	b.n	802a0f6 <lwip_netconn_do_listen+0x11a>
            } else {
              /* since the old pcb is already deallocated, free lpcb now */
              tcp_close(lpcb);
 802a0c6:	68f8      	ldr	r0, [r7, #12]
 802a0c8:	f004 fde2 	bl	802ec90 <tcp_close>
              msg->conn->pcb.tcp = NULL;
 802a0cc:	697b      	ldr	r3, [r7, #20]
 802a0ce:	681b      	ldr	r3, [r3, #0]
 802a0d0:	2200      	movs	r2, #0
 802a0d2:	605a      	str	r2, [r3, #4]
 802a0d4:	e00f      	b.n	802a0f6 <lwip_netconn_do_listen+0x11a>
            }
          }
        }
      } else if (msg->conn->state == NETCONN_LISTEN) {
 802a0d6:	697b      	ldr	r3, [r7, #20]
 802a0d8:	681b      	ldr	r3, [r3, #0]
 802a0da:	785b      	ldrb	r3, [r3, #1]
 802a0dc:	2b02      	cmp	r3, #2
 802a0de:	d102      	bne.n	802a0e6 <lwip_netconn_do_listen+0x10a>
        /* already listening, allow updating of the backlog */
        err = ERR_OK;
 802a0e0:	2300      	movs	r3, #0
 802a0e2:	72fb      	strb	r3, [r7, #11]
 802a0e4:	e007      	b.n	802a0f6 <lwip_netconn_do_listen+0x11a>
        tcp_backlog_set(msg->conn->pcb.tcp, msg->msg.lb.backlog);
      } else {
        err = ERR_CONN;
 802a0e6:	23f5      	movs	r3, #245	; 0xf5
 802a0e8:	72fb      	strb	r3, [r7, #11]
 802a0ea:	e004      	b.n	802a0f6 <lwip_netconn_do_listen+0x11a>
      }
    } else {
      err = ERR_ARG;
 802a0ec:	23f0      	movs	r3, #240	; 0xf0
 802a0ee:	72fb      	strb	r3, [r7, #11]
 802a0f0:	e001      	b.n	802a0f6 <lwip_netconn_do_listen+0x11a>
    }
  } else {
    err = ERR_CONN;
 802a0f2:	23f5      	movs	r3, #245	; 0xf5
 802a0f4:	72fb      	strb	r3, [r7, #11]
  }
  msg->err = err;
 802a0f6:	f997 200b 	ldrsb.w	r2, [r7, #11]
 802a0fa:	697b      	ldr	r3, [r7, #20]
 802a0fc:	711a      	strb	r2, [r3, #4]
  TCPIP_APIMSG_ACK(msg);
}
 802a0fe:	bf00      	nop
 802a100:	3718      	adds	r7, #24
 802a102:	46bd      	mov	sp, r7
 802a104:	bd80      	pop	{r7, pc}
 802a106:	bf00      	nop
 802a108:	080295dd 	.word	0x080295dd

0802a10c <lwip_netconn_do_send>:
 *
 * @param m the api_msg pointing to the connection
 */
void
lwip_netconn_do_send(void *m)
{
 802a10c:	b580      	push	{r7, lr}
 802a10e:	b084      	sub	sp, #16
 802a110:	af00      	add	r7, sp, #0
 802a112:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 802a114:	687b      	ldr	r3, [r7, #4]
 802a116:	60bb      	str	r3, [r7, #8]

  err_t err = netconn_err(msg->conn);
 802a118:	68bb      	ldr	r3, [r7, #8]
 802a11a:	681b      	ldr	r3, [r3, #0]
 802a11c:	4618      	mov	r0, r3
 802a11e:	f7fe ff0d 	bl	8028f3c <netconn_err>
 802a122:	4603      	mov	r3, r0
 802a124:	73fb      	strb	r3, [r7, #15]
  if (err == ERR_OK) {
 802a126:	f997 300f 	ldrsb.w	r3, [r7, #15]
 802a12a:	2b00      	cmp	r3, #0
 802a12c:	d134      	bne.n	802a198 <lwip_netconn_do_send+0x8c>
    if (msg->conn->pcb.tcp != NULL) {
 802a12e:	68bb      	ldr	r3, [r7, #8]
 802a130:	681b      	ldr	r3, [r3, #0]
 802a132:	685b      	ldr	r3, [r3, #4]
 802a134:	2b00      	cmp	r3, #0
 802a136:	d02d      	beq.n	802a194 <lwip_netconn_do_send+0x88>
      switch (NETCONNTYPE_GROUP(msg->conn->type)) {
 802a138:	68bb      	ldr	r3, [r7, #8]
 802a13a:	681b      	ldr	r3, [r3, #0]
 802a13c:	781b      	ldrb	r3, [r3, #0]
 802a13e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 802a142:	2b20      	cmp	r3, #32
 802a144:	d123      	bne.n	802a18e <lwip_netconn_do_send+0x82>
            err = udp_sendto_chksum(msg->conn->pcb.udp, msg->msg.b->p,
                                    &msg->msg.b->addr, msg->msg.b->port,
                                    msg->msg.b->flags & NETBUF_FLAG_CHKSUM, msg->msg.b->toport_chksum);
          }
#else /* LWIP_CHECKSUM_ON_COPY */
          if (ip_addr_isany_val(msg->msg.b->addr) || IP_IS_ANY_TYPE_VAL(msg->msg.b->addr)) {
 802a146:	68bb      	ldr	r3, [r7, #8]
 802a148:	689b      	ldr	r3, [r3, #8]
 802a14a:	689b      	ldr	r3, [r3, #8]
 802a14c:	2b00      	cmp	r3, #0
 802a14e:	d10c      	bne.n	802a16a <lwip_netconn_do_send+0x5e>
            err = udp_send(msg->conn->pcb.udp, msg->msg.b->p);
 802a150:	68bb      	ldr	r3, [r7, #8]
 802a152:	681b      	ldr	r3, [r3, #0]
 802a154:	685a      	ldr	r2, [r3, #4]
 802a156:	68bb      	ldr	r3, [r7, #8]
 802a158:	689b      	ldr	r3, [r3, #8]
 802a15a:	681b      	ldr	r3, [r3, #0]
 802a15c:	4619      	mov	r1, r3
 802a15e:	4610      	mov	r0, r2
 802a160:	f00b f860 	bl	8035224 <udp_send>
 802a164:	4603      	mov	r3, r0
 802a166:	73fb      	strb	r3, [r7, #15]
          } else {
            err = udp_sendto(msg->conn->pcb.udp, msg->msg.b->p, &msg->msg.b->addr, msg->msg.b->port);
          }
#endif /* LWIP_CHECKSUM_ON_COPY */
          break;
 802a168:	e016      	b.n	802a198 <lwip_netconn_do_send+0x8c>
            err = udp_sendto(msg->conn->pcb.udp, msg->msg.b->p, &msg->msg.b->addr, msg->msg.b->port);
 802a16a:	68bb      	ldr	r3, [r7, #8]
 802a16c:	681b      	ldr	r3, [r3, #0]
 802a16e:	6858      	ldr	r0, [r3, #4]
 802a170:	68bb      	ldr	r3, [r7, #8]
 802a172:	689b      	ldr	r3, [r3, #8]
 802a174:	6819      	ldr	r1, [r3, #0]
 802a176:	68bb      	ldr	r3, [r7, #8]
 802a178:	689b      	ldr	r3, [r3, #8]
 802a17a:	f103 0208 	add.w	r2, r3, #8
 802a17e:	68bb      	ldr	r3, [r7, #8]
 802a180:	689b      	ldr	r3, [r3, #8]
 802a182:	899b      	ldrh	r3, [r3, #12]
 802a184:	f00b f882 	bl	803528c <udp_sendto>
 802a188:	4603      	mov	r3, r0
 802a18a:	73fb      	strb	r3, [r7, #15]
          break;
 802a18c:	e004      	b.n	802a198 <lwip_netconn_do_send+0x8c>
#endif /* LWIP_UDP */
        default:
          err = ERR_CONN;
 802a18e:	23f5      	movs	r3, #245	; 0xf5
 802a190:	73fb      	strb	r3, [r7, #15]
          break;
 802a192:	e001      	b.n	802a198 <lwip_netconn_do_send+0x8c>
      }
    } else {
      err = ERR_CONN;
 802a194:	23f5      	movs	r3, #245	; 0xf5
 802a196:	73fb      	strb	r3, [r7, #15]
    }
  }
  msg->err = err;
 802a198:	68bb      	ldr	r3, [r7, #8]
 802a19a:	7bfa      	ldrb	r2, [r7, #15]
 802a19c:	711a      	strb	r2, [r3, #4]
  TCPIP_APIMSG_ACK(msg);
}
 802a19e:	bf00      	nop
 802a1a0:	3710      	adds	r7, #16
 802a1a2:	46bd      	mov	sp, r7
 802a1a4:	bd80      	pop	{r7, pc}

0802a1a6 <lwip_netconn_do_recv>:
 *
 * @param m the api_msg pointing to the connection
 */
void
lwip_netconn_do_recv(void *m)
{
 802a1a6:	b580      	push	{r7, lr}
 802a1a8:	b086      	sub	sp, #24
 802a1aa:	af00      	add	r7, sp, #0
 802a1ac:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 802a1ae:	687b      	ldr	r3, [r7, #4]
 802a1b0:	613b      	str	r3, [r7, #16]

  msg->err = ERR_OK;
 802a1b2:	693b      	ldr	r3, [r7, #16]
 802a1b4:	2200      	movs	r2, #0
 802a1b6:	711a      	strb	r2, [r3, #4]
  if (msg->conn->pcb.tcp != NULL) {
 802a1b8:	693b      	ldr	r3, [r7, #16]
 802a1ba:	681b      	ldr	r3, [r3, #0]
 802a1bc:	685b      	ldr	r3, [r3, #4]
 802a1be:	2b00      	cmp	r3, #0
 802a1c0:	d022      	beq.n	802a208 <lwip_netconn_do_recv+0x62>
    if (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) {
 802a1c2:	693b      	ldr	r3, [r7, #16]
 802a1c4:	681b      	ldr	r3, [r3, #0]
 802a1c6:	781b      	ldrb	r3, [r3, #0]
 802a1c8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 802a1cc:	2b10      	cmp	r3, #16
 802a1ce:	d11b      	bne.n	802a208 <lwip_netconn_do_recv+0x62>
      size_t remaining = msg->msg.r.len;
 802a1d0:	693b      	ldr	r3, [r7, #16]
 802a1d2:	689b      	ldr	r3, [r3, #8]
 802a1d4:	617b      	str	r3, [r7, #20]
      do {
        u16_t recved = (u16_t)((remaining > 0xffff) ? 0xffff : remaining);
 802a1d6:	697b      	ldr	r3, [r7, #20]
 802a1d8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 802a1dc:	d202      	bcs.n	802a1e4 <lwip_netconn_do_recv+0x3e>
 802a1de:	697b      	ldr	r3, [r7, #20]
 802a1e0:	b29b      	uxth	r3, r3
 802a1e2:	e001      	b.n	802a1e8 <lwip_netconn_do_recv+0x42>
 802a1e4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 802a1e8:	81fb      	strh	r3, [r7, #14]
        tcp_recved(msg->conn->pcb.tcp, recved);
 802a1ea:	693b      	ldr	r3, [r7, #16]
 802a1ec:	681b      	ldr	r3, [r3, #0]
 802a1ee:	685b      	ldr	r3, [r3, #4]
 802a1f0:	89fa      	ldrh	r2, [r7, #14]
 802a1f2:	4611      	mov	r1, r2
 802a1f4:	4618      	mov	r0, r3
 802a1f6:	f005 f859 	bl	802f2ac <tcp_recved>
        remaining -= recved;
 802a1fa:	89fb      	ldrh	r3, [r7, #14]
 802a1fc:	697a      	ldr	r2, [r7, #20]
 802a1fe:	1ad3      	subs	r3, r2, r3
 802a200:	617b      	str	r3, [r7, #20]
      } while (remaining != 0);
 802a202:	697b      	ldr	r3, [r7, #20]
 802a204:	2b00      	cmp	r3, #0
 802a206:	d1e6      	bne.n	802a1d6 <lwip_netconn_do_recv+0x30>
    }
  }
  TCPIP_APIMSG_ACK(msg);
}
 802a208:	bf00      	nop
 802a20a:	3718      	adds	r7, #24
 802a20c:	46bd      	mov	sp, r7
 802a20e:	bd80      	pop	{r7, pc}

0802a210 <lwip_netconn_do_writemore>:
 * @return ERR_OK
 *         ERR_MEM if LWIP_TCPIP_CORE_LOCKING=1 and sending hasn't yet finished
 */
static err_t
lwip_netconn_do_writemore(struct netconn *conn  WRITE_DELAYED_PARAM)
{
 802a210:	b580      	push	{r7, lr}
 802a212:	b088      	sub	sp, #32
 802a214:	af00      	add	r7, sp, #0
 802a216:	6078      	str	r0, [r7, #4]
 802a218:	460b      	mov	r3, r1
 802a21a:	70fb      	strb	r3, [r7, #3]
  err_t err;
  const void *dataptr;
  u16_t len, available;
  u8_t write_finished = 0;
 802a21c:	2300      	movs	r3, #0
 802a21e:	76fb      	strb	r3, [r7, #27]
  size_t diff;
  u8_t dontblock;
  u8_t apiflags;
  u8_t write_more;

  LWIP_ASSERT("conn != NULL", conn != NULL);
 802a220:	687b      	ldr	r3, [r7, #4]
 802a222:	2b00      	cmp	r3, #0
 802a224:	d106      	bne.n	802a234 <lwip_netconn_do_writemore+0x24>
 802a226:	4b61      	ldr	r3, [pc, #388]	; (802a3ac <lwip_netconn_do_writemore+0x19c>)
 802a228:	f240 6273 	movw	r2, #1651	; 0x673
 802a22c:	4960      	ldr	r1, [pc, #384]	; (802a3b0 <lwip_netconn_do_writemore+0x1a0>)
 802a22e:	4861      	ldr	r0, [pc, #388]	; (802a3b4 <lwip_netconn_do_writemore+0x1a4>)
 802a230:	f00e ff1a 	bl	8039068 <iprintf>
  LWIP_ASSERT("conn->state == NETCONN_WRITE", (conn->state == NETCONN_WRITE));
 802a234:	687b      	ldr	r3, [r7, #4]
 802a236:	785b      	ldrb	r3, [r3, #1]
 802a238:	2b01      	cmp	r3, #1
 802a23a:	d006      	beq.n	802a24a <lwip_netconn_do_writemore+0x3a>
 802a23c:	4b5b      	ldr	r3, [pc, #364]	; (802a3ac <lwip_netconn_do_writemore+0x19c>)
 802a23e:	f240 6274 	movw	r2, #1652	; 0x674
 802a242:	495d      	ldr	r1, [pc, #372]	; (802a3b8 <lwip_netconn_do_writemore+0x1a8>)
 802a244:	485b      	ldr	r0, [pc, #364]	; (802a3b4 <lwip_netconn_do_writemore+0x1a4>)
 802a246:	f00e ff0f 	bl	8039068 <iprintf>
  LWIP_ASSERT("conn->current_msg != NULL", conn->current_msg != NULL);
 802a24a:	687b      	ldr	r3, [r7, #4]
 802a24c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 802a24e:	2b00      	cmp	r3, #0
 802a250:	d106      	bne.n	802a260 <lwip_netconn_do_writemore+0x50>
 802a252:	4b56      	ldr	r3, [pc, #344]	; (802a3ac <lwip_netconn_do_writemore+0x19c>)
 802a254:	f240 6275 	movw	r2, #1653	; 0x675
 802a258:	4958      	ldr	r1, [pc, #352]	; (802a3bc <lwip_netconn_do_writemore+0x1ac>)
 802a25a:	4856      	ldr	r0, [pc, #344]	; (802a3b4 <lwip_netconn_do_writemore+0x1a4>)
 802a25c:	f00e ff04 	bl	8039068 <iprintf>
  LWIP_ASSERT("conn->pcb.tcp != NULL", conn->pcb.tcp != NULL);
 802a260:	687b      	ldr	r3, [r7, #4]
 802a262:	685b      	ldr	r3, [r3, #4]
 802a264:	2b00      	cmp	r3, #0
 802a266:	d106      	bne.n	802a276 <lwip_netconn_do_writemore+0x66>
 802a268:	4b50      	ldr	r3, [pc, #320]	; (802a3ac <lwip_netconn_do_writemore+0x19c>)
 802a26a:	f240 6276 	movw	r2, #1654	; 0x676
 802a26e:	4954      	ldr	r1, [pc, #336]	; (802a3c0 <lwip_netconn_do_writemore+0x1b0>)
 802a270:	4850      	ldr	r0, [pc, #320]	; (802a3b4 <lwip_netconn_do_writemore+0x1a4>)
 802a272:	f00e fef9 	bl	8039068 <iprintf>
  LWIP_ASSERT("conn->current_msg->msg.w.offset < conn->current_msg->msg.w.len",
 802a276:	687b      	ldr	r3, [r7, #4]
 802a278:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 802a27a:	699a      	ldr	r2, [r3, #24]
 802a27c:	687b      	ldr	r3, [r7, #4]
 802a27e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 802a280:	695b      	ldr	r3, [r3, #20]
 802a282:	429a      	cmp	r2, r3
 802a284:	d306      	bcc.n	802a294 <lwip_netconn_do_writemore+0x84>
 802a286:	4b49      	ldr	r3, [pc, #292]	; (802a3ac <lwip_netconn_do_writemore+0x19c>)
 802a288:	f240 6277 	movw	r2, #1655	; 0x677
 802a28c:	494d      	ldr	r1, [pc, #308]	; (802a3c4 <lwip_netconn_do_writemore+0x1b4>)
 802a28e:	4849      	ldr	r0, [pc, #292]	; (802a3b4 <lwip_netconn_do_writemore+0x1a4>)
 802a290:	f00e feea 	bl	8039068 <iprintf>
              conn->current_msg->msg.w.offset < conn->current_msg->msg.w.len);
  LWIP_ASSERT("conn->current_msg->msg.w.vector_cnt > 0", conn->current_msg->msg.w.vector_cnt > 0);
 802a294:	687b      	ldr	r3, [r7, #4]
 802a296:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 802a298:	899b      	ldrh	r3, [r3, #12]
 802a29a:	2b00      	cmp	r3, #0
 802a29c:	d106      	bne.n	802a2ac <lwip_netconn_do_writemore+0x9c>
 802a29e:	4b43      	ldr	r3, [pc, #268]	; (802a3ac <lwip_netconn_do_writemore+0x19c>)
 802a2a0:	f240 6279 	movw	r2, #1657	; 0x679
 802a2a4:	4948      	ldr	r1, [pc, #288]	; (802a3c8 <lwip_netconn_do_writemore+0x1b8>)
 802a2a6:	4843      	ldr	r0, [pc, #268]	; (802a3b4 <lwip_netconn_do_writemore+0x1a4>)
 802a2a8:	f00e fede 	bl	8039068 <iprintf>

  apiflags = conn->current_msg->msg.w.apiflags;
 802a2ac:	687b      	ldr	r3, [r7, #4]
 802a2ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 802a2b0:	7f1b      	ldrb	r3, [r3, #28]
 802a2b2:	76bb      	strb	r3, [r7, #26]
  dontblock = netconn_is_nonblocking(conn) || (apiflags & NETCONN_DONTBLOCK);
 802a2b4:	687b      	ldr	r3, [r7, #4]
 802a2b6:	f893 3020 	ldrb.w	r3, [r3, #32]
 802a2ba:	f003 0302 	and.w	r3, r3, #2
 802a2be:	2b00      	cmp	r3, #0
 802a2c0:	d104      	bne.n	802a2cc <lwip_netconn_do_writemore+0xbc>
 802a2c2:	7ebb      	ldrb	r3, [r7, #26]
 802a2c4:	f003 0304 	and.w	r3, r3, #4
 802a2c8:	2b00      	cmp	r3, #0
 802a2ca:	d001      	beq.n	802a2d0 <lwip_netconn_do_writemore+0xc0>
 802a2cc:	2301      	movs	r3, #1
 802a2ce:	e000      	b.n	802a2d2 <lwip_netconn_do_writemore+0xc2>
 802a2d0:	2300      	movs	r3, #0
 802a2d2:	763b      	strb	r3, [r7, #24]
    }
  } else
#endif /* LWIP_SO_SNDTIMEO */
  {
    do {
      dataptr = (const u8_t *)conn->current_msg->msg.w.vector->ptr + conn->current_msg->msg.w.vector_off;
 802a2d4:	687b      	ldr	r3, [r7, #4]
 802a2d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 802a2d8:	689b      	ldr	r3, [r3, #8]
 802a2da:	681a      	ldr	r2, [r3, #0]
 802a2dc:	687b      	ldr	r3, [r7, #4]
 802a2de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 802a2e0:	691b      	ldr	r3, [r3, #16]
 802a2e2:	4413      	add	r3, r2
 802a2e4:	617b      	str	r3, [r7, #20]
      diff = conn->current_msg->msg.w.vector->len - conn->current_msg->msg.w.vector_off;
 802a2e6:	687b      	ldr	r3, [r7, #4]
 802a2e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 802a2ea:	689b      	ldr	r3, [r3, #8]
 802a2ec:	685a      	ldr	r2, [r3, #4]
 802a2ee:	687b      	ldr	r3, [r7, #4]
 802a2f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 802a2f2:	691b      	ldr	r3, [r3, #16]
 802a2f4:	1ad3      	subs	r3, r2, r3
 802a2f6:	613b      	str	r3, [r7, #16]
      if (diff > 0xffffUL) { /* max_u16_t */
 802a2f8:	693b      	ldr	r3, [r7, #16]
 802a2fa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 802a2fe:	d307      	bcc.n	802a310 <lwip_netconn_do_writemore+0x100>
        len = 0xffff;
 802a300:	f64f 73ff 	movw	r3, #65535	; 0xffff
 802a304:	83bb      	strh	r3, [r7, #28]
        apiflags |= TCP_WRITE_FLAG_MORE;
 802a306:	7ebb      	ldrb	r3, [r7, #26]
 802a308:	f043 0302 	orr.w	r3, r3, #2
 802a30c:	76bb      	strb	r3, [r7, #26]
 802a30e:	e001      	b.n	802a314 <lwip_netconn_do_writemore+0x104>
      } else {
        len = (u16_t)diff;
 802a310:	693b      	ldr	r3, [r7, #16]
 802a312:	83bb      	strh	r3, [r7, #28]
      }
      available = tcp_sndbuf(conn->pcb.tcp);
 802a314:	687b      	ldr	r3, [r7, #4]
 802a316:	685b      	ldr	r3, [r3, #4]
 802a318:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 802a31c:	81fb      	strh	r3, [r7, #14]
      if (available < len) {
 802a31e:	89fa      	ldrh	r2, [r7, #14]
 802a320:	8bbb      	ldrh	r3, [r7, #28]
 802a322:	429a      	cmp	r2, r3
 802a324:	d216      	bcs.n	802a354 <lwip_netconn_do_writemore+0x144>
        /* don't try to write more than sendbuf */
        len = available;
 802a326:	89fb      	ldrh	r3, [r7, #14]
 802a328:	83bb      	strh	r3, [r7, #28]
        if (dontblock) {
 802a32a:	7e3b      	ldrb	r3, [r7, #24]
 802a32c:	2b00      	cmp	r3, #0
 802a32e:	d00d      	beq.n	802a34c <lwip_netconn_do_writemore+0x13c>
          if (!len) {
 802a330:	8bbb      	ldrh	r3, [r7, #28]
 802a332:	2b00      	cmp	r3, #0
 802a334:	d10e      	bne.n	802a354 <lwip_netconn_do_writemore+0x144>
            /* set error according to partial write or not */
            err = (conn->current_msg->msg.w.offset == 0) ? ERR_WOULDBLOCK : ERR_OK;
 802a336:	687b      	ldr	r3, [r7, #4]
 802a338:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 802a33a:	699b      	ldr	r3, [r3, #24]
 802a33c:	2b00      	cmp	r3, #0
 802a33e:	d102      	bne.n	802a346 <lwip_netconn_do_writemore+0x136>
 802a340:	f06f 0306 	mvn.w	r3, #6
 802a344:	e000      	b.n	802a348 <lwip_netconn_do_writemore+0x138>
 802a346:	2300      	movs	r3, #0
 802a348:	77fb      	strb	r3, [r7, #31]
            goto err_mem;
 802a34a:	e08f      	b.n	802a46c <lwip_netconn_do_writemore+0x25c>
          }
        } else {
          apiflags |= TCP_WRITE_FLAG_MORE;
 802a34c:	7ebb      	ldrb	r3, [r7, #26]
 802a34e:	f043 0302 	orr.w	r3, r3, #2
 802a352:	76bb      	strb	r3, [r7, #26]
        }
      }
      LWIP_ASSERT("lwip_netconn_do_writemore: invalid length!",
 802a354:	687b      	ldr	r3, [r7, #4]
 802a356:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 802a358:	691a      	ldr	r2, [r3, #16]
 802a35a:	8bbb      	ldrh	r3, [r7, #28]
 802a35c:	441a      	add	r2, r3
 802a35e:	687b      	ldr	r3, [r7, #4]
 802a360:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 802a362:	689b      	ldr	r3, [r3, #8]
 802a364:	685b      	ldr	r3, [r3, #4]
 802a366:	429a      	cmp	r2, r3
 802a368:	d906      	bls.n	802a378 <lwip_netconn_do_writemore+0x168>
 802a36a:	4b10      	ldr	r3, [pc, #64]	; (802a3ac <lwip_netconn_do_writemore+0x19c>)
 802a36c:	f240 62a3 	movw	r2, #1699	; 0x6a3
 802a370:	4916      	ldr	r1, [pc, #88]	; (802a3cc <lwip_netconn_do_writemore+0x1bc>)
 802a372:	4810      	ldr	r0, [pc, #64]	; (802a3b4 <lwip_netconn_do_writemore+0x1a4>)
 802a374:	f00e fe78 	bl	8039068 <iprintf>
                  ((conn->current_msg->msg.w.vector_off + len) <= conn->current_msg->msg.w.vector->len));
      /* we should loop around for more sending in the following cases:
           1) We couldn't finish the current vector because of 16-bit size limitations.
              tcp_write() and tcp_sndbuf() both are limited to 16-bit sizes
           2) We are sending the remainder of the current vector and have more */
      if ((len == 0xffff && diff > 0xffffUL) ||
 802a378:	8bbb      	ldrh	r3, [r7, #28]
 802a37a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 802a37e:	4293      	cmp	r3, r2
 802a380:	d103      	bne.n	802a38a <lwip_netconn_do_writemore+0x17a>
 802a382:	693b      	ldr	r3, [r7, #16]
 802a384:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 802a388:	d209      	bcs.n	802a39e <lwip_netconn_do_writemore+0x18e>
          (len == (u16_t)diff && conn->current_msg->msg.w.vector_cnt > 1)) {
 802a38a:	693b      	ldr	r3, [r7, #16]
 802a38c:	b29b      	uxth	r3, r3
      if ((len == 0xffff && diff > 0xffffUL) ||
 802a38e:	8bba      	ldrh	r2, [r7, #28]
 802a390:	429a      	cmp	r2, r3
 802a392:	d11d      	bne.n	802a3d0 <lwip_netconn_do_writemore+0x1c0>
          (len == (u16_t)diff && conn->current_msg->msg.w.vector_cnt > 1)) {
 802a394:	687b      	ldr	r3, [r7, #4]
 802a396:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 802a398:	899b      	ldrh	r3, [r3, #12]
 802a39a:	2b01      	cmp	r3, #1
 802a39c:	d918      	bls.n	802a3d0 <lwip_netconn_do_writemore+0x1c0>
        write_more = 1;
 802a39e:	2301      	movs	r3, #1
 802a3a0:	767b      	strb	r3, [r7, #25]
        apiflags |= TCP_WRITE_FLAG_MORE;
 802a3a2:	7ebb      	ldrb	r3, [r7, #26]
 802a3a4:	f043 0302 	orr.w	r3, r3, #2
 802a3a8:	76bb      	strb	r3, [r7, #26]
 802a3aa:	e013      	b.n	802a3d4 <lwip_netconn_do_writemore+0x1c4>
 802a3ac:	08039f0c 	.word	0x08039f0c
 802a3b0:	0803a064 	.word	0x0803a064
 802a3b4:	08039f50 	.word	0x08039f50
 802a3b8:	0803a36c 	.word	0x0803a36c
 802a3bc:	0803a074 	.word	0x0803a074
 802a3c0:	0803a38c 	.word	0x0803a38c
 802a3c4:	0803a3a4 	.word	0x0803a3a4
 802a3c8:	0803a3e4 	.word	0x0803a3e4
 802a3cc:	0803a40c 	.word	0x0803a40c
      } else {
        write_more = 0;
 802a3d0:	2300      	movs	r3, #0
 802a3d2:	767b      	strb	r3, [r7, #25]
      }
      err = tcp_write(conn->pcb.tcp, dataptr, len, apiflags);
 802a3d4:	687b      	ldr	r3, [r7, #4]
 802a3d6:	6858      	ldr	r0, [r3, #4]
 802a3d8:	7ebb      	ldrb	r3, [r7, #26]
 802a3da:	8bba      	ldrh	r2, [r7, #28]
 802a3dc:	6979      	ldr	r1, [r7, #20]
 802a3de:	f008 fe11 	bl	8033004 <tcp_write>
 802a3e2:	4603      	mov	r3, r0
 802a3e4:	77fb      	strb	r3, [r7, #31]
      if (err == ERR_OK) {
 802a3e6:	f997 301f 	ldrsb.w	r3, [r7, #31]
 802a3ea:	2b00      	cmp	r3, #0
 802a3ec:	d12c      	bne.n	802a448 <lwip_netconn_do_writemore+0x238>
        conn->current_msg->msg.w.offset += len;
 802a3ee:	687b      	ldr	r3, [r7, #4]
 802a3f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 802a3f2:	6999      	ldr	r1, [r3, #24]
 802a3f4:	8bba      	ldrh	r2, [r7, #28]
 802a3f6:	687b      	ldr	r3, [r7, #4]
 802a3f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 802a3fa:	440a      	add	r2, r1
 802a3fc:	619a      	str	r2, [r3, #24]
        conn->current_msg->msg.w.vector_off += len;
 802a3fe:	687b      	ldr	r3, [r7, #4]
 802a400:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 802a402:	6919      	ldr	r1, [r3, #16]
 802a404:	8bba      	ldrh	r2, [r7, #28]
 802a406:	687b      	ldr	r3, [r7, #4]
 802a408:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 802a40a:	440a      	add	r2, r1
 802a40c:	611a      	str	r2, [r3, #16]
        /* check if current vector is finished */
        if (conn->current_msg->msg.w.vector_off == conn->current_msg->msg.w.vector->len) {
 802a40e:	687b      	ldr	r3, [r7, #4]
 802a410:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 802a412:	691a      	ldr	r2, [r3, #16]
 802a414:	687b      	ldr	r3, [r7, #4]
 802a416:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 802a418:	689b      	ldr	r3, [r3, #8]
 802a41a:	685b      	ldr	r3, [r3, #4]
 802a41c:	429a      	cmp	r2, r3
 802a41e:	d113      	bne.n	802a448 <lwip_netconn_do_writemore+0x238>
          conn->current_msg->msg.w.vector_cnt--;
 802a420:	687b      	ldr	r3, [r7, #4]
 802a422:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 802a424:	899a      	ldrh	r2, [r3, #12]
 802a426:	3a01      	subs	r2, #1
 802a428:	b292      	uxth	r2, r2
 802a42a:	819a      	strh	r2, [r3, #12]
          /* if we have additional vectors, move on to them */
          if (conn->current_msg->msg.w.vector_cnt > 0) {
 802a42c:	687b      	ldr	r3, [r7, #4]
 802a42e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 802a430:	899b      	ldrh	r3, [r3, #12]
 802a432:	2b00      	cmp	r3, #0
 802a434:	d008      	beq.n	802a448 <lwip_netconn_do_writemore+0x238>
            conn->current_msg->msg.w.vector++;
 802a436:	687b      	ldr	r3, [r7, #4]
 802a438:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 802a43a:	689a      	ldr	r2, [r3, #8]
 802a43c:	3208      	adds	r2, #8
 802a43e:	609a      	str	r2, [r3, #8]
            conn->current_msg->msg.w.vector_off = 0;
 802a440:	687b      	ldr	r3, [r7, #4]
 802a442:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 802a444:	2200      	movs	r2, #0
 802a446:	611a      	str	r2, [r3, #16]
          }
        }
      }
    } while (write_more && err == ERR_OK);
 802a448:	7e7b      	ldrb	r3, [r7, #25]
 802a44a:	2b00      	cmp	r3, #0
 802a44c:	d004      	beq.n	802a458 <lwip_netconn_do_writemore+0x248>
 802a44e:	f997 301f 	ldrsb.w	r3, [r7, #31]
 802a452:	2b00      	cmp	r3, #0
 802a454:	f43f af3e 	beq.w	802a2d4 <lwip_netconn_do_writemore+0xc4>
    /* if OK or memory error, check available space */
    if ((err == ERR_OK) || (err == ERR_MEM)) {
 802a458:	f997 301f 	ldrsb.w	r3, [r7, #31]
 802a45c:	2b00      	cmp	r3, #0
 802a45e:	d004      	beq.n	802a46a <lwip_netconn_do_writemore+0x25a>
 802a460:	f997 301f 	ldrsb.w	r3, [r7, #31]
 802a464:	f1b3 3fff 	cmp.w	r3, #4294967295
 802a468:	d136      	bne.n	802a4d8 <lwip_netconn_do_writemore+0x2c8>
err_mem:
 802a46a:	bf00      	nop
      if (dontblock && (conn->current_msg->msg.w.offset < conn->current_msg->msg.w.len)) {
 802a46c:	7e3b      	ldrb	r3, [r7, #24]
 802a46e:	2b00      	cmp	r3, #0
 802a470:	d01b      	beq.n	802a4aa <lwip_netconn_do_writemore+0x29a>
 802a472:	687b      	ldr	r3, [r7, #4]
 802a474:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 802a476:	699a      	ldr	r2, [r3, #24]
 802a478:	687b      	ldr	r3, [r7, #4]
 802a47a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 802a47c:	695b      	ldr	r3, [r3, #20]
 802a47e:	429a      	cmp	r2, r3
 802a480:	d213      	bcs.n	802a4aa <lwip_netconn_do_writemore+0x29a>
        /* non-blocking write did not write everything: mark the pcb non-writable
           and let poll_tcp check writable space to mark the pcb writable again */
        API_EVENT(conn, NETCONN_EVT_SENDMINUS, 0);
 802a482:	687b      	ldr	r3, [r7, #4]
 802a484:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 802a486:	2b00      	cmp	r3, #0
 802a488:	d005      	beq.n	802a496 <lwip_netconn_do_writemore+0x286>
 802a48a:	687b      	ldr	r3, [r7, #4]
 802a48c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 802a48e:	2200      	movs	r2, #0
 802a490:	2103      	movs	r1, #3
 802a492:	6878      	ldr	r0, [r7, #4]
 802a494:	4798      	blx	r3
        conn->flags |= NETCONN_FLAG_CHECK_WRITESPACE;
 802a496:	687b      	ldr	r3, [r7, #4]
 802a498:	f893 3020 	ldrb.w	r3, [r3, #32]
 802a49c:	f043 0310 	orr.w	r3, r3, #16
 802a4a0:	b2da      	uxtb	r2, r3
 802a4a2:	687b      	ldr	r3, [r7, #4]
 802a4a4:	f883 2020 	strb.w	r2, [r3, #32]
 802a4a8:	e016      	b.n	802a4d8 <lwip_netconn_do_writemore+0x2c8>
      } else if ((tcp_sndbuf(conn->pcb.tcp) <= TCP_SNDLOWAT) ||
 802a4aa:	687b      	ldr	r3, [r7, #4]
 802a4ac:	685b      	ldr	r3, [r3, #4]
 802a4ae:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 802a4b2:	f5b3 6f86 	cmp.w	r3, #1072	; 0x430
 802a4b6:	d305      	bcc.n	802a4c4 <lwip_netconn_do_writemore+0x2b4>
                 (tcp_sndqueuelen(conn->pcb.tcp) >= TCP_SNDQUEUELOWAT)) {
 802a4b8:	687b      	ldr	r3, [r7, #4]
 802a4ba:	685b      	ldr	r3, [r3, #4]
 802a4bc:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
      } else if ((tcp_sndbuf(conn->pcb.tcp) <= TCP_SNDLOWAT) ||
 802a4c0:	2b04      	cmp	r3, #4
 802a4c2:	d909      	bls.n	802a4d8 <lwip_netconn_do_writemore+0x2c8>
        /* The queued byte- or pbuf-count exceeds the configured low-water limit,
           let select mark this pcb as non-writable. */
        API_EVENT(conn, NETCONN_EVT_SENDMINUS, 0);
 802a4c4:	687b      	ldr	r3, [r7, #4]
 802a4c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 802a4c8:	2b00      	cmp	r3, #0
 802a4ca:	d005      	beq.n	802a4d8 <lwip_netconn_do_writemore+0x2c8>
 802a4cc:	687b      	ldr	r3, [r7, #4]
 802a4ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 802a4d0:	2200      	movs	r2, #0
 802a4d2:	2103      	movs	r1, #3
 802a4d4:	6878      	ldr	r0, [r7, #4]
 802a4d6:	4798      	blx	r3
      }
    }

    if (err == ERR_OK) {
 802a4d8:	f997 301f 	ldrsb.w	r3, [r7, #31]
 802a4dc:	2b00      	cmp	r3, #0
 802a4de:	d11d      	bne.n	802a51c <lwip_netconn_do_writemore+0x30c>
      err_t out_err;
      if ((conn->current_msg->msg.w.offset == conn->current_msg->msg.w.len) || dontblock) {
 802a4e0:	687b      	ldr	r3, [r7, #4]
 802a4e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 802a4e4:	699a      	ldr	r2, [r3, #24]
 802a4e6:	687b      	ldr	r3, [r7, #4]
 802a4e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 802a4ea:	695b      	ldr	r3, [r3, #20]
 802a4ec:	429a      	cmp	r2, r3
 802a4ee:	d002      	beq.n	802a4f6 <lwip_netconn_do_writemore+0x2e6>
 802a4f0:	7e3b      	ldrb	r3, [r7, #24]
 802a4f2:	2b00      	cmp	r3, #0
 802a4f4:	d001      	beq.n	802a4fa <lwip_netconn_do_writemore+0x2ea>
        /* return sent length (caller reads length from msg.w.offset) */
        write_finished = 1;
 802a4f6:	2301      	movs	r3, #1
 802a4f8:	76fb      	strb	r3, [r7, #27]
      }
      out_err = tcp_output(conn->pcb.tcp);
 802a4fa:	687b      	ldr	r3, [r7, #4]
 802a4fc:	685b      	ldr	r3, [r3, #4]
 802a4fe:	4618      	mov	r0, r3
 802a500:	f009 fb90 	bl	8033c24 <tcp_output>
 802a504:	4603      	mov	r3, r0
 802a506:	733b      	strb	r3, [r7, #12]
      if (out_err == ERR_RTE) {
 802a508:	f997 300c 	ldrsb.w	r3, [r7, #12]
 802a50c:	f113 0f04 	cmn.w	r3, #4
 802a510:	d12c      	bne.n	802a56c <lwip_netconn_do_writemore+0x35c>
        /* If tcp_output fails because no route is found,
           don't try writing any more but return the error
           to the application thread. */
        err = out_err;
 802a512:	7b3b      	ldrb	r3, [r7, #12]
 802a514:	77fb      	strb	r3, [r7, #31]
        write_finished = 1;
 802a516:	2301      	movs	r3, #1
 802a518:	76fb      	strb	r3, [r7, #27]
 802a51a:	e027      	b.n	802a56c <lwip_netconn_do_writemore+0x35c>
      }
    } else if (err == ERR_MEM) {
 802a51c:	f997 301f 	ldrsb.w	r3, [r7, #31]
 802a520:	f1b3 3fff 	cmp.w	r3, #4294967295
 802a524:	d120      	bne.n	802a568 <lwip_netconn_do_writemore+0x358>
         For blocking sockets, we do NOT return to the application
         thread, since ERR_MEM is only a temporary error! Non-blocking
         will remain non-writable until sent_tcp/poll_tcp is called */

      /* tcp_write returned ERR_MEM, try tcp_output anyway */
      err_t out_err = tcp_output(conn->pcb.tcp);
 802a526:	687b      	ldr	r3, [r7, #4]
 802a528:	685b      	ldr	r3, [r3, #4]
 802a52a:	4618      	mov	r0, r3
 802a52c:	f009 fb7a 	bl	8033c24 <tcp_output>
 802a530:	4603      	mov	r3, r0
 802a532:	737b      	strb	r3, [r7, #13]
      if (out_err == ERR_RTE) {
 802a534:	f997 300d 	ldrsb.w	r3, [r7, #13]
 802a538:	f113 0f04 	cmn.w	r3, #4
 802a53c:	d104      	bne.n	802a548 <lwip_netconn_do_writemore+0x338>
        /* If tcp_output fails because no route is found,
           don't try writing any more but return the error
           to the application thread. */
        err = out_err;
 802a53e:	7b7b      	ldrb	r3, [r7, #13]
 802a540:	77fb      	strb	r3, [r7, #31]
        write_finished = 1;
 802a542:	2301      	movs	r3, #1
 802a544:	76fb      	strb	r3, [r7, #27]
 802a546:	e011      	b.n	802a56c <lwip_netconn_do_writemore+0x35c>
      } else if (dontblock) {
 802a548:	7e3b      	ldrb	r3, [r7, #24]
 802a54a:	2b00      	cmp	r3, #0
 802a54c:	d00e      	beq.n	802a56c <lwip_netconn_do_writemore+0x35c>
        /* non-blocking write is done on ERR_MEM, set error according
           to partial write or not */
        err = (conn->current_msg->msg.w.offset == 0) ? ERR_WOULDBLOCK : ERR_OK;
 802a54e:	687b      	ldr	r3, [r7, #4]
 802a550:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 802a552:	699b      	ldr	r3, [r3, #24]
 802a554:	2b00      	cmp	r3, #0
 802a556:	d102      	bne.n	802a55e <lwip_netconn_do_writemore+0x34e>
 802a558:	f06f 0306 	mvn.w	r3, #6
 802a55c:	e000      	b.n	802a560 <lwip_netconn_do_writemore+0x350>
 802a55e:	2300      	movs	r3, #0
 802a560:	77fb      	strb	r3, [r7, #31]
        write_finished = 1;
 802a562:	2301      	movs	r3, #1
 802a564:	76fb      	strb	r3, [r7, #27]
 802a566:	e001      	b.n	802a56c <lwip_netconn_do_writemore+0x35c>
      }
    } else {
      /* On errors != ERR_MEM, we don't try writing any more but return
         the error to the application thread. */
      write_finished = 1;
 802a568:	2301      	movs	r3, #1
 802a56a:	76fb      	strb	r3, [r7, #27]
    }
  }
  if (write_finished) {
 802a56c:	7efb      	ldrb	r3, [r7, #27]
 802a56e:	2b00      	cmp	r3, #0
 802a570:	d015      	beq.n	802a59e <lwip_netconn_do_writemore+0x38e>
    /* everything was written: set back connection state
       and back to application task */
    sys_sem_t *op_completed_sem = LWIP_API_MSG_SEM(conn->current_msg);
 802a572:	687b      	ldr	r3, [r7, #4]
 802a574:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 802a576:	681b      	ldr	r3, [r3, #0]
 802a578:	330c      	adds	r3, #12
 802a57a:	60bb      	str	r3, [r7, #8]
    conn->current_msg->err = err;
 802a57c:	687b      	ldr	r3, [r7, #4]
 802a57e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 802a580:	7ffa      	ldrb	r2, [r7, #31]
 802a582:	711a      	strb	r2, [r3, #4]
    conn->current_msg = NULL;
 802a584:	687b      	ldr	r3, [r7, #4]
 802a586:	2200      	movs	r2, #0
 802a588:	625a      	str	r2, [r3, #36]	; 0x24
    conn->state = NETCONN_NONE;
 802a58a:	687b      	ldr	r3, [r7, #4]
 802a58c:	2200      	movs	r2, #0
 802a58e:	705a      	strb	r2, [r3, #1]
#if LWIP_TCPIP_CORE_LOCKING
    if (delayed)
 802a590:	78fb      	ldrb	r3, [r7, #3]
 802a592:	2b00      	cmp	r3, #0
 802a594:	d006      	beq.n	802a5a4 <lwip_netconn_do_writemore+0x394>
#endif
    {
      sys_sem_signal(op_completed_sem);
 802a596:	68b8      	ldr	r0, [r7, #8]
 802a598:	f00d ff09 	bl	80383ae <sys_sem_signal>
 802a59c:	e002      	b.n	802a5a4 <lwip_netconn_do_writemore+0x394>
    }
  }
#if LWIP_TCPIP_CORE_LOCKING
  else {
    return ERR_MEM;
 802a59e:	f04f 33ff 	mov.w	r3, #4294967295
 802a5a2:	e000      	b.n	802a5a6 <lwip_netconn_do_writemore+0x396>
  }
#endif
  return ERR_OK;
 802a5a4:	2300      	movs	r3, #0
}
 802a5a6:	4618      	mov	r0, r3
 802a5a8:	3720      	adds	r7, #32
 802a5aa:	46bd      	mov	sp, r7
 802a5ac:	bd80      	pop	{r7, pc}
 802a5ae:	bf00      	nop

0802a5b0 <lwip_netconn_do_write>:
 *
 * @param m the api_msg pointing to the connection
 */
void
lwip_netconn_do_write(void *m)
{
 802a5b0:	b580      	push	{r7, lr}
 802a5b2:	b084      	sub	sp, #16
 802a5b4:	af00      	add	r7, sp, #0
 802a5b6:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 802a5b8:	687b      	ldr	r3, [r7, #4]
 802a5ba:	60bb      	str	r3, [r7, #8]

  err_t err = netconn_err(msg->conn);
 802a5bc:	68bb      	ldr	r3, [r7, #8]
 802a5be:	681b      	ldr	r3, [r3, #0]
 802a5c0:	4618      	mov	r0, r3
 802a5c2:	f7fe fcbb 	bl	8028f3c <netconn_err>
 802a5c6:	4603      	mov	r3, r0
 802a5c8:	73fb      	strb	r3, [r7, #15]
  if (err == ERR_OK) {
 802a5ca:	f997 300f 	ldrsb.w	r3, [r7, #15]
 802a5ce:	2b00      	cmp	r3, #0
 802a5d0:	d166      	bne.n	802a6a0 <lwip_netconn_do_write+0xf0>
    if (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) {
 802a5d2:	68bb      	ldr	r3, [r7, #8]
 802a5d4:	681b      	ldr	r3, [r3, #0]
 802a5d6:	781b      	ldrb	r3, [r3, #0]
 802a5d8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 802a5dc:	2b10      	cmp	r3, #16
 802a5de:	d15d      	bne.n	802a69c <lwip_netconn_do_write+0xec>
#if LWIP_TCP
      if (msg->conn->state != NETCONN_NONE) {
 802a5e0:	68bb      	ldr	r3, [r7, #8]
 802a5e2:	681b      	ldr	r3, [r3, #0]
 802a5e4:	785b      	ldrb	r3, [r3, #1]
 802a5e6:	2b00      	cmp	r3, #0
 802a5e8:	d002      	beq.n	802a5f0 <lwip_netconn_do_write+0x40>
        /* netconn is connecting, closing or in blocking write */
        err = ERR_INPROGRESS;
 802a5ea:	23fb      	movs	r3, #251	; 0xfb
 802a5ec:	73fb      	strb	r3, [r7, #15]
 802a5ee:	e057      	b.n	802a6a0 <lwip_netconn_do_write+0xf0>
      } else if (msg->conn->pcb.tcp != NULL) {
 802a5f0:	68bb      	ldr	r3, [r7, #8]
 802a5f2:	681b      	ldr	r3, [r3, #0]
 802a5f4:	685b      	ldr	r3, [r3, #4]
 802a5f6:	2b00      	cmp	r3, #0
 802a5f8:	d04d      	beq.n	802a696 <lwip_netconn_do_write+0xe6>
        msg->conn->state = NETCONN_WRITE;
 802a5fa:	68bb      	ldr	r3, [r7, #8]
 802a5fc:	681b      	ldr	r3, [r3, #0]
 802a5fe:	2201      	movs	r2, #1
 802a600:	705a      	strb	r2, [r3, #1]
        /* set all the variables used by lwip_netconn_do_writemore */
        LWIP_ASSERT("already writing or closing", msg->conn->current_msg == NULL);
 802a602:	68bb      	ldr	r3, [r7, #8]
 802a604:	681b      	ldr	r3, [r3, #0]
 802a606:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 802a608:	2b00      	cmp	r3, #0
 802a60a:	d006      	beq.n	802a61a <lwip_netconn_do_write+0x6a>
 802a60c:	4b28      	ldr	r3, [pc, #160]	; (802a6b0 <lwip_netconn_do_write+0x100>)
 802a60e:	f240 7223 	movw	r2, #1827	; 0x723
 802a612:	4928      	ldr	r1, [pc, #160]	; (802a6b4 <lwip_netconn_do_write+0x104>)
 802a614:	4828      	ldr	r0, [pc, #160]	; (802a6b8 <lwip_netconn_do_write+0x108>)
 802a616:	f00e fd27 	bl	8039068 <iprintf>
        LWIP_ASSERT("msg->msg.w.len != 0", msg->msg.w.len != 0);
 802a61a:	68bb      	ldr	r3, [r7, #8]
 802a61c:	695b      	ldr	r3, [r3, #20]
 802a61e:	2b00      	cmp	r3, #0
 802a620:	d106      	bne.n	802a630 <lwip_netconn_do_write+0x80>
 802a622:	4b23      	ldr	r3, [pc, #140]	; (802a6b0 <lwip_netconn_do_write+0x100>)
 802a624:	f240 7224 	movw	r2, #1828	; 0x724
 802a628:	4924      	ldr	r1, [pc, #144]	; (802a6bc <lwip_netconn_do_write+0x10c>)
 802a62a:	4823      	ldr	r0, [pc, #140]	; (802a6b8 <lwip_netconn_do_write+0x108>)
 802a62c:	f00e fd1c 	bl	8039068 <iprintf>
        msg->conn->current_msg = msg;
 802a630:	68bb      	ldr	r3, [r7, #8]
 802a632:	681b      	ldr	r3, [r3, #0]
 802a634:	68ba      	ldr	r2, [r7, #8]
 802a636:	625a      	str	r2, [r3, #36]	; 0x24
#if LWIP_TCPIP_CORE_LOCKING
        if (lwip_netconn_do_writemore(msg->conn, 0) != ERR_OK) {
 802a638:	68bb      	ldr	r3, [r7, #8]
 802a63a:	681b      	ldr	r3, [r3, #0]
 802a63c:	2100      	movs	r1, #0
 802a63e:	4618      	mov	r0, r3
 802a640:	f7ff fde6 	bl	802a210 <lwip_netconn_do_writemore>
 802a644:	4603      	mov	r3, r0
 802a646:	2b00      	cmp	r3, #0
 802a648:	d02e      	beq.n	802a6a8 <lwip_netconn_do_write+0xf8>
          LWIP_ASSERT("state!", msg->conn->state == NETCONN_WRITE);
 802a64a:	68bb      	ldr	r3, [r7, #8]
 802a64c:	681b      	ldr	r3, [r3, #0]
 802a64e:	785b      	ldrb	r3, [r3, #1]
 802a650:	2b01      	cmp	r3, #1
 802a652:	d006      	beq.n	802a662 <lwip_netconn_do_write+0xb2>
 802a654:	4b16      	ldr	r3, [pc, #88]	; (802a6b0 <lwip_netconn_do_write+0x100>)
 802a656:	f44f 62e5 	mov.w	r2, #1832	; 0x728
 802a65a:	4919      	ldr	r1, [pc, #100]	; (802a6c0 <lwip_netconn_do_write+0x110>)
 802a65c:	4816      	ldr	r0, [pc, #88]	; (802a6b8 <lwip_netconn_do_write+0x108>)
 802a65e:	f00e fd03 	bl	8039068 <iprintf>
          UNLOCK_TCPIP_CORE();
 802a662:	4818      	ldr	r0, [pc, #96]	; (802a6c4 <lwip_netconn_do_write+0x114>)
 802a664:	f00d ff3f 	bl	80384e6 <sys_mutex_unlock>
          sys_arch_sem_wait(LWIP_API_MSG_SEM(msg), 0);
 802a668:	68bb      	ldr	r3, [r7, #8]
 802a66a:	681b      	ldr	r3, [r3, #0]
 802a66c:	330c      	adds	r3, #12
 802a66e:	2100      	movs	r1, #0
 802a670:	4618      	mov	r0, r3
 802a672:	f00d fe6b 	bl	803834c <sys_arch_sem_wait>
          LOCK_TCPIP_CORE();
 802a676:	4813      	ldr	r0, [pc, #76]	; (802a6c4 <lwip_netconn_do_write+0x114>)
 802a678:	f00d ff26 	bl	80384c8 <sys_mutex_lock>
          LWIP_ASSERT("state!", msg->conn->state != NETCONN_WRITE);
 802a67c:	68bb      	ldr	r3, [r7, #8]
 802a67e:	681b      	ldr	r3, [r3, #0]
 802a680:	785b      	ldrb	r3, [r3, #1]
 802a682:	2b01      	cmp	r3, #1
 802a684:	d110      	bne.n	802a6a8 <lwip_netconn_do_write+0xf8>
 802a686:	4b0a      	ldr	r3, [pc, #40]	; (802a6b0 <lwip_netconn_do_write+0x100>)
 802a688:	f240 722c 	movw	r2, #1836	; 0x72c
 802a68c:	490c      	ldr	r1, [pc, #48]	; (802a6c0 <lwip_netconn_do_write+0x110>)
 802a68e:	480a      	ldr	r0, [pc, #40]	; (802a6b8 <lwip_netconn_do_write+0x108>)
 802a690:	f00e fcea 	bl	8039068 <iprintf>
#else /* LWIP_TCPIP_CORE_LOCKING */
        lwip_netconn_do_writemore(msg->conn);
#endif /* LWIP_TCPIP_CORE_LOCKING */
        /* for both cases: if lwip_netconn_do_writemore was called, don't ACK the APIMSG
           since lwip_netconn_do_writemore ACKs it! */
        return;
 802a694:	e008      	b.n	802a6a8 <lwip_netconn_do_write+0xf8>
      } else {
        err = ERR_CONN;
 802a696:	23f5      	movs	r3, #245	; 0xf5
 802a698:	73fb      	strb	r3, [r7, #15]
 802a69a:	e001      	b.n	802a6a0 <lwip_netconn_do_write+0xf0>
#else /* LWIP_TCP */
      err = ERR_VAL;
#endif /* LWIP_TCP */
#if (LWIP_UDP || LWIP_RAW)
    } else {
      err = ERR_VAL;
 802a69c:	23fa      	movs	r3, #250	; 0xfa
 802a69e:	73fb      	strb	r3, [r7, #15]
#endif /* (LWIP_UDP || LWIP_RAW) */
    }
  }
  msg->err = err;
 802a6a0:	68bb      	ldr	r3, [r7, #8]
 802a6a2:	7bfa      	ldrb	r2, [r7, #15]
 802a6a4:	711a      	strb	r2, [r3, #4]
 802a6a6:	e000      	b.n	802a6aa <lwip_netconn_do_write+0xfa>
        return;
 802a6a8:	bf00      	nop
  TCPIP_APIMSG_ACK(msg);
}
 802a6aa:	3710      	adds	r7, #16
 802a6ac:	46bd      	mov	sp, r7
 802a6ae:	bd80      	pop	{r7, pc}
 802a6b0:	08039f0c 	.word	0x08039f0c
 802a6b4:	0803a2b0 	.word	0x0803a2b0
 802a6b8:	08039f50 	.word	0x08039f50
 802a6bc:	0803a438 	.word	0x0803a438
 802a6c0:	0803a2cc 	.word	0x0803a2cc
 802a6c4:	2000b31c 	.word	0x2000b31c

0802a6c8 <lwip_netconn_do_getaddr>:
 *
 * @param m the api_msg pointing to the connection
 */
void
lwip_netconn_do_getaddr(void *m)
{
 802a6c8:	b580      	push	{r7, lr}
 802a6ca:	b084      	sub	sp, #16
 802a6cc:	af00      	add	r7, sp, #0
 802a6ce:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 802a6d0:	687b      	ldr	r3, [r7, #4]
 802a6d2:	60fb      	str	r3, [r7, #12]

  if (msg->conn->pcb.ip != NULL) {
 802a6d4:	68fb      	ldr	r3, [r7, #12]
 802a6d6:	681b      	ldr	r3, [r3, #0]
 802a6d8:	685b      	ldr	r3, [r3, #4]
 802a6da:	2b00      	cmp	r3, #0
 802a6dc:	d06b      	beq.n	802a7b6 <lwip_netconn_do_getaddr+0xee>
    if (msg->msg.ad.local) {
 802a6de:	68fb      	ldr	r3, [r7, #12]
 802a6e0:	7c1b      	ldrb	r3, [r3, #16]
 802a6e2:	2b00      	cmp	r3, #0
 802a6e4:	d007      	beq.n	802a6f6 <lwip_netconn_do_getaddr+0x2e>
      ip_addr_copy(API_EXPR_DEREF(msg->msg.ad.ipaddr),
 802a6e6:	68fb      	ldr	r3, [r7, #12]
 802a6e8:	681b      	ldr	r3, [r3, #0]
 802a6ea:	685a      	ldr	r2, [r3, #4]
 802a6ec:	68fb      	ldr	r3, [r7, #12]
 802a6ee:	689b      	ldr	r3, [r3, #8]
 802a6f0:	6812      	ldr	r2, [r2, #0]
 802a6f2:	601a      	str	r2, [r3, #0]
 802a6f4:	e006      	b.n	802a704 <lwip_netconn_do_getaddr+0x3c>
                   msg->conn->pcb.ip->local_ip);
    } else {
      ip_addr_copy(API_EXPR_DEREF(msg->msg.ad.ipaddr),
 802a6f6:	68fb      	ldr	r3, [r7, #12]
 802a6f8:	681b      	ldr	r3, [r3, #0]
 802a6fa:	685a      	ldr	r2, [r3, #4]
 802a6fc:	68fb      	ldr	r3, [r7, #12]
 802a6fe:	689b      	ldr	r3, [r3, #8]
 802a700:	6852      	ldr	r2, [r2, #4]
 802a702:	601a      	str	r2, [r3, #0]
                   msg->conn->pcb.ip->remote_ip);
    }

    msg->err = ERR_OK;
 802a704:	68fb      	ldr	r3, [r7, #12]
 802a706:	2200      	movs	r2, #0
 802a708:	711a      	strb	r2, [r3, #4]
    switch (NETCONNTYPE_GROUP(msg->conn->type)) {
 802a70a:	68fb      	ldr	r3, [r7, #12]
 802a70c:	681b      	ldr	r3, [r3, #0]
 802a70e:	781b      	ldrb	r3, [r3, #0]
 802a710:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 802a714:	2b10      	cmp	r3, #16
 802a716:	d021      	beq.n	802a75c <lwip_netconn_do_getaddr+0x94>
 802a718:	2b20      	cmp	r3, #32
 802a71a:	d144      	bne.n	802a7a6 <lwip_netconn_do_getaddr+0xde>
        }
        break;
#endif /* LWIP_RAW */
#if LWIP_UDP
      case NETCONN_UDP:
        if (msg->msg.ad.local) {
 802a71c:	68fb      	ldr	r3, [r7, #12]
 802a71e:	7c1b      	ldrb	r3, [r3, #16]
 802a720:	2b00      	cmp	r3, #0
 802a722:	d007      	beq.n	802a734 <lwip_netconn_do_getaddr+0x6c>
          API_EXPR_DEREF(msg->msg.ad.port) = msg->conn->pcb.udp->local_port;
 802a724:	68fb      	ldr	r3, [r7, #12]
 802a726:	681b      	ldr	r3, [r3, #0]
 802a728:	685a      	ldr	r2, [r3, #4]
 802a72a:	68fb      	ldr	r3, [r7, #12]
 802a72c:	68db      	ldr	r3, [r3, #12]
 802a72e:	8a52      	ldrh	r2, [r2, #18]
 802a730:	801a      	strh	r2, [r3, #0]
            msg->err = ERR_CONN;
          } else {
            API_EXPR_DEREF(msg->msg.ad.port) = msg->conn->pcb.udp->remote_port;
          }
        }
        break;
 802a732:	e044      	b.n	802a7be <lwip_netconn_do_getaddr+0xf6>
          if ((msg->conn->pcb.udp->flags & UDP_FLAGS_CONNECTED) == 0) {
 802a734:	68fb      	ldr	r3, [r7, #12]
 802a736:	681b      	ldr	r3, [r3, #0]
 802a738:	685b      	ldr	r3, [r3, #4]
 802a73a:	7c1b      	ldrb	r3, [r3, #16]
 802a73c:	f003 0304 	and.w	r3, r3, #4
 802a740:	2b00      	cmp	r3, #0
 802a742:	d103      	bne.n	802a74c <lwip_netconn_do_getaddr+0x84>
            msg->err = ERR_CONN;
 802a744:	68fb      	ldr	r3, [r7, #12]
 802a746:	22f5      	movs	r2, #245	; 0xf5
 802a748:	711a      	strb	r2, [r3, #4]
        break;
 802a74a:	e038      	b.n	802a7be <lwip_netconn_do_getaddr+0xf6>
            API_EXPR_DEREF(msg->msg.ad.port) = msg->conn->pcb.udp->remote_port;
 802a74c:	68fb      	ldr	r3, [r7, #12]
 802a74e:	681b      	ldr	r3, [r3, #0]
 802a750:	685a      	ldr	r2, [r3, #4]
 802a752:	68fb      	ldr	r3, [r7, #12]
 802a754:	68db      	ldr	r3, [r3, #12]
 802a756:	8a92      	ldrh	r2, [r2, #20]
 802a758:	801a      	strh	r2, [r3, #0]
        break;
 802a75a:	e030      	b.n	802a7be <lwip_netconn_do_getaddr+0xf6>
#endif /* LWIP_UDP */
#if LWIP_TCP
      case NETCONN_TCP:
        if ((msg->msg.ad.local == 0) &&
 802a75c:	68fb      	ldr	r3, [r7, #12]
 802a75e:	7c1b      	ldrb	r3, [r3, #16]
 802a760:	2b00      	cmp	r3, #0
 802a762:	d10f      	bne.n	802a784 <lwip_netconn_do_getaddr+0xbc>
            ((msg->conn->pcb.tcp->state == CLOSED) || (msg->conn->pcb.tcp->state == LISTEN))) {
 802a764:	68fb      	ldr	r3, [r7, #12]
 802a766:	681b      	ldr	r3, [r3, #0]
 802a768:	685b      	ldr	r3, [r3, #4]
 802a76a:	7d1b      	ldrb	r3, [r3, #20]
        if ((msg->msg.ad.local == 0) &&
 802a76c:	2b00      	cmp	r3, #0
 802a76e:	d005      	beq.n	802a77c <lwip_netconn_do_getaddr+0xb4>
            ((msg->conn->pcb.tcp->state == CLOSED) || (msg->conn->pcb.tcp->state == LISTEN))) {
 802a770:	68fb      	ldr	r3, [r7, #12]
 802a772:	681b      	ldr	r3, [r3, #0]
 802a774:	685b      	ldr	r3, [r3, #4]
 802a776:	7d1b      	ldrb	r3, [r3, #20]
 802a778:	2b01      	cmp	r3, #1
 802a77a:	d103      	bne.n	802a784 <lwip_netconn_do_getaddr+0xbc>
          /* pcb is not connected and remote name is requested */
          msg->err = ERR_CONN;
 802a77c:	68fb      	ldr	r3, [r7, #12]
 802a77e:	22f5      	movs	r2, #245	; 0xf5
 802a780:	711a      	strb	r2, [r3, #4]
        } else {
          API_EXPR_DEREF(msg->msg.ad.port) = (msg->msg.ad.local ? msg->conn->pcb.tcp->local_port : msg->conn->pcb.tcp->remote_port);
        }
        break;
 802a782:	e01c      	b.n	802a7be <lwip_netconn_do_getaddr+0xf6>
          API_EXPR_DEREF(msg->msg.ad.port) = (msg->msg.ad.local ? msg->conn->pcb.tcp->local_port : msg->conn->pcb.tcp->remote_port);
 802a784:	68fb      	ldr	r3, [r7, #12]
 802a786:	7c1b      	ldrb	r3, [r3, #16]
 802a788:	2b00      	cmp	r3, #0
 802a78a:	d004      	beq.n	802a796 <lwip_netconn_do_getaddr+0xce>
 802a78c:	68fb      	ldr	r3, [r7, #12]
 802a78e:	681b      	ldr	r3, [r3, #0]
 802a790:	685b      	ldr	r3, [r3, #4]
 802a792:	8adb      	ldrh	r3, [r3, #22]
 802a794:	e003      	b.n	802a79e <lwip_netconn_do_getaddr+0xd6>
 802a796:	68fb      	ldr	r3, [r7, #12]
 802a798:	681b      	ldr	r3, [r3, #0]
 802a79a:	685b      	ldr	r3, [r3, #4]
 802a79c:	8b1b      	ldrh	r3, [r3, #24]
 802a79e:	68fa      	ldr	r2, [r7, #12]
 802a7a0:	68d2      	ldr	r2, [r2, #12]
 802a7a2:	8013      	strh	r3, [r2, #0]
        break;
 802a7a4:	e00b      	b.n	802a7be <lwip_netconn_do_getaddr+0xf6>
#endif /* LWIP_TCP */
      default:
        LWIP_ASSERT("invalid netconn_type", 0);
 802a7a6:	4b08      	ldr	r3, [pc, #32]	; (802a7c8 <lwip_netconn_do_getaddr+0x100>)
 802a7a8:	f240 727d 	movw	r2, #1917	; 0x77d
 802a7ac:	4907      	ldr	r1, [pc, #28]	; (802a7cc <lwip_netconn_do_getaddr+0x104>)
 802a7ae:	4808      	ldr	r0, [pc, #32]	; (802a7d0 <lwip_netconn_do_getaddr+0x108>)
 802a7b0:	f00e fc5a 	bl	8039068 <iprintf>
        break;
 802a7b4:	e003      	b.n	802a7be <lwip_netconn_do_getaddr+0xf6>
    }
  } else {
    msg->err = ERR_CONN;
 802a7b6:	68fb      	ldr	r3, [r7, #12]
 802a7b8:	22f5      	movs	r2, #245	; 0xf5
 802a7ba:	711a      	strb	r2, [r3, #4]
  }
  TCPIP_APIMSG_ACK(msg);
}
 802a7bc:	bf00      	nop
 802a7be:	bf00      	nop
 802a7c0:	3710      	adds	r7, #16
 802a7c2:	46bd      	mov	sp, r7
 802a7c4:	bd80      	pop	{r7, pc}
 802a7c6:	bf00      	nop
 802a7c8:	08039f0c 	.word	0x08039f0c
 802a7cc:	0803a44c 	.word	0x0803a44c
 802a7d0:	08039f50 	.word	0x08039f50

0802a7d4 <lwip_netconn_do_close>:
 *
 * @param m the api_msg pointing to the connection
 */
void
lwip_netconn_do_close(void *m)
{
 802a7d4:	b580      	push	{r7, lr}
 802a7d6:	b084      	sub	sp, #16
 802a7d8:	af00      	add	r7, sp, #0
 802a7da:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 802a7dc:	687b      	ldr	r3, [r7, #4]
 802a7de:	60fb      	str	r3, [r7, #12]

#if LWIP_TCP
  enum netconn_state state = msg->conn->state;
 802a7e0:	68fb      	ldr	r3, [r7, #12]
 802a7e2:	681b      	ldr	r3, [r3, #0]
 802a7e4:	785b      	ldrb	r3, [r3, #1]
 802a7e6:	72fb      	strb	r3, [r7, #11]
  /* First check if this is a TCP netconn and if it is in a correct state
      (LISTEN doesn't support half shutdown) */
  if ((msg->conn->pcb.tcp != NULL) &&
 802a7e8:	68fb      	ldr	r3, [r7, #12]
 802a7ea:	681b      	ldr	r3, [r3, #0]
 802a7ec:	685b      	ldr	r3, [r3, #4]
 802a7ee:	2b00      	cmp	r3, #0
 802a7f0:	d069      	beq.n	802a8c6 <lwip_netconn_do_close+0xf2>
      (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) &&
 802a7f2:	68fb      	ldr	r3, [r7, #12]
 802a7f4:	681b      	ldr	r3, [r3, #0]
 802a7f6:	781b      	ldrb	r3, [r3, #0]
 802a7f8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if ((msg->conn->pcb.tcp != NULL) &&
 802a7fc:	2b10      	cmp	r3, #16
 802a7fe:	d162      	bne.n	802a8c6 <lwip_netconn_do_close+0xf2>
      ((msg->msg.sd.shut == NETCONN_SHUT_RDWR) || (state != NETCONN_LISTEN))) {
 802a800:	68fb      	ldr	r3, [r7, #12]
 802a802:	7a1b      	ldrb	r3, [r3, #8]
      (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) &&
 802a804:	2b03      	cmp	r3, #3
 802a806:	d002      	beq.n	802a80e <lwip_netconn_do_close+0x3a>
      ((msg->msg.sd.shut == NETCONN_SHUT_RDWR) || (state != NETCONN_LISTEN))) {
 802a808:	7afb      	ldrb	r3, [r7, #11]
 802a80a:	2b02      	cmp	r3, #2
 802a80c:	d05b      	beq.n	802a8c6 <lwip_netconn_do_close+0xf2>
    /* Check if we are in a connected state */
    if (state == NETCONN_CONNECT) {
 802a80e:	7afb      	ldrb	r3, [r7, #11]
 802a810:	2b03      	cmp	r3, #3
 802a812:	d103      	bne.n	802a81c <lwip_netconn_do_close+0x48>
      /* TCP connect in progress: cannot shutdown */
      msg->err = ERR_CONN;
 802a814:	68fb      	ldr	r3, [r7, #12]
 802a816:	22f5      	movs	r2, #245	; 0xf5
 802a818:	711a      	strb	r2, [r3, #4]
    if (state == NETCONN_CONNECT) {
 802a81a:	e059      	b.n	802a8d0 <lwip_netconn_do_close+0xfc>
    } else if (state == NETCONN_WRITE) {
 802a81c:	7afb      	ldrb	r3, [r7, #11]
 802a81e:	2b01      	cmp	r3, #1
 802a820:	d103      	bne.n	802a82a <lwip_netconn_do_close+0x56>
        msg->err = tcp_shutdown(msg->conn->pcb.tcp, 1, 0);
      }
    }
    if (state == NETCONN_NONE) {
#else /* LWIP_NETCONN_FULLDUPLEX */
      msg->err = ERR_INPROGRESS;
 802a822:	68fb      	ldr	r3, [r7, #12]
 802a824:	22fb      	movs	r2, #251	; 0xfb
 802a826:	711a      	strb	r2, [r3, #4]
    if (state == NETCONN_CONNECT) {
 802a828:	e052      	b.n	802a8d0 <lwip_netconn_do_close+0xfc>
    } else {
#endif /* LWIP_NETCONN_FULLDUPLEX */
      if (msg->msg.sd.shut & NETCONN_SHUT_RD) {
 802a82a:	68fb      	ldr	r3, [r7, #12]
 802a82c:	7a1b      	ldrb	r3, [r3, #8]
 802a82e:	f003 0301 	and.w	r3, r3, #1
 802a832:	2b00      	cmp	r3, #0
 802a834:	d004      	beq.n	802a840 <lwip_netconn_do_close+0x6c>
#if LWIP_NETCONN_FULLDUPLEX
        /* Mark mboxes invalid */
        netconn_mark_mbox_invalid(msg->conn);
#else /* LWIP_NETCONN_FULLDUPLEX */
        netconn_drain(msg->conn);
 802a836:	68fb      	ldr	r3, [r7, #12]
 802a838:	681b      	ldr	r3, [r3, #0]
 802a83a:	4618      	mov	r0, r3
 802a83c:	f7ff f8c6 	bl	80299cc <netconn_drain>
#endif /* LWIP_NETCONN_FULLDUPLEX */
      }
      LWIP_ASSERT("already writing or closing", msg->conn->current_msg == NULL);
 802a840:	68fb      	ldr	r3, [r7, #12]
 802a842:	681b      	ldr	r3, [r3, #0]
 802a844:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 802a846:	2b00      	cmp	r3, #0
 802a848:	d006      	beq.n	802a858 <lwip_netconn_do_close+0x84>
 802a84a:	4b23      	ldr	r3, [pc, #140]	; (802a8d8 <lwip_netconn_do_close+0x104>)
 802a84c:	f240 72bd 	movw	r2, #1981	; 0x7bd
 802a850:	4922      	ldr	r1, [pc, #136]	; (802a8dc <lwip_netconn_do_close+0x108>)
 802a852:	4823      	ldr	r0, [pc, #140]	; (802a8e0 <lwip_netconn_do_close+0x10c>)
 802a854:	f00e fc08 	bl	8039068 <iprintf>
      msg->conn->state = NETCONN_CLOSE;
 802a858:	68fb      	ldr	r3, [r7, #12]
 802a85a:	681b      	ldr	r3, [r3, #0]
 802a85c:	2204      	movs	r2, #4
 802a85e:	705a      	strb	r2, [r3, #1]
      msg->conn->current_msg = msg;
 802a860:	68fb      	ldr	r3, [r7, #12]
 802a862:	681b      	ldr	r3, [r3, #0]
 802a864:	68fa      	ldr	r2, [r7, #12]
 802a866:	625a      	str	r2, [r3, #36]	; 0x24
#if LWIP_TCPIP_CORE_LOCKING
      if (lwip_netconn_do_close_internal(msg->conn, 0) != ERR_OK) {
 802a868:	68fb      	ldr	r3, [r7, #12]
 802a86a:	681b      	ldr	r3, [r3, #0]
 802a86c:	2100      	movs	r1, #0
 802a86e:	4618      	mov	r0, r3
 802a870:	f7ff f92a 	bl	8029ac8 <lwip_netconn_do_close_internal>
 802a874:	4603      	mov	r3, r0
 802a876:	2b00      	cmp	r3, #0
 802a878:	d029      	beq.n	802a8ce <lwip_netconn_do_close+0xfa>
        LWIP_ASSERT("state!", msg->conn->state == NETCONN_CLOSE);
 802a87a:	68fb      	ldr	r3, [r7, #12]
 802a87c:	681b      	ldr	r3, [r3, #0]
 802a87e:	785b      	ldrb	r3, [r3, #1]
 802a880:	2b04      	cmp	r3, #4
 802a882:	d006      	beq.n	802a892 <lwip_netconn_do_close+0xbe>
 802a884:	4b14      	ldr	r3, [pc, #80]	; (802a8d8 <lwip_netconn_do_close+0x104>)
 802a886:	f240 72c2 	movw	r2, #1986	; 0x7c2
 802a88a:	4916      	ldr	r1, [pc, #88]	; (802a8e4 <lwip_netconn_do_close+0x110>)
 802a88c:	4814      	ldr	r0, [pc, #80]	; (802a8e0 <lwip_netconn_do_close+0x10c>)
 802a88e:	f00e fbeb 	bl	8039068 <iprintf>
        UNLOCK_TCPIP_CORE();
 802a892:	4815      	ldr	r0, [pc, #84]	; (802a8e8 <lwip_netconn_do_close+0x114>)
 802a894:	f00d fe27 	bl	80384e6 <sys_mutex_unlock>
        sys_arch_sem_wait(LWIP_API_MSG_SEM(msg), 0);
 802a898:	68fb      	ldr	r3, [r7, #12]
 802a89a:	681b      	ldr	r3, [r3, #0]
 802a89c:	330c      	adds	r3, #12
 802a89e:	2100      	movs	r1, #0
 802a8a0:	4618      	mov	r0, r3
 802a8a2:	f00d fd53 	bl	803834c <sys_arch_sem_wait>
        LOCK_TCPIP_CORE();
 802a8a6:	4810      	ldr	r0, [pc, #64]	; (802a8e8 <lwip_netconn_do_close+0x114>)
 802a8a8:	f00d fe0e 	bl	80384c8 <sys_mutex_lock>
        LWIP_ASSERT("state!", msg->conn->state == NETCONN_NONE);
 802a8ac:	68fb      	ldr	r3, [r7, #12]
 802a8ae:	681b      	ldr	r3, [r3, #0]
 802a8b0:	785b      	ldrb	r3, [r3, #1]
 802a8b2:	2b00      	cmp	r3, #0
 802a8b4:	d00b      	beq.n	802a8ce <lwip_netconn_do_close+0xfa>
 802a8b6:	4b08      	ldr	r3, [pc, #32]	; (802a8d8 <lwip_netconn_do_close+0x104>)
 802a8b8:	f240 72c6 	movw	r2, #1990	; 0x7c6
 802a8bc:	4909      	ldr	r1, [pc, #36]	; (802a8e4 <lwip_netconn_do_close+0x110>)
 802a8be:	4808      	ldr	r0, [pc, #32]	; (802a8e0 <lwip_netconn_do_close+0x10c>)
 802a8c0:	f00e fbd2 	bl	8039068 <iprintf>
      }
#else /* LWIP_TCPIP_CORE_LOCKING */
      lwip_netconn_do_close_internal(msg->conn);
#endif /* LWIP_TCPIP_CORE_LOCKING */
      /* for tcp netconns, lwip_netconn_do_close_internal ACKs the message */
      return;
 802a8c4:	e003      	b.n	802a8ce <lwip_netconn_do_close+0xfa>
    }
  } else
#endif /* LWIP_TCP */
  {
    msg->err = ERR_CONN;
 802a8c6:	68fb      	ldr	r3, [r7, #12]
 802a8c8:	22f5      	movs	r2, #245	; 0xf5
 802a8ca:	711a      	strb	r2, [r3, #4]
 802a8cc:	e000      	b.n	802a8d0 <lwip_netconn_do_close+0xfc>
      return;
 802a8ce:	bf00      	nop
  }
  TCPIP_APIMSG_ACK(msg);
}
 802a8d0:	3710      	adds	r7, #16
 802a8d2:	46bd      	mov	sp, r7
 802a8d4:	bd80      	pop	{r7, pc}
 802a8d6:	bf00      	nop
 802a8d8:	08039f0c 	.word	0x08039f0c
 802a8dc:	0803a2b0 	.word	0x0803a2b0
 802a8e0:	08039f50 	.word	0x08039f50
 802a8e4:	0803a2cc 	.word	0x0803a2cc
 802a8e8:	2000b31c 	.word	0x2000b31c

0802a8ec <err_to_errno>:
  EIO            /* ERR_ARG        -16     Illegal argument.        */
};

int
err_to_errno(err_t err)
{
 802a8ec:	b480      	push	{r7}
 802a8ee:	b083      	sub	sp, #12
 802a8f0:	af00      	add	r7, sp, #0
 802a8f2:	4603      	mov	r3, r0
 802a8f4:	71fb      	strb	r3, [r7, #7]
  if ((err > 0) || (-err >= (err_t)LWIP_ARRAYSIZE(err_to_errno_table))) {
 802a8f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 802a8fa:	2b00      	cmp	r3, #0
 802a8fc:	dc04      	bgt.n	802a908 <err_to_errno+0x1c>
 802a8fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 802a902:	f113 0f10 	cmn.w	r3, #16
 802a906:	da01      	bge.n	802a90c <err_to_errno+0x20>
    return EIO;
 802a908:	2305      	movs	r3, #5
 802a90a:	e005      	b.n	802a918 <err_to_errno+0x2c>
  }
  return err_to_errno_table[-err];
 802a90c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 802a910:	425b      	negs	r3, r3
 802a912:	4a04      	ldr	r2, [pc, #16]	; (802a924 <err_to_errno+0x38>)
 802a914:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
}
 802a918:	4618      	mov	r0, r3
 802a91a:	370c      	adds	r7, #12
 802a91c:	46bd      	mov	sp, r7
 802a91e:	f85d 7b04 	ldr.w	r7, [sp], #4
 802a922:	4770      	bx	lr
 802a924:	0803d4a4 	.word	0x0803d4a4

0802a928 <netbuf_delete>:
 *
 * @param buf pointer to a netbuf allocated by netbuf_new()
 */
void
netbuf_delete(struct netbuf *buf)
{
 802a928:	b580      	push	{r7, lr}
 802a92a:	b082      	sub	sp, #8
 802a92c:	af00      	add	r7, sp, #0
 802a92e:	6078      	str	r0, [r7, #4]
  if (buf != NULL) {
 802a930:	687b      	ldr	r3, [r7, #4]
 802a932:	2b00      	cmp	r3, #0
 802a934:	d013      	beq.n	802a95e <netbuf_delete+0x36>
    if (buf->p != NULL) {
 802a936:	687b      	ldr	r3, [r7, #4]
 802a938:	681b      	ldr	r3, [r3, #0]
 802a93a:	2b00      	cmp	r3, #0
 802a93c:	d00b      	beq.n	802a956 <netbuf_delete+0x2e>
      pbuf_free(buf->p);
 802a93e:	687b      	ldr	r3, [r7, #4]
 802a940:	681b      	ldr	r3, [r3, #0]
 802a942:	4618      	mov	r0, r3
 802a944:	f003 fce2 	bl	802e30c <pbuf_free>
      buf->p = buf->ptr = NULL;
 802a948:	687b      	ldr	r3, [r7, #4]
 802a94a:	2200      	movs	r2, #0
 802a94c:	605a      	str	r2, [r3, #4]
 802a94e:	687b      	ldr	r3, [r7, #4]
 802a950:	685a      	ldr	r2, [r3, #4]
 802a952:	687b      	ldr	r3, [r7, #4]
 802a954:	601a      	str	r2, [r3, #0]
    }
    memp_free(MEMP_NETBUF, buf);
 802a956:	6879      	ldr	r1, [r7, #4]
 802a958:	2006      	movs	r0, #6
 802a95a:	f002 fe01 	bl	802d560 <memp_free>
  }
}
 802a95e:	bf00      	nop
 802a960:	3708      	adds	r7, #8
 802a962:	46bd      	mov	sp, r7
 802a964:	bd80      	pop	{r7, pc}
	...

0802a968 <netbuf_free>:
 *
 * @param buf pointer to the netbuf which contains the packet buffer to free
 */
void
netbuf_free(struct netbuf *buf)
{
 802a968:	b580      	push	{r7, lr}
 802a96a:	b082      	sub	sp, #8
 802a96c:	af00      	add	r7, sp, #0
 802a96e:	6078      	str	r0, [r7, #4]
  LWIP_ERROR("netbuf_free: invalid buf", (buf != NULL), return;);
 802a970:	687b      	ldr	r3, [r7, #4]
 802a972:	2b00      	cmp	r3, #0
 802a974:	d106      	bne.n	802a984 <netbuf_free+0x1c>
 802a976:	4b0d      	ldr	r3, [pc, #52]	; (802a9ac <netbuf_free+0x44>)
 802a978:	2281      	movs	r2, #129	; 0x81
 802a97a:	490d      	ldr	r1, [pc, #52]	; (802a9b0 <netbuf_free+0x48>)
 802a97c:	480d      	ldr	r0, [pc, #52]	; (802a9b4 <netbuf_free+0x4c>)
 802a97e:	f00e fb73 	bl	8039068 <iprintf>
 802a982:	e00f      	b.n	802a9a4 <netbuf_free+0x3c>
  if (buf->p != NULL) {
 802a984:	687b      	ldr	r3, [r7, #4]
 802a986:	681b      	ldr	r3, [r3, #0]
 802a988:	2b00      	cmp	r3, #0
 802a98a:	d004      	beq.n	802a996 <netbuf_free+0x2e>
    pbuf_free(buf->p);
 802a98c:	687b      	ldr	r3, [r7, #4]
 802a98e:	681b      	ldr	r3, [r3, #0]
 802a990:	4618      	mov	r0, r3
 802a992:	f003 fcbb 	bl	802e30c <pbuf_free>
  }
  buf->p = buf->ptr = NULL;
 802a996:	687b      	ldr	r3, [r7, #4]
 802a998:	2200      	movs	r2, #0
 802a99a:	605a      	str	r2, [r3, #4]
 802a99c:	687b      	ldr	r3, [r7, #4]
 802a99e:	685a      	ldr	r2, [r3, #4]
 802a9a0:	687b      	ldr	r3, [r7, #4]
 802a9a2:	601a      	str	r2, [r3, #0]
#if LWIP_CHECKSUM_ON_COPY
  buf->flags = 0;
  buf->toport_chksum = 0;
#endif /* LWIP_CHECKSUM_ON_COPY */
}
 802a9a4:	3708      	adds	r7, #8
 802a9a6:	46bd      	mov	sp, r7
 802a9a8:	bd80      	pop	{r7, pc}
 802a9aa:	bf00      	nop
 802a9ac:	0803a464 	.word	0x0803a464
 802a9b0:	0803a500 	.word	0x0803a500
 802a9b4:	0803a4b4 	.word	0x0803a4b4

0802a9b8 <netbuf_ref>:
 * @return ERR_OK if data is referenced
 *         ERR_MEM if data couldn't be referenced due to lack of memory
 */
err_t
netbuf_ref(struct netbuf *buf, const void *dataptr, u16_t size)
{
 802a9b8:	b580      	push	{r7, lr}
 802a9ba:	b084      	sub	sp, #16
 802a9bc:	af00      	add	r7, sp, #0
 802a9be:	60f8      	str	r0, [r7, #12]
 802a9c0:	60b9      	str	r1, [r7, #8]
 802a9c2:	4613      	mov	r3, r2
 802a9c4:	80fb      	strh	r3, [r7, #6]
  LWIP_ERROR("netbuf_ref: invalid buf", (buf != NULL), return ERR_ARG;);
 802a9c6:	68fb      	ldr	r3, [r7, #12]
 802a9c8:	2b00      	cmp	r3, #0
 802a9ca:	d108      	bne.n	802a9de <netbuf_ref+0x26>
 802a9cc:	4b1c      	ldr	r3, [pc, #112]	; (802aa40 <netbuf_ref+0x88>)
 802a9ce:	2299      	movs	r2, #153	; 0x99
 802a9d0:	491c      	ldr	r1, [pc, #112]	; (802aa44 <netbuf_ref+0x8c>)
 802a9d2:	481d      	ldr	r0, [pc, #116]	; (802aa48 <netbuf_ref+0x90>)
 802a9d4:	f00e fb48 	bl	8039068 <iprintf>
 802a9d8:	f06f 030f 	mvn.w	r3, #15
 802a9dc:	e02b      	b.n	802aa36 <netbuf_ref+0x7e>
  if (buf->p != NULL) {
 802a9de:	68fb      	ldr	r3, [r7, #12]
 802a9e0:	681b      	ldr	r3, [r3, #0]
 802a9e2:	2b00      	cmp	r3, #0
 802a9e4:	d004      	beq.n	802a9f0 <netbuf_ref+0x38>
    pbuf_free(buf->p);
 802a9e6:	68fb      	ldr	r3, [r7, #12]
 802a9e8:	681b      	ldr	r3, [r3, #0]
 802a9ea:	4618      	mov	r0, r3
 802a9ec:	f003 fc8e 	bl	802e30c <pbuf_free>
  }
  buf->p = pbuf_alloc(PBUF_TRANSPORT, 0, PBUF_REF);
 802a9f0:	2241      	movs	r2, #65	; 0x41
 802a9f2:	2100      	movs	r1, #0
 802a9f4:	2036      	movs	r0, #54	; 0x36
 802a9f6:	f003 f973 	bl	802dce0 <pbuf_alloc>
 802a9fa:	4602      	mov	r2, r0
 802a9fc:	68fb      	ldr	r3, [r7, #12]
 802a9fe:	601a      	str	r2, [r3, #0]
  if (buf->p == NULL) {
 802aa00:	68fb      	ldr	r3, [r7, #12]
 802aa02:	681b      	ldr	r3, [r3, #0]
 802aa04:	2b00      	cmp	r3, #0
 802aa06:	d105      	bne.n	802aa14 <netbuf_ref+0x5c>
    buf->ptr = NULL;
 802aa08:	68fb      	ldr	r3, [r7, #12]
 802aa0a:	2200      	movs	r2, #0
 802aa0c:	605a      	str	r2, [r3, #4]
    return ERR_MEM;
 802aa0e:	f04f 33ff 	mov.w	r3, #4294967295
 802aa12:	e010      	b.n	802aa36 <netbuf_ref+0x7e>
  }
  ((struct pbuf_rom *)buf->p)->payload = dataptr;
 802aa14:	68fb      	ldr	r3, [r7, #12]
 802aa16:	681b      	ldr	r3, [r3, #0]
 802aa18:	68ba      	ldr	r2, [r7, #8]
 802aa1a:	605a      	str	r2, [r3, #4]
  buf->p->len = buf->p->tot_len = size;
 802aa1c:	68fb      	ldr	r3, [r7, #12]
 802aa1e:	681b      	ldr	r3, [r3, #0]
 802aa20:	88fa      	ldrh	r2, [r7, #6]
 802aa22:	811a      	strh	r2, [r3, #8]
 802aa24:	68fa      	ldr	r2, [r7, #12]
 802aa26:	6812      	ldr	r2, [r2, #0]
 802aa28:	891b      	ldrh	r3, [r3, #8]
 802aa2a:	8153      	strh	r3, [r2, #10]
  buf->ptr = buf->p;
 802aa2c:	68fb      	ldr	r3, [r7, #12]
 802aa2e:	681a      	ldr	r2, [r3, #0]
 802aa30:	68fb      	ldr	r3, [r7, #12]
 802aa32:	605a      	str	r2, [r3, #4]
  return ERR_OK;
 802aa34:	2300      	movs	r3, #0
}
 802aa36:	4618      	mov	r0, r3
 802aa38:	3710      	adds	r7, #16
 802aa3a:	46bd      	mov	sp, r7
 802aa3c:	bd80      	pop	{r7, pc}
 802aa3e:	bf00      	nop
 802aa40:	0803a464 	.word	0x0803a464
 802aa44:	0803a51c 	.word	0x0803a51c
 802aa48:	0803a4b4 	.word	0x0803a4b4

0802aa4c <tryget_socket_unconn_nouse>:
#endif /* LWIP_NETCONN_FULLDUPLEX */

/* Translate a socket 'int' into a pointer (only fails if the index is invalid) */
static struct lwip_sock *
tryget_socket_unconn_nouse(int fd)
{
 802aa4c:	b480      	push	{r7}
 802aa4e:	b085      	sub	sp, #20
 802aa50:	af00      	add	r7, sp, #0
 802aa52:	6078      	str	r0, [r7, #4]
  int s = fd - LWIP_SOCKET_OFFSET;
 802aa54:	687b      	ldr	r3, [r7, #4]
 802aa56:	60fb      	str	r3, [r7, #12]
  if ((s < 0) || (s >= NUM_SOCKETS)) {
 802aa58:	68fb      	ldr	r3, [r7, #12]
 802aa5a:	2b00      	cmp	r3, #0
 802aa5c:	db02      	blt.n	802aa64 <tryget_socket_unconn_nouse+0x18>
 802aa5e:	68fb      	ldr	r3, [r7, #12]
 802aa60:	2b07      	cmp	r3, #7
 802aa62:	dd01      	ble.n	802aa68 <tryget_socket_unconn_nouse+0x1c>
    LWIP_DEBUGF(SOCKETS_DEBUG, ("tryget_socket_unconn(%d): invalid\n", fd));
    return NULL;
 802aa64:	2300      	movs	r3, #0
 802aa66:	e003      	b.n	802aa70 <tryget_socket_unconn_nouse+0x24>
  }
  return &sockets[s];
 802aa68:	68fb      	ldr	r3, [r7, #12]
 802aa6a:	011b      	lsls	r3, r3, #4
 802aa6c:	4a03      	ldr	r2, [pc, #12]	; (802aa7c <tryget_socket_unconn_nouse+0x30>)
 802aa6e:	4413      	add	r3, r2
}
 802aa70:	4618      	mov	r0, r3
 802aa72:	3714      	adds	r7, #20
 802aa74:	46bd      	mov	sp, r7
 802aa76:	f85d 7b04 	ldr.w	r7, [sp], #4
 802aa7a:	4770      	bx	lr
 802aa7c:	2000b28c 	.word	0x2000b28c

0802aa80 <tryget_socket_unconn>:
}

/* Translate a socket 'int' into a pointer (only fails if the index is invalid) */
static struct lwip_sock *
tryget_socket_unconn(int fd)
{
 802aa80:	b580      	push	{r7, lr}
 802aa82:	b084      	sub	sp, #16
 802aa84:	af00      	add	r7, sp, #0
 802aa86:	6078      	str	r0, [r7, #4]
  struct lwip_sock *ret = tryget_socket_unconn_nouse(fd);
 802aa88:	6878      	ldr	r0, [r7, #4]
 802aa8a:	f7ff ffdf 	bl	802aa4c <tryget_socket_unconn_nouse>
 802aa8e:	60f8      	str	r0, [r7, #12]
  if (ret != NULL) {
    if (!sock_inc_used(ret)) {
      return NULL;
    }
  }
  return ret;
 802aa90:	68fb      	ldr	r3, [r7, #12]
}
 802aa92:	4618      	mov	r0, r3
 802aa94:	3710      	adds	r7, #16
 802aa96:	46bd      	mov	sp, r7
 802aa98:	bd80      	pop	{r7, pc}

0802aa9a <tryget_socket_unconn_locked>:

/* Like tryget_socket_unconn(), but called under SYS_ARCH_PROTECT lock. */
static struct lwip_sock *
tryget_socket_unconn_locked(int fd)
{
 802aa9a:	b580      	push	{r7, lr}
 802aa9c:	b084      	sub	sp, #16
 802aa9e:	af00      	add	r7, sp, #0
 802aaa0:	6078      	str	r0, [r7, #4]
  struct lwip_sock *ret = tryget_socket_unconn_nouse(fd);
 802aaa2:	6878      	ldr	r0, [r7, #4]
 802aaa4:	f7ff ffd2 	bl	802aa4c <tryget_socket_unconn_nouse>
 802aaa8:	60f8      	str	r0, [r7, #12]
  if (ret != NULL) {
    if (!sock_inc_used_locked(ret)) {
      return NULL;
    }
  }
  return ret;
 802aaaa:	68fb      	ldr	r3, [r7, #12]
}
 802aaac:	4618      	mov	r0, r3
 802aaae:	3710      	adds	r7, #16
 802aab0:	46bd      	mov	sp, r7
 802aab2:	bd80      	pop	{r7, pc}

0802aab4 <tryget_socket>:
 * @param fd externally used socket index
 * @return struct lwip_sock for the socket or NULL if not found
 */
static struct lwip_sock *
tryget_socket(int fd)
{
 802aab4:	b580      	push	{r7, lr}
 802aab6:	b084      	sub	sp, #16
 802aab8:	af00      	add	r7, sp, #0
 802aaba:	6078      	str	r0, [r7, #4]
  struct lwip_sock *sock = tryget_socket_unconn(fd);
 802aabc:	6878      	ldr	r0, [r7, #4]
 802aabe:	f7ff ffdf 	bl	802aa80 <tryget_socket_unconn>
 802aac2:	60f8      	str	r0, [r7, #12]
  if (sock != NULL) {
 802aac4:	68fb      	ldr	r3, [r7, #12]
 802aac6:	2b00      	cmp	r3, #0
 802aac8:	d005      	beq.n	802aad6 <tryget_socket+0x22>
    if (sock->conn) {
 802aaca:	68fb      	ldr	r3, [r7, #12]
 802aacc:	681b      	ldr	r3, [r3, #0]
 802aace:	2b00      	cmp	r3, #0
 802aad0:	d001      	beq.n	802aad6 <tryget_socket+0x22>
      return sock;
 802aad2:	68fb      	ldr	r3, [r7, #12]
 802aad4:	e000      	b.n	802aad8 <tryget_socket+0x24>
    }
    done_socket(sock);
  }
  return NULL;
 802aad6:	2300      	movs	r3, #0
}
 802aad8:	4618      	mov	r0, r3
 802aada:	3710      	adds	r7, #16
 802aadc:	46bd      	mov	sp, r7
 802aade:	bd80      	pop	{r7, pc}

0802aae0 <get_socket>:
 * @param fd externally used socket index
 * @return struct lwip_sock for the socket or NULL if not found
 */
static struct lwip_sock *
get_socket(int fd)
{
 802aae0:	b580      	push	{r7, lr}
 802aae2:	b084      	sub	sp, #16
 802aae4:	af00      	add	r7, sp, #0
 802aae6:	6078      	str	r0, [r7, #4]
  struct lwip_sock *sock = tryget_socket(fd);
 802aae8:	6878      	ldr	r0, [r7, #4]
 802aaea:	f7ff ffe3 	bl	802aab4 <tryget_socket>
 802aaee:	60f8      	str	r0, [r7, #12]
  if (!sock) {
 802aaf0:	68fb      	ldr	r3, [r7, #12]
 802aaf2:	2b00      	cmp	r3, #0
 802aaf4:	d104      	bne.n	802ab00 <get_socket+0x20>
    if ((fd < LWIP_SOCKET_OFFSET) || (fd >= (LWIP_SOCKET_OFFSET + NUM_SOCKETS))) {
      LWIP_DEBUGF(SOCKETS_DEBUG, ("get_socket(%d): invalid\n", fd));
    }
    set_errno(EBADF);
 802aaf6:	4b05      	ldr	r3, [pc, #20]	; (802ab0c <get_socket+0x2c>)
 802aaf8:	2209      	movs	r2, #9
 802aafa:	601a      	str	r2, [r3, #0]
    return NULL;
 802aafc:	2300      	movs	r3, #0
 802aafe:	e000      	b.n	802ab02 <get_socket+0x22>
  }
  return sock;
 802ab00:	68fb      	ldr	r3, [r7, #12]
}
 802ab02:	4618      	mov	r0, r3
 802ab04:	3710      	adds	r7, #16
 802ab06:	46bd      	mov	sp, r7
 802ab08:	bd80      	pop	{r7, pc}
 802ab0a:	bf00      	nop
 802ab0c:	2000f06c 	.word	0x2000f06c

0802ab10 <alloc_socket>:
 *                 0 if socket has been created by socket()
 * @return the index of the new socket; -1 on error
 */
static int
alloc_socket(struct netconn *newconn, int accepted)
{
 802ab10:	b580      	push	{r7, lr}
 802ab12:	b084      	sub	sp, #16
 802ab14:	af00      	add	r7, sp, #0
 802ab16:	6078      	str	r0, [r7, #4]
 802ab18:	6039      	str	r1, [r7, #0]
  int i;
  SYS_ARCH_DECL_PROTECT(lev);
  LWIP_UNUSED_ARG(accepted);

  /* allocate a new socket identifier */
  for (i = 0; i < NUM_SOCKETS; ++i) {
 802ab1a:	2300      	movs	r3, #0
 802ab1c:	60fb      	str	r3, [r7, #12]
 802ab1e:	e052      	b.n	802abc6 <alloc_socket+0xb6>
    /* Protect socket array */
    SYS_ARCH_PROTECT(lev);
 802ab20:	f00d fd14 	bl	803854c <sys_arch_protect>
 802ab24:	60b8      	str	r0, [r7, #8]
    if (!sockets[i].conn) {
 802ab26:	4a2c      	ldr	r2, [pc, #176]	; (802abd8 <alloc_socket+0xc8>)
 802ab28:	68fb      	ldr	r3, [r7, #12]
 802ab2a:	011b      	lsls	r3, r3, #4
 802ab2c:	4413      	add	r3, r2
 802ab2e:	681b      	ldr	r3, [r3, #0]
 802ab30:	2b00      	cmp	r3, #0
 802ab32:	d142      	bne.n	802abba <alloc_socket+0xaa>
        continue;
      }
      sockets[i].fd_used    = 1;
      sockets[i].fd_free_pending = 0;
#endif
      sockets[i].conn       = newconn;
 802ab34:	4a28      	ldr	r2, [pc, #160]	; (802abd8 <alloc_socket+0xc8>)
 802ab36:	68fb      	ldr	r3, [r7, #12]
 802ab38:	011b      	lsls	r3, r3, #4
 802ab3a:	4413      	add	r3, r2
 802ab3c:	687a      	ldr	r2, [r7, #4]
 802ab3e:	601a      	str	r2, [r3, #0]
      /* The socket is not yet known to anyone, so no need to protect
         after having marked it as used. */
      SYS_ARCH_UNPROTECT(lev);
 802ab40:	68b8      	ldr	r0, [r7, #8]
 802ab42:	f00d fd11 	bl	8038568 <sys_arch_unprotect>
      sockets[i].lastdata.pbuf = NULL;
 802ab46:	4a24      	ldr	r2, [pc, #144]	; (802abd8 <alloc_socket+0xc8>)
 802ab48:	68fb      	ldr	r3, [r7, #12]
 802ab4a:	011b      	lsls	r3, r3, #4
 802ab4c:	4413      	add	r3, r2
 802ab4e:	3304      	adds	r3, #4
 802ab50:	2200      	movs	r2, #0
 802ab52:	601a      	str	r2, [r3, #0]
#if LWIP_SOCKET_SELECT || LWIP_SOCKET_POLL
      LWIP_ASSERT("sockets[i].select_waiting == 0", sockets[i].select_waiting == 0);
 802ab54:	4a20      	ldr	r2, [pc, #128]	; (802abd8 <alloc_socket+0xc8>)
 802ab56:	68fb      	ldr	r3, [r7, #12]
 802ab58:	011b      	lsls	r3, r3, #4
 802ab5a:	4413      	add	r3, r2
 802ab5c:	330e      	adds	r3, #14
 802ab5e:	781b      	ldrb	r3, [r3, #0]
 802ab60:	2b00      	cmp	r3, #0
 802ab62:	d006      	beq.n	802ab72 <alloc_socket+0x62>
 802ab64:	4b1d      	ldr	r3, [pc, #116]	; (802abdc <alloc_socket+0xcc>)
 802ab66:	f240 220e 	movw	r2, #526	; 0x20e
 802ab6a:	491d      	ldr	r1, [pc, #116]	; (802abe0 <alloc_socket+0xd0>)
 802ab6c:	481d      	ldr	r0, [pc, #116]	; (802abe4 <alloc_socket+0xd4>)
 802ab6e:	f00e fa7b 	bl	8039068 <iprintf>
      sockets[i].rcvevent   = 0;
 802ab72:	4a19      	ldr	r2, [pc, #100]	; (802abd8 <alloc_socket+0xc8>)
 802ab74:	68fb      	ldr	r3, [r7, #12]
 802ab76:	011b      	lsls	r3, r3, #4
 802ab78:	4413      	add	r3, r2
 802ab7a:	3308      	adds	r3, #8
 802ab7c:	2200      	movs	r2, #0
 802ab7e:	801a      	strh	r2, [r3, #0]
      /* TCP sendbuf is empty, but the socket is not yet writable until connected
       * (unless it has been created by accept()). */
      sockets[i].sendevent  = (NETCONNTYPE_GROUP(newconn->type) == NETCONN_TCP ? (accepted != 0) : 1);
 802ab80:	687b      	ldr	r3, [r7, #4]
 802ab82:	781b      	ldrb	r3, [r3, #0]
 802ab84:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 802ab88:	2b10      	cmp	r3, #16
 802ab8a:	d102      	bne.n	802ab92 <alloc_socket+0x82>
 802ab8c:	683b      	ldr	r3, [r7, #0]
 802ab8e:	2b00      	cmp	r3, #0
 802ab90:	d001      	beq.n	802ab96 <alloc_socket+0x86>
 802ab92:	2301      	movs	r3, #1
 802ab94:	e000      	b.n	802ab98 <alloc_socket+0x88>
 802ab96:	2300      	movs	r3, #0
 802ab98:	b299      	uxth	r1, r3
 802ab9a:	4a0f      	ldr	r2, [pc, #60]	; (802abd8 <alloc_socket+0xc8>)
 802ab9c:	68fb      	ldr	r3, [r7, #12]
 802ab9e:	011b      	lsls	r3, r3, #4
 802aba0:	4413      	add	r3, r2
 802aba2:	330a      	adds	r3, #10
 802aba4:	460a      	mov	r2, r1
 802aba6:	801a      	strh	r2, [r3, #0]
      sockets[i].errevent   = 0;
 802aba8:	4a0b      	ldr	r2, [pc, #44]	; (802abd8 <alloc_socket+0xc8>)
 802abaa:	68fb      	ldr	r3, [r7, #12]
 802abac:	011b      	lsls	r3, r3, #4
 802abae:	4413      	add	r3, r2
 802abb0:	330c      	adds	r3, #12
 802abb2:	2200      	movs	r2, #0
 802abb4:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_SOCKET_SELECT || LWIP_SOCKET_POLL */
      return i + LWIP_SOCKET_OFFSET;
 802abb6:	68fb      	ldr	r3, [r7, #12]
 802abb8:	e00a      	b.n	802abd0 <alloc_socket+0xc0>
    }
    SYS_ARCH_UNPROTECT(lev);
 802abba:	68b8      	ldr	r0, [r7, #8]
 802abbc:	f00d fcd4 	bl	8038568 <sys_arch_unprotect>
  for (i = 0; i < NUM_SOCKETS; ++i) {
 802abc0:	68fb      	ldr	r3, [r7, #12]
 802abc2:	3301      	adds	r3, #1
 802abc4:	60fb      	str	r3, [r7, #12]
 802abc6:	68fb      	ldr	r3, [r7, #12]
 802abc8:	2b07      	cmp	r3, #7
 802abca:	dda9      	ble.n	802ab20 <alloc_socket+0x10>
  }
  return -1;
 802abcc:	f04f 33ff 	mov.w	r3, #4294967295
}
 802abd0:	4618      	mov	r0, r3
 802abd2:	3710      	adds	r7, #16
 802abd4:	46bd      	mov	sp, r7
 802abd6:	bd80      	pop	{r7, pc}
 802abd8:	2000b28c 	.word	0x2000b28c
 802abdc:	0803a5fc 	.word	0x0803a5fc
 802abe0:	0803a630 	.word	0x0803a630
 802abe4:	0803a650 	.word	0x0803a650

0802abe8 <free_socket_locked>:
 * @param lastdata lastdata is stored here, must be freed externally
 */
static int
free_socket_locked(struct lwip_sock *sock, int is_tcp, struct netconn **conn,
                   union lwip_sock_lastdata *lastdata)
{
 802abe8:	b480      	push	{r7}
 802abea:	b085      	sub	sp, #20
 802abec:	af00      	add	r7, sp, #0
 802abee:	60f8      	str	r0, [r7, #12]
 802abf0:	60b9      	str	r1, [r7, #8]
 802abf2:	607a      	str	r2, [r7, #4]
 802abf4:	603b      	str	r3, [r7, #0]
  }
#else /* LWIP_NETCONN_FULLDUPLEX */
  LWIP_UNUSED_ARG(is_tcp);
#endif /* LWIP_NETCONN_FULLDUPLEX */

  *lastdata = sock->lastdata;
 802abf6:	683b      	ldr	r3, [r7, #0]
 802abf8:	68fa      	ldr	r2, [r7, #12]
 802abfa:	6852      	ldr	r2, [r2, #4]
 802abfc:	601a      	str	r2, [r3, #0]
  sock->lastdata.pbuf = NULL;
 802abfe:	68fb      	ldr	r3, [r7, #12]
 802ac00:	2200      	movs	r2, #0
 802ac02:	605a      	str	r2, [r3, #4]
  *conn = sock->conn;
 802ac04:	68fb      	ldr	r3, [r7, #12]
 802ac06:	681a      	ldr	r2, [r3, #0]
 802ac08:	687b      	ldr	r3, [r7, #4]
 802ac0a:	601a      	str	r2, [r3, #0]
  sock->conn = NULL;
 802ac0c:	68fb      	ldr	r3, [r7, #12]
 802ac0e:	2200      	movs	r2, #0
 802ac10:	601a      	str	r2, [r3, #0]
  return 1;
 802ac12:	2301      	movs	r3, #1
}
 802ac14:	4618      	mov	r0, r3
 802ac16:	3714      	adds	r7, #20
 802ac18:	46bd      	mov	sp, r7
 802ac1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 802ac1e:	4770      	bx	lr

0802ac20 <free_socket_free_elements>:

/** Free a socket's leftover members.
 */
static void
free_socket_free_elements(int is_tcp, struct netconn *conn, union lwip_sock_lastdata *lastdata)
{
 802ac20:	b580      	push	{r7, lr}
 802ac22:	b084      	sub	sp, #16
 802ac24:	af00      	add	r7, sp, #0
 802ac26:	60f8      	str	r0, [r7, #12]
 802ac28:	60b9      	str	r1, [r7, #8]
 802ac2a:	607a      	str	r2, [r7, #4]
  if (lastdata->pbuf != NULL) {
 802ac2c:	687b      	ldr	r3, [r7, #4]
 802ac2e:	681b      	ldr	r3, [r3, #0]
 802ac30:	2b00      	cmp	r3, #0
 802ac32:	d00d      	beq.n	802ac50 <free_socket_free_elements+0x30>
    if (is_tcp) {
 802ac34:	68fb      	ldr	r3, [r7, #12]
 802ac36:	2b00      	cmp	r3, #0
 802ac38:	d005      	beq.n	802ac46 <free_socket_free_elements+0x26>
      pbuf_free(lastdata->pbuf);
 802ac3a:	687b      	ldr	r3, [r7, #4]
 802ac3c:	681b      	ldr	r3, [r3, #0]
 802ac3e:	4618      	mov	r0, r3
 802ac40:	f003 fb64 	bl	802e30c <pbuf_free>
 802ac44:	e004      	b.n	802ac50 <free_socket_free_elements+0x30>
    } else {
      netbuf_delete(lastdata->netbuf);
 802ac46:	687b      	ldr	r3, [r7, #4]
 802ac48:	681b      	ldr	r3, [r3, #0]
 802ac4a:	4618      	mov	r0, r3
 802ac4c:	f7ff fe6c 	bl	802a928 <netbuf_delete>
    }
  }
  if (conn != NULL) {
 802ac50:	68bb      	ldr	r3, [r7, #8]
 802ac52:	2b00      	cmp	r3, #0
 802ac54:	d002      	beq.n	802ac5c <free_socket_free_elements+0x3c>
    /* netconn_prepare_delete() has already been called, here we only free the conn */
    netconn_delete(conn);
 802ac56:	68b8      	ldr	r0, [r7, #8]
 802ac58:	f7fd fcc4 	bl	80285e4 <netconn_delete>
  }
}
 802ac5c:	bf00      	nop
 802ac5e:	3710      	adds	r7, #16
 802ac60:	46bd      	mov	sp, r7
 802ac62:	bd80      	pop	{r7, pc}

0802ac64 <free_socket>:
 * @param sock the socket to free
 * @param is_tcp != 0 for TCP sockets, used to free lastdata
 */
static void
free_socket(struct lwip_sock *sock, int is_tcp)
{
 802ac64:	b580      	push	{r7, lr}
 802ac66:	b086      	sub	sp, #24
 802ac68:	af00      	add	r7, sp, #0
 802ac6a:	6078      	str	r0, [r7, #4]
 802ac6c:	6039      	str	r1, [r7, #0]
  struct netconn *conn;
  union lwip_sock_lastdata lastdata;
  SYS_ARCH_DECL_PROTECT(lev);

  /* Protect socket array */
  SYS_ARCH_PROTECT(lev);
 802ac6e:	f00d fc6d 	bl	803854c <sys_arch_protect>
 802ac72:	6178      	str	r0, [r7, #20]

  freed = free_socket_locked(sock, is_tcp, &conn, &lastdata);
 802ac74:	f107 0308 	add.w	r3, r7, #8
 802ac78:	f107 020c 	add.w	r2, r7, #12
 802ac7c:	6839      	ldr	r1, [r7, #0]
 802ac7e:	6878      	ldr	r0, [r7, #4]
 802ac80:	f7ff ffb2 	bl	802abe8 <free_socket_locked>
 802ac84:	6138      	str	r0, [r7, #16]
  SYS_ARCH_UNPROTECT(lev);
 802ac86:	6978      	ldr	r0, [r7, #20]
 802ac88:	f00d fc6e 	bl	8038568 <sys_arch_unprotect>
  /* don't use 'sock' after this line, as another task might have allocated it */

  if (freed) {
 802ac8c:	693b      	ldr	r3, [r7, #16]
 802ac8e:	2b00      	cmp	r3, #0
 802ac90:	d006      	beq.n	802aca0 <free_socket+0x3c>
    free_socket_free_elements(is_tcp, conn, &lastdata);
 802ac92:	68fb      	ldr	r3, [r7, #12]
 802ac94:	f107 0208 	add.w	r2, r7, #8
 802ac98:	4619      	mov	r1, r3
 802ac9a:	6838      	ldr	r0, [r7, #0]
 802ac9c:	f7ff ffc0 	bl	802ac20 <free_socket_free_elements>
  }
}
 802aca0:	bf00      	nop
 802aca2:	3718      	adds	r7, #24
 802aca4:	46bd      	mov	sp, r7
 802aca6:	bd80      	pop	{r7, pc}

0802aca8 <lwip_accept>:
 * Exceptions are documented!
 */

int
lwip_accept(int s, struct sockaddr *addr, socklen_t *addrlen)
{
 802aca8:	b590      	push	{r4, r7, lr}
 802acaa:	b099      	sub	sp, #100	; 0x64
 802acac:	af00      	add	r7, sp, #0
 802acae:	60f8      	str	r0, [r7, #12]
 802acb0:	60b9      	str	r1, [r7, #8]
 802acb2:	607a      	str	r2, [r7, #4]
  struct lwip_sock *sock, *nsock;
  struct netconn *newconn;
  ip_addr_t naddr;
  u16_t port = 0;
 802acb4:	2300      	movs	r3, #0
 802acb6:	84fb      	strh	r3, [r7, #38]	; 0x26
  err_t err;
  int recvevent;
  SYS_ARCH_DECL_PROTECT(lev);

  LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_accept(%d)...\n", s));
  sock = get_socket(s);
 802acb8:	68f8      	ldr	r0, [r7, #12]
 802acba:	f7ff ff11 	bl	802aae0 <get_socket>
 802acbe:	65b8      	str	r0, [r7, #88]	; 0x58
  if (!sock) {
 802acc0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 802acc2:	2b00      	cmp	r3, #0
 802acc4:	d102      	bne.n	802accc <lwip_accept+0x24>
    return -1;
 802acc6:	f04f 33ff 	mov.w	r3, #4294967295
 802acca:	e0f8      	b.n	802aebe <lwip_accept+0x216>
  }

  /* wait for a new connection */
  err = netconn_accept(sock->conn, &newconn);
 802accc:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 802acce:	681b      	ldr	r3, [r3, #0]
 802acd0:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 802acd4:	4611      	mov	r1, r2
 802acd6:	4618      	mov	r0, r3
 802acd8:	f7fd fd56 	bl	8028788 <netconn_accept>
 802acdc:	4603      	mov	r3, r0
 802acde:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
  if (err != ERR_OK) {
 802ace2:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 802ace6:	2b00      	cmp	r3, #0
 802ace8:	d02c      	beq.n	802ad44 <lwip_accept+0x9c>
    LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_accept(%d): netconn_acept failed, err=%d\n", s, err));
    if (NETCONNTYPE_GROUP(netconn_type(sock->conn)) != NETCONN_TCP) {
 802acea:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 802acec:	681b      	ldr	r3, [r3, #0]
 802acee:	781b      	ldrb	r3, [r3, #0]
 802acf0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 802acf4:	2b10      	cmp	r3, #16
 802acf6:	d008      	beq.n	802ad0a <lwip_accept+0x62>
      sock_set_errno(sock, EOPNOTSUPP);
 802acf8:	235f      	movs	r3, #95	; 0x5f
 802acfa:	633b      	str	r3, [r7, #48]	; 0x30
 802acfc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 802acfe:	2b00      	cmp	r3, #0
 802ad00:	d01d      	beq.n	802ad3e <lwip_accept+0x96>
 802ad02:	4a71      	ldr	r2, [pc, #452]	; (802aec8 <lwip_accept+0x220>)
 802ad04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 802ad06:	6013      	str	r3, [r2, #0]
 802ad08:	e019      	b.n	802ad3e <lwip_accept+0x96>
    } else if (err == ERR_CLSD) {
 802ad0a:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 802ad0e:	f113 0f0f 	cmn.w	r3, #15
 802ad12:	d108      	bne.n	802ad26 <lwip_accept+0x7e>
      sock_set_errno(sock, EINVAL);
 802ad14:	2316      	movs	r3, #22
 802ad16:	637b      	str	r3, [r7, #52]	; 0x34
 802ad18:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 802ad1a:	2b00      	cmp	r3, #0
 802ad1c:	d00f      	beq.n	802ad3e <lwip_accept+0x96>
 802ad1e:	4a6a      	ldr	r2, [pc, #424]	; (802aec8 <lwip_accept+0x220>)
 802ad20:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 802ad22:	6013      	str	r3, [r2, #0]
 802ad24:	e00b      	b.n	802ad3e <lwip_accept+0x96>
    } else {
      sock_set_errno(sock, err_to_errno(err));
 802ad26:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 802ad2a:	4618      	mov	r0, r3
 802ad2c:	f7ff fdde 	bl	802a8ec <err_to_errno>
 802ad30:	63b8      	str	r0, [r7, #56]	; 0x38
 802ad32:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 802ad34:	2b00      	cmp	r3, #0
 802ad36:	d002      	beq.n	802ad3e <lwip_accept+0x96>
 802ad38:	4a63      	ldr	r2, [pc, #396]	; (802aec8 <lwip_accept+0x220>)
 802ad3a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 802ad3c:	6013      	str	r3, [r2, #0]
    }
    done_socket(sock);
    return -1;
 802ad3e:	f04f 33ff 	mov.w	r3, #4294967295
 802ad42:	e0bc      	b.n	802aebe <lwip_accept+0x216>
  }
  LWIP_ASSERT("newconn != NULL", newconn != NULL);
 802ad44:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 802ad46:	2b00      	cmp	r3, #0
 802ad48:	d106      	bne.n	802ad58 <lwip_accept+0xb0>
 802ad4a:	4b60      	ldr	r3, [pc, #384]	; (802aecc <lwip_accept+0x224>)
 802ad4c:	f240 228b 	movw	r2, #651	; 0x28b
 802ad50:	495f      	ldr	r1, [pc, #380]	; (802aed0 <lwip_accept+0x228>)
 802ad52:	4860      	ldr	r0, [pc, #384]	; (802aed4 <lwip_accept+0x22c>)
 802ad54:	f00e f988 	bl	8039068 <iprintf>

  newsock = alloc_socket(newconn, 1);
 802ad58:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 802ad5a:	2101      	movs	r1, #1
 802ad5c:	4618      	mov	r0, r3
 802ad5e:	f7ff fed7 	bl	802ab10 <alloc_socket>
 802ad62:	6538      	str	r0, [r7, #80]	; 0x50
  if (newsock == -1) {
 802ad64:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 802ad66:	f1b3 3fff 	cmp.w	r3, #4294967295
 802ad6a:	d10e      	bne.n	802ad8a <lwip_accept+0xe2>
    netconn_delete(newconn);
 802ad6c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 802ad6e:	4618      	mov	r0, r3
 802ad70:	f7fd fc38 	bl	80285e4 <netconn_delete>
    sock_set_errno(sock, ENFILE);
 802ad74:	2317      	movs	r3, #23
 802ad76:	63fb      	str	r3, [r7, #60]	; 0x3c
 802ad78:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 802ad7a:	2b00      	cmp	r3, #0
 802ad7c:	d002      	beq.n	802ad84 <lwip_accept+0xdc>
 802ad7e:	4a52      	ldr	r2, [pc, #328]	; (802aec8 <lwip_accept+0x220>)
 802ad80:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 802ad82:	6013      	str	r3, [r2, #0]
    done_socket(sock);
    return -1;
 802ad84:	f04f 33ff 	mov.w	r3, #4294967295
 802ad88:	e099      	b.n	802aebe <lwip_accept+0x216>
  }
  LWIP_ASSERT("invalid socket index", (newsock >= LWIP_SOCKET_OFFSET) && (newsock < NUM_SOCKETS + LWIP_SOCKET_OFFSET));
 802ad8a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 802ad8c:	2b00      	cmp	r3, #0
 802ad8e:	db02      	blt.n	802ad96 <lwip_accept+0xee>
 802ad90:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 802ad92:	2b07      	cmp	r3, #7
 802ad94:	dd06      	ble.n	802ada4 <lwip_accept+0xfc>
 802ad96:	4b4d      	ldr	r3, [pc, #308]	; (802aecc <lwip_accept+0x224>)
 802ad98:	f44f 7225 	mov.w	r2, #660	; 0x294
 802ad9c:	494e      	ldr	r1, [pc, #312]	; (802aed8 <lwip_accept+0x230>)
 802ad9e:	484d      	ldr	r0, [pc, #308]	; (802aed4 <lwip_accept+0x22c>)
 802ada0:	f00e f962 	bl	8039068 <iprintf>
  nsock = &sockets[newsock - LWIP_SOCKET_OFFSET];
 802ada4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 802ada6:	011b      	lsls	r3, r3, #4
 802ada8:	4a4c      	ldr	r2, [pc, #304]	; (802aedc <lwip_accept+0x234>)
 802adaa:	4413      	add	r3, r2
 802adac:	64fb      	str	r3, [r7, #76]	; 0x4c
  /* See event_callback: If data comes in right away after an accept, even
   * though the server task might not have created a new socket yet.
   * In that case, newconn->socket is counted down (newconn->socket--),
   * so nsock->rcvevent is >= 1 here!
   */
  SYS_ARCH_PROTECT(lev);
 802adae:	f00d fbcd 	bl	803854c <sys_arch_protect>
 802adb2:	64b8      	str	r0, [r7, #72]	; 0x48
  recvevent = (s16_t)(-1 - newconn->socket);
 802adb4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 802adb6:	699b      	ldr	r3, [r3, #24]
 802adb8:	b21b      	sxth	r3, r3
 802adba:	43db      	mvns	r3, r3
 802adbc:	b21b      	sxth	r3, r3
 802adbe:	65fb      	str	r3, [r7, #92]	; 0x5c
  newconn->socket = newsock;
 802adc0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 802adc2:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 802adc4:	619a      	str	r2, [r3, #24]
  SYS_ARCH_UNPROTECT(lev);
 802adc6:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 802adc8:	f00d fbce 	bl	8038568 <sys_arch_unprotect>

  if (newconn->callback) {
 802adcc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 802adce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 802add0:	2b00      	cmp	r3, #0
 802add2:	d012      	beq.n	802adfa <lwip_accept+0x152>
    LOCK_TCPIP_CORE();
 802add4:	4842      	ldr	r0, [pc, #264]	; (802aee0 <lwip_accept+0x238>)
 802add6:	f00d fb77 	bl	80384c8 <sys_mutex_lock>
    while (recvevent > 0) {
 802adda:	e008      	b.n	802adee <lwip_accept+0x146>
      recvevent--;
 802addc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 802adde:	3b01      	subs	r3, #1
 802ade0:	65fb      	str	r3, [r7, #92]	; 0x5c
      newconn->callback(newconn, NETCONN_EVT_RCVPLUS, 0);
 802ade2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 802ade4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 802ade6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 802ade8:	2200      	movs	r2, #0
 802adea:	2100      	movs	r1, #0
 802adec:	4798      	blx	r3
    while (recvevent > 0) {
 802adee:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 802adf0:	2b00      	cmp	r3, #0
 802adf2:	dcf3      	bgt.n	802addc <lwip_accept+0x134>
    }
    UNLOCK_TCPIP_CORE();
 802adf4:	483a      	ldr	r0, [pc, #232]	; (802aee0 <lwip_accept+0x238>)
 802adf6:	f00d fb76 	bl	80384e6 <sys_mutex_unlock>
  }

  /* Note that POSIX only requires us to check addr is non-NULL. addrlen must
   * not be NULL if addr is valid.
   */
  if ((addr != NULL) && (addrlen != NULL)) {
 802adfa:	68bb      	ldr	r3, [r7, #8]
 802adfc:	2b00      	cmp	r3, #0
 802adfe:	d055      	beq.n	802aeac <lwip_accept+0x204>
 802ae00:	687b      	ldr	r3, [r7, #4]
 802ae02:	2b00      	cmp	r3, #0
 802ae04:	d052      	beq.n	802aeac <lwip_accept+0x204>
    union sockaddr_aligned tempaddr;
    /* get the IP address and port of the remote host */
    err = netconn_peer(newconn, &naddr, &port);
 802ae06:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 802ae08:	f107 0226 	add.w	r2, r7, #38	; 0x26
 802ae0c:	f107 0128 	add.w	r1, r7, #40	; 0x28
 802ae10:	2300      	movs	r3, #0
 802ae12:	f7fd fc03 	bl	802861c <netconn_getaddr>
 802ae16:	4603      	mov	r3, r0
 802ae18:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
    if (err != ERR_OK) {
 802ae1c:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 802ae20:	2b00      	cmp	r3, #0
 802ae22:	d016      	beq.n	802ae52 <lwip_accept+0x1aa>
      LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_accept(%d): netconn_peer failed, err=%d\n", s, err));
      netconn_delete(newconn);
 802ae24:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 802ae26:	4618      	mov	r0, r3
 802ae28:	f7fd fbdc 	bl	80285e4 <netconn_delete>
      free_socket(nsock, 1);
 802ae2c:	2101      	movs	r1, #1
 802ae2e:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 802ae30:	f7ff ff18 	bl	802ac64 <free_socket>
      sock_set_errno(sock, err_to_errno(err));
 802ae34:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 802ae38:	4618      	mov	r0, r3
 802ae3a:	f7ff fd57 	bl	802a8ec <err_to_errno>
 802ae3e:	6478      	str	r0, [r7, #68]	; 0x44
 802ae40:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 802ae42:	2b00      	cmp	r3, #0
 802ae44:	d002      	beq.n	802ae4c <lwip_accept+0x1a4>
 802ae46:	4a20      	ldr	r2, [pc, #128]	; (802aec8 <lwip_accept+0x220>)
 802ae48:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 802ae4a:	6013      	str	r3, [r2, #0]
      done_socket(sock);
      return -1;
 802ae4c:	f04f 33ff 	mov.w	r3, #4294967295
 802ae50:	e035      	b.n	802aebe <lwip_accept+0x216>
    }

    IPADDR_PORT_TO_SOCKADDR(&tempaddr, &naddr, port);
 802ae52:	f107 0314 	add.w	r3, r7, #20
 802ae56:	2210      	movs	r2, #16
 802ae58:	701a      	strb	r2, [r3, #0]
 802ae5a:	f107 0314 	add.w	r3, r7, #20
 802ae5e:	2202      	movs	r2, #2
 802ae60:	705a      	strb	r2, [r3, #1]
 802ae62:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 802ae64:	f107 0414 	add.w	r4, r7, #20
 802ae68:	4618      	mov	r0, r3
 802ae6a:	f001 fd5b 	bl	802c924 <lwip_htons>
 802ae6e:	4603      	mov	r3, r0
 802ae70:	8063      	strh	r3, [r4, #2]
 802ae72:	f107 0314 	add.w	r3, r7, #20
 802ae76:	6aba      	ldr	r2, [r7, #40]	; 0x28
 802ae78:	605a      	str	r2, [r3, #4]
 802ae7a:	f107 0314 	add.w	r3, r7, #20
 802ae7e:	3308      	adds	r3, #8
 802ae80:	2208      	movs	r2, #8
 802ae82:	2100      	movs	r1, #0
 802ae84:	4618      	mov	r0, r3
 802ae86:	f00d fd03 	bl	8038890 <memset>
    if (*addrlen > tempaddr.sa.sa_len) {
 802ae8a:	687b      	ldr	r3, [r7, #4]
 802ae8c:	681b      	ldr	r3, [r3, #0]
 802ae8e:	7d3a      	ldrb	r2, [r7, #20]
 802ae90:	4293      	cmp	r3, r2
 802ae92:	d903      	bls.n	802ae9c <lwip_accept+0x1f4>
      *addrlen = tempaddr.sa.sa_len;
 802ae94:	7d3b      	ldrb	r3, [r7, #20]
 802ae96:	461a      	mov	r2, r3
 802ae98:	687b      	ldr	r3, [r7, #4]
 802ae9a:	601a      	str	r2, [r3, #0]
    }
    MEMCPY(addr, &tempaddr, *addrlen);
 802ae9c:	687b      	ldr	r3, [r7, #4]
 802ae9e:	681a      	ldr	r2, [r3, #0]
 802aea0:	f107 0314 	add.w	r3, r7, #20
 802aea4:	4619      	mov	r1, r3
 802aea6:	68b8      	ldr	r0, [r7, #8]
 802aea8:	f00d fce4 	bl	8038874 <memcpy>
    LWIP_DEBUGF(SOCKETS_DEBUG, (" port=%"U16_F"\n", port));
  } else {
    LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_accept(%d) returning new sock=%d", s, newsock));
  }

  sock_set_errno(sock, 0);
 802aeac:	2300      	movs	r3, #0
 802aeae:	643b      	str	r3, [r7, #64]	; 0x40
 802aeb0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 802aeb2:	2b00      	cmp	r3, #0
 802aeb4:	d002      	beq.n	802aebc <lwip_accept+0x214>
 802aeb6:	4a04      	ldr	r2, [pc, #16]	; (802aec8 <lwip_accept+0x220>)
 802aeb8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 802aeba:	6013      	str	r3, [r2, #0]
  done_socket(sock);
  done_socket(nsock);
  return newsock;
 802aebc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
}
 802aebe:	4618      	mov	r0, r3
 802aec0:	3764      	adds	r7, #100	; 0x64
 802aec2:	46bd      	mov	sp, r7
 802aec4:	bd90      	pop	{r4, r7, pc}
 802aec6:	bf00      	nop
 802aec8:	2000f06c 	.word	0x2000f06c
 802aecc:	0803a5fc 	.word	0x0803a5fc
 802aed0:	0803a678 	.word	0x0803a678
 802aed4:	0803a650 	.word	0x0803a650
 802aed8:	0803a688 	.word	0x0803a688
 802aedc:	2000b28c 	.word	0x2000b28c
 802aee0:	2000b31c 	.word	0x2000b31c

0802aee4 <lwip_bind>:

int
lwip_bind(int s, const struct sockaddr *name, socklen_t namelen)
{
 802aee4:	b580      	push	{r7, lr}
 802aee6:	b08a      	sub	sp, #40	; 0x28
 802aee8:	af00      	add	r7, sp, #0
 802aeea:	60f8      	str	r0, [r7, #12]
 802aeec:	60b9      	str	r1, [r7, #8]
 802aeee:	607a      	str	r2, [r7, #4]
  struct lwip_sock *sock;
  ip_addr_t local_addr;
  u16_t local_port;
  err_t err;

  sock = get_socket(s);
 802aef0:	68f8      	ldr	r0, [r7, #12]
 802aef2:	f7ff fdf5 	bl	802aae0 <get_socket>
 802aef6:	6278      	str	r0, [r7, #36]	; 0x24
  if (!sock) {
 802aef8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802aefa:	2b00      	cmp	r3, #0
 802aefc:	d102      	bne.n	802af04 <lwip_bind+0x20>
    return -1;
 802aefe:	f04f 33ff 	mov.w	r3, #4294967295
 802af02:	e051      	b.n	802afa8 <lwip_bind+0xc4>
    done_socket(sock);
    return -1;
  }

  /* check size, family and alignment of 'name' */
  LWIP_ERROR("lwip_bind: invalid address", (IS_SOCK_ADDR_LEN_VALID(namelen) &&
 802af04:	687b      	ldr	r3, [r7, #4]
 802af06:	2b10      	cmp	r3, #16
 802af08:	d108      	bne.n	802af1c <lwip_bind+0x38>
 802af0a:	68bb      	ldr	r3, [r7, #8]
 802af0c:	785b      	ldrb	r3, [r3, #1]
 802af0e:	2b02      	cmp	r3, #2
 802af10:	d104      	bne.n	802af1c <lwip_bind+0x38>
 802af12:	68bb      	ldr	r3, [r7, #8]
 802af14:	f003 0303 	and.w	r3, r3, #3
 802af18:	2b00      	cmp	r3, #0
 802af1a:	d014      	beq.n	802af46 <lwip_bind+0x62>
 802af1c:	4b24      	ldr	r3, [pc, #144]	; (802afb0 <lwip_bind+0xcc>)
 802af1e:	f240 22e2 	movw	r2, #738	; 0x2e2
 802af22:	4924      	ldr	r1, [pc, #144]	; (802afb4 <lwip_bind+0xd0>)
 802af24:	4824      	ldr	r0, [pc, #144]	; (802afb8 <lwip_bind+0xd4>)
 802af26:	f00e f89f 	bl	8039068 <iprintf>
 802af2a:	f06f 000f 	mvn.w	r0, #15
 802af2e:	f7ff fcdd 	bl	802a8ec <err_to_errno>
 802af32:	6178      	str	r0, [r7, #20]
 802af34:	697b      	ldr	r3, [r7, #20]
 802af36:	2b00      	cmp	r3, #0
 802af38:	d002      	beq.n	802af40 <lwip_bind+0x5c>
 802af3a:	4a20      	ldr	r2, [pc, #128]	; (802afbc <lwip_bind+0xd8>)
 802af3c:	697b      	ldr	r3, [r7, #20]
 802af3e:	6013      	str	r3, [r2, #0]
 802af40:	f04f 33ff 	mov.w	r3, #4294967295
 802af44:	e030      	b.n	802afa8 <lwip_bind+0xc4>
             IS_SOCK_ADDR_TYPE_VALID(name) && IS_SOCK_ADDR_ALIGNED(name)),
             sock_set_errno(sock, err_to_errno(ERR_ARG)); done_socket(sock); return -1;);
  LWIP_UNUSED_ARG(namelen);

  SOCKADDR_TO_IPADDR_PORT(name, &local_addr, local_port);
 802af46:	68bb      	ldr	r3, [r7, #8]
 802af48:	685b      	ldr	r3, [r3, #4]
 802af4a:	613b      	str	r3, [r7, #16]
 802af4c:	68bb      	ldr	r3, [r7, #8]
 802af4e:	885b      	ldrh	r3, [r3, #2]
 802af50:	4618      	mov	r0, r3
 802af52:	f001 fce7 	bl	802c924 <lwip_htons>
 802af56:	4603      	mov	r3, r0
 802af58:	847b      	strh	r3, [r7, #34]	; 0x22
    unmap_ipv4_mapped_ipv6(ip_2_ip4(&local_addr), ip_2_ip6(&local_addr));
    IP_SET_TYPE_VAL(local_addr, IPADDR_TYPE_V4);
  }
#endif /* LWIP_IPV4 && LWIP_IPV6 */

  err = netconn_bind(sock->conn, &local_addr, local_port);
 802af5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802af5c:	681b      	ldr	r3, [r3, #0]
 802af5e:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 802af60:	f107 0110 	add.w	r1, r7, #16
 802af64:	4618      	mov	r0, r3
 802af66:	f7fd fbab 	bl	80286c0 <netconn_bind>
 802af6a:	4603      	mov	r3, r0
 802af6c:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21

  if (err != ERR_OK) {
 802af70:	f997 3021 	ldrsb.w	r3, [r7, #33]	; 0x21
 802af74:	2b00      	cmp	r3, #0
 802af76:	d00e      	beq.n	802af96 <lwip_bind+0xb2>
    LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_bind(%d) failed, err=%d\n", s, err));
    sock_set_errno(sock, err_to_errno(err));
 802af78:	f997 3021 	ldrsb.w	r3, [r7, #33]	; 0x21
 802af7c:	4618      	mov	r0, r3
 802af7e:	f7ff fcb5 	bl	802a8ec <err_to_errno>
 802af82:	61b8      	str	r0, [r7, #24]
 802af84:	69bb      	ldr	r3, [r7, #24]
 802af86:	2b00      	cmp	r3, #0
 802af88:	d002      	beq.n	802af90 <lwip_bind+0xac>
 802af8a:	4a0c      	ldr	r2, [pc, #48]	; (802afbc <lwip_bind+0xd8>)
 802af8c:	69bb      	ldr	r3, [r7, #24]
 802af8e:	6013      	str	r3, [r2, #0]
    done_socket(sock);
    return -1;
 802af90:	f04f 33ff 	mov.w	r3, #4294967295
 802af94:	e008      	b.n	802afa8 <lwip_bind+0xc4>
  }

  LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_bind(%d) succeeded\n", s));
  sock_set_errno(sock, 0);
 802af96:	2300      	movs	r3, #0
 802af98:	61fb      	str	r3, [r7, #28]
 802af9a:	69fb      	ldr	r3, [r7, #28]
 802af9c:	2b00      	cmp	r3, #0
 802af9e:	d002      	beq.n	802afa6 <lwip_bind+0xc2>
 802afa0:	4a06      	ldr	r2, [pc, #24]	; (802afbc <lwip_bind+0xd8>)
 802afa2:	69fb      	ldr	r3, [r7, #28]
 802afa4:	6013      	str	r3, [r2, #0]
  done_socket(sock);
  return 0;
 802afa6:	2300      	movs	r3, #0
}
 802afa8:	4618      	mov	r0, r3
 802afaa:	3728      	adds	r7, #40	; 0x28
 802afac:	46bd      	mov	sp, r7
 802afae:	bd80      	pop	{r7, pc}
 802afb0:	0803a5fc 	.word	0x0803a5fc
 802afb4:	0803a6a0 	.word	0x0803a6a0
 802afb8:	0803a650 	.word	0x0803a650
 802afbc:	2000f06c 	.word	0x2000f06c

0802afc0 <lwip_close>:

int
lwip_close(int s)
{
 802afc0:	b580      	push	{r7, lr}
 802afc2:	b086      	sub	sp, #24
 802afc4:	af00      	add	r7, sp, #0
 802afc6:	6078      	str	r0, [r7, #4]
  struct lwip_sock *sock;
  int is_tcp = 0;
 802afc8:	2300      	movs	r3, #0
 802afca:	617b      	str	r3, [r7, #20]
  err_t err;

  LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_close(%d)\n", s));

  sock = get_socket(s);
 802afcc:	6878      	ldr	r0, [r7, #4]
 802afce:	f7ff fd87 	bl	802aae0 <get_socket>
 802afd2:	6138      	str	r0, [r7, #16]
  if (!sock) {
 802afd4:	693b      	ldr	r3, [r7, #16]
 802afd6:	2b00      	cmp	r3, #0
 802afd8:	d102      	bne.n	802afe0 <lwip_close+0x20>
    return -1;
 802afda:	f04f 33ff 	mov.w	r3, #4294967295
 802afde:	e039      	b.n	802b054 <lwip_close+0x94>
  }

  if (sock->conn != NULL) {
 802afe0:	693b      	ldr	r3, [r7, #16]
 802afe2:	681b      	ldr	r3, [r3, #0]
 802afe4:	2b00      	cmp	r3, #0
 802afe6:	d00b      	beq.n	802b000 <lwip_close+0x40>
    is_tcp = NETCONNTYPE_GROUP(netconn_type(sock->conn)) == NETCONN_TCP;
 802afe8:	693b      	ldr	r3, [r7, #16]
 802afea:	681b      	ldr	r3, [r3, #0]
 802afec:	781b      	ldrb	r3, [r3, #0]
 802afee:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 802aff2:	2b10      	cmp	r3, #16
 802aff4:	bf0c      	ite	eq
 802aff6:	2301      	moveq	r3, #1
 802aff8:	2300      	movne	r3, #0
 802affa:	b2db      	uxtb	r3, r3
 802affc:	617b      	str	r3, [r7, #20]
 802affe:	e00a      	b.n	802b016 <lwip_close+0x56>
  } else {
    LWIP_ASSERT("sock->lastdata == NULL", sock->lastdata.pbuf == NULL);
 802b000:	693b      	ldr	r3, [r7, #16]
 802b002:	685b      	ldr	r3, [r3, #4]
 802b004:	2b00      	cmp	r3, #0
 802b006:	d006      	beq.n	802b016 <lwip_close+0x56>
 802b008:	4b14      	ldr	r3, [pc, #80]	; (802b05c <lwip_close+0x9c>)
 802b00a:	f44f 7245 	mov.w	r2, #788	; 0x314
 802b00e:	4914      	ldr	r1, [pc, #80]	; (802b060 <lwip_close+0xa0>)
 802b010:	4814      	ldr	r0, [pc, #80]	; (802b064 <lwip_close+0xa4>)
 802b012:	f00e f829 	bl	8039068 <iprintf>
#if LWIP_IPV6_MLD
  /* drop all possibly joined MLD6 memberships */
  lwip_socket_drop_registered_mld6_memberships(s);
#endif /* LWIP_IPV6_MLD */

  err = netconn_prepare_delete(sock->conn);
 802b016:	693b      	ldr	r3, [r7, #16]
 802b018:	681b      	ldr	r3, [r3, #0]
 802b01a:	4618      	mov	r0, r3
 802b01c:	f7fd fabe 	bl	802859c <netconn_prepare_delete>
 802b020:	4603      	mov	r3, r0
 802b022:	73fb      	strb	r3, [r7, #15]
  if (err != ERR_OK) {
 802b024:	f997 300f 	ldrsb.w	r3, [r7, #15]
 802b028:	2b00      	cmp	r3, #0
 802b02a:	d00e      	beq.n	802b04a <lwip_close+0x8a>
    sock_set_errno(sock, err_to_errno(err));
 802b02c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 802b030:	4618      	mov	r0, r3
 802b032:	f7ff fc5b 	bl	802a8ec <err_to_errno>
 802b036:	60b8      	str	r0, [r7, #8]
 802b038:	68bb      	ldr	r3, [r7, #8]
 802b03a:	2b00      	cmp	r3, #0
 802b03c:	d002      	beq.n	802b044 <lwip_close+0x84>
 802b03e:	4a0a      	ldr	r2, [pc, #40]	; (802b068 <lwip_close+0xa8>)
 802b040:	68bb      	ldr	r3, [r7, #8]
 802b042:	6013      	str	r3, [r2, #0]
    done_socket(sock);
    return -1;
 802b044:	f04f 33ff 	mov.w	r3, #4294967295
 802b048:	e004      	b.n	802b054 <lwip_close+0x94>
  }

  free_socket(sock, is_tcp);
 802b04a:	6979      	ldr	r1, [r7, #20]
 802b04c:	6938      	ldr	r0, [r7, #16]
 802b04e:	f7ff fe09 	bl	802ac64 <free_socket>
  set_errno(0);
  return 0;
 802b052:	2300      	movs	r3, #0
}
 802b054:	4618      	mov	r0, r3
 802b056:	3718      	adds	r7, #24
 802b058:	46bd      	mov	sp, r7
 802b05a:	bd80      	pop	{r7, pc}
 802b05c:	0803a5fc 	.word	0x0803a5fc
 802b060:	0803a6bc 	.word	0x0803a6bc
 802b064:	0803a650 	.word	0x0803a650
 802b068:	2000f06c 	.word	0x2000f06c

0802b06c <lwip_listen>:
 * @param backlog (ATTENTION: needs TCP_LISTEN_BACKLOG=1)
 * @return 0 on success, non-zero on failure
 */
int
lwip_listen(int s, int backlog)
{
 802b06c:	b580      	push	{r7, lr}
 802b06e:	b088      	sub	sp, #32
 802b070:	af00      	add	r7, sp, #0
 802b072:	6078      	str	r0, [r7, #4]
 802b074:	6039      	str	r1, [r7, #0]
  struct lwip_sock *sock;
  err_t err;

  LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_listen(%d, backlog=%d)\n", s, backlog));

  sock = get_socket(s);
 802b076:	6878      	ldr	r0, [r7, #4]
 802b078:	f7ff fd32 	bl	802aae0 <get_socket>
 802b07c:	61f8      	str	r0, [r7, #28]
  if (!sock) {
 802b07e:	69fb      	ldr	r3, [r7, #28]
 802b080:	2b00      	cmp	r3, #0
 802b082:	d102      	bne.n	802b08a <lwip_listen+0x1e>
    return -1;
 802b084:	f04f 33ff 	mov.w	r3, #4294967295
 802b088:	e03e      	b.n	802b108 <lwip_listen+0x9c>
  }

  /* limit the "backlog" parameter to fit in an u8_t */
  backlog = LWIP_MIN(LWIP_MAX(backlog, 0), 0xff);
 802b08a:	683b      	ldr	r3, [r7, #0]
 802b08c:	2bfe      	cmp	r3, #254	; 0xfe
 802b08e:	dc03      	bgt.n	802b098 <lwip_listen+0x2c>
 802b090:	683b      	ldr	r3, [r7, #0]
 802b092:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 802b096:	e000      	b.n	802b09a <lwip_listen+0x2e>
 802b098:	23ff      	movs	r3, #255	; 0xff
 802b09a:	603b      	str	r3, [r7, #0]

  err = netconn_listen_with_backlog(sock->conn, (u8_t)backlog);
 802b09c:	69fb      	ldr	r3, [r7, #28]
 802b09e:	681b      	ldr	r3, [r3, #0]
 802b0a0:	683a      	ldr	r2, [r7, #0]
 802b0a2:	b2d2      	uxtb	r2, r2
 802b0a4:	4611      	mov	r1, r2
 802b0a6:	4618      	mov	r0, r3
 802b0a8:	f7fd fb42 	bl	8028730 <netconn_listen_with_backlog>
 802b0ac:	4603      	mov	r3, r0
 802b0ae:	76fb      	strb	r3, [r7, #27]

  if (err != ERR_OK) {
 802b0b0:	f997 301b 	ldrsb.w	r3, [r7, #27]
 802b0b4:	2b00      	cmp	r3, #0
 802b0b6:	d01e      	beq.n	802b0f6 <lwip_listen+0x8a>
    LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_listen(%d) failed, err=%d\n", s, err));
    if (NETCONNTYPE_GROUP(netconn_type(sock->conn)) != NETCONN_TCP) {
 802b0b8:	69fb      	ldr	r3, [r7, #28]
 802b0ba:	681b      	ldr	r3, [r3, #0]
 802b0bc:	781b      	ldrb	r3, [r3, #0]
 802b0be:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 802b0c2:	2b10      	cmp	r3, #16
 802b0c4:	d008      	beq.n	802b0d8 <lwip_listen+0x6c>
      sock_set_errno(sock, EOPNOTSUPP);
 802b0c6:	235f      	movs	r3, #95	; 0x5f
 802b0c8:	60fb      	str	r3, [r7, #12]
 802b0ca:	68fb      	ldr	r3, [r7, #12]
 802b0cc:	2b00      	cmp	r3, #0
 802b0ce:	d00f      	beq.n	802b0f0 <lwip_listen+0x84>
 802b0d0:	4a0f      	ldr	r2, [pc, #60]	; (802b110 <lwip_listen+0xa4>)
 802b0d2:	68fb      	ldr	r3, [r7, #12]
 802b0d4:	6013      	str	r3, [r2, #0]
 802b0d6:	e00b      	b.n	802b0f0 <lwip_listen+0x84>
    } else {
      sock_set_errno(sock, err_to_errno(err));
 802b0d8:	f997 301b 	ldrsb.w	r3, [r7, #27]
 802b0dc:	4618      	mov	r0, r3
 802b0de:	f7ff fc05 	bl	802a8ec <err_to_errno>
 802b0e2:	6138      	str	r0, [r7, #16]
 802b0e4:	693b      	ldr	r3, [r7, #16]
 802b0e6:	2b00      	cmp	r3, #0
 802b0e8:	d002      	beq.n	802b0f0 <lwip_listen+0x84>
 802b0ea:	4a09      	ldr	r2, [pc, #36]	; (802b110 <lwip_listen+0xa4>)
 802b0ec:	693b      	ldr	r3, [r7, #16]
 802b0ee:	6013      	str	r3, [r2, #0]
    }
    done_socket(sock);
    return -1;
 802b0f0:	f04f 33ff 	mov.w	r3, #4294967295
 802b0f4:	e008      	b.n	802b108 <lwip_listen+0x9c>
  }

  sock_set_errno(sock, 0);
 802b0f6:	2300      	movs	r3, #0
 802b0f8:	617b      	str	r3, [r7, #20]
 802b0fa:	697b      	ldr	r3, [r7, #20]
 802b0fc:	2b00      	cmp	r3, #0
 802b0fe:	d002      	beq.n	802b106 <lwip_listen+0x9a>
 802b100:	4a03      	ldr	r2, [pc, #12]	; (802b110 <lwip_listen+0xa4>)
 802b102:	697b      	ldr	r3, [r7, #20]
 802b104:	6013      	str	r3, [r2, #0]
  done_socket(sock);
  return 0;
 802b106:	2300      	movs	r3, #0
}
 802b108:	4618      	mov	r0, r3
 802b10a:	3720      	adds	r7, #32
 802b10c:	46bd      	mov	sp, r7
 802b10e:	bd80      	pop	{r7, pc}
 802b110:	2000f06c 	.word	0x2000f06c

0802b114 <lwip_recv_tcp>:
 * until "len" bytes are received or we're otherwise done.
 * Keeps sock->lastdata for peeking or partly copying.
 */
static ssize_t
lwip_recv_tcp(struct lwip_sock *sock, void *mem, size_t len, int flags)
{
 802b114:	b580      	push	{r7, lr}
 802b116:	b08c      	sub	sp, #48	; 0x30
 802b118:	af00      	add	r7, sp, #0
 802b11a:	60f8      	str	r0, [r7, #12]
 802b11c:	60b9      	str	r1, [r7, #8]
 802b11e:	607a      	str	r2, [r7, #4]
 802b120:	603b      	str	r3, [r7, #0]
  u8_t apiflags = NETCONN_NOAUTORCVD;
 802b122:	2308      	movs	r3, #8
 802b124:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  ssize_t recvd = 0;
 802b128:	2300      	movs	r3, #0
 802b12a:	62bb      	str	r3, [r7, #40]	; 0x28
  ssize_t recv_left = (len <= SSIZE_MAX) ? (ssize_t)len : SSIZE_MAX;
 802b12c:	687b      	ldr	r3, [r7, #4]
 802b12e:	2b00      	cmp	r3, #0
 802b130:	db01      	blt.n	802b136 <lwip_recv_tcp+0x22>
 802b132:	687b      	ldr	r3, [r7, #4]
 802b134:	e001      	b.n	802b13a <lwip_recv_tcp+0x26>
 802b136:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 802b13a:	627b      	str	r3, [r7, #36]	; 0x24

  LWIP_ASSERT("no socket given", sock != NULL);
 802b13c:	68fb      	ldr	r3, [r7, #12]
 802b13e:	2b00      	cmp	r3, #0
 802b140:	d106      	bne.n	802b150 <lwip_recv_tcp+0x3c>
 802b142:	4b74      	ldr	r3, [pc, #464]	; (802b314 <lwip_recv_tcp+0x200>)
 802b144:	f240 329e 	movw	r2, #926	; 0x39e
 802b148:	4973      	ldr	r1, [pc, #460]	; (802b318 <lwip_recv_tcp+0x204>)
 802b14a:	4874      	ldr	r0, [pc, #464]	; (802b31c <lwip_recv_tcp+0x208>)
 802b14c:	f00d ff8c 	bl	8039068 <iprintf>
  LWIP_ASSERT("this should be checked internally", NETCONNTYPE_GROUP(netconn_type(sock->conn)) == NETCONN_TCP);
 802b150:	68fb      	ldr	r3, [r7, #12]
 802b152:	681b      	ldr	r3, [r3, #0]
 802b154:	781b      	ldrb	r3, [r3, #0]
 802b156:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 802b15a:	2b10      	cmp	r3, #16
 802b15c:	d006      	beq.n	802b16c <lwip_recv_tcp+0x58>
 802b15e:	4b6d      	ldr	r3, [pc, #436]	; (802b314 <lwip_recv_tcp+0x200>)
 802b160:	f240 329f 	movw	r2, #927	; 0x39f
 802b164:	496e      	ldr	r1, [pc, #440]	; (802b320 <lwip_recv_tcp+0x20c>)
 802b166:	486d      	ldr	r0, [pc, #436]	; (802b31c <lwip_recv_tcp+0x208>)
 802b168:	f00d ff7e 	bl	8039068 <iprintf>

  if (flags & MSG_DONTWAIT) {
 802b16c:	683b      	ldr	r3, [r7, #0]
 802b16e:	f003 0308 	and.w	r3, r3, #8
 802b172:	2b00      	cmp	r3, #0
 802b174:	d005      	beq.n	802b182 <lwip_recv_tcp+0x6e>
    apiflags |= NETCONN_DONTBLOCK;
 802b176:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 802b17a:	f043 0304 	orr.w	r3, r3, #4
 802b17e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    err_t err;
    u16_t copylen;

    LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_recv_tcp: top while sock->lastdata=%p\n", (void *)sock->lastdata.pbuf));
    /* Check if there is data left from the last recv operation. */
    if (sock->lastdata.pbuf) {
 802b182:	68fb      	ldr	r3, [r7, #12]
 802b184:	685b      	ldr	r3, [r3, #4]
 802b186:	2b00      	cmp	r3, #0
 802b188:	d003      	beq.n	802b192 <lwip_recv_tcp+0x7e>
      p = sock->lastdata.pbuf;
 802b18a:	68fb      	ldr	r3, [r7, #12]
 802b18c:	685b      	ldr	r3, [r3, #4]
 802b18e:	617b      	str	r3, [r7, #20]
 802b190:	e036      	b.n	802b200 <lwip_recv_tcp+0xec>
    } else {
      /* No data was left from the previous operation, so we try to get
         some from the network. */
      err = netconn_recv_tcp_pbuf_flags(sock->conn, &p, apiflags);
 802b192:	68fb      	ldr	r3, [r7, #12]
 802b194:	681b      	ldr	r3, [r3, #0]
 802b196:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 802b19a:	f107 0114 	add.w	r1, r7, #20
 802b19e:	4618      	mov	r0, r3
 802b1a0:	f7fd fd44 	bl	8028c2c <netconn_recv_tcp_pbuf_flags>
 802b1a4:	4603      	mov	r3, r0
 802b1a6:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
      LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_recv_tcp: netconn_recv err=%d, pbuf=%p\n",
                                  err, (void *)p));

      if (err != ERR_OK) {
 802b1aa:	f997 3021 	ldrsb.w	r3, [r7, #33]	; 0x21
 802b1ae:	2b00      	cmp	r3, #0
 802b1b0:	d019      	beq.n	802b1e6 <lwip_recv_tcp+0xd2>
        if (recvd > 0) {
 802b1b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802b1b4:	2b00      	cmp	r3, #0
 802b1b6:	f300 808d 	bgt.w	802b2d4 <lwip_recv_tcp+0x1c0>
          goto lwip_recv_tcp_done;
        }
        /* We should really do some error checking here. */
        LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_recv_tcp: p == NULL, error is \"%s\"!\n",
                                    lwip_strerr(err)));
        sock_set_errno(sock, err_to_errno(err));
 802b1ba:	f997 3021 	ldrsb.w	r3, [r7, #33]	; 0x21
 802b1be:	4618      	mov	r0, r3
 802b1c0:	f7ff fb94 	bl	802a8ec <err_to_errno>
 802b1c4:	61f8      	str	r0, [r7, #28]
 802b1c6:	69fb      	ldr	r3, [r7, #28]
 802b1c8:	2b00      	cmp	r3, #0
 802b1ca:	d002      	beq.n	802b1d2 <lwip_recv_tcp+0xbe>
 802b1cc:	4a55      	ldr	r2, [pc, #340]	; (802b324 <lwip_recv_tcp+0x210>)
 802b1ce:	69fb      	ldr	r3, [r7, #28]
 802b1d0:	6013      	str	r3, [r2, #0]
        if (err == ERR_CLSD) {
 802b1d2:	f997 3021 	ldrsb.w	r3, [r7, #33]	; 0x21
 802b1d6:	f113 0f0f 	cmn.w	r3, #15
 802b1da:	d101      	bne.n	802b1e0 <lwip_recv_tcp+0xcc>
          return 0;
 802b1dc:	2300      	movs	r3, #0
 802b1de:	e094      	b.n	802b30a <lwip_recv_tcp+0x1f6>
        } else {
          return -1;
 802b1e0:	f04f 33ff 	mov.w	r3, #4294967295
 802b1e4:	e091      	b.n	802b30a <lwip_recv_tcp+0x1f6>
        }
      }
      LWIP_ASSERT("p != NULL", p != NULL);
 802b1e6:	697b      	ldr	r3, [r7, #20]
 802b1e8:	2b00      	cmp	r3, #0
 802b1ea:	d106      	bne.n	802b1fa <lwip_recv_tcp+0xe6>
 802b1ec:	4b49      	ldr	r3, [pc, #292]	; (802b314 <lwip_recv_tcp+0x200>)
 802b1ee:	f240 32c5 	movw	r2, #965	; 0x3c5
 802b1f2:	494d      	ldr	r1, [pc, #308]	; (802b328 <lwip_recv_tcp+0x214>)
 802b1f4:	4849      	ldr	r0, [pc, #292]	; (802b31c <lwip_recv_tcp+0x208>)
 802b1f6:	f00d ff37 	bl	8039068 <iprintf>
      sock->lastdata.pbuf = p;
 802b1fa:	697a      	ldr	r2, [r7, #20]
 802b1fc:	68fb      	ldr	r3, [r7, #12]
 802b1fe:	605a      	str	r2, [r3, #4]
    }

    LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_recv_tcp: buflen=%"U16_F" recv_left=%d off=%d\n",
                                p->tot_len, (int)recv_left, (int)recvd));

    if (recv_left > p->tot_len) {
 802b200:	697b      	ldr	r3, [r7, #20]
 802b202:	891b      	ldrh	r3, [r3, #8]
 802b204:	461a      	mov	r2, r3
 802b206:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802b208:	4293      	cmp	r3, r2
 802b20a:	dd03      	ble.n	802b214 <lwip_recv_tcp+0x100>
      copylen = p->tot_len;
 802b20c:	697b      	ldr	r3, [r7, #20]
 802b20e:	891b      	ldrh	r3, [r3, #8]
 802b210:	847b      	strh	r3, [r7, #34]	; 0x22
 802b212:	e001      	b.n	802b218 <lwip_recv_tcp+0x104>
    } else {
      copylen = (u16_t)recv_left;
 802b214:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802b216:	847b      	strh	r3, [r7, #34]	; 0x22
    }
    if (recvd + copylen < recvd) {
 802b218:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 802b21a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802b21c:	4413      	add	r3, r2
 802b21e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 802b220:	429a      	cmp	r2, r3
 802b222:	dd03      	ble.n	802b22c <lwip_recv_tcp+0x118>
      /* overflow */
      copylen = (u16_t)(SSIZE_MAX - recvd);
 802b224:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802b226:	b29b      	uxth	r3, r3
 802b228:	43db      	mvns	r3, r3
 802b22a:	847b      	strh	r3, [r7, #34]	; 0x22
    }

    /* copy the contents of the received buffer into
    the supplied memory pointer mem */
    pbuf_copy_partial(p, (u8_t *)mem + recvd, copylen, 0);
 802b22c:	6978      	ldr	r0, [r7, #20]
 802b22e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802b230:	68ba      	ldr	r2, [r7, #8]
 802b232:	18d1      	adds	r1, r2, r3
 802b234:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 802b236:	2300      	movs	r3, #0
 802b238:	f003 fa6e 	bl	802e718 <pbuf_copy_partial>

    recvd += copylen;
 802b23c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 802b23e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 802b240:	4413      	add	r3, r2
 802b242:	62bb      	str	r3, [r7, #40]	; 0x28

    /* TCP combines multiple pbufs for one recv */
    LWIP_ASSERT("invalid copylen, len would underflow", recv_left >= copylen);
 802b244:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 802b246:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 802b248:	429a      	cmp	r2, r3
 802b24a:	da06      	bge.n	802b25a <lwip_recv_tcp+0x146>
 802b24c:	4b31      	ldr	r3, [pc, #196]	; (802b314 <lwip_recv_tcp+0x200>)
 802b24e:	f240 32dd 	movw	r2, #989	; 0x3dd
 802b252:	4936      	ldr	r1, [pc, #216]	; (802b32c <lwip_recv_tcp+0x218>)
 802b254:	4831      	ldr	r0, [pc, #196]	; (802b31c <lwip_recv_tcp+0x208>)
 802b256:	f00d ff07 	bl	8039068 <iprintf>
    recv_left -= copylen;
 802b25a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 802b25c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 802b25e:	1ad3      	subs	r3, r2, r3
 802b260:	627b      	str	r3, [r7, #36]	; 0x24

    /* Unless we peek the incoming message... */
    if ((flags & MSG_PEEK) == 0) {
 802b262:	683b      	ldr	r3, [r7, #0]
 802b264:	f003 0301 	and.w	r3, r3, #1
 802b268:	2b00      	cmp	r3, #0
 802b26a:	d123      	bne.n	802b2b4 <lwip_recv_tcp+0x1a0>
      /* ... check if there is data left in the pbuf */
      LWIP_ASSERT("invalid copylen", p->tot_len >= copylen);
 802b26c:	697b      	ldr	r3, [r7, #20]
 802b26e:	891b      	ldrh	r3, [r3, #8]
 802b270:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 802b272:	429a      	cmp	r2, r3
 802b274:	d906      	bls.n	802b284 <lwip_recv_tcp+0x170>
 802b276:	4b27      	ldr	r3, [pc, #156]	; (802b314 <lwip_recv_tcp+0x200>)
 802b278:	f240 32e3 	movw	r2, #995	; 0x3e3
 802b27c:	492c      	ldr	r1, [pc, #176]	; (802b330 <lwip_recv_tcp+0x21c>)
 802b27e:	4827      	ldr	r0, [pc, #156]	; (802b31c <lwip_recv_tcp+0x208>)
 802b280:	f00d fef2 	bl	8039068 <iprintf>
      if (p->tot_len - copylen > 0) {
 802b284:	697b      	ldr	r3, [r7, #20]
 802b286:	891b      	ldrh	r3, [r3, #8]
 802b288:	461a      	mov	r2, r3
 802b28a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 802b28c:	1ad3      	subs	r3, r2, r3
 802b28e:	2b00      	cmp	r3, #0
 802b290:	dd09      	ble.n	802b2a6 <lwip_recv_tcp+0x192>
        /* If so, it should be saved in the sock structure for the next recv call.
           We store the pbuf but hide/free the consumed data: */
        sock->lastdata.pbuf = pbuf_free_header(p, copylen);
 802b292:	697b      	ldr	r3, [r7, #20]
 802b294:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 802b296:	4611      	mov	r1, r2
 802b298:	4618      	mov	r0, r3
 802b29a:	f003 f804 	bl	802e2a6 <pbuf_free_header>
 802b29e:	4602      	mov	r2, r0
 802b2a0:	68fb      	ldr	r3, [r7, #12]
 802b2a2:	605a      	str	r2, [r3, #4]
 802b2a4:	e006      	b.n	802b2b4 <lwip_recv_tcp+0x1a0>
        LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_recv_tcp: lastdata now pbuf=%p\n", (void *)sock->lastdata.pbuf));
      } else {
        sock->lastdata.pbuf = NULL;
 802b2a6:	68fb      	ldr	r3, [r7, #12]
 802b2a8:	2200      	movs	r2, #0
 802b2aa:	605a      	str	r2, [r3, #4]
        LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_recv_tcp: deleting pbuf=%p\n", (void *)p));
        pbuf_free(p);
 802b2ac:	697b      	ldr	r3, [r7, #20]
 802b2ae:	4618      	mov	r0, r3
 802b2b0:	f003 f82c 	bl	802e30c <pbuf_free>
      }
    }
    /* once we have some data to return, only add more if we don't need to wait */
    apiflags |= NETCONN_DONTBLOCK | NETCONN_NOFIN;
 802b2b4:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 802b2b8:	f043 0314 	orr.w	r3, r3, #20
 802b2bc:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    /* @todo: do we need to support peeking more than one pbuf? */
  } while ((recv_left > 0) && !(flags & MSG_PEEK));
 802b2c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802b2c2:	2b00      	cmp	r3, #0
 802b2c4:	dd08      	ble.n	802b2d8 <lwip_recv_tcp+0x1c4>
 802b2c6:	683b      	ldr	r3, [r7, #0]
 802b2c8:	f003 0301 	and.w	r3, r3, #1
 802b2cc:	2b00      	cmp	r3, #0
 802b2ce:	f43f af58 	beq.w	802b182 <lwip_recv_tcp+0x6e>
lwip_recv_tcp_done:
 802b2d2:	e001      	b.n	802b2d8 <lwip_recv_tcp+0x1c4>
          goto lwip_recv_tcp_done;
 802b2d4:	bf00      	nop
 802b2d6:	e000      	b.n	802b2da <lwip_recv_tcp+0x1c6>
lwip_recv_tcp_done:
 802b2d8:	bf00      	nop
  if ((recvd > 0) && !(flags & MSG_PEEK)) {
 802b2da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802b2dc:	2b00      	cmp	r3, #0
 802b2de:	dd0b      	ble.n	802b2f8 <lwip_recv_tcp+0x1e4>
 802b2e0:	683b      	ldr	r3, [r7, #0]
 802b2e2:	f003 0301 	and.w	r3, r3, #1
 802b2e6:	2b00      	cmp	r3, #0
 802b2e8:	d106      	bne.n	802b2f8 <lwip_recv_tcp+0x1e4>
    /* ensure window update after copying all data */
    netconn_tcp_recvd(sock->conn, (size_t)recvd);
 802b2ea:	68fb      	ldr	r3, [r7, #12]
 802b2ec:	681b      	ldr	r3, [r3, #0]
 802b2ee:	6aba      	ldr	r2, [r7, #40]	; 0x28
 802b2f0:	4611      	mov	r1, r2
 802b2f2:	4618      	mov	r0, r3
 802b2f4:	f7fd fbe2 	bl	8028abc <netconn_tcp_recvd>
  }
  sock_set_errno(sock, 0);
 802b2f8:	2300      	movs	r3, #0
 802b2fa:	61bb      	str	r3, [r7, #24]
 802b2fc:	69bb      	ldr	r3, [r7, #24]
 802b2fe:	2b00      	cmp	r3, #0
 802b300:	d002      	beq.n	802b308 <lwip_recv_tcp+0x1f4>
 802b302:	4a08      	ldr	r2, [pc, #32]	; (802b324 <lwip_recv_tcp+0x210>)
 802b304:	69bb      	ldr	r3, [r7, #24]
 802b306:	6013      	str	r3, [r2, #0]
  return recvd;
 802b308:	6abb      	ldr	r3, [r7, #40]	; 0x28
}
 802b30a:	4618      	mov	r0, r3
 802b30c:	3730      	adds	r7, #48	; 0x30
 802b30e:	46bd      	mov	sp, r7
 802b310:	bd80      	pop	{r7, pc}
 802b312:	bf00      	nop
 802b314:	0803a5fc 	.word	0x0803a5fc
 802b318:	0803a6f4 	.word	0x0803a6f4
 802b31c:	0803a650 	.word	0x0803a650
 802b320:	0803a704 	.word	0x0803a704
 802b324:	2000f06c 	.word	0x2000f06c
 802b328:	0803a728 	.word	0x0803a728
 802b32c:	0803a734 	.word	0x0803a734
 802b330:	0803a75c 	.word	0x0803a75c

0802b334 <lwip_sock_make_addr>:

/* Convert a netbuf's address data to struct sockaddr */
static int
lwip_sock_make_addr(struct netconn *conn, ip_addr_t *fromaddr, u16_t port,
                    struct sockaddr *from, socklen_t *fromlen)
{
 802b334:	b590      	push	{r4, r7, lr}
 802b336:	b08b      	sub	sp, #44	; 0x2c
 802b338:	af00      	add	r7, sp, #0
 802b33a:	60f8      	str	r0, [r7, #12]
 802b33c:	60b9      	str	r1, [r7, #8]
 802b33e:	603b      	str	r3, [r7, #0]
 802b340:	4613      	mov	r3, r2
 802b342:	80fb      	strh	r3, [r7, #6]
  int truncated = 0;
 802b344:	2300      	movs	r3, #0
 802b346:	627b      	str	r3, [r7, #36]	; 0x24
  union sockaddr_aligned saddr;

  LWIP_UNUSED_ARG(conn);

  LWIP_ASSERT("fromaddr != NULL", fromaddr != NULL);
 802b348:	68bb      	ldr	r3, [r7, #8]
 802b34a:	2b00      	cmp	r3, #0
 802b34c:	d106      	bne.n	802b35c <lwip_sock_make_addr+0x28>
 802b34e:	4b2b      	ldr	r3, [pc, #172]	; (802b3fc <lwip_sock_make_addr+0xc8>)
 802b350:	f240 4207 	movw	r2, #1031	; 0x407
 802b354:	492a      	ldr	r1, [pc, #168]	; (802b400 <lwip_sock_make_addr+0xcc>)
 802b356:	482b      	ldr	r0, [pc, #172]	; (802b404 <lwip_sock_make_addr+0xd0>)
 802b358:	f00d fe86 	bl	8039068 <iprintf>
  LWIP_ASSERT("from != NULL", from != NULL);
 802b35c:	683b      	ldr	r3, [r7, #0]
 802b35e:	2b00      	cmp	r3, #0
 802b360:	d106      	bne.n	802b370 <lwip_sock_make_addr+0x3c>
 802b362:	4b26      	ldr	r3, [pc, #152]	; (802b3fc <lwip_sock_make_addr+0xc8>)
 802b364:	f44f 6281 	mov.w	r2, #1032	; 0x408
 802b368:	4927      	ldr	r1, [pc, #156]	; (802b408 <lwip_sock_make_addr+0xd4>)
 802b36a:	4826      	ldr	r0, [pc, #152]	; (802b404 <lwip_sock_make_addr+0xd0>)
 802b36c:	f00d fe7c 	bl	8039068 <iprintf>
  LWIP_ASSERT("fromlen != NULL", fromlen != NULL);
 802b370:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 802b372:	2b00      	cmp	r3, #0
 802b374:	d106      	bne.n	802b384 <lwip_sock_make_addr+0x50>
 802b376:	4b21      	ldr	r3, [pc, #132]	; (802b3fc <lwip_sock_make_addr+0xc8>)
 802b378:	f240 4209 	movw	r2, #1033	; 0x409
 802b37c:	4923      	ldr	r1, [pc, #140]	; (802b40c <lwip_sock_make_addr+0xd8>)
 802b37e:	4821      	ldr	r0, [pc, #132]	; (802b404 <lwip_sock_make_addr+0xd0>)
 802b380:	f00d fe72 	bl	8039068 <iprintf>
    ip4_2_ipv4_mapped_ipv6(ip_2_ip6(fromaddr), ip_2_ip4(fromaddr));
    IP_SET_TYPE(fromaddr, IPADDR_TYPE_V6);
  }
#endif /* LWIP_IPV4 && LWIP_IPV6 */

  IPADDR_PORT_TO_SOCKADDR(&saddr, fromaddr, port);
 802b384:	f107 0314 	add.w	r3, r7, #20
 802b388:	2210      	movs	r2, #16
 802b38a:	701a      	strb	r2, [r3, #0]
 802b38c:	f107 0314 	add.w	r3, r7, #20
 802b390:	2202      	movs	r2, #2
 802b392:	705a      	strb	r2, [r3, #1]
 802b394:	f107 0414 	add.w	r4, r7, #20
 802b398:	88fb      	ldrh	r3, [r7, #6]
 802b39a:	4618      	mov	r0, r3
 802b39c:	f001 fac2 	bl	802c924 <lwip_htons>
 802b3a0:	4603      	mov	r3, r0
 802b3a2:	8063      	strh	r3, [r4, #2]
 802b3a4:	f107 0314 	add.w	r3, r7, #20
 802b3a8:	68ba      	ldr	r2, [r7, #8]
 802b3aa:	6812      	ldr	r2, [r2, #0]
 802b3ac:	605a      	str	r2, [r3, #4]
 802b3ae:	f107 0314 	add.w	r3, r7, #20
 802b3b2:	3308      	adds	r3, #8
 802b3b4:	2208      	movs	r2, #8
 802b3b6:	2100      	movs	r1, #0
 802b3b8:	4618      	mov	r0, r3
 802b3ba:	f00d fa69 	bl	8038890 <memset>
  if (*fromlen < saddr.sa.sa_len) {
 802b3be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 802b3c0:	681b      	ldr	r3, [r3, #0]
 802b3c2:	7d3a      	ldrb	r2, [r7, #20]
 802b3c4:	4293      	cmp	r3, r2
 802b3c6:	d202      	bcs.n	802b3ce <lwip_sock_make_addr+0x9a>
    truncated = 1;
 802b3c8:	2301      	movs	r3, #1
 802b3ca:	627b      	str	r3, [r7, #36]	; 0x24
 802b3cc:	e008      	b.n	802b3e0 <lwip_sock_make_addr+0xac>
  } else if (*fromlen > saddr.sa.sa_len) {
 802b3ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 802b3d0:	681b      	ldr	r3, [r3, #0]
 802b3d2:	7d3a      	ldrb	r2, [r7, #20]
 802b3d4:	4293      	cmp	r3, r2
 802b3d6:	d903      	bls.n	802b3e0 <lwip_sock_make_addr+0xac>
    *fromlen = saddr.sa.sa_len;
 802b3d8:	7d3b      	ldrb	r3, [r7, #20]
 802b3da:	461a      	mov	r2, r3
 802b3dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 802b3de:	601a      	str	r2, [r3, #0]
  }
  MEMCPY(from, &saddr, *fromlen);
 802b3e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 802b3e2:	681a      	ldr	r2, [r3, #0]
 802b3e4:	f107 0314 	add.w	r3, r7, #20
 802b3e8:	4619      	mov	r1, r3
 802b3ea:	6838      	ldr	r0, [r7, #0]
 802b3ec:	f00d fa42 	bl	8038874 <memcpy>
  return truncated;
 802b3f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 802b3f2:	4618      	mov	r0, r3
 802b3f4:	372c      	adds	r7, #44	; 0x2c
 802b3f6:	46bd      	mov	sp, r7
 802b3f8:	bd90      	pop	{r4, r7, pc}
 802b3fa:	bf00      	nop
 802b3fc:	0803a5fc 	.word	0x0803a5fc
 802b400:	0803a76c 	.word	0x0803a76c
 802b404:	0803a650 	.word	0x0803a650
 802b408:	0803a780 	.word	0x0803a780
 802b40c:	0803a790 	.word	0x0803a790

0802b410 <lwip_recv_tcp_from>:

#if LWIP_TCP
/* Helper function to get a tcp socket's remote address info */
static int
lwip_recv_tcp_from(struct lwip_sock *sock, struct sockaddr *from, socklen_t *fromlen, const char *dbg_fn, int dbg_s, ssize_t dbg_ret)
{
 802b410:	b580      	push	{r7, lr}
 802b412:	b088      	sub	sp, #32
 802b414:	af02      	add	r7, sp, #8
 802b416:	60f8      	str	r0, [r7, #12]
 802b418:	60b9      	str	r1, [r7, #8]
 802b41a:	607a      	str	r2, [r7, #4]
 802b41c:	603b      	str	r3, [r7, #0]
  if (sock == NULL) {
 802b41e:	68fb      	ldr	r3, [r7, #12]
 802b420:	2b00      	cmp	r3, #0
 802b422:	d101      	bne.n	802b428 <lwip_recv_tcp_from+0x18>
    return 0;
 802b424:	2300      	movs	r3, #0
 802b426:	e021      	b.n	802b46c <lwip_recv_tcp_from+0x5c>
  LWIP_UNUSED_ARG(dbg_fn);
  LWIP_UNUSED_ARG(dbg_s);
  LWIP_UNUSED_ARG(dbg_ret);

#if !SOCKETS_DEBUG
  if (from && fromlen)
 802b428:	68bb      	ldr	r3, [r7, #8]
 802b42a:	2b00      	cmp	r3, #0
 802b42c:	d01d      	beq.n	802b46a <lwip_recv_tcp_from+0x5a>
 802b42e:	687b      	ldr	r3, [r7, #4]
 802b430:	2b00      	cmp	r3, #0
 802b432:	d01a      	beq.n	802b46a <lwip_recv_tcp_from+0x5a>
#endif /* !SOCKETS_DEBUG */
  {
    /* get remote addr/port from tcp_pcb */
    u16_t port;
    ip_addr_t tmpaddr;
    netconn_getaddr(sock->conn, &tmpaddr, &port, 0);
 802b434:	68fb      	ldr	r3, [r7, #12]
 802b436:	6818      	ldr	r0, [r3, #0]
 802b438:	f107 0216 	add.w	r2, r7, #22
 802b43c:	f107 0110 	add.w	r1, r7, #16
 802b440:	2300      	movs	r3, #0
 802b442:	f7fd f8eb 	bl	802861c <netconn_getaddr>
    LWIP_DEBUGF(SOCKETS_DEBUG, ("%s(%d):  addr=", dbg_fn, dbg_s));
    ip_addr_debug_print_val(SOCKETS_DEBUG, tmpaddr);
    LWIP_DEBUGF(SOCKETS_DEBUG, (" port=%"U16_F" len=%d\n", port, (int)dbg_ret));
    if (from && fromlen) {
 802b446:	68bb      	ldr	r3, [r7, #8]
 802b448:	2b00      	cmp	r3, #0
 802b44a:	d00e      	beq.n	802b46a <lwip_recv_tcp_from+0x5a>
 802b44c:	687b      	ldr	r3, [r7, #4]
 802b44e:	2b00      	cmp	r3, #0
 802b450:	d00b      	beq.n	802b46a <lwip_recv_tcp_from+0x5a>
      return lwip_sock_make_addr(sock->conn, &tmpaddr, port, from, fromlen);
 802b452:	68fb      	ldr	r3, [r7, #12]
 802b454:	6818      	ldr	r0, [r3, #0]
 802b456:	8afa      	ldrh	r2, [r7, #22]
 802b458:	f107 0110 	add.w	r1, r7, #16
 802b45c:	687b      	ldr	r3, [r7, #4]
 802b45e:	9300      	str	r3, [sp, #0]
 802b460:	68bb      	ldr	r3, [r7, #8]
 802b462:	f7ff ff67 	bl	802b334 <lwip_sock_make_addr>
 802b466:	4603      	mov	r3, r0
 802b468:	e000      	b.n	802b46c <lwip_recv_tcp_from+0x5c>
    }
  }
  return 0;
 802b46a:	2300      	movs	r3, #0
}
 802b46c:	4618      	mov	r0, r3
 802b46e:	3718      	adds	r7, #24
 802b470:	46bd      	mov	sp, r7
 802b472:	bd80      	pop	{r7, pc}

0802b474 <lwip_recvfrom_udp_raw>:
/* Helper function to receive a netbuf from a udp or raw netconn.
 * Keeps sock->lastdata for peeking.
 */
static err_t
lwip_recvfrom_udp_raw(struct lwip_sock *sock, int flags, struct msghdr *msg, u16_t *datagram_len, int dbg_s)
{
 802b474:	b590      	push	{r4, r7, lr}
 802b476:	b08d      	sub	sp, #52	; 0x34
 802b478:	af02      	add	r7, sp, #8
 802b47a:	60f8      	str	r0, [r7, #12]
 802b47c:	60b9      	str	r1, [r7, #8]
 802b47e:	607a      	str	r2, [r7, #4]
 802b480:	603b      	str	r3, [r7, #0]
  err_t err;
  u16_t buflen, copylen, copied;
  int i;

  LWIP_UNUSED_ARG(dbg_s);
  LWIP_ERROR("lwip_recvfrom_udp_raw: invalid arguments", (msg->msg_iov != NULL) || (msg->msg_iovlen <= 0), return ERR_ARG;);
 802b482:	687b      	ldr	r3, [r7, #4]
 802b484:	689b      	ldr	r3, [r3, #8]
 802b486:	2b00      	cmp	r3, #0
 802b488:	d10d      	bne.n	802b4a6 <lwip_recvfrom_udp_raw+0x32>
 802b48a:	687b      	ldr	r3, [r7, #4]
 802b48c:	68db      	ldr	r3, [r3, #12]
 802b48e:	2b00      	cmp	r3, #0
 802b490:	dd09      	ble.n	802b4a6 <lwip_recvfrom_udp_raw+0x32>
 802b492:	4b5e      	ldr	r3, [pc, #376]	; (802b60c <lwip_recvfrom_udp_raw+0x198>)
 802b494:	f240 4249 	movw	r2, #1097	; 0x449
 802b498:	495d      	ldr	r1, [pc, #372]	; (802b610 <lwip_recvfrom_udp_raw+0x19c>)
 802b49a:	485e      	ldr	r0, [pc, #376]	; (802b614 <lwip_recvfrom_udp_raw+0x1a0>)
 802b49c:	f00d fde4 	bl	8039068 <iprintf>
 802b4a0:	f06f 030f 	mvn.w	r3, #15
 802b4a4:	e0ad      	b.n	802b602 <lwip_recvfrom_udp_raw+0x18e>

  if (flags & MSG_DONTWAIT) {
 802b4a6:	68bb      	ldr	r3, [r7, #8]
 802b4a8:	f003 0308 	and.w	r3, r3, #8
 802b4ac:	2b00      	cmp	r3, #0
 802b4ae:	d003      	beq.n	802b4b8 <lwip_recvfrom_udp_raw+0x44>
    apiflags = NETCONN_DONTBLOCK;
 802b4b0:	2304      	movs	r3, #4
 802b4b2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 802b4b6:	e002      	b.n	802b4be <lwip_recvfrom_udp_raw+0x4a>
  } else {
    apiflags = 0;
 802b4b8:	2300      	movs	r3, #0
 802b4ba:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_recvfrom_udp_raw[UDP/RAW]: top sock->lastdata=%p\n", (void *)sock->lastdata.netbuf));
  /* Check if there is data left from the last recv operation. */
  buf = sock->lastdata.netbuf;
 802b4be:	68fb      	ldr	r3, [r7, #12]
 802b4c0:	685b      	ldr	r3, [r3, #4]
 802b4c2:	613b      	str	r3, [r7, #16]
  if (buf == NULL) {
 802b4c4:	693b      	ldr	r3, [r7, #16]
 802b4c6:	2b00      	cmp	r3, #0
 802b4c8:	d11e      	bne.n	802b508 <lwip_recvfrom_udp_raw+0x94>
    /* No data was left from the previous operation, so we try to get
        some from the network. */
    err = netconn_recv_udp_raw_netbuf_flags(sock->conn, &buf, apiflags);
 802b4ca:	68fb      	ldr	r3, [r7, #12]
 802b4cc:	681b      	ldr	r3, [r3, #0]
 802b4ce:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 802b4d2:	f107 0110 	add.w	r1, r7, #16
 802b4d6:	4618      	mov	r0, r3
 802b4d8:	f7fd fbd4 	bl	8028c84 <netconn_recv_udp_raw_netbuf_flags>
 802b4dc:	4603      	mov	r3, r0
 802b4de:	76fb      	strb	r3, [r7, #27]
    LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_recvfrom_udp_raw[UDP/RAW]: netconn_recv err=%d, netbuf=%p\n",
                                err, (void *)buf));

    if (err != ERR_OK) {
 802b4e0:	f997 301b 	ldrsb.w	r3, [r7, #27]
 802b4e4:	2b00      	cmp	r3, #0
 802b4e6:	d002      	beq.n	802b4ee <lwip_recvfrom_udp_raw+0x7a>
      return err;
 802b4e8:	f997 301b 	ldrsb.w	r3, [r7, #27]
 802b4ec:	e089      	b.n	802b602 <lwip_recvfrom_udp_raw+0x18e>
    }
    LWIP_ASSERT("buf != NULL", buf != NULL);
 802b4ee:	693b      	ldr	r3, [r7, #16]
 802b4f0:	2b00      	cmp	r3, #0
 802b4f2:	d106      	bne.n	802b502 <lwip_recvfrom_udp_raw+0x8e>
 802b4f4:	4b45      	ldr	r3, [pc, #276]	; (802b60c <lwip_recvfrom_udp_raw+0x198>)
 802b4f6:	f240 425e 	movw	r2, #1118	; 0x45e
 802b4fa:	4947      	ldr	r1, [pc, #284]	; (802b618 <lwip_recvfrom_udp_raw+0x1a4>)
 802b4fc:	4845      	ldr	r0, [pc, #276]	; (802b614 <lwip_recvfrom_udp_raw+0x1a0>)
 802b4fe:	f00d fdb3 	bl	8039068 <iprintf>
    sock->lastdata.netbuf = buf;
 802b502:	693a      	ldr	r2, [r7, #16]
 802b504:	68fb      	ldr	r3, [r7, #12]
 802b506:	605a      	str	r2, [r3, #4]
  }
  buflen = buf->p->tot_len;
 802b508:	693b      	ldr	r3, [r7, #16]
 802b50a:	681b      	ldr	r3, [r3, #0]
 802b50c:	891b      	ldrh	r3, [r3, #8]
 802b50e:	833b      	strh	r3, [r7, #24]
  LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_recvfrom_udp_raw: buflen=%"U16_F"\n", buflen));

  copied = 0;
 802b510:	2300      	movs	r3, #0
 802b512:	847b      	strh	r3, [r7, #34]	; 0x22
  /* copy the pbuf payload into the iovs */
  for (i = 0; (i < msg->msg_iovlen) && (copied < buflen); i++) {
 802b514:	2300      	movs	r3, #0
 802b516:	61fb      	str	r3, [r7, #28]
 802b518:	e029      	b.n	802b56e <lwip_recvfrom_udp_raw+0xfa>
    u16_t len_left = (u16_t)(buflen - copied);
 802b51a:	8b3a      	ldrh	r2, [r7, #24]
 802b51c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 802b51e:	1ad3      	subs	r3, r2, r3
 802b520:	82fb      	strh	r3, [r7, #22]
    if (msg->msg_iov[i].iov_len > len_left) {
 802b522:	687b      	ldr	r3, [r7, #4]
 802b524:	689a      	ldr	r2, [r3, #8]
 802b526:	69fb      	ldr	r3, [r7, #28]
 802b528:	00db      	lsls	r3, r3, #3
 802b52a:	4413      	add	r3, r2
 802b52c:	685a      	ldr	r2, [r3, #4]
 802b52e:	8afb      	ldrh	r3, [r7, #22]
 802b530:	429a      	cmp	r2, r3
 802b532:	d902      	bls.n	802b53a <lwip_recvfrom_udp_raw+0xc6>
      copylen = len_left;
 802b534:	8afb      	ldrh	r3, [r7, #22]
 802b536:	84bb      	strh	r3, [r7, #36]	; 0x24
 802b538:	e006      	b.n	802b548 <lwip_recvfrom_udp_raw+0xd4>
    } else {
      copylen = (u16_t)msg->msg_iov[i].iov_len;
 802b53a:	687b      	ldr	r3, [r7, #4]
 802b53c:	689a      	ldr	r2, [r3, #8]
 802b53e:	69fb      	ldr	r3, [r7, #28]
 802b540:	00db      	lsls	r3, r3, #3
 802b542:	4413      	add	r3, r2
 802b544:	685b      	ldr	r3, [r3, #4]
 802b546:	84bb      	strh	r3, [r7, #36]	; 0x24
    }

    /* copy the contents of the received buffer into
        the supplied memory buffer */
    pbuf_copy_partial(buf->p, (u8_t *)msg->msg_iov[i].iov_base, copylen, copied);
 802b548:	693b      	ldr	r3, [r7, #16]
 802b54a:	6818      	ldr	r0, [r3, #0]
 802b54c:	687b      	ldr	r3, [r7, #4]
 802b54e:	689a      	ldr	r2, [r3, #8]
 802b550:	69fb      	ldr	r3, [r7, #28]
 802b552:	00db      	lsls	r3, r3, #3
 802b554:	4413      	add	r3, r2
 802b556:	6819      	ldr	r1, [r3, #0]
 802b558:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 802b55a:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 802b55c:	f003 f8dc 	bl	802e718 <pbuf_copy_partial>
    copied = (u16_t)(copied + copylen);
 802b560:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 802b562:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 802b564:	4413      	add	r3, r2
 802b566:	847b      	strh	r3, [r7, #34]	; 0x22
  for (i = 0; (i < msg->msg_iovlen) && (copied < buflen); i++) {
 802b568:	69fb      	ldr	r3, [r7, #28]
 802b56a:	3301      	adds	r3, #1
 802b56c:	61fb      	str	r3, [r7, #28]
 802b56e:	687b      	ldr	r3, [r7, #4]
 802b570:	68db      	ldr	r3, [r3, #12]
 802b572:	69fa      	ldr	r2, [r7, #28]
 802b574:	429a      	cmp	r2, r3
 802b576:	da03      	bge.n	802b580 <lwip_recvfrom_udp_raw+0x10c>
 802b578:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 802b57a:	8b3b      	ldrh	r3, [r7, #24]
 802b57c:	429a      	cmp	r2, r3
 802b57e:	d3cc      	bcc.n	802b51a <lwip_recvfrom_udp_raw+0xa6>
  }

  /* Check to see from where the data was.*/
#if !SOCKETS_DEBUG
  if (msg->msg_name && msg->msg_namelen)
 802b580:	687b      	ldr	r3, [r7, #4]
 802b582:	681b      	ldr	r3, [r3, #0]
 802b584:	2b00      	cmp	r3, #0
 802b586:	d01a      	beq.n	802b5be <lwip_recvfrom_udp_raw+0x14a>
 802b588:	687b      	ldr	r3, [r7, #4]
 802b58a:	685b      	ldr	r3, [r3, #4]
 802b58c:	2b00      	cmp	r3, #0
 802b58e:	d016      	beq.n	802b5be <lwip_recvfrom_udp_raw+0x14a>
#endif /* !SOCKETS_DEBUG */
  {
    LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_recvfrom_udp_raw(%d):  addr=", dbg_s));
    ip_addr_debug_print_val(SOCKETS_DEBUG, *netbuf_fromaddr(buf));
    LWIP_DEBUGF(SOCKETS_DEBUG, (" port=%"U16_F" len=%d\n", netbuf_fromport(buf), copied));
    if (msg->msg_name && msg->msg_namelen) {
 802b590:	687b      	ldr	r3, [r7, #4]
 802b592:	681b      	ldr	r3, [r3, #0]
 802b594:	2b00      	cmp	r3, #0
 802b596:	d012      	beq.n	802b5be <lwip_recvfrom_udp_raw+0x14a>
 802b598:	687b      	ldr	r3, [r7, #4]
 802b59a:	685b      	ldr	r3, [r3, #4]
 802b59c:	2b00      	cmp	r3, #0
 802b59e:	d00e      	beq.n	802b5be <lwip_recvfrom_udp_raw+0x14a>
      lwip_sock_make_addr(sock->conn, netbuf_fromaddr(buf), netbuf_fromport(buf),
 802b5a0:	68fb      	ldr	r3, [r7, #12]
 802b5a2:	6818      	ldr	r0, [r3, #0]
 802b5a4:	693b      	ldr	r3, [r7, #16]
 802b5a6:	f103 0108 	add.w	r1, r3, #8
 802b5aa:	693b      	ldr	r3, [r7, #16]
 802b5ac:	899a      	ldrh	r2, [r3, #12]
                          (struct sockaddr *)msg->msg_name, &msg->msg_namelen);
 802b5ae:	687b      	ldr	r3, [r7, #4]
 802b5b0:	681c      	ldr	r4, [r3, #0]
      lwip_sock_make_addr(sock->conn, netbuf_fromaddr(buf), netbuf_fromport(buf),
 802b5b2:	687b      	ldr	r3, [r7, #4]
 802b5b4:	3304      	adds	r3, #4
 802b5b6:	9300      	str	r3, [sp, #0]
 802b5b8:	4623      	mov	r3, r4
 802b5ba:	f7ff febb 	bl	802b334 <lwip_sock_make_addr>
    }
  }

  /* Initialize flag output */
  msg->msg_flags = 0;
 802b5be:	687b      	ldr	r3, [r7, #4]
 802b5c0:	2200      	movs	r2, #0
 802b5c2:	619a      	str	r2, [r3, #24]

  if (msg->msg_control) {
 802b5c4:	687b      	ldr	r3, [r7, #4]
 802b5c6:	691b      	ldr	r3, [r3, #16]
 802b5c8:	2b00      	cmp	r3, #0
 802b5ca:	d007      	beq.n	802b5dc <lwip_recvfrom_udp_raw+0x168>
    u8_t wrote_msg = 0;
 802b5cc:	2300      	movs	r3, #0
 802b5ce:	757b      	strb	r3, [r7, #21]
#endif /* LWIP_IPV4 */
      }
    }
#endif /* LWIP_NETBUF_RECVINFO */

    if (!wrote_msg) {
 802b5d0:	7d7b      	ldrb	r3, [r7, #21]
 802b5d2:	2b00      	cmp	r3, #0
 802b5d4:	d102      	bne.n	802b5dc <lwip_recvfrom_udp_raw+0x168>
      msg->msg_controllen = 0;
 802b5d6:	687b      	ldr	r3, [r7, #4]
 802b5d8:	2200      	movs	r2, #0
 802b5da:	615a      	str	r2, [r3, #20]
    }
  }

  /* If we don't peek the incoming message: zero lastdata pointer and free the netbuf */
  if ((flags & MSG_PEEK) == 0) {
 802b5dc:	68bb      	ldr	r3, [r7, #8]
 802b5de:	f003 0301 	and.w	r3, r3, #1
 802b5e2:	2b00      	cmp	r3, #0
 802b5e4:	d106      	bne.n	802b5f4 <lwip_recvfrom_udp_raw+0x180>
    sock->lastdata.netbuf = NULL;
 802b5e6:	68fb      	ldr	r3, [r7, #12]
 802b5e8:	2200      	movs	r2, #0
 802b5ea:	605a      	str	r2, [r3, #4]
    netbuf_delete(buf);
 802b5ec:	693b      	ldr	r3, [r7, #16]
 802b5ee:	4618      	mov	r0, r3
 802b5f0:	f7ff f99a 	bl	802a928 <netbuf_delete>
  }
  if (datagram_len) {
 802b5f4:	683b      	ldr	r3, [r7, #0]
 802b5f6:	2b00      	cmp	r3, #0
 802b5f8:	d002      	beq.n	802b600 <lwip_recvfrom_udp_raw+0x18c>
    *datagram_len = buflen;
 802b5fa:	683b      	ldr	r3, [r7, #0]
 802b5fc:	8b3a      	ldrh	r2, [r7, #24]
 802b5fe:	801a      	strh	r2, [r3, #0]
  }
  return ERR_OK;
 802b600:	2300      	movs	r3, #0
}
 802b602:	4618      	mov	r0, r3
 802b604:	372c      	adds	r7, #44	; 0x2c
 802b606:	46bd      	mov	sp, r7
 802b608:	bd90      	pop	{r4, r7, pc}
 802b60a:	bf00      	nop
 802b60c:	0803a5fc 	.word	0x0803a5fc
 802b610:	0803a7a0 	.word	0x0803a7a0
 802b614:	0803a650 	.word	0x0803a650
 802b618:	0803a7cc 	.word	0x0803a7cc

0802b61c <lwip_recvfrom>:

ssize_t
lwip_recvfrom(int s, void *mem, size_t len, int flags,
              struct sockaddr *from, socklen_t *fromlen)
{
 802b61c:	b580      	push	{r7, lr}
 802b61e:	b096      	sub	sp, #88	; 0x58
 802b620:	af02      	add	r7, sp, #8
 802b622:	60f8      	str	r0, [r7, #12]
 802b624:	60b9      	str	r1, [r7, #8]
 802b626:	607a      	str	r2, [r7, #4]
 802b628:	603b      	str	r3, [r7, #0]
  struct lwip_sock *sock;
  ssize_t ret;

  LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_recvfrom(%d, %p, %"SZT_F", 0x%x, ..)\n", s, mem, len, flags));
  sock = get_socket(s);
 802b62a:	68f8      	ldr	r0, [r7, #12]
 802b62c:	f7ff fa58 	bl	802aae0 <get_socket>
 802b630:	64f8      	str	r0, [r7, #76]	; 0x4c
  if (!sock) {
 802b632:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 802b634:	2b00      	cmp	r3, #0
 802b636:	d102      	bne.n	802b63e <lwip_recvfrom+0x22>
    return -1;
 802b638:	f04f 33ff 	mov.w	r3, #4294967295
 802b63c:	e078      	b.n	802b730 <lwip_recvfrom+0x114>
  }
#if LWIP_TCP
  if (NETCONNTYPE_GROUP(netconn_type(sock->conn)) == NETCONN_TCP) {
 802b63e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 802b640:	681b      	ldr	r3, [r3, #0]
 802b642:	781b      	ldrb	r3, [r3, #0]
 802b644:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 802b648:	2b10      	cmp	r3, #16
 802b64a:	d112      	bne.n	802b672 <lwip_recvfrom+0x56>
    ret = lwip_recv_tcp(sock, mem, len, flags);
 802b64c:	683b      	ldr	r3, [r7, #0]
 802b64e:	687a      	ldr	r2, [r7, #4]
 802b650:	68b9      	ldr	r1, [r7, #8]
 802b652:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 802b654:	f7ff fd5e 	bl	802b114 <lwip_recv_tcp>
 802b658:	6478      	str	r0, [r7, #68]	; 0x44
    lwip_recv_tcp_from(sock, from, fromlen, "lwip_recvfrom", s, ret);
 802b65a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 802b65c:	9301      	str	r3, [sp, #4]
 802b65e:	68fb      	ldr	r3, [r7, #12]
 802b660:	9300      	str	r3, [sp, #0]
 802b662:	4b35      	ldr	r3, [pc, #212]	; (802b738 <lwip_recvfrom+0x11c>)
 802b664:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 802b666:	6db9      	ldr	r1, [r7, #88]	; 0x58
 802b668:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 802b66a:	f7ff fed1 	bl	802b410 <lwip_recv_tcp_from>
    done_socket(sock);
    return ret;
 802b66e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 802b670:	e05e      	b.n	802b730 <lwip_recvfrom+0x114>
  } else
#endif
  {
    u16_t datagram_len = 0;
 802b672:	2300      	movs	r3, #0
 802b674:	877b      	strh	r3, [r7, #58]	; 0x3a
    struct iovec vec;
    struct msghdr msg;
    err_t err;
    vec.iov_base = mem;
 802b676:	68bb      	ldr	r3, [r7, #8]
 802b678:	633b      	str	r3, [r7, #48]	; 0x30
    vec.iov_len = len;
 802b67a:	687b      	ldr	r3, [r7, #4]
 802b67c:	637b      	str	r3, [r7, #52]	; 0x34
    msg.msg_control = NULL;
 802b67e:	2300      	movs	r3, #0
 802b680:	627b      	str	r3, [r7, #36]	; 0x24
    msg.msg_controllen = 0;
 802b682:	2300      	movs	r3, #0
 802b684:	62bb      	str	r3, [r7, #40]	; 0x28
    msg.msg_flags = 0;
 802b686:	2300      	movs	r3, #0
 802b688:	62fb      	str	r3, [r7, #44]	; 0x2c
    msg.msg_iov = &vec;
 802b68a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 802b68e:	61fb      	str	r3, [r7, #28]
    msg.msg_iovlen = 1;
 802b690:	2301      	movs	r3, #1
 802b692:	623b      	str	r3, [r7, #32]
    msg.msg_name = from;
 802b694:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 802b696:	617b      	str	r3, [r7, #20]
    msg.msg_namelen = (fromlen ? *fromlen : 0);
 802b698:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 802b69a:	2b00      	cmp	r3, #0
 802b69c:	d002      	beq.n	802b6a4 <lwip_recvfrom+0x88>
 802b69e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 802b6a0:	681b      	ldr	r3, [r3, #0]
 802b6a2:	e000      	b.n	802b6a6 <lwip_recvfrom+0x8a>
 802b6a4:	2300      	movs	r3, #0
 802b6a6:	61bb      	str	r3, [r7, #24]
    err = lwip_recvfrom_udp_raw(sock, flags, &msg, &datagram_len, s);
 802b6a8:	f107 013a 	add.w	r1, r7, #58	; 0x3a
 802b6ac:	f107 0214 	add.w	r2, r7, #20
 802b6b0:	68fb      	ldr	r3, [r7, #12]
 802b6b2:	9300      	str	r3, [sp, #0]
 802b6b4:	460b      	mov	r3, r1
 802b6b6:	6839      	ldr	r1, [r7, #0]
 802b6b8:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 802b6ba:	f7ff fedb 	bl	802b474 <lwip_recvfrom_udp_raw>
 802b6be:	4603      	mov	r3, r0
 802b6c0:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
    if (err != ERR_OK) {
 802b6c4:	f997 304b 	ldrsb.w	r3, [r7, #75]	; 0x4b
 802b6c8:	2b00      	cmp	r3, #0
 802b6ca:	d00e      	beq.n	802b6ea <lwip_recvfrom+0xce>
      LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_recvfrom[UDP/RAW](%d): buf == NULL, error is \"%s\"!\n",
                                  s, lwip_strerr(err)));
      sock_set_errno(sock, err_to_errno(err));
 802b6cc:	f997 304b 	ldrsb.w	r3, [r7, #75]	; 0x4b
 802b6d0:	4618      	mov	r0, r3
 802b6d2:	f7ff f90b 	bl	802a8ec <err_to_errno>
 802b6d6:	63f8      	str	r0, [r7, #60]	; 0x3c
 802b6d8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 802b6da:	2b00      	cmp	r3, #0
 802b6dc:	d002      	beq.n	802b6e4 <lwip_recvfrom+0xc8>
 802b6de:	4a17      	ldr	r2, [pc, #92]	; (802b73c <lwip_recvfrom+0x120>)
 802b6e0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 802b6e2:	6013      	str	r3, [r2, #0]
      done_socket(sock);
      return -1;
 802b6e4:	f04f 33ff 	mov.w	r3, #4294967295
 802b6e8:	e022      	b.n	802b730 <lwip_recvfrom+0x114>
    }
    ret = (ssize_t)LWIP_MIN(LWIP_MIN(len, datagram_len), SSIZE_MAX);
 802b6ea:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 802b6ec:	461a      	mov	r2, r3
 802b6ee:	687b      	ldr	r3, [r7, #4]
 802b6f0:	4293      	cmp	r3, r2
 802b6f2:	bf28      	it	cs
 802b6f4:	4613      	movcs	r3, r2
 802b6f6:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 802b6fa:	4293      	cmp	r3, r2
 802b6fc:	d206      	bcs.n	802b70c <lwip_recvfrom+0xf0>
 802b6fe:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 802b700:	461a      	mov	r2, r3
 802b702:	687b      	ldr	r3, [r7, #4]
 802b704:	4293      	cmp	r3, r2
 802b706:	bf28      	it	cs
 802b708:	4613      	movcs	r3, r2
 802b70a:	e001      	b.n	802b710 <lwip_recvfrom+0xf4>
 802b70c:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 802b710:	647b      	str	r3, [r7, #68]	; 0x44
    if (fromlen) {
 802b712:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 802b714:	2b00      	cmp	r3, #0
 802b716:	d002      	beq.n	802b71e <lwip_recvfrom+0x102>
      *fromlen = msg.msg_namelen;
 802b718:	69ba      	ldr	r2, [r7, #24]
 802b71a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 802b71c:	601a      	str	r2, [r3, #0]
    }
  }

  sock_set_errno(sock, 0);
 802b71e:	2300      	movs	r3, #0
 802b720:	643b      	str	r3, [r7, #64]	; 0x40
 802b722:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 802b724:	2b00      	cmp	r3, #0
 802b726:	d002      	beq.n	802b72e <lwip_recvfrom+0x112>
 802b728:	4a04      	ldr	r2, [pc, #16]	; (802b73c <lwip_recvfrom+0x120>)
 802b72a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 802b72c:	6013      	str	r3, [r2, #0]
  done_socket(sock);
  return ret;
 802b72e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
}
 802b730:	4618      	mov	r0, r3
 802b732:	3750      	adds	r7, #80	; 0x50
 802b734:	46bd      	mov	sp, r7
 802b736:	bd80      	pop	{r7, pc}
 802b738:	0803a7d8 	.word	0x0803a7d8
 802b73c:	2000f06c 	.word	0x2000f06c

0802b740 <lwip_recv>:
  return lwip_recvmsg(s, &msg, 0);
}

ssize_t
lwip_recv(int s, void *mem, size_t len, int flags)
{
 802b740:	b580      	push	{r7, lr}
 802b742:	b086      	sub	sp, #24
 802b744:	af02      	add	r7, sp, #8
 802b746:	60f8      	str	r0, [r7, #12]
 802b748:	60b9      	str	r1, [r7, #8]
 802b74a:	607a      	str	r2, [r7, #4]
 802b74c:	603b      	str	r3, [r7, #0]
  return lwip_recvfrom(s, mem, len, flags, NULL, NULL);
 802b74e:	2300      	movs	r3, #0
 802b750:	9301      	str	r3, [sp, #4]
 802b752:	2300      	movs	r3, #0
 802b754:	9300      	str	r3, [sp, #0]
 802b756:	683b      	ldr	r3, [r7, #0]
 802b758:	687a      	ldr	r2, [r7, #4]
 802b75a:	68b9      	ldr	r1, [r7, #8]
 802b75c:	68f8      	ldr	r0, [r7, #12]
 802b75e:	f7ff ff5d 	bl	802b61c <lwip_recvfrom>
 802b762:	4603      	mov	r3, r0
}
 802b764:	4618      	mov	r0, r3
 802b766:	3710      	adds	r7, #16
 802b768:	46bd      	mov	sp, r7
 802b76a:	bd80      	pop	{r7, pc}

0802b76c <lwip_send>:
#endif /* LWIP_UDP || LWIP_RAW */
}

ssize_t
lwip_send(int s, const void *data, size_t size, int flags)
{
 802b76c:	b580      	push	{r7, lr}
 802b76e:	b08a      	sub	sp, #40	; 0x28
 802b770:	af02      	add	r7, sp, #8
 802b772:	60f8      	str	r0, [r7, #12]
 802b774:	60b9      	str	r1, [r7, #8]
 802b776:	607a      	str	r2, [r7, #4]
 802b778:	603b      	str	r3, [r7, #0]
  size_t written;

  LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_send(%d, data=%p, size=%"SZT_F", flags=0x%x)\n",
                              s, data, size, flags));

  sock = get_socket(s);
 802b77a:	68f8      	ldr	r0, [r7, #12]
 802b77c:	f7ff f9b0 	bl	802aae0 <get_socket>
 802b780:	61f8      	str	r0, [r7, #28]
  if (!sock) {
 802b782:	69fb      	ldr	r3, [r7, #28]
 802b784:	2b00      	cmp	r3, #0
 802b786:	d102      	bne.n	802b78e <lwip_send+0x22>
    return -1;
 802b788:	f04f 33ff 	mov.w	r3, #4294967295
 802b78c:	e046      	b.n	802b81c <lwip_send+0xb0>
  }

  if (NETCONNTYPE_GROUP(netconn_type(sock->conn)) != NETCONN_TCP) {
 802b78e:	69fb      	ldr	r3, [r7, #28]
 802b790:	681b      	ldr	r3, [r3, #0]
 802b792:	781b      	ldrb	r3, [r3, #0]
 802b794:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 802b798:	2b10      	cmp	r3, #16
 802b79a:	d00b      	beq.n	802b7b4 <lwip_send+0x48>
#if (LWIP_UDP || LWIP_RAW)
    done_socket(sock);
    return lwip_sendto(s, data, size, flags, NULL, 0);
 802b79c:	2300      	movs	r3, #0
 802b79e:	9301      	str	r3, [sp, #4]
 802b7a0:	2300      	movs	r3, #0
 802b7a2:	9300      	str	r3, [sp, #0]
 802b7a4:	683b      	ldr	r3, [r7, #0]
 802b7a6:	687a      	ldr	r2, [r7, #4]
 802b7a8:	68b9      	ldr	r1, [r7, #8]
 802b7aa:	68f8      	ldr	r0, [r7, #12]
 802b7ac:	f000 f83c 	bl	802b828 <lwip_sendto>
 802b7b0:	4603      	mov	r3, r0
 802b7b2:	e033      	b.n	802b81c <lwip_send+0xb0>
    return -1;
#endif /* (LWIP_UDP || LWIP_RAW) */
  }

  write_flags = (u8_t)(NETCONN_COPY |
                       ((flags & MSG_MORE)     ? NETCONN_MORE      : 0) |
 802b7b4:	683b      	ldr	r3, [r7, #0]
 802b7b6:	f003 0310 	and.w	r3, r3, #16
  write_flags = (u8_t)(NETCONN_COPY |
 802b7ba:	2b00      	cmp	r3, #0
 802b7bc:	d001      	beq.n	802b7c2 <lwip_send+0x56>
 802b7be:	2203      	movs	r2, #3
 802b7c0:	e000      	b.n	802b7c4 <lwip_send+0x58>
 802b7c2:	2201      	movs	r2, #1
                       ((flags & MSG_MORE)     ? NETCONN_MORE      : 0) |
 802b7c4:	683b      	ldr	r3, [r7, #0]
 802b7c6:	105b      	asrs	r3, r3, #1
 802b7c8:	b25b      	sxtb	r3, r3
 802b7ca:	f003 0304 	and.w	r3, r3, #4
 802b7ce:	b25b      	sxtb	r3, r3
 802b7d0:	4313      	orrs	r3, r2
 802b7d2:	b25b      	sxtb	r3, r3
  write_flags = (u8_t)(NETCONN_COPY |
 802b7d4:	76fb      	strb	r3, [r7, #27]
                       ((flags & MSG_DONTWAIT) ? NETCONN_DONTBLOCK : 0));
  written = 0;
 802b7d6:	2300      	movs	r3, #0
 802b7d8:	613b      	str	r3, [r7, #16]
  err = netconn_write_partly(sock->conn, data, size, write_flags, &written);
 802b7da:	69fb      	ldr	r3, [r7, #28]
 802b7dc:	6818      	ldr	r0, [r3, #0]
 802b7de:	7efa      	ldrb	r2, [r7, #27]
 802b7e0:	f107 0310 	add.w	r3, r7, #16
 802b7e4:	9300      	str	r3, [sp, #0]
 802b7e6:	4613      	mov	r3, r2
 802b7e8:	687a      	ldr	r2, [r7, #4]
 802b7ea:	68b9      	ldr	r1, [r7, #8]
 802b7ec:	f7fd faa4 	bl	8028d38 <netconn_write_partly>
 802b7f0:	4603      	mov	r3, r0
 802b7f2:	76bb      	strb	r3, [r7, #26]

  LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_send(%d) err=%d written=%"SZT_F"\n", s, err, written));
  sock_set_errno(sock, err_to_errno(err));
 802b7f4:	f997 301a 	ldrsb.w	r3, [r7, #26]
 802b7f8:	4618      	mov	r0, r3
 802b7fa:	f7ff f877 	bl	802a8ec <err_to_errno>
 802b7fe:	6178      	str	r0, [r7, #20]
 802b800:	697b      	ldr	r3, [r7, #20]
 802b802:	2b00      	cmp	r3, #0
 802b804:	d002      	beq.n	802b80c <lwip_send+0xa0>
 802b806:	4a07      	ldr	r2, [pc, #28]	; (802b824 <lwip_send+0xb8>)
 802b808:	697b      	ldr	r3, [r7, #20]
 802b80a:	6013      	str	r3, [r2, #0]
  done_socket(sock);
  /* casting 'written' to ssize_t is OK here since the netconn API limits it to SSIZE_MAX */
  return (err == ERR_OK ? (ssize_t)written : -1);
 802b80c:	f997 301a 	ldrsb.w	r3, [r7, #26]
 802b810:	2b00      	cmp	r3, #0
 802b812:	d101      	bne.n	802b818 <lwip_send+0xac>
 802b814:	693b      	ldr	r3, [r7, #16]
 802b816:	e001      	b.n	802b81c <lwip_send+0xb0>
 802b818:	f04f 33ff 	mov.w	r3, #4294967295
}
 802b81c:	4618      	mov	r0, r3
 802b81e:	3720      	adds	r7, #32
 802b820:	46bd      	mov	sp, r7
 802b822:	bd80      	pop	{r7, pc}
 802b824:	2000f06c 	.word	0x2000f06c

0802b828 <lwip_sendto>:
}

ssize_t
lwip_sendto(int s, const void *data, size_t size, int flags,
            const struct sockaddr *to, socklen_t tolen)
{
 802b828:	b580      	push	{r7, lr}
 802b82a:	b08e      	sub	sp, #56	; 0x38
 802b82c:	af00      	add	r7, sp, #0
 802b82e:	60f8      	str	r0, [r7, #12]
 802b830:	60b9      	str	r1, [r7, #8]
 802b832:	607a      	str	r2, [r7, #4]
 802b834:	603b      	str	r3, [r7, #0]
  err_t err;
  u16_t short_size;
  u16_t remote_port;
  struct netbuf buf;

  sock = get_socket(s);
 802b836:	68f8      	ldr	r0, [r7, #12]
 802b838:	f7ff f952 	bl	802aae0 <get_socket>
 802b83c:	6338      	str	r0, [r7, #48]	; 0x30
  if (!sock) {
 802b83e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 802b840:	2b00      	cmp	r3, #0
 802b842:	d102      	bne.n	802b84a <lwip_sendto+0x22>
    return -1;
 802b844:	f04f 33ff 	mov.w	r3, #4294967295
 802b848:	e093      	b.n	802b972 <lwip_sendto+0x14a>
  }

  if (NETCONNTYPE_GROUP(netconn_type(sock->conn)) == NETCONN_TCP) {
 802b84a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 802b84c:	681b      	ldr	r3, [r3, #0]
 802b84e:	781b      	ldrb	r3, [r3, #0]
 802b850:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 802b854:	2b10      	cmp	r3, #16
 802b856:	d107      	bne.n	802b868 <lwip_sendto+0x40>
#if LWIP_TCP
    done_socket(sock);
    return lwip_send(s, data, size, flags);
 802b858:	683b      	ldr	r3, [r7, #0]
 802b85a:	687a      	ldr	r2, [r7, #4]
 802b85c:	68b9      	ldr	r1, [r7, #8]
 802b85e:	68f8      	ldr	r0, [r7, #12]
 802b860:	f7ff ff84 	bl	802b76c <lwip_send>
 802b864:	4603      	mov	r3, r0
 802b866:	e084      	b.n	802b972 <lwip_sendto+0x14a>
    done_socket(sock);
    return -1;
#endif /* LWIP_TCP */
  }

  if (size > LWIP_MIN(0xFFFF, SSIZE_MAX)) {
 802b868:	687b      	ldr	r3, [r7, #4]
 802b86a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 802b86e:	d30a      	bcc.n	802b886 <lwip_sendto+0x5e>
    /* cannot fit into one datagram (at least for us) */
    sock_set_errno(sock, EMSGSIZE);
 802b870:	235a      	movs	r3, #90	; 0x5a
 802b872:	623b      	str	r3, [r7, #32]
 802b874:	6a3b      	ldr	r3, [r7, #32]
 802b876:	2b00      	cmp	r3, #0
 802b878:	d002      	beq.n	802b880 <lwip_sendto+0x58>
 802b87a:	4a40      	ldr	r2, [pc, #256]	; (802b97c <lwip_sendto+0x154>)
 802b87c:	6a3b      	ldr	r3, [r7, #32]
 802b87e:	6013      	str	r3, [r2, #0]
    done_socket(sock);
    return -1;
 802b880:	f04f 33ff 	mov.w	r3, #4294967295
 802b884:	e075      	b.n	802b972 <lwip_sendto+0x14a>
  }
  short_size = (u16_t)size;
 802b886:	687b      	ldr	r3, [r7, #4]
 802b888:	85fb      	strh	r3, [r7, #46]	; 0x2e
  LWIP_ERROR("lwip_sendto: invalid address", (((to == NULL) && (tolen == 0)) ||
 802b88a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 802b88c:	2b00      	cmp	r3, #0
 802b88e:	d102      	bne.n	802b896 <lwip_sendto+0x6e>
 802b890:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 802b892:	2b00      	cmp	r3, #0
 802b894:	d023      	beq.n	802b8de <lwip_sendto+0xb6>
 802b896:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 802b898:	2b10      	cmp	r3, #16
 802b89a:	d10b      	bne.n	802b8b4 <lwip_sendto+0x8c>
 802b89c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 802b89e:	2b00      	cmp	r3, #0
 802b8a0:	d008      	beq.n	802b8b4 <lwip_sendto+0x8c>
 802b8a2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 802b8a4:	785b      	ldrb	r3, [r3, #1]
 802b8a6:	2b02      	cmp	r3, #2
 802b8a8:	d104      	bne.n	802b8b4 <lwip_sendto+0x8c>
 802b8aa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 802b8ac:	f003 0303 	and.w	r3, r3, #3
 802b8b0:	2b00      	cmp	r3, #0
 802b8b2:	d014      	beq.n	802b8de <lwip_sendto+0xb6>
 802b8b4:	4b32      	ldr	r3, [pc, #200]	; (802b980 <lwip_sendto+0x158>)
 802b8b6:	f240 6252 	movw	r2, #1618	; 0x652
 802b8ba:	4932      	ldr	r1, [pc, #200]	; (802b984 <lwip_sendto+0x15c>)
 802b8bc:	4832      	ldr	r0, [pc, #200]	; (802b988 <lwip_sendto+0x160>)
 802b8be:	f00d fbd3 	bl	8039068 <iprintf>
 802b8c2:	f06f 000f 	mvn.w	r0, #15
 802b8c6:	f7ff f811 	bl	802a8ec <err_to_errno>
 802b8ca:	62b8      	str	r0, [r7, #40]	; 0x28
 802b8cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802b8ce:	2b00      	cmp	r3, #0
 802b8d0:	d002      	beq.n	802b8d8 <lwip_sendto+0xb0>
 802b8d2:	4a2a      	ldr	r2, [pc, #168]	; (802b97c <lwip_sendto+0x154>)
 802b8d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802b8d6:	6013      	str	r3, [r2, #0]
 802b8d8:	f04f 33ff 	mov.w	r3, #4294967295
 802b8dc:	e049      	b.n	802b972 <lwip_sendto+0x14a>
              ((to != NULL) && (IS_SOCK_ADDR_TYPE_VALID(to) && IS_SOCK_ADDR_ALIGNED(to))))),
             sock_set_errno(sock, err_to_errno(ERR_ARG)); done_socket(sock); return -1;);
  LWIP_UNUSED_ARG(tolen);

  /* initialize a buffer */
  buf.p = buf.ptr = NULL;
 802b8de:	2300      	movs	r3, #0
 802b8e0:	617b      	str	r3, [r7, #20]
 802b8e2:	697b      	ldr	r3, [r7, #20]
 802b8e4:	613b      	str	r3, [r7, #16]
#if LWIP_CHECKSUM_ON_COPY
  buf.flags = 0;
#endif /* LWIP_CHECKSUM_ON_COPY */
  if (to) {
 802b8e6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 802b8e8:	2b00      	cmp	r3, #0
 802b8ea:	d00a      	beq.n	802b902 <lwip_sendto+0xda>
    SOCKADDR_TO_IPADDR_PORT(to, &buf.addr, remote_port);
 802b8ec:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 802b8ee:	685b      	ldr	r3, [r3, #4]
 802b8f0:	61bb      	str	r3, [r7, #24]
 802b8f2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 802b8f4:	885b      	ldrh	r3, [r3, #2]
 802b8f6:	4618      	mov	r0, r3
 802b8f8:	f001 f814 	bl	802c924 <lwip_htons>
 802b8fc:	4603      	mov	r3, r0
 802b8fe:	86bb      	strh	r3, [r7, #52]	; 0x34
 802b900:	e003      	b.n	802b90a <lwip_sendto+0xe2>
  } else {
    remote_port = 0;
 802b902:	2300      	movs	r3, #0
 802b904:	86bb      	strh	r3, [r7, #52]	; 0x34
    ip_addr_set_any(NETCONNTYPE_ISIPV6(netconn_type(sock->conn)), &buf.addr);
 802b906:	2300      	movs	r3, #0
 802b908:	61bb      	str	r3, [r7, #24]
  }
  netbuf_fromport(&buf) = remote_port;
 802b90a:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 802b90c:	83bb      	strh	r3, [r7, #28]
      MEMCPY(buf.p->payload, data, short_size);
    }
    err = ERR_OK;
  }
#else /* LWIP_NETIF_TX_SINGLE_PBUF */
  err = netbuf_ref(&buf, data, short_size);
 802b90e:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 802b910:	f107 0310 	add.w	r3, r7, #16
 802b914:	68b9      	ldr	r1, [r7, #8]
 802b916:	4618      	mov	r0, r3
 802b918:	f7ff f84e 	bl	802a9b8 <netbuf_ref>
 802b91c:	4603      	mov	r3, r0
 802b91e:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */
  if (err == ERR_OK) {
 802b922:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 802b926:	2b00      	cmp	r3, #0
 802b928:	d10a      	bne.n	802b940 <lwip_sendto+0x118>
      IP_SET_TYPE_VAL(buf.addr, IPADDR_TYPE_V4);
    }
#endif /* LWIP_IPV4 && LWIP_IPV6 */

    /* send the data */
    err = netconn_send(sock->conn, &buf);
 802b92a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 802b92c:	681b      	ldr	r3, [r3, #0]
 802b92e:	f107 0210 	add.w	r2, r7, #16
 802b932:	4611      	mov	r1, r2
 802b934:	4618      	mov	r0, r3
 802b936:	f7fd f9d1 	bl	8028cdc <netconn_send>
 802b93a:	4603      	mov	r3, r0
 802b93c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
  }

  /* deallocated the buffer */
  netbuf_free(&buf);
 802b940:	f107 0310 	add.w	r3, r7, #16
 802b944:	4618      	mov	r0, r3
 802b946:	f7ff f80f 	bl	802a968 <netbuf_free>

  sock_set_errno(sock, err_to_errno(err));
 802b94a:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 802b94e:	4618      	mov	r0, r3
 802b950:	f7fe ffcc 	bl	802a8ec <err_to_errno>
 802b954:	6278      	str	r0, [r7, #36]	; 0x24
 802b956:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802b958:	2b00      	cmp	r3, #0
 802b95a:	d002      	beq.n	802b962 <lwip_sendto+0x13a>
 802b95c:	4a07      	ldr	r2, [pc, #28]	; (802b97c <lwip_sendto+0x154>)
 802b95e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802b960:	6013      	str	r3, [r2, #0]
  done_socket(sock);
  return (err == ERR_OK ? short_size : -1);
 802b962:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 802b966:	2b00      	cmp	r3, #0
 802b968:	d101      	bne.n	802b96e <lwip_sendto+0x146>
 802b96a:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 802b96c:	e001      	b.n	802b972 <lwip_sendto+0x14a>
 802b96e:	f04f 33ff 	mov.w	r3, #4294967295
}
 802b972:	4618      	mov	r0, r3
 802b974:	3738      	adds	r7, #56	; 0x38
 802b976:	46bd      	mov	sp, r7
 802b978:	bd80      	pop	{r7, pc}
 802b97a:	bf00      	nop
 802b97c:	2000f06c 	.word	0x2000f06c
 802b980:	0803a5fc 	.word	0x0803a5fc
 802b984:	0803a8dc 	.word	0x0803a8dc
 802b988:	0803a650 	.word	0x0803a650

0802b98c <lwip_socket>:

int
lwip_socket(int domain, int type, int protocol)
{
 802b98c:	b580      	push	{r7, lr}
 802b98e:	b086      	sub	sp, #24
 802b990:	af00      	add	r7, sp, #0
 802b992:	60f8      	str	r0, [r7, #12]
 802b994:	60b9      	str	r1, [r7, #8]
 802b996:	607a      	str	r2, [r7, #4]
  int i;

  LWIP_UNUSED_ARG(domain); /* @todo: check this */

  /* create a netconn */
  switch (type) {
 802b998:	68bb      	ldr	r3, [r7, #8]
 802b99a:	2b03      	cmp	r3, #3
 802b99c:	d009      	beq.n	802b9b2 <lwip_socket+0x26>
 802b99e:	68bb      	ldr	r3, [r7, #8]
 802b9a0:	2b03      	cmp	r3, #3
 802b9a2:	dc23      	bgt.n	802b9ec <lwip_socket+0x60>
 802b9a4:	68bb      	ldr	r3, [r7, #8]
 802b9a6:	2b01      	cmp	r3, #1
 802b9a8:	d019      	beq.n	802b9de <lwip_socket+0x52>
 802b9aa:	68bb      	ldr	r3, [r7, #8]
 802b9ac:	2b02      	cmp	r3, #2
 802b9ae:	d009      	beq.n	802b9c4 <lwip_socket+0x38>
 802b9b0:	e01c      	b.n	802b9ec <lwip_socket+0x60>
    case SOCK_RAW:
      conn = netconn_new_with_proto_and_callback(DOMAIN_TO_NETCONN_TYPE(domain, NETCONN_RAW),
 802b9b2:	687b      	ldr	r3, [r7, #4]
 802b9b4:	b2db      	uxtb	r3, r3
 802b9b6:	4a22      	ldr	r2, [pc, #136]	; (802ba40 <lwip_socket+0xb4>)
 802b9b8:	4619      	mov	r1, r3
 802b9ba:	2040      	movs	r0, #64	; 0x40
 802b9bc:	f7fc fd74 	bl	80284a8 <netconn_new_with_proto_and_callback>
 802b9c0:	6178      	str	r0, [r7, #20]
             (u8_t)protocol, DEFAULT_SOCKET_EVENTCB);
      LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_socket(%s, SOCK_RAW, %d) = ",
                                  domain == PF_INET ? "PF_INET" : "UNKNOWN", protocol));
      break;
 802b9c2:	e019      	b.n	802b9f8 <lwip_socket+0x6c>
    case SOCK_DGRAM:
      conn = netconn_new_with_callback(DOMAIN_TO_NETCONN_TYPE(domain,
 802b9c4:	687b      	ldr	r3, [r7, #4]
 802b9c6:	2b88      	cmp	r3, #136	; 0x88
 802b9c8:	d101      	bne.n	802b9ce <lwip_socket+0x42>
 802b9ca:	2321      	movs	r3, #33	; 0x21
 802b9cc:	e000      	b.n	802b9d0 <lwip_socket+0x44>
 802b9ce:	2320      	movs	r3, #32
 802b9d0:	4a1b      	ldr	r2, [pc, #108]	; (802ba40 <lwip_socket+0xb4>)
 802b9d2:	2100      	movs	r1, #0
 802b9d4:	4618      	mov	r0, r3
 802b9d6:	f7fc fd67 	bl	80284a8 <netconn_new_with_proto_and_callback>
 802b9da:	6178      	str	r0, [r7, #20]
      if (conn) {
        /* netconn layer enables pktinfo by default, sockets default to off */
        conn->flags &= ~NETCONN_FLAG_PKTINFO;
      }
#endif /* LWIP_NETBUF_RECVINFO */
      break;
 802b9dc:	e00c      	b.n	802b9f8 <lwip_socket+0x6c>
    case SOCK_STREAM:
      conn = netconn_new_with_callback(DOMAIN_TO_NETCONN_TYPE(domain, NETCONN_TCP), DEFAULT_SOCKET_EVENTCB);
 802b9de:	4a18      	ldr	r2, [pc, #96]	; (802ba40 <lwip_socket+0xb4>)
 802b9e0:	2100      	movs	r1, #0
 802b9e2:	2010      	movs	r0, #16
 802b9e4:	f7fc fd60 	bl	80284a8 <netconn_new_with_proto_and_callback>
 802b9e8:	6178      	str	r0, [r7, #20]
      LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_socket(%s, SOCK_STREAM, %d) = ",
                                  domain == PF_INET ? "PF_INET" : "UNKNOWN", protocol));
      break;
 802b9ea:	e005      	b.n	802b9f8 <lwip_socket+0x6c>
    default:
      LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_socket(%d, %d/UNKNOWN, %d) = -1\n",
                                  domain, type, protocol));
      set_errno(EINVAL);
 802b9ec:	4b15      	ldr	r3, [pc, #84]	; (802ba44 <lwip_socket+0xb8>)
 802b9ee:	2216      	movs	r2, #22
 802b9f0:	601a      	str	r2, [r3, #0]
      return -1;
 802b9f2:	f04f 33ff 	mov.w	r3, #4294967295
 802b9f6:	e01e      	b.n	802ba36 <lwip_socket+0xaa>
  }

  if (!conn) {
 802b9f8:	697b      	ldr	r3, [r7, #20]
 802b9fa:	2b00      	cmp	r3, #0
 802b9fc:	d105      	bne.n	802ba0a <lwip_socket+0x7e>
    LWIP_DEBUGF(SOCKETS_DEBUG, ("-1 / ENOBUFS (could not create netconn)\n"));
    set_errno(ENOBUFS);
 802b9fe:	4b11      	ldr	r3, [pc, #68]	; (802ba44 <lwip_socket+0xb8>)
 802ba00:	2269      	movs	r2, #105	; 0x69
 802ba02:	601a      	str	r2, [r3, #0]
    return -1;
 802ba04:	f04f 33ff 	mov.w	r3, #4294967295
 802ba08:	e015      	b.n	802ba36 <lwip_socket+0xaa>
  }

  i = alloc_socket(conn, 0);
 802ba0a:	2100      	movs	r1, #0
 802ba0c:	6978      	ldr	r0, [r7, #20]
 802ba0e:	f7ff f87f 	bl	802ab10 <alloc_socket>
 802ba12:	6138      	str	r0, [r7, #16]

  if (i == -1) {
 802ba14:	693b      	ldr	r3, [r7, #16]
 802ba16:	f1b3 3fff 	cmp.w	r3, #4294967295
 802ba1a:	d108      	bne.n	802ba2e <lwip_socket+0xa2>
    netconn_delete(conn);
 802ba1c:	6978      	ldr	r0, [r7, #20]
 802ba1e:	f7fc fde1 	bl	80285e4 <netconn_delete>
    set_errno(ENFILE);
 802ba22:	4b08      	ldr	r3, [pc, #32]	; (802ba44 <lwip_socket+0xb8>)
 802ba24:	2217      	movs	r2, #23
 802ba26:	601a      	str	r2, [r3, #0]
    return -1;
 802ba28:	f04f 33ff 	mov.w	r3, #4294967295
 802ba2c:	e003      	b.n	802ba36 <lwip_socket+0xaa>
  }
  conn->socket = i;
 802ba2e:	697b      	ldr	r3, [r7, #20]
 802ba30:	693a      	ldr	r2, [r7, #16]
 802ba32:	619a      	str	r2, [r3, #24]
  done_socket(&sockets[i - LWIP_SOCKET_OFFSET]);
  LWIP_DEBUGF(SOCKETS_DEBUG, ("%d\n", i));
  set_errno(0);
  return i;
 802ba34:	693b      	ldr	r3, [r7, #16]
}
 802ba36:	4618      	mov	r0, r3
 802ba38:	3718      	adds	r7, #24
 802ba3a:	46bd      	mov	sp, r7
 802ba3c:	bd80      	pop	{r7, pc}
 802ba3e:	bf00      	nop
 802ba40:	0802c2fd 	.word	0x0802c2fd
 802ba44:	2000f06c 	.word	0x2000f06c

0802ba48 <lwip_link_select_cb>:

#if LWIP_SOCKET_SELECT || LWIP_SOCKET_POLL
/* Add select_cb to select_cb_list. */
static void
lwip_link_select_cb(struct lwip_select_cb *select_cb)
{
 802ba48:	b580      	push	{r7, lr}
 802ba4a:	b082      	sub	sp, #8
 802ba4c:	af00      	add	r7, sp, #0
 802ba4e:	6078      	str	r0, [r7, #4]
  LWIP_SOCKET_SELECT_DECL_PROTECT(lev);

  /* Protect the select_cb_list */
  LWIP_SOCKET_SELECT_PROTECT(lev);
 802ba50:	480c      	ldr	r0, [pc, #48]	; (802ba84 <lwip_link_select_cb+0x3c>)
 802ba52:	f00c fd39 	bl	80384c8 <sys_mutex_lock>

  /* Put this select_cb on top of list */
  select_cb->next = select_cb_list;
 802ba56:	4b0c      	ldr	r3, [pc, #48]	; (802ba88 <lwip_link_select_cb+0x40>)
 802ba58:	681a      	ldr	r2, [r3, #0]
 802ba5a:	687b      	ldr	r3, [r7, #4]
 802ba5c:	601a      	str	r2, [r3, #0]
  if (select_cb_list != NULL) {
 802ba5e:	4b0a      	ldr	r3, [pc, #40]	; (802ba88 <lwip_link_select_cb+0x40>)
 802ba60:	681b      	ldr	r3, [r3, #0]
 802ba62:	2b00      	cmp	r3, #0
 802ba64:	d003      	beq.n	802ba6e <lwip_link_select_cb+0x26>
    select_cb_list->prev = select_cb;
 802ba66:	4b08      	ldr	r3, [pc, #32]	; (802ba88 <lwip_link_select_cb+0x40>)
 802ba68:	681b      	ldr	r3, [r3, #0]
 802ba6a:	687a      	ldr	r2, [r7, #4]
 802ba6c:	605a      	str	r2, [r3, #4]
  }
  select_cb_list = select_cb;
 802ba6e:	4a06      	ldr	r2, [pc, #24]	; (802ba88 <lwip_link_select_cb+0x40>)
 802ba70:	687b      	ldr	r3, [r7, #4]
 802ba72:	6013      	str	r3, [r2, #0]
  /* Increasing this counter tells select_check_waiters that the list has changed. */
  select_cb_ctr++;
#endif

  /* Now we can safely unprotect */
  LWIP_SOCKET_SELECT_UNPROTECT(lev);
 802ba74:	4803      	ldr	r0, [pc, #12]	; (802ba84 <lwip_link_select_cb+0x3c>)
 802ba76:	f00c fd36 	bl	80384e6 <sys_mutex_unlock>
}
 802ba7a:	bf00      	nop
 802ba7c:	3708      	adds	r7, #8
 802ba7e:	46bd      	mov	sp, r7
 802ba80:	bd80      	pop	{r7, pc}
 802ba82:	bf00      	nop
 802ba84:	2000b31c 	.word	0x2000b31c
 802ba88:	2000b30c 	.word	0x2000b30c

0802ba8c <lwip_unlink_select_cb>:

/* Remove select_cb from select_cb_list. */
static void
lwip_unlink_select_cb(struct lwip_select_cb *select_cb)
{
 802ba8c:	b580      	push	{r7, lr}
 802ba8e:	b082      	sub	sp, #8
 802ba90:	af00      	add	r7, sp, #0
 802ba92:	6078      	str	r0, [r7, #4]
  LWIP_SOCKET_SELECT_DECL_PROTECT(lev);

  /* Take us off the list */
  LWIP_SOCKET_SELECT_PROTECT(lev);
 802ba94:	481b      	ldr	r0, [pc, #108]	; (802bb04 <lwip_unlink_select_cb+0x78>)
 802ba96:	f00c fd17 	bl	80384c8 <sys_mutex_lock>
  if (select_cb->next != NULL) {
 802ba9a:	687b      	ldr	r3, [r7, #4]
 802ba9c:	681b      	ldr	r3, [r3, #0]
 802ba9e:	2b00      	cmp	r3, #0
 802baa0:	d004      	beq.n	802baac <lwip_unlink_select_cb+0x20>
    select_cb->next->prev = select_cb->prev;
 802baa2:	687b      	ldr	r3, [r7, #4]
 802baa4:	681b      	ldr	r3, [r3, #0]
 802baa6:	687a      	ldr	r2, [r7, #4]
 802baa8:	6852      	ldr	r2, [r2, #4]
 802baaa:	605a      	str	r2, [r3, #4]
  }
  if (select_cb_list == select_cb) {
 802baac:	4b16      	ldr	r3, [pc, #88]	; (802bb08 <lwip_unlink_select_cb+0x7c>)
 802baae:	681b      	ldr	r3, [r3, #0]
 802bab0:	687a      	ldr	r2, [r7, #4]
 802bab2:	429a      	cmp	r2, r3
 802bab4:	d10f      	bne.n	802bad6 <lwip_unlink_select_cb+0x4a>
    LWIP_ASSERT("select_cb->prev == NULL", select_cb->prev == NULL);
 802bab6:	687b      	ldr	r3, [r7, #4]
 802bab8:	685b      	ldr	r3, [r3, #4]
 802baba:	2b00      	cmp	r3, #0
 802babc:	d006      	beq.n	802bacc <lwip_unlink_select_cb+0x40>
 802babe:	4b13      	ldr	r3, [pc, #76]	; (802bb0c <lwip_unlink_select_cb+0x80>)
 802bac0:	f240 720d 	movw	r2, #1805	; 0x70d
 802bac4:	4912      	ldr	r1, [pc, #72]	; (802bb10 <lwip_unlink_select_cb+0x84>)
 802bac6:	4813      	ldr	r0, [pc, #76]	; (802bb14 <lwip_unlink_select_cb+0x88>)
 802bac8:	f00d face 	bl	8039068 <iprintf>
    select_cb_list = select_cb->next;
 802bacc:	687b      	ldr	r3, [r7, #4]
 802bace:	681b      	ldr	r3, [r3, #0]
 802bad0:	4a0d      	ldr	r2, [pc, #52]	; (802bb08 <lwip_unlink_select_cb+0x7c>)
 802bad2:	6013      	str	r3, [r2, #0]
 802bad4:	e00f      	b.n	802baf6 <lwip_unlink_select_cb+0x6a>
  } else {
    LWIP_ASSERT("select_cb->prev != NULL", select_cb->prev != NULL);
 802bad6:	687b      	ldr	r3, [r7, #4]
 802bad8:	685b      	ldr	r3, [r3, #4]
 802bada:	2b00      	cmp	r3, #0
 802badc:	d106      	bne.n	802baec <lwip_unlink_select_cb+0x60>
 802bade:	4b0b      	ldr	r3, [pc, #44]	; (802bb0c <lwip_unlink_select_cb+0x80>)
 802bae0:	f44f 62e2 	mov.w	r2, #1808	; 0x710
 802bae4:	490c      	ldr	r1, [pc, #48]	; (802bb18 <lwip_unlink_select_cb+0x8c>)
 802bae6:	480b      	ldr	r0, [pc, #44]	; (802bb14 <lwip_unlink_select_cb+0x88>)
 802bae8:	f00d fabe 	bl	8039068 <iprintf>
    select_cb->prev->next = select_cb->next;
 802baec:	687b      	ldr	r3, [r7, #4]
 802baee:	685b      	ldr	r3, [r3, #4]
 802baf0:	687a      	ldr	r2, [r7, #4]
 802baf2:	6812      	ldr	r2, [r2, #0]
 802baf4:	601a      	str	r2, [r3, #0]
  }
#if !LWIP_TCPIP_CORE_LOCKING
  /* Increasing this counter tells select_check_waiters that the list has changed. */
  select_cb_ctr++;
#endif
  LWIP_SOCKET_SELECT_UNPROTECT(lev);
 802baf6:	4803      	ldr	r0, [pc, #12]	; (802bb04 <lwip_unlink_select_cb+0x78>)
 802baf8:	f00c fcf5 	bl	80384e6 <sys_mutex_unlock>
}
 802bafc:	bf00      	nop
 802bafe:	3708      	adds	r7, #8
 802bb00:	46bd      	mov	sp, r7
 802bb02:	bd80      	pop	{r7, pc}
 802bb04:	2000b31c 	.word	0x2000b31c
 802bb08:	2000b30c 	.word	0x2000b30c
 802bb0c:	0803a5fc 	.word	0x0803a5fc
 802bb10:	0803a8fc 	.word	0x0803a8fc
 802bb14:	0803a650 	.word	0x0803a650
 802bb18:	0803a914 	.word	0x0803a914

0802bb1c <lwip_selscan>:
 * @return number of sockets that had events (read/write/exception) (>= 0)
 */
static int
lwip_selscan(int maxfdp1, fd_set *readset_in, fd_set *writeset_in, fd_set *exceptset_in,
             fd_set *readset_out, fd_set *writeset_out, fd_set *exceptset_out)
{
 802bb1c:	b580      	push	{r7, lr}
 802bb1e:	b098      	sub	sp, #96	; 0x60
 802bb20:	af00      	add	r7, sp, #0
 802bb22:	60f8      	str	r0, [r7, #12]
 802bb24:	60b9      	str	r1, [r7, #8]
 802bb26:	607a      	str	r2, [r7, #4]
 802bb28:	603b      	str	r3, [r7, #0]
  int i, nready = 0;
 802bb2a:	2300      	movs	r3, #0
 802bb2c:	65bb      	str	r3, [r7, #88]	; 0x58
  fd_set lreadset, lwriteset, lexceptset;
  struct lwip_sock *sock;
  SYS_ARCH_DECL_PROTECT(lev);

  FD_ZERO(&lreadset);
 802bb2e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 802bb32:	64bb      	str	r3, [r7, #72]	; 0x48
 802bb34:	2302      	movs	r3, #2
 802bb36:	657b      	str	r3, [r7, #84]	; 0x54
 802bb38:	e007      	b.n	802bb4a <lwip_selscan+0x2e>
 802bb3a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 802bb3c:	3b01      	subs	r3, #1
 802bb3e:	657b      	str	r3, [r7, #84]	; 0x54
 802bb40:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 802bb42:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 802bb44:	2100      	movs	r1, #0
 802bb46:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 802bb4a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 802bb4c:	2b00      	cmp	r3, #0
 802bb4e:	d1f4      	bne.n	802bb3a <lwip_selscan+0x1e>
  FD_ZERO(&lwriteset);
 802bb50:	f107 031c 	add.w	r3, r7, #28
 802bb54:	647b      	str	r3, [r7, #68]	; 0x44
 802bb56:	2302      	movs	r3, #2
 802bb58:	653b      	str	r3, [r7, #80]	; 0x50
 802bb5a:	e007      	b.n	802bb6c <lwip_selscan+0x50>
 802bb5c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 802bb5e:	3b01      	subs	r3, #1
 802bb60:	653b      	str	r3, [r7, #80]	; 0x50
 802bb62:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 802bb64:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 802bb66:	2100      	movs	r1, #0
 802bb68:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 802bb6c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 802bb6e:	2b00      	cmp	r3, #0
 802bb70:	d1f4      	bne.n	802bb5c <lwip_selscan+0x40>
  FD_ZERO(&lexceptset);
 802bb72:	f107 0314 	add.w	r3, r7, #20
 802bb76:	643b      	str	r3, [r7, #64]	; 0x40
 802bb78:	2302      	movs	r3, #2
 802bb7a:	64fb      	str	r3, [r7, #76]	; 0x4c
 802bb7c:	e007      	b.n	802bb8e <lwip_selscan+0x72>
 802bb7e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 802bb80:	3b01      	subs	r3, #1
 802bb82:	64fb      	str	r3, [r7, #76]	; 0x4c
 802bb84:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 802bb86:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 802bb88:	2100      	movs	r1, #0
 802bb8a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 802bb8e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 802bb90:	2b00      	cmp	r3, #0
 802bb92:	d1f4      	bne.n	802bb7e <lwip_selscan+0x62>

  /* Go through each socket in each list to count number of sockets which
     currently match */
  for (i = LWIP_SOCKET_OFFSET; i < maxfdp1; i++) {
 802bb94:	2300      	movs	r3, #0
 802bb96:	65fb      	str	r3, [r7, #92]	; 0x5c
 802bb98:	e12c      	b.n	802bdf4 <lwip_selscan+0x2d8>
    /* if this FD is not in the set, continue */
    if (!(readset_in && FD_ISSET(i, readset_in)) &&
 802bb9a:	68bb      	ldr	r3, [r7, #8]
 802bb9c:	2b00      	cmp	r3, #0
 802bb9e:	d016      	beq.n	802bbce <lwip_selscan+0xb2>
 802bba0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 802bba2:	2b00      	cmp	r3, #0
 802bba4:	da00      	bge.n	802bba8 <lwip_selscan+0x8c>
 802bba6:	331f      	adds	r3, #31
 802bba8:	115b      	asrs	r3, r3, #5
 802bbaa:	461a      	mov	r2, r3
 802bbac:	68bb      	ldr	r3, [r7, #8]
 802bbae:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 802bbb2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 802bbb4:	4259      	negs	r1, r3
 802bbb6:	f003 031f 	and.w	r3, r3, #31
 802bbba:	f001 011f 	and.w	r1, r1, #31
 802bbbe:	bf58      	it	pl
 802bbc0:	424b      	negpl	r3, r1
 802bbc2:	fa22 f303 	lsr.w	r3, r2, r3
 802bbc6:	f003 0301 	and.w	r3, r3, #1
 802bbca:	2b00      	cmp	r3, #0
 802bbcc:	d135      	bne.n	802bc3a <lwip_selscan+0x11e>
 802bbce:	687b      	ldr	r3, [r7, #4]
 802bbd0:	2b00      	cmp	r3, #0
 802bbd2:	d016      	beq.n	802bc02 <lwip_selscan+0xe6>
        !(writeset_in && FD_ISSET(i, writeset_in)) &&
 802bbd4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 802bbd6:	2b00      	cmp	r3, #0
 802bbd8:	da00      	bge.n	802bbdc <lwip_selscan+0xc0>
 802bbda:	331f      	adds	r3, #31
 802bbdc:	115b      	asrs	r3, r3, #5
 802bbde:	461a      	mov	r2, r3
 802bbe0:	687b      	ldr	r3, [r7, #4]
 802bbe2:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 802bbe6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 802bbe8:	4259      	negs	r1, r3
 802bbea:	f003 031f 	and.w	r3, r3, #31
 802bbee:	f001 011f 	and.w	r1, r1, #31
 802bbf2:	bf58      	it	pl
 802bbf4:	424b      	negpl	r3, r1
 802bbf6:	fa22 f303 	lsr.w	r3, r2, r3
 802bbfa:	f003 0301 	and.w	r3, r3, #1
 802bbfe:	2b00      	cmp	r3, #0
 802bc00:	d11b      	bne.n	802bc3a <lwip_selscan+0x11e>
 802bc02:	683b      	ldr	r3, [r7, #0]
 802bc04:	2b00      	cmp	r3, #0
 802bc06:	f000 80f1 	beq.w	802bdec <lwip_selscan+0x2d0>
        !(exceptset_in && FD_ISSET(i, exceptset_in))) {
 802bc0a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 802bc0c:	2b00      	cmp	r3, #0
 802bc0e:	da00      	bge.n	802bc12 <lwip_selscan+0xf6>
 802bc10:	331f      	adds	r3, #31
 802bc12:	115b      	asrs	r3, r3, #5
 802bc14:	461a      	mov	r2, r3
 802bc16:	683b      	ldr	r3, [r7, #0]
 802bc18:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 802bc1c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 802bc1e:	4259      	negs	r1, r3
 802bc20:	f003 031f 	and.w	r3, r3, #31
 802bc24:	f001 011f 	and.w	r1, r1, #31
 802bc28:	bf58      	it	pl
 802bc2a:	424b      	negpl	r3, r1
 802bc2c:	fa22 f303 	lsr.w	r3, r2, r3
 802bc30:	f003 0301 	and.w	r3, r3, #1
 802bc34:	2b00      	cmp	r3, #0
 802bc36:	f000 80d9 	beq.w	802bdec <lwip_selscan+0x2d0>
      continue;
    }
    /* First get the socket's status (protected)... */
    SYS_ARCH_PROTECT(lev);
 802bc3a:	f00c fc87 	bl	803854c <sys_arch_protect>
 802bc3e:	63f8      	str	r0, [r7, #60]	; 0x3c
    sock = tryget_socket_unconn_locked(i);
 802bc40:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 802bc42:	f7fe ff2a 	bl	802aa9a <tryget_socket_unconn_locked>
 802bc46:	63b8      	str	r0, [r7, #56]	; 0x38
    if (sock != NULL) {
 802bc48:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 802bc4a:	2b00      	cmp	r3, #0
 802bc4c:	f000 80c8 	beq.w	802bde0 <lwip_selscan+0x2c4>
      void *lastdata = sock->lastdata.pbuf;
 802bc50:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 802bc52:	685b      	ldr	r3, [r3, #4]
 802bc54:	637b      	str	r3, [r7, #52]	; 0x34
      s16_t rcvevent = sock->rcvevent;
 802bc56:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 802bc58:	891b      	ldrh	r3, [r3, #8]
 802bc5a:	867b      	strh	r3, [r7, #50]	; 0x32
      u16_t sendevent = sock->sendevent;
 802bc5c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 802bc5e:	895b      	ldrh	r3, [r3, #10]
 802bc60:	863b      	strh	r3, [r7, #48]	; 0x30
      u16_t errevent = sock->errevent;
 802bc62:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 802bc64:	899b      	ldrh	r3, [r3, #12]
 802bc66:	85fb      	strh	r3, [r7, #46]	; 0x2e
      SYS_ARCH_UNPROTECT(lev);
 802bc68:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 802bc6a:	f00c fc7d 	bl	8038568 <sys_arch_unprotect>

      /* ... then examine it: */
      /* See if netconn of this socket is ready for read */
      if (readset_in && FD_ISSET(i, readset_in) && ((lastdata != NULL) || (rcvevent > 0))) {
 802bc6e:	68bb      	ldr	r3, [r7, #8]
 802bc70:	2b00      	cmp	r3, #0
 802bc72:	d03c      	beq.n	802bcee <lwip_selscan+0x1d2>
 802bc74:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 802bc76:	2b00      	cmp	r3, #0
 802bc78:	da00      	bge.n	802bc7c <lwip_selscan+0x160>
 802bc7a:	331f      	adds	r3, #31
 802bc7c:	115b      	asrs	r3, r3, #5
 802bc7e:	461a      	mov	r2, r3
 802bc80:	68bb      	ldr	r3, [r7, #8]
 802bc82:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 802bc86:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 802bc88:	4259      	negs	r1, r3
 802bc8a:	f003 031f 	and.w	r3, r3, #31
 802bc8e:	f001 011f 	and.w	r1, r1, #31
 802bc92:	bf58      	it	pl
 802bc94:	424b      	negpl	r3, r1
 802bc96:	fa22 f303 	lsr.w	r3, r2, r3
 802bc9a:	f003 0301 	and.w	r3, r3, #1
 802bc9e:	2b00      	cmp	r3, #0
 802bca0:	d025      	beq.n	802bcee <lwip_selscan+0x1d2>
 802bca2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 802bca4:	2b00      	cmp	r3, #0
 802bca6:	d103      	bne.n	802bcb0 <lwip_selscan+0x194>
 802bca8:	f9b7 3032 	ldrsh.w	r3, [r7, #50]	; 0x32
 802bcac:	2b00      	cmp	r3, #0
 802bcae:	dd1e      	ble.n	802bcee <lwip_selscan+0x1d2>
        FD_SET(i, &lreadset);
 802bcb0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 802bcb2:	2b00      	cmp	r3, #0
 802bcb4:	da00      	bge.n	802bcb8 <lwip_selscan+0x19c>
 802bcb6:	331f      	adds	r3, #31
 802bcb8:	115b      	asrs	r3, r3, #5
 802bcba:	461a      	mov	r2, r3
 802bcbc:	0093      	lsls	r3, r2, #2
 802bcbe:	3360      	adds	r3, #96	; 0x60
 802bcc0:	443b      	add	r3, r7
 802bcc2:	f853 1c3c 	ldr.w	r1, [r3, #-60]
 802bcc6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 802bcc8:	4258      	negs	r0, r3
 802bcca:	f003 031f 	and.w	r3, r3, #31
 802bcce:	f000 001f 	and.w	r0, r0, #31
 802bcd2:	bf58      	it	pl
 802bcd4:	4243      	negpl	r3, r0
 802bcd6:	2001      	movs	r0, #1
 802bcd8:	fa00 f303 	lsl.w	r3, r0, r3
 802bcdc:	4319      	orrs	r1, r3
 802bcde:	0093      	lsls	r3, r2, #2
 802bce0:	3360      	adds	r3, #96	; 0x60
 802bce2:	443b      	add	r3, r7
 802bce4:	f843 1c3c 	str.w	r1, [r3, #-60]
        LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_selscan: fd=%d ready for reading\n", i));
        nready++;
 802bce8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 802bcea:	3301      	adds	r3, #1
 802bcec:	65bb      	str	r3, [r7, #88]	; 0x58
      }
      /* See if netconn of this socket is ready for write */
      if (writeset_in && FD_ISSET(i, writeset_in) && (sendevent != 0)) {
 802bcee:	687b      	ldr	r3, [r7, #4]
 802bcf0:	2b00      	cmp	r3, #0
 802bcf2:	d038      	beq.n	802bd66 <lwip_selscan+0x24a>
 802bcf4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 802bcf6:	2b00      	cmp	r3, #0
 802bcf8:	da00      	bge.n	802bcfc <lwip_selscan+0x1e0>
 802bcfa:	331f      	adds	r3, #31
 802bcfc:	115b      	asrs	r3, r3, #5
 802bcfe:	461a      	mov	r2, r3
 802bd00:	687b      	ldr	r3, [r7, #4]
 802bd02:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 802bd06:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 802bd08:	4259      	negs	r1, r3
 802bd0a:	f003 031f 	and.w	r3, r3, #31
 802bd0e:	f001 011f 	and.w	r1, r1, #31
 802bd12:	bf58      	it	pl
 802bd14:	424b      	negpl	r3, r1
 802bd16:	fa22 f303 	lsr.w	r3, r2, r3
 802bd1a:	f003 0301 	and.w	r3, r3, #1
 802bd1e:	2b00      	cmp	r3, #0
 802bd20:	d021      	beq.n	802bd66 <lwip_selscan+0x24a>
 802bd22:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 802bd24:	2b00      	cmp	r3, #0
 802bd26:	d01e      	beq.n	802bd66 <lwip_selscan+0x24a>
        FD_SET(i, &lwriteset);
 802bd28:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 802bd2a:	2b00      	cmp	r3, #0
 802bd2c:	da00      	bge.n	802bd30 <lwip_selscan+0x214>
 802bd2e:	331f      	adds	r3, #31
 802bd30:	115b      	asrs	r3, r3, #5
 802bd32:	461a      	mov	r2, r3
 802bd34:	0093      	lsls	r3, r2, #2
 802bd36:	3360      	adds	r3, #96	; 0x60
 802bd38:	443b      	add	r3, r7
 802bd3a:	f853 1c44 	ldr.w	r1, [r3, #-68]
 802bd3e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 802bd40:	4258      	negs	r0, r3
 802bd42:	f003 031f 	and.w	r3, r3, #31
 802bd46:	f000 001f 	and.w	r0, r0, #31
 802bd4a:	bf58      	it	pl
 802bd4c:	4243      	negpl	r3, r0
 802bd4e:	2001      	movs	r0, #1
 802bd50:	fa00 f303 	lsl.w	r3, r0, r3
 802bd54:	4319      	orrs	r1, r3
 802bd56:	0093      	lsls	r3, r2, #2
 802bd58:	3360      	adds	r3, #96	; 0x60
 802bd5a:	443b      	add	r3, r7
 802bd5c:	f843 1c44 	str.w	r1, [r3, #-68]
        LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_selscan: fd=%d ready for writing\n", i));
        nready++;
 802bd60:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 802bd62:	3301      	adds	r3, #1
 802bd64:	65bb      	str	r3, [r7, #88]	; 0x58
      }
      /* See if netconn of this socket had an error */
      if (exceptset_in && FD_ISSET(i, exceptset_in) && (errevent != 0)) {
 802bd66:	683b      	ldr	r3, [r7, #0]
 802bd68:	2b00      	cmp	r3, #0
 802bd6a:	d040      	beq.n	802bdee <lwip_selscan+0x2d2>
 802bd6c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 802bd6e:	2b00      	cmp	r3, #0
 802bd70:	da00      	bge.n	802bd74 <lwip_selscan+0x258>
 802bd72:	331f      	adds	r3, #31
 802bd74:	115b      	asrs	r3, r3, #5
 802bd76:	461a      	mov	r2, r3
 802bd78:	683b      	ldr	r3, [r7, #0]
 802bd7a:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 802bd7e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 802bd80:	4259      	negs	r1, r3
 802bd82:	f003 031f 	and.w	r3, r3, #31
 802bd86:	f001 011f 	and.w	r1, r1, #31
 802bd8a:	bf58      	it	pl
 802bd8c:	424b      	negpl	r3, r1
 802bd8e:	fa22 f303 	lsr.w	r3, r2, r3
 802bd92:	f003 0301 	and.w	r3, r3, #1
 802bd96:	2b00      	cmp	r3, #0
 802bd98:	d029      	beq.n	802bdee <lwip_selscan+0x2d2>
 802bd9a:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 802bd9c:	2b00      	cmp	r3, #0
 802bd9e:	d026      	beq.n	802bdee <lwip_selscan+0x2d2>
        FD_SET(i, &lexceptset);
 802bda0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 802bda2:	2b00      	cmp	r3, #0
 802bda4:	da00      	bge.n	802bda8 <lwip_selscan+0x28c>
 802bda6:	331f      	adds	r3, #31
 802bda8:	115b      	asrs	r3, r3, #5
 802bdaa:	461a      	mov	r2, r3
 802bdac:	0093      	lsls	r3, r2, #2
 802bdae:	3360      	adds	r3, #96	; 0x60
 802bdb0:	443b      	add	r3, r7
 802bdb2:	f853 1c4c 	ldr.w	r1, [r3, #-76]
 802bdb6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 802bdb8:	4258      	negs	r0, r3
 802bdba:	f003 031f 	and.w	r3, r3, #31
 802bdbe:	f000 001f 	and.w	r0, r0, #31
 802bdc2:	bf58      	it	pl
 802bdc4:	4243      	negpl	r3, r0
 802bdc6:	2001      	movs	r0, #1
 802bdc8:	fa00 f303 	lsl.w	r3, r0, r3
 802bdcc:	4319      	orrs	r1, r3
 802bdce:	0093      	lsls	r3, r2, #2
 802bdd0:	3360      	adds	r3, #96	; 0x60
 802bdd2:	443b      	add	r3, r7
 802bdd4:	f843 1c4c 	str.w	r1, [r3, #-76]
        LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_selscan: fd=%d ready for exception\n", i));
        nready++;
 802bdd8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 802bdda:	3301      	adds	r3, #1
 802bddc:	65bb      	str	r3, [r7, #88]	; 0x58
 802bdde:	e006      	b.n	802bdee <lwip_selscan+0x2d2>
      }
      done_socket(sock);
    } else {
      SYS_ARCH_UNPROTECT(lev);
 802bde0:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 802bde2:	f00c fbc1 	bl	8038568 <sys_arch_unprotect>
      /* no a valid open socket */
      return -1;
 802bde6:	f04f 33ff 	mov.w	r3, #4294967295
 802bdea:	e02b      	b.n	802be44 <lwip_selscan+0x328>
      continue;
 802bdec:	bf00      	nop
  for (i = LWIP_SOCKET_OFFSET; i < maxfdp1; i++) {
 802bdee:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 802bdf0:	3301      	adds	r3, #1
 802bdf2:	65fb      	str	r3, [r7, #92]	; 0x5c
 802bdf4:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 802bdf6:	68fb      	ldr	r3, [r7, #12]
 802bdf8:	429a      	cmp	r2, r3
 802bdfa:	f6ff aece 	blt.w	802bb9a <lwip_selscan+0x7e>
    }
  }
  /* copy local sets to the ones provided as arguments */
  *readset_out = lreadset;
 802bdfe:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 802be00:	461a      	mov	r2, r3
 802be02:	f107 0324 	add.w	r3, r7, #36	; 0x24
 802be06:	e893 0003 	ldmia.w	r3, {r0, r1}
 802be0a:	e882 0003 	stmia.w	r2, {r0, r1}
  *writeset_out = lwriteset;
 802be0e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 802be10:	461a      	mov	r2, r3
 802be12:	f107 031c 	add.w	r3, r7, #28
 802be16:	e893 0003 	ldmia.w	r3, {r0, r1}
 802be1a:	e882 0003 	stmia.w	r2, {r0, r1}
  *exceptset_out = lexceptset;
 802be1e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 802be20:	461a      	mov	r2, r3
 802be22:	f107 0314 	add.w	r3, r7, #20
 802be26:	e893 0003 	ldmia.w	r3, {r0, r1}
 802be2a:	e882 0003 	stmia.w	r2, {r0, r1}

  LWIP_ASSERT("nready >= 0", nready >= 0);
 802be2e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 802be30:	2b00      	cmp	r3, #0
 802be32:	da06      	bge.n	802be42 <lwip_selscan+0x326>
 802be34:	4b05      	ldr	r3, [pc, #20]	; (802be4c <lwip_selscan+0x330>)
 802be36:	f240 7269 	movw	r2, #1897	; 0x769
 802be3a:	4905      	ldr	r1, [pc, #20]	; (802be50 <lwip_selscan+0x334>)
 802be3c:	4805      	ldr	r0, [pc, #20]	; (802be54 <lwip_selscan+0x338>)
 802be3e:	f00d f913 	bl	8039068 <iprintf>
  return nready;
 802be42:	6dbb      	ldr	r3, [r7, #88]	; 0x58
}
 802be44:	4618      	mov	r0, r3
 802be46:	3760      	adds	r7, #96	; 0x60
 802be48:	46bd      	mov	sp, r7
 802be4a:	bd80      	pop	{r7, pc}
 802be4c:	0803a5fc 	.word	0x0803a5fc
 802be50:	0803a92c 	.word	0x0803a92c
 802be54:	0803a650 	.word	0x0803a650

0802be58 <lwip_select>:
#endif /* LWIP_NETCONN_FULLDUPLEX */

int
lwip_select(int maxfdp1, fd_set *readset, fd_set *writeset, fd_set *exceptset,
            struct timeval *timeout)
{
 802be58:	b580      	push	{r7, lr}
 802be5a:	b0a0      	sub	sp, #128	; 0x80
 802be5c:	af04      	add	r7, sp, #16
 802be5e:	60f8      	str	r0, [r7, #12]
 802be60:	60b9      	str	r1, [r7, #8]
 802be62:	607a      	str	r2, [r7, #4]
 802be64:	603b      	str	r3, [r7, #0]
  u32_t waitres = 0;
 802be66:	2300      	movs	r3, #0
 802be68:	66fb      	str	r3, [r7, #108]	; 0x6c
  LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_select(%d, %p, %p, %p, tvsec=%"S32_F" tvusec=%"S32_F")\n",
                              maxfdp1, (void *)readset, (void *) writeset, (void *) exceptset,
                              timeout ? (s32_t)timeout->tv_sec : (s32_t) - 1,
                              timeout ? (s32_t)timeout->tv_usec : (s32_t) - 1));

  if ((maxfdp1 < 0) || (maxfdp1 > LWIP_SELECT_MAXNFDS)) {
 802be6a:	68fb      	ldr	r3, [r7, #12]
 802be6c:	2b00      	cmp	r3, #0
 802be6e:	db02      	blt.n	802be76 <lwip_select+0x1e>
 802be70:	68fb      	ldr	r3, [r7, #12]
 802be72:	2b40      	cmp	r3, #64	; 0x40
 802be74:	dd05      	ble.n	802be82 <lwip_select+0x2a>
    set_errno(EINVAL);
 802be76:	4b92      	ldr	r3, [pc, #584]	; (802c0c0 <lwip_select+0x268>)
 802be78:	2216      	movs	r2, #22
 802be7a:	601a      	str	r2, [r3, #0]
    return -1;
 802be7c:	f04f 33ff 	mov.w	r3, #4294967295
 802be80:	e1eb      	b.n	802c25a <lwip_select+0x402>

  lwip_select_inc_sockets_used(maxfdp1, readset, writeset, exceptset, &used_sockets);

  /* Go through each socket in each list to count number of sockets which
     currently match */
  nready = lwip_selscan(maxfdp1, readset, writeset, exceptset, &lreadset, &lwriteset, &lexceptset);
 802be82:	f107 0334 	add.w	r3, r7, #52	; 0x34
 802be86:	9302      	str	r3, [sp, #8]
 802be88:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 802be8c:	9301      	str	r3, [sp, #4]
 802be8e:	f107 0344 	add.w	r3, r7, #68	; 0x44
 802be92:	9300      	str	r3, [sp, #0]
 802be94:	683b      	ldr	r3, [r7, #0]
 802be96:	687a      	ldr	r2, [r7, #4]
 802be98:	68b9      	ldr	r1, [r7, #8]
 802be9a:	68f8      	ldr	r0, [r7, #12]
 802be9c:	f7ff fe3e 	bl	802bb1c <lwip_selscan>
 802bea0:	66b8      	str	r0, [r7, #104]	; 0x68

  if (nready < 0) {
 802bea2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 802bea4:	2b00      	cmp	r3, #0
 802bea6:	da05      	bge.n	802beb4 <lwip_select+0x5c>
    /* one of the sockets in one of the fd_sets was invalid */
    set_errno(EBADF);
 802bea8:	4b85      	ldr	r3, [pc, #532]	; (802c0c0 <lwip_select+0x268>)
 802beaa:	2209      	movs	r2, #9
 802beac:	601a      	str	r2, [r3, #0]
    lwip_select_dec_sockets_used(maxfdp1, &used_sockets);
    return -1;
 802beae:	f04f 33ff 	mov.w	r3, #4294967295
 802beb2:	e1d2      	b.n	802c25a <lwip_select+0x402>
  } else if (nready > 0) {
 802beb4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 802beb6:	2b00      	cmp	r3, #0
 802beb8:	f300 81ad 	bgt.w	802c216 <lwip_select+0x3be>
    /* one or more sockets are set, no need to wait */
    LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_select: nready=%d\n", nready));
  } else {
    /* If we don't have any current events, then suspend if we are supposed to */
    if (timeout && timeout->tv_sec == 0 && timeout->tv_usec == 0) {
 802bebc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 802bebe:	2b00      	cmp	r3, #0
 802bec0:	d009      	beq.n	802bed6 <lwip_select+0x7e>
 802bec2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 802bec4:	e9d3 2300 	ldrd	r2, r3, [r3]
 802bec8:	4313      	orrs	r3, r2
 802beca:	d104      	bne.n	802bed6 <lwip_select+0x7e>
 802becc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 802bece:	689b      	ldr	r3, [r3, #8]
 802bed0:	2b00      	cmp	r3, #0
 802bed2:	f000 81a0 	beq.w	802c216 <lwip_select+0x3be>
         list is only valid while we are in this function, so it's ok
         to use local variables (unless we're running in MPU compatible
         mode). */
      API_SELECT_CB_VAR_DECLARE(select_cb);
      API_SELECT_CB_VAR_ALLOC(select_cb, set_errno(ENOMEM); lwip_select_dec_sockets_used(maxfdp1, &used_sockets); return -1);
      memset(&API_SELECT_CB_VAR_REF(select_cb), 0, sizeof(struct lwip_select_cb));
 802bed6:	f107 0310 	add.w	r3, r7, #16
 802beda:	2224      	movs	r2, #36	; 0x24
 802bedc:	2100      	movs	r1, #0
 802bede:	4618      	mov	r0, r3
 802bee0:	f00c fcd6 	bl	8038890 <memset>

      API_SELECT_CB_VAR_REF(select_cb).readset = readset;
 802bee4:	68bb      	ldr	r3, [r7, #8]
 802bee6:	61bb      	str	r3, [r7, #24]
      API_SELECT_CB_VAR_REF(select_cb).writeset = writeset;
 802bee8:	687b      	ldr	r3, [r7, #4]
 802beea:	61fb      	str	r3, [r7, #28]
      API_SELECT_CB_VAR_REF(select_cb).exceptset = exceptset;
 802beec:	683b      	ldr	r3, [r7, #0]
 802beee:	623b      	str	r3, [r7, #32]
#if LWIP_NETCONN_SEM_PER_THREAD
      API_SELECT_CB_VAR_REF(select_cb).sem = LWIP_NETCONN_THREAD_SEM_GET();
#else /* LWIP_NETCONN_SEM_PER_THREAD */
      if (sys_sem_new(&API_SELECT_CB_VAR_REF(select_cb).sem, 0) != ERR_OK) {
 802bef0:	f107 0310 	add.w	r3, r7, #16
 802bef4:	3320      	adds	r3, #32
 802bef6:	2100      	movs	r1, #0
 802bef8:	4618      	mov	r0, r3
 802befa:	f00c f9df 	bl	80382bc <sys_sem_new>
 802befe:	4603      	mov	r3, r0
 802bf00:	2b00      	cmp	r3, #0
 802bf02:	d005      	beq.n	802bf10 <lwip_select+0xb8>
        /* failed to create semaphore */
        set_errno(ENOMEM);
 802bf04:	4b6e      	ldr	r3, [pc, #440]	; (802c0c0 <lwip_select+0x268>)
 802bf06:	220c      	movs	r2, #12
 802bf08:	601a      	str	r2, [r3, #0]
        lwip_select_dec_sockets_used(maxfdp1, &used_sockets);
        API_SELECT_CB_VAR_FREE(select_cb);
        return -1;
 802bf0a:	f04f 33ff 	mov.w	r3, #4294967295
 802bf0e:	e1a4      	b.n	802c25a <lwip_select+0x402>
      }
#endif /* LWIP_NETCONN_SEM_PER_THREAD */

      lwip_link_select_cb(&API_SELECT_CB_VAR_REF(select_cb));
 802bf10:	f107 0310 	add.w	r3, r7, #16
 802bf14:	4618      	mov	r0, r3
 802bf16:	f7ff fd97 	bl	802ba48 <lwip_link_select_cb>

      /* Increase select_waiting for each socket we are interested in */
      maxfdp2 = maxfdp1;
 802bf1a:	68fb      	ldr	r3, [r7, #12]
 802bf1c:	65fb      	str	r3, [r7, #92]	; 0x5c
      for (i = LWIP_SOCKET_OFFSET; i < maxfdp1; i++) {
 802bf1e:	2300      	movs	r3, #0
 802bf20:	663b      	str	r3, [r7, #96]	; 0x60
 802bf22:	e086      	b.n	802c032 <lwip_select+0x1da>
        if ((readset && FD_ISSET(i, readset)) ||
 802bf24:	68bb      	ldr	r3, [r7, #8]
 802bf26:	2b00      	cmp	r3, #0
 802bf28:	d016      	beq.n	802bf58 <lwip_select+0x100>
 802bf2a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 802bf2c:	2b00      	cmp	r3, #0
 802bf2e:	da00      	bge.n	802bf32 <lwip_select+0xda>
 802bf30:	331f      	adds	r3, #31
 802bf32:	115b      	asrs	r3, r3, #5
 802bf34:	461a      	mov	r2, r3
 802bf36:	68bb      	ldr	r3, [r7, #8]
 802bf38:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 802bf3c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 802bf3e:	4259      	negs	r1, r3
 802bf40:	f003 031f 	and.w	r3, r3, #31
 802bf44:	f001 011f 	and.w	r1, r1, #31
 802bf48:	bf58      	it	pl
 802bf4a:	424b      	negpl	r3, r1
 802bf4c:	fa22 f303 	lsr.w	r3, r2, r3
 802bf50:	f003 0301 	and.w	r3, r3, #1
 802bf54:	2b00      	cmp	r3, #0
 802bf56:	d133      	bne.n	802bfc0 <lwip_select+0x168>
 802bf58:	687b      	ldr	r3, [r7, #4]
 802bf5a:	2b00      	cmp	r3, #0
 802bf5c:	d016      	beq.n	802bf8c <lwip_select+0x134>
            (writeset && FD_ISSET(i, writeset)) ||
 802bf5e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 802bf60:	2b00      	cmp	r3, #0
 802bf62:	da00      	bge.n	802bf66 <lwip_select+0x10e>
 802bf64:	331f      	adds	r3, #31
 802bf66:	115b      	asrs	r3, r3, #5
 802bf68:	461a      	mov	r2, r3
 802bf6a:	687b      	ldr	r3, [r7, #4]
 802bf6c:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 802bf70:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 802bf72:	4259      	negs	r1, r3
 802bf74:	f003 031f 	and.w	r3, r3, #31
 802bf78:	f001 011f 	and.w	r1, r1, #31
 802bf7c:	bf58      	it	pl
 802bf7e:	424b      	negpl	r3, r1
 802bf80:	fa22 f303 	lsr.w	r3, r2, r3
 802bf84:	f003 0301 	and.w	r3, r3, #1
 802bf88:	2b00      	cmp	r3, #0
 802bf8a:	d119      	bne.n	802bfc0 <lwip_select+0x168>
 802bf8c:	683b      	ldr	r3, [r7, #0]
 802bf8e:	2b00      	cmp	r3, #0
 802bf90:	d04c      	beq.n	802c02c <lwip_select+0x1d4>
            (exceptset && FD_ISSET(i, exceptset))) {
 802bf92:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 802bf94:	2b00      	cmp	r3, #0
 802bf96:	da00      	bge.n	802bf9a <lwip_select+0x142>
 802bf98:	331f      	adds	r3, #31
 802bf9a:	115b      	asrs	r3, r3, #5
 802bf9c:	461a      	mov	r2, r3
 802bf9e:	683b      	ldr	r3, [r7, #0]
 802bfa0:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 802bfa4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 802bfa6:	4259      	negs	r1, r3
 802bfa8:	f003 031f 	and.w	r3, r3, #31
 802bfac:	f001 011f 	and.w	r1, r1, #31
 802bfb0:	bf58      	it	pl
 802bfb2:	424b      	negpl	r3, r1
 802bfb4:	fa22 f303 	lsr.w	r3, r2, r3
 802bfb8:	f003 0301 	and.w	r3, r3, #1
 802bfbc:	2b00      	cmp	r3, #0
 802bfbe:	d035      	beq.n	802c02c <lwip_select+0x1d4>
          struct lwip_sock *sock;
          SYS_ARCH_PROTECT(lev);
 802bfc0:	f00c fac4 	bl	803854c <sys_arch_protect>
 802bfc4:	65b8      	str	r0, [r7, #88]	; 0x58
          sock = tryget_socket_unconn_locked(i);
 802bfc6:	6e38      	ldr	r0, [r7, #96]	; 0x60
 802bfc8:	f7fe fd67 	bl	802aa9a <tryget_socket_unconn_locked>
 802bfcc:	6578      	str	r0, [r7, #84]	; 0x54
          if (sock != NULL) {
 802bfce:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 802bfd0:	2b00      	cmp	r3, #0
 802bfd2:	d01f      	beq.n	802c014 <lwip_select+0x1bc>
            sock->select_waiting++;
 802bfd4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 802bfd6:	7b9b      	ldrb	r3, [r3, #14]
 802bfd8:	3301      	adds	r3, #1
 802bfda:	b2da      	uxtb	r2, r3
 802bfdc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 802bfde:	739a      	strb	r2, [r3, #14]
            if (sock->select_waiting == 0) {
 802bfe0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 802bfe2:	7b9b      	ldrb	r3, [r3, #14]
 802bfe4:	2b00      	cmp	r3, #0
 802bfe6:	d111      	bne.n	802c00c <lwip_select+0x1b4>
              /* overflow - too many threads waiting */
              sock->select_waiting--;
 802bfe8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 802bfea:	7b9b      	ldrb	r3, [r3, #14]
 802bfec:	3b01      	subs	r3, #1
 802bfee:	b2da      	uxtb	r2, r3
 802bff0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 802bff2:	739a      	strb	r2, [r3, #14]
              nready = -1;
 802bff4:	f04f 33ff 	mov.w	r3, #4294967295
 802bff8:	66bb      	str	r3, [r7, #104]	; 0x68
              maxfdp2 = i;
 802bffa:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 802bffc:	65fb      	str	r3, [r7, #92]	; 0x5c
              SYS_ARCH_UNPROTECT(lev);
 802bffe:	6db8      	ldr	r0, [r7, #88]	; 0x58
 802c000:	f00c fab2 	bl	8038568 <sys_arch_unprotect>
              done_socket(sock);
              set_errno(EBUSY);
 802c004:	4b2e      	ldr	r3, [pc, #184]	; (802c0c0 <lwip_select+0x268>)
 802c006:	2210      	movs	r2, #16
 802c008:	601a      	str	r2, [r3, #0]
              break;
 802c00a:	e017      	b.n	802c03c <lwip_select+0x1e4>
            }
            SYS_ARCH_UNPROTECT(lev);
 802c00c:	6db8      	ldr	r0, [r7, #88]	; 0x58
 802c00e:	f00c faab 	bl	8038568 <sys_arch_unprotect>
 802c012:	e00b      	b.n	802c02c <lwip_select+0x1d4>
            done_socket(sock);
          } else {
            /* Not a valid socket */
            nready = -1;
 802c014:	f04f 33ff 	mov.w	r3, #4294967295
 802c018:	66bb      	str	r3, [r7, #104]	; 0x68
            maxfdp2 = i;
 802c01a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 802c01c:	65fb      	str	r3, [r7, #92]	; 0x5c
            SYS_ARCH_UNPROTECT(lev);
 802c01e:	6db8      	ldr	r0, [r7, #88]	; 0x58
 802c020:	f00c faa2 	bl	8038568 <sys_arch_unprotect>
            set_errno(EBADF);
 802c024:	4b26      	ldr	r3, [pc, #152]	; (802c0c0 <lwip_select+0x268>)
 802c026:	2209      	movs	r2, #9
 802c028:	601a      	str	r2, [r3, #0]
            break;
 802c02a:	e007      	b.n	802c03c <lwip_select+0x1e4>
      for (i = LWIP_SOCKET_OFFSET; i < maxfdp1; i++) {
 802c02c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 802c02e:	3301      	adds	r3, #1
 802c030:	663b      	str	r3, [r7, #96]	; 0x60
 802c032:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 802c034:	68fb      	ldr	r3, [r7, #12]
 802c036:	429a      	cmp	r2, r3
 802c038:	f6ff af74 	blt.w	802bf24 <lwip_select+0xcc>
          }
        }
      }

      if (nready >= 0) {
 802c03c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 802c03e:	2b00      	cmp	r3, #0
 802c040:	db3b      	blt.n	802c0ba <lwip_select+0x262>
        /* Call lwip_selscan again: there could have been events between
           the last scan (without us on the list) and putting us on the list! */
        nready = lwip_selscan(maxfdp1, readset, writeset, exceptset, &lreadset, &lwriteset, &lexceptset);
 802c042:	f107 0334 	add.w	r3, r7, #52	; 0x34
 802c046:	9302      	str	r3, [sp, #8]
 802c048:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 802c04c:	9301      	str	r3, [sp, #4]
 802c04e:	f107 0344 	add.w	r3, r7, #68	; 0x44
 802c052:	9300      	str	r3, [sp, #0]
 802c054:	683b      	ldr	r3, [r7, #0]
 802c056:	687a      	ldr	r2, [r7, #4]
 802c058:	68b9      	ldr	r1, [r7, #8]
 802c05a:	68f8      	ldr	r0, [r7, #12]
 802c05c:	f7ff fd5e 	bl	802bb1c <lwip_selscan>
 802c060:	66b8      	str	r0, [r7, #104]	; 0x68
        if (!nready) {
 802c062:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 802c064:	2b00      	cmp	r3, #0
 802c066:	d128      	bne.n	802c0ba <lwip_select+0x262>
          /* Still none ready, just wait to be woken */
          if (timeout == 0) {
 802c068:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 802c06a:	2b00      	cmp	r3, #0
 802c06c:	d102      	bne.n	802c074 <lwip_select+0x21c>
            /* Wait forever */
            msectimeout = 0;
 802c06e:	2300      	movs	r3, #0
 802c070:	667b      	str	r3, [r7, #100]	; 0x64
 802c072:	e01a      	b.n	802c0aa <lwip_select+0x252>
          } else {
            long msecs_long = ((timeout->tv_sec * 1000) + ((timeout->tv_usec + 500) / 1000));
 802c074:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 802c076:	e9d3 2300 	ldrd	r2, r3, [r3]
 802c07a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 802c07e:	fb03 f202 	mul.w	r2, r3, r2
 802c082:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 802c084:	689b      	ldr	r3, [r3, #8]
 802c086:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 802c08a:	490e      	ldr	r1, [pc, #56]	; (802c0c4 <lwip_select+0x26c>)
 802c08c:	fb81 0103 	smull	r0, r1, r1, r3
 802c090:	1189      	asrs	r1, r1, #6
 802c092:	17db      	asrs	r3, r3, #31
 802c094:	1acb      	subs	r3, r1, r3
 802c096:	4413      	add	r3, r2
 802c098:	653b      	str	r3, [r7, #80]	; 0x50
            if (msecs_long <= 0) {
 802c09a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 802c09c:	2b00      	cmp	r3, #0
 802c09e:	dc02      	bgt.n	802c0a6 <lwip_select+0x24e>
              /* Wait 1ms at least (0 means wait forever) */
              msectimeout = 1;
 802c0a0:	2301      	movs	r3, #1
 802c0a2:	667b      	str	r3, [r7, #100]	; 0x64
 802c0a4:	e001      	b.n	802c0aa <lwip_select+0x252>
            } else {
              msectimeout = (u32_t)msecs_long;
 802c0a6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 802c0a8:	667b      	str	r3, [r7, #100]	; 0x64
            }
          }

          waitres = sys_arch_sem_wait(SELECT_SEM_PTR(API_SELECT_CB_VAR_REF(select_cb).sem), msectimeout);
 802c0aa:	f107 0310 	add.w	r3, r7, #16
 802c0ae:	3320      	adds	r3, #32
 802c0b0:	6e79      	ldr	r1, [r7, #100]	; 0x64
 802c0b2:	4618      	mov	r0, r3
 802c0b4:	f00c f94a 	bl	803834c <sys_arch_sem_wait>
 802c0b8:	66f8      	str	r0, [r7, #108]	; 0x6c
#endif
        }
      }

      /* Decrease select_waiting for each socket we are interested in */
      for (i = LWIP_SOCKET_OFFSET; i < maxfdp2; i++) {
 802c0ba:	2300      	movs	r3, #0
 802c0bc:	663b      	str	r3, [r7, #96]	; 0x60
 802c0be:	e080      	b.n	802c1c2 <lwip_select+0x36a>
 802c0c0:	2000f06c 	.word	0x2000f06c
 802c0c4:	10624dd3 	.word	0x10624dd3
        if ((readset && FD_ISSET(i, readset)) ||
 802c0c8:	68bb      	ldr	r3, [r7, #8]
 802c0ca:	2b00      	cmp	r3, #0
 802c0cc:	d016      	beq.n	802c0fc <lwip_select+0x2a4>
 802c0ce:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 802c0d0:	2b00      	cmp	r3, #0
 802c0d2:	da00      	bge.n	802c0d6 <lwip_select+0x27e>
 802c0d4:	331f      	adds	r3, #31
 802c0d6:	115b      	asrs	r3, r3, #5
 802c0d8:	461a      	mov	r2, r3
 802c0da:	68bb      	ldr	r3, [r7, #8]
 802c0dc:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 802c0e0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 802c0e2:	4259      	negs	r1, r3
 802c0e4:	f003 031f 	and.w	r3, r3, #31
 802c0e8:	f001 011f 	and.w	r1, r1, #31
 802c0ec:	bf58      	it	pl
 802c0ee:	424b      	negpl	r3, r1
 802c0f0:	fa22 f303 	lsr.w	r3, r2, r3
 802c0f4:	f003 0301 	and.w	r3, r3, #1
 802c0f8:	2b00      	cmp	r3, #0
 802c0fa:	d133      	bne.n	802c164 <lwip_select+0x30c>
 802c0fc:	687b      	ldr	r3, [r7, #4]
 802c0fe:	2b00      	cmp	r3, #0
 802c100:	d016      	beq.n	802c130 <lwip_select+0x2d8>
            (writeset && FD_ISSET(i, writeset)) ||
 802c102:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 802c104:	2b00      	cmp	r3, #0
 802c106:	da00      	bge.n	802c10a <lwip_select+0x2b2>
 802c108:	331f      	adds	r3, #31
 802c10a:	115b      	asrs	r3, r3, #5
 802c10c:	461a      	mov	r2, r3
 802c10e:	687b      	ldr	r3, [r7, #4]
 802c110:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 802c114:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 802c116:	4259      	negs	r1, r3
 802c118:	f003 031f 	and.w	r3, r3, #31
 802c11c:	f001 011f 	and.w	r1, r1, #31
 802c120:	bf58      	it	pl
 802c122:	424b      	negpl	r3, r1
 802c124:	fa22 f303 	lsr.w	r3, r2, r3
 802c128:	f003 0301 	and.w	r3, r3, #1
 802c12c:	2b00      	cmp	r3, #0
 802c12e:	d119      	bne.n	802c164 <lwip_select+0x30c>
 802c130:	683b      	ldr	r3, [r7, #0]
 802c132:	2b00      	cmp	r3, #0
 802c134:	d042      	beq.n	802c1bc <lwip_select+0x364>
            (exceptset && FD_ISSET(i, exceptset))) {
 802c136:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 802c138:	2b00      	cmp	r3, #0
 802c13a:	da00      	bge.n	802c13e <lwip_select+0x2e6>
 802c13c:	331f      	adds	r3, #31
 802c13e:	115b      	asrs	r3, r3, #5
 802c140:	461a      	mov	r2, r3
 802c142:	683b      	ldr	r3, [r7, #0]
 802c144:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 802c148:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 802c14a:	4259      	negs	r1, r3
 802c14c:	f003 031f 	and.w	r3, r3, #31
 802c150:	f001 011f 	and.w	r1, r1, #31
 802c154:	bf58      	it	pl
 802c156:	424b      	negpl	r3, r1
 802c158:	fa22 f303 	lsr.w	r3, r2, r3
 802c15c:	f003 0301 	and.w	r3, r3, #1
 802c160:	2b00      	cmp	r3, #0
 802c162:	d02b      	beq.n	802c1bc <lwip_select+0x364>
          struct lwip_sock *sock;
          SYS_ARCH_PROTECT(lev);
 802c164:	f00c f9f2 	bl	803854c <sys_arch_protect>
 802c168:	65b8      	str	r0, [r7, #88]	; 0x58
          sock = tryget_socket_unconn_locked(i);
 802c16a:	6e38      	ldr	r0, [r7, #96]	; 0x60
 802c16c:	f7fe fc95 	bl	802aa9a <tryget_socket_unconn_locked>
 802c170:	64f8      	str	r0, [r7, #76]	; 0x4c
          if (sock != NULL) {
 802c172:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 802c174:	2b00      	cmp	r3, #0
 802c176:	d018      	beq.n	802c1aa <lwip_select+0x352>
            /* for now, handle select_waiting==0... */
            LWIP_ASSERT("sock->select_waiting > 0", sock->select_waiting > 0);
 802c178:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 802c17a:	7b9b      	ldrb	r3, [r3, #14]
 802c17c:	2b00      	cmp	r3, #0
 802c17e:	d106      	bne.n	802c18e <lwip_select+0x336>
 802c180:	4b38      	ldr	r3, [pc, #224]	; (802c264 <lwip_select+0x40c>)
 802c182:	f640 023c 	movw	r2, #2108	; 0x83c
 802c186:	4938      	ldr	r1, [pc, #224]	; (802c268 <lwip_select+0x410>)
 802c188:	4838      	ldr	r0, [pc, #224]	; (802c26c <lwip_select+0x414>)
 802c18a:	f00c ff6d 	bl	8039068 <iprintf>
            if (sock->select_waiting > 0) {
 802c18e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 802c190:	7b9b      	ldrb	r3, [r3, #14]
 802c192:	2b00      	cmp	r3, #0
 802c194:	d005      	beq.n	802c1a2 <lwip_select+0x34a>
              sock->select_waiting--;
 802c196:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 802c198:	7b9b      	ldrb	r3, [r3, #14]
 802c19a:	3b01      	subs	r3, #1
 802c19c:	b2da      	uxtb	r2, r3
 802c19e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 802c1a0:	739a      	strb	r2, [r3, #14]
            }
            SYS_ARCH_UNPROTECT(lev);
 802c1a2:	6db8      	ldr	r0, [r7, #88]	; 0x58
 802c1a4:	f00c f9e0 	bl	8038568 <sys_arch_unprotect>
 802c1a8:	e008      	b.n	802c1bc <lwip_select+0x364>
            done_socket(sock);
          } else {
            SYS_ARCH_UNPROTECT(lev);
 802c1aa:	6db8      	ldr	r0, [r7, #88]	; 0x58
 802c1ac:	f00c f9dc 	bl	8038568 <sys_arch_unprotect>
            /* Not a valid socket */
            nready = -1;
 802c1b0:	f04f 33ff 	mov.w	r3, #4294967295
 802c1b4:	66bb      	str	r3, [r7, #104]	; 0x68
            set_errno(EBADF);
 802c1b6:	4b2e      	ldr	r3, [pc, #184]	; (802c270 <lwip_select+0x418>)
 802c1b8:	2209      	movs	r2, #9
 802c1ba:	601a      	str	r2, [r3, #0]
      for (i = LWIP_SOCKET_OFFSET; i < maxfdp2; i++) {
 802c1bc:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 802c1be:	3301      	adds	r3, #1
 802c1c0:	663b      	str	r3, [r7, #96]	; 0x60
 802c1c2:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 802c1c4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 802c1c6:	429a      	cmp	r2, r3
 802c1c8:	f6ff af7e 	blt.w	802c0c8 <lwip_select+0x270>
          }
        }
      }

      lwip_unlink_select_cb(&API_SELECT_CB_VAR_REF(select_cb));
 802c1cc:	f107 0310 	add.w	r3, r7, #16
 802c1d0:	4618      	mov	r0, r3
 802c1d2:	f7ff fc5b 	bl	802ba8c <lwip_unlink_select_cb>
      if (API_SELECT_CB_VAR_REF(select_cb).sem_signalled && (!waited || (waitres == SYS_ARCH_TIMEOUT))) {
        /* don't leave the thread-local semaphore signalled */
        sys_arch_sem_wait(API_SELECT_CB_VAR_REF(select_cb).sem, 1);
      }
#else /* LWIP_NETCONN_SEM_PER_THREAD */
      sys_sem_free(&API_SELECT_CB_VAR_REF(select_cb).sem);
 802c1d6:	f107 0310 	add.w	r3, r7, #16
 802c1da:	3320      	adds	r3, #32
 802c1dc:	4618      	mov	r0, r3
 802c1de:	f00c f8f3 	bl	80383c8 <sys_sem_free>
#endif /* LWIP_NETCONN_SEM_PER_THREAD */
      API_SELECT_CB_VAR_FREE(select_cb);

      if (nready < 0) {
 802c1e2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 802c1e4:	2b00      	cmp	r3, #0
 802c1e6:	da02      	bge.n	802c1ee <lwip_select+0x396>
        /* This happens when a socket got closed while waiting */
        lwip_select_dec_sockets_used(maxfdp1, &used_sockets);
        return -1;
 802c1e8:	f04f 33ff 	mov.w	r3, #4294967295
 802c1ec:	e035      	b.n	802c25a <lwip_select+0x402>
      }

      if (waitres == SYS_ARCH_TIMEOUT) {
 802c1ee:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 802c1f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 802c1f4:	d00f      	beq.n	802c216 <lwip_select+0x3be>
        LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_select: timeout expired\n"));
        /* This is OK as the local fdsets are empty and nready is zero,
           or we would have returned earlier. */
      } else {
        /* See what's set now after waiting */
        nready = lwip_selscan(maxfdp1, readset, writeset, exceptset, &lreadset, &lwriteset, &lexceptset);
 802c1f6:	f107 0334 	add.w	r3, r7, #52	; 0x34
 802c1fa:	9302      	str	r3, [sp, #8]
 802c1fc:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 802c200:	9301      	str	r3, [sp, #4]
 802c202:	f107 0344 	add.w	r3, r7, #68	; 0x44
 802c206:	9300      	str	r3, [sp, #0]
 802c208:	683b      	ldr	r3, [r7, #0]
 802c20a:	687a      	ldr	r2, [r7, #4]
 802c20c:	68b9      	ldr	r1, [r7, #8]
 802c20e:	68f8      	ldr	r0, [r7, #12]
 802c210:	f7ff fc84 	bl	802bb1c <lwip_selscan>
 802c214:	66b8      	str	r0, [r7, #104]	; 0x68
    }
  }

  lwip_select_dec_sockets_used(maxfdp1, &used_sockets);
  set_errno(0);
  if (readset) {
 802c216:	68bb      	ldr	r3, [r7, #8]
 802c218:	2b00      	cmp	r3, #0
 802c21a:	d007      	beq.n	802c22c <lwip_select+0x3d4>
    *readset = lreadset;
 802c21c:	68bb      	ldr	r3, [r7, #8]
 802c21e:	461a      	mov	r2, r3
 802c220:	f107 0344 	add.w	r3, r7, #68	; 0x44
 802c224:	e893 0003 	ldmia.w	r3, {r0, r1}
 802c228:	e882 0003 	stmia.w	r2, {r0, r1}
  }
  if (writeset) {
 802c22c:	687b      	ldr	r3, [r7, #4]
 802c22e:	2b00      	cmp	r3, #0
 802c230:	d007      	beq.n	802c242 <lwip_select+0x3ea>
    *writeset = lwriteset;
 802c232:	687b      	ldr	r3, [r7, #4]
 802c234:	461a      	mov	r2, r3
 802c236:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 802c23a:	e893 0003 	ldmia.w	r3, {r0, r1}
 802c23e:	e882 0003 	stmia.w	r2, {r0, r1}
  }
  if (exceptset) {
 802c242:	683b      	ldr	r3, [r7, #0]
 802c244:	2b00      	cmp	r3, #0
 802c246:	d007      	beq.n	802c258 <lwip_select+0x400>
    *exceptset = lexceptset;
 802c248:	683b      	ldr	r3, [r7, #0]
 802c24a:	461a      	mov	r2, r3
 802c24c:	f107 0334 	add.w	r3, r7, #52	; 0x34
 802c250:	e893 0003 	ldmia.w	r3, {r0, r1}
 802c254:	e882 0003 	stmia.w	r2, {r0, r1}
  }
  return nready;
 802c258:	6ebb      	ldr	r3, [r7, #104]	; 0x68
}
 802c25a:	4618      	mov	r0, r3
 802c25c:	3770      	adds	r7, #112	; 0x70
 802c25e:	46bd      	mov	sp, r7
 802c260:	bd80      	pop	{r7, pc}
 802c262:	bf00      	nop
 802c264:	0803a5fc 	.word	0x0803a5fc
 802c268:	0803a938 	.word	0x0803a938
 802c26c:	0803a650 	.word	0x0803a650
 802c270:	2000f06c 	.word	0x2000f06c

0802c274 <lwip_poll_should_wake>:
 * Check whether event_callback should wake up a thread waiting in
 * lwip_poll.
 */
static int
lwip_poll_should_wake(const struct lwip_select_cb *scb, int fd, int has_recvevent, int has_sendevent, int has_errevent)
{
 802c274:	b480      	push	{r7}
 802c276:	b087      	sub	sp, #28
 802c278:	af00      	add	r7, sp, #0
 802c27a:	60f8      	str	r0, [r7, #12]
 802c27c:	60b9      	str	r1, [r7, #8]
 802c27e:	607a      	str	r2, [r7, #4]
 802c280:	603b      	str	r3, [r7, #0]
  nfds_t fdi;
  for (fdi = 0; fdi < scb->poll_nfds; fdi++) {
 802c282:	2300      	movs	r3, #0
 802c284:	617b      	str	r3, [r7, #20]
 802c286:	e02c      	b.n	802c2e2 <lwip_poll_should_wake+0x6e>
    const struct pollfd *pollfd = &scb->poll_fds[fdi];
 802c288:	68fb      	ldr	r3, [r7, #12]
 802c28a:	695a      	ldr	r2, [r3, #20]
 802c28c:	697b      	ldr	r3, [r7, #20]
 802c28e:	00db      	lsls	r3, r3, #3
 802c290:	4413      	add	r3, r2
 802c292:	613b      	str	r3, [r7, #16]
    if (pollfd->fd == fd) {
 802c294:	693b      	ldr	r3, [r7, #16]
 802c296:	681b      	ldr	r3, [r3, #0]
 802c298:	68ba      	ldr	r2, [r7, #8]
 802c29a:	429a      	cmp	r2, r3
 802c29c:	d11e      	bne.n	802c2dc <lwip_poll_should_wake+0x68>
      /* Do not update pollfd->revents right here;
         that would be a data race because lwip_pollscan
         accesses revents without protecting. */
      if (has_recvevent && (pollfd->events & POLLIN) != 0) {
 802c29e:	687b      	ldr	r3, [r7, #4]
 802c2a0:	2b00      	cmp	r3, #0
 802c2a2:	d009      	beq.n	802c2b8 <lwip_poll_should_wake+0x44>
 802c2a4:	693b      	ldr	r3, [r7, #16]
 802c2a6:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 802c2aa:	b29b      	uxth	r3, r3
 802c2ac:	f003 0301 	and.w	r3, r3, #1
 802c2b0:	2b00      	cmp	r3, #0
 802c2b2:	d001      	beq.n	802c2b8 <lwip_poll_should_wake+0x44>
        return 1;
 802c2b4:	2301      	movs	r3, #1
 802c2b6:	e01a      	b.n	802c2ee <lwip_poll_should_wake+0x7a>
      }
      if (has_sendevent && (pollfd->events & POLLOUT) != 0) {
 802c2b8:	683b      	ldr	r3, [r7, #0]
 802c2ba:	2b00      	cmp	r3, #0
 802c2bc:	d009      	beq.n	802c2d2 <lwip_poll_should_wake+0x5e>
 802c2be:	693b      	ldr	r3, [r7, #16]
 802c2c0:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 802c2c4:	b29b      	uxth	r3, r3
 802c2c6:	f003 0302 	and.w	r3, r3, #2
 802c2ca:	2b00      	cmp	r3, #0
 802c2cc:	d001      	beq.n	802c2d2 <lwip_poll_should_wake+0x5e>
        return 1;
 802c2ce:	2301      	movs	r3, #1
 802c2d0:	e00d      	b.n	802c2ee <lwip_poll_should_wake+0x7a>
      }
      if (has_errevent) {
 802c2d2:	6a3b      	ldr	r3, [r7, #32]
 802c2d4:	2b00      	cmp	r3, #0
 802c2d6:	d001      	beq.n	802c2dc <lwip_poll_should_wake+0x68>
        /* POLLERR is output only. */
        return 1;
 802c2d8:	2301      	movs	r3, #1
 802c2da:	e008      	b.n	802c2ee <lwip_poll_should_wake+0x7a>
  for (fdi = 0; fdi < scb->poll_nfds; fdi++) {
 802c2dc:	697b      	ldr	r3, [r7, #20]
 802c2de:	3301      	adds	r3, #1
 802c2e0:	617b      	str	r3, [r7, #20]
 802c2e2:	68fb      	ldr	r3, [r7, #12]
 802c2e4:	699b      	ldr	r3, [r3, #24]
 802c2e6:	697a      	ldr	r2, [r7, #20]
 802c2e8:	429a      	cmp	r2, r3
 802c2ea:	d3cd      	bcc.n	802c288 <lwip_poll_should_wake+0x14>
      }
    }
  }
  return 0;
 802c2ec:	2300      	movs	r3, #0
}
 802c2ee:	4618      	mov	r0, r3
 802c2f0:	371c      	adds	r7, #28
 802c2f2:	46bd      	mov	sp, r7
 802c2f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 802c2f8:	4770      	bx	lr
	...

0802c2fc <event_callback>:
 *   NETCONN_EVT_ERROR
 * This requirement will be asserted in select_check_waiters()
 */
static void
event_callback(struct netconn *conn, enum netconn_evt evt, u16_t len)
{
 802c2fc:	b580      	push	{r7, lr}
 802c2fe:	b08a      	sub	sp, #40	; 0x28
 802c300:	af00      	add	r7, sp, #0
 802c302:	6078      	str	r0, [r7, #4]
 802c304:	460b      	mov	r3, r1
 802c306:	70fb      	strb	r3, [r7, #3]
 802c308:	4613      	mov	r3, r2
 802c30a:	803b      	strh	r3, [r7, #0]
  SYS_ARCH_DECL_PROTECT(lev);

  LWIP_UNUSED_ARG(len);

  /* Get socket */
  if (conn) {
 802c30c:	687b      	ldr	r3, [r7, #4]
 802c30e:	2b00      	cmp	r3, #0
 802c310:	f000 80a4 	beq.w	802c45c <event_callback+0x160>
    s = conn->socket;
 802c314:	687b      	ldr	r3, [r7, #4]
 802c316:	699b      	ldr	r3, [r3, #24]
 802c318:	627b      	str	r3, [r7, #36]	; 0x24
    if (s < 0) {
 802c31a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802c31c:	2b00      	cmp	r3, #0
 802c31e:	da18      	bge.n	802c352 <event_callback+0x56>
      /* Data comes in right away after an accept, even though
       * the server task might not have created a new socket yet.
       * Just count down (or up) if that's the case and we
       * will use the data later. Note that only receive events
       * can happen before the new socket is set up. */
      SYS_ARCH_PROTECT(lev);
 802c320:	f00c f914 	bl	803854c <sys_arch_protect>
 802c324:	61f8      	str	r0, [r7, #28]
      if (conn->socket < 0) {
 802c326:	687b      	ldr	r3, [r7, #4]
 802c328:	699b      	ldr	r3, [r3, #24]
 802c32a:	2b00      	cmp	r3, #0
 802c32c:	da0b      	bge.n	802c346 <event_callback+0x4a>
        if (evt == NETCONN_EVT_RCVPLUS) {
 802c32e:	78fb      	ldrb	r3, [r7, #3]
 802c330:	2b00      	cmp	r3, #0
 802c332:	d104      	bne.n	802c33e <event_callback+0x42>
          /* conn->socket is -1 on initialization
             lwip_accept adjusts sock->recvevent if conn->socket < -1 */
          conn->socket--;
 802c334:	687b      	ldr	r3, [r7, #4]
 802c336:	699b      	ldr	r3, [r3, #24]
 802c338:	1e5a      	subs	r2, r3, #1
 802c33a:	687b      	ldr	r3, [r7, #4]
 802c33c:	619a      	str	r2, [r3, #24]
        }
        SYS_ARCH_UNPROTECT(lev);
 802c33e:	69f8      	ldr	r0, [r7, #28]
 802c340:	f00c f912 	bl	8038568 <sys_arch_unprotect>
        return;
 802c344:	e08d      	b.n	802c462 <event_callback+0x166>
      }
      s = conn->socket;
 802c346:	687b      	ldr	r3, [r7, #4]
 802c348:	699b      	ldr	r3, [r3, #24]
 802c34a:	627b      	str	r3, [r7, #36]	; 0x24
      SYS_ARCH_UNPROTECT(lev);
 802c34c:	69f8      	ldr	r0, [r7, #28]
 802c34e:	f00c f90b 	bl	8038568 <sys_arch_unprotect>
    }

    sock = get_socket(s);
 802c352:	6a78      	ldr	r0, [r7, #36]	; 0x24
 802c354:	f7fe fbc4 	bl	802aae0 <get_socket>
 802c358:	61b8      	str	r0, [r7, #24]
    if (!sock) {
 802c35a:	69bb      	ldr	r3, [r7, #24]
 802c35c:	2b00      	cmp	r3, #0
 802c35e:	d07f      	beq.n	802c460 <event_callback+0x164>
    }
  } else {
    return;
  }

  check_waiters = 1;
 802c360:	2301      	movs	r3, #1
 802c362:	623b      	str	r3, [r7, #32]
  SYS_ARCH_PROTECT(lev);
 802c364:	f00c f8f2 	bl	803854c <sys_arch_protect>
 802c368:	61f8      	str	r0, [r7, #28]
  /* Set event as required */
  switch (evt) {
 802c36a:	78fb      	ldrb	r3, [r7, #3]
 802c36c:	2b04      	cmp	r3, #4
 802c36e:	d83e      	bhi.n	802c3ee <event_callback+0xf2>
 802c370:	a201      	add	r2, pc, #4	; (adr r2, 802c378 <event_callback+0x7c>)
 802c372:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 802c376:	bf00      	nop
 802c378:	0802c38d 	.word	0x0802c38d
 802c37c:	0802c3af 	.word	0x0802c3af
 802c380:	0802c3c7 	.word	0x0802c3c7
 802c384:	0802c3db 	.word	0x0802c3db
 802c388:	0802c3e7 	.word	0x0802c3e7
    case NETCONN_EVT_RCVPLUS:
      sock->rcvevent++;
 802c38c:	69bb      	ldr	r3, [r7, #24]
 802c38e:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 802c392:	b29b      	uxth	r3, r3
 802c394:	3301      	adds	r3, #1
 802c396:	b29b      	uxth	r3, r3
 802c398:	b21a      	sxth	r2, r3
 802c39a:	69bb      	ldr	r3, [r7, #24]
 802c39c:	811a      	strh	r2, [r3, #8]
      if (sock->rcvevent > 1) {
 802c39e:	69bb      	ldr	r3, [r7, #24]
 802c3a0:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 802c3a4:	2b01      	cmp	r3, #1
 802c3a6:	dd2a      	ble.n	802c3fe <event_callback+0x102>
        check_waiters = 0;
 802c3a8:	2300      	movs	r3, #0
 802c3aa:	623b      	str	r3, [r7, #32]
      }
      break;
 802c3ac:	e027      	b.n	802c3fe <event_callback+0x102>
    case NETCONN_EVT_RCVMINUS:
      sock->rcvevent--;
 802c3ae:	69bb      	ldr	r3, [r7, #24]
 802c3b0:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 802c3b4:	b29b      	uxth	r3, r3
 802c3b6:	3b01      	subs	r3, #1
 802c3b8:	b29b      	uxth	r3, r3
 802c3ba:	b21a      	sxth	r2, r3
 802c3bc:	69bb      	ldr	r3, [r7, #24]
 802c3be:	811a      	strh	r2, [r3, #8]
      check_waiters = 0;
 802c3c0:	2300      	movs	r3, #0
 802c3c2:	623b      	str	r3, [r7, #32]
      break;
 802c3c4:	e01c      	b.n	802c400 <event_callback+0x104>
    case NETCONN_EVT_SENDPLUS:
      if (sock->sendevent) {
 802c3c6:	69bb      	ldr	r3, [r7, #24]
 802c3c8:	895b      	ldrh	r3, [r3, #10]
 802c3ca:	2b00      	cmp	r3, #0
 802c3cc:	d001      	beq.n	802c3d2 <event_callback+0xd6>
        check_waiters = 0;
 802c3ce:	2300      	movs	r3, #0
 802c3d0:	623b      	str	r3, [r7, #32]
      }
      sock->sendevent = 1;
 802c3d2:	69bb      	ldr	r3, [r7, #24]
 802c3d4:	2201      	movs	r2, #1
 802c3d6:	815a      	strh	r2, [r3, #10]
      break;
 802c3d8:	e012      	b.n	802c400 <event_callback+0x104>
    case NETCONN_EVT_SENDMINUS:
      sock->sendevent = 0;
 802c3da:	69bb      	ldr	r3, [r7, #24]
 802c3dc:	2200      	movs	r2, #0
 802c3de:	815a      	strh	r2, [r3, #10]
      check_waiters = 0;
 802c3e0:	2300      	movs	r3, #0
 802c3e2:	623b      	str	r3, [r7, #32]
      break;
 802c3e4:	e00c      	b.n	802c400 <event_callback+0x104>
    case NETCONN_EVT_ERROR:
      sock->errevent = 1;
 802c3e6:	69bb      	ldr	r3, [r7, #24]
 802c3e8:	2201      	movs	r2, #1
 802c3ea:	819a      	strh	r2, [r3, #12]
      break;
 802c3ec:	e008      	b.n	802c400 <event_callback+0x104>
    default:
      LWIP_ASSERT("unknown event", 0);
 802c3ee:	4b1e      	ldr	r3, [pc, #120]	; (802c468 <event_callback+0x16c>)
 802c3f0:	f44f 621f 	mov.w	r2, #2544	; 0x9f0
 802c3f4:	491d      	ldr	r1, [pc, #116]	; (802c46c <event_callback+0x170>)
 802c3f6:	481e      	ldr	r0, [pc, #120]	; (802c470 <event_callback+0x174>)
 802c3f8:	f00c fe36 	bl	8039068 <iprintf>
      break;
 802c3fc:	e000      	b.n	802c400 <event_callback+0x104>
      break;
 802c3fe:	bf00      	nop
  }

  if (sock->select_waiting && check_waiters) {
 802c400:	69bb      	ldr	r3, [r7, #24]
 802c402:	7b9b      	ldrb	r3, [r3, #14]
 802c404:	2b00      	cmp	r3, #0
 802c406:	d025      	beq.n	802c454 <event_callback+0x158>
 802c408:	6a3b      	ldr	r3, [r7, #32]
 802c40a:	2b00      	cmp	r3, #0
 802c40c:	d022      	beq.n	802c454 <event_callback+0x158>
    /* Save which events are active */
    int has_recvevent, has_sendevent, has_errevent;
    has_recvevent = sock->rcvevent > 0;
 802c40e:	69bb      	ldr	r3, [r7, #24]
 802c410:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 802c414:	2b00      	cmp	r3, #0
 802c416:	bfcc      	ite	gt
 802c418:	2301      	movgt	r3, #1
 802c41a:	2300      	movle	r3, #0
 802c41c:	b2db      	uxtb	r3, r3
 802c41e:	617b      	str	r3, [r7, #20]
    has_sendevent = sock->sendevent != 0;
 802c420:	69bb      	ldr	r3, [r7, #24]
 802c422:	895b      	ldrh	r3, [r3, #10]
 802c424:	2b00      	cmp	r3, #0
 802c426:	bf14      	ite	ne
 802c428:	2301      	movne	r3, #1
 802c42a:	2300      	moveq	r3, #0
 802c42c:	b2db      	uxtb	r3, r3
 802c42e:	613b      	str	r3, [r7, #16]
    has_errevent = sock->errevent != 0;
 802c430:	69bb      	ldr	r3, [r7, #24]
 802c432:	899b      	ldrh	r3, [r3, #12]
 802c434:	2b00      	cmp	r3, #0
 802c436:	bf14      	ite	ne
 802c438:	2301      	movne	r3, #1
 802c43a:	2300      	moveq	r3, #0
 802c43c:	b2db      	uxtb	r3, r3
 802c43e:	60fb      	str	r3, [r7, #12]
    SYS_ARCH_UNPROTECT(lev);
 802c440:	69f8      	ldr	r0, [r7, #28]
 802c442:	f00c f891 	bl	8038568 <sys_arch_unprotect>
    /* Check any select calls waiting on this socket */
    select_check_waiters(s, has_recvevent, has_sendevent, has_errevent);
 802c446:	68fb      	ldr	r3, [r7, #12]
 802c448:	693a      	ldr	r2, [r7, #16]
 802c44a:	6979      	ldr	r1, [r7, #20]
 802c44c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 802c44e:	f000 f811 	bl	802c474 <select_check_waiters>
  if (sock->select_waiting && check_waiters) {
 802c452:	e006      	b.n	802c462 <event_callback+0x166>
  } else {
    SYS_ARCH_UNPROTECT(lev);
 802c454:	69f8      	ldr	r0, [r7, #28]
 802c456:	f00c f887 	bl	8038568 <sys_arch_unprotect>
 802c45a:	e002      	b.n	802c462 <event_callback+0x166>
    return;
 802c45c:	bf00      	nop
 802c45e:	e000      	b.n	802c462 <event_callback+0x166>
      return;
 802c460:	bf00      	nop
  }
  done_socket(sock);
}
 802c462:	3728      	adds	r7, #40	; 0x28
 802c464:	46bd      	mov	sp, r7
 802c466:	bd80      	pop	{r7, pc}
 802c468:	0803a5fc 	.word	0x0803a5fc
 802c46c:	0803a978 	.word	0x0803a978
 802c470:	0803a650 	.word	0x0803a650

0802c474 <select_check_waiters>:
 * of the loop, thus creating a possibility where a thread could modify the
 * select_cb_list during our UNPROTECT/PROTECT. We use a generational counter to
 * detect this change and restart the list walk. The list is expected to be small
 */
static void select_check_waiters(int s, int has_recvevent, int has_sendevent, int has_errevent)
{
 802c474:	b580      	push	{r7, lr}
 802c476:	b088      	sub	sp, #32
 802c478:	af02      	add	r7, sp, #8
 802c47a:	60f8      	str	r0, [r7, #12]
 802c47c:	60b9      	str	r1, [r7, #8]
 802c47e:	607a      	str	r2, [r7, #4]
 802c480:	603b      	str	r3, [r7, #0]
  SYS_ARCH_PROTECT(lev);
again:
  /* remember the state of select_cb_list to detect changes */
  last_select_cb_ctr = select_cb_ctr;
#endif /* !LWIP_TCPIP_CORE_LOCKING */
  for (scb = select_cb_list; scb != NULL; scb = scb->next) {
 802c482:	4b4b      	ldr	r3, [pc, #300]	; (802c5b0 <select_check_waiters+0x13c>)
 802c484:	681b      	ldr	r3, [r3, #0]
 802c486:	617b      	str	r3, [r7, #20]
 802c488:	e088      	b.n	802c59c <select_check_waiters+0x128>
    if (scb->sem_signalled == 0) {
 802c48a:	697b      	ldr	r3, [r7, #20]
 802c48c:	69db      	ldr	r3, [r3, #28]
 802c48e:	2b00      	cmp	r3, #0
 802c490:	f040 8081 	bne.w	802c596 <select_check_waiters+0x122>
      /* semaphore not signalled yet */
      int do_signal = 0;
 802c494:	2300      	movs	r3, #0
 802c496:	613b      	str	r3, [r7, #16]
#if LWIP_SOCKET_POLL
      if (scb->poll_fds != NULL) {
 802c498:	697b      	ldr	r3, [r7, #20]
 802c49a:	695b      	ldr	r3, [r3, #20]
 802c49c:	2b00      	cmp	r3, #0
 802c49e:	d009      	beq.n	802c4b4 <select_check_waiters+0x40>
        do_signal = lwip_poll_should_wake(scb, s, has_recvevent, has_sendevent, has_errevent);
 802c4a0:	683b      	ldr	r3, [r7, #0]
 802c4a2:	9300      	str	r3, [sp, #0]
 802c4a4:	687b      	ldr	r3, [r7, #4]
 802c4a6:	68ba      	ldr	r2, [r7, #8]
 802c4a8:	68f9      	ldr	r1, [r7, #12]
 802c4aa:	6978      	ldr	r0, [r7, #20]
 802c4ac:	f7ff fee2 	bl	802c274 <lwip_poll_should_wake>
 802c4b0:	6138      	str	r0, [r7, #16]
 802c4b2:	e065      	b.n	802c580 <select_check_waiters+0x10c>
      else
#endif /* LWIP_SOCKET_SELECT && LWIP_SOCKET_POLL */
#if LWIP_SOCKET_SELECT
      {
        /* Test this select call for our socket */
        if (has_recvevent) {
 802c4b4:	68bb      	ldr	r3, [r7, #8]
 802c4b6:	2b00      	cmp	r3, #0
 802c4b8:	d01c      	beq.n	802c4f4 <select_check_waiters+0x80>
          if (scb->readset && FD_ISSET(s, scb->readset)) {
 802c4ba:	697b      	ldr	r3, [r7, #20]
 802c4bc:	689b      	ldr	r3, [r3, #8]
 802c4be:	2b00      	cmp	r3, #0
 802c4c0:	d018      	beq.n	802c4f4 <select_check_waiters+0x80>
 802c4c2:	697b      	ldr	r3, [r7, #20]
 802c4c4:	689a      	ldr	r2, [r3, #8]
 802c4c6:	68fb      	ldr	r3, [r7, #12]
 802c4c8:	2b00      	cmp	r3, #0
 802c4ca:	da00      	bge.n	802c4ce <select_check_waiters+0x5a>
 802c4cc:	331f      	adds	r3, #31
 802c4ce:	115b      	asrs	r3, r3, #5
 802c4d0:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 802c4d4:	68fb      	ldr	r3, [r7, #12]
 802c4d6:	4259      	negs	r1, r3
 802c4d8:	f003 031f 	and.w	r3, r3, #31
 802c4dc:	f001 011f 	and.w	r1, r1, #31
 802c4e0:	bf58      	it	pl
 802c4e2:	424b      	negpl	r3, r1
 802c4e4:	fa22 f303 	lsr.w	r3, r2, r3
 802c4e8:	f003 0301 	and.w	r3, r3, #1
 802c4ec:	2b00      	cmp	r3, #0
 802c4ee:	d001      	beq.n	802c4f4 <select_check_waiters+0x80>
            do_signal = 1;
 802c4f0:	2301      	movs	r3, #1
 802c4f2:	613b      	str	r3, [r7, #16]
          }
        }
        if (has_sendevent) {
 802c4f4:	687b      	ldr	r3, [r7, #4]
 802c4f6:	2b00      	cmp	r3, #0
 802c4f8:	d01f      	beq.n	802c53a <select_check_waiters+0xc6>
          if (!do_signal && scb->writeset && FD_ISSET(s, scb->writeset)) {
 802c4fa:	693b      	ldr	r3, [r7, #16]
 802c4fc:	2b00      	cmp	r3, #0
 802c4fe:	d11c      	bne.n	802c53a <select_check_waiters+0xc6>
 802c500:	697b      	ldr	r3, [r7, #20]
 802c502:	68db      	ldr	r3, [r3, #12]
 802c504:	2b00      	cmp	r3, #0
 802c506:	d018      	beq.n	802c53a <select_check_waiters+0xc6>
 802c508:	697b      	ldr	r3, [r7, #20]
 802c50a:	68da      	ldr	r2, [r3, #12]
 802c50c:	68fb      	ldr	r3, [r7, #12]
 802c50e:	2b00      	cmp	r3, #0
 802c510:	da00      	bge.n	802c514 <select_check_waiters+0xa0>
 802c512:	331f      	adds	r3, #31
 802c514:	115b      	asrs	r3, r3, #5
 802c516:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 802c51a:	68fb      	ldr	r3, [r7, #12]
 802c51c:	4259      	negs	r1, r3
 802c51e:	f003 031f 	and.w	r3, r3, #31
 802c522:	f001 011f 	and.w	r1, r1, #31
 802c526:	bf58      	it	pl
 802c528:	424b      	negpl	r3, r1
 802c52a:	fa22 f303 	lsr.w	r3, r2, r3
 802c52e:	f003 0301 	and.w	r3, r3, #1
 802c532:	2b00      	cmp	r3, #0
 802c534:	d001      	beq.n	802c53a <select_check_waiters+0xc6>
            do_signal = 1;
 802c536:	2301      	movs	r3, #1
 802c538:	613b      	str	r3, [r7, #16]
          }
        }
        if (has_errevent) {
 802c53a:	683b      	ldr	r3, [r7, #0]
 802c53c:	2b00      	cmp	r3, #0
 802c53e:	d01f      	beq.n	802c580 <select_check_waiters+0x10c>
          if (!do_signal && scb->exceptset && FD_ISSET(s, scb->exceptset)) {
 802c540:	693b      	ldr	r3, [r7, #16]
 802c542:	2b00      	cmp	r3, #0
 802c544:	d11c      	bne.n	802c580 <select_check_waiters+0x10c>
 802c546:	697b      	ldr	r3, [r7, #20]
 802c548:	691b      	ldr	r3, [r3, #16]
 802c54a:	2b00      	cmp	r3, #0
 802c54c:	d018      	beq.n	802c580 <select_check_waiters+0x10c>
 802c54e:	697b      	ldr	r3, [r7, #20]
 802c550:	691a      	ldr	r2, [r3, #16]
 802c552:	68fb      	ldr	r3, [r7, #12]
 802c554:	2b00      	cmp	r3, #0
 802c556:	da00      	bge.n	802c55a <select_check_waiters+0xe6>
 802c558:	331f      	adds	r3, #31
 802c55a:	115b      	asrs	r3, r3, #5
 802c55c:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 802c560:	68fb      	ldr	r3, [r7, #12]
 802c562:	4259      	negs	r1, r3
 802c564:	f003 031f 	and.w	r3, r3, #31
 802c568:	f001 011f 	and.w	r1, r1, #31
 802c56c:	bf58      	it	pl
 802c56e:	424b      	negpl	r3, r1
 802c570:	fa22 f303 	lsr.w	r3, r2, r3
 802c574:	f003 0301 	and.w	r3, r3, #1
 802c578:	2b00      	cmp	r3, #0
 802c57a:	d001      	beq.n	802c580 <select_check_waiters+0x10c>
            do_signal = 1;
 802c57c:	2301      	movs	r3, #1
 802c57e:	613b      	str	r3, [r7, #16]
          }
        }
      }
#endif /* LWIP_SOCKET_SELECT */
      if (do_signal) {
 802c580:	693b      	ldr	r3, [r7, #16]
 802c582:	2b00      	cmp	r3, #0
 802c584:	d007      	beq.n	802c596 <select_check_waiters+0x122>
        scb->sem_signalled = 1;
 802c586:	697b      	ldr	r3, [r7, #20]
 802c588:	2201      	movs	r2, #1
 802c58a:	61da      	str	r2, [r3, #28]
        /* For !LWIP_TCPIP_CORE_LOCKING, we don't call SYS_ARCH_UNPROTECT() before signaling
           the semaphore, as this might lead to the select thread taking itself off the list,
           invalidating the semaphore. */
        sys_sem_signal(SELECT_SEM_PTR(scb->sem));
 802c58c:	697b      	ldr	r3, [r7, #20]
 802c58e:	3320      	adds	r3, #32
 802c590:	4618      	mov	r0, r3
 802c592:	f00b ff0c 	bl	80383ae <sys_sem_signal>
  for (scb = select_cb_list; scb != NULL; scb = scb->next) {
 802c596:	697b      	ldr	r3, [r7, #20]
 802c598:	681b      	ldr	r3, [r3, #0]
 802c59a:	617b      	str	r3, [r7, #20]
 802c59c:	697b      	ldr	r3, [r7, #20]
 802c59e:	2b00      	cmp	r3, #0
 802c5a0:	f47f af73 	bne.w	802c48a <select_check_waiters+0x16>
    /* remember the state of select_cb_list to detect changes */
    last_select_cb_ctr = select_cb_ctr;
  }
  SYS_ARCH_UNPROTECT(lev);
#endif
}
 802c5a4:	bf00      	nop
 802c5a6:	bf00      	nop
 802c5a8:	3718      	adds	r7, #24
 802c5aa:	46bd      	mov	sp, r7
 802c5ac:	bd80      	pop	{r7, pc}
 802c5ae:	bf00      	nop
 802c5b0:	2000b30c 	.word	0x2000b30c

0802c5b4 <tcpip_timeouts_mbox_fetch>:
 * @param mbox the mbox to fetch the message from
 * @param msg the place to store the message
 */
static void
tcpip_timeouts_mbox_fetch(sys_mbox_t *mbox, void **msg)
{
 802c5b4:	b580      	push	{r7, lr}
 802c5b6:	b084      	sub	sp, #16
 802c5b8:	af00      	add	r7, sp, #0
 802c5ba:	6078      	str	r0, [r7, #4]
 802c5bc:	6039      	str	r1, [r7, #0]
  u32_t sleeptime, res;

again:
  LWIP_ASSERT_CORE_LOCKED();

  sleeptime = sys_timeouts_sleeptime();
 802c5be:	f008 fbfd 	bl	8034dbc <sys_timeouts_sleeptime>
 802c5c2:	60f8      	str	r0, [r7, #12]
  if (sleeptime == SYS_TIMEOUTS_SLEEPTIME_INFINITE) {
 802c5c4:	68fb      	ldr	r3, [r7, #12]
 802c5c6:	f1b3 3fff 	cmp.w	r3, #4294967295
 802c5ca:	d10b      	bne.n	802c5e4 <tcpip_timeouts_mbox_fetch+0x30>
    UNLOCK_TCPIP_CORE();
 802c5cc:	4813      	ldr	r0, [pc, #76]	; (802c61c <tcpip_timeouts_mbox_fetch+0x68>)
 802c5ce:	f00b ff8a 	bl	80384e6 <sys_mutex_unlock>
    sys_arch_mbox_fetch(mbox, msg, 0);
 802c5d2:	2200      	movs	r2, #0
 802c5d4:	6839      	ldr	r1, [r7, #0]
 802c5d6:	6878      	ldr	r0, [r7, #4]
 802c5d8:	f00b fdf6 	bl	80381c8 <sys_arch_mbox_fetch>
    LOCK_TCPIP_CORE();
 802c5dc:	480f      	ldr	r0, [pc, #60]	; (802c61c <tcpip_timeouts_mbox_fetch+0x68>)
 802c5de:	f00b ff73 	bl	80384c8 <sys_mutex_lock>
    return;
 802c5e2:	e018      	b.n	802c616 <tcpip_timeouts_mbox_fetch+0x62>
  } else if (sleeptime == 0) {
 802c5e4:	68fb      	ldr	r3, [r7, #12]
 802c5e6:	2b00      	cmp	r3, #0
 802c5e8:	d102      	bne.n	802c5f0 <tcpip_timeouts_mbox_fetch+0x3c>
    sys_check_timeouts();
 802c5ea:	f008 fbad 	bl	8034d48 <sys_check_timeouts>
    /* We try again to fetch a message from the mbox. */
    goto again;
 802c5ee:	e7e6      	b.n	802c5be <tcpip_timeouts_mbox_fetch+0xa>
  }

  UNLOCK_TCPIP_CORE();
 802c5f0:	480a      	ldr	r0, [pc, #40]	; (802c61c <tcpip_timeouts_mbox_fetch+0x68>)
 802c5f2:	f00b ff78 	bl	80384e6 <sys_mutex_unlock>
  res = sys_arch_mbox_fetch(mbox, msg, sleeptime);
 802c5f6:	68fa      	ldr	r2, [r7, #12]
 802c5f8:	6839      	ldr	r1, [r7, #0]
 802c5fa:	6878      	ldr	r0, [r7, #4]
 802c5fc:	f00b fde4 	bl	80381c8 <sys_arch_mbox_fetch>
 802c600:	60b8      	str	r0, [r7, #8]
  LOCK_TCPIP_CORE();
 802c602:	4806      	ldr	r0, [pc, #24]	; (802c61c <tcpip_timeouts_mbox_fetch+0x68>)
 802c604:	f00b ff60 	bl	80384c8 <sys_mutex_lock>
  if (res == SYS_ARCH_TIMEOUT) {
 802c608:	68bb      	ldr	r3, [r7, #8]
 802c60a:	f1b3 3fff 	cmp.w	r3, #4294967295
 802c60e:	d102      	bne.n	802c616 <tcpip_timeouts_mbox_fetch+0x62>
    /* If a SYS_ARCH_TIMEOUT value is returned, a timeout occurred
       before a message could be fetched. */
    sys_check_timeouts();
 802c610:	f008 fb9a 	bl	8034d48 <sys_check_timeouts>
    /* We try again to fetch a message from the mbox. */
    goto again;
 802c614:	e7d3      	b.n	802c5be <tcpip_timeouts_mbox_fetch+0xa>
  }
}
 802c616:	3710      	adds	r7, #16
 802c618:	46bd      	mov	sp, r7
 802c61a:	bd80      	pop	{r7, pc}
 802c61c:	2000b31c 	.word	0x2000b31c

0802c620 <tcpip_thread>:
 *
 * @param arg unused argument
 */
static void
tcpip_thread(void *arg)
{
 802c620:	b580      	push	{r7, lr}
 802c622:	b084      	sub	sp, #16
 802c624:	af00      	add	r7, sp, #0
 802c626:	6078      	str	r0, [r7, #4]
  struct tcpip_msg *msg;
  LWIP_UNUSED_ARG(arg);

  LWIP_MARK_TCPIP_THREAD();

  LOCK_TCPIP_CORE();
 802c628:	4810      	ldr	r0, [pc, #64]	; (802c66c <tcpip_thread+0x4c>)
 802c62a:	f00b ff4d 	bl	80384c8 <sys_mutex_lock>
  if (tcpip_init_done != NULL) {
 802c62e:	4b10      	ldr	r3, [pc, #64]	; (802c670 <tcpip_thread+0x50>)
 802c630:	681b      	ldr	r3, [r3, #0]
 802c632:	2b00      	cmp	r3, #0
 802c634:	d005      	beq.n	802c642 <tcpip_thread+0x22>
    tcpip_init_done(tcpip_init_done_arg);
 802c636:	4b0e      	ldr	r3, [pc, #56]	; (802c670 <tcpip_thread+0x50>)
 802c638:	681b      	ldr	r3, [r3, #0]
 802c63a:	4a0e      	ldr	r2, [pc, #56]	; (802c674 <tcpip_thread+0x54>)
 802c63c:	6812      	ldr	r2, [r2, #0]
 802c63e:	4610      	mov	r0, r2
 802c640:	4798      	blx	r3
  }

  while (1) {                          /* MAIN Loop */
    LWIP_TCPIP_THREAD_ALIVE();
    /* wait for a message, timeouts are processed while waiting */
    TCPIP_MBOX_FETCH(&tcpip_mbox, (void **)&msg);
 802c642:	f107 030c 	add.w	r3, r7, #12
 802c646:	4619      	mov	r1, r3
 802c648:	480b      	ldr	r0, [pc, #44]	; (802c678 <tcpip_thread+0x58>)
 802c64a:	f7ff ffb3 	bl	802c5b4 <tcpip_timeouts_mbox_fetch>
    if (msg == NULL) {
 802c64e:	68fb      	ldr	r3, [r7, #12]
 802c650:	2b00      	cmp	r3, #0
 802c652:	d106      	bne.n	802c662 <tcpip_thread+0x42>
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: invalid message: NULL\n"));
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 802c654:	4b09      	ldr	r3, [pc, #36]	; (802c67c <tcpip_thread+0x5c>)
 802c656:	2291      	movs	r2, #145	; 0x91
 802c658:	4909      	ldr	r1, [pc, #36]	; (802c680 <tcpip_thread+0x60>)
 802c65a:	480a      	ldr	r0, [pc, #40]	; (802c684 <tcpip_thread+0x64>)
 802c65c:	f00c fd04 	bl	8039068 <iprintf>
      continue;
 802c660:	e003      	b.n	802c66a <tcpip_thread+0x4a>
    }
    tcpip_thread_handle_msg(msg);
 802c662:	68fb      	ldr	r3, [r7, #12]
 802c664:	4618      	mov	r0, r3
 802c666:	f000 f80f 	bl	802c688 <tcpip_thread_handle_msg>
    TCPIP_MBOX_FETCH(&tcpip_mbox, (void **)&msg);
 802c66a:	e7ea      	b.n	802c642 <tcpip_thread+0x22>
 802c66c:	2000b31c 	.word	0x2000b31c
 802c670:	2000b310 	.word	0x2000b310
 802c674:	2000b314 	.word	0x2000b314
 802c678:	2000b318 	.word	0x2000b318
 802c67c:	0803a9cc 	.word	0x0803a9cc
 802c680:	0803a9fc 	.word	0x0803a9fc
 802c684:	0803aa1c 	.word	0x0803aa1c

0802c688 <tcpip_thread_handle_msg>:
/* Handle a single tcpip_msg
 * This is in its own function for access by tests only.
 */
static void
tcpip_thread_handle_msg(struct tcpip_msg *msg)
{
 802c688:	b580      	push	{r7, lr}
 802c68a:	b082      	sub	sp, #8
 802c68c:	af00      	add	r7, sp, #0
 802c68e:	6078      	str	r0, [r7, #4]
  switch (msg->type) {
 802c690:	687b      	ldr	r3, [r7, #4]
 802c692:	781b      	ldrb	r3, [r3, #0]
 802c694:	2b02      	cmp	r3, #2
 802c696:	d026      	beq.n	802c6e6 <tcpip_thread_handle_msg+0x5e>
 802c698:	2b02      	cmp	r3, #2
 802c69a:	dc2b      	bgt.n	802c6f4 <tcpip_thread_handle_msg+0x6c>
 802c69c:	2b00      	cmp	r3, #0
 802c69e:	d002      	beq.n	802c6a6 <tcpip_thread_handle_msg+0x1e>
 802c6a0:	2b01      	cmp	r3, #1
 802c6a2:	d015      	beq.n	802c6d0 <tcpip_thread_handle_msg+0x48>
 802c6a4:	e026      	b.n	802c6f4 <tcpip_thread_handle_msg+0x6c>
#endif /* !LWIP_TCPIP_CORE_LOCKING */

#if !LWIP_TCPIP_CORE_LOCKING_INPUT
    case TCPIP_MSG_INPKT:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: PACKET %p\n", (void *)msg));
      if (msg->msg.inp.input_fn(msg->msg.inp.p, msg->msg.inp.netif) != ERR_OK) {
 802c6a6:	687b      	ldr	r3, [r7, #4]
 802c6a8:	68db      	ldr	r3, [r3, #12]
 802c6aa:	687a      	ldr	r2, [r7, #4]
 802c6ac:	6850      	ldr	r0, [r2, #4]
 802c6ae:	687a      	ldr	r2, [r7, #4]
 802c6b0:	6892      	ldr	r2, [r2, #8]
 802c6b2:	4611      	mov	r1, r2
 802c6b4:	4798      	blx	r3
 802c6b6:	4603      	mov	r3, r0
 802c6b8:	2b00      	cmp	r3, #0
 802c6ba:	d004      	beq.n	802c6c6 <tcpip_thread_handle_msg+0x3e>
        pbuf_free(msg->msg.inp.p);
 802c6bc:	687b      	ldr	r3, [r7, #4]
 802c6be:	685b      	ldr	r3, [r3, #4]
 802c6c0:	4618      	mov	r0, r3
 802c6c2:	f001 fe23 	bl	802e30c <pbuf_free>
      }
      memp_free(MEMP_TCPIP_MSG_INPKT, msg);
 802c6c6:	6879      	ldr	r1, [r7, #4]
 802c6c8:	2009      	movs	r0, #9
 802c6ca:	f000 ff49 	bl	802d560 <memp_free>
      break;
 802c6ce:	e018      	b.n	802c702 <tcpip_thread_handle_msg+0x7a>
      break;
#endif /* LWIP_TCPIP_TIMEOUT && LWIP_TIMERS */

    case TCPIP_MSG_CALLBACK:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: CALLBACK %p\n", (void *)msg));
      msg->msg.cb.function(msg->msg.cb.ctx);
 802c6d0:	687b      	ldr	r3, [r7, #4]
 802c6d2:	685b      	ldr	r3, [r3, #4]
 802c6d4:	687a      	ldr	r2, [r7, #4]
 802c6d6:	6892      	ldr	r2, [r2, #8]
 802c6d8:	4610      	mov	r0, r2
 802c6da:	4798      	blx	r3
      memp_free(MEMP_TCPIP_MSG_API, msg);
 802c6dc:	6879      	ldr	r1, [r7, #4]
 802c6de:	2008      	movs	r0, #8
 802c6e0:	f000 ff3e 	bl	802d560 <memp_free>
      break;
 802c6e4:	e00d      	b.n	802c702 <tcpip_thread_handle_msg+0x7a>

    case TCPIP_MSG_CALLBACK_STATIC:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: CALLBACK_STATIC %p\n", (void *)msg));
      msg->msg.cb.function(msg->msg.cb.ctx);
 802c6e6:	687b      	ldr	r3, [r7, #4]
 802c6e8:	685b      	ldr	r3, [r3, #4]
 802c6ea:	687a      	ldr	r2, [r7, #4]
 802c6ec:	6892      	ldr	r2, [r2, #8]
 802c6ee:	4610      	mov	r0, r2
 802c6f0:	4798      	blx	r3
      break;
 802c6f2:	e006      	b.n	802c702 <tcpip_thread_handle_msg+0x7a>

    default:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: invalid message: %d\n", msg->type));
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 802c6f4:	4b05      	ldr	r3, [pc, #20]	; (802c70c <tcpip_thread_handle_msg+0x84>)
 802c6f6:	22cf      	movs	r2, #207	; 0xcf
 802c6f8:	4905      	ldr	r1, [pc, #20]	; (802c710 <tcpip_thread_handle_msg+0x88>)
 802c6fa:	4806      	ldr	r0, [pc, #24]	; (802c714 <tcpip_thread_handle_msg+0x8c>)
 802c6fc:	f00c fcb4 	bl	8039068 <iprintf>
      break;
 802c700:	bf00      	nop
  }
}
 802c702:	bf00      	nop
 802c704:	3708      	adds	r7, #8
 802c706:	46bd      	mov	sp, r7
 802c708:	bd80      	pop	{r7, pc}
 802c70a:	bf00      	nop
 802c70c:	0803a9cc 	.word	0x0803a9cc
 802c710:	0803a9fc 	.word	0x0803a9fc
 802c714:	0803aa1c 	.word	0x0803aa1c

0802c718 <tcpip_inpkt>:
 * @param inp the network interface on which the packet was received
 * @param input_fn input function to call
 */
err_t
tcpip_inpkt(struct pbuf *p, struct netif *inp, netif_input_fn input_fn)
{
 802c718:	b580      	push	{r7, lr}
 802c71a:	b086      	sub	sp, #24
 802c71c:	af00      	add	r7, sp, #0
 802c71e:	60f8      	str	r0, [r7, #12]
 802c720:	60b9      	str	r1, [r7, #8]
 802c722:	607a      	str	r2, [r7, #4]
  UNLOCK_TCPIP_CORE();
  return ret;
#else /* LWIP_TCPIP_CORE_LOCKING_INPUT */
  struct tcpip_msg *msg;

  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(tcpip_mbox));
 802c724:	481a      	ldr	r0, [pc, #104]	; (802c790 <tcpip_inpkt+0x78>)
 802c726:	f00b fdaa 	bl	803827e <sys_mbox_valid>
 802c72a:	4603      	mov	r3, r0
 802c72c:	2b00      	cmp	r3, #0
 802c72e:	d105      	bne.n	802c73c <tcpip_inpkt+0x24>
 802c730:	4b18      	ldr	r3, [pc, #96]	; (802c794 <tcpip_inpkt+0x7c>)
 802c732:	22fc      	movs	r2, #252	; 0xfc
 802c734:	4918      	ldr	r1, [pc, #96]	; (802c798 <tcpip_inpkt+0x80>)
 802c736:	4819      	ldr	r0, [pc, #100]	; (802c79c <tcpip_inpkt+0x84>)
 802c738:	f00c fc96 	bl	8039068 <iprintf>

  msg = (struct tcpip_msg *)memp_malloc(MEMP_TCPIP_MSG_INPKT);
 802c73c:	2009      	movs	r0, #9
 802c73e:	f000 fe93 	bl	802d468 <memp_malloc>
 802c742:	6178      	str	r0, [r7, #20]
  if (msg == NULL) {
 802c744:	697b      	ldr	r3, [r7, #20]
 802c746:	2b00      	cmp	r3, #0
 802c748:	d102      	bne.n	802c750 <tcpip_inpkt+0x38>
    return ERR_MEM;
 802c74a:	f04f 33ff 	mov.w	r3, #4294967295
 802c74e:	e01a      	b.n	802c786 <tcpip_inpkt+0x6e>
  }

  msg->type = TCPIP_MSG_INPKT;
 802c750:	697b      	ldr	r3, [r7, #20]
 802c752:	2200      	movs	r2, #0
 802c754:	701a      	strb	r2, [r3, #0]
  msg->msg.inp.p = p;
 802c756:	697b      	ldr	r3, [r7, #20]
 802c758:	68fa      	ldr	r2, [r7, #12]
 802c75a:	605a      	str	r2, [r3, #4]
  msg->msg.inp.netif = inp;
 802c75c:	697b      	ldr	r3, [r7, #20]
 802c75e:	68ba      	ldr	r2, [r7, #8]
 802c760:	609a      	str	r2, [r3, #8]
  msg->msg.inp.input_fn = input_fn;
 802c762:	697b      	ldr	r3, [r7, #20]
 802c764:	687a      	ldr	r2, [r7, #4]
 802c766:	60da      	str	r2, [r3, #12]
  if (sys_mbox_trypost(&tcpip_mbox, msg) != ERR_OK) {
 802c768:	6979      	ldr	r1, [r7, #20]
 802c76a:	4809      	ldr	r0, [pc, #36]	; (802c790 <tcpip_inpkt+0x78>)
 802c76c:	f00b fd08 	bl	8038180 <sys_mbox_trypost>
 802c770:	4603      	mov	r3, r0
 802c772:	2b00      	cmp	r3, #0
 802c774:	d006      	beq.n	802c784 <tcpip_inpkt+0x6c>
    memp_free(MEMP_TCPIP_MSG_INPKT, msg);
 802c776:	6979      	ldr	r1, [r7, #20]
 802c778:	2009      	movs	r0, #9
 802c77a:	f000 fef1 	bl	802d560 <memp_free>
    return ERR_MEM;
 802c77e:	f04f 33ff 	mov.w	r3, #4294967295
 802c782:	e000      	b.n	802c786 <tcpip_inpkt+0x6e>
  }
  return ERR_OK;
 802c784:	2300      	movs	r3, #0
#endif /* LWIP_TCPIP_CORE_LOCKING_INPUT */
}
 802c786:	4618      	mov	r0, r3
 802c788:	3718      	adds	r7, #24
 802c78a:	46bd      	mov	sp, r7
 802c78c:	bd80      	pop	{r7, pc}
 802c78e:	bf00      	nop
 802c790:	2000b318 	.word	0x2000b318
 802c794:	0803a9cc 	.word	0x0803a9cc
 802c798:	0803aa44 	.word	0x0803aa44
 802c79c:	0803aa1c 	.word	0x0803aa1c

0802c7a0 <tcpip_input>:
 *          NETIF_FLAG_ETHERNET flags)
 * @param inp the network interface on which the packet was received
 */
err_t
tcpip_input(struct pbuf *p, struct netif *inp)
{
 802c7a0:	b580      	push	{r7, lr}
 802c7a2:	b082      	sub	sp, #8
 802c7a4:	af00      	add	r7, sp, #0
 802c7a6:	6078      	str	r0, [r7, #4]
 802c7a8:	6039      	str	r1, [r7, #0]
#if LWIP_ETHERNET
  if (inp->flags & (NETIF_FLAG_ETHARP | NETIF_FLAG_ETHERNET)) {
 802c7aa:	683b      	ldr	r3, [r7, #0]
 802c7ac:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 802c7b0:	f003 0318 	and.w	r3, r3, #24
 802c7b4:	2b00      	cmp	r3, #0
 802c7b6:	d006      	beq.n	802c7c6 <tcpip_input+0x26>
    return tcpip_inpkt(p, inp, ethernet_input);
 802c7b8:	4a08      	ldr	r2, [pc, #32]	; (802c7dc <tcpip_input+0x3c>)
 802c7ba:	6839      	ldr	r1, [r7, #0]
 802c7bc:	6878      	ldr	r0, [r7, #4]
 802c7be:	f7ff ffab 	bl	802c718 <tcpip_inpkt>
 802c7c2:	4603      	mov	r3, r0
 802c7c4:	e005      	b.n	802c7d2 <tcpip_input+0x32>
  } else
#endif /* LWIP_ETHERNET */
    return tcpip_inpkt(p, inp, ip_input);
 802c7c6:	4a06      	ldr	r2, [pc, #24]	; (802c7e0 <tcpip_input+0x40>)
 802c7c8:	6839      	ldr	r1, [r7, #0]
 802c7ca:	6878      	ldr	r0, [r7, #4]
 802c7cc:	f7ff ffa4 	bl	802c718 <tcpip_inpkt>
 802c7d0:	4603      	mov	r3, r0
}
 802c7d2:	4618      	mov	r0, r3
 802c7d4:	3708      	adds	r7, #8
 802c7d6:	46bd      	mov	sp, r7
 802c7d8:	bd80      	pop	{r7, pc}
 802c7da:	bf00      	nop
 802c7dc:	08037eb9 	.word	0x08037eb9
 802c7e0:	08036c95 	.word	0x08036c95

0802c7e4 <tcpip_try_callback>:
 *
 * @see tcpip_callback
 */
err_t
tcpip_try_callback(tcpip_callback_fn function, void *ctx)
{
 802c7e4:	b580      	push	{r7, lr}
 802c7e6:	b084      	sub	sp, #16
 802c7e8:	af00      	add	r7, sp, #0
 802c7ea:	6078      	str	r0, [r7, #4]
 802c7ec:	6039      	str	r1, [r7, #0]
  struct tcpip_msg *msg;

  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(tcpip_mbox));
 802c7ee:	4819      	ldr	r0, [pc, #100]	; (802c854 <tcpip_try_callback+0x70>)
 802c7f0:	f00b fd45 	bl	803827e <sys_mbox_valid>
 802c7f4:	4603      	mov	r3, r0
 802c7f6:	2b00      	cmp	r3, #0
 802c7f8:	d106      	bne.n	802c808 <tcpip_try_callback+0x24>
 802c7fa:	4b17      	ldr	r3, [pc, #92]	; (802c858 <tcpip_try_callback+0x74>)
 802c7fc:	f240 125d 	movw	r2, #349	; 0x15d
 802c800:	4916      	ldr	r1, [pc, #88]	; (802c85c <tcpip_try_callback+0x78>)
 802c802:	4817      	ldr	r0, [pc, #92]	; (802c860 <tcpip_try_callback+0x7c>)
 802c804:	f00c fc30 	bl	8039068 <iprintf>

  msg = (struct tcpip_msg *)memp_malloc(MEMP_TCPIP_MSG_API);
 802c808:	2008      	movs	r0, #8
 802c80a:	f000 fe2d 	bl	802d468 <memp_malloc>
 802c80e:	60f8      	str	r0, [r7, #12]
  if (msg == NULL) {
 802c810:	68fb      	ldr	r3, [r7, #12]
 802c812:	2b00      	cmp	r3, #0
 802c814:	d102      	bne.n	802c81c <tcpip_try_callback+0x38>
    return ERR_MEM;
 802c816:	f04f 33ff 	mov.w	r3, #4294967295
 802c81a:	e017      	b.n	802c84c <tcpip_try_callback+0x68>
  }

  msg->type = TCPIP_MSG_CALLBACK;
 802c81c:	68fb      	ldr	r3, [r7, #12]
 802c81e:	2201      	movs	r2, #1
 802c820:	701a      	strb	r2, [r3, #0]
  msg->msg.cb.function = function;
 802c822:	68fb      	ldr	r3, [r7, #12]
 802c824:	687a      	ldr	r2, [r7, #4]
 802c826:	605a      	str	r2, [r3, #4]
  msg->msg.cb.ctx = ctx;
 802c828:	68fb      	ldr	r3, [r7, #12]
 802c82a:	683a      	ldr	r2, [r7, #0]
 802c82c:	609a      	str	r2, [r3, #8]

  if (sys_mbox_trypost(&tcpip_mbox, msg) != ERR_OK) {
 802c82e:	68f9      	ldr	r1, [r7, #12]
 802c830:	4808      	ldr	r0, [pc, #32]	; (802c854 <tcpip_try_callback+0x70>)
 802c832:	f00b fca5 	bl	8038180 <sys_mbox_trypost>
 802c836:	4603      	mov	r3, r0
 802c838:	2b00      	cmp	r3, #0
 802c83a:	d006      	beq.n	802c84a <tcpip_try_callback+0x66>
    memp_free(MEMP_TCPIP_MSG_API, msg);
 802c83c:	68f9      	ldr	r1, [r7, #12]
 802c83e:	2008      	movs	r0, #8
 802c840:	f000 fe8e 	bl	802d560 <memp_free>
    return ERR_MEM;
 802c844:	f04f 33ff 	mov.w	r3, #4294967295
 802c848:	e000      	b.n	802c84c <tcpip_try_callback+0x68>
  }
  return ERR_OK;
 802c84a:	2300      	movs	r3, #0
}
 802c84c:	4618      	mov	r0, r3
 802c84e:	3710      	adds	r7, #16
 802c850:	46bd      	mov	sp, r7
 802c852:	bd80      	pop	{r7, pc}
 802c854:	2000b318 	.word	0x2000b318
 802c858:	0803a9cc 	.word	0x0803a9cc
 802c85c:	0803aa44 	.word	0x0803aa44
 802c860:	0803aa1c 	.word	0x0803aa1c

0802c864 <tcpip_send_msg_wait_sem>:
 * @param sem semaphore to wait on
 * @return ERR_OK if the function was called, another err_t if not
 */
err_t
tcpip_send_msg_wait_sem(tcpip_callback_fn fn, void *apimsg, sys_sem_t *sem)
{
 802c864:	b580      	push	{r7, lr}
 802c866:	b084      	sub	sp, #16
 802c868:	af00      	add	r7, sp, #0
 802c86a:	60f8      	str	r0, [r7, #12]
 802c86c:	60b9      	str	r1, [r7, #8]
 802c86e:	607a      	str	r2, [r7, #4]
#if LWIP_TCPIP_CORE_LOCKING
  LWIP_UNUSED_ARG(sem);
  LOCK_TCPIP_CORE();
 802c870:	4806      	ldr	r0, [pc, #24]	; (802c88c <tcpip_send_msg_wait_sem+0x28>)
 802c872:	f00b fe29 	bl	80384c8 <sys_mutex_lock>
  fn(apimsg);
 802c876:	68fb      	ldr	r3, [r7, #12]
 802c878:	68b8      	ldr	r0, [r7, #8]
 802c87a:	4798      	blx	r3
  UNLOCK_TCPIP_CORE();
 802c87c:	4803      	ldr	r0, [pc, #12]	; (802c88c <tcpip_send_msg_wait_sem+0x28>)
 802c87e:	f00b fe32 	bl	80384e6 <sys_mutex_unlock>
  return ERR_OK;
 802c882:	2300      	movs	r3, #0
  sys_mbox_post(&tcpip_mbox, &TCPIP_MSG_VAR_REF(msg));
  sys_arch_sem_wait(sem, 0);
  TCPIP_MSG_VAR_FREE(msg);
  return ERR_OK;
#endif /* LWIP_TCPIP_CORE_LOCKING */
}
 802c884:	4618      	mov	r0, r3
 802c886:	3710      	adds	r7, #16
 802c888:	46bd      	mov	sp, r7
 802c88a:	bd80      	pop	{r7, pc}
 802c88c:	2000b31c 	.word	0x2000b31c

0802c890 <tcpip_init>:
 * @param initfunc a function to call when tcpip_thread is running and finished initializing
 * @param arg argument to pass to initfunc
 */
void
tcpip_init(tcpip_init_done_fn initfunc, void *arg)
{
 802c890:	b580      	push	{r7, lr}
 802c892:	b084      	sub	sp, #16
 802c894:	af02      	add	r7, sp, #8
 802c896:	6078      	str	r0, [r7, #4]
 802c898:	6039      	str	r1, [r7, #0]
  lwip_init();
 802c89a:	f000 f871 	bl	802c980 <lwip_init>

  tcpip_init_done = initfunc;
 802c89e:	4a17      	ldr	r2, [pc, #92]	; (802c8fc <tcpip_init+0x6c>)
 802c8a0:	687b      	ldr	r3, [r7, #4]
 802c8a2:	6013      	str	r3, [r2, #0]
  tcpip_init_done_arg = arg;
 802c8a4:	4a16      	ldr	r2, [pc, #88]	; (802c900 <tcpip_init+0x70>)
 802c8a6:	683b      	ldr	r3, [r7, #0]
 802c8a8:	6013      	str	r3, [r2, #0]
  if (sys_mbox_new(&tcpip_mbox, TCPIP_MBOX_SIZE) != ERR_OK) {
 802c8aa:	2106      	movs	r1, #6
 802c8ac:	4815      	ldr	r0, [pc, #84]	; (802c904 <tcpip_init+0x74>)
 802c8ae:	f00b fc05 	bl	80380bc <sys_mbox_new>
 802c8b2:	4603      	mov	r3, r0
 802c8b4:	2b00      	cmp	r3, #0
 802c8b6:	d006      	beq.n	802c8c6 <tcpip_init+0x36>
    LWIP_ASSERT("failed to create tcpip_thread mbox", 0);
 802c8b8:	4b13      	ldr	r3, [pc, #76]	; (802c908 <tcpip_init+0x78>)
 802c8ba:	f240 2261 	movw	r2, #609	; 0x261
 802c8be:	4913      	ldr	r1, [pc, #76]	; (802c90c <tcpip_init+0x7c>)
 802c8c0:	4813      	ldr	r0, [pc, #76]	; (802c910 <tcpip_init+0x80>)
 802c8c2:	f00c fbd1 	bl	8039068 <iprintf>
  }
#if LWIP_TCPIP_CORE_LOCKING
  if (sys_mutex_new(&lock_tcpip_core) != ERR_OK) {
 802c8c6:	4813      	ldr	r0, [pc, #76]	; (802c914 <tcpip_init+0x84>)
 802c8c8:	f00b fdc2 	bl	8038450 <sys_mutex_new>
 802c8cc:	4603      	mov	r3, r0
 802c8ce:	2b00      	cmp	r3, #0
 802c8d0:	d006      	beq.n	802c8e0 <tcpip_init+0x50>
    LWIP_ASSERT("failed to create lock_tcpip_core", 0);
 802c8d2:	4b0d      	ldr	r3, [pc, #52]	; (802c908 <tcpip_init+0x78>)
 802c8d4:	f240 2265 	movw	r2, #613	; 0x265
 802c8d8:	490f      	ldr	r1, [pc, #60]	; (802c918 <tcpip_init+0x88>)
 802c8da:	480d      	ldr	r0, [pc, #52]	; (802c910 <tcpip_init+0x80>)
 802c8dc:	f00c fbc4 	bl	8039068 <iprintf>
  }
#endif /* LWIP_TCPIP_CORE_LOCKING */

  sys_thread_new(TCPIP_THREAD_NAME, tcpip_thread, NULL, TCPIP_THREAD_STACKSIZE, TCPIP_THREAD_PRIO);
 802c8e0:	2300      	movs	r3, #0
 802c8e2:	9300      	str	r3, [sp, #0]
 802c8e4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 802c8e8:	2200      	movs	r2, #0
 802c8ea:	490c      	ldr	r1, [pc, #48]	; (802c91c <tcpip_init+0x8c>)
 802c8ec:	480c      	ldr	r0, [pc, #48]	; (802c920 <tcpip_init+0x90>)
 802c8ee:	f00b fe07 	bl	8038500 <sys_thread_new>
}
 802c8f2:	bf00      	nop
 802c8f4:	3708      	adds	r7, #8
 802c8f6:	46bd      	mov	sp, r7
 802c8f8:	bd80      	pop	{r7, pc}
 802c8fa:	bf00      	nop
 802c8fc:	2000b310 	.word	0x2000b310
 802c900:	2000b314 	.word	0x2000b314
 802c904:	2000b318 	.word	0x2000b318
 802c908:	0803a9cc 	.word	0x0803a9cc
 802c90c:	0803aa54 	.word	0x0803aa54
 802c910:	0803aa1c 	.word	0x0803aa1c
 802c914:	2000b31c 	.word	0x2000b31c
 802c918:	0803aa78 	.word	0x0803aa78
 802c91c:	0802c621 	.word	0x0802c621
 802c920:	0803aa9c 	.word	0x0803aa9c

0802c924 <lwip_htons>:
 * @param n u16_t in host byte order
 * @return n in network byte order
 */
u16_t
lwip_htons(u16_t n)
{
 802c924:	b480      	push	{r7}
 802c926:	b083      	sub	sp, #12
 802c928:	af00      	add	r7, sp, #0
 802c92a:	4603      	mov	r3, r0
 802c92c:	80fb      	strh	r3, [r7, #6]
  return PP_HTONS(n);
 802c92e:	88fb      	ldrh	r3, [r7, #6]
 802c930:	021b      	lsls	r3, r3, #8
 802c932:	b21a      	sxth	r2, r3
 802c934:	88fb      	ldrh	r3, [r7, #6]
 802c936:	0a1b      	lsrs	r3, r3, #8
 802c938:	b29b      	uxth	r3, r3
 802c93a:	b21b      	sxth	r3, r3
 802c93c:	4313      	orrs	r3, r2
 802c93e:	b21b      	sxth	r3, r3
 802c940:	b29b      	uxth	r3, r3
}
 802c942:	4618      	mov	r0, r3
 802c944:	370c      	adds	r7, #12
 802c946:	46bd      	mov	sp, r7
 802c948:	f85d 7b04 	ldr.w	r7, [sp], #4
 802c94c:	4770      	bx	lr

0802c94e <lwip_htonl>:
 * @param n u32_t in host byte order
 * @return n in network byte order
 */
u32_t
lwip_htonl(u32_t n)
{
 802c94e:	b480      	push	{r7}
 802c950:	b083      	sub	sp, #12
 802c952:	af00      	add	r7, sp, #0
 802c954:	6078      	str	r0, [r7, #4]
  return PP_HTONL(n);
 802c956:	687b      	ldr	r3, [r7, #4]
 802c958:	061a      	lsls	r2, r3, #24
 802c95a:	687b      	ldr	r3, [r7, #4]
 802c95c:	021b      	lsls	r3, r3, #8
 802c95e:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 802c962:	431a      	orrs	r2, r3
 802c964:	687b      	ldr	r3, [r7, #4]
 802c966:	0a1b      	lsrs	r3, r3, #8
 802c968:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 802c96c:	431a      	orrs	r2, r3
 802c96e:	687b      	ldr	r3, [r7, #4]
 802c970:	0e1b      	lsrs	r3, r3, #24
 802c972:	4313      	orrs	r3, r2
}
 802c974:	4618      	mov	r0, r3
 802c976:	370c      	adds	r7, #12
 802c978:	46bd      	mov	sp, r7
 802c97a:	f85d 7b04 	ldr.w	r7, [sp], #4
 802c97e:	4770      	bx	lr

0802c980 <lwip_init>:
 * Initialize all modules.
 * Use this in NO_SYS mode. Use tcpip_init() otherwise.
 */
void
lwip_init(void)
{
 802c980:	b580      	push	{r7, lr}
 802c982:	b082      	sub	sp, #8
 802c984:	af00      	add	r7, sp, #0
#ifndef LWIP_SKIP_CONST_CHECK
  int a = 0;
 802c986:	2300      	movs	r3, #0
 802c988:	607b      	str	r3, [r7, #4]
#ifndef LWIP_SKIP_PACKING_CHECK
  LWIP_ASSERT("Struct packing not implemented correctly. Check your lwIP port.", sizeof(struct packed_struct_test) == PACKED_STRUCT_TEST_EXPECTED_SIZE);
#endif

  /* Modules initialization */
  stats_init();
 802c98a:	f001 ff69 	bl	802e860 <stats_init>
#if !NO_SYS
  sys_init();
 802c98e:	f00b fd51 	bl	8038434 <sys_init>
#endif /* !NO_SYS */
  mem_init();
 802c992:	f000 f8d5 	bl	802cb40 <mem_init>
  memp_init();
 802c996:	f000 fcd1 	bl	802d33c <memp_init>
  pbuf_init();
  netif_init();
 802c99a:	f000 fe0b 	bl	802d5b4 <netif_init>
#endif /* LWIP_IPV4 */
#if LWIP_RAW
  raw_init();
#endif /* LWIP_RAW */
#if LWIP_UDP
  udp_init();
 802c99e:	f008 fa45 	bl	8034e2c <udp_init>
#endif /* LWIP_UDP */
#if LWIP_TCP
  tcp_init();
 802c9a2:	f001 ff65 	bl	802e870 <tcp_init>
#if PPP_SUPPORT
  ppp_init();
#endif

#if LWIP_TIMERS
  sys_timeouts_init();
 802c9a6:	f008 f987 	bl	8034cb8 <sys_timeouts_init>
#endif /* LWIP_TIMERS */
}
 802c9aa:	bf00      	nop
 802c9ac:	3708      	adds	r7, #8
 802c9ae:	46bd      	mov	sp, r7
 802c9b0:	bd80      	pop	{r7, pc}
	...

0802c9b4 <ptr_to_mem>:
#define mem_overflow_check_element(mem)
#endif /* MEM_OVERFLOW_CHECK */

static struct mem *
ptr_to_mem(mem_size_t ptr)
{
 802c9b4:	b480      	push	{r7}
 802c9b6:	b083      	sub	sp, #12
 802c9b8:	af00      	add	r7, sp, #0
 802c9ba:	4603      	mov	r3, r0
 802c9bc:	80fb      	strh	r3, [r7, #6]
  return (struct mem *)(void *)&ram[ptr];
 802c9be:	4b05      	ldr	r3, [pc, #20]	; (802c9d4 <ptr_to_mem+0x20>)
 802c9c0:	681a      	ldr	r2, [r3, #0]
 802c9c2:	88fb      	ldrh	r3, [r7, #6]
 802c9c4:	4413      	add	r3, r2
}
 802c9c6:	4618      	mov	r0, r3
 802c9c8:	370c      	adds	r7, #12
 802c9ca:	46bd      	mov	sp, r7
 802c9cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 802c9d0:	4770      	bx	lr
 802c9d2:	bf00      	nop
 802c9d4:	2000b98c 	.word	0x2000b98c

0802c9d8 <mem_to_ptr>:

static mem_size_t
mem_to_ptr(void *mem)
{
 802c9d8:	b480      	push	{r7}
 802c9da:	b083      	sub	sp, #12
 802c9dc:	af00      	add	r7, sp, #0
 802c9de:	6078      	str	r0, [r7, #4]
  return (mem_size_t)((u8_t *)mem - ram);
 802c9e0:	4b05      	ldr	r3, [pc, #20]	; (802c9f8 <mem_to_ptr+0x20>)
 802c9e2:	681b      	ldr	r3, [r3, #0]
 802c9e4:	687a      	ldr	r2, [r7, #4]
 802c9e6:	1ad3      	subs	r3, r2, r3
 802c9e8:	b29b      	uxth	r3, r3
}
 802c9ea:	4618      	mov	r0, r3
 802c9ec:	370c      	adds	r7, #12
 802c9ee:	46bd      	mov	sp, r7
 802c9f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 802c9f4:	4770      	bx	lr
 802c9f6:	bf00      	nop
 802c9f8:	2000b98c 	.word	0x2000b98c

0802c9fc <plug_holes>:
 * This assumes access to the heap is protected by the calling function
 * already.
 */
static void
plug_holes(struct mem *mem)
{
 802c9fc:	b590      	push	{r4, r7, lr}
 802c9fe:	b085      	sub	sp, #20
 802ca00:	af00      	add	r7, sp, #0
 802ca02:	6078      	str	r0, [r7, #4]
  struct mem *nmem;
  struct mem *pmem;

  LWIP_ASSERT("plug_holes: mem >= ram", (u8_t *)mem >= ram);
 802ca04:	4b45      	ldr	r3, [pc, #276]	; (802cb1c <plug_holes+0x120>)
 802ca06:	681b      	ldr	r3, [r3, #0]
 802ca08:	687a      	ldr	r2, [r7, #4]
 802ca0a:	429a      	cmp	r2, r3
 802ca0c:	d206      	bcs.n	802ca1c <plug_holes+0x20>
 802ca0e:	4b44      	ldr	r3, [pc, #272]	; (802cb20 <plug_holes+0x124>)
 802ca10:	f240 12df 	movw	r2, #479	; 0x1df
 802ca14:	4943      	ldr	r1, [pc, #268]	; (802cb24 <plug_holes+0x128>)
 802ca16:	4844      	ldr	r0, [pc, #272]	; (802cb28 <plug_holes+0x12c>)
 802ca18:	f00c fb26 	bl	8039068 <iprintf>
  LWIP_ASSERT("plug_holes: mem < ram_end", (u8_t *)mem < (u8_t *)ram_end);
 802ca1c:	4b43      	ldr	r3, [pc, #268]	; (802cb2c <plug_holes+0x130>)
 802ca1e:	681b      	ldr	r3, [r3, #0]
 802ca20:	687a      	ldr	r2, [r7, #4]
 802ca22:	429a      	cmp	r2, r3
 802ca24:	d306      	bcc.n	802ca34 <plug_holes+0x38>
 802ca26:	4b3e      	ldr	r3, [pc, #248]	; (802cb20 <plug_holes+0x124>)
 802ca28:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 802ca2c:	4940      	ldr	r1, [pc, #256]	; (802cb30 <plug_holes+0x134>)
 802ca2e:	483e      	ldr	r0, [pc, #248]	; (802cb28 <plug_holes+0x12c>)
 802ca30:	f00c fb1a 	bl	8039068 <iprintf>
  LWIP_ASSERT("plug_holes: mem->used == 0", mem->used == 0);
 802ca34:	687b      	ldr	r3, [r7, #4]
 802ca36:	791b      	ldrb	r3, [r3, #4]
 802ca38:	2b00      	cmp	r3, #0
 802ca3a:	d006      	beq.n	802ca4a <plug_holes+0x4e>
 802ca3c:	4b38      	ldr	r3, [pc, #224]	; (802cb20 <plug_holes+0x124>)
 802ca3e:	f240 12e1 	movw	r2, #481	; 0x1e1
 802ca42:	493c      	ldr	r1, [pc, #240]	; (802cb34 <plug_holes+0x138>)
 802ca44:	4838      	ldr	r0, [pc, #224]	; (802cb28 <plug_holes+0x12c>)
 802ca46:	f00c fb0f 	bl	8039068 <iprintf>

  /* plug hole forward */
  LWIP_ASSERT("plug_holes: mem->next <= MEM_SIZE_ALIGNED", mem->next <= MEM_SIZE_ALIGNED);
 802ca4a:	687b      	ldr	r3, [r7, #4]
 802ca4c:	881b      	ldrh	r3, [r3, #0]
 802ca4e:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 802ca52:	d906      	bls.n	802ca62 <plug_holes+0x66>
 802ca54:	4b32      	ldr	r3, [pc, #200]	; (802cb20 <plug_holes+0x124>)
 802ca56:	f44f 72f2 	mov.w	r2, #484	; 0x1e4
 802ca5a:	4937      	ldr	r1, [pc, #220]	; (802cb38 <plug_holes+0x13c>)
 802ca5c:	4832      	ldr	r0, [pc, #200]	; (802cb28 <plug_holes+0x12c>)
 802ca5e:	f00c fb03 	bl	8039068 <iprintf>

  nmem = ptr_to_mem(mem->next);
 802ca62:	687b      	ldr	r3, [r7, #4]
 802ca64:	881b      	ldrh	r3, [r3, #0]
 802ca66:	4618      	mov	r0, r3
 802ca68:	f7ff ffa4 	bl	802c9b4 <ptr_to_mem>
 802ca6c:	60f8      	str	r0, [r7, #12]
  if (mem != nmem && nmem->used == 0 && (u8_t *)nmem != (u8_t *)ram_end) {
 802ca6e:	687a      	ldr	r2, [r7, #4]
 802ca70:	68fb      	ldr	r3, [r7, #12]
 802ca72:	429a      	cmp	r2, r3
 802ca74:	d024      	beq.n	802cac0 <plug_holes+0xc4>
 802ca76:	68fb      	ldr	r3, [r7, #12]
 802ca78:	791b      	ldrb	r3, [r3, #4]
 802ca7a:	2b00      	cmp	r3, #0
 802ca7c:	d120      	bne.n	802cac0 <plug_holes+0xc4>
 802ca7e:	4b2b      	ldr	r3, [pc, #172]	; (802cb2c <plug_holes+0x130>)
 802ca80:	681b      	ldr	r3, [r3, #0]
 802ca82:	68fa      	ldr	r2, [r7, #12]
 802ca84:	429a      	cmp	r2, r3
 802ca86:	d01b      	beq.n	802cac0 <plug_holes+0xc4>
    /* if mem->next is unused and not end of ram, combine mem and mem->next */
    if (lfree == nmem) {
 802ca88:	4b2c      	ldr	r3, [pc, #176]	; (802cb3c <plug_holes+0x140>)
 802ca8a:	681b      	ldr	r3, [r3, #0]
 802ca8c:	68fa      	ldr	r2, [r7, #12]
 802ca8e:	429a      	cmp	r2, r3
 802ca90:	d102      	bne.n	802ca98 <plug_holes+0x9c>
      lfree = mem;
 802ca92:	4a2a      	ldr	r2, [pc, #168]	; (802cb3c <plug_holes+0x140>)
 802ca94:	687b      	ldr	r3, [r7, #4]
 802ca96:	6013      	str	r3, [r2, #0]
    }
    mem->next = nmem->next;
 802ca98:	68fb      	ldr	r3, [r7, #12]
 802ca9a:	881a      	ldrh	r2, [r3, #0]
 802ca9c:	687b      	ldr	r3, [r7, #4]
 802ca9e:	801a      	strh	r2, [r3, #0]
    if (nmem->next != MEM_SIZE_ALIGNED) {
 802caa0:	68fb      	ldr	r3, [r7, #12]
 802caa2:	881b      	ldrh	r3, [r3, #0]
 802caa4:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 802caa8:	d00a      	beq.n	802cac0 <plug_holes+0xc4>
      ptr_to_mem(nmem->next)->prev = mem_to_ptr(mem);
 802caaa:	68fb      	ldr	r3, [r7, #12]
 802caac:	881b      	ldrh	r3, [r3, #0]
 802caae:	4618      	mov	r0, r3
 802cab0:	f7ff ff80 	bl	802c9b4 <ptr_to_mem>
 802cab4:	4604      	mov	r4, r0
 802cab6:	6878      	ldr	r0, [r7, #4]
 802cab8:	f7ff ff8e 	bl	802c9d8 <mem_to_ptr>
 802cabc:	4603      	mov	r3, r0
 802cabe:	8063      	strh	r3, [r4, #2]
    }
  }

  /* plug hole backward */
  pmem = ptr_to_mem(mem->prev);
 802cac0:	687b      	ldr	r3, [r7, #4]
 802cac2:	885b      	ldrh	r3, [r3, #2]
 802cac4:	4618      	mov	r0, r3
 802cac6:	f7ff ff75 	bl	802c9b4 <ptr_to_mem>
 802caca:	60b8      	str	r0, [r7, #8]
  if (pmem != mem && pmem->used == 0) {
 802cacc:	68ba      	ldr	r2, [r7, #8]
 802cace:	687b      	ldr	r3, [r7, #4]
 802cad0:	429a      	cmp	r2, r3
 802cad2:	d01f      	beq.n	802cb14 <plug_holes+0x118>
 802cad4:	68bb      	ldr	r3, [r7, #8]
 802cad6:	791b      	ldrb	r3, [r3, #4]
 802cad8:	2b00      	cmp	r3, #0
 802cada:	d11b      	bne.n	802cb14 <plug_holes+0x118>
    /* if mem->prev is unused, combine mem and mem->prev */
    if (lfree == mem) {
 802cadc:	4b17      	ldr	r3, [pc, #92]	; (802cb3c <plug_holes+0x140>)
 802cade:	681b      	ldr	r3, [r3, #0]
 802cae0:	687a      	ldr	r2, [r7, #4]
 802cae2:	429a      	cmp	r2, r3
 802cae4:	d102      	bne.n	802caec <plug_holes+0xf0>
      lfree = pmem;
 802cae6:	4a15      	ldr	r2, [pc, #84]	; (802cb3c <plug_holes+0x140>)
 802cae8:	68bb      	ldr	r3, [r7, #8]
 802caea:	6013      	str	r3, [r2, #0]
    }
    pmem->next = mem->next;
 802caec:	687b      	ldr	r3, [r7, #4]
 802caee:	881a      	ldrh	r2, [r3, #0]
 802caf0:	68bb      	ldr	r3, [r7, #8]
 802caf2:	801a      	strh	r2, [r3, #0]
    if (mem->next != MEM_SIZE_ALIGNED) {
 802caf4:	687b      	ldr	r3, [r7, #4]
 802caf6:	881b      	ldrh	r3, [r3, #0]
 802caf8:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 802cafc:	d00a      	beq.n	802cb14 <plug_holes+0x118>
      ptr_to_mem(mem->next)->prev = mem_to_ptr(pmem);
 802cafe:	687b      	ldr	r3, [r7, #4]
 802cb00:	881b      	ldrh	r3, [r3, #0]
 802cb02:	4618      	mov	r0, r3
 802cb04:	f7ff ff56 	bl	802c9b4 <ptr_to_mem>
 802cb08:	4604      	mov	r4, r0
 802cb0a:	68b8      	ldr	r0, [r7, #8]
 802cb0c:	f7ff ff64 	bl	802c9d8 <mem_to_ptr>
 802cb10:	4603      	mov	r3, r0
 802cb12:	8063      	strh	r3, [r4, #2]
    }
  }
}
 802cb14:	bf00      	nop
 802cb16:	3714      	adds	r7, #20
 802cb18:	46bd      	mov	sp, r7
 802cb1a:	bd90      	pop	{r4, r7, pc}
 802cb1c:	2000b98c 	.word	0x2000b98c
 802cb20:	0803aaac 	.word	0x0803aaac
 802cb24:	0803aadc 	.word	0x0803aadc
 802cb28:	0803aaf4 	.word	0x0803aaf4
 802cb2c:	2000b990 	.word	0x2000b990
 802cb30:	0803ab1c 	.word	0x0803ab1c
 802cb34:	0803ab38 	.word	0x0803ab38
 802cb38:	0803ab54 	.word	0x0803ab54
 802cb3c:	2000b998 	.word	0x2000b998

0802cb40 <mem_init>:
/**
 * Zero the heap and initialize start, end and lowest-free
 */
void
mem_init(void)
{
 802cb40:	b580      	push	{r7, lr}
 802cb42:	b082      	sub	sp, #8
 802cb44:	af00      	add	r7, sp, #0

  LWIP_ASSERT("Sanity check alignment",
              (SIZEOF_STRUCT_MEM & (MEM_ALIGNMENT - 1)) == 0);

  /* align the heap */
  ram = (u8_t *)LWIP_MEM_ALIGN(LWIP_RAM_HEAP_POINTER);
 802cb46:	4b21      	ldr	r3, [pc, #132]	; (802cbcc <mem_init+0x8c>)
 802cb48:	3303      	adds	r3, #3
 802cb4a:	f023 0303 	bic.w	r3, r3, #3
 802cb4e:	461a      	mov	r2, r3
 802cb50:	4b1f      	ldr	r3, [pc, #124]	; (802cbd0 <mem_init+0x90>)
 802cb52:	601a      	str	r2, [r3, #0]
  /* initialize the start of the heap */
  mem = (struct mem *)(void *)ram;
 802cb54:	4b1e      	ldr	r3, [pc, #120]	; (802cbd0 <mem_init+0x90>)
 802cb56:	681b      	ldr	r3, [r3, #0]
 802cb58:	607b      	str	r3, [r7, #4]
  mem->next = MEM_SIZE_ALIGNED;
 802cb5a:	687b      	ldr	r3, [r7, #4]
 802cb5c:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 802cb60:	801a      	strh	r2, [r3, #0]
  mem->prev = 0;
 802cb62:	687b      	ldr	r3, [r7, #4]
 802cb64:	2200      	movs	r2, #0
 802cb66:	805a      	strh	r2, [r3, #2]
  mem->used = 0;
 802cb68:	687b      	ldr	r3, [r7, #4]
 802cb6a:	2200      	movs	r2, #0
 802cb6c:	711a      	strb	r2, [r3, #4]
  /* initialize the end of the heap */
  ram_end = ptr_to_mem(MEM_SIZE_ALIGNED);
 802cb6e:	f44f 60c8 	mov.w	r0, #1600	; 0x640
 802cb72:	f7ff ff1f 	bl	802c9b4 <ptr_to_mem>
 802cb76:	4603      	mov	r3, r0
 802cb78:	4a16      	ldr	r2, [pc, #88]	; (802cbd4 <mem_init+0x94>)
 802cb7a:	6013      	str	r3, [r2, #0]
  ram_end->used = 1;
 802cb7c:	4b15      	ldr	r3, [pc, #84]	; (802cbd4 <mem_init+0x94>)
 802cb7e:	681b      	ldr	r3, [r3, #0]
 802cb80:	2201      	movs	r2, #1
 802cb82:	711a      	strb	r2, [r3, #4]
  ram_end->next = MEM_SIZE_ALIGNED;
 802cb84:	4b13      	ldr	r3, [pc, #76]	; (802cbd4 <mem_init+0x94>)
 802cb86:	681b      	ldr	r3, [r3, #0]
 802cb88:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 802cb8c:	801a      	strh	r2, [r3, #0]
  ram_end->prev = MEM_SIZE_ALIGNED;
 802cb8e:	4b11      	ldr	r3, [pc, #68]	; (802cbd4 <mem_init+0x94>)
 802cb90:	681b      	ldr	r3, [r3, #0]
 802cb92:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 802cb96:	805a      	strh	r2, [r3, #2]
  MEM_SANITY();

  /* initialize the lowest-free pointer to the start of the heap */
  lfree = (struct mem *)(void *)ram;
 802cb98:	4b0d      	ldr	r3, [pc, #52]	; (802cbd0 <mem_init+0x90>)
 802cb9a:	681b      	ldr	r3, [r3, #0]
 802cb9c:	4a0e      	ldr	r2, [pc, #56]	; (802cbd8 <mem_init+0x98>)
 802cb9e:	6013      	str	r3, [r2, #0]

  MEM_STATS_AVAIL(avail, MEM_SIZE_ALIGNED);
 802cba0:	4b0e      	ldr	r3, [pc, #56]	; (802cbdc <mem_init+0x9c>)
 802cba2:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 802cba6:	f8a3 20aa 	strh.w	r2, [r3, #170]	; 0xaa

  if (sys_mutex_new(&mem_mutex) != ERR_OK) {
 802cbaa:	480d      	ldr	r0, [pc, #52]	; (802cbe0 <mem_init+0xa0>)
 802cbac:	f00b fc50 	bl	8038450 <sys_mutex_new>
 802cbb0:	4603      	mov	r3, r0
 802cbb2:	2b00      	cmp	r3, #0
 802cbb4:	d006      	beq.n	802cbc4 <mem_init+0x84>
    LWIP_ASSERT("failed to create mem_mutex", 0);
 802cbb6:	4b0b      	ldr	r3, [pc, #44]	; (802cbe4 <mem_init+0xa4>)
 802cbb8:	f240 221f 	movw	r2, #543	; 0x21f
 802cbbc:	490a      	ldr	r1, [pc, #40]	; (802cbe8 <mem_init+0xa8>)
 802cbbe:	480b      	ldr	r0, [pc, #44]	; (802cbec <mem_init+0xac>)
 802cbc0:	f00c fa52 	bl	8039068 <iprintf>
  }
}
 802cbc4:	bf00      	nop
 802cbc6:	3708      	adds	r7, #8
 802cbc8:	46bd      	mov	sp, r7
 802cbca:	bd80      	pop	{r7, pc}
 802cbcc:	2000b338 	.word	0x2000b338
 802cbd0:	2000b98c 	.word	0x2000b98c
 802cbd4:	2000b990 	.word	0x2000b990
 802cbd8:	2000b998 	.word	0x2000b998
 802cbdc:	2000ee04 	.word	0x2000ee04
 802cbe0:	2000b994 	.word	0x2000b994
 802cbe4:	0803aaac 	.word	0x0803aaac
 802cbe8:	0803ab80 	.word	0x0803ab80
 802cbec:	0803aaf4 	.word	0x0803aaf4

0802cbf0 <mem_link_valid>:
/* Check if a struct mem is correctly linked.
 * If not, double-free is a possible reason.
 */
static int
mem_link_valid(struct mem *mem)
{
 802cbf0:	b580      	push	{r7, lr}
 802cbf2:	b086      	sub	sp, #24
 802cbf4:	af00      	add	r7, sp, #0
 802cbf6:	6078      	str	r0, [r7, #4]
  struct mem *nmem, *pmem;
  mem_size_t rmem_idx;
  rmem_idx = mem_to_ptr(mem);
 802cbf8:	6878      	ldr	r0, [r7, #4]
 802cbfa:	f7ff feed 	bl	802c9d8 <mem_to_ptr>
 802cbfe:	4603      	mov	r3, r0
 802cc00:	82fb      	strh	r3, [r7, #22]
  nmem = ptr_to_mem(mem->next);
 802cc02:	687b      	ldr	r3, [r7, #4]
 802cc04:	881b      	ldrh	r3, [r3, #0]
 802cc06:	4618      	mov	r0, r3
 802cc08:	f7ff fed4 	bl	802c9b4 <ptr_to_mem>
 802cc0c:	6138      	str	r0, [r7, #16]
  pmem = ptr_to_mem(mem->prev);
 802cc0e:	687b      	ldr	r3, [r7, #4]
 802cc10:	885b      	ldrh	r3, [r3, #2]
 802cc12:	4618      	mov	r0, r3
 802cc14:	f7ff fece 	bl	802c9b4 <ptr_to_mem>
 802cc18:	60f8      	str	r0, [r7, #12]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 802cc1a:	687b      	ldr	r3, [r7, #4]
 802cc1c:	881b      	ldrh	r3, [r3, #0]
 802cc1e:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 802cc22:	d818      	bhi.n	802cc56 <mem_link_valid+0x66>
 802cc24:	687b      	ldr	r3, [r7, #4]
 802cc26:	885b      	ldrh	r3, [r3, #2]
 802cc28:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 802cc2c:	d813      	bhi.n	802cc56 <mem_link_valid+0x66>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 802cc2e:	687b      	ldr	r3, [r7, #4]
 802cc30:	885b      	ldrh	r3, [r3, #2]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 802cc32:	8afa      	ldrh	r2, [r7, #22]
 802cc34:	429a      	cmp	r2, r3
 802cc36:	d004      	beq.n	802cc42 <mem_link_valid+0x52>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 802cc38:	68fb      	ldr	r3, [r7, #12]
 802cc3a:	881b      	ldrh	r3, [r3, #0]
 802cc3c:	8afa      	ldrh	r2, [r7, #22]
 802cc3e:	429a      	cmp	r2, r3
 802cc40:	d109      	bne.n	802cc56 <mem_link_valid+0x66>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 802cc42:	4b08      	ldr	r3, [pc, #32]	; (802cc64 <mem_link_valid+0x74>)
 802cc44:	681b      	ldr	r3, [r3, #0]
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 802cc46:	693a      	ldr	r2, [r7, #16]
 802cc48:	429a      	cmp	r2, r3
 802cc4a:	d006      	beq.n	802cc5a <mem_link_valid+0x6a>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 802cc4c:	693b      	ldr	r3, [r7, #16]
 802cc4e:	885b      	ldrh	r3, [r3, #2]
 802cc50:	8afa      	ldrh	r2, [r7, #22]
 802cc52:	429a      	cmp	r2, r3
 802cc54:	d001      	beq.n	802cc5a <mem_link_valid+0x6a>
    return 0;
 802cc56:	2300      	movs	r3, #0
 802cc58:	e000      	b.n	802cc5c <mem_link_valid+0x6c>
  }
  return 1;
 802cc5a:	2301      	movs	r3, #1
}
 802cc5c:	4618      	mov	r0, r3
 802cc5e:	3718      	adds	r7, #24
 802cc60:	46bd      	mov	sp, r7
 802cc62:	bd80      	pop	{r7, pc}
 802cc64:	2000b990 	.word	0x2000b990

0802cc68 <mem_free>:
 * @param rmem is the data portion of a struct mem as returned by a previous
 *             call to mem_malloc()
 */
void
mem_free(void *rmem)
{
 802cc68:	b580      	push	{r7, lr}
 802cc6a:	b088      	sub	sp, #32
 802cc6c:	af00      	add	r7, sp, #0
 802cc6e:	6078      	str	r0, [r7, #4]
  struct mem *mem;
  LWIP_MEM_FREE_DECL_PROTECT();

  if (rmem == NULL) {
 802cc70:	687b      	ldr	r3, [r7, #4]
 802cc72:	2b00      	cmp	r3, #0
 802cc74:	f000 80a2 	beq.w	802cdbc <mem_free+0x154>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("mem_free(p == NULL) was called.\n"));
    return;
  }
  if ((((mem_ptr_t)rmem) & (MEM_ALIGNMENT - 1)) != 0) {
 802cc78:	687b      	ldr	r3, [r7, #4]
 802cc7a:	f003 0303 	and.w	r3, r3, #3
 802cc7e:	2b00      	cmp	r3, #0
 802cc80:	d015      	beq.n	802ccae <mem_free+0x46>
    LWIP_MEM_ILLEGAL_FREE("mem_free: sanity check alignment");
 802cc82:	4b50      	ldr	r3, [pc, #320]	; (802cdc4 <mem_free+0x15c>)
 802cc84:	f240 2273 	movw	r2, #627	; 0x273
 802cc88:	494f      	ldr	r1, [pc, #316]	; (802cdc8 <mem_free+0x160>)
 802cc8a:	4850      	ldr	r0, [pc, #320]	; (802cdcc <mem_free+0x164>)
 802cc8c:	f00c f9ec 	bl	8039068 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: sanity check alignment\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 802cc90:	f00b fc5c 	bl	803854c <sys_arch_protect>
 802cc94:	60f8      	str	r0, [r7, #12]
 802cc96:	4b4e      	ldr	r3, [pc, #312]	; (802cdd0 <mem_free+0x168>)
 802cc98:	f8b3 30b0 	ldrh.w	r3, [r3, #176]	; 0xb0
 802cc9c:	3301      	adds	r3, #1
 802cc9e:	b29a      	uxth	r2, r3
 802cca0:	4b4b      	ldr	r3, [pc, #300]	; (802cdd0 <mem_free+0x168>)
 802cca2:	f8a3 20b0 	strh.w	r2, [r3, #176]	; 0xb0
 802cca6:	68f8      	ldr	r0, [r7, #12]
 802cca8:	f00b fc5e 	bl	8038568 <sys_arch_unprotect>
    return;
 802ccac:	e087      	b.n	802cdbe <mem_free+0x156>
  }

  /* Get the corresponding struct mem: */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 802ccae:	687b      	ldr	r3, [r7, #4]
 802ccb0:	3b08      	subs	r3, #8
 802ccb2:	61fb      	str	r3, [r7, #28]

  if ((u8_t *)mem < ram || (u8_t *)rmem + MIN_SIZE_ALIGNED > (u8_t *)ram_end) {
 802ccb4:	4b47      	ldr	r3, [pc, #284]	; (802cdd4 <mem_free+0x16c>)
 802ccb6:	681b      	ldr	r3, [r3, #0]
 802ccb8:	69fa      	ldr	r2, [r7, #28]
 802ccba:	429a      	cmp	r2, r3
 802ccbc:	d306      	bcc.n	802cccc <mem_free+0x64>
 802ccbe:	687b      	ldr	r3, [r7, #4]
 802ccc0:	f103 020c 	add.w	r2, r3, #12
 802ccc4:	4b44      	ldr	r3, [pc, #272]	; (802cdd8 <mem_free+0x170>)
 802ccc6:	681b      	ldr	r3, [r3, #0]
 802ccc8:	429a      	cmp	r2, r3
 802ccca:	d915      	bls.n	802ccf8 <mem_free+0x90>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory");
 802cccc:	4b3d      	ldr	r3, [pc, #244]	; (802cdc4 <mem_free+0x15c>)
 802ccce:	f240 227f 	movw	r2, #639	; 0x27f
 802ccd2:	4942      	ldr	r1, [pc, #264]	; (802cddc <mem_free+0x174>)
 802ccd4:	483d      	ldr	r0, [pc, #244]	; (802cdcc <mem_free+0x164>)
 802ccd6:	f00c f9c7 	bl	8039068 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 802ccda:	f00b fc37 	bl	803854c <sys_arch_protect>
 802ccde:	6138      	str	r0, [r7, #16]
 802cce0:	4b3b      	ldr	r3, [pc, #236]	; (802cdd0 <mem_free+0x168>)
 802cce2:	f8b3 30b0 	ldrh.w	r3, [r3, #176]	; 0xb0
 802cce6:	3301      	adds	r3, #1
 802cce8:	b29a      	uxth	r2, r3
 802ccea:	4b39      	ldr	r3, [pc, #228]	; (802cdd0 <mem_free+0x168>)
 802ccec:	f8a3 20b0 	strh.w	r2, [r3, #176]	; 0xb0
 802ccf0:	6938      	ldr	r0, [r7, #16]
 802ccf2:	f00b fc39 	bl	8038568 <sys_arch_unprotect>
    return;
 802ccf6:	e062      	b.n	802cdbe <mem_free+0x156>
  }
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
 802ccf8:	4839      	ldr	r0, [pc, #228]	; (802cde0 <mem_free+0x178>)
 802ccfa:	f00b fbe5 	bl	80384c8 <sys_mutex_lock>
  /* mem has to be in a used state */
  if (!mem->used) {
 802ccfe:	69fb      	ldr	r3, [r7, #28]
 802cd00:	791b      	ldrb	r3, [r3, #4]
 802cd02:	2b00      	cmp	r3, #0
 802cd04:	d118      	bne.n	802cd38 <mem_free+0xd0>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: double free");
 802cd06:	4b2f      	ldr	r3, [pc, #188]	; (802cdc4 <mem_free+0x15c>)
 802cd08:	f44f 7223 	mov.w	r2, #652	; 0x28c
 802cd0c:	4935      	ldr	r1, [pc, #212]	; (802cde4 <mem_free+0x17c>)
 802cd0e:	482f      	ldr	r0, [pc, #188]	; (802cdcc <mem_free+0x164>)
 802cd10:	f00c f9aa 	bl	8039068 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
 802cd14:	4832      	ldr	r0, [pc, #200]	; (802cde0 <mem_free+0x178>)
 802cd16:	f00b fbe6 	bl	80384e6 <sys_mutex_unlock>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 802cd1a:	f00b fc17 	bl	803854c <sys_arch_protect>
 802cd1e:	6178      	str	r0, [r7, #20]
 802cd20:	4b2b      	ldr	r3, [pc, #172]	; (802cdd0 <mem_free+0x168>)
 802cd22:	f8b3 30b0 	ldrh.w	r3, [r3, #176]	; 0xb0
 802cd26:	3301      	adds	r3, #1
 802cd28:	b29a      	uxth	r2, r3
 802cd2a:	4b29      	ldr	r3, [pc, #164]	; (802cdd0 <mem_free+0x168>)
 802cd2c:	f8a3 20b0 	strh.w	r2, [r3, #176]	; 0xb0
 802cd30:	6978      	ldr	r0, [r7, #20]
 802cd32:	f00b fc19 	bl	8038568 <sys_arch_unprotect>
    return;
 802cd36:	e042      	b.n	802cdbe <mem_free+0x156>
  }

  if (!mem_link_valid(mem)) {
 802cd38:	69f8      	ldr	r0, [r7, #28]
 802cd3a:	f7ff ff59 	bl	802cbf0 <mem_link_valid>
 802cd3e:	4603      	mov	r3, r0
 802cd40:	2b00      	cmp	r3, #0
 802cd42:	d118      	bne.n	802cd76 <mem_free+0x10e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: non-linked: double free");
 802cd44:	4b1f      	ldr	r3, [pc, #124]	; (802cdc4 <mem_free+0x15c>)
 802cd46:	f240 2295 	movw	r2, #661	; 0x295
 802cd4a:	4927      	ldr	r1, [pc, #156]	; (802cde8 <mem_free+0x180>)
 802cd4c:	481f      	ldr	r0, [pc, #124]	; (802cdcc <mem_free+0x164>)
 802cd4e:	f00c f98b 	bl	8039068 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
 802cd52:	4823      	ldr	r0, [pc, #140]	; (802cde0 <mem_free+0x178>)
 802cd54:	f00b fbc7 	bl	80384e6 <sys_mutex_unlock>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: non-linked: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 802cd58:	f00b fbf8 	bl	803854c <sys_arch_protect>
 802cd5c:	61b8      	str	r0, [r7, #24]
 802cd5e:	4b1c      	ldr	r3, [pc, #112]	; (802cdd0 <mem_free+0x168>)
 802cd60:	f8b3 30b0 	ldrh.w	r3, [r3, #176]	; 0xb0
 802cd64:	3301      	adds	r3, #1
 802cd66:	b29a      	uxth	r2, r3
 802cd68:	4b19      	ldr	r3, [pc, #100]	; (802cdd0 <mem_free+0x168>)
 802cd6a:	f8a3 20b0 	strh.w	r2, [r3, #176]	; 0xb0
 802cd6e:	69b8      	ldr	r0, [r7, #24]
 802cd70:	f00b fbfa 	bl	8038568 <sys_arch_unprotect>
    return;
 802cd74:	e023      	b.n	802cdbe <mem_free+0x156>
  }

  /* mem is now unused. */
  mem->used = 0;
 802cd76:	69fb      	ldr	r3, [r7, #28]
 802cd78:	2200      	movs	r2, #0
 802cd7a:	711a      	strb	r2, [r3, #4]

  if (mem < lfree) {
 802cd7c:	4b1b      	ldr	r3, [pc, #108]	; (802cdec <mem_free+0x184>)
 802cd7e:	681b      	ldr	r3, [r3, #0]
 802cd80:	69fa      	ldr	r2, [r7, #28]
 802cd82:	429a      	cmp	r2, r3
 802cd84:	d202      	bcs.n	802cd8c <mem_free+0x124>
    /* the newly freed struct is now the lowest */
    lfree = mem;
 802cd86:	4a19      	ldr	r2, [pc, #100]	; (802cdec <mem_free+0x184>)
 802cd88:	69fb      	ldr	r3, [r7, #28]
 802cd8a:	6013      	str	r3, [r2, #0]
  }

  MEM_STATS_DEC_USED(used, mem->next - (mem_size_t)(((u8_t *)mem - ram)));
 802cd8c:	4b10      	ldr	r3, [pc, #64]	; (802cdd0 <mem_free+0x168>)
 802cd8e:	f8b3 20ac 	ldrh.w	r2, [r3, #172]	; 0xac
 802cd92:	4b10      	ldr	r3, [pc, #64]	; (802cdd4 <mem_free+0x16c>)
 802cd94:	681b      	ldr	r3, [r3, #0]
 802cd96:	69f9      	ldr	r1, [r7, #28]
 802cd98:	1acb      	subs	r3, r1, r3
 802cd9a:	b299      	uxth	r1, r3
 802cd9c:	69fb      	ldr	r3, [r7, #28]
 802cd9e:	881b      	ldrh	r3, [r3, #0]
 802cda0:	1acb      	subs	r3, r1, r3
 802cda2:	b29b      	uxth	r3, r3
 802cda4:	4413      	add	r3, r2
 802cda6:	b29a      	uxth	r2, r3
 802cda8:	4b09      	ldr	r3, [pc, #36]	; (802cdd0 <mem_free+0x168>)
 802cdaa:	f8a3 20ac 	strh.w	r2, [r3, #172]	; 0xac

  /* finally, see if prev or next are free also */
  plug_holes(mem);
 802cdae:	69f8      	ldr	r0, [r7, #28]
 802cdb0:	f7ff fe24 	bl	802c9fc <plug_holes>
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
 802cdb4:	480a      	ldr	r0, [pc, #40]	; (802cde0 <mem_free+0x178>)
 802cdb6:	f00b fb96 	bl	80384e6 <sys_mutex_unlock>
 802cdba:	e000      	b.n	802cdbe <mem_free+0x156>
    return;
 802cdbc:	bf00      	nop
}
 802cdbe:	3720      	adds	r7, #32
 802cdc0:	46bd      	mov	sp, r7
 802cdc2:	bd80      	pop	{r7, pc}
 802cdc4:	0803aaac 	.word	0x0803aaac
 802cdc8:	0803ab9c 	.word	0x0803ab9c
 802cdcc:	0803aaf4 	.word	0x0803aaf4
 802cdd0:	2000ee04 	.word	0x2000ee04
 802cdd4:	2000b98c 	.word	0x2000b98c
 802cdd8:	2000b990 	.word	0x2000b990
 802cddc:	0803abc0 	.word	0x0803abc0
 802cde0:	2000b994 	.word	0x2000b994
 802cde4:	0803abdc 	.word	0x0803abdc
 802cde8:	0803ac04 	.word	0x0803ac04
 802cdec:	2000b998 	.word	0x2000b998

0802cdf0 <mem_trim>:
 *         or NULL if newsize is > old size, in which case rmem is NOT touched
 *         or freed!
 */
void *
mem_trim(void *rmem, mem_size_t new_size)
{
 802cdf0:	b580      	push	{r7, lr}
 802cdf2:	b088      	sub	sp, #32
 802cdf4:	af00      	add	r7, sp, #0
 802cdf6:	6078      	str	r0, [r7, #4]
 802cdf8:	460b      	mov	r3, r1
 802cdfa:	807b      	strh	r3, [r7, #2]
  /* use the FREE_PROTECT here: it protects with sem OR SYS_ARCH_PROTECT */
  LWIP_MEM_FREE_DECL_PROTECT();

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  newsize = (mem_size_t)LWIP_MEM_ALIGN_SIZE(new_size);
 802cdfc:	887b      	ldrh	r3, [r7, #2]
 802cdfe:	3303      	adds	r3, #3
 802ce00:	b29b      	uxth	r3, r3
 802ce02:	f023 0303 	bic.w	r3, r3, #3
 802ce06:	83fb      	strh	r3, [r7, #30]
  if (newsize < MIN_SIZE_ALIGNED) {
 802ce08:	8bfb      	ldrh	r3, [r7, #30]
 802ce0a:	2b0b      	cmp	r3, #11
 802ce0c:	d801      	bhi.n	802ce12 <mem_trim+0x22>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    newsize = MIN_SIZE_ALIGNED;
 802ce0e:	230c      	movs	r3, #12
 802ce10:	83fb      	strh	r3, [r7, #30]
  }
#if MEM_OVERFLOW_CHECK
  newsize += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((newsize > MEM_SIZE_ALIGNED) || (newsize < new_size)) {
 802ce12:	8bfb      	ldrh	r3, [r7, #30]
 802ce14:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 802ce18:	d803      	bhi.n	802ce22 <mem_trim+0x32>
 802ce1a:	8bfa      	ldrh	r2, [r7, #30]
 802ce1c:	887b      	ldrh	r3, [r7, #2]
 802ce1e:	429a      	cmp	r2, r3
 802ce20:	d201      	bcs.n	802ce26 <mem_trim+0x36>
    return NULL;
 802ce22:	2300      	movs	r3, #0
 802ce24:	e0f8      	b.n	802d018 <mem_trim+0x228>
  }

  LWIP_ASSERT("mem_trim: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
 802ce26:	4b7e      	ldr	r3, [pc, #504]	; (802d020 <mem_trim+0x230>)
 802ce28:	681b      	ldr	r3, [r3, #0]
 802ce2a:	687a      	ldr	r2, [r7, #4]
 802ce2c:	429a      	cmp	r2, r3
 802ce2e:	d304      	bcc.n	802ce3a <mem_trim+0x4a>
 802ce30:	4b7c      	ldr	r3, [pc, #496]	; (802d024 <mem_trim+0x234>)
 802ce32:	681b      	ldr	r3, [r3, #0]
 802ce34:	687a      	ldr	r2, [r7, #4]
 802ce36:	429a      	cmp	r2, r3
 802ce38:	d306      	bcc.n	802ce48 <mem_trim+0x58>
 802ce3a:	4b7b      	ldr	r3, [pc, #492]	; (802d028 <mem_trim+0x238>)
 802ce3c:	f240 22d1 	movw	r2, #721	; 0x2d1
 802ce40:	497a      	ldr	r1, [pc, #488]	; (802d02c <mem_trim+0x23c>)
 802ce42:	487b      	ldr	r0, [pc, #492]	; (802d030 <mem_trim+0x240>)
 802ce44:	f00c f910 	bl	8039068 <iprintf>
              (u8_t *)rmem < (u8_t *)ram_end);

  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
 802ce48:	4b75      	ldr	r3, [pc, #468]	; (802d020 <mem_trim+0x230>)
 802ce4a:	681b      	ldr	r3, [r3, #0]
 802ce4c:	687a      	ldr	r2, [r7, #4]
 802ce4e:	429a      	cmp	r2, r3
 802ce50:	d304      	bcc.n	802ce5c <mem_trim+0x6c>
 802ce52:	4b74      	ldr	r3, [pc, #464]	; (802d024 <mem_trim+0x234>)
 802ce54:	681b      	ldr	r3, [r3, #0]
 802ce56:	687a      	ldr	r2, [r7, #4]
 802ce58:	429a      	cmp	r2, r3
 802ce5a:	d30f      	bcc.n	802ce7c <mem_trim+0x8c>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_trim: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 802ce5c:	f00b fb76 	bl	803854c <sys_arch_protect>
 802ce60:	60b8      	str	r0, [r7, #8]
 802ce62:	4b74      	ldr	r3, [pc, #464]	; (802d034 <mem_trim+0x244>)
 802ce64:	f8b3 30b0 	ldrh.w	r3, [r3, #176]	; 0xb0
 802ce68:	3301      	adds	r3, #1
 802ce6a:	b29a      	uxth	r2, r3
 802ce6c:	4b71      	ldr	r3, [pc, #452]	; (802d034 <mem_trim+0x244>)
 802ce6e:	f8a3 20b0 	strh.w	r2, [r3, #176]	; 0xb0
 802ce72:	68b8      	ldr	r0, [r7, #8]
 802ce74:	f00b fb78 	bl	8038568 <sys_arch_unprotect>
    return rmem;
 802ce78:	687b      	ldr	r3, [r7, #4]
 802ce7a:	e0cd      	b.n	802d018 <mem_trim+0x228>
  }
  /* Get the corresponding struct mem ... */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 802ce7c:	687b      	ldr	r3, [r7, #4]
 802ce7e:	3b08      	subs	r3, #8
 802ce80:	61bb      	str	r3, [r7, #24]
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* ... and its offset pointer */
  ptr = mem_to_ptr(mem);
 802ce82:	69b8      	ldr	r0, [r7, #24]
 802ce84:	f7ff fda8 	bl	802c9d8 <mem_to_ptr>
 802ce88:	4603      	mov	r3, r0
 802ce8a:	82fb      	strh	r3, [r7, #22]

  size = (mem_size_t)((mem_size_t)(mem->next - ptr) - (SIZEOF_STRUCT_MEM + MEM_SANITY_OVERHEAD));
 802ce8c:	69bb      	ldr	r3, [r7, #24]
 802ce8e:	881a      	ldrh	r2, [r3, #0]
 802ce90:	8afb      	ldrh	r3, [r7, #22]
 802ce92:	1ad3      	subs	r3, r2, r3
 802ce94:	b29b      	uxth	r3, r3
 802ce96:	3b08      	subs	r3, #8
 802ce98:	82bb      	strh	r3, [r7, #20]
  LWIP_ASSERT("mem_trim can only shrink memory", newsize <= size);
 802ce9a:	8bfa      	ldrh	r2, [r7, #30]
 802ce9c:	8abb      	ldrh	r3, [r7, #20]
 802ce9e:	429a      	cmp	r2, r3
 802cea0:	d906      	bls.n	802ceb0 <mem_trim+0xc0>
 802cea2:	4b61      	ldr	r3, [pc, #388]	; (802d028 <mem_trim+0x238>)
 802cea4:	f44f 7239 	mov.w	r2, #740	; 0x2e4
 802cea8:	4963      	ldr	r1, [pc, #396]	; (802d038 <mem_trim+0x248>)
 802ceaa:	4861      	ldr	r0, [pc, #388]	; (802d030 <mem_trim+0x240>)
 802ceac:	f00c f8dc 	bl	8039068 <iprintf>
  if (newsize > size) {
 802ceb0:	8bfa      	ldrh	r2, [r7, #30]
 802ceb2:	8abb      	ldrh	r3, [r7, #20]
 802ceb4:	429a      	cmp	r2, r3
 802ceb6:	d901      	bls.n	802cebc <mem_trim+0xcc>
    /* not supported */
    return NULL;
 802ceb8:	2300      	movs	r3, #0
 802ceba:	e0ad      	b.n	802d018 <mem_trim+0x228>
  }
  if (newsize == size) {
 802cebc:	8bfa      	ldrh	r2, [r7, #30]
 802cebe:	8abb      	ldrh	r3, [r7, #20]
 802cec0:	429a      	cmp	r2, r3
 802cec2:	d101      	bne.n	802cec8 <mem_trim+0xd8>
    /* No change in size, simply return */
    return rmem;
 802cec4:	687b      	ldr	r3, [r7, #4]
 802cec6:	e0a7      	b.n	802d018 <mem_trim+0x228>
  }

  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
 802cec8:	485c      	ldr	r0, [pc, #368]	; (802d03c <mem_trim+0x24c>)
 802ceca:	f00b fafd 	bl	80384c8 <sys_mutex_lock>

  mem2 = ptr_to_mem(mem->next);
 802cece:	69bb      	ldr	r3, [r7, #24]
 802ced0:	881b      	ldrh	r3, [r3, #0]
 802ced2:	4618      	mov	r0, r3
 802ced4:	f7ff fd6e 	bl	802c9b4 <ptr_to_mem>
 802ced8:	6138      	str	r0, [r7, #16]
  if (mem2->used == 0) {
 802ceda:	693b      	ldr	r3, [r7, #16]
 802cedc:	791b      	ldrb	r3, [r3, #4]
 802cede:	2b00      	cmp	r3, #0
 802cee0:	d14b      	bne.n	802cf7a <mem_trim+0x18a>
    /* The next struct is unused, we can simply move it at little */
    mem_size_t next;
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 802cee2:	69bb      	ldr	r3, [r7, #24]
 802cee4:	881b      	ldrh	r3, [r3, #0]
 802cee6:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 802ceea:	d106      	bne.n	802cefa <mem_trim+0x10a>
 802ceec:	4b4e      	ldr	r3, [pc, #312]	; (802d028 <mem_trim+0x238>)
 802ceee:	f240 22f5 	movw	r2, #757	; 0x2f5
 802cef2:	4953      	ldr	r1, [pc, #332]	; (802d040 <mem_trim+0x250>)
 802cef4:	484e      	ldr	r0, [pc, #312]	; (802d030 <mem_trim+0x240>)
 802cef6:	f00c f8b7 	bl	8039068 <iprintf>
    /* remember the old next pointer */
    next = mem2->next;
 802cefa:	693b      	ldr	r3, [r7, #16]
 802cefc:	881b      	ldrh	r3, [r3, #0]
 802cefe:	81bb      	strh	r3, [r7, #12]
    /* create new struct mem which is moved directly after the shrinked mem */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 802cf00:	8afa      	ldrh	r2, [r7, #22]
 802cf02:	8bfb      	ldrh	r3, [r7, #30]
 802cf04:	4413      	add	r3, r2
 802cf06:	b29b      	uxth	r3, r3
 802cf08:	3308      	adds	r3, #8
 802cf0a:	81fb      	strh	r3, [r7, #14]
    if (lfree == mem2) {
 802cf0c:	4b4d      	ldr	r3, [pc, #308]	; (802d044 <mem_trim+0x254>)
 802cf0e:	681b      	ldr	r3, [r3, #0]
 802cf10:	693a      	ldr	r2, [r7, #16]
 802cf12:	429a      	cmp	r2, r3
 802cf14:	d106      	bne.n	802cf24 <mem_trim+0x134>
      lfree = ptr_to_mem(ptr2);
 802cf16:	89fb      	ldrh	r3, [r7, #14]
 802cf18:	4618      	mov	r0, r3
 802cf1a:	f7ff fd4b 	bl	802c9b4 <ptr_to_mem>
 802cf1e:	4603      	mov	r3, r0
 802cf20:	4a48      	ldr	r2, [pc, #288]	; (802d044 <mem_trim+0x254>)
 802cf22:	6013      	str	r3, [r2, #0]
    }
    mem2 = ptr_to_mem(ptr2);
 802cf24:	89fb      	ldrh	r3, [r7, #14]
 802cf26:	4618      	mov	r0, r3
 802cf28:	f7ff fd44 	bl	802c9b4 <ptr_to_mem>
 802cf2c:	6138      	str	r0, [r7, #16]
    mem2->used = 0;
 802cf2e:	693b      	ldr	r3, [r7, #16]
 802cf30:	2200      	movs	r2, #0
 802cf32:	711a      	strb	r2, [r3, #4]
    /* restore the next pointer */
    mem2->next = next;
 802cf34:	693b      	ldr	r3, [r7, #16]
 802cf36:	89ba      	ldrh	r2, [r7, #12]
 802cf38:	801a      	strh	r2, [r3, #0]
    /* link it back to mem */
    mem2->prev = ptr;
 802cf3a:	693b      	ldr	r3, [r7, #16]
 802cf3c:	8afa      	ldrh	r2, [r7, #22]
 802cf3e:	805a      	strh	r2, [r3, #2]
    /* link mem to it */
    mem->next = ptr2;
 802cf40:	69bb      	ldr	r3, [r7, #24]
 802cf42:	89fa      	ldrh	r2, [r7, #14]
 802cf44:	801a      	strh	r2, [r3, #0]
    /* last thing to restore linked list: as we have moved mem2,
     * let 'mem2->next->prev' point to mem2 again. but only if mem2->next is not
     * the end of the heap */
    if (mem2->next != MEM_SIZE_ALIGNED) {
 802cf46:	693b      	ldr	r3, [r7, #16]
 802cf48:	881b      	ldrh	r3, [r3, #0]
 802cf4a:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 802cf4e:	d007      	beq.n	802cf60 <mem_trim+0x170>
      ptr_to_mem(mem2->next)->prev = ptr2;
 802cf50:	693b      	ldr	r3, [r7, #16]
 802cf52:	881b      	ldrh	r3, [r3, #0]
 802cf54:	4618      	mov	r0, r3
 802cf56:	f7ff fd2d 	bl	802c9b4 <ptr_to_mem>
 802cf5a:	4602      	mov	r2, r0
 802cf5c:	89fb      	ldrh	r3, [r7, #14]
 802cf5e:	8053      	strh	r3, [r2, #2]
    }
    MEM_STATS_DEC_USED(used, (size - newsize));
 802cf60:	4b34      	ldr	r3, [pc, #208]	; (802d034 <mem_trim+0x244>)
 802cf62:	f8b3 20ac 	ldrh.w	r2, [r3, #172]	; 0xac
 802cf66:	8bf9      	ldrh	r1, [r7, #30]
 802cf68:	8abb      	ldrh	r3, [r7, #20]
 802cf6a:	1acb      	subs	r3, r1, r3
 802cf6c:	b29b      	uxth	r3, r3
 802cf6e:	4413      	add	r3, r2
 802cf70:	b29a      	uxth	r2, r3
 802cf72:	4b30      	ldr	r3, [pc, #192]	; (802d034 <mem_trim+0x244>)
 802cf74:	f8a3 20ac 	strh.w	r2, [r3, #172]	; 0xac
 802cf78:	e04a      	b.n	802d010 <mem_trim+0x220>
    /* no need to plug holes, we've already done that */
  } else if (newsize + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED <= size) {
 802cf7a:	8bfb      	ldrh	r3, [r7, #30]
 802cf7c:	f103 0214 	add.w	r2, r3, #20
 802cf80:	8abb      	ldrh	r3, [r7, #20]
 802cf82:	429a      	cmp	r2, r3
 802cf84:	d844      	bhi.n	802d010 <mem_trim+0x220>
     * Old size ('size') must be big enough to contain at least 'newsize' plus a struct mem
     * ('SIZEOF_STRUCT_MEM') with some data ('MIN_SIZE_ALIGNED').
     * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
     *       region that couldn't hold data, but when mem->next gets freed,
     *       the 2 regions would be combined, resulting in more free memory */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 802cf86:	8afa      	ldrh	r2, [r7, #22]
 802cf88:	8bfb      	ldrh	r3, [r7, #30]
 802cf8a:	4413      	add	r3, r2
 802cf8c:	b29b      	uxth	r3, r3
 802cf8e:	3308      	adds	r3, #8
 802cf90:	81fb      	strh	r3, [r7, #14]
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 802cf92:	69bb      	ldr	r3, [r7, #24]
 802cf94:	881b      	ldrh	r3, [r3, #0]
 802cf96:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 802cf9a:	d106      	bne.n	802cfaa <mem_trim+0x1ba>
 802cf9c:	4b22      	ldr	r3, [pc, #136]	; (802d028 <mem_trim+0x238>)
 802cf9e:	f240 3216 	movw	r2, #790	; 0x316
 802cfa2:	4927      	ldr	r1, [pc, #156]	; (802d040 <mem_trim+0x250>)
 802cfa4:	4822      	ldr	r0, [pc, #136]	; (802d030 <mem_trim+0x240>)
 802cfa6:	f00c f85f 	bl	8039068 <iprintf>
    mem2 = ptr_to_mem(ptr2);
 802cfaa:	89fb      	ldrh	r3, [r7, #14]
 802cfac:	4618      	mov	r0, r3
 802cfae:	f7ff fd01 	bl	802c9b4 <ptr_to_mem>
 802cfb2:	6138      	str	r0, [r7, #16]
    if (mem2 < lfree) {
 802cfb4:	4b23      	ldr	r3, [pc, #140]	; (802d044 <mem_trim+0x254>)
 802cfb6:	681b      	ldr	r3, [r3, #0]
 802cfb8:	693a      	ldr	r2, [r7, #16]
 802cfba:	429a      	cmp	r2, r3
 802cfbc:	d202      	bcs.n	802cfc4 <mem_trim+0x1d4>
      lfree = mem2;
 802cfbe:	4a21      	ldr	r2, [pc, #132]	; (802d044 <mem_trim+0x254>)
 802cfc0:	693b      	ldr	r3, [r7, #16]
 802cfc2:	6013      	str	r3, [r2, #0]
    }
    mem2->used = 0;
 802cfc4:	693b      	ldr	r3, [r7, #16]
 802cfc6:	2200      	movs	r2, #0
 802cfc8:	711a      	strb	r2, [r3, #4]
    mem2->next = mem->next;
 802cfca:	69bb      	ldr	r3, [r7, #24]
 802cfcc:	881a      	ldrh	r2, [r3, #0]
 802cfce:	693b      	ldr	r3, [r7, #16]
 802cfd0:	801a      	strh	r2, [r3, #0]
    mem2->prev = ptr;
 802cfd2:	693b      	ldr	r3, [r7, #16]
 802cfd4:	8afa      	ldrh	r2, [r7, #22]
 802cfd6:	805a      	strh	r2, [r3, #2]
    mem->next = ptr2;
 802cfd8:	69bb      	ldr	r3, [r7, #24]
 802cfda:	89fa      	ldrh	r2, [r7, #14]
 802cfdc:	801a      	strh	r2, [r3, #0]
    if (mem2->next != MEM_SIZE_ALIGNED) {
 802cfde:	693b      	ldr	r3, [r7, #16]
 802cfe0:	881b      	ldrh	r3, [r3, #0]
 802cfe2:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 802cfe6:	d007      	beq.n	802cff8 <mem_trim+0x208>
      ptr_to_mem(mem2->next)->prev = ptr2;
 802cfe8:	693b      	ldr	r3, [r7, #16]
 802cfea:	881b      	ldrh	r3, [r3, #0]
 802cfec:	4618      	mov	r0, r3
 802cfee:	f7ff fce1 	bl	802c9b4 <ptr_to_mem>
 802cff2:	4602      	mov	r2, r0
 802cff4:	89fb      	ldrh	r3, [r7, #14]
 802cff6:	8053      	strh	r3, [r2, #2]
    }
    MEM_STATS_DEC_USED(used, (size - newsize));
 802cff8:	4b0e      	ldr	r3, [pc, #56]	; (802d034 <mem_trim+0x244>)
 802cffa:	f8b3 20ac 	ldrh.w	r2, [r3, #172]	; 0xac
 802cffe:	8bf9      	ldrh	r1, [r7, #30]
 802d000:	8abb      	ldrh	r3, [r7, #20]
 802d002:	1acb      	subs	r3, r1, r3
 802d004:	b29b      	uxth	r3, r3
 802d006:	4413      	add	r3, r2
 802d008:	b29a      	uxth	r2, r3
 802d00a:	4b0a      	ldr	r3, [pc, #40]	; (802d034 <mem_trim+0x244>)
 802d00c:	f8a3 20ac 	strh.w	r2, [r3, #172]	; 0xac
#endif
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
 802d010:	480a      	ldr	r0, [pc, #40]	; (802d03c <mem_trim+0x24c>)
 802d012:	f00b fa68 	bl	80384e6 <sys_mutex_unlock>
  return rmem;
 802d016:	687b      	ldr	r3, [r7, #4]
}
 802d018:	4618      	mov	r0, r3
 802d01a:	3720      	adds	r7, #32
 802d01c:	46bd      	mov	sp, r7
 802d01e:	bd80      	pop	{r7, pc}
 802d020:	2000b98c 	.word	0x2000b98c
 802d024:	2000b990 	.word	0x2000b990
 802d028:	0803aaac 	.word	0x0803aaac
 802d02c:	0803ac38 	.word	0x0803ac38
 802d030:	0803aaf4 	.word	0x0803aaf4
 802d034:	2000ee04 	.word	0x2000ee04
 802d038:	0803ac50 	.word	0x0803ac50
 802d03c:	2000b994 	.word	0x2000b994
 802d040:	0803ac70 	.word	0x0803ac70
 802d044:	2000b998 	.word	0x2000b998

0802d048 <mem_malloc>:
 *
 * Note that the returned value will always be aligned (as defined by MEM_ALIGNMENT).
 */
void *
mem_malloc(mem_size_t size_in)
{
 802d048:	b590      	push	{r4, r7, lr}
 802d04a:	b089      	sub	sp, #36	; 0x24
 802d04c:	af00      	add	r7, sp, #0
 802d04e:	4603      	mov	r3, r0
 802d050:	80fb      	strh	r3, [r7, #6]
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  u8_t local_mem_free_count = 0;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_ALLOC_DECL_PROTECT();

  if (size_in == 0) {
 802d052:	88fb      	ldrh	r3, [r7, #6]
 802d054:	2b00      	cmp	r3, #0
 802d056:	d101      	bne.n	802d05c <mem_malloc+0x14>
    return NULL;
 802d058:	2300      	movs	r3, #0
 802d05a:	e121      	b.n	802d2a0 <mem_malloc+0x258>
  }

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  size = (mem_size_t)LWIP_MEM_ALIGN_SIZE(size_in);
 802d05c:	88fb      	ldrh	r3, [r7, #6]
 802d05e:	3303      	adds	r3, #3
 802d060:	b29b      	uxth	r3, r3
 802d062:	f023 0303 	bic.w	r3, r3, #3
 802d066:	83bb      	strh	r3, [r7, #28]
  if (size < MIN_SIZE_ALIGNED) {
 802d068:	8bbb      	ldrh	r3, [r7, #28]
 802d06a:	2b0b      	cmp	r3, #11
 802d06c:	d801      	bhi.n	802d072 <mem_malloc+0x2a>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    size = MIN_SIZE_ALIGNED;
 802d06e:	230c      	movs	r3, #12
 802d070:	83bb      	strh	r3, [r7, #28]
  }
#if MEM_OVERFLOW_CHECK
  size += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((size > MEM_SIZE_ALIGNED) || (size < size_in)) {
 802d072:	8bbb      	ldrh	r3, [r7, #28]
 802d074:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 802d078:	d803      	bhi.n	802d082 <mem_malloc+0x3a>
 802d07a:	8bba      	ldrh	r2, [r7, #28]
 802d07c:	88fb      	ldrh	r3, [r7, #6]
 802d07e:	429a      	cmp	r2, r3
 802d080:	d201      	bcs.n	802d086 <mem_malloc+0x3e>
    return NULL;
 802d082:	2300      	movs	r3, #0
 802d084:	e10c      	b.n	802d2a0 <mem_malloc+0x258>
  }

  /* protect the heap from concurrent access */
  sys_mutex_lock(&mem_mutex);
 802d086:	4888      	ldr	r0, [pc, #544]	; (802d2a8 <mem_malloc+0x260>)
 802d088:	f00b fa1e 	bl	80384c8 <sys_mutex_lock>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

    /* Scan through the heap searching for a free block that is big enough,
     * beginning with the lowest free block.
     */
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 802d08c:	4b87      	ldr	r3, [pc, #540]	; (802d2ac <mem_malloc+0x264>)
 802d08e:	681b      	ldr	r3, [r3, #0]
 802d090:	4618      	mov	r0, r3
 802d092:	f7ff fca1 	bl	802c9d8 <mem_to_ptr>
 802d096:	4603      	mov	r3, r0
 802d098:	83fb      	strh	r3, [r7, #30]
 802d09a:	e0ee      	b.n	802d27a <mem_malloc+0x232>
         ptr = ptr_to_mem(ptr)->next) {
      mem = ptr_to_mem(ptr);
 802d09c:	8bfb      	ldrh	r3, [r7, #30]
 802d09e:	4618      	mov	r0, r3
 802d0a0:	f7ff fc88 	bl	802c9b4 <ptr_to_mem>
 802d0a4:	6178      	str	r0, [r7, #20]
        local_mem_free_count = 1;
        break;
      }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

      if ((!mem->used) &&
 802d0a6:	697b      	ldr	r3, [r7, #20]
 802d0a8:	791b      	ldrb	r3, [r3, #4]
 802d0aa:	2b00      	cmp	r3, #0
 802d0ac:	f040 80de 	bne.w	802d26c <mem_malloc+0x224>
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
 802d0b0:	697b      	ldr	r3, [r7, #20]
 802d0b2:	881b      	ldrh	r3, [r3, #0]
 802d0b4:	461a      	mov	r2, r3
 802d0b6:	8bfb      	ldrh	r3, [r7, #30]
 802d0b8:	1ad3      	subs	r3, r2, r3
 802d0ba:	f1a3 0208 	sub.w	r2, r3, #8
 802d0be:	8bbb      	ldrh	r3, [r7, #28]
      if ((!mem->used) &&
 802d0c0:	429a      	cmp	r2, r3
 802d0c2:	f0c0 80d3 	bcc.w	802d26c <mem_malloc+0x224>
        /* mem is not used and at least perfect fit is possible:
         * mem->next - (ptr + SIZEOF_STRUCT_MEM) gives us the 'user data size' of mem */

        if (mem->next - (ptr + SIZEOF_STRUCT_MEM) >= (size + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED)) {
 802d0c6:	697b      	ldr	r3, [r7, #20]
 802d0c8:	881b      	ldrh	r3, [r3, #0]
 802d0ca:	461a      	mov	r2, r3
 802d0cc:	8bfb      	ldrh	r3, [r7, #30]
 802d0ce:	1ad3      	subs	r3, r2, r3
 802d0d0:	f1a3 0208 	sub.w	r2, r3, #8
 802d0d4:	8bbb      	ldrh	r3, [r7, #28]
 802d0d6:	3314      	adds	r3, #20
 802d0d8:	429a      	cmp	r2, r3
 802d0da:	d34c      	bcc.n	802d176 <mem_malloc+0x12e>
           * struct mem would fit in but no data between mem2 and mem2->next
           * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
           *       region that couldn't hold data, but when mem->next gets freed,
           *       the 2 regions would be combined, resulting in more free memory
           */
          ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + size);
 802d0dc:	8bfa      	ldrh	r2, [r7, #30]
 802d0de:	8bbb      	ldrh	r3, [r7, #28]
 802d0e0:	4413      	add	r3, r2
 802d0e2:	b29b      	uxth	r3, r3
 802d0e4:	3308      	adds	r3, #8
 802d0e6:	827b      	strh	r3, [r7, #18]
          LWIP_ASSERT("invalid next ptr",ptr2 != MEM_SIZE_ALIGNED);
 802d0e8:	8a7b      	ldrh	r3, [r7, #18]
 802d0ea:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 802d0ee:	d106      	bne.n	802d0fe <mem_malloc+0xb6>
 802d0f0:	4b6f      	ldr	r3, [pc, #444]	; (802d2b0 <mem_malloc+0x268>)
 802d0f2:	f240 3287 	movw	r2, #903	; 0x387
 802d0f6:	496f      	ldr	r1, [pc, #444]	; (802d2b4 <mem_malloc+0x26c>)
 802d0f8:	486f      	ldr	r0, [pc, #444]	; (802d2b8 <mem_malloc+0x270>)
 802d0fa:	f00b ffb5 	bl	8039068 <iprintf>
          /* create mem2 struct */
          mem2 = ptr_to_mem(ptr2);
 802d0fe:	8a7b      	ldrh	r3, [r7, #18]
 802d100:	4618      	mov	r0, r3
 802d102:	f7ff fc57 	bl	802c9b4 <ptr_to_mem>
 802d106:	60f8      	str	r0, [r7, #12]
          mem2->used = 0;
 802d108:	68fb      	ldr	r3, [r7, #12]
 802d10a:	2200      	movs	r2, #0
 802d10c:	711a      	strb	r2, [r3, #4]
          mem2->next = mem->next;
 802d10e:	697b      	ldr	r3, [r7, #20]
 802d110:	881a      	ldrh	r2, [r3, #0]
 802d112:	68fb      	ldr	r3, [r7, #12]
 802d114:	801a      	strh	r2, [r3, #0]
          mem2->prev = ptr;
 802d116:	68fb      	ldr	r3, [r7, #12]
 802d118:	8bfa      	ldrh	r2, [r7, #30]
 802d11a:	805a      	strh	r2, [r3, #2]
          /* and insert it between mem and mem->next */
          mem->next = ptr2;
 802d11c:	697b      	ldr	r3, [r7, #20]
 802d11e:	8a7a      	ldrh	r2, [r7, #18]
 802d120:	801a      	strh	r2, [r3, #0]
          mem->used = 1;
 802d122:	697b      	ldr	r3, [r7, #20]
 802d124:	2201      	movs	r2, #1
 802d126:	711a      	strb	r2, [r3, #4]

          if (mem2->next != MEM_SIZE_ALIGNED) {
 802d128:	68fb      	ldr	r3, [r7, #12]
 802d12a:	881b      	ldrh	r3, [r3, #0]
 802d12c:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 802d130:	d007      	beq.n	802d142 <mem_malloc+0xfa>
            ptr_to_mem(mem2->next)->prev = ptr2;
 802d132:	68fb      	ldr	r3, [r7, #12]
 802d134:	881b      	ldrh	r3, [r3, #0]
 802d136:	4618      	mov	r0, r3
 802d138:	f7ff fc3c 	bl	802c9b4 <ptr_to_mem>
 802d13c:	4602      	mov	r2, r0
 802d13e:	8a7b      	ldrh	r3, [r7, #18]
 802d140:	8053      	strh	r3, [r2, #2]
          }
          MEM_STATS_INC_USED(used, (size + SIZEOF_STRUCT_MEM));
 802d142:	4b5e      	ldr	r3, [pc, #376]	; (802d2bc <mem_malloc+0x274>)
 802d144:	f8b3 20ac 	ldrh.w	r2, [r3, #172]	; 0xac
 802d148:	8bbb      	ldrh	r3, [r7, #28]
 802d14a:	4413      	add	r3, r2
 802d14c:	b29b      	uxth	r3, r3
 802d14e:	3308      	adds	r3, #8
 802d150:	b29a      	uxth	r2, r3
 802d152:	4b5a      	ldr	r3, [pc, #360]	; (802d2bc <mem_malloc+0x274>)
 802d154:	f8a3 20ac 	strh.w	r2, [r3, #172]	; 0xac
 802d158:	4b58      	ldr	r3, [pc, #352]	; (802d2bc <mem_malloc+0x274>)
 802d15a:	f8b3 20ae 	ldrh.w	r2, [r3, #174]	; 0xae
 802d15e:	4b57      	ldr	r3, [pc, #348]	; (802d2bc <mem_malloc+0x274>)
 802d160:	f8b3 30ac 	ldrh.w	r3, [r3, #172]	; 0xac
 802d164:	429a      	cmp	r2, r3
 802d166:	d227      	bcs.n	802d1b8 <mem_malloc+0x170>
 802d168:	4b54      	ldr	r3, [pc, #336]	; (802d2bc <mem_malloc+0x274>)
 802d16a:	f8b3 20ac 	ldrh.w	r2, [r3, #172]	; 0xac
 802d16e:	4b53      	ldr	r3, [pc, #332]	; (802d2bc <mem_malloc+0x274>)
 802d170:	f8a3 20ae 	strh.w	r2, [r3, #174]	; 0xae
 802d174:	e020      	b.n	802d1b8 <mem_malloc+0x170>
           * take care of this).
           * -> near fit or exact fit: do not split, no mem2 creation
           * also can't move mem->next directly behind mem, since mem->next
           * will always be used at this point!
           */
          mem->used = 1;
 802d176:	697b      	ldr	r3, [r7, #20]
 802d178:	2201      	movs	r2, #1
 802d17a:	711a      	strb	r2, [r3, #4]
          MEM_STATS_INC_USED(used, mem->next - mem_to_ptr(mem));
 802d17c:	4b4f      	ldr	r3, [pc, #316]	; (802d2bc <mem_malloc+0x274>)
 802d17e:	f8b3 20ac 	ldrh.w	r2, [r3, #172]	; 0xac
 802d182:	697b      	ldr	r3, [r7, #20]
 802d184:	881b      	ldrh	r3, [r3, #0]
 802d186:	4413      	add	r3, r2
 802d188:	b29c      	uxth	r4, r3
 802d18a:	6978      	ldr	r0, [r7, #20]
 802d18c:	f7ff fc24 	bl	802c9d8 <mem_to_ptr>
 802d190:	4603      	mov	r3, r0
 802d192:	1ae3      	subs	r3, r4, r3
 802d194:	b29a      	uxth	r2, r3
 802d196:	4b49      	ldr	r3, [pc, #292]	; (802d2bc <mem_malloc+0x274>)
 802d198:	f8a3 20ac 	strh.w	r2, [r3, #172]	; 0xac
 802d19c:	4b47      	ldr	r3, [pc, #284]	; (802d2bc <mem_malloc+0x274>)
 802d19e:	f8b3 20ae 	ldrh.w	r2, [r3, #174]	; 0xae
 802d1a2:	4b46      	ldr	r3, [pc, #280]	; (802d2bc <mem_malloc+0x274>)
 802d1a4:	f8b3 30ac 	ldrh.w	r3, [r3, #172]	; 0xac
 802d1a8:	429a      	cmp	r2, r3
 802d1aa:	d205      	bcs.n	802d1b8 <mem_malloc+0x170>
 802d1ac:	4b43      	ldr	r3, [pc, #268]	; (802d2bc <mem_malloc+0x274>)
 802d1ae:	f8b3 20ac 	ldrh.w	r2, [r3, #172]	; 0xac
 802d1b2:	4b42      	ldr	r3, [pc, #264]	; (802d2bc <mem_malloc+0x274>)
 802d1b4:	f8a3 20ae 	strh.w	r2, [r3, #174]	; 0xae
        }
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
mem_malloc_adjust_lfree:
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
        if (mem == lfree) {
 802d1b8:	4b3c      	ldr	r3, [pc, #240]	; (802d2ac <mem_malloc+0x264>)
 802d1ba:	681b      	ldr	r3, [r3, #0]
 802d1bc:	697a      	ldr	r2, [r7, #20]
 802d1be:	429a      	cmp	r2, r3
 802d1c0:	d127      	bne.n	802d212 <mem_malloc+0x1ca>
          struct mem *cur = lfree;
 802d1c2:	4b3a      	ldr	r3, [pc, #232]	; (802d2ac <mem_malloc+0x264>)
 802d1c4:	681b      	ldr	r3, [r3, #0]
 802d1c6:	61bb      	str	r3, [r7, #24]
          /* Find next free block after mem and update lowest free pointer */
          while (cur->used && cur != ram_end) {
 802d1c8:	e005      	b.n	802d1d6 <mem_malloc+0x18e>
              /* If mem_free or mem_trim have run, we have to restart since they
                 could have altered our current struct mem or lfree. */
              goto mem_malloc_adjust_lfree;
            }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
            cur = ptr_to_mem(cur->next);
 802d1ca:	69bb      	ldr	r3, [r7, #24]
 802d1cc:	881b      	ldrh	r3, [r3, #0]
 802d1ce:	4618      	mov	r0, r3
 802d1d0:	f7ff fbf0 	bl	802c9b4 <ptr_to_mem>
 802d1d4:	61b8      	str	r0, [r7, #24]
          while (cur->used && cur != ram_end) {
 802d1d6:	69bb      	ldr	r3, [r7, #24]
 802d1d8:	791b      	ldrb	r3, [r3, #4]
 802d1da:	2b00      	cmp	r3, #0
 802d1dc:	d004      	beq.n	802d1e8 <mem_malloc+0x1a0>
 802d1de:	4b38      	ldr	r3, [pc, #224]	; (802d2c0 <mem_malloc+0x278>)
 802d1e0:	681b      	ldr	r3, [r3, #0]
 802d1e2:	69ba      	ldr	r2, [r7, #24]
 802d1e4:	429a      	cmp	r2, r3
 802d1e6:	d1f0      	bne.n	802d1ca <mem_malloc+0x182>
          }
          lfree = cur;
 802d1e8:	4a30      	ldr	r2, [pc, #192]	; (802d2ac <mem_malloc+0x264>)
 802d1ea:	69bb      	ldr	r3, [r7, #24]
 802d1ec:	6013      	str	r3, [r2, #0]
          LWIP_ASSERT("mem_malloc: !lfree->used", ((lfree == ram_end) || (!lfree->used)));
 802d1ee:	4b2f      	ldr	r3, [pc, #188]	; (802d2ac <mem_malloc+0x264>)
 802d1f0:	681a      	ldr	r2, [r3, #0]
 802d1f2:	4b33      	ldr	r3, [pc, #204]	; (802d2c0 <mem_malloc+0x278>)
 802d1f4:	681b      	ldr	r3, [r3, #0]
 802d1f6:	429a      	cmp	r2, r3
 802d1f8:	d00b      	beq.n	802d212 <mem_malloc+0x1ca>
 802d1fa:	4b2c      	ldr	r3, [pc, #176]	; (802d2ac <mem_malloc+0x264>)
 802d1fc:	681b      	ldr	r3, [r3, #0]
 802d1fe:	791b      	ldrb	r3, [r3, #4]
 802d200:	2b00      	cmp	r3, #0
 802d202:	d006      	beq.n	802d212 <mem_malloc+0x1ca>
 802d204:	4b2a      	ldr	r3, [pc, #168]	; (802d2b0 <mem_malloc+0x268>)
 802d206:	f240 32b5 	movw	r2, #949	; 0x3b5
 802d20a:	492e      	ldr	r1, [pc, #184]	; (802d2c4 <mem_malloc+0x27c>)
 802d20c:	482a      	ldr	r0, [pc, #168]	; (802d2b8 <mem_malloc+0x270>)
 802d20e:	f00b ff2b 	bl	8039068 <iprintf>
        }
        LWIP_MEM_ALLOC_UNPROTECT();
        sys_mutex_unlock(&mem_mutex);
 802d212:	4825      	ldr	r0, [pc, #148]	; (802d2a8 <mem_malloc+0x260>)
 802d214:	f00b f967 	bl	80384e6 <sys_mutex_unlock>
        LWIP_ASSERT("mem_malloc: allocated memory not above ram_end.",
 802d218:	8bba      	ldrh	r2, [r7, #28]
 802d21a:	697b      	ldr	r3, [r7, #20]
 802d21c:	4413      	add	r3, r2
 802d21e:	3308      	adds	r3, #8
 802d220:	4a27      	ldr	r2, [pc, #156]	; (802d2c0 <mem_malloc+0x278>)
 802d222:	6812      	ldr	r2, [r2, #0]
 802d224:	4293      	cmp	r3, r2
 802d226:	d906      	bls.n	802d236 <mem_malloc+0x1ee>
 802d228:	4b21      	ldr	r3, [pc, #132]	; (802d2b0 <mem_malloc+0x268>)
 802d22a:	f240 32b9 	movw	r2, #953	; 0x3b9
 802d22e:	4926      	ldr	r1, [pc, #152]	; (802d2c8 <mem_malloc+0x280>)
 802d230:	4821      	ldr	r0, [pc, #132]	; (802d2b8 <mem_malloc+0x270>)
 802d232:	f00b ff19 	bl	8039068 <iprintf>
                    (mem_ptr_t)mem + SIZEOF_STRUCT_MEM + size <= (mem_ptr_t)ram_end);
        LWIP_ASSERT("mem_malloc: allocated memory properly aligned.",
 802d236:	697b      	ldr	r3, [r7, #20]
 802d238:	f003 0303 	and.w	r3, r3, #3
 802d23c:	2b00      	cmp	r3, #0
 802d23e:	d006      	beq.n	802d24e <mem_malloc+0x206>
 802d240:	4b1b      	ldr	r3, [pc, #108]	; (802d2b0 <mem_malloc+0x268>)
 802d242:	f240 32bb 	movw	r2, #955	; 0x3bb
 802d246:	4921      	ldr	r1, [pc, #132]	; (802d2cc <mem_malloc+0x284>)
 802d248:	481b      	ldr	r0, [pc, #108]	; (802d2b8 <mem_malloc+0x270>)
 802d24a:	f00b ff0d 	bl	8039068 <iprintf>
                    ((mem_ptr_t)mem + SIZEOF_STRUCT_MEM) % MEM_ALIGNMENT == 0);
        LWIP_ASSERT("mem_malloc: sanity check alignment",
 802d24e:	697b      	ldr	r3, [r7, #20]
 802d250:	f003 0303 	and.w	r3, r3, #3
 802d254:	2b00      	cmp	r3, #0
 802d256:	d006      	beq.n	802d266 <mem_malloc+0x21e>
 802d258:	4b15      	ldr	r3, [pc, #84]	; (802d2b0 <mem_malloc+0x268>)
 802d25a:	f240 32bd 	movw	r2, #957	; 0x3bd
 802d25e:	491c      	ldr	r1, [pc, #112]	; (802d2d0 <mem_malloc+0x288>)
 802d260:	4815      	ldr	r0, [pc, #84]	; (802d2b8 <mem_malloc+0x270>)
 802d262:	f00b ff01 	bl	8039068 <iprintf>

#if MEM_OVERFLOW_CHECK
        mem_overflow_init_element(mem, size_in);
#endif
        MEM_SANITY();
        return (u8_t *)mem + SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET;
 802d266:	697b      	ldr	r3, [r7, #20]
 802d268:	3308      	adds	r3, #8
 802d26a:	e019      	b.n	802d2a0 <mem_malloc+0x258>
         ptr = ptr_to_mem(ptr)->next) {
 802d26c:	8bfb      	ldrh	r3, [r7, #30]
 802d26e:	4618      	mov	r0, r3
 802d270:	f7ff fba0 	bl	802c9b4 <ptr_to_mem>
 802d274:	4603      	mov	r3, r0
 802d276:	881b      	ldrh	r3, [r3, #0]
 802d278:	83fb      	strh	r3, [r7, #30]
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 802d27a:	8bfa      	ldrh	r2, [r7, #30]
 802d27c:	8bbb      	ldrh	r3, [r7, #28]
 802d27e:	f5c3 63c8 	rsb	r3, r3, #1600	; 0x640
 802d282:	429a      	cmp	r2, r3
 802d284:	f4ff af0a 	bcc.w	802d09c <mem_malloc+0x54>
    }
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
    /* if we got interrupted by a mem_free, try again */
  } while (local_mem_free_count != 0);
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  MEM_STATS_INC(err);
 802d288:	4b0c      	ldr	r3, [pc, #48]	; (802d2bc <mem_malloc+0x274>)
 802d28a:	f8b3 30a8 	ldrh.w	r3, [r3, #168]	; 0xa8
 802d28e:	3301      	adds	r3, #1
 802d290:	b29a      	uxth	r2, r3
 802d292:	4b0a      	ldr	r3, [pc, #40]	; (802d2bc <mem_malloc+0x274>)
 802d294:	f8a3 20a8 	strh.w	r2, [r3, #168]	; 0xa8
  LWIP_MEM_ALLOC_UNPROTECT();
  sys_mutex_unlock(&mem_mutex);
 802d298:	4803      	ldr	r0, [pc, #12]	; (802d2a8 <mem_malloc+0x260>)
 802d29a:	f00b f924 	bl	80384e6 <sys_mutex_unlock>
  LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("mem_malloc: could not allocate %"S16_F" bytes\n", (s16_t)size));
  return NULL;
 802d29e:	2300      	movs	r3, #0
}
 802d2a0:	4618      	mov	r0, r3
 802d2a2:	3724      	adds	r7, #36	; 0x24
 802d2a4:	46bd      	mov	sp, r7
 802d2a6:	bd90      	pop	{r4, r7, pc}
 802d2a8:	2000b994 	.word	0x2000b994
 802d2ac:	2000b998 	.word	0x2000b998
 802d2b0:	0803aaac 	.word	0x0803aaac
 802d2b4:	0803ac70 	.word	0x0803ac70
 802d2b8:	0803aaf4 	.word	0x0803aaf4
 802d2bc:	2000ee04 	.word	0x2000ee04
 802d2c0:	2000b990 	.word	0x2000b990
 802d2c4:	0803ac84 	.word	0x0803ac84
 802d2c8:	0803aca0 	.word	0x0803aca0
 802d2cc:	0803acd0 	.word	0x0803acd0
 802d2d0:	0803ad00 	.word	0x0803ad00

0802d2d4 <memp_init_pool>:
 *
 * @param desc pool to initialize
 */
void
memp_init_pool(const struct memp_desc *desc)
{
 802d2d4:	b480      	push	{r7}
 802d2d6:	b085      	sub	sp, #20
 802d2d8:	af00      	add	r7, sp, #0
 802d2da:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(desc);
#else
  int i;
  struct memp *memp;

  *desc->tab = NULL;
 802d2dc:	687b      	ldr	r3, [r7, #4]
 802d2de:	68db      	ldr	r3, [r3, #12]
 802d2e0:	2200      	movs	r2, #0
 802d2e2:	601a      	str	r2, [r3, #0]
  memp = (struct memp *)LWIP_MEM_ALIGN(desc->base);
 802d2e4:	687b      	ldr	r3, [r7, #4]
 802d2e6:	689b      	ldr	r3, [r3, #8]
 802d2e8:	3303      	adds	r3, #3
 802d2ea:	f023 0303 	bic.w	r3, r3, #3
 802d2ee:	60bb      	str	r3, [r7, #8]
                                       + MEM_SANITY_REGION_AFTER_ALIGNED
#endif
                                      ));
#endif
  /* create a linked list of memp elements */
  for (i = 0; i < desc->num; ++i) {
 802d2f0:	2300      	movs	r3, #0
 802d2f2:	60fb      	str	r3, [r7, #12]
 802d2f4:	e011      	b.n	802d31a <memp_init_pool+0x46>
    memp->next = *desc->tab;
 802d2f6:	687b      	ldr	r3, [r7, #4]
 802d2f8:	68db      	ldr	r3, [r3, #12]
 802d2fa:	681a      	ldr	r2, [r3, #0]
 802d2fc:	68bb      	ldr	r3, [r7, #8]
 802d2fe:	601a      	str	r2, [r3, #0]
    *desc->tab = memp;
 802d300:	687b      	ldr	r3, [r7, #4]
 802d302:	68db      	ldr	r3, [r3, #12]
 802d304:	68ba      	ldr	r2, [r7, #8]
 802d306:	601a      	str	r2, [r3, #0]
#if MEMP_OVERFLOW_CHECK
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */
    /* cast through void* to get rid of alignment warnings */
    memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + desc->size
 802d308:	687b      	ldr	r3, [r7, #4]
 802d30a:	889b      	ldrh	r3, [r3, #4]
 802d30c:	461a      	mov	r2, r3
 802d30e:	68bb      	ldr	r3, [r7, #8]
 802d310:	4413      	add	r3, r2
 802d312:	60bb      	str	r3, [r7, #8]
  for (i = 0; i < desc->num; ++i) {
 802d314:	68fb      	ldr	r3, [r7, #12]
 802d316:	3301      	adds	r3, #1
 802d318:	60fb      	str	r3, [r7, #12]
 802d31a:	687b      	ldr	r3, [r7, #4]
 802d31c:	88db      	ldrh	r3, [r3, #6]
 802d31e:	461a      	mov	r2, r3
 802d320:	68fb      	ldr	r3, [r7, #12]
 802d322:	4293      	cmp	r3, r2
 802d324:	dbe7      	blt.n	802d2f6 <memp_init_pool+0x22>
                                   + MEM_SANITY_REGION_AFTER_ALIGNED
#endif
                                  );
  }
#if MEMP_STATS
  desc->stats->avail = desc->num;
 802d326:	687b      	ldr	r3, [r7, #4]
 802d328:	681b      	ldr	r3, [r3, #0]
 802d32a:	687a      	ldr	r2, [r7, #4]
 802d32c:	88d2      	ldrh	r2, [r2, #6]
 802d32e:	805a      	strh	r2, [r3, #2]
#endif /* !MEMP_MEM_MALLOC */

#if MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY)
  desc->stats->name  = desc->desc;
#endif /* MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY) */
}
 802d330:	bf00      	nop
 802d332:	3714      	adds	r7, #20
 802d334:	46bd      	mov	sp, r7
 802d336:	f85d 7b04 	ldr.w	r7, [sp], #4
 802d33a:	4770      	bx	lr

0802d33c <memp_init>:
 *
 * Carves out memp_memory into linked lists for each pool-type.
 */
void
memp_init(void)
{
 802d33c:	b580      	push	{r7, lr}
 802d33e:	b082      	sub	sp, #8
 802d340:	af00      	add	r7, sp, #0
  u16_t i;

  /* for every pool: */
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 802d342:	2300      	movs	r3, #0
 802d344:	80fb      	strh	r3, [r7, #6]
 802d346:	e014      	b.n	802d372 <memp_init+0x36>
    memp_init_pool(memp_pools[i]);
 802d348:	88fb      	ldrh	r3, [r7, #6]
 802d34a:	4a0e      	ldr	r2, [pc, #56]	; (802d384 <memp_init+0x48>)
 802d34c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 802d350:	4618      	mov	r0, r3
 802d352:	f7ff ffbf 	bl	802d2d4 <memp_init_pool>

#if LWIP_STATS && MEMP_STATS
    lwip_stats.memp[i] = memp_pools[i]->stats;
 802d356:	88fb      	ldrh	r3, [r7, #6]
 802d358:	4a0a      	ldr	r2, [pc, #40]	; (802d384 <memp_init+0x48>)
 802d35a:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 802d35e:	88fb      	ldrh	r3, [r7, #6]
 802d360:	6812      	ldr	r2, [r2, #0]
 802d362:	4909      	ldr	r1, [pc, #36]	; (802d388 <memp_init+0x4c>)
 802d364:	332c      	adds	r3, #44	; 0x2c
 802d366:	009b      	lsls	r3, r3, #2
 802d368:	440b      	add	r3, r1
 802d36a:	605a      	str	r2, [r3, #4]
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 802d36c:	88fb      	ldrh	r3, [r7, #6]
 802d36e:	3301      	adds	r3, #1
 802d370:	80fb      	strh	r3, [r7, #6]
 802d372:	88fb      	ldrh	r3, [r7, #6]
 802d374:	2b0c      	cmp	r3, #12
 802d376:	d9e7      	bls.n	802d348 <memp_init+0xc>

#if MEMP_OVERFLOW_CHECK >= 2
  /* check everything a first time to see if it worked */
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */
}
 802d378:	bf00      	nop
 802d37a:	bf00      	nop
 802d37c:	3708      	adds	r7, #8
 802d37e:	46bd      	mov	sp, r7
 802d380:	bd80      	pop	{r7, pc}
 802d382:	bf00      	nop
 802d384:	0803d5b8 	.word	0x0803d5b8
 802d388:	2000ee04 	.word	0x2000ee04

0802d38c <do_memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
do_memp_malloc_pool(const struct memp_desc *desc)
#else
do_memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 802d38c:	b580      	push	{r7, lr}
 802d38e:	b084      	sub	sp, #16
 802d390:	af00      	add	r7, sp, #0
 802d392:	6078      	str	r0, [r7, #4]

#if MEMP_MEM_MALLOC
  memp = (struct memp *)mem_malloc(MEMP_SIZE + MEMP_ALIGN_SIZE(desc->size));
  SYS_ARCH_PROTECT(old_level);
#else /* MEMP_MEM_MALLOC */
  SYS_ARCH_PROTECT(old_level);
 802d394:	f00b f8da 	bl	803854c <sys_arch_protect>
 802d398:	60f8      	str	r0, [r7, #12]

  memp = *desc->tab;
 802d39a:	687b      	ldr	r3, [r7, #4]
 802d39c:	68db      	ldr	r3, [r3, #12]
 802d39e:	681b      	ldr	r3, [r3, #0]
 802d3a0:	60bb      	str	r3, [r7, #8]
#endif /* MEMP_MEM_MALLOC */

  if (memp != NULL) {
 802d3a2:	68bb      	ldr	r3, [r7, #8]
 802d3a4:	2b00      	cmp	r3, #0
 802d3a6:	d029      	beq.n	802d3fc <do_memp_malloc_pool+0x70>
#if !MEMP_MEM_MALLOC
#if MEMP_OVERFLOW_CHECK == 1
    memp_overflow_check_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */

    *desc->tab = memp->next;
 802d3a8:	687b      	ldr	r3, [r7, #4]
 802d3aa:	68db      	ldr	r3, [r3, #12]
 802d3ac:	68ba      	ldr	r2, [r7, #8]
 802d3ae:	6812      	ldr	r2, [r2, #0]
 802d3b0:	601a      	str	r2, [r3, #0]
    memp->line = line;
#if MEMP_MEM_MALLOC
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_MEM_MALLOC */
#endif /* MEMP_OVERFLOW_CHECK */
    LWIP_ASSERT("memp_malloc: memp properly aligned",
 802d3b2:	68bb      	ldr	r3, [r7, #8]
 802d3b4:	f003 0303 	and.w	r3, r3, #3
 802d3b8:	2b00      	cmp	r3, #0
 802d3ba:	d006      	beq.n	802d3ca <do_memp_malloc_pool+0x3e>
 802d3bc:	4b16      	ldr	r3, [pc, #88]	; (802d418 <do_memp_malloc_pool+0x8c>)
 802d3be:	f44f 728c 	mov.w	r2, #280	; 0x118
 802d3c2:	4916      	ldr	r1, [pc, #88]	; (802d41c <do_memp_malloc_pool+0x90>)
 802d3c4:	4816      	ldr	r0, [pc, #88]	; (802d420 <do_memp_malloc_pool+0x94>)
 802d3c6:	f00b fe4f 	bl	8039068 <iprintf>
                ((mem_ptr_t)memp % MEM_ALIGNMENT) == 0);
#if MEMP_STATS
    desc->stats->used++;
 802d3ca:	687b      	ldr	r3, [r7, #4]
 802d3cc:	681b      	ldr	r3, [r3, #0]
 802d3ce:	889a      	ldrh	r2, [r3, #4]
 802d3d0:	3201      	adds	r2, #1
 802d3d2:	b292      	uxth	r2, r2
 802d3d4:	809a      	strh	r2, [r3, #4]
    if (desc->stats->used > desc->stats->max) {
 802d3d6:	687b      	ldr	r3, [r7, #4]
 802d3d8:	681b      	ldr	r3, [r3, #0]
 802d3da:	889a      	ldrh	r2, [r3, #4]
 802d3dc:	687b      	ldr	r3, [r7, #4]
 802d3de:	681b      	ldr	r3, [r3, #0]
 802d3e0:	88db      	ldrh	r3, [r3, #6]
 802d3e2:	429a      	cmp	r2, r3
 802d3e4:	d905      	bls.n	802d3f2 <do_memp_malloc_pool+0x66>
      desc->stats->max = desc->stats->used;
 802d3e6:	687b      	ldr	r3, [r7, #4]
 802d3e8:	681a      	ldr	r2, [r3, #0]
 802d3ea:	687b      	ldr	r3, [r7, #4]
 802d3ec:	681b      	ldr	r3, [r3, #0]
 802d3ee:	8892      	ldrh	r2, [r2, #4]
 802d3f0:	80da      	strh	r2, [r3, #6]
    }
#endif
    SYS_ARCH_UNPROTECT(old_level);
 802d3f2:	68f8      	ldr	r0, [r7, #12]
 802d3f4:	f00b f8b8 	bl	8038568 <sys_arch_unprotect>
    /* cast through u8_t* to get rid of alignment warnings */
    return ((u8_t *)memp + MEMP_SIZE);
 802d3f8:	68bb      	ldr	r3, [r7, #8]
 802d3fa:	e009      	b.n	802d410 <do_memp_malloc_pool+0x84>
  } else {
#if MEMP_STATS
    desc->stats->err++;
 802d3fc:	687b      	ldr	r3, [r7, #4]
 802d3fe:	681b      	ldr	r3, [r3, #0]
 802d400:	881a      	ldrh	r2, [r3, #0]
 802d402:	3201      	adds	r2, #1
 802d404:	b292      	uxth	r2, r2
 802d406:	801a      	strh	r2, [r3, #0]
#endif
    SYS_ARCH_UNPROTECT(old_level);
 802d408:	68f8      	ldr	r0, [r7, #12]
 802d40a:	f00b f8ad 	bl	8038568 <sys_arch_unprotect>
    LWIP_DEBUGF(MEMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("memp_malloc: out of memory in pool %s\n", desc->desc));
  }

  return NULL;
 802d40e:	2300      	movs	r3, #0
}
 802d410:	4618      	mov	r0, r3
 802d412:	3710      	adds	r7, #16
 802d414:	46bd      	mov	sp, r7
 802d416:	bd80      	pop	{r7, pc}
 802d418:	0803ad24 	.word	0x0803ad24
 802d41c:	0803ad54 	.word	0x0803ad54
 802d420:	0803ad78 	.word	0x0803ad78

0802d424 <memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc_pool(const struct memp_desc *desc)
#else
memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 802d424:	b580      	push	{r7, lr}
 802d426:	b082      	sub	sp, #8
 802d428:	af00      	add	r7, sp, #0
 802d42a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("invalid pool desc", desc != NULL);
 802d42c:	687b      	ldr	r3, [r7, #4]
 802d42e:	2b00      	cmp	r3, #0
 802d430:	d106      	bne.n	802d440 <memp_malloc_pool+0x1c>
 802d432:	4b0a      	ldr	r3, [pc, #40]	; (802d45c <memp_malloc_pool+0x38>)
 802d434:	f44f 729e 	mov.w	r2, #316	; 0x13c
 802d438:	4909      	ldr	r1, [pc, #36]	; (802d460 <memp_malloc_pool+0x3c>)
 802d43a:	480a      	ldr	r0, [pc, #40]	; (802d464 <memp_malloc_pool+0x40>)
 802d43c:	f00b fe14 	bl	8039068 <iprintf>
  if (desc == NULL) {
 802d440:	687b      	ldr	r3, [r7, #4]
 802d442:	2b00      	cmp	r3, #0
 802d444:	d101      	bne.n	802d44a <memp_malloc_pool+0x26>
    return NULL;
 802d446:	2300      	movs	r3, #0
 802d448:	e003      	b.n	802d452 <memp_malloc_pool+0x2e>
  }

#if !MEMP_OVERFLOW_CHECK
  return do_memp_malloc_pool(desc);
 802d44a:	6878      	ldr	r0, [r7, #4]
 802d44c:	f7ff ff9e 	bl	802d38c <do_memp_malloc_pool>
 802d450:	4603      	mov	r3, r0
#else
  return do_memp_malloc_pool_fn(desc, file, line);
#endif
}
 802d452:	4618      	mov	r0, r3
 802d454:	3708      	adds	r7, #8
 802d456:	46bd      	mov	sp, r7
 802d458:	bd80      	pop	{r7, pc}
 802d45a:	bf00      	nop
 802d45c:	0803ad24 	.word	0x0803ad24
 802d460:	0803ada0 	.word	0x0803ada0
 802d464:	0803ad78 	.word	0x0803ad78

0802d468 <memp_malloc>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc(memp_t type)
#else
memp_malloc_fn(memp_t type, const char *file, const int line)
#endif
{
 802d468:	b580      	push	{r7, lr}
 802d46a:	b084      	sub	sp, #16
 802d46c:	af00      	add	r7, sp, #0
 802d46e:	4603      	mov	r3, r0
 802d470:	71fb      	strb	r3, [r7, #7]
  void *memp;
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 802d472:	79fb      	ldrb	r3, [r7, #7]
 802d474:	2b0c      	cmp	r3, #12
 802d476:	d908      	bls.n	802d48a <memp_malloc+0x22>
 802d478:	4b0a      	ldr	r3, [pc, #40]	; (802d4a4 <memp_malloc+0x3c>)
 802d47a:	f240 1257 	movw	r2, #343	; 0x157
 802d47e:	490a      	ldr	r1, [pc, #40]	; (802d4a8 <memp_malloc+0x40>)
 802d480:	480a      	ldr	r0, [pc, #40]	; (802d4ac <memp_malloc+0x44>)
 802d482:	f00b fdf1 	bl	8039068 <iprintf>
 802d486:	2300      	movs	r3, #0
 802d488:	e008      	b.n	802d49c <memp_malloc+0x34>
#if MEMP_OVERFLOW_CHECK >= 2
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */

#if !MEMP_OVERFLOW_CHECK
  memp = do_memp_malloc_pool(memp_pools[type]);
 802d48a:	79fb      	ldrb	r3, [r7, #7]
 802d48c:	4a08      	ldr	r2, [pc, #32]	; (802d4b0 <memp_malloc+0x48>)
 802d48e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 802d492:	4618      	mov	r0, r3
 802d494:	f7ff ff7a 	bl	802d38c <do_memp_malloc_pool>
 802d498:	60f8      	str	r0, [r7, #12]
#else
  memp = do_memp_malloc_pool_fn(memp_pools[type], file, line);
#endif

  return memp;
 802d49a:	68fb      	ldr	r3, [r7, #12]
}
 802d49c:	4618      	mov	r0, r3
 802d49e:	3710      	adds	r7, #16
 802d4a0:	46bd      	mov	sp, r7
 802d4a2:	bd80      	pop	{r7, pc}
 802d4a4:	0803ad24 	.word	0x0803ad24
 802d4a8:	0803adb4 	.word	0x0803adb4
 802d4ac:	0803ad78 	.word	0x0803ad78
 802d4b0:	0803d5b8 	.word	0x0803d5b8

0802d4b4 <do_memp_free_pool>:

static void
do_memp_free_pool(const struct memp_desc *desc, void *mem)
{
 802d4b4:	b580      	push	{r7, lr}
 802d4b6:	b084      	sub	sp, #16
 802d4b8:	af00      	add	r7, sp, #0
 802d4ba:	6078      	str	r0, [r7, #4]
 802d4bc:	6039      	str	r1, [r7, #0]
  struct memp *memp;
  SYS_ARCH_DECL_PROTECT(old_level);

  LWIP_ASSERT("memp_free: mem properly aligned",
 802d4be:	683b      	ldr	r3, [r7, #0]
 802d4c0:	f003 0303 	and.w	r3, r3, #3
 802d4c4:	2b00      	cmp	r3, #0
 802d4c6:	d006      	beq.n	802d4d6 <do_memp_free_pool+0x22>
 802d4c8:	4b10      	ldr	r3, [pc, #64]	; (802d50c <do_memp_free_pool+0x58>)
 802d4ca:	f44f 72b6 	mov.w	r2, #364	; 0x16c
 802d4ce:	4910      	ldr	r1, [pc, #64]	; (802d510 <do_memp_free_pool+0x5c>)
 802d4d0:	4810      	ldr	r0, [pc, #64]	; (802d514 <do_memp_free_pool+0x60>)
 802d4d2:	f00b fdc9 	bl	8039068 <iprintf>
              ((mem_ptr_t)mem % MEM_ALIGNMENT) == 0);

  /* cast through void* to get rid of alignment warnings */
  memp = (struct memp *)(void *)((u8_t *)mem - MEMP_SIZE);
 802d4d6:	683b      	ldr	r3, [r7, #0]
 802d4d8:	60fb      	str	r3, [r7, #12]

  SYS_ARCH_PROTECT(old_level);
 802d4da:	f00b f837 	bl	803854c <sys_arch_protect>
 802d4de:	60b8      	str	r0, [r7, #8]
#if MEMP_OVERFLOW_CHECK == 1
  memp_overflow_check_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */

#if MEMP_STATS
  desc->stats->used--;
 802d4e0:	687b      	ldr	r3, [r7, #4]
 802d4e2:	681b      	ldr	r3, [r3, #0]
 802d4e4:	889a      	ldrh	r2, [r3, #4]
 802d4e6:	3a01      	subs	r2, #1
 802d4e8:	b292      	uxth	r2, r2
 802d4ea:	809a      	strh	r2, [r3, #4]
#if MEMP_MEM_MALLOC
  LWIP_UNUSED_ARG(desc);
  SYS_ARCH_UNPROTECT(old_level);
  mem_free(memp);
#else /* MEMP_MEM_MALLOC */
  memp->next = *desc->tab;
 802d4ec:	687b      	ldr	r3, [r7, #4]
 802d4ee:	68db      	ldr	r3, [r3, #12]
 802d4f0:	681a      	ldr	r2, [r3, #0]
 802d4f2:	68fb      	ldr	r3, [r7, #12]
 802d4f4:	601a      	str	r2, [r3, #0]
  *desc->tab = memp;
 802d4f6:	687b      	ldr	r3, [r7, #4]
 802d4f8:	68db      	ldr	r3, [r3, #12]
 802d4fa:	68fa      	ldr	r2, [r7, #12]
 802d4fc:	601a      	str	r2, [r3, #0]

#if MEMP_SANITY_CHECK
  LWIP_ASSERT("memp sanity", memp_sanity(desc));
#endif /* MEMP_SANITY_CHECK */

  SYS_ARCH_UNPROTECT(old_level);
 802d4fe:	68b8      	ldr	r0, [r7, #8]
 802d500:	f00b f832 	bl	8038568 <sys_arch_unprotect>
#endif /* !MEMP_MEM_MALLOC */
}
 802d504:	bf00      	nop
 802d506:	3710      	adds	r7, #16
 802d508:	46bd      	mov	sp, r7
 802d50a:	bd80      	pop	{r7, pc}
 802d50c:	0803ad24 	.word	0x0803ad24
 802d510:	0803add4 	.word	0x0803add4
 802d514:	0803ad78 	.word	0x0803ad78

0802d518 <memp_free_pool>:
 * @param desc the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free_pool(const struct memp_desc *desc, void *mem)
{
 802d518:	b580      	push	{r7, lr}
 802d51a:	b082      	sub	sp, #8
 802d51c:	af00      	add	r7, sp, #0
 802d51e:	6078      	str	r0, [r7, #4]
 802d520:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("invalid pool desc", desc != NULL);
 802d522:	687b      	ldr	r3, [r7, #4]
 802d524:	2b00      	cmp	r3, #0
 802d526:	d106      	bne.n	802d536 <memp_free_pool+0x1e>
 802d528:	4b0a      	ldr	r3, [pc, #40]	; (802d554 <memp_free_pool+0x3c>)
 802d52a:	f240 1295 	movw	r2, #405	; 0x195
 802d52e:	490a      	ldr	r1, [pc, #40]	; (802d558 <memp_free_pool+0x40>)
 802d530:	480a      	ldr	r0, [pc, #40]	; (802d55c <memp_free_pool+0x44>)
 802d532:	f00b fd99 	bl	8039068 <iprintf>
  if ((desc == NULL) || (mem == NULL)) {
 802d536:	687b      	ldr	r3, [r7, #4]
 802d538:	2b00      	cmp	r3, #0
 802d53a:	d007      	beq.n	802d54c <memp_free_pool+0x34>
 802d53c:	683b      	ldr	r3, [r7, #0]
 802d53e:	2b00      	cmp	r3, #0
 802d540:	d004      	beq.n	802d54c <memp_free_pool+0x34>
    return;
  }

  do_memp_free_pool(desc, mem);
 802d542:	6839      	ldr	r1, [r7, #0]
 802d544:	6878      	ldr	r0, [r7, #4]
 802d546:	f7ff ffb5 	bl	802d4b4 <do_memp_free_pool>
 802d54a:	e000      	b.n	802d54e <memp_free_pool+0x36>
    return;
 802d54c:	bf00      	nop
}
 802d54e:	3708      	adds	r7, #8
 802d550:	46bd      	mov	sp, r7
 802d552:	bd80      	pop	{r7, pc}
 802d554:	0803ad24 	.word	0x0803ad24
 802d558:	0803ada0 	.word	0x0803ada0
 802d55c:	0803ad78 	.word	0x0803ad78

0802d560 <memp_free>:
 * @param type the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free(memp_t type, void *mem)
{
 802d560:	b580      	push	{r7, lr}
 802d562:	b082      	sub	sp, #8
 802d564:	af00      	add	r7, sp, #0
 802d566:	4603      	mov	r3, r0
 802d568:	6039      	str	r1, [r7, #0]
 802d56a:	71fb      	strb	r3, [r7, #7]
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  struct memp *old_first;
#endif

  LWIP_ERROR("memp_free: type < MEMP_MAX", (type < MEMP_MAX), return;);
 802d56c:	79fb      	ldrb	r3, [r7, #7]
 802d56e:	2b0c      	cmp	r3, #12
 802d570:	d907      	bls.n	802d582 <memp_free+0x22>
 802d572:	4b0c      	ldr	r3, [pc, #48]	; (802d5a4 <memp_free+0x44>)
 802d574:	f44f 72d5 	mov.w	r2, #426	; 0x1aa
 802d578:	490b      	ldr	r1, [pc, #44]	; (802d5a8 <memp_free+0x48>)
 802d57a:	480c      	ldr	r0, [pc, #48]	; (802d5ac <memp_free+0x4c>)
 802d57c:	f00b fd74 	bl	8039068 <iprintf>
 802d580:	e00c      	b.n	802d59c <memp_free+0x3c>

  if (mem == NULL) {
 802d582:	683b      	ldr	r3, [r7, #0]
 802d584:	2b00      	cmp	r3, #0
 802d586:	d008      	beq.n	802d59a <memp_free+0x3a>

#ifdef LWIP_HOOK_MEMP_AVAILABLE
  old_first = *memp_pools[type]->tab;
#endif

  do_memp_free_pool(memp_pools[type], mem);
 802d588:	79fb      	ldrb	r3, [r7, #7]
 802d58a:	4a09      	ldr	r2, [pc, #36]	; (802d5b0 <memp_free+0x50>)
 802d58c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 802d590:	6839      	ldr	r1, [r7, #0]
 802d592:	4618      	mov	r0, r3
 802d594:	f7ff ff8e 	bl	802d4b4 <do_memp_free_pool>
 802d598:	e000      	b.n	802d59c <memp_free+0x3c>
    return;
 802d59a:	bf00      	nop
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  if (old_first == NULL) {
    LWIP_HOOK_MEMP_AVAILABLE(type);
  }
#endif
}
 802d59c:	3708      	adds	r7, #8
 802d59e:	46bd      	mov	sp, r7
 802d5a0:	bd80      	pop	{r7, pc}
 802d5a2:	bf00      	nop
 802d5a4:	0803ad24 	.word	0x0803ad24
 802d5a8:	0803adf4 	.word	0x0803adf4
 802d5ac:	0803ad78 	.word	0x0803ad78
 802d5b0:	0803d5b8 	.word	0x0803d5b8

0802d5b4 <netif_init>:
}
#endif /* LWIP_HAVE_LOOPIF */

void
netif_init(void)
{
 802d5b4:	b480      	push	{r7}
 802d5b6:	af00      	add	r7, sp, #0

  netif_set_link_up(&loop_netif);
  netif_set_up(&loop_netif);

#endif /* LWIP_HAVE_LOOPIF */
}
 802d5b8:	bf00      	nop
 802d5ba:	46bd      	mov	sp, r7
 802d5bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 802d5c0:	4770      	bx	lr
	...

0802d5c4 <netif_add>:
netif_add(struct netif *netif,
#if LWIP_IPV4
          const ip4_addr_t *ipaddr, const ip4_addr_t *netmask, const ip4_addr_t *gw,
#endif /* LWIP_IPV4 */
          void *state, netif_init_fn init, netif_input_fn input)
{
 802d5c4:	b580      	push	{r7, lr}
 802d5c6:	b086      	sub	sp, #24
 802d5c8:	af00      	add	r7, sp, #0
 802d5ca:	60f8      	str	r0, [r7, #12]
 802d5cc:	60b9      	str	r1, [r7, #8]
 802d5ce:	607a      	str	r2, [r7, #4]
 802d5d0:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("single netif already set", 0);
    return NULL;
  }
#endif

  LWIP_ERROR("netif_add: invalid netif", netif != NULL, return NULL);
 802d5d2:	68fb      	ldr	r3, [r7, #12]
 802d5d4:	2b00      	cmp	r3, #0
 802d5d6:	d108      	bne.n	802d5ea <netif_add+0x26>
 802d5d8:	4b57      	ldr	r3, [pc, #348]	; (802d738 <netif_add+0x174>)
 802d5da:	f240 1227 	movw	r2, #295	; 0x127
 802d5de:	4957      	ldr	r1, [pc, #348]	; (802d73c <netif_add+0x178>)
 802d5e0:	4857      	ldr	r0, [pc, #348]	; (802d740 <netif_add+0x17c>)
 802d5e2:	f00b fd41 	bl	8039068 <iprintf>
 802d5e6:	2300      	movs	r3, #0
 802d5e8:	e0a2      	b.n	802d730 <netif_add+0x16c>
  LWIP_ERROR("netif_add: No init function given", init != NULL, return NULL);
 802d5ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802d5ec:	2b00      	cmp	r3, #0
 802d5ee:	d108      	bne.n	802d602 <netif_add+0x3e>
 802d5f0:	4b51      	ldr	r3, [pc, #324]	; (802d738 <netif_add+0x174>)
 802d5f2:	f44f 7294 	mov.w	r2, #296	; 0x128
 802d5f6:	4953      	ldr	r1, [pc, #332]	; (802d744 <netif_add+0x180>)
 802d5f8:	4851      	ldr	r0, [pc, #324]	; (802d740 <netif_add+0x17c>)
 802d5fa:	f00b fd35 	bl	8039068 <iprintf>
 802d5fe:	2300      	movs	r3, #0
 802d600:	e096      	b.n	802d730 <netif_add+0x16c>

#if LWIP_IPV4
  if (ipaddr == NULL) {
 802d602:	68bb      	ldr	r3, [r7, #8]
 802d604:	2b00      	cmp	r3, #0
 802d606:	d101      	bne.n	802d60c <netif_add+0x48>
    ipaddr = ip_2_ip4(IP4_ADDR_ANY);
 802d608:	4b4f      	ldr	r3, [pc, #316]	; (802d748 <netif_add+0x184>)
 802d60a:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 802d60c:	687b      	ldr	r3, [r7, #4]
 802d60e:	2b00      	cmp	r3, #0
 802d610:	d101      	bne.n	802d616 <netif_add+0x52>
    netmask = ip_2_ip4(IP4_ADDR_ANY);
 802d612:	4b4d      	ldr	r3, [pc, #308]	; (802d748 <netif_add+0x184>)
 802d614:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 802d616:	683b      	ldr	r3, [r7, #0]
 802d618:	2b00      	cmp	r3, #0
 802d61a:	d101      	bne.n	802d620 <netif_add+0x5c>
    gw = ip_2_ip4(IP4_ADDR_ANY);
 802d61c:	4b4a      	ldr	r3, [pc, #296]	; (802d748 <netif_add+0x184>)
 802d61e:	603b      	str	r3, [r7, #0]
  }

  /* reset new interface configuration state */
  ip_addr_set_zero_ip4(&netif->ip_addr);
 802d620:	68fb      	ldr	r3, [r7, #12]
 802d622:	2200      	movs	r2, #0
 802d624:	605a      	str	r2, [r3, #4]
  ip_addr_set_zero_ip4(&netif->netmask);
 802d626:	68fb      	ldr	r3, [r7, #12]
 802d628:	2200      	movs	r2, #0
 802d62a:	609a      	str	r2, [r3, #8]
  ip_addr_set_zero_ip4(&netif->gw);
 802d62c:	68fb      	ldr	r3, [r7, #12]
 802d62e:	2200      	movs	r2, #0
 802d630:	60da      	str	r2, [r3, #12]
  netif->output = netif_null_output_ip4;
 802d632:	68fb      	ldr	r3, [r7, #12]
 802d634:	4a45      	ldr	r2, [pc, #276]	; (802d74c <netif_add+0x188>)
 802d636:	615a      	str	r2, [r3, #20]
#endif /* LWIP_IPV6_ADDRESS_LIFETIMES */
  }
  netif->output_ip6 = netif_null_output_ip6;
#endif /* LWIP_IPV6 */
  NETIF_SET_CHECKSUM_CTRL(netif, NETIF_CHECKSUM_ENABLE_ALL);
  netif->mtu = 0;
 802d638:	68fb      	ldr	r3, [r7, #12]
 802d63a:	2200      	movs	r2, #0
 802d63c:	849a      	strh	r2, [r3, #36]	; 0x24
  netif->flags = 0;
 802d63e:	68fb      	ldr	r3, [r7, #12]
 802d640:	2200      	movs	r2, #0
 802d642:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
#endif /* LWIP_IPV6 */
#if LWIP_NETIF_STATUS_CALLBACK
  netif->status_callback = NULL;
#endif /* LWIP_NETIF_STATUS_CALLBACK */
#if LWIP_NETIF_LINK_CALLBACK
  netif->link_callback = NULL;
 802d646:	68fb      	ldr	r3, [r7, #12]
 802d648:	2200      	movs	r2, #0
 802d64a:	61da      	str	r2, [r3, #28]
  netif->loop_first = NULL;
  netif->loop_last = NULL;
#endif /* ENABLE_LOOPBACK */

  /* remember netif specific state information data */
  netif->state = state;
 802d64c:	68fb      	ldr	r3, [r7, #12]
 802d64e:	6a3a      	ldr	r2, [r7, #32]
 802d650:	621a      	str	r2, [r3, #32]
  netif->num = netif_num;
 802d652:	4b3f      	ldr	r3, [pc, #252]	; (802d750 <netif_add+0x18c>)
 802d654:	781a      	ldrb	r2, [r3, #0]
 802d656:	68fb      	ldr	r3, [r7, #12]
 802d658:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  netif->input = input;
 802d65c:	68fb      	ldr	r3, [r7, #12]
 802d65e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 802d660:	611a      	str	r2, [r3, #16]
#if ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS
  netif->loop_cnt_current = 0;
#endif /* ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS */

#if LWIP_IPV4
  netif_set_addr(netif, ipaddr, netmask, gw);
 802d662:	683b      	ldr	r3, [r7, #0]
 802d664:	687a      	ldr	r2, [r7, #4]
 802d666:	68b9      	ldr	r1, [r7, #8]
 802d668:	68f8      	ldr	r0, [r7, #12]
 802d66a:	f000 f913 	bl	802d894 <netif_set_addr>
#endif /* LWIP_IPV4 */

  /* call user specified initialization function for netif */
  if (init(netif) != ERR_OK) {
 802d66e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802d670:	68f8      	ldr	r0, [r7, #12]
 802d672:	4798      	blx	r3
 802d674:	4603      	mov	r3, r0
 802d676:	2b00      	cmp	r3, #0
 802d678:	d001      	beq.n	802d67e <netif_add+0xba>
    return NULL;
 802d67a:	2300      	movs	r3, #0
 802d67c:	e058      	b.n	802d730 <netif_add+0x16c>
     */
  {
    struct netif *netif2;
    int num_netifs;
    do {
      if (netif->num == 255) {
 802d67e:	68fb      	ldr	r3, [r7, #12]
 802d680:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 802d684:	2bff      	cmp	r3, #255	; 0xff
 802d686:	d103      	bne.n	802d690 <netif_add+0xcc>
        netif->num = 0;
 802d688:	68fb      	ldr	r3, [r7, #12]
 802d68a:	2200      	movs	r2, #0
 802d68c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      }
      num_netifs = 0;
 802d690:	2300      	movs	r3, #0
 802d692:	613b      	str	r3, [r7, #16]
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 802d694:	4b2f      	ldr	r3, [pc, #188]	; (802d754 <netif_add+0x190>)
 802d696:	681b      	ldr	r3, [r3, #0]
 802d698:	617b      	str	r3, [r7, #20]
 802d69a:	e02b      	b.n	802d6f4 <netif_add+0x130>
        LWIP_ASSERT("netif already added", netif2 != netif);
 802d69c:	697a      	ldr	r2, [r7, #20]
 802d69e:	68fb      	ldr	r3, [r7, #12]
 802d6a0:	429a      	cmp	r2, r3
 802d6a2:	d106      	bne.n	802d6b2 <netif_add+0xee>
 802d6a4:	4b24      	ldr	r3, [pc, #144]	; (802d738 <netif_add+0x174>)
 802d6a6:	f240 128b 	movw	r2, #395	; 0x18b
 802d6aa:	492b      	ldr	r1, [pc, #172]	; (802d758 <netif_add+0x194>)
 802d6ac:	4824      	ldr	r0, [pc, #144]	; (802d740 <netif_add+0x17c>)
 802d6ae:	f00b fcdb 	bl	8039068 <iprintf>
        num_netifs++;
 802d6b2:	693b      	ldr	r3, [r7, #16]
 802d6b4:	3301      	adds	r3, #1
 802d6b6:	613b      	str	r3, [r7, #16]
        LWIP_ASSERT("too many netifs, max. supported number is 255", num_netifs <= 255);
 802d6b8:	693b      	ldr	r3, [r7, #16]
 802d6ba:	2bff      	cmp	r3, #255	; 0xff
 802d6bc:	dd06      	ble.n	802d6cc <netif_add+0x108>
 802d6be:	4b1e      	ldr	r3, [pc, #120]	; (802d738 <netif_add+0x174>)
 802d6c0:	f240 128d 	movw	r2, #397	; 0x18d
 802d6c4:	4925      	ldr	r1, [pc, #148]	; (802d75c <netif_add+0x198>)
 802d6c6:	481e      	ldr	r0, [pc, #120]	; (802d740 <netif_add+0x17c>)
 802d6c8:	f00b fcce 	bl	8039068 <iprintf>
        if (netif2->num == netif->num) {
 802d6cc:	697b      	ldr	r3, [r7, #20]
 802d6ce:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
 802d6d2:	68fb      	ldr	r3, [r7, #12]
 802d6d4:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 802d6d8:	429a      	cmp	r2, r3
 802d6da:	d108      	bne.n	802d6ee <netif_add+0x12a>
          netif->num++;
 802d6dc:	68fb      	ldr	r3, [r7, #12]
 802d6de:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 802d6e2:	3301      	adds	r3, #1
 802d6e4:	b2da      	uxtb	r2, r3
 802d6e6:	68fb      	ldr	r3, [r7, #12]
 802d6e8:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
          break;
 802d6ec:	e005      	b.n	802d6fa <netif_add+0x136>
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 802d6ee:	697b      	ldr	r3, [r7, #20]
 802d6f0:	681b      	ldr	r3, [r3, #0]
 802d6f2:	617b      	str	r3, [r7, #20]
 802d6f4:	697b      	ldr	r3, [r7, #20]
 802d6f6:	2b00      	cmp	r3, #0
 802d6f8:	d1d0      	bne.n	802d69c <netif_add+0xd8>
        }
      }
    } while (netif2 != NULL);
 802d6fa:	697b      	ldr	r3, [r7, #20]
 802d6fc:	2b00      	cmp	r3, #0
 802d6fe:	d1be      	bne.n	802d67e <netif_add+0xba>
  }
  if (netif->num == 254) {
 802d700:	68fb      	ldr	r3, [r7, #12]
 802d702:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 802d706:	2bfe      	cmp	r3, #254	; 0xfe
 802d708:	d103      	bne.n	802d712 <netif_add+0x14e>
    netif_num = 0;
 802d70a:	4b11      	ldr	r3, [pc, #68]	; (802d750 <netif_add+0x18c>)
 802d70c:	2200      	movs	r2, #0
 802d70e:	701a      	strb	r2, [r3, #0]
 802d710:	e006      	b.n	802d720 <netif_add+0x15c>
  } else {
    netif_num = (u8_t)(netif->num + 1);
 802d712:	68fb      	ldr	r3, [r7, #12]
 802d714:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 802d718:	3301      	adds	r3, #1
 802d71a:	b2da      	uxtb	r2, r3
 802d71c:	4b0c      	ldr	r3, [pc, #48]	; (802d750 <netif_add+0x18c>)
 802d71e:	701a      	strb	r2, [r3, #0]
  }

  /* add this netif to the list */
  netif->next = netif_list;
 802d720:	4b0c      	ldr	r3, [pc, #48]	; (802d754 <netif_add+0x190>)
 802d722:	681a      	ldr	r2, [r3, #0]
 802d724:	68fb      	ldr	r3, [r7, #12]
 802d726:	601a      	str	r2, [r3, #0]
  netif_list = netif;
 802d728:	4a0a      	ldr	r2, [pc, #40]	; (802d754 <netif_add+0x190>)
 802d72a:	68fb      	ldr	r3, [r7, #12]
 802d72c:	6013      	str	r3, [r2, #0]
#endif /* LWIP_IPV4 */
  LWIP_DEBUGF(NETIF_DEBUG, ("\n"));

  netif_invoke_ext_callback(netif, LWIP_NSC_NETIF_ADDED, NULL);

  return netif;
 802d72e:	68fb      	ldr	r3, [r7, #12]
}
 802d730:	4618      	mov	r0, r3
 802d732:	3718      	adds	r7, #24
 802d734:	46bd      	mov	sp, r7
 802d736:	bd80      	pop	{r7, pc}
 802d738:	0803ae10 	.word	0x0803ae10
 802d73c:	0803aea4 	.word	0x0803aea4
 802d740:	0803ae60 	.word	0x0803ae60
 802d744:	0803aec0 	.word	0x0803aec0
 802d748:	0803d62c 	.word	0x0803d62c
 802d74c:	0802db6f 	.word	0x0802db6f
 802d750:	2000ee00 	.word	0x2000ee00
 802d754:	2000edf8 	.word	0x2000edf8
 802d758:	0803aee4 	.word	0x0803aee4
 802d75c:	0803aef8 	.word	0x0803aef8

0802d760 <netif_do_ip_addr_changed>:

static void
netif_do_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 802d760:	b580      	push	{r7, lr}
 802d762:	b082      	sub	sp, #8
 802d764:	af00      	add	r7, sp, #0
 802d766:	6078      	str	r0, [r7, #4]
 802d768:	6039      	str	r1, [r7, #0]
#if LWIP_TCP
  tcp_netif_ip_addr_changed(old_addr, new_addr);
 802d76a:	6839      	ldr	r1, [r7, #0]
 802d76c:	6878      	ldr	r0, [r7, #4]
 802d76e:	f002 fec3 	bl	80304f8 <tcp_netif_ip_addr_changed>
#endif /* LWIP_TCP */
#if LWIP_UDP
  udp_netif_ip_addr_changed(old_addr, new_addr);
 802d772:	6839      	ldr	r1, [r7, #0]
 802d774:	6878      	ldr	r0, [r7, #4]
 802d776:	f008 f861 	bl	803583c <udp_netif_ip_addr_changed>
#endif /* LWIP_UDP */
#if LWIP_RAW
  raw_netif_ip_addr_changed(old_addr, new_addr);
#endif /* LWIP_RAW */
}
 802d77a:	bf00      	nop
 802d77c:	3708      	adds	r7, #8
 802d77e:	46bd      	mov	sp, r7
 802d780:	bd80      	pop	{r7, pc}
	...

0802d784 <netif_do_set_ipaddr>:

#if LWIP_IPV4
static int
netif_do_set_ipaddr(struct netif *netif, const ip4_addr_t *ipaddr, ip_addr_t *old_addr)
{
 802d784:	b580      	push	{r7, lr}
 802d786:	b086      	sub	sp, #24
 802d788:	af00      	add	r7, sp, #0
 802d78a:	60f8      	str	r0, [r7, #12]
 802d78c:	60b9      	str	r1, [r7, #8]
 802d78e:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT("invalid pointer", ipaddr != NULL);
 802d790:	68bb      	ldr	r3, [r7, #8]
 802d792:	2b00      	cmp	r3, #0
 802d794:	d106      	bne.n	802d7a4 <netif_do_set_ipaddr+0x20>
 802d796:	4b1d      	ldr	r3, [pc, #116]	; (802d80c <netif_do_set_ipaddr+0x88>)
 802d798:	f240 12cb 	movw	r2, #459	; 0x1cb
 802d79c:	491c      	ldr	r1, [pc, #112]	; (802d810 <netif_do_set_ipaddr+0x8c>)
 802d79e:	481d      	ldr	r0, [pc, #116]	; (802d814 <netif_do_set_ipaddr+0x90>)
 802d7a0:	f00b fc62 	bl	8039068 <iprintf>
  LWIP_ASSERT("invalid pointer", old_addr != NULL);
 802d7a4:	687b      	ldr	r3, [r7, #4]
 802d7a6:	2b00      	cmp	r3, #0
 802d7a8:	d106      	bne.n	802d7b8 <netif_do_set_ipaddr+0x34>
 802d7aa:	4b18      	ldr	r3, [pc, #96]	; (802d80c <netif_do_set_ipaddr+0x88>)
 802d7ac:	f44f 72e6 	mov.w	r2, #460	; 0x1cc
 802d7b0:	4917      	ldr	r1, [pc, #92]	; (802d810 <netif_do_set_ipaddr+0x8c>)
 802d7b2:	4818      	ldr	r0, [pc, #96]	; (802d814 <netif_do_set_ipaddr+0x90>)
 802d7b4:	f00b fc58 	bl	8039068 <iprintf>

  /* address is actually being changed? */
  if (ip4_addr_cmp(ipaddr, netif_ip4_addr(netif)) == 0) {
 802d7b8:	68bb      	ldr	r3, [r7, #8]
 802d7ba:	681a      	ldr	r2, [r3, #0]
 802d7bc:	68fb      	ldr	r3, [r7, #12]
 802d7be:	3304      	adds	r3, #4
 802d7c0:	681b      	ldr	r3, [r3, #0]
 802d7c2:	429a      	cmp	r2, r3
 802d7c4:	d01c      	beq.n	802d800 <netif_do_set_ipaddr+0x7c>
    ip_addr_t new_addr;
    *ip_2_ip4(&new_addr) = *ipaddr;
 802d7c6:	68bb      	ldr	r3, [r7, #8]
 802d7c8:	681b      	ldr	r3, [r3, #0]
 802d7ca:	617b      	str	r3, [r7, #20]
    IP_SET_TYPE_VAL(new_addr, IPADDR_TYPE_V4);

    ip_addr_copy(*old_addr, *netif_ip_addr4(netif));
 802d7cc:	68fb      	ldr	r3, [r7, #12]
 802d7ce:	3304      	adds	r3, #4
 802d7d0:	681a      	ldr	r2, [r3, #0]
 802d7d2:	687b      	ldr	r3, [r7, #4]
 802d7d4:	601a      	str	r2, [r3, #0]

    LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: netif address being changed\n"));
    netif_do_ip_addr_changed(old_addr, &new_addr);
 802d7d6:	f107 0314 	add.w	r3, r7, #20
 802d7da:	4619      	mov	r1, r3
 802d7dc:	6878      	ldr	r0, [r7, #4]
 802d7de:	f7ff ffbf 	bl	802d760 <netif_do_ip_addr_changed>

    mib2_remove_ip4(netif);
    mib2_remove_route_ip4(0, netif);
    /* set new IP address to netif */
    ip4_addr_set(ip_2_ip4(&netif->ip_addr), ipaddr);
 802d7e2:	68bb      	ldr	r3, [r7, #8]
 802d7e4:	2b00      	cmp	r3, #0
 802d7e6:	d002      	beq.n	802d7ee <netif_do_set_ipaddr+0x6a>
 802d7e8:	68bb      	ldr	r3, [r7, #8]
 802d7ea:	681b      	ldr	r3, [r3, #0]
 802d7ec:	e000      	b.n	802d7f0 <netif_do_set_ipaddr+0x6c>
 802d7ee:	2300      	movs	r3, #0
 802d7f0:	68fa      	ldr	r2, [r7, #12]
 802d7f2:	6053      	str	r3, [r2, #4]
    IP_SET_TYPE_VAL(netif->ip_addr, IPADDR_TYPE_V4);
    mib2_add_ip4(netif);
    mib2_add_route_ip4(0, netif);

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4);
 802d7f4:	2101      	movs	r1, #1
 802d7f6:	68f8      	ldr	r0, [r7, #12]
 802d7f8:	f000 f8d2 	bl	802d9a0 <netif_issue_reports>

    NETIF_STATUS_CALLBACK(netif);
    return 1; /* address changed */
 802d7fc:	2301      	movs	r3, #1
 802d7fe:	e000      	b.n	802d802 <netif_do_set_ipaddr+0x7e>
  }
  return 0; /* address unchanged */
 802d800:	2300      	movs	r3, #0
}
 802d802:	4618      	mov	r0, r3
 802d804:	3718      	adds	r7, #24
 802d806:	46bd      	mov	sp, r7
 802d808:	bd80      	pop	{r7, pc}
 802d80a:	bf00      	nop
 802d80c:	0803ae10 	.word	0x0803ae10
 802d810:	0803af28 	.word	0x0803af28
 802d814:	0803ae60 	.word	0x0803ae60

0802d818 <netif_do_set_netmask>:
  }
}

static int
netif_do_set_netmask(struct netif *netif, const ip4_addr_t *netmask, ip_addr_t *old_nm)
{
 802d818:	b480      	push	{r7}
 802d81a:	b085      	sub	sp, #20
 802d81c:	af00      	add	r7, sp, #0
 802d81e:	60f8      	str	r0, [r7, #12]
 802d820:	60b9      	str	r1, [r7, #8]
 802d822:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(netmask, netif_ip4_netmask(netif)) == 0) {
 802d824:	68bb      	ldr	r3, [r7, #8]
 802d826:	681a      	ldr	r2, [r3, #0]
 802d828:	68fb      	ldr	r3, [r7, #12]
 802d82a:	3308      	adds	r3, #8
 802d82c:	681b      	ldr	r3, [r3, #0]
 802d82e:	429a      	cmp	r2, r3
 802d830:	d00a      	beq.n	802d848 <netif_do_set_netmask+0x30>
#else
    LWIP_UNUSED_ARG(old_nm);
#endif
    mib2_remove_route_ip4(0, netif);
    /* set new netmask to netif */
    ip4_addr_set(ip_2_ip4(&netif->netmask), netmask);
 802d832:	68bb      	ldr	r3, [r7, #8]
 802d834:	2b00      	cmp	r3, #0
 802d836:	d002      	beq.n	802d83e <netif_do_set_netmask+0x26>
 802d838:	68bb      	ldr	r3, [r7, #8]
 802d83a:	681b      	ldr	r3, [r3, #0]
 802d83c:	e000      	b.n	802d840 <netif_do_set_netmask+0x28>
 802d83e:	2300      	movs	r3, #0
 802d840:	68fa      	ldr	r2, [r7, #12]
 802d842:	6093      	str	r3, [r2, #8]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_netmask(netif)),
                ip4_addr2_16(netif_ip4_netmask(netif)),
                ip4_addr3_16(netif_ip4_netmask(netif)),
                ip4_addr4_16(netif_ip4_netmask(netif))));
    return 1; /* netmask changed */
 802d844:	2301      	movs	r3, #1
 802d846:	e000      	b.n	802d84a <netif_do_set_netmask+0x32>
  }
  return 0; /* netmask unchanged */
 802d848:	2300      	movs	r3, #0
}
 802d84a:	4618      	mov	r0, r3
 802d84c:	3714      	adds	r7, #20
 802d84e:	46bd      	mov	sp, r7
 802d850:	f85d 7b04 	ldr.w	r7, [sp], #4
 802d854:	4770      	bx	lr

0802d856 <netif_do_set_gw>:
  }
}

static int
netif_do_set_gw(struct netif *netif, const ip4_addr_t *gw, ip_addr_t *old_gw)
{
 802d856:	b480      	push	{r7}
 802d858:	b085      	sub	sp, #20
 802d85a:	af00      	add	r7, sp, #0
 802d85c:	60f8      	str	r0, [r7, #12]
 802d85e:	60b9      	str	r1, [r7, #8]
 802d860:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(gw, netif_ip4_gw(netif)) == 0) {
 802d862:	68bb      	ldr	r3, [r7, #8]
 802d864:	681a      	ldr	r2, [r3, #0]
 802d866:	68fb      	ldr	r3, [r7, #12]
 802d868:	330c      	adds	r3, #12
 802d86a:	681b      	ldr	r3, [r3, #0]
 802d86c:	429a      	cmp	r2, r3
 802d86e:	d00a      	beq.n	802d886 <netif_do_set_gw+0x30>
    ip_addr_copy(*old_gw, *netif_ip_gw4(netif));
#else
    LWIP_UNUSED_ARG(old_gw);
#endif

    ip4_addr_set(ip_2_ip4(&netif->gw), gw);
 802d870:	68bb      	ldr	r3, [r7, #8]
 802d872:	2b00      	cmp	r3, #0
 802d874:	d002      	beq.n	802d87c <netif_do_set_gw+0x26>
 802d876:	68bb      	ldr	r3, [r7, #8]
 802d878:	681b      	ldr	r3, [r3, #0]
 802d87a:	e000      	b.n	802d87e <netif_do_set_gw+0x28>
 802d87c:	2300      	movs	r3, #0
 802d87e:	68fa      	ldr	r2, [r7, #12]
 802d880:	60d3      	str	r3, [r2, #12]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_gw(netif)),
                ip4_addr2_16(netif_ip4_gw(netif)),
                ip4_addr3_16(netif_ip4_gw(netif)),
                ip4_addr4_16(netif_ip4_gw(netif))));
    return 1; /* gateway changed */
 802d882:	2301      	movs	r3, #1
 802d884:	e000      	b.n	802d888 <netif_do_set_gw+0x32>
  }
  return 0; /* gateway unchanged */
 802d886:	2300      	movs	r3, #0
}
 802d888:	4618      	mov	r0, r3
 802d88a:	3714      	adds	r7, #20
 802d88c:	46bd      	mov	sp, r7
 802d88e:	f85d 7b04 	ldr.w	r7, [sp], #4
 802d892:	4770      	bx	lr

0802d894 <netif_set_addr>:
 * @param gw the new default gateway
 */
void
netif_set_addr(struct netif *netif, const ip4_addr_t *ipaddr, const ip4_addr_t *netmask,
               const ip4_addr_t *gw)
{
 802d894:	b580      	push	{r7, lr}
 802d896:	b088      	sub	sp, #32
 802d898:	af00      	add	r7, sp, #0
 802d89a:	60f8      	str	r0, [r7, #12]
 802d89c:	60b9      	str	r1, [r7, #8]
 802d89e:	607a      	str	r2, [r7, #4]
 802d8a0:	603b      	str	r3, [r7, #0]
  ip_addr_t old_nm_val;
  ip_addr_t old_gw_val;
  ip_addr_t *old_nm = &old_nm_val;
  ip_addr_t *old_gw = &old_gw_val;
#else
  ip_addr_t *old_nm = NULL;
 802d8a2:	2300      	movs	r3, #0
 802d8a4:	61fb      	str	r3, [r7, #28]
  ip_addr_t *old_gw = NULL;
 802d8a6:	2300      	movs	r3, #0
 802d8a8:	61bb      	str	r3, [r7, #24]
  int remove;

  LWIP_ASSERT_CORE_LOCKED();

  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 802d8aa:	68bb      	ldr	r3, [r7, #8]
 802d8ac:	2b00      	cmp	r3, #0
 802d8ae:	d101      	bne.n	802d8b4 <netif_set_addr+0x20>
    ipaddr = IP4_ADDR_ANY4;
 802d8b0:	4b1c      	ldr	r3, [pc, #112]	; (802d924 <netif_set_addr+0x90>)
 802d8b2:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 802d8b4:	687b      	ldr	r3, [r7, #4]
 802d8b6:	2b00      	cmp	r3, #0
 802d8b8:	d101      	bne.n	802d8be <netif_set_addr+0x2a>
    netmask = IP4_ADDR_ANY4;
 802d8ba:	4b1a      	ldr	r3, [pc, #104]	; (802d924 <netif_set_addr+0x90>)
 802d8bc:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 802d8be:	683b      	ldr	r3, [r7, #0]
 802d8c0:	2b00      	cmp	r3, #0
 802d8c2:	d101      	bne.n	802d8c8 <netif_set_addr+0x34>
    gw = IP4_ADDR_ANY4;
 802d8c4:	4b17      	ldr	r3, [pc, #92]	; (802d924 <netif_set_addr+0x90>)
 802d8c6:	603b      	str	r3, [r7, #0]
  }

  remove = ip4_addr_isany(ipaddr);
 802d8c8:	68bb      	ldr	r3, [r7, #8]
 802d8ca:	2b00      	cmp	r3, #0
 802d8cc:	d003      	beq.n	802d8d6 <netif_set_addr+0x42>
 802d8ce:	68bb      	ldr	r3, [r7, #8]
 802d8d0:	681b      	ldr	r3, [r3, #0]
 802d8d2:	2b00      	cmp	r3, #0
 802d8d4:	d101      	bne.n	802d8da <netif_set_addr+0x46>
 802d8d6:	2301      	movs	r3, #1
 802d8d8:	e000      	b.n	802d8dc <netif_set_addr+0x48>
 802d8da:	2300      	movs	r3, #0
 802d8dc:	617b      	str	r3, [r7, #20]
  if (remove) {
 802d8de:	697b      	ldr	r3, [r7, #20]
 802d8e0:	2b00      	cmp	r3, #0
 802d8e2:	d006      	beq.n	802d8f2 <netif_set_addr+0x5e>
    /* when removing an address, we have to remove it *before* changing netmask/gw
       to ensure that tcp RST segment can be sent correctly */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 802d8e4:	f107 0310 	add.w	r3, r7, #16
 802d8e8:	461a      	mov	r2, r3
 802d8ea:	68b9      	ldr	r1, [r7, #8]
 802d8ec:	68f8      	ldr	r0, [r7, #12]
 802d8ee:	f7ff ff49 	bl	802d784 <netif_do_set_ipaddr>
      change_reason |= LWIP_NSC_IPV4_ADDRESS_CHANGED;
      cb_args.ipv4_changed.old_address = &old_addr;
#endif
    }
  }
  if (netif_do_set_netmask(netif, netmask, old_nm)) {
 802d8f2:	69fa      	ldr	r2, [r7, #28]
 802d8f4:	6879      	ldr	r1, [r7, #4]
 802d8f6:	68f8      	ldr	r0, [r7, #12]
 802d8f8:	f7ff ff8e 	bl	802d818 <netif_do_set_netmask>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_NETMASK_CHANGED;
    cb_args.ipv4_changed.old_netmask = old_nm;
#endif
  }
  if (netif_do_set_gw(netif, gw, old_gw)) {
 802d8fc:	69ba      	ldr	r2, [r7, #24]
 802d8fe:	6839      	ldr	r1, [r7, #0]
 802d900:	68f8      	ldr	r0, [r7, #12]
 802d902:	f7ff ffa8 	bl	802d856 <netif_do_set_gw>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_GATEWAY_CHANGED;
    cb_args.ipv4_changed.old_gw = old_gw;
#endif
  }
  if (!remove) {
 802d906:	697b      	ldr	r3, [r7, #20]
 802d908:	2b00      	cmp	r3, #0
 802d90a:	d106      	bne.n	802d91a <netif_set_addr+0x86>
    /* set ipaddr last to ensure netmask/gw have been set when status callback is called */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 802d90c:	f107 0310 	add.w	r3, r7, #16
 802d910:	461a      	mov	r2, r3
 802d912:	68b9      	ldr	r1, [r7, #8]
 802d914:	68f8      	ldr	r0, [r7, #12]
 802d916:	f7ff ff35 	bl	802d784 <netif_do_set_ipaddr>
  if (change_reason != LWIP_NSC_NONE) {
    change_reason |= LWIP_NSC_IPV4_SETTINGS_CHANGED;
    netif_invoke_ext_callback(netif, change_reason, &cb_args);
  }
#endif
}
 802d91a:	bf00      	nop
 802d91c:	3720      	adds	r7, #32
 802d91e:	46bd      	mov	sp, r7
 802d920:	bd80      	pop	{r7, pc}
 802d922:	bf00      	nop
 802d924:	0803d62c 	.word	0x0803d62c

0802d928 <netif_set_default>:
 *
 * @param netif the default network interface
 */
void
netif_set_default(struct netif *netif)
{
 802d928:	b480      	push	{r7}
 802d92a:	b083      	sub	sp, #12
 802d92c:	af00      	add	r7, sp, #0
 802d92e:	6078      	str	r0, [r7, #4]
    mib2_remove_route_ip4(1, netif);
  } else {
    /* install default route */
    mib2_add_route_ip4(1, netif);
  }
  netif_default = netif;
 802d930:	4a04      	ldr	r2, [pc, #16]	; (802d944 <netif_set_default+0x1c>)
 802d932:	687b      	ldr	r3, [r7, #4]
 802d934:	6013      	str	r3, [r2, #0]
  LWIP_DEBUGF(NETIF_DEBUG, ("netif: setting default interface %c%c\n",
                            netif ? netif->name[0] : '\'', netif ? netif->name[1] : '\''));
}
 802d936:	bf00      	nop
 802d938:	370c      	adds	r7, #12
 802d93a:	46bd      	mov	sp, r7
 802d93c:	f85d 7b04 	ldr.w	r7, [sp], #4
 802d940:	4770      	bx	lr
 802d942:	bf00      	nop
 802d944:	2000edfc 	.word	0x2000edfc

0802d948 <netif_set_up>:
 * Bring an interface up, available for processing
 * traffic.
 */
void
netif_set_up(struct netif *netif)
{
 802d948:	b580      	push	{r7, lr}
 802d94a:	b082      	sub	sp, #8
 802d94c:	af00      	add	r7, sp, #0
 802d94e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_up: invalid netif", netif != NULL, return);
 802d950:	687b      	ldr	r3, [r7, #4]
 802d952:	2b00      	cmp	r3, #0
 802d954:	d107      	bne.n	802d966 <netif_set_up+0x1e>
 802d956:	4b0f      	ldr	r3, [pc, #60]	; (802d994 <netif_set_up+0x4c>)
 802d958:	f44f 7254 	mov.w	r2, #848	; 0x350
 802d95c:	490e      	ldr	r1, [pc, #56]	; (802d998 <netif_set_up+0x50>)
 802d95e:	480f      	ldr	r0, [pc, #60]	; (802d99c <netif_set_up+0x54>)
 802d960:	f00b fb82 	bl	8039068 <iprintf>
 802d964:	e013      	b.n	802d98e <netif_set_up+0x46>

  if (!(netif->flags & NETIF_FLAG_UP)) {
 802d966:	687b      	ldr	r3, [r7, #4]
 802d968:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 802d96c:	f003 0301 	and.w	r3, r3, #1
 802d970:	2b00      	cmp	r3, #0
 802d972:	d10c      	bne.n	802d98e <netif_set_up+0x46>
    netif_set_flags(netif, NETIF_FLAG_UP);
 802d974:	687b      	ldr	r3, [r7, #4]
 802d976:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 802d97a:	f043 0301 	orr.w	r3, r3, #1
 802d97e:	b2da      	uxtb	r2, r3
 802d980:	687b      	ldr	r3, [r7, #4]
 802d982:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
      args.status_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 802d986:	2103      	movs	r1, #3
 802d988:	6878      	ldr	r0, [r7, #4]
 802d98a:	f000 f809 	bl	802d9a0 <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */
  }
}
 802d98e:	3708      	adds	r7, #8
 802d990:	46bd      	mov	sp, r7
 802d992:	bd80      	pop	{r7, pc}
 802d994:	0803ae10 	.word	0x0803ae10
 802d998:	0803af98 	.word	0x0803af98
 802d99c:	0803ae60 	.word	0x0803ae60

0802d9a0 <netif_issue_reports>:

/** Send ARP/IGMP/MLD/RS events, e.g. on link-up/netif-up or addr-change
 */
static void
netif_issue_reports(struct netif *netif, u8_t report_type)
{
 802d9a0:	b580      	push	{r7, lr}
 802d9a2:	b082      	sub	sp, #8
 802d9a4:	af00      	add	r7, sp, #0
 802d9a6:	6078      	str	r0, [r7, #4]
 802d9a8:	460b      	mov	r3, r1
 802d9aa:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("netif_issue_reports: invalid netif", netif != NULL);
 802d9ac:	687b      	ldr	r3, [r7, #4]
 802d9ae:	2b00      	cmp	r3, #0
 802d9b0:	d106      	bne.n	802d9c0 <netif_issue_reports+0x20>
 802d9b2:	4b18      	ldr	r3, [pc, #96]	; (802da14 <netif_issue_reports+0x74>)
 802d9b4:	f240 326d 	movw	r2, #877	; 0x36d
 802d9b8:	4917      	ldr	r1, [pc, #92]	; (802da18 <netif_issue_reports+0x78>)
 802d9ba:	4818      	ldr	r0, [pc, #96]	; (802da1c <netif_issue_reports+0x7c>)
 802d9bc:	f00b fb54 	bl	8039068 <iprintf>

  /* Only send reports when both link and admin states are up */
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 802d9c0:	687b      	ldr	r3, [r7, #4]
 802d9c2:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 802d9c6:	f003 0304 	and.w	r3, r3, #4
 802d9ca:	2b00      	cmp	r3, #0
 802d9cc:	d01e      	beq.n	802da0c <netif_issue_reports+0x6c>
      !(netif->flags & NETIF_FLAG_UP)) {
 802d9ce:	687b      	ldr	r3, [r7, #4]
 802d9d0:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 802d9d4:	f003 0301 	and.w	r3, r3, #1
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 802d9d8:	2b00      	cmp	r3, #0
 802d9da:	d017      	beq.n	802da0c <netif_issue_reports+0x6c>
    return;
  }

#if LWIP_IPV4
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 802d9dc:	78fb      	ldrb	r3, [r7, #3]
 802d9de:	f003 0301 	and.w	r3, r3, #1
 802d9e2:	2b00      	cmp	r3, #0
 802d9e4:	d013      	beq.n	802da0e <netif_issue_reports+0x6e>
      !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 802d9e6:	687b      	ldr	r3, [r7, #4]
 802d9e8:	3304      	adds	r3, #4
 802d9ea:	681b      	ldr	r3, [r3, #0]
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 802d9ec:	2b00      	cmp	r3, #0
 802d9ee:	d00e      	beq.n	802da0e <netif_issue_reports+0x6e>
#if LWIP_ARP
    /* For Ethernet network interfaces, we would like to send a "gratuitous ARP" */
    if (netif->flags & (NETIF_FLAG_ETHARP)) {
 802d9f0:	687b      	ldr	r3, [r7, #4]
 802d9f2:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 802d9f6:	f003 0308 	and.w	r3, r3, #8
 802d9fa:	2b00      	cmp	r3, #0
 802d9fc:	d007      	beq.n	802da0e <netif_issue_reports+0x6e>
      etharp_gratuitous(netif);
 802d9fe:	687b      	ldr	r3, [r7, #4]
 802da00:	3304      	adds	r3, #4
 802da02:	4619      	mov	r1, r3
 802da04:	6878      	ldr	r0, [r7, #4]
 802da06:	f008 fec3 	bl	8036790 <etharp_request>
 802da0a:	e000      	b.n	802da0e <netif_issue_reports+0x6e>
    return;
 802da0c:	bf00      	nop
    /* send mld memberships */
    mld6_report_groups(netif);
#endif /* LWIP_IPV6_MLD */
  }
#endif /* LWIP_IPV6 */
}
 802da0e:	3708      	adds	r7, #8
 802da10:	46bd      	mov	sp, r7
 802da12:	bd80      	pop	{r7, pc}
 802da14:	0803ae10 	.word	0x0803ae10
 802da18:	0803afb4 	.word	0x0803afb4
 802da1c:	0803ae60 	.word	0x0803ae60

0802da20 <netif_set_down>:
 * @ingroup netif
 * Bring an interface down, disabling any traffic processing.
 */
void
netif_set_down(struct netif *netif)
{
 802da20:	b580      	push	{r7, lr}
 802da22:	b082      	sub	sp, #8
 802da24:	af00      	add	r7, sp, #0
 802da26:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_down: invalid netif", netif != NULL, return);
 802da28:	687b      	ldr	r3, [r7, #4]
 802da2a:	2b00      	cmp	r3, #0
 802da2c:	d107      	bne.n	802da3e <netif_set_down+0x1e>
 802da2e:	4b12      	ldr	r3, [pc, #72]	; (802da78 <netif_set_down+0x58>)
 802da30:	f240 329b 	movw	r2, #923	; 0x39b
 802da34:	4911      	ldr	r1, [pc, #68]	; (802da7c <netif_set_down+0x5c>)
 802da36:	4812      	ldr	r0, [pc, #72]	; (802da80 <netif_set_down+0x60>)
 802da38:	f00b fb16 	bl	8039068 <iprintf>
 802da3c:	e019      	b.n	802da72 <netif_set_down+0x52>

  if (netif->flags & NETIF_FLAG_UP) {
 802da3e:	687b      	ldr	r3, [r7, #4]
 802da40:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 802da44:	f003 0301 	and.w	r3, r3, #1
 802da48:	2b00      	cmp	r3, #0
 802da4a:	d012      	beq.n	802da72 <netif_set_down+0x52>
      args.status_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_clear_flags(netif, NETIF_FLAG_UP);
 802da4c:	687b      	ldr	r3, [r7, #4]
 802da4e:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 802da52:	f023 0301 	bic.w	r3, r3, #1
 802da56:	b2da      	uxtb	r2, r3
 802da58:	687b      	ldr	r3, [r7, #4]
 802da5a:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    MIB2_COPY_SYSUPTIME_TO(&netif->ts);

#if LWIP_IPV4 && LWIP_ARP
    if (netif->flags & NETIF_FLAG_ETHARP) {
 802da5e:	687b      	ldr	r3, [r7, #4]
 802da60:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 802da64:	f003 0308 	and.w	r3, r3, #8
 802da68:	2b00      	cmp	r3, #0
 802da6a:	d002      	beq.n	802da72 <netif_set_down+0x52>
      etharp_cleanup_netif(netif);
 802da6c:	6878      	ldr	r0, [r7, #4]
 802da6e:	f008 fa0d 	bl	8035e8c <etharp_cleanup_netif>
    nd6_cleanup_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_STATUS_CALLBACK(netif);
  }
}
 802da72:	3708      	adds	r7, #8
 802da74:	46bd      	mov	sp, r7
 802da76:	bd80      	pop	{r7, pc}
 802da78:	0803ae10 	.word	0x0803ae10
 802da7c:	0803afd8 	.word	0x0803afd8
 802da80:	0803ae60 	.word	0x0803ae60

0802da84 <netif_set_link_up>:
 * @ingroup netif
 * Called by a driver when its link goes up
 */
void
netif_set_link_up(struct netif *netif)
{
 802da84:	b580      	push	{r7, lr}
 802da86:	b082      	sub	sp, #8
 802da88:	af00      	add	r7, sp, #0
 802da8a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_up: invalid netif", netif != NULL, return);
 802da8c:	687b      	ldr	r3, [r7, #4]
 802da8e:	2b00      	cmp	r3, #0
 802da90:	d107      	bne.n	802daa2 <netif_set_link_up+0x1e>
 802da92:	4b13      	ldr	r3, [pc, #76]	; (802dae0 <netif_set_link_up+0x5c>)
 802da94:	f44f 7278 	mov.w	r2, #992	; 0x3e0
 802da98:	4912      	ldr	r1, [pc, #72]	; (802dae4 <netif_set_link_up+0x60>)
 802da9a:	4813      	ldr	r0, [pc, #76]	; (802dae8 <netif_set_link_up+0x64>)
 802da9c:	f00b fae4 	bl	8039068 <iprintf>
 802daa0:	e01b      	b.n	802dada <netif_set_link_up+0x56>

  if (!(netif->flags & NETIF_FLAG_LINK_UP)) {
 802daa2:	687b      	ldr	r3, [r7, #4]
 802daa4:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 802daa8:	f003 0304 	and.w	r3, r3, #4
 802daac:	2b00      	cmp	r3, #0
 802daae:	d114      	bne.n	802dada <netif_set_link_up+0x56>
    netif_set_flags(netif, NETIF_FLAG_LINK_UP);
 802dab0:	687b      	ldr	r3, [r7, #4]
 802dab2:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 802dab6:	f043 0304 	orr.w	r3, r3, #4
 802daba:	b2da      	uxtb	r2, r3
 802dabc:	687b      	ldr	r3, [r7, #4]
 802dabe:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

#if LWIP_AUTOIP
    autoip_network_changed(netif);
#endif /* LWIP_AUTOIP */

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 802dac2:	2103      	movs	r1, #3
 802dac4:	6878      	ldr	r0, [r7, #4]
 802dac6:	f7ff ff6b 	bl	802d9a0 <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_LINK_CALLBACK(netif);
 802daca:	687b      	ldr	r3, [r7, #4]
 802dacc:	69db      	ldr	r3, [r3, #28]
 802dace:	2b00      	cmp	r3, #0
 802dad0:	d003      	beq.n	802dada <netif_set_link_up+0x56>
 802dad2:	687b      	ldr	r3, [r7, #4]
 802dad4:	69db      	ldr	r3, [r3, #28]
 802dad6:	6878      	ldr	r0, [r7, #4]
 802dad8:	4798      	blx	r3
      args.link_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 802dada:	3708      	adds	r7, #8
 802dadc:	46bd      	mov	sp, r7
 802dade:	bd80      	pop	{r7, pc}
 802dae0:	0803ae10 	.word	0x0803ae10
 802dae4:	0803aff8 	.word	0x0803aff8
 802dae8:	0803ae60 	.word	0x0803ae60

0802daec <netif_set_link_down>:
 * @ingroup netif
 * Called by a driver when its link goes down
 */
void
netif_set_link_down(struct netif *netif)
{
 802daec:	b580      	push	{r7, lr}
 802daee:	b082      	sub	sp, #8
 802daf0:	af00      	add	r7, sp, #0
 802daf2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_down: invalid netif", netif != NULL, return);
 802daf4:	687b      	ldr	r3, [r7, #4]
 802daf6:	2b00      	cmp	r3, #0
 802daf8:	d107      	bne.n	802db0a <netif_set_link_down+0x1e>
 802dafa:	4b11      	ldr	r3, [pc, #68]	; (802db40 <netif_set_link_down+0x54>)
 802dafc:	f240 4206 	movw	r2, #1030	; 0x406
 802db00:	4910      	ldr	r1, [pc, #64]	; (802db44 <netif_set_link_down+0x58>)
 802db02:	4811      	ldr	r0, [pc, #68]	; (802db48 <netif_set_link_down+0x5c>)
 802db04:	f00b fab0 	bl	8039068 <iprintf>
 802db08:	e017      	b.n	802db3a <netif_set_link_down+0x4e>

  if (netif->flags & NETIF_FLAG_LINK_UP) {
 802db0a:	687b      	ldr	r3, [r7, #4]
 802db0c:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 802db10:	f003 0304 	and.w	r3, r3, #4
 802db14:	2b00      	cmp	r3, #0
 802db16:	d010      	beq.n	802db3a <netif_set_link_down+0x4e>
    netif_clear_flags(netif, NETIF_FLAG_LINK_UP);
 802db18:	687b      	ldr	r3, [r7, #4]
 802db1a:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 802db1e:	f023 0304 	bic.w	r3, r3, #4
 802db22:	b2da      	uxtb	r2, r3
 802db24:	687b      	ldr	r3, [r7, #4]
 802db26:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    NETIF_LINK_CALLBACK(netif);
 802db2a:	687b      	ldr	r3, [r7, #4]
 802db2c:	69db      	ldr	r3, [r3, #28]
 802db2e:	2b00      	cmp	r3, #0
 802db30:	d003      	beq.n	802db3a <netif_set_link_down+0x4e>
 802db32:	687b      	ldr	r3, [r7, #4]
 802db34:	69db      	ldr	r3, [r3, #28]
 802db36:	6878      	ldr	r0, [r7, #4]
 802db38:	4798      	blx	r3
      args.link_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 802db3a:	3708      	adds	r7, #8
 802db3c:	46bd      	mov	sp, r7
 802db3e:	bd80      	pop	{r7, pc}
 802db40:	0803ae10 	.word	0x0803ae10
 802db44:	0803b01c 	.word	0x0803b01c
 802db48:	0803ae60 	.word	0x0803ae60

0802db4c <netif_set_link_callback>:
 * @ingroup netif
 * Set callback to be called when link is brought up/down
 */
void
netif_set_link_callback(struct netif *netif, netif_status_callback_fn link_callback)
{
 802db4c:	b480      	push	{r7}
 802db4e:	b083      	sub	sp, #12
 802db50:	af00      	add	r7, sp, #0
 802db52:	6078      	str	r0, [r7, #4]
 802db54:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();

  if (netif) {
 802db56:	687b      	ldr	r3, [r7, #4]
 802db58:	2b00      	cmp	r3, #0
 802db5a:	d002      	beq.n	802db62 <netif_set_link_callback+0x16>
    netif->link_callback = link_callback;
 802db5c:	687b      	ldr	r3, [r7, #4]
 802db5e:	683a      	ldr	r2, [r7, #0]
 802db60:	61da      	str	r2, [r3, #28]
  }
}
 802db62:	bf00      	nop
 802db64:	370c      	adds	r7, #12
 802db66:	46bd      	mov	sp, r7
 802db68:	f85d 7b04 	ldr.w	r7, [sp], #4
 802db6c:	4770      	bx	lr

0802db6e <netif_null_output_ip4>:
#if LWIP_IPV4
/** Dummy IPv4 output function for netifs not supporting IPv4
 */
static err_t
netif_null_output_ip4(struct netif *netif, struct pbuf *p, const ip4_addr_t *ipaddr)
{
 802db6e:	b480      	push	{r7}
 802db70:	b085      	sub	sp, #20
 802db72:	af00      	add	r7, sp, #0
 802db74:	60f8      	str	r0, [r7, #12]
 802db76:	60b9      	str	r1, [r7, #8]
 802db78:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(netif);
  LWIP_UNUSED_ARG(p);
  LWIP_UNUSED_ARG(ipaddr);

  return ERR_IF;
 802db7a:	f06f 030b 	mvn.w	r3, #11
}
 802db7e:	4618      	mov	r0, r3
 802db80:	3714      	adds	r7, #20
 802db82:	46bd      	mov	sp, r7
 802db84:	f85d 7b04 	ldr.w	r7, [sp], #4
 802db88:	4770      	bx	lr
	...

0802db8c <netif_get_by_index>:
*
* @param idx index of netif to find
*/
struct netif *
netif_get_by_index(u8_t idx)
{
 802db8c:	b480      	push	{r7}
 802db8e:	b085      	sub	sp, #20
 802db90:	af00      	add	r7, sp, #0
 802db92:	4603      	mov	r3, r0
 802db94:	71fb      	strb	r3, [r7, #7]
  struct netif *netif;

  LWIP_ASSERT_CORE_LOCKED();

  if (idx != NETIF_NO_INDEX) {
 802db96:	79fb      	ldrb	r3, [r7, #7]
 802db98:	2b00      	cmp	r3, #0
 802db9a:	d013      	beq.n	802dbc4 <netif_get_by_index+0x38>
    NETIF_FOREACH(netif) {
 802db9c:	4b0d      	ldr	r3, [pc, #52]	; (802dbd4 <netif_get_by_index+0x48>)
 802db9e:	681b      	ldr	r3, [r3, #0]
 802dba0:	60fb      	str	r3, [r7, #12]
 802dba2:	e00c      	b.n	802dbbe <netif_get_by_index+0x32>
      if (idx == netif_get_index(netif)) {
 802dba4:	68fb      	ldr	r3, [r7, #12]
 802dba6:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 802dbaa:	3301      	adds	r3, #1
 802dbac:	b2db      	uxtb	r3, r3
 802dbae:	79fa      	ldrb	r2, [r7, #7]
 802dbb0:	429a      	cmp	r2, r3
 802dbb2:	d101      	bne.n	802dbb8 <netif_get_by_index+0x2c>
        return netif; /* found! */
 802dbb4:	68fb      	ldr	r3, [r7, #12]
 802dbb6:	e006      	b.n	802dbc6 <netif_get_by_index+0x3a>
    NETIF_FOREACH(netif) {
 802dbb8:	68fb      	ldr	r3, [r7, #12]
 802dbba:	681b      	ldr	r3, [r3, #0]
 802dbbc:	60fb      	str	r3, [r7, #12]
 802dbbe:	68fb      	ldr	r3, [r7, #12]
 802dbc0:	2b00      	cmp	r3, #0
 802dbc2:	d1ef      	bne.n	802dba4 <netif_get_by_index+0x18>
      }
    }
  }

  return NULL;
 802dbc4:	2300      	movs	r3, #0
}
 802dbc6:	4618      	mov	r0, r3
 802dbc8:	3714      	adds	r7, #20
 802dbca:	46bd      	mov	sp, r7
 802dbcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 802dbd0:	4770      	bx	lr
 802dbd2:	bf00      	nop
 802dbd4:	2000edf8 	.word	0x2000edf8

0802dbd8 <pbuf_free_ooseq>:
#if !NO_SYS
static
#endif /* !NO_SYS */
void
pbuf_free_ooseq(void)
{
 802dbd8:	b580      	push	{r7, lr}
 802dbda:	b082      	sub	sp, #8
 802dbdc:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 0);
 802dbde:	f00a fcb5 	bl	803854c <sys_arch_protect>
 802dbe2:	6038      	str	r0, [r7, #0]
 802dbe4:	4b0d      	ldr	r3, [pc, #52]	; (802dc1c <pbuf_free_ooseq+0x44>)
 802dbe6:	2200      	movs	r2, #0
 802dbe8:	701a      	strb	r2, [r3, #0]
 802dbea:	6838      	ldr	r0, [r7, #0]
 802dbec:	f00a fcbc 	bl	8038568 <sys_arch_unprotect>

  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 802dbf0:	4b0b      	ldr	r3, [pc, #44]	; (802dc20 <pbuf_free_ooseq+0x48>)
 802dbf2:	681b      	ldr	r3, [r3, #0]
 802dbf4:	607b      	str	r3, [r7, #4]
 802dbf6:	e00a      	b.n	802dc0e <pbuf_free_ooseq+0x36>
    if (pcb->ooseq != NULL) {
 802dbf8:	687b      	ldr	r3, [r7, #4]
 802dbfa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 802dbfc:	2b00      	cmp	r3, #0
 802dbfe:	d003      	beq.n	802dc08 <pbuf_free_ooseq+0x30>
      /** Free the ooseq pbufs of one PCB only */
      LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free_ooseq: freeing out-of-sequence pbufs\n"));
      tcp_free_ooseq(pcb);
 802dc00:	6878      	ldr	r0, [r7, #4]
 802dc02:	f002 fcb7 	bl	8030574 <tcp_free_ooseq>
      return;
 802dc06:	e005      	b.n	802dc14 <pbuf_free_ooseq+0x3c>
  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 802dc08:	687b      	ldr	r3, [r7, #4]
 802dc0a:	68db      	ldr	r3, [r3, #12]
 802dc0c:	607b      	str	r3, [r7, #4]
 802dc0e:	687b      	ldr	r3, [r7, #4]
 802dc10:	2b00      	cmp	r3, #0
 802dc12:	d1f1      	bne.n	802dbf8 <pbuf_free_ooseq+0x20>
    }
  }
}
 802dc14:	3708      	adds	r7, #8
 802dc16:	46bd      	mov	sp, r7
 802dc18:	bd80      	pop	{r7, pc}
 802dc1a:	bf00      	nop
 802dc1c:	2000ee01 	.word	0x2000ee01
 802dc20:	2000ef0c 	.word	0x2000ef0c

0802dc24 <pbuf_free_ooseq_callback>:
/**
 * Just a callback function for tcpip_callback() that calls pbuf_free_ooseq().
 */
static void
pbuf_free_ooseq_callback(void *arg)
{
 802dc24:	b580      	push	{r7, lr}
 802dc26:	b082      	sub	sp, #8
 802dc28:	af00      	add	r7, sp, #0
 802dc2a:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);
  pbuf_free_ooseq();
 802dc2c:	f7ff ffd4 	bl	802dbd8 <pbuf_free_ooseq>
}
 802dc30:	bf00      	nop
 802dc32:	3708      	adds	r7, #8
 802dc34:	46bd      	mov	sp, r7
 802dc36:	bd80      	pop	{r7, pc}

0802dc38 <pbuf_pool_is_empty>:
#endif /* !NO_SYS */

/** Queue a call to pbuf_free_ooseq if not already queued. */
static void
pbuf_pool_is_empty(void)
{
 802dc38:	b580      	push	{r7, lr}
 802dc3a:	b082      	sub	sp, #8
 802dc3c:	af00      	add	r7, sp, #0
#ifndef PBUF_POOL_FREE_OOSEQ_QUEUE_CALL
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 1);
#else /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
  u8_t queued;
  SYS_ARCH_DECL_PROTECT(old_level);
  SYS_ARCH_PROTECT(old_level);
 802dc3e:	f00a fc85 	bl	803854c <sys_arch_protect>
 802dc42:	6078      	str	r0, [r7, #4]
  queued = pbuf_free_ooseq_pending;
 802dc44:	4b0f      	ldr	r3, [pc, #60]	; (802dc84 <pbuf_pool_is_empty+0x4c>)
 802dc46:	781b      	ldrb	r3, [r3, #0]
 802dc48:	70fb      	strb	r3, [r7, #3]
  pbuf_free_ooseq_pending = 1;
 802dc4a:	4b0e      	ldr	r3, [pc, #56]	; (802dc84 <pbuf_pool_is_empty+0x4c>)
 802dc4c:	2201      	movs	r2, #1
 802dc4e:	701a      	strb	r2, [r3, #0]
  SYS_ARCH_UNPROTECT(old_level);
 802dc50:	6878      	ldr	r0, [r7, #4]
 802dc52:	f00a fc89 	bl	8038568 <sys_arch_unprotect>

  if (!queued) {
 802dc56:	78fb      	ldrb	r3, [r7, #3]
 802dc58:	2b00      	cmp	r3, #0
 802dc5a:	d10f      	bne.n	802dc7c <pbuf_pool_is_empty+0x44>
    /* queue a call to pbuf_free_ooseq if not already queued */
    PBUF_POOL_FREE_OOSEQ_QUEUE_CALL();
 802dc5c:	2100      	movs	r1, #0
 802dc5e:	480a      	ldr	r0, [pc, #40]	; (802dc88 <pbuf_pool_is_empty+0x50>)
 802dc60:	f7fe fdc0 	bl	802c7e4 <tcpip_try_callback>
 802dc64:	4603      	mov	r3, r0
 802dc66:	2b00      	cmp	r3, #0
 802dc68:	d008      	beq.n	802dc7c <pbuf_pool_is_empty+0x44>
 802dc6a:	f00a fc6f 	bl	803854c <sys_arch_protect>
 802dc6e:	6078      	str	r0, [r7, #4]
 802dc70:	4b04      	ldr	r3, [pc, #16]	; (802dc84 <pbuf_pool_is_empty+0x4c>)
 802dc72:	2200      	movs	r2, #0
 802dc74:	701a      	strb	r2, [r3, #0]
 802dc76:	6878      	ldr	r0, [r7, #4]
 802dc78:	f00a fc76 	bl	8038568 <sys_arch_unprotect>
  }
#endif /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
}
 802dc7c:	bf00      	nop
 802dc7e:	3708      	adds	r7, #8
 802dc80:	46bd      	mov	sp, r7
 802dc82:	bd80      	pop	{r7, pc}
 802dc84:	2000ee01 	.word	0x2000ee01
 802dc88:	0802dc25 	.word	0x0802dc25

0802dc8c <pbuf_init_alloced_pbuf>:
#endif /* !LWIP_TCP || !TCP_QUEUE_OOSEQ || !PBUF_POOL_FREE_OOSEQ */

/* Initialize members of struct pbuf after allocation */
static void
pbuf_init_alloced_pbuf(struct pbuf *p, void *payload, u16_t tot_len, u16_t len, pbuf_type type, u8_t flags)
{
 802dc8c:	b480      	push	{r7}
 802dc8e:	b085      	sub	sp, #20
 802dc90:	af00      	add	r7, sp, #0
 802dc92:	60f8      	str	r0, [r7, #12]
 802dc94:	60b9      	str	r1, [r7, #8]
 802dc96:	4611      	mov	r1, r2
 802dc98:	461a      	mov	r2, r3
 802dc9a:	460b      	mov	r3, r1
 802dc9c:	80fb      	strh	r3, [r7, #6]
 802dc9e:	4613      	mov	r3, r2
 802dca0:	80bb      	strh	r3, [r7, #4]
  p->next = NULL;
 802dca2:	68fb      	ldr	r3, [r7, #12]
 802dca4:	2200      	movs	r2, #0
 802dca6:	601a      	str	r2, [r3, #0]
  p->payload = payload;
 802dca8:	68fb      	ldr	r3, [r7, #12]
 802dcaa:	68ba      	ldr	r2, [r7, #8]
 802dcac:	605a      	str	r2, [r3, #4]
  p->tot_len = tot_len;
 802dcae:	68fb      	ldr	r3, [r7, #12]
 802dcb0:	88fa      	ldrh	r2, [r7, #6]
 802dcb2:	811a      	strh	r2, [r3, #8]
  p->len = len;
 802dcb4:	68fb      	ldr	r3, [r7, #12]
 802dcb6:	88ba      	ldrh	r2, [r7, #4]
 802dcb8:	815a      	strh	r2, [r3, #10]
  p->type_internal = (u8_t)type;
 802dcba:	8b3b      	ldrh	r3, [r7, #24]
 802dcbc:	b2da      	uxtb	r2, r3
 802dcbe:	68fb      	ldr	r3, [r7, #12]
 802dcc0:	731a      	strb	r2, [r3, #12]
  p->flags = flags;
 802dcc2:	68fb      	ldr	r3, [r7, #12]
 802dcc4:	7f3a      	ldrb	r2, [r7, #28]
 802dcc6:	735a      	strb	r2, [r3, #13]
  p->ref = 1;
 802dcc8:	68fb      	ldr	r3, [r7, #12]
 802dcca:	2201      	movs	r2, #1
 802dccc:	739a      	strb	r2, [r3, #14]
  p->if_idx = NETIF_NO_INDEX;
 802dcce:	68fb      	ldr	r3, [r7, #12]
 802dcd0:	2200      	movs	r2, #0
 802dcd2:	73da      	strb	r2, [r3, #15]
}
 802dcd4:	bf00      	nop
 802dcd6:	3714      	adds	r7, #20
 802dcd8:	46bd      	mov	sp, r7
 802dcda:	f85d 7b04 	ldr.w	r7, [sp], #4
 802dcde:	4770      	bx	lr

0802dce0 <pbuf_alloc>:
 * @return the allocated pbuf. If multiple pbufs where allocated, this
 * is the first pbuf of a pbuf chain.
 */
struct pbuf *
pbuf_alloc(pbuf_layer layer, u16_t length, pbuf_type type)
{
 802dce0:	b580      	push	{r7, lr}
 802dce2:	b08c      	sub	sp, #48	; 0x30
 802dce4:	af02      	add	r7, sp, #8
 802dce6:	4603      	mov	r3, r0
 802dce8:	71fb      	strb	r3, [r7, #7]
 802dcea:	460b      	mov	r3, r1
 802dcec:	80bb      	strh	r3, [r7, #4]
 802dcee:	4613      	mov	r3, r2
 802dcf0:	807b      	strh	r3, [r7, #2]
  struct pbuf *p;
  u16_t offset = (u16_t)layer;
 802dcf2:	79fb      	ldrb	r3, [r7, #7]
 802dcf4:	847b      	strh	r3, [r7, #34]	; 0x22
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F")\n", length));

  switch (type) {
 802dcf6:	887b      	ldrh	r3, [r7, #2]
 802dcf8:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 802dcfc:	d07f      	beq.n	802ddfe <pbuf_alloc+0x11e>
 802dcfe:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 802dd02:	f300 80c8 	bgt.w	802de96 <pbuf_alloc+0x1b6>
 802dd06:	f5b3 7fc1 	cmp.w	r3, #386	; 0x182
 802dd0a:	d010      	beq.n	802dd2e <pbuf_alloc+0x4e>
 802dd0c:	f5b3 7fc1 	cmp.w	r3, #386	; 0x182
 802dd10:	f300 80c1 	bgt.w	802de96 <pbuf_alloc+0x1b6>
 802dd14:	2b01      	cmp	r3, #1
 802dd16:	d002      	beq.n	802dd1e <pbuf_alloc+0x3e>
 802dd18:	2b41      	cmp	r3, #65	; 0x41
 802dd1a:	f040 80bc 	bne.w	802de96 <pbuf_alloc+0x1b6>
    case PBUF_REF: /* fall through */
    case PBUF_ROM:
      p = pbuf_alloc_reference(NULL, length, type);
 802dd1e:	887a      	ldrh	r2, [r7, #2]
 802dd20:	88bb      	ldrh	r3, [r7, #4]
 802dd22:	4619      	mov	r1, r3
 802dd24:	2000      	movs	r0, #0
 802dd26:	f000 f8d1 	bl	802decc <pbuf_alloc_reference>
 802dd2a:	6278      	str	r0, [r7, #36]	; 0x24
      break;
 802dd2c:	e0bd      	b.n	802deaa <pbuf_alloc+0x1ca>
    case PBUF_POOL: {
      struct pbuf *q, *last;
      u16_t rem_len; /* remaining length */
      p = NULL;
 802dd2e:	2300      	movs	r3, #0
 802dd30:	627b      	str	r3, [r7, #36]	; 0x24
      last = NULL;
 802dd32:	2300      	movs	r3, #0
 802dd34:	61fb      	str	r3, [r7, #28]
      rem_len = length;
 802dd36:	88bb      	ldrh	r3, [r7, #4]
 802dd38:	837b      	strh	r3, [r7, #26]
      do {
        u16_t qlen;
        q = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
 802dd3a:	200c      	movs	r0, #12
 802dd3c:	f7ff fb94 	bl	802d468 <memp_malloc>
 802dd40:	6138      	str	r0, [r7, #16]
        if (q == NULL) {
 802dd42:	693b      	ldr	r3, [r7, #16]
 802dd44:	2b00      	cmp	r3, #0
 802dd46:	d109      	bne.n	802dd5c <pbuf_alloc+0x7c>
          PBUF_POOL_IS_EMPTY();
 802dd48:	f7ff ff76 	bl	802dc38 <pbuf_pool_is_empty>
          /* free chain so far allocated */
          if (p) {
 802dd4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802dd4e:	2b00      	cmp	r3, #0
 802dd50:	d002      	beq.n	802dd58 <pbuf_alloc+0x78>
            pbuf_free(p);
 802dd52:	6a78      	ldr	r0, [r7, #36]	; 0x24
 802dd54:	f000 fada 	bl	802e30c <pbuf_free>
          }
          /* bail out unsuccessfully */
          return NULL;
 802dd58:	2300      	movs	r3, #0
 802dd5a:	e0a7      	b.n	802deac <pbuf_alloc+0x1cc>
        }
        qlen = LWIP_MIN(rem_len, (u16_t)(PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)));
 802dd5c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 802dd5e:	3303      	adds	r3, #3
 802dd60:	b29b      	uxth	r3, r3
 802dd62:	f023 0303 	bic.w	r3, r3, #3
 802dd66:	b29b      	uxth	r3, r3
 802dd68:	f5c3 7314 	rsb	r3, r3, #592	; 0x250
 802dd6c:	b29b      	uxth	r3, r3
 802dd6e:	8b7a      	ldrh	r2, [r7, #26]
 802dd70:	4293      	cmp	r3, r2
 802dd72:	bf28      	it	cs
 802dd74:	4613      	movcs	r3, r2
 802dd76:	81fb      	strh	r3, [r7, #14]
        pbuf_init_alloced_pbuf(q, LWIP_MEM_ALIGN((void *)((u8_t *)q + SIZEOF_STRUCT_PBUF + offset)),
 802dd78:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 802dd7a:	3310      	adds	r3, #16
 802dd7c:	693a      	ldr	r2, [r7, #16]
 802dd7e:	4413      	add	r3, r2
 802dd80:	3303      	adds	r3, #3
 802dd82:	f023 0303 	bic.w	r3, r3, #3
 802dd86:	4618      	mov	r0, r3
 802dd88:	89f9      	ldrh	r1, [r7, #14]
 802dd8a:	8b7a      	ldrh	r2, [r7, #26]
 802dd8c:	2300      	movs	r3, #0
 802dd8e:	9301      	str	r3, [sp, #4]
 802dd90:	887b      	ldrh	r3, [r7, #2]
 802dd92:	9300      	str	r3, [sp, #0]
 802dd94:	460b      	mov	r3, r1
 802dd96:	4601      	mov	r1, r0
 802dd98:	6938      	ldr	r0, [r7, #16]
 802dd9a:	f7ff ff77 	bl	802dc8c <pbuf_init_alloced_pbuf>
                               rem_len, qlen, type, 0);
        LWIP_ASSERT("pbuf_alloc: pbuf q->payload properly aligned",
 802dd9e:	693b      	ldr	r3, [r7, #16]
 802dda0:	685b      	ldr	r3, [r3, #4]
 802dda2:	f003 0303 	and.w	r3, r3, #3
 802dda6:	2b00      	cmp	r3, #0
 802dda8:	d006      	beq.n	802ddb8 <pbuf_alloc+0xd8>
 802ddaa:	4b42      	ldr	r3, [pc, #264]	; (802deb4 <pbuf_alloc+0x1d4>)
 802ddac:	f44f 7280 	mov.w	r2, #256	; 0x100
 802ddb0:	4941      	ldr	r1, [pc, #260]	; (802deb8 <pbuf_alloc+0x1d8>)
 802ddb2:	4842      	ldr	r0, [pc, #264]	; (802debc <pbuf_alloc+0x1dc>)
 802ddb4:	f00b f958 	bl	8039068 <iprintf>
                    ((mem_ptr_t)q->payload % MEM_ALIGNMENT) == 0);
        LWIP_ASSERT("PBUF_POOL_BUFSIZE must be bigger than MEM_ALIGNMENT",
 802ddb8:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 802ddba:	3303      	adds	r3, #3
 802ddbc:	f023 0303 	bic.w	r3, r3, #3
 802ddc0:	f5b3 7f14 	cmp.w	r3, #592	; 0x250
 802ddc4:	d106      	bne.n	802ddd4 <pbuf_alloc+0xf4>
 802ddc6:	4b3b      	ldr	r3, [pc, #236]	; (802deb4 <pbuf_alloc+0x1d4>)
 802ddc8:	f44f 7281 	mov.w	r2, #258	; 0x102
 802ddcc:	493c      	ldr	r1, [pc, #240]	; (802dec0 <pbuf_alloc+0x1e0>)
 802ddce:	483b      	ldr	r0, [pc, #236]	; (802debc <pbuf_alloc+0x1dc>)
 802ddd0:	f00b f94a 	bl	8039068 <iprintf>
                    (PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)) > 0 );
        if (p == NULL) {
 802ddd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802ddd6:	2b00      	cmp	r3, #0
 802ddd8:	d102      	bne.n	802dde0 <pbuf_alloc+0x100>
          /* allocated head of pbuf chain (into p) */
          p = q;
 802ddda:	693b      	ldr	r3, [r7, #16]
 802dddc:	627b      	str	r3, [r7, #36]	; 0x24
 802ddde:	e002      	b.n	802dde6 <pbuf_alloc+0x106>
        } else {
          /* make previous pbuf point to this pbuf */
          last->next = q;
 802dde0:	69fb      	ldr	r3, [r7, #28]
 802dde2:	693a      	ldr	r2, [r7, #16]
 802dde4:	601a      	str	r2, [r3, #0]
        }
        last = q;
 802dde6:	693b      	ldr	r3, [r7, #16]
 802dde8:	61fb      	str	r3, [r7, #28]
        rem_len = (u16_t)(rem_len - qlen);
 802ddea:	8b7a      	ldrh	r2, [r7, #26]
 802ddec:	89fb      	ldrh	r3, [r7, #14]
 802ddee:	1ad3      	subs	r3, r2, r3
 802ddf0:	837b      	strh	r3, [r7, #26]
        offset = 0;
 802ddf2:	2300      	movs	r3, #0
 802ddf4:	847b      	strh	r3, [r7, #34]	; 0x22
      } while (rem_len > 0);
 802ddf6:	8b7b      	ldrh	r3, [r7, #26]
 802ddf8:	2b00      	cmp	r3, #0
 802ddfa:	d19e      	bne.n	802dd3a <pbuf_alloc+0x5a>
      break;
 802ddfc:	e055      	b.n	802deaa <pbuf_alloc+0x1ca>
    }
    case PBUF_RAM: {
      u16_t payload_len = (u16_t)(LWIP_MEM_ALIGN_SIZE(offset) + LWIP_MEM_ALIGN_SIZE(length));
 802ddfe:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 802de00:	3303      	adds	r3, #3
 802de02:	b29b      	uxth	r3, r3
 802de04:	f023 0303 	bic.w	r3, r3, #3
 802de08:	b29a      	uxth	r2, r3
 802de0a:	88bb      	ldrh	r3, [r7, #4]
 802de0c:	3303      	adds	r3, #3
 802de0e:	b29b      	uxth	r3, r3
 802de10:	f023 0303 	bic.w	r3, r3, #3
 802de14:	b29b      	uxth	r3, r3
 802de16:	4413      	add	r3, r2
 802de18:	833b      	strh	r3, [r7, #24]
      mem_size_t alloc_len = (mem_size_t)(LWIP_MEM_ALIGN_SIZE(SIZEOF_STRUCT_PBUF) + payload_len);
 802de1a:	8b3b      	ldrh	r3, [r7, #24]
 802de1c:	3310      	adds	r3, #16
 802de1e:	82fb      	strh	r3, [r7, #22]

      /* bug #50040: Check for integer overflow when calculating alloc_len */
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 802de20:	8b3a      	ldrh	r2, [r7, #24]
 802de22:	88bb      	ldrh	r3, [r7, #4]
 802de24:	3303      	adds	r3, #3
 802de26:	f023 0303 	bic.w	r3, r3, #3
 802de2a:	429a      	cmp	r2, r3
 802de2c:	d306      	bcc.n	802de3c <pbuf_alloc+0x15c>
          (alloc_len < LWIP_MEM_ALIGN_SIZE(length))) {
 802de2e:	8afa      	ldrh	r2, [r7, #22]
 802de30:	88bb      	ldrh	r3, [r7, #4]
 802de32:	3303      	adds	r3, #3
 802de34:	f023 0303 	bic.w	r3, r3, #3
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 802de38:	429a      	cmp	r2, r3
 802de3a:	d201      	bcs.n	802de40 <pbuf_alloc+0x160>
        return NULL;
 802de3c:	2300      	movs	r3, #0
 802de3e:	e035      	b.n	802deac <pbuf_alloc+0x1cc>
      }

      /* If pbuf is to be allocated in RAM, allocate memory for it. */
      p = (struct pbuf *)mem_malloc(alloc_len);
 802de40:	8afb      	ldrh	r3, [r7, #22]
 802de42:	4618      	mov	r0, r3
 802de44:	f7ff f900 	bl	802d048 <mem_malloc>
 802de48:	6278      	str	r0, [r7, #36]	; 0x24
      if (p == NULL) {
 802de4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802de4c:	2b00      	cmp	r3, #0
 802de4e:	d101      	bne.n	802de54 <pbuf_alloc+0x174>
        return NULL;
 802de50:	2300      	movs	r3, #0
 802de52:	e02b      	b.n	802deac <pbuf_alloc+0x1cc>
      }
      pbuf_init_alloced_pbuf(p, LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset)),
 802de54:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 802de56:	3310      	adds	r3, #16
 802de58:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 802de5a:	4413      	add	r3, r2
 802de5c:	3303      	adds	r3, #3
 802de5e:	f023 0303 	bic.w	r3, r3, #3
 802de62:	4618      	mov	r0, r3
 802de64:	88b9      	ldrh	r1, [r7, #4]
 802de66:	88ba      	ldrh	r2, [r7, #4]
 802de68:	2300      	movs	r3, #0
 802de6a:	9301      	str	r3, [sp, #4]
 802de6c:	887b      	ldrh	r3, [r7, #2]
 802de6e:	9300      	str	r3, [sp, #0]
 802de70:	460b      	mov	r3, r1
 802de72:	4601      	mov	r1, r0
 802de74:	6a78      	ldr	r0, [r7, #36]	; 0x24
 802de76:	f7ff ff09 	bl	802dc8c <pbuf_init_alloced_pbuf>
                             length, length, type, 0);
      LWIP_ASSERT("pbuf_alloc: pbuf->payload properly aligned",
 802de7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802de7c:	685b      	ldr	r3, [r3, #4]
 802de7e:	f003 0303 	and.w	r3, r3, #3
 802de82:	2b00      	cmp	r3, #0
 802de84:	d010      	beq.n	802dea8 <pbuf_alloc+0x1c8>
 802de86:	4b0b      	ldr	r3, [pc, #44]	; (802deb4 <pbuf_alloc+0x1d4>)
 802de88:	f44f 7291 	mov.w	r2, #290	; 0x122
 802de8c:	490d      	ldr	r1, [pc, #52]	; (802dec4 <pbuf_alloc+0x1e4>)
 802de8e:	480b      	ldr	r0, [pc, #44]	; (802debc <pbuf_alloc+0x1dc>)
 802de90:	f00b f8ea 	bl	8039068 <iprintf>
                  ((mem_ptr_t)p->payload % MEM_ALIGNMENT) == 0);
      break;
 802de94:	e008      	b.n	802dea8 <pbuf_alloc+0x1c8>
    }
    default:
      LWIP_ASSERT("pbuf_alloc: erroneous type", 0);
 802de96:	4b07      	ldr	r3, [pc, #28]	; (802deb4 <pbuf_alloc+0x1d4>)
 802de98:	f240 1227 	movw	r2, #295	; 0x127
 802de9c:	490a      	ldr	r1, [pc, #40]	; (802dec8 <pbuf_alloc+0x1e8>)
 802de9e:	4807      	ldr	r0, [pc, #28]	; (802debc <pbuf_alloc+0x1dc>)
 802dea0:	f00b f8e2 	bl	8039068 <iprintf>
      return NULL;
 802dea4:	2300      	movs	r3, #0
 802dea6:	e001      	b.n	802deac <pbuf_alloc+0x1cc>
      break;
 802dea8:	bf00      	nop
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F") == %p\n", length, (void *)p));
  return p;
 802deaa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 802deac:	4618      	mov	r0, r3
 802deae:	3728      	adds	r7, #40	; 0x28
 802deb0:	46bd      	mov	sp, r7
 802deb2:	bd80      	pop	{r7, pc}
 802deb4:	0803b040 	.word	0x0803b040
 802deb8:	0803b070 	.word	0x0803b070
 802debc:	0803b0a0 	.word	0x0803b0a0
 802dec0:	0803b0c8 	.word	0x0803b0c8
 802dec4:	0803b0fc 	.word	0x0803b0fc
 802dec8:	0803b128 	.word	0x0803b128

0802decc <pbuf_alloc_reference>:
 *
 * @return the allocated pbuf.
 */
struct pbuf *
pbuf_alloc_reference(void *payload, u16_t length, pbuf_type type)
{
 802decc:	b580      	push	{r7, lr}
 802dece:	b086      	sub	sp, #24
 802ded0:	af02      	add	r7, sp, #8
 802ded2:	6078      	str	r0, [r7, #4]
 802ded4:	460b      	mov	r3, r1
 802ded6:	807b      	strh	r3, [r7, #2]
 802ded8:	4613      	mov	r3, r2
 802deda:	803b      	strh	r3, [r7, #0]
  struct pbuf *p;
  LWIP_ASSERT("invalid pbuf_type", (type == PBUF_REF) || (type == PBUF_ROM));
 802dedc:	883b      	ldrh	r3, [r7, #0]
 802dede:	2b41      	cmp	r3, #65	; 0x41
 802dee0:	d009      	beq.n	802def6 <pbuf_alloc_reference+0x2a>
 802dee2:	883b      	ldrh	r3, [r7, #0]
 802dee4:	2b01      	cmp	r3, #1
 802dee6:	d006      	beq.n	802def6 <pbuf_alloc_reference+0x2a>
 802dee8:	4b0f      	ldr	r3, [pc, #60]	; (802df28 <pbuf_alloc_reference+0x5c>)
 802deea:	f44f 72a5 	mov.w	r2, #330	; 0x14a
 802deee:	490f      	ldr	r1, [pc, #60]	; (802df2c <pbuf_alloc_reference+0x60>)
 802def0:	480f      	ldr	r0, [pc, #60]	; (802df30 <pbuf_alloc_reference+0x64>)
 802def2:	f00b f8b9 	bl	8039068 <iprintf>
  /* only allocate memory for the pbuf structure */
  p = (struct pbuf *)memp_malloc(MEMP_PBUF);
 802def6:	200b      	movs	r0, #11
 802def8:	f7ff fab6 	bl	802d468 <memp_malloc>
 802defc:	60f8      	str	r0, [r7, #12]
  if (p == NULL) {
 802defe:	68fb      	ldr	r3, [r7, #12]
 802df00:	2b00      	cmp	r3, #0
 802df02:	d101      	bne.n	802df08 <pbuf_alloc_reference+0x3c>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_alloc_reference: Could not allocate MEMP_PBUF for PBUF_%s.\n",
                 (type == PBUF_ROM) ? "ROM" : "REF"));
    return NULL;
 802df04:	2300      	movs	r3, #0
 802df06:	e00b      	b.n	802df20 <pbuf_alloc_reference+0x54>
  }
  pbuf_init_alloced_pbuf(p, payload, length, length, type, 0);
 802df08:	8879      	ldrh	r1, [r7, #2]
 802df0a:	887a      	ldrh	r2, [r7, #2]
 802df0c:	2300      	movs	r3, #0
 802df0e:	9301      	str	r3, [sp, #4]
 802df10:	883b      	ldrh	r3, [r7, #0]
 802df12:	9300      	str	r3, [sp, #0]
 802df14:	460b      	mov	r3, r1
 802df16:	6879      	ldr	r1, [r7, #4]
 802df18:	68f8      	ldr	r0, [r7, #12]
 802df1a:	f7ff feb7 	bl	802dc8c <pbuf_init_alloced_pbuf>
  return p;
 802df1e:	68fb      	ldr	r3, [r7, #12]
}
 802df20:	4618      	mov	r0, r3
 802df22:	3710      	adds	r7, #16
 802df24:	46bd      	mov	sp, r7
 802df26:	bd80      	pop	{r7, pc}
 802df28:	0803b040 	.word	0x0803b040
 802df2c:	0803b144 	.word	0x0803b144
 802df30:	0803b0a0 	.word	0x0803b0a0

0802df34 <pbuf_alloced_custom>:
 *        big enough to hold 'length' plus the header size
 */
struct pbuf *
pbuf_alloced_custom(pbuf_layer l, u16_t length, pbuf_type type, struct pbuf_custom *p,
                    void *payload_mem, u16_t payload_mem_len)
{
 802df34:	b580      	push	{r7, lr}
 802df36:	b088      	sub	sp, #32
 802df38:	af02      	add	r7, sp, #8
 802df3a:	607b      	str	r3, [r7, #4]
 802df3c:	4603      	mov	r3, r0
 802df3e:	73fb      	strb	r3, [r7, #15]
 802df40:	460b      	mov	r3, r1
 802df42:	81bb      	strh	r3, [r7, #12]
 802df44:	4613      	mov	r3, r2
 802df46:	817b      	strh	r3, [r7, #10]
  u16_t offset = (u16_t)l;
 802df48:	7bfb      	ldrb	r3, [r7, #15]
 802df4a:	827b      	strh	r3, [r7, #18]
  void *payload;
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloced_custom(length=%"U16_F")\n", length));

  if (LWIP_MEM_ALIGN_SIZE(offset) + length > payload_mem_len) {
 802df4c:	8a7b      	ldrh	r3, [r7, #18]
 802df4e:	3303      	adds	r3, #3
 802df50:	f023 0203 	bic.w	r2, r3, #3
 802df54:	89bb      	ldrh	r3, [r7, #12]
 802df56:	441a      	add	r2, r3
 802df58:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 802df5a:	429a      	cmp	r2, r3
 802df5c:	d901      	bls.n	802df62 <pbuf_alloced_custom+0x2e>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_WARNING, ("pbuf_alloced_custom(length=%"U16_F") buffer too short\n", length));
    return NULL;
 802df5e:	2300      	movs	r3, #0
 802df60:	e018      	b.n	802df94 <pbuf_alloced_custom+0x60>
  }

  if (payload_mem != NULL) {
 802df62:	6a3b      	ldr	r3, [r7, #32]
 802df64:	2b00      	cmp	r3, #0
 802df66:	d007      	beq.n	802df78 <pbuf_alloced_custom+0x44>
    payload = (u8_t *)payload_mem + LWIP_MEM_ALIGN_SIZE(offset);
 802df68:	8a7b      	ldrh	r3, [r7, #18]
 802df6a:	3303      	adds	r3, #3
 802df6c:	f023 0303 	bic.w	r3, r3, #3
 802df70:	6a3a      	ldr	r2, [r7, #32]
 802df72:	4413      	add	r3, r2
 802df74:	617b      	str	r3, [r7, #20]
 802df76:	e001      	b.n	802df7c <pbuf_alloced_custom+0x48>
  } else {
    payload = NULL;
 802df78:	2300      	movs	r3, #0
 802df7a:	617b      	str	r3, [r7, #20]
  }
  pbuf_init_alloced_pbuf(&p->pbuf, payload, length, length, type, PBUF_FLAG_IS_CUSTOM);
 802df7c:	6878      	ldr	r0, [r7, #4]
 802df7e:	89b9      	ldrh	r1, [r7, #12]
 802df80:	89ba      	ldrh	r2, [r7, #12]
 802df82:	2302      	movs	r3, #2
 802df84:	9301      	str	r3, [sp, #4]
 802df86:	897b      	ldrh	r3, [r7, #10]
 802df88:	9300      	str	r3, [sp, #0]
 802df8a:	460b      	mov	r3, r1
 802df8c:	6979      	ldr	r1, [r7, #20]
 802df8e:	f7ff fe7d 	bl	802dc8c <pbuf_init_alloced_pbuf>
  return &p->pbuf;
 802df92:	687b      	ldr	r3, [r7, #4]
}
 802df94:	4618      	mov	r0, r3
 802df96:	3718      	adds	r7, #24
 802df98:	46bd      	mov	sp, r7
 802df9a:	bd80      	pop	{r7, pc}

0802df9c <pbuf_realloc>:
 *
 * @note Despite its name, pbuf_realloc cannot grow the size of a pbuf (chain).
 */
void
pbuf_realloc(struct pbuf *p, u16_t new_len)
{
 802df9c:	b580      	push	{r7, lr}
 802df9e:	b084      	sub	sp, #16
 802dfa0:	af00      	add	r7, sp, #0
 802dfa2:	6078      	str	r0, [r7, #4]
 802dfa4:	460b      	mov	r3, r1
 802dfa6:	807b      	strh	r3, [r7, #2]
  struct pbuf *q;
  u16_t rem_len; /* remaining length */
  u16_t shrink;

  LWIP_ASSERT("pbuf_realloc: p != NULL", p != NULL);
 802dfa8:	687b      	ldr	r3, [r7, #4]
 802dfaa:	2b00      	cmp	r3, #0
 802dfac:	d106      	bne.n	802dfbc <pbuf_realloc+0x20>
 802dfae:	4b3a      	ldr	r3, [pc, #232]	; (802e098 <pbuf_realloc+0xfc>)
 802dfb0:	f44f 72cc 	mov.w	r2, #408	; 0x198
 802dfb4:	4939      	ldr	r1, [pc, #228]	; (802e09c <pbuf_realloc+0x100>)
 802dfb6:	483a      	ldr	r0, [pc, #232]	; (802e0a0 <pbuf_realloc+0x104>)
 802dfb8:	f00b f856 	bl	8039068 <iprintf>

  /* desired length larger than current length? */
  if (new_len >= p->tot_len) {
 802dfbc:	687b      	ldr	r3, [r7, #4]
 802dfbe:	891b      	ldrh	r3, [r3, #8]
 802dfc0:	887a      	ldrh	r2, [r7, #2]
 802dfc2:	429a      	cmp	r2, r3
 802dfc4:	d263      	bcs.n	802e08e <pbuf_realloc+0xf2>
    return;
  }

  /* the pbuf chain grows by (new_len - p->tot_len) bytes
   * (which may be negative in case of shrinking) */
  shrink = (u16_t)(p->tot_len - new_len);
 802dfc6:	687b      	ldr	r3, [r7, #4]
 802dfc8:	891a      	ldrh	r2, [r3, #8]
 802dfca:	887b      	ldrh	r3, [r7, #2]
 802dfcc:	1ad3      	subs	r3, r2, r3
 802dfce:	813b      	strh	r3, [r7, #8]

  /* first, step over any pbufs that should remain in the chain */
  rem_len = new_len;
 802dfd0:	887b      	ldrh	r3, [r7, #2]
 802dfd2:	817b      	strh	r3, [r7, #10]
  q = p;
 802dfd4:	687b      	ldr	r3, [r7, #4]
 802dfd6:	60fb      	str	r3, [r7, #12]
  /* should this pbuf be kept? */
  while (rem_len > q->len) {
 802dfd8:	e018      	b.n	802e00c <pbuf_realloc+0x70>
    /* decrease remaining length by pbuf length */
    rem_len = (u16_t)(rem_len - q->len);
 802dfda:	68fb      	ldr	r3, [r7, #12]
 802dfdc:	895b      	ldrh	r3, [r3, #10]
 802dfde:	897a      	ldrh	r2, [r7, #10]
 802dfe0:	1ad3      	subs	r3, r2, r3
 802dfe2:	817b      	strh	r3, [r7, #10]
    /* decrease total length indicator */
    q->tot_len = (u16_t)(q->tot_len - shrink);
 802dfe4:	68fb      	ldr	r3, [r7, #12]
 802dfe6:	891a      	ldrh	r2, [r3, #8]
 802dfe8:	893b      	ldrh	r3, [r7, #8]
 802dfea:	1ad3      	subs	r3, r2, r3
 802dfec:	b29a      	uxth	r2, r3
 802dfee:	68fb      	ldr	r3, [r7, #12]
 802dff0:	811a      	strh	r2, [r3, #8]
    /* proceed to next pbuf in chain */
    q = q->next;
 802dff2:	68fb      	ldr	r3, [r7, #12]
 802dff4:	681b      	ldr	r3, [r3, #0]
 802dff6:	60fb      	str	r3, [r7, #12]
    LWIP_ASSERT("pbuf_realloc: q != NULL", q != NULL);
 802dff8:	68fb      	ldr	r3, [r7, #12]
 802dffa:	2b00      	cmp	r3, #0
 802dffc:	d106      	bne.n	802e00c <pbuf_realloc+0x70>
 802dffe:	4b26      	ldr	r3, [pc, #152]	; (802e098 <pbuf_realloc+0xfc>)
 802e000:	f240 12af 	movw	r2, #431	; 0x1af
 802e004:	4927      	ldr	r1, [pc, #156]	; (802e0a4 <pbuf_realloc+0x108>)
 802e006:	4826      	ldr	r0, [pc, #152]	; (802e0a0 <pbuf_realloc+0x104>)
 802e008:	f00b f82e 	bl	8039068 <iprintf>
  while (rem_len > q->len) {
 802e00c:	68fb      	ldr	r3, [r7, #12]
 802e00e:	895b      	ldrh	r3, [r3, #10]
 802e010:	897a      	ldrh	r2, [r7, #10]
 802e012:	429a      	cmp	r2, r3
 802e014:	d8e1      	bhi.n	802dfda <pbuf_realloc+0x3e>
  /* we have now reached the new last pbuf (in q) */
  /* rem_len == desired length for pbuf q */

  /* shrink allocated memory for PBUF_RAM */
  /* (other types merely adjust their length fields */
  if (pbuf_match_allocsrc(q, PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) && (rem_len != q->len)
 802e016:	68fb      	ldr	r3, [r7, #12]
 802e018:	7b1b      	ldrb	r3, [r3, #12]
 802e01a:	f003 030f 	and.w	r3, r3, #15
 802e01e:	2b00      	cmp	r3, #0
 802e020:	d121      	bne.n	802e066 <pbuf_realloc+0xca>
 802e022:	68fb      	ldr	r3, [r7, #12]
 802e024:	895b      	ldrh	r3, [r3, #10]
 802e026:	897a      	ldrh	r2, [r7, #10]
 802e028:	429a      	cmp	r2, r3
 802e02a:	d01c      	beq.n	802e066 <pbuf_realloc+0xca>
#if LWIP_SUPPORT_CUSTOM_PBUF
      && ((q->flags & PBUF_FLAG_IS_CUSTOM) == 0)
 802e02c:	68fb      	ldr	r3, [r7, #12]
 802e02e:	7b5b      	ldrb	r3, [r3, #13]
 802e030:	f003 0302 	and.w	r3, r3, #2
 802e034:	2b00      	cmp	r3, #0
 802e036:	d116      	bne.n	802e066 <pbuf_realloc+0xca>
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
     ) {
    /* reallocate and adjust the length of the pbuf that will be split */
    q = (struct pbuf *)mem_trim(q, (mem_size_t)(((u8_t *)q->payload - (u8_t *)q) + rem_len));
 802e038:	68fb      	ldr	r3, [r7, #12]
 802e03a:	685a      	ldr	r2, [r3, #4]
 802e03c:	68fb      	ldr	r3, [r7, #12]
 802e03e:	1ad3      	subs	r3, r2, r3
 802e040:	b29a      	uxth	r2, r3
 802e042:	897b      	ldrh	r3, [r7, #10]
 802e044:	4413      	add	r3, r2
 802e046:	b29b      	uxth	r3, r3
 802e048:	4619      	mov	r1, r3
 802e04a:	68f8      	ldr	r0, [r7, #12]
 802e04c:	f7fe fed0 	bl	802cdf0 <mem_trim>
 802e050:	60f8      	str	r0, [r7, #12]
    LWIP_ASSERT("mem_trim returned q == NULL", q != NULL);
 802e052:	68fb      	ldr	r3, [r7, #12]
 802e054:	2b00      	cmp	r3, #0
 802e056:	d106      	bne.n	802e066 <pbuf_realloc+0xca>
 802e058:	4b0f      	ldr	r3, [pc, #60]	; (802e098 <pbuf_realloc+0xfc>)
 802e05a:	f240 12bd 	movw	r2, #445	; 0x1bd
 802e05e:	4912      	ldr	r1, [pc, #72]	; (802e0a8 <pbuf_realloc+0x10c>)
 802e060:	480f      	ldr	r0, [pc, #60]	; (802e0a0 <pbuf_realloc+0x104>)
 802e062:	f00b f801 	bl	8039068 <iprintf>
  }
  /* adjust length fields for new last pbuf */
  q->len = rem_len;
 802e066:	68fb      	ldr	r3, [r7, #12]
 802e068:	897a      	ldrh	r2, [r7, #10]
 802e06a:	815a      	strh	r2, [r3, #10]
  q->tot_len = q->len;
 802e06c:	68fb      	ldr	r3, [r7, #12]
 802e06e:	895a      	ldrh	r2, [r3, #10]
 802e070:	68fb      	ldr	r3, [r7, #12]
 802e072:	811a      	strh	r2, [r3, #8]

  /* any remaining pbufs in chain? */
  if (q->next != NULL) {
 802e074:	68fb      	ldr	r3, [r7, #12]
 802e076:	681b      	ldr	r3, [r3, #0]
 802e078:	2b00      	cmp	r3, #0
 802e07a:	d004      	beq.n	802e086 <pbuf_realloc+0xea>
    /* free remaining pbufs in chain */
    pbuf_free(q->next);
 802e07c:	68fb      	ldr	r3, [r7, #12]
 802e07e:	681b      	ldr	r3, [r3, #0]
 802e080:	4618      	mov	r0, r3
 802e082:	f000 f943 	bl	802e30c <pbuf_free>
  }
  /* q is last packet in chain */
  q->next = NULL;
 802e086:	68fb      	ldr	r3, [r7, #12]
 802e088:	2200      	movs	r2, #0
 802e08a:	601a      	str	r2, [r3, #0]
 802e08c:	e000      	b.n	802e090 <pbuf_realloc+0xf4>
    return;
 802e08e:	bf00      	nop

}
 802e090:	3710      	adds	r7, #16
 802e092:	46bd      	mov	sp, r7
 802e094:	bd80      	pop	{r7, pc}
 802e096:	bf00      	nop
 802e098:	0803b040 	.word	0x0803b040
 802e09c:	0803b158 	.word	0x0803b158
 802e0a0:	0803b0a0 	.word	0x0803b0a0
 802e0a4:	0803b170 	.word	0x0803b170
 802e0a8:	0803b188 	.word	0x0803b188

0802e0ac <pbuf_add_header_impl>:
 * @return non-zero on failure, zero on success.
 *
 */
static u8_t
pbuf_add_header_impl(struct pbuf *p, size_t header_size_increment, u8_t force)
{
 802e0ac:	b580      	push	{r7, lr}
 802e0ae:	b086      	sub	sp, #24
 802e0b0:	af00      	add	r7, sp, #0
 802e0b2:	60f8      	str	r0, [r7, #12]
 802e0b4:	60b9      	str	r1, [r7, #8]
 802e0b6:	4613      	mov	r3, r2
 802e0b8:	71fb      	strb	r3, [r7, #7]
  u16_t type_internal;
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 802e0ba:	68fb      	ldr	r3, [r7, #12]
 802e0bc:	2b00      	cmp	r3, #0
 802e0be:	d106      	bne.n	802e0ce <pbuf_add_header_impl+0x22>
 802e0c0:	4b2b      	ldr	r3, [pc, #172]	; (802e170 <pbuf_add_header_impl+0xc4>)
 802e0c2:	f240 12df 	movw	r2, #479	; 0x1df
 802e0c6:	492b      	ldr	r1, [pc, #172]	; (802e174 <pbuf_add_header_impl+0xc8>)
 802e0c8:	482b      	ldr	r0, [pc, #172]	; (802e178 <pbuf_add_header_impl+0xcc>)
 802e0ca:	f00a ffcd 	bl	8039068 <iprintf>
  if ((p == NULL) || (header_size_increment > 0xFFFF)) {
 802e0ce:	68fb      	ldr	r3, [r7, #12]
 802e0d0:	2b00      	cmp	r3, #0
 802e0d2:	d003      	beq.n	802e0dc <pbuf_add_header_impl+0x30>
 802e0d4:	68bb      	ldr	r3, [r7, #8]
 802e0d6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 802e0da:	d301      	bcc.n	802e0e0 <pbuf_add_header_impl+0x34>
    return 1;
 802e0dc:	2301      	movs	r3, #1
 802e0de:	e043      	b.n	802e168 <pbuf_add_header_impl+0xbc>
  }
  if (header_size_increment == 0) {
 802e0e0:	68bb      	ldr	r3, [r7, #8]
 802e0e2:	2b00      	cmp	r3, #0
 802e0e4:	d101      	bne.n	802e0ea <pbuf_add_header_impl+0x3e>
    return 0;
 802e0e6:	2300      	movs	r3, #0
 802e0e8:	e03e      	b.n	802e168 <pbuf_add_header_impl+0xbc>
  }

  increment_magnitude = (u16_t)header_size_increment;
 802e0ea:	68bb      	ldr	r3, [r7, #8]
 802e0ec:	827b      	strh	r3, [r7, #18]
  /* Do not allow tot_len to wrap as a result. */
  if ((u16_t)(increment_magnitude + p->tot_len) < increment_magnitude) {
 802e0ee:	68fb      	ldr	r3, [r7, #12]
 802e0f0:	891a      	ldrh	r2, [r3, #8]
 802e0f2:	8a7b      	ldrh	r3, [r7, #18]
 802e0f4:	4413      	add	r3, r2
 802e0f6:	b29b      	uxth	r3, r3
 802e0f8:	8a7a      	ldrh	r2, [r7, #18]
 802e0fa:	429a      	cmp	r2, r3
 802e0fc:	d901      	bls.n	802e102 <pbuf_add_header_impl+0x56>
    return 1;
 802e0fe:	2301      	movs	r3, #1
 802e100:	e032      	b.n	802e168 <pbuf_add_header_impl+0xbc>
  }

  type_internal = p->type_internal;
 802e102:	68fb      	ldr	r3, [r7, #12]
 802e104:	7b1b      	ldrb	r3, [r3, #12]
 802e106:	823b      	strh	r3, [r7, #16]

  /* pbuf types containing payloads? */
  if (type_internal & PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS) {
 802e108:	8a3b      	ldrh	r3, [r7, #16]
 802e10a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 802e10e:	2b00      	cmp	r3, #0
 802e110:	d00c      	beq.n	802e12c <pbuf_add_header_impl+0x80>
    /* set new payload pointer */
    payload = (u8_t *)p->payload - header_size_increment;
 802e112:	68fb      	ldr	r3, [r7, #12]
 802e114:	685a      	ldr	r2, [r3, #4]
 802e116:	68bb      	ldr	r3, [r7, #8]
 802e118:	425b      	negs	r3, r3
 802e11a:	4413      	add	r3, r2
 802e11c:	617b      	str	r3, [r7, #20]
    /* boundary check fails? */
    if ((u8_t *)payload < (u8_t *)p + SIZEOF_STRUCT_PBUF) {
 802e11e:	68fb      	ldr	r3, [r7, #12]
 802e120:	3310      	adds	r3, #16
 802e122:	697a      	ldr	r2, [r7, #20]
 802e124:	429a      	cmp	r2, r3
 802e126:	d20d      	bcs.n	802e144 <pbuf_add_header_impl+0x98>
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE,
                   ("pbuf_add_header: failed as %p < %p (not enough space for new header size)\n",
                    (void *)payload, (void *)((u8_t *)p + SIZEOF_STRUCT_PBUF)));
      /* bail out unsuccessfully */
      return 1;
 802e128:	2301      	movs	r3, #1
 802e12a:	e01d      	b.n	802e168 <pbuf_add_header_impl+0xbc>
    }
    /* pbuf types referring to external payloads? */
  } else {
    /* hide a header in the payload? */
    if (force) {
 802e12c:	79fb      	ldrb	r3, [r7, #7]
 802e12e:	2b00      	cmp	r3, #0
 802e130:	d006      	beq.n	802e140 <pbuf_add_header_impl+0x94>
      payload = (u8_t *)p->payload - header_size_increment;
 802e132:	68fb      	ldr	r3, [r7, #12]
 802e134:	685a      	ldr	r2, [r3, #4]
 802e136:	68bb      	ldr	r3, [r7, #8]
 802e138:	425b      	negs	r3, r3
 802e13a:	4413      	add	r3, r2
 802e13c:	617b      	str	r3, [r7, #20]
 802e13e:	e001      	b.n	802e144 <pbuf_add_header_impl+0x98>
    } else {
      /* cannot expand payload to front (yet!)
       * bail out unsuccessfully */
      return 1;
 802e140:	2301      	movs	r3, #1
 802e142:	e011      	b.n	802e168 <pbuf_add_header_impl+0xbc>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_add_header: old %p new %p (%"U16_F")\n",
              (void *)p->payload, (void *)payload, increment_magnitude));

  /* modify pbuf fields */
  p->payload = payload;
 802e144:	68fb      	ldr	r3, [r7, #12]
 802e146:	697a      	ldr	r2, [r7, #20]
 802e148:	605a      	str	r2, [r3, #4]
  p->len = (u16_t)(p->len + increment_magnitude);
 802e14a:	68fb      	ldr	r3, [r7, #12]
 802e14c:	895a      	ldrh	r2, [r3, #10]
 802e14e:	8a7b      	ldrh	r3, [r7, #18]
 802e150:	4413      	add	r3, r2
 802e152:	b29a      	uxth	r2, r3
 802e154:	68fb      	ldr	r3, [r7, #12]
 802e156:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len + increment_magnitude);
 802e158:	68fb      	ldr	r3, [r7, #12]
 802e15a:	891a      	ldrh	r2, [r3, #8]
 802e15c:	8a7b      	ldrh	r3, [r7, #18]
 802e15e:	4413      	add	r3, r2
 802e160:	b29a      	uxth	r2, r3
 802e162:	68fb      	ldr	r3, [r7, #12]
 802e164:	811a      	strh	r2, [r3, #8]


  return 0;
 802e166:	2300      	movs	r3, #0
}
 802e168:	4618      	mov	r0, r3
 802e16a:	3718      	adds	r7, #24
 802e16c:	46bd      	mov	sp, r7
 802e16e:	bd80      	pop	{r7, pc}
 802e170:	0803b040 	.word	0x0803b040
 802e174:	0803b1a4 	.word	0x0803b1a4
 802e178:	0803b0a0 	.word	0x0803b0a0

0802e17c <pbuf_add_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_add_header(struct pbuf *p, size_t header_size_increment)
{
 802e17c:	b580      	push	{r7, lr}
 802e17e:	b082      	sub	sp, #8
 802e180:	af00      	add	r7, sp, #0
 802e182:	6078      	str	r0, [r7, #4]
 802e184:	6039      	str	r1, [r7, #0]
  return pbuf_add_header_impl(p, header_size_increment, 0);
 802e186:	2200      	movs	r2, #0
 802e188:	6839      	ldr	r1, [r7, #0]
 802e18a:	6878      	ldr	r0, [r7, #4]
 802e18c:	f7ff ff8e 	bl	802e0ac <pbuf_add_header_impl>
 802e190:	4603      	mov	r3, r0
}
 802e192:	4618      	mov	r0, r3
 802e194:	3708      	adds	r7, #8
 802e196:	46bd      	mov	sp, r7
 802e198:	bd80      	pop	{r7, pc}
	...

0802e19c <pbuf_remove_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_remove_header(struct pbuf *p, size_t header_size_decrement)
{
 802e19c:	b580      	push	{r7, lr}
 802e19e:	b084      	sub	sp, #16
 802e1a0:	af00      	add	r7, sp, #0
 802e1a2:	6078      	str	r0, [r7, #4]
 802e1a4:	6039      	str	r1, [r7, #0]
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 802e1a6:	687b      	ldr	r3, [r7, #4]
 802e1a8:	2b00      	cmp	r3, #0
 802e1aa:	d106      	bne.n	802e1ba <pbuf_remove_header+0x1e>
 802e1ac:	4b20      	ldr	r3, [pc, #128]	; (802e230 <pbuf_remove_header+0x94>)
 802e1ae:	f240 224b 	movw	r2, #587	; 0x24b
 802e1b2:	4920      	ldr	r1, [pc, #128]	; (802e234 <pbuf_remove_header+0x98>)
 802e1b4:	4820      	ldr	r0, [pc, #128]	; (802e238 <pbuf_remove_header+0x9c>)
 802e1b6:	f00a ff57 	bl	8039068 <iprintf>
  if ((p == NULL) || (header_size_decrement > 0xFFFF)) {
 802e1ba:	687b      	ldr	r3, [r7, #4]
 802e1bc:	2b00      	cmp	r3, #0
 802e1be:	d003      	beq.n	802e1c8 <pbuf_remove_header+0x2c>
 802e1c0:	683b      	ldr	r3, [r7, #0]
 802e1c2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 802e1c6:	d301      	bcc.n	802e1cc <pbuf_remove_header+0x30>
    return 1;
 802e1c8:	2301      	movs	r3, #1
 802e1ca:	e02c      	b.n	802e226 <pbuf_remove_header+0x8a>
  }
  if (header_size_decrement == 0) {
 802e1cc:	683b      	ldr	r3, [r7, #0]
 802e1ce:	2b00      	cmp	r3, #0
 802e1d0:	d101      	bne.n	802e1d6 <pbuf_remove_header+0x3a>
    return 0;
 802e1d2:	2300      	movs	r3, #0
 802e1d4:	e027      	b.n	802e226 <pbuf_remove_header+0x8a>
  }

  increment_magnitude = (u16_t)header_size_decrement;
 802e1d6:	683b      	ldr	r3, [r7, #0]
 802e1d8:	81fb      	strh	r3, [r7, #14]
  /* Check that we aren't going to move off the end of the pbuf */
  LWIP_ERROR("increment_magnitude <= p->len", (increment_magnitude <= p->len), return 1;);
 802e1da:	687b      	ldr	r3, [r7, #4]
 802e1dc:	895b      	ldrh	r3, [r3, #10]
 802e1de:	89fa      	ldrh	r2, [r7, #14]
 802e1e0:	429a      	cmp	r2, r3
 802e1e2:	d908      	bls.n	802e1f6 <pbuf_remove_header+0x5a>
 802e1e4:	4b12      	ldr	r3, [pc, #72]	; (802e230 <pbuf_remove_header+0x94>)
 802e1e6:	f240 2255 	movw	r2, #597	; 0x255
 802e1ea:	4914      	ldr	r1, [pc, #80]	; (802e23c <pbuf_remove_header+0xa0>)
 802e1ec:	4812      	ldr	r0, [pc, #72]	; (802e238 <pbuf_remove_header+0x9c>)
 802e1ee:	f00a ff3b 	bl	8039068 <iprintf>
 802e1f2:	2301      	movs	r3, #1
 802e1f4:	e017      	b.n	802e226 <pbuf_remove_header+0x8a>

  /* remember current payload pointer */
  payload = p->payload;
 802e1f6:	687b      	ldr	r3, [r7, #4]
 802e1f8:	685b      	ldr	r3, [r3, #4]
 802e1fa:	60bb      	str	r3, [r7, #8]
  LWIP_UNUSED_ARG(payload); /* only used in LWIP_DEBUGF below */

  /* increase payload pointer (guarded by length check above) */
  p->payload = (u8_t *)p->payload + header_size_decrement;
 802e1fc:	687b      	ldr	r3, [r7, #4]
 802e1fe:	685a      	ldr	r2, [r3, #4]
 802e200:	683b      	ldr	r3, [r7, #0]
 802e202:	441a      	add	r2, r3
 802e204:	687b      	ldr	r3, [r7, #4]
 802e206:	605a      	str	r2, [r3, #4]
  /* modify pbuf length fields */
  p->len = (u16_t)(p->len - increment_magnitude);
 802e208:	687b      	ldr	r3, [r7, #4]
 802e20a:	895a      	ldrh	r2, [r3, #10]
 802e20c:	89fb      	ldrh	r3, [r7, #14]
 802e20e:	1ad3      	subs	r3, r2, r3
 802e210:	b29a      	uxth	r2, r3
 802e212:	687b      	ldr	r3, [r7, #4]
 802e214:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len - increment_magnitude);
 802e216:	687b      	ldr	r3, [r7, #4]
 802e218:	891a      	ldrh	r2, [r3, #8]
 802e21a:	89fb      	ldrh	r3, [r7, #14]
 802e21c:	1ad3      	subs	r3, r2, r3
 802e21e:	b29a      	uxth	r2, r3
 802e220:	687b      	ldr	r3, [r7, #4]
 802e222:	811a      	strh	r2, [r3, #8]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_remove_header: old %p new %p (%"U16_F")\n",
              (void *)payload, (void *)p->payload, increment_magnitude));

  return 0;
 802e224:	2300      	movs	r3, #0
}
 802e226:	4618      	mov	r0, r3
 802e228:	3710      	adds	r7, #16
 802e22a:	46bd      	mov	sp, r7
 802e22c:	bd80      	pop	{r7, pc}
 802e22e:	bf00      	nop
 802e230:	0803b040 	.word	0x0803b040
 802e234:	0803b1a4 	.word	0x0803b1a4
 802e238:	0803b0a0 	.word	0x0803b0a0
 802e23c:	0803b1b0 	.word	0x0803b1b0

0802e240 <pbuf_header_impl>:

static u8_t
pbuf_header_impl(struct pbuf *p, s16_t header_size_increment, u8_t force)
{
 802e240:	b580      	push	{r7, lr}
 802e242:	b082      	sub	sp, #8
 802e244:	af00      	add	r7, sp, #0
 802e246:	6078      	str	r0, [r7, #4]
 802e248:	460b      	mov	r3, r1
 802e24a:	807b      	strh	r3, [r7, #2]
 802e24c:	4613      	mov	r3, r2
 802e24e:	707b      	strb	r3, [r7, #1]
  if (header_size_increment < 0) {
 802e250:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 802e254:	2b00      	cmp	r3, #0
 802e256:	da08      	bge.n	802e26a <pbuf_header_impl+0x2a>
    return pbuf_remove_header(p, (size_t) - header_size_increment);
 802e258:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 802e25c:	425b      	negs	r3, r3
 802e25e:	4619      	mov	r1, r3
 802e260:	6878      	ldr	r0, [r7, #4]
 802e262:	f7ff ff9b 	bl	802e19c <pbuf_remove_header>
 802e266:	4603      	mov	r3, r0
 802e268:	e007      	b.n	802e27a <pbuf_header_impl+0x3a>
  } else {
    return pbuf_add_header_impl(p, (size_t)header_size_increment, force);
 802e26a:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 802e26e:	787a      	ldrb	r2, [r7, #1]
 802e270:	4619      	mov	r1, r3
 802e272:	6878      	ldr	r0, [r7, #4]
 802e274:	f7ff ff1a 	bl	802e0ac <pbuf_add_header_impl>
 802e278:	4603      	mov	r3, r0
  }
}
 802e27a:	4618      	mov	r0, r3
 802e27c:	3708      	adds	r7, #8
 802e27e:	46bd      	mov	sp, r7
 802e280:	bd80      	pop	{r7, pc}

0802e282 <pbuf_header_force>:
 * Same as pbuf_header but does not check if 'header_size > 0' is allowed.
 * This is used internally only, to allow PBUF_REF for RX.
 */
u8_t
pbuf_header_force(struct pbuf *p, s16_t header_size_increment)
{
 802e282:	b580      	push	{r7, lr}
 802e284:	b082      	sub	sp, #8
 802e286:	af00      	add	r7, sp, #0
 802e288:	6078      	str	r0, [r7, #4]
 802e28a:	460b      	mov	r3, r1
 802e28c:	807b      	strh	r3, [r7, #2]
  return pbuf_header_impl(p, header_size_increment, 1);
 802e28e:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 802e292:	2201      	movs	r2, #1
 802e294:	4619      	mov	r1, r3
 802e296:	6878      	ldr	r0, [r7, #4]
 802e298:	f7ff ffd2 	bl	802e240 <pbuf_header_impl>
 802e29c:	4603      	mov	r3, r0
}
 802e29e:	4618      	mov	r0, r3
 802e2a0:	3708      	adds	r7, #8
 802e2a2:	46bd      	mov	sp, r7
 802e2a4:	bd80      	pop	{r7, pc}

0802e2a6 <pbuf_free_header>:
 *                   takes an u16_t not s16_t!
 * @return the new head pbuf
 */
struct pbuf *
pbuf_free_header(struct pbuf *q, u16_t size)
{
 802e2a6:	b580      	push	{r7, lr}
 802e2a8:	b086      	sub	sp, #24
 802e2aa:	af00      	add	r7, sp, #0
 802e2ac:	6078      	str	r0, [r7, #4]
 802e2ae:	460b      	mov	r3, r1
 802e2b0:	807b      	strh	r3, [r7, #2]
  struct pbuf *p = q;
 802e2b2:	687b      	ldr	r3, [r7, #4]
 802e2b4:	617b      	str	r3, [r7, #20]
  u16_t free_left = size;
 802e2b6:	887b      	ldrh	r3, [r7, #2]
 802e2b8:	827b      	strh	r3, [r7, #18]
  while (free_left && p) {
 802e2ba:	e01c      	b.n	802e2f6 <pbuf_free_header+0x50>
    if (free_left >= p->len) {
 802e2bc:	697b      	ldr	r3, [r7, #20]
 802e2be:	895b      	ldrh	r3, [r3, #10]
 802e2c0:	8a7a      	ldrh	r2, [r7, #18]
 802e2c2:	429a      	cmp	r2, r3
 802e2c4:	d310      	bcc.n	802e2e8 <pbuf_free_header+0x42>
      struct pbuf *f = p;
 802e2c6:	697b      	ldr	r3, [r7, #20]
 802e2c8:	60fb      	str	r3, [r7, #12]
      free_left = (u16_t)(free_left - p->len);
 802e2ca:	697b      	ldr	r3, [r7, #20]
 802e2cc:	895b      	ldrh	r3, [r3, #10]
 802e2ce:	8a7a      	ldrh	r2, [r7, #18]
 802e2d0:	1ad3      	subs	r3, r2, r3
 802e2d2:	827b      	strh	r3, [r7, #18]
      p = p->next;
 802e2d4:	697b      	ldr	r3, [r7, #20]
 802e2d6:	681b      	ldr	r3, [r3, #0]
 802e2d8:	617b      	str	r3, [r7, #20]
      f->next = 0;
 802e2da:	68fb      	ldr	r3, [r7, #12]
 802e2dc:	2200      	movs	r2, #0
 802e2de:	601a      	str	r2, [r3, #0]
      pbuf_free(f);
 802e2e0:	68f8      	ldr	r0, [r7, #12]
 802e2e2:	f000 f813 	bl	802e30c <pbuf_free>
 802e2e6:	e006      	b.n	802e2f6 <pbuf_free_header+0x50>
    } else {
      pbuf_remove_header(p, free_left);
 802e2e8:	8a7b      	ldrh	r3, [r7, #18]
 802e2ea:	4619      	mov	r1, r3
 802e2ec:	6978      	ldr	r0, [r7, #20]
 802e2ee:	f7ff ff55 	bl	802e19c <pbuf_remove_header>
      free_left = 0;
 802e2f2:	2300      	movs	r3, #0
 802e2f4:	827b      	strh	r3, [r7, #18]
  while (free_left && p) {
 802e2f6:	8a7b      	ldrh	r3, [r7, #18]
 802e2f8:	2b00      	cmp	r3, #0
 802e2fa:	d002      	beq.n	802e302 <pbuf_free_header+0x5c>
 802e2fc:	697b      	ldr	r3, [r7, #20]
 802e2fe:	2b00      	cmp	r3, #0
 802e300:	d1dc      	bne.n	802e2bc <pbuf_free_header+0x16>
    }
  }
  return p;
 802e302:	697b      	ldr	r3, [r7, #20]
}
 802e304:	4618      	mov	r0, r3
 802e306:	3718      	adds	r7, #24
 802e308:	46bd      	mov	sp, r7
 802e30a:	bd80      	pop	{r7, pc}

0802e30c <pbuf_free>:
 * 1->1->1 becomes .......
 *
 */
u8_t
pbuf_free(struct pbuf *p)
{
 802e30c:	b580      	push	{r7, lr}
 802e30e:	b088      	sub	sp, #32
 802e310:	af00      	add	r7, sp, #0
 802e312:	6078      	str	r0, [r7, #4]
  u8_t alloc_src;
  struct pbuf *q;
  u8_t count;

  if (p == NULL) {
 802e314:	687b      	ldr	r3, [r7, #4]
 802e316:	2b00      	cmp	r3, #0
 802e318:	d10b      	bne.n	802e332 <pbuf_free+0x26>
    LWIP_ASSERT("p != NULL", p != NULL);
 802e31a:	687b      	ldr	r3, [r7, #4]
 802e31c:	2b00      	cmp	r3, #0
 802e31e:	d106      	bne.n	802e32e <pbuf_free+0x22>
 802e320:	4b3b      	ldr	r3, [pc, #236]	; (802e410 <pbuf_free+0x104>)
 802e322:	f44f 7237 	mov.w	r2, #732	; 0x2dc
 802e326:	493b      	ldr	r1, [pc, #236]	; (802e414 <pbuf_free+0x108>)
 802e328:	483b      	ldr	r0, [pc, #236]	; (802e418 <pbuf_free+0x10c>)
 802e32a:	f00a fe9d 	bl	8039068 <iprintf>
    /* if assertions are disabled, proceed with debug output */
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_free(p == NULL) was called.\n"));
    return 0;
 802e32e:	2300      	movs	r3, #0
 802e330:	e069      	b.n	802e406 <pbuf_free+0xfa>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free(%p)\n", (void *)p));

  PERF_START;

  count = 0;
 802e332:	2300      	movs	r3, #0
 802e334:	77fb      	strb	r3, [r7, #31]
  /* de-allocate all consecutive pbufs from the head of the chain that
   * obtain a zero reference count after decrementing*/
  while (p != NULL) {
 802e336:	e062      	b.n	802e3fe <pbuf_free+0xf2>
    LWIP_PBUF_REF_T ref;
    SYS_ARCH_DECL_PROTECT(old_level);
    /* Since decrementing ref cannot be guaranteed to be a single machine operation
     * we must protect it. We put the new ref into a local variable to prevent
     * further protection. */
    SYS_ARCH_PROTECT(old_level);
 802e338:	f00a f908 	bl	803854c <sys_arch_protect>
 802e33c:	61b8      	str	r0, [r7, #24]
    /* all pbufs in a chain are referenced at least once */
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
 802e33e:	687b      	ldr	r3, [r7, #4]
 802e340:	7b9b      	ldrb	r3, [r3, #14]
 802e342:	2b00      	cmp	r3, #0
 802e344:	d106      	bne.n	802e354 <pbuf_free+0x48>
 802e346:	4b32      	ldr	r3, [pc, #200]	; (802e410 <pbuf_free+0x104>)
 802e348:	f240 22f1 	movw	r2, #753	; 0x2f1
 802e34c:	4933      	ldr	r1, [pc, #204]	; (802e41c <pbuf_free+0x110>)
 802e34e:	4832      	ldr	r0, [pc, #200]	; (802e418 <pbuf_free+0x10c>)
 802e350:	f00a fe8a 	bl	8039068 <iprintf>
    /* decrease reference count (number of pointers to pbuf) */
    ref = --(p->ref);
 802e354:	687b      	ldr	r3, [r7, #4]
 802e356:	7b9b      	ldrb	r3, [r3, #14]
 802e358:	3b01      	subs	r3, #1
 802e35a:	b2da      	uxtb	r2, r3
 802e35c:	687b      	ldr	r3, [r7, #4]
 802e35e:	739a      	strb	r2, [r3, #14]
 802e360:	687b      	ldr	r3, [r7, #4]
 802e362:	7b9b      	ldrb	r3, [r3, #14]
 802e364:	75fb      	strb	r3, [r7, #23]
    SYS_ARCH_UNPROTECT(old_level);
 802e366:	69b8      	ldr	r0, [r7, #24]
 802e368:	f00a f8fe 	bl	8038568 <sys_arch_unprotect>
    /* this pbuf is no longer referenced to? */
    if (ref == 0) {
 802e36c:	7dfb      	ldrb	r3, [r7, #23]
 802e36e:	2b00      	cmp	r3, #0
 802e370:	d143      	bne.n	802e3fa <pbuf_free+0xee>
      /* remember next pbuf in chain for next iteration */
      q = p->next;
 802e372:	687b      	ldr	r3, [r7, #4]
 802e374:	681b      	ldr	r3, [r3, #0]
 802e376:	613b      	str	r3, [r7, #16]
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: deallocating %p\n", (void *)p));
      alloc_src = pbuf_get_allocsrc(p);
 802e378:	687b      	ldr	r3, [r7, #4]
 802e37a:	7b1b      	ldrb	r3, [r3, #12]
 802e37c:	f003 030f 	and.w	r3, r3, #15
 802e380:	73fb      	strb	r3, [r7, #15]
#if LWIP_SUPPORT_CUSTOM_PBUF
      /* is this a custom pbuf? */
      if ((p->flags & PBUF_FLAG_IS_CUSTOM) != 0) {
 802e382:	687b      	ldr	r3, [r7, #4]
 802e384:	7b5b      	ldrb	r3, [r3, #13]
 802e386:	f003 0302 	and.w	r3, r3, #2
 802e38a:	2b00      	cmp	r3, #0
 802e38c:	d011      	beq.n	802e3b2 <pbuf_free+0xa6>
        struct pbuf_custom *pc = (struct pbuf_custom *)p;
 802e38e:	687b      	ldr	r3, [r7, #4]
 802e390:	60bb      	str	r3, [r7, #8]
        LWIP_ASSERT("pc->custom_free_function != NULL", pc->custom_free_function != NULL);
 802e392:	68bb      	ldr	r3, [r7, #8]
 802e394:	691b      	ldr	r3, [r3, #16]
 802e396:	2b00      	cmp	r3, #0
 802e398:	d106      	bne.n	802e3a8 <pbuf_free+0x9c>
 802e39a:	4b1d      	ldr	r3, [pc, #116]	; (802e410 <pbuf_free+0x104>)
 802e39c:	f240 22ff 	movw	r2, #767	; 0x2ff
 802e3a0:	491f      	ldr	r1, [pc, #124]	; (802e420 <pbuf_free+0x114>)
 802e3a2:	481d      	ldr	r0, [pc, #116]	; (802e418 <pbuf_free+0x10c>)
 802e3a4:	f00a fe60 	bl	8039068 <iprintf>
        pc->custom_free_function(p);
 802e3a8:	68bb      	ldr	r3, [r7, #8]
 802e3aa:	691b      	ldr	r3, [r3, #16]
 802e3ac:	6878      	ldr	r0, [r7, #4]
 802e3ae:	4798      	blx	r3
 802e3b0:	e01d      	b.n	802e3ee <pbuf_free+0xe2>
      } else
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
      {
        /* is this a pbuf from the pool? */
        if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF_POOL) {
 802e3b2:	7bfb      	ldrb	r3, [r7, #15]
 802e3b4:	2b02      	cmp	r3, #2
 802e3b6:	d104      	bne.n	802e3c2 <pbuf_free+0xb6>
          memp_free(MEMP_PBUF_POOL, p);
 802e3b8:	6879      	ldr	r1, [r7, #4]
 802e3ba:	200c      	movs	r0, #12
 802e3bc:	f7ff f8d0 	bl	802d560 <memp_free>
 802e3c0:	e015      	b.n	802e3ee <pbuf_free+0xe2>
          /* is this a ROM or RAM referencing pbuf? */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF) {
 802e3c2:	7bfb      	ldrb	r3, [r7, #15]
 802e3c4:	2b01      	cmp	r3, #1
 802e3c6:	d104      	bne.n	802e3d2 <pbuf_free+0xc6>
          memp_free(MEMP_PBUF, p);
 802e3c8:	6879      	ldr	r1, [r7, #4]
 802e3ca:	200b      	movs	r0, #11
 802e3cc:	f7ff f8c8 	bl	802d560 <memp_free>
 802e3d0:	e00d      	b.n	802e3ee <pbuf_free+0xe2>
          /* type == PBUF_RAM */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) {
 802e3d2:	7bfb      	ldrb	r3, [r7, #15]
 802e3d4:	2b00      	cmp	r3, #0
 802e3d6:	d103      	bne.n	802e3e0 <pbuf_free+0xd4>
          mem_free(p);
 802e3d8:	6878      	ldr	r0, [r7, #4]
 802e3da:	f7fe fc45 	bl	802cc68 <mem_free>
 802e3de:	e006      	b.n	802e3ee <pbuf_free+0xe2>
        } else {
          /* @todo: support freeing other types */
          LWIP_ASSERT("invalid pbuf type", 0);
 802e3e0:	4b0b      	ldr	r3, [pc, #44]	; (802e410 <pbuf_free+0x104>)
 802e3e2:	f240 320f 	movw	r2, #783	; 0x30f
 802e3e6:	490f      	ldr	r1, [pc, #60]	; (802e424 <pbuf_free+0x118>)
 802e3e8:	480b      	ldr	r0, [pc, #44]	; (802e418 <pbuf_free+0x10c>)
 802e3ea:	f00a fe3d 	bl	8039068 <iprintf>
        }
      }
      count++;
 802e3ee:	7ffb      	ldrb	r3, [r7, #31]
 802e3f0:	3301      	adds	r3, #1
 802e3f2:	77fb      	strb	r3, [r7, #31]
      /* proceed to next pbuf */
      p = q;
 802e3f4:	693b      	ldr	r3, [r7, #16]
 802e3f6:	607b      	str	r3, [r7, #4]
 802e3f8:	e001      	b.n	802e3fe <pbuf_free+0xf2>
      /* p->ref > 0, this pbuf is still referenced to */
      /* (and so the remaining pbufs in chain as well) */
    } else {
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: %p has ref %"U16_F", ending here.\n", (void *)p, (u16_t)ref));
      /* stop walking through the chain */
      p = NULL;
 802e3fa:	2300      	movs	r3, #0
 802e3fc:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 802e3fe:	687b      	ldr	r3, [r7, #4]
 802e400:	2b00      	cmp	r3, #0
 802e402:	d199      	bne.n	802e338 <pbuf_free+0x2c>
    }
  }
  PERF_STOP("pbuf_free");
  /* return number of de-allocated pbufs */
  return count;
 802e404:	7ffb      	ldrb	r3, [r7, #31]
}
 802e406:	4618      	mov	r0, r3
 802e408:	3720      	adds	r7, #32
 802e40a:	46bd      	mov	sp, r7
 802e40c:	bd80      	pop	{r7, pc}
 802e40e:	bf00      	nop
 802e410:	0803b040 	.word	0x0803b040
 802e414:	0803b1a4 	.word	0x0803b1a4
 802e418:	0803b0a0 	.word	0x0803b0a0
 802e41c:	0803b1d0 	.word	0x0803b1d0
 802e420:	0803b1e8 	.word	0x0803b1e8
 802e424:	0803b20c 	.word	0x0803b20c

0802e428 <pbuf_clen>:
 * @param p first pbuf of chain
 * @return the number of pbufs in a chain
 */
u16_t
pbuf_clen(const struct pbuf *p)
{
 802e428:	b480      	push	{r7}
 802e42a:	b085      	sub	sp, #20
 802e42c:	af00      	add	r7, sp, #0
 802e42e:	6078      	str	r0, [r7, #4]
  u16_t len;

  len = 0;
 802e430:	2300      	movs	r3, #0
 802e432:	81fb      	strh	r3, [r7, #14]
  while (p != NULL) {
 802e434:	e005      	b.n	802e442 <pbuf_clen+0x1a>
    ++len;
 802e436:	89fb      	ldrh	r3, [r7, #14]
 802e438:	3301      	adds	r3, #1
 802e43a:	81fb      	strh	r3, [r7, #14]
    p = p->next;
 802e43c:	687b      	ldr	r3, [r7, #4]
 802e43e:	681b      	ldr	r3, [r3, #0]
 802e440:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 802e442:	687b      	ldr	r3, [r7, #4]
 802e444:	2b00      	cmp	r3, #0
 802e446:	d1f6      	bne.n	802e436 <pbuf_clen+0xe>
  }
  return len;
 802e448:	89fb      	ldrh	r3, [r7, #14]
}
 802e44a:	4618      	mov	r0, r3
 802e44c:	3714      	adds	r7, #20
 802e44e:	46bd      	mov	sp, r7
 802e450:	f85d 7b04 	ldr.w	r7, [sp], #4
 802e454:	4770      	bx	lr
	...

0802e458 <pbuf_ref>:
 * @param p pbuf to increase reference counter of
 *
 */
void
pbuf_ref(struct pbuf *p)
{
 802e458:	b580      	push	{r7, lr}
 802e45a:	b084      	sub	sp, #16
 802e45c:	af00      	add	r7, sp, #0
 802e45e:	6078      	str	r0, [r7, #4]
  /* pbuf given? */
  if (p != NULL) {
 802e460:	687b      	ldr	r3, [r7, #4]
 802e462:	2b00      	cmp	r3, #0
 802e464:	d016      	beq.n	802e494 <pbuf_ref+0x3c>
    SYS_ARCH_SET(p->ref, (LWIP_PBUF_REF_T)(p->ref + 1));
 802e466:	f00a f871 	bl	803854c <sys_arch_protect>
 802e46a:	60f8      	str	r0, [r7, #12]
 802e46c:	687b      	ldr	r3, [r7, #4]
 802e46e:	7b9b      	ldrb	r3, [r3, #14]
 802e470:	3301      	adds	r3, #1
 802e472:	b2da      	uxtb	r2, r3
 802e474:	687b      	ldr	r3, [r7, #4]
 802e476:	739a      	strb	r2, [r3, #14]
 802e478:	68f8      	ldr	r0, [r7, #12]
 802e47a:	f00a f875 	bl	8038568 <sys_arch_unprotect>
    LWIP_ASSERT("pbuf ref overflow", p->ref > 0);
 802e47e:	687b      	ldr	r3, [r7, #4]
 802e480:	7b9b      	ldrb	r3, [r3, #14]
 802e482:	2b00      	cmp	r3, #0
 802e484:	d106      	bne.n	802e494 <pbuf_ref+0x3c>
 802e486:	4b05      	ldr	r3, [pc, #20]	; (802e49c <pbuf_ref+0x44>)
 802e488:	f240 3242 	movw	r2, #834	; 0x342
 802e48c:	4904      	ldr	r1, [pc, #16]	; (802e4a0 <pbuf_ref+0x48>)
 802e48e:	4805      	ldr	r0, [pc, #20]	; (802e4a4 <pbuf_ref+0x4c>)
 802e490:	f00a fdea 	bl	8039068 <iprintf>
  }
}
 802e494:	bf00      	nop
 802e496:	3710      	adds	r7, #16
 802e498:	46bd      	mov	sp, r7
 802e49a:	bd80      	pop	{r7, pc}
 802e49c:	0803b040 	.word	0x0803b040
 802e4a0:	0803b220 	.word	0x0803b220
 802e4a4:	0803b0a0 	.word	0x0803b0a0

0802e4a8 <pbuf_cat>:
 *
 * @see pbuf_chain()
 */
void
pbuf_cat(struct pbuf *h, struct pbuf *t)
{
 802e4a8:	b580      	push	{r7, lr}
 802e4aa:	b084      	sub	sp, #16
 802e4ac:	af00      	add	r7, sp, #0
 802e4ae:	6078      	str	r0, [r7, #4]
 802e4b0:	6039      	str	r1, [r7, #0]
  struct pbuf *p;

  LWIP_ERROR("(h != NULL) && (t != NULL) (programmer violates API)",
 802e4b2:	687b      	ldr	r3, [r7, #4]
 802e4b4:	2b00      	cmp	r3, #0
 802e4b6:	d002      	beq.n	802e4be <pbuf_cat+0x16>
 802e4b8:	683b      	ldr	r3, [r7, #0]
 802e4ba:	2b00      	cmp	r3, #0
 802e4bc:	d107      	bne.n	802e4ce <pbuf_cat+0x26>
 802e4be:	4b20      	ldr	r3, [pc, #128]	; (802e540 <pbuf_cat+0x98>)
 802e4c0:	f240 3259 	movw	r2, #857	; 0x359
 802e4c4:	491f      	ldr	r1, [pc, #124]	; (802e544 <pbuf_cat+0x9c>)
 802e4c6:	4820      	ldr	r0, [pc, #128]	; (802e548 <pbuf_cat+0xa0>)
 802e4c8:	f00a fdce 	bl	8039068 <iprintf>
 802e4cc:	e034      	b.n	802e538 <pbuf_cat+0x90>
             ((h != NULL) && (t != NULL)), return;);

  /* proceed to last pbuf of chain */
  for (p = h; p->next != NULL; p = p->next) {
 802e4ce:	687b      	ldr	r3, [r7, #4]
 802e4d0:	60fb      	str	r3, [r7, #12]
 802e4d2:	e00a      	b.n	802e4ea <pbuf_cat+0x42>
    /* add total length of second chain to all totals of first chain */
    p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 802e4d4:	68fb      	ldr	r3, [r7, #12]
 802e4d6:	891a      	ldrh	r2, [r3, #8]
 802e4d8:	683b      	ldr	r3, [r7, #0]
 802e4da:	891b      	ldrh	r3, [r3, #8]
 802e4dc:	4413      	add	r3, r2
 802e4de:	b29a      	uxth	r2, r3
 802e4e0:	68fb      	ldr	r3, [r7, #12]
 802e4e2:	811a      	strh	r2, [r3, #8]
  for (p = h; p->next != NULL; p = p->next) {
 802e4e4:	68fb      	ldr	r3, [r7, #12]
 802e4e6:	681b      	ldr	r3, [r3, #0]
 802e4e8:	60fb      	str	r3, [r7, #12]
 802e4ea:	68fb      	ldr	r3, [r7, #12]
 802e4ec:	681b      	ldr	r3, [r3, #0]
 802e4ee:	2b00      	cmp	r3, #0
 802e4f0:	d1f0      	bne.n	802e4d4 <pbuf_cat+0x2c>
  }
  /* { p is last pbuf of first h chain, p->next == NULL } */
  LWIP_ASSERT("p->tot_len == p->len (of last pbuf in chain)", p->tot_len == p->len);
 802e4f2:	68fb      	ldr	r3, [r7, #12]
 802e4f4:	891a      	ldrh	r2, [r3, #8]
 802e4f6:	68fb      	ldr	r3, [r7, #12]
 802e4f8:	895b      	ldrh	r3, [r3, #10]
 802e4fa:	429a      	cmp	r2, r3
 802e4fc:	d006      	beq.n	802e50c <pbuf_cat+0x64>
 802e4fe:	4b10      	ldr	r3, [pc, #64]	; (802e540 <pbuf_cat+0x98>)
 802e500:	f240 3262 	movw	r2, #866	; 0x362
 802e504:	4911      	ldr	r1, [pc, #68]	; (802e54c <pbuf_cat+0xa4>)
 802e506:	4810      	ldr	r0, [pc, #64]	; (802e548 <pbuf_cat+0xa0>)
 802e508:	f00a fdae 	bl	8039068 <iprintf>
  LWIP_ASSERT("p->next == NULL", p->next == NULL);
 802e50c:	68fb      	ldr	r3, [r7, #12]
 802e50e:	681b      	ldr	r3, [r3, #0]
 802e510:	2b00      	cmp	r3, #0
 802e512:	d006      	beq.n	802e522 <pbuf_cat+0x7a>
 802e514:	4b0a      	ldr	r3, [pc, #40]	; (802e540 <pbuf_cat+0x98>)
 802e516:	f240 3263 	movw	r2, #867	; 0x363
 802e51a:	490d      	ldr	r1, [pc, #52]	; (802e550 <pbuf_cat+0xa8>)
 802e51c:	480a      	ldr	r0, [pc, #40]	; (802e548 <pbuf_cat+0xa0>)
 802e51e:	f00a fda3 	bl	8039068 <iprintf>
  /* add total length of second chain to last pbuf total of first chain */
  p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 802e522:	68fb      	ldr	r3, [r7, #12]
 802e524:	891a      	ldrh	r2, [r3, #8]
 802e526:	683b      	ldr	r3, [r7, #0]
 802e528:	891b      	ldrh	r3, [r3, #8]
 802e52a:	4413      	add	r3, r2
 802e52c:	b29a      	uxth	r2, r3
 802e52e:	68fb      	ldr	r3, [r7, #12]
 802e530:	811a      	strh	r2, [r3, #8]
  /* chain last pbuf of head (p) with first of tail (t) */
  p->next = t;
 802e532:	68fb      	ldr	r3, [r7, #12]
 802e534:	683a      	ldr	r2, [r7, #0]
 802e536:	601a      	str	r2, [r3, #0]
  /* p->next now references t, but the caller will drop its reference to t,
   * so netto there is no change to the reference count of t.
   */
}
 802e538:	3710      	adds	r7, #16
 802e53a:	46bd      	mov	sp, r7
 802e53c:	bd80      	pop	{r7, pc}
 802e53e:	bf00      	nop
 802e540:	0803b040 	.word	0x0803b040
 802e544:	0803b234 	.word	0x0803b234
 802e548:	0803b0a0 	.word	0x0803b0a0
 802e54c:	0803b26c 	.word	0x0803b26c
 802e550:	0803b29c 	.word	0x0803b29c

0802e554 <pbuf_chain>:
 * The ->ref field of the first pbuf of the tail chain is adjusted.
 *
 */
void
pbuf_chain(struct pbuf *h, struct pbuf *t)
{
 802e554:	b580      	push	{r7, lr}
 802e556:	b082      	sub	sp, #8
 802e558:	af00      	add	r7, sp, #0
 802e55a:	6078      	str	r0, [r7, #4]
 802e55c:	6039      	str	r1, [r7, #0]
  pbuf_cat(h, t);
 802e55e:	6839      	ldr	r1, [r7, #0]
 802e560:	6878      	ldr	r0, [r7, #4]
 802e562:	f7ff ffa1 	bl	802e4a8 <pbuf_cat>
  /* t is now referenced by h */
  pbuf_ref(t);
 802e566:	6838      	ldr	r0, [r7, #0]
 802e568:	f7ff ff76 	bl	802e458 <pbuf_ref>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_chain: %p references %p\n", (void *)h, (void *)t));
}
 802e56c:	bf00      	nop
 802e56e:	3708      	adds	r7, #8
 802e570:	46bd      	mov	sp, r7
 802e572:	bd80      	pop	{r7, pc}

0802e574 <pbuf_copy>:
 *         ERR_ARG if one of the pbufs is NULL or p_to is not big
 *                 enough to hold p_from
 */
err_t
pbuf_copy(struct pbuf *p_to, const struct pbuf *p_from)
{
 802e574:	b580      	push	{r7, lr}
 802e576:	b086      	sub	sp, #24
 802e578:	af00      	add	r7, sp, #0
 802e57a:	6078      	str	r0, [r7, #4]
 802e57c:	6039      	str	r1, [r7, #0]
  size_t offset_to = 0, offset_from = 0, len;
 802e57e:	2300      	movs	r3, #0
 802e580:	617b      	str	r3, [r7, #20]
 802e582:	2300      	movs	r3, #0
 802e584:	613b      	str	r3, [r7, #16]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy(%p, %p)\n",
              (const void *)p_to, (const void *)p_from));

  /* is the target big enough to hold the source? */
  LWIP_ERROR("pbuf_copy: target not big enough to hold source", ((p_to != NULL) &&
 802e586:	687b      	ldr	r3, [r7, #4]
 802e588:	2b00      	cmp	r3, #0
 802e58a:	d008      	beq.n	802e59e <pbuf_copy+0x2a>
 802e58c:	683b      	ldr	r3, [r7, #0]
 802e58e:	2b00      	cmp	r3, #0
 802e590:	d005      	beq.n	802e59e <pbuf_copy+0x2a>
 802e592:	687b      	ldr	r3, [r7, #4]
 802e594:	891a      	ldrh	r2, [r3, #8]
 802e596:	683b      	ldr	r3, [r7, #0]
 802e598:	891b      	ldrh	r3, [r3, #8]
 802e59a:	429a      	cmp	r2, r3
 802e59c:	d209      	bcs.n	802e5b2 <pbuf_copy+0x3e>
 802e59e:	4b57      	ldr	r3, [pc, #348]	; (802e6fc <pbuf_copy+0x188>)
 802e5a0:	f240 32c9 	movw	r2, #969	; 0x3c9
 802e5a4:	4956      	ldr	r1, [pc, #344]	; (802e700 <pbuf_copy+0x18c>)
 802e5a6:	4857      	ldr	r0, [pc, #348]	; (802e704 <pbuf_copy+0x190>)
 802e5a8:	f00a fd5e 	bl	8039068 <iprintf>
 802e5ac:	f06f 030f 	mvn.w	r3, #15
 802e5b0:	e09f      	b.n	802e6f2 <pbuf_copy+0x17e>
             (p_from != NULL) && (p_to->tot_len >= p_from->tot_len)), return ERR_ARG;);

  /* iterate through pbuf chain */
  do {
    /* copy one part of the original chain */
    if ((p_to->len - offset_to) >= (p_from->len - offset_from)) {
 802e5b2:	687b      	ldr	r3, [r7, #4]
 802e5b4:	895b      	ldrh	r3, [r3, #10]
 802e5b6:	461a      	mov	r2, r3
 802e5b8:	697b      	ldr	r3, [r7, #20]
 802e5ba:	1ad2      	subs	r2, r2, r3
 802e5bc:	683b      	ldr	r3, [r7, #0]
 802e5be:	895b      	ldrh	r3, [r3, #10]
 802e5c0:	4619      	mov	r1, r3
 802e5c2:	693b      	ldr	r3, [r7, #16]
 802e5c4:	1acb      	subs	r3, r1, r3
 802e5c6:	429a      	cmp	r2, r3
 802e5c8:	d306      	bcc.n	802e5d8 <pbuf_copy+0x64>
      /* complete current p_from fits into current p_to */
      len = p_from->len - offset_from;
 802e5ca:	683b      	ldr	r3, [r7, #0]
 802e5cc:	895b      	ldrh	r3, [r3, #10]
 802e5ce:	461a      	mov	r2, r3
 802e5d0:	693b      	ldr	r3, [r7, #16]
 802e5d2:	1ad3      	subs	r3, r2, r3
 802e5d4:	60fb      	str	r3, [r7, #12]
 802e5d6:	e005      	b.n	802e5e4 <pbuf_copy+0x70>
    } else {
      /* current p_from does not fit into current p_to */
      len = p_to->len - offset_to;
 802e5d8:	687b      	ldr	r3, [r7, #4]
 802e5da:	895b      	ldrh	r3, [r3, #10]
 802e5dc:	461a      	mov	r2, r3
 802e5de:	697b      	ldr	r3, [r7, #20]
 802e5e0:	1ad3      	subs	r3, r2, r3
 802e5e2:	60fb      	str	r3, [r7, #12]
    }
    MEMCPY((u8_t *)p_to->payload + offset_to, (u8_t *)p_from->payload + offset_from, len);
 802e5e4:	687b      	ldr	r3, [r7, #4]
 802e5e6:	685a      	ldr	r2, [r3, #4]
 802e5e8:	697b      	ldr	r3, [r7, #20]
 802e5ea:	18d0      	adds	r0, r2, r3
 802e5ec:	683b      	ldr	r3, [r7, #0]
 802e5ee:	685a      	ldr	r2, [r3, #4]
 802e5f0:	693b      	ldr	r3, [r7, #16]
 802e5f2:	4413      	add	r3, r2
 802e5f4:	68fa      	ldr	r2, [r7, #12]
 802e5f6:	4619      	mov	r1, r3
 802e5f8:	f00a f93c 	bl	8038874 <memcpy>
    offset_to += len;
 802e5fc:	697a      	ldr	r2, [r7, #20]
 802e5fe:	68fb      	ldr	r3, [r7, #12]
 802e600:	4413      	add	r3, r2
 802e602:	617b      	str	r3, [r7, #20]
    offset_from += len;
 802e604:	693a      	ldr	r2, [r7, #16]
 802e606:	68fb      	ldr	r3, [r7, #12]
 802e608:	4413      	add	r3, r2
 802e60a:	613b      	str	r3, [r7, #16]
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 802e60c:	687b      	ldr	r3, [r7, #4]
 802e60e:	895b      	ldrh	r3, [r3, #10]
 802e610:	461a      	mov	r2, r3
 802e612:	697b      	ldr	r3, [r7, #20]
 802e614:	4293      	cmp	r3, r2
 802e616:	d906      	bls.n	802e626 <pbuf_copy+0xb2>
 802e618:	4b38      	ldr	r3, [pc, #224]	; (802e6fc <pbuf_copy+0x188>)
 802e61a:	f240 32d9 	movw	r2, #985	; 0x3d9
 802e61e:	493a      	ldr	r1, [pc, #232]	; (802e708 <pbuf_copy+0x194>)
 802e620:	4838      	ldr	r0, [pc, #224]	; (802e704 <pbuf_copy+0x190>)
 802e622:	f00a fd21 	bl	8039068 <iprintf>
    LWIP_ASSERT("offset_from <= p_from->len", offset_from <= p_from->len);
 802e626:	683b      	ldr	r3, [r7, #0]
 802e628:	895b      	ldrh	r3, [r3, #10]
 802e62a:	461a      	mov	r2, r3
 802e62c:	693b      	ldr	r3, [r7, #16]
 802e62e:	4293      	cmp	r3, r2
 802e630:	d906      	bls.n	802e640 <pbuf_copy+0xcc>
 802e632:	4b32      	ldr	r3, [pc, #200]	; (802e6fc <pbuf_copy+0x188>)
 802e634:	f240 32da 	movw	r2, #986	; 0x3da
 802e638:	4934      	ldr	r1, [pc, #208]	; (802e70c <pbuf_copy+0x198>)
 802e63a:	4832      	ldr	r0, [pc, #200]	; (802e704 <pbuf_copy+0x190>)
 802e63c:	f00a fd14 	bl	8039068 <iprintf>
    if (offset_from >= p_from->len) {
 802e640:	683b      	ldr	r3, [r7, #0]
 802e642:	895b      	ldrh	r3, [r3, #10]
 802e644:	461a      	mov	r2, r3
 802e646:	693b      	ldr	r3, [r7, #16]
 802e648:	4293      	cmp	r3, r2
 802e64a:	d304      	bcc.n	802e656 <pbuf_copy+0xe2>
      /* on to next p_from (if any) */
      offset_from = 0;
 802e64c:	2300      	movs	r3, #0
 802e64e:	613b      	str	r3, [r7, #16]
      p_from = p_from->next;
 802e650:	683b      	ldr	r3, [r7, #0]
 802e652:	681b      	ldr	r3, [r3, #0]
 802e654:	603b      	str	r3, [r7, #0]
    }
    if (offset_to == p_to->len) {
 802e656:	687b      	ldr	r3, [r7, #4]
 802e658:	895b      	ldrh	r3, [r3, #10]
 802e65a:	461a      	mov	r2, r3
 802e65c:	697b      	ldr	r3, [r7, #20]
 802e65e:	4293      	cmp	r3, r2
 802e660:	d114      	bne.n	802e68c <pbuf_copy+0x118>
      /* on to next p_to (if any) */
      offset_to = 0;
 802e662:	2300      	movs	r3, #0
 802e664:	617b      	str	r3, [r7, #20]
      p_to = p_to->next;
 802e666:	687b      	ldr	r3, [r7, #4]
 802e668:	681b      	ldr	r3, [r3, #0]
 802e66a:	607b      	str	r3, [r7, #4]
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL), return ERR_ARG;);
 802e66c:	687b      	ldr	r3, [r7, #4]
 802e66e:	2b00      	cmp	r3, #0
 802e670:	d10c      	bne.n	802e68c <pbuf_copy+0x118>
 802e672:	683b      	ldr	r3, [r7, #0]
 802e674:	2b00      	cmp	r3, #0
 802e676:	d009      	beq.n	802e68c <pbuf_copy+0x118>
 802e678:	4b20      	ldr	r3, [pc, #128]	; (802e6fc <pbuf_copy+0x188>)
 802e67a:	f44f 7279 	mov.w	r2, #996	; 0x3e4
 802e67e:	4924      	ldr	r1, [pc, #144]	; (802e710 <pbuf_copy+0x19c>)
 802e680:	4820      	ldr	r0, [pc, #128]	; (802e704 <pbuf_copy+0x190>)
 802e682:	f00a fcf1 	bl	8039068 <iprintf>
 802e686:	f06f 030f 	mvn.w	r3, #15
 802e68a:	e032      	b.n	802e6f2 <pbuf_copy+0x17e>
    }

    if ((p_from != NULL) && (p_from->len == p_from->tot_len)) {
 802e68c:	683b      	ldr	r3, [r7, #0]
 802e68e:	2b00      	cmp	r3, #0
 802e690:	d013      	beq.n	802e6ba <pbuf_copy+0x146>
 802e692:	683b      	ldr	r3, [r7, #0]
 802e694:	895a      	ldrh	r2, [r3, #10]
 802e696:	683b      	ldr	r3, [r7, #0]
 802e698:	891b      	ldrh	r3, [r3, #8]
 802e69a:	429a      	cmp	r2, r3
 802e69c:	d10d      	bne.n	802e6ba <pbuf_copy+0x146>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 802e69e:	683b      	ldr	r3, [r7, #0]
 802e6a0:	681b      	ldr	r3, [r3, #0]
 802e6a2:	2b00      	cmp	r3, #0
 802e6a4:	d009      	beq.n	802e6ba <pbuf_copy+0x146>
 802e6a6:	4b15      	ldr	r3, [pc, #84]	; (802e6fc <pbuf_copy+0x188>)
 802e6a8:	f240 32e9 	movw	r2, #1001	; 0x3e9
 802e6ac:	4919      	ldr	r1, [pc, #100]	; (802e714 <pbuf_copy+0x1a0>)
 802e6ae:	4815      	ldr	r0, [pc, #84]	; (802e704 <pbuf_copy+0x190>)
 802e6b0:	f00a fcda 	bl	8039068 <iprintf>
 802e6b4:	f06f 0305 	mvn.w	r3, #5
 802e6b8:	e01b      	b.n	802e6f2 <pbuf_copy+0x17e>
                 (p_from->next == NULL), return ERR_VAL;);
    }
    if ((p_to != NULL) && (p_to->len == p_to->tot_len)) {
 802e6ba:	687b      	ldr	r3, [r7, #4]
 802e6bc:	2b00      	cmp	r3, #0
 802e6be:	d013      	beq.n	802e6e8 <pbuf_copy+0x174>
 802e6c0:	687b      	ldr	r3, [r7, #4]
 802e6c2:	895a      	ldrh	r2, [r3, #10]
 802e6c4:	687b      	ldr	r3, [r7, #4]
 802e6c6:	891b      	ldrh	r3, [r3, #8]
 802e6c8:	429a      	cmp	r2, r3
 802e6ca:	d10d      	bne.n	802e6e8 <pbuf_copy+0x174>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 802e6cc:	687b      	ldr	r3, [r7, #4]
 802e6ce:	681b      	ldr	r3, [r3, #0]
 802e6d0:	2b00      	cmp	r3, #0
 802e6d2:	d009      	beq.n	802e6e8 <pbuf_copy+0x174>
 802e6d4:	4b09      	ldr	r3, [pc, #36]	; (802e6fc <pbuf_copy+0x188>)
 802e6d6:	f240 32ee 	movw	r2, #1006	; 0x3ee
 802e6da:	490e      	ldr	r1, [pc, #56]	; (802e714 <pbuf_copy+0x1a0>)
 802e6dc:	4809      	ldr	r0, [pc, #36]	; (802e704 <pbuf_copy+0x190>)
 802e6de:	f00a fcc3 	bl	8039068 <iprintf>
 802e6e2:	f06f 0305 	mvn.w	r3, #5
 802e6e6:	e004      	b.n	802e6f2 <pbuf_copy+0x17e>
                 (p_to->next == NULL), return ERR_VAL;);
    }
  } while (p_from);
 802e6e8:	683b      	ldr	r3, [r7, #0]
 802e6ea:	2b00      	cmp	r3, #0
 802e6ec:	f47f af61 	bne.w	802e5b2 <pbuf_copy+0x3e>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy: end of chain reached.\n"));
  return ERR_OK;
 802e6f0:	2300      	movs	r3, #0
}
 802e6f2:	4618      	mov	r0, r3
 802e6f4:	3718      	adds	r7, #24
 802e6f6:	46bd      	mov	sp, r7
 802e6f8:	bd80      	pop	{r7, pc}
 802e6fa:	bf00      	nop
 802e6fc:	0803b040 	.word	0x0803b040
 802e700:	0803b2e8 	.word	0x0803b2e8
 802e704:	0803b0a0 	.word	0x0803b0a0
 802e708:	0803b318 	.word	0x0803b318
 802e70c:	0803b330 	.word	0x0803b330
 802e710:	0803b34c 	.word	0x0803b34c
 802e714:	0803b35c 	.word	0x0803b35c

0802e718 <pbuf_copy_partial>:
 * @param offset offset into the packet buffer from where to begin copying len bytes
 * @return the number of bytes copied, or 0 on failure
 */
u16_t
pbuf_copy_partial(const struct pbuf *buf, void *dataptr, u16_t len, u16_t offset)
{
 802e718:	b580      	push	{r7, lr}
 802e71a:	b088      	sub	sp, #32
 802e71c:	af00      	add	r7, sp, #0
 802e71e:	60f8      	str	r0, [r7, #12]
 802e720:	60b9      	str	r1, [r7, #8]
 802e722:	4611      	mov	r1, r2
 802e724:	461a      	mov	r2, r3
 802e726:	460b      	mov	r3, r1
 802e728:	80fb      	strh	r3, [r7, #6]
 802e72a:	4613      	mov	r3, r2
 802e72c:	80bb      	strh	r3, [r7, #4]
  const struct pbuf *p;
  u16_t left = 0;
 802e72e:	2300      	movs	r3, #0
 802e730:	837b      	strh	r3, [r7, #26]
  u16_t buf_copy_len;
  u16_t copied_total = 0;
 802e732:	2300      	movs	r3, #0
 802e734:	82fb      	strh	r3, [r7, #22]

  LWIP_ERROR("pbuf_copy_partial: invalid buf", (buf != NULL), return 0;);
 802e736:	68fb      	ldr	r3, [r7, #12]
 802e738:	2b00      	cmp	r3, #0
 802e73a:	d108      	bne.n	802e74e <pbuf_copy_partial+0x36>
 802e73c:	4b2b      	ldr	r3, [pc, #172]	; (802e7ec <pbuf_copy_partial+0xd4>)
 802e73e:	f240 420a 	movw	r2, #1034	; 0x40a
 802e742:	492b      	ldr	r1, [pc, #172]	; (802e7f0 <pbuf_copy_partial+0xd8>)
 802e744:	482b      	ldr	r0, [pc, #172]	; (802e7f4 <pbuf_copy_partial+0xdc>)
 802e746:	f00a fc8f 	bl	8039068 <iprintf>
 802e74a:	2300      	movs	r3, #0
 802e74c:	e04a      	b.n	802e7e4 <pbuf_copy_partial+0xcc>
  LWIP_ERROR("pbuf_copy_partial: invalid dataptr", (dataptr != NULL), return 0;);
 802e74e:	68bb      	ldr	r3, [r7, #8]
 802e750:	2b00      	cmp	r3, #0
 802e752:	d108      	bne.n	802e766 <pbuf_copy_partial+0x4e>
 802e754:	4b25      	ldr	r3, [pc, #148]	; (802e7ec <pbuf_copy_partial+0xd4>)
 802e756:	f240 420b 	movw	r2, #1035	; 0x40b
 802e75a:	4927      	ldr	r1, [pc, #156]	; (802e7f8 <pbuf_copy_partial+0xe0>)
 802e75c:	4825      	ldr	r0, [pc, #148]	; (802e7f4 <pbuf_copy_partial+0xdc>)
 802e75e:	f00a fc83 	bl	8039068 <iprintf>
 802e762:	2300      	movs	r3, #0
 802e764:	e03e      	b.n	802e7e4 <pbuf_copy_partial+0xcc>

  /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. */
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 802e766:	68fb      	ldr	r3, [r7, #12]
 802e768:	61fb      	str	r3, [r7, #28]
 802e76a:	e034      	b.n	802e7d6 <pbuf_copy_partial+0xbe>
    if ((offset != 0) && (offset >= p->len)) {
 802e76c:	88bb      	ldrh	r3, [r7, #4]
 802e76e:	2b00      	cmp	r3, #0
 802e770:	d00a      	beq.n	802e788 <pbuf_copy_partial+0x70>
 802e772:	69fb      	ldr	r3, [r7, #28]
 802e774:	895b      	ldrh	r3, [r3, #10]
 802e776:	88ba      	ldrh	r2, [r7, #4]
 802e778:	429a      	cmp	r2, r3
 802e77a:	d305      	bcc.n	802e788 <pbuf_copy_partial+0x70>
      /* don't copy from this buffer -> on to the next */
      offset = (u16_t)(offset - p->len);
 802e77c:	69fb      	ldr	r3, [r7, #28]
 802e77e:	895b      	ldrh	r3, [r3, #10]
 802e780:	88ba      	ldrh	r2, [r7, #4]
 802e782:	1ad3      	subs	r3, r2, r3
 802e784:	80bb      	strh	r3, [r7, #4]
 802e786:	e023      	b.n	802e7d0 <pbuf_copy_partial+0xb8>
    } else {
      /* copy from this buffer. maybe only partially. */
      buf_copy_len = (u16_t)(p->len - offset);
 802e788:	69fb      	ldr	r3, [r7, #28]
 802e78a:	895a      	ldrh	r2, [r3, #10]
 802e78c:	88bb      	ldrh	r3, [r7, #4]
 802e78e:	1ad3      	subs	r3, r2, r3
 802e790:	833b      	strh	r3, [r7, #24]
      if (buf_copy_len > len) {
 802e792:	8b3a      	ldrh	r2, [r7, #24]
 802e794:	88fb      	ldrh	r3, [r7, #6]
 802e796:	429a      	cmp	r2, r3
 802e798:	d901      	bls.n	802e79e <pbuf_copy_partial+0x86>
        buf_copy_len = len;
 802e79a:	88fb      	ldrh	r3, [r7, #6]
 802e79c:	833b      	strh	r3, [r7, #24]
      }
      /* copy the necessary parts of the buffer */
      MEMCPY(&((char *)dataptr)[left], &((char *)p->payload)[offset], buf_copy_len);
 802e79e:	8b7b      	ldrh	r3, [r7, #26]
 802e7a0:	68ba      	ldr	r2, [r7, #8]
 802e7a2:	18d0      	adds	r0, r2, r3
 802e7a4:	69fb      	ldr	r3, [r7, #28]
 802e7a6:	685a      	ldr	r2, [r3, #4]
 802e7a8:	88bb      	ldrh	r3, [r7, #4]
 802e7aa:	4413      	add	r3, r2
 802e7ac:	8b3a      	ldrh	r2, [r7, #24]
 802e7ae:	4619      	mov	r1, r3
 802e7b0:	f00a f860 	bl	8038874 <memcpy>
      copied_total = (u16_t)(copied_total + buf_copy_len);
 802e7b4:	8afa      	ldrh	r2, [r7, #22]
 802e7b6:	8b3b      	ldrh	r3, [r7, #24]
 802e7b8:	4413      	add	r3, r2
 802e7ba:	82fb      	strh	r3, [r7, #22]
      left = (u16_t)(left + buf_copy_len);
 802e7bc:	8b7a      	ldrh	r2, [r7, #26]
 802e7be:	8b3b      	ldrh	r3, [r7, #24]
 802e7c0:	4413      	add	r3, r2
 802e7c2:	837b      	strh	r3, [r7, #26]
      len = (u16_t)(len - buf_copy_len);
 802e7c4:	88fa      	ldrh	r2, [r7, #6]
 802e7c6:	8b3b      	ldrh	r3, [r7, #24]
 802e7c8:	1ad3      	subs	r3, r2, r3
 802e7ca:	80fb      	strh	r3, [r7, #6]
      offset = 0;
 802e7cc:	2300      	movs	r3, #0
 802e7ce:	80bb      	strh	r3, [r7, #4]
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 802e7d0:	69fb      	ldr	r3, [r7, #28]
 802e7d2:	681b      	ldr	r3, [r3, #0]
 802e7d4:	61fb      	str	r3, [r7, #28]
 802e7d6:	88fb      	ldrh	r3, [r7, #6]
 802e7d8:	2b00      	cmp	r3, #0
 802e7da:	d002      	beq.n	802e7e2 <pbuf_copy_partial+0xca>
 802e7dc:	69fb      	ldr	r3, [r7, #28]
 802e7de:	2b00      	cmp	r3, #0
 802e7e0:	d1c4      	bne.n	802e76c <pbuf_copy_partial+0x54>
    }
  }
  return copied_total;
 802e7e2:	8afb      	ldrh	r3, [r7, #22]
}
 802e7e4:	4618      	mov	r0, r3
 802e7e6:	3720      	adds	r7, #32
 802e7e8:	46bd      	mov	sp, r7
 802e7ea:	bd80      	pop	{r7, pc}
 802e7ec:	0803b040 	.word	0x0803b040
 802e7f0:	0803b388 	.word	0x0803b388
 802e7f4:	0803b0a0 	.word	0x0803b0a0
 802e7f8:	0803b3a8 	.word	0x0803b3a8

0802e7fc <pbuf_clone>:
 *
 * @return a new pbuf or NULL if allocation fails
 */
struct pbuf *
pbuf_clone(pbuf_layer layer, pbuf_type type, struct pbuf *p)
{
 802e7fc:	b580      	push	{r7, lr}
 802e7fe:	b084      	sub	sp, #16
 802e800:	af00      	add	r7, sp, #0
 802e802:	4603      	mov	r3, r0
 802e804:	603a      	str	r2, [r7, #0]
 802e806:	71fb      	strb	r3, [r7, #7]
 802e808:	460b      	mov	r3, r1
 802e80a:	80bb      	strh	r3, [r7, #4]
  struct pbuf *q;
  err_t err;
  q = pbuf_alloc(layer, p->tot_len, type);
 802e80c:	683b      	ldr	r3, [r7, #0]
 802e80e:	8919      	ldrh	r1, [r3, #8]
 802e810:	88ba      	ldrh	r2, [r7, #4]
 802e812:	79fb      	ldrb	r3, [r7, #7]
 802e814:	4618      	mov	r0, r3
 802e816:	f7ff fa63 	bl	802dce0 <pbuf_alloc>
 802e81a:	60f8      	str	r0, [r7, #12]
  if (q == NULL) {
 802e81c:	68fb      	ldr	r3, [r7, #12]
 802e81e:	2b00      	cmp	r3, #0
 802e820:	d101      	bne.n	802e826 <pbuf_clone+0x2a>
    return NULL;
 802e822:	2300      	movs	r3, #0
 802e824:	e011      	b.n	802e84a <pbuf_clone+0x4e>
  }
  err = pbuf_copy(q, p);
 802e826:	6839      	ldr	r1, [r7, #0]
 802e828:	68f8      	ldr	r0, [r7, #12]
 802e82a:	f7ff fea3 	bl	802e574 <pbuf_copy>
 802e82e:	4603      	mov	r3, r0
 802e830:	72fb      	strb	r3, [r7, #11]
  LWIP_UNUSED_ARG(err); /* in case of LWIP_NOASSERT */
  LWIP_ASSERT("pbuf_copy failed", err == ERR_OK);
 802e832:	f997 300b 	ldrsb.w	r3, [r7, #11]
 802e836:	2b00      	cmp	r3, #0
 802e838:	d006      	beq.n	802e848 <pbuf_clone+0x4c>
 802e83a:	4b06      	ldr	r3, [pc, #24]	; (802e854 <pbuf_clone+0x58>)
 802e83c:	f240 5224 	movw	r2, #1316	; 0x524
 802e840:	4905      	ldr	r1, [pc, #20]	; (802e858 <pbuf_clone+0x5c>)
 802e842:	4806      	ldr	r0, [pc, #24]	; (802e85c <pbuf_clone+0x60>)
 802e844:	f00a fc10 	bl	8039068 <iprintf>
  return q;
 802e848:	68fb      	ldr	r3, [r7, #12]
}
 802e84a:	4618      	mov	r0, r3
 802e84c:	3710      	adds	r7, #16
 802e84e:	46bd      	mov	sp, r7
 802e850:	bd80      	pop	{r7, pc}
 802e852:	bf00      	nop
 802e854:	0803b040 	.word	0x0803b040
 802e858:	0803b4b4 	.word	0x0803b4b4
 802e85c:	0803b0a0 	.word	0x0803b0a0

0802e860 <stats_init>:

struct stats_ lwip_stats;

void
stats_init(void)
{
 802e860:	b480      	push	{r7}
 802e862:	af00      	add	r7, sp, #0
#ifdef LWIP_DEBUG
#if MEM_STATS
  lwip_stats.mem.name = "MEM";
#endif /* MEM_STATS */
#endif /* LWIP_DEBUG */
}
 802e864:	bf00      	nop
 802e866:	46bd      	mov	sp, r7
 802e868:	f85d 7b04 	ldr.w	r7, [sp], #4
 802e86c:	4770      	bx	lr
	...

0802e870 <tcp_init>:
/**
 * Initialize this module.
 */
void
tcp_init(void)
{
 802e870:	b580      	push	{r7, lr}
 802e872:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  tcp_port = TCP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 802e874:	f00a fc86 	bl	8039184 <rand>
 802e878:	4603      	mov	r3, r0
 802e87a:	b29b      	uxth	r3, r3
 802e87c:	f3c3 030d 	ubfx	r3, r3, #0, #14
 802e880:	b29b      	uxth	r3, r3
 802e882:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 802e886:	b29a      	uxth	r2, r3
 802e888:	4b01      	ldr	r3, [pc, #4]	; (802e890 <tcp_init+0x20>)
 802e88a:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 802e88c:	bf00      	nop
 802e88e:	bd80      	pop	{r7, pc}
 802e890:	20000028 	.word	0x20000028

0802e894 <tcp_free>:

/** Free a tcp pcb */
void
tcp_free(struct tcp_pcb *pcb)
{
 802e894:	b580      	push	{r7, lr}
 802e896:	b082      	sub	sp, #8
 802e898:	af00      	add	r7, sp, #0
 802e89a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 802e89c:	687b      	ldr	r3, [r7, #4]
 802e89e:	7d1b      	ldrb	r3, [r3, #20]
 802e8a0:	2b01      	cmp	r3, #1
 802e8a2:	d105      	bne.n	802e8b0 <tcp_free+0x1c>
 802e8a4:	4b06      	ldr	r3, [pc, #24]	; (802e8c0 <tcp_free+0x2c>)
 802e8a6:	22d4      	movs	r2, #212	; 0xd4
 802e8a8:	4906      	ldr	r1, [pc, #24]	; (802e8c4 <tcp_free+0x30>)
 802e8aa:	4807      	ldr	r0, [pc, #28]	; (802e8c8 <tcp_free+0x34>)
 802e8ac:	f00a fbdc 	bl	8039068 <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB, pcb);
 802e8b0:	6879      	ldr	r1, [r7, #4]
 802e8b2:	2001      	movs	r0, #1
 802e8b4:	f7fe fe54 	bl	802d560 <memp_free>
}
 802e8b8:	bf00      	nop
 802e8ba:	3708      	adds	r7, #8
 802e8bc:	46bd      	mov	sp, r7
 802e8be:	bd80      	pop	{r7, pc}
 802e8c0:	0803b540 	.word	0x0803b540
 802e8c4:	0803b570 	.word	0x0803b570
 802e8c8:	0803b584 	.word	0x0803b584

0802e8cc <tcp_free_listen>:

/** Free a tcp listen pcb */
static void
tcp_free_listen(struct tcp_pcb *pcb)
{
 802e8cc:	b580      	push	{r7, lr}
 802e8ce:	b082      	sub	sp, #8
 802e8d0:	af00      	add	r7, sp, #0
 802e8d2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free_listen: !LISTEN", pcb->state != LISTEN);
 802e8d4:	687b      	ldr	r3, [r7, #4]
 802e8d6:	7d1b      	ldrb	r3, [r3, #20]
 802e8d8:	2b01      	cmp	r3, #1
 802e8da:	d105      	bne.n	802e8e8 <tcp_free_listen+0x1c>
 802e8dc:	4b06      	ldr	r3, [pc, #24]	; (802e8f8 <tcp_free_listen+0x2c>)
 802e8de:	22df      	movs	r2, #223	; 0xdf
 802e8e0:	4906      	ldr	r1, [pc, #24]	; (802e8fc <tcp_free_listen+0x30>)
 802e8e2:	4807      	ldr	r0, [pc, #28]	; (802e900 <tcp_free_listen+0x34>)
 802e8e4:	f00a fbc0 	bl	8039068 <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB_LISTEN, pcb);
 802e8e8:	6879      	ldr	r1, [r7, #4]
 802e8ea:	2002      	movs	r0, #2
 802e8ec:	f7fe fe38 	bl	802d560 <memp_free>
}
 802e8f0:	bf00      	nop
 802e8f2:	3708      	adds	r7, #8
 802e8f4:	46bd      	mov	sp, r7
 802e8f6:	bd80      	pop	{r7, pc}
 802e8f8:	0803b540 	.word	0x0803b540
 802e8fc:	0803b5ac 	.word	0x0803b5ac
 802e900:	0803b584 	.word	0x0803b584

0802e904 <tcp_tmr>:
/**
 * Called periodically to dispatch TCP timers.
 */
void
tcp_tmr(void)
{
 802e904:	b580      	push	{r7, lr}
 802e906:	af00      	add	r7, sp, #0
  /* Call tcp_fasttmr() every 250 ms */
  tcp_fasttmr();
 802e908:	f001 f8a6 	bl	802fa58 <tcp_fasttmr>

  if (++tcp_timer & 1) {
 802e90c:	4b07      	ldr	r3, [pc, #28]	; (802e92c <tcp_tmr+0x28>)
 802e90e:	781b      	ldrb	r3, [r3, #0]
 802e910:	3301      	adds	r3, #1
 802e912:	b2da      	uxtb	r2, r3
 802e914:	4b05      	ldr	r3, [pc, #20]	; (802e92c <tcp_tmr+0x28>)
 802e916:	701a      	strb	r2, [r3, #0]
 802e918:	4b04      	ldr	r3, [pc, #16]	; (802e92c <tcp_tmr+0x28>)
 802e91a:	781b      	ldrb	r3, [r3, #0]
 802e91c:	f003 0301 	and.w	r3, r3, #1
 802e920:	2b00      	cmp	r3, #0
 802e922:	d001      	beq.n	802e928 <tcp_tmr+0x24>
    /* Call tcp_slowtmr() every 500 ms, i.e., every other timer
       tcp_tmr() is called. */
    tcp_slowtmr();
 802e924:	f000 fd58 	bl	802f3d8 <tcp_slowtmr>
  }
}
 802e928:	bf00      	nop
 802e92a:	bd80      	pop	{r7, pc}
 802e92c:	2000ef15 	.word	0x2000ef15

0802e930 <tcp_remove_listener>:
/** Called when a listen pcb is closed. Iterates one pcb list and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_remove_listener(struct tcp_pcb *list, struct tcp_pcb_listen *lpcb)
{
 802e930:	b580      	push	{r7, lr}
 802e932:	b084      	sub	sp, #16
 802e934:	af00      	add	r7, sp, #0
 802e936:	6078      	str	r0, [r7, #4]
 802e938:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;

  LWIP_ASSERT("tcp_remove_listener: invalid listener", lpcb != NULL);
 802e93a:	683b      	ldr	r3, [r7, #0]
 802e93c:	2b00      	cmp	r3, #0
 802e93e:	d105      	bne.n	802e94c <tcp_remove_listener+0x1c>
 802e940:	4b0d      	ldr	r3, [pc, #52]	; (802e978 <tcp_remove_listener+0x48>)
 802e942:	22ff      	movs	r2, #255	; 0xff
 802e944:	490d      	ldr	r1, [pc, #52]	; (802e97c <tcp_remove_listener+0x4c>)
 802e946:	480e      	ldr	r0, [pc, #56]	; (802e980 <tcp_remove_listener+0x50>)
 802e948:	f00a fb8e 	bl	8039068 <iprintf>

  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 802e94c:	687b      	ldr	r3, [r7, #4]
 802e94e:	60fb      	str	r3, [r7, #12]
 802e950:	e00a      	b.n	802e968 <tcp_remove_listener+0x38>
    if (pcb->listener == lpcb) {
 802e952:	68fb      	ldr	r3, [r7, #12]
 802e954:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 802e956:	683a      	ldr	r2, [r7, #0]
 802e958:	429a      	cmp	r2, r3
 802e95a:	d102      	bne.n	802e962 <tcp_remove_listener+0x32>
      pcb->listener = NULL;
 802e95c:	68fb      	ldr	r3, [r7, #12]
 802e95e:	2200      	movs	r2, #0
 802e960:	67da      	str	r2, [r3, #124]	; 0x7c
  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 802e962:	68fb      	ldr	r3, [r7, #12]
 802e964:	68db      	ldr	r3, [r3, #12]
 802e966:	60fb      	str	r3, [r7, #12]
 802e968:	68fb      	ldr	r3, [r7, #12]
 802e96a:	2b00      	cmp	r3, #0
 802e96c:	d1f1      	bne.n	802e952 <tcp_remove_listener+0x22>
    }
  }
}
 802e96e:	bf00      	nop
 802e970:	bf00      	nop
 802e972:	3710      	adds	r7, #16
 802e974:	46bd      	mov	sp, r7
 802e976:	bd80      	pop	{r7, pc}
 802e978:	0803b540 	.word	0x0803b540
 802e97c:	0803b5c8 	.word	0x0803b5c8
 802e980:	0803b584 	.word	0x0803b584

0802e984 <tcp_listen_closed>:
/** Called when a listen pcb is closed. Iterates all pcb lists and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_listen_closed(struct tcp_pcb *pcb)
{
 802e984:	b580      	push	{r7, lr}
 802e986:	b084      	sub	sp, #16
 802e988:	af00      	add	r7, sp, #0
 802e98a:	6078      	str	r0, [r7, #4]
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
  size_t i;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 802e98c:	687b      	ldr	r3, [r7, #4]
 802e98e:	2b00      	cmp	r3, #0
 802e990:	d106      	bne.n	802e9a0 <tcp_listen_closed+0x1c>
 802e992:	4b14      	ldr	r3, [pc, #80]	; (802e9e4 <tcp_listen_closed+0x60>)
 802e994:	f240 1211 	movw	r2, #273	; 0x111
 802e998:	4913      	ldr	r1, [pc, #76]	; (802e9e8 <tcp_listen_closed+0x64>)
 802e99a:	4814      	ldr	r0, [pc, #80]	; (802e9ec <tcp_listen_closed+0x68>)
 802e99c:	f00a fb64 	bl	8039068 <iprintf>
  LWIP_ASSERT("pcb->state == LISTEN", pcb->state == LISTEN);
 802e9a0:	687b      	ldr	r3, [r7, #4]
 802e9a2:	7d1b      	ldrb	r3, [r3, #20]
 802e9a4:	2b01      	cmp	r3, #1
 802e9a6:	d006      	beq.n	802e9b6 <tcp_listen_closed+0x32>
 802e9a8:	4b0e      	ldr	r3, [pc, #56]	; (802e9e4 <tcp_listen_closed+0x60>)
 802e9aa:	f44f 7289 	mov.w	r2, #274	; 0x112
 802e9ae:	4910      	ldr	r1, [pc, #64]	; (802e9f0 <tcp_listen_closed+0x6c>)
 802e9b0:	480e      	ldr	r0, [pc, #56]	; (802e9ec <tcp_listen_closed+0x68>)
 802e9b2:	f00a fb59 	bl	8039068 <iprintf>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 802e9b6:	2301      	movs	r3, #1
 802e9b8:	60fb      	str	r3, [r7, #12]
 802e9ba:	e00b      	b.n	802e9d4 <tcp_listen_closed+0x50>
    tcp_remove_listener(*tcp_pcb_lists[i], (struct tcp_pcb_listen *)pcb);
 802e9bc:	4a0d      	ldr	r2, [pc, #52]	; (802e9f4 <tcp_listen_closed+0x70>)
 802e9be:	68fb      	ldr	r3, [r7, #12]
 802e9c0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 802e9c4:	681b      	ldr	r3, [r3, #0]
 802e9c6:	6879      	ldr	r1, [r7, #4]
 802e9c8:	4618      	mov	r0, r3
 802e9ca:	f7ff ffb1 	bl	802e930 <tcp_remove_listener>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 802e9ce:	68fb      	ldr	r3, [r7, #12]
 802e9d0:	3301      	adds	r3, #1
 802e9d2:	60fb      	str	r3, [r7, #12]
 802e9d4:	68fb      	ldr	r3, [r7, #12]
 802e9d6:	2b03      	cmp	r3, #3
 802e9d8:	d9f0      	bls.n	802e9bc <tcp_listen_closed+0x38>
  }
#endif
  LWIP_UNUSED_ARG(pcb);
}
 802e9da:	bf00      	nop
 802e9dc:	bf00      	nop
 802e9de:	3710      	adds	r7, #16
 802e9e0:	46bd      	mov	sp, r7
 802e9e2:	bd80      	pop	{r7, pc}
 802e9e4:	0803b540 	.word	0x0803b540
 802e9e8:	0803b5f0 	.word	0x0803b5f0
 802e9ec:	0803b584 	.word	0x0803b584
 802e9f0:	0803b5fc 	.word	0x0803b5fc
 802e9f4:	0803d604 	.word	0x0803d604

0802e9f8 <tcp_close_shutdown>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
static err_t
tcp_close_shutdown(struct tcp_pcb *pcb, u8_t rst_on_unacked_data)
{
 802e9f8:	b5b0      	push	{r4, r5, r7, lr}
 802e9fa:	b088      	sub	sp, #32
 802e9fc:	af04      	add	r7, sp, #16
 802e9fe:	6078      	str	r0, [r7, #4]
 802ea00:	460b      	mov	r3, r1
 802ea02:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("tcp_close_shutdown: invalid pcb", pcb != NULL);
 802ea04:	687b      	ldr	r3, [r7, #4]
 802ea06:	2b00      	cmp	r3, #0
 802ea08:	d106      	bne.n	802ea18 <tcp_close_shutdown+0x20>
 802ea0a:	4b63      	ldr	r3, [pc, #396]	; (802eb98 <tcp_close_shutdown+0x1a0>)
 802ea0c:	f44f 72af 	mov.w	r2, #350	; 0x15e
 802ea10:	4962      	ldr	r1, [pc, #392]	; (802eb9c <tcp_close_shutdown+0x1a4>)
 802ea12:	4863      	ldr	r0, [pc, #396]	; (802eba0 <tcp_close_shutdown+0x1a8>)
 802ea14:	f00a fb28 	bl	8039068 <iprintf>

  if (rst_on_unacked_data && ((pcb->state == ESTABLISHED) || (pcb->state == CLOSE_WAIT))) {
 802ea18:	78fb      	ldrb	r3, [r7, #3]
 802ea1a:	2b00      	cmp	r3, #0
 802ea1c:	d066      	beq.n	802eaec <tcp_close_shutdown+0xf4>
 802ea1e:	687b      	ldr	r3, [r7, #4]
 802ea20:	7d1b      	ldrb	r3, [r3, #20]
 802ea22:	2b04      	cmp	r3, #4
 802ea24:	d003      	beq.n	802ea2e <tcp_close_shutdown+0x36>
 802ea26:	687b      	ldr	r3, [r7, #4]
 802ea28:	7d1b      	ldrb	r3, [r3, #20]
 802ea2a:	2b07      	cmp	r3, #7
 802ea2c:	d15e      	bne.n	802eaec <tcp_close_shutdown+0xf4>
    if ((pcb->refused_data != NULL) || (pcb->rcv_wnd != TCP_WND_MAX(pcb))) {
 802ea2e:	687b      	ldr	r3, [r7, #4]
 802ea30:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 802ea32:	2b00      	cmp	r3, #0
 802ea34:	d104      	bne.n	802ea40 <tcp_close_shutdown+0x48>
 802ea36:	687b      	ldr	r3, [r7, #4]
 802ea38:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 802ea3a:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 802ea3e:	d055      	beq.n	802eaec <tcp_close_shutdown+0xf4>
      /* Not all data received by application, send RST to tell the remote
         side about this. */
      LWIP_ASSERT("pcb->flags & TF_RXCLOSED", pcb->flags & TF_RXCLOSED);
 802ea40:	687b      	ldr	r3, [r7, #4]
 802ea42:	8b5b      	ldrh	r3, [r3, #26]
 802ea44:	f003 0310 	and.w	r3, r3, #16
 802ea48:	2b00      	cmp	r3, #0
 802ea4a:	d106      	bne.n	802ea5a <tcp_close_shutdown+0x62>
 802ea4c:	4b52      	ldr	r3, [pc, #328]	; (802eb98 <tcp_close_shutdown+0x1a0>)
 802ea4e:	f44f 72b2 	mov.w	r2, #356	; 0x164
 802ea52:	4954      	ldr	r1, [pc, #336]	; (802eba4 <tcp_close_shutdown+0x1ac>)
 802ea54:	4852      	ldr	r0, [pc, #328]	; (802eba0 <tcp_close_shutdown+0x1a8>)
 802ea56:	f00a fb07 	bl	8039068 <iprintf>

      /* don't call tcp_abort here: we must not deallocate the pcb since
         that might not be expected when calling tcp_close */
      tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 802ea5a:	687b      	ldr	r3, [r7, #4]
 802ea5c:	6d18      	ldr	r0, [r3, #80]	; 0x50
 802ea5e:	687b      	ldr	r3, [r7, #4]
 802ea60:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 802ea62:	687d      	ldr	r5, [r7, #4]
 802ea64:	687b      	ldr	r3, [r7, #4]
 802ea66:	3304      	adds	r3, #4
 802ea68:	687a      	ldr	r2, [r7, #4]
 802ea6a:	8ad2      	ldrh	r2, [r2, #22]
 802ea6c:	6879      	ldr	r1, [r7, #4]
 802ea6e:	8b09      	ldrh	r1, [r1, #24]
 802ea70:	9102      	str	r1, [sp, #8]
 802ea72:	9201      	str	r2, [sp, #4]
 802ea74:	9300      	str	r3, [sp, #0]
 802ea76:	462b      	mov	r3, r5
 802ea78:	4622      	mov	r2, r4
 802ea7a:	4601      	mov	r1, r0
 802ea7c:	6878      	ldr	r0, [r7, #4]
 802ea7e:	f005 fe99 	bl	80347b4 <tcp_rst>
              pcb->local_port, pcb->remote_port);

      tcp_pcb_purge(pcb);
 802ea82:	6878      	ldr	r0, [r7, #4]
 802ea84:	f001 fbc2 	bl	803020c <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 802ea88:	4b47      	ldr	r3, [pc, #284]	; (802eba8 <tcp_close_shutdown+0x1b0>)
 802ea8a:	681b      	ldr	r3, [r3, #0]
 802ea8c:	687a      	ldr	r2, [r7, #4]
 802ea8e:	429a      	cmp	r2, r3
 802ea90:	d105      	bne.n	802ea9e <tcp_close_shutdown+0xa6>
 802ea92:	4b45      	ldr	r3, [pc, #276]	; (802eba8 <tcp_close_shutdown+0x1b0>)
 802ea94:	681b      	ldr	r3, [r3, #0]
 802ea96:	68db      	ldr	r3, [r3, #12]
 802ea98:	4a43      	ldr	r2, [pc, #268]	; (802eba8 <tcp_close_shutdown+0x1b0>)
 802ea9a:	6013      	str	r3, [r2, #0]
 802ea9c:	e013      	b.n	802eac6 <tcp_close_shutdown+0xce>
 802ea9e:	4b42      	ldr	r3, [pc, #264]	; (802eba8 <tcp_close_shutdown+0x1b0>)
 802eaa0:	681b      	ldr	r3, [r3, #0]
 802eaa2:	60fb      	str	r3, [r7, #12]
 802eaa4:	e00c      	b.n	802eac0 <tcp_close_shutdown+0xc8>
 802eaa6:	68fb      	ldr	r3, [r7, #12]
 802eaa8:	68db      	ldr	r3, [r3, #12]
 802eaaa:	687a      	ldr	r2, [r7, #4]
 802eaac:	429a      	cmp	r2, r3
 802eaae:	d104      	bne.n	802eaba <tcp_close_shutdown+0xc2>
 802eab0:	687b      	ldr	r3, [r7, #4]
 802eab2:	68da      	ldr	r2, [r3, #12]
 802eab4:	68fb      	ldr	r3, [r7, #12]
 802eab6:	60da      	str	r2, [r3, #12]
 802eab8:	e005      	b.n	802eac6 <tcp_close_shutdown+0xce>
 802eaba:	68fb      	ldr	r3, [r7, #12]
 802eabc:	68db      	ldr	r3, [r3, #12]
 802eabe:	60fb      	str	r3, [r7, #12]
 802eac0:	68fb      	ldr	r3, [r7, #12]
 802eac2:	2b00      	cmp	r3, #0
 802eac4:	d1ef      	bne.n	802eaa6 <tcp_close_shutdown+0xae>
 802eac6:	687b      	ldr	r3, [r7, #4]
 802eac8:	2200      	movs	r2, #0
 802eaca:	60da      	str	r2, [r3, #12]
 802eacc:	4b37      	ldr	r3, [pc, #220]	; (802ebac <tcp_close_shutdown+0x1b4>)
 802eace:	2201      	movs	r2, #1
 802ead0:	701a      	strb	r2, [r3, #0]
      /* Deallocate the pcb since we already sent a RST for it */
      if (tcp_input_pcb == pcb) {
 802ead2:	4b37      	ldr	r3, [pc, #220]	; (802ebb0 <tcp_close_shutdown+0x1b8>)
 802ead4:	681b      	ldr	r3, [r3, #0]
 802ead6:	687a      	ldr	r2, [r7, #4]
 802ead8:	429a      	cmp	r2, r3
 802eada:	d102      	bne.n	802eae2 <tcp_close_shutdown+0xea>
        /* prevent using a deallocated pcb: free it from tcp_input later */
        tcp_trigger_input_pcb_close();
 802eadc:	f004 f8c0 	bl	8032c60 <tcp_trigger_input_pcb_close>
 802eae0:	e002      	b.n	802eae8 <tcp_close_shutdown+0xf0>
      } else {
        tcp_free(pcb);
 802eae2:	6878      	ldr	r0, [r7, #4]
 802eae4:	f7ff fed6 	bl	802e894 <tcp_free>
      }
      return ERR_OK;
 802eae8:	2300      	movs	r3, #0
 802eaea:	e050      	b.n	802eb8e <tcp_close_shutdown+0x196>
    }
  }

  /* - states which free the pcb are handled here,
     - states which send FIN and change state are handled in tcp_close_shutdown_fin() */
  switch (pcb->state) {
 802eaec:	687b      	ldr	r3, [r7, #4]
 802eaee:	7d1b      	ldrb	r3, [r3, #20]
 802eaf0:	2b02      	cmp	r3, #2
 802eaf2:	d03b      	beq.n	802eb6c <tcp_close_shutdown+0x174>
 802eaf4:	2b02      	cmp	r3, #2
 802eaf6:	dc44      	bgt.n	802eb82 <tcp_close_shutdown+0x18a>
 802eaf8:	2b00      	cmp	r3, #0
 802eafa:	d002      	beq.n	802eb02 <tcp_close_shutdown+0x10a>
 802eafc:	2b01      	cmp	r3, #1
 802eafe:	d02a      	beq.n	802eb56 <tcp_close_shutdown+0x15e>
 802eb00:	e03f      	b.n	802eb82 <tcp_close_shutdown+0x18a>
       * and the user needs some way to free it should the need arise.
       * Calling tcp_close() with a pcb that has already been closed, (i.e. twice)
       * or for a pcb that has been used and then entered the CLOSED state
       * is erroneous, but this should never happen as the pcb has in those cases
       * been freed, and so any remaining handles are bogus. */
      if (pcb->local_port != 0) {
 802eb02:	687b      	ldr	r3, [r7, #4]
 802eb04:	8adb      	ldrh	r3, [r3, #22]
 802eb06:	2b00      	cmp	r3, #0
 802eb08:	d021      	beq.n	802eb4e <tcp_close_shutdown+0x156>
        TCP_RMV(&tcp_bound_pcbs, pcb);
 802eb0a:	4b2a      	ldr	r3, [pc, #168]	; (802ebb4 <tcp_close_shutdown+0x1bc>)
 802eb0c:	681b      	ldr	r3, [r3, #0]
 802eb0e:	687a      	ldr	r2, [r7, #4]
 802eb10:	429a      	cmp	r2, r3
 802eb12:	d105      	bne.n	802eb20 <tcp_close_shutdown+0x128>
 802eb14:	4b27      	ldr	r3, [pc, #156]	; (802ebb4 <tcp_close_shutdown+0x1bc>)
 802eb16:	681b      	ldr	r3, [r3, #0]
 802eb18:	68db      	ldr	r3, [r3, #12]
 802eb1a:	4a26      	ldr	r2, [pc, #152]	; (802ebb4 <tcp_close_shutdown+0x1bc>)
 802eb1c:	6013      	str	r3, [r2, #0]
 802eb1e:	e013      	b.n	802eb48 <tcp_close_shutdown+0x150>
 802eb20:	4b24      	ldr	r3, [pc, #144]	; (802ebb4 <tcp_close_shutdown+0x1bc>)
 802eb22:	681b      	ldr	r3, [r3, #0]
 802eb24:	60bb      	str	r3, [r7, #8]
 802eb26:	e00c      	b.n	802eb42 <tcp_close_shutdown+0x14a>
 802eb28:	68bb      	ldr	r3, [r7, #8]
 802eb2a:	68db      	ldr	r3, [r3, #12]
 802eb2c:	687a      	ldr	r2, [r7, #4]
 802eb2e:	429a      	cmp	r2, r3
 802eb30:	d104      	bne.n	802eb3c <tcp_close_shutdown+0x144>
 802eb32:	687b      	ldr	r3, [r7, #4]
 802eb34:	68da      	ldr	r2, [r3, #12]
 802eb36:	68bb      	ldr	r3, [r7, #8]
 802eb38:	60da      	str	r2, [r3, #12]
 802eb3a:	e005      	b.n	802eb48 <tcp_close_shutdown+0x150>
 802eb3c:	68bb      	ldr	r3, [r7, #8]
 802eb3e:	68db      	ldr	r3, [r3, #12]
 802eb40:	60bb      	str	r3, [r7, #8]
 802eb42:	68bb      	ldr	r3, [r7, #8]
 802eb44:	2b00      	cmp	r3, #0
 802eb46:	d1ef      	bne.n	802eb28 <tcp_close_shutdown+0x130>
 802eb48:	687b      	ldr	r3, [r7, #4]
 802eb4a:	2200      	movs	r2, #0
 802eb4c:	60da      	str	r2, [r3, #12]
      }
      tcp_free(pcb);
 802eb4e:	6878      	ldr	r0, [r7, #4]
 802eb50:	f7ff fea0 	bl	802e894 <tcp_free>
      break;
 802eb54:	e01a      	b.n	802eb8c <tcp_close_shutdown+0x194>
    case LISTEN:
      tcp_listen_closed(pcb);
 802eb56:	6878      	ldr	r0, [r7, #4]
 802eb58:	f7ff ff14 	bl	802e984 <tcp_listen_closed>
      tcp_pcb_remove(&tcp_listen_pcbs.pcbs, pcb);
 802eb5c:	6879      	ldr	r1, [r7, #4]
 802eb5e:	4816      	ldr	r0, [pc, #88]	; (802ebb8 <tcp_close_shutdown+0x1c0>)
 802eb60:	f001 fba4 	bl	80302ac <tcp_pcb_remove>
      tcp_free_listen(pcb);
 802eb64:	6878      	ldr	r0, [r7, #4]
 802eb66:	f7ff feb1 	bl	802e8cc <tcp_free_listen>
      break;
 802eb6a:	e00f      	b.n	802eb8c <tcp_close_shutdown+0x194>
    case SYN_SENT:
      TCP_PCB_REMOVE_ACTIVE(pcb);
 802eb6c:	6879      	ldr	r1, [r7, #4]
 802eb6e:	480e      	ldr	r0, [pc, #56]	; (802eba8 <tcp_close_shutdown+0x1b0>)
 802eb70:	f001 fb9c 	bl	80302ac <tcp_pcb_remove>
 802eb74:	4b0d      	ldr	r3, [pc, #52]	; (802ebac <tcp_close_shutdown+0x1b4>)
 802eb76:	2201      	movs	r2, #1
 802eb78:	701a      	strb	r2, [r3, #0]
      tcp_free(pcb);
 802eb7a:	6878      	ldr	r0, [r7, #4]
 802eb7c:	f7ff fe8a 	bl	802e894 <tcp_free>
      MIB2_STATS_INC(mib2.tcpattemptfails);
      break;
 802eb80:	e004      	b.n	802eb8c <tcp_close_shutdown+0x194>
    default:
      return tcp_close_shutdown_fin(pcb);
 802eb82:	6878      	ldr	r0, [r7, #4]
 802eb84:	f000 f81a 	bl	802ebbc <tcp_close_shutdown_fin>
 802eb88:	4603      	mov	r3, r0
 802eb8a:	e000      	b.n	802eb8e <tcp_close_shutdown+0x196>
  }
  return ERR_OK;
 802eb8c:	2300      	movs	r3, #0
}
 802eb8e:	4618      	mov	r0, r3
 802eb90:	3710      	adds	r7, #16
 802eb92:	46bd      	mov	sp, r7
 802eb94:	bdb0      	pop	{r4, r5, r7, pc}
 802eb96:	bf00      	nop
 802eb98:	0803b540 	.word	0x0803b540
 802eb9c:	0803b614 	.word	0x0803b614
 802eba0:	0803b584 	.word	0x0803b584
 802eba4:	0803b634 	.word	0x0803b634
 802eba8:	2000ef0c 	.word	0x2000ef0c
 802ebac:	2000ef14 	.word	0x2000ef14
 802ebb0:	2000ef4c 	.word	0x2000ef4c
 802ebb4:	2000ef04 	.word	0x2000ef04
 802ebb8:	2000ef08 	.word	0x2000ef08

0802ebbc <tcp_close_shutdown_fin>:

static err_t
tcp_close_shutdown_fin(struct tcp_pcb *pcb)
{
 802ebbc:	b580      	push	{r7, lr}
 802ebbe:	b084      	sub	sp, #16
 802ebc0:	af00      	add	r7, sp, #0
 802ebc2:	6078      	str	r0, [r7, #4]
  err_t err;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 802ebc4:	687b      	ldr	r3, [r7, #4]
 802ebc6:	2b00      	cmp	r3, #0
 802ebc8:	d106      	bne.n	802ebd8 <tcp_close_shutdown_fin+0x1c>
 802ebca:	4b2e      	ldr	r3, [pc, #184]	; (802ec84 <tcp_close_shutdown_fin+0xc8>)
 802ebcc:	f44f 72ce 	mov.w	r2, #412	; 0x19c
 802ebd0:	492d      	ldr	r1, [pc, #180]	; (802ec88 <tcp_close_shutdown_fin+0xcc>)
 802ebd2:	482e      	ldr	r0, [pc, #184]	; (802ec8c <tcp_close_shutdown_fin+0xd0>)
 802ebd4:	f00a fa48 	bl	8039068 <iprintf>

  switch (pcb->state) {
 802ebd8:	687b      	ldr	r3, [r7, #4]
 802ebda:	7d1b      	ldrb	r3, [r3, #20]
 802ebdc:	2b07      	cmp	r3, #7
 802ebde:	d020      	beq.n	802ec22 <tcp_close_shutdown_fin+0x66>
 802ebe0:	2b07      	cmp	r3, #7
 802ebe2:	dc2b      	bgt.n	802ec3c <tcp_close_shutdown_fin+0x80>
 802ebe4:	2b03      	cmp	r3, #3
 802ebe6:	d002      	beq.n	802ebee <tcp_close_shutdown_fin+0x32>
 802ebe8:	2b04      	cmp	r3, #4
 802ebea:	d00d      	beq.n	802ec08 <tcp_close_shutdown_fin+0x4c>
 802ebec:	e026      	b.n	802ec3c <tcp_close_shutdown_fin+0x80>
    case SYN_RCVD:
      err = tcp_send_fin(pcb);
 802ebee:	6878      	ldr	r0, [r7, #4]
 802ebf0:	f004 fec8 	bl	8033984 <tcp_send_fin>
 802ebf4:	4603      	mov	r3, r0
 802ebf6:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 802ebf8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 802ebfc:	2b00      	cmp	r3, #0
 802ebfe:	d11f      	bne.n	802ec40 <tcp_close_shutdown_fin+0x84>
        tcp_backlog_accepted(pcb);
        MIB2_STATS_INC(mib2.tcpattemptfails);
        pcb->state = FIN_WAIT_1;
 802ec00:	687b      	ldr	r3, [r7, #4]
 802ec02:	2205      	movs	r2, #5
 802ec04:	751a      	strb	r2, [r3, #20]
      }
      break;
 802ec06:	e01b      	b.n	802ec40 <tcp_close_shutdown_fin+0x84>
    case ESTABLISHED:
      err = tcp_send_fin(pcb);
 802ec08:	6878      	ldr	r0, [r7, #4]
 802ec0a:	f004 febb 	bl	8033984 <tcp_send_fin>
 802ec0e:	4603      	mov	r3, r0
 802ec10:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 802ec12:	f997 300f 	ldrsb.w	r3, [r7, #15]
 802ec16:	2b00      	cmp	r3, #0
 802ec18:	d114      	bne.n	802ec44 <tcp_close_shutdown_fin+0x88>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = FIN_WAIT_1;
 802ec1a:	687b      	ldr	r3, [r7, #4]
 802ec1c:	2205      	movs	r2, #5
 802ec1e:	751a      	strb	r2, [r3, #20]
      }
      break;
 802ec20:	e010      	b.n	802ec44 <tcp_close_shutdown_fin+0x88>
    case CLOSE_WAIT:
      err = tcp_send_fin(pcb);
 802ec22:	6878      	ldr	r0, [r7, #4]
 802ec24:	f004 feae 	bl	8033984 <tcp_send_fin>
 802ec28:	4603      	mov	r3, r0
 802ec2a:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 802ec2c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 802ec30:	2b00      	cmp	r3, #0
 802ec32:	d109      	bne.n	802ec48 <tcp_close_shutdown_fin+0x8c>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = LAST_ACK;
 802ec34:	687b      	ldr	r3, [r7, #4]
 802ec36:	2209      	movs	r2, #9
 802ec38:	751a      	strb	r2, [r3, #20]
      }
      break;
 802ec3a:	e005      	b.n	802ec48 <tcp_close_shutdown_fin+0x8c>
    default:
      /* Has already been closed, do nothing. */
      return ERR_OK;
 802ec3c:	2300      	movs	r3, #0
 802ec3e:	e01c      	b.n	802ec7a <tcp_close_shutdown_fin+0xbe>
      break;
 802ec40:	bf00      	nop
 802ec42:	e002      	b.n	802ec4a <tcp_close_shutdown_fin+0x8e>
      break;
 802ec44:	bf00      	nop
 802ec46:	e000      	b.n	802ec4a <tcp_close_shutdown_fin+0x8e>
      break;
 802ec48:	bf00      	nop
  }

  if (err == ERR_OK) {
 802ec4a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 802ec4e:	2b00      	cmp	r3, #0
 802ec50:	d103      	bne.n	802ec5a <tcp_close_shutdown_fin+0x9e>
    /* To ensure all data has been sent when tcp_close returns, we have
       to make sure tcp_output doesn't fail.
       Since we don't really have to ensure all data has been sent when tcp_close
       returns (unsent data is sent from tcp timer functions, also), we don't care
       for the return value of tcp_output for now. */
    tcp_output(pcb);
 802ec52:	6878      	ldr	r0, [r7, #4]
 802ec54:	f004 ffe6 	bl	8033c24 <tcp_output>
 802ec58:	e00d      	b.n	802ec76 <tcp_close_shutdown_fin+0xba>
  } else if (err == ERR_MEM) {
 802ec5a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 802ec5e:	f1b3 3fff 	cmp.w	r3, #4294967295
 802ec62:	d108      	bne.n	802ec76 <tcp_close_shutdown_fin+0xba>
    /* Mark this pcb for closing. Closing is retried from tcp_tmr. */
    tcp_set_flags(pcb, TF_CLOSEPEND);
 802ec64:	687b      	ldr	r3, [r7, #4]
 802ec66:	8b5b      	ldrh	r3, [r3, #26]
 802ec68:	f043 0308 	orr.w	r3, r3, #8
 802ec6c:	b29a      	uxth	r2, r3
 802ec6e:	687b      	ldr	r3, [r7, #4]
 802ec70:	835a      	strh	r2, [r3, #26]
    /* We have to return ERR_OK from here to indicate to the callers that this
       pcb should not be used any more as it will be freed soon via tcp_tmr.
       This is OK here since sending FIN does not guarantee a time frime for
       actually freeing the pcb, either (it is left in closure states for
       remote ACK or timeout) */
    return ERR_OK;
 802ec72:	2300      	movs	r3, #0
 802ec74:	e001      	b.n	802ec7a <tcp_close_shutdown_fin+0xbe>
  }
  return err;
 802ec76:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 802ec7a:	4618      	mov	r0, r3
 802ec7c:	3710      	adds	r7, #16
 802ec7e:	46bd      	mov	sp, r7
 802ec80:	bd80      	pop	{r7, pc}
 802ec82:	bf00      	nop
 802ec84:	0803b540 	.word	0x0803b540
 802ec88:	0803b5f0 	.word	0x0803b5f0
 802ec8c:	0803b584 	.word	0x0803b584

0802ec90 <tcp_close>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
err_t
tcp_close(struct tcp_pcb *pcb)
{
 802ec90:	b580      	push	{r7, lr}
 802ec92:	b082      	sub	sp, #8
 802ec94:	af00      	add	r7, sp, #0
 802ec96:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_close: invalid pcb", pcb != NULL, return ERR_ARG);
 802ec98:	687b      	ldr	r3, [r7, #4]
 802ec9a:	2b00      	cmp	r3, #0
 802ec9c:	d109      	bne.n	802ecb2 <tcp_close+0x22>
 802ec9e:	4b0f      	ldr	r3, [pc, #60]	; (802ecdc <tcp_close+0x4c>)
 802eca0:	f44f 72f4 	mov.w	r2, #488	; 0x1e8
 802eca4:	490e      	ldr	r1, [pc, #56]	; (802ece0 <tcp_close+0x50>)
 802eca6:	480f      	ldr	r0, [pc, #60]	; (802ece4 <tcp_close+0x54>)
 802eca8:	f00a f9de 	bl	8039068 <iprintf>
 802ecac:	f06f 030f 	mvn.w	r3, #15
 802ecb0:	e00f      	b.n	802ecd2 <tcp_close+0x42>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_close: closing in "));

  tcp_debug_print_state(pcb->state);

  if (pcb->state != LISTEN) {
 802ecb2:	687b      	ldr	r3, [r7, #4]
 802ecb4:	7d1b      	ldrb	r3, [r3, #20]
 802ecb6:	2b01      	cmp	r3, #1
 802ecb8:	d006      	beq.n	802ecc8 <tcp_close+0x38>
    /* Set a flag not to receive any more data... */
    tcp_set_flags(pcb, TF_RXCLOSED);
 802ecba:	687b      	ldr	r3, [r7, #4]
 802ecbc:	8b5b      	ldrh	r3, [r3, #26]
 802ecbe:	f043 0310 	orr.w	r3, r3, #16
 802ecc2:	b29a      	uxth	r2, r3
 802ecc4:	687b      	ldr	r3, [r7, #4]
 802ecc6:	835a      	strh	r2, [r3, #26]
  }
  /* ... and close */
  return tcp_close_shutdown(pcb, 1);
 802ecc8:	2101      	movs	r1, #1
 802ecca:	6878      	ldr	r0, [r7, #4]
 802eccc:	f7ff fe94 	bl	802e9f8 <tcp_close_shutdown>
 802ecd0:	4603      	mov	r3, r0
}
 802ecd2:	4618      	mov	r0, r3
 802ecd4:	3708      	adds	r7, #8
 802ecd6:	46bd      	mov	sp, r7
 802ecd8:	bd80      	pop	{r7, pc}
 802ecda:	bf00      	nop
 802ecdc:	0803b540 	.word	0x0803b540
 802ece0:	0803b650 	.word	0x0803b650
 802ece4:	0803b584 	.word	0x0803b584

0802ece8 <tcp_shutdown>:
 * @return ERR_OK if shutdown succeeded (or the PCB has already been shut down)
 *         another err_t on error.
 */
err_t
tcp_shutdown(struct tcp_pcb *pcb, int shut_rx, int shut_tx)
{
 802ece8:	b580      	push	{r7, lr}
 802ecea:	b084      	sub	sp, #16
 802ecec:	af00      	add	r7, sp, #0
 802ecee:	60f8      	str	r0, [r7, #12]
 802ecf0:	60b9      	str	r1, [r7, #8]
 802ecf2:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_shutdown: invalid pcb", pcb != NULL, return ERR_ARG);
 802ecf4:	68fb      	ldr	r3, [r7, #12]
 802ecf6:	2b00      	cmp	r3, #0
 802ecf8:	d109      	bne.n	802ed0e <tcp_shutdown+0x26>
 802ecfa:	4b26      	ldr	r3, [pc, #152]	; (802ed94 <tcp_shutdown+0xac>)
 802ecfc:	f240 2207 	movw	r2, #519	; 0x207
 802ed00:	4925      	ldr	r1, [pc, #148]	; (802ed98 <tcp_shutdown+0xb0>)
 802ed02:	4826      	ldr	r0, [pc, #152]	; (802ed9c <tcp_shutdown+0xb4>)
 802ed04:	f00a f9b0 	bl	8039068 <iprintf>
 802ed08:	f06f 030f 	mvn.w	r3, #15
 802ed0c:	e03d      	b.n	802ed8a <tcp_shutdown+0xa2>

  if (pcb->state == LISTEN) {
 802ed0e:	68fb      	ldr	r3, [r7, #12]
 802ed10:	7d1b      	ldrb	r3, [r3, #20]
 802ed12:	2b01      	cmp	r3, #1
 802ed14:	d102      	bne.n	802ed1c <tcp_shutdown+0x34>
    return ERR_CONN;
 802ed16:	f06f 030a 	mvn.w	r3, #10
 802ed1a:	e036      	b.n	802ed8a <tcp_shutdown+0xa2>
  }
  if (shut_rx) {
 802ed1c:	68bb      	ldr	r3, [r7, #8]
 802ed1e:	2b00      	cmp	r3, #0
 802ed20:	d01b      	beq.n	802ed5a <tcp_shutdown+0x72>
    /* shut down the receive side: set a flag not to receive any more data... */
    tcp_set_flags(pcb, TF_RXCLOSED);
 802ed22:	68fb      	ldr	r3, [r7, #12]
 802ed24:	8b5b      	ldrh	r3, [r3, #26]
 802ed26:	f043 0310 	orr.w	r3, r3, #16
 802ed2a:	b29a      	uxth	r2, r3
 802ed2c:	68fb      	ldr	r3, [r7, #12]
 802ed2e:	835a      	strh	r2, [r3, #26]
    if (shut_tx) {
 802ed30:	687b      	ldr	r3, [r7, #4]
 802ed32:	2b00      	cmp	r3, #0
 802ed34:	d005      	beq.n	802ed42 <tcp_shutdown+0x5a>
      /* shutting down the tx AND rx side is the same as closing for the raw API */
      return tcp_close_shutdown(pcb, 1);
 802ed36:	2101      	movs	r1, #1
 802ed38:	68f8      	ldr	r0, [r7, #12]
 802ed3a:	f7ff fe5d 	bl	802e9f8 <tcp_close_shutdown>
 802ed3e:	4603      	mov	r3, r0
 802ed40:	e023      	b.n	802ed8a <tcp_shutdown+0xa2>
    }
    /* ... and free buffered data */
    if (pcb->refused_data != NULL) {
 802ed42:	68fb      	ldr	r3, [r7, #12]
 802ed44:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 802ed46:	2b00      	cmp	r3, #0
 802ed48:	d007      	beq.n	802ed5a <tcp_shutdown+0x72>
      pbuf_free(pcb->refused_data);
 802ed4a:	68fb      	ldr	r3, [r7, #12]
 802ed4c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 802ed4e:	4618      	mov	r0, r3
 802ed50:	f7ff fadc 	bl	802e30c <pbuf_free>
      pcb->refused_data = NULL;
 802ed54:	68fb      	ldr	r3, [r7, #12]
 802ed56:	2200      	movs	r2, #0
 802ed58:	679a      	str	r2, [r3, #120]	; 0x78
    }
  }
  if (shut_tx) {
 802ed5a:	687b      	ldr	r3, [r7, #4]
 802ed5c:	2b00      	cmp	r3, #0
 802ed5e:	d013      	beq.n	802ed88 <tcp_shutdown+0xa0>
    /* This can't happen twice since if it succeeds, the pcb's state is changed.
       Only close in these states as the others directly deallocate the PCB */
    switch (pcb->state) {
 802ed60:	68fb      	ldr	r3, [r7, #12]
 802ed62:	7d1b      	ldrb	r3, [r3, #20]
 802ed64:	2b04      	cmp	r3, #4
 802ed66:	dc02      	bgt.n	802ed6e <tcp_shutdown+0x86>
 802ed68:	2b03      	cmp	r3, #3
 802ed6a:	da02      	bge.n	802ed72 <tcp_shutdown+0x8a>
 802ed6c:	e009      	b.n	802ed82 <tcp_shutdown+0x9a>
 802ed6e:	2b07      	cmp	r3, #7
 802ed70:	d107      	bne.n	802ed82 <tcp_shutdown+0x9a>
      case SYN_RCVD:
      case ESTABLISHED:
      case CLOSE_WAIT:
        return tcp_close_shutdown(pcb, (u8_t)shut_rx);
 802ed72:	68bb      	ldr	r3, [r7, #8]
 802ed74:	b2db      	uxtb	r3, r3
 802ed76:	4619      	mov	r1, r3
 802ed78:	68f8      	ldr	r0, [r7, #12]
 802ed7a:	f7ff fe3d 	bl	802e9f8 <tcp_close_shutdown>
 802ed7e:	4603      	mov	r3, r0
 802ed80:	e003      	b.n	802ed8a <tcp_shutdown+0xa2>
      default:
        /* Not (yet?) connected, cannot shutdown the TX side as that would bring us
          into CLOSED state, where the PCB is deallocated. */
        return ERR_CONN;
 802ed82:	f06f 030a 	mvn.w	r3, #10
 802ed86:	e000      	b.n	802ed8a <tcp_shutdown+0xa2>
    }
  }
  return ERR_OK;
 802ed88:	2300      	movs	r3, #0
}
 802ed8a:	4618      	mov	r0, r3
 802ed8c:	3710      	adds	r7, #16
 802ed8e:	46bd      	mov	sp, r7
 802ed90:	bd80      	pop	{r7, pc}
 802ed92:	bf00      	nop
 802ed94:	0803b540 	.word	0x0803b540
 802ed98:	0803b668 	.word	0x0803b668
 802ed9c:	0803b584 	.word	0x0803b584

0802eda0 <tcp_abandon>:
 * @param pcb the tcp_pcb to abort
 * @param reset boolean to indicate whether a reset should be sent
 */
void
tcp_abandon(struct tcp_pcb *pcb, int reset)
{
 802eda0:	b580      	push	{r7, lr}
 802eda2:	b08e      	sub	sp, #56	; 0x38
 802eda4:	af04      	add	r7, sp, #16
 802eda6:	6078      	str	r0, [r7, #4]
 802eda8:	6039      	str	r1, [r7, #0]
#endif /* LWIP_CALLBACK_API */
  void *errf_arg;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_abandon: invalid pcb", pcb != NULL, return);
 802edaa:	687b      	ldr	r3, [r7, #4]
 802edac:	2b00      	cmp	r3, #0
 802edae:	d107      	bne.n	802edc0 <tcp_abandon+0x20>
 802edb0:	4b52      	ldr	r3, [pc, #328]	; (802eefc <tcp_abandon+0x15c>)
 802edb2:	f240 223d 	movw	r2, #573	; 0x23d
 802edb6:	4952      	ldr	r1, [pc, #328]	; (802ef00 <tcp_abandon+0x160>)
 802edb8:	4852      	ldr	r0, [pc, #328]	; (802ef04 <tcp_abandon+0x164>)
 802edba:	f00a f955 	bl	8039068 <iprintf>
 802edbe:	e099      	b.n	802eef4 <tcp_abandon+0x154>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_abort/tcp_abandon for listen-pcbs",
 802edc0:	687b      	ldr	r3, [r7, #4]
 802edc2:	7d1b      	ldrb	r3, [r3, #20]
 802edc4:	2b01      	cmp	r3, #1
 802edc6:	d106      	bne.n	802edd6 <tcp_abandon+0x36>
 802edc8:	4b4c      	ldr	r3, [pc, #304]	; (802eefc <tcp_abandon+0x15c>)
 802edca:	f44f 7210 	mov.w	r2, #576	; 0x240
 802edce:	494e      	ldr	r1, [pc, #312]	; (802ef08 <tcp_abandon+0x168>)
 802edd0:	484c      	ldr	r0, [pc, #304]	; (802ef04 <tcp_abandon+0x164>)
 802edd2:	f00a f949 	bl	8039068 <iprintf>
              pcb->state != LISTEN);
  /* Figure out on which TCP PCB list we are, and remove us. If we
     are in an active state, call the receive function associated with
     the PCB with a NULL argument, and send an RST to the remote end. */
  if (pcb->state == TIME_WAIT) {
 802edd6:	687b      	ldr	r3, [r7, #4]
 802edd8:	7d1b      	ldrb	r3, [r3, #20]
 802edda:	2b0a      	cmp	r3, #10
 802eddc:	d107      	bne.n	802edee <tcp_abandon+0x4e>
    tcp_pcb_remove(&tcp_tw_pcbs, pcb);
 802edde:	6879      	ldr	r1, [r7, #4]
 802ede0:	484a      	ldr	r0, [pc, #296]	; (802ef0c <tcp_abandon+0x16c>)
 802ede2:	f001 fa63 	bl	80302ac <tcp_pcb_remove>
    tcp_free(pcb);
 802ede6:	6878      	ldr	r0, [r7, #4]
 802ede8:	f7ff fd54 	bl	802e894 <tcp_free>
 802edec:	e082      	b.n	802eef4 <tcp_abandon+0x154>
  } else {
    int send_rst = 0;
 802edee:	2300      	movs	r3, #0
 802edf0:	627b      	str	r3, [r7, #36]	; 0x24
    u16_t local_port = 0;
 802edf2:	2300      	movs	r3, #0
 802edf4:	847b      	strh	r3, [r7, #34]	; 0x22
    enum tcp_state last_state;
    seqno = pcb->snd_nxt;
 802edf6:	687b      	ldr	r3, [r7, #4]
 802edf8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 802edfa:	61bb      	str	r3, [r7, #24]
    ackno = pcb->rcv_nxt;
 802edfc:	687b      	ldr	r3, [r7, #4]
 802edfe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 802ee00:	617b      	str	r3, [r7, #20]
#if LWIP_CALLBACK_API
    errf = pcb->errf;
 802ee02:	687b      	ldr	r3, [r7, #4]
 802ee04:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 802ee08:	613b      	str	r3, [r7, #16]
#endif /* LWIP_CALLBACK_API */
    errf_arg = pcb->callback_arg;
 802ee0a:	687b      	ldr	r3, [r7, #4]
 802ee0c:	691b      	ldr	r3, [r3, #16]
 802ee0e:	60fb      	str	r3, [r7, #12]
    if (pcb->state == CLOSED) {
 802ee10:	687b      	ldr	r3, [r7, #4]
 802ee12:	7d1b      	ldrb	r3, [r3, #20]
 802ee14:	2b00      	cmp	r3, #0
 802ee16:	d126      	bne.n	802ee66 <tcp_abandon+0xc6>
      if (pcb->local_port != 0) {
 802ee18:	687b      	ldr	r3, [r7, #4]
 802ee1a:	8adb      	ldrh	r3, [r3, #22]
 802ee1c:	2b00      	cmp	r3, #0
 802ee1e:	d02e      	beq.n	802ee7e <tcp_abandon+0xde>
        /* bound, not yet opened */
        TCP_RMV(&tcp_bound_pcbs, pcb);
 802ee20:	4b3b      	ldr	r3, [pc, #236]	; (802ef10 <tcp_abandon+0x170>)
 802ee22:	681b      	ldr	r3, [r3, #0]
 802ee24:	687a      	ldr	r2, [r7, #4]
 802ee26:	429a      	cmp	r2, r3
 802ee28:	d105      	bne.n	802ee36 <tcp_abandon+0x96>
 802ee2a:	4b39      	ldr	r3, [pc, #228]	; (802ef10 <tcp_abandon+0x170>)
 802ee2c:	681b      	ldr	r3, [r3, #0]
 802ee2e:	68db      	ldr	r3, [r3, #12]
 802ee30:	4a37      	ldr	r2, [pc, #220]	; (802ef10 <tcp_abandon+0x170>)
 802ee32:	6013      	str	r3, [r2, #0]
 802ee34:	e013      	b.n	802ee5e <tcp_abandon+0xbe>
 802ee36:	4b36      	ldr	r3, [pc, #216]	; (802ef10 <tcp_abandon+0x170>)
 802ee38:	681b      	ldr	r3, [r3, #0]
 802ee3a:	61fb      	str	r3, [r7, #28]
 802ee3c:	e00c      	b.n	802ee58 <tcp_abandon+0xb8>
 802ee3e:	69fb      	ldr	r3, [r7, #28]
 802ee40:	68db      	ldr	r3, [r3, #12]
 802ee42:	687a      	ldr	r2, [r7, #4]
 802ee44:	429a      	cmp	r2, r3
 802ee46:	d104      	bne.n	802ee52 <tcp_abandon+0xb2>
 802ee48:	687b      	ldr	r3, [r7, #4]
 802ee4a:	68da      	ldr	r2, [r3, #12]
 802ee4c:	69fb      	ldr	r3, [r7, #28]
 802ee4e:	60da      	str	r2, [r3, #12]
 802ee50:	e005      	b.n	802ee5e <tcp_abandon+0xbe>
 802ee52:	69fb      	ldr	r3, [r7, #28]
 802ee54:	68db      	ldr	r3, [r3, #12]
 802ee56:	61fb      	str	r3, [r7, #28]
 802ee58:	69fb      	ldr	r3, [r7, #28]
 802ee5a:	2b00      	cmp	r3, #0
 802ee5c:	d1ef      	bne.n	802ee3e <tcp_abandon+0x9e>
 802ee5e:	687b      	ldr	r3, [r7, #4]
 802ee60:	2200      	movs	r2, #0
 802ee62:	60da      	str	r2, [r3, #12]
 802ee64:	e00b      	b.n	802ee7e <tcp_abandon+0xde>
      }
    } else {
      send_rst = reset;
 802ee66:	683b      	ldr	r3, [r7, #0]
 802ee68:	627b      	str	r3, [r7, #36]	; 0x24
      local_port = pcb->local_port;
 802ee6a:	687b      	ldr	r3, [r7, #4]
 802ee6c:	8adb      	ldrh	r3, [r3, #22]
 802ee6e:	847b      	strh	r3, [r7, #34]	; 0x22
      TCP_PCB_REMOVE_ACTIVE(pcb);
 802ee70:	6879      	ldr	r1, [r7, #4]
 802ee72:	4828      	ldr	r0, [pc, #160]	; (802ef14 <tcp_abandon+0x174>)
 802ee74:	f001 fa1a 	bl	80302ac <tcp_pcb_remove>
 802ee78:	4b27      	ldr	r3, [pc, #156]	; (802ef18 <tcp_abandon+0x178>)
 802ee7a:	2201      	movs	r2, #1
 802ee7c:	701a      	strb	r2, [r3, #0]
    }
    if (pcb->unacked != NULL) {
 802ee7e:	687b      	ldr	r3, [r7, #4]
 802ee80:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 802ee82:	2b00      	cmp	r3, #0
 802ee84:	d004      	beq.n	802ee90 <tcp_abandon+0xf0>
      tcp_segs_free(pcb->unacked);
 802ee86:	687b      	ldr	r3, [r7, #4]
 802ee88:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 802ee8a:	4618      	mov	r0, r3
 802ee8c:	f000 fec4 	bl	802fc18 <tcp_segs_free>
    }
    if (pcb->unsent != NULL) {
 802ee90:	687b      	ldr	r3, [r7, #4]
 802ee92:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 802ee94:	2b00      	cmp	r3, #0
 802ee96:	d004      	beq.n	802eea2 <tcp_abandon+0x102>
      tcp_segs_free(pcb->unsent);
 802ee98:	687b      	ldr	r3, [r7, #4]
 802ee9a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 802ee9c:	4618      	mov	r0, r3
 802ee9e:	f000 febb 	bl	802fc18 <tcp_segs_free>
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 802eea2:	687b      	ldr	r3, [r7, #4]
 802eea4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 802eea6:	2b00      	cmp	r3, #0
 802eea8:	d004      	beq.n	802eeb4 <tcp_abandon+0x114>
      tcp_segs_free(pcb->ooseq);
 802eeaa:	687b      	ldr	r3, [r7, #4]
 802eeac:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 802eeae:	4618      	mov	r0, r3
 802eeb0:	f000 feb2 	bl	802fc18 <tcp_segs_free>
    }
#endif /* TCP_QUEUE_OOSEQ */
    tcp_backlog_accepted(pcb);
    if (send_rst) {
 802eeb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802eeb6:	2b00      	cmp	r3, #0
 802eeb8:	d00e      	beq.n	802eed8 <tcp_abandon+0x138>
      LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_abandon: sending RST\n"));
      tcp_rst(pcb, seqno, ackno, &pcb->local_ip, &pcb->remote_ip, local_port, pcb->remote_port);
 802eeba:	6879      	ldr	r1, [r7, #4]
 802eebc:	687b      	ldr	r3, [r7, #4]
 802eebe:	3304      	adds	r3, #4
 802eec0:	687a      	ldr	r2, [r7, #4]
 802eec2:	8b12      	ldrh	r2, [r2, #24]
 802eec4:	9202      	str	r2, [sp, #8]
 802eec6:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 802eec8:	9201      	str	r2, [sp, #4]
 802eeca:	9300      	str	r3, [sp, #0]
 802eecc:	460b      	mov	r3, r1
 802eece:	697a      	ldr	r2, [r7, #20]
 802eed0:	69b9      	ldr	r1, [r7, #24]
 802eed2:	6878      	ldr	r0, [r7, #4]
 802eed4:	f005 fc6e 	bl	80347b4 <tcp_rst>
    }
    last_state = pcb->state;
 802eed8:	687b      	ldr	r3, [r7, #4]
 802eeda:	7d1b      	ldrb	r3, [r3, #20]
 802eedc:	72fb      	strb	r3, [r7, #11]
    tcp_free(pcb);
 802eede:	6878      	ldr	r0, [r7, #4]
 802eee0:	f7ff fcd8 	bl	802e894 <tcp_free>
    TCP_EVENT_ERR(last_state, errf, errf_arg, ERR_ABRT);
 802eee4:	693b      	ldr	r3, [r7, #16]
 802eee6:	2b00      	cmp	r3, #0
 802eee8:	d004      	beq.n	802eef4 <tcp_abandon+0x154>
 802eeea:	693b      	ldr	r3, [r7, #16]
 802eeec:	f06f 010c 	mvn.w	r1, #12
 802eef0:	68f8      	ldr	r0, [r7, #12]
 802eef2:	4798      	blx	r3
  }
}
 802eef4:	3728      	adds	r7, #40	; 0x28
 802eef6:	46bd      	mov	sp, r7
 802eef8:	bd80      	pop	{r7, pc}
 802eefa:	bf00      	nop
 802eefc:	0803b540 	.word	0x0803b540
 802ef00:	0803b684 	.word	0x0803b684
 802ef04:	0803b584 	.word	0x0803b584
 802ef08:	0803b6a0 	.word	0x0803b6a0
 802ef0c:	2000ef10 	.word	0x2000ef10
 802ef10:	2000ef04 	.word	0x2000ef04
 802ef14:	2000ef0c 	.word	0x2000ef0c
 802ef18:	2000ef14 	.word	0x2000ef14

0802ef1c <tcp_abort>:
 *
 * @param pcb the tcp pcb to abort
 */
void
tcp_abort(struct tcp_pcb *pcb)
{
 802ef1c:	b580      	push	{r7, lr}
 802ef1e:	b082      	sub	sp, #8
 802ef20:	af00      	add	r7, sp, #0
 802ef22:	6078      	str	r0, [r7, #4]
  tcp_abandon(pcb, 1);
 802ef24:	2101      	movs	r1, #1
 802ef26:	6878      	ldr	r0, [r7, #4]
 802ef28:	f7ff ff3a 	bl	802eda0 <tcp_abandon>
}
 802ef2c:	bf00      	nop
 802ef2e:	3708      	adds	r7, #8
 802ef30:	46bd      	mov	sp, r7
 802ef32:	bd80      	pop	{r7, pc}

0802ef34 <tcp_bind>:
 *         ERR_VAL if bind failed because the PCB is not in a valid state
 *         ERR_OK if bound
 */
err_t
tcp_bind(struct tcp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 802ef34:	b580      	push	{r7, lr}
 802ef36:	b088      	sub	sp, #32
 802ef38:	af00      	add	r7, sp, #0
 802ef3a:	60f8      	str	r0, [r7, #12]
 802ef3c:	60b9      	str	r1, [r7, #8]
 802ef3e:	4613      	mov	r3, r2
 802ef40:	80fb      	strh	r3, [r7, #6]
  int i;
  int max_pcb_list = NUM_TCP_PCB_LISTS;
 802ef42:	2304      	movs	r3, #4
 802ef44:	617b      	str	r3, [r7, #20]

  LWIP_ASSERT_CORE_LOCKED();

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 802ef46:	68bb      	ldr	r3, [r7, #8]
 802ef48:	2b00      	cmp	r3, #0
 802ef4a:	d101      	bne.n	802ef50 <tcp_bind+0x1c>
    ipaddr = IP4_ADDR_ANY;
 802ef4c:	4b3e      	ldr	r3, [pc, #248]	; (802f048 <tcp_bind+0x114>)
 802ef4e:	60bb      	str	r3, [r7, #8]
  }
#else /* LWIP_IPV4 */
  LWIP_ERROR("tcp_bind: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
#endif /* LWIP_IPV4 */

  LWIP_ERROR("tcp_bind: invalid pcb", pcb != NULL, return ERR_ARG);
 802ef50:	68fb      	ldr	r3, [r7, #12]
 802ef52:	2b00      	cmp	r3, #0
 802ef54:	d109      	bne.n	802ef6a <tcp_bind+0x36>
 802ef56:	4b3d      	ldr	r3, [pc, #244]	; (802f04c <tcp_bind+0x118>)
 802ef58:	f240 22a9 	movw	r2, #681	; 0x2a9
 802ef5c:	493c      	ldr	r1, [pc, #240]	; (802f050 <tcp_bind+0x11c>)
 802ef5e:	483d      	ldr	r0, [pc, #244]	; (802f054 <tcp_bind+0x120>)
 802ef60:	f00a f882 	bl	8039068 <iprintf>
 802ef64:	f06f 030f 	mvn.w	r3, #15
 802ef68:	e06a      	b.n	802f040 <tcp_bind+0x10c>

  LWIP_ERROR("tcp_bind: can only bind in state CLOSED", pcb->state == CLOSED, return ERR_VAL);
 802ef6a:	68fb      	ldr	r3, [r7, #12]
 802ef6c:	7d1b      	ldrb	r3, [r3, #20]
 802ef6e:	2b00      	cmp	r3, #0
 802ef70:	d009      	beq.n	802ef86 <tcp_bind+0x52>
 802ef72:	4b36      	ldr	r3, [pc, #216]	; (802f04c <tcp_bind+0x118>)
 802ef74:	f240 22ab 	movw	r2, #683	; 0x2ab
 802ef78:	4937      	ldr	r1, [pc, #220]	; (802f058 <tcp_bind+0x124>)
 802ef7a:	4836      	ldr	r0, [pc, #216]	; (802f054 <tcp_bind+0x120>)
 802ef7c:	f00a f874 	bl	8039068 <iprintf>
 802ef80:	f06f 0305 	mvn.w	r3, #5
 802ef84:	e05c      	b.n	802f040 <tcp_bind+0x10c>
    ip6_addr_select_zone(ip_2_ip6(&zoned_ipaddr), ip_2_ip6(&zoned_ipaddr));
    ipaddr = &zoned_ipaddr;
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  if (port == 0) {
 802ef86:	88fb      	ldrh	r3, [r7, #6]
 802ef88:	2b00      	cmp	r3, #0
 802ef8a:	d109      	bne.n	802efa0 <tcp_bind+0x6c>
    port = tcp_new_port();
 802ef8c:	f000 f9de 	bl	802f34c <tcp_new_port>
 802ef90:	4603      	mov	r3, r0
 802ef92:	80fb      	strh	r3, [r7, #6]
    if (port == 0) {
 802ef94:	88fb      	ldrh	r3, [r7, #6]
 802ef96:	2b00      	cmp	r3, #0
 802ef98:	d135      	bne.n	802f006 <tcp_bind+0xd2>
      return ERR_BUF;
 802ef9a:	f06f 0301 	mvn.w	r3, #1
 802ef9e:	e04f      	b.n	802f040 <tcp_bind+0x10c>
    }
  } else {
    /* Check if the address already is in use (on all lists) */
    for (i = 0; i < max_pcb_list; i++) {
 802efa0:	2300      	movs	r3, #0
 802efa2:	61fb      	str	r3, [r7, #28]
 802efa4:	e02b      	b.n	802effe <tcp_bind+0xca>
      for (cpcb = *tcp_pcb_lists[i]; cpcb != NULL; cpcb = cpcb->next) {
 802efa6:	4a2d      	ldr	r2, [pc, #180]	; (802f05c <tcp_bind+0x128>)
 802efa8:	69fb      	ldr	r3, [r7, #28]
 802efaa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 802efae:	681b      	ldr	r3, [r3, #0]
 802efb0:	61bb      	str	r3, [r7, #24]
 802efb2:	e01e      	b.n	802eff2 <tcp_bind+0xbe>
        if (cpcb->local_port == port) {
 802efb4:	69bb      	ldr	r3, [r7, #24]
 802efb6:	8adb      	ldrh	r3, [r3, #22]
 802efb8:	88fa      	ldrh	r2, [r7, #6]
 802efba:	429a      	cmp	r2, r3
 802efbc:	d116      	bne.n	802efec <tcp_bind+0xb8>
              !ip_get_option(cpcb, SOF_REUSEADDR))
#endif /* SO_REUSE */
          {
            /* @todo: check accept_any_ip_version */
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
                (ip_addr_isany(&cpcb->local_ip) ||
 802efbe:	69bb      	ldr	r3, [r7, #24]
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
 802efc0:	2b00      	cmp	r3, #0
 802efc2:	d010      	beq.n	802efe6 <tcp_bind+0xb2>
                (ip_addr_isany(&cpcb->local_ip) ||
 802efc4:	69bb      	ldr	r3, [r7, #24]
 802efc6:	681b      	ldr	r3, [r3, #0]
 802efc8:	2b00      	cmp	r3, #0
 802efca:	d00c      	beq.n	802efe6 <tcp_bind+0xb2>
 802efcc:	68bb      	ldr	r3, [r7, #8]
 802efce:	2b00      	cmp	r3, #0
 802efd0:	d009      	beq.n	802efe6 <tcp_bind+0xb2>
                 ip_addr_isany(ipaddr) ||
 802efd2:	68bb      	ldr	r3, [r7, #8]
 802efd4:	681b      	ldr	r3, [r3, #0]
 802efd6:	2b00      	cmp	r3, #0
 802efd8:	d005      	beq.n	802efe6 <tcp_bind+0xb2>
                 ip_addr_cmp(&cpcb->local_ip, ipaddr))) {
 802efda:	69bb      	ldr	r3, [r7, #24]
 802efdc:	681a      	ldr	r2, [r3, #0]
 802efde:	68bb      	ldr	r3, [r7, #8]
 802efe0:	681b      	ldr	r3, [r3, #0]
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
 802efe2:	429a      	cmp	r2, r3
 802efe4:	d102      	bne.n	802efec <tcp_bind+0xb8>
              return ERR_USE;
 802efe6:	f06f 0307 	mvn.w	r3, #7
 802efea:	e029      	b.n	802f040 <tcp_bind+0x10c>
      for (cpcb = *tcp_pcb_lists[i]; cpcb != NULL; cpcb = cpcb->next) {
 802efec:	69bb      	ldr	r3, [r7, #24]
 802efee:	68db      	ldr	r3, [r3, #12]
 802eff0:	61bb      	str	r3, [r7, #24]
 802eff2:	69bb      	ldr	r3, [r7, #24]
 802eff4:	2b00      	cmp	r3, #0
 802eff6:	d1dd      	bne.n	802efb4 <tcp_bind+0x80>
    for (i = 0; i < max_pcb_list; i++) {
 802eff8:	69fb      	ldr	r3, [r7, #28]
 802effa:	3301      	adds	r3, #1
 802effc:	61fb      	str	r3, [r7, #28]
 802effe:	69fa      	ldr	r2, [r7, #28]
 802f000:	697b      	ldr	r3, [r7, #20]
 802f002:	429a      	cmp	r2, r3
 802f004:	dbcf      	blt.n	802efa6 <tcp_bind+0x72>
        }
      }
    }
  }

  if (!ip_addr_isany(ipaddr)
 802f006:	68bb      	ldr	r3, [r7, #8]
 802f008:	2b00      	cmp	r3, #0
 802f00a:	d00c      	beq.n	802f026 <tcp_bind+0xf2>
 802f00c:	68bb      	ldr	r3, [r7, #8]
 802f00e:	681b      	ldr	r3, [r3, #0]
 802f010:	2b00      	cmp	r3, #0
 802f012:	d008      	beq.n	802f026 <tcp_bind+0xf2>
#if LWIP_IPV4 && LWIP_IPV6
      || (IP_GET_TYPE(ipaddr) != IP_GET_TYPE(&pcb->local_ip))
#endif /* LWIP_IPV4 && LWIP_IPV6 */
     ) {
    ip_addr_set(&pcb->local_ip, ipaddr);
 802f014:	68bb      	ldr	r3, [r7, #8]
 802f016:	2b00      	cmp	r3, #0
 802f018:	d002      	beq.n	802f020 <tcp_bind+0xec>
 802f01a:	68bb      	ldr	r3, [r7, #8]
 802f01c:	681b      	ldr	r3, [r3, #0]
 802f01e:	e000      	b.n	802f022 <tcp_bind+0xee>
 802f020:	2300      	movs	r3, #0
 802f022:	68fa      	ldr	r2, [r7, #12]
 802f024:	6013      	str	r3, [r2, #0]
  }
  pcb->local_port = port;
 802f026:	68fb      	ldr	r3, [r7, #12]
 802f028:	88fa      	ldrh	r2, [r7, #6]
 802f02a:	82da      	strh	r2, [r3, #22]
  TCP_REG(&tcp_bound_pcbs, pcb);
 802f02c:	4b0c      	ldr	r3, [pc, #48]	; (802f060 <tcp_bind+0x12c>)
 802f02e:	681a      	ldr	r2, [r3, #0]
 802f030:	68fb      	ldr	r3, [r7, #12]
 802f032:	60da      	str	r2, [r3, #12]
 802f034:	4a0a      	ldr	r2, [pc, #40]	; (802f060 <tcp_bind+0x12c>)
 802f036:	68fb      	ldr	r3, [r7, #12]
 802f038:	6013      	str	r3, [r2, #0]
 802f03a:	f005 fd7d 	bl	8034b38 <tcp_timer_needed>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_bind: bind to port %"U16_F"\n", port));
  return ERR_OK;
 802f03e:	2300      	movs	r3, #0
}
 802f040:	4618      	mov	r0, r3
 802f042:	3720      	adds	r7, #32
 802f044:	46bd      	mov	sp, r7
 802f046:	bd80      	pop	{r7, pc}
 802f048:	0803d62c 	.word	0x0803d62c
 802f04c:	0803b540 	.word	0x0803b540
 802f050:	0803b6d4 	.word	0x0803b6d4
 802f054:	0803b584 	.word	0x0803b584
 802f058:	0803b6ec 	.word	0x0803b6ec
 802f05c:	0803d604 	.word	0x0803d604
 802f060:	2000ef04 	.word	0x2000ef04

0802f064 <tcp_accept_null>:
/**
 * Default accept callback if no accept callback is specified by the user.
 */
static err_t
tcp_accept_null(void *arg, struct tcp_pcb *pcb, err_t err)
{
 802f064:	b580      	push	{r7, lr}
 802f066:	b084      	sub	sp, #16
 802f068:	af00      	add	r7, sp, #0
 802f06a:	60f8      	str	r0, [r7, #12]
 802f06c:	60b9      	str	r1, [r7, #8]
 802f06e:	4613      	mov	r3, r2
 802f070:	71fb      	strb	r3, [r7, #7]
  LWIP_UNUSED_ARG(arg);
  LWIP_UNUSED_ARG(err);

  LWIP_ASSERT("tcp_accept_null: invalid pcb", pcb != NULL);
 802f072:	68bb      	ldr	r3, [r7, #8]
 802f074:	2b00      	cmp	r3, #0
 802f076:	d106      	bne.n	802f086 <tcp_accept_null+0x22>
 802f078:	4b07      	ldr	r3, [pc, #28]	; (802f098 <tcp_accept_null+0x34>)
 802f07a:	f240 320f 	movw	r2, #783	; 0x30f
 802f07e:	4907      	ldr	r1, [pc, #28]	; (802f09c <tcp_accept_null+0x38>)
 802f080:	4807      	ldr	r0, [pc, #28]	; (802f0a0 <tcp_accept_null+0x3c>)
 802f082:	f009 fff1 	bl	8039068 <iprintf>

  tcp_abort(pcb);
 802f086:	68b8      	ldr	r0, [r7, #8]
 802f088:	f7ff ff48 	bl	802ef1c <tcp_abort>

  return ERR_ABRT;
 802f08c:	f06f 030c 	mvn.w	r3, #12
}
 802f090:	4618      	mov	r0, r3
 802f092:	3710      	adds	r7, #16
 802f094:	46bd      	mov	sp, r7
 802f096:	bd80      	pop	{r7, pc}
 802f098:	0803b540 	.word	0x0803b540
 802f09c:	0803b714 	.word	0x0803b714
 802f0a0:	0803b584 	.word	0x0803b584

0802f0a4 <tcp_listen_with_backlog_and_err>:
 *       called like this:
 *             tpcb = tcp_listen_with_backlog_and_err(tpcb, backlog, &err);
 */
struct tcp_pcb *
tcp_listen_with_backlog_and_err(struct tcp_pcb *pcb, u8_t backlog, err_t *err)
{
 802f0a4:	b580      	push	{r7, lr}
 802f0a6:	b088      	sub	sp, #32
 802f0a8:	af00      	add	r7, sp, #0
 802f0aa:	60f8      	str	r0, [r7, #12]
 802f0ac:	460b      	mov	r3, r1
 802f0ae:	607a      	str	r2, [r7, #4]
 802f0b0:	72fb      	strb	r3, [r7, #11]
  struct tcp_pcb_listen *lpcb = NULL;
 802f0b2:	2300      	movs	r3, #0
 802f0b4:	61fb      	str	r3, [r7, #28]

  LWIP_UNUSED_ARG(backlog);

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_listen_with_backlog_and_err: invalid pcb", pcb != NULL, res = ERR_ARG; goto done);
 802f0b6:	68fb      	ldr	r3, [r7, #12]
 802f0b8:	2b00      	cmp	r3, #0
 802f0ba:	d109      	bne.n	802f0d0 <tcp_listen_with_backlog_and_err+0x2c>
 802f0bc:	4b47      	ldr	r3, [pc, #284]	; (802f1dc <tcp_listen_with_backlog_and_err+0x138>)
 802f0be:	f240 3259 	movw	r2, #857	; 0x359
 802f0c2:	4947      	ldr	r1, [pc, #284]	; (802f1e0 <tcp_listen_with_backlog_and_err+0x13c>)
 802f0c4:	4847      	ldr	r0, [pc, #284]	; (802f1e4 <tcp_listen_with_backlog_and_err+0x140>)
 802f0c6:	f009 ffcf 	bl	8039068 <iprintf>
 802f0ca:	23f0      	movs	r3, #240	; 0xf0
 802f0cc:	76fb      	strb	r3, [r7, #27]
 802f0ce:	e079      	b.n	802f1c4 <tcp_listen_with_backlog_and_err+0x120>
  LWIP_ERROR("tcp_listen_with_backlog_and_err: pcb already connected", pcb->state == CLOSED, res = ERR_CLSD; goto done);
 802f0d0:	68fb      	ldr	r3, [r7, #12]
 802f0d2:	7d1b      	ldrb	r3, [r3, #20]
 802f0d4:	2b00      	cmp	r3, #0
 802f0d6:	d009      	beq.n	802f0ec <tcp_listen_with_backlog_and_err+0x48>
 802f0d8:	4b40      	ldr	r3, [pc, #256]	; (802f1dc <tcp_listen_with_backlog_and_err+0x138>)
 802f0da:	f240 325a 	movw	r2, #858	; 0x35a
 802f0de:	4942      	ldr	r1, [pc, #264]	; (802f1e8 <tcp_listen_with_backlog_and_err+0x144>)
 802f0e0:	4840      	ldr	r0, [pc, #256]	; (802f1e4 <tcp_listen_with_backlog_and_err+0x140>)
 802f0e2:	f009 ffc1 	bl	8039068 <iprintf>
 802f0e6:	23f1      	movs	r3, #241	; 0xf1
 802f0e8:	76fb      	strb	r3, [r7, #27]
 802f0ea:	e06b      	b.n	802f1c4 <tcp_listen_with_backlog_and_err+0x120>

  /* already listening? */
  if (pcb->state == LISTEN) {
 802f0ec:	68fb      	ldr	r3, [r7, #12]
 802f0ee:	7d1b      	ldrb	r3, [r3, #20]
 802f0f0:	2b01      	cmp	r3, #1
 802f0f2:	d104      	bne.n	802f0fe <tcp_listen_with_backlog_and_err+0x5a>
    lpcb = (struct tcp_pcb_listen *)pcb;
 802f0f4:	68fb      	ldr	r3, [r7, #12]
 802f0f6:	61fb      	str	r3, [r7, #28]
    res = ERR_ALREADY;
 802f0f8:	23f7      	movs	r3, #247	; 0xf7
 802f0fa:	76fb      	strb	r3, [r7, #27]
    goto done;
 802f0fc:	e062      	b.n	802f1c4 <tcp_listen_with_backlog_and_err+0x120>
        goto done;
      }
    }
  }
#endif /* SO_REUSE */
  lpcb = (struct tcp_pcb_listen *)memp_malloc(MEMP_TCP_PCB_LISTEN);
 802f0fe:	2002      	movs	r0, #2
 802f100:	f7fe f9b2 	bl	802d468 <memp_malloc>
 802f104:	61f8      	str	r0, [r7, #28]
  if (lpcb == NULL) {
 802f106:	69fb      	ldr	r3, [r7, #28]
 802f108:	2b00      	cmp	r3, #0
 802f10a:	d102      	bne.n	802f112 <tcp_listen_with_backlog_and_err+0x6e>
    res = ERR_MEM;
 802f10c:	23ff      	movs	r3, #255	; 0xff
 802f10e:	76fb      	strb	r3, [r7, #27]
    goto done;
 802f110:	e058      	b.n	802f1c4 <tcp_listen_with_backlog_and_err+0x120>
  }
  lpcb->callback_arg = pcb->callback_arg;
 802f112:	68fb      	ldr	r3, [r7, #12]
 802f114:	691a      	ldr	r2, [r3, #16]
 802f116:	69fb      	ldr	r3, [r7, #28]
 802f118:	611a      	str	r2, [r3, #16]
  lpcb->local_port = pcb->local_port;
 802f11a:	68fb      	ldr	r3, [r7, #12]
 802f11c:	8ada      	ldrh	r2, [r3, #22]
 802f11e:	69fb      	ldr	r3, [r7, #28]
 802f120:	82da      	strh	r2, [r3, #22]
  lpcb->state = LISTEN;
 802f122:	69fb      	ldr	r3, [r7, #28]
 802f124:	2201      	movs	r2, #1
 802f126:	751a      	strb	r2, [r3, #20]
  lpcb->prio = pcb->prio;
 802f128:	68fb      	ldr	r3, [r7, #12]
 802f12a:	7d5a      	ldrb	r2, [r3, #21]
 802f12c:	69fb      	ldr	r3, [r7, #28]
 802f12e:	755a      	strb	r2, [r3, #21]
  lpcb->so_options = pcb->so_options;
 802f130:	68fb      	ldr	r3, [r7, #12]
 802f132:	7a5a      	ldrb	r2, [r3, #9]
 802f134:	69fb      	ldr	r3, [r7, #28]
 802f136:	725a      	strb	r2, [r3, #9]
  lpcb->netif_idx = NETIF_NO_INDEX;
 802f138:	69fb      	ldr	r3, [r7, #28]
 802f13a:	2200      	movs	r2, #0
 802f13c:	721a      	strb	r2, [r3, #8]
  lpcb->ttl = pcb->ttl;
 802f13e:	68fb      	ldr	r3, [r7, #12]
 802f140:	7ada      	ldrb	r2, [r3, #11]
 802f142:	69fb      	ldr	r3, [r7, #28]
 802f144:	72da      	strb	r2, [r3, #11]
  lpcb->tos = pcb->tos;
 802f146:	68fb      	ldr	r3, [r7, #12]
 802f148:	7a9a      	ldrb	r2, [r3, #10]
 802f14a:	69fb      	ldr	r3, [r7, #28]
 802f14c:	729a      	strb	r2, [r3, #10]
#if LWIP_IPV4 && LWIP_IPV6
  IP_SET_TYPE_VAL(lpcb->remote_ip, pcb->local_ip.type);
#endif /* LWIP_IPV4 && LWIP_IPV6 */
  ip_addr_copy(lpcb->local_ip, pcb->local_ip);
 802f14e:	68fb      	ldr	r3, [r7, #12]
 802f150:	681a      	ldr	r2, [r3, #0]
 802f152:	69fb      	ldr	r3, [r7, #28]
 802f154:	601a      	str	r2, [r3, #0]
  if (pcb->local_port != 0) {
 802f156:	68fb      	ldr	r3, [r7, #12]
 802f158:	8adb      	ldrh	r3, [r3, #22]
 802f15a:	2b00      	cmp	r3, #0
 802f15c:	d021      	beq.n	802f1a2 <tcp_listen_with_backlog_and_err+0xfe>
    TCP_RMV(&tcp_bound_pcbs, pcb);
 802f15e:	4b23      	ldr	r3, [pc, #140]	; (802f1ec <tcp_listen_with_backlog_and_err+0x148>)
 802f160:	681b      	ldr	r3, [r3, #0]
 802f162:	68fa      	ldr	r2, [r7, #12]
 802f164:	429a      	cmp	r2, r3
 802f166:	d105      	bne.n	802f174 <tcp_listen_with_backlog_and_err+0xd0>
 802f168:	4b20      	ldr	r3, [pc, #128]	; (802f1ec <tcp_listen_with_backlog_and_err+0x148>)
 802f16a:	681b      	ldr	r3, [r3, #0]
 802f16c:	68db      	ldr	r3, [r3, #12]
 802f16e:	4a1f      	ldr	r2, [pc, #124]	; (802f1ec <tcp_listen_with_backlog_and_err+0x148>)
 802f170:	6013      	str	r3, [r2, #0]
 802f172:	e013      	b.n	802f19c <tcp_listen_with_backlog_and_err+0xf8>
 802f174:	4b1d      	ldr	r3, [pc, #116]	; (802f1ec <tcp_listen_with_backlog_and_err+0x148>)
 802f176:	681b      	ldr	r3, [r3, #0]
 802f178:	617b      	str	r3, [r7, #20]
 802f17a:	e00c      	b.n	802f196 <tcp_listen_with_backlog_and_err+0xf2>
 802f17c:	697b      	ldr	r3, [r7, #20]
 802f17e:	68db      	ldr	r3, [r3, #12]
 802f180:	68fa      	ldr	r2, [r7, #12]
 802f182:	429a      	cmp	r2, r3
 802f184:	d104      	bne.n	802f190 <tcp_listen_with_backlog_and_err+0xec>
 802f186:	68fb      	ldr	r3, [r7, #12]
 802f188:	68da      	ldr	r2, [r3, #12]
 802f18a:	697b      	ldr	r3, [r7, #20]
 802f18c:	60da      	str	r2, [r3, #12]
 802f18e:	e005      	b.n	802f19c <tcp_listen_with_backlog_and_err+0xf8>
 802f190:	697b      	ldr	r3, [r7, #20]
 802f192:	68db      	ldr	r3, [r3, #12]
 802f194:	617b      	str	r3, [r7, #20]
 802f196:	697b      	ldr	r3, [r7, #20]
 802f198:	2b00      	cmp	r3, #0
 802f19a:	d1ef      	bne.n	802f17c <tcp_listen_with_backlog_and_err+0xd8>
 802f19c:	68fb      	ldr	r3, [r7, #12]
 802f19e:	2200      	movs	r2, #0
 802f1a0:	60da      	str	r2, [r3, #12]
  }
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  /* copy over ext_args to listening pcb  */
  memcpy(&lpcb->ext_args, &pcb->ext_args, sizeof(pcb->ext_args));
#endif
  tcp_free(pcb);
 802f1a2:	68f8      	ldr	r0, [r7, #12]
 802f1a4:	f7ff fb76 	bl	802e894 <tcp_free>
#if LWIP_CALLBACK_API
  lpcb->accept = tcp_accept_null;
 802f1a8:	69fb      	ldr	r3, [r7, #28]
 802f1aa:	4a11      	ldr	r2, [pc, #68]	; (802f1f0 <tcp_listen_with_backlog_and_err+0x14c>)
 802f1ac:	619a      	str	r2, [r3, #24]
#endif /* LWIP_CALLBACK_API */
#if TCP_LISTEN_BACKLOG
  lpcb->accepts_pending = 0;
  tcp_backlog_set(lpcb, backlog);
#endif /* TCP_LISTEN_BACKLOG */
  TCP_REG(&tcp_listen_pcbs.pcbs, (struct tcp_pcb *)lpcb);
 802f1ae:	4b11      	ldr	r3, [pc, #68]	; (802f1f4 <tcp_listen_with_backlog_and_err+0x150>)
 802f1b0:	681a      	ldr	r2, [r3, #0]
 802f1b2:	69fb      	ldr	r3, [r7, #28]
 802f1b4:	60da      	str	r2, [r3, #12]
 802f1b6:	4a0f      	ldr	r2, [pc, #60]	; (802f1f4 <tcp_listen_with_backlog_and_err+0x150>)
 802f1b8:	69fb      	ldr	r3, [r7, #28]
 802f1ba:	6013      	str	r3, [r2, #0]
 802f1bc:	f005 fcbc 	bl	8034b38 <tcp_timer_needed>
  res = ERR_OK;
 802f1c0:	2300      	movs	r3, #0
 802f1c2:	76fb      	strb	r3, [r7, #27]
done:
  if (err != NULL) {
 802f1c4:	687b      	ldr	r3, [r7, #4]
 802f1c6:	2b00      	cmp	r3, #0
 802f1c8:	d002      	beq.n	802f1d0 <tcp_listen_with_backlog_and_err+0x12c>
    *err = res;
 802f1ca:	687b      	ldr	r3, [r7, #4]
 802f1cc:	7efa      	ldrb	r2, [r7, #27]
 802f1ce:	701a      	strb	r2, [r3, #0]
  }
  return (struct tcp_pcb *)lpcb;
 802f1d0:	69fb      	ldr	r3, [r7, #28]
}
 802f1d2:	4618      	mov	r0, r3
 802f1d4:	3720      	adds	r7, #32
 802f1d6:	46bd      	mov	sp, r7
 802f1d8:	bd80      	pop	{r7, pc}
 802f1da:	bf00      	nop
 802f1dc:	0803b540 	.word	0x0803b540
 802f1e0:	0803b734 	.word	0x0803b734
 802f1e4:	0803b584 	.word	0x0803b584
 802f1e8:	0803b764 	.word	0x0803b764
 802f1ec:	2000ef04 	.word	0x2000ef04
 802f1f0:	0802f065 	.word	0x0802f065
 802f1f4:	2000ef08 	.word	0x2000ef08

0802f1f8 <tcp_update_rcv_ann_wnd>:
 * Returns how much extra window would be advertised if we sent an
 * update now.
 */
u32_t
tcp_update_rcv_ann_wnd(struct tcp_pcb *pcb)
{
 802f1f8:	b580      	push	{r7, lr}
 802f1fa:	b084      	sub	sp, #16
 802f1fc:	af00      	add	r7, sp, #0
 802f1fe:	6078      	str	r0, [r7, #4]
  u32_t new_right_edge;

  LWIP_ASSERT("tcp_update_rcv_ann_wnd: invalid pcb", pcb != NULL);
 802f200:	687b      	ldr	r3, [r7, #4]
 802f202:	2b00      	cmp	r3, #0
 802f204:	d106      	bne.n	802f214 <tcp_update_rcv_ann_wnd+0x1c>
 802f206:	4b25      	ldr	r3, [pc, #148]	; (802f29c <tcp_update_rcv_ann_wnd+0xa4>)
 802f208:	f240 32a6 	movw	r2, #934	; 0x3a6
 802f20c:	4924      	ldr	r1, [pc, #144]	; (802f2a0 <tcp_update_rcv_ann_wnd+0xa8>)
 802f20e:	4825      	ldr	r0, [pc, #148]	; (802f2a4 <tcp_update_rcv_ann_wnd+0xac>)
 802f210:	f009 ff2a 	bl	8039068 <iprintf>
  new_right_edge = pcb->rcv_nxt + pcb->rcv_wnd;
 802f214:	687b      	ldr	r3, [r7, #4]
 802f216:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 802f218:	687a      	ldr	r2, [r7, #4]
 802f21a:	8d12      	ldrh	r2, [r2, #40]	; 0x28
 802f21c:	4413      	add	r3, r2
 802f21e:	60fb      	str	r3, [r7, #12]

  if (TCP_SEQ_GEQ(new_right_edge, pcb->rcv_ann_right_edge + LWIP_MIN((TCP_WND / 2), pcb->mss))) {
 802f220:	687b      	ldr	r3, [r7, #4]
 802f222:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 802f224:	687a      	ldr	r2, [r7, #4]
 802f226:	8e52      	ldrh	r2, [r2, #50]	; 0x32
 802f228:	f5b2 6f86 	cmp.w	r2, #1072	; 0x430
 802f22c:	bf28      	it	cs
 802f22e:	f44f 6286 	movcs.w	r2, #1072	; 0x430
 802f232:	b292      	uxth	r2, r2
 802f234:	4413      	add	r3, r2
 802f236:	68fa      	ldr	r2, [r7, #12]
 802f238:	1ad3      	subs	r3, r2, r3
 802f23a:	2b00      	cmp	r3, #0
 802f23c:	db08      	blt.n	802f250 <tcp_update_rcv_ann_wnd+0x58>
    /* we can advertise more window */
    pcb->rcv_ann_wnd = pcb->rcv_wnd;
 802f23e:	687b      	ldr	r3, [r7, #4]
 802f240:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 802f242:	687b      	ldr	r3, [r7, #4]
 802f244:	855a      	strh	r2, [r3, #42]	; 0x2a
    return new_right_edge - pcb->rcv_ann_right_edge;
 802f246:	687b      	ldr	r3, [r7, #4]
 802f248:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 802f24a:	68fa      	ldr	r2, [r7, #12]
 802f24c:	1ad3      	subs	r3, r2, r3
 802f24e:	e020      	b.n	802f292 <tcp_update_rcv_ann_wnd+0x9a>
  } else {
    if (TCP_SEQ_GT(pcb->rcv_nxt, pcb->rcv_ann_right_edge)) {
 802f250:	687b      	ldr	r3, [r7, #4]
 802f252:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 802f254:	687b      	ldr	r3, [r7, #4]
 802f256:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 802f258:	1ad3      	subs	r3, r2, r3
 802f25a:	2b00      	cmp	r3, #0
 802f25c:	dd03      	ble.n	802f266 <tcp_update_rcv_ann_wnd+0x6e>
      /* Can happen due to other end sending out of advertised window,
       * but within actual available (but not yet advertised) window */
      pcb->rcv_ann_wnd = 0;
 802f25e:	687b      	ldr	r3, [r7, #4]
 802f260:	2200      	movs	r2, #0
 802f262:	855a      	strh	r2, [r3, #42]	; 0x2a
 802f264:	e014      	b.n	802f290 <tcp_update_rcv_ann_wnd+0x98>
    } else {
      /* keep the right edge of window constant */
      u32_t new_rcv_ann_wnd = pcb->rcv_ann_right_edge - pcb->rcv_nxt;
 802f266:	687b      	ldr	r3, [r7, #4]
 802f268:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 802f26a:	687b      	ldr	r3, [r7, #4]
 802f26c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 802f26e:	1ad3      	subs	r3, r2, r3
 802f270:	60bb      	str	r3, [r7, #8]
#if !LWIP_WND_SCALE
      LWIP_ASSERT("new_rcv_ann_wnd <= 0xffff", new_rcv_ann_wnd <= 0xffff);
 802f272:	68bb      	ldr	r3, [r7, #8]
 802f274:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 802f278:	d306      	bcc.n	802f288 <tcp_update_rcv_ann_wnd+0x90>
 802f27a:	4b08      	ldr	r3, [pc, #32]	; (802f29c <tcp_update_rcv_ann_wnd+0xa4>)
 802f27c:	f240 32b6 	movw	r2, #950	; 0x3b6
 802f280:	4909      	ldr	r1, [pc, #36]	; (802f2a8 <tcp_update_rcv_ann_wnd+0xb0>)
 802f282:	4808      	ldr	r0, [pc, #32]	; (802f2a4 <tcp_update_rcv_ann_wnd+0xac>)
 802f284:	f009 fef0 	bl	8039068 <iprintf>
#endif
      pcb->rcv_ann_wnd = (tcpwnd_size_t)new_rcv_ann_wnd;
 802f288:	68bb      	ldr	r3, [r7, #8]
 802f28a:	b29a      	uxth	r2, r3
 802f28c:	687b      	ldr	r3, [r7, #4]
 802f28e:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
    return 0;
 802f290:	2300      	movs	r3, #0
  }
}
 802f292:	4618      	mov	r0, r3
 802f294:	3710      	adds	r7, #16
 802f296:	46bd      	mov	sp, r7
 802f298:	bd80      	pop	{r7, pc}
 802f29a:	bf00      	nop
 802f29c:	0803b540 	.word	0x0803b540
 802f2a0:	0803b79c 	.word	0x0803b79c
 802f2a4:	0803b584 	.word	0x0803b584
 802f2a8:	0803b7c0 	.word	0x0803b7c0

0802f2ac <tcp_recved>:
 * @param pcb the tcp_pcb for which data is read
 * @param len the amount of bytes that have been read by the application
 */
void
tcp_recved(struct tcp_pcb *pcb, u16_t len)
{
 802f2ac:	b580      	push	{r7, lr}
 802f2ae:	b084      	sub	sp, #16
 802f2b0:	af00      	add	r7, sp, #0
 802f2b2:	6078      	str	r0, [r7, #4]
 802f2b4:	460b      	mov	r3, r1
 802f2b6:	807b      	strh	r3, [r7, #2]
  u32_t wnd_inflation;
  tcpwnd_size_t rcv_wnd;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_recved: invalid pcb", pcb != NULL, return);
 802f2b8:	687b      	ldr	r3, [r7, #4]
 802f2ba:	2b00      	cmp	r3, #0
 802f2bc:	d107      	bne.n	802f2ce <tcp_recved+0x22>
 802f2be:	4b1f      	ldr	r3, [pc, #124]	; (802f33c <tcp_recved+0x90>)
 802f2c0:	f240 32cf 	movw	r2, #975	; 0x3cf
 802f2c4:	491e      	ldr	r1, [pc, #120]	; (802f340 <tcp_recved+0x94>)
 802f2c6:	481f      	ldr	r0, [pc, #124]	; (802f344 <tcp_recved+0x98>)
 802f2c8:	f009 fece 	bl	8039068 <iprintf>
 802f2cc:	e032      	b.n	802f334 <tcp_recved+0x88>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_recved for listen-pcbs",
 802f2ce:	687b      	ldr	r3, [r7, #4]
 802f2d0:	7d1b      	ldrb	r3, [r3, #20]
 802f2d2:	2b01      	cmp	r3, #1
 802f2d4:	d106      	bne.n	802f2e4 <tcp_recved+0x38>
 802f2d6:	4b19      	ldr	r3, [pc, #100]	; (802f33c <tcp_recved+0x90>)
 802f2d8:	f240 32d2 	movw	r2, #978	; 0x3d2
 802f2dc:	491a      	ldr	r1, [pc, #104]	; (802f348 <tcp_recved+0x9c>)
 802f2de:	4819      	ldr	r0, [pc, #100]	; (802f344 <tcp_recved+0x98>)
 802f2e0:	f009 fec2 	bl	8039068 <iprintf>
              pcb->state != LISTEN);

  rcv_wnd = (tcpwnd_size_t)(pcb->rcv_wnd + len);
 802f2e4:	687b      	ldr	r3, [r7, #4]
 802f2e6:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 802f2e8:	887b      	ldrh	r3, [r7, #2]
 802f2ea:	4413      	add	r3, r2
 802f2ec:	81fb      	strh	r3, [r7, #14]
  if ((rcv_wnd > TCP_WND_MAX(pcb)) || (rcv_wnd < pcb->rcv_wnd)) {
 802f2ee:	89fb      	ldrh	r3, [r7, #14]
 802f2f0:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 802f2f4:	d804      	bhi.n	802f300 <tcp_recved+0x54>
 802f2f6:	687b      	ldr	r3, [r7, #4]
 802f2f8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 802f2fa:	89fa      	ldrh	r2, [r7, #14]
 802f2fc:	429a      	cmp	r2, r3
 802f2fe:	d204      	bcs.n	802f30a <tcp_recved+0x5e>
    /* window got too big or tcpwnd_size_t overflow */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: window got too big or tcpwnd_size_t overflow\n"));
    pcb->rcv_wnd = TCP_WND_MAX(pcb);
 802f300:	687b      	ldr	r3, [r7, #4]
 802f302:	f44f 6206 	mov.w	r2, #2144	; 0x860
 802f306:	851a      	strh	r2, [r3, #40]	; 0x28
 802f308:	e002      	b.n	802f310 <tcp_recved+0x64>
  } else  {
    pcb->rcv_wnd = rcv_wnd;
 802f30a:	687b      	ldr	r3, [r7, #4]
 802f30c:	89fa      	ldrh	r2, [r7, #14]
 802f30e:	851a      	strh	r2, [r3, #40]	; 0x28
  }

  wnd_inflation = tcp_update_rcv_ann_wnd(pcb);
 802f310:	6878      	ldr	r0, [r7, #4]
 802f312:	f7ff ff71 	bl	802f1f8 <tcp_update_rcv_ann_wnd>
 802f316:	60b8      	str	r0, [r7, #8]

  /* If the change in the right edge of window is significant (default
   * watermark is TCP_WND/4), then send an explicit update now.
   * Otherwise wait for a packet to be sent in the normal course of
   * events (or more window to be available later) */
  if (wnd_inflation >= TCP_WND_UPDATE_THRESHOLD) {
 802f318:	68bb      	ldr	r3, [r7, #8]
 802f31a:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 802f31e:	d309      	bcc.n	802f334 <tcp_recved+0x88>
    tcp_ack_now(pcb);
 802f320:	687b      	ldr	r3, [r7, #4]
 802f322:	8b5b      	ldrh	r3, [r3, #26]
 802f324:	f043 0302 	orr.w	r3, r3, #2
 802f328:	b29a      	uxth	r2, r3
 802f32a:	687b      	ldr	r3, [r7, #4]
 802f32c:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 802f32e:	6878      	ldr	r0, [r7, #4]
 802f330:	f004 fc78 	bl	8033c24 <tcp_output>
  }

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: received %"U16_F" bytes, wnd %"TCPWNDSIZE_F" (%"TCPWNDSIZE_F").\n",
                          len, pcb->rcv_wnd, (u16_t)(TCP_WND_MAX(pcb) - pcb->rcv_wnd)));
}
 802f334:	3710      	adds	r7, #16
 802f336:	46bd      	mov	sp, r7
 802f338:	bd80      	pop	{r7, pc}
 802f33a:	bf00      	nop
 802f33c:	0803b540 	.word	0x0803b540
 802f340:	0803b7dc 	.word	0x0803b7dc
 802f344:	0803b584 	.word	0x0803b584
 802f348:	0803b7f4 	.word	0x0803b7f4

0802f34c <tcp_new_port>:
 *
 * @return a new (free) local TCP port number
 */
static u16_t
tcp_new_port(void)
{
 802f34c:	b480      	push	{r7}
 802f34e:	b083      	sub	sp, #12
 802f350:	af00      	add	r7, sp, #0
  u8_t i;
  u16_t n = 0;
 802f352:	2300      	movs	r3, #0
 802f354:	80bb      	strh	r3, [r7, #4]
  struct tcp_pcb *pcb;

again:
  tcp_port++;
 802f356:	4b1e      	ldr	r3, [pc, #120]	; (802f3d0 <tcp_new_port+0x84>)
 802f358:	881b      	ldrh	r3, [r3, #0]
 802f35a:	3301      	adds	r3, #1
 802f35c:	b29a      	uxth	r2, r3
 802f35e:	4b1c      	ldr	r3, [pc, #112]	; (802f3d0 <tcp_new_port+0x84>)
 802f360:	801a      	strh	r2, [r3, #0]
  if (tcp_port == TCP_LOCAL_PORT_RANGE_END) {
 802f362:	4b1b      	ldr	r3, [pc, #108]	; (802f3d0 <tcp_new_port+0x84>)
 802f364:	881b      	ldrh	r3, [r3, #0]
 802f366:	f64f 72ff 	movw	r2, #65535	; 0xffff
 802f36a:	4293      	cmp	r3, r2
 802f36c:	d103      	bne.n	802f376 <tcp_new_port+0x2a>
    tcp_port = TCP_LOCAL_PORT_RANGE_START;
 802f36e:	4b18      	ldr	r3, [pc, #96]	; (802f3d0 <tcp_new_port+0x84>)
 802f370:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 802f374:	801a      	strh	r2, [r3, #0]
  }
  /* Check all PCB lists. */
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
 802f376:	2300      	movs	r3, #0
 802f378:	71fb      	strb	r3, [r7, #7]
 802f37a:	e01e      	b.n	802f3ba <tcp_new_port+0x6e>
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
 802f37c:	79fb      	ldrb	r3, [r7, #7]
 802f37e:	4a15      	ldr	r2, [pc, #84]	; (802f3d4 <tcp_new_port+0x88>)
 802f380:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 802f384:	681b      	ldr	r3, [r3, #0]
 802f386:	603b      	str	r3, [r7, #0]
 802f388:	e011      	b.n	802f3ae <tcp_new_port+0x62>
      if (pcb->local_port == tcp_port) {
 802f38a:	683b      	ldr	r3, [r7, #0]
 802f38c:	8ada      	ldrh	r2, [r3, #22]
 802f38e:	4b10      	ldr	r3, [pc, #64]	; (802f3d0 <tcp_new_port+0x84>)
 802f390:	881b      	ldrh	r3, [r3, #0]
 802f392:	429a      	cmp	r2, r3
 802f394:	d108      	bne.n	802f3a8 <tcp_new_port+0x5c>
        n++;
 802f396:	88bb      	ldrh	r3, [r7, #4]
 802f398:	3301      	adds	r3, #1
 802f39a:	80bb      	strh	r3, [r7, #4]
        if (n > (TCP_LOCAL_PORT_RANGE_END - TCP_LOCAL_PORT_RANGE_START)) {
 802f39c:	88bb      	ldrh	r3, [r7, #4]
 802f39e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 802f3a2:	d3d8      	bcc.n	802f356 <tcp_new_port+0xa>
          return 0;
 802f3a4:	2300      	movs	r3, #0
 802f3a6:	e00d      	b.n	802f3c4 <tcp_new_port+0x78>
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
 802f3a8:	683b      	ldr	r3, [r7, #0]
 802f3aa:	68db      	ldr	r3, [r3, #12]
 802f3ac:	603b      	str	r3, [r7, #0]
 802f3ae:	683b      	ldr	r3, [r7, #0]
 802f3b0:	2b00      	cmp	r3, #0
 802f3b2:	d1ea      	bne.n	802f38a <tcp_new_port+0x3e>
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
 802f3b4:	79fb      	ldrb	r3, [r7, #7]
 802f3b6:	3301      	adds	r3, #1
 802f3b8:	71fb      	strb	r3, [r7, #7]
 802f3ba:	79fb      	ldrb	r3, [r7, #7]
 802f3bc:	2b03      	cmp	r3, #3
 802f3be:	d9dd      	bls.n	802f37c <tcp_new_port+0x30>
        }
        goto again;
      }
    }
  }
  return tcp_port;
 802f3c0:	4b03      	ldr	r3, [pc, #12]	; (802f3d0 <tcp_new_port+0x84>)
 802f3c2:	881b      	ldrh	r3, [r3, #0]
}
 802f3c4:	4618      	mov	r0, r3
 802f3c6:	370c      	adds	r7, #12
 802f3c8:	46bd      	mov	sp, r7
 802f3ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 802f3ce:	4770      	bx	lr
 802f3d0:	20000028 	.word	0x20000028
 802f3d4:	0803d604 	.word	0x0803d604

0802f3d8 <tcp_slowtmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_slowtmr(void)
{
 802f3d8:	b5b0      	push	{r4, r5, r7, lr}
 802f3da:	b090      	sub	sp, #64	; 0x40
 802f3dc:	af04      	add	r7, sp, #16
  tcpwnd_size_t eff_wnd;
  u8_t pcb_remove;      /* flag if a PCB should be removed */
  u8_t pcb_reset;       /* flag if a RST should be sent when removing */
  err_t err;

  err = ERR_OK;
 802f3de:	2300      	movs	r3, #0
 802f3e0:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25

  ++tcp_ticks;
 802f3e4:	4b94      	ldr	r3, [pc, #592]	; (802f638 <tcp_slowtmr+0x260>)
 802f3e6:	681b      	ldr	r3, [r3, #0]
 802f3e8:	3301      	adds	r3, #1
 802f3ea:	4a93      	ldr	r2, [pc, #588]	; (802f638 <tcp_slowtmr+0x260>)
 802f3ec:	6013      	str	r3, [r2, #0]
  ++tcp_timer_ctr;
 802f3ee:	4b93      	ldr	r3, [pc, #588]	; (802f63c <tcp_slowtmr+0x264>)
 802f3f0:	781b      	ldrb	r3, [r3, #0]
 802f3f2:	3301      	adds	r3, #1
 802f3f4:	b2da      	uxtb	r2, r3
 802f3f6:	4b91      	ldr	r3, [pc, #580]	; (802f63c <tcp_slowtmr+0x264>)
 802f3f8:	701a      	strb	r2, [r3, #0]

tcp_slowtmr_start:
  /* Steps through all of the active PCBs. */
  prev = NULL;
 802f3fa:	2300      	movs	r3, #0
 802f3fc:	62bb      	str	r3, [r7, #40]	; 0x28
  pcb = tcp_active_pcbs;
 802f3fe:	4b90      	ldr	r3, [pc, #576]	; (802f640 <tcp_slowtmr+0x268>)
 802f400:	681b      	ldr	r3, [r3, #0]
 802f402:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (pcb == NULL) {
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: no active pcbs\n"));
  }
  while (pcb != NULL) {
 802f404:	e29f      	b.n	802f946 <tcp_slowtmr+0x56e>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: processing active pcb\n"));
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != CLOSED\n", pcb->state != CLOSED);
 802f406:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 802f408:	7d1b      	ldrb	r3, [r3, #20]
 802f40a:	2b00      	cmp	r3, #0
 802f40c:	d106      	bne.n	802f41c <tcp_slowtmr+0x44>
 802f40e:	4b8d      	ldr	r3, [pc, #564]	; (802f644 <tcp_slowtmr+0x26c>)
 802f410:	f240 42be 	movw	r2, #1214	; 0x4be
 802f414:	498c      	ldr	r1, [pc, #560]	; (802f648 <tcp_slowtmr+0x270>)
 802f416:	488d      	ldr	r0, [pc, #564]	; (802f64c <tcp_slowtmr+0x274>)
 802f418:	f009 fe26 	bl	8039068 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != LISTEN\n", pcb->state != LISTEN);
 802f41c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 802f41e:	7d1b      	ldrb	r3, [r3, #20]
 802f420:	2b01      	cmp	r3, #1
 802f422:	d106      	bne.n	802f432 <tcp_slowtmr+0x5a>
 802f424:	4b87      	ldr	r3, [pc, #540]	; (802f644 <tcp_slowtmr+0x26c>)
 802f426:	f240 42bf 	movw	r2, #1215	; 0x4bf
 802f42a:	4989      	ldr	r1, [pc, #548]	; (802f650 <tcp_slowtmr+0x278>)
 802f42c:	4887      	ldr	r0, [pc, #540]	; (802f64c <tcp_slowtmr+0x274>)
 802f42e:	f009 fe1b 	bl	8039068 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != TIME-WAIT\n", pcb->state != TIME_WAIT);
 802f432:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 802f434:	7d1b      	ldrb	r3, [r3, #20]
 802f436:	2b0a      	cmp	r3, #10
 802f438:	d106      	bne.n	802f448 <tcp_slowtmr+0x70>
 802f43a:	4b82      	ldr	r3, [pc, #520]	; (802f644 <tcp_slowtmr+0x26c>)
 802f43c:	f44f 6298 	mov.w	r2, #1216	; 0x4c0
 802f440:	4984      	ldr	r1, [pc, #528]	; (802f654 <tcp_slowtmr+0x27c>)
 802f442:	4882      	ldr	r0, [pc, #520]	; (802f64c <tcp_slowtmr+0x274>)
 802f444:	f009 fe10 	bl	8039068 <iprintf>
    if (pcb->last_timer == tcp_timer_ctr) {
 802f448:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 802f44a:	7f9a      	ldrb	r2, [r3, #30]
 802f44c:	4b7b      	ldr	r3, [pc, #492]	; (802f63c <tcp_slowtmr+0x264>)
 802f44e:	781b      	ldrb	r3, [r3, #0]
 802f450:	429a      	cmp	r2, r3
 802f452:	d105      	bne.n	802f460 <tcp_slowtmr+0x88>
      /* skip this pcb, we have already processed it */
      prev = pcb;
 802f454:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 802f456:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 802f458:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 802f45a:	68db      	ldr	r3, [r3, #12]
 802f45c:	62fb      	str	r3, [r7, #44]	; 0x2c
      continue;
 802f45e:	e272      	b.n	802f946 <tcp_slowtmr+0x56e>
    }
    pcb->last_timer = tcp_timer_ctr;
 802f460:	4b76      	ldr	r3, [pc, #472]	; (802f63c <tcp_slowtmr+0x264>)
 802f462:	781a      	ldrb	r2, [r3, #0]
 802f464:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 802f466:	779a      	strb	r2, [r3, #30]

    pcb_remove = 0;
 802f468:	2300      	movs	r3, #0
 802f46a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    pcb_reset = 0;
 802f46e:	2300      	movs	r3, #0
 802f470:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

    if (pcb->state == SYN_SENT && pcb->nrtx >= TCP_SYNMAXRTX) {
 802f474:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 802f476:	7d1b      	ldrb	r3, [r3, #20]
 802f478:	2b02      	cmp	r3, #2
 802f47a:	d10a      	bne.n	802f492 <tcp_slowtmr+0xba>
 802f47c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 802f47e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 802f482:	2b05      	cmp	r3, #5
 802f484:	d905      	bls.n	802f492 <tcp_slowtmr+0xba>
      ++pcb_remove;
 802f486:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 802f48a:	3301      	adds	r3, #1
 802f48c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 802f490:	e11e      	b.n	802f6d0 <tcp_slowtmr+0x2f8>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max SYN retries reached\n"));
    } else if (pcb->nrtx >= TCP_MAXRTX) {
 802f492:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 802f494:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 802f498:	2b0b      	cmp	r3, #11
 802f49a:	d905      	bls.n	802f4a8 <tcp_slowtmr+0xd0>
      ++pcb_remove;
 802f49c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 802f4a0:	3301      	adds	r3, #1
 802f4a2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 802f4a6:	e113      	b.n	802f6d0 <tcp_slowtmr+0x2f8>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max DATA retries reached\n"));
    } else {
      if (pcb->persist_backoff > 0) {
 802f4a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 802f4aa:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 802f4ae:	2b00      	cmp	r3, #0
 802f4b0:	d075      	beq.n	802f59e <tcp_slowtmr+0x1c6>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with in-flight data", pcb->unacked == NULL);
 802f4b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 802f4b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 802f4b6:	2b00      	cmp	r3, #0
 802f4b8:	d006      	beq.n	802f4c8 <tcp_slowtmr+0xf0>
 802f4ba:	4b62      	ldr	r3, [pc, #392]	; (802f644 <tcp_slowtmr+0x26c>)
 802f4bc:	f240 42d4 	movw	r2, #1236	; 0x4d4
 802f4c0:	4965      	ldr	r1, [pc, #404]	; (802f658 <tcp_slowtmr+0x280>)
 802f4c2:	4862      	ldr	r0, [pc, #392]	; (802f64c <tcp_slowtmr+0x274>)
 802f4c4:	f009 fdd0 	bl	8039068 <iprintf>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with empty send buffer", pcb->unsent != NULL);
 802f4c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 802f4ca:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 802f4cc:	2b00      	cmp	r3, #0
 802f4ce:	d106      	bne.n	802f4de <tcp_slowtmr+0x106>
 802f4d0:	4b5c      	ldr	r3, [pc, #368]	; (802f644 <tcp_slowtmr+0x26c>)
 802f4d2:	f240 42d5 	movw	r2, #1237	; 0x4d5
 802f4d6:	4961      	ldr	r1, [pc, #388]	; (802f65c <tcp_slowtmr+0x284>)
 802f4d8:	485c      	ldr	r0, [pc, #368]	; (802f64c <tcp_slowtmr+0x274>)
 802f4da:	f009 fdc5 	bl	8039068 <iprintf>
        if (pcb->persist_probe >= TCP_MAXRTX) {
 802f4de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 802f4e0:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 802f4e4:	2b0b      	cmp	r3, #11
 802f4e6:	d905      	bls.n	802f4f4 <tcp_slowtmr+0x11c>
          ++pcb_remove; /* max probes reached */
 802f4e8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 802f4ec:	3301      	adds	r3, #1
 802f4ee:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 802f4f2:	e0ed      	b.n	802f6d0 <tcp_slowtmr+0x2f8>
        } else {
          u8_t backoff_cnt = tcp_persist_backoff[pcb->persist_backoff - 1];
 802f4f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 802f4f6:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 802f4fa:	3b01      	subs	r3, #1
 802f4fc:	4a58      	ldr	r2, [pc, #352]	; (802f660 <tcp_slowtmr+0x288>)
 802f4fe:	5cd3      	ldrb	r3, [r2, r3]
 802f500:	747b      	strb	r3, [r7, #17]
          if (pcb->persist_cnt < backoff_cnt) {
 802f502:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 802f504:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 802f508:	7c7a      	ldrb	r2, [r7, #17]
 802f50a:	429a      	cmp	r2, r3
 802f50c:	d907      	bls.n	802f51e <tcp_slowtmr+0x146>
            pcb->persist_cnt++;
 802f50e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 802f510:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 802f514:	3301      	adds	r3, #1
 802f516:	b2da      	uxtb	r2, r3
 802f518:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 802f51a:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
          }
          if (pcb->persist_cnt >= backoff_cnt) {
 802f51e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 802f520:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 802f524:	7c7a      	ldrb	r2, [r7, #17]
 802f526:	429a      	cmp	r2, r3
 802f528:	f200 80d2 	bhi.w	802f6d0 <tcp_slowtmr+0x2f8>
            int next_slot = 1; /* increment timer to next slot */
 802f52c:	2301      	movs	r3, #1
 802f52e:	623b      	str	r3, [r7, #32]
            /* If snd_wnd is zero, send 1 byte probes */
            if (pcb->snd_wnd == 0) {
 802f530:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 802f532:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 802f536:	2b00      	cmp	r3, #0
 802f538:	d108      	bne.n	802f54c <tcp_slowtmr+0x174>
              if (tcp_zero_window_probe(pcb) != ERR_OK) {
 802f53a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 802f53c:	f005 fa2e 	bl	803499c <tcp_zero_window_probe>
 802f540:	4603      	mov	r3, r0
 802f542:	2b00      	cmp	r3, #0
 802f544:	d014      	beq.n	802f570 <tcp_slowtmr+0x198>
                next_slot = 0; /* try probe again with current slot */
 802f546:	2300      	movs	r3, #0
 802f548:	623b      	str	r3, [r7, #32]
 802f54a:	e011      	b.n	802f570 <tcp_slowtmr+0x198>
              }
              /* snd_wnd not fully closed, split unsent head and fill window */
            } else {
              if (tcp_split_unsent_seg(pcb, (u16_t)pcb->snd_wnd) == ERR_OK) {
 802f54c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 802f54e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 802f552:	4619      	mov	r1, r3
 802f554:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 802f556:	f004 f8c3 	bl	80336e0 <tcp_split_unsent_seg>
 802f55a:	4603      	mov	r3, r0
 802f55c:	2b00      	cmp	r3, #0
 802f55e:	d107      	bne.n	802f570 <tcp_slowtmr+0x198>
                if (tcp_output(pcb) == ERR_OK) {
 802f560:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 802f562:	f004 fb5f 	bl	8033c24 <tcp_output>
 802f566:	4603      	mov	r3, r0
 802f568:	2b00      	cmp	r3, #0
 802f56a:	d101      	bne.n	802f570 <tcp_slowtmr+0x198>
                  /* sending will cancel persist timer, else retry with current slot */
                  next_slot = 0;
 802f56c:	2300      	movs	r3, #0
 802f56e:	623b      	str	r3, [r7, #32]
                }
              }
            }
            if (next_slot) {
 802f570:	6a3b      	ldr	r3, [r7, #32]
 802f572:	2b00      	cmp	r3, #0
 802f574:	f000 80ac 	beq.w	802f6d0 <tcp_slowtmr+0x2f8>
              pcb->persist_cnt = 0;
 802f578:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 802f57a:	2200      	movs	r2, #0
 802f57c:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
              if (pcb->persist_backoff < sizeof(tcp_persist_backoff)) {
 802f580:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 802f582:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 802f586:	2b06      	cmp	r3, #6
 802f588:	f200 80a2 	bhi.w	802f6d0 <tcp_slowtmr+0x2f8>
                pcb->persist_backoff++;
 802f58c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 802f58e:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 802f592:	3301      	adds	r3, #1
 802f594:	b2da      	uxtb	r2, r3
 802f596:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 802f598:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
 802f59c:	e098      	b.n	802f6d0 <tcp_slowtmr+0x2f8>
            }
          }
        }
      } else {
        /* Increase the retransmission timer if it is running */
        if ((pcb->rtime >= 0) && (pcb->rtime < 0x7FFF)) {
 802f59e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 802f5a0:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 802f5a4:	2b00      	cmp	r3, #0
 802f5a6:	db0f      	blt.n	802f5c8 <tcp_slowtmr+0x1f0>
 802f5a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 802f5aa:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 802f5ae:	f647 72ff 	movw	r2, #32767	; 0x7fff
 802f5b2:	4293      	cmp	r3, r2
 802f5b4:	d008      	beq.n	802f5c8 <tcp_slowtmr+0x1f0>
          ++pcb->rtime;
 802f5b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 802f5b8:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 802f5bc:	b29b      	uxth	r3, r3
 802f5be:	3301      	adds	r3, #1
 802f5c0:	b29b      	uxth	r3, r3
 802f5c2:	b21a      	sxth	r2, r3
 802f5c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 802f5c6:	861a      	strh	r2, [r3, #48]	; 0x30
        }

        if (pcb->rtime >= pcb->rto) {
 802f5c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 802f5ca:	f9b3 2030 	ldrsh.w	r2, [r3, #48]	; 0x30
 802f5ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 802f5d0:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 802f5d4:	429a      	cmp	r2, r3
 802f5d6:	db7b      	blt.n	802f6d0 <tcp_slowtmr+0x2f8>
                                      " pcb->rto %"S16_F"\n",
                                      pcb->rtime, pcb->rto));
          /* If prepare phase fails but we have unsent data but no unacked data,
             still execute the backoff calculations below, as this means we somehow
             failed to send segment. */
          if ((tcp_rexmit_rto_prepare(pcb) == ERR_OK) || ((pcb->unacked == NULL) && (pcb->unsent != NULL))) {
 802f5d8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 802f5da:	f004 fe1f 	bl	803421c <tcp_rexmit_rto_prepare>
 802f5de:	4603      	mov	r3, r0
 802f5e0:	2b00      	cmp	r3, #0
 802f5e2:	d007      	beq.n	802f5f4 <tcp_slowtmr+0x21c>
 802f5e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 802f5e6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 802f5e8:	2b00      	cmp	r3, #0
 802f5ea:	d171      	bne.n	802f6d0 <tcp_slowtmr+0x2f8>
 802f5ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 802f5ee:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 802f5f0:	2b00      	cmp	r3, #0
 802f5f2:	d06d      	beq.n	802f6d0 <tcp_slowtmr+0x2f8>
            /* Double retransmission time-out unless we are trying to
             * connect to somebody (i.e., we are in SYN_SENT). */
            if (pcb->state != SYN_SENT) {
 802f5f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 802f5f6:	7d1b      	ldrb	r3, [r3, #20]
 802f5f8:	2b02      	cmp	r3, #2
 802f5fa:	d03a      	beq.n	802f672 <tcp_slowtmr+0x29a>
              u8_t backoff_idx = LWIP_MIN(pcb->nrtx, sizeof(tcp_backoff) - 1);
 802f5fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 802f5fe:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 802f602:	2b0c      	cmp	r3, #12
 802f604:	bf28      	it	cs
 802f606:	230c      	movcs	r3, #12
 802f608:	76fb      	strb	r3, [r7, #27]
              int calc_rto = ((pcb->sa >> 3) + pcb->sv) << tcp_backoff[backoff_idx];
 802f60a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 802f60c:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 802f610:	10db      	asrs	r3, r3, #3
 802f612:	b21b      	sxth	r3, r3
 802f614:	461a      	mov	r2, r3
 802f616:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 802f618:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 802f61c:	4413      	add	r3, r2
 802f61e:	7efa      	ldrb	r2, [r7, #27]
 802f620:	4910      	ldr	r1, [pc, #64]	; (802f664 <tcp_slowtmr+0x28c>)
 802f622:	5c8a      	ldrb	r2, [r1, r2]
 802f624:	4093      	lsls	r3, r2
 802f626:	617b      	str	r3, [r7, #20]
              pcb->rto = (s16_t)LWIP_MIN(calc_rto, 0x7FFF);
 802f628:	697b      	ldr	r3, [r7, #20]
 802f62a:	f647 72fe 	movw	r2, #32766	; 0x7ffe
 802f62e:	4293      	cmp	r3, r2
 802f630:	dc1a      	bgt.n	802f668 <tcp_slowtmr+0x290>
 802f632:	697b      	ldr	r3, [r7, #20]
 802f634:	b21a      	sxth	r2, r3
 802f636:	e019      	b.n	802f66c <tcp_slowtmr+0x294>
 802f638:	2000ef00 	.word	0x2000ef00
 802f63c:	2000ef16 	.word	0x2000ef16
 802f640:	2000ef0c 	.word	0x2000ef0c
 802f644:	0803b540 	.word	0x0803b540
 802f648:	0803b884 	.word	0x0803b884
 802f64c:	0803b584 	.word	0x0803b584
 802f650:	0803b8b0 	.word	0x0803b8b0
 802f654:	0803b8dc 	.word	0x0803b8dc
 802f658:	0803b90c 	.word	0x0803b90c
 802f65c:	0803b940 	.word	0x0803b940
 802f660:	0803d5fc 	.word	0x0803d5fc
 802f664:	0803d5ec 	.word	0x0803d5ec
 802f668:	f647 72ff 	movw	r2, #32767	; 0x7fff
 802f66c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 802f66e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
            }

            /* Reset the retransmission timer. */
            pcb->rtime = 0;
 802f672:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 802f674:	2200      	movs	r2, #0
 802f676:	861a      	strh	r2, [r3, #48]	; 0x30

            /* Reduce congestion window and ssthresh. */
            eff_wnd = LWIP_MIN(pcb->cwnd, pcb->snd_wnd);
 802f678:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 802f67a:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 802f67e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 802f680:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 802f684:	4293      	cmp	r3, r2
 802f686:	bf28      	it	cs
 802f688:	4613      	movcs	r3, r2
 802f68a:	827b      	strh	r3, [r7, #18]
            pcb->ssthresh = eff_wnd >> 1;
 802f68c:	8a7b      	ldrh	r3, [r7, #18]
 802f68e:	085b      	lsrs	r3, r3, #1
 802f690:	b29a      	uxth	r2, r3
 802f692:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 802f694:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
            if (pcb->ssthresh < (tcpwnd_size_t)(pcb->mss << 1)) {
 802f698:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 802f69a:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 802f69e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 802f6a0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 802f6a2:	005b      	lsls	r3, r3, #1
 802f6a4:	b29b      	uxth	r3, r3
 802f6a6:	429a      	cmp	r2, r3
 802f6a8:	d206      	bcs.n	802f6b8 <tcp_slowtmr+0x2e0>
              pcb->ssthresh = (tcpwnd_size_t)(pcb->mss << 1);
 802f6aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 802f6ac:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 802f6ae:	005b      	lsls	r3, r3, #1
 802f6b0:	b29a      	uxth	r2, r3
 802f6b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 802f6b4:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
            }
            pcb->cwnd = pcb->mss;
 802f6b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 802f6ba:	8e5a      	ldrh	r2, [r3, #50]	; 0x32
 802f6bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 802f6be:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
            LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: cwnd %"TCPWNDSIZE_F
                                         " ssthresh %"TCPWNDSIZE_F"\n",
                                         pcb->cwnd, pcb->ssthresh));
            pcb->bytes_acked = 0;
 802f6c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 802f6c4:	2200      	movs	r2, #0
 802f6c6:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

            /* The following needs to be called AFTER cwnd is set to one
               mss - STJ */
            tcp_rexmit_rto_commit(pcb);
 802f6ca:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 802f6cc:	f004 fe16 	bl	80342fc <tcp_rexmit_rto_commit>
          }
        }
      }
    }
    /* Check if this PCB has stayed too long in FIN-WAIT-2 */
    if (pcb->state == FIN_WAIT_2) {
 802f6d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 802f6d2:	7d1b      	ldrb	r3, [r3, #20]
 802f6d4:	2b06      	cmp	r3, #6
 802f6d6:	d111      	bne.n	802f6fc <tcp_slowtmr+0x324>
      /* If this PCB is in FIN_WAIT_2 because of SHUT_WR don't let it time out. */
      if (pcb->flags & TF_RXCLOSED) {
 802f6d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 802f6da:	8b5b      	ldrh	r3, [r3, #26]
 802f6dc:	f003 0310 	and.w	r3, r3, #16
 802f6e0:	2b00      	cmp	r3, #0
 802f6e2:	d00b      	beq.n	802f6fc <tcp_slowtmr+0x324>
        /* PCB was fully closed (either through close() or SHUT_RDWR):
           normal FIN-WAIT timeout handling. */
        if ((u32_t)(tcp_ticks - pcb->tmr) >
 802f6e4:	4b9d      	ldr	r3, [pc, #628]	; (802f95c <tcp_slowtmr+0x584>)
 802f6e6:	681a      	ldr	r2, [r3, #0]
 802f6e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 802f6ea:	6a1b      	ldr	r3, [r3, #32]
 802f6ec:	1ad3      	subs	r3, r2, r3
 802f6ee:	2b28      	cmp	r3, #40	; 0x28
 802f6f0:	d904      	bls.n	802f6fc <tcp_slowtmr+0x324>
            TCP_FIN_WAIT_TIMEOUT / TCP_SLOW_INTERVAL) {
          ++pcb_remove;
 802f6f2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 802f6f6:	3301      	adds	r3, #1
 802f6f8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        }
      }
    }

    /* Check if KEEPALIVE should be sent */
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 802f6fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 802f6fe:	7a5b      	ldrb	r3, [r3, #9]
 802f700:	f003 0308 	and.w	r3, r3, #8
 802f704:	2b00      	cmp	r3, #0
 802f706:	d04c      	beq.n	802f7a2 <tcp_slowtmr+0x3ca>
        ((pcb->state == ESTABLISHED) ||
 802f708:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 802f70a:	7d1b      	ldrb	r3, [r3, #20]
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 802f70c:	2b04      	cmp	r3, #4
 802f70e:	d003      	beq.n	802f718 <tcp_slowtmr+0x340>
         (pcb->state == CLOSE_WAIT))) {
 802f710:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 802f712:	7d1b      	ldrb	r3, [r3, #20]
        ((pcb->state == ESTABLISHED) ||
 802f714:	2b07      	cmp	r3, #7
 802f716:	d144      	bne.n	802f7a2 <tcp_slowtmr+0x3ca>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 802f718:	4b90      	ldr	r3, [pc, #576]	; (802f95c <tcp_slowtmr+0x584>)
 802f71a:	681a      	ldr	r2, [r3, #0]
 802f71c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 802f71e:	6a1b      	ldr	r3, [r3, #32]
 802f720:	1ad2      	subs	r2, r2, r3
          (pcb->keep_idle + TCP_KEEP_DUR(pcb)) / TCP_SLOW_INTERVAL) {
 802f722:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 802f724:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 802f728:	f503 2324 	add.w	r3, r3, #671744	; 0xa4000
 802f72c:	f603 43b8 	addw	r3, r3, #3256	; 0xcb8
 802f730:	498b      	ldr	r1, [pc, #556]	; (802f960 <tcp_slowtmr+0x588>)
 802f732:	fba1 1303 	umull	r1, r3, r1, r3
 802f736:	095b      	lsrs	r3, r3, #5
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 802f738:	429a      	cmp	r2, r3
 802f73a:	d90a      	bls.n	802f752 <tcp_slowtmr+0x37a>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: KEEPALIVE timeout. Aborting connection to "));
        ip_addr_debug_print_val(TCP_DEBUG, pcb->remote_ip);
        LWIP_DEBUGF(TCP_DEBUG, ("\n"));

        ++pcb_remove;
 802f73c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 802f740:	3301      	adds	r3, #1
 802f742:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        ++pcb_reset;
 802f746:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 802f74a:	3301      	adds	r3, #1
 802f74c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 802f750:	e027      	b.n	802f7a2 <tcp_slowtmr+0x3ca>
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 802f752:	4b82      	ldr	r3, [pc, #520]	; (802f95c <tcp_slowtmr+0x584>)
 802f754:	681a      	ldr	r2, [r3, #0]
 802f756:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 802f758:	6a1b      	ldr	r3, [r3, #32]
 802f75a:	1ad2      	subs	r2, r2, r3
                 (pcb->keep_idle + pcb->keep_cnt_sent * TCP_KEEP_INTVL(pcb))
 802f75c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 802f75e:	f8d3 1094 	ldr.w	r1, [r3, #148]	; 0x94
 802f762:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 802f764:	f893 309b 	ldrb.w	r3, [r3, #155]	; 0x9b
 802f768:	4618      	mov	r0, r3
 802f76a:	4b7e      	ldr	r3, [pc, #504]	; (802f964 <tcp_slowtmr+0x58c>)
 802f76c:	fb00 f303 	mul.w	r3, r0, r3
 802f770:	440b      	add	r3, r1
                 / TCP_SLOW_INTERVAL) {
 802f772:	497b      	ldr	r1, [pc, #492]	; (802f960 <tcp_slowtmr+0x588>)
 802f774:	fba1 1303 	umull	r1, r3, r1, r3
 802f778:	095b      	lsrs	r3, r3, #5
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 802f77a:	429a      	cmp	r2, r3
 802f77c:	d911      	bls.n	802f7a2 <tcp_slowtmr+0x3ca>
        err = tcp_keepalive(pcb);
 802f77e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 802f780:	f005 f8cc 	bl	803491c <tcp_keepalive>
 802f784:	4603      	mov	r3, r0
 802f786:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        if (err == ERR_OK) {
 802f78a:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 802f78e:	2b00      	cmp	r3, #0
 802f790:	d107      	bne.n	802f7a2 <tcp_slowtmr+0x3ca>
          pcb->keep_cnt_sent++;
 802f792:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 802f794:	f893 309b 	ldrb.w	r3, [r3, #155]	; 0x9b
 802f798:	3301      	adds	r3, #1
 802f79a:	b2da      	uxtb	r2, r3
 802f79c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 802f79e:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b

    /* If this PCB has queued out of sequence data, but has been
       inactive for too long, will drop the data (it will eventually
       be retransmitted). */
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL &&
 802f7a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 802f7a4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 802f7a6:	2b00      	cmp	r3, #0
 802f7a8:	d011      	beq.n	802f7ce <tcp_slowtmr+0x3f6>
        (tcp_ticks - pcb->tmr >= (u32_t)pcb->rto * TCP_OOSEQ_TIMEOUT)) {
 802f7aa:	4b6c      	ldr	r3, [pc, #432]	; (802f95c <tcp_slowtmr+0x584>)
 802f7ac:	681a      	ldr	r2, [r3, #0]
 802f7ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 802f7b0:	6a1b      	ldr	r3, [r3, #32]
 802f7b2:	1ad2      	subs	r2, r2, r3
 802f7b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 802f7b6:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 802f7ba:	4619      	mov	r1, r3
 802f7bc:	460b      	mov	r3, r1
 802f7be:	005b      	lsls	r3, r3, #1
 802f7c0:	440b      	add	r3, r1
 802f7c2:	005b      	lsls	r3, r3, #1
    if (pcb->ooseq != NULL &&
 802f7c4:	429a      	cmp	r2, r3
 802f7c6:	d302      	bcc.n	802f7ce <tcp_slowtmr+0x3f6>
      LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: dropping OOSEQ queued data\n"));
      tcp_free_ooseq(pcb);
 802f7c8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 802f7ca:	f000 fed3 	bl	8030574 <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Check if this PCB has stayed too long in SYN-RCVD */
    if (pcb->state == SYN_RCVD) {
 802f7ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 802f7d0:	7d1b      	ldrb	r3, [r3, #20]
 802f7d2:	2b03      	cmp	r3, #3
 802f7d4:	d10b      	bne.n	802f7ee <tcp_slowtmr+0x416>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 802f7d6:	4b61      	ldr	r3, [pc, #388]	; (802f95c <tcp_slowtmr+0x584>)
 802f7d8:	681a      	ldr	r2, [r3, #0]
 802f7da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 802f7dc:	6a1b      	ldr	r3, [r3, #32]
 802f7de:	1ad3      	subs	r3, r2, r3
 802f7e0:	2b28      	cmp	r3, #40	; 0x28
 802f7e2:	d904      	bls.n	802f7ee <tcp_slowtmr+0x416>
          TCP_SYN_RCVD_TIMEOUT / TCP_SLOW_INTERVAL) {
        ++pcb_remove;
 802f7e4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 802f7e8:	3301      	adds	r3, #1
 802f7ea:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in SYN-RCVD\n"));
      }
    }

    /* Check if this PCB has stayed too long in LAST-ACK */
    if (pcb->state == LAST_ACK) {
 802f7ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 802f7f0:	7d1b      	ldrb	r3, [r3, #20]
 802f7f2:	2b09      	cmp	r3, #9
 802f7f4:	d10b      	bne.n	802f80e <tcp_slowtmr+0x436>
      if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 802f7f6:	4b59      	ldr	r3, [pc, #356]	; (802f95c <tcp_slowtmr+0x584>)
 802f7f8:	681a      	ldr	r2, [r3, #0]
 802f7fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 802f7fc:	6a1b      	ldr	r3, [r3, #32]
 802f7fe:	1ad3      	subs	r3, r2, r3
 802f800:	2bf0      	cmp	r3, #240	; 0xf0
 802f802:	d904      	bls.n	802f80e <tcp_slowtmr+0x436>
        ++pcb_remove;
 802f804:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 802f808:	3301      	adds	r3, #1
 802f80a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in LAST-ACK\n"));
      }
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 802f80e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 802f812:	2b00      	cmp	r3, #0
 802f814:	d060      	beq.n	802f8d8 <tcp_slowtmr+0x500>
      struct tcp_pcb *pcb2;
#if LWIP_CALLBACK_API
      tcp_err_fn err_fn = pcb->errf;
 802f816:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 802f818:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 802f81c:	60fb      	str	r3, [r7, #12]
#endif /* LWIP_CALLBACK_API */
      void *err_arg;
      enum tcp_state last_state;
      tcp_pcb_purge(pcb);
 802f81e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 802f820:	f000 fcf4 	bl	803020c <tcp_pcb_purge>
      /* Remove PCB from tcp_active_pcbs list. */
      if (prev != NULL) {
 802f824:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802f826:	2b00      	cmp	r3, #0
 802f828:	d010      	beq.n	802f84c <tcp_slowtmr+0x474>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_active_pcbs", pcb != tcp_active_pcbs);
 802f82a:	4b4f      	ldr	r3, [pc, #316]	; (802f968 <tcp_slowtmr+0x590>)
 802f82c:	681b      	ldr	r3, [r3, #0]
 802f82e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 802f830:	429a      	cmp	r2, r3
 802f832:	d106      	bne.n	802f842 <tcp_slowtmr+0x46a>
 802f834:	4b4d      	ldr	r3, [pc, #308]	; (802f96c <tcp_slowtmr+0x594>)
 802f836:	f240 526d 	movw	r2, #1389	; 0x56d
 802f83a:	494d      	ldr	r1, [pc, #308]	; (802f970 <tcp_slowtmr+0x598>)
 802f83c:	484d      	ldr	r0, [pc, #308]	; (802f974 <tcp_slowtmr+0x59c>)
 802f83e:	f009 fc13 	bl	8039068 <iprintf>
        prev->next = pcb->next;
 802f842:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 802f844:	68da      	ldr	r2, [r3, #12]
 802f846:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802f848:	60da      	str	r2, [r3, #12]
 802f84a:	e00f      	b.n	802f86c <tcp_slowtmr+0x494>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_active_pcbs", tcp_active_pcbs == pcb);
 802f84c:	4b46      	ldr	r3, [pc, #280]	; (802f968 <tcp_slowtmr+0x590>)
 802f84e:	681b      	ldr	r3, [r3, #0]
 802f850:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 802f852:	429a      	cmp	r2, r3
 802f854:	d006      	beq.n	802f864 <tcp_slowtmr+0x48c>
 802f856:	4b45      	ldr	r3, [pc, #276]	; (802f96c <tcp_slowtmr+0x594>)
 802f858:	f240 5271 	movw	r2, #1393	; 0x571
 802f85c:	4946      	ldr	r1, [pc, #280]	; (802f978 <tcp_slowtmr+0x5a0>)
 802f85e:	4845      	ldr	r0, [pc, #276]	; (802f974 <tcp_slowtmr+0x59c>)
 802f860:	f009 fc02 	bl	8039068 <iprintf>
        tcp_active_pcbs = pcb->next;
 802f864:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 802f866:	68db      	ldr	r3, [r3, #12]
 802f868:	4a3f      	ldr	r2, [pc, #252]	; (802f968 <tcp_slowtmr+0x590>)
 802f86a:	6013      	str	r3, [r2, #0]
      }

      if (pcb_reset) {
 802f86c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 802f870:	2b00      	cmp	r3, #0
 802f872:	d013      	beq.n	802f89c <tcp_slowtmr+0x4c4>
        tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 802f874:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 802f876:	6d18      	ldr	r0, [r3, #80]	; 0x50
 802f878:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 802f87a:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 802f87c:	6afd      	ldr	r5, [r7, #44]	; 0x2c
 802f87e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 802f880:	3304      	adds	r3, #4
 802f882:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 802f884:	8ad2      	ldrh	r2, [r2, #22]
 802f886:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 802f888:	8b09      	ldrh	r1, [r1, #24]
 802f88a:	9102      	str	r1, [sp, #8]
 802f88c:	9201      	str	r2, [sp, #4]
 802f88e:	9300      	str	r3, [sp, #0]
 802f890:	462b      	mov	r3, r5
 802f892:	4622      	mov	r2, r4
 802f894:	4601      	mov	r1, r0
 802f896:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 802f898:	f004 ff8c 	bl	80347b4 <tcp_rst>
                pcb->local_port, pcb->remote_port);
      }

      err_arg = pcb->callback_arg;
 802f89c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 802f89e:	691b      	ldr	r3, [r3, #16]
 802f8a0:	60bb      	str	r3, [r7, #8]
      last_state = pcb->state;
 802f8a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 802f8a4:	7d1b      	ldrb	r3, [r3, #20]
 802f8a6:	71fb      	strb	r3, [r7, #7]
      pcb2 = pcb;
 802f8a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 802f8aa:	603b      	str	r3, [r7, #0]
      pcb = pcb->next;
 802f8ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 802f8ae:	68db      	ldr	r3, [r3, #12]
 802f8b0:	62fb      	str	r3, [r7, #44]	; 0x2c
      tcp_free(pcb2);
 802f8b2:	6838      	ldr	r0, [r7, #0]
 802f8b4:	f7fe ffee 	bl	802e894 <tcp_free>

      tcp_active_pcbs_changed = 0;
 802f8b8:	4b30      	ldr	r3, [pc, #192]	; (802f97c <tcp_slowtmr+0x5a4>)
 802f8ba:	2200      	movs	r2, #0
 802f8bc:	701a      	strb	r2, [r3, #0]
      TCP_EVENT_ERR(last_state, err_fn, err_arg, ERR_ABRT);
 802f8be:	68fb      	ldr	r3, [r7, #12]
 802f8c0:	2b00      	cmp	r3, #0
 802f8c2:	d004      	beq.n	802f8ce <tcp_slowtmr+0x4f6>
 802f8c4:	68fb      	ldr	r3, [r7, #12]
 802f8c6:	f06f 010c 	mvn.w	r1, #12
 802f8ca:	68b8      	ldr	r0, [r7, #8]
 802f8cc:	4798      	blx	r3
      if (tcp_active_pcbs_changed) {
 802f8ce:	4b2b      	ldr	r3, [pc, #172]	; (802f97c <tcp_slowtmr+0x5a4>)
 802f8d0:	781b      	ldrb	r3, [r3, #0]
 802f8d2:	2b00      	cmp	r3, #0
 802f8d4:	d037      	beq.n	802f946 <tcp_slowtmr+0x56e>
        goto tcp_slowtmr_start;
 802f8d6:	e590      	b.n	802f3fa <tcp_slowtmr+0x22>
      }
    } else {
      /* get the 'next' element now and work with 'prev' below (in case of abort) */
      prev = pcb;
 802f8d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 802f8da:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 802f8dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 802f8de:	68db      	ldr	r3, [r3, #12]
 802f8e0:	62fb      	str	r3, [r7, #44]	; 0x2c

      /* We check if we should poll the connection. */
      ++prev->polltmr;
 802f8e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802f8e4:	7f1b      	ldrb	r3, [r3, #28]
 802f8e6:	3301      	adds	r3, #1
 802f8e8:	b2da      	uxtb	r2, r3
 802f8ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802f8ec:	771a      	strb	r2, [r3, #28]
      if (prev->polltmr >= prev->pollinterval) {
 802f8ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802f8f0:	7f1a      	ldrb	r2, [r3, #28]
 802f8f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802f8f4:	7f5b      	ldrb	r3, [r3, #29]
 802f8f6:	429a      	cmp	r2, r3
 802f8f8:	d325      	bcc.n	802f946 <tcp_slowtmr+0x56e>
        prev->polltmr = 0;
 802f8fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802f8fc:	2200      	movs	r2, #0
 802f8fe:	771a      	strb	r2, [r3, #28]
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: polling application\n"));
        tcp_active_pcbs_changed = 0;
 802f900:	4b1e      	ldr	r3, [pc, #120]	; (802f97c <tcp_slowtmr+0x5a4>)
 802f902:	2200      	movs	r2, #0
 802f904:	701a      	strb	r2, [r3, #0]
        TCP_EVENT_POLL(prev, err);
 802f906:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802f908:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 802f90c:	2b00      	cmp	r3, #0
 802f90e:	d00b      	beq.n	802f928 <tcp_slowtmr+0x550>
 802f910:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802f912:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 802f916:	6aba      	ldr	r2, [r7, #40]	; 0x28
 802f918:	6912      	ldr	r2, [r2, #16]
 802f91a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 802f91c:	4610      	mov	r0, r2
 802f91e:	4798      	blx	r3
 802f920:	4603      	mov	r3, r0
 802f922:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 802f926:	e002      	b.n	802f92e <tcp_slowtmr+0x556>
 802f928:	2300      	movs	r3, #0
 802f92a:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        if (tcp_active_pcbs_changed) {
 802f92e:	4b13      	ldr	r3, [pc, #76]	; (802f97c <tcp_slowtmr+0x5a4>)
 802f930:	781b      	ldrb	r3, [r3, #0]
 802f932:	2b00      	cmp	r3, #0
 802f934:	d000      	beq.n	802f938 <tcp_slowtmr+0x560>
          goto tcp_slowtmr_start;
 802f936:	e560      	b.n	802f3fa <tcp_slowtmr+0x22>
        }
        /* if err == ERR_ABRT, 'prev' is already deallocated */
        if (err == ERR_OK) {
 802f938:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 802f93c:	2b00      	cmp	r3, #0
 802f93e:	d102      	bne.n	802f946 <tcp_slowtmr+0x56e>
          tcp_output(prev);
 802f940:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 802f942:	f004 f96f 	bl	8033c24 <tcp_output>
  while (pcb != NULL) {
 802f946:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 802f948:	2b00      	cmp	r3, #0
 802f94a:	f47f ad5c 	bne.w	802f406 <tcp_slowtmr+0x2e>
    }
  }


  /* Steps through all of the TIME-WAIT PCBs. */
  prev = NULL;
 802f94e:	2300      	movs	r3, #0
 802f950:	62bb      	str	r3, [r7, #40]	; 0x28
  pcb = tcp_tw_pcbs;
 802f952:	4b0b      	ldr	r3, [pc, #44]	; (802f980 <tcp_slowtmr+0x5a8>)
 802f954:	681b      	ldr	r3, [r3, #0]
 802f956:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (pcb != NULL) {
 802f958:	e067      	b.n	802fa2a <tcp_slowtmr+0x652>
 802f95a:	bf00      	nop
 802f95c:	2000ef00 	.word	0x2000ef00
 802f960:	10624dd3 	.word	0x10624dd3
 802f964:	000124f8 	.word	0x000124f8
 802f968:	2000ef0c 	.word	0x2000ef0c
 802f96c:	0803b540 	.word	0x0803b540
 802f970:	0803b978 	.word	0x0803b978
 802f974:	0803b584 	.word	0x0803b584
 802f978:	0803b9a4 	.word	0x0803b9a4
 802f97c:	2000ef14 	.word	0x2000ef14
 802f980:	2000ef10 	.word	0x2000ef10
    LWIP_ASSERT("tcp_slowtmr: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 802f984:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 802f986:	7d1b      	ldrb	r3, [r3, #20]
 802f988:	2b0a      	cmp	r3, #10
 802f98a:	d006      	beq.n	802f99a <tcp_slowtmr+0x5c2>
 802f98c:	4b2b      	ldr	r3, [pc, #172]	; (802fa3c <tcp_slowtmr+0x664>)
 802f98e:	f240 52a1 	movw	r2, #1441	; 0x5a1
 802f992:	492b      	ldr	r1, [pc, #172]	; (802fa40 <tcp_slowtmr+0x668>)
 802f994:	482b      	ldr	r0, [pc, #172]	; (802fa44 <tcp_slowtmr+0x66c>)
 802f996:	f009 fb67 	bl	8039068 <iprintf>
    pcb_remove = 0;
 802f99a:	2300      	movs	r3, #0
 802f99c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

    /* Check if this PCB has stayed long enough in TIME-WAIT */
    if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 802f9a0:	4b29      	ldr	r3, [pc, #164]	; (802fa48 <tcp_slowtmr+0x670>)
 802f9a2:	681a      	ldr	r2, [r3, #0]
 802f9a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 802f9a6:	6a1b      	ldr	r3, [r3, #32]
 802f9a8:	1ad3      	subs	r3, r2, r3
 802f9aa:	2bf0      	cmp	r3, #240	; 0xf0
 802f9ac:	d904      	bls.n	802f9b8 <tcp_slowtmr+0x5e0>
      ++pcb_remove;
 802f9ae:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 802f9b2:	3301      	adds	r3, #1
 802f9b4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 802f9b8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 802f9bc:	2b00      	cmp	r3, #0
 802f9be:	d02f      	beq.n	802fa20 <tcp_slowtmr+0x648>
      struct tcp_pcb *pcb2;
      tcp_pcb_purge(pcb);
 802f9c0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 802f9c2:	f000 fc23 	bl	803020c <tcp_pcb_purge>
      /* Remove PCB from tcp_tw_pcbs list. */
      if (prev != NULL) {
 802f9c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802f9c8:	2b00      	cmp	r3, #0
 802f9ca:	d010      	beq.n	802f9ee <tcp_slowtmr+0x616>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_tw_pcbs", pcb != tcp_tw_pcbs);
 802f9cc:	4b1f      	ldr	r3, [pc, #124]	; (802fa4c <tcp_slowtmr+0x674>)
 802f9ce:	681b      	ldr	r3, [r3, #0]
 802f9d0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 802f9d2:	429a      	cmp	r2, r3
 802f9d4:	d106      	bne.n	802f9e4 <tcp_slowtmr+0x60c>
 802f9d6:	4b19      	ldr	r3, [pc, #100]	; (802fa3c <tcp_slowtmr+0x664>)
 802f9d8:	f240 52af 	movw	r2, #1455	; 0x5af
 802f9dc:	491c      	ldr	r1, [pc, #112]	; (802fa50 <tcp_slowtmr+0x678>)
 802f9de:	4819      	ldr	r0, [pc, #100]	; (802fa44 <tcp_slowtmr+0x66c>)
 802f9e0:	f009 fb42 	bl	8039068 <iprintf>
        prev->next = pcb->next;
 802f9e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 802f9e6:	68da      	ldr	r2, [r3, #12]
 802f9e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802f9ea:	60da      	str	r2, [r3, #12]
 802f9ec:	e00f      	b.n	802fa0e <tcp_slowtmr+0x636>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_tw_pcbs", tcp_tw_pcbs == pcb);
 802f9ee:	4b17      	ldr	r3, [pc, #92]	; (802fa4c <tcp_slowtmr+0x674>)
 802f9f0:	681b      	ldr	r3, [r3, #0]
 802f9f2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 802f9f4:	429a      	cmp	r2, r3
 802f9f6:	d006      	beq.n	802fa06 <tcp_slowtmr+0x62e>
 802f9f8:	4b10      	ldr	r3, [pc, #64]	; (802fa3c <tcp_slowtmr+0x664>)
 802f9fa:	f240 52b3 	movw	r2, #1459	; 0x5b3
 802f9fe:	4915      	ldr	r1, [pc, #84]	; (802fa54 <tcp_slowtmr+0x67c>)
 802fa00:	4810      	ldr	r0, [pc, #64]	; (802fa44 <tcp_slowtmr+0x66c>)
 802fa02:	f009 fb31 	bl	8039068 <iprintf>
        tcp_tw_pcbs = pcb->next;
 802fa06:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 802fa08:	68db      	ldr	r3, [r3, #12]
 802fa0a:	4a10      	ldr	r2, [pc, #64]	; (802fa4c <tcp_slowtmr+0x674>)
 802fa0c:	6013      	str	r3, [r2, #0]
      }
      pcb2 = pcb;
 802fa0e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 802fa10:	61fb      	str	r3, [r7, #28]
      pcb = pcb->next;
 802fa12:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 802fa14:	68db      	ldr	r3, [r3, #12]
 802fa16:	62fb      	str	r3, [r7, #44]	; 0x2c
      tcp_free(pcb2);
 802fa18:	69f8      	ldr	r0, [r7, #28]
 802fa1a:	f7fe ff3b 	bl	802e894 <tcp_free>
 802fa1e:	e004      	b.n	802fa2a <tcp_slowtmr+0x652>
    } else {
      prev = pcb;
 802fa20:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 802fa22:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 802fa24:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 802fa26:	68db      	ldr	r3, [r3, #12]
 802fa28:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (pcb != NULL) {
 802fa2a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 802fa2c:	2b00      	cmp	r3, #0
 802fa2e:	d1a9      	bne.n	802f984 <tcp_slowtmr+0x5ac>
    }
  }
}
 802fa30:	bf00      	nop
 802fa32:	bf00      	nop
 802fa34:	3730      	adds	r7, #48	; 0x30
 802fa36:	46bd      	mov	sp, r7
 802fa38:	bdb0      	pop	{r4, r5, r7, pc}
 802fa3a:	bf00      	nop
 802fa3c:	0803b540 	.word	0x0803b540
 802fa40:	0803b9d0 	.word	0x0803b9d0
 802fa44:	0803b584 	.word	0x0803b584
 802fa48:	2000ef00 	.word	0x2000ef00
 802fa4c:	2000ef10 	.word	0x2000ef10
 802fa50:	0803ba00 	.word	0x0803ba00
 802fa54:	0803ba28 	.word	0x0803ba28

0802fa58 <tcp_fasttmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_fasttmr(void)
{
 802fa58:	b580      	push	{r7, lr}
 802fa5a:	b082      	sub	sp, #8
 802fa5c:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;

  ++tcp_timer_ctr;
 802fa5e:	4b2d      	ldr	r3, [pc, #180]	; (802fb14 <tcp_fasttmr+0xbc>)
 802fa60:	781b      	ldrb	r3, [r3, #0]
 802fa62:	3301      	adds	r3, #1
 802fa64:	b2da      	uxtb	r2, r3
 802fa66:	4b2b      	ldr	r3, [pc, #172]	; (802fb14 <tcp_fasttmr+0xbc>)
 802fa68:	701a      	strb	r2, [r3, #0]

tcp_fasttmr_start:
  pcb = tcp_active_pcbs;
 802fa6a:	4b2b      	ldr	r3, [pc, #172]	; (802fb18 <tcp_fasttmr+0xc0>)
 802fa6c:	681b      	ldr	r3, [r3, #0]
 802fa6e:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 802fa70:	e048      	b.n	802fb04 <tcp_fasttmr+0xac>
    if (pcb->last_timer != tcp_timer_ctr) {
 802fa72:	687b      	ldr	r3, [r7, #4]
 802fa74:	7f9a      	ldrb	r2, [r3, #30]
 802fa76:	4b27      	ldr	r3, [pc, #156]	; (802fb14 <tcp_fasttmr+0xbc>)
 802fa78:	781b      	ldrb	r3, [r3, #0]
 802fa7a:	429a      	cmp	r2, r3
 802fa7c:	d03f      	beq.n	802fafe <tcp_fasttmr+0xa6>
      struct tcp_pcb *next;
      pcb->last_timer = tcp_timer_ctr;
 802fa7e:	4b25      	ldr	r3, [pc, #148]	; (802fb14 <tcp_fasttmr+0xbc>)
 802fa80:	781a      	ldrb	r2, [r3, #0]
 802fa82:	687b      	ldr	r3, [r7, #4]
 802fa84:	779a      	strb	r2, [r3, #30]
      /* send delayed ACKs */
      if (pcb->flags & TF_ACK_DELAY) {
 802fa86:	687b      	ldr	r3, [r7, #4]
 802fa88:	8b5b      	ldrh	r3, [r3, #26]
 802fa8a:	f003 0301 	and.w	r3, r3, #1
 802fa8e:	2b00      	cmp	r3, #0
 802fa90:	d010      	beq.n	802fab4 <tcp_fasttmr+0x5c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: delayed ACK\n"));
        tcp_ack_now(pcb);
 802fa92:	687b      	ldr	r3, [r7, #4]
 802fa94:	8b5b      	ldrh	r3, [r3, #26]
 802fa96:	f043 0302 	orr.w	r3, r3, #2
 802fa9a:	b29a      	uxth	r2, r3
 802fa9c:	687b      	ldr	r3, [r7, #4]
 802fa9e:	835a      	strh	r2, [r3, #26]
        tcp_output(pcb);
 802faa0:	6878      	ldr	r0, [r7, #4]
 802faa2:	f004 f8bf 	bl	8033c24 <tcp_output>
        tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 802faa6:	687b      	ldr	r3, [r7, #4]
 802faa8:	8b5b      	ldrh	r3, [r3, #26]
 802faaa:	f023 0303 	bic.w	r3, r3, #3
 802faae:	b29a      	uxth	r2, r3
 802fab0:	687b      	ldr	r3, [r7, #4]
 802fab2:	835a      	strh	r2, [r3, #26]
      }
      /* send pending FIN */
      if (pcb->flags & TF_CLOSEPEND) {
 802fab4:	687b      	ldr	r3, [r7, #4]
 802fab6:	8b5b      	ldrh	r3, [r3, #26]
 802fab8:	f003 0308 	and.w	r3, r3, #8
 802fabc:	2b00      	cmp	r3, #0
 802fabe:	d009      	beq.n	802fad4 <tcp_fasttmr+0x7c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: pending FIN\n"));
        tcp_clear_flags(pcb, TF_CLOSEPEND);
 802fac0:	687b      	ldr	r3, [r7, #4]
 802fac2:	8b5b      	ldrh	r3, [r3, #26]
 802fac4:	f023 0308 	bic.w	r3, r3, #8
 802fac8:	b29a      	uxth	r2, r3
 802faca:	687b      	ldr	r3, [r7, #4]
 802facc:	835a      	strh	r2, [r3, #26]
        tcp_close_shutdown_fin(pcb);
 802face:	6878      	ldr	r0, [r7, #4]
 802fad0:	f7ff f874 	bl	802ebbc <tcp_close_shutdown_fin>
      }

      next = pcb->next;
 802fad4:	687b      	ldr	r3, [r7, #4]
 802fad6:	68db      	ldr	r3, [r3, #12]
 802fad8:	603b      	str	r3, [r7, #0]

      /* If there is data which was previously "refused" by upper layer */
      if (pcb->refused_data != NULL) {
 802fada:	687b      	ldr	r3, [r7, #4]
 802fadc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 802fade:	2b00      	cmp	r3, #0
 802fae0:	d00a      	beq.n	802faf8 <tcp_fasttmr+0xa0>
        tcp_active_pcbs_changed = 0;
 802fae2:	4b0e      	ldr	r3, [pc, #56]	; (802fb1c <tcp_fasttmr+0xc4>)
 802fae4:	2200      	movs	r2, #0
 802fae6:	701a      	strb	r2, [r3, #0]
        tcp_process_refused_data(pcb);
 802fae8:	6878      	ldr	r0, [r7, #4]
 802faea:	f000 f819 	bl	802fb20 <tcp_process_refused_data>
        if (tcp_active_pcbs_changed) {
 802faee:	4b0b      	ldr	r3, [pc, #44]	; (802fb1c <tcp_fasttmr+0xc4>)
 802faf0:	781b      	ldrb	r3, [r3, #0]
 802faf2:	2b00      	cmp	r3, #0
 802faf4:	d000      	beq.n	802faf8 <tcp_fasttmr+0xa0>
          /* application callback has changed the pcb list: restart the loop */
          goto tcp_fasttmr_start;
 802faf6:	e7b8      	b.n	802fa6a <tcp_fasttmr+0x12>
        }
      }
      pcb = next;
 802faf8:	683b      	ldr	r3, [r7, #0]
 802fafa:	607b      	str	r3, [r7, #4]
 802fafc:	e002      	b.n	802fb04 <tcp_fasttmr+0xac>
    } else {
      pcb = pcb->next;
 802fafe:	687b      	ldr	r3, [r7, #4]
 802fb00:	68db      	ldr	r3, [r3, #12]
 802fb02:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 802fb04:	687b      	ldr	r3, [r7, #4]
 802fb06:	2b00      	cmp	r3, #0
 802fb08:	d1b3      	bne.n	802fa72 <tcp_fasttmr+0x1a>
    }
  }
}
 802fb0a:	bf00      	nop
 802fb0c:	bf00      	nop
 802fb0e:	3708      	adds	r7, #8
 802fb10:	46bd      	mov	sp, r7
 802fb12:	bd80      	pop	{r7, pc}
 802fb14:	2000ef16 	.word	0x2000ef16
 802fb18:	2000ef0c 	.word	0x2000ef0c
 802fb1c:	2000ef14 	.word	0x2000ef14

0802fb20 <tcp_process_refused_data>:
}

/** Pass pcb->refused_data to the recv callback */
err_t
tcp_process_refused_data(struct tcp_pcb *pcb)
{
 802fb20:	b590      	push	{r4, r7, lr}
 802fb22:	b085      	sub	sp, #20
 802fb24:	af00      	add	r7, sp, #0
 802fb26:	6078      	str	r0, [r7, #4]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  struct pbuf *rest;
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

  LWIP_ERROR("tcp_process_refused_data: invalid pcb", pcb != NULL, return ERR_ARG);
 802fb28:	687b      	ldr	r3, [r7, #4]
 802fb2a:	2b00      	cmp	r3, #0
 802fb2c:	d109      	bne.n	802fb42 <tcp_process_refused_data+0x22>
 802fb2e:	4b37      	ldr	r3, [pc, #220]	; (802fc0c <tcp_process_refused_data+0xec>)
 802fb30:	f240 6209 	movw	r2, #1545	; 0x609
 802fb34:	4936      	ldr	r1, [pc, #216]	; (802fc10 <tcp_process_refused_data+0xf0>)
 802fb36:	4837      	ldr	r0, [pc, #220]	; (802fc14 <tcp_process_refused_data+0xf4>)
 802fb38:	f009 fa96 	bl	8039068 <iprintf>
 802fb3c:	f06f 030f 	mvn.w	r3, #15
 802fb40:	e060      	b.n	802fc04 <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  while (pcb->refused_data != NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
  {
    err_t err;
    u8_t refused_flags = pcb->refused_data->flags;
 802fb42:	687b      	ldr	r3, [r7, #4]
 802fb44:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 802fb46:	7b5b      	ldrb	r3, [r3, #13]
 802fb48:	73bb      	strb	r3, [r7, #14]
    /* set pcb->refused_data to NULL in case the callback frees it and then
       closes the pcb */
    struct pbuf *refused_data = pcb->refused_data;
 802fb4a:	687b      	ldr	r3, [r7, #4]
 802fb4c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 802fb4e:	60bb      	str	r3, [r7, #8]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
    pbuf_split_64k(refused_data, &rest);
    pcb->refused_data = rest;
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    pcb->refused_data = NULL;
 802fb50:	687b      	ldr	r3, [r7, #4]
 802fb52:	2200      	movs	r2, #0
 802fb54:	679a      	str	r2, [r3, #120]	; 0x78
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    /* Notify again application with data previously received. */
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: notify kept packet\n"));
    TCP_EVENT_RECV(pcb, refused_data, ERR_OK, err);
 802fb56:	687b      	ldr	r3, [r7, #4]
 802fb58:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 802fb5c:	2b00      	cmp	r3, #0
 802fb5e:	d00b      	beq.n	802fb78 <tcp_process_refused_data+0x58>
 802fb60:	687b      	ldr	r3, [r7, #4]
 802fb62:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 802fb66:	687b      	ldr	r3, [r7, #4]
 802fb68:	6918      	ldr	r0, [r3, #16]
 802fb6a:	2300      	movs	r3, #0
 802fb6c:	68ba      	ldr	r2, [r7, #8]
 802fb6e:	6879      	ldr	r1, [r7, #4]
 802fb70:	47a0      	blx	r4
 802fb72:	4603      	mov	r3, r0
 802fb74:	73fb      	strb	r3, [r7, #15]
 802fb76:	e007      	b.n	802fb88 <tcp_process_refused_data+0x68>
 802fb78:	2300      	movs	r3, #0
 802fb7a:	68ba      	ldr	r2, [r7, #8]
 802fb7c:	6879      	ldr	r1, [r7, #4]
 802fb7e:	2000      	movs	r0, #0
 802fb80:	f000 f8a4 	bl	802fccc <tcp_recv_null>
 802fb84:	4603      	mov	r3, r0
 802fb86:	73fb      	strb	r3, [r7, #15]
    if (err == ERR_OK) {
 802fb88:	f997 300f 	ldrsb.w	r3, [r7, #15]
 802fb8c:	2b00      	cmp	r3, #0
 802fb8e:	d12a      	bne.n	802fbe6 <tcp_process_refused_data+0xc6>
      /* did refused_data include a FIN? */
      if ((refused_flags & PBUF_FLAG_TCP_FIN)
 802fb90:	7bbb      	ldrb	r3, [r7, #14]
 802fb92:	f003 0320 	and.w	r3, r3, #32
 802fb96:	2b00      	cmp	r3, #0
 802fb98:	d033      	beq.n	802fc02 <tcp_process_refused_data+0xe2>
          && (rest == NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
         ) {
        /* correct rcv_wnd as the application won't call tcp_recved()
           for the FIN's seqno */
        if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 802fb9a:	687b      	ldr	r3, [r7, #4]
 802fb9c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 802fb9e:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 802fba2:	d005      	beq.n	802fbb0 <tcp_process_refused_data+0x90>
          pcb->rcv_wnd++;
 802fba4:	687b      	ldr	r3, [r7, #4]
 802fba6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 802fba8:	3301      	adds	r3, #1
 802fbaa:	b29a      	uxth	r2, r3
 802fbac:	687b      	ldr	r3, [r7, #4]
 802fbae:	851a      	strh	r2, [r3, #40]	; 0x28
        }
        TCP_EVENT_CLOSED(pcb, err);
 802fbb0:	687b      	ldr	r3, [r7, #4]
 802fbb2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 802fbb6:	2b00      	cmp	r3, #0
 802fbb8:	d00b      	beq.n	802fbd2 <tcp_process_refused_data+0xb2>
 802fbba:	687b      	ldr	r3, [r7, #4]
 802fbbc:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 802fbc0:	687b      	ldr	r3, [r7, #4]
 802fbc2:	6918      	ldr	r0, [r3, #16]
 802fbc4:	2300      	movs	r3, #0
 802fbc6:	2200      	movs	r2, #0
 802fbc8:	6879      	ldr	r1, [r7, #4]
 802fbca:	47a0      	blx	r4
 802fbcc:	4603      	mov	r3, r0
 802fbce:	73fb      	strb	r3, [r7, #15]
 802fbd0:	e001      	b.n	802fbd6 <tcp_process_refused_data+0xb6>
 802fbd2:	2300      	movs	r3, #0
 802fbd4:	73fb      	strb	r3, [r7, #15]
        if (err == ERR_ABRT) {
 802fbd6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 802fbda:	f113 0f0d 	cmn.w	r3, #13
 802fbde:	d110      	bne.n	802fc02 <tcp_process_refused_data+0xe2>
          return ERR_ABRT;
 802fbe0:	f06f 030c 	mvn.w	r3, #12
 802fbe4:	e00e      	b.n	802fc04 <tcp_process_refused_data+0xe4>
        }
      }
    } else if (err == ERR_ABRT) {
 802fbe6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 802fbea:	f113 0f0d 	cmn.w	r3, #13
 802fbee:	d102      	bne.n	802fbf6 <tcp_process_refused_data+0xd6>
      /* if err == ERR_ABRT, 'pcb' is already deallocated */
      /* Drop incoming packets because pcb is "full" (only if the incoming
         segment contains data). */
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: drop incoming packets, because pcb is \"full\"\n"));
      return ERR_ABRT;
 802fbf0:	f06f 030c 	mvn.w	r3, #12
 802fbf4:	e006      	b.n	802fc04 <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
      if (rest != NULL) {
        pbuf_cat(refused_data, rest);
      }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
      pcb->refused_data = refused_data;
 802fbf6:	687b      	ldr	r3, [r7, #4]
 802fbf8:	68ba      	ldr	r2, [r7, #8]
 802fbfa:	679a      	str	r2, [r3, #120]	; 0x78
      return ERR_INPROGRESS;
 802fbfc:	f06f 0304 	mvn.w	r3, #4
 802fc00:	e000      	b.n	802fc04 <tcp_process_refused_data+0xe4>
    }
  }
  return ERR_OK;
 802fc02:	2300      	movs	r3, #0
}
 802fc04:	4618      	mov	r0, r3
 802fc06:	3714      	adds	r7, #20
 802fc08:	46bd      	mov	sp, r7
 802fc0a:	bd90      	pop	{r4, r7, pc}
 802fc0c:	0803b540 	.word	0x0803b540
 802fc10:	0803ba50 	.word	0x0803ba50
 802fc14:	0803b584 	.word	0x0803b584

0802fc18 <tcp_segs_free>:
 *
 * @param seg tcp_seg list of TCP segments to free
 */
void
tcp_segs_free(struct tcp_seg *seg)
{
 802fc18:	b580      	push	{r7, lr}
 802fc1a:	b084      	sub	sp, #16
 802fc1c:	af00      	add	r7, sp, #0
 802fc1e:	6078      	str	r0, [r7, #4]
  while (seg != NULL) {
 802fc20:	e007      	b.n	802fc32 <tcp_segs_free+0x1a>
    struct tcp_seg *next = seg->next;
 802fc22:	687b      	ldr	r3, [r7, #4]
 802fc24:	681b      	ldr	r3, [r3, #0]
 802fc26:	60fb      	str	r3, [r7, #12]
    tcp_seg_free(seg);
 802fc28:	6878      	ldr	r0, [r7, #4]
 802fc2a:	f000 f80a 	bl	802fc42 <tcp_seg_free>
    seg = next;
 802fc2e:	68fb      	ldr	r3, [r7, #12]
 802fc30:	607b      	str	r3, [r7, #4]
  while (seg != NULL) {
 802fc32:	687b      	ldr	r3, [r7, #4]
 802fc34:	2b00      	cmp	r3, #0
 802fc36:	d1f4      	bne.n	802fc22 <tcp_segs_free+0xa>
  }
}
 802fc38:	bf00      	nop
 802fc3a:	bf00      	nop
 802fc3c:	3710      	adds	r7, #16
 802fc3e:	46bd      	mov	sp, r7
 802fc40:	bd80      	pop	{r7, pc}

0802fc42 <tcp_seg_free>:
 *
 * @param seg single tcp_seg to free
 */
void
tcp_seg_free(struct tcp_seg *seg)
{
 802fc42:	b580      	push	{r7, lr}
 802fc44:	b082      	sub	sp, #8
 802fc46:	af00      	add	r7, sp, #0
 802fc48:	6078      	str	r0, [r7, #4]
  if (seg != NULL) {
 802fc4a:	687b      	ldr	r3, [r7, #4]
 802fc4c:	2b00      	cmp	r3, #0
 802fc4e:	d00c      	beq.n	802fc6a <tcp_seg_free+0x28>
    if (seg->p != NULL) {
 802fc50:	687b      	ldr	r3, [r7, #4]
 802fc52:	685b      	ldr	r3, [r3, #4]
 802fc54:	2b00      	cmp	r3, #0
 802fc56:	d004      	beq.n	802fc62 <tcp_seg_free+0x20>
      pbuf_free(seg->p);
 802fc58:	687b      	ldr	r3, [r7, #4]
 802fc5a:	685b      	ldr	r3, [r3, #4]
 802fc5c:	4618      	mov	r0, r3
 802fc5e:	f7fe fb55 	bl	802e30c <pbuf_free>
#if TCP_DEBUG
      seg->p = NULL;
#endif /* TCP_DEBUG */
    }
    memp_free(MEMP_TCP_SEG, seg);
 802fc62:	6879      	ldr	r1, [r7, #4]
 802fc64:	2003      	movs	r0, #3
 802fc66:	f7fd fc7b 	bl	802d560 <memp_free>
  }
}
 802fc6a:	bf00      	nop
 802fc6c:	3708      	adds	r7, #8
 802fc6e:	46bd      	mov	sp, r7
 802fc70:	bd80      	pop	{r7, pc}
	...

0802fc74 <tcp_seg_copy>:
 * @param seg the old tcp_seg
 * @return a copy of seg
 */
struct tcp_seg *
tcp_seg_copy(struct tcp_seg *seg)
{
 802fc74:	b580      	push	{r7, lr}
 802fc76:	b084      	sub	sp, #16
 802fc78:	af00      	add	r7, sp, #0
 802fc7a:	6078      	str	r0, [r7, #4]
  struct tcp_seg *cseg;

  LWIP_ASSERT("tcp_seg_copy: invalid seg", seg != NULL);
 802fc7c:	687b      	ldr	r3, [r7, #4]
 802fc7e:	2b00      	cmp	r3, #0
 802fc80:	d106      	bne.n	802fc90 <tcp_seg_copy+0x1c>
 802fc82:	4b0f      	ldr	r3, [pc, #60]	; (802fcc0 <tcp_seg_copy+0x4c>)
 802fc84:	f240 6282 	movw	r2, #1666	; 0x682
 802fc88:	490e      	ldr	r1, [pc, #56]	; (802fcc4 <tcp_seg_copy+0x50>)
 802fc8a:	480f      	ldr	r0, [pc, #60]	; (802fcc8 <tcp_seg_copy+0x54>)
 802fc8c:	f009 f9ec 	bl	8039068 <iprintf>

  cseg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG);
 802fc90:	2003      	movs	r0, #3
 802fc92:	f7fd fbe9 	bl	802d468 <memp_malloc>
 802fc96:	60f8      	str	r0, [r7, #12]
  if (cseg == NULL) {
 802fc98:	68fb      	ldr	r3, [r7, #12]
 802fc9a:	2b00      	cmp	r3, #0
 802fc9c:	d101      	bne.n	802fca2 <tcp_seg_copy+0x2e>
    return NULL;
 802fc9e:	2300      	movs	r3, #0
 802fca0:	e00a      	b.n	802fcb8 <tcp_seg_copy+0x44>
  }
  SMEMCPY((u8_t *)cseg, (const u8_t *)seg, sizeof(struct tcp_seg));
 802fca2:	2210      	movs	r2, #16
 802fca4:	6879      	ldr	r1, [r7, #4]
 802fca6:	68f8      	ldr	r0, [r7, #12]
 802fca8:	f008 fde4 	bl	8038874 <memcpy>
  pbuf_ref(cseg->p);
 802fcac:	68fb      	ldr	r3, [r7, #12]
 802fcae:	685b      	ldr	r3, [r3, #4]
 802fcb0:	4618      	mov	r0, r3
 802fcb2:	f7fe fbd1 	bl	802e458 <pbuf_ref>
  return cseg;
 802fcb6:	68fb      	ldr	r3, [r7, #12]
}
 802fcb8:	4618      	mov	r0, r3
 802fcba:	3710      	adds	r7, #16
 802fcbc:	46bd      	mov	sp, r7
 802fcbe:	bd80      	pop	{r7, pc}
 802fcc0:	0803b540 	.word	0x0803b540
 802fcc4:	0803ba94 	.word	0x0803ba94
 802fcc8:	0803b584 	.word	0x0803b584

0802fccc <tcp_recv_null>:
 * Default receive callback that is called if the user didn't register
 * a recv callback for the pcb.
 */
err_t
tcp_recv_null(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
 802fccc:	b580      	push	{r7, lr}
 802fcce:	b084      	sub	sp, #16
 802fcd0:	af00      	add	r7, sp, #0
 802fcd2:	60f8      	str	r0, [r7, #12]
 802fcd4:	60b9      	str	r1, [r7, #8]
 802fcd6:	607a      	str	r2, [r7, #4]
 802fcd8:	70fb      	strb	r3, [r7, #3]
  LWIP_UNUSED_ARG(arg);

  LWIP_ERROR("tcp_recv_null: invalid pcb", pcb != NULL, return ERR_ARG);
 802fcda:	68bb      	ldr	r3, [r7, #8]
 802fcdc:	2b00      	cmp	r3, #0
 802fcde:	d109      	bne.n	802fcf4 <tcp_recv_null+0x28>
 802fce0:	4b12      	ldr	r3, [pc, #72]	; (802fd2c <tcp_recv_null+0x60>)
 802fce2:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 802fce6:	4912      	ldr	r1, [pc, #72]	; (802fd30 <tcp_recv_null+0x64>)
 802fce8:	4812      	ldr	r0, [pc, #72]	; (802fd34 <tcp_recv_null+0x68>)
 802fcea:	f009 f9bd 	bl	8039068 <iprintf>
 802fcee:	f06f 030f 	mvn.w	r3, #15
 802fcf2:	e016      	b.n	802fd22 <tcp_recv_null+0x56>

  if (p != NULL) {
 802fcf4:	687b      	ldr	r3, [r7, #4]
 802fcf6:	2b00      	cmp	r3, #0
 802fcf8:	d009      	beq.n	802fd0e <tcp_recv_null+0x42>
    tcp_recved(pcb, p->tot_len);
 802fcfa:	687b      	ldr	r3, [r7, #4]
 802fcfc:	891b      	ldrh	r3, [r3, #8]
 802fcfe:	4619      	mov	r1, r3
 802fd00:	68b8      	ldr	r0, [r7, #8]
 802fd02:	f7ff fad3 	bl	802f2ac <tcp_recved>
    pbuf_free(p);
 802fd06:	6878      	ldr	r0, [r7, #4]
 802fd08:	f7fe fb00 	bl	802e30c <pbuf_free>
 802fd0c:	e008      	b.n	802fd20 <tcp_recv_null+0x54>
  } else if (err == ERR_OK) {
 802fd0e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 802fd12:	2b00      	cmp	r3, #0
 802fd14:	d104      	bne.n	802fd20 <tcp_recv_null+0x54>
    return tcp_close(pcb);
 802fd16:	68b8      	ldr	r0, [r7, #8]
 802fd18:	f7fe ffba 	bl	802ec90 <tcp_close>
 802fd1c:	4603      	mov	r3, r0
 802fd1e:	e000      	b.n	802fd22 <tcp_recv_null+0x56>
  }
  return ERR_OK;
 802fd20:	2300      	movs	r3, #0
}
 802fd22:	4618      	mov	r0, r3
 802fd24:	3710      	adds	r7, #16
 802fd26:	46bd      	mov	sp, r7
 802fd28:	bd80      	pop	{r7, pc}
 802fd2a:	bf00      	nop
 802fd2c:	0803b540 	.word	0x0803b540
 802fd30:	0803bab0 	.word	0x0803bab0
 802fd34:	0803b584 	.word	0x0803b584

0802fd38 <tcp_kill_prio>:
 *
 * @param prio minimum priority
 */
static void
tcp_kill_prio(u8_t prio)
{
 802fd38:	b580      	push	{r7, lr}
 802fd3a:	b086      	sub	sp, #24
 802fd3c:	af00      	add	r7, sp, #0
 802fd3e:	4603      	mov	r3, r0
 802fd40:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;
  u8_t mprio;

  mprio = LWIP_MIN(TCP_PRIO_MAX, prio);
 802fd42:	f997 3007 	ldrsb.w	r3, [r7, #7]
 802fd46:	2b00      	cmp	r3, #0
 802fd48:	db01      	blt.n	802fd4e <tcp_kill_prio+0x16>
 802fd4a:	79fb      	ldrb	r3, [r7, #7]
 802fd4c:	e000      	b.n	802fd50 <tcp_kill_prio+0x18>
 802fd4e:	237f      	movs	r3, #127	; 0x7f
 802fd50:	72fb      	strb	r3, [r7, #11]

  /* We want to kill connections with a lower prio, so bail out if 
   * supplied prio is 0 - there can never be a lower prio
   */
  if (mprio == 0) {
 802fd52:	7afb      	ldrb	r3, [r7, #11]
 802fd54:	2b00      	cmp	r3, #0
 802fd56:	d034      	beq.n	802fdc2 <tcp_kill_prio+0x8a>
  /* We only want kill connections with a lower prio, so decrement prio by one 
   * and start searching for oldest connection with same or lower priority than mprio.
   * We want to find the connections with the lowest possible prio, and among
   * these the one with the longest inactivity time.
   */
  mprio--;
 802fd58:	7afb      	ldrb	r3, [r7, #11]
 802fd5a:	3b01      	subs	r3, #1
 802fd5c:	72fb      	strb	r3, [r7, #11]

  inactivity = 0;
 802fd5e:	2300      	movs	r3, #0
 802fd60:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 802fd62:	2300      	movs	r3, #0
 802fd64:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 802fd66:	4b19      	ldr	r3, [pc, #100]	; (802fdcc <tcp_kill_prio+0x94>)
 802fd68:	681b      	ldr	r3, [r3, #0]
 802fd6a:	617b      	str	r3, [r7, #20]
 802fd6c:	e01f      	b.n	802fdae <tcp_kill_prio+0x76>
        /* lower prio is always a kill candidate */
    if ((pcb->prio < mprio) ||
 802fd6e:	697b      	ldr	r3, [r7, #20]
 802fd70:	7d5b      	ldrb	r3, [r3, #21]
 802fd72:	7afa      	ldrb	r2, [r7, #11]
 802fd74:	429a      	cmp	r2, r3
 802fd76:	d80c      	bhi.n	802fd92 <tcp_kill_prio+0x5a>
        /* longer inactivity is also a kill candidate */
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 802fd78:	697b      	ldr	r3, [r7, #20]
 802fd7a:	7d5b      	ldrb	r3, [r3, #21]
    if ((pcb->prio < mprio) ||
 802fd7c:	7afa      	ldrb	r2, [r7, #11]
 802fd7e:	429a      	cmp	r2, r3
 802fd80:	d112      	bne.n	802fda8 <tcp_kill_prio+0x70>
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 802fd82:	4b13      	ldr	r3, [pc, #76]	; (802fdd0 <tcp_kill_prio+0x98>)
 802fd84:	681a      	ldr	r2, [r3, #0]
 802fd86:	697b      	ldr	r3, [r7, #20]
 802fd88:	6a1b      	ldr	r3, [r3, #32]
 802fd8a:	1ad3      	subs	r3, r2, r3
 802fd8c:	68fa      	ldr	r2, [r7, #12]
 802fd8e:	429a      	cmp	r2, r3
 802fd90:	d80a      	bhi.n	802fda8 <tcp_kill_prio+0x70>
      inactivity = tcp_ticks - pcb->tmr;
 802fd92:	4b0f      	ldr	r3, [pc, #60]	; (802fdd0 <tcp_kill_prio+0x98>)
 802fd94:	681a      	ldr	r2, [r3, #0]
 802fd96:	697b      	ldr	r3, [r7, #20]
 802fd98:	6a1b      	ldr	r3, [r3, #32]
 802fd9a:	1ad3      	subs	r3, r2, r3
 802fd9c:	60fb      	str	r3, [r7, #12]
      inactive   = pcb;
 802fd9e:	697b      	ldr	r3, [r7, #20]
 802fda0:	613b      	str	r3, [r7, #16]
      mprio      = pcb->prio;
 802fda2:	697b      	ldr	r3, [r7, #20]
 802fda4:	7d5b      	ldrb	r3, [r3, #21]
 802fda6:	72fb      	strb	r3, [r7, #11]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 802fda8:	697b      	ldr	r3, [r7, #20]
 802fdaa:	68db      	ldr	r3, [r3, #12]
 802fdac:	617b      	str	r3, [r7, #20]
 802fdae:	697b      	ldr	r3, [r7, #20]
 802fdb0:	2b00      	cmp	r3, #0
 802fdb2:	d1dc      	bne.n	802fd6e <tcp_kill_prio+0x36>
    }
  }
  if (inactive != NULL) {
 802fdb4:	693b      	ldr	r3, [r7, #16]
 802fdb6:	2b00      	cmp	r3, #0
 802fdb8:	d004      	beq.n	802fdc4 <tcp_kill_prio+0x8c>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_prio: killing oldest PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 802fdba:	6938      	ldr	r0, [r7, #16]
 802fdbc:	f7ff f8ae 	bl	802ef1c <tcp_abort>
 802fdc0:	e000      	b.n	802fdc4 <tcp_kill_prio+0x8c>
    return;
 802fdc2:	bf00      	nop
  }
}
 802fdc4:	3718      	adds	r7, #24
 802fdc6:	46bd      	mov	sp, r7
 802fdc8:	bd80      	pop	{r7, pc}
 802fdca:	bf00      	nop
 802fdcc:	2000ef0c 	.word	0x2000ef0c
 802fdd0:	2000ef00 	.word	0x2000ef00

0802fdd4 <tcp_kill_state>:
 * Kills the oldest connection that is in specific state.
 * Called from tcp_alloc() for LAST_ACK and CLOSING if no more connections are available.
 */
static void
tcp_kill_state(enum tcp_state state)
{
 802fdd4:	b580      	push	{r7, lr}
 802fdd6:	b086      	sub	sp, #24
 802fdd8:	af00      	add	r7, sp, #0
 802fdda:	4603      	mov	r3, r0
 802fddc:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  LWIP_ASSERT("invalid state", (state == CLOSING) || (state == LAST_ACK));
 802fdde:	79fb      	ldrb	r3, [r7, #7]
 802fde0:	2b08      	cmp	r3, #8
 802fde2:	d009      	beq.n	802fdf8 <tcp_kill_state+0x24>
 802fde4:	79fb      	ldrb	r3, [r7, #7]
 802fde6:	2b09      	cmp	r3, #9
 802fde8:	d006      	beq.n	802fdf8 <tcp_kill_state+0x24>
 802fdea:	4b1a      	ldr	r3, [pc, #104]	; (802fe54 <tcp_kill_state+0x80>)
 802fdec:	f240 62dd 	movw	r2, #1757	; 0x6dd
 802fdf0:	4919      	ldr	r1, [pc, #100]	; (802fe58 <tcp_kill_state+0x84>)
 802fdf2:	481a      	ldr	r0, [pc, #104]	; (802fe5c <tcp_kill_state+0x88>)
 802fdf4:	f009 f938 	bl	8039068 <iprintf>

  inactivity = 0;
 802fdf8:	2300      	movs	r3, #0
 802fdfa:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 802fdfc:	2300      	movs	r3, #0
 802fdfe:	613b      	str	r3, [r7, #16]
  /* Go through the list of active pcbs and get the oldest pcb that is in state
     CLOSING/LAST_ACK. */
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 802fe00:	4b17      	ldr	r3, [pc, #92]	; (802fe60 <tcp_kill_state+0x8c>)
 802fe02:	681b      	ldr	r3, [r3, #0]
 802fe04:	617b      	str	r3, [r7, #20]
 802fe06:	e017      	b.n	802fe38 <tcp_kill_state+0x64>
    if (pcb->state == state) {
 802fe08:	697b      	ldr	r3, [r7, #20]
 802fe0a:	7d1b      	ldrb	r3, [r3, #20]
 802fe0c:	79fa      	ldrb	r2, [r7, #7]
 802fe0e:	429a      	cmp	r2, r3
 802fe10:	d10f      	bne.n	802fe32 <tcp_kill_state+0x5e>
      if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 802fe12:	4b14      	ldr	r3, [pc, #80]	; (802fe64 <tcp_kill_state+0x90>)
 802fe14:	681a      	ldr	r2, [r3, #0]
 802fe16:	697b      	ldr	r3, [r7, #20]
 802fe18:	6a1b      	ldr	r3, [r3, #32]
 802fe1a:	1ad3      	subs	r3, r2, r3
 802fe1c:	68fa      	ldr	r2, [r7, #12]
 802fe1e:	429a      	cmp	r2, r3
 802fe20:	d807      	bhi.n	802fe32 <tcp_kill_state+0x5e>
        inactivity = tcp_ticks - pcb->tmr;
 802fe22:	4b10      	ldr	r3, [pc, #64]	; (802fe64 <tcp_kill_state+0x90>)
 802fe24:	681a      	ldr	r2, [r3, #0]
 802fe26:	697b      	ldr	r3, [r7, #20]
 802fe28:	6a1b      	ldr	r3, [r3, #32]
 802fe2a:	1ad3      	subs	r3, r2, r3
 802fe2c:	60fb      	str	r3, [r7, #12]
        inactive = pcb;
 802fe2e:	697b      	ldr	r3, [r7, #20]
 802fe30:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 802fe32:	697b      	ldr	r3, [r7, #20]
 802fe34:	68db      	ldr	r3, [r3, #12]
 802fe36:	617b      	str	r3, [r7, #20]
 802fe38:	697b      	ldr	r3, [r7, #20]
 802fe3a:	2b00      	cmp	r3, #0
 802fe3c:	d1e4      	bne.n	802fe08 <tcp_kill_state+0x34>
      }
    }
  }
  if (inactive != NULL) {
 802fe3e:	693b      	ldr	r3, [r7, #16]
 802fe40:	2b00      	cmp	r3, #0
 802fe42:	d003      	beq.n	802fe4c <tcp_kill_state+0x78>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_closing: killing oldest %s PCB %p (%"S32_F")\n",
                            tcp_state_str[state], (void *)inactive, inactivity));
    /* Don't send a RST, since no data is lost. */
    tcp_abandon(inactive, 0);
 802fe44:	2100      	movs	r1, #0
 802fe46:	6938      	ldr	r0, [r7, #16]
 802fe48:	f7fe ffaa 	bl	802eda0 <tcp_abandon>
  }
}
 802fe4c:	bf00      	nop
 802fe4e:	3718      	adds	r7, #24
 802fe50:	46bd      	mov	sp, r7
 802fe52:	bd80      	pop	{r7, pc}
 802fe54:	0803b540 	.word	0x0803b540
 802fe58:	0803bacc 	.word	0x0803bacc
 802fe5c:	0803b584 	.word	0x0803b584
 802fe60:	2000ef0c 	.word	0x2000ef0c
 802fe64:	2000ef00 	.word	0x2000ef00

0802fe68 <tcp_kill_timewait>:
 * Kills the oldest connection that is in TIME_WAIT state.
 * Called from tcp_alloc() if no more connections are available.
 */
static void
tcp_kill_timewait(void)
{
 802fe68:	b580      	push	{r7, lr}
 802fe6a:	b084      	sub	sp, #16
 802fe6c:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  inactivity = 0;
 802fe6e:	2300      	movs	r3, #0
 802fe70:	607b      	str	r3, [r7, #4]
  inactive = NULL;
 802fe72:	2300      	movs	r3, #0
 802fe74:	60bb      	str	r3, [r7, #8]
  /* Go through the list of TIME_WAIT pcbs and get the oldest pcb. */
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 802fe76:	4b12      	ldr	r3, [pc, #72]	; (802fec0 <tcp_kill_timewait+0x58>)
 802fe78:	681b      	ldr	r3, [r3, #0]
 802fe7a:	60fb      	str	r3, [r7, #12]
 802fe7c:	e012      	b.n	802fea4 <tcp_kill_timewait+0x3c>
    if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 802fe7e:	4b11      	ldr	r3, [pc, #68]	; (802fec4 <tcp_kill_timewait+0x5c>)
 802fe80:	681a      	ldr	r2, [r3, #0]
 802fe82:	68fb      	ldr	r3, [r7, #12]
 802fe84:	6a1b      	ldr	r3, [r3, #32]
 802fe86:	1ad3      	subs	r3, r2, r3
 802fe88:	687a      	ldr	r2, [r7, #4]
 802fe8a:	429a      	cmp	r2, r3
 802fe8c:	d807      	bhi.n	802fe9e <tcp_kill_timewait+0x36>
      inactivity = tcp_ticks - pcb->tmr;
 802fe8e:	4b0d      	ldr	r3, [pc, #52]	; (802fec4 <tcp_kill_timewait+0x5c>)
 802fe90:	681a      	ldr	r2, [r3, #0]
 802fe92:	68fb      	ldr	r3, [r7, #12]
 802fe94:	6a1b      	ldr	r3, [r3, #32]
 802fe96:	1ad3      	subs	r3, r2, r3
 802fe98:	607b      	str	r3, [r7, #4]
      inactive = pcb;
 802fe9a:	68fb      	ldr	r3, [r7, #12]
 802fe9c:	60bb      	str	r3, [r7, #8]
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 802fe9e:	68fb      	ldr	r3, [r7, #12]
 802fea0:	68db      	ldr	r3, [r3, #12]
 802fea2:	60fb      	str	r3, [r7, #12]
 802fea4:	68fb      	ldr	r3, [r7, #12]
 802fea6:	2b00      	cmp	r3, #0
 802fea8:	d1e9      	bne.n	802fe7e <tcp_kill_timewait+0x16>
    }
  }
  if (inactive != NULL) {
 802feaa:	68bb      	ldr	r3, [r7, #8]
 802feac:	2b00      	cmp	r3, #0
 802feae:	d002      	beq.n	802feb6 <tcp_kill_timewait+0x4e>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_timewait: killing oldest TIME-WAIT PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 802feb0:	68b8      	ldr	r0, [r7, #8]
 802feb2:	f7ff f833 	bl	802ef1c <tcp_abort>
  }
}
 802feb6:	bf00      	nop
 802feb8:	3710      	adds	r7, #16
 802feba:	46bd      	mov	sp, r7
 802febc:	bd80      	pop	{r7, pc}
 802febe:	bf00      	nop
 802fec0:	2000ef10 	.word	0x2000ef10
 802fec4:	2000ef00 	.word	0x2000ef00

0802fec8 <tcp_handle_closepend>:
 * now send the FIN (which failed before), the pcb might be in a state that is
 * OK for us to now free it.
 */
static void
tcp_handle_closepend(void)
{
 802fec8:	b580      	push	{r7, lr}
 802feca:	b082      	sub	sp, #8
 802fecc:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb = tcp_active_pcbs;
 802fece:	4b10      	ldr	r3, [pc, #64]	; (802ff10 <tcp_handle_closepend+0x48>)
 802fed0:	681b      	ldr	r3, [r3, #0]
 802fed2:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 802fed4:	e014      	b.n	802ff00 <tcp_handle_closepend+0x38>
    struct tcp_pcb *next = pcb->next;
 802fed6:	687b      	ldr	r3, [r7, #4]
 802fed8:	68db      	ldr	r3, [r3, #12]
 802feda:	603b      	str	r3, [r7, #0]
    /* send pending FIN */
    if (pcb->flags & TF_CLOSEPEND) {
 802fedc:	687b      	ldr	r3, [r7, #4]
 802fede:	8b5b      	ldrh	r3, [r3, #26]
 802fee0:	f003 0308 	and.w	r3, r3, #8
 802fee4:	2b00      	cmp	r3, #0
 802fee6:	d009      	beq.n	802fefc <tcp_handle_closepend+0x34>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_handle_closepend: pending FIN\n"));
      tcp_clear_flags(pcb, TF_CLOSEPEND);
 802fee8:	687b      	ldr	r3, [r7, #4]
 802feea:	8b5b      	ldrh	r3, [r3, #26]
 802feec:	f023 0308 	bic.w	r3, r3, #8
 802fef0:	b29a      	uxth	r2, r3
 802fef2:	687b      	ldr	r3, [r7, #4]
 802fef4:	835a      	strh	r2, [r3, #26]
      tcp_close_shutdown_fin(pcb);
 802fef6:	6878      	ldr	r0, [r7, #4]
 802fef8:	f7fe fe60 	bl	802ebbc <tcp_close_shutdown_fin>
    }
    pcb = next;
 802fefc:	683b      	ldr	r3, [r7, #0]
 802fefe:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 802ff00:	687b      	ldr	r3, [r7, #4]
 802ff02:	2b00      	cmp	r3, #0
 802ff04:	d1e7      	bne.n	802fed6 <tcp_handle_closepend+0xe>
  }
}
 802ff06:	bf00      	nop
 802ff08:	bf00      	nop
 802ff0a:	3708      	adds	r7, #8
 802ff0c:	46bd      	mov	sp, r7
 802ff0e:	bd80      	pop	{r7, pc}
 802ff10:	2000ef0c 	.word	0x2000ef0c

0802ff14 <tcp_alloc>:
 * @param prio priority for the new pcb
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_alloc(u8_t prio)
{
 802ff14:	b580      	push	{r7, lr}
 802ff16:	b084      	sub	sp, #16
 802ff18:	af00      	add	r7, sp, #0
 802ff1a:	4603      	mov	r3, r0
 802ff1c:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 802ff1e:	2001      	movs	r0, #1
 802ff20:	f7fd faa2 	bl	802d468 <memp_malloc>
 802ff24:	60f8      	str	r0, [r7, #12]
  if (pcb == NULL) {
 802ff26:	68fb      	ldr	r3, [r7, #12]
 802ff28:	2b00      	cmp	r3, #0
 802ff2a:	d14e      	bne.n	802ffca <tcp_alloc+0xb6>
    /* Try to send FIN for all pcbs stuck in TF_CLOSEPEND first */
    tcp_handle_closepend();
 802ff2c:	f7ff ffcc 	bl	802fec8 <tcp_handle_closepend>

    /* Try killing oldest connection in TIME-WAIT. */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest TIME-WAIT connection\n"));
    tcp_kill_timewait();
 802ff30:	f7ff ff9a 	bl	802fe68 <tcp_kill_timewait>
    /* Try to allocate a tcp_pcb again. */
    pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 802ff34:	2001      	movs	r0, #1
 802ff36:	f7fd fa97 	bl	802d468 <memp_malloc>
 802ff3a:	60f8      	str	r0, [r7, #12]
    if (pcb == NULL) {
 802ff3c:	68fb      	ldr	r3, [r7, #12]
 802ff3e:	2b00      	cmp	r3, #0
 802ff40:	d139      	bne.n	802ffb6 <tcp_alloc+0xa2>
      /* Try killing oldest connection in LAST-ACK (these wouldn't go to TIME-WAIT). */
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest LAST-ACK connection\n"));
      tcp_kill_state(LAST_ACK);
 802ff42:	2009      	movs	r0, #9
 802ff44:	f7ff ff46 	bl	802fdd4 <tcp_kill_state>
      /* Try to allocate a tcp_pcb again. */
      pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 802ff48:	2001      	movs	r0, #1
 802ff4a:	f7fd fa8d 	bl	802d468 <memp_malloc>
 802ff4e:	60f8      	str	r0, [r7, #12]
      if (pcb == NULL) {
 802ff50:	68fb      	ldr	r3, [r7, #12]
 802ff52:	2b00      	cmp	r3, #0
 802ff54:	d125      	bne.n	802ffa2 <tcp_alloc+0x8e>
        /* Try killing oldest connection in CLOSING. */
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest CLOSING connection\n"));
        tcp_kill_state(CLOSING);
 802ff56:	2008      	movs	r0, #8
 802ff58:	f7ff ff3c 	bl	802fdd4 <tcp_kill_state>
        /* Try to allocate a tcp_pcb again. */
        pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 802ff5c:	2001      	movs	r0, #1
 802ff5e:	f7fd fa83 	bl	802d468 <memp_malloc>
 802ff62:	60f8      	str	r0, [r7, #12]
        if (pcb == NULL) {
 802ff64:	68fb      	ldr	r3, [r7, #12]
 802ff66:	2b00      	cmp	r3, #0
 802ff68:	d111      	bne.n	802ff8e <tcp_alloc+0x7a>
          /* Try killing oldest active connection with lower priority than the new one. */
          LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing oldest connection with prio lower than %d\n", prio));
          tcp_kill_prio(prio);
 802ff6a:	79fb      	ldrb	r3, [r7, #7]
 802ff6c:	4618      	mov	r0, r3
 802ff6e:	f7ff fee3 	bl	802fd38 <tcp_kill_prio>
          /* Try to allocate a tcp_pcb again. */
          pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 802ff72:	2001      	movs	r0, #1
 802ff74:	f7fd fa78 	bl	802d468 <memp_malloc>
 802ff78:	60f8      	str	r0, [r7, #12]
          if (pcb != NULL) {
 802ff7a:	68fb      	ldr	r3, [r7, #12]
 802ff7c:	2b00      	cmp	r3, #0
 802ff7e:	d006      	beq.n	802ff8e <tcp_alloc+0x7a>
            /* adjust err stats: memp_malloc failed multiple times before */
            MEMP_STATS_DEC(err, MEMP_TCP_PCB);
 802ff80:	4b36      	ldr	r3, [pc, #216]	; (803005c <tcp_alloc+0x148>)
 802ff82:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 802ff86:	881a      	ldrh	r2, [r3, #0]
 802ff88:	3a01      	subs	r2, #1
 802ff8a:	b292      	uxth	r2, r2
 802ff8c:	801a      	strh	r2, [r3, #0]
          }
        }
        if (pcb != NULL) {
 802ff8e:	68fb      	ldr	r3, [r7, #12]
 802ff90:	2b00      	cmp	r3, #0
 802ff92:	d006      	beq.n	802ffa2 <tcp_alloc+0x8e>
          /* adjust err stats: memp_malloc failed multiple times before */
          MEMP_STATS_DEC(err, MEMP_TCP_PCB);
 802ff94:	4b31      	ldr	r3, [pc, #196]	; (803005c <tcp_alloc+0x148>)
 802ff96:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 802ff9a:	881a      	ldrh	r2, [r3, #0]
 802ff9c:	3a01      	subs	r2, #1
 802ff9e:	b292      	uxth	r2, r2
 802ffa0:	801a      	strh	r2, [r3, #0]
        }
      }
      if (pcb != NULL) {
 802ffa2:	68fb      	ldr	r3, [r7, #12]
 802ffa4:	2b00      	cmp	r3, #0
 802ffa6:	d006      	beq.n	802ffb6 <tcp_alloc+0xa2>
        /* adjust err stats: memp_malloc failed multiple times before */
        MEMP_STATS_DEC(err, MEMP_TCP_PCB);
 802ffa8:	4b2c      	ldr	r3, [pc, #176]	; (803005c <tcp_alloc+0x148>)
 802ffaa:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 802ffae:	881a      	ldrh	r2, [r3, #0]
 802ffb0:	3a01      	subs	r2, #1
 802ffb2:	b292      	uxth	r2, r2
 802ffb4:	801a      	strh	r2, [r3, #0]
      }
    }
    if (pcb != NULL) {
 802ffb6:	68fb      	ldr	r3, [r7, #12]
 802ffb8:	2b00      	cmp	r3, #0
 802ffba:	d006      	beq.n	802ffca <tcp_alloc+0xb6>
      /* adjust err stats: memp_malloc failed above */
      MEMP_STATS_DEC(err, MEMP_TCP_PCB);
 802ffbc:	4b27      	ldr	r3, [pc, #156]	; (803005c <tcp_alloc+0x148>)
 802ffbe:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 802ffc2:	881a      	ldrh	r2, [r3, #0]
 802ffc4:	3a01      	subs	r2, #1
 802ffc6:	b292      	uxth	r2, r2
 802ffc8:	801a      	strh	r2, [r3, #0]
    }
  }
  if (pcb != NULL) {
 802ffca:	68fb      	ldr	r3, [r7, #12]
 802ffcc:	2b00      	cmp	r3, #0
 802ffce:	d03f      	beq.n	8030050 <tcp_alloc+0x13c>
    /* zero out the whole pcb, so there is no need to initialize members to zero */
    memset(pcb, 0, sizeof(struct tcp_pcb));
 802ffd0:	229c      	movs	r2, #156	; 0x9c
 802ffd2:	2100      	movs	r1, #0
 802ffd4:	68f8      	ldr	r0, [r7, #12]
 802ffd6:	f008 fc5b 	bl	8038890 <memset>
    pcb->prio = prio;
 802ffda:	68fb      	ldr	r3, [r7, #12]
 802ffdc:	79fa      	ldrb	r2, [r7, #7]
 802ffde:	755a      	strb	r2, [r3, #21]
    pcb->snd_buf = TCP_SND_BUF;
 802ffe0:	68fb      	ldr	r3, [r7, #12]
 802ffe2:	f44f 6286 	mov.w	r2, #1072	; 0x430
 802ffe6:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
    /* Start with a window that does not need scaling. When window scaling is
       enabled and used, the window is enlarged when both sides agree on scaling. */
    pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 802ffea:	68fb      	ldr	r3, [r7, #12]
 802ffec:	f44f 6206 	mov.w	r2, #2144	; 0x860
 802fff0:	855a      	strh	r2, [r3, #42]	; 0x2a
 802fff2:	68fb      	ldr	r3, [r7, #12]
 802fff4:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 802fff6:	68fb      	ldr	r3, [r7, #12]
 802fff8:	851a      	strh	r2, [r3, #40]	; 0x28
    pcb->ttl = TCP_TTL;
 802fffa:	68fb      	ldr	r3, [r7, #12]
 802fffc:	22ff      	movs	r2, #255	; 0xff
 802fffe:	72da      	strb	r2, [r3, #11]
    /* As initial send MSS, we use TCP_MSS but limit it to 536.
       The send MSS is updated when an MSS option is received. */
    pcb->mss = INITIAL_MSS;
 8030000:	68fb      	ldr	r3, [r7, #12]
 8030002:	f44f 7206 	mov.w	r2, #536	; 0x218
 8030006:	865a      	strh	r2, [r3, #50]	; 0x32
    pcb->rto = 3000 / TCP_SLOW_INTERVAL;
 8030008:	68fb      	ldr	r3, [r7, #12]
 803000a:	2206      	movs	r2, #6
 803000c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    pcb->sv = 3000 / TCP_SLOW_INTERVAL;
 8030010:	68fb      	ldr	r3, [r7, #12]
 8030012:	2206      	movs	r2, #6
 8030014:	87da      	strh	r2, [r3, #62]	; 0x3e
    pcb->rtime = -1;
 8030016:	68fb      	ldr	r3, [r7, #12]
 8030018:	f64f 72ff 	movw	r2, #65535	; 0xffff
 803001c:	861a      	strh	r2, [r3, #48]	; 0x30
    pcb->cwnd = 1;
 803001e:	68fb      	ldr	r3, [r7, #12]
 8030020:	2201      	movs	r2, #1
 8030022:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
    pcb->tmr = tcp_ticks;
 8030026:	4b0e      	ldr	r3, [pc, #56]	; (8030060 <tcp_alloc+0x14c>)
 8030028:	681a      	ldr	r2, [r3, #0]
 803002a:	68fb      	ldr	r3, [r7, #12]
 803002c:	621a      	str	r2, [r3, #32]
    pcb->last_timer = tcp_timer_ctr;
 803002e:	4b0d      	ldr	r3, [pc, #52]	; (8030064 <tcp_alloc+0x150>)
 8030030:	781a      	ldrb	r2, [r3, #0]
 8030032:	68fb      	ldr	r3, [r7, #12]
 8030034:	779a      	strb	r2, [r3, #30]
    of using the largest advertised receive window.  We've seen complications with
    receiving TCPs that use window scaling and/or window auto-tuning where the
    initial advertised window is very small and then grows rapidly once the
    connection is established. To avoid these complications, we set ssthresh to the
    largest effective cwnd (amount of in-flight data) that the sender can have. */
    pcb->ssthresh = TCP_SND_BUF;
 8030036:	68fb      	ldr	r3, [r7, #12]
 8030038:	f44f 6286 	mov.w	r2, #1072	; 0x430
 803003c:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

#if LWIP_CALLBACK_API
    pcb->recv = tcp_recv_null;
 8030040:	68fb      	ldr	r3, [r7, #12]
 8030042:	4a09      	ldr	r2, [pc, #36]	; (8030068 <tcp_alloc+0x154>)
 8030044:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#endif /* LWIP_CALLBACK_API */

    /* Init KEEPALIVE timer */
    pcb->keep_idle  = TCP_KEEPIDLE_DEFAULT;
 8030048:	68fb      	ldr	r3, [r7, #12]
 803004a:	4a08      	ldr	r2, [pc, #32]	; (803006c <tcp_alloc+0x158>)
 803004c:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
#if LWIP_TCP_KEEPALIVE
    pcb->keep_intvl = TCP_KEEPINTVL_DEFAULT;
    pcb->keep_cnt   = TCP_KEEPCNT_DEFAULT;
#endif /* LWIP_TCP_KEEPALIVE */
  }
  return pcb;
 8030050:	68fb      	ldr	r3, [r7, #12]
}
 8030052:	4618      	mov	r0, r3
 8030054:	3710      	adds	r7, #16
 8030056:	46bd      	mov	sp, r7
 8030058:	bd80      	pop	{r7, pc}
 803005a:	bf00      	nop
 803005c:	2000ee04 	.word	0x2000ee04
 8030060:	2000ef00 	.word	0x2000ef00
 8030064:	2000ef16 	.word	0x2000ef16
 8030068:	0802fccd 	.word	0x0802fccd
 803006c:	006ddd00 	.word	0x006ddd00

08030070 <tcp_new_ip_type>:
 * supply @ref IPADDR_TYPE_ANY as argument and bind to @ref IP_ANY_TYPE.
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_new_ip_type(u8_t type)
{
 8030070:	b580      	push	{r7, lr}
 8030072:	b084      	sub	sp, #16
 8030074:	af00      	add	r7, sp, #0
 8030076:	4603      	mov	r3, r0
 8030078:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;
  pcb = tcp_alloc(TCP_PRIO_NORMAL);
 803007a:	2040      	movs	r0, #64	; 0x40
 803007c:	f7ff ff4a 	bl	802ff14 <tcp_alloc>
 8030080:	60f8      	str	r0, [r7, #12]
    IP_SET_TYPE_VAL(pcb->remote_ip, type);
  }
#else
  LWIP_UNUSED_ARG(type);
#endif /* LWIP_IPV4 && LWIP_IPV6 */
  return pcb;
 8030082:	68fb      	ldr	r3, [r7, #12]
}
 8030084:	4618      	mov	r0, r3
 8030086:	3710      	adds	r7, #16
 8030088:	46bd      	mov	sp, r7
 803008a:	bd80      	pop	{r7, pc}

0803008c <tcp_arg>:
 * @param pcb tcp_pcb to set the callback argument
 * @param arg void pointer argument to pass to callback functions
 */
void
tcp_arg(struct tcp_pcb *pcb, void *arg)
{
 803008c:	b480      	push	{r7}
 803008e:	b083      	sub	sp, #12
 8030090:	af00      	add	r7, sp, #0
 8030092:	6078      	str	r0, [r7, #4]
 8030094:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  /* This function is allowed to be called for both listen pcbs and
     connection pcbs. */
  if (pcb != NULL) {
 8030096:	687b      	ldr	r3, [r7, #4]
 8030098:	2b00      	cmp	r3, #0
 803009a:	d002      	beq.n	80300a2 <tcp_arg+0x16>
    pcb->callback_arg = arg;
 803009c:	687b      	ldr	r3, [r7, #4]
 803009e:	683a      	ldr	r2, [r7, #0]
 80300a0:	611a      	str	r2, [r3, #16]
  }
}
 80300a2:	bf00      	nop
 80300a4:	370c      	adds	r7, #12
 80300a6:	46bd      	mov	sp, r7
 80300a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80300ac:	4770      	bx	lr
	...

080300b0 <tcp_recv>:
 * @param pcb tcp_pcb to set the recv callback
 * @param recv callback function to call for this pcb when data is received
 */
void
tcp_recv(struct tcp_pcb *pcb, tcp_recv_fn recv)
{
 80300b0:	b580      	push	{r7, lr}
 80300b2:	b082      	sub	sp, #8
 80300b4:	af00      	add	r7, sp, #0
 80300b6:	6078      	str	r0, [r7, #4]
 80300b8:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 80300ba:	687b      	ldr	r3, [r7, #4]
 80300bc:	2b00      	cmp	r3, #0
 80300be:	d00e      	beq.n	80300de <tcp_recv+0x2e>
    LWIP_ASSERT("invalid socket state for recv callback", pcb->state != LISTEN);
 80300c0:	687b      	ldr	r3, [r7, #4]
 80300c2:	7d1b      	ldrb	r3, [r3, #20]
 80300c4:	2b01      	cmp	r3, #1
 80300c6:	d106      	bne.n	80300d6 <tcp_recv+0x26>
 80300c8:	4b07      	ldr	r3, [pc, #28]	; (80300e8 <tcp_recv+0x38>)
 80300ca:	f240 72df 	movw	r2, #2015	; 0x7df
 80300ce:	4907      	ldr	r1, [pc, #28]	; (80300ec <tcp_recv+0x3c>)
 80300d0:	4807      	ldr	r0, [pc, #28]	; (80300f0 <tcp_recv+0x40>)
 80300d2:	f008 ffc9 	bl	8039068 <iprintf>
    pcb->recv = recv;
 80300d6:	687b      	ldr	r3, [r7, #4]
 80300d8:	683a      	ldr	r2, [r7, #0]
 80300da:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  }
}
 80300de:	bf00      	nop
 80300e0:	3708      	adds	r7, #8
 80300e2:	46bd      	mov	sp, r7
 80300e4:	bd80      	pop	{r7, pc}
 80300e6:	bf00      	nop
 80300e8:	0803b540 	.word	0x0803b540
 80300ec:	0803badc 	.word	0x0803badc
 80300f0:	0803b584 	.word	0x0803b584

080300f4 <tcp_sent>:
 * @param pcb tcp_pcb to set the sent callback
 * @param sent callback function to call for this pcb when data is successfully sent
 */
void
tcp_sent(struct tcp_pcb *pcb, tcp_sent_fn sent)
{
 80300f4:	b580      	push	{r7, lr}
 80300f6:	b082      	sub	sp, #8
 80300f8:	af00      	add	r7, sp, #0
 80300fa:	6078      	str	r0, [r7, #4]
 80300fc:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 80300fe:	687b      	ldr	r3, [r7, #4]
 8030100:	2b00      	cmp	r3, #0
 8030102:	d00e      	beq.n	8030122 <tcp_sent+0x2e>
    LWIP_ASSERT("invalid socket state for sent callback", pcb->state != LISTEN);
 8030104:	687b      	ldr	r3, [r7, #4]
 8030106:	7d1b      	ldrb	r3, [r3, #20]
 8030108:	2b01      	cmp	r3, #1
 803010a:	d106      	bne.n	803011a <tcp_sent+0x26>
 803010c:	4b07      	ldr	r3, [pc, #28]	; (803012c <tcp_sent+0x38>)
 803010e:	f240 72f3 	movw	r2, #2035	; 0x7f3
 8030112:	4907      	ldr	r1, [pc, #28]	; (8030130 <tcp_sent+0x3c>)
 8030114:	4807      	ldr	r0, [pc, #28]	; (8030134 <tcp_sent+0x40>)
 8030116:	f008 ffa7 	bl	8039068 <iprintf>
    pcb->sent = sent;
 803011a:	687b      	ldr	r3, [r7, #4]
 803011c:	683a      	ldr	r2, [r7, #0]
 803011e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  }
}
 8030122:	bf00      	nop
 8030124:	3708      	adds	r7, #8
 8030126:	46bd      	mov	sp, r7
 8030128:	bd80      	pop	{r7, pc}
 803012a:	bf00      	nop
 803012c:	0803b540 	.word	0x0803b540
 8030130:	0803bb04 	.word	0x0803bb04
 8030134:	0803b584 	.word	0x0803b584

08030138 <tcp_err>:
 * @param err callback function to call for this pcb when a fatal error
 *        has occurred on the connection
 */
void
tcp_err(struct tcp_pcb *pcb, tcp_err_fn err)
{
 8030138:	b580      	push	{r7, lr}
 803013a:	b082      	sub	sp, #8
 803013c:	af00      	add	r7, sp, #0
 803013e:	6078      	str	r0, [r7, #4]
 8030140:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 8030142:	687b      	ldr	r3, [r7, #4]
 8030144:	2b00      	cmp	r3, #0
 8030146:	d00e      	beq.n	8030166 <tcp_err+0x2e>
    LWIP_ASSERT("invalid socket state for err callback", pcb->state != LISTEN);
 8030148:	687b      	ldr	r3, [r7, #4]
 803014a:	7d1b      	ldrb	r3, [r3, #20]
 803014c:	2b01      	cmp	r3, #1
 803014e:	d106      	bne.n	803015e <tcp_err+0x26>
 8030150:	4b07      	ldr	r3, [pc, #28]	; (8030170 <tcp_err+0x38>)
 8030152:	f640 020d 	movw	r2, #2061	; 0x80d
 8030156:	4907      	ldr	r1, [pc, #28]	; (8030174 <tcp_err+0x3c>)
 8030158:	4807      	ldr	r0, [pc, #28]	; (8030178 <tcp_err+0x40>)
 803015a:	f008 ff85 	bl	8039068 <iprintf>
    pcb->errf = err;
 803015e:	687b      	ldr	r3, [r7, #4]
 8030160:	683a      	ldr	r2, [r7, #0]
 8030162:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  }
}
 8030166:	bf00      	nop
 8030168:	3708      	adds	r7, #8
 803016a:	46bd      	mov	sp, r7
 803016c:	bd80      	pop	{r7, pc}
 803016e:	bf00      	nop
 8030170:	0803b540 	.word	0x0803b540
 8030174:	0803bb2c 	.word	0x0803bb2c
 8030178:	0803b584 	.word	0x0803b584

0803017c <tcp_accept>:
 * @param accept callback function to call for this pcb when LISTENing
 *        connection has been connected to another host
 */
void
tcp_accept(struct tcp_pcb *pcb, tcp_accept_fn accept)
{
 803017c:	b480      	push	{r7}
 803017e:	b085      	sub	sp, #20
 8030180:	af00      	add	r7, sp, #0
 8030182:	6078      	str	r0, [r7, #4]
 8030184:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if ((pcb != NULL) && (pcb->state == LISTEN)) {
 8030186:	687b      	ldr	r3, [r7, #4]
 8030188:	2b00      	cmp	r3, #0
 803018a:	d008      	beq.n	803019e <tcp_accept+0x22>
 803018c:	687b      	ldr	r3, [r7, #4]
 803018e:	7d1b      	ldrb	r3, [r3, #20]
 8030190:	2b01      	cmp	r3, #1
 8030192:	d104      	bne.n	803019e <tcp_accept+0x22>
    struct tcp_pcb_listen *lpcb = (struct tcp_pcb_listen *)pcb;
 8030194:	687b      	ldr	r3, [r7, #4]
 8030196:	60fb      	str	r3, [r7, #12]
    lpcb->accept = accept;
 8030198:	68fb      	ldr	r3, [r7, #12]
 803019a:	683a      	ldr	r2, [r7, #0]
 803019c:	619a      	str	r2, [r3, #24]
  }
}
 803019e:	bf00      	nop
 80301a0:	3714      	adds	r7, #20
 80301a2:	46bd      	mov	sp, r7
 80301a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80301a8:	4770      	bx	lr
	...

080301ac <tcp_poll>:
 * the application may use the polling functionality to call tcp_write()
 * again when the connection has been idle for a while.
 */
void
tcp_poll(struct tcp_pcb *pcb, tcp_poll_fn poll, u8_t interval)
{
 80301ac:	b580      	push	{r7, lr}
 80301ae:	b084      	sub	sp, #16
 80301b0:	af00      	add	r7, sp, #0
 80301b2:	60f8      	str	r0, [r7, #12]
 80301b4:	60b9      	str	r1, [r7, #8]
 80301b6:	4613      	mov	r3, r2
 80301b8:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_poll: invalid pcb", pcb != NULL, return);
 80301ba:	68fb      	ldr	r3, [r7, #12]
 80301bc:	2b00      	cmp	r3, #0
 80301be:	d107      	bne.n	80301d0 <tcp_poll+0x24>
 80301c0:	4b0e      	ldr	r3, [pc, #56]	; (80301fc <tcp_poll+0x50>)
 80301c2:	f640 023d 	movw	r2, #2109	; 0x83d
 80301c6:	490e      	ldr	r1, [pc, #56]	; (8030200 <tcp_poll+0x54>)
 80301c8:	480e      	ldr	r0, [pc, #56]	; (8030204 <tcp_poll+0x58>)
 80301ca:	f008 ff4d 	bl	8039068 <iprintf>
 80301ce:	e011      	b.n	80301f4 <tcp_poll+0x48>
  LWIP_ASSERT("invalid socket state for poll", pcb->state != LISTEN);
 80301d0:	68fb      	ldr	r3, [r7, #12]
 80301d2:	7d1b      	ldrb	r3, [r3, #20]
 80301d4:	2b01      	cmp	r3, #1
 80301d6:	d106      	bne.n	80301e6 <tcp_poll+0x3a>
 80301d8:	4b08      	ldr	r3, [pc, #32]	; (80301fc <tcp_poll+0x50>)
 80301da:	f640 023e 	movw	r2, #2110	; 0x83e
 80301de:	490a      	ldr	r1, [pc, #40]	; (8030208 <tcp_poll+0x5c>)
 80301e0:	4808      	ldr	r0, [pc, #32]	; (8030204 <tcp_poll+0x58>)
 80301e2:	f008 ff41 	bl	8039068 <iprintf>

#if LWIP_CALLBACK_API
  pcb->poll = poll;
 80301e6:	68fb      	ldr	r3, [r7, #12]
 80301e8:	68ba      	ldr	r2, [r7, #8]
 80301ea:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
#else /* LWIP_CALLBACK_API */
  LWIP_UNUSED_ARG(poll);
#endif /* LWIP_CALLBACK_API */
  pcb->pollinterval = interval;
 80301ee:	68fb      	ldr	r3, [r7, #12]
 80301f0:	79fa      	ldrb	r2, [r7, #7]
 80301f2:	775a      	strb	r2, [r3, #29]
}
 80301f4:	3710      	adds	r7, #16
 80301f6:	46bd      	mov	sp, r7
 80301f8:	bd80      	pop	{r7, pc}
 80301fa:	bf00      	nop
 80301fc:	0803b540 	.word	0x0803b540
 8030200:	0803bb54 	.word	0x0803bb54
 8030204:	0803b584 	.word	0x0803b584
 8030208:	0803bb6c 	.word	0x0803bb6c

0803020c <tcp_pcb_purge>:
 *
 * @param pcb tcp_pcb to purge. The pcb itself is not deallocated!
 */
void
tcp_pcb_purge(struct tcp_pcb *pcb)
{
 803020c:	b580      	push	{r7, lr}
 803020e:	b082      	sub	sp, #8
 8030210:	af00      	add	r7, sp, #0
 8030212:	6078      	str	r0, [r7, #4]
  LWIP_ERROR("tcp_pcb_purge: invalid pcb", pcb != NULL, return);
 8030214:	687b      	ldr	r3, [r7, #4]
 8030216:	2b00      	cmp	r3, #0
 8030218:	d107      	bne.n	803022a <tcp_pcb_purge+0x1e>
 803021a:	4b21      	ldr	r3, [pc, #132]	; (80302a0 <tcp_pcb_purge+0x94>)
 803021c:	f640 0251 	movw	r2, #2129	; 0x851
 8030220:	4920      	ldr	r1, [pc, #128]	; (80302a4 <tcp_pcb_purge+0x98>)
 8030222:	4821      	ldr	r0, [pc, #132]	; (80302a8 <tcp_pcb_purge+0x9c>)
 8030224:	f008 ff20 	bl	8039068 <iprintf>
 8030228:	e037      	b.n	803029a <tcp_pcb_purge+0x8e>

  if (pcb->state != CLOSED &&
 803022a:	687b      	ldr	r3, [r7, #4]
 803022c:	7d1b      	ldrb	r3, [r3, #20]
 803022e:	2b00      	cmp	r3, #0
 8030230:	d033      	beq.n	803029a <tcp_pcb_purge+0x8e>
      pcb->state != TIME_WAIT &&
 8030232:	687b      	ldr	r3, [r7, #4]
 8030234:	7d1b      	ldrb	r3, [r3, #20]
  if (pcb->state != CLOSED &&
 8030236:	2b0a      	cmp	r3, #10
 8030238:	d02f      	beq.n	803029a <tcp_pcb_purge+0x8e>
      pcb->state != LISTEN) {
 803023a:	687b      	ldr	r3, [r7, #4]
 803023c:	7d1b      	ldrb	r3, [r3, #20]
      pcb->state != TIME_WAIT &&
 803023e:	2b01      	cmp	r3, #1
 8030240:	d02b      	beq.n	803029a <tcp_pcb_purge+0x8e>

    LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge\n"));

    tcp_backlog_accepted(pcb);

    if (pcb->refused_data != NULL) {
 8030242:	687b      	ldr	r3, [r7, #4]
 8030244:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8030246:	2b00      	cmp	r3, #0
 8030248:	d007      	beq.n	803025a <tcp_pcb_purge+0x4e>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->refused_data\n"));
      pbuf_free(pcb->refused_data);
 803024a:	687b      	ldr	r3, [r7, #4]
 803024c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 803024e:	4618      	mov	r0, r3
 8030250:	f7fe f85c 	bl	802e30c <pbuf_free>
      pcb->refused_data = NULL;
 8030254:	687b      	ldr	r3, [r7, #4]
 8030256:	2200      	movs	r2, #0
 8030258:	679a      	str	r2, [r3, #120]	; 0x78
    }
    if (pcb->unacked != NULL) {
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->unacked\n"));
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 803025a:	687b      	ldr	r3, [r7, #4]
 803025c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 803025e:	2b00      	cmp	r3, #0
 8030260:	d002      	beq.n	8030268 <tcp_pcb_purge+0x5c>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->ooseq\n"));
      tcp_free_ooseq(pcb);
 8030262:	6878      	ldr	r0, [r7, #4]
 8030264:	f000 f986 	bl	8030574 <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Stop the retransmission timer as it will expect data on unacked
       queue if it fires */
    pcb->rtime = -1;
 8030268:	687b      	ldr	r3, [r7, #4]
 803026a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 803026e:	861a      	strh	r2, [r3, #48]	; 0x30

    tcp_segs_free(pcb->unsent);
 8030270:	687b      	ldr	r3, [r7, #4]
 8030272:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8030274:	4618      	mov	r0, r3
 8030276:	f7ff fccf 	bl	802fc18 <tcp_segs_free>
    tcp_segs_free(pcb->unacked);
 803027a:	687b      	ldr	r3, [r7, #4]
 803027c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 803027e:	4618      	mov	r0, r3
 8030280:	f7ff fcca 	bl	802fc18 <tcp_segs_free>
    pcb->unacked = pcb->unsent = NULL;
 8030284:	687b      	ldr	r3, [r7, #4]
 8030286:	2200      	movs	r2, #0
 8030288:	66da      	str	r2, [r3, #108]	; 0x6c
 803028a:	687b      	ldr	r3, [r7, #4]
 803028c:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 803028e:	687b      	ldr	r3, [r7, #4]
 8030290:	671a      	str	r2, [r3, #112]	; 0x70
#if TCP_OVERSIZE
    pcb->unsent_oversize = 0;
 8030292:	687b      	ldr	r3, [r7, #4]
 8030294:	2200      	movs	r2, #0
 8030296:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* TCP_OVERSIZE */
  }
}
 803029a:	3708      	adds	r7, #8
 803029c:	46bd      	mov	sp, r7
 803029e:	bd80      	pop	{r7, pc}
 80302a0:	0803b540 	.word	0x0803b540
 80302a4:	0803bb8c 	.word	0x0803bb8c
 80302a8:	0803b584 	.word	0x0803b584

080302ac <tcp_pcb_remove>:
 * @param pcblist PCB list to purge.
 * @param pcb tcp_pcb to purge. The pcb itself is NOT deallocated!
 */
void
tcp_pcb_remove(struct tcp_pcb **pcblist, struct tcp_pcb *pcb)
{
 80302ac:	b580      	push	{r7, lr}
 80302ae:	b084      	sub	sp, #16
 80302b0:	af00      	add	r7, sp, #0
 80302b2:	6078      	str	r0, [r7, #4]
 80302b4:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("tcp_pcb_remove: invalid pcb", pcb != NULL);
 80302b6:	683b      	ldr	r3, [r7, #0]
 80302b8:	2b00      	cmp	r3, #0
 80302ba:	d106      	bne.n	80302ca <tcp_pcb_remove+0x1e>
 80302bc:	4b3e      	ldr	r3, [pc, #248]	; (80303b8 <tcp_pcb_remove+0x10c>)
 80302be:	f640 0283 	movw	r2, #2179	; 0x883
 80302c2:	493e      	ldr	r1, [pc, #248]	; (80303bc <tcp_pcb_remove+0x110>)
 80302c4:	483e      	ldr	r0, [pc, #248]	; (80303c0 <tcp_pcb_remove+0x114>)
 80302c6:	f008 fecf 	bl	8039068 <iprintf>
  LWIP_ASSERT("tcp_pcb_remove: invalid pcblist", pcblist != NULL);
 80302ca:	687b      	ldr	r3, [r7, #4]
 80302cc:	2b00      	cmp	r3, #0
 80302ce:	d106      	bne.n	80302de <tcp_pcb_remove+0x32>
 80302d0:	4b39      	ldr	r3, [pc, #228]	; (80303b8 <tcp_pcb_remove+0x10c>)
 80302d2:	f640 0284 	movw	r2, #2180	; 0x884
 80302d6:	493b      	ldr	r1, [pc, #236]	; (80303c4 <tcp_pcb_remove+0x118>)
 80302d8:	4839      	ldr	r0, [pc, #228]	; (80303c0 <tcp_pcb_remove+0x114>)
 80302da:	f008 fec5 	bl	8039068 <iprintf>

  TCP_RMV(pcblist, pcb);
 80302de:	687b      	ldr	r3, [r7, #4]
 80302e0:	681b      	ldr	r3, [r3, #0]
 80302e2:	683a      	ldr	r2, [r7, #0]
 80302e4:	429a      	cmp	r2, r3
 80302e6:	d105      	bne.n	80302f4 <tcp_pcb_remove+0x48>
 80302e8:	687b      	ldr	r3, [r7, #4]
 80302ea:	681b      	ldr	r3, [r3, #0]
 80302ec:	68da      	ldr	r2, [r3, #12]
 80302ee:	687b      	ldr	r3, [r7, #4]
 80302f0:	601a      	str	r2, [r3, #0]
 80302f2:	e013      	b.n	803031c <tcp_pcb_remove+0x70>
 80302f4:	687b      	ldr	r3, [r7, #4]
 80302f6:	681b      	ldr	r3, [r3, #0]
 80302f8:	60fb      	str	r3, [r7, #12]
 80302fa:	e00c      	b.n	8030316 <tcp_pcb_remove+0x6a>
 80302fc:	68fb      	ldr	r3, [r7, #12]
 80302fe:	68db      	ldr	r3, [r3, #12]
 8030300:	683a      	ldr	r2, [r7, #0]
 8030302:	429a      	cmp	r2, r3
 8030304:	d104      	bne.n	8030310 <tcp_pcb_remove+0x64>
 8030306:	683b      	ldr	r3, [r7, #0]
 8030308:	68da      	ldr	r2, [r3, #12]
 803030a:	68fb      	ldr	r3, [r7, #12]
 803030c:	60da      	str	r2, [r3, #12]
 803030e:	e005      	b.n	803031c <tcp_pcb_remove+0x70>
 8030310:	68fb      	ldr	r3, [r7, #12]
 8030312:	68db      	ldr	r3, [r3, #12]
 8030314:	60fb      	str	r3, [r7, #12]
 8030316:	68fb      	ldr	r3, [r7, #12]
 8030318:	2b00      	cmp	r3, #0
 803031a:	d1ef      	bne.n	80302fc <tcp_pcb_remove+0x50>
 803031c:	683b      	ldr	r3, [r7, #0]
 803031e:	2200      	movs	r2, #0
 8030320:	60da      	str	r2, [r3, #12]

  tcp_pcb_purge(pcb);
 8030322:	6838      	ldr	r0, [r7, #0]
 8030324:	f7ff ff72 	bl	803020c <tcp_pcb_purge>

  /* if there is an outstanding delayed ACKs, send it */
  if ((pcb->state != TIME_WAIT) &&
 8030328:	683b      	ldr	r3, [r7, #0]
 803032a:	7d1b      	ldrb	r3, [r3, #20]
 803032c:	2b0a      	cmp	r3, #10
 803032e:	d013      	beq.n	8030358 <tcp_pcb_remove+0xac>
      (pcb->state != LISTEN) &&
 8030330:	683b      	ldr	r3, [r7, #0]
 8030332:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != TIME_WAIT) &&
 8030334:	2b01      	cmp	r3, #1
 8030336:	d00f      	beq.n	8030358 <tcp_pcb_remove+0xac>
      (pcb->flags & TF_ACK_DELAY)) {
 8030338:	683b      	ldr	r3, [r7, #0]
 803033a:	8b5b      	ldrh	r3, [r3, #26]
 803033c:	f003 0301 	and.w	r3, r3, #1
      (pcb->state != LISTEN) &&
 8030340:	2b00      	cmp	r3, #0
 8030342:	d009      	beq.n	8030358 <tcp_pcb_remove+0xac>
    tcp_ack_now(pcb);
 8030344:	683b      	ldr	r3, [r7, #0]
 8030346:	8b5b      	ldrh	r3, [r3, #26]
 8030348:	f043 0302 	orr.w	r3, r3, #2
 803034c:	b29a      	uxth	r2, r3
 803034e:	683b      	ldr	r3, [r7, #0]
 8030350:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 8030352:	6838      	ldr	r0, [r7, #0]
 8030354:	f003 fc66 	bl	8033c24 <tcp_output>
  }

  if (pcb->state != LISTEN) {
 8030358:	683b      	ldr	r3, [r7, #0]
 803035a:	7d1b      	ldrb	r3, [r3, #20]
 803035c:	2b01      	cmp	r3, #1
 803035e:	d020      	beq.n	80303a2 <tcp_pcb_remove+0xf6>
    LWIP_ASSERT("unsent segments leaking", pcb->unsent == NULL);
 8030360:	683b      	ldr	r3, [r7, #0]
 8030362:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8030364:	2b00      	cmp	r3, #0
 8030366:	d006      	beq.n	8030376 <tcp_pcb_remove+0xca>
 8030368:	4b13      	ldr	r3, [pc, #76]	; (80303b8 <tcp_pcb_remove+0x10c>)
 803036a:	f640 0293 	movw	r2, #2195	; 0x893
 803036e:	4916      	ldr	r1, [pc, #88]	; (80303c8 <tcp_pcb_remove+0x11c>)
 8030370:	4813      	ldr	r0, [pc, #76]	; (80303c0 <tcp_pcb_remove+0x114>)
 8030372:	f008 fe79 	bl	8039068 <iprintf>
    LWIP_ASSERT("unacked segments leaking", pcb->unacked == NULL);
 8030376:	683b      	ldr	r3, [r7, #0]
 8030378:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 803037a:	2b00      	cmp	r3, #0
 803037c:	d006      	beq.n	803038c <tcp_pcb_remove+0xe0>
 803037e:	4b0e      	ldr	r3, [pc, #56]	; (80303b8 <tcp_pcb_remove+0x10c>)
 8030380:	f640 0294 	movw	r2, #2196	; 0x894
 8030384:	4911      	ldr	r1, [pc, #68]	; (80303cc <tcp_pcb_remove+0x120>)
 8030386:	480e      	ldr	r0, [pc, #56]	; (80303c0 <tcp_pcb_remove+0x114>)
 8030388:	f008 fe6e 	bl	8039068 <iprintf>
#if TCP_QUEUE_OOSEQ
    LWIP_ASSERT("ooseq segments leaking", pcb->ooseq == NULL);
 803038c:	683b      	ldr	r3, [r7, #0]
 803038e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8030390:	2b00      	cmp	r3, #0
 8030392:	d006      	beq.n	80303a2 <tcp_pcb_remove+0xf6>
 8030394:	4b08      	ldr	r3, [pc, #32]	; (80303b8 <tcp_pcb_remove+0x10c>)
 8030396:	f640 0296 	movw	r2, #2198	; 0x896
 803039a:	490d      	ldr	r1, [pc, #52]	; (80303d0 <tcp_pcb_remove+0x124>)
 803039c:	4808      	ldr	r0, [pc, #32]	; (80303c0 <tcp_pcb_remove+0x114>)
 803039e:	f008 fe63 	bl	8039068 <iprintf>
#endif /* TCP_QUEUE_OOSEQ */
  }

  pcb->state = CLOSED;
 80303a2:	683b      	ldr	r3, [r7, #0]
 80303a4:	2200      	movs	r2, #0
 80303a6:	751a      	strb	r2, [r3, #20]
  /* reset the local port to prevent the pcb from being 'bound' */
  pcb->local_port = 0;
 80303a8:	683b      	ldr	r3, [r7, #0]
 80303aa:	2200      	movs	r2, #0
 80303ac:	82da      	strh	r2, [r3, #22]

  LWIP_ASSERT("tcp_pcb_remove: tcp_pcbs_sane()", tcp_pcbs_sane());
}
 80303ae:	bf00      	nop
 80303b0:	3710      	adds	r7, #16
 80303b2:	46bd      	mov	sp, r7
 80303b4:	bd80      	pop	{r7, pc}
 80303b6:	bf00      	nop
 80303b8:	0803b540 	.word	0x0803b540
 80303bc:	0803bba8 	.word	0x0803bba8
 80303c0:	0803b584 	.word	0x0803b584
 80303c4:	0803bbc4 	.word	0x0803bbc4
 80303c8:	0803bbe4 	.word	0x0803bbe4
 80303cc:	0803bbfc 	.word	0x0803bbfc
 80303d0:	0803bc18 	.word	0x0803bc18

080303d4 <tcp_next_iss>:
 *
 * @return u32_t pseudo random sequence number
 */
u32_t
tcp_next_iss(struct tcp_pcb *pcb)
{
 80303d4:	b580      	push	{r7, lr}
 80303d6:	b082      	sub	sp, #8
 80303d8:	af00      	add	r7, sp, #0
 80303da:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
  return LWIP_HOOK_TCP_ISN(&pcb->local_ip, pcb->local_port, &pcb->remote_ip, pcb->remote_port);
#else /* LWIP_HOOK_TCP_ISN */
  static u32_t iss = 6510;

  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
 80303dc:	687b      	ldr	r3, [r7, #4]
 80303de:	2b00      	cmp	r3, #0
 80303e0:	d106      	bne.n	80303f0 <tcp_next_iss+0x1c>
 80303e2:	4b0a      	ldr	r3, [pc, #40]	; (803040c <tcp_next_iss+0x38>)
 80303e4:	f640 02af 	movw	r2, #2223	; 0x8af
 80303e8:	4909      	ldr	r1, [pc, #36]	; (8030410 <tcp_next_iss+0x3c>)
 80303ea:	480a      	ldr	r0, [pc, #40]	; (8030414 <tcp_next_iss+0x40>)
 80303ec:	f008 fe3c 	bl	8039068 <iprintf>
  LWIP_UNUSED_ARG(pcb);

  iss += tcp_ticks;       /* XXX */
 80303f0:	4b09      	ldr	r3, [pc, #36]	; (8030418 <tcp_next_iss+0x44>)
 80303f2:	681a      	ldr	r2, [r3, #0]
 80303f4:	4b09      	ldr	r3, [pc, #36]	; (803041c <tcp_next_iss+0x48>)
 80303f6:	681b      	ldr	r3, [r3, #0]
 80303f8:	4413      	add	r3, r2
 80303fa:	4a07      	ldr	r2, [pc, #28]	; (8030418 <tcp_next_iss+0x44>)
 80303fc:	6013      	str	r3, [r2, #0]
  return iss;
 80303fe:	4b06      	ldr	r3, [pc, #24]	; (8030418 <tcp_next_iss+0x44>)
 8030400:	681b      	ldr	r3, [r3, #0]
#endif /* LWIP_HOOK_TCP_ISN */
}
 8030402:	4618      	mov	r0, r3
 8030404:	3708      	adds	r7, #8
 8030406:	46bd      	mov	sp, r7
 8030408:	bd80      	pop	{r7, pc}
 803040a:	bf00      	nop
 803040c:	0803b540 	.word	0x0803b540
 8030410:	0803bc30 	.word	0x0803bc30
 8030414:	0803b584 	.word	0x0803b584
 8030418:	2000002c 	.word	0x2000002c
 803041c:	2000ef00 	.word	0x2000ef00

08030420 <tcp_eff_send_mss_netif>:
 * by calculating the minimum of TCP_MSS and the mtu (if set) of the target
 * netif (if not NULL).
 */
u16_t
tcp_eff_send_mss_netif(u16_t sendmss, struct netif *outif, const ip_addr_t *dest)
{
 8030420:	b580      	push	{r7, lr}
 8030422:	b086      	sub	sp, #24
 8030424:	af00      	add	r7, sp, #0
 8030426:	4603      	mov	r3, r0
 8030428:	60b9      	str	r1, [r7, #8]
 803042a:	607a      	str	r2, [r7, #4]
 803042c:	81fb      	strh	r3, [r7, #14]
  u16_t mss_s;
  u16_t mtu;

  LWIP_UNUSED_ARG(dest); /* in case IPv6 is disabled */

  LWIP_ASSERT("tcp_eff_send_mss_netif: invalid dst_ip", dest != NULL);
 803042e:	687b      	ldr	r3, [r7, #4]
 8030430:	2b00      	cmp	r3, #0
 8030432:	d106      	bne.n	8030442 <tcp_eff_send_mss_netif+0x22>
 8030434:	4b14      	ldr	r3, [pc, #80]	; (8030488 <tcp_eff_send_mss_netif+0x68>)
 8030436:	f640 02c5 	movw	r2, #2245	; 0x8c5
 803043a:	4914      	ldr	r1, [pc, #80]	; (803048c <tcp_eff_send_mss_netif+0x6c>)
 803043c:	4814      	ldr	r0, [pc, #80]	; (8030490 <tcp_eff_send_mss_netif+0x70>)
 803043e:	f008 fe13 	bl	8039068 <iprintf>
  else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
  {
    if (outif == NULL) {
 8030442:	68bb      	ldr	r3, [r7, #8]
 8030444:	2b00      	cmp	r3, #0
 8030446:	d101      	bne.n	803044c <tcp_eff_send_mss_netif+0x2c>
      return sendmss;
 8030448:	89fb      	ldrh	r3, [r7, #14]
 803044a:	e019      	b.n	8030480 <tcp_eff_send_mss_netif+0x60>
    }
    mtu = outif->mtu;
 803044c:	68bb      	ldr	r3, [r7, #8]
 803044e:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8030450:	82fb      	strh	r3, [r7, #22]
  }
#endif /* LWIP_IPV4 */

  if (mtu != 0) {
 8030452:	8afb      	ldrh	r3, [r7, #22]
 8030454:	2b00      	cmp	r3, #0
 8030456:	d012      	beq.n	803047e <tcp_eff_send_mss_netif+0x5e>
    else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    {
      offset = IP_HLEN + TCP_HLEN;
 8030458:	2328      	movs	r3, #40	; 0x28
 803045a:	82bb      	strh	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
    mss_s = (mtu > offset) ? (u16_t)(mtu - offset) : 0;
 803045c:	8afa      	ldrh	r2, [r7, #22]
 803045e:	8abb      	ldrh	r3, [r7, #20]
 8030460:	429a      	cmp	r2, r3
 8030462:	d904      	bls.n	803046e <tcp_eff_send_mss_netif+0x4e>
 8030464:	8afa      	ldrh	r2, [r7, #22]
 8030466:	8abb      	ldrh	r3, [r7, #20]
 8030468:	1ad3      	subs	r3, r2, r3
 803046a:	b29b      	uxth	r3, r3
 803046c:	e000      	b.n	8030470 <tcp_eff_send_mss_netif+0x50>
 803046e:	2300      	movs	r3, #0
 8030470:	827b      	strh	r3, [r7, #18]
    /* RFC 1122, chap 4.2.2.6:
     * Eff.snd.MSS = min(SendMSS+20, MMS_S) - TCPhdrsize - IPoptionsize
     * We correct for TCP options in tcp_write(), and don't support IP options.
     */
    sendmss = LWIP_MIN(sendmss, mss_s);
 8030472:	8a7a      	ldrh	r2, [r7, #18]
 8030474:	89fb      	ldrh	r3, [r7, #14]
 8030476:	4293      	cmp	r3, r2
 8030478:	bf28      	it	cs
 803047a:	4613      	movcs	r3, r2
 803047c:	81fb      	strh	r3, [r7, #14]
  }
  return sendmss;
 803047e:	89fb      	ldrh	r3, [r7, #14]
}
 8030480:	4618      	mov	r0, r3
 8030482:	3718      	adds	r7, #24
 8030484:	46bd      	mov	sp, r7
 8030486:	bd80      	pop	{r7, pc}
 8030488:	0803b540 	.word	0x0803b540
 803048c:	0803bc4c 	.word	0x0803bc4c
 8030490:	0803b584 	.word	0x0803b584

08030494 <tcp_netif_ip_addr_changed_pcblist>:
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

/** Helper function for tcp_netif_ip_addr_changed() that iterates a pcb list */
static void
tcp_netif_ip_addr_changed_pcblist(const ip_addr_t *old_addr, struct tcp_pcb *pcb_list)
{
 8030494:	b580      	push	{r7, lr}
 8030496:	b084      	sub	sp, #16
 8030498:	af00      	add	r7, sp, #0
 803049a:	6078      	str	r0, [r7, #4]
 803049c:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;
  pcb = pcb_list;
 803049e:	683b      	ldr	r3, [r7, #0]
 80304a0:	60fb      	str	r3, [r7, #12]

  LWIP_ASSERT("tcp_netif_ip_addr_changed_pcblist: invalid old_addr", old_addr != NULL);
 80304a2:	687b      	ldr	r3, [r7, #4]
 80304a4:	2b00      	cmp	r3, #0
 80304a6:	d119      	bne.n	80304dc <tcp_netif_ip_addr_changed_pcblist+0x48>
 80304a8:	4b10      	ldr	r3, [pc, #64]	; (80304ec <tcp_netif_ip_addr_changed_pcblist+0x58>)
 80304aa:	f44f 6210 	mov.w	r2, #2304	; 0x900
 80304ae:	4910      	ldr	r1, [pc, #64]	; (80304f0 <tcp_netif_ip_addr_changed_pcblist+0x5c>)
 80304b0:	4810      	ldr	r0, [pc, #64]	; (80304f4 <tcp_netif_ip_addr_changed_pcblist+0x60>)
 80304b2:	f008 fdd9 	bl	8039068 <iprintf>

  while (pcb != NULL) {
 80304b6:	e011      	b.n	80304dc <tcp_netif_ip_addr_changed_pcblist+0x48>
    /* PCB bound to current local interface address? */
    if (ip_addr_cmp(&pcb->local_ip, old_addr)
 80304b8:	68fb      	ldr	r3, [r7, #12]
 80304ba:	681a      	ldr	r2, [r3, #0]
 80304bc:	687b      	ldr	r3, [r7, #4]
 80304be:	681b      	ldr	r3, [r3, #0]
 80304c0:	429a      	cmp	r2, r3
 80304c2:	d108      	bne.n	80304d6 <tcp_netif_ip_addr_changed_pcblist+0x42>
        /* connections to link-local addresses must persist (RFC3927 ch. 1.9) */
        && (!IP_IS_V4_VAL(pcb->local_ip) || !ip4_addr_islinklocal(ip_2_ip4(&pcb->local_ip)))
#endif /* LWIP_AUTOIP */
       ) {
      /* this connection must be aborted */
      struct tcp_pcb *next = pcb->next;
 80304c4:	68fb      	ldr	r3, [r7, #12]
 80304c6:	68db      	ldr	r3, [r3, #12]
 80304c8:	60bb      	str	r3, [r7, #8]
      LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: aborting TCP pcb %p\n", (void *)pcb));
      tcp_abort(pcb);
 80304ca:	68f8      	ldr	r0, [r7, #12]
 80304cc:	f7fe fd26 	bl	802ef1c <tcp_abort>
      pcb = next;
 80304d0:	68bb      	ldr	r3, [r7, #8]
 80304d2:	60fb      	str	r3, [r7, #12]
 80304d4:	e002      	b.n	80304dc <tcp_netif_ip_addr_changed_pcblist+0x48>
    } else {
      pcb = pcb->next;
 80304d6:	68fb      	ldr	r3, [r7, #12]
 80304d8:	68db      	ldr	r3, [r3, #12]
 80304da:	60fb      	str	r3, [r7, #12]
  while (pcb != NULL) {
 80304dc:	68fb      	ldr	r3, [r7, #12]
 80304de:	2b00      	cmp	r3, #0
 80304e0:	d1ea      	bne.n	80304b8 <tcp_netif_ip_addr_changed_pcblist+0x24>
    }
  }
}
 80304e2:	bf00      	nop
 80304e4:	bf00      	nop
 80304e6:	3710      	adds	r7, #16
 80304e8:	46bd      	mov	sp, r7
 80304ea:	bd80      	pop	{r7, pc}
 80304ec:	0803b540 	.word	0x0803b540
 80304f0:	0803bc74 	.word	0x0803bc74
 80304f4:	0803b584 	.word	0x0803b584

080304f8 <tcp_netif_ip_addr_changed>:
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change or NULL if netif has been removed
 */
void
tcp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 80304f8:	b580      	push	{r7, lr}
 80304fa:	b084      	sub	sp, #16
 80304fc:	af00      	add	r7, sp, #0
 80304fe:	6078      	str	r0, [r7, #4]
 8030500:	6039      	str	r1, [r7, #0]
  struct tcp_pcb_listen *lpcb;

  if (!ip_addr_isany(old_addr)) {
 8030502:	687b      	ldr	r3, [r7, #4]
 8030504:	2b00      	cmp	r3, #0
 8030506:	d02a      	beq.n	803055e <tcp_netif_ip_addr_changed+0x66>
 8030508:	687b      	ldr	r3, [r7, #4]
 803050a:	681b      	ldr	r3, [r3, #0]
 803050c:	2b00      	cmp	r3, #0
 803050e:	d026      	beq.n	803055e <tcp_netif_ip_addr_changed+0x66>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_active_pcbs);
 8030510:	4b15      	ldr	r3, [pc, #84]	; (8030568 <tcp_netif_ip_addr_changed+0x70>)
 8030512:	681b      	ldr	r3, [r3, #0]
 8030514:	4619      	mov	r1, r3
 8030516:	6878      	ldr	r0, [r7, #4]
 8030518:	f7ff ffbc 	bl	8030494 <tcp_netif_ip_addr_changed_pcblist>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_bound_pcbs);
 803051c:	4b13      	ldr	r3, [pc, #76]	; (803056c <tcp_netif_ip_addr_changed+0x74>)
 803051e:	681b      	ldr	r3, [r3, #0]
 8030520:	4619      	mov	r1, r3
 8030522:	6878      	ldr	r0, [r7, #4]
 8030524:	f7ff ffb6 	bl	8030494 <tcp_netif_ip_addr_changed_pcblist>

    if (!ip_addr_isany(new_addr)) {
 8030528:	683b      	ldr	r3, [r7, #0]
 803052a:	2b00      	cmp	r3, #0
 803052c:	d017      	beq.n	803055e <tcp_netif_ip_addr_changed+0x66>
 803052e:	683b      	ldr	r3, [r7, #0]
 8030530:	681b      	ldr	r3, [r3, #0]
 8030532:	2b00      	cmp	r3, #0
 8030534:	d013      	beq.n	803055e <tcp_netif_ip_addr_changed+0x66>
      /* PCB bound to current local interface address? */
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8030536:	4b0e      	ldr	r3, [pc, #56]	; (8030570 <tcp_netif_ip_addr_changed+0x78>)
 8030538:	681b      	ldr	r3, [r3, #0]
 803053a:	60fb      	str	r3, [r7, #12]
 803053c:	e00c      	b.n	8030558 <tcp_netif_ip_addr_changed+0x60>
        /* PCB bound to current local interface address? */
        if (ip_addr_cmp(&lpcb->local_ip, old_addr)) {
 803053e:	68fb      	ldr	r3, [r7, #12]
 8030540:	681a      	ldr	r2, [r3, #0]
 8030542:	687b      	ldr	r3, [r7, #4]
 8030544:	681b      	ldr	r3, [r3, #0]
 8030546:	429a      	cmp	r2, r3
 8030548:	d103      	bne.n	8030552 <tcp_netif_ip_addr_changed+0x5a>
          /* The PCB is listening to the old ipaddr and
            * is set to listen to the new one instead */
          ip_addr_copy(lpcb->local_ip, *new_addr);
 803054a:	683b      	ldr	r3, [r7, #0]
 803054c:	681a      	ldr	r2, [r3, #0]
 803054e:	68fb      	ldr	r3, [r7, #12]
 8030550:	601a      	str	r2, [r3, #0]
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8030552:	68fb      	ldr	r3, [r7, #12]
 8030554:	68db      	ldr	r3, [r3, #12]
 8030556:	60fb      	str	r3, [r7, #12]
 8030558:	68fb      	ldr	r3, [r7, #12]
 803055a:	2b00      	cmp	r3, #0
 803055c:	d1ef      	bne.n	803053e <tcp_netif_ip_addr_changed+0x46>
        }
      }
    }
  }
}
 803055e:	bf00      	nop
 8030560:	3710      	adds	r7, #16
 8030562:	46bd      	mov	sp, r7
 8030564:	bd80      	pop	{r7, pc}
 8030566:	bf00      	nop
 8030568:	2000ef0c 	.word	0x2000ef0c
 803056c:	2000ef04 	.word	0x2000ef04
 8030570:	2000ef08 	.word	0x2000ef08

08030574 <tcp_free_ooseq>:

#if TCP_QUEUE_OOSEQ
/* Free all ooseq pbufs (and possibly reset SACK state) */
void
tcp_free_ooseq(struct tcp_pcb *pcb)
{
 8030574:	b580      	push	{r7, lr}
 8030576:	b082      	sub	sp, #8
 8030578:	af00      	add	r7, sp, #0
 803057a:	6078      	str	r0, [r7, #4]
  if (pcb->ooseq) {
 803057c:	687b      	ldr	r3, [r7, #4]
 803057e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8030580:	2b00      	cmp	r3, #0
 8030582:	d007      	beq.n	8030594 <tcp_free_ooseq+0x20>
    tcp_segs_free(pcb->ooseq);
 8030584:	687b      	ldr	r3, [r7, #4]
 8030586:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8030588:	4618      	mov	r0, r3
 803058a:	f7ff fb45 	bl	802fc18 <tcp_segs_free>
    pcb->ooseq = NULL;
 803058e:	687b      	ldr	r3, [r7, #4]
 8030590:	2200      	movs	r2, #0
 8030592:	675a      	str	r2, [r3, #116]	; 0x74
#if LWIP_TCP_SACK_OUT
    memset(pcb->rcv_sacks, 0, sizeof(pcb->rcv_sacks));
#endif /* LWIP_TCP_SACK_OUT */
  }
}
 8030594:	bf00      	nop
 8030596:	3708      	adds	r7, #8
 8030598:	46bd      	mov	sp, r7
 803059a:	bd80      	pop	{r7, pc}

0803059c <tcp_input>:
 * @param p received TCP segment to process (p->payload pointing to the TCP header)
 * @param inp network interface on which this segment was received
 */
void
tcp_input(struct pbuf *p, struct netif *inp)
{
 803059c:	b590      	push	{r4, r7, lr}
 803059e:	b08d      	sub	sp, #52	; 0x34
 80305a0:	af04      	add	r7, sp, #16
 80305a2:	6078      	str	r0, [r7, #4]
 80305a4:	6039      	str	r1, [r7, #0]
  u8_t hdrlen_bytes;
  err_t err;

  LWIP_UNUSED_ARG(inp);
  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("tcp_input: invalid pbuf", p != NULL);
 80305a6:	687b      	ldr	r3, [r7, #4]
 80305a8:	2b00      	cmp	r3, #0
 80305aa:	d105      	bne.n	80305b8 <tcp_input+0x1c>
 80305ac:	4b9b      	ldr	r3, [pc, #620]	; (803081c <tcp_input+0x280>)
 80305ae:	2283      	movs	r2, #131	; 0x83
 80305b0:	499b      	ldr	r1, [pc, #620]	; (8030820 <tcp_input+0x284>)
 80305b2:	489c      	ldr	r0, [pc, #624]	; (8030824 <tcp_input+0x288>)
 80305b4:	f008 fd58 	bl	8039068 <iprintf>

  PERF_START;

  TCP_STATS_INC(tcp.recv);
 80305b8:	4b9b      	ldr	r3, [pc, #620]	; (8030828 <tcp_input+0x28c>)
 80305ba:	f8b3 3092 	ldrh.w	r3, [r3, #146]	; 0x92
 80305be:	3301      	adds	r3, #1
 80305c0:	b29a      	uxth	r2, r3
 80305c2:	4b99      	ldr	r3, [pc, #612]	; (8030828 <tcp_input+0x28c>)
 80305c4:	f8a3 2092 	strh.w	r2, [r3, #146]	; 0x92
  MIB2_STATS_INC(mib2.tcpinsegs);

  tcphdr = (struct tcp_hdr *)p->payload;
 80305c8:	687b      	ldr	r3, [r7, #4]
 80305ca:	685b      	ldr	r3, [r3, #4]
 80305cc:	4a97      	ldr	r2, [pc, #604]	; (803082c <tcp_input+0x290>)
 80305ce:	6013      	str	r3, [r2, #0]
#if TCP_INPUT_DEBUG
  tcp_debug_print(tcphdr);
#endif

  /* Check that TCP header fits in payload */
  if (p->len < TCP_HLEN) {
 80305d0:	687b      	ldr	r3, [r7, #4]
 80305d2:	895b      	ldrh	r3, [r3, #10]
 80305d4:	2b13      	cmp	r3, #19
 80305d6:	d809      	bhi.n	80305ec <tcp_input+0x50>
    /* drop short packets */
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: short packet (%"U16_F" bytes) discarded\n", p->tot_len));
    TCP_STATS_INC(tcp.lenerr);
 80305d8:	4b93      	ldr	r3, [pc, #588]	; (8030828 <tcp_input+0x28c>)
 80305da:	f8b3 309a 	ldrh.w	r3, [r3, #154]	; 0x9a
 80305de:	3301      	adds	r3, #1
 80305e0:	b29a      	uxth	r2, r3
 80305e2:	4b91      	ldr	r3, [pc, #580]	; (8030828 <tcp_input+0x28c>)
 80305e4:	f8a3 209a 	strh.w	r2, [r3, #154]	; 0x9a
    goto dropped;
 80305e8:	f000 bc1c 	b.w	8030e24 <tcp_input+0x888>
  }

  /* Don't even process incoming broadcasts/multicasts. */
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 80305ec:	4b90      	ldr	r3, [pc, #576]	; (8030830 <tcp_input+0x294>)
 80305ee:	695b      	ldr	r3, [r3, #20]
 80305f0:	4a8f      	ldr	r2, [pc, #572]	; (8030830 <tcp_input+0x294>)
 80305f2:	6812      	ldr	r2, [r2, #0]
 80305f4:	4611      	mov	r1, r2
 80305f6:	4618      	mov	r0, r3
 80305f8:	f006 fdb0 	bl	803715c <ip4_addr_isbroadcast_u32>
 80305fc:	4603      	mov	r3, r0
 80305fe:	2b00      	cmp	r3, #0
 8030600:	d105      	bne.n	803060e <tcp_input+0x72>
      ip_addr_ismulticast(ip_current_dest_addr())) {
 8030602:	4b8b      	ldr	r3, [pc, #556]	; (8030830 <tcp_input+0x294>)
 8030604:	695b      	ldr	r3, [r3, #20]
 8030606:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 803060a:	2be0      	cmp	r3, #224	; 0xe0
 803060c:	d109      	bne.n	8030622 <tcp_input+0x86>
    TCP_STATS_INC(tcp.proterr);
 803060e:	4b86      	ldr	r3, [pc, #536]	; (8030828 <tcp_input+0x28c>)
 8030610:	f8b3 30a0 	ldrh.w	r3, [r3, #160]	; 0xa0
 8030614:	3301      	adds	r3, #1
 8030616:	b29a      	uxth	r2, r3
 8030618:	4b83      	ldr	r3, [pc, #524]	; (8030828 <tcp_input+0x28c>)
 803061a:	f8a3 20a0 	strh.w	r2, [r3, #160]	; 0xa0
    goto dropped;
 803061e:	f000 bc01 	b.w	8030e24 <tcp_input+0x888>
    }
  }
#endif /* CHECKSUM_CHECK_TCP */

  /* sanity-check header length */
  hdrlen_bytes = TCPH_HDRLEN_BYTES(tcphdr);
 8030622:	4b82      	ldr	r3, [pc, #520]	; (803082c <tcp_input+0x290>)
 8030624:	681b      	ldr	r3, [r3, #0]
 8030626:	899b      	ldrh	r3, [r3, #12]
 8030628:	b29b      	uxth	r3, r3
 803062a:	4618      	mov	r0, r3
 803062c:	f7fc f97a 	bl	802c924 <lwip_htons>
 8030630:	4603      	mov	r3, r0
 8030632:	0b1b      	lsrs	r3, r3, #12
 8030634:	b29b      	uxth	r3, r3
 8030636:	b2db      	uxtb	r3, r3
 8030638:	009b      	lsls	r3, r3, #2
 803063a:	74bb      	strb	r3, [r7, #18]
  if ((hdrlen_bytes < TCP_HLEN) || (hdrlen_bytes > p->tot_len)) {
 803063c:	7cbb      	ldrb	r3, [r7, #18]
 803063e:	2b13      	cmp	r3, #19
 8030640:	d905      	bls.n	803064e <tcp_input+0xb2>
 8030642:	7cbb      	ldrb	r3, [r7, #18]
 8030644:	b29a      	uxth	r2, r3
 8030646:	687b      	ldr	r3, [r7, #4]
 8030648:	891b      	ldrh	r3, [r3, #8]
 803064a:	429a      	cmp	r2, r3
 803064c:	d908      	bls.n	8030660 <tcp_input+0xc4>
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: invalid header length (%"U16_F")\n", (u16_t)hdrlen_bytes));
    TCP_STATS_INC(tcp.lenerr);
 803064e:	4b76      	ldr	r3, [pc, #472]	; (8030828 <tcp_input+0x28c>)
 8030650:	f8b3 309a 	ldrh.w	r3, [r3, #154]	; 0x9a
 8030654:	3301      	adds	r3, #1
 8030656:	b29a      	uxth	r2, r3
 8030658:	4b73      	ldr	r3, [pc, #460]	; (8030828 <tcp_input+0x28c>)
 803065a:	f8a3 209a 	strh.w	r2, [r3, #154]	; 0x9a
    goto dropped;
 803065e:	e3e1      	b.n	8030e24 <tcp_input+0x888>
  }

  /* Move the payload pointer in the pbuf so that it points to the
     TCP data instead of the TCP header. */
  tcphdr_optlen = (u16_t)(hdrlen_bytes - TCP_HLEN);
 8030660:	7cbb      	ldrb	r3, [r7, #18]
 8030662:	b29b      	uxth	r3, r3
 8030664:	3b14      	subs	r3, #20
 8030666:	b29a      	uxth	r2, r3
 8030668:	4b72      	ldr	r3, [pc, #456]	; (8030834 <tcp_input+0x298>)
 803066a:	801a      	strh	r2, [r3, #0]
  tcphdr_opt2 = NULL;
 803066c:	4b72      	ldr	r3, [pc, #456]	; (8030838 <tcp_input+0x29c>)
 803066e:	2200      	movs	r2, #0
 8030670:	601a      	str	r2, [r3, #0]
  if (p->len >= hdrlen_bytes) {
 8030672:	687b      	ldr	r3, [r7, #4]
 8030674:	895a      	ldrh	r2, [r3, #10]
 8030676:	7cbb      	ldrb	r3, [r7, #18]
 8030678:	b29b      	uxth	r3, r3
 803067a:	429a      	cmp	r2, r3
 803067c:	d309      	bcc.n	8030692 <tcp_input+0xf6>
    /* all options are in the first pbuf */
    tcphdr_opt1len = tcphdr_optlen;
 803067e:	4b6d      	ldr	r3, [pc, #436]	; (8030834 <tcp_input+0x298>)
 8030680:	881a      	ldrh	r2, [r3, #0]
 8030682:	4b6e      	ldr	r3, [pc, #440]	; (803083c <tcp_input+0x2a0>)
 8030684:	801a      	strh	r2, [r3, #0]
    pbuf_remove_header(p, hdrlen_bytes); /* cannot fail */
 8030686:	7cbb      	ldrb	r3, [r7, #18]
 8030688:	4619      	mov	r1, r3
 803068a:	6878      	ldr	r0, [r7, #4]
 803068c:	f7fd fd86 	bl	802e19c <pbuf_remove_header>
 8030690:	e056      	b.n	8030740 <tcp_input+0x1a4>
  } else {
    u16_t opt2len;
    /* TCP header fits into first pbuf, options don't - data is in the next pbuf */
    /* there must be a next pbuf, due to hdrlen_bytes sanity check above */
    LWIP_ASSERT("p->next != NULL", p->next != NULL);
 8030692:	687b      	ldr	r3, [r7, #4]
 8030694:	681b      	ldr	r3, [r3, #0]
 8030696:	2b00      	cmp	r3, #0
 8030698:	d105      	bne.n	80306a6 <tcp_input+0x10a>
 803069a:	4b60      	ldr	r3, [pc, #384]	; (803081c <tcp_input+0x280>)
 803069c:	22c2      	movs	r2, #194	; 0xc2
 803069e:	4968      	ldr	r1, [pc, #416]	; (8030840 <tcp_input+0x2a4>)
 80306a0:	4860      	ldr	r0, [pc, #384]	; (8030824 <tcp_input+0x288>)
 80306a2:	f008 fce1 	bl	8039068 <iprintf>

    /* advance over the TCP header (cannot fail) */
    pbuf_remove_header(p, TCP_HLEN);
 80306a6:	2114      	movs	r1, #20
 80306a8:	6878      	ldr	r0, [r7, #4]
 80306aa:	f7fd fd77 	bl	802e19c <pbuf_remove_header>

    /* determine how long the first and second parts of the options are */
    tcphdr_opt1len = p->len;
 80306ae:	687b      	ldr	r3, [r7, #4]
 80306b0:	895a      	ldrh	r2, [r3, #10]
 80306b2:	4b62      	ldr	r3, [pc, #392]	; (803083c <tcp_input+0x2a0>)
 80306b4:	801a      	strh	r2, [r3, #0]
    opt2len = (u16_t)(tcphdr_optlen - tcphdr_opt1len);
 80306b6:	4b5f      	ldr	r3, [pc, #380]	; (8030834 <tcp_input+0x298>)
 80306b8:	881a      	ldrh	r2, [r3, #0]
 80306ba:	4b60      	ldr	r3, [pc, #384]	; (803083c <tcp_input+0x2a0>)
 80306bc:	881b      	ldrh	r3, [r3, #0]
 80306be:	1ad3      	subs	r3, r2, r3
 80306c0:	823b      	strh	r3, [r7, #16]

    /* options continue in the next pbuf: set p to zero length and hide the
        options in the next pbuf (adjusting p->tot_len) */
    pbuf_remove_header(p, tcphdr_opt1len);
 80306c2:	4b5e      	ldr	r3, [pc, #376]	; (803083c <tcp_input+0x2a0>)
 80306c4:	881b      	ldrh	r3, [r3, #0]
 80306c6:	4619      	mov	r1, r3
 80306c8:	6878      	ldr	r0, [r7, #4]
 80306ca:	f7fd fd67 	bl	802e19c <pbuf_remove_header>

    /* check that the options fit in the second pbuf */
    if (opt2len > p->next->len) {
 80306ce:	687b      	ldr	r3, [r7, #4]
 80306d0:	681b      	ldr	r3, [r3, #0]
 80306d2:	895b      	ldrh	r3, [r3, #10]
 80306d4:	8a3a      	ldrh	r2, [r7, #16]
 80306d6:	429a      	cmp	r2, r3
 80306d8:	d908      	bls.n	80306ec <tcp_input+0x150>
      /* drop short packets */
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: options overflow second pbuf (%"U16_F" bytes)\n", p->next->len));
      TCP_STATS_INC(tcp.lenerr);
 80306da:	4b53      	ldr	r3, [pc, #332]	; (8030828 <tcp_input+0x28c>)
 80306dc:	f8b3 309a 	ldrh.w	r3, [r3, #154]	; 0x9a
 80306e0:	3301      	adds	r3, #1
 80306e2:	b29a      	uxth	r2, r3
 80306e4:	4b50      	ldr	r3, [pc, #320]	; (8030828 <tcp_input+0x28c>)
 80306e6:	f8a3 209a 	strh.w	r2, [r3, #154]	; 0x9a
      goto dropped;
 80306ea:	e39b      	b.n	8030e24 <tcp_input+0x888>
    }

    /* remember the pointer to the second part of the options */
    tcphdr_opt2 = (u8_t *)p->next->payload;
 80306ec:	687b      	ldr	r3, [r7, #4]
 80306ee:	681b      	ldr	r3, [r3, #0]
 80306f0:	685b      	ldr	r3, [r3, #4]
 80306f2:	4a51      	ldr	r2, [pc, #324]	; (8030838 <tcp_input+0x29c>)
 80306f4:	6013      	str	r3, [r2, #0]

    /* advance p->next to point after the options, and manually
        adjust p->tot_len to keep it consistent with the changed p->next */
    pbuf_remove_header(p->next, opt2len);
 80306f6:	687b      	ldr	r3, [r7, #4]
 80306f8:	681b      	ldr	r3, [r3, #0]
 80306fa:	8a3a      	ldrh	r2, [r7, #16]
 80306fc:	4611      	mov	r1, r2
 80306fe:	4618      	mov	r0, r3
 8030700:	f7fd fd4c 	bl	802e19c <pbuf_remove_header>
    p->tot_len = (u16_t)(p->tot_len - opt2len);
 8030704:	687b      	ldr	r3, [r7, #4]
 8030706:	891a      	ldrh	r2, [r3, #8]
 8030708:	8a3b      	ldrh	r3, [r7, #16]
 803070a:	1ad3      	subs	r3, r2, r3
 803070c:	b29a      	uxth	r2, r3
 803070e:	687b      	ldr	r3, [r7, #4]
 8030710:	811a      	strh	r2, [r3, #8]

    LWIP_ASSERT("p->len == 0", p->len == 0);
 8030712:	687b      	ldr	r3, [r7, #4]
 8030714:	895b      	ldrh	r3, [r3, #10]
 8030716:	2b00      	cmp	r3, #0
 8030718:	d005      	beq.n	8030726 <tcp_input+0x18a>
 803071a:	4b40      	ldr	r3, [pc, #256]	; (803081c <tcp_input+0x280>)
 803071c:	22df      	movs	r2, #223	; 0xdf
 803071e:	4949      	ldr	r1, [pc, #292]	; (8030844 <tcp_input+0x2a8>)
 8030720:	4840      	ldr	r0, [pc, #256]	; (8030824 <tcp_input+0x288>)
 8030722:	f008 fca1 	bl	8039068 <iprintf>
    LWIP_ASSERT("p->tot_len == p->next->tot_len", p->tot_len == p->next->tot_len);
 8030726:	687b      	ldr	r3, [r7, #4]
 8030728:	891a      	ldrh	r2, [r3, #8]
 803072a:	687b      	ldr	r3, [r7, #4]
 803072c:	681b      	ldr	r3, [r3, #0]
 803072e:	891b      	ldrh	r3, [r3, #8]
 8030730:	429a      	cmp	r2, r3
 8030732:	d005      	beq.n	8030740 <tcp_input+0x1a4>
 8030734:	4b39      	ldr	r3, [pc, #228]	; (803081c <tcp_input+0x280>)
 8030736:	22e0      	movs	r2, #224	; 0xe0
 8030738:	4943      	ldr	r1, [pc, #268]	; (8030848 <tcp_input+0x2ac>)
 803073a:	483a      	ldr	r0, [pc, #232]	; (8030824 <tcp_input+0x288>)
 803073c:	f008 fc94 	bl	8039068 <iprintf>
  }

  /* Convert fields in TCP header to host byte order. */
  tcphdr->src = lwip_ntohs(tcphdr->src);
 8030740:	4b3a      	ldr	r3, [pc, #232]	; (803082c <tcp_input+0x290>)
 8030742:	681b      	ldr	r3, [r3, #0]
 8030744:	881b      	ldrh	r3, [r3, #0]
 8030746:	b29b      	uxth	r3, r3
 8030748:	4a38      	ldr	r2, [pc, #224]	; (803082c <tcp_input+0x290>)
 803074a:	6814      	ldr	r4, [r2, #0]
 803074c:	4618      	mov	r0, r3
 803074e:	f7fc f8e9 	bl	802c924 <lwip_htons>
 8030752:	4603      	mov	r3, r0
 8030754:	8023      	strh	r3, [r4, #0]
  tcphdr->dest = lwip_ntohs(tcphdr->dest);
 8030756:	4b35      	ldr	r3, [pc, #212]	; (803082c <tcp_input+0x290>)
 8030758:	681b      	ldr	r3, [r3, #0]
 803075a:	885b      	ldrh	r3, [r3, #2]
 803075c:	b29b      	uxth	r3, r3
 803075e:	4a33      	ldr	r2, [pc, #204]	; (803082c <tcp_input+0x290>)
 8030760:	6814      	ldr	r4, [r2, #0]
 8030762:	4618      	mov	r0, r3
 8030764:	f7fc f8de 	bl	802c924 <lwip_htons>
 8030768:	4603      	mov	r3, r0
 803076a:	8063      	strh	r3, [r4, #2]
  seqno = tcphdr->seqno = lwip_ntohl(tcphdr->seqno);
 803076c:	4b2f      	ldr	r3, [pc, #188]	; (803082c <tcp_input+0x290>)
 803076e:	681b      	ldr	r3, [r3, #0]
 8030770:	685b      	ldr	r3, [r3, #4]
 8030772:	4a2e      	ldr	r2, [pc, #184]	; (803082c <tcp_input+0x290>)
 8030774:	6814      	ldr	r4, [r2, #0]
 8030776:	4618      	mov	r0, r3
 8030778:	f7fc f8e9 	bl	802c94e <lwip_htonl>
 803077c:	4603      	mov	r3, r0
 803077e:	6063      	str	r3, [r4, #4]
 8030780:	6863      	ldr	r3, [r4, #4]
 8030782:	4a32      	ldr	r2, [pc, #200]	; (803084c <tcp_input+0x2b0>)
 8030784:	6013      	str	r3, [r2, #0]
  ackno = tcphdr->ackno = lwip_ntohl(tcphdr->ackno);
 8030786:	4b29      	ldr	r3, [pc, #164]	; (803082c <tcp_input+0x290>)
 8030788:	681b      	ldr	r3, [r3, #0]
 803078a:	689b      	ldr	r3, [r3, #8]
 803078c:	4a27      	ldr	r2, [pc, #156]	; (803082c <tcp_input+0x290>)
 803078e:	6814      	ldr	r4, [r2, #0]
 8030790:	4618      	mov	r0, r3
 8030792:	f7fc f8dc 	bl	802c94e <lwip_htonl>
 8030796:	4603      	mov	r3, r0
 8030798:	60a3      	str	r3, [r4, #8]
 803079a:	68a3      	ldr	r3, [r4, #8]
 803079c:	4a2c      	ldr	r2, [pc, #176]	; (8030850 <tcp_input+0x2b4>)
 803079e:	6013      	str	r3, [r2, #0]
  tcphdr->wnd = lwip_ntohs(tcphdr->wnd);
 80307a0:	4b22      	ldr	r3, [pc, #136]	; (803082c <tcp_input+0x290>)
 80307a2:	681b      	ldr	r3, [r3, #0]
 80307a4:	89db      	ldrh	r3, [r3, #14]
 80307a6:	b29b      	uxth	r3, r3
 80307a8:	4a20      	ldr	r2, [pc, #128]	; (803082c <tcp_input+0x290>)
 80307aa:	6814      	ldr	r4, [r2, #0]
 80307ac:	4618      	mov	r0, r3
 80307ae:	f7fc f8b9 	bl	802c924 <lwip_htons>
 80307b2:	4603      	mov	r3, r0
 80307b4:	81e3      	strh	r3, [r4, #14]

  flags = TCPH_FLAGS(tcphdr);
 80307b6:	4b1d      	ldr	r3, [pc, #116]	; (803082c <tcp_input+0x290>)
 80307b8:	681b      	ldr	r3, [r3, #0]
 80307ba:	899b      	ldrh	r3, [r3, #12]
 80307bc:	b29b      	uxth	r3, r3
 80307be:	4618      	mov	r0, r3
 80307c0:	f7fc f8b0 	bl	802c924 <lwip_htons>
 80307c4:	4603      	mov	r3, r0
 80307c6:	b2db      	uxtb	r3, r3
 80307c8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80307cc:	b2da      	uxtb	r2, r3
 80307ce:	4b21      	ldr	r3, [pc, #132]	; (8030854 <tcp_input+0x2b8>)
 80307d0:	701a      	strb	r2, [r3, #0]
  tcplen = p->tot_len;
 80307d2:	687b      	ldr	r3, [r7, #4]
 80307d4:	891a      	ldrh	r2, [r3, #8]
 80307d6:	4b20      	ldr	r3, [pc, #128]	; (8030858 <tcp_input+0x2bc>)
 80307d8:	801a      	strh	r2, [r3, #0]
  if (flags & (TCP_FIN | TCP_SYN)) {
 80307da:	4b1e      	ldr	r3, [pc, #120]	; (8030854 <tcp_input+0x2b8>)
 80307dc:	781b      	ldrb	r3, [r3, #0]
 80307de:	f003 0303 	and.w	r3, r3, #3
 80307e2:	2b00      	cmp	r3, #0
 80307e4:	d014      	beq.n	8030810 <tcp_input+0x274>
    tcplen++;
 80307e6:	4b1c      	ldr	r3, [pc, #112]	; (8030858 <tcp_input+0x2bc>)
 80307e8:	881b      	ldrh	r3, [r3, #0]
 80307ea:	3301      	adds	r3, #1
 80307ec:	b29a      	uxth	r2, r3
 80307ee:	4b1a      	ldr	r3, [pc, #104]	; (8030858 <tcp_input+0x2bc>)
 80307f0:	801a      	strh	r2, [r3, #0]
    if (tcplen < p->tot_len) {
 80307f2:	687b      	ldr	r3, [r7, #4]
 80307f4:	891a      	ldrh	r2, [r3, #8]
 80307f6:	4b18      	ldr	r3, [pc, #96]	; (8030858 <tcp_input+0x2bc>)
 80307f8:	881b      	ldrh	r3, [r3, #0]
 80307fa:	429a      	cmp	r2, r3
 80307fc:	d908      	bls.n	8030810 <tcp_input+0x274>
      /* u16_t overflow, cannot handle this */
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: length u16_t overflow, cannot handle this\n"));
      TCP_STATS_INC(tcp.lenerr);
 80307fe:	4b0a      	ldr	r3, [pc, #40]	; (8030828 <tcp_input+0x28c>)
 8030800:	f8b3 309a 	ldrh.w	r3, [r3, #154]	; 0x9a
 8030804:	3301      	adds	r3, #1
 8030806:	b29a      	uxth	r2, r3
 8030808:	4b07      	ldr	r3, [pc, #28]	; (8030828 <tcp_input+0x28c>)
 803080a:	f8a3 209a 	strh.w	r2, [r3, #154]	; 0x9a
      goto dropped;
 803080e:	e309      	b.n	8030e24 <tcp_input+0x888>
    }
  }

  /* Demultiplex an incoming segment. First, we check if it is destined
     for an active connection. */
  prev = NULL;
 8030810:	2300      	movs	r3, #0
 8030812:	61bb      	str	r3, [r7, #24]

  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8030814:	4b11      	ldr	r3, [pc, #68]	; (803085c <tcp_input+0x2c0>)
 8030816:	681b      	ldr	r3, [r3, #0]
 8030818:	61fb      	str	r3, [r7, #28]
 803081a:	e0a1      	b.n	8030960 <tcp_input+0x3c4>
 803081c:	0803bca8 	.word	0x0803bca8
 8030820:	0803bcdc 	.word	0x0803bcdc
 8030824:	0803bcf4 	.word	0x0803bcf4
 8030828:	2000ee04 	.word	0x2000ee04
 803082c:	2000ef28 	.word	0x2000ef28
 8030830:	2000b320 	.word	0x2000b320
 8030834:	2000ef2c 	.word	0x2000ef2c
 8030838:	2000ef30 	.word	0x2000ef30
 803083c:	2000ef2e 	.word	0x2000ef2e
 8030840:	0803bd1c 	.word	0x0803bd1c
 8030844:	0803bd2c 	.word	0x0803bd2c
 8030848:	0803bd38 	.word	0x0803bd38
 803084c:	2000ef38 	.word	0x2000ef38
 8030850:	2000ef3c 	.word	0x2000ef3c
 8030854:	2000ef44 	.word	0x2000ef44
 8030858:	2000ef42 	.word	0x2000ef42
 803085c:	2000ef0c 	.word	0x2000ef0c
    LWIP_ASSERT("tcp_input: active pcb->state != CLOSED", pcb->state != CLOSED);
 8030860:	69fb      	ldr	r3, [r7, #28]
 8030862:	7d1b      	ldrb	r3, [r3, #20]
 8030864:	2b00      	cmp	r3, #0
 8030866:	d105      	bne.n	8030874 <tcp_input+0x2d8>
 8030868:	4b8a      	ldr	r3, [pc, #552]	; (8030a94 <tcp_input+0x4f8>)
 803086a:	22fb      	movs	r2, #251	; 0xfb
 803086c:	498a      	ldr	r1, [pc, #552]	; (8030a98 <tcp_input+0x4fc>)
 803086e:	488b      	ldr	r0, [pc, #556]	; (8030a9c <tcp_input+0x500>)
 8030870:	f008 fbfa 	bl	8039068 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != TIME-WAIT", pcb->state != TIME_WAIT);
 8030874:	69fb      	ldr	r3, [r7, #28]
 8030876:	7d1b      	ldrb	r3, [r3, #20]
 8030878:	2b0a      	cmp	r3, #10
 803087a:	d105      	bne.n	8030888 <tcp_input+0x2ec>
 803087c:	4b85      	ldr	r3, [pc, #532]	; (8030a94 <tcp_input+0x4f8>)
 803087e:	22fc      	movs	r2, #252	; 0xfc
 8030880:	4987      	ldr	r1, [pc, #540]	; (8030aa0 <tcp_input+0x504>)
 8030882:	4886      	ldr	r0, [pc, #536]	; (8030a9c <tcp_input+0x500>)
 8030884:	f008 fbf0 	bl	8039068 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != LISTEN", pcb->state != LISTEN);
 8030888:	69fb      	ldr	r3, [r7, #28]
 803088a:	7d1b      	ldrb	r3, [r3, #20]
 803088c:	2b01      	cmp	r3, #1
 803088e:	d105      	bne.n	803089c <tcp_input+0x300>
 8030890:	4b80      	ldr	r3, [pc, #512]	; (8030a94 <tcp_input+0x4f8>)
 8030892:	22fd      	movs	r2, #253	; 0xfd
 8030894:	4983      	ldr	r1, [pc, #524]	; (8030aa4 <tcp_input+0x508>)
 8030896:	4881      	ldr	r0, [pc, #516]	; (8030a9c <tcp_input+0x500>)
 8030898:	f008 fbe6 	bl	8039068 <iprintf>

    /* check if PCB is bound to specific netif */
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 803089c:	69fb      	ldr	r3, [r7, #28]
 803089e:	7a1b      	ldrb	r3, [r3, #8]
 80308a0:	2b00      	cmp	r3, #0
 80308a2:	d00c      	beq.n	80308be <tcp_input+0x322>
        (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 80308a4:	69fb      	ldr	r3, [r7, #28]
 80308a6:	7a1a      	ldrb	r2, [r3, #8]
 80308a8:	4b7f      	ldr	r3, [pc, #508]	; (8030aa8 <tcp_input+0x50c>)
 80308aa:	685b      	ldr	r3, [r3, #4]
 80308ac:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80308b0:	3301      	adds	r3, #1
 80308b2:	b2db      	uxtb	r3, r3
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 80308b4:	429a      	cmp	r2, r3
 80308b6:	d002      	beq.n	80308be <tcp_input+0x322>
      prev = pcb;
 80308b8:	69fb      	ldr	r3, [r7, #28]
 80308ba:	61bb      	str	r3, [r7, #24]
      continue;
 80308bc:	e04d      	b.n	803095a <tcp_input+0x3be>
    }

    if (pcb->remote_port == tcphdr->src &&
 80308be:	69fb      	ldr	r3, [r7, #28]
 80308c0:	8b1a      	ldrh	r2, [r3, #24]
 80308c2:	4b7a      	ldr	r3, [pc, #488]	; (8030aac <tcp_input+0x510>)
 80308c4:	681b      	ldr	r3, [r3, #0]
 80308c6:	881b      	ldrh	r3, [r3, #0]
 80308c8:	b29b      	uxth	r3, r3
 80308ca:	429a      	cmp	r2, r3
 80308cc:	d143      	bne.n	8030956 <tcp_input+0x3ba>
        pcb->local_port == tcphdr->dest &&
 80308ce:	69fb      	ldr	r3, [r7, #28]
 80308d0:	8ada      	ldrh	r2, [r3, #22]
 80308d2:	4b76      	ldr	r3, [pc, #472]	; (8030aac <tcp_input+0x510>)
 80308d4:	681b      	ldr	r3, [r3, #0]
 80308d6:	885b      	ldrh	r3, [r3, #2]
 80308d8:	b29b      	uxth	r3, r3
    if (pcb->remote_port == tcphdr->src &&
 80308da:	429a      	cmp	r2, r3
 80308dc:	d13b      	bne.n	8030956 <tcp_input+0x3ba>
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 80308de:	69fb      	ldr	r3, [r7, #28]
 80308e0:	685a      	ldr	r2, [r3, #4]
 80308e2:	4b71      	ldr	r3, [pc, #452]	; (8030aa8 <tcp_input+0x50c>)
 80308e4:	691b      	ldr	r3, [r3, #16]
        pcb->local_port == tcphdr->dest &&
 80308e6:	429a      	cmp	r2, r3
 80308e8:	d135      	bne.n	8030956 <tcp_input+0x3ba>
        ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 80308ea:	69fb      	ldr	r3, [r7, #28]
 80308ec:	681a      	ldr	r2, [r3, #0]
 80308ee:	4b6e      	ldr	r3, [pc, #440]	; (8030aa8 <tcp_input+0x50c>)
 80308f0:	695b      	ldr	r3, [r3, #20]
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 80308f2:	429a      	cmp	r2, r3
 80308f4:	d12f      	bne.n	8030956 <tcp_input+0x3ba>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      LWIP_ASSERT("tcp_input: pcb->next != pcb (before cache)", pcb->next != pcb);
 80308f6:	69fb      	ldr	r3, [r7, #28]
 80308f8:	68db      	ldr	r3, [r3, #12]
 80308fa:	69fa      	ldr	r2, [r7, #28]
 80308fc:	429a      	cmp	r2, r3
 80308fe:	d106      	bne.n	803090e <tcp_input+0x372>
 8030900:	4b64      	ldr	r3, [pc, #400]	; (8030a94 <tcp_input+0x4f8>)
 8030902:	f240 120d 	movw	r2, #269	; 0x10d
 8030906:	496a      	ldr	r1, [pc, #424]	; (8030ab0 <tcp_input+0x514>)
 8030908:	4864      	ldr	r0, [pc, #400]	; (8030a9c <tcp_input+0x500>)
 803090a:	f008 fbad 	bl	8039068 <iprintf>
      if (prev != NULL) {
 803090e:	69bb      	ldr	r3, [r7, #24]
 8030910:	2b00      	cmp	r3, #0
 8030912:	d00b      	beq.n	803092c <tcp_input+0x390>
        prev->next = pcb->next;
 8030914:	69fb      	ldr	r3, [r7, #28]
 8030916:	68da      	ldr	r2, [r3, #12]
 8030918:	69bb      	ldr	r3, [r7, #24]
 803091a:	60da      	str	r2, [r3, #12]
        pcb->next = tcp_active_pcbs;
 803091c:	4b65      	ldr	r3, [pc, #404]	; (8030ab4 <tcp_input+0x518>)
 803091e:	681a      	ldr	r2, [r3, #0]
 8030920:	69fb      	ldr	r3, [r7, #28]
 8030922:	60da      	str	r2, [r3, #12]
        tcp_active_pcbs = pcb;
 8030924:	4a63      	ldr	r2, [pc, #396]	; (8030ab4 <tcp_input+0x518>)
 8030926:	69fb      	ldr	r3, [r7, #28]
 8030928:	6013      	str	r3, [r2, #0]
 803092a:	e007      	b.n	803093c <tcp_input+0x3a0>
      } else {
        TCP_STATS_INC(tcp.cachehit);
 803092c:	4b62      	ldr	r3, [pc, #392]	; (8030ab8 <tcp_input+0x51c>)
 803092e:	f8b3 30a6 	ldrh.w	r3, [r3, #166]	; 0xa6
 8030932:	3301      	adds	r3, #1
 8030934:	b29a      	uxth	r2, r3
 8030936:	4b60      	ldr	r3, [pc, #384]	; (8030ab8 <tcp_input+0x51c>)
 8030938:	f8a3 20a6 	strh.w	r2, [r3, #166]	; 0xa6
      }
      LWIP_ASSERT("tcp_input: pcb->next != pcb (after cache)", pcb->next != pcb);
 803093c:	69fb      	ldr	r3, [r7, #28]
 803093e:	68db      	ldr	r3, [r3, #12]
 8030940:	69fa      	ldr	r2, [r7, #28]
 8030942:	429a      	cmp	r2, r3
 8030944:	d111      	bne.n	803096a <tcp_input+0x3ce>
 8030946:	4b53      	ldr	r3, [pc, #332]	; (8030a94 <tcp_input+0x4f8>)
 8030948:	f240 1215 	movw	r2, #277	; 0x115
 803094c:	495b      	ldr	r1, [pc, #364]	; (8030abc <tcp_input+0x520>)
 803094e:	4853      	ldr	r0, [pc, #332]	; (8030a9c <tcp_input+0x500>)
 8030950:	f008 fb8a 	bl	8039068 <iprintf>
      break;
 8030954:	e009      	b.n	803096a <tcp_input+0x3ce>
    }
    prev = pcb;
 8030956:	69fb      	ldr	r3, [r7, #28]
 8030958:	61bb      	str	r3, [r7, #24]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 803095a:	69fb      	ldr	r3, [r7, #28]
 803095c:	68db      	ldr	r3, [r3, #12]
 803095e:	61fb      	str	r3, [r7, #28]
 8030960:	69fb      	ldr	r3, [r7, #28]
 8030962:	2b00      	cmp	r3, #0
 8030964:	f47f af7c 	bne.w	8030860 <tcp_input+0x2c4>
 8030968:	e000      	b.n	803096c <tcp_input+0x3d0>
      break;
 803096a:	bf00      	nop
  }

  if (pcb == NULL) {
 803096c:	69fb      	ldr	r3, [r7, #28]
 803096e:	2b00      	cmp	r3, #0
 8030970:	f040 80bb 	bne.w	8030aea <tcp_input+0x54e>
    /* If it did not go to an active connection, we check the connections
       in the TIME-WAIT state. */
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8030974:	4b52      	ldr	r3, [pc, #328]	; (8030ac0 <tcp_input+0x524>)
 8030976:	681b      	ldr	r3, [r3, #0]
 8030978:	61fb      	str	r3, [r7, #28]
 803097a:	e03f      	b.n	80309fc <tcp_input+0x460>
      LWIP_ASSERT("tcp_input: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 803097c:	69fb      	ldr	r3, [r7, #28]
 803097e:	7d1b      	ldrb	r3, [r3, #20]
 8030980:	2b0a      	cmp	r3, #10
 8030982:	d006      	beq.n	8030992 <tcp_input+0x3f6>
 8030984:	4b43      	ldr	r3, [pc, #268]	; (8030a94 <tcp_input+0x4f8>)
 8030986:	f240 121f 	movw	r2, #287	; 0x11f
 803098a:	494e      	ldr	r1, [pc, #312]	; (8030ac4 <tcp_input+0x528>)
 803098c:	4843      	ldr	r0, [pc, #268]	; (8030a9c <tcp_input+0x500>)
 803098e:	f008 fb6b 	bl	8039068 <iprintf>

      /* check if PCB is bound to specific netif */
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8030992:	69fb      	ldr	r3, [r7, #28]
 8030994:	7a1b      	ldrb	r3, [r3, #8]
 8030996:	2b00      	cmp	r3, #0
 8030998:	d009      	beq.n	80309ae <tcp_input+0x412>
          (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 803099a:	69fb      	ldr	r3, [r7, #28]
 803099c:	7a1a      	ldrb	r2, [r3, #8]
 803099e:	4b42      	ldr	r3, [pc, #264]	; (8030aa8 <tcp_input+0x50c>)
 80309a0:	685b      	ldr	r3, [r3, #4]
 80309a2:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80309a6:	3301      	adds	r3, #1
 80309a8:	b2db      	uxtb	r3, r3
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 80309aa:	429a      	cmp	r2, r3
 80309ac:	d122      	bne.n	80309f4 <tcp_input+0x458>
        continue;
      }

      if (pcb->remote_port == tcphdr->src &&
 80309ae:	69fb      	ldr	r3, [r7, #28]
 80309b0:	8b1a      	ldrh	r2, [r3, #24]
 80309b2:	4b3e      	ldr	r3, [pc, #248]	; (8030aac <tcp_input+0x510>)
 80309b4:	681b      	ldr	r3, [r3, #0]
 80309b6:	881b      	ldrh	r3, [r3, #0]
 80309b8:	b29b      	uxth	r3, r3
 80309ba:	429a      	cmp	r2, r3
 80309bc:	d11b      	bne.n	80309f6 <tcp_input+0x45a>
          pcb->local_port == tcphdr->dest &&
 80309be:	69fb      	ldr	r3, [r7, #28]
 80309c0:	8ada      	ldrh	r2, [r3, #22]
 80309c2:	4b3a      	ldr	r3, [pc, #232]	; (8030aac <tcp_input+0x510>)
 80309c4:	681b      	ldr	r3, [r3, #0]
 80309c6:	885b      	ldrh	r3, [r3, #2]
 80309c8:	b29b      	uxth	r3, r3
      if (pcb->remote_port == tcphdr->src &&
 80309ca:	429a      	cmp	r2, r3
 80309cc:	d113      	bne.n	80309f6 <tcp_input+0x45a>
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 80309ce:	69fb      	ldr	r3, [r7, #28]
 80309d0:	685a      	ldr	r2, [r3, #4]
 80309d2:	4b35      	ldr	r3, [pc, #212]	; (8030aa8 <tcp_input+0x50c>)
 80309d4:	691b      	ldr	r3, [r3, #16]
          pcb->local_port == tcphdr->dest &&
 80309d6:	429a      	cmp	r2, r3
 80309d8:	d10d      	bne.n	80309f6 <tcp_input+0x45a>
          ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 80309da:	69fb      	ldr	r3, [r7, #28]
 80309dc:	681a      	ldr	r2, [r3, #0]
 80309de:	4b32      	ldr	r3, [pc, #200]	; (8030aa8 <tcp_input+0x50c>)
 80309e0:	695b      	ldr	r3, [r3, #20]
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 80309e2:	429a      	cmp	r2, r3
 80309e4:	d107      	bne.n	80309f6 <tcp_input+0x45a>
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
        if (LWIP_HOOK_TCP_INPACKET_PCB(pcb, tcphdr, tcphdr_optlen, tcphdr_opt1len,
                                       tcphdr_opt2, p) == ERR_OK)
#endif
        {
          tcp_timewait_input(pcb);
 80309e6:	69f8      	ldr	r0, [r7, #28]
 80309e8:	f000 fb88 	bl	80310fc <tcp_timewait_input>
        }
        pbuf_free(p);
 80309ec:	6878      	ldr	r0, [r7, #4]
 80309ee:	f7fd fc8d 	bl	802e30c <pbuf_free>
        return;
 80309f2:	e224      	b.n	8030e3e <tcp_input+0x8a2>
        continue;
 80309f4:	bf00      	nop
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 80309f6:	69fb      	ldr	r3, [r7, #28]
 80309f8:	68db      	ldr	r3, [r3, #12]
 80309fa:	61fb      	str	r3, [r7, #28]
 80309fc:	69fb      	ldr	r3, [r7, #28]
 80309fe:	2b00      	cmp	r3, #0
 8030a00:	d1bc      	bne.n	803097c <tcp_input+0x3e0>
      }
    }

    /* Finally, if we still did not get a match, we check all PCBs that
       are LISTENing for incoming connections. */
    prev = NULL;
 8030a02:	2300      	movs	r3, #0
 8030a04:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8030a06:	4b30      	ldr	r3, [pc, #192]	; (8030ac8 <tcp_input+0x52c>)
 8030a08:	681b      	ldr	r3, [r3, #0]
 8030a0a:	617b      	str	r3, [r7, #20]
 8030a0c:	e02a      	b.n	8030a64 <tcp_input+0x4c8>
      /* check if PCB is bound to specific netif */
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 8030a0e:	697b      	ldr	r3, [r7, #20]
 8030a10:	7a1b      	ldrb	r3, [r3, #8]
 8030a12:	2b00      	cmp	r3, #0
 8030a14:	d00c      	beq.n	8030a30 <tcp_input+0x494>
          (lpcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 8030a16:	697b      	ldr	r3, [r7, #20]
 8030a18:	7a1a      	ldrb	r2, [r3, #8]
 8030a1a:	4b23      	ldr	r3, [pc, #140]	; (8030aa8 <tcp_input+0x50c>)
 8030a1c:	685b      	ldr	r3, [r3, #4]
 8030a1e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8030a22:	3301      	adds	r3, #1
 8030a24:	b2db      	uxtb	r3, r3
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 8030a26:	429a      	cmp	r2, r3
 8030a28:	d002      	beq.n	8030a30 <tcp_input+0x494>
        prev = (struct tcp_pcb *)lpcb;
 8030a2a:	697b      	ldr	r3, [r7, #20]
 8030a2c:	61bb      	str	r3, [r7, #24]
        continue;
 8030a2e:	e016      	b.n	8030a5e <tcp_input+0x4c2>
      }

      if (lpcb->local_port == tcphdr->dest) {
 8030a30:	697b      	ldr	r3, [r7, #20]
 8030a32:	8ada      	ldrh	r2, [r3, #22]
 8030a34:	4b1d      	ldr	r3, [pc, #116]	; (8030aac <tcp_input+0x510>)
 8030a36:	681b      	ldr	r3, [r3, #0]
 8030a38:	885b      	ldrh	r3, [r3, #2]
 8030a3a:	b29b      	uxth	r3, r3
 8030a3c:	429a      	cmp	r2, r3
 8030a3e:	d10c      	bne.n	8030a5a <tcp_input+0x4be>
          lpcb_prev = prev;
#else /* SO_REUSE */
          break;
#endif /* SO_REUSE */
        } else if (IP_ADDR_PCB_VERSION_MATCH_EXACT(lpcb, ip_current_dest_addr())) {
          if (ip_addr_cmp(&lpcb->local_ip, ip_current_dest_addr())) {
 8030a40:	697b      	ldr	r3, [r7, #20]
 8030a42:	681a      	ldr	r2, [r3, #0]
 8030a44:	4b18      	ldr	r3, [pc, #96]	; (8030aa8 <tcp_input+0x50c>)
 8030a46:	695b      	ldr	r3, [r3, #20]
 8030a48:	429a      	cmp	r2, r3
 8030a4a:	d00f      	beq.n	8030a6c <tcp_input+0x4d0>
            /* found an exact match */
            break;
          } else if (ip_addr_isany(&lpcb->local_ip)) {
 8030a4c:	697b      	ldr	r3, [r7, #20]
 8030a4e:	2b00      	cmp	r3, #0
 8030a50:	d00d      	beq.n	8030a6e <tcp_input+0x4d2>
 8030a52:	697b      	ldr	r3, [r7, #20]
 8030a54:	681b      	ldr	r3, [r3, #0]
 8030a56:	2b00      	cmp	r3, #0
 8030a58:	d009      	beq.n	8030a6e <tcp_input+0x4d2>
            break;
#endif /* SO_REUSE */
          }
        }
      }
      prev = (struct tcp_pcb *)lpcb;
 8030a5a:	697b      	ldr	r3, [r7, #20]
 8030a5c:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8030a5e:	697b      	ldr	r3, [r7, #20]
 8030a60:	68db      	ldr	r3, [r3, #12]
 8030a62:	617b      	str	r3, [r7, #20]
 8030a64:	697b      	ldr	r3, [r7, #20]
 8030a66:	2b00      	cmp	r3, #0
 8030a68:	d1d1      	bne.n	8030a0e <tcp_input+0x472>
 8030a6a:	e000      	b.n	8030a6e <tcp_input+0x4d2>
            break;
 8030a6c:	bf00      	nop
      /* only pass to ANY if no specific local IP has been found */
      lpcb = lpcb_any;
      prev = lpcb_prev;
    }
#endif /* SO_REUSE */
    if (lpcb != NULL) {
 8030a6e:	697b      	ldr	r3, [r7, #20]
 8030a70:	2b00      	cmp	r3, #0
 8030a72:	d03a      	beq.n	8030aea <tcp_input+0x54e>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      if (prev != NULL) {
 8030a74:	69bb      	ldr	r3, [r7, #24]
 8030a76:	2b00      	cmp	r3, #0
 8030a78:	d028      	beq.n	8030acc <tcp_input+0x530>
        ((struct tcp_pcb_listen *)prev)->next = lpcb->next;
 8030a7a:	697b      	ldr	r3, [r7, #20]
 8030a7c:	68da      	ldr	r2, [r3, #12]
 8030a7e:	69bb      	ldr	r3, [r7, #24]
 8030a80:	60da      	str	r2, [r3, #12]
        /* our successor is the remainder of the listening list */
        lpcb->next = tcp_listen_pcbs.listen_pcbs;
 8030a82:	4b11      	ldr	r3, [pc, #68]	; (8030ac8 <tcp_input+0x52c>)
 8030a84:	681a      	ldr	r2, [r3, #0]
 8030a86:	697b      	ldr	r3, [r7, #20]
 8030a88:	60da      	str	r2, [r3, #12]
        /* put this listening pcb at the head of the listening list */
        tcp_listen_pcbs.listen_pcbs = lpcb;
 8030a8a:	4a0f      	ldr	r2, [pc, #60]	; (8030ac8 <tcp_input+0x52c>)
 8030a8c:	697b      	ldr	r3, [r7, #20]
 8030a8e:	6013      	str	r3, [r2, #0]
 8030a90:	e024      	b.n	8030adc <tcp_input+0x540>
 8030a92:	bf00      	nop
 8030a94:	0803bca8 	.word	0x0803bca8
 8030a98:	0803bd58 	.word	0x0803bd58
 8030a9c:	0803bcf4 	.word	0x0803bcf4
 8030aa0:	0803bd80 	.word	0x0803bd80
 8030aa4:	0803bdac 	.word	0x0803bdac
 8030aa8:	2000b320 	.word	0x2000b320
 8030aac:	2000ef28 	.word	0x2000ef28
 8030ab0:	0803bdd4 	.word	0x0803bdd4
 8030ab4:	2000ef0c 	.word	0x2000ef0c
 8030ab8:	2000ee04 	.word	0x2000ee04
 8030abc:	0803be00 	.word	0x0803be00
 8030ac0:	2000ef10 	.word	0x2000ef10
 8030ac4:	0803be2c 	.word	0x0803be2c
 8030ac8:	2000ef08 	.word	0x2000ef08
      } else {
        TCP_STATS_INC(tcp.cachehit);
 8030acc:	4ba0      	ldr	r3, [pc, #640]	; (8030d50 <tcp_input+0x7b4>)
 8030ace:	f8b3 30a6 	ldrh.w	r3, [r3, #166]	; 0xa6
 8030ad2:	3301      	adds	r3, #1
 8030ad4:	b29a      	uxth	r2, r3
 8030ad6:	4b9e      	ldr	r3, [pc, #632]	; (8030d50 <tcp_input+0x7b4>)
 8030ad8:	f8a3 20a6 	strh.w	r2, [r3, #166]	; 0xa6
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
      if (LWIP_HOOK_TCP_INPACKET_PCB((struct tcp_pcb *)lpcb, tcphdr, tcphdr_optlen,
                                     tcphdr_opt1len, tcphdr_opt2, p) == ERR_OK)
#endif
      {
        tcp_listen_input(lpcb);
 8030adc:	6978      	ldr	r0, [r7, #20]
 8030ade:	f000 fa05 	bl	8030eec <tcp_listen_input>
      }
      pbuf_free(p);
 8030ae2:	6878      	ldr	r0, [r7, #4]
 8030ae4:	f7fd fc12 	bl	802e30c <pbuf_free>
      return;
 8030ae8:	e1a9      	b.n	8030e3e <tcp_input+0x8a2>
      tcphdr_opt1len, tcphdr_opt2, p) != ERR_OK) {
    pbuf_free(p);
    return;
  }
#endif
  if (pcb != NULL) {
 8030aea:	69fb      	ldr	r3, [r7, #28]
 8030aec:	2b00      	cmp	r3, #0
 8030aee:	f000 815f 	beq.w	8030db0 <tcp_input+0x814>
#if TCP_INPUT_DEBUG
    tcp_debug_print_state(pcb->state);
#endif /* TCP_INPUT_DEBUG */

    /* Set up a tcp_seg structure. */
    inseg.next = NULL;
 8030af2:	4b98      	ldr	r3, [pc, #608]	; (8030d54 <tcp_input+0x7b8>)
 8030af4:	2200      	movs	r2, #0
 8030af6:	601a      	str	r2, [r3, #0]
    inseg.len = p->tot_len;
 8030af8:	687b      	ldr	r3, [r7, #4]
 8030afa:	891a      	ldrh	r2, [r3, #8]
 8030afc:	4b95      	ldr	r3, [pc, #596]	; (8030d54 <tcp_input+0x7b8>)
 8030afe:	811a      	strh	r2, [r3, #8]
    inseg.p = p;
 8030b00:	4a94      	ldr	r2, [pc, #592]	; (8030d54 <tcp_input+0x7b8>)
 8030b02:	687b      	ldr	r3, [r7, #4]
 8030b04:	6053      	str	r3, [r2, #4]
    inseg.tcphdr = tcphdr;
 8030b06:	4b94      	ldr	r3, [pc, #592]	; (8030d58 <tcp_input+0x7bc>)
 8030b08:	681b      	ldr	r3, [r3, #0]
 8030b0a:	4a92      	ldr	r2, [pc, #584]	; (8030d54 <tcp_input+0x7b8>)
 8030b0c:	60d3      	str	r3, [r2, #12]

    recv_data = NULL;
 8030b0e:	4b93      	ldr	r3, [pc, #588]	; (8030d5c <tcp_input+0x7c0>)
 8030b10:	2200      	movs	r2, #0
 8030b12:	601a      	str	r2, [r3, #0]
    recv_flags = 0;
 8030b14:	4b92      	ldr	r3, [pc, #584]	; (8030d60 <tcp_input+0x7c4>)
 8030b16:	2200      	movs	r2, #0
 8030b18:	701a      	strb	r2, [r3, #0]
    recv_acked = 0;
 8030b1a:	4b92      	ldr	r3, [pc, #584]	; (8030d64 <tcp_input+0x7c8>)
 8030b1c:	2200      	movs	r2, #0
 8030b1e:	801a      	strh	r2, [r3, #0]

    if (flags & TCP_PSH) {
 8030b20:	4b91      	ldr	r3, [pc, #580]	; (8030d68 <tcp_input+0x7cc>)
 8030b22:	781b      	ldrb	r3, [r3, #0]
 8030b24:	f003 0308 	and.w	r3, r3, #8
 8030b28:	2b00      	cmp	r3, #0
 8030b2a:	d006      	beq.n	8030b3a <tcp_input+0x59e>
      p->flags |= PBUF_FLAG_PUSH;
 8030b2c:	687b      	ldr	r3, [r7, #4]
 8030b2e:	7b5b      	ldrb	r3, [r3, #13]
 8030b30:	f043 0301 	orr.w	r3, r3, #1
 8030b34:	b2da      	uxtb	r2, r3
 8030b36:	687b      	ldr	r3, [r7, #4]
 8030b38:	735a      	strb	r2, [r3, #13]
    }

    /* If there is data which was previously "refused" by upper layer */
    if (pcb->refused_data != NULL) {
 8030b3a:	69fb      	ldr	r3, [r7, #28]
 8030b3c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8030b3e:	2b00      	cmp	r3, #0
 8030b40:	d01e      	beq.n	8030b80 <tcp_input+0x5e4>
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 8030b42:	69f8      	ldr	r0, [r7, #28]
 8030b44:	f7fe ffec 	bl	802fb20 <tcp_process_refused_data>
 8030b48:	4603      	mov	r3, r0
 8030b4a:	f113 0f0d 	cmn.w	r3, #13
 8030b4e:	d007      	beq.n	8030b60 <tcp_input+0x5c4>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 8030b50:	69fb      	ldr	r3, [r7, #28]
 8030b52:	6f9b      	ldr	r3, [r3, #120]	; 0x78
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 8030b54:	2b00      	cmp	r3, #0
 8030b56:	d013      	beq.n	8030b80 <tcp_input+0x5e4>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 8030b58:	4b84      	ldr	r3, [pc, #528]	; (8030d6c <tcp_input+0x7d0>)
 8030b5a:	881b      	ldrh	r3, [r3, #0]
 8030b5c:	2b00      	cmp	r3, #0
 8030b5e:	d00f      	beq.n	8030b80 <tcp_input+0x5e4>
        /* pcb has been aborted or refused data is still refused and the new
           segment contains data */
        if (pcb->rcv_ann_wnd == 0) {
 8030b60:	69fb      	ldr	r3, [r7, #28]
 8030b62:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8030b64:	2b00      	cmp	r3, #0
 8030b66:	d102      	bne.n	8030b6e <tcp_input+0x5d2>
          /* this is a zero-window probe, we respond to it with current RCV.NXT
          and drop the data segment */
          tcp_send_empty_ack(pcb);
 8030b68:	69f8      	ldr	r0, [r7, #28]
 8030b6a:	f003 fe75 	bl	8034858 <tcp_send_empty_ack>
        }
        TCP_STATS_INC(tcp.drop);
 8030b6e:	4b78      	ldr	r3, [pc, #480]	; (8030d50 <tcp_input+0x7b4>)
 8030b70:	f8b3 3096 	ldrh.w	r3, [r3, #150]	; 0x96
 8030b74:	3301      	adds	r3, #1
 8030b76:	b29a      	uxth	r2, r3
 8030b78:	4b75      	ldr	r3, [pc, #468]	; (8030d50 <tcp_input+0x7b4>)
 8030b7a:	f8a3 2096 	strh.w	r2, [r3, #150]	; 0x96
        MIB2_STATS_INC(mib2.tcpinerrs);
        goto aborted;
 8030b7e:	e104      	b.n	8030d8a <tcp_input+0x7ee>
      }
    }
    tcp_input_pcb = pcb;
 8030b80:	4a7b      	ldr	r2, [pc, #492]	; (8030d70 <tcp_input+0x7d4>)
 8030b82:	69fb      	ldr	r3, [r7, #28]
 8030b84:	6013      	str	r3, [r2, #0]
    err = tcp_process(pcb);
 8030b86:	69f8      	ldr	r0, [r7, #28]
 8030b88:	f000 fb32 	bl	80311f0 <tcp_process>
 8030b8c:	4603      	mov	r3, r0
 8030b8e:	74fb      	strb	r3, [r7, #19]
    /* A return value of ERR_ABRT means that tcp_abort() was called
       and that the pcb has been freed. If so, we don't do anything. */
    if (err != ERR_ABRT) {
 8030b90:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8030b94:	f113 0f0d 	cmn.w	r3, #13
 8030b98:	f000 80d1 	beq.w	8030d3e <tcp_input+0x7a2>
      if (recv_flags & TF_RESET) {
 8030b9c:	4b70      	ldr	r3, [pc, #448]	; (8030d60 <tcp_input+0x7c4>)
 8030b9e:	781b      	ldrb	r3, [r3, #0]
 8030ba0:	f003 0308 	and.w	r3, r3, #8
 8030ba4:	2b00      	cmp	r3, #0
 8030ba6:	d015      	beq.n	8030bd4 <tcp_input+0x638>
        /* TF_RESET means that the connection was reset by the other
           end. We then call the error callback to inform the
           application that the connection is dead before we
           deallocate the PCB. */
        TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_RST);
 8030ba8:	69fb      	ldr	r3, [r7, #28]
 8030baa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8030bae:	2b00      	cmp	r3, #0
 8030bb0:	d008      	beq.n	8030bc4 <tcp_input+0x628>
 8030bb2:	69fb      	ldr	r3, [r7, #28]
 8030bb4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8030bb8:	69fa      	ldr	r2, [r7, #28]
 8030bba:	6912      	ldr	r2, [r2, #16]
 8030bbc:	f06f 010d 	mvn.w	r1, #13
 8030bc0:	4610      	mov	r0, r2
 8030bc2:	4798      	blx	r3
        tcp_pcb_remove(&tcp_active_pcbs, pcb);
 8030bc4:	69f9      	ldr	r1, [r7, #28]
 8030bc6:	486b      	ldr	r0, [pc, #428]	; (8030d74 <tcp_input+0x7d8>)
 8030bc8:	f7ff fb70 	bl	80302ac <tcp_pcb_remove>
        tcp_free(pcb);
 8030bcc:	69f8      	ldr	r0, [r7, #28]
 8030bce:	f7fd fe61 	bl	802e894 <tcp_free>
 8030bd2:	e0da      	b.n	8030d8a <tcp_input+0x7ee>
      } else {
        err = ERR_OK;
 8030bd4:	2300      	movs	r3, #0
 8030bd6:	74fb      	strb	r3, [r7, #19]
        /* If the application has registered a "sent" function to be
           called when new send buffer space is available, we call it
           now. */
        if (recv_acked > 0) {
 8030bd8:	4b62      	ldr	r3, [pc, #392]	; (8030d64 <tcp_input+0x7c8>)
 8030bda:	881b      	ldrh	r3, [r3, #0]
 8030bdc:	2b00      	cmp	r3, #0
 8030bde:	d01d      	beq.n	8030c1c <tcp_input+0x680>
          while (acked > 0) {
            acked16 = (u16_t)LWIP_MIN(acked, 0xffffu);
            acked -= acked16;
#else
          {
            acked16 = recv_acked;
 8030be0:	4b60      	ldr	r3, [pc, #384]	; (8030d64 <tcp_input+0x7c8>)
 8030be2:	881b      	ldrh	r3, [r3, #0]
 8030be4:	81fb      	strh	r3, [r7, #14]
#endif
            TCP_EVENT_SENT(pcb, (u16_t)acked16, err);
 8030be6:	69fb      	ldr	r3, [r7, #28]
 8030be8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8030bec:	2b00      	cmp	r3, #0
 8030bee:	d00a      	beq.n	8030c06 <tcp_input+0x66a>
 8030bf0:	69fb      	ldr	r3, [r7, #28]
 8030bf2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8030bf6:	69fa      	ldr	r2, [r7, #28]
 8030bf8:	6910      	ldr	r0, [r2, #16]
 8030bfa:	89fa      	ldrh	r2, [r7, #14]
 8030bfc:	69f9      	ldr	r1, [r7, #28]
 8030bfe:	4798      	blx	r3
 8030c00:	4603      	mov	r3, r0
 8030c02:	74fb      	strb	r3, [r7, #19]
 8030c04:	e001      	b.n	8030c0a <tcp_input+0x66e>
 8030c06:	2300      	movs	r3, #0
 8030c08:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 8030c0a:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8030c0e:	f113 0f0d 	cmn.w	r3, #13
 8030c12:	f000 8096 	beq.w	8030d42 <tcp_input+0x7a6>
              goto aborted;
            }
          }
          recv_acked = 0;
 8030c16:	4b53      	ldr	r3, [pc, #332]	; (8030d64 <tcp_input+0x7c8>)
 8030c18:	2200      	movs	r2, #0
 8030c1a:	801a      	strh	r2, [r3, #0]
        }
        if (tcp_input_delayed_close(pcb)) {
 8030c1c:	69f8      	ldr	r0, [r7, #28]
 8030c1e:	f000 f925 	bl	8030e6c <tcp_input_delayed_close>
 8030c22:	4603      	mov	r3, r0
 8030c24:	2b00      	cmp	r3, #0
 8030c26:	f040 808e 	bne.w	8030d46 <tcp_input+0x7aa>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
        while (recv_data != NULL) {
          struct pbuf *rest = NULL;
          pbuf_split_64k(recv_data, &rest);
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
        if (recv_data != NULL) {
 8030c2a:	4b4c      	ldr	r3, [pc, #304]	; (8030d5c <tcp_input+0x7c0>)
 8030c2c:	681b      	ldr	r3, [r3, #0]
 8030c2e:	2b00      	cmp	r3, #0
 8030c30:	d041      	beq.n	8030cb6 <tcp_input+0x71a>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

          LWIP_ASSERT("pcb->refused_data == NULL", pcb->refused_data == NULL);
 8030c32:	69fb      	ldr	r3, [r7, #28]
 8030c34:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8030c36:	2b00      	cmp	r3, #0
 8030c38:	d006      	beq.n	8030c48 <tcp_input+0x6ac>
 8030c3a:	4b4f      	ldr	r3, [pc, #316]	; (8030d78 <tcp_input+0x7dc>)
 8030c3c:	f44f 72f3 	mov.w	r2, #486	; 0x1e6
 8030c40:	494e      	ldr	r1, [pc, #312]	; (8030d7c <tcp_input+0x7e0>)
 8030c42:	484f      	ldr	r0, [pc, #316]	; (8030d80 <tcp_input+0x7e4>)
 8030c44:	f008 fa10 	bl	8039068 <iprintf>
          if (pcb->flags & TF_RXCLOSED) {
 8030c48:	69fb      	ldr	r3, [r7, #28]
 8030c4a:	8b5b      	ldrh	r3, [r3, #26]
 8030c4c:	f003 0310 	and.w	r3, r3, #16
 8030c50:	2b00      	cmp	r3, #0
 8030c52:	d008      	beq.n	8030c66 <tcp_input+0x6ca>
            /* received data although already closed -> abort (send RST) to
               notify the remote host that not all data has been processed */
            pbuf_free(recv_data);
 8030c54:	4b41      	ldr	r3, [pc, #260]	; (8030d5c <tcp_input+0x7c0>)
 8030c56:	681b      	ldr	r3, [r3, #0]
 8030c58:	4618      	mov	r0, r3
 8030c5a:	f7fd fb57 	bl	802e30c <pbuf_free>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_free(rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            tcp_abort(pcb);
 8030c5e:	69f8      	ldr	r0, [r7, #28]
 8030c60:	f7fe f95c 	bl	802ef1c <tcp_abort>
            goto aborted;
 8030c64:	e091      	b.n	8030d8a <tcp_input+0x7ee>
          }

          /* Notify application that data has been received. */
          TCP_EVENT_RECV(pcb, recv_data, ERR_OK, err);
 8030c66:	69fb      	ldr	r3, [r7, #28]
 8030c68:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8030c6c:	2b00      	cmp	r3, #0
 8030c6e:	d00c      	beq.n	8030c8a <tcp_input+0x6ee>
 8030c70:	69fb      	ldr	r3, [r7, #28]
 8030c72:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 8030c76:	69fb      	ldr	r3, [r7, #28]
 8030c78:	6918      	ldr	r0, [r3, #16]
 8030c7a:	4b38      	ldr	r3, [pc, #224]	; (8030d5c <tcp_input+0x7c0>)
 8030c7c:	681a      	ldr	r2, [r3, #0]
 8030c7e:	2300      	movs	r3, #0
 8030c80:	69f9      	ldr	r1, [r7, #28]
 8030c82:	47a0      	blx	r4
 8030c84:	4603      	mov	r3, r0
 8030c86:	74fb      	strb	r3, [r7, #19]
 8030c88:	e008      	b.n	8030c9c <tcp_input+0x700>
 8030c8a:	4b34      	ldr	r3, [pc, #208]	; (8030d5c <tcp_input+0x7c0>)
 8030c8c:	681a      	ldr	r2, [r3, #0]
 8030c8e:	2300      	movs	r3, #0
 8030c90:	69f9      	ldr	r1, [r7, #28]
 8030c92:	2000      	movs	r0, #0
 8030c94:	f7ff f81a 	bl	802fccc <tcp_recv_null>
 8030c98:	4603      	mov	r3, r0
 8030c9a:	74fb      	strb	r3, [r7, #19]
          if (err == ERR_ABRT) {
 8030c9c:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8030ca0:	f113 0f0d 	cmn.w	r3, #13
 8030ca4:	d051      	beq.n	8030d4a <tcp_input+0x7ae>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            goto aborted;
          }

          /* If the upper layer can't receive this data, store it */
          if (err != ERR_OK) {
 8030ca6:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8030caa:	2b00      	cmp	r3, #0
 8030cac:	d003      	beq.n	8030cb6 <tcp_input+0x71a>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_cat(recv_data, rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            pcb->refused_data = recv_data;
 8030cae:	4b2b      	ldr	r3, [pc, #172]	; (8030d5c <tcp_input+0x7c0>)
 8030cb0:	681a      	ldr	r2, [r3, #0]
 8030cb2:	69fb      	ldr	r3, [r7, #28]
 8030cb4:	679a      	str	r2, [r3, #120]	; 0x78
          }
        }

        /* If a FIN segment was received, we call the callback
           function with a NULL buffer to indicate EOF. */
        if (recv_flags & TF_GOT_FIN) {
 8030cb6:	4b2a      	ldr	r3, [pc, #168]	; (8030d60 <tcp_input+0x7c4>)
 8030cb8:	781b      	ldrb	r3, [r3, #0]
 8030cba:	f003 0320 	and.w	r3, r3, #32
 8030cbe:	2b00      	cmp	r3, #0
 8030cc0:	d030      	beq.n	8030d24 <tcp_input+0x788>
          if (pcb->refused_data != NULL) {
 8030cc2:	69fb      	ldr	r3, [r7, #28]
 8030cc4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8030cc6:	2b00      	cmp	r3, #0
 8030cc8:	d009      	beq.n	8030cde <tcp_input+0x742>
            /* Delay this if we have refused data. */
            pcb->refused_data->flags |= PBUF_FLAG_TCP_FIN;
 8030cca:	69fb      	ldr	r3, [r7, #28]
 8030ccc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8030cce:	7b5a      	ldrb	r2, [r3, #13]
 8030cd0:	69fb      	ldr	r3, [r7, #28]
 8030cd2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8030cd4:	f042 0220 	orr.w	r2, r2, #32
 8030cd8:	b2d2      	uxtb	r2, r2
 8030cda:	735a      	strb	r2, [r3, #13]
 8030cdc:	e022      	b.n	8030d24 <tcp_input+0x788>
          } else {
            /* correct rcv_wnd as the application won't call tcp_recved()
               for the FIN's seqno */
            if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 8030cde:	69fb      	ldr	r3, [r7, #28]
 8030ce0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8030ce2:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 8030ce6:	d005      	beq.n	8030cf4 <tcp_input+0x758>
              pcb->rcv_wnd++;
 8030ce8:	69fb      	ldr	r3, [r7, #28]
 8030cea:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8030cec:	3301      	adds	r3, #1
 8030cee:	b29a      	uxth	r2, r3
 8030cf0:	69fb      	ldr	r3, [r7, #28]
 8030cf2:	851a      	strh	r2, [r3, #40]	; 0x28
            }
            TCP_EVENT_CLOSED(pcb, err);
 8030cf4:	69fb      	ldr	r3, [r7, #28]
 8030cf6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8030cfa:	2b00      	cmp	r3, #0
 8030cfc:	d00b      	beq.n	8030d16 <tcp_input+0x77a>
 8030cfe:	69fb      	ldr	r3, [r7, #28]
 8030d00:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 8030d04:	69fb      	ldr	r3, [r7, #28]
 8030d06:	6918      	ldr	r0, [r3, #16]
 8030d08:	2300      	movs	r3, #0
 8030d0a:	2200      	movs	r2, #0
 8030d0c:	69f9      	ldr	r1, [r7, #28]
 8030d0e:	47a0      	blx	r4
 8030d10:	4603      	mov	r3, r0
 8030d12:	74fb      	strb	r3, [r7, #19]
 8030d14:	e001      	b.n	8030d1a <tcp_input+0x77e>
 8030d16:	2300      	movs	r3, #0
 8030d18:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 8030d1a:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8030d1e:	f113 0f0d 	cmn.w	r3, #13
 8030d22:	d02f      	beq.n	8030d84 <tcp_input+0x7e8>
              goto aborted;
            }
          }
        }

        tcp_input_pcb = NULL;
 8030d24:	4b12      	ldr	r3, [pc, #72]	; (8030d70 <tcp_input+0x7d4>)
 8030d26:	2200      	movs	r2, #0
 8030d28:	601a      	str	r2, [r3, #0]
        if (tcp_input_delayed_close(pcb)) {
 8030d2a:	69f8      	ldr	r0, [r7, #28]
 8030d2c:	f000 f89e 	bl	8030e6c <tcp_input_delayed_close>
 8030d30:	4603      	mov	r3, r0
 8030d32:	2b00      	cmp	r3, #0
 8030d34:	d128      	bne.n	8030d88 <tcp_input+0x7ec>
          goto aborted;
        }
        /* Try to send something out. */
        tcp_output(pcb);
 8030d36:	69f8      	ldr	r0, [r7, #28]
 8030d38:	f002 ff74 	bl	8033c24 <tcp_output>
 8030d3c:	e025      	b.n	8030d8a <tcp_input+0x7ee>
#endif /* TCP_INPUT_DEBUG */
      }
    }
    /* Jump target if pcb has been aborted in a callback (by calling tcp_abort()).
       Below this line, 'pcb' may not be dereferenced! */
aborted:
 8030d3e:	bf00      	nop
 8030d40:	e023      	b.n	8030d8a <tcp_input+0x7ee>
              goto aborted;
 8030d42:	bf00      	nop
 8030d44:	e021      	b.n	8030d8a <tcp_input+0x7ee>
          goto aborted;
 8030d46:	bf00      	nop
 8030d48:	e01f      	b.n	8030d8a <tcp_input+0x7ee>
            goto aborted;
 8030d4a:	bf00      	nop
 8030d4c:	e01d      	b.n	8030d8a <tcp_input+0x7ee>
 8030d4e:	bf00      	nop
 8030d50:	2000ee04 	.word	0x2000ee04
 8030d54:	2000ef18 	.word	0x2000ef18
 8030d58:	2000ef28 	.word	0x2000ef28
 8030d5c:	2000ef48 	.word	0x2000ef48
 8030d60:	2000ef45 	.word	0x2000ef45
 8030d64:	2000ef40 	.word	0x2000ef40
 8030d68:	2000ef44 	.word	0x2000ef44
 8030d6c:	2000ef42 	.word	0x2000ef42
 8030d70:	2000ef4c 	.word	0x2000ef4c
 8030d74:	2000ef0c 	.word	0x2000ef0c
 8030d78:	0803bca8 	.word	0x0803bca8
 8030d7c:	0803be5c 	.word	0x0803be5c
 8030d80:	0803bcf4 	.word	0x0803bcf4
              goto aborted;
 8030d84:	bf00      	nop
 8030d86:	e000      	b.n	8030d8a <tcp_input+0x7ee>
          goto aborted;
 8030d88:	bf00      	nop
    tcp_input_pcb = NULL;
 8030d8a:	4b2e      	ldr	r3, [pc, #184]	; (8030e44 <tcp_input+0x8a8>)
 8030d8c:	2200      	movs	r2, #0
 8030d8e:	601a      	str	r2, [r3, #0]
    recv_data = NULL;
 8030d90:	4b2d      	ldr	r3, [pc, #180]	; (8030e48 <tcp_input+0x8ac>)
 8030d92:	2200      	movs	r2, #0
 8030d94:	601a      	str	r2, [r3, #0]

    /* give up our reference to inseg.p */
    if (inseg.p != NULL) {
 8030d96:	4b2d      	ldr	r3, [pc, #180]	; (8030e4c <tcp_input+0x8b0>)
 8030d98:	685b      	ldr	r3, [r3, #4]
 8030d9a:	2b00      	cmp	r3, #0
 8030d9c:	d04e      	beq.n	8030e3c <tcp_input+0x8a0>
      pbuf_free(inseg.p);
 8030d9e:	4b2b      	ldr	r3, [pc, #172]	; (8030e4c <tcp_input+0x8b0>)
 8030da0:	685b      	ldr	r3, [r3, #4]
 8030da2:	4618      	mov	r0, r3
 8030da4:	f7fd fab2 	bl	802e30c <pbuf_free>
      inseg.p = NULL;
 8030da8:	4b28      	ldr	r3, [pc, #160]	; (8030e4c <tcp_input+0x8b0>)
 8030daa:	2200      	movs	r2, #0
 8030dac:	605a      	str	r2, [r3, #4]
    pbuf_free(p);
  }

  LWIP_ASSERT("tcp_input: tcp_pcbs_sane()", tcp_pcbs_sane());
  PERF_STOP("tcp_input");
  return;
 8030dae:	e045      	b.n	8030e3c <tcp_input+0x8a0>
    if (!(TCPH_FLAGS(tcphdr) & TCP_RST)) {
 8030db0:	4b27      	ldr	r3, [pc, #156]	; (8030e50 <tcp_input+0x8b4>)
 8030db2:	681b      	ldr	r3, [r3, #0]
 8030db4:	899b      	ldrh	r3, [r3, #12]
 8030db6:	b29b      	uxth	r3, r3
 8030db8:	4618      	mov	r0, r3
 8030dba:	f7fb fdb3 	bl	802c924 <lwip_htons>
 8030dbe:	4603      	mov	r3, r0
 8030dc0:	b2db      	uxtb	r3, r3
 8030dc2:	f003 0304 	and.w	r3, r3, #4
 8030dc6:	2b00      	cmp	r3, #0
 8030dc8:	d128      	bne.n	8030e1c <tcp_input+0x880>
      TCP_STATS_INC(tcp.proterr);
 8030dca:	4b22      	ldr	r3, [pc, #136]	; (8030e54 <tcp_input+0x8b8>)
 8030dcc:	f8b3 30a0 	ldrh.w	r3, [r3, #160]	; 0xa0
 8030dd0:	3301      	adds	r3, #1
 8030dd2:	b29a      	uxth	r2, r3
 8030dd4:	4b1f      	ldr	r3, [pc, #124]	; (8030e54 <tcp_input+0x8b8>)
 8030dd6:	f8a3 20a0 	strh.w	r2, [r3, #160]	; 0xa0
      TCP_STATS_INC(tcp.drop);
 8030dda:	4b1e      	ldr	r3, [pc, #120]	; (8030e54 <tcp_input+0x8b8>)
 8030ddc:	f8b3 3096 	ldrh.w	r3, [r3, #150]	; 0x96
 8030de0:	3301      	adds	r3, #1
 8030de2:	b29a      	uxth	r2, r3
 8030de4:	4b1b      	ldr	r3, [pc, #108]	; (8030e54 <tcp_input+0x8b8>)
 8030de6:	f8a3 2096 	strh.w	r2, [r3, #150]	; 0x96
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 8030dea:	4b1b      	ldr	r3, [pc, #108]	; (8030e58 <tcp_input+0x8bc>)
 8030dec:	6819      	ldr	r1, [r3, #0]
 8030dee:	4b1b      	ldr	r3, [pc, #108]	; (8030e5c <tcp_input+0x8c0>)
 8030df0:	881b      	ldrh	r3, [r3, #0]
 8030df2:	461a      	mov	r2, r3
 8030df4:	4b1a      	ldr	r3, [pc, #104]	; (8030e60 <tcp_input+0x8c4>)
 8030df6:	681b      	ldr	r3, [r3, #0]
 8030df8:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8030dfa:	4b15      	ldr	r3, [pc, #84]	; (8030e50 <tcp_input+0x8b4>)
 8030dfc:	681b      	ldr	r3, [r3, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 8030dfe:	885b      	ldrh	r3, [r3, #2]
 8030e00:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8030e02:	4a13      	ldr	r2, [pc, #76]	; (8030e50 <tcp_input+0x8b4>)
 8030e04:	6812      	ldr	r2, [r2, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 8030e06:	8812      	ldrh	r2, [r2, #0]
 8030e08:	b292      	uxth	r2, r2
 8030e0a:	9202      	str	r2, [sp, #8]
 8030e0c:	9301      	str	r3, [sp, #4]
 8030e0e:	4b15      	ldr	r3, [pc, #84]	; (8030e64 <tcp_input+0x8c8>)
 8030e10:	9300      	str	r3, [sp, #0]
 8030e12:	4b15      	ldr	r3, [pc, #84]	; (8030e68 <tcp_input+0x8cc>)
 8030e14:	4602      	mov	r2, r0
 8030e16:	2000      	movs	r0, #0
 8030e18:	f003 fccc 	bl	80347b4 <tcp_rst>
    pbuf_free(p);
 8030e1c:	6878      	ldr	r0, [r7, #4]
 8030e1e:	f7fd fa75 	bl	802e30c <pbuf_free>
  return;
 8030e22:	e00b      	b.n	8030e3c <tcp_input+0x8a0>
dropped:
  TCP_STATS_INC(tcp.drop);
 8030e24:	4b0b      	ldr	r3, [pc, #44]	; (8030e54 <tcp_input+0x8b8>)
 8030e26:	f8b3 3096 	ldrh.w	r3, [r3, #150]	; 0x96
 8030e2a:	3301      	adds	r3, #1
 8030e2c:	b29a      	uxth	r2, r3
 8030e2e:	4b09      	ldr	r3, [pc, #36]	; (8030e54 <tcp_input+0x8b8>)
 8030e30:	f8a3 2096 	strh.w	r2, [r3, #150]	; 0x96
  MIB2_STATS_INC(mib2.tcpinerrs);
  pbuf_free(p);
 8030e34:	6878      	ldr	r0, [r7, #4]
 8030e36:	f7fd fa69 	bl	802e30c <pbuf_free>
 8030e3a:	e000      	b.n	8030e3e <tcp_input+0x8a2>
  return;
 8030e3c:	bf00      	nop
}
 8030e3e:	3724      	adds	r7, #36	; 0x24
 8030e40:	46bd      	mov	sp, r7
 8030e42:	bd90      	pop	{r4, r7, pc}
 8030e44:	2000ef4c 	.word	0x2000ef4c
 8030e48:	2000ef48 	.word	0x2000ef48
 8030e4c:	2000ef18 	.word	0x2000ef18
 8030e50:	2000ef28 	.word	0x2000ef28
 8030e54:	2000ee04 	.word	0x2000ee04
 8030e58:	2000ef3c 	.word	0x2000ef3c
 8030e5c:	2000ef42 	.word	0x2000ef42
 8030e60:	2000ef38 	.word	0x2000ef38
 8030e64:	2000b330 	.word	0x2000b330
 8030e68:	2000b334 	.word	0x2000b334

08030e6c <tcp_input_delayed_close>:
 * any more.
 * @returns 1 if the pcb has been closed and deallocated, 0 otherwise
 */
static int
tcp_input_delayed_close(struct tcp_pcb *pcb)
{
 8030e6c:	b580      	push	{r7, lr}
 8030e6e:	b082      	sub	sp, #8
 8030e70:	af00      	add	r7, sp, #0
 8030e72:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_input_delayed_close: invalid pcb", pcb != NULL);
 8030e74:	687b      	ldr	r3, [r7, #4]
 8030e76:	2b00      	cmp	r3, #0
 8030e78:	d106      	bne.n	8030e88 <tcp_input_delayed_close+0x1c>
 8030e7a:	4b17      	ldr	r3, [pc, #92]	; (8030ed8 <tcp_input_delayed_close+0x6c>)
 8030e7c:	f240 225a 	movw	r2, #602	; 0x25a
 8030e80:	4916      	ldr	r1, [pc, #88]	; (8030edc <tcp_input_delayed_close+0x70>)
 8030e82:	4817      	ldr	r0, [pc, #92]	; (8030ee0 <tcp_input_delayed_close+0x74>)
 8030e84:	f008 f8f0 	bl	8039068 <iprintf>

  if (recv_flags & TF_CLOSED) {
 8030e88:	4b16      	ldr	r3, [pc, #88]	; (8030ee4 <tcp_input_delayed_close+0x78>)
 8030e8a:	781b      	ldrb	r3, [r3, #0]
 8030e8c:	f003 0310 	and.w	r3, r3, #16
 8030e90:	2b00      	cmp	r3, #0
 8030e92:	d01c      	beq.n	8030ece <tcp_input_delayed_close+0x62>
    /* The connection has been closed and we will deallocate the
        PCB. */
    if (!(pcb->flags & TF_RXCLOSED)) {
 8030e94:	687b      	ldr	r3, [r7, #4]
 8030e96:	8b5b      	ldrh	r3, [r3, #26]
 8030e98:	f003 0310 	and.w	r3, r3, #16
 8030e9c:	2b00      	cmp	r3, #0
 8030e9e:	d10d      	bne.n	8030ebc <tcp_input_delayed_close+0x50>
      /* Connection closed although the application has only shut down the
          tx side: call the PCB's err callback and indicate the closure to
          ensure the application doesn't continue using the PCB. */
      TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_CLSD);
 8030ea0:	687b      	ldr	r3, [r7, #4]
 8030ea2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8030ea6:	2b00      	cmp	r3, #0
 8030ea8:	d008      	beq.n	8030ebc <tcp_input_delayed_close+0x50>
 8030eaa:	687b      	ldr	r3, [r7, #4]
 8030eac:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8030eb0:	687a      	ldr	r2, [r7, #4]
 8030eb2:	6912      	ldr	r2, [r2, #16]
 8030eb4:	f06f 010e 	mvn.w	r1, #14
 8030eb8:	4610      	mov	r0, r2
 8030eba:	4798      	blx	r3
    }
    tcp_pcb_remove(&tcp_active_pcbs, pcb);
 8030ebc:	6879      	ldr	r1, [r7, #4]
 8030ebe:	480a      	ldr	r0, [pc, #40]	; (8030ee8 <tcp_input_delayed_close+0x7c>)
 8030ec0:	f7ff f9f4 	bl	80302ac <tcp_pcb_remove>
    tcp_free(pcb);
 8030ec4:	6878      	ldr	r0, [r7, #4]
 8030ec6:	f7fd fce5 	bl	802e894 <tcp_free>
    return 1;
 8030eca:	2301      	movs	r3, #1
 8030ecc:	e000      	b.n	8030ed0 <tcp_input_delayed_close+0x64>
  }
  return 0;
 8030ece:	2300      	movs	r3, #0
}
 8030ed0:	4618      	mov	r0, r3
 8030ed2:	3708      	adds	r7, #8
 8030ed4:	46bd      	mov	sp, r7
 8030ed6:	bd80      	pop	{r7, pc}
 8030ed8:	0803bca8 	.word	0x0803bca8
 8030edc:	0803be78 	.word	0x0803be78
 8030ee0:	0803bcf4 	.word	0x0803bcf4
 8030ee4:	2000ef45 	.word	0x2000ef45
 8030ee8:	2000ef0c 	.word	0x2000ef0c

08030eec <tcp_listen_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_listen_input(struct tcp_pcb_listen *pcb)
{
 8030eec:	b590      	push	{r4, r7, lr}
 8030eee:	b08b      	sub	sp, #44	; 0x2c
 8030ef0:	af04      	add	r7, sp, #16
 8030ef2:	6078      	str	r0, [r7, #4]
  struct tcp_pcb *npcb;
  u32_t iss;
  err_t rc;

  if (flags & TCP_RST) {
 8030ef4:	4b73      	ldr	r3, [pc, #460]	; (80310c4 <tcp_listen_input+0x1d8>)
 8030ef6:	781b      	ldrb	r3, [r3, #0]
 8030ef8:	f003 0304 	and.w	r3, r3, #4
 8030efc:	2b00      	cmp	r3, #0
 8030efe:	f040 80da 	bne.w	80310b6 <tcp_listen_input+0x1ca>
    /* An incoming RST should be ignored. Return. */
    return;
  }

  LWIP_ASSERT("tcp_listen_input: invalid pcb", pcb != NULL);
 8030f02:	687b      	ldr	r3, [r7, #4]
 8030f04:	2b00      	cmp	r3, #0
 8030f06:	d106      	bne.n	8030f16 <tcp_listen_input+0x2a>
 8030f08:	4b6f      	ldr	r3, [pc, #444]	; (80310c8 <tcp_listen_input+0x1dc>)
 8030f0a:	f240 2281 	movw	r2, #641	; 0x281
 8030f0e:	496f      	ldr	r1, [pc, #444]	; (80310cc <tcp_listen_input+0x1e0>)
 8030f10:	486f      	ldr	r0, [pc, #444]	; (80310d0 <tcp_listen_input+0x1e4>)
 8030f12:	f008 f8a9 	bl	8039068 <iprintf>

  /* In the LISTEN state, we check for incoming SYN segments,
     creates a new PCB, and responds with a SYN|ACK. */
  if (flags & TCP_ACK) {
 8030f16:	4b6b      	ldr	r3, [pc, #428]	; (80310c4 <tcp_listen_input+0x1d8>)
 8030f18:	781b      	ldrb	r3, [r3, #0]
 8030f1a:	f003 0310 	and.w	r3, r3, #16
 8030f1e:	2b00      	cmp	r3, #0
 8030f20:	d019      	beq.n	8030f56 <tcp_listen_input+0x6a>
    /* For incoming segments with the ACK flag set, respond with a
       RST. */
    LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_listen_input: ACK in LISTEN, sending reset\n"));
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8030f22:	4b6c      	ldr	r3, [pc, #432]	; (80310d4 <tcp_listen_input+0x1e8>)
 8030f24:	6819      	ldr	r1, [r3, #0]
 8030f26:	4b6c      	ldr	r3, [pc, #432]	; (80310d8 <tcp_listen_input+0x1ec>)
 8030f28:	881b      	ldrh	r3, [r3, #0]
 8030f2a:	461a      	mov	r2, r3
 8030f2c:	4b6b      	ldr	r3, [pc, #428]	; (80310dc <tcp_listen_input+0x1f0>)
 8030f2e:	681b      	ldr	r3, [r3, #0]
 8030f30:	18d0      	adds	r0, r2, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8030f32:	4b6b      	ldr	r3, [pc, #428]	; (80310e0 <tcp_listen_input+0x1f4>)
 8030f34:	681b      	ldr	r3, [r3, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8030f36:	885b      	ldrh	r3, [r3, #2]
 8030f38:	b29b      	uxth	r3, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8030f3a:	4a69      	ldr	r2, [pc, #420]	; (80310e0 <tcp_listen_input+0x1f4>)
 8030f3c:	6812      	ldr	r2, [r2, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8030f3e:	8812      	ldrh	r2, [r2, #0]
 8030f40:	b292      	uxth	r2, r2
 8030f42:	9202      	str	r2, [sp, #8]
 8030f44:	9301      	str	r3, [sp, #4]
 8030f46:	4b67      	ldr	r3, [pc, #412]	; (80310e4 <tcp_listen_input+0x1f8>)
 8030f48:	9300      	str	r3, [sp, #0]
 8030f4a:	4b67      	ldr	r3, [pc, #412]	; (80310e8 <tcp_listen_input+0x1fc>)
 8030f4c:	4602      	mov	r2, r0
 8030f4e:	6878      	ldr	r0, [r7, #4]
 8030f50:	f003 fc30 	bl	80347b4 <tcp_rst>
      tcp_abandon(npcb, 0);
      return;
    }
    tcp_output(npcb);
  }
  return;
 8030f54:	e0b1      	b.n	80310ba <tcp_listen_input+0x1ce>
  } else if (flags & TCP_SYN) {
 8030f56:	4b5b      	ldr	r3, [pc, #364]	; (80310c4 <tcp_listen_input+0x1d8>)
 8030f58:	781b      	ldrb	r3, [r3, #0]
 8030f5a:	f003 0302 	and.w	r3, r3, #2
 8030f5e:	2b00      	cmp	r3, #0
 8030f60:	f000 80ab 	beq.w	80310ba <tcp_listen_input+0x1ce>
    npcb = tcp_alloc(pcb->prio);
 8030f64:	687b      	ldr	r3, [r7, #4]
 8030f66:	7d5b      	ldrb	r3, [r3, #21]
 8030f68:	4618      	mov	r0, r3
 8030f6a:	f7fe ffd3 	bl	802ff14 <tcp_alloc>
 8030f6e:	6178      	str	r0, [r7, #20]
    if (npcb == NULL) {
 8030f70:	697b      	ldr	r3, [r7, #20]
 8030f72:	2b00      	cmp	r3, #0
 8030f74:	d119      	bne.n	8030faa <tcp_listen_input+0xbe>
      TCP_STATS_INC(tcp.memerr);
 8030f76:	4b5d      	ldr	r3, [pc, #372]	; (80310ec <tcp_listen_input+0x200>)
 8030f78:	f8b3 309c 	ldrh.w	r3, [r3, #156]	; 0x9c
 8030f7c:	3301      	adds	r3, #1
 8030f7e:	b29a      	uxth	r2, r3
 8030f80:	4b5a      	ldr	r3, [pc, #360]	; (80310ec <tcp_listen_input+0x200>)
 8030f82:	f8a3 209c 	strh.w	r2, [r3, #156]	; 0x9c
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 8030f86:	687b      	ldr	r3, [r7, #4]
 8030f88:	699b      	ldr	r3, [r3, #24]
 8030f8a:	2b00      	cmp	r3, #0
 8030f8c:	d00a      	beq.n	8030fa4 <tcp_listen_input+0xb8>
 8030f8e:	687b      	ldr	r3, [r7, #4]
 8030f90:	699b      	ldr	r3, [r3, #24]
 8030f92:	687a      	ldr	r2, [r7, #4]
 8030f94:	6910      	ldr	r0, [r2, #16]
 8030f96:	f04f 32ff 	mov.w	r2, #4294967295
 8030f9a:	2100      	movs	r1, #0
 8030f9c:	4798      	blx	r3
 8030f9e:	4603      	mov	r3, r0
 8030fa0:	73bb      	strb	r3, [r7, #14]
      return;
 8030fa2:	e08b      	b.n	80310bc <tcp_listen_input+0x1d0>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 8030fa4:	23f0      	movs	r3, #240	; 0xf0
 8030fa6:	73bb      	strb	r3, [r7, #14]
      return;
 8030fa8:	e088      	b.n	80310bc <tcp_listen_input+0x1d0>
    ip_addr_copy(npcb->local_ip, *ip_current_dest_addr());
 8030faa:	4b51      	ldr	r3, [pc, #324]	; (80310f0 <tcp_listen_input+0x204>)
 8030fac:	695a      	ldr	r2, [r3, #20]
 8030fae:	697b      	ldr	r3, [r7, #20]
 8030fb0:	601a      	str	r2, [r3, #0]
    ip_addr_copy(npcb->remote_ip, *ip_current_src_addr());
 8030fb2:	4b4f      	ldr	r3, [pc, #316]	; (80310f0 <tcp_listen_input+0x204>)
 8030fb4:	691a      	ldr	r2, [r3, #16]
 8030fb6:	697b      	ldr	r3, [r7, #20]
 8030fb8:	605a      	str	r2, [r3, #4]
    npcb->local_port = pcb->local_port;
 8030fba:	687b      	ldr	r3, [r7, #4]
 8030fbc:	8ada      	ldrh	r2, [r3, #22]
 8030fbe:	697b      	ldr	r3, [r7, #20]
 8030fc0:	82da      	strh	r2, [r3, #22]
    npcb->remote_port = tcphdr->src;
 8030fc2:	4b47      	ldr	r3, [pc, #284]	; (80310e0 <tcp_listen_input+0x1f4>)
 8030fc4:	681b      	ldr	r3, [r3, #0]
 8030fc6:	881b      	ldrh	r3, [r3, #0]
 8030fc8:	b29a      	uxth	r2, r3
 8030fca:	697b      	ldr	r3, [r7, #20]
 8030fcc:	831a      	strh	r2, [r3, #24]
    npcb->state = SYN_RCVD;
 8030fce:	697b      	ldr	r3, [r7, #20]
 8030fd0:	2203      	movs	r2, #3
 8030fd2:	751a      	strb	r2, [r3, #20]
    npcb->rcv_nxt = seqno + 1;
 8030fd4:	4b41      	ldr	r3, [pc, #260]	; (80310dc <tcp_listen_input+0x1f0>)
 8030fd6:	681b      	ldr	r3, [r3, #0]
 8030fd8:	1c5a      	adds	r2, r3, #1
 8030fda:	697b      	ldr	r3, [r7, #20]
 8030fdc:	625a      	str	r2, [r3, #36]	; 0x24
    npcb->rcv_ann_right_edge = npcb->rcv_nxt;
 8030fde:	697b      	ldr	r3, [r7, #20]
 8030fe0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8030fe2:	697b      	ldr	r3, [r7, #20]
 8030fe4:	62da      	str	r2, [r3, #44]	; 0x2c
    iss = tcp_next_iss(npcb);
 8030fe6:	6978      	ldr	r0, [r7, #20]
 8030fe8:	f7ff f9f4 	bl	80303d4 <tcp_next_iss>
 8030fec:	6138      	str	r0, [r7, #16]
    npcb->snd_wl2 = iss;
 8030fee:	697b      	ldr	r3, [r7, #20]
 8030ff0:	693a      	ldr	r2, [r7, #16]
 8030ff2:	659a      	str	r2, [r3, #88]	; 0x58
    npcb->snd_nxt = iss;
 8030ff4:	697b      	ldr	r3, [r7, #20]
 8030ff6:	693a      	ldr	r2, [r7, #16]
 8030ff8:	651a      	str	r2, [r3, #80]	; 0x50
    npcb->lastack = iss;
 8030ffa:	697b      	ldr	r3, [r7, #20]
 8030ffc:	693a      	ldr	r2, [r7, #16]
 8030ffe:	645a      	str	r2, [r3, #68]	; 0x44
    npcb->snd_lbb = iss;
 8031000:	697b      	ldr	r3, [r7, #20]
 8031002:	693a      	ldr	r2, [r7, #16]
 8031004:	65da      	str	r2, [r3, #92]	; 0x5c
    npcb->snd_wl1 = seqno - 1;/* initialise to seqno-1 to force window update */
 8031006:	4b35      	ldr	r3, [pc, #212]	; (80310dc <tcp_listen_input+0x1f0>)
 8031008:	681b      	ldr	r3, [r3, #0]
 803100a:	1e5a      	subs	r2, r3, #1
 803100c:	697b      	ldr	r3, [r7, #20]
 803100e:	655a      	str	r2, [r3, #84]	; 0x54
    npcb->callback_arg = pcb->callback_arg;
 8031010:	687b      	ldr	r3, [r7, #4]
 8031012:	691a      	ldr	r2, [r3, #16]
 8031014:	697b      	ldr	r3, [r7, #20]
 8031016:	611a      	str	r2, [r3, #16]
    npcb->listener = pcb;
 8031018:	697b      	ldr	r3, [r7, #20]
 803101a:	687a      	ldr	r2, [r7, #4]
 803101c:	67da      	str	r2, [r3, #124]	; 0x7c
    npcb->so_options = pcb->so_options & SOF_INHERITED;
 803101e:	687b      	ldr	r3, [r7, #4]
 8031020:	7a5b      	ldrb	r3, [r3, #9]
 8031022:	f003 030c 	and.w	r3, r3, #12
 8031026:	b2da      	uxtb	r2, r3
 8031028:	697b      	ldr	r3, [r7, #20]
 803102a:	725a      	strb	r2, [r3, #9]
    npcb->netif_idx = pcb->netif_idx;
 803102c:	687b      	ldr	r3, [r7, #4]
 803102e:	7a1a      	ldrb	r2, [r3, #8]
 8031030:	697b      	ldr	r3, [r7, #20]
 8031032:	721a      	strb	r2, [r3, #8]
    TCP_REG_ACTIVE(npcb);
 8031034:	4b2f      	ldr	r3, [pc, #188]	; (80310f4 <tcp_listen_input+0x208>)
 8031036:	681a      	ldr	r2, [r3, #0]
 8031038:	697b      	ldr	r3, [r7, #20]
 803103a:	60da      	str	r2, [r3, #12]
 803103c:	4a2d      	ldr	r2, [pc, #180]	; (80310f4 <tcp_listen_input+0x208>)
 803103e:	697b      	ldr	r3, [r7, #20]
 8031040:	6013      	str	r3, [r2, #0]
 8031042:	f003 fd79 	bl	8034b38 <tcp_timer_needed>
 8031046:	4b2c      	ldr	r3, [pc, #176]	; (80310f8 <tcp_listen_input+0x20c>)
 8031048:	2201      	movs	r2, #1
 803104a:	701a      	strb	r2, [r3, #0]
    tcp_parseopt(npcb);
 803104c:	6978      	ldr	r0, [r7, #20]
 803104e:	f001 fd91 	bl	8032b74 <tcp_parseopt>
    npcb->snd_wnd = tcphdr->wnd;
 8031052:	4b23      	ldr	r3, [pc, #140]	; (80310e0 <tcp_listen_input+0x1f4>)
 8031054:	681b      	ldr	r3, [r3, #0]
 8031056:	89db      	ldrh	r3, [r3, #14]
 8031058:	b29a      	uxth	r2, r3
 803105a:	697b      	ldr	r3, [r7, #20]
 803105c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
    npcb->snd_wnd_max = npcb->snd_wnd;
 8031060:	697b      	ldr	r3, [r7, #20]
 8031062:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 8031066:	697b      	ldr	r3, [r7, #20]
 8031068:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
 803106c:	697b      	ldr	r3, [r7, #20]
 803106e:	8e5c      	ldrh	r4, [r3, #50]	; 0x32
 8031070:	697b      	ldr	r3, [r7, #20]
 8031072:	3304      	adds	r3, #4
 8031074:	4618      	mov	r0, r3
 8031076:	f005 fd69 	bl	8036b4c <ip4_route>
 803107a:	4601      	mov	r1, r0
 803107c:	697b      	ldr	r3, [r7, #20]
 803107e:	3304      	adds	r3, #4
 8031080:	461a      	mov	r2, r3
 8031082:	4620      	mov	r0, r4
 8031084:	f7ff f9cc 	bl	8030420 <tcp_eff_send_mss_netif>
 8031088:	4603      	mov	r3, r0
 803108a:	461a      	mov	r2, r3
 803108c:	697b      	ldr	r3, [r7, #20]
 803108e:	865a      	strh	r2, [r3, #50]	; 0x32
    rc = tcp_enqueue_flags(npcb, TCP_SYN | TCP_ACK);
 8031090:	2112      	movs	r1, #18
 8031092:	6978      	ldr	r0, [r7, #20]
 8031094:	f002 fcc6 	bl	8033a24 <tcp_enqueue_flags>
 8031098:	4603      	mov	r3, r0
 803109a:	73fb      	strb	r3, [r7, #15]
    if (rc != ERR_OK) {
 803109c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80310a0:	2b00      	cmp	r3, #0
 80310a2:	d004      	beq.n	80310ae <tcp_listen_input+0x1c2>
      tcp_abandon(npcb, 0);
 80310a4:	2100      	movs	r1, #0
 80310a6:	6978      	ldr	r0, [r7, #20]
 80310a8:	f7fd fe7a 	bl	802eda0 <tcp_abandon>
      return;
 80310ac:	e006      	b.n	80310bc <tcp_listen_input+0x1d0>
    tcp_output(npcb);
 80310ae:	6978      	ldr	r0, [r7, #20]
 80310b0:	f002 fdb8 	bl	8033c24 <tcp_output>
  return;
 80310b4:	e001      	b.n	80310ba <tcp_listen_input+0x1ce>
    return;
 80310b6:	bf00      	nop
 80310b8:	e000      	b.n	80310bc <tcp_listen_input+0x1d0>
  return;
 80310ba:	bf00      	nop
}
 80310bc:	371c      	adds	r7, #28
 80310be:	46bd      	mov	sp, r7
 80310c0:	bd90      	pop	{r4, r7, pc}
 80310c2:	bf00      	nop
 80310c4:	2000ef44 	.word	0x2000ef44
 80310c8:	0803bca8 	.word	0x0803bca8
 80310cc:	0803bea0 	.word	0x0803bea0
 80310d0:	0803bcf4 	.word	0x0803bcf4
 80310d4:	2000ef3c 	.word	0x2000ef3c
 80310d8:	2000ef42 	.word	0x2000ef42
 80310dc:	2000ef38 	.word	0x2000ef38
 80310e0:	2000ef28 	.word	0x2000ef28
 80310e4:	2000b330 	.word	0x2000b330
 80310e8:	2000b334 	.word	0x2000b334
 80310ec:	2000ee04 	.word	0x2000ee04
 80310f0:	2000b320 	.word	0x2000b320
 80310f4:	2000ef0c 	.word	0x2000ef0c
 80310f8:	2000ef14 	.word	0x2000ef14

080310fc <tcp_timewait_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_timewait_input(struct tcp_pcb *pcb)
{
 80310fc:	b580      	push	{r7, lr}
 80310fe:	b086      	sub	sp, #24
 8031100:	af04      	add	r7, sp, #16
 8031102:	6078      	str	r0, [r7, #4]
  /* RFC 1337: in TIME_WAIT, ignore RST and ACK FINs + any 'acceptable' segments */
  /* RFC 793 3.9 Event Processing - Segment Arrives:
   * - first check sequence number - we skip that one in TIME_WAIT (always
   *   acceptable since we only send ACKs)
   * - second check the RST bit (... return) */
  if (flags & TCP_RST) {
 8031104:	4b2f      	ldr	r3, [pc, #188]	; (80311c4 <tcp_timewait_input+0xc8>)
 8031106:	781b      	ldrb	r3, [r3, #0]
 8031108:	f003 0304 	and.w	r3, r3, #4
 803110c:	2b00      	cmp	r3, #0
 803110e:	d153      	bne.n	80311b8 <tcp_timewait_input+0xbc>
    return;
  }

  LWIP_ASSERT("tcp_timewait_input: invalid pcb", pcb != NULL);
 8031110:	687b      	ldr	r3, [r7, #4]
 8031112:	2b00      	cmp	r3, #0
 8031114:	d106      	bne.n	8031124 <tcp_timewait_input+0x28>
 8031116:	4b2c      	ldr	r3, [pc, #176]	; (80311c8 <tcp_timewait_input+0xcc>)
 8031118:	f240 22ee 	movw	r2, #750	; 0x2ee
 803111c:	492b      	ldr	r1, [pc, #172]	; (80311cc <tcp_timewait_input+0xd0>)
 803111e:	482c      	ldr	r0, [pc, #176]	; (80311d0 <tcp_timewait_input+0xd4>)
 8031120:	f007 ffa2 	bl	8039068 <iprintf>

  /* - fourth, check the SYN bit, */
  if (flags & TCP_SYN) {
 8031124:	4b27      	ldr	r3, [pc, #156]	; (80311c4 <tcp_timewait_input+0xc8>)
 8031126:	781b      	ldrb	r3, [r3, #0]
 8031128:	f003 0302 	and.w	r3, r3, #2
 803112c:	2b00      	cmp	r3, #0
 803112e:	d02a      	beq.n	8031186 <tcp_timewait_input+0x8a>
    /* If an incoming segment is not acceptable, an acknowledgment
       should be sent in reply */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd)) {
 8031130:	4b28      	ldr	r3, [pc, #160]	; (80311d4 <tcp_timewait_input+0xd8>)
 8031132:	681a      	ldr	r2, [r3, #0]
 8031134:	687b      	ldr	r3, [r7, #4]
 8031136:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8031138:	1ad3      	subs	r3, r2, r3
 803113a:	2b00      	cmp	r3, #0
 803113c:	db2d      	blt.n	803119a <tcp_timewait_input+0x9e>
 803113e:	4b25      	ldr	r3, [pc, #148]	; (80311d4 <tcp_timewait_input+0xd8>)
 8031140:	681a      	ldr	r2, [r3, #0]
 8031142:	687b      	ldr	r3, [r7, #4]
 8031144:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8031146:	6879      	ldr	r1, [r7, #4]
 8031148:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 803114a:	440b      	add	r3, r1
 803114c:	1ad3      	subs	r3, r2, r3
 803114e:	2b00      	cmp	r3, #0
 8031150:	dc23      	bgt.n	803119a <tcp_timewait_input+0x9e>
      /* If the SYN is in the window it is an error, send a reset */
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8031152:	4b21      	ldr	r3, [pc, #132]	; (80311d8 <tcp_timewait_input+0xdc>)
 8031154:	6819      	ldr	r1, [r3, #0]
 8031156:	4b21      	ldr	r3, [pc, #132]	; (80311dc <tcp_timewait_input+0xe0>)
 8031158:	881b      	ldrh	r3, [r3, #0]
 803115a:	461a      	mov	r2, r3
 803115c:	4b1d      	ldr	r3, [pc, #116]	; (80311d4 <tcp_timewait_input+0xd8>)
 803115e:	681b      	ldr	r3, [r3, #0]
 8031160:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8031162:	4b1f      	ldr	r3, [pc, #124]	; (80311e0 <tcp_timewait_input+0xe4>)
 8031164:	681b      	ldr	r3, [r3, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8031166:	885b      	ldrh	r3, [r3, #2]
 8031168:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 803116a:	4a1d      	ldr	r2, [pc, #116]	; (80311e0 <tcp_timewait_input+0xe4>)
 803116c:	6812      	ldr	r2, [r2, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 803116e:	8812      	ldrh	r2, [r2, #0]
 8031170:	b292      	uxth	r2, r2
 8031172:	9202      	str	r2, [sp, #8]
 8031174:	9301      	str	r3, [sp, #4]
 8031176:	4b1b      	ldr	r3, [pc, #108]	; (80311e4 <tcp_timewait_input+0xe8>)
 8031178:	9300      	str	r3, [sp, #0]
 803117a:	4b1b      	ldr	r3, [pc, #108]	; (80311e8 <tcp_timewait_input+0xec>)
 803117c:	4602      	mov	r2, r0
 803117e:	6878      	ldr	r0, [r7, #4]
 8031180:	f003 fb18 	bl	80347b4 <tcp_rst>
      return;
 8031184:	e01b      	b.n	80311be <tcp_timewait_input+0xc2>
    }
  } else if (flags & TCP_FIN) {
 8031186:	4b0f      	ldr	r3, [pc, #60]	; (80311c4 <tcp_timewait_input+0xc8>)
 8031188:	781b      	ldrb	r3, [r3, #0]
 803118a:	f003 0301 	and.w	r3, r3, #1
 803118e:	2b00      	cmp	r3, #0
 8031190:	d003      	beq.n	803119a <tcp_timewait_input+0x9e>
    /* - eighth, check the FIN bit: Remain in the TIME-WAIT state.
         Restart the 2 MSL time-wait timeout.*/
    pcb->tmr = tcp_ticks;
 8031192:	4b16      	ldr	r3, [pc, #88]	; (80311ec <tcp_timewait_input+0xf0>)
 8031194:	681a      	ldr	r2, [r3, #0]
 8031196:	687b      	ldr	r3, [r7, #4]
 8031198:	621a      	str	r2, [r3, #32]
  }

  if ((tcplen > 0)) {
 803119a:	4b10      	ldr	r3, [pc, #64]	; (80311dc <tcp_timewait_input+0xe0>)
 803119c:	881b      	ldrh	r3, [r3, #0]
 803119e:	2b00      	cmp	r3, #0
 80311a0:	d00c      	beq.n	80311bc <tcp_timewait_input+0xc0>
    /* Acknowledge data, FIN or out-of-window SYN */
    tcp_ack_now(pcb);
 80311a2:	687b      	ldr	r3, [r7, #4]
 80311a4:	8b5b      	ldrh	r3, [r3, #26]
 80311a6:	f043 0302 	orr.w	r3, r3, #2
 80311aa:	b29a      	uxth	r2, r3
 80311ac:	687b      	ldr	r3, [r7, #4]
 80311ae:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 80311b0:	6878      	ldr	r0, [r7, #4]
 80311b2:	f002 fd37 	bl	8033c24 <tcp_output>
  }
  return;
 80311b6:	e001      	b.n	80311bc <tcp_timewait_input+0xc0>
    return;
 80311b8:	bf00      	nop
 80311ba:	e000      	b.n	80311be <tcp_timewait_input+0xc2>
  return;
 80311bc:	bf00      	nop
}
 80311be:	3708      	adds	r7, #8
 80311c0:	46bd      	mov	sp, r7
 80311c2:	bd80      	pop	{r7, pc}
 80311c4:	2000ef44 	.word	0x2000ef44
 80311c8:	0803bca8 	.word	0x0803bca8
 80311cc:	0803bec0 	.word	0x0803bec0
 80311d0:	0803bcf4 	.word	0x0803bcf4
 80311d4:	2000ef38 	.word	0x2000ef38
 80311d8:	2000ef3c 	.word	0x2000ef3c
 80311dc:	2000ef42 	.word	0x2000ef42
 80311e0:	2000ef28 	.word	0x2000ef28
 80311e4:	2000b330 	.word	0x2000b330
 80311e8:	2000b334 	.word	0x2000b334
 80311ec:	2000ef00 	.word	0x2000ef00

080311f0 <tcp_process>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static err_t
tcp_process(struct tcp_pcb *pcb)
{
 80311f0:	b590      	push	{r4, r7, lr}
 80311f2:	b08d      	sub	sp, #52	; 0x34
 80311f4:	af04      	add	r7, sp, #16
 80311f6:	6078      	str	r0, [r7, #4]
  struct tcp_seg *rseg;
  u8_t acceptable = 0;
 80311f8:	2300      	movs	r3, #0
 80311fa:	76fb      	strb	r3, [r7, #27]
  err_t err;

  err = ERR_OK;
 80311fc:	2300      	movs	r3, #0
 80311fe:	76bb      	strb	r3, [r7, #26]

  LWIP_ASSERT("tcp_process: invalid pcb", pcb != NULL);
 8031200:	687b      	ldr	r3, [r7, #4]
 8031202:	2b00      	cmp	r3, #0
 8031204:	d106      	bne.n	8031214 <tcp_process+0x24>
 8031206:	4b9d      	ldr	r3, [pc, #628]	; (803147c <tcp_process+0x28c>)
 8031208:	f44f 7247 	mov.w	r2, #796	; 0x31c
 803120c:	499c      	ldr	r1, [pc, #624]	; (8031480 <tcp_process+0x290>)
 803120e:	489d      	ldr	r0, [pc, #628]	; (8031484 <tcp_process+0x294>)
 8031210:	f007 ff2a 	bl	8039068 <iprintf>

  /* Process incoming RST segments. */
  if (flags & TCP_RST) {
 8031214:	4b9c      	ldr	r3, [pc, #624]	; (8031488 <tcp_process+0x298>)
 8031216:	781b      	ldrb	r3, [r3, #0]
 8031218:	f003 0304 	and.w	r3, r3, #4
 803121c:	2b00      	cmp	r3, #0
 803121e:	d04e      	beq.n	80312be <tcp_process+0xce>
    /* First, determine if the reset is acceptable. */
    if (pcb->state == SYN_SENT) {
 8031220:	687b      	ldr	r3, [r7, #4]
 8031222:	7d1b      	ldrb	r3, [r3, #20]
 8031224:	2b02      	cmp	r3, #2
 8031226:	d108      	bne.n	803123a <tcp_process+0x4a>
      /* "In the SYN-SENT state (a RST received in response to an initial SYN),
          the RST is acceptable if the ACK field acknowledges the SYN." */
      if (ackno == pcb->snd_nxt) {
 8031228:	687b      	ldr	r3, [r7, #4]
 803122a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 803122c:	4b97      	ldr	r3, [pc, #604]	; (803148c <tcp_process+0x29c>)
 803122e:	681b      	ldr	r3, [r3, #0]
 8031230:	429a      	cmp	r2, r3
 8031232:	d123      	bne.n	803127c <tcp_process+0x8c>
        acceptable = 1;
 8031234:	2301      	movs	r3, #1
 8031236:	76fb      	strb	r3, [r7, #27]
 8031238:	e020      	b.n	803127c <tcp_process+0x8c>
      }
    } else {
      /* "In all states except SYN-SENT, all reset (RST) segments are validated
          by checking their SEQ-fields." */
      if (seqno == pcb->rcv_nxt) {
 803123a:	687b      	ldr	r3, [r7, #4]
 803123c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 803123e:	4b94      	ldr	r3, [pc, #592]	; (8031490 <tcp_process+0x2a0>)
 8031240:	681b      	ldr	r3, [r3, #0]
 8031242:	429a      	cmp	r2, r3
 8031244:	d102      	bne.n	803124c <tcp_process+0x5c>
        acceptable = 1;
 8031246:	2301      	movs	r3, #1
 8031248:	76fb      	strb	r3, [r7, #27]
 803124a:	e017      	b.n	803127c <tcp_process+0x8c>
      } else  if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 803124c:	4b90      	ldr	r3, [pc, #576]	; (8031490 <tcp_process+0x2a0>)
 803124e:	681a      	ldr	r2, [r3, #0]
 8031250:	687b      	ldr	r3, [r7, #4]
 8031252:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8031254:	1ad3      	subs	r3, r2, r3
 8031256:	2b00      	cmp	r3, #0
 8031258:	db10      	blt.n	803127c <tcp_process+0x8c>
 803125a:	4b8d      	ldr	r3, [pc, #564]	; (8031490 <tcp_process+0x2a0>)
 803125c:	681a      	ldr	r2, [r3, #0]
 803125e:	687b      	ldr	r3, [r7, #4]
 8031260:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8031262:	6879      	ldr	r1, [r7, #4]
 8031264:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8031266:	440b      	add	r3, r1
 8031268:	1ad3      	subs	r3, r2, r3
 803126a:	2b00      	cmp	r3, #0
 803126c:	dc06      	bgt.n	803127c <tcp_process+0x8c>
                                  pcb->rcv_nxt + pcb->rcv_wnd)) {
        /* If the sequence number is inside the window, we send a challenge ACK
           and wait for a re-send with matching sequence number.
           This follows RFC 5961 section 3.2 and addresses CVE-2004-0230
           (RST spoofing attack), which is present in RFC 793 RST handling. */
        tcp_ack_now(pcb);
 803126e:	687b      	ldr	r3, [r7, #4]
 8031270:	8b5b      	ldrh	r3, [r3, #26]
 8031272:	f043 0302 	orr.w	r3, r3, #2
 8031276:	b29a      	uxth	r2, r3
 8031278:	687b      	ldr	r3, [r7, #4]
 803127a:	835a      	strh	r2, [r3, #26]
      }
    }

    if (acceptable) {
 803127c:	7efb      	ldrb	r3, [r7, #27]
 803127e:	2b00      	cmp	r3, #0
 8031280:	d01b      	beq.n	80312ba <tcp_process+0xca>
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: Connection RESET\n"));
      LWIP_ASSERT("tcp_input: pcb->state != CLOSED", pcb->state != CLOSED);
 8031282:	687b      	ldr	r3, [r7, #4]
 8031284:	7d1b      	ldrb	r3, [r3, #20]
 8031286:	2b00      	cmp	r3, #0
 8031288:	d106      	bne.n	8031298 <tcp_process+0xa8>
 803128a:	4b7c      	ldr	r3, [pc, #496]	; (803147c <tcp_process+0x28c>)
 803128c:	f44f 724e 	mov.w	r2, #824	; 0x338
 8031290:	4980      	ldr	r1, [pc, #512]	; (8031494 <tcp_process+0x2a4>)
 8031292:	487c      	ldr	r0, [pc, #496]	; (8031484 <tcp_process+0x294>)
 8031294:	f007 fee8 	bl	8039068 <iprintf>
      recv_flags |= TF_RESET;
 8031298:	4b7f      	ldr	r3, [pc, #508]	; (8031498 <tcp_process+0x2a8>)
 803129a:	781b      	ldrb	r3, [r3, #0]
 803129c:	f043 0308 	orr.w	r3, r3, #8
 80312a0:	b2da      	uxtb	r2, r3
 80312a2:	4b7d      	ldr	r3, [pc, #500]	; (8031498 <tcp_process+0x2a8>)
 80312a4:	701a      	strb	r2, [r3, #0]
      tcp_clear_flags(pcb, TF_ACK_DELAY);
 80312a6:	687b      	ldr	r3, [r7, #4]
 80312a8:	8b5b      	ldrh	r3, [r3, #26]
 80312aa:	f023 0301 	bic.w	r3, r3, #1
 80312ae:	b29a      	uxth	r2, r3
 80312b0:	687b      	ldr	r3, [r7, #4]
 80312b2:	835a      	strh	r2, [r3, #26]
      return ERR_RST;
 80312b4:	f06f 030d 	mvn.w	r3, #13
 80312b8:	e37a      	b.n	80319b0 <tcp_process+0x7c0>
    } else {
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                                    seqno, pcb->rcv_nxt));
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                              seqno, pcb->rcv_nxt));
      return ERR_OK;
 80312ba:	2300      	movs	r3, #0
 80312bc:	e378      	b.n	80319b0 <tcp_process+0x7c0>
    }
  }

  if ((flags & TCP_SYN) && (pcb->state != SYN_SENT && pcb->state != SYN_RCVD)) {
 80312be:	4b72      	ldr	r3, [pc, #456]	; (8031488 <tcp_process+0x298>)
 80312c0:	781b      	ldrb	r3, [r3, #0]
 80312c2:	f003 0302 	and.w	r3, r3, #2
 80312c6:	2b00      	cmp	r3, #0
 80312c8:	d010      	beq.n	80312ec <tcp_process+0xfc>
 80312ca:	687b      	ldr	r3, [r7, #4]
 80312cc:	7d1b      	ldrb	r3, [r3, #20]
 80312ce:	2b02      	cmp	r3, #2
 80312d0:	d00c      	beq.n	80312ec <tcp_process+0xfc>
 80312d2:	687b      	ldr	r3, [r7, #4]
 80312d4:	7d1b      	ldrb	r3, [r3, #20]
 80312d6:	2b03      	cmp	r3, #3
 80312d8:	d008      	beq.n	80312ec <tcp_process+0xfc>
    /* Cope with new connection attempt after remote end crashed */
    tcp_ack_now(pcb);
 80312da:	687b      	ldr	r3, [r7, #4]
 80312dc:	8b5b      	ldrh	r3, [r3, #26]
 80312de:	f043 0302 	orr.w	r3, r3, #2
 80312e2:	b29a      	uxth	r2, r3
 80312e4:	687b      	ldr	r3, [r7, #4]
 80312e6:	835a      	strh	r2, [r3, #26]
    return ERR_OK;
 80312e8:	2300      	movs	r3, #0
 80312ea:	e361      	b.n	80319b0 <tcp_process+0x7c0>
  }

  if ((pcb->flags & TF_RXCLOSED) == 0) {
 80312ec:	687b      	ldr	r3, [r7, #4]
 80312ee:	8b5b      	ldrh	r3, [r3, #26]
 80312f0:	f003 0310 	and.w	r3, r3, #16
 80312f4:	2b00      	cmp	r3, #0
 80312f6:	d103      	bne.n	8031300 <tcp_process+0x110>
    /* Update the PCB (in)activity timer unless rx is closed (see tcp_shutdown) */
    pcb->tmr = tcp_ticks;
 80312f8:	4b68      	ldr	r3, [pc, #416]	; (803149c <tcp_process+0x2ac>)
 80312fa:	681a      	ldr	r2, [r3, #0]
 80312fc:	687b      	ldr	r3, [r7, #4]
 80312fe:	621a      	str	r2, [r3, #32]
  }
  pcb->keep_cnt_sent = 0;
 8031300:	687b      	ldr	r3, [r7, #4]
 8031302:	2200      	movs	r2, #0
 8031304:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b
  pcb->persist_probe = 0;
 8031308:	687b      	ldr	r3, [r7, #4]
 803130a:	2200      	movs	r2, #0
 803130c:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a

  tcp_parseopt(pcb);
 8031310:	6878      	ldr	r0, [r7, #4]
 8031312:	f001 fc2f 	bl	8032b74 <tcp_parseopt>

  /* Do different things depending on the TCP state. */
  switch (pcb->state) {
 8031316:	687b      	ldr	r3, [r7, #4]
 8031318:	7d1b      	ldrb	r3, [r3, #20]
 803131a:	3b02      	subs	r3, #2
 803131c:	2b07      	cmp	r3, #7
 803131e:	f200 8337 	bhi.w	8031990 <tcp_process+0x7a0>
 8031322:	a201      	add	r2, pc, #4	; (adr r2, 8031328 <tcp_process+0x138>)
 8031324:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8031328:	08031349 	.word	0x08031349
 803132c:	08031579 	.word	0x08031579
 8031330:	080316f1 	.word	0x080316f1
 8031334:	0803171b 	.word	0x0803171b
 8031338:	0803183f 	.word	0x0803183f
 803133c:	080316f1 	.word	0x080316f1
 8031340:	080318cb 	.word	0x080318cb
 8031344:	0803195b 	.word	0x0803195b
    case SYN_SENT:
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("SYN-SENT: ackno %"U32_F" pcb->snd_nxt %"U32_F" unacked %"U32_F"\n", ackno,
                                    pcb->snd_nxt, lwip_ntohl(pcb->unacked->tcphdr->seqno)));
      /* received SYN ACK with expected sequence number? */
      if ((flags & TCP_ACK) && (flags & TCP_SYN)
 8031348:	4b4f      	ldr	r3, [pc, #316]	; (8031488 <tcp_process+0x298>)
 803134a:	781b      	ldrb	r3, [r3, #0]
 803134c:	f003 0310 	and.w	r3, r3, #16
 8031350:	2b00      	cmp	r3, #0
 8031352:	f000 80e4 	beq.w	803151e <tcp_process+0x32e>
 8031356:	4b4c      	ldr	r3, [pc, #304]	; (8031488 <tcp_process+0x298>)
 8031358:	781b      	ldrb	r3, [r3, #0]
 803135a:	f003 0302 	and.w	r3, r3, #2
 803135e:	2b00      	cmp	r3, #0
 8031360:	f000 80dd 	beq.w	803151e <tcp_process+0x32e>
          && (ackno == pcb->lastack + 1)) {
 8031364:	687b      	ldr	r3, [r7, #4]
 8031366:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8031368:	1c5a      	adds	r2, r3, #1
 803136a:	4b48      	ldr	r3, [pc, #288]	; (803148c <tcp_process+0x29c>)
 803136c:	681b      	ldr	r3, [r3, #0]
 803136e:	429a      	cmp	r2, r3
 8031370:	f040 80d5 	bne.w	803151e <tcp_process+0x32e>
        pcb->rcv_nxt = seqno + 1;
 8031374:	4b46      	ldr	r3, [pc, #280]	; (8031490 <tcp_process+0x2a0>)
 8031376:	681b      	ldr	r3, [r3, #0]
 8031378:	1c5a      	adds	r2, r3, #1
 803137a:	687b      	ldr	r3, [r7, #4]
 803137c:	625a      	str	r2, [r3, #36]	; 0x24
        pcb->rcv_ann_right_edge = pcb->rcv_nxt;
 803137e:	687b      	ldr	r3, [r7, #4]
 8031380:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8031382:	687b      	ldr	r3, [r7, #4]
 8031384:	62da      	str	r2, [r3, #44]	; 0x2c
        pcb->lastack = ackno;
 8031386:	4b41      	ldr	r3, [pc, #260]	; (803148c <tcp_process+0x29c>)
 8031388:	681a      	ldr	r2, [r3, #0]
 803138a:	687b      	ldr	r3, [r7, #4]
 803138c:	645a      	str	r2, [r3, #68]	; 0x44
        pcb->snd_wnd = tcphdr->wnd;
 803138e:	4b44      	ldr	r3, [pc, #272]	; (80314a0 <tcp_process+0x2b0>)
 8031390:	681b      	ldr	r3, [r3, #0]
 8031392:	89db      	ldrh	r3, [r3, #14]
 8031394:	b29a      	uxth	r2, r3
 8031396:	687b      	ldr	r3, [r7, #4]
 8031398:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
        pcb->snd_wnd_max = pcb->snd_wnd;
 803139c:	687b      	ldr	r3, [r7, #4]
 803139e:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 80313a2:	687b      	ldr	r3, [r7, #4]
 80313a4:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
        pcb->snd_wl1 = seqno - 1; /* initialise to seqno - 1 to force window update */
 80313a8:	4b39      	ldr	r3, [pc, #228]	; (8031490 <tcp_process+0x2a0>)
 80313aa:	681b      	ldr	r3, [r3, #0]
 80313ac:	1e5a      	subs	r2, r3, #1
 80313ae:	687b      	ldr	r3, [r7, #4]
 80313b0:	655a      	str	r2, [r3, #84]	; 0x54
        pcb->state = ESTABLISHED;
 80313b2:	687b      	ldr	r3, [r7, #4]
 80313b4:	2204      	movs	r2, #4
 80313b6:	751a      	strb	r2, [r3, #20]

#if TCP_CALCULATE_EFF_SEND_MSS
        pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 80313b8:	687b      	ldr	r3, [r7, #4]
 80313ba:	8e5c      	ldrh	r4, [r3, #50]	; 0x32
 80313bc:	687b      	ldr	r3, [r7, #4]
 80313be:	3304      	adds	r3, #4
 80313c0:	4618      	mov	r0, r3
 80313c2:	f005 fbc3 	bl	8036b4c <ip4_route>
 80313c6:	4601      	mov	r1, r0
 80313c8:	687b      	ldr	r3, [r7, #4]
 80313ca:	3304      	adds	r3, #4
 80313cc:	461a      	mov	r2, r3
 80313ce:	4620      	mov	r0, r4
 80313d0:	f7ff f826 	bl	8030420 <tcp_eff_send_mss_netif>
 80313d4:	4603      	mov	r3, r0
 80313d6:	461a      	mov	r2, r3
 80313d8:	687b      	ldr	r3, [r7, #4]
 80313da:	865a      	strh	r2, [r3, #50]	; 0x32
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

        pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 80313dc:	687b      	ldr	r3, [r7, #4]
 80313de:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80313e0:	009a      	lsls	r2, r3, #2
 80313e2:	687b      	ldr	r3, [r7, #4]
 80313e4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80313e6:	005b      	lsls	r3, r3, #1
 80313e8:	f241 111c 	movw	r1, #4380	; 0x111c
 80313ec:	428b      	cmp	r3, r1
 80313ee:	bf38      	it	cc
 80313f0:	460b      	movcc	r3, r1
 80313f2:	429a      	cmp	r2, r3
 80313f4:	d204      	bcs.n	8031400 <tcp_process+0x210>
 80313f6:	687b      	ldr	r3, [r7, #4]
 80313f8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80313fa:	009b      	lsls	r3, r3, #2
 80313fc:	b29b      	uxth	r3, r3
 80313fe:	e00d      	b.n	803141c <tcp_process+0x22c>
 8031400:	687b      	ldr	r3, [r7, #4]
 8031402:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8031404:	005b      	lsls	r3, r3, #1
 8031406:	f241 121c 	movw	r2, #4380	; 0x111c
 803140a:	4293      	cmp	r3, r2
 803140c:	d904      	bls.n	8031418 <tcp_process+0x228>
 803140e:	687b      	ldr	r3, [r7, #4]
 8031410:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8031412:	005b      	lsls	r3, r3, #1
 8031414:	b29b      	uxth	r3, r3
 8031416:	e001      	b.n	803141c <tcp_process+0x22c>
 8031418:	f241 131c 	movw	r3, #4380	; 0x111c
 803141c:	687a      	ldr	r2, [r7, #4]
 803141e:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
        LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SENT): cwnd %"TCPWNDSIZE_F
                                     " ssthresh %"TCPWNDSIZE_F"\n",
                                     pcb->cwnd, pcb->ssthresh));
        LWIP_ASSERT("pcb->snd_queuelen > 0", (pcb->snd_queuelen > 0));
 8031422:	687b      	ldr	r3, [r7, #4]
 8031424:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8031428:	2b00      	cmp	r3, #0
 803142a:	d106      	bne.n	803143a <tcp_process+0x24a>
 803142c:	4b13      	ldr	r3, [pc, #76]	; (803147c <tcp_process+0x28c>)
 803142e:	f44f 725b 	mov.w	r2, #876	; 0x36c
 8031432:	491c      	ldr	r1, [pc, #112]	; (80314a4 <tcp_process+0x2b4>)
 8031434:	4813      	ldr	r0, [pc, #76]	; (8031484 <tcp_process+0x294>)
 8031436:	f007 fe17 	bl	8039068 <iprintf>
        --pcb->snd_queuelen;
 803143a:	687b      	ldr	r3, [r7, #4]
 803143c:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8031440:	3b01      	subs	r3, #1
 8031442:	b29a      	uxth	r2, r3
 8031444:	687b      	ldr	r3, [r7, #4]
 8031446:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
        LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_process: SYN-SENT --queuelen %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));
        rseg = pcb->unacked;
 803144a:	687b      	ldr	r3, [r7, #4]
 803144c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 803144e:	61fb      	str	r3, [r7, #28]
        if (rseg == NULL) {
 8031450:	69fb      	ldr	r3, [r7, #28]
 8031452:	2b00      	cmp	r3, #0
 8031454:	d12a      	bne.n	80314ac <tcp_process+0x2bc>
          /* might happen if tcp_output fails in tcp_rexmit_rto()
             in which case the segment is on the unsent list */
          rseg = pcb->unsent;
 8031456:	687b      	ldr	r3, [r7, #4]
 8031458:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 803145a:	61fb      	str	r3, [r7, #28]
          LWIP_ASSERT("no segment to free", rseg != NULL);
 803145c:	69fb      	ldr	r3, [r7, #28]
 803145e:	2b00      	cmp	r3, #0
 8031460:	d106      	bne.n	8031470 <tcp_process+0x280>
 8031462:	4b06      	ldr	r3, [pc, #24]	; (803147c <tcp_process+0x28c>)
 8031464:	f44f 725d 	mov.w	r2, #884	; 0x374
 8031468:	490f      	ldr	r1, [pc, #60]	; (80314a8 <tcp_process+0x2b8>)
 803146a:	4806      	ldr	r0, [pc, #24]	; (8031484 <tcp_process+0x294>)
 803146c:	f007 fdfc 	bl	8039068 <iprintf>
          pcb->unsent = rseg->next;
 8031470:	69fb      	ldr	r3, [r7, #28]
 8031472:	681a      	ldr	r2, [r3, #0]
 8031474:	687b      	ldr	r3, [r7, #4]
 8031476:	66da      	str	r2, [r3, #108]	; 0x6c
 8031478:	e01c      	b.n	80314b4 <tcp_process+0x2c4>
 803147a:	bf00      	nop
 803147c:	0803bca8 	.word	0x0803bca8
 8031480:	0803bee0 	.word	0x0803bee0
 8031484:	0803bcf4 	.word	0x0803bcf4
 8031488:	2000ef44 	.word	0x2000ef44
 803148c:	2000ef3c 	.word	0x2000ef3c
 8031490:	2000ef38 	.word	0x2000ef38
 8031494:	0803befc 	.word	0x0803befc
 8031498:	2000ef45 	.word	0x2000ef45
 803149c:	2000ef00 	.word	0x2000ef00
 80314a0:	2000ef28 	.word	0x2000ef28
 80314a4:	0803bf1c 	.word	0x0803bf1c
 80314a8:	0803bf34 	.word	0x0803bf34
        } else {
          pcb->unacked = rseg->next;
 80314ac:	69fb      	ldr	r3, [r7, #28]
 80314ae:	681a      	ldr	r2, [r3, #0]
 80314b0:	687b      	ldr	r3, [r7, #4]
 80314b2:	671a      	str	r2, [r3, #112]	; 0x70
        }
        tcp_seg_free(rseg);
 80314b4:	69f8      	ldr	r0, [r7, #28]
 80314b6:	f7fe fbc4 	bl	802fc42 <tcp_seg_free>

        /* If there's nothing left to acknowledge, stop the retransmit
           timer, otherwise reset it to start again */
        if (pcb->unacked == NULL) {
 80314ba:	687b      	ldr	r3, [r7, #4]
 80314bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80314be:	2b00      	cmp	r3, #0
 80314c0:	d104      	bne.n	80314cc <tcp_process+0x2dc>
          pcb->rtime = -1;
 80314c2:	687b      	ldr	r3, [r7, #4]
 80314c4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80314c8:	861a      	strh	r2, [r3, #48]	; 0x30
 80314ca:	e006      	b.n	80314da <tcp_process+0x2ea>
        } else {
          pcb->rtime = 0;
 80314cc:	687b      	ldr	r3, [r7, #4]
 80314ce:	2200      	movs	r2, #0
 80314d0:	861a      	strh	r2, [r3, #48]	; 0x30
          pcb->nrtx = 0;
 80314d2:	687b      	ldr	r3, [r7, #4]
 80314d4:	2200      	movs	r2, #0
 80314d6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        }

        /* Call the user specified function to call when successfully
         * connected. */
        TCP_EVENT_CONNECTED(pcb, ERR_OK, err);
 80314da:	687b      	ldr	r3, [r7, #4]
 80314dc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80314e0:	2b00      	cmp	r3, #0
 80314e2:	d00a      	beq.n	80314fa <tcp_process+0x30a>
 80314e4:	687b      	ldr	r3, [r7, #4]
 80314e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80314ea:	687a      	ldr	r2, [r7, #4]
 80314ec:	6910      	ldr	r0, [r2, #16]
 80314ee:	2200      	movs	r2, #0
 80314f0:	6879      	ldr	r1, [r7, #4]
 80314f2:	4798      	blx	r3
 80314f4:	4603      	mov	r3, r0
 80314f6:	76bb      	strb	r3, [r7, #26]
 80314f8:	e001      	b.n	80314fe <tcp_process+0x30e>
 80314fa:	2300      	movs	r3, #0
 80314fc:	76bb      	strb	r3, [r7, #26]
        if (err == ERR_ABRT) {
 80314fe:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8031502:	f113 0f0d 	cmn.w	r3, #13
 8031506:	d102      	bne.n	803150e <tcp_process+0x31e>
          return ERR_ABRT;
 8031508:	f06f 030c 	mvn.w	r3, #12
 803150c:	e250      	b.n	80319b0 <tcp_process+0x7c0>
        }
        tcp_ack_now(pcb);
 803150e:	687b      	ldr	r3, [r7, #4]
 8031510:	8b5b      	ldrh	r3, [r3, #26]
 8031512:	f043 0302 	orr.w	r3, r3, #2
 8031516:	b29a      	uxth	r2, r3
 8031518:	687b      	ldr	r3, [r7, #4]
 803151a:	835a      	strh	r2, [r3, #26]
        if (pcb->nrtx < TCP_SYNMAXRTX) {
          pcb->rtime = 0;
          tcp_rexmit_rto(pcb);
        }
      }
      break;
 803151c:	e23a      	b.n	8031994 <tcp_process+0x7a4>
      else if (flags & TCP_ACK) {
 803151e:	4b98      	ldr	r3, [pc, #608]	; (8031780 <tcp_process+0x590>)
 8031520:	781b      	ldrb	r3, [r3, #0]
 8031522:	f003 0310 	and.w	r3, r3, #16
 8031526:	2b00      	cmp	r3, #0
 8031528:	f000 8234 	beq.w	8031994 <tcp_process+0x7a4>
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 803152c:	4b95      	ldr	r3, [pc, #596]	; (8031784 <tcp_process+0x594>)
 803152e:	6819      	ldr	r1, [r3, #0]
 8031530:	4b95      	ldr	r3, [pc, #596]	; (8031788 <tcp_process+0x598>)
 8031532:	881b      	ldrh	r3, [r3, #0]
 8031534:	461a      	mov	r2, r3
 8031536:	4b95      	ldr	r3, [pc, #596]	; (803178c <tcp_process+0x59c>)
 8031538:	681b      	ldr	r3, [r3, #0]
 803153a:	18d0      	adds	r0, r2, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 803153c:	4b94      	ldr	r3, [pc, #592]	; (8031790 <tcp_process+0x5a0>)
 803153e:	681b      	ldr	r3, [r3, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8031540:	885b      	ldrh	r3, [r3, #2]
 8031542:	b29b      	uxth	r3, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8031544:	4a92      	ldr	r2, [pc, #584]	; (8031790 <tcp_process+0x5a0>)
 8031546:	6812      	ldr	r2, [r2, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8031548:	8812      	ldrh	r2, [r2, #0]
 803154a:	b292      	uxth	r2, r2
 803154c:	9202      	str	r2, [sp, #8]
 803154e:	9301      	str	r3, [sp, #4]
 8031550:	4b90      	ldr	r3, [pc, #576]	; (8031794 <tcp_process+0x5a4>)
 8031552:	9300      	str	r3, [sp, #0]
 8031554:	4b90      	ldr	r3, [pc, #576]	; (8031798 <tcp_process+0x5a8>)
 8031556:	4602      	mov	r2, r0
 8031558:	6878      	ldr	r0, [r7, #4]
 803155a:	f003 f92b 	bl	80347b4 <tcp_rst>
        if (pcb->nrtx < TCP_SYNMAXRTX) {
 803155e:	687b      	ldr	r3, [r7, #4]
 8031560:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8031564:	2b05      	cmp	r3, #5
 8031566:	f200 8215 	bhi.w	8031994 <tcp_process+0x7a4>
          pcb->rtime = 0;
 803156a:	687b      	ldr	r3, [r7, #4]
 803156c:	2200      	movs	r2, #0
 803156e:	861a      	strh	r2, [r3, #48]	; 0x30
          tcp_rexmit_rto(pcb);
 8031570:	6878      	ldr	r0, [r7, #4]
 8031572:	f002 feeb 	bl	803434c <tcp_rexmit_rto>
      break;
 8031576:	e20d      	b.n	8031994 <tcp_process+0x7a4>
    case SYN_RCVD:
      if (flags & TCP_ACK) {
 8031578:	4b81      	ldr	r3, [pc, #516]	; (8031780 <tcp_process+0x590>)
 803157a:	781b      	ldrb	r3, [r3, #0]
 803157c:	f003 0310 	and.w	r3, r3, #16
 8031580:	2b00      	cmp	r3, #0
 8031582:	f000 80a1 	beq.w	80316c8 <tcp_process+0x4d8>
        /* expected ACK number? */
        if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8031586:	4b7f      	ldr	r3, [pc, #508]	; (8031784 <tcp_process+0x594>)
 8031588:	681a      	ldr	r2, [r3, #0]
 803158a:	687b      	ldr	r3, [r7, #4]
 803158c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 803158e:	1ad3      	subs	r3, r2, r3
 8031590:	3b01      	subs	r3, #1
 8031592:	2b00      	cmp	r3, #0
 8031594:	db7e      	blt.n	8031694 <tcp_process+0x4a4>
 8031596:	4b7b      	ldr	r3, [pc, #492]	; (8031784 <tcp_process+0x594>)
 8031598:	681a      	ldr	r2, [r3, #0]
 803159a:	687b      	ldr	r3, [r7, #4]
 803159c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 803159e:	1ad3      	subs	r3, r2, r3
 80315a0:	2b00      	cmp	r3, #0
 80315a2:	dc77      	bgt.n	8031694 <tcp_process+0x4a4>
          pcb->state = ESTABLISHED;
 80315a4:	687b      	ldr	r3, [r7, #4]
 80315a6:	2204      	movs	r2, #4
 80315a8:	751a      	strb	r2, [r3, #20]
          LWIP_DEBUGF(TCP_DEBUG, ("TCP connection established %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
          if (pcb->listener == NULL) {
 80315aa:	687b      	ldr	r3, [r7, #4]
 80315ac:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80315ae:	2b00      	cmp	r3, #0
 80315b0:	d102      	bne.n	80315b8 <tcp_process+0x3c8>
            /* listen pcb might be closed by now */
            err = ERR_VAL;
 80315b2:	23fa      	movs	r3, #250	; 0xfa
 80315b4:	76bb      	strb	r3, [r7, #26]
 80315b6:	e01d      	b.n	80315f4 <tcp_process+0x404>
          } else
#endif /* LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG */
          {
#if LWIP_CALLBACK_API
            LWIP_ASSERT("pcb->listener->accept != NULL", pcb->listener->accept != NULL);
 80315b8:	687b      	ldr	r3, [r7, #4]
 80315ba:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80315bc:	699b      	ldr	r3, [r3, #24]
 80315be:	2b00      	cmp	r3, #0
 80315c0:	d106      	bne.n	80315d0 <tcp_process+0x3e0>
 80315c2:	4b76      	ldr	r3, [pc, #472]	; (803179c <tcp_process+0x5ac>)
 80315c4:	f44f 726a 	mov.w	r2, #936	; 0x3a8
 80315c8:	4975      	ldr	r1, [pc, #468]	; (80317a0 <tcp_process+0x5b0>)
 80315ca:	4876      	ldr	r0, [pc, #472]	; (80317a4 <tcp_process+0x5b4>)
 80315cc:	f007 fd4c 	bl	8039068 <iprintf>
#endif
            tcp_backlog_accepted(pcb);
            /* Call the accept function. */
            TCP_EVENT_ACCEPT(pcb->listener, pcb, pcb->callback_arg, ERR_OK, err);
 80315d0:	687b      	ldr	r3, [r7, #4]
 80315d2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80315d4:	699b      	ldr	r3, [r3, #24]
 80315d6:	2b00      	cmp	r3, #0
 80315d8:	d00a      	beq.n	80315f0 <tcp_process+0x400>
 80315da:	687b      	ldr	r3, [r7, #4]
 80315dc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80315de:	699b      	ldr	r3, [r3, #24]
 80315e0:	687a      	ldr	r2, [r7, #4]
 80315e2:	6910      	ldr	r0, [r2, #16]
 80315e4:	2200      	movs	r2, #0
 80315e6:	6879      	ldr	r1, [r7, #4]
 80315e8:	4798      	blx	r3
 80315ea:	4603      	mov	r3, r0
 80315ec:	76bb      	strb	r3, [r7, #26]
 80315ee:	e001      	b.n	80315f4 <tcp_process+0x404>
 80315f0:	23f0      	movs	r3, #240	; 0xf0
 80315f2:	76bb      	strb	r3, [r7, #26]
          }
          if (err != ERR_OK) {
 80315f4:	f997 301a 	ldrsb.w	r3, [r7, #26]
 80315f8:	2b00      	cmp	r3, #0
 80315fa:	d00a      	beq.n	8031612 <tcp_process+0x422>
            /* If the accept function returns with an error, we abort
             * the connection. */
            /* Already aborted? */
            if (err != ERR_ABRT) {
 80315fc:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8031600:	f113 0f0d 	cmn.w	r3, #13
 8031604:	d002      	beq.n	803160c <tcp_process+0x41c>
              tcp_abort(pcb);
 8031606:	6878      	ldr	r0, [r7, #4]
 8031608:	f7fd fc88 	bl	802ef1c <tcp_abort>
            }
            return ERR_ABRT;
 803160c:	f06f 030c 	mvn.w	r3, #12
 8031610:	e1ce      	b.n	80319b0 <tcp_process+0x7c0>
          }
          /* If there was any data contained within this ACK,
           * we'd better pass it on to the application as well. */
          tcp_receive(pcb);
 8031612:	6878      	ldr	r0, [r7, #4]
 8031614:	f000 fae0 	bl	8031bd8 <tcp_receive>

          /* Prevent ACK for SYN to generate a sent event */
          if (recv_acked != 0) {
 8031618:	4b63      	ldr	r3, [pc, #396]	; (80317a8 <tcp_process+0x5b8>)
 803161a:	881b      	ldrh	r3, [r3, #0]
 803161c:	2b00      	cmp	r3, #0
 803161e:	d005      	beq.n	803162c <tcp_process+0x43c>
            recv_acked--;
 8031620:	4b61      	ldr	r3, [pc, #388]	; (80317a8 <tcp_process+0x5b8>)
 8031622:	881b      	ldrh	r3, [r3, #0]
 8031624:	3b01      	subs	r3, #1
 8031626:	b29a      	uxth	r2, r3
 8031628:	4b5f      	ldr	r3, [pc, #380]	; (80317a8 <tcp_process+0x5b8>)
 803162a:	801a      	strh	r2, [r3, #0]
          }

          pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 803162c:	687b      	ldr	r3, [r7, #4]
 803162e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8031630:	009a      	lsls	r2, r3, #2
 8031632:	687b      	ldr	r3, [r7, #4]
 8031634:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8031636:	005b      	lsls	r3, r3, #1
 8031638:	f241 111c 	movw	r1, #4380	; 0x111c
 803163c:	428b      	cmp	r3, r1
 803163e:	bf38      	it	cc
 8031640:	460b      	movcc	r3, r1
 8031642:	429a      	cmp	r2, r3
 8031644:	d204      	bcs.n	8031650 <tcp_process+0x460>
 8031646:	687b      	ldr	r3, [r7, #4]
 8031648:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 803164a:	009b      	lsls	r3, r3, #2
 803164c:	b29b      	uxth	r3, r3
 803164e:	e00d      	b.n	803166c <tcp_process+0x47c>
 8031650:	687b      	ldr	r3, [r7, #4]
 8031652:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8031654:	005b      	lsls	r3, r3, #1
 8031656:	f241 121c 	movw	r2, #4380	; 0x111c
 803165a:	4293      	cmp	r3, r2
 803165c:	d904      	bls.n	8031668 <tcp_process+0x478>
 803165e:	687b      	ldr	r3, [r7, #4]
 8031660:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8031662:	005b      	lsls	r3, r3, #1
 8031664:	b29b      	uxth	r3, r3
 8031666:	e001      	b.n	803166c <tcp_process+0x47c>
 8031668:	f241 131c 	movw	r3, #4380	; 0x111c
 803166c:	687a      	ldr	r2, [r7, #4]
 803166e:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SYN_RCVD): cwnd %"TCPWNDSIZE_F
                                       " ssthresh %"TCPWNDSIZE_F"\n",
                                       pcb->cwnd, pcb->ssthresh));

          if (recv_flags & TF_GOT_FIN) {
 8031672:	4b4e      	ldr	r3, [pc, #312]	; (80317ac <tcp_process+0x5bc>)
 8031674:	781b      	ldrb	r3, [r3, #0]
 8031676:	f003 0320 	and.w	r3, r3, #32
 803167a:	2b00      	cmp	r3, #0
 803167c:	d037      	beq.n	80316ee <tcp_process+0x4fe>
            tcp_ack_now(pcb);
 803167e:	687b      	ldr	r3, [r7, #4]
 8031680:	8b5b      	ldrh	r3, [r3, #26]
 8031682:	f043 0302 	orr.w	r3, r3, #2
 8031686:	b29a      	uxth	r2, r3
 8031688:	687b      	ldr	r3, [r7, #4]
 803168a:	835a      	strh	r2, [r3, #26]
            pcb->state = CLOSE_WAIT;
 803168c:	687b      	ldr	r3, [r7, #4]
 803168e:	2207      	movs	r2, #7
 8031690:	751a      	strb	r2, [r3, #20]
          if (recv_flags & TF_GOT_FIN) {
 8031692:	e02c      	b.n	80316ee <tcp_process+0x4fe>
          }
        } else {
          /* incorrect ACK number, send RST */
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8031694:	4b3b      	ldr	r3, [pc, #236]	; (8031784 <tcp_process+0x594>)
 8031696:	6819      	ldr	r1, [r3, #0]
 8031698:	4b3b      	ldr	r3, [pc, #236]	; (8031788 <tcp_process+0x598>)
 803169a:	881b      	ldrh	r3, [r3, #0]
 803169c:	461a      	mov	r2, r3
 803169e:	4b3b      	ldr	r3, [pc, #236]	; (803178c <tcp_process+0x59c>)
 80316a0:	681b      	ldr	r3, [r3, #0]
 80316a2:	18d0      	adds	r0, r2, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 80316a4:	4b3a      	ldr	r3, [pc, #232]	; (8031790 <tcp_process+0x5a0>)
 80316a6:	681b      	ldr	r3, [r3, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80316a8:	885b      	ldrh	r3, [r3, #2]
 80316aa:	b29b      	uxth	r3, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 80316ac:	4a38      	ldr	r2, [pc, #224]	; (8031790 <tcp_process+0x5a0>)
 80316ae:	6812      	ldr	r2, [r2, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80316b0:	8812      	ldrh	r2, [r2, #0]
 80316b2:	b292      	uxth	r2, r2
 80316b4:	9202      	str	r2, [sp, #8]
 80316b6:	9301      	str	r3, [sp, #4]
 80316b8:	4b36      	ldr	r3, [pc, #216]	; (8031794 <tcp_process+0x5a4>)
 80316ba:	9300      	str	r3, [sp, #0]
 80316bc:	4b36      	ldr	r3, [pc, #216]	; (8031798 <tcp_process+0x5a8>)
 80316be:	4602      	mov	r2, r0
 80316c0:	6878      	ldr	r0, [r7, #4]
 80316c2:	f003 f877 	bl	80347b4 <tcp_rst>
        }
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
        /* Looks like another copy of the SYN - retransmit our SYN-ACK */
        tcp_rexmit(pcb);
      }
      break;
 80316c6:	e167      	b.n	8031998 <tcp_process+0x7a8>
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
 80316c8:	4b2d      	ldr	r3, [pc, #180]	; (8031780 <tcp_process+0x590>)
 80316ca:	781b      	ldrb	r3, [r3, #0]
 80316cc:	f003 0302 	and.w	r3, r3, #2
 80316d0:	2b00      	cmp	r3, #0
 80316d2:	f000 8161 	beq.w	8031998 <tcp_process+0x7a8>
 80316d6:	687b      	ldr	r3, [r7, #4]
 80316d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80316da:	1e5a      	subs	r2, r3, #1
 80316dc:	4b2b      	ldr	r3, [pc, #172]	; (803178c <tcp_process+0x59c>)
 80316de:	681b      	ldr	r3, [r3, #0]
 80316e0:	429a      	cmp	r2, r3
 80316e2:	f040 8159 	bne.w	8031998 <tcp_process+0x7a8>
        tcp_rexmit(pcb);
 80316e6:	6878      	ldr	r0, [r7, #4]
 80316e8:	f002 fe52 	bl	8034390 <tcp_rexmit>
      break;
 80316ec:	e154      	b.n	8031998 <tcp_process+0x7a8>
 80316ee:	e153      	b.n	8031998 <tcp_process+0x7a8>
    case CLOSE_WAIT:
    /* FALLTHROUGH */
    case ESTABLISHED:
      tcp_receive(pcb);
 80316f0:	6878      	ldr	r0, [r7, #4]
 80316f2:	f000 fa71 	bl	8031bd8 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) { /* passive close */
 80316f6:	4b2d      	ldr	r3, [pc, #180]	; (80317ac <tcp_process+0x5bc>)
 80316f8:	781b      	ldrb	r3, [r3, #0]
 80316fa:	f003 0320 	and.w	r3, r3, #32
 80316fe:	2b00      	cmp	r3, #0
 8031700:	f000 814c 	beq.w	803199c <tcp_process+0x7ac>
        tcp_ack_now(pcb);
 8031704:	687b      	ldr	r3, [r7, #4]
 8031706:	8b5b      	ldrh	r3, [r3, #26]
 8031708:	f043 0302 	orr.w	r3, r3, #2
 803170c:	b29a      	uxth	r2, r3
 803170e:	687b      	ldr	r3, [r7, #4]
 8031710:	835a      	strh	r2, [r3, #26]
        pcb->state = CLOSE_WAIT;
 8031712:	687b      	ldr	r3, [r7, #4]
 8031714:	2207      	movs	r2, #7
 8031716:	751a      	strb	r2, [r3, #20]
      }
      break;
 8031718:	e140      	b.n	803199c <tcp_process+0x7ac>
    case FIN_WAIT_1:
      tcp_receive(pcb);
 803171a:	6878      	ldr	r0, [r7, #4]
 803171c:	f000 fa5c 	bl	8031bd8 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 8031720:	4b22      	ldr	r3, [pc, #136]	; (80317ac <tcp_process+0x5bc>)
 8031722:	781b      	ldrb	r3, [r3, #0]
 8031724:	f003 0320 	and.w	r3, r3, #32
 8031728:	2b00      	cmp	r3, #0
 803172a:	d071      	beq.n	8031810 <tcp_process+0x620>
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 803172c:	4b14      	ldr	r3, [pc, #80]	; (8031780 <tcp_process+0x590>)
 803172e:	781b      	ldrb	r3, [r3, #0]
 8031730:	f003 0310 	and.w	r3, r3, #16
 8031734:	2b00      	cmp	r3, #0
 8031736:	d060      	beq.n	80317fa <tcp_process+0x60a>
 8031738:	687b      	ldr	r3, [r7, #4]
 803173a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 803173c:	4b11      	ldr	r3, [pc, #68]	; (8031784 <tcp_process+0x594>)
 803173e:	681b      	ldr	r3, [r3, #0]
 8031740:	429a      	cmp	r2, r3
 8031742:	d15a      	bne.n	80317fa <tcp_process+0x60a>
            pcb->unsent == NULL) {
 8031744:	687b      	ldr	r3, [r7, #4]
 8031746:	6edb      	ldr	r3, [r3, #108]	; 0x6c
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8031748:	2b00      	cmp	r3, #0
 803174a:	d156      	bne.n	80317fa <tcp_process+0x60a>
          LWIP_DEBUGF(TCP_DEBUG,
                      ("TCP connection closed: FIN_WAIT_1 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
          tcp_ack_now(pcb);
 803174c:	687b      	ldr	r3, [r7, #4]
 803174e:	8b5b      	ldrh	r3, [r3, #26]
 8031750:	f043 0302 	orr.w	r3, r3, #2
 8031754:	b29a      	uxth	r2, r3
 8031756:	687b      	ldr	r3, [r7, #4]
 8031758:	835a      	strh	r2, [r3, #26]
          tcp_pcb_purge(pcb);
 803175a:	6878      	ldr	r0, [r7, #4]
 803175c:	f7fe fd56 	bl	803020c <tcp_pcb_purge>
          TCP_RMV_ACTIVE(pcb);
 8031760:	4b13      	ldr	r3, [pc, #76]	; (80317b0 <tcp_process+0x5c0>)
 8031762:	681b      	ldr	r3, [r3, #0]
 8031764:	687a      	ldr	r2, [r7, #4]
 8031766:	429a      	cmp	r2, r3
 8031768:	d105      	bne.n	8031776 <tcp_process+0x586>
 803176a:	4b11      	ldr	r3, [pc, #68]	; (80317b0 <tcp_process+0x5c0>)
 803176c:	681b      	ldr	r3, [r3, #0]
 803176e:	68db      	ldr	r3, [r3, #12]
 8031770:	4a0f      	ldr	r2, [pc, #60]	; (80317b0 <tcp_process+0x5c0>)
 8031772:	6013      	str	r3, [r2, #0]
 8031774:	e02e      	b.n	80317d4 <tcp_process+0x5e4>
 8031776:	4b0e      	ldr	r3, [pc, #56]	; (80317b0 <tcp_process+0x5c0>)
 8031778:	681b      	ldr	r3, [r3, #0]
 803177a:	617b      	str	r3, [r7, #20]
 803177c:	e027      	b.n	80317ce <tcp_process+0x5de>
 803177e:	bf00      	nop
 8031780:	2000ef44 	.word	0x2000ef44
 8031784:	2000ef3c 	.word	0x2000ef3c
 8031788:	2000ef42 	.word	0x2000ef42
 803178c:	2000ef38 	.word	0x2000ef38
 8031790:	2000ef28 	.word	0x2000ef28
 8031794:	2000b330 	.word	0x2000b330
 8031798:	2000b334 	.word	0x2000b334
 803179c:	0803bca8 	.word	0x0803bca8
 80317a0:	0803bf48 	.word	0x0803bf48
 80317a4:	0803bcf4 	.word	0x0803bcf4
 80317a8:	2000ef40 	.word	0x2000ef40
 80317ac:	2000ef45 	.word	0x2000ef45
 80317b0:	2000ef0c 	.word	0x2000ef0c
 80317b4:	697b      	ldr	r3, [r7, #20]
 80317b6:	68db      	ldr	r3, [r3, #12]
 80317b8:	687a      	ldr	r2, [r7, #4]
 80317ba:	429a      	cmp	r2, r3
 80317bc:	d104      	bne.n	80317c8 <tcp_process+0x5d8>
 80317be:	687b      	ldr	r3, [r7, #4]
 80317c0:	68da      	ldr	r2, [r3, #12]
 80317c2:	697b      	ldr	r3, [r7, #20]
 80317c4:	60da      	str	r2, [r3, #12]
 80317c6:	e005      	b.n	80317d4 <tcp_process+0x5e4>
 80317c8:	697b      	ldr	r3, [r7, #20]
 80317ca:	68db      	ldr	r3, [r3, #12]
 80317cc:	617b      	str	r3, [r7, #20]
 80317ce:	697b      	ldr	r3, [r7, #20]
 80317d0:	2b00      	cmp	r3, #0
 80317d2:	d1ef      	bne.n	80317b4 <tcp_process+0x5c4>
 80317d4:	687b      	ldr	r3, [r7, #4]
 80317d6:	2200      	movs	r2, #0
 80317d8:	60da      	str	r2, [r3, #12]
 80317da:	4b77      	ldr	r3, [pc, #476]	; (80319b8 <tcp_process+0x7c8>)
 80317dc:	2201      	movs	r2, #1
 80317de:	701a      	strb	r2, [r3, #0]
          pcb->state = TIME_WAIT;
 80317e0:	687b      	ldr	r3, [r7, #4]
 80317e2:	220a      	movs	r2, #10
 80317e4:	751a      	strb	r2, [r3, #20]
          TCP_REG(&tcp_tw_pcbs, pcb);
 80317e6:	4b75      	ldr	r3, [pc, #468]	; (80319bc <tcp_process+0x7cc>)
 80317e8:	681a      	ldr	r2, [r3, #0]
 80317ea:	687b      	ldr	r3, [r7, #4]
 80317ec:	60da      	str	r2, [r3, #12]
 80317ee:	4a73      	ldr	r2, [pc, #460]	; (80319bc <tcp_process+0x7cc>)
 80317f0:	687b      	ldr	r3, [r7, #4]
 80317f2:	6013      	str	r3, [r2, #0]
 80317f4:	f003 f9a0 	bl	8034b38 <tcp_timer_needed>
        }
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
                 pcb->unsent == NULL) {
        pcb->state = FIN_WAIT_2;
      }
      break;
 80317f8:	e0d2      	b.n	80319a0 <tcp_process+0x7b0>
          tcp_ack_now(pcb);
 80317fa:	687b      	ldr	r3, [r7, #4]
 80317fc:	8b5b      	ldrh	r3, [r3, #26]
 80317fe:	f043 0302 	orr.w	r3, r3, #2
 8031802:	b29a      	uxth	r2, r3
 8031804:	687b      	ldr	r3, [r7, #4]
 8031806:	835a      	strh	r2, [r3, #26]
          pcb->state = CLOSING;
 8031808:	687b      	ldr	r3, [r7, #4]
 803180a:	2208      	movs	r2, #8
 803180c:	751a      	strb	r2, [r3, #20]
      break;
 803180e:	e0c7      	b.n	80319a0 <tcp_process+0x7b0>
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8031810:	4b6b      	ldr	r3, [pc, #428]	; (80319c0 <tcp_process+0x7d0>)
 8031812:	781b      	ldrb	r3, [r3, #0]
 8031814:	f003 0310 	and.w	r3, r3, #16
 8031818:	2b00      	cmp	r3, #0
 803181a:	f000 80c1 	beq.w	80319a0 <tcp_process+0x7b0>
 803181e:	687b      	ldr	r3, [r7, #4]
 8031820:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8031822:	4b68      	ldr	r3, [pc, #416]	; (80319c4 <tcp_process+0x7d4>)
 8031824:	681b      	ldr	r3, [r3, #0]
 8031826:	429a      	cmp	r2, r3
 8031828:	f040 80ba 	bne.w	80319a0 <tcp_process+0x7b0>
                 pcb->unsent == NULL) {
 803182c:	687b      	ldr	r3, [r7, #4]
 803182e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8031830:	2b00      	cmp	r3, #0
 8031832:	f040 80b5 	bne.w	80319a0 <tcp_process+0x7b0>
        pcb->state = FIN_WAIT_2;
 8031836:	687b      	ldr	r3, [r7, #4]
 8031838:	2206      	movs	r2, #6
 803183a:	751a      	strb	r2, [r3, #20]
      break;
 803183c:	e0b0      	b.n	80319a0 <tcp_process+0x7b0>
    case FIN_WAIT_2:
      tcp_receive(pcb);
 803183e:	6878      	ldr	r0, [r7, #4]
 8031840:	f000 f9ca 	bl	8031bd8 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 8031844:	4b60      	ldr	r3, [pc, #384]	; (80319c8 <tcp_process+0x7d8>)
 8031846:	781b      	ldrb	r3, [r3, #0]
 8031848:	f003 0320 	and.w	r3, r3, #32
 803184c:	2b00      	cmp	r3, #0
 803184e:	f000 80a9 	beq.w	80319a4 <tcp_process+0x7b4>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: FIN_WAIT_2 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_ack_now(pcb);
 8031852:	687b      	ldr	r3, [r7, #4]
 8031854:	8b5b      	ldrh	r3, [r3, #26]
 8031856:	f043 0302 	orr.w	r3, r3, #2
 803185a:	b29a      	uxth	r2, r3
 803185c:	687b      	ldr	r3, [r7, #4]
 803185e:	835a      	strh	r2, [r3, #26]
        tcp_pcb_purge(pcb);
 8031860:	6878      	ldr	r0, [r7, #4]
 8031862:	f7fe fcd3 	bl	803020c <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 8031866:	4b59      	ldr	r3, [pc, #356]	; (80319cc <tcp_process+0x7dc>)
 8031868:	681b      	ldr	r3, [r3, #0]
 803186a:	687a      	ldr	r2, [r7, #4]
 803186c:	429a      	cmp	r2, r3
 803186e:	d105      	bne.n	803187c <tcp_process+0x68c>
 8031870:	4b56      	ldr	r3, [pc, #344]	; (80319cc <tcp_process+0x7dc>)
 8031872:	681b      	ldr	r3, [r3, #0]
 8031874:	68db      	ldr	r3, [r3, #12]
 8031876:	4a55      	ldr	r2, [pc, #340]	; (80319cc <tcp_process+0x7dc>)
 8031878:	6013      	str	r3, [r2, #0]
 803187a:	e013      	b.n	80318a4 <tcp_process+0x6b4>
 803187c:	4b53      	ldr	r3, [pc, #332]	; (80319cc <tcp_process+0x7dc>)
 803187e:	681b      	ldr	r3, [r3, #0]
 8031880:	613b      	str	r3, [r7, #16]
 8031882:	e00c      	b.n	803189e <tcp_process+0x6ae>
 8031884:	693b      	ldr	r3, [r7, #16]
 8031886:	68db      	ldr	r3, [r3, #12]
 8031888:	687a      	ldr	r2, [r7, #4]
 803188a:	429a      	cmp	r2, r3
 803188c:	d104      	bne.n	8031898 <tcp_process+0x6a8>
 803188e:	687b      	ldr	r3, [r7, #4]
 8031890:	68da      	ldr	r2, [r3, #12]
 8031892:	693b      	ldr	r3, [r7, #16]
 8031894:	60da      	str	r2, [r3, #12]
 8031896:	e005      	b.n	80318a4 <tcp_process+0x6b4>
 8031898:	693b      	ldr	r3, [r7, #16]
 803189a:	68db      	ldr	r3, [r3, #12]
 803189c:	613b      	str	r3, [r7, #16]
 803189e:	693b      	ldr	r3, [r7, #16]
 80318a0:	2b00      	cmp	r3, #0
 80318a2:	d1ef      	bne.n	8031884 <tcp_process+0x694>
 80318a4:	687b      	ldr	r3, [r7, #4]
 80318a6:	2200      	movs	r2, #0
 80318a8:	60da      	str	r2, [r3, #12]
 80318aa:	4b43      	ldr	r3, [pc, #268]	; (80319b8 <tcp_process+0x7c8>)
 80318ac:	2201      	movs	r2, #1
 80318ae:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 80318b0:	687b      	ldr	r3, [r7, #4]
 80318b2:	220a      	movs	r2, #10
 80318b4:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 80318b6:	4b41      	ldr	r3, [pc, #260]	; (80319bc <tcp_process+0x7cc>)
 80318b8:	681a      	ldr	r2, [r3, #0]
 80318ba:	687b      	ldr	r3, [r7, #4]
 80318bc:	60da      	str	r2, [r3, #12]
 80318be:	4a3f      	ldr	r2, [pc, #252]	; (80319bc <tcp_process+0x7cc>)
 80318c0:	687b      	ldr	r3, [r7, #4]
 80318c2:	6013      	str	r3, [r2, #0]
 80318c4:	f003 f938 	bl	8034b38 <tcp_timer_needed>
      }
      break;
 80318c8:	e06c      	b.n	80319a4 <tcp_process+0x7b4>
    case CLOSING:
      tcp_receive(pcb);
 80318ca:	6878      	ldr	r0, [r7, #4]
 80318cc:	f000 f984 	bl	8031bd8 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 80318d0:	4b3b      	ldr	r3, [pc, #236]	; (80319c0 <tcp_process+0x7d0>)
 80318d2:	781b      	ldrb	r3, [r3, #0]
 80318d4:	f003 0310 	and.w	r3, r3, #16
 80318d8:	2b00      	cmp	r3, #0
 80318da:	d065      	beq.n	80319a8 <tcp_process+0x7b8>
 80318dc:	687b      	ldr	r3, [r7, #4]
 80318de:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80318e0:	4b38      	ldr	r3, [pc, #224]	; (80319c4 <tcp_process+0x7d4>)
 80318e2:	681b      	ldr	r3, [r3, #0]
 80318e4:	429a      	cmp	r2, r3
 80318e6:	d15f      	bne.n	80319a8 <tcp_process+0x7b8>
 80318e8:	687b      	ldr	r3, [r7, #4]
 80318ea:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80318ec:	2b00      	cmp	r3, #0
 80318ee:	d15b      	bne.n	80319a8 <tcp_process+0x7b8>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: CLOSING %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_pcb_purge(pcb);
 80318f0:	6878      	ldr	r0, [r7, #4]
 80318f2:	f7fe fc8b 	bl	803020c <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 80318f6:	4b35      	ldr	r3, [pc, #212]	; (80319cc <tcp_process+0x7dc>)
 80318f8:	681b      	ldr	r3, [r3, #0]
 80318fa:	687a      	ldr	r2, [r7, #4]
 80318fc:	429a      	cmp	r2, r3
 80318fe:	d105      	bne.n	803190c <tcp_process+0x71c>
 8031900:	4b32      	ldr	r3, [pc, #200]	; (80319cc <tcp_process+0x7dc>)
 8031902:	681b      	ldr	r3, [r3, #0]
 8031904:	68db      	ldr	r3, [r3, #12]
 8031906:	4a31      	ldr	r2, [pc, #196]	; (80319cc <tcp_process+0x7dc>)
 8031908:	6013      	str	r3, [r2, #0]
 803190a:	e013      	b.n	8031934 <tcp_process+0x744>
 803190c:	4b2f      	ldr	r3, [pc, #188]	; (80319cc <tcp_process+0x7dc>)
 803190e:	681b      	ldr	r3, [r3, #0]
 8031910:	60fb      	str	r3, [r7, #12]
 8031912:	e00c      	b.n	803192e <tcp_process+0x73e>
 8031914:	68fb      	ldr	r3, [r7, #12]
 8031916:	68db      	ldr	r3, [r3, #12]
 8031918:	687a      	ldr	r2, [r7, #4]
 803191a:	429a      	cmp	r2, r3
 803191c:	d104      	bne.n	8031928 <tcp_process+0x738>
 803191e:	687b      	ldr	r3, [r7, #4]
 8031920:	68da      	ldr	r2, [r3, #12]
 8031922:	68fb      	ldr	r3, [r7, #12]
 8031924:	60da      	str	r2, [r3, #12]
 8031926:	e005      	b.n	8031934 <tcp_process+0x744>
 8031928:	68fb      	ldr	r3, [r7, #12]
 803192a:	68db      	ldr	r3, [r3, #12]
 803192c:	60fb      	str	r3, [r7, #12]
 803192e:	68fb      	ldr	r3, [r7, #12]
 8031930:	2b00      	cmp	r3, #0
 8031932:	d1ef      	bne.n	8031914 <tcp_process+0x724>
 8031934:	687b      	ldr	r3, [r7, #4]
 8031936:	2200      	movs	r2, #0
 8031938:	60da      	str	r2, [r3, #12]
 803193a:	4b1f      	ldr	r3, [pc, #124]	; (80319b8 <tcp_process+0x7c8>)
 803193c:	2201      	movs	r2, #1
 803193e:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 8031940:	687b      	ldr	r3, [r7, #4]
 8031942:	220a      	movs	r2, #10
 8031944:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 8031946:	4b1d      	ldr	r3, [pc, #116]	; (80319bc <tcp_process+0x7cc>)
 8031948:	681a      	ldr	r2, [r3, #0]
 803194a:	687b      	ldr	r3, [r7, #4]
 803194c:	60da      	str	r2, [r3, #12]
 803194e:	4a1b      	ldr	r2, [pc, #108]	; (80319bc <tcp_process+0x7cc>)
 8031950:	687b      	ldr	r3, [r7, #4]
 8031952:	6013      	str	r3, [r2, #0]
 8031954:	f003 f8f0 	bl	8034b38 <tcp_timer_needed>
      }
      break;
 8031958:	e026      	b.n	80319a8 <tcp_process+0x7b8>
    case LAST_ACK:
      tcp_receive(pcb);
 803195a:	6878      	ldr	r0, [r7, #4]
 803195c:	f000 f93c 	bl	8031bd8 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 8031960:	4b17      	ldr	r3, [pc, #92]	; (80319c0 <tcp_process+0x7d0>)
 8031962:	781b      	ldrb	r3, [r3, #0]
 8031964:	f003 0310 	and.w	r3, r3, #16
 8031968:	2b00      	cmp	r3, #0
 803196a:	d01f      	beq.n	80319ac <tcp_process+0x7bc>
 803196c:	687b      	ldr	r3, [r7, #4]
 803196e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8031970:	4b14      	ldr	r3, [pc, #80]	; (80319c4 <tcp_process+0x7d4>)
 8031972:	681b      	ldr	r3, [r3, #0]
 8031974:	429a      	cmp	r2, r3
 8031976:	d119      	bne.n	80319ac <tcp_process+0x7bc>
 8031978:	687b      	ldr	r3, [r7, #4]
 803197a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 803197c:	2b00      	cmp	r3, #0
 803197e:	d115      	bne.n	80319ac <tcp_process+0x7bc>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: LAST_ACK %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        /* bugfix #21699: don't set pcb->state to CLOSED here or we risk leaking segments */
        recv_flags |= TF_CLOSED;
 8031980:	4b11      	ldr	r3, [pc, #68]	; (80319c8 <tcp_process+0x7d8>)
 8031982:	781b      	ldrb	r3, [r3, #0]
 8031984:	f043 0310 	orr.w	r3, r3, #16
 8031988:	b2da      	uxtb	r2, r3
 803198a:	4b0f      	ldr	r3, [pc, #60]	; (80319c8 <tcp_process+0x7d8>)
 803198c:	701a      	strb	r2, [r3, #0]
      }
      break;
 803198e:	e00d      	b.n	80319ac <tcp_process+0x7bc>
    default:
      break;
 8031990:	bf00      	nop
 8031992:	e00c      	b.n	80319ae <tcp_process+0x7be>
      break;
 8031994:	bf00      	nop
 8031996:	e00a      	b.n	80319ae <tcp_process+0x7be>
      break;
 8031998:	bf00      	nop
 803199a:	e008      	b.n	80319ae <tcp_process+0x7be>
      break;
 803199c:	bf00      	nop
 803199e:	e006      	b.n	80319ae <tcp_process+0x7be>
      break;
 80319a0:	bf00      	nop
 80319a2:	e004      	b.n	80319ae <tcp_process+0x7be>
      break;
 80319a4:	bf00      	nop
 80319a6:	e002      	b.n	80319ae <tcp_process+0x7be>
      break;
 80319a8:	bf00      	nop
 80319aa:	e000      	b.n	80319ae <tcp_process+0x7be>
      break;
 80319ac:	bf00      	nop
  }
  return ERR_OK;
 80319ae:	2300      	movs	r3, #0
}
 80319b0:	4618      	mov	r0, r3
 80319b2:	3724      	adds	r7, #36	; 0x24
 80319b4:	46bd      	mov	sp, r7
 80319b6:	bd90      	pop	{r4, r7, pc}
 80319b8:	2000ef14 	.word	0x2000ef14
 80319bc:	2000ef10 	.word	0x2000ef10
 80319c0:	2000ef44 	.word	0x2000ef44
 80319c4:	2000ef3c 	.word	0x2000ef3c
 80319c8:	2000ef45 	.word	0x2000ef45
 80319cc:	2000ef0c 	.word	0x2000ef0c

080319d0 <tcp_oos_insert_segment>:
 *
 * Called from tcp_receive()
 */
static void
tcp_oos_insert_segment(struct tcp_seg *cseg, struct tcp_seg *next)
{
 80319d0:	b590      	push	{r4, r7, lr}
 80319d2:	b085      	sub	sp, #20
 80319d4:	af00      	add	r7, sp, #0
 80319d6:	6078      	str	r0, [r7, #4]
 80319d8:	6039      	str	r1, [r7, #0]
  struct tcp_seg *old_seg;

  LWIP_ASSERT("tcp_oos_insert_segment: invalid cseg", cseg != NULL);
 80319da:	687b      	ldr	r3, [r7, #4]
 80319dc:	2b00      	cmp	r3, #0
 80319de:	d106      	bne.n	80319ee <tcp_oos_insert_segment+0x1e>
 80319e0:	4b3b      	ldr	r3, [pc, #236]	; (8031ad0 <tcp_oos_insert_segment+0x100>)
 80319e2:	f240 421f 	movw	r2, #1055	; 0x41f
 80319e6:	493b      	ldr	r1, [pc, #236]	; (8031ad4 <tcp_oos_insert_segment+0x104>)
 80319e8:	483b      	ldr	r0, [pc, #236]	; (8031ad8 <tcp_oos_insert_segment+0x108>)
 80319ea:	f007 fb3d 	bl	8039068 <iprintf>

  if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 80319ee:	687b      	ldr	r3, [r7, #4]
 80319f0:	68db      	ldr	r3, [r3, #12]
 80319f2:	899b      	ldrh	r3, [r3, #12]
 80319f4:	b29b      	uxth	r3, r3
 80319f6:	4618      	mov	r0, r3
 80319f8:	f7fa ff94 	bl	802c924 <lwip_htons>
 80319fc:	4603      	mov	r3, r0
 80319fe:	b2db      	uxtb	r3, r3
 8031a00:	f003 0301 	and.w	r3, r3, #1
 8031a04:	2b00      	cmp	r3, #0
 8031a06:	d028      	beq.n	8031a5a <tcp_oos_insert_segment+0x8a>
    /* received segment overlaps all following segments */
    tcp_segs_free(next);
 8031a08:	6838      	ldr	r0, [r7, #0]
 8031a0a:	f7fe f905 	bl	802fc18 <tcp_segs_free>
    next = NULL;
 8031a0e:	2300      	movs	r3, #0
 8031a10:	603b      	str	r3, [r7, #0]
 8031a12:	e056      	b.n	8031ac2 <tcp_oos_insert_segment+0xf2>
       oos queue may have segments with FIN flag */
    while (next &&
           TCP_SEQ_GEQ((seqno + cseg->len),
                       (next->tcphdr->seqno + next->len))) {
      /* cseg with FIN already processed */
      if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 8031a14:	683b      	ldr	r3, [r7, #0]
 8031a16:	68db      	ldr	r3, [r3, #12]
 8031a18:	899b      	ldrh	r3, [r3, #12]
 8031a1a:	b29b      	uxth	r3, r3
 8031a1c:	4618      	mov	r0, r3
 8031a1e:	f7fa ff81 	bl	802c924 <lwip_htons>
 8031a22:	4603      	mov	r3, r0
 8031a24:	b2db      	uxtb	r3, r3
 8031a26:	f003 0301 	and.w	r3, r3, #1
 8031a2a:	2b00      	cmp	r3, #0
 8031a2c:	d00d      	beq.n	8031a4a <tcp_oos_insert_segment+0x7a>
        TCPH_SET_FLAG(cseg->tcphdr, TCP_FIN);
 8031a2e:	687b      	ldr	r3, [r7, #4]
 8031a30:	68db      	ldr	r3, [r3, #12]
 8031a32:	899b      	ldrh	r3, [r3, #12]
 8031a34:	b29c      	uxth	r4, r3
 8031a36:	2001      	movs	r0, #1
 8031a38:	f7fa ff74 	bl	802c924 <lwip_htons>
 8031a3c:	4603      	mov	r3, r0
 8031a3e:	461a      	mov	r2, r3
 8031a40:	687b      	ldr	r3, [r7, #4]
 8031a42:	68db      	ldr	r3, [r3, #12]
 8031a44:	4322      	orrs	r2, r4
 8031a46:	b292      	uxth	r2, r2
 8031a48:	819a      	strh	r2, [r3, #12]
      }
      old_seg = next;
 8031a4a:	683b      	ldr	r3, [r7, #0]
 8031a4c:	60fb      	str	r3, [r7, #12]
      next = next->next;
 8031a4e:	683b      	ldr	r3, [r7, #0]
 8031a50:	681b      	ldr	r3, [r3, #0]
 8031a52:	603b      	str	r3, [r7, #0]
      tcp_seg_free(old_seg);
 8031a54:	68f8      	ldr	r0, [r7, #12]
 8031a56:	f7fe f8f4 	bl	802fc42 <tcp_seg_free>
    while (next &&
 8031a5a:	683b      	ldr	r3, [r7, #0]
 8031a5c:	2b00      	cmp	r3, #0
 8031a5e:	d00e      	beq.n	8031a7e <tcp_oos_insert_segment+0xae>
           TCP_SEQ_GEQ((seqno + cseg->len),
 8031a60:	687b      	ldr	r3, [r7, #4]
 8031a62:	891b      	ldrh	r3, [r3, #8]
 8031a64:	461a      	mov	r2, r3
 8031a66:	4b1d      	ldr	r3, [pc, #116]	; (8031adc <tcp_oos_insert_segment+0x10c>)
 8031a68:	681b      	ldr	r3, [r3, #0]
 8031a6a:	441a      	add	r2, r3
 8031a6c:	683b      	ldr	r3, [r7, #0]
 8031a6e:	68db      	ldr	r3, [r3, #12]
 8031a70:	685b      	ldr	r3, [r3, #4]
 8031a72:	6839      	ldr	r1, [r7, #0]
 8031a74:	8909      	ldrh	r1, [r1, #8]
 8031a76:	440b      	add	r3, r1
 8031a78:	1ad3      	subs	r3, r2, r3
    while (next &&
 8031a7a:	2b00      	cmp	r3, #0
 8031a7c:	daca      	bge.n	8031a14 <tcp_oos_insert_segment+0x44>
    }
    if (next &&
 8031a7e:	683b      	ldr	r3, [r7, #0]
 8031a80:	2b00      	cmp	r3, #0
 8031a82:	d01e      	beq.n	8031ac2 <tcp_oos_insert_segment+0xf2>
        TCP_SEQ_GT(seqno + cseg->len, next->tcphdr->seqno)) {
 8031a84:	687b      	ldr	r3, [r7, #4]
 8031a86:	891b      	ldrh	r3, [r3, #8]
 8031a88:	461a      	mov	r2, r3
 8031a8a:	4b14      	ldr	r3, [pc, #80]	; (8031adc <tcp_oos_insert_segment+0x10c>)
 8031a8c:	681b      	ldr	r3, [r3, #0]
 8031a8e:	441a      	add	r2, r3
 8031a90:	683b      	ldr	r3, [r7, #0]
 8031a92:	68db      	ldr	r3, [r3, #12]
 8031a94:	685b      	ldr	r3, [r3, #4]
 8031a96:	1ad3      	subs	r3, r2, r3
    if (next &&
 8031a98:	2b00      	cmp	r3, #0
 8031a9a:	dd12      	ble.n	8031ac2 <tcp_oos_insert_segment+0xf2>
      /* We need to trim the incoming segment. */
      cseg->len = (u16_t)(next->tcphdr->seqno - seqno);
 8031a9c:	683b      	ldr	r3, [r7, #0]
 8031a9e:	68db      	ldr	r3, [r3, #12]
 8031aa0:	685b      	ldr	r3, [r3, #4]
 8031aa2:	b29a      	uxth	r2, r3
 8031aa4:	4b0d      	ldr	r3, [pc, #52]	; (8031adc <tcp_oos_insert_segment+0x10c>)
 8031aa6:	681b      	ldr	r3, [r3, #0]
 8031aa8:	b29b      	uxth	r3, r3
 8031aaa:	1ad3      	subs	r3, r2, r3
 8031aac:	b29a      	uxth	r2, r3
 8031aae:	687b      	ldr	r3, [r7, #4]
 8031ab0:	811a      	strh	r2, [r3, #8]
      pbuf_realloc(cseg->p, cseg->len);
 8031ab2:	687b      	ldr	r3, [r7, #4]
 8031ab4:	685a      	ldr	r2, [r3, #4]
 8031ab6:	687b      	ldr	r3, [r7, #4]
 8031ab8:	891b      	ldrh	r3, [r3, #8]
 8031aba:	4619      	mov	r1, r3
 8031abc:	4610      	mov	r0, r2
 8031abe:	f7fc fa6d 	bl	802df9c <pbuf_realloc>
    }
  }
  cseg->next = next;
 8031ac2:	687b      	ldr	r3, [r7, #4]
 8031ac4:	683a      	ldr	r2, [r7, #0]
 8031ac6:	601a      	str	r2, [r3, #0]
}
 8031ac8:	bf00      	nop
 8031aca:	3714      	adds	r7, #20
 8031acc:	46bd      	mov	sp, r7
 8031ace:	bd90      	pop	{r4, r7, pc}
 8031ad0:	0803bca8 	.word	0x0803bca8
 8031ad4:	0803bf68 	.word	0x0803bf68
 8031ad8:	0803bcf4 	.word	0x0803bcf4
 8031adc:	2000ef38 	.word	0x2000ef38

08031ae0 <tcp_free_acked_segments>:

/** Remove segments from a list if the incoming ACK acknowledges them */
static struct tcp_seg *
tcp_free_acked_segments(struct tcp_pcb *pcb, struct tcp_seg *seg_list, const char *dbg_list_name,
                        struct tcp_seg *dbg_other_seg_list)
{
 8031ae0:	b5b0      	push	{r4, r5, r7, lr}
 8031ae2:	b086      	sub	sp, #24
 8031ae4:	af00      	add	r7, sp, #0
 8031ae6:	60f8      	str	r0, [r7, #12]
 8031ae8:	60b9      	str	r1, [r7, #8]
 8031aea:	607a      	str	r2, [r7, #4]
 8031aec:	603b      	str	r3, [r7, #0]
  u16_t clen;

  LWIP_UNUSED_ARG(dbg_list_name);
  LWIP_UNUSED_ARG(dbg_other_seg_list);

  while (seg_list != NULL &&
 8031aee:	e03e      	b.n	8031b6e <tcp_free_acked_segments+0x8e>
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: removing %"U32_F":%"U32_F" from pcb->%s\n",
                                  lwip_ntohl(seg_list->tcphdr->seqno),
                                  lwip_ntohl(seg_list->tcphdr->seqno) + TCP_TCPLEN(seg_list),
                                  dbg_list_name));

    next = seg_list;
 8031af0:	68bb      	ldr	r3, [r7, #8]
 8031af2:	617b      	str	r3, [r7, #20]
    seg_list = seg_list->next;
 8031af4:	68bb      	ldr	r3, [r7, #8]
 8031af6:	681b      	ldr	r3, [r3, #0]
 8031af8:	60bb      	str	r3, [r7, #8]

    clen = pbuf_clen(next->p);
 8031afa:	697b      	ldr	r3, [r7, #20]
 8031afc:	685b      	ldr	r3, [r3, #4]
 8031afe:	4618      	mov	r0, r3
 8031b00:	f7fc fc92 	bl	802e428 <pbuf_clen>
 8031b04:	4603      	mov	r3, r0
 8031b06:	827b      	strh	r3, [r7, #18]
    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_receive: queuelen %"TCPWNDSIZE_F" ... ",
                                 (tcpwnd_size_t)pcb->snd_queuelen));
    LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= clen));
 8031b08:	68fb      	ldr	r3, [r7, #12]
 8031b0a:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8031b0e:	8a7a      	ldrh	r2, [r7, #18]
 8031b10:	429a      	cmp	r2, r3
 8031b12:	d906      	bls.n	8031b22 <tcp_free_acked_segments+0x42>
 8031b14:	4b2a      	ldr	r3, [pc, #168]	; (8031bc0 <tcp_free_acked_segments+0xe0>)
 8031b16:	f240 4257 	movw	r2, #1111	; 0x457
 8031b1a:	492a      	ldr	r1, [pc, #168]	; (8031bc4 <tcp_free_acked_segments+0xe4>)
 8031b1c:	482a      	ldr	r0, [pc, #168]	; (8031bc8 <tcp_free_acked_segments+0xe8>)
 8031b1e:	f007 faa3 	bl	8039068 <iprintf>

    pcb->snd_queuelen = (u16_t)(pcb->snd_queuelen - clen);
 8031b22:	68fb      	ldr	r3, [r7, #12]
 8031b24:	f8b3 2066 	ldrh.w	r2, [r3, #102]	; 0x66
 8031b28:	8a7b      	ldrh	r3, [r7, #18]
 8031b2a:	1ad3      	subs	r3, r2, r3
 8031b2c:	b29a      	uxth	r2, r3
 8031b2e:	68fb      	ldr	r3, [r7, #12]
 8031b30:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
    recv_acked = (tcpwnd_size_t)(recv_acked + next->len);
 8031b34:	697b      	ldr	r3, [r7, #20]
 8031b36:	891a      	ldrh	r2, [r3, #8]
 8031b38:	4b24      	ldr	r3, [pc, #144]	; (8031bcc <tcp_free_acked_segments+0xec>)
 8031b3a:	881b      	ldrh	r3, [r3, #0]
 8031b3c:	4413      	add	r3, r2
 8031b3e:	b29a      	uxth	r2, r3
 8031b40:	4b22      	ldr	r3, [pc, #136]	; (8031bcc <tcp_free_acked_segments+0xec>)
 8031b42:	801a      	strh	r2, [r3, #0]
    tcp_seg_free(next);
 8031b44:	6978      	ldr	r0, [r7, #20]
 8031b46:	f7fe f87c 	bl	802fc42 <tcp_seg_free>

    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("%"TCPWNDSIZE_F" (after freeing %s)\n",
                                 (tcpwnd_size_t)pcb->snd_queuelen,
                                 dbg_list_name));
    if (pcb->snd_queuelen != 0) {
 8031b4a:	68fb      	ldr	r3, [r7, #12]
 8031b4c:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8031b50:	2b00      	cmp	r3, #0
 8031b52:	d00c      	beq.n	8031b6e <tcp_free_acked_segments+0x8e>
      LWIP_ASSERT("tcp_receive: valid queue length",
 8031b54:	68bb      	ldr	r3, [r7, #8]
 8031b56:	2b00      	cmp	r3, #0
 8031b58:	d109      	bne.n	8031b6e <tcp_free_acked_segments+0x8e>
 8031b5a:	683b      	ldr	r3, [r7, #0]
 8031b5c:	2b00      	cmp	r3, #0
 8031b5e:	d106      	bne.n	8031b6e <tcp_free_acked_segments+0x8e>
 8031b60:	4b17      	ldr	r3, [pc, #92]	; (8031bc0 <tcp_free_acked_segments+0xe0>)
 8031b62:	f240 4261 	movw	r2, #1121	; 0x461
 8031b66:	491a      	ldr	r1, [pc, #104]	; (8031bd0 <tcp_free_acked_segments+0xf0>)
 8031b68:	4817      	ldr	r0, [pc, #92]	; (8031bc8 <tcp_free_acked_segments+0xe8>)
 8031b6a:	f007 fa7d 	bl	8039068 <iprintf>
  while (seg_list != NULL &&
 8031b6e:	68bb      	ldr	r3, [r7, #8]
 8031b70:	2b00      	cmp	r3, #0
 8031b72:	d020      	beq.n	8031bb6 <tcp_free_acked_segments+0xd6>
         TCP_SEQ_LEQ(lwip_ntohl(seg_list->tcphdr->seqno) +
 8031b74:	68bb      	ldr	r3, [r7, #8]
 8031b76:	68db      	ldr	r3, [r3, #12]
 8031b78:	685b      	ldr	r3, [r3, #4]
 8031b7a:	4618      	mov	r0, r3
 8031b7c:	f7fa fee7 	bl	802c94e <lwip_htonl>
 8031b80:	4604      	mov	r4, r0
 8031b82:	68bb      	ldr	r3, [r7, #8]
 8031b84:	891b      	ldrh	r3, [r3, #8]
 8031b86:	461d      	mov	r5, r3
 8031b88:	68bb      	ldr	r3, [r7, #8]
 8031b8a:	68db      	ldr	r3, [r3, #12]
 8031b8c:	899b      	ldrh	r3, [r3, #12]
 8031b8e:	b29b      	uxth	r3, r3
 8031b90:	4618      	mov	r0, r3
 8031b92:	f7fa fec7 	bl	802c924 <lwip_htons>
 8031b96:	4603      	mov	r3, r0
 8031b98:	b2db      	uxtb	r3, r3
 8031b9a:	f003 0303 	and.w	r3, r3, #3
 8031b9e:	2b00      	cmp	r3, #0
 8031ba0:	d001      	beq.n	8031ba6 <tcp_free_acked_segments+0xc6>
 8031ba2:	2301      	movs	r3, #1
 8031ba4:	e000      	b.n	8031ba8 <tcp_free_acked_segments+0xc8>
 8031ba6:	2300      	movs	r3, #0
 8031ba8:	442b      	add	r3, r5
 8031baa:	18e2      	adds	r2, r4, r3
 8031bac:	4b09      	ldr	r3, [pc, #36]	; (8031bd4 <tcp_free_acked_segments+0xf4>)
 8031bae:	681b      	ldr	r3, [r3, #0]
 8031bb0:	1ad3      	subs	r3, r2, r3
  while (seg_list != NULL &&
 8031bb2:	2b00      	cmp	r3, #0
 8031bb4:	dd9c      	ble.n	8031af0 <tcp_free_acked_segments+0x10>
                  seg_list != NULL || dbg_other_seg_list != NULL);
    }
  }
  return seg_list;
 8031bb6:	68bb      	ldr	r3, [r7, #8]
}
 8031bb8:	4618      	mov	r0, r3
 8031bba:	3718      	adds	r7, #24
 8031bbc:	46bd      	mov	sp, r7
 8031bbe:	bdb0      	pop	{r4, r5, r7, pc}
 8031bc0:	0803bca8 	.word	0x0803bca8
 8031bc4:	0803bf90 	.word	0x0803bf90
 8031bc8:	0803bcf4 	.word	0x0803bcf4
 8031bcc:	2000ef40 	.word	0x2000ef40
 8031bd0:	0803bfb8 	.word	0x0803bfb8
 8031bd4:	2000ef3c 	.word	0x2000ef3c

08031bd8 <tcp_receive>:
 *
 * Called from tcp_process().
 */
static void
tcp_receive(struct tcp_pcb *pcb)
{
 8031bd8:	b5b0      	push	{r4, r5, r7, lr}
 8031bda:	b094      	sub	sp, #80	; 0x50
 8031bdc:	af00      	add	r7, sp, #0
 8031bde:	6078      	str	r0, [r7, #4]
  s16_t m;
  u32_t right_wnd_edge;
  int found_dupack = 0;
 8031be0:	2300      	movs	r3, #0
 8031be2:	64bb      	str	r3, [r7, #72]	; 0x48

  LWIP_ASSERT("tcp_receive: invalid pcb", pcb != NULL);
 8031be4:	687b      	ldr	r3, [r7, #4]
 8031be6:	2b00      	cmp	r3, #0
 8031be8:	d106      	bne.n	8031bf8 <tcp_receive+0x20>
 8031bea:	4b91      	ldr	r3, [pc, #580]	; (8031e30 <tcp_receive+0x258>)
 8031bec:	f240 427b 	movw	r2, #1147	; 0x47b
 8031bf0:	4990      	ldr	r1, [pc, #576]	; (8031e34 <tcp_receive+0x25c>)
 8031bf2:	4891      	ldr	r0, [pc, #580]	; (8031e38 <tcp_receive+0x260>)
 8031bf4:	f007 fa38 	bl	8039068 <iprintf>
  LWIP_ASSERT("tcp_receive: wrong state", pcb->state >= ESTABLISHED);
 8031bf8:	687b      	ldr	r3, [r7, #4]
 8031bfa:	7d1b      	ldrb	r3, [r3, #20]
 8031bfc:	2b03      	cmp	r3, #3
 8031bfe:	d806      	bhi.n	8031c0e <tcp_receive+0x36>
 8031c00:	4b8b      	ldr	r3, [pc, #556]	; (8031e30 <tcp_receive+0x258>)
 8031c02:	f240 427c 	movw	r2, #1148	; 0x47c
 8031c06:	498d      	ldr	r1, [pc, #564]	; (8031e3c <tcp_receive+0x264>)
 8031c08:	488b      	ldr	r0, [pc, #556]	; (8031e38 <tcp_receive+0x260>)
 8031c0a:	f007 fa2d 	bl	8039068 <iprintf>

  if (flags & TCP_ACK) {
 8031c0e:	4b8c      	ldr	r3, [pc, #560]	; (8031e40 <tcp_receive+0x268>)
 8031c10:	781b      	ldrb	r3, [r3, #0]
 8031c12:	f003 0310 	and.w	r3, r3, #16
 8031c16:	2b00      	cmp	r3, #0
 8031c18:	f000 8264 	beq.w	80320e4 <tcp_receive+0x50c>
    right_wnd_edge = pcb->snd_wnd + pcb->snd_wl2;
 8031c1c:	687b      	ldr	r3, [r7, #4]
 8031c1e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8031c22:	461a      	mov	r2, r3
 8031c24:	687b      	ldr	r3, [r7, #4]
 8031c26:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8031c28:	4413      	add	r3, r2
 8031c2a:	633b      	str	r3, [r7, #48]	; 0x30

    /* Update window. */
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 8031c2c:	687b      	ldr	r3, [r7, #4]
 8031c2e:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8031c30:	4b84      	ldr	r3, [pc, #528]	; (8031e44 <tcp_receive+0x26c>)
 8031c32:	681b      	ldr	r3, [r3, #0]
 8031c34:	1ad3      	subs	r3, r2, r3
 8031c36:	2b00      	cmp	r3, #0
 8031c38:	db1b      	blt.n	8031c72 <tcp_receive+0x9a>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 8031c3a:	687b      	ldr	r3, [r7, #4]
 8031c3c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8031c3e:	4b81      	ldr	r3, [pc, #516]	; (8031e44 <tcp_receive+0x26c>)
 8031c40:	681b      	ldr	r3, [r3, #0]
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 8031c42:	429a      	cmp	r2, r3
 8031c44:	d106      	bne.n	8031c54 <tcp_receive+0x7c>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 8031c46:	687b      	ldr	r3, [r7, #4]
 8031c48:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8031c4a:	4b7f      	ldr	r3, [pc, #508]	; (8031e48 <tcp_receive+0x270>)
 8031c4c:	681b      	ldr	r3, [r3, #0]
 8031c4e:	1ad3      	subs	r3, r2, r3
 8031c50:	2b00      	cmp	r3, #0
 8031c52:	db0e      	blt.n	8031c72 <tcp_receive+0x9a>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 8031c54:	687b      	ldr	r3, [r7, #4]
 8031c56:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8031c58:	4b7b      	ldr	r3, [pc, #492]	; (8031e48 <tcp_receive+0x270>)
 8031c5a:	681b      	ldr	r3, [r3, #0]
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 8031c5c:	429a      	cmp	r2, r3
 8031c5e:	d125      	bne.n	8031cac <tcp_receive+0xd4>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 8031c60:	4b7a      	ldr	r3, [pc, #488]	; (8031e4c <tcp_receive+0x274>)
 8031c62:	681b      	ldr	r3, [r3, #0]
 8031c64:	89db      	ldrh	r3, [r3, #14]
 8031c66:	b29a      	uxth	r2, r3
 8031c68:	687b      	ldr	r3, [r7, #4]
 8031c6a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8031c6e:	429a      	cmp	r2, r3
 8031c70:	d91c      	bls.n	8031cac <tcp_receive+0xd4>
      pcb->snd_wnd = SND_WND_SCALE(pcb, tcphdr->wnd);
 8031c72:	4b76      	ldr	r3, [pc, #472]	; (8031e4c <tcp_receive+0x274>)
 8031c74:	681b      	ldr	r3, [r3, #0]
 8031c76:	89db      	ldrh	r3, [r3, #14]
 8031c78:	b29a      	uxth	r2, r3
 8031c7a:	687b      	ldr	r3, [r7, #4]
 8031c7c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
      /* keep track of the biggest window announced by the remote host to calculate
         the maximum segment size */
      if (pcb->snd_wnd_max < pcb->snd_wnd) {
 8031c80:	687b      	ldr	r3, [r7, #4]
 8031c82:	f8b3 2062 	ldrh.w	r2, [r3, #98]	; 0x62
 8031c86:	687b      	ldr	r3, [r7, #4]
 8031c88:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8031c8c:	429a      	cmp	r2, r3
 8031c8e:	d205      	bcs.n	8031c9c <tcp_receive+0xc4>
        pcb->snd_wnd_max = pcb->snd_wnd;
 8031c90:	687b      	ldr	r3, [r7, #4]
 8031c92:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 8031c96:	687b      	ldr	r3, [r7, #4]
 8031c98:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
      }
      pcb->snd_wl1 = seqno;
 8031c9c:	4b69      	ldr	r3, [pc, #420]	; (8031e44 <tcp_receive+0x26c>)
 8031c9e:	681a      	ldr	r2, [r3, #0]
 8031ca0:	687b      	ldr	r3, [r7, #4]
 8031ca2:	655a      	str	r2, [r3, #84]	; 0x54
      pcb->snd_wl2 = ackno;
 8031ca4:	4b68      	ldr	r3, [pc, #416]	; (8031e48 <tcp_receive+0x270>)
 8031ca6:	681a      	ldr	r2, [r3, #0]
 8031ca8:	687b      	ldr	r3, [r7, #4]
 8031caa:	659a      	str	r2, [r3, #88]	; 0x58
     * If it only passes 1, should reset dupack counter
     *
     */

    /* Clause 1 */
    if (TCP_SEQ_LEQ(ackno, pcb->lastack)) {
 8031cac:	4b66      	ldr	r3, [pc, #408]	; (8031e48 <tcp_receive+0x270>)
 8031cae:	681a      	ldr	r2, [r3, #0]
 8031cb0:	687b      	ldr	r3, [r7, #4]
 8031cb2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8031cb4:	1ad3      	subs	r3, r2, r3
 8031cb6:	2b00      	cmp	r3, #0
 8031cb8:	dc58      	bgt.n	8031d6c <tcp_receive+0x194>
      /* Clause 2 */
      if (tcplen == 0) {
 8031cba:	4b65      	ldr	r3, [pc, #404]	; (8031e50 <tcp_receive+0x278>)
 8031cbc:	881b      	ldrh	r3, [r3, #0]
 8031cbe:	2b00      	cmp	r3, #0
 8031cc0:	d14b      	bne.n	8031d5a <tcp_receive+0x182>
        /* Clause 3 */
        if (pcb->snd_wl2 + pcb->snd_wnd == right_wnd_edge) {
 8031cc2:	687b      	ldr	r3, [r7, #4]
 8031cc4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8031cc6:	687a      	ldr	r2, [r7, #4]
 8031cc8:	f8b2 2060 	ldrh.w	r2, [r2, #96]	; 0x60
 8031ccc:	4413      	add	r3, r2
 8031cce:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8031cd0:	429a      	cmp	r2, r3
 8031cd2:	d142      	bne.n	8031d5a <tcp_receive+0x182>
          /* Clause 4 */
          if (pcb->rtime >= 0) {
 8031cd4:	687b      	ldr	r3, [r7, #4]
 8031cd6:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 8031cda:	2b00      	cmp	r3, #0
 8031cdc:	db3d      	blt.n	8031d5a <tcp_receive+0x182>
            /* Clause 5 */
            if (pcb->lastack == ackno) {
 8031cde:	687b      	ldr	r3, [r7, #4]
 8031ce0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8031ce2:	4b59      	ldr	r3, [pc, #356]	; (8031e48 <tcp_receive+0x270>)
 8031ce4:	681b      	ldr	r3, [r3, #0]
 8031ce6:	429a      	cmp	r2, r3
 8031ce8:	d137      	bne.n	8031d5a <tcp_receive+0x182>
              found_dupack = 1;
 8031cea:	2301      	movs	r3, #1
 8031cec:	64bb      	str	r3, [r7, #72]	; 0x48
              if ((u8_t)(pcb->dupacks + 1) > pcb->dupacks) {
 8031cee:	687b      	ldr	r3, [r7, #4]
 8031cf0:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8031cf4:	2bff      	cmp	r3, #255	; 0xff
 8031cf6:	d007      	beq.n	8031d08 <tcp_receive+0x130>
                ++pcb->dupacks;
 8031cf8:	687b      	ldr	r3, [r7, #4]
 8031cfa:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8031cfe:	3301      	adds	r3, #1
 8031d00:	b2da      	uxtb	r2, r3
 8031d02:	687b      	ldr	r3, [r7, #4]
 8031d04:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
              }
              if (pcb->dupacks > 3) {
 8031d08:	687b      	ldr	r3, [r7, #4]
 8031d0a:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8031d0e:	2b03      	cmp	r3, #3
 8031d10:	d91b      	bls.n	8031d4a <tcp_receive+0x172>
                /* Inflate the congestion window */
                TCP_WND_INC(pcb->cwnd, pcb->mss);
 8031d12:	687b      	ldr	r3, [r7, #4]
 8031d14:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8031d18:	687b      	ldr	r3, [r7, #4]
 8031d1a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8031d1c:	4413      	add	r3, r2
 8031d1e:	b29a      	uxth	r2, r3
 8031d20:	687b      	ldr	r3, [r7, #4]
 8031d22:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8031d26:	429a      	cmp	r2, r3
 8031d28:	d30a      	bcc.n	8031d40 <tcp_receive+0x168>
 8031d2a:	687b      	ldr	r3, [r7, #4]
 8031d2c:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8031d30:	687b      	ldr	r3, [r7, #4]
 8031d32:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8031d34:	4413      	add	r3, r2
 8031d36:	b29a      	uxth	r2, r3
 8031d38:	687b      	ldr	r3, [r7, #4]
 8031d3a:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 8031d3e:	e004      	b.n	8031d4a <tcp_receive+0x172>
 8031d40:	687b      	ldr	r3, [r7, #4]
 8031d42:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8031d46:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
              }
              if (pcb->dupacks >= 3) {
 8031d4a:	687b      	ldr	r3, [r7, #4]
 8031d4c:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8031d50:	2b02      	cmp	r3, #2
 8031d52:	d902      	bls.n	8031d5a <tcp_receive+0x182>
                /* Do fast retransmit (checked via TF_INFR, not via dupacks count) */
                tcp_rexmit_fast(pcb);
 8031d54:	6878      	ldr	r0, [r7, #4]
 8031d56:	f002 fb87 	bl	8034468 <tcp_rexmit_fast>
          }
        }
      }
      /* If Clause (1) or more is true, but not a duplicate ack, reset
       * count of consecutive duplicate acks */
      if (!found_dupack) {
 8031d5a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8031d5c:	2b00      	cmp	r3, #0
 8031d5e:	f040 8161 	bne.w	8032024 <tcp_receive+0x44c>
        pcb->dupacks = 0;
 8031d62:	687b      	ldr	r3, [r7, #4]
 8031d64:	2200      	movs	r2, #0
 8031d66:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8031d6a:	e15b      	b.n	8032024 <tcp_receive+0x44c>
      }
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8031d6c:	4b36      	ldr	r3, [pc, #216]	; (8031e48 <tcp_receive+0x270>)
 8031d6e:	681a      	ldr	r2, [r3, #0]
 8031d70:	687b      	ldr	r3, [r7, #4]
 8031d72:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8031d74:	1ad3      	subs	r3, r2, r3
 8031d76:	3b01      	subs	r3, #1
 8031d78:	2b00      	cmp	r3, #0
 8031d7a:	f2c0 814e 	blt.w	803201a <tcp_receive+0x442>
 8031d7e:	4b32      	ldr	r3, [pc, #200]	; (8031e48 <tcp_receive+0x270>)
 8031d80:	681a      	ldr	r2, [r3, #0]
 8031d82:	687b      	ldr	r3, [r7, #4]
 8031d84:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8031d86:	1ad3      	subs	r3, r2, r3
 8031d88:	2b00      	cmp	r3, #0
 8031d8a:	f300 8146 	bgt.w	803201a <tcp_receive+0x442>
      tcpwnd_size_t acked;

      /* Reset the "IN Fast Retransmit" flag, since we are no longer
         in fast retransmit. Also reset the congestion window to the
         slow start threshold. */
      if (pcb->flags & TF_INFR) {
 8031d8e:	687b      	ldr	r3, [r7, #4]
 8031d90:	8b5b      	ldrh	r3, [r3, #26]
 8031d92:	f003 0304 	and.w	r3, r3, #4
 8031d96:	2b00      	cmp	r3, #0
 8031d98:	d010      	beq.n	8031dbc <tcp_receive+0x1e4>
        tcp_clear_flags(pcb, TF_INFR);
 8031d9a:	687b      	ldr	r3, [r7, #4]
 8031d9c:	8b5b      	ldrh	r3, [r3, #26]
 8031d9e:	f023 0304 	bic.w	r3, r3, #4
 8031da2:	b29a      	uxth	r2, r3
 8031da4:	687b      	ldr	r3, [r7, #4]
 8031da6:	835a      	strh	r2, [r3, #26]
        pcb->cwnd = pcb->ssthresh;
 8031da8:	687b      	ldr	r3, [r7, #4]
 8031daa:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 8031dae:	687b      	ldr	r3, [r7, #4]
 8031db0:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
        pcb->bytes_acked = 0;
 8031db4:	687b      	ldr	r3, [r7, #4]
 8031db6:	2200      	movs	r2, #0
 8031db8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
      }

      /* Reset the number of retransmissions. */
      pcb->nrtx = 0;
 8031dbc:	687b      	ldr	r3, [r7, #4]
 8031dbe:	2200      	movs	r2, #0
 8031dc0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Reset the retransmission time-out. */
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 8031dc4:	687b      	ldr	r3, [r7, #4]
 8031dc6:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8031dca:	10db      	asrs	r3, r3, #3
 8031dcc:	b21b      	sxth	r3, r3
 8031dce:	b29a      	uxth	r2, r3
 8031dd0:	687b      	ldr	r3, [r7, #4]
 8031dd2:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 8031dd6:	b29b      	uxth	r3, r3
 8031dd8:	4413      	add	r3, r2
 8031dda:	b29b      	uxth	r3, r3
 8031ddc:	b21a      	sxth	r2, r3
 8031dde:	687b      	ldr	r3, [r7, #4]
 8031de0:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      /* Record how much data this ACK acks */
      acked = (tcpwnd_size_t)(ackno - pcb->lastack);
 8031de4:	4b18      	ldr	r3, [pc, #96]	; (8031e48 <tcp_receive+0x270>)
 8031de6:	681b      	ldr	r3, [r3, #0]
 8031de8:	b29a      	uxth	r2, r3
 8031dea:	687b      	ldr	r3, [r7, #4]
 8031dec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8031dee:	b29b      	uxth	r3, r3
 8031df0:	1ad3      	subs	r3, r2, r3
 8031df2:	85fb      	strh	r3, [r7, #46]	; 0x2e

      /* Reset the fast retransmit variables. */
      pcb->dupacks = 0;
 8031df4:	687b      	ldr	r3, [r7, #4]
 8031df6:	2200      	movs	r2, #0
 8031df8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
      pcb->lastack = ackno;
 8031dfc:	4b12      	ldr	r3, [pc, #72]	; (8031e48 <tcp_receive+0x270>)
 8031dfe:	681a      	ldr	r2, [r3, #0]
 8031e00:	687b      	ldr	r3, [r7, #4]
 8031e02:	645a      	str	r2, [r3, #68]	; 0x44

      /* Update the congestion control variables (cwnd and
         ssthresh). */
      if (pcb->state >= ESTABLISHED) {
 8031e04:	687b      	ldr	r3, [r7, #4]
 8031e06:	7d1b      	ldrb	r3, [r3, #20]
 8031e08:	2b03      	cmp	r3, #3
 8031e0a:	f240 8097 	bls.w	8031f3c <tcp_receive+0x364>
        if (pcb->cwnd < pcb->ssthresh) {
 8031e0e:	687b      	ldr	r3, [r7, #4]
 8031e10:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8031e14:	687b      	ldr	r3, [r7, #4]
 8031e16:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 8031e1a:	429a      	cmp	r2, r3
 8031e1c:	d245      	bcs.n	8031eaa <tcp_receive+0x2d2>
          tcpwnd_size_t increase;
          /* limit to 1 SMSS segment during period following RTO */
          u8_t num_seg = (pcb->flags & TF_RTO) ? 1 : 2;
 8031e1e:	687b      	ldr	r3, [r7, #4]
 8031e20:	8b5b      	ldrh	r3, [r3, #26]
 8031e22:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8031e26:	2b00      	cmp	r3, #0
 8031e28:	d014      	beq.n	8031e54 <tcp_receive+0x27c>
 8031e2a:	2301      	movs	r3, #1
 8031e2c:	e013      	b.n	8031e56 <tcp_receive+0x27e>
 8031e2e:	bf00      	nop
 8031e30:	0803bca8 	.word	0x0803bca8
 8031e34:	0803bfd8 	.word	0x0803bfd8
 8031e38:	0803bcf4 	.word	0x0803bcf4
 8031e3c:	0803bff4 	.word	0x0803bff4
 8031e40:	2000ef44 	.word	0x2000ef44
 8031e44:	2000ef38 	.word	0x2000ef38
 8031e48:	2000ef3c 	.word	0x2000ef3c
 8031e4c:	2000ef28 	.word	0x2000ef28
 8031e50:	2000ef42 	.word	0x2000ef42
 8031e54:	2302      	movs	r3, #2
 8031e56:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
          /* RFC 3465, section 2.2 Slow Start */
          increase = LWIP_MIN(acked, (tcpwnd_size_t)(num_seg * pcb->mss));
 8031e5a:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8031e5e:	b29a      	uxth	r2, r3
 8031e60:	687b      	ldr	r3, [r7, #4]
 8031e62:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8031e64:	fb12 f303 	smulbb	r3, r2, r3
 8031e68:	b29b      	uxth	r3, r3
 8031e6a:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8031e6c:	4293      	cmp	r3, r2
 8031e6e:	bf28      	it	cs
 8031e70:	4613      	movcs	r3, r2
 8031e72:	857b      	strh	r3, [r7, #42]	; 0x2a
          TCP_WND_INC(pcb->cwnd, increase);
 8031e74:	687b      	ldr	r3, [r7, #4]
 8031e76:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8031e7a:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8031e7c:	4413      	add	r3, r2
 8031e7e:	b29a      	uxth	r2, r3
 8031e80:	687b      	ldr	r3, [r7, #4]
 8031e82:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8031e86:	429a      	cmp	r2, r3
 8031e88:	d309      	bcc.n	8031e9e <tcp_receive+0x2c6>
 8031e8a:	687b      	ldr	r3, [r7, #4]
 8031e8c:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8031e90:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8031e92:	4413      	add	r3, r2
 8031e94:	b29a      	uxth	r2, r3
 8031e96:	687b      	ldr	r3, [r7, #4]
 8031e98:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 8031e9c:	e04e      	b.n	8031f3c <tcp_receive+0x364>
 8031e9e:	687b      	ldr	r3, [r7, #4]
 8031ea0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8031ea4:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 8031ea8:	e048      	b.n	8031f3c <tcp_receive+0x364>
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_receive: slow start cwnd %"TCPWNDSIZE_F"\n", pcb->cwnd));
        } else {
          /* RFC 3465, section 2.1 Congestion Avoidance */
          TCP_WND_INC(pcb->bytes_acked, acked);
 8031eaa:	687b      	ldr	r3, [r7, #4]
 8031eac:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 8031eb0:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8031eb2:	4413      	add	r3, r2
 8031eb4:	b29a      	uxth	r2, r3
 8031eb6:	687b      	ldr	r3, [r7, #4]
 8031eb8:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8031ebc:	429a      	cmp	r2, r3
 8031ebe:	d309      	bcc.n	8031ed4 <tcp_receive+0x2fc>
 8031ec0:	687b      	ldr	r3, [r7, #4]
 8031ec2:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 8031ec6:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8031ec8:	4413      	add	r3, r2
 8031eca:	b29a      	uxth	r2, r3
 8031ecc:	687b      	ldr	r3, [r7, #4]
 8031ece:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 8031ed2:	e004      	b.n	8031ede <tcp_receive+0x306>
 8031ed4:	687b      	ldr	r3, [r7, #4]
 8031ed6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8031eda:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          if (pcb->bytes_acked >= pcb->cwnd) {
 8031ede:	687b      	ldr	r3, [r7, #4]
 8031ee0:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 8031ee4:	687b      	ldr	r3, [r7, #4]
 8031ee6:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8031eea:	429a      	cmp	r2, r3
 8031eec:	d326      	bcc.n	8031f3c <tcp_receive+0x364>
            pcb->bytes_acked = (tcpwnd_size_t)(pcb->bytes_acked - pcb->cwnd);
 8031eee:	687b      	ldr	r3, [r7, #4]
 8031ef0:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 8031ef4:	687b      	ldr	r3, [r7, #4]
 8031ef6:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8031efa:	1ad3      	subs	r3, r2, r3
 8031efc:	b29a      	uxth	r2, r3
 8031efe:	687b      	ldr	r3, [r7, #4]
 8031f00:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
            TCP_WND_INC(pcb->cwnd, pcb->mss);
 8031f04:	687b      	ldr	r3, [r7, #4]
 8031f06:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8031f0a:	687b      	ldr	r3, [r7, #4]
 8031f0c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8031f0e:	4413      	add	r3, r2
 8031f10:	b29a      	uxth	r2, r3
 8031f12:	687b      	ldr	r3, [r7, #4]
 8031f14:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8031f18:	429a      	cmp	r2, r3
 8031f1a:	d30a      	bcc.n	8031f32 <tcp_receive+0x35a>
 8031f1c:	687b      	ldr	r3, [r7, #4]
 8031f1e:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8031f22:	687b      	ldr	r3, [r7, #4]
 8031f24:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8031f26:	4413      	add	r3, r2
 8031f28:	b29a      	uxth	r2, r3
 8031f2a:	687b      	ldr	r3, [r7, #4]
 8031f2c:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 8031f30:	e004      	b.n	8031f3c <tcp_receive+0x364>
 8031f32:	687b      	ldr	r3, [r7, #4]
 8031f34:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8031f38:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
                                    pcb->unacked != NULL ?
                                    lwip_ntohl(pcb->unacked->tcphdr->seqno) + TCP_TCPLEN(pcb->unacked) : 0));

      /* Remove segment from the unacknowledged list if the incoming
         ACK acknowledges them. */
      pcb->unacked = tcp_free_acked_segments(pcb, pcb->unacked, "unacked", pcb->unsent);
 8031f3c:	687b      	ldr	r3, [r7, #4]
 8031f3e:	6f19      	ldr	r1, [r3, #112]	; 0x70
 8031f40:	687b      	ldr	r3, [r7, #4]
 8031f42:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8031f44:	4a98      	ldr	r2, [pc, #608]	; (80321a8 <tcp_receive+0x5d0>)
 8031f46:	6878      	ldr	r0, [r7, #4]
 8031f48:	f7ff fdca 	bl	8031ae0 <tcp_free_acked_segments>
 8031f4c:	4602      	mov	r2, r0
 8031f4e:	687b      	ldr	r3, [r7, #4]
 8031f50:	671a      	str	r2, [r3, #112]	; 0x70
         on the list are acknowledged by the ACK. This may seem
         strange since an "unsent" segment shouldn't be acked. The
         rationale is that lwIP puts all outstanding segments on the
         ->unsent list after a retransmission, so these segments may
         in fact have been sent once. */
      pcb->unsent = tcp_free_acked_segments(pcb, pcb->unsent, "unsent", pcb->unacked);
 8031f52:	687b      	ldr	r3, [r7, #4]
 8031f54:	6ed9      	ldr	r1, [r3, #108]	; 0x6c
 8031f56:	687b      	ldr	r3, [r7, #4]
 8031f58:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8031f5a:	4a94      	ldr	r2, [pc, #592]	; (80321ac <tcp_receive+0x5d4>)
 8031f5c:	6878      	ldr	r0, [r7, #4]
 8031f5e:	f7ff fdbf 	bl	8031ae0 <tcp_free_acked_segments>
 8031f62:	4602      	mov	r2, r0
 8031f64:	687b      	ldr	r3, [r7, #4]
 8031f66:	66da      	str	r2, [r3, #108]	; 0x6c

      /* If there's nothing left to acknowledge, stop the retransmit
         timer, otherwise reset it to start again */
      if (pcb->unacked == NULL) {
 8031f68:	687b      	ldr	r3, [r7, #4]
 8031f6a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8031f6c:	2b00      	cmp	r3, #0
 8031f6e:	d104      	bne.n	8031f7a <tcp_receive+0x3a2>
        pcb->rtime = -1;
 8031f70:	687b      	ldr	r3, [r7, #4]
 8031f72:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8031f76:	861a      	strh	r2, [r3, #48]	; 0x30
 8031f78:	e002      	b.n	8031f80 <tcp_receive+0x3a8>
      } else {
        pcb->rtime = 0;
 8031f7a:	687b      	ldr	r3, [r7, #4]
 8031f7c:	2200      	movs	r2, #0
 8031f7e:	861a      	strh	r2, [r3, #48]	; 0x30
      }

      pcb->polltmr = 0;
 8031f80:	687b      	ldr	r3, [r7, #4]
 8031f82:	2200      	movs	r2, #0
 8031f84:	771a      	strb	r2, [r3, #28]

#if TCP_OVERSIZE
      if (pcb->unsent == NULL) {
 8031f86:	687b      	ldr	r3, [r7, #4]
 8031f88:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8031f8a:	2b00      	cmp	r3, #0
 8031f8c:	d103      	bne.n	8031f96 <tcp_receive+0x3be>
        pcb->unsent_oversize = 0;
 8031f8e:	687b      	ldr	r3, [r7, #4]
 8031f90:	2200      	movs	r2, #0
 8031f92:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
        /* Inform neighbor reachability of forward progress. */
        nd6_reachability_hint(ip6_current_src_addr());
      }
#endif /* LWIP_IPV6 && LWIP_ND6_TCP_REACHABILITY_HINTS*/

      pcb->snd_buf = (tcpwnd_size_t)(pcb->snd_buf + recv_acked);
 8031f96:	687b      	ldr	r3, [r7, #4]
 8031f98:	f8b3 2064 	ldrh.w	r2, [r3, #100]	; 0x64
 8031f9c:	4b84      	ldr	r3, [pc, #528]	; (80321b0 <tcp_receive+0x5d8>)
 8031f9e:	881b      	ldrh	r3, [r3, #0]
 8031fa0:	4413      	add	r3, r2
 8031fa2:	b29a      	uxth	r2, r3
 8031fa4:	687b      	ldr	r3, [r7, #4]
 8031fa6:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
      /* check if this ACK ends our retransmission of in-flight data */
      if (pcb->flags & TF_RTO) {
 8031faa:	687b      	ldr	r3, [r7, #4]
 8031fac:	8b5b      	ldrh	r3, [r3, #26]
 8031fae:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8031fb2:	2b00      	cmp	r3, #0
 8031fb4:	d035      	beq.n	8032022 <tcp_receive+0x44a>
        /* RTO is done if
            1) both queues are empty or
            2) unacked is empty and unsent head contains data not part of RTO or
            3) unacked head contains data not part of RTO */
        if (pcb->unacked == NULL) {
 8031fb6:	687b      	ldr	r3, [r7, #4]
 8031fb8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8031fba:	2b00      	cmp	r3, #0
 8031fbc:	d118      	bne.n	8031ff0 <tcp_receive+0x418>
          if ((pcb->unsent == NULL) ||
 8031fbe:	687b      	ldr	r3, [r7, #4]
 8031fc0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8031fc2:	2b00      	cmp	r3, #0
 8031fc4:	d00c      	beq.n	8031fe0 <tcp_receive+0x408>
              (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unsent->tcphdr->seqno)))) {
 8031fc6:	687b      	ldr	r3, [r7, #4]
 8031fc8:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 8031fca:	687b      	ldr	r3, [r7, #4]
 8031fcc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8031fce:	68db      	ldr	r3, [r3, #12]
 8031fd0:	685b      	ldr	r3, [r3, #4]
 8031fd2:	4618      	mov	r0, r3
 8031fd4:	f7fa fcbb 	bl	802c94e <lwip_htonl>
 8031fd8:	4603      	mov	r3, r0
 8031fda:	1ae3      	subs	r3, r4, r3
          if ((pcb->unsent == NULL) ||
 8031fdc:	2b00      	cmp	r3, #0
 8031fde:	dc20      	bgt.n	8032022 <tcp_receive+0x44a>
            tcp_clear_flags(pcb, TF_RTO);
 8031fe0:	687b      	ldr	r3, [r7, #4]
 8031fe2:	8b5b      	ldrh	r3, [r3, #26]
 8031fe4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8031fe8:	b29a      	uxth	r2, r3
 8031fea:	687b      	ldr	r3, [r7, #4]
 8031fec:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8031fee:	e018      	b.n	8032022 <tcp_receive+0x44a>
          }
        } else if (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unacked->tcphdr->seqno))) {
 8031ff0:	687b      	ldr	r3, [r7, #4]
 8031ff2:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 8031ff4:	687b      	ldr	r3, [r7, #4]
 8031ff6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8031ff8:	68db      	ldr	r3, [r3, #12]
 8031ffa:	685b      	ldr	r3, [r3, #4]
 8031ffc:	4618      	mov	r0, r3
 8031ffe:	f7fa fca6 	bl	802c94e <lwip_htonl>
 8032002:	4603      	mov	r3, r0
 8032004:	1ae3      	subs	r3, r4, r3
 8032006:	2b00      	cmp	r3, #0
 8032008:	dc0b      	bgt.n	8032022 <tcp_receive+0x44a>
          tcp_clear_flags(pcb, TF_RTO);
 803200a:	687b      	ldr	r3, [r7, #4]
 803200c:	8b5b      	ldrh	r3, [r3, #26]
 803200e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8032012:	b29a      	uxth	r2, r3
 8032014:	687b      	ldr	r3, [r7, #4]
 8032016:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8032018:	e003      	b.n	8032022 <tcp_receive+0x44a>
        }
      }
      /* End of ACK for new data processing. */
    } else {
      /* Out of sequence ACK, didn't really ack anything */
      tcp_send_empty_ack(pcb);
 803201a:	6878      	ldr	r0, [r7, #4]
 803201c:	f002 fc1c 	bl	8034858 <tcp_send_empty_ack>
 8032020:	e000      	b.n	8032024 <tcp_receive+0x44c>
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8032022:	bf00      	nop
                                pcb->rttest, pcb->rtseq, ackno));

    /* RTT estimation calculations. This is done by checking if the
       incoming segment acknowledges the segment we use to take a
       round-trip time measurement. */
    if (pcb->rttest && TCP_SEQ_LT(pcb->rtseq, ackno)) {
 8032024:	687b      	ldr	r3, [r7, #4]
 8032026:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8032028:	2b00      	cmp	r3, #0
 803202a:	d05b      	beq.n	80320e4 <tcp_receive+0x50c>
 803202c:	687b      	ldr	r3, [r7, #4]
 803202e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8032030:	4b60      	ldr	r3, [pc, #384]	; (80321b4 <tcp_receive+0x5dc>)
 8032032:	681b      	ldr	r3, [r3, #0]
 8032034:	1ad3      	subs	r3, r2, r3
 8032036:	2b00      	cmp	r3, #0
 8032038:	da54      	bge.n	80320e4 <tcp_receive+0x50c>
      /* diff between this shouldn't exceed 32K since this are tcp timer ticks
         and a round-trip shouldn't be that long... */
      m = (s16_t)(tcp_ticks - pcb->rttest);
 803203a:	4b5f      	ldr	r3, [pc, #380]	; (80321b8 <tcp_receive+0x5e0>)
 803203c:	681b      	ldr	r3, [r3, #0]
 803203e:	b29a      	uxth	r2, r3
 8032040:	687b      	ldr	r3, [r7, #4]
 8032042:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8032044:	b29b      	uxth	r3, r3
 8032046:	1ad3      	subs	r3, r2, r3
 8032048:	b29b      	uxth	r3, r3
 803204a:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: experienced rtt %"U16_F" ticks (%"U16_F" msec).\n",
                                  m, (u16_t)(m * TCP_SLOW_INTERVAL)));

      /* This is taken directly from VJs original code in his paper */
      m = (s16_t)(m - (pcb->sa >> 3));
 803204e:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 8032052:	687b      	ldr	r3, [r7, #4]
 8032054:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8032058:	10db      	asrs	r3, r3, #3
 803205a:	b21b      	sxth	r3, r3
 803205c:	b29b      	uxth	r3, r3
 803205e:	1ad3      	subs	r3, r2, r3
 8032060:	b29b      	uxth	r3, r3
 8032062:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      pcb->sa = (s16_t)(pcb->sa + m);
 8032066:	687b      	ldr	r3, [r7, #4]
 8032068:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 803206c:	b29a      	uxth	r2, r3
 803206e:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8032072:	4413      	add	r3, r2
 8032074:	b29b      	uxth	r3, r3
 8032076:	b21a      	sxth	r2, r3
 8032078:	687b      	ldr	r3, [r7, #4]
 803207a:	879a      	strh	r2, [r3, #60]	; 0x3c
      if (m < 0) {
 803207c:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 8032080:	2b00      	cmp	r3, #0
 8032082:	da05      	bge.n	8032090 <tcp_receive+0x4b8>
        m = (s16_t) - m;
 8032084:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8032088:	425b      	negs	r3, r3
 803208a:	b29b      	uxth	r3, r3
 803208c:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      }
      m = (s16_t)(m - (pcb->sv >> 2));
 8032090:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 8032094:	687b      	ldr	r3, [r7, #4]
 8032096:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 803209a:	109b      	asrs	r3, r3, #2
 803209c:	b21b      	sxth	r3, r3
 803209e:	b29b      	uxth	r3, r3
 80320a0:	1ad3      	subs	r3, r2, r3
 80320a2:	b29b      	uxth	r3, r3
 80320a4:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      pcb->sv = (s16_t)(pcb->sv + m);
 80320a8:	687b      	ldr	r3, [r7, #4]
 80320aa:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 80320ae:	b29a      	uxth	r2, r3
 80320b0:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80320b4:	4413      	add	r3, r2
 80320b6:	b29b      	uxth	r3, r3
 80320b8:	b21a      	sxth	r2, r3
 80320ba:	687b      	ldr	r3, [r7, #4]
 80320bc:	87da      	strh	r2, [r3, #62]	; 0x3e
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 80320be:	687b      	ldr	r3, [r7, #4]
 80320c0:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 80320c4:	10db      	asrs	r3, r3, #3
 80320c6:	b21b      	sxth	r3, r3
 80320c8:	b29a      	uxth	r2, r3
 80320ca:	687b      	ldr	r3, [r7, #4]
 80320cc:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 80320d0:	b29b      	uxth	r3, r3
 80320d2:	4413      	add	r3, r2
 80320d4:	b29b      	uxth	r3, r3
 80320d6:	b21a      	sxth	r2, r3
 80320d8:	687b      	ldr	r3, [r7, #4]
 80320da:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: RTO %"U16_F" (%"U16_F" milliseconds)\n",
                                  pcb->rto, (u16_t)(pcb->rto * TCP_SLOW_INTERVAL)));

      pcb->rttest = 0;
 80320de:	687b      	ldr	r3, [r7, #4]
 80320e0:	2200      	movs	r2, #0
 80320e2:	635a      	str	r2, [r3, #52]	; 0x34

  /* If the incoming segment contains data, we must process it
     further unless the pcb already received a FIN.
     (RFC 793, chapter 3.9, "SEGMENT ARRIVES" in states CLOSE-WAIT, CLOSING,
     LAST-ACK and TIME-WAIT: "Ignore the segment text.") */
  if ((tcplen > 0) && (pcb->state < CLOSE_WAIT)) {
 80320e4:	4b35      	ldr	r3, [pc, #212]	; (80321bc <tcp_receive+0x5e4>)
 80320e6:	881b      	ldrh	r3, [r3, #0]
 80320e8:	2b00      	cmp	r3, #0
 80320ea:	f000 84e2 	beq.w	8032ab2 <tcp_receive+0xeda>
 80320ee:	687b      	ldr	r3, [r7, #4]
 80320f0:	7d1b      	ldrb	r3, [r3, #20]
 80320f2:	2b06      	cmp	r3, #6
 80320f4:	f200 84dd 	bhi.w	8032ab2 <tcp_receive+0xeda>
       this if the sequence number of the incoming segment is less
       than rcv_nxt, and the sequence number plus the length of the
       segment is larger than rcv_nxt. */
    /*    if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
          if (TCP_SEQ_LT(pcb->rcv_nxt, seqno + tcplen)) {*/
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 80320f8:	687b      	ldr	r3, [r7, #4]
 80320fa:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80320fc:	4b30      	ldr	r3, [pc, #192]	; (80321c0 <tcp_receive+0x5e8>)
 80320fe:	681b      	ldr	r3, [r3, #0]
 8032100:	1ad3      	subs	r3, r2, r3
 8032102:	3b01      	subs	r3, #1
 8032104:	2b00      	cmp	r3, #0
 8032106:	f2c0 808f 	blt.w	8032228 <tcp_receive+0x650>
 803210a:	687b      	ldr	r3, [r7, #4]
 803210c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 803210e:	4b2b      	ldr	r3, [pc, #172]	; (80321bc <tcp_receive+0x5e4>)
 8032110:	881b      	ldrh	r3, [r3, #0]
 8032112:	4619      	mov	r1, r3
 8032114:	4b2a      	ldr	r3, [pc, #168]	; (80321c0 <tcp_receive+0x5e8>)
 8032116:	681b      	ldr	r3, [r3, #0]
 8032118:	440b      	add	r3, r1
 803211a:	1ad3      	subs	r3, r2, r3
 803211c:	3301      	adds	r3, #1
 803211e:	2b00      	cmp	r3, #0
 8032120:	f300 8082 	bgt.w	8032228 <tcp_receive+0x650>

         After we are done with adjusting the pbuf pointers we must
         adjust the ->data pointer in the seg and the segment
         length.*/

      struct pbuf *p = inseg.p;
 8032124:	4b27      	ldr	r3, [pc, #156]	; (80321c4 <tcp_receive+0x5ec>)
 8032126:	685b      	ldr	r3, [r3, #4]
 8032128:	647b      	str	r3, [r7, #68]	; 0x44
      u32_t off32 = pcb->rcv_nxt - seqno;
 803212a:	687b      	ldr	r3, [r7, #4]
 803212c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 803212e:	4b24      	ldr	r3, [pc, #144]	; (80321c0 <tcp_receive+0x5e8>)
 8032130:	681b      	ldr	r3, [r3, #0]
 8032132:	1ad3      	subs	r3, r2, r3
 8032134:	627b      	str	r3, [r7, #36]	; 0x24
      u16_t new_tot_len, off;
      LWIP_ASSERT("inseg.p != NULL", inseg.p);
 8032136:	4b23      	ldr	r3, [pc, #140]	; (80321c4 <tcp_receive+0x5ec>)
 8032138:	685b      	ldr	r3, [r3, #4]
 803213a:	2b00      	cmp	r3, #0
 803213c:	d106      	bne.n	803214c <tcp_receive+0x574>
 803213e:	4b22      	ldr	r3, [pc, #136]	; (80321c8 <tcp_receive+0x5f0>)
 8032140:	f240 5294 	movw	r2, #1428	; 0x594
 8032144:	4921      	ldr	r1, [pc, #132]	; (80321cc <tcp_receive+0x5f4>)
 8032146:	4822      	ldr	r0, [pc, #136]	; (80321d0 <tcp_receive+0x5f8>)
 8032148:	f006 ff8e 	bl	8039068 <iprintf>
      LWIP_ASSERT("insane offset!", (off32 < 0xffff));
 803214c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 803214e:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8032152:	4293      	cmp	r3, r2
 8032154:	d906      	bls.n	8032164 <tcp_receive+0x58c>
 8032156:	4b1c      	ldr	r3, [pc, #112]	; (80321c8 <tcp_receive+0x5f0>)
 8032158:	f240 5295 	movw	r2, #1429	; 0x595
 803215c:	491d      	ldr	r1, [pc, #116]	; (80321d4 <tcp_receive+0x5fc>)
 803215e:	481c      	ldr	r0, [pc, #112]	; (80321d0 <tcp_receive+0x5f8>)
 8032160:	f006 ff82 	bl	8039068 <iprintf>
      off = (u16_t)off32;
 8032164:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8032166:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
      LWIP_ASSERT("pbuf too short!", (((s32_t)inseg.p->tot_len) >= off));
 803216a:	4b16      	ldr	r3, [pc, #88]	; (80321c4 <tcp_receive+0x5ec>)
 803216c:	685b      	ldr	r3, [r3, #4]
 803216e:	891b      	ldrh	r3, [r3, #8]
 8032170:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8032174:	429a      	cmp	r2, r3
 8032176:	d906      	bls.n	8032186 <tcp_receive+0x5ae>
 8032178:	4b13      	ldr	r3, [pc, #76]	; (80321c8 <tcp_receive+0x5f0>)
 803217a:	f240 5297 	movw	r2, #1431	; 0x597
 803217e:	4916      	ldr	r1, [pc, #88]	; (80321d8 <tcp_receive+0x600>)
 8032180:	4813      	ldr	r0, [pc, #76]	; (80321d0 <tcp_receive+0x5f8>)
 8032182:	f006 ff71 	bl	8039068 <iprintf>
      inseg.len -= off;
 8032186:	4b0f      	ldr	r3, [pc, #60]	; (80321c4 <tcp_receive+0x5ec>)
 8032188:	891a      	ldrh	r2, [r3, #8]
 803218a:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 803218e:	1ad3      	subs	r3, r2, r3
 8032190:	b29a      	uxth	r2, r3
 8032192:	4b0c      	ldr	r3, [pc, #48]	; (80321c4 <tcp_receive+0x5ec>)
 8032194:	811a      	strh	r2, [r3, #8]
      new_tot_len = (u16_t)(inseg.p->tot_len - off);
 8032196:	4b0b      	ldr	r3, [pc, #44]	; (80321c4 <tcp_receive+0x5ec>)
 8032198:	685b      	ldr	r3, [r3, #4]
 803219a:	891a      	ldrh	r2, [r3, #8]
 803219c:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80321a0:	1ad3      	subs	r3, r2, r3
 80321a2:	847b      	strh	r3, [r7, #34]	; 0x22
      while (p->len < off) {
 80321a4:	e02a      	b.n	80321fc <tcp_receive+0x624>
 80321a6:	bf00      	nop
 80321a8:	0803c010 	.word	0x0803c010
 80321ac:	0803c018 	.word	0x0803c018
 80321b0:	2000ef40 	.word	0x2000ef40
 80321b4:	2000ef3c 	.word	0x2000ef3c
 80321b8:	2000ef00 	.word	0x2000ef00
 80321bc:	2000ef42 	.word	0x2000ef42
 80321c0:	2000ef38 	.word	0x2000ef38
 80321c4:	2000ef18 	.word	0x2000ef18
 80321c8:	0803bca8 	.word	0x0803bca8
 80321cc:	0803c020 	.word	0x0803c020
 80321d0:	0803bcf4 	.word	0x0803bcf4
 80321d4:	0803c030 	.word	0x0803c030
 80321d8:	0803c040 	.word	0x0803c040
        off -= p->len;
 80321dc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80321de:	895b      	ldrh	r3, [r3, #10]
 80321e0:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 80321e4:	1ad3      	subs	r3, r2, r3
 80321e6:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
        /* all pbufs up to and including this one have len==0, so tot_len is equal */
        p->tot_len = new_tot_len;
 80321ea:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80321ec:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 80321ee:	811a      	strh	r2, [r3, #8]
        p->len = 0;
 80321f0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80321f2:	2200      	movs	r2, #0
 80321f4:	815a      	strh	r2, [r3, #10]
        p = p->next;
 80321f6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80321f8:	681b      	ldr	r3, [r3, #0]
 80321fa:	647b      	str	r3, [r7, #68]	; 0x44
      while (p->len < off) {
 80321fc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80321fe:	895b      	ldrh	r3, [r3, #10]
 8032200:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8032204:	429a      	cmp	r2, r3
 8032206:	d8e9      	bhi.n	80321dc <tcp_receive+0x604>
      }
      /* cannot fail... */
      pbuf_remove_header(p, off);
 8032208:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 803220c:	4619      	mov	r1, r3
 803220e:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8032210:	f7fb ffc4 	bl	802e19c <pbuf_remove_header>
      inseg.tcphdr->seqno = seqno = pcb->rcv_nxt;
 8032214:	687b      	ldr	r3, [r7, #4]
 8032216:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8032218:	4a91      	ldr	r2, [pc, #580]	; (8032460 <tcp_receive+0x888>)
 803221a:	6013      	str	r3, [r2, #0]
 803221c:	4b91      	ldr	r3, [pc, #580]	; (8032464 <tcp_receive+0x88c>)
 803221e:	68db      	ldr	r3, [r3, #12]
 8032220:	4a8f      	ldr	r2, [pc, #572]	; (8032460 <tcp_receive+0x888>)
 8032222:	6812      	ldr	r2, [r2, #0]
 8032224:	605a      	str	r2, [r3, #4]
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 8032226:	e00d      	b.n	8032244 <tcp_receive+0x66c>
    } else {
      if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
 8032228:	4b8d      	ldr	r3, [pc, #564]	; (8032460 <tcp_receive+0x888>)
 803222a:	681a      	ldr	r2, [r3, #0]
 803222c:	687b      	ldr	r3, [r7, #4]
 803222e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8032230:	1ad3      	subs	r3, r2, r3
 8032232:	2b00      	cmp	r3, #0
 8032234:	da06      	bge.n	8032244 <tcp_receive+0x66c>
        /* the whole segment is < rcv_nxt */
        /* must be a duplicate of a packet that has already been correctly handled */

        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: duplicate seqno %"U32_F"\n", seqno));
        tcp_ack_now(pcb);
 8032236:	687b      	ldr	r3, [r7, #4]
 8032238:	8b5b      	ldrh	r3, [r3, #26]
 803223a:	f043 0302 	orr.w	r3, r3, #2
 803223e:	b29a      	uxth	r2, r3
 8032240:	687b      	ldr	r3, [r7, #4]
 8032242:	835a      	strh	r2, [r3, #26]
    }

    /* The sequence number must be within the window (above rcv_nxt
       and below rcv_nxt + rcv_wnd) in order to be further
       processed. */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 8032244:	4b86      	ldr	r3, [pc, #536]	; (8032460 <tcp_receive+0x888>)
 8032246:	681a      	ldr	r2, [r3, #0]
 8032248:	687b      	ldr	r3, [r7, #4]
 803224a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 803224c:	1ad3      	subs	r3, r2, r3
 803224e:	2b00      	cmp	r3, #0
 8032250:	f2c0 842a 	blt.w	8032aa8 <tcp_receive+0xed0>
 8032254:	4b82      	ldr	r3, [pc, #520]	; (8032460 <tcp_receive+0x888>)
 8032256:	681a      	ldr	r2, [r3, #0]
 8032258:	687b      	ldr	r3, [r7, #4]
 803225a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 803225c:	6879      	ldr	r1, [r7, #4]
 803225e:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8032260:	440b      	add	r3, r1
 8032262:	1ad3      	subs	r3, r2, r3
 8032264:	3301      	adds	r3, #1
 8032266:	2b00      	cmp	r3, #0
 8032268:	f300 841e 	bgt.w	8032aa8 <tcp_receive+0xed0>
                        pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
      if (pcb->rcv_nxt == seqno) {
 803226c:	687b      	ldr	r3, [r7, #4]
 803226e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8032270:	4b7b      	ldr	r3, [pc, #492]	; (8032460 <tcp_receive+0x888>)
 8032272:	681b      	ldr	r3, [r3, #0]
 8032274:	429a      	cmp	r2, r3
 8032276:	f040 829a 	bne.w	80327ae <tcp_receive+0xbd6>
        /* The incoming segment is the next in sequence. We check if
           we have to trim the end of the segment and update rcv_nxt
           and pass the data to the application. */
        tcplen = TCP_TCPLEN(&inseg);
 803227a:	4b7a      	ldr	r3, [pc, #488]	; (8032464 <tcp_receive+0x88c>)
 803227c:	891c      	ldrh	r4, [r3, #8]
 803227e:	4b79      	ldr	r3, [pc, #484]	; (8032464 <tcp_receive+0x88c>)
 8032280:	68db      	ldr	r3, [r3, #12]
 8032282:	899b      	ldrh	r3, [r3, #12]
 8032284:	b29b      	uxth	r3, r3
 8032286:	4618      	mov	r0, r3
 8032288:	f7fa fb4c 	bl	802c924 <lwip_htons>
 803228c:	4603      	mov	r3, r0
 803228e:	b2db      	uxtb	r3, r3
 8032290:	f003 0303 	and.w	r3, r3, #3
 8032294:	2b00      	cmp	r3, #0
 8032296:	d001      	beq.n	803229c <tcp_receive+0x6c4>
 8032298:	2301      	movs	r3, #1
 803229a:	e000      	b.n	803229e <tcp_receive+0x6c6>
 803229c:	2300      	movs	r3, #0
 803229e:	4423      	add	r3, r4
 80322a0:	b29a      	uxth	r2, r3
 80322a2:	4b71      	ldr	r3, [pc, #452]	; (8032468 <tcp_receive+0x890>)
 80322a4:	801a      	strh	r2, [r3, #0]

        if (tcplen > pcb->rcv_wnd) {
 80322a6:	687b      	ldr	r3, [r7, #4]
 80322a8:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 80322aa:	4b6f      	ldr	r3, [pc, #444]	; (8032468 <tcp_receive+0x890>)
 80322ac:	881b      	ldrh	r3, [r3, #0]
 80322ae:	429a      	cmp	r2, r3
 80322b0:	d275      	bcs.n	803239e <tcp_receive+0x7c6>
          LWIP_DEBUGF(TCP_INPUT_DEBUG,
                      ("tcp_receive: other end overran receive window"
                       "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                       seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 80322b2:	4b6c      	ldr	r3, [pc, #432]	; (8032464 <tcp_receive+0x88c>)
 80322b4:	68db      	ldr	r3, [r3, #12]
 80322b6:	899b      	ldrh	r3, [r3, #12]
 80322b8:	b29b      	uxth	r3, r3
 80322ba:	4618      	mov	r0, r3
 80322bc:	f7fa fb32 	bl	802c924 <lwip_htons>
 80322c0:	4603      	mov	r3, r0
 80322c2:	b2db      	uxtb	r3, r3
 80322c4:	f003 0301 	and.w	r3, r3, #1
 80322c8:	2b00      	cmp	r3, #0
 80322ca:	d01f      	beq.n	803230c <tcp_receive+0x734>
            /* Must remove the FIN from the header as we're trimming
             * that byte of sequence-space from the packet */
            TCPH_FLAGS_SET(inseg.tcphdr, TCPH_FLAGS(inseg.tcphdr) & ~(unsigned int)TCP_FIN);
 80322cc:	4b65      	ldr	r3, [pc, #404]	; (8032464 <tcp_receive+0x88c>)
 80322ce:	68db      	ldr	r3, [r3, #12]
 80322d0:	899b      	ldrh	r3, [r3, #12]
 80322d2:	b29b      	uxth	r3, r3
 80322d4:	b21b      	sxth	r3, r3
 80322d6:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 80322da:	b21c      	sxth	r4, r3
 80322dc:	4b61      	ldr	r3, [pc, #388]	; (8032464 <tcp_receive+0x88c>)
 80322de:	68db      	ldr	r3, [r3, #12]
 80322e0:	899b      	ldrh	r3, [r3, #12]
 80322e2:	b29b      	uxth	r3, r3
 80322e4:	4618      	mov	r0, r3
 80322e6:	f7fa fb1d 	bl	802c924 <lwip_htons>
 80322ea:	4603      	mov	r3, r0
 80322ec:	b2db      	uxtb	r3, r3
 80322ee:	b29b      	uxth	r3, r3
 80322f0:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 80322f4:	b29b      	uxth	r3, r3
 80322f6:	4618      	mov	r0, r3
 80322f8:	f7fa fb14 	bl	802c924 <lwip_htons>
 80322fc:	4603      	mov	r3, r0
 80322fe:	b21b      	sxth	r3, r3
 8032300:	4323      	orrs	r3, r4
 8032302:	b21a      	sxth	r2, r3
 8032304:	4b57      	ldr	r3, [pc, #348]	; (8032464 <tcp_receive+0x88c>)
 8032306:	68db      	ldr	r3, [r3, #12]
 8032308:	b292      	uxth	r2, r2
 803230a:	819a      	strh	r2, [r3, #12]
          }
          /* Adjust length of segment to fit in the window. */
          TCPWND_CHECK16(pcb->rcv_wnd);
          inseg.len = (u16_t)pcb->rcv_wnd;
 803230c:	687b      	ldr	r3, [r7, #4]
 803230e:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8032310:	4b54      	ldr	r3, [pc, #336]	; (8032464 <tcp_receive+0x88c>)
 8032312:	811a      	strh	r2, [r3, #8]
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 8032314:	4b53      	ldr	r3, [pc, #332]	; (8032464 <tcp_receive+0x88c>)
 8032316:	68db      	ldr	r3, [r3, #12]
 8032318:	899b      	ldrh	r3, [r3, #12]
 803231a:	b29b      	uxth	r3, r3
 803231c:	4618      	mov	r0, r3
 803231e:	f7fa fb01 	bl	802c924 <lwip_htons>
 8032322:	4603      	mov	r3, r0
 8032324:	b2db      	uxtb	r3, r3
 8032326:	f003 0302 	and.w	r3, r3, #2
 803232a:	2b00      	cmp	r3, #0
 803232c:	d005      	beq.n	803233a <tcp_receive+0x762>
            inseg.len -= 1;
 803232e:	4b4d      	ldr	r3, [pc, #308]	; (8032464 <tcp_receive+0x88c>)
 8032330:	891b      	ldrh	r3, [r3, #8]
 8032332:	3b01      	subs	r3, #1
 8032334:	b29a      	uxth	r2, r3
 8032336:	4b4b      	ldr	r3, [pc, #300]	; (8032464 <tcp_receive+0x88c>)
 8032338:	811a      	strh	r2, [r3, #8]
          }
          pbuf_realloc(inseg.p, inseg.len);
 803233a:	4b4a      	ldr	r3, [pc, #296]	; (8032464 <tcp_receive+0x88c>)
 803233c:	685b      	ldr	r3, [r3, #4]
 803233e:	4a49      	ldr	r2, [pc, #292]	; (8032464 <tcp_receive+0x88c>)
 8032340:	8912      	ldrh	r2, [r2, #8]
 8032342:	4611      	mov	r1, r2
 8032344:	4618      	mov	r0, r3
 8032346:	f7fb fe29 	bl	802df9c <pbuf_realloc>
          tcplen = TCP_TCPLEN(&inseg);
 803234a:	4b46      	ldr	r3, [pc, #280]	; (8032464 <tcp_receive+0x88c>)
 803234c:	891c      	ldrh	r4, [r3, #8]
 803234e:	4b45      	ldr	r3, [pc, #276]	; (8032464 <tcp_receive+0x88c>)
 8032350:	68db      	ldr	r3, [r3, #12]
 8032352:	899b      	ldrh	r3, [r3, #12]
 8032354:	b29b      	uxth	r3, r3
 8032356:	4618      	mov	r0, r3
 8032358:	f7fa fae4 	bl	802c924 <lwip_htons>
 803235c:	4603      	mov	r3, r0
 803235e:	b2db      	uxtb	r3, r3
 8032360:	f003 0303 	and.w	r3, r3, #3
 8032364:	2b00      	cmp	r3, #0
 8032366:	d001      	beq.n	803236c <tcp_receive+0x794>
 8032368:	2301      	movs	r3, #1
 803236a:	e000      	b.n	803236e <tcp_receive+0x796>
 803236c:	2300      	movs	r3, #0
 803236e:	4423      	add	r3, r4
 8032370:	b29a      	uxth	r2, r3
 8032372:	4b3d      	ldr	r3, [pc, #244]	; (8032468 <tcp_receive+0x890>)
 8032374:	801a      	strh	r2, [r3, #0]
          LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 8032376:	4b3c      	ldr	r3, [pc, #240]	; (8032468 <tcp_receive+0x890>)
 8032378:	881b      	ldrh	r3, [r3, #0]
 803237a:	461a      	mov	r2, r3
 803237c:	4b38      	ldr	r3, [pc, #224]	; (8032460 <tcp_receive+0x888>)
 803237e:	681b      	ldr	r3, [r3, #0]
 8032380:	441a      	add	r2, r3
 8032382:	687b      	ldr	r3, [r7, #4]
 8032384:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8032386:	6879      	ldr	r1, [r7, #4]
 8032388:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 803238a:	440b      	add	r3, r1
 803238c:	429a      	cmp	r2, r3
 803238e:	d006      	beq.n	803239e <tcp_receive+0x7c6>
 8032390:	4b36      	ldr	r3, [pc, #216]	; (803246c <tcp_receive+0x894>)
 8032392:	f240 52cb 	movw	r2, #1483	; 0x5cb
 8032396:	4936      	ldr	r1, [pc, #216]	; (8032470 <tcp_receive+0x898>)
 8032398:	4836      	ldr	r0, [pc, #216]	; (8032474 <tcp_receive+0x89c>)
 803239a:	f006 fe65 	bl	8039068 <iprintf>
        }
#if TCP_QUEUE_OOSEQ
        /* Received in-sequence data, adjust ooseq data if:
           - FIN has been received or
           - inseq overlaps with ooseq */
        if (pcb->ooseq != NULL) {
 803239e:	687b      	ldr	r3, [r7, #4]
 80323a0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80323a2:	2b00      	cmp	r3, #0
 80323a4:	f000 80e7 	beq.w	8032576 <tcp_receive+0x99e>
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 80323a8:	4b2e      	ldr	r3, [pc, #184]	; (8032464 <tcp_receive+0x88c>)
 80323aa:	68db      	ldr	r3, [r3, #12]
 80323ac:	899b      	ldrh	r3, [r3, #12]
 80323ae:	b29b      	uxth	r3, r3
 80323b0:	4618      	mov	r0, r3
 80323b2:	f7fa fab7 	bl	802c924 <lwip_htons>
 80323b6:	4603      	mov	r3, r0
 80323b8:	b2db      	uxtb	r3, r3
 80323ba:	f003 0301 	and.w	r3, r3, #1
 80323be:	2b00      	cmp	r3, #0
 80323c0:	d010      	beq.n	80323e4 <tcp_receive+0x80c>
            LWIP_DEBUGF(TCP_INPUT_DEBUG,
                        ("tcp_receive: received in-order FIN, binning ooseq queue\n"));
            /* Received in-order FIN means anything that was received
             * out of order must now have been received in-order, so
             * bin the ooseq queue */
            while (pcb->ooseq != NULL) {
 80323c2:	e00a      	b.n	80323da <tcp_receive+0x802>
              struct tcp_seg *old_ooseq = pcb->ooseq;
 80323c4:	687b      	ldr	r3, [r7, #4]
 80323c6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80323c8:	60fb      	str	r3, [r7, #12]
              pcb->ooseq = pcb->ooseq->next;
 80323ca:	687b      	ldr	r3, [r7, #4]
 80323cc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80323ce:	681a      	ldr	r2, [r3, #0]
 80323d0:	687b      	ldr	r3, [r7, #4]
 80323d2:	675a      	str	r2, [r3, #116]	; 0x74
              tcp_seg_free(old_ooseq);
 80323d4:	68f8      	ldr	r0, [r7, #12]
 80323d6:	f7fd fc34 	bl	802fc42 <tcp_seg_free>
            while (pcb->ooseq != NULL) {
 80323da:	687b      	ldr	r3, [r7, #4]
 80323dc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80323de:	2b00      	cmp	r3, #0
 80323e0:	d1f0      	bne.n	80323c4 <tcp_receive+0x7ec>
 80323e2:	e0c8      	b.n	8032576 <tcp_receive+0x99e>
            }
          } else {
            struct tcp_seg *next = pcb->ooseq;
 80323e4:	687b      	ldr	r3, [r7, #4]
 80323e6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80323e8:	63fb      	str	r3, [r7, #60]	; 0x3c
            /* Remove all segments on ooseq that are covered by inseg already.
             * FIN is copied from ooseq to inseg if present. */
            while (next &&
 80323ea:	e052      	b.n	8032492 <tcp_receive+0x8ba>
                   TCP_SEQ_GEQ(seqno + tcplen,
                               next->tcphdr->seqno + next->len)) {
              struct tcp_seg *tmp;
              /* inseg cannot have FIN here (already processed above) */
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 80323ec:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80323ee:	68db      	ldr	r3, [r3, #12]
 80323f0:	899b      	ldrh	r3, [r3, #12]
 80323f2:	b29b      	uxth	r3, r3
 80323f4:	4618      	mov	r0, r3
 80323f6:	f7fa fa95 	bl	802c924 <lwip_htons>
 80323fa:	4603      	mov	r3, r0
 80323fc:	b2db      	uxtb	r3, r3
 80323fe:	f003 0301 	and.w	r3, r3, #1
 8032402:	2b00      	cmp	r3, #0
 8032404:	d03d      	beq.n	8032482 <tcp_receive+0x8aa>
                  (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) == 0) {
 8032406:	4b17      	ldr	r3, [pc, #92]	; (8032464 <tcp_receive+0x88c>)
 8032408:	68db      	ldr	r3, [r3, #12]
 803240a:	899b      	ldrh	r3, [r3, #12]
 803240c:	b29b      	uxth	r3, r3
 803240e:	4618      	mov	r0, r3
 8032410:	f7fa fa88 	bl	802c924 <lwip_htons>
 8032414:	4603      	mov	r3, r0
 8032416:	b2db      	uxtb	r3, r3
 8032418:	f003 0302 	and.w	r3, r3, #2
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 803241c:	2b00      	cmp	r3, #0
 803241e:	d130      	bne.n	8032482 <tcp_receive+0x8aa>
                TCPH_SET_FLAG(inseg.tcphdr, TCP_FIN);
 8032420:	4b10      	ldr	r3, [pc, #64]	; (8032464 <tcp_receive+0x88c>)
 8032422:	68db      	ldr	r3, [r3, #12]
 8032424:	899b      	ldrh	r3, [r3, #12]
 8032426:	b29c      	uxth	r4, r3
 8032428:	2001      	movs	r0, #1
 803242a:	f7fa fa7b 	bl	802c924 <lwip_htons>
 803242e:	4603      	mov	r3, r0
 8032430:	461a      	mov	r2, r3
 8032432:	4b0c      	ldr	r3, [pc, #48]	; (8032464 <tcp_receive+0x88c>)
 8032434:	68db      	ldr	r3, [r3, #12]
 8032436:	4322      	orrs	r2, r4
 8032438:	b292      	uxth	r2, r2
 803243a:	819a      	strh	r2, [r3, #12]
                tcplen = TCP_TCPLEN(&inseg);
 803243c:	4b09      	ldr	r3, [pc, #36]	; (8032464 <tcp_receive+0x88c>)
 803243e:	891c      	ldrh	r4, [r3, #8]
 8032440:	4b08      	ldr	r3, [pc, #32]	; (8032464 <tcp_receive+0x88c>)
 8032442:	68db      	ldr	r3, [r3, #12]
 8032444:	899b      	ldrh	r3, [r3, #12]
 8032446:	b29b      	uxth	r3, r3
 8032448:	4618      	mov	r0, r3
 803244a:	f7fa fa6b 	bl	802c924 <lwip_htons>
 803244e:	4603      	mov	r3, r0
 8032450:	b2db      	uxtb	r3, r3
 8032452:	f003 0303 	and.w	r3, r3, #3
 8032456:	2b00      	cmp	r3, #0
 8032458:	d00e      	beq.n	8032478 <tcp_receive+0x8a0>
 803245a:	2301      	movs	r3, #1
 803245c:	e00d      	b.n	803247a <tcp_receive+0x8a2>
 803245e:	bf00      	nop
 8032460:	2000ef38 	.word	0x2000ef38
 8032464:	2000ef18 	.word	0x2000ef18
 8032468:	2000ef42 	.word	0x2000ef42
 803246c:	0803bca8 	.word	0x0803bca8
 8032470:	0803c050 	.word	0x0803c050
 8032474:	0803bcf4 	.word	0x0803bcf4
 8032478:	2300      	movs	r3, #0
 803247a:	4423      	add	r3, r4
 803247c:	b29a      	uxth	r2, r3
 803247e:	4b98      	ldr	r3, [pc, #608]	; (80326e0 <tcp_receive+0xb08>)
 8032480:	801a      	strh	r2, [r3, #0]
              }
              tmp = next;
 8032482:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8032484:	613b      	str	r3, [r7, #16]
              next = next->next;
 8032486:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8032488:	681b      	ldr	r3, [r3, #0]
 803248a:	63fb      	str	r3, [r7, #60]	; 0x3c
              tcp_seg_free(tmp);
 803248c:	6938      	ldr	r0, [r7, #16]
 803248e:	f7fd fbd8 	bl	802fc42 <tcp_seg_free>
            while (next &&
 8032492:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8032494:	2b00      	cmp	r3, #0
 8032496:	d00e      	beq.n	80324b6 <tcp_receive+0x8de>
                   TCP_SEQ_GEQ(seqno + tcplen,
 8032498:	4b91      	ldr	r3, [pc, #580]	; (80326e0 <tcp_receive+0xb08>)
 803249a:	881b      	ldrh	r3, [r3, #0]
 803249c:	461a      	mov	r2, r3
 803249e:	4b91      	ldr	r3, [pc, #580]	; (80326e4 <tcp_receive+0xb0c>)
 80324a0:	681b      	ldr	r3, [r3, #0]
 80324a2:	441a      	add	r2, r3
 80324a4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80324a6:	68db      	ldr	r3, [r3, #12]
 80324a8:	685b      	ldr	r3, [r3, #4]
 80324aa:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80324ac:	8909      	ldrh	r1, [r1, #8]
 80324ae:	440b      	add	r3, r1
 80324b0:	1ad3      	subs	r3, r2, r3
            while (next &&
 80324b2:	2b00      	cmp	r3, #0
 80324b4:	da9a      	bge.n	80323ec <tcp_receive+0x814>
            }
            /* Now trim right side of inseg if it overlaps with the first
             * segment on ooseq */
            if (next &&
 80324b6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80324b8:	2b00      	cmp	r3, #0
 80324ba:	d059      	beq.n	8032570 <tcp_receive+0x998>
                TCP_SEQ_GT(seqno + tcplen,
 80324bc:	4b88      	ldr	r3, [pc, #544]	; (80326e0 <tcp_receive+0xb08>)
 80324be:	881b      	ldrh	r3, [r3, #0]
 80324c0:	461a      	mov	r2, r3
 80324c2:	4b88      	ldr	r3, [pc, #544]	; (80326e4 <tcp_receive+0xb0c>)
 80324c4:	681b      	ldr	r3, [r3, #0]
 80324c6:	441a      	add	r2, r3
 80324c8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80324ca:	68db      	ldr	r3, [r3, #12]
 80324cc:	685b      	ldr	r3, [r3, #4]
 80324ce:	1ad3      	subs	r3, r2, r3
            if (next &&
 80324d0:	2b00      	cmp	r3, #0
 80324d2:	dd4d      	ble.n	8032570 <tcp_receive+0x998>
                           next->tcphdr->seqno)) {
              /* inseg cannot have FIN here (already processed above) */
              inseg.len = (u16_t)(next->tcphdr->seqno - seqno);
 80324d4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80324d6:	68db      	ldr	r3, [r3, #12]
 80324d8:	685b      	ldr	r3, [r3, #4]
 80324da:	b29a      	uxth	r2, r3
 80324dc:	4b81      	ldr	r3, [pc, #516]	; (80326e4 <tcp_receive+0xb0c>)
 80324de:	681b      	ldr	r3, [r3, #0]
 80324e0:	b29b      	uxth	r3, r3
 80324e2:	1ad3      	subs	r3, r2, r3
 80324e4:	b29a      	uxth	r2, r3
 80324e6:	4b80      	ldr	r3, [pc, #512]	; (80326e8 <tcp_receive+0xb10>)
 80324e8:	811a      	strh	r2, [r3, #8]
              if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 80324ea:	4b7f      	ldr	r3, [pc, #508]	; (80326e8 <tcp_receive+0xb10>)
 80324ec:	68db      	ldr	r3, [r3, #12]
 80324ee:	899b      	ldrh	r3, [r3, #12]
 80324f0:	b29b      	uxth	r3, r3
 80324f2:	4618      	mov	r0, r3
 80324f4:	f7fa fa16 	bl	802c924 <lwip_htons>
 80324f8:	4603      	mov	r3, r0
 80324fa:	b2db      	uxtb	r3, r3
 80324fc:	f003 0302 	and.w	r3, r3, #2
 8032500:	2b00      	cmp	r3, #0
 8032502:	d005      	beq.n	8032510 <tcp_receive+0x938>
                inseg.len -= 1;
 8032504:	4b78      	ldr	r3, [pc, #480]	; (80326e8 <tcp_receive+0xb10>)
 8032506:	891b      	ldrh	r3, [r3, #8]
 8032508:	3b01      	subs	r3, #1
 803250a:	b29a      	uxth	r2, r3
 803250c:	4b76      	ldr	r3, [pc, #472]	; (80326e8 <tcp_receive+0xb10>)
 803250e:	811a      	strh	r2, [r3, #8]
              }
              pbuf_realloc(inseg.p, inseg.len);
 8032510:	4b75      	ldr	r3, [pc, #468]	; (80326e8 <tcp_receive+0xb10>)
 8032512:	685b      	ldr	r3, [r3, #4]
 8032514:	4a74      	ldr	r2, [pc, #464]	; (80326e8 <tcp_receive+0xb10>)
 8032516:	8912      	ldrh	r2, [r2, #8]
 8032518:	4611      	mov	r1, r2
 803251a:	4618      	mov	r0, r3
 803251c:	f7fb fd3e 	bl	802df9c <pbuf_realloc>
              tcplen = TCP_TCPLEN(&inseg);
 8032520:	4b71      	ldr	r3, [pc, #452]	; (80326e8 <tcp_receive+0xb10>)
 8032522:	891c      	ldrh	r4, [r3, #8]
 8032524:	4b70      	ldr	r3, [pc, #448]	; (80326e8 <tcp_receive+0xb10>)
 8032526:	68db      	ldr	r3, [r3, #12]
 8032528:	899b      	ldrh	r3, [r3, #12]
 803252a:	b29b      	uxth	r3, r3
 803252c:	4618      	mov	r0, r3
 803252e:	f7fa f9f9 	bl	802c924 <lwip_htons>
 8032532:	4603      	mov	r3, r0
 8032534:	b2db      	uxtb	r3, r3
 8032536:	f003 0303 	and.w	r3, r3, #3
 803253a:	2b00      	cmp	r3, #0
 803253c:	d001      	beq.n	8032542 <tcp_receive+0x96a>
 803253e:	2301      	movs	r3, #1
 8032540:	e000      	b.n	8032544 <tcp_receive+0x96c>
 8032542:	2300      	movs	r3, #0
 8032544:	4423      	add	r3, r4
 8032546:	b29a      	uxth	r2, r3
 8032548:	4b65      	ldr	r3, [pc, #404]	; (80326e0 <tcp_receive+0xb08>)
 803254a:	801a      	strh	r2, [r3, #0]
              LWIP_ASSERT("tcp_receive: segment not trimmed correctly to ooseq queue\n",
 803254c:	4b64      	ldr	r3, [pc, #400]	; (80326e0 <tcp_receive+0xb08>)
 803254e:	881b      	ldrh	r3, [r3, #0]
 8032550:	461a      	mov	r2, r3
 8032552:	4b64      	ldr	r3, [pc, #400]	; (80326e4 <tcp_receive+0xb0c>)
 8032554:	681b      	ldr	r3, [r3, #0]
 8032556:	441a      	add	r2, r3
 8032558:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 803255a:	68db      	ldr	r3, [r3, #12]
 803255c:	685b      	ldr	r3, [r3, #4]
 803255e:	429a      	cmp	r2, r3
 8032560:	d006      	beq.n	8032570 <tcp_receive+0x998>
 8032562:	4b62      	ldr	r3, [pc, #392]	; (80326ec <tcp_receive+0xb14>)
 8032564:	f240 52fc 	movw	r2, #1532	; 0x5fc
 8032568:	4961      	ldr	r1, [pc, #388]	; (80326f0 <tcp_receive+0xb18>)
 803256a:	4862      	ldr	r0, [pc, #392]	; (80326f4 <tcp_receive+0xb1c>)
 803256c:	f006 fd7c 	bl	8039068 <iprintf>
                          (seqno + tcplen) == next->tcphdr->seqno);
            }
            pcb->ooseq = next;
 8032570:	687b      	ldr	r3, [r7, #4]
 8032572:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8032574:	675a      	str	r2, [r3, #116]	; 0x74
          }
        }
#endif /* TCP_QUEUE_OOSEQ */

        pcb->rcv_nxt = seqno + tcplen;
 8032576:	4b5a      	ldr	r3, [pc, #360]	; (80326e0 <tcp_receive+0xb08>)
 8032578:	881b      	ldrh	r3, [r3, #0]
 803257a:	461a      	mov	r2, r3
 803257c:	4b59      	ldr	r3, [pc, #356]	; (80326e4 <tcp_receive+0xb0c>)
 803257e:	681b      	ldr	r3, [r3, #0]
 8032580:	441a      	add	r2, r3
 8032582:	687b      	ldr	r3, [r7, #4]
 8032584:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update the receiver's (our) window. */
        LWIP_ASSERT("tcp_receive: tcplen > rcv_wnd\n", pcb->rcv_wnd >= tcplen);
 8032586:	687b      	ldr	r3, [r7, #4]
 8032588:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 803258a:	4b55      	ldr	r3, [pc, #340]	; (80326e0 <tcp_receive+0xb08>)
 803258c:	881b      	ldrh	r3, [r3, #0]
 803258e:	429a      	cmp	r2, r3
 8032590:	d206      	bcs.n	80325a0 <tcp_receive+0x9c8>
 8032592:	4b56      	ldr	r3, [pc, #344]	; (80326ec <tcp_receive+0xb14>)
 8032594:	f240 6207 	movw	r2, #1543	; 0x607
 8032598:	4957      	ldr	r1, [pc, #348]	; (80326f8 <tcp_receive+0xb20>)
 803259a:	4856      	ldr	r0, [pc, #344]	; (80326f4 <tcp_receive+0xb1c>)
 803259c:	f006 fd64 	bl	8039068 <iprintf>
        pcb->rcv_wnd -= tcplen;
 80325a0:	687b      	ldr	r3, [r7, #4]
 80325a2:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 80325a4:	4b4e      	ldr	r3, [pc, #312]	; (80326e0 <tcp_receive+0xb08>)
 80325a6:	881b      	ldrh	r3, [r3, #0]
 80325a8:	1ad3      	subs	r3, r2, r3
 80325aa:	b29a      	uxth	r2, r3
 80325ac:	687b      	ldr	r3, [r7, #4]
 80325ae:	851a      	strh	r2, [r3, #40]	; 0x28

        tcp_update_rcv_ann_wnd(pcb);
 80325b0:	6878      	ldr	r0, [r7, #4]
 80325b2:	f7fc fe21 	bl	802f1f8 <tcp_update_rcv_ann_wnd>
           chains its data on this pbuf as well.

           If the segment was a FIN, we set the TF_GOT_FIN flag that will
           be used to indicate to the application that the remote side has
           closed its end of the connection. */
        if (inseg.p->tot_len > 0) {
 80325b6:	4b4c      	ldr	r3, [pc, #304]	; (80326e8 <tcp_receive+0xb10>)
 80325b8:	685b      	ldr	r3, [r3, #4]
 80325ba:	891b      	ldrh	r3, [r3, #8]
 80325bc:	2b00      	cmp	r3, #0
 80325be:	d006      	beq.n	80325ce <tcp_receive+0x9f6>
          recv_data = inseg.p;
 80325c0:	4b49      	ldr	r3, [pc, #292]	; (80326e8 <tcp_receive+0xb10>)
 80325c2:	685b      	ldr	r3, [r3, #4]
 80325c4:	4a4d      	ldr	r2, [pc, #308]	; (80326fc <tcp_receive+0xb24>)
 80325c6:	6013      	str	r3, [r2, #0]
          /* Since this pbuf now is the responsibility of the
             application, we delete our reference to it so that we won't
             (mistakingly) deallocate it. */
          inseg.p = NULL;
 80325c8:	4b47      	ldr	r3, [pc, #284]	; (80326e8 <tcp_receive+0xb10>)
 80325ca:	2200      	movs	r2, #0
 80325cc:	605a      	str	r2, [r3, #4]
        }
        if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 80325ce:	4b46      	ldr	r3, [pc, #280]	; (80326e8 <tcp_receive+0xb10>)
 80325d0:	68db      	ldr	r3, [r3, #12]
 80325d2:	899b      	ldrh	r3, [r3, #12]
 80325d4:	b29b      	uxth	r3, r3
 80325d6:	4618      	mov	r0, r3
 80325d8:	f7fa f9a4 	bl	802c924 <lwip_htons>
 80325dc:	4603      	mov	r3, r0
 80325de:	b2db      	uxtb	r3, r3
 80325e0:	f003 0301 	and.w	r3, r3, #1
 80325e4:	2b00      	cmp	r3, #0
 80325e6:	f000 80b8 	beq.w	803275a <tcp_receive+0xb82>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: received FIN.\n"));
          recv_flags |= TF_GOT_FIN;
 80325ea:	4b45      	ldr	r3, [pc, #276]	; (8032700 <tcp_receive+0xb28>)
 80325ec:	781b      	ldrb	r3, [r3, #0]
 80325ee:	f043 0320 	orr.w	r3, r3, #32
 80325f2:	b2da      	uxtb	r2, r3
 80325f4:	4b42      	ldr	r3, [pc, #264]	; (8032700 <tcp_receive+0xb28>)
 80325f6:	701a      	strb	r2, [r3, #0]
        }

#if TCP_QUEUE_OOSEQ
        /* We now check if we have segments on the ->ooseq queue that
           are now in sequence. */
        while (pcb->ooseq != NULL &&
 80325f8:	e0af      	b.n	803275a <tcp_receive+0xb82>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {

          struct tcp_seg *cseg = pcb->ooseq;
 80325fa:	687b      	ldr	r3, [r7, #4]
 80325fc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80325fe:	60bb      	str	r3, [r7, #8]
          seqno = pcb->ooseq->tcphdr->seqno;
 8032600:	687b      	ldr	r3, [r7, #4]
 8032602:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8032604:	68db      	ldr	r3, [r3, #12]
 8032606:	685b      	ldr	r3, [r3, #4]
 8032608:	4a36      	ldr	r2, [pc, #216]	; (80326e4 <tcp_receive+0xb0c>)
 803260a:	6013      	str	r3, [r2, #0]

          pcb->rcv_nxt += TCP_TCPLEN(cseg);
 803260c:	68bb      	ldr	r3, [r7, #8]
 803260e:	891b      	ldrh	r3, [r3, #8]
 8032610:	461c      	mov	r4, r3
 8032612:	68bb      	ldr	r3, [r7, #8]
 8032614:	68db      	ldr	r3, [r3, #12]
 8032616:	899b      	ldrh	r3, [r3, #12]
 8032618:	b29b      	uxth	r3, r3
 803261a:	4618      	mov	r0, r3
 803261c:	f7fa f982 	bl	802c924 <lwip_htons>
 8032620:	4603      	mov	r3, r0
 8032622:	b2db      	uxtb	r3, r3
 8032624:	f003 0303 	and.w	r3, r3, #3
 8032628:	2b00      	cmp	r3, #0
 803262a:	d001      	beq.n	8032630 <tcp_receive+0xa58>
 803262c:	2301      	movs	r3, #1
 803262e:	e000      	b.n	8032632 <tcp_receive+0xa5a>
 8032630:	2300      	movs	r3, #0
 8032632:	191a      	adds	r2, r3, r4
 8032634:	687b      	ldr	r3, [r7, #4]
 8032636:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8032638:	441a      	add	r2, r3
 803263a:	687b      	ldr	r3, [r7, #4]
 803263c:	625a      	str	r2, [r3, #36]	; 0x24
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 803263e:	687b      	ldr	r3, [r7, #4]
 8032640:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8032642:	461c      	mov	r4, r3
 8032644:	68bb      	ldr	r3, [r7, #8]
 8032646:	891b      	ldrh	r3, [r3, #8]
 8032648:	461d      	mov	r5, r3
 803264a:	68bb      	ldr	r3, [r7, #8]
 803264c:	68db      	ldr	r3, [r3, #12]
 803264e:	899b      	ldrh	r3, [r3, #12]
 8032650:	b29b      	uxth	r3, r3
 8032652:	4618      	mov	r0, r3
 8032654:	f7fa f966 	bl	802c924 <lwip_htons>
 8032658:	4603      	mov	r3, r0
 803265a:	b2db      	uxtb	r3, r3
 803265c:	f003 0303 	and.w	r3, r3, #3
 8032660:	2b00      	cmp	r3, #0
 8032662:	d001      	beq.n	8032668 <tcp_receive+0xa90>
 8032664:	2301      	movs	r3, #1
 8032666:	e000      	b.n	803266a <tcp_receive+0xa92>
 8032668:	2300      	movs	r3, #0
 803266a:	442b      	add	r3, r5
 803266c:	429c      	cmp	r4, r3
 803266e:	d206      	bcs.n	803267e <tcp_receive+0xaa6>
 8032670:	4b1e      	ldr	r3, [pc, #120]	; (80326ec <tcp_receive+0xb14>)
 8032672:	f240 622b 	movw	r2, #1579	; 0x62b
 8032676:	4923      	ldr	r1, [pc, #140]	; (8032704 <tcp_receive+0xb2c>)
 8032678:	481e      	ldr	r0, [pc, #120]	; (80326f4 <tcp_receive+0xb1c>)
 803267a:	f006 fcf5 	bl	8039068 <iprintf>
                      pcb->rcv_wnd >= TCP_TCPLEN(cseg));
          pcb->rcv_wnd -= TCP_TCPLEN(cseg);
 803267e:	68bb      	ldr	r3, [r7, #8]
 8032680:	891b      	ldrh	r3, [r3, #8]
 8032682:	461c      	mov	r4, r3
 8032684:	68bb      	ldr	r3, [r7, #8]
 8032686:	68db      	ldr	r3, [r3, #12]
 8032688:	899b      	ldrh	r3, [r3, #12]
 803268a:	b29b      	uxth	r3, r3
 803268c:	4618      	mov	r0, r3
 803268e:	f7fa f949 	bl	802c924 <lwip_htons>
 8032692:	4603      	mov	r3, r0
 8032694:	b2db      	uxtb	r3, r3
 8032696:	f003 0303 	and.w	r3, r3, #3
 803269a:	2b00      	cmp	r3, #0
 803269c:	d001      	beq.n	80326a2 <tcp_receive+0xaca>
 803269e:	2301      	movs	r3, #1
 80326a0:	e000      	b.n	80326a4 <tcp_receive+0xacc>
 80326a2:	2300      	movs	r3, #0
 80326a4:	1919      	adds	r1, r3, r4
 80326a6:	687b      	ldr	r3, [r7, #4]
 80326a8:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 80326aa:	b28b      	uxth	r3, r1
 80326ac:	1ad3      	subs	r3, r2, r3
 80326ae:	b29a      	uxth	r2, r3
 80326b0:	687b      	ldr	r3, [r7, #4]
 80326b2:	851a      	strh	r2, [r3, #40]	; 0x28

          tcp_update_rcv_ann_wnd(pcb);
 80326b4:	6878      	ldr	r0, [r7, #4]
 80326b6:	f7fc fd9f 	bl	802f1f8 <tcp_update_rcv_ann_wnd>

          if (cseg->p->tot_len > 0) {
 80326ba:	68bb      	ldr	r3, [r7, #8]
 80326bc:	685b      	ldr	r3, [r3, #4]
 80326be:	891b      	ldrh	r3, [r3, #8]
 80326c0:	2b00      	cmp	r3, #0
 80326c2:	d028      	beq.n	8032716 <tcp_receive+0xb3e>
            /* Chain this pbuf onto the pbuf that we will pass to
               the application. */
            /* With window scaling, this can overflow recv_data->tot_len, but
               that's not a problem since we explicitly fix that before passing
               recv_data to the application. */
            if (recv_data) {
 80326c4:	4b0d      	ldr	r3, [pc, #52]	; (80326fc <tcp_receive+0xb24>)
 80326c6:	681b      	ldr	r3, [r3, #0]
 80326c8:	2b00      	cmp	r3, #0
 80326ca:	d01d      	beq.n	8032708 <tcp_receive+0xb30>
              pbuf_cat(recv_data, cseg->p);
 80326cc:	4b0b      	ldr	r3, [pc, #44]	; (80326fc <tcp_receive+0xb24>)
 80326ce:	681a      	ldr	r2, [r3, #0]
 80326d0:	68bb      	ldr	r3, [r7, #8]
 80326d2:	685b      	ldr	r3, [r3, #4]
 80326d4:	4619      	mov	r1, r3
 80326d6:	4610      	mov	r0, r2
 80326d8:	f7fb fee6 	bl	802e4a8 <pbuf_cat>
 80326dc:	e018      	b.n	8032710 <tcp_receive+0xb38>
 80326de:	bf00      	nop
 80326e0:	2000ef42 	.word	0x2000ef42
 80326e4:	2000ef38 	.word	0x2000ef38
 80326e8:	2000ef18 	.word	0x2000ef18
 80326ec:	0803bca8 	.word	0x0803bca8
 80326f0:	0803c088 	.word	0x0803c088
 80326f4:	0803bcf4 	.word	0x0803bcf4
 80326f8:	0803c0c4 	.word	0x0803c0c4
 80326fc:	2000ef48 	.word	0x2000ef48
 8032700:	2000ef45 	.word	0x2000ef45
 8032704:	0803c0e4 	.word	0x0803c0e4
            } else {
              recv_data = cseg->p;
 8032708:	68bb      	ldr	r3, [r7, #8]
 803270a:	685b      	ldr	r3, [r3, #4]
 803270c:	4a70      	ldr	r2, [pc, #448]	; (80328d0 <tcp_receive+0xcf8>)
 803270e:	6013      	str	r3, [r2, #0]
            }
            cseg->p = NULL;
 8032710:	68bb      	ldr	r3, [r7, #8]
 8032712:	2200      	movs	r2, #0
 8032714:	605a      	str	r2, [r3, #4]
          }
          if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 8032716:	68bb      	ldr	r3, [r7, #8]
 8032718:	68db      	ldr	r3, [r3, #12]
 803271a:	899b      	ldrh	r3, [r3, #12]
 803271c:	b29b      	uxth	r3, r3
 803271e:	4618      	mov	r0, r3
 8032720:	f7fa f900 	bl	802c924 <lwip_htons>
 8032724:	4603      	mov	r3, r0
 8032726:	b2db      	uxtb	r3, r3
 8032728:	f003 0301 	and.w	r3, r3, #1
 803272c:	2b00      	cmp	r3, #0
 803272e:	d00d      	beq.n	803274c <tcp_receive+0xb74>
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: dequeued FIN.\n"));
            recv_flags |= TF_GOT_FIN;
 8032730:	4b68      	ldr	r3, [pc, #416]	; (80328d4 <tcp_receive+0xcfc>)
 8032732:	781b      	ldrb	r3, [r3, #0]
 8032734:	f043 0320 	orr.w	r3, r3, #32
 8032738:	b2da      	uxtb	r2, r3
 803273a:	4b66      	ldr	r3, [pc, #408]	; (80328d4 <tcp_receive+0xcfc>)
 803273c:	701a      	strb	r2, [r3, #0]
            if (pcb->state == ESTABLISHED) { /* force passive close or we can move to active close */
 803273e:	687b      	ldr	r3, [r7, #4]
 8032740:	7d1b      	ldrb	r3, [r3, #20]
 8032742:	2b04      	cmp	r3, #4
 8032744:	d102      	bne.n	803274c <tcp_receive+0xb74>
              pcb->state = CLOSE_WAIT;
 8032746:	687b      	ldr	r3, [r7, #4]
 8032748:	2207      	movs	r2, #7
 803274a:	751a      	strb	r2, [r3, #20]
            }
          }

          pcb->ooseq = cseg->next;
 803274c:	68bb      	ldr	r3, [r7, #8]
 803274e:	681a      	ldr	r2, [r3, #0]
 8032750:	687b      	ldr	r3, [r7, #4]
 8032752:	675a      	str	r2, [r3, #116]	; 0x74
          tcp_seg_free(cseg);
 8032754:	68b8      	ldr	r0, [r7, #8]
 8032756:	f7fd fa74 	bl	802fc42 <tcp_seg_free>
        while (pcb->ooseq != NULL &&
 803275a:	687b      	ldr	r3, [r7, #4]
 803275c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 803275e:	2b00      	cmp	r3, #0
 8032760:	d008      	beq.n	8032774 <tcp_receive+0xb9c>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {
 8032762:	687b      	ldr	r3, [r7, #4]
 8032764:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8032766:	68db      	ldr	r3, [r3, #12]
 8032768:	685a      	ldr	r2, [r3, #4]
 803276a:	687b      	ldr	r3, [r7, #4]
 803276c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        while (pcb->ooseq != NULL &&
 803276e:	429a      	cmp	r2, r3
 8032770:	f43f af43 	beq.w	80325fa <tcp_receive+0xa22>
#endif /* LWIP_TCP_SACK_OUT */
#endif /* TCP_QUEUE_OOSEQ */


        /* Acknowledge the segment(s). */
        tcp_ack(pcb);
 8032774:	687b      	ldr	r3, [r7, #4]
 8032776:	8b5b      	ldrh	r3, [r3, #26]
 8032778:	f003 0301 	and.w	r3, r3, #1
 803277c:	2b00      	cmp	r3, #0
 803277e:	d00e      	beq.n	803279e <tcp_receive+0xbc6>
 8032780:	687b      	ldr	r3, [r7, #4]
 8032782:	8b5b      	ldrh	r3, [r3, #26]
 8032784:	f023 0301 	bic.w	r3, r3, #1
 8032788:	b29a      	uxth	r2, r3
 803278a:	687b      	ldr	r3, [r7, #4]
 803278c:	835a      	strh	r2, [r3, #26]
 803278e:	687b      	ldr	r3, [r7, #4]
 8032790:	8b5b      	ldrh	r3, [r3, #26]
 8032792:	f043 0302 	orr.w	r3, r3, #2
 8032796:	b29a      	uxth	r2, r3
 8032798:	687b      	ldr	r3, [r7, #4]
 803279a:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 803279c:	e188      	b.n	8032ab0 <tcp_receive+0xed8>
        tcp_ack(pcb);
 803279e:	687b      	ldr	r3, [r7, #4]
 80327a0:	8b5b      	ldrh	r3, [r3, #26]
 80327a2:	f043 0301 	orr.w	r3, r3, #1
 80327a6:	b29a      	uxth	r2, r3
 80327a8:	687b      	ldr	r3, [r7, #4]
 80327aa:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 80327ac:	e180      	b.n	8032ab0 <tcp_receive+0xed8>
      } else {
        /* We get here if the incoming segment is out-of-sequence. */

#if TCP_QUEUE_OOSEQ
        /* We queue the segment on the ->ooseq queue. */
        if (pcb->ooseq == NULL) {
 80327ae:	687b      	ldr	r3, [r7, #4]
 80327b0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80327b2:	2b00      	cmp	r3, #0
 80327b4:	d106      	bne.n	80327c4 <tcp_receive+0xbec>
          pcb->ooseq = tcp_seg_copy(&inseg);
 80327b6:	4848      	ldr	r0, [pc, #288]	; (80328d8 <tcp_receive+0xd00>)
 80327b8:	f7fd fa5c 	bl	802fc74 <tcp_seg_copy>
 80327bc:	4602      	mov	r2, r0
 80327be:	687b      	ldr	r3, [r7, #4]
 80327c0:	675a      	str	r2, [r3, #116]	; 0x74
 80327c2:	e16d      	b.n	8032aa0 <tcp_receive+0xec8>
#if LWIP_TCP_SACK_OUT
          /* This is the left edge of the lowest possible SACK range.
             It may start before the newly received segment (possibly adjusted below). */
          u32_t sackbeg = TCP_SEQ_LT(seqno, pcb->ooseq->tcphdr->seqno) ? seqno : pcb->ooseq->tcphdr->seqno;
#endif /* LWIP_TCP_SACK_OUT */
          struct tcp_seg *next, *prev = NULL;
 80327c4:	2300      	movs	r3, #0
 80327c6:	637b      	str	r3, [r7, #52]	; 0x34
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 80327c8:	687b      	ldr	r3, [r7, #4]
 80327ca:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80327cc:	63bb      	str	r3, [r7, #56]	; 0x38
 80327ce:	e157      	b.n	8032a80 <tcp_receive+0xea8>
            if (seqno == next->tcphdr->seqno) {
 80327d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80327d2:	68db      	ldr	r3, [r3, #12]
 80327d4:	685a      	ldr	r2, [r3, #4]
 80327d6:	4b41      	ldr	r3, [pc, #260]	; (80328dc <tcp_receive+0xd04>)
 80327d8:	681b      	ldr	r3, [r3, #0]
 80327da:	429a      	cmp	r2, r3
 80327dc:	d11d      	bne.n	803281a <tcp_receive+0xc42>
              /* The sequence number of the incoming segment is the
                 same as the sequence number of the segment on
                 ->ooseq. We check the lengths to see which one to
                 discard. */
              if (inseg.len > next->len) {
 80327de:	4b3e      	ldr	r3, [pc, #248]	; (80328d8 <tcp_receive+0xd00>)
 80327e0:	891a      	ldrh	r2, [r3, #8]
 80327e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80327e4:	891b      	ldrh	r3, [r3, #8]
 80327e6:	429a      	cmp	r2, r3
 80327e8:	f240 814f 	bls.w	8032a8a <tcp_receive+0xeb2>
                /* The incoming segment is larger than the old
                   segment. We replace some segments with the new
                   one. */
                struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 80327ec:	483a      	ldr	r0, [pc, #232]	; (80328d8 <tcp_receive+0xd00>)
 80327ee:	f7fd fa41 	bl	802fc74 <tcp_seg_copy>
 80327f2:	6178      	str	r0, [r7, #20]
                if (cseg != NULL) {
 80327f4:	697b      	ldr	r3, [r7, #20]
 80327f6:	2b00      	cmp	r3, #0
 80327f8:	f000 8149 	beq.w	8032a8e <tcp_receive+0xeb6>
                  if (prev != NULL) {
 80327fc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80327fe:	2b00      	cmp	r3, #0
 8032800:	d003      	beq.n	803280a <tcp_receive+0xc32>
                    prev->next = cseg;
 8032802:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8032804:	697a      	ldr	r2, [r7, #20]
 8032806:	601a      	str	r2, [r3, #0]
 8032808:	e002      	b.n	8032810 <tcp_receive+0xc38>
                  } else {
                    pcb->ooseq = cseg;
 803280a:	687b      	ldr	r3, [r7, #4]
 803280c:	697a      	ldr	r2, [r7, #20]
 803280e:	675a      	str	r2, [r3, #116]	; 0x74
                  }
                  tcp_oos_insert_segment(cseg, next);
 8032810:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8032812:	6978      	ldr	r0, [r7, #20]
 8032814:	f7ff f8dc 	bl	80319d0 <tcp_oos_insert_segment>
                }
                break;
 8032818:	e139      	b.n	8032a8e <tcp_receive+0xeb6>
                   segment was smaller than the old one; in either
                   case, we ditch the incoming segment. */
                break;
              }
            } else {
              if (prev == NULL) {
 803281a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 803281c:	2b00      	cmp	r3, #0
 803281e:	d117      	bne.n	8032850 <tcp_receive+0xc78>
                if (TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {
 8032820:	4b2e      	ldr	r3, [pc, #184]	; (80328dc <tcp_receive+0xd04>)
 8032822:	681a      	ldr	r2, [r3, #0]
 8032824:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8032826:	68db      	ldr	r3, [r3, #12]
 8032828:	685b      	ldr	r3, [r3, #4]
 803282a:	1ad3      	subs	r3, r2, r3
 803282c:	2b00      	cmp	r3, #0
 803282e:	da57      	bge.n	80328e0 <tcp_receive+0xd08>
                  /* The sequence number of the incoming segment is lower
                     than the sequence number of the first segment on the
                     queue. We put the incoming segment first on the
                     queue. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 8032830:	4829      	ldr	r0, [pc, #164]	; (80328d8 <tcp_receive+0xd00>)
 8032832:	f7fd fa1f 	bl	802fc74 <tcp_seg_copy>
 8032836:	61b8      	str	r0, [r7, #24]
                  if (cseg != NULL) {
 8032838:	69bb      	ldr	r3, [r7, #24]
 803283a:	2b00      	cmp	r3, #0
 803283c:	f000 8129 	beq.w	8032a92 <tcp_receive+0xeba>
                    pcb->ooseq = cseg;
 8032840:	687b      	ldr	r3, [r7, #4]
 8032842:	69ba      	ldr	r2, [r7, #24]
 8032844:	675a      	str	r2, [r3, #116]	; 0x74
                    tcp_oos_insert_segment(cseg, next);
 8032846:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8032848:	69b8      	ldr	r0, [r7, #24]
 803284a:	f7ff f8c1 	bl	80319d0 <tcp_oos_insert_segment>
                  }
                  break;
 803284e:	e120      	b.n	8032a92 <tcp_receive+0xeba>
                }
              } else {
                /*if (TCP_SEQ_LT(prev->tcphdr->seqno, seqno) &&
                  TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {*/
                if (TCP_SEQ_BETWEEN(seqno, prev->tcphdr->seqno + 1, next->tcphdr->seqno - 1)) {
 8032850:	4b22      	ldr	r3, [pc, #136]	; (80328dc <tcp_receive+0xd04>)
 8032852:	681a      	ldr	r2, [r3, #0]
 8032854:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8032856:	68db      	ldr	r3, [r3, #12]
 8032858:	685b      	ldr	r3, [r3, #4]
 803285a:	1ad3      	subs	r3, r2, r3
 803285c:	3b01      	subs	r3, #1
 803285e:	2b00      	cmp	r3, #0
 8032860:	db3e      	blt.n	80328e0 <tcp_receive+0xd08>
 8032862:	4b1e      	ldr	r3, [pc, #120]	; (80328dc <tcp_receive+0xd04>)
 8032864:	681a      	ldr	r2, [r3, #0]
 8032866:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8032868:	68db      	ldr	r3, [r3, #12]
 803286a:	685b      	ldr	r3, [r3, #4]
 803286c:	1ad3      	subs	r3, r2, r3
 803286e:	3301      	adds	r3, #1
 8032870:	2b00      	cmp	r3, #0
 8032872:	dc35      	bgt.n	80328e0 <tcp_receive+0xd08>
                  /* The sequence number of the incoming segment is in
                     between the sequence numbers of the previous and
                     the next segment on ->ooseq. We trim trim the previous
                     segment, delete next segments that included in received segment
                     and trim received, if needed. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 8032874:	4818      	ldr	r0, [pc, #96]	; (80328d8 <tcp_receive+0xd00>)
 8032876:	f7fd f9fd 	bl	802fc74 <tcp_seg_copy>
 803287a:	61f8      	str	r0, [r7, #28]
                  if (cseg != NULL) {
 803287c:	69fb      	ldr	r3, [r7, #28]
 803287e:	2b00      	cmp	r3, #0
 8032880:	f000 8109 	beq.w	8032a96 <tcp_receive+0xebe>
                    if (TCP_SEQ_GT(prev->tcphdr->seqno + prev->len, seqno)) {
 8032884:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8032886:	68db      	ldr	r3, [r3, #12]
 8032888:	685b      	ldr	r3, [r3, #4]
 803288a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 803288c:	8912      	ldrh	r2, [r2, #8]
 803288e:	441a      	add	r2, r3
 8032890:	4b12      	ldr	r3, [pc, #72]	; (80328dc <tcp_receive+0xd04>)
 8032892:	681b      	ldr	r3, [r3, #0]
 8032894:	1ad3      	subs	r3, r2, r3
 8032896:	2b00      	cmp	r3, #0
 8032898:	dd12      	ble.n	80328c0 <tcp_receive+0xce8>
                      /* We need to trim the prev segment. */
                      prev->len = (u16_t)(seqno - prev->tcphdr->seqno);
 803289a:	4b10      	ldr	r3, [pc, #64]	; (80328dc <tcp_receive+0xd04>)
 803289c:	681b      	ldr	r3, [r3, #0]
 803289e:	b29a      	uxth	r2, r3
 80328a0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80328a2:	68db      	ldr	r3, [r3, #12]
 80328a4:	685b      	ldr	r3, [r3, #4]
 80328a6:	b29b      	uxth	r3, r3
 80328a8:	1ad3      	subs	r3, r2, r3
 80328aa:	b29a      	uxth	r2, r3
 80328ac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80328ae:	811a      	strh	r2, [r3, #8]
                      pbuf_realloc(prev->p, prev->len);
 80328b0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80328b2:	685a      	ldr	r2, [r3, #4]
 80328b4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80328b6:	891b      	ldrh	r3, [r3, #8]
 80328b8:	4619      	mov	r1, r3
 80328ba:	4610      	mov	r0, r2
 80328bc:	f7fb fb6e 	bl	802df9c <pbuf_realloc>
                    }
                    prev->next = cseg;
 80328c0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80328c2:	69fa      	ldr	r2, [r7, #28]
 80328c4:	601a      	str	r2, [r3, #0]
                    tcp_oos_insert_segment(cseg, next);
 80328c6:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80328c8:	69f8      	ldr	r0, [r7, #28]
 80328ca:	f7ff f881 	bl	80319d0 <tcp_oos_insert_segment>
                  }
                  break;
 80328ce:	e0e2      	b.n	8032a96 <tcp_receive+0xebe>
 80328d0:	2000ef48 	.word	0x2000ef48
 80328d4:	2000ef45 	.word	0x2000ef45
 80328d8:	2000ef18 	.word	0x2000ef18
 80328dc:	2000ef38 	.word	0x2000ef38
#endif /* LWIP_TCP_SACK_OUT */

              /* We don't use 'prev' below, so let's set it to current 'next'.
                 This way even if we break the loop below, 'prev' will be pointing
                 at the segment right in front of the newly added one. */
              prev = next;
 80328e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80328e2:	637b      	str	r3, [r7, #52]	; 0x34

              /* If the "next" segment is the last segment on the
                 ooseq queue, we add the incoming segment to the end
                 of the list. */
              if (next->next == NULL &&
 80328e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80328e6:	681b      	ldr	r3, [r3, #0]
 80328e8:	2b00      	cmp	r3, #0
 80328ea:	f040 80c6 	bne.w	8032a7a <tcp_receive+0xea2>
                  TCP_SEQ_GT(seqno, next->tcphdr->seqno)) {
 80328ee:	4b80      	ldr	r3, [pc, #512]	; (8032af0 <tcp_receive+0xf18>)
 80328f0:	681a      	ldr	r2, [r3, #0]
 80328f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80328f4:	68db      	ldr	r3, [r3, #12]
 80328f6:	685b      	ldr	r3, [r3, #4]
 80328f8:	1ad3      	subs	r3, r2, r3
              if (next->next == NULL &&
 80328fa:	2b00      	cmp	r3, #0
 80328fc:	f340 80bd 	ble.w	8032a7a <tcp_receive+0xea2>
                if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 8032900:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8032902:	68db      	ldr	r3, [r3, #12]
 8032904:	899b      	ldrh	r3, [r3, #12]
 8032906:	b29b      	uxth	r3, r3
 8032908:	4618      	mov	r0, r3
 803290a:	f7fa f80b 	bl	802c924 <lwip_htons>
 803290e:	4603      	mov	r3, r0
 8032910:	b2db      	uxtb	r3, r3
 8032912:	f003 0301 	and.w	r3, r3, #1
 8032916:	2b00      	cmp	r3, #0
 8032918:	f040 80bf 	bne.w	8032a9a <tcp_receive+0xec2>
                  /* segment "next" already contains all data */
                  break;
                }
                next->next = tcp_seg_copy(&inseg);
 803291c:	4875      	ldr	r0, [pc, #468]	; (8032af4 <tcp_receive+0xf1c>)
 803291e:	f7fd f9a9 	bl	802fc74 <tcp_seg_copy>
 8032922:	4602      	mov	r2, r0
 8032924:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8032926:	601a      	str	r2, [r3, #0]
                if (next->next != NULL) {
 8032928:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 803292a:	681b      	ldr	r3, [r3, #0]
 803292c:	2b00      	cmp	r3, #0
 803292e:	f000 80b6 	beq.w	8032a9e <tcp_receive+0xec6>
                  if (TCP_SEQ_GT(next->tcphdr->seqno + next->len, seqno)) {
 8032932:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8032934:	68db      	ldr	r3, [r3, #12]
 8032936:	685b      	ldr	r3, [r3, #4]
 8032938:	6bba      	ldr	r2, [r7, #56]	; 0x38
 803293a:	8912      	ldrh	r2, [r2, #8]
 803293c:	441a      	add	r2, r3
 803293e:	4b6c      	ldr	r3, [pc, #432]	; (8032af0 <tcp_receive+0xf18>)
 8032940:	681b      	ldr	r3, [r3, #0]
 8032942:	1ad3      	subs	r3, r2, r3
 8032944:	2b00      	cmp	r3, #0
 8032946:	dd12      	ble.n	803296e <tcp_receive+0xd96>
                    /* We need to trim the last segment. */
                    next->len = (u16_t)(seqno - next->tcphdr->seqno);
 8032948:	4b69      	ldr	r3, [pc, #420]	; (8032af0 <tcp_receive+0xf18>)
 803294a:	681b      	ldr	r3, [r3, #0]
 803294c:	b29a      	uxth	r2, r3
 803294e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8032950:	68db      	ldr	r3, [r3, #12]
 8032952:	685b      	ldr	r3, [r3, #4]
 8032954:	b29b      	uxth	r3, r3
 8032956:	1ad3      	subs	r3, r2, r3
 8032958:	b29a      	uxth	r2, r3
 803295a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 803295c:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->p, next->len);
 803295e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8032960:	685a      	ldr	r2, [r3, #4]
 8032962:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8032964:	891b      	ldrh	r3, [r3, #8]
 8032966:	4619      	mov	r1, r3
 8032968:	4610      	mov	r0, r2
 803296a:	f7fb fb17 	bl	802df9c <pbuf_realloc>
                  }
                  /* check if the remote side overruns our receive window */
                  if (TCP_SEQ_GT((u32_t)tcplen + seqno, pcb->rcv_nxt + (u32_t)pcb->rcv_wnd)) {
 803296e:	4b62      	ldr	r3, [pc, #392]	; (8032af8 <tcp_receive+0xf20>)
 8032970:	881b      	ldrh	r3, [r3, #0]
 8032972:	461a      	mov	r2, r3
 8032974:	4b5e      	ldr	r3, [pc, #376]	; (8032af0 <tcp_receive+0xf18>)
 8032976:	681b      	ldr	r3, [r3, #0]
 8032978:	441a      	add	r2, r3
 803297a:	687b      	ldr	r3, [r7, #4]
 803297c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 803297e:	6879      	ldr	r1, [r7, #4]
 8032980:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8032982:	440b      	add	r3, r1
 8032984:	1ad3      	subs	r3, r2, r3
 8032986:	2b00      	cmp	r3, #0
 8032988:	f340 8089 	ble.w	8032a9e <tcp_receive+0xec6>
                    LWIP_DEBUGF(TCP_INPUT_DEBUG,
                                ("tcp_receive: other end overran receive window"
                                 "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                                 seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
                    if (TCPH_FLAGS(next->next->tcphdr) & TCP_FIN) {
 803298c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 803298e:	681b      	ldr	r3, [r3, #0]
 8032990:	68db      	ldr	r3, [r3, #12]
 8032992:	899b      	ldrh	r3, [r3, #12]
 8032994:	b29b      	uxth	r3, r3
 8032996:	4618      	mov	r0, r3
 8032998:	f7f9 ffc4 	bl	802c924 <lwip_htons>
 803299c:	4603      	mov	r3, r0
 803299e:	b2db      	uxtb	r3, r3
 80329a0:	f003 0301 	and.w	r3, r3, #1
 80329a4:	2b00      	cmp	r3, #0
 80329a6:	d022      	beq.n	80329ee <tcp_receive+0xe16>
                      /* Must remove the FIN from the header as we're trimming
                       * that byte of sequence-space from the packet */
                      TCPH_FLAGS_SET(next->next->tcphdr, TCPH_FLAGS(next->next->tcphdr) & ~TCP_FIN);
 80329a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80329aa:	681b      	ldr	r3, [r3, #0]
 80329ac:	68db      	ldr	r3, [r3, #12]
 80329ae:	899b      	ldrh	r3, [r3, #12]
 80329b0:	b29b      	uxth	r3, r3
 80329b2:	b21b      	sxth	r3, r3
 80329b4:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 80329b8:	b21c      	sxth	r4, r3
 80329ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80329bc:	681b      	ldr	r3, [r3, #0]
 80329be:	68db      	ldr	r3, [r3, #12]
 80329c0:	899b      	ldrh	r3, [r3, #12]
 80329c2:	b29b      	uxth	r3, r3
 80329c4:	4618      	mov	r0, r3
 80329c6:	f7f9 ffad 	bl	802c924 <lwip_htons>
 80329ca:	4603      	mov	r3, r0
 80329cc:	b2db      	uxtb	r3, r3
 80329ce:	b29b      	uxth	r3, r3
 80329d0:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 80329d4:	b29b      	uxth	r3, r3
 80329d6:	4618      	mov	r0, r3
 80329d8:	f7f9 ffa4 	bl	802c924 <lwip_htons>
 80329dc:	4603      	mov	r3, r0
 80329de:	b21b      	sxth	r3, r3
 80329e0:	4323      	orrs	r3, r4
 80329e2:	b21a      	sxth	r2, r3
 80329e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80329e6:	681b      	ldr	r3, [r3, #0]
 80329e8:	68db      	ldr	r3, [r3, #12]
 80329ea:	b292      	uxth	r2, r2
 80329ec:	819a      	strh	r2, [r3, #12]
                    }
                    /* Adjust length of segment to fit in the window. */
                    next->next->len = (u16_t)(pcb->rcv_nxt + pcb->rcv_wnd - seqno);
 80329ee:	687b      	ldr	r3, [r7, #4]
 80329f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80329f2:	b29a      	uxth	r2, r3
 80329f4:	687b      	ldr	r3, [r7, #4]
 80329f6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80329f8:	4413      	add	r3, r2
 80329fa:	b299      	uxth	r1, r3
 80329fc:	4b3c      	ldr	r3, [pc, #240]	; (8032af0 <tcp_receive+0xf18>)
 80329fe:	681b      	ldr	r3, [r3, #0]
 8032a00:	b29a      	uxth	r2, r3
 8032a02:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8032a04:	681b      	ldr	r3, [r3, #0]
 8032a06:	1a8a      	subs	r2, r1, r2
 8032a08:	b292      	uxth	r2, r2
 8032a0a:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->next->p, next->next->len);
 8032a0c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8032a0e:	681b      	ldr	r3, [r3, #0]
 8032a10:	685a      	ldr	r2, [r3, #4]
 8032a12:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8032a14:	681b      	ldr	r3, [r3, #0]
 8032a16:	891b      	ldrh	r3, [r3, #8]
 8032a18:	4619      	mov	r1, r3
 8032a1a:	4610      	mov	r0, r2
 8032a1c:	f7fb fabe 	bl	802df9c <pbuf_realloc>
                    tcplen = TCP_TCPLEN(next->next);
 8032a20:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8032a22:	681b      	ldr	r3, [r3, #0]
 8032a24:	891c      	ldrh	r4, [r3, #8]
 8032a26:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8032a28:	681b      	ldr	r3, [r3, #0]
 8032a2a:	68db      	ldr	r3, [r3, #12]
 8032a2c:	899b      	ldrh	r3, [r3, #12]
 8032a2e:	b29b      	uxth	r3, r3
 8032a30:	4618      	mov	r0, r3
 8032a32:	f7f9 ff77 	bl	802c924 <lwip_htons>
 8032a36:	4603      	mov	r3, r0
 8032a38:	b2db      	uxtb	r3, r3
 8032a3a:	f003 0303 	and.w	r3, r3, #3
 8032a3e:	2b00      	cmp	r3, #0
 8032a40:	d001      	beq.n	8032a46 <tcp_receive+0xe6e>
 8032a42:	2301      	movs	r3, #1
 8032a44:	e000      	b.n	8032a48 <tcp_receive+0xe70>
 8032a46:	2300      	movs	r3, #0
 8032a48:	4423      	add	r3, r4
 8032a4a:	b29a      	uxth	r2, r3
 8032a4c:	4b2a      	ldr	r3, [pc, #168]	; (8032af8 <tcp_receive+0xf20>)
 8032a4e:	801a      	strh	r2, [r3, #0]
                    LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 8032a50:	4b29      	ldr	r3, [pc, #164]	; (8032af8 <tcp_receive+0xf20>)
 8032a52:	881b      	ldrh	r3, [r3, #0]
 8032a54:	461a      	mov	r2, r3
 8032a56:	4b26      	ldr	r3, [pc, #152]	; (8032af0 <tcp_receive+0xf18>)
 8032a58:	681b      	ldr	r3, [r3, #0]
 8032a5a:	441a      	add	r2, r3
 8032a5c:	687b      	ldr	r3, [r7, #4]
 8032a5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8032a60:	6879      	ldr	r1, [r7, #4]
 8032a62:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8032a64:	440b      	add	r3, r1
 8032a66:	429a      	cmp	r2, r3
 8032a68:	d019      	beq.n	8032a9e <tcp_receive+0xec6>
 8032a6a:	4b24      	ldr	r3, [pc, #144]	; (8032afc <tcp_receive+0xf24>)
 8032a6c:	f44f 62df 	mov.w	r2, #1784	; 0x6f8
 8032a70:	4923      	ldr	r1, [pc, #140]	; (8032b00 <tcp_receive+0xf28>)
 8032a72:	4824      	ldr	r0, [pc, #144]	; (8032b04 <tcp_receive+0xf2c>)
 8032a74:	f006 faf8 	bl	8039068 <iprintf>
                                (seqno + tcplen) == (pcb->rcv_nxt + pcb->rcv_wnd));
                  }
                }
                break;
 8032a78:	e011      	b.n	8032a9e <tcp_receive+0xec6>
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 8032a7a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8032a7c:	681b      	ldr	r3, [r3, #0]
 8032a7e:	63bb      	str	r3, [r7, #56]	; 0x38
 8032a80:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8032a82:	2b00      	cmp	r3, #0
 8032a84:	f47f aea4 	bne.w	80327d0 <tcp_receive+0xbf8>
 8032a88:	e00a      	b.n	8032aa0 <tcp_receive+0xec8>
                break;
 8032a8a:	bf00      	nop
 8032a8c:	e008      	b.n	8032aa0 <tcp_receive+0xec8>
                break;
 8032a8e:	bf00      	nop
 8032a90:	e006      	b.n	8032aa0 <tcp_receive+0xec8>
                  break;
 8032a92:	bf00      	nop
 8032a94:	e004      	b.n	8032aa0 <tcp_receive+0xec8>
                  break;
 8032a96:	bf00      	nop
 8032a98:	e002      	b.n	8032aa0 <tcp_receive+0xec8>
                  break;
 8032a9a:	bf00      	nop
 8032a9c:	e000      	b.n	8032aa0 <tcp_receive+0xec8>
                break;
 8032a9e:	bf00      	nop
#endif /* TCP_OOSEQ_BYTES_LIMIT || TCP_OOSEQ_PBUFS_LIMIT */
#endif /* TCP_QUEUE_OOSEQ */

        /* We send the ACK packet after we've (potentially) dealt with SACKs,
           so they can be included in the acknowledgment. */
        tcp_send_empty_ack(pcb);
 8032aa0:	6878      	ldr	r0, [r7, #4]
 8032aa2:	f001 fed9 	bl	8034858 <tcp_send_empty_ack>
      if (pcb->rcv_nxt == seqno) {
 8032aa6:	e003      	b.n	8032ab0 <tcp_receive+0xed8>
      }
    } else {
      /* The incoming segment is not within the window. */
      tcp_send_empty_ack(pcb);
 8032aa8:	6878      	ldr	r0, [r7, #4]
 8032aaa:	f001 fed5 	bl	8034858 <tcp_send_empty_ack>
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 8032aae:	e01a      	b.n	8032ae6 <tcp_receive+0xf0e>
 8032ab0:	e019      	b.n	8032ae6 <tcp_receive+0xf0e>
    }
  } else {
    /* Segments with length 0 is taken care of here. Segments that
       fall out of the window are ACKed. */
    if (!TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
 8032ab2:	4b0f      	ldr	r3, [pc, #60]	; (8032af0 <tcp_receive+0xf18>)
 8032ab4:	681a      	ldr	r2, [r3, #0]
 8032ab6:	687b      	ldr	r3, [r7, #4]
 8032ab8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8032aba:	1ad3      	subs	r3, r2, r3
 8032abc:	2b00      	cmp	r3, #0
 8032abe:	db0a      	blt.n	8032ad6 <tcp_receive+0xefe>
 8032ac0:	4b0b      	ldr	r3, [pc, #44]	; (8032af0 <tcp_receive+0xf18>)
 8032ac2:	681a      	ldr	r2, [r3, #0]
 8032ac4:	687b      	ldr	r3, [r7, #4]
 8032ac6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8032ac8:	6879      	ldr	r1, [r7, #4]
 8032aca:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8032acc:	440b      	add	r3, r1
 8032ace:	1ad3      	subs	r3, r2, r3
 8032ad0:	3301      	adds	r3, #1
 8032ad2:	2b00      	cmp	r3, #0
 8032ad4:	dd07      	ble.n	8032ae6 <tcp_receive+0xf0e>
      tcp_ack_now(pcb);
 8032ad6:	687b      	ldr	r3, [r7, #4]
 8032ad8:	8b5b      	ldrh	r3, [r3, #26]
 8032ada:	f043 0302 	orr.w	r3, r3, #2
 8032ade:	b29a      	uxth	r2, r3
 8032ae0:	687b      	ldr	r3, [r7, #4]
 8032ae2:	835a      	strh	r2, [r3, #26]
    }
  }
}
 8032ae4:	e7ff      	b.n	8032ae6 <tcp_receive+0xf0e>
 8032ae6:	bf00      	nop
 8032ae8:	3750      	adds	r7, #80	; 0x50
 8032aea:	46bd      	mov	sp, r7
 8032aec:	bdb0      	pop	{r4, r5, r7, pc}
 8032aee:	bf00      	nop
 8032af0:	2000ef38 	.word	0x2000ef38
 8032af4:	2000ef18 	.word	0x2000ef18
 8032af8:	2000ef42 	.word	0x2000ef42
 8032afc:	0803bca8 	.word	0x0803bca8
 8032b00:	0803c050 	.word	0x0803c050
 8032b04:	0803bcf4 	.word	0x0803bcf4

08032b08 <tcp_get_next_optbyte>:

static u8_t
tcp_get_next_optbyte(void)
{
 8032b08:	b480      	push	{r7}
 8032b0a:	b083      	sub	sp, #12
 8032b0c:	af00      	add	r7, sp, #0
  u16_t optidx = tcp_optidx++;
 8032b0e:	4b15      	ldr	r3, [pc, #84]	; (8032b64 <tcp_get_next_optbyte+0x5c>)
 8032b10:	881b      	ldrh	r3, [r3, #0]
 8032b12:	1c5a      	adds	r2, r3, #1
 8032b14:	b291      	uxth	r1, r2
 8032b16:	4a13      	ldr	r2, [pc, #76]	; (8032b64 <tcp_get_next_optbyte+0x5c>)
 8032b18:	8011      	strh	r1, [r2, #0]
 8032b1a:	80fb      	strh	r3, [r7, #6]
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 8032b1c:	4b12      	ldr	r3, [pc, #72]	; (8032b68 <tcp_get_next_optbyte+0x60>)
 8032b1e:	681b      	ldr	r3, [r3, #0]
 8032b20:	2b00      	cmp	r3, #0
 8032b22:	d004      	beq.n	8032b2e <tcp_get_next_optbyte+0x26>
 8032b24:	4b11      	ldr	r3, [pc, #68]	; (8032b6c <tcp_get_next_optbyte+0x64>)
 8032b26:	881b      	ldrh	r3, [r3, #0]
 8032b28:	88fa      	ldrh	r2, [r7, #6]
 8032b2a:	429a      	cmp	r2, r3
 8032b2c:	d208      	bcs.n	8032b40 <tcp_get_next_optbyte+0x38>
    u8_t *opts = (u8_t *)tcphdr + TCP_HLEN;
 8032b2e:	4b10      	ldr	r3, [pc, #64]	; (8032b70 <tcp_get_next_optbyte+0x68>)
 8032b30:	681b      	ldr	r3, [r3, #0]
 8032b32:	3314      	adds	r3, #20
 8032b34:	603b      	str	r3, [r7, #0]
    return opts[optidx];
 8032b36:	88fb      	ldrh	r3, [r7, #6]
 8032b38:	683a      	ldr	r2, [r7, #0]
 8032b3a:	4413      	add	r3, r2
 8032b3c:	781b      	ldrb	r3, [r3, #0]
 8032b3e:	e00b      	b.n	8032b58 <tcp_get_next_optbyte+0x50>
  } else {
    u8_t idx = (u8_t)(optidx - tcphdr_opt1len);
 8032b40:	88fb      	ldrh	r3, [r7, #6]
 8032b42:	b2da      	uxtb	r2, r3
 8032b44:	4b09      	ldr	r3, [pc, #36]	; (8032b6c <tcp_get_next_optbyte+0x64>)
 8032b46:	881b      	ldrh	r3, [r3, #0]
 8032b48:	b2db      	uxtb	r3, r3
 8032b4a:	1ad3      	subs	r3, r2, r3
 8032b4c:	717b      	strb	r3, [r7, #5]
    return tcphdr_opt2[idx];
 8032b4e:	4b06      	ldr	r3, [pc, #24]	; (8032b68 <tcp_get_next_optbyte+0x60>)
 8032b50:	681a      	ldr	r2, [r3, #0]
 8032b52:	797b      	ldrb	r3, [r7, #5]
 8032b54:	4413      	add	r3, r2
 8032b56:	781b      	ldrb	r3, [r3, #0]
  }
}
 8032b58:	4618      	mov	r0, r3
 8032b5a:	370c      	adds	r7, #12
 8032b5c:	46bd      	mov	sp, r7
 8032b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8032b62:	4770      	bx	lr
 8032b64:	2000ef34 	.word	0x2000ef34
 8032b68:	2000ef30 	.word	0x2000ef30
 8032b6c:	2000ef2e 	.word	0x2000ef2e
 8032b70:	2000ef28 	.word	0x2000ef28

08032b74 <tcp_parseopt>:
 *
 * @param pcb the tcp_pcb for which a segment arrived
 */
static void
tcp_parseopt(struct tcp_pcb *pcb)
{
 8032b74:	b580      	push	{r7, lr}
 8032b76:	b084      	sub	sp, #16
 8032b78:	af00      	add	r7, sp, #0
 8032b7a:	6078      	str	r0, [r7, #4]
  u16_t mss;
#if LWIP_TCP_TIMESTAMPS
  u32_t tsval;
#endif

  LWIP_ASSERT("tcp_parseopt: invalid pcb", pcb != NULL);
 8032b7c:	687b      	ldr	r3, [r7, #4]
 8032b7e:	2b00      	cmp	r3, #0
 8032b80:	d106      	bne.n	8032b90 <tcp_parseopt+0x1c>
 8032b82:	4b32      	ldr	r3, [pc, #200]	; (8032c4c <tcp_parseopt+0xd8>)
 8032b84:	f240 727d 	movw	r2, #1917	; 0x77d
 8032b88:	4931      	ldr	r1, [pc, #196]	; (8032c50 <tcp_parseopt+0xdc>)
 8032b8a:	4832      	ldr	r0, [pc, #200]	; (8032c54 <tcp_parseopt+0xe0>)
 8032b8c:	f006 fa6c 	bl	8039068 <iprintf>

  /* Parse the TCP MSS option, if present. */
  if (tcphdr_optlen != 0) {
 8032b90:	4b31      	ldr	r3, [pc, #196]	; (8032c58 <tcp_parseopt+0xe4>)
 8032b92:	881b      	ldrh	r3, [r3, #0]
 8032b94:	2b00      	cmp	r3, #0
 8032b96:	d055      	beq.n	8032c44 <tcp_parseopt+0xd0>
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 8032b98:	4b30      	ldr	r3, [pc, #192]	; (8032c5c <tcp_parseopt+0xe8>)
 8032b9a:	2200      	movs	r2, #0
 8032b9c:	801a      	strh	r2, [r3, #0]
 8032b9e:	e045      	b.n	8032c2c <tcp_parseopt+0xb8>
      u8_t opt = tcp_get_next_optbyte();
 8032ba0:	f7ff ffb2 	bl	8032b08 <tcp_get_next_optbyte>
 8032ba4:	4603      	mov	r3, r0
 8032ba6:	73fb      	strb	r3, [r7, #15]
      switch (opt) {
 8032ba8:	7bfb      	ldrb	r3, [r7, #15]
 8032baa:	2b02      	cmp	r3, #2
 8032bac:	d006      	beq.n	8032bbc <tcp_parseopt+0x48>
 8032bae:	2b02      	cmp	r3, #2
 8032bb0:	dc2b      	bgt.n	8032c0a <tcp_parseopt+0x96>
 8032bb2:	2b00      	cmp	r3, #0
 8032bb4:	d041      	beq.n	8032c3a <tcp_parseopt+0xc6>
 8032bb6:	2b01      	cmp	r3, #1
 8032bb8:	d127      	bne.n	8032c0a <tcp_parseopt+0x96>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: EOL\n"));
          return;
        case LWIP_TCP_OPT_NOP:
          /* NOP option. */
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: NOP\n"));
          break;
 8032bba:	e037      	b.n	8032c2c <tcp_parseopt+0xb8>
        case LWIP_TCP_OPT_MSS:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: MSS\n"));
          if (tcp_get_next_optbyte() != LWIP_TCP_OPT_LEN_MSS || (tcp_optidx - 2 + LWIP_TCP_OPT_LEN_MSS) > tcphdr_optlen) {
 8032bbc:	f7ff ffa4 	bl	8032b08 <tcp_get_next_optbyte>
 8032bc0:	4603      	mov	r3, r0
 8032bc2:	2b04      	cmp	r3, #4
 8032bc4:	d13b      	bne.n	8032c3e <tcp_parseopt+0xca>
 8032bc6:	4b25      	ldr	r3, [pc, #148]	; (8032c5c <tcp_parseopt+0xe8>)
 8032bc8:	881b      	ldrh	r3, [r3, #0]
 8032bca:	3301      	adds	r3, #1
 8032bcc:	4a22      	ldr	r2, [pc, #136]	; (8032c58 <tcp_parseopt+0xe4>)
 8032bce:	8812      	ldrh	r2, [r2, #0]
 8032bd0:	4293      	cmp	r3, r2
 8032bd2:	da34      	bge.n	8032c3e <tcp_parseopt+0xca>
            /* Bad length */
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: bad length\n"));
            return;
          }
          /* An MSS option with the right option length. */
          mss = (u16_t)(tcp_get_next_optbyte() << 8);
 8032bd4:	f7ff ff98 	bl	8032b08 <tcp_get_next_optbyte>
 8032bd8:	4603      	mov	r3, r0
 8032bda:	b29b      	uxth	r3, r3
 8032bdc:	021b      	lsls	r3, r3, #8
 8032bde:	81bb      	strh	r3, [r7, #12]
          mss |= tcp_get_next_optbyte();
 8032be0:	f7ff ff92 	bl	8032b08 <tcp_get_next_optbyte>
 8032be4:	4603      	mov	r3, r0
 8032be6:	b29a      	uxth	r2, r3
 8032be8:	89bb      	ldrh	r3, [r7, #12]
 8032bea:	4313      	orrs	r3, r2
 8032bec:	81bb      	strh	r3, [r7, #12]
          /* Limit the mss to the configured TCP_MSS and prevent division by zero */
          pcb->mss = ((mss > TCP_MSS) || (mss == 0)) ? TCP_MSS : mss;
 8032bee:	89bb      	ldrh	r3, [r7, #12]
 8032bf0:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 8032bf4:	d804      	bhi.n	8032c00 <tcp_parseopt+0x8c>
 8032bf6:	89bb      	ldrh	r3, [r7, #12]
 8032bf8:	2b00      	cmp	r3, #0
 8032bfa:	d001      	beq.n	8032c00 <tcp_parseopt+0x8c>
 8032bfc:	89ba      	ldrh	r2, [r7, #12]
 8032bfe:	e001      	b.n	8032c04 <tcp_parseopt+0x90>
 8032c00:	f44f 7206 	mov.w	r2, #536	; 0x218
 8032c04:	687b      	ldr	r3, [r7, #4]
 8032c06:	865a      	strh	r2, [r3, #50]	; 0x32
          break;
 8032c08:	e010      	b.n	8032c2c <tcp_parseopt+0xb8>
          }
          break;
#endif /* LWIP_TCP_SACK_OUT */
        default:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: other\n"));
          data = tcp_get_next_optbyte();
 8032c0a:	f7ff ff7d 	bl	8032b08 <tcp_get_next_optbyte>
 8032c0e:	4603      	mov	r3, r0
 8032c10:	72fb      	strb	r3, [r7, #11]
          if (data < 2) {
 8032c12:	7afb      	ldrb	r3, [r7, #11]
 8032c14:	2b01      	cmp	r3, #1
 8032c16:	d914      	bls.n	8032c42 <tcp_parseopt+0xce>
               and we don't process them further. */
            return;
          }
          /* All other options have a length field, so that we easily
             can skip past them. */
          tcp_optidx += data - 2;
 8032c18:	7afb      	ldrb	r3, [r7, #11]
 8032c1a:	b29a      	uxth	r2, r3
 8032c1c:	4b0f      	ldr	r3, [pc, #60]	; (8032c5c <tcp_parseopt+0xe8>)
 8032c1e:	881b      	ldrh	r3, [r3, #0]
 8032c20:	4413      	add	r3, r2
 8032c22:	b29b      	uxth	r3, r3
 8032c24:	3b02      	subs	r3, #2
 8032c26:	b29a      	uxth	r2, r3
 8032c28:	4b0c      	ldr	r3, [pc, #48]	; (8032c5c <tcp_parseopt+0xe8>)
 8032c2a:	801a      	strh	r2, [r3, #0]
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 8032c2c:	4b0b      	ldr	r3, [pc, #44]	; (8032c5c <tcp_parseopt+0xe8>)
 8032c2e:	881a      	ldrh	r2, [r3, #0]
 8032c30:	4b09      	ldr	r3, [pc, #36]	; (8032c58 <tcp_parseopt+0xe4>)
 8032c32:	881b      	ldrh	r3, [r3, #0]
 8032c34:	429a      	cmp	r2, r3
 8032c36:	d3b3      	bcc.n	8032ba0 <tcp_parseopt+0x2c>
 8032c38:	e004      	b.n	8032c44 <tcp_parseopt+0xd0>
          return;
 8032c3a:	bf00      	nop
 8032c3c:	e002      	b.n	8032c44 <tcp_parseopt+0xd0>
            return;
 8032c3e:	bf00      	nop
 8032c40:	e000      	b.n	8032c44 <tcp_parseopt+0xd0>
            return;
 8032c42:	bf00      	nop
      }
    }
  }
}
 8032c44:	3710      	adds	r7, #16
 8032c46:	46bd      	mov	sp, r7
 8032c48:	bd80      	pop	{r7, pc}
 8032c4a:	bf00      	nop
 8032c4c:	0803bca8 	.word	0x0803bca8
 8032c50:	0803c10c 	.word	0x0803c10c
 8032c54:	0803bcf4 	.word	0x0803bcf4
 8032c58:	2000ef2c 	.word	0x2000ef2c
 8032c5c:	2000ef34 	.word	0x2000ef34

08032c60 <tcp_trigger_input_pcb_close>:

void
tcp_trigger_input_pcb_close(void)
{
 8032c60:	b480      	push	{r7}
 8032c62:	af00      	add	r7, sp, #0
  recv_flags |= TF_CLOSED;
 8032c64:	4b05      	ldr	r3, [pc, #20]	; (8032c7c <tcp_trigger_input_pcb_close+0x1c>)
 8032c66:	781b      	ldrb	r3, [r3, #0]
 8032c68:	f043 0310 	orr.w	r3, r3, #16
 8032c6c:	b2da      	uxtb	r2, r3
 8032c6e:	4b03      	ldr	r3, [pc, #12]	; (8032c7c <tcp_trigger_input_pcb_close+0x1c>)
 8032c70:	701a      	strb	r2, [r3, #0]
}
 8032c72:	bf00      	nop
 8032c74:	46bd      	mov	sp, r7
 8032c76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8032c7a:	4770      	bx	lr
 8032c7c:	2000ef45 	.word	0x2000ef45

08032c80 <tcp_route>:
static err_t tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif);

/* tcp_route: common code that returns a fixed bound netif or calls ip_route */
static struct netif *
tcp_route(const struct tcp_pcb *pcb, const ip_addr_t *src, const ip_addr_t *dst)
{
 8032c80:	b580      	push	{r7, lr}
 8032c82:	b084      	sub	sp, #16
 8032c84:	af00      	add	r7, sp, #0
 8032c86:	60f8      	str	r0, [r7, #12]
 8032c88:	60b9      	str	r1, [r7, #8]
 8032c8a:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(src); /* in case IPv4-only and source-based routing is disabled */

  if ((pcb != NULL) && (pcb->netif_idx != NETIF_NO_INDEX)) {
 8032c8c:	68fb      	ldr	r3, [r7, #12]
 8032c8e:	2b00      	cmp	r3, #0
 8032c90:	d00a      	beq.n	8032ca8 <tcp_route+0x28>
 8032c92:	68fb      	ldr	r3, [r7, #12]
 8032c94:	7a1b      	ldrb	r3, [r3, #8]
 8032c96:	2b00      	cmp	r3, #0
 8032c98:	d006      	beq.n	8032ca8 <tcp_route+0x28>
    return netif_get_by_index(pcb->netif_idx);
 8032c9a:	68fb      	ldr	r3, [r7, #12]
 8032c9c:	7a1b      	ldrb	r3, [r3, #8]
 8032c9e:	4618      	mov	r0, r3
 8032ca0:	f7fa ff74 	bl	802db8c <netif_get_by_index>
 8032ca4:	4603      	mov	r3, r0
 8032ca6:	e003      	b.n	8032cb0 <tcp_route+0x30>
  } else {
    return ip_route(src, dst);
 8032ca8:	6878      	ldr	r0, [r7, #4]
 8032caa:	f003 ff4f 	bl	8036b4c <ip4_route>
 8032cae:	4603      	mov	r3, r0
  }
}
 8032cb0:	4618      	mov	r0, r3
 8032cb2:	3710      	adds	r7, #16
 8032cb4:	46bd      	mov	sp, r7
 8032cb6:	bd80      	pop	{r7, pc}

08032cb8 <tcp_create_segment>:
 * The TCP header is filled in except ackno and wnd.
 * p is freed on failure.
 */
static struct tcp_seg *
tcp_create_segment(const struct tcp_pcb *pcb, struct pbuf *p, u8_t hdrflags, u32_t seqno, u8_t optflags)
{
 8032cb8:	b590      	push	{r4, r7, lr}
 8032cba:	b087      	sub	sp, #28
 8032cbc:	af00      	add	r7, sp, #0
 8032cbe:	60f8      	str	r0, [r7, #12]
 8032cc0:	60b9      	str	r1, [r7, #8]
 8032cc2:	603b      	str	r3, [r7, #0]
 8032cc4:	4613      	mov	r3, r2
 8032cc6:	71fb      	strb	r3, [r7, #7]
  struct tcp_seg *seg;
  u8_t optlen;

  LWIP_ASSERT("tcp_create_segment: invalid pcb", pcb != NULL);
 8032cc8:	68fb      	ldr	r3, [r7, #12]
 8032cca:	2b00      	cmp	r3, #0
 8032ccc:	d105      	bne.n	8032cda <tcp_create_segment+0x22>
 8032cce:	4b48      	ldr	r3, [pc, #288]	; (8032df0 <tcp_create_segment+0x138>)
 8032cd0:	22a3      	movs	r2, #163	; 0xa3
 8032cd2:	4948      	ldr	r1, [pc, #288]	; (8032df4 <tcp_create_segment+0x13c>)
 8032cd4:	4848      	ldr	r0, [pc, #288]	; (8032df8 <tcp_create_segment+0x140>)
 8032cd6:	f006 f9c7 	bl	8039068 <iprintf>
  LWIP_ASSERT("tcp_create_segment: invalid pbuf", p != NULL);
 8032cda:	68bb      	ldr	r3, [r7, #8]
 8032cdc:	2b00      	cmp	r3, #0
 8032cde:	d105      	bne.n	8032cec <tcp_create_segment+0x34>
 8032ce0:	4b43      	ldr	r3, [pc, #268]	; (8032df0 <tcp_create_segment+0x138>)
 8032ce2:	22a4      	movs	r2, #164	; 0xa4
 8032ce4:	4945      	ldr	r1, [pc, #276]	; (8032dfc <tcp_create_segment+0x144>)
 8032ce6:	4844      	ldr	r0, [pc, #272]	; (8032df8 <tcp_create_segment+0x140>)
 8032ce8:	f006 f9be 	bl	8039068 <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 8032cec:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8032cf0:	009b      	lsls	r3, r3, #2
 8032cf2:	b2db      	uxtb	r3, r3
 8032cf4:	f003 0304 	and.w	r3, r3, #4
 8032cf8:	75fb      	strb	r3, [r7, #23]

  if ((seg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG)) == NULL) {
 8032cfa:	2003      	movs	r0, #3
 8032cfc:	f7fa fbb4 	bl	802d468 <memp_malloc>
 8032d00:	6138      	str	r0, [r7, #16]
 8032d02:	693b      	ldr	r3, [r7, #16]
 8032d04:	2b00      	cmp	r3, #0
 8032d06:	d104      	bne.n	8032d12 <tcp_create_segment+0x5a>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no memory.\n"));
    pbuf_free(p);
 8032d08:	68b8      	ldr	r0, [r7, #8]
 8032d0a:	f7fb faff 	bl	802e30c <pbuf_free>
    return NULL;
 8032d0e:	2300      	movs	r3, #0
 8032d10:	e069      	b.n	8032de6 <tcp_create_segment+0x12e>
  }
  seg->flags = optflags;
 8032d12:	693b      	ldr	r3, [r7, #16]
 8032d14:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 8032d18:	729a      	strb	r2, [r3, #10]
  seg->next = NULL;
 8032d1a:	693b      	ldr	r3, [r7, #16]
 8032d1c:	2200      	movs	r2, #0
 8032d1e:	601a      	str	r2, [r3, #0]
  seg->p = p;
 8032d20:	693b      	ldr	r3, [r7, #16]
 8032d22:	68ba      	ldr	r2, [r7, #8]
 8032d24:	605a      	str	r2, [r3, #4]
  LWIP_ASSERT("p->tot_len >= optlen", p->tot_len >= optlen);
 8032d26:	68bb      	ldr	r3, [r7, #8]
 8032d28:	891a      	ldrh	r2, [r3, #8]
 8032d2a:	7dfb      	ldrb	r3, [r7, #23]
 8032d2c:	b29b      	uxth	r3, r3
 8032d2e:	429a      	cmp	r2, r3
 8032d30:	d205      	bcs.n	8032d3e <tcp_create_segment+0x86>
 8032d32:	4b2f      	ldr	r3, [pc, #188]	; (8032df0 <tcp_create_segment+0x138>)
 8032d34:	22b0      	movs	r2, #176	; 0xb0
 8032d36:	4932      	ldr	r1, [pc, #200]	; (8032e00 <tcp_create_segment+0x148>)
 8032d38:	482f      	ldr	r0, [pc, #188]	; (8032df8 <tcp_create_segment+0x140>)
 8032d3a:	f006 f995 	bl	8039068 <iprintf>
  seg->len = p->tot_len - optlen;
 8032d3e:	68bb      	ldr	r3, [r7, #8]
 8032d40:	891a      	ldrh	r2, [r3, #8]
 8032d42:	7dfb      	ldrb	r3, [r7, #23]
 8032d44:	b29b      	uxth	r3, r3
 8032d46:	1ad3      	subs	r3, r2, r3
 8032d48:	b29a      	uxth	r2, r3
 8032d4a:	693b      	ldr	r3, [r7, #16]
 8032d4c:	811a      	strh	r2, [r3, #8]
  LWIP_ASSERT("invalid optflags passed: TF_SEG_DATA_CHECKSUMMED",
              (optflags & TF_SEG_DATA_CHECKSUMMED) == 0);
#endif /* TCP_CHECKSUM_ON_COPY */

  /* build TCP header */
  if (pbuf_add_header(p, TCP_HLEN)) {
 8032d4e:	2114      	movs	r1, #20
 8032d50:	68b8      	ldr	r0, [r7, #8]
 8032d52:	f7fb fa13 	bl	802e17c <pbuf_add_header>
 8032d56:	4603      	mov	r3, r0
 8032d58:	2b00      	cmp	r3, #0
 8032d5a:	d00c      	beq.n	8032d76 <tcp_create_segment+0xbe>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no room for TCP header in pbuf.\n"));
    TCP_STATS_INC(tcp.err);
 8032d5c:	4b29      	ldr	r3, [pc, #164]	; (8032e04 <tcp_create_segment+0x14c>)
 8032d5e:	f8b3 30a4 	ldrh.w	r3, [r3, #164]	; 0xa4
 8032d62:	3301      	adds	r3, #1
 8032d64:	b29a      	uxth	r2, r3
 8032d66:	4b27      	ldr	r3, [pc, #156]	; (8032e04 <tcp_create_segment+0x14c>)
 8032d68:	f8a3 20a4 	strh.w	r2, [r3, #164]	; 0xa4
    tcp_seg_free(seg);
 8032d6c:	6938      	ldr	r0, [r7, #16]
 8032d6e:	f7fc ff68 	bl	802fc42 <tcp_seg_free>
    return NULL;
 8032d72:	2300      	movs	r3, #0
 8032d74:	e037      	b.n	8032de6 <tcp_create_segment+0x12e>
  }
  seg->tcphdr = (struct tcp_hdr *)seg->p->payload;
 8032d76:	693b      	ldr	r3, [r7, #16]
 8032d78:	685b      	ldr	r3, [r3, #4]
 8032d7a:	685a      	ldr	r2, [r3, #4]
 8032d7c:	693b      	ldr	r3, [r7, #16]
 8032d7e:	60da      	str	r2, [r3, #12]
  seg->tcphdr->src = lwip_htons(pcb->local_port);
 8032d80:	68fb      	ldr	r3, [r7, #12]
 8032d82:	8ada      	ldrh	r2, [r3, #22]
 8032d84:	693b      	ldr	r3, [r7, #16]
 8032d86:	68dc      	ldr	r4, [r3, #12]
 8032d88:	4610      	mov	r0, r2
 8032d8a:	f7f9 fdcb 	bl	802c924 <lwip_htons>
 8032d8e:	4603      	mov	r3, r0
 8032d90:	8023      	strh	r3, [r4, #0]
  seg->tcphdr->dest = lwip_htons(pcb->remote_port);
 8032d92:	68fb      	ldr	r3, [r7, #12]
 8032d94:	8b1a      	ldrh	r2, [r3, #24]
 8032d96:	693b      	ldr	r3, [r7, #16]
 8032d98:	68dc      	ldr	r4, [r3, #12]
 8032d9a:	4610      	mov	r0, r2
 8032d9c:	f7f9 fdc2 	bl	802c924 <lwip_htons>
 8032da0:	4603      	mov	r3, r0
 8032da2:	8063      	strh	r3, [r4, #2]
  seg->tcphdr->seqno = lwip_htonl(seqno);
 8032da4:	693b      	ldr	r3, [r7, #16]
 8032da6:	68dc      	ldr	r4, [r3, #12]
 8032da8:	6838      	ldr	r0, [r7, #0]
 8032daa:	f7f9 fdd0 	bl	802c94e <lwip_htonl>
 8032dae:	4603      	mov	r3, r0
 8032db0:	6063      	str	r3, [r4, #4]
  /* ackno is set in tcp_output */
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), hdrflags);
 8032db2:	7dfb      	ldrb	r3, [r7, #23]
 8032db4:	089b      	lsrs	r3, r3, #2
 8032db6:	b2db      	uxtb	r3, r3
 8032db8:	b29b      	uxth	r3, r3
 8032dba:	3305      	adds	r3, #5
 8032dbc:	b29b      	uxth	r3, r3
 8032dbe:	031b      	lsls	r3, r3, #12
 8032dc0:	b29a      	uxth	r2, r3
 8032dc2:	79fb      	ldrb	r3, [r7, #7]
 8032dc4:	b29b      	uxth	r3, r3
 8032dc6:	4313      	orrs	r3, r2
 8032dc8:	b29a      	uxth	r2, r3
 8032dca:	693b      	ldr	r3, [r7, #16]
 8032dcc:	68dc      	ldr	r4, [r3, #12]
 8032dce:	4610      	mov	r0, r2
 8032dd0:	f7f9 fda8 	bl	802c924 <lwip_htons>
 8032dd4:	4603      	mov	r3, r0
 8032dd6:	81a3      	strh	r3, [r4, #12]
  /* wnd and chksum are set in tcp_output */
  seg->tcphdr->urgp = 0;
 8032dd8:	693b      	ldr	r3, [r7, #16]
 8032dda:	68db      	ldr	r3, [r3, #12]
 8032ddc:	2200      	movs	r2, #0
 8032dde:	749a      	strb	r2, [r3, #18]
 8032de0:	2200      	movs	r2, #0
 8032de2:	74da      	strb	r2, [r3, #19]
  return seg;
 8032de4:	693b      	ldr	r3, [r7, #16]
}
 8032de6:	4618      	mov	r0, r3
 8032de8:	371c      	adds	r7, #28
 8032dea:	46bd      	mov	sp, r7
 8032dec:	bd90      	pop	{r4, r7, pc}
 8032dee:	bf00      	nop
 8032df0:	0803c128 	.word	0x0803c128
 8032df4:	0803c15c 	.word	0x0803c15c
 8032df8:	0803c17c 	.word	0x0803c17c
 8032dfc:	0803c1a4 	.word	0x0803c1a4
 8032e00:	0803c1c8 	.word	0x0803c1c8
 8032e04:	2000ee04 	.word	0x2000ee04

08032e08 <tcp_pbuf_prealloc>:
#if TCP_OVERSIZE
static struct pbuf *
tcp_pbuf_prealloc(pbuf_layer layer, u16_t length, u16_t max_length,
                  u16_t *oversize, const struct tcp_pcb *pcb, u8_t apiflags,
                  u8_t first_seg)
{
 8032e08:	b580      	push	{r7, lr}
 8032e0a:	b086      	sub	sp, #24
 8032e0c:	af00      	add	r7, sp, #0
 8032e0e:	607b      	str	r3, [r7, #4]
 8032e10:	4603      	mov	r3, r0
 8032e12:	73fb      	strb	r3, [r7, #15]
 8032e14:	460b      	mov	r3, r1
 8032e16:	81bb      	strh	r3, [r7, #12]
 8032e18:	4613      	mov	r3, r2
 8032e1a:	817b      	strh	r3, [r7, #10]
  struct pbuf *p;
  u16_t alloc = length;
 8032e1c:	89bb      	ldrh	r3, [r7, #12]
 8032e1e:	82fb      	strh	r3, [r7, #22]

  LWIP_ASSERT("tcp_pbuf_prealloc: invalid oversize", oversize != NULL);
 8032e20:	687b      	ldr	r3, [r7, #4]
 8032e22:	2b00      	cmp	r3, #0
 8032e24:	d105      	bne.n	8032e32 <tcp_pbuf_prealloc+0x2a>
 8032e26:	4b30      	ldr	r3, [pc, #192]	; (8032ee8 <tcp_pbuf_prealloc+0xe0>)
 8032e28:	22e8      	movs	r2, #232	; 0xe8
 8032e2a:	4930      	ldr	r1, [pc, #192]	; (8032eec <tcp_pbuf_prealloc+0xe4>)
 8032e2c:	4830      	ldr	r0, [pc, #192]	; (8032ef0 <tcp_pbuf_prealloc+0xe8>)
 8032e2e:	f006 f91b 	bl	8039068 <iprintf>
  LWIP_ASSERT("tcp_pbuf_prealloc: invalid pcb", pcb != NULL);
 8032e32:	6a3b      	ldr	r3, [r7, #32]
 8032e34:	2b00      	cmp	r3, #0
 8032e36:	d105      	bne.n	8032e44 <tcp_pbuf_prealloc+0x3c>
 8032e38:	4b2b      	ldr	r3, [pc, #172]	; (8032ee8 <tcp_pbuf_prealloc+0xe0>)
 8032e3a:	22e9      	movs	r2, #233	; 0xe9
 8032e3c:	492d      	ldr	r1, [pc, #180]	; (8032ef4 <tcp_pbuf_prealloc+0xec>)
 8032e3e:	482c      	ldr	r0, [pc, #176]	; (8032ef0 <tcp_pbuf_prealloc+0xe8>)
 8032e40:	f006 f912 	bl	8039068 <iprintf>
  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(apiflags);
  LWIP_UNUSED_ARG(first_seg);
  alloc = max_length;
#else /* LWIP_NETIF_TX_SINGLE_PBUF */
  if (length < max_length) {
 8032e44:	89ba      	ldrh	r2, [r7, #12]
 8032e46:	897b      	ldrh	r3, [r7, #10]
 8032e48:	429a      	cmp	r2, r3
 8032e4a:	d221      	bcs.n	8032e90 <tcp_pbuf_prealloc+0x88>
     *
     * Did the user set TCP_WRITE_FLAG_MORE?
     *
     * Will the Nagle algorithm defer transmission of this segment?
     */
    if ((apiflags & TCP_WRITE_FLAG_MORE) ||
 8032e4c:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8032e50:	f003 0302 	and.w	r3, r3, #2
 8032e54:	2b00      	cmp	r3, #0
 8032e56:	d111      	bne.n	8032e7c <tcp_pbuf_prealloc+0x74>
        (!(pcb->flags & TF_NODELAY) &&
 8032e58:	6a3b      	ldr	r3, [r7, #32]
 8032e5a:	8b5b      	ldrh	r3, [r3, #26]
 8032e5c:	f003 0340 	and.w	r3, r3, #64	; 0x40
    if ((apiflags & TCP_WRITE_FLAG_MORE) ||
 8032e60:	2b00      	cmp	r3, #0
 8032e62:	d115      	bne.n	8032e90 <tcp_pbuf_prealloc+0x88>
        (!(pcb->flags & TF_NODELAY) &&
 8032e64:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8032e68:	2b00      	cmp	r3, #0
 8032e6a:	d007      	beq.n	8032e7c <tcp_pbuf_prealloc+0x74>
         (!first_seg ||
          pcb->unsent != NULL ||
 8032e6c:	6a3b      	ldr	r3, [r7, #32]
 8032e6e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
         (!first_seg ||
 8032e70:	2b00      	cmp	r3, #0
 8032e72:	d103      	bne.n	8032e7c <tcp_pbuf_prealloc+0x74>
          pcb->unacked != NULL))) {
 8032e74:	6a3b      	ldr	r3, [r7, #32]
 8032e76:	6f1b      	ldr	r3, [r3, #112]	; 0x70
          pcb->unsent != NULL ||
 8032e78:	2b00      	cmp	r3, #0
 8032e7a:	d009      	beq.n	8032e90 <tcp_pbuf_prealloc+0x88>
      alloc = LWIP_MIN(max_length, LWIP_MEM_ALIGN_SIZE(TCP_OVERSIZE_CALC_LENGTH(length)));
 8032e7c:	89bb      	ldrh	r3, [r7, #12]
 8032e7e:	f203 231b 	addw	r3, r3, #539	; 0x21b
 8032e82:	f023 0203 	bic.w	r2, r3, #3
 8032e86:	897b      	ldrh	r3, [r7, #10]
 8032e88:	4293      	cmp	r3, r2
 8032e8a:	bf28      	it	cs
 8032e8c:	4613      	movcs	r3, r2
 8032e8e:	82fb      	strh	r3, [r7, #22]
    }
  }
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */
  p = pbuf_alloc(layer, alloc, PBUF_RAM);
 8032e90:	8af9      	ldrh	r1, [r7, #22]
 8032e92:	7bfb      	ldrb	r3, [r7, #15]
 8032e94:	f44f 7220 	mov.w	r2, #640	; 0x280
 8032e98:	4618      	mov	r0, r3
 8032e9a:	f7fa ff21 	bl	802dce0 <pbuf_alloc>
 8032e9e:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 8032ea0:	693b      	ldr	r3, [r7, #16]
 8032ea2:	2b00      	cmp	r3, #0
 8032ea4:	d101      	bne.n	8032eaa <tcp_pbuf_prealloc+0xa2>
    return NULL;
 8032ea6:	2300      	movs	r3, #0
 8032ea8:	e019      	b.n	8032ede <tcp_pbuf_prealloc+0xd6>
  }
  LWIP_ASSERT("need unchained pbuf", p->next == NULL);
 8032eaa:	693b      	ldr	r3, [r7, #16]
 8032eac:	681b      	ldr	r3, [r3, #0]
 8032eae:	2b00      	cmp	r3, #0
 8032eb0:	d006      	beq.n	8032ec0 <tcp_pbuf_prealloc+0xb8>
 8032eb2:	4b0d      	ldr	r3, [pc, #52]	; (8032ee8 <tcp_pbuf_prealloc+0xe0>)
 8032eb4:	f240 120b 	movw	r2, #267	; 0x10b
 8032eb8:	490f      	ldr	r1, [pc, #60]	; (8032ef8 <tcp_pbuf_prealloc+0xf0>)
 8032eba:	480d      	ldr	r0, [pc, #52]	; (8032ef0 <tcp_pbuf_prealloc+0xe8>)
 8032ebc:	f006 f8d4 	bl	8039068 <iprintf>
  *oversize = p->len - length;
 8032ec0:	693b      	ldr	r3, [r7, #16]
 8032ec2:	895a      	ldrh	r2, [r3, #10]
 8032ec4:	89bb      	ldrh	r3, [r7, #12]
 8032ec6:	1ad3      	subs	r3, r2, r3
 8032ec8:	b29a      	uxth	r2, r3
 8032eca:	687b      	ldr	r3, [r7, #4]
 8032ecc:	801a      	strh	r2, [r3, #0]
  /* trim p->len to the currently used size */
  p->len = p->tot_len = length;
 8032ece:	693b      	ldr	r3, [r7, #16]
 8032ed0:	89ba      	ldrh	r2, [r7, #12]
 8032ed2:	811a      	strh	r2, [r3, #8]
 8032ed4:	693b      	ldr	r3, [r7, #16]
 8032ed6:	891a      	ldrh	r2, [r3, #8]
 8032ed8:	693b      	ldr	r3, [r7, #16]
 8032eda:	815a      	strh	r2, [r3, #10]
  return p;
 8032edc:	693b      	ldr	r3, [r7, #16]
}
 8032ede:	4618      	mov	r0, r3
 8032ee0:	3718      	adds	r7, #24
 8032ee2:	46bd      	mov	sp, r7
 8032ee4:	bd80      	pop	{r7, pc}
 8032ee6:	bf00      	nop
 8032ee8:	0803c128 	.word	0x0803c128
 8032eec:	0803c1e0 	.word	0x0803c1e0
 8032ef0:	0803c17c 	.word	0x0803c17c
 8032ef4:	0803c204 	.word	0x0803c204
 8032ef8:	0803c224 	.word	0x0803c224

08032efc <tcp_write_checks>:
 * @param len length of data to send (checked agains snd_buf)
 * @return ERR_OK if tcp_write is allowed to proceed, another err_t otherwise
 */
static err_t
tcp_write_checks(struct tcp_pcb *pcb, u16_t len)
{
 8032efc:	b580      	push	{r7, lr}
 8032efe:	b082      	sub	sp, #8
 8032f00:	af00      	add	r7, sp, #0
 8032f02:	6078      	str	r0, [r7, #4]
 8032f04:	460b      	mov	r3, r1
 8032f06:	807b      	strh	r3, [r7, #2]
  LWIP_ASSERT("tcp_write_checks: invalid pcb", pcb != NULL);
 8032f08:	687b      	ldr	r3, [r7, #4]
 8032f0a:	2b00      	cmp	r3, #0
 8032f0c:	d106      	bne.n	8032f1c <tcp_write_checks+0x20>
 8032f0e:	4b37      	ldr	r3, [pc, #220]	; (8032fec <tcp_write_checks+0xf0>)
 8032f10:	f240 1233 	movw	r2, #307	; 0x133
 8032f14:	4936      	ldr	r1, [pc, #216]	; (8032ff0 <tcp_write_checks+0xf4>)
 8032f16:	4837      	ldr	r0, [pc, #220]	; (8032ff4 <tcp_write_checks+0xf8>)
 8032f18:	f006 f8a6 	bl	8039068 <iprintf>

  /* connection is in invalid state for data transmission? */
  if ((pcb->state != ESTABLISHED) &&
 8032f1c:	687b      	ldr	r3, [r7, #4]
 8032f1e:	7d1b      	ldrb	r3, [r3, #20]
 8032f20:	2b04      	cmp	r3, #4
 8032f22:	d00e      	beq.n	8032f42 <tcp_write_checks+0x46>
      (pcb->state != CLOSE_WAIT) &&
 8032f24:	687b      	ldr	r3, [r7, #4]
 8032f26:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != ESTABLISHED) &&
 8032f28:	2b07      	cmp	r3, #7
 8032f2a:	d00a      	beq.n	8032f42 <tcp_write_checks+0x46>
      (pcb->state != SYN_SENT) &&
 8032f2c:	687b      	ldr	r3, [r7, #4]
 8032f2e:	7d1b      	ldrb	r3, [r3, #20]
      (pcb->state != CLOSE_WAIT) &&
 8032f30:	2b02      	cmp	r3, #2
 8032f32:	d006      	beq.n	8032f42 <tcp_write_checks+0x46>
      (pcb->state != SYN_RCVD)) {
 8032f34:	687b      	ldr	r3, [r7, #4]
 8032f36:	7d1b      	ldrb	r3, [r3, #20]
      (pcb->state != SYN_SENT) &&
 8032f38:	2b03      	cmp	r3, #3
 8032f3a:	d002      	beq.n	8032f42 <tcp_write_checks+0x46>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_STATE | LWIP_DBG_LEVEL_SEVERE, ("tcp_write() called in invalid state\n"));
    return ERR_CONN;
 8032f3c:	f06f 030a 	mvn.w	r3, #10
 8032f40:	e050      	b.n	8032fe4 <tcp_write_checks+0xe8>
  } else if (len == 0) {
 8032f42:	887b      	ldrh	r3, [r7, #2]
 8032f44:	2b00      	cmp	r3, #0
 8032f46:	d101      	bne.n	8032f4c <tcp_write_checks+0x50>
    return ERR_OK;
 8032f48:	2300      	movs	r3, #0
 8032f4a:	e04b      	b.n	8032fe4 <tcp_write_checks+0xe8>
  }

  /* fail on too much data */
  if (len > pcb->snd_buf) {
 8032f4c:	687b      	ldr	r3, [r7, #4]
 8032f4e:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 8032f52:	887a      	ldrh	r2, [r7, #2]
 8032f54:	429a      	cmp	r2, r3
 8032f56:	d909      	bls.n	8032f6c <tcp_write_checks+0x70>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("tcp_write: too much data (len=%"U16_F" > snd_buf=%"TCPWNDSIZE_F")\n",
                len, pcb->snd_buf));
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8032f58:	687b      	ldr	r3, [r7, #4]
 8032f5a:	8b5b      	ldrh	r3, [r3, #26]
 8032f5c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8032f60:	b29a      	uxth	r2, r3
 8032f62:	687b      	ldr	r3, [r7, #4]
 8032f64:	835a      	strh	r2, [r3, #26]
    return ERR_MEM;
 8032f66:	f04f 33ff 	mov.w	r3, #4294967295
 8032f6a:	e03b      	b.n	8032fe4 <tcp_write_checks+0xe8>
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_write: queuelen: %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));

  /* If total number of pbufs on the unsent/unacked queues exceeds the
   * configured maximum, return an error */
  /* check for configured max queuelen and possible overflow */
  if (pcb->snd_queuelen >= LWIP_MIN(TCP_SND_QUEUELEN, (TCP_SNDQUEUELEN_OVERFLOW + 1))) {
 8032f6c:	687b      	ldr	r3, [r7, #4]
 8032f6e:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8032f72:	2b08      	cmp	r3, #8
 8032f74:	d911      	bls.n	8032f9a <tcp_write_checks+0x9e>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("tcp_write: too long queue %"U16_F" (max %"U16_F")\n",
                pcb->snd_queuelen, (u16_t)TCP_SND_QUEUELEN));
    TCP_STATS_INC(tcp.memerr);
 8032f76:	4b20      	ldr	r3, [pc, #128]	; (8032ff8 <tcp_write_checks+0xfc>)
 8032f78:	f8b3 309c 	ldrh.w	r3, [r3, #156]	; 0x9c
 8032f7c:	3301      	adds	r3, #1
 8032f7e:	b29a      	uxth	r2, r3
 8032f80:	4b1d      	ldr	r3, [pc, #116]	; (8032ff8 <tcp_write_checks+0xfc>)
 8032f82:	f8a3 209c 	strh.w	r2, [r3, #156]	; 0x9c
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8032f86:	687b      	ldr	r3, [r7, #4]
 8032f88:	8b5b      	ldrh	r3, [r3, #26]
 8032f8a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8032f8e:	b29a      	uxth	r2, r3
 8032f90:	687b      	ldr	r3, [r7, #4]
 8032f92:	835a      	strh	r2, [r3, #26]
    return ERR_MEM;
 8032f94:	f04f 33ff 	mov.w	r3, #4294967295
 8032f98:	e024      	b.n	8032fe4 <tcp_write_checks+0xe8>
  }
  if (pcb->snd_queuelen != 0) {
 8032f9a:	687b      	ldr	r3, [r7, #4]
 8032f9c:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8032fa0:	2b00      	cmp	r3, #0
 8032fa2:	d00f      	beq.n	8032fc4 <tcp_write_checks+0xc8>
    LWIP_ASSERT("tcp_write: pbufs on queue => at least one queue non-empty",
 8032fa4:	687b      	ldr	r3, [r7, #4]
 8032fa6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8032fa8:	2b00      	cmp	r3, #0
 8032faa:	d11a      	bne.n	8032fe2 <tcp_write_checks+0xe6>
 8032fac:	687b      	ldr	r3, [r7, #4]
 8032fae:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8032fb0:	2b00      	cmp	r3, #0
 8032fb2:	d116      	bne.n	8032fe2 <tcp_write_checks+0xe6>
 8032fb4:	4b0d      	ldr	r3, [pc, #52]	; (8032fec <tcp_write_checks+0xf0>)
 8032fb6:	f240 1255 	movw	r2, #341	; 0x155
 8032fba:	4910      	ldr	r1, [pc, #64]	; (8032ffc <tcp_write_checks+0x100>)
 8032fbc:	480d      	ldr	r0, [pc, #52]	; (8032ff4 <tcp_write_checks+0xf8>)
 8032fbe:	f006 f853 	bl	8039068 <iprintf>
 8032fc2:	e00e      	b.n	8032fe2 <tcp_write_checks+0xe6>
                pcb->unacked != NULL || pcb->unsent != NULL);
  } else {
    LWIP_ASSERT("tcp_write: no pbufs on queue => both queues empty",
 8032fc4:	687b      	ldr	r3, [r7, #4]
 8032fc6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8032fc8:	2b00      	cmp	r3, #0
 8032fca:	d103      	bne.n	8032fd4 <tcp_write_checks+0xd8>
 8032fcc:	687b      	ldr	r3, [r7, #4]
 8032fce:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8032fd0:	2b00      	cmp	r3, #0
 8032fd2:	d006      	beq.n	8032fe2 <tcp_write_checks+0xe6>
 8032fd4:	4b05      	ldr	r3, [pc, #20]	; (8032fec <tcp_write_checks+0xf0>)
 8032fd6:	f44f 72ac 	mov.w	r2, #344	; 0x158
 8032fda:	4909      	ldr	r1, [pc, #36]	; (8033000 <tcp_write_checks+0x104>)
 8032fdc:	4805      	ldr	r0, [pc, #20]	; (8032ff4 <tcp_write_checks+0xf8>)
 8032fde:	f006 f843 	bl	8039068 <iprintf>
                pcb->unacked == NULL && pcb->unsent == NULL);
  }
  return ERR_OK;
 8032fe2:	2300      	movs	r3, #0
}
 8032fe4:	4618      	mov	r0, r3
 8032fe6:	3708      	adds	r7, #8
 8032fe8:	46bd      	mov	sp, r7
 8032fea:	bd80      	pop	{r7, pc}
 8032fec:	0803c128 	.word	0x0803c128
 8032ff0:	0803c238 	.word	0x0803c238
 8032ff4:	0803c17c 	.word	0x0803c17c
 8032ff8:	2000ee04 	.word	0x2000ee04
 8032ffc:	0803c258 	.word	0x0803c258
 8033000:	0803c294 	.word	0x0803c294

08033004 <tcp_write>:
 * - TCP_WRITE_FLAG_MORE (0x02) for TCP connection, PSH flag will not be set on last segment sent,
 * @return ERR_OK if enqueued, another err_t on error
 */
err_t
tcp_write(struct tcp_pcb *pcb, const void *arg, u16_t len, u8_t apiflags)
{
 8033004:	b590      	push	{r4, r7, lr}
 8033006:	b09b      	sub	sp, #108	; 0x6c
 8033008:	af04      	add	r7, sp, #16
 803300a:	60f8      	str	r0, [r7, #12]
 803300c:	60b9      	str	r1, [r7, #8]
 803300e:	4611      	mov	r1, r2
 8033010:	461a      	mov	r2, r3
 8033012:	460b      	mov	r3, r1
 8033014:	80fb      	strh	r3, [r7, #6]
 8033016:	4613      	mov	r3, r2
 8033018:	717b      	strb	r3, [r7, #5]
  struct pbuf *concat_p = NULL;
 803301a:	2300      	movs	r3, #0
 803301c:	657b      	str	r3, [r7, #84]	; 0x54
  struct tcp_seg *last_unsent = NULL, *seg = NULL, *prev_seg = NULL, *queue = NULL;
 803301e:	2300      	movs	r3, #0
 8033020:	653b      	str	r3, [r7, #80]	; 0x50
 8033022:	2300      	movs	r3, #0
 8033024:	64fb      	str	r3, [r7, #76]	; 0x4c
 8033026:	2300      	movs	r3, #0
 8033028:	64bb      	str	r3, [r7, #72]	; 0x48
 803302a:	2300      	movs	r3, #0
 803302c:	647b      	str	r3, [r7, #68]	; 0x44
  u16_t pos = 0; /* position in 'arg' data */
 803302e:	2300      	movs	r3, #0
 8033030:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
  u16_t queuelen;
  u8_t optlen;
  u8_t optflags = 0;
 8033034:	2300      	movs	r3, #0
 8033036:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
#if TCP_OVERSIZE
  u16_t oversize = 0;
 803303a:	2300      	movs	r3, #0
 803303c:	827b      	strh	r3, [r7, #18]
  u16_t oversize_used = 0;
 803303e:	2300      	movs	r3, #0
 8033040:	87fb      	strh	r3, [r7, #62]	; 0x3e
#if TCP_OVERSIZE_DBGCHECK
  u16_t oversize_add = 0;
#endif /* TCP_OVERSIZE_DBGCHECK*/
#endif /* TCP_OVERSIZE */
  u16_t extendlen = 0;
 8033042:	2300      	movs	r3, #0
 8033044:	87bb      	strh	r3, [r7, #60]	; 0x3c
  u16_t concat_chksummed = 0;
#endif /* TCP_CHECKSUM_ON_COPY */
  err_t err;
  u16_t mss_local;

  LWIP_ERROR("tcp_write: invalid pcb", pcb != NULL, return ERR_ARG);
 8033046:	68fb      	ldr	r3, [r7, #12]
 8033048:	2b00      	cmp	r3, #0
 803304a:	d109      	bne.n	8033060 <tcp_write+0x5c>
 803304c:	4ba4      	ldr	r3, [pc, #656]	; (80332e0 <tcp_write+0x2dc>)
 803304e:	f44f 72cf 	mov.w	r2, #414	; 0x19e
 8033052:	49a4      	ldr	r1, [pc, #656]	; (80332e4 <tcp_write+0x2e0>)
 8033054:	48a4      	ldr	r0, [pc, #656]	; (80332e8 <tcp_write+0x2e4>)
 8033056:	f006 f807 	bl	8039068 <iprintf>
 803305a:	f06f 030f 	mvn.w	r3, #15
 803305e:	e332      	b.n	80336c6 <tcp_write+0x6c2>

  /* don't allocate segments bigger than half the maximum window we ever received */
  mss_local = LWIP_MIN(pcb->mss, TCPWND_MIN16(pcb->snd_wnd_max / 2));
 8033060:	68fb      	ldr	r3, [r7, #12]
 8033062:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8033066:	085b      	lsrs	r3, r3, #1
 8033068:	b29a      	uxth	r2, r3
 803306a:	68fb      	ldr	r3, [r7, #12]
 803306c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 803306e:	4293      	cmp	r3, r2
 8033070:	bf28      	it	cs
 8033072:	4613      	movcs	r3, r2
 8033074:	84bb      	strh	r3, [r7, #36]	; 0x24
  mss_local = mss_local ? mss_local : pcb->mss;
 8033076:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8033078:	2b00      	cmp	r3, #0
 803307a:	d102      	bne.n	8033082 <tcp_write+0x7e>
 803307c:	68fb      	ldr	r3, [r7, #12]
 803307e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8033080:	e000      	b.n	8033084 <tcp_write+0x80>
 8033082:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8033084:	84bb      	strh	r3, [r7, #36]	; 0x24
  apiflags |= TCP_WRITE_FLAG_COPY;
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_write(pcb=%p, data=%p, len=%"U16_F", apiflags=%"U16_F")\n",
                                 (void *)pcb, arg, len, (u16_t)apiflags));
  LWIP_ERROR("tcp_write: arg == NULL (programmer violates API)",
 8033086:	68bb      	ldr	r3, [r7, #8]
 8033088:	2b00      	cmp	r3, #0
 803308a:	d109      	bne.n	80330a0 <tcp_write+0x9c>
 803308c:	4b94      	ldr	r3, [pc, #592]	; (80332e0 <tcp_write+0x2dc>)
 803308e:	f240 12ad 	movw	r2, #429	; 0x1ad
 8033092:	4996      	ldr	r1, [pc, #600]	; (80332ec <tcp_write+0x2e8>)
 8033094:	4894      	ldr	r0, [pc, #592]	; (80332e8 <tcp_write+0x2e4>)
 8033096:	f005 ffe7 	bl	8039068 <iprintf>
 803309a:	f06f 030f 	mvn.w	r3, #15
 803309e:	e312      	b.n	80336c6 <tcp_write+0x6c2>
             arg != NULL, return ERR_ARG;);

  err = tcp_write_checks(pcb, len);
 80330a0:	88fb      	ldrh	r3, [r7, #6]
 80330a2:	4619      	mov	r1, r3
 80330a4:	68f8      	ldr	r0, [r7, #12]
 80330a6:	f7ff ff29 	bl	8032efc <tcp_write_checks>
 80330aa:	4603      	mov	r3, r0
 80330ac:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  if (err != ERR_OK) {
 80330b0:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
 80330b4:	2b00      	cmp	r3, #0
 80330b6:	d002      	beq.n	80330be <tcp_write+0xba>
    return err;
 80330b8:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
 80330bc:	e303      	b.n	80336c6 <tcp_write+0x6c2>
  }
  queuelen = pcb->snd_queuelen;
 80330be:	68fb      	ldr	r3, [r7, #12]
 80330c0:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 80330c4:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
    /* ensure that segments can hold at least one data byte... */
    mss_local = LWIP_MAX(mss_local, LWIP_TCP_OPT_LEN_TS + 1);
  } else
#endif /* LWIP_TCP_TIMESTAMPS */
  {
    optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 80330c8:	2300      	movs	r3, #0
 80330ca:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
   *
   * pos records progress as data is segmented.
   */

  /* Find the tail of the unsent queue. */
  if (pcb->unsent != NULL) {
 80330ce:	68fb      	ldr	r3, [r7, #12]
 80330d0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80330d2:	2b00      	cmp	r3, #0
 80330d4:	f000 80f6 	beq.w	80332c4 <tcp_write+0x2c0>
    u16_t space;
    u16_t unsent_optlen;

    /* @todo: this could be sped up by keeping last_unsent in the pcb */
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 80330d8:	68fb      	ldr	r3, [r7, #12]
 80330da:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80330dc:	653b      	str	r3, [r7, #80]	; 0x50
 80330de:	e002      	b.n	80330e6 <tcp_write+0xe2>
         last_unsent = last_unsent->next);
 80330e0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80330e2:	681b      	ldr	r3, [r3, #0]
 80330e4:	653b      	str	r3, [r7, #80]	; 0x50
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 80330e6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80330e8:	681b      	ldr	r3, [r3, #0]
 80330ea:	2b00      	cmp	r3, #0
 80330ec:	d1f8      	bne.n	80330e0 <tcp_write+0xdc>

    /* Usable space at the end of the last unsent segment */
    unsent_optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(last_unsent->flags, pcb);
 80330ee:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80330f0:	7a9b      	ldrb	r3, [r3, #10]
 80330f2:	009b      	lsls	r3, r3, #2
 80330f4:	b29b      	uxth	r3, r3
 80330f6:	f003 0304 	and.w	r3, r3, #4
 80330fa:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("mss_local is too small", mss_local >= last_unsent->len + unsent_optlen);
 80330fc:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80330fe:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8033100:	891b      	ldrh	r3, [r3, #8]
 8033102:	4619      	mov	r1, r3
 8033104:	8c3b      	ldrh	r3, [r7, #32]
 8033106:	440b      	add	r3, r1
 8033108:	429a      	cmp	r2, r3
 803310a:	da06      	bge.n	803311a <tcp_write+0x116>
 803310c:	4b74      	ldr	r3, [pc, #464]	; (80332e0 <tcp_write+0x2dc>)
 803310e:	f44f 72f3 	mov.w	r2, #486	; 0x1e6
 8033112:	4977      	ldr	r1, [pc, #476]	; (80332f0 <tcp_write+0x2ec>)
 8033114:	4874      	ldr	r0, [pc, #464]	; (80332e8 <tcp_write+0x2e4>)
 8033116:	f005 ffa7 	bl	8039068 <iprintf>
    space = mss_local - (last_unsent->len + unsent_optlen);
 803311a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 803311c:	891a      	ldrh	r2, [r3, #8]
 803311e:	8c3b      	ldrh	r3, [r7, #32]
 8033120:	4413      	add	r3, r2
 8033122:	b29b      	uxth	r3, r3
 8033124:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8033126:	1ad3      	subs	r3, r2, r3
 8033128:	877b      	strh	r3, [r7, #58]	; 0x3a
#if TCP_OVERSIZE_DBGCHECK
    /* check that pcb->unsent_oversize matches last_unsent->oversize_left */
    LWIP_ASSERT("unsent_oversize mismatch (pcb vs. last_unsent)",
                pcb->unsent_oversize == last_unsent->oversize_left);
#endif /* TCP_OVERSIZE_DBGCHECK */
    oversize = pcb->unsent_oversize;
 803312a:	68fb      	ldr	r3, [r7, #12]
 803312c:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8033130:	827b      	strh	r3, [r7, #18]
    if (oversize > 0) {
 8033132:	8a7b      	ldrh	r3, [r7, #18]
 8033134:	2b00      	cmp	r3, #0
 8033136:	d026      	beq.n	8033186 <tcp_write+0x182>
      LWIP_ASSERT("inconsistent oversize vs. space", oversize <= space);
 8033138:	8a7b      	ldrh	r3, [r7, #18]
 803313a:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 803313c:	429a      	cmp	r2, r3
 803313e:	d206      	bcs.n	803314e <tcp_write+0x14a>
 8033140:	4b67      	ldr	r3, [pc, #412]	; (80332e0 <tcp_write+0x2dc>)
 8033142:	f44f 72fc 	mov.w	r2, #504	; 0x1f8
 8033146:	496b      	ldr	r1, [pc, #428]	; (80332f4 <tcp_write+0x2f0>)
 8033148:	4867      	ldr	r0, [pc, #412]	; (80332e8 <tcp_write+0x2e4>)
 803314a:	f005 ff8d 	bl	8039068 <iprintf>
      seg = last_unsent;
 803314e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8033150:	64fb      	str	r3, [r7, #76]	; 0x4c
      oversize_used = LWIP_MIN(space, LWIP_MIN(oversize, len));
 8033152:	8a7b      	ldrh	r3, [r7, #18]
 8033154:	88fa      	ldrh	r2, [r7, #6]
 8033156:	4293      	cmp	r3, r2
 8033158:	bf28      	it	cs
 803315a:	4613      	movcs	r3, r2
 803315c:	b29b      	uxth	r3, r3
 803315e:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8033160:	4293      	cmp	r3, r2
 8033162:	bf28      	it	cs
 8033164:	4613      	movcs	r3, r2
 8033166:	87fb      	strh	r3, [r7, #62]	; 0x3e
      pos += oversize_used;
 8033168:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 803316c:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 803316e:	4413      	add	r3, r2
 8033170:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
      oversize -= oversize_used;
 8033174:	8a7a      	ldrh	r2, [r7, #18]
 8033176:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8033178:	1ad3      	subs	r3, r2, r3
 803317a:	b29b      	uxth	r3, r3
 803317c:	827b      	strh	r3, [r7, #18]
      space -= oversize_used;
 803317e:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8033180:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8033182:	1ad3      	subs	r3, r2, r3
 8033184:	877b      	strh	r3, [r7, #58]	; 0x3a
    }
    /* now we are either finished or oversize is zero */
    LWIP_ASSERT("inconsistent oversize vs. len", (oversize == 0) || (pos == len));
 8033186:	8a7b      	ldrh	r3, [r7, #18]
 8033188:	2b00      	cmp	r3, #0
 803318a:	d00b      	beq.n	80331a4 <tcp_write+0x1a0>
 803318c:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8033190:	88fb      	ldrh	r3, [r7, #6]
 8033192:	429a      	cmp	r2, r3
 8033194:	d006      	beq.n	80331a4 <tcp_write+0x1a0>
 8033196:	4b52      	ldr	r3, [pc, #328]	; (80332e0 <tcp_write+0x2dc>)
 8033198:	f44f 7200 	mov.w	r2, #512	; 0x200
 803319c:	4956      	ldr	r1, [pc, #344]	; (80332f8 <tcp_write+0x2f4>)
 803319e:	4852      	ldr	r0, [pc, #328]	; (80332e8 <tcp_write+0x2e4>)
 80331a0:	f005 ff62 	bl	8039068 <iprintf>
     *
     * This phase is skipped for LWIP_NETIF_TX_SINGLE_PBUF as we could only execute
     * it after rexmit puts a segment from unacked to unsent and at this point,
     * oversize info is lost.
     */
    if ((pos < len) && (space > 0) && (last_unsent->len > 0)) {
 80331a4:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 80331a8:	88fb      	ldrh	r3, [r7, #6]
 80331aa:	429a      	cmp	r2, r3
 80331ac:	f080 8167 	bcs.w	803347e <tcp_write+0x47a>
 80331b0:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 80331b2:	2b00      	cmp	r3, #0
 80331b4:	f000 8163 	beq.w	803347e <tcp_write+0x47a>
 80331b8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80331ba:	891b      	ldrh	r3, [r3, #8]
 80331bc:	2b00      	cmp	r3, #0
 80331be:	f000 815e 	beq.w	803347e <tcp_write+0x47a>
      u16_t seglen = LWIP_MIN(space, len - pos);
 80331c2:	88fa      	ldrh	r2, [r7, #6]
 80331c4:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80331c8:	1ad2      	subs	r2, r2, r3
 80331ca:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 80331cc:	4293      	cmp	r3, r2
 80331ce:	bfa8      	it	ge
 80331d0:	4613      	movge	r3, r2
 80331d2:	83fb      	strh	r3, [r7, #30]
      seg = last_unsent;
 80331d4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80331d6:	64fb      	str	r3, [r7, #76]	; 0x4c

      /* Create a pbuf with a copy or reference to seglen bytes. We
       * can use PBUF_RAW here since the data appears in the middle of
       * a segment. A header will never be prepended. */
      if (apiflags & TCP_WRITE_FLAG_COPY) {
 80331d8:	797b      	ldrb	r3, [r7, #5]
 80331da:	f003 0301 	and.w	r3, r3, #1
 80331de:	2b00      	cmp	r3, #0
 80331e0:	d027      	beq.n	8033232 <tcp_write+0x22e>
        /* Data is copied */
        if ((concat_p = tcp_pbuf_prealloc(PBUF_RAW, seglen, space, &oversize, pcb, apiflags, 1)) == NULL) {
 80331e2:	f107 0012 	add.w	r0, r7, #18
 80331e6:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 80331e8:	8bf9      	ldrh	r1, [r7, #30]
 80331ea:	2301      	movs	r3, #1
 80331ec:	9302      	str	r3, [sp, #8]
 80331ee:	797b      	ldrb	r3, [r7, #5]
 80331f0:	9301      	str	r3, [sp, #4]
 80331f2:	68fb      	ldr	r3, [r7, #12]
 80331f4:	9300      	str	r3, [sp, #0]
 80331f6:	4603      	mov	r3, r0
 80331f8:	2000      	movs	r0, #0
 80331fa:	f7ff fe05 	bl	8032e08 <tcp_pbuf_prealloc>
 80331fe:	6578      	str	r0, [r7, #84]	; 0x54
 8033200:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8033202:	2b00      	cmp	r3, #0
 8033204:	f000 8225 	beq.w	8033652 <tcp_write+0x64e>
          goto memerr;
        }
#if TCP_OVERSIZE_DBGCHECK
        oversize_add = oversize;
#endif /* TCP_OVERSIZE_DBGCHECK */
        TCP_DATA_COPY2(concat_p->payload, (const u8_t *)arg + pos, seglen, &concat_chksum, &concat_chksum_swapped);
 8033208:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 803320a:	6858      	ldr	r0, [r3, #4]
 803320c:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8033210:	68ba      	ldr	r2, [r7, #8]
 8033212:	4413      	add	r3, r2
 8033214:	8bfa      	ldrh	r2, [r7, #30]
 8033216:	4619      	mov	r1, r3
 8033218:	f005 fb2c 	bl	8038874 <memcpy>
#if TCP_CHECKSUM_ON_COPY
        concat_chksummed += seglen;
#endif /* TCP_CHECKSUM_ON_COPY */
        queuelen += pbuf_clen(concat_p);
 803321c:	6d78      	ldr	r0, [r7, #84]	; 0x54
 803321e:	f7fb f903 	bl	802e428 <pbuf_clen>
 8033222:	4603      	mov	r3, r0
 8033224:	461a      	mov	r2, r3
 8033226:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 803322a:	4413      	add	r3, r2
 803322c:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 8033230:	e041      	b.n	80332b6 <tcp_write+0x2b2>
      } else {
        /* Data is not copied */
        /* If the last unsent pbuf is of type PBUF_ROM, try to extend it. */
        struct pbuf *p;
        for (p = last_unsent->p; p->next != NULL; p = p->next);
 8033232:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8033234:	685b      	ldr	r3, [r3, #4]
 8033236:	637b      	str	r3, [r7, #52]	; 0x34
 8033238:	e002      	b.n	8033240 <tcp_write+0x23c>
 803323a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 803323c:	681b      	ldr	r3, [r3, #0]
 803323e:	637b      	str	r3, [r7, #52]	; 0x34
 8033240:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8033242:	681b      	ldr	r3, [r3, #0]
 8033244:	2b00      	cmp	r3, #0
 8033246:	d1f8      	bne.n	803323a <tcp_write+0x236>
        if (((p->type_internal & (PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS | PBUF_TYPE_FLAG_DATA_VOLATILE)) == 0) &&
 8033248:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 803324a:	7b1b      	ldrb	r3, [r3, #12]
 803324c:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8033250:	2b00      	cmp	r3, #0
 8033252:	d115      	bne.n	8033280 <tcp_write+0x27c>
            (const u8_t *)p->payload + p->len == (const u8_t *)arg) {
 8033254:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8033256:	685b      	ldr	r3, [r3, #4]
 8033258:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 803325a:	8952      	ldrh	r2, [r2, #10]
 803325c:	4413      	add	r3, r2
        if (((p->type_internal & (PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS | PBUF_TYPE_FLAG_DATA_VOLATILE)) == 0) &&
 803325e:	68ba      	ldr	r2, [r7, #8]
 8033260:	429a      	cmp	r2, r3
 8033262:	d10d      	bne.n	8033280 <tcp_write+0x27c>
          LWIP_ASSERT("tcp_write: ROM pbufs cannot be oversized", pos == 0);
 8033264:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8033268:	2b00      	cmp	r3, #0
 803326a:	d006      	beq.n	803327a <tcp_write+0x276>
 803326c:	4b1c      	ldr	r3, [pc, #112]	; (80332e0 <tcp_write+0x2dc>)
 803326e:	f240 2231 	movw	r2, #561	; 0x231
 8033272:	4922      	ldr	r1, [pc, #136]	; (80332fc <tcp_write+0x2f8>)
 8033274:	481c      	ldr	r0, [pc, #112]	; (80332e8 <tcp_write+0x2e4>)
 8033276:	f005 fef7 	bl	8039068 <iprintf>
          extendlen = seglen;
 803327a:	8bfb      	ldrh	r3, [r7, #30]
 803327c:	87bb      	strh	r3, [r7, #60]	; 0x3c
 803327e:	e01a      	b.n	80332b6 <tcp_write+0x2b2>
        } else {
          if ((concat_p = pbuf_alloc(PBUF_RAW, seglen, PBUF_ROM)) == NULL) {
 8033280:	8bfb      	ldrh	r3, [r7, #30]
 8033282:	2201      	movs	r2, #1
 8033284:	4619      	mov	r1, r3
 8033286:	2000      	movs	r0, #0
 8033288:	f7fa fd2a 	bl	802dce0 <pbuf_alloc>
 803328c:	6578      	str	r0, [r7, #84]	; 0x54
 803328e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8033290:	2b00      	cmp	r3, #0
 8033292:	f000 81e0 	beq.w	8033656 <tcp_write+0x652>
            LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                        ("tcp_write: could not allocate memory for zero-copy pbuf\n"));
            goto memerr;
          }
          /* reference the non-volatile payload data */
          ((struct pbuf_rom *)concat_p)->payload = (const u8_t *)arg + pos;
 8033296:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 803329a:	68ba      	ldr	r2, [r7, #8]
 803329c:	441a      	add	r2, r3
 803329e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80332a0:	605a      	str	r2, [r3, #4]
          queuelen += pbuf_clen(concat_p);
 80332a2:	6d78      	ldr	r0, [r7, #84]	; 0x54
 80332a4:	f7fb f8c0 	bl	802e428 <pbuf_clen>
 80332a8:	4603      	mov	r3, r0
 80332aa:	461a      	mov	r2, r3
 80332ac:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80332b0:	4413      	add	r3, r2
 80332b2:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
                           &concat_chksum, &concat_chksum_swapped);
        concat_chksummed += seglen;
#endif /* TCP_CHECKSUM_ON_COPY */
      }

      pos += seglen;
 80332b6:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 80332ba:	8bfb      	ldrh	r3, [r7, #30]
 80332bc:	4413      	add	r3, r2
 80332be:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 80332c2:	e0dc      	b.n	803347e <tcp_write+0x47a>
    }
#endif /* !LWIP_NETIF_TX_SINGLE_PBUF */
  } else {
#if TCP_OVERSIZE
    LWIP_ASSERT("unsent_oversize mismatch (pcb->unsent is NULL)",
 80332c4:	68fb      	ldr	r3, [r7, #12]
 80332c6:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 80332ca:	2b00      	cmp	r3, #0
 80332cc:	f000 80d7 	beq.w	803347e <tcp_write+0x47a>
 80332d0:	4b03      	ldr	r3, [pc, #12]	; (80332e0 <tcp_write+0x2dc>)
 80332d2:	f240 224a 	movw	r2, #586	; 0x24a
 80332d6:	490a      	ldr	r1, [pc, #40]	; (8033300 <tcp_write+0x2fc>)
 80332d8:	4803      	ldr	r0, [pc, #12]	; (80332e8 <tcp_write+0x2e4>)
 80332da:	f005 fec5 	bl	8039068 <iprintf>
   * Phase 3: Create new segments.
   *
   * The new segments are chained together in the local 'queue'
   * variable, ready to be appended to pcb->unsent.
   */
  while (pos < len) {
 80332de:	e0ce      	b.n	803347e <tcp_write+0x47a>
 80332e0:	0803c128 	.word	0x0803c128
 80332e4:	0803c2c8 	.word	0x0803c2c8
 80332e8:	0803c17c 	.word	0x0803c17c
 80332ec:	0803c2e0 	.word	0x0803c2e0
 80332f0:	0803c314 	.word	0x0803c314
 80332f4:	0803c32c 	.word	0x0803c32c
 80332f8:	0803c34c 	.word	0x0803c34c
 80332fc:	0803c36c 	.word	0x0803c36c
 8033300:	0803c398 	.word	0x0803c398
    struct pbuf *p;
    u16_t left = len - pos;
 8033304:	88fa      	ldrh	r2, [r7, #6]
 8033306:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 803330a:	1ad3      	subs	r3, r2, r3
 803330c:	83bb      	strh	r3, [r7, #28]
    u16_t max_len = mss_local - optlen;
 803330e:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8033312:	b29b      	uxth	r3, r3
 8033314:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8033316:	1ad3      	subs	r3, r2, r3
 8033318:	837b      	strh	r3, [r7, #26]
    u16_t seglen = LWIP_MIN(left, max_len);
 803331a:	8b7a      	ldrh	r2, [r7, #26]
 803331c:	8bbb      	ldrh	r3, [r7, #28]
 803331e:	4293      	cmp	r3, r2
 8033320:	bf28      	it	cs
 8033322:	4613      	movcs	r3, r2
 8033324:	833b      	strh	r3, [r7, #24]
#if TCP_CHECKSUM_ON_COPY
    u16_t chksum = 0;
    u8_t chksum_swapped = 0;
#endif /* TCP_CHECKSUM_ON_COPY */

    if (apiflags & TCP_WRITE_FLAG_COPY) {
 8033326:	797b      	ldrb	r3, [r7, #5]
 8033328:	f003 0301 	and.w	r3, r3, #1
 803332c:	2b00      	cmp	r3, #0
 803332e:	d036      	beq.n	803339e <tcp_write+0x39a>
      /* If copy is set, memory should be allocated and data copied
       * into pbuf */
      if ((p = tcp_pbuf_prealloc(PBUF_TRANSPORT, seglen + optlen, mss_local, &oversize, pcb, apiflags, queue == NULL)) == NULL) {
 8033330:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8033334:	b29a      	uxth	r2, r3
 8033336:	8b3b      	ldrh	r3, [r7, #24]
 8033338:	4413      	add	r3, r2
 803333a:	b299      	uxth	r1, r3
 803333c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 803333e:	2b00      	cmp	r3, #0
 8033340:	bf0c      	ite	eq
 8033342:	2301      	moveq	r3, #1
 8033344:	2300      	movne	r3, #0
 8033346:	b2db      	uxtb	r3, r3
 8033348:	f107 0012 	add.w	r0, r7, #18
 803334c:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 803334e:	9302      	str	r3, [sp, #8]
 8033350:	797b      	ldrb	r3, [r7, #5]
 8033352:	9301      	str	r3, [sp, #4]
 8033354:	68fb      	ldr	r3, [r7, #12]
 8033356:	9300      	str	r3, [sp, #0]
 8033358:	4603      	mov	r3, r0
 803335a:	2036      	movs	r0, #54	; 0x36
 803335c:	f7ff fd54 	bl	8032e08 <tcp_pbuf_prealloc>
 8033360:	6338      	str	r0, [r7, #48]	; 0x30
 8033362:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8033364:	2b00      	cmp	r3, #0
 8033366:	f000 8178 	beq.w	803365a <tcp_write+0x656>
        LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write : could not allocate memory for pbuf copy size %"U16_F"\n", seglen));
        goto memerr;
      }
      LWIP_ASSERT("tcp_write: check that first pbuf can hold the complete seglen",
 803336a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 803336c:	895b      	ldrh	r3, [r3, #10]
 803336e:	8b3a      	ldrh	r2, [r7, #24]
 8033370:	429a      	cmp	r2, r3
 8033372:	d906      	bls.n	8033382 <tcp_write+0x37e>
 8033374:	4b8c      	ldr	r3, [pc, #560]	; (80335a8 <tcp_write+0x5a4>)
 8033376:	f240 2266 	movw	r2, #614	; 0x266
 803337a:	498c      	ldr	r1, [pc, #560]	; (80335ac <tcp_write+0x5a8>)
 803337c:	488c      	ldr	r0, [pc, #560]	; (80335b0 <tcp_write+0x5ac>)
 803337e:	f005 fe73 	bl	8039068 <iprintf>
                  (p->len >= seglen));
      TCP_DATA_COPY2((char *)p->payload + optlen, (const u8_t *)arg + pos, seglen, &chksum, &chksum_swapped);
 8033382:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8033384:	685a      	ldr	r2, [r3, #4]
 8033386:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 803338a:	18d0      	adds	r0, r2, r3
 803338c:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8033390:	68ba      	ldr	r2, [r7, #8]
 8033392:	4413      	add	r3, r2
 8033394:	8b3a      	ldrh	r2, [r7, #24]
 8033396:	4619      	mov	r1, r3
 8033398:	f005 fa6c 	bl	8038874 <memcpy>
 803339c:	e02f      	b.n	80333fe <tcp_write+0x3fa>
       * sent out on the link (as it has to be ACKed by the remote
       * party) we can safely use PBUF_ROM instead of PBUF_REF here.
       */
      struct pbuf *p2;
#if TCP_OVERSIZE
      LWIP_ASSERT("oversize == 0", oversize == 0);
 803339e:	8a7b      	ldrh	r3, [r7, #18]
 80333a0:	2b00      	cmp	r3, #0
 80333a2:	d006      	beq.n	80333b2 <tcp_write+0x3ae>
 80333a4:	4b80      	ldr	r3, [pc, #512]	; (80335a8 <tcp_write+0x5a4>)
 80333a6:	f240 2271 	movw	r2, #625	; 0x271
 80333aa:	4982      	ldr	r1, [pc, #520]	; (80335b4 <tcp_write+0x5b0>)
 80333ac:	4880      	ldr	r0, [pc, #512]	; (80335b0 <tcp_write+0x5ac>)
 80333ae:	f005 fe5b 	bl	8039068 <iprintf>
#endif /* TCP_OVERSIZE */
      if ((p2 = pbuf_alloc(PBUF_TRANSPORT, seglen, PBUF_ROM)) == NULL) {
 80333b2:	8b3b      	ldrh	r3, [r7, #24]
 80333b4:	2201      	movs	r2, #1
 80333b6:	4619      	mov	r1, r3
 80333b8:	2036      	movs	r0, #54	; 0x36
 80333ba:	f7fa fc91 	bl	802dce0 <pbuf_alloc>
 80333be:	6178      	str	r0, [r7, #20]
 80333c0:	697b      	ldr	r3, [r7, #20]
 80333c2:	2b00      	cmp	r3, #0
 80333c4:	f000 814b 	beq.w	803365e <tcp_write+0x65a>
        chksum_swapped = 1;
        chksum = SWAP_BYTES_IN_WORD(chksum);
      }
#endif /* TCP_CHECKSUM_ON_COPY */
      /* reference the non-volatile payload data */
      ((struct pbuf_rom *)p2)->payload = (const u8_t *)arg + pos;
 80333c8:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80333cc:	68ba      	ldr	r2, [r7, #8]
 80333ce:	441a      	add	r2, r3
 80333d0:	697b      	ldr	r3, [r7, #20]
 80333d2:	605a      	str	r2, [r3, #4]

      /* Second, allocate a pbuf for the headers. */
      if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 80333d4:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 80333d8:	b29b      	uxth	r3, r3
 80333da:	f44f 7220 	mov.w	r2, #640	; 0x280
 80333de:	4619      	mov	r1, r3
 80333e0:	2036      	movs	r0, #54	; 0x36
 80333e2:	f7fa fc7d 	bl	802dce0 <pbuf_alloc>
 80333e6:	6338      	str	r0, [r7, #48]	; 0x30
 80333e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80333ea:	2b00      	cmp	r3, #0
 80333ec:	d103      	bne.n	80333f6 <tcp_write+0x3f2>
        /* If allocation fails, we have to deallocate the data pbuf as
         * well. */
        pbuf_free(p2);
 80333ee:	6978      	ldr	r0, [r7, #20]
 80333f0:	f7fa ff8c 	bl	802e30c <pbuf_free>
        LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write: could not allocate memory for header pbuf\n"));
        goto memerr;
 80333f4:	e136      	b.n	8033664 <tcp_write+0x660>
      }
      /* Concatenate the headers and data pbufs together. */
      pbuf_cat(p/*header*/, p2/*data*/);
 80333f6:	6979      	ldr	r1, [r7, #20]
 80333f8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80333fa:	f7fb f855 	bl	802e4a8 <pbuf_cat>
    }

    queuelen += pbuf_clen(p);
 80333fe:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8033400:	f7fb f812 	bl	802e428 <pbuf_clen>
 8033404:	4603      	mov	r3, r0
 8033406:	461a      	mov	r2, r3
 8033408:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 803340c:	4413      	add	r3, r2
 803340e:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40

    /* Now that there are more segments queued, we check again if the
     * length of the queue exceeds the configured maximum or
     * overflows. */
    if (queuelen > LWIP_MIN(TCP_SND_QUEUELEN, TCP_SNDQUEUELEN_OVERFLOW)) {
 8033412:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8033416:	2b09      	cmp	r3, #9
 8033418:	d903      	bls.n	8033422 <tcp_write+0x41e>
      LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write: queue too long %"U16_F" (%d)\n",
                  queuelen, (int)TCP_SND_QUEUELEN));
      pbuf_free(p);
 803341a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 803341c:	f7fa ff76 	bl	802e30c <pbuf_free>
      goto memerr;
 8033420:	e120      	b.n	8033664 <tcp_write+0x660>
    }

    if ((seg = tcp_create_segment(pcb, p, 0, pcb->snd_lbb + pos, optflags)) == NULL) {
 8033422:	68fb      	ldr	r3, [r7, #12]
 8033424:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8033426:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 803342a:	441a      	add	r2, r3
 803342c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8033430:	9300      	str	r3, [sp, #0]
 8033432:	4613      	mov	r3, r2
 8033434:	2200      	movs	r2, #0
 8033436:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8033438:	68f8      	ldr	r0, [r7, #12]
 803343a:	f7ff fc3d 	bl	8032cb8 <tcp_create_segment>
 803343e:	64f8      	str	r0, [r7, #76]	; 0x4c
 8033440:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8033442:	2b00      	cmp	r3, #0
 8033444:	f000 810d 	beq.w	8033662 <tcp_write+0x65e>
    seg->chksum_swapped = chksum_swapped;
    seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

    /* first segment of to-be-queued data? */
    if (queue == NULL) {
 8033448:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 803344a:	2b00      	cmp	r3, #0
 803344c:	d102      	bne.n	8033454 <tcp_write+0x450>
      queue = seg;
 803344e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8033450:	647b      	str	r3, [r7, #68]	; 0x44
 8033452:	e00c      	b.n	803346e <tcp_write+0x46a>
    } else {
      /* Attach the segment to the end of the queued segments */
      LWIP_ASSERT("prev_seg != NULL", prev_seg != NULL);
 8033454:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8033456:	2b00      	cmp	r3, #0
 8033458:	d106      	bne.n	8033468 <tcp_write+0x464>
 803345a:	4b53      	ldr	r3, [pc, #332]	; (80335a8 <tcp_write+0x5a4>)
 803345c:	f240 22ab 	movw	r2, #683	; 0x2ab
 8033460:	4955      	ldr	r1, [pc, #340]	; (80335b8 <tcp_write+0x5b4>)
 8033462:	4853      	ldr	r0, [pc, #332]	; (80335b0 <tcp_write+0x5ac>)
 8033464:	f005 fe00 	bl	8039068 <iprintf>
      prev_seg->next = seg;
 8033468:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 803346a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 803346c:	601a      	str	r2, [r3, #0]
    }
    /* remember last segment of to-be-queued data for next iteration */
    prev_seg = seg;
 803346e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8033470:	64bb      	str	r3, [r7, #72]	; 0x48

    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_TRACE, ("tcp_write: queueing %"U32_F":%"U32_F"\n",
                lwip_ntohl(seg->tcphdr->seqno),
                lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg)));

    pos += seglen;
 8033472:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8033476:	8b3b      	ldrh	r3, [r7, #24]
 8033478:	4413      	add	r3, r2
 803347a:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
  while (pos < len) {
 803347e:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8033482:	88fb      	ldrh	r3, [r7, #6]
 8033484:	429a      	cmp	r2, r3
 8033486:	f4ff af3d 	bcc.w	8033304 <tcp_write+0x300>
  /*
   * Phase 1: If data has been added to the preallocated tail of
   * last_unsent, we update the length fields of the pbuf chain.
   */
#if TCP_OVERSIZE
  if (oversize_used > 0) {
 803348a:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 803348c:	2b00      	cmp	r3, #0
 803348e:	d02c      	beq.n	80334ea <tcp_write+0x4e6>
    struct pbuf *p;
    /* Bump tot_len of whole chain, len of tail */
    for (p = last_unsent->p; p; p = p->next) {
 8033490:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8033492:	685b      	ldr	r3, [r3, #4]
 8033494:	62fb      	str	r3, [r7, #44]	; 0x2c
 8033496:	e01e      	b.n	80334d6 <tcp_write+0x4d2>
      p->tot_len += oversize_used;
 8033498:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 803349a:	891a      	ldrh	r2, [r3, #8]
 803349c:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 803349e:	4413      	add	r3, r2
 80334a0:	b29a      	uxth	r2, r3
 80334a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80334a4:	811a      	strh	r2, [r3, #8]
      if (p->next == NULL) {
 80334a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80334a8:	681b      	ldr	r3, [r3, #0]
 80334aa:	2b00      	cmp	r3, #0
 80334ac:	d110      	bne.n	80334d0 <tcp_write+0x4cc>
        TCP_DATA_COPY((char *)p->payload + p->len, arg, oversize_used, last_unsent);
 80334ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80334b0:	685b      	ldr	r3, [r3, #4]
 80334b2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80334b4:	8952      	ldrh	r2, [r2, #10]
 80334b6:	4413      	add	r3, r2
 80334b8:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 80334ba:	68b9      	ldr	r1, [r7, #8]
 80334bc:	4618      	mov	r0, r3
 80334be:	f005 f9d9 	bl	8038874 <memcpy>
        p->len += oversize_used;
 80334c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80334c4:	895a      	ldrh	r2, [r3, #10]
 80334c6:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80334c8:	4413      	add	r3, r2
 80334ca:	b29a      	uxth	r2, r3
 80334cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80334ce:	815a      	strh	r2, [r3, #10]
    for (p = last_unsent->p; p; p = p->next) {
 80334d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80334d2:	681b      	ldr	r3, [r3, #0]
 80334d4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80334d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80334d8:	2b00      	cmp	r3, #0
 80334da:	d1dd      	bne.n	8033498 <tcp_write+0x494>
      }
    }
    last_unsent->len += oversize_used;
 80334dc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80334de:	891a      	ldrh	r2, [r3, #8]
 80334e0:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80334e2:	4413      	add	r3, r2
 80334e4:	b29a      	uxth	r2, r3
 80334e6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80334e8:	811a      	strh	r2, [r3, #8]
    LWIP_ASSERT("last_unsent->oversize_left >= oversize_used",
                last_unsent->oversize_left >= oversize_used);
    last_unsent->oversize_left -= oversize_used;
#endif /* TCP_OVERSIZE_DBGCHECK */
  }
  pcb->unsent_oversize = oversize;
 80334ea:	8a7a      	ldrh	r2, [r7, #18]
 80334ec:	68fb      	ldr	r3, [r7, #12]
 80334ee:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /*
   * Phase 2: concat_p can be concatenated onto last_unsent->p, unless we
   * determined that the last ROM pbuf can be extended to include the new data.
   */
  if (concat_p != NULL) {
 80334f2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80334f4:	2b00      	cmp	r3, #0
 80334f6:	d018      	beq.n	803352a <tcp_write+0x526>
    LWIP_ASSERT("tcp_write: cannot concatenate when pcb->unsent is empty",
 80334f8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80334fa:	2b00      	cmp	r3, #0
 80334fc:	d106      	bne.n	803350c <tcp_write+0x508>
 80334fe:	4b2a      	ldr	r3, [pc, #168]	; (80335a8 <tcp_write+0x5a4>)
 8033500:	f44f 7238 	mov.w	r2, #736	; 0x2e0
 8033504:	492d      	ldr	r1, [pc, #180]	; (80335bc <tcp_write+0x5b8>)
 8033506:	482a      	ldr	r0, [pc, #168]	; (80335b0 <tcp_write+0x5ac>)
 8033508:	f005 fdae 	bl	8039068 <iprintf>
                (last_unsent != NULL));
    pbuf_cat(last_unsent->p, concat_p);
 803350c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 803350e:	685b      	ldr	r3, [r3, #4]
 8033510:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8033512:	4618      	mov	r0, r3
 8033514:	f7fa ffc8 	bl	802e4a8 <pbuf_cat>
    last_unsent->len += concat_p->tot_len;
 8033518:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 803351a:	891a      	ldrh	r2, [r3, #8]
 803351c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 803351e:	891b      	ldrh	r3, [r3, #8]
 8033520:	4413      	add	r3, r2
 8033522:	b29a      	uxth	r2, r3
 8033524:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8033526:	811a      	strh	r2, [r3, #8]
 8033528:	e037      	b.n	803359a <tcp_write+0x596>
  } else if (extendlen > 0) {
 803352a:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 803352c:	2b00      	cmp	r3, #0
 803352e:	d034      	beq.n	803359a <tcp_write+0x596>
    struct pbuf *p;
    LWIP_ASSERT("tcp_write: extension of reference requires reference",
 8033530:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8033532:	2b00      	cmp	r3, #0
 8033534:	d003      	beq.n	803353e <tcp_write+0x53a>
 8033536:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8033538:	685b      	ldr	r3, [r3, #4]
 803353a:	2b00      	cmp	r3, #0
 803353c:	d106      	bne.n	803354c <tcp_write+0x548>
 803353e:	4b1a      	ldr	r3, [pc, #104]	; (80335a8 <tcp_write+0x5a4>)
 8033540:	f240 22e6 	movw	r2, #742	; 0x2e6
 8033544:	491e      	ldr	r1, [pc, #120]	; (80335c0 <tcp_write+0x5bc>)
 8033546:	481a      	ldr	r0, [pc, #104]	; (80335b0 <tcp_write+0x5ac>)
 8033548:	f005 fd8e 	bl	8039068 <iprintf>
                last_unsent != NULL && last_unsent->p != NULL);
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 803354c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 803354e:	685b      	ldr	r3, [r3, #4]
 8033550:	62bb      	str	r3, [r7, #40]	; 0x28
 8033552:	e009      	b.n	8033568 <tcp_write+0x564>
      p->tot_len += extendlen;
 8033554:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8033556:	891a      	ldrh	r2, [r3, #8]
 8033558:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 803355a:	4413      	add	r3, r2
 803355c:	b29a      	uxth	r2, r3
 803355e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8033560:	811a      	strh	r2, [r3, #8]
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 8033562:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8033564:	681b      	ldr	r3, [r3, #0]
 8033566:	62bb      	str	r3, [r7, #40]	; 0x28
 8033568:	6abb      	ldr	r3, [r7, #40]	; 0x28
 803356a:	681b      	ldr	r3, [r3, #0]
 803356c:	2b00      	cmp	r3, #0
 803356e:	d1f1      	bne.n	8033554 <tcp_write+0x550>
    }
    p->tot_len += extendlen;
 8033570:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8033572:	891a      	ldrh	r2, [r3, #8]
 8033574:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8033576:	4413      	add	r3, r2
 8033578:	b29a      	uxth	r2, r3
 803357a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 803357c:	811a      	strh	r2, [r3, #8]
    p->len += extendlen;
 803357e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8033580:	895a      	ldrh	r2, [r3, #10]
 8033582:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8033584:	4413      	add	r3, r2
 8033586:	b29a      	uxth	r2, r3
 8033588:	6abb      	ldr	r3, [r7, #40]	; 0x28
 803358a:	815a      	strh	r2, [r3, #10]
    last_unsent->len += extendlen;
 803358c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 803358e:	891a      	ldrh	r2, [r3, #8]
 8033590:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8033592:	4413      	add	r3, r2
 8033594:	b29a      	uxth	r2, r3
 8033596:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8033598:	811a      	strh	r2, [r3, #8]

  /*
   * Phase 3: Append queue to pcb->unsent. Queue may be NULL, but that
   * is harmless
   */
  if (last_unsent == NULL) {
 803359a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 803359c:	2b00      	cmp	r3, #0
 803359e:	d111      	bne.n	80335c4 <tcp_write+0x5c0>
    pcb->unsent = queue;
 80335a0:	68fb      	ldr	r3, [r7, #12]
 80335a2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80335a4:	66da      	str	r2, [r3, #108]	; 0x6c
 80335a6:	e010      	b.n	80335ca <tcp_write+0x5c6>
 80335a8:	0803c128 	.word	0x0803c128
 80335ac:	0803c3c8 	.word	0x0803c3c8
 80335b0:	0803c17c 	.word	0x0803c17c
 80335b4:	0803c408 	.word	0x0803c408
 80335b8:	0803c418 	.word	0x0803c418
 80335bc:	0803c42c 	.word	0x0803c42c
 80335c0:	0803c464 	.word	0x0803c464
  } else {
    last_unsent->next = queue;
 80335c4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80335c6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80335c8:	601a      	str	r2, [r3, #0]
  }

  /*
   * Finally update the pcb state.
   */
  pcb->snd_lbb += len;
 80335ca:	68fb      	ldr	r3, [r7, #12]
 80335cc:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80335ce:	88fb      	ldrh	r3, [r7, #6]
 80335d0:	441a      	add	r2, r3
 80335d2:	68fb      	ldr	r3, [r7, #12]
 80335d4:	65da      	str	r2, [r3, #92]	; 0x5c
  pcb->snd_buf -= len;
 80335d6:	68fb      	ldr	r3, [r7, #12]
 80335d8:	f8b3 2064 	ldrh.w	r2, [r3, #100]	; 0x64
 80335dc:	88fb      	ldrh	r3, [r7, #6]
 80335de:	1ad3      	subs	r3, r2, r3
 80335e0:	b29a      	uxth	r2, r3
 80335e2:	68fb      	ldr	r3, [r7, #12]
 80335e4:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
  pcb->snd_queuelen = queuelen;
 80335e8:	68fb      	ldr	r3, [r7, #12]
 80335ea:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 80335ee:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_write: %"S16_F" (after enqueued)\n",
                               pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 80335f2:	68fb      	ldr	r3, [r7, #12]
 80335f4:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 80335f8:	2b00      	cmp	r3, #0
 80335fa:	d00e      	beq.n	803361a <tcp_write+0x616>
    LWIP_ASSERT("tcp_write: valid queue length",
 80335fc:	68fb      	ldr	r3, [r7, #12]
 80335fe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8033600:	2b00      	cmp	r3, #0
 8033602:	d10a      	bne.n	803361a <tcp_write+0x616>
 8033604:	68fb      	ldr	r3, [r7, #12]
 8033606:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8033608:	2b00      	cmp	r3, #0
 803360a:	d106      	bne.n	803361a <tcp_write+0x616>
 803360c:	4b30      	ldr	r3, [pc, #192]	; (80336d0 <tcp_write+0x6cc>)
 803360e:	f240 3212 	movw	r2, #786	; 0x312
 8033612:	4930      	ldr	r1, [pc, #192]	; (80336d4 <tcp_write+0x6d0>)
 8033614:	4830      	ldr	r0, [pc, #192]	; (80336d8 <tcp_write+0x6d4>)
 8033616:	f005 fd27 	bl	8039068 <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  /* Set the PSH flag in the last segment that we enqueued. */
  if (seg != NULL && seg->tcphdr != NULL && ((apiflags & TCP_WRITE_FLAG_MORE) == 0)) {
 803361a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 803361c:	2b00      	cmp	r3, #0
 803361e:	d016      	beq.n	803364e <tcp_write+0x64a>
 8033620:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8033622:	68db      	ldr	r3, [r3, #12]
 8033624:	2b00      	cmp	r3, #0
 8033626:	d012      	beq.n	803364e <tcp_write+0x64a>
 8033628:	797b      	ldrb	r3, [r7, #5]
 803362a:	f003 0302 	and.w	r3, r3, #2
 803362e:	2b00      	cmp	r3, #0
 8033630:	d10d      	bne.n	803364e <tcp_write+0x64a>
    TCPH_SET_FLAG(seg->tcphdr, TCP_PSH);
 8033632:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8033634:	68db      	ldr	r3, [r3, #12]
 8033636:	899b      	ldrh	r3, [r3, #12]
 8033638:	b29c      	uxth	r4, r3
 803363a:	2008      	movs	r0, #8
 803363c:	f7f9 f972 	bl	802c924 <lwip_htons>
 8033640:	4603      	mov	r3, r0
 8033642:	461a      	mov	r2, r3
 8033644:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8033646:	68db      	ldr	r3, [r3, #12]
 8033648:	4322      	orrs	r2, r4
 803364a:	b292      	uxth	r2, r2
 803364c:	819a      	strh	r2, [r3, #12]
  }

  return ERR_OK;
 803364e:	2300      	movs	r3, #0
 8033650:	e039      	b.n	80336c6 <tcp_write+0x6c2>
          goto memerr;
 8033652:	bf00      	nop
 8033654:	e006      	b.n	8033664 <tcp_write+0x660>
            goto memerr;
 8033656:	bf00      	nop
 8033658:	e004      	b.n	8033664 <tcp_write+0x660>
        goto memerr;
 803365a:	bf00      	nop
 803365c:	e002      	b.n	8033664 <tcp_write+0x660>
        goto memerr;
 803365e:	bf00      	nop
 8033660:	e000      	b.n	8033664 <tcp_write+0x660>
      goto memerr;
 8033662:	bf00      	nop
memerr:
  tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8033664:	68fb      	ldr	r3, [r7, #12]
 8033666:	8b5b      	ldrh	r3, [r3, #26]
 8033668:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 803366c:	b29a      	uxth	r2, r3
 803366e:	68fb      	ldr	r3, [r7, #12]
 8033670:	835a      	strh	r2, [r3, #26]
  TCP_STATS_INC(tcp.memerr);
 8033672:	4b1a      	ldr	r3, [pc, #104]	; (80336dc <tcp_write+0x6d8>)
 8033674:	f8b3 309c 	ldrh.w	r3, [r3, #156]	; 0x9c
 8033678:	3301      	adds	r3, #1
 803367a:	b29a      	uxth	r2, r3
 803367c:	4b17      	ldr	r3, [pc, #92]	; (80336dc <tcp_write+0x6d8>)
 803367e:	f8a3 209c 	strh.w	r2, [r3, #156]	; 0x9c

  if (concat_p != NULL) {
 8033682:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8033684:	2b00      	cmp	r3, #0
 8033686:	d002      	beq.n	803368e <tcp_write+0x68a>
    pbuf_free(concat_p);
 8033688:	6d78      	ldr	r0, [r7, #84]	; 0x54
 803368a:	f7fa fe3f 	bl	802e30c <pbuf_free>
  }
  if (queue != NULL) {
 803368e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8033690:	2b00      	cmp	r3, #0
 8033692:	d002      	beq.n	803369a <tcp_write+0x696>
    tcp_segs_free(queue);
 8033694:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8033696:	f7fc fabf 	bl	802fc18 <tcp_segs_free>
  }
  if (pcb->snd_queuelen != 0) {
 803369a:	68fb      	ldr	r3, [r7, #12]
 803369c:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 80336a0:	2b00      	cmp	r3, #0
 80336a2:	d00e      	beq.n	80336c2 <tcp_write+0x6be>
    LWIP_ASSERT("tcp_write: valid queue length", pcb->unacked != NULL ||
 80336a4:	68fb      	ldr	r3, [r7, #12]
 80336a6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80336a8:	2b00      	cmp	r3, #0
 80336aa:	d10a      	bne.n	80336c2 <tcp_write+0x6be>
 80336ac:	68fb      	ldr	r3, [r7, #12]
 80336ae:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80336b0:	2b00      	cmp	r3, #0
 80336b2:	d106      	bne.n	80336c2 <tcp_write+0x6be>
 80336b4:	4b06      	ldr	r3, [pc, #24]	; (80336d0 <tcp_write+0x6cc>)
 80336b6:	f240 3227 	movw	r2, #807	; 0x327
 80336ba:	4906      	ldr	r1, [pc, #24]	; (80336d4 <tcp_write+0x6d0>)
 80336bc:	4806      	ldr	r0, [pc, #24]	; (80336d8 <tcp_write+0x6d4>)
 80336be:	f005 fcd3 	bl	8039068 <iprintf>
                pcb->unsent != NULL);
  }
  LWIP_DEBUGF(TCP_QLEN_DEBUG | LWIP_DBG_STATE, ("tcp_write: %"S16_F" (with mem err)\n", pcb->snd_queuelen));
  return ERR_MEM;
 80336c2:	f04f 33ff 	mov.w	r3, #4294967295
}
 80336c6:	4618      	mov	r0, r3
 80336c8:	375c      	adds	r7, #92	; 0x5c
 80336ca:	46bd      	mov	sp, r7
 80336cc:	bd90      	pop	{r4, r7, pc}
 80336ce:	bf00      	nop
 80336d0:	0803c128 	.word	0x0803c128
 80336d4:	0803c49c 	.word	0x0803c49c
 80336d8:	0803c17c 	.word	0x0803c17c
 80336dc:	2000ee04 	.word	0x2000ee04

080336e0 <tcp_split_unsent_seg>:
 * @param pcb the tcp_pcb for which to split the unsent head
 * @param split the amount of payload to remain in the head
 */
err_t
tcp_split_unsent_seg(struct tcp_pcb *pcb, u16_t split)
{
 80336e0:	b590      	push	{r4, r7, lr}
 80336e2:	b08b      	sub	sp, #44	; 0x2c
 80336e4:	af02      	add	r7, sp, #8
 80336e6:	6078      	str	r0, [r7, #4]
 80336e8:	460b      	mov	r3, r1
 80336ea:	807b      	strh	r3, [r7, #2]
  struct tcp_seg *seg = NULL, *useg = NULL;
 80336ec:	2300      	movs	r3, #0
 80336ee:	61fb      	str	r3, [r7, #28]
 80336f0:	2300      	movs	r3, #0
 80336f2:	617b      	str	r3, [r7, #20]
  struct pbuf *p = NULL;
 80336f4:	2300      	movs	r3, #0
 80336f6:	613b      	str	r3, [r7, #16]
  u16_t chksum = 0;
  u8_t chksum_swapped = 0;
  struct pbuf *q;
#endif /* TCP_CHECKSUM_ON_COPY */

  LWIP_ASSERT("tcp_split_unsent_seg: invalid pcb", pcb != NULL);
 80336f8:	687b      	ldr	r3, [r7, #4]
 80336fa:	2b00      	cmp	r3, #0
 80336fc:	d106      	bne.n	803370c <tcp_split_unsent_seg+0x2c>
 80336fe:	4b99      	ldr	r3, [pc, #612]	; (8033964 <tcp_split_unsent_seg+0x284>)
 8033700:	f240 324b 	movw	r2, #843	; 0x34b
 8033704:	4998      	ldr	r1, [pc, #608]	; (8033968 <tcp_split_unsent_seg+0x288>)
 8033706:	4899      	ldr	r0, [pc, #612]	; (803396c <tcp_split_unsent_seg+0x28c>)
 8033708:	f005 fcae 	bl	8039068 <iprintf>

  useg = pcb->unsent;
 803370c:	687b      	ldr	r3, [r7, #4]
 803370e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8033710:	617b      	str	r3, [r7, #20]
  if (useg == NULL) {
 8033712:	697b      	ldr	r3, [r7, #20]
 8033714:	2b00      	cmp	r3, #0
 8033716:	d102      	bne.n	803371e <tcp_split_unsent_seg+0x3e>
    return ERR_MEM;
 8033718:	f04f 33ff 	mov.w	r3, #4294967295
 803371c:	e11e      	b.n	803395c <tcp_split_unsent_seg+0x27c>
  }

  if (split == 0) {
 803371e:	887b      	ldrh	r3, [r7, #2]
 8033720:	2b00      	cmp	r3, #0
 8033722:	d109      	bne.n	8033738 <tcp_split_unsent_seg+0x58>
    LWIP_ASSERT("Can't split segment into length 0", 0);
 8033724:	4b8f      	ldr	r3, [pc, #572]	; (8033964 <tcp_split_unsent_seg+0x284>)
 8033726:	f240 3253 	movw	r2, #851	; 0x353
 803372a:	4991      	ldr	r1, [pc, #580]	; (8033970 <tcp_split_unsent_seg+0x290>)
 803372c:	488f      	ldr	r0, [pc, #572]	; (803396c <tcp_split_unsent_seg+0x28c>)
 803372e:	f005 fc9b 	bl	8039068 <iprintf>
    return ERR_VAL;
 8033732:	f06f 0305 	mvn.w	r3, #5
 8033736:	e111      	b.n	803395c <tcp_split_unsent_seg+0x27c>
  }

  if (useg->len <= split) {
 8033738:	697b      	ldr	r3, [r7, #20]
 803373a:	891b      	ldrh	r3, [r3, #8]
 803373c:	887a      	ldrh	r2, [r7, #2]
 803373e:	429a      	cmp	r2, r3
 8033740:	d301      	bcc.n	8033746 <tcp_split_unsent_seg+0x66>
    return ERR_OK;
 8033742:	2300      	movs	r3, #0
 8033744:	e10a      	b.n	803395c <tcp_split_unsent_seg+0x27c>
  }

  LWIP_ASSERT("split <= mss", split <= pcb->mss);
 8033746:	687b      	ldr	r3, [r7, #4]
 8033748:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 803374a:	887a      	ldrh	r2, [r7, #2]
 803374c:	429a      	cmp	r2, r3
 803374e:	d906      	bls.n	803375e <tcp_split_unsent_seg+0x7e>
 8033750:	4b84      	ldr	r3, [pc, #528]	; (8033964 <tcp_split_unsent_seg+0x284>)
 8033752:	f240 325b 	movw	r2, #859	; 0x35b
 8033756:	4987      	ldr	r1, [pc, #540]	; (8033974 <tcp_split_unsent_seg+0x294>)
 8033758:	4884      	ldr	r0, [pc, #528]	; (803396c <tcp_split_unsent_seg+0x28c>)
 803375a:	f005 fc85 	bl	8039068 <iprintf>
  LWIP_ASSERT("useg->len > 0", useg->len > 0);
 803375e:	697b      	ldr	r3, [r7, #20]
 8033760:	891b      	ldrh	r3, [r3, #8]
 8033762:	2b00      	cmp	r3, #0
 8033764:	d106      	bne.n	8033774 <tcp_split_unsent_seg+0x94>
 8033766:	4b7f      	ldr	r3, [pc, #508]	; (8033964 <tcp_split_unsent_seg+0x284>)
 8033768:	f44f 7257 	mov.w	r2, #860	; 0x35c
 803376c:	4982      	ldr	r1, [pc, #520]	; (8033978 <tcp_split_unsent_seg+0x298>)
 803376e:	487f      	ldr	r0, [pc, #508]	; (803396c <tcp_split_unsent_seg+0x28c>)
 8033770:	f005 fc7a 	bl	8039068 <iprintf>
   * to split this packet so we may actually exceed the max value by
   * one!
   */
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue: split_unsent_seg: %u\n", (unsigned int)pcb->snd_queuelen));

  optflags = useg->flags;
 8033774:	697b      	ldr	r3, [r7, #20]
 8033776:	7a9b      	ldrb	r3, [r3, #10]
 8033778:	73fb      	strb	r3, [r7, #15]
#if TCP_CHECKSUM_ON_COPY
  /* Remove since checksum is not stored until after tcp_create_segment() */
  optflags &= ~TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */
  optlen = LWIP_TCP_OPT_LENGTH(optflags);
 803377a:	7bfb      	ldrb	r3, [r7, #15]
 803377c:	009b      	lsls	r3, r3, #2
 803377e:	b2db      	uxtb	r3, r3
 8033780:	f003 0304 	and.w	r3, r3, #4
 8033784:	73bb      	strb	r3, [r7, #14]
  remainder = useg->len - split;
 8033786:	697b      	ldr	r3, [r7, #20]
 8033788:	891a      	ldrh	r2, [r3, #8]
 803378a:	887b      	ldrh	r3, [r7, #2]
 803378c:	1ad3      	subs	r3, r2, r3
 803378e:	81bb      	strh	r3, [r7, #12]

  /* Create new pbuf for the remainder of the split */
  p = pbuf_alloc(PBUF_TRANSPORT, remainder + optlen, PBUF_RAM);
 8033790:	7bbb      	ldrb	r3, [r7, #14]
 8033792:	b29a      	uxth	r2, r3
 8033794:	89bb      	ldrh	r3, [r7, #12]
 8033796:	4413      	add	r3, r2
 8033798:	b29b      	uxth	r3, r3
 803379a:	f44f 7220 	mov.w	r2, #640	; 0x280
 803379e:	4619      	mov	r1, r3
 80337a0:	2036      	movs	r0, #54	; 0x36
 80337a2:	f7fa fa9d 	bl	802dce0 <pbuf_alloc>
 80337a6:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 80337a8:	693b      	ldr	r3, [r7, #16]
 80337aa:	2b00      	cmp	r3, #0
 80337ac:	f000 80b7 	beq.w	803391e <tcp_split_unsent_seg+0x23e>
                ("tcp_split_unsent_seg: could not allocate memory for pbuf remainder %u\n", remainder));
    goto memerr;
  }

  /* Offset into the original pbuf is past TCP/IP headers, options, and split amount */
  offset = useg->p->tot_len - useg->len + split;
 80337b0:	697b      	ldr	r3, [r7, #20]
 80337b2:	685b      	ldr	r3, [r3, #4]
 80337b4:	891a      	ldrh	r2, [r3, #8]
 80337b6:	697b      	ldr	r3, [r7, #20]
 80337b8:	891b      	ldrh	r3, [r3, #8]
 80337ba:	1ad3      	subs	r3, r2, r3
 80337bc:	b29a      	uxth	r2, r3
 80337be:	887b      	ldrh	r3, [r7, #2]
 80337c0:	4413      	add	r3, r2
 80337c2:	817b      	strh	r3, [r7, #10]
  /* Copy remainder into new pbuf, headers and options will not be filled out */
  if (pbuf_copy_partial(useg->p, (u8_t *)p->payload + optlen, remainder, offset ) != remainder) {
 80337c4:	697b      	ldr	r3, [r7, #20]
 80337c6:	6858      	ldr	r0, [r3, #4]
 80337c8:	693b      	ldr	r3, [r7, #16]
 80337ca:	685a      	ldr	r2, [r3, #4]
 80337cc:	7bbb      	ldrb	r3, [r7, #14]
 80337ce:	18d1      	adds	r1, r2, r3
 80337d0:	897b      	ldrh	r3, [r7, #10]
 80337d2:	89ba      	ldrh	r2, [r7, #12]
 80337d4:	f7fa ffa0 	bl	802e718 <pbuf_copy_partial>
 80337d8:	4603      	mov	r3, r0
 80337da:	461a      	mov	r2, r3
 80337dc:	89bb      	ldrh	r3, [r7, #12]
 80337de:	4293      	cmp	r3, r2
 80337e0:	f040 809f 	bne.w	8033922 <tcp_split_unsent_seg+0x242>
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Options are created when calling tcp_output() */

  /* Migrate flags from original segment */
  split_flags = TCPH_FLAGS(useg->tcphdr);
 80337e4:	697b      	ldr	r3, [r7, #20]
 80337e6:	68db      	ldr	r3, [r3, #12]
 80337e8:	899b      	ldrh	r3, [r3, #12]
 80337ea:	b29b      	uxth	r3, r3
 80337ec:	4618      	mov	r0, r3
 80337ee:	f7f9 f899 	bl	802c924 <lwip_htons>
 80337f2:	4603      	mov	r3, r0
 80337f4:	b2db      	uxtb	r3, r3
 80337f6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80337fa:	76fb      	strb	r3, [r7, #27]
  remainder_flags = 0; /* ACK added in tcp_output() */
 80337fc:	2300      	movs	r3, #0
 80337fe:	76bb      	strb	r3, [r7, #26]

  if (split_flags & TCP_PSH) {
 8033800:	7efb      	ldrb	r3, [r7, #27]
 8033802:	f003 0308 	and.w	r3, r3, #8
 8033806:	2b00      	cmp	r3, #0
 8033808:	d007      	beq.n	803381a <tcp_split_unsent_seg+0x13a>
    split_flags &= ~TCP_PSH;
 803380a:	7efb      	ldrb	r3, [r7, #27]
 803380c:	f023 0308 	bic.w	r3, r3, #8
 8033810:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_PSH;
 8033812:	7ebb      	ldrb	r3, [r7, #26]
 8033814:	f043 0308 	orr.w	r3, r3, #8
 8033818:	76bb      	strb	r3, [r7, #26]
  }
  if (split_flags & TCP_FIN) {
 803381a:	7efb      	ldrb	r3, [r7, #27]
 803381c:	f003 0301 	and.w	r3, r3, #1
 8033820:	2b00      	cmp	r3, #0
 8033822:	d007      	beq.n	8033834 <tcp_split_unsent_seg+0x154>
    split_flags &= ~TCP_FIN;
 8033824:	7efb      	ldrb	r3, [r7, #27]
 8033826:	f023 0301 	bic.w	r3, r3, #1
 803382a:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_FIN;
 803382c:	7ebb      	ldrb	r3, [r7, #26]
 803382e:	f043 0301 	orr.w	r3, r3, #1
 8033832:	76bb      	strb	r3, [r7, #26]
  }
  /* SYN should be left on split, RST should not be present with data */

  seg = tcp_create_segment(pcb, p, remainder_flags, lwip_ntohl(useg->tcphdr->seqno) + split, optflags);
 8033834:	697b      	ldr	r3, [r7, #20]
 8033836:	68db      	ldr	r3, [r3, #12]
 8033838:	685b      	ldr	r3, [r3, #4]
 803383a:	4618      	mov	r0, r3
 803383c:	f7f9 f887 	bl	802c94e <lwip_htonl>
 8033840:	4602      	mov	r2, r0
 8033842:	887b      	ldrh	r3, [r7, #2]
 8033844:	18d1      	adds	r1, r2, r3
 8033846:	7eba      	ldrb	r2, [r7, #26]
 8033848:	7bfb      	ldrb	r3, [r7, #15]
 803384a:	9300      	str	r3, [sp, #0]
 803384c:	460b      	mov	r3, r1
 803384e:	6939      	ldr	r1, [r7, #16]
 8033850:	6878      	ldr	r0, [r7, #4]
 8033852:	f7ff fa31 	bl	8032cb8 <tcp_create_segment>
 8033856:	61f8      	str	r0, [r7, #28]
  if (seg == NULL) {
 8033858:	69fb      	ldr	r3, [r7, #28]
 803385a:	2b00      	cmp	r3, #0
 803385c:	d063      	beq.n	8033926 <tcp_split_unsent_seg+0x246>
  seg->chksum_swapped = chksum_swapped;
  seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Remove this segment from the queue since trimming it may free pbufs */
  pcb->snd_queuelen -= pbuf_clen(useg->p);
 803385e:	697b      	ldr	r3, [r7, #20]
 8033860:	685b      	ldr	r3, [r3, #4]
 8033862:	4618      	mov	r0, r3
 8033864:	f7fa fde0 	bl	802e428 <pbuf_clen>
 8033868:	4603      	mov	r3, r0
 803386a:	461a      	mov	r2, r3
 803386c:	687b      	ldr	r3, [r7, #4]
 803386e:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8033872:	1a9b      	subs	r3, r3, r2
 8033874:	b29a      	uxth	r2, r3
 8033876:	687b      	ldr	r3, [r7, #4]
 8033878:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  /* Trim the original pbuf into our split size.  At this point our remainder segment must be setup
  successfully because we are modifying the original segment */
  pbuf_realloc(useg->p, useg->p->tot_len - remainder);
 803387c:	697b      	ldr	r3, [r7, #20]
 803387e:	6858      	ldr	r0, [r3, #4]
 8033880:	697b      	ldr	r3, [r7, #20]
 8033882:	685b      	ldr	r3, [r3, #4]
 8033884:	891a      	ldrh	r2, [r3, #8]
 8033886:	89bb      	ldrh	r3, [r7, #12]
 8033888:	1ad3      	subs	r3, r2, r3
 803388a:	b29b      	uxth	r3, r3
 803388c:	4619      	mov	r1, r3
 803388e:	f7fa fb85 	bl	802df9c <pbuf_realloc>
  useg->len -= remainder;
 8033892:	697b      	ldr	r3, [r7, #20]
 8033894:	891a      	ldrh	r2, [r3, #8]
 8033896:	89bb      	ldrh	r3, [r7, #12]
 8033898:	1ad3      	subs	r3, r2, r3
 803389a:	b29a      	uxth	r2, r3
 803389c:	697b      	ldr	r3, [r7, #20]
 803389e:	811a      	strh	r2, [r3, #8]
  TCPH_SET_FLAG(useg->tcphdr, split_flags);
 80338a0:	697b      	ldr	r3, [r7, #20]
 80338a2:	68db      	ldr	r3, [r3, #12]
 80338a4:	899b      	ldrh	r3, [r3, #12]
 80338a6:	b29c      	uxth	r4, r3
 80338a8:	7efb      	ldrb	r3, [r7, #27]
 80338aa:	b29b      	uxth	r3, r3
 80338ac:	4618      	mov	r0, r3
 80338ae:	f7f9 f839 	bl	802c924 <lwip_htons>
 80338b2:	4603      	mov	r3, r0
 80338b4:	461a      	mov	r2, r3
 80338b6:	697b      	ldr	r3, [r7, #20]
 80338b8:	68db      	ldr	r3, [r3, #12]
 80338ba:	4322      	orrs	r2, r4
 80338bc:	b292      	uxth	r2, r2
 80338be:	819a      	strh	r2, [r3, #12]
  /* By trimming, realloc may have actually shrunk the pbuf, so clear oversize_left */
  useg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */

  /* Add back to the queue with new trimmed pbuf */
  pcb->snd_queuelen += pbuf_clen(useg->p);
 80338c0:	697b      	ldr	r3, [r7, #20]
 80338c2:	685b      	ldr	r3, [r3, #4]
 80338c4:	4618      	mov	r0, r3
 80338c6:	f7fa fdaf 	bl	802e428 <pbuf_clen>
 80338ca:	4603      	mov	r3, r0
 80338cc:	461a      	mov	r2, r3
 80338ce:	687b      	ldr	r3, [r7, #4]
 80338d0:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 80338d4:	4413      	add	r3, r2
 80338d6:	b29a      	uxth	r2, r3
 80338d8:	687b      	ldr	r3, [r7, #4]
 80338da:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Update number of segments on the queues. Note that length now may
   * exceed TCP_SND_QUEUELEN! We don't have to touch pcb->snd_buf
   * because the total amount of data is constant when packet is split */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 80338de:	69fb      	ldr	r3, [r7, #28]
 80338e0:	685b      	ldr	r3, [r3, #4]
 80338e2:	4618      	mov	r0, r3
 80338e4:	f7fa fda0 	bl	802e428 <pbuf_clen>
 80338e8:	4603      	mov	r3, r0
 80338ea:	461a      	mov	r2, r3
 80338ec:	687b      	ldr	r3, [r7, #4]
 80338ee:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 80338f2:	4413      	add	r3, r2
 80338f4:	b29a      	uxth	r2, r3
 80338f6:	687b      	ldr	r3, [r7, #4]
 80338f8:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  /* Finally insert remainder into queue after split (which stays head) */
  seg->next = useg->next;
 80338fc:	697b      	ldr	r3, [r7, #20]
 80338fe:	681a      	ldr	r2, [r3, #0]
 8033900:	69fb      	ldr	r3, [r7, #28]
 8033902:	601a      	str	r2, [r3, #0]
  useg->next = seg;
 8033904:	697b      	ldr	r3, [r7, #20]
 8033906:	69fa      	ldr	r2, [r7, #28]
 8033908:	601a      	str	r2, [r3, #0]

#if TCP_OVERSIZE
  /* If remainder is last segment on the unsent, ensure we clear the oversize amount
   * because the remainder is always sized to the exact remaining amount */
  if (seg->next == NULL) {
 803390a:	69fb      	ldr	r3, [r7, #28]
 803390c:	681b      	ldr	r3, [r3, #0]
 803390e:	2b00      	cmp	r3, #0
 8033910:	d103      	bne.n	803391a <tcp_split_unsent_seg+0x23a>
    pcb->unsent_oversize = 0;
 8033912:	687b      	ldr	r3, [r7, #4]
 8033914:	2200      	movs	r2, #0
 8033916:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  }
#endif /* TCP_OVERSIZE */

  return ERR_OK;
 803391a:	2300      	movs	r3, #0
 803391c:	e01e      	b.n	803395c <tcp_split_unsent_seg+0x27c>
    goto memerr;
 803391e:	bf00      	nop
 8033920:	e002      	b.n	8033928 <tcp_split_unsent_seg+0x248>
    goto memerr;
 8033922:	bf00      	nop
 8033924:	e000      	b.n	8033928 <tcp_split_unsent_seg+0x248>
    goto memerr;
 8033926:	bf00      	nop
memerr:
  TCP_STATS_INC(tcp.memerr);
 8033928:	4b14      	ldr	r3, [pc, #80]	; (803397c <tcp_split_unsent_seg+0x29c>)
 803392a:	f8b3 309c 	ldrh.w	r3, [r3, #156]	; 0x9c
 803392e:	3301      	adds	r3, #1
 8033930:	b29a      	uxth	r2, r3
 8033932:	4b12      	ldr	r3, [pc, #72]	; (803397c <tcp_split_unsent_seg+0x29c>)
 8033934:	f8a3 209c 	strh.w	r2, [r3, #156]	; 0x9c

  LWIP_ASSERT("seg == NULL", seg == NULL);
 8033938:	69fb      	ldr	r3, [r7, #28]
 803393a:	2b00      	cmp	r3, #0
 803393c:	d006      	beq.n	803394c <tcp_split_unsent_seg+0x26c>
 803393e:	4b09      	ldr	r3, [pc, #36]	; (8033964 <tcp_split_unsent_seg+0x284>)
 8033940:	f44f 7276 	mov.w	r2, #984	; 0x3d8
 8033944:	490e      	ldr	r1, [pc, #56]	; (8033980 <tcp_split_unsent_seg+0x2a0>)
 8033946:	4809      	ldr	r0, [pc, #36]	; (803396c <tcp_split_unsent_seg+0x28c>)
 8033948:	f005 fb8e 	bl	8039068 <iprintf>
  if (p != NULL) {
 803394c:	693b      	ldr	r3, [r7, #16]
 803394e:	2b00      	cmp	r3, #0
 8033950:	d002      	beq.n	8033958 <tcp_split_unsent_seg+0x278>
    pbuf_free(p);
 8033952:	6938      	ldr	r0, [r7, #16]
 8033954:	f7fa fcda 	bl	802e30c <pbuf_free>
  }

  return ERR_MEM;
 8033958:	f04f 33ff 	mov.w	r3, #4294967295
}
 803395c:	4618      	mov	r0, r3
 803395e:	3724      	adds	r7, #36	; 0x24
 8033960:	46bd      	mov	sp, r7
 8033962:	bd90      	pop	{r4, r7, pc}
 8033964:	0803c128 	.word	0x0803c128
 8033968:	0803c4bc 	.word	0x0803c4bc
 803396c:	0803c17c 	.word	0x0803c17c
 8033970:	0803c4e0 	.word	0x0803c4e0
 8033974:	0803c504 	.word	0x0803c504
 8033978:	0803c514 	.word	0x0803c514
 803397c:	2000ee04 	.word	0x2000ee04
 8033980:	0803c524 	.word	0x0803c524

08033984 <tcp_send_fin>:
 * @param pcb the tcp_pcb over which to send a segment
 * @return ERR_OK if sent, another err_t otherwise
 */
err_t
tcp_send_fin(struct tcp_pcb *pcb)
{
 8033984:	b590      	push	{r4, r7, lr}
 8033986:	b085      	sub	sp, #20
 8033988:	af00      	add	r7, sp, #0
 803398a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_send_fin: invalid pcb", pcb != NULL);
 803398c:	687b      	ldr	r3, [r7, #4]
 803398e:	2b00      	cmp	r3, #0
 8033990:	d106      	bne.n	80339a0 <tcp_send_fin+0x1c>
 8033992:	4b21      	ldr	r3, [pc, #132]	; (8033a18 <tcp_send_fin+0x94>)
 8033994:	f240 32eb 	movw	r2, #1003	; 0x3eb
 8033998:	4920      	ldr	r1, [pc, #128]	; (8033a1c <tcp_send_fin+0x98>)
 803399a:	4821      	ldr	r0, [pc, #132]	; (8033a20 <tcp_send_fin+0x9c>)
 803399c:	f005 fb64 	bl	8039068 <iprintf>

  /* first, try to add the fin to the last unsent segment */
  if (pcb->unsent != NULL) {
 80339a0:	687b      	ldr	r3, [r7, #4]
 80339a2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80339a4:	2b00      	cmp	r3, #0
 80339a6:	d02e      	beq.n	8033a06 <tcp_send_fin+0x82>
    struct tcp_seg *last_unsent;
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 80339a8:	687b      	ldr	r3, [r7, #4]
 80339aa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80339ac:	60fb      	str	r3, [r7, #12]
 80339ae:	e002      	b.n	80339b6 <tcp_send_fin+0x32>
         last_unsent = last_unsent->next);
 80339b0:	68fb      	ldr	r3, [r7, #12]
 80339b2:	681b      	ldr	r3, [r3, #0]
 80339b4:	60fb      	str	r3, [r7, #12]
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 80339b6:	68fb      	ldr	r3, [r7, #12]
 80339b8:	681b      	ldr	r3, [r3, #0]
 80339ba:	2b00      	cmp	r3, #0
 80339bc:	d1f8      	bne.n	80339b0 <tcp_send_fin+0x2c>

    if ((TCPH_FLAGS(last_unsent->tcphdr) & (TCP_SYN | TCP_FIN | TCP_RST)) == 0) {
 80339be:	68fb      	ldr	r3, [r7, #12]
 80339c0:	68db      	ldr	r3, [r3, #12]
 80339c2:	899b      	ldrh	r3, [r3, #12]
 80339c4:	b29b      	uxth	r3, r3
 80339c6:	4618      	mov	r0, r3
 80339c8:	f7f8 ffac 	bl	802c924 <lwip_htons>
 80339cc:	4603      	mov	r3, r0
 80339ce:	b2db      	uxtb	r3, r3
 80339d0:	f003 0307 	and.w	r3, r3, #7
 80339d4:	2b00      	cmp	r3, #0
 80339d6:	d116      	bne.n	8033a06 <tcp_send_fin+0x82>
      /* no SYN/FIN/RST flag in the header, we can add the FIN flag */
      TCPH_SET_FLAG(last_unsent->tcphdr, TCP_FIN);
 80339d8:	68fb      	ldr	r3, [r7, #12]
 80339da:	68db      	ldr	r3, [r3, #12]
 80339dc:	899b      	ldrh	r3, [r3, #12]
 80339de:	b29c      	uxth	r4, r3
 80339e0:	2001      	movs	r0, #1
 80339e2:	f7f8 ff9f 	bl	802c924 <lwip_htons>
 80339e6:	4603      	mov	r3, r0
 80339e8:	461a      	mov	r2, r3
 80339ea:	68fb      	ldr	r3, [r7, #12]
 80339ec:	68db      	ldr	r3, [r3, #12]
 80339ee:	4322      	orrs	r2, r4
 80339f0:	b292      	uxth	r2, r2
 80339f2:	819a      	strh	r2, [r3, #12]
      tcp_set_flags(pcb, TF_FIN);
 80339f4:	687b      	ldr	r3, [r7, #4]
 80339f6:	8b5b      	ldrh	r3, [r3, #26]
 80339f8:	f043 0320 	orr.w	r3, r3, #32
 80339fc:	b29a      	uxth	r2, r3
 80339fe:	687b      	ldr	r3, [r7, #4]
 8033a00:	835a      	strh	r2, [r3, #26]
      return ERR_OK;
 8033a02:	2300      	movs	r3, #0
 8033a04:	e004      	b.n	8033a10 <tcp_send_fin+0x8c>
    }
  }
  /* no data, no length, flags, copy=1, no optdata */
  return tcp_enqueue_flags(pcb, TCP_FIN);
 8033a06:	2101      	movs	r1, #1
 8033a08:	6878      	ldr	r0, [r7, #4]
 8033a0a:	f000 f80b 	bl	8033a24 <tcp_enqueue_flags>
 8033a0e:	4603      	mov	r3, r0
}
 8033a10:	4618      	mov	r0, r3
 8033a12:	3714      	adds	r7, #20
 8033a14:	46bd      	mov	sp, r7
 8033a16:	bd90      	pop	{r4, r7, pc}
 8033a18:	0803c128 	.word	0x0803c128
 8033a1c:	0803c530 	.word	0x0803c530
 8033a20:	0803c17c 	.word	0x0803c17c

08033a24 <tcp_enqueue_flags>:
 * @param pcb Protocol control block for the TCP connection.
 * @param flags TCP header flags to set in the outgoing segment.
 */
err_t
tcp_enqueue_flags(struct tcp_pcb *pcb, u8_t flags)
{
 8033a24:	b580      	push	{r7, lr}
 8033a26:	b08a      	sub	sp, #40	; 0x28
 8033a28:	af02      	add	r7, sp, #8
 8033a2a:	6078      	str	r0, [r7, #4]
 8033a2c:	460b      	mov	r3, r1
 8033a2e:	70fb      	strb	r3, [r7, #3]
  struct pbuf *p;
  struct tcp_seg *seg;
  u8_t optflags = 0;
 8033a30:	2300      	movs	r3, #0
 8033a32:	77fb      	strb	r3, [r7, #31]
  u8_t optlen = 0;
 8033a34:	2300      	movs	r3, #0
 8033a36:	75fb      	strb	r3, [r7, #23]

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: queuelen: %"U16_F"\n", (u16_t)pcb->snd_queuelen));

  LWIP_ASSERT("tcp_enqueue_flags: need either TCP_SYN or TCP_FIN in flags (programmer violates API)",
 8033a38:	78fb      	ldrb	r3, [r7, #3]
 8033a3a:	f003 0303 	and.w	r3, r3, #3
 8033a3e:	2b00      	cmp	r3, #0
 8033a40:	d106      	bne.n	8033a50 <tcp_enqueue_flags+0x2c>
 8033a42:	4b6f      	ldr	r3, [pc, #444]	; (8033c00 <tcp_enqueue_flags+0x1dc>)
 8033a44:	f240 4211 	movw	r2, #1041	; 0x411
 8033a48:	496e      	ldr	r1, [pc, #440]	; (8033c04 <tcp_enqueue_flags+0x1e0>)
 8033a4a:	486f      	ldr	r0, [pc, #444]	; (8033c08 <tcp_enqueue_flags+0x1e4>)
 8033a4c:	f005 fb0c 	bl	8039068 <iprintf>
              (flags & (TCP_SYN | TCP_FIN)) != 0);
  LWIP_ASSERT("tcp_enqueue_flags: invalid pcb", pcb != NULL);
 8033a50:	687b      	ldr	r3, [r7, #4]
 8033a52:	2b00      	cmp	r3, #0
 8033a54:	d106      	bne.n	8033a64 <tcp_enqueue_flags+0x40>
 8033a56:	4b6a      	ldr	r3, [pc, #424]	; (8033c00 <tcp_enqueue_flags+0x1dc>)
 8033a58:	f240 4213 	movw	r2, #1043	; 0x413
 8033a5c:	496b      	ldr	r1, [pc, #428]	; (8033c0c <tcp_enqueue_flags+0x1e8>)
 8033a5e:	486a      	ldr	r0, [pc, #424]	; (8033c08 <tcp_enqueue_flags+0x1e4>)
 8033a60:	f005 fb02 	bl	8039068 <iprintf>

  /* No need to check pcb->snd_queuelen if only SYN or FIN are allowed! */

  /* Get options for this segment. This is a special case since this is the
     only place where a SYN can be sent. */
  if (flags & TCP_SYN) {
 8033a64:	78fb      	ldrb	r3, [r7, #3]
 8033a66:	f003 0302 	and.w	r3, r3, #2
 8033a6a:	2b00      	cmp	r3, #0
 8033a6c:	d001      	beq.n	8033a72 <tcp_enqueue_flags+0x4e>
    optflags = TF_SEG_OPTS_MSS;
 8033a6e:	2301      	movs	r3, #1
 8033a70:	77fb      	strb	r3, [r7, #31]
    /* Make sure the timestamp option is only included in data segments if we
       agreed about it with the remote host (and in active open SYN segments). */
    optflags |= TF_SEG_OPTS_TS;
  }
#endif /* LWIP_TCP_TIMESTAMPS */
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 8033a72:	7ffb      	ldrb	r3, [r7, #31]
 8033a74:	009b      	lsls	r3, r3, #2
 8033a76:	b2db      	uxtb	r3, r3
 8033a78:	f003 0304 	and.w	r3, r3, #4
 8033a7c:	75fb      	strb	r3, [r7, #23]

  /* Allocate pbuf with room for TCP header + options */
  if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 8033a7e:	7dfb      	ldrb	r3, [r7, #23]
 8033a80:	b29b      	uxth	r3, r3
 8033a82:	f44f 7220 	mov.w	r2, #640	; 0x280
 8033a86:	4619      	mov	r1, r3
 8033a88:	2036      	movs	r0, #54	; 0x36
 8033a8a:	f7fa f929 	bl	802dce0 <pbuf_alloc>
 8033a8e:	6138      	str	r0, [r7, #16]
 8033a90:	693b      	ldr	r3, [r7, #16]
 8033a92:	2b00      	cmp	r3, #0
 8033a94:	d111      	bne.n	8033aba <tcp_enqueue_flags+0x96>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8033a96:	687b      	ldr	r3, [r7, #4]
 8033a98:	8b5b      	ldrh	r3, [r3, #26]
 8033a9a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8033a9e:	b29a      	uxth	r2, r3
 8033aa0:	687b      	ldr	r3, [r7, #4]
 8033aa2:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
 8033aa4:	4b5a      	ldr	r3, [pc, #360]	; (8033c10 <tcp_enqueue_flags+0x1ec>)
 8033aa6:	f8b3 309c 	ldrh.w	r3, [r3, #156]	; 0x9c
 8033aaa:	3301      	adds	r3, #1
 8033aac:	b29a      	uxth	r2, r3
 8033aae:	4b58      	ldr	r3, [pc, #352]	; (8033c10 <tcp_enqueue_flags+0x1ec>)
 8033ab0:	f8a3 209c 	strh.w	r2, [r3, #156]	; 0x9c
    return ERR_MEM;
 8033ab4:	f04f 33ff 	mov.w	r3, #4294967295
 8033ab8:	e09d      	b.n	8033bf6 <tcp_enqueue_flags+0x1d2>
  }
  LWIP_ASSERT("tcp_enqueue_flags: check that first pbuf can hold optlen",
 8033aba:	693b      	ldr	r3, [r7, #16]
 8033abc:	895a      	ldrh	r2, [r3, #10]
 8033abe:	7dfb      	ldrb	r3, [r7, #23]
 8033ac0:	b29b      	uxth	r3, r3
 8033ac2:	429a      	cmp	r2, r3
 8033ac4:	d206      	bcs.n	8033ad4 <tcp_enqueue_flags+0xb0>
 8033ac6:	4b4e      	ldr	r3, [pc, #312]	; (8033c00 <tcp_enqueue_flags+0x1dc>)
 8033ac8:	f240 4239 	movw	r2, #1081	; 0x439
 8033acc:	4951      	ldr	r1, [pc, #324]	; (8033c14 <tcp_enqueue_flags+0x1f0>)
 8033ace:	484e      	ldr	r0, [pc, #312]	; (8033c08 <tcp_enqueue_flags+0x1e4>)
 8033ad0:	f005 faca 	bl	8039068 <iprintf>
              (p->len >= optlen));

  /* Allocate memory for tcp_seg, and fill in fields. */
  if ((seg = tcp_create_segment(pcb, p, flags, pcb->snd_lbb, optflags)) == NULL) {
 8033ad4:	687b      	ldr	r3, [r7, #4]
 8033ad6:	6dd9      	ldr	r1, [r3, #92]	; 0x5c
 8033ad8:	78fa      	ldrb	r2, [r7, #3]
 8033ada:	7ffb      	ldrb	r3, [r7, #31]
 8033adc:	9300      	str	r3, [sp, #0]
 8033ade:	460b      	mov	r3, r1
 8033ae0:	6939      	ldr	r1, [r7, #16]
 8033ae2:	6878      	ldr	r0, [r7, #4]
 8033ae4:	f7ff f8e8 	bl	8032cb8 <tcp_create_segment>
 8033ae8:	60f8      	str	r0, [r7, #12]
 8033aea:	68fb      	ldr	r3, [r7, #12]
 8033aec:	2b00      	cmp	r3, #0
 8033aee:	d111      	bne.n	8033b14 <tcp_enqueue_flags+0xf0>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8033af0:	687b      	ldr	r3, [r7, #4]
 8033af2:	8b5b      	ldrh	r3, [r3, #26]
 8033af4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8033af8:	b29a      	uxth	r2, r3
 8033afa:	687b      	ldr	r3, [r7, #4]
 8033afc:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
 8033afe:	4b44      	ldr	r3, [pc, #272]	; (8033c10 <tcp_enqueue_flags+0x1ec>)
 8033b00:	f8b3 309c 	ldrh.w	r3, [r3, #156]	; 0x9c
 8033b04:	3301      	adds	r3, #1
 8033b06:	b29a      	uxth	r2, r3
 8033b08:	4b41      	ldr	r3, [pc, #260]	; (8033c10 <tcp_enqueue_flags+0x1ec>)
 8033b0a:	f8a3 209c 	strh.w	r2, [r3, #156]	; 0x9c
    return ERR_MEM;
 8033b0e:	f04f 33ff 	mov.w	r3, #4294967295
 8033b12:	e070      	b.n	8033bf6 <tcp_enqueue_flags+0x1d2>
  }
  LWIP_ASSERT("seg->tcphdr not aligned", ((mem_ptr_t)seg->tcphdr % LWIP_MIN(MEM_ALIGNMENT, 4)) == 0);
 8033b14:	68fb      	ldr	r3, [r7, #12]
 8033b16:	68db      	ldr	r3, [r3, #12]
 8033b18:	f003 0303 	and.w	r3, r3, #3
 8033b1c:	2b00      	cmp	r3, #0
 8033b1e:	d006      	beq.n	8033b2e <tcp_enqueue_flags+0x10a>
 8033b20:	4b37      	ldr	r3, [pc, #220]	; (8033c00 <tcp_enqueue_flags+0x1dc>)
 8033b22:	f240 4242 	movw	r2, #1090	; 0x442
 8033b26:	493c      	ldr	r1, [pc, #240]	; (8033c18 <tcp_enqueue_flags+0x1f4>)
 8033b28:	4837      	ldr	r0, [pc, #220]	; (8033c08 <tcp_enqueue_flags+0x1e4>)
 8033b2a:	f005 fa9d 	bl	8039068 <iprintf>
  LWIP_ASSERT("tcp_enqueue_flags: invalid segment length", seg->len == 0);
 8033b2e:	68fb      	ldr	r3, [r7, #12]
 8033b30:	891b      	ldrh	r3, [r3, #8]
 8033b32:	2b00      	cmp	r3, #0
 8033b34:	d006      	beq.n	8033b44 <tcp_enqueue_flags+0x120>
 8033b36:	4b32      	ldr	r3, [pc, #200]	; (8033c00 <tcp_enqueue_flags+0x1dc>)
 8033b38:	f240 4243 	movw	r2, #1091	; 0x443
 8033b3c:	4937      	ldr	r1, [pc, #220]	; (8033c1c <tcp_enqueue_flags+0x1f8>)
 8033b3e:	4832      	ldr	r0, [pc, #200]	; (8033c08 <tcp_enqueue_flags+0x1e4>)
 8033b40:	f005 fa92 	bl	8039068 <iprintf>
               lwip_ntohl(seg->tcphdr->seqno),
               lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg),
               (u16_t)flags));

  /* Now append seg to pcb->unsent queue */
  if (pcb->unsent == NULL) {
 8033b44:	687b      	ldr	r3, [r7, #4]
 8033b46:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8033b48:	2b00      	cmp	r3, #0
 8033b4a:	d103      	bne.n	8033b54 <tcp_enqueue_flags+0x130>
    pcb->unsent = seg;
 8033b4c:	687b      	ldr	r3, [r7, #4]
 8033b4e:	68fa      	ldr	r2, [r7, #12]
 8033b50:	66da      	str	r2, [r3, #108]	; 0x6c
 8033b52:	e00d      	b.n	8033b70 <tcp_enqueue_flags+0x14c>
  } else {
    struct tcp_seg *useg;
    for (useg = pcb->unsent; useg->next != NULL; useg = useg->next);
 8033b54:	687b      	ldr	r3, [r7, #4]
 8033b56:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8033b58:	61bb      	str	r3, [r7, #24]
 8033b5a:	e002      	b.n	8033b62 <tcp_enqueue_flags+0x13e>
 8033b5c:	69bb      	ldr	r3, [r7, #24]
 8033b5e:	681b      	ldr	r3, [r3, #0]
 8033b60:	61bb      	str	r3, [r7, #24]
 8033b62:	69bb      	ldr	r3, [r7, #24]
 8033b64:	681b      	ldr	r3, [r3, #0]
 8033b66:	2b00      	cmp	r3, #0
 8033b68:	d1f8      	bne.n	8033b5c <tcp_enqueue_flags+0x138>
    useg->next = seg;
 8033b6a:	69bb      	ldr	r3, [r7, #24]
 8033b6c:	68fa      	ldr	r2, [r7, #12]
 8033b6e:	601a      	str	r2, [r3, #0]
  }
#if TCP_OVERSIZE
  /* The new unsent tail has no space */
  pcb->unsent_oversize = 0;
 8033b70:	687b      	ldr	r3, [r7, #4]
 8033b72:	2200      	movs	r2, #0
 8033b74:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* TCP_OVERSIZE */

  /* SYN and FIN bump the sequence number */
  if ((flags & TCP_SYN) || (flags & TCP_FIN)) {
 8033b78:	78fb      	ldrb	r3, [r7, #3]
 8033b7a:	f003 0302 	and.w	r3, r3, #2
 8033b7e:	2b00      	cmp	r3, #0
 8033b80:	d104      	bne.n	8033b8c <tcp_enqueue_flags+0x168>
 8033b82:	78fb      	ldrb	r3, [r7, #3]
 8033b84:	f003 0301 	and.w	r3, r3, #1
 8033b88:	2b00      	cmp	r3, #0
 8033b8a:	d004      	beq.n	8033b96 <tcp_enqueue_flags+0x172>
    pcb->snd_lbb++;
 8033b8c:	687b      	ldr	r3, [r7, #4]
 8033b8e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8033b90:	1c5a      	adds	r2, r3, #1
 8033b92:	687b      	ldr	r3, [r7, #4]
 8033b94:	65da      	str	r2, [r3, #92]	; 0x5c
    /* optlen does not influence snd_buf */
  }
  if (flags & TCP_FIN) {
 8033b96:	78fb      	ldrb	r3, [r7, #3]
 8033b98:	f003 0301 	and.w	r3, r3, #1
 8033b9c:	2b00      	cmp	r3, #0
 8033b9e:	d006      	beq.n	8033bae <tcp_enqueue_flags+0x18a>
    tcp_set_flags(pcb, TF_FIN);
 8033ba0:	687b      	ldr	r3, [r7, #4]
 8033ba2:	8b5b      	ldrh	r3, [r3, #26]
 8033ba4:	f043 0320 	orr.w	r3, r3, #32
 8033ba8:	b29a      	uxth	r2, r3
 8033baa:	687b      	ldr	r3, [r7, #4]
 8033bac:	835a      	strh	r2, [r3, #26]
  }

  /* update number of segments on the queues */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 8033bae:	68fb      	ldr	r3, [r7, #12]
 8033bb0:	685b      	ldr	r3, [r3, #4]
 8033bb2:	4618      	mov	r0, r3
 8033bb4:	f7fa fc38 	bl	802e428 <pbuf_clen>
 8033bb8:	4603      	mov	r3, r0
 8033bba:	461a      	mov	r2, r3
 8033bbc:	687b      	ldr	r3, [r7, #4]
 8033bbe:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8033bc2:	4413      	add	r3, r2
 8033bc4:	b29a      	uxth	r2, r3
 8033bc6:	687b      	ldr	r3, [r7, #4]
 8033bc8:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: %"S16_F" (after enqueued)\n", pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 8033bcc:	687b      	ldr	r3, [r7, #4]
 8033bce:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8033bd2:	2b00      	cmp	r3, #0
 8033bd4:	d00e      	beq.n	8033bf4 <tcp_enqueue_flags+0x1d0>
    LWIP_ASSERT("tcp_enqueue_flags: invalid queue length",
 8033bd6:	687b      	ldr	r3, [r7, #4]
 8033bd8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8033bda:	2b00      	cmp	r3, #0
 8033bdc:	d10a      	bne.n	8033bf4 <tcp_enqueue_flags+0x1d0>
 8033bde:	687b      	ldr	r3, [r7, #4]
 8033be0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8033be2:	2b00      	cmp	r3, #0
 8033be4:	d106      	bne.n	8033bf4 <tcp_enqueue_flags+0x1d0>
 8033be6:	4b06      	ldr	r3, [pc, #24]	; (8033c00 <tcp_enqueue_flags+0x1dc>)
 8033be8:	f240 4265 	movw	r2, #1125	; 0x465
 8033bec:	490c      	ldr	r1, [pc, #48]	; (8033c20 <tcp_enqueue_flags+0x1fc>)
 8033bee:	4806      	ldr	r0, [pc, #24]	; (8033c08 <tcp_enqueue_flags+0x1e4>)
 8033bf0:	f005 fa3a 	bl	8039068 <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  return ERR_OK;
 8033bf4:	2300      	movs	r3, #0
}
 8033bf6:	4618      	mov	r0, r3
 8033bf8:	3720      	adds	r7, #32
 8033bfa:	46bd      	mov	sp, r7
 8033bfc:	bd80      	pop	{r7, pc}
 8033bfe:	bf00      	nop
 8033c00:	0803c128 	.word	0x0803c128
 8033c04:	0803c54c 	.word	0x0803c54c
 8033c08:	0803c17c 	.word	0x0803c17c
 8033c0c:	0803c5a4 	.word	0x0803c5a4
 8033c10:	2000ee04 	.word	0x2000ee04
 8033c14:	0803c5c4 	.word	0x0803c5c4
 8033c18:	0803c600 	.word	0x0803c600
 8033c1c:	0803c618 	.word	0x0803c618
 8033c20:	0803c644 	.word	0x0803c644

08033c24 <tcp_output>:
 * @return ERR_OK if data has been sent or nothing to send
 *         another err_t on error
 */
err_t
tcp_output(struct tcp_pcb *pcb)
{
 8033c24:	b5b0      	push	{r4, r5, r7, lr}
 8033c26:	b08a      	sub	sp, #40	; 0x28
 8033c28:	af00      	add	r7, sp, #0
 8033c2a:	6078      	str	r0, [r7, #4]
  s16_t i = 0;
#endif /* TCP_CWND_DEBUG */

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("tcp_output: invalid pcb", pcb != NULL);
 8033c2c:	687b      	ldr	r3, [r7, #4]
 8033c2e:	2b00      	cmp	r3, #0
 8033c30:	d106      	bne.n	8033c40 <tcp_output+0x1c>
 8033c32:	4b8a      	ldr	r3, [pc, #552]	; (8033e5c <tcp_output+0x238>)
 8033c34:	f240 42e1 	movw	r2, #1249	; 0x4e1
 8033c38:	4989      	ldr	r1, [pc, #548]	; (8033e60 <tcp_output+0x23c>)
 8033c3a:	488a      	ldr	r0, [pc, #552]	; (8033e64 <tcp_output+0x240>)
 8033c3c:	f005 fa14 	bl	8039068 <iprintf>
  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_output for listen-pcbs",
 8033c40:	687b      	ldr	r3, [r7, #4]
 8033c42:	7d1b      	ldrb	r3, [r3, #20]
 8033c44:	2b01      	cmp	r3, #1
 8033c46:	d106      	bne.n	8033c56 <tcp_output+0x32>
 8033c48:	4b84      	ldr	r3, [pc, #528]	; (8033e5c <tcp_output+0x238>)
 8033c4a:	f240 42e3 	movw	r2, #1251	; 0x4e3
 8033c4e:	4986      	ldr	r1, [pc, #536]	; (8033e68 <tcp_output+0x244>)
 8033c50:	4884      	ldr	r0, [pc, #528]	; (8033e64 <tcp_output+0x240>)
 8033c52:	f005 fa09 	bl	8039068 <iprintf>

  /* First, check if we are invoked by the TCP input processing
     code. If so, we do not output anything. Instead, we rely on the
     input processing code to call us when input processing is done
     with. */
  if (tcp_input_pcb == pcb) {
 8033c56:	4b85      	ldr	r3, [pc, #532]	; (8033e6c <tcp_output+0x248>)
 8033c58:	681b      	ldr	r3, [r3, #0]
 8033c5a:	687a      	ldr	r2, [r7, #4]
 8033c5c:	429a      	cmp	r2, r3
 8033c5e:	d101      	bne.n	8033c64 <tcp_output+0x40>
    return ERR_OK;
 8033c60:	2300      	movs	r3, #0
 8033c62:	e1ce      	b.n	8034002 <tcp_output+0x3de>
  }

  wnd = LWIP_MIN(pcb->snd_wnd, pcb->cwnd);
 8033c64:	687b      	ldr	r3, [r7, #4]
 8033c66:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8033c6a:	687b      	ldr	r3, [r7, #4]
 8033c6c:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8033c70:	4293      	cmp	r3, r2
 8033c72:	bf28      	it	cs
 8033c74:	4613      	movcs	r3, r2
 8033c76:	b29b      	uxth	r3, r3
 8033c78:	61bb      	str	r3, [r7, #24]

  seg = pcb->unsent;
 8033c7a:	687b      	ldr	r3, [r7, #4]
 8033c7c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8033c7e:	627b      	str	r3, [r7, #36]	; 0x24

  if (seg == NULL) {
 8033c80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8033c82:	2b00      	cmp	r3, #0
 8033c84:	d10b      	bne.n	8033c9e <tcp_output+0x7a>
                                 ", seg == NULL, ack %"U32_F"\n",
                                 pcb->snd_wnd, pcb->cwnd, wnd, pcb->lastack));

    /* If the TF_ACK_NOW flag is set and the ->unsent queue is empty, construct
     * an empty ACK segment and send it. */
    if (pcb->flags & TF_ACK_NOW) {
 8033c86:	687b      	ldr	r3, [r7, #4]
 8033c88:	8b5b      	ldrh	r3, [r3, #26]
 8033c8a:	f003 0302 	and.w	r3, r3, #2
 8033c8e:	2b00      	cmp	r3, #0
 8033c90:	f000 81aa 	beq.w	8033fe8 <tcp_output+0x3c4>
      return tcp_send_empty_ack(pcb);
 8033c94:	6878      	ldr	r0, [r7, #4]
 8033c96:	f000 fddf 	bl	8034858 <tcp_send_empty_ack>
 8033c9a:	4603      	mov	r3, r0
 8033c9c:	e1b1      	b.n	8034002 <tcp_output+0x3de>
                 pcb->snd_wnd, pcb->cwnd, wnd,
                 lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len,
                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack));
  }

  netif = tcp_route(pcb, &pcb->local_ip, &pcb->remote_ip);
 8033c9e:	6879      	ldr	r1, [r7, #4]
 8033ca0:	687b      	ldr	r3, [r7, #4]
 8033ca2:	3304      	adds	r3, #4
 8033ca4:	461a      	mov	r2, r3
 8033ca6:	6878      	ldr	r0, [r7, #4]
 8033ca8:	f7fe ffea 	bl	8032c80 <tcp_route>
 8033cac:	6178      	str	r0, [r7, #20]
  if (netif == NULL) {
 8033cae:	697b      	ldr	r3, [r7, #20]
 8033cb0:	2b00      	cmp	r3, #0
 8033cb2:	d102      	bne.n	8033cba <tcp_output+0x96>
    return ERR_RTE;
 8033cb4:	f06f 0303 	mvn.w	r3, #3
 8033cb8:	e1a3      	b.n	8034002 <tcp_output+0x3de>
  }

  /* If we don't have a local IP address, we get one from netif */
  if (ip_addr_isany(&pcb->local_ip)) {
 8033cba:	687b      	ldr	r3, [r7, #4]
 8033cbc:	2b00      	cmp	r3, #0
 8033cbe:	d003      	beq.n	8033cc8 <tcp_output+0xa4>
 8033cc0:	687b      	ldr	r3, [r7, #4]
 8033cc2:	681b      	ldr	r3, [r3, #0]
 8033cc4:	2b00      	cmp	r3, #0
 8033cc6:	d111      	bne.n	8033cec <tcp_output+0xc8>
    const ip_addr_t *local_ip = ip_netif_get_local_ip(netif, &pcb->remote_ip);
 8033cc8:	697b      	ldr	r3, [r7, #20]
 8033cca:	2b00      	cmp	r3, #0
 8033ccc:	d002      	beq.n	8033cd4 <tcp_output+0xb0>
 8033cce:	697b      	ldr	r3, [r7, #20]
 8033cd0:	3304      	adds	r3, #4
 8033cd2:	e000      	b.n	8033cd6 <tcp_output+0xb2>
 8033cd4:	2300      	movs	r3, #0
 8033cd6:	613b      	str	r3, [r7, #16]
    if (local_ip == NULL) {
 8033cd8:	693b      	ldr	r3, [r7, #16]
 8033cda:	2b00      	cmp	r3, #0
 8033cdc:	d102      	bne.n	8033ce4 <tcp_output+0xc0>
      return ERR_RTE;
 8033cde:	f06f 0303 	mvn.w	r3, #3
 8033ce2:	e18e      	b.n	8034002 <tcp_output+0x3de>
    }
    ip_addr_copy(pcb->local_ip, *local_ip);
 8033ce4:	693b      	ldr	r3, [r7, #16]
 8033ce6:	681a      	ldr	r2, [r3, #0]
 8033ce8:	687b      	ldr	r3, [r7, #4]
 8033cea:	601a      	str	r2, [r3, #0]
  }

  /* Handle the current segment not fitting within the window */
  if (lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd) {
 8033cec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8033cee:	68db      	ldr	r3, [r3, #12]
 8033cf0:	685b      	ldr	r3, [r3, #4]
 8033cf2:	4618      	mov	r0, r3
 8033cf4:	f7f8 fe2b 	bl	802c94e <lwip_htonl>
 8033cf8:	4602      	mov	r2, r0
 8033cfa:	687b      	ldr	r3, [r7, #4]
 8033cfc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8033cfe:	1ad3      	subs	r3, r2, r3
 8033d00:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8033d02:	8912      	ldrh	r2, [r2, #8]
 8033d04:	4413      	add	r3, r2
 8033d06:	69ba      	ldr	r2, [r7, #24]
 8033d08:	429a      	cmp	r2, r3
 8033d0a:	d227      	bcs.n	8033d5c <tcp_output+0x138>
     * within the remaining (could be 0) send window and RTO timer is not running (we
     * have no in-flight data). If window is still too small after persist timer fires,
     * then we split the segment. We don't consider the congestion window since a cwnd
     * smaller than 1 SMSS implies in-flight data
     */
    if (wnd == pcb->snd_wnd && pcb->unacked == NULL && pcb->persist_backoff == 0) {
 8033d0c:	687b      	ldr	r3, [r7, #4]
 8033d0e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8033d12:	461a      	mov	r2, r3
 8033d14:	69bb      	ldr	r3, [r7, #24]
 8033d16:	4293      	cmp	r3, r2
 8033d18:	d114      	bne.n	8033d44 <tcp_output+0x120>
 8033d1a:	687b      	ldr	r3, [r7, #4]
 8033d1c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8033d1e:	2b00      	cmp	r3, #0
 8033d20:	d110      	bne.n	8033d44 <tcp_output+0x120>
 8033d22:	687b      	ldr	r3, [r7, #4]
 8033d24:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 8033d28:	2b00      	cmp	r3, #0
 8033d2a:	d10b      	bne.n	8033d44 <tcp_output+0x120>
      pcb->persist_cnt = 0;
 8033d2c:	687b      	ldr	r3, [r7, #4]
 8033d2e:	2200      	movs	r2, #0
 8033d30:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
      pcb->persist_backoff = 1;
 8033d34:	687b      	ldr	r3, [r7, #4]
 8033d36:	2201      	movs	r2, #1
 8033d38:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
      pcb->persist_probe = 0;
 8033d3c:	687b      	ldr	r3, [r7, #4]
 8033d3e:	2200      	movs	r2, #0
 8033d40:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
    }
    /* We need an ACK, but can't send data now, so send an empty ACK */
    if (pcb->flags & TF_ACK_NOW) {
 8033d44:	687b      	ldr	r3, [r7, #4]
 8033d46:	8b5b      	ldrh	r3, [r3, #26]
 8033d48:	f003 0302 	and.w	r3, r3, #2
 8033d4c:	2b00      	cmp	r3, #0
 8033d4e:	f000 814d 	beq.w	8033fec <tcp_output+0x3c8>
      return tcp_send_empty_ack(pcb);
 8033d52:	6878      	ldr	r0, [r7, #4]
 8033d54:	f000 fd80 	bl	8034858 <tcp_send_empty_ack>
 8033d58:	4603      	mov	r3, r0
 8033d5a:	e152      	b.n	8034002 <tcp_output+0x3de>
    }
    goto output_done;
  }
  /* Stop persist timer, above conditions are not active */
  pcb->persist_backoff = 0;
 8033d5c:	687b      	ldr	r3, [r7, #4]
 8033d5e:	2200      	movs	r2, #0
 8033d60:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99

  /* useg should point to last segment on unacked queue */
  useg = pcb->unacked;
 8033d64:	687b      	ldr	r3, [r7, #4]
 8033d66:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8033d68:	623b      	str	r3, [r7, #32]
  if (useg != NULL) {
 8033d6a:	6a3b      	ldr	r3, [r7, #32]
 8033d6c:	2b00      	cmp	r3, #0
 8033d6e:	f000 811c 	beq.w	8033faa <tcp_output+0x386>
    for (; useg->next != NULL; useg = useg->next);
 8033d72:	e002      	b.n	8033d7a <tcp_output+0x156>
 8033d74:	6a3b      	ldr	r3, [r7, #32]
 8033d76:	681b      	ldr	r3, [r3, #0]
 8033d78:	623b      	str	r3, [r7, #32]
 8033d7a:	6a3b      	ldr	r3, [r7, #32]
 8033d7c:	681b      	ldr	r3, [r3, #0]
 8033d7e:	2b00      	cmp	r3, #0
 8033d80:	d1f8      	bne.n	8033d74 <tcp_output+0x150>
  }
  /* data available and window allows it to be sent? */
  while (seg != NULL &&
 8033d82:	e112      	b.n	8033faa <tcp_output+0x386>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
    LWIP_ASSERT("RST not expected here!",
 8033d84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8033d86:	68db      	ldr	r3, [r3, #12]
 8033d88:	899b      	ldrh	r3, [r3, #12]
 8033d8a:	b29b      	uxth	r3, r3
 8033d8c:	4618      	mov	r0, r3
 8033d8e:	f7f8 fdc9 	bl	802c924 <lwip_htons>
 8033d92:	4603      	mov	r3, r0
 8033d94:	b2db      	uxtb	r3, r3
 8033d96:	f003 0304 	and.w	r3, r3, #4
 8033d9a:	2b00      	cmp	r3, #0
 8033d9c:	d006      	beq.n	8033dac <tcp_output+0x188>
 8033d9e:	4b2f      	ldr	r3, [pc, #188]	; (8033e5c <tcp_output+0x238>)
 8033da0:	f240 5236 	movw	r2, #1334	; 0x536
 8033da4:	4932      	ldr	r1, [pc, #200]	; (8033e70 <tcp_output+0x24c>)
 8033da6:	482f      	ldr	r0, [pc, #188]	; (8033e64 <tcp_output+0x240>)
 8033da8:	f005 f95e 	bl	8039068 <iprintf>
     * - if tcp_write had a memory error before (prevent delayed ACK timeout) or
     * - if FIN was already enqueued for this PCB (SYN is always alone in a segment -
     *   either seg->next != NULL or pcb->unacked == NULL;
     *   RST is no sent using tcp_write/tcp_output.
     */
    if ((tcp_do_output_nagle(pcb) == 0) &&
 8033dac:	687b      	ldr	r3, [r7, #4]
 8033dae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8033db0:	2b00      	cmp	r3, #0
 8033db2:	d01f      	beq.n	8033df4 <tcp_output+0x1d0>
 8033db4:	687b      	ldr	r3, [r7, #4]
 8033db6:	8b5b      	ldrh	r3, [r3, #26]
 8033db8:	f003 0344 	and.w	r3, r3, #68	; 0x44
 8033dbc:	2b00      	cmp	r3, #0
 8033dbe:	d119      	bne.n	8033df4 <tcp_output+0x1d0>
 8033dc0:	687b      	ldr	r3, [r7, #4]
 8033dc2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8033dc4:	2b00      	cmp	r3, #0
 8033dc6:	d00b      	beq.n	8033de0 <tcp_output+0x1bc>
 8033dc8:	687b      	ldr	r3, [r7, #4]
 8033dca:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8033dcc:	681b      	ldr	r3, [r3, #0]
 8033dce:	2b00      	cmp	r3, #0
 8033dd0:	d110      	bne.n	8033df4 <tcp_output+0x1d0>
 8033dd2:	687b      	ldr	r3, [r7, #4]
 8033dd4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8033dd6:	891a      	ldrh	r2, [r3, #8]
 8033dd8:	687b      	ldr	r3, [r7, #4]
 8033dda:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8033ddc:	429a      	cmp	r2, r3
 8033dde:	d209      	bcs.n	8033df4 <tcp_output+0x1d0>
 8033de0:	687b      	ldr	r3, [r7, #4]
 8033de2:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 8033de6:	2b00      	cmp	r3, #0
 8033de8:	d004      	beq.n	8033df4 <tcp_output+0x1d0>
 8033dea:	687b      	ldr	r3, [r7, #4]
 8033dec:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8033df0:	2b08      	cmp	r3, #8
 8033df2:	d901      	bls.n	8033df8 <tcp_output+0x1d4>
 8033df4:	2301      	movs	r3, #1
 8033df6:	e000      	b.n	8033dfa <tcp_output+0x1d6>
 8033df8:	2300      	movs	r3, #0
 8033dfa:	2b00      	cmp	r3, #0
 8033dfc:	d106      	bne.n	8033e0c <tcp_output+0x1e8>
        ((pcb->flags & (TF_NAGLEMEMERR | TF_FIN)) == 0)) {
 8033dfe:	687b      	ldr	r3, [r7, #4]
 8033e00:	8b5b      	ldrh	r3, [r3, #26]
 8033e02:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
    if ((tcp_do_output_nagle(pcb) == 0) &&
 8033e06:	2b00      	cmp	r3, #0
 8033e08:	f000 80e4 	beq.w	8033fd4 <tcp_output+0x3b0>
                                 pcb->lastack,
                                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack, i));
    ++i;
#endif /* TCP_CWND_DEBUG */

    if (pcb->state != SYN_SENT) {
 8033e0c:	687b      	ldr	r3, [r7, #4]
 8033e0e:	7d1b      	ldrb	r3, [r3, #20]
 8033e10:	2b02      	cmp	r3, #2
 8033e12:	d00d      	beq.n	8033e30 <tcp_output+0x20c>
      TCPH_SET_FLAG(seg->tcphdr, TCP_ACK);
 8033e14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8033e16:	68db      	ldr	r3, [r3, #12]
 8033e18:	899b      	ldrh	r3, [r3, #12]
 8033e1a:	b29c      	uxth	r4, r3
 8033e1c:	2010      	movs	r0, #16
 8033e1e:	f7f8 fd81 	bl	802c924 <lwip_htons>
 8033e22:	4603      	mov	r3, r0
 8033e24:	461a      	mov	r2, r3
 8033e26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8033e28:	68db      	ldr	r3, [r3, #12]
 8033e2a:	4322      	orrs	r2, r4
 8033e2c:	b292      	uxth	r2, r2
 8033e2e:	819a      	strh	r2, [r3, #12]
    }

    err = tcp_output_segment(seg, pcb, netif);
 8033e30:	697a      	ldr	r2, [r7, #20]
 8033e32:	6879      	ldr	r1, [r7, #4]
 8033e34:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8033e36:	f000 f909 	bl	803404c <tcp_output_segment>
 8033e3a:	4603      	mov	r3, r0
 8033e3c:	73fb      	strb	r3, [r7, #15]
    if (err != ERR_OK) {
 8033e3e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8033e42:	2b00      	cmp	r3, #0
 8033e44:	d016      	beq.n	8033e74 <tcp_output+0x250>
      /* segment could not be sent, for whatever reason */
      tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8033e46:	687b      	ldr	r3, [r7, #4]
 8033e48:	8b5b      	ldrh	r3, [r3, #26]
 8033e4a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8033e4e:	b29a      	uxth	r2, r3
 8033e50:	687b      	ldr	r3, [r7, #4]
 8033e52:	835a      	strh	r2, [r3, #26]
      return err;
 8033e54:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8033e58:	e0d3      	b.n	8034002 <tcp_output+0x3de>
 8033e5a:	bf00      	nop
 8033e5c:	0803c128 	.word	0x0803c128
 8033e60:	0803c66c 	.word	0x0803c66c
 8033e64:	0803c17c 	.word	0x0803c17c
 8033e68:	0803c684 	.word	0x0803c684
 8033e6c:	2000ef4c 	.word	0x2000ef4c
 8033e70:	0803c6ac 	.word	0x0803c6ac
    }
#if TCP_OVERSIZE_DBGCHECK
    seg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */
    pcb->unsent = seg->next;
 8033e74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8033e76:	681a      	ldr	r2, [r3, #0]
 8033e78:	687b      	ldr	r3, [r7, #4]
 8033e7a:	66da      	str	r2, [r3, #108]	; 0x6c
    if (pcb->state != SYN_SENT) {
 8033e7c:	687b      	ldr	r3, [r7, #4]
 8033e7e:	7d1b      	ldrb	r3, [r3, #20]
 8033e80:	2b02      	cmp	r3, #2
 8033e82:	d006      	beq.n	8033e92 <tcp_output+0x26e>
      tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8033e84:	687b      	ldr	r3, [r7, #4]
 8033e86:	8b5b      	ldrh	r3, [r3, #26]
 8033e88:	f023 0303 	bic.w	r3, r3, #3
 8033e8c:	b29a      	uxth	r2, r3
 8033e8e:	687b      	ldr	r3, [r7, #4]
 8033e90:	835a      	strh	r2, [r3, #26]
    }
    snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 8033e92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8033e94:	68db      	ldr	r3, [r3, #12]
 8033e96:	685b      	ldr	r3, [r3, #4]
 8033e98:	4618      	mov	r0, r3
 8033e9a:	f7f8 fd58 	bl	802c94e <lwip_htonl>
 8033e9e:	4604      	mov	r4, r0
 8033ea0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8033ea2:	891b      	ldrh	r3, [r3, #8]
 8033ea4:	461d      	mov	r5, r3
 8033ea6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8033ea8:	68db      	ldr	r3, [r3, #12]
 8033eaa:	899b      	ldrh	r3, [r3, #12]
 8033eac:	b29b      	uxth	r3, r3
 8033eae:	4618      	mov	r0, r3
 8033eb0:	f7f8 fd38 	bl	802c924 <lwip_htons>
 8033eb4:	4603      	mov	r3, r0
 8033eb6:	b2db      	uxtb	r3, r3
 8033eb8:	f003 0303 	and.w	r3, r3, #3
 8033ebc:	2b00      	cmp	r3, #0
 8033ebe:	d001      	beq.n	8033ec4 <tcp_output+0x2a0>
 8033ec0:	2301      	movs	r3, #1
 8033ec2:	e000      	b.n	8033ec6 <tcp_output+0x2a2>
 8033ec4:	2300      	movs	r3, #0
 8033ec6:	442b      	add	r3, r5
 8033ec8:	4423      	add	r3, r4
 8033eca:	60bb      	str	r3, [r7, #8]
    if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 8033ecc:	687b      	ldr	r3, [r7, #4]
 8033ece:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8033ed0:	68bb      	ldr	r3, [r7, #8]
 8033ed2:	1ad3      	subs	r3, r2, r3
 8033ed4:	2b00      	cmp	r3, #0
 8033ed6:	da02      	bge.n	8033ede <tcp_output+0x2ba>
      pcb->snd_nxt = snd_nxt;
 8033ed8:	687b      	ldr	r3, [r7, #4]
 8033eda:	68ba      	ldr	r2, [r7, #8]
 8033edc:	651a      	str	r2, [r3, #80]	; 0x50
    }
    /* put segment on unacknowledged list if length > 0 */
    if (TCP_TCPLEN(seg) > 0) {
 8033ede:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8033ee0:	891b      	ldrh	r3, [r3, #8]
 8033ee2:	461c      	mov	r4, r3
 8033ee4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8033ee6:	68db      	ldr	r3, [r3, #12]
 8033ee8:	899b      	ldrh	r3, [r3, #12]
 8033eea:	b29b      	uxth	r3, r3
 8033eec:	4618      	mov	r0, r3
 8033eee:	f7f8 fd19 	bl	802c924 <lwip_htons>
 8033ef2:	4603      	mov	r3, r0
 8033ef4:	b2db      	uxtb	r3, r3
 8033ef6:	f003 0303 	and.w	r3, r3, #3
 8033efa:	2b00      	cmp	r3, #0
 8033efc:	d001      	beq.n	8033f02 <tcp_output+0x2de>
 8033efe:	2301      	movs	r3, #1
 8033f00:	e000      	b.n	8033f04 <tcp_output+0x2e0>
 8033f02:	2300      	movs	r3, #0
 8033f04:	4423      	add	r3, r4
 8033f06:	2b00      	cmp	r3, #0
 8033f08:	d049      	beq.n	8033f9e <tcp_output+0x37a>
      seg->next = NULL;
 8033f0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8033f0c:	2200      	movs	r2, #0
 8033f0e:	601a      	str	r2, [r3, #0]
      /* unacked list is empty? */
      if (pcb->unacked == NULL) {
 8033f10:	687b      	ldr	r3, [r7, #4]
 8033f12:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8033f14:	2b00      	cmp	r3, #0
 8033f16:	d105      	bne.n	8033f24 <tcp_output+0x300>
        pcb->unacked = seg;
 8033f18:	687b      	ldr	r3, [r7, #4]
 8033f1a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8033f1c:	671a      	str	r2, [r3, #112]	; 0x70
        useg = seg;
 8033f1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8033f20:	623b      	str	r3, [r7, #32]
 8033f22:	e03f      	b.n	8033fa4 <tcp_output+0x380>
        /* unacked list is not empty? */
      } else {
        /* In the case of fast retransmit, the packet should not go to the tail
         * of the unacked queue, but rather somewhere before it. We need to check for
         * this case. -STJ Jul 27, 2004 */
        if (TCP_SEQ_LT(lwip_ntohl(seg->tcphdr->seqno), lwip_ntohl(useg->tcphdr->seqno))) {
 8033f24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8033f26:	68db      	ldr	r3, [r3, #12]
 8033f28:	685b      	ldr	r3, [r3, #4]
 8033f2a:	4618      	mov	r0, r3
 8033f2c:	f7f8 fd0f 	bl	802c94e <lwip_htonl>
 8033f30:	4604      	mov	r4, r0
 8033f32:	6a3b      	ldr	r3, [r7, #32]
 8033f34:	68db      	ldr	r3, [r3, #12]
 8033f36:	685b      	ldr	r3, [r3, #4]
 8033f38:	4618      	mov	r0, r3
 8033f3a:	f7f8 fd08 	bl	802c94e <lwip_htonl>
 8033f3e:	4603      	mov	r3, r0
 8033f40:	1ae3      	subs	r3, r4, r3
 8033f42:	2b00      	cmp	r3, #0
 8033f44:	da24      	bge.n	8033f90 <tcp_output+0x36c>
          /* add segment to before tail of unacked list, keeping the list sorted */
          struct tcp_seg **cur_seg = &(pcb->unacked);
 8033f46:	687b      	ldr	r3, [r7, #4]
 8033f48:	3370      	adds	r3, #112	; 0x70
 8033f4a:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 8033f4c:	e002      	b.n	8033f54 <tcp_output+0x330>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
            cur_seg = &((*cur_seg)->next );
 8033f4e:	69fb      	ldr	r3, [r7, #28]
 8033f50:	681b      	ldr	r3, [r3, #0]
 8033f52:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 8033f54:	69fb      	ldr	r3, [r7, #28]
 8033f56:	681b      	ldr	r3, [r3, #0]
 8033f58:	2b00      	cmp	r3, #0
 8033f5a:	d011      	beq.n	8033f80 <tcp_output+0x35c>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 8033f5c:	69fb      	ldr	r3, [r7, #28]
 8033f5e:	681b      	ldr	r3, [r3, #0]
 8033f60:	68db      	ldr	r3, [r3, #12]
 8033f62:	685b      	ldr	r3, [r3, #4]
 8033f64:	4618      	mov	r0, r3
 8033f66:	f7f8 fcf2 	bl	802c94e <lwip_htonl>
 8033f6a:	4604      	mov	r4, r0
 8033f6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8033f6e:	68db      	ldr	r3, [r3, #12]
 8033f70:	685b      	ldr	r3, [r3, #4]
 8033f72:	4618      	mov	r0, r3
 8033f74:	f7f8 fceb 	bl	802c94e <lwip_htonl>
 8033f78:	4603      	mov	r3, r0
 8033f7a:	1ae3      	subs	r3, r4, r3
          while (*cur_seg &&
 8033f7c:	2b00      	cmp	r3, #0
 8033f7e:	dbe6      	blt.n	8033f4e <tcp_output+0x32a>
          }
          seg->next = (*cur_seg);
 8033f80:	69fb      	ldr	r3, [r7, #28]
 8033f82:	681a      	ldr	r2, [r3, #0]
 8033f84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8033f86:	601a      	str	r2, [r3, #0]
          (*cur_seg) = seg;
 8033f88:	69fb      	ldr	r3, [r7, #28]
 8033f8a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8033f8c:	601a      	str	r2, [r3, #0]
 8033f8e:	e009      	b.n	8033fa4 <tcp_output+0x380>
        } else {
          /* add segment to tail of unacked list */
          useg->next = seg;
 8033f90:	6a3b      	ldr	r3, [r7, #32]
 8033f92:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8033f94:	601a      	str	r2, [r3, #0]
          useg = useg->next;
 8033f96:	6a3b      	ldr	r3, [r7, #32]
 8033f98:	681b      	ldr	r3, [r3, #0]
 8033f9a:	623b      	str	r3, [r7, #32]
 8033f9c:	e002      	b.n	8033fa4 <tcp_output+0x380>
        }
      }
      /* do not queue empty segments on the unacked list */
    } else {
      tcp_seg_free(seg);
 8033f9e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8033fa0:	f7fb fe4f 	bl	802fc42 <tcp_seg_free>
    }
    seg = pcb->unsent;
 8033fa4:	687b      	ldr	r3, [r7, #4]
 8033fa6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8033fa8:	627b      	str	r3, [r7, #36]	; 0x24
  while (seg != NULL &&
 8033faa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8033fac:	2b00      	cmp	r3, #0
 8033fae:	d012      	beq.n	8033fd6 <tcp_output+0x3b2>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
 8033fb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8033fb2:	68db      	ldr	r3, [r3, #12]
 8033fb4:	685b      	ldr	r3, [r3, #4]
 8033fb6:	4618      	mov	r0, r3
 8033fb8:	f7f8 fcc9 	bl	802c94e <lwip_htonl>
 8033fbc:	4602      	mov	r2, r0
 8033fbe:	687b      	ldr	r3, [r7, #4]
 8033fc0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8033fc2:	1ad3      	subs	r3, r2, r3
 8033fc4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8033fc6:	8912      	ldrh	r2, [r2, #8]
 8033fc8:	4413      	add	r3, r2
  while (seg != NULL &&
 8033fca:	69ba      	ldr	r2, [r7, #24]
 8033fcc:	429a      	cmp	r2, r3
 8033fce:	f4bf aed9 	bcs.w	8033d84 <tcp_output+0x160>
 8033fd2:	e000      	b.n	8033fd6 <tcp_output+0x3b2>
      break;
 8033fd4:	bf00      	nop
  }
#if TCP_OVERSIZE
  if (pcb->unsent == NULL) {
 8033fd6:	687b      	ldr	r3, [r7, #4]
 8033fd8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8033fda:	2b00      	cmp	r3, #0
 8033fdc:	d108      	bne.n	8033ff0 <tcp_output+0x3cc>
    /* last unsent has been removed, reset unsent_oversize */
    pcb->unsent_oversize = 0;
 8033fde:	687b      	ldr	r3, [r7, #4]
 8033fe0:	2200      	movs	r2, #0
 8033fe2:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
 8033fe6:	e004      	b.n	8033ff2 <tcp_output+0x3ce>
    goto output_done;
 8033fe8:	bf00      	nop
 8033fea:	e002      	b.n	8033ff2 <tcp_output+0x3ce>
    goto output_done;
 8033fec:	bf00      	nop
 8033fee:	e000      	b.n	8033ff2 <tcp_output+0x3ce>
  }
#endif /* TCP_OVERSIZE */

output_done:
 8033ff0:	bf00      	nop
  tcp_clear_flags(pcb, TF_NAGLEMEMERR);
 8033ff2:	687b      	ldr	r3, [r7, #4]
 8033ff4:	8b5b      	ldrh	r3, [r3, #26]
 8033ff6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8033ffa:	b29a      	uxth	r2, r3
 8033ffc:	687b      	ldr	r3, [r7, #4]
 8033ffe:	835a      	strh	r2, [r3, #26]
  return ERR_OK;
 8034000:	2300      	movs	r3, #0
}
 8034002:	4618      	mov	r0, r3
 8034004:	3728      	adds	r7, #40	; 0x28
 8034006:	46bd      	mov	sp, r7
 8034008:	bdb0      	pop	{r4, r5, r7, pc}
 803400a:	bf00      	nop

0803400c <tcp_output_segment_busy>:
 * @arg seg the tcp segment to check
 * @return 1 if ref != 1, 0 if ref == 1
 */
static int
tcp_output_segment_busy(const struct tcp_seg *seg)
{
 803400c:	b580      	push	{r7, lr}
 803400e:	b082      	sub	sp, #8
 8034010:	af00      	add	r7, sp, #0
 8034012:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_output_segment_busy: invalid seg", seg != NULL);
 8034014:	687b      	ldr	r3, [r7, #4]
 8034016:	2b00      	cmp	r3, #0
 8034018:	d106      	bne.n	8034028 <tcp_output_segment_busy+0x1c>
 803401a:	4b09      	ldr	r3, [pc, #36]	; (8034040 <tcp_output_segment_busy+0x34>)
 803401c:	f240 529a 	movw	r2, #1434	; 0x59a
 8034020:	4908      	ldr	r1, [pc, #32]	; (8034044 <tcp_output_segment_busy+0x38>)
 8034022:	4809      	ldr	r0, [pc, #36]	; (8034048 <tcp_output_segment_busy+0x3c>)
 8034024:	f005 f820 	bl	8039068 <iprintf>

  /* We only need to check the first pbuf here:
     If a pbuf is queued for transmission, a driver calls pbuf_ref(),
     which only changes the ref count of the first pbuf */
  if (seg->p->ref != 1) {
 8034028:	687b      	ldr	r3, [r7, #4]
 803402a:	685b      	ldr	r3, [r3, #4]
 803402c:	7b9b      	ldrb	r3, [r3, #14]
 803402e:	2b01      	cmp	r3, #1
 8034030:	d001      	beq.n	8034036 <tcp_output_segment_busy+0x2a>
    /* other reference found */
    return 1;
 8034032:	2301      	movs	r3, #1
 8034034:	e000      	b.n	8034038 <tcp_output_segment_busy+0x2c>
  }
  /* no other references found */
  return 0;
 8034036:	2300      	movs	r3, #0
}
 8034038:	4618      	mov	r0, r3
 803403a:	3708      	adds	r7, #8
 803403c:	46bd      	mov	sp, r7
 803403e:	bd80      	pop	{r7, pc}
 8034040:	0803c128 	.word	0x0803c128
 8034044:	0803c6c4 	.word	0x0803c6c4
 8034048:	0803c17c 	.word	0x0803c17c

0803404c <tcp_output_segment>:
 * @param pcb the tcp_pcb for the TCP connection used to send the segment
 * @param netif the netif used to send the segment
 */
static err_t
tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif)
{
 803404c:	b5b0      	push	{r4, r5, r7, lr}
 803404e:	b08c      	sub	sp, #48	; 0x30
 8034050:	af04      	add	r7, sp, #16
 8034052:	60f8      	str	r0, [r7, #12]
 8034054:	60b9      	str	r1, [r7, #8]
 8034056:	607a      	str	r2, [r7, #4]
  u32_t *opts;
#if TCP_CHECKSUM_ON_COPY
  int seg_chksum_was_swapped = 0;
#endif

  LWIP_ASSERT("tcp_output_segment: invalid seg", seg != NULL);
 8034058:	68fb      	ldr	r3, [r7, #12]
 803405a:	2b00      	cmp	r3, #0
 803405c:	d106      	bne.n	803406c <tcp_output_segment+0x20>
 803405e:	4b67      	ldr	r3, [pc, #412]	; (80341fc <tcp_output_segment+0x1b0>)
 8034060:	f44f 62b7 	mov.w	r2, #1464	; 0x5b8
 8034064:	4966      	ldr	r1, [pc, #408]	; (8034200 <tcp_output_segment+0x1b4>)
 8034066:	4867      	ldr	r0, [pc, #412]	; (8034204 <tcp_output_segment+0x1b8>)
 8034068:	f004 fffe 	bl	8039068 <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid pcb", pcb != NULL);
 803406c:	68bb      	ldr	r3, [r7, #8]
 803406e:	2b00      	cmp	r3, #0
 8034070:	d106      	bne.n	8034080 <tcp_output_segment+0x34>
 8034072:	4b62      	ldr	r3, [pc, #392]	; (80341fc <tcp_output_segment+0x1b0>)
 8034074:	f240 52b9 	movw	r2, #1465	; 0x5b9
 8034078:	4963      	ldr	r1, [pc, #396]	; (8034208 <tcp_output_segment+0x1bc>)
 803407a:	4862      	ldr	r0, [pc, #392]	; (8034204 <tcp_output_segment+0x1b8>)
 803407c:	f004 fff4 	bl	8039068 <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid netif", netif != NULL);
 8034080:	687b      	ldr	r3, [r7, #4]
 8034082:	2b00      	cmp	r3, #0
 8034084:	d106      	bne.n	8034094 <tcp_output_segment+0x48>
 8034086:	4b5d      	ldr	r3, [pc, #372]	; (80341fc <tcp_output_segment+0x1b0>)
 8034088:	f240 52ba 	movw	r2, #1466	; 0x5ba
 803408c:	495f      	ldr	r1, [pc, #380]	; (803420c <tcp_output_segment+0x1c0>)
 803408e:	485d      	ldr	r0, [pc, #372]	; (8034204 <tcp_output_segment+0x1b8>)
 8034090:	f004 ffea 	bl	8039068 <iprintf>

  if (tcp_output_segment_busy(seg)) {
 8034094:	68f8      	ldr	r0, [r7, #12]
 8034096:	f7ff ffb9 	bl	803400c <tcp_output_segment_busy>
 803409a:	4603      	mov	r3, r0
 803409c:	2b00      	cmp	r3, #0
 803409e:	d001      	beq.n	80340a4 <tcp_output_segment+0x58>
    /* This should not happen: rexmit functions should have checked this.
       However, since this function modifies p->len, we must not continue in this case. */
    LWIP_DEBUGF(TCP_RTO_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_output_segment: segment busy\n"));
    return ERR_OK;
 80340a0:	2300      	movs	r3, #0
 80340a2:	e0a7      	b.n	80341f4 <tcp_output_segment+0x1a8>
  }

  /* The TCP header has already been constructed, but the ackno and
   wnd fields remain. */
  seg->tcphdr->ackno = lwip_htonl(pcb->rcv_nxt);
 80340a4:	68bb      	ldr	r3, [r7, #8]
 80340a6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80340a8:	68fb      	ldr	r3, [r7, #12]
 80340aa:	68dc      	ldr	r4, [r3, #12]
 80340ac:	4610      	mov	r0, r2
 80340ae:	f7f8 fc4e 	bl	802c94e <lwip_htonl>
 80340b2:	4603      	mov	r3, r0
 80340b4:	60a3      	str	r3, [r4, #8]
       the window scale option) is never scaled. */
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(pcb->rcv_ann_wnd));
  } else
#endif /* LWIP_WND_SCALE */
  {
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 80340b6:	68bb      	ldr	r3, [r7, #8]
 80340b8:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 80340ba:	68fb      	ldr	r3, [r7, #12]
 80340bc:	68dc      	ldr	r4, [r3, #12]
 80340be:	4610      	mov	r0, r2
 80340c0:	f7f8 fc30 	bl	802c924 <lwip_htons>
 80340c4:	4603      	mov	r3, r0
 80340c6:	81e3      	strh	r3, [r4, #14]
  }

  pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 80340c8:	68bb      	ldr	r3, [r7, #8]
 80340ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80340cc:	68ba      	ldr	r2, [r7, #8]
 80340ce:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 80340d0:	441a      	add	r2, r3
 80340d2:	68bb      	ldr	r3, [r7, #8]
 80340d4:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Add any requested options.  NB MSS option is only set on SYN
     packets, so ignore it here */
  /* cast through void* to get rid of alignment warnings */
  opts = (u32_t *)(void *)(seg->tcphdr + 1);
 80340d6:	68fb      	ldr	r3, [r7, #12]
 80340d8:	68db      	ldr	r3, [r3, #12]
 80340da:	3314      	adds	r3, #20
 80340dc:	61fb      	str	r3, [r7, #28]
  if (seg->flags & TF_SEG_OPTS_MSS) {
 80340de:	68fb      	ldr	r3, [r7, #12]
 80340e0:	7a9b      	ldrb	r3, [r3, #10]
 80340e2:	f003 0301 	and.w	r3, r3, #1
 80340e6:	2b00      	cmp	r3, #0
 80340e8:	d015      	beq.n	8034116 <tcp_output_segment+0xca>
    u16_t mss;
#if TCP_CALCULATE_EFF_SEND_MSS
    mss = tcp_eff_send_mss_netif(TCP_MSS, netif, &pcb->remote_ip);
 80340ea:	68bb      	ldr	r3, [r7, #8]
 80340ec:	3304      	adds	r3, #4
 80340ee:	461a      	mov	r2, r3
 80340f0:	6879      	ldr	r1, [r7, #4]
 80340f2:	f44f 7006 	mov.w	r0, #536	; 0x218
 80340f6:	f7fc f993 	bl	8030420 <tcp_eff_send_mss_netif>
 80340fa:	4603      	mov	r3, r0
 80340fc:	837b      	strh	r3, [r7, #26]
#else /* TCP_CALCULATE_EFF_SEND_MSS */
    mss = TCP_MSS;
#endif /* TCP_CALCULATE_EFF_SEND_MSS */
    *opts = TCP_BUILD_MSS_OPTION(mss);
 80340fe:	8b7b      	ldrh	r3, [r7, #26]
 8034100:	f043 7301 	orr.w	r3, r3, #33816576	; 0x2040000
 8034104:	4618      	mov	r0, r3
 8034106:	f7f8 fc22 	bl	802c94e <lwip_htonl>
 803410a:	4602      	mov	r2, r0
 803410c:	69fb      	ldr	r3, [r7, #28]
 803410e:	601a      	str	r2, [r3, #0]
    opts += 1;
 8034110:	69fb      	ldr	r3, [r7, #28]
 8034112:	3304      	adds	r3, #4
 8034114:	61fb      	str	r3, [r7, #28]
  }
#endif

  /* Set retransmission timer running if it is not currently enabled
     This must be set before checking the route. */
  if (pcb->rtime < 0) {
 8034116:	68bb      	ldr	r3, [r7, #8]
 8034118:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 803411c:	2b00      	cmp	r3, #0
 803411e:	da02      	bge.n	8034126 <tcp_output_segment+0xda>
    pcb->rtime = 0;
 8034120:	68bb      	ldr	r3, [r7, #8]
 8034122:	2200      	movs	r2, #0
 8034124:	861a      	strh	r2, [r3, #48]	; 0x30
  }

  if (pcb->rttest == 0) {
 8034126:	68bb      	ldr	r3, [r7, #8]
 8034128:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 803412a:	2b00      	cmp	r3, #0
 803412c:	d10c      	bne.n	8034148 <tcp_output_segment+0xfc>
    pcb->rttest = tcp_ticks;
 803412e:	4b38      	ldr	r3, [pc, #224]	; (8034210 <tcp_output_segment+0x1c4>)
 8034130:	681a      	ldr	r2, [r3, #0]
 8034132:	68bb      	ldr	r3, [r7, #8]
 8034134:	635a      	str	r2, [r3, #52]	; 0x34
    pcb->rtseq = lwip_ntohl(seg->tcphdr->seqno);
 8034136:	68fb      	ldr	r3, [r7, #12]
 8034138:	68db      	ldr	r3, [r3, #12]
 803413a:	685b      	ldr	r3, [r3, #4]
 803413c:	4618      	mov	r0, r3
 803413e:	f7f8 fc06 	bl	802c94e <lwip_htonl>
 8034142:	4602      	mov	r2, r0
 8034144:	68bb      	ldr	r3, [r7, #8]
 8034146:	639a      	str	r2, [r3, #56]	; 0x38
  }
  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output_segment: %"U32_F":%"U32_F"\n",
                                 lwip_htonl(seg->tcphdr->seqno), lwip_htonl(seg->tcphdr->seqno) +
                                 seg->len));

  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
 8034148:	68fb      	ldr	r3, [r7, #12]
 803414a:	68da      	ldr	r2, [r3, #12]
 803414c:	68fb      	ldr	r3, [r7, #12]
 803414e:	685b      	ldr	r3, [r3, #4]
 8034150:	685b      	ldr	r3, [r3, #4]
 8034152:	1ad3      	subs	r3, r2, r3
 8034154:	833b      	strh	r3, [r7, #24]
  if (len == 0) {
    /** Exclude retransmitted segments from this count. */
    MIB2_STATS_INC(mib2.tcpoutsegs);
  }

  seg->p->len -= len;
 8034156:	68fb      	ldr	r3, [r7, #12]
 8034158:	685b      	ldr	r3, [r3, #4]
 803415a:	8959      	ldrh	r1, [r3, #10]
 803415c:	68fb      	ldr	r3, [r7, #12]
 803415e:	685b      	ldr	r3, [r3, #4]
 8034160:	8b3a      	ldrh	r2, [r7, #24]
 8034162:	1a8a      	subs	r2, r1, r2
 8034164:	b292      	uxth	r2, r2
 8034166:	815a      	strh	r2, [r3, #10]
  seg->p->tot_len -= len;
 8034168:	68fb      	ldr	r3, [r7, #12]
 803416a:	685b      	ldr	r3, [r3, #4]
 803416c:	8919      	ldrh	r1, [r3, #8]
 803416e:	68fb      	ldr	r3, [r7, #12]
 8034170:	685b      	ldr	r3, [r3, #4]
 8034172:	8b3a      	ldrh	r2, [r7, #24]
 8034174:	1a8a      	subs	r2, r1, r2
 8034176:	b292      	uxth	r2, r2
 8034178:	811a      	strh	r2, [r3, #8]

  seg->p->payload = seg->tcphdr;
 803417a:	68fb      	ldr	r3, [r7, #12]
 803417c:	685b      	ldr	r3, [r3, #4]
 803417e:	68fa      	ldr	r2, [r7, #12]
 8034180:	68d2      	ldr	r2, [r2, #12]
 8034182:	605a      	str	r2, [r3, #4]

  seg->tcphdr->chksum = 0;
 8034184:	68fb      	ldr	r3, [r7, #12]
 8034186:	68db      	ldr	r3, [r3, #12]
 8034188:	2200      	movs	r2, #0
 803418a:	741a      	strb	r2, [r3, #16]
 803418c:	2200      	movs	r2, #0
 803418e:	745a      	strb	r2, [r3, #17]

#ifdef LWIP_HOOK_TCP_OUT_ADD_TCPOPTS
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(seg->p, seg->tcphdr, pcb, opts);
#endif
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(seg->tcphdr + 1)) + LWIP_TCP_OPT_LENGTH_SEGMENT(seg->flags, pcb));
 8034190:	68fb      	ldr	r3, [r7, #12]
 8034192:	68db      	ldr	r3, [r3, #12]
 8034194:	f103 0214 	add.w	r2, r3, #20
 8034198:	68fb      	ldr	r3, [r7, #12]
 803419a:	7a9b      	ldrb	r3, [r3, #10]
 803419c:	009b      	lsls	r3, r3, #2
 803419e:	f003 0304 	and.w	r3, r3, #4
 80341a2:	4413      	add	r3, r2
 80341a4:	69fa      	ldr	r2, [r7, #28]
 80341a6:	429a      	cmp	r2, r3
 80341a8:	d006      	beq.n	80341b8 <tcp_output_segment+0x16c>
 80341aa:	4b14      	ldr	r3, [pc, #80]	; (80341fc <tcp_output_segment+0x1b0>)
 80341ac:	f240 621c 	movw	r2, #1564	; 0x61c
 80341b0:	4918      	ldr	r1, [pc, #96]	; (8034214 <tcp_output_segment+0x1c8>)
 80341b2:	4814      	ldr	r0, [pc, #80]	; (8034204 <tcp_output_segment+0x1b8>)
 80341b4:	f004 ff58 	bl	8039068 <iprintf>
    seg->tcphdr->chksum = ip_chksum_pseudo(seg->p, IP_PROTO_TCP,
                                           seg->p->tot_len, &pcb->local_ip, &pcb->remote_ip);
#endif /* TCP_CHECKSUM_ON_COPY */
  }
#endif /* CHECKSUM_GEN_TCP */
  TCP_STATS_INC(tcp.xmit);
 80341b8:	4b17      	ldr	r3, [pc, #92]	; (8034218 <tcp_output_segment+0x1cc>)
 80341ba:	f8b3 3090 	ldrh.w	r3, [r3, #144]	; 0x90
 80341be:	3301      	adds	r3, #1
 80341c0:	b29a      	uxth	r2, r3
 80341c2:	4b15      	ldr	r3, [pc, #84]	; (8034218 <tcp_output_segment+0x1cc>)
 80341c4:	f8a3 2090 	strh.w	r2, [r3, #144]	; 0x90

  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if(seg->p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl,
 80341c8:	68fb      	ldr	r3, [r7, #12]
 80341ca:	6858      	ldr	r0, [r3, #4]
 80341cc:	68b9      	ldr	r1, [r7, #8]
 80341ce:	68bb      	ldr	r3, [r7, #8]
 80341d0:	1d1c      	adds	r4, r3, #4
 80341d2:	68bb      	ldr	r3, [r7, #8]
 80341d4:	7add      	ldrb	r5, [r3, #11]
 80341d6:	68bb      	ldr	r3, [r7, #8]
 80341d8:	7a9b      	ldrb	r3, [r3, #10]
 80341da:	687a      	ldr	r2, [r7, #4]
 80341dc:	9202      	str	r2, [sp, #8]
 80341de:	2206      	movs	r2, #6
 80341e0:	9201      	str	r2, [sp, #4]
 80341e2:	9300      	str	r3, [sp, #0]
 80341e4:	462b      	mov	r3, r5
 80341e6:	4622      	mov	r2, r4
 80341e8:	f002 fec6 	bl	8036f78 <ip4_output_if>
 80341ec:	4603      	mov	r3, r0
 80341ee:	75fb      	strb	r3, [r7, #23]
    seg->chksum = SWAP_BYTES_IN_WORD(seg->chksum);
    seg->chksum_swapped = 1;
  }
#endif

  return err;
 80341f0:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80341f4:	4618      	mov	r0, r3
 80341f6:	3720      	adds	r7, #32
 80341f8:	46bd      	mov	sp, r7
 80341fa:	bdb0      	pop	{r4, r5, r7, pc}
 80341fc:	0803c128 	.word	0x0803c128
 8034200:	0803c6ec 	.word	0x0803c6ec
 8034204:	0803c17c 	.word	0x0803c17c
 8034208:	0803c70c 	.word	0x0803c70c
 803420c:	0803c72c 	.word	0x0803c72c
 8034210:	2000ef00 	.word	0x2000ef00
 8034214:	0803c750 	.word	0x0803c750
 8034218:	2000ee04 	.word	0x2000ee04

0803421c <tcp_rexmit_rto_prepare>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
err_t
tcp_rexmit_rto_prepare(struct tcp_pcb *pcb)
{
 803421c:	b5b0      	push	{r4, r5, r7, lr}
 803421e:	b084      	sub	sp, #16
 8034220:	af00      	add	r7, sp, #0
 8034222:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;

  LWIP_ASSERT("tcp_rexmit_rto_prepare: invalid pcb", pcb != NULL);
 8034224:	687b      	ldr	r3, [r7, #4]
 8034226:	2b00      	cmp	r3, #0
 8034228:	d106      	bne.n	8034238 <tcp_rexmit_rto_prepare+0x1c>
 803422a:	4b31      	ldr	r3, [pc, #196]	; (80342f0 <tcp_rexmit_rto_prepare+0xd4>)
 803422c:	f240 6263 	movw	r2, #1635	; 0x663
 8034230:	4930      	ldr	r1, [pc, #192]	; (80342f4 <tcp_rexmit_rto_prepare+0xd8>)
 8034232:	4831      	ldr	r0, [pc, #196]	; (80342f8 <tcp_rexmit_rto_prepare+0xdc>)
 8034234:	f004 ff18 	bl	8039068 <iprintf>

  if (pcb->unacked == NULL) {
 8034238:	687b      	ldr	r3, [r7, #4]
 803423a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 803423c:	2b00      	cmp	r3, #0
 803423e:	d102      	bne.n	8034246 <tcp_rexmit_rto_prepare+0x2a>
    return ERR_VAL;
 8034240:	f06f 0305 	mvn.w	r3, #5
 8034244:	e050      	b.n	80342e8 <tcp_rexmit_rto_prepare+0xcc>

  /* Move all unacked segments to the head of the unsent queue.
     However, give up if any of the unsent pbufs are still referenced by the
     netif driver due to deferred transmission. No point loading the link further
     if it is struggling to flush its buffered writes. */
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 8034246:	687b      	ldr	r3, [r7, #4]
 8034248:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 803424a:	60fb      	str	r3, [r7, #12]
 803424c:	e00b      	b.n	8034266 <tcp_rexmit_rto_prepare+0x4a>
    if (tcp_output_segment_busy(seg)) {
 803424e:	68f8      	ldr	r0, [r7, #12]
 8034250:	f7ff fedc 	bl	803400c <tcp_output_segment_busy>
 8034254:	4603      	mov	r3, r0
 8034256:	2b00      	cmp	r3, #0
 8034258:	d002      	beq.n	8034260 <tcp_rexmit_rto_prepare+0x44>
      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
      return ERR_VAL;
 803425a:	f06f 0305 	mvn.w	r3, #5
 803425e:	e043      	b.n	80342e8 <tcp_rexmit_rto_prepare+0xcc>
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 8034260:	68fb      	ldr	r3, [r7, #12]
 8034262:	681b      	ldr	r3, [r3, #0]
 8034264:	60fb      	str	r3, [r7, #12]
 8034266:	68fb      	ldr	r3, [r7, #12]
 8034268:	681b      	ldr	r3, [r3, #0]
 803426a:	2b00      	cmp	r3, #0
 803426c:	d1ef      	bne.n	803424e <tcp_rexmit_rto_prepare+0x32>
    }
  }
  if (tcp_output_segment_busy(seg)) {
 803426e:	68f8      	ldr	r0, [r7, #12]
 8034270:	f7ff fecc 	bl	803400c <tcp_output_segment_busy>
 8034274:	4603      	mov	r3, r0
 8034276:	2b00      	cmp	r3, #0
 8034278:	d002      	beq.n	8034280 <tcp_rexmit_rto_prepare+0x64>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
    return ERR_VAL;
 803427a:	f06f 0305 	mvn.w	r3, #5
 803427e:	e033      	b.n	80342e8 <tcp_rexmit_rto_prepare+0xcc>
  }
  /* concatenate unsent queue after unacked queue */
  seg->next = pcb->unsent;
 8034280:	687b      	ldr	r3, [r7, #4]
 8034282:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8034284:	68fb      	ldr	r3, [r7, #12]
 8034286:	601a      	str	r2, [r3, #0]
  if (pcb->unsent == NULL) {
    pcb->unsent_oversize = seg->oversize_left;
  }
#endif /* TCP_OVERSIZE_DBGCHECK */
  /* unsent queue is the concatenated queue (of unacked, unsent) */
  pcb->unsent = pcb->unacked;
 8034288:	687b      	ldr	r3, [r7, #4]
 803428a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 803428c:	687b      	ldr	r3, [r7, #4]
 803428e:	66da      	str	r2, [r3, #108]	; 0x6c
  /* unacked queue is now empty */
  pcb->unacked = NULL;
 8034290:	687b      	ldr	r3, [r7, #4]
 8034292:	2200      	movs	r2, #0
 8034294:	671a      	str	r2, [r3, #112]	; 0x70

  /* Mark RTO in-progress */
  tcp_set_flags(pcb, TF_RTO);
 8034296:	687b      	ldr	r3, [r7, #4]
 8034298:	8b5b      	ldrh	r3, [r3, #26]
 803429a:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 803429e:	b29a      	uxth	r2, r3
 80342a0:	687b      	ldr	r3, [r7, #4]
 80342a2:	835a      	strh	r2, [r3, #26]
  /* Record the next byte following retransmit */
  pcb->rto_end = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 80342a4:	68fb      	ldr	r3, [r7, #12]
 80342a6:	68db      	ldr	r3, [r3, #12]
 80342a8:	685b      	ldr	r3, [r3, #4]
 80342aa:	4618      	mov	r0, r3
 80342ac:	f7f8 fb4f 	bl	802c94e <lwip_htonl>
 80342b0:	4604      	mov	r4, r0
 80342b2:	68fb      	ldr	r3, [r7, #12]
 80342b4:	891b      	ldrh	r3, [r3, #8]
 80342b6:	461d      	mov	r5, r3
 80342b8:	68fb      	ldr	r3, [r7, #12]
 80342ba:	68db      	ldr	r3, [r3, #12]
 80342bc:	899b      	ldrh	r3, [r3, #12]
 80342be:	b29b      	uxth	r3, r3
 80342c0:	4618      	mov	r0, r3
 80342c2:	f7f8 fb2f 	bl	802c924 <lwip_htons>
 80342c6:	4603      	mov	r3, r0
 80342c8:	b2db      	uxtb	r3, r3
 80342ca:	f003 0303 	and.w	r3, r3, #3
 80342ce:	2b00      	cmp	r3, #0
 80342d0:	d001      	beq.n	80342d6 <tcp_rexmit_rto_prepare+0xba>
 80342d2:	2301      	movs	r3, #1
 80342d4:	e000      	b.n	80342d8 <tcp_rexmit_rto_prepare+0xbc>
 80342d6:	2300      	movs	r3, #0
 80342d8:	442b      	add	r3, r5
 80342da:	18e2      	adds	r2, r4, r3
 80342dc:	687b      	ldr	r3, [r7, #4]
 80342de:	64da      	str	r2, [r3, #76]	; 0x4c
  /* Don't take any RTT measurements after retransmitting. */
  pcb->rttest = 0;
 80342e0:	687b      	ldr	r3, [r7, #4]
 80342e2:	2200      	movs	r2, #0
 80342e4:	635a      	str	r2, [r3, #52]	; 0x34

  return ERR_OK;
 80342e6:	2300      	movs	r3, #0
}
 80342e8:	4618      	mov	r0, r3
 80342ea:	3710      	adds	r7, #16
 80342ec:	46bd      	mov	sp, r7
 80342ee:	bdb0      	pop	{r4, r5, r7, pc}
 80342f0:	0803c128 	.word	0x0803c128
 80342f4:	0803c764 	.word	0x0803c764
 80342f8:	0803c17c 	.word	0x0803c17c

080342fc <tcp_rexmit_rto_commit>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto_commit(struct tcp_pcb *pcb)
{
 80342fc:	b580      	push	{r7, lr}
 80342fe:	b082      	sub	sp, #8
 8034300:	af00      	add	r7, sp, #0
 8034302:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto_commit: invalid pcb", pcb != NULL);
 8034304:	687b      	ldr	r3, [r7, #4]
 8034306:	2b00      	cmp	r3, #0
 8034308:	d106      	bne.n	8034318 <tcp_rexmit_rto_commit+0x1c>
 803430a:	4b0d      	ldr	r3, [pc, #52]	; (8034340 <tcp_rexmit_rto_commit+0x44>)
 803430c:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 8034310:	490c      	ldr	r1, [pc, #48]	; (8034344 <tcp_rexmit_rto_commit+0x48>)
 8034312:	480d      	ldr	r0, [pc, #52]	; (8034348 <tcp_rexmit_rto_commit+0x4c>)
 8034314:	f004 fea8 	bl	8039068 <iprintf>

  /* increment number of retransmissions */
  if (pcb->nrtx < 0xFF) {
 8034318:	687b      	ldr	r3, [r7, #4]
 803431a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 803431e:	2bff      	cmp	r3, #255	; 0xff
 8034320:	d007      	beq.n	8034332 <tcp_rexmit_rto_commit+0x36>
    ++pcb->nrtx;
 8034322:	687b      	ldr	r3, [r7, #4]
 8034324:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8034328:	3301      	adds	r3, #1
 803432a:	b2da      	uxtb	r2, r3
 803432c:	687b      	ldr	r3, [r7, #4]
 803432e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }
  /* Do the actual retransmission */
  tcp_output(pcb);
 8034332:	6878      	ldr	r0, [r7, #4]
 8034334:	f7ff fc76 	bl	8033c24 <tcp_output>
}
 8034338:	bf00      	nop
 803433a:	3708      	adds	r7, #8
 803433c:	46bd      	mov	sp, r7
 803433e:	bd80      	pop	{r7, pc}
 8034340:	0803c128 	.word	0x0803c128
 8034344:	0803c788 	.word	0x0803c788
 8034348:	0803c17c 	.word	0x0803c17c

0803434c <tcp_rexmit_rto>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto(struct tcp_pcb *pcb)
{
 803434c:	b580      	push	{r7, lr}
 803434e:	b082      	sub	sp, #8
 8034350:	af00      	add	r7, sp, #0
 8034352:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto: invalid pcb", pcb != NULL);
 8034354:	687b      	ldr	r3, [r7, #4]
 8034356:	2b00      	cmp	r3, #0
 8034358:	d106      	bne.n	8034368 <tcp_rexmit_rto+0x1c>
 803435a:	4b0a      	ldr	r3, [pc, #40]	; (8034384 <tcp_rexmit_rto+0x38>)
 803435c:	f240 62ad 	movw	r2, #1709	; 0x6ad
 8034360:	4909      	ldr	r1, [pc, #36]	; (8034388 <tcp_rexmit_rto+0x3c>)
 8034362:	480a      	ldr	r0, [pc, #40]	; (803438c <tcp_rexmit_rto+0x40>)
 8034364:	f004 fe80 	bl	8039068 <iprintf>

  if (tcp_rexmit_rto_prepare(pcb) == ERR_OK) {
 8034368:	6878      	ldr	r0, [r7, #4]
 803436a:	f7ff ff57 	bl	803421c <tcp_rexmit_rto_prepare>
 803436e:	4603      	mov	r3, r0
 8034370:	2b00      	cmp	r3, #0
 8034372:	d102      	bne.n	803437a <tcp_rexmit_rto+0x2e>
    tcp_rexmit_rto_commit(pcb);
 8034374:	6878      	ldr	r0, [r7, #4]
 8034376:	f7ff ffc1 	bl	80342fc <tcp_rexmit_rto_commit>
  }
}
 803437a:	bf00      	nop
 803437c:	3708      	adds	r7, #8
 803437e:	46bd      	mov	sp, r7
 8034380:	bd80      	pop	{r7, pc}
 8034382:	bf00      	nop
 8034384:	0803c128 	.word	0x0803c128
 8034388:	0803c7ac 	.word	0x0803c7ac
 803438c:	0803c17c 	.word	0x0803c17c

08034390 <tcp_rexmit>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
err_t
tcp_rexmit(struct tcp_pcb *pcb)
{
 8034390:	b590      	push	{r4, r7, lr}
 8034392:	b085      	sub	sp, #20
 8034394:	af00      	add	r7, sp, #0
 8034396:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;
  struct tcp_seg **cur_seg;

  LWIP_ASSERT("tcp_rexmit: invalid pcb", pcb != NULL);
 8034398:	687b      	ldr	r3, [r7, #4]
 803439a:	2b00      	cmp	r3, #0
 803439c:	d106      	bne.n	80343ac <tcp_rexmit+0x1c>
 803439e:	4b2f      	ldr	r3, [pc, #188]	; (803445c <tcp_rexmit+0xcc>)
 80343a0:	f240 62c1 	movw	r2, #1729	; 0x6c1
 80343a4:	492e      	ldr	r1, [pc, #184]	; (8034460 <tcp_rexmit+0xd0>)
 80343a6:	482f      	ldr	r0, [pc, #188]	; (8034464 <tcp_rexmit+0xd4>)
 80343a8:	f004 fe5e 	bl	8039068 <iprintf>

  if (pcb->unacked == NULL) {
 80343ac:	687b      	ldr	r3, [r7, #4]
 80343ae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80343b0:	2b00      	cmp	r3, #0
 80343b2:	d102      	bne.n	80343ba <tcp_rexmit+0x2a>
    return ERR_VAL;
 80343b4:	f06f 0305 	mvn.w	r3, #5
 80343b8:	e04c      	b.n	8034454 <tcp_rexmit+0xc4>
  }

  seg = pcb->unacked;
 80343ba:	687b      	ldr	r3, [r7, #4]
 80343bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80343be:	60bb      	str	r3, [r7, #8]

  /* Give up if the segment is still referenced by the netif driver
     due to deferred transmission. */
  if (tcp_output_segment_busy(seg)) {
 80343c0:	68b8      	ldr	r0, [r7, #8]
 80343c2:	f7ff fe23 	bl	803400c <tcp_output_segment_busy>
 80343c6:	4603      	mov	r3, r0
 80343c8:	2b00      	cmp	r3, #0
 80343ca:	d002      	beq.n	80343d2 <tcp_rexmit+0x42>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit busy\n"));
    return ERR_VAL;
 80343cc:	f06f 0305 	mvn.w	r3, #5
 80343d0:	e040      	b.n	8034454 <tcp_rexmit+0xc4>
  }

  /* Move the first unacked segment to the unsent queue */
  /* Keep the unsent queue sorted. */
  pcb->unacked = seg->next;
 80343d2:	68bb      	ldr	r3, [r7, #8]
 80343d4:	681a      	ldr	r2, [r3, #0]
 80343d6:	687b      	ldr	r3, [r7, #4]
 80343d8:	671a      	str	r2, [r3, #112]	; 0x70

  cur_seg = &(pcb->unsent);
 80343da:	687b      	ldr	r3, [r7, #4]
 80343dc:	336c      	adds	r3, #108	; 0x6c
 80343de:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 80343e0:	e002      	b.n	80343e8 <tcp_rexmit+0x58>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
    cur_seg = &((*cur_seg)->next );
 80343e2:	68fb      	ldr	r3, [r7, #12]
 80343e4:	681b      	ldr	r3, [r3, #0]
 80343e6:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 80343e8:	68fb      	ldr	r3, [r7, #12]
 80343ea:	681b      	ldr	r3, [r3, #0]
 80343ec:	2b00      	cmp	r3, #0
 80343ee:	d011      	beq.n	8034414 <tcp_rexmit+0x84>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 80343f0:	68fb      	ldr	r3, [r7, #12]
 80343f2:	681b      	ldr	r3, [r3, #0]
 80343f4:	68db      	ldr	r3, [r3, #12]
 80343f6:	685b      	ldr	r3, [r3, #4]
 80343f8:	4618      	mov	r0, r3
 80343fa:	f7f8 faa8 	bl	802c94e <lwip_htonl>
 80343fe:	4604      	mov	r4, r0
 8034400:	68bb      	ldr	r3, [r7, #8]
 8034402:	68db      	ldr	r3, [r3, #12]
 8034404:	685b      	ldr	r3, [r3, #4]
 8034406:	4618      	mov	r0, r3
 8034408:	f7f8 faa1 	bl	802c94e <lwip_htonl>
 803440c:	4603      	mov	r3, r0
 803440e:	1ae3      	subs	r3, r4, r3
  while (*cur_seg &&
 8034410:	2b00      	cmp	r3, #0
 8034412:	dbe6      	blt.n	80343e2 <tcp_rexmit+0x52>
  }
  seg->next = *cur_seg;
 8034414:	68fb      	ldr	r3, [r7, #12]
 8034416:	681a      	ldr	r2, [r3, #0]
 8034418:	68bb      	ldr	r3, [r7, #8]
 803441a:	601a      	str	r2, [r3, #0]
  *cur_seg = seg;
 803441c:	68fb      	ldr	r3, [r7, #12]
 803441e:	68ba      	ldr	r2, [r7, #8]
 8034420:	601a      	str	r2, [r3, #0]
#if TCP_OVERSIZE
  if (seg->next == NULL) {
 8034422:	68bb      	ldr	r3, [r7, #8]
 8034424:	681b      	ldr	r3, [r3, #0]
 8034426:	2b00      	cmp	r3, #0
 8034428:	d103      	bne.n	8034432 <tcp_rexmit+0xa2>
    /* the retransmitted segment is last in unsent, so reset unsent_oversize */
    pcb->unsent_oversize = 0;
 803442a:	687b      	ldr	r3, [r7, #4]
 803442c:	2200      	movs	r2, #0
 803442e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  }
#endif /* TCP_OVERSIZE */

  if (pcb->nrtx < 0xFF) {
 8034432:	687b      	ldr	r3, [r7, #4]
 8034434:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8034438:	2bff      	cmp	r3, #255	; 0xff
 803443a:	d007      	beq.n	803444c <tcp_rexmit+0xbc>
    ++pcb->nrtx;
 803443c:	687b      	ldr	r3, [r7, #4]
 803443e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8034442:	3301      	adds	r3, #1
 8034444:	b2da      	uxtb	r2, r3
 8034446:	687b      	ldr	r3, [r7, #4]
 8034448:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }

  /* Don't take any rtt measurements after retransmitting. */
  pcb->rttest = 0;
 803444c:	687b      	ldr	r3, [r7, #4]
 803444e:	2200      	movs	r2, #0
 8034450:	635a      	str	r2, [r3, #52]	; 0x34

  /* Do the actual retransmission. */
  MIB2_STATS_INC(mib2.tcpretranssegs);
  /* No need to call tcp_output: we are always called from tcp_input()
     and thus tcp_output directly returns. */
  return ERR_OK;
 8034452:	2300      	movs	r3, #0
}
 8034454:	4618      	mov	r0, r3
 8034456:	3714      	adds	r7, #20
 8034458:	46bd      	mov	sp, r7
 803445a:	bd90      	pop	{r4, r7, pc}
 803445c:	0803c128 	.word	0x0803c128
 8034460:	0803c7c8 	.word	0x0803c7c8
 8034464:	0803c17c 	.word	0x0803c17c

08034468 <tcp_rexmit_fast>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
void
tcp_rexmit_fast(struct tcp_pcb *pcb)
{
 8034468:	b580      	push	{r7, lr}
 803446a:	b082      	sub	sp, #8
 803446c:	af00      	add	r7, sp, #0
 803446e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_fast: invalid pcb", pcb != NULL);
 8034470:	687b      	ldr	r3, [r7, #4]
 8034472:	2b00      	cmp	r3, #0
 8034474:	d106      	bne.n	8034484 <tcp_rexmit_fast+0x1c>
 8034476:	4b2a      	ldr	r3, [pc, #168]	; (8034520 <tcp_rexmit_fast+0xb8>)
 8034478:	f240 62f9 	movw	r2, #1785	; 0x6f9
 803447c:	4929      	ldr	r1, [pc, #164]	; (8034524 <tcp_rexmit_fast+0xbc>)
 803447e:	482a      	ldr	r0, [pc, #168]	; (8034528 <tcp_rexmit_fast+0xc0>)
 8034480:	f004 fdf2 	bl	8039068 <iprintf>

  if (pcb->unacked != NULL && !(pcb->flags & TF_INFR)) {
 8034484:	687b      	ldr	r3, [r7, #4]
 8034486:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8034488:	2b00      	cmp	r3, #0
 803448a:	d044      	beq.n	8034516 <tcp_rexmit_fast+0xae>
 803448c:	687b      	ldr	r3, [r7, #4]
 803448e:	8b5b      	ldrh	r3, [r3, #26]
 8034490:	f003 0304 	and.w	r3, r3, #4
 8034494:	2b00      	cmp	r3, #0
 8034496:	d13e      	bne.n	8034516 <tcp_rexmit_fast+0xae>
    LWIP_DEBUGF(TCP_FR_DEBUG,
                ("tcp_receive: dupacks %"U16_F" (%"U32_F
                 "), fast retransmit %"U32_F"\n",
                 (u16_t)pcb->dupacks, pcb->lastack,
                 lwip_ntohl(pcb->unacked->tcphdr->seqno)));
    if (tcp_rexmit(pcb) == ERR_OK) {
 8034498:	6878      	ldr	r0, [r7, #4]
 803449a:	f7ff ff79 	bl	8034390 <tcp_rexmit>
 803449e:	4603      	mov	r3, r0
 80344a0:	2b00      	cmp	r3, #0
 80344a2:	d138      	bne.n	8034516 <tcp_rexmit_fast+0xae>
      /* Set ssthresh to half of the minimum of the current
       * cwnd and the advertised window */
      pcb->ssthresh = LWIP_MIN(pcb->cwnd, pcb->snd_wnd) / 2;
 80344a4:	687b      	ldr	r3, [r7, #4]
 80344a6:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 80344aa:	687b      	ldr	r3, [r7, #4]
 80344ac:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 80344b0:	4293      	cmp	r3, r2
 80344b2:	bf28      	it	cs
 80344b4:	4613      	movcs	r3, r2
 80344b6:	b29b      	uxth	r3, r3
 80344b8:	0fda      	lsrs	r2, r3, #31
 80344ba:	4413      	add	r3, r2
 80344bc:	105b      	asrs	r3, r3, #1
 80344be:	b29a      	uxth	r2, r3
 80344c0:	687b      	ldr	r3, [r7, #4]
 80344c2:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

      /* The minimum value for ssthresh should be 2 MSS */
      if (pcb->ssthresh < (2U * pcb->mss)) {
 80344c6:	687b      	ldr	r3, [r7, #4]
 80344c8:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 80344cc:	461a      	mov	r2, r3
 80344ce:	687b      	ldr	r3, [r7, #4]
 80344d0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80344d2:	005b      	lsls	r3, r3, #1
 80344d4:	429a      	cmp	r2, r3
 80344d6:	d206      	bcs.n	80344e6 <tcp_rexmit_fast+0x7e>
        LWIP_DEBUGF(TCP_FR_DEBUG,
                    ("tcp_receive: The minimum value for ssthresh %"TCPWNDSIZE_F
                     " should be min 2 mss %"U16_F"...\n",
                     pcb->ssthresh, (u16_t)(2 * pcb->mss)));
        pcb->ssthresh = 2 * pcb->mss;
 80344d8:	687b      	ldr	r3, [r7, #4]
 80344da:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80344dc:	005b      	lsls	r3, r3, #1
 80344de:	b29a      	uxth	r2, r3
 80344e0:	687b      	ldr	r3, [r7, #4]
 80344e2:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
      }

      pcb->cwnd = pcb->ssthresh + 3 * pcb->mss;
 80344e6:	687b      	ldr	r3, [r7, #4]
 80344e8:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 80344ec:	687b      	ldr	r3, [r7, #4]
 80344ee:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80344f0:	4619      	mov	r1, r3
 80344f2:	0049      	lsls	r1, r1, #1
 80344f4:	440b      	add	r3, r1
 80344f6:	b29b      	uxth	r3, r3
 80344f8:	4413      	add	r3, r2
 80344fa:	b29a      	uxth	r2, r3
 80344fc:	687b      	ldr	r3, [r7, #4]
 80344fe:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
      tcp_set_flags(pcb, TF_INFR);
 8034502:	687b      	ldr	r3, [r7, #4]
 8034504:	8b5b      	ldrh	r3, [r3, #26]
 8034506:	f043 0304 	orr.w	r3, r3, #4
 803450a:	b29a      	uxth	r2, r3
 803450c:	687b      	ldr	r3, [r7, #4]
 803450e:	835a      	strh	r2, [r3, #26]

      /* Reset the retransmission timer to prevent immediate rto retransmissions */
      pcb->rtime = 0;
 8034510:	687b      	ldr	r3, [r7, #4]
 8034512:	2200      	movs	r2, #0
 8034514:	861a      	strh	r2, [r3, #48]	; 0x30
    }
  }
}
 8034516:	bf00      	nop
 8034518:	3708      	adds	r7, #8
 803451a:	46bd      	mov	sp, r7
 803451c:	bd80      	pop	{r7, pc}
 803451e:	bf00      	nop
 8034520:	0803c128 	.word	0x0803c128
 8034524:	0803c7e0 	.word	0x0803c7e0
 8034528:	0803c17c 	.word	0x0803c17c

0803452c <tcp_output_alloc_header_common>:

static struct pbuf *
tcp_output_alloc_header_common(u32_t ackno, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */,
                        u16_t src_port, u16_t dst_port, u8_t flags, u16_t wnd)
{
 803452c:	b580      	push	{r7, lr}
 803452e:	b086      	sub	sp, #24
 8034530:	af00      	add	r7, sp, #0
 8034532:	60f8      	str	r0, [r7, #12]
 8034534:	607b      	str	r3, [r7, #4]
 8034536:	460b      	mov	r3, r1
 8034538:	817b      	strh	r3, [r7, #10]
 803453a:	4613      	mov	r3, r2
 803453c:	813b      	strh	r3, [r7, #8]
  struct tcp_hdr *tcphdr;
  struct pbuf *p;

  p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
 803453e:	897a      	ldrh	r2, [r7, #10]
 8034540:	893b      	ldrh	r3, [r7, #8]
 8034542:	4413      	add	r3, r2
 8034544:	b29b      	uxth	r3, r3
 8034546:	3314      	adds	r3, #20
 8034548:	b29b      	uxth	r3, r3
 803454a:	f44f 7220 	mov.w	r2, #640	; 0x280
 803454e:	4619      	mov	r1, r3
 8034550:	2022      	movs	r0, #34	; 0x22
 8034552:	f7f9 fbc5 	bl	802dce0 <pbuf_alloc>
 8034556:	6178      	str	r0, [r7, #20]
  if (p != NULL) {
 8034558:	697b      	ldr	r3, [r7, #20]
 803455a:	2b00      	cmp	r3, #0
 803455c:	d04d      	beq.n	80345fa <tcp_output_alloc_header_common+0xce>
    LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
 803455e:	897b      	ldrh	r3, [r7, #10]
 8034560:	3313      	adds	r3, #19
 8034562:	697a      	ldr	r2, [r7, #20]
 8034564:	8952      	ldrh	r2, [r2, #10]
 8034566:	4293      	cmp	r3, r2
 8034568:	db06      	blt.n	8034578 <tcp_output_alloc_header_common+0x4c>
 803456a:	4b26      	ldr	r3, [pc, #152]	; (8034604 <tcp_output_alloc_header_common+0xd8>)
 803456c:	f240 7223 	movw	r2, #1827	; 0x723
 8034570:	4925      	ldr	r1, [pc, #148]	; (8034608 <tcp_output_alloc_header_common+0xdc>)
 8034572:	4826      	ldr	r0, [pc, #152]	; (803460c <tcp_output_alloc_header_common+0xe0>)
 8034574:	f004 fd78 	bl	8039068 <iprintf>
                (p->len >= TCP_HLEN + optlen));
    tcphdr = (struct tcp_hdr *)p->payload;
 8034578:	697b      	ldr	r3, [r7, #20]
 803457a:	685b      	ldr	r3, [r3, #4]
 803457c:	613b      	str	r3, [r7, #16]
    tcphdr->src = lwip_htons(src_port);
 803457e:	8c3b      	ldrh	r3, [r7, #32]
 8034580:	4618      	mov	r0, r3
 8034582:	f7f8 f9cf 	bl	802c924 <lwip_htons>
 8034586:	4603      	mov	r3, r0
 8034588:	461a      	mov	r2, r3
 803458a:	693b      	ldr	r3, [r7, #16]
 803458c:	801a      	strh	r2, [r3, #0]
    tcphdr->dest = lwip_htons(dst_port);
 803458e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8034590:	4618      	mov	r0, r3
 8034592:	f7f8 f9c7 	bl	802c924 <lwip_htons>
 8034596:	4603      	mov	r3, r0
 8034598:	461a      	mov	r2, r3
 803459a:	693b      	ldr	r3, [r7, #16]
 803459c:	805a      	strh	r2, [r3, #2]
    tcphdr->seqno = seqno_be;
 803459e:	693b      	ldr	r3, [r7, #16]
 80345a0:	687a      	ldr	r2, [r7, #4]
 80345a2:	605a      	str	r2, [r3, #4]
    tcphdr->ackno = lwip_htonl(ackno);
 80345a4:	68f8      	ldr	r0, [r7, #12]
 80345a6:	f7f8 f9d2 	bl	802c94e <lwip_htonl>
 80345aa:	4602      	mov	r2, r0
 80345ac:	693b      	ldr	r3, [r7, #16]
 80345ae:	609a      	str	r2, [r3, #8]
    TCPH_HDRLEN_FLAGS_SET(tcphdr, (5 + optlen / 4), flags);
 80345b0:	897b      	ldrh	r3, [r7, #10]
 80345b2:	089b      	lsrs	r3, r3, #2
 80345b4:	b29b      	uxth	r3, r3
 80345b6:	3305      	adds	r3, #5
 80345b8:	b29b      	uxth	r3, r3
 80345ba:	031b      	lsls	r3, r3, #12
 80345bc:	b29a      	uxth	r2, r3
 80345be:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80345c2:	b29b      	uxth	r3, r3
 80345c4:	4313      	orrs	r3, r2
 80345c6:	b29b      	uxth	r3, r3
 80345c8:	4618      	mov	r0, r3
 80345ca:	f7f8 f9ab 	bl	802c924 <lwip_htons>
 80345ce:	4603      	mov	r3, r0
 80345d0:	461a      	mov	r2, r3
 80345d2:	693b      	ldr	r3, [r7, #16]
 80345d4:	819a      	strh	r2, [r3, #12]
    tcphdr->wnd = lwip_htons(wnd);
 80345d6:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 80345d8:	4618      	mov	r0, r3
 80345da:	f7f8 f9a3 	bl	802c924 <lwip_htons>
 80345de:	4603      	mov	r3, r0
 80345e0:	461a      	mov	r2, r3
 80345e2:	693b      	ldr	r3, [r7, #16]
 80345e4:	81da      	strh	r2, [r3, #14]
    tcphdr->chksum = 0;
 80345e6:	693b      	ldr	r3, [r7, #16]
 80345e8:	2200      	movs	r2, #0
 80345ea:	741a      	strb	r2, [r3, #16]
 80345ec:	2200      	movs	r2, #0
 80345ee:	745a      	strb	r2, [r3, #17]
    tcphdr->urgp = 0;
 80345f0:	693b      	ldr	r3, [r7, #16]
 80345f2:	2200      	movs	r2, #0
 80345f4:	749a      	strb	r2, [r3, #18]
 80345f6:	2200      	movs	r2, #0
 80345f8:	74da      	strb	r2, [r3, #19]
  }
  return p;
 80345fa:	697b      	ldr	r3, [r7, #20]
}
 80345fc:	4618      	mov	r0, r3
 80345fe:	3718      	adds	r7, #24
 8034600:	46bd      	mov	sp, r7
 8034602:	bd80      	pop	{r7, pc}
 8034604:	0803c128 	.word	0x0803c128
 8034608:	0803c800 	.word	0x0803c800
 803460c:	0803c17c 	.word	0x0803c17c

08034610 <tcp_output_alloc_header>:
 * @return pbuf with p->payload being the tcp_hdr
 */
static struct pbuf *
tcp_output_alloc_header(struct tcp_pcb *pcb, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */)
{
 8034610:	b5b0      	push	{r4, r5, r7, lr}
 8034612:	b08a      	sub	sp, #40	; 0x28
 8034614:	af04      	add	r7, sp, #16
 8034616:	60f8      	str	r0, [r7, #12]
 8034618:	607b      	str	r3, [r7, #4]
 803461a:	460b      	mov	r3, r1
 803461c:	817b      	strh	r3, [r7, #10]
 803461e:	4613      	mov	r3, r2
 8034620:	813b      	strh	r3, [r7, #8]
  struct pbuf *p;

  LWIP_ASSERT("tcp_output_alloc_header: invalid pcb", pcb != NULL);
 8034622:	68fb      	ldr	r3, [r7, #12]
 8034624:	2b00      	cmp	r3, #0
 8034626:	d106      	bne.n	8034636 <tcp_output_alloc_header+0x26>
 8034628:	4b15      	ldr	r3, [pc, #84]	; (8034680 <tcp_output_alloc_header+0x70>)
 803462a:	f240 7242 	movw	r2, #1858	; 0x742
 803462e:	4915      	ldr	r1, [pc, #84]	; (8034684 <tcp_output_alloc_header+0x74>)
 8034630:	4815      	ldr	r0, [pc, #84]	; (8034688 <tcp_output_alloc_header+0x78>)
 8034632:	f004 fd19 	bl	8039068 <iprintf>

  p = tcp_output_alloc_header_common(pcb->rcv_nxt, optlen, datalen,
 8034636:	68fb      	ldr	r3, [r7, #12]
 8034638:	6a58      	ldr	r0, [r3, #36]	; 0x24
 803463a:	68fb      	ldr	r3, [r7, #12]
 803463c:	8adb      	ldrh	r3, [r3, #22]
 803463e:	68fa      	ldr	r2, [r7, #12]
 8034640:	8b12      	ldrh	r2, [r2, #24]
 8034642:	68f9      	ldr	r1, [r7, #12]
 8034644:	8d49      	ldrh	r1, [r1, #42]	; 0x2a
 8034646:	893d      	ldrh	r5, [r7, #8]
 8034648:	897c      	ldrh	r4, [r7, #10]
 803464a:	9103      	str	r1, [sp, #12]
 803464c:	2110      	movs	r1, #16
 803464e:	9102      	str	r1, [sp, #8]
 8034650:	9201      	str	r2, [sp, #4]
 8034652:	9300      	str	r3, [sp, #0]
 8034654:	687b      	ldr	r3, [r7, #4]
 8034656:	462a      	mov	r2, r5
 8034658:	4621      	mov	r1, r4
 803465a:	f7ff ff67 	bl	803452c <tcp_output_alloc_header_common>
 803465e:	6178      	str	r0, [r7, #20]
    seqno_be, pcb->local_port, pcb->remote_port, TCP_ACK,
    TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
  if (p != NULL) {
 8034660:	697b      	ldr	r3, [r7, #20]
 8034662:	2b00      	cmp	r3, #0
 8034664:	d006      	beq.n	8034674 <tcp_output_alloc_header+0x64>
    /* If we're sending a packet, update the announced right window edge */
    pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 8034666:	68fb      	ldr	r3, [r7, #12]
 8034668:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 803466a:	68fa      	ldr	r2, [r7, #12]
 803466c:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 803466e:	441a      	add	r2, r3
 8034670:	68fb      	ldr	r3, [r7, #12]
 8034672:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  return p;
 8034674:	697b      	ldr	r3, [r7, #20]
}
 8034676:	4618      	mov	r0, r3
 8034678:	3718      	adds	r7, #24
 803467a:	46bd      	mov	sp, r7
 803467c:	bdb0      	pop	{r4, r5, r7, pc}
 803467e:	bf00      	nop
 8034680:	0803c128 	.word	0x0803c128
 8034684:	0803c830 	.word	0x0803c830
 8034688:	0803c17c 	.word	0x0803c17c

0803468c <tcp_output_fill_options>:

/* Fill in options for control segments */
static void
tcp_output_fill_options(const struct tcp_pcb *pcb, struct pbuf *p, u8_t optflags, u8_t num_sacks)
{
 803468c:	b580      	push	{r7, lr}
 803468e:	b088      	sub	sp, #32
 8034690:	af00      	add	r7, sp, #0
 8034692:	60f8      	str	r0, [r7, #12]
 8034694:	60b9      	str	r1, [r7, #8]
 8034696:	4611      	mov	r1, r2
 8034698:	461a      	mov	r2, r3
 803469a:	460b      	mov	r3, r1
 803469c:	71fb      	strb	r3, [r7, #7]
 803469e:	4613      	mov	r3, r2
 80346a0:	71bb      	strb	r3, [r7, #6]
  struct tcp_hdr *tcphdr;
  u32_t *opts;
  u16_t sacks_len = 0;
 80346a2:	2300      	movs	r3, #0
 80346a4:	83fb      	strh	r3, [r7, #30]

  LWIP_ASSERT("tcp_output_fill_options: invalid pbuf", p != NULL);
 80346a6:	68bb      	ldr	r3, [r7, #8]
 80346a8:	2b00      	cmp	r3, #0
 80346aa:	d106      	bne.n	80346ba <tcp_output_fill_options+0x2e>
 80346ac:	4b13      	ldr	r3, [pc, #76]	; (80346fc <tcp_output_fill_options+0x70>)
 80346ae:	f240 7256 	movw	r2, #1878	; 0x756
 80346b2:	4913      	ldr	r1, [pc, #76]	; (8034700 <tcp_output_fill_options+0x74>)
 80346b4:	4813      	ldr	r0, [pc, #76]	; (8034704 <tcp_output_fill_options+0x78>)
 80346b6:	f004 fcd7 	bl	8039068 <iprintf>

  tcphdr = (struct tcp_hdr *)p->payload;
 80346ba:	68bb      	ldr	r3, [r7, #8]
 80346bc:	685b      	ldr	r3, [r3, #4]
 80346be:	61bb      	str	r3, [r7, #24]
  opts = (u32_t *)(void *)(tcphdr + 1);
 80346c0:	69bb      	ldr	r3, [r7, #24]
 80346c2:	3314      	adds	r3, #20
 80346c4:	617b      	str	r3, [r7, #20]
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(p, tcphdr, pcb, opts);
#endif

  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(sacks_len);
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(tcphdr + 1)) + sacks_len * 4 + LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb));
 80346c6:	69bb      	ldr	r3, [r7, #24]
 80346c8:	f103 0214 	add.w	r2, r3, #20
 80346cc:	8bfb      	ldrh	r3, [r7, #30]
 80346ce:	009b      	lsls	r3, r3, #2
 80346d0:	4619      	mov	r1, r3
 80346d2:	79fb      	ldrb	r3, [r7, #7]
 80346d4:	009b      	lsls	r3, r3, #2
 80346d6:	f003 0304 	and.w	r3, r3, #4
 80346da:	440b      	add	r3, r1
 80346dc:	4413      	add	r3, r2
 80346de:	697a      	ldr	r2, [r7, #20]
 80346e0:	429a      	cmp	r2, r3
 80346e2:	d006      	beq.n	80346f2 <tcp_output_fill_options+0x66>
 80346e4:	4b05      	ldr	r3, [pc, #20]	; (80346fc <tcp_output_fill_options+0x70>)
 80346e6:	f240 7275 	movw	r2, #1909	; 0x775
 80346ea:	4907      	ldr	r1, [pc, #28]	; (8034708 <tcp_output_fill_options+0x7c>)
 80346ec:	4805      	ldr	r0, [pc, #20]	; (8034704 <tcp_output_fill_options+0x78>)
 80346ee:	f004 fcbb 	bl	8039068 <iprintf>
  LWIP_UNUSED_ARG(optflags); /* for LWIP_NOASSERT */
  LWIP_UNUSED_ARG(opts); /* for LWIP_NOASSERT */
}
 80346f2:	bf00      	nop
 80346f4:	3720      	adds	r7, #32
 80346f6:	46bd      	mov	sp, r7
 80346f8:	bd80      	pop	{r7, pc}
 80346fa:	bf00      	nop
 80346fc:	0803c128 	.word	0x0803c128
 8034700:	0803c858 	.word	0x0803c858
 8034704:	0803c17c 	.word	0x0803c17c
 8034708:	0803c750 	.word	0x0803c750

0803470c <tcp_output_control_segment>:
 * header checksum and calling ip_output_if while handling netif hints and stats.
 */
static err_t
tcp_output_control_segment(const struct tcp_pcb *pcb, struct pbuf *p,
                           const ip_addr_t *src, const ip_addr_t *dst)
{
 803470c:	b580      	push	{r7, lr}
 803470e:	b08a      	sub	sp, #40	; 0x28
 8034710:	af04      	add	r7, sp, #16
 8034712:	60f8      	str	r0, [r7, #12]
 8034714:	60b9      	str	r1, [r7, #8]
 8034716:	607a      	str	r2, [r7, #4]
 8034718:	603b      	str	r3, [r7, #0]
  err_t err;
  struct netif *netif;

  LWIP_ASSERT("tcp_output_control_segment: invalid pbuf", p != NULL);
 803471a:	68bb      	ldr	r3, [r7, #8]
 803471c:	2b00      	cmp	r3, #0
 803471e:	d106      	bne.n	803472e <tcp_output_control_segment+0x22>
 8034720:	4b20      	ldr	r3, [pc, #128]	; (80347a4 <tcp_output_control_segment+0x98>)
 8034722:	f240 7287 	movw	r2, #1927	; 0x787
 8034726:	4920      	ldr	r1, [pc, #128]	; (80347a8 <tcp_output_control_segment+0x9c>)
 8034728:	4820      	ldr	r0, [pc, #128]	; (80347ac <tcp_output_control_segment+0xa0>)
 803472a:	f004 fc9d 	bl	8039068 <iprintf>

  netif = tcp_route(pcb, src, dst);
 803472e:	683a      	ldr	r2, [r7, #0]
 8034730:	6879      	ldr	r1, [r7, #4]
 8034732:	68f8      	ldr	r0, [r7, #12]
 8034734:	f7fe faa4 	bl	8032c80 <tcp_route>
 8034738:	6138      	str	r0, [r7, #16]
  if (netif == NULL) {
 803473a:	693b      	ldr	r3, [r7, #16]
 803473c:	2b00      	cmp	r3, #0
 803473e:	d102      	bne.n	8034746 <tcp_output_control_segment+0x3a>
    err = ERR_RTE;
 8034740:	23fc      	movs	r3, #252	; 0xfc
 8034742:	75fb      	strb	r3, [r7, #23]
 8034744:	e024      	b.n	8034790 <tcp_output_control_segment+0x84>
      struct tcp_hdr *tcphdr = (struct tcp_hdr *)p->payload;
      tcphdr->chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
                                        src, dst);
    }
#endif
    if (pcb != NULL) {
 8034746:	68fb      	ldr	r3, [r7, #12]
 8034748:	2b00      	cmp	r3, #0
 803474a:	d006      	beq.n	803475a <tcp_output_control_segment+0x4e>
      NETIF_SET_HINTS(netif, LWIP_CONST_CAST(struct netif_hint*, &(pcb->netif_hints)));
      ttl = pcb->ttl;
 803474c:	68fb      	ldr	r3, [r7, #12]
 803474e:	7adb      	ldrb	r3, [r3, #11]
 8034750:	75bb      	strb	r3, [r7, #22]
      tos = pcb->tos;
 8034752:	68fb      	ldr	r3, [r7, #12]
 8034754:	7a9b      	ldrb	r3, [r3, #10]
 8034756:	757b      	strb	r3, [r7, #21]
 8034758:	e003      	b.n	8034762 <tcp_output_control_segment+0x56>
    } else {
      /* Send output with hardcoded TTL/HL since we have no access to the pcb */
      ttl = TCP_TTL;
 803475a:	23ff      	movs	r3, #255	; 0xff
 803475c:	75bb      	strb	r3, [r7, #22]
      tos = 0;
 803475e:	2300      	movs	r3, #0
 8034760:	757b      	strb	r3, [r7, #21]
    }
    TCP_STATS_INC(tcp.xmit);
 8034762:	4b13      	ldr	r3, [pc, #76]	; (80347b0 <tcp_output_control_segment+0xa4>)
 8034764:	f8b3 3090 	ldrh.w	r3, [r3, #144]	; 0x90
 8034768:	3301      	adds	r3, #1
 803476a:	b29a      	uxth	r2, r3
 803476c:	4b10      	ldr	r3, [pc, #64]	; (80347b0 <tcp_output_control_segment+0xa4>)
 803476e:	f8a3 2090 	strh.w	r2, [r3, #144]	; 0x90
    err = ip_output_if(p, src, dst, ttl, tos, IP_PROTO_TCP, netif);
 8034772:	7dba      	ldrb	r2, [r7, #22]
 8034774:	693b      	ldr	r3, [r7, #16]
 8034776:	9302      	str	r3, [sp, #8]
 8034778:	2306      	movs	r3, #6
 803477a:	9301      	str	r3, [sp, #4]
 803477c:	7d7b      	ldrb	r3, [r7, #21]
 803477e:	9300      	str	r3, [sp, #0]
 8034780:	4613      	mov	r3, r2
 8034782:	683a      	ldr	r2, [r7, #0]
 8034784:	6879      	ldr	r1, [r7, #4]
 8034786:	68b8      	ldr	r0, [r7, #8]
 8034788:	f002 fbf6 	bl	8036f78 <ip4_output_if>
 803478c:	4603      	mov	r3, r0
 803478e:	75fb      	strb	r3, [r7, #23]
    NETIF_RESET_HINTS(netif);
  }
  pbuf_free(p);
 8034790:	68b8      	ldr	r0, [r7, #8]
 8034792:	f7f9 fdbb 	bl	802e30c <pbuf_free>
  return err;
 8034796:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 803479a:	4618      	mov	r0, r3
 803479c:	3718      	adds	r7, #24
 803479e:	46bd      	mov	sp, r7
 80347a0:	bd80      	pop	{r7, pc}
 80347a2:	bf00      	nop
 80347a4:	0803c128 	.word	0x0803c128
 80347a8:	0803c880 	.word	0x0803c880
 80347ac:	0803c17c 	.word	0x0803c17c
 80347b0:	2000ee04 	.word	0x2000ee04

080347b4 <tcp_rst>:
 */
void
tcp_rst(const struct tcp_pcb *pcb, u32_t seqno, u32_t ackno,
        const ip_addr_t *local_ip, const ip_addr_t *remote_ip,
        u16_t local_port, u16_t remote_port)
{
 80347b4:	b590      	push	{r4, r7, lr}
 80347b6:	b08b      	sub	sp, #44	; 0x2c
 80347b8:	af04      	add	r7, sp, #16
 80347ba:	60f8      	str	r0, [r7, #12]
 80347bc:	60b9      	str	r1, [r7, #8]
 80347be:	607a      	str	r2, [r7, #4]
 80347c0:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  u16_t wnd;
  u8_t optlen;

  LWIP_ASSERT("tcp_rst: invalid local_ip", local_ip != NULL);
 80347c2:	683b      	ldr	r3, [r7, #0]
 80347c4:	2b00      	cmp	r3, #0
 80347c6:	d106      	bne.n	80347d6 <tcp_rst+0x22>
 80347c8:	4b1f      	ldr	r3, [pc, #124]	; (8034848 <tcp_rst+0x94>)
 80347ca:	f240 72c4 	movw	r2, #1988	; 0x7c4
 80347ce:	491f      	ldr	r1, [pc, #124]	; (803484c <tcp_rst+0x98>)
 80347d0:	481f      	ldr	r0, [pc, #124]	; (8034850 <tcp_rst+0x9c>)
 80347d2:	f004 fc49 	bl	8039068 <iprintf>
  LWIP_ASSERT("tcp_rst: invalid remote_ip", remote_ip != NULL);
 80347d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80347d8:	2b00      	cmp	r3, #0
 80347da:	d106      	bne.n	80347ea <tcp_rst+0x36>
 80347dc:	4b1a      	ldr	r3, [pc, #104]	; (8034848 <tcp_rst+0x94>)
 80347de:	f240 72c5 	movw	r2, #1989	; 0x7c5
 80347e2:	491c      	ldr	r1, [pc, #112]	; (8034854 <tcp_rst+0xa0>)
 80347e4:	481a      	ldr	r0, [pc, #104]	; (8034850 <tcp_rst+0x9c>)
 80347e6:	f004 fc3f 	bl	8039068 <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 80347ea:	2300      	movs	r3, #0
 80347ec:	75fb      	strb	r3, [r7, #23]

#if LWIP_WND_SCALE
  wnd = PP_HTONS(((TCP_WND >> TCP_RCV_SCALE) & 0xFFFF));
#else
  wnd = PP_HTONS(TCP_WND);
 80347ee:	f246 0308 	movw	r3, #24584	; 0x6008
 80347f2:	82bb      	strh	r3, [r7, #20]
#endif

  p = tcp_output_alloc_header_common(ackno, optlen, 0, lwip_htonl(seqno), local_port,
 80347f4:	7dfb      	ldrb	r3, [r7, #23]
 80347f6:	b29c      	uxth	r4, r3
 80347f8:	68b8      	ldr	r0, [r7, #8]
 80347fa:	f7f8 f8a8 	bl	802c94e <lwip_htonl>
 80347fe:	4602      	mov	r2, r0
 8034800:	8abb      	ldrh	r3, [r7, #20]
 8034802:	9303      	str	r3, [sp, #12]
 8034804:	2314      	movs	r3, #20
 8034806:	9302      	str	r3, [sp, #8]
 8034808:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 803480a:	9301      	str	r3, [sp, #4]
 803480c:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 803480e:	9300      	str	r3, [sp, #0]
 8034810:	4613      	mov	r3, r2
 8034812:	2200      	movs	r2, #0
 8034814:	4621      	mov	r1, r4
 8034816:	6878      	ldr	r0, [r7, #4]
 8034818:	f7ff fe88 	bl	803452c <tcp_output_alloc_header_common>
 803481c:	6138      	str	r0, [r7, #16]
    remote_port, TCP_RST | TCP_ACK, wnd);
  if (p == NULL) {
 803481e:	693b      	ldr	r3, [r7, #16]
 8034820:	2b00      	cmp	r3, #0
 8034822:	d00c      	beq.n	803483e <tcp_rst+0x8a>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_rst: could not allocate memory for pbuf\n"));
    return;
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 8034824:	7dfb      	ldrb	r3, [r7, #23]
 8034826:	2200      	movs	r2, #0
 8034828:	6939      	ldr	r1, [r7, #16]
 803482a:	68f8      	ldr	r0, [r7, #12]
 803482c:	f7ff ff2e 	bl	803468c <tcp_output_fill_options>

  MIB2_STATS_INC(mib2.tcpoutrsts);

  tcp_output_control_segment(pcb, p, local_ip, remote_ip);
 8034830:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8034832:	683a      	ldr	r2, [r7, #0]
 8034834:	6939      	ldr	r1, [r7, #16]
 8034836:	68f8      	ldr	r0, [r7, #12]
 8034838:	f7ff ff68 	bl	803470c <tcp_output_control_segment>
 803483c:	e000      	b.n	8034840 <tcp_rst+0x8c>
    return;
 803483e:	bf00      	nop
  LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_rst: seqno %"U32_F" ackno %"U32_F".\n", seqno, ackno));
}
 8034840:	371c      	adds	r7, #28
 8034842:	46bd      	mov	sp, r7
 8034844:	bd90      	pop	{r4, r7, pc}
 8034846:	bf00      	nop
 8034848:	0803c128 	.word	0x0803c128
 803484c:	0803c8ac 	.word	0x0803c8ac
 8034850:	0803c17c 	.word	0x0803c17c
 8034854:	0803c8c8 	.word	0x0803c8c8

08034858 <tcp_send_empty_ack>:
 *
 * @param pcb Protocol control block for the TCP connection to send the ACK
 */
err_t
tcp_send_empty_ack(struct tcp_pcb *pcb)
{
 8034858:	b590      	push	{r4, r7, lr}
 803485a:	b087      	sub	sp, #28
 803485c:	af00      	add	r7, sp, #0
 803485e:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen, optflags = 0;
 8034860:	2300      	movs	r3, #0
 8034862:	75fb      	strb	r3, [r7, #23]
  u8_t num_sacks = 0;
 8034864:	2300      	movs	r3, #0
 8034866:	75bb      	strb	r3, [r7, #22]

  LWIP_ASSERT("tcp_send_empty_ack: invalid pcb", pcb != NULL);
 8034868:	687b      	ldr	r3, [r7, #4]
 803486a:	2b00      	cmp	r3, #0
 803486c:	d106      	bne.n	803487c <tcp_send_empty_ack+0x24>
 803486e:	4b28      	ldr	r3, [pc, #160]	; (8034910 <tcp_send_empty_ack+0xb8>)
 8034870:	f240 72ea 	movw	r2, #2026	; 0x7ea
 8034874:	4927      	ldr	r1, [pc, #156]	; (8034914 <tcp_send_empty_ack+0xbc>)
 8034876:	4828      	ldr	r0, [pc, #160]	; (8034918 <tcp_send_empty_ack+0xc0>)
 8034878:	f004 fbf6 	bl	8039068 <iprintf>
#if LWIP_TCP_TIMESTAMPS
  if (pcb->flags & TF_TIMESTAMP) {
    optflags = TF_SEG_OPTS_TS;
  }
#endif
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 803487c:	7dfb      	ldrb	r3, [r7, #23]
 803487e:	009b      	lsls	r3, r3, #2
 8034880:	b2db      	uxtb	r3, r3
 8034882:	f003 0304 	and.w	r3, r3, #4
 8034886:	757b      	strb	r3, [r7, #21]
  if ((num_sacks = tcp_get_num_sacks(pcb, optlen)) > 0) {
    optlen += 4 + num_sacks * 8; /* 4 bytes for header (including 2*NOP), plus 8B for each SACK */
  }
#endif

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt));
 8034888:	7d7b      	ldrb	r3, [r7, #21]
 803488a:	b29c      	uxth	r4, r3
 803488c:	687b      	ldr	r3, [r7, #4]
 803488e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8034890:	4618      	mov	r0, r3
 8034892:	f7f8 f85c 	bl	802c94e <lwip_htonl>
 8034896:	4603      	mov	r3, r0
 8034898:	2200      	movs	r2, #0
 803489a:	4621      	mov	r1, r4
 803489c:	6878      	ldr	r0, [r7, #4]
 803489e:	f7ff feb7 	bl	8034610 <tcp_output_alloc_header>
 80348a2:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 80348a4:	693b      	ldr	r3, [r7, #16]
 80348a6:	2b00      	cmp	r3, #0
 80348a8:	d109      	bne.n	80348be <tcp_send_empty_ack+0x66>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 80348aa:	687b      	ldr	r3, [r7, #4]
 80348ac:	8b5b      	ldrh	r3, [r3, #26]
 80348ae:	f043 0303 	orr.w	r3, r3, #3
 80348b2:	b29a      	uxth	r2, r3
 80348b4:	687b      	ldr	r3, [r7, #4]
 80348b6:	835a      	strh	r2, [r3, #26]
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output: (ACK) could not allocate pbuf\n"));
    return ERR_BUF;
 80348b8:	f06f 0301 	mvn.w	r3, #1
 80348bc:	e023      	b.n	8034906 <tcp_send_empty_ack+0xae>
  }
  tcp_output_fill_options(pcb, p, optflags, num_sacks);
 80348be:	7dbb      	ldrb	r3, [r7, #22]
 80348c0:	7dfa      	ldrb	r2, [r7, #23]
 80348c2:	6939      	ldr	r1, [r7, #16]
 80348c4:	6878      	ldr	r0, [r7, #4]
 80348c6:	f7ff fee1 	bl	803468c <tcp_output_fill_options>
  pcb->ts_lastacksent = pcb->rcv_nxt;
#endif

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG,
              ("tcp_output: sending ACK for %"U32_F"\n", pcb->rcv_nxt));
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 80348ca:	687a      	ldr	r2, [r7, #4]
 80348cc:	687b      	ldr	r3, [r7, #4]
 80348ce:	3304      	adds	r3, #4
 80348d0:	6939      	ldr	r1, [r7, #16]
 80348d2:	6878      	ldr	r0, [r7, #4]
 80348d4:	f7ff ff1a 	bl	803470c <tcp_output_control_segment>
 80348d8:	4603      	mov	r3, r0
 80348da:	73fb      	strb	r3, [r7, #15]
  if (err != ERR_OK) {
 80348dc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80348e0:	2b00      	cmp	r3, #0
 80348e2:	d007      	beq.n	80348f4 <tcp_send_empty_ack+0x9c>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 80348e4:	687b      	ldr	r3, [r7, #4]
 80348e6:	8b5b      	ldrh	r3, [r3, #26]
 80348e8:	f043 0303 	orr.w	r3, r3, #3
 80348ec:	b29a      	uxth	r2, r3
 80348ee:	687b      	ldr	r3, [r7, #4]
 80348f0:	835a      	strh	r2, [r3, #26]
 80348f2:	e006      	b.n	8034902 <tcp_send_empty_ack+0xaa>
  } else {
    /* remove ACK flags from the PCB, as we sent an empty ACK now */
    tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 80348f4:	687b      	ldr	r3, [r7, #4]
 80348f6:	8b5b      	ldrh	r3, [r3, #26]
 80348f8:	f023 0303 	bic.w	r3, r3, #3
 80348fc:	b29a      	uxth	r2, r3
 80348fe:	687b      	ldr	r3, [r7, #4]
 8034900:	835a      	strh	r2, [r3, #26]
  }

  return err;
 8034902:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8034906:	4618      	mov	r0, r3
 8034908:	371c      	adds	r7, #28
 803490a:	46bd      	mov	sp, r7
 803490c:	bd90      	pop	{r4, r7, pc}
 803490e:	bf00      	nop
 8034910:	0803c128 	.word	0x0803c128
 8034914:	0803c8e4 	.word	0x0803c8e4
 8034918:	0803c17c 	.word	0x0803c17c

0803491c <tcp_keepalive>:
 *
 * @param pcb the tcp_pcb for which to send a keepalive packet
 */
err_t
tcp_keepalive(struct tcp_pcb *pcb)
{
 803491c:	b590      	push	{r4, r7, lr}
 803491e:	b087      	sub	sp, #28
 8034920:	af00      	add	r7, sp, #0
 8034922:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 8034924:	2300      	movs	r3, #0
 8034926:	75fb      	strb	r3, [r7, #23]

  LWIP_ASSERT("tcp_keepalive: invalid pcb", pcb != NULL);
 8034928:	687b      	ldr	r3, [r7, #4]
 803492a:	2b00      	cmp	r3, #0
 803492c:	d106      	bne.n	803493c <tcp_keepalive+0x20>
 803492e:	4b18      	ldr	r3, [pc, #96]	; (8034990 <tcp_keepalive+0x74>)
 8034930:	f640 0224 	movw	r2, #2084	; 0x824
 8034934:	4917      	ldr	r1, [pc, #92]	; (8034994 <tcp_keepalive+0x78>)
 8034936:	4818      	ldr	r0, [pc, #96]	; (8034998 <tcp_keepalive+0x7c>)
 8034938:	f004 fb96 	bl	8039068 <iprintf>
  LWIP_DEBUGF(TCP_DEBUG, ("\n"));

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: tcp_ticks %"U32_F"   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
                          tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt - 1));
 803493c:	7dfb      	ldrb	r3, [r7, #23]
 803493e:	b29c      	uxth	r4, r3
 8034940:	687b      	ldr	r3, [r7, #4]
 8034942:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8034944:	3b01      	subs	r3, #1
 8034946:	4618      	mov	r0, r3
 8034948:	f7f8 f801 	bl	802c94e <lwip_htonl>
 803494c:	4603      	mov	r3, r0
 803494e:	2200      	movs	r2, #0
 8034950:	4621      	mov	r1, r4
 8034952:	6878      	ldr	r0, [r7, #4]
 8034954:	f7ff fe5c 	bl	8034610 <tcp_output_alloc_header>
 8034958:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 803495a:	693b      	ldr	r3, [r7, #16]
 803495c:	2b00      	cmp	r3, #0
 803495e:	d102      	bne.n	8034966 <tcp_keepalive+0x4a>
    LWIP_DEBUGF(TCP_DEBUG,
                ("tcp_keepalive: could not allocate memory for pbuf\n"));
    return ERR_MEM;
 8034960:	f04f 33ff 	mov.w	r3, #4294967295
 8034964:	e010      	b.n	8034988 <tcp_keepalive+0x6c>
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 8034966:	7dfb      	ldrb	r3, [r7, #23]
 8034968:	2200      	movs	r2, #0
 803496a:	6939      	ldr	r1, [r7, #16]
 803496c:	6878      	ldr	r0, [r7, #4]
 803496e:	f7ff fe8d 	bl	803468c <tcp_output_fill_options>
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 8034972:	687a      	ldr	r2, [r7, #4]
 8034974:	687b      	ldr	r3, [r7, #4]
 8034976:	3304      	adds	r3, #4
 8034978:	6939      	ldr	r1, [r7, #16]
 803497a:	6878      	ldr	r0, [r7, #4]
 803497c:	f7ff fec6 	bl	803470c <tcp_output_control_segment>
 8034980:	4603      	mov	r3, r0
 8034982:	73fb      	strb	r3, [r7, #15]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: seqno %"U32_F" ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 8034984:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8034988:	4618      	mov	r0, r3
 803498a:	371c      	adds	r7, #28
 803498c:	46bd      	mov	sp, r7
 803498e:	bd90      	pop	{r4, r7, pc}
 8034990:	0803c128 	.word	0x0803c128
 8034994:	0803c904 	.word	0x0803c904
 8034998:	0803c17c 	.word	0x0803c17c

0803499c <tcp_zero_window_probe>:
 *
 * @param pcb the tcp_pcb for which to send a zero-window probe packet
 */
err_t
tcp_zero_window_probe(struct tcp_pcb *pcb)
{
 803499c:	b590      	push	{r4, r7, lr}
 803499e:	b08b      	sub	sp, #44	; 0x2c
 80349a0:	af00      	add	r7, sp, #0
 80349a2:	6078      	str	r0, [r7, #4]
  struct tcp_hdr *tcphdr;
  struct tcp_seg *seg;
  u16_t len;
  u8_t is_fin;
  u32_t snd_nxt;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 80349a4:	2300      	movs	r3, #0
 80349a6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  LWIP_ASSERT("tcp_zero_window_probe: invalid pcb", pcb != NULL);
 80349aa:	687b      	ldr	r3, [r7, #4]
 80349ac:	2b00      	cmp	r3, #0
 80349ae:	d106      	bne.n	80349be <tcp_zero_window_probe+0x22>
 80349b0:	4b4c      	ldr	r3, [pc, #304]	; (8034ae4 <tcp_zero_window_probe+0x148>)
 80349b2:	f640 024f 	movw	r2, #2127	; 0x84f
 80349b6:	494c      	ldr	r1, [pc, #304]	; (8034ae8 <tcp_zero_window_probe+0x14c>)
 80349b8:	484c      	ldr	r0, [pc, #304]	; (8034aec <tcp_zero_window_probe+0x150>)
 80349ba:	f004 fb55 	bl	8039068 <iprintf>
              ("tcp_zero_window_probe: tcp_ticks %"U32_F
               "   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
               tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  /* Only consider unsent, persist timer should be off when there is data in-flight */
  seg = pcb->unsent;
 80349be:	687b      	ldr	r3, [r7, #4]
 80349c0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80349c2:	623b      	str	r3, [r7, #32]
  if (seg == NULL) {
 80349c4:	6a3b      	ldr	r3, [r7, #32]
 80349c6:	2b00      	cmp	r3, #0
 80349c8:	d101      	bne.n	80349ce <tcp_zero_window_probe+0x32>
    /* Not expected, persist timer should be off when the send buffer is empty */
    return ERR_OK;
 80349ca:	2300      	movs	r3, #0
 80349cc:	e086      	b.n	8034adc <tcp_zero_window_probe+0x140>

  /* increment probe count. NOTE: we record probe even if it fails
     to actually transmit due to an error. This ensures memory exhaustion/
     routing problem doesn't leave a zero-window pcb as an indefinite zombie.
     RTO mechanism has similar behavior, see pcb->nrtx */
  if (pcb->persist_probe < 0xFF) {
 80349ce:	687b      	ldr	r3, [r7, #4]
 80349d0:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 80349d4:	2bff      	cmp	r3, #255	; 0xff
 80349d6:	d007      	beq.n	80349e8 <tcp_zero_window_probe+0x4c>
    ++pcb->persist_probe;
 80349d8:	687b      	ldr	r3, [r7, #4]
 80349da:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 80349de:	3301      	adds	r3, #1
 80349e0:	b2da      	uxtb	r2, r3
 80349e2:	687b      	ldr	r3, [r7, #4]
 80349e4:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
  }

  is_fin = ((TCPH_FLAGS(seg->tcphdr) & TCP_FIN) != 0) && (seg->len == 0);
 80349e8:	6a3b      	ldr	r3, [r7, #32]
 80349ea:	68db      	ldr	r3, [r3, #12]
 80349ec:	899b      	ldrh	r3, [r3, #12]
 80349ee:	b29b      	uxth	r3, r3
 80349f0:	4618      	mov	r0, r3
 80349f2:	f7f7 ff97 	bl	802c924 <lwip_htons>
 80349f6:	4603      	mov	r3, r0
 80349f8:	b2db      	uxtb	r3, r3
 80349fa:	f003 0301 	and.w	r3, r3, #1
 80349fe:	2b00      	cmp	r3, #0
 8034a00:	d005      	beq.n	8034a0e <tcp_zero_window_probe+0x72>
 8034a02:	6a3b      	ldr	r3, [r7, #32]
 8034a04:	891b      	ldrh	r3, [r3, #8]
 8034a06:	2b00      	cmp	r3, #0
 8034a08:	d101      	bne.n	8034a0e <tcp_zero_window_probe+0x72>
 8034a0a:	2301      	movs	r3, #1
 8034a0c:	e000      	b.n	8034a10 <tcp_zero_window_probe+0x74>
 8034a0e:	2300      	movs	r3, #0
 8034a10:	77fb      	strb	r3, [r7, #31]
  /* we want to send one seqno: either FIN or data (no options) */
  len = is_fin ? 0 : 1;
 8034a12:	7ffb      	ldrb	r3, [r7, #31]
 8034a14:	2b00      	cmp	r3, #0
 8034a16:	bf0c      	ite	eq
 8034a18:	2301      	moveq	r3, #1
 8034a1a:	2300      	movne	r3, #0
 8034a1c:	b2db      	uxtb	r3, r3
 8034a1e:	83bb      	strh	r3, [r7, #28]

  p = tcp_output_alloc_header(pcb, optlen, len, seg->tcphdr->seqno);
 8034a20:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8034a24:	b299      	uxth	r1, r3
 8034a26:	6a3b      	ldr	r3, [r7, #32]
 8034a28:	68db      	ldr	r3, [r3, #12]
 8034a2a:	685b      	ldr	r3, [r3, #4]
 8034a2c:	8bba      	ldrh	r2, [r7, #28]
 8034a2e:	6878      	ldr	r0, [r7, #4]
 8034a30:	f7ff fdee 	bl	8034610 <tcp_output_alloc_header>
 8034a34:	61b8      	str	r0, [r7, #24]
  if (p == NULL) {
 8034a36:	69bb      	ldr	r3, [r7, #24]
 8034a38:	2b00      	cmp	r3, #0
 8034a3a:	d102      	bne.n	8034a42 <tcp_zero_window_probe+0xa6>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: no memory for pbuf\n"));
    return ERR_MEM;
 8034a3c:	f04f 33ff 	mov.w	r3, #4294967295
 8034a40:	e04c      	b.n	8034adc <tcp_zero_window_probe+0x140>
  }
  tcphdr = (struct tcp_hdr *)p->payload;
 8034a42:	69bb      	ldr	r3, [r7, #24]
 8034a44:	685b      	ldr	r3, [r3, #4]
 8034a46:	617b      	str	r3, [r7, #20]

  if (is_fin) {
 8034a48:	7ffb      	ldrb	r3, [r7, #31]
 8034a4a:	2b00      	cmp	r3, #0
 8034a4c:	d011      	beq.n	8034a72 <tcp_zero_window_probe+0xd6>
    /* FIN segment, no data */
    TCPH_FLAGS_SET(tcphdr, TCP_ACK | TCP_FIN);
 8034a4e:	697b      	ldr	r3, [r7, #20]
 8034a50:	899b      	ldrh	r3, [r3, #12]
 8034a52:	b29b      	uxth	r3, r3
 8034a54:	b21b      	sxth	r3, r3
 8034a56:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8034a5a:	b21c      	sxth	r4, r3
 8034a5c:	2011      	movs	r0, #17
 8034a5e:	f7f7 ff61 	bl	802c924 <lwip_htons>
 8034a62:	4603      	mov	r3, r0
 8034a64:	b21b      	sxth	r3, r3
 8034a66:	4323      	orrs	r3, r4
 8034a68:	b21b      	sxth	r3, r3
 8034a6a:	b29a      	uxth	r2, r3
 8034a6c:	697b      	ldr	r3, [r7, #20]
 8034a6e:	819a      	strh	r2, [r3, #12]
 8034a70:	e010      	b.n	8034a94 <tcp_zero_window_probe+0xf8>
  } else {
    /* Data segment, copy in one byte from the head of the unacked queue */
    char *d = ((char *)p->payload + TCP_HLEN);
 8034a72:	69bb      	ldr	r3, [r7, #24]
 8034a74:	685b      	ldr	r3, [r3, #4]
 8034a76:	3314      	adds	r3, #20
 8034a78:	613b      	str	r3, [r7, #16]
    /* Depending on whether the segment has already been sent (unacked) or not
       (unsent), seg->p->payload points to the IP header or TCP header.
       Ensure we copy the first TCP data byte: */
    pbuf_copy_partial(seg->p, d, 1, seg->p->tot_len - seg->len);
 8034a7a:	6a3b      	ldr	r3, [r7, #32]
 8034a7c:	6858      	ldr	r0, [r3, #4]
 8034a7e:	6a3b      	ldr	r3, [r7, #32]
 8034a80:	685b      	ldr	r3, [r3, #4]
 8034a82:	891a      	ldrh	r2, [r3, #8]
 8034a84:	6a3b      	ldr	r3, [r7, #32]
 8034a86:	891b      	ldrh	r3, [r3, #8]
 8034a88:	1ad3      	subs	r3, r2, r3
 8034a8a:	b29b      	uxth	r3, r3
 8034a8c:	2201      	movs	r2, #1
 8034a8e:	6939      	ldr	r1, [r7, #16]
 8034a90:	f7f9 fe42 	bl	802e718 <pbuf_copy_partial>
  }

  /* The byte may be acknowledged without the window being opened. */
  snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + 1;
 8034a94:	6a3b      	ldr	r3, [r7, #32]
 8034a96:	68db      	ldr	r3, [r3, #12]
 8034a98:	685b      	ldr	r3, [r3, #4]
 8034a9a:	4618      	mov	r0, r3
 8034a9c:	f7f7 ff57 	bl	802c94e <lwip_htonl>
 8034aa0:	4603      	mov	r3, r0
 8034aa2:	3301      	adds	r3, #1
 8034aa4:	60fb      	str	r3, [r7, #12]
  if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 8034aa6:	687b      	ldr	r3, [r7, #4]
 8034aa8:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8034aaa:	68fb      	ldr	r3, [r7, #12]
 8034aac:	1ad3      	subs	r3, r2, r3
 8034aae:	2b00      	cmp	r3, #0
 8034ab0:	da02      	bge.n	8034ab8 <tcp_zero_window_probe+0x11c>
    pcb->snd_nxt = snd_nxt;
 8034ab2:	687b      	ldr	r3, [r7, #4]
 8034ab4:	68fa      	ldr	r2, [r7, #12]
 8034ab6:	651a      	str	r2, [r3, #80]	; 0x50
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 8034ab8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8034abc:	2200      	movs	r2, #0
 8034abe:	69b9      	ldr	r1, [r7, #24]
 8034ac0:	6878      	ldr	r0, [r7, #4]
 8034ac2:	f7ff fde3 	bl	803468c <tcp_output_fill_options>

  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 8034ac6:	687a      	ldr	r2, [r7, #4]
 8034ac8:	687b      	ldr	r3, [r7, #4]
 8034aca:	3304      	adds	r3, #4
 8034acc:	69b9      	ldr	r1, [r7, #24]
 8034ace:	6878      	ldr	r0, [r7, #4]
 8034ad0:	f7ff fe1c 	bl	803470c <tcp_output_control_segment>
 8034ad4:	4603      	mov	r3, r0
 8034ad6:	72fb      	strb	r3, [r7, #11]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: seqno %"U32_F
                          " ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 8034ad8:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 8034adc:	4618      	mov	r0, r3
 8034ade:	372c      	adds	r7, #44	; 0x2c
 8034ae0:	46bd      	mov	sp, r7
 8034ae2:	bd90      	pop	{r4, r7, pc}
 8034ae4:	0803c128 	.word	0x0803c128
 8034ae8:	0803c920 	.word	0x0803c920
 8034aec:	0803c17c 	.word	0x0803c17c

08034af0 <tcpip_tcp_timer>:
 *
 * @param arg unused argument
 */
static void
tcpip_tcp_timer(void *arg)
{
 8034af0:	b580      	push	{r7, lr}
 8034af2:	b082      	sub	sp, #8
 8034af4:	af00      	add	r7, sp, #0
 8034af6:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);

  /* call TCP timer handler */
  tcp_tmr();
 8034af8:	f7f9 ff04 	bl	802e904 <tcp_tmr>
  /* timer still needed? */
  if (tcp_active_pcbs || tcp_tw_pcbs) {
 8034afc:	4b0a      	ldr	r3, [pc, #40]	; (8034b28 <tcpip_tcp_timer+0x38>)
 8034afe:	681b      	ldr	r3, [r3, #0]
 8034b00:	2b00      	cmp	r3, #0
 8034b02:	d103      	bne.n	8034b0c <tcpip_tcp_timer+0x1c>
 8034b04:	4b09      	ldr	r3, [pc, #36]	; (8034b2c <tcpip_tcp_timer+0x3c>)
 8034b06:	681b      	ldr	r3, [r3, #0]
 8034b08:	2b00      	cmp	r3, #0
 8034b0a:	d005      	beq.n	8034b18 <tcpip_tcp_timer+0x28>
    /* restart timer */
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 8034b0c:	2200      	movs	r2, #0
 8034b0e:	4908      	ldr	r1, [pc, #32]	; (8034b30 <tcpip_tcp_timer+0x40>)
 8034b10:	20fa      	movs	r0, #250	; 0xfa
 8034b12:	f000 f8f3 	bl	8034cfc <sys_timeout>
 8034b16:	e003      	b.n	8034b20 <tcpip_tcp_timer+0x30>
  } else {
    /* disable timer */
    tcpip_tcp_timer_active = 0;
 8034b18:	4b06      	ldr	r3, [pc, #24]	; (8034b34 <tcpip_tcp_timer+0x44>)
 8034b1a:	2200      	movs	r2, #0
 8034b1c:	601a      	str	r2, [r3, #0]
  }
}
 8034b1e:	bf00      	nop
 8034b20:	bf00      	nop
 8034b22:	3708      	adds	r7, #8
 8034b24:	46bd      	mov	sp, r7
 8034b26:	bd80      	pop	{r7, pc}
 8034b28:	2000ef0c 	.word	0x2000ef0c
 8034b2c:	2000ef10 	.word	0x2000ef10
 8034b30:	08034af1 	.word	0x08034af1
 8034b34:	2000ef58 	.word	0x2000ef58

08034b38 <tcp_timer_needed>:
 * the reason is to have the TCP timer only running when
 * there are active (or time-wait) PCBs.
 */
void
tcp_timer_needed(void)
{
 8034b38:	b580      	push	{r7, lr}
 8034b3a:	af00      	add	r7, sp, #0
  LWIP_ASSERT_CORE_LOCKED();

  /* timer is off but needed again? */
  if (!tcpip_tcp_timer_active && (tcp_active_pcbs || tcp_tw_pcbs)) {
 8034b3c:	4b0a      	ldr	r3, [pc, #40]	; (8034b68 <tcp_timer_needed+0x30>)
 8034b3e:	681b      	ldr	r3, [r3, #0]
 8034b40:	2b00      	cmp	r3, #0
 8034b42:	d10f      	bne.n	8034b64 <tcp_timer_needed+0x2c>
 8034b44:	4b09      	ldr	r3, [pc, #36]	; (8034b6c <tcp_timer_needed+0x34>)
 8034b46:	681b      	ldr	r3, [r3, #0]
 8034b48:	2b00      	cmp	r3, #0
 8034b4a:	d103      	bne.n	8034b54 <tcp_timer_needed+0x1c>
 8034b4c:	4b08      	ldr	r3, [pc, #32]	; (8034b70 <tcp_timer_needed+0x38>)
 8034b4e:	681b      	ldr	r3, [r3, #0]
 8034b50:	2b00      	cmp	r3, #0
 8034b52:	d007      	beq.n	8034b64 <tcp_timer_needed+0x2c>
    /* enable and start timer */
    tcpip_tcp_timer_active = 1;
 8034b54:	4b04      	ldr	r3, [pc, #16]	; (8034b68 <tcp_timer_needed+0x30>)
 8034b56:	2201      	movs	r2, #1
 8034b58:	601a      	str	r2, [r3, #0]
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 8034b5a:	2200      	movs	r2, #0
 8034b5c:	4905      	ldr	r1, [pc, #20]	; (8034b74 <tcp_timer_needed+0x3c>)
 8034b5e:	20fa      	movs	r0, #250	; 0xfa
 8034b60:	f000 f8cc 	bl	8034cfc <sys_timeout>
  }
}
 8034b64:	bf00      	nop
 8034b66:	bd80      	pop	{r7, pc}
 8034b68:	2000ef58 	.word	0x2000ef58
 8034b6c:	2000ef0c 	.word	0x2000ef0c
 8034b70:	2000ef10 	.word	0x2000ef10
 8034b74:	08034af1 	.word	0x08034af1

08034b78 <sys_timeout_abs>:
#if LWIP_DEBUG_TIMERNAMES
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg)
#endif
{
 8034b78:	b580      	push	{r7, lr}
 8034b7a:	b086      	sub	sp, #24
 8034b7c:	af00      	add	r7, sp, #0
 8034b7e:	60f8      	str	r0, [r7, #12]
 8034b80:	60b9      	str	r1, [r7, #8]
 8034b82:	607a      	str	r2, [r7, #4]
  struct sys_timeo *timeout, *t;

  timeout = (struct sys_timeo *)memp_malloc(MEMP_SYS_TIMEOUT);
 8034b84:	200a      	movs	r0, #10
 8034b86:	f7f8 fc6f 	bl	802d468 <memp_malloc>
 8034b8a:	6138      	str	r0, [r7, #16]
  if (timeout == NULL) {
 8034b8c:	693b      	ldr	r3, [r7, #16]
 8034b8e:	2b00      	cmp	r3, #0
 8034b90:	d109      	bne.n	8034ba6 <sys_timeout_abs+0x2e>
    LWIP_ASSERT("sys_timeout: timeout != NULL, pool MEMP_SYS_TIMEOUT is empty", timeout != NULL);
 8034b92:	693b      	ldr	r3, [r7, #16]
 8034b94:	2b00      	cmp	r3, #0
 8034b96:	d151      	bne.n	8034c3c <sys_timeout_abs+0xc4>
 8034b98:	4b2a      	ldr	r3, [pc, #168]	; (8034c44 <sys_timeout_abs+0xcc>)
 8034b9a:	22be      	movs	r2, #190	; 0xbe
 8034b9c:	492a      	ldr	r1, [pc, #168]	; (8034c48 <sys_timeout_abs+0xd0>)
 8034b9e:	482b      	ldr	r0, [pc, #172]	; (8034c4c <sys_timeout_abs+0xd4>)
 8034ba0:	f004 fa62 	bl	8039068 <iprintf>
    return;
 8034ba4:	e04a      	b.n	8034c3c <sys_timeout_abs+0xc4>
  }

  timeout->next = NULL;
 8034ba6:	693b      	ldr	r3, [r7, #16]
 8034ba8:	2200      	movs	r2, #0
 8034baa:	601a      	str	r2, [r3, #0]
  timeout->h = handler;
 8034bac:	693b      	ldr	r3, [r7, #16]
 8034bae:	68ba      	ldr	r2, [r7, #8]
 8034bb0:	609a      	str	r2, [r3, #8]
  timeout->arg = arg;
 8034bb2:	693b      	ldr	r3, [r7, #16]
 8034bb4:	687a      	ldr	r2, [r7, #4]
 8034bb6:	60da      	str	r2, [r3, #12]
  timeout->time = abs_time;
 8034bb8:	693b      	ldr	r3, [r7, #16]
 8034bba:	68fa      	ldr	r2, [r7, #12]
 8034bbc:	605a      	str	r2, [r3, #4]
  timeout->handler_name = handler_name;
  LWIP_DEBUGF(TIMERS_DEBUG, ("sys_timeout: %p abs_time=%"U32_F" handler=%s arg=%p\n",
                             (void *)timeout, abs_time, handler_name, (void *)arg));
#endif /* LWIP_DEBUG_TIMERNAMES */

  if (next_timeout == NULL) {
 8034bbe:	4b24      	ldr	r3, [pc, #144]	; (8034c50 <sys_timeout_abs+0xd8>)
 8034bc0:	681b      	ldr	r3, [r3, #0]
 8034bc2:	2b00      	cmp	r3, #0
 8034bc4:	d103      	bne.n	8034bce <sys_timeout_abs+0x56>
    next_timeout = timeout;
 8034bc6:	4a22      	ldr	r2, [pc, #136]	; (8034c50 <sys_timeout_abs+0xd8>)
 8034bc8:	693b      	ldr	r3, [r7, #16]
 8034bca:	6013      	str	r3, [r2, #0]
    return;
 8034bcc:	e037      	b.n	8034c3e <sys_timeout_abs+0xc6>
  }
  if (TIME_LESS_THAN(timeout->time, next_timeout->time)) {
 8034bce:	693b      	ldr	r3, [r7, #16]
 8034bd0:	685a      	ldr	r2, [r3, #4]
 8034bd2:	4b1f      	ldr	r3, [pc, #124]	; (8034c50 <sys_timeout_abs+0xd8>)
 8034bd4:	681b      	ldr	r3, [r3, #0]
 8034bd6:	685b      	ldr	r3, [r3, #4]
 8034bd8:	1ad3      	subs	r3, r2, r3
 8034bda:	0fdb      	lsrs	r3, r3, #31
 8034bdc:	f003 0301 	and.w	r3, r3, #1
 8034be0:	b2db      	uxtb	r3, r3
 8034be2:	2b00      	cmp	r3, #0
 8034be4:	d007      	beq.n	8034bf6 <sys_timeout_abs+0x7e>
    timeout->next = next_timeout;
 8034be6:	4b1a      	ldr	r3, [pc, #104]	; (8034c50 <sys_timeout_abs+0xd8>)
 8034be8:	681a      	ldr	r2, [r3, #0]
 8034bea:	693b      	ldr	r3, [r7, #16]
 8034bec:	601a      	str	r2, [r3, #0]
    next_timeout = timeout;
 8034bee:	4a18      	ldr	r2, [pc, #96]	; (8034c50 <sys_timeout_abs+0xd8>)
 8034bf0:	693b      	ldr	r3, [r7, #16]
 8034bf2:	6013      	str	r3, [r2, #0]
 8034bf4:	e023      	b.n	8034c3e <sys_timeout_abs+0xc6>
  } else {
    for (t = next_timeout; t != NULL; t = t->next) {
 8034bf6:	4b16      	ldr	r3, [pc, #88]	; (8034c50 <sys_timeout_abs+0xd8>)
 8034bf8:	681b      	ldr	r3, [r3, #0]
 8034bfa:	617b      	str	r3, [r7, #20]
 8034bfc:	e01a      	b.n	8034c34 <sys_timeout_abs+0xbc>
      if ((t->next == NULL) || TIME_LESS_THAN(timeout->time, t->next->time)) {
 8034bfe:	697b      	ldr	r3, [r7, #20]
 8034c00:	681b      	ldr	r3, [r3, #0]
 8034c02:	2b00      	cmp	r3, #0
 8034c04:	d00b      	beq.n	8034c1e <sys_timeout_abs+0xa6>
 8034c06:	693b      	ldr	r3, [r7, #16]
 8034c08:	685a      	ldr	r2, [r3, #4]
 8034c0a:	697b      	ldr	r3, [r7, #20]
 8034c0c:	681b      	ldr	r3, [r3, #0]
 8034c0e:	685b      	ldr	r3, [r3, #4]
 8034c10:	1ad3      	subs	r3, r2, r3
 8034c12:	0fdb      	lsrs	r3, r3, #31
 8034c14:	f003 0301 	and.w	r3, r3, #1
 8034c18:	b2db      	uxtb	r3, r3
 8034c1a:	2b00      	cmp	r3, #0
 8034c1c:	d007      	beq.n	8034c2e <sys_timeout_abs+0xb6>
        timeout->next = t->next;
 8034c1e:	697b      	ldr	r3, [r7, #20]
 8034c20:	681a      	ldr	r2, [r3, #0]
 8034c22:	693b      	ldr	r3, [r7, #16]
 8034c24:	601a      	str	r2, [r3, #0]
        t->next = timeout;
 8034c26:	697b      	ldr	r3, [r7, #20]
 8034c28:	693a      	ldr	r2, [r7, #16]
 8034c2a:	601a      	str	r2, [r3, #0]
        break;
 8034c2c:	e007      	b.n	8034c3e <sys_timeout_abs+0xc6>
    for (t = next_timeout; t != NULL; t = t->next) {
 8034c2e:	697b      	ldr	r3, [r7, #20]
 8034c30:	681b      	ldr	r3, [r3, #0]
 8034c32:	617b      	str	r3, [r7, #20]
 8034c34:	697b      	ldr	r3, [r7, #20]
 8034c36:	2b00      	cmp	r3, #0
 8034c38:	d1e1      	bne.n	8034bfe <sys_timeout_abs+0x86>
 8034c3a:	e000      	b.n	8034c3e <sys_timeout_abs+0xc6>
    return;
 8034c3c:	bf00      	nop
      }
    }
  }
}
 8034c3e:	3718      	adds	r7, #24
 8034c40:	46bd      	mov	sp, r7
 8034c42:	bd80      	pop	{r7, pc}
 8034c44:	0803c944 	.word	0x0803c944
 8034c48:	0803c978 	.word	0x0803c978
 8034c4c:	0803c9b8 	.word	0x0803c9b8
 8034c50:	2000ef50 	.word	0x2000ef50

08034c54 <lwip_cyclic_timer>:
#if !LWIP_TESTMODE
static
#endif
void
lwip_cyclic_timer(void *arg)
{
 8034c54:	b580      	push	{r7, lr}
 8034c56:	b086      	sub	sp, #24
 8034c58:	af00      	add	r7, sp, #0
 8034c5a:	6078      	str	r0, [r7, #4]
  u32_t now;
  u32_t next_timeout_time;
  const struct lwip_cyclic_timer *cyclic = (const struct lwip_cyclic_timer *)arg;
 8034c5c:	687b      	ldr	r3, [r7, #4]
 8034c5e:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  LWIP_DEBUGF(TIMERS_DEBUG, ("tcpip: %s()\n", cyclic->handler_name));
#endif
  cyclic->handler();
 8034c60:	697b      	ldr	r3, [r7, #20]
 8034c62:	685b      	ldr	r3, [r3, #4]
 8034c64:	4798      	blx	r3

  now = sys_now();
 8034c66:	f7f0 f987 	bl	8024f78 <sys_now>
 8034c6a:	6138      	str	r0, [r7, #16]
  next_timeout_time = (u32_t)(current_timeout_due_time + cyclic->interval_ms);  /* overflow handled by TIME_LESS_THAN macro */ 
 8034c6c:	697b      	ldr	r3, [r7, #20]
 8034c6e:	681a      	ldr	r2, [r3, #0]
 8034c70:	4b0f      	ldr	r3, [pc, #60]	; (8034cb0 <lwip_cyclic_timer+0x5c>)
 8034c72:	681b      	ldr	r3, [r3, #0]
 8034c74:	4413      	add	r3, r2
 8034c76:	60fb      	str	r3, [r7, #12]
  if (TIME_LESS_THAN(next_timeout_time, now)) {
 8034c78:	68fa      	ldr	r2, [r7, #12]
 8034c7a:	693b      	ldr	r3, [r7, #16]
 8034c7c:	1ad3      	subs	r3, r2, r3
 8034c7e:	0fdb      	lsrs	r3, r3, #31
 8034c80:	f003 0301 	and.w	r3, r3, #1
 8034c84:	b2db      	uxtb	r3, r3
 8034c86:	2b00      	cmp	r3, #0
 8034c88:	d009      	beq.n	8034c9e <lwip_cyclic_timer+0x4a>
    /* timer would immediately expire again -> "overload" -> restart without any correction */
#if LWIP_DEBUG_TIMERNAMES
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg);
 8034c8a:	697b      	ldr	r3, [r7, #20]
 8034c8c:	681a      	ldr	r2, [r3, #0]
 8034c8e:	693b      	ldr	r3, [r7, #16]
 8034c90:	4413      	add	r3, r2
 8034c92:	687a      	ldr	r2, [r7, #4]
 8034c94:	4907      	ldr	r1, [pc, #28]	; (8034cb4 <lwip_cyclic_timer+0x60>)
 8034c96:	4618      	mov	r0, r3
 8034c98:	f7ff ff6e 	bl	8034b78 <sys_timeout_abs>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
#endif
  }
}
 8034c9c:	e004      	b.n	8034ca8 <lwip_cyclic_timer+0x54>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
 8034c9e:	687a      	ldr	r2, [r7, #4]
 8034ca0:	4904      	ldr	r1, [pc, #16]	; (8034cb4 <lwip_cyclic_timer+0x60>)
 8034ca2:	68f8      	ldr	r0, [r7, #12]
 8034ca4:	f7ff ff68 	bl	8034b78 <sys_timeout_abs>
}
 8034ca8:	bf00      	nop
 8034caa:	3718      	adds	r7, #24
 8034cac:	46bd      	mov	sp, r7
 8034cae:	bd80      	pop	{r7, pc}
 8034cb0:	2000ef54 	.word	0x2000ef54
 8034cb4:	08034c55 	.word	0x08034c55

08034cb8 <sys_timeouts_init>:

/** Initialize this module */
void sys_timeouts_init(void)
{
 8034cb8:	b580      	push	{r7, lr}
 8034cba:	b082      	sub	sp, #8
 8034cbc:	af00      	add	r7, sp, #0
  size_t i;
  /* tcp_tmr() at index 0 is started on demand */
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 8034cbe:	2301      	movs	r3, #1
 8034cc0:	607b      	str	r3, [r7, #4]
 8034cc2:	e00e      	b.n	8034ce2 <sys_timeouts_init+0x2a>
    /* we have to cast via size_t to get rid of const warning
      (this is OK as cyclic_timer() casts back to const* */
    sys_timeout(lwip_cyclic_timers[i].interval_ms, lwip_cyclic_timer, LWIP_CONST_CAST(void *, &lwip_cyclic_timers[i]));
 8034cc4:	4a0b      	ldr	r2, [pc, #44]	; (8034cf4 <sys_timeouts_init+0x3c>)
 8034cc6:	687b      	ldr	r3, [r7, #4]
 8034cc8:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 8034ccc:	687b      	ldr	r3, [r7, #4]
 8034cce:	00db      	lsls	r3, r3, #3
 8034cd0:	4a08      	ldr	r2, [pc, #32]	; (8034cf4 <sys_timeouts_init+0x3c>)
 8034cd2:	4413      	add	r3, r2
 8034cd4:	461a      	mov	r2, r3
 8034cd6:	4908      	ldr	r1, [pc, #32]	; (8034cf8 <sys_timeouts_init+0x40>)
 8034cd8:	f000 f810 	bl	8034cfc <sys_timeout>
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 8034cdc:	687b      	ldr	r3, [r7, #4]
 8034cde:	3301      	adds	r3, #1
 8034ce0:	607b      	str	r3, [r7, #4]
 8034ce2:	687b      	ldr	r3, [r7, #4]
 8034ce4:	2b02      	cmp	r3, #2
 8034ce6:	d9ed      	bls.n	8034cc4 <sys_timeouts_init+0xc>
  }
}
 8034ce8:	bf00      	nop
 8034cea:	bf00      	nop
 8034cec:	3708      	adds	r7, #8
 8034cee:	46bd      	mov	sp, r7
 8034cf0:	bd80      	pop	{r7, pc}
 8034cf2:	bf00      	nop
 8034cf4:	0803d614 	.word	0x0803d614
 8034cf8:	08034c55 	.word	0x08034c55

08034cfc <sys_timeout>:
sys_timeout_debug(u32_t msecs, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
void
sys_timeout(u32_t msecs, sys_timeout_handler handler, void *arg)
#endif /* LWIP_DEBUG_TIMERNAMES */
{
 8034cfc:	b580      	push	{r7, lr}
 8034cfe:	b086      	sub	sp, #24
 8034d00:	af00      	add	r7, sp, #0
 8034d02:	60f8      	str	r0, [r7, #12]
 8034d04:	60b9      	str	r1, [r7, #8]
 8034d06:	607a      	str	r2, [r7, #4]
  u32_t next_timeout_time;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("Timeout time too long, max is LWIP_UINT32_MAX/4 msecs", msecs <= (LWIP_UINT32_MAX / 4));
 8034d08:	68fb      	ldr	r3, [r7, #12]
 8034d0a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8034d0e:	d306      	bcc.n	8034d1e <sys_timeout+0x22>
 8034d10:	4b0a      	ldr	r3, [pc, #40]	; (8034d3c <sys_timeout+0x40>)
 8034d12:	f240 1229 	movw	r2, #297	; 0x129
 8034d16:	490a      	ldr	r1, [pc, #40]	; (8034d40 <sys_timeout+0x44>)
 8034d18:	480a      	ldr	r0, [pc, #40]	; (8034d44 <sys_timeout+0x48>)
 8034d1a:	f004 f9a5 	bl	8039068 <iprintf>

  next_timeout_time = (u32_t)(sys_now() + msecs); /* overflow handled by TIME_LESS_THAN macro */ 
 8034d1e:	f7f0 f92b 	bl	8024f78 <sys_now>
 8034d22:	4602      	mov	r2, r0
 8034d24:	68fb      	ldr	r3, [r7, #12]
 8034d26:	4413      	add	r3, r2
 8034d28:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  sys_timeout_abs(next_timeout_time, handler, arg, handler_name);
#else
  sys_timeout_abs(next_timeout_time, handler, arg);
 8034d2a:	687a      	ldr	r2, [r7, #4]
 8034d2c:	68b9      	ldr	r1, [r7, #8]
 8034d2e:	6978      	ldr	r0, [r7, #20]
 8034d30:	f7ff ff22 	bl	8034b78 <sys_timeout_abs>
#endif
}
 8034d34:	bf00      	nop
 8034d36:	3718      	adds	r7, #24
 8034d38:	46bd      	mov	sp, r7
 8034d3a:	bd80      	pop	{r7, pc}
 8034d3c:	0803c944 	.word	0x0803c944
 8034d40:	0803c9e0 	.word	0x0803c9e0
 8034d44:	0803c9b8 	.word	0x0803c9b8

08034d48 <sys_check_timeouts>:
 *
 * Must be called periodically from your main loop.
 */
void
sys_check_timeouts(void)
{
 8034d48:	b580      	push	{r7, lr}
 8034d4a:	b084      	sub	sp, #16
 8034d4c:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  /* Process only timers expired at the start of the function. */
  now = sys_now();
 8034d4e:	f7f0 f913 	bl	8024f78 <sys_now>
 8034d52:	60f8      	str	r0, [r7, #12]
    sys_timeout_handler handler;
    void *arg;

    PBUF_CHECK_FREE_OOSEQ();

    tmptimeout = next_timeout;
 8034d54:	4b17      	ldr	r3, [pc, #92]	; (8034db4 <sys_check_timeouts+0x6c>)
 8034d56:	681b      	ldr	r3, [r3, #0]
 8034d58:	60bb      	str	r3, [r7, #8]
    if (tmptimeout == NULL) {
 8034d5a:	68bb      	ldr	r3, [r7, #8]
 8034d5c:	2b00      	cmp	r3, #0
 8034d5e:	d022      	beq.n	8034da6 <sys_check_timeouts+0x5e>
      return;
    }

    if (TIME_LESS_THAN(now, tmptimeout->time)) {
 8034d60:	68bb      	ldr	r3, [r7, #8]
 8034d62:	685b      	ldr	r3, [r3, #4]
 8034d64:	68fa      	ldr	r2, [r7, #12]
 8034d66:	1ad3      	subs	r3, r2, r3
 8034d68:	0fdb      	lsrs	r3, r3, #31
 8034d6a:	f003 0301 	and.w	r3, r3, #1
 8034d6e:	b2db      	uxtb	r3, r3
 8034d70:	2b00      	cmp	r3, #0
 8034d72:	d11a      	bne.n	8034daa <sys_check_timeouts+0x62>
      return;
    }

    /* Timeout has expired */
    next_timeout = tmptimeout->next;
 8034d74:	68bb      	ldr	r3, [r7, #8]
 8034d76:	681b      	ldr	r3, [r3, #0]
 8034d78:	4a0e      	ldr	r2, [pc, #56]	; (8034db4 <sys_check_timeouts+0x6c>)
 8034d7a:	6013      	str	r3, [r2, #0]
    handler = tmptimeout->h;
 8034d7c:	68bb      	ldr	r3, [r7, #8]
 8034d7e:	689b      	ldr	r3, [r3, #8]
 8034d80:	607b      	str	r3, [r7, #4]
    arg = tmptimeout->arg;
 8034d82:	68bb      	ldr	r3, [r7, #8]
 8034d84:	68db      	ldr	r3, [r3, #12]
 8034d86:	603b      	str	r3, [r7, #0]
    current_timeout_due_time = tmptimeout->time;
 8034d88:	68bb      	ldr	r3, [r7, #8]
 8034d8a:	685b      	ldr	r3, [r3, #4]
 8034d8c:	4a0a      	ldr	r2, [pc, #40]	; (8034db8 <sys_check_timeouts+0x70>)
 8034d8e:	6013      	str	r3, [r2, #0]
    if (handler != NULL) {
      LWIP_DEBUGF(TIMERS_DEBUG, ("sct calling h=%s t=%"U32_F" arg=%p\n",
                                 tmptimeout->handler_name, sys_now() - tmptimeout->time, arg));
    }
#endif /* LWIP_DEBUG_TIMERNAMES */
    memp_free(MEMP_SYS_TIMEOUT, tmptimeout);
 8034d90:	68b9      	ldr	r1, [r7, #8]
 8034d92:	200a      	movs	r0, #10
 8034d94:	f7f8 fbe4 	bl	802d560 <memp_free>
    if (handler != NULL) {
 8034d98:	687b      	ldr	r3, [r7, #4]
 8034d9a:	2b00      	cmp	r3, #0
 8034d9c:	d0da      	beq.n	8034d54 <sys_check_timeouts+0xc>
      handler(arg);
 8034d9e:	687b      	ldr	r3, [r7, #4]
 8034da0:	6838      	ldr	r0, [r7, #0]
 8034da2:	4798      	blx	r3
  do {
 8034da4:	e7d6      	b.n	8034d54 <sys_check_timeouts+0xc>
      return;
 8034da6:	bf00      	nop
 8034da8:	e000      	b.n	8034dac <sys_check_timeouts+0x64>
      return;
 8034daa:	bf00      	nop
    }
    LWIP_TCPIP_THREAD_ALIVE();

    /* Repeat until all expired timers have been called */
  } while (1);
}
 8034dac:	3710      	adds	r7, #16
 8034dae:	46bd      	mov	sp, r7
 8034db0:	bd80      	pop	{r7, pc}
 8034db2:	bf00      	nop
 8034db4:	2000ef50 	.word	0x2000ef50
 8034db8:	2000ef54 	.word	0x2000ef54

08034dbc <sys_timeouts_sleeptime>:
/** Return the time left before the next timeout is due. If no timeouts are
 * enqueued, returns 0xffffffff
 */
u32_t
sys_timeouts_sleeptime(void)
{
 8034dbc:	b580      	push	{r7, lr}
 8034dbe:	b082      	sub	sp, #8
 8034dc0:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  if (next_timeout == NULL) {
 8034dc2:	4b16      	ldr	r3, [pc, #88]	; (8034e1c <sys_timeouts_sleeptime+0x60>)
 8034dc4:	681b      	ldr	r3, [r3, #0]
 8034dc6:	2b00      	cmp	r3, #0
 8034dc8:	d102      	bne.n	8034dd0 <sys_timeouts_sleeptime+0x14>
    return SYS_TIMEOUTS_SLEEPTIME_INFINITE;
 8034dca:	f04f 33ff 	mov.w	r3, #4294967295
 8034dce:	e020      	b.n	8034e12 <sys_timeouts_sleeptime+0x56>
  }
  now = sys_now();
 8034dd0:	f7f0 f8d2 	bl	8024f78 <sys_now>
 8034dd4:	6078      	str	r0, [r7, #4]
  if (TIME_LESS_THAN(next_timeout->time, now)) {
 8034dd6:	4b11      	ldr	r3, [pc, #68]	; (8034e1c <sys_timeouts_sleeptime+0x60>)
 8034dd8:	681b      	ldr	r3, [r3, #0]
 8034dda:	685a      	ldr	r2, [r3, #4]
 8034ddc:	687b      	ldr	r3, [r7, #4]
 8034dde:	1ad3      	subs	r3, r2, r3
 8034de0:	0fdb      	lsrs	r3, r3, #31
 8034de2:	f003 0301 	and.w	r3, r3, #1
 8034de6:	b2db      	uxtb	r3, r3
 8034de8:	2b00      	cmp	r3, #0
 8034dea:	d001      	beq.n	8034df0 <sys_timeouts_sleeptime+0x34>
    return 0;
 8034dec:	2300      	movs	r3, #0
 8034dee:	e010      	b.n	8034e12 <sys_timeouts_sleeptime+0x56>
  } else {
    u32_t ret = (u32_t)(next_timeout->time - now);
 8034df0:	4b0a      	ldr	r3, [pc, #40]	; (8034e1c <sys_timeouts_sleeptime+0x60>)
 8034df2:	681b      	ldr	r3, [r3, #0]
 8034df4:	685a      	ldr	r2, [r3, #4]
 8034df6:	687b      	ldr	r3, [r7, #4]
 8034df8:	1ad3      	subs	r3, r2, r3
 8034dfa:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("invalid sleeptime", ret <= LWIP_MAX_TIMEOUT);
 8034dfc:	683b      	ldr	r3, [r7, #0]
 8034dfe:	2b00      	cmp	r3, #0
 8034e00:	da06      	bge.n	8034e10 <sys_timeouts_sleeptime+0x54>
 8034e02:	4b07      	ldr	r3, [pc, #28]	; (8034e20 <sys_timeouts_sleeptime+0x64>)
 8034e04:	f44f 72dc 	mov.w	r2, #440	; 0x1b8
 8034e08:	4906      	ldr	r1, [pc, #24]	; (8034e24 <sys_timeouts_sleeptime+0x68>)
 8034e0a:	4807      	ldr	r0, [pc, #28]	; (8034e28 <sys_timeouts_sleeptime+0x6c>)
 8034e0c:	f004 f92c 	bl	8039068 <iprintf>
    return ret;
 8034e10:	683b      	ldr	r3, [r7, #0]
  }
}
 8034e12:	4618      	mov	r0, r3
 8034e14:	3708      	adds	r7, #8
 8034e16:	46bd      	mov	sp, r7
 8034e18:	bd80      	pop	{r7, pc}
 8034e1a:	bf00      	nop
 8034e1c:	2000ef50 	.word	0x2000ef50
 8034e20:	0803c944 	.word	0x0803c944
 8034e24:	0803ca18 	.word	0x0803ca18
 8034e28:	0803c9b8 	.word	0x0803c9b8

08034e2c <udp_init>:
/**
 * Initialize this module.
 */
void
udp_init(void)
{
 8034e2c:	b580      	push	{r7, lr}
 8034e2e:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  udp_port = UDP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 8034e30:	f004 f9a8 	bl	8039184 <rand>
 8034e34:	4603      	mov	r3, r0
 8034e36:	b29b      	uxth	r3, r3
 8034e38:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8034e3c:	b29b      	uxth	r3, r3
 8034e3e:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 8034e42:	b29a      	uxth	r2, r3
 8034e44:	4b01      	ldr	r3, [pc, #4]	; (8034e4c <udp_init+0x20>)
 8034e46:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 8034e48:	bf00      	nop
 8034e4a:	bd80      	pop	{r7, pc}
 8034e4c:	20000030 	.word	0x20000030

08034e50 <udp_new_port>:
 *
 * @return a new (free) local UDP port number
 */
static u16_t
udp_new_port(void)
{
 8034e50:	b480      	push	{r7}
 8034e52:	b083      	sub	sp, #12
 8034e54:	af00      	add	r7, sp, #0
  u16_t n = 0;
 8034e56:	2300      	movs	r3, #0
 8034e58:	80fb      	strh	r3, [r7, #6]
  struct udp_pcb *pcb;

again:
  if (udp_port++ == UDP_LOCAL_PORT_RANGE_END) {
 8034e5a:	4b17      	ldr	r3, [pc, #92]	; (8034eb8 <udp_new_port+0x68>)
 8034e5c:	881b      	ldrh	r3, [r3, #0]
 8034e5e:	1c5a      	adds	r2, r3, #1
 8034e60:	b291      	uxth	r1, r2
 8034e62:	4a15      	ldr	r2, [pc, #84]	; (8034eb8 <udp_new_port+0x68>)
 8034e64:	8011      	strh	r1, [r2, #0]
 8034e66:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8034e6a:	4293      	cmp	r3, r2
 8034e6c:	d103      	bne.n	8034e76 <udp_new_port+0x26>
    udp_port = UDP_LOCAL_PORT_RANGE_START;
 8034e6e:	4b12      	ldr	r3, [pc, #72]	; (8034eb8 <udp_new_port+0x68>)
 8034e70:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 8034e74:	801a      	strh	r2, [r3, #0]
  }
  /* Check all PCBs. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8034e76:	4b11      	ldr	r3, [pc, #68]	; (8034ebc <udp_new_port+0x6c>)
 8034e78:	681b      	ldr	r3, [r3, #0]
 8034e7a:	603b      	str	r3, [r7, #0]
 8034e7c:	e011      	b.n	8034ea2 <udp_new_port+0x52>
    if (pcb->local_port == udp_port) {
 8034e7e:	683b      	ldr	r3, [r7, #0]
 8034e80:	8a5a      	ldrh	r2, [r3, #18]
 8034e82:	4b0d      	ldr	r3, [pc, #52]	; (8034eb8 <udp_new_port+0x68>)
 8034e84:	881b      	ldrh	r3, [r3, #0]
 8034e86:	429a      	cmp	r2, r3
 8034e88:	d108      	bne.n	8034e9c <udp_new_port+0x4c>
      if (++n > (UDP_LOCAL_PORT_RANGE_END - UDP_LOCAL_PORT_RANGE_START)) {
 8034e8a:	88fb      	ldrh	r3, [r7, #6]
 8034e8c:	3301      	adds	r3, #1
 8034e8e:	80fb      	strh	r3, [r7, #6]
 8034e90:	88fb      	ldrh	r3, [r7, #6]
 8034e92:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8034e96:	d3e0      	bcc.n	8034e5a <udp_new_port+0xa>
        return 0;
 8034e98:	2300      	movs	r3, #0
 8034e9a:	e007      	b.n	8034eac <udp_new_port+0x5c>
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8034e9c:	683b      	ldr	r3, [r7, #0]
 8034e9e:	68db      	ldr	r3, [r3, #12]
 8034ea0:	603b      	str	r3, [r7, #0]
 8034ea2:	683b      	ldr	r3, [r7, #0]
 8034ea4:	2b00      	cmp	r3, #0
 8034ea6:	d1ea      	bne.n	8034e7e <udp_new_port+0x2e>
      }
      goto again;
    }
  }
  return udp_port;
 8034ea8:	4b03      	ldr	r3, [pc, #12]	; (8034eb8 <udp_new_port+0x68>)
 8034eaa:	881b      	ldrh	r3, [r3, #0]
}
 8034eac:	4618      	mov	r0, r3
 8034eae:	370c      	adds	r7, #12
 8034eb0:	46bd      	mov	sp, r7
 8034eb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8034eb6:	4770      	bx	lr
 8034eb8:	20000030 	.word	0x20000030
 8034ebc:	2000ef5c 	.word	0x2000ef5c

08034ec0 <udp_input_local_match>:
 * @param broadcast 1 if his is an IPv4 broadcast (global or subnet-only), 0 otherwise (only used for IPv4)
 * @return 1 on match, 0 otherwise
 */
static u8_t
udp_input_local_match(struct udp_pcb *pcb, struct netif *inp, u8_t broadcast)
{
 8034ec0:	b580      	push	{r7, lr}
 8034ec2:	b084      	sub	sp, #16
 8034ec4:	af00      	add	r7, sp, #0
 8034ec6:	60f8      	str	r0, [r7, #12]
 8034ec8:	60b9      	str	r1, [r7, #8]
 8034eca:	4613      	mov	r3, r2
 8034ecc:	71fb      	strb	r3, [r7, #7]
  LWIP_UNUSED_ARG(inp);       /* in IPv6 only case */
  LWIP_UNUSED_ARG(broadcast); /* in IPv6 only case */

  LWIP_ASSERT("udp_input_local_match: invalid pcb", pcb != NULL);
 8034ece:	68fb      	ldr	r3, [r7, #12]
 8034ed0:	2b00      	cmp	r3, #0
 8034ed2:	d105      	bne.n	8034ee0 <udp_input_local_match+0x20>
 8034ed4:	4b27      	ldr	r3, [pc, #156]	; (8034f74 <udp_input_local_match+0xb4>)
 8034ed6:	2287      	movs	r2, #135	; 0x87
 8034ed8:	4927      	ldr	r1, [pc, #156]	; (8034f78 <udp_input_local_match+0xb8>)
 8034eda:	4828      	ldr	r0, [pc, #160]	; (8034f7c <udp_input_local_match+0xbc>)
 8034edc:	f004 f8c4 	bl	8039068 <iprintf>
  LWIP_ASSERT("udp_input_local_match: invalid netif", inp != NULL);
 8034ee0:	68bb      	ldr	r3, [r7, #8]
 8034ee2:	2b00      	cmp	r3, #0
 8034ee4:	d105      	bne.n	8034ef2 <udp_input_local_match+0x32>
 8034ee6:	4b23      	ldr	r3, [pc, #140]	; (8034f74 <udp_input_local_match+0xb4>)
 8034ee8:	2288      	movs	r2, #136	; 0x88
 8034eea:	4925      	ldr	r1, [pc, #148]	; (8034f80 <udp_input_local_match+0xc0>)
 8034eec:	4823      	ldr	r0, [pc, #140]	; (8034f7c <udp_input_local_match+0xbc>)
 8034eee:	f004 f8bb 	bl	8039068 <iprintf>

  /* check if PCB is bound to specific netif */
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8034ef2:	68fb      	ldr	r3, [r7, #12]
 8034ef4:	7a1b      	ldrb	r3, [r3, #8]
 8034ef6:	2b00      	cmp	r3, #0
 8034ef8:	d00b      	beq.n	8034f12 <udp_input_local_match+0x52>
      (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 8034efa:	68fb      	ldr	r3, [r7, #12]
 8034efc:	7a1a      	ldrb	r2, [r3, #8]
 8034efe:	4b21      	ldr	r3, [pc, #132]	; (8034f84 <udp_input_local_match+0xc4>)
 8034f00:	685b      	ldr	r3, [r3, #4]
 8034f02:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8034f06:	3301      	adds	r3, #1
 8034f08:	b2db      	uxtb	r3, r3
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8034f0a:	429a      	cmp	r2, r3
 8034f0c:	d001      	beq.n	8034f12 <udp_input_local_match+0x52>
    return 0;
 8034f0e:	2300      	movs	r3, #0
 8034f10:	e02b      	b.n	8034f6a <udp_input_local_match+0xaa>
  /* Only need to check PCB if incoming IP version matches PCB IP version */
  if (IP_ADDR_PCB_VERSION_MATCH_EXACT(pcb, ip_current_dest_addr())) {
#if LWIP_IPV4
    /* Special case: IPv4 broadcast: all or broadcasts in my subnet
     * Note: broadcast variable can only be 1 if it is an IPv4 broadcast */
    if (broadcast != 0) {
 8034f12:	79fb      	ldrb	r3, [r7, #7]
 8034f14:	2b00      	cmp	r3, #0
 8034f16:	d018      	beq.n	8034f4a <udp_input_local_match+0x8a>
#if IP_SOF_BROADCAST_RECV
      if (ip_get_option(pcb, SOF_BROADCAST))
#endif /* IP_SOF_BROADCAST_RECV */
      {
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 8034f18:	68fb      	ldr	r3, [r7, #12]
 8034f1a:	2b00      	cmp	r3, #0
 8034f1c:	d013      	beq.n	8034f46 <udp_input_local_match+0x86>
 8034f1e:	68fb      	ldr	r3, [r7, #12]
 8034f20:	681b      	ldr	r3, [r3, #0]
 8034f22:	2b00      	cmp	r3, #0
 8034f24:	d00f      	beq.n	8034f46 <udp_input_local_match+0x86>
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 8034f26:	4b17      	ldr	r3, [pc, #92]	; (8034f84 <udp_input_local_match+0xc4>)
 8034f28:	695b      	ldr	r3, [r3, #20]
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 8034f2a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8034f2e:	d00a      	beq.n	8034f46 <udp_input_local_match+0x86>
            ip4_addr_netcmp(ip_2_ip4(&pcb->local_ip), ip4_current_dest_addr(), netif_ip4_netmask(inp))) {
 8034f30:	68fb      	ldr	r3, [r7, #12]
 8034f32:	681a      	ldr	r2, [r3, #0]
 8034f34:	4b13      	ldr	r3, [pc, #76]	; (8034f84 <udp_input_local_match+0xc4>)
 8034f36:	695b      	ldr	r3, [r3, #20]
 8034f38:	405a      	eors	r2, r3
 8034f3a:	68bb      	ldr	r3, [r7, #8]
 8034f3c:	3308      	adds	r3, #8
 8034f3e:	681b      	ldr	r3, [r3, #0]
 8034f40:	4013      	ands	r3, r2
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 8034f42:	2b00      	cmp	r3, #0
 8034f44:	d110      	bne.n	8034f68 <udp_input_local_match+0xa8>
          return 1;
 8034f46:	2301      	movs	r3, #1
 8034f48:	e00f      	b.n	8034f6a <udp_input_local_match+0xaa>
        }
      }
    } else
#endif /* LWIP_IPV4 */
      /* Handle IPv4 and IPv6: all or exact match */
      if (ip_addr_isany(&pcb->local_ip) || ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 8034f4a:	68fb      	ldr	r3, [r7, #12]
 8034f4c:	2b00      	cmp	r3, #0
 8034f4e:	d009      	beq.n	8034f64 <udp_input_local_match+0xa4>
 8034f50:	68fb      	ldr	r3, [r7, #12]
 8034f52:	681b      	ldr	r3, [r3, #0]
 8034f54:	2b00      	cmp	r3, #0
 8034f56:	d005      	beq.n	8034f64 <udp_input_local_match+0xa4>
 8034f58:	68fb      	ldr	r3, [r7, #12]
 8034f5a:	681a      	ldr	r2, [r3, #0]
 8034f5c:	4b09      	ldr	r3, [pc, #36]	; (8034f84 <udp_input_local_match+0xc4>)
 8034f5e:	695b      	ldr	r3, [r3, #20]
 8034f60:	429a      	cmp	r2, r3
 8034f62:	d101      	bne.n	8034f68 <udp_input_local_match+0xa8>
        return 1;
 8034f64:	2301      	movs	r3, #1
 8034f66:	e000      	b.n	8034f6a <udp_input_local_match+0xaa>
      }
  }

  return 0;
 8034f68:	2300      	movs	r3, #0
}
 8034f6a:	4618      	mov	r0, r3
 8034f6c:	3710      	adds	r7, #16
 8034f6e:	46bd      	mov	sp, r7
 8034f70:	bd80      	pop	{r7, pc}
 8034f72:	bf00      	nop
 8034f74:	0803ca2c 	.word	0x0803ca2c
 8034f78:	0803ca5c 	.word	0x0803ca5c
 8034f7c:	0803ca80 	.word	0x0803ca80
 8034f80:	0803caa8 	.word	0x0803caa8
 8034f84:	2000b320 	.word	0x2000b320

08034f88 <udp_input>:
 * @param inp network interface on which the datagram was received.
 *
 */
void
udp_input(struct pbuf *p, struct netif *inp)
{
 8034f88:	b590      	push	{r4, r7, lr}
 8034f8a:	b08d      	sub	sp, #52	; 0x34
 8034f8c:	af02      	add	r7, sp, #8
 8034f8e:	6078      	str	r0, [r7, #4]
 8034f90:	6039      	str	r1, [r7, #0]
  struct udp_hdr *udphdr;
  struct udp_pcb *pcb, *prev;
  struct udp_pcb *uncon_pcb;
  u16_t src, dest;
  u8_t broadcast;
  u8_t for_us = 0;
 8034f92:	2300      	movs	r3, #0
 8034f94:	76fb      	strb	r3, [r7, #27]

  LWIP_UNUSED_ARG(inp);

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("udp_input: invalid pbuf", p != NULL);
 8034f96:	687b      	ldr	r3, [r7, #4]
 8034f98:	2b00      	cmp	r3, #0
 8034f9a:	d105      	bne.n	8034fa8 <udp_input+0x20>
 8034f9c:	4b98      	ldr	r3, [pc, #608]	; (8035200 <udp_input+0x278>)
 8034f9e:	22cf      	movs	r2, #207	; 0xcf
 8034fa0:	4998      	ldr	r1, [pc, #608]	; (8035204 <udp_input+0x27c>)
 8034fa2:	4899      	ldr	r0, [pc, #612]	; (8035208 <udp_input+0x280>)
 8034fa4:	f004 f860 	bl	8039068 <iprintf>
  LWIP_ASSERT("udp_input: invalid netif", inp != NULL);
 8034fa8:	683b      	ldr	r3, [r7, #0]
 8034faa:	2b00      	cmp	r3, #0
 8034fac:	d105      	bne.n	8034fba <udp_input+0x32>
 8034fae:	4b94      	ldr	r3, [pc, #592]	; (8035200 <udp_input+0x278>)
 8034fb0:	22d0      	movs	r2, #208	; 0xd0
 8034fb2:	4996      	ldr	r1, [pc, #600]	; (803520c <udp_input+0x284>)
 8034fb4:	4894      	ldr	r0, [pc, #592]	; (8035208 <udp_input+0x280>)
 8034fb6:	f004 f857 	bl	8039068 <iprintf>

  PERF_START;

  UDP_STATS_INC(udp.recv);
 8034fba:	4b95      	ldr	r3, [pc, #596]	; (8035210 <udp_input+0x288>)
 8034fbc:	f8b3 307a 	ldrh.w	r3, [r3, #122]	; 0x7a
 8034fc0:	3301      	adds	r3, #1
 8034fc2:	b29a      	uxth	r2, r3
 8034fc4:	4b92      	ldr	r3, [pc, #584]	; (8035210 <udp_input+0x288>)
 8034fc6:	f8a3 207a 	strh.w	r2, [r3, #122]	; 0x7a

  /* Check minimum length (UDP header) */
  if (p->len < UDP_HLEN) {
 8034fca:	687b      	ldr	r3, [r7, #4]
 8034fcc:	895b      	ldrh	r3, [r3, #10]
 8034fce:	2b07      	cmp	r3, #7
 8034fd0:	d813      	bhi.n	8034ffa <udp_input+0x72>
    /* drop short packets */
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_input: short UDP datagram (%"U16_F" bytes) discarded\n", p->tot_len));
    UDP_STATS_INC(udp.lenerr);
 8034fd2:	4b8f      	ldr	r3, [pc, #572]	; (8035210 <udp_input+0x288>)
 8034fd4:	f8b3 3082 	ldrh.w	r3, [r3, #130]	; 0x82
 8034fd8:	3301      	adds	r3, #1
 8034fda:	b29a      	uxth	r2, r3
 8034fdc:	4b8c      	ldr	r3, [pc, #560]	; (8035210 <udp_input+0x288>)
 8034fde:	f8a3 2082 	strh.w	r2, [r3, #130]	; 0x82
    UDP_STATS_INC(udp.drop);
 8034fe2:	4b8b      	ldr	r3, [pc, #556]	; (8035210 <udp_input+0x288>)
 8034fe4:	f8b3 307e 	ldrh.w	r3, [r3, #126]	; 0x7e
 8034fe8:	3301      	adds	r3, #1
 8034fea:	b29a      	uxth	r2, r3
 8034fec:	4b88      	ldr	r3, [pc, #544]	; (8035210 <udp_input+0x288>)
 8034fee:	f8a3 207e 	strh.w	r2, [r3, #126]	; 0x7e
    MIB2_STATS_INC(mib2.udpinerrors);
    pbuf_free(p);
 8034ff2:	6878      	ldr	r0, [r7, #4]
 8034ff4:	f7f9 f98a 	bl	802e30c <pbuf_free>
    goto end;
 8034ff8:	e0fd      	b.n	80351f6 <udp_input+0x26e>
  }

  udphdr = (struct udp_hdr *)p->payload;
 8034ffa:	687b      	ldr	r3, [r7, #4]
 8034ffc:	685b      	ldr	r3, [r3, #4]
 8034ffe:	617b      	str	r3, [r7, #20]

  /* is broadcast packet ? */
  broadcast = ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif());
 8035000:	4b84      	ldr	r3, [pc, #528]	; (8035214 <udp_input+0x28c>)
 8035002:	695b      	ldr	r3, [r3, #20]
 8035004:	4a83      	ldr	r2, [pc, #524]	; (8035214 <udp_input+0x28c>)
 8035006:	6812      	ldr	r2, [r2, #0]
 8035008:	4611      	mov	r1, r2
 803500a:	4618      	mov	r0, r3
 803500c:	f002 f8a6 	bl	803715c <ip4_addr_isbroadcast_u32>
 8035010:	4603      	mov	r3, r0
 8035012:	74fb      	strb	r3, [r7, #19]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_input: received datagram of length %"U16_F"\n", p->tot_len));

  /* convert src and dest ports to host byte order */
  src = lwip_ntohs(udphdr->src);
 8035014:	697b      	ldr	r3, [r7, #20]
 8035016:	881b      	ldrh	r3, [r3, #0]
 8035018:	b29b      	uxth	r3, r3
 803501a:	4618      	mov	r0, r3
 803501c:	f7f7 fc82 	bl	802c924 <lwip_htons>
 8035020:	4603      	mov	r3, r0
 8035022:	823b      	strh	r3, [r7, #16]
  dest = lwip_ntohs(udphdr->dest);
 8035024:	697b      	ldr	r3, [r7, #20]
 8035026:	885b      	ldrh	r3, [r3, #2]
 8035028:	b29b      	uxth	r3, r3
 803502a:	4618      	mov	r0, r3
 803502c:	f7f7 fc7a 	bl	802c924 <lwip_htons>
 8035030:	4603      	mov	r3, r0
 8035032:	81fb      	strh	r3, [r7, #14]
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_dest_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", lwip_ntohs(udphdr->dest)));
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_src_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", lwip_ntohs(udphdr->src)));

  pcb = NULL;
 8035034:	2300      	movs	r3, #0
 8035036:	627b      	str	r3, [r7, #36]	; 0x24
  prev = NULL;
 8035038:	2300      	movs	r3, #0
 803503a:	623b      	str	r3, [r7, #32]
  uncon_pcb = NULL;
 803503c:	2300      	movs	r3, #0
 803503e:	61fb      	str	r3, [r7, #28]
  /* Iterate through the UDP pcb list for a matching pcb.
   * 'Perfect match' pcbs (connected to the remote port & ip address) are
   * preferred. If no perfect match is found, the first unconnected pcb that
   * matches the local port and ip address gets the datagram. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8035040:	4b75      	ldr	r3, [pc, #468]	; (8035218 <udp_input+0x290>)
 8035042:	681b      	ldr	r3, [r3, #0]
 8035044:	627b      	str	r3, [r7, #36]	; 0x24
 8035046:	e05d      	b.n	8035104 <udp_input+0x17c>
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", pcb->local_port));
    ip_addr_debug_print_val(UDP_DEBUG, pcb->remote_ip);
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", pcb->remote_port));

    /* compare PCB local addr+port to UDP destination addr+port */
    if ((pcb->local_port == dest) &&
 8035048:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 803504a:	8a5b      	ldrh	r3, [r3, #18]
 803504c:	89fa      	ldrh	r2, [r7, #14]
 803504e:	429a      	cmp	r2, r3
 8035050:	d153      	bne.n	80350fa <udp_input+0x172>
        (udp_input_local_match(pcb, inp, broadcast) != 0)) {
 8035052:	7cfb      	ldrb	r3, [r7, #19]
 8035054:	461a      	mov	r2, r3
 8035056:	6839      	ldr	r1, [r7, #0]
 8035058:	6a78      	ldr	r0, [r7, #36]	; 0x24
 803505a:	f7ff ff31 	bl	8034ec0 <udp_input_local_match>
 803505e:	4603      	mov	r3, r0
    if ((pcb->local_port == dest) &&
 8035060:	2b00      	cmp	r3, #0
 8035062:	d04a      	beq.n	80350fa <udp_input+0x172>
      if ((pcb->flags & UDP_FLAGS_CONNECTED) == 0) {
 8035064:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8035066:	7c1b      	ldrb	r3, [r3, #16]
 8035068:	f003 0304 	and.w	r3, r3, #4
 803506c:	2b00      	cmp	r3, #0
 803506e:	d11d      	bne.n	80350ac <udp_input+0x124>
        if (uncon_pcb == NULL) {
 8035070:	69fb      	ldr	r3, [r7, #28]
 8035072:	2b00      	cmp	r3, #0
 8035074:	d102      	bne.n	803507c <udp_input+0xf4>
          /* the first unconnected matching PCB */
          uncon_pcb = pcb;
 8035076:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8035078:	61fb      	str	r3, [r7, #28]
 803507a:	e017      	b.n	80350ac <udp_input+0x124>
#if LWIP_IPV4
        } else if (broadcast && ip4_current_dest_addr()->addr == IPADDR_BROADCAST) {
 803507c:	7cfb      	ldrb	r3, [r7, #19]
 803507e:	2b00      	cmp	r3, #0
 8035080:	d014      	beq.n	80350ac <udp_input+0x124>
 8035082:	4b64      	ldr	r3, [pc, #400]	; (8035214 <udp_input+0x28c>)
 8035084:	695b      	ldr	r3, [r3, #20]
 8035086:	f1b3 3fff 	cmp.w	r3, #4294967295
 803508a:	d10f      	bne.n	80350ac <udp_input+0x124>
          /* global broadcast address (only valid for IPv4; match was checked before) */
          if (!IP_IS_V4_VAL(uncon_pcb->local_ip) || !ip4_addr_cmp(ip_2_ip4(&uncon_pcb->local_ip), netif_ip4_addr(inp))) {
 803508c:	69fb      	ldr	r3, [r7, #28]
 803508e:	681a      	ldr	r2, [r3, #0]
 8035090:	683b      	ldr	r3, [r7, #0]
 8035092:	3304      	adds	r3, #4
 8035094:	681b      	ldr	r3, [r3, #0]
 8035096:	429a      	cmp	r2, r3
 8035098:	d008      	beq.n	80350ac <udp_input+0x124>
            /* uncon_pcb does not match the input netif, check this pcb */
            if (IP_IS_V4_VAL(pcb->local_ip) && ip4_addr_cmp(ip_2_ip4(&pcb->local_ip), netif_ip4_addr(inp))) {
 803509a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 803509c:	681a      	ldr	r2, [r3, #0]
 803509e:	683b      	ldr	r3, [r7, #0]
 80350a0:	3304      	adds	r3, #4
 80350a2:	681b      	ldr	r3, [r3, #0]
 80350a4:	429a      	cmp	r2, r3
 80350a6:	d101      	bne.n	80350ac <udp_input+0x124>
              /* better match */
              uncon_pcb = pcb;
 80350a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80350aa:	61fb      	str	r3, [r7, #28]
        }
#endif /* SO_REUSE */
      }

      /* compare PCB remote addr+port to UDP source addr+port */
      if ((pcb->remote_port == src) &&
 80350ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80350ae:	8a9b      	ldrh	r3, [r3, #20]
 80350b0:	8a3a      	ldrh	r2, [r7, #16]
 80350b2:	429a      	cmp	r2, r3
 80350b4:	d121      	bne.n	80350fa <udp_input+0x172>
          (ip_addr_isany_val(pcb->remote_ip) ||
 80350b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80350b8:	685b      	ldr	r3, [r3, #4]
      if ((pcb->remote_port == src) &&
 80350ba:	2b00      	cmp	r3, #0
 80350bc:	d005      	beq.n	80350ca <udp_input+0x142>
           ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()))) {
 80350be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80350c0:	685a      	ldr	r2, [r3, #4]
 80350c2:	4b54      	ldr	r3, [pc, #336]	; (8035214 <udp_input+0x28c>)
 80350c4:	691b      	ldr	r3, [r3, #16]
          (ip_addr_isany_val(pcb->remote_ip) ||
 80350c6:	429a      	cmp	r2, r3
 80350c8:	d117      	bne.n	80350fa <udp_input+0x172>
        /* the first fully matching PCB */
        if (prev != NULL) {
 80350ca:	6a3b      	ldr	r3, [r7, #32]
 80350cc:	2b00      	cmp	r3, #0
 80350ce:	d00b      	beq.n	80350e8 <udp_input+0x160>
          /* move the pcb to the front of udp_pcbs so that is
             found faster next time */
          prev->next = pcb->next;
 80350d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80350d2:	68da      	ldr	r2, [r3, #12]
 80350d4:	6a3b      	ldr	r3, [r7, #32]
 80350d6:	60da      	str	r2, [r3, #12]
          pcb->next = udp_pcbs;
 80350d8:	4b4f      	ldr	r3, [pc, #316]	; (8035218 <udp_input+0x290>)
 80350da:	681a      	ldr	r2, [r3, #0]
 80350dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80350de:	60da      	str	r2, [r3, #12]
          udp_pcbs = pcb;
 80350e0:	4a4d      	ldr	r2, [pc, #308]	; (8035218 <udp_input+0x290>)
 80350e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80350e4:	6013      	str	r3, [r2, #0]
        } else {
          UDP_STATS_INC(udp.cachehit);
        }
        break;
 80350e6:	e010      	b.n	803510a <udp_input+0x182>
          UDP_STATS_INC(udp.cachehit);
 80350e8:	4b49      	ldr	r3, [pc, #292]	; (8035210 <udp_input+0x288>)
 80350ea:	f8b3 308e 	ldrh.w	r3, [r3, #142]	; 0x8e
 80350ee:	3301      	adds	r3, #1
 80350f0:	b29a      	uxth	r2, r3
 80350f2:	4b47      	ldr	r3, [pc, #284]	; (8035210 <udp_input+0x288>)
 80350f4:	f8a3 208e 	strh.w	r2, [r3, #142]	; 0x8e
        break;
 80350f8:	e007      	b.n	803510a <udp_input+0x182>
      }
    }

    prev = pcb;
 80350fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80350fc:	623b      	str	r3, [r7, #32]
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 80350fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8035100:	68db      	ldr	r3, [r3, #12]
 8035102:	627b      	str	r3, [r7, #36]	; 0x24
 8035104:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8035106:	2b00      	cmp	r3, #0
 8035108:	d19e      	bne.n	8035048 <udp_input+0xc0>
  }
  /* no fully matching pcb found? then look for an unconnected pcb */
  if (pcb == NULL) {
 803510a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 803510c:	2b00      	cmp	r3, #0
 803510e:	d101      	bne.n	8035114 <udp_input+0x18c>
    pcb = uncon_pcb;
 8035110:	69fb      	ldr	r3, [r7, #28]
 8035112:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* Check checksum if this is a match or if it was directed at us. */
  if (pcb != NULL) {
 8035114:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8035116:	2b00      	cmp	r3, #0
 8035118:	d002      	beq.n	8035120 <udp_input+0x198>
    for_us = 1;
 803511a:	2301      	movs	r3, #1
 803511c:	76fb      	strb	r3, [r7, #27]
 803511e:	e00a      	b.n	8035136 <udp_input+0x1ae>
      for_us = netif_get_ip6_addr_match(inp, ip6_current_dest_addr()) >= 0;
    }
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    if (!ip_current_is_v6()) {
      for_us = ip4_addr_cmp(netif_ip4_addr(inp), ip4_current_dest_addr());
 8035120:	683b      	ldr	r3, [r7, #0]
 8035122:	3304      	adds	r3, #4
 8035124:	681a      	ldr	r2, [r3, #0]
 8035126:	4b3b      	ldr	r3, [pc, #236]	; (8035214 <udp_input+0x28c>)
 8035128:	695b      	ldr	r3, [r3, #20]
 803512a:	429a      	cmp	r2, r3
 803512c:	bf0c      	ite	eq
 803512e:	2301      	moveq	r3, #1
 8035130:	2300      	movne	r3, #0
 8035132:	b2db      	uxtb	r3, r3
 8035134:	76fb      	strb	r3, [r7, #27]
    }
#endif /* LWIP_IPV4 */
  }

  if (for_us) {
 8035136:	7efb      	ldrb	r3, [r7, #27]
 8035138:	2b00      	cmp	r3, #0
 803513a:	d059      	beq.n	80351f0 <udp_input+0x268>
          }
        }
      }
    }
#endif /* CHECKSUM_CHECK_UDP */
    if (pbuf_remove_header(p, UDP_HLEN)) {
 803513c:	2108      	movs	r1, #8
 803513e:	6878      	ldr	r0, [r7, #4]
 8035140:	f7f9 f82c 	bl	802e19c <pbuf_remove_header>
 8035144:	4603      	mov	r3, r0
 8035146:	2b00      	cmp	r3, #0
 8035148:	d012      	beq.n	8035170 <udp_input+0x1e8>
      /* Can we cope with this failing? Just assert for now */
      LWIP_ASSERT("pbuf_remove_header failed\n", 0);
 803514a:	4b2d      	ldr	r3, [pc, #180]	; (8035200 <udp_input+0x278>)
 803514c:	f44f 72b8 	mov.w	r2, #368	; 0x170
 8035150:	4932      	ldr	r1, [pc, #200]	; (803521c <udp_input+0x294>)
 8035152:	482d      	ldr	r0, [pc, #180]	; (8035208 <udp_input+0x280>)
 8035154:	f003 ff88 	bl	8039068 <iprintf>
      UDP_STATS_INC(udp.drop);
 8035158:	4b2d      	ldr	r3, [pc, #180]	; (8035210 <udp_input+0x288>)
 803515a:	f8b3 307e 	ldrh.w	r3, [r3, #126]	; 0x7e
 803515e:	3301      	adds	r3, #1
 8035160:	b29a      	uxth	r2, r3
 8035162:	4b2b      	ldr	r3, [pc, #172]	; (8035210 <udp_input+0x288>)
 8035164:	f8a3 207e 	strh.w	r2, [r3, #126]	; 0x7e
      MIB2_STATS_INC(mib2.udpinerrors);
      pbuf_free(p);
 8035168:	6878      	ldr	r0, [r7, #4]
 803516a:	f7f9 f8cf 	bl	802e30c <pbuf_free>
      goto end;
 803516e:	e042      	b.n	80351f6 <udp_input+0x26e>
    }

    if (pcb != NULL) {
 8035170:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8035172:	2b00      	cmp	r3, #0
 8035174:	d012      	beq.n	803519c <udp_input+0x214>
          }
        }
      }
#endif /* SO_REUSE && SO_REUSE_RXTOALL */
      /* callback */
      if (pcb->recv != NULL) {
 8035176:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8035178:	699b      	ldr	r3, [r3, #24]
 803517a:	2b00      	cmp	r3, #0
 803517c:	d00a      	beq.n	8035194 <udp_input+0x20c>
        /* now the recv function is responsible for freeing p */
        pcb->recv(pcb->recv_arg, pcb, p, ip_current_src_addr(), src);
 803517e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8035180:	699c      	ldr	r4, [r3, #24]
 8035182:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8035184:	69d8      	ldr	r0, [r3, #28]
 8035186:	8a3b      	ldrh	r3, [r7, #16]
 8035188:	9300      	str	r3, [sp, #0]
 803518a:	4b25      	ldr	r3, [pc, #148]	; (8035220 <udp_input+0x298>)
 803518c:	687a      	ldr	r2, [r7, #4]
 803518e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8035190:	47a0      	blx	r4
  } else {
    pbuf_free(p);
  }
end:
  PERF_STOP("udp_input");
  return;
 8035192:	e031      	b.n	80351f8 <udp_input+0x270>
        pbuf_free(p);
 8035194:	6878      	ldr	r0, [r7, #4]
 8035196:	f7f9 f8b9 	bl	802e30c <pbuf_free>
        goto end;
 803519a:	e02c      	b.n	80351f6 <udp_input+0x26e>
      if (!broadcast && !ip_addr_ismulticast(ip_current_dest_addr())) {
 803519c:	7cfb      	ldrb	r3, [r7, #19]
 803519e:	2b00      	cmp	r3, #0
 80351a0:	d112      	bne.n	80351c8 <udp_input+0x240>
 80351a2:	4b1c      	ldr	r3, [pc, #112]	; (8035214 <udp_input+0x28c>)
 80351a4:	695b      	ldr	r3, [r3, #20]
 80351a6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80351aa:	2be0      	cmp	r3, #224	; 0xe0
 80351ac:	d00c      	beq.n	80351c8 <udp_input+0x240>
        pbuf_header_force(p, (s16_t)(ip_current_header_tot_len() + UDP_HLEN));
 80351ae:	4b19      	ldr	r3, [pc, #100]	; (8035214 <udp_input+0x28c>)
 80351b0:	899b      	ldrh	r3, [r3, #12]
 80351b2:	3308      	adds	r3, #8
 80351b4:	b29b      	uxth	r3, r3
 80351b6:	b21b      	sxth	r3, r3
 80351b8:	4619      	mov	r1, r3
 80351ba:	6878      	ldr	r0, [r7, #4]
 80351bc:	f7f9 f861 	bl	802e282 <pbuf_header_force>
        icmp_port_unreach(ip_current_is_v6(), p);
 80351c0:	2103      	movs	r1, #3
 80351c2:	6878      	ldr	r0, [r7, #4]
 80351c4:	f001 fc2e 	bl	8036a24 <icmp_dest_unreach>
      UDP_STATS_INC(udp.proterr);
 80351c8:	4b11      	ldr	r3, [pc, #68]	; (8035210 <udp_input+0x288>)
 80351ca:	f8b3 3088 	ldrh.w	r3, [r3, #136]	; 0x88
 80351ce:	3301      	adds	r3, #1
 80351d0:	b29a      	uxth	r2, r3
 80351d2:	4b0f      	ldr	r3, [pc, #60]	; (8035210 <udp_input+0x288>)
 80351d4:	f8a3 2088 	strh.w	r2, [r3, #136]	; 0x88
      UDP_STATS_INC(udp.drop);
 80351d8:	4b0d      	ldr	r3, [pc, #52]	; (8035210 <udp_input+0x288>)
 80351da:	f8b3 307e 	ldrh.w	r3, [r3, #126]	; 0x7e
 80351de:	3301      	adds	r3, #1
 80351e0:	b29a      	uxth	r2, r3
 80351e2:	4b0b      	ldr	r3, [pc, #44]	; (8035210 <udp_input+0x288>)
 80351e4:	f8a3 207e 	strh.w	r2, [r3, #126]	; 0x7e
      pbuf_free(p);
 80351e8:	6878      	ldr	r0, [r7, #4]
 80351ea:	f7f9 f88f 	bl	802e30c <pbuf_free>
  return;
 80351ee:	e003      	b.n	80351f8 <udp_input+0x270>
    pbuf_free(p);
 80351f0:	6878      	ldr	r0, [r7, #4]
 80351f2:	f7f9 f88b 	bl	802e30c <pbuf_free>
  return;
 80351f6:	bf00      	nop
  UDP_STATS_INC(udp.drop);
  MIB2_STATS_INC(mib2.udpinerrors);
  pbuf_free(p);
  PERF_STOP("udp_input");
#endif /* CHECKSUM_CHECK_UDP */
}
 80351f8:	372c      	adds	r7, #44	; 0x2c
 80351fa:	46bd      	mov	sp, r7
 80351fc:	bd90      	pop	{r4, r7, pc}
 80351fe:	bf00      	nop
 8035200:	0803ca2c 	.word	0x0803ca2c
 8035204:	0803cad0 	.word	0x0803cad0
 8035208:	0803ca80 	.word	0x0803ca80
 803520c:	0803cae8 	.word	0x0803cae8
 8035210:	2000ee04 	.word	0x2000ee04
 8035214:	2000b320 	.word	0x2000b320
 8035218:	2000ef5c 	.word	0x2000ef5c
 803521c:	0803cb04 	.word	0x0803cb04
 8035220:	2000b330 	.word	0x2000b330

08035224 <udp_send>:
 *
 * @see udp_disconnect() udp_sendto()
 */
err_t
udp_send(struct udp_pcb *pcb, struct pbuf *p)
{
 8035224:	b580      	push	{r7, lr}
 8035226:	b082      	sub	sp, #8
 8035228:	af00      	add	r7, sp, #0
 803522a:	6078      	str	r0, [r7, #4]
 803522c:	6039      	str	r1, [r7, #0]
  LWIP_ERROR("udp_send: invalid pcb", pcb != NULL, return ERR_ARG);
 803522e:	687b      	ldr	r3, [r7, #4]
 8035230:	2b00      	cmp	r3, #0
 8035232:	d109      	bne.n	8035248 <udp_send+0x24>
 8035234:	4b11      	ldr	r3, [pc, #68]	; (803527c <udp_send+0x58>)
 8035236:	f240 12d5 	movw	r2, #469	; 0x1d5
 803523a:	4911      	ldr	r1, [pc, #68]	; (8035280 <udp_send+0x5c>)
 803523c:	4811      	ldr	r0, [pc, #68]	; (8035284 <udp_send+0x60>)
 803523e:	f003 ff13 	bl	8039068 <iprintf>
 8035242:	f06f 030f 	mvn.w	r3, #15
 8035246:	e015      	b.n	8035274 <udp_send+0x50>
  LWIP_ERROR("udp_send: invalid pbuf", p != NULL, return ERR_ARG);
 8035248:	683b      	ldr	r3, [r7, #0]
 803524a:	2b00      	cmp	r3, #0
 803524c:	d109      	bne.n	8035262 <udp_send+0x3e>
 803524e:	4b0b      	ldr	r3, [pc, #44]	; (803527c <udp_send+0x58>)
 8035250:	f44f 72eb 	mov.w	r2, #470	; 0x1d6
 8035254:	490c      	ldr	r1, [pc, #48]	; (8035288 <udp_send+0x64>)
 8035256:	480b      	ldr	r0, [pc, #44]	; (8035284 <udp_send+0x60>)
 8035258:	f003 ff06 	bl	8039068 <iprintf>
 803525c:	f06f 030f 	mvn.w	r3, #15
 8035260:	e008      	b.n	8035274 <udp_send+0x50>
  if (IP_IS_ANY_TYPE_VAL(pcb->remote_ip)) {
    return ERR_VAL;
  }

  /* send to the packet using remote ip and port stored in the pcb */
  return udp_sendto(pcb, p, &pcb->remote_ip, pcb->remote_port);
 8035262:	687b      	ldr	r3, [r7, #4]
 8035264:	1d1a      	adds	r2, r3, #4
 8035266:	687b      	ldr	r3, [r7, #4]
 8035268:	8a9b      	ldrh	r3, [r3, #20]
 803526a:	6839      	ldr	r1, [r7, #0]
 803526c:	6878      	ldr	r0, [r7, #4]
 803526e:	f000 f80d 	bl	803528c <udp_sendto>
 8035272:	4603      	mov	r3, r0
}
 8035274:	4618      	mov	r0, r3
 8035276:	3708      	adds	r7, #8
 8035278:	46bd      	mov	sp, r7
 803527a:	bd80      	pop	{r7, pc}
 803527c:	0803ca2c 	.word	0x0803ca2c
 8035280:	0803cb20 	.word	0x0803cb20
 8035284:	0803ca80 	.word	0x0803ca80
 8035288:	0803cb38 	.word	0x0803cb38

0803528c <udp_sendto>:
 * @see udp_disconnect() udp_send()
 */
err_t
udp_sendto(struct udp_pcb *pcb, struct pbuf *p,
           const ip_addr_t *dst_ip, u16_t dst_port)
{
 803528c:	b580      	push	{r7, lr}
 803528e:	b088      	sub	sp, #32
 8035290:	af02      	add	r7, sp, #8
 8035292:	60f8      	str	r0, [r7, #12]
 8035294:	60b9      	str	r1, [r7, #8]
 8035296:	607a      	str	r2, [r7, #4]
 8035298:	807b      	strh	r3, [r7, #2]
                  u16_t dst_port, u8_t have_chksum, u16_t chksum)
{
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  struct netif *netif;

  LWIP_ERROR("udp_sendto: invalid pcb", pcb != NULL, return ERR_ARG);
 803529a:	68fb      	ldr	r3, [r7, #12]
 803529c:	2b00      	cmp	r3, #0
 803529e:	d109      	bne.n	80352b4 <udp_sendto+0x28>
 80352a0:	4b27      	ldr	r3, [pc, #156]	; (8035340 <udp_sendto+0xb4>)
 80352a2:	f44f 7206 	mov.w	r2, #536	; 0x218
 80352a6:	4927      	ldr	r1, [pc, #156]	; (8035344 <udp_sendto+0xb8>)
 80352a8:	4827      	ldr	r0, [pc, #156]	; (8035348 <udp_sendto+0xbc>)
 80352aa:	f003 fedd 	bl	8039068 <iprintf>
 80352ae:	f06f 030f 	mvn.w	r3, #15
 80352b2:	e040      	b.n	8035336 <udp_sendto+0xaa>
  LWIP_ERROR("udp_sendto: invalid pbuf", p != NULL, return ERR_ARG);
 80352b4:	68bb      	ldr	r3, [r7, #8]
 80352b6:	2b00      	cmp	r3, #0
 80352b8:	d109      	bne.n	80352ce <udp_sendto+0x42>
 80352ba:	4b21      	ldr	r3, [pc, #132]	; (8035340 <udp_sendto+0xb4>)
 80352bc:	f240 2219 	movw	r2, #537	; 0x219
 80352c0:	4922      	ldr	r1, [pc, #136]	; (803534c <udp_sendto+0xc0>)
 80352c2:	4821      	ldr	r0, [pc, #132]	; (8035348 <udp_sendto+0xbc>)
 80352c4:	f003 fed0 	bl	8039068 <iprintf>
 80352c8:	f06f 030f 	mvn.w	r3, #15
 80352cc:	e033      	b.n	8035336 <udp_sendto+0xaa>
  LWIP_ERROR("udp_sendto: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 80352ce:	687b      	ldr	r3, [r7, #4]
 80352d0:	2b00      	cmp	r3, #0
 80352d2:	d109      	bne.n	80352e8 <udp_sendto+0x5c>
 80352d4:	4b1a      	ldr	r3, [pc, #104]	; (8035340 <udp_sendto+0xb4>)
 80352d6:	f240 221a 	movw	r2, #538	; 0x21a
 80352da:	491d      	ldr	r1, [pc, #116]	; (8035350 <udp_sendto+0xc4>)
 80352dc:	481a      	ldr	r0, [pc, #104]	; (8035348 <udp_sendto+0xbc>)
 80352de:	f003 fec3 	bl	8039068 <iprintf>
 80352e2:	f06f 030f 	mvn.w	r3, #15
 80352e6:	e026      	b.n	8035336 <udp_sendto+0xaa>
    return ERR_VAL;
  }

  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_send\n"));

  if (pcb->netif_idx != NETIF_NO_INDEX) {
 80352e8:	68fb      	ldr	r3, [r7, #12]
 80352ea:	7a1b      	ldrb	r3, [r3, #8]
 80352ec:	2b00      	cmp	r3, #0
 80352ee:	d006      	beq.n	80352fe <udp_sendto+0x72>
    netif = netif_get_by_index(pcb->netif_idx);
 80352f0:	68fb      	ldr	r3, [r7, #12]
 80352f2:	7a1b      	ldrb	r3, [r3, #8]
 80352f4:	4618      	mov	r0, r3
 80352f6:	f7f8 fc49 	bl	802db8c <netif_get_by_index>
 80352fa:	6178      	str	r0, [r7, #20]
 80352fc:	e003      	b.n	8035306 <udp_sendto+0x7a>

    if (netif == NULL)
#endif /* LWIP_MULTICAST_TX_OPTIONS */
    {
      /* find the outgoing network interface for this packet */
      netif = ip_route(&pcb->local_ip, dst_ip);
 80352fe:	6878      	ldr	r0, [r7, #4]
 8035300:	f001 fc24 	bl	8036b4c <ip4_route>
 8035304:	6178      	str	r0, [r7, #20]
    }
  }

  /* no outgoing network interface could be found? */
  if (netif == NULL) {
 8035306:	697b      	ldr	r3, [r7, #20]
 8035308:	2b00      	cmp	r3, #0
 803530a:	d10a      	bne.n	8035322 <udp_sendto+0x96>
    LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: No route to "));
    ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, dst_ip);
    LWIP_DEBUGF(UDP_DEBUG, ("\n"));
    UDP_STATS_INC(udp.rterr);
 803530c:	4b11      	ldr	r3, [pc, #68]	; (8035354 <udp_sendto+0xc8>)
 803530e:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
 8035312:	3301      	adds	r3, #1
 8035314:	b29a      	uxth	r2, r3
 8035316:	4b0f      	ldr	r3, [pc, #60]	; (8035354 <udp_sendto+0xc8>)
 8035318:	f8a3 2086 	strh.w	r2, [r3, #134]	; 0x86
    return ERR_RTE;
 803531c:	f06f 0303 	mvn.w	r3, #3
 8035320:	e009      	b.n	8035336 <udp_sendto+0xaa>
  }
#if LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP
  return udp_sendto_if_chksum(pcb, p, dst_ip, dst_port, netif, have_chksum, chksum);
#else /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  return udp_sendto_if(pcb, p, dst_ip, dst_port, netif);
 8035322:	887a      	ldrh	r2, [r7, #2]
 8035324:	697b      	ldr	r3, [r7, #20]
 8035326:	9300      	str	r3, [sp, #0]
 8035328:	4613      	mov	r3, r2
 803532a:	687a      	ldr	r2, [r7, #4]
 803532c:	68b9      	ldr	r1, [r7, #8]
 803532e:	68f8      	ldr	r0, [r7, #12]
 8035330:	f000 f812 	bl	8035358 <udp_sendto_if>
 8035334:	4603      	mov	r3, r0
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
}
 8035336:	4618      	mov	r0, r3
 8035338:	3718      	adds	r7, #24
 803533a:	46bd      	mov	sp, r7
 803533c:	bd80      	pop	{r7, pc}
 803533e:	bf00      	nop
 8035340:	0803ca2c 	.word	0x0803ca2c
 8035344:	0803cb50 	.word	0x0803cb50
 8035348:	0803ca80 	.word	0x0803ca80
 803534c:	0803cb68 	.word	0x0803cb68
 8035350:	0803cb84 	.word	0x0803cb84
 8035354:	2000ee04 	.word	0x2000ee04

08035358 <udp_sendto_if>:
 * @see udp_disconnect() udp_send()
 */
err_t
udp_sendto_if(struct udp_pcb *pcb, struct pbuf *p,
              const ip_addr_t *dst_ip, u16_t dst_port, struct netif *netif)
{
 8035358:	b580      	push	{r7, lr}
 803535a:	b088      	sub	sp, #32
 803535c:	af02      	add	r7, sp, #8
 803535e:	60f8      	str	r0, [r7, #12]
 8035360:	60b9      	str	r1, [r7, #8]
 8035362:	607a      	str	r2, [r7, #4]
 8035364:	807b      	strh	r3, [r7, #2]
                     u16_t chksum)
{
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  const ip_addr_t *src_ip;

  LWIP_ERROR("udp_sendto_if: invalid pcb", pcb != NULL, return ERR_ARG);
 8035366:	68fb      	ldr	r3, [r7, #12]
 8035368:	2b00      	cmp	r3, #0
 803536a:	d109      	bne.n	8035380 <udp_sendto_if+0x28>
 803536c:	4b2e      	ldr	r3, [pc, #184]	; (8035428 <udp_sendto_if+0xd0>)
 803536e:	f44f 7220 	mov.w	r2, #640	; 0x280
 8035372:	492e      	ldr	r1, [pc, #184]	; (803542c <udp_sendto_if+0xd4>)
 8035374:	482e      	ldr	r0, [pc, #184]	; (8035430 <udp_sendto_if+0xd8>)
 8035376:	f003 fe77 	bl	8039068 <iprintf>
 803537a:	f06f 030f 	mvn.w	r3, #15
 803537e:	e04f      	b.n	8035420 <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid pbuf", p != NULL, return ERR_ARG);
 8035380:	68bb      	ldr	r3, [r7, #8]
 8035382:	2b00      	cmp	r3, #0
 8035384:	d109      	bne.n	803539a <udp_sendto_if+0x42>
 8035386:	4b28      	ldr	r3, [pc, #160]	; (8035428 <udp_sendto_if+0xd0>)
 8035388:	f240 2281 	movw	r2, #641	; 0x281
 803538c:	4929      	ldr	r1, [pc, #164]	; (8035434 <udp_sendto_if+0xdc>)
 803538e:	4828      	ldr	r0, [pc, #160]	; (8035430 <udp_sendto_if+0xd8>)
 8035390:	f003 fe6a 	bl	8039068 <iprintf>
 8035394:	f06f 030f 	mvn.w	r3, #15
 8035398:	e042      	b.n	8035420 <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 803539a:	687b      	ldr	r3, [r7, #4]
 803539c:	2b00      	cmp	r3, #0
 803539e:	d109      	bne.n	80353b4 <udp_sendto_if+0x5c>
 80353a0:	4b21      	ldr	r3, [pc, #132]	; (8035428 <udp_sendto_if+0xd0>)
 80353a2:	f240 2282 	movw	r2, #642	; 0x282
 80353a6:	4924      	ldr	r1, [pc, #144]	; (8035438 <udp_sendto_if+0xe0>)
 80353a8:	4821      	ldr	r0, [pc, #132]	; (8035430 <udp_sendto_if+0xd8>)
 80353aa:	f003 fe5d 	bl	8039068 <iprintf>
 80353ae:	f06f 030f 	mvn.w	r3, #15
 80353b2:	e035      	b.n	8035420 <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid netif", netif != NULL, return ERR_ARG);
 80353b4:	6a3b      	ldr	r3, [r7, #32]
 80353b6:	2b00      	cmp	r3, #0
 80353b8:	d109      	bne.n	80353ce <udp_sendto_if+0x76>
 80353ba:	4b1b      	ldr	r3, [pc, #108]	; (8035428 <udp_sendto_if+0xd0>)
 80353bc:	f240 2283 	movw	r2, #643	; 0x283
 80353c0:	491e      	ldr	r1, [pc, #120]	; (803543c <udp_sendto_if+0xe4>)
 80353c2:	481b      	ldr	r0, [pc, #108]	; (8035430 <udp_sendto_if+0xd8>)
 80353c4:	f003 fe50 	bl	8039068 <iprintf>
 80353c8:	f06f 030f 	mvn.w	r3, #15
 80353cc:	e028      	b.n	8035420 <udp_sendto_if+0xc8>
#endif /* LWIP_IPV6 */
#if LWIP_IPV4 && LWIP_IPV6
  else
#endif /* LWIP_IPV4 && LWIP_IPV6 */
#if LWIP_IPV4
    if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 80353ce:	68fb      	ldr	r3, [r7, #12]
 80353d0:	2b00      	cmp	r3, #0
 80353d2:	d009      	beq.n	80353e8 <udp_sendto_if+0x90>
 80353d4:	68fb      	ldr	r3, [r7, #12]
 80353d6:	681b      	ldr	r3, [r3, #0]
 80353d8:	2b00      	cmp	r3, #0
 80353da:	d005      	beq.n	80353e8 <udp_sendto_if+0x90>
        ip4_addr_ismulticast(ip_2_ip4(&pcb->local_ip))) {
 80353dc:	68fb      	ldr	r3, [r7, #12]
 80353de:	681b      	ldr	r3, [r3, #0]
 80353e0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 80353e4:	2be0      	cmp	r3, #224	; 0xe0
 80353e6:	d103      	bne.n	80353f0 <udp_sendto_if+0x98>
      /* if the local_ip is any or multicast
       * use the outgoing network interface IP address as source address */
      src_ip = netif_ip_addr4(netif);
 80353e8:	6a3b      	ldr	r3, [r7, #32]
 80353ea:	3304      	adds	r3, #4
 80353ec:	617b      	str	r3, [r7, #20]
 80353ee:	e00b      	b.n	8035408 <udp_sendto_if+0xb0>
    } else {
      /* check if UDP PCB local IP address is correct
       * this could be an old address if netif->ip_addr has changed */
      if (!ip4_addr_cmp(ip_2_ip4(&(pcb->local_ip)), netif_ip4_addr(netif))) {
 80353f0:	68fb      	ldr	r3, [r7, #12]
 80353f2:	681a      	ldr	r2, [r3, #0]
 80353f4:	6a3b      	ldr	r3, [r7, #32]
 80353f6:	3304      	adds	r3, #4
 80353f8:	681b      	ldr	r3, [r3, #0]
 80353fa:	429a      	cmp	r2, r3
 80353fc:	d002      	beq.n	8035404 <udp_sendto_if+0xac>
        /* local_ip doesn't match, drop the packet */
        return ERR_RTE;
 80353fe:	f06f 0303 	mvn.w	r3, #3
 8035402:	e00d      	b.n	8035420 <udp_sendto_if+0xc8>
      }
      /* use UDP PCB local IP address as source address */
      src_ip = &pcb->local_ip;
 8035404:	68fb      	ldr	r3, [r7, #12]
 8035406:	617b      	str	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
#if LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP
  return udp_sendto_if_src_chksum(pcb, p, dst_ip, dst_port, netif, have_chksum, chksum, src_ip);
#else /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  return udp_sendto_if_src(pcb, p, dst_ip, dst_port, netif, src_ip);
 8035408:	887a      	ldrh	r2, [r7, #2]
 803540a:	697b      	ldr	r3, [r7, #20]
 803540c:	9301      	str	r3, [sp, #4]
 803540e:	6a3b      	ldr	r3, [r7, #32]
 8035410:	9300      	str	r3, [sp, #0]
 8035412:	4613      	mov	r3, r2
 8035414:	687a      	ldr	r2, [r7, #4]
 8035416:	68b9      	ldr	r1, [r7, #8]
 8035418:	68f8      	ldr	r0, [r7, #12]
 803541a:	f000 f811 	bl	8035440 <udp_sendto_if_src>
 803541e:	4603      	mov	r3, r0
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
}
 8035420:	4618      	mov	r0, r3
 8035422:	3718      	adds	r7, #24
 8035424:	46bd      	mov	sp, r7
 8035426:	bd80      	pop	{r7, pc}
 8035428:	0803ca2c 	.word	0x0803ca2c
 803542c:	0803cba0 	.word	0x0803cba0
 8035430:	0803ca80 	.word	0x0803ca80
 8035434:	0803cbbc 	.word	0x0803cbbc
 8035438:	0803cbd8 	.word	0x0803cbd8
 803543c:	0803cbf8 	.word	0x0803cbf8

08035440 <udp_sendto_if_src>:
/** @ingroup udp_raw
 * Same as @ref udp_sendto_if, but with source address */
err_t
udp_sendto_if_src(struct udp_pcb *pcb, struct pbuf *p,
                  const ip_addr_t *dst_ip, u16_t dst_port, struct netif *netif, const ip_addr_t *src_ip)
{
 8035440:	b580      	push	{r7, lr}
 8035442:	b08c      	sub	sp, #48	; 0x30
 8035444:	af04      	add	r7, sp, #16
 8035446:	60f8      	str	r0, [r7, #12]
 8035448:	60b9      	str	r1, [r7, #8]
 803544a:	607a      	str	r2, [r7, #4]
 803544c:	807b      	strh	r3, [r7, #2]
  u8_t ip_proto;
  u8_t ttl;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_sendto_if_src: invalid pcb", pcb != NULL, return ERR_ARG);
 803544e:	68fb      	ldr	r3, [r7, #12]
 8035450:	2b00      	cmp	r3, #0
 8035452:	d109      	bne.n	8035468 <udp_sendto_if_src+0x28>
 8035454:	4b69      	ldr	r3, [pc, #420]	; (80355fc <udp_sendto_if_src+0x1bc>)
 8035456:	f240 22d1 	movw	r2, #721	; 0x2d1
 803545a:	4969      	ldr	r1, [pc, #420]	; (8035600 <udp_sendto_if_src+0x1c0>)
 803545c:	4869      	ldr	r0, [pc, #420]	; (8035604 <udp_sendto_if_src+0x1c4>)
 803545e:	f003 fe03 	bl	8039068 <iprintf>
 8035462:	f06f 030f 	mvn.w	r3, #15
 8035466:	e0c4      	b.n	80355f2 <udp_sendto_if_src+0x1b2>
  LWIP_ERROR("udp_sendto_if_src: invalid pbuf", p != NULL, return ERR_ARG);
 8035468:	68bb      	ldr	r3, [r7, #8]
 803546a:	2b00      	cmp	r3, #0
 803546c:	d109      	bne.n	8035482 <udp_sendto_if_src+0x42>
 803546e:	4b63      	ldr	r3, [pc, #396]	; (80355fc <udp_sendto_if_src+0x1bc>)
 8035470:	f240 22d2 	movw	r2, #722	; 0x2d2
 8035474:	4964      	ldr	r1, [pc, #400]	; (8035608 <udp_sendto_if_src+0x1c8>)
 8035476:	4863      	ldr	r0, [pc, #396]	; (8035604 <udp_sendto_if_src+0x1c4>)
 8035478:	f003 fdf6 	bl	8039068 <iprintf>
 803547c:	f06f 030f 	mvn.w	r3, #15
 8035480:	e0b7      	b.n	80355f2 <udp_sendto_if_src+0x1b2>
  LWIP_ERROR("udp_sendto_if_src: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 8035482:	687b      	ldr	r3, [r7, #4]
 8035484:	2b00      	cmp	r3, #0
 8035486:	d109      	bne.n	803549c <udp_sendto_if_src+0x5c>
 8035488:	4b5c      	ldr	r3, [pc, #368]	; (80355fc <udp_sendto_if_src+0x1bc>)
 803548a:	f240 22d3 	movw	r2, #723	; 0x2d3
 803548e:	495f      	ldr	r1, [pc, #380]	; (803560c <udp_sendto_if_src+0x1cc>)
 8035490:	485c      	ldr	r0, [pc, #368]	; (8035604 <udp_sendto_if_src+0x1c4>)
 8035492:	f003 fde9 	bl	8039068 <iprintf>
 8035496:	f06f 030f 	mvn.w	r3, #15
 803549a:	e0aa      	b.n	80355f2 <udp_sendto_if_src+0x1b2>
  LWIP_ERROR("udp_sendto_if_src: invalid src_ip", src_ip != NULL, return ERR_ARG);
 803549c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 803549e:	2b00      	cmp	r3, #0
 80354a0:	d109      	bne.n	80354b6 <udp_sendto_if_src+0x76>
 80354a2:	4b56      	ldr	r3, [pc, #344]	; (80355fc <udp_sendto_if_src+0x1bc>)
 80354a4:	f44f 7235 	mov.w	r2, #724	; 0x2d4
 80354a8:	4959      	ldr	r1, [pc, #356]	; (8035610 <udp_sendto_if_src+0x1d0>)
 80354aa:	4856      	ldr	r0, [pc, #344]	; (8035604 <udp_sendto_if_src+0x1c4>)
 80354ac:	f003 fddc 	bl	8039068 <iprintf>
 80354b0:	f06f 030f 	mvn.w	r3, #15
 80354b4:	e09d      	b.n	80355f2 <udp_sendto_if_src+0x1b2>
  LWIP_ERROR("udp_sendto_if_src: invalid netif", netif != NULL, return ERR_ARG);
 80354b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80354b8:	2b00      	cmp	r3, #0
 80354ba:	d109      	bne.n	80354d0 <udp_sendto_if_src+0x90>
 80354bc:	4b4f      	ldr	r3, [pc, #316]	; (80355fc <udp_sendto_if_src+0x1bc>)
 80354be:	f240 22d5 	movw	r2, #725	; 0x2d5
 80354c2:	4954      	ldr	r1, [pc, #336]	; (8035614 <udp_sendto_if_src+0x1d4>)
 80354c4:	484f      	ldr	r0, [pc, #316]	; (8035604 <udp_sendto_if_src+0x1c4>)
 80354c6:	f003 fdcf 	bl	8039068 <iprintf>
 80354ca:	f06f 030f 	mvn.w	r3, #15
 80354ce:	e090      	b.n	80355f2 <udp_sendto_if_src+0x1b2>
    return ERR_VAL;
  }
#endif /* LWIP_IPV4 && IP_SOF_BROADCAST */

  /* if the PCB is not yet bound to a port, bind it here */
  if (pcb->local_port == 0) {
 80354d0:	68fb      	ldr	r3, [r7, #12]
 80354d2:	8a5b      	ldrh	r3, [r3, #18]
 80354d4:	2b00      	cmp	r3, #0
 80354d6:	d10f      	bne.n	80354f8 <udp_sendto_if_src+0xb8>
    LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_send: not yet bound to a port, binding now\n"));
    err = udp_bind(pcb, &pcb->local_ip, pcb->local_port);
 80354d8:	68f9      	ldr	r1, [r7, #12]
 80354da:	68fb      	ldr	r3, [r7, #12]
 80354dc:	8a5b      	ldrh	r3, [r3, #18]
 80354de:	461a      	mov	r2, r3
 80354e0:	68f8      	ldr	r0, [r7, #12]
 80354e2:	f000 f89d 	bl	8035620 <udp_bind>
 80354e6:	4603      	mov	r3, r0
 80354e8:	76fb      	strb	r3, [r7, #27]
    if (err != ERR_OK) {
 80354ea:	f997 301b 	ldrsb.w	r3, [r7, #27]
 80354ee:	2b00      	cmp	r3, #0
 80354f0:	d002      	beq.n	80354f8 <udp_sendto_if_src+0xb8>
      LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: forced port bind failed\n"));
      return err;
 80354f2:	f997 301b 	ldrsb.w	r3, [r7, #27]
 80354f6:	e07c      	b.n	80355f2 <udp_sendto_if_src+0x1b2>
    }
  }

  /* packet too large to add a UDP header without causing an overflow? */
  if ((u16_t)(p->tot_len + UDP_HLEN) < p->tot_len) {
 80354f8:	68bb      	ldr	r3, [r7, #8]
 80354fa:	891b      	ldrh	r3, [r3, #8]
 80354fc:	f64f 72f7 	movw	r2, #65527	; 0xfff7
 8035500:	4293      	cmp	r3, r2
 8035502:	d902      	bls.n	803550a <udp_sendto_if_src+0xca>
    return ERR_MEM;
 8035504:	f04f 33ff 	mov.w	r3, #4294967295
 8035508:	e073      	b.n	80355f2 <udp_sendto_if_src+0x1b2>
  }
  /* not enough space to add an UDP header to first pbuf in given p chain? */
  if (pbuf_add_header(p, UDP_HLEN)) {
 803550a:	2108      	movs	r1, #8
 803550c:	68b8      	ldr	r0, [r7, #8]
 803550e:	f7f8 fe35 	bl	802e17c <pbuf_add_header>
 8035512:	4603      	mov	r3, r0
 8035514:	2b00      	cmp	r3, #0
 8035516:	d015      	beq.n	8035544 <udp_sendto_if_src+0x104>
    /* allocate header in a separate new pbuf */
    q = pbuf_alloc(PBUF_IP, UDP_HLEN, PBUF_RAM);
 8035518:	f44f 7220 	mov.w	r2, #640	; 0x280
 803551c:	2108      	movs	r1, #8
 803551e:	2022      	movs	r0, #34	; 0x22
 8035520:	f7f8 fbde 	bl	802dce0 <pbuf_alloc>
 8035524:	61f8      	str	r0, [r7, #28]
    /* new header pbuf could not be allocated? */
    if (q == NULL) {
 8035526:	69fb      	ldr	r3, [r7, #28]
 8035528:	2b00      	cmp	r3, #0
 803552a:	d102      	bne.n	8035532 <udp_sendto_if_src+0xf2>
      LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: could not allocate header\n"));
      return ERR_MEM;
 803552c:	f04f 33ff 	mov.w	r3, #4294967295
 8035530:	e05f      	b.n	80355f2 <udp_sendto_if_src+0x1b2>
    }
    if (p->tot_len != 0) {
 8035532:	68bb      	ldr	r3, [r7, #8]
 8035534:	891b      	ldrh	r3, [r3, #8]
 8035536:	2b00      	cmp	r3, #0
 8035538:	d006      	beq.n	8035548 <udp_sendto_if_src+0x108>
      /* chain header q in front of given pbuf p (only if p contains data) */
      pbuf_chain(q, p);
 803553a:	68b9      	ldr	r1, [r7, #8]
 803553c:	69f8      	ldr	r0, [r7, #28]
 803553e:	f7f9 f809 	bl	802e554 <pbuf_chain>
 8035542:	e001      	b.n	8035548 <udp_sendto_if_src+0x108>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_send: added header pbuf %p before given pbuf %p\n", (void *)q, (void *)p));
  } else {
    /* adding space for header within p succeeded */
    /* first pbuf q equals given pbuf */
    q = p;
 8035544:	68bb      	ldr	r3, [r7, #8]
 8035546:	61fb      	str	r3, [r7, #28]
    LWIP_DEBUGF(UDP_DEBUG, ("udp_send: added header in given pbuf %p\n", (void *)p));
  }
  LWIP_ASSERT("check that first pbuf can hold struct udp_hdr",
 8035548:	69fb      	ldr	r3, [r7, #28]
 803554a:	895b      	ldrh	r3, [r3, #10]
 803554c:	2b07      	cmp	r3, #7
 803554e:	d806      	bhi.n	803555e <udp_sendto_if_src+0x11e>
 8035550:	4b2a      	ldr	r3, [pc, #168]	; (80355fc <udp_sendto_if_src+0x1bc>)
 8035552:	f240 320d 	movw	r2, #781	; 0x30d
 8035556:	4930      	ldr	r1, [pc, #192]	; (8035618 <udp_sendto_if_src+0x1d8>)
 8035558:	482a      	ldr	r0, [pc, #168]	; (8035604 <udp_sendto_if_src+0x1c4>)
 803555a:	f003 fd85 	bl	8039068 <iprintf>
              (q->len >= sizeof(struct udp_hdr)));
  /* q now represents the packet to be sent */
  udphdr = (struct udp_hdr *)q->payload;
 803555e:	69fb      	ldr	r3, [r7, #28]
 8035560:	685b      	ldr	r3, [r3, #4]
 8035562:	617b      	str	r3, [r7, #20]
  udphdr->src = lwip_htons(pcb->local_port);
 8035564:	68fb      	ldr	r3, [r7, #12]
 8035566:	8a5b      	ldrh	r3, [r3, #18]
 8035568:	4618      	mov	r0, r3
 803556a:	f7f7 f9db 	bl	802c924 <lwip_htons>
 803556e:	4603      	mov	r3, r0
 8035570:	461a      	mov	r2, r3
 8035572:	697b      	ldr	r3, [r7, #20]
 8035574:	801a      	strh	r2, [r3, #0]
  udphdr->dest = lwip_htons(dst_port);
 8035576:	887b      	ldrh	r3, [r7, #2]
 8035578:	4618      	mov	r0, r3
 803557a:	f7f7 f9d3 	bl	802c924 <lwip_htons>
 803557e:	4603      	mov	r3, r0
 8035580:	461a      	mov	r2, r3
 8035582:	697b      	ldr	r3, [r7, #20]
 8035584:	805a      	strh	r2, [r3, #2]
  /* in UDP, 0 checksum means 'no checksum' */
  udphdr->chksum = 0x0000;
 8035586:	697b      	ldr	r3, [r7, #20]
 8035588:	2200      	movs	r2, #0
 803558a:	719a      	strb	r2, [r3, #6]
 803558c:	2200      	movs	r2, #0
 803558e:	71da      	strb	r2, [r3, #7]
    ip_proto = IP_PROTO_UDPLITE;
  } else
#endif /* LWIP_UDPLITE */
  {      /* UDP */
    LWIP_DEBUGF(UDP_DEBUG, ("udp_send: UDP packet length %"U16_F"\n", q->tot_len));
    udphdr->len = lwip_htons(q->tot_len);
 8035590:	69fb      	ldr	r3, [r7, #28]
 8035592:	891b      	ldrh	r3, [r3, #8]
 8035594:	4618      	mov	r0, r3
 8035596:	f7f7 f9c5 	bl	802c924 <lwip_htons>
 803559a:	4603      	mov	r3, r0
 803559c:	461a      	mov	r2, r3
 803559e:	697b      	ldr	r3, [r7, #20]
 80355a0:	809a      	strh	r2, [r3, #4]
        }
        udphdr->chksum = udpchksum;
      }
    }
#endif /* CHECKSUM_GEN_UDP */
    ip_proto = IP_PROTO_UDP;
 80355a2:	2311      	movs	r3, #17
 80355a4:	74fb      	strb	r3, [r7, #19]

  /* Determine TTL to use */
#if LWIP_MULTICAST_TX_OPTIONS
  ttl = (ip_addr_ismulticast(dst_ip) ? udp_get_multicast_ttl(pcb) : pcb->ttl);
#else /* LWIP_MULTICAST_TX_OPTIONS */
  ttl = pcb->ttl;
 80355a6:	68fb      	ldr	r3, [r7, #12]
 80355a8:	7adb      	ldrb	r3, [r3, #11]
 80355aa:	74bb      	strb	r3, [r7, #18]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_send: UDP checksum 0x%04"X16_F"\n", udphdr->chksum));
  LWIP_DEBUGF(UDP_DEBUG, ("udp_send: ip_output_if (,,,,0x%02"X16_F",)\n", (u16_t)ip_proto));
  /* output to IP */
  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if_src(q, src_ip, dst_ip, ttl, pcb->tos, ip_proto, netif);
 80355ac:	68fb      	ldr	r3, [r7, #12]
 80355ae:	7a9b      	ldrb	r3, [r3, #10]
 80355b0:	7cb9      	ldrb	r1, [r7, #18]
 80355b2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80355b4:	9202      	str	r2, [sp, #8]
 80355b6:	7cfa      	ldrb	r2, [r7, #19]
 80355b8:	9201      	str	r2, [sp, #4]
 80355ba:	9300      	str	r3, [sp, #0]
 80355bc:	460b      	mov	r3, r1
 80355be:	687a      	ldr	r2, [r7, #4]
 80355c0:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80355c2:	69f8      	ldr	r0, [r7, #28]
 80355c4:	f001 fd02 	bl	8036fcc <ip4_output_if_src>
 80355c8:	4603      	mov	r3, r0
 80355ca:	76fb      	strb	r3, [r7, #27]

  /* @todo: must this be increased even if error occurred? */
  MIB2_STATS_INC(mib2.udpoutdatagrams);

  /* did we chain a separate header pbuf earlier? */
  if (q != p) {
 80355cc:	69fa      	ldr	r2, [r7, #28]
 80355ce:	68bb      	ldr	r3, [r7, #8]
 80355d0:	429a      	cmp	r2, r3
 80355d2:	d004      	beq.n	80355de <udp_sendto_if_src+0x19e>
    /* free the header pbuf */
    pbuf_free(q);
 80355d4:	69f8      	ldr	r0, [r7, #28]
 80355d6:	f7f8 fe99 	bl	802e30c <pbuf_free>
    q = NULL;
 80355da:	2300      	movs	r3, #0
 80355dc:	61fb      	str	r3, [r7, #28]
    /* p is still referenced by the caller, and will live on */
  }

  UDP_STATS_INC(udp.xmit);
 80355de:	4b0f      	ldr	r3, [pc, #60]	; (803561c <udp_sendto_if_src+0x1dc>)
 80355e0:	f8b3 3078 	ldrh.w	r3, [r3, #120]	; 0x78
 80355e4:	3301      	adds	r3, #1
 80355e6:	b29a      	uxth	r2, r3
 80355e8:	4b0c      	ldr	r3, [pc, #48]	; (803561c <udp_sendto_if_src+0x1dc>)
 80355ea:	f8a3 2078 	strh.w	r2, [r3, #120]	; 0x78
  return err;
 80355ee:	f997 301b 	ldrsb.w	r3, [r7, #27]
}
 80355f2:	4618      	mov	r0, r3
 80355f4:	3720      	adds	r7, #32
 80355f6:	46bd      	mov	sp, r7
 80355f8:	bd80      	pop	{r7, pc}
 80355fa:	bf00      	nop
 80355fc:	0803ca2c 	.word	0x0803ca2c
 8035600:	0803cc18 	.word	0x0803cc18
 8035604:	0803ca80 	.word	0x0803ca80
 8035608:	0803cc38 	.word	0x0803cc38
 803560c:	0803cc58 	.word	0x0803cc58
 8035610:	0803cc7c 	.word	0x0803cc7c
 8035614:	0803cca0 	.word	0x0803cca0
 8035618:	0803ccc4 	.word	0x0803ccc4
 803561c:	2000ee04 	.word	0x2000ee04

08035620 <udp_bind>:
 *
 * @see udp_disconnect()
 */
err_t
udp_bind(struct udp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 8035620:	b580      	push	{r7, lr}
 8035622:	b086      	sub	sp, #24
 8035624:	af00      	add	r7, sp, #0
 8035626:	60f8      	str	r0, [r7, #12]
 8035628:	60b9      	str	r1, [r7, #8]
 803562a:	4613      	mov	r3, r2
 803562c:	80fb      	strh	r3, [r7, #6]

  LWIP_ASSERT_CORE_LOCKED();

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 803562e:	68bb      	ldr	r3, [r7, #8]
 8035630:	2b00      	cmp	r3, #0
 8035632:	d101      	bne.n	8035638 <udp_bind+0x18>
    ipaddr = IP4_ADDR_ANY;
 8035634:	4b39      	ldr	r3, [pc, #228]	; (803571c <udp_bind+0xfc>)
 8035636:	60bb      	str	r3, [r7, #8]
  }
#else /* LWIP_IPV4 */
  LWIP_ERROR("udp_bind: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
#endif /* LWIP_IPV4 */

  LWIP_ERROR("udp_bind: invalid pcb", pcb != NULL, return ERR_ARG);
 8035638:	68fb      	ldr	r3, [r7, #12]
 803563a:	2b00      	cmp	r3, #0
 803563c:	d109      	bne.n	8035652 <udp_bind+0x32>
 803563e:	4b38      	ldr	r3, [pc, #224]	; (8035720 <udp_bind+0x100>)
 8035640:	f240 32b7 	movw	r2, #951	; 0x3b7
 8035644:	4937      	ldr	r1, [pc, #220]	; (8035724 <udp_bind+0x104>)
 8035646:	4838      	ldr	r0, [pc, #224]	; (8035728 <udp_bind+0x108>)
 8035648:	f003 fd0e 	bl	8039068 <iprintf>
 803564c:	f06f 030f 	mvn.w	r3, #15
 8035650:	e060      	b.n	8035714 <udp_bind+0xf4>

  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_bind(ipaddr = "));
  ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_TRACE, ipaddr);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, (", port = %"U16_F")\n", port));

  rebind = 0;
 8035652:	2300      	movs	r3, #0
 8035654:	74fb      	strb	r3, [r7, #19]
  /* Check for double bind and rebind of the same pcb */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8035656:	4b35      	ldr	r3, [pc, #212]	; (803572c <udp_bind+0x10c>)
 8035658:	681b      	ldr	r3, [r3, #0]
 803565a:	617b      	str	r3, [r7, #20]
 803565c:	e009      	b.n	8035672 <udp_bind+0x52>
    /* is this UDP PCB already on active list? */
    if (pcb == ipcb) {
 803565e:	68fa      	ldr	r2, [r7, #12]
 8035660:	697b      	ldr	r3, [r7, #20]
 8035662:	429a      	cmp	r2, r3
 8035664:	d102      	bne.n	803566c <udp_bind+0x4c>
      rebind = 1;
 8035666:	2301      	movs	r3, #1
 8035668:	74fb      	strb	r3, [r7, #19]
      break;
 803566a:	e005      	b.n	8035678 <udp_bind+0x58>
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 803566c:	697b      	ldr	r3, [r7, #20]
 803566e:	68db      	ldr	r3, [r3, #12]
 8035670:	617b      	str	r3, [r7, #20]
 8035672:	697b      	ldr	r3, [r7, #20]
 8035674:	2b00      	cmp	r3, #0
 8035676:	d1f2      	bne.n	803565e <udp_bind+0x3e>
    ipaddr = &zoned_ipaddr;
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  /* no port specified? */
  if (port == 0) {
 8035678:	88fb      	ldrh	r3, [r7, #6]
 803567a:	2b00      	cmp	r3, #0
 803567c:	d109      	bne.n	8035692 <udp_bind+0x72>
    port = udp_new_port();
 803567e:	f7ff fbe7 	bl	8034e50 <udp_new_port>
 8035682:	4603      	mov	r3, r0
 8035684:	80fb      	strh	r3, [r7, #6]
    if (port == 0) {
 8035686:	88fb      	ldrh	r3, [r7, #6]
 8035688:	2b00      	cmp	r3, #0
 803568a:	d12c      	bne.n	80356e6 <udp_bind+0xc6>
      /* no more ports available in local range */
      LWIP_DEBUGF(UDP_DEBUG, ("udp_bind: out of free UDP ports\n"));
      return ERR_USE;
 803568c:	f06f 0307 	mvn.w	r3, #7
 8035690:	e040      	b.n	8035714 <udp_bind+0xf4>
    }
  } else {
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8035692:	4b26      	ldr	r3, [pc, #152]	; (803572c <udp_bind+0x10c>)
 8035694:	681b      	ldr	r3, [r3, #0]
 8035696:	617b      	str	r3, [r7, #20]
 8035698:	e022      	b.n	80356e0 <udp_bind+0xc0>
      if (pcb != ipcb) {
 803569a:	68fa      	ldr	r2, [r7, #12]
 803569c:	697b      	ldr	r3, [r7, #20]
 803569e:	429a      	cmp	r2, r3
 80356a0:	d01b      	beq.n	80356da <udp_bind+0xba>
        if (!ip_get_option(pcb, SOF_REUSEADDR) ||
            !ip_get_option(ipcb, SOF_REUSEADDR))
#endif /* SO_REUSE */
        {
          /* port matches that of PCB in list and REUSEADDR not set -> reject */
          if ((ipcb->local_port == port) &&
 80356a2:	697b      	ldr	r3, [r7, #20]
 80356a4:	8a5b      	ldrh	r3, [r3, #18]
 80356a6:	88fa      	ldrh	r2, [r7, #6]
 80356a8:	429a      	cmp	r2, r3
 80356aa:	d116      	bne.n	80356da <udp_bind+0xba>
              /* IP address matches or any IP used? */
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 80356ac:	697b      	ldr	r3, [r7, #20]
 80356ae:	681a      	ldr	r2, [r3, #0]
 80356b0:	68bb      	ldr	r3, [r7, #8]
 80356b2:	681b      	ldr	r3, [r3, #0]
          if ((ipcb->local_port == port) &&
 80356b4:	429a      	cmp	r2, r3
 80356b6:	d00d      	beq.n	80356d4 <udp_bind+0xb4>
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 80356b8:	68bb      	ldr	r3, [r7, #8]
 80356ba:	2b00      	cmp	r3, #0
 80356bc:	d00a      	beq.n	80356d4 <udp_bind+0xb4>
 80356be:	68bb      	ldr	r3, [r7, #8]
 80356c0:	681b      	ldr	r3, [r3, #0]
 80356c2:	2b00      	cmp	r3, #0
 80356c4:	d006      	beq.n	80356d4 <udp_bind+0xb4>
              ip_addr_isany(&ipcb->local_ip))) {
 80356c6:	697b      	ldr	r3, [r7, #20]
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 80356c8:	2b00      	cmp	r3, #0
 80356ca:	d003      	beq.n	80356d4 <udp_bind+0xb4>
              ip_addr_isany(&ipcb->local_ip))) {
 80356cc:	697b      	ldr	r3, [r7, #20]
 80356ce:	681b      	ldr	r3, [r3, #0]
 80356d0:	2b00      	cmp	r3, #0
 80356d2:	d102      	bne.n	80356da <udp_bind+0xba>
            /* other PCB already binds to this local IP and port */
            LWIP_DEBUGF(UDP_DEBUG,
                        ("udp_bind: local port %"U16_F" already bound by another pcb\n", port));
            return ERR_USE;
 80356d4:	f06f 0307 	mvn.w	r3, #7
 80356d8:	e01c      	b.n	8035714 <udp_bind+0xf4>
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 80356da:	697b      	ldr	r3, [r7, #20]
 80356dc:	68db      	ldr	r3, [r3, #12]
 80356de:	617b      	str	r3, [r7, #20]
 80356e0:	697b      	ldr	r3, [r7, #20]
 80356e2:	2b00      	cmp	r3, #0
 80356e4:	d1d9      	bne.n	803569a <udp_bind+0x7a>
        }
      }
    }
  }

  ip_addr_set_ipaddr(&pcb->local_ip, ipaddr);
 80356e6:	68bb      	ldr	r3, [r7, #8]
 80356e8:	2b00      	cmp	r3, #0
 80356ea:	d002      	beq.n	80356f2 <udp_bind+0xd2>
 80356ec:	68bb      	ldr	r3, [r7, #8]
 80356ee:	681b      	ldr	r3, [r3, #0]
 80356f0:	e000      	b.n	80356f4 <udp_bind+0xd4>
 80356f2:	2300      	movs	r3, #0
 80356f4:	68fa      	ldr	r2, [r7, #12]
 80356f6:	6013      	str	r3, [r2, #0]

  pcb->local_port = port;
 80356f8:	68fb      	ldr	r3, [r7, #12]
 80356fa:	88fa      	ldrh	r2, [r7, #6]
 80356fc:	825a      	strh	r2, [r3, #18]
  mib2_udp_bind(pcb);
  /* pcb not active yet? */
  if (rebind == 0) {
 80356fe:	7cfb      	ldrb	r3, [r7, #19]
 8035700:	2b00      	cmp	r3, #0
 8035702:	d106      	bne.n	8035712 <udp_bind+0xf2>
    /* place the PCB on the active list if not already there */
    pcb->next = udp_pcbs;
 8035704:	4b09      	ldr	r3, [pc, #36]	; (803572c <udp_bind+0x10c>)
 8035706:	681a      	ldr	r2, [r3, #0]
 8035708:	68fb      	ldr	r3, [r7, #12]
 803570a:	60da      	str	r2, [r3, #12]
    udp_pcbs = pcb;
 803570c:	4a07      	ldr	r2, [pc, #28]	; (803572c <udp_bind+0x10c>)
 803570e:	68fb      	ldr	r3, [r7, #12]
 8035710:	6013      	str	r3, [r2, #0]
  }
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("udp_bind: bound to "));
  ip_addr_debug_print_val(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, pcb->local_ip);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, (", port %"U16_F")\n", pcb->local_port));
  return ERR_OK;
 8035712:	2300      	movs	r3, #0
}
 8035714:	4618      	mov	r0, r3
 8035716:	3718      	adds	r7, #24
 8035718:	46bd      	mov	sp, r7
 803571a:	bd80      	pop	{r7, pc}
 803571c:	0803d62c 	.word	0x0803d62c
 8035720:	0803ca2c 	.word	0x0803ca2c
 8035724:	0803ccf4 	.word	0x0803ccf4
 8035728:	0803ca80 	.word	0x0803ca80
 803572c:	2000ef5c 	.word	0x2000ef5c

08035730 <udp_recv>:
 * @param recv function pointer of the callback function
 * @param recv_arg additional argument to pass to the callback function
 */
void
udp_recv(struct udp_pcb *pcb, udp_recv_fn recv, void *recv_arg)
{
 8035730:	b580      	push	{r7, lr}
 8035732:	b084      	sub	sp, #16
 8035734:	af00      	add	r7, sp, #0
 8035736:	60f8      	str	r0, [r7, #12]
 8035738:	60b9      	str	r1, [r7, #8]
 803573a:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_recv: invalid pcb", pcb != NULL, return);
 803573c:	68fb      	ldr	r3, [r7, #12]
 803573e:	2b00      	cmp	r3, #0
 8035740:	d107      	bne.n	8035752 <udp_recv+0x22>
 8035742:	4b08      	ldr	r3, [pc, #32]	; (8035764 <udp_recv+0x34>)
 8035744:	f240 428a 	movw	r2, #1162	; 0x48a
 8035748:	4907      	ldr	r1, [pc, #28]	; (8035768 <udp_recv+0x38>)
 803574a:	4808      	ldr	r0, [pc, #32]	; (803576c <udp_recv+0x3c>)
 803574c:	f003 fc8c 	bl	8039068 <iprintf>
 8035750:	e005      	b.n	803575e <udp_recv+0x2e>

  /* remember recv() callback and user data */
  pcb->recv = recv;
 8035752:	68fb      	ldr	r3, [r7, #12]
 8035754:	68ba      	ldr	r2, [r7, #8]
 8035756:	619a      	str	r2, [r3, #24]
  pcb->recv_arg = recv_arg;
 8035758:	68fb      	ldr	r3, [r7, #12]
 803575a:	687a      	ldr	r2, [r7, #4]
 803575c:	61da      	str	r2, [r3, #28]
}
 803575e:	3710      	adds	r7, #16
 8035760:	46bd      	mov	sp, r7
 8035762:	bd80      	pop	{r7, pc}
 8035764:	0803ca2c 	.word	0x0803ca2c
 8035768:	0803cd60 	.word	0x0803cd60
 803576c:	0803ca80 	.word	0x0803ca80

08035770 <udp_remove>:
 *
 * @see udp_new()
 */
void
udp_remove(struct udp_pcb *pcb)
{
 8035770:	b580      	push	{r7, lr}
 8035772:	b084      	sub	sp, #16
 8035774:	af00      	add	r7, sp, #0
 8035776:	6078      	str	r0, [r7, #4]
  struct udp_pcb *pcb2;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_remove: invalid pcb", pcb != NULL, return);
 8035778:	687b      	ldr	r3, [r7, #4]
 803577a:	2b00      	cmp	r3, #0
 803577c:	d107      	bne.n	803578e <udp_remove+0x1e>
 803577e:	4b19      	ldr	r3, [pc, #100]	; (80357e4 <udp_remove+0x74>)
 8035780:	f240 42a1 	movw	r2, #1185	; 0x4a1
 8035784:	4918      	ldr	r1, [pc, #96]	; (80357e8 <udp_remove+0x78>)
 8035786:	4819      	ldr	r0, [pc, #100]	; (80357ec <udp_remove+0x7c>)
 8035788:	f003 fc6e 	bl	8039068 <iprintf>
 803578c:	e026      	b.n	80357dc <udp_remove+0x6c>

  mib2_udp_unbind(pcb);
  /* pcb to be removed is first in list? */
  if (udp_pcbs == pcb) {
 803578e:	4b18      	ldr	r3, [pc, #96]	; (80357f0 <udp_remove+0x80>)
 8035790:	681b      	ldr	r3, [r3, #0]
 8035792:	687a      	ldr	r2, [r7, #4]
 8035794:	429a      	cmp	r2, r3
 8035796:	d105      	bne.n	80357a4 <udp_remove+0x34>
    /* make list start at 2nd pcb */
    udp_pcbs = udp_pcbs->next;
 8035798:	4b15      	ldr	r3, [pc, #84]	; (80357f0 <udp_remove+0x80>)
 803579a:	681b      	ldr	r3, [r3, #0]
 803579c:	68db      	ldr	r3, [r3, #12]
 803579e:	4a14      	ldr	r2, [pc, #80]	; (80357f0 <udp_remove+0x80>)
 80357a0:	6013      	str	r3, [r2, #0]
 80357a2:	e017      	b.n	80357d4 <udp_remove+0x64>
    /* pcb not 1st in list */
  } else {
    for (pcb2 = udp_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
 80357a4:	4b12      	ldr	r3, [pc, #72]	; (80357f0 <udp_remove+0x80>)
 80357a6:	681b      	ldr	r3, [r3, #0]
 80357a8:	60fb      	str	r3, [r7, #12]
 80357aa:	e010      	b.n	80357ce <udp_remove+0x5e>
      /* find pcb in udp_pcbs list */
      if (pcb2->next != NULL && pcb2->next == pcb) {
 80357ac:	68fb      	ldr	r3, [r7, #12]
 80357ae:	68db      	ldr	r3, [r3, #12]
 80357b0:	2b00      	cmp	r3, #0
 80357b2:	d009      	beq.n	80357c8 <udp_remove+0x58>
 80357b4:	68fb      	ldr	r3, [r7, #12]
 80357b6:	68db      	ldr	r3, [r3, #12]
 80357b8:	687a      	ldr	r2, [r7, #4]
 80357ba:	429a      	cmp	r2, r3
 80357bc:	d104      	bne.n	80357c8 <udp_remove+0x58>
        /* remove pcb from list */
        pcb2->next = pcb->next;
 80357be:	687b      	ldr	r3, [r7, #4]
 80357c0:	68da      	ldr	r2, [r3, #12]
 80357c2:	68fb      	ldr	r3, [r7, #12]
 80357c4:	60da      	str	r2, [r3, #12]
        break;
 80357c6:	e005      	b.n	80357d4 <udp_remove+0x64>
    for (pcb2 = udp_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
 80357c8:	68fb      	ldr	r3, [r7, #12]
 80357ca:	68db      	ldr	r3, [r3, #12]
 80357cc:	60fb      	str	r3, [r7, #12]
 80357ce:	68fb      	ldr	r3, [r7, #12]
 80357d0:	2b00      	cmp	r3, #0
 80357d2:	d1eb      	bne.n	80357ac <udp_remove+0x3c>
      }
    }
  }
  memp_free(MEMP_UDP_PCB, pcb);
 80357d4:	6879      	ldr	r1, [r7, #4]
 80357d6:	2000      	movs	r0, #0
 80357d8:	f7f7 fec2 	bl	802d560 <memp_free>
}
 80357dc:	3710      	adds	r7, #16
 80357de:	46bd      	mov	sp, r7
 80357e0:	bd80      	pop	{r7, pc}
 80357e2:	bf00      	nop
 80357e4:	0803ca2c 	.word	0x0803ca2c
 80357e8:	0803cd78 	.word	0x0803cd78
 80357ec:	0803ca80 	.word	0x0803ca80
 80357f0:	2000ef5c 	.word	0x2000ef5c

080357f4 <udp_new>:
 *
 * @see udp_remove()
 */
struct udp_pcb *
udp_new(void)
{
 80357f4:	b580      	push	{r7, lr}
 80357f6:	b082      	sub	sp, #8
 80357f8:	af00      	add	r7, sp, #0
  struct udp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct udp_pcb *)memp_malloc(MEMP_UDP_PCB);
 80357fa:	2000      	movs	r0, #0
 80357fc:	f7f7 fe34 	bl	802d468 <memp_malloc>
 8035800:	6078      	str	r0, [r7, #4]
  /* could allocate UDP PCB? */
  if (pcb != NULL) {
 8035802:	687b      	ldr	r3, [r7, #4]
 8035804:	2b00      	cmp	r3, #0
 8035806:	d007      	beq.n	8035818 <udp_new+0x24>
    /* UDP Lite: by initializing to all zeroes, chksum_len is set to 0
     * which means checksum is generated over the whole datagram per default
     * (recommended as default by RFC 3828). */
    /* initialize PCB to all zeroes */
    memset(pcb, 0, sizeof(struct udp_pcb));
 8035808:	2220      	movs	r2, #32
 803580a:	2100      	movs	r1, #0
 803580c:	6878      	ldr	r0, [r7, #4]
 803580e:	f003 f83f 	bl	8038890 <memset>
    pcb->ttl = UDP_TTL;
 8035812:	687b      	ldr	r3, [r7, #4]
 8035814:	22ff      	movs	r2, #255	; 0xff
 8035816:	72da      	strb	r2, [r3, #11]
#if LWIP_MULTICAST_TX_OPTIONS
    udp_set_multicast_ttl(pcb, UDP_TTL);
#endif /* LWIP_MULTICAST_TX_OPTIONS */
  }
  return pcb;
 8035818:	687b      	ldr	r3, [r7, #4]
}
 803581a:	4618      	mov	r0, r3
 803581c:	3708      	adds	r7, #8
 803581e:	46bd      	mov	sp, r7
 8035820:	bd80      	pop	{r7, pc}

08035822 <udp_new_ip_type>:
 *
 * @see udp_remove()
 */
struct udp_pcb *
udp_new_ip_type(u8_t type)
{
 8035822:	b580      	push	{r7, lr}
 8035824:	b084      	sub	sp, #16
 8035826:	af00      	add	r7, sp, #0
 8035828:	4603      	mov	r3, r0
 803582a:	71fb      	strb	r3, [r7, #7]
  struct udp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = udp_new();
 803582c:	f7ff ffe2 	bl	80357f4 <udp_new>
 8035830:	60f8      	str	r0, [r7, #12]
    IP_SET_TYPE_VAL(pcb->remote_ip, type);
  }
#else
  LWIP_UNUSED_ARG(type);
#endif /* LWIP_IPV4 && LWIP_IPV6 */
  return pcb;
 8035832:	68fb      	ldr	r3, [r7, #12]
}
 8035834:	4618      	mov	r0, r3
 8035836:	3710      	adds	r7, #16
 8035838:	46bd      	mov	sp, r7
 803583a:	bd80      	pop	{r7, pc}

0803583c <udp_netif_ip_addr_changed>:
 *
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change
 */
void udp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 803583c:	b480      	push	{r7}
 803583e:	b085      	sub	sp, #20
 8035840:	af00      	add	r7, sp, #0
 8035842:	6078      	str	r0, [r7, #4]
 8035844:	6039      	str	r1, [r7, #0]
  struct udp_pcb *upcb;

  if (!ip_addr_isany(old_addr) && !ip_addr_isany(new_addr)) {
 8035846:	687b      	ldr	r3, [r7, #4]
 8035848:	2b00      	cmp	r3, #0
 803584a:	d01e      	beq.n	803588a <udp_netif_ip_addr_changed+0x4e>
 803584c:	687b      	ldr	r3, [r7, #4]
 803584e:	681b      	ldr	r3, [r3, #0]
 8035850:	2b00      	cmp	r3, #0
 8035852:	d01a      	beq.n	803588a <udp_netif_ip_addr_changed+0x4e>
 8035854:	683b      	ldr	r3, [r7, #0]
 8035856:	2b00      	cmp	r3, #0
 8035858:	d017      	beq.n	803588a <udp_netif_ip_addr_changed+0x4e>
 803585a:	683b      	ldr	r3, [r7, #0]
 803585c:	681b      	ldr	r3, [r3, #0]
 803585e:	2b00      	cmp	r3, #0
 8035860:	d013      	beq.n	803588a <udp_netif_ip_addr_changed+0x4e>
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 8035862:	4b0d      	ldr	r3, [pc, #52]	; (8035898 <udp_netif_ip_addr_changed+0x5c>)
 8035864:	681b      	ldr	r3, [r3, #0]
 8035866:	60fb      	str	r3, [r7, #12]
 8035868:	e00c      	b.n	8035884 <udp_netif_ip_addr_changed+0x48>
      /* PCB bound to current local interface address? */
      if (ip_addr_cmp(&upcb->local_ip, old_addr)) {
 803586a:	68fb      	ldr	r3, [r7, #12]
 803586c:	681a      	ldr	r2, [r3, #0]
 803586e:	687b      	ldr	r3, [r7, #4]
 8035870:	681b      	ldr	r3, [r3, #0]
 8035872:	429a      	cmp	r2, r3
 8035874:	d103      	bne.n	803587e <udp_netif_ip_addr_changed+0x42>
        /* The PCB is bound to the old ipaddr and
         * is set to bound to the new one instead */
        ip_addr_copy(upcb->local_ip, *new_addr);
 8035876:	683b      	ldr	r3, [r7, #0]
 8035878:	681a      	ldr	r2, [r3, #0]
 803587a:	68fb      	ldr	r3, [r7, #12]
 803587c:	601a      	str	r2, [r3, #0]
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 803587e:	68fb      	ldr	r3, [r7, #12]
 8035880:	68db      	ldr	r3, [r3, #12]
 8035882:	60fb      	str	r3, [r7, #12]
 8035884:	68fb      	ldr	r3, [r7, #12]
 8035886:	2b00      	cmp	r3, #0
 8035888:	d1ef      	bne.n	803586a <udp_netif_ip_addr_changed+0x2e>
      }
    }
  }
}
 803588a:	bf00      	nop
 803588c:	3714      	adds	r7, #20
 803588e:	46bd      	mov	sp, r7
 8035890:	f85d 7b04 	ldr.w	r7, [sp], #4
 8035894:	4770      	bx	lr
 8035896:	bf00      	nop
 8035898:	2000ef5c 	.word	0x2000ef5c

0803589c <etharp_free_entry>:
#endif /* ARP_QUEUEING */

/** Clean up ARP table entries */
static void
etharp_free_entry(int i)
{
 803589c:	b580      	push	{r7, lr}
 803589e:	b082      	sub	sp, #8
 80358a0:	af00      	add	r7, sp, #0
 80358a2:	6078      	str	r0, [r7, #4]
  /* remove from SNMP ARP index tree */
  mib2_remove_arp_entry(arp_table[i].netif, &arp_table[i].ipaddr);
  /* and empty packet queue */
  if (arp_table[i].q != NULL) {
 80358a4:	4915      	ldr	r1, [pc, #84]	; (80358fc <etharp_free_entry+0x60>)
 80358a6:	687a      	ldr	r2, [r7, #4]
 80358a8:	4613      	mov	r3, r2
 80358aa:	005b      	lsls	r3, r3, #1
 80358ac:	4413      	add	r3, r2
 80358ae:	00db      	lsls	r3, r3, #3
 80358b0:	440b      	add	r3, r1
 80358b2:	681b      	ldr	r3, [r3, #0]
 80358b4:	2b00      	cmp	r3, #0
 80358b6:	d013      	beq.n	80358e0 <etharp_free_entry+0x44>
    /* remove all queued packets */
    LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_free_entry: freeing entry %"U16_F", packet queue %p.\n", (u16_t)i, (void *)(arp_table[i].q)));
    free_etharp_q(arp_table[i].q);
 80358b8:	4910      	ldr	r1, [pc, #64]	; (80358fc <etharp_free_entry+0x60>)
 80358ba:	687a      	ldr	r2, [r7, #4]
 80358bc:	4613      	mov	r3, r2
 80358be:	005b      	lsls	r3, r3, #1
 80358c0:	4413      	add	r3, r2
 80358c2:	00db      	lsls	r3, r3, #3
 80358c4:	440b      	add	r3, r1
 80358c6:	681b      	ldr	r3, [r3, #0]
 80358c8:	4618      	mov	r0, r3
 80358ca:	f7f8 fd1f 	bl	802e30c <pbuf_free>
    arp_table[i].q = NULL;
 80358ce:	490b      	ldr	r1, [pc, #44]	; (80358fc <etharp_free_entry+0x60>)
 80358d0:	687a      	ldr	r2, [r7, #4]
 80358d2:	4613      	mov	r3, r2
 80358d4:	005b      	lsls	r3, r3, #1
 80358d6:	4413      	add	r3, r2
 80358d8:	00db      	lsls	r3, r3, #3
 80358da:	440b      	add	r3, r1
 80358dc:	2200      	movs	r2, #0
 80358de:	601a      	str	r2, [r3, #0]
  }
  /* recycle entry for re-use */
  arp_table[i].state = ETHARP_STATE_EMPTY;
 80358e0:	4906      	ldr	r1, [pc, #24]	; (80358fc <etharp_free_entry+0x60>)
 80358e2:	687a      	ldr	r2, [r7, #4]
 80358e4:	4613      	mov	r3, r2
 80358e6:	005b      	lsls	r3, r3, #1
 80358e8:	4413      	add	r3, r2
 80358ea:	00db      	lsls	r3, r3, #3
 80358ec:	440b      	add	r3, r1
 80358ee:	3314      	adds	r3, #20
 80358f0:	2200      	movs	r2, #0
 80358f2:	701a      	strb	r2, [r3, #0]
  arp_table[i].ctime = 0;
  arp_table[i].netif = NULL;
  ip4_addr_set_zero(&arp_table[i].ipaddr);
  arp_table[i].ethaddr = ethzero;
#endif /* LWIP_DEBUG */
}
 80358f4:	bf00      	nop
 80358f6:	3708      	adds	r7, #8
 80358f8:	46bd      	mov	sp, r7
 80358fa:	bd80      	pop	{r7, pc}
 80358fc:	2000ef60 	.word	0x2000ef60

08035900 <etharp_tmr>:
 * This function should be called every ARP_TMR_INTERVAL milliseconds (1 second),
 * in order to expire entries in the ARP table.
 */
void
etharp_tmr(void)
{
 8035900:	b580      	push	{r7, lr}
 8035902:	b082      	sub	sp, #8
 8035904:	af00      	add	r7, sp, #0
  int i;

  LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer\n"));
  /* remove expired entries from the ARP table */
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8035906:	2300      	movs	r3, #0
 8035908:	607b      	str	r3, [r7, #4]
 803590a:	e096      	b.n	8035a3a <etharp_tmr+0x13a>
    u8_t state = arp_table[i].state;
 803590c:	494f      	ldr	r1, [pc, #316]	; (8035a4c <etharp_tmr+0x14c>)
 803590e:	687a      	ldr	r2, [r7, #4]
 8035910:	4613      	mov	r3, r2
 8035912:	005b      	lsls	r3, r3, #1
 8035914:	4413      	add	r3, r2
 8035916:	00db      	lsls	r3, r3, #3
 8035918:	440b      	add	r3, r1
 803591a:	3314      	adds	r3, #20
 803591c:	781b      	ldrb	r3, [r3, #0]
 803591e:	70fb      	strb	r3, [r7, #3]
    if (state != ETHARP_STATE_EMPTY
 8035920:	78fb      	ldrb	r3, [r7, #3]
 8035922:	2b00      	cmp	r3, #0
 8035924:	f000 8086 	beq.w	8035a34 <etharp_tmr+0x134>
#if ETHARP_SUPPORT_STATIC_ENTRIES
        && (state != ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
       ) {
      arp_table[i].ctime++;
 8035928:	4948      	ldr	r1, [pc, #288]	; (8035a4c <etharp_tmr+0x14c>)
 803592a:	687a      	ldr	r2, [r7, #4]
 803592c:	4613      	mov	r3, r2
 803592e:	005b      	lsls	r3, r3, #1
 8035930:	4413      	add	r3, r2
 8035932:	00db      	lsls	r3, r3, #3
 8035934:	440b      	add	r3, r1
 8035936:	3312      	adds	r3, #18
 8035938:	881b      	ldrh	r3, [r3, #0]
 803593a:	3301      	adds	r3, #1
 803593c:	b298      	uxth	r0, r3
 803593e:	4943      	ldr	r1, [pc, #268]	; (8035a4c <etharp_tmr+0x14c>)
 8035940:	687a      	ldr	r2, [r7, #4]
 8035942:	4613      	mov	r3, r2
 8035944:	005b      	lsls	r3, r3, #1
 8035946:	4413      	add	r3, r2
 8035948:	00db      	lsls	r3, r3, #3
 803594a:	440b      	add	r3, r1
 803594c:	3312      	adds	r3, #18
 803594e:	4602      	mov	r2, r0
 8035950:	801a      	strh	r2, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 8035952:	493e      	ldr	r1, [pc, #248]	; (8035a4c <etharp_tmr+0x14c>)
 8035954:	687a      	ldr	r2, [r7, #4]
 8035956:	4613      	mov	r3, r2
 8035958:	005b      	lsls	r3, r3, #1
 803595a:	4413      	add	r3, r2
 803595c:	00db      	lsls	r3, r3, #3
 803595e:	440b      	add	r3, r1
 8035960:	3312      	adds	r3, #18
 8035962:	881b      	ldrh	r3, [r3, #0]
 8035964:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 8035968:	d215      	bcs.n	8035996 <etharp_tmr+0x96>
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 803596a:	4938      	ldr	r1, [pc, #224]	; (8035a4c <etharp_tmr+0x14c>)
 803596c:	687a      	ldr	r2, [r7, #4]
 803596e:	4613      	mov	r3, r2
 8035970:	005b      	lsls	r3, r3, #1
 8035972:	4413      	add	r3, r2
 8035974:	00db      	lsls	r3, r3, #3
 8035976:	440b      	add	r3, r1
 8035978:	3314      	adds	r3, #20
 803597a:	781b      	ldrb	r3, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 803597c:	2b01      	cmp	r3, #1
 803597e:	d10e      	bne.n	803599e <etharp_tmr+0x9e>
           (arp_table[i].ctime >= ARP_MAXPENDING))) {
 8035980:	4932      	ldr	r1, [pc, #200]	; (8035a4c <etharp_tmr+0x14c>)
 8035982:	687a      	ldr	r2, [r7, #4]
 8035984:	4613      	mov	r3, r2
 8035986:	005b      	lsls	r3, r3, #1
 8035988:	4413      	add	r3, r2
 803598a:	00db      	lsls	r3, r3, #3
 803598c:	440b      	add	r3, r1
 803598e:	3312      	adds	r3, #18
 8035990:	881b      	ldrh	r3, [r3, #0]
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 8035992:	2b04      	cmp	r3, #4
 8035994:	d903      	bls.n	803599e <etharp_tmr+0x9e>
        /* pending or stable entry has become old! */
        LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer: expired %s entry %d.\n",
                                   arp_table[i].state >= ETHARP_STATE_STABLE ? "stable" : "pending", i));
        /* clean up entries that have just been expired */
        etharp_free_entry(i);
 8035996:	6878      	ldr	r0, [r7, #4]
 8035998:	f7ff ff80 	bl	803589c <etharp_free_entry>
 803599c:	e04a      	b.n	8035a34 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_1) {
 803599e:	492b      	ldr	r1, [pc, #172]	; (8035a4c <etharp_tmr+0x14c>)
 80359a0:	687a      	ldr	r2, [r7, #4]
 80359a2:	4613      	mov	r3, r2
 80359a4:	005b      	lsls	r3, r3, #1
 80359a6:	4413      	add	r3, r2
 80359a8:	00db      	lsls	r3, r3, #3
 80359aa:	440b      	add	r3, r1
 80359ac:	3314      	adds	r3, #20
 80359ae:	781b      	ldrb	r3, [r3, #0]
 80359b0:	2b03      	cmp	r3, #3
 80359b2:	d10a      	bne.n	80359ca <etharp_tmr+0xca>
        /* Don't send more than one request every 2 seconds. */
        arp_table[i].state = ETHARP_STATE_STABLE_REREQUESTING_2;
 80359b4:	4925      	ldr	r1, [pc, #148]	; (8035a4c <etharp_tmr+0x14c>)
 80359b6:	687a      	ldr	r2, [r7, #4]
 80359b8:	4613      	mov	r3, r2
 80359ba:	005b      	lsls	r3, r3, #1
 80359bc:	4413      	add	r3, r2
 80359be:	00db      	lsls	r3, r3, #3
 80359c0:	440b      	add	r3, r1
 80359c2:	3314      	adds	r3, #20
 80359c4:	2204      	movs	r2, #4
 80359c6:	701a      	strb	r2, [r3, #0]
 80359c8:	e034      	b.n	8035a34 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_2) {
 80359ca:	4920      	ldr	r1, [pc, #128]	; (8035a4c <etharp_tmr+0x14c>)
 80359cc:	687a      	ldr	r2, [r7, #4]
 80359ce:	4613      	mov	r3, r2
 80359d0:	005b      	lsls	r3, r3, #1
 80359d2:	4413      	add	r3, r2
 80359d4:	00db      	lsls	r3, r3, #3
 80359d6:	440b      	add	r3, r1
 80359d8:	3314      	adds	r3, #20
 80359da:	781b      	ldrb	r3, [r3, #0]
 80359dc:	2b04      	cmp	r3, #4
 80359de:	d10a      	bne.n	80359f6 <etharp_tmr+0xf6>
        /* Reset state to stable, so that the next transmitted packet will
           re-send an ARP request. */
        arp_table[i].state = ETHARP_STATE_STABLE;
 80359e0:	491a      	ldr	r1, [pc, #104]	; (8035a4c <etharp_tmr+0x14c>)
 80359e2:	687a      	ldr	r2, [r7, #4]
 80359e4:	4613      	mov	r3, r2
 80359e6:	005b      	lsls	r3, r3, #1
 80359e8:	4413      	add	r3, r2
 80359ea:	00db      	lsls	r3, r3, #3
 80359ec:	440b      	add	r3, r1
 80359ee:	3314      	adds	r3, #20
 80359f0:	2202      	movs	r2, #2
 80359f2:	701a      	strb	r2, [r3, #0]
 80359f4:	e01e      	b.n	8035a34 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 80359f6:	4915      	ldr	r1, [pc, #84]	; (8035a4c <etharp_tmr+0x14c>)
 80359f8:	687a      	ldr	r2, [r7, #4]
 80359fa:	4613      	mov	r3, r2
 80359fc:	005b      	lsls	r3, r3, #1
 80359fe:	4413      	add	r3, r2
 8035a00:	00db      	lsls	r3, r3, #3
 8035a02:	440b      	add	r3, r1
 8035a04:	3314      	adds	r3, #20
 8035a06:	781b      	ldrb	r3, [r3, #0]
 8035a08:	2b01      	cmp	r3, #1
 8035a0a:	d113      	bne.n	8035a34 <etharp_tmr+0x134>
        /* still pending, resend an ARP query */
        etharp_request(arp_table[i].netif, &arp_table[i].ipaddr);
 8035a0c:	490f      	ldr	r1, [pc, #60]	; (8035a4c <etharp_tmr+0x14c>)
 8035a0e:	687a      	ldr	r2, [r7, #4]
 8035a10:	4613      	mov	r3, r2
 8035a12:	005b      	lsls	r3, r3, #1
 8035a14:	4413      	add	r3, r2
 8035a16:	00db      	lsls	r3, r3, #3
 8035a18:	440b      	add	r3, r1
 8035a1a:	3308      	adds	r3, #8
 8035a1c:	6818      	ldr	r0, [r3, #0]
 8035a1e:	687a      	ldr	r2, [r7, #4]
 8035a20:	4613      	mov	r3, r2
 8035a22:	005b      	lsls	r3, r3, #1
 8035a24:	4413      	add	r3, r2
 8035a26:	00db      	lsls	r3, r3, #3
 8035a28:	4a08      	ldr	r2, [pc, #32]	; (8035a4c <etharp_tmr+0x14c>)
 8035a2a:	4413      	add	r3, r2
 8035a2c:	3304      	adds	r3, #4
 8035a2e:	4619      	mov	r1, r3
 8035a30:	f000 feae 	bl	8036790 <etharp_request>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8035a34:	687b      	ldr	r3, [r7, #4]
 8035a36:	3301      	adds	r3, #1
 8035a38:	607b      	str	r3, [r7, #4]
 8035a3a:	687b      	ldr	r3, [r7, #4]
 8035a3c:	2b09      	cmp	r3, #9
 8035a3e:	f77f af65 	ble.w	803590c <etharp_tmr+0xc>
      }
    }
  }
}
 8035a42:	bf00      	nop
 8035a44:	bf00      	nop
 8035a46:	3708      	adds	r7, #8
 8035a48:	46bd      	mov	sp, r7
 8035a4a:	bd80      	pop	{r7, pc}
 8035a4c:	2000ef60 	.word	0x2000ef60

08035a50 <etharp_find_entry>:
 * @return The ARP entry index that matched or is created, ERR_MEM if no
 * entry is found or could be recycled.
 */
static s16_t
etharp_find_entry(const ip4_addr_t *ipaddr, u8_t flags, struct netif *netif)
{
 8035a50:	b580      	push	{r7, lr}
 8035a52:	b08a      	sub	sp, #40	; 0x28
 8035a54:	af00      	add	r7, sp, #0
 8035a56:	60f8      	str	r0, [r7, #12]
 8035a58:	460b      	mov	r3, r1
 8035a5a:	607a      	str	r2, [r7, #4]
 8035a5c:	72fb      	strb	r3, [r7, #11]
  s16_t old_pending = ARP_TABLE_SIZE, old_stable = ARP_TABLE_SIZE;
 8035a5e:	230a      	movs	r3, #10
 8035a60:	84fb      	strh	r3, [r7, #38]	; 0x26
 8035a62:	230a      	movs	r3, #10
 8035a64:	84bb      	strh	r3, [r7, #36]	; 0x24
  s16_t empty = ARP_TABLE_SIZE;
 8035a66:	230a      	movs	r3, #10
 8035a68:	847b      	strh	r3, [r7, #34]	; 0x22
  s16_t i = 0;
 8035a6a:	2300      	movs	r3, #0
 8035a6c:	843b      	strh	r3, [r7, #32]
  /* oldest entry with packets on queue */
  s16_t old_queue = ARP_TABLE_SIZE;
 8035a6e:	230a      	movs	r3, #10
 8035a70:	83fb      	strh	r3, [r7, #30]
  /* its age */
  u16_t age_queue = 0, age_pending = 0, age_stable = 0;
 8035a72:	2300      	movs	r3, #0
 8035a74:	83bb      	strh	r3, [r7, #28]
 8035a76:	2300      	movs	r3, #0
 8035a78:	837b      	strh	r3, [r7, #26]
 8035a7a:	2300      	movs	r3, #0
 8035a7c:	833b      	strh	r3, [r7, #24]
   * 4) remember the oldest pending entry with queued packets (if any)
   * 5) search for a matching IP entry, either pending or stable
   *    until 5 matches, or all entries are searched for.
   */

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8035a7e:	2300      	movs	r3, #0
 8035a80:	843b      	strh	r3, [r7, #32]
 8035a82:	e0ae      	b.n	8035be2 <etharp_find_entry+0x192>
    u8_t state = arp_table[i].state;
 8035a84:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8035a88:	49a6      	ldr	r1, [pc, #664]	; (8035d24 <etharp_find_entry+0x2d4>)
 8035a8a:	4613      	mov	r3, r2
 8035a8c:	005b      	lsls	r3, r3, #1
 8035a8e:	4413      	add	r3, r2
 8035a90:	00db      	lsls	r3, r3, #3
 8035a92:	440b      	add	r3, r1
 8035a94:	3314      	adds	r3, #20
 8035a96:	781b      	ldrb	r3, [r3, #0]
 8035a98:	75fb      	strb	r3, [r7, #23]
    /* no empty entry found yet and now we do find one? */
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
 8035a9a:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 8035a9e:	2b0a      	cmp	r3, #10
 8035aa0:	d105      	bne.n	8035aae <etharp_find_entry+0x5e>
 8035aa2:	7dfb      	ldrb	r3, [r7, #23]
 8035aa4:	2b00      	cmp	r3, #0
 8035aa6:	d102      	bne.n	8035aae <etharp_find_entry+0x5e>
      LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_find_entry: found empty entry %d\n", (int)i));
      /* remember first empty entry */
      empty = i;
 8035aa8:	8c3b      	ldrh	r3, [r7, #32]
 8035aaa:	847b      	strh	r3, [r7, #34]	; 0x22
 8035aac:	e095      	b.n	8035bda <etharp_find_entry+0x18a>
    } else if (state != ETHARP_STATE_EMPTY) {
 8035aae:	7dfb      	ldrb	r3, [r7, #23]
 8035ab0:	2b00      	cmp	r3, #0
 8035ab2:	f000 8092 	beq.w	8035bda <etharp_find_entry+0x18a>
      LWIP_ASSERT("state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE",
 8035ab6:	7dfb      	ldrb	r3, [r7, #23]
 8035ab8:	2b01      	cmp	r3, #1
 8035aba:	d009      	beq.n	8035ad0 <etharp_find_entry+0x80>
 8035abc:	7dfb      	ldrb	r3, [r7, #23]
 8035abe:	2b01      	cmp	r3, #1
 8035ac0:	d806      	bhi.n	8035ad0 <etharp_find_entry+0x80>
 8035ac2:	4b99      	ldr	r3, [pc, #612]	; (8035d28 <etharp_find_entry+0x2d8>)
 8035ac4:	f240 1223 	movw	r2, #291	; 0x123
 8035ac8:	4998      	ldr	r1, [pc, #608]	; (8035d2c <etharp_find_entry+0x2dc>)
 8035aca:	4899      	ldr	r0, [pc, #612]	; (8035d30 <etharp_find_entry+0x2e0>)
 8035acc:	f003 facc 	bl	8039068 <iprintf>
                  state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE);
      /* if given, does IP address match IP address in ARP entry? */
      if (ipaddr && ip4_addr_cmp(ipaddr, &arp_table[i].ipaddr)
 8035ad0:	68fb      	ldr	r3, [r7, #12]
 8035ad2:	2b00      	cmp	r3, #0
 8035ad4:	d020      	beq.n	8035b18 <etharp_find_entry+0xc8>
 8035ad6:	68fb      	ldr	r3, [r7, #12]
 8035ad8:	6819      	ldr	r1, [r3, #0]
 8035ada:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8035ade:	4891      	ldr	r0, [pc, #580]	; (8035d24 <etharp_find_entry+0x2d4>)
 8035ae0:	4613      	mov	r3, r2
 8035ae2:	005b      	lsls	r3, r3, #1
 8035ae4:	4413      	add	r3, r2
 8035ae6:	00db      	lsls	r3, r3, #3
 8035ae8:	4403      	add	r3, r0
 8035aea:	3304      	adds	r3, #4
 8035aec:	681b      	ldr	r3, [r3, #0]
 8035aee:	4299      	cmp	r1, r3
 8035af0:	d112      	bne.n	8035b18 <etharp_find_entry+0xc8>
#if ETHARP_TABLE_MATCH_NETIF
          && ((netif == NULL) || (netif == arp_table[i].netif))
 8035af2:	687b      	ldr	r3, [r7, #4]
 8035af4:	2b00      	cmp	r3, #0
 8035af6:	d00c      	beq.n	8035b12 <etharp_find_entry+0xc2>
 8035af8:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8035afc:	4989      	ldr	r1, [pc, #548]	; (8035d24 <etharp_find_entry+0x2d4>)
 8035afe:	4613      	mov	r3, r2
 8035b00:	005b      	lsls	r3, r3, #1
 8035b02:	4413      	add	r3, r2
 8035b04:	00db      	lsls	r3, r3, #3
 8035b06:	440b      	add	r3, r1
 8035b08:	3308      	adds	r3, #8
 8035b0a:	681b      	ldr	r3, [r3, #0]
 8035b0c:	687a      	ldr	r2, [r7, #4]
 8035b0e:	429a      	cmp	r2, r3
 8035b10:	d102      	bne.n	8035b18 <etharp_find_entry+0xc8>
#endif /* ETHARP_TABLE_MATCH_NETIF */
         ) {
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: found matching entry %d\n", (int)i));
        /* found exact IP address match, simply bail out */
        return i;
 8035b12:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8035b16:	e100      	b.n	8035d1a <etharp_find_entry+0x2ca>
      }
      /* pending entry? */
      if (state == ETHARP_STATE_PENDING) {
 8035b18:	7dfb      	ldrb	r3, [r7, #23]
 8035b1a:	2b01      	cmp	r3, #1
 8035b1c:	d140      	bne.n	8035ba0 <etharp_find_entry+0x150>
        /* pending with queued packets? */
        if (arp_table[i].q != NULL) {
 8035b1e:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8035b22:	4980      	ldr	r1, [pc, #512]	; (8035d24 <etharp_find_entry+0x2d4>)
 8035b24:	4613      	mov	r3, r2
 8035b26:	005b      	lsls	r3, r3, #1
 8035b28:	4413      	add	r3, r2
 8035b2a:	00db      	lsls	r3, r3, #3
 8035b2c:	440b      	add	r3, r1
 8035b2e:	681b      	ldr	r3, [r3, #0]
 8035b30:	2b00      	cmp	r3, #0
 8035b32:	d01a      	beq.n	8035b6a <etharp_find_entry+0x11a>
          if (arp_table[i].ctime >= age_queue) {
 8035b34:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8035b38:	497a      	ldr	r1, [pc, #488]	; (8035d24 <etharp_find_entry+0x2d4>)
 8035b3a:	4613      	mov	r3, r2
 8035b3c:	005b      	lsls	r3, r3, #1
 8035b3e:	4413      	add	r3, r2
 8035b40:	00db      	lsls	r3, r3, #3
 8035b42:	440b      	add	r3, r1
 8035b44:	3312      	adds	r3, #18
 8035b46:	881b      	ldrh	r3, [r3, #0]
 8035b48:	8bba      	ldrh	r2, [r7, #28]
 8035b4a:	429a      	cmp	r2, r3
 8035b4c:	d845      	bhi.n	8035bda <etharp_find_entry+0x18a>
            old_queue = i;
 8035b4e:	8c3b      	ldrh	r3, [r7, #32]
 8035b50:	83fb      	strh	r3, [r7, #30]
            age_queue = arp_table[i].ctime;
 8035b52:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8035b56:	4973      	ldr	r1, [pc, #460]	; (8035d24 <etharp_find_entry+0x2d4>)
 8035b58:	4613      	mov	r3, r2
 8035b5a:	005b      	lsls	r3, r3, #1
 8035b5c:	4413      	add	r3, r2
 8035b5e:	00db      	lsls	r3, r3, #3
 8035b60:	440b      	add	r3, r1
 8035b62:	3312      	adds	r3, #18
 8035b64:	881b      	ldrh	r3, [r3, #0]
 8035b66:	83bb      	strh	r3, [r7, #28]
 8035b68:	e037      	b.n	8035bda <etharp_find_entry+0x18a>
          }
        } else
          /* pending without queued packets? */
        {
          if (arp_table[i].ctime >= age_pending) {
 8035b6a:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8035b6e:	496d      	ldr	r1, [pc, #436]	; (8035d24 <etharp_find_entry+0x2d4>)
 8035b70:	4613      	mov	r3, r2
 8035b72:	005b      	lsls	r3, r3, #1
 8035b74:	4413      	add	r3, r2
 8035b76:	00db      	lsls	r3, r3, #3
 8035b78:	440b      	add	r3, r1
 8035b7a:	3312      	adds	r3, #18
 8035b7c:	881b      	ldrh	r3, [r3, #0]
 8035b7e:	8b7a      	ldrh	r2, [r7, #26]
 8035b80:	429a      	cmp	r2, r3
 8035b82:	d82a      	bhi.n	8035bda <etharp_find_entry+0x18a>
            old_pending = i;
 8035b84:	8c3b      	ldrh	r3, [r7, #32]
 8035b86:	84fb      	strh	r3, [r7, #38]	; 0x26
            age_pending = arp_table[i].ctime;
 8035b88:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8035b8c:	4965      	ldr	r1, [pc, #404]	; (8035d24 <etharp_find_entry+0x2d4>)
 8035b8e:	4613      	mov	r3, r2
 8035b90:	005b      	lsls	r3, r3, #1
 8035b92:	4413      	add	r3, r2
 8035b94:	00db      	lsls	r3, r3, #3
 8035b96:	440b      	add	r3, r1
 8035b98:	3312      	adds	r3, #18
 8035b9a:	881b      	ldrh	r3, [r3, #0]
 8035b9c:	837b      	strh	r3, [r7, #26]
 8035b9e:	e01c      	b.n	8035bda <etharp_find_entry+0x18a>
          }
        }
        /* stable entry? */
      } else if (state >= ETHARP_STATE_STABLE) {
 8035ba0:	7dfb      	ldrb	r3, [r7, #23]
 8035ba2:	2b01      	cmp	r3, #1
 8035ba4:	d919      	bls.n	8035bda <etharp_find_entry+0x18a>
        /* don't record old_stable for static entries since they never expire */
        if (state < ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
        {
          /* remember entry with oldest stable entry in oldest, its age in maxtime */
          if (arp_table[i].ctime >= age_stable) {
 8035ba6:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8035baa:	495e      	ldr	r1, [pc, #376]	; (8035d24 <etharp_find_entry+0x2d4>)
 8035bac:	4613      	mov	r3, r2
 8035bae:	005b      	lsls	r3, r3, #1
 8035bb0:	4413      	add	r3, r2
 8035bb2:	00db      	lsls	r3, r3, #3
 8035bb4:	440b      	add	r3, r1
 8035bb6:	3312      	adds	r3, #18
 8035bb8:	881b      	ldrh	r3, [r3, #0]
 8035bba:	8b3a      	ldrh	r2, [r7, #24]
 8035bbc:	429a      	cmp	r2, r3
 8035bbe:	d80c      	bhi.n	8035bda <etharp_find_entry+0x18a>
            old_stable = i;
 8035bc0:	8c3b      	ldrh	r3, [r7, #32]
 8035bc2:	84bb      	strh	r3, [r7, #36]	; 0x24
            age_stable = arp_table[i].ctime;
 8035bc4:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8035bc8:	4956      	ldr	r1, [pc, #344]	; (8035d24 <etharp_find_entry+0x2d4>)
 8035bca:	4613      	mov	r3, r2
 8035bcc:	005b      	lsls	r3, r3, #1
 8035bce:	4413      	add	r3, r2
 8035bd0:	00db      	lsls	r3, r3, #3
 8035bd2:	440b      	add	r3, r1
 8035bd4:	3312      	adds	r3, #18
 8035bd6:	881b      	ldrh	r3, [r3, #0]
 8035bd8:	833b      	strh	r3, [r7, #24]
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8035bda:	8c3b      	ldrh	r3, [r7, #32]
 8035bdc:	3301      	adds	r3, #1
 8035bde:	b29b      	uxth	r3, r3
 8035be0:	843b      	strh	r3, [r7, #32]
 8035be2:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8035be6:	2b09      	cmp	r3, #9
 8035be8:	f77f af4c 	ble.w	8035a84 <etharp_find_entry+0x34>
    }
  }
  /* { we have no match } => try to create a new entry */

  /* don't create new entry, only search? */
  if (((flags & ETHARP_FLAG_FIND_ONLY) != 0) ||
 8035bec:	7afb      	ldrb	r3, [r7, #11]
 8035bee:	f003 0302 	and.w	r3, r3, #2
 8035bf2:	2b00      	cmp	r3, #0
 8035bf4:	d108      	bne.n	8035c08 <etharp_find_entry+0x1b8>
 8035bf6:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 8035bfa:	2b0a      	cmp	r3, #10
 8035bfc:	d107      	bne.n	8035c0e <etharp_find_entry+0x1be>
      /* or no empty entry found and not allowed to recycle? */
      ((empty == ARP_TABLE_SIZE) && ((flags & ETHARP_FLAG_TRY_HARD) == 0))) {
 8035bfe:	7afb      	ldrb	r3, [r7, #11]
 8035c00:	f003 0301 	and.w	r3, r3, #1
 8035c04:	2b00      	cmp	r3, #0
 8035c06:	d102      	bne.n	8035c0e <etharp_find_entry+0x1be>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty entry found and not allowed to recycle\n"));
    return (s16_t)ERR_MEM;
 8035c08:	f04f 33ff 	mov.w	r3, #4294967295
 8035c0c:	e085      	b.n	8035d1a <etharp_find_entry+0x2ca>
   *
   * { ETHARP_FLAG_TRY_HARD is set at this point }
   */

  /* 1) empty entry available? */
  if (empty < ARP_TABLE_SIZE) {
 8035c0e:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 8035c12:	2b09      	cmp	r3, #9
 8035c14:	dc02      	bgt.n	8035c1c <etharp_find_entry+0x1cc>
    i = empty;
 8035c16:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8035c18:	843b      	strh	r3, [r7, #32]
 8035c1a:	e039      	b.n	8035c90 <etharp_find_entry+0x240>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting empty entry %d\n", (int)i));
  } else {
    /* 2) found recyclable stable entry? */
    if (old_stable < ARP_TABLE_SIZE) {
 8035c1c:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 8035c20:	2b09      	cmp	r3, #9
 8035c22:	dc14      	bgt.n	8035c4e <etharp_find_entry+0x1fe>
      /* recycle oldest stable*/
      i = old_stable;
 8035c24:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8035c26:	843b      	strh	r3, [r7, #32]
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest stable entry %d\n", (int)i));
      /* no queued packets should exist on stable entries */
      LWIP_ASSERT("arp_table[i].q == NULL", arp_table[i].q == NULL);
 8035c28:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8035c2c:	493d      	ldr	r1, [pc, #244]	; (8035d24 <etharp_find_entry+0x2d4>)
 8035c2e:	4613      	mov	r3, r2
 8035c30:	005b      	lsls	r3, r3, #1
 8035c32:	4413      	add	r3, r2
 8035c34:	00db      	lsls	r3, r3, #3
 8035c36:	440b      	add	r3, r1
 8035c38:	681b      	ldr	r3, [r3, #0]
 8035c3a:	2b00      	cmp	r3, #0
 8035c3c:	d018      	beq.n	8035c70 <etharp_find_entry+0x220>
 8035c3e:	4b3a      	ldr	r3, [pc, #232]	; (8035d28 <etharp_find_entry+0x2d8>)
 8035c40:	f240 126d 	movw	r2, #365	; 0x16d
 8035c44:	493b      	ldr	r1, [pc, #236]	; (8035d34 <etharp_find_entry+0x2e4>)
 8035c46:	483a      	ldr	r0, [pc, #232]	; (8035d30 <etharp_find_entry+0x2e0>)
 8035c48:	f003 fa0e 	bl	8039068 <iprintf>
 8035c4c:	e010      	b.n	8035c70 <etharp_find_entry+0x220>
      /* 3) found recyclable pending entry without queued packets? */
    } else if (old_pending < ARP_TABLE_SIZE) {
 8035c4e:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 8035c52:	2b09      	cmp	r3, #9
 8035c54:	dc02      	bgt.n	8035c5c <etharp_find_entry+0x20c>
      /* recycle oldest pending */
      i = old_pending;
 8035c56:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8035c58:	843b      	strh	r3, [r7, #32]
 8035c5a:	e009      	b.n	8035c70 <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d (without queue)\n", (int)i));
      /* 4) found recyclable pending entry with queued packets? */
    } else if (old_queue < ARP_TABLE_SIZE) {
 8035c5c:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8035c60:	2b09      	cmp	r3, #9
 8035c62:	dc02      	bgt.n	8035c6a <etharp_find_entry+0x21a>
      /* recycle oldest pending (queued packets are free in etharp_free_entry) */
      i = old_queue;
 8035c64:	8bfb      	ldrh	r3, [r7, #30]
 8035c66:	843b      	strh	r3, [r7, #32]
 8035c68:	e002      	b.n	8035c70 <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d, freeing packet queue %p\n", (int)i, (void *)(arp_table[i].q)));
      /* no empty or recyclable entries found */
    } else {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty or recyclable entries found\n"));
      return (s16_t)ERR_MEM;
 8035c6a:	f04f 33ff 	mov.w	r3, #4294967295
 8035c6e:	e054      	b.n	8035d1a <etharp_find_entry+0x2ca>
    }

    /* { empty or recyclable entry found } */
    LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 8035c70:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8035c74:	2b09      	cmp	r3, #9
 8035c76:	dd06      	ble.n	8035c86 <etharp_find_entry+0x236>
 8035c78:	4b2b      	ldr	r3, [pc, #172]	; (8035d28 <etharp_find_entry+0x2d8>)
 8035c7a:	f240 127f 	movw	r2, #383	; 0x17f
 8035c7e:	492e      	ldr	r1, [pc, #184]	; (8035d38 <etharp_find_entry+0x2e8>)
 8035c80:	482b      	ldr	r0, [pc, #172]	; (8035d30 <etharp_find_entry+0x2e0>)
 8035c82:	f003 f9f1 	bl	8039068 <iprintf>
    etharp_free_entry(i);
 8035c86:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8035c8a:	4618      	mov	r0, r3
 8035c8c:	f7ff fe06 	bl	803589c <etharp_free_entry>
  }

  LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 8035c90:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8035c94:	2b09      	cmp	r3, #9
 8035c96:	dd06      	ble.n	8035ca6 <etharp_find_entry+0x256>
 8035c98:	4b23      	ldr	r3, [pc, #140]	; (8035d28 <etharp_find_entry+0x2d8>)
 8035c9a:	f240 1283 	movw	r2, #387	; 0x183
 8035c9e:	4926      	ldr	r1, [pc, #152]	; (8035d38 <etharp_find_entry+0x2e8>)
 8035ca0:	4823      	ldr	r0, [pc, #140]	; (8035d30 <etharp_find_entry+0x2e0>)
 8035ca2:	f003 f9e1 	bl	8039068 <iprintf>
  LWIP_ASSERT("arp_table[i].state == ETHARP_STATE_EMPTY",
 8035ca6:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8035caa:	491e      	ldr	r1, [pc, #120]	; (8035d24 <etharp_find_entry+0x2d4>)
 8035cac:	4613      	mov	r3, r2
 8035cae:	005b      	lsls	r3, r3, #1
 8035cb0:	4413      	add	r3, r2
 8035cb2:	00db      	lsls	r3, r3, #3
 8035cb4:	440b      	add	r3, r1
 8035cb6:	3314      	adds	r3, #20
 8035cb8:	781b      	ldrb	r3, [r3, #0]
 8035cba:	2b00      	cmp	r3, #0
 8035cbc:	d006      	beq.n	8035ccc <etharp_find_entry+0x27c>
 8035cbe:	4b1a      	ldr	r3, [pc, #104]	; (8035d28 <etharp_find_entry+0x2d8>)
 8035cc0:	f44f 72c2 	mov.w	r2, #388	; 0x184
 8035cc4:	491d      	ldr	r1, [pc, #116]	; (8035d3c <etharp_find_entry+0x2ec>)
 8035cc6:	481a      	ldr	r0, [pc, #104]	; (8035d30 <etharp_find_entry+0x2e0>)
 8035cc8:	f003 f9ce 	bl	8039068 <iprintf>
              arp_table[i].state == ETHARP_STATE_EMPTY);

  /* IP address given? */
  if (ipaddr != NULL) {
 8035ccc:	68fb      	ldr	r3, [r7, #12]
 8035cce:	2b00      	cmp	r3, #0
 8035cd0:	d00b      	beq.n	8035cea <etharp_find_entry+0x29a>
    /* set IP address */
    ip4_addr_copy(arp_table[i].ipaddr, *ipaddr);
 8035cd2:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8035cd6:	68fb      	ldr	r3, [r7, #12]
 8035cd8:	6819      	ldr	r1, [r3, #0]
 8035cda:	4812      	ldr	r0, [pc, #72]	; (8035d24 <etharp_find_entry+0x2d4>)
 8035cdc:	4613      	mov	r3, r2
 8035cde:	005b      	lsls	r3, r3, #1
 8035ce0:	4413      	add	r3, r2
 8035ce2:	00db      	lsls	r3, r3, #3
 8035ce4:	4403      	add	r3, r0
 8035ce6:	3304      	adds	r3, #4
 8035ce8:	6019      	str	r1, [r3, #0]
  }
  arp_table[i].ctime = 0;
 8035cea:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8035cee:	490d      	ldr	r1, [pc, #52]	; (8035d24 <etharp_find_entry+0x2d4>)
 8035cf0:	4613      	mov	r3, r2
 8035cf2:	005b      	lsls	r3, r3, #1
 8035cf4:	4413      	add	r3, r2
 8035cf6:	00db      	lsls	r3, r3, #3
 8035cf8:	440b      	add	r3, r1
 8035cfa:	3312      	adds	r3, #18
 8035cfc:	2200      	movs	r2, #0
 8035cfe:	801a      	strh	r2, [r3, #0]
#if ETHARP_TABLE_MATCH_NETIF
  arp_table[i].netif = netif;
 8035d00:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8035d04:	4907      	ldr	r1, [pc, #28]	; (8035d24 <etharp_find_entry+0x2d4>)
 8035d06:	4613      	mov	r3, r2
 8035d08:	005b      	lsls	r3, r3, #1
 8035d0a:	4413      	add	r3, r2
 8035d0c:	00db      	lsls	r3, r3, #3
 8035d0e:	440b      	add	r3, r1
 8035d10:	3308      	adds	r3, #8
 8035d12:	687a      	ldr	r2, [r7, #4]
 8035d14:	601a      	str	r2, [r3, #0]
#endif /* ETHARP_TABLE_MATCH_NETIF */
  return (s16_t)i;
 8035d16:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
}
 8035d1a:	4618      	mov	r0, r3
 8035d1c:	3728      	adds	r7, #40	; 0x28
 8035d1e:	46bd      	mov	sp, r7
 8035d20:	bd80      	pop	{r7, pc}
 8035d22:	bf00      	nop
 8035d24:	2000ef60 	.word	0x2000ef60
 8035d28:	0803cd90 	.word	0x0803cd90
 8035d2c:	0803cdc8 	.word	0x0803cdc8
 8035d30:	0803ce08 	.word	0x0803ce08
 8035d34:	0803ce30 	.word	0x0803ce30
 8035d38:	0803ce48 	.word	0x0803ce48
 8035d3c:	0803ce5c 	.word	0x0803ce5c

08035d40 <etharp_update_arp_entry>:
 *
 * @see pbuf_free()
 */
static err_t
etharp_update_arp_entry(struct netif *netif, const ip4_addr_t *ipaddr, struct eth_addr *ethaddr, u8_t flags)
{
 8035d40:	b580      	push	{r7, lr}
 8035d42:	b088      	sub	sp, #32
 8035d44:	af02      	add	r7, sp, #8
 8035d46:	60f8      	str	r0, [r7, #12]
 8035d48:	60b9      	str	r1, [r7, #8]
 8035d4a:	607a      	str	r2, [r7, #4]
 8035d4c:	70fb      	strb	r3, [r7, #3]
  s16_t i;
  LWIP_ASSERT("netif->hwaddr_len == ETH_HWADDR_LEN", netif->hwaddr_len == ETH_HWADDR_LEN);
 8035d4e:	68fb      	ldr	r3, [r7, #12]
 8035d50:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8035d54:	2b06      	cmp	r3, #6
 8035d56:	d006      	beq.n	8035d66 <etharp_update_arp_entry+0x26>
 8035d58:	4b48      	ldr	r3, [pc, #288]	; (8035e7c <etharp_update_arp_entry+0x13c>)
 8035d5a:	f240 12a9 	movw	r2, #425	; 0x1a9
 8035d5e:	4948      	ldr	r1, [pc, #288]	; (8035e80 <etharp_update_arp_entry+0x140>)
 8035d60:	4848      	ldr	r0, [pc, #288]	; (8035e84 <etharp_update_arp_entry+0x144>)
 8035d62:	f003 f981 	bl	8039068 <iprintf>
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: %"U16_F".%"U16_F".%"U16_F".%"U16_F" - %02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F"\n",
              ip4_addr1_16(ipaddr), ip4_addr2_16(ipaddr), ip4_addr3_16(ipaddr), ip4_addr4_16(ipaddr),
              (u16_t)ethaddr->addr[0], (u16_t)ethaddr->addr[1], (u16_t)ethaddr->addr[2],
              (u16_t)ethaddr->addr[3], (u16_t)ethaddr->addr[4], (u16_t)ethaddr->addr[5]));
  /* non-unicast address? */
  if (ip4_addr_isany(ipaddr) ||
 8035d66:	68bb      	ldr	r3, [r7, #8]
 8035d68:	2b00      	cmp	r3, #0
 8035d6a:	d012      	beq.n	8035d92 <etharp_update_arp_entry+0x52>
 8035d6c:	68bb      	ldr	r3, [r7, #8]
 8035d6e:	681b      	ldr	r3, [r3, #0]
 8035d70:	2b00      	cmp	r3, #0
 8035d72:	d00e      	beq.n	8035d92 <etharp_update_arp_entry+0x52>
      ip4_addr_isbroadcast(ipaddr, netif) ||
 8035d74:	68bb      	ldr	r3, [r7, #8]
 8035d76:	681b      	ldr	r3, [r3, #0]
 8035d78:	68f9      	ldr	r1, [r7, #12]
 8035d7a:	4618      	mov	r0, r3
 8035d7c:	f001 f9ee 	bl	803715c <ip4_addr_isbroadcast_u32>
 8035d80:	4603      	mov	r3, r0
  if (ip4_addr_isany(ipaddr) ||
 8035d82:	2b00      	cmp	r3, #0
 8035d84:	d105      	bne.n	8035d92 <etharp_update_arp_entry+0x52>
      ip4_addr_ismulticast(ipaddr)) {
 8035d86:	68bb      	ldr	r3, [r7, #8]
 8035d88:	681b      	ldr	r3, [r3, #0]
 8035d8a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
      ip4_addr_isbroadcast(ipaddr, netif) ||
 8035d8e:	2be0      	cmp	r3, #224	; 0xe0
 8035d90:	d102      	bne.n	8035d98 <etharp_update_arp_entry+0x58>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 8035d92:	f06f 030f 	mvn.w	r3, #15
 8035d96:	e06c      	b.n	8035e72 <etharp_update_arp_entry+0x132>
  }
  /* find or create ARP entry */
  i = etharp_find_entry(ipaddr, flags, netif);
 8035d98:	78fb      	ldrb	r3, [r7, #3]
 8035d9a:	68fa      	ldr	r2, [r7, #12]
 8035d9c:	4619      	mov	r1, r3
 8035d9e:	68b8      	ldr	r0, [r7, #8]
 8035da0:	f7ff fe56 	bl	8035a50 <etharp_find_entry>
 8035da4:	4603      	mov	r3, r0
 8035da6:	82fb      	strh	r3, [r7, #22]
  /* bail out if no entry could be found */
  if (i < 0) {
 8035da8:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8035dac:	2b00      	cmp	r3, #0
 8035dae:	da02      	bge.n	8035db6 <etharp_update_arp_entry+0x76>
    return (err_t)i;
 8035db0:	8afb      	ldrh	r3, [r7, #22]
 8035db2:	b25b      	sxtb	r3, r3
 8035db4:	e05d      	b.n	8035e72 <etharp_update_arp_entry+0x132>
    return ERR_VAL;
  } else
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
  {
    /* mark it stable */
    arp_table[i].state = ETHARP_STATE_STABLE;
 8035db6:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8035dba:	4933      	ldr	r1, [pc, #204]	; (8035e88 <etharp_update_arp_entry+0x148>)
 8035dbc:	4613      	mov	r3, r2
 8035dbe:	005b      	lsls	r3, r3, #1
 8035dc0:	4413      	add	r3, r2
 8035dc2:	00db      	lsls	r3, r3, #3
 8035dc4:	440b      	add	r3, r1
 8035dc6:	3314      	adds	r3, #20
 8035dc8:	2202      	movs	r2, #2
 8035dca:	701a      	strb	r2, [r3, #0]
  }

  /* record network interface */
  arp_table[i].netif = netif;
 8035dcc:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8035dd0:	492d      	ldr	r1, [pc, #180]	; (8035e88 <etharp_update_arp_entry+0x148>)
 8035dd2:	4613      	mov	r3, r2
 8035dd4:	005b      	lsls	r3, r3, #1
 8035dd6:	4413      	add	r3, r2
 8035dd8:	00db      	lsls	r3, r3, #3
 8035dda:	440b      	add	r3, r1
 8035ddc:	3308      	adds	r3, #8
 8035dde:	68fa      	ldr	r2, [r7, #12]
 8035de0:	601a      	str	r2, [r3, #0]
  /* insert in SNMP ARP index tree */
  mib2_add_arp_entry(netif, &arp_table[i].ipaddr);

  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: updating stable entry %"S16_F"\n", i));
  /* update address */
  SMEMCPY(&arp_table[i].ethaddr, ethaddr, ETH_HWADDR_LEN);
 8035de2:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8035de6:	4613      	mov	r3, r2
 8035de8:	005b      	lsls	r3, r3, #1
 8035dea:	4413      	add	r3, r2
 8035dec:	00db      	lsls	r3, r3, #3
 8035dee:	3308      	adds	r3, #8
 8035df0:	4a25      	ldr	r2, [pc, #148]	; (8035e88 <etharp_update_arp_entry+0x148>)
 8035df2:	4413      	add	r3, r2
 8035df4:	3304      	adds	r3, #4
 8035df6:	2206      	movs	r2, #6
 8035df8:	6879      	ldr	r1, [r7, #4]
 8035dfa:	4618      	mov	r0, r3
 8035dfc:	f002 fd3a 	bl	8038874 <memcpy>
  /* reset time stamp */
  arp_table[i].ctime = 0;
 8035e00:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8035e04:	4920      	ldr	r1, [pc, #128]	; (8035e88 <etharp_update_arp_entry+0x148>)
 8035e06:	4613      	mov	r3, r2
 8035e08:	005b      	lsls	r3, r3, #1
 8035e0a:	4413      	add	r3, r2
 8035e0c:	00db      	lsls	r3, r3, #3
 8035e0e:	440b      	add	r3, r1
 8035e10:	3312      	adds	r3, #18
 8035e12:	2200      	movs	r2, #0
 8035e14:	801a      	strh	r2, [r3, #0]
    /* get the packet pointer */
    p = q->p;
    /* now queue entry can be freed */
    memp_free(MEMP_ARP_QUEUE, q);
#else /* ARP_QUEUEING */
  if (arp_table[i].q != NULL) {
 8035e16:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8035e1a:	491b      	ldr	r1, [pc, #108]	; (8035e88 <etharp_update_arp_entry+0x148>)
 8035e1c:	4613      	mov	r3, r2
 8035e1e:	005b      	lsls	r3, r3, #1
 8035e20:	4413      	add	r3, r2
 8035e22:	00db      	lsls	r3, r3, #3
 8035e24:	440b      	add	r3, r1
 8035e26:	681b      	ldr	r3, [r3, #0]
 8035e28:	2b00      	cmp	r3, #0
 8035e2a:	d021      	beq.n	8035e70 <etharp_update_arp_entry+0x130>
    struct pbuf *p = arp_table[i].q;
 8035e2c:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8035e30:	4915      	ldr	r1, [pc, #84]	; (8035e88 <etharp_update_arp_entry+0x148>)
 8035e32:	4613      	mov	r3, r2
 8035e34:	005b      	lsls	r3, r3, #1
 8035e36:	4413      	add	r3, r2
 8035e38:	00db      	lsls	r3, r3, #3
 8035e3a:	440b      	add	r3, r1
 8035e3c:	681b      	ldr	r3, [r3, #0]
 8035e3e:	613b      	str	r3, [r7, #16]
    arp_table[i].q = NULL;
 8035e40:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8035e44:	4910      	ldr	r1, [pc, #64]	; (8035e88 <etharp_update_arp_entry+0x148>)
 8035e46:	4613      	mov	r3, r2
 8035e48:	005b      	lsls	r3, r3, #1
 8035e4a:	4413      	add	r3, r2
 8035e4c:	00db      	lsls	r3, r3, #3
 8035e4e:	440b      	add	r3, r1
 8035e50:	2200      	movs	r2, #0
 8035e52:	601a      	str	r2, [r3, #0]
#endif /* ARP_QUEUEING */
    /* send the queued IP packet */
    ethernet_output(netif, p, (struct eth_addr *)(netif->hwaddr), ethaddr, ETHTYPE_IP);
 8035e54:	68fb      	ldr	r3, [r7, #12]
 8035e56:	f103 0226 	add.w	r2, r3, #38	; 0x26
 8035e5a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8035e5e:	9300      	str	r3, [sp, #0]
 8035e60:	687b      	ldr	r3, [r7, #4]
 8035e62:	6939      	ldr	r1, [r7, #16]
 8035e64:	68f8      	ldr	r0, [r7, #12]
 8035e66:	f002 f8d9 	bl	803801c <ethernet_output>
    /* free the queued IP packet */
    pbuf_free(p);
 8035e6a:	6938      	ldr	r0, [r7, #16]
 8035e6c:	f7f8 fa4e 	bl	802e30c <pbuf_free>
  }
  return ERR_OK;
 8035e70:	2300      	movs	r3, #0
}
 8035e72:	4618      	mov	r0, r3
 8035e74:	3718      	adds	r7, #24
 8035e76:	46bd      	mov	sp, r7
 8035e78:	bd80      	pop	{r7, pc}
 8035e7a:	bf00      	nop
 8035e7c:	0803cd90 	.word	0x0803cd90
 8035e80:	0803ce88 	.word	0x0803ce88
 8035e84:	0803ce08 	.word	0x0803ce08
 8035e88:	2000ef60 	.word	0x2000ef60

08035e8c <etharp_cleanup_netif>:
 *
 * @param netif points to a network interface
 */
void
etharp_cleanup_netif(struct netif *netif)
{
 8035e8c:	b580      	push	{r7, lr}
 8035e8e:	b084      	sub	sp, #16
 8035e90:	af00      	add	r7, sp, #0
 8035e92:	6078      	str	r0, [r7, #4]
  int i;

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8035e94:	2300      	movs	r3, #0
 8035e96:	60fb      	str	r3, [r7, #12]
 8035e98:	e01e      	b.n	8035ed8 <etharp_cleanup_netif+0x4c>
    u8_t state = arp_table[i].state;
 8035e9a:	4913      	ldr	r1, [pc, #76]	; (8035ee8 <etharp_cleanup_netif+0x5c>)
 8035e9c:	68fa      	ldr	r2, [r7, #12]
 8035e9e:	4613      	mov	r3, r2
 8035ea0:	005b      	lsls	r3, r3, #1
 8035ea2:	4413      	add	r3, r2
 8035ea4:	00db      	lsls	r3, r3, #3
 8035ea6:	440b      	add	r3, r1
 8035ea8:	3314      	adds	r3, #20
 8035eaa:	781b      	ldrb	r3, [r3, #0]
 8035eac:	72fb      	strb	r3, [r7, #11]
    if ((state != ETHARP_STATE_EMPTY) && (arp_table[i].netif == netif)) {
 8035eae:	7afb      	ldrb	r3, [r7, #11]
 8035eb0:	2b00      	cmp	r3, #0
 8035eb2:	d00e      	beq.n	8035ed2 <etharp_cleanup_netif+0x46>
 8035eb4:	490c      	ldr	r1, [pc, #48]	; (8035ee8 <etharp_cleanup_netif+0x5c>)
 8035eb6:	68fa      	ldr	r2, [r7, #12]
 8035eb8:	4613      	mov	r3, r2
 8035eba:	005b      	lsls	r3, r3, #1
 8035ebc:	4413      	add	r3, r2
 8035ebe:	00db      	lsls	r3, r3, #3
 8035ec0:	440b      	add	r3, r1
 8035ec2:	3308      	adds	r3, #8
 8035ec4:	681b      	ldr	r3, [r3, #0]
 8035ec6:	687a      	ldr	r2, [r7, #4]
 8035ec8:	429a      	cmp	r2, r3
 8035eca:	d102      	bne.n	8035ed2 <etharp_cleanup_netif+0x46>
      etharp_free_entry(i);
 8035ecc:	68f8      	ldr	r0, [r7, #12]
 8035ece:	f7ff fce5 	bl	803589c <etharp_free_entry>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8035ed2:	68fb      	ldr	r3, [r7, #12]
 8035ed4:	3301      	adds	r3, #1
 8035ed6:	60fb      	str	r3, [r7, #12]
 8035ed8:	68fb      	ldr	r3, [r7, #12]
 8035eda:	2b09      	cmp	r3, #9
 8035edc:	dddd      	ble.n	8035e9a <etharp_cleanup_netif+0xe>
    }
  }
}
 8035ede:	bf00      	nop
 8035ee0:	bf00      	nop
 8035ee2:	3710      	adds	r7, #16
 8035ee4:	46bd      	mov	sp, r7
 8035ee6:	bd80      	pop	{r7, pc}
 8035ee8:	2000ef60 	.word	0x2000ef60

08035eec <etharp_input>:
 *
 * @see pbuf_free()
 */
void
etharp_input(struct pbuf *p, struct netif *netif)
{
 8035eec:	b5b0      	push	{r4, r5, r7, lr}
 8035eee:	b08a      	sub	sp, #40	; 0x28
 8035ef0:	af04      	add	r7, sp, #16
 8035ef2:	6078      	str	r0, [r7, #4]
 8035ef4:	6039      	str	r1, [r7, #0]
  ip4_addr_t sipaddr, dipaddr;
  u8_t for_us;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 8035ef6:	683b      	ldr	r3, [r7, #0]
 8035ef8:	2b00      	cmp	r3, #0
 8035efa:	d107      	bne.n	8035f0c <etharp_input+0x20>
 8035efc:	4b49      	ldr	r3, [pc, #292]	; (8036024 <etharp_input+0x138>)
 8035efe:	f240 228a 	movw	r2, #650	; 0x28a
 8035f02:	4949      	ldr	r1, [pc, #292]	; (8036028 <etharp_input+0x13c>)
 8035f04:	4849      	ldr	r0, [pc, #292]	; (803602c <etharp_input+0x140>)
 8035f06:	f003 f8af 	bl	8039068 <iprintf>
 8035f0a:	e088      	b.n	803601e <etharp_input+0x132>

  hdr = (struct etharp_hdr *)p->payload;
 8035f0c:	687b      	ldr	r3, [r7, #4]
 8035f0e:	685b      	ldr	r3, [r3, #4]
 8035f10:	613b      	str	r3, [r7, #16]

  /* RFC 826 "Packet Reception": */
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 8035f12:	693b      	ldr	r3, [r7, #16]
 8035f14:	881b      	ldrh	r3, [r3, #0]
 8035f16:	b29b      	uxth	r3, r3
 8035f18:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8035f1c:	d10c      	bne.n	8035f38 <etharp_input+0x4c>
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 8035f1e:	693b      	ldr	r3, [r7, #16]
 8035f20:	791b      	ldrb	r3, [r3, #4]
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 8035f22:	2b06      	cmp	r3, #6
 8035f24:	d108      	bne.n	8035f38 <etharp_input+0x4c>
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 8035f26:	693b      	ldr	r3, [r7, #16]
 8035f28:	795b      	ldrb	r3, [r3, #5]
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 8035f2a:	2b04      	cmp	r3, #4
 8035f2c:	d104      	bne.n	8035f38 <etharp_input+0x4c>
      (hdr->proto != PP_HTONS(ETHTYPE_IP)))  {
 8035f2e:	693b      	ldr	r3, [r7, #16]
 8035f30:	885b      	ldrh	r3, [r3, #2]
 8035f32:	b29b      	uxth	r3, r3
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 8035f34:	2b08      	cmp	r3, #8
 8035f36:	d00f      	beq.n	8035f58 <etharp_input+0x6c>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
                ("etharp_input: packet dropped, wrong hw type, hwlen, proto, protolen or ethernet type (%"U16_F"/%"U16_F"/%"U16_F"/%"U16_F")\n",
                 hdr->hwtype, (u16_t)hdr->hwlen, hdr->proto, (u16_t)hdr->protolen));
    ETHARP_STATS_INC(etharp.proterr);
 8035f38:	4b3d      	ldr	r3, [pc, #244]	; (8036030 <etharp_input+0x144>)
 8035f3a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8035f3c:	3301      	adds	r3, #1
 8035f3e:	b29a      	uxth	r2, r3
 8035f40:	4b3b      	ldr	r3, [pc, #236]	; (8036030 <etharp_input+0x144>)
 8035f42:	851a      	strh	r2, [r3, #40]	; 0x28
    ETHARP_STATS_INC(etharp.drop);
 8035f44:	4b3a      	ldr	r3, [pc, #232]	; (8036030 <etharp_input+0x144>)
 8035f46:	8bdb      	ldrh	r3, [r3, #30]
 8035f48:	3301      	adds	r3, #1
 8035f4a:	b29a      	uxth	r2, r3
 8035f4c:	4b38      	ldr	r3, [pc, #224]	; (8036030 <etharp_input+0x144>)
 8035f4e:	83da      	strh	r2, [r3, #30]
    pbuf_free(p);
 8035f50:	6878      	ldr	r0, [r7, #4]
 8035f52:	f7f8 f9db 	bl	802e30c <pbuf_free>
    return;
 8035f56:	e062      	b.n	803601e <etharp_input+0x132>
  }
  ETHARP_STATS_INC(etharp.recv);
 8035f58:	4b35      	ldr	r3, [pc, #212]	; (8036030 <etharp_input+0x144>)
 8035f5a:	8b5b      	ldrh	r3, [r3, #26]
 8035f5c:	3301      	adds	r3, #1
 8035f5e:	b29a      	uxth	r2, r3
 8035f60:	4b33      	ldr	r3, [pc, #204]	; (8036030 <etharp_input+0x144>)
 8035f62:	835a      	strh	r2, [r3, #26]
  autoip_arp_reply(netif, hdr);
#endif /* LWIP_AUTOIP */

  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing (not using structure copy which breaks strict-aliasing rules). */
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&sipaddr, &hdr->sipaddr);
 8035f64:	693b      	ldr	r3, [r7, #16]
 8035f66:	330e      	adds	r3, #14
 8035f68:	681b      	ldr	r3, [r3, #0]
 8035f6a:	60fb      	str	r3, [r7, #12]
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&dipaddr, &hdr->dipaddr);
 8035f6c:	693b      	ldr	r3, [r7, #16]
 8035f6e:	3318      	adds	r3, #24
 8035f70:	681b      	ldr	r3, [r3, #0]
 8035f72:	60bb      	str	r3, [r7, #8]

  /* this interface is not configured? */
  if (ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 8035f74:	683b      	ldr	r3, [r7, #0]
 8035f76:	3304      	adds	r3, #4
 8035f78:	681b      	ldr	r3, [r3, #0]
 8035f7a:	2b00      	cmp	r3, #0
 8035f7c:	d102      	bne.n	8035f84 <etharp_input+0x98>
    for_us = 0;
 8035f7e:	2300      	movs	r3, #0
 8035f80:	75fb      	strb	r3, [r7, #23]
 8035f82:	e009      	b.n	8035f98 <etharp_input+0xac>
  } else {
    /* ARP packet directed to us? */
    for_us = (u8_t)ip4_addr_cmp(&dipaddr, netif_ip4_addr(netif));
 8035f84:	68ba      	ldr	r2, [r7, #8]
 8035f86:	683b      	ldr	r3, [r7, #0]
 8035f88:	3304      	adds	r3, #4
 8035f8a:	681b      	ldr	r3, [r3, #0]
 8035f8c:	429a      	cmp	r2, r3
 8035f8e:	bf0c      	ite	eq
 8035f90:	2301      	moveq	r3, #1
 8035f92:	2300      	movne	r3, #0
 8035f94:	b2db      	uxtb	r3, r3
 8035f96:	75fb      	strb	r3, [r7, #23]
  /* ARP message directed to us?
      -> add IP address in ARP cache; assume requester wants to talk to us,
         can result in directly sending the queued packets for this host.
     ARP message not directed to us?
      ->  update the source IP address in the cache, if present */
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 8035f98:	693b      	ldr	r3, [r7, #16]
 8035f9a:	f103 0208 	add.w	r2, r3, #8
 8035f9e:	7dfb      	ldrb	r3, [r7, #23]
 8035fa0:	2b00      	cmp	r3, #0
 8035fa2:	d001      	beq.n	8035fa8 <etharp_input+0xbc>
 8035fa4:	2301      	movs	r3, #1
 8035fa6:	e000      	b.n	8035faa <etharp_input+0xbe>
 8035fa8:	2302      	movs	r3, #2
 8035faa:	f107 010c 	add.w	r1, r7, #12
 8035fae:	6838      	ldr	r0, [r7, #0]
 8035fb0:	f7ff fec6 	bl	8035d40 <etharp_update_arp_entry>
                          for_us ? ETHARP_FLAG_TRY_HARD : ETHARP_FLAG_FIND_ONLY);

  /* now act on the message itself */
  switch (hdr->opcode) {
 8035fb4:	693b      	ldr	r3, [r7, #16]
 8035fb6:	88db      	ldrh	r3, [r3, #6]
 8035fb8:	b29b      	uxth	r3, r3
 8035fba:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8035fbe:	d003      	beq.n	8035fc8 <etharp_input+0xdc>
 8035fc0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8035fc4:	d025      	beq.n	8036012 <etharp_input+0x126>
 8035fc6:	e01d      	b.n	8036004 <etharp_input+0x118>
       * reply. In any case, we time-stamp any existing ARP entry,
       * and possibly send out an IP packet that was queued on it. */

      LWIP_DEBUGF (ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_input: incoming ARP request\n"));
      /* ARP request for our address? */
      if (for_us) {
 8035fc8:	7dfb      	ldrb	r3, [r7, #23]
 8035fca:	2b00      	cmp	r3, #0
 8035fcc:	d023      	beq.n	8036016 <etharp_input+0x12a>
        /* send ARP response */
        etharp_raw(netif,
                   (struct eth_addr *)netif->hwaddr, &hdr->shwaddr,
 8035fce:	683b      	ldr	r3, [r7, #0]
 8035fd0:	f103 0026 	add.w	r0, r3, #38	; 0x26
 8035fd4:	693b      	ldr	r3, [r7, #16]
 8035fd6:	f103 0408 	add.w	r4, r3, #8
                   (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif),
 8035fda:	683b      	ldr	r3, [r7, #0]
 8035fdc:	f103 0526 	add.w	r5, r3, #38	; 0x26
 8035fe0:	683b      	ldr	r3, [r7, #0]
 8035fe2:	3304      	adds	r3, #4
                   &hdr->shwaddr, &sipaddr,
 8035fe4:	693a      	ldr	r2, [r7, #16]
 8035fe6:	3208      	adds	r2, #8
        etharp_raw(netif,
 8035fe8:	2102      	movs	r1, #2
 8035fea:	9103      	str	r1, [sp, #12]
 8035fec:	f107 010c 	add.w	r1, r7, #12
 8035ff0:	9102      	str	r1, [sp, #8]
 8035ff2:	9201      	str	r2, [sp, #4]
 8035ff4:	9300      	str	r3, [sp, #0]
 8035ff6:	462b      	mov	r3, r5
 8035ff8:	4622      	mov	r2, r4
 8035ffa:	4601      	mov	r1, r0
 8035ffc:	6838      	ldr	r0, [r7, #0]
 8035ffe:	f000 fb0b 	bl	8036618 <etharp_raw>
        /* request was not directed to us */
      } else {
        /* { for_us == 0 and netif->ip_addr.addr != 0 } */
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_input: ARP request was not for us.\n"));
      }
      break;
 8036002:	e008      	b.n	8036016 <etharp_input+0x12a>
      dhcp_arp_reply(netif, &sipaddr);
#endif /* (LWIP_DHCP && DHCP_DOES_ARP_CHECK) */
      break;
    default:
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_input: ARP unknown opcode type %"S16_F"\n", lwip_htons(hdr->opcode)));
      ETHARP_STATS_INC(etharp.err);
 8036004:	4b0a      	ldr	r3, [pc, #40]	; (8036030 <etharp_input+0x144>)
 8036006:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8036008:	3301      	adds	r3, #1
 803600a:	b29a      	uxth	r2, r3
 803600c:	4b08      	ldr	r3, [pc, #32]	; (8036030 <etharp_input+0x144>)
 803600e:	859a      	strh	r2, [r3, #44]	; 0x2c
      break;
 8036010:	e002      	b.n	8036018 <etharp_input+0x12c>
      break;
 8036012:	bf00      	nop
 8036014:	e000      	b.n	8036018 <etharp_input+0x12c>
      break;
 8036016:	bf00      	nop
  }
  /* free ARP packet */
  pbuf_free(p);
 8036018:	6878      	ldr	r0, [r7, #4]
 803601a:	f7f8 f977 	bl	802e30c <pbuf_free>
}
 803601e:	3718      	adds	r7, #24
 8036020:	46bd      	mov	sp, r7
 8036022:	bdb0      	pop	{r4, r5, r7, pc}
 8036024:	0803cd90 	.word	0x0803cd90
 8036028:	0803cee0 	.word	0x0803cee0
 803602c:	0803ce08 	.word	0x0803ce08
 8036030:	2000ee04 	.word	0x2000ee04

08036034 <etharp_output_to_arp_index>:
/** Just a small helper function that sends a pbuf to an ethernet address
 * in the arp_table specified by the index 'arp_idx'.
 */
static err_t
etharp_output_to_arp_index(struct netif *netif, struct pbuf *q, netif_addr_idx_t arp_idx)
{
 8036034:	b580      	push	{r7, lr}
 8036036:	b086      	sub	sp, #24
 8036038:	af02      	add	r7, sp, #8
 803603a:	60f8      	str	r0, [r7, #12]
 803603c:	60b9      	str	r1, [r7, #8]
 803603e:	4613      	mov	r3, r2
 8036040:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 8036042:	79fa      	ldrb	r2, [r7, #7]
 8036044:	4944      	ldr	r1, [pc, #272]	; (8036158 <etharp_output_to_arp_index+0x124>)
 8036046:	4613      	mov	r3, r2
 8036048:	005b      	lsls	r3, r3, #1
 803604a:	4413      	add	r3, r2
 803604c:	00db      	lsls	r3, r3, #3
 803604e:	440b      	add	r3, r1
 8036050:	3314      	adds	r3, #20
 8036052:	781b      	ldrb	r3, [r3, #0]
 8036054:	2b01      	cmp	r3, #1
 8036056:	d806      	bhi.n	8036066 <etharp_output_to_arp_index+0x32>
 8036058:	4b40      	ldr	r3, [pc, #256]	; (803615c <etharp_output_to_arp_index+0x128>)
 803605a:	f240 22ee 	movw	r2, #750	; 0x2ee
 803605e:	4940      	ldr	r1, [pc, #256]	; (8036160 <etharp_output_to_arp_index+0x12c>)
 8036060:	4840      	ldr	r0, [pc, #256]	; (8036164 <etharp_output_to_arp_index+0x130>)
 8036062:	f003 f801 	bl	8039068 <iprintf>
              arp_table[arp_idx].state >= ETHARP_STATE_STABLE);
  /* if arp table entry is about to expire: re-request it,
     but only if its state is ETHARP_STATE_STABLE to prevent flooding the
     network with ARP requests if this address is used frequently. */
  if (arp_table[arp_idx].state == ETHARP_STATE_STABLE) {
 8036066:	79fa      	ldrb	r2, [r7, #7]
 8036068:	493b      	ldr	r1, [pc, #236]	; (8036158 <etharp_output_to_arp_index+0x124>)
 803606a:	4613      	mov	r3, r2
 803606c:	005b      	lsls	r3, r3, #1
 803606e:	4413      	add	r3, r2
 8036070:	00db      	lsls	r3, r3, #3
 8036072:	440b      	add	r3, r1
 8036074:	3314      	adds	r3, #20
 8036076:	781b      	ldrb	r3, [r3, #0]
 8036078:	2b02      	cmp	r3, #2
 803607a:	d153      	bne.n	8036124 <etharp_output_to_arp_index+0xf0>
    if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_BROADCAST) {
 803607c:	79fa      	ldrb	r2, [r7, #7]
 803607e:	4936      	ldr	r1, [pc, #216]	; (8036158 <etharp_output_to_arp_index+0x124>)
 8036080:	4613      	mov	r3, r2
 8036082:	005b      	lsls	r3, r3, #1
 8036084:	4413      	add	r3, r2
 8036086:	00db      	lsls	r3, r3, #3
 8036088:	440b      	add	r3, r1
 803608a:	3312      	adds	r3, #18
 803608c:	881b      	ldrh	r3, [r3, #0]
 803608e:	f5b3 7f8e 	cmp.w	r3, #284	; 0x11c
 8036092:	d919      	bls.n	80360c8 <etharp_output_to_arp_index+0x94>
      /* issue a standard request using broadcast */
      if (etharp_request(netif, &arp_table[arp_idx].ipaddr) == ERR_OK) {
 8036094:	79fa      	ldrb	r2, [r7, #7]
 8036096:	4613      	mov	r3, r2
 8036098:	005b      	lsls	r3, r3, #1
 803609a:	4413      	add	r3, r2
 803609c:	00db      	lsls	r3, r3, #3
 803609e:	4a2e      	ldr	r2, [pc, #184]	; (8036158 <etharp_output_to_arp_index+0x124>)
 80360a0:	4413      	add	r3, r2
 80360a2:	3304      	adds	r3, #4
 80360a4:	4619      	mov	r1, r3
 80360a6:	68f8      	ldr	r0, [r7, #12]
 80360a8:	f000 fb72 	bl	8036790 <etharp_request>
 80360ac:	4603      	mov	r3, r0
 80360ae:	2b00      	cmp	r3, #0
 80360b0:	d138      	bne.n	8036124 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 80360b2:	79fa      	ldrb	r2, [r7, #7]
 80360b4:	4928      	ldr	r1, [pc, #160]	; (8036158 <etharp_output_to_arp_index+0x124>)
 80360b6:	4613      	mov	r3, r2
 80360b8:	005b      	lsls	r3, r3, #1
 80360ba:	4413      	add	r3, r2
 80360bc:	00db      	lsls	r3, r3, #3
 80360be:	440b      	add	r3, r1
 80360c0:	3314      	adds	r3, #20
 80360c2:	2203      	movs	r2, #3
 80360c4:	701a      	strb	r2, [r3, #0]
 80360c6:	e02d      	b.n	8036124 <etharp_output_to_arp_index+0xf0>
      }
    } else if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_UNICAST) {
 80360c8:	79fa      	ldrb	r2, [r7, #7]
 80360ca:	4923      	ldr	r1, [pc, #140]	; (8036158 <etharp_output_to_arp_index+0x124>)
 80360cc:	4613      	mov	r3, r2
 80360ce:	005b      	lsls	r3, r3, #1
 80360d0:	4413      	add	r3, r2
 80360d2:	00db      	lsls	r3, r3, #3
 80360d4:	440b      	add	r3, r1
 80360d6:	3312      	adds	r3, #18
 80360d8:	881b      	ldrh	r3, [r3, #0]
 80360da:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
 80360de:	d321      	bcc.n	8036124 <etharp_output_to_arp_index+0xf0>
      /* issue a unicast request (for 15 seconds) to prevent unnecessary broadcast */
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 80360e0:	79fa      	ldrb	r2, [r7, #7]
 80360e2:	4613      	mov	r3, r2
 80360e4:	005b      	lsls	r3, r3, #1
 80360e6:	4413      	add	r3, r2
 80360e8:	00db      	lsls	r3, r3, #3
 80360ea:	4a1b      	ldr	r2, [pc, #108]	; (8036158 <etharp_output_to_arp_index+0x124>)
 80360ec:	4413      	add	r3, r2
 80360ee:	1d19      	adds	r1, r3, #4
 80360f0:	79fa      	ldrb	r2, [r7, #7]
 80360f2:	4613      	mov	r3, r2
 80360f4:	005b      	lsls	r3, r3, #1
 80360f6:	4413      	add	r3, r2
 80360f8:	00db      	lsls	r3, r3, #3
 80360fa:	3308      	adds	r3, #8
 80360fc:	4a16      	ldr	r2, [pc, #88]	; (8036158 <etharp_output_to_arp_index+0x124>)
 80360fe:	4413      	add	r3, r2
 8036100:	3304      	adds	r3, #4
 8036102:	461a      	mov	r2, r3
 8036104:	68f8      	ldr	r0, [r7, #12]
 8036106:	f000 fb21 	bl	803674c <etharp_request_dst>
 803610a:	4603      	mov	r3, r0
 803610c:	2b00      	cmp	r3, #0
 803610e:	d109      	bne.n	8036124 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 8036110:	79fa      	ldrb	r2, [r7, #7]
 8036112:	4911      	ldr	r1, [pc, #68]	; (8036158 <etharp_output_to_arp_index+0x124>)
 8036114:	4613      	mov	r3, r2
 8036116:	005b      	lsls	r3, r3, #1
 8036118:	4413      	add	r3, r2
 803611a:	00db      	lsls	r3, r3, #3
 803611c:	440b      	add	r3, r1
 803611e:	3314      	adds	r3, #20
 8036120:	2203      	movs	r2, #3
 8036122:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), &arp_table[arp_idx].ethaddr, ETHTYPE_IP);
 8036124:	68fb      	ldr	r3, [r7, #12]
 8036126:	f103 0126 	add.w	r1, r3, #38	; 0x26
 803612a:	79fa      	ldrb	r2, [r7, #7]
 803612c:	4613      	mov	r3, r2
 803612e:	005b      	lsls	r3, r3, #1
 8036130:	4413      	add	r3, r2
 8036132:	00db      	lsls	r3, r3, #3
 8036134:	3308      	adds	r3, #8
 8036136:	4a08      	ldr	r2, [pc, #32]	; (8036158 <etharp_output_to_arp_index+0x124>)
 8036138:	4413      	add	r3, r2
 803613a:	3304      	adds	r3, #4
 803613c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8036140:	9200      	str	r2, [sp, #0]
 8036142:	460a      	mov	r2, r1
 8036144:	68b9      	ldr	r1, [r7, #8]
 8036146:	68f8      	ldr	r0, [r7, #12]
 8036148:	f001 ff68 	bl	803801c <ethernet_output>
 803614c:	4603      	mov	r3, r0
}
 803614e:	4618      	mov	r0, r3
 8036150:	3710      	adds	r7, #16
 8036152:	46bd      	mov	sp, r7
 8036154:	bd80      	pop	{r7, pc}
 8036156:	bf00      	nop
 8036158:	2000ef60 	.word	0x2000ef60
 803615c:	0803cd90 	.word	0x0803cd90
 8036160:	0803cf00 	.word	0x0803cf00
 8036164:	0803ce08 	.word	0x0803ce08

08036168 <etharp_output>:
 * - ERR_RTE No route to destination (no gateway to external networks),
 * or the return type of either etharp_query() or ethernet_output().
 */
err_t
etharp_output(struct netif *netif, struct pbuf *q, const ip4_addr_t *ipaddr)
{
 8036168:	b580      	push	{r7, lr}
 803616a:	b08a      	sub	sp, #40	; 0x28
 803616c:	af02      	add	r7, sp, #8
 803616e:	60f8      	str	r0, [r7, #12]
 8036170:	60b9      	str	r1, [r7, #8]
 8036172:	607a      	str	r2, [r7, #4]
  const struct eth_addr *dest;
  struct eth_addr mcastaddr;
  const ip4_addr_t *dst_addr = ipaddr;
 8036174:	687b      	ldr	r3, [r7, #4]
 8036176:	61bb      	str	r3, [r7, #24]

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("netif != NULL", netif != NULL);
 8036178:	68fb      	ldr	r3, [r7, #12]
 803617a:	2b00      	cmp	r3, #0
 803617c:	d106      	bne.n	803618c <etharp_output+0x24>
 803617e:	4b76      	ldr	r3, [pc, #472]	; (8036358 <etharp_output+0x1f0>)
 8036180:	f240 321e 	movw	r2, #798	; 0x31e
 8036184:	4975      	ldr	r1, [pc, #468]	; (803635c <etharp_output+0x1f4>)
 8036186:	4876      	ldr	r0, [pc, #472]	; (8036360 <etharp_output+0x1f8>)
 8036188:	f002 ff6e 	bl	8039068 <iprintf>
  LWIP_ASSERT("q != NULL", q != NULL);
 803618c:	68bb      	ldr	r3, [r7, #8]
 803618e:	2b00      	cmp	r3, #0
 8036190:	d106      	bne.n	80361a0 <etharp_output+0x38>
 8036192:	4b71      	ldr	r3, [pc, #452]	; (8036358 <etharp_output+0x1f0>)
 8036194:	f240 321f 	movw	r2, #799	; 0x31f
 8036198:	4972      	ldr	r1, [pc, #456]	; (8036364 <etharp_output+0x1fc>)
 803619a:	4871      	ldr	r0, [pc, #452]	; (8036360 <etharp_output+0x1f8>)
 803619c:	f002 ff64 	bl	8039068 <iprintf>
  LWIP_ASSERT("ipaddr != NULL", ipaddr != NULL);
 80361a0:	687b      	ldr	r3, [r7, #4]
 80361a2:	2b00      	cmp	r3, #0
 80361a4:	d106      	bne.n	80361b4 <etharp_output+0x4c>
 80361a6:	4b6c      	ldr	r3, [pc, #432]	; (8036358 <etharp_output+0x1f0>)
 80361a8:	f44f 7248 	mov.w	r2, #800	; 0x320
 80361ac:	496e      	ldr	r1, [pc, #440]	; (8036368 <etharp_output+0x200>)
 80361ae:	486c      	ldr	r0, [pc, #432]	; (8036360 <etharp_output+0x1f8>)
 80361b0:	f002 ff5a 	bl	8039068 <iprintf>

  /* Determine on destination hardware address. Broadcasts and multicasts
   * are special, other IP addresses are looked up in the ARP table. */

  /* broadcast destination IP address? */
  if (ip4_addr_isbroadcast(ipaddr, netif)) {
 80361b4:	687b      	ldr	r3, [r7, #4]
 80361b6:	681b      	ldr	r3, [r3, #0]
 80361b8:	68f9      	ldr	r1, [r7, #12]
 80361ba:	4618      	mov	r0, r3
 80361bc:	f000 ffce 	bl	803715c <ip4_addr_isbroadcast_u32>
 80361c0:	4603      	mov	r3, r0
 80361c2:	2b00      	cmp	r3, #0
 80361c4:	d002      	beq.n	80361cc <etharp_output+0x64>
    /* broadcast on Ethernet also */
    dest = (const struct eth_addr *)&ethbroadcast;
 80361c6:	4b69      	ldr	r3, [pc, #420]	; (803636c <etharp_output+0x204>)
 80361c8:	61fb      	str	r3, [r7, #28]
 80361ca:	e0b5      	b.n	8036338 <etharp_output+0x1d0>
    /* multicast destination IP address? */
  } else if (ip4_addr_ismulticast(ipaddr)) {
 80361cc:	687b      	ldr	r3, [r7, #4]
 80361ce:	681b      	ldr	r3, [r3, #0]
 80361d0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80361d4:	2be0      	cmp	r3, #224	; 0xe0
 80361d6:	d118      	bne.n	803620a <etharp_output+0xa2>
    /* Hash IP multicast address to MAC address.*/
    mcastaddr.addr[0] = LL_IP4_MULTICAST_ADDR_0;
 80361d8:	2301      	movs	r3, #1
 80361da:	743b      	strb	r3, [r7, #16]
    mcastaddr.addr[1] = LL_IP4_MULTICAST_ADDR_1;
 80361dc:	2300      	movs	r3, #0
 80361de:	747b      	strb	r3, [r7, #17]
    mcastaddr.addr[2] = LL_IP4_MULTICAST_ADDR_2;
 80361e0:	235e      	movs	r3, #94	; 0x5e
 80361e2:	74bb      	strb	r3, [r7, #18]
    mcastaddr.addr[3] = ip4_addr2(ipaddr) & 0x7f;
 80361e4:	687b      	ldr	r3, [r7, #4]
 80361e6:	3301      	adds	r3, #1
 80361e8:	781b      	ldrb	r3, [r3, #0]
 80361ea:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80361ee:	b2db      	uxtb	r3, r3
 80361f0:	74fb      	strb	r3, [r7, #19]
    mcastaddr.addr[4] = ip4_addr3(ipaddr);
 80361f2:	687b      	ldr	r3, [r7, #4]
 80361f4:	3302      	adds	r3, #2
 80361f6:	781b      	ldrb	r3, [r3, #0]
 80361f8:	753b      	strb	r3, [r7, #20]
    mcastaddr.addr[5] = ip4_addr4(ipaddr);
 80361fa:	687b      	ldr	r3, [r7, #4]
 80361fc:	3303      	adds	r3, #3
 80361fe:	781b      	ldrb	r3, [r3, #0]
 8036200:	757b      	strb	r3, [r7, #21]
    /* destination Ethernet address is multicast */
    dest = &mcastaddr;
 8036202:	f107 0310 	add.w	r3, r7, #16
 8036206:	61fb      	str	r3, [r7, #28]
 8036208:	e096      	b.n	8036338 <etharp_output+0x1d0>
    /* unicast destination IP address? */
  } else {
    netif_addr_idx_t i;
    /* outside local network? if so, this can neither be a global broadcast nor
       a subnet broadcast. */
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 803620a:	687b      	ldr	r3, [r7, #4]
 803620c:	681a      	ldr	r2, [r3, #0]
 803620e:	68fb      	ldr	r3, [r7, #12]
 8036210:	3304      	adds	r3, #4
 8036212:	681b      	ldr	r3, [r3, #0]
 8036214:	405a      	eors	r2, r3
 8036216:	68fb      	ldr	r3, [r7, #12]
 8036218:	3308      	adds	r3, #8
 803621a:	681b      	ldr	r3, [r3, #0]
 803621c:	4013      	ands	r3, r2
 803621e:	2b00      	cmp	r3, #0
 8036220:	d012      	beq.n	8036248 <etharp_output+0xe0>
        !ip4_addr_islinklocal(ipaddr)) {
 8036222:	687b      	ldr	r3, [r7, #4]
 8036224:	681b      	ldr	r3, [r3, #0]
 8036226:	b29b      	uxth	r3, r3
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 8036228:	f64f 62a9 	movw	r2, #65193	; 0xfea9
 803622c:	4293      	cmp	r3, r2
 803622e:	d00b      	beq.n	8036248 <etharp_output+0xe0>
        dst_addr = LWIP_HOOK_ETHARP_GET_GW(netif, ipaddr);
        if (dst_addr == NULL)
#endif /* LWIP_HOOK_ETHARP_GET_GW */
        {
          /* interface has default gateway? */
          if (!ip4_addr_isany_val(*netif_ip4_gw(netif))) {
 8036230:	68fb      	ldr	r3, [r7, #12]
 8036232:	330c      	adds	r3, #12
 8036234:	681b      	ldr	r3, [r3, #0]
 8036236:	2b00      	cmp	r3, #0
 8036238:	d003      	beq.n	8036242 <etharp_output+0xda>
            /* send to hardware address of default gateway IP address */
            dst_addr = netif_ip4_gw(netif);
 803623a:	68fb      	ldr	r3, [r7, #12]
 803623c:	330c      	adds	r3, #12
 803623e:	61bb      	str	r3, [r7, #24]
 8036240:	e002      	b.n	8036248 <etharp_output+0xe0>
            /* no default gateway available */
          } else {
            /* no route to destination error (default gateway missing) */
            return ERR_RTE;
 8036242:	f06f 0303 	mvn.w	r3, #3
 8036246:	e083      	b.n	8036350 <etharp_output+0x1e8>
    if (netif->hints != NULL) {
      /* per-pcb cached entry was given */
      netif_addr_idx_t etharp_cached_entry = netif->hints->addr_hint;
      if (etharp_cached_entry < ARP_TABLE_SIZE) {
#endif /* LWIP_NETIF_HWADDRHINT */
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 8036248:	4b49      	ldr	r3, [pc, #292]	; (8036370 <etharp_output+0x208>)
 803624a:	781b      	ldrb	r3, [r3, #0]
 803624c:	4619      	mov	r1, r3
 803624e:	4a49      	ldr	r2, [pc, #292]	; (8036374 <etharp_output+0x20c>)
 8036250:	460b      	mov	r3, r1
 8036252:	005b      	lsls	r3, r3, #1
 8036254:	440b      	add	r3, r1
 8036256:	00db      	lsls	r3, r3, #3
 8036258:	4413      	add	r3, r2
 803625a:	3314      	adds	r3, #20
 803625c:	781b      	ldrb	r3, [r3, #0]
 803625e:	2b01      	cmp	r3, #1
 8036260:	d92b      	bls.n	80362ba <etharp_output+0x152>
#if ETHARP_TABLE_MATCH_NETIF
            (arp_table[etharp_cached_entry].netif == netif) &&
 8036262:	4b43      	ldr	r3, [pc, #268]	; (8036370 <etharp_output+0x208>)
 8036264:	781b      	ldrb	r3, [r3, #0]
 8036266:	4619      	mov	r1, r3
 8036268:	4a42      	ldr	r2, [pc, #264]	; (8036374 <etharp_output+0x20c>)
 803626a:	460b      	mov	r3, r1
 803626c:	005b      	lsls	r3, r3, #1
 803626e:	440b      	add	r3, r1
 8036270:	00db      	lsls	r3, r3, #3
 8036272:	4413      	add	r3, r2
 8036274:	3308      	adds	r3, #8
 8036276:	681b      	ldr	r3, [r3, #0]
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 8036278:	68fa      	ldr	r2, [r7, #12]
 803627a:	429a      	cmp	r2, r3
 803627c:	d11d      	bne.n	80362ba <etharp_output+0x152>
#endif
            (ip4_addr_cmp(dst_addr, &arp_table[etharp_cached_entry].ipaddr))) {
 803627e:	69bb      	ldr	r3, [r7, #24]
 8036280:	681a      	ldr	r2, [r3, #0]
 8036282:	4b3b      	ldr	r3, [pc, #236]	; (8036370 <etharp_output+0x208>)
 8036284:	781b      	ldrb	r3, [r3, #0]
 8036286:	4618      	mov	r0, r3
 8036288:	493a      	ldr	r1, [pc, #232]	; (8036374 <etharp_output+0x20c>)
 803628a:	4603      	mov	r3, r0
 803628c:	005b      	lsls	r3, r3, #1
 803628e:	4403      	add	r3, r0
 8036290:	00db      	lsls	r3, r3, #3
 8036292:	440b      	add	r3, r1
 8036294:	3304      	adds	r3, #4
 8036296:	681b      	ldr	r3, [r3, #0]
            (arp_table[etharp_cached_entry].netif == netif) &&
 8036298:	429a      	cmp	r2, r3
 803629a:	d10e      	bne.n	80362ba <etharp_output+0x152>
          /* the per-pcb-cached entry is stable and the right one! */
          ETHARP_STATS_INC(etharp.cachehit);
 803629c:	4b36      	ldr	r3, [pc, #216]	; (8036378 <etharp_output+0x210>)
 803629e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80362a0:	3301      	adds	r3, #1
 80362a2:	b29a      	uxth	r2, r3
 80362a4:	4b34      	ldr	r3, [pc, #208]	; (8036378 <etharp_output+0x210>)
 80362a6:	85da      	strh	r2, [r3, #46]	; 0x2e
          return etharp_output_to_arp_index(netif, q, etharp_cached_entry);
 80362a8:	4b31      	ldr	r3, [pc, #196]	; (8036370 <etharp_output+0x208>)
 80362aa:	781b      	ldrb	r3, [r3, #0]
 80362ac:	461a      	mov	r2, r3
 80362ae:	68b9      	ldr	r1, [r7, #8]
 80362b0:	68f8      	ldr	r0, [r7, #12]
 80362b2:	f7ff febf 	bl	8036034 <etharp_output_to_arp_index>
 80362b6:	4603      	mov	r3, r0
 80362b8:	e04a      	b.n	8036350 <etharp_output+0x1e8>
    }
#endif /* LWIP_NETIF_HWADDRHINT */

    /* find stable entry: do this here since this is a critical path for
       throughput and etharp_find_entry() is kind of slow */
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 80362ba:	2300      	movs	r3, #0
 80362bc:	75fb      	strb	r3, [r7, #23]
 80362be:	e031      	b.n	8036324 <etharp_output+0x1bc>
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 80362c0:	7dfa      	ldrb	r2, [r7, #23]
 80362c2:	492c      	ldr	r1, [pc, #176]	; (8036374 <etharp_output+0x20c>)
 80362c4:	4613      	mov	r3, r2
 80362c6:	005b      	lsls	r3, r3, #1
 80362c8:	4413      	add	r3, r2
 80362ca:	00db      	lsls	r3, r3, #3
 80362cc:	440b      	add	r3, r1
 80362ce:	3314      	adds	r3, #20
 80362d0:	781b      	ldrb	r3, [r3, #0]
 80362d2:	2b01      	cmp	r3, #1
 80362d4:	d923      	bls.n	803631e <etharp_output+0x1b6>
#if ETHARP_TABLE_MATCH_NETIF
          (arp_table[i].netif == netif) &&
 80362d6:	7dfa      	ldrb	r2, [r7, #23]
 80362d8:	4926      	ldr	r1, [pc, #152]	; (8036374 <etharp_output+0x20c>)
 80362da:	4613      	mov	r3, r2
 80362dc:	005b      	lsls	r3, r3, #1
 80362de:	4413      	add	r3, r2
 80362e0:	00db      	lsls	r3, r3, #3
 80362e2:	440b      	add	r3, r1
 80362e4:	3308      	adds	r3, #8
 80362e6:	681b      	ldr	r3, [r3, #0]
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 80362e8:	68fa      	ldr	r2, [r7, #12]
 80362ea:	429a      	cmp	r2, r3
 80362ec:	d117      	bne.n	803631e <etharp_output+0x1b6>
#endif
          (ip4_addr_cmp(dst_addr, &arp_table[i].ipaddr))) {
 80362ee:	69bb      	ldr	r3, [r7, #24]
 80362f0:	6819      	ldr	r1, [r3, #0]
 80362f2:	7dfa      	ldrb	r2, [r7, #23]
 80362f4:	481f      	ldr	r0, [pc, #124]	; (8036374 <etharp_output+0x20c>)
 80362f6:	4613      	mov	r3, r2
 80362f8:	005b      	lsls	r3, r3, #1
 80362fa:	4413      	add	r3, r2
 80362fc:	00db      	lsls	r3, r3, #3
 80362fe:	4403      	add	r3, r0
 8036300:	3304      	adds	r3, #4
 8036302:	681b      	ldr	r3, [r3, #0]
          (arp_table[i].netif == netif) &&
 8036304:	4299      	cmp	r1, r3
 8036306:	d10a      	bne.n	803631e <etharp_output+0x1b6>
        /* found an existing, stable entry */
        ETHARP_SET_ADDRHINT(netif, i);
 8036308:	4a19      	ldr	r2, [pc, #100]	; (8036370 <etharp_output+0x208>)
 803630a:	7dfb      	ldrb	r3, [r7, #23]
 803630c:	7013      	strb	r3, [r2, #0]
        return etharp_output_to_arp_index(netif, q, i);
 803630e:	7dfb      	ldrb	r3, [r7, #23]
 8036310:	461a      	mov	r2, r3
 8036312:	68b9      	ldr	r1, [r7, #8]
 8036314:	68f8      	ldr	r0, [r7, #12]
 8036316:	f7ff fe8d 	bl	8036034 <etharp_output_to_arp_index>
 803631a:	4603      	mov	r3, r0
 803631c:	e018      	b.n	8036350 <etharp_output+0x1e8>
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 803631e:	7dfb      	ldrb	r3, [r7, #23]
 8036320:	3301      	adds	r3, #1
 8036322:	75fb      	strb	r3, [r7, #23]
 8036324:	7dfb      	ldrb	r3, [r7, #23]
 8036326:	2b09      	cmp	r3, #9
 8036328:	d9ca      	bls.n	80362c0 <etharp_output+0x158>
      }
    }
    /* no stable entry found, use the (slower) query function:
       queue on destination Ethernet address belonging to ipaddr */
    return etharp_query(netif, dst_addr, q);
 803632a:	68ba      	ldr	r2, [r7, #8]
 803632c:	69b9      	ldr	r1, [r7, #24]
 803632e:	68f8      	ldr	r0, [r7, #12]
 8036330:	f000 f824 	bl	803637c <etharp_query>
 8036334:	4603      	mov	r3, r0
 8036336:	e00b      	b.n	8036350 <etharp_output+0x1e8>
  }

  /* continuation for multicast/broadcast destinations */
  /* obtain source Ethernet address of the given interface */
  /* send packet directly on the link */
  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), dest, ETHTYPE_IP);
 8036338:	68fb      	ldr	r3, [r7, #12]
 803633a:	f103 0226 	add.w	r2, r3, #38	; 0x26
 803633e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8036342:	9300      	str	r3, [sp, #0]
 8036344:	69fb      	ldr	r3, [r7, #28]
 8036346:	68b9      	ldr	r1, [r7, #8]
 8036348:	68f8      	ldr	r0, [r7, #12]
 803634a:	f001 fe67 	bl	803801c <ethernet_output>
 803634e:	4603      	mov	r3, r0
}
 8036350:	4618      	mov	r0, r3
 8036352:	3720      	adds	r7, #32
 8036354:	46bd      	mov	sp, r7
 8036356:	bd80      	pop	{r7, pc}
 8036358:	0803cd90 	.word	0x0803cd90
 803635c:	0803cee0 	.word	0x0803cee0
 8036360:	0803ce08 	.word	0x0803ce08
 8036364:	0803cf30 	.word	0x0803cf30
 8036368:	0803ced0 	.word	0x0803ced0
 803636c:	0803d630 	.word	0x0803d630
 8036370:	2000f050 	.word	0x2000f050
 8036374:	2000ef60 	.word	0x2000ef60
 8036378:	2000ee04 	.word	0x2000ee04

0803637c <etharp_query>:
 * - ERR_ARG Non-unicast address given, those will not appear in ARP cache.
 *
 */
err_t
etharp_query(struct netif *netif, const ip4_addr_t *ipaddr, struct pbuf *q)
{
 803637c:	b580      	push	{r7, lr}
 803637e:	b08c      	sub	sp, #48	; 0x30
 8036380:	af02      	add	r7, sp, #8
 8036382:	60f8      	str	r0, [r7, #12]
 8036384:	60b9      	str	r1, [r7, #8]
 8036386:	607a      	str	r2, [r7, #4]
  struct eth_addr *srcaddr = (struct eth_addr *)netif->hwaddr;
 8036388:	68fb      	ldr	r3, [r7, #12]
 803638a:	3326      	adds	r3, #38	; 0x26
 803638c:	617b      	str	r3, [r7, #20]
  err_t result = ERR_MEM;
 803638e:	23ff      	movs	r3, #255	; 0xff
 8036390:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  int is_new_entry = 0;
 8036394:	2300      	movs	r3, #0
 8036396:	623b      	str	r3, [r7, #32]
  s16_t i_err;
  netif_addr_idx_t i;

  /* non-unicast address? */
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 8036398:	68bb      	ldr	r3, [r7, #8]
 803639a:	681b      	ldr	r3, [r3, #0]
 803639c:	68f9      	ldr	r1, [r7, #12]
 803639e:	4618      	mov	r0, r3
 80363a0:	f000 fedc 	bl	803715c <ip4_addr_isbroadcast_u32>
 80363a4:	4603      	mov	r3, r0
 80363a6:	2b00      	cmp	r3, #0
 80363a8:	d10c      	bne.n	80363c4 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 80363aa:	68bb      	ldr	r3, [r7, #8]
 80363ac:	681b      	ldr	r3, [r3, #0]
 80363ae:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 80363b2:	2be0      	cmp	r3, #224	; 0xe0
 80363b4:	d006      	beq.n	80363c4 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 80363b6:	68bb      	ldr	r3, [r7, #8]
 80363b8:	2b00      	cmp	r3, #0
 80363ba:	d003      	beq.n	80363c4 <etharp_query+0x48>
      ip4_addr_isany(ipaddr)) {
 80363bc:	68bb      	ldr	r3, [r7, #8]
 80363be:	681b      	ldr	r3, [r3, #0]
 80363c0:	2b00      	cmp	r3, #0
 80363c2:	d102      	bne.n	80363ca <etharp_query+0x4e>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 80363c4:	f06f 030f 	mvn.w	r3, #15
 80363c8:	e110      	b.n	80365ec <etharp_query+0x270>
  }

  /* find entry in ARP cache, ask to create entry if queueing packet */
  i_err = etharp_find_entry(ipaddr, ETHARP_FLAG_TRY_HARD, netif);
 80363ca:	68fa      	ldr	r2, [r7, #12]
 80363cc:	2101      	movs	r1, #1
 80363ce:	68b8      	ldr	r0, [r7, #8]
 80363d0:	f7ff fb3e 	bl	8035a50 <etharp_find_entry>
 80363d4:	4603      	mov	r3, r0
 80363d6:	827b      	strh	r3, [r7, #18]

  /* could not find or create entry? */
  if (i_err < 0) {
 80363d8:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80363dc:	2b00      	cmp	r3, #0
 80363de:	da0b      	bge.n	80363f8 <etharp_query+0x7c>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not create ARP entry\n"));
    if (q) {
 80363e0:	687b      	ldr	r3, [r7, #4]
 80363e2:	2b00      	cmp	r3, #0
 80363e4:	d005      	beq.n	80363f2 <etharp_query+0x76>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: packet dropped\n"));
      ETHARP_STATS_INC(etharp.memerr);
 80363e6:	4b83      	ldr	r3, [pc, #524]	; (80365f4 <etharp_query+0x278>)
 80363e8:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80363ea:	3301      	adds	r3, #1
 80363ec:	b29a      	uxth	r2, r3
 80363ee:	4b81      	ldr	r3, [pc, #516]	; (80365f4 <etharp_query+0x278>)
 80363f0:	849a      	strh	r2, [r3, #36]	; 0x24
    }
    return (err_t)i_err;
 80363f2:	8a7b      	ldrh	r3, [r7, #18]
 80363f4:	b25b      	sxtb	r3, r3
 80363f6:	e0f9      	b.n	80365ec <etharp_query+0x270>
  }
  LWIP_ASSERT("type overflow", (size_t)i_err < NETIF_ADDR_IDX_MAX);
 80363f8:	8a7b      	ldrh	r3, [r7, #18]
 80363fa:	2b7e      	cmp	r3, #126	; 0x7e
 80363fc:	d906      	bls.n	803640c <etharp_query+0x90>
 80363fe:	4b7e      	ldr	r3, [pc, #504]	; (80365f8 <etharp_query+0x27c>)
 8036400:	f240 32c1 	movw	r2, #961	; 0x3c1
 8036404:	497d      	ldr	r1, [pc, #500]	; (80365fc <etharp_query+0x280>)
 8036406:	487e      	ldr	r0, [pc, #504]	; (8036600 <etharp_query+0x284>)
 8036408:	f002 fe2e 	bl	8039068 <iprintf>
  i = (netif_addr_idx_t)i_err;
 803640c:	8a7b      	ldrh	r3, [r7, #18]
 803640e:	747b      	strb	r3, [r7, #17]

  /* mark a fresh entry as pending (we just sent a request) */
  if (arp_table[i].state == ETHARP_STATE_EMPTY) {
 8036410:	7c7a      	ldrb	r2, [r7, #17]
 8036412:	497c      	ldr	r1, [pc, #496]	; (8036604 <etharp_query+0x288>)
 8036414:	4613      	mov	r3, r2
 8036416:	005b      	lsls	r3, r3, #1
 8036418:	4413      	add	r3, r2
 803641a:	00db      	lsls	r3, r3, #3
 803641c:	440b      	add	r3, r1
 803641e:	3314      	adds	r3, #20
 8036420:	781b      	ldrb	r3, [r3, #0]
 8036422:	2b00      	cmp	r3, #0
 8036424:	d115      	bne.n	8036452 <etharp_query+0xd6>
    is_new_entry = 1;
 8036426:	2301      	movs	r3, #1
 8036428:	623b      	str	r3, [r7, #32]
    arp_table[i].state = ETHARP_STATE_PENDING;
 803642a:	7c7a      	ldrb	r2, [r7, #17]
 803642c:	4975      	ldr	r1, [pc, #468]	; (8036604 <etharp_query+0x288>)
 803642e:	4613      	mov	r3, r2
 8036430:	005b      	lsls	r3, r3, #1
 8036432:	4413      	add	r3, r2
 8036434:	00db      	lsls	r3, r3, #3
 8036436:	440b      	add	r3, r1
 8036438:	3314      	adds	r3, #20
 803643a:	2201      	movs	r2, #1
 803643c:	701a      	strb	r2, [r3, #0]
    /* record network interface for re-sending arp request in etharp_tmr */
    arp_table[i].netif = netif;
 803643e:	7c7a      	ldrb	r2, [r7, #17]
 8036440:	4970      	ldr	r1, [pc, #448]	; (8036604 <etharp_query+0x288>)
 8036442:	4613      	mov	r3, r2
 8036444:	005b      	lsls	r3, r3, #1
 8036446:	4413      	add	r3, r2
 8036448:	00db      	lsls	r3, r3, #3
 803644a:	440b      	add	r3, r1
 803644c:	3308      	adds	r3, #8
 803644e:	68fa      	ldr	r2, [r7, #12]
 8036450:	601a      	str	r2, [r3, #0]
  }

  /* { i is either a STABLE or (new or existing) PENDING entry } */
  LWIP_ASSERT("arp_table[i].state == PENDING or STABLE",
 8036452:	7c7a      	ldrb	r2, [r7, #17]
 8036454:	496b      	ldr	r1, [pc, #428]	; (8036604 <etharp_query+0x288>)
 8036456:	4613      	mov	r3, r2
 8036458:	005b      	lsls	r3, r3, #1
 803645a:	4413      	add	r3, r2
 803645c:	00db      	lsls	r3, r3, #3
 803645e:	440b      	add	r3, r1
 8036460:	3314      	adds	r3, #20
 8036462:	781b      	ldrb	r3, [r3, #0]
 8036464:	2b01      	cmp	r3, #1
 8036466:	d011      	beq.n	803648c <etharp_query+0x110>
 8036468:	7c7a      	ldrb	r2, [r7, #17]
 803646a:	4966      	ldr	r1, [pc, #408]	; (8036604 <etharp_query+0x288>)
 803646c:	4613      	mov	r3, r2
 803646e:	005b      	lsls	r3, r3, #1
 8036470:	4413      	add	r3, r2
 8036472:	00db      	lsls	r3, r3, #3
 8036474:	440b      	add	r3, r1
 8036476:	3314      	adds	r3, #20
 8036478:	781b      	ldrb	r3, [r3, #0]
 803647a:	2b01      	cmp	r3, #1
 803647c:	d806      	bhi.n	803648c <etharp_query+0x110>
 803647e:	4b5e      	ldr	r3, [pc, #376]	; (80365f8 <etharp_query+0x27c>)
 8036480:	f240 32cd 	movw	r2, #973	; 0x3cd
 8036484:	4960      	ldr	r1, [pc, #384]	; (8036608 <etharp_query+0x28c>)
 8036486:	485e      	ldr	r0, [pc, #376]	; (8036600 <etharp_query+0x284>)
 8036488:	f002 fdee 	bl	8039068 <iprintf>
              ((arp_table[i].state == ETHARP_STATE_PENDING) ||
               (arp_table[i].state >= ETHARP_STATE_STABLE)));

  /* do we have a new entry? or an implicit query request? */
  if (is_new_entry || (q == NULL)) {
 803648c:	6a3b      	ldr	r3, [r7, #32]
 803648e:	2b00      	cmp	r3, #0
 8036490:	d102      	bne.n	8036498 <etharp_query+0x11c>
 8036492:	687b      	ldr	r3, [r7, #4]
 8036494:	2b00      	cmp	r3, #0
 8036496:	d10c      	bne.n	80364b2 <etharp_query+0x136>
    /* try to resolve it; send out ARP request */
    result = etharp_request(netif, ipaddr);
 8036498:	68b9      	ldr	r1, [r7, #8]
 803649a:	68f8      	ldr	r0, [r7, #12]
 803649c:	f000 f978 	bl	8036790 <etharp_request>
 80364a0:	4603      	mov	r3, r0
 80364a2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      /* ARP request couldn't be sent */
      /* We don't re-send arp request in etharp_tmr, but we still queue packets,
         since this failure could be temporary, and the next packet calling
         etharp_query again could lead to sending the queued packets. */
    }
    if (q == NULL) {
 80364a6:	687b      	ldr	r3, [r7, #4]
 80364a8:	2b00      	cmp	r3, #0
 80364aa:	d102      	bne.n	80364b2 <etharp_query+0x136>
      return result;
 80364ac:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80364b0:	e09c      	b.n	80365ec <etharp_query+0x270>
    }
  }

  /* packet given? */
  LWIP_ASSERT("q != NULL", q != NULL);
 80364b2:	687b      	ldr	r3, [r7, #4]
 80364b4:	2b00      	cmp	r3, #0
 80364b6:	d106      	bne.n	80364c6 <etharp_query+0x14a>
 80364b8:	4b4f      	ldr	r3, [pc, #316]	; (80365f8 <etharp_query+0x27c>)
 80364ba:	f240 32e1 	movw	r2, #993	; 0x3e1
 80364be:	4953      	ldr	r1, [pc, #332]	; (803660c <etharp_query+0x290>)
 80364c0:	484f      	ldr	r0, [pc, #316]	; (8036600 <etharp_query+0x284>)
 80364c2:	f002 fdd1 	bl	8039068 <iprintf>
  /* stable entry? */
  if (arp_table[i].state >= ETHARP_STATE_STABLE) {
 80364c6:	7c7a      	ldrb	r2, [r7, #17]
 80364c8:	494e      	ldr	r1, [pc, #312]	; (8036604 <etharp_query+0x288>)
 80364ca:	4613      	mov	r3, r2
 80364cc:	005b      	lsls	r3, r3, #1
 80364ce:	4413      	add	r3, r2
 80364d0:	00db      	lsls	r3, r3, #3
 80364d2:	440b      	add	r3, r1
 80364d4:	3314      	adds	r3, #20
 80364d6:	781b      	ldrb	r3, [r3, #0]
 80364d8:	2b01      	cmp	r3, #1
 80364da:	d917      	bls.n	803650c <etharp_query+0x190>
    /* we have a valid IP->Ethernet address mapping */
    ETHARP_SET_ADDRHINT(netif, i);
 80364dc:	4a4c      	ldr	r2, [pc, #304]	; (8036610 <etharp_query+0x294>)
 80364de:	7c7b      	ldrb	r3, [r7, #17]
 80364e0:	7013      	strb	r3, [r2, #0]
    /* send the packet */
    result = ethernet_output(netif, q, srcaddr, &(arp_table[i].ethaddr), ETHTYPE_IP);
 80364e2:	7c7a      	ldrb	r2, [r7, #17]
 80364e4:	4613      	mov	r3, r2
 80364e6:	005b      	lsls	r3, r3, #1
 80364e8:	4413      	add	r3, r2
 80364ea:	00db      	lsls	r3, r3, #3
 80364ec:	3308      	adds	r3, #8
 80364ee:	4a45      	ldr	r2, [pc, #276]	; (8036604 <etharp_query+0x288>)
 80364f0:	4413      	add	r3, r2
 80364f2:	3304      	adds	r3, #4
 80364f4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80364f8:	9200      	str	r2, [sp, #0]
 80364fa:	697a      	ldr	r2, [r7, #20]
 80364fc:	6879      	ldr	r1, [r7, #4]
 80364fe:	68f8      	ldr	r0, [r7, #12]
 8036500:	f001 fd8c 	bl	803801c <ethernet_output>
 8036504:	4603      	mov	r3, r0
 8036506:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 803650a:	e06d      	b.n	80365e8 <etharp_query+0x26c>
    /* pending entry? (either just created or already pending */
  } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 803650c:	7c7a      	ldrb	r2, [r7, #17]
 803650e:	493d      	ldr	r1, [pc, #244]	; (8036604 <etharp_query+0x288>)
 8036510:	4613      	mov	r3, r2
 8036512:	005b      	lsls	r3, r3, #1
 8036514:	4413      	add	r3, r2
 8036516:	00db      	lsls	r3, r3, #3
 8036518:	440b      	add	r3, r1
 803651a:	3314      	adds	r3, #20
 803651c:	781b      	ldrb	r3, [r3, #0]
 803651e:	2b01      	cmp	r3, #1
 8036520:	d162      	bne.n	80365e8 <etharp_query+0x26c>
    /* entry is still pending, queue the given packet 'q' */
    struct pbuf *p;
    int copy_needed = 0;
 8036522:	2300      	movs	r3, #0
 8036524:	61bb      	str	r3, [r7, #24]
    /* IF q includes a pbuf that must be copied, copy the whole chain into a
     * new PBUF_RAM. See the definition of PBUF_NEEDS_COPY for details. */
    p = q;
 8036526:	687b      	ldr	r3, [r7, #4]
 8036528:	61fb      	str	r3, [r7, #28]
    while (p) {
 803652a:	e01c      	b.n	8036566 <etharp_query+0x1ea>
      LWIP_ASSERT("no packet queues allowed!", (p->len != p->tot_len) || (p->next == 0));
 803652c:	69fb      	ldr	r3, [r7, #28]
 803652e:	895a      	ldrh	r2, [r3, #10]
 8036530:	69fb      	ldr	r3, [r7, #28]
 8036532:	891b      	ldrh	r3, [r3, #8]
 8036534:	429a      	cmp	r2, r3
 8036536:	d10a      	bne.n	803654e <etharp_query+0x1d2>
 8036538:	69fb      	ldr	r3, [r7, #28]
 803653a:	681b      	ldr	r3, [r3, #0]
 803653c:	2b00      	cmp	r3, #0
 803653e:	d006      	beq.n	803654e <etharp_query+0x1d2>
 8036540:	4b2d      	ldr	r3, [pc, #180]	; (80365f8 <etharp_query+0x27c>)
 8036542:	f240 32f1 	movw	r2, #1009	; 0x3f1
 8036546:	4933      	ldr	r1, [pc, #204]	; (8036614 <etharp_query+0x298>)
 8036548:	482d      	ldr	r0, [pc, #180]	; (8036600 <etharp_query+0x284>)
 803654a:	f002 fd8d 	bl	8039068 <iprintf>
      if (PBUF_NEEDS_COPY(p)) {
 803654e:	69fb      	ldr	r3, [r7, #28]
 8036550:	7b1b      	ldrb	r3, [r3, #12]
 8036552:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8036556:	2b00      	cmp	r3, #0
 8036558:	d002      	beq.n	8036560 <etharp_query+0x1e4>
        copy_needed = 1;
 803655a:	2301      	movs	r3, #1
 803655c:	61bb      	str	r3, [r7, #24]
        break;
 803655e:	e005      	b.n	803656c <etharp_query+0x1f0>
      }
      p = p->next;
 8036560:	69fb      	ldr	r3, [r7, #28]
 8036562:	681b      	ldr	r3, [r3, #0]
 8036564:	61fb      	str	r3, [r7, #28]
    while (p) {
 8036566:	69fb      	ldr	r3, [r7, #28]
 8036568:	2b00      	cmp	r3, #0
 803656a:	d1df      	bne.n	803652c <etharp_query+0x1b0>
    }
    if (copy_needed) {
 803656c:	69bb      	ldr	r3, [r7, #24]
 803656e:	2b00      	cmp	r3, #0
 8036570:	d007      	beq.n	8036582 <etharp_query+0x206>
      /* copy the whole packet into new pbufs */
      p = pbuf_clone(PBUF_LINK, PBUF_RAM, q);
 8036572:	687a      	ldr	r2, [r7, #4]
 8036574:	f44f 7120 	mov.w	r1, #640	; 0x280
 8036578:	200e      	movs	r0, #14
 803657a:	f7f8 f93f 	bl	802e7fc <pbuf_clone>
 803657e:	61f8      	str	r0, [r7, #28]
 8036580:	e004      	b.n	803658c <etharp_query+0x210>
    } else {
      /* referencing the old pbuf is enough */
      p = q;
 8036582:	687b      	ldr	r3, [r7, #4]
 8036584:	61fb      	str	r3, [r7, #28]
      pbuf_ref(p);
 8036586:	69f8      	ldr	r0, [r7, #28]
 8036588:	f7f7 ff66 	bl	802e458 <pbuf_ref>
    }
    /* packet could be taken over? */
    if (p != NULL) {
 803658c:	69fb      	ldr	r3, [r7, #28]
 803658e:	2b00      	cmp	r3, #0
 8036590:	d021      	beq.n	80365d6 <etharp_query+0x25a>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
        result = ERR_MEM;
      }
#else /* ARP_QUEUEING */
      /* always queue one packet per ARP request only, freeing a previously queued packet */
      if (arp_table[i].q != NULL) {
 8036592:	7c7a      	ldrb	r2, [r7, #17]
 8036594:	491b      	ldr	r1, [pc, #108]	; (8036604 <etharp_query+0x288>)
 8036596:	4613      	mov	r3, r2
 8036598:	005b      	lsls	r3, r3, #1
 803659a:	4413      	add	r3, r2
 803659c:	00db      	lsls	r3, r3, #3
 803659e:	440b      	add	r3, r1
 80365a0:	681b      	ldr	r3, [r3, #0]
 80365a2:	2b00      	cmp	r3, #0
 80365a4:	d00a      	beq.n	80365bc <etharp_query+0x240>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: dropped previously queued packet %p for ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
        pbuf_free(arp_table[i].q);
 80365a6:	7c7a      	ldrb	r2, [r7, #17]
 80365a8:	4916      	ldr	r1, [pc, #88]	; (8036604 <etharp_query+0x288>)
 80365aa:	4613      	mov	r3, r2
 80365ac:	005b      	lsls	r3, r3, #1
 80365ae:	4413      	add	r3, r2
 80365b0:	00db      	lsls	r3, r3, #3
 80365b2:	440b      	add	r3, r1
 80365b4:	681b      	ldr	r3, [r3, #0]
 80365b6:	4618      	mov	r0, r3
 80365b8:	f7f7 fea8 	bl	802e30c <pbuf_free>
      }
      arp_table[i].q = p;
 80365bc:	7c7a      	ldrb	r2, [r7, #17]
 80365be:	4911      	ldr	r1, [pc, #68]	; (8036604 <etharp_query+0x288>)
 80365c0:	4613      	mov	r3, r2
 80365c2:	005b      	lsls	r3, r3, #1
 80365c4:	4413      	add	r3, r2
 80365c6:	00db      	lsls	r3, r3, #3
 80365c8:	440b      	add	r3, r1
 80365ca:	69fa      	ldr	r2, [r7, #28]
 80365cc:	601a      	str	r2, [r3, #0]
      result = ERR_OK;
 80365ce:	2300      	movs	r3, #0
 80365d0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80365d4:	e008      	b.n	80365e8 <etharp_query+0x26c>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: queued packet %p on ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
#endif /* ARP_QUEUEING */
    } else {
      ETHARP_STATS_INC(etharp.memerr);
 80365d6:	4b07      	ldr	r3, [pc, #28]	; (80365f4 <etharp_query+0x278>)
 80365d8:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80365da:	3301      	adds	r3, #1
 80365dc:	b29a      	uxth	r2, r3
 80365de:	4b05      	ldr	r3, [pc, #20]	; (80365f4 <etharp_query+0x278>)
 80365e0:	849a      	strh	r2, [r3, #36]	; 0x24
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
      result = ERR_MEM;
 80365e2:	23ff      	movs	r3, #255	; 0xff
 80365e4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }
  }
  return result;
 80365e8:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 80365ec:	4618      	mov	r0, r3
 80365ee:	3728      	adds	r7, #40	; 0x28
 80365f0:	46bd      	mov	sp, r7
 80365f2:	bd80      	pop	{r7, pc}
 80365f4:	2000ee04 	.word	0x2000ee04
 80365f8:	0803cd90 	.word	0x0803cd90
 80365fc:	0803cf3c 	.word	0x0803cf3c
 8036600:	0803ce08 	.word	0x0803ce08
 8036604:	2000ef60 	.word	0x2000ef60
 8036608:	0803cf4c 	.word	0x0803cf4c
 803660c:	0803cf30 	.word	0x0803cf30
 8036610:	2000f050 	.word	0x2000f050
 8036614:	0803cf74 	.word	0x0803cf74

08036618 <etharp_raw>:
etharp_raw(struct netif *netif, const struct eth_addr *ethsrc_addr,
           const struct eth_addr *ethdst_addr,
           const struct eth_addr *hwsrc_addr, const ip4_addr_t *ipsrc_addr,
           const struct eth_addr *hwdst_addr, const ip4_addr_t *ipdst_addr,
           const u16_t opcode)
{
 8036618:	b580      	push	{r7, lr}
 803661a:	b08a      	sub	sp, #40	; 0x28
 803661c:	af02      	add	r7, sp, #8
 803661e:	60f8      	str	r0, [r7, #12]
 8036620:	60b9      	str	r1, [r7, #8]
 8036622:	607a      	str	r2, [r7, #4]
 8036624:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  err_t result = ERR_OK;
 8036626:	2300      	movs	r3, #0
 8036628:	77fb      	strb	r3, [r7, #31]
  struct etharp_hdr *hdr;

  LWIP_ASSERT("netif != NULL", netif != NULL);
 803662a:	68fb      	ldr	r3, [r7, #12]
 803662c:	2b00      	cmp	r3, #0
 803662e:	d106      	bne.n	803663e <etharp_raw+0x26>
 8036630:	4b40      	ldr	r3, [pc, #256]	; (8036734 <etharp_raw+0x11c>)
 8036632:	f240 4257 	movw	r2, #1111	; 0x457
 8036636:	4940      	ldr	r1, [pc, #256]	; (8036738 <etharp_raw+0x120>)
 8036638:	4840      	ldr	r0, [pc, #256]	; (803673c <etharp_raw+0x124>)
 803663a:	f002 fd15 	bl	8039068 <iprintf>

  /* allocate a pbuf for the outgoing ARP request packet */
  p = pbuf_alloc(PBUF_LINK, SIZEOF_ETHARP_HDR, PBUF_RAM);
 803663e:	f44f 7220 	mov.w	r2, #640	; 0x280
 8036642:	211c      	movs	r1, #28
 8036644:	200e      	movs	r0, #14
 8036646:	f7f7 fb4b 	bl	802dce0 <pbuf_alloc>
 803664a:	61b8      	str	r0, [r7, #24]
  /* could allocate a pbuf for an ARP request? */
  if (p == NULL) {
 803664c:	69bb      	ldr	r3, [r7, #24]
 803664e:	2b00      	cmp	r3, #0
 8036650:	d108      	bne.n	8036664 <etharp_raw+0x4c>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("etharp_raw: could not allocate pbuf for ARP request.\n"));
    ETHARP_STATS_INC(etharp.memerr);
 8036652:	4b3b      	ldr	r3, [pc, #236]	; (8036740 <etharp_raw+0x128>)
 8036654:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8036656:	3301      	adds	r3, #1
 8036658:	b29a      	uxth	r2, r3
 803665a:	4b39      	ldr	r3, [pc, #228]	; (8036740 <etharp_raw+0x128>)
 803665c:	849a      	strh	r2, [r3, #36]	; 0x24
    return ERR_MEM;
 803665e:	f04f 33ff 	mov.w	r3, #4294967295
 8036662:	e063      	b.n	803672c <etharp_raw+0x114>
  }
  LWIP_ASSERT("check that first pbuf can hold struct etharp_hdr",
 8036664:	69bb      	ldr	r3, [r7, #24]
 8036666:	895b      	ldrh	r3, [r3, #10]
 8036668:	2b1b      	cmp	r3, #27
 803666a:	d806      	bhi.n	803667a <etharp_raw+0x62>
 803666c:	4b31      	ldr	r3, [pc, #196]	; (8036734 <etharp_raw+0x11c>)
 803666e:	f240 4262 	movw	r2, #1122	; 0x462
 8036672:	4934      	ldr	r1, [pc, #208]	; (8036744 <etharp_raw+0x12c>)
 8036674:	4831      	ldr	r0, [pc, #196]	; (803673c <etharp_raw+0x124>)
 8036676:	f002 fcf7 	bl	8039068 <iprintf>
              (p->len >= SIZEOF_ETHARP_HDR));

  hdr = (struct etharp_hdr *)p->payload;
 803667a:	69bb      	ldr	r3, [r7, #24]
 803667c:	685b      	ldr	r3, [r3, #4]
 803667e:	617b      	str	r3, [r7, #20]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_raw: sending raw ARP packet.\n"));
  hdr->opcode = lwip_htons(opcode);
 8036680:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8036682:	4618      	mov	r0, r3
 8036684:	f7f6 f94e 	bl	802c924 <lwip_htons>
 8036688:	4603      	mov	r3, r0
 803668a:	461a      	mov	r2, r3
 803668c:	697b      	ldr	r3, [r7, #20]
 803668e:	80da      	strh	r2, [r3, #6]

  LWIP_ASSERT("netif->hwaddr_len must be the same as ETH_HWADDR_LEN for etharp!",
 8036690:	68fb      	ldr	r3, [r7, #12]
 8036692:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8036696:	2b06      	cmp	r3, #6
 8036698:	d006      	beq.n	80366a8 <etharp_raw+0x90>
 803669a:	4b26      	ldr	r3, [pc, #152]	; (8036734 <etharp_raw+0x11c>)
 803669c:	f240 4269 	movw	r2, #1129	; 0x469
 80366a0:	4929      	ldr	r1, [pc, #164]	; (8036748 <etharp_raw+0x130>)
 80366a2:	4826      	ldr	r0, [pc, #152]	; (803673c <etharp_raw+0x124>)
 80366a4:	f002 fce0 	bl	8039068 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));

  /* Write the ARP MAC-Addresses */
  SMEMCPY(&hdr->shwaddr, hwsrc_addr, ETH_HWADDR_LEN);
 80366a8:	697b      	ldr	r3, [r7, #20]
 80366aa:	3308      	adds	r3, #8
 80366ac:	2206      	movs	r2, #6
 80366ae:	6839      	ldr	r1, [r7, #0]
 80366b0:	4618      	mov	r0, r3
 80366b2:	f002 f8df 	bl	8038874 <memcpy>
  SMEMCPY(&hdr->dhwaddr, hwdst_addr, ETH_HWADDR_LEN);
 80366b6:	697b      	ldr	r3, [r7, #20]
 80366b8:	3312      	adds	r3, #18
 80366ba:	2206      	movs	r2, #6
 80366bc:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80366be:	4618      	mov	r0, r3
 80366c0:	f002 f8d8 	bl	8038874 <memcpy>
  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing. */
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->sipaddr, ipsrc_addr);
 80366c4:	697b      	ldr	r3, [r7, #20]
 80366c6:	330e      	adds	r3, #14
 80366c8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80366ca:	6812      	ldr	r2, [r2, #0]
 80366cc:	601a      	str	r2, [r3, #0]
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->dipaddr, ipdst_addr);
 80366ce:	697b      	ldr	r3, [r7, #20]
 80366d0:	3318      	adds	r3, #24
 80366d2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80366d4:	6812      	ldr	r2, [r2, #0]
 80366d6:	601a      	str	r2, [r3, #0]

  hdr->hwtype = PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET);
 80366d8:	697b      	ldr	r3, [r7, #20]
 80366da:	2200      	movs	r2, #0
 80366dc:	701a      	strb	r2, [r3, #0]
 80366de:	2200      	movs	r2, #0
 80366e0:	f042 0201 	orr.w	r2, r2, #1
 80366e4:	705a      	strb	r2, [r3, #1]
  hdr->proto = PP_HTONS(ETHTYPE_IP);
 80366e6:	697b      	ldr	r3, [r7, #20]
 80366e8:	2200      	movs	r2, #0
 80366ea:	f042 0208 	orr.w	r2, r2, #8
 80366ee:	709a      	strb	r2, [r3, #2]
 80366f0:	2200      	movs	r2, #0
 80366f2:	70da      	strb	r2, [r3, #3]
  /* set hwlen and protolen */
  hdr->hwlen = ETH_HWADDR_LEN;
 80366f4:	697b      	ldr	r3, [r7, #20]
 80366f6:	2206      	movs	r2, #6
 80366f8:	711a      	strb	r2, [r3, #4]
  hdr->protolen = sizeof(ip4_addr_t);
 80366fa:	697b      	ldr	r3, [r7, #20]
 80366fc:	2204      	movs	r2, #4
 80366fe:	715a      	strb	r2, [r3, #5]
  if (ip4_addr_islinklocal(ipsrc_addr)) {
    ethernet_output(netif, p, ethsrc_addr, &ethbroadcast, ETHTYPE_ARP);
  } else
#endif /* LWIP_AUTOIP */
  {
    ethernet_output(netif, p, ethsrc_addr, ethdst_addr, ETHTYPE_ARP);
 8036700:	f640 0306 	movw	r3, #2054	; 0x806
 8036704:	9300      	str	r3, [sp, #0]
 8036706:	687b      	ldr	r3, [r7, #4]
 8036708:	68ba      	ldr	r2, [r7, #8]
 803670a:	69b9      	ldr	r1, [r7, #24]
 803670c:	68f8      	ldr	r0, [r7, #12]
 803670e:	f001 fc85 	bl	803801c <ethernet_output>
  }

  ETHARP_STATS_INC(etharp.xmit);
 8036712:	4b0b      	ldr	r3, [pc, #44]	; (8036740 <etharp_raw+0x128>)
 8036714:	8b1b      	ldrh	r3, [r3, #24]
 8036716:	3301      	adds	r3, #1
 8036718:	b29a      	uxth	r2, r3
 803671a:	4b09      	ldr	r3, [pc, #36]	; (8036740 <etharp_raw+0x128>)
 803671c:	831a      	strh	r2, [r3, #24]
  /* free ARP query packet */
  pbuf_free(p);
 803671e:	69b8      	ldr	r0, [r7, #24]
 8036720:	f7f7 fdf4 	bl	802e30c <pbuf_free>
  p = NULL;
 8036724:	2300      	movs	r3, #0
 8036726:	61bb      	str	r3, [r7, #24]
  /* could not allocate pbuf for ARP request */

  return result;
 8036728:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 803672c:	4618      	mov	r0, r3
 803672e:	3720      	adds	r7, #32
 8036730:	46bd      	mov	sp, r7
 8036732:	bd80      	pop	{r7, pc}
 8036734:	0803cd90 	.word	0x0803cd90
 8036738:	0803cee0 	.word	0x0803cee0
 803673c:	0803ce08 	.word	0x0803ce08
 8036740:	2000ee04 	.word	0x2000ee04
 8036744:	0803cf90 	.word	0x0803cf90
 8036748:	0803cfc4 	.word	0x0803cfc4

0803674c <etharp_request_dst>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
static err_t
etharp_request_dst(struct netif *netif, const ip4_addr_t *ipaddr, const struct eth_addr *hw_dst_addr)
{
 803674c:	b580      	push	{r7, lr}
 803674e:	b088      	sub	sp, #32
 8036750:	af04      	add	r7, sp, #16
 8036752:	60f8      	str	r0, [r7, #12]
 8036754:	60b9      	str	r1, [r7, #8]
 8036756:	607a      	str	r2, [r7, #4]
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 8036758:	68fb      	ldr	r3, [r7, #12]
 803675a:	f103 0126 	add.w	r1, r3, #38	; 0x26
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 803675e:	68fb      	ldr	r3, [r7, #12]
 8036760:	f103 0026 	add.w	r0, r3, #38	; 0x26
 8036764:	68fb      	ldr	r3, [r7, #12]
 8036766:	3304      	adds	r3, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 8036768:	2201      	movs	r2, #1
 803676a:	9203      	str	r2, [sp, #12]
 803676c:	68ba      	ldr	r2, [r7, #8]
 803676e:	9202      	str	r2, [sp, #8]
 8036770:	4a06      	ldr	r2, [pc, #24]	; (803678c <etharp_request_dst+0x40>)
 8036772:	9201      	str	r2, [sp, #4]
 8036774:	9300      	str	r3, [sp, #0]
 8036776:	4603      	mov	r3, r0
 8036778:	687a      	ldr	r2, [r7, #4]
 803677a:	68f8      	ldr	r0, [r7, #12]
 803677c:	f7ff ff4c 	bl	8036618 <etharp_raw>
 8036780:	4603      	mov	r3, r0
                    ipaddr, ARP_REQUEST);
}
 8036782:	4618      	mov	r0, r3
 8036784:	3710      	adds	r7, #16
 8036786:	46bd      	mov	sp, r7
 8036788:	bd80      	pop	{r7, pc}
 803678a:	bf00      	nop
 803678c:	0803d638 	.word	0x0803d638

08036790 <etharp_request>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
err_t
etharp_request(struct netif *netif, const ip4_addr_t *ipaddr)
{
 8036790:	b580      	push	{r7, lr}
 8036792:	b082      	sub	sp, #8
 8036794:	af00      	add	r7, sp, #0
 8036796:	6078      	str	r0, [r7, #4]
 8036798:	6039      	str	r1, [r7, #0]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_request: sending ARP request.\n"));
  return etharp_request_dst(netif, ipaddr, &ethbroadcast);
 803679a:	4a05      	ldr	r2, [pc, #20]	; (80367b0 <etharp_request+0x20>)
 803679c:	6839      	ldr	r1, [r7, #0]
 803679e:	6878      	ldr	r0, [r7, #4]
 80367a0:	f7ff ffd4 	bl	803674c <etharp_request_dst>
 80367a4:	4603      	mov	r3, r0
}
 80367a6:	4618      	mov	r0, r3
 80367a8:	3708      	adds	r7, #8
 80367aa:	46bd      	mov	sp, r7
 80367ac:	bd80      	pop	{r7, pc}
 80367ae:	bf00      	nop
 80367b0:	0803d630 	.word	0x0803d630

080367b4 <icmp_input>:
 * @param p the icmp echo request packet, p->payload pointing to the icmp header
 * @param inp the netif on which this packet was received
 */
void
icmp_input(struct pbuf *p, struct netif *inp)
{
 80367b4:	b580      	push	{r7, lr}
 80367b6:	b08e      	sub	sp, #56	; 0x38
 80367b8:	af04      	add	r7, sp, #16
 80367ba:	6078      	str	r0, [r7, #4]
 80367bc:	6039      	str	r1, [r7, #0]
  struct icmp_echo_hdr *iecho;
  const struct ip_hdr *iphdr_in;
  u16_t hlen;
  const ip4_addr_t *src;

  ICMP_STATS_INC(icmp.recv);
 80367be:	4b92      	ldr	r3, [pc, #584]	; (8036a08 <icmp_input+0x254>)
 80367c0:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 80367c4:	3301      	adds	r3, #1
 80367c6:	b29a      	uxth	r2, r3
 80367c8:	4b8f      	ldr	r3, [pc, #572]	; (8036a08 <icmp_input+0x254>)
 80367ca:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  MIB2_STATS_INC(mib2.icmpinmsgs);

  iphdr_in = ip4_current_header();
 80367ce:	4b8f      	ldr	r3, [pc, #572]	; (8036a0c <icmp_input+0x258>)
 80367d0:	689b      	ldr	r3, [r3, #8]
 80367d2:	627b      	str	r3, [r7, #36]	; 0x24
  hlen = IPH_HL_BYTES(iphdr_in);
 80367d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80367d6:	781b      	ldrb	r3, [r3, #0]
 80367d8:	f003 030f 	and.w	r3, r3, #15
 80367dc:	b2db      	uxtb	r3, r3
 80367de:	009b      	lsls	r3, r3, #2
 80367e0:	b2db      	uxtb	r3, r3
 80367e2:	847b      	strh	r3, [r7, #34]	; 0x22
  if (hlen < IP_HLEN) {
 80367e4:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80367e6:	2b13      	cmp	r3, #19
 80367e8:	f240 80e6 	bls.w	80369b8 <icmp_input+0x204>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short IP header (%"S16_F" bytes) received\n", hlen));
    goto lenerr;
  }
  if (p->len < sizeof(u16_t) * 2) {
 80367ec:	687b      	ldr	r3, [r7, #4]
 80367ee:	895b      	ldrh	r3, [r3, #10]
 80367f0:	2b03      	cmp	r3, #3
 80367f2:	f240 80e3 	bls.w	80369bc <icmp_input+0x208>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short ICMP (%"U16_F" bytes) received\n", p->tot_len));
    goto lenerr;
  }

  type = *((u8_t *)p->payload);
 80367f6:	687b      	ldr	r3, [r7, #4]
 80367f8:	685b      	ldr	r3, [r3, #4]
 80367fa:	781b      	ldrb	r3, [r3, #0]
 80367fc:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
#ifdef LWIP_DEBUG
  code = *(((u8_t *)p->payload) + 1);
  /* if debug is enabled but debug statement below is somehow disabled: */
  LWIP_UNUSED_ARG(code);
#endif /* LWIP_DEBUG */
  switch (type) {
 8036800:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8036804:	2b00      	cmp	r3, #0
 8036806:	f000 80d0 	beq.w	80369aa <icmp_input+0x1f6>
 803680a:	2b08      	cmp	r3, #8
 803680c:	f040 80bc 	bne.w	8036988 <icmp_input+0x1d4>
         (as obviously, an echo request has been sent, too). */
      MIB2_STATS_INC(mib2.icmpinechoreps);
      break;
    case ICMP_ECHO:
      MIB2_STATS_INC(mib2.icmpinechos);
      src = ip4_current_dest_addr();
 8036810:	4b7f      	ldr	r3, [pc, #508]	; (8036a10 <icmp_input+0x25c>)
 8036812:	61fb      	str	r3, [r7, #28]
      /* multicast destination address? */
      if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8036814:	4b7d      	ldr	r3, [pc, #500]	; (8036a0c <icmp_input+0x258>)
 8036816:	695b      	ldr	r3, [r3, #20]
 8036818:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 803681c:	2be0      	cmp	r3, #224	; 0xe0
 803681e:	f000 80dc 	beq.w	80369da <icmp_input+0x226>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to multicast pings\n"));
        goto icmperr;
#endif /* LWIP_MULTICAST_PING */
      }
      /* broadcast destination address? */
      if (ip4_addr_isbroadcast(ip4_current_dest_addr(), ip_current_netif())) {
 8036822:	4b7a      	ldr	r3, [pc, #488]	; (8036a0c <icmp_input+0x258>)
 8036824:	695b      	ldr	r3, [r3, #20]
 8036826:	4a79      	ldr	r2, [pc, #484]	; (8036a0c <icmp_input+0x258>)
 8036828:	6812      	ldr	r2, [r2, #0]
 803682a:	4611      	mov	r1, r2
 803682c:	4618      	mov	r0, r3
 803682e:	f000 fc95 	bl	803715c <ip4_addr_isbroadcast_u32>
 8036832:	4603      	mov	r3, r0
 8036834:	2b00      	cmp	r3, #0
 8036836:	f040 80d2 	bne.w	80369de <icmp_input+0x22a>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to broadcast pings\n"));
        goto icmperr;
#endif /* LWIP_BROADCAST_PING */
      }
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ping\n"));
      if (p->tot_len < sizeof(struct icmp_echo_hdr)) {
 803683a:	687b      	ldr	r3, [r7, #4]
 803683c:	891b      	ldrh	r3, [r3, #8]
 803683e:	2b07      	cmp	r3, #7
 8036840:	f240 80be 	bls.w	80369c0 <icmp_input+0x20c>
          return;
        }
      }
#endif
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN
      if (pbuf_add_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 8036844:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8036846:	330e      	adds	r3, #14
 8036848:	4619      	mov	r1, r3
 803684a:	6878      	ldr	r0, [r7, #4]
 803684c:	f7f7 fc96 	bl	802e17c <pbuf_add_header>
 8036850:	4603      	mov	r3, r0
 8036852:	2b00      	cmp	r3, #0
 8036854:	d04b      	beq.n	80368ee <icmp_input+0x13a>
        /* p is not big enough to contain link headers
         * allocate a new one and copy p into it
         */
        struct pbuf *r;
        u16_t alloc_len = (u16_t)(p->tot_len + hlen);
 8036856:	687b      	ldr	r3, [r7, #4]
 8036858:	891a      	ldrh	r2, [r3, #8]
 803685a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 803685c:	4413      	add	r3, r2
 803685e:	837b      	strh	r3, [r7, #26]
        if (alloc_len < p->tot_len) {
 8036860:	687b      	ldr	r3, [r7, #4]
 8036862:	891b      	ldrh	r3, [r3, #8]
 8036864:	8b7a      	ldrh	r2, [r7, #26]
 8036866:	429a      	cmp	r2, r3
 8036868:	f0c0 80bb 	bcc.w	80369e2 <icmp_input+0x22e>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed (tot_len overflow)\n"));
          goto icmperr;
        }
        /* allocate new packet buffer with space for link headers */
        r = pbuf_alloc(PBUF_LINK, alloc_len, PBUF_RAM);
 803686c:	8b7b      	ldrh	r3, [r7, #26]
 803686e:	f44f 7220 	mov.w	r2, #640	; 0x280
 8036872:	4619      	mov	r1, r3
 8036874:	200e      	movs	r0, #14
 8036876:	f7f7 fa33 	bl	802dce0 <pbuf_alloc>
 803687a:	6178      	str	r0, [r7, #20]
        if (r == NULL) {
 803687c:	697b      	ldr	r3, [r7, #20]
 803687e:	2b00      	cmp	r3, #0
 8036880:	f000 80b1 	beq.w	80369e6 <icmp_input+0x232>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed\n"));
          goto icmperr;
        }
        if (r->len < hlen + sizeof(struct icmp_echo_hdr)) {
 8036884:	697b      	ldr	r3, [r7, #20]
 8036886:	895b      	ldrh	r3, [r3, #10]
 8036888:	461a      	mov	r2, r3
 803688a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 803688c:	3308      	adds	r3, #8
 803688e:	429a      	cmp	r2, r3
 8036890:	d203      	bcs.n	803689a <icmp_input+0xe6>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("first pbuf cannot hold the ICMP header"));
          pbuf_free(r);
 8036892:	6978      	ldr	r0, [r7, #20]
 8036894:	f7f7 fd3a 	bl	802e30c <pbuf_free>
          goto icmperr;
 8036898:	e0a6      	b.n	80369e8 <icmp_input+0x234>
        }
        /* copy the ip header */
        MEMCPY(r->payload, iphdr_in, hlen);
 803689a:	697b      	ldr	r3, [r7, #20]
 803689c:	685b      	ldr	r3, [r3, #4]
 803689e:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 80368a0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80368a2:	4618      	mov	r0, r3
 80368a4:	f001 ffe6 	bl	8038874 <memcpy>
        /* switch r->payload back to icmp header (cannot fail) */
        if (pbuf_remove_header(r, hlen)) {
 80368a8:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80368aa:	4619      	mov	r1, r3
 80368ac:	6978      	ldr	r0, [r7, #20]
 80368ae:	f7f7 fc75 	bl	802e19c <pbuf_remove_header>
 80368b2:	4603      	mov	r3, r0
 80368b4:	2b00      	cmp	r3, #0
 80368b6:	d009      	beq.n	80368cc <icmp_input+0x118>
          LWIP_ASSERT("icmp_input: moving r->payload to icmp header failed\n", 0);
 80368b8:	4b56      	ldr	r3, [pc, #344]	; (8036a14 <icmp_input+0x260>)
 80368ba:	22b6      	movs	r2, #182	; 0xb6
 80368bc:	4956      	ldr	r1, [pc, #344]	; (8036a18 <icmp_input+0x264>)
 80368be:	4857      	ldr	r0, [pc, #348]	; (8036a1c <icmp_input+0x268>)
 80368c0:	f002 fbd2 	bl	8039068 <iprintf>
          pbuf_free(r);
 80368c4:	6978      	ldr	r0, [r7, #20]
 80368c6:	f7f7 fd21 	bl	802e30c <pbuf_free>
          goto icmperr;
 80368ca:	e08d      	b.n	80369e8 <icmp_input+0x234>
        }
        /* copy the rest of the packet without ip header */
        if (pbuf_copy(r, p) != ERR_OK) {
 80368cc:	6879      	ldr	r1, [r7, #4]
 80368ce:	6978      	ldr	r0, [r7, #20]
 80368d0:	f7f7 fe50 	bl	802e574 <pbuf_copy>
 80368d4:	4603      	mov	r3, r0
 80368d6:	2b00      	cmp	r3, #0
 80368d8:	d003      	beq.n	80368e2 <icmp_input+0x12e>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("icmp_input: copying to new pbuf failed"));
          pbuf_free(r);
 80368da:	6978      	ldr	r0, [r7, #20]
 80368dc:	f7f7 fd16 	bl	802e30c <pbuf_free>
          goto icmperr;
 80368e0:	e082      	b.n	80369e8 <icmp_input+0x234>
        }
        /* free the original p */
        pbuf_free(p);
 80368e2:	6878      	ldr	r0, [r7, #4]
 80368e4:	f7f7 fd12 	bl	802e30c <pbuf_free>
        /* we now have an identical copy of p that has room for link headers */
        p = r;
 80368e8:	697b      	ldr	r3, [r7, #20]
 80368ea:	607b      	str	r3, [r7, #4]
 80368ec:	e00f      	b.n	803690e <icmp_input+0x15a>
      } else {
        /* restore p->payload to point to icmp header (cannot fail) */
        if (pbuf_remove_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 80368ee:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80368f0:	330e      	adds	r3, #14
 80368f2:	4619      	mov	r1, r3
 80368f4:	6878      	ldr	r0, [r7, #4]
 80368f6:	f7f7 fc51 	bl	802e19c <pbuf_remove_header>
 80368fa:	4603      	mov	r3, r0
 80368fc:	2b00      	cmp	r3, #0
 80368fe:	d006      	beq.n	803690e <icmp_input+0x15a>
          LWIP_ASSERT("icmp_input: restoring original p->payload failed\n", 0);
 8036900:	4b44      	ldr	r3, [pc, #272]	; (8036a14 <icmp_input+0x260>)
 8036902:	22c7      	movs	r2, #199	; 0xc7
 8036904:	4946      	ldr	r1, [pc, #280]	; (8036a20 <icmp_input+0x26c>)
 8036906:	4845      	ldr	r0, [pc, #276]	; (8036a1c <icmp_input+0x268>)
 8036908:	f002 fbae 	bl	8039068 <iprintf>
          goto icmperr;
 803690c:	e06c      	b.n	80369e8 <icmp_input+0x234>
      }
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN */
      /* At this point, all checks are OK. */
      /* We generate an answer by switching the dest and src ip addresses,
       * setting the icmp type to ECHO_RESPONSE and updating the checksum. */
      iecho = (struct icmp_echo_hdr *)p->payload;
 803690e:	687b      	ldr	r3, [r7, #4]
 8036910:	685b      	ldr	r3, [r3, #4]
 8036912:	613b      	str	r3, [r7, #16]
      if (pbuf_add_header(p, hlen)) {
 8036914:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8036916:	4619      	mov	r1, r3
 8036918:	6878      	ldr	r0, [r7, #4]
 803691a:	f7f7 fc2f 	bl	802e17c <pbuf_add_header>
 803691e:	4603      	mov	r3, r0
 8036920:	2b00      	cmp	r3, #0
 8036922:	d144      	bne.n	80369ae <icmp_input+0x1fa>
        LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("Can't move over header in packet"));
      } else {
        err_t ret;
        struct ip_hdr *iphdr = (struct ip_hdr *)p->payload;
 8036924:	687b      	ldr	r3, [r7, #4]
 8036926:	685b      	ldr	r3, [r3, #4]
 8036928:	60fb      	str	r3, [r7, #12]
        ip4_addr_copy(iphdr->src, *src);
 803692a:	69fb      	ldr	r3, [r7, #28]
 803692c:	681a      	ldr	r2, [r3, #0]
 803692e:	68fb      	ldr	r3, [r7, #12]
 8036930:	60da      	str	r2, [r3, #12]
        ip4_addr_copy(iphdr->dest, *ip4_current_src_addr());
 8036932:	4b36      	ldr	r3, [pc, #216]	; (8036a0c <icmp_input+0x258>)
 8036934:	691a      	ldr	r2, [r3, #16]
 8036936:	68fb      	ldr	r3, [r7, #12]
 8036938:	611a      	str	r2, [r3, #16]
        ICMPH_TYPE_SET(iecho, ICMP_ER);
 803693a:	693b      	ldr	r3, [r7, #16]
 803693c:	2200      	movs	r2, #0
 803693e:	701a      	strb	r2, [r3, #0]
        else {
          iecho->chksum = 0;
        }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF */
#else /* CHECKSUM_GEN_ICMP */
        iecho->chksum = 0;
 8036940:	693b      	ldr	r3, [r7, #16]
 8036942:	2200      	movs	r2, #0
 8036944:	709a      	strb	r2, [r3, #2]
 8036946:	2200      	movs	r2, #0
 8036948:	70da      	strb	r2, [r3, #3]
#endif /* CHECKSUM_GEN_ICMP */

        /* Set the correct TTL and recalculate the header checksum. */
        IPH_TTL_SET(iphdr, ICMP_TTL);
 803694a:	68fb      	ldr	r3, [r7, #12]
 803694c:	22ff      	movs	r2, #255	; 0xff
 803694e:	721a      	strb	r2, [r3, #8]
        IPH_CHKSUM_SET(iphdr, 0);
 8036950:	68fb      	ldr	r3, [r7, #12]
 8036952:	2200      	movs	r2, #0
 8036954:	729a      	strb	r2, [r3, #10]
 8036956:	2200      	movs	r2, #0
 8036958:	72da      	strb	r2, [r3, #11]
        IF__NETIF_CHECKSUM_ENABLED(inp, NETIF_CHECKSUM_GEN_IP) {
          IPH_CHKSUM_SET(iphdr, inet_chksum(iphdr, hlen));
        }
#endif /* CHECKSUM_GEN_IP */

        ICMP_STATS_INC(icmp.xmit);
 803695a:	4b2b      	ldr	r3, [pc, #172]	; (8036a08 <icmp_input+0x254>)
 803695c:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8036960:	3301      	adds	r3, #1
 8036962:	b29a      	uxth	r2, r3
 8036964:	4b28      	ldr	r3, [pc, #160]	; (8036a08 <icmp_input+0x254>)
 8036966:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
        MIB2_STATS_INC(mib2.icmpoutmsgs);
        /* increase number of echo replies attempted to send */
        MIB2_STATS_INC(mib2.icmpoutechoreps);

        /* send an ICMP packet */
        ret = ip4_output_if(p, src, LWIP_IP_HDRINCL,
 803696a:	683b      	ldr	r3, [r7, #0]
 803696c:	9302      	str	r3, [sp, #8]
 803696e:	2301      	movs	r3, #1
 8036970:	9301      	str	r3, [sp, #4]
 8036972:	2300      	movs	r3, #0
 8036974:	9300      	str	r3, [sp, #0]
 8036976:	23ff      	movs	r3, #255	; 0xff
 8036978:	2200      	movs	r2, #0
 803697a:	69f9      	ldr	r1, [r7, #28]
 803697c:	6878      	ldr	r0, [r7, #4]
 803697e:	f000 fafb 	bl	8036f78 <ip4_output_if>
 8036982:	4603      	mov	r3, r0
 8036984:	72fb      	strb	r3, [r7, #11]
                            ICMP_TTL, 0, IP_PROTO_ICMP, inp);
        if (ret != ERR_OK) {
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ip_output_if returned an error: %s\n", lwip_strerr(ret)));
        }
      }
      break;
 8036986:	e012      	b.n	80369ae <icmp_input+0x1fa>
      } else if (type == ICMP_AMR) {
        MIB2_STATS_INC(mib2.icmpinaddrmaskreps);
      }
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ICMP type %"S16_F" code %"S16_F" not supported.\n",
                               (s16_t)type, (s16_t)code));
      ICMP_STATS_INC(icmp.proterr);
 8036988:	4b1f      	ldr	r3, [pc, #124]	; (8036a08 <icmp_input+0x254>)
 803698a:	f8b3 3070 	ldrh.w	r3, [r3, #112]	; 0x70
 803698e:	3301      	adds	r3, #1
 8036990:	b29a      	uxth	r2, r3
 8036992:	4b1d      	ldr	r3, [pc, #116]	; (8036a08 <icmp_input+0x254>)
 8036994:	f8a3 2070 	strh.w	r2, [r3, #112]	; 0x70
      ICMP_STATS_INC(icmp.drop);
 8036998:	4b1b      	ldr	r3, [pc, #108]	; (8036a08 <icmp_input+0x254>)
 803699a:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 803699e:	3301      	adds	r3, #1
 80369a0:	b29a      	uxth	r2, r3
 80369a2:	4b19      	ldr	r3, [pc, #100]	; (8036a08 <icmp_input+0x254>)
 80369a4:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
 80369a8:	e002      	b.n	80369b0 <icmp_input+0x1fc>
      break;
 80369aa:	bf00      	nop
 80369ac:	e000      	b.n	80369b0 <icmp_input+0x1fc>
      break;
 80369ae:	bf00      	nop
  }
  pbuf_free(p);
 80369b0:	6878      	ldr	r0, [r7, #4]
 80369b2:	f7f7 fcab 	bl	802e30c <pbuf_free>
  return;
 80369b6:	e023      	b.n	8036a00 <icmp_input+0x24c>
    goto lenerr;
 80369b8:	bf00      	nop
 80369ba:	e002      	b.n	80369c2 <icmp_input+0x20e>
    goto lenerr;
 80369bc:	bf00      	nop
 80369be:	e000      	b.n	80369c2 <icmp_input+0x20e>
        goto lenerr;
 80369c0:	bf00      	nop
lenerr:
  pbuf_free(p);
 80369c2:	6878      	ldr	r0, [r7, #4]
 80369c4:	f7f7 fca2 	bl	802e30c <pbuf_free>
  ICMP_STATS_INC(icmp.lenerr);
 80369c8:	4b0f      	ldr	r3, [pc, #60]	; (8036a08 <icmp_input+0x254>)
 80369ca:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 80369ce:	3301      	adds	r3, #1
 80369d0:	b29a      	uxth	r2, r3
 80369d2:	4b0d      	ldr	r3, [pc, #52]	; (8036a08 <icmp_input+0x254>)
 80369d4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 80369d8:	e012      	b.n	8036a00 <icmp_input+0x24c>
        goto icmperr;
 80369da:	bf00      	nop
 80369dc:	e004      	b.n	80369e8 <icmp_input+0x234>
        goto icmperr;
 80369de:	bf00      	nop
 80369e0:	e002      	b.n	80369e8 <icmp_input+0x234>
          goto icmperr;
 80369e2:	bf00      	nop
 80369e4:	e000      	b.n	80369e8 <icmp_input+0x234>
          goto icmperr;
 80369e6:	bf00      	nop
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING
icmperr:
  pbuf_free(p);
 80369e8:	6878      	ldr	r0, [r7, #4]
 80369ea:	f7f7 fc8f 	bl	802e30c <pbuf_free>
  ICMP_STATS_INC(icmp.err);
 80369ee:	4b06      	ldr	r3, [pc, #24]	; (8036a08 <icmp_input+0x254>)
 80369f0:	f8b3 3074 	ldrh.w	r3, [r3, #116]	; 0x74
 80369f4:	3301      	adds	r3, #1
 80369f6:	b29a      	uxth	r2, r3
 80369f8:	4b03      	ldr	r3, [pc, #12]	; (8036a08 <icmp_input+0x254>)
 80369fa:	f8a3 2074 	strh.w	r2, [r3, #116]	; 0x74
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 80369fe:	bf00      	nop
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING */
}
 8036a00:	3728      	adds	r7, #40	; 0x28
 8036a02:	46bd      	mov	sp, r7
 8036a04:	bd80      	pop	{r7, pc}
 8036a06:	bf00      	nop
 8036a08:	2000ee04 	.word	0x2000ee04
 8036a0c:	2000b320 	.word	0x2000b320
 8036a10:	2000b334 	.word	0x2000b334
 8036a14:	0803d008 	.word	0x0803d008
 8036a18:	0803d040 	.word	0x0803d040
 8036a1c:	0803d078 	.word	0x0803d078
 8036a20:	0803d0a0 	.word	0x0803d0a0

08036a24 <icmp_dest_unreach>:
 *          p->payload pointing to the IP header
 * @param t type of the 'unreachable' packet
 */
void
icmp_dest_unreach(struct pbuf *p, enum icmp_dur_type t)
{
 8036a24:	b580      	push	{r7, lr}
 8036a26:	b082      	sub	sp, #8
 8036a28:	af00      	add	r7, sp, #0
 8036a2a:	6078      	str	r0, [r7, #4]
 8036a2c:	460b      	mov	r3, r1
 8036a2e:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpoutdestunreachs);
  icmp_send_response(p, ICMP_DUR, t);
 8036a30:	78fb      	ldrb	r3, [r7, #3]
 8036a32:	461a      	mov	r2, r3
 8036a34:	2103      	movs	r1, #3
 8036a36:	6878      	ldr	r0, [r7, #4]
 8036a38:	f000 f814 	bl	8036a64 <icmp_send_response>
}
 8036a3c:	bf00      	nop
 8036a3e:	3708      	adds	r7, #8
 8036a40:	46bd      	mov	sp, r7
 8036a42:	bd80      	pop	{r7, pc}

08036a44 <icmp_time_exceeded>:
 *          p->payload pointing to the IP header
 * @param t type of the 'time exceeded' packet
 */
void
icmp_time_exceeded(struct pbuf *p, enum icmp_te_type t)
{
 8036a44:	b580      	push	{r7, lr}
 8036a46:	b082      	sub	sp, #8
 8036a48:	af00      	add	r7, sp, #0
 8036a4a:	6078      	str	r0, [r7, #4]
 8036a4c:	460b      	mov	r3, r1
 8036a4e:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpouttimeexcds);
  icmp_send_response(p, ICMP_TE, t);
 8036a50:	78fb      	ldrb	r3, [r7, #3]
 8036a52:	461a      	mov	r2, r3
 8036a54:	210b      	movs	r1, #11
 8036a56:	6878      	ldr	r0, [r7, #4]
 8036a58:	f000 f804 	bl	8036a64 <icmp_send_response>
}
 8036a5c:	bf00      	nop
 8036a5e:	3708      	adds	r7, #8
 8036a60:	46bd      	mov	sp, r7
 8036a62:	bd80      	pop	{r7, pc}

08036a64 <icmp_send_response>:
 * @param type Type of the ICMP header
 * @param code Code of the ICMP header
 */
static void
icmp_send_response(struct pbuf *p, u8_t type, u8_t code)
{
 8036a64:	b580      	push	{r7, lr}
 8036a66:	b08c      	sub	sp, #48	; 0x30
 8036a68:	af04      	add	r7, sp, #16
 8036a6a:	6078      	str	r0, [r7, #4]
 8036a6c:	460b      	mov	r3, r1
 8036a6e:	70fb      	strb	r3, [r7, #3]
 8036a70:	4613      	mov	r3, r2
 8036a72:	70bb      	strb	r3, [r7, #2]

  /* increase number of messages attempted to send */
  MIB2_STATS_INC(mib2.icmpoutmsgs);

  /* ICMP header + IP header + 8 bytes of data */
  q = pbuf_alloc(PBUF_IP, sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE,
 8036a74:	f44f 7220 	mov.w	r2, #640	; 0x280
 8036a78:	2124      	movs	r1, #36	; 0x24
 8036a7a:	2022      	movs	r0, #34	; 0x22
 8036a7c:	f7f7 f930 	bl	802dce0 <pbuf_alloc>
 8036a80:	61f8      	str	r0, [r7, #28]
                 PBUF_RAM);
  if (q == NULL) {
 8036a82:	69fb      	ldr	r3, [r7, #28]
 8036a84:	2b00      	cmp	r3, #0
 8036a86:	d054      	beq.n	8036b32 <icmp_send_response+0xce>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_time_exceeded: failed to allocate pbuf for ICMP packet.\n"));
    MIB2_STATS_INC(mib2.icmpouterrors);
    return;
  }
  LWIP_ASSERT("check that first pbuf can hold icmp message",
 8036a88:	69fb      	ldr	r3, [r7, #28]
 8036a8a:	895b      	ldrh	r3, [r3, #10]
 8036a8c:	2b23      	cmp	r3, #35	; 0x23
 8036a8e:	d806      	bhi.n	8036a9e <icmp_send_response+0x3a>
 8036a90:	4b2a      	ldr	r3, [pc, #168]	; (8036b3c <icmp_send_response+0xd8>)
 8036a92:	f44f 72b4 	mov.w	r2, #360	; 0x168
 8036a96:	492a      	ldr	r1, [pc, #168]	; (8036b40 <icmp_send_response+0xdc>)
 8036a98:	482a      	ldr	r0, [pc, #168]	; (8036b44 <icmp_send_response+0xe0>)
 8036a9a:	f002 fae5 	bl	8039068 <iprintf>
              (q->len >= (sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE)));

  iphdr = (struct ip_hdr *)p->payload;
 8036a9e:	687b      	ldr	r3, [r7, #4]
 8036aa0:	685b      	ldr	r3, [r3, #4]
 8036aa2:	61bb      	str	r3, [r7, #24]
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->src);
  LWIP_DEBUGF(ICMP_DEBUG, (" to "));
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->dest);
  LWIP_DEBUGF(ICMP_DEBUG, ("\n"));

  icmphdr = (struct icmp_echo_hdr *)q->payload;
 8036aa4:	69fb      	ldr	r3, [r7, #28]
 8036aa6:	685b      	ldr	r3, [r3, #4]
 8036aa8:	617b      	str	r3, [r7, #20]
  icmphdr->type = type;
 8036aaa:	697b      	ldr	r3, [r7, #20]
 8036aac:	78fa      	ldrb	r2, [r7, #3]
 8036aae:	701a      	strb	r2, [r3, #0]
  icmphdr->code = code;
 8036ab0:	697b      	ldr	r3, [r7, #20]
 8036ab2:	78ba      	ldrb	r2, [r7, #2]
 8036ab4:	705a      	strb	r2, [r3, #1]
  icmphdr->id = 0;
 8036ab6:	697b      	ldr	r3, [r7, #20]
 8036ab8:	2200      	movs	r2, #0
 8036aba:	711a      	strb	r2, [r3, #4]
 8036abc:	2200      	movs	r2, #0
 8036abe:	715a      	strb	r2, [r3, #5]
  icmphdr->seqno = 0;
 8036ac0:	697b      	ldr	r3, [r7, #20]
 8036ac2:	2200      	movs	r2, #0
 8036ac4:	719a      	strb	r2, [r3, #6]
 8036ac6:	2200      	movs	r2, #0
 8036ac8:	71da      	strb	r2, [r3, #7]

  /* copy fields from original packet */
  SMEMCPY((u8_t *)q->payload + sizeof(struct icmp_echo_hdr), (u8_t *)p->payload,
 8036aca:	69fb      	ldr	r3, [r7, #28]
 8036acc:	685b      	ldr	r3, [r3, #4]
 8036ace:	f103 0008 	add.w	r0, r3, #8
 8036ad2:	687b      	ldr	r3, [r7, #4]
 8036ad4:	685b      	ldr	r3, [r3, #4]
 8036ad6:	221c      	movs	r2, #28
 8036ad8:	4619      	mov	r1, r3
 8036ada:	f001 fecb 	bl	8038874 <memcpy>
          IP_HLEN + ICMP_DEST_UNREACH_DATASIZE);

  ip4_addr_copy(iphdr_src, iphdr->src);
 8036ade:	69bb      	ldr	r3, [r7, #24]
 8036ae0:	68db      	ldr	r3, [r3, #12]
 8036ae2:	60fb      	str	r3, [r7, #12]
    ip4_addr_t iphdr_dst;
    ip4_addr_copy(iphdr_dst, iphdr->dest);
    netif = ip4_route_src(&iphdr_dst, &iphdr_src);
  }
#else
  netif = ip4_route(&iphdr_src);
 8036ae4:	f107 030c 	add.w	r3, r7, #12
 8036ae8:	4618      	mov	r0, r3
 8036aea:	f000 f82f 	bl	8036b4c <ip4_route>
 8036aee:	6138      	str	r0, [r7, #16]
#endif
  if (netif != NULL) {
 8036af0:	693b      	ldr	r3, [r7, #16]
 8036af2:	2b00      	cmp	r3, #0
 8036af4:	d019      	beq.n	8036b2a <icmp_send_response+0xc6>
    /* calculate checksum */
    icmphdr->chksum = 0;
 8036af6:	697b      	ldr	r3, [r7, #20]
 8036af8:	2200      	movs	r2, #0
 8036afa:	709a      	strb	r2, [r3, #2]
 8036afc:	2200      	movs	r2, #0
 8036afe:	70da      	strb	r2, [r3, #3]
#if CHECKSUM_GEN_ICMP
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_ICMP) {
      icmphdr->chksum = inet_chksum(icmphdr, q->len);
    }
#endif
    ICMP_STATS_INC(icmp.xmit);
 8036b00:	4b11      	ldr	r3, [pc, #68]	; (8036b48 <icmp_send_response+0xe4>)
 8036b02:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8036b06:	3301      	adds	r3, #1
 8036b08:	b29a      	uxth	r2, r3
 8036b0a:	4b0f      	ldr	r3, [pc, #60]	; (8036b48 <icmp_send_response+0xe4>)
 8036b0c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
    ip4_output_if(q, NULL, &iphdr_src, ICMP_TTL, 0, IP_PROTO_ICMP, netif);
 8036b10:	f107 020c 	add.w	r2, r7, #12
 8036b14:	693b      	ldr	r3, [r7, #16]
 8036b16:	9302      	str	r3, [sp, #8]
 8036b18:	2301      	movs	r3, #1
 8036b1a:	9301      	str	r3, [sp, #4]
 8036b1c:	2300      	movs	r3, #0
 8036b1e:	9300      	str	r3, [sp, #0]
 8036b20:	23ff      	movs	r3, #255	; 0xff
 8036b22:	2100      	movs	r1, #0
 8036b24:	69f8      	ldr	r0, [r7, #28]
 8036b26:	f000 fa27 	bl	8036f78 <ip4_output_if>
  }
  pbuf_free(q);
 8036b2a:	69f8      	ldr	r0, [r7, #28]
 8036b2c:	f7f7 fbee 	bl	802e30c <pbuf_free>
 8036b30:	e000      	b.n	8036b34 <icmp_send_response+0xd0>
    return;
 8036b32:	bf00      	nop
}
 8036b34:	3720      	adds	r7, #32
 8036b36:	46bd      	mov	sp, r7
 8036b38:	bd80      	pop	{r7, pc}
 8036b3a:	bf00      	nop
 8036b3c:	0803d008 	.word	0x0803d008
 8036b40:	0803d0d4 	.word	0x0803d0d4
 8036b44:	0803d078 	.word	0x0803d078
 8036b48:	2000ee04 	.word	0x2000ee04

08036b4c <ip4_route>:
 * @param dest the destination IP address for which to find the route
 * @return the netif on which to send to reach dest
 */
struct netif *
ip4_route(const ip4_addr_t *dest)
{
 8036b4c:	b480      	push	{r7}
 8036b4e:	b085      	sub	sp, #20
 8036b50:	af00      	add	r7, sp, #0
 8036b52:	6078      	str	r0, [r7, #4]

  /* bug #54569: in case LWIP_SINGLE_NETIF=1 and LWIP_DEBUGF() disabled, the following loop is optimized away */
  LWIP_UNUSED_ARG(dest);

  /* iterate through netifs */
  NETIF_FOREACH(netif) {
 8036b54:	4b37      	ldr	r3, [pc, #220]	; (8036c34 <ip4_route+0xe8>)
 8036b56:	681b      	ldr	r3, [r3, #0]
 8036b58:	60fb      	str	r3, [r7, #12]
 8036b5a:	e036      	b.n	8036bca <ip4_route+0x7e>
    /* is the netif up, does it have a link and a valid address? */
    if (netif_is_up(netif) && netif_is_link_up(netif) && !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 8036b5c:	68fb      	ldr	r3, [r7, #12]
 8036b5e:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8036b62:	f003 0301 	and.w	r3, r3, #1
 8036b66:	b2db      	uxtb	r3, r3
 8036b68:	2b00      	cmp	r3, #0
 8036b6a:	d02b      	beq.n	8036bc4 <ip4_route+0x78>
 8036b6c:	68fb      	ldr	r3, [r7, #12]
 8036b6e:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8036b72:	089b      	lsrs	r3, r3, #2
 8036b74:	f003 0301 	and.w	r3, r3, #1
 8036b78:	b2db      	uxtb	r3, r3
 8036b7a:	2b00      	cmp	r3, #0
 8036b7c:	d022      	beq.n	8036bc4 <ip4_route+0x78>
 8036b7e:	68fb      	ldr	r3, [r7, #12]
 8036b80:	3304      	adds	r3, #4
 8036b82:	681b      	ldr	r3, [r3, #0]
 8036b84:	2b00      	cmp	r3, #0
 8036b86:	d01d      	beq.n	8036bc4 <ip4_route+0x78>
      /* network mask matches? */
      if (ip4_addr_netcmp(dest, netif_ip4_addr(netif), netif_ip4_netmask(netif))) {
 8036b88:	687b      	ldr	r3, [r7, #4]
 8036b8a:	681a      	ldr	r2, [r3, #0]
 8036b8c:	68fb      	ldr	r3, [r7, #12]
 8036b8e:	3304      	adds	r3, #4
 8036b90:	681b      	ldr	r3, [r3, #0]
 8036b92:	405a      	eors	r2, r3
 8036b94:	68fb      	ldr	r3, [r7, #12]
 8036b96:	3308      	adds	r3, #8
 8036b98:	681b      	ldr	r3, [r3, #0]
 8036b9a:	4013      	ands	r3, r2
 8036b9c:	2b00      	cmp	r3, #0
 8036b9e:	d101      	bne.n	8036ba4 <ip4_route+0x58>
        /* return netif on which to forward IP packet */
        return netif;
 8036ba0:	68fb      	ldr	r3, [r7, #12]
 8036ba2:	e040      	b.n	8036c26 <ip4_route+0xda>
      }
      /* gateway matches on a non broadcast interface? (i.e. peer in a point to point interface) */
      if (((netif->flags & NETIF_FLAG_BROADCAST) == 0) && ip4_addr_cmp(dest, netif_ip4_gw(netif))) {
 8036ba4:	68fb      	ldr	r3, [r7, #12]
 8036ba6:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8036baa:	f003 0302 	and.w	r3, r3, #2
 8036bae:	2b00      	cmp	r3, #0
 8036bb0:	d108      	bne.n	8036bc4 <ip4_route+0x78>
 8036bb2:	687b      	ldr	r3, [r7, #4]
 8036bb4:	681a      	ldr	r2, [r3, #0]
 8036bb6:	68fb      	ldr	r3, [r7, #12]
 8036bb8:	330c      	adds	r3, #12
 8036bba:	681b      	ldr	r3, [r3, #0]
 8036bbc:	429a      	cmp	r2, r3
 8036bbe:	d101      	bne.n	8036bc4 <ip4_route+0x78>
        /* return netif on which to forward IP packet */
        return netif;
 8036bc0:	68fb      	ldr	r3, [r7, #12]
 8036bc2:	e030      	b.n	8036c26 <ip4_route+0xda>
  NETIF_FOREACH(netif) {
 8036bc4:	68fb      	ldr	r3, [r7, #12]
 8036bc6:	681b      	ldr	r3, [r3, #0]
 8036bc8:	60fb      	str	r3, [r7, #12]
 8036bca:	68fb      	ldr	r3, [r7, #12]
 8036bcc:	2b00      	cmp	r3, #0
 8036bce:	d1c5      	bne.n	8036b5c <ip4_route+0x10>
    return netif;
  }
#endif
#endif /* !LWIP_SINGLE_NETIF */

  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 8036bd0:	4b19      	ldr	r3, [pc, #100]	; (8036c38 <ip4_route+0xec>)
 8036bd2:	681b      	ldr	r3, [r3, #0]
 8036bd4:	2b00      	cmp	r3, #0
 8036bd6:	d01a      	beq.n	8036c0e <ip4_route+0xc2>
 8036bd8:	4b17      	ldr	r3, [pc, #92]	; (8036c38 <ip4_route+0xec>)
 8036bda:	681b      	ldr	r3, [r3, #0]
 8036bdc:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8036be0:	f003 0301 	and.w	r3, r3, #1
 8036be4:	2b00      	cmp	r3, #0
 8036be6:	d012      	beq.n	8036c0e <ip4_route+0xc2>
 8036be8:	4b13      	ldr	r3, [pc, #76]	; (8036c38 <ip4_route+0xec>)
 8036bea:	681b      	ldr	r3, [r3, #0]
 8036bec:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8036bf0:	f003 0304 	and.w	r3, r3, #4
 8036bf4:	2b00      	cmp	r3, #0
 8036bf6:	d00a      	beq.n	8036c0e <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 8036bf8:	4b0f      	ldr	r3, [pc, #60]	; (8036c38 <ip4_route+0xec>)
 8036bfa:	681b      	ldr	r3, [r3, #0]
 8036bfc:	3304      	adds	r3, #4
 8036bfe:	681b      	ldr	r3, [r3, #0]
  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 8036c00:	2b00      	cmp	r3, #0
 8036c02:	d004      	beq.n	8036c0e <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 8036c04:	687b      	ldr	r3, [r7, #4]
 8036c06:	681b      	ldr	r3, [r3, #0]
 8036c08:	b2db      	uxtb	r3, r3
 8036c0a:	2b7f      	cmp	r3, #127	; 0x7f
 8036c0c:	d109      	bne.n	8036c22 <ip4_route+0xd6>
    /* No matching netif found and default netif is not usable.
       If this is not good enough for you, use LWIP_HOOK_IP4_ROUTE() */
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_route: No route to %"U16_F".%"U16_F".%"U16_F".%"U16_F"\n",
                ip4_addr1_16(dest), ip4_addr2_16(dest), ip4_addr3_16(dest), ip4_addr4_16(dest)));
    IP_STATS_INC(ip.rterr);
 8036c0e:	4b0b      	ldr	r3, [pc, #44]	; (8036c3c <ip4_route+0xf0>)
 8036c10:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8036c14:	3301      	adds	r3, #1
 8036c16:	b29a      	uxth	r2, r3
 8036c18:	4b08      	ldr	r3, [pc, #32]	; (8036c3c <ip4_route+0xf0>)
 8036c1a:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    MIB2_STATS_INC(mib2.ipoutnoroutes);
    return NULL;
 8036c1e:	2300      	movs	r3, #0
 8036c20:	e001      	b.n	8036c26 <ip4_route+0xda>
  }

  return netif_default;
 8036c22:	4b05      	ldr	r3, [pc, #20]	; (8036c38 <ip4_route+0xec>)
 8036c24:	681b      	ldr	r3, [r3, #0]
}
 8036c26:	4618      	mov	r0, r3
 8036c28:	3714      	adds	r7, #20
 8036c2a:	46bd      	mov	sp, r7
 8036c2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8036c30:	4770      	bx	lr
 8036c32:	bf00      	nop
 8036c34:	2000edf8 	.word	0x2000edf8
 8036c38:	2000edfc 	.word	0x2000edfc
 8036c3c:	2000ee04 	.word	0x2000ee04

08036c40 <ip4_input_accept>:
#endif /* IP_FORWARD */

/** Return true if the current input packet should be accepted on this netif */
static int
ip4_input_accept(struct netif *netif)
{
 8036c40:	b580      	push	{r7, lr}
 8036c42:	b082      	sub	sp, #8
 8036c44:	af00      	add	r7, sp, #0
 8036c46:	6078      	str	r0, [r7, #4]
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(netif_ip4_addr(netif)) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ~ip4_addr_get_u32(netif_ip4_netmask(netif))));

  /* interface is up and configured? */
  if ((netif_is_up(netif)) && (!ip4_addr_isany_val(*netif_ip4_addr(netif)))) {
 8036c48:	687b      	ldr	r3, [r7, #4]
 8036c4a:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8036c4e:	f003 0301 	and.w	r3, r3, #1
 8036c52:	b2db      	uxtb	r3, r3
 8036c54:	2b00      	cmp	r3, #0
 8036c56:	d016      	beq.n	8036c86 <ip4_input_accept+0x46>
 8036c58:	687b      	ldr	r3, [r7, #4]
 8036c5a:	3304      	adds	r3, #4
 8036c5c:	681b      	ldr	r3, [r3, #0]
 8036c5e:	2b00      	cmp	r3, #0
 8036c60:	d011      	beq.n	8036c86 <ip4_input_accept+0x46>
    /* unicast to this interface address? */
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 8036c62:	4b0b      	ldr	r3, [pc, #44]	; (8036c90 <ip4_input_accept+0x50>)
 8036c64:	695a      	ldr	r2, [r3, #20]
 8036c66:	687b      	ldr	r3, [r7, #4]
 8036c68:	3304      	adds	r3, #4
 8036c6a:	681b      	ldr	r3, [r3, #0]
 8036c6c:	429a      	cmp	r2, r3
 8036c6e:	d008      	beq.n	8036c82 <ip4_input_accept+0x42>
        /* or broadcast on this interface network address? */
        ip4_addr_isbroadcast(ip4_current_dest_addr(), netif)
 8036c70:	4b07      	ldr	r3, [pc, #28]	; (8036c90 <ip4_input_accept+0x50>)
 8036c72:	695b      	ldr	r3, [r3, #20]
 8036c74:	6879      	ldr	r1, [r7, #4]
 8036c76:	4618      	mov	r0, r3
 8036c78:	f000 fa70 	bl	803715c <ip4_addr_isbroadcast_u32>
 8036c7c:	4603      	mov	r3, r0
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 8036c7e:	2b00      	cmp	r3, #0
 8036c80:	d001      	beq.n	8036c86 <ip4_input_accept+0x46>
#endif /* LWIP_NETIF_LOOPBACK && !LWIP_HAVE_LOOPIF */
       ) {
      LWIP_DEBUGF(IP_DEBUG, ("ip4_input: packet accepted on interface %c%c\n",
                             netif->name[0], netif->name[1]));
      /* accept on this netif */
      return 1;
 8036c82:	2301      	movs	r3, #1
 8036c84:	e000      	b.n	8036c88 <ip4_input_accept+0x48>
      /* accept on this netif */
      return 1;
    }
#endif /* LWIP_AUTOIP */
  }
  return 0;
 8036c86:	2300      	movs	r3, #0
}
 8036c88:	4618      	mov	r0, r3
 8036c8a:	3708      	adds	r7, #8
 8036c8c:	46bd      	mov	sp, r7
 8036c8e:	bd80      	pop	{r7, pc}
 8036c90:	2000b320 	.word	0x2000b320

08036c94 <ip4_input>:
 * @return ERR_OK if the packet was processed (could return ERR_* if it wasn't
 *         processed, but currently always returns ERR_OK)
 */
err_t
ip4_input(struct pbuf *p, struct netif *inp)
{
 8036c94:	b580      	push	{r7, lr}
 8036c96:	b086      	sub	sp, #24
 8036c98:	af00      	add	r7, sp, #0
 8036c9a:	6078      	str	r0, [r7, #4]
 8036c9c:	6039      	str	r1, [r7, #0]
  raw_input_state_t raw_status;
#endif /* LWIP_RAW */

  LWIP_ASSERT_CORE_LOCKED();

  IP_STATS_INC(ip.recv);
 8036c9e:	4b8f      	ldr	r3, [pc, #572]	; (8036edc <ip4_input+0x248>)
 8036ca0:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 8036ca4:	3301      	adds	r3, #1
 8036ca6:	b29a      	uxth	r2, r3
 8036ca8:	4b8c      	ldr	r3, [pc, #560]	; (8036edc <ip4_input+0x248>)
 8036caa:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
  MIB2_STATS_INC(mib2.ipinreceives);

  /* identify the IP header */
  iphdr = (struct ip_hdr *)p->payload;
 8036cae:	687b      	ldr	r3, [r7, #4]
 8036cb0:	685b      	ldr	r3, [r3, #4]
 8036cb2:	617b      	str	r3, [r7, #20]
  if (IPH_V(iphdr) != 4) {
 8036cb4:	697b      	ldr	r3, [r7, #20]
 8036cb6:	781b      	ldrb	r3, [r3, #0]
 8036cb8:	091b      	lsrs	r3, r3, #4
 8036cba:	b2db      	uxtb	r3, r3
 8036cbc:	2b04      	cmp	r3, #4
 8036cbe:	d014      	beq.n	8036cea <ip4_input+0x56>
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_WARNING, ("IP packet dropped due to bad version number %"U16_F"\n", (u16_t)IPH_V(iphdr)));
    ip4_debug_print(p);
    pbuf_free(p);
 8036cc0:	6878      	ldr	r0, [r7, #4]
 8036cc2:	f7f7 fb23 	bl	802e30c <pbuf_free>
    IP_STATS_INC(ip.err);
 8036cc6:	4b85      	ldr	r3, [pc, #532]	; (8036edc <ip4_input+0x248>)
 8036cc8:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8036ccc:	3301      	adds	r3, #1
 8036cce:	b29a      	uxth	r2, r3
 8036cd0:	4b82      	ldr	r3, [pc, #520]	; (8036edc <ip4_input+0x248>)
 8036cd2:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    IP_STATS_INC(ip.drop);
 8036cd6:	4b81      	ldr	r3, [pc, #516]	; (8036edc <ip4_input+0x248>)
 8036cd8:	f8b3 304e 	ldrh.w	r3, [r3, #78]	; 0x4e
 8036cdc:	3301      	adds	r3, #1
 8036cde:	b29a      	uxth	r2, r3
 8036ce0:	4b7e      	ldr	r3, [pc, #504]	; (8036edc <ip4_input+0x248>)
 8036ce2:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
    MIB2_STATS_INC(mib2.ipinhdrerrors);
    return ERR_OK;
 8036ce6:	2300      	movs	r3, #0
 8036ce8:	e13e      	b.n	8036f68 <ip4_input+0x2d4>
    return ERR_OK;
  }
#endif

  /* obtain IP header length in bytes */
  iphdr_hlen = IPH_HL_BYTES(iphdr);
 8036cea:	697b      	ldr	r3, [r7, #20]
 8036cec:	781b      	ldrb	r3, [r3, #0]
 8036cee:	f003 030f 	and.w	r3, r3, #15
 8036cf2:	b2db      	uxtb	r3, r3
 8036cf4:	009b      	lsls	r3, r3, #2
 8036cf6:	b2db      	uxtb	r3, r3
 8036cf8:	81fb      	strh	r3, [r7, #14]
  /* obtain ip length in bytes */
  iphdr_len = lwip_ntohs(IPH_LEN(iphdr));
 8036cfa:	697b      	ldr	r3, [r7, #20]
 8036cfc:	885b      	ldrh	r3, [r3, #2]
 8036cfe:	b29b      	uxth	r3, r3
 8036d00:	4618      	mov	r0, r3
 8036d02:	f7f5 fe0f 	bl	802c924 <lwip_htons>
 8036d06:	4603      	mov	r3, r0
 8036d08:	81bb      	strh	r3, [r7, #12]

  /* Trim pbuf. This is especially required for packets < 60 bytes. */
  if (iphdr_len < p->tot_len) {
 8036d0a:	687b      	ldr	r3, [r7, #4]
 8036d0c:	891b      	ldrh	r3, [r3, #8]
 8036d0e:	89ba      	ldrh	r2, [r7, #12]
 8036d10:	429a      	cmp	r2, r3
 8036d12:	d204      	bcs.n	8036d1e <ip4_input+0x8a>
    pbuf_realloc(p, iphdr_len);
 8036d14:	89bb      	ldrh	r3, [r7, #12]
 8036d16:	4619      	mov	r1, r3
 8036d18:	6878      	ldr	r0, [r7, #4]
 8036d1a:	f7f7 f93f 	bl	802df9c <pbuf_realloc>
  }

  /* header length exceeds first pbuf length, or ip length exceeds total pbuf length? */
  if ((iphdr_hlen > p->len) || (iphdr_len > p->tot_len) || (iphdr_hlen < IP_HLEN)) {
 8036d1e:	687b      	ldr	r3, [r7, #4]
 8036d20:	895b      	ldrh	r3, [r3, #10]
 8036d22:	89fa      	ldrh	r2, [r7, #14]
 8036d24:	429a      	cmp	r2, r3
 8036d26:	d807      	bhi.n	8036d38 <ip4_input+0xa4>
 8036d28:	687b      	ldr	r3, [r7, #4]
 8036d2a:	891b      	ldrh	r3, [r3, #8]
 8036d2c:	89ba      	ldrh	r2, [r7, #12]
 8036d2e:	429a      	cmp	r2, r3
 8036d30:	d802      	bhi.n	8036d38 <ip4_input+0xa4>
 8036d32:	89fb      	ldrh	r3, [r7, #14]
 8036d34:	2b13      	cmp	r3, #19
 8036d36:	d814      	bhi.n	8036d62 <ip4_input+0xce>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                  ("IP (len %"U16_F") is longer than pbuf (len %"U16_F"), IP packet dropped.\n",
                   iphdr_len, p->tot_len));
    }
    /* free (drop) packet pbufs */
    pbuf_free(p);
 8036d38:	6878      	ldr	r0, [r7, #4]
 8036d3a:	f7f7 fae7 	bl	802e30c <pbuf_free>
    IP_STATS_INC(ip.lenerr);
 8036d3e:	4b67      	ldr	r3, [pc, #412]	; (8036edc <ip4_input+0x248>)
 8036d40:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8036d44:	3301      	adds	r3, #1
 8036d46:	b29a      	uxth	r2, r3
 8036d48:	4b64      	ldr	r3, [pc, #400]	; (8036edc <ip4_input+0x248>)
 8036d4a:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    IP_STATS_INC(ip.drop);
 8036d4e:	4b63      	ldr	r3, [pc, #396]	; (8036edc <ip4_input+0x248>)
 8036d50:	f8b3 304e 	ldrh.w	r3, [r3, #78]	; 0x4e
 8036d54:	3301      	adds	r3, #1
 8036d56:	b29a      	uxth	r2, r3
 8036d58:	4b60      	ldr	r3, [pc, #384]	; (8036edc <ip4_input+0x248>)
 8036d5a:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
    MIB2_STATS_INC(mib2.ipindiscards);
    return ERR_OK;
 8036d5e:	2300      	movs	r3, #0
 8036d60:	e102      	b.n	8036f68 <ip4_input+0x2d4>
    }
  }
#endif

  /* copy IP addresses to aligned ip_addr_t */
  ip_addr_copy_from_ip4(ip_data.current_iphdr_dest, iphdr->dest);
 8036d62:	697b      	ldr	r3, [r7, #20]
 8036d64:	691b      	ldr	r3, [r3, #16]
 8036d66:	4a5e      	ldr	r2, [pc, #376]	; (8036ee0 <ip4_input+0x24c>)
 8036d68:	6153      	str	r3, [r2, #20]
  ip_addr_copy_from_ip4(ip_data.current_iphdr_src, iphdr->src);
 8036d6a:	697b      	ldr	r3, [r7, #20]
 8036d6c:	68db      	ldr	r3, [r3, #12]
 8036d6e:	4a5c      	ldr	r2, [pc, #368]	; (8036ee0 <ip4_input+0x24c>)
 8036d70:	6113      	str	r3, [r2, #16]

  /* match packet against an interface, i.e. is this packet for us? */
  if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8036d72:	4b5b      	ldr	r3, [pc, #364]	; (8036ee0 <ip4_input+0x24c>)
 8036d74:	695b      	ldr	r3, [r3, #20]
 8036d76:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8036d7a:	2be0      	cmp	r3, #224	; 0xe0
 8036d7c:	d112      	bne.n	8036da4 <ip4_input+0x110>
      netif = inp;
    } else {
      netif = NULL;
    }
#else /* LWIP_IGMP */
    if ((netif_is_up(inp)) && (!ip4_addr_isany_val(*netif_ip4_addr(inp)))) {
 8036d7e:	683b      	ldr	r3, [r7, #0]
 8036d80:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8036d84:	f003 0301 	and.w	r3, r3, #1
 8036d88:	b2db      	uxtb	r3, r3
 8036d8a:	2b00      	cmp	r3, #0
 8036d8c:	d007      	beq.n	8036d9e <ip4_input+0x10a>
 8036d8e:	683b      	ldr	r3, [r7, #0]
 8036d90:	3304      	adds	r3, #4
 8036d92:	681b      	ldr	r3, [r3, #0]
 8036d94:	2b00      	cmp	r3, #0
 8036d96:	d002      	beq.n	8036d9e <ip4_input+0x10a>
      netif = inp;
 8036d98:	683b      	ldr	r3, [r7, #0]
 8036d9a:	613b      	str	r3, [r7, #16]
 8036d9c:	e02a      	b.n	8036df4 <ip4_input+0x160>
    } else {
      netif = NULL;
 8036d9e:	2300      	movs	r3, #0
 8036da0:	613b      	str	r3, [r7, #16]
 8036da2:	e027      	b.n	8036df4 <ip4_input+0x160>
    }
#endif /* LWIP_IGMP */
  } else {
    /* start trying with inp. if that's not acceptable, start walking the
       list of configured netifs. */
    if (ip4_input_accept(inp)) {
 8036da4:	6838      	ldr	r0, [r7, #0]
 8036da6:	f7ff ff4b 	bl	8036c40 <ip4_input_accept>
 8036daa:	4603      	mov	r3, r0
 8036dac:	2b00      	cmp	r3, #0
 8036dae:	d002      	beq.n	8036db6 <ip4_input+0x122>
      netif = inp;
 8036db0:	683b      	ldr	r3, [r7, #0]
 8036db2:	613b      	str	r3, [r7, #16]
 8036db4:	e01e      	b.n	8036df4 <ip4_input+0x160>
    } else {
      netif = NULL;
 8036db6:	2300      	movs	r3, #0
 8036db8:	613b      	str	r3, [r7, #16]
#if !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF
      /* Packets sent to the loopback address must not be accepted on an
       * interface that does not have the loopback address assigned to it,
       * unless a non-loopback interface is used for loopback traffic. */
      if (!ip4_addr_isloopback(ip4_current_dest_addr()))
 8036dba:	4b49      	ldr	r3, [pc, #292]	; (8036ee0 <ip4_input+0x24c>)
 8036dbc:	695b      	ldr	r3, [r3, #20]
 8036dbe:	b2db      	uxtb	r3, r3
 8036dc0:	2b7f      	cmp	r3, #127	; 0x7f
 8036dc2:	d017      	beq.n	8036df4 <ip4_input+0x160>
#endif /* !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF */
      {
#if !LWIP_SINGLE_NETIF
        NETIF_FOREACH(netif) {
 8036dc4:	4b47      	ldr	r3, [pc, #284]	; (8036ee4 <ip4_input+0x250>)
 8036dc6:	681b      	ldr	r3, [r3, #0]
 8036dc8:	613b      	str	r3, [r7, #16]
 8036dca:	e00e      	b.n	8036dea <ip4_input+0x156>
          if (netif == inp) {
 8036dcc:	693a      	ldr	r2, [r7, #16]
 8036dce:	683b      	ldr	r3, [r7, #0]
 8036dd0:	429a      	cmp	r2, r3
 8036dd2:	d006      	beq.n	8036de2 <ip4_input+0x14e>
            /* we checked that before already */
            continue;
          }
          if (ip4_input_accept(netif)) {
 8036dd4:	6938      	ldr	r0, [r7, #16]
 8036dd6:	f7ff ff33 	bl	8036c40 <ip4_input_accept>
 8036dda:	4603      	mov	r3, r0
 8036ddc:	2b00      	cmp	r3, #0
 8036dde:	d108      	bne.n	8036df2 <ip4_input+0x15e>
 8036de0:	e000      	b.n	8036de4 <ip4_input+0x150>
            continue;
 8036de2:	bf00      	nop
        NETIF_FOREACH(netif) {
 8036de4:	693b      	ldr	r3, [r7, #16]
 8036de6:	681b      	ldr	r3, [r3, #0]
 8036de8:	613b      	str	r3, [r7, #16]
 8036dea:	693b      	ldr	r3, [r7, #16]
 8036dec:	2b00      	cmp	r3, #0
 8036dee:	d1ed      	bne.n	8036dcc <ip4_input+0x138>
 8036df0:	e000      	b.n	8036df4 <ip4_input+0x160>
            break;
 8036df2:	bf00      	nop
      && !ip4_addr_isany_val(*ip4_current_src_addr())
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */
     )
#endif /* LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING */
  {
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 8036df4:	4b3a      	ldr	r3, [pc, #232]	; (8036ee0 <ip4_input+0x24c>)
 8036df6:	691b      	ldr	r3, [r3, #16]
 8036df8:	6839      	ldr	r1, [r7, #0]
 8036dfa:	4618      	mov	r0, r3
 8036dfc:	f000 f9ae 	bl	803715c <ip4_addr_isbroadcast_u32>
 8036e00:	4603      	mov	r3, r0
 8036e02:	2b00      	cmp	r3, #0
 8036e04:	d105      	bne.n	8036e12 <ip4_input+0x17e>
        (ip4_addr_ismulticast(ip4_current_src_addr()))) {
 8036e06:	4b36      	ldr	r3, [pc, #216]	; (8036ee0 <ip4_input+0x24c>)
 8036e08:	691b      	ldr	r3, [r3, #16]
 8036e0a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 8036e0e:	2be0      	cmp	r3, #224	; 0xe0
 8036e10:	d10c      	bne.n	8036e2c <ip4_input+0x198>
      /* packet source is not valid */
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("ip4_input: packet source is not valid.\n"));
      /* free (drop) packet pbufs */
      pbuf_free(p);
 8036e12:	6878      	ldr	r0, [r7, #4]
 8036e14:	f7f7 fa7a 	bl	802e30c <pbuf_free>
      IP_STATS_INC(ip.drop);
 8036e18:	4b30      	ldr	r3, [pc, #192]	; (8036edc <ip4_input+0x248>)
 8036e1a:	f8b3 304e 	ldrh.w	r3, [r3, #78]	; 0x4e
 8036e1e:	3301      	adds	r3, #1
 8036e20:	b29a      	uxth	r2, r3
 8036e22:	4b2e      	ldr	r3, [pc, #184]	; (8036edc <ip4_input+0x248>)
 8036e24:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
      return ERR_OK;
 8036e28:	2300      	movs	r3, #0
 8036e2a:	e09d      	b.n	8036f68 <ip4_input+0x2d4>
    }
  }

  /* packet not for us? */
  if (netif == NULL) {
 8036e2c:	693b      	ldr	r3, [r7, #16]
 8036e2e:	2b00      	cmp	r3, #0
 8036e30:	d10c      	bne.n	8036e4c <ip4_input+0x1b8>
      /* try to forward IP packet on (other) interfaces */
      ip4_forward(p, (struct ip_hdr *)p->payload, inp);
    } else
#endif /* IP_FORWARD */
    {
      IP_STATS_INC(ip.drop);
 8036e32:	4b2a      	ldr	r3, [pc, #168]	; (8036edc <ip4_input+0x248>)
 8036e34:	f8b3 304e 	ldrh.w	r3, [r3, #78]	; 0x4e
 8036e38:	3301      	adds	r3, #1
 8036e3a:	b29a      	uxth	r2, r3
 8036e3c:	4b27      	ldr	r3, [pc, #156]	; (8036edc <ip4_input+0x248>)
 8036e3e:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
    }
    pbuf_free(p);
 8036e42:	6878      	ldr	r0, [r7, #4]
 8036e44:	f7f7 fa62 	bl	802e30c <pbuf_free>
    return ERR_OK;
 8036e48:	2300      	movs	r3, #0
 8036e4a:	e08d      	b.n	8036f68 <ip4_input+0x2d4>
  }
  /* packet consists of multiple fragments? */
  if ((IPH_OFFSET(iphdr) & PP_HTONS(IP_OFFMASK | IP_MF)) != 0) {
 8036e4c:	697b      	ldr	r3, [r7, #20]
 8036e4e:	88db      	ldrh	r3, [r3, #6]
 8036e50:	b29b      	uxth	r3, r3
 8036e52:	461a      	mov	r2, r3
 8036e54:	f64f 733f 	movw	r3, #65343	; 0xff3f
 8036e58:	4013      	ands	r3, r2
 8036e5a:	2b00      	cmp	r3, #0
 8036e5c:	d00b      	beq.n	8036e76 <ip4_input+0x1e2>
#if IP_REASSEMBLY /* packet fragment reassembly code present? */
    LWIP_DEBUGF(IP_DEBUG, ("IP packet is a fragment (id=0x%04"X16_F" tot_len=%"U16_F" len=%"U16_F" MF=%"U16_F" offset=%"U16_F"), calling ip4_reass()\n",
                           lwip_ntohs(IPH_ID(iphdr)), p->tot_len, lwip_ntohs(IPH_LEN(iphdr)), (u16_t)!!(IPH_OFFSET(iphdr) & PP_HTONS(IP_MF)), (u16_t)((lwip_ntohs(IPH_OFFSET(iphdr)) & IP_OFFMASK) * 8)));
    /* reassemble the packet*/
    p = ip4_reass(p);
 8036e5e:	6878      	ldr	r0, [r7, #4]
 8036e60:	f000 fcca 	bl	80377f8 <ip4_reass>
 8036e64:	6078      	str	r0, [r7, #4]
    /* packet not fully reassembled yet? */
    if (p == NULL) {
 8036e66:	687b      	ldr	r3, [r7, #4]
 8036e68:	2b00      	cmp	r3, #0
 8036e6a:	d101      	bne.n	8036e70 <ip4_input+0x1dc>
      return ERR_OK;
 8036e6c:	2300      	movs	r3, #0
 8036e6e:	e07b      	b.n	8036f68 <ip4_input+0x2d4>
    }
    iphdr = (const struct ip_hdr *)p->payload;
 8036e70:	687b      	ldr	r3, [r7, #4]
 8036e72:	685b      	ldr	r3, [r3, #4]
 8036e74:	617b      	str	r3, [r7, #20]
  /* send to upper layers */
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: \n"));
  ip4_debug_print(p);
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: p->len %"U16_F" p->tot_len %"U16_F"\n", p->len, p->tot_len));

  ip_data.current_netif = netif;
 8036e76:	4a1a      	ldr	r2, [pc, #104]	; (8036ee0 <ip4_input+0x24c>)
 8036e78:	693b      	ldr	r3, [r7, #16]
 8036e7a:	6013      	str	r3, [r2, #0]
  ip_data.current_input_netif = inp;
 8036e7c:	4a18      	ldr	r2, [pc, #96]	; (8036ee0 <ip4_input+0x24c>)
 8036e7e:	683b      	ldr	r3, [r7, #0]
 8036e80:	6053      	str	r3, [r2, #4]
  ip_data.current_ip4_header = iphdr;
 8036e82:	4a17      	ldr	r2, [pc, #92]	; (8036ee0 <ip4_input+0x24c>)
 8036e84:	697b      	ldr	r3, [r7, #20]
 8036e86:	6093      	str	r3, [r2, #8]
  ip_data.current_ip_header_tot_len = IPH_HL_BYTES(iphdr);
 8036e88:	697b      	ldr	r3, [r7, #20]
 8036e8a:	781b      	ldrb	r3, [r3, #0]
 8036e8c:	f003 030f 	and.w	r3, r3, #15
 8036e90:	b2db      	uxtb	r3, r3
 8036e92:	009b      	lsls	r3, r3, #2
 8036e94:	b2db      	uxtb	r3, r3
 8036e96:	b29a      	uxth	r2, r3
 8036e98:	4b11      	ldr	r3, [pc, #68]	; (8036ee0 <ip4_input+0x24c>)
 8036e9a:	819a      	strh	r2, [r3, #12]
  /* raw input did not eat the packet? */
  raw_status = raw_input(p, inp);
  if (raw_status != RAW_INPUT_EATEN)
#endif /* LWIP_RAW */
  {
    pbuf_remove_header(p, iphdr_hlen); /* Move to payload, no check necessary. */
 8036e9c:	89fb      	ldrh	r3, [r7, #14]
 8036e9e:	4619      	mov	r1, r3
 8036ea0:	6878      	ldr	r0, [r7, #4]
 8036ea2:	f7f7 f97b 	bl	802e19c <pbuf_remove_header>

    switch (IPH_PROTO(iphdr)) {
 8036ea6:	697b      	ldr	r3, [r7, #20]
 8036ea8:	7a5b      	ldrb	r3, [r3, #9]
 8036eaa:	2b11      	cmp	r3, #17
 8036eac:	d006      	beq.n	8036ebc <ip4_input+0x228>
 8036eae:	2b11      	cmp	r3, #17
 8036eb0:	dc1a      	bgt.n	8036ee8 <ip4_input+0x254>
 8036eb2:	2b01      	cmp	r3, #1
 8036eb4:	d00c      	beq.n	8036ed0 <ip4_input+0x23c>
 8036eb6:	2b06      	cmp	r3, #6
 8036eb8:	d005      	beq.n	8036ec6 <ip4_input+0x232>
 8036eba:	e015      	b.n	8036ee8 <ip4_input+0x254>
      case IP_PROTO_UDP:
#if LWIP_UDPLITE
      case IP_PROTO_UDPLITE:
#endif /* LWIP_UDPLITE */
        MIB2_STATS_INC(mib2.ipindelivers);
        udp_input(p, inp);
 8036ebc:	6839      	ldr	r1, [r7, #0]
 8036ebe:	6878      	ldr	r0, [r7, #4]
 8036ec0:	f7fe f862 	bl	8034f88 <udp_input>
        break;
 8036ec4:	e03d      	b.n	8036f42 <ip4_input+0x2ae>
#endif /* LWIP_UDP */
#if LWIP_TCP
      case IP_PROTO_TCP:
        MIB2_STATS_INC(mib2.ipindelivers);
        tcp_input(p, inp);
 8036ec6:	6839      	ldr	r1, [r7, #0]
 8036ec8:	6878      	ldr	r0, [r7, #4]
 8036eca:	f7f9 fb67 	bl	803059c <tcp_input>
        break;
 8036ece:	e038      	b.n	8036f42 <ip4_input+0x2ae>
#endif /* LWIP_TCP */
#if LWIP_ICMP
      case IP_PROTO_ICMP:
        MIB2_STATS_INC(mib2.ipindelivers);
        icmp_input(p, inp);
 8036ed0:	6839      	ldr	r1, [r7, #0]
 8036ed2:	6878      	ldr	r0, [r7, #4]
 8036ed4:	f7ff fc6e 	bl	80367b4 <icmp_input>
        break;
 8036ed8:	e033      	b.n	8036f42 <ip4_input+0x2ae>
 8036eda:	bf00      	nop
 8036edc:	2000ee04 	.word	0x2000ee04
 8036ee0:	2000b320 	.word	0x2000b320
 8036ee4:	2000edf8 	.word	0x2000edf8
        } else
#endif /* LWIP_RAW */
        {
#if LWIP_ICMP
          /* send ICMP destination protocol unreachable unless is was a broadcast */
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 8036ee8:	4b21      	ldr	r3, [pc, #132]	; (8036f70 <ip4_input+0x2dc>)
 8036eea:	695b      	ldr	r3, [r3, #20]
 8036eec:	6939      	ldr	r1, [r7, #16]
 8036eee:	4618      	mov	r0, r3
 8036ef0:	f000 f934 	bl	803715c <ip4_addr_isbroadcast_u32>
 8036ef4:	4603      	mov	r3, r0
 8036ef6:	2b00      	cmp	r3, #0
 8036ef8:	d10f      	bne.n	8036f1a <ip4_input+0x286>
              !ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8036efa:	4b1d      	ldr	r3, [pc, #116]	; (8036f70 <ip4_input+0x2dc>)
 8036efc:	695b      	ldr	r3, [r3, #20]
 8036efe:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 8036f02:	2be0      	cmp	r3, #224	; 0xe0
 8036f04:	d009      	beq.n	8036f1a <ip4_input+0x286>
            pbuf_header_force(p, (s16_t)iphdr_hlen); /* Move to ip header, no check necessary. */
 8036f06:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8036f0a:	4619      	mov	r1, r3
 8036f0c:	6878      	ldr	r0, [r7, #4]
 8036f0e:	f7f7 f9b8 	bl	802e282 <pbuf_header_force>
            icmp_dest_unreach(p, ICMP_DUR_PROTO);
 8036f12:	2102      	movs	r1, #2
 8036f14:	6878      	ldr	r0, [r7, #4]
 8036f16:	f7ff fd85 	bl	8036a24 <icmp_dest_unreach>
          }
#endif /* LWIP_ICMP */

          LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("Unsupported transport protocol %"U16_F"\n", (u16_t)IPH_PROTO(iphdr)));

          IP_STATS_INC(ip.proterr);
 8036f1a:	4b16      	ldr	r3, [pc, #88]	; (8036f74 <ip4_input+0x2e0>)
 8036f1c:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8036f20:	3301      	adds	r3, #1
 8036f22:	b29a      	uxth	r2, r3
 8036f24:	4b13      	ldr	r3, [pc, #76]	; (8036f74 <ip4_input+0x2e0>)
 8036f26:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
          IP_STATS_INC(ip.drop);
 8036f2a:	4b12      	ldr	r3, [pc, #72]	; (8036f74 <ip4_input+0x2e0>)
 8036f2c:	f8b3 304e 	ldrh.w	r3, [r3, #78]	; 0x4e
 8036f30:	3301      	adds	r3, #1
 8036f32:	b29a      	uxth	r2, r3
 8036f34:	4b0f      	ldr	r3, [pc, #60]	; (8036f74 <ip4_input+0x2e0>)
 8036f36:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
          MIB2_STATS_INC(mib2.ipinunknownprotos);
        }
        pbuf_free(p);
 8036f3a:	6878      	ldr	r0, [r7, #4]
 8036f3c:	f7f7 f9e6 	bl	802e30c <pbuf_free>
        break;
 8036f40:	bf00      	nop
    }
  }

  /* @todo: this is not really necessary... */
  ip_data.current_netif = NULL;
 8036f42:	4b0b      	ldr	r3, [pc, #44]	; (8036f70 <ip4_input+0x2dc>)
 8036f44:	2200      	movs	r2, #0
 8036f46:	601a      	str	r2, [r3, #0]
  ip_data.current_input_netif = NULL;
 8036f48:	4b09      	ldr	r3, [pc, #36]	; (8036f70 <ip4_input+0x2dc>)
 8036f4a:	2200      	movs	r2, #0
 8036f4c:	605a      	str	r2, [r3, #4]
  ip_data.current_ip4_header = NULL;
 8036f4e:	4b08      	ldr	r3, [pc, #32]	; (8036f70 <ip4_input+0x2dc>)
 8036f50:	2200      	movs	r2, #0
 8036f52:	609a      	str	r2, [r3, #8]
  ip_data.current_ip_header_tot_len = 0;
 8036f54:	4b06      	ldr	r3, [pc, #24]	; (8036f70 <ip4_input+0x2dc>)
 8036f56:	2200      	movs	r2, #0
 8036f58:	819a      	strh	r2, [r3, #12]
  ip4_addr_set_any(ip4_current_src_addr());
 8036f5a:	4b05      	ldr	r3, [pc, #20]	; (8036f70 <ip4_input+0x2dc>)
 8036f5c:	2200      	movs	r2, #0
 8036f5e:	611a      	str	r2, [r3, #16]
  ip4_addr_set_any(ip4_current_dest_addr());
 8036f60:	4b03      	ldr	r3, [pc, #12]	; (8036f70 <ip4_input+0x2dc>)
 8036f62:	2200      	movs	r2, #0
 8036f64:	615a      	str	r2, [r3, #20]

  return ERR_OK;
 8036f66:	2300      	movs	r3, #0
}
 8036f68:	4618      	mov	r0, r3
 8036f6a:	3718      	adds	r7, #24
 8036f6c:	46bd      	mov	sp, r7
 8036f6e:	bd80      	pop	{r7, pc}
 8036f70:	2000b320 	.word	0x2000b320
 8036f74:	2000ee04 	.word	0x2000ee04

08036f78 <ip4_output_if>:
 */
err_t
ip4_output_if(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
              u8_t ttl, u8_t tos,
              u8_t proto, struct netif *netif)
{
 8036f78:	b580      	push	{r7, lr}
 8036f7a:	b08a      	sub	sp, #40	; 0x28
 8036f7c:	af04      	add	r7, sp, #16
 8036f7e:	60f8      	str	r0, [r7, #12]
 8036f80:	60b9      	str	r1, [r7, #8]
 8036f82:	607a      	str	r2, [r7, #4]
 8036f84:	70fb      	strb	r3, [r7, #3]
ip4_output_if_opt(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos, u8_t proto, struct netif *netif, void *ip_options,
                  u16_t optlen)
{
#endif /* IP_OPTIONS_SEND */
  const ip4_addr_t *src_used = src;
 8036f86:	68bb      	ldr	r3, [r7, #8]
 8036f88:	617b      	str	r3, [r7, #20]
  if (dest != LWIP_IP_HDRINCL) {
 8036f8a:	687b      	ldr	r3, [r7, #4]
 8036f8c:	2b00      	cmp	r3, #0
 8036f8e:	d009      	beq.n	8036fa4 <ip4_output_if+0x2c>
    if (ip4_addr_isany(src)) {
 8036f90:	68bb      	ldr	r3, [r7, #8]
 8036f92:	2b00      	cmp	r3, #0
 8036f94:	d003      	beq.n	8036f9e <ip4_output_if+0x26>
 8036f96:	68bb      	ldr	r3, [r7, #8]
 8036f98:	681b      	ldr	r3, [r3, #0]
 8036f9a:	2b00      	cmp	r3, #0
 8036f9c:	d102      	bne.n	8036fa4 <ip4_output_if+0x2c>
      src_used = netif_ip4_addr(netif);
 8036f9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8036fa0:	3304      	adds	r3, #4
 8036fa2:	617b      	str	r3, [r7, #20]

#if IP_OPTIONS_SEND
  return ip4_output_if_opt_src(p, src_used, dest, ttl, tos, proto, netif,
                               ip_options, optlen);
#else /* IP_OPTIONS_SEND */
  return ip4_output_if_src(p, src_used, dest, ttl, tos, proto, netif);
 8036fa4:	78fa      	ldrb	r2, [r7, #3]
 8036fa6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8036fa8:	9302      	str	r3, [sp, #8]
 8036faa:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8036fae:	9301      	str	r3, [sp, #4]
 8036fb0:	f897 3020 	ldrb.w	r3, [r7, #32]
 8036fb4:	9300      	str	r3, [sp, #0]
 8036fb6:	4613      	mov	r3, r2
 8036fb8:	687a      	ldr	r2, [r7, #4]
 8036fba:	6979      	ldr	r1, [r7, #20]
 8036fbc:	68f8      	ldr	r0, [r7, #12]
 8036fbe:	f000 f805 	bl	8036fcc <ip4_output_if_src>
 8036fc2:	4603      	mov	r3, r0
#endif /* IP_OPTIONS_SEND */
}
 8036fc4:	4618      	mov	r0, r3
 8036fc6:	3718      	adds	r7, #24
 8036fc8:	46bd      	mov	sp, r7
 8036fca:	bd80      	pop	{r7, pc}

08036fcc <ip4_output_if_src>:
 */
err_t
ip4_output_if_src(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos,
                  u8_t proto, struct netif *netif)
{
 8036fcc:	b580      	push	{r7, lr}
 8036fce:	b088      	sub	sp, #32
 8036fd0:	af00      	add	r7, sp, #0
 8036fd2:	60f8      	str	r0, [r7, #12]
 8036fd4:	60b9      	str	r1, [r7, #8]
 8036fd6:	607a      	str	r2, [r7, #4]
 8036fd8:	70fb      	strb	r3, [r7, #3]
#if CHECKSUM_GEN_IP_INLINE
  u32_t chk_sum = 0;
#endif /* CHECKSUM_GEN_IP_INLINE */

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
 8036fda:	68fb      	ldr	r3, [r7, #12]
 8036fdc:	7b9b      	ldrb	r3, [r3, #14]
 8036fde:	2b01      	cmp	r3, #1
 8036fe0:	d006      	beq.n	8036ff0 <ip4_output_if_src+0x24>
 8036fe2:	4b57      	ldr	r3, [pc, #348]	; (8037140 <ip4_output_if_src+0x174>)
 8036fe4:	f44f 7255 	mov.w	r2, #852	; 0x354
 8036fe8:	4956      	ldr	r1, [pc, #344]	; (8037144 <ip4_output_if_src+0x178>)
 8036fea:	4857      	ldr	r0, [pc, #348]	; (8037148 <ip4_output_if_src+0x17c>)
 8036fec:	f002 f83c 	bl	8039068 <iprintf>

  MIB2_STATS_INC(mib2.ipoutrequests);

  /* Should the IP header be generated or is it already included in p? */
  if (dest != LWIP_IP_HDRINCL) {
 8036ff0:	687b      	ldr	r3, [r7, #4]
 8036ff2:	2b00      	cmp	r3, #0
 8036ff4:	d068      	beq.n	80370c8 <ip4_output_if_src+0xfc>
    u16_t ip_hlen = IP_HLEN;
 8036ff6:	2314      	movs	r3, #20
 8036ff8:	837b      	strh	r3, [r7, #26]
      }
#endif /* CHECKSUM_GEN_IP_INLINE */
    }
#endif /* IP_OPTIONS_SEND */
    /* generate IP header */
    if (pbuf_add_header(p, IP_HLEN)) {
 8036ffa:	2114      	movs	r1, #20
 8036ffc:	68f8      	ldr	r0, [r7, #12]
 8036ffe:	f7f7 f8bd 	bl	802e17c <pbuf_add_header>
 8037002:	4603      	mov	r3, r0
 8037004:	2b00      	cmp	r3, #0
 8037006:	d00a      	beq.n	803701e <ip4_output_if_src+0x52>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: not enough room for IP header in pbuf\n"));

      IP_STATS_INC(ip.err);
 8037008:	4b50      	ldr	r3, [pc, #320]	; (803714c <ip4_output_if_src+0x180>)
 803700a:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 803700e:	3301      	adds	r3, #1
 8037010:	b29a      	uxth	r2, r3
 8037012:	4b4e      	ldr	r3, [pc, #312]	; (803714c <ip4_output_if_src+0x180>)
 8037014:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 8037018:	f06f 0301 	mvn.w	r3, #1
 803701c:	e08c      	b.n	8037138 <ip4_output_if_src+0x16c>
    }

    iphdr = (struct ip_hdr *)p->payload;
 803701e:	68fb      	ldr	r3, [r7, #12]
 8037020:	685b      	ldr	r3, [r3, #4]
 8037022:	61fb      	str	r3, [r7, #28]
    LWIP_ASSERT("check that first pbuf can hold struct ip_hdr",
 8037024:	68fb      	ldr	r3, [r7, #12]
 8037026:	895b      	ldrh	r3, [r3, #10]
 8037028:	2b13      	cmp	r3, #19
 803702a:	d806      	bhi.n	803703a <ip4_output_if_src+0x6e>
 803702c:	4b44      	ldr	r3, [pc, #272]	; (8037140 <ip4_output_if_src+0x174>)
 803702e:	f44f 7262 	mov.w	r2, #904	; 0x388
 8037032:	4947      	ldr	r1, [pc, #284]	; (8037150 <ip4_output_if_src+0x184>)
 8037034:	4844      	ldr	r0, [pc, #272]	; (8037148 <ip4_output_if_src+0x17c>)
 8037036:	f002 f817 	bl	8039068 <iprintf>
                (p->len >= sizeof(struct ip_hdr)));

    IPH_TTL_SET(iphdr, ttl);
 803703a:	69fb      	ldr	r3, [r7, #28]
 803703c:	78fa      	ldrb	r2, [r7, #3]
 803703e:	721a      	strb	r2, [r3, #8]
    IPH_PROTO_SET(iphdr, proto);
 8037040:	69fb      	ldr	r3, [r7, #28]
 8037042:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 8037046:	725a      	strb	r2, [r3, #9]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(proto | (ttl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */

    /* dest cannot be NULL here */
    ip4_addr_copy(iphdr->dest, *dest);
 8037048:	687b      	ldr	r3, [r7, #4]
 803704a:	681a      	ldr	r2, [r3, #0]
 803704c:	69fb      	ldr	r3, [r7, #28]
 803704e:	611a      	str	r2, [r3, #16]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += ip4_addr_get_u32(&iphdr->dest) & 0xFFFF;
    chk_sum += ip4_addr_get_u32(&iphdr->dest) >> 16;
#endif /* CHECKSUM_GEN_IP_INLINE */

    IPH_VHL_SET(iphdr, 4, ip_hlen / 4);
 8037050:	8b7b      	ldrh	r3, [r7, #26]
 8037052:	089b      	lsrs	r3, r3, #2
 8037054:	b29b      	uxth	r3, r3
 8037056:	b2db      	uxtb	r3, r3
 8037058:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 803705c:	b2da      	uxtb	r2, r3
 803705e:	69fb      	ldr	r3, [r7, #28]
 8037060:	701a      	strb	r2, [r3, #0]
    IPH_TOS_SET(iphdr, tos);
 8037062:	69fb      	ldr	r3, [r7, #28]
 8037064:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 8037068:	705a      	strb	r2, [r3, #1]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(tos | (iphdr->_v_hl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_LEN_SET(iphdr, lwip_htons(p->tot_len));
 803706a:	68fb      	ldr	r3, [r7, #12]
 803706c:	891b      	ldrh	r3, [r3, #8]
 803706e:	4618      	mov	r0, r3
 8037070:	f7f5 fc58 	bl	802c924 <lwip_htons>
 8037074:	4603      	mov	r3, r0
 8037076:	461a      	mov	r2, r3
 8037078:	69fb      	ldr	r3, [r7, #28]
 803707a:	805a      	strh	r2, [r3, #2]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_len;
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_OFFSET_SET(iphdr, 0);
 803707c:	69fb      	ldr	r3, [r7, #28]
 803707e:	2200      	movs	r2, #0
 8037080:	719a      	strb	r2, [r3, #6]
 8037082:	2200      	movs	r2, #0
 8037084:	71da      	strb	r2, [r3, #7]
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
 8037086:	4b33      	ldr	r3, [pc, #204]	; (8037154 <ip4_output_if_src+0x188>)
 8037088:	881b      	ldrh	r3, [r3, #0]
 803708a:	4618      	mov	r0, r3
 803708c:	f7f5 fc4a 	bl	802c924 <lwip_htons>
 8037090:	4603      	mov	r3, r0
 8037092:	461a      	mov	r2, r3
 8037094:	69fb      	ldr	r3, [r7, #28]
 8037096:	809a      	strh	r2, [r3, #4]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_id;
#endif /* CHECKSUM_GEN_IP_INLINE */
    ++ip_id;
 8037098:	4b2e      	ldr	r3, [pc, #184]	; (8037154 <ip4_output_if_src+0x188>)
 803709a:	881b      	ldrh	r3, [r3, #0]
 803709c:	3301      	adds	r3, #1
 803709e:	b29a      	uxth	r2, r3
 80370a0:	4b2c      	ldr	r3, [pc, #176]	; (8037154 <ip4_output_if_src+0x188>)
 80370a2:	801a      	strh	r2, [r3, #0]

    if (src == NULL) {
 80370a4:	68bb      	ldr	r3, [r7, #8]
 80370a6:	2b00      	cmp	r3, #0
 80370a8:	d104      	bne.n	80370b4 <ip4_output_if_src+0xe8>
      ip4_addr_copy(iphdr->src, *IP4_ADDR_ANY4);
 80370aa:	4b2b      	ldr	r3, [pc, #172]	; (8037158 <ip4_output_if_src+0x18c>)
 80370ac:	681a      	ldr	r2, [r3, #0]
 80370ae:	69fb      	ldr	r3, [r7, #28]
 80370b0:	60da      	str	r2, [r3, #12]
 80370b2:	e003      	b.n	80370bc <ip4_output_if_src+0xf0>
    } else {
      /* src cannot be NULL here */
      ip4_addr_copy(iphdr->src, *src);
 80370b4:	68bb      	ldr	r3, [r7, #8]
 80370b6:	681a      	ldr	r2, [r3, #0]
 80370b8:	69fb      	ldr	r3, [r7, #28]
 80370ba:	60da      	str	r2, [r3, #12]
    else {
      IPH_CHKSUM_SET(iphdr, 0);
    }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF*/
#else /* CHECKSUM_GEN_IP_INLINE */
    IPH_CHKSUM_SET(iphdr, 0);
 80370bc:	69fb      	ldr	r3, [r7, #28]
 80370be:	2200      	movs	r2, #0
 80370c0:	729a      	strb	r2, [r3, #10]
 80370c2:	2200      	movs	r2, #0
 80370c4:	72da      	strb	r2, [r3, #11]
 80370c6:	e017      	b.n	80370f8 <ip4_output_if_src+0x12c>
    }
#endif /* CHECKSUM_GEN_IP */
#endif /* CHECKSUM_GEN_IP_INLINE */
  } else {
    /* IP header already included in p */
    if (p->len < IP_HLEN) {
 80370c8:	68fb      	ldr	r3, [r7, #12]
 80370ca:	895b      	ldrh	r3, [r3, #10]
 80370cc:	2b13      	cmp	r3, #19
 80370ce:	d80a      	bhi.n	80370e6 <ip4_output_if_src+0x11a>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: LWIP_IP_HDRINCL but pbuf is too short\n"));
      IP_STATS_INC(ip.err);
 80370d0:	4b1e      	ldr	r3, [pc, #120]	; (803714c <ip4_output_if_src+0x180>)
 80370d2:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80370d6:	3301      	adds	r3, #1
 80370d8:	b29a      	uxth	r2, r3
 80370da:	4b1c      	ldr	r3, [pc, #112]	; (803714c <ip4_output_if_src+0x180>)
 80370dc:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 80370e0:	f06f 0301 	mvn.w	r3, #1
 80370e4:	e028      	b.n	8037138 <ip4_output_if_src+0x16c>
    }
    iphdr = (struct ip_hdr *)p->payload;
 80370e6:	68fb      	ldr	r3, [r7, #12]
 80370e8:	685b      	ldr	r3, [r3, #4]
 80370ea:	61fb      	str	r3, [r7, #28]
    ip4_addr_copy(dest_addr, iphdr->dest);
 80370ec:	69fb      	ldr	r3, [r7, #28]
 80370ee:	691b      	ldr	r3, [r3, #16]
 80370f0:	617b      	str	r3, [r7, #20]
    dest = &dest_addr;
 80370f2:	f107 0314 	add.w	r3, r7, #20
 80370f6:	607b      	str	r3, [r7, #4]
  }

  IP_STATS_INC(ip.xmit);
 80370f8:	4b14      	ldr	r3, [pc, #80]	; (803714c <ip4_output_if_src+0x180>)
 80370fa:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 80370fe:	3301      	adds	r3, #1
 8037100:	b29a      	uxth	r2, r3
 8037102:	4b12      	ldr	r3, [pc, #72]	; (803714c <ip4_output_if_src+0x180>)
 8037104:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
  }
#endif /* LWIP_MULTICAST_TX_OPTIONS */
#endif /* ENABLE_LOOPBACK */
#if IP_FRAG
  /* don't fragment if interface has mtu set to 0 [loopif] */
  if (netif->mtu && (p->tot_len > netif->mtu)) {
 8037108:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 803710a:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 803710c:	2b00      	cmp	r3, #0
 803710e:	d00c      	beq.n	803712a <ip4_output_if_src+0x15e>
 8037110:	68fb      	ldr	r3, [r7, #12]
 8037112:	891a      	ldrh	r2, [r3, #8]
 8037114:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8037116:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8037118:	429a      	cmp	r2, r3
 803711a:	d906      	bls.n	803712a <ip4_output_if_src+0x15e>
    return ip4_frag(p, netif, dest);
 803711c:	687a      	ldr	r2, [r7, #4]
 803711e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8037120:	68f8      	ldr	r0, [r7, #12]
 8037122:	f000 fd7b 	bl	8037c1c <ip4_frag>
 8037126:	4603      	mov	r3, r0
 8037128:	e006      	b.n	8037138 <ip4_output_if_src+0x16c>
  }
#endif /* IP_FRAG */

  LWIP_DEBUGF(IP_DEBUG, ("ip4_output_if: call netif->output()\n"));
  return netif->output(netif, p, dest);
 803712a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 803712c:	695b      	ldr	r3, [r3, #20]
 803712e:	687a      	ldr	r2, [r7, #4]
 8037130:	68f9      	ldr	r1, [r7, #12]
 8037132:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8037134:	4798      	blx	r3
 8037136:	4603      	mov	r3, r0
}
 8037138:	4618      	mov	r0, r3
 803713a:	3720      	adds	r7, #32
 803713c:	46bd      	mov	sp, r7
 803713e:	bd80      	pop	{r7, pc}
 8037140:	0803d100 	.word	0x0803d100
 8037144:	0803d134 	.word	0x0803d134
 8037148:	0803d140 	.word	0x0803d140
 803714c:	2000ee04 	.word	0x2000ee04
 8037150:	0803d168 	.word	0x0803d168
 8037154:	2000f052 	.word	0x2000f052
 8037158:	0803d62c 	.word	0x0803d62c

0803715c <ip4_addr_isbroadcast_u32>:
 * @param netif the network interface against which the address is checked
 * @return returns non-zero if the address is a broadcast address
 */
u8_t
ip4_addr_isbroadcast_u32(u32_t addr, const struct netif *netif)
{
 803715c:	b480      	push	{r7}
 803715e:	b085      	sub	sp, #20
 8037160:	af00      	add	r7, sp, #0
 8037162:	6078      	str	r0, [r7, #4]
 8037164:	6039      	str	r1, [r7, #0]
  ip4_addr_t ipaddr;
  ip4_addr_set_u32(&ipaddr, addr);
 8037166:	687b      	ldr	r3, [r7, #4]
 8037168:	60fb      	str	r3, [r7, #12]

  /* all ones (broadcast) or all zeroes (old skool broadcast) */
  if ((~addr == IPADDR_ANY) ||
 803716a:	687b      	ldr	r3, [r7, #4]
 803716c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8037170:	d002      	beq.n	8037178 <ip4_addr_isbroadcast_u32+0x1c>
 8037172:	687b      	ldr	r3, [r7, #4]
 8037174:	2b00      	cmp	r3, #0
 8037176:	d101      	bne.n	803717c <ip4_addr_isbroadcast_u32+0x20>
      (addr == IPADDR_ANY)) {
    return 1;
 8037178:	2301      	movs	r3, #1
 803717a:	e02a      	b.n	80371d2 <ip4_addr_isbroadcast_u32+0x76>
    /* no broadcast support on this network interface? */
  } else if ((netif->flags & NETIF_FLAG_BROADCAST) == 0) {
 803717c:	683b      	ldr	r3, [r7, #0]
 803717e:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8037182:	f003 0302 	and.w	r3, r3, #2
 8037186:	2b00      	cmp	r3, #0
 8037188:	d101      	bne.n	803718e <ip4_addr_isbroadcast_u32+0x32>
    /* the given address cannot be a broadcast address
     * nor can we check against any broadcast addresses */
    return 0;
 803718a:	2300      	movs	r3, #0
 803718c:	e021      	b.n	80371d2 <ip4_addr_isbroadcast_u32+0x76>
    /* address matches network interface address exactly? => no broadcast */
  } else if (addr == ip4_addr_get_u32(netif_ip4_addr(netif))) {
 803718e:	683b      	ldr	r3, [r7, #0]
 8037190:	3304      	adds	r3, #4
 8037192:	681b      	ldr	r3, [r3, #0]
 8037194:	687a      	ldr	r2, [r7, #4]
 8037196:	429a      	cmp	r2, r3
 8037198:	d101      	bne.n	803719e <ip4_addr_isbroadcast_u32+0x42>
    return 0;
 803719a:	2300      	movs	r3, #0
 803719c:	e019      	b.n	80371d2 <ip4_addr_isbroadcast_u32+0x76>
    /*  on the same (sub) network... */
  } else if (ip4_addr_netcmp(&ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif))
 803719e:	68fa      	ldr	r2, [r7, #12]
 80371a0:	683b      	ldr	r3, [r7, #0]
 80371a2:	3304      	adds	r3, #4
 80371a4:	681b      	ldr	r3, [r3, #0]
 80371a6:	405a      	eors	r2, r3
 80371a8:	683b      	ldr	r3, [r7, #0]
 80371aa:	3308      	adds	r3, #8
 80371ac:	681b      	ldr	r3, [r3, #0]
 80371ae:	4013      	ands	r3, r2
 80371b0:	2b00      	cmp	r3, #0
 80371b2:	d10d      	bne.n	80371d0 <ip4_addr_isbroadcast_u32+0x74>
             /* ...and host identifier bits are all ones? =>... */
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 80371b4:	683b      	ldr	r3, [r7, #0]
 80371b6:	3308      	adds	r3, #8
 80371b8:	681b      	ldr	r3, [r3, #0]
 80371ba:	43da      	mvns	r2, r3
 80371bc:	687b      	ldr	r3, [r7, #4]
 80371be:	401a      	ands	r2, r3
                 (IPADDR_BROADCAST & ~ip4_addr_get_u32(netif_ip4_netmask(netif))))) {
 80371c0:	683b      	ldr	r3, [r7, #0]
 80371c2:	3308      	adds	r3, #8
 80371c4:	681b      	ldr	r3, [r3, #0]
 80371c6:	43db      	mvns	r3, r3
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 80371c8:	429a      	cmp	r2, r3
 80371ca:	d101      	bne.n	80371d0 <ip4_addr_isbroadcast_u32+0x74>
    /* => network broadcast address */
    return 1;
 80371cc:	2301      	movs	r3, #1
 80371ce:	e000      	b.n	80371d2 <ip4_addr_isbroadcast_u32+0x76>
  } else {
    return 0;
 80371d0:	2300      	movs	r3, #0
  }
}
 80371d2:	4618      	mov	r0, r3
 80371d4:	3714      	adds	r7, #20
 80371d6:	46bd      	mov	sp, r7
 80371d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80371dc:	4770      	bx	lr
	...

080371e0 <ip_reass_tmr>:
 *
 * Should be called every 1000 msec (defined by IP_TMR_INTERVAL).
 */
void
ip_reass_tmr(void)
{
 80371e0:	b580      	push	{r7, lr}
 80371e2:	b084      	sub	sp, #16
 80371e4:	af00      	add	r7, sp, #0
  struct ip_reassdata *r, *prev = NULL;
 80371e6:	2300      	movs	r3, #0
 80371e8:	60bb      	str	r3, [r7, #8]

  r = reassdatagrams;
 80371ea:	4b12      	ldr	r3, [pc, #72]	; (8037234 <ip_reass_tmr+0x54>)
 80371ec:	681b      	ldr	r3, [r3, #0]
 80371ee:	60fb      	str	r3, [r7, #12]
  while (r != NULL) {
 80371f0:	e018      	b.n	8037224 <ip_reass_tmr+0x44>
    /* Decrement the timer. Once it reaches 0,
     * clean up the incomplete fragment assembly */
    if (r->timer > 0) {
 80371f2:	68fb      	ldr	r3, [r7, #12]
 80371f4:	7fdb      	ldrb	r3, [r3, #31]
 80371f6:	2b00      	cmp	r3, #0
 80371f8:	d00b      	beq.n	8037212 <ip_reass_tmr+0x32>
      r->timer--;
 80371fa:	68fb      	ldr	r3, [r7, #12]
 80371fc:	7fdb      	ldrb	r3, [r3, #31]
 80371fe:	3b01      	subs	r3, #1
 8037200:	b2da      	uxtb	r2, r3
 8037202:	68fb      	ldr	r3, [r7, #12]
 8037204:	77da      	strb	r2, [r3, #31]
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer dec %"U16_F"\n", (u16_t)r->timer));
      prev = r;
 8037206:	68fb      	ldr	r3, [r7, #12]
 8037208:	60bb      	str	r3, [r7, #8]
      r = r->next;
 803720a:	68fb      	ldr	r3, [r7, #12]
 803720c:	681b      	ldr	r3, [r3, #0]
 803720e:	60fb      	str	r3, [r7, #12]
 8037210:	e008      	b.n	8037224 <ip_reass_tmr+0x44>
    } else {
      /* reassembly timed out */
      struct ip_reassdata *tmp;
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer timed out\n"));
      tmp = r;
 8037212:	68fb      	ldr	r3, [r7, #12]
 8037214:	607b      	str	r3, [r7, #4]
      /* get the next pointer before freeing */
      r = r->next;
 8037216:	68fb      	ldr	r3, [r7, #12]
 8037218:	681b      	ldr	r3, [r3, #0]
 803721a:	60fb      	str	r3, [r7, #12]
      /* free the helper struct and all enqueued pbufs */
      ip_reass_free_complete_datagram(tmp, prev);
 803721c:	68b9      	ldr	r1, [r7, #8]
 803721e:	6878      	ldr	r0, [r7, #4]
 8037220:	f000 f80a 	bl	8037238 <ip_reass_free_complete_datagram>
  while (r != NULL) {
 8037224:	68fb      	ldr	r3, [r7, #12]
 8037226:	2b00      	cmp	r3, #0
 8037228:	d1e3      	bne.n	80371f2 <ip_reass_tmr+0x12>
    }
  }
}
 803722a:	bf00      	nop
 803722c:	bf00      	nop
 803722e:	3710      	adds	r7, #16
 8037230:	46bd      	mov	sp, r7
 8037232:	bd80      	pop	{r7, pc}
 8037234:	2000f054 	.word	0x2000f054

08037238 <ip_reass_free_complete_datagram>:
 * @param prev the previous datagram in the linked list
 * @return the number of pbufs freed
 */
static int
ip_reass_free_complete_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 8037238:	b580      	push	{r7, lr}
 803723a:	b088      	sub	sp, #32
 803723c:	af00      	add	r7, sp, #0
 803723e:	6078      	str	r0, [r7, #4]
 8037240:	6039      	str	r1, [r7, #0]
  u16_t pbufs_freed = 0;
 8037242:	2300      	movs	r3, #0
 8037244:	83fb      	strh	r3, [r7, #30]
  u16_t clen;
  struct pbuf *p;
  struct ip_reass_helper *iprh;

  LWIP_ASSERT("prev != ipr", prev != ipr);
 8037246:	683a      	ldr	r2, [r7, #0]
 8037248:	687b      	ldr	r3, [r7, #4]
 803724a:	429a      	cmp	r2, r3
 803724c:	d105      	bne.n	803725a <ip_reass_free_complete_datagram+0x22>
 803724e:	4b45      	ldr	r3, [pc, #276]	; (8037364 <ip_reass_free_complete_datagram+0x12c>)
 8037250:	22ab      	movs	r2, #171	; 0xab
 8037252:	4945      	ldr	r1, [pc, #276]	; (8037368 <ip_reass_free_complete_datagram+0x130>)
 8037254:	4845      	ldr	r0, [pc, #276]	; (803736c <ip_reass_free_complete_datagram+0x134>)
 8037256:	f001 ff07 	bl	8039068 <iprintf>
  if (prev != NULL) {
 803725a:	683b      	ldr	r3, [r7, #0]
 803725c:	2b00      	cmp	r3, #0
 803725e:	d00a      	beq.n	8037276 <ip_reass_free_complete_datagram+0x3e>
    LWIP_ASSERT("prev->next == ipr", prev->next == ipr);
 8037260:	683b      	ldr	r3, [r7, #0]
 8037262:	681b      	ldr	r3, [r3, #0]
 8037264:	687a      	ldr	r2, [r7, #4]
 8037266:	429a      	cmp	r2, r3
 8037268:	d005      	beq.n	8037276 <ip_reass_free_complete_datagram+0x3e>
 803726a:	4b3e      	ldr	r3, [pc, #248]	; (8037364 <ip_reass_free_complete_datagram+0x12c>)
 803726c:	22ad      	movs	r2, #173	; 0xad
 803726e:	4940      	ldr	r1, [pc, #256]	; (8037370 <ip_reass_free_complete_datagram+0x138>)
 8037270:	483e      	ldr	r0, [pc, #248]	; (803736c <ip_reass_free_complete_datagram+0x134>)
 8037272:	f001 fef9 	bl	8039068 <iprintf>
  }

  MIB2_STATS_INC(mib2.ipreasmfails);
#if LWIP_ICMP
  iprh = (struct ip_reass_helper *)ipr->p->payload;
 8037276:	687b      	ldr	r3, [r7, #4]
 8037278:	685b      	ldr	r3, [r3, #4]
 803727a:	685b      	ldr	r3, [r3, #4]
 803727c:	617b      	str	r3, [r7, #20]
  if (iprh->start == 0) {
 803727e:	697b      	ldr	r3, [r7, #20]
 8037280:	889b      	ldrh	r3, [r3, #4]
 8037282:	b29b      	uxth	r3, r3
 8037284:	2b00      	cmp	r3, #0
 8037286:	d12a      	bne.n	80372de <ip_reass_free_complete_datagram+0xa6>
    /* The first fragment was received, send ICMP time exceeded. */
    /* First, de-queue the first pbuf from r->p. */
    p = ipr->p;
 8037288:	687b      	ldr	r3, [r7, #4]
 803728a:	685b      	ldr	r3, [r3, #4]
 803728c:	61bb      	str	r3, [r7, #24]
    ipr->p = iprh->next_pbuf;
 803728e:	697b      	ldr	r3, [r7, #20]
 8037290:	681a      	ldr	r2, [r3, #0]
 8037292:	687b      	ldr	r3, [r7, #4]
 8037294:	605a      	str	r2, [r3, #4]
    /* Then, copy the original header into it. */
    SMEMCPY(p->payload, &ipr->iphdr, IP_HLEN);
 8037296:	69bb      	ldr	r3, [r7, #24]
 8037298:	6858      	ldr	r0, [r3, #4]
 803729a:	687b      	ldr	r3, [r7, #4]
 803729c:	3308      	adds	r3, #8
 803729e:	2214      	movs	r2, #20
 80372a0:	4619      	mov	r1, r3
 80372a2:	f001 fae7 	bl	8038874 <memcpy>
    icmp_time_exceeded(p, ICMP_TE_FRAG);
 80372a6:	2101      	movs	r1, #1
 80372a8:	69b8      	ldr	r0, [r7, #24]
 80372aa:	f7ff fbcb 	bl	8036a44 <icmp_time_exceeded>
    clen = pbuf_clen(p);
 80372ae:	69b8      	ldr	r0, [r7, #24]
 80372b0:	f7f7 f8ba 	bl	802e428 <pbuf_clen>
 80372b4:	4603      	mov	r3, r0
 80372b6:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 80372b8:	8bfa      	ldrh	r2, [r7, #30]
 80372ba:	8a7b      	ldrh	r3, [r7, #18]
 80372bc:	4413      	add	r3, r2
 80372be:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80372c2:	db05      	blt.n	80372d0 <ip_reass_free_complete_datagram+0x98>
 80372c4:	4b27      	ldr	r3, [pc, #156]	; (8037364 <ip_reass_free_complete_datagram+0x12c>)
 80372c6:	22bc      	movs	r2, #188	; 0xbc
 80372c8:	492a      	ldr	r1, [pc, #168]	; (8037374 <ip_reass_free_complete_datagram+0x13c>)
 80372ca:	4828      	ldr	r0, [pc, #160]	; (803736c <ip_reass_free_complete_datagram+0x134>)
 80372cc:	f001 fecc 	bl	8039068 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 80372d0:	8bfa      	ldrh	r2, [r7, #30]
 80372d2:	8a7b      	ldrh	r3, [r7, #18]
 80372d4:	4413      	add	r3, r2
 80372d6:	83fb      	strh	r3, [r7, #30]
    pbuf_free(p);
 80372d8:	69b8      	ldr	r0, [r7, #24]
 80372da:	f7f7 f817 	bl	802e30c <pbuf_free>
  }
#endif /* LWIP_ICMP */

  /* First, free all received pbufs.  The individual pbufs need to be released
     separately as they have not yet been chained */
  p = ipr->p;
 80372de:	687b      	ldr	r3, [r7, #4]
 80372e0:	685b      	ldr	r3, [r3, #4]
 80372e2:	61bb      	str	r3, [r7, #24]
  while (p != NULL) {
 80372e4:	e01f      	b.n	8037326 <ip_reass_free_complete_datagram+0xee>
    struct pbuf *pcur;
    iprh = (struct ip_reass_helper *)p->payload;
 80372e6:	69bb      	ldr	r3, [r7, #24]
 80372e8:	685b      	ldr	r3, [r3, #4]
 80372ea:	617b      	str	r3, [r7, #20]
    pcur = p;
 80372ec:	69bb      	ldr	r3, [r7, #24]
 80372ee:	60fb      	str	r3, [r7, #12]
    /* get the next pointer before freeing */
    p = iprh->next_pbuf;
 80372f0:	697b      	ldr	r3, [r7, #20]
 80372f2:	681b      	ldr	r3, [r3, #0]
 80372f4:	61bb      	str	r3, [r7, #24]
    clen = pbuf_clen(pcur);
 80372f6:	68f8      	ldr	r0, [r7, #12]
 80372f8:	f7f7 f896 	bl	802e428 <pbuf_clen>
 80372fc:	4603      	mov	r3, r0
 80372fe:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 8037300:	8bfa      	ldrh	r2, [r7, #30]
 8037302:	8a7b      	ldrh	r3, [r7, #18]
 8037304:	4413      	add	r3, r2
 8037306:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 803730a:	db05      	blt.n	8037318 <ip_reass_free_complete_datagram+0xe0>
 803730c:	4b15      	ldr	r3, [pc, #84]	; (8037364 <ip_reass_free_complete_datagram+0x12c>)
 803730e:	22cc      	movs	r2, #204	; 0xcc
 8037310:	4918      	ldr	r1, [pc, #96]	; (8037374 <ip_reass_free_complete_datagram+0x13c>)
 8037312:	4816      	ldr	r0, [pc, #88]	; (803736c <ip_reass_free_complete_datagram+0x134>)
 8037314:	f001 fea8 	bl	8039068 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 8037318:	8bfa      	ldrh	r2, [r7, #30]
 803731a:	8a7b      	ldrh	r3, [r7, #18]
 803731c:	4413      	add	r3, r2
 803731e:	83fb      	strh	r3, [r7, #30]
    pbuf_free(pcur);
 8037320:	68f8      	ldr	r0, [r7, #12]
 8037322:	f7f6 fff3 	bl	802e30c <pbuf_free>
  while (p != NULL) {
 8037326:	69bb      	ldr	r3, [r7, #24]
 8037328:	2b00      	cmp	r3, #0
 803732a:	d1dc      	bne.n	80372e6 <ip_reass_free_complete_datagram+0xae>
  }
  /* Then, unchain the struct ip_reassdata from the list and free it. */
  ip_reass_dequeue_datagram(ipr, prev);
 803732c:	6839      	ldr	r1, [r7, #0]
 803732e:	6878      	ldr	r0, [r7, #4]
 8037330:	f000 f8ca 	bl	80374c8 <ip_reass_dequeue_datagram>
  LWIP_ASSERT("ip_reass_pbufcount >= pbufs_freed", ip_reass_pbufcount >= pbufs_freed);
 8037334:	4b10      	ldr	r3, [pc, #64]	; (8037378 <ip_reass_free_complete_datagram+0x140>)
 8037336:	881b      	ldrh	r3, [r3, #0]
 8037338:	8bfa      	ldrh	r2, [r7, #30]
 803733a:	429a      	cmp	r2, r3
 803733c:	d905      	bls.n	803734a <ip_reass_free_complete_datagram+0x112>
 803733e:	4b09      	ldr	r3, [pc, #36]	; (8037364 <ip_reass_free_complete_datagram+0x12c>)
 8037340:	22d2      	movs	r2, #210	; 0xd2
 8037342:	490e      	ldr	r1, [pc, #56]	; (803737c <ip_reass_free_complete_datagram+0x144>)
 8037344:	4809      	ldr	r0, [pc, #36]	; (803736c <ip_reass_free_complete_datagram+0x134>)
 8037346:	f001 fe8f 	bl	8039068 <iprintf>
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - pbufs_freed);
 803734a:	4b0b      	ldr	r3, [pc, #44]	; (8037378 <ip_reass_free_complete_datagram+0x140>)
 803734c:	881a      	ldrh	r2, [r3, #0]
 803734e:	8bfb      	ldrh	r3, [r7, #30]
 8037350:	1ad3      	subs	r3, r2, r3
 8037352:	b29a      	uxth	r2, r3
 8037354:	4b08      	ldr	r3, [pc, #32]	; (8037378 <ip_reass_free_complete_datagram+0x140>)
 8037356:	801a      	strh	r2, [r3, #0]

  return pbufs_freed;
 8037358:	8bfb      	ldrh	r3, [r7, #30]
}
 803735a:	4618      	mov	r0, r3
 803735c:	3720      	adds	r7, #32
 803735e:	46bd      	mov	sp, r7
 8037360:	bd80      	pop	{r7, pc}
 8037362:	bf00      	nop
 8037364:	0803d198 	.word	0x0803d198
 8037368:	0803d1d4 	.word	0x0803d1d4
 803736c:	0803d1e0 	.word	0x0803d1e0
 8037370:	0803d208 	.word	0x0803d208
 8037374:	0803d21c 	.word	0x0803d21c
 8037378:	2000f058 	.word	0x2000f058
 803737c:	0803d23c 	.word	0x0803d23c

08037380 <ip_reass_remove_oldest_datagram>:
 *        (used for freeing other datagrams if not enough space)
 * @return the number of pbufs freed
 */
static int
ip_reass_remove_oldest_datagram(struct ip_hdr *fraghdr, int pbufs_needed)
{
 8037380:	b580      	push	{r7, lr}
 8037382:	b08a      	sub	sp, #40	; 0x28
 8037384:	af00      	add	r7, sp, #0
 8037386:	6078      	str	r0, [r7, #4]
 8037388:	6039      	str	r1, [r7, #0]
  /* @todo Can't we simply remove the last datagram in the
   *       linked list behind reassdatagrams?
   */
  struct ip_reassdata *r, *oldest, *prev, *oldest_prev;
  int pbufs_freed = 0, pbufs_freed_current;
 803738a:	2300      	movs	r3, #0
 803738c:	617b      	str	r3, [r7, #20]
  int other_datagrams;

  /* Free datagrams until being allowed to enqueue 'pbufs_needed' pbufs,
   * but don't free the datagram that 'fraghdr' belongs to! */
  do {
    oldest = NULL;
 803738e:	2300      	movs	r3, #0
 8037390:	623b      	str	r3, [r7, #32]
    prev = NULL;
 8037392:	2300      	movs	r3, #0
 8037394:	61fb      	str	r3, [r7, #28]
    oldest_prev = NULL;
 8037396:	2300      	movs	r3, #0
 8037398:	61bb      	str	r3, [r7, #24]
    other_datagrams = 0;
 803739a:	2300      	movs	r3, #0
 803739c:	613b      	str	r3, [r7, #16]
    r = reassdatagrams;
 803739e:	4b28      	ldr	r3, [pc, #160]	; (8037440 <ip_reass_remove_oldest_datagram+0xc0>)
 80373a0:	681b      	ldr	r3, [r3, #0]
 80373a2:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 80373a4:	e030      	b.n	8037408 <ip_reass_remove_oldest_datagram+0x88>
      if (!IP_ADDRESSES_AND_ID_MATCH(&r->iphdr, fraghdr)) {
 80373a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80373a8:	695a      	ldr	r2, [r3, #20]
 80373aa:	687b      	ldr	r3, [r7, #4]
 80373ac:	68db      	ldr	r3, [r3, #12]
 80373ae:	429a      	cmp	r2, r3
 80373b0:	d10c      	bne.n	80373cc <ip_reass_remove_oldest_datagram+0x4c>
 80373b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80373b4:	699a      	ldr	r2, [r3, #24]
 80373b6:	687b      	ldr	r3, [r7, #4]
 80373b8:	691b      	ldr	r3, [r3, #16]
 80373ba:	429a      	cmp	r2, r3
 80373bc:	d106      	bne.n	80373cc <ip_reass_remove_oldest_datagram+0x4c>
 80373be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80373c0:	899a      	ldrh	r2, [r3, #12]
 80373c2:	687b      	ldr	r3, [r7, #4]
 80373c4:	889b      	ldrh	r3, [r3, #4]
 80373c6:	b29b      	uxth	r3, r3
 80373c8:	429a      	cmp	r2, r3
 80373ca:	d014      	beq.n	80373f6 <ip_reass_remove_oldest_datagram+0x76>
        /* Not the same datagram as fraghdr */
        other_datagrams++;
 80373cc:	693b      	ldr	r3, [r7, #16]
 80373ce:	3301      	adds	r3, #1
 80373d0:	613b      	str	r3, [r7, #16]
        if (oldest == NULL) {
 80373d2:	6a3b      	ldr	r3, [r7, #32]
 80373d4:	2b00      	cmp	r3, #0
 80373d6:	d104      	bne.n	80373e2 <ip_reass_remove_oldest_datagram+0x62>
          oldest = r;
 80373d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80373da:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 80373dc:	69fb      	ldr	r3, [r7, #28]
 80373de:	61bb      	str	r3, [r7, #24]
 80373e0:	e009      	b.n	80373f6 <ip_reass_remove_oldest_datagram+0x76>
        } else if (r->timer <= oldest->timer) {
 80373e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80373e4:	7fda      	ldrb	r2, [r3, #31]
 80373e6:	6a3b      	ldr	r3, [r7, #32]
 80373e8:	7fdb      	ldrb	r3, [r3, #31]
 80373ea:	429a      	cmp	r2, r3
 80373ec:	d803      	bhi.n	80373f6 <ip_reass_remove_oldest_datagram+0x76>
          /* older than the previous oldest */
          oldest = r;
 80373ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80373f0:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 80373f2:	69fb      	ldr	r3, [r7, #28]
 80373f4:	61bb      	str	r3, [r7, #24]
        }
      }
      if (r->next != NULL) {
 80373f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80373f8:	681b      	ldr	r3, [r3, #0]
 80373fa:	2b00      	cmp	r3, #0
 80373fc:	d001      	beq.n	8037402 <ip_reass_remove_oldest_datagram+0x82>
        prev = r;
 80373fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8037400:	61fb      	str	r3, [r7, #28]
      }
      r = r->next;
 8037402:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8037404:	681b      	ldr	r3, [r3, #0]
 8037406:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 8037408:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 803740a:	2b00      	cmp	r3, #0
 803740c:	d1cb      	bne.n	80373a6 <ip_reass_remove_oldest_datagram+0x26>
    }
    if (oldest != NULL) {
 803740e:	6a3b      	ldr	r3, [r7, #32]
 8037410:	2b00      	cmp	r3, #0
 8037412:	d008      	beq.n	8037426 <ip_reass_remove_oldest_datagram+0xa6>
      pbufs_freed_current = ip_reass_free_complete_datagram(oldest, oldest_prev);
 8037414:	69b9      	ldr	r1, [r7, #24]
 8037416:	6a38      	ldr	r0, [r7, #32]
 8037418:	f7ff ff0e 	bl	8037238 <ip_reass_free_complete_datagram>
 803741c:	60f8      	str	r0, [r7, #12]
      pbufs_freed += pbufs_freed_current;
 803741e:	697a      	ldr	r2, [r7, #20]
 8037420:	68fb      	ldr	r3, [r7, #12]
 8037422:	4413      	add	r3, r2
 8037424:	617b      	str	r3, [r7, #20]
    }
  } while ((pbufs_freed < pbufs_needed) && (other_datagrams > 1));
 8037426:	697a      	ldr	r2, [r7, #20]
 8037428:	683b      	ldr	r3, [r7, #0]
 803742a:	429a      	cmp	r2, r3
 803742c:	da02      	bge.n	8037434 <ip_reass_remove_oldest_datagram+0xb4>
 803742e:	693b      	ldr	r3, [r7, #16]
 8037430:	2b01      	cmp	r3, #1
 8037432:	dcac      	bgt.n	803738e <ip_reass_remove_oldest_datagram+0xe>
  return pbufs_freed;
 8037434:	697b      	ldr	r3, [r7, #20]
}
 8037436:	4618      	mov	r0, r3
 8037438:	3728      	adds	r7, #40	; 0x28
 803743a:	46bd      	mov	sp, r7
 803743c:	bd80      	pop	{r7, pc}
 803743e:	bf00      	nop
 8037440:	2000f054 	.word	0x2000f054

08037444 <ip_reass_enqueue_new_datagram>:
 * @param clen number of pbufs needed to enqueue (used for freeing other datagrams if not enough space)
 * @return A pointer to the queue location into which the fragment was enqueued
 */
static struct ip_reassdata *
ip_reass_enqueue_new_datagram(struct ip_hdr *fraghdr, int clen)
{
 8037444:	b580      	push	{r7, lr}
 8037446:	b084      	sub	sp, #16
 8037448:	af00      	add	r7, sp, #0
 803744a:	6078      	str	r0, [r7, #4]
 803744c:	6039      	str	r1, [r7, #0]
#if ! IP_REASS_FREE_OLDEST
  LWIP_UNUSED_ARG(clen);
#endif

  /* No matching previous fragment found, allocate a new reassdata struct */
  ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 803744e:	2004      	movs	r0, #4
 8037450:	f7f6 f80a 	bl	802d468 <memp_malloc>
 8037454:	60f8      	str	r0, [r7, #12]
  if (ipr == NULL) {
 8037456:	68fb      	ldr	r3, [r7, #12]
 8037458:	2b00      	cmp	r3, #0
 803745a:	d116      	bne.n	803748a <ip_reass_enqueue_new_datagram+0x46>
#if IP_REASS_FREE_OLDEST
    if (ip_reass_remove_oldest_datagram(fraghdr, clen) >= clen) {
 803745c:	6839      	ldr	r1, [r7, #0]
 803745e:	6878      	ldr	r0, [r7, #4]
 8037460:	f7ff ff8e 	bl	8037380 <ip_reass_remove_oldest_datagram>
 8037464:	4602      	mov	r2, r0
 8037466:	683b      	ldr	r3, [r7, #0]
 8037468:	4293      	cmp	r3, r2
 803746a:	dc03      	bgt.n	8037474 <ip_reass_enqueue_new_datagram+0x30>
      ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 803746c:	2004      	movs	r0, #4
 803746e:	f7f5 fffb 	bl	802d468 <memp_malloc>
 8037472:	60f8      	str	r0, [r7, #12]
    }
    if (ipr == NULL)
 8037474:	68fb      	ldr	r3, [r7, #12]
 8037476:	2b00      	cmp	r3, #0
 8037478:	d107      	bne.n	803748a <ip_reass_enqueue_new_datagram+0x46>
#endif /* IP_REASS_FREE_OLDEST */
    {
      IPFRAG_STATS_INC(ip_frag.memerr);
 803747a:	4b11      	ldr	r3, [pc, #68]	; (80374c0 <ip_reass_enqueue_new_datagram+0x7c>)
 803747c:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 803747e:	3301      	adds	r3, #1
 8037480:	b29a      	uxth	r2, r3
 8037482:	4b0f      	ldr	r3, [pc, #60]	; (80374c0 <ip_reass_enqueue_new_datagram+0x7c>)
 8037484:	879a      	strh	r2, [r3, #60]	; 0x3c
      LWIP_DEBUGF(IP_REASS_DEBUG, ("Failed to alloc reassdata struct\n"));
      return NULL;
 8037486:	2300      	movs	r3, #0
 8037488:	e016      	b.n	80374b8 <ip_reass_enqueue_new_datagram+0x74>
    }
  }
  memset(ipr, 0, sizeof(struct ip_reassdata));
 803748a:	2220      	movs	r2, #32
 803748c:	2100      	movs	r1, #0
 803748e:	68f8      	ldr	r0, [r7, #12]
 8037490:	f001 f9fe 	bl	8038890 <memset>
  ipr->timer = IP_REASS_MAXAGE;
 8037494:	68fb      	ldr	r3, [r7, #12]
 8037496:	220f      	movs	r2, #15
 8037498:	77da      	strb	r2, [r3, #31]

  /* enqueue the new structure to the front of the list */
  ipr->next = reassdatagrams;
 803749a:	4b0a      	ldr	r3, [pc, #40]	; (80374c4 <ip_reass_enqueue_new_datagram+0x80>)
 803749c:	681a      	ldr	r2, [r3, #0]
 803749e:	68fb      	ldr	r3, [r7, #12]
 80374a0:	601a      	str	r2, [r3, #0]
  reassdatagrams = ipr;
 80374a2:	4a08      	ldr	r2, [pc, #32]	; (80374c4 <ip_reass_enqueue_new_datagram+0x80>)
 80374a4:	68fb      	ldr	r3, [r7, #12]
 80374a6:	6013      	str	r3, [r2, #0]
  /* copy the ip header for later tests and input */
  /* @todo: no ip options supported? */
  SMEMCPY(&(ipr->iphdr), fraghdr, IP_HLEN);
 80374a8:	68fb      	ldr	r3, [r7, #12]
 80374aa:	3308      	adds	r3, #8
 80374ac:	2214      	movs	r2, #20
 80374ae:	6879      	ldr	r1, [r7, #4]
 80374b0:	4618      	mov	r0, r3
 80374b2:	f001 f9df 	bl	8038874 <memcpy>
  return ipr;
 80374b6:	68fb      	ldr	r3, [r7, #12]
}
 80374b8:	4618      	mov	r0, r3
 80374ba:	3710      	adds	r7, #16
 80374bc:	46bd      	mov	sp, r7
 80374be:	bd80      	pop	{r7, pc}
 80374c0:	2000ee04 	.word	0x2000ee04
 80374c4:	2000f054 	.word	0x2000f054

080374c8 <ip_reass_dequeue_datagram>:
 * Dequeues a datagram from the datagram queue. Doesn't deallocate the pbufs.
 * @param ipr points to the queue entry to dequeue
 */
static void
ip_reass_dequeue_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 80374c8:	b580      	push	{r7, lr}
 80374ca:	b082      	sub	sp, #8
 80374cc:	af00      	add	r7, sp, #0
 80374ce:	6078      	str	r0, [r7, #4]
 80374d0:	6039      	str	r1, [r7, #0]
  /* dequeue the reass struct  */
  if (reassdatagrams == ipr) {
 80374d2:	4b10      	ldr	r3, [pc, #64]	; (8037514 <ip_reass_dequeue_datagram+0x4c>)
 80374d4:	681b      	ldr	r3, [r3, #0]
 80374d6:	687a      	ldr	r2, [r7, #4]
 80374d8:	429a      	cmp	r2, r3
 80374da:	d104      	bne.n	80374e6 <ip_reass_dequeue_datagram+0x1e>
    /* it was the first in the list */
    reassdatagrams = ipr->next;
 80374dc:	687b      	ldr	r3, [r7, #4]
 80374de:	681b      	ldr	r3, [r3, #0]
 80374e0:	4a0c      	ldr	r2, [pc, #48]	; (8037514 <ip_reass_dequeue_datagram+0x4c>)
 80374e2:	6013      	str	r3, [r2, #0]
 80374e4:	e00d      	b.n	8037502 <ip_reass_dequeue_datagram+0x3a>
  } else {
    /* it wasn't the first, so it must have a valid 'prev' */
    LWIP_ASSERT("sanity check linked list", prev != NULL);
 80374e6:	683b      	ldr	r3, [r7, #0]
 80374e8:	2b00      	cmp	r3, #0
 80374ea:	d106      	bne.n	80374fa <ip_reass_dequeue_datagram+0x32>
 80374ec:	4b0a      	ldr	r3, [pc, #40]	; (8037518 <ip_reass_dequeue_datagram+0x50>)
 80374ee:	f240 1245 	movw	r2, #325	; 0x145
 80374f2:	490a      	ldr	r1, [pc, #40]	; (803751c <ip_reass_dequeue_datagram+0x54>)
 80374f4:	480a      	ldr	r0, [pc, #40]	; (8037520 <ip_reass_dequeue_datagram+0x58>)
 80374f6:	f001 fdb7 	bl	8039068 <iprintf>
    prev->next = ipr->next;
 80374fa:	687b      	ldr	r3, [r7, #4]
 80374fc:	681a      	ldr	r2, [r3, #0]
 80374fe:	683b      	ldr	r3, [r7, #0]
 8037500:	601a      	str	r2, [r3, #0]
  }

  /* now we can free the ip_reassdata struct */
  memp_free(MEMP_REASSDATA, ipr);
 8037502:	6879      	ldr	r1, [r7, #4]
 8037504:	2004      	movs	r0, #4
 8037506:	f7f6 f82b 	bl	802d560 <memp_free>
}
 803750a:	bf00      	nop
 803750c:	3708      	adds	r7, #8
 803750e:	46bd      	mov	sp, r7
 8037510:	bd80      	pop	{r7, pc}
 8037512:	bf00      	nop
 8037514:	2000f054 	.word	0x2000f054
 8037518:	0803d198 	.word	0x0803d198
 803751c:	0803d260 	.word	0x0803d260
 8037520:	0803d1e0 	.word	0x0803d1e0

08037524 <ip_reass_chain_frag_into_datagram_and_validate>:
 * @param is_last is 1 if this pbuf has MF==0 (ipr->flags not updated yet)
 * @return see IP_REASS_VALIDATE_* defines
 */
static int
ip_reass_chain_frag_into_datagram_and_validate(struct ip_reassdata *ipr, struct pbuf *new_p, int is_last)
{
 8037524:	b580      	push	{r7, lr}
 8037526:	b08c      	sub	sp, #48	; 0x30
 8037528:	af00      	add	r7, sp, #0
 803752a:	60f8      	str	r0, [r7, #12]
 803752c:	60b9      	str	r1, [r7, #8]
 803752e:	607a      	str	r2, [r7, #4]
  struct ip_reass_helper *iprh, *iprh_tmp, *iprh_prev = NULL;
 8037530:	2300      	movs	r3, #0
 8037532:	62bb      	str	r3, [r7, #40]	; 0x28
  struct pbuf *q;
  u16_t offset, len;
  u8_t hlen;
  struct ip_hdr *fraghdr;
  int valid = 1;
 8037534:	2301      	movs	r3, #1
 8037536:	623b      	str	r3, [r7, #32]

  /* Extract length and fragment offset from current fragment */
  fraghdr = (struct ip_hdr *)new_p->payload;
 8037538:	68bb      	ldr	r3, [r7, #8]
 803753a:	685b      	ldr	r3, [r3, #4]
 803753c:	61fb      	str	r3, [r7, #28]
  len = lwip_ntohs(IPH_LEN(fraghdr));
 803753e:	69fb      	ldr	r3, [r7, #28]
 8037540:	885b      	ldrh	r3, [r3, #2]
 8037542:	b29b      	uxth	r3, r3
 8037544:	4618      	mov	r0, r3
 8037546:	f7f5 f9ed 	bl	802c924 <lwip_htons>
 803754a:	4603      	mov	r3, r0
 803754c:	837b      	strh	r3, [r7, #26]
  hlen = IPH_HL_BYTES(fraghdr);
 803754e:	69fb      	ldr	r3, [r7, #28]
 8037550:	781b      	ldrb	r3, [r3, #0]
 8037552:	f003 030f 	and.w	r3, r3, #15
 8037556:	b2db      	uxtb	r3, r3
 8037558:	009b      	lsls	r3, r3, #2
 803755a:	767b      	strb	r3, [r7, #25]
  if (hlen > len) {
 803755c:	7e7b      	ldrb	r3, [r7, #25]
 803755e:	b29b      	uxth	r3, r3
 8037560:	8b7a      	ldrh	r2, [r7, #26]
 8037562:	429a      	cmp	r2, r3
 8037564:	d202      	bcs.n	803756c <ip_reass_chain_frag_into_datagram_and_validate+0x48>
    /* invalid datagram */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 8037566:	f04f 33ff 	mov.w	r3, #4294967295
 803756a:	e135      	b.n	80377d8 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  len = (u16_t)(len - hlen);
 803756c:	7e7b      	ldrb	r3, [r7, #25]
 803756e:	b29b      	uxth	r3, r3
 8037570:	8b7a      	ldrh	r2, [r7, #26]
 8037572:	1ad3      	subs	r3, r2, r3
 8037574:	837b      	strh	r3, [r7, #26]
  offset = IPH_OFFSET_BYTES(fraghdr);
 8037576:	69fb      	ldr	r3, [r7, #28]
 8037578:	88db      	ldrh	r3, [r3, #6]
 803757a:	b29b      	uxth	r3, r3
 803757c:	4618      	mov	r0, r3
 803757e:	f7f5 f9d1 	bl	802c924 <lwip_htons>
 8037582:	4603      	mov	r3, r0
 8037584:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8037588:	b29b      	uxth	r3, r3
 803758a:	00db      	lsls	r3, r3, #3
 803758c:	82fb      	strh	r3, [r7, #22]
  /* overwrite the fragment's ip header from the pbuf with our helper struct,
   * and setup the embedded helper structure. */
  /* make sure the struct ip_reass_helper fits into the IP header */
  LWIP_ASSERT("sizeof(struct ip_reass_helper) <= IP_HLEN",
              sizeof(struct ip_reass_helper) <= IP_HLEN);
  iprh = (struct ip_reass_helper *)new_p->payload;
 803758e:	68bb      	ldr	r3, [r7, #8]
 8037590:	685b      	ldr	r3, [r3, #4]
 8037592:	62fb      	str	r3, [r7, #44]	; 0x2c
  iprh->next_pbuf = NULL;
 8037594:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8037596:	2200      	movs	r2, #0
 8037598:	701a      	strb	r2, [r3, #0]
 803759a:	2200      	movs	r2, #0
 803759c:	705a      	strb	r2, [r3, #1]
 803759e:	2200      	movs	r2, #0
 80375a0:	709a      	strb	r2, [r3, #2]
 80375a2:	2200      	movs	r2, #0
 80375a4:	70da      	strb	r2, [r3, #3]
  iprh->start = offset;
 80375a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80375a8:	8afa      	ldrh	r2, [r7, #22]
 80375aa:	809a      	strh	r2, [r3, #4]
  iprh->end = (u16_t)(offset + len);
 80375ac:	8afa      	ldrh	r2, [r7, #22]
 80375ae:	8b7b      	ldrh	r3, [r7, #26]
 80375b0:	4413      	add	r3, r2
 80375b2:	b29a      	uxth	r2, r3
 80375b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80375b6:	80da      	strh	r2, [r3, #6]
  if (iprh->end < offset) {
 80375b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80375ba:	88db      	ldrh	r3, [r3, #6]
 80375bc:	b29b      	uxth	r3, r3
 80375be:	8afa      	ldrh	r2, [r7, #22]
 80375c0:	429a      	cmp	r2, r3
 80375c2:	d902      	bls.n	80375ca <ip_reass_chain_frag_into_datagram_and_validate+0xa6>
    /* u16_t overflow, cannot handle this */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 80375c4:	f04f 33ff 	mov.w	r3, #4294967295
 80375c8:	e106      	b.n	80377d8 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }

  /* Iterate through until we either get to the end of the list (append),
   * or we find one with a larger offset (insert). */
  for (q = ipr->p; q != NULL;) {
 80375ca:	68fb      	ldr	r3, [r7, #12]
 80375cc:	685b      	ldr	r3, [r3, #4]
 80375ce:	627b      	str	r3, [r7, #36]	; 0x24
 80375d0:	e068      	b.n	80376a4 <ip_reass_chain_frag_into_datagram_and_validate+0x180>
    iprh_tmp = (struct ip_reass_helper *)q->payload;
 80375d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80375d4:	685b      	ldr	r3, [r3, #4]
 80375d6:	613b      	str	r3, [r7, #16]
    if (iprh->start < iprh_tmp->start) {
 80375d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80375da:	889b      	ldrh	r3, [r3, #4]
 80375dc:	b29a      	uxth	r2, r3
 80375de:	693b      	ldr	r3, [r7, #16]
 80375e0:	889b      	ldrh	r3, [r3, #4]
 80375e2:	b29b      	uxth	r3, r3
 80375e4:	429a      	cmp	r2, r3
 80375e6:	d235      	bcs.n	8037654 <ip_reass_chain_frag_into_datagram_and_validate+0x130>
      /* the new pbuf should be inserted before this */
      iprh->next_pbuf = q;
 80375e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80375ea:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80375ec:	601a      	str	r2, [r3, #0]
      if (iprh_prev != NULL) {
 80375ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80375f0:	2b00      	cmp	r3, #0
 80375f2:	d020      	beq.n	8037636 <ip_reass_chain_frag_into_datagram_and_validate+0x112>
        /* not the fragment with the lowest offset */
#if IP_REASS_CHECK_OVERLAP
        if ((iprh->start < iprh_prev->end) || (iprh->end > iprh_tmp->start)) {
 80375f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80375f6:	889b      	ldrh	r3, [r3, #4]
 80375f8:	b29a      	uxth	r2, r3
 80375fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80375fc:	88db      	ldrh	r3, [r3, #6]
 80375fe:	b29b      	uxth	r3, r3
 8037600:	429a      	cmp	r2, r3
 8037602:	d307      	bcc.n	8037614 <ip_reass_chain_frag_into_datagram_and_validate+0xf0>
 8037604:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8037606:	88db      	ldrh	r3, [r3, #6]
 8037608:	b29a      	uxth	r2, r3
 803760a:	693b      	ldr	r3, [r7, #16]
 803760c:	889b      	ldrh	r3, [r3, #4]
 803760e:	b29b      	uxth	r3, r3
 8037610:	429a      	cmp	r2, r3
 8037612:	d902      	bls.n	803761a <ip_reass_chain_frag_into_datagram_and_validate+0xf6>
          /* fragment overlaps with previous or following, throw away */
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 8037614:	f04f 33ff 	mov.w	r3, #4294967295
 8037618:	e0de      	b.n	80377d8 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        iprh_prev->next_pbuf = new_p;
 803761a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 803761c:	68ba      	ldr	r2, [r7, #8]
 803761e:	601a      	str	r2, [r3, #0]
        if (iprh_prev->end != iprh->start) {
 8037620:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8037622:	88db      	ldrh	r3, [r3, #6]
 8037624:	b29a      	uxth	r2, r3
 8037626:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8037628:	889b      	ldrh	r3, [r3, #4]
 803762a:	b29b      	uxth	r3, r3
 803762c:	429a      	cmp	r2, r3
 803762e:	d03d      	beq.n	80376ac <ip_reass_chain_frag_into_datagram_and_validate+0x188>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 8037630:	2300      	movs	r3, #0
 8037632:	623b      	str	r3, [r7, #32]
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        /* fragment with the lowest offset */
        ipr->p = new_p;
      }
      break;
 8037634:	e03a      	b.n	80376ac <ip_reass_chain_frag_into_datagram_and_validate+0x188>
        if (iprh->end > iprh_tmp->start) {
 8037636:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8037638:	88db      	ldrh	r3, [r3, #6]
 803763a:	b29a      	uxth	r2, r3
 803763c:	693b      	ldr	r3, [r7, #16]
 803763e:	889b      	ldrh	r3, [r3, #4]
 8037640:	b29b      	uxth	r3, r3
 8037642:	429a      	cmp	r2, r3
 8037644:	d902      	bls.n	803764c <ip_reass_chain_frag_into_datagram_and_validate+0x128>
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 8037646:	f04f 33ff 	mov.w	r3, #4294967295
 803764a:	e0c5      	b.n	80377d8 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        ipr->p = new_p;
 803764c:	68fb      	ldr	r3, [r7, #12]
 803764e:	68ba      	ldr	r2, [r7, #8]
 8037650:	605a      	str	r2, [r3, #4]
      break;
 8037652:	e02b      	b.n	80376ac <ip_reass_chain_frag_into_datagram_and_validate+0x188>
    } else if (iprh->start == iprh_tmp->start) {
 8037654:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8037656:	889b      	ldrh	r3, [r3, #4]
 8037658:	b29a      	uxth	r2, r3
 803765a:	693b      	ldr	r3, [r7, #16]
 803765c:	889b      	ldrh	r3, [r3, #4]
 803765e:	b29b      	uxth	r3, r3
 8037660:	429a      	cmp	r2, r3
 8037662:	d102      	bne.n	803766a <ip_reass_chain_frag_into_datagram_and_validate+0x146>
      /* received the same datagram twice: no need to keep the datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 8037664:	f04f 33ff 	mov.w	r3, #4294967295
 8037668:	e0b6      	b.n	80377d8 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#if IP_REASS_CHECK_OVERLAP
    } else if (iprh->start < iprh_tmp->end) {
 803766a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 803766c:	889b      	ldrh	r3, [r3, #4]
 803766e:	b29a      	uxth	r2, r3
 8037670:	693b      	ldr	r3, [r7, #16]
 8037672:	88db      	ldrh	r3, [r3, #6]
 8037674:	b29b      	uxth	r3, r3
 8037676:	429a      	cmp	r2, r3
 8037678:	d202      	bcs.n	8037680 <ip_reass_chain_frag_into_datagram_and_validate+0x15c>
      /* overlap: no need to keep the new datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 803767a:	f04f 33ff 	mov.w	r3, #4294967295
 803767e:	e0ab      	b.n	80377d8 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#endif /* IP_REASS_CHECK_OVERLAP */
    } else {
      /* Check if the fragments received so far have no holes. */
      if (iprh_prev != NULL) {
 8037680:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8037682:	2b00      	cmp	r3, #0
 8037684:	d009      	beq.n	803769a <ip_reass_chain_frag_into_datagram_and_validate+0x176>
        if (iprh_prev->end != iprh_tmp->start) {
 8037686:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8037688:	88db      	ldrh	r3, [r3, #6]
 803768a:	b29a      	uxth	r2, r3
 803768c:	693b      	ldr	r3, [r7, #16]
 803768e:	889b      	ldrh	r3, [r3, #4]
 8037690:	b29b      	uxth	r3, r3
 8037692:	429a      	cmp	r2, r3
 8037694:	d001      	beq.n	803769a <ip_reass_chain_frag_into_datagram_and_validate+0x176>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 8037696:	2300      	movs	r3, #0
 8037698:	623b      	str	r3, [r7, #32]
        }
      }
    }
    q = iprh_tmp->next_pbuf;
 803769a:	693b      	ldr	r3, [r7, #16]
 803769c:	681b      	ldr	r3, [r3, #0]
 803769e:	627b      	str	r3, [r7, #36]	; 0x24
    iprh_prev = iprh_tmp;
 80376a0:	693b      	ldr	r3, [r7, #16]
 80376a2:	62bb      	str	r3, [r7, #40]	; 0x28
  for (q = ipr->p; q != NULL;) {
 80376a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80376a6:	2b00      	cmp	r3, #0
 80376a8:	d193      	bne.n	80375d2 <ip_reass_chain_frag_into_datagram_and_validate+0xae>
 80376aa:	e000      	b.n	80376ae <ip_reass_chain_frag_into_datagram_and_validate+0x18a>
      break;
 80376ac:	bf00      	nop
  }

  /* If q is NULL, then we made it to the end of the list. Determine what to do now */
  if (q == NULL) {
 80376ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80376b0:	2b00      	cmp	r3, #0
 80376b2:	d12d      	bne.n	8037710 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
    if (iprh_prev != NULL) {
 80376b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80376b6:	2b00      	cmp	r3, #0
 80376b8:	d01c      	beq.n	80376f4 <ip_reass_chain_frag_into_datagram_and_validate+0x1d0>
      /* this is (for now), the fragment with the highest offset:
       * chain it to the last fragment */
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("check fragments don't overlap", iprh_prev->end <= iprh->start);
 80376ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80376bc:	88db      	ldrh	r3, [r3, #6]
 80376be:	b29a      	uxth	r2, r3
 80376c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80376c2:	889b      	ldrh	r3, [r3, #4]
 80376c4:	b29b      	uxth	r3, r3
 80376c6:	429a      	cmp	r2, r3
 80376c8:	d906      	bls.n	80376d8 <ip_reass_chain_frag_into_datagram_and_validate+0x1b4>
 80376ca:	4b45      	ldr	r3, [pc, #276]	; (80377e0 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 80376cc:	f44f 72db 	mov.w	r2, #438	; 0x1b6
 80376d0:	4944      	ldr	r1, [pc, #272]	; (80377e4 <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 80376d2:	4845      	ldr	r0, [pc, #276]	; (80377e8 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 80376d4:	f001 fcc8 	bl	8039068 <iprintf>
#endif /* IP_REASS_CHECK_OVERLAP */
      iprh_prev->next_pbuf = new_p;
 80376d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80376da:	68ba      	ldr	r2, [r7, #8]
 80376dc:	601a      	str	r2, [r3, #0]
      if (iprh_prev->end != iprh->start) {
 80376de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80376e0:	88db      	ldrh	r3, [r3, #6]
 80376e2:	b29a      	uxth	r2, r3
 80376e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80376e6:	889b      	ldrh	r3, [r3, #4]
 80376e8:	b29b      	uxth	r3, r3
 80376ea:	429a      	cmp	r2, r3
 80376ec:	d010      	beq.n	8037710 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
        valid = 0;
 80376ee:	2300      	movs	r3, #0
 80376f0:	623b      	str	r3, [r7, #32]
 80376f2:	e00d      	b.n	8037710 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
      }
    } else {
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("no previous fragment, this must be the first fragment!",
 80376f4:	68fb      	ldr	r3, [r7, #12]
 80376f6:	685b      	ldr	r3, [r3, #4]
 80376f8:	2b00      	cmp	r3, #0
 80376fa:	d006      	beq.n	803770a <ip_reass_chain_frag_into_datagram_and_validate+0x1e6>
 80376fc:	4b38      	ldr	r3, [pc, #224]	; (80377e0 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 80376fe:	f44f 72df 	mov.w	r2, #446	; 0x1be
 8037702:	493a      	ldr	r1, [pc, #232]	; (80377ec <ip_reass_chain_frag_into_datagram_and_validate+0x2c8>)
 8037704:	4838      	ldr	r0, [pc, #224]	; (80377e8 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8037706:	f001 fcaf 	bl	8039068 <iprintf>
                  ipr->p == NULL);
#endif /* IP_REASS_CHECK_OVERLAP */
      /* this is the first fragment we ever received for this ip datagram */
      ipr->p = new_p;
 803770a:	68fb      	ldr	r3, [r7, #12]
 803770c:	68ba      	ldr	r2, [r7, #8]
 803770e:	605a      	str	r2, [r3, #4]
    }
  }

  /* At this point, the validation part begins: */
  /* If we already received the last fragment */
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
 8037710:	687b      	ldr	r3, [r7, #4]
 8037712:	2b00      	cmp	r3, #0
 8037714:	d105      	bne.n	8037722 <ip_reass_chain_frag_into_datagram_and_validate+0x1fe>
 8037716:	68fb      	ldr	r3, [r7, #12]
 8037718:	7f9b      	ldrb	r3, [r3, #30]
 803771a:	f003 0301 	and.w	r3, r3, #1
 803771e:	2b00      	cmp	r3, #0
 8037720:	d059      	beq.n	80377d6 <ip_reass_chain_frag_into_datagram_and_validate+0x2b2>
    /* and had no holes so far */
    if (valid) {
 8037722:	6a3b      	ldr	r3, [r7, #32]
 8037724:	2b00      	cmp	r3, #0
 8037726:	d04f      	beq.n	80377c8 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      /* then check if the rest of the fragments is here */
      /* Check if the queue starts with the first datagram */
      if ((ipr->p == NULL) || (((struct ip_reass_helper *)ipr->p->payload)->start != 0)) {
 8037728:	68fb      	ldr	r3, [r7, #12]
 803772a:	685b      	ldr	r3, [r3, #4]
 803772c:	2b00      	cmp	r3, #0
 803772e:	d006      	beq.n	803773e <ip_reass_chain_frag_into_datagram_and_validate+0x21a>
 8037730:	68fb      	ldr	r3, [r7, #12]
 8037732:	685b      	ldr	r3, [r3, #4]
 8037734:	685b      	ldr	r3, [r3, #4]
 8037736:	889b      	ldrh	r3, [r3, #4]
 8037738:	b29b      	uxth	r3, r3
 803773a:	2b00      	cmp	r3, #0
 803773c:	d002      	beq.n	8037744 <ip_reass_chain_frag_into_datagram_and_validate+0x220>
        valid = 0;
 803773e:	2300      	movs	r3, #0
 8037740:	623b      	str	r3, [r7, #32]
 8037742:	e041      	b.n	80377c8 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      } else {
        /* and check that there are no holes after this datagram */
        iprh_prev = iprh;
 8037744:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8037746:	62bb      	str	r3, [r7, #40]	; 0x28
        q = iprh->next_pbuf;
 8037748:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 803774a:	681b      	ldr	r3, [r3, #0]
 803774c:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 803774e:	e012      	b.n	8037776 <ip_reass_chain_frag_into_datagram_and_validate+0x252>
          iprh = (struct ip_reass_helper *)q->payload;
 8037750:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8037752:	685b      	ldr	r3, [r3, #4]
 8037754:	62fb      	str	r3, [r7, #44]	; 0x2c
          if (iprh_prev->end != iprh->start) {
 8037756:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8037758:	88db      	ldrh	r3, [r3, #6]
 803775a:	b29a      	uxth	r2, r3
 803775c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 803775e:	889b      	ldrh	r3, [r3, #4]
 8037760:	b29b      	uxth	r3, r3
 8037762:	429a      	cmp	r2, r3
 8037764:	d002      	beq.n	803776c <ip_reass_chain_frag_into_datagram_and_validate+0x248>
            valid = 0;
 8037766:	2300      	movs	r3, #0
 8037768:	623b      	str	r3, [r7, #32]
            break;
 803776a:	e007      	b.n	803777c <ip_reass_chain_frag_into_datagram_and_validate+0x258>
          }
          iprh_prev = iprh;
 803776c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 803776e:	62bb      	str	r3, [r7, #40]	; 0x28
          q = iprh->next_pbuf;
 8037770:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8037772:	681b      	ldr	r3, [r3, #0]
 8037774:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 8037776:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8037778:	2b00      	cmp	r3, #0
 803777a:	d1e9      	bne.n	8037750 <ip_reass_chain_frag_into_datagram_and_validate+0x22c>
        }
        /* if still valid, all fragments are received
         * (because to the MF==0 already arrived */
        if (valid) {
 803777c:	6a3b      	ldr	r3, [r7, #32]
 803777e:	2b00      	cmp	r3, #0
 8037780:	d022      	beq.n	80377c8 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
          LWIP_ASSERT("sanity check", ipr->p != NULL);
 8037782:	68fb      	ldr	r3, [r7, #12]
 8037784:	685b      	ldr	r3, [r3, #4]
 8037786:	2b00      	cmp	r3, #0
 8037788:	d106      	bne.n	8037798 <ip_reass_chain_frag_into_datagram_and_validate+0x274>
 803778a:	4b15      	ldr	r3, [pc, #84]	; (80377e0 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 803778c:	f240 12df 	movw	r2, #479	; 0x1df
 8037790:	4917      	ldr	r1, [pc, #92]	; (80377f0 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 8037792:	4815      	ldr	r0, [pc, #84]	; (80377e8 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8037794:	f001 fc68 	bl	8039068 <iprintf>
          LWIP_ASSERT("sanity check",
 8037798:	68fb      	ldr	r3, [r7, #12]
 803779a:	685b      	ldr	r3, [r3, #4]
 803779c:	685b      	ldr	r3, [r3, #4]
 803779e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80377a0:	429a      	cmp	r2, r3
 80377a2:	d106      	bne.n	80377b2 <ip_reass_chain_frag_into_datagram_and_validate+0x28e>
 80377a4:	4b0e      	ldr	r3, [pc, #56]	; (80377e0 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 80377a6:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 80377aa:	4911      	ldr	r1, [pc, #68]	; (80377f0 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 80377ac:	480e      	ldr	r0, [pc, #56]	; (80377e8 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 80377ae:	f001 fc5b 	bl	8039068 <iprintf>
                      ((struct ip_reass_helper *)ipr->p->payload) != iprh);
          LWIP_ASSERT("validate_datagram:next_pbuf!=NULL",
 80377b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80377b4:	681b      	ldr	r3, [r3, #0]
 80377b6:	2b00      	cmp	r3, #0
 80377b8:	d006      	beq.n	80377c8 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
 80377ba:	4b09      	ldr	r3, [pc, #36]	; (80377e0 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 80377bc:	f44f 72f1 	mov.w	r2, #482	; 0x1e2
 80377c0:	490c      	ldr	r1, [pc, #48]	; (80377f4 <ip_reass_chain_frag_into_datagram_and_validate+0x2d0>)
 80377c2:	4809      	ldr	r0, [pc, #36]	; (80377e8 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 80377c4:	f001 fc50 	bl	8039068 <iprintf>
      }
    }
    /* If valid is 0 here, there are some fragments missing in the middle
     * (since MF == 0 has already arrived). Such datagrams simply time out if
     * no more fragments are received... */
    return valid ? IP_REASS_VALIDATE_TELEGRAM_FINISHED : IP_REASS_VALIDATE_PBUF_QUEUED;
 80377c8:	6a3b      	ldr	r3, [r7, #32]
 80377ca:	2b00      	cmp	r3, #0
 80377cc:	bf14      	ite	ne
 80377ce:	2301      	movne	r3, #1
 80377d0:	2300      	moveq	r3, #0
 80377d2:	b2db      	uxtb	r3, r3
 80377d4:	e000      	b.n	80377d8 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  /* If we come here, not all fragments were received, yet! */
  return IP_REASS_VALIDATE_PBUF_QUEUED; /* not yet valid! */
 80377d6:	2300      	movs	r3, #0
}
 80377d8:	4618      	mov	r0, r3
 80377da:	3730      	adds	r7, #48	; 0x30
 80377dc:	46bd      	mov	sp, r7
 80377de:	bd80      	pop	{r7, pc}
 80377e0:	0803d198 	.word	0x0803d198
 80377e4:	0803d27c 	.word	0x0803d27c
 80377e8:	0803d1e0 	.word	0x0803d1e0
 80377ec:	0803d29c 	.word	0x0803d29c
 80377f0:	0803d2d4 	.word	0x0803d2d4
 80377f4:	0803d2e4 	.word	0x0803d2e4

080377f8 <ip4_reass>:
 * @param p points to a pbuf chain of the fragment
 * @return NULL if reassembly is incomplete, ? otherwise
 */
struct pbuf *
ip4_reass(struct pbuf *p)
{
 80377f8:	b580      	push	{r7, lr}
 80377fa:	b08e      	sub	sp, #56	; 0x38
 80377fc:	af00      	add	r7, sp, #0
 80377fe:	6078      	str	r0, [r7, #4]
  u16_t offset, len, clen;
  u8_t hlen;
  int valid;
  int is_last;

  IPFRAG_STATS_INC(ip_frag.recv);
 8037800:	4b9d      	ldr	r3, [pc, #628]	; (8037a78 <ip4_reass+0x280>)
 8037802:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8037804:	3301      	adds	r3, #1
 8037806:	b29a      	uxth	r2, r3
 8037808:	4b9b      	ldr	r3, [pc, #620]	; (8037a78 <ip4_reass+0x280>)
 803780a:	865a      	strh	r2, [r3, #50]	; 0x32
  MIB2_STATS_INC(mib2.ipreasmreqds);

  fraghdr = (struct ip_hdr *)p->payload;
 803780c:	687b      	ldr	r3, [r7, #4]
 803780e:	685b      	ldr	r3, [r3, #4]
 8037810:	62bb      	str	r3, [r7, #40]	; 0x28

  if (IPH_HL_BYTES(fraghdr) != IP_HLEN) {
 8037812:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8037814:	781b      	ldrb	r3, [r3, #0]
 8037816:	f003 030f 	and.w	r3, r3, #15
 803781a:	b2db      	uxtb	r3, r3
 803781c:	009b      	lsls	r3, r3, #2
 803781e:	b2db      	uxtb	r3, r3
 8037820:	2b14      	cmp	r3, #20
 8037822:	d008      	beq.n	8037836 <ip4_reass+0x3e>
    LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: IP options currently not supported!\n"));
    IPFRAG_STATS_INC(ip_frag.err);
 8037824:	4b94      	ldr	r3, [pc, #592]	; (8037a78 <ip4_reass+0x280>)
 8037826:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 803782a:	3301      	adds	r3, #1
 803782c:	b29a      	uxth	r2, r3
 803782e:	4b92      	ldr	r3, [pc, #584]	; (8037a78 <ip4_reass+0x280>)
 8037830:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
    goto nullreturn;
 8037834:	e17c      	b.n	8037b30 <ip4_reass+0x338>
  }

  offset = IPH_OFFSET_BYTES(fraghdr);
 8037836:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8037838:	88db      	ldrh	r3, [r3, #6]
 803783a:	b29b      	uxth	r3, r3
 803783c:	4618      	mov	r0, r3
 803783e:	f7f5 f871 	bl	802c924 <lwip_htons>
 8037842:	4603      	mov	r3, r0
 8037844:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8037848:	b29b      	uxth	r3, r3
 803784a:	00db      	lsls	r3, r3, #3
 803784c:	84fb      	strh	r3, [r7, #38]	; 0x26
  len = lwip_ntohs(IPH_LEN(fraghdr));
 803784e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8037850:	885b      	ldrh	r3, [r3, #2]
 8037852:	b29b      	uxth	r3, r3
 8037854:	4618      	mov	r0, r3
 8037856:	f7f5 f865 	bl	802c924 <lwip_htons>
 803785a:	4603      	mov	r3, r0
 803785c:	84bb      	strh	r3, [r7, #36]	; 0x24
  hlen = IPH_HL_BYTES(fraghdr);
 803785e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8037860:	781b      	ldrb	r3, [r3, #0]
 8037862:	f003 030f 	and.w	r3, r3, #15
 8037866:	b2db      	uxtb	r3, r3
 8037868:	009b      	lsls	r3, r3, #2
 803786a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  if (hlen > len) {
 803786e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8037872:	b29b      	uxth	r3, r3
 8037874:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8037876:	429a      	cmp	r2, r3
 8037878:	f0c0 8157 	bcc.w	8037b2a <ip4_reass+0x332>
    /* invalid datagram */
    goto nullreturn;
  }
  len = (u16_t)(len - hlen);
 803787c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8037880:	b29b      	uxth	r3, r3
 8037882:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8037884:	1ad3      	subs	r3, r2, r3
 8037886:	84bb      	strh	r3, [r7, #36]	; 0x24

  /* Check if we are allowed to enqueue more datagrams. */
  clen = pbuf_clen(p);
 8037888:	6878      	ldr	r0, [r7, #4]
 803788a:	f7f6 fdcd 	bl	802e428 <pbuf_clen>
 803788e:	4603      	mov	r3, r0
 8037890:	843b      	strh	r3, [r7, #32]
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
 8037892:	4b7a      	ldr	r3, [pc, #488]	; (8037a7c <ip4_reass+0x284>)
 8037894:	881b      	ldrh	r3, [r3, #0]
 8037896:	461a      	mov	r2, r3
 8037898:	8c3b      	ldrh	r3, [r7, #32]
 803789a:	4413      	add	r3, r2
 803789c:	2b0a      	cmp	r3, #10
 803789e:	dd15      	ble.n	80378cc <ip4_reass+0xd4>
#if IP_REASS_FREE_OLDEST
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 80378a0:	8c3b      	ldrh	r3, [r7, #32]
 80378a2:	4619      	mov	r1, r3
 80378a4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80378a6:	f7ff fd6b 	bl	8037380 <ip_reass_remove_oldest_datagram>
 80378aa:	4603      	mov	r3, r0
 80378ac:	2b00      	cmp	r3, #0
 80378ae:	d006      	beq.n	80378be <ip4_reass+0xc6>
        ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS))
 80378b0:	4b72      	ldr	r3, [pc, #456]	; (8037a7c <ip4_reass+0x284>)
 80378b2:	881b      	ldrh	r3, [r3, #0]
 80378b4:	461a      	mov	r2, r3
 80378b6:	8c3b      	ldrh	r3, [r7, #32]
 80378b8:	4413      	add	r3, r2
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 80378ba:	2b0a      	cmp	r3, #10
 80378bc:	dd06      	ble.n	80378cc <ip4_reass+0xd4>
#endif /* IP_REASS_FREE_OLDEST */
    {
      /* No datagram could be freed and still too many pbufs enqueued */
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: Overflow condition: pbufct=%d, clen=%d, MAX=%d\n",
                                   ip_reass_pbufcount, clen, IP_REASS_MAX_PBUFS));
      IPFRAG_STATS_INC(ip_frag.memerr);
 80378be:	4b6e      	ldr	r3, [pc, #440]	; (8037a78 <ip4_reass+0x280>)
 80378c0:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 80378c2:	3301      	adds	r3, #1
 80378c4:	b29a      	uxth	r2, r3
 80378c6:	4b6c      	ldr	r3, [pc, #432]	; (8037a78 <ip4_reass+0x280>)
 80378c8:	879a      	strh	r2, [r3, #60]	; 0x3c
      /* @todo: send ICMP time exceeded here? */
      /* drop this pbuf */
      goto nullreturn;
 80378ca:	e131      	b.n	8037b30 <ip4_reass+0x338>
    }
  }

  /* Look for the datagram the fragment belongs to in the current datagram queue,
   * remembering the previous in the queue for later dequeueing. */
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 80378cc:	4b6c      	ldr	r3, [pc, #432]	; (8037a80 <ip4_reass+0x288>)
 80378ce:	681b      	ldr	r3, [r3, #0]
 80378d0:	633b      	str	r3, [r7, #48]	; 0x30
 80378d2:	e01e      	b.n	8037912 <ip4_reass+0x11a>
    /* Check if the incoming fragment matches the one currently present
       in the reassembly buffer. If so, we proceed with copying the
       fragment into the buffer. */
    if (IP_ADDRESSES_AND_ID_MATCH(&ipr->iphdr, fraghdr)) {
 80378d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80378d6:	695a      	ldr	r2, [r3, #20]
 80378d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80378da:	68db      	ldr	r3, [r3, #12]
 80378dc:	429a      	cmp	r2, r3
 80378de:	d115      	bne.n	803790c <ip4_reass+0x114>
 80378e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80378e2:	699a      	ldr	r2, [r3, #24]
 80378e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80378e6:	691b      	ldr	r3, [r3, #16]
 80378e8:	429a      	cmp	r2, r3
 80378ea:	d10f      	bne.n	803790c <ip4_reass+0x114>
 80378ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80378ee:	899a      	ldrh	r2, [r3, #12]
 80378f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80378f2:	889b      	ldrh	r3, [r3, #4]
 80378f4:	b29b      	uxth	r3, r3
 80378f6:	429a      	cmp	r2, r3
 80378f8:	d108      	bne.n	803790c <ip4_reass+0x114>
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: matching previous fragment ID=%"X16_F"\n",
                                   lwip_ntohs(IPH_ID(fraghdr))));
      IPFRAG_STATS_INC(ip_frag.cachehit);
 80378fa:	4b5f      	ldr	r3, [pc, #380]	; (8037a78 <ip4_reass+0x280>)
 80378fc:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8037900:	3301      	adds	r3, #1
 8037902:	b29a      	uxth	r2, r3
 8037904:	4b5c      	ldr	r3, [pc, #368]	; (8037a78 <ip4_reass+0x280>)
 8037906:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
      break;
 803790a:	e005      	b.n	8037918 <ip4_reass+0x120>
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 803790c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 803790e:	681b      	ldr	r3, [r3, #0]
 8037910:	633b      	str	r3, [r7, #48]	; 0x30
 8037912:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8037914:	2b00      	cmp	r3, #0
 8037916:	d1dd      	bne.n	80378d4 <ip4_reass+0xdc>
    }
  }

  if (ipr == NULL) {
 8037918:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 803791a:	2b00      	cmp	r3, #0
 803791c:	d109      	bne.n	8037932 <ip4_reass+0x13a>
    /* Enqueue a new datagram into the datagram queue */
    ipr = ip_reass_enqueue_new_datagram(fraghdr, clen);
 803791e:	8c3b      	ldrh	r3, [r7, #32]
 8037920:	4619      	mov	r1, r3
 8037922:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8037924:	f7ff fd8e 	bl	8037444 <ip_reass_enqueue_new_datagram>
 8037928:	6338      	str	r0, [r7, #48]	; 0x30
    /* Bail if unable to enqueue */
    if (ipr == NULL) {
 803792a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 803792c:	2b00      	cmp	r3, #0
 803792e:	d11c      	bne.n	803796a <ip4_reass+0x172>
      goto nullreturn;
 8037930:	e0fe      	b.n	8037b30 <ip4_reass+0x338>
    }
  } else {
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 8037932:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8037934:	88db      	ldrh	r3, [r3, #6]
 8037936:	b29b      	uxth	r3, r3
 8037938:	4618      	mov	r0, r3
 803793a:	f7f4 fff3 	bl	802c924 <lwip_htons>
 803793e:	4603      	mov	r3, r0
 8037940:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8037944:	2b00      	cmp	r3, #0
 8037946:	d110      	bne.n	803796a <ip4_reass+0x172>
        ((lwip_ntohs(IPH_OFFSET(&ipr->iphdr)) & IP_OFFMASK) != 0)) {
 8037948:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 803794a:	89db      	ldrh	r3, [r3, #14]
 803794c:	4618      	mov	r0, r3
 803794e:	f7f4 ffe9 	bl	802c924 <lwip_htons>
 8037952:	4603      	mov	r3, r0
 8037954:	f3c3 030c 	ubfx	r3, r3, #0, #13
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 8037958:	2b00      	cmp	r3, #0
 803795a:	d006      	beq.n	803796a <ip4_reass+0x172>
      /* ipr->iphdr is not the header from the first fragment, but fraghdr is
       * -> copy fraghdr into ipr->iphdr since we want to have the header
       * of the first fragment (for ICMP time exceeded and later, for copying
       * all options, if supported)*/
      SMEMCPY(&ipr->iphdr, fraghdr, IP_HLEN);
 803795c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 803795e:	3308      	adds	r3, #8
 8037960:	2214      	movs	r2, #20
 8037962:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8037964:	4618      	mov	r0, r3
 8037966:	f000 ff85 	bl	8038874 <memcpy>

  /* At this point, we have either created a new entry or pointing
   * to an existing one */

  /* check for 'no more fragments', and update queue entry*/
  is_last = (IPH_OFFSET(fraghdr) & PP_NTOHS(IP_MF)) == 0;
 803796a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 803796c:	88db      	ldrh	r3, [r3, #6]
 803796e:	b29b      	uxth	r3, r3
 8037970:	f003 0320 	and.w	r3, r3, #32
 8037974:	2b00      	cmp	r3, #0
 8037976:	bf0c      	ite	eq
 8037978:	2301      	moveq	r3, #1
 803797a:	2300      	movne	r3, #0
 803797c:	b2db      	uxtb	r3, r3
 803797e:	61fb      	str	r3, [r7, #28]
  if (is_last) {
 8037980:	69fb      	ldr	r3, [r7, #28]
 8037982:	2b00      	cmp	r3, #0
 8037984:	d00e      	beq.n	80379a4 <ip4_reass+0x1ac>
    u16_t datagram_len = (u16_t)(offset + len);
 8037986:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8037988:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 803798a:	4413      	add	r3, r2
 803798c:	837b      	strh	r3, [r7, #26]
    if ((datagram_len < offset) || (datagram_len > (0xFFFF - IP_HLEN))) {
 803798e:	8b7a      	ldrh	r2, [r7, #26]
 8037990:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8037992:	429a      	cmp	r2, r3
 8037994:	f0c0 80a7 	bcc.w	8037ae6 <ip4_reass+0x2ee>
 8037998:	8b7b      	ldrh	r3, [r7, #26]
 803799a:	f64f 72eb 	movw	r2, #65515	; 0xffeb
 803799e:	4293      	cmp	r3, r2
 80379a0:	f200 80a1 	bhi.w	8037ae6 <ip4_reass+0x2ee>
      goto nullreturn_ipr;
    }
  }
  /* find the right place to insert this pbuf */
  /* @todo: trim pbufs if fragments are overlapping */
  valid = ip_reass_chain_frag_into_datagram_and_validate(ipr, p, is_last);
 80379a4:	69fa      	ldr	r2, [r7, #28]
 80379a6:	6879      	ldr	r1, [r7, #4]
 80379a8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80379aa:	f7ff fdbb 	bl	8037524 <ip_reass_chain_frag_into_datagram_and_validate>
 80379ae:	6178      	str	r0, [r7, #20]
  if (valid == IP_REASS_VALIDATE_PBUF_DROPPED) {
 80379b0:	697b      	ldr	r3, [r7, #20]
 80379b2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80379b6:	f000 8098 	beq.w	8037aea <ip4_reass+0x2f2>
  /* if we come here, the pbuf has been enqueued */

  /* Track the current number of pbufs current 'in-flight', in order to limit
     the number of fragments that may be enqueued at any one time
     (overflow checked by testing against IP_REASS_MAX_PBUFS) */
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 80379ba:	4b30      	ldr	r3, [pc, #192]	; (8037a7c <ip4_reass+0x284>)
 80379bc:	881a      	ldrh	r2, [r3, #0]
 80379be:	8c3b      	ldrh	r3, [r7, #32]
 80379c0:	4413      	add	r3, r2
 80379c2:	b29a      	uxth	r2, r3
 80379c4:	4b2d      	ldr	r3, [pc, #180]	; (8037a7c <ip4_reass+0x284>)
 80379c6:	801a      	strh	r2, [r3, #0]
  if (is_last) {
 80379c8:	69fb      	ldr	r3, [r7, #28]
 80379ca:	2b00      	cmp	r3, #0
 80379cc:	d00d      	beq.n	80379ea <ip4_reass+0x1f2>
    u16_t datagram_len = (u16_t)(offset + len);
 80379ce:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 80379d0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80379d2:	4413      	add	r3, r2
 80379d4:	827b      	strh	r3, [r7, #18]
    ipr->datagram_len = datagram_len;
 80379d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80379d8:	8a7a      	ldrh	r2, [r7, #18]
 80379da:	839a      	strh	r2, [r3, #28]
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 80379dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80379de:	7f9b      	ldrb	r3, [r3, #30]
 80379e0:	f043 0301 	orr.w	r3, r3, #1
 80379e4:	b2da      	uxtb	r2, r3
 80379e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80379e8:	779a      	strb	r2, [r3, #30]
    LWIP_DEBUGF(IP_REASS_DEBUG,
                ("ip4_reass: last fragment seen, total len %"S16_F"\n",
                 ipr->datagram_len));
  }

  if (valid == IP_REASS_VALIDATE_TELEGRAM_FINISHED) {
 80379ea:	697b      	ldr	r3, [r7, #20]
 80379ec:	2b01      	cmp	r3, #1
 80379ee:	d178      	bne.n	8037ae2 <ip4_reass+0x2ea>
    struct ip_reassdata *ipr_prev;
    /* the totally last fragment (flag more fragments = 0) was received at least
     * once AND all fragments are received */
    u16_t datagram_len = (u16_t)(ipr->datagram_len + IP_HLEN);
 80379f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80379f2:	8b9b      	ldrh	r3, [r3, #28]
 80379f4:	3314      	adds	r3, #20
 80379f6:	823b      	strh	r3, [r7, #16]

    /* save the second pbuf before copying the header over the pointer */
    r = ((struct ip_reass_helper *)ipr->p->payload)->next_pbuf;
 80379f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80379fa:	685b      	ldr	r3, [r3, #4]
 80379fc:	685b      	ldr	r3, [r3, #4]
 80379fe:	681b      	ldr	r3, [r3, #0]
 8037a00:	637b      	str	r3, [r7, #52]	; 0x34

    /* copy the original ip header back to the first pbuf */
    fraghdr = (struct ip_hdr *)(ipr->p->payload);
 8037a02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8037a04:	685b      	ldr	r3, [r3, #4]
 8037a06:	685b      	ldr	r3, [r3, #4]
 8037a08:	62bb      	str	r3, [r7, #40]	; 0x28
    SMEMCPY(fraghdr, &ipr->iphdr, IP_HLEN);
 8037a0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8037a0c:	3308      	adds	r3, #8
 8037a0e:	2214      	movs	r2, #20
 8037a10:	4619      	mov	r1, r3
 8037a12:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8037a14:	f000 ff2e 	bl	8038874 <memcpy>
    IPH_LEN_SET(fraghdr, lwip_htons(datagram_len));
 8037a18:	8a3b      	ldrh	r3, [r7, #16]
 8037a1a:	4618      	mov	r0, r3
 8037a1c:	f7f4 ff82 	bl	802c924 <lwip_htons>
 8037a20:	4603      	mov	r3, r0
 8037a22:	461a      	mov	r2, r3
 8037a24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8037a26:	805a      	strh	r2, [r3, #2]
    IPH_OFFSET_SET(fraghdr, 0);
 8037a28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8037a2a:	2200      	movs	r2, #0
 8037a2c:	719a      	strb	r2, [r3, #6]
 8037a2e:	2200      	movs	r2, #0
 8037a30:	71da      	strb	r2, [r3, #7]
    IPH_CHKSUM_SET(fraghdr, 0);
 8037a32:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8037a34:	2200      	movs	r2, #0
 8037a36:	729a      	strb	r2, [r3, #10]
 8037a38:	2200      	movs	r2, #0
 8037a3a:	72da      	strb	r2, [r3, #11]
    IF__NETIF_CHECKSUM_ENABLED(ip_current_input_netif(), NETIF_CHECKSUM_GEN_IP) {
      IPH_CHKSUM_SET(fraghdr, inet_chksum(fraghdr, IP_HLEN));
    }
#endif /* CHECKSUM_GEN_IP */

    p = ipr->p;
 8037a3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8037a3e:	685b      	ldr	r3, [r3, #4]
 8037a40:	607b      	str	r3, [r7, #4]

    /* chain together the pbufs contained within the reass_data list. */
    while (r != NULL) {
 8037a42:	e00d      	b.n	8037a60 <ip4_reass+0x268>
      iprh = (struct ip_reass_helper *)r->payload;
 8037a44:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8037a46:	685b      	ldr	r3, [r3, #4]
 8037a48:	60fb      	str	r3, [r7, #12]

      /* hide the ip header for every succeeding fragment */
      pbuf_remove_header(r, IP_HLEN);
 8037a4a:	2114      	movs	r1, #20
 8037a4c:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8037a4e:	f7f6 fba5 	bl	802e19c <pbuf_remove_header>
      pbuf_cat(p, r);
 8037a52:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8037a54:	6878      	ldr	r0, [r7, #4]
 8037a56:	f7f6 fd27 	bl	802e4a8 <pbuf_cat>
      r = iprh->next_pbuf;
 8037a5a:	68fb      	ldr	r3, [r7, #12]
 8037a5c:	681b      	ldr	r3, [r3, #0]
 8037a5e:	637b      	str	r3, [r7, #52]	; 0x34
    while (r != NULL) {
 8037a60:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8037a62:	2b00      	cmp	r3, #0
 8037a64:	d1ee      	bne.n	8037a44 <ip4_reass+0x24c>
    }

    /* find the previous entry in the linked list */
    if (ipr == reassdatagrams) {
 8037a66:	4b06      	ldr	r3, [pc, #24]	; (8037a80 <ip4_reass+0x288>)
 8037a68:	681b      	ldr	r3, [r3, #0]
 8037a6a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8037a6c:	429a      	cmp	r2, r3
 8037a6e:	d109      	bne.n	8037a84 <ip4_reass+0x28c>
      ipr_prev = NULL;
 8037a70:	2300      	movs	r3, #0
 8037a72:	62fb      	str	r3, [r7, #44]	; 0x2c
 8037a74:	e017      	b.n	8037aa6 <ip4_reass+0x2ae>
 8037a76:	bf00      	nop
 8037a78:	2000ee04 	.word	0x2000ee04
 8037a7c:	2000f058 	.word	0x2000f058
 8037a80:	2000f054 	.word	0x2000f054
    } else {
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 8037a84:	4b31      	ldr	r3, [pc, #196]	; (8037b4c <ip4_reass+0x354>)
 8037a86:	681b      	ldr	r3, [r3, #0]
 8037a88:	62fb      	str	r3, [r7, #44]	; 0x2c
 8037a8a:	e007      	b.n	8037a9c <ip4_reass+0x2a4>
        if (ipr_prev->next == ipr) {
 8037a8c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8037a8e:	681b      	ldr	r3, [r3, #0]
 8037a90:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8037a92:	429a      	cmp	r2, r3
 8037a94:	d006      	beq.n	8037aa4 <ip4_reass+0x2ac>
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 8037a96:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8037a98:	681b      	ldr	r3, [r3, #0]
 8037a9a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8037a9c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8037a9e:	2b00      	cmp	r3, #0
 8037aa0:	d1f4      	bne.n	8037a8c <ip4_reass+0x294>
 8037aa2:	e000      	b.n	8037aa6 <ip4_reass+0x2ae>
          break;
 8037aa4:	bf00      	nop
        }
      }
    }

    /* release the sources allocate for the fragment queue entry */
    ip_reass_dequeue_datagram(ipr, ipr_prev);
 8037aa6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8037aa8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8037aaa:	f7ff fd0d 	bl	80374c8 <ip_reass_dequeue_datagram>

    /* and adjust the number of pbufs currently queued for reassembly. */
    clen = pbuf_clen(p);
 8037aae:	6878      	ldr	r0, [r7, #4]
 8037ab0:	f7f6 fcba 	bl	802e428 <pbuf_clen>
 8037ab4:	4603      	mov	r3, r0
 8037ab6:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("ip_reass_pbufcount >= clen", ip_reass_pbufcount >= clen);
 8037ab8:	4b25      	ldr	r3, [pc, #148]	; (8037b50 <ip4_reass+0x358>)
 8037aba:	881b      	ldrh	r3, [r3, #0]
 8037abc:	8c3a      	ldrh	r2, [r7, #32]
 8037abe:	429a      	cmp	r2, r3
 8037ac0:	d906      	bls.n	8037ad0 <ip4_reass+0x2d8>
 8037ac2:	4b24      	ldr	r3, [pc, #144]	; (8037b54 <ip4_reass+0x35c>)
 8037ac4:	f240 229b 	movw	r2, #667	; 0x29b
 8037ac8:	4923      	ldr	r1, [pc, #140]	; (8037b58 <ip4_reass+0x360>)
 8037aca:	4824      	ldr	r0, [pc, #144]	; (8037b5c <ip4_reass+0x364>)
 8037acc:	f001 facc 	bl	8039068 <iprintf>
    ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - clen);
 8037ad0:	4b1f      	ldr	r3, [pc, #124]	; (8037b50 <ip4_reass+0x358>)
 8037ad2:	881a      	ldrh	r2, [r3, #0]
 8037ad4:	8c3b      	ldrh	r3, [r7, #32]
 8037ad6:	1ad3      	subs	r3, r2, r3
 8037ad8:	b29a      	uxth	r2, r3
 8037ada:	4b1d      	ldr	r3, [pc, #116]	; (8037b50 <ip4_reass+0x358>)
 8037adc:	801a      	strh	r2, [r3, #0]

    MIB2_STATS_INC(mib2.ipreasmoks);

    /* Return the pbuf chain */
    return p;
 8037ade:	687b      	ldr	r3, [r7, #4]
 8037ae0:	e030      	b.n	8037b44 <ip4_reass+0x34c>
  }
  /* the datagram is not (yet?) reassembled completely */
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_pbufcount: %d out\n", ip_reass_pbufcount));
  return NULL;
 8037ae2:	2300      	movs	r3, #0
 8037ae4:	e02e      	b.n	8037b44 <ip4_reass+0x34c>
      goto nullreturn_ipr;
 8037ae6:	bf00      	nop
 8037ae8:	e000      	b.n	8037aec <ip4_reass+0x2f4>
    goto nullreturn_ipr;
 8037aea:	bf00      	nop

nullreturn_ipr:
  LWIP_ASSERT("ipr != NULL", ipr != NULL);
 8037aec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8037aee:	2b00      	cmp	r3, #0
 8037af0:	d106      	bne.n	8037b00 <ip4_reass+0x308>
 8037af2:	4b18      	ldr	r3, [pc, #96]	; (8037b54 <ip4_reass+0x35c>)
 8037af4:	f44f 722a 	mov.w	r2, #680	; 0x2a8
 8037af8:	4919      	ldr	r1, [pc, #100]	; (8037b60 <ip4_reass+0x368>)
 8037afa:	4818      	ldr	r0, [pc, #96]	; (8037b5c <ip4_reass+0x364>)
 8037afc:	f001 fab4 	bl	8039068 <iprintf>
  if (ipr->p == NULL) {
 8037b00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8037b02:	685b      	ldr	r3, [r3, #4]
 8037b04:	2b00      	cmp	r3, #0
 8037b06:	d112      	bne.n	8037b2e <ip4_reass+0x336>
    /* dropped pbuf after creating a new datagram entry: remove the entry, too */
    LWIP_ASSERT("not firstalthough just enqueued", ipr == reassdatagrams);
 8037b08:	4b10      	ldr	r3, [pc, #64]	; (8037b4c <ip4_reass+0x354>)
 8037b0a:	681b      	ldr	r3, [r3, #0]
 8037b0c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8037b0e:	429a      	cmp	r2, r3
 8037b10:	d006      	beq.n	8037b20 <ip4_reass+0x328>
 8037b12:	4b10      	ldr	r3, [pc, #64]	; (8037b54 <ip4_reass+0x35c>)
 8037b14:	f240 22ab 	movw	r2, #683	; 0x2ab
 8037b18:	4912      	ldr	r1, [pc, #72]	; (8037b64 <ip4_reass+0x36c>)
 8037b1a:	4810      	ldr	r0, [pc, #64]	; (8037b5c <ip4_reass+0x364>)
 8037b1c:	f001 faa4 	bl	8039068 <iprintf>
    ip_reass_dequeue_datagram(ipr, NULL);
 8037b20:	2100      	movs	r1, #0
 8037b22:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8037b24:	f7ff fcd0 	bl	80374c8 <ip_reass_dequeue_datagram>
 8037b28:	e002      	b.n	8037b30 <ip4_reass+0x338>
    goto nullreturn;
 8037b2a:	bf00      	nop
 8037b2c:	e000      	b.n	8037b30 <ip4_reass+0x338>
  }

nullreturn:
 8037b2e:	bf00      	nop
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: nullreturn\n"));
  IPFRAG_STATS_INC(ip_frag.drop);
 8037b30:	4b0d      	ldr	r3, [pc, #52]	; (8037b68 <ip4_reass+0x370>)
 8037b32:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8037b34:	3301      	adds	r3, #1
 8037b36:	b29a      	uxth	r2, r3
 8037b38:	4b0b      	ldr	r3, [pc, #44]	; (8037b68 <ip4_reass+0x370>)
 8037b3a:	86da      	strh	r2, [r3, #54]	; 0x36
  pbuf_free(p);
 8037b3c:	6878      	ldr	r0, [r7, #4]
 8037b3e:	f7f6 fbe5 	bl	802e30c <pbuf_free>
  return NULL;
 8037b42:	2300      	movs	r3, #0
}
 8037b44:	4618      	mov	r0, r3
 8037b46:	3738      	adds	r7, #56	; 0x38
 8037b48:	46bd      	mov	sp, r7
 8037b4a:	bd80      	pop	{r7, pc}
 8037b4c:	2000f054 	.word	0x2000f054
 8037b50:	2000f058 	.word	0x2000f058
 8037b54:	0803d198 	.word	0x0803d198
 8037b58:	0803d308 	.word	0x0803d308
 8037b5c:	0803d1e0 	.word	0x0803d1e0
 8037b60:	0803d324 	.word	0x0803d324
 8037b64:	0803d330 	.word	0x0803d330
 8037b68:	2000ee04 	.word	0x2000ee04

08037b6c <ip_frag_alloc_pbuf_custom_ref>:
#if IP_FRAG
#if !LWIP_NETIF_TX_SINGLE_PBUF
/** Allocate a new struct pbuf_custom_ref */
static struct pbuf_custom_ref *
ip_frag_alloc_pbuf_custom_ref(void)
{
 8037b6c:	b580      	push	{r7, lr}
 8037b6e:	af00      	add	r7, sp, #0
  return (struct pbuf_custom_ref *)memp_malloc(MEMP_FRAG_PBUF);
 8037b70:	2005      	movs	r0, #5
 8037b72:	f7f5 fc79 	bl	802d468 <memp_malloc>
 8037b76:	4603      	mov	r3, r0
}
 8037b78:	4618      	mov	r0, r3
 8037b7a:	bd80      	pop	{r7, pc}

08037b7c <ip_frag_free_pbuf_custom_ref>:

/** Free a struct pbuf_custom_ref */
static void
ip_frag_free_pbuf_custom_ref(struct pbuf_custom_ref *p)
{
 8037b7c:	b580      	push	{r7, lr}
 8037b7e:	b082      	sub	sp, #8
 8037b80:	af00      	add	r7, sp, #0
 8037b82:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("p != NULL", p != NULL);
 8037b84:	687b      	ldr	r3, [r7, #4]
 8037b86:	2b00      	cmp	r3, #0
 8037b88:	d106      	bne.n	8037b98 <ip_frag_free_pbuf_custom_ref+0x1c>
 8037b8a:	4b07      	ldr	r3, [pc, #28]	; (8037ba8 <ip_frag_free_pbuf_custom_ref+0x2c>)
 8037b8c:	f44f 7231 	mov.w	r2, #708	; 0x2c4
 8037b90:	4906      	ldr	r1, [pc, #24]	; (8037bac <ip_frag_free_pbuf_custom_ref+0x30>)
 8037b92:	4807      	ldr	r0, [pc, #28]	; (8037bb0 <ip_frag_free_pbuf_custom_ref+0x34>)
 8037b94:	f001 fa68 	bl	8039068 <iprintf>
  memp_free(MEMP_FRAG_PBUF, p);
 8037b98:	6879      	ldr	r1, [r7, #4]
 8037b9a:	2005      	movs	r0, #5
 8037b9c:	f7f5 fce0 	bl	802d560 <memp_free>
}
 8037ba0:	bf00      	nop
 8037ba2:	3708      	adds	r7, #8
 8037ba4:	46bd      	mov	sp, r7
 8037ba6:	bd80      	pop	{r7, pc}
 8037ba8:	0803d198 	.word	0x0803d198
 8037bac:	0803d350 	.word	0x0803d350
 8037bb0:	0803d1e0 	.word	0x0803d1e0

08037bb4 <ipfrag_free_pbuf_custom>:

/** Free-callback function to free a 'struct pbuf_custom_ref', called by
 * pbuf_free. */
static void
ipfrag_free_pbuf_custom(struct pbuf *p)
{
 8037bb4:	b580      	push	{r7, lr}
 8037bb6:	b084      	sub	sp, #16
 8037bb8:	af00      	add	r7, sp, #0
 8037bba:	6078      	str	r0, [r7, #4]
  struct pbuf_custom_ref *pcr = (struct pbuf_custom_ref *)p;
 8037bbc:	687b      	ldr	r3, [r7, #4]
 8037bbe:	60fb      	str	r3, [r7, #12]
  LWIP_ASSERT("pcr != NULL", pcr != NULL);
 8037bc0:	68fb      	ldr	r3, [r7, #12]
 8037bc2:	2b00      	cmp	r3, #0
 8037bc4:	d106      	bne.n	8037bd4 <ipfrag_free_pbuf_custom+0x20>
 8037bc6:	4b11      	ldr	r3, [pc, #68]	; (8037c0c <ipfrag_free_pbuf_custom+0x58>)
 8037bc8:	f240 22ce 	movw	r2, #718	; 0x2ce
 8037bcc:	4910      	ldr	r1, [pc, #64]	; (8037c10 <ipfrag_free_pbuf_custom+0x5c>)
 8037bce:	4811      	ldr	r0, [pc, #68]	; (8037c14 <ipfrag_free_pbuf_custom+0x60>)
 8037bd0:	f001 fa4a 	bl	8039068 <iprintf>
  LWIP_ASSERT("pcr == p", (void *)pcr == (void *)p);
 8037bd4:	68fa      	ldr	r2, [r7, #12]
 8037bd6:	687b      	ldr	r3, [r7, #4]
 8037bd8:	429a      	cmp	r2, r3
 8037bda:	d006      	beq.n	8037bea <ipfrag_free_pbuf_custom+0x36>
 8037bdc:	4b0b      	ldr	r3, [pc, #44]	; (8037c0c <ipfrag_free_pbuf_custom+0x58>)
 8037bde:	f240 22cf 	movw	r2, #719	; 0x2cf
 8037be2:	490d      	ldr	r1, [pc, #52]	; (8037c18 <ipfrag_free_pbuf_custom+0x64>)
 8037be4:	480b      	ldr	r0, [pc, #44]	; (8037c14 <ipfrag_free_pbuf_custom+0x60>)
 8037be6:	f001 fa3f 	bl	8039068 <iprintf>
  if (pcr->original != NULL) {
 8037bea:	68fb      	ldr	r3, [r7, #12]
 8037bec:	695b      	ldr	r3, [r3, #20]
 8037bee:	2b00      	cmp	r3, #0
 8037bf0:	d004      	beq.n	8037bfc <ipfrag_free_pbuf_custom+0x48>
    pbuf_free(pcr->original);
 8037bf2:	68fb      	ldr	r3, [r7, #12]
 8037bf4:	695b      	ldr	r3, [r3, #20]
 8037bf6:	4618      	mov	r0, r3
 8037bf8:	f7f6 fb88 	bl	802e30c <pbuf_free>
  }
  ip_frag_free_pbuf_custom_ref(pcr);
 8037bfc:	68f8      	ldr	r0, [r7, #12]
 8037bfe:	f7ff ffbd 	bl	8037b7c <ip_frag_free_pbuf_custom_ref>
}
 8037c02:	bf00      	nop
 8037c04:	3710      	adds	r7, #16
 8037c06:	46bd      	mov	sp, r7
 8037c08:	bd80      	pop	{r7, pc}
 8037c0a:	bf00      	nop
 8037c0c:	0803d198 	.word	0x0803d198
 8037c10:	0803d35c 	.word	0x0803d35c
 8037c14:	0803d1e0 	.word	0x0803d1e0
 8037c18:	0803d368 	.word	0x0803d368

08037c1c <ip4_frag>:
 *
 * @return ERR_OK if sent successfully, err_t otherwise
 */
err_t
ip4_frag(struct pbuf *p, struct netif *netif, const ip4_addr_t *dest)
{
 8037c1c:	b580      	push	{r7, lr}
 8037c1e:	b094      	sub	sp, #80	; 0x50
 8037c20:	af02      	add	r7, sp, #8
 8037c22:	60f8      	str	r0, [r7, #12]
 8037c24:	60b9      	str	r1, [r7, #8]
 8037c26:	607a      	str	r2, [r7, #4]
  struct pbuf *rambuf;
#if !LWIP_NETIF_TX_SINGLE_PBUF
  struct pbuf *newpbuf;
  u16_t newpbuflen = 0;
 8037c28:	2300      	movs	r3, #0
 8037c2a:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
  u16_t left_to_copy;
#endif
  struct ip_hdr *original_iphdr;
  struct ip_hdr *iphdr;
  const u16_t nfb = (u16_t)((netif->mtu - IP_HLEN) / 8);
 8037c2e:	68bb      	ldr	r3, [r7, #8]
 8037c30:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8037c32:	3b14      	subs	r3, #20
 8037c34:	2b00      	cmp	r3, #0
 8037c36:	da00      	bge.n	8037c3a <ip4_frag+0x1e>
 8037c38:	3307      	adds	r3, #7
 8037c3a:	10db      	asrs	r3, r3, #3
 8037c3c:	877b      	strh	r3, [r7, #58]	; 0x3a
  u16_t left, fragsize;
  u16_t ofo;
  int last;
  u16_t poff = IP_HLEN;
 8037c3e:	2314      	movs	r3, #20
 8037c40:	87fb      	strh	r3, [r7, #62]	; 0x3e
  u16_t tmp;
  int mf_set;

  original_iphdr = (struct ip_hdr *)p->payload;
 8037c42:	68fb      	ldr	r3, [r7, #12]
 8037c44:	685b      	ldr	r3, [r3, #4]
 8037c46:	637b      	str	r3, [r7, #52]	; 0x34
  iphdr = original_iphdr;
 8037c48:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8037c4a:	633b      	str	r3, [r7, #48]	; 0x30
  if (IPH_HL_BYTES(iphdr) != IP_HLEN) {
 8037c4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8037c4e:	781b      	ldrb	r3, [r3, #0]
 8037c50:	f003 030f 	and.w	r3, r3, #15
 8037c54:	b2db      	uxtb	r3, r3
 8037c56:	009b      	lsls	r3, r3, #2
 8037c58:	b2db      	uxtb	r3, r3
 8037c5a:	2b14      	cmp	r3, #20
 8037c5c:	d002      	beq.n	8037c64 <ip4_frag+0x48>
    /* ip4_frag() does not support IP options */
    return ERR_VAL;
 8037c5e:	f06f 0305 	mvn.w	r3, #5
 8037c62:	e116      	b.n	8037e92 <ip4_frag+0x276>
  }
  LWIP_ERROR("ip4_frag(): pbuf too short", p->len >= IP_HLEN, return ERR_VAL);
 8037c64:	68fb      	ldr	r3, [r7, #12]
 8037c66:	895b      	ldrh	r3, [r3, #10]
 8037c68:	2b13      	cmp	r3, #19
 8037c6a:	d809      	bhi.n	8037c80 <ip4_frag+0x64>
 8037c6c:	4b8b      	ldr	r3, [pc, #556]	; (8037e9c <ip4_frag+0x280>)
 8037c6e:	f44f 723f 	mov.w	r2, #764	; 0x2fc
 8037c72:	498b      	ldr	r1, [pc, #556]	; (8037ea0 <ip4_frag+0x284>)
 8037c74:	488b      	ldr	r0, [pc, #556]	; (8037ea4 <ip4_frag+0x288>)
 8037c76:	f001 f9f7 	bl	8039068 <iprintf>
 8037c7a:	f06f 0305 	mvn.w	r3, #5
 8037c7e:	e108      	b.n	8037e92 <ip4_frag+0x276>

  /* Save original offset */
  tmp = lwip_ntohs(IPH_OFFSET(iphdr));
 8037c80:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8037c82:	88db      	ldrh	r3, [r3, #6]
 8037c84:	b29b      	uxth	r3, r3
 8037c86:	4618      	mov	r0, r3
 8037c88:	f7f4 fe4c 	bl	802c924 <lwip_htons>
 8037c8c:	4603      	mov	r3, r0
 8037c8e:	87bb      	strh	r3, [r7, #60]	; 0x3c
  ofo = tmp & IP_OFFMASK;
 8037c90:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8037c92:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8037c96:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  /* already fragmented? if so, the last fragment we create must have MF, too */
  mf_set = tmp & IP_MF;
 8037c9a:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8037c9c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8037ca0:	62fb      	str	r3, [r7, #44]	; 0x2c

  left = (u16_t)(p->tot_len - IP_HLEN);
 8037ca2:	68fb      	ldr	r3, [r7, #12]
 8037ca4:	891b      	ldrh	r3, [r3, #8]
 8037ca6:	3b14      	subs	r3, #20
 8037ca8:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42

  while (left) {
 8037cac:	e0e7      	b.n	8037e7e <ip4_frag+0x262>
    /* Fill this fragment */
    fragsize = LWIP_MIN(left, (u16_t)(nfb * 8));
 8037cae:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8037cb0:	00db      	lsls	r3, r3, #3
 8037cb2:	b29b      	uxth	r3, r3
 8037cb4:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8037cb8:	4293      	cmp	r3, r2
 8037cba:	bf28      	it	cs
 8037cbc:	4613      	movcs	r3, r2
 8037cbe:	857b      	strh	r3, [r7, #42]	; 0x2a
    /* When not using a static buffer, create a chain of pbufs.
     * The first will be a PBUF_RAM holding the link and IP header.
     * The rest will be PBUF_REFs mirroring the pbuf chain to be fragged,
     * but limited to the size of an mtu.
     */
    rambuf = pbuf_alloc(PBUF_LINK, IP_HLEN, PBUF_RAM);
 8037cc0:	f44f 7220 	mov.w	r2, #640	; 0x280
 8037cc4:	2114      	movs	r1, #20
 8037cc6:	200e      	movs	r0, #14
 8037cc8:	f7f6 f80a 	bl	802dce0 <pbuf_alloc>
 8037ccc:	6278      	str	r0, [r7, #36]	; 0x24
    if (rambuf == NULL) {
 8037cce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8037cd0:	2b00      	cmp	r3, #0
 8037cd2:	f000 80db 	beq.w	8037e8c <ip4_frag+0x270>
      goto memerr;
    }
    LWIP_ASSERT("this needs a pbuf in one piece!",
 8037cd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8037cd8:	895b      	ldrh	r3, [r3, #10]
 8037cda:	2b13      	cmp	r3, #19
 8037cdc:	d806      	bhi.n	8037cec <ip4_frag+0xd0>
 8037cde:	4b6f      	ldr	r3, [pc, #444]	; (8037e9c <ip4_frag+0x280>)
 8037ce0:	f44f 7249 	mov.w	r2, #804	; 0x324
 8037ce4:	4970      	ldr	r1, [pc, #448]	; (8037ea8 <ip4_frag+0x28c>)
 8037ce6:	486f      	ldr	r0, [pc, #444]	; (8037ea4 <ip4_frag+0x288>)
 8037ce8:	f001 f9be 	bl	8039068 <iprintf>
                (rambuf->len >= (IP_HLEN)));
    SMEMCPY(rambuf->payload, original_iphdr, IP_HLEN);
 8037cec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8037cee:	685b      	ldr	r3, [r3, #4]
 8037cf0:	2214      	movs	r2, #20
 8037cf2:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8037cf4:	4618      	mov	r0, r3
 8037cf6:	f000 fdbd 	bl	8038874 <memcpy>
    iphdr = (struct ip_hdr *)rambuf->payload;
 8037cfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8037cfc:	685b      	ldr	r3, [r3, #4]
 8037cfe:	633b      	str	r3, [r7, #48]	; 0x30

    left_to_copy = fragsize;
 8037d00:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8037d02:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
    while (left_to_copy) {
 8037d06:	e064      	b.n	8037dd2 <ip4_frag+0x1b6>
      struct pbuf_custom_ref *pcr;
      u16_t plen = (u16_t)(p->len - poff);
 8037d08:	68fb      	ldr	r3, [r7, #12]
 8037d0a:	895a      	ldrh	r2, [r3, #10]
 8037d0c:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8037d0e:	1ad3      	subs	r3, r2, r3
 8037d10:	83fb      	strh	r3, [r7, #30]
      LWIP_ASSERT("p->len >= poff", p->len >= poff);
 8037d12:	68fb      	ldr	r3, [r7, #12]
 8037d14:	895b      	ldrh	r3, [r3, #10]
 8037d16:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 8037d18:	429a      	cmp	r2, r3
 8037d1a:	d906      	bls.n	8037d2a <ip4_frag+0x10e>
 8037d1c:	4b5f      	ldr	r3, [pc, #380]	; (8037e9c <ip4_frag+0x280>)
 8037d1e:	f240 322d 	movw	r2, #813	; 0x32d
 8037d22:	4962      	ldr	r1, [pc, #392]	; (8037eac <ip4_frag+0x290>)
 8037d24:	485f      	ldr	r0, [pc, #380]	; (8037ea4 <ip4_frag+0x288>)
 8037d26:	f001 f99f 	bl	8039068 <iprintf>
      newpbuflen = LWIP_MIN(left_to_copy, plen);
 8037d2a:	8bfa      	ldrh	r2, [r7, #30]
 8037d2c:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8037d30:	4293      	cmp	r3, r2
 8037d32:	bf28      	it	cs
 8037d34:	4613      	movcs	r3, r2
 8037d36:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
      /* Is this pbuf already empty? */
      if (!newpbuflen) {
 8037d3a:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8037d3e:	2b00      	cmp	r3, #0
 8037d40:	d105      	bne.n	8037d4e <ip4_frag+0x132>
        poff = 0;
 8037d42:	2300      	movs	r3, #0
 8037d44:	87fb      	strh	r3, [r7, #62]	; 0x3e
        p = p->next;
 8037d46:	68fb      	ldr	r3, [r7, #12]
 8037d48:	681b      	ldr	r3, [r3, #0]
 8037d4a:	60fb      	str	r3, [r7, #12]
        continue;
 8037d4c:	e041      	b.n	8037dd2 <ip4_frag+0x1b6>
      }
      pcr = ip_frag_alloc_pbuf_custom_ref();
 8037d4e:	f7ff ff0d 	bl	8037b6c <ip_frag_alloc_pbuf_custom_ref>
 8037d52:	61b8      	str	r0, [r7, #24]
      if (pcr == NULL) {
 8037d54:	69bb      	ldr	r3, [r7, #24]
 8037d56:	2b00      	cmp	r3, #0
 8037d58:	d103      	bne.n	8037d62 <ip4_frag+0x146>
        pbuf_free(rambuf);
 8037d5a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8037d5c:	f7f6 fad6 	bl	802e30c <pbuf_free>
        goto memerr;
 8037d60:	e095      	b.n	8037e8e <ip4_frag+0x272>
      }
      /* Mirror this pbuf, although we might not need all of it. */
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 8037d62:	69b8      	ldr	r0, [r7, #24]
                                    (u8_t *)p->payload + poff, newpbuflen);
 8037d64:	68fb      	ldr	r3, [r7, #12]
 8037d66:	685a      	ldr	r2, [r3, #4]
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 8037d68:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8037d6a:	4413      	add	r3, r2
 8037d6c:	f8b7 1046 	ldrh.w	r1, [r7, #70]	; 0x46
 8037d70:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 8037d74:	9201      	str	r2, [sp, #4]
 8037d76:	9300      	str	r3, [sp, #0]
 8037d78:	4603      	mov	r3, r0
 8037d7a:	2241      	movs	r2, #65	; 0x41
 8037d7c:	2000      	movs	r0, #0
 8037d7e:	f7f6 f8d9 	bl	802df34 <pbuf_alloced_custom>
 8037d82:	6178      	str	r0, [r7, #20]
      if (newpbuf == NULL) {
 8037d84:	697b      	ldr	r3, [r7, #20]
 8037d86:	2b00      	cmp	r3, #0
 8037d88:	d106      	bne.n	8037d98 <ip4_frag+0x17c>
        ip_frag_free_pbuf_custom_ref(pcr);
 8037d8a:	69b8      	ldr	r0, [r7, #24]
 8037d8c:	f7ff fef6 	bl	8037b7c <ip_frag_free_pbuf_custom_ref>
        pbuf_free(rambuf);
 8037d90:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8037d92:	f7f6 fabb 	bl	802e30c <pbuf_free>
        goto memerr;
 8037d96:	e07a      	b.n	8037e8e <ip4_frag+0x272>
      }
      pbuf_ref(p);
 8037d98:	68f8      	ldr	r0, [r7, #12]
 8037d9a:	f7f6 fb5d 	bl	802e458 <pbuf_ref>
      pcr->original = p;
 8037d9e:	69bb      	ldr	r3, [r7, #24]
 8037da0:	68fa      	ldr	r2, [r7, #12]
 8037da2:	615a      	str	r2, [r3, #20]
      pcr->pc.custom_free_function = ipfrag_free_pbuf_custom;
 8037da4:	69bb      	ldr	r3, [r7, #24]
 8037da6:	4a42      	ldr	r2, [pc, #264]	; (8037eb0 <ip4_frag+0x294>)
 8037da8:	611a      	str	r2, [r3, #16]

      /* Add it to end of rambuf's chain, but using pbuf_cat, not pbuf_chain
       * so that it is removed when pbuf_dechain is later called on rambuf.
       */
      pbuf_cat(rambuf, newpbuf);
 8037daa:	6979      	ldr	r1, [r7, #20]
 8037dac:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8037dae:	f7f6 fb7b 	bl	802e4a8 <pbuf_cat>
      left_to_copy = (u16_t)(left_to_copy - newpbuflen);
 8037db2:	f8b7 2044 	ldrh.w	r2, [r7, #68]	; 0x44
 8037db6:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8037dba:	1ad3      	subs	r3, r2, r3
 8037dbc:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
      if (left_to_copy) {
 8037dc0:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8037dc4:	2b00      	cmp	r3, #0
 8037dc6:	d004      	beq.n	8037dd2 <ip4_frag+0x1b6>
        poff = 0;
 8037dc8:	2300      	movs	r3, #0
 8037dca:	87fb      	strh	r3, [r7, #62]	; 0x3e
        p = p->next;
 8037dcc:	68fb      	ldr	r3, [r7, #12]
 8037dce:	681b      	ldr	r3, [r3, #0]
 8037dd0:	60fb      	str	r3, [r7, #12]
    while (left_to_copy) {
 8037dd2:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8037dd6:	2b00      	cmp	r3, #0
 8037dd8:	d196      	bne.n	8037d08 <ip4_frag+0xec>
      }
    }
    poff = (u16_t)(poff + newpbuflen);
 8037dda:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 8037ddc:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8037de0:	4413      	add	r3, r2
 8037de2:	87fb      	strh	r3, [r7, #62]	; 0x3e
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

    /* Correct header */
    last = (left <= netif->mtu - IP_HLEN);
 8037de4:	68bb      	ldr	r3, [r7, #8]
 8037de6:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8037de8:	f1a3 0213 	sub.w	r2, r3, #19
 8037dec:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8037df0:	429a      	cmp	r2, r3
 8037df2:	bfcc      	ite	gt
 8037df4:	2301      	movgt	r3, #1
 8037df6:	2300      	movle	r3, #0
 8037df8:	b2db      	uxtb	r3, r3
 8037dfa:	623b      	str	r3, [r7, #32]

    /* Set new offset and MF flag */
    tmp = (IP_OFFMASK & (ofo));
 8037dfc:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8037e00:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8037e04:	87bb      	strh	r3, [r7, #60]	; 0x3c
    if (!last || mf_set) {
 8037e06:	6a3b      	ldr	r3, [r7, #32]
 8037e08:	2b00      	cmp	r3, #0
 8037e0a:	d002      	beq.n	8037e12 <ip4_frag+0x1f6>
 8037e0c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8037e0e:	2b00      	cmp	r3, #0
 8037e10:	d003      	beq.n	8037e1a <ip4_frag+0x1fe>
      /* the last fragment has MF set if the input frame had it */
      tmp = tmp | IP_MF;
 8037e12:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8037e14:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8037e18:	87bb      	strh	r3, [r7, #60]	; 0x3c
    }
    IPH_OFFSET_SET(iphdr, lwip_htons(tmp));
 8037e1a:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8037e1c:	4618      	mov	r0, r3
 8037e1e:	f7f4 fd81 	bl	802c924 <lwip_htons>
 8037e22:	4603      	mov	r3, r0
 8037e24:	461a      	mov	r2, r3
 8037e26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8037e28:	80da      	strh	r2, [r3, #6]
    IPH_LEN_SET(iphdr, lwip_htons((u16_t)(fragsize + IP_HLEN)));
 8037e2a:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8037e2c:	3314      	adds	r3, #20
 8037e2e:	b29b      	uxth	r3, r3
 8037e30:	4618      	mov	r0, r3
 8037e32:	f7f4 fd77 	bl	802c924 <lwip_htons>
 8037e36:	4603      	mov	r3, r0
 8037e38:	461a      	mov	r2, r3
 8037e3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8037e3c:	805a      	strh	r2, [r3, #2]
    IPH_CHKSUM_SET(iphdr, 0);
 8037e3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8037e40:	2200      	movs	r2, #0
 8037e42:	729a      	strb	r2, [r3, #10]
 8037e44:	2200      	movs	r2, #0
 8037e46:	72da      	strb	r2, [r3, #11]
#endif /* CHECKSUM_GEN_IP */

    /* No need for separate header pbuf - we allowed room for it in rambuf
     * when allocated.
     */
    netif->output(netif, rambuf, dest);
 8037e48:	68bb      	ldr	r3, [r7, #8]
 8037e4a:	695b      	ldr	r3, [r3, #20]
 8037e4c:	687a      	ldr	r2, [r7, #4]
 8037e4e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8037e50:	68b8      	ldr	r0, [r7, #8]
 8037e52:	4798      	blx	r3
    IPFRAG_STATS_INC(ip_frag.xmit);
 8037e54:	4b17      	ldr	r3, [pc, #92]	; (8037eb4 <ip4_frag+0x298>)
 8037e56:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
 8037e58:	3301      	adds	r3, #1
 8037e5a:	b29a      	uxth	r2, r3
 8037e5c:	4b15      	ldr	r3, [pc, #84]	; (8037eb4 <ip4_frag+0x298>)
 8037e5e:	861a      	strh	r2, [r3, #48]	; 0x30
     * recreate it next time round the loop. If we're lucky the hardware
     * will have already sent the packet, the free will really free, and
     * there will be zero memory penalty.
     */

    pbuf_free(rambuf);
 8037e60:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8037e62:	f7f6 fa53 	bl	802e30c <pbuf_free>
    left = (u16_t)(left - fragsize);
 8037e66:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8037e6a:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8037e6c:	1ad3      	subs	r3, r2, r3
 8037e6e:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
    ofo = (u16_t)(ofo + nfb);
 8037e72:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 8037e76:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8037e78:	4413      	add	r3, r2
 8037e7a:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  while (left) {
 8037e7e:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8037e82:	2b00      	cmp	r3, #0
 8037e84:	f47f af13 	bne.w	8037cae <ip4_frag+0x92>
  }
  MIB2_STATS_INC(mib2.ipfragoks);
  return ERR_OK;
 8037e88:	2300      	movs	r3, #0
 8037e8a:	e002      	b.n	8037e92 <ip4_frag+0x276>
      goto memerr;
 8037e8c:	bf00      	nop
memerr:
  MIB2_STATS_INC(mib2.ipfragfails);
  return ERR_MEM;
 8037e8e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8037e92:	4618      	mov	r0, r3
 8037e94:	3748      	adds	r7, #72	; 0x48
 8037e96:	46bd      	mov	sp, r7
 8037e98:	bd80      	pop	{r7, pc}
 8037e9a:	bf00      	nop
 8037e9c:	0803d198 	.word	0x0803d198
 8037ea0:	0803d374 	.word	0x0803d374
 8037ea4:	0803d1e0 	.word	0x0803d1e0
 8037ea8:	0803d390 	.word	0x0803d390
 8037eac:	0803d3b0 	.word	0x0803d3b0
 8037eb0:	08037bb5 	.word	0x08037bb5
 8037eb4:	2000ee04 	.word	0x2000ee04

08037eb8 <ethernet_input>:
 * @see ETHARP_SUPPORT_VLAN
 * @see LWIP_HOOK_VLAN_CHECK
 */
err_t
ethernet_input(struct pbuf *p, struct netif *netif)
{
 8037eb8:	b580      	push	{r7, lr}
 8037eba:	b086      	sub	sp, #24
 8037ebc:	af00      	add	r7, sp, #0
 8037ebe:	6078      	str	r0, [r7, #4]
 8037ec0:	6039      	str	r1, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t type;
#if LWIP_ARP || ETHARP_SUPPORT_VLAN || LWIP_IPV6
  u16_t next_hdr_offset = SIZEOF_ETH_HDR;
 8037ec2:	230e      	movs	r3, #14
 8037ec4:	82fb      	strh	r3, [r7, #22]
#endif /* LWIP_ARP || ETHARP_SUPPORT_VLAN */

  LWIP_ASSERT_CORE_LOCKED();

  if (p->len <= SIZEOF_ETH_HDR) {
 8037ec6:	687b      	ldr	r3, [r7, #4]
 8037ec8:	895b      	ldrh	r3, [r3, #10]
 8037eca:	2b0e      	cmp	r3, #14
 8037ecc:	d80c      	bhi.n	8037ee8 <ethernet_input+0x30>
    /* a packet with only an ethernet header (or less) is not valid for us */
    ETHARP_STATS_INC(etharp.proterr);
 8037ece:	4b51      	ldr	r3, [pc, #324]	; (8038014 <ethernet_input+0x15c>)
 8037ed0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8037ed2:	3301      	adds	r3, #1
 8037ed4:	b29a      	uxth	r2, r3
 8037ed6:	4b4f      	ldr	r3, [pc, #316]	; (8038014 <ethernet_input+0x15c>)
 8037ed8:	851a      	strh	r2, [r3, #40]	; 0x28
    ETHARP_STATS_INC(etharp.drop);
 8037eda:	4b4e      	ldr	r3, [pc, #312]	; (8038014 <ethernet_input+0x15c>)
 8037edc:	8bdb      	ldrh	r3, [r3, #30]
 8037ede:	3301      	adds	r3, #1
 8037ee0:	b29a      	uxth	r2, r3
 8037ee2:	4b4c      	ldr	r3, [pc, #304]	; (8038014 <ethernet_input+0x15c>)
 8037ee4:	83da      	strh	r2, [r3, #30]
    MIB2_STATS_NETIF_INC(netif, ifinerrors);
    goto free_and_return;
 8037ee6:	e08d      	b.n	8038004 <ethernet_input+0x14c>
  }

  if (p->if_idx == NETIF_NO_INDEX) {
 8037ee8:	687b      	ldr	r3, [r7, #4]
 8037eea:	7bdb      	ldrb	r3, [r3, #15]
 8037eec:	2b00      	cmp	r3, #0
 8037eee:	d106      	bne.n	8037efe <ethernet_input+0x46>
    p->if_idx = netif_get_index(netif);
 8037ef0:	683b      	ldr	r3, [r7, #0]
 8037ef2:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8037ef6:	3301      	adds	r3, #1
 8037ef8:	b2da      	uxtb	r2, r3
 8037efa:	687b      	ldr	r3, [r7, #4]
 8037efc:	73da      	strb	r2, [r3, #15]
  }

  /* points to packet payload, which starts with an Ethernet header */
  ethhdr = (struct eth_hdr *)p->payload;
 8037efe:	687b      	ldr	r3, [r7, #4]
 8037f00:	685b      	ldr	r3, [r3, #4]
 8037f02:	613b      	str	r3, [r7, #16]
               (unsigned char)ethhdr->dest.addr[3], (unsigned char)ethhdr->dest.addr[4], (unsigned char)ethhdr->dest.addr[5],
               (unsigned char)ethhdr->src.addr[0],  (unsigned char)ethhdr->src.addr[1],  (unsigned char)ethhdr->src.addr[2],
               (unsigned char)ethhdr->src.addr[3],  (unsigned char)ethhdr->src.addr[4],  (unsigned char)ethhdr->src.addr[5],
               lwip_htons(ethhdr->type)));

  type = ethhdr->type;
 8037f04:	693b      	ldr	r3, [r7, #16]
 8037f06:	7b1a      	ldrb	r2, [r3, #12]
 8037f08:	7b5b      	ldrb	r3, [r3, #13]
 8037f0a:	021b      	lsls	r3, r3, #8
 8037f0c:	4313      	orrs	r3, r2
 8037f0e:	81fb      	strh	r3, [r7, #14]

#if LWIP_ARP_FILTER_NETIF
  netif = LWIP_ARP_FILTER_NETIF_FN(p, netif, lwip_htons(type));
#endif /* LWIP_ARP_FILTER_NETIF*/

  if (ethhdr->dest.addr[0] & 1) {
 8037f10:	693b      	ldr	r3, [r7, #16]
 8037f12:	781b      	ldrb	r3, [r3, #0]
 8037f14:	f003 0301 	and.w	r3, r3, #1
 8037f18:	2b00      	cmp	r3, #0
 8037f1a:	d023      	beq.n	8037f64 <ethernet_input+0xac>
    /* this might be a multicast or broadcast packet */
    if (ethhdr->dest.addr[0] == LL_IP4_MULTICAST_ADDR_0) {
 8037f1c:	693b      	ldr	r3, [r7, #16]
 8037f1e:	781b      	ldrb	r3, [r3, #0]
 8037f20:	2b01      	cmp	r3, #1
 8037f22:	d10f      	bne.n	8037f44 <ethernet_input+0x8c>
#if LWIP_IPV4
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 8037f24:	693b      	ldr	r3, [r7, #16]
 8037f26:	785b      	ldrb	r3, [r3, #1]
 8037f28:	2b00      	cmp	r3, #0
 8037f2a:	d11b      	bne.n	8037f64 <ethernet_input+0xac>
          (ethhdr->dest.addr[2] == LL_IP4_MULTICAST_ADDR_2)) {
 8037f2c:	693b      	ldr	r3, [r7, #16]
 8037f2e:	789b      	ldrb	r3, [r3, #2]
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 8037f30:	2b5e      	cmp	r3, #94	; 0x5e
 8037f32:	d117      	bne.n	8037f64 <ethernet_input+0xac>
        /* mark the pbuf as link-layer multicast */
        p->flags |= PBUF_FLAG_LLMCAST;
 8037f34:	687b      	ldr	r3, [r7, #4]
 8037f36:	7b5b      	ldrb	r3, [r3, #13]
 8037f38:	f043 0310 	orr.w	r3, r3, #16
 8037f3c:	b2da      	uxtb	r2, r3
 8037f3e:	687b      	ldr	r3, [r7, #4]
 8037f40:	735a      	strb	r2, [r3, #13]
 8037f42:	e00f      	b.n	8037f64 <ethernet_input+0xac>
             (ethhdr->dest.addr[1] == LL_IP6_MULTICAST_ADDR_1)) {
      /* mark the pbuf as link-layer multicast */
      p->flags |= PBUF_FLAG_LLMCAST;
    }
#endif /* LWIP_IPV6 */
    else if (eth_addr_cmp(&ethhdr->dest, &ethbroadcast)) {
 8037f44:	693b      	ldr	r3, [r7, #16]
 8037f46:	2206      	movs	r2, #6
 8037f48:	4933      	ldr	r1, [pc, #204]	; (8038018 <ethernet_input+0x160>)
 8037f4a:	4618      	mov	r0, r3
 8037f4c:	f000 fc82 	bl	8038854 <memcmp>
 8037f50:	4603      	mov	r3, r0
 8037f52:	2b00      	cmp	r3, #0
 8037f54:	d106      	bne.n	8037f64 <ethernet_input+0xac>
      /* mark the pbuf as link-layer broadcast */
      p->flags |= PBUF_FLAG_LLBCAST;
 8037f56:	687b      	ldr	r3, [r7, #4]
 8037f58:	7b5b      	ldrb	r3, [r3, #13]
 8037f5a:	f043 0308 	orr.w	r3, r3, #8
 8037f5e:	b2da      	uxtb	r2, r3
 8037f60:	687b      	ldr	r3, [r7, #4]
 8037f62:	735a      	strb	r2, [r3, #13]
    }
  }

  switch (type) {
 8037f64:	89fb      	ldrh	r3, [r7, #14]
 8037f66:	2b08      	cmp	r3, #8
 8037f68:	d003      	beq.n	8037f72 <ethernet_input+0xba>
 8037f6a:	f5b3 6fc1 	cmp.w	r3, #1544	; 0x608
 8037f6e:	d014      	beq.n	8037f9a <ethernet_input+0xe2>
 8037f70:	e034      	b.n	8037fdc <ethernet_input+0x124>
#if LWIP_IPV4 && LWIP_ARP
    /* IP packet? */
    case PP_HTONS(ETHTYPE_IP):
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 8037f72:	683b      	ldr	r3, [r7, #0]
 8037f74:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8037f78:	f003 0308 	and.w	r3, r3, #8
 8037f7c:	2b00      	cmp	r3, #0
 8037f7e:	d03c      	beq.n	8037ffa <ethernet_input+0x142>
        goto free_and_return;
      }
      /* skip Ethernet header (min. size checked above) */
      if (pbuf_remove_header(p, next_hdr_offset)) {
 8037f80:	8afb      	ldrh	r3, [r7, #22]
 8037f82:	4619      	mov	r1, r3
 8037f84:	6878      	ldr	r0, [r7, #4]
 8037f86:	f7f6 f909 	bl	802e19c <pbuf_remove_header>
 8037f8a:	4603      	mov	r3, r0
 8037f8c:	2b00      	cmp	r3, #0
 8037f8e:	d136      	bne.n	8037ffe <ethernet_input+0x146>
                     p->tot_len, next_hdr_offset));
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("Can't move over header in packet"));
        goto free_and_return;
      } else {
        /* pass to IP layer */
        ip4_input(p, netif);
 8037f90:	6839      	ldr	r1, [r7, #0]
 8037f92:	6878      	ldr	r0, [r7, #4]
 8037f94:	f7fe fe7e 	bl	8036c94 <ip4_input>
      }
      break;
 8037f98:	e02d      	b.n	8037ff6 <ethernet_input+0x13e>

    case PP_HTONS(ETHTYPE_ARP):
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 8037f9a:	683b      	ldr	r3, [r7, #0]
 8037f9c:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8037fa0:	f003 0308 	and.w	r3, r3, #8
 8037fa4:	2b00      	cmp	r3, #0
 8037fa6:	d02c      	beq.n	8038002 <ethernet_input+0x14a>
        goto free_and_return;
      }
      /* skip Ethernet header (min. size checked above) */
      if (pbuf_remove_header(p, next_hdr_offset)) {
 8037fa8:	8afb      	ldrh	r3, [r7, #22]
 8037faa:	4619      	mov	r1, r3
 8037fac:	6878      	ldr	r0, [r7, #4]
 8037fae:	f7f6 f8f5 	bl	802e19c <pbuf_remove_header>
 8037fb2:	4603      	mov	r3, r0
 8037fb4:	2b00      	cmp	r3, #0
 8037fb6:	d00c      	beq.n	8037fd2 <ethernet_input+0x11a>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
                    ("ethernet_input: ARP response packet dropped, too short (%"U16_F"/%"U16_F")\n",
                     p->tot_len, next_hdr_offset));
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("Can't move over header in packet"));
        ETHARP_STATS_INC(etharp.lenerr);
 8037fb8:	4b16      	ldr	r3, [pc, #88]	; (8038014 <ethernet_input+0x15c>)
 8037fba:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 8037fbc:	3301      	adds	r3, #1
 8037fbe:	b29a      	uxth	r2, r3
 8037fc0:	4b14      	ldr	r3, [pc, #80]	; (8038014 <ethernet_input+0x15c>)
 8037fc2:	845a      	strh	r2, [r3, #34]	; 0x22
        ETHARP_STATS_INC(etharp.drop);
 8037fc4:	4b13      	ldr	r3, [pc, #76]	; (8038014 <ethernet_input+0x15c>)
 8037fc6:	8bdb      	ldrh	r3, [r3, #30]
 8037fc8:	3301      	adds	r3, #1
 8037fca:	b29a      	uxth	r2, r3
 8037fcc:	4b11      	ldr	r3, [pc, #68]	; (8038014 <ethernet_input+0x15c>)
 8037fce:	83da      	strh	r2, [r3, #30]
        goto free_and_return;
 8037fd0:	e018      	b.n	8038004 <ethernet_input+0x14c>
      } else {
        /* pass p to ARP module */
        etharp_input(p, netif);
 8037fd2:	6839      	ldr	r1, [r7, #0]
 8037fd4:	6878      	ldr	r0, [r7, #4]
 8037fd6:	f7fd ff89 	bl	8035eec <etharp_input>
      }
      break;
 8037fda:	e00c      	b.n	8037ff6 <ethernet_input+0x13e>
#ifdef LWIP_HOOK_UNKNOWN_ETH_PROTOCOL
      if (LWIP_HOOK_UNKNOWN_ETH_PROTOCOL(p, netif) == ERR_OK) {
        break;
      }
#endif
      ETHARP_STATS_INC(etharp.proterr);
 8037fdc:	4b0d      	ldr	r3, [pc, #52]	; (8038014 <ethernet_input+0x15c>)
 8037fde:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8037fe0:	3301      	adds	r3, #1
 8037fe2:	b29a      	uxth	r2, r3
 8037fe4:	4b0b      	ldr	r3, [pc, #44]	; (8038014 <ethernet_input+0x15c>)
 8037fe6:	851a      	strh	r2, [r3, #40]	; 0x28
      ETHARP_STATS_INC(etharp.drop);
 8037fe8:	4b0a      	ldr	r3, [pc, #40]	; (8038014 <ethernet_input+0x15c>)
 8037fea:	8bdb      	ldrh	r3, [r3, #30]
 8037fec:	3301      	adds	r3, #1
 8037fee:	b29a      	uxth	r2, r3
 8037ff0:	4b08      	ldr	r3, [pc, #32]	; (8038014 <ethernet_input+0x15c>)
 8037ff2:	83da      	strh	r2, [r3, #30]
      MIB2_STATS_NETIF_INC(netif, ifinunknownprotos);
      goto free_and_return;
 8037ff4:	e006      	b.n	8038004 <ethernet_input+0x14c>
  }

  /* This means the pbuf is freed or consumed,
     so the caller doesn't have to free it again */
  return ERR_OK;
 8037ff6:	2300      	movs	r3, #0
 8037ff8:	e008      	b.n	803800c <ethernet_input+0x154>
        goto free_and_return;
 8037ffa:	bf00      	nop
 8037ffc:	e002      	b.n	8038004 <ethernet_input+0x14c>
        goto free_and_return;
 8037ffe:	bf00      	nop
 8038000:	e000      	b.n	8038004 <ethernet_input+0x14c>
        goto free_and_return;
 8038002:	bf00      	nop

free_and_return:
  pbuf_free(p);
 8038004:	6878      	ldr	r0, [r7, #4]
 8038006:	f7f6 f981 	bl	802e30c <pbuf_free>
  return ERR_OK;
 803800a:	2300      	movs	r3, #0
}
 803800c:	4618      	mov	r0, r3
 803800e:	3718      	adds	r7, #24
 8038010:	46bd      	mov	sp, r7
 8038012:	bd80      	pop	{r7, pc}
 8038014:	2000ee04 	.word	0x2000ee04
 8038018:	0803d630 	.word	0x0803d630

0803801c <ethernet_output>:
 * @return ERR_OK if the packet was sent, any other err_t on failure
 */
err_t
ethernet_output(struct netif * netif, struct pbuf * p,
                const struct eth_addr * src, const struct eth_addr * dst,
                u16_t eth_type) {
 803801c:	b580      	push	{r7, lr}
 803801e:	b086      	sub	sp, #24
 8038020:	af00      	add	r7, sp, #0
 8038022:	60f8      	str	r0, [r7, #12]
 8038024:	60b9      	str	r1, [r7, #8]
 8038026:	607a      	str	r2, [r7, #4]
 8038028:	603b      	str	r3, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t eth_type_be = lwip_htons(eth_type);
 803802a:	8c3b      	ldrh	r3, [r7, #32]
 803802c:	4618      	mov	r0, r3
 803802e:	f7f4 fc79 	bl	802c924 <lwip_htons>
 8038032:	4603      	mov	r3, r0
 8038034:	82fb      	strh	r3, [r7, #22]

    eth_type_be = PP_HTONS(ETHTYPE_VLAN);
  } else
#endif /* ETHARP_SUPPORT_VLAN && defined(LWIP_HOOK_VLAN_SET) */
  {
    if (pbuf_add_header(p, SIZEOF_ETH_HDR) != 0) {
 8038036:	210e      	movs	r1, #14
 8038038:	68b8      	ldr	r0, [r7, #8]
 803803a:	f7f6 f89f 	bl	802e17c <pbuf_add_header>
 803803e:	4603      	mov	r3, r0
 8038040:	2b00      	cmp	r3, #0
 8038042:	d125      	bne.n	8038090 <ethernet_output+0x74>
    }
  }

  LWIP_ASSERT_CORE_LOCKED();

  ethhdr = (struct eth_hdr *)p->payload;
 8038044:	68bb      	ldr	r3, [r7, #8]
 8038046:	685b      	ldr	r3, [r3, #4]
 8038048:	613b      	str	r3, [r7, #16]
  ethhdr->type = eth_type_be;
 803804a:	693b      	ldr	r3, [r7, #16]
 803804c:	8afa      	ldrh	r2, [r7, #22]
 803804e:	819a      	strh	r2, [r3, #12]
  SMEMCPY(&ethhdr->dest, dst, ETH_HWADDR_LEN);
 8038050:	693b      	ldr	r3, [r7, #16]
 8038052:	2206      	movs	r2, #6
 8038054:	6839      	ldr	r1, [r7, #0]
 8038056:	4618      	mov	r0, r3
 8038058:	f000 fc0c 	bl	8038874 <memcpy>
  SMEMCPY(&ethhdr->src,  src, ETH_HWADDR_LEN);
 803805c:	693b      	ldr	r3, [r7, #16]
 803805e:	3306      	adds	r3, #6
 8038060:	2206      	movs	r2, #6
 8038062:	6879      	ldr	r1, [r7, #4]
 8038064:	4618      	mov	r0, r3
 8038066:	f000 fc05 	bl	8038874 <memcpy>

  LWIP_ASSERT("netif->hwaddr_len must be 6 for ethernet_output!",
 803806a:	68fb      	ldr	r3, [r7, #12]
 803806c:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8038070:	2b06      	cmp	r3, #6
 8038072:	d006      	beq.n	8038082 <ethernet_output+0x66>
 8038074:	4b0d      	ldr	r3, [pc, #52]	; (80380ac <ethernet_output+0x90>)
 8038076:	f44f 7299 	mov.w	r2, #306	; 0x132
 803807a:	490d      	ldr	r1, [pc, #52]	; (80380b0 <ethernet_output+0x94>)
 803807c:	480d      	ldr	r0, [pc, #52]	; (80380b4 <ethernet_output+0x98>)
 803807e:	f000 fff3 	bl	8039068 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE,
              ("ethernet_output: sending packet %p\n", (void *)p));

  /* send the packet */
  return netif->linkoutput(netif, p);
 8038082:	68fb      	ldr	r3, [r7, #12]
 8038084:	699b      	ldr	r3, [r3, #24]
 8038086:	68b9      	ldr	r1, [r7, #8]
 8038088:	68f8      	ldr	r0, [r7, #12]
 803808a:	4798      	blx	r3
 803808c:	4603      	mov	r3, r0
 803808e:	e008      	b.n	80380a2 <ethernet_output+0x86>
      goto pbuf_header_failed;
 8038090:	bf00      	nop

pbuf_header_failed:
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
              ("ethernet_output: could not allocate room for header.\n"));
  LINK_STATS_INC(link.lenerr);
 8038092:	4b09      	ldr	r3, [pc, #36]	; (80380b8 <ethernet_output+0x9c>)
 8038094:	895b      	ldrh	r3, [r3, #10]
 8038096:	3301      	adds	r3, #1
 8038098:	b29a      	uxth	r2, r3
 803809a:	4b07      	ldr	r3, [pc, #28]	; (80380b8 <ethernet_output+0x9c>)
 803809c:	815a      	strh	r2, [r3, #10]
  return ERR_BUF;
 803809e:	f06f 0301 	mvn.w	r3, #1
}
 80380a2:	4618      	mov	r0, r3
 80380a4:	3718      	adds	r7, #24
 80380a6:	46bd      	mov	sp, r7
 80380a8:	bd80      	pop	{r7, pc}
 80380aa:	bf00      	nop
 80380ac:	0803d3c0 	.word	0x0803d3c0
 80380b0:	0803d3f8 	.word	0x0803d3f8
 80380b4:	0803d42c 	.word	0x0803d42c
 80380b8:	2000ee04 	.word	0x2000ee04

080380bc <sys_mbox_new>:
#endif

/*-----------------------------------------------------------------------------------*/
//  Creates an empty mailbox.
err_t sys_mbox_new(sys_mbox_t *mbox, int size)
{
 80380bc:	b580      	push	{r7, lr}
 80380be:	b086      	sub	sp, #24
 80380c0:	af00      	add	r7, sp, #0
 80380c2:	6078      	str	r0, [r7, #4]
 80380c4:	6039      	str	r1, [r7, #0]
#if (osCMSIS < 0x20000U)
  osMessageQDef(QUEUE, size, void *);
 80380c6:	683b      	ldr	r3, [r7, #0]
 80380c8:	60bb      	str	r3, [r7, #8]
 80380ca:	2304      	movs	r3, #4
 80380cc:	60fb      	str	r3, [r7, #12]
 80380ce:	2300      	movs	r3, #0
 80380d0:	613b      	str	r3, [r7, #16]
 80380d2:	2300      	movs	r3, #0
 80380d4:	617b      	str	r3, [r7, #20]
  *mbox = osMessageCreate(osMessageQ(QUEUE), NULL);
 80380d6:	f107 0308 	add.w	r3, r7, #8
 80380da:	2100      	movs	r1, #0
 80380dc:	4618      	mov	r0, r3
 80380de:	f7ed fb6c 	bl	80257ba <osMessageCreate>
 80380e2:	4602      	mov	r2, r0
 80380e4:	687b      	ldr	r3, [r7, #4]
 80380e6:	601a      	str	r2, [r3, #0]
#else
  *mbox = osMessageQueueNew(size, sizeof(void *), NULL);
#endif
#if SYS_STATS
  ++lwip_stats.sys.mbox.used;
 80380e8:	4b10      	ldr	r3, [pc, #64]	; (803812c <sys_mbox_new+0x70>)
 80380ea:	f8b3 30f4 	ldrh.w	r3, [r3, #244]	; 0xf4
 80380ee:	3301      	adds	r3, #1
 80380f0:	b29a      	uxth	r2, r3
 80380f2:	4b0e      	ldr	r3, [pc, #56]	; (803812c <sys_mbox_new+0x70>)
 80380f4:	f8a3 20f4 	strh.w	r2, [r3, #244]	; 0xf4
  if(lwip_stats.sys.mbox.max < lwip_stats.sys.mbox.used)
 80380f8:	4b0c      	ldr	r3, [pc, #48]	; (803812c <sys_mbox_new+0x70>)
 80380fa:	f8b3 20f6 	ldrh.w	r2, [r3, #246]	; 0xf6
 80380fe:	4b0b      	ldr	r3, [pc, #44]	; (803812c <sys_mbox_new+0x70>)
 8038100:	f8b3 30f4 	ldrh.w	r3, [r3, #244]	; 0xf4
 8038104:	429a      	cmp	r2, r3
 8038106:	d205      	bcs.n	8038114 <sys_mbox_new+0x58>
  {
    lwip_stats.sys.mbox.max = lwip_stats.sys.mbox.used;
 8038108:	4b08      	ldr	r3, [pc, #32]	; (803812c <sys_mbox_new+0x70>)
 803810a:	f8b3 20f4 	ldrh.w	r2, [r3, #244]	; 0xf4
 803810e:	4b07      	ldr	r3, [pc, #28]	; (803812c <sys_mbox_new+0x70>)
 8038110:	f8a3 20f6 	strh.w	r2, [r3, #246]	; 0xf6
  }
#endif /* SYS_STATS */
  if(*mbox == NULL)
 8038114:	687b      	ldr	r3, [r7, #4]
 8038116:	681b      	ldr	r3, [r3, #0]
 8038118:	2b00      	cmp	r3, #0
 803811a:	d102      	bne.n	8038122 <sys_mbox_new+0x66>
    return ERR_MEM;
 803811c:	f04f 33ff 	mov.w	r3, #4294967295
 8038120:	e000      	b.n	8038124 <sys_mbox_new+0x68>

  return ERR_OK;
 8038122:	2300      	movs	r3, #0
}
 8038124:	4618      	mov	r0, r3
 8038126:	3718      	adds	r7, #24
 8038128:	46bd      	mov	sp, r7
 803812a:	bd80      	pop	{r7, pc}
 803812c:	2000ee04 	.word	0x2000ee04

08038130 <sys_mbox_free>:
  Deallocates a mailbox. If there are messages still present in the
  mailbox when the mailbox is deallocated, it is an indication of a
  programming error in lwIP and the developer should be notified.
*/
void sys_mbox_free(sys_mbox_t *mbox)
{
 8038130:	b580      	push	{r7, lr}
 8038132:	b082      	sub	sp, #8
 8038134:	af00      	add	r7, sp, #0
 8038136:	6078      	str	r0, [r7, #4]
#if (osCMSIS < 0x20000U)
  if(osMessageWaiting(*mbox))
 8038138:	687b      	ldr	r3, [r7, #4]
 803813a:	681b      	ldr	r3, [r3, #0]
 803813c:	4618      	mov	r0, r3
 803813e:	f7ed fc19 	bl	8025974 <osMessageWaiting>
 8038142:	4603      	mov	r3, r0
 8038144:	2b00      	cmp	r3, #0
 8038146:	d007      	beq.n	8038158 <sys_mbox_free+0x28>
#endif
  {
    /* Line for breakpoint.  Should never break here! */
    portNOP();
#if SYS_STATS
    lwip_stats.sys.mbox.err++;
 8038148:	4b0c      	ldr	r3, [pc, #48]	; (803817c <sys_mbox_free+0x4c>)
 803814a:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 803814e:	3301      	adds	r3, #1
 8038150:	b29a      	uxth	r2, r3
 8038152:	4b0a      	ldr	r3, [pc, #40]	; (803817c <sys_mbox_free+0x4c>)
 8038154:	f8a3 20f8 	strh.w	r2, [r3, #248]	; 0xf8
#endif /* SYS_STATS */

  }
#if (osCMSIS < 0x20000U)
  osMessageDelete(*mbox);
 8038158:	687b      	ldr	r3, [r7, #4]
 803815a:	681b      	ldr	r3, [r3, #0]
 803815c:	4618      	mov	r0, r3
 803815e:	f7ed fc1f 	bl	80259a0 <osMessageDelete>
#else
  osMessageQueueDelete(*mbox);
#endif
#if SYS_STATS
  --lwip_stats.sys.mbox.used;
 8038162:	4b06      	ldr	r3, [pc, #24]	; (803817c <sys_mbox_free+0x4c>)
 8038164:	f8b3 30f4 	ldrh.w	r3, [r3, #244]	; 0xf4
 8038168:	3b01      	subs	r3, #1
 803816a:	b29a      	uxth	r2, r3
 803816c:	4b03      	ldr	r3, [pc, #12]	; (803817c <sys_mbox_free+0x4c>)
 803816e:	f8a3 20f4 	strh.w	r2, [r3, #244]	; 0xf4
#endif /* SYS_STATS */
}
 8038172:	bf00      	nop
 8038174:	3708      	adds	r7, #8
 8038176:	46bd      	mov	sp, r7
 8038178:	bd80      	pop	{r7, pc}
 803817a:	bf00      	nop
 803817c:	2000ee04 	.word	0x2000ee04

08038180 <sys_mbox_trypost>:


/*-----------------------------------------------------------------------------------*/
//   Try to post the "msg" to the mailbox.
err_t sys_mbox_trypost(sys_mbox_t *mbox, void *msg)
{
 8038180:	b580      	push	{r7, lr}
 8038182:	b084      	sub	sp, #16
 8038184:	af00      	add	r7, sp, #0
 8038186:	6078      	str	r0, [r7, #4]
 8038188:	6039      	str	r1, [r7, #0]
  err_t result;
#if (osCMSIS < 0x20000U)
  if(osMessagePut(*mbox, (uint32_t)msg, 0) == osOK)
 803818a:	687b      	ldr	r3, [r7, #4]
 803818c:	681b      	ldr	r3, [r3, #0]
 803818e:	6839      	ldr	r1, [r7, #0]
 8038190:	2200      	movs	r2, #0
 8038192:	4618      	mov	r0, r3
 8038194:	f7ed fb3a 	bl	802580c <osMessagePut>
 8038198:	4603      	mov	r3, r0
 803819a:	2b00      	cmp	r3, #0
 803819c:	d102      	bne.n	80381a4 <sys_mbox_trypost+0x24>
#else
  if(osMessageQueuePut(*mbox, &msg, 0, 0) == osOK)
#endif
  {
    result = ERR_OK;
 803819e:	2300      	movs	r3, #0
 80381a0:	73fb      	strb	r3, [r7, #15]
 80381a2:	e009      	b.n	80381b8 <sys_mbox_trypost+0x38>
  }
  else
  {
    // could not post, queue must be full
    result = ERR_MEM;
 80381a4:	23ff      	movs	r3, #255	; 0xff
 80381a6:	73fb      	strb	r3, [r7, #15]

#if SYS_STATS
    lwip_stats.sys.mbox.err++;
 80381a8:	4b06      	ldr	r3, [pc, #24]	; (80381c4 <sys_mbox_trypost+0x44>)
 80381aa:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80381ae:	3301      	adds	r3, #1
 80381b0:	b29a      	uxth	r2, r3
 80381b2:	4b04      	ldr	r3, [pc, #16]	; (80381c4 <sys_mbox_trypost+0x44>)
 80381b4:	f8a3 20f8 	strh.w	r2, [r3, #248]	; 0xf8
#endif /* SYS_STATS */
  }

  return result;
 80381b8:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80381bc:	4618      	mov	r0, r3
 80381be:	3710      	adds	r7, #16
 80381c0:	46bd      	mov	sp, r7
 80381c2:	bd80      	pop	{r7, pc}
 80381c4:	2000ee04 	.word	0x2000ee04

080381c8 <sys_arch_mbox_fetch>:

  Note that a function with a similar name, sys_mbox_fetch(), is
  implemented by lwIP.
*/
u32_t sys_arch_mbox_fetch(sys_mbox_t *mbox, void **msg, u32_t timeout)
{
 80381c8:	b580      	push	{r7, lr}
 80381ca:	b08c      	sub	sp, #48	; 0x30
 80381cc:	af00      	add	r7, sp, #0
 80381ce:	61f8      	str	r0, [r7, #28]
 80381d0:	61b9      	str	r1, [r7, #24]
 80381d2:	617a      	str	r2, [r7, #20]
#if (osCMSIS < 0x20000U)
  osEvent event;
  uint32_t starttime = osKernelSysTick();
 80381d4:	f7ed f90e 	bl	80253f4 <osKernelSysTick>
 80381d8:	62f8      	str	r0, [r7, #44]	; 0x2c
#else
  osStatus_t status;
  uint32_t starttime = osKernelGetTickCount();
#endif
  if(timeout != 0)
 80381da:	697b      	ldr	r3, [r7, #20]
 80381dc:	2b00      	cmp	r3, #0
 80381de:	d017      	beq.n	8038210 <sys_arch_mbox_fetch+0x48>
  {
#if (osCMSIS < 0x20000U)
    event = osMessageGet (*mbox, timeout);
 80381e0:	69fb      	ldr	r3, [r7, #28]
 80381e2:	6819      	ldr	r1, [r3, #0]
 80381e4:	f107 0320 	add.w	r3, r7, #32
 80381e8:	697a      	ldr	r2, [r7, #20]
 80381ea:	4618      	mov	r0, r3
 80381ec:	f7ed fb4e 	bl	802588c <osMessageGet>

    if(event.status == osEventMessage)
 80381f0:	6a3b      	ldr	r3, [r7, #32]
 80381f2:	2b10      	cmp	r3, #16
 80381f4:	d109      	bne.n	803820a <sys_arch_mbox_fetch+0x42>
    {
      *msg = (void *)event.value.v;
 80381f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80381f8:	461a      	mov	r2, r3
 80381fa:	69bb      	ldr	r3, [r7, #24]
 80381fc:	601a      	str	r2, [r3, #0]
      return (osKernelSysTick() - starttime);
 80381fe:	f7ed f8f9 	bl	80253f4 <osKernelSysTick>
 8038202:	4602      	mov	r2, r0
 8038204:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8038206:	1ad3      	subs	r3, r2, r3
 8038208:	e019      	b.n	803823e <sys_arch_mbox_fetch+0x76>
      return (osKernelGetTickCount() - starttime);
    }
#endif
    else
    {
      return SYS_ARCH_TIMEOUT;
 803820a:	f04f 33ff 	mov.w	r3, #4294967295
 803820e:	e016      	b.n	803823e <sys_arch_mbox_fetch+0x76>
    }
  }
  else
  {
#if (osCMSIS < 0x20000U)
    event = osMessageGet (*mbox, osWaitForever);
 8038210:	69fb      	ldr	r3, [r7, #28]
 8038212:	6819      	ldr	r1, [r3, #0]
 8038214:	463b      	mov	r3, r7
 8038216:	f04f 32ff 	mov.w	r2, #4294967295
 803821a:	4618      	mov	r0, r3
 803821c:	f7ed fb36 	bl	802588c <osMessageGet>
 8038220:	f107 0320 	add.w	r3, r7, #32
 8038224:	463a      	mov	r2, r7
 8038226:	ca07      	ldmia	r2, {r0, r1, r2}
 8038228:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    *msg = (void *)event.value.v;
 803822c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 803822e:	461a      	mov	r2, r3
 8038230:	69bb      	ldr	r3, [r7, #24]
 8038232:	601a      	str	r2, [r3, #0]
    return (osKernelSysTick() - starttime);
 8038234:	f7ed f8de 	bl	80253f4 <osKernelSysTick>
 8038238:	4602      	mov	r2, r0
 803823a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 803823c:	1ad3      	subs	r3, r2, r3
#else
    osMessageQueueGet(*mbox, msg, 0, osWaitForever );
    return (osKernelGetTickCount() - starttime);
#endif
  }
}
 803823e:	4618      	mov	r0, r3
 8038240:	3730      	adds	r7, #48	; 0x30
 8038242:	46bd      	mov	sp, r7
 8038244:	bd80      	pop	{r7, pc}

08038246 <sys_arch_mbox_tryfetch>:
/*
  Similar to sys_arch_mbox_fetch, but if message is not ready immediately, we'll
  return with SYS_MBOX_EMPTY.  On success, 0 is returned.
*/
u32_t sys_arch_mbox_tryfetch(sys_mbox_t *mbox, void **msg)
{
 8038246:	b580      	push	{r7, lr}
 8038248:	b086      	sub	sp, #24
 803824a:	af00      	add	r7, sp, #0
 803824c:	6078      	str	r0, [r7, #4]
 803824e:	6039      	str	r1, [r7, #0]
#if (osCMSIS < 0x20000U)
  osEvent event;

  event = osMessageGet (*mbox, 0);
 8038250:	687b      	ldr	r3, [r7, #4]
 8038252:	6819      	ldr	r1, [r3, #0]
 8038254:	f107 030c 	add.w	r3, r7, #12
 8038258:	2200      	movs	r2, #0
 803825a:	4618      	mov	r0, r3
 803825c:	f7ed fb16 	bl	802588c <osMessageGet>

  if(event.status == osEventMessage)
 8038260:	68fb      	ldr	r3, [r7, #12]
 8038262:	2b10      	cmp	r3, #16
 8038264:	d105      	bne.n	8038272 <sys_arch_mbox_tryfetch+0x2c>
  {
    *msg = (void *)event.value.v;
 8038266:	693b      	ldr	r3, [r7, #16]
 8038268:	461a      	mov	r2, r3
 803826a:	683b      	ldr	r3, [r7, #0]
 803826c:	601a      	str	r2, [r3, #0]
#else
  if (osMessageQueueGet(*mbox, msg, 0, 0) == osOK)
  {
#endif
    return ERR_OK;
 803826e:	2300      	movs	r3, #0
 8038270:	e001      	b.n	8038276 <sys_arch_mbox_tryfetch+0x30>
  }
  else
  {
    return SYS_MBOX_EMPTY;
 8038272:	f04f 33ff 	mov.w	r3, #4294967295
  }
}
 8038276:	4618      	mov	r0, r3
 8038278:	3718      	adds	r7, #24
 803827a:	46bd      	mov	sp, r7
 803827c:	bd80      	pop	{r7, pc}

0803827e <sys_mbox_valid>:
/*----------------------------------------------------------------------------------*/
int sys_mbox_valid(sys_mbox_t *mbox)
{
 803827e:	b480      	push	{r7}
 8038280:	b083      	sub	sp, #12
 8038282:	af00      	add	r7, sp, #0
 8038284:	6078      	str	r0, [r7, #4]
  if (*mbox == SYS_MBOX_NULL)
 8038286:	687b      	ldr	r3, [r7, #4]
 8038288:	681b      	ldr	r3, [r3, #0]
 803828a:	2b00      	cmp	r3, #0
 803828c:	d101      	bne.n	8038292 <sys_mbox_valid+0x14>
    return 0;
 803828e:	2300      	movs	r3, #0
 8038290:	e000      	b.n	8038294 <sys_mbox_valid+0x16>
  else
    return 1;
 8038292:	2301      	movs	r3, #1
}
 8038294:	4618      	mov	r0, r3
 8038296:	370c      	adds	r7, #12
 8038298:	46bd      	mov	sp, r7
 803829a:	f85d 7b04 	ldr.w	r7, [sp], #4
 803829e:	4770      	bx	lr

080382a0 <sys_mbox_set_invalid>:
/*-----------------------------------------------------------------------------------*/
void sys_mbox_set_invalid(sys_mbox_t *mbox)
{
 80382a0:	b480      	push	{r7}
 80382a2:	b083      	sub	sp, #12
 80382a4:	af00      	add	r7, sp, #0
 80382a6:	6078      	str	r0, [r7, #4]
  *mbox = SYS_MBOX_NULL;
 80382a8:	687b      	ldr	r3, [r7, #4]
 80382aa:	2200      	movs	r2, #0
 80382ac:	601a      	str	r2, [r3, #0]
}
 80382ae:	bf00      	nop
 80382b0:	370c      	adds	r7, #12
 80382b2:	46bd      	mov	sp, r7
 80382b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80382b8:	4770      	bx	lr
	...

080382bc <sys_sem_new>:

/*-----------------------------------------------------------------------------------*/
//  Creates a new semaphore. The "count" argument specifies
//  the initial state of the semaphore.
err_t sys_sem_new(sys_sem_t *sem, u8_t count)
{
 80382bc:	b580      	push	{r7, lr}
 80382be:	b084      	sub	sp, #16
 80382c0:	af00      	add	r7, sp, #0
 80382c2:	6078      	str	r0, [r7, #4]
 80382c4:	460b      	mov	r3, r1
 80382c6:	70fb      	strb	r3, [r7, #3]
#if (osCMSIS < 0x20000U)
  osSemaphoreDef(SEM);
 80382c8:	2300      	movs	r3, #0
 80382ca:	60bb      	str	r3, [r7, #8]
 80382cc:	2300      	movs	r3, #0
 80382ce:	60fb      	str	r3, [r7, #12]
  *sem = osSemaphoreCreate (osSemaphore(SEM), 1);
 80382d0:	f107 0308 	add.w	r3, r7, #8
 80382d4:	2101      	movs	r1, #1
 80382d6:	4618      	mov	r0, r3
 80382d8:	f7ed f998 	bl	802560c <osSemaphoreCreate>
 80382dc:	4602      	mov	r2, r0
 80382de:	687b      	ldr	r3, [r7, #4]
 80382e0:	601a      	str	r2, [r3, #0]
#else
  *sem = osSemaphoreNew(UINT16_MAX, count, NULL);
#endif

  if(*sem == NULL)
 80382e2:	687b      	ldr	r3, [r7, #4]
 80382e4:	681b      	ldr	r3, [r3, #0]
 80382e6:	2b00      	cmp	r3, #0
 80382e8:	d10a      	bne.n	8038300 <sys_sem_new+0x44>
  {
#if SYS_STATS
    ++lwip_stats.sys.sem.err;
 80382ea:	4b17      	ldr	r3, [pc, #92]	; (8038348 <sys_sem_new+0x8c>)
 80382ec:	f8b3 30ec 	ldrh.w	r3, [r3, #236]	; 0xec
 80382f0:	3301      	adds	r3, #1
 80382f2:	b29a      	uxth	r2, r3
 80382f4:	4b14      	ldr	r3, [pc, #80]	; (8038348 <sys_sem_new+0x8c>)
 80382f6:	f8a3 20ec 	strh.w	r2, [r3, #236]	; 0xec
#endif /* SYS_STATS */
    return ERR_MEM;
 80382fa:	f04f 33ff 	mov.w	r3, #4294967295
 80382fe:	e01f      	b.n	8038340 <sys_sem_new+0x84>
  }

  if(count == 0)	// Means it can't be taken
 8038300:	78fb      	ldrb	r3, [r7, #3]
 8038302:	2b00      	cmp	r3, #0
 8038304:	d105      	bne.n	8038312 <sys_sem_new+0x56>
  {
#if (osCMSIS < 0x20000U)
    osSemaphoreWait(*sem, 0);
 8038306:	687b      	ldr	r3, [r7, #4]
 8038308:	681b      	ldr	r3, [r3, #0]
 803830a:	2100      	movs	r1, #0
 803830c:	4618      	mov	r0, r3
 803830e:	f7ed f9bd 	bl	802568c <osSemaphoreWait>
    osSemaphoreAcquire(*sem, 0);
#endif
  }

#if SYS_STATS
  ++lwip_stats.sys.sem.used;
 8038312:	4b0d      	ldr	r3, [pc, #52]	; (8038348 <sys_sem_new+0x8c>)
 8038314:	f8b3 30e8 	ldrh.w	r3, [r3, #232]	; 0xe8
 8038318:	3301      	adds	r3, #1
 803831a:	b29a      	uxth	r2, r3
 803831c:	4b0a      	ldr	r3, [pc, #40]	; (8038348 <sys_sem_new+0x8c>)
 803831e:	f8a3 20e8 	strh.w	r2, [r3, #232]	; 0xe8
  if (lwip_stats.sys.sem.max < lwip_stats.sys.sem.used) {
 8038322:	4b09      	ldr	r3, [pc, #36]	; (8038348 <sys_sem_new+0x8c>)
 8038324:	f8b3 20ea 	ldrh.w	r2, [r3, #234]	; 0xea
 8038328:	4b07      	ldr	r3, [pc, #28]	; (8038348 <sys_sem_new+0x8c>)
 803832a:	f8b3 30e8 	ldrh.w	r3, [r3, #232]	; 0xe8
 803832e:	429a      	cmp	r2, r3
 8038330:	d205      	bcs.n	803833e <sys_sem_new+0x82>
    lwip_stats.sys.sem.max = lwip_stats.sys.sem.used;
 8038332:	4b05      	ldr	r3, [pc, #20]	; (8038348 <sys_sem_new+0x8c>)
 8038334:	f8b3 20e8 	ldrh.w	r2, [r3, #232]	; 0xe8
 8038338:	4b03      	ldr	r3, [pc, #12]	; (8038348 <sys_sem_new+0x8c>)
 803833a:	f8a3 20ea 	strh.w	r2, [r3, #234]	; 0xea
  }
#endif /* SYS_STATS */

  return ERR_OK;
 803833e:	2300      	movs	r3, #0
}
 8038340:	4618      	mov	r0, r3
 8038342:	3710      	adds	r7, #16
 8038344:	46bd      	mov	sp, r7
 8038346:	bd80      	pop	{r7, pc}
 8038348:	2000ee04 	.word	0x2000ee04

0803834c <sys_arch_sem_wait>:

  Notice that lwIP implements a function with a similar name,
  sys_sem_wait(), that uses the sys_arch_sem_wait() function.
*/
u32_t sys_arch_sem_wait(sys_sem_t *sem, u32_t timeout)
{
 803834c:	b580      	push	{r7, lr}
 803834e:	b084      	sub	sp, #16
 8038350:	af00      	add	r7, sp, #0
 8038352:	6078      	str	r0, [r7, #4]
 8038354:	6039      	str	r1, [r7, #0]
#if (osCMSIS < 0x20000U)
  uint32_t starttime = osKernelSysTick();
 8038356:	f7ed f84d 	bl	80253f4 <osKernelSysTick>
 803835a:	60f8      	str	r0, [r7, #12]
#else
  uint32_t starttime = osKernelGetTickCount();
#endif
  if(timeout != 0)
 803835c:	683b      	ldr	r3, [r7, #0]
 803835e:	2b00      	cmp	r3, #0
 8038360:	d011      	beq.n	8038386 <sys_arch_sem_wait+0x3a>
  {
#if (osCMSIS < 0x20000U)
    if(osSemaphoreWait (*sem, timeout) == osOK)
 8038362:	687b      	ldr	r3, [r7, #4]
 8038364:	681b      	ldr	r3, [r3, #0]
 8038366:	6839      	ldr	r1, [r7, #0]
 8038368:	4618      	mov	r0, r3
 803836a:	f7ed f98f 	bl	802568c <osSemaphoreWait>
 803836e:	4603      	mov	r3, r0
 8038370:	2b00      	cmp	r3, #0
 8038372:	d105      	bne.n	8038380 <sys_arch_sem_wait+0x34>
    {
      return (osKernelSysTick() - starttime);
 8038374:	f7ed f83e 	bl	80253f4 <osKernelSysTick>
 8038378:	4602      	mov	r2, r0
 803837a:	68fb      	ldr	r3, [r7, #12]
 803837c:	1ad3      	subs	r3, r2, r3
 803837e:	e012      	b.n	80383a6 <sys_arch_sem_wait+0x5a>
        return (osKernelGetTickCount() - starttime);
#endif
    }
    else
    {
      return SYS_ARCH_TIMEOUT;
 8038380:	f04f 33ff 	mov.w	r3, #4294967295
 8038384:	e00f      	b.n	80383a6 <sys_arch_sem_wait+0x5a>
    }
  }
  else
  {
#if (osCMSIS < 0x20000U)
    while(osSemaphoreWait (*sem, osWaitForever) != osOK);
 8038386:	bf00      	nop
 8038388:	687b      	ldr	r3, [r7, #4]
 803838a:	681b      	ldr	r3, [r3, #0]
 803838c:	f04f 31ff 	mov.w	r1, #4294967295
 8038390:	4618      	mov	r0, r3
 8038392:	f7ed f97b 	bl	802568c <osSemaphoreWait>
 8038396:	4603      	mov	r3, r0
 8038398:	2b00      	cmp	r3, #0
 803839a:	d1f5      	bne.n	8038388 <sys_arch_sem_wait+0x3c>
    return (osKernelSysTick() - starttime);
 803839c:	f7ed f82a 	bl	80253f4 <osKernelSysTick>
 80383a0:	4602      	mov	r2, r0
 80383a2:	68fb      	ldr	r3, [r7, #12]
 80383a4:	1ad3      	subs	r3, r2, r3
#else
    while(osSemaphoreAcquire(*sem, osWaitForever) != osOK);
    return (osKernelGetTickCount() - starttime);
#endif
  }
}
 80383a6:	4618      	mov	r0, r3
 80383a8:	3710      	adds	r7, #16
 80383aa:	46bd      	mov	sp, r7
 80383ac:	bd80      	pop	{r7, pc}

080383ae <sys_sem_signal>:

/*-----------------------------------------------------------------------------------*/
// Signals a semaphore
void sys_sem_signal(sys_sem_t *sem)
{
 80383ae:	b580      	push	{r7, lr}
 80383b0:	b082      	sub	sp, #8
 80383b2:	af00      	add	r7, sp, #0
 80383b4:	6078      	str	r0, [r7, #4]
  osSemaphoreRelease(*sem);
 80383b6:	687b      	ldr	r3, [r7, #4]
 80383b8:	681b      	ldr	r3, [r3, #0]
 80383ba:	4618      	mov	r0, r3
 80383bc:	f7ed f9b4 	bl	8025728 <osSemaphoreRelease>
}
 80383c0:	bf00      	nop
 80383c2:	3708      	adds	r7, #8
 80383c4:	46bd      	mov	sp, r7
 80383c6:	bd80      	pop	{r7, pc}

080383c8 <sys_sem_free>:

/*-----------------------------------------------------------------------------------*/
// Deallocates a semaphore
void sys_sem_free(sys_sem_t *sem)
{
 80383c8:	b580      	push	{r7, lr}
 80383ca:	b082      	sub	sp, #8
 80383cc:	af00      	add	r7, sp, #0
 80383ce:	6078      	str	r0, [r7, #4]
#if SYS_STATS
  --lwip_stats.sys.sem.used;
 80383d0:	4b08      	ldr	r3, [pc, #32]	; (80383f4 <sys_sem_free+0x2c>)
 80383d2:	f8b3 30e8 	ldrh.w	r3, [r3, #232]	; 0xe8
 80383d6:	3b01      	subs	r3, #1
 80383d8:	b29a      	uxth	r2, r3
 80383da:	4b06      	ldr	r3, [pc, #24]	; (80383f4 <sys_sem_free+0x2c>)
 80383dc:	f8a3 20e8 	strh.w	r2, [r3, #232]	; 0xe8
#endif /* SYS_STATS */

  osSemaphoreDelete(*sem);
 80383e0:	687b      	ldr	r3, [r7, #4]
 80383e2:	681b      	ldr	r3, [r3, #0]
 80383e4:	4618      	mov	r0, r3
 80383e6:	f7ed f9d5 	bl	8025794 <osSemaphoreDelete>
}
 80383ea:	bf00      	nop
 80383ec:	3708      	adds	r7, #8
 80383ee:	46bd      	mov	sp, r7
 80383f0:	bd80      	pop	{r7, pc}
 80383f2:	bf00      	nop
 80383f4:	2000ee04 	.word	0x2000ee04

080383f8 <sys_sem_valid>:
/*-----------------------------------------------------------------------------------*/
int sys_sem_valid(sys_sem_t *sem)
{
 80383f8:	b480      	push	{r7}
 80383fa:	b083      	sub	sp, #12
 80383fc:	af00      	add	r7, sp, #0
 80383fe:	6078      	str	r0, [r7, #4]
  if (*sem == SYS_SEM_NULL)
 8038400:	687b      	ldr	r3, [r7, #4]
 8038402:	681b      	ldr	r3, [r3, #0]
 8038404:	2b00      	cmp	r3, #0
 8038406:	d101      	bne.n	803840c <sys_sem_valid+0x14>
    return 0;
 8038408:	2300      	movs	r3, #0
 803840a:	e000      	b.n	803840e <sys_sem_valid+0x16>
  else
    return 1;
 803840c:	2301      	movs	r3, #1
}
 803840e:	4618      	mov	r0, r3
 8038410:	370c      	adds	r7, #12
 8038412:	46bd      	mov	sp, r7
 8038414:	f85d 7b04 	ldr.w	r7, [sp], #4
 8038418:	4770      	bx	lr

0803841a <sys_sem_set_invalid>:

/*-----------------------------------------------------------------------------------*/
void sys_sem_set_invalid(sys_sem_t *sem)
{
 803841a:	b480      	push	{r7}
 803841c:	b083      	sub	sp, #12
 803841e:	af00      	add	r7, sp, #0
 8038420:	6078      	str	r0, [r7, #4]
  *sem = SYS_SEM_NULL;
 8038422:	687b      	ldr	r3, [r7, #4]
 8038424:	2200      	movs	r2, #0
 8038426:	601a      	str	r2, [r3, #0]
}
 8038428:	bf00      	nop
 803842a:	370c      	adds	r7, #12
 803842c:	46bd      	mov	sp, r7
 803842e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8038432:	4770      	bx	lr

08038434 <sys_init>:
#else
osMutexId_t lwip_sys_mutex;
#endif
// Initialize sys arch
void sys_init(void)
{
 8038434:	b580      	push	{r7, lr}
 8038436:	af00      	add	r7, sp, #0
#if (osCMSIS < 0x20000U)
  lwip_sys_mutex = osMutexCreate(osMutex(lwip_sys_mutex));
 8038438:	4803      	ldr	r0, [pc, #12]	; (8038448 <sys_init+0x14>)
 803843a:	f7ed f84b 	bl	80254d4 <osMutexCreate>
 803843e:	4603      	mov	r3, r0
 8038440:	4a02      	ldr	r2, [pc, #8]	; (803844c <sys_init+0x18>)
 8038442:	6013      	str	r3, [r2, #0]
#else
  lwip_sys_mutex = osMutexNew(NULL);
#endif
}
 8038444:	bf00      	nop
 8038446:	bd80      	pop	{r7, pc}
 8038448:	0803d640 	.word	0x0803d640
 803844c:	2000f05c 	.word	0x2000f05c

08038450 <sys_mutex_new>:
                                      /* Mutexes*/
/*-----------------------------------------------------------------------------------*/
/*-----------------------------------------------------------------------------------*/
#if LWIP_COMPAT_MUTEX == 0
/* Create a new mutex*/
err_t sys_mutex_new(sys_mutex_t *mutex) {
 8038450:	b580      	push	{r7, lr}
 8038452:	b084      	sub	sp, #16
 8038454:	af00      	add	r7, sp, #0
 8038456:	6078      	str	r0, [r7, #4]

#if (osCMSIS < 0x20000U)
  osMutexDef(MUTEX);
 8038458:	2300      	movs	r3, #0
 803845a:	60bb      	str	r3, [r7, #8]
 803845c:	2300      	movs	r3, #0
 803845e:	60fb      	str	r3, [r7, #12]
  *mutex = osMutexCreate(osMutex(MUTEX));
 8038460:	f107 0308 	add.w	r3, r7, #8
 8038464:	4618      	mov	r0, r3
 8038466:	f7ed f835 	bl	80254d4 <osMutexCreate>
 803846a:	4602      	mov	r2, r0
 803846c:	687b      	ldr	r3, [r7, #4]
 803846e:	601a      	str	r2, [r3, #0]
#else
  *mutex = osMutexNew(NULL);
#endif

  if(*mutex == NULL)
 8038470:	687b      	ldr	r3, [r7, #4]
 8038472:	681b      	ldr	r3, [r3, #0]
 8038474:	2b00      	cmp	r3, #0
 8038476:	d10a      	bne.n	803848e <sys_mutex_new+0x3e>
  {
#if SYS_STATS
    ++lwip_stats.sys.mutex.err;
 8038478:	4b12      	ldr	r3, [pc, #72]	; (80384c4 <sys_mutex_new+0x74>)
 803847a:	f8b3 30f2 	ldrh.w	r3, [r3, #242]	; 0xf2
 803847e:	3301      	adds	r3, #1
 8038480:	b29a      	uxth	r2, r3
 8038482:	4b10      	ldr	r3, [pc, #64]	; (80384c4 <sys_mutex_new+0x74>)
 8038484:	f8a3 20f2 	strh.w	r2, [r3, #242]	; 0xf2
#endif /* SYS_STATS */
    return ERR_MEM;
 8038488:	f04f 33ff 	mov.w	r3, #4294967295
 803848c:	e016      	b.n	80384bc <sys_mutex_new+0x6c>
  }

#if SYS_STATS
  ++lwip_stats.sys.mutex.used;
 803848e:	4b0d      	ldr	r3, [pc, #52]	; (80384c4 <sys_mutex_new+0x74>)
 8038490:	f8b3 30ee 	ldrh.w	r3, [r3, #238]	; 0xee
 8038494:	3301      	adds	r3, #1
 8038496:	b29a      	uxth	r2, r3
 8038498:	4b0a      	ldr	r3, [pc, #40]	; (80384c4 <sys_mutex_new+0x74>)
 803849a:	f8a3 20ee 	strh.w	r2, [r3, #238]	; 0xee
  if (lwip_stats.sys.mutex.max < lwip_stats.sys.mutex.used) {
 803849e:	4b09      	ldr	r3, [pc, #36]	; (80384c4 <sys_mutex_new+0x74>)
 80384a0:	f8b3 20f0 	ldrh.w	r2, [r3, #240]	; 0xf0
 80384a4:	4b07      	ldr	r3, [pc, #28]	; (80384c4 <sys_mutex_new+0x74>)
 80384a6:	f8b3 30ee 	ldrh.w	r3, [r3, #238]	; 0xee
 80384aa:	429a      	cmp	r2, r3
 80384ac:	d205      	bcs.n	80384ba <sys_mutex_new+0x6a>
    lwip_stats.sys.mutex.max = lwip_stats.sys.mutex.used;
 80384ae:	4b05      	ldr	r3, [pc, #20]	; (80384c4 <sys_mutex_new+0x74>)
 80384b0:	f8b3 20ee 	ldrh.w	r2, [r3, #238]	; 0xee
 80384b4:	4b03      	ldr	r3, [pc, #12]	; (80384c4 <sys_mutex_new+0x74>)
 80384b6:	f8a3 20f0 	strh.w	r2, [r3, #240]	; 0xf0
  }
#endif /* SYS_STATS */
  return ERR_OK;
 80384ba:	2300      	movs	r3, #0
}
 80384bc:	4618      	mov	r0, r3
 80384be:	3710      	adds	r7, #16
 80384c0:	46bd      	mov	sp, r7
 80384c2:	bd80      	pop	{r7, pc}
 80384c4:	2000ee04 	.word	0x2000ee04

080384c8 <sys_mutex_lock>:
  osMutexDelete(*mutex);
}
/*-----------------------------------------------------------------------------------*/
/* Lock a mutex*/
void sys_mutex_lock(sys_mutex_t *mutex)
{
 80384c8:	b580      	push	{r7, lr}
 80384ca:	b082      	sub	sp, #8
 80384cc:	af00      	add	r7, sp, #0
 80384ce:	6078      	str	r0, [r7, #4]
#if (osCMSIS < 0x20000U)
  osMutexWait(*mutex, osWaitForever);
 80384d0:	687b      	ldr	r3, [r7, #4]
 80384d2:	681b      	ldr	r3, [r3, #0]
 80384d4:	f04f 31ff 	mov.w	r1, #4294967295
 80384d8:	4618      	mov	r0, r3
 80384da:	f7ed f813 	bl	8025504 <osMutexWait>
#else
  osMutexAcquire(*mutex, osWaitForever);
#endif
}
 80384de:	bf00      	nop
 80384e0:	3708      	adds	r7, #8
 80384e2:	46bd      	mov	sp, r7
 80384e4:	bd80      	pop	{r7, pc}

080384e6 <sys_mutex_unlock>:

/*-----------------------------------------------------------------------------------*/
/* Unlock a mutex*/
void sys_mutex_unlock(sys_mutex_t *mutex)
{
 80384e6:	b580      	push	{r7, lr}
 80384e8:	b082      	sub	sp, #8
 80384ea:	af00      	add	r7, sp, #0
 80384ec:	6078      	str	r0, [r7, #4]
  osMutexRelease(*mutex);
 80384ee:	687b      	ldr	r3, [r7, #4]
 80384f0:	681b      	ldr	r3, [r3, #0]
 80384f2:	4618      	mov	r0, r3
 80384f4:	f7ed f854 	bl	80255a0 <osMutexRelease>
}
 80384f8:	bf00      	nop
 80384fa:	3708      	adds	r7, #8
 80384fc:	46bd      	mov	sp, r7
 80384fe:	bd80      	pop	{r7, pc}

08038500 <sys_thread_new>:
  function "thread()". The "arg" argument will be passed as an argument to the
  thread() function. The id of the new thread is returned. Both the id and
  the priority are system dependent.
*/
sys_thread_t sys_thread_new(const char *name, lwip_thread_fn thread , void *arg, int stacksize, int prio)
{
 8038500:	b580      	push	{r7, lr}
 8038502:	b08c      	sub	sp, #48	; 0x30
 8038504:	af00      	add	r7, sp, #0
 8038506:	60f8      	str	r0, [r7, #12]
 8038508:	60b9      	str	r1, [r7, #8]
 803850a:	607a      	str	r2, [r7, #4]
 803850c:	603b      	str	r3, [r7, #0]
#if (osCMSIS < 0x20000U)
  const osThreadDef_t os_thread_def = { (char *)name, (os_pthread)thread, (osPriority)prio, 0, stacksize};
 803850e:	f107 0314 	add.w	r3, r7, #20
 8038512:	2200      	movs	r2, #0
 8038514:	601a      	str	r2, [r3, #0]
 8038516:	605a      	str	r2, [r3, #4]
 8038518:	609a      	str	r2, [r3, #8]
 803851a:	60da      	str	r2, [r3, #12]
 803851c:	611a      	str	r2, [r3, #16]
 803851e:	615a      	str	r2, [r3, #20]
 8038520:	619a      	str	r2, [r3, #24]
 8038522:	68fb      	ldr	r3, [r7, #12]
 8038524:	617b      	str	r3, [r7, #20]
 8038526:	68bb      	ldr	r3, [r7, #8]
 8038528:	61bb      	str	r3, [r7, #24]
 803852a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 803852c:	b21b      	sxth	r3, r3
 803852e:	83bb      	strh	r3, [r7, #28]
 8038530:	683b      	ldr	r3, [r7, #0]
 8038532:	627b      	str	r3, [r7, #36]	; 0x24
  return osThreadCreate(&os_thread_def, arg);
 8038534:	f107 0314 	add.w	r3, r7, #20
 8038538:	6879      	ldr	r1, [r7, #4]
 803853a:	4618      	mov	r0, r3
 803853c:	f7ec ff6a 	bl	8025414 <osThreadCreate>
 8038540:	4603      	mov	r3, r0
                        .stack_size = stacksize,
                        .priority = (osPriority_t)prio,
                      };
  return osThreadNew(thread, arg, &attributes);
#endif
}
 8038542:	4618      	mov	r0, r3
 8038544:	3730      	adds	r7, #48	; 0x30
 8038546:	46bd      	mov	sp, r7
 8038548:	bd80      	pop	{r7, pc}
	...

0803854c <sys_arch_protect>:

  Note: This function is based on FreeRTOS API, because no equivalent CMSIS-RTOS
        API is available
*/
sys_prot_t sys_arch_protect(void)
{
 803854c:	b580      	push	{r7, lr}
 803854e:	af00      	add	r7, sp, #0
#if (osCMSIS < 0x20000U)
  osMutexWait(lwip_sys_mutex, osWaitForever);
 8038550:	4b04      	ldr	r3, [pc, #16]	; (8038564 <sys_arch_protect+0x18>)
 8038552:	681b      	ldr	r3, [r3, #0]
 8038554:	f04f 31ff 	mov.w	r1, #4294967295
 8038558:	4618      	mov	r0, r3
 803855a:	f7ec ffd3 	bl	8025504 <osMutexWait>
#else
  osMutexAcquire(lwip_sys_mutex, osWaitForever);
#endif
  return (sys_prot_t)1;
 803855e:	2301      	movs	r3, #1
}
 8038560:	4618      	mov	r0, r3
 8038562:	bd80      	pop	{r7, pc}
 8038564:	2000f05c 	.word	0x2000f05c

08038568 <sys_arch_unprotect>:

  Note: This function is based on FreeRTOS API, because no equivalent CMSIS-RTOS
        API is available
*/
void sys_arch_unprotect(sys_prot_t pval)
{
 8038568:	b580      	push	{r7, lr}
 803856a:	b082      	sub	sp, #8
 803856c:	af00      	add	r7, sp, #0
 803856e:	6078      	str	r0, [r7, #4]
  ( void ) pval;
  osMutexRelease(lwip_sys_mutex);
 8038570:	4b04      	ldr	r3, [pc, #16]	; (8038584 <sys_arch_unprotect+0x1c>)
 8038572:	681b      	ldr	r3, [r3, #0]
 8038574:	4618      	mov	r0, r3
 8038576:	f7ed f813 	bl	80255a0 <osMutexRelease>
}
 803857a:	bf00      	nop
 803857c:	3708      	adds	r7, #8
 803857e:	46bd      	mov	sp, r7
 8038580:	bd80      	pop	{r7, pc}
 8038582:	bf00      	nop
 8038584:	2000f05c 	.word	0x2000f05c

08038588 <__assert_func>:
 8038588:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 803858a:	4614      	mov	r4, r2
 803858c:	461a      	mov	r2, r3
 803858e:	4b09      	ldr	r3, [pc, #36]	; (80385b4 <__assert_func+0x2c>)
 8038590:	681b      	ldr	r3, [r3, #0]
 8038592:	4605      	mov	r5, r0
 8038594:	68d8      	ldr	r0, [r3, #12]
 8038596:	b14c      	cbz	r4, 80385ac <__assert_func+0x24>
 8038598:	4b07      	ldr	r3, [pc, #28]	; (80385b8 <__assert_func+0x30>)
 803859a:	9100      	str	r1, [sp, #0]
 803859c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80385a0:	4906      	ldr	r1, [pc, #24]	; (80385bc <__assert_func+0x34>)
 80385a2:	462b      	mov	r3, r5
 80385a4:	f000 f8ec 	bl	8038780 <fiprintf>
 80385a8:	f000 ffc2 	bl	8039530 <abort>
 80385ac:	4b04      	ldr	r3, [pc, #16]	; (80385c0 <__assert_func+0x38>)
 80385ae:	461c      	mov	r4, r3
 80385b0:	e7f3      	b.n	803859a <__assert_func+0x12>
 80385b2:	bf00      	nop
 80385b4:	20000034 	.word	0x20000034
 80385b8:	0803d648 	.word	0x0803d648
 80385bc:	0803d655 	.word	0x0803d655
 80385c0:	0803d683 	.word	0x0803d683

080385c4 <calloc>:
 80385c4:	4b02      	ldr	r3, [pc, #8]	; (80385d0 <calloc+0xc>)
 80385c6:	460a      	mov	r2, r1
 80385c8:	4601      	mov	r1, r0
 80385ca:	6818      	ldr	r0, [r3, #0]
 80385cc:	f000 b968 	b.w	80388a0 <_calloc_r>
 80385d0:	20000034 	.word	0x20000034

080385d4 <std>:
 80385d4:	2300      	movs	r3, #0
 80385d6:	b510      	push	{r4, lr}
 80385d8:	4604      	mov	r4, r0
 80385da:	e9c0 3300 	strd	r3, r3, [r0]
 80385de:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80385e2:	6083      	str	r3, [r0, #8]
 80385e4:	8181      	strh	r1, [r0, #12]
 80385e6:	6643      	str	r3, [r0, #100]	; 0x64
 80385e8:	81c2      	strh	r2, [r0, #14]
 80385ea:	6183      	str	r3, [r0, #24]
 80385ec:	4619      	mov	r1, r3
 80385ee:	2208      	movs	r2, #8
 80385f0:	305c      	adds	r0, #92	; 0x5c
 80385f2:	f000 f94d 	bl	8038890 <memset>
 80385f6:	4b05      	ldr	r3, [pc, #20]	; (803860c <std+0x38>)
 80385f8:	6263      	str	r3, [r4, #36]	; 0x24
 80385fa:	4b05      	ldr	r3, [pc, #20]	; (8038610 <std+0x3c>)
 80385fc:	62a3      	str	r3, [r4, #40]	; 0x28
 80385fe:	4b05      	ldr	r3, [pc, #20]	; (8038614 <std+0x40>)
 8038600:	62e3      	str	r3, [r4, #44]	; 0x2c
 8038602:	4b05      	ldr	r3, [pc, #20]	; (8038618 <std+0x44>)
 8038604:	6224      	str	r4, [r4, #32]
 8038606:	6323      	str	r3, [r4, #48]	; 0x30
 8038608:	bd10      	pop	{r4, pc}
 803860a:	bf00      	nop
 803860c:	080392f5 	.word	0x080392f5
 8038610:	08039317 	.word	0x08039317
 8038614:	0803934f 	.word	0x0803934f
 8038618:	08039373 	.word	0x08039373

0803861c <_cleanup_r>:
 803861c:	4901      	ldr	r1, [pc, #4]	; (8038624 <_cleanup_r+0x8>)
 803861e:	f000 b8c1 	b.w	80387a4 <_fwalk_reent>
 8038622:	bf00      	nop
 8038624:	0803966d 	.word	0x0803966d

08038628 <__sfmoreglue>:
 8038628:	b570      	push	{r4, r5, r6, lr}
 803862a:	2268      	movs	r2, #104	; 0x68
 803862c:	1e4d      	subs	r5, r1, #1
 803862e:	4355      	muls	r5, r2
 8038630:	460e      	mov	r6, r1
 8038632:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8038636:	f000 f9b5 	bl	80389a4 <_malloc_r>
 803863a:	4604      	mov	r4, r0
 803863c:	b140      	cbz	r0, 8038650 <__sfmoreglue+0x28>
 803863e:	2100      	movs	r1, #0
 8038640:	e9c0 1600 	strd	r1, r6, [r0]
 8038644:	300c      	adds	r0, #12
 8038646:	60a0      	str	r0, [r4, #8]
 8038648:	f105 0268 	add.w	r2, r5, #104	; 0x68
 803864c:	f000 f920 	bl	8038890 <memset>
 8038650:	4620      	mov	r0, r4
 8038652:	bd70      	pop	{r4, r5, r6, pc}

08038654 <__sfp_lock_acquire>:
 8038654:	4801      	ldr	r0, [pc, #4]	; (803865c <__sfp_lock_acquire+0x8>)
 8038656:	f000 b8ea 	b.w	803882e <__retarget_lock_acquire_recursive>
 803865a:	bf00      	nop
 803865c:	2000f061 	.word	0x2000f061

08038660 <__sfp_lock_release>:
 8038660:	4801      	ldr	r0, [pc, #4]	; (8038668 <__sfp_lock_release+0x8>)
 8038662:	f000 b8e5 	b.w	8038830 <__retarget_lock_release_recursive>
 8038666:	bf00      	nop
 8038668:	2000f061 	.word	0x2000f061

0803866c <__sinit_lock_acquire>:
 803866c:	4801      	ldr	r0, [pc, #4]	; (8038674 <__sinit_lock_acquire+0x8>)
 803866e:	f000 b8de 	b.w	803882e <__retarget_lock_acquire_recursive>
 8038672:	bf00      	nop
 8038674:	2000f062 	.word	0x2000f062

08038678 <__sinit_lock_release>:
 8038678:	4801      	ldr	r0, [pc, #4]	; (8038680 <__sinit_lock_release+0x8>)
 803867a:	f000 b8d9 	b.w	8038830 <__retarget_lock_release_recursive>
 803867e:	bf00      	nop
 8038680:	2000f062 	.word	0x2000f062

08038684 <__sinit>:
 8038684:	b510      	push	{r4, lr}
 8038686:	4604      	mov	r4, r0
 8038688:	f7ff fff0 	bl	803866c <__sinit_lock_acquire>
 803868c:	69a3      	ldr	r3, [r4, #24]
 803868e:	b11b      	cbz	r3, 8038698 <__sinit+0x14>
 8038690:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8038694:	f7ff bff0 	b.w	8038678 <__sinit_lock_release>
 8038698:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 803869c:	6523      	str	r3, [r4, #80]	; 0x50
 803869e:	4b13      	ldr	r3, [pc, #76]	; (80386ec <__sinit+0x68>)
 80386a0:	4a13      	ldr	r2, [pc, #76]	; (80386f0 <__sinit+0x6c>)
 80386a2:	681b      	ldr	r3, [r3, #0]
 80386a4:	62a2      	str	r2, [r4, #40]	; 0x28
 80386a6:	42a3      	cmp	r3, r4
 80386a8:	bf04      	itt	eq
 80386aa:	2301      	moveq	r3, #1
 80386ac:	61a3      	streq	r3, [r4, #24]
 80386ae:	4620      	mov	r0, r4
 80386b0:	f000 f820 	bl	80386f4 <__sfp>
 80386b4:	6060      	str	r0, [r4, #4]
 80386b6:	4620      	mov	r0, r4
 80386b8:	f000 f81c 	bl	80386f4 <__sfp>
 80386bc:	60a0      	str	r0, [r4, #8]
 80386be:	4620      	mov	r0, r4
 80386c0:	f000 f818 	bl	80386f4 <__sfp>
 80386c4:	2200      	movs	r2, #0
 80386c6:	60e0      	str	r0, [r4, #12]
 80386c8:	2104      	movs	r1, #4
 80386ca:	6860      	ldr	r0, [r4, #4]
 80386cc:	f7ff ff82 	bl	80385d4 <std>
 80386d0:	68a0      	ldr	r0, [r4, #8]
 80386d2:	2201      	movs	r2, #1
 80386d4:	2109      	movs	r1, #9
 80386d6:	f7ff ff7d 	bl	80385d4 <std>
 80386da:	68e0      	ldr	r0, [r4, #12]
 80386dc:	2202      	movs	r2, #2
 80386de:	2112      	movs	r1, #18
 80386e0:	f7ff ff78 	bl	80385d4 <std>
 80386e4:	2301      	movs	r3, #1
 80386e6:	61a3      	str	r3, [r4, #24]
 80386e8:	e7d2      	b.n	8038690 <__sinit+0xc>
 80386ea:	bf00      	nop
 80386ec:	0803d6e4 	.word	0x0803d6e4
 80386f0:	0803861d 	.word	0x0803861d

080386f4 <__sfp>:
 80386f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80386f6:	4607      	mov	r7, r0
 80386f8:	f7ff ffac 	bl	8038654 <__sfp_lock_acquire>
 80386fc:	4b1e      	ldr	r3, [pc, #120]	; (8038778 <__sfp+0x84>)
 80386fe:	681e      	ldr	r6, [r3, #0]
 8038700:	69b3      	ldr	r3, [r6, #24]
 8038702:	b913      	cbnz	r3, 803870a <__sfp+0x16>
 8038704:	4630      	mov	r0, r6
 8038706:	f7ff ffbd 	bl	8038684 <__sinit>
 803870a:	3648      	adds	r6, #72	; 0x48
 803870c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8038710:	3b01      	subs	r3, #1
 8038712:	d503      	bpl.n	803871c <__sfp+0x28>
 8038714:	6833      	ldr	r3, [r6, #0]
 8038716:	b30b      	cbz	r3, 803875c <__sfp+0x68>
 8038718:	6836      	ldr	r6, [r6, #0]
 803871a:	e7f7      	b.n	803870c <__sfp+0x18>
 803871c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8038720:	b9d5      	cbnz	r5, 8038758 <__sfp+0x64>
 8038722:	4b16      	ldr	r3, [pc, #88]	; (803877c <__sfp+0x88>)
 8038724:	60e3      	str	r3, [r4, #12]
 8038726:	f104 0058 	add.w	r0, r4, #88	; 0x58
 803872a:	6665      	str	r5, [r4, #100]	; 0x64
 803872c:	f000 f87e 	bl	803882c <__retarget_lock_init_recursive>
 8038730:	f7ff ff96 	bl	8038660 <__sfp_lock_release>
 8038734:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8038738:	e9c4 5504 	strd	r5, r5, [r4, #16]
 803873c:	6025      	str	r5, [r4, #0]
 803873e:	61a5      	str	r5, [r4, #24]
 8038740:	2208      	movs	r2, #8
 8038742:	4629      	mov	r1, r5
 8038744:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8038748:	f000 f8a2 	bl	8038890 <memset>
 803874c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8038750:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8038754:	4620      	mov	r0, r4
 8038756:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8038758:	3468      	adds	r4, #104	; 0x68
 803875a:	e7d9      	b.n	8038710 <__sfp+0x1c>
 803875c:	2104      	movs	r1, #4
 803875e:	4638      	mov	r0, r7
 8038760:	f7ff ff62 	bl	8038628 <__sfmoreglue>
 8038764:	4604      	mov	r4, r0
 8038766:	6030      	str	r0, [r6, #0]
 8038768:	2800      	cmp	r0, #0
 803876a:	d1d5      	bne.n	8038718 <__sfp+0x24>
 803876c:	f7ff ff78 	bl	8038660 <__sfp_lock_release>
 8038770:	230c      	movs	r3, #12
 8038772:	603b      	str	r3, [r7, #0]
 8038774:	e7ee      	b.n	8038754 <__sfp+0x60>
 8038776:	bf00      	nop
 8038778:	0803d6e4 	.word	0x0803d6e4
 803877c:	ffff0001 	.word	0xffff0001

08038780 <fiprintf>:
 8038780:	b40e      	push	{r1, r2, r3}
 8038782:	b503      	push	{r0, r1, lr}
 8038784:	4601      	mov	r1, r0
 8038786:	ab03      	add	r3, sp, #12
 8038788:	4805      	ldr	r0, [pc, #20]	; (80387a0 <fiprintf+0x20>)
 803878a:	f853 2b04 	ldr.w	r2, [r3], #4
 803878e:	6800      	ldr	r0, [r0, #0]
 8038790:	9301      	str	r3, [sp, #4]
 8038792:	f000 f9a5 	bl	8038ae0 <_vfiprintf_r>
 8038796:	b002      	add	sp, #8
 8038798:	f85d eb04 	ldr.w	lr, [sp], #4
 803879c:	b003      	add	sp, #12
 803879e:	4770      	bx	lr
 80387a0:	20000034 	.word	0x20000034

080387a4 <_fwalk_reent>:
 80387a4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80387a8:	4606      	mov	r6, r0
 80387aa:	4688      	mov	r8, r1
 80387ac:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80387b0:	2700      	movs	r7, #0
 80387b2:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80387b6:	f1b9 0901 	subs.w	r9, r9, #1
 80387ba:	d505      	bpl.n	80387c8 <_fwalk_reent+0x24>
 80387bc:	6824      	ldr	r4, [r4, #0]
 80387be:	2c00      	cmp	r4, #0
 80387c0:	d1f7      	bne.n	80387b2 <_fwalk_reent+0xe>
 80387c2:	4638      	mov	r0, r7
 80387c4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80387c8:	89ab      	ldrh	r3, [r5, #12]
 80387ca:	2b01      	cmp	r3, #1
 80387cc:	d907      	bls.n	80387de <_fwalk_reent+0x3a>
 80387ce:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80387d2:	3301      	adds	r3, #1
 80387d4:	d003      	beq.n	80387de <_fwalk_reent+0x3a>
 80387d6:	4629      	mov	r1, r5
 80387d8:	4630      	mov	r0, r6
 80387da:	47c0      	blx	r8
 80387dc:	4307      	orrs	r7, r0
 80387de:	3568      	adds	r5, #104	; 0x68
 80387e0:	e7e9      	b.n	80387b6 <_fwalk_reent+0x12>
	...

080387e4 <__libc_init_array>:
 80387e4:	b570      	push	{r4, r5, r6, lr}
 80387e6:	4d0d      	ldr	r5, [pc, #52]	; (803881c <__libc_init_array+0x38>)
 80387e8:	4c0d      	ldr	r4, [pc, #52]	; (8038820 <__libc_init_array+0x3c>)
 80387ea:	1b64      	subs	r4, r4, r5
 80387ec:	10a4      	asrs	r4, r4, #2
 80387ee:	2600      	movs	r6, #0
 80387f0:	42a6      	cmp	r6, r4
 80387f2:	d109      	bne.n	8038808 <__libc_init_array+0x24>
 80387f4:	4d0b      	ldr	r5, [pc, #44]	; (8038824 <__libc_init_array+0x40>)
 80387f6:	4c0c      	ldr	r4, [pc, #48]	; (8038828 <__libc_init_array+0x44>)
 80387f8:	f001 f870 	bl	80398dc <_init>
 80387fc:	1b64      	subs	r4, r4, r5
 80387fe:	10a4      	asrs	r4, r4, #2
 8038800:	2600      	movs	r6, #0
 8038802:	42a6      	cmp	r6, r4
 8038804:	d105      	bne.n	8038812 <__libc_init_array+0x2e>
 8038806:	bd70      	pop	{r4, r5, r6, pc}
 8038808:	f855 3b04 	ldr.w	r3, [r5], #4
 803880c:	4798      	blx	r3
 803880e:	3601      	adds	r6, #1
 8038810:	e7ee      	b.n	80387f0 <__libc_init_array+0xc>
 8038812:	f855 3b04 	ldr.w	r3, [r5], #4
 8038816:	4798      	blx	r3
 8038818:	3601      	adds	r6, #1
 803881a:	e7f2      	b.n	8038802 <__libc_init_array+0x1e>
 803881c:	0803d798 	.word	0x0803d798
 8038820:	0803d798 	.word	0x0803d798
 8038824:	0803d798 	.word	0x0803d798
 8038828:	0803d79c 	.word	0x0803d79c

0803882c <__retarget_lock_init_recursive>:
 803882c:	4770      	bx	lr

0803882e <__retarget_lock_acquire_recursive>:
 803882e:	4770      	bx	lr

08038830 <__retarget_lock_release_recursive>:
 8038830:	4770      	bx	lr
	...

08038834 <malloc>:
 8038834:	4b02      	ldr	r3, [pc, #8]	; (8038840 <malloc+0xc>)
 8038836:	4601      	mov	r1, r0
 8038838:	6818      	ldr	r0, [r3, #0]
 803883a:	f000 b8b3 	b.w	80389a4 <_malloc_r>
 803883e:	bf00      	nop
 8038840:	20000034 	.word	0x20000034

08038844 <free>:
 8038844:	4b02      	ldr	r3, [pc, #8]	; (8038850 <free+0xc>)
 8038846:	4601      	mov	r1, r0
 8038848:	6818      	ldr	r0, [r3, #0]
 803884a:	f000 b83f 	b.w	80388cc <_free_r>
 803884e:	bf00      	nop
 8038850:	20000034 	.word	0x20000034

08038854 <memcmp>:
 8038854:	b510      	push	{r4, lr}
 8038856:	3901      	subs	r1, #1
 8038858:	4402      	add	r2, r0
 803885a:	4290      	cmp	r0, r2
 803885c:	d101      	bne.n	8038862 <memcmp+0xe>
 803885e:	2000      	movs	r0, #0
 8038860:	e005      	b.n	803886e <memcmp+0x1a>
 8038862:	7803      	ldrb	r3, [r0, #0]
 8038864:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8038868:	42a3      	cmp	r3, r4
 803886a:	d001      	beq.n	8038870 <memcmp+0x1c>
 803886c:	1b18      	subs	r0, r3, r4
 803886e:	bd10      	pop	{r4, pc}
 8038870:	3001      	adds	r0, #1
 8038872:	e7f2      	b.n	803885a <memcmp+0x6>

08038874 <memcpy>:
 8038874:	440a      	add	r2, r1
 8038876:	4291      	cmp	r1, r2
 8038878:	f100 33ff 	add.w	r3, r0, #4294967295
 803887c:	d100      	bne.n	8038880 <memcpy+0xc>
 803887e:	4770      	bx	lr
 8038880:	b510      	push	{r4, lr}
 8038882:	f811 4b01 	ldrb.w	r4, [r1], #1
 8038886:	f803 4f01 	strb.w	r4, [r3, #1]!
 803888a:	4291      	cmp	r1, r2
 803888c:	d1f9      	bne.n	8038882 <memcpy+0xe>
 803888e:	bd10      	pop	{r4, pc}

08038890 <memset>:
 8038890:	4402      	add	r2, r0
 8038892:	4603      	mov	r3, r0
 8038894:	4293      	cmp	r3, r2
 8038896:	d100      	bne.n	803889a <memset+0xa>
 8038898:	4770      	bx	lr
 803889a:	f803 1b01 	strb.w	r1, [r3], #1
 803889e:	e7f9      	b.n	8038894 <memset+0x4>

080388a0 <_calloc_r>:
 80388a0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80388a2:	fba1 2402 	umull	r2, r4, r1, r2
 80388a6:	b94c      	cbnz	r4, 80388bc <_calloc_r+0x1c>
 80388a8:	4611      	mov	r1, r2
 80388aa:	9201      	str	r2, [sp, #4]
 80388ac:	f000 f87a 	bl	80389a4 <_malloc_r>
 80388b0:	9a01      	ldr	r2, [sp, #4]
 80388b2:	4605      	mov	r5, r0
 80388b4:	b930      	cbnz	r0, 80388c4 <_calloc_r+0x24>
 80388b6:	4628      	mov	r0, r5
 80388b8:	b003      	add	sp, #12
 80388ba:	bd30      	pop	{r4, r5, pc}
 80388bc:	220c      	movs	r2, #12
 80388be:	6002      	str	r2, [r0, #0]
 80388c0:	2500      	movs	r5, #0
 80388c2:	e7f8      	b.n	80388b6 <_calloc_r+0x16>
 80388c4:	4621      	mov	r1, r4
 80388c6:	f7ff ffe3 	bl	8038890 <memset>
 80388ca:	e7f4      	b.n	80388b6 <_calloc_r+0x16>

080388cc <_free_r>:
 80388cc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80388ce:	2900      	cmp	r1, #0
 80388d0:	d044      	beq.n	803895c <_free_r+0x90>
 80388d2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80388d6:	9001      	str	r0, [sp, #4]
 80388d8:	2b00      	cmp	r3, #0
 80388da:	f1a1 0404 	sub.w	r4, r1, #4
 80388de:	bfb8      	it	lt
 80388e0:	18e4      	addlt	r4, r4, r3
 80388e2:	f000 ff77 	bl	80397d4 <__malloc_lock>
 80388e6:	4a1e      	ldr	r2, [pc, #120]	; (8038960 <_free_r+0x94>)
 80388e8:	9801      	ldr	r0, [sp, #4]
 80388ea:	6813      	ldr	r3, [r2, #0]
 80388ec:	b933      	cbnz	r3, 80388fc <_free_r+0x30>
 80388ee:	6063      	str	r3, [r4, #4]
 80388f0:	6014      	str	r4, [r2, #0]
 80388f2:	b003      	add	sp, #12
 80388f4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80388f8:	f000 bf72 	b.w	80397e0 <__malloc_unlock>
 80388fc:	42a3      	cmp	r3, r4
 80388fe:	d908      	bls.n	8038912 <_free_r+0x46>
 8038900:	6825      	ldr	r5, [r4, #0]
 8038902:	1961      	adds	r1, r4, r5
 8038904:	428b      	cmp	r3, r1
 8038906:	bf01      	itttt	eq
 8038908:	6819      	ldreq	r1, [r3, #0]
 803890a:	685b      	ldreq	r3, [r3, #4]
 803890c:	1949      	addeq	r1, r1, r5
 803890e:	6021      	streq	r1, [r4, #0]
 8038910:	e7ed      	b.n	80388ee <_free_r+0x22>
 8038912:	461a      	mov	r2, r3
 8038914:	685b      	ldr	r3, [r3, #4]
 8038916:	b10b      	cbz	r3, 803891c <_free_r+0x50>
 8038918:	42a3      	cmp	r3, r4
 803891a:	d9fa      	bls.n	8038912 <_free_r+0x46>
 803891c:	6811      	ldr	r1, [r2, #0]
 803891e:	1855      	adds	r5, r2, r1
 8038920:	42a5      	cmp	r5, r4
 8038922:	d10b      	bne.n	803893c <_free_r+0x70>
 8038924:	6824      	ldr	r4, [r4, #0]
 8038926:	4421      	add	r1, r4
 8038928:	1854      	adds	r4, r2, r1
 803892a:	42a3      	cmp	r3, r4
 803892c:	6011      	str	r1, [r2, #0]
 803892e:	d1e0      	bne.n	80388f2 <_free_r+0x26>
 8038930:	681c      	ldr	r4, [r3, #0]
 8038932:	685b      	ldr	r3, [r3, #4]
 8038934:	6053      	str	r3, [r2, #4]
 8038936:	4421      	add	r1, r4
 8038938:	6011      	str	r1, [r2, #0]
 803893a:	e7da      	b.n	80388f2 <_free_r+0x26>
 803893c:	d902      	bls.n	8038944 <_free_r+0x78>
 803893e:	230c      	movs	r3, #12
 8038940:	6003      	str	r3, [r0, #0]
 8038942:	e7d6      	b.n	80388f2 <_free_r+0x26>
 8038944:	6825      	ldr	r5, [r4, #0]
 8038946:	1961      	adds	r1, r4, r5
 8038948:	428b      	cmp	r3, r1
 803894a:	bf04      	itt	eq
 803894c:	6819      	ldreq	r1, [r3, #0]
 803894e:	685b      	ldreq	r3, [r3, #4]
 8038950:	6063      	str	r3, [r4, #4]
 8038952:	bf04      	itt	eq
 8038954:	1949      	addeq	r1, r1, r5
 8038956:	6021      	streq	r1, [r4, #0]
 8038958:	6054      	str	r4, [r2, #4]
 803895a:	e7ca      	b.n	80388f2 <_free_r+0x26>
 803895c:	b003      	add	sp, #12
 803895e:	bd30      	pop	{r4, r5, pc}
 8038960:	2000f064 	.word	0x2000f064

08038964 <sbrk_aligned>:
 8038964:	b570      	push	{r4, r5, r6, lr}
 8038966:	4e0e      	ldr	r6, [pc, #56]	; (80389a0 <sbrk_aligned+0x3c>)
 8038968:	460c      	mov	r4, r1
 803896a:	6831      	ldr	r1, [r6, #0]
 803896c:	4605      	mov	r5, r0
 803896e:	b911      	cbnz	r1, 8038976 <sbrk_aligned+0x12>
 8038970:	f000 fcb0 	bl	80392d4 <_sbrk_r>
 8038974:	6030      	str	r0, [r6, #0]
 8038976:	4621      	mov	r1, r4
 8038978:	4628      	mov	r0, r5
 803897a:	f000 fcab 	bl	80392d4 <_sbrk_r>
 803897e:	1c43      	adds	r3, r0, #1
 8038980:	d00a      	beq.n	8038998 <sbrk_aligned+0x34>
 8038982:	1cc4      	adds	r4, r0, #3
 8038984:	f024 0403 	bic.w	r4, r4, #3
 8038988:	42a0      	cmp	r0, r4
 803898a:	d007      	beq.n	803899c <sbrk_aligned+0x38>
 803898c:	1a21      	subs	r1, r4, r0
 803898e:	4628      	mov	r0, r5
 8038990:	f000 fca0 	bl	80392d4 <_sbrk_r>
 8038994:	3001      	adds	r0, #1
 8038996:	d101      	bne.n	803899c <sbrk_aligned+0x38>
 8038998:	f04f 34ff 	mov.w	r4, #4294967295
 803899c:	4620      	mov	r0, r4
 803899e:	bd70      	pop	{r4, r5, r6, pc}
 80389a0:	2000f068 	.word	0x2000f068

080389a4 <_malloc_r>:
 80389a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80389a8:	1ccd      	adds	r5, r1, #3
 80389aa:	f025 0503 	bic.w	r5, r5, #3
 80389ae:	3508      	adds	r5, #8
 80389b0:	2d0c      	cmp	r5, #12
 80389b2:	bf38      	it	cc
 80389b4:	250c      	movcc	r5, #12
 80389b6:	2d00      	cmp	r5, #0
 80389b8:	4607      	mov	r7, r0
 80389ba:	db01      	blt.n	80389c0 <_malloc_r+0x1c>
 80389bc:	42a9      	cmp	r1, r5
 80389be:	d905      	bls.n	80389cc <_malloc_r+0x28>
 80389c0:	230c      	movs	r3, #12
 80389c2:	603b      	str	r3, [r7, #0]
 80389c4:	2600      	movs	r6, #0
 80389c6:	4630      	mov	r0, r6
 80389c8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80389cc:	4e2e      	ldr	r6, [pc, #184]	; (8038a88 <_malloc_r+0xe4>)
 80389ce:	f000 ff01 	bl	80397d4 <__malloc_lock>
 80389d2:	6833      	ldr	r3, [r6, #0]
 80389d4:	461c      	mov	r4, r3
 80389d6:	bb34      	cbnz	r4, 8038a26 <_malloc_r+0x82>
 80389d8:	4629      	mov	r1, r5
 80389da:	4638      	mov	r0, r7
 80389dc:	f7ff ffc2 	bl	8038964 <sbrk_aligned>
 80389e0:	1c43      	adds	r3, r0, #1
 80389e2:	4604      	mov	r4, r0
 80389e4:	d14d      	bne.n	8038a82 <_malloc_r+0xde>
 80389e6:	6834      	ldr	r4, [r6, #0]
 80389e8:	4626      	mov	r6, r4
 80389ea:	2e00      	cmp	r6, #0
 80389ec:	d140      	bne.n	8038a70 <_malloc_r+0xcc>
 80389ee:	6823      	ldr	r3, [r4, #0]
 80389f0:	4631      	mov	r1, r6
 80389f2:	4638      	mov	r0, r7
 80389f4:	eb04 0803 	add.w	r8, r4, r3
 80389f8:	f000 fc6c 	bl	80392d4 <_sbrk_r>
 80389fc:	4580      	cmp	r8, r0
 80389fe:	d13a      	bne.n	8038a76 <_malloc_r+0xd2>
 8038a00:	6821      	ldr	r1, [r4, #0]
 8038a02:	3503      	adds	r5, #3
 8038a04:	1a6d      	subs	r5, r5, r1
 8038a06:	f025 0503 	bic.w	r5, r5, #3
 8038a0a:	3508      	adds	r5, #8
 8038a0c:	2d0c      	cmp	r5, #12
 8038a0e:	bf38      	it	cc
 8038a10:	250c      	movcc	r5, #12
 8038a12:	4629      	mov	r1, r5
 8038a14:	4638      	mov	r0, r7
 8038a16:	f7ff ffa5 	bl	8038964 <sbrk_aligned>
 8038a1a:	3001      	adds	r0, #1
 8038a1c:	d02b      	beq.n	8038a76 <_malloc_r+0xd2>
 8038a1e:	6823      	ldr	r3, [r4, #0]
 8038a20:	442b      	add	r3, r5
 8038a22:	6023      	str	r3, [r4, #0]
 8038a24:	e00e      	b.n	8038a44 <_malloc_r+0xa0>
 8038a26:	6822      	ldr	r2, [r4, #0]
 8038a28:	1b52      	subs	r2, r2, r5
 8038a2a:	d41e      	bmi.n	8038a6a <_malloc_r+0xc6>
 8038a2c:	2a0b      	cmp	r2, #11
 8038a2e:	d916      	bls.n	8038a5e <_malloc_r+0xba>
 8038a30:	1961      	adds	r1, r4, r5
 8038a32:	42a3      	cmp	r3, r4
 8038a34:	6025      	str	r5, [r4, #0]
 8038a36:	bf18      	it	ne
 8038a38:	6059      	strne	r1, [r3, #4]
 8038a3a:	6863      	ldr	r3, [r4, #4]
 8038a3c:	bf08      	it	eq
 8038a3e:	6031      	streq	r1, [r6, #0]
 8038a40:	5162      	str	r2, [r4, r5]
 8038a42:	604b      	str	r3, [r1, #4]
 8038a44:	4638      	mov	r0, r7
 8038a46:	f104 060b 	add.w	r6, r4, #11
 8038a4a:	f000 fec9 	bl	80397e0 <__malloc_unlock>
 8038a4e:	f026 0607 	bic.w	r6, r6, #7
 8038a52:	1d23      	adds	r3, r4, #4
 8038a54:	1af2      	subs	r2, r6, r3
 8038a56:	d0b6      	beq.n	80389c6 <_malloc_r+0x22>
 8038a58:	1b9b      	subs	r3, r3, r6
 8038a5a:	50a3      	str	r3, [r4, r2]
 8038a5c:	e7b3      	b.n	80389c6 <_malloc_r+0x22>
 8038a5e:	6862      	ldr	r2, [r4, #4]
 8038a60:	42a3      	cmp	r3, r4
 8038a62:	bf0c      	ite	eq
 8038a64:	6032      	streq	r2, [r6, #0]
 8038a66:	605a      	strne	r2, [r3, #4]
 8038a68:	e7ec      	b.n	8038a44 <_malloc_r+0xa0>
 8038a6a:	4623      	mov	r3, r4
 8038a6c:	6864      	ldr	r4, [r4, #4]
 8038a6e:	e7b2      	b.n	80389d6 <_malloc_r+0x32>
 8038a70:	4634      	mov	r4, r6
 8038a72:	6876      	ldr	r6, [r6, #4]
 8038a74:	e7b9      	b.n	80389ea <_malloc_r+0x46>
 8038a76:	230c      	movs	r3, #12
 8038a78:	603b      	str	r3, [r7, #0]
 8038a7a:	4638      	mov	r0, r7
 8038a7c:	f000 feb0 	bl	80397e0 <__malloc_unlock>
 8038a80:	e7a1      	b.n	80389c6 <_malloc_r+0x22>
 8038a82:	6025      	str	r5, [r4, #0]
 8038a84:	e7de      	b.n	8038a44 <_malloc_r+0xa0>
 8038a86:	bf00      	nop
 8038a88:	2000f064 	.word	0x2000f064

08038a8c <__sfputc_r>:
 8038a8c:	6893      	ldr	r3, [r2, #8]
 8038a8e:	3b01      	subs	r3, #1
 8038a90:	2b00      	cmp	r3, #0
 8038a92:	b410      	push	{r4}
 8038a94:	6093      	str	r3, [r2, #8]
 8038a96:	da08      	bge.n	8038aaa <__sfputc_r+0x1e>
 8038a98:	6994      	ldr	r4, [r2, #24]
 8038a9a:	42a3      	cmp	r3, r4
 8038a9c:	db01      	blt.n	8038aa2 <__sfputc_r+0x16>
 8038a9e:	290a      	cmp	r1, #10
 8038aa0:	d103      	bne.n	8038aaa <__sfputc_r+0x1e>
 8038aa2:	f85d 4b04 	ldr.w	r4, [sp], #4
 8038aa6:	f000 bc71 	b.w	803938c <__swbuf_r>
 8038aaa:	6813      	ldr	r3, [r2, #0]
 8038aac:	1c58      	adds	r0, r3, #1
 8038aae:	6010      	str	r0, [r2, #0]
 8038ab0:	7019      	strb	r1, [r3, #0]
 8038ab2:	4608      	mov	r0, r1
 8038ab4:	f85d 4b04 	ldr.w	r4, [sp], #4
 8038ab8:	4770      	bx	lr

08038aba <__sfputs_r>:
 8038aba:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8038abc:	4606      	mov	r6, r0
 8038abe:	460f      	mov	r7, r1
 8038ac0:	4614      	mov	r4, r2
 8038ac2:	18d5      	adds	r5, r2, r3
 8038ac4:	42ac      	cmp	r4, r5
 8038ac6:	d101      	bne.n	8038acc <__sfputs_r+0x12>
 8038ac8:	2000      	movs	r0, #0
 8038aca:	e007      	b.n	8038adc <__sfputs_r+0x22>
 8038acc:	f814 1b01 	ldrb.w	r1, [r4], #1
 8038ad0:	463a      	mov	r2, r7
 8038ad2:	4630      	mov	r0, r6
 8038ad4:	f7ff ffda 	bl	8038a8c <__sfputc_r>
 8038ad8:	1c43      	adds	r3, r0, #1
 8038ada:	d1f3      	bne.n	8038ac4 <__sfputs_r+0xa>
 8038adc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08038ae0 <_vfiprintf_r>:
 8038ae0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8038ae4:	460d      	mov	r5, r1
 8038ae6:	b09d      	sub	sp, #116	; 0x74
 8038ae8:	4614      	mov	r4, r2
 8038aea:	4698      	mov	r8, r3
 8038aec:	4606      	mov	r6, r0
 8038aee:	b118      	cbz	r0, 8038af8 <_vfiprintf_r+0x18>
 8038af0:	6983      	ldr	r3, [r0, #24]
 8038af2:	b90b      	cbnz	r3, 8038af8 <_vfiprintf_r+0x18>
 8038af4:	f7ff fdc6 	bl	8038684 <__sinit>
 8038af8:	4b89      	ldr	r3, [pc, #548]	; (8038d20 <_vfiprintf_r+0x240>)
 8038afa:	429d      	cmp	r5, r3
 8038afc:	d11b      	bne.n	8038b36 <_vfiprintf_r+0x56>
 8038afe:	6875      	ldr	r5, [r6, #4]
 8038b00:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8038b02:	07d9      	lsls	r1, r3, #31
 8038b04:	d405      	bmi.n	8038b12 <_vfiprintf_r+0x32>
 8038b06:	89ab      	ldrh	r3, [r5, #12]
 8038b08:	059a      	lsls	r2, r3, #22
 8038b0a:	d402      	bmi.n	8038b12 <_vfiprintf_r+0x32>
 8038b0c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8038b0e:	f7ff fe8e 	bl	803882e <__retarget_lock_acquire_recursive>
 8038b12:	89ab      	ldrh	r3, [r5, #12]
 8038b14:	071b      	lsls	r3, r3, #28
 8038b16:	d501      	bpl.n	8038b1c <_vfiprintf_r+0x3c>
 8038b18:	692b      	ldr	r3, [r5, #16]
 8038b1a:	b9eb      	cbnz	r3, 8038b58 <_vfiprintf_r+0x78>
 8038b1c:	4629      	mov	r1, r5
 8038b1e:	4630      	mov	r0, r6
 8038b20:	f000 fc98 	bl	8039454 <__swsetup_r>
 8038b24:	b1c0      	cbz	r0, 8038b58 <_vfiprintf_r+0x78>
 8038b26:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8038b28:	07dc      	lsls	r4, r3, #31
 8038b2a:	d50e      	bpl.n	8038b4a <_vfiprintf_r+0x6a>
 8038b2c:	f04f 30ff 	mov.w	r0, #4294967295
 8038b30:	b01d      	add	sp, #116	; 0x74
 8038b32:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8038b36:	4b7b      	ldr	r3, [pc, #492]	; (8038d24 <_vfiprintf_r+0x244>)
 8038b38:	429d      	cmp	r5, r3
 8038b3a:	d101      	bne.n	8038b40 <_vfiprintf_r+0x60>
 8038b3c:	68b5      	ldr	r5, [r6, #8]
 8038b3e:	e7df      	b.n	8038b00 <_vfiprintf_r+0x20>
 8038b40:	4b79      	ldr	r3, [pc, #484]	; (8038d28 <_vfiprintf_r+0x248>)
 8038b42:	429d      	cmp	r5, r3
 8038b44:	bf08      	it	eq
 8038b46:	68f5      	ldreq	r5, [r6, #12]
 8038b48:	e7da      	b.n	8038b00 <_vfiprintf_r+0x20>
 8038b4a:	89ab      	ldrh	r3, [r5, #12]
 8038b4c:	0598      	lsls	r0, r3, #22
 8038b4e:	d4ed      	bmi.n	8038b2c <_vfiprintf_r+0x4c>
 8038b50:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8038b52:	f7ff fe6d 	bl	8038830 <__retarget_lock_release_recursive>
 8038b56:	e7e9      	b.n	8038b2c <_vfiprintf_r+0x4c>
 8038b58:	2300      	movs	r3, #0
 8038b5a:	9309      	str	r3, [sp, #36]	; 0x24
 8038b5c:	2320      	movs	r3, #32
 8038b5e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8038b62:	f8cd 800c 	str.w	r8, [sp, #12]
 8038b66:	2330      	movs	r3, #48	; 0x30
 8038b68:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8038d2c <_vfiprintf_r+0x24c>
 8038b6c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8038b70:	f04f 0901 	mov.w	r9, #1
 8038b74:	4623      	mov	r3, r4
 8038b76:	469a      	mov	sl, r3
 8038b78:	f813 2b01 	ldrb.w	r2, [r3], #1
 8038b7c:	b10a      	cbz	r2, 8038b82 <_vfiprintf_r+0xa2>
 8038b7e:	2a25      	cmp	r2, #37	; 0x25
 8038b80:	d1f9      	bne.n	8038b76 <_vfiprintf_r+0x96>
 8038b82:	ebba 0b04 	subs.w	fp, sl, r4
 8038b86:	d00b      	beq.n	8038ba0 <_vfiprintf_r+0xc0>
 8038b88:	465b      	mov	r3, fp
 8038b8a:	4622      	mov	r2, r4
 8038b8c:	4629      	mov	r1, r5
 8038b8e:	4630      	mov	r0, r6
 8038b90:	f7ff ff93 	bl	8038aba <__sfputs_r>
 8038b94:	3001      	adds	r0, #1
 8038b96:	f000 80aa 	beq.w	8038cee <_vfiprintf_r+0x20e>
 8038b9a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8038b9c:	445a      	add	r2, fp
 8038b9e:	9209      	str	r2, [sp, #36]	; 0x24
 8038ba0:	f89a 3000 	ldrb.w	r3, [sl]
 8038ba4:	2b00      	cmp	r3, #0
 8038ba6:	f000 80a2 	beq.w	8038cee <_vfiprintf_r+0x20e>
 8038baa:	2300      	movs	r3, #0
 8038bac:	f04f 32ff 	mov.w	r2, #4294967295
 8038bb0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8038bb4:	f10a 0a01 	add.w	sl, sl, #1
 8038bb8:	9304      	str	r3, [sp, #16]
 8038bba:	9307      	str	r3, [sp, #28]
 8038bbc:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8038bc0:	931a      	str	r3, [sp, #104]	; 0x68
 8038bc2:	4654      	mov	r4, sl
 8038bc4:	2205      	movs	r2, #5
 8038bc6:	f814 1b01 	ldrb.w	r1, [r4], #1
 8038bca:	4858      	ldr	r0, [pc, #352]	; (8038d2c <_vfiprintf_r+0x24c>)
 8038bcc:	f7e7 fb08 	bl	80201e0 <memchr>
 8038bd0:	9a04      	ldr	r2, [sp, #16]
 8038bd2:	b9d8      	cbnz	r0, 8038c0c <_vfiprintf_r+0x12c>
 8038bd4:	06d1      	lsls	r1, r2, #27
 8038bd6:	bf44      	itt	mi
 8038bd8:	2320      	movmi	r3, #32
 8038bda:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8038bde:	0713      	lsls	r3, r2, #28
 8038be0:	bf44      	itt	mi
 8038be2:	232b      	movmi	r3, #43	; 0x2b
 8038be4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8038be8:	f89a 3000 	ldrb.w	r3, [sl]
 8038bec:	2b2a      	cmp	r3, #42	; 0x2a
 8038bee:	d015      	beq.n	8038c1c <_vfiprintf_r+0x13c>
 8038bf0:	9a07      	ldr	r2, [sp, #28]
 8038bf2:	4654      	mov	r4, sl
 8038bf4:	2000      	movs	r0, #0
 8038bf6:	f04f 0c0a 	mov.w	ip, #10
 8038bfa:	4621      	mov	r1, r4
 8038bfc:	f811 3b01 	ldrb.w	r3, [r1], #1
 8038c00:	3b30      	subs	r3, #48	; 0x30
 8038c02:	2b09      	cmp	r3, #9
 8038c04:	d94e      	bls.n	8038ca4 <_vfiprintf_r+0x1c4>
 8038c06:	b1b0      	cbz	r0, 8038c36 <_vfiprintf_r+0x156>
 8038c08:	9207      	str	r2, [sp, #28]
 8038c0a:	e014      	b.n	8038c36 <_vfiprintf_r+0x156>
 8038c0c:	eba0 0308 	sub.w	r3, r0, r8
 8038c10:	fa09 f303 	lsl.w	r3, r9, r3
 8038c14:	4313      	orrs	r3, r2
 8038c16:	9304      	str	r3, [sp, #16]
 8038c18:	46a2      	mov	sl, r4
 8038c1a:	e7d2      	b.n	8038bc2 <_vfiprintf_r+0xe2>
 8038c1c:	9b03      	ldr	r3, [sp, #12]
 8038c1e:	1d19      	adds	r1, r3, #4
 8038c20:	681b      	ldr	r3, [r3, #0]
 8038c22:	9103      	str	r1, [sp, #12]
 8038c24:	2b00      	cmp	r3, #0
 8038c26:	bfbb      	ittet	lt
 8038c28:	425b      	neglt	r3, r3
 8038c2a:	f042 0202 	orrlt.w	r2, r2, #2
 8038c2e:	9307      	strge	r3, [sp, #28]
 8038c30:	9307      	strlt	r3, [sp, #28]
 8038c32:	bfb8      	it	lt
 8038c34:	9204      	strlt	r2, [sp, #16]
 8038c36:	7823      	ldrb	r3, [r4, #0]
 8038c38:	2b2e      	cmp	r3, #46	; 0x2e
 8038c3a:	d10c      	bne.n	8038c56 <_vfiprintf_r+0x176>
 8038c3c:	7863      	ldrb	r3, [r4, #1]
 8038c3e:	2b2a      	cmp	r3, #42	; 0x2a
 8038c40:	d135      	bne.n	8038cae <_vfiprintf_r+0x1ce>
 8038c42:	9b03      	ldr	r3, [sp, #12]
 8038c44:	1d1a      	adds	r2, r3, #4
 8038c46:	681b      	ldr	r3, [r3, #0]
 8038c48:	9203      	str	r2, [sp, #12]
 8038c4a:	2b00      	cmp	r3, #0
 8038c4c:	bfb8      	it	lt
 8038c4e:	f04f 33ff 	movlt.w	r3, #4294967295
 8038c52:	3402      	adds	r4, #2
 8038c54:	9305      	str	r3, [sp, #20]
 8038c56:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8038d3c <_vfiprintf_r+0x25c>
 8038c5a:	7821      	ldrb	r1, [r4, #0]
 8038c5c:	2203      	movs	r2, #3
 8038c5e:	4650      	mov	r0, sl
 8038c60:	f7e7 fabe 	bl	80201e0 <memchr>
 8038c64:	b140      	cbz	r0, 8038c78 <_vfiprintf_r+0x198>
 8038c66:	2340      	movs	r3, #64	; 0x40
 8038c68:	eba0 000a 	sub.w	r0, r0, sl
 8038c6c:	fa03 f000 	lsl.w	r0, r3, r0
 8038c70:	9b04      	ldr	r3, [sp, #16]
 8038c72:	4303      	orrs	r3, r0
 8038c74:	3401      	adds	r4, #1
 8038c76:	9304      	str	r3, [sp, #16]
 8038c78:	f814 1b01 	ldrb.w	r1, [r4], #1
 8038c7c:	482c      	ldr	r0, [pc, #176]	; (8038d30 <_vfiprintf_r+0x250>)
 8038c7e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8038c82:	2206      	movs	r2, #6
 8038c84:	f7e7 faac 	bl	80201e0 <memchr>
 8038c88:	2800      	cmp	r0, #0
 8038c8a:	d03f      	beq.n	8038d0c <_vfiprintf_r+0x22c>
 8038c8c:	4b29      	ldr	r3, [pc, #164]	; (8038d34 <_vfiprintf_r+0x254>)
 8038c8e:	bb1b      	cbnz	r3, 8038cd8 <_vfiprintf_r+0x1f8>
 8038c90:	9b03      	ldr	r3, [sp, #12]
 8038c92:	3307      	adds	r3, #7
 8038c94:	f023 0307 	bic.w	r3, r3, #7
 8038c98:	3308      	adds	r3, #8
 8038c9a:	9303      	str	r3, [sp, #12]
 8038c9c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8038c9e:	443b      	add	r3, r7
 8038ca0:	9309      	str	r3, [sp, #36]	; 0x24
 8038ca2:	e767      	b.n	8038b74 <_vfiprintf_r+0x94>
 8038ca4:	fb0c 3202 	mla	r2, ip, r2, r3
 8038ca8:	460c      	mov	r4, r1
 8038caa:	2001      	movs	r0, #1
 8038cac:	e7a5      	b.n	8038bfa <_vfiprintf_r+0x11a>
 8038cae:	2300      	movs	r3, #0
 8038cb0:	3401      	adds	r4, #1
 8038cb2:	9305      	str	r3, [sp, #20]
 8038cb4:	4619      	mov	r1, r3
 8038cb6:	f04f 0c0a 	mov.w	ip, #10
 8038cba:	4620      	mov	r0, r4
 8038cbc:	f810 2b01 	ldrb.w	r2, [r0], #1
 8038cc0:	3a30      	subs	r2, #48	; 0x30
 8038cc2:	2a09      	cmp	r2, #9
 8038cc4:	d903      	bls.n	8038cce <_vfiprintf_r+0x1ee>
 8038cc6:	2b00      	cmp	r3, #0
 8038cc8:	d0c5      	beq.n	8038c56 <_vfiprintf_r+0x176>
 8038cca:	9105      	str	r1, [sp, #20]
 8038ccc:	e7c3      	b.n	8038c56 <_vfiprintf_r+0x176>
 8038cce:	fb0c 2101 	mla	r1, ip, r1, r2
 8038cd2:	4604      	mov	r4, r0
 8038cd4:	2301      	movs	r3, #1
 8038cd6:	e7f0      	b.n	8038cba <_vfiprintf_r+0x1da>
 8038cd8:	ab03      	add	r3, sp, #12
 8038cda:	9300      	str	r3, [sp, #0]
 8038cdc:	462a      	mov	r2, r5
 8038cde:	4b16      	ldr	r3, [pc, #88]	; (8038d38 <_vfiprintf_r+0x258>)
 8038ce0:	a904      	add	r1, sp, #16
 8038ce2:	4630      	mov	r0, r6
 8038ce4:	f3af 8000 	nop.w
 8038ce8:	4607      	mov	r7, r0
 8038cea:	1c78      	adds	r0, r7, #1
 8038cec:	d1d6      	bne.n	8038c9c <_vfiprintf_r+0x1bc>
 8038cee:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8038cf0:	07d9      	lsls	r1, r3, #31
 8038cf2:	d405      	bmi.n	8038d00 <_vfiprintf_r+0x220>
 8038cf4:	89ab      	ldrh	r3, [r5, #12]
 8038cf6:	059a      	lsls	r2, r3, #22
 8038cf8:	d402      	bmi.n	8038d00 <_vfiprintf_r+0x220>
 8038cfa:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8038cfc:	f7ff fd98 	bl	8038830 <__retarget_lock_release_recursive>
 8038d00:	89ab      	ldrh	r3, [r5, #12]
 8038d02:	065b      	lsls	r3, r3, #25
 8038d04:	f53f af12 	bmi.w	8038b2c <_vfiprintf_r+0x4c>
 8038d08:	9809      	ldr	r0, [sp, #36]	; 0x24
 8038d0a:	e711      	b.n	8038b30 <_vfiprintf_r+0x50>
 8038d0c:	ab03      	add	r3, sp, #12
 8038d0e:	9300      	str	r3, [sp, #0]
 8038d10:	462a      	mov	r2, r5
 8038d12:	4b09      	ldr	r3, [pc, #36]	; (8038d38 <_vfiprintf_r+0x258>)
 8038d14:	a904      	add	r1, sp, #16
 8038d16:	4630      	mov	r0, r6
 8038d18:	f000 f880 	bl	8038e1c <_printf_i>
 8038d1c:	e7e4      	b.n	8038ce8 <_vfiprintf_r+0x208>
 8038d1e:	bf00      	nop
 8038d20:	0803d6a4 	.word	0x0803d6a4
 8038d24:	0803d6c4 	.word	0x0803d6c4
 8038d28:	0803d684 	.word	0x0803d684
 8038d2c:	0803d6e8 	.word	0x0803d6e8
 8038d30:	0803d6f2 	.word	0x0803d6f2
 8038d34:	00000000 	.word	0x00000000
 8038d38:	08038abb 	.word	0x08038abb
 8038d3c:	0803d6ee 	.word	0x0803d6ee

08038d40 <_printf_common>:
 8038d40:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8038d44:	4616      	mov	r6, r2
 8038d46:	4699      	mov	r9, r3
 8038d48:	688a      	ldr	r2, [r1, #8]
 8038d4a:	690b      	ldr	r3, [r1, #16]
 8038d4c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8038d50:	4293      	cmp	r3, r2
 8038d52:	bfb8      	it	lt
 8038d54:	4613      	movlt	r3, r2
 8038d56:	6033      	str	r3, [r6, #0]
 8038d58:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8038d5c:	4607      	mov	r7, r0
 8038d5e:	460c      	mov	r4, r1
 8038d60:	b10a      	cbz	r2, 8038d66 <_printf_common+0x26>
 8038d62:	3301      	adds	r3, #1
 8038d64:	6033      	str	r3, [r6, #0]
 8038d66:	6823      	ldr	r3, [r4, #0]
 8038d68:	0699      	lsls	r1, r3, #26
 8038d6a:	bf42      	ittt	mi
 8038d6c:	6833      	ldrmi	r3, [r6, #0]
 8038d6e:	3302      	addmi	r3, #2
 8038d70:	6033      	strmi	r3, [r6, #0]
 8038d72:	6825      	ldr	r5, [r4, #0]
 8038d74:	f015 0506 	ands.w	r5, r5, #6
 8038d78:	d106      	bne.n	8038d88 <_printf_common+0x48>
 8038d7a:	f104 0a19 	add.w	sl, r4, #25
 8038d7e:	68e3      	ldr	r3, [r4, #12]
 8038d80:	6832      	ldr	r2, [r6, #0]
 8038d82:	1a9b      	subs	r3, r3, r2
 8038d84:	42ab      	cmp	r3, r5
 8038d86:	dc26      	bgt.n	8038dd6 <_printf_common+0x96>
 8038d88:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8038d8c:	1e13      	subs	r3, r2, #0
 8038d8e:	6822      	ldr	r2, [r4, #0]
 8038d90:	bf18      	it	ne
 8038d92:	2301      	movne	r3, #1
 8038d94:	0692      	lsls	r2, r2, #26
 8038d96:	d42b      	bmi.n	8038df0 <_printf_common+0xb0>
 8038d98:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8038d9c:	4649      	mov	r1, r9
 8038d9e:	4638      	mov	r0, r7
 8038da0:	47c0      	blx	r8
 8038da2:	3001      	adds	r0, #1
 8038da4:	d01e      	beq.n	8038de4 <_printf_common+0xa4>
 8038da6:	6823      	ldr	r3, [r4, #0]
 8038da8:	68e5      	ldr	r5, [r4, #12]
 8038daa:	6832      	ldr	r2, [r6, #0]
 8038dac:	f003 0306 	and.w	r3, r3, #6
 8038db0:	2b04      	cmp	r3, #4
 8038db2:	bf08      	it	eq
 8038db4:	1aad      	subeq	r5, r5, r2
 8038db6:	68a3      	ldr	r3, [r4, #8]
 8038db8:	6922      	ldr	r2, [r4, #16]
 8038dba:	bf0c      	ite	eq
 8038dbc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8038dc0:	2500      	movne	r5, #0
 8038dc2:	4293      	cmp	r3, r2
 8038dc4:	bfc4      	itt	gt
 8038dc6:	1a9b      	subgt	r3, r3, r2
 8038dc8:	18ed      	addgt	r5, r5, r3
 8038dca:	2600      	movs	r6, #0
 8038dcc:	341a      	adds	r4, #26
 8038dce:	42b5      	cmp	r5, r6
 8038dd0:	d11a      	bne.n	8038e08 <_printf_common+0xc8>
 8038dd2:	2000      	movs	r0, #0
 8038dd4:	e008      	b.n	8038de8 <_printf_common+0xa8>
 8038dd6:	2301      	movs	r3, #1
 8038dd8:	4652      	mov	r2, sl
 8038dda:	4649      	mov	r1, r9
 8038ddc:	4638      	mov	r0, r7
 8038dde:	47c0      	blx	r8
 8038de0:	3001      	adds	r0, #1
 8038de2:	d103      	bne.n	8038dec <_printf_common+0xac>
 8038de4:	f04f 30ff 	mov.w	r0, #4294967295
 8038de8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8038dec:	3501      	adds	r5, #1
 8038dee:	e7c6      	b.n	8038d7e <_printf_common+0x3e>
 8038df0:	18e1      	adds	r1, r4, r3
 8038df2:	1c5a      	adds	r2, r3, #1
 8038df4:	2030      	movs	r0, #48	; 0x30
 8038df6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8038dfa:	4422      	add	r2, r4
 8038dfc:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8038e00:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8038e04:	3302      	adds	r3, #2
 8038e06:	e7c7      	b.n	8038d98 <_printf_common+0x58>
 8038e08:	2301      	movs	r3, #1
 8038e0a:	4622      	mov	r2, r4
 8038e0c:	4649      	mov	r1, r9
 8038e0e:	4638      	mov	r0, r7
 8038e10:	47c0      	blx	r8
 8038e12:	3001      	adds	r0, #1
 8038e14:	d0e6      	beq.n	8038de4 <_printf_common+0xa4>
 8038e16:	3601      	adds	r6, #1
 8038e18:	e7d9      	b.n	8038dce <_printf_common+0x8e>
	...

08038e1c <_printf_i>:
 8038e1c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8038e20:	7e0f      	ldrb	r7, [r1, #24]
 8038e22:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8038e24:	2f78      	cmp	r7, #120	; 0x78
 8038e26:	4691      	mov	r9, r2
 8038e28:	4680      	mov	r8, r0
 8038e2a:	460c      	mov	r4, r1
 8038e2c:	469a      	mov	sl, r3
 8038e2e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8038e32:	d807      	bhi.n	8038e44 <_printf_i+0x28>
 8038e34:	2f62      	cmp	r7, #98	; 0x62
 8038e36:	d80a      	bhi.n	8038e4e <_printf_i+0x32>
 8038e38:	2f00      	cmp	r7, #0
 8038e3a:	f000 80d8 	beq.w	8038fee <_printf_i+0x1d2>
 8038e3e:	2f58      	cmp	r7, #88	; 0x58
 8038e40:	f000 80a3 	beq.w	8038f8a <_printf_i+0x16e>
 8038e44:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8038e48:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8038e4c:	e03a      	b.n	8038ec4 <_printf_i+0xa8>
 8038e4e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8038e52:	2b15      	cmp	r3, #21
 8038e54:	d8f6      	bhi.n	8038e44 <_printf_i+0x28>
 8038e56:	a101      	add	r1, pc, #4	; (adr r1, 8038e5c <_printf_i+0x40>)
 8038e58:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8038e5c:	08038eb5 	.word	0x08038eb5
 8038e60:	08038ec9 	.word	0x08038ec9
 8038e64:	08038e45 	.word	0x08038e45
 8038e68:	08038e45 	.word	0x08038e45
 8038e6c:	08038e45 	.word	0x08038e45
 8038e70:	08038e45 	.word	0x08038e45
 8038e74:	08038ec9 	.word	0x08038ec9
 8038e78:	08038e45 	.word	0x08038e45
 8038e7c:	08038e45 	.word	0x08038e45
 8038e80:	08038e45 	.word	0x08038e45
 8038e84:	08038e45 	.word	0x08038e45
 8038e88:	08038fd5 	.word	0x08038fd5
 8038e8c:	08038ef9 	.word	0x08038ef9
 8038e90:	08038fb7 	.word	0x08038fb7
 8038e94:	08038e45 	.word	0x08038e45
 8038e98:	08038e45 	.word	0x08038e45
 8038e9c:	08038ff7 	.word	0x08038ff7
 8038ea0:	08038e45 	.word	0x08038e45
 8038ea4:	08038ef9 	.word	0x08038ef9
 8038ea8:	08038e45 	.word	0x08038e45
 8038eac:	08038e45 	.word	0x08038e45
 8038eb0:	08038fbf 	.word	0x08038fbf
 8038eb4:	682b      	ldr	r3, [r5, #0]
 8038eb6:	1d1a      	adds	r2, r3, #4
 8038eb8:	681b      	ldr	r3, [r3, #0]
 8038eba:	602a      	str	r2, [r5, #0]
 8038ebc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8038ec0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8038ec4:	2301      	movs	r3, #1
 8038ec6:	e0a3      	b.n	8039010 <_printf_i+0x1f4>
 8038ec8:	6820      	ldr	r0, [r4, #0]
 8038eca:	6829      	ldr	r1, [r5, #0]
 8038ecc:	0606      	lsls	r6, r0, #24
 8038ece:	f101 0304 	add.w	r3, r1, #4
 8038ed2:	d50a      	bpl.n	8038eea <_printf_i+0xce>
 8038ed4:	680e      	ldr	r6, [r1, #0]
 8038ed6:	602b      	str	r3, [r5, #0]
 8038ed8:	2e00      	cmp	r6, #0
 8038eda:	da03      	bge.n	8038ee4 <_printf_i+0xc8>
 8038edc:	232d      	movs	r3, #45	; 0x2d
 8038ede:	4276      	negs	r6, r6
 8038ee0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8038ee4:	485e      	ldr	r0, [pc, #376]	; (8039060 <_printf_i+0x244>)
 8038ee6:	230a      	movs	r3, #10
 8038ee8:	e019      	b.n	8038f1e <_printf_i+0x102>
 8038eea:	680e      	ldr	r6, [r1, #0]
 8038eec:	602b      	str	r3, [r5, #0]
 8038eee:	f010 0f40 	tst.w	r0, #64	; 0x40
 8038ef2:	bf18      	it	ne
 8038ef4:	b236      	sxthne	r6, r6
 8038ef6:	e7ef      	b.n	8038ed8 <_printf_i+0xbc>
 8038ef8:	682b      	ldr	r3, [r5, #0]
 8038efa:	6820      	ldr	r0, [r4, #0]
 8038efc:	1d19      	adds	r1, r3, #4
 8038efe:	6029      	str	r1, [r5, #0]
 8038f00:	0601      	lsls	r1, r0, #24
 8038f02:	d501      	bpl.n	8038f08 <_printf_i+0xec>
 8038f04:	681e      	ldr	r6, [r3, #0]
 8038f06:	e002      	b.n	8038f0e <_printf_i+0xf2>
 8038f08:	0646      	lsls	r6, r0, #25
 8038f0a:	d5fb      	bpl.n	8038f04 <_printf_i+0xe8>
 8038f0c:	881e      	ldrh	r6, [r3, #0]
 8038f0e:	4854      	ldr	r0, [pc, #336]	; (8039060 <_printf_i+0x244>)
 8038f10:	2f6f      	cmp	r7, #111	; 0x6f
 8038f12:	bf0c      	ite	eq
 8038f14:	2308      	moveq	r3, #8
 8038f16:	230a      	movne	r3, #10
 8038f18:	2100      	movs	r1, #0
 8038f1a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8038f1e:	6865      	ldr	r5, [r4, #4]
 8038f20:	60a5      	str	r5, [r4, #8]
 8038f22:	2d00      	cmp	r5, #0
 8038f24:	bfa2      	ittt	ge
 8038f26:	6821      	ldrge	r1, [r4, #0]
 8038f28:	f021 0104 	bicge.w	r1, r1, #4
 8038f2c:	6021      	strge	r1, [r4, #0]
 8038f2e:	b90e      	cbnz	r6, 8038f34 <_printf_i+0x118>
 8038f30:	2d00      	cmp	r5, #0
 8038f32:	d04d      	beq.n	8038fd0 <_printf_i+0x1b4>
 8038f34:	4615      	mov	r5, r2
 8038f36:	fbb6 f1f3 	udiv	r1, r6, r3
 8038f3a:	fb03 6711 	mls	r7, r3, r1, r6
 8038f3e:	5dc7      	ldrb	r7, [r0, r7]
 8038f40:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8038f44:	4637      	mov	r7, r6
 8038f46:	42bb      	cmp	r3, r7
 8038f48:	460e      	mov	r6, r1
 8038f4a:	d9f4      	bls.n	8038f36 <_printf_i+0x11a>
 8038f4c:	2b08      	cmp	r3, #8
 8038f4e:	d10b      	bne.n	8038f68 <_printf_i+0x14c>
 8038f50:	6823      	ldr	r3, [r4, #0]
 8038f52:	07de      	lsls	r6, r3, #31
 8038f54:	d508      	bpl.n	8038f68 <_printf_i+0x14c>
 8038f56:	6923      	ldr	r3, [r4, #16]
 8038f58:	6861      	ldr	r1, [r4, #4]
 8038f5a:	4299      	cmp	r1, r3
 8038f5c:	bfde      	ittt	le
 8038f5e:	2330      	movle	r3, #48	; 0x30
 8038f60:	f805 3c01 	strble.w	r3, [r5, #-1]
 8038f64:	f105 35ff 	addle.w	r5, r5, #4294967295
 8038f68:	1b52      	subs	r2, r2, r5
 8038f6a:	6122      	str	r2, [r4, #16]
 8038f6c:	f8cd a000 	str.w	sl, [sp]
 8038f70:	464b      	mov	r3, r9
 8038f72:	aa03      	add	r2, sp, #12
 8038f74:	4621      	mov	r1, r4
 8038f76:	4640      	mov	r0, r8
 8038f78:	f7ff fee2 	bl	8038d40 <_printf_common>
 8038f7c:	3001      	adds	r0, #1
 8038f7e:	d14c      	bne.n	803901a <_printf_i+0x1fe>
 8038f80:	f04f 30ff 	mov.w	r0, #4294967295
 8038f84:	b004      	add	sp, #16
 8038f86:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8038f8a:	4835      	ldr	r0, [pc, #212]	; (8039060 <_printf_i+0x244>)
 8038f8c:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8038f90:	6829      	ldr	r1, [r5, #0]
 8038f92:	6823      	ldr	r3, [r4, #0]
 8038f94:	f851 6b04 	ldr.w	r6, [r1], #4
 8038f98:	6029      	str	r1, [r5, #0]
 8038f9a:	061d      	lsls	r5, r3, #24
 8038f9c:	d514      	bpl.n	8038fc8 <_printf_i+0x1ac>
 8038f9e:	07df      	lsls	r7, r3, #31
 8038fa0:	bf44      	itt	mi
 8038fa2:	f043 0320 	orrmi.w	r3, r3, #32
 8038fa6:	6023      	strmi	r3, [r4, #0]
 8038fa8:	b91e      	cbnz	r6, 8038fb2 <_printf_i+0x196>
 8038faa:	6823      	ldr	r3, [r4, #0]
 8038fac:	f023 0320 	bic.w	r3, r3, #32
 8038fb0:	6023      	str	r3, [r4, #0]
 8038fb2:	2310      	movs	r3, #16
 8038fb4:	e7b0      	b.n	8038f18 <_printf_i+0xfc>
 8038fb6:	6823      	ldr	r3, [r4, #0]
 8038fb8:	f043 0320 	orr.w	r3, r3, #32
 8038fbc:	6023      	str	r3, [r4, #0]
 8038fbe:	2378      	movs	r3, #120	; 0x78
 8038fc0:	4828      	ldr	r0, [pc, #160]	; (8039064 <_printf_i+0x248>)
 8038fc2:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8038fc6:	e7e3      	b.n	8038f90 <_printf_i+0x174>
 8038fc8:	0659      	lsls	r1, r3, #25
 8038fca:	bf48      	it	mi
 8038fcc:	b2b6      	uxthmi	r6, r6
 8038fce:	e7e6      	b.n	8038f9e <_printf_i+0x182>
 8038fd0:	4615      	mov	r5, r2
 8038fd2:	e7bb      	b.n	8038f4c <_printf_i+0x130>
 8038fd4:	682b      	ldr	r3, [r5, #0]
 8038fd6:	6826      	ldr	r6, [r4, #0]
 8038fd8:	6961      	ldr	r1, [r4, #20]
 8038fda:	1d18      	adds	r0, r3, #4
 8038fdc:	6028      	str	r0, [r5, #0]
 8038fde:	0635      	lsls	r5, r6, #24
 8038fe0:	681b      	ldr	r3, [r3, #0]
 8038fe2:	d501      	bpl.n	8038fe8 <_printf_i+0x1cc>
 8038fe4:	6019      	str	r1, [r3, #0]
 8038fe6:	e002      	b.n	8038fee <_printf_i+0x1d2>
 8038fe8:	0670      	lsls	r0, r6, #25
 8038fea:	d5fb      	bpl.n	8038fe4 <_printf_i+0x1c8>
 8038fec:	8019      	strh	r1, [r3, #0]
 8038fee:	2300      	movs	r3, #0
 8038ff0:	6123      	str	r3, [r4, #16]
 8038ff2:	4615      	mov	r5, r2
 8038ff4:	e7ba      	b.n	8038f6c <_printf_i+0x150>
 8038ff6:	682b      	ldr	r3, [r5, #0]
 8038ff8:	1d1a      	adds	r2, r3, #4
 8038ffa:	602a      	str	r2, [r5, #0]
 8038ffc:	681d      	ldr	r5, [r3, #0]
 8038ffe:	6862      	ldr	r2, [r4, #4]
 8039000:	2100      	movs	r1, #0
 8039002:	4628      	mov	r0, r5
 8039004:	f7e7 f8ec 	bl	80201e0 <memchr>
 8039008:	b108      	cbz	r0, 803900e <_printf_i+0x1f2>
 803900a:	1b40      	subs	r0, r0, r5
 803900c:	6060      	str	r0, [r4, #4]
 803900e:	6863      	ldr	r3, [r4, #4]
 8039010:	6123      	str	r3, [r4, #16]
 8039012:	2300      	movs	r3, #0
 8039014:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8039018:	e7a8      	b.n	8038f6c <_printf_i+0x150>
 803901a:	6923      	ldr	r3, [r4, #16]
 803901c:	462a      	mov	r2, r5
 803901e:	4649      	mov	r1, r9
 8039020:	4640      	mov	r0, r8
 8039022:	47d0      	blx	sl
 8039024:	3001      	adds	r0, #1
 8039026:	d0ab      	beq.n	8038f80 <_printf_i+0x164>
 8039028:	6823      	ldr	r3, [r4, #0]
 803902a:	079b      	lsls	r3, r3, #30
 803902c:	d413      	bmi.n	8039056 <_printf_i+0x23a>
 803902e:	68e0      	ldr	r0, [r4, #12]
 8039030:	9b03      	ldr	r3, [sp, #12]
 8039032:	4298      	cmp	r0, r3
 8039034:	bfb8      	it	lt
 8039036:	4618      	movlt	r0, r3
 8039038:	e7a4      	b.n	8038f84 <_printf_i+0x168>
 803903a:	2301      	movs	r3, #1
 803903c:	4632      	mov	r2, r6
 803903e:	4649      	mov	r1, r9
 8039040:	4640      	mov	r0, r8
 8039042:	47d0      	blx	sl
 8039044:	3001      	adds	r0, #1
 8039046:	d09b      	beq.n	8038f80 <_printf_i+0x164>
 8039048:	3501      	adds	r5, #1
 803904a:	68e3      	ldr	r3, [r4, #12]
 803904c:	9903      	ldr	r1, [sp, #12]
 803904e:	1a5b      	subs	r3, r3, r1
 8039050:	42ab      	cmp	r3, r5
 8039052:	dcf2      	bgt.n	803903a <_printf_i+0x21e>
 8039054:	e7eb      	b.n	803902e <_printf_i+0x212>
 8039056:	2500      	movs	r5, #0
 8039058:	f104 0619 	add.w	r6, r4, #25
 803905c:	e7f5      	b.n	803904a <_printf_i+0x22e>
 803905e:	bf00      	nop
 8039060:	0803d6f9 	.word	0x0803d6f9
 8039064:	0803d70a 	.word	0x0803d70a

08039068 <iprintf>:
 8039068:	b40f      	push	{r0, r1, r2, r3}
 803906a:	4b0a      	ldr	r3, [pc, #40]	; (8039094 <iprintf+0x2c>)
 803906c:	b513      	push	{r0, r1, r4, lr}
 803906e:	681c      	ldr	r4, [r3, #0]
 8039070:	b124      	cbz	r4, 803907c <iprintf+0x14>
 8039072:	69a3      	ldr	r3, [r4, #24]
 8039074:	b913      	cbnz	r3, 803907c <iprintf+0x14>
 8039076:	4620      	mov	r0, r4
 8039078:	f7ff fb04 	bl	8038684 <__sinit>
 803907c:	ab05      	add	r3, sp, #20
 803907e:	9a04      	ldr	r2, [sp, #16]
 8039080:	68a1      	ldr	r1, [r4, #8]
 8039082:	9301      	str	r3, [sp, #4]
 8039084:	4620      	mov	r0, r4
 8039086:	f7ff fd2b 	bl	8038ae0 <_vfiprintf_r>
 803908a:	b002      	add	sp, #8
 803908c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8039090:	b004      	add	sp, #16
 8039092:	4770      	bx	lr
 8039094:	20000034 	.word	0x20000034

08039098 <_puts_r>:
 8039098:	b570      	push	{r4, r5, r6, lr}
 803909a:	460e      	mov	r6, r1
 803909c:	4605      	mov	r5, r0
 803909e:	b118      	cbz	r0, 80390a8 <_puts_r+0x10>
 80390a0:	6983      	ldr	r3, [r0, #24]
 80390a2:	b90b      	cbnz	r3, 80390a8 <_puts_r+0x10>
 80390a4:	f7ff faee 	bl	8038684 <__sinit>
 80390a8:	69ab      	ldr	r3, [r5, #24]
 80390aa:	68ac      	ldr	r4, [r5, #8]
 80390ac:	b913      	cbnz	r3, 80390b4 <_puts_r+0x1c>
 80390ae:	4628      	mov	r0, r5
 80390b0:	f7ff fae8 	bl	8038684 <__sinit>
 80390b4:	4b2c      	ldr	r3, [pc, #176]	; (8039168 <_puts_r+0xd0>)
 80390b6:	429c      	cmp	r4, r3
 80390b8:	d120      	bne.n	80390fc <_puts_r+0x64>
 80390ba:	686c      	ldr	r4, [r5, #4]
 80390bc:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80390be:	07db      	lsls	r3, r3, #31
 80390c0:	d405      	bmi.n	80390ce <_puts_r+0x36>
 80390c2:	89a3      	ldrh	r3, [r4, #12]
 80390c4:	0598      	lsls	r0, r3, #22
 80390c6:	d402      	bmi.n	80390ce <_puts_r+0x36>
 80390c8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80390ca:	f7ff fbb0 	bl	803882e <__retarget_lock_acquire_recursive>
 80390ce:	89a3      	ldrh	r3, [r4, #12]
 80390d0:	0719      	lsls	r1, r3, #28
 80390d2:	d51d      	bpl.n	8039110 <_puts_r+0x78>
 80390d4:	6923      	ldr	r3, [r4, #16]
 80390d6:	b1db      	cbz	r3, 8039110 <_puts_r+0x78>
 80390d8:	3e01      	subs	r6, #1
 80390da:	68a3      	ldr	r3, [r4, #8]
 80390dc:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80390e0:	3b01      	subs	r3, #1
 80390e2:	60a3      	str	r3, [r4, #8]
 80390e4:	bb39      	cbnz	r1, 8039136 <_puts_r+0x9e>
 80390e6:	2b00      	cmp	r3, #0
 80390e8:	da38      	bge.n	803915c <_puts_r+0xc4>
 80390ea:	4622      	mov	r2, r4
 80390ec:	210a      	movs	r1, #10
 80390ee:	4628      	mov	r0, r5
 80390f0:	f000 f94c 	bl	803938c <__swbuf_r>
 80390f4:	3001      	adds	r0, #1
 80390f6:	d011      	beq.n	803911c <_puts_r+0x84>
 80390f8:	250a      	movs	r5, #10
 80390fa:	e011      	b.n	8039120 <_puts_r+0x88>
 80390fc:	4b1b      	ldr	r3, [pc, #108]	; (803916c <_puts_r+0xd4>)
 80390fe:	429c      	cmp	r4, r3
 8039100:	d101      	bne.n	8039106 <_puts_r+0x6e>
 8039102:	68ac      	ldr	r4, [r5, #8]
 8039104:	e7da      	b.n	80390bc <_puts_r+0x24>
 8039106:	4b1a      	ldr	r3, [pc, #104]	; (8039170 <_puts_r+0xd8>)
 8039108:	429c      	cmp	r4, r3
 803910a:	bf08      	it	eq
 803910c:	68ec      	ldreq	r4, [r5, #12]
 803910e:	e7d5      	b.n	80390bc <_puts_r+0x24>
 8039110:	4621      	mov	r1, r4
 8039112:	4628      	mov	r0, r5
 8039114:	f000 f99e 	bl	8039454 <__swsetup_r>
 8039118:	2800      	cmp	r0, #0
 803911a:	d0dd      	beq.n	80390d8 <_puts_r+0x40>
 803911c:	f04f 35ff 	mov.w	r5, #4294967295
 8039120:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8039122:	07da      	lsls	r2, r3, #31
 8039124:	d405      	bmi.n	8039132 <_puts_r+0x9a>
 8039126:	89a3      	ldrh	r3, [r4, #12]
 8039128:	059b      	lsls	r3, r3, #22
 803912a:	d402      	bmi.n	8039132 <_puts_r+0x9a>
 803912c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 803912e:	f7ff fb7f 	bl	8038830 <__retarget_lock_release_recursive>
 8039132:	4628      	mov	r0, r5
 8039134:	bd70      	pop	{r4, r5, r6, pc}
 8039136:	2b00      	cmp	r3, #0
 8039138:	da04      	bge.n	8039144 <_puts_r+0xac>
 803913a:	69a2      	ldr	r2, [r4, #24]
 803913c:	429a      	cmp	r2, r3
 803913e:	dc06      	bgt.n	803914e <_puts_r+0xb6>
 8039140:	290a      	cmp	r1, #10
 8039142:	d004      	beq.n	803914e <_puts_r+0xb6>
 8039144:	6823      	ldr	r3, [r4, #0]
 8039146:	1c5a      	adds	r2, r3, #1
 8039148:	6022      	str	r2, [r4, #0]
 803914a:	7019      	strb	r1, [r3, #0]
 803914c:	e7c5      	b.n	80390da <_puts_r+0x42>
 803914e:	4622      	mov	r2, r4
 8039150:	4628      	mov	r0, r5
 8039152:	f000 f91b 	bl	803938c <__swbuf_r>
 8039156:	3001      	adds	r0, #1
 8039158:	d1bf      	bne.n	80390da <_puts_r+0x42>
 803915a:	e7df      	b.n	803911c <_puts_r+0x84>
 803915c:	6823      	ldr	r3, [r4, #0]
 803915e:	250a      	movs	r5, #10
 8039160:	1c5a      	adds	r2, r3, #1
 8039162:	6022      	str	r2, [r4, #0]
 8039164:	701d      	strb	r5, [r3, #0]
 8039166:	e7db      	b.n	8039120 <_puts_r+0x88>
 8039168:	0803d6a4 	.word	0x0803d6a4
 803916c:	0803d6c4 	.word	0x0803d6c4
 8039170:	0803d684 	.word	0x0803d684

08039174 <puts>:
 8039174:	4b02      	ldr	r3, [pc, #8]	; (8039180 <puts+0xc>)
 8039176:	4601      	mov	r1, r0
 8039178:	6818      	ldr	r0, [r3, #0]
 803917a:	f7ff bf8d 	b.w	8039098 <_puts_r>
 803917e:	bf00      	nop
 8039180:	20000034 	.word	0x20000034

08039184 <rand>:
 8039184:	4b16      	ldr	r3, [pc, #88]	; (80391e0 <rand+0x5c>)
 8039186:	b510      	push	{r4, lr}
 8039188:	681c      	ldr	r4, [r3, #0]
 803918a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 803918c:	b9b3      	cbnz	r3, 80391bc <rand+0x38>
 803918e:	2018      	movs	r0, #24
 8039190:	f7ff fb50 	bl	8038834 <malloc>
 8039194:	63a0      	str	r0, [r4, #56]	; 0x38
 8039196:	b928      	cbnz	r0, 80391a4 <rand+0x20>
 8039198:	4602      	mov	r2, r0
 803919a:	4b12      	ldr	r3, [pc, #72]	; (80391e4 <rand+0x60>)
 803919c:	4812      	ldr	r0, [pc, #72]	; (80391e8 <rand+0x64>)
 803919e:	214e      	movs	r1, #78	; 0x4e
 80391a0:	f7ff f9f2 	bl	8038588 <__assert_func>
 80391a4:	4a11      	ldr	r2, [pc, #68]	; (80391ec <rand+0x68>)
 80391a6:	4b12      	ldr	r3, [pc, #72]	; (80391f0 <rand+0x6c>)
 80391a8:	e9c0 2300 	strd	r2, r3, [r0]
 80391ac:	4b11      	ldr	r3, [pc, #68]	; (80391f4 <rand+0x70>)
 80391ae:	6083      	str	r3, [r0, #8]
 80391b0:	230b      	movs	r3, #11
 80391b2:	8183      	strh	r3, [r0, #12]
 80391b4:	2201      	movs	r2, #1
 80391b6:	2300      	movs	r3, #0
 80391b8:	e9c0 2304 	strd	r2, r3, [r0, #16]
 80391bc:	6ba4      	ldr	r4, [r4, #56]	; 0x38
 80391be:	4a0e      	ldr	r2, [pc, #56]	; (80391f8 <rand+0x74>)
 80391c0:	6920      	ldr	r0, [r4, #16]
 80391c2:	6963      	ldr	r3, [r4, #20]
 80391c4:	490d      	ldr	r1, [pc, #52]	; (80391fc <rand+0x78>)
 80391c6:	4342      	muls	r2, r0
 80391c8:	fb01 2203 	mla	r2, r1, r3, r2
 80391cc:	fba0 0101 	umull	r0, r1, r0, r1
 80391d0:	1c43      	adds	r3, r0, #1
 80391d2:	eb42 0001 	adc.w	r0, r2, r1
 80391d6:	e9c4 3004 	strd	r3, r0, [r4, #16]
 80391da:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 80391de:	bd10      	pop	{r4, pc}
 80391e0:	20000034 	.word	0x20000034
 80391e4:	0803d71b 	.word	0x0803d71b
 80391e8:	0803d732 	.word	0x0803d732
 80391ec:	abcd330e 	.word	0xabcd330e
 80391f0:	e66d1234 	.word	0xe66d1234
 80391f4:	0005deec 	.word	0x0005deec
 80391f8:	5851f42d 	.word	0x5851f42d
 80391fc:	4c957f2d 	.word	0x4c957f2d

08039200 <cleanup_glue>:
 8039200:	b538      	push	{r3, r4, r5, lr}
 8039202:	460c      	mov	r4, r1
 8039204:	6809      	ldr	r1, [r1, #0]
 8039206:	4605      	mov	r5, r0
 8039208:	b109      	cbz	r1, 803920e <cleanup_glue+0xe>
 803920a:	f7ff fff9 	bl	8039200 <cleanup_glue>
 803920e:	4621      	mov	r1, r4
 8039210:	4628      	mov	r0, r5
 8039212:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8039216:	f7ff bb59 	b.w	80388cc <_free_r>
	...

0803921c <_reclaim_reent>:
 803921c:	4b2c      	ldr	r3, [pc, #176]	; (80392d0 <_reclaim_reent+0xb4>)
 803921e:	681b      	ldr	r3, [r3, #0]
 8039220:	4283      	cmp	r3, r0
 8039222:	b570      	push	{r4, r5, r6, lr}
 8039224:	4604      	mov	r4, r0
 8039226:	d051      	beq.n	80392cc <_reclaim_reent+0xb0>
 8039228:	6a43      	ldr	r3, [r0, #36]	; 0x24
 803922a:	b143      	cbz	r3, 803923e <_reclaim_reent+0x22>
 803922c:	68db      	ldr	r3, [r3, #12]
 803922e:	2b00      	cmp	r3, #0
 8039230:	d14a      	bne.n	80392c8 <_reclaim_reent+0xac>
 8039232:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8039234:	6819      	ldr	r1, [r3, #0]
 8039236:	b111      	cbz	r1, 803923e <_reclaim_reent+0x22>
 8039238:	4620      	mov	r0, r4
 803923a:	f7ff fb47 	bl	80388cc <_free_r>
 803923e:	6961      	ldr	r1, [r4, #20]
 8039240:	b111      	cbz	r1, 8039248 <_reclaim_reent+0x2c>
 8039242:	4620      	mov	r0, r4
 8039244:	f7ff fb42 	bl	80388cc <_free_r>
 8039248:	6a61      	ldr	r1, [r4, #36]	; 0x24
 803924a:	b111      	cbz	r1, 8039252 <_reclaim_reent+0x36>
 803924c:	4620      	mov	r0, r4
 803924e:	f7ff fb3d 	bl	80388cc <_free_r>
 8039252:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8039254:	b111      	cbz	r1, 803925c <_reclaim_reent+0x40>
 8039256:	4620      	mov	r0, r4
 8039258:	f7ff fb38 	bl	80388cc <_free_r>
 803925c:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 803925e:	b111      	cbz	r1, 8039266 <_reclaim_reent+0x4a>
 8039260:	4620      	mov	r0, r4
 8039262:	f7ff fb33 	bl	80388cc <_free_r>
 8039266:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8039268:	b111      	cbz	r1, 8039270 <_reclaim_reent+0x54>
 803926a:	4620      	mov	r0, r4
 803926c:	f7ff fb2e 	bl	80388cc <_free_r>
 8039270:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 8039272:	b111      	cbz	r1, 803927a <_reclaim_reent+0x5e>
 8039274:	4620      	mov	r0, r4
 8039276:	f7ff fb29 	bl	80388cc <_free_r>
 803927a:	6da1      	ldr	r1, [r4, #88]	; 0x58
 803927c:	b111      	cbz	r1, 8039284 <_reclaim_reent+0x68>
 803927e:	4620      	mov	r0, r4
 8039280:	f7ff fb24 	bl	80388cc <_free_r>
 8039284:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8039286:	b111      	cbz	r1, 803928e <_reclaim_reent+0x72>
 8039288:	4620      	mov	r0, r4
 803928a:	f7ff fb1f 	bl	80388cc <_free_r>
 803928e:	69a3      	ldr	r3, [r4, #24]
 8039290:	b1e3      	cbz	r3, 80392cc <_reclaim_reent+0xb0>
 8039292:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8039294:	4620      	mov	r0, r4
 8039296:	4798      	blx	r3
 8039298:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 803929a:	b1b9      	cbz	r1, 80392cc <_reclaim_reent+0xb0>
 803929c:	4620      	mov	r0, r4
 803929e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80392a2:	f7ff bfad 	b.w	8039200 <cleanup_glue>
 80392a6:	5949      	ldr	r1, [r1, r5]
 80392a8:	b941      	cbnz	r1, 80392bc <_reclaim_reent+0xa0>
 80392aa:	3504      	adds	r5, #4
 80392ac:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80392ae:	2d80      	cmp	r5, #128	; 0x80
 80392b0:	68d9      	ldr	r1, [r3, #12]
 80392b2:	d1f8      	bne.n	80392a6 <_reclaim_reent+0x8a>
 80392b4:	4620      	mov	r0, r4
 80392b6:	f7ff fb09 	bl	80388cc <_free_r>
 80392ba:	e7ba      	b.n	8039232 <_reclaim_reent+0x16>
 80392bc:	680e      	ldr	r6, [r1, #0]
 80392be:	4620      	mov	r0, r4
 80392c0:	f7ff fb04 	bl	80388cc <_free_r>
 80392c4:	4631      	mov	r1, r6
 80392c6:	e7ef      	b.n	80392a8 <_reclaim_reent+0x8c>
 80392c8:	2500      	movs	r5, #0
 80392ca:	e7ef      	b.n	80392ac <_reclaim_reent+0x90>
 80392cc:	bd70      	pop	{r4, r5, r6, pc}
 80392ce:	bf00      	nop
 80392d0:	20000034 	.word	0x20000034

080392d4 <_sbrk_r>:
 80392d4:	b538      	push	{r3, r4, r5, lr}
 80392d6:	4d06      	ldr	r5, [pc, #24]	; (80392f0 <_sbrk_r+0x1c>)
 80392d8:	2300      	movs	r3, #0
 80392da:	4604      	mov	r4, r0
 80392dc:	4608      	mov	r0, r1
 80392de:	602b      	str	r3, [r5, #0]
 80392e0:	f7e7 fd44 	bl	8020d6c <_sbrk>
 80392e4:	1c43      	adds	r3, r0, #1
 80392e6:	d102      	bne.n	80392ee <_sbrk_r+0x1a>
 80392e8:	682b      	ldr	r3, [r5, #0]
 80392ea:	b103      	cbz	r3, 80392ee <_sbrk_r+0x1a>
 80392ec:	6023      	str	r3, [r4, #0]
 80392ee:	bd38      	pop	{r3, r4, r5, pc}
 80392f0:	2000f06c 	.word	0x2000f06c

080392f4 <__sread>:
 80392f4:	b510      	push	{r4, lr}
 80392f6:	460c      	mov	r4, r1
 80392f8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80392fc:	f000 fa76 	bl	80397ec <_read_r>
 8039300:	2800      	cmp	r0, #0
 8039302:	bfab      	itete	ge
 8039304:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8039306:	89a3      	ldrhlt	r3, [r4, #12]
 8039308:	181b      	addge	r3, r3, r0
 803930a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 803930e:	bfac      	ite	ge
 8039310:	6563      	strge	r3, [r4, #84]	; 0x54
 8039312:	81a3      	strhlt	r3, [r4, #12]
 8039314:	bd10      	pop	{r4, pc}

08039316 <__swrite>:
 8039316:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 803931a:	461f      	mov	r7, r3
 803931c:	898b      	ldrh	r3, [r1, #12]
 803931e:	05db      	lsls	r3, r3, #23
 8039320:	4605      	mov	r5, r0
 8039322:	460c      	mov	r4, r1
 8039324:	4616      	mov	r6, r2
 8039326:	d505      	bpl.n	8039334 <__swrite+0x1e>
 8039328:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 803932c:	2302      	movs	r3, #2
 803932e:	2200      	movs	r2, #0
 8039330:	f000 f9d8 	bl	80396e4 <_lseek_r>
 8039334:	89a3      	ldrh	r3, [r4, #12]
 8039336:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 803933a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 803933e:	81a3      	strh	r3, [r4, #12]
 8039340:	4632      	mov	r2, r6
 8039342:	463b      	mov	r3, r7
 8039344:	4628      	mov	r0, r5
 8039346:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 803934a:	f000 b871 	b.w	8039430 <_write_r>

0803934e <__sseek>:
 803934e:	b510      	push	{r4, lr}
 8039350:	460c      	mov	r4, r1
 8039352:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8039356:	f000 f9c5 	bl	80396e4 <_lseek_r>
 803935a:	1c43      	adds	r3, r0, #1
 803935c:	89a3      	ldrh	r3, [r4, #12]
 803935e:	bf15      	itete	ne
 8039360:	6560      	strne	r0, [r4, #84]	; 0x54
 8039362:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8039366:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 803936a:	81a3      	strheq	r3, [r4, #12]
 803936c:	bf18      	it	ne
 803936e:	81a3      	strhne	r3, [r4, #12]
 8039370:	bd10      	pop	{r4, pc}

08039372 <__sclose>:
 8039372:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8039376:	f000 b8e3 	b.w	8039540 <_close_r>

0803937a <strcpy>:
 803937a:	4603      	mov	r3, r0
 803937c:	f811 2b01 	ldrb.w	r2, [r1], #1
 8039380:	f803 2b01 	strb.w	r2, [r3], #1
 8039384:	2a00      	cmp	r2, #0
 8039386:	d1f9      	bne.n	803937c <strcpy+0x2>
 8039388:	4770      	bx	lr
	...

0803938c <__swbuf_r>:
 803938c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 803938e:	460e      	mov	r6, r1
 8039390:	4614      	mov	r4, r2
 8039392:	4605      	mov	r5, r0
 8039394:	b118      	cbz	r0, 803939e <__swbuf_r+0x12>
 8039396:	6983      	ldr	r3, [r0, #24]
 8039398:	b90b      	cbnz	r3, 803939e <__swbuf_r+0x12>
 803939a:	f7ff f973 	bl	8038684 <__sinit>
 803939e:	4b21      	ldr	r3, [pc, #132]	; (8039424 <__swbuf_r+0x98>)
 80393a0:	429c      	cmp	r4, r3
 80393a2:	d12b      	bne.n	80393fc <__swbuf_r+0x70>
 80393a4:	686c      	ldr	r4, [r5, #4]
 80393a6:	69a3      	ldr	r3, [r4, #24]
 80393a8:	60a3      	str	r3, [r4, #8]
 80393aa:	89a3      	ldrh	r3, [r4, #12]
 80393ac:	071a      	lsls	r2, r3, #28
 80393ae:	d52f      	bpl.n	8039410 <__swbuf_r+0x84>
 80393b0:	6923      	ldr	r3, [r4, #16]
 80393b2:	b36b      	cbz	r3, 8039410 <__swbuf_r+0x84>
 80393b4:	6923      	ldr	r3, [r4, #16]
 80393b6:	6820      	ldr	r0, [r4, #0]
 80393b8:	1ac0      	subs	r0, r0, r3
 80393ba:	6963      	ldr	r3, [r4, #20]
 80393bc:	b2f6      	uxtb	r6, r6
 80393be:	4283      	cmp	r3, r0
 80393c0:	4637      	mov	r7, r6
 80393c2:	dc04      	bgt.n	80393ce <__swbuf_r+0x42>
 80393c4:	4621      	mov	r1, r4
 80393c6:	4628      	mov	r0, r5
 80393c8:	f000 f950 	bl	803966c <_fflush_r>
 80393cc:	bb30      	cbnz	r0, 803941c <__swbuf_r+0x90>
 80393ce:	68a3      	ldr	r3, [r4, #8]
 80393d0:	3b01      	subs	r3, #1
 80393d2:	60a3      	str	r3, [r4, #8]
 80393d4:	6823      	ldr	r3, [r4, #0]
 80393d6:	1c5a      	adds	r2, r3, #1
 80393d8:	6022      	str	r2, [r4, #0]
 80393da:	701e      	strb	r6, [r3, #0]
 80393dc:	6963      	ldr	r3, [r4, #20]
 80393de:	3001      	adds	r0, #1
 80393e0:	4283      	cmp	r3, r0
 80393e2:	d004      	beq.n	80393ee <__swbuf_r+0x62>
 80393e4:	89a3      	ldrh	r3, [r4, #12]
 80393e6:	07db      	lsls	r3, r3, #31
 80393e8:	d506      	bpl.n	80393f8 <__swbuf_r+0x6c>
 80393ea:	2e0a      	cmp	r6, #10
 80393ec:	d104      	bne.n	80393f8 <__swbuf_r+0x6c>
 80393ee:	4621      	mov	r1, r4
 80393f0:	4628      	mov	r0, r5
 80393f2:	f000 f93b 	bl	803966c <_fflush_r>
 80393f6:	b988      	cbnz	r0, 803941c <__swbuf_r+0x90>
 80393f8:	4638      	mov	r0, r7
 80393fa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80393fc:	4b0a      	ldr	r3, [pc, #40]	; (8039428 <__swbuf_r+0x9c>)
 80393fe:	429c      	cmp	r4, r3
 8039400:	d101      	bne.n	8039406 <__swbuf_r+0x7a>
 8039402:	68ac      	ldr	r4, [r5, #8]
 8039404:	e7cf      	b.n	80393a6 <__swbuf_r+0x1a>
 8039406:	4b09      	ldr	r3, [pc, #36]	; (803942c <__swbuf_r+0xa0>)
 8039408:	429c      	cmp	r4, r3
 803940a:	bf08      	it	eq
 803940c:	68ec      	ldreq	r4, [r5, #12]
 803940e:	e7ca      	b.n	80393a6 <__swbuf_r+0x1a>
 8039410:	4621      	mov	r1, r4
 8039412:	4628      	mov	r0, r5
 8039414:	f000 f81e 	bl	8039454 <__swsetup_r>
 8039418:	2800      	cmp	r0, #0
 803941a:	d0cb      	beq.n	80393b4 <__swbuf_r+0x28>
 803941c:	f04f 37ff 	mov.w	r7, #4294967295
 8039420:	e7ea      	b.n	80393f8 <__swbuf_r+0x6c>
 8039422:	bf00      	nop
 8039424:	0803d6a4 	.word	0x0803d6a4
 8039428:	0803d6c4 	.word	0x0803d6c4
 803942c:	0803d684 	.word	0x0803d684

08039430 <_write_r>:
 8039430:	b538      	push	{r3, r4, r5, lr}
 8039432:	4d07      	ldr	r5, [pc, #28]	; (8039450 <_write_r+0x20>)
 8039434:	4604      	mov	r4, r0
 8039436:	4608      	mov	r0, r1
 8039438:	4611      	mov	r1, r2
 803943a:	2200      	movs	r2, #0
 803943c:	602a      	str	r2, [r5, #0]
 803943e:	461a      	mov	r2, r3
 8039440:	f7e7 fc43 	bl	8020cca <_write>
 8039444:	1c43      	adds	r3, r0, #1
 8039446:	d102      	bne.n	803944e <_write_r+0x1e>
 8039448:	682b      	ldr	r3, [r5, #0]
 803944a:	b103      	cbz	r3, 803944e <_write_r+0x1e>
 803944c:	6023      	str	r3, [r4, #0]
 803944e:	bd38      	pop	{r3, r4, r5, pc}
 8039450:	2000f06c 	.word	0x2000f06c

08039454 <__swsetup_r>:
 8039454:	4b32      	ldr	r3, [pc, #200]	; (8039520 <__swsetup_r+0xcc>)
 8039456:	b570      	push	{r4, r5, r6, lr}
 8039458:	681d      	ldr	r5, [r3, #0]
 803945a:	4606      	mov	r6, r0
 803945c:	460c      	mov	r4, r1
 803945e:	b125      	cbz	r5, 803946a <__swsetup_r+0x16>
 8039460:	69ab      	ldr	r3, [r5, #24]
 8039462:	b913      	cbnz	r3, 803946a <__swsetup_r+0x16>
 8039464:	4628      	mov	r0, r5
 8039466:	f7ff f90d 	bl	8038684 <__sinit>
 803946a:	4b2e      	ldr	r3, [pc, #184]	; (8039524 <__swsetup_r+0xd0>)
 803946c:	429c      	cmp	r4, r3
 803946e:	d10f      	bne.n	8039490 <__swsetup_r+0x3c>
 8039470:	686c      	ldr	r4, [r5, #4]
 8039472:	89a3      	ldrh	r3, [r4, #12]
 8039474:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8039478:	0719      	lsls	r1, r3, #28
 803947a:	d42c      	bmi.n	80394d6 <__swsetup_r+0x82>
 803947c:	06dd      	lsls	r5, r3, #27
 803947e:	d411      	bmi.n	80394a4 <__swsetup_r+0x50>
 8039480:	2309      	movs	r3, #9
 8039482:	6033      	str	r3, [r6, #0]
 8039484:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8039488:	81a3      	strh	r3, [r4, #12]
 803948a:	f04f 30ff 	mov.w	r0, #4294967295
 803948e:	e03e      	b.n	803950e <__swsetup_r+0xba>
 8039490:	4b25      	ldr	r3, [pc, #148]	; (8039528 <__swsetup_r+0xd4>)
 8039492:	429c      	cmp	r4, r3
 8039494:	d101      	bne.n	803949a <__swsetup_r+0x46>
 8039496:	68ac      	ldr	r4, [r5, #8]
 8039498:	e7eb      	b.n	8039472 <__swsetup_r+0x1e>
 803949a:	4b24      	ldr	r3, [pc, #144]	; (803952c <__swsetup_r+0xd8>)
 803949c:	429c      	cmp	r4, r3
 803949e:	bf08      	it	eq
 80394a0:	68ec      	ldreq	r4, [r5, #12]
 80394a2:	e7e6      	b.n	8039472 <__swsetup_r+0x1e>
 80394a4:	0758      	lsls	r0, r3, #29
 80394a6:	d512      	bpl.n	80394ce <__swsetup_r+0x7a>
 80394a8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80394aa:	b141      	cbz	r1, 80394be <__swsetup_r+0x6a>
 80394ac:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80394b0:	4299      	cmp	r1, r3
 80394b2:	d002      	beq.n	80394ba <__swsetup_r+0x66>
 80394b4:	4630      	mov	r0, r6
 80394b6:	f7ff fa09 	bl	80388cc <_free_r>
 80394ba:	2300      	movs	r3, #0
 80394bc:	6363      	str	r3, [r4, #52]	; 0x34
 80394be:	89a3      	ldrh	r3, [r4, #12]
 80394c0:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80394c4:	81a3      	strh	r3, [r4, #12]
 80394c6:	2300      	movs	r3, #0
 80394c8:	6063      	str	r3, [r4, #4]
 80394ca:	6923      	ldr	r3, [r4, #16]
 80394cc:	6023      	str	r3, [r4, #0]
 80394ce:	89a3      	ldrh	r3, [r4, #12]
 80394d0:	f043 0308 	orr.w	r3, r3, #8
 80394d4:	81a3      	strh	r3, [r4, #12]
 80394d6:	6923      	ldr	r3, [r4, #16]
 80394d8:	b94b      	cbnz	r3, 80394ee <__swsetup_r+0x9a>
 80394da:	89a3      	ldrh	r3, [r4, #12]
 80394dc:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80394e0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80394e4:	d003      	beq.n	80394ee <__swsetup_r+0x9a>
 80394e6:	4621      	mov	r1, r4
 80394e8:	4630      	mov	r0, r6
 80394ea:	f000 f933 	bl	8039754 <__smakebuf_r>
 80394ee:	89a0      	ldrh	r0, [r4, #12]
 80394f0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80394f4:	f010 0301 	ands.w	r3, r0, #1
 80394f8:	d00a      	beq.n	8039510 <__swsetup_r+0xbc>
 80394fa:	2300      	movs	r3, #0
 80394fc:	60a3      	str	r3, [r4, #8]
 80394fe:	6963      	ldr	r3, [r4, #20]
 8039500:	425b      	negs	r3, r3
 8039502:	61a3      	str	r3, [r4, #24]
 8039504:	6923      	ldr	r3, [r4, #16]
 8039506:	b943      	cbnz	r3, 803951a <__swsetup_r+0xc6>
 8039508:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 803950c:	d1ba      	bne.n	8039484 <__swsetup_r+0x30>
 803950e:	bd70      	pop	{r4, r5, r6, pc}
 8039510:	0781      	lsls	r1, r0, #30
 8039512:	bf58      	it	pl
 8039514:	6963      	ldrpl	r3, [r4, #20]
 8039516:	60a3      	str	r3, [r4, #8]
 8039518:	e7f4      	b.n	8039504 <__swsetup_r+0xb0>
 803951a:	2000      	movs	r0, #0
 803951c:	e7f7      	b.n	803950e <__swsetup_r+0xba>
 803951e:	bf00      	nop
 8039520:	20000034 	.word	0x20000034
 8039524:	0803d6a4 	.word	0x0803d6a4
 8039528:	0803d6c4 	.word	0x0803d6c4
 803952c:	0803d684 	.word	0x0803d684

08039530 <abort>:
 8039530:	b508      	push	{r3, lr}
 8039532:	2006      	movs	r0, #6
 8039534:	f000 f994 	bl	8039860 <raise>
 8039538:	2001      	movs	r0, #1
 803953a:	f7e7 fb9f 	bl	8020c7c <_exit>
	...

08039540 <_close_r>:
 8039540:	b538      	push	{r3, r4, r5, lr}
 8039542:	4d06      	ldr	r5, [pc, #24]	; (803955c <_close_r+0x1c>)
 8039544:	2300      	movs	r3, #0
 8039546:	4604      	mov	r4, r0
 8039548:	4608      	mov	r0, r1
 803954a:	602b      	str	r3, [r5, #0]
 803954c:	f7e7 fbd9 	bl	8020d02 <_close>
 8039550:	1c43      	adds	r3, r0, #1
 8039552:	d102      	bne.n	803955a <_close_r+0x1a>
 8039554:	682b      	ldr	r3, [r5, #0]
 8039556:	b103      	cbz	r3, 803955a <_close_r+0x1a>
 8039558:	6023      	str	r3, [r4, #0]
 803955a:	bd38      	pop	{r3, r4, r5, pc}
 803955c:	2000f06c 	.word	0x2000f06c

08039560 <__sflush_r>:
 8039560:	898a      	ldrh	r2, [r1, #12]
 8039562:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8039566:	4605      	mov	r5, r0
 8039568:	0710      	lsls	r0, r2, #28
 803956a:	460c      	mov	r4, r1
 803956c:	d458      	bmi.n	8039620 <__sflush_r+0xc0>
 803956e:	684b      	ldr	r3, [r1, #4]
 8039570:	2b00      	cmp	r3, #0
 8039572:	dc05      	bgt.n	8039580 <__sflush_r+0x20>
 8039574:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8039576:	2b00      	cmp	r3, #0
 8039578:	dc02      	bgt.n	8039580 <__sflush_r+0x20>
 803957a:	2000      	movs	r0, #0
 803957c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8039580:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8039582:	2e00      	cmp	r6, #0
 8039584:	d0f9      	beq.n	803957a <__sflush_r+0x1a>
 8039586:	2300      	movs	r3, #0
 8039588:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 803958c:	682f      	ldr	r7, [r5, #0]
 803958e:	602b      	str	r3, [r5, #0]
 8039590:	d032      	beq.n	80395f8 <__sflush_r+0x98>
 8039592:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8039594:	89a3      	ldrh	r3, [r4, #12]
 8039596:	075a      	lsls	r2, r3, #29
 8039598:	d505      	bpl.n	80395a6 <__sflush_r+0x46>
 803959a:	6863      	ldr	r3, [r4, #4]
 803959c:	1ac0      	subs	r0, r0, r3
 803959e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80395a0:	b10b      	cbz	r3, 80395a6 <__sflush_r+0x46>
 80395a2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80395a4:	1ac0      	subs	r0, r0, r3
 80395a6:	2300      	movs	r3, #0
 80395a8:	4602      	mov	r2, r0
 80395aa:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80395ac:	6a21      	ldr	r1, [r4, #32]
 80395ae:	4628      	mov	r0, r5
 80395b0:	47b0      	blx	r6
 80395b2:	1c43      	adds	r3, r0, #1
 80395b4:	89a3      	ldrh	r3, [r4, #12]
 80395b6:	d106      	bne.n	80395c6 <__sflush_r+0x66>
 80395b8:	6829      	ldr	r1, [r5, #0]
 80395ba:	291d      	cmp	r1, #29
 80395bc:	d82c      	bhi.n	8039618 <__sflush_r+0xb8>
 80395be:	4a2a      	ldr	r2, [pc, #168]	; (8039668 <__sflush_r+0x108>)
 80395c0:	40ca      	lsrs	r2, r1
 80395c2:	07d6      	lsls	r6, r2, #31
 80395c4:	d528      	bpl.n	8039618 <__sflush_r+0xb8>
 80395c6:	2200      	movs	r2, #0
 80395c8:	6062      	str	r2, [r4, #4]
 80395ca:	04d9      	lsls	r1, r3, #19
 80395cc:	6922      	ldr	r2, [r4, #16]
 80395ce:	6022      	str	r2, [r4, #0]
 80395d0:	d504      	bpl.n	80395dc <__sflush_r+0x7c>
 80395d2:	1c42      	adds	r2, r0, #1
 80395d4:	d101      	bne.n	80395da <__sflush_r+0x7a>
 80395d6:	682b      	ldr	r3, [r5, #0]
 80395d8:	b903      	cbnz	r3, 80395dc <__sflush_r+0x7c>
 80395da:	6560      	str	r0, [r4, #84]	; 0x54
 80395dc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80395de:	602f      	str	r7, [r5, #0]
 80395e0:	2900      	cmp	r1, #0
 80395e2:	d0ca      	beq.n	803957a <__sflush_r+0x1a>
 80395e4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80395e8:	4299      	cmp	r1, r3
 80395ea:	d002      	beq.n	80395f2 <__sflush_r+0x92>
 80395ec:	4628      	mov	r0, r5
 80395ee:	f7ff f96d 	bl	80388cc <_free_r>
 80395f2:	2000      	movs	r0, #0
 80395f4:	6360      	str	r0, [r4, #52]	; 0x34
 80395f6:	e7c1      	b.n	803957c <__sflush_r+0x1c>
 80395f8:	6a21      	ldr	r1, [r4, #32]
 80395fa:	2301      	movs	r3, #1
 80395fc:	4628      	mov	r0, r5
 80395fe:	47b0      	blx	r6
 8039600:	1c41      	adds	r1, r0, #1
 8039602:	d1c7      	bne.n	8039594 <__sflush_r+0x34>
 8039604:	682b      	ldr	r3, [r5, #0]
 8039606:	2b00      	cmp	r3, #0
 8039608:	d0c4      	beq.n	8039594 <__sflush_r+0x34>
 803960a:	2b1d      	cmp	r3, #29
 803960c:	d001      	beq.n	8039612 <__sflush_r+0xb2>
 803960e:	2b16      	cmp	r3, #22
 8039610:	d101      	bne.n	8039616 <__sflush_r+0xb6>
 8039612:	602f      	str	r7, [r5, #0]
 8039614:	e7b1      	b.n	803957a <__sflush_r+0x1a>
 8039616:	89a3      	ldrh	r3, [r4, #12]
 8039618:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 803961c:	81a3      	strh	r3, [r4, #12]
 803961e:	e7ad      	b.n	803957c <__sflush_r+0x1c>
 8039620:	690f      	ldr	r7, [r1, #16]
 8039622:	2f00      	cmp	r7, #0
 8039624:	d0a9      	beq.n	803957a <__sflush_r+0x1a>
 8039626:	0793      	lsls	r3, r2, #30
 8039628:	680e      	ldr	r6, [r1, #0]
 803962a:	bf08      	it	eq
 803962c:	694b      	ldreq	r3, [r1, #20]
 803962e:	600f      	str	r7, [r1, #0]
 8039630:	bf18      	it	ne
 8039632:	2300      	movne	r3, #0
 8039634:	eba6 0807 	sub.w	r8, r6, r7
 8039638:	608b      	str	r3, [r1, #8]
 803963a:	f1b8 0f00 	cmp.w	r8, #0
 803963e:	dd9c      	ble.n	803957a <__sflush_r+0x1a>
 8039640:	6a21      	ldr	r1, [r4, #32]
 8039642:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8039644:	4643      	mov	r3, r8
 8039646:	463a      	mov	r2, r7
 8039648:	4628      	mov	r0, r5
 803964a:	47b0      	blx	r6
 803964c:	2800      	cmp	r0, #0
 803964e:	dc06      	bgt.n	803965e <__sflush_r+0xfe>
 8039650:	89a3      	ldrh	r3, [r4, #12]
 8039652:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8039656:	81a3      	strh	r3, [r4, #12]
 8039658:	f04f 30ff 	mov.w	r0, #4294967295
 803965c:	e78e      	b.n	803957c <__sflush_r+0x1c>
 803965e:	4407      	add	r7, r0
 8039660:	eba8 0800 	sub.w	r8, r8, r0
 8039664:	e7e9      	b.n	803963a <__sflush_r+0xda>
 8039666:	bf00      	nop
 8039668:	20400001 	.word	0x20400001

0803966c <_fflush_r>:
 803966c:	b538      	push	{r3, r4, r5, lr}
 803966e:	690b      	ldr	r3, [r1, #16]
 8039670:	4605      	mov	r5, r0
 8039672:	460c      	mov	r4, r1
 8039674:	b913      	cbnz	r3, 803967c <_fflush_r+0x10>
 8039676:	2500      	movs	r5, #0
 8039678:	4628      	mov	r0, r5
 803967a:	bd38      	pop	{r3, r4, r5, pc}
 803967c:	b118      	cbz	r0, 8039686 <_fflush_r+0x1a>
 803967e:	6983      	ldr	r3, [r0, #24]
 8039680:	b90b      	cbnz	r3, 8039686 <_fflush_r+0x1a>
 8039682:	f7fe ffff 	bl	8038684 <__sinit>
 8039686:	4b14      	ldr	r3, [pc, #80]	; (80396d8 <_fflush_r+0x6c>)
 8039688:	429c      	cmp	r4, r3
 803968a:	d11b      	bne.n	80396c4 <_fflush_r+0x58>
 803968c:	686c      	ldr	r4, [r5, #4]
 803968e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8039692:	2b00      	cmp	r3, #0
 8039694:	d0ef      	beq.n	8039676 <_fflush_r+0xa>
 8039696:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8039698:	07d0      	lsls	r0, r2, #31
 803969a:	d404      	bmi.n	80396a6 <_fflush_r+0x3a>
 803969c:	0599      	lsls	r1, r3, #22
 803969e:	d402      	bmi.n	80396a6 <_fflush_r+0x3a>
 80396a0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80396a2:	f7ff f8c4 	bl	803882e <__retarget_lock_acquire_recursive>
 80396a6:	4628      	mov	r0, r5
 80396a8:	4621      	mov	r1, r4
 80396aa:	f7ff ff59 	bl	8039560 <__sflush_r>
 80396ae:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80396b0:	07da      	lsls	r2, r3, #31
 80396b2:	4605      	mov	r5, r0
 80396b4:	d4e0      	bmi.n	8039678 <_fflush_r+0xc>
 80396b6:	89a3      	ldrh	r3, [r4, #12]
 80396b8:	059b      	lsls	r3, r3, #22
 80396ba:	d4dd      	bmi.n	8039678 <_fflush_r+0xc>
 80396bc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80396be:	f7ff f8b7 	bl	8038830 <__retarget_lock_release_recursive>
 80396c2:	e7d9      	b.n	8039678 <_fflush_r+0xc>
 80396c4:	4b05      	ldr	r3, [pc, #20]	; (80396dc <_fflush_r+0x70>)
 80396c6:	429c      	cmp	r4, r3
 80396c8:	d101      	bne.n	80396ce <_fflush_r+0x62>
 80396ca:	68ac      	ldr	r4, [r5, #8]
 80396cc:	e7df      	b.n	803968e <_fflush_r+0x22>
 80396ce:	4b04      	ldr	r3, [pc, #16]	; (80396e0 <_fflush_r+0x74>)
 80396d0:	429c      	cmp	r4, r3
 80396d2:	bf08      	it	eq
 80396d4:	68ec      	ldreq	r4, [r5, #12]
 80396d6:	e7da      	b.n	803968e <_fflush_r+0x22>
 80396d8:	0803d6a4 	.word	0x0803d6a4
 80396dc:	0803d6c4 	.word	0x0803d6c4
 80396e0:	0803d684 	.word	0x0803d684

080396e4 <_lseek_r>:
 80396e4:	b538      	push	{r3, r4, r5, lr}
 80396e6:	4d07      	ldr	r5, [pc, #28]	; (8039704 <_lseek_r+0x20>)
 80396e8:	4604      	mov	r4, r0
 80396ea:	4608      	mov	r0, r1
 80396ec:	4611      	mov	r1, r2
 80396ee:	2200      	movs	r2, #0
 80396f0:	602a      	str	r2, [r5, #0]
 80396f2:	461a      	mov	r2, r3
 80396f4:	f7e7 fb2c 	bl	8020d50 <_lseek>
 80396f8:	1c43      	adds	r3, r0, #1
 80396fa:	d102      	bne.n	8039702 <_lseek_r+0x1e>
 80396fc:	682b      	ldr	r3, [r5, #0]
 80396fe:	b103      	cbz	r3, 8039702 <_lseek_r+0x1e>
 8039700:	6023      	str	r3, [r4, #0]
 8039702:	bd38      	pop	{r3, r4, r5, pc}
 8039704:	2000f06c 	.word	0x2000f06c

08039708 <__swhatbuf_r>:
 8039708:	b570      	push	{r4, r5, r6, lr}
 803970a:	460e      	mov	r6, r1
 803970c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8039710:	2900      	cmp	r1, #0
 8039712:	b096      	sub	sp, #88	; 0x58
 8039714:	4614      	mov	r4, r2
 8039716:	461d      	mov	r5, r3
 8039718:	da08      	bge.n	803972c <__swhatbuf_r+0x24>
 803971a:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 803971e:	2200      	movs	r2, #0
 8039720:	602a      	str	r2, [r5, #0]
 8039722:	061a      	lsls	r2, r3, #24
 8039724:	d410      	bmi.n	8039748 <__swhatbuf_r+0x40>
 8039726:	f44f 6380 	mov.w	r3, #1024	; 0x400
 803972a:	e00e      	b.n	803974a <__swhatbuf_r+0x42>
 803972c:	466a      	mov	r2, sp
 803972e:	f000 f8b3 	bl	8039898 <_fstat_r>
 8039732:	2800      	cmp	r0, #0
 8039734:	dbf1      	blt.n	803971a <__swhatbuf_r+0x12>
 8039736:	9a01      	ldr	r2, [sp, #4]
 8039738:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 803973c:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8039740:	425a      	negs	r2, r3
 8039742:	415a      	adcs	r2, r3
 8039744:	602a      	str	r2, [r5, #0]
 8039746:	e7ee      	b.n	8039726 <__swhatbuf_r+0x1e>
 8039748:	2340      	movs	r3, #64	; 0x40
 803974a:	2000      	movs	r0, #0
 803974c:	6023      	str	r3, [r4, #0]
 803974e:	b016      	add	sp, #88	; 0x58
 8039750:	bd70      	pop	{r4, r5, r6, pc}
	...

08039754 <__smakebuf_r>:
 8039754:	898b      	ldrh	r3, [r1, #12]
 8039756:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8039758:	079d      	lsls	r5, r3, #30
 803975a:	4606      	mov	r6, r0
 803975c:	460c      	mov	r4, r1
 803975e:	d507      	bpl.n	8039770 <__smakebuf_r+0x1c>
 8039760:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8039764:	6023      	str	r3, [r4, #0]
 8039766:	6123      	str	r3, [r4, #16]
 8039768:	2301      	movs	r3, #1
 803976a:	6163      	str	r3, [r4, #20]
 803976c:	b002      	add	sp, #8
 803976e:	bd70      	pop	{r4, r5, r6, pc}
 8039770:	ab01      	add	r3, sp, #4
 8039772:	466a      	mov	r2, sp
 8039774:	f7ff ffc8 	bl	8039708 <__swhatbuf_r>
 8039778:	9900      	ldr	r1, [sp, #0]
 803977a:	4605      	mov	r5, r0
 803977c:	4630      	mov	r0, r6
 803977e:	f7ff f911 	bl	80389a4 <_malloc_r>
 8039782:	b948      	cbnz	r0, 8039798 <__smakebuf_r+0x44>
 8039784:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8039788:	059a      	lsls	r2, r3, #22
 803978a:	d4ef      	bmi.n	803976c <__smakebuf_r+0x18>
 803978c:	f023 0303 	bic.w	r3, r3, #3
 8039790:	f043 0302 	orr.w	r3, r3, #2
 8039794:	81a3      	strh	r3, [r4, #12]
 8039796:	e7e3      	b.n	8039760 <__smakebuf_r+0xc>
 8039798:	4b0d      	ldr	r3, [pc, #52]	; (80397d0 <__smakebuf_r+0x7c>)
 803979a:	62b3      	str	r3, [r6, #40]	; 0x28
 803979c:	89a3      	ldrh	r3, [r4, #12]
 803979e:	6020      	str	r0, [r4, #0]
 80397a0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80397a4:	81a3      	strh	r3, [r4, #12]
 80397a6:	9b00      	ldr	r3, [sp, #0]
 80397a8:	6163      	str	r3, [r4, #20]
 80397aa:	9b01      	ldr	r3, [sp, #4]
 80397ac:	6120      	str	r0, [r4, #16]
 80397ae:	b15b      	cbz	r3, 80397c8 <__smakebuf_r+0x74>
 80397b0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80397b4:	4630      	mov	r0, r6
 80397b6:	f000 f881 	bl	80398bc <_isatty_r>
 80397ba:	b128      	cbz	r0, 80397c8 <__smakebuf_r+0x74>
 80397bc:	89a3      	ldrh	r3, [r4, #12]
 80397be:	f023 0303 	bic.w	r3, r3, #3
 80397c2:	f043 0301 	orr.w	r3, r3, #1
 80397c6:	81a3      	strh	r3, [r4, #12]
 80397c8:	89a0      	ldrh	r0, [r4, #12]
 80397ca:	4305      	orrs	r5, r0
 80397cc:	81a5      	strh	r5, [r4, #12]
 80397ce:	e7cd      	b.n	803976c <__smakebuf_r+0x18>
 80397d0:	0803861d 	.word	0x0803861d

080397d4 <__malloc_lock>:
 80397d4:	4801      	ldr	r0, [pc, #4]	; (80397dc <__malloc_lock+0x8>)
 80397d6:	f7ff b82a 	b.w	803882e <__retarget_lock_acquire_recursive>
 80397da:	bf00      	nop
 80397dc:	2000f060 	.word	0x2000f060

080397e0 <__malloc_unlock>:
 80397e0:	4801      	ldr	r0, [pc, #4]	; (80397e8 <__malloc_unlock+0x8>)
 80397e2:	f7ff b825 	b.w	8038830 <__retarget_lock_release_recursive>
 80397e6:	bf00      	nop
 80397e8:	2000f060 	.word	0x2000f060

080397ec <_read_r>:
 80397ec:	b538      	push	{r3, r4, r5, lr}
 80397ee:	4d07      	ldr	r5, [pc, #28]	; (803980c <_read_r+0x20>)
 80397f0:	4604      	mov	r4, r0
 80397f2:	4608      	mov	r0, r1
 80397f4:	4611      	mov	r1, r2
 80397f6:	2200      	movs	r2, #0
 80397f8:	602a      	str	r2, [r5, #0]
 80397fa:	461a      	mov	r2, r3
 80397fc:	f7e7 fa48 	bl	8020c90 <_read>
 8039800:	1c43      	adds	r3, r0, #1
 8039802:	d102      	bne.n	803980a <_read_r+0x1e>
 8039804:	682b      	ldr	r3, [r5, #0]
 8039806:	b103      	cbz	r3, 803980a <_read_r+0x1e>
 8039808:	6023      	str	r3, [r4, #0]
 803980a:	bd38      	pop	{r3, r4, r5, pc}
 803980c:	2000f06c 	.word	0x2000f06c

08039810 <_raise_r>:
 8039810:	291f      	cmp	r1, #31
 8039812:	b538      	push	{r3, r4, r5, lr}
 8039814:	4604      	mov	r4, r0
 8039816:	460d      	mov	r5, r1
 8039818:	d904      	bls.n	8039824 <_raise_r+0x14>
 803981a:	2316      	movs	r3, #22
 803981c:	6003      	str	r3, [r0, #0]
 803981e:	f04f 30ff 	mov.w	r0, #4294967295
 8039822:	bd38      	pop	{r3, r4, r5, pc}
 8039824:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8039826:	b112      	cbz	r2, 803982e <_raise_r+0x1e>
 8039828:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 803982c:	b94b      	cbnz	r3, 8039842 <_raise_r+0x32>
 803982e:	4620      	mov	r0, r4
 8039830:	f000 f830 	bl	8039894 <_getpid_r>
 8039834:	462a      	mov	r2, r5
 8039836:	4601      	mov	r1, r0
 8039838:	4620      	mov	r0, r4
 803983a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 803983e:	f000 b817 	b.w	8039870 <_kill_r>
 8039842:	2b01      	cmp	r3, #1
 8039844:	d00a      	beq.n	803985c <_raise_r+0x4c>
 8039846:	1c59      	adds	r1, r3, #1
 8039848:	d103      	bne.n	8039852 <_raise_r+0x42>
 803984a:	2316      	movs	r3, #22
 803984c:	6003      	str	r3, [r0, #0]
 803984e:	2001      	movs	r0, #1
 8039850:	e7e7      	b.n	8039822 <_raise_r+0x12>
 8039852:	2400      	movs	r4, #0
 8039854:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8039858:	4628      	mov	r0, r5
 803985a:	4798      	blx	r3
 803985c:	2000      	movs	r0, #0
 803985e:	e7e0      	b.n	8039822 <_raise_r+0x12>

08039860 <raise>:
 8039860:	4b02      	ldr	r3, [pc, #8]	; (803986c <raise+0xc>)
 8039862:	4601      	mov	r1, r0
 8039864:	6818      	ldr	r0, [r3, #0]
 8039866:	f7ff bfd3 	b.w	8039810 <_raise_r>
 803986a:	bf00      	nop
 803986c:	20000034 	.word	0x20000034

08039870 <_kill_r>:
 8039870:	b538      	push	{r3, r4, r5, lr}
 8039872:	4d07      	ldr	r5, [pc, #28]	; (8039890 <_kill_r+0x20>)
 8039874:	2300      	movs	r3, #0
 8039876:	4604      	mov	r4, r0
 8039878:	4608      	mov	r0, r1
 803987a:	4611      	mov	r1, r2
 803987c:	602b      	str	r3, [r5, #0]
 803987e:	f7e7 f9eb 	bl	8020c58 <_kill>
 8039882:	1c43      	adds	r3, r0, #1
 8039884:	d102      	bne.n	803988c <_kill_r+0x1c>
 8039886:	682b      	ldr	r3, [r5, #0]
 8039888:	b103      	cbz	r3, 803988c <_kill_r+0x1c>
 803988a:	6023      	str	r3, [r4, #0]
 803988c:	bd38      	pop	{r3, r4, r5, pc}
 803988e:	bf00      	nop
 8039890:	2000f06c 	.word	0x2000f06c

08039894 <_getpid_r>:
 8039894:	f7e7 b9d8 	b.w	8020c48 <_getpid>

08039898 <_fstat_r>:
 8039898:	b538      	push	{r3, r4, r5, lr}
 803989a:	4d07      	ldr	r5, [pc, #28]	; (80398b8 <_fstat_r+0x20>)
 803989c:	2300      	movs	r3, #0
 803989e:	4604      	mov	r4, r0
 80398a0:	4608      	mov	r0, r1
 80398a2:	4611      	mov	r1, r2
 80398a4:	602b      	str	r3, [r5, #0]
 80398a6:	f7e7 fa38 	bl	8020d1a <_fstat>
 80398aa:	1c43      	adds	r3, r0, #1
 80398ac:	d102      	bne.n	80398b4 <_fstat_r+0x1c>
 80398ae:	682b      	ldr	r3, [r5, #0]
 80398b0:	b103      	cbz	r3, 80398b4 <_fstat_r+0x1c>
 80398b2:	6023      	str	r3, [r4, #0]
 80398b4:	bd38      	pop	{r3, r4, r5, pc}
 80398b6:	bf00      	nop
 80398b8:	2000f06c 	.word	0x2000f06c

080398bc <_isatty_r>:
 80398bc:	b538      	push	{r3, r4, r5, lr}
 80398be:	4d06      	ldr	r5, [pc, #24]	; (80398d8 <_isatty_r+0x1c>)
 80398c0:	2300      	movs	r3, #0
 80398c2:	4604      	mov	r4, r0
 80398c4:	4608      	mov	r0, r1
 80398c6:	602b      	str	r3, [r5, #0]
 80398c8:	f7e7 fa37 	bl	8020d3a <_isatty>
 80398cc:	1c43      	adds	r3, r0, #1
 80398ce:	d102      	bne.n	80398d6 <_isatty_r+0x1a>
 80398d0:	682b      	ldr	r3, [r5, #0]
 80398d2:	b103      	cbz	r3, 80398d6 <_isatty_r+0x1a>
 80398d4:	6023      	str	r3, [r4, #0]
 80398d6:	bd38      	pop	{r3, r4, r5, pc}
 80398d8:	2000f06c 	.word	0x2000f06c

080398dc <_init>:
 80398dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80398de:	bf00      	nop
 80398e0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80398e2:	bc08      	pop	{r3}
 80398e4:	469e      	mov	lr, r3
 80398e6:	4770      	bx	lr

080398e8 <_fini>:
 80398e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80398ea:	bf00      	nop
 80398ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80398ee:	bc08      	pop	{r3}
 80398f0:	469e      	mov	lr, r3
 80398f2:	4770      	bx	lr
