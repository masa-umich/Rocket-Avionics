
Bootloader.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00014648  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00002e4c  080147d8  080147d8  000247d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08017624  08017624  00030094  2**0
                  CONTENTS
  4 .ARM          00000008  08017624  08017624  00027624  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801762c  0801762c  00030094  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0801762c  0801762c  0002762c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08017630  08017630  00027630  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000094  20000000  08017634  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00030094  2**0
                  CONTENTS
 10 .bss          0000c824  20000094  20000094  00030094  2**2
                  ALLOC
 11 ._user_heap_stack 00010400  2000c8b8  2000c8b8  00030094  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00030094  2**0
                  CONTENTS, READONLY
 13 .debug_info   00030924  00000000  00000000  000300c4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00007ced  00000000  00000000  000609e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00002320  00000000  00000000  000686d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00002128  00000000  00000000  0006a9f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00032903  00000000  00000000  0006cb20  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000355ed  00000000  00000000  0009f423  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000f5030  00000000  00000000  000d4a10  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  001c9a40  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00009818  00000000  00000000  001c9a90  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000094 	.word	0x20000094
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080147c0 	.word	0x080147c0

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000098 	.word	0x20000098
 80001cc:	080147c0 	.word	0x080147c0

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295
 8000280:	f04f 30ff 	movne.w	r0, #4294967295
 8000284:	f000 b974 	b.w	8000570 <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	9d08      	ldr	r5, [sp, #32]
 80002a6:	4604      	mov	r4, r0
 80002a8:	468e      	mov	lr, r1
 80002aa:	2b00      	cmp	r3, #0
 80002ac:	d14d      	bne.n	800034a <__udivmoddi4+0xaa>
 80002ae:	428a      	cmp	r2, r1
 80002b0:	4694      	mov	ip, r2
 80002b2:	d969      	bls.n	8000388 <__udivmoddi4+0xe8>
 80002b4:	fab2 f282 	clz	r2, r2
 80002b8:	b152      	cbz	r2, 80002d0 <__udivmoddi4+0x30>
 80002ba:	fa01 f302 	lsl.w	r3, r1, r2
 80002be:	f1c2 0120 	rsb	r1, r2, #32
 80002c2:	fa20 f101 	lsr.w	r1, r0, r1
 80002c6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002ca:	ea41 0e03 	orr.w	lr, r1, r3
 80002ce:	4094      	lsls	r4, r2
 80002d0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002d4:	0c21      	lsrs	r1, r4, #16
 80002d6:	fbbe f6f8 	udiv	r6, lr, r8
 80002da:	fa1f f78c 	uxth.w	r7, ip
 80002de:	fb08 e316 	mls	r3, r8, r6, lr
 80002e2:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80002e6:	fb06 f107 	mul.w	r1, r6, r7
 80002ea:	4299      	cmp	r1, r3
 80002ec:	d90a      	bls.n	8000304 <__udivmoddi4+0x64>
 80002ee:	eb1c 0303 	adds.w	r3, ip, r3
 80002f2:	f106 30ff 	add.w	r0, r6, #4294967295
 80002f6:	f080 811f 	bcs.w	8000538 <__udivmoddi4+0x298>
 80002fa:	4299      	cmp	r1, r3
 80002fc:	f240 811c 	bls.w	8000538 <__udivmoddi4+0x298>
 8000300:	3e02      	subs	r6, #2
 8000302:	4463      	add	r3, ip
 8000304:	1a5b      	subs	r3, r3, r1
 8000306:	b2a4      	uxth	r4, r4
 8000308:	fbb3 f0f8 	udiv	r0, r3, r8
 800030c:	fb08 3310 	mls	r3, r8, r0, r3
 8000310:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000314:	fb00 f707 	mul.w	r7, r0, r7
 8000318:	42a7      	cmp	r7, r4
 800031a:	d90a      	bls.n	8000332 <__udivmoddi4+0x92>
 800031c:	eb1c 0404 	adds.w	r4, ip, r4
 8000320:	f100 33ff 	add.w	r3, r0, #4294967295
 8000324:	f080 810a 	bcs.w	800053c <__udivmoddi4+0x29c>
 8000328:	42a7      	cmp	r7, r4
 800032a:	f240 8107 	bls.w	800053c <__udivmoddi4+0x29c>
 800032e:	4464      	add	r4, ip
 8000330:	3802      	subs	r0, #2
 8000332:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000336:	1be4      	subs	r4, r4, r7
 8000338:	2600      	movs	r6, #0
 800033a:	b11d      	cbz	r5, 8000344 <__udivmoddi4+0xa4>
 800033c:	40d4      	lsrs	r4, r2
 800033e:	2300      	movs	r3, #0
 8000340:	e9c5 4300 	strd	r4, r3, [r5]
 8000344:	4631      	mov	r1, r6
 8000346:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800034a:	428b      	cmp	r3, r1
 800034c:	d909      	bls.n	8000362 <__udivmoddi4+0xc2>
 800034e:	2d00      	cmp	r5, #0
 8000350:	f000 80ef 	beq.w	8000532 <__udivmoddi4+0x292>
 8000354:	2600      	movs	r6, #0
 8000356:	e9c5 0100 	strd	r0, r1, [r5]
 800035a:	4630      	mov	r0, r6
 800035c:	4631      	mov	r1, r6
 800035e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000362:	fab3 f683 	clz	r6, r3
 8000366:	2e00      	cmp	r6, #0
 8000368:	d14a      	bne.n	8000400 <__udivmoddi4+0x160>
 800036a:	428b      	cmp	r3, r1
 800036c:	d302      	bcc.n	8000374 <__udivmoddi4+0xd4>
 800036e:	4282      	cmp	r2, r0
 8000370:	f200 80f9 	bhi.w	8000566 <__udivmoddi4+0x2c6>
 8000374:	1a84      	subs	r4, r0, r2
 8000376:	eb61 0303 	sbc.w	r3, r1, r3
 800037a:	2001      	movs	r0, #1
 800037c:	469e      	mov	lr, r3
 800037e:	2d00      	cmp	r5, #0
 8000380:	d0e0      	beq.n	8000344 <__udivmoddi4+0xa4>
 8000382:	e9c5 4e00 	strd	r4, lr, [r5]
 8000386:	e7dd      	b.n	8000344 <__udivmoddi4+0xa4>
 8000388:	b902      	cbnz	r2, 800038c <__udivmoddi4+0xec>
 800038a:	deff      	udf	#255	; 0xff
 800038c:	fab2 f282 	clz	r2, r2
 8000390:	2a00      	cmp	r2, #0
 8000392:	f040 8092 	bne.w	80004ba <__udivmoddi4+0x21a>
 8000396:	eba1 010c 	sub.w	r1, r1, ip
 800039a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800039e:	fa1f fe8c 	uxth.w	lr, ip
 80003a2:	2601      	movs	r6, #1
 80003a4:	0c20      	lsrs	r0, r4, #16
 80003a6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003aa:	fb07 1113 	mls	r1, r7, r3, r1
 80003ae:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003b2:	fb0e f003 	mul.w	r0, lr, r3
 80003b6:	4288      	cmp	r0, r1
 80003b8:	d908      	bls.n	80003cc <__udivmoddi4+0x12c>
 80003ba:	eb1c 0101 	adds.w	r1, ip, r1
 80003be:	f103 38ff 	add.w	r8, r3, #4294967295
 80003c2:	d202      	bcs.n	80003ca <__udivmoddi4+0x12a>
 80003c4:	4288      	cmp	r0, r1
 80003c6:	f200 80cb 	bhi.w	8000560 <__udivmoddi4+0x2c0>
 80003ca:	4643      	mov	r3, r8
 80003cc:	1a09      	subs	r1, r1, r0
 80003ce:	b2a4      	uxth	r4, r4
 80003d0:	fbb1 f0f7 	udiv	r0, r1, r7
 80003d4:	fb07 1110 	mls	r1, r7, r0, r1
 80003d8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003dc:	fb0e fe00 	mul.w	lr, lr, r0
 80003e0:	45a6      	cmp	lr, r4
 80003e2:	d908      	bls.n	80003f6 <__udivmoddi4+0x156>
 80003e4:	eb1c 0404 	adds.w	r4, ip, r4
 80003e8:	f100 31ff 	add.w	r1, r0, #4294967295
 80003ec:	d202      	bcs.n	80003f4 <__udivmoddi4+0x154>
 80003ee:	45a6      	cmp	lr, r4
 80003f0:	f200 80bb 	bhi.w	800056a <__udivmoddi4+0x2ca>
 80003f4:	4608      	mov	r0, r1
 80003f6:	eba4 040e 	sub.w	r4, r4, lr
 80003fa:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80003fe:	e79c      	b.n	800033a <__udivmoddi4+0x9a>
 8000400:	f1c6 0720 	rsb	r7, r6, #32
 8000404:	40b3      	lsls	r3, r6
 8000406:	fa22 fc07 	lsr.w	ip, r2, r7
 800040a:	ea4c 0c03 	orr.w	ip, ip, r3
 800040e:	fa20 f407 	lsr.w	r4, r0, r7
 8000412:	fa01 f306 	lsl.w	r3, r1, r6
 8000416:	431c      	orrs	r4, r3
 8000418:	40f9      	lsrs	r1, r7
 800041a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800041e:	fa00 f306 	lsl.w	r3, r0, r6
 8000422:	fbb1 f8f9 	udiv	r8, r1, r9
 8000426:	0c20      	lsrs	r0, r4, #16
 8000428:	fa1f fe8c 	uxth.w	lr, ip
 800042c:	fb09 1118 	mls	r1, r9, r8, r1
 8000430:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000434:	fb08 f00e 	mul.w	r0, r8, lr
 8000438:	4288      	cmp	r0, r1
 800043a:	fa02 f206 	lsl.w	r2, r2, r6
 800043e:	d90b      	bls.n	8000458 <__udivmoddi4+0x1b8>
 8000440:	eb1c 0101 	adds.w	r1, ip, r1
 8000444:	f108 3aff 	add.w	sl, r8, #4294967295
 8000448:	f080 8088 	bcs.w	800055c <__udivmoddi4+0x2bc>
 800044c:	4288      	cmp	r0, r1
 800044e:	f240 8085 	bls.w	800055c <__udivmoddi4+0x2bc>
 8000452:	f1a8 0802 	sub.w	r8, r8, #2
 8000456:	4461      	add	r1, ip
 8000458:	1a09      	subs	r1, r1, r0
 800045a:	b2a4      	uxth	r4, r4
 800045c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000460:	fb09 1110 	mls	r1, r9, r0, r1
 8000464:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000468:	fb00 fe0e 	mul.w	lr, r0, lr
 800046c:	458e      	cmp	lr, r1
 800046e:	d908      	bls.n	8000482 <__udivmoddi4+0x1e2>
 8000470:	eb1c 0101 	adds.w	r1, ip, r1
 8000474:	f100 34ff 	add.w	r4, r0, #4294967295
 8000478:	d26c      	bcs.n	8000554 <__udivmoddi4+0x2b4>
 800047a:	458e      	cmp	lr, r1
 800047c:	d96a      	bls.n	8000554 <__udivmoddi4+0x2b4>
 800047e:	3802      	subs	r0, #2
 8000480:	4461      	add	r1, ip
 8000482:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000486:	fba0 9402 	umull	r9, r4, r0, r2
 800048a:	eba1 010e 	sub.w	r1, r1, lr
 800048e:	42a1      	cmp	r1, r4
 8000490:	46c8      	mov	r8, r9
 8000492:	46a6      	mov	lr, r4
 8000494:	d356      	bcc.n	8000544 <__udivmoddi4+0x2a4>
 8000496:	d053      	beq.n	8000540 <__udivmoddi4+0x2a0>
 8000498:	b15d      	cbz	r5, 80004b2 <__udivmoddi4+0x212>
 800049a:	ebb3 0208 	subs.w	r2, r3, r8
 800049e:	eb61 010e 	sbc.w	r1, r1, lr
 80004a2:	fa01 f707 	lsl.w	r7, r1, r7
 80004a6:	fa22 f306 	lsr.w	r3, r2, r6
 80004aa:	40f1      	lsrs	r1, r6
 80004ac:	431f      	orrs	r7, r3
 80004ae:	e9c5 7100 	strd	r7, r1, [r5]
 80004b2:	2600      	movs	r6, #0
 80004b4:	4631      	mov	r1, r6
 80004b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	40d8      	lsrs	r0, r3
 80004c0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004c4:	fa21 f303 	lsr.w	r3, r1, r3
 80004c8:	4091      	lsls	r1, r2
 80004ca:	4301      	orrs	r1, r0
 80004cc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004d0:	fa1f fe8c 	uxth.w	lr, ip
 80004d4:	fbb3 f0f7 	udiv	r0, r3, r7
 80004d8:	fb07 3610 	mls	r6, r7, r0, r3
 80004dc:	0c0b      	lsrs	r3, r1, #16
 80004de:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80004e2:	fb00 f60e 	mul.w	r6, r0, lr
 80004e6:	429e      	cmp	r6, r3
 80004e8:	fa04 f402 	lsl.w	r4, r4, r2
 80004ec:	d908      	bls.n	8000500 <__udivmoddi4+0x260>
 80004ee:	eb1c 0303 	adds.w	r3, ip, r3
 80004f2:	f100 38ff 	add.w	r8, r0, #4294967295
 80004f6:	d22f      	bcs.n	8000558 <__udivmoddi4+0x2b8>
 80004f8:	429e      	cmp	r6, r3
 80004fa:	d92d      	bls.n	8000558 <__udivmoddi4+0x2b8>
 80004fc:	3802      	subs	r0, #2
 80004fe:	4463      	add	r3, ip
 8000500:	1b9b      	subs	r3, r3, r6
 8000502:	b289      	uxth	r1, r1
 8000504:	fbb3 f6f7 	udiv	r6, r3, r7
 8000508:	fb07 3316 	mls	r3, r7, r6, r3
 800050c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000510:	fb06 f30e 	mul.w	r3, r6, lr
 8000514:	428b      	cmp	r3, r1
 8000516:	d908      	bls.n	800052a <__udivmoddi4+0x28a>
 8000518:	eb1c 0101 	adds.w	r1, ip, r1
 800051c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000520:	d216      	bcs.n	8000550 <__udivmoddi4+0x2b0>
 8000522:	428b      	cmp	r3, r1
 8000524:	d914      	bls.n	8000550 <__udivmoddi4+0x2b0>
 8000526:	3e02      	subs	r6, #2
 8000528:	4461      	add	r1, ip
 800052a:	1ac9      	subs	r1, r1, r3
 800052c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000530:	e738      	b.n	80003a4 <__udivmoddi4+0x104>
 8000532:	462e      	mov	r6, r5
 8000534:	4628      	mov	r0, r5
 8000536:	e705      	b.n	8000344 <__udivmoddi4+0xa4>
 8000538:	4606      	mov	r6, r0
 800053a:	e6e3      	b.n	8000304 <__udivmoddi4+0x64>
 800053c:	4618      	mov	r0, r3
 800053e:	e6f8      	b.n	8000332 <__udivmoddi4+0x92>
 8000540:	454b      	cmp	r3, r9
 8000542:	d2a9      	bcs.n	8000498 <__udivmoddi4+0x1f8>
 8000544:	ebb9 0802 	subs.w	r8, r9, r2
 8000548:	eb64 0e0c 	sbc.w	lr, r4, ip
 800054c:	3801      	subs	r0, #1
 800054e:	e7a3      	b.n	8000498 <__udivmoddi4+0x1f8>
 8000550:	4646      	mov	r6, r8
 8000552:	e7ea      	b.n	800052a <__udivmoddi4+0x28a>
 8000554:	4620      	mov	r0, r4
 8000556:	e794      	b.n	8000482 <__udivmoddi4+0x1e2>
 8000558:	4640      	mov	r0, r8
 800055a:	e7d1      	b.n	8000500 <__udivmoddi4+0x260>
 800055c:	46d0      	mov	r8, sl
 800055e:	e77b      	b.n	8000458 <__udivmoddi4+0x1b8>
 8000560:	3b02      	subs	r3, #2
 8000562:	4461      	add	r1, ip
 8000564:	e732      	b.n	80003cc <__udivmoddi4+0x12c>
 8000566:	4630      	mov	r0, r6
 8000568:	e709      	b.n	800037e <__udivmoddi4+0xde>
 800056a:	4464      	add	r4, ip
 800056c:	3802      	subs	r0, #2
 800056e:	e742      	b.n	80003f6 <__udivmoddi4+0x156>

08000570 <__aeabi_idiv0>:
 8000570:	4770      	bx	lr
 8000572:	bf00      	nop

08000574 <FLASH_If_Init>:
  * @brief  Unlocks Flash for write access
  * @param  None
  * @retval None
  */
void FLASH_If_Init(void)
{
 8000574:	b580      	push	{r7, lr}
 8000576:	af00      	add	r7, sp, #0
   HAL_FLASH_Unlock();
 8000578:	f002 fc8c 	bl	8002e94 <HAL_FLASH_Unlock>
}
 800057c:	bf00      	nop
 800057e:	bd80      	pop	{r7, pc}

08000580 <FLASH_If_Erase>:
  * @param  StartSector: start of user flash area
  * @retval 0: user flash area successfully erased
  *         1: error occurred
  */
int8_t FLASH_If_Erase(uint32_t StartSector)
{
 8000580:	b580      	push	{r7, lr}
 8000582:	b08a      	sub	sp, #40	; 0x28
 8000584:	af00      	add	r7, sp, #0
 8000586:	6078      	str	r0, [r7, #4]
  uint32_t FlashAddress;

  FlashAddress = StartSector;
 8000588:	687b      	ldr	r3, [r7, #4]
 800058a:	627b      	str	r3, [r7, #36]	; 0x24

  /* Device voltage range supposed to be [2.7V to 3.6V], the operation will
     be done by word */

  if (FlashAddress <= (uint32_t) USER_FLASH_LAST_PAGE_ADDRESS)
 800058c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800058e:	4a10      	ldr	r2, [pc, #64]	; (80005d0 <FLASH_If_Erase+0x50>)
 8000590:	4293      	cmp	r3, r2
 8000592:	d816      	bhi.n	80005c2 <FLASH_If_Erase+0x42>
  {
    FLASH_EraseInitTypeDef FLASH_EraseInitStruct;
    uint32_t sectornb = 0;
 8000594:	2300      	movs	r3, #0
 8000596:	60fb      	str	r3, [r7, #12]

    FLASH_EraseInitStruct.TypeErase = FLASH_TYPEERASE_SECTORS;
 8000598:	2300      	movs	r3, #0
 800059a:	613b      	str	r3, [r7, #16]
    FLASH_EraseInitStruct.Sector = FLASH_SECTOR_5;
 800059c:	2305      	movs	r3, #5
 800059e:	61bb      	str	r3, [r7, #24]
    FLASH_EraseInitStruct.NbSectors = 7;
 80005a0:	2307      	movs	r3, #7
 80005a2:	61fb      	str	r3, [r7, #28]
    FLASH_EraseInitStruct.VoltageRange = FLASH_VOLTAGE_RANGE_3;
 80005a4:	2302      	movs	r3, #2
 80005a6:	623b      	str	r3, [r7, #32]

    if (HAL_FLASHEx_Erase(&FLASH_EraseInitStruct, &sectornb) != HAL_OK)
 80005a8:	f107 020c 	add.w	r2, r7, #12
 80005ac:	f107 0310 	add.w	r3, r7, #16
 80005b0:	4611      	mov	r1, r2
 80005b2:	4618      	mov	r0, r3
 80005b4:	f002 fdc0 	bl	8003138 <HAL_FLASHEx_Erase>
 80005b8:	4603      	mov	r3, r0
 80005ba:	2b00      	cmp	r3, #0
 80005bc:	d003      	beq.n	80005c6 <FLASH_If_Erase+0x46>
      return (1);
 80005be:	2301      	movs	r3, #1
 80005c0:	e002      	b.n	80005c8 <FLASH_If_Erase+0x48>
  }
  else
  {
    return (1);
 80005c2:	2301      	movs	r3, #1
 80005c4:	e000      	b.n	80005c8 <FLASH_If_Erase+0x48>
  }

  return (0);
 80005c6:	2300      	movs	r3, #0
}
 80005c8:	4618      	mov	r0, r3
 80005ca:	3728      	adds	r7, #40	; 0x28
 80005cc:	46bd      	mov	sp, r7
 80005ce:	bd80      	pop	{r7, pc}
 80005d0:	080e0000 	.word	0x080e0000

080005d4 <FLASH_If_Write>:
  * @retval 0: Data successfully written to Flash memory
  *         1: Error occurred while writing data in Flash memory
  *         2: Written Data in flash memory is different from expected one
  */
uint32_t FLASH_If_Write(__IO uint32_t* FlashAddress, uint32_t* Data ,uint16_t DataLength)
{
 80005d4:	b5b0      	push	{r4, r5, r7, lr}
 80005d6:	b086      	sub	sp, #24
 80005d8:	af00      	add	r7, sp, #0
 80005da:	60f8      	str	r0, [r7, #12]
 80005dc:	60b9      	str	r1, [r7, #8]
 80005de:	4613      	mov	r3, r2
 80005e0:	80fb      	strh	r3, [r7, #6]
  uint32_t i = 0;
 80005e2:	2300      	movs	r3, #0
 80005e4:	617b      	str	r3, [r7, #20]

  for (i = 0; (i < DataLength) && (*FlashAddress <= (USER_FLASH_END_ADDRESS-4)); i++)
 80005e6:	2300      	movs	r3, #0
 80005e8:	617b      	str	r3, [r7, #20]
 80005ea:	e028      	b.n	800063e <FLASH_If_Write+0x6a>
  {
    /* Device voltage range supposed to be [2.7V to 3.6V], the operation will
       be done by word */
    if (HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, *FlashAddress,  *(uint32_t*)(Data+i)) == HAL_OK)
 80005ec:	68fb      	ldr	r3, [r7, #12]
 80005ee:	6819      	ldr	r1, [r3, #0]
 80005f0:	697b      	ldr	r3, [r7, #20]
 80005f2:	009b      	lsls	r3, r3, #2
 80005f4:	68ba      	ldr	r2, [r7, #8]
 80005f6:	4413      	add	r3, r2
 80005f8:	681b      	ldr	r3, [r3, #0]
 80005fa:	2200      	movs	r2, #0
 80005fc:	461c      	mov	r4, r3
 80005fe:	4615      	mov	r5, r2
 8000600:	4622      	mov	r2, r4
 8000602:	462b      	mov	r3, r5
 8000604:	2002      	movs	r0, #2
 8000606:	f002 fbf1 	bl	8002dec <HAL_FLASH_Program>
 800060a:	4603      	mov	r3, r0
 800060c:	2b00      	cmp	r3, #0
 800060e:	d111      	bne.n	8000634 <FLASH_If_Write+0x60>
    {
     /* Check the written value */
      if (*(uint32_t*)*FlashAddress != *(uint32_t*)(Data+i))
 8000610:	68fb      	ldr	r3, [r7, #12]
 8000612:	681b      	ldr	r3, [r3, #0]
 8000614:	681a      	ldr	r2, [r3, #0]
 8000616:	697b      	ldr	r3, [r7, #20]
 8000618:	009b      	lsls	r3, r3, #2
 800061a:	68b9      	ldr	r1, [r7, #8]
 800061c:	440b      	add	r3, r1
 800061e:	681b      	ldr	r3, [r3, #0]
 8000620:	429a      	cmp	r2, r3
 8000622:	d001      	beq.n	8000628 <FLASH_If_Write+0x54>
      {
        /* Flash content doesn't match SRAM content */
        return(2);
 8000624:	2302      	movs	r3, #2
 8000626:	e014      	b.n	8000652 <FLASH_If_Write+0x7e>
      }
      /* Increment FLASH destination address */
      *FlashAddress += 4;
 8000628:	68fb      	ldr	r3, [r7, #12]
 800062a:	681b      	ldr	r3, [r3, #0]
 800062c:	1d1a      	adds	r2, r3, #4
 800062e:	68fb      	ldr	r3, [r7, #12]
 8000630:	601a      	str	r2, [r3, #0]
 8000632:	e001      	b.n	8000638 <FLASH_If_Write+0x64>
    }
    else
    {
      /* Error occurred while writing data in Flash memory */
      return (1);
 8000634:	2301      	movs	r3, #1
 8000636:	e00c      	b.n	8000652 <FLASH_If_Write+0x7e>
  for (i = 0; (i < DataLength) && (*FlashAddress <= (USER_FLASH_END_ADDRESS-4)); i++)
 8000638:	697b      	ldr	r3, [r7, #20]
 800063a:	3301      	adds	r3, #1
 800063c:	617b      	str	r3, [r7, #20]
 800063e:	88fb      	ldrh	r3, [r7, #6]
 8000640:	697a      	ldr	r2, [r7, #20]
 8000642:	429a      	cmp	r2, r3
 8000644:	d204      	bcs.n	8000650 <FLASH_If_Write+0x7c>
 8000646:	68fb      	ldr	r3, [r7, #12]
 8000648:	681b      	ldr	r3, [r3, #0]
 800064a:	4a04      	ldr	r2, [pc, #16]	; (800065c <FLASH_If_Write+0x88>)
 800064c:	4293      	cmp	r3, r2
 800064e:	d9cd      	bls.n	80005ec <FLASH_If_Write+0x18>
    }
  }

  return (0);
 8000650:	2300      	movs	r3, #0
}
 8000652:	4618      	mov	r0, r3
 8000654:	3718      	adds	r7, #24
 8000656:	46bd      	mov	sp, r7
 8000658:	bdb0      	pop	{r4, r5, r7, pc}
 800065a:	bf00      	nop
 800065c:	080ffffb 	.word	0x080ffffb

08000660 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000660:	b480      	push	{r7}
 8000662:	b085      	sub	sp, #20
 8000664:	af00      	add	r7, sp, #0
 8000666:	60f8      	str	r0, [r7, #12]
 8000668:	60b9      	str	r1, [r7, #8]
 800066a:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 800066c:	68fb      	ldr	r3, [r7, #12]
 800066e:	4a07      	ldr	r2, [pc, #28]	; (800068c <vApplicationGetIdleTaskMemory+0x2c>)
 8000670:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8000672:	68bb      	ldr	r3, [r7, #8]
 8000674:	4a06      	ldr	r2, [pc, #24]	; (8000690 <vApplicationGetIdleTaskMemory+0x30>)
 8000676:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000678:	687b      	ldr	r3, [r7, #4]
 800067a:	2280      	movs	r2, #128	; 0x80
 800067c:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 800067e:	bf00      	nop
 8000680:	3714      	adds	r7, #20
 8000682:	46bd      	mov	sp, r7
 8000684:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000688:	4770      	bx	lr
 800068a:	bf00      	nop
 800068c:	200000b0 	.word	0x200000b0
 8000690:	20000164 	.word	0x20000164

08000694 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 8000694:	b5b0      	push	{r4, r5, r7, lr}
 8000696:	b090      	sub	sp, #64	; 0x40
 8000698:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 800069a:	f000 ffdb 	bl	8001654 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 800069e:	f000 f86d 	bl	800077c <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 80006a2:	f000 f8fd 	bl	80008a0 <MX_GPIO_Init>
	MX_RTC_Init();
 80006a6:	f000 f8d5 	bl	8000854 <MX_RTC_Init>

	/*
	 *  Check IAP Flag, enter Ethernet Bootloader routine if set
	 *  Set: 0xDEE2
	 */
	if (HAL_RTCEx_BKUPRead(&hrtc, RTC_BKP_DR1) != 0xDEE2) {
 80006aa:	2101      	movs	r1, #1
 80006ac:	4829      	ldr	r0, [pc, #164]	; (8000754 <main+0xc0>)
 80006ae:	f004 f893 	bl	80047d8 <HAL_RTCEx_BKUPRead>
 80006b2:	4603      	mov	r3, r0
 80006b4:	f64d 62e2 	movw	r2, #57058	; 0xdee2
 80006b8:	4293      	cmp	r3, r2
 80006ba:	d015      	beq.n	80006e8 <main+0x54>
		/* Check if valid stack address (RAM address) then jump to user application */
//		if (((*(__IO uint32_t*)USER_FLASH_FIRST_PAGE_ADDRESS) & 0x2FFE0000 ) == 0x20000000)
//		{
		  /* Jump to user application */
		  JumpAddress = *(__IO uint32_t*) (USER_FLASH_FIRST_PAGE_ADDRESS + 4);
 80006bc:	4b26      	ldr	r3, [pc, #152]	; (8000758 <main+0xc4>)
 80006be:	681b      	ldr	r3, [r3, #0]
 80006c0:	4a26      	ldr	r2, [pc, #152]	; (800075c <main+0xc8>)
 80006c2:	6013      	str	r3, [r2, #0]
		  Jump_To_Application = (pFunction) JumpAddress;
 80006c4:	4b25      	ldr	r3, [pc, #148]	; (800075c <main+0xc8>)
 80006c6:	681b      	ldr	r3, [r3, #0]
 80006c8:	461a      	mov	r2, r3
 80006ca:	4b25      	ldr	r3, [pc, #148]	; (8000760 <main+0xcc>)
 80006cc:	601a      	str	r2, [r3, #0]
		  /* Initialize user application's Stack Pointer */
		  __set_MSP(*(__IO uint32_t*) USER_FLASH_FIRST_PAGE_ADDRESS);
 80006ce:	4b25      	ldr	r3, [pc, #148]	; (8000764 <main+0xd0>)
 80006d0:	681b      	ldr	r3, [r3, #0]
 80006d2:	63fb      	str	r3, [r7, #60]	; 0x3c
  \details Assigns the given value to the Main Stack Pointer (MSP).
  \param [in]    topOfMainStack  Main Stack Pointer value to set
 */
__STATIC_FORCEINLINE void __set_MSP(uint32_t topOfMainStack)
{
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
 80006d4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80006d6:	f383 8808 	msr	MSP, r3
}
 80006da:	bf00      	nop

		  deinitEverything();
 80006dc:	f000 f996 	bl	8000a0c <deinitEverything>

		  Jump_To_Application();
 80006e0:	4b1f      	ldr	r3, [pc, #124]	; (8000760 <main+0xcc>)
 80006e2:	681b      	ldr	r3, [r3, #0]
 80006e4:	4798      	blx	r3
		  /* do nothing */
		  while(1);
 80006e6:	e7fe      	b.n	80006e6 <main+0x52>
	}

	// Else enter IAP Routine

	// Clear Back Up Register 1 Data
	HAL_PWR_EnableBkUpAccess();
 80006e8:	f003 f914 	bl	8003914 <HAL_PWR_EnableBkUpAccess>
	// Clears IAP Flag in RTC Backup data Register 1
	HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_DR1, 0x0000);
 80006ec:	2200      	movs	r2, #0
 80006ee:	2101      	movs	r1, #1
 80006f0:	4818      	ldr	r0, [pc, #96]	; (8000754 <main+0xc0>)
 80006f2:	f004 f857 	bl	80047a4 <HAL_RTCEx_BKUPWrite>
	HAL_PWR_DisableBkUpAccess();
 80006f6:	f003 f921 	bl	800393c <HAL_PWR_DisableBkUpAccess>

	//Turn ON LED3
	HAL_GPIO_WritePin(LED3_GPIO_Port, LED3_Pin, GPIO_PIN_SET);
 80006fa:	2201      	movs	r2, #1
 80006fc:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000700:	4819      	ldr	r0, [pc, #100]	; (8000768 <main+0xd4>)
 8000702:	f003 f8d3 	bl	80038ac <HAL_GPIO_WritePin>
	/* add queues, ... */
	/* USER CODE END RTOS_QUEUES */

	/* Create the thread(s) */
	/* definition and creation of defaultTask */
	osThreadDef(defaultTask, StartDefaultTask, osPriorityLow, 0, 128);
 8000706:	4b19      	ldr	r3, [pc, #100]	; (800076c <main+0xd8>)
 8000708:	f107 0420 	add.w	r4, r7, #32
 800070c:	461d      	mov	r5, r3
 800070e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000710:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000712:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000716:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 800071a:	f107 0320 	add.w	r3, r7, #32
 800071e:	2100      	movs	r1, #0
 8000720:	4618      	mov	r0, r3
 8000722:	f005 f951 	bl	80059c8 <osThreadCreate>
 8000726:	4603      	mov	r3, r0
 8000728:	4a11      	ldr	r2, [pc, #68]	; (8000770 <main+0xdc>)
 800072a:	6013      	str	r3, [r2, #0]

	/* USER CODE BEGIN RTOS_THREADS */

	osThreadDef(tftpTask, StartTFTPTask, osPriorityNormal, 0, 256);
 800072c:	4b11      	ldr	r3, [pc, #68]	; (8000774 <main+0xe0>)
 800072e:	1d3c      	adds	r4, r7, #4
 8000730:	461d      	mov	r5, r3
 8000732:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000734:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000736:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800073a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	tftpTaskHandle = osThreadCreate(osThread(tftpTask), NULL);
 800073e:	1d3b      	adds	r3, r7, #4
 8000740:	2100      	movs	r1, #0
 8000742:	4618      	mov	r0, r3
 8000744:	f005 f940 	bl	80059c8 <osThreadCreate>
 8000748:	4603      	mov	r3, r0
 800074a:	4a0b      	ldr	r2, [pc, #44]	; (8000778 <main+0xe4>)
 800074c:	6013      	str	r3, [r2, #0]
	/* USER CODE END RTOS_THREADS */

	/* Start scheduler */
	osKernelStart();
 800074e:	f005 f924 	bl	800599a <osKernelStart>

	/* We should never get here as control is now taken by the scheduler */
	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1) {
 8000752:	e7fe      	b.n	8000752 <main+0xbe>
 8000754:	20000364 	.word	0x20000364
 8000758:	08020004 	.word	0x08020004
 800075c:	20000390 	.word	0x20000390
 8000760:	2000038c 	.word	0x2000038c
 8000764:	08020000 	.word	0x08020000
 8000768:	40020c00 	.word	0x40020c00
 800076c:	080147f0 	.word	0x080147f0
 8000770:	20000384 	.word	0x20000384
 8000774:	0801480c 	.word	0x0801480c
 8000778:	20000388 	.word	0x20000388

0800077c <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 800077c:	b580      	push	{r7, lr}
 800077e:	b094      	sub	sp, #80	; 0x50
 8000780:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 8000782:	f107 0320 	add.w	r3, r7, #32
 8000786:	2230      	movs	r2, #48	; 0x30
 8000788:	2100      	movs	r1, #0
 800078a:	4618      	mov	r0, r3
 800078c:	f013 f84f 	bl	801382e <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 8000790:	f107 030c 	add.w	r3, r7, #12
 8000794:	2200      	movs	r2, #0
 8000796:	601a      	str	r2, [r3, #0]
 8000798:	605a      	str	r2, [r3, #4]
 800079a:	609a      	str	r2, [r3, #8]
 800079c:	60da      	str	r2, [r3, #12]
 800079e:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	__HAL_RCC_PWR_CLK_ENABLE();
 80007a0:	2300      	movs	r3, #0
 80007a2:	60bb      	str	r3, [r7, #8]
 80007a4:	4b29      	ldr	r3, [pc, #164]	; (800084c <SystemClock_Config+0xd0>)
 80007a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007a8:	4a28      	ldr	r2, [pc, #160]	; (800084c <SystemClock_Config+0xd0>)
 80007aa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80007ae:	6413      	str	r3, [r2, #64]	; 0x40
 80007b0:	4b26      	ldr	r3, [pc, #152]	; (800084c <SystemClock_Config+0xd0>)
 80007b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007b4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80007b8:	60bb      	str	r3, [r7, #8]
 80007ba:	68bb      	ldr	r3, [r7, #8]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80007bc:	2300      	movs	r3, #0
 80007be:	607b      	str	r3, [r7, #4]
 80007c0:	4b23      	ldr	r3, [pc, #140]	; (8000850 <SystemClock_Config+0xd4>)
 80007c2:	681b      	ldr	r3, [r3, #0]
 80007c4:	4a22      	ldr	r2, [pc, #136]	; (8000850 <SystemClock_Config+0xd4>)
 80007c6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80007ca:	6013      	str	r3, [r2, #0]
 80007cc:	4b20      	ldr	r3, [pc, #128]	; (8000850 <SystemClock_Config+0xd4>)
 80007ce:	681b      	ldr	r3, [r3, #0]
 80007d0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80007d4:	607b      	str	r3, [r7, #4]
 80007d6:	687b      	ldr	r3, [r7, #4]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI
 80007d8:	230a      	movs	r3, #10
 80007da:	623b      	str	r3, [r7, #32]
			| RCC_OSCILLATORTYPE_LSI;
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80007dc:	2301      	movs	r3, #1
 80007de:	62fb      	str	r3, [r7, #44]	; 0x2c
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80007e0:	2310      	movs	r3, #16
 80007e2:	633b      	str	r3, [r7, #48]	; 0x30
	RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 80007e4:	2301      	movs	r3, #1
 80007e6:	637b      	str	r3, [r7, #52]	; 0x34
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80007e8:	2302      	movs	r3, #2
 80007ea:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80007ec:	2300      	movs	r3, #0
 80007ee:	63fb      	str	r3, [r7, #60]	; 0x3c
	RCC_OscInitStruct.PLL.PLLM = 8;
 80007f0:	2308      	movs	r3, #8
 80007f2:	643b      	str	r3, [r7, #64]	; 0x40
	RCC_OscInitStruct.PLL.PLLN = 168;
 80007f4:	23a8      	movs	r3, #168	; 0xa8
 80007f6:	647b      	str	r3, [r7, #68]	; 0x44
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80007f8:	2302      	movs	r3, #2
 80007fa:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_OscInitStruct.PLL.PLLQ = 4;
 80007fc:	2304      	movs	r3, #4
 80007fe:	64fb      	str	r3, [r7, #76]	; 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8000800:	f107 0320 	add.w	r3, r7, #32
 8000804:	4618      	mov	r0, r3
 8000806:	f003 f8ad 	bl	8003964 <HAL_RCC_OscConfig>
 800080a:	4603      	mov	r3, r0
 800080c:	2b00      	cmp	r3, #0
 800080e:	d001      	beq.n	8000814 <SystemClock_Config+0x98>
		Error_Handler();
 8000810:	f000 f948 	bl	8000aa4 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 8000814:	230f      	movs	r3, #15
 8000816:	60fb      	str	r3, [r7, #12]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000818:	2302      	movs	r3, #2
 800081a:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800081c:	2300      	movs	r3, #0
 800081e:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000820:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000824:	61bb      	str	r3, [r7, #24]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000826:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800082a:	61fb      	str	r3, [r7, #28]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK) {
 800082c:	f107 030c 	add.w	r3, r7, #12
 8000830:	2105      	movs	r1, #5
 8000832:	4618      	mov	r0, r3
 8000834:	f003 fb0e 	bl	8003e54 <HAL_RCC_ClockConfig>
 8000838:	4603      	mov	r3, r0
 800083a:	2b00      	cmp	r3, #0
 800083c:	d001      	beq.n	8000842 <SystemClock_Config+0xc6>
		Error_Handler();
 800083e:	f000 f931 	bl	8000aa4 <Error_Handler>
	}
}
 8000842:	bf00      	nop
 8000844:	3750      	adds	r7, #80	; 0x50
 8000846:	46bd      	mov	sp, r7
 8000848:	bd80      	pop	{r7, pc}
 800084a:	bf00      	nop
 800084c:	40023800 	.word	0x40023800
 8000850:	40007000 	.word	0x40007000

08000854 <MX_RTC_Init>:
/**
 * @brief RTC Initialization Function
 * @param None
 * @retval None
 */
static void MX_RTC_Init(void) {
 8000854:	b580      	push	{r7, lr}
 8000856:	af00      	add	r7, sp, #0

	/* USER CODE END RTC_Init 1 */

	/** Initialize RTC Only
	 */
	hrtc.Instance = RTC;
 8000858:	4b0f      	ldr	r3, [pc, #60]	; (8000898 <MX_RTC_Init+0x44>)
 800085a:	4a10      	ldr	r2, [pc, #64]	; (800089c <MX_RTC_Init+0x48>)
 800085c:	601a      	str	r2, [r3, #0]
	hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 800085e:	4b0e      	ldr	r3, [pc, #56]	; (8000898 <MX_RTC_Init+0x44>)
 8000860:	2200      	movs	r2, #0
 8000862:	605a      	str	r2, [r3, #4]
	hrtc.Init.AsynchPrediv = 127;
 8000864:	4b0c      	ldr	r3, [pc, #48]	; (8000898 <MX_RTC_Init+0x44>)
 8000866:	227f      	movs	r2, #127	; 0x7f
 8000868:	609a      	str	r2, [r3, #8]
	hrtc.Init.SynchPrediv = 255;
 800086a:	4b0b      	ldr	r3, [pc, #44]	; (8000898 <MX_RTC_Init+0x44>)
 800086c:	22ff      	movs	r2, #255	; 0xff
 800086e:	60da      	str	r2, [r3, #12]
	hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8000870:	4b09      	ldr	r3, [pc, #36]	; (8000898 <MX_RTC_Init+0x44>)
 8000872:	2200      	movs	r2, #0
 8000874:	611a      	str	r2, [r3, #16]
	hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8000876:	4b08      	ldr	r3, [pc, #32]	; (8000898 <MX_RTC_Init+0x44>)
 8000878:	2200      	movs	r2, #0
 800087a:	615a      	str	r2, [r3, #20]
	hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 800087c:	4b06      	ldr	r3, [pc, #24]	; (8000898 <MX_RTC_Init+0x44>)
 800087e:	2200      	movs	r2, #0
 8000880:	619a      	str	r2, [r3, #24]
	if (HAL_RTC_Init(&hrtc) != HAL_OK) {
 8000882:	4805      	ldr	r0, [pc, #20]	; (8000898 <MX_RTC_Init+0x44>)
 8000884:	f003 fe94 	bl	80045b0 <HAL_RTC_Init>
 8000888:	4603      	mov	r3, r0
 800088a:	2b00      	cmp	r3, #0
 800088c:	d001      	beq.n	8000892 <MX_RTC_Init+0x3e>
		Error_Handler();
 800088e:	f000 f909 	bl	8000aa4 <Error_Handler>
	}
	/* USER CODE BEGIN RTC_Init 2 */

	/* USER CODE END RTC_Init 2 */

}
 8000892:	bf00      	nop
 8000894:	bd80      	pop	{r7, pc}
 8000896:	bf00      	nop
 8000898:	20000364 	.word	0x20000364
 800089c:	40002800 	.word	0x40002800

080008a0 <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 80008a0:	b580      	push	{r7, lr}
 80008a2:	b08a      	sub	sp, #40	; 0x28
 80008a4:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 80008a6:	f107 0314 	add.w	r3, r7, #20
 80008aa:	2200      	movs	r2, #0
 80008ac:	601a      	str	r2, [r3, #0]
 80008ae:	605a      	str	r2, [r3, #4]
 80008b0:	609a      	str	r2, [r3, #8]
 80008b2:	60da      	str	r2, [r3, #12]
 80008b4:	611a      	str	r2, [r3, #16]

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOH_CLK_ENABLE();
 80008b6:	2300      	movs	r3, #0
 80008b8:	613b      	str	r3, [r7, #16]
 80008ba:	4b4a      	ldr	r3, [pc, #296]	; (80009e4 <MX_GPIO_Init+0x144>)
 80008bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008be:	4a49      	ldr	r2, [pc, #292]	; (80009e4 <MX_GPIO_Init+0x144>)
 80008c0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80008c4:	6313      	str	r3, [r2, #48]	; 0x30
 80008c6:	4b47      	ldr	r3, [pc, #284]	; (80009e4 <MX_GPIO_Init+0x144>)
 80008c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008ca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80008ce:	613b      	str	r3, [r7, #16]
 80008d0:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_GPIOC_CLK_ENABLE();
 80008d2:	2300      	movs	r3, #0
 80008d4:	60fb      	str	r3, [r7, #12]
 80008d6:	4b43      	ldr	r3, [pc, #268]	; (80009e4 <MX_GPIO_Init+0x144>)
 80008d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008da:	4a42      	ldr	r2, [pc, #264]	; (80009e4 <MX_GPIO_Init+0x144>)
 80008dc:	f043 0304 	orr.w	r3, r3, #4
 80008e0:	6313      	str	r3, [r2, #48]	; 0x30
 80008e2:	4b40      	ldr	r3, [pc, #256]	; (80009e4 <MX_GPIO_Init+0x144>)
 80008e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008e6:	f003 0304 	and.w	r3, r3, #4
 80008ea:	60fb      	str	r3, [r7, #12]
 80008ec:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 80008ee:	2300      	movs	r3, #0
 80008f0:	60bb      	str	r3, [r7, #8]
 80008f2:	4b3c      	ldr	r3, [pc, #240]	; (80009e4 <MX_GPIO_Init+0x144>)
 80008f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008f6:	4a3b      	ldr	r2, [pc, #236]	; (80009e4 <MX_GPIO_Init+0x144>)
 80008f8:	f043 0301 	orr.w	r3, r3, #1
 80008fc:	6313      	str	r3, [r2, #48]	; 0x30
 80008fe:	4b39      	ldr	r3, [pc, #228]	; (80009e4 <MX_GPIO_Init+0x144>)
 8000900:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000902:	f003 0301 	and.w	r3, r3, #1
 8000906:	60bb      	str	r3, [r7, #8]
 8000908:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 800090a:	2300      	movs	r3, #0
 800090c:	607b      	str	r3, [r7, #4]
 800090e:	4b35      	ldr	r3, [pc, #212]	; (80009e4 <MX_GPIO_Init+0x144>)
 8000910:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000912:	4a34      	ldr	r2, [pc, #208]	; (80009e4 <MX_GPIO_Init+0x144>)
 8000914:	f043 0302 	orr.w	r3, r3, #2
 8000918:	6313      	str	r3, [r2, #48]	; 0x30
 800091a:	4b32      	ldr	r3, [pc, #200]	; (80009e4 <MX_GPIO_Init+0x144>)
 800091c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800091e:	f003 0302 	and.w	r3, r3, #2
 8000922:	607b      	str	r3, [r7, #4]
 8000924:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_GPIOD_CLK_ENABLE();
 8000926:	2300      	movs	r3, #0
 8000928:	603b      	str	r3, [r7, #0]
 800092a:	4b2e      	ldr	r3, [pc, #184]	; (80009e4 <MX_GPIO_Init+0x144>)
 800092c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800092e:	4a2d      	ldr	r2, [pc, #180]	; (80009e4 <MX_GPIO_Init+0x144>)
 8000930:	f043 0308 	orr.w	r3, r3, #8
 8000934:	6313      	str	r3, [r2, #48]	; 0x30
 8000936:	4b2b      	ldr	r3, [pc, #172]	; (80009e4 <MX_GPIO_Init+0x144>)
 8000938:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800093a:	f003 0308 	and.w	r3, r3, #8
 800093e:	603b      	str	r3, [r7, #0]
 8000940:	683b      	ldr	r3, [r7, #0]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(LED3_GPIO_Port, LED3_Pin, GPIO_PIN_RESET);
 8000942:	2200      	movs	r2, #0
 8000944:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000948:	4827      	ldr	r0, [pc, #156]	; (80009e8 <MX_GPIO_Init+0x148>)
 800094a:	f002 ffaf 	bl	80038ac <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOC, LED2_Pin | LED1_Pin | LED0_Pin, GPIO_PIN_RESET);
 800094e:	2200      	movs	r2, #0
 8000950:	f44f 71e0 	mov.w	r1, #448	; 0x1c0
 8000954:	4825      	ldr	r0, [pc, #148]	; (80009ec <MX_GPIO_Init+0x14c>)
 8000956:	f002 ffa9 	bl	80038ac <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(BOOT_CHARGE_GPIO_Port, BOOT_CHARGE_Pin, GPIO_PIN_RESET);
 800095a:	2200      	movs	r2, #0
 800095c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000960:	4823      	ldr	r0, [pc, #140]	; (80009f0 <MX_GPIO_Init+0x150>)
 8000962:	f002 ffa3 	bl	80038ac <HAL_GPIO_WritePin>

	/*Configure GPIO pin : LED3_Pin */
	GPIO_InitStruct.Pin = LED3_Pin;
 8000966:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800096a:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800096c:	2301      	movs	r3, #1
 800096e:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000970:	2300      	movs	r3, #0
 8000972:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000974:	2300      	movs	r3, #0
 8000976:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(LED3_GPIO_Port, &GPIO_InitStruct);
 8000978:	f107 0314 	add.w	r3, r7, #20
 800097c:	4619      	mov	r1, r3
 800097e:	481a      	ldr	r0, [pc, #104]	; (80009e8 <MX_GPIO_Init+0x148>)
 8000980:	f002 fcfc 	bl	800337c <HAL_GPIO_Init>

	/*Configure GPIO pins : LED2_Pin LED1_Pin LED0_Pin */
	GPIO_InitStruct.Pin = LED2_Pin | LED1_Pin | LED0_Pin;
 8000984:	f44f 73e0 	mov.w	r3, #448	; 0x1c0
 8000988:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800098a:	2301      	movs	r3, #1
 800098c:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800098e:	2300      	movs	r3, #0
 8000990:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000992:	2300      	movs	r3, #0
 8000994:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000996:	f107 0314 	add.w	r3, r7, #20
 800099a:	4619      	mov	r1, r3
 800099c:	4813      	ldr	r0, [pc, #76]	; (80009ec <MX_GPIO_Init+0x14c>)
 800099e:	f002 fced 	bl	800337c <HAL_GPIO_Init>

	/*Configure GPIO pin : BOOT_CHARGE_Pin */
	GPIO_InitStruct.Pin = BOOT_CHARGE_Pin;
 80009a2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80009a6:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009a8:	2301      	movs	r3, #1
 80009aa:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009ac:	2300      	movs	r3, #0
 80009ae:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009b0:	2300      	movs	r3, #0
 80009b2:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(BOOT_CHARGE_GPIO_Port, &GPIO_InitStruct);
 80009b4:	f107 0314 	add.w	r3, r7, #20
 80009b8:	4619      	mov	r1, r3
 80009ba:	480d      	ldr	r0, [pc, #52]	; (80009f0 <MX_GPIO_Init+0x150>)
 80009bc:	f002 fcde 	bl	800337c <HAL_GPIO_Init>

	/*Configure GPIO pin : BOOT_READ_Pin */
	GPIO_InitStruct.Pin = BOOT_READ_Pin;
 80009c0:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80009c4:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80009c6:	2300      	movs	r3, #0
 80009c8:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009ca:	2300      	movs	r3, #0
 80009cc:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(BOOT_READ_GPIO_Port, &GPIO_InitStruct);
 80009ce:	f107 0314 	add.w	r3, r7, #20
 80009d2:	4619      	mov	r1, r3
 80009d4:	4806      	ldr	r0, [pc, #24]	; (80009f0 <MX_GPIO_Init+0x150>)
 80009d6:	f002 fcd1 	bl	800337c <HAL_GPIO_Init>

}
 80009da:	bf00      	nop
 80009dc:	3728      	adds	r7, #40	; 0x28
 80009de:	46bd      	mov	sp, r7
 80009e0:	bd80      	pop	{r7, pc}
 80009e2:	bf00      	nop
 80009e4:	40023800 	.word	0x40023800
 80009e8:	40020c00 	.word	0x40020c00
 80009ec:	40020800 	.word	0x40020800
 80009f0:	40020000 	.word	0x40020000

080009f4 <StartTFTPTask>:
 * @brief  Function implementing the TFTPTask thread.
 * @param  argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartTFTPTask */
void StartTFTPTask(void const *argument) {
 80009f4:	b580      	push	{r7, lr}
 80009f6:	b082      	sub	sp, #8
 80009f8:	af00      	add	r7, sp, #0
 80009fa:	6078      	str	r0, [r7, #4]

	/* init code for LWIP */
	MX_LWIP_Init();
 80009fc:	f004 f9b2 	bl	8004d64 <MX_LWIP_Init>

	IAP_tftpd_init();
 8000a00:	f000 fc70 	bl	80012e4 <IAP_tftpd_init>

	/* Infinite loop */
	for (;;) {
		osDelay(1);
 8000a04:	2001      	movs	r0, #1
 8000a06:	f005 f82b 	bl	8005a60 <osDelay>
 8000a0a:	e7fb      	b.n	8000a04 <StartTFTPTask+0x10>

08000a0c <deinitEverything>:
	}
}

void deinitEverything()
{
 8000a0c:	b580      	push	{r7, lr}
 8000a0e:	af00      	add	r7, sp, #0
	//-- reset peripherals to guarantee flawless start of user application
	HAL_GPIO_DeInit(LED0_GPIO_Port, LED0_Pin);
 8000a10:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000a14:	480f      	ldr	r0, [pc, #60]	; (8000a54 <deinitEverything+0x48>)
 8000a16:	f002 fe4d 	bl	80036b4 <HAL_GPIO_DeInit>
	HAL_GPIO_DeInit(LED1_GPIO_Port, LED1_Pin);
 8000a1a:	2180      	movs	r1, #128	; 0x80
 8000a1c:	480d      	ldr	r0, [pc, #52]	; (8000a54 <deinitEverything+0x48>)
 8000a1e:	f002 fe49 	bl	80036b4 <HAL_GPIO_DeInit>
	HAL_GPIO_DeInit(LED2_GPIO_Port, LED2_Pin);
 8000a22:	2140      	movs	r1, #64	; 0x40
 8000a24:	480b      	ldr	r0, [pc, #44]	; (8000a54 <deinitEverything+0x48>)
 8000a26:	f002 fe45 	bl	80036b4 <HAL_GPIO_DeInit>
	HAL_GPIO_DeInit(LED3_GPIO_Port, LED3_Pin);
 8000a2a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000a2e:	480a      	ldr	r0, [pc, #40]	; (8000a58 <deinitEverything+0x4c>)
 8000a30:	f002 fe40 	bl	80036b4 <HAL_GPIO_DeInit>
	HAL_RCC_DeInit();
 8000a34:	f003 fcee 	bl	8004414 <HAL_RCC_DeInit>
	HAL_DeInit();
 8000a38:	f000 fe2e 	bl	8001698 <HAL_DeInit>
	SysTick->CTRL = 0;
 8000a3c:	4b07      	ldr	r3, [pc, #28]	; (8000a5c <deinitEverything+0x50>)
 8000a3e:	2200      	movs	r2, #0
 8000a40:	601a      	str	r2, [r3, #0]
	SysTick->LOAD = 0;
 8000a42:	4b06      	ldr	r3, [pc, #24]	; (8000a5c <deinitEverything+0x50>)
 8000a44:	2200      	movs	r2, #0
 8000a46:	605a      	str	r2, [r3, #4]
	SysTick->VAL = 0;
 8000a48:	4b04      	ldr	r3, [pc, #16]	; (8000a5c <deinitEverything+0x50>)
 8000a4a:	2200      	movs	r2, #0
 8000a4c:	609a      	str	r2, [r3, #8]
}
 8000a4e:	bf00      	nop
 8000a50:	bd80      	pop	{r7, pc}
 8000a52:	bf00      	nop
 8000a54:	40020800 	.word	0x40020800
 8000a58:	40020c00 	.word	0x40020c00
 8000a5c:	e000e010 	.word	0xe000e010

08000a60 <StartDefaultTask>:
 * @brief  Function implementing the defaultTask thread.
 * @param  argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const *argument) {
 8000a60:	b580      	push	{r7, lr}
 8000a62:	b082      	sub	sp, #8
 8000a64:	af00      	add	r7, sp, #0
 8000a66:	6078      	str	r0, [r7, #4]
	/* Infinite loop */
	for (;;) {
		/*
		 *  Heartbeat LED0
		 */
		HAL_GPIO_TogglePin(LED0_GPIO_Port, LED0_Pin);
 8000a68:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000a6c:	4803      	ldr	r0, [pc, #12]	; (8000a7c <StartDefaultTask+0x1c>)
 8000a6e:	f002 ff36 	bl	80038de <HAL_GPIO_TogglePin>
		osDelay(500);
 8000a72:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000a76:	f004 fff3 	bl	8005a60 <osDelay>
		HAL_GPIO_TogglePin(LED0_GPIO_Port, LED0_Pin);
 8000a7a:	e7f5      	b.n	8000a68 <StartDefaultTask+0x8>
 8000a7c:	40020800 	.word	0x40020800

08000a80 <HAL_TIM_PeriodElapsedCallback>:
 * HAL_TIM_IRQHandler(). It makes a direct call to HAL_IncTick() to increment
 * a global variable "uwTick" used as application time base.
 * @param  htim : TIM handle
 * @retval None
 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8000a80:	b580      	push	{r7, lr}
 8000a82:	b082      	sub	sp, #8
 8000a84:	af00      	add	r7, sp, #0
 8000a86:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN Callback 0 */

	/* USER CODE END Callback 0 */
	if (htim->Instance == TIM6) {
 8000a88:	687b      	ldr	r3, [r7, #4]
 8000a8a:	681b      	ldr	r3, [r3, #0]
 8000a8c:	4a04      	ldr	r2, [pc, #16]	; (8000aa0 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000a8e:	4293      	cmp	r3, r2
 8000a90:	d101      	bne.n	8000a96 <HAL_TIM_PeriodElapsedCallback+0x16>
		HAL_IncTick();
 8000a92:	f000 fe35 	bl	8001700 <HAL_IncTick>
	}
	/* USER CODE BEGIN Callback 1 */

	/* USER CODE END Callback 1 */
}
 8000a96:	bf00      	nop
 8000a98:	3708      	adds	r7, #8
 8000a9a:	46bd      	mov	sp, r7
 8000a9c:	bd80      	pop	{r7, pc}
 8000a9e:	bf00      	nop
 8000aa0:	40001000 	.word	0x40001000

08000aa4 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 8000aa4:	b480      	push	{r7}
 8000aa6:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8000aa8:	b672      	cpsid	i
}
 8000aaa:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8000aac:	e7fe      	b.n	8000aac <Error_Handler+0x8>
	...

08000ab0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000ab0:	b580      	push	{r7, lr}
 8000ab2:	b082      	sub	sp, #8
 8000ab4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ab6:	2300      	movs	r3, #0
 8000ab8:	607b      	str	r3, [r7, #4]
 8000aba:	4b12      	ldr	r3, [pc, #72]	; (8000b04 <HAL_MspInit+0x54>)
 8000abc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000abe:	4a11      	ldr	r2, [pc, #68]	; (8000b04 <HAL_MspInit+0x54>)
 8000ac0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000ac4:	6453      	str	r3, [r2, #68]	; 0x44
 8000ac6:	4b0f      	ldr	r3, [pc, #60]	; (8000b04 <HAL_MspInit+0x54>)
 8000ac8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000aca:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000ace:	607b      	str	r3, [r7, #4]
 8000ad0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000ad2:	2300      	movs	r3, #0
 8000ad4:	603b      	str	r3, [r7, #0]
 8000ad6:	4b0b      	ldr	r3, [pc, #44]	; (8000b04 <HAL_MspInit+0x54>)
 8000ad8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ada:	4a0a      	ldr	r2, [pc, #40]	; (8000b04 <HAL_MspInit+0x54>)
 8000adc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000ae0:	6413      	str	r3, [r2, #64]	; 0x40
 8000ae2:	4b08      	ldr	r3, [pc, #32]	; (8000b04 <HAL_MspInit+0x54>)
 8000ae4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ae6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000aea:	603b      	str	r3, [r7, #0]
 8000aec:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000aee:	2200      	movs	r2, #0
 8000af0:	210f      	movs	r1, #15
 8000af2:	f06f 0001 	mvn.w	r0, #1
 8000af6:	f000 feff 	bl	80018f8 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000afa:	bf00      	nop
 8000afc:	3708      	adds	r7, #8
 8000afe:	46bd      	mov	sp, r7
 8000b00:	bd80      	pop	{r7, pc}
 8000b02:	bf00      	nop
 8000b04:	40023800 	.word	0x40023800

08000b08 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8000b08:	b580      	push	{r7, lr}
 8000b0a:	b086      	sub	sp, #24
 8000b0c:	af00      	add	r7, sp, #0
 8000b0e:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000b10:	f107 0308 	add.w	r3, r7, #8
 8000b14:	2200      	movs	r2, #0
 8000b16:	601a      	str	r2, [r3, #0]
 8000b18:	605a      	str	r2, [r3, #4]
 8000b1a:	609a      	str	r2, [r3, #8]
 8000b1c:	60da      	str	r2, [r3, #12]
  if(hrtc->Instance==RTC)
 8000b1e:	687b      	ldr	r3, [r7, #4]
 8000b20:	681b      	ldr	r3, [r3, #0]
 8000b22:	4a0c      	ldr	r2, [pc, #48]	; (8000b54 <HAL_RTC_MspInit+0x4c>)
 8000b24:	4293      	cmp	r3, r2
 8000b26:	d111      	bne.n	8000b4c <HAL_RTC_MspInit+0x44>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8000b28:	2302      	movs	r3, #2
 8000b2a:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8000b2c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000b30:	617b      	str	r3, [r7, #20]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000b32:	f107 0308 	add.w	r3, r7, #8
 8000b36:	4618      	mov	r0, r3
 8000b38:	f003 fb8a 	bl	8004250 <HAL_RCCEx_PeriphCLKConfig>
 8000b3c:	4603      	mov	r3, r0
 8000b3e:	2b00      	cmp	r3, #0
 8000b40:	d001      	beq.n	8000b46 <HAL_RTC_MspInit+0x3e>
    {
      Error_Handler();
 8000b42:	f7ff ffaf 	bl	8000aa4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8000b46:	4b04      	ldr	r3, [pc, #16]	; (8000b58 <HAL_RTC_MspInit+0x50>)
 8000b48:	2201      	movs	r2, #1
 8000b4a:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8000b4c:	bf00      	nop
 8000b4e:	3718      	adds	r7, #24
 8000b50:	46bd      	mov	sp, r7
 8000b52:	bd80      	pop	{r7, pc}
 8000b54:	40002800 	.word	0x40002800
 8000b58:	42470e3c 	.word	0x42470e3c

08000b5c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000b5c:	b580      	push	{r7, lr}
 8000b5e:	b08e      	sub	sp, #56	; 0x38
 8000b60:	af00      	add	r7, sp, #0
 8000b62:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8000b64:	2300      	movs	r3, #0
 8000b66:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8000b68:	2300      	movs	r3, #0
 8000b6a:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8000b6c:	2300      	movs	r3, #0
 8000b6e:	60fb      	str	r3, [r7, #12]
 8000b70:	4b33      	ldr	r3, [pc, #204]	; (8000c40 <HAL_InitTick+0xe4>)
 8000b72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b74:	4a32      	ldr	r2, [pc, #200]	; (8000c40 <HAL_InitTick+0xe4>)
 8000b76:	f043 0310 	orr.w	r3, r3, #16
 8000b7a:	6413      	str	r3, [r2, #64]	; 0x40
 8000b7c:	4b30      	ldr	r3, [pc, #192]	; (8000c40 <HAL_InitTick+0xe4>)
 8000b7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b80:	f003 0310 	and.w	r3, r3, #16
 8000b84:	60fb      	str	r3, [r7, #12]
 8000b86:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000b88:	f107 0210 	add.w	r2, r7, #16
 8000b8c:	f107 0314 	add.w	r3, r7, #20
 8000b90:	4611      	mov	r1, r2
 8000b92:	4618      	mov	r0, r3
 8000b94:	f003 fb2a 	bl	80041ec <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8000b98:	6a3b      	ldr	r3, [r7, #32]
 8000b9a:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8000b9c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000b9e:	2b00      	cmp	r3, #0
 8000ba0:	d103      	bne.n	8000baa <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000ba2:	f003 fb0f 	bl	80041c4 <HAL_RCC_GetPCLK1Freq>
 8000ba6:	6378      	str	r0, [r7, #52]	; 0x34
 8000ba8:	e004      	b.n	8000bb4 <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8000baa:	f003 fb0b 	bl	80041c4 <HAL_RCC_GetPCLK1Freq>
 8000bae:	4603      	mov	r3, r0
 8000bb0:	005b      	lsls	r3, r3, #1
 8000bb2:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000bb4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000bb6:	4a23      	ldr	r2, [pc, #140]	; (8000c44 <HAL_InitTick+0xe8>)
 8000bb8:	fba2 2303 	umull	r2, r3, r2, r3
 8000bbc:	0c9b      	lsrs	r3, r3, #18
 8000bbe:	3b01      	subs	r3, #1
 8000bc0:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8000bc2:	4b21      	ldr	r3, [pc, #132]	; (8000c48 <HAL_InitTick+0xec>)
 8000bc4:	4a21      	ldr	r2, [pc, #132]	; (8000c4c <HAL_InitTick+0xf0>)
 8000bc6:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8000bc8:	4b1f      	ldr	r3, [pc, #124]	; (8000c48 <HAL_InitTick+0xec>)
 8000bca:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000bce:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8000bd0:	4a1d      	ldr	r2, [pc, #116]	; (8000c48 <HAL_InitTick+0xec>)
 8000bd2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000bd4:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8000bd6:	4b1c      	ldr	r3, [pc, #112]	; (8000c48 <HAL_InitTick+0xec>)
 8000bd8:	2200      	movs	r2, #0
 8000bda:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000bdc:	4b1a      	ldr	r3, [pc, #104]	; (8000c48 <HAL_InitTick+0xec>)
 8000bde:	2200      	movs	r2, #0
 8000be0:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000be2:	4b19      	ldr	r3, [pc, #100]	; (8000c48 <HAL_InitTick+0xec>)
 8000be4:	2200      	movs	r2, #0
 8000be6:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 8000be8:	4817      	ldr	r0, [pc, #92]	; (8000c48 <HAL_InitTick+0xec>)
 8000bea:	f003 fe0d 	bl	8004808 <HAL_TIM_Base_Init>
 8000bee:	4603      	mov	r3, r0
 8000bf0:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 8000bf4:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8000bf8:	2b00      	cmp	r3, #0
 8000bfa:	d11b      	bne.n	8000c34 <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8000bfc:	4812      	ldr	r0, [pc, #72]	; (8000c48 <HAL_InitTick+0xec>)
 8000bfe:	f003 fe5d 	bl	80048bc <HAL_TIM_Base_Start_IT>
 8000c02:	4603      	mov	r3, r0
 8000c04:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 8000c08:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8000c0c:	2b00      	cmp	r3, #0
 8000c0e:	d111      	bne.n	8000c34 <HAL_InitTick+0xd8>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8000c10:	2036      	movs	r0, #54	; 0x36
 8000c12:	f000 fe8d 	bl	8001930 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000c16:	687b      	ldr	r3, [r7, #4]
 8000c18:	2b0f      	cmp	r3, #15
 8000c1a:	d808      	bhi.n	8000c2e <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 8000c1c:	2200      	movs	r2, #0
 8000c1e:	6879      	ldr	r1, [r7, #4]
 8000c20:	2036      	movs	r0, #54	; 0x36
 8000c22:	f000 fe69 	bl	80018f8 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000c26:	4a0a      	ldr	r2, [pc, #40]	; (8000c50 <HAL_InitTick+0xf4>)
 8000c28:	687b      	ldr	r3, [r7, #4]
 8000c2a:	6013      	str	r3, [r2, #0]
 8000c2c:	e002      	b.n	8000c34 <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 8000c2e:	2301      	movs	r3, #1
 8000c30:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8000c34:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 8000c38:	4618      	mov	r0, r3
 8000c3a:	3738      	adds	r7, #56	; 0x38
 8000c3c:	46bd      	mov	sp, r7
 8000c3e:	bd80      	pop	{r7, pc}
 8000c40:	40023800 	.word	0x40023800
 8000c44:	431bde83 	.word	0x431bde83
 8000c48:	20000394 	.word	0x20000394
 8000c4c:	40001000 	.word	0x40001000
 8000c50:	20000004 	.word	0x20000004

08000c54 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000c54:	b480      	push	{r7}
 8000c56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000c58:	e7fe      	b.n	8000c58 <NMI_Handler+0x4>

08000c5a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000c5a:	b480      	push	{r7}
 8000c5c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000c5e:	e7fe      	b.n	8000c5e <HardFault_Handler+0x4>

08000c60 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000c60:	b480      	push	{r7}
 8000c62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000c64:	e7fe      	b.n	8000c64 <MemManage_Handler+0x4>

08000c66 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000c66:	b480      	push	{r7}
 8000c68:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000c6a:	e7fe      	b.n	8000c6a <BusFault_Handler+0x4>

08000c6c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000c6c:	b480      	push	{r7}
 8000c6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000c70:	e7fe      	b.n	8000c70 <UsageFault_Handler+0x4>

08000c72 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000c72:	b480      	push	{r7}
 8000c74:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000c76:	bf00      	nop
 8000c78:	46bd      	mov	sp, r7
 8000c7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c7e:	4770      	bx	lr

08000c80 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8000c80:	b580      	push	{r7, lr}
 8000c82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8000c84:	4802      	ldr	r0, [pc, #8]	; (8000c90 <TIM6_DAC_IRQHandler+0x10>)
 8000c86:	f003 fe89 	bl	800499c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8000c8a:	bf00      	nop
 8000c8c:	bd80      	pop	{r7, pc}
 8000c8e:	bf00      	nop
 8000c90:	20000394 	.word	0x20000394

08000c94 <ETH_IRQHandler>:

/**
  * @brief This function handles Ethernet global interrupt.
  */
void ETH_IRQHandler(void)
{
 8000c94:	b580      	push	{r7, lr}
 8000c96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ETH_IRQn 0 */

  /* USER CODE END ETH_IRQn 0 */
  HAL_ETH_IRQHandler(&heth);
 8000c98:	4802      	ldr	r0, [pc, #8]	; (8000ca4 <ETH_IRQHandler+0x10>)
 8000c9a:	f001 f9d1 	bl	8002040 <HAL_ETH_IRQHandler>
  /* USER CODE BEGIN ETH_IRQn 1 */

  /* USER CODE END ETH_IRQn 1 */
}
 8000c9e:	bf00      	nop
 8000ca0:	bd80      	pop	{r7, pc}
 8000ca2:	bf00      	nop
 8000ca4:	20004f3c 	.word	0x20004f3c

08000ca8 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8000ca8:	b480      	push	{r7}
 8000caa:	af00      	add	r7, sp, #0
  return 1;
 8000cac:	2301      	movs	r3, #1
}
 8000cae:	4618      	mov	r0, r3
 8000cb0:	46bd      	mov	sp, r7
 8000cb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cb6:	4770      	bx	lr

08000cb8 <_kill>:

int _kill(int pid, int sig)
{
 8000cb8:	b480      	push	{r7}
 8000cba:	b083      	sub	sp, #12
 8000cbc:	af00      	add	r7, sp, #0
 8000cbe:	6078      	str	r0, [r7, #4]
 8000cc0:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8000cc2:	4b05      	ldr	r3, [pc, #20]	; (8000cd8 <_kill+0x20>)
 8000cc4:	2216      	movs	r2, #22
 8000cc6:	601a      	str	r2, [r3, #0]
  return -1;
 8000cc8:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000ccc:	4618      	mov	r0, r3
 8000cce:	370c      	adds	r7, #12
 8000cd0:	46bd      	mov	sp, r7
 8000cd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cd6:	4770      	bx	lr
 8000cd8:	2000c8b4 	.word	0x2000c8b4

08000cdc <_exit>:

void _exit (int status)
{
 8000cdc:	b580      	push	{r7, lr}
 8000cde:	b082      	sub	sp, #8
 8000ce0:	af00      	add	r7, sp, #0
 8000ce2:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8000ce4:	f04f 31ff 	mov.w	r1, #4294967295
 8000ce8:	6878      	ldr	r0, [r7, #4]
 8000cea:	f7ff ffe5 	bl	8000cb8 <_kill>
  while (1) {}    /* Make sure we hang here */
 8000cee:	e7fe      	b.n	8000cee <_exit+0x12>

08000cf0 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000cf0:	b580      	push	{r7, lr}
 8000cf2:	b086      	sub	sp, #24
 8000cf4:	af00      	add	r7, sp, #0
 8000cf6:	60f8      	str	r0, [r7, #12]
 8000cf8:	60b9      	str	r1, [r7, #8]
 8000cfa:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000cfc:	2300      	movs	r3, #0
 8000cfe:	617b      	str	r3, [r7, #20]
 8000d00:	e00a      	b.n	8000d18 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000d02:	f3af 8000 	nop.w
 8000d06:	4601      	mov	r1, r0
 8000d08:	68bb      	ldr	r3, [r7, #8]
 8000d0a:	1c5a      	adds	r2, r3, #1
 8000d0c:	60ba      	str	r2, [r7, #8]
 8000d0e:	b2ca      	uxtb	r2, r1
 8000d10:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000d12:	697b      	ldr	r3, [r7, #20]
 8000d14:	3301      	adds	r3, #1
 8000d16:	617b      	str	r3, [r7, #20]
 8000d18:	697a      	ldr	r2, [r7, #20]
 8000d1a:	687b      	ldr	r3, [r7, #4]
 8000d1c:	429a      	cmp	r2, r3
 8000d1e:	dbf0      	blt.n	8000d02 <_read+0x12>
  }

  return len;
 8000d20:	687b      	ldr	r3, [r7, #4]
}
 8000d22:	4618      	mov	r0, r3
 8000d24:	3718      	adds	r7, #24
 8000d26:	46bd      	mov	sp, r7
 8000d28:	bd80      	pop	{r7, pc}

08000d2a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000d2a:	b580      	push	{r7, lr}
 8000d2c:	b086      	sub	sp, #24
 8000d2e:	af00      	add	r7, sp, #0
 8000d30:	60f8      	str	r0, [r7, #12]
 8000d32:	60b9      	str	r1, [r7, #8]
 8000d34:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000d36:	2300      	movs	r3, #0
 8000d38:	617b      	str	r3, [r7, #20]
 8000d3a:	e009      	b.n	8000d50 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000d3c:	68bb      	ldr	r3, [r7, #8]
 8000d3e:	1c5a      	adds	r2, r3, #1
 8000d40:	60ba      	str	r2, [r7, #8]
 8000d42:	781b      	ldrb	r3, [r3, #0]
 8000d44:	4618      	mov	r0, r3
 8000d46:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000d4a:	697b      	ldr	r3, [r7, #20]
 8000d4c:	3301      	adds	r3, #1
 8000d4e:	617b      	str	r3, [r7, #20]
 8000d50:	697a      	ldr	r2, [r7, #20]
 8000d52:	687b      	ldr	r3, [r7, #4]
 8000d54:	429a      	cmp	r2, r3
 8000d56:	dbf1      	blt.n	8000d3c <_write+0x12>
  }
  return len;
 8000d58:	687b      	ldr	r3, [r7, #4]
}
 8000d5a:	4618      	mov	r0, r3
 8000d5c:	3718      	adds	r7, #24
 8000d5e:	46bd      	mov	sp, r7
 8000d60:	bd80      	pop	{r7, pc}

08000d62 <_close>:

int _close(int file)
{
 8000d62:	b480      	push	{r7}
 8000d64:	b083      	sub	sp, #12
 8000d66:	af00      	add	r7, sp, #0
 8000d68:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000d6a:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000d6e:	4618      	mov	r0, r3
 8000d70:	370c      	adds	r7, #12
 8000d72:	46bd      	mov	sp, r7
 8000d74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d78:	4770      	bx	lr

08000d7a <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000d7a:	b480      	push	{r7}
 8000d7c:	b083      	sub	sp, #12
 8000d7e:	af00      	add	r7, sp, #0
 8000d80:	6078      	str	r0, [r7, #4]
 8000d82:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000d84:	683b      	ldr	r3, [r7, #0]
 8000d86:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000d8a:	605a      	str	r2, [r3, #4]
  return 0;
 8000d8c:	2300      	movs	r3, #0
}
 8000d8e:	4618      	mov	r0, r3
 8000d90:	370c      	adds	r7, #12
 8000d92:	46bd      	mov	sp, r7
 8000d94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d98:	4770      	bx	lr

08000d9a <_isatty>:

int _isatty(int file)
{
 8000d9a:	b480      	push	{r7}
 8000d9c:	b083      	sub	sp, #12
 8000d9e:	af00      	add	r7, sp, #0
 8000da0:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000da2:	2301      	movs	r3, #1
}
 8000da4:	4618      	mov	r0, r3
 8000da6:	370c      	adds	r7, #12
 8000da8:	46bd      	mov	sp, r7
 8000daa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dae:	4770      	bx	lr

08000db0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000db0:	b480      	push	{r7}
 8000db2:	b085      	sub	sp, #20
 8000db4:	af00      	add	r7, sp, #0
 8000db6:	60f8      	str	r0, [r7, #12]
 8000db8:	60b9      	str	r1, [r7, #8]
 8000dba:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000dbc:	2300      	movs	r3, #0
}
 8000dbe:	4618      	mov	r0, r3
 8000dc0:	3714      	adds	r7, #20
 8000dc2:	46bd      	mov	sp, r7
 8000dc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dc8:	4770      	bx	lr
	...

08000dcc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000dcc:	b480      	push	{r7}
 8000dce:	b087      	sub	sp, #28
 8000dd0:	af00      	add	r7, sp, #0
 8000dd2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000dd4:	4a14      	ldr	r2, [pc, #80]	; (8000e28 <_sbrk+0x5c>)
 8000dd6:	4b15      	ldr	r3, [pc, #84]	; (8000e2c <_sbrk+0x60>)
 8000dd8:	1ad3      	subs	r3, r2, r3
 8000dda:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000ddc:	697b      	ldr	r3, [r7, #20]
 8000dde:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000de0:	4b13      	ldr	r3, [pc, #76]	; (8000e30 <_sbrk+0x64>)
 8000de2:	681b      	ldr	r3, [r3, #0]
 8000de4:	2b00      	cmp	r3, #0
 8000de6:	d102      	bne.n	8000dee <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000de8:	4b11      	ldr	r3, [pc, #68]	; (8000e30 <_sbrk+0x64>)
 8000dea:	4a12      	ldr	r2, [pc, #72]	; (8000e34 <_sbrk+0x68>)
 8000dec:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000dee:	4b10      	ldr	r3, [pc, #64]	; (8000e30 <_sbrk+0x64>)
 8000df0:	681a      	ldr	r2, [r3, #0]
 8000df2:	687b      	ldr	r3, [r7, #4]
 8000df4:	4413      	add	r3, r2
 8000df6:	693a      	ldr	r2, [r7, #16]
 8000df8:	429a      	cmp	r2, r3
 8000dfa:	d205      	bcs.n	8000e08 <_sbrk+0x3c>
  {
    errno = ENOMEM;
 8000dfc:	4b0e      	ldr	r3, [pc, #56]	; (8000e38 <_sbrk+0x6c>)
 8000dfe:	220c      	movs	r2, #12
 8000e00:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000e02:	f04f 33ff 	mov.w	r3, #4294967295
 8000e06:	e009      	b.n	8000e1c <_sbrk+0x50>
  }

  prev_heap_end = __sbrk_heap_end;
 8000e08:	4b09      	ldr	r3, [pc, #36]	; (8000e30 <_sbrk+0x64>)
 8000e0a:	681b      	ldr	r3, [r3, #0]
 8000e0c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000e0e:	4b08      	ldr	r3, [pc, #32]	; (8000e30 <_sbrk+0x64>)
 8000e10:	681a      	ldr	r2, [r3, #0]
 8000e12:	687b      	ldr	r3, [r7, #4]
 8000e14:	4413      	add	r3, r2
 8000e16:	4a06      	ldr	r2, [pc, #24]	; (8000e30 <_sbrk+0x64>)
 8000e18:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000e1a:	68fb      	ldr	r3, [r7, #12]
}
 8000e1c:	4618      	mov	r0, r3
 8000e1e:	371c      	adds	r7, #28
 8000e20:	46bd      	mov	sp, r7
 8000e22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e26:	4770      	bx	lr
 8000e28:	20020000 	.word	0x20020000
 8000e2c:	00000400 	.word	0x00000400
 8000e30:	200003dc 	.word	0x200003dc
 8000e34:	2000c8b8 	.word	0x2000c8b8
 8000e38:	2000c8b4 	.word	0x2000c8b4

08000e3c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000e3c:	b480      	push	{r7}
 8000e3e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000e40:	4b06      	ldr	r3, [pc, #24]	; (8000e5c <SystemInit+0x20>)
 8000e42:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000e46:	4a05      	ldr	r2, [pc, #20]	; (8000e5c <SystemInit+0x20>)
 8000e48:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000e4c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000e50:	bf00      	nop
 8000e52:	46bd      	mov	sp, r7
 8000e54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e58:	4770      	bx	lr
 8000e5a:	bf00      	nop
 8000e5c:	e000ed00 	.word	0xe000ed00

08000e60 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 8000e60:	b480      	push	{r7}
 8000e62:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8000e64:	f3bf 8f4f 	dsb	sy
}
 8000e68:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8000e6a:	4b06      	ldr	r3, [pc, #24]	; (8000e84 <__NVIC_SystemReset+0x24>)
 8000e6c:	68db      	ldr	r3, [r3, #12]
 8000e6e:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8000e72:	4904      	ldr	r1, [pc, #16]	; (8000e84 <__NVIC_SystemReset+0x24>)
 8000e74:	4b04      	ldr	r3, [pc, #16]	; (8000e88 <__NVIC_SystemReset+0x28>)
 8000e76:	4313      	orrs	r3, r2
 8000e78:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 8000e7a:	f3bf 8f4f 	dsb	sy
}
 8000e7e:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 8000e80:	bf00      	nop
 8000e82:	e7fd      	b.n	8000e80 <__NVIC_SystemReset+0x20>
 8000e84:	e000ed00 	.word	0xe000ed00
 8000e88:	05fa0004 	.word	0x05fa0004

08000e8c <IAP_tftp_decode_op>:
  * @brief Returns the TFTP opcode
  * @param buf: pointer on the TFTP packet
  * @retval None
  */
static tftp_opcode IAP_tftp_decode_op(char *buf)
{
 8000e8c:	b480      	push	{r7}
 8000e8e:	b083      	sub	sp, #12
 8000e90:	af00      	add	r7, sp, #0
 8000e92:	6078      	str	r0, [r7, #4]
  return (tftp_opcode)(buf[1]);
 8000e94:	687b      	ldr	r3, [r7, #4]
 8000e96:	3301      	adds	r3, #1
 8000e98:	781b      	ldrb	r3, [r3, #0]
}
 8000e9a:	4618      	mov	r0, r3
 8000e9c:	370c      	adds	r7, #12
 8000e9e:	46bd      	mov	sp, r7
 8000ea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ea4:	4770      	bx	lr

08000ea6 <IAP_tftp_extract_block>:
  * @brief  Extracts the block number
  * @param  buf: pointer on the TFTP packet
  * @retval block number
  */
static u16_t IAP_tftp_extract_block(char *buf)
{
 8000ea6:	b580      	push	{r7, lr}
 8000ea8:	b084      	sub	sp, #16
 8000eaa:	af00      	add	r7, sp, #0
 8000eac:	6078      	str	r0, [r7, #4]
  u16_t *b = (u16_t*)buf;
 8000eae:	687b      	ldr	r3, [r7, #4]
 8000eb0:	60fb      	str	r3, [r7, #12]
  return ntohs(b[1]);
 8000eb2:	68fb      	ldr	r3, [r7, #12]
 8000eb4:	3302      	adds	r3, #2
 8000eb6:	881b      	ldrh	r3, [r3, #0]
 8000eb8:	4618      	mov	r0, r3
 8000eba:	f007 fde1 	bl	8008a80 <lwip_htons>
 8000ebe:	4603      	mov	r3, r0
}
 8000ec0:	4618      	mov	r0, r3
 8000ec2:	3710      	adds	r7, #16
 8000ec4:	46bd      	mov	sp, r7
 8000ec6:	bd80      	pop	{r7, pc}

08000ec8 <IAP_tftp_set_opcode>:
  * @param  buffer: pointer on the TFTP packet
  * @param  opcode: TFTP opcode
  * @retval None
  */
static void IAP_tftp_set_opcode(char *buffer, tftp_opcode opcode)
{
 8000ec8:	b480      	push	{r7}
 8000eca:	b083      	sub	sp, #12
 8000ecc:	af00      	add	r7, sp, #0
 8000ece:	6078      	str	r0, [r7, #4]
 8000ed0:	460b      	mov	r3, r1
 8000ed2:	70fb      	strb	r3, [r7, #3]
  buffer[0] = 0;
 8000ed4:	687b      	ldr	r3, [r7, #4]
 8000ed6:	2200      	movs	r2, #0
 8000ed8:	701a      	strb	r2, [r3, #0]
  buffer[1] = (u8_t)opcode;
 8000eda:	687b      	ldr	r3, [r7, #4]
 8000edc:	3301      	adds	r3, #1
 8000ede:	78fa      	ldrb	r2, [r7, #3]
 8000ee0:	701a      	strb	r2, [r3, #0]
}
 8000ee2:	bf00      	nop
 8000ee4:	370c      	adds	r7, #12
 8000ee6:	46bd      	mov	sp, r7
 8000ee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eec:	4770      	bx	lr

08000eee <IAP_tftp_set_block>:
  * @param packet: pointer on the TFTP packet
  * @param  block: block number
  * @retval None
  */
static void IAP_tftp_set_block(char* packet, u16_t block)
{
 8000eee:	b590      	push	{r4, r7, lr}
 8000ef0:	b085      	sub	sp, #20
 8000ef2:	af00      	add	r7, sp, #0
 8000ef4:	6078      	str	r0, [r7, #4]
 8000ef6:	460b      	mov	r3, r1
 8000ef8:	807b      	strh	r3, [r7, #2]
  u16_t *p = (u16_t *)packet;
 8000efa:	687b      	ldr	r3, [r7, #4]
 8000efc:	60fb      	str	r3, [r7, #12]
  p[1] = htons(block);
 8000efe:	68fb      	ldr	r3, [r7, #12]
 8000f00:	1c9c      	adds	r4, r3, #2
 8000f02:	887b      	ldrh	r3, [r7, #2]
 8000f04:	4618      	mov	r0, r3
 8000f06:	f007 fdbb 	bl	8008a80 <lwip_htons>
 8000f0a:	4603      	mov	r3, r0
 8000f0c:	8023      	strh	r3, [r4, #0]
}
 8000f0e:	bf00      	nop
 8000f10:	3714      	adds	r7, #20
 8000f12:	46bd      	mov	sp, r7
 8000f14:	bd90      	pop	{r4, r7, pc}

08000f16 <IAP_tftp_send_ack_packet>:
  * @param to_port: receive port number
  * @param block: block number
  * @retval: err_t: error code
  */
static err_t IAP_tftp_send_ack_packet(struct udp_pcb *upcb, const ip_addr_t *to, int to_port, int block)
{
 8000f16:	b580      	push	{r7, lr}
 8000f18:	b088      	sub	sp, #32
 8000f1a:	af00      	add	r7, sp, #0
 8000f1c:	60f8      	str	r0, [r7, #12]
 8000f1e:	60b9      	str	r1, [r7, #8]
 8000f20:	607a      	str	r2, [r7, #4]
 8000f22:	603b      	str	r3, [r7, #0]
  struct pbuf *pkt_buf; /* Chain of pbuf's to be sent */

  /* create the maximum possible size packet that a TFTP ACK packet can be */
  char packet[TFTP_ACK_PKT_LEN];

	memset(packet, 0, TFTP_ACK_PKT_LEN *sizeof(char));
 8000f24:	f107 0314 	add.w	r3, r7, #20
 8000f28:	2204      	movs	r2, #4
 8000f2a:	2100      	movs	r1, #0
 8000f2c:	4618      	mov	r0, r3
 8000f2e:	f012 fc7e 	bl	801382e <memset>

  /* define the first two bytes of the packet */
  IAP_tftp_set_opcode(packet, TFTP_ACK);
 8000f32:	f107 0314 	add.w	r3, r7, #20
 8000f36:	2104      	movs	r1, #4
 8000f38:	4618      	mov	r0, r3
 8000f3a:	f7ff ffc5 	bl	8000ec8 <IAP_tftp_set_opcode>
   * If we are ACK'ing a DATA pkt then the block number echoes that of the DATA pkt being ACK'd (duh)
   * If we are ACK'ing a WRQ pkt then the block number is always 0
   * RRQ packets are never sent ACK pkts by the server, instead the server sends DATA pkts to the
   * host which are, obviously, used as the "acknowledgement".  This saves from having to sEndTransferboth
   * an ACK packet and a DATA packet for RRQs - see RFC1350 for more info.  */
  IAP_tftp_set_block(packet, block);
 8000f3e:	683b      	ldr	r3, [r7, #0]
 8000f40:	b29a      	uxth	r2, r3
 8000f42:	f107 0314 	add.w	r3, r7, #20
 8000f46:	4611      	mov	r1, r2
 8000f48:	4618      	mov	r0, r3
 8000f4a:	f7ff ffd0 	bl	8000eee <IAP_tftp_set_block>

  /* PBUF_TRANSPORT - specifies the transport layer */
  pkt_buf = pbuf_alloc(PBUF_TRANSPORT, TFTP_ACK_PKT_LEN, PBUF_POOL);
 8000f4e:	f44f 72c1 	mov.w	r2, #386	; 0x182
 8000f52:	2104      	movs	r1, #4
 8000f54:	2036      	movs	r0, #54	; 0x36
 8000f56:	f008 ff71 	bl	8009e3c <pbuf_alloc>
 8000f5a:	61f8      	str	r0, [r7, #28]

  if (!pkt_buf)      /*if the packet pbuf == NULL exit and EndTransfertransmission */
 8000f5c:	69fb      	ldr	r3, [r7, #28]
 8000f5e:	2b00      	cmp	r3, #0
 8000f60:	d102      	bne.n	8000f68 <IAP_tftp_send_ack_packet+0x52>
  {
    return ERR_MEM;
 8000f62:	f04f 33ff 	mov.w	r3, #4294967295
 8000f66:	e011      	b.n	8000f8c <IAP_tftp_send_ack_packet+0x76>
  }

  /* Copy the original data buffer over to the packet buffer's payload */
  memcpy(pkt_buf->payload, packet, TFTP_ACK_PKT_LEN);
 8000f68:	69fb      	ldr	r3, [r7, #28]
 8000f6a:	685b      	ldr	r3, [r3, #4]
 8000f6c:	697a      	ldr	r2, [r7, #20]
 8000f6e:	601a      	str	r2, [r3, #0]

  /* Sending packet by UDP protocol */
  err = udp_sendto(upcb, pkt_buf, to, to_port);
 8000f70:	687b      	ldr	r3, [r7, #4]
 8000f72:	b29b      	uxth	r3, r3
 8000f74:	68ba      	ldr	r2, [r7, #8]
 8000f76:	69f9      	ldr	r1, [r7, #28]
 8000f78:	68f8      	ldr	r0, [r7, #12]
 8000f7a:	f00f fa91 	bl	80104a0 <udp_sendto>
 8000f7e:	4603      	mov	r3, r0
 8000f80:	76fb      	strb	r3, [r7, #27]

  /* free the buffer pbuf */
  pbuf_free(pkt_buf);
 8000f82:	69f8      	ldr	r0, [r7, #28]
 8000f84:	f009 fa3e 	bl	800a404 <pbuf_free>

  return err;
 8000f88:	f997 301b 	ldrsb.w	r3, [r7, #27]
}
 8000f8c:	4618      	mov	r0, r3
 8000f8e:	3720      	adds	r7, #32
 8000f90:	46bd      	mov	sp, r7
 8000f92:	bd80      	pop	{r7, pc}

08000f94 <IAP_wrq_recv_callback>:
  * @param  ip_addr: pointer on the receive IP_address structure
  * @param  port: receive port address
  * @retval None
  */
static void IAP_wrq_recv_callback(void *_args, struct udp_pcb *upcb, struct pbuf *pkt_buf, const ip_addr_t *addr, u16_t port)
{
 8000f94:	b590      	push	{r4, r7, lr}
 8000f96:	f5ad 7d07 	sub.w	sp, sp, #540	; 0x21c
 8000f9a:	af00      	add	r7, sp, #0
 8000f9c:	f507 7406 	add.w	r4, r7, #536	; 0x218
 8000fa0:	f5a4 7403 	sub.w	r4, r4, #524	; 0x20c
 8000fa4:	6020      	str	r0, [r4, #0]
 8000fa6:	f507 7006 	add.w	r0, r7, #536	; 0x218
 8000faa:	f5a0 7004 	sub.w	r0, r0, #528	; 0x210
 8000fae:	6001      	str	r1, [r0, #0]
 8000fb0:	f507 7106 	add.w	r1, r7, #536	; 0x218
 8000fb4:	f5a1 7105 	sub.w	r1, r1, #532	; 0x214
 8000fb8:	600a      	str	r2, [r1, #0]
 8000fba:	f507 7206 	add.w	r2, r7, #536	; 0x218
 8000fbe:	f5a2 7206 	sub.w	r2, r2, #536	; 0x218
 8000fc2:	6013      	str	r3, [r2, #0]
  tftp_connection_args *args = (tftp_connection_args *)_args;
 8000fc4:	f507 7306 	add.w	r3, r7, #536	; 0x218
 8000fc8:	f5a3 7303 	sub.w	r3, r3, #524	; 0x20c
 8000fcc:	681b      	ldr	r3, [r3, #0]
 8000fce:	f8c7 3210 	str.w	r3, [r7, #528]	; 0x210
  uint32_t data_buffer[128];
  uint16_t count=0;
 8000fd2:	2300      	movs	r3, #0
 8000fd4:	f8a7 3216 	strh.w	r3, [r7, #534]	; 0x216

  if (pkt_buf->len != pkt_buf->tot_len)
 8000fd8:	f507 7306 	add.w	r3, r7, #536	; 0x218
 8000fdc:	f5a3 7305 	sub.w	r3, r3, #532	; 0x214
 8000fe0:	681b      	ldr	r3, [r3, #0]
 8000fe2:	895a      	ldrh	r2, [r3, #10]
 8000fe4:	f507 7306 	add.w	r3, r7, #536	; 0x218
 8000fe8:	f5a3 7305 	sub.w	r3, r3, #532	; 0x214
 8000fec:	681b      	ldr	r3, [r3, #0]
 8000fee:	891b      	ldrh	r3, [r3, #8]
 8000ff0:	429a      	cmp	r2, r3
 8000ff2:	f040 80c8 	bne.w	8001186 <IAP_wrq_recv_callback+0x1f2>
  {
    return;
  }

  /* Does this packet have any valid data to write? */
  if ((pkt_buf->len > TFTP_DATA_PKT_HDR_LEN) &&
 8000ff6:	f507 7306 	add.w	r3, r7, #536	; 0x218
 8000ffa:	f5a3 7305 	sub.w	r3, r3, #532	; 0x214
 8000ffe:	681b      	ldr	r3, [r3, #0]
 8001000:	895b      	ldrh	r3, [r3, #10]
 8001002:	2b04      	cmp	r3, #4
 8001004:	d96f      	bls.n	80010e6 <IAP_wrq_recv_callback+0x152>
      (IAP_tftp_extract_block(pkt_buf->payload) == (args->block + 1)))
 8001006:	f507 7306 	add.w	r3, r7, #536	; 0x218
 800100a:	f5a3 7305 	sub.w	r3, r3, #532	; 0x214
 800100e:	681b      	ldr	r3, [r3, #0]
 8001010:	685b      	ldr	r3, [r3, #4]
 8001012:	4618      	mov	r0, r3
 8001014:	f7ff ff47 	bl	8000ea6 <IAP_tftp_extract_block>
 8001018:	4603      	mov	r3, r0
 800101a:	461a      	mov	r2, r3
 800101c:	f8d7 3210 	ldr.w	r3, [r7, #528]	; 0x210
 8001020:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8001024:	3301      	adds	r3, #1
  if ((pkt_buf->len > TFTP_DATA_PKT_HDR_LEN) &&
 8001026:	429a      	cmp	r2, r3
 8001028:	d15d      	bne.n	80010e6 <IAP_wrq_recv_callback+0x152>
  {
    /* copy packet payload to data_buffer */
    pbuf_copy_partial(pkt_buf, data_buffer, pkt_buf->len - TFTP_DATA_PKT_HDR_LEN,
 800102a:	f507 7306 	add.w	r3, r7, #536	; 0x218
 800102e:	f5a3 7305 	sub.w	r3, r3, #532	; 0x214
 8001032:	681b      	ldr	r3, [r3, #0]
 8001034:	895b      	ldrh	r3, [r3, #10]
 8001036:	3b04      	subs	r3, #4
 8001038:	b29a      	uxth	r2, r3
 800103a:	f107 0110 	add.w	r1, r7, #16
 800103e:	f507 7306 	add.w	r3, r7, #536	; 0x218
 8001042:	f5a3 7005 	sub.w	r0, r3, #532	; 0x214
 8001046:	2304      	movs	r3, #4
 8001048:	6800      	ldr	r0, [r0, #0]
 800104a:	f009 fbe1 	bl	800a810 <pbuf_copy_partial>
                      TFTP_DATA_PKT_HDR_LEN);

    total_count += pkt_buf->len - TFTP_DATA_PKT_HDR_LEN;
 800104e:	f507 7306 	add.w	r3, r7, #536	; 0x218
 8001052:	f5a3 7305 	sub.w	r3, r3, #532	; 0x214
 8001056:	681b      	ldr	r3, [r3, #0]
 8001058:	895b      	ldrh	r3, [r3, #10]
 800105a:	461a      	mov	r2, r3
 800105c:	4b4c      	ldr	r3, [pc, #304]	; (8001190 <IAP_wrq_recv_callback+0x1fc>)
 800105e:	681b      	ldr	r3, [r3, #0]
 8001060:	4413      	add	r3, r2
 8001062:	3b04      	subs	r3, #4
 8001064:	4a4a      	ldr	r2, [pc, #296]	; (8001190 <IAP_wrq_recv_callback+0x1fc>)
 8001066:	6013      	str	r3, [r2, #0]
    
    count = (pkt_buf->len - TFTP_DATA_PKT_HDR_LEN)/4;
 8001068:	f507 7306 	add.w	r3, r7, #536	; 0x218
 800106c:	f5a3 7305 	sub.w	r3, r3, #532	; 0x214
 8001070:	681b      	ldr	r3, [r3, #0]
 8001072:	895b      	ldrh	r3, [r3, #10]
 8001074:	3b04      	subs	r3, #4
 8001076:	2b00      	cmp	r3, #0
 8001078:	da00      	bge.n	800107c <IAP_wrq_recv_callback+0xe8>
 800107a:	3303      	adds	r3, #3
 800107c:	109b      	asrs	r3, r3, #2
 800107e:	f8a7 3216 	strh.w	r3, [r7, #534]	; 0x216
    if (((pkt_buf->len - TFTP_DATA_PKT_HDR_LEN)%4)!=0)
 8001082:	f507 7306 	add.w	r3, r7, #536	; 0x218
 8001086:	f5a3 7305 	sub.w	r3, r3, #532	; 0x214
 800108a:	681b      	ldr	r3, [r3, #0]
 800108c:	895b      	ldrh	r3, [r3, #10]
 800108e:	3b04      	subs	r3, #4
 8001090:	f003 0303 	and.w	r3, r3, #3
 8001094:	2b00      	cmp	r3, #0
 8001096:	d004      	beq.n	80010a2 <IAP_wrq_recv_callback+0x10e>
    count++;
 8001098:	f8b7 3216 	ldrh.w	r3, [r7, #534]	; 0x216
 800109c:	3301      	adds	r3, #1
 800109e:	f8a7 3216 	strh.w	r3, [r7, #534]	; 0x216

    /* Write received data in Flash */
    FLASH_If_Write(&Flash_Write_Address, data_buffer ,count);
 80010a2:	f8b7 2216 	ldrh.w	r2, [r7, #534]	; 0x216
 80010a6:	f107 0310 	add.w	r3, r7, #16
 80010aa:	4619      	mov	r1, r3
 80010ac:	4839      	ldr	r0, [pc, #228]	; (8001194 <IAP_wrq_recv_callback+0x200>)
 80010ae:	f7ff fa91 	bl	80005d4 <FLASH_If_Write>

    /* update our block number to match the block number just received */
    args->block++;
 80010b2:	f8d7 3210 	ldr.w	r3, [r7, #528]	; 0x210
 80010b6:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80010ba:	1c5a      	adds	r2, r3, #1
 80010bc:	f8d7 3210 	ldr.w	r3, [r7, #528]	; 0x210
 80010c0:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    /* update total bytes  */
    (args->tot_bytes) += (pkt_buf->len - TFTP_DATA_PKT_HDR_LEN);
 80010c4:	f8d7 3210 	ldr.w	r3, [r7, #528]	; 0x210
 80010c8:	f8d3 2218 	ldr.w	r2, [r3, #536]	; 0x218
 80010cc:	f507 7306 	add.w	r3, r7, #536	; 0x218
 80010d0:	f5a3 7305 	sub.w	r3, r3, #532	; 0x214
 80010d4:	681b      	ldr	r3, [r3, #0]
 80010d6:	895b      	ldrh	r3, [r3, #10]
 80010d8:	3b04      	subs	r3, #4
 80010da:	441a      	add	r2, r3
 80010dc:	f8d7 3210 	ldr.w	r3, [r7, #528]	; 0x210
 80010e0:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218
 80010e4:	e01a      	b.n	800111c <IAP_wrq_recv_callback+0x188>

    /* This is a valid pkt but it has no data.  This would occur if the file being
       written is an exact multiple of 512 bytes.  In this case, the args->block
       value must still be updated, but we can skip everything else.    */
  }
  else if (IAP_tftp_extract_block(pkt_buf->payload) == (args->block + 1))
 80010e6:	f507 7306 	add.w	r3, r7, #536	; 0x218
 80010ea:	f5a3 7305 	sub.w	r3, r3, #532	; 0x214
 80010ee:	681b      	ldr	r3, [r3, #0]
 80010f0:	685b      	ldr	r3, [r3, #4]
 80010f2:	4618      	mov	r0, r3
 80010f4:	f7ff fed7 	bl	8000ea6 <IAP_tftp_extract_block>
 80010f8:	4603      	mov	r3, r0
 80010fa:	461a      	mov	r2, r3
 80010fc:	f8d7 3210 	ldr.w	r3, [r7, #528]	; 0x210
 8001100:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8001104:	3301      	adds	r3, #1
 8001106:	429a      	cmp	r2, r3
 8001108:	d108      	bne.n	800111c <IAP_wrq_recv_callback+0x188>
  {
    /* update our block number to match the block number just received  */
    args->block++;
 800110a:	f8d7 3210 	ldr.w	r3, [r7, #528]	; 0x210
 800110e:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8001112:	1c5a      	adds	r2, r3, #1
 8001114:	f8d7 3210 	ldr.w	r3, [r7, #528]	; 0x210
 8001118:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  }

  /* Send the appropriate ACK pkt*/
  IAP_tftp_send_ack_packet(upcb, addr, port, args->block);
 800111c:	f8b7 2228 	ldrh.w	r2, [r7, #552]	; 0x228
 8001120:	f8d7 3210 	ldr.w	r3, [r7, #528]	; 0x210
 8001124:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8001128:	f507 7106 	add.w	r1, r7, #536	; 0x218
 800112c:	f5a1 7106 	sub.w	r1, r1, #536	; 0x218
 8001130:	f507 7006 	add.w	r0, r7, #536	; 0x218
 8001134:	f5a0 7004 	sub.w	r0, r0, #528	; 0x210
 8001138:	6809      	ldr	r1, [r1, #0]
 800113a:	6800      	ldr	r0, [r0, #0]
 800113c:	f7ff feeb 	bl	8000f16 <IAP_tftp_send_ack_packet>

  /* If the last write returned less than the maximum TFTP data pkt length,
   * then we've received the whole file and so we can quit (this is how TFTP
   * signals the EndTransferof a transfer!)
   */
  if (pkt_buf->len < TFTP_DATA_PKT_LEN_MAX)
 8001140:	f507 7306 	add.w	r3, r7, #536	; 0x218
 8001144:	f5a3 7305 	sub.w	r3, r3, #532	; 0x214
 8001148:	681b      	ldr	r3, [r3, #0]
 800114a:	895b      	ldrh	r3, [r3, #10]
 800114c:	f5b3 7f01 	cmp.w	r3, #516	; 0x204
 8001150:	d211      	bcs.n	8001176 <IAP_wrq_recv_callback+0x1e2>
  {
    IAP_tftp_cleanup_wr(upcb, args);
 8001152:	f507 7306 	add.w	r3, r7, #536	; 0x218
 8001156:	f5a3 7304 	sub.w	r3, r3, #528	; 0x210
 800115a:	f8d7 1210 	ldr.w	r1, [r7, #528]	; 0x210
 800115e:	6818      	ldr	r0, [r3, #0]
 8001160:	f000 f8a2 	bl	80012a8 <IAP_tftp_cleanup_wr>
    pbuf_free(pkt_buf);
 8001164:	f507 7306 	add.w	r3, r7, #536	; 0x218
 8001168:	f5a3 7305 	sub.w	r3, r3, #532	; 0x214
 800116c:	6818      	ldr	r0, [r3, #0]
 800116e:	f009 f949 	bl	800a404 <pbuf_free>

    NVIC_SystemReset();
 8001172:	f7ff fe75 	bl	8000e60 <__NVIC_SystemReset>

  }
  else
  {
    pbuf_free(pkt_buf);
 8001176:	f507 7306 	add.w	r3, r7, #536	; 0x218
 800117a:	f5a3 7305 	sub.w	r3, r3, #532	; 0x214
 800117e:	6818      	ldr	r0, [r3, #0]
 8001180:	f009 f940 	bl	800a404 <pbuf_free>
    return;
 8001184:	e000      	b.n	8001188 <IAP_wrq_recv_callback+0x1f4>
    return;
 8001186:	bf00      	nop
  }
}
 8001188:	f507 7707 	add.w	r7, r7, #540	; 0x21c
 800118c:	46bd      	mov	sp, r7
 800118e:	bd90      	pop	{r4, r7, pc}
 8001190:	200003e8 	.word	0x200003e8
 8001194:	200003e0 	.word	0x200003e0

08001198 <IAP_tftp_process_write>:
  * @param  to: pointer on the receive IP address
  * @param  to_port: receive port number
  * @retval None
  */
static int IAP_tftp_process_write(struct udp_pcb *upcb, const ip_addr_t *to, int to_port)
{
 8001198:	b580      	push	{r7, lr}
 800119a:	b086      	sub	sp, #24
 800119c:	af00      	add	r7, sp, #0
 800119e:	60f8      	str	r0, [r7, #12]
 80011a0:	60b9      	str	r1, [r7, #8]
 80011a2:	607a      	str	r2, [r7, #4]
  tftp_connection_args *args = NULL;
 80011a4:	2300      	movs	r3, #0
 80011a6:	617b      	str	r3, [r7, #20]
  /* This function is called from a callback,
  * therefore interrupts are disabled,
  * therefore we can use regular malloc   */
  args = mem_malloc(sizeof *args);
 80011a8:	f44f 700a 	mov.w	r0, #552	; 0x228
 80011ac:	f007 fffa 	bl	80091a4 <mem_malloc>
 80011b0:	6178      	str	r0, [r7, #20]
  if (!args)
 80011b2:	697b      	ldr	r3, [r7, #20]
 80011b4:	2b00      	cmp	r3, #0
 80011b6:	d105      	bne.n	80011c4 <IAP_tftp_process_write+0x2c>
  {
    IAP_tftp_cleanup_wr(upcb, args);
 80011b8:	6979      	ldr	r1, [r7, #20]
 80011ba:	68f8      	ldr	r0, [r7, #12]
 80011bc:	f000 f874 	bl	80012a8 <IAP_tftp_cleanup_wr>
    return 0;
 80011c0:	2300      	movs	r3, #0
 80011c2:	e02c      	b.n	800121e <IAP_tftp_process_write+0x86>
  }

  args->op = TFTP_WRQ;
 80011c4:	697b      	ldr	r3, [r7, #20]
 80011c6:	2202      	movs	r2, #2
 80011c8:	601a      	str	r2, [r3, #0]
  args->to_ip.addr = to->addr;
 80011ca:	68bb      	ldr	r3, [r7, #8]
 80011cc:	681a      	ldr	r2, [r3, #0]
 80011ce:	697b      	ldr	r3, [r7, #20]
 80011d0:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c
  args->to_port = to_port;
 80011d4:	697b      	ldr	r3, [r7, #20]
 80011d6:	687a      	ldr	r2, [r7, #4]
 80011d8:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210
  /* the block # used as a positive response to a WRQ is _always_ 0!!! (see RFC1350)  */
  args->block = 0;
 80011dc:	697b      	ldr	r3, [r7, #20]
 80011de:	2200      	movs	r2, #0
 80011e0:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  args->tot_bytes = 0;
 80011e4:	697b      	ldr	r3, [r7, #20]
 80011e6:	2200      	movs	r2, #0
 80011e8:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  /* set callback for receives on this UDP PCB (Protocol Control Block) */
  udp_recv(upcb, IAP_wrq_recv_callback, args);
 80011ec:	697a      	ldr	r2, [r7, #20]
 80011ee:	490e      	ldr	r1, [pc, #56]	; (8001228 <IAP_tftp_process_write+0x90>)
 80011f0:	68f8      	ldr	r0, [r7, #12]
 80011f2:	f00f fbcf 	bl	8010994 <udp_recv>

  total_count =0;
 80011f6:	4b0d      	ldr	r3, [pc, #52]	; (800122c <IAP_tftp_process_write+0x94>)
 80011f8:	2200      	movs	r2, #0
 80011fa:	601a      	str	r2, [r3, #0]

  /* init flash */
  FLASH_If_Init();
 80011fc:	f7ff f9ba 	bl	8000574 <FLASH_If_Init>

  /* erase user flash area */
  FLASH_If_Erase(USER_FLASH_FIRST_PAGE_ADDRESS);
 8001200:	480b      	ldr	r0, [pc, #44]	; (8001230 <IAP_tftp_process_write+0x98>)
 8001202:	f7ff f9bd 	bl	8000580 <FLASH_If_Erase>

  Flash_Write_Address = USER_FLASH_FIRST_PAGE_ADDRESS;
 8001206:	4b0b      	ldr	r3, [pc, #44]	; (8001234 <IAP_tftp_process_write+0x9c>)
 8001208:	4a09      	ldr	r2, [pc, #36]	; (8001230 <IAP_tftp_process_write+0x98>)
 800120a:	601a      	str	r2, [r3, #0]
  /* initiate the write transaction by sending the first ack */
  IAP_tftp_send_ack_packet(upcb, to, to_port, args->block);
 800120c:	697b      	ldr	r3, [r7, #20]
 800120e:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8001212:	687a      	ldr	r2, [r7, #4]
 8001214:	68b9      	ldr	r1, [r7, #8]
 8001216:	68f8      	ldr	r0, [r7, #12]
 8001218:	f7ff fe7d 	bl	8000f16 <IAP_tftp_send_ack_packet>
  return 0;
 800121c:	2300      	movs	r3, #0
}
 800121e:	4618      	mov	r0, r3
 8001220:	3718      	adds	r7, #24
 8001222:	46bd      	mov	sp, r7
 8001224:	bd80      	pop	{r7, pc}
 8001226:	bf00      	nop
 8001228:	08000f95 	.word	0x08000f95
 800122c:	200003e8 	.word	0x200003e8
 8001230:	08020000 	.word	0x08020000
 8001234:	200003e0 	.word	0x200003e0

08001238 <IAP_tftp_recv_callback>:
  * @param  port: receive port number
  * @retval None
  */
static void IAP_tftp_recv_callback(void *arg, struct udp_pcb *upcb, struct pbuf *pkt_buf,
                        const ip_addr_t *addr, u16_t port)
{
 8001238:	b580      	push	{r7, lr}
 800123a:	b086      	sub	sp, #24
 800123c:	af00      	add	r7, sp, #0
 800123e:	60f8      	str	r0, [r7, #12]
 8001240:	60b9      	str	r1, [r7, #8]
 8001242:	607a      	str	r2, [r7, #4]
 8001244:	603b      	str	r3, [r7, #0]
  struct udp_pcb *upcb_tftp_data;
  err_t err;


  /* create new UDP PCB structure */
  upcb_tftp_data = udp_new();
 8001246:	f00f fc07 	bl	8010a58 <udp_new>
 800124a:	6178      	str	r0, [r7, #20]
  if (!upcb_tftp_data)
 800124c:	697b      	ldr	r3, [r7, #20]
 800124e:	2b00      	cmp	r3, #0
 8001250:	d022      	beq.n	8001298 <IAP_tftp_recv_callback+0x60>

  /* bind to port 0 to receive next available free port */
  /* NOTE:  This is how TFTP works.  There is a UDP PCB for the standard port
  * 69 which al transactions begin communication on, however, _all_ subsequent
  * transactions for a given "stream" occur on another port  */
  err = udp_bind(upcb_tftp_data, IP_ADDR_ANY, 0);
 8001252:	2200      	movs	r2, #0
 8001254:	4913      	ldr	r1, [pc, #76]	; (80012a4 <IAP_tftp_recv_callback+0x6c>)
 8001256:	6978      	ldr	r0, [r7, #20]
 8001258:	f00f faec 	bl	8010834 <udp_bind>
 800125c:	4603      	mov	r3, r0
 800125e:	74fb      	strb	r3, [r7, #19]
  if (err != ERR_OK)
 8001260:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8001264:	2b00      	cmp	r3, #0
 8001266:	d119      	bne.n	800129c <IAP_tftp_recv_callback+0x64>
  {
    /* Unable to bind to port */
    return;
  }

  op = IAP_tftp_decode_op(pkt_buf->payload);
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	685b      	ldr	r3, [r3, #4]
 800126c:	4618      	mov	r0, r3
 800126e:	f7ff fe0d 	bl	8000e8c <IAP_tftp_decode_op>
 8001272:	4603      	mov	r3, r0
 8001274:	74bb      	strb	r3, [r7, #18]
  if (op != TFTP_WRQ)
 8001276:	7cbb      	ldrb	r3, [r7, #18]
 8001278:	2b02      	cmp	r3, #2
 800127a:	d003      	beq.n	8001284 <IAP_tftp_recv_callback+0x4c>
  {
    /* remove PCB */
    udp_remove(upcb_tftp_data);
 800127c:	6978      	ldr	r0, [r7, #20]
 800127e:	f00f fba9 	bl	80109d4 <udp_remove>
 8001282:	e005      	b.n	8001290 <IAP_tftp_recv_callback+0x58>
  }
  else
  {

    /* Start the TFTP write mode*/
    IAP_tftp_process_write(upcb_tftp_data, addr, port);
 8001284:	8c3b      	ldrh	r3, [r7, #32]
 8001286:	461a      	mov	r2, r3
 8001288:	6839      	ldr	r1, [r7, #0]
 800128a:	6978      	ldr	r0, [r7, #20]
 800128c:	f7ff ff84 	bl	8001198 <IAP_tftp_process_write>
  }
  pbuf_free(pkt_buf);
 8001290:	6878      	ldr	r0, [r7, #4]
 8001292:	f009 f8b7 	bl	800a404 <pbuf_free>
 8001296:	e002      	b.n	800129e <IAP_tftp_recv_callback+0x66>
    return;
 8001298:	bf00      	nop
 800129a:	e000      	b.n	800129e <IAP_tftp_recv_callback+0x66>
    return;
 800129c:	bf00      	nop
}
 800129e:	3718      	adds	r7, #24
 80012a0:	46bd      	mov	sp, r7
 80012a2:	bd80      	pop	{r7, pc}
 80012a4:	080174c0 	.word	0x080174c0

080012a8 <IAP_tftp_cleanup_wr>:
  * @param  upcb: pointer on udp_pcb structure
  * @param  args: pointer on tftp_connection arguments
  * @retval None
  */
static void IAP_tftp_cleanup_wr(struct udp_pcb *upcb, tftp_connection_args *args)
{
 80012a8:	b580      	push	{r7, lr}
 80012aa:	b082      	sub	sp, #8
 80012ac:	af00      	add	r7, sp, #0
 80012ae:	6078      	str	r0, [r7, #4]
 80012b0:	6039      	str	r1, [r7, #0]
  /* Free the tftp_connection_args structure */
  mem_free(args);
 80012b2:	6838      	ldr	r0, [r7, #0]
 80012b4:	f007 fd86 	bl	8008dc4 <mem_free>

  /* Disconnect the udp_pcb */
  udp_disconnect(upcb);
 80012b8:	6878      	ldr	r0, [r7, #4]
 80012ba:	f00f fb43 	bl	8010944 <udp_disconnect>

  /* close the connection */
  udp_remove(upcb);
 80012be:	6878      	ldr	r0, [r7, #4]
 80012c0:	f00f fb88 	bl	80109d4 <udp_remove>

  /* reset the callback function */
  udp_recv(UDPpcb, IAP_tftp_recv_callback, NULL);
 80012c4:	4b05      	ldr	r3, [pc, #20]	; (80012dc <IAP_tftp_cleanup_wr+0x34>)
 80012c6:	681b      	ldr	r3, [r3, #0]
 80012c8:	2200      	movs	r2, #0
 80012ca:	4905      	ldr	r1, [pc, #20]	; (80012e0 <IAP_tftp_cleanup_wr+0x38>)
 80012cc:	4618      	mov	r0, r3
 80012ce:	f00f fb61 	bl	8010994 <udp_recv>

}
 80012d2:	bf00      	nop
 80012d4:	3708      	adds	r7, #8
 80012d6:	46bd      	mov	sp, r7
 80012d8:	bd80      	pop	{r7, pc}
 80012da:	bf00      	nop
 80012dc:	200003e4 	.word	0x200003e4
 80012e0:	08001239 	.word	0x08001239

080012e4 <IAP_tftpd_init>:
  * @brief  Creates and initializes a UDP PCB for TFTP receive operation
  * @param  None
  * @retval None
  */
void IAP_tftpd_init(void)
{
 80012e4:	b580      	push	{r7, lr}
 80012e6:	b082      	sub	sp, #8
 80012e8:	af00      	add	r7, sp, #0
  err_t err;
  unsigned port = 69; /* 69 is the port used for TFTP protocol initial transaction */
 80012ea:	2345      	movs	r3, #69	; 0x45
 80012ec:	607b      	str	r3, [r7, #4]

  /* create a new UDP PCB structure  */
  UDPpcb = udp_new();
 80012ee:	f00f fbb3 	bl	8010a58 <udp_new>
 80012f2:	4603      	mov	r3, r0
 80012f4:	4a0f      	ldr	r2, [pc, #60]	; (8001334 <IAP_tftpd_init+0x50>)
 80012f6:	6013      	str	r3, [r2, #0]
  if (!UDPpcb)
 80012f8:	4b0e      	ldr	r3, [pc, #56]	; (8001334 <IAP_tftpd_init+0x50>)
 80012fa:	681b      	ldr	r3, [r3, #0]
 80012fc:	2b00      	cmp	r3, #0
 80012fe:	d015      	beq.n	800132c <IAP_tftpd_init+0x48>
    /* Error creating PCB. Out of Memory  */
    return;
  }

  /* Bind this PCB to port 69  */
  err = udp_bind(UDPpcb, IP_ADDR_ANY, port);
 8001300:	4b0c      	ldr	r3, [pc, #48]	; (8001334 <IAP_tftpd_init+0x50>)
 8001302:	681b      	ldr	r3, [r3, #0]
 8001304:	687a      	ldr	r2, [r7, #4]
 8001306:	b292      	uxth	r2, r2
 8001308:	490b      	ldr	r1, [pc, #44]	; (8001338 <IAP_tftpd_init+0x54>)
 800130a:	4618      	mov	r0, r3
 800130c:	f00f fa92 	bl	8010834 <udp_bind>
 8001310:	4603      	mov	r3, r0
 8001312:	70fb      	strb	r3, [r7, #3]
  if (err == ERR_OK)
 8001314:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001318:	2b00      	cmp	r3, #0
 800131a:	d108      	bne.n	800132e <IAP_tftpd_init+0x4a>
  {
    /* Initialize receive callback function  */
    udp_recv(UDPpcb, IAP_tftp_recv_callback, NULL);
 800131c:	4b05      	ldr	r3, [pc, #20]	; (8001334 <IAP_tftpd_init+0x50>)
 800131e:	681b      	ldr	r3, [r3, #0]
 8001320:	2200      	movs	r2, #0
 8001322:	4906      	ldr	r1, [pc, #24]	; (800133c <IAP_tftpd_init+0x58>)
 8001324:	4618      	mov	r0, r3
 8001326:	f00f fb35 	bl	8010994 <udp_recv>
 800132a:	e000      	b.n	800132e <IAP_tftpd_init+0x4a>
    return;
 800132c:	bf00      	nop
  }
  else
  {
  }
}
 800132e:	3708      	adds	r7, #8
 8001330:	46bd      	mov	sp, r7
 8001332:	bd80      	pop	{r7, pc}
 8001334:	200003e4 	.word	0x200003e4
 8001338:	080174c0 	.word	0x080174c0
 800133c:	08001239 	.word	0x08001239

08001340 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001340:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001378 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001344:	480d      	ldr	r0, [pc, #52]	; (800137c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001346:	490e      	ldr	r1, [pc, #56]	; (8001380 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001348:	4a0e      	ldr	r2, [pc, #56]	; (8001384 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800134a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800134c:	e002      	b.n	8001354 <LoopCopyDataInit>

0800134e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800134e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001350:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001352:	3304      	adds	r3, #4

08001354 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001354:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001356:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001358:	d3f9      	bcc.n	800134e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800135a:	4a0b      	ldr	r2, [pc, #44]	; (8001388 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 800135c:	4c0b      	ldr	r4, [pc, #44]	; (800138c <LoopFillZerobss+0x26>)
  movs r3, #0
 800135e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001360:	e001      	b.n	8001366 <LoopFillZerobss>

08001362 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001362:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001364:	3204      	adds	r2, #4

08001366 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001366:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001368:	d3fb      	bcc.n	8001362 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800136a:	f7ff fd67 	bl	8000e3c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800136e:	f012 fa19 	bl	80137a4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001372:	f7ff f98f 	bl	8000694 <main>
  bx  lr    
 8001376:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001378:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800137c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001380:	20000094 	.word	0x20000094
  ldr r2, =_sidata
 8001384:	08017634 	.word	0x08017634
  ldr r2, =_sbss
 8001388:	20000094 	.word	0x20000094
  ldr r4, =_ebss
 800138c:	2000c8b8 	.word	0x2000c8b8

08001390 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001390:	e7fe      	b.n	8001390 <ADC_IRQHandler>

08001392 <LAN8742_RegisterBusIO>:
  * @param  ioctx: holds device IO functions.  
  * @retval LAN8742_STATUS_OK  if OK
  *         LAN8742_STATUS_ERROR if missing mandatory function
  */
int32_t  LAN8742_RegisterBusIO(lan8742_Object_t *pObj, lan8742_IOCtx_t *ioctx)
{
 8001392:	b480      	push	{r7}
 8001394:	b083      	sub	sp, #12
 8001396:	af00      	add	r7, sp, #0
 8001398:	6078      	str	r0, [r7, #4]
 800139a:	6039      	str	r1, [r7, #0]
  if(!pObj || !ioctx->ReadReg || !ioctx->WriteReg || !ioctx->GetTick)
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	2b00      	cmp	r3, #0
 80013a0:	d00b      	beq.n	80013ba <LAN8742_RegisterBusIO+0x28>
 80013a2:	683b      	ldr	r3, [r7, #0]
 80013a4:	68db      	ldr	r3, [r3, #12]
 80013a6:	2b00      	cmp	r3, #0
 80013a8:	d007      	beq.n	80013ba <LAN8742_RegisterBusIO+0x28>
 80013aa:	683b      	ldr	r3, [r7, #0]
 80013ac:	689b      	ldr	r3, [r3, #8]
 80013ae:	2b00      	cmp	r3, #0
 80013b0:	d003      	beq.n	80013ba <LAN8742_RegisterBusIO+0x28>
 80013b2:	683b      	ldr	r3, [r7, #0]
 80013b4:	691b      	ldr	r3, [r3, #16]
 80013b6:	2b00      	cmp	r3, #0
 80013b8:	d102      	bne.n	80013c0 <LAN8742_RegisterBusIO+0x2e>
  {
    return LAN8742_STATUS_ERROR;
 80013ba:	f04f 33ff 	mov.w	r3, #4294967295
 80013be:	e014      	b.n	80013ea <LAN8742_RegisterBusIO+0x58>
  }
  
  pObj->IO.Init = ioctx->Init;
 80013c0:	683b      	ldr	r3, [r7, #0]
 80013c2:	681a      	ldr	r2, [r3, #0]
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	609a      	str	r2, [r3, #8]
  pObj->IO.DeInit = ioctx->DeInit;
 80013c8:	683b      	ldr	r3, [r7, #0]
 80013ca:	685a      	ldr	r2, [r3, #4]
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	60da      	str	r2, [r3, #12]
  pObj->IO.ReadReg = ioctx->ReadReg;
 80013d0:	683b      	ldr	r3, [r7, #0]
 80013d2:	68da      	ldr	r2, [r3, #12]
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	615a      	str	r2, [r3, #20]
  pObj->IO.WriteReg = ioctx->WriteReg;
 80013d8:	683b      	ldr	r3, [r7, #0]
 80013da:	689a      	ldr	r2, [r3, #8]
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	611a      	str	r2, [r3, #16]
  pObj->IO.GetTick = ioctx->GetTick;
 80013e0:	683b      	ldr	r3, [r7, #0]
 80013e2:	691a      	ldr	r2, [r3, #16]
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	619a      	str	r2, [r3, #24]
  
  return LAN8742_STATUS_OK;
 80013e8:	2300      	movs	r3, #0
}
 80013ea:	4618      	mov	r0, r3
 80013ec:	370c      	adds	r7, #12
 80013ee:	46bd      	mov	sp, r7
 80013f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013f4:	4770      	bx	lr

080013f6 <LAN8742_Init>:
  *         LAN8742_STATUS_READ_ERROR if connot read register
  *         LAN8742_STATUS_WRITE_ERROR if connot write to register
  *         LAN8742_STATUS_RESET_TIMEOUT if cannot perform a software reset
  */
 int32_t LAN8742_Init(lan8742_Object_t *pObj)
 {
 80013f6:	b580      	push	{r7, lr}
 80013f8:	b086      	sub	sp, #24
 80013fa:	af00      	add	r7, sp, #0
 80013fc:	6078      	str	r0, [r7, #4]
   uint32_t tickstart = 0, regvalue = 0, addr = 0;
 80013fe:	2300      	movs	r3, #0
 8001400:	60fb      	str	r3, [r7, #12]
 8001402:	2300      	movs	r3, #0
 8001404:	60bb      	str	r3, [r7, #8]
 8001406:	2300      	movs	r3, #0
 8001408:	617b      	str	r3, [r7, #20]
   int32_t status = LAN8742_STATUS_OK;
 800140a:	2300      	movs	r3, #0
 800140c:	613b      	str	r3, [r7, #16]
   
   if(pObj->Is_Initialized == 0)
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	685b      	ldr	r3, [r3, #4]
 8001412:	2b00      	cmp	r3, #0
 8001414:	d17c      	bne.n	8001510 <LAN8742_Init+0x11a>
   {
     if(pObj->IO.Init != 0)
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	689b      	ldr	r3, [r3, #8]
 800141a:	2b00      	cmp	r3, #0
 800141c:	d002      	beq.n	8001424 <LAN8742_Init+0x2e>
     {
       /* GPIO and Clocks initialization */
       pObj->IO.Init();
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	689b      	ldr	r3, [r3, #8]
 8001422:	4798      	blx	r3
     }
   
     /* for later check */
     pObj->DevAddr = LAN8742_MAX_DEV_ADDR + 1;
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	2220      	movs	r2, #32
 8001428:	601a      	str	r2, [r3, #0]
   
     /* Get the device address from special mode register */  
     for(addr = 0; addr <= LAN8742_MAX_DEV_ADDR; addr ++)
 800142a:	2300      	movs	r3, #0
 800142c:	617b      	str	r3, [r7, #20]
 800142e:	e01c      	b.n	800146a <LAN8742_Init+0x74>
     {
       if(pObj->IO.ReadReg(addr, LAN8742_SMR, &regvalue) < 0)
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	695b      	ldr	r3, [r3, #20]
 8001434:	f107 0208 	add.w	r2, r7, #8
 8001438:	2112      	movs	r1, #18
 800143a:	6978      	ldr	r0, [r7, #20]
 800143c:	4798      	blx	r3
 800143e:	4603      	mov	r3, r0
 8001440:	2b00      	cmp	r3, #0
 8001442:	da03      	bge.n	800144c <LAN8742_Init+0x56>
       { 
         status = LAN8742_STATUS_READ_ERROR;
 8001444:	f06f 0304 	mvn.w	r3, #4
 8001448:	613b      	str	r3, [r7, #16]
         /* Can't read from this device address 
            continue with next address */
         continue;
 800144a:	e00b      	b.n	8001464 <LAN8742_Init+0x6e>
       }
     
       if((regvalue & LAN8742_SMR_PHY_ADDR) == addr)
 800144c:	68bb      	ldr	r3, [r7, #8]
 800144e:	f003 031f 	and.w	r3, r3, #31
 8001452:	697a      	ldr	r2, [r7, #20]
 8001454:	429a      	cmp	r2, r3
 8001456:	d105      	bne.n	8001464 <LAN8742_Init+0x6e>
       {
         pObj->DevAddr = addr;
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	697a      	ldr	r2, [r7, #20]
 800145c:	601a      	str	r2, [r3, #0]
         status = LAN8742_STATUS_OK;
 800145e:	2300      	movs	r3, #0
 8001460:	613b      	str	r3, [r7, #16]
         break;
 8001462:	e005      	b.n	8001470 <LAN8742_Init+0x7a>
     for(addr = 0; addr <= LAN8742_MAX_DEV_ADDR; addr ++)
 8001464:	697b      	ldr	r3, [r7, #20]
 8001466:	3301      	adds	r3, #1
 8001468:	617b      	str	r3, [r7, #20]
 800146a:	697b      	ldr	r3, [r7, #20]
 800146c:	2b1f      	cmp	r3, #31
 800146e:	d9df      	bls.n	8001430 <LAN8742_Init+0x3a>
       }
     }
   
     if(pObj->DevAddr > LAN8742_MAX_DEV_ADDR)
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	681b      	ldr	r3, [r3, #0]
 8001474:	2b1f      	cmp	r3, #31
 8001476:	d902      	bls.n	800147e <LAN8742_Init+0x88>
     {
       status = LAN8742_STATUS_ADDRESS_ERROR;
 8001478:	f06f 0302 	mvn.w	r3, #2
 800147c:	613b      	str	r3, [r7, #16]
     }
     
     /* if device address is matched */
     if(status == LAN8742_STATUS_OK)
 800147e:	693b      	ldr	r3, [r7, #16]
 8001480:	2b00      	cmp	r3, #0
 8001482:	d145      	bne.n	8001510 <LAN8742_Init+0x11a>
     {
       /* set a software reset  */
       if(pObj->IO.WriteReg(pObj->DevAddr, LAN8742_BCR, LAN8742_BCR_SOFT_RESET) >= 0)
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	691b      	ldr	r3, [r3, #16]
 8001488:	687a      	ldr	r2, [r7, #4]
 800148a:	6810      	ldr	r0, [r2, #0]
 800148c:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8001490:	2100      	movs	r1, #0
 8001492:	4798      	blx	r3
 8001494:	4603      	mov	r3, r0
 8001496:	2b00      	cmp	r3, #0
 8001498:	db37      	blt.n	800150a <LAN8742_Init+0x114>
       { 
         /* get software reset status */
         if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BCR, &regvalue) >= 0)
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	695b      	ldr	r3, [r3, #20]
 800149e:	687a      	ldr	r2, [r7, #4]
 80014a0:	6810      	ldr	r0, [r2, #0]
 80014a2:	f107 0208 	add.w	r2, r7, #8
 80014a6:	2100      	movs	r1, #0
 80014a8:	4798      	blx	r3
 80014aa:	4603      	mov	r3, r0
 80014ac:	2b00      	cmp	r3, #0
 80014ae:	db28      	blt.n	8001502 <LAN8742_Init+0x10c>
         { 
           tickstart = pObj->IO.GetTick();
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	699b      	ldr	r3, [r3, #24]
 80014b4:	4798      	blx	r3
 80014b6:	4603      	mov	r3, r0
 80014b8:	60fb      	str	r3, [r7, #12]
           
           /* wait until software reset is done or timeout occured  */
           while(regvalue & LAN8742_BCR_SOFT_RESET)
 80014ba:	e01c      	b.n	80014f6 <LAN8742_Init+0x100>
           {
             if((pObj->IO.GetTick() - tickstart) <= LAN8742_SW_RESET_TO)
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	699b      	ldr	r3, [r3, #24]
 80014c0:	4798      	blx	r3
 80014c2:	4603      	mov	r3, r0
 80014c4:	461a      	mov	r2, r3
 80014c6:	68fb      	ldr	r3, [r7, #12]
 80014c8:	1ad3      	subs	r3, r2, r3
 80014ca:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80014ce:	d80e      	bhi.n	80014ee <LAN8742_Init+0xf8>
             {
               if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BCR, &regvalue) < 0)
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	695b      	ldr	r3, [r3, #20]
 80014d4:	687a      	ldr	r2, [r7, #4]
 80014d6:	6810      	ldr	r0, [r2, #0]
 80014d8:	f107 0208 	add.w	r2, r7, #8
 80014dc:	2100      	movs	r1, #0
 80014de:	4798      	blx	r3
 80014e0:	4603      	mov	r3, r0
 80014e2:	2b00      	cmp	r3, #0
 80014e4:	da07      	bge.n	80014f6 <LAN8742_Init+0x100>
               { 
                 status = LAN8742_STATUS_READ_ERROR;
 80014e6:	f06f 0304 	mvn.w	r3, #4
 80014ea:	613b      	str	r3, [r7, #16]
                 break;
 80014ec:	e010      	b.n	8001510 <LAN8742_Init+0x11a>
               }
             }
             else
             {
               status = LAN8742_STATUS_RESET_TIMEOUT;
 80014ee:	f06f 0301 	mvn.w	r3, #1
 80014f2:	613b      	str	r3, [r7, #16]
               break;
 80014f4:	e00c      	b.n	8001510 <LAN8742_Init+0x11a>
           while(regvalue & LAN8742_BCR_SOFT_RESET)
 80014f6:	68bb      	ldr	r3, [r7, #8]
 80014f8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80014fc:	2b00      	cmp	r3, #0
 80014fe:	d1dd      	bne.n	80014bc <LAN8742_Init+0xc6>
 8001500:	e006      	b.n	8001510 <LAN8742_Init+0x11a>
             }
           } 
         }
         else
         {
           status = LAN8742_STATUS_READ_ERROR;
 8001502:	f06f 0304 	mvn.w	r3, #4
 8001506:	613b      	str	r3, [r7, #16]
 8001508:	e002      	b.n	8001510 <LAN8742_Init+0x11a>
         }
       }
       else
       {
         status = LAN8742_STATUS_WRITE_ERROR;
 800150a:	f06f 0303 	mvn.w	r3, #3
 800150e:	613b      	str	r3, [r7, #16]
       }
     }
   }
      
   if(status == LAN8742_STATUS_OK)
 8001510:	693b      	ldr	r3, [r7, #16]
 8001512:	2b00      	cmp	r3, #0
 8001514:	d112      	bne.n	800153c <LAN8742_Init+0x146>
   {
     tickstart =  pObj->IO.GetTick();
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	699b      	ldr	r3, [r3, #24]
 800151a:	4798      	blx	r3
 800151c:	4603      	mov	r3, r0
 800151e:	60fb      	str	r3, [r7, #12]
     
     /* Wait for 2s to perform initialization */
     while((pObj->IO.GetTick() - tickstart) <= LAN8742_INIT_TO)
 8001520:	bf00      	nop
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	699b      	ldr	r3, [r3, #24]
 8001526:	4798      	blx	r3
 8001528:	4603      	mov	r3, r0
 800152a:	461a      	mov	r2, r3
 800152c:	68fb      	ldr	r3, [r7, #12]
 800152e:	1ad3      	subs	r3, r2, r3
 8001530:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8001534:	d9f5      	bls.n	8001522 <LAN8742_Init+0x12c>
     {
     }
     pObj->Is_Initialized = 1;
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	2201      	movs	r2, #1
 800153a:	605a      	str	r2, [r3, #4]
   }
   
   return status;
 800153c:	693b      	ldr	r3, [r7, #16]
 }
 800153e:	4618      	mov	r0, r3
 8001540:	3718      	adds	r7, #24
 8001542:	46bd      	mov	sp, r7
 8001544:	bd80      	pop	{r7, pc}

08001546 <LAN8742_GetLinkState>:
  *         LAN8742_STATUS_10MBITS_HALFDUPLEX  if 10Mb/s HD       
  *         LAN8742_STATUS_READ_ERROR if connot read register
  *         LAN8742_STATUS_WRITE_ERROR if connot write to register
  */
int32_t LAN8742_GetLinkState(lan8742_Object_t *pObj)
{
 8001546:	b580      	push	{r7, lr}
 8001548:	b084      	sub	sp, #16
 800154a:	af00      	add	r7, sp, #0
 800154c:	6078      	str	r0, [r7, #4]
  uint32_t readval = 0;
 800154e:	2300      	movs	r3, #0
 8001550:	60fb      	str	r3, [r7, #12]
  
  /* Read Status register  */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BSR, &readval) < 0)
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	695b      	ldr	r3, [r3, #20]
 8001556:	687a      	ldr	r2, [r7, #4]
 8001558:	6810      	ldr	r0, [r2, #0]
 800155a:	f107 020c 	add.w	r2, r7, #12
 800155e:	2101      	movs	r1, #1
 8001560:	4798      	blx	r3
 8001562:	4603      	mov	r3, r0
 8001564:	2b00      	cmp	r3, #0
 8001566:	da02      	bge.n	800156e <LAN8742_GetLinkState+0x28>
  {
    return LAN8742_STATUS_READ_ERROR;
 8001568:	f06f 0304 	mvn.w	r3, #4
 800156c:	e06e      	b.n	800164c <LAN8742_GetLinkState+0x106>
  }
  
  /* Read Status register again */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BSR, &readval) < 0)
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	695b      	ldr	r3, [r3, #20]
 8001572:	687a      	ldr	r2, [r7, #4]
 8001574:	6810      	ldr	r0, [r2, #0]
 8001576:	f107 020c 	add.w	r2, r7, #12
 800157a:	2101      	movs	r1, #1
 800157c:	4798      	blx	r3
 800157e:	4603      	mov	r3, r0
 8001580:	2b00      	cmp	r3, #0
 8001582:	da02      	bge.n	800158a <LAN8742_GetLinkState+0x44>
  {
    return LAN8742_STATUS_READ_ERROR;
 8001584:	f06f 0304 	mvn.w	r3, #4
 8001588:	e060      	b.n	800164c <LAN8742_GetLinkState+0x106>
  }
  
  if((readval & LAN8742_BSR_LINK_STATUS) == 0)
 800158a:	68fb      	ldr	r3, [r7, #12]
 800158c:	f003 0304 	and.w	r3, r3, #4
 8001590:	2b00      	cmp	r3, #0
 8001592:	d101      	bne.n	8001598 <LAN8742_GetLinkState+0x52>
  {
    /* Return Link Down status */
    return LAN8742_STATUS_LINK_DOWN;    
 8001594:	2301      	movs	r3, #1
 8001596:	e059      	b.n	800164c <LAN8742_GetLinkState+0x106>
  }
  
  /* Check Auto negotiaition */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BCR, &readval) < 0)
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	695b      	ldr	r3, [r3, #20]
 800159c:	687a      	ldr	r2, [r7, #4]
 800159e:	6810      	ldr	r0, [r2, #0]
 80015a0:	f107 020c 	add.w	r2, r7, #12
 80015a4:	2100      	movs	r1, #0
 80015a6:	4798      	blx	r3
 80015a8:	4603      	mov	r3, r0
 80015aa:	2b00      	cmp	r3, #0
 80015ac:	da02      	bge.n	80015b4 <LAN8742_GetLinkState+0x6e>
  {
    return LAN8742_STATUS_READ_ERROR;
 80015ae:	f06f 0304 	mvn.w	r3, #4
 80015b2:	e04b      	b.n	800164c <LAN8742_GetLinkState+0x106>
  }
  
  if((readval & LAN8742_BCR_AUTONEGO_EN) != LAN8742_BCR_AUTONEGO_EN)
 80015b4:	68fb      	ldr	r3, [r7, #12]
 80015b6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80015ba:	2b00      	cmp	r3, #0
 80015bc:	d11b      	bne.n	80015f6 <LAN8742_GetLinkState+0xb0>
  {
    if(((readval & LAN8742_BCR_SPEED_SELECT) == LAN8742_BCR_SPEED_SELECT) && ((readval & LAN8742_BCR_DUPLEX_MODE) == LAN8742_BCR_DUPLEX_MODE)) 
 80015be:	68fb      	ldr	r3, [r7, #12]
 80015c0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80015c4:	2b00      	cmp	r3, #0
 80015c6:	d006      	beq.n	80015d6 <LAN8742_GetLinkState+0x90>
 80015c8:	68fb      	ldr	r3, [r7, #12]
 80015ca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80015ce:	2b00      	cmp	r3, #0
 80015d0:	d001      	beq.n	80015d6 <LAN8742_GetLinkState+0x90>
    {
      return LAN8742_STATUS_100MBITS_FULLDUPLEX;
 80015d2:	2302      	movs	r3, #2
 80015d4:	e03a      	b.n	800164c <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_BCR_SPEED_SELECT) == LAN8742_BCR_SPEED_SELECT)
 80015d6:	68fb      	ldr	r3, [r7, #12]
 80015d8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80015dc:	2b00      	cmp	r3, #0
 80015de:	d001      	beq.n	80015e4 <LAN8742_GetLinkState+0x9e>
    {
      return LAN8742_STATUS_100MBITS_HALFDUPLEX;
 80015e0:	2303      	movs	r3, #3
 80015e2:	e033      	b.n	800164c <LAN8742_GetLinkState+0x106>
    }        
    else if ((readval & LAN8742_BCR_DUPLEX_MODE) == LAN8742_BCR_DUPLEX_MODE)
 80015e4:	68fb      	ldr	r3, [r7, #12]
 80015e6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80015ea:	2b00      	cmp	r3, #0
 80015ec:	d001      	beq.n	80015f2 <LAN8742_GetLinkState+0xac>
    {
      return LAN8742_STATUS_10MBITS_FULLDUPLEX;
 80015ee:	2304      	movs	r3, #4
 80015f0:	e02c      	b.n	800164c <LAN8742_GetLinkState+0x106>
    }
    else
    {
      return LAN8742_STATUS_10MBITS_HALFDUPLEX;
 80015f2:	2305      	movs	r3, #5
 80015f4:	e02a      	b.n	800164c <LAN8742_GetLinkState+0x106>
    }  		
  }
  else /* Auto Nego enabled */
  {
    if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_PHYSCSR, &readval) < 0)
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	695b      	ldr	r3, [r3, #20]
 80015fa:	687a      	ldr	r2, [r7, #4]
 80015fc:	6810      	ldr	r0, [r2, #0]
 80015fe:	f107 020c 	add.w	r2, r7, #12
 8001602:	211f      	movs	r1, #31
 8001604:	4798      	blx	r3
 8001606:	4603      	mov	r3, r0
 8001608:	2b00      	cmp	r3, #0
 800160a:	da02      	bge.n	8001612 <LAN8742_GetLinkState+0xcc>
    {
      return LAN8742_STATUS_READ_ERROR;
 800160c:	f06f 0304 	mvn.w	r3, #4
 8001610:	e01c      	b.n	800164c <LAN8742_GetLinkState+0x106>
    }
    
    /* Check if auto nego not done */
    if((readval & LAN8742_PHYSCSR_AUTONEGO_DONE) == 0)
 8001612:	68fb      	ldr	r3, [r7, #12]
 8001614:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001618:	2b00      	cmp	r3, #0
 800161a:	d101      	bne.n	8001620 <LAN8742_GetLinkState+0xda>
    {
      return LAN8742_STATUS_AUTONEGO_NOTDONE;
 800161c:	2306      	movs	r3, #6
 800161e:	e015      	b.n	800164c <LAN8742_GetLinkState+0x106>
    }
    
    if((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_100BTX_FD)
 8001620:	68fb      	ldr	r3, [r7, #12]
 8001622:	f003 031c 	and.w	r3, r3, #28
 8001626:	2b18      	cmp	r3, #24
 8001628:	d101      	bne.n	800162e <LAN8742_GetLinkState+0xe8>
    {
      return LAN8742_STATUS_100MBITS_FULLDUPLEX;
 800162a:	2302      	movs	r3, #2
 800162c:	e00e      	b.n	800164c <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_100BTX_HD)
 800162e:	68fb      	ldr	r3, [r7, #12]
 8001630:	f003 031c 	and.w	r3, r3, #28
 8001634:	2b08      	cmp	r3, #8
 8001636:	d101      	bne.n	800163c <LAN8742_GetLinkState+0xf6>
    {
      return LAN8742_STATUS_100MBITS_HALFDUPLEX;
 8001638:	2303      	movs	r3, #3
 800163a:	e007      	b.n	800164c <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_10BT_FD)
 800163c:	68fb      	ldr	r3, [r7, #12]
 800163e:	f003 031c 	and.w	r3, r3, #28
 8001642:	2b14      	cmp	r3, #20
 8001644:	d101      	bne.n	800164a <LAN8742_GetLinkState+0x104>
    {
      return LAN8742_STATUS_10MBITS_FULLDUPLEX;
 8001646:	2304      	movs	r3, #4
 8001648:	e000      	b.n	800164c <LAN8742_GetLinkState+0x106>
    }
    else
    {
      return LAN8742_STATUS_10MBITS_HALFDUPLEX;
 800164a:	2305      	movs	r3, #5
    }				
  }
}
 800164c:	4618      	mov	r0, r3
 800164e:	3710      	adds	r7, #16
 8001650:	46bd      	mov	sp, r7
 8001652:	bd80      	pop	{r7, pc}

08001654 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001654:	b580      	push	{r7, lr}
 8001656:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001658:	4b0e      	ldr	r3, [pc, #56]	; (8001694 <HAL_Init+0x40>)
 800165a:	681b      	ldr	r3, [r3, #0]
 800165c:	4a0d      	ldr	r2, [pc, #52]	; (8001694 <HAL_Init+0x40>)
 800165e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001662:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001664:	4b0b      	ldr	r3, [pc, #44]	; (8001694 <HAL_Init+0x40>)
 8001666:	681b      	ldr	r3, [r3, #0]
 8001668:	4a0a      	ldr	r2, [pc, #40]	; (8001694 <HAL_Init+0x40>)
 800166a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800166e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001670:	4b08      	ldr	r3, [pc, #32]	; (8001694 <HAL_Init+0x40>)
 8001672:	681b      	ldr	r3, [r3, #0]
 8001674:	4a07      	ldr	r2, [pc, #28]	; (8001694 <HAL_Init+0x40>)
 8001676:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800167a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800167c:	2003      	movs	r0, #3
 800167e:	f000 f930 	bl	80018e2 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001682:	200f      	movs	r0, #15
 8001684:	f7ff fa6a 	bl	8000b5c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001688:	f7ff fa12 	bl	8000ab0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800168c:	2300      	movs	r3, #0
}
 800168e:	4618      	mov	r0, r3
 8001690:	bd80      	pop	{r7, pc}
 8001692:	bf00      	nop
 8001694:	40023c00 	.word	0x40023c00

08001698 <HAL_DeInit>:
  * @brief  This function de-Initializes common part of the HAL and stops the systick.
  *         This function is optional.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DeInit(void)
{
 8001698:	b580      	push	{r7, lr}
 800169a:	af00      	add	r7, sp, #0
  /* Reset of all peripherals */
  __HAL_RCC_APB1_FORCE_RESET();
 800169c:	4b13      	ldr	r3, [pc, #76]	; (80016ec <HAL_DeInit+0x54>)
 800169e:	f04f 32ff 	mov.w	r2, #4294967295
 80016a2:	621a      	str	r2, [r3, #32]
  __HAL_RCC_APB1_RELEASE_RESET();
 80016a4:	4b11      	ldr	r3, [pc, #68]	; (80016ec <HAL_DeInit+0x54>)
 80016a6:	2200      	movs	r2, #0
 80016a8:	621a      	str	r2, [r3, #32]

  __HAL_RCC_APB2_FORCE_RESET();
 80016aa:	4b10      	ldr	r3, [pc, #64]	; (80016ec <HAL_DeInit+0x54>)
 80016ac:	f04f 32ff 	mov.w	r2, #4294967295
 80016b0:	625a      	str	r2, [r3, #36]	; 0x24
  __HAL_RCC_APB2_RELEASE_RESET();
 80016b2:	4b0e      	ldr	r3, [pc, #56]	; (80016ec <HAL_DeInit+0x54>)
 80016b4:	2200      	movs	r2, #0
 80016b6:	625a      	str	r2, [r3, #36]	; 0x24

  __HAL_RCC_AHB1_FORCE_RESET();
 80016b8:	4b0c      	ldr	r3, [pc, #48]	; (80016ec <HAL_DeInit+0x54>)
 80016ba:	f04f 32ff 	mov.w	r2, #4294967295
 80016be:	611a      	str	r2, [r3, #16]
  __HAL_RCC_AHB1_RELEASE_RESET();
 80016c0:	4b0a      	ldr	r3, [pc, #40]	; (80016ec <HAL_DeInit+0x54>)
 80016c2:	2200      	movs	r2, #0
 80016c4:	611a      	str	r2, [r3, #16]

  __HAL_RCC_AHB2_FORCE_RESET();
 80016c6:	4b09      	ldr	r3, [pc, #36]	; (80016ec <HAL_DeInit+0x54>)
 80016c8:	f04f 32ff 	mov.w	r2, #4294967295
 80016cc:	615a      	str	r2, [r3, #20]
  __HAL_RCC_AHB2_RELEASE_RESET();
 80016ce:	4b07      	ldr	r3, [pc, #28]	; (80016ec <HAL_DeInit+0x54>)
 80016d0:	2200      	movs	r2, #0
 80016d2:	615a      	str	r2, [r3, #20]

  __HAL_RCC_AHB3_FORCE_RESET();
 80016d4:	4b05      	ldr	r3, [pc, #20]	; (80016ec <HAL_DeInit+0x54>)
 80016d6:	f04f 32ff 	mov.w	r2, #4294967295
 80016da:	619a      	str	r2, [r3, #24]
  __HAL_RCC_AHB3_RELEASE_RESET();
 80016dc:	4b03      	ldr	r3, [pc, #12]	; (80016ec <HAL_DeInit+0x54>)
 80016de:	2200      	movs	r2, #0
 80016e0:	619a      	str	r2, [r3, #24]

  /* De-Init the low level hardware */
  HAL_MspDeInit();
 80016e2:	f000 f805 	bl	80016f0 <HAL_MspDeInit>
    
  /* Return function status */
  return HAL_OK;
 80016e6:	2300      	movs	r3, #0
}
 80016e8:	4618      	mov	r0, r3
 80016ea:	bd80      	pop	{r7, pc}
 80016ec:	40023800 	.word	0x40023800

080016f0 <HAL_MspDeInit>:
/**
  * @brief  DeInitializes the MSP.
  * @retval None
  */
__weak void HAL_MspDeInit(void)
{
 80016f0:	b480      	push	{r7}
 80016f2:	af00      	add	r7, sp, #0
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_MspDeInit could be implemented in the user file
   */ 
}
 80016f4:	bf00      	nop
 80016f6:	46bd      	mov	sp, r7
 80016f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016fc:	4770      	bx	lr
	...

08001700 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001700:	b480      	push	{r7}
 8001702:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001704:	4b06      	ldr	r3, [pc, #24]	; (8001720 <HAL_IncTick+0x20>)
 8001706:	781b      	ldrb	r3, [r3, #0]
 8001708:	461a      	mov	r2, r3
 800170a:	4b06      	ldr	r3, [pc, #24]	; (8001724 <HAL_IncTick+0x24>)
 800170c:	681b      	ldr	r3, [r3, #0]
 800170e:	4413      	add	r3, r2
 8001710:	4a04      	ldr	r2, [pc, #16]	; (8001724 <HAL_IncTick+0x24>)
 8001712:	6013      	str	r3, [r2, #0]
}
 8001714:	bf00      	nop
 8001716:	46bd      	mov	sp, r7
 8001718:	f85d 7b04 	ldr.w	r7, [sp], #4
 800171c:	4770      	bx	lr
 800171e:	bf00      	nop
 8001720:	20000008 	.word	0x20000008
 8001724:	200003ec 	.word	0x200003ec

08001728 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001728:	b480      	push	{r7}
 800172a:	af00      	add	r7, sp, #0
  return uwTick;
 800172c:	4b03      	ldr	r3, [pc, #12]	; (800173c <HAL_GetTick+0x14>)
 800172e:	681b      	ldr	r3, [r3, #0]
}
 8001730:	4618      	mov	r0, r3
 8001732:	46bd      	mov	sp, r7
 8001734:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001738:	4770      	bx	lr
 800173a:	bf00      	nop
 800173c:	200003ec 	.word	0x200003ec

08001740 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001740:	b580      	push	{r7, lr}
 8001742:	b084      	sub	sp, #16
 8001744:	af00      	add	r7, sp, #0
 8001746:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001748:	f7ff ffee 	bl	8001728 <HAL_GetTick>
 800174c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001752:	68fb      	ldr	r3, [r7, #12]
 8001754:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001758:	d005      	beq.n	8001766 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800175a:	4b0a      	ldr	r3, [pc, #40]	; (8001784 <HAL_Delay+0x44>)
 800175c:	781b      	ldrb	r3, [r3, #0]
 800175e:	461a      	mov	r2, r3
 8001760:	68fb      	ldr	r3, [r7, #12]
 8001762:	4413      	add	r3, r2
 8001764:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001766:	bf00      	nop
 8001768:	f7ff ffde 	bl	8001728 <HAL_GetTick>
 800176c:	4602      	mov	r2, r0
 800176e:	68bb      	ldr	r3, [r7, #8]
 8001770:	1ad3      	subs	r3, r2, r3
 8001772:	68fa      	ldr	r2, [r7, #12]
 8001774:	429a      	cmp	r2, r3
 8001776:	d8f7      	bhi.n	8001768 <HAL_Delay+0x28>
  {
  }
}
 8001778:	bf00      	nop
 800177a:	bf00      	nop
 800177c:	3710      	adds	r7, #16
 800177e:	46bd      	mov	sp, r7
 8001780:	bd80      	pop	{r7, pc}
 8001782:	bf00      	nop
 8001784:	20000008 	.word	0x20000008

08001788 <__NVIC_SetPriorityGrouping>:
{
 8001788:	b480      	push	{r7}
 800178a:	b085      	sub	sp, #20
 800178c:	af00      	add	r7, sp, #0
 800178e:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	f003 0307 	and.w	r3, r3, #7
 8001796:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001798:	4b0c      	ldr	r3, [pc, #48]	; (80017cc <__NVIC_SetPriorityGrouping+0x44>)
 800179a:	68db      	ldr	r3, [r3, #12]
 800179c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800179e:	68ba      	ldr	r2, [r7, #8]
 80017a0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80017a4:	4013      	ands	r3, r2
 80017a6:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80017a8:	68fb      	ldr	r3, [r7, #12]
 80017aa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80017ac:	68bb      	ldr	r3, [r7, #8]
 80017ae:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80017b0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80017b4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80017b8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80017ba:	4a04      	ldr	r2, [pc, #16]	; (80017cc <__NVIC_SetPriorityGrouping+0x44>)
 80017bc:	68bb      	ldr	r3, [r7, #8]
 80017be:	60d3      	str	r3, [r2, #12]
}
 80017c0:	bf00      	nop
 80017c2:	3714      	adds	r7, #20
 80017c4:	46bd      	mov	sp, r7
 80017c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ca:	4770      	bx	lr
 80017cc:	e000ed00 	.word	0xe000ed00

080017d0 <__NVIC_GetPriorityGrouping>:
{
 80017d0:	b480      	push	{r7}
 80017d2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80017d4:	4b04      	ldr	r3, [pc, #16]	; (80017e8 <__NVIC_GetPriorityGrouping+0x18>)
 80017d6:	68db      	ldr	r3, [r3, #12]
 80017d8:	0a1b      	lsrs	r3, r3, #8
 80017da:	f003 0307 	and.w	r3, r3, #7
}
 80017de:	4618      	mov	r0, r3
 80017e0:	46bd      	mov	sp, r7
 80017e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017e6:	4770      	bx	lr
 80017e8:	e000ed00 	.word	0xe000ed00

080017ec <__NVIC_EnableIRQ>:
{
 80017ec:	b480      	push	{r7}
 80017ee:	b083      	sub	sp, #12
 80017f0:	af00      	add	r7, sp, #0
 80017f2:	4603      	mov	r3, r0
 80017f4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80017f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017fa:	2b00      	cmp	r3, #0
 80017fc:	db0b      	blt.n	8001816 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80017fe:	79fb      	ldrb	r3, [r7, #7]
 8001800:	f003 021f 	and.w	r2, r3, #31
 8001804:	4907      	ldr	r1, [pc, #28]	; (8001824 <__NVIC_EnableIRQ+0x38>)
 8001806:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800180a:	095b      	lsrs	r3, r3, #5
 800180c:	2001      	movs	r0, #1
 800180e:	fa00 f202 	lsl.w	r2, r0, r2
 8001812:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8001816:	bf00      	nop
 8001818:	370c      	adds	r7, #12
 800181a:	46bd      	mov	sp, r7
 800181c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001820:	4770      	bx	lr
 8001822:	bf00      	nop
 8001824:	e000e100 	.word	0xe000e100

08001828 <__NVIC_SetPriority>:
{
 8001828:	b480      	push	{r7}
 800182a:	b083      	sub	sp, #12
 800182c:	af00      	add	r7, sp, #0
 800182e:	4603      	mov	r3, r0
 8001830:	6039      	str	r1, [r7, #0]
 8001832:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001834:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001838:	2b00      	cmp	r3, #0
 800183a:	db0a      	blt.n	8001852 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800183c:	683b      	ldr	r3, [r7, #0]
 800183e:	b2da      	uxtb	r2, r3
 8001840:	490c      	ldr	r1, [pc, #48]	; (8001874 <__NVIC_SetPriority+0x4c>)
 8001842:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001846:	0112      	lsls	r2, r2, #4
 8001848:	b2d2      	uxtb	r2, r2
 800184a:	440b      	add	r3, r1
 800184c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8001850:	e00a      	b.n	8001868 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001852:	683b      	ldr	r3, [r7, #0]
 8001854:	b2da      	uxtb	r2, r3
 8001856:	4908      	ldr	r1, [pc, #32]	; (8001878 <__NVIC_SetPriority+0x50>)
 8001858:	79fb      	ldrb	r3, [r7, #7]
 800185a:	f003 030f 	and.w	r3, r3, #15
 800185e:	3b04      	subs	r3, #4
 8001860:	0112      	lsls	r2, r2, #4
 8001862:	b2d2      	uxtb	r2, r2
 8001864:	440b      	add	r3, r1
 8001866:	761a      	strb	r2, [r3, #24]
}
 8001868:	bf00      	nop
 800186a:	370c      	adds	r7, #12
 800186c:	46bd      	mov	sp, r7
 800186e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001872:	4770      	bx	lr
 8001874:	e000e100 	.word	0xe000e100
 8001878:	e000ed00 	.word	0xe000ed00

0800187c <NVIC_EncodePriority>:
{
 800187c:	b480      	push	{r7}
 800187e:	b089      	sub	sp, #36	; 0x24
 8001880:	af00      	add	r7, sp, #0
 8001882:	60f8      	str	r0, [r7, #12]
 8001884:	60b9      	str	r1, [r7, #8]
 8001886:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001888:	68fb      	ldr	r3, [r7, #12]
 800188a:	f003 0307 	and.w	r3, r3, #7
 800188e:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001890:	69fb      	ldr	r3, [r7, #28]
 8001892:	f1c3 0307 	rsb	r3, r3, #7
 8001896:	2b04      	cmp	r3, #4
 8001898:	bf28      	it	cs
 800189a:	2304      	movcs	r3, #4
 800189c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800189e:	69fb      	ldr	r3, [r7, #28]
 80018a0:	3304      	adds	r3, #4
 80018a2:	2b06      	cmp	r3, #6
 80018a4:	d902      	bls.n	80018ac <NVIC_EncodePriority+0x30>
 80018a6:	69fb      	ldr	r3, [r7, #28]
 80018a8:	3b03      	subs	r3, #3
 80018aa:	e000      	b.n	80018ae <NVIC_EncodePriority+0x32>
 80018ac:	2300      	movs	r3, #0
 80018ae:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80018b0:	f04f 32ff 	mov.w	r2, #4294967295
 80018b4:	69bb      	ldr	r3, [r7, #24]
 80018b6:	fa02 f303 	lsl.w	r3, r2, r3
 80018ba:	43da      	mvns	r2, r3
 80018bc:	68bb      	ldr	r3, [r7, #8]
 80018be:	401a      	ands	r2, r3
 80018c0:	697b      	ldr	r3, [r7, #20]
 80018c2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80018c4:	f04f 31ff 	mov.w	r1, #4294967295
 80018c8:	697b      	ldr	r3, [r7, #20]
 80018ca:	fa01 f303 	lsl.w	r3, r1, r3
 80018ce:	43d9      	mvns	r1, r3
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80018d4:	4313      	orrs	r3, r2
}
 80018d6:	4618      	mov	r0, r3
 80018d8:	3724      	adds	r7, #36	; 0x24
 80018da:	46bd      	mov	sp, r7
 80018dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018e0:	4770      	bx	lr

080018e2 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80018e2:	b580      	push	{r7, lr}
 80018e4:	b082      	sub	sp, #8
 80018e6:	af00      	add	r7, sp, #0
 80018e8:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80018ea:	6878      	ldr	r0, [r7, #4]
 80018ec:	f7ff ff4c 	bl	8001788 <__NVIC_SetPriorityGrouping>
}
 80018f0:	bf00      	nop
 80018f2:	3708      	adds	r7, #8
 80018f4:	46bd      	mov	sp, r7
 80018f6:	bd80      	pop	{r7, pc}

080018f8 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80018f8:	b580      	push	{r7, lr}
 80018fa:	b086      	sub	sp, #24
 80018fc:	af00      	add	r7, sp, #0
 80018fe:	4603      	mov	r3, r0
 8001900:	60b9      	str	r1, [r7, #8]
 8001902:	607a      	str	r2, [r7, #4]
 8001904:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001906:	2300      	movs	r3, #0
 8001908:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800190a:	f7ff ff61 	bl	80017d0 <__NVIC_GetPriorityGrouping>
 800190e:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001910:	687a      	ldr	r2, [r7, #4]
 8001912:	68b9      	ldr	r1, [r7, #8]
 8001914:	6978      	ldr	r0, [r7, #20]
 8001916:	f7ff ffb1 	bl	800187c <NVIC_EncodePriority>
 800191a:	4602      	mov	r2, r0
 800191c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001920:	4611      	mov	r1, r2
 8001922:	4618      	mov	r0, r3
 8001924:	f7ff ff80 	bl	8001828 <__NVIC_SetPriority>
}
 8001928:	bf00      	nop
 800192a:	3718      	adds	r7, #24
 800192c:	46bd      	mov	sp, r7
 800192e:	bd80      	pop	{r7, pc}

08001930 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001930:	b580      	push	{r7, lr}
 8001932:	b082      	sub	sp, #8
 8001934:	af00      	add	r7, sp, #0
 8001936:	4603      	mov	r3, r0
 8001938:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800193a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800193e:	4618      	mov	r0, r3
 8001940:	f7ff ff54 	bl	80017ec <__NVIC_EnableIRQ>
}
 8001944:	bf00      	nop
 8001946:	3708      	adds	r7, #8
 8001948:	46bd      	mov	sp, r7
 800194a:	bd80      	pop	{r7, pc}

0800194c <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 800194c:	b580      	push	{r7, lr}
 800194e:	b084      	sub	sp, #16
 8001950:	af00      	add	r7, sp, #0
 8001952:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	2b00      	cmp	r3, #0
 8001958:	d101      	bne.n	800195e <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 800195a:	2301      	movs	r3, #1
 800195c:	e06c      	b.n	8001a38 <HAL_ETH_Init+0xec>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001964:	2b00      	cmp	r3, #0
 8001966:	d106      	bne.n	8001976 <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	2223      	movs	r2, #35	; 0x23
 800196c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8001970:	6878      	ldr	r0, [r7, #4]
 8001972:	f003 fde3 	bl	800553c <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001976:	2300      	movs	r3, #0
 8001978:	60bb      	str	r3, [r7, #8]
 800197a:	4b31      	ldr	r3, [pc, #196]	; (8001a40 <HAL_ETH_Init+0xf4>)
 800197c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800197e:	4a30      	ldr	r2, [pc, #192]	; (8001a40 <HAL_ETH_Init+0xf4>)
 8001980:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001984:	6453      	str	r3, [r2, #68]	; 0x44
 8001986:	4b2e      	ldr	r3, [pc, #184]	; (8001a40 <HAL_ETH_Init+0xf4>)
 8001988:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800198a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800198e:	60bb      	str	r3, [r7, #8]
 8001990:	68bb      	ldr	r3, [r7, #8]

  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 8001992:	4b2c      	ldr	r3, [pc, #176]	; (8001a44 <HAL_ETH_Init+0xf8>)
 8001994:	685b      	ldr	r3, [r3, #4]
 8001996:	4a2b      	ldr	r2, [pc, #172]	; (8001a44 <HAL_ETH_Init+0xf8>)
 8001998:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800199c:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 800199e:	4b29      	ldr	r3, [pc, #164]	; (8001a44 <HAL_ETH_Init+0xf8>)
 80019a0:	685a      	ldr	r2, [r3, #4]
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	689b      	ldr	r3, [r3, #8]
 80019a6:	4927      	ldr	r1, [pc, #156]	; (8001a44 <HAL_ETH_Init+0xf8>)
 80019a8:	4313      	orrs	r3, r2
 80019aa:	604b      	str	r3, [r1, #4]
  /* Dummy read to sync SYSCFG with ETH */
  (void)SYSCFG->PMC;
 80019ac:	4b25      	ldr	r3, [pc, #148]	; (8001a44 <HAL_ETH_Init+0xf8>)
 80019ae:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR);
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80019b8:	681b      	ldr	r3, [r3, #0]
 80019ba:	687a      	ldr	r2, [r7, #4]
 80019bc:	6812      	ldr	r2, [r2, #0]
 80019be:	f043 0301 	orr.w	r3, r3, #1
 80019c2:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80019c6:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80019c8:	f7ff feae 	bl	8001728 <HAL_GetTick>
 80019cc:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 80019ce:	e011      	b.n	80019f4 <HAL_ETH_Init+0xa8>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 80019d0:	f7ff feaa 	bl	8001728 <HAL_GetTick>
 80019d4:	4602      	mov	r2, r0
 80019d6:	68fb      	ldr	r3, [r7, #12]
 80019d8:	1ad3      	subs	r3, r2, r3
 80019da:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80019de:	d909      	bls.n	80019f4 <HAL_ETH_Init+0xa8>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	2204      	movs	r2, #4
 80019e4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	22e0      	movs	r2, #224	; 0xe0
 80019ec:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      /* Return Error */
      return HAL_ERROR;
 80019f0:	2301      	movs	r3, #1
 80019f2:	e021      	b.n	8001a38 <HAL_ETH_Init+0xec>
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	f003 0301 	and.w	r3, r3, #1
 8001a02:	2b00      	cmp	r3, #0
 8001a04:	d1e4      	bne.n	80019d0 <HAL_ETH_Init+0x84>
    }
  }


  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 8001a06:	6878      	ldr	r0, [r7, #4]
 8001a08:	f000 ff4a 	bl	80028a0 <ETH_MACDMAConfig>


  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 8001a0c:	6878      	ldr	r0, [r7, #4]
 8001a0e:	f000 fff1 	bl	80029f4 <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 8001a12:	6878      	ldr	r0, [r7, #4]
 8001a14:	f001 f847 	bl	8002aa6 <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	685b      	ldr	r3, [r3, #4]
 8001a1c:	461a      	mov	r2, r3
 8001a1e:	2100      	movs	r1, #0
 8001a20:	6878      	ldr	r0, [r7, #4]
 8001a22:	f000 ffaf 	bl	8002984 <ETH_MACAddressConfig>

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	2200      	movs	r2, #0
 8001a2a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  heth->gState = HAL_ETH_STATE_READY;
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	2210      	movs	r2, #16
 8001a32:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8001a36:	2300      	movs	r3, #0
}
 8001a38:	4618      	mov	r0, r3
 8001a3a:	3710      	adds	r7, #16
 8001a3c:	46bd      	mov	sp, r7
 8001a3e:	bd80      	pop	{r7, pc}
 8001a40:	40023800 	.word	0x40023800
 8001a44:	40013800 	.word	0x40013800

08001a48 <HAL_ETH_Start_IT>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Start_IT(ETH_HandleTypeDef *heth)
{
 8001a48:	b580      	push	{r7, lr}
 8001a4a:	b084      	sub	sp, #16
 8001a4c:	af00      	add	r7, sp, #0
 8001a4e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg1;

  if (heth->gState == HAL_ETH_STATE_READY)
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001a56:	2b10      	cmp	r3, #16
 8001a58:	d17f      	bne.n	8001b5a <HAL_ETH_Start_IT+0x112>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	2223      	movs	r2, #35	; 0x23
 8001a5e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* save IT mode to ETH Handle */
    heth->RxDescList.ItMode = 1U;
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	2201      	movs	r2, #1
 8001a66:	659a      	str	r2, [r3, #88]	; 0x58
    /* Disable MMC Interrupts */
    SET_BIT(heth->Instance->MACIMR, ETH_MACIMR_TSTIM | ETH_MACIMR_PMTIM);
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	f442 7202 	orr.w	r2, r2, #520	; 0x208
 8001a76:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable Rx MMC Interrupts */
    SET_BIT(heth->Instance->MMCRIMR, ETH_MMCRIMR_RGUFM | ETH_MMCRIMR_RFAEM | \
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	681b      	ldr	r3, [r3, #0]
 8001a7c:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
 8001a80:	687a      	ldr	r2, [r7, #4]
 8001a82:	6812      	ldr	r2, [r2, #0]
 8001a84:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001a88:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8001a8c:	f8c2 310c 	str.w	r3, [r2, #268]	; 0x10c
            ETH_MMCRIMR_RFCEM);

    /* Disable Tx MMC Interrupts */
    SET_BIT(heth->Instance->MMCTIMR, ETH_MMCTIMR_TGFM | ETH_MMCTIMR_TGFMSCM | \
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	f442 1203 	orr.w	r2, r2, #2146304	; 0x20c000
 8001aa0:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
            ETH_MMCTIMR_TGFSCM);

    /* Set nombre of descriptors to build */
    heth->RxDescList.RxBuildDescCnt = ETH_RX_DESC_CNT;
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	2204      	movs	r2, #4
 8001aa8:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Build all descriptors */
    ETH_UpdateDescriptor(heth);
 8001aaa:	6878      	ldr	r0, [r7, #4]
 8001aac:	f000 f9f8 	bl	8001ea0 <ETH_UpdateDescriptor>

    /* Enable the MAC transmission */
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	681a      	ldr	r2, [r3, #0]
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	f042 0208 	orr.w	r2, r2, #8
 8001abe:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8001ac8:	2001      	movs	r0, #1
 8001aca:	f7ff fe39 	bl	8001740 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	68fa      	ldr	r2, [r7, #12]
 8001ad4:	601a      	str	r2, [r3, #0]

    /* Enable the MAC reception */
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_RE);
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	681a      	ldr	r2, [r3, #0]
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	f042 0204 	orr.w	r2, r2, #4
 8001ae4:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8001aee:	2001      	movs	r0, #1
 8001af0:	f7ff fe26 	bl	8001740 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	68fa      	ldr	r2, [r7, #12]
 8001afa:	601a      	str	r2, [r3, #0]

    /* Flush Transmit FIFO */
    ETH_FlushTransmitFIFO(heth);
 8001afc:	6878      	ldr	r0, [r7, #4]
 8001afe:	f000 fd70 	bl	80025e2 <ETH_FlushTransmitFIFO>

    /* Enable the DMA transmission */
    SET_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_ST);
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001b0a:	699b      	ldr	r3, [r3, #24]
 8001b0c:	687a      	ldr	r2, [r7, #4]
 8001b0e:	6812      	ldr	r2, [r2, #0]
 8001b10:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001b14:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001b18:	6193      	str	r3, [r2, #24]

    /* Enable the DMA reception */
    SET_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_SR);
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001b22:	699b      	ldr	r3, [r3, #24]
 8001b24:	687a      	ldr	r2, [r7, #4]
 8001b26:	6812      	ldr	r2, [r2, #0]
 8001b28:	f043 0302 	orr.w	r3, r3, #2
 8001b2c:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001b30:	6193      	str	r3, [r2, #24]
    /* Enable ETH DMA interrupts:
    - Tx complete interrupt
    - Rx complete interrupt
    - Fatal bus interrupt
    */
    __HAL_ETH_DMA_ENABLE_IT(heth, (ETH_DMAIER_NISE | ETH_DMAIER_RIE | ETH_DMAIER_TIE  |
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	681b      	ldr	r3, [r3, #0]
 8001b36:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001b3a:	69db      	ldr	r3, [r3, #28]
 8001b3c:	687a      	ldr	r2, [r7, #4]
 8001b3e:	6812      	ldr	r2, [r2, #0]
 8001b40:	f443 33d0 	orr.w	r3, r3, #106496	; 0x1a000
 8001b44:	f043 03c1 	orr.w	r3, r3, #193	; 0xc1
 8001b48:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001b4c:	61d3      	str	r3, [r2, #28]
                                   ETH_DMAIER_FBEIE | ETH_DMAIER_AISE | ETH_DMAIER_RBUIE));

    heth->gState = HAL_ETH_STATE_STARTED;
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	2223      	movs	r2, #35	; 0x23
 8001b52:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    return HAL_OK;
 8001b56:	2300      	movs	r3, #0
 8001b58:	e000      	b.n	8001b5c <HAL_ETH_Start_IT+0x114>
  }
  else
  {
    return HAL_ERROR;
 8001b5a:	2301      	movs	r3, #1
  }
}
 8001b5c:	4618      	mov	r0, r3
 8001b5e:	3710      	adds	r7, #16
 8001b60:	46bd      	mov	sp, r7
 8001b62:	bd80      	pop	{r7, pc}

08001b64 <HAL_ETH_Stop_IT>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Stop_IT(ETH_HandleTypeDef *heth)
{
 8001b64:	b580      	push	{r7, lr}
 8001b66:	b086      	sub	sp, #24
 8001b68:	af00      	add	r7, sp, #0
 8001b6a:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t descindex;
  uint32_t tmpreg1;

  if (heth->gState == HAL_ETH_STATE_STARTED)
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001b72:	2b23      	cmp	r3, #35	; 0x23
 8001b74:	d170      	bne.n	8001c58 <HAL_ETH_Stop_IT+0xf4>
  {
    /* Set the ETH peripheral state to BUSY */
    heth->gState = HAL_ETH_STATE_BUSY;
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	2223      	movs	r2, #35	; 0x23
 8001b7a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    __HAL_ETH_DMA_DISABLE_IT(heth, (ETH_DMAIER_NISE | ETH_DMAIER_RIE | ETH_DMAIER_TIE  |
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001b86:	69db      	ldr	r3, [r3, #28]
 8001b88:	687a      	ldr	r2, [r7, #4]
 8001b8a:	6812      	ldr	r2, [r2, #0]
 8001b8c:	f423 33d0 	bic.w	r3, r3, #106496	; 0x1a000
 8001b90:	f023 03c1 	bic.w	r3, r3, #193	; 0xc1
 8001b94:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001b98:	61d3      	str	r3, [r2, #28]
                                    ETH_DMAIER_FBEIE | ETH_DMAIER_AISE | ETH_DMAIER_RBUIE));

    /* Disable the DMA transmission */
    CLEAR_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_ST);
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001ba2:	699b      	ldr	r3, [r3, #24]
 8001ba4:	687a      	ldr	r2, [r7, #4]
 8001ba6:	6812      	ldr	r2, [r2, #0]
 8001ba8:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8001bac:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001bb0:	6193      	str	r3, [r2, #24]

    /* Disable the DMA reception */
    CLEAR_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_SR);
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001bba:	699b      	ldr	r3, [r3, #24]
 8001bbc:	687a      	ldr	r2, [r7, #4]
 8001bbe:	6812      	ldr	r2, [r2, #0]
 8001bc0:	f023 0302 	bic.w	r3, r3, #2
 8001bc4:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001bc8:	6193      	str	r3, [r2, #24]

    /* Disable the MAC reception */
    CLEAR_BIT(heth->Instance->MACCR, ETH_MACCR_RE);
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	681a      	ldr	r2, [r3, #0]
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	f022 0204 	bic.w	r2, r2, #4
 8001bd8:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	613b      	str	r3, [r7, #16]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8001be2:	2001      	movs	r0, #1
 8001be4:	f7ff fdac 	bl	8001740 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	693a      	ldr	r2, [r7, #16]
 8001bee:	601a      	str	r2, [r3, #0]

    /* Flush Transmit FIFO */
    ETH_FlushTransmitFIFO(heth);
 8001bf0:	6878      	ldr	r0, [r7, #4]
 8001bf2:	f000 fcf6 	bl	80025e2 <ETH_FlushTransmitFIFO>

    /* Disable the MAC transmission */
    CLEAR_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	681b      	ldr	r3, [r3, #0]
 8001bfa:	681a      	ldr	r2, [r3, #0]
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	f022 0208 	bic.w	r2, r2, #8
 8001c04:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	613b      	str	r3, [r7, #16]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8001c0e:	2001      	movs	r0, #1
 8001c10:	f7ff fd96 	bl	8001740 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	693a      	ldr	r2, [r7, #16]
 8001c1a:	601a      	str	r2, [r3, #0]

    /* Clear IOC bit to all Rx descriptors */
    for (descindex = 0; descindex < (uint32_t)ETH_RX_DESC_CNT; descindex++)
 8001c1c:	2300      	movs	r3, #0
 8001c1e:	617b      	str	r3, [r7, #20]
 8001c20:	e00e      	b.n	8001c40 <HAL_ETH_Stop_IT+0xdc>
    {
      dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descindex];
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	697a      	ldr	r2, [r7, #20]
 8001c26:	3212      	adds	r2, #18
 8001c28:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001c2c:	60fb      	str	r3, [r7, #12]
      SET_BIT(dmarxdesc->DESC1, ETH_DMARXDESC_DIC);
 8001c2e:	68fb      	ldr	r3, [r7, #12]
 8001c30:	685b      	ldr	r3, [r3, #4]
 8001c32:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8001c36:	68fb      	ldr	r3, [r7, #12]
 8001c38:	605a      	str	r2, [r3, #4]
    for (descindex = 0; descindex < (uint32_t)ETH_RX_DESC_CNT; descindex++)
 8001c3a:	697b      	ldr	r3, [r7, #20]
 8001c3c:	3301      	adds	r3, #1
 8001c3e:	617b      	str	r3, [r7, #20]
 8001c40:	697b      	ldr	r3, [r7, #20]
 8001c42:	2b03      	cmp	r3, #3
 8001c44:	d9ed      	bls.n	8001c22 <HAL_ETH_Stop_IT+0xbe>
    }

    heth->RxDescList.ItMode = 0U;
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	2200      	movs	r2, #0
 8001c4a:	659a      	str	r2, [r3, #88]	; 0x58

    heth->gState = HAL_ETH_STATE_READY;
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	2210      	movs	r2, #16
 8001c50:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Return function status */
    return HAL_OK;
 8001c54:	2300      	movs	r3, #0
 8001c56:	e000      	b.n	8001c5a <HAL_ETH_Stop_IT+0xf6>
  }
  else
  {
    return HAL_ERROR;
 8001c58:	2301      	movs	r3, #1
  }
}
 8001c5a:	4618      	mov	r0, r3
 8001c5c:	3718      	adds	r7, #24
 8001c5e:	46bd      	mov	sp, r7
 8001c60:	bd80      	pop	{r7, pc}

08001c62 <HAL_ETH_Transmit_IT>:
  *         the configuration information for ETHERNET module
  * @param  pTxConfig: Hold the configuration of packet to be transmitted
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Transmit_IT(ETH_HandleTypeDef *heth, ETH_TxPacketConfig *pTxConfig)
{
 8001c62:	b580      	push	{r7, lr}
 8001c64:	b082      	sub	sp, #8
 8001c66:	af00      	add	r7, sp, #0
 8001c68:	6078      	str	r0, [r7, #4]
 8001c6a:	6039      	str	r1, [r7, #0]
  if (pTxConfig == NULL)
 8001c6c:	683b      	ldr	r3, [r7, #0]
 8001c6e:	2b00      	cmp	r3, #0
 8001c70:	d109      	bne.n	8001c86 <HAL_ETH_Transmit_IT+0x24>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_PARAM;
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001c78:	f043 0201 	orr.w	r2, r3, #1
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    return HAL_ERROR;
 8001c82:	2301      	movs	r3, #1
 8001c84:	e045      	b.n	8001d12 <HAL_ETH_Transmit_IT+0xb0>
  }

  if (heth->gState == HAL_ETH_STATE_STARTED)
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001c8c:	2b23      	cmp	r3, #35	; 0x23
 8001c8e:	d13f      	bne.n	8001d10 <HAL_ETH_Transmit_IT+0xae>
  {
    /* Save the packet pointer to release.  */
    heth->TxDescList.CurrentPacketAddress = (uint32_t *)pTxConfig->pData;
 8001c90:	683b      	ldr	r3, [r7, #0]
 8001c92:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Config DMA Tx descriptor by Tx Packet info */
    if (ETH_Prepare_Tx_Descriptors(heth, pTxConfig, 1) != HAL_ETH_ERROR_NONE)
 8001c98:	2201      	movs	r2, #1
 8001c9a:	6839      	ldr	r1, [r7, #0]
 8001c9c:	6878      	ldr	r0, [r7, #4]
 8001c9e:	f000 ff6f 	bl	8002b80 <ETH_Prepare_Tx_Descriptors>
 8001ca2:	4603      	mov	r3, r0
 8001ca4:	2b00      	cmp	r3, #0
 8001ca6:	d009      	beq.n	8001cbc <HAL_ETH_Transmit_IT+0x5a>
    {
      heth->ErrorCode |= HAL_ETH_ERROR_BUSY;
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001cae:	f043 0202 	orr.w	r2, r3, #2
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      return HAL_ERROR;
 8001cb8:	2301      	movs	r3, #1
 8001cba:	e02a      	b.n	8001d12 <HAL_ETH_Transmit_IT+0xb0>
  __ASM volatile ("dsb 0xF":::"memory");
 8001cbc:	f3bf 8f4f 	dsb	sy
}
 8001cc0:	bf00      	nop

    /* Ensure completion of descriptor preparation before transmission start */
    __DSB();

    /* Incr current tx desc index */
    INCR_TX_DESC_INDEX(heth->TxDescList.CurTxDesc, 1U);
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001cc6:	1c5a      	adds	r2, r3, #1
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	629a      	str	r2, [r3, #40]	; 0x28
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001cd0:	2b03      	cmp	r3, #3
 8001cd2:	d904      	bls.n	8001cde <HAL_ETH_Transmit_IT+0x7c>
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001cd8:	1f1a      	subs	r2, r3, #4
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	629a      	str	r2, [r3, #40]	; 0x28

    /* Start transmission */
    /* issue a poll command to Tx DMA by writing address of next immediate free descriptor */
    if (((heth->Instance)->DMASR & ETH_DMASR_TBUS) != (uint32_t)RESET)
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001ce6:	695b      	ldr	r3, [r3, #20]
 8001ce8:	f003 0304 	and.w	r3, r3, #4
 8001cec:	2b00      	cmp	r3, #0
 8001cee:	d00d      	beq.n	8001d0c <HAL_ETH_Transmit_IT+0xaa>
    {
      /* Clear TBUS ETHERNET DMA flag */
      (heth->Instance)->DMASR = ETH_DMASR_TBUS;
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001cf8:	461a      	mov	r2, r3
 8001cfa:	2304      	movs	r3, #4
 8001cfc:	6153      	str	r3, [r2, #20]
      /* Resume DMA transmission*/
      (heth->Instance)->DMATPDR = 0U;
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001d06:	461a      	mov	r2, r3
 8001d08:	2300      	movs	r3, #0
 8001d0a:	6053      	str	r3, [r2, #4]
    }

    return HAL_OK;
 8001d0c:	2300      	movs	r3, #0
 8001d0e:	e000      	b.n	8001d12 <HAL_ETH_Transmit_IT+0xb0>

  }
  else
  {
    return HAL_ERROR;
 8001d10:	2301      	movs	r3, #1
  }
}
 8001d12:	4618      	mov	r0, r3
 8001d14:	3708      	adds	r7, #8
 8001d16:	46bd      	mov	sp, r7
 8001d18:	bd80      	pop	{r7, pc}

08001d1a <HAL_ETH_ReadData>:
  *         the configuration information for ETHERNET module
  * @param  pAppBuff: Pointer to an application buffer to receive the packet.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadData(ETH_HandleTypeDef *heth, void **pAppBuff)
{
 8001d1a:	b580      	push	{r7, lr}
 8001d1c:	b088      	sub	sp, #32
 8001d1e:	af00      	add	r7, sp, #0
 8001d20:	6078      	str	r0, [r7, #4]
 8001d22:	6039      	str	r1, [r7, #0]
  uint32_t descidx;
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t desccnt = 0U;
 8001d24:	2300      	movs	r3, #0
 8001d26:	617b      	str	r3, [r7, #20]
  uint32_t desccntmax;
  uint32_t bufflength;
  uint8_t rxdataready = 0U;
 8001d28:	2300      	movs	r3, #0
 8001d2a:	73fb      	strb	r3, [r7, #15]


  if (pAppBuff == NULL)
 8001d2c:	683b      	ldr	r3, [r7, #0]
 8001d2e:	2b00      	cmp	r3, #0
 8001d30:	d109      	bne.n	8001d46 <HAL_ETH_ReadData+0x2c>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_PARAM;
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001d38:	f043 0201 	orr.w	r2, r3, #1
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    return HAL_ERROR;
 8001d42:	2301      	movs	r3, #1
 8001d44:	e0a8      	b.n	8001e98 <HAL_ETH_ReadData+0x17e>
  }

  if (heth->gState != HAL_ETH_STATE_STARTED)
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001d4c:	2b23      	cmp	r3, #35	; 0x23
 8001d4e:	d001      	beq.n	8001d54 <HAL_ETH_ReadData+0x3a>
  {
    return HAL_ERROR;
 8001d50:	2301      	movs	r3, #1
 8001d52:	e0a1      	b.n	8001e98 <HAL_ETH_ReadData+0x17e>
  }

  descidx = heth->RxDescList.RxDescIdx;
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001d58:	61fb      	str	r3, [r7, #28]
  dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	69fa      	ldr	r2, [r7, #28]
 8001d5e:	3212      	adds	r2, #18
 8001d60:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001d64:	61bb      	str	r3, [r7, #24]
  desccntmax = ETH_RX_DESC_CNT - heth->RxDescList.RxBuildDescCnt;
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001d6a:	f1c3 0304 	rsb	r3, r3, #4
 8001d6e:	60bb      	str	r3, [r7, #8]

  /* Check if descriptor is not owned by DMA */
  while ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 8001d70:	e06a      	b.n	8001e48 <HAL_ETH_ReadData+0x12e>
         && (rxdataready == 0U))
  {
    if (READ_BIT(dmarxdesc->DESC0,  ETH_DMARXDESC_LS)  != (uint32_t)RESET)
 8001d72:	69bb      	ldr	r3, [r7, #24]
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d7a:	2b00      	cmp	r3, #0
 8001d7c:	d007      	beq.n	8001d8e <HAL_ETH_ReadData+0x74>
    {
      /* Get timestamp high */
      heth->RxDescList.TimeStamp.TimeStampHigh = dmarxdesc->DESC6;
 8001d7e:	69bb      	ldr	r3, [r7, #24]
 8001d80:	699a      	ldr	r2, [r3, #24]
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	679a      	str	r2, [r3, #120]	; 0x78
      /* Get timestamp low */
      heth->RxDescList.TimeStamp.TimeStampLow  = dmarxdesc->DESC7;
 8001d86:	69bb      	ldr	r3, [r7, #24]
 8001d88:	69da      	ldr	r2, [r3, #28]
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	675a      	str	r2, [r3, #116]	; 0x74
    }
    if ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_FS) != (uint32_t)RESET) || (heth->RxDescList.pRxStart != NULL))
 8001d8e:	69bb      	ldr	r3, [r7, #24]
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001d96:	2b00      	cmp	r3, #0
 8001d98:	d103      	bne.n	8001da2 <HAL_ETH_ReadData+0x88>
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8001d9e:	2b00      	cmp	r3, #0
 8001da0:	d040      	beq.n	8001e24 <HAL_ETH_ReadData+0x10a>
    {
      /* Check first descriptor */
      if (READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_FS) != (uint32_t)RESET)
 8001da2:	69bb      	ldr	r3, [r7, #24]
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001daa:	2b00      	cmp	r3, #0
 8001dac:	d005      	beq.n	8001dba <HAL_ETH_ReadData+0xa0>
      {
        heth->RxDescList.RxDescCnt = 0;
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	2200      	movs	r2, #0
 8001db2:	661a      	str	r2, [r3, #96]	; 0x60
        heth->RxDescList.RxDataLength = 0;
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	2200      	movs	r2, #0
 8001db8:	665a      	str	r2, [r3, #100]	; 0x64
      }

      /* Check if last descriptor */
      bufflength = heth->Init.RxBuffLen;
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	695b      	ldr	r3, [r3, #20]
 8001dbe:	613b      	str	r3, [r7, #16]
      if (READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_LS) != (uint32_t)RESET)
 8001dc0:	69bb      	ldr	r3, [r7, #24]
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001dc8:	2b00      	cmp	r3, #0
 8001dca:	d00c      	beq.n	8001de6 <HAL_ETH_ReadData+0xcc>
      {
        /* Get the Frame Length of the received packet: substruct 4 bytes of the CRC */
        bufflength = ((dmarxdesc->DESC0 & ETH_DMARXDESC_FL) >> ETH_DMARXDESC_FRAMELENGTHSHIFT) - 4U;
 8001dcc:	69bb      	ldr	r3, [r7, #24]
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	0c1b      	lsrs	r3, r3, #16
 8001dd2:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8001dd6:	3b04      	subs	r3, #4
 8001dd8:	613b      	str	r3, [r7, #16]

        /* Save Last descriptor index */
        heth->RxDescList.pRxLastRxDesc = dmarxdesc->DESC0;
 8001dda:	69bb      	ldr	r3, [r7, #24]
 8001ddc:	681a      	ldr	r2, [r3, #0]
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	671a      	str	r2, [r3, #112]	; 0x70

        /* Packet ready */
        rxdataready = 1;
 8001de2:	2301      	movs	r3, #1
 8001de4:	73fb      	strb	r3, [r7, #15]
      }

      /* Link data */
      WRITE_REG(dmarxdesc->BackupAddr0, dmarxdesc->DESC2);
 8001de6:	69bb      	ldr	r3, [r7, #24]
 8001de8:	689a      	ldr	r2, [r3, #8]
 8001dea:	69bb      	ldr	r3, [r7, #24]
 8001dec:	621a      	str	r2, [r3, #32]
      /*Call registered Link callback*/
      heth->rxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
                           (uint8_t *)dmarxdesc->BackupAddr0, bufflength);
#else
      /* Link callback */
      HAL_ETH_RxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	f103 007c 	add.w	r0, r3, #124	; 0x7c
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	f103 0180 	add.w	r1, r3, #128	; 0x80
                             (uint8_t *)dmarxdesc->BackupAddr0, (uint16_t) bufflength);
 8001dfa:	69bb      	ldr	r3, [r7, #24]
 8001dfc:	6a1b      	ldr	r3, [r3, #32]
      HAL_ETH_RxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
 8001dfe:	461a      	mov	r2, r3
 8001e00:	693b      	ldr	r3, [r7, #16]
 8001e02:	b29b      	uxth	r3, r3
 8001e04:	f003 fd54 	bl	80058b0 <HAL_ETH_RxLinkCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
      heth->RxDescList.RxDescCnt++;
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001e0c:	1c5a      	adds	r2, r3, #1
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	661a      	str	r2, [r3, #96]	; 0x60
      heth->RxDescList.RxDataLength += bufflength;
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8001e16:	693b      	ldr	r3, [r7, #16]
 8001e18:	441a      	add	r2, r3
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	665a      	str	r2, [r3, #100]	; 0x64

      /* Clear buffer pointer */
      dmarxdesc->BackupAddr0 = 0;
 8001e1e:	69bb      	ldr	r3, [r7, #24]
 8001e20:	2200      	movs	r2, #0
 8001e22:	621a      	str	r2, [r3, #32]
    }

    /* Increment current rx descriptor index */
    INCR_RX_DESC_INDEX(descidx, 1U);
 8001e24:	69fb      	ldr	r3, [r7, #28]
 8001e26:	3301      	adds	r3, #1
 8001e28:	61fb      	str	r3, [r7, #28]
 8001e2a:	69fb      	ldr	r3, [r7, #28]
 8001e2c:	2b03      	cmp	r3, #3
 8001e2e:	d902      	bls.n	8001e36 <HAL_ETH_ReadData+0x11c>
 8001e30:	69fb      	ldr	r3, [r7, #28]
 8001e32:	3b04      	subs	r3, #4
 8001e34:	61fb      	str	r3, [r7, #28]
    /* Get current descriptor address */
    dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	69fa      	ldr	r2, [r7, #28]
 8001e3a:	3212      	adds	r2, #18
 8001e3c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001e40:	61bb      	str	r3, [r7, #24]
    desccnt++;
 8001e42:	697b      	ldr	r3, [r7, #20]
 8001e44:	3301      	adds	r3, #1
 8001e46:	617b      	str	r3, [r7, #20]
  while ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 8001e48:	69bb      	ldr	r3, [r7, #24]
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	2b00      	cmp	r3, #0
 8001e4e:	db06      	blt.n	8001e5e <HAL_ETH_ReadData+0x144>
 8001e50:	697a      	ldr	r2, [r7, #20]
 8001e52:	68bb      	ldr	r3, [r7, #8]
 8001e54:	429a      	cmp	r2, r3
 8001e56:	d202      	bcs.n	8001e5e <HAL_ETH_ReadData+0x144>
         && (rxdataready == 0U))
 8001e58:	7bfb      	ldrb	r3, [r7, #15]
 8001e5a:	2b00      	cmp	r3, #0
 8001e5c:	d089      	beq.n	8001d72 <HAL_ETH_ReadData+0x58>
  }

  heth->RxDescList.RxBuildDescCnt += desccnt;
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8001e62:	697b      	ldr	r3, [r7, #20]
 8001e64:	441a      	add	r2, r3
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	66da      	str	r2, [r3, #108]	; 0x6c
  if ((heth->RxDescList.RxBuildDescCnt) != 0U)
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001e6e:	2b00      	cmp	r3, #0
 8001e70:	d002      	beq.n	8001e78 <HAL_ETH_ReadData+0x15e>
  {
    /* Update Descriptors */
    ETH_UpdateDescriptor(heth);
 8001e72:	6878      	ldr	r0, [r7, #4]
 8001e74:	f000 f814 	bl	8001ea0 <ETH_UpdateDescriptor>
  }

  heth->RxDescList.RxDescIdx = descidx;
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	69fa      	ldr	r2, [r7, #28]
 8001e7c:	65da      	str	r2, [r3, #92]	; 0x5c

  if (rxdataready == 1U)
 8001e7e:	7bfb      	ldrb	r3, [r7, #15]
 8001e80:	2b01      	cmp	r3, #1
 8001e82:	d108      	bne.n	8001e96 <HAL_ETH_ReadData+0x17c>
  {
    /* Return received packet */
    *pAppBuff = heth->RxDescList.pRxStart;
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 8001e88:	683b      	ldr	r3, [r7, #0]
 8001e8a:	601a      	str	r2, [r3, #0]
    /* Reset first element */
    heth->RxDescList.pRxStart = NULL;
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	2200      	movs	r2, #0
 8001e90:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8001e92:	2300      	movs	r3, #0
 8001e94:	e000      	b.n	8001e98 <HAL_ETH_ReadData+0x17e>
  }

  /* Packet not ready */
  return HAL_ERROR;
 8001e96:	2301      	movs	r3, #1
}
 8001e98:	4618      	mov	r0, r3
 8001e9a:	3720      	adds	r7, #32
 8001e9c:	46bd      	mov	sp, r7
 8001e9e:	bd80      	pop	{r7, pc}

08001ea0 <ETH_UpdateDescriptor>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_UpdateDescriptor(ETH_HandleTypeDef *heth)
{
 8001ea0:	b580      	push	{r7, lr}
 8001ea2:	b088      	sub	sp, #32
 8001ea4:	af00      	add	r7, sp, #0
 8001ea6:	6078      	str	r0, [r7, #4]
  uint32_t descidx;
  uint32_t desccount;
  ETH_DMADescTypeDef *dmarxdesc;
  uint8_t *buff = NULL;
 8001ea8:	2300      	movs	r3, #0
 8001eaa:	60fb      	str	r3, [r7, #12]
  uint8_t allocStatus = 1U;
 8001eac:	2301      	movs	r3, #1
 8001eae:	74fb      	strb	r3, [r7, #19]

  descidx = heth->RxDescList.RxBuildDescIdx;
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8001eb4:	61fb      	str	r3, [r7, #28]
  dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	69fa      	ldr	r2, [r7, #28]
 8001eba:	3212      	adds	r2, #18
 8001ebc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001ec0:	617b      	str	r3, [r7, #20]
  desccount = heth->RxDescList.RxBuildDescCnt;
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001ec6:	61bb      	str	r3, [r7, #24]

  while ((desccount > 0U) && (allocStatus != 0U))
 8001ec8:	e040      	b.n	8001f4c <ETH_UpdateDescriptor+0xac>
  {
    /* Check if a buffer's attached the descriptor */
    if (READ_REG(dmarxdesc->BackupAddr0) == 0U)
 8001eca:	697b      	ldr	r3, [r7, #20]
 8001ecc:	6a1b      	ldr	r3, [r3, #32]
 8001ece:	2b00      	cmp	r3, #0
 8001ed0:	d112      	bne.n	8001ef8 <ETH_UpdateDescriptor+0x58>
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /*Call registered Allocate callback*/
      heth->rxAllocateCallback(&buff);
#else
      /* Allocate callback */
      HAL_ETH_RxAllocateCallback(&buff);
 8001ed2:	f107 030c 	add.w	r3, r7, #12
 8001ed6:	4618      	mov	r0, r3
 8001ed8:	f003 fcba 	bl	8005850 <HAL_ETH_RxAllocateCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
      if (buff == NULL)
 8001edc:	68fb      	ldr	r3, [r7, #12]
 8001ede:	2b00      	cmp	r3, #0
 8001ee0:	d102      	bne.n	8001ee8 <ETH_UpdateDescriptor+0x48>
      {
        allocStatus = 0U;
 8001ee2:	2300      	movs	r3, #0
 8001ee4:	74fb      	strb	r3, [r7, #19]
 8001ee6:	e007      	b.n	8001ef8 <ETH_UpdateDescriptor+0x58>
      }
      else
      {
        WRITE_REG(dmarxdesc->BackupAddr0, (uint32_t)buff);
 8001ee8:	68fb      	ldr	r3, [r7, #12]
 8001eea:	461a      	mov	r2, r3
 8001eec:	697b      	ldr	r3, [r7, #20]
 8001eee:	621a      	str	r2, [r3, #32]
        WRITE_REG(dmarxdesc->DESC2, (uint32_t)buff);
 8001ef0:	68fb      	ldr	r3, [r7, #12]
 8001ef2:	461a      	mov	r2, r3
 8001ef4:	697b      	ldr	r3, [r7, #20]
 8001ef6:	609a      	str	r2, [r3, #8]
      }
    }

    if (allocStatus != 0U)
 8001ef8:	7cfb      	ldrb	r3, [r7, #19]
 8001efa:	2b00      	cmp	r3, #0
 8001efc:	d026      	beq.n	8001f4c <ETH_UpdateDescriptor+0xac>
    {
      if (heth->RxDescList.ItMode == 0U)
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f02:	2b00      	cmp	r3, #0
 8001f04:	d103      	bne.n	8001f0e <ETH_UpdateDescriptor+0x6e>
      {
        WRITE_REG(dmarxdesc->DESC1, ETH_DMARXDESC_DIC | ETH_RX_BUF_SIZE | ETH_DMARXDESC_RCH);
 8001f06:	697b      	ldr	r3, [r7, #20]
 8001f08:	4a1e      	ldr	r2, [pc, #120]	; (8001f84 <ETH_UpdateDescriptor+0xe4>)
 8001f0a:	605a      	str	r2, [r3, #4]
 8001f0c:	e003      	b.n	8001f16 <ETH_UpdateDescriptor+0x76>
      }
      else
      {
        WRITE_REG(dmarxdesc->DESC1, ETH_RX_BUF_SIZE | ETH_DMARXDESC_RCH);
 8001f0e:	697b      	ldr	r3, [r7, #20]
 8001f10:	f44f 428c 	mov.w	r2, #17920	; 0x4600
 8001f14:	605a      	str	r2, [r3, #4]
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 8001f16:	f3bf 8f5f 	dmb	sy
}
 8001f1a:	bf00      	nop
         is fully performed.
         The __DMB() instruction is added to avoid any potential compiler optimization that
         may lead to abnormal behavior. */
      __DMB();

      SET_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN);
 8001f1c:	697b      	ldr	r3, [r7, #20]
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8001f24:	697b      	ldr	r3, [r7, #20]
 8001f26:	601a      	str	r2, [r3, #0]

      /* Increment current rx descriptor index */
      INCR_RX_DESC_INDEX(descidx, 1U);
 8001f28:	69fb      	ldr	r3, [r7, #28]
 8001f2a:	3301      	adds	r3, #1
 8001f2c:	61fb      	str	r3, [r7, #28]
 8001f2e:	69fb      	ldr	r3, [r7, #28]
 8001f30:	2b03      	cmp	r3, #3
 8001f32:	d902      	bls.n	8001f3a <ETH_UpdateDescriptor+0x9a>
 8001f34:	69fb      	ldr	r3, [r7, #28]
 8001f36:	3b04      	subs	r3, #4
 8001f38:	61fb      	str	r3, [r7, #28]
      /* Get current descriptor address */
      dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	69fa      	ldr	r2, [r7, #28]
 8001f3e:	3212      	adds	r2, #18
 8001f40:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001f44:	617b      	str	r3, [r7, #20]
      desccount--;
 8001f46:	69bb      	ldr	r3, [r7, #24]
 8001f48:	3b01      	subs	r3, #1
 8001f4a:	61bb      	str	r3, [r7, #24]
  while ((desccount > 0U) && (allocStatus != 0U))
 8001f4c:	69bb      	ldr	r3, [r7, #24]
 8001f4e:	2b00      	cmp	r3, #0
 8001f50:	d002      	beq.n	8001f58 <ETH_UpdateDescriptor+0xb8>
 8001f52:	7cfb      	ldrb	r3, [r7, #19]
 8001f54:	2b00      	cmp	r3, #0
 8001f56:	d1b8      	bne.n	8001eca <ETH_UpdateDescriptor+0x2a>
    }
  }

  if (heth->RxDescList.RxBuildDescCnt != desccount)
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001f5c:	69ba      	ldr	r2, [r7, #24]
 8001f5e:	429a      	cmp	r2, r3
 8001f60:	d00c      	beq.n	8001f7c <ETH_UpdateDescriptor+0xdc>
  {
    /* Set the Tail pointer address */
    WRITE_REG(heth->Instance->DMARPDR, 0);
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001f6a:	461a      	mov	r2, r3
 8001f6c:	2300      	movs	r3, #0
 8001f6e:	6093      	str	r3, [r2, #8]

    heth->RxDescList.RxBuildDescIdx = descidx;
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	69fa      	ldr	r2, [r7, #28]
 8001f74:	669a      	str	r2, [r3, #104]	; 0x68
    heth->RxDescList.RxBuildDescCnt = desccount;
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	69ba      	ldr	r2, [r7, #24]
 8001f7a:	66da      	str	r2, [r3, #108]	; 0x6c
  }
}
 8001f7c:	bf00      	nop
 8001f7e:	3720      	adds	r7, #32
 8001f80:	46bd      	mov	sp, r7
 8001f82:	bd80      	pop	{r7, pc}
 8001f84:	80004600 	.word	0x80004600

08001f88 <HAL_ETH_ReleaseTxPacket>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReleaseTxPacket(ETH_HandleTypeDef *heth)
{
 8001f88:	b580      	push	{r7, lr}
 8001f8a:	b086      	sub	sp, #24
 8001f8c:	af00      	add	r7, sp, #0
 8001f8e:	6078      	str	r0, [r7, #4]
  ETH_TxDescListTypeDef *dmatxdesclist = &heth->TxDescList;
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	3318      	adds	r3, #24
 8001f94:	60bb      	str	r3, [r7, #8]
  uint32_t numOfBuf =  dmatxdesclist->BuffersInUse;
 8001f96:	68bb      	ldr	r3, [r7, #8]
 8001f98:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f9a:	617b      	str	r3, [r7, #20]
  uint32_t idx =       dmatxdesclist->releaseIndex;
 8001f9c:	68bb      	ldr	r3, [r7, #8]
 8001f9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001fa0:	613b      	str	r3, [r7, #16]
  uint8_t pktTxStatus = 1U;
 8001fa2:	2301      	movs	r3, #1
 8001fa4:	73fb      	strb	r3, [r7, #15]
#ifdef HAL_ETH_USE_PTP
  ETH_TimeStampTypeDef *timestamp = &heth->TxTimestamp;
#endif /* HAL_ETH_USE_PTP */

  /* Loop through buffers in use.  */
  while ((numOfBuf != 0U) && (pktTxStatus != 0U))
 8001fa6:	e03f      	b.n	8002028 <HAL_ETH_ReleaseTxPacket+0xa0>
  {
    pktInUse = 1U;
 8001fa8:	2301      	movs	r3, #1
 8001faa:	73bb      	strb	r3, [r7, #14]
    numOfBuf--;
 8001fac:	697b      	ldr	r3, [r7, #20]
 8001fae:	3b01      	subs	r3, #1
 8001fb0:	617b      	str	r3, [r7, #20]
    /* If no packet, just examine the next packet.  */
    if (dmatxdesclist->PacketAddress[idx] == NULL)
 8001fb2:	68ba      	ldr	r2, [r7, #8]
 8001fb4:	693b      	ldr	r3, [r7, #16]
 8001fb6:	3304      	adds	r3, #4
 8001fb8:	009b      	lsls	r3, r3, #2
 8001fba:	4413      	add	r3, r2
 8001fbc:	685b      	ldr	r3, [r3, #4]
 8001fbe:	2b00      	cmp	r3, #0
 8001fc0:	d106      	bne.n	8001fd0 <HAL_ETH_ReleaseTxPacket+0x48>
    {
      /* No packet in use, skip to next.  */
      idx = (idx + 1U) & (ETH_TX_DESC_CNT - 1U);
 8001fc2:	693b      	ldr	r3, [r7, #16]
 8001fc4:	3301      	adds	r3, #1
 8001fc6:	f003 0303 	and.w	r3, r3, #3
 8001fca:	613b      	str	r3, [r7, #16]
      pktInUse = 0U;
 8001fcc:	2300      	movs	r3, #0
 8001fce:	73bb      	strb	r3, [r7, #14]
    }

    if (pktInUse != 0U)
 8001fd0:	7bbb      	ldrb	r3, [r7, #14]
 8001fd2:	2b00      	cmp	r3, #0
 8001fd4:	d028      	beq.n	8002028 <HAL_ETH_ReleaseTxPacket+0xa0>
    {
      /* Determine if the packet has been transmitted.  */
      if ((heth->Init.TxDesc[idx].DESC0 & ETH_DMATXDESC_OWN) == 0U)
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	68d9      	ldr	r1, [r3, #12]
 8001fda:	693a      	ldr	r2, [r7, #16]
 8001fdc:	4613      	mov	r3, r2
 8001fde:	009b      	lsls	r3, r3, #2
 8001fe0:	4413      	add	r3, r2
 8001fe2:	00db      	lsls	r3, r3, #3
 8001fe4:	440b      	add	r3, r1
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	2b00      	cmp	r3, #0
 8001fea:	db1b      	blt.n	8002024 <HAL_ETH_ReleaseTxPacket+0x9c>
#ifdef HAL_ETH_USE_PTP
        /* Handle Ptp  */
        HAL_ETH_TxPtpCallback(dmatxdesclist->PacketAddress[idx], timestamp);
#endif  /* HAL_ETH_USE_PTP */
        /* Release the packet.  */
        HAL_ETH_TxFreeCallback(dmatxdesclist->PacketAddress[idx]);
 8001fec:	68ba      	ldr	r2, [r7, #8]
 8001fee:	693b      	ldr	r3, [r7, #16]
 8001ff0:	3304      	adds	r3, #4
 8001ff2:	009b      	lsls	r3, r3, #2
 8001ff4:	4413      	add	r3, r2
 8001ff6:	685b      	ldr	r3, [r3, #4]
 8001ff8:	4618      	mov	r0, r3
 8001ffa:	f003 fc99 	bl	8005930 <HAL_ETH_TxFreeCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */

        /* Clear the entry in the in-use array.  */
        dmatxdesclist->PacketAddress[idx] = NULL;
 8001ffe:	68ba      	ldr	r2, [r7, #8]
 8002000:	693b      	ldr	r3, [r7, #16]
 8002002:	3304      	adds	r3, #4
 8002004:	009b      	lsls	r3, r3, #2
 8002006:	4413      	add	r3, r2
 8002008:	2200      	movs	r2, #0
 800200a:	605a      	str	r2, [r3, #4]

        /* Update the transmit relesae index and number of buffers in use.  */
        idx = (idx + 1U) & (ETH_TX_DESC_CNT - 1U);
 800200c:	693b      	ldr	r3, [r7, #16]
 800200e:	3301      	adds	r3, #1
 8002010:	f003 0303 	and.w	r3, r3, #3
 8002014:	613b      	str	r3, [r7, #16]
        dmatxdesclist->BuffersInUse = numOfBuf;
 8002016:	68bb      	ldr	r3, [r7, #8]
 8002018:	697a      	ldr	r2, [r7, #20]
 800201a:	629a      	str	r2, [r3, #40]	; 0x28
        dmatxdesclist->releaseIndex = idx;
 800201c:	68bb      	ldr	r3, [r7, #8]
 800201e:	693a      	ldr	r2, [r7, #16]
 8002020:	62da      	str	r2, [r3, #44]	; 0x2c
 8002022:	e001      	b.n	8002028 <HAL_ETH_ReleaseTxPacket+0xa0>
      }
      else
      {
        /* Get out of the loop!  */
        pktTxStatus = 0U;
 8002024:	2300      	movs	r3, #0
 8002026:	73fb      	strb	r3, [r7, #15]
  while ((numOfBuf != 0U) && (pktTxStatus != 0U))
 8002028:	697b      	ldr	r3, [r7, #20]
 800202a:	2b00      	cmp	r3, #0
 800202c:	d002      	beq.n	8002034 <HAL_ETH_ReleaseTxPacket+0xac>
 800202e:	7bfb      	ldrb	r3, [r7, #15]
 8002030:	2b00      	cmp	r3, #0
 8002032:	d1b9      	bne.n	8001fa8 <HAL_ETH_ReleaseTxPacket+0x20>
      }
    }
  }
  return HAL_OK;
 8002034:	2300      	movs	r3, #0
}
 8002036:	4618      	mov	r0, r3
 8002038:	3718      	adds	r7, #24
 800203a:	46bd      	mov	sp, r7
 800203c:	bd80      	pop	{r7, pc}
	...

08002040 <HAL_ETH_IRQHandler>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
void HAL_ETH_IRQHandler(ETH_HandleTypeDef *heth)
{
 8002040:	b580      	push	{r7, lr}
 8002042:	b082      	sub	sp, #8
 8002044:	af00      	add	r7, sp, #0
 8002046:	6078      	str	r0, [r7, #4]
  /* Packet received */
  if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMASR_RS))
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002050:	695b      	ldr	r3, [r3, #20]
 8002052:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002056:	2b40      	cmp	r3, #64	; 0x40
 8002058:	d112      	bne.n	8002080 <HAL_ETH_IRQHandler+0x40>
  {
    if (__HAL_ETH_DMA_GET_IT_SOURCE(heth, ETH_DMAIER_RIE))
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002062:	69db      	ldr	r3, [r3, #28]
 8002064:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002068:	2b40      	cmp	r3, #64	; 0x40
 800206a:	d109      	bne.n	8002080 <HAL_ETH_IRQHandler+0x40>
    {
      /* Clear the Eth DMA Rx IT pending bits */
      __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMASR_RS | ETH_DMASR_NIS);
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002074:	461a      	mov	r2, r3
 8002076:	4b50      	ldr	r3, [pc, #320]	; (80021b8 <HAL_ETH_IRQHandler+0x178>)
 8002078:	6153      	str	r3, [r2, #20]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /*Call registered Receive complete callback*/
      heth->RxCpltCallback(heth);
#else
      /* Receive complete callback */
      HAL_ETH_RxCpltCallback(heth);
 800207a:	6878      	ldr	r0, [r7, #4]
 800207c:	f002 ffc2 	bl	8005004 <HAL_ETH_RxCpltCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
    }
  }

  /* Packet transmitted */
  if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMASR_TS))
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002088:	695b      	ldr	r3, [r3, #20]
 800208a:	f003 0301 	and.w	r3, r3, #1
 800208e:	2b01      	cmp	r3, #1
 8002090:	d113      	bne.n	80020ba <HAL_ETH_IRQHandler+0x7a>
  {
    if (__HAL_ETH_DMA_GET_IT_SOURCE(heth, ETH_DMAIER_TIE))
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800209a:	69db      	ldr	r3, [r3, #28]
 800209c:	f003 0301 	and.w	r3, r3, #1
 80020a0:	2b01      	cmp	r3, #1
 80020a2:	d10a      	bne.n	80020ba <HAL_ETH_IRQHandler+0x7a>
    {
      /* Clear the Eth DMA Tx IT pending bits */
      __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMASR_TS | ETH_DMASR_NIS);
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80020ac:	461a      	mov	r2, r3
 80020ae:	f04f 1301 	mov.w	r3, #65537	; 0x10001
 80020b2:	6153      	str	r3, [r2, #20]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /*Call registered Transmit complete callback*/
      heth->TxCpltCallback(heth);
#else
      /* Transfer complete callback */
      HAL_ETH_TxCpltCallback(heth);
 80020b4:	6878      	ldr	r0, [r7, #4]
 80020b6:	f002 ffb5 	bl	8005024 <HAL_ETH_TxCpltCallback>
    }
  }


  /* ETH DMA Error */
  if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMASR_AIS))
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80020c2:	695b      	ldr	r3, [r3, #20]
 80020c4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80020c8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80020cc:	d14c      	bne.n	8002168 <HAL_ETH_IRQHandler+0x128>
  {
    if (__HAL_ETH_DMA_GET_IT_SOURCE(heth, ETH_DMAIER_AISE))
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80020d6:	69db      	ldr	r3, [r3, #28]
 80020d8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80020dc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80020e0:	d142      	bne.n	8002168 <HAL_ETH_IRQHandler+0x128>
    {
      heth->ErrorCode |= HAL_ETH_ERROR_DMA;
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80020e8:	f043 0208 	orr.w	r2, r3, #8
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      /* if fatal bus error occurred */
      if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMASR_FBES))
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80020fa:	695b      	ldr	r3, [r3, #20]
 80020fc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002100:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002104:	d11a      	bne.n	800213c <HAL_ETH_IRQHandler+0xfc>
      {
        /* Get DMA error code  */
        heth->DMAErrorCode = READ_BIT(heth->Instance->DMASR, (ETH_DMASR_FBES | ETH_DMASR_TPS | ETH_DMASR_RPS));
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800210e:	695a      	ldr	r2, [r3, #20]
 8002110:	4b2a      	ldr	r3, [pc, #168]	; (80021bc <HAL_ETH_IRQHandler+0x17c>)
 8002112:	4013      	ands	r3, r2
 8002114:	687a      	ldr	r2, [r7, #4]
 8002116:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c

        /* Disable all interrupts */
        __HAL_ETH_DMA_DISABLE_IT(heth, ETH_DMAIER_NISE | ETH_DMAIER_AISE);
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002122:	69db      	ldr	r3, [r3, #28]
 8002124:	687a      	ldr	r2, [r7, #4]
 8002126:	6812      	ldr	r2, [r2, #0]
 8002128:	f423 33c0 	bic.w	r3, r3, #98304	; 0x18000
 800212c:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8002130:	61d3      	str	r3, [r2, #28]

        /* Set HAL state to ERROR */
        heth->gState = HAL_ETH_STATE_ERROR;
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	22e0      	movs	r2, #224	; 0xe0
 8002136:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
 800213a:	e012      	b.n	8002162 <HAL_ETH_IRQHandler+0x122>
      }
      else
      {
        /* Get DMA error status  */
        heth->DMAErrorCode = READ_BIT(heth->Instance->DMASR, (ETH_DMASR_ETS | ETH_DMASR_RWTS |
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002144:	695a      	ldr	r2, [r3, #20]
 8002146:	f248 6380 	movw	r3, #34432	; 0x8680
 800214a:	4013      	ands	r3, r2
 800214c:	687a      	ldr	r2, [r7, #4]
 800214e:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
                                                              ETH_DMASR_RBUS | ETH_DMASR_AIS));

        /* Clear the interrupt summary flag */
        __HAL_ETH_DMA_CLEAR_IT(heth, (ETH_DMASR_ETS | ETH_DMASR_RWTS |
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800215a:	461a      	mov	r2, r3
 800215c:	f248 6380 	movw	r3, #34432	; 0x8680
 8002160:	6153      	str	r3, [r2, #20]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /* Call registered Error callback*/
      heth->ErrorCallback(heth);
#else
      /* Ethernet DMA Error callback */
      HAL_ETH_ErrorCallback(heth);
 8002162:	6878      	ldr	r0, [r7, #4]
 8002164:	f002 ff6e 	bl	8005044 <HAL_ETH_ErrorCallback>
    }
  }


  /* ETH PMT IT */
  if (__HAL_ETH_MAC_GET_IT(heth, ETH_MAC_PMT_IT))
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800216e:	f003 0308 	and.w	r3, r3, #8
 8002172:	2b08      	cmp	r3, #8
 8002174:	d10e      	bne.n	8002194 <HAL_ETH_IRQHandler+0x154>
  {
    /* Get MAC Wake-up source and clear the status register pending bit */
    heth->MACWakeUpEvent = READ_BIT(heth->Instance->MACPMTCSR, (ETH_MACPMTCSR_WFR | ETH_MACPMTCSR_MPR));
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800217c:	f003 0260 	and.w	r2, r3, #96	; 0x60
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered PMT callback*/
    heth->PMTCallback(heth);
#else
    /* Ethernet PMT callback */
    HAL_ETH_PMTCallback(heth);
 8002186:	6878      	ldr	r0, [r7, #4]
 8002188:	f000 f81c 	bl	80021c4 <HAL_ETH_PMTCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */

    heth->MACWakeUpEvent = (uint32_t)(0x0U);
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	2200      	movs	r2, #0
 8002190:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  }


  /* check ETH WAKEUP exti flag */
  if (__HAL_ETH_WAKEUP_EXTI_GET_FLAG(ETH_WAKEUP_EXTI_LINE) != (uint32_t)RESET)
 8002194:	4b0a      	ldr	r3, [pc, #40]	; (80021c0 <HAL_ETH_IRQHandler+0x180>)
 8002196:	695b      	ldr	r3, [r3, #20]
 8002198:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800219c:	2b00      	cmp	r3, #0
 800219e:	d006      	beq.n	80021ae <HAL_ETH_IRQHandler+0x16e>
  {
    /* Clear ETH WAKEUP Exti pending bit */
    __HAL_ETH_WAKEUP_EXTI_CLEAR_FLAG(ETH_WAKEUP_EXTI_LINE);
 80021a0:	4b07      	ldr	r3, [pc, #28]	; (80021c0 <HAL_ETH_IRQHandler+0x180>)
 80021a2:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 80021a6:	615a      	str	r2, [r3, #20]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered WakeUp callback*/
    heth->WakeUpCallback(heth);
#else
    /* ETH WAKEUP callback */
    HAL_ETH_WakeUpCallback(heth);
 80021a8:	6878      	ldr	r0, [r7, #4]
 80021aa:	f000 f815 	bl	80021d8 <HAL_ETH_WakeUpCallback>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }
}
 80021ae:	bf00      	nop
 80021b0:	3708      	adds	r7, #8
 80021b2:	46bd      	mov	sp, r7
 80021b4:	bd80      	pop	{r7, pc}
 80021b6:	bf00      	nop
 80021b8:	00010040 	.word	0x00010040
 80021bc:	007e2000 	.word	0x007e2000
 80021c0:	40013c00 	.word	0x40013c00

080021c4 <HAL_ETH_PMTCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_PMTCallback(ETH_HandleTypeDef *heth)
{
 80021c4:	b480      	push	{r7}
 80021c6:	b083      	sub	sp, #12
 80021c8:	af00      	add	r7, sp, #0
 80021ca:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_PMTCallback could be implemented in the user file
  */
}
 80021cc:	bf00      	nop
 80021ce:	370c      	adds	r7, #12
 80021d0:	46bd      	mov	sp, r7
 80021d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021d6:	4770      	bx	lr

080021d8 <HAL_ETH_WakeUpCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_WakeUpCallback(ETH_HandleTypeDef *heth)
{
 80021d8:	b480      	push	{r7}
 80021da:	b083      	sub	sp, #12
 80021dc:	af00      	add	r7, sp, #0
 80021de:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ETH_WakeUpCallback could be implemented in the user file
   */
}
 80021e0:	bf00      	nop
 80021e2:	370c      	adds	r7, #12
 80021e4:	46bd      	mov	sp, r7
 80021e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ea:	4770      	bx	lr

080021ec <HAL_ETH_ReadPHYRegister>:
  * @param pRegValue: parameter to hold read value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadPHYRegister(ETH_HandleTypeDef *heth, uint32_t PHYAddr, uint32_t PHYReg,
                                          uint32_t *pRegValue)
{
 80021ec:	b580      	push	{r7, lr}
 80021ee:	b086      	sub	sp, #24
 80021f0:	af00      	add	r7, sp, #0
 80021f2:	60f8      	str	r0, [r7, #12]
 80021f4:	60b9      	str	r1, [r7, #8]
 80021f6:	607a      	str	r2, [r7, #4]
 80021f8:	603b      	str	r3, [r7, #0]
  uint32_t tmpreg1;
  uint32_t tickstart;

  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = heth->Instance->MACMIIAR;
 80021fa:	68fb      	ldr	r3, [r7, #12]
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	691b      	ldr	r3, [r3, #16]
 8002200:	617b      	str	r3, [r7, #20]

  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 8002202:	697b      	ldr	r3, [r7, #20]
 8002204:	f003 031c 	and.w	r3, r3, #28
 8002208:	617b      	str	r3, [r7, #20]

  /* Prepare the MII address register value */
  tmpreg1 |= ((PHYAddr << 11U) & ETH_MACMIIAR_PA);                        /* Set the PHY device address   */
 800220a:	68bb      	ldr	r3, [r7, #8]
 800220c:	02db      	lsls	r3, r3, #11
 800220e:	b29b      	uxth	r3, r3
 8002210:	697a      	ldr	r2, [r7, #20]
 8002212:	4313      	orrs	r3, r2
 8002214:	617b      	str	r3, [r7, #20]
  tmpreg1 |= (((uint32_t)PHYReg << 6U) & ETH_MACMIIAR_MR);                /* Set the PHY register address */
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	019b      	lsls	r3, r3, #6
 800221a:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 800221e:	697a      	ldr	r2, [r7, #20]
 8002220:	4313      	orrs	r3, r2
 8002222:	617b      	str	r3, [r7, #20]
  tmpreg1 &= ~ETH_MACMIIAR_MW;                                            /* Set the read mode            */
 8002224:	697b      	ldr	r3, [r7, #20]
 8002226:	f023 0302 	bic.w	r3, r3, #2
 800222a:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MB;                                             /* Set the MII Busy bit         */
 800222c:	697b      	ldr	r3, [r7, #20]
 800222e:	f043 0301 	orr.w	r3, r3, #1
 8002232:	617b      	str	r3, [r7, #20]

  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg1;
 8002234:	68fb      	ldr	r3, [r7, #12]
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	697a      	ldr	r2, [r7, #20]
 800223a:	611a      	str	r2, [r3, #16]


  tickstart = HAL_GetTick();
 800223c:	f7ff fa74 	bl	8001728 <HAL_GetTick>
 8002240:	6138      	str	r0, [r7, #16]

  /* Check for the Busy flag */
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8002242:	e00d      	b.n	8002260 <HAL_ETH_ReadPHYRegister+0x74>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > PHY_READ_TO)
 8002244:	f7ff fa70 	bl	8001728 <HAL_GetTick>
 8002248:	4602      	mov	r2, r0
 800224a:	693b      	ldr	r3, [r7, #16]
 800224c:	1ad3      	subs	r3, r2, r3
 800224e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002252:	d301      	bcc.n	8002258 <HAL_ETH_ReadPHYRegister+0x6c>
    {
      return HAL_ERROR;
 8002254:	2301      	movs	r3, #1
 8002256:	e010      	b.n	800227a <HAL_ETH_ReadPHYRegister+0x8e>
    }

    tmpreg1 = heth->Instance->MACMIIAR;
 8002258:	68fb      	ldr	r3, [r7, #12]
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	691b      	ldr	r3, [r3, #16]
 800225e:	617b      	str	r3, [r7, #20]
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8002260:	697b      	ldr	r3, [r7, #20]
 8002262:	f003 0301 	and.w	r3, r3, #1
 8002266:	2b00      	cmp	r3, #0
 8002268:	d1ec      	bne.n	8002244 <HAL_ETH_ReadPHYRegister+0x58>
  }

  /* Get MACMIIDR value */
  *pRegValue = (uint16_t)(heth->Instance->MACMIIDR);
 800226a:	68fb      	ldr	r3, [r7, #12]
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	695b      	ldr	r3, [r3, #20]
 8002270:	b29b      	uxth	r3, r3
 8002272:	461a      	mov	r2, r3
 8002274:	683b      	ldr	r3, [r7, #0]
 8002276:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 8002278:	2300      	movs	r3, #0
}
 800227a:	4618      	mov	r0, r3
 800227c:	3718      	adds	r7, #24
 800227e:	46bd      	mov	sp, r7
 8002280:	bd80      	pop	{r7, pc}

08002282 <HAL_ETH_WritePHYRegister>:
  * @param  RegValue: the value to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_WritePHYRegister(ETH_HandleTypeDef *heth, uint32_t PHYAddr, uint32_t PHYReg,
                                           uint32_t RegValue)
{
 8002282:	b580      	push	{r7, lr}
 8002284:	b086      	sub	sp, #24
 8002286:	af00      	add	r7, sp, #0
 8002288:	60f8      	str	r0, [r7, #12]
 800228a:	60b9      	str	r1, [r7, #8]
 800228c:	607a      	str	r2, [r7, #4]
 800228e:	603b      	str	r3, [r7, #0]
  uint32_t tmpreg1;
  uint32_t tickstart;

  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = heth->Instance->MACMIIAR;
 8002290:	68fb      	ldr	r3, [r7, #12]
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	691b      	ldr	r3, [r3, #16]
 8002296:	617b      	str	r3, [r7, #20]

  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 8002298:	697b      	ldr	r3, [r7, #20]
 800229a:	f003 031c 	and.w	r3, r3, #28
 800229e:	617b      	str	r3, [r7, #20]

  /* Prepare the MII register address value */
  tmpreg1 |= ((PHYAddr << 11U) & ETH_MACMIIAR_PA);                      /* Set the PHY device address */
 80022a0:	68bb      	ldr	r3, [r7, #8]
 80022a2:	02db      	lsls	r3, r3, #11
 80022a4:	b29b      	uxth	r3, r3
 80022a6:	697a      	ldr	r2, [r7, #20]
 80022a8:	4313      	orrs	r3, r2
 80022aa:	617b      	str	r3, [r7, #20]
  tmpreg1 |= (((uint32_t)PHYReg << 6U) & ETH_MACMIIAR_MR);              /* Set the PHY register address */
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	019b      	lsls	r3, r3, #6
 80022b0:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 80022b4:	697a      	ldr	r2, [r7, #20]
 80022b6:	4313      	orrs	r3, r2
 80022b8:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MW;                                           /* Set the write mode */
 80022ba:	697b      	ldr	r3, [r7, #20]
 80022bc:	f043 0302 	orr.w	r3, r3, #2
 80022c0:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MB;                                           /* Set the MII Busy bit */
 80022c2:	697b      	ldr	r3, [r7, #20]
 80022c4:	f043 0301 	orr.w	r3, r3, #1
 80022c8:	617b      	str	r3, [r7, #20]

  /* Give the value to the MII data register */
  heth->Instance->MACMIIDR = (uint16_t)RegValue;
 80022ca:	683b      	ldr	r3, [r7, #0]
 80022cc:	b29a      	uxth	r2, r3
 80022ce:	68fb      	ldr	r3, [r7, #12]
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	615a      	str	r2, [r3, #20]

  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg1;
 80022d4:	68fb      	ldr	r3, [r7, #12]
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	697a      	ldr	r2, [r7, #20]
 80022da:	611a      	str	r2, [r3, #16]

  /* Get tick */
  tickstart = HAL_GetTick();
 80022dc:	f7ff fa24 	bl	8001728 <HAL_GetTick>
 80022e0:	6138      	str	r0, [r7, #16]

  /* Check for the Busy flag */
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 80022e2:	e00d      	b.n	8002300 <HAL_ETH_WritePHYRegister+0x7e>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > PHY_WRITE_TO)
 80022e4:	f7ff fa20 	bl	8001728 <HAL_GetTick>
 80022e8:	4602      	mov	r2, r0
 80022ea:	693b      	ldr	r3, [r7, #16]
 80022ec:	1ad3      	subs	r3, r2, r3
 80022ee:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80022f2:	d301      	bcc.n	80022f8 <HAL_ETH_WritePHYRegister+0x76>
    {
      return HAL_ERROR;
 80022f4:	2301      	movs	r3, #1
 80022f6:	e009      	b.n	800230c <HAL_ETH_WritePHYRegister+0x8a>
    }

    tmpreg1 = heth->Instance->MACMIIAR;
 80022f8:	68fb      	ldr	r3, [r7, #12]
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	691b      	ldr	r3, [r3, #16]
 80022fe:	617b      	str	r3, [r7, #20]
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8002300:	697b      	ldr	r3, [r7, #20]
 8002302:	f003 0301 	and.w	r3, r3, #1
 8002306:	2b00      	cmp	r3, #0
 8002308:	d1ec      	bne.n	80022e4 <HAL_ETH_WritePHYRegister+0x62>
  }

  return HAL_OK;
 800230a:	2300      	movs	r3, #0
}
 800230c:	4618      	mov	r0, r3
 800230e:	3718      	adds	r7, #24
 8002310:	46bd      	mov	sp, r7
 8002312:	bd80      	pop	{r7, pc}

08002314 <HAL_ETH_GetMACConfig>:
  * @param  macconf: pointer to a ETH_MACConfigTypeDef structure that will hold
  *         the configuration of the MAC.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_ETH_GetMACConfig(ETH_HandleTypeDef *heth, ETH_MACConfigTypeDef *macconf)
{
 8002314:	b480      	push	{r7}
 8002316:	b083      	sub	sp, #12
 8002318:	af00      	add	r7, sp, #0
 800231a:	6078      	str	r0, [r7, #4]
 800231c:	6039      	str	r1, [r7, #0]
  if (macconf == NULL)
 800231e:	683b      	ldr	r3, [r7, #0]
 8002320:	2b00      	cmp	r3, #0
 8002322:	d101      	bne.n	8002328 <HAL_ETH_GetMACConfig+0x14>
  {
    return HAL_ERROR;
 8002324:	2301      	movs	r3, #1
 8002326:	e0d9      	b.n	80024dc <HAL_ETH_GetMACConfig+0x1c8>
  }

  /* Get MAC parameters */
  macconf->DeferralCheck = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DC) >> 4) > 0U) ? ENABLE : DISABLE;
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	f003 0310 	and.w	r3, r3, #16
 8002332:	2b00      	cmp	r3, #0
 8002334:	bf14      	ite	ne
 8002336:	2301      	movne	r3, #1
 8002338:	2300      	moveq	r3, #0
 800233a:	b2db      	uxtb	r3, r3
 800233c:	461a      	mov	r2, r3
 800233e:	683b      	ldr	r3, [r7, #0]
 8002340:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
  macconf->BackOffLimit = READ_BIT(heth->Instance->MACCR, ETH_MACCR_BL);
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	f003 0260 	and.w	r2, r3, #96	; 0x60
 800234e:	683b      	ldr	r3, [r7, #0]
 8002350:	625a      	str	r2, [r3, #36]	; 0x24
  macconf->RetryTransmission = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_RD) >> 9) == 0U) ? ENABLE : DISABLE;
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800235c:	2b00      	cmp	r3, #0
 800235e:	bf0c      	ite	eq
 8002360:	2301      	moveq	r3, #1
 8002362:	2300      	movne	r3, #0
 8002364:	b2db      	uxtb	r3, r3
 8002366:	461a      	mov	r2, r3
 8002368:	683b      	ldr	r3, [r7, #0]
 800236a:	f883 2020 	strb.w	r2, [r3, #32]
  macconf->CarrierSenseDuringTransmit = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_CSD) >> 16) > 0U)
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
                                        ? ENABLE : DISABLE;
 8002378:	2b00      	cmp	r3, #0
 800237a:	bf14      	ite	ne
 800237c:	2301      	movne	r3, #1
 800237e:	2300      	moveq	r3, #0
 8002380:	b2db      	uxtb	r3, r3
 8002382:	461a      	mov	r2, r3
  macconf->CarrierSenseDuringTransmit = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_CSD) >> 16) > 0U)
 8002384:	683b      	ldr	r3, [r7, #0]
 8002386:	77da      	strb	r2, [r3, #31]
  macconf->ReceiveOwn = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_ROD) >> 13) == 0U) ? ENABLE : DISABLE;
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002392:	2b00      	cmp	r3, #0
 8002394:	bf0c      	ite	eq
 8002396:	2301      	moveq	r3, #1
 8002398:	2300      	movne	r3, #0
 800239a:	b2db      	uxtb	r3, r3
 800239c:	461a      	mov	r2, r3
 800239e:	683b      	ldr	r3, [r7, #0]
 80023a0:	779a      	strb	r2, [r3, #30]
  macconf->LoopbackMode = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_LM) >> 12) > 0U) ? ENABLE : DISABLE;
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80023ac:	2b00      	cmp	r3, #0
 80023ae:	bf14      	ite	ne
 80023b0:	2301      	movne	r3, #1
 80023b2:	2300      	moveq	r3, #0
 80023b4:	b2db      	uxtb	r3, r3
 80023b6:	461a      	mov	r2, r3
 80023b8:	683b      	ldr	r3, [r7, #0]
 80023ba:	771a      	strb	r2, [r3, #28]
  macconf->DuplexMode = READ_BIT(heth->Instance->MACCR, ETH_MACCR_DM);
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	f403 6200 	and.w	r2, r3, #2048	; 0x800
 80023c6:	683b      	ldr	r3, [r7, #0]
 80023c8:	619a      	str	r2, [r3, #24]
  macconf->Speed = READ_BIT(heth->Instance->MACCR, ETH_MACCR_FES);
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	f403 4280 	and.w	r2, r3, #16384	; 0x4000
 80023d4:	683b      	ldr	r3, [r7, #0]
 80023d6:	615a      	str	r2, [r3, #20]
  macconf->Jabber = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_JD) >> 22) == 0U) ? ENABLE : DISABLE;
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80023e2:	2b00      	cmp	r3, #0
 80023e4:	bf0c      	ite	eq
 80023e6:	2301      	moveq	r3, #1
 80023e8:	2300      	movne	r3, #0
 80023ea:	b2db      	uxtb	r3, r3
 80023ec:	461a      	mov	r2, r3
 80023ee:	683b      	ldr	r3, [r7, #0]
 80023f0:	745a      	strb	r2, [r3, #17]
  macconf->Watchdog = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_WD) >> 23) == 0U) ? ENABLE : DISABLE;
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80023fc:	2b00      	cmp	r3, #0
 80023fe:	bf0c      	ite	eq
 8002400:	2301      	moveq	r3, #1
 8002402:	2300      	movne	r3, #0
 8002404:	b2db      	uxtb	r3, r3
 8002406:	461a      	mov	r2, r3
 8002408:	683b      	ldr	r3, [r7, #0]
 800240a:	741a      	strb	r2, [r3, #16]
  macconf->AutomaticPadCRCStrip = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_APCS) >> 7) > 0U) ? ENABLE : DISABLE;
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002416:	2b00      	cmp	r3, #0
 8002418:	bf14      	ite	ne
 800241a:	2301      	movne	r3, #1
 800241c:	2300      	moveq	r3, #0
 800241e:	b2db      	uxtb	r3, r3
 8002420:	461a      	mov	r2, r3
 8002422:	683b      	ldr	r3, [r7, #0]
 8002424:	73da      	strb	r2, [r3, #15]
  macconf->InterPacketGapVal = READ_BIT(heth->Instance->MACCR, ETH_MACCR_IFG);
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	f403 2260 	and.w	r2, r3, #917504	; 0xe0000
 8002430:	683b      	ldr	r3, [r7, #0]
 8002432:	609a      	str	r2, [r3, #8]
  macconf->ChecksumOffload = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_IPCO) >> 10U) > 0U) ? ENABLE : DISABLE;
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800243e:	2b00      	cmp	r3, #0
 8002440:	bf14      	ite	ne
 8002442:	2301      	movne	r3, #1
 8002444:	2300      	moveq	r3, #0
 8002446:	b2db      	uxtb	r3, r3
 8002448:	461a      	mov	r2, r3
 800244a:	683b      	ldr	r3, [r7, #0]
 800244c:	711a      	strb	r2, [r3, #4]


  macconf->TransmitFlowControl = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_TFCE) >> 1) > 0U) ? ENABLE : DISABLE;
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	699b      	ldr	r3, [r3, #24]
 8002454:	f003 0302 	and.w	r3, r3, #2
 8002458:	2b00      	cmp	r3, #0
 800245a:	bf14      	ite	ne
 800245c:	2301      	movne	r3, #1
 800245e:	2300      	moveq	r3, #0
 8002460:	b2db      	uxtb	r3, r3
 8002462:	461a      	mov	r2, r3
 8002464:	683b      	ldr	r3, [r7, #0]
 8002466:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  macconf->ZeroQuantaPause = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_ZQPD) >> 7) == 0U) ? ENABLE : DISABLE;
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	699b      	ldr	r3, [r3, #24]
 8002470:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002474:	2b00      	cmp	r3, #0
 8002476:	bf0c      	ite	eq
 8002478:	2301      	moveq	r3, #1
 800247a:	2300      	movne	r3, #0
 800247c:	b2db      	uxtb	r3, r3
 800247e:	461a      	mov	r2, r3
 8002480:	683b      	ldr	r3, [r7, #0]
 8002482:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
  macconf->PauseLowThreshold = READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_PLT);
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	699b      	ldr	r3, [r3, #24]
 800248c:	f003 0230 	and.w	r2, r3, #48	; 0x30
 8002490:	683b      	ldr	r3, [r7, #0]
 8002492:	651a      	str	r2, [r3, #80]	; 0x50
  macconf->PauseTime = (READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_PT) >> 16);
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	699b      	ldr	r3, [r3, #24]
 800249a:	0c1b      	lsrs	r3, r3, #16
 800249c:	b29a      	uxth	r2, r3
 800249e:	683b      	ldr	r3, [r7, #0]
 80024a0:	649a      	str	r2, [r3, #72]	; 0x48
  macconf->ReceiveFlowControl = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_RFCE) >> 2U) > 0U) ? ENABLE : DISABLE;
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	699b      	ldr	r3, [r3, #24]
 80024a8:	f003 0304 	and.w	r3, r3, #4
 80024ac:	2b00      	cmp	r3, #0
 80024ae:	bf14      	ite	ne
 80024b0:	2301      	movne	r3, #1
 80024b2:	2300      	moveq	r3, #0
 80024b4:	b2db      	uxtb	r3, r3
 80024b6:	461a      	mov	r2, r3
 80024b8:	683b      	ldr	r3, [r7, #0]
 80024ba:	f883 2056 	strb.w	r2, [r3, #86]	; 0x56
  macconf->UnicastPausePacketDetect = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_UPFD) >> 3U) > 0U)
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	699b      	ldr	r3, [r3, #24]
 80024c4:	f003 0308 	and.w	r3, r3, #8
                                      ? ENABLE : DISABLE;
 80024c8:	2b00      	cmp	r3, #0
 80024ca:	bf14      	ite	ne
 80024cc:	2301      	movne	r3, #1
 80024ce:	2300      	moveq	r3, #0
 80024d0:	b2db      	uxtb	r3, r3
 80024d2:	461a      	mov	r2, r3
  macconf->UnicastPausePacketDetect = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_UPFD) >> 3U) > 0U)
 80024d4:	683b      	ldr	r3, [r7, #0]
 80024d6:	f883 2055 	strb.w	r2, [r3, #85]	; 0x55

  return HAL_OK;
 80024da:	2300      	movs	r3, #0
}
 80024dc:	4618      	mov	r0, r3
 80024de:	370c      	adds	r7, #12
 80024e0:	46bd      	mov	sp, r7
 80024e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024e6:	4770      	bx	lr

080024e8 <HAL_ETH_SetMACConfig>:
  * @param  macconf: pointer to a ETH_MACConfigTypeDef structure that contains
  *         the configuration of the MAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 80024e8:	b580      	push	{r7, lr}
 80024ea:	b082      	sub	sp, #8
 80024ec:	af00      	add	r7, sp, #0
 80024ee:	6078      	str	r0, [r7, #4]
 80024f0:	6039      	str	r1, [r7, #0]
  if (macconf == NULL)
 80024f2:	683b      	ldr	r3, [r7, #0]
 80024f4:	2b00      	cmp	r3, #0
 80024f6:	d101      	bne.n	80024fc <HAL_ETH_SetMACConfig+0x14>
  {
    return HAL_ERROR;
 80024f8:	2301      	movs	r3, #1
 80024fa:	e00b      	b.n	8002514 <HAL_ETH_SetMACConfig+0x2c>
  }

  if (heth->gState == HAL_ETH_STATE_READY)
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002502:	2b10      	cmp	r3, #16
 8002504:	d105      	bne.n	8002512 <HAL_ETH_SetMACConfig+0x2a>
  {
    ETH_SetMACConfig(heth, macconf);
 8002506:	6839      	ldr	r1, [r7, #0]
 8002508:	6878      	ldr	r0, [r7, #4]
 800250a:	f000 f88f 	bl	800262c <ETH_SetMACConfig>

    return HAL_OK;
 800250e:	2300      	movs	r3, #0
 8002510:	e000      	b.n	8002514 <HAL_ETH_SetMACConfig+0x2c>
  }
  else
  {
    return HAL_ERROR;
 8002512:	2301      	movs	r3, #1
  }
}
 8002514:	4618      	mov	r0, r3
 8002516:	3708      	adds	r7, #8
 8002518:	46bd      	mov	sp, r7
 800251a:	bd80      	pop	{r7, pc}

0800251c <HAL_ETH_SetMDIOClockRange>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
void HAL_ETH_SetMDIOClockRange(ETH_HandleTypeDef *heth)
{
 800251c:	b580      	push	{r7, lr}
 800251e:	b084      	sub	sp, #16
 8002520:	af00      	add	r7, sp, #0
 8002522:	6078      	str	r0, [r7, #4]
  uint32_t hclk;
  uint32_t tmpreg;

  /* Get the ETHERNET MACMIIAR value */
  tmpreg = (heth->Instance)->MACMIIAR;
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	691b      	ldr	r3, [r3, #16]
 800252a:	60fb      	str	r3, [r7, #12]
  /* Clear CSR Clock Range CR[2:0] bits */
  tmpreg &= ETH_MACMIIAR_CR_MASK;
 800252c:	68fb      	ldr	r3, [r7, #12]
 800252e:	f023 031c 	bic.w	r3, r3, #28
 8002532:	60fb      	str	r3, [r7, #12]

  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 8002534:	f001 fe3a 	bl	80041ac <HAL_RCC_GetHCLKFreq>
 8002538:	60b8      	str	r0, [r7, #8]

  /* Set CR bits depending on hclk value */
  if ((hclk >= 20000000U) && (hclk < 35000000U))
 800253a:	68bb      	ldr	r3, [r7, #8]
 800253c:	4a1d      	ldr	r2, [pc, #116]	; (80025b4 <HAL_ETH_SetMDIOClockRange+0x98>)
 800253e:	4293      	cmp	r3, r2
 8002540:	d908      	bls.n	8002554 <HAL_ETH_SetMDIOClockRange+0x38>
 8002542:	68bb      	ldr	r3, [r7, #8]
 8002544:	4a1c      	ldr	r2, [pc, #112]	; (80025b8 <HAL_ETH_SetMDIOClockRange+0x9c>)
 8002546:	4293      	cmp	r3, r2
 8002548:	d804      	bhi.n	8002554 <HAL_ETH_SetMDIOClockRange+0x38>
  {
    /* CSR Clock Range between 20-35 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div16;
 800254a:	68fb      	ldr	r3, [r7, #12]
 800254c:	f043 0308 	orr.w	r3, r3, #8
 8002550:	60fb      	str	r3, [r7, #12]
 8002552:	e027      	b.n	80025a4 <HAL_ETH_SetMDIOClockRange+0x88>
  }
  else if ((hclk >= 35000000U) && (hclk < 60000000U))
 8002554:	68bb      	ldr	r3, [r7, #8]
 8002556:	4a18      	ldr	r2, [pc, #96]	; (80025b8 <HAL_ETH_SetMDIOClockRange+0x9c>)
 8002558:	4293      	cmp	r3, r2
 800255a:	d908      	bls.n	800256e <HAL_ETH_SetMDIOClockRange+0x52>
 800255c:	68bb      	ldr	r3, [r7, #8]
 800255e:	4a17      	ldr	r2, [pc, #92]	; (80025bc <HAL_ETH_SetMDIOClockRange+0xa0>)
 8002560:	4293      	cmp	r3, r2
 8002562:	d204      	bcs.n	800256e <HAL_ETH_SetMDIOClockRange+0x52>
  {
    /* CSR Clock Range between 35-60 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div26;
 8002564:	68fb      	ldr	r3, [r7, #12]
 8002566:	f043 030c 	orr.w	r3, r3, #12
 800256a:	60fb      	str	r3, [r7, #12]
 800256c:	e01a      	b.n	80025a4 <HAL_ETH_SetMDIOClockRange+0x88>
  }
  else if ((hclk >= 60000000U) && (hclk < 100000000U))
 800256e:	68bb      	ldr	r3, [r7, #8]
 8002570:	4a12      	ldr	r2, [pc, #72]	; (80025bc <HAL_ETH_SetMDIOClockRange+0xa0>)
 8002572:	4293      	cmp	r3, r2
 8002574:	d303      	bcc.n	800257e <HAL_ETH_SetMDIOClockRange+0x62>
 8002576:	68bb      	ldr	r3, [r7, #8]
 8002578:	4a11      	ldr	r2, [pc, #68]	; (80025c0 <HAL_ETH_SetMDIOClockRange+0xa4>)
 800257a:	4293      	cmp	r3, r2
 800257c:	d911      	bls.n	80025a2 <HAL_ETH_SetMDIOClockRange+0x86>
  {
    /* CSR Clock Range between 60-100 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div42;
  }
  else if ((hclk >= 100000000U) && (hclk < 150000000U))
 800257e:	68bb      	ldr	r3, [r7, #8]
 8002580:	4a0f      	ldr	r2, [pc, #60]	; (80025c0 <HAL_ETH_SetMDIOClockRange+0xa4>)
 8002582:	4293      	cmp	r3, r2
 8002584:	d908      	bls.n	8002598 <HAL_ETH_SetMDIOClockRange+0x7c>
 8002586:	68bb      	ldr	r3, [r7, #8]
 8002588:	4a0e      	ldr	r2, [pc, #56]	; (80025c4 <HAL_ETH_SetMDIOClockRange+0xa8>)
 800258a:	4293      	cmp	r3, r2
 800258c:	d804      	bhi.n	8002598 <HAL_ETH_SetMDIOClockRange+0x7c>
  {
    /* CSR Clock Range between 100-150 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div62;
 800258e:	68fb      	ldr	r3, [r7, #12]
 8002590:	f043 0304 	orr.w	r3, r3, #4
 8002594:	60fb      	str	r3, [r7, #12]
 8002596:	e005      	b.n	80025a4 <HAL_ETH_SetMDIOClockRange+0x88>
  }
  else /* ((hclk >= 150000000)&&(hclk <= 183000000))*/
  {
    /* CSR Clock Range between 150-183 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div102;
 8002598:	68fb      	ldr	r3, [r7, #12]
 800259a:	f043 0310 	orr.w	r3, r3, #16
 800259e:	60fb      	str	r3, [r7, #12]
 80025a0:	e000      	b.n	80025a4 <HAL_ETH_SetMDIOClockRange+0x88>
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div42;
 80025a2:	bf00      	nop
  }

  /* Write to ETHERNET MAC MIIAR: Configure the ETHERNET CSR Clock Range */
  (heth->Instance)->MACMIIAR = (uint32_t)tmpreg;
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	68fa      	ldr	r2, [r7, #12]
 80025aa:	611a      	str	r2, [r3, #16]
}
 80025ac:	bf00      	nop
 80025ae:	3710      	adds	r7, #16
 80025b0:	46bd      	mov	sp, r7
 80025b2:	bd80      	pop	{r7, pc}
 80025b4:	01312cff 	.word	0x01312cff
 80025b8:	02160ebf 	.word	0x02160ebf
 80025bc:	03938700 	.word	0x03938700
 80025c0:	05f5e0ff 	.word	0x05f5e0ff
 80025c4:	08f0d17f 	.word	0x08f0d17f

080025c8 <HAL_ETH_GetDMAError>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval ETH DMA Error Code
  */
uint32_t HAL_ETH_GetDMAError(ETH_HandleTypeDef *heth)
{
 80025c8:	b480      	push	{r7}
 80025ca:	b083      	sub	sp, #12
 80025cc:	af00      	add	r7, sp, #0
 80025ce:	6078      	str	r0, [r7, #4]
  return heth->DMAErrorCode;
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
}
 80025d6:	4618      	mov	r0, r3
 80025d8:	370c      	adds	r7, #12
 80025da:	46bd      	mov	sp, r7
 80025dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025e0:	4770      	bx	lr

080025e2 <ETH_FlushTransmitFIFO>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_FlushTransmitFIFO(ETH_HandleTypeDef *heth)
{
 80025e2:	b580      	push	{r7, lr}
 80025e4:	b084      	sub	sp, #16
 80025e6:	af00      	add	r7, sp, #0
 80025e8:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg = 0;
 80025ea:	2300      	movs	r3, #0
 80025ec:	60fb      	str	r3, [r7, #12]

  /* Set the Flush Transmit FIFO bit */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_FTF;
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80025f6:	699b      	ldr	r3, [r3, #24]
 80025f8:	687a      	ldr	r2, [r7, #4]
 80025fa:	6812      	ldr	r2, [r2, #0]
 80025fc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002600:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8002604:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = (heth->Instance)->DMAOMR;
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800260e:	699b      	ldr	r3, [r3, #24]
 8002610:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8002612:	2001      	movs	r0, #1
 8002614:	f7ff f894 	bl	8001740 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg;
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	681a      	ldr	r2, [r3, #0]
 800261c:	68fb      	ldr	r3, [r7, #12]
 800261e:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8002622:	6193      	str	r3, [r2, #24]
}
 8002624:	bf00      	nop
 8002626:	3710      	adds	r7, #16
 8002628:	46bd      	mov	sp, r7
 800262a:	bd80      	pop	{r7, pc}

0800262c <ETH_SetMACConfig>:

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 800262c:	b580      	push	{r7, lr}
 800262e:	b084      	sub	sp, #16
 8002630:	af00      	add	r7, sp, #0
 8002632:	6078      	str	r0, [r7, #4]
 8002634:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	60fb      	str	r3, [r7, #12]
  /* Clear WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 800263e:	68fa      	ldr	r2, [r7, #12]
 8002640:	4b51      	ldr	r3, [pc, #324]	; (8002788 <ETH_SetMACConfig+0x15c>)
 8002642:	4013      	ands	r3, r2
 8002644:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8002646:	683b      	ldr	r3, [r7, #0]
 8002648:	7c1b      	ldrb	r3, [r3, #16]
 800264a:	2b00      	cmp	r3, #0
 800264c:	d102      	bne.n	8002654 <ETH_SetMACConfig+0x28>
 800264e:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8002652:	e000      	b.n	8002656 <ETH_SetMACConfig+0x2a>
 8002654:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 8002656:	683b      	ldr	r3, [r7, #0]
 8002658:	7c5b      	ldrb	r3, [r3, #17]
 800265a:	2b00      	cmp	r3, #0
 800265c:	d102      	bne.n	8002664 <ETH_SetMACConfig+0x38>
 800265e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8002662:	e000      	b.n	8002666 <ETH_SetMACConfig+0x3a>
 8002664:	2300      	movs	r3, #0
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8002666:	431a      	orrs	r2, r3
                        (uint32_t)macconf->InterPacketGapVal |
 8002668:	683b      	ldr	r3, [r7, #0]
 800266a:	689b      	ldr	r3, [r3, #8]
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 800266c:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 800266e:	683b      	ldr	r3, [r7, #0]
 8002670:	7fdb      	ldrb	r3, [r3, #31]
 8002672:	041b      	lsls	r3, r3, #16
                        (uint32_t)macconf->InterPacketGapVal |
 8002674:	431a      	orrs	r2, r3
                        macconf->Speed |
 8002676:	683b      	ldr	r3, [r7, #0]
 8002678:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 800267a:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 800267c:	683a      	ldr	r2, [r7, #0]
 800267e:	7f92      	ldrb	r2, [r2, #30]
 8002680:	2a00      	cmp	r2, #0
 8002682:	d102      	bne.n	800268a <ETH_SetMACConfig+0x5e>
 8002684:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002688:	e000      	b.n	800268c <ETH_SetMACConfig+0x60>
 800268a:	2200      	movs	r2, #0
                        macconf->Speed |
 800268c:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 800268e:	683b      	ldr	r3, [r7, #0]
 8002690:	7f1b      	ldrb	r3, [r3, #28]
 8002692:	031b      	lsls	r3, r3, #12
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8002694:	431a      	orrs	r2, r3
                        macconf->DuplexMode |
 8002696:	683b      	ldr	r3, [r7, #0]
 8002698:	699b      	ldr	r3, [r3, #24]
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 800269a:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 800269c:	683b      	ldr	r3, [r7, #0]
 800269e:	791b      	ldrb	r3, [r3, #4]
 80026a0:	029b      	lsls	r3, r3, #10
                        macconf->DuplexMode |
 80026a2:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 80026a4:	683a      	ldr	r2, [r7, #0]
 80026a6:	f892 2020 	ldrb.w	r2, [r2, #32]
 80026aa:	2a00      	cmp	r2, #0
 80026ac:	d102      	bne.n	80026b4 <ETH_SetMACConfig+0x88>
 80026ae:	f44f 7200 	mov.w	r2, #512	; 0x200
 80026b2:	e000      	b.n	80026b6 <ETH_SetMACConfig+0x8a>
 80026b4:	2200      	movs	r2, #0
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 80026b6:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 80026b8:	683b      	ldr	r3, [r7, #0]
 80026ba:	7bdb      	ldrb	r3, [r3, #15]
 80026bc:	01db      	lsls	r3, r3, #7
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 80026be:	431a      	orrs	r2, r3
                        macconf->BackOffLimit |
 80026c0:	683b      	ldr	r3, [r7, #0]
 80026c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 80026c4:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->DeferralCheck << 4U));
 80026c6:	683b      	ldr	r3, [r7, #0]
 80026c8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80026cc:	011b      	lsls	r3, r3, #4
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 80026ce:	4313      	orrs	r3, r2
 80026d0:	68fa      	ldr	r2, [r7, #12]
 80026d2:	4313      	orrs	r3, r2
 80026d4:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	68fa      	ldr	r2, [r7, #12]
 80026dc:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80026e6:	2001      	movs	r0, #1
 80026e8:	f7ff f82a 	bl	8001740 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	68fa      	ldr	r2, [r7, #12]
 80026f2:	601a      	str	r2, [r3, #0]

  /*----------------------- ETHERNET MACFCR Configuration --------------------*/

  /* Get the ETHERNET MACFCR value */
  tmpreg1 = (heth->Instance)->MACFCR;
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	699b      	ldr	r3, [r3, #24]
 80026fa:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 80026fc:	68fa      	ldr	r2, [r7, #12]
 80026fe:	f64f 7341 	movw	r3, #65345	; 0xff41
 8002702:	4013      	ands	r3, r2
 8002704:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8002706:	683b      	ldr	r3, [r7, #0]
 8002708:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800270a:	041b      	lsls	r3, r3, #16
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 800270c:	683a      	ldr	r2, [r7, #0]
 800270e:	f892 204c 	ldrb.w	r2, [r2, #76]	; 0x4c
 8002712:	2a00      	cmp	r2, #0
 8002714:	d101      	bne.n	800271a <ETH_SetMACConfig+0xee>
 8002716:	2280      	movs	r2, #128	; 0x80
 8002718:	e000      	b.n	800271c <ETH_SetMACConfig+0xf0>
 800271a:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 800271c:	431a      	orrs	r2, r3
                        macconf->PauseLowThreshold |
 800271e:	683b      	ldr	r3, [r7, #0]
 8002720:	6d1b      	ldr	r3, [r3, #80]	; 0x50
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 8002722:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 8002724:	683a      	ldr	r2, [r7, #0]
 8002726:	f892 2055 	ldrb.w	r2, [r2, #85]	; 0x55
 800272a:	2a01      	cmp	r2, #1
 800272c:	d101      	bne.n	8002732 <ETH_SetMACConfig+0x106>
 800272e:	2208      	movs	r2, #8
 8002730:	e000      	b.n	8002734 <ETH_SetMACConfig+0x108>
 8002732:	2200      	movs	r2, #0
                        macconf->PauseLowThreshold |
 8002734:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveFlowControl == ENABLE) ? 1U : 0U) << 2U) |
 8002736:	683a      	ldr	r2, [r7, #0]
 8002738:	f892 2056 	ldrb.w	r2, [r2, #86]	; 0x56
 800273c:	2a01      	cmp	r2, #1
 800273e:	d101      	bne.n	8002744 <ETH_SetMACConfig+0x118>
 8002740:	2204      	movs	r2, #4
 8002742:	e000      	b.n	8002746 <ETH_SetMACConfig+0x11a>
 8002744:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 8002746:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->TransmitFlowControl == ENABLE) ? 1U : 0U) << 1U));
 8002748:	683a      	ldr	r2, [r7, #0]
 800274a:	f892 2054 	ldrb.w	r2, [r2, #84]	; 0x54
 800274e:	2a01      	cmp	r2, #1
 8002750:	d101      	bne.n	8002756 <ETH_SetMACConfig+0x12a>
 8002752:	2202      	movs	r2, #2
 8002754:	e000      	b.n	8002758 <ETH_SetMACConfig+0x12c>
 8002756:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8002758:	4313      	orrs	r3, r2
 800275a:	68fa      	ldr	r2, [r7, #12]
 800275c:	4313      	orrs	r3, r2
 800275e:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACFCR */
  (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	68fa      	ldr	r2, [r7, #12]
 8002766:	619a      	str	r2, [r3, #24]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACFCR;
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	699b      	ldr	r3, [r3, #24]
 800276e:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8002770:	2001      	movs	r0, #1
 8002772:	f7fe ffe5 	bl	8001740 <HAL_Delay>
  (heth->Instance)->MACFCR = tmpreg1;
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	68fa      	ldr	r2, [r7, #12]
 800277c:	619a      	str	r2, [r3, #24]
}
 800277e:	bf00      	nop
 8002780:	3710      	adds	r7, #16
 8002782:	46bd      	mov	sp, r7
 8002784:	bd80      	pop	{r7, pc}
 8002786:	bf00      	nop
 8002788:	ff20810f 	.word	0xff20810f

0800278c <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 800278c:	b580      	push	{r7, lr}
 800278e:	b084      	sub	sp, #16
 8002790:	af00      	add	r7, sp, #0
 8002792:	6078      	str	r0, [r7, #4]
 8002794:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*----------------------- ETHERNET DMAOMR Configuration --------------------*/
  /* Get the ETHERNET DMAOMR value */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800279e:	699b      	ldr	r3, [r3, #24]
 80027a0:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 80027a2:	68fa      	ldr	r2, [r7, #12]
 80027a4:	4b3d      	ldr	r3, [pc, #244]	; (800289c <ETH_SetDMAConfig+0x110>)
 80027a6:	4013      	ands	r3, r2
 80027a8:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 80027aa:	683b      	ldr	r3, [r7, #0]
 80027ac:	7b1b      	ldrb	r3, [r3, #12]
 80027ae:	2b00      	cmp	r3, #0
 80027b0:	d102      	bne.n	80027b8 <ETH_SetDMAConfig+0x2c>
 80027b2:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 80027b6:	e000      	b.n	80027ba <ETH_SetDMAConfig+0x2e>
 80027b8:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 80027ba:	683b      	ldr	r3, [r7, #0]
 80027bc:	7b5b      	ldrb	r3, [r3, #13]
 80027be:	065b      	lsls	r3, r3, #25
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 80027c0:	4313      	orrs	r3, r2
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 80027c2:	683a      	ldr	r2, [r7, #0]
 80027c4:	7f52      	ldrb	r2, [r2, #29]
 80027c6:	2a00      	cmp	r2, #0
 80027c8:	d102      	bne.n	80027d0 <ETH_SetDMAConfig+0x44>
 80027ca:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80027ce:	e000      	b.n	80027d2 <ETH_SetDMAConfig+0x46>
 80027d0:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 80027d2:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 80027d4:	683b      	ldr	r3, [r7, #0]
 80027d6:	7b9b      	ldrb	r3, [r3, #14]
 80027d8:	055b      	lsls	r3, r3, #21
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 80027da:	431a      	orrs	r2, r3
                        dmaconf->TransmitThresholdControl |
 80027dc:	683b      	ldr	r3, [r7, #0]
 80027de:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 80027e0:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 80027e2:	683b      	ldr	r3, [r7, #0]
 80027e4:	7f1b      	ldrb	r3, [r3, #28]
 80027e6:	01db      	lsls	r3, r3, #7
                        dmaconf->TransmitThresholdControl |
 80027e8:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 80027ea:	683b      	ldr	r3, [r7, #0]
 80027ec:	7f9b      	ldrb	r3, [r3, #30]
 80027ee:	019b      	lsls	r3, r3, #6
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 80027f0:	431a      	orrs	r2, r3
                        dmaconf->ReceiveThresholdControl |
 80027f2:	683b      	ldr	r3, [r7, #0]
 80027f4:	6a1b      	ldr	r3, [r3, #32]
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 80027f6:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->SecondFrameOperate << 2U));
 80027f8:	683b      	ldr	r3, [r7, #0]
 80027fa:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80027fe:	009b      	lsls	r3, r3, #2
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8002800:	4313      	orrs	r3, r2
 8002802:	68fa      	ldr	r2, [r7, #12]
 8002804:	4313      	orrs	r3, r2
 8002806:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET DMAOMR */
  (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002810:	461a      	mov	r2, r3
 8002812:	68fb      	ldr	r3, [r7, #12]
 8002814:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800281e:	699b      	ldr	r3, [r3, #24]
 8002820:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8002822:	2001      	movs	r0, #1
 8002824:	f7fe ff8c 	bl	8001740 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002830:	461a      	mov	r2, r3
 8002832:	68fb      	ldr	r3, [r7, #12]
 8002834:	6193      	str	r3, [r2, #24]

  /*----------------------- ETHERNET DMABMR Configuration --------------------*/
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8002836:	683b      	ldr	r3, [r7, #0]
 8002838:	791b      	ldrb	r3, [r3, #4]
 800283a:	065a      	lsls	r2, r3, #25
                                        dmaconf->BurstMode |
 800283c:	683b      	ldr	r3, [r7, #0]
 800283e:	689b      	ldr	r3, [r3, #8]
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8002840:	431a      	orrs	r2, r3
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 8002842:	683b      	ldr	r3, [r7, #0]
 8002844:	699b      	ldr	r3, [r3, #24]
                                        dmaconf->BurstMode |
 8002846:	431a      	orrs	r2, r3
                                                                       Rx it is applied for the other */
                                        dmaconf->TxDMABurstLength |
 8002848:	683b      	ldr	r3, [r7, #0]
 800284a:	691b      	ldr	r3, [r3, #16]
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 800284c:	431a      	orrs	r2, r3
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 800284e:	683b      	ldr	r3, [r7, #0]
 8002850:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8002854:	01db      	lsls	r3, r3, #7
                                        dmaconf->TxDMABurstLength |
 8002856:	431a      	orrs	r2, r3
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8002858:	683b      	ldr	r3, [r7, #0]
 800285a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800285c:	009b      	lsls	r3, r3, #2
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 800285e:	431a      	orrs	r2, r3
                                        dmaconf->DMAArbitration |
 8002860:	683b      	ldr	r3, [r7, #0]
 8002862:	681b      	ldr	r3, [r3, #0]
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8002864:	4313      	orrs	r3, r2
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8002866:	687a      	ldr	r2, [r7, #4]
 8002868:	6812      	ldr	r2, [r2, #0]
 800286a:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800286e:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8002872:	6013      	str	r3, [r2, #0]
                                        ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMABMR;
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8002880:	2001      	movs	r0, #1
 8002882:	f7fe ff5d 	bl	8001740 <HAL_Delay>
  (heth->Instance)->DMABMR = tmpreg1;
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800288e:	461a      	mov	r2, r3
 8002890:	68fb      	ldr	r3, [r7, #12]
 8002892:	6013      	str	r3, [r2, #0]
}
 8002894:	bf00      	nop
 8002896:	3710      	adds	r7, #16
 8002898:	46bd      	mov	sp, r7
 800289a:	bd80      	pop	{r7, pc}
 800289c:	f8de3f23 	.word	0xf8de3f23

080028a0 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 80028a0:	b580      	push	{r7, lr}
 80028a2:	b0a6      	sub	sp, #152	; 0x98
 80028a4:	af00      	add	r7, sp, #0
 80028a6:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.Watchdog = ENABLE;
 80028a8:	2301      	movs	r3, #1
 80028aa:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
  macDefaultConf.Jabber = ENABLE;
 80028ae:	2301      	movs	r3, #1
 80028b0:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
  macDefaultConf.InterPacketGapVal = ETH_INTERFRAMEGAP_96BIT;
 80028b4:	2300      	movs	r3, #0
 80028b6:	63fb      	str	r3, [r7, #60]	; 0x3c
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 80028b8:	2300      	movs	r3, #0
 80028ba:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
  macDefaultConf.ReceiveOwn = ENABLE;
 80028be:	2301      	movs	r3, #1
 80028c0:	f887 3052 	strb.w	r3, [r7, #82]	; 0x52
  macDefaultConf.LoopbackMode = DISABLE;
 80028c4:	2300      	movs	r3, #0
 80028c6:	f887 3050 	strb.w	r3, [r7, #80]	; 0x50
  macDefaultConf.ChecksumOffload = ENABLE;
 80028ca:	2301      	movs	r3, #1
 80028cc:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  macDefaultConf.RetryTransmission = DISABLE;
 80028d0:	2300      	movs	r3, #0
 80028d2:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
  macDefaultConf.AutomaticPadCRCStrip = DISABLE;
 80028d6:	2300      	movs	r3, #0
 80028d8:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 80028dc:	2300      	movs	r3, #0
 80028de:	65bb      	str	r3, [r7, #88]	; 0x58
  macDefaultConf.DeferralCheck = DISABLE;
 80028e0:	2300      	movs	r3, #0
 80028e2:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  macDefaultConf.PauseTime = 0x0U;
 80028e6:	2300      	movs	r3, #0
 80028e8:	67fb      	str	r3, [r7, #124]	; 0x7c
  macDefaultConf.ZeroQuantaPause = DISABLE;
 80028ea:	2300      	movs	r3, #0
 80028ec:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 80028f0:	2300      	movs	r3, #0
 80028f2:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macDefaultConf.ReceiveFlowControl = DISABLE;
 80028f6:	2300      	movs	r3, #0
 80028f8:	f887 308a 	strb.w	r3, [r7, #138]	; 0x8a
  macDefaultConf.TransmitFlowControl = DISABLE;
 80028fc:	2300      	movs	r3, #0
 80028fe:	f887 3088 	strb.w	r3, [r7, #136]	; 0x88
  macDefaultConf.Speed = ETH_SPEED_100M;
 8002902:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8002906:	64bb      	str	r3, [r7, #72]	; 0x48
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 8002908:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800290c:	64fb      	str	r3, [r7, #76]	; 0x4c
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 800290e:	2300      	movs	r3, #0
 8002910:	f887 3089 	strb.w	r3, [r7, #137]	; 0x89

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 8002914:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8002918:	4619      	mov	r1, r3
 800291a:	6878      	ldr	r0, [r7, #4]
 800291c:	f7ff fe86 	bl	800262c <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.DropTCPIPChecksumErrorFrame = ENABLE;
 8002920:	2301      	movs	r3, #1
 8002922:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.ReceiveStoreForward = ENABLE;
 8002924:	2301      	movs	r3, #1
 8002926:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.FlushRxPacket = ENABLE;
 8002928:	2301      	movs	r3, #1
 800292a:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  dmaDefaultConf.TransmitStoreForward = ENABLE;
 800292e:	2301      	movs	r3, #1
 8002930:	75bb      	strb	r3, [r7, #22]
  dmaDefaultConf.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 8002932:	2300      	movs	r3, #0
 8002934:	61fb      	str	r3, [r7, #28]
  dmaDefaultConf.ForwardErrorFrames = DISABLE;
 8002936:	2300      	movs	r3, #0
 8002938:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  dmaDefaultConf.ForwardUndersizedGoodFrames = DISABLE;
 800293c:	2300      	movs	r3, #0
 800293e:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  dmaDefaultConf.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 8002942:	2300      	movs	r3, #0
 8002944:	62bb      	str	r3, [r7, #40]	; 0x28
  dmaDefaultConf.SecondFrameOperate = ENABLE;
 8002946:	2301      	movs	r3, #1
 8002948:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 800294c:	2301      	movs	r3, #1
 800294e:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 8002950:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002954:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8002956:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800295a:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 800295c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002960:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.EnhancedDescriptorFormat = ENABLE;
 8002962:	2301      	movs	r3, #1
 8002964:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
  dmaDefaultConf.DescriptorSkipLength = 0x0U;
 8002968:	2300      	movs	r3, #0
 800296a:	633b      	str	r3, [r7, #48]	; 0x30
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 800296c:	2300      	movs	r3, #0
 800296e:	60bb      	str	r3, [r7, #8]

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 8002970:	f107 0308 	add.w	r3, r7, #8
 8002974:	4619      	mov	r1, r3
 8002976:	6878      	ldr	r0, [r7, #4]
 8002978:	f7ff ff08 	bl	800278c <ETH_SetDMAConfig>
}
 800297c:	bf00      	nop
 800297e:	3798      	adds	r7, #152	; 0x98
 8002980:	46bd      	mov	sp, r7
 8002982:	bd80      	pop	{r7, pc}

08002984 <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 8002984:	b480      	push	{r7}
 8002986:	b087      	sub	sp, #28
 8002988:	af00      	add	r7, sp, #0
 800298a:	60f8      	str	r0, [r7, #12]
 800298c:	60b9      	str	r1, [r7, #8]
 800298e:	607a      	str	r2, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);

  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	3305      	adds	r3, #5
 8002994:	781b      	ldrb	r3, [r3, #0]
 8002996:	021b      	lsls	r3, r3, #8
 8002998:	687a      	ldr	r2, [r7, #4]
 800299a:	3204      	adds	r2, #4
 800299c:	7812      	ldrb	r2, [r2, #0]
 800299e:	4313      	orrs	r3, r2
 80029a0:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 80029a2:	68ba      	ldr	r2, [r7, #8]
 80029a4:	4b11      	ldr	r3, [pc, #68]	; (80029ec <ETH_MACAddressConfig+0x68>)
 80029a6:	4413      	add	r3, r2
 80029a8:	461a      	mov	r2, r3
 80029aa:	697b      	ldr	r3, [r7, #20]
 80029ac:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	3303      	adds	r3, #3
 80029b2:	781b      	ldrb	r3, [r3, #0]
 80029b4:	061a      	lsls	r2, r3, #24
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	3302      	adds	r3, #2
 80029ba:	781b      	ldrb	r3, [r3, #0]
 80029bc:	041b      	lsls	r3, r3, #16
 80029be:	431a      	orrs	r2, r3
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	3301      	adds	r3, #1
 80029c4:	781b      	ldrb	r3, [r3, #0]
 80029c6:	021b      	lsls	r3, r3, #8
 80029c8:	4313      	orrs	r3, r2
 80029ca:	687a      	ldr	r2, [r7, #4]
 80029cc:	7812      	ldrb	r2, [r2, #0]
 80029ce:	4313      	orrs	r3, r2
 80029d0:	617b      	str	r3, [r7, #20]

  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 80029d2:	68ba      	ldr	r2, [r7, #8]
 80029d4:	4b06      	ldr	r3, [pc, #24]	; (80029f0 <ETH_MACAddressConfig+0x6c>)
 80029d6:	4413      	add	r3, r2
 80029d8:	461a      	mov	r2, r3
 80029da:	697b      	ldr	r3, [r7, #20]
 80029dc:	6013      	str	r3, [r2, #0]
}
 80029de:	bf00      	nop
 80029e0:	371c      	adds	r7, #28
 80029e2:	46bd      	mov	sp, r7
 80029e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029e8:	4770      	bx	lr
 80029ea:	bf00      	nop
 80029ec:	40028040 	.word	0x40028040
 80029f0:	40028044 	.word	0x40028044

080029f4 <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 80029f4:	b480      	push	{r7}
 80029f6:	b085      	sub	sp, #20
 80029f8:	af00      	add	r7, sp, #0
 80029fa:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 80029fc:	2300      	movs	r3, #0
 80029fe:	60fb      	str	r3, [r7, #12]
 8002a00:	e03e      	b.n	8002a80 <ETH_DMATxDescListInit+0x8c>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	68d9      	ldr	r1, [r3, #12]
 8002a06:	68fa      	ldr	r2, [r7, #12]
 8002a08:	4613      	mov	r3, r2
 8002a0a:	009b      	lsls	r3, r3, #2
 8002a0c:	4413      	add	r3, r2
 8002a0e:	00db      	lsls	r3, r3, #3
 8002a10:	440b      	add	r3, r1
 8002a12:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0);
 8002a14:	68bb      	ldr	r3, [r7, #8]
 8002a16:	2200      	movs	r2, #0
 8002a18:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 8002a1a:	68bb      	ldr	r3, [r7, #8]
 8002a1c:	2200      	movs	r2, #0
 8002a1e:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0);
 8002a20:	68bb      	ldr	r3, [r7, #8]
 8002a22:	2200      	movs	r2, #0
 8002a24:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0);
 8002a26:	68bb      	ldr	r3, [r7, #8]
 8002a28:	2200      	movs	r2, #0
 8002a2a:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 8002a2c:	68b9      	ldr	r1, [r7, #8]
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	68fa      	ldr	r2, [r7, #12]
 8002a32:	3206      	adds	r2, #6
 8002a34:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    /* Set Second Address Chained bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_TCH);
 8002a38:	68bb      	ldr	r3, [r7, #8]
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8002a40:	68bb      	ldr	r3, [r7, #8]
 8002a42:	601a      	str	r2, [r3, #0]

    if (i < ((uint32_t)ETH_TX_DESC_CNT - 1U))
 8002a44:	68fb      	ldr	r3, [r7, #12]
 8002a46:	2b02      	cmp	r3, #2
 8002a48:	d80c      	bhi.n	8002a64 <ETH_DMATxDescListInit+0x70>
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc + i + 1U));
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	68d9      	ldr	r1, [r3, #12]
 8002a4e:	68fb      	ldr	r3, [r7, #12]
 8002a50:	1c5a      	adds	r2, r3, #1
 8002a52:	4613      	mov	r3, r2
 8002a54:	009b      	lsls	r3, r3, #2
 8002a56:	4413      	add	r3, r2
 8002a58:	00db      	lsls	r3, r3, #3
 8002a5a:	440b      	add	r3, r1
 8002a5c:	461a      	mov	r2, r3
 8002a5e:	68bb      	ldr	r3, [r7, #8]
 8002a60:	60da      	str	r2, [r3, #12]
 8002a62:	e004      	b.n	8002a6e <ETH_DMATxDescListInit+0x7a>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc));
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	68db      	ldr	r3, [r3, #12]
 8002a68:	461a      	mov	r2, r3
 8002a6a:	68bb      	ldr	r3, [r7, #8]
 8002a6c:	60da      	str	r2, [r3, #12]
    }

    /* Set the DMA Tx descriptors checksum insertion */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL);
 8002a6e:	68bb      	ldr	r3, [r7, #8]
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	f443 0240 	orr.w	r2, r3, #12582912	; 0xc00000
 8002a76:	68bb      	ldr	r3, [r7, #8]
 8002a78:	601a      	str	r2, [r3, #0]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8002a7a:	68fb      	ldr	r3, [r7, #12]
 8002a7c:	3301      	adds	r3, #1
 8002a7e:	60fb      	str	r3, [r7, #12]
 8002a80:	68fb      	ldr	r3, [r7, #12]
 8002a82:	2b03      	cmp	r3, #3
 8002a84:	d9bd      	bls.n	8002a02 <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	2200      	movs	r2, #0
 8002a8a:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMATDLAR, (uint32_t) heth->Init.TxDesc);
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	68da      	ldr	r2, [r3, #12]
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002a98:	611a      	str	r2, [r3, #16]
}
 8002a9a:	bf00      	nop
 8002a9c:	3714      	adds	r7, #20
 8002a9e:	46bd      	mov	sp, r7
 8002aa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aa4:	4770      	bx	lr

08002aa6 <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 8002aa6:	b480      	push	{r7}
 8002aa8:	b085      	sub	sp, #20
 8002aaa:	af00      	add	r7, sp, #0
 8002aac:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8002aae:	2300      	movs	r3, #0
 8002ab0:	60fb      	str	r3, [r7, #12]
 8002ab2:	e046      	b.n	8002b42 <ETH_DMARxDescListInit+0x9c>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	6919      	ldr	r1, [r3, #16]
 8002ab8:	68fa      	ldr	r2, [r7, #12]
 8002aba:	4613      	mov	r3, r2
 8002abc:	009b      	lsls	r3, r3, #2
 8002abe:	4413      	add	r3, r2
 8002ac0:	00db      	lsls	r3, r3, #3
 8002ac2:	440b      	add	r3, r1
 8002ac4:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0);
 8002ac6:	68bb      	ldr	r3, [r7, #8]
 8002ac8:	2200      	movs	r2, #0
 8002aca:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0);
 8002acc:	68bb      	ldr	r3, [r7, #8]
 8002ace:	2200      	movs	r2, #0
 8002ad0:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0);
 8002ad2:	68bb      	ldr	r3, [r7, #8]
 8002ad4:	2200      	movs	r2, #0
 8002ad6:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0);
 8002ad8:	68bb      	ldr	r3, [r7, #8]
 8002ada:	2200      	movs	r2, #0
 8002adc:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0);
 8002ade:	68bb      	ldr	r3, [r7, #8]
 8002ae0:	2200      	movs	r2, #0
 8002ae2:	621a      	str	r2, [r3, #32]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0);
 8002ae4:	68bb      	ldr	r3, [r7, #8]
 8002ae6:	2200      	movs	r2, #0
 8002ae8:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set Own bit of the Rx descriptor Status */
    dmarxdesc->DESC0 = ETH_DMARXDESC_OWN;
 8002aea:	68bb      	ldr	r3, [r7, #8]
 8002aec:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8002af0:	601a      	str	r2, [r3, #0]

    /* Set Buffer1 size and Second Address Chained bit */
    dmarxdesc->DESC1 = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;
 8002af2:	68bb      	ldr	r3, [r7, #8]
 8002af4:	f44f 428c 	mov.w	r2, #17920	; 0x4600
 8002af8:	605a      	str	r2, [r3, #4]

    /* Enable Ethernet DMA Rx Descriptor interrupt */
    dmarxdesc->DESC1 &= ~ETH_DMARXDESC_DIC;
 8002afa:	68bb      	ldr	r3, [r7, #8]
 8002afc:	685b      	ldr	r3, [r3, #4]
 8002afe:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002b02:	68bb      	ldr	r3, [r7, #8]
 8002b04:	605a      	str	r2, [r3, #4]

    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 8002b06:	68b9      	ldr	r1, [r7, #8]
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	68fa      	ldr	r2, [r7, #12]
 8002b0c:	3212      	adds	r2, #18
 8002b0e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    if (i < ((uint32_t)ETH_RX_DESC_CNT - 1U))
 8002b12:	68fb      	ldr	r3, [r7, #12]
 8002b14:	2b02      	cmp	r3, #2
 8002b16:	d80c      	bhi.n	8002b32 <ETH_DMARxDescListInit+0x8c>
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc + i + 1U));
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	6919      	ldr	r1, [r3, #16]
 8002b1c:	68fb      	ldr	r3, [r7, #12]
 8002b1e:	1c5a      	adds	r2, r3, #1
 8002b20:	4613      	mov	r3, r2
 8002b22:	009b      	lsls	r3, r3, #2
 8002b24:	4413      	add	r3, r2
 8002b26:	00db      	lsls	r3, r3, #3
 8002b28:	440b      	add	r3, r1
 8002b2a:	461a      	mov	r2, r3
 8002b2c:	68bb      	ldr	r3, [r7, #8]
 8002b2e:	60da      	str	r2, [r3, #12]
 8002b30:	e004      	b.n	8002b3c <ETH_DMARxDescListInit+0x96>
    }
    else
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc));
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	691b      	ldr	r3, [r3, #16]
 8002b36:	461a      	mov	r2, r3
 8002b38:	68bb      	ldr	r3, [r7, #8]
 8002b3a:	60da      	str	r2, [r3, #12]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8002b3c:	68fb      	ldr	r3, [r7, #12]
 8002b3e:	3301      	adds	r3, #1
 8002b40:	60fb      	str	r3, [r7, #12]
 8002b42:	68fb      	ldr	r3, [r7, #12]
 8002b44:	2b03      	cmp	r3, #3
 8002b46:	d9b5      	bls.n	8002ab4 <ETH_DMARxDescListInit+0xe>
    }
  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0);
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	2200      	movs	r2, #0
 8002b4c:	65da      	str	r2, [r3, #92]	; 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0);
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	2200      	movs	r2, #0
 8002b52:	661a      	str	r2, [r3, #96]	; 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0);
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	2200      	movs	r2, #0
 8002b58:	669a      	str	r2, [r3, #104]	; 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0);
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	2200      	movs	r2, #0
 8002b5e:	66da      	str	r2, [r3, #108]	; 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0);
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	2200      	movs	r2, #0
 8002b64:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMARDLAR, (uint32_t) heth->Init.RxDesc);
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	691a      	ldr	r2, [r3, #16]
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002b72:	60da      	str	r2, [r3, #12]
}
 8002b74:	bf00      	nop
 8002b76:	3714      	adds	r7, #20
 8002b78:	46bd      	mov	sp, r7
 8002b7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b7e:	4770      	bx	lr

08002b80 <ETH_Prepare_Tx_Descriptors>:
  * @param  pTxConfig: Tx packet configuration
  * @param  ItMode: Enable or disable Tx EOT interrept
  * @retval Status
  */
static uint32_t ETH_Prepare_Tx_Descriptors(ETH_HandleTypeDef *heth, ETH_TxPacketConfig *pTxConfig, uint32_t ItMode)
{
 8002b80:	b480      	push	{r7}
 8002b82:	b08d      	sub	sp, #52	; 0x34
 8002b84:	af00      	add	r7, sp, #0
 8002b86:	60f8      	str	r0, [r7, #12]
 8002b88:	60b9      	str	r1, [r7, #8]
 8002b8a:	607a      	str	r2, [r7, #4]
  ETH_TxDescListTypeDef *dmatxdesclist = &heth->TxDescList;
 8002b8c:	68fb      	ldr	r3, [r7, #12]
 8002b8e:	3318      	adds	r3, #24
 8002b90:	617b      	str	r3, [r7, #20]
  uint32_t descidx = dmatxdesclist->CurTxDesc;
 8002b92:	697b      	ldr	r3, [r7, #20]
 8002b94:	691b      	ldr	r3, [r3, #16]
 8002b96:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t firstdescidx = dmatxdesclist->CurTxDesc;
 8002b98:	697b      	ldr	r3, [r7, #20]
 8002b9a:	691b      	ldr	r3, [r3, #16]
 8002b9c:	613b      	str	r3, [r7, #16]
  uint32_t idx;
  uint32_t descnbr = 0;
 8002b9e:	2300      	movs	r3, #0
 8002ba0:	627b      	str	r3, [r7, #36]	; 0x24
  ETH_DMADescTypeDef *dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8002ba2:	697b      	ldr	r3, [r7, #20]
 8002ba4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002ba6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002baa:	623b      	str	r3, [r7, #32]

  ETH_BufferTypeDef  *txbuffer = pTxConfig->TxBuffer;
 8002bac:	68bb      	ldr	r3, [r7, #8]
 8002bae:	689b      	ldr	r3, [r3, #8]
 8002bb0:	61fb      	str	r3, [r7, #28]
  uint32_t           bd_count = 0;
 8002bb2:	2300      	movs	r3, #0
 8002bb4:	61bb      	str	r3, [r7, #24]

  /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
  if ((READ_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN) == ETH_DMATXDESC_OWN)
 8002bb6:	6a3b      	ldr	r3, [r7, #32]
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8002bbe:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002bc2:	d007      	beq.n	8002bd4 <ETH_Prepare_Tx_Descriptors+0x54>
      || (dmatxdesclist->PacketAddress[descidx] != NULL))
 8002bc4:	697a      	ldr	r2, [r7, #20]
 8002bc6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002bc8:	3304      	adds	r3, #4
 8002bca:	009b      	lsls	r3, r3, #2
 8002bcc:	4413      	add	r3, r2
 8002bce:	685b      	ldr	r3, [r3, #4]
 8002bd0:	2b00      	cmp	r3, #0
 8002bd2:	d001      	beq.n	8002bd8 <ETH_Prepare_Tx_Descriptors+0x58>
  {
    return HAL_ETH_ERROR_BUSY;
 8002bd4:	2302      	movs	r3, #2
 8002bd6:	e103      	b.n	8002de0 <ETH_Prepare_Tx_Descriptors+0x260>
  }


  descnbr += 1U;
 8002bd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bda:	3301      	adds	r3, #1
 8002bdc:	627b      	str	r3, [r7, #36]	; 0x24

  /* Set header or buffer 1 address */
  WRITE_REG(dmatxdesc->DESC2, (uint32_t)txbuffer->buffer);
 8002bde:	69fb      	ldr	r3, [r7, #28]
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	461a      	mov	r2, r3
 8002be4:	6a3b      	ldr	r3, [r7, #32]
 8002be6:	609a      	str	r2, [r3, #8]

  /* Set header or buffer 1 Length */
  MODIFY_REG(dmatxdesc->DESC1, ETH_DMATXDESC_TBS1, txbuffer->len);
 8002be8:	6a3b      	ldr	r3, [r7, #32]
 8002bea:	685b      	ldr	r3, [r3, #4]
 8002bec:	f423 53ff 	bic.w	r3, r3, #8160	; 0x1fe0
 8002bf0:	f023 031f 	bic.w	r3, r3, #31
 8002bf4:	69fa      	ldr	r2, [r7, #28]
 8002bf6:	6852      	ldr	r2, [r2, #4]
 8002bf8:	431a      	orrs	r2, r3
 8002bfa:	6a3b      	ldr	r3, [r7, #32]
 8002bfc:	605a      	str	r2, [r3, #4]

  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CSUM) != 0U)
 8002bfe:	68bb      	ldr	r3, [r7, #8]
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	f003 0301 	and.w	r3, r3, #1
 8002c06:	2b00      	cmp	r3, #0
 8002c08:	d008      	beq.n	8002c1c <ETH_Prepare_Tx_Descriptors+0x9c>
  {
    MODIFY_REG(dmatxdesc->DESC0, ETH_DMATXDESC_CIC, pTxConfig->ChecksumCtrl);
 8002c0a:	6a3b      	ldr	r3, [r7, #32]
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002c12:	68bb      	ldr	r3, [r7, #8]
 8002c14:	695b      	ldr	r3, [r3, #20]
 8002c16:	431a      	orrs	r2, r3
 8002c18:	6a3b      	ldr	r3, [r7, #32]
 8002c1a:	601a      	str	r2, [r3, #0]
  }

  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CRCPAD) != 0U)
 8002c1c:	68bb      	ldr	r3, [r7, #8]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	f003 0320 	and.w	r3, r3, #32
 8002c24:	2b00      	cmp	r3, #0
 8002c26:	d008      	beq.n	8002c3a <ETH_Prepare_Tx_Descriptors+0xba>
  {
    MODIFY_REG(dmatxdesc->DESC0, ETH_CRC_PAD_DISABLE, pTxConfig->CRCPadCtrl);
 8002c28:	6a3b      	ldr	r3, [r7, #32]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002c30:	68bb      	ldr	r3, [r7, #8]
 8002c32:	691b      	ldr	r3, [r3, #16]
 8002c34:	431a      	orrs	r2, r3
 8002c36:	6a3b      	ldr	r3, [r7, #32]
 8002c38:	601a      	str	r2, [r3, #0]
  }


  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_VLANTAG) != 0U)
 8002c3a:	68bb      	ldr	r3, [r7, #8]
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	f003 0304 	and.w	r3, r3, #4
 8002c42:	2b00      	cmp	r3, #0
 8002c44:	d005      	beq.n	8002c52 <ETH_Prepare_Tx_Descriptors+0xd2>
  {
    /* Set Vlan Type */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_VF);
 8002c46:	6a3b      	ldr	r3, [r7, #32]
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8002c4e:	6a3b      	ldr	r3, [r7, #32]
 8002c50:	601a      	str	r2, [r3, #0]
  }

  /* Mark it as First Descriptor */
  SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_FS);
 8002c52:	6a3b      	ldr	r3, [r7, #32]
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8002c5a:	6a3b      	ldr	r3, [r7, #32]
 8002c5c:	601a      	str	r2, [r3, #0]
  __ASM volatile ("dmb 0xF":::"memory");
 8002c5e:	f3bf 8f5f 	dmb	sy
}
 8002c62:	bf00      	nop

  /* Ensure rest of descriptor is written to RAM before the OWN bit */
  __DMB();
  /* set OWN bit of FIRST descriptor */
  SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN);
 8002c64:	6a3b      	ldr	r3, [r7, #32]
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8002c6c:	6a3b      	ldr	r3, [r7, #32]
 8002c6e:	601a      	str	r2, [r3, #0]

  /* only if the packet is split into more than one descriptors > 1 */
  while (txbuffer->next != NULL)
 8002c70:	e084      	b.n	8002d7c <ETH_Prepare_Tx_Descriptors+0x1fc>
  {
    /* Clear the LD bit of previous descriptor */
    CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_LS);
 8002c72:	6a3b      	ldr	r3, [r7, #32]
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8002c7a:	6a3b      	ldr	r3, [r7, #32]
 8002c7c:	601a      	str	r2, [r3, #0]
    if (ItMode != ((uint32_t)RESET))
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	2b00      	cmp	r3, #0
 8002c82:	d006      	beq.n	8002c92 <ETH_Prepare_Tx_Descriptors+0x112>
    {
      /* Set Interrupt on completion bit */
      SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 8002c84:	6a3b      	ldr	r3, [r7, #32]
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8002c8c:	6a3b      	ldr	r3, [r7, #32]
 8002c8e:	601a      	str	r2, [r3, #0]
 8002c90:	e005      	b.n	8002c9e <ETH_Prepare_Tx_Descriptors+0x11e>
    }
    else
    {
      /* Clear Interrupt on completion bit */
      CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 8002c92:	6a3b      	ldr	r3, [r7, #32]
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8002c9a:	6a3b      	ldr	r3, [r7, #32]
 8002c9c:	601a      	str	r2, [r3, #0]
    }
    /* Increment current tx descriptor index */
    INCR_TX_DESC_INDEX(descidx, 1U);
 8002c9e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002ca0:	3301      	adds	r3, #1
 8002ca2:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002ca4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002ca6:	2b03      	cmp	r3, #3
 8002ca8:	d902      	bls.n	8002cb0 <ETH_Prepare_Tx_Descriptors+0x130>
 8002caa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002cac:	3b04      	subs	r3, #4
 8002cae:	62fb      	str	r3, [r7, #44]	; 0x2c
    /* Get current descriptor address */
    dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8002cb0:	697b      	ldr	r3, [r7, #20]
 8002cb2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002cb4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002cb8:	623b      	str	r3, [r7, #32]

    /* Clear the FD bit of new Descriptor */
    CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_FS);
 8002cba:	6a3b      	ldr	r3, [r7, #32]
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8002cc2:	6a3b      	ldr	r3, [r7, #32]
 8002cc4:	601a      	str	r2, [r3, #0]

    /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
    if ((READ_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN) == ETH_DMATXDESC_OWN)
 8002cc6:	6a3b      	ldr	r3, [r7, #32]
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8002cce:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002cd2:	d007      	beq.n	8002ce4 <ETH_Prepare_Tx_Descriptors+0x164>
        || (dmatxdesclist->PacketAddress[descidx] != NULL))
 8002cd4:	697a      	ldr	r2, [r7, #20]
 8002cd6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002cd8:	3304      	adds	r3, #4
 8002cda:	009b      	lsls	r3, r3, #2
 8002cdc:	4413      	add	r3, r2
 8002cde:	685b      	ldr	r3, [r3, #4]
 8002ce0:	2b00      	cmp	r3, #0
 8002ce2:	d029      	beq.n	8002d38 <ETH_Prepare_Tx_Descriptors+0x1b8>
    {
      descidx = firstdescidx;
 8002ce4:	693b      	ldr	r3, [r7, #16]
 8002ce6:	62fb      	str	r3, [r7, #44]	; 0x2c
      dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8002ce8:	697b      	ldr	r3, [r7, #20]
 8002cea:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002cec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002cf0:	623b      	str	r3, [r7, #32]

      /* clear previous desc own bit */
      for (idx = 0; idx < descnbr; idx ++)
 8002cf2:	2300      	movs	r3, #0
 8002cf4:	62bb      	str	r3, [r7, #40]	; 0x28
 8002cf6:	e019      	b.n	8002d2c <ETH_Prepare_Tx_Descriptors+0x1ac>
  __ASM volatile ("dmb 0xF":::"memory");
 8002cf8:	f3bf 8f5f 	dmb	sy
}
 8002cfc:	bf00      	nop
      {
        /* Ensure rest of descriptor is written to RAM before the OWN bit */
        __DMB();

        CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN);
 8002cfe:	6a3b      	ldr	r3, [r7, #32]
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002d06:	6a3b      	ldr	r3, [r7, #32]
 8002d08:	601a      	str	r2, [r3, #0]

        /* Increment current tx descriptor index */
        INCR_TX_DESC_INDEX(descidx, 1U);
 8002d0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002d0c:	3301      	adds	r3, #1
 8002d0e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002d10:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002d12:	2b03      	cmp	r3, #3
 8002d14:	d902      	bls.n	8002d1c <ETH_Prepare_Tx_Descriptors+0x19c>
 8002d16:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002d18:	3b04      	subs	r3, #4
 8002d1a:	62fb      	str	r3, [r7, #44]	; 0x2c
        /* Get current descriptor address */
        dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8002d1c:	697b      	ldr	r3, [r7, #20]
 8002d1e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002d20:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002d24:	623b      	str	r3, [r7, #32]
      for (idx = 0; idx < descnbr; idx ++)
 8002d26:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d28:	3301      	adds	r3, #1
 8002d2a:	62bb      	str	r3, [r7, #40]	; 0x28
 8002d2c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002d2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d30:	429a      	cmp	r2, r3
 8002d32:	d3e1      	bcc.n	8002cf8 <ETH_Prepare_Tx_Descriptors+0x178>
      }

      return HAL_ETH_ERROR_BUSY;
 8002d34:	2302      	movs	r3, #2
 8002d36:	e053      	b.n	8002de0 <ETH_Prepare_Tx_Descriptors+0x260>
    }

    descnbr += 1U;
 8002d38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d3a:	3301      	adds	r3, #1
 8002d3c:	627b      	str	r3, [r7, #36]	; 0x24

    /* Get the next Tx buffer in the list */
    txbuffer = txbuffer->next;
 8002d3e:	69fb      	ldr	r3, [r7, #28]
 8002d40:	689b      	ldr	r3, [r3, #8]
 8002d42:	61fb      	str	r3, [r7, #28]

    /* Set header or buffer 1 address */
    WRITE_REG(dmatxdesc->DESC2, (uint32_t)txbuffer->buffer);
 8002d44:	69fb      	ldr	r3, [r7, #28]
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	461a      	mov	r2, r3
 8002d4a:	6a3b      	ldr	r3, [r7, #32]
 8002d4c:	609a      	str	r2, [r3, #8]

    /* Set header or buffer 1 Length */
    MODIFY_REG(dmatxdesc->DESC1, ETH_DMATXDESC_TBS1, txbuffer->len);
 8002d4e:	6a3b      	ldr	r3, [r7, #32]
 8002d50:	685b      	ldr	r3, [r3, #4]
 8002d52:	f423 53ff 	bic.w	r3, r3, #8160	; 0x1fe0
 8002d56:	f023 031f 	bic.w	r3, r3, #31
 8002d5a:	69fa      	ldr	r2, [r7, #28]
 8002d5c:	6852      	ldr	r2, [r2, #4]
 8002d5e:	431a      	orrs	r2, r3
 8002d60:	6a3b      	ldr	r3, [r7, #32]
 8002d62:	605a      	str	r2, [r3, #4]

    bd_count += 1U;
 8002d64:	69bb      	ldr	r3, [r7, #24]
 8002d66:	3301      	adds	r3, #1
 8002d68:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("dmb 0xF":::"memory");
 8002d6a:	f3bf 8f5f 	dmb	sy
}
 8002d6e:	bf00      	nop

    /* Ensure rest of descriptor is written to RAM before the OWN bit */
    __DMB();
    /* Set Own bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN);
 8002d70:	6a3b      	ldr	r3, [r7, #32]
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8002d78:	6a3b      	ldr	r3, [r7, #32]
 8002d7a:	601a      	str	r2, [r3, #0]
  while (txbuffer->next != NULL)
 8002d7c:	69fb      	ldr	r3, [r7, #28]
 8002d7e:	689b      	ldr	r3, [r3, #8]
 8002d80:	2b00      	cmp	r3, #0
 8002d82:	f47f af76 	bne.w	8002c72 <ETH_Prepare_Tx_Descriptors+0xf2>
  }

  if (ItMode != ((uint32_t)RESET))
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	2b00      	cmp	r3, #0
 8002d8a:	d006      	beq.n	8002d9a <ETH_Prepare_Tx_Descriptors+0x21a>
  {
    /* Set Interrupt on completion bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 8002d8c:	6a3b      	ldr	r3, [r7, #32]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8002d94:	6a3b      	ldr	r3, [r7, #32]
 8002d96:	601a      	str	r2, [r3, #0]
 8002d98:	e005      	b.n	8002da6 <ETH_Prepare_Tx_Descriptors+0x226>
  }
  else
  {
    /* Clear Interrupt on completion bit */
    CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 8002d9a:	6a3b      	ldr	r3, [r7, #32]
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8002da2:	6a3b      	ldr	r3, [r7, #32]
 8002da4:	601a      	str	r2, [r3, #0]
  }

  /* Mark it as LAST descriptor */
  SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_LS);
 8002da6:	6a3b      	ldr	r3, [r7, #32]
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8002dae:	6a3b      	ldr	r3, [r7, #32]
 8002db0:	601a      	str	r2, [r3, #0]
  /* Save the current packet address to expose it to the application */
  dmatxdesclist->PacketAddress[descidx] = dmatxdesclist->CurrentPacketAddress;
 8002db2:	697b      	ldr	r3, [r7, #20]
 8002db4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002db6:	6979      	ldr	r1, [r7, #20]
 8002db8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002dba:	3304      	adds	r3, #4
 8002dbc:	009b      	lsls	r3, r3, #2
 8002dbe:	440b      	add	r3, r1
 8002dc0:	605a      	str	r2, [r3, #4]

  dmatxdesclist->CurTxDesc = descidx;
 8002dc2:	697b      	ldr	r3, [r7, #20]
 8002dc4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002dc6:	611a      	str	r2, [r3, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 8002dc8:	b672      	cpsid	i
}
 8002dca:	bf00      	nop

  /* disable the interrupt */
  __disable_irq();

  dmatxdesclist->BuffersInUse += bd_count + 1U;
 8002dcc:	697b      	ldr	r3, [r7, #20]
 8002dce:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002dd0:	69bb      	ldr	r3, [r7, #24]
 8002dd2:	4413      	add	r3, r2
 8002dd4:	1c5a      	adds	r2, r3, #1
 8002dd6:	697b      	ldr	r3, [r7, #20]
 8002dd8:	629a      	str	r2, [r3, #40]	; 0x28
  __ASM volatile ("cpsie i" : : : "memory");
 8002dda:	b662      	cpsie	i
}
 8002ddc:	bf00      	nop
  /* Enable interrupts back */
  __enable_irq();


  /* Return function status */
  return HAL_ETH_ERROR_NONE;
 8002dde:	2300      	movs	r3, #0
}
 8002de0:	4618      	mov	r0, r3
 8002de2:	3734      	adds	r7, #52	; 0x34
 8002de4:	46bd      	mov	sp, r7
 8002de6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dea:	4770      	bx	lr

08002dec <HAL_FLASH_Program>:
  * @param  Data specifies the data to be programmed
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 8002dec:	b580      	push	{r7, lr}
 8002dee:	b086      	sub	sp, #24
 8002df0:	af00      	add	r7, sp, #0
 8002df2:	60f8      	str	r0, [r7, #12]
 8002df4:	60b9      	str	r1, [r7, #8]
 8002df6:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status = HAL_ERROR;
 8002dfa:	2301      	movs	r3, #1
 8002dfc:	75fb      	strb	r3, [r7, #23]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8002dfe:	4b23      	ldr	r3, [pc, #140]	; (8002e8c <HAL_FLASH_Program+0xa0>)
 8002e00:	7e1b      	ldrb	r3, [r3, #24]
 8002e02:	2b01      	cmp	r3, #1
 8002e04:	d101      	bne.n	8002e0a <HAL_FLASH_Program+0x1e>
 8002e06:	2302      	movs	r3, #2
 8002e08:	e03b      	b.n	8002e82 <HAL_FLASH_Program+0x96>
 8002e0a:	4b20      	ldr	r3, [pc, #128]	; (8002e8c <HAL_FLASH_Program+0xa0>)
 8002e0c:	2201      	movs	r2, #1
 8002e0e:	761a      	strb	r2, [r3, #24]
  
  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));
  
  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8002e10:	f24c 3050 	movw	r0, #50000	; 0xc350
 8002e14:	f000 f860 	bl	8002ed8 <FLASH_WaitForLastOperation>
 8002e18:	4603      	mov	r3, r0
 8002e1a:	75fb      	strb	r3, [r7, #23]
  
  if(status == HAL_OK)
 8002e1c:	7dfb      	ldrb	r3, [r7, #23]
 8002e1e:	2b00      	cmp	r3, #0
 8002e20:	d12b      	bne.n	8002e7a <HAL_FLASH_Program+0x8e>
  {
    if(TypeProgram == FLASH_TYPEPROGRAM_BYTE)
 8002e22:	68fb      	ldr	r3, [r7, #12]
 8002e24:	2b00      	cmp	r3, #0
 8002e26:	d105      	bne.n	8002e34 <HAL_FLASH_Program+0x48>
    {
      /*Program byte (8-bit) at a specified address.*/
      FLASH_Program_Byte(Address, (uint8_t) Data);
 8002e28:	783b      	ldrb	r3, [r7, #0]
 8002e2a:	4619      	mov	r1, r3
 8002e2c:	68b8      	ldr	r0, [r7, #8]
 8002e2e:	f000 f90b 	bl	8003048 <FLASH_Program_Byte>
 8002e32:	e016      	b.n	8002e62 <HAL_FLASH_Program+0x76>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 8002e34:	68fb      	ldr	r3, [r7, #12]
 8002e36:	2b01      	cmp	r3, #1
 8002e38:	d105      	bne.n	8002e46 <HAL_FLASH_Program+0x5a>
    {
      /*Program halfword (16-bit) at a specified address.*/
      FLASH_Program_HalfWord(Address, (uint16_t) Data);
 8002e3a:	883b      	ldrh	r3, [r7, #0]
 8002e3c:	4619      	mov	r1, r3
 8002e3e:	68b8      	ldr	r0, [r7, #8]
 8002e40:	f000 f8de 	bl	8003000 <FLASH_Program_HalfWord>
 8002e44:	e00d      	b.n	8002e62 <HAL_FLASH_Program+0x76>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
 8002e46:	68fb      	ldr	r3, [r7, #12]
 8002e48:	2b02      	cmp	r3, #2
 8002e4a:	d105      	bne.n	8002e58 <HAL_FLASH_Program+0x6c>
    {
      /*Program word (32-bit) at a specified address.*/
      FLASH_Program_Word(Address, (uint32_t) Data);
 8002e4c:	683b      	ldr	r3, [r7, #0]
 8002e4e:	4619      	mov	r1, r3
 8002e50:	68b8      	ldr	r0, [r7, #8]
 8002e52:	f000 f8b3 	bl	8002fbc <FLASH_Program_Word>
 8002e56:	e004      	b.n	8002e62 <HAL_FLASH_Program+0x76>
    }
    else
    {
      /*Program double word (64-bit) at a specified address.*/
      FLASH_Program_DoubleWord(Address, Data);
 8002e58:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002e5c:	68b8      	ldr	r0, [r7, #8]
 8002e5e:	f000 f87b 	bl	8002f58 <FLASH_Program_DoubleWord>
    }
    
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8002e62:	f24c 3050 	movw	r0, #50000	; 0xc350
 8002e66:	f000 f837 	bl	8002ed8 <FLASH_WaitForLastOperation>
 8002e6a:	4603      	mov	r3, r0
 8002e6c:	75fb      	strb	r3, [r7, #23]
    
    /* If the program operation is completed, disable the PG Bit */
    FLASH->CR &= (~FLASH_CR_PG);  
 8002e6e:	4b08      	ldr	r3, [pc, #32]	; (8002e90 <HAL_FLASH_Program+0xa4>)
 8002e70:	691b      	ldr	r3, [r3, #16]
 8002e72:	4a07      	ldr	r2, [pc, #28]	; (8002e90 <HAL_FLASH_Program+0xa4>)
 8002e74:	f023 0301 	bic.w	r3, r3, #1
 8002e78:	6113      	str	r3, [r2, #16]
  }
  
  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8002e7a:	4b04      	ldr	r3, [pc, #16]	; (8002e8c <HAL_FLASH_Program+0xa0>)
 8002e7c:	2200      	movs	r2, #0
 8002e7e:	761a      	strb	r2, [r3, #24]
  
  return status;
 8002e80:	7dfb      	ldrb	r3, [r7, #23]
}
 8002e82:	4618      	mov	r0, r3
 8002e84:	3718      	adds	r7, #24
 8002e86:	46bd      	mov	sp, r7
 8002e88:	bd80      	pop	{r7, pc}
 8002e8a:	bf00      	nop
 8002e8c:	200003f0 	.word	0x200003f0
 8002e90:	40023c00 	.word	0x40023c00

08002e94 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 8002e94:	b480      	push	{r7}
 8002e96:	b083      	sub	sp, #12
 8002e98:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 8002e9a:	2300      	movs	r3, #0
 8002e9c:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8002e9e:	4b0b      	ldr	r3, [pc, #44]	; (8002ecc <HAL_FLASH_Unlock+0x38>)
 8002ea0:	691b      	ldr	r3, [r3, #16]
 8002ea2:	2b00      	cmp	r3, #0
 8002ea4:	da0b      	bge.n	8002ebe <HAL_FLASH_Unlock+0x2a>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 8002ea6:	4b09      	ldr	r3, [pc, #36]	; (8002ecc <HAL_FLASH_Unlock+0x38>)
 8002ea8:	4a09      	ldr	r2, [pc, #36]	; (8002ed0 <HAL_FLASH_Unlock+0x3c>)
 8002eaa:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8002eac:	4b07      	ldr	r3, [pc, #28]	; (8002ecc <HAL_FLASH_Unlock+0x38>)
 8002eae:	4a09      	ldr	r2, [pc, #36]	; (8002ed4 <HAL_FLASH_Unlock+0x40>)
 8002eb0:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8002eb2:	4b06      	ldr	r3, [pc, #24]	; (8002ecc <HAL_FLASH_Unlock+0x38>)
 8002eb4:	691b      	ldr	r3, [r3, #16]
 8002eb6:	2b00      	cmp	r3, #0
 8002eb8:	da01      	bge.n	8002ebe <HAL_FLASH_Unlock+0x2a>
    {
      status = HAL_ERROR;
 8002eba:	2301      	movs	r3, #1
 8002ebc:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
 8002ebe:	79fb      	ldrb	r3, [r7, #7]
}
 8002ec0:	4618      	mov	r0, r3
 8002ec2:	370c      	adds	r7, #12
 8002ec4:	46bd      	mov	sp, r7
 8002ec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eca:	4770      	bx	lr
 8002ecc:	40023c00 	.word	0x40023c00
 8002ed0:	45670123 	.word	0x45670123
 8002ed4:	cdef89ab 	.word	0xcdef89ab

08002ed8 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout maximum flash operationtimeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{ 
 8002ed8:	b580      	push	{r7, lr}
 8002eda:	b084      	sub	sp, #16
 8002edc:	af00      	add	r7, sp, #0
 8002ede:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002ee0:	2300      	movs	r3, #0
 8002ee2:	60fb      	str	r3, [r7, #12]
  
  /* Clear Error Code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8002ee4:	4b1a      	ldr	r3, [pc, #104]	; (8002f50 <FLASH_WaitForLastOperation+0x78>)
 8002ee6:	2200      	movs	r2, #0
 8002ee8:	61da      	str	r2, [r3, #28]
  
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
  /* Get tick */
  tickstart = HAL_GetTick();
 8002eea:	f7fe fc1d 	bl	8001728 <HAL_GetTick>
 8002eee:	60f8      	str	r0, [r7, #12]

  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 8002ef0:	e010      	b.n	8002f14 <FLASH_WaitForLastOperation+0x3c>
  { 
    if(Timeout != HAL_MAX_DELAY)
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002ef8:	d00c      	beq.n	8002f14 <FLASH_WaitForLastOperation+0x3c>
    {
      if((Timeout == 0U)||((HAL_GetTick() - tickstart ) > Timeout))
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	2b00      	cmp	r3, #0
 8002efe:	d007      	beq.n	8002f10 <FLASH_WaitForLastOperation+0x38>
 8002f00:	f7fe fc12 	bl	8001728 <HAL_GetTick>
 8002f04:	4602      	mov	r2, r0
 8002f06:	68fb      	ldr	r3, [r7, #12]
 8002f08:	1ad3      	subs	r3, r2, r3
 8002f0a:	687a      	ldr	r2, [r7, #4]
 8002f0c:	429a      	cmp	r2, r3
 8002f0e:	d201      	bcs.n	8002f14 <FLASH_WaitForLastOperation+0x3c>
      {
        return HAL_TIMEOUT;
 8002f10:	2303      	movs	r3, #3
 8002f12:	e019      	b.n	8002f48 <FLASH_WaitForLastOperation+0x70>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 8002f14:	4b0f      	ldr	r3, [pc, #60]	; (8002f54 <FLASH_WaitForLastOperation+0x7c>)
 8002f16:	68db      	ldr	r3, [r3, #12]
 8002f18:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002f1c:	2b00      	cmp	r3, #0
 8002f1e:	d1e8      	bne.n	8002ef2 <FLASH_WaitForLastOperation+0x1a>
      }
    } 
  }

  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP) != RESET)
 8002f20:	4b0c      	ldr	r3, [pc, #48]	; (8002f54 <FLASH_WaitForLastOperation+0x7c>)
 8002f22:	68db      	ldr	r3, [r3, #12]
 8002f24:	f003 0301 	and.w	r3, r3, #1
 8002f28:	2b00      	cmp	r3, #0
 8002f2a:	d002      	beq.n	8002f32 <FLASH_WaitForLastOperation+0x5a>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8002f2c:	4b09      	ldr	r3, [pc, #36]	; (8002f54 <FLASH_WaitForLastOperation+0x7c>)
 8002f2e:	2201      	movs	r2, #1
 8002f30:	60da      	str	r2, [r3, #12]
  }
#if defined(FLASH_SR_RDERR)  
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
                           FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR | FLASH_FLAG_RDERR)) != RESET)
#else
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
 8002f32:	4b08      	ldr	r3, [pc, #32]	; (8002f54 <FLASH_WaitForLastOperation+0x7c>)
 8002f34:	68db      	ldr	r3, [r3, #12]
 8002f36:	f003 03f2 	and.w	r3, r3, #242	; 0xf2
 8002f3a:	2b00      	cmp	r3, #0
 8002f3c:	d003      	beq.n	8002f46 <FLASH_WaitForLastOperation+0x6e>
                           FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR)) != RESET)
#endif /* FLASH_SR_RDERR */
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 8002f3e:	f000 f8a5 	bl	800308c <FLASH_SetErrorCode>
    return HAL_ERROR;
 8002f42:	2301      	movs	r3, #1
 8002f44:	e000      	b.n	8002f48 <FLASH_WaitForLastOperation+0x70>
  }

  /* If there is no error flag set */
  return HAL_OK;
 8002f46:	2300      	movs	r3, #0
  
}  
 8002f48:	4618      	mov	r0, r3
 8002f4a:	3710      	adds	r7, #16
 8002f4c:	46bd      	mov	sp, r7
 8002f4e:	bd80      	pop	{r7, pc}
 8002f50:	200003f0 	.word	0x200003f0
 8002f54:	40023c00 	.word	0x40023c00

08002f58 <FLASH_Program_DoubleWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 8002f58:	b480      	push	{r7}
 8002f5a:	b085      	sub	sp, #20
 8002f5c:	af00      	add	r7, sp, #0
 8002f5e:	60f8      	str	r0, [r7, #12]
 8002f60:	e9c7 2300 	strd	r2, r3, [r7]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8002f64:	4b14      	ldr	r3, [pc, #80]	; (8002fb8 <FLASH_Program_DoubleWord+0x60>)
 8002f66:	691b      	ldr	r3, [r3, #16]
 8002f68:	4a13      	ldr	r2, [pc, #76]	; (8002fb8 <FLASH_Program_DoubleWord+0x60>)
 8002f6a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002f6e:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_DOUBLE_WORD;
 8002f70:	4b11      	ldr	r3, [pc, #68]	; (8002fb8 <FLASH_Program_DoubleWord+0x60>)
 8002f72:	691b      	ldr	r3, [r3, #16]
 8002f74:	4a10      	ldr	r2, [pc, #64]	; (8002fb8 <FLASH_Program_DoubleWord+0x60>)
 8002f76:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8002f7a:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8002f7c:	4b0e      	ldr	r3, [pc, #56]	; (8002fb8 <FLASH_Program_DoubleWord+0x60>)
 8002f7e:	691b      	ldr	r3, [r3, #16]
 8002f80:	4a0d      	ldr	r2, [pc, #52]	; (8002fb8 <FLASH_Program_DoubleWord+0x60>)
 8002f82:	f043 0301 	orr.w	r3, r3, #1
 8002f86:	6113      	str	r3, [r2, #16]

  /* Program first word */
  *(__IO uint32_t*)Address = (uint32_t)Data;
 8002f88:	68fb      	ldr	r3, [r7, #12]
 8002f8a:	683a      	ldr	r2, [r7, #0]
 8002f8c:	601a      	str	r2, [r3, #0]
  __ASM volatile ("isb 0xF":::"memory");
 8002f8e:	f3bf 8f6f 	isb	sy
}
 8002f92:	bf00      	nop
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(__IO uint32_t*)(Address+4) = (uint32_t)(Data >> 32);
 8002f94:	e9d7 0100 	ldrd	r0, r1, [r7]
 8002f98:	f04f 0200 	mov.w	r2, #0
 8002f9c:	f04f 0300 	mov.w	r3, #0
 8002fa0:	000a      	movs	r2, r1
 8002fa2:	2300      	movs	r3, #0
 8002fa4:	68f9      	ldr	r1, [r7, #12]
 8002fa6:	3104      	adds	r1, #4
 8002fa8:	4613      	mov	r3, r2
 8002faa:	600b      	str	r3, [r1, #0]
}
 8002fac:	bf00      	nop
 8002fae:	3714      	adds	r7, #20
 8002fb0:	46bd      	mov	sp, r7
 8002fb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fb6:	4770      	bx	lr
 8002fb8:	40023c00 	.word	0x40023c00

08002fbc <FLASH_Program_Word>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Word(uint32_t Address, uint32_t Data)
{
 8002fbc:	b480      	push	{r7}
 8002fbe:	b083      	sub	sp, #12
 8002fc0:	af00      	add	r7, sp, #0
 8002fc2:	6078      	str	r0, [r7, #4]
 8002fc4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8002fc6:	4b0d      	ldr	r3, [pc, #52]	; (8002ffc <FLASH_Program_Word+0x40>)
 8002fc8:	691b      	ldr	r3, [r3, #16]
 8002fca:	4a0c      	ldr	r2, [pc, #48]	; (8002ffc <FLASH_Program_Word+0x40>)
 8002fcc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002fd0:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_WORD;
 8002fd2:	4b0a      	ldr	r3, [pc, #40]	; (8002ffc <FLASH_Program_Word+0x40>)
 8002fd4:	691b      	ldr	r3, [r3, #16]
 8002fd6:	4a09      	ldr	r2, [pc, #36]	; (8002ffc <FLASH_Program_Word+0x40>)
 8002fd8:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002fdc:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8002fde:	4b07      	ldr	r3, [pc, #28]	; (8002ffc <FLASH_Program_Word+0x40>)
 8002fe0:	691b      	ldr	r3, [r3, #16]
 8002fe2:	4a06      	ldr	r2, [pc, #24]	; (8002ffc <FLASH_Program_Word+0x40>)
 8002fe4:	f043 0301 	orr.w	r3, r3, #1
 8002fe8:	6113      	str	r3, [r2, #16]

  *(__IO uint32_t*)Address = Data;
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	683a      	ldr	r2, [r7, #0]
 8002fee:	601a      	str	r2, [r3, #0]
}
 8002ff0:	bf00      	nop
 8002ff2:	370c      	adds	r7, #12
 8002ff4:	46bd      	mov	sp, r7
 8002ff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ffa:	4770      	bx	lr
 8002ffc:	40023c00 	.word	0x40023c00

08003000 <FLASH_Program_HalfWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 8003000:	b480      	push	{r7}
 8003002:	b083      	sub	sp, #12
 8003004:	af00      	add	r7, sp, #0
 8003006:	6078      	str	r0, [r7, #4]
 8003008:	460b      	mov	r3, r1
 800300a:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 800300c:	4b0d      	ldr	r3, [pc, #52]	; (8003044 <FLASH_Program_HalfWord+0x44>)
 800300e:	691b      	ldr	r3, [r3, #16]
 8003010:	4a0c      	ldr	r2, [pc, #48]	; (8003044 <FLASH_Program_HalfWord+0x44>)
 8003012:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003016:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_HALF_WORD;
 8003018:	4b0a      	ldr	r3, [pc, #40]	; (8003044 <FLASH_Program_HalfWord+0x44>)
 800301a:	691b      	ldr	r3, [r3, #16]
 800301c:	4a09      	ldr	r2, [pc, #36]	; (8003044 <FLASH_Program_HalfWord+0x44>)
 800301e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003022:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8003024:	4b07      	ldr	r3, [pc, #28]	; (8003044 <FLASH_Program_HalfWord+0x44>)
 8003026:	691b      	ldr	r3, [r3, #16]
 8003028:	4a06      	ldr	r2, [pc, #24]	; (8003044 <FLASH_Program_HalfWord+0x44>)
 800302a:	f043 0301 	orr.w	r3, r3, #1
 800302e:	6113      	str	r3, [r2, #16]

  *(__IO uint16_t*)Address = Data;
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	887a      	ldrh	r2, [r7, #2]
 8003034:	801a      	strh	r2, [r3, #0]
}
 8003036:	bf00      	nop
 8003038:	370c      	adds	r7, #12
 800303a:	46bd      	mov	sp, r7
 800303c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003040:	4770      	bx	lr
 8003042:	bf00      	nop
 8003044:	40023c00 	.word	0x40023c00

08003048 <FLASH_Program_Byte>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Byte(uint32_t Address, uint8_t Data)
{
 8003048:	b480      	push	{r7}
 800304a:	b083      	sub	sp, #12
 800304c:	af00      	add	r7, sp, #0
 800304e:	6078      	str	r0, [r7, #4]
 8003050:	460b      	mov	r3, r1
 8003052:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8003054:	4b0c      	ldr	r3, [pc, #48]	; (8003088 <FLASH_Program_Byte+0x40>)
 8003056:	691b      	ldr	r3, [r3, #16]
 8003058:	4a0b      	ldr	r2, [pc, #44]	; (8003088 <FLASH_Program_Byte+0x40>)
 800305a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800305e:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_BYTE;
 8003060:	4b09      	ldr	r3, [pc, #36]	; (8003088 <FLASH_Program_Byte+0x40>)
 8003062:	4a09      	ldr	r2, [pc, #36]	; (8003088 <FLASH_Program_Byte+0x40>)
 8003064:	691b      	ldr	r3, [r3, #16]
 8003066:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8003068:	4b07      	ldr	r3, [pc, #28]	; (8003088 <FLASH_Program_Byte+0x40>)
 800306a:	691b      	ldr	r3, [r3, #16]
 800306c:	4a06      	ldr	r2, [pc, #24]	; (8003088 <FLASH_Program_Byte+0x40>)
 800306e:	f043 0301 	orr.w	r3, r3, #1
 8003072:	6113      	str	r3, [r2, #16]

  *(__IO uint8_t*)Address = Data;
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	78fa      	ldrb	r2, [r7, #3]
 8003078:	701a      	strb	r2, [r3, #0]
}
 800307a:	bf00      	nop
 800307c:	370c      	adds	r7, #12
 800307e:	46bd      	mov	sp, r7
 8003080:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003084:	4770      	bx	lr
 8003086:	bf00      	nop
 8003088:	40023c00 	.word	0x40023c00

0800308c <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{ 
 800308c:	b480      	push	{r7}
 800308e:	af00      	add	r7, sp, #0
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) != RESET)
 8003090:	4b27      	ldr	r3, [pc, #156]	; (8003130 <FLASH_SetErrorCode+0xa4>)
 8003092:	68db      	ldr	r3, [r3, #12]
 8003094:	f003 0310 	and.w	r3, r3, #16
 8003098:	2b00      	cmp	r3, #0
 800309a:	d008      	beq.n	80030ae <FLASH_SetErrorCode+0x22>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 800309c:	4b25      	ldr	r3, [pc, #148]	; (8003134 <FLASH_SetErrorCode+0xa8>)
 800309e:	69db      	ldr	r3, [r3, #28]
 80030a0:	f043 0310 	orr.w	r3, r3, #16
 80030a4:	4a23      	ldr	r2, [pc, #140]	; (8003134 <FLASH_SetErrorCode+0xa8>)
 80030a6:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH write protection error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_WRPERR);
 80030a8:	4b21      	ldr	r3, [pc, #132]	; (8003130 <FLASH_SetErrorCode+0xa4>)
 80030aa:	2210      	movs	r2, #16
 80030ac:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR) != RESET)
 80030ae:	4b20      	ldr	r3, [pc, #128]	; (8003130 <FLASH_SetErrorCode+0xa4>)
 80030b0:	68db      	ldr	r3, [r3, #12]
 80030b2:	f003 0320 	and.w	r3, r3, #32
 80030b6:	2b00      	cmp	r3, #0
 80030b8:	d008      	beq.n	80030cc <FLASH_SetErrorCode+0x40>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_PGA;
 80030ba:	4b1e      	ldr	r3, [pc, #120]	; (8003134 <FLASH_SetErrorCode+0xa8>)
 80030bc:	69db      	ldr	r3, [r3, #28]
 80030be:	f043 0308 	orr.w	r3, r3, #8
 80030c2:	4a1c      	ldr	r2, [pc, #112]	; (8003134 <FLASH_SetErrorCode+0xa8>)
 80030c4:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH Programming alignment error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGAERR);
 80030c6:	4b1a      	ldr	r3, [pc, #104]	; (8003130 <FLASH_SetErrorCode+0xa4>)
 80030c8:	2220      	movs	r2, #32
 80030ca:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGPERR) != RESET)
 80030cc:	4b18      	ldr	r3, [pc, #96]	; (8003130 <FLASH_SetErrorCode+0xa4>)
 80030ce:	68db      	ldr	r3, [r3, #12]
 80030d0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80030d4:	2b00      	cmp	r3, #0
 80030d6:	d008      	beq.n	80030ea <FLASH_SetErrorCode+0x5e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGP;
 80030d8:	4b16      	ldr	r3, [pc, #88]	; (8003134 <FLASH_SetErrorCode+0xa8>)
 80030da:	69db      	ldr	r3, [r3, #28]
 80030dc:	f043 0304 	orr.w	r3, r3, #4
 80030e0:	4a14      	ldr	r2, [pc, #80]	; (8003134 <FLASH_SetErrorCode+0xa8>)
 80030e2:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming parallelism error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGPERR);
 80030e4:	4b12      	ldr	r3, [pc, #72]	; (8003130 <FLASH_SetErrorCode+0xa4>)
 80030e6:	2240      	movs	r2, #64	; 0x40
 80030e8:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGSERR) != RESET)
 80030ea:	4b11      	ldr	r3, [pc, #68]	; (8003130 <FLASH_SetErrorCode+0xa4>)
 80030ec:	68db      	ldr	r3, [r3, #12]
 80030ee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80030f2:	2b00      	cmp	r3, #0
 80030f4:	d008      	beq.n	8003108 <FLASH_SetErrorCode+0x7c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGS;
 80030f6:	4b0f      	ldr	r3, [pc, #60]	; (8003134 <FLASH_SetErrorCode+0xa8>)
 80030f8:	69db      	ldr	r3, [r3, #28]
 80030fa:	f043 0302 	orr.w	r3, r3, #2
 80030fe:	4a0d      	ldr	r2, [pc, #52]	; (8003134 <FLASH_SetErrorCode+0xa8>)
 8003100:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming sequence error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGSERR);
 8003102:	4b0b      	ldr	r3, [pc, #44]	; (8003130 <FLASH_SetErrorCode+0xa4>)
 8003104:	2280      	movs	r2, #128	; 0x80
 8003106:	60da      	str	r2, [r3, #12]
    
    /* Clear FLASH Proprietary readout protection error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_RDERR);
  }
#endif /* FLASH_SR_RDERR */  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPERR) != RESET)
 8003108:	4b09      	ldr	r3, [pc, #36]	; (8003130 <FLASH_SetErrorCode+0xa4>)
 800310a:	68db      	ldr	r3, [r3, #12]
 800310c:	f003 0302 	and.w	r3, r3, #2
 8003110:	2b00      	cmp	r3, #0
 8003112:	d008      	beq.n	8003126 <FLASH_SetErrorCode+0x9a>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPERATION;
 8003114:	4b07      	ldr	r3, [pc, #28]	; (8003134 <FLASH_SetErrorCode+0xa8>)
 8003116:	69db      	ldr	r3, [r3, #28]
 8003118:	f043 0320 	orr.w	r3, r3, #32
 800311c:	4a05      	ldr	r2, [pc, #20]	; (8003134 <FLASH_SetErrorCode+0xa8>)
 800311e:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Operation error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPERR);
 8003120:	4b03      	ldr	r3, [pc, #12]	; (8003130 <FLASH_SetErrorCode+0xa4>)
 8003122:	2202      	movs	r2, #2
 8003124:	60da      	str	r2, [r3, #12]
  }
}
 8003126:	bf00      	nop
 8003128:	46bd      	mov	sp, r7
 800312a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800312e:	4770      	bx	lr
 8003130:	40023c00 	.word	0x40023c00
 8003134:	200003f0 	.word	0x200003f0

08003138 <HAL_FLASHEx_Erase>:
  *         (0xFFFFFFFFU means that all the sectors have been correctly erased)
  *
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *SectorError)
{
 8003138:	b580      	push	{r7, lr}
 800313a:	b084      	sub	sp, #16
 800313c:	af00      	add	r7, sp, #0
 800313e:	6078      	str	r0, [r7, #4]
 8003140:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_ERROR;
 8003142:	2301      	movs	r3, #1
 8003144:	73fb      	strb	r3, [r7, #15]
  uint32_t index = 0U;
 8003146:	2300      	movs	r3, #0
 8003148:	60bb      	str	r3, [r7, #8]

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 800314a:	4b31      	ldr	r3, [pc, #196]	; (8003210 <HAL_FLASHEx_Erase+0xd8>)
 800314c:	7e1b      	ldrb	r3, [r3, #24]
 800314e:	2b01      	cmp	r3, #1
 8003150:	d101      	bne.n	8003156 <HAL_FLASHEx_Erase+0x1e>
 8003152:	2302      	movs	r3, #2
 8003154:	e058      	b.n	8003208 <HAL_FLASHEx_Erase+0xd0>
 8003156:	4b2e      	ldr	r3, [pc, #184]	; (8003210 <HAL_FLASHEx_Erase+0xd8>)
 8003158:	2201      	movs	r2, #1
 800315a:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800315c:	f24c 3050 	movw	r0, #50000	; 0xc350
 8003160:	f7ff feba 	bl	8002ed8 <FLASH_WaitForLastOperation>
 8003164:	4603      	mov	r3, r0
 8003166:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 8003168:	7bfb      	ldrb	r3, [r7, #15]
 800316a:	2b00      	cmp	r3, #0
 800316c:	d148      	bne.n	8003200 <HAL_FLASHEx_Erase+0xc8>
  {
    /*Initialization of SectorError variable*/
    *SectorError = 0xFFFFFFFFU;
 800316e:	683b      	ldr	r3, [r7, #0]
 8003170:	f04f 32ff 	mov.w	r2, #4294967295
 8003174:	601a      	str	r2, [r3, #0]

    if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	2b01      	cmp	r3, #1
 800317c:	d115      	bne.n	80031aa <HAL_FLASHEx_Erase+0x72>
    {
      /*Mass erase to be done*/
      FLASH_MassErase((uint8_t) pEraseInit->VoltageRange, pEraseInit->Banks);
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	691b      	ldr	r3, [r3, #16]
 8003182:	b2da      	uxtb	r2, r3
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	685b      	ldr	r3, [r3, #4]
 8003188:	4619      	mov	r1, r3
 800318a:	4610      	mov	r0, r2
 800318c:	f000 f844 	bl	8003218 <FLASH_MassErase>

      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8003190:	f24c 3050 	movw	r0, #50000	; 0xc350
 8003194:	f7ff fea0 	bl	8002ed8 <FLASH_WaitForLastOperation>
 8003198:	4603      	mov	r3, r0
 800319a:	73fb      	strb	r3, [r7, #15]

      /* if the erase operation is completed, disable the MER Bit */
      FLASH->CR &= (~FLASH_MER_BIT);
 800319c:	4b1d      	ldr	r3, [pc, #116]	; (8003214 <HAL_FLASHEx_Erase+0xdc>)
 800319e:	691b      	ldr	r3, [r3, #16]
 80031a0:	4a1c      	ldr	r2, [pc, #112]	; (8003214 <HAL_FLASHEx_Erase+0xdc>)
 80031a2:	f023 0304 	bic.w	r3, r3, #4
 80031a6:	6113      	str	r3, [r2, #16]
 80031a8:	e028      	b.n	80031fc <HAL_FLASHEx_Erase+0xc4>
    {
      /* Check the parameters */
      assert_param(IS_FLASH_NBSECTORS(pEraseInit->NbSectors + pEraseInit->Sector));

      /* Erase by sector by sector to be done*/
      for (index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	689b      	ldr	r3, [r3, #8]
 80031ae:	60bb      	str	r3, [r7, #8]
 80031b0:	e01c      	b.n	80031ec <HAL_FLASHEx_Erase+0xb4>
      {
        FLASH_Erase_Sector(index, (uint8_t) pEraseInit->VoltageRange);
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	691b      	ldr	r3, [r3, #16]
 80031b6:	b2db      	uxtb	r3, r3
 80031b8:	4619      	mov	r1, r3
 80031ba:	68b8      	ldr	r0, [r7, #8]
 80031bc:	f000 f850 	bl	8003260 <FLASH_Erase_Sector>

        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80031c0:	f24c 3050 	movw	r0, #50000	; 0xc350
 80031c4:	f7ff fe88 	bl	8002ed8 <FLASH_WaitForLastOperation>
 80031c8:	4603      	mov	r3, r0
 80031ca:	73fb      	strb	r3, [r7, #15]

        /* If the erase operation is completed, disable the SER and SNB Bits */
        CLEAR_BIT(FLASH->CR, (FLASH_CR_SER | FLASH_CR_SNB));
 80031cc:	4b11      	ldr	r3, [pc, #68]	; (8003214 <HAL_FLASHEx_Erase+0xdc>)
 80031ce:	691b      	ldr	r3, [r3, #16]
 80031d0:	4a10      	ldr	r2, [pc, #64]	; (8003214 <HAL_FLASHEx_Erase+0xdc>)
 80031d2:	f023 03fa 	bic.w	r3, r3, #250	; 0xfa
 80031d6:	6113      	str	r3, [r2, #16]

        if (status != HAL_OK)
 80031d8:	7bfb      	ldrb	r3, [r7, #15]
 80031da:	2b00      	cmp	r3, #0
 80031dc:	d003      	beq.n	80031e6 <HAL_FLASHEx_Erase+0xae>
        {
          /* In case of error, stop erase procedure and return the faulty sector*/
          *SectorError = index;
 80031de:	683b      	ldr	r3, [r7, #0]
 80031e0:	68ba      	ldr	r2, [r7, #8]
 80031e2:	601a      	str	r2, [r3, #0]
          break;
 80031e4:	e00a      	b.n	80031fc <HAL_FLASHEx_Erase+0xc4>
      for (index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 80031e6:	68bb      	ldr	r3, [r7, #8]
 80031e8:	3301      	adds	r3, #1
 80031ea:	60bb      	str	r3, [r7, #8]
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	68da      	ldr	r2, [r3, #12]
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	689b      	ldr	r3, [r3, #8]
 80031f4:	4413      	add	r3, r2
 80031f6:	68ba      	ldr	r2, [r7, #8]
 80031f8:	429a      	cmp	r2, r3
 80031fa:	d3da      	bcc.n	80031b2 <HAL_FLASHEx_Erase+0x7a>
        }
      }
    }
    /* Flush the caches to be sure of the data consistency */
    FLASH_FlushCaches();
 80031fc:	f000 f878 	bl	80032f0 <FLASH_FlushCaches>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8003200:	4b03      	ldr	r3, [pc, #12]	; (8003210 <HAL_FLASHEx_Erase+0xd8>)
 8003202:	2200      	movs	r2, #0
 8003204:	761a      	strb	r2, [r3, #24]

  return status;
 8003206:	7bfb      	ldrb	r3, [r7, #15]
}
 8003208:	4618      	mov	r0, r3
 800320a:	3710      	adds	r7, #16
 800320c:	46bd      	mov	sp, r7
 800320e:	bd80      	pop	{r7, pc}
 8003210:	200003f0 	.word	0x200003f0
 8003214:	40023c00 	.word	0x40023c00

08003218 <FLASH_MassErase>:
  *            @arg FLASH_BANK_1: Bank1 to be erased
  *
  * @retval None
  */
static void FLASH_MassErase(uint8_t VoltageRange, uint32_t Banks)
{
 8003218:	b480      	push	{r7}
 800321a:	b083      	sub	sp, #12
 800321c:	af00      	add	r7, sp, #0
 800321e:	4603      	mov	r3, r0
 8003220:	6039      	str	r1, [r7, #0]
 8003222:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_VOLTAGERANGE(VoltageRange));
  assert_param(IS_FLASH_BANK(Banks));

  /* If the previous operation is completed, proceed to erase all sectors */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8003224:	4b0d      	ldr	r3, [pc, #52]	; (800325c <FLASH_MassErase+0x44>)
 8003226:	691b      	ldr	r3, [r3, #16]
 8003228:	4a0c      	ldr	r2, [pc, #48]	; (800325c <FLASH_MassErase+0x44>)
 800322a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800322e:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_MER;
 8003230:	4b0a      	ldr	r3, [pc, #40]	; (800325c <FLASH_MassErase+0x44>)
 8003232:	691b      	ldr	r3, [r3, #16]
 8003234:	4a09      	ldr	r2, [pc, #36]	; (800325c <FLASH_MassErase+0x44>)
 8003236:	f043 0304 	orr.w	r3, r3, #4
 800323a:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT | ((uint32_t)VoltageRange << 8U);
 800323c:	4b07      	ldr	r3, [pc, #28]	; (800325c <FLASH_MassErase+0x44>)
 800323e:	691a      	ldr	r2, [r3, #16]
 8003240:	79fb      	ldrb	r3, [r7, #7]
 8003242:	021b      	lsls	r3, r3, #8
 8003244:	4313      	orrs	r3, r2
 8003246:	4a05      	ldr	r2, [pc, #20]	; (800325c <FLASH_MassErase+0x44>)
 8003248:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800324c:	6113      	str	r3, [r2, #16]
}
 800324e:	bf00      	nop
 8003250:	370c      	adds	r7, #12
 8003252:	46bd      	mov	sp, r7
 8003254:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003258:	4770      	bx	lr
 800325a:	bf00      	nop
 800325c:	40023c00 	.word	0x40023c00

08003260 <FLASH_Erase_Sector>:
  *                                  the operation will be done by double word (64-bit)
  *
  * @retval None
  */
void FLASH_Erase_Sector(uint32_t Sector, uint8_t VoltageRange)
{
 8003260:	b480      	push	{r7}
 8003262:	b085      	sub	sp, #20
 8003264:	af00      	add	r7, sp, #0
 8003266:	6078      	str	r0, [r7, #4]
 8003268:	460b      	mov	r3, r1
 800326a:	70fb      	strb	r3, [r7, #3]
  uint32_t tmp_psize = 0U;
 800326c:	2300      	movs	r3, #0
 800326e:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_FLASH_SECTOR(Sector));
  assert_param(IS_VOLTAGERANGE(VoltageRange));

  if (VoltageRange == FLASH_VOLTAGE_RANGE_1)
 8003270:	78fb      	ldrb	r3, [r7, #3]
 8003272:	2b00      	cmp	r3, #0
 8003274:	d102      	bne.n	800327c <FLASH_Erase_Sector+0x1c>
  {
    tmp_psize = FLASH_PSIZE_BYTE;
 8003276:	2300      	movs	r3, #0
 8003278:	60fb      	str	r3, [r7, #12]
 800327a:	e010      	b.n	800329e <FLASH_Erase_Sector+0x3e>
  }
  else if (VoltageRange == FLASH_VOLTAGE_RANGE_2)
 800327c:	78fb      	ldrb	r3, [r7, #3]
 800327e:	2b01      	cmp	r3, #1
 8003280:	d103      	bne.n	800328a <FLASH_Erase_Sector+0x2a>
  {
    tmp_psize = FLASH_PSIZE_HALF_WORD;
 8003282:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003286:	60fb      	str	r3, [r7, #12]
 8003288:	e009      	b.n	800329e <FLASH_Erase_Sector+0x3e>
  }
  else if (VoltageRange == FLASH_VOLTAGE_RANGE_3)
 800328a:	78fb      	ldrb	r3, [r7, #3]
 800328c:	2b02      	cmp	r3, #2
 800328e:	d103      	bne.n	8003298 <FLASH_Erase_Sector+0x38>
  {
    tmp_psize = FLASH_PSIZE_WORD;
 8003290:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003294:	60fb      	str	r3, [r7, #12]
 8003296:	e002      	b.n	800329e <FLASH_Erase_Sector+0x3e>
  }
  else
  {
    tmp_psize = FLASH_PSIZE_DOUBLE_WORD;
 8003298:	f44f 7340 	mov.w	r3, #768	; 0x300
 800329c:	60fb      	str	r3, [r7, #12]
  }

  /* If the previous operation is completed, proceed to erase the sector */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 800329e:	4b13      	ldr	r3, [pc, #76]	; (80032ec <FLASH_Erase_Sector+0x8c>)
 80032a0:	691b      	ldr	r3, [r3, #16]
 80032a2:	4a12      	ldr	r2, [pc, #72]	; (80032ec <FLASH_Erase_Sector+0x8c>)
 80032a4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80032a8:	6113      	str	r3, [r2, #16]
  FLASH->CR |= tmp_psize;
 80032aa:	4b10      	ldr	r3, [pc, #64]	; (80032ec <FLASH_Erase_Sector+0x8c>)
 80032ac:	691a      	ldr	r2, [r3, #16]
 80032ae:	490f      	ldr	r1, [pc, #60]	; (80032ec <FLASH_Erase_Sector+0x8c>)
 80032b0:	68fb      	ldr	r3, [r7, #12]
 80032b2:	4313      	orrs	r3, r2
 80032b4:	610b      	str	r3, [r1, #16]
  CLEAR_BIT(FLASH->CR, FLASH_CR_SNB);
 80032b6:	4b0d      	ldr	r3, [pc, #52]	; (80032ec <FLASH_Erase_Sector+0x8c>)
 80032b8:	691b      	ldr	r3, [r3, #16]
 80032ba:	4a0c      	ldr	r2, [pc, #48]	; (80032ec <FLASH_Erase_Sector+0x8c>)
 80032bc:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 80032c0:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_SER | (Sector << FLASH_CR_SNB_Pos);
 80032c2:	4b0a      	ldr	r3, [pc, #40]	; (80032ec <FLASH_Erase_Sector+0x8c>)
 80032c4:	691a      	ldr	r2, [r3, #16]
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	00db      	lsls	r3, r3, #3
 80032ca:	4313      	orrs	r3, r2
 80032cc:	4a07      	ldr	r2, [pc, #28]	; (80032ec <FLASH_Erase_Sector+0x8c>)
 80032ce:	f043 0302 	orr.w	r3, r3, #2
 80032d2:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT;
 80032d4:	4b05      	ldr	r3, [pc, #20]	; (80032ec <FLASH_Erase_Sector+0x8c>)
 80032d6:	691b      	ldr	r3, [r3, #16]
 80032d8:	4a04      	ldr	r2, [pc, #16]	; (80032ec <FLASH_Erase_Sector+0x8c>)
 80032da:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80032de:	6113      	str	r3, [r2, #16]
}
 80032e0:	bf00      	nop
 80032e2:	3714      	adds	r7, #20
 80032e4:	46bd      	mov	sp, r7
 80032e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032ea:	4770      	bx	lr
 80032ec:	40023c00 	.word	0x40023c00

080032f0 <FLASH_FlushCaches>:
/**
  * @brief  Flush the instruction and data caches
  * @retval None
  */
void FLASH_FlushCaches(void)
{
 80032f0:	b480      	push	{r7}
 80032f2:	af00      	add	r7, sp, #0
  /* Flush instruction cache  */
  if (READ_BIT(FLASH->ACR, FLASH_ACR_ICEN) != RESET)
 80032f4:	4b20      	ldr	r3, [pc, #128]	; (8003378 <FLASH_FlushCaches+0x88>)
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80032fc:	2b00      	cmp	r3, #0
 80032fe:	d017      	beq.n	8003330 <FLASH_FlushCaches+0x40>
  {
    /* Disable instruction cache  */
    __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
 8003300:	4b1d      	ldr	r3, [pc, #116]	; (8003378 <FLASH_FlushCaches+0x88>)
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	4a1c      	ldr	r2, [pc, #112]	; (8003378 <FLASH_FlushCaches+0x88>)
 8003306:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800330a:	6013      	str	r3, [r2, #0]
    /* Reset instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_RESET();
 800330c:	4b1a      	ldr	r3, [pc, #104]	; (8003378 <FLASH_FlushCaches+0x88>)
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	4a19      	ldr	r2, [pc, #100]	; (8003378 <FLASH_FlushCaches+0x88>)
 8003312:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8003316:	6013      	str	r3, [r2, #0]
 8003318:	4b17      	ldr	r3, [pc, #92]	; (8003378 <FLASH_FlushCaches+0x88>)
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	4a16      	ldr	r2, [pc, #88]	; (8003378 <FLASH_FlushCaches+0x88>)
 800331e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003322:	6013      	str	r3, [r2, #0]
    /* Enable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8003324:	4b14      	ldr	r3, [pc, #80]	; (8003378 <FLASH_FlushCaches+0x88>)
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	4a13      	ldr	r2, [pc, #76]	; (8003378 <FLASH_FlushCaches+0x88>)
 800332a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800332e:	6013      	str	r3, [r2, #0]
  }

  /* Flush data cache */
  if (READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != RESET)
 8003330:	4b11      	ldr	r3, [pc, #68]	; (8003378 <FLASH_FlushCaches+0x88>)
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003338:	2b00      	cmp	r3, #0
 800333a:	d017      	beq.n	800336c <FLASH_FlushCaches+0x7c>
  {
    /* Disable data cache  */
    __HAL_FLASH_DATA_CACHE_DISABLE();
 800333c:	4b0e      	ldr	r3, [pc, #56]	; (8003378 <FLASH_FlushCaches+0x88>)
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	4a0d      	ldr	r2, [pc, #52]	; (8003378 <FLASH_FlushCaches+0x88>)
 8003342:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003346:	6013      	str	r3, [r2, #0]
    /* Reset data cache */
    __HAL_FLASH_DATA_CACHE_RESET();
 8003348:	4b0b      	ldr	r3, [pc, #44]	; (8003378 <FLASH_FlushCaches+0x88>)
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	4a0a      	ldr	r2, [pc, #40]	; (8003378 <FLASH_FlushCaches+0x88>)
 800334e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8003352:	6013      	str	r3, [r2, #0]
 8003354:	4b08      	ldr	r3, [pc, #32]	; (8003378 <FLASH_FlushCaches+0x88>)
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	4a07      	ldr	r2, [pc, #28]	; (8003378 <FLASH_FlushCaches+0x88>)
 800335a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800335e:	6013      	str	r3, [r2, #0]
    /* Enable data cache */
    __HAL_FLASH_DATA_CACHE_ENABLE();
 8003360:	4b05      	ldr	r3, [pc, #20]	; (8003378 <FLASH_FlushCaches+0x88>)
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	4a04      	ldr	r2, [pc, #16]	; (8003378 <FLASH_FlushCaches+0x88>)
 8003366:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800336a:	6013      	str	r3, [r2, #0]
  }
}
 800336c:	bf00      	nop
 800336e:	46bd      	mov	sp, r7
 8003370:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003374:	4770      	bx	lr
 8003376:	bf00      	nop
 8003378:	40023c00 	.word	0x40023c00

0800337c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800337c:	b480      	push	{r7}
 800337e:	b089      	sub	sp, #36	; 0x24
 8003380:	af00      	add	r7, sp, #0
 8003382:	6078      	str	r0, [r7, #4]
 8003384:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003386:	2300      	movs	r3, #0
 8003388:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800338a:	2300      	movs	r3, #0
 800338c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800338e:	2300      	movs	r3, #0
 8003390:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003392:	2300      	movs	r3, #0
 8003394:	61fb      	str	r3, [r7, #28]
 8003396:	e16b      	b.n	8003670 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003398:	2201      	movs	r2, #1
 800339a:	69fb      	ldr	r3, [r7, #28]
 800339c:	fa02 f303 	lsl.w	r3, r2, r3
 80033a0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80033a2:	683b      	ldr	r3, [r7, #0]
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	697a      	ldr	r2, [r7, #20]
 80033a8:	4013      	ands	r3, r2
 80033aa:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80033ac:	693a      	ldr	r2, [r7, #16]
 80033ae:	697b      	ldr	r3, [r7, #20]
 80033b0:	429a      	cmp	r2, r3
 80033b2:	f040 815a 	bne.w	800366a <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80033b6:	683b      	ldr	r3, [r7, #0]
 80033b8:	685b      	ldr	r3, [r3, #4]
 80033ba:	f003 0303 	and.w	r3, r3, #3
 80033be:	2b01      	cmp	r3, #1
 80033c0:	d005      	beq.n	80033ce <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80033c2:	683b      	ldr	r3, [r7, #0]
 80033c4:	685b      	ldr	r3, [r3, #4]
 80033c6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80033ca:	2b02      	cmp	r3, #2
 80033cc:	d130      	bne.n	8003430 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	689b      	ldr	r3, [r3, #8]
 80033d2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80033d4:	69fb      	ldr	r3, [r7, #28]
 80033d6:	005b      	lsls	r3, r3, #1
 80033d8:	2203      	movs	r2, #3
 80033da:	fa02 f303 	lsl.w	r3, r2, r3
 80033de:	43db      	mvns	r3, r3
 80033e0:	69ba      	ldr	r2, [r7, #24]
 80033e2:	4013      	ands	r3, r2
 80033e4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80033e6:	683b      	ldr	r3, [r7, #0]
 80033e8:	68da      	ldr	r2, [r3, #12]
 80033ea:	69fb      	ldr	r3, [r7, #28]
 80033ec:	005b      	lsls	r3, r3, #1
 80033ee:	fa02 f303 	lsl.w	r3, r2, r3
 80033f2:	69ba      	ldr	r2, [r7, #24]
 80033f4:	4313      	orrs	r3, r2
 80033f6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	69ba      	ldr	r2, [r7, #24]
 80033fc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	685b      	ldr	r3, [r3, #4]
 8003402:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003404:	2201      	movs	r2, #1
 8003406:	69fb      	ldr	r3, [r7, #28]
 8003408:	fa02 f303 	lsl.w	r3, r2, r3
 800340c:	43db      	mvns	r3, r3
 800340e:	69ba      	ldr	r2, [r7, #24]
 8003410:	4013      	ands	r3, r2
 8003412:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003414:	683b      	ldr	r3, [r7, #0]
 8003416:	685b      	ldr	r3, [r3, #4]
 8003418:	091b      	lsrs	r3, r3, #4
 800341a:	f003 0201 	and.w	r2, r3, #1
 800341e:	69fb      	ldr	r3, [r7, #28]
 8003420:	fa02 f303 	lsl.w	r3, r2, r3
 8003424:	69ba      	ldr	r2, [r7, #24]
 8003426:	4313      	orrs	r3, r2
 8003428:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	69ba      	ldr	r2, [r7, #24]
 800342e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003430:	683b      	ldr	r3, [r7, #0]
 8003432:	685b      	ldr	r3, [r3, #4]
 8003434:	f003 0303 	and.w	r3, r3, #3
 8003438:	2b03      	cmp	r3, #3
 800343a:	d017      	beq.n	800346c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	68db      	ldr	r3, [r3, #12]
 8003440:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003442:	69fb      	ldr	r3, [r7, #28]
 8003444:	005b      	lsls	r3, r3, #1
 8003446:	2203      	movs	r2, #3
 8003448:	fa02 f303 	lsl.w	r3, r2, r3
 800344c:	43db      	mvns	r3, r3
 800344e:	69ba      	ldr	r2, [r7, #24]
 8003450:	4013      	ands	r3, r2
 8003452:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003454:	683b      	ldr	r3, [r7, #0]
 8003456:	689a      	ldr	r2, [r3, #8]
 8003458:	69fb      	ldr	r3, [r7, #28]
 800345a:	005b      	lsls	r3, r3, #1
 800345c:	fa02 f303 	lsl.w	r3, r2, r3
 8003460:	69ba      	ldr	r2, [r7, #24]
 8003462:	4313      	orrs	r3, r2
 8003464:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	69ba      	ldr	r2, [r7, #24]
 800346a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800346c:	683b      	ldr	r3, [r7, #0]
 800346e:	685b      	ldr	r3, [r3, #4]
 8003470:	f003 0303 	and.w	r3, r3, #3
 8003474:	2b02      	cmp	r3, #2
 8003476:	d123      	bne.n	80034c0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003478:	69fb      	ldr	r3, [r7, #28]
 800347a:	08da      	lsrs	r2, r3, #3
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	3208      	adds	r2, #8
 8003480:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003484:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003486:	69fb      	ldr	r3, [r7, #28]
 8003488:	f003 0307 	and.w	r3, r3, #7
 800348c:	009b      	lsls	r3, r3, #2
 800348e:	220f      	movs	r2, #15
 8003490:	fa02 f303 	lsl.w	r3, r2, r3
 8003494:	43db      	mvns	r3, r3
 8003496:	69ba      	ldr	r2, [r7, #24]
 8003498:	4013      	ands	r3, r2
 800349a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800349c:	683b      	ldr	r3, [r7, #0]
 800349e:	691a      	ldr	r2, [r3, #16]
 80034a0:	69fb      	ldr	r3, [r7, #28]
 80034a2:	f003 0307 	and.w	r3, r3, #7
 80034a6:	009b      	lsls	r3, r3, #2
 80034a8:	fa02 f303 	lsl.w	r3, r2, r3
 80034ac:	69ba      	ldr	r2, [r7, #24]
 80034ae:	4313      	orrs	r3, r2
 80034b0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80034b2:	69fb      	ldr	r3, [r7, #28]
 80034b4:	08da      	lsrs	r2, r3, #3
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	3208      	adds	r2, #8
 80034ba:	69b9      	ldr	r1, [r7, #24]
 80034bc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80034c6:	69fb      	ldr	r3, [r7, #28]
 80034c8:	005b      	lsls	r3, r3, #1
 80034ca:	2203      	movs	r2, #3
 80034cc:	fa02 f303 	lsl.w	r3, r2, r3
 80034d0:	43db      	mvns	r3, r3
 80034d2:	69ba      	ldr	r2, [r7, #24]
 80034d4:	4013      	ands	r3, r2
 80034d6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80034d8:	683b      	ldr	r3, [r7, #0]
 80034da:	685b      	ldr	r3, [r3, #4]
 80034dc:	f003 0203 	and.w	r2, r3, #3
 80034e0:	69fb      	ldr	r3, [r7, #28]
 80034e2:	005b      	lsls	r3, r3, #1
 80034e4:	fa02 f303 	lsl.w	r3, r2, r3
 80034e8:	69ba      	ldr	r2, [r7, #24]
 80034ea:	4313      	orrs	r3, r2
 80034ec:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	69ba      	ldr	r2, [r7, #24]
 80034f2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80034f4:	683b      	ldr	r3, [r7, #0]
 80034f6:	685b      	ldr	r3, [r3, #4]
 80034f8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80034fc:	2b00      	cmp	r3, #0
 80034fe:	f000 80b4 	beq.w	800366a <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003502:	2300      	movs	r3, #0
 8003504:	60fb      	str	r3, [r7, #12]
 8003506:	4b60      	ldr	r3, [pc, #384]	; (8003688 <HAL_GPIO_Init+0x30c>)
 8003508:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800350a:	4a5f      	ldr	r2, [pc, #380]	; (8003688 <HAL_GPIO_Init+0x30c>)
 800350c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003510:	6453      	str	r3, [r2, #68]	; 0x44
 8003512:	4b5d      	ldr	r3, [pc, #372]	; (8003688 <HAL_GPIO_Init+0x30c>)
 8003514:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003516:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800351a:	60fb      	str	r3, [r7, #12]
 800351c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800351e:	4a5b      	ldr	r2, [pc, #364]	; (800368c <HAL_GPIO_Init+0x310>)
 8003520:	69fb      	ldr	r3, [r7, #28]
 8003522:	089b      	lsrs	r3, r3, #2
 8003524:	3302      	adds	r3, #2
 8003526:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800352a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800352c:	69fb      	ldr	r3, [r7, #28]
 800352e:	f003 0303 	and.w	r3, r3, #3
 8003532:	009b      	lsls	r3, r3, #2
 8003534:	220f      	movs	r2, #15
 8003536:	fa02 f303 	lsl.w	r3, r2, r3
 800353a:	43db      	mvns	r3, r3
 800353c:	69ba      	ldr	r2, [r7, #24]
 800353e:	4013      	ands	r3, r2
 8003540:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	4a52      	ldr	r2, [pc, #328]	; (8003690 <HAL_GPIO_Init+0x314>)
 8003546:	4293      	cmp	r3, r2
 8003548:	d02b      	beq.n	80035a2 <HAL_GPIO_Init+0x226>
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	4a51      	ldr	r2, [pc, #324]	; (8003694 <HAL_GPIO_Init+0x318>)
 800354e:	4293      	cmp	r3, r2
 8003550:	d025      	beq.n	800359e <HAL_GPIO_Init+0x222>
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	4a50      	ldr	r2, [pc, #320]	; (8003698 <HAL_GPIO_Init+0x31c>)
 8003556:	4293      	cmp	r3, r2
 8003558:	d01f      	beq.n	800359a <HAL_GPIO_Init+0x21e>
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	4a4f      	ldr	r2, [pc, #316]	; (800369c <HAL_GPIO_Init+0x320>)
 800355e:	4293      	cmp	r3, r2
 8003560:	d019      	beq.n	8003596 <HAL_GPIO_Init+0x21a>
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	4a4e      	ldr	r2, [pc, #312]	; (80036a0 <HAL_GPIO_Init+0x324>)
 8003566:	4293      	cmp	r3, r2
 8003568:	d013      	beq.n	8003592 <HAL_GPIO_Init+0x216>
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	4a4d      	ldr	r2, [pc, #308]	; (80036a4 <HAL_GPIO_Init+0x328>)
 800356e:	4293      	cmp	r3, r2
 8003570:	d00d      	beq.n	800358e <HAL_GPIO_Init+0x212>
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	4a4c      	ldr	r2, [pc, #304]	; (80036a8 <HAL_GPIO_Init+0x32c>)
 8003576:	4293      	cmp	r3, r2
 8003578:	d007      	beq.n	800358a <HAL_GPIO_Init+0x20e>
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	4a4b      	ldr	r2, [pc, #300]	; (80036ac <HAL_GPIO_Init+0x330>)
 800357e:	4293      	cmp	r3, r2
 8003580:	d101      	bne.n	8003586 <HAL_GPIO_Init+0x20a>
 8003582:	2307      	movs	r3, #7
 8003584:	e00e      	b.n	80035a4 <HAL_GPIO_Init+0x228>
 8003586:	2308      	movs	r3, #8
 8003588:	e00c      	b.n	80035a4 <HAL_GPIO_Init+0x228>
 800358a:	2306      	movs	r3, #6
 800358c:	e00a      	b.n	80035a4 <HAL_GPIO_Init+0x228>
 800358e:	2305      	movs	r3, #5
 8003590:	e008      	b.n	80035a4 <HAL_GPIO_Init+0x228>
 8003592:	2304      	movs	r3, #4
 8003594:	e006      	b.n	80035a4 <HAL_GPIO_Init+0x228>
 8003596:	2303      	movs	r3, #3
 8003598:	e004      	b.n	80035a4 <HAL_GPIO_Init+0x228>
 800359a:	2302      	movs	r3, #2
 800359c:	e002      	b.n	80035a4 <HAL_GPIO_Init+0x228>
 800359e:	2301      	movs	r3, #1
 80035a0:	e000      	b.n	80035a4 <HAL_GPIO_Init+0x228>
 80035a2:	2300      	movs	r3, #0
 80035a4:	69fa      	ldr	r2, [r7, #28]
 80035a6:	f002 0203 	and.w	r2, r2, #3
 80035aa:	0092      	lsls	r2, r2, #2
 80035ac:	4093      	lsls	r3, r2
 80035ae:	69ba      	ldr	r2, [r7, #24]
 80035b0:	4313      	orrs	r3, r2
 80035b2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80035b4:	4935      	ldr	r1, [pc, #212]	; (800368c <HAL_GPIO_Init+0x310>)
 80035b6:	69fb      	ldr	r3, [r7, #28]
 80035b8:	089b      	lsrs	r3, r3, #2
 80035ba:	3302      	adds	r3, #2
 80035bc:	69ba      	ldr	r2, [r7, #24]
 80035be:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80035c2:	4b3b      	ldr	r3, [pc, #236]	; (80036b0 <HAL_GPIO_Init+0x334>)
 80035c4:	689b      	ldr	r3, [r3, #8]
 80035c6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80035c8:	693b      	ldr	r3, [r7, #16]
 80035ca:	43db      	mvns	r3, r3
 80035cc:	69ba      	ldr	r2, [r7, #24]
 80035ce:	4013      	ands	r3, r2
 80035d0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80035d2:	683b      	ldr	r3, [r7, #0]
 80035d4:	685b      	ldr	r3, [r3, #4]
 80035d6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80035da:	2b00      	cmp	r3, #0
 80035dc:	d003      	beq.n	80035e6 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80035de:	69ba      	ldr	r2, [r7, #24]
 80035e0:	693b      	ldr	r3, [r7, #16]
 80035e2:	4313      	orrs	r3, r2
 80035e4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80035e6:	4a32      	ldr	r2, [pc, #200]	; (80036b0 <HAL_GPIO_Init+0x334>)
 80035e8:	69bb      	ldr	r3, [r7, #24]
 80035ea:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80035ec:	4b30      	ldr	r3, [pc, #192]	; (80036b0 <HAL_GPIO_Init+0x334>)
 80035ee:	68db      	ldr	r3, [r3, #12]
 80035f0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80035f2:	693b      	ldr	r3, [r7, #16]
 80035f4:	43db      	mvns	r3, r3
 80035f6:	69ba      	ldr	r2, [r7, #24]
 80035f8:	4013      	ands	r3, r2
 80035fa:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80035fc:	683b      	ldr	r3, [r7, #0]
 80035fe:	685b      	ldr	r3, [r3, #4]
 8003600:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003604:	2b00      	cmp	r3, #0
 8003606:	d003      	beq.n	8003610 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8003608:	69ba      	ldr	r2, [r7, #24]
 800360a:	693b      	ldr	r3, [r7, #16]
 800360c:	4313      	orrs	r3, r2
 800360e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003610:	4a27      	ldr	r2, [pc, #156]	; (80036b0 <HAL_GPIO_Init+0x334>)
 8003612:	69bb      	ldr	r3, [r7, #24]
 8003614:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003616:	4b26      	ldr	r3, [pc, #152]	; (80036b0 <HAL_GPIO_Init+0x334>)
 8003618:	685b      	ldr	r3, [r3, #4]
 800361a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800361c:	693b      	ldr	r3, [r7, #16]
 800361e:	43db      	mvns	r3, r3
 8003620:	69ba      	ldr	r2, [r7, #24]
 8003622:	4013      	ands	r3, r2
 8003624:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003626:	683b      	ldr	r3, [r7, #0]
 8003628:	685b      	ldr	r3, [r3, #4]
 800362a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800362e:	2b00      	cmp	r3, #0
 8003630:	d003      	beq.n	800363a <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8003632:	69ba      	ldr	r2, [r7, #24]
 8003634:	693b      	ldr	r3, [r7, #16]
 8003636:	4313      	orrs	r3, r2
 8003638:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800363a:	4a1d      	ldr	r2, [pc, #116]	; (80036b0 <HAL_GPIO_Init+0x334>)
 800363c:	69bb      	ldr	r3, [r7, #24]
 800363e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003640:	4b1b      	ldr	r3, [pc, #108]	; (80036b0 <HAL_GPIO_Init+0x334>)
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003646:	693b      	ldr	r3, [r7, #16]
 8003648:	43db      	mvns	r3, r3
 800364a:	69ba      	ldr	r2, [r7, #24]
 800364c:	4013      	ands	r3, r2
 800364e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003650:	683b      	ldr	r3, [r7, #0]
 8003652:	685b      	ldr	r3, [r3, #4]
 8003654:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003658:	2b00      	cmp	r3, #0
 800365a:	d003      	beq.n	8003664 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 800365c:	69ba      	ldr	r2, [r7, #24]
 800365e:	693b      	ldr	r3, [r7, #16]
 8003660:	4313      	orrs	r3, r2
 8003662:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003664:	4a12      	ldr	r2, [pc, #72]	; (80036b0 <HAL_GPIO_Init+0x334>)
 8003666:	69bb      	ldr	r3, [r7, #24]
 8003668:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800366a:	69fb      	ldr	r3, [r7, #28]
 800366c:	3301      	adds	r3, #1
 800366e:	61fb      	str	r3, [r7, #28]
 8003670:	69fb      	ldr	r3, [r7, #28]
 8003672:	2b0f      	cmp	r3, #15
 8003674:	f67f ae90 	bls.w	8003398 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003678:	bf00      	nop
 800367a:	bf00      	nop
 800367c:	3724      	adds	r7, #36	; 0x24
 800367e:	46bd      	mov	sp, r7
 8003680:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003684:	4770      	bx	lr
 8003686:	bf00      	nop
 8003688:	40023800 	.word	0x40023800
 800368c:	40013800 	.word	0x40013800
 8003690:	40020000 	.word	0x40020000
 8003694:	40020400 	.word	0x40020400
 8003698:	40020800 	.word	0x40020800
 800369c:	40020c00 	.word	0x40020c00
 80036a0:	40021000 	.word	0x40021000
 80036a4:	40021400 	.word	0x40021400
 80036a8:	40021800 	.word	0x40021800
 80036ac:	40021c00 	.word	0x40021c00
 80036b0:	40013c00 	.word	0x40013c00

080036b4 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 80036b4:	b480      	push	{r7}
 80036b6:	b087      	sub	sp, #28
 80036b8:	af00      	add	r7, sp, #0
 80036ba:	6078      	str	r0, [r7, #4]
 80036bc:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80036be:	2300      	movs	r3, #0
 80036c0:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00U;
 80036c2:	2300      	movs	r3, #0
 80036c4:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00U;
 80036c6:	2300      	movs	r3, #0
 80036c8:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  
  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80036ca:	2300      	movs	r3, #0
 80036cc:	617b      	str	r3, [r7, #20]
 80036ce:	e0cd      	b.n	800386c <HAL_GPIO_DeInit+0x1b8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80036d0:	2201      	movs	r2, #1
 80036d2:	697b      	ldr	r3, [r7, #20]
 80036d4:	fa02 f303 	lsl.w	r3, r2, r3
 80036d8:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 80036da:	683a      	ldr	r2, [r7, #0]
 80036dc:	693b      	ldr	r3, [r7, #16]
 80036de:	4013      	ands	r3, r2
 80036e0:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
 80036e2:	68fa      	ldr	r2, [r7, #12]
 80036e4:	693b      	ldr	r3, [r7, #16]
 80036e6:	429a      	cmp	r2, r3
 80036e8:	f040 80bd 	bne.w	8003866 <HAL_GPIO_DeInit+0x1b2>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2U];
 80036ec:	4a65      	ldr	r2, [pc, #404]	; (8003884 <HAL_GPIO_DeInit+0x1d0>)
 80036ee:	697b      	ldr	r3, [r7, #20]
 80036f0:	089b      	lsrs	r3, r3, #2
 80036f2:	3302      	adds	r3, #2
 80036f4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80036f8:	60bb      	str	r3, [r7, #8]
      tmp &= (0x0FU << (4U * (position & 0x03U)));
 80036fa:	697b      	ldr	r3, [r7, #20]
 80036fc:	f003 0303 	and.w	r3, r3, #3
 8003700:	009b      	lsls	r3, r3, #2
 8003702:	220f      	movs	r2, #15
 8003704:	fa02 f303 	lsl.w	r3, r2, r3
 8003708:	68ba      	ldr	r2, [r7, #8]
 800370a:	4013      	ands	r3, r2
 800370c:	60bb      	str	r3, [r7, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	4a5d      	ldr	r2, [pc, #372]	; (8003888 <HAL_GPIO_DeInit+0x1d4>)
 8003712:	4293      	cmp	r3, r2
 8003714:	d02b      	beq.n	800376e <HAL_GPIO_DeInit+0xba>
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	4a5c      	ldr	r2, [pc, #368]	; (800388c <HAL_GPIO_DeInit+0x1d8>)
 800371a:	4293      	cmp	r3, r2
 800371c:	d025      	beq.n	800376a <HAL_GPIO_DeInit+0xb6>
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	4a5b      	ldr	r2, [pc, #364]	; (8003890 <HAL_GPIO_DeInit+0x1dc>)
 8003722:	4293      	cmp	r3, r2
 8003724:	d01f      	beq.n	8003766 <HAL_GPIO_DeInit+0xb2>
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	4a5a      	ldr	r2, [pc, #360]	; (8003894 <HAL_GPIO_DeInit+0x1e0>)
 800372a:	4293      	cmp	r3, r2
 800372c:	d019      	beq.n	8003762 <HAL_GPIO_DeInit+0xae>
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	4a59      	ldr	r2, [pc, #356]	; (8003898 <HAL_GPIO_DeInit+0x1e4>)
 8003732:	4293      	cmp	r3, r2
 8003734:	d013      	beq.n	800375e <HAL_GPIO_DeInit+0xaa>
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	4a58      	ldr	r2, [pc, #352]	; (800389c <HAL_GPIO_DeInit+0x1e8>)
 800373a:	4293      	cmp	r3, r2
 800373c:	d00d      	beq.n	800375a <HAL_GPIO_DeInit+0xa6>
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	4a57      	ldr	r2, [pc, #348]	; (80038a0 <HAL_GPIO_DeInit+0x1ec>)
 8003742:	4293      	cmp	r3, r2
 8003744:	d007      	beq.n	8003756 <HAL_GPIO_DeInit+0xa2>
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	4a56      	ldr	r2, [pc, #344]	; (80038a4 <HAL_GPIO_DeInit+0x1f0>)
 800374a:	4293      	cmp	r3, r2
 800374c:	d101      	bne.n	8003752 <HAL_GPIO_DeInit+0x9e>
 800374e:	2307      	movs	r3, #7
 8003750:	e00e      	b.n	8003770 <HAL_GPIO_DeInit+0xbc>
 8003752:	2308      	movs	r3, #8
 8003754:	e00c      	b.n	8003770 <HAL_GPIO_DeInit+0xbc>
 8003756:	2306      	movs	r3, #6
 8003758:	e00a      	b.n	8003770 <HAL_GPIO_DeInit+0xbc>
 800375a:	2305      	movs	r3, #5
 800375c:	e008      	b.n	8003770 <HAL_GPIO_DeInit+0xbc>
 800375e:	2304      	movs	r3, #4
 8003760:	e006      	b.n	8003770 <HAL_GPIO_DeInit+0xbc>
 8003762:	2303      	movs	r3, #3
 8003764:	e004      	b.n	8003770 <HAL_GPIO_DeInit+0xbc>
 8003766:	2302      	movs	r3, #2
 8003768:	e002      	b.n	8003770 <HAL_GPIO_DeInit+0xbc>
 800376a:	2301      	movs	r3, #1
 800376c:	e000      	b.n	8003770 <HAL_GPIO_DeInit+0xbc>
 800376e:	2300      	movs	r3, #0
 8003770:	697a      	ldr	r2, [r7, #20]
 8003772:	f002 0203 	and.w	r2, r2, #3
 8003776:	0092      	lsls	r2, r2, #2
 8003778:	4093      	lsls	r3, r2
 800377a:	68ba      	ldr	r2, [r7, #8]
 800377c:	429a      	cmp	r2, r3
 800377e:	d132      	bne.n	80037e6 <HAL_GPIO_DeInit+0x132>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 8003780:	4b49      	ldr	r3, [pc, #292]	; (80038a8 <HAL_GPIO_DeInit+0x1f4>)
 8003782:	681a      	ldr	r2, [r3, #0]
 8003784:	68fb      	ldr	r3, [r7, #12]
 8003786:	43db      	mvns	r3, r3
 8003788:	4947      	ldr	r1, [pc, #284]	; (80038a8 <HAL_GPIO_DeInit+0x1f4>)
 800378a:	4013      	ands	r3, r2
 800378c:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 800378e:	4b46      	ldr	r3, [pc, #280]	; (80038a8 <HAL_GPIO_DeInit+0x1f4>)
 8003790:	685a      	ldr	r2, [r3, #4]
 8003792:	68fb      	ldr	r3, [r7, #12]
 8003794:	43db      	mvns	r3, r3
 8003796:	4944      	ldr	r1, [pc, #272]	; (80038a8 <HAL_GPIO_DeInit+0x1f4>)
 8003798:	4013      	ands	r3, r2
 800379a:	604b      	str	r3, [r1, #4]
        
        /* Clear Rising Falling edge configuration */
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 800379c:	4b42      	ldr	r3, [pc, #264]	; (80038a8 <HAL_GPIO_DeInit+0x1f4>)
 800379e:	68da      	ldr	r2, [r3, #12]
 80037a0:	68fb      	ldr	r3, [r7, #12]
 80037a2:	43db      	mvns	r3, r3
 80037a4:	4940      	ldr	r1, [pc, #256]	; (80038a8 <HAL_GPIO_DeInit+0x1f4>)
 80037a6:	4013      	ands	r3, r2
 80037a8:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 80037aa:	4b3f      	ldr	r3, [pc, #252]	; (80038a8 <HAL_GPIO_DeInit+0x1f4>)
 80037ac:	689a      	ldr	r2, [r3, #8]
 80037ae:	68fb      	ldr	r3, [r7, #12]
 80037b0:	43db      	mvns	r3, r3
 80037b2:	493d      	ldr	r1, [pc, #244]	; (80038a8 <HAL_GPIO_DeInit+0x1f4>)
 80037b4:	4013      	ands	r3, r2
 80037b6:	608b      	str	r3, [r1, #8]

        /* Configure the External Interrupt or event for the current IO */
        tmp = 0x0FU << (4U * (position & 0x03U));
 80037b8:	697b      	ldr	r3, [r7, #20]
 80037ba:	f003 0303 	and.w	r3, r3, #3
 80037be:	009b      	lsls	r3, r3, #2
 80037c0:	220f      	movs	r2, #15
 80037c2:	fa02 f303 	lsl.w	r3, r2, r3
 80037c6:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 80037c8:	4a2e      	ldr	r2, [pc, #184]	; (8003884 <HAL_GPIO_DeInit+0x1d0>)
 80037ca:	697b      	ldr	r3, [r7, #20]
 80037cc:	089b      	lsrs	r3, r3, #2
 80037ce:	3302      	adds	r3, #2
 80037d0:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 80037d4:	68bb      	ldr	r3, [r7, #8]
 80037d6:	43da      	mvns	r2, r3
 80037d8:	482a      	ldr	r0, [pc, #168]	; (8003884 <HAL_GPIO_DeInit+0x1d0>)
 80037da:	697b      	ldr	r3, [r7, #20]
 80037dc:	089b      	lsrs	r3, r3, #2
 80037de:	400a      	ands	r2, r1
 80037e0:	3302      	adds	r3, #2
 80037e2:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	681a      	ldr	r2, [r3, #0]
 80037ea:	697b      	ldr	r3, [r7, #20]
 80037ec:	005b      	lsls	r3, r3, #1
 80037ee:	2103      	movs	r1, #3
 80037f0:	fa01 f303 	lsl.w	r3, r1, r3
 80037f4:	43db      	mvns	r3, r3
 80037f6:	401a      	ands	r2, r3
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80037fc:	697b      	ldr	r3, [r7, #20]
 80037fe:	08da      	lsrs	r2, r3, #3
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	3208      	adds	r2, #8
 8003804:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8003808:	697b      	ldr	r3, [r7, #20]
 800380a:	f003 0307 	and.w	r3, r3, #7
 800380e:	009b      	lsls	r3, r3, #2
 8003810:	220f      	movs	r2, #15
 8003812:	fa02 f303 	lsl.w	r3, r2, r3
 8003816:	43db      	mvns	r3, r3
 8003818:	697a      	ldr	r2, [r7, #20]
 800381a:	08d2      	lsrs	r2, r2, #3
 800381c:	4019      	ands	r1, r3
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	3208      	adds	r2, #8
 8003822:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	68da      	ldr	r2, [r3, #12]
 800382a:	697b      	ldr	r3, [r7, #20]
 800382c:	005b      	lsls	r3, r3, #1
 800382e:	2103      	movs	r1, #3
 8003830:	fa01 f303 	lsl.w	r3, r1, r3
 8003834:	43db      	mvns	r3, r3
 8003836:	401a      	ands	r2, r3
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	685a      	ldr	r2, [r3, #4]
 8003840:	2101      	movs	r1, #1
 8003842:	697b      	ldr	r3, [r7, #20]
 8003844:	fa01 f303 	lsl.w	r3, r1, r3
 8003848:	43db      	mvns	r3, r3
 800384a:	401a      	ands	r2, r3
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	689a      	ldr	r2, [r3, #8]
 8003854:	697b      	ldr	r3, [r7, #20]
 8003856:	005b      	lsls	r3, r3, #1
 8003858:	2103      	movs	r1, #3
 800385a:	fa01 f303 	lsl.w	r3, r1, r3
 800385e:	43db      	mvns	r3, r3
 8003860:	401a      	ands	r2, r3
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	609a      	str	r2, [r3, #8]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003866:	697b      	ldr	r3, [r7, #20]
 8003868:	3301      	adds	r3, #1
 800386a:	617b      	str	r3, [r7, #20]
 800386c:	697b      	ldr	r3, [r7, #20]
 800386e:	2b0f      	cmp	r3, #15
 8003870:	f67f af2e 	bls.w	80036d0 <HAL_GPIO_DeInit+0x1c>
    }
  }
}
 8003874:	bf00      	nop
 8003876:	bf00      	nop
 8003878:	371c      	adds	r7, #28
 800387a:	46bd      	mov	sp, r7
 800387c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003880:	4770      	bx	lr
 8003882:	bf00      	nop
 8003884:	40013800 	.word	0x40013800
 8003888:	40020000 	.word	0x40020000
 800388c:	40020400 	.word	0x40020400
 8003890:	40020800 	.word	0x40020800
 8003894:	40020c00 	.word	0x40020c00
 8003898:	40021000 	.word	0x40021000
 800389c:	40021400 	.word	0x40021400
 80038a0:	40021800 	.word	0x40021800
 80038a4:	40021c00 	.word	0x40021c00
 80038a8:	40013c00 	.word	0x40013c00

080038ac <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80038ac:	b480      	push	{r7}
 80038ae:	b083      	sub	sp, #12
 80038b0:	af00      	add	r7, sp, #0
 80038b2:	6078      	str	r0, [r7, #4]
 80038b4:	460b      	mov	r3, r1
 80038b6:	807b      	strh	r3, [r7, #2]
 80038b8:	4613      	mov	r3, r2
 80038ba:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80038bc:	787b      	ldrb	r3, [r7, #1]
 80038be:	2b00      	cmp	r3, #0
 80038c0:	d003      	beq.n	80038ca <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80038c2:	887a      	ldrh	r2, [r7, #2]
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80038c8:	e003      	b.n	80038d2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80038ca:	887b      	ldrh	r3, [r7, #2]
 80038cc:	041a      	lsls	r2, r3, #16
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	619a      	str	r2, [r3, #24]
}
 80038d2:	bf00      	nop
 80038d4:	370c      	adds	r7, #12
 80038d6:	46bd      	mov	sp, r7
 80038d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038dc:	4770      	bx	lr

080038de <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80038de:	b480      	push	{r7}
 80038e0:	b085      	sub	sp, #20
 80038e2:	af00      	add	r7, sp, #0
 80038e4:	6078      	str	r0, [r7, #4]
 80038e6:	460b      	mov	r3, r1
 80038e8:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	695b      	ldr	r3, [r3, #20]
 80038ee:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80038f0:	887a      	ldrh	r2, [r7, #2]
 80038f2:	68fb      	ldr	r3, [r7, #12]
 80038f4:	4013      	ands	r3, r2
 80038f6:	041a      	lsls	r2, r3, #16
 80038f8:	68fb      	ldr	r3, [r7, #12]
 80038fa:	43d9      	mvns	r1, r3
 80038fc:	887b      	ldrh	r3, [r7, #2]
 80038fe:	400b      	ands	r3, r1
 8003900:	431a      	orrs	r2, r3
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	619a      	str	r2, [r3, #24]
}
 8003906:	bf00      	nop
 8003908:	3714      	adds	r7, #20
 800390a:	46bd      	mov	sp, r7
 800390c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003910:	4770      	bx	lr
	...

08003914 <HAL_PWR_EnableBkUpAccess>:
  *         in backup domain protection disabling/enabling after programming the
  *         DBP bit" section.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8003914:	b480      	push	{r7}
 8003916:	b083      	sub	sp, #12
 8003918:	af00      	add	r7, sp, #0
  __IO uint32_t dummyread;
  *(__IO uint32_t *) CR_DBP_BB = (uint32_t)ENABLE;
 800391a:	4b06      	ldr	r3, [pc, #24]	; (8003934 <HAL_PWR_EnableBkUpAccess+0x20>)
 800391c:	2201      	movs	r2, #1
 800391e:	601a      	str	r2, [r3, #0]
  dummyread = PWR->CR;
 8003920:	4b05      	ldr	r3, [pc, #20]	; (8003938 <HAL_PWR_EnableBkUpAccess+0x24>)
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	607b      	str	r3, [r7, #4]
  UNUSED(dummyread);
 8003926:	687b      	ldr	r3, [r7, #4]
}
 8003928:	bf00      	nop
 800392a:	370c      	adds	r7, #12
 800392c:	46bd      	mov	sp, r7
 800392e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003932:	4770      	bx	lr
 8003934:	420e0020 	.word	0x420e0020
 8003938:	40007000 	.word	0x40007000

0800393c <HAL_PWR_DisableBkUpAccess>:
  *         in backup domain protection disabling/enabling after programming the
  *         DBP bit" section.
  * @retval None
  */
void HAL_PWR_DisableBkUpAccess(void)
{
 800393c:	b480      	push	{r7}
 800393e:	b083      	sub	sp, #12
 8003940:	af00      	add	r7, sp, #0
  __IO uint32_t dummyread;
  *(__IO uint32_t *) CR_DBP_BB = (uint32_t)DISABLE;
 8003942:	4b06      	ldr	r3, [pc, #24]	; (800395c <HAL_PWR_DisableBkUpAccess+0x20>)
 8003944:	2200      	movs	r2, #0
 8003946:	601a      	str	r2, [r3, #0]
  dummyread = PWR->CR;
 8003948:	4b05      	ldr	r3, [pc, #20]	; (8003960 <HAL_PWR_DisableBkUpAccess+0x24>)
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	607b      	str	r3, [r7, #4]
  UNUSED(dummyread);
 800394e:	687b      	ldr	r3, [r7, #4]
}
 8003950:	bf00      	nop
 8003952:	370c      	adds	r7, #12
 8003954:	46bd      	mov	sp, r7
 8003956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800395a:	4770      	bx	lr
 800395c:	420e0020 	.word	0x420e0020
 8003960:	40007000 	.word	0x40007000

08003964 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003964:	b580      	push	{r7, lr}
 8003966:	b086      	sub	sp, #24
 8003968:	af00      	add	r7, sp, #0
 800396a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	2b00      	cmp	r3, #0
 8003970:	d101      	bne.n	8003976 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003972:	2301      	movs	r3, #1
 8003974:	e267      	b.n	8003e46 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	f003 0301 	and.w	r3, r3, #1
 800397e:	2b00      	cmp	r3, #0
 8003980:	d075      	beq.n	8003a6e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003982:	4b88      	ldr	r3, [pc, #544]	; (8003ba4 <HAL_RCC_OscConfig+0x240>)
 8003984:	689b      	ldr	r3, [r3, #8]
 8003986:	f003 030c 	and.w	r3, r3, #12
 800398a:	2b04      	cmp	r3, #4
 800398c:	d00c      	beq.n	80039a8 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800398e:	4b85      	ldr	r3, [pc, #532]	; (8003ba4 <HAL_RCC_OscConfig+0x240>)
 8003990:	689b      	ldr	r3, [r3, #8]
 8003992:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003996:	2b08      	cmp	r3, #8
 8003998:	d112      	bne.n	80039c0 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800399a:	4b82      	ldr	r3, [pc, #520]	; (8003ba4 <HAL_RCC_OscConfig+0x240>)
 800399c:	685b      	ldr	r3, [r3, #4]
 800399e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80039a2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80039a6:	d10b      	bne.n	80039c0 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80039a8:	4b7e      	ldr	r3, [pc, #504]	; (8003ba4 <HAL_RCC_OscConfig+0x240>)
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80039b0:	2b00      	cmp	r3, #0
 80039b2:	d05b      	beq.n	8003a6c <HAL_RCC_OscConfig+0x108>
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	685b      	ldr	r3, [r3, #4]
 80039b8:	2b00      	cmp	r3, #0
 80039ba:	d157      	bne.n	8003a6c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80039bc:	2301      	movs	r3, #1
 80039be:	e242      	b.n	8003e46 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	685b      	ldr	r3, [r3, #4]
 80039c4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80039c8:	d106      	bne.n	80039d8 <HAL_RCC_OscConfig+0x74>
 80039ca:	4b76      	ldr	r3, [pc, #472]	; (8003ba4 <HAL_RCC_OscConfig+0x240>)
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	4a75      	ldr	r2, [pc, #468]	; (8003ba4 <HAL_RCC_OscConfig+0x240>)
 80039d0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80039d4:	6013      	str	r3, [r2, #0]
 80039d6:	e01d      	b.n	8003a14 <HAL_RCC_OscConfig+0xb0>
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	685b      	ldr	r3, [r3, #4]
 80039dc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80039e0:	d10c      	bne.n	80039fc <HAL_RCC_OscConfig+0x98>
 80039e2:	4b70      	ldr	r3, [pc, #448]	; (8003ba4 <HAL_RCC_OscConfig+0x240>)
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	4a6f      	ldr	r2, [pc, #444]	; (8003ba4 <HAL_RCC_OscConfig+0x240>)
 80039e8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80039ec:	6013      	str	r3, [r2, #0]
 80039ee:	4b6d      	ldr	r3, [pc, #436]	; (8003ba4 <HAL_RCC_OscConfig+0x240>)
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	4a6c      	ldr	r2, [pc, #432]	; (8003ba4 <HAL_RCC_OscConfig+0x240>)
 80039f4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80039f8:	6013      	str	r3, [r2, #0]
 80039fa:	e00b      	b.n	8003a14 <HAL_RCC_OscConfig+0xb0>
 80039fc:	4b69      	ldr	r3, [pc, #420]	; (8003ba4 <HAL_RCC_OscConfig+0x240>)
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	4a68      	ldr	r2, [pc, #416]	; (8003ba4 <HAL_RCC_OscConfig+0x240>)
 8003a02:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003a06:	6013      	str	r3, [r2, #0]
 8003a08:	4b66      	ldr	r3, [pc, #408]	; (8003ba4 <HAL_RCC_OscConfig+0x240>)
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	4a65      	ldr	r2, [pc, #404]	; (8003ba4 <HAL_RCC_OscConfig+0x240>)
 8003a0e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003a12:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	685b      	ldr	r3, [r3, #4]
 8003a18:	2b00      	cmp	r3, #0
 8003a1a:	d013      	beq.n	8003a44 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003a1c:	f7fd fe84 	bl	8001728 <HAL_GetTick>
 8003a20:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003a22:	e008      	b.n	8003a36 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003a24:	f7fd fe80 	bl	8001728 <HAL_GetTick>
 8003a28:	4602      	mov	r2, r0
 8003a2a:	693b      	ldr	r3, [r7, #16]
 8003a2c:	1ad3      	subs	r3, r2, r3
 8003a2e:	2b64      	cmp	r3, #100	; 0x64
 8003a30:	d901      	bls.n	8003a36 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003a32:	2303      	movs	r3, #3
 8003a34:	e207      	b.n	8003e46 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003a36:	4b5b      	ldr	r3, [pc, #364]	; (8003ba4 <HAL_RCC_OscConfig+0x240>)
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a3e:	2b00      	cmp	r3, #0
 8003a40:	d0f0      	beq.n	8003a24 <HAL_RCC_OscConfig+0xc0>
 8003a42:	e014      	b.n	8003a6e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003a44:	f7fd fe70 	bl	8001728 <HAL_GetTick>
 8003a48:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003a4a:	e008      	b.n	8003a5e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003a4c:	f7fd fe6c 	bl	8001728 <HAL_GetTick>
 8003a50:	4602      	mov	r2, r0
 8003a52:	693b      	ldr	r3, [r7, #16]
 8003a54:	1ad3      	subs	r3, r2, r3
 8003a56:	2b64      	cmp	r3, #100	; 0x64
 8003a58:	d901      	bls.n	8003a5e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003a5a:	2303      	movs	r3, #3
 8003a5c:	e1f3      	b.n	8003e46 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003a5e:	4b51      	ldr	r3, [pc, #324]	; (8003ba4 <HAL_RCC_OscConfig+0x240>)
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a66:	2b00      	cmp	r3, #0
 8003a68:	d1f0      	bne.n	8003a4c <HAL_RCC_OscConfig+0xe8>
 8003a6a:	e000      	b.n	8003a6e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003a6c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	f003 0302 	and.w	r3, r3, #2
 8003a76:	2b00      	cmp	r3, #0
 8003a78:	d063      	beq.n	8003b42 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003a7a:	4b4a      	ldr	r3, [pc, #296]	; (8003ba4 <HAL_RCC_OscConfig+0x240>)
 8003a7c:	689b      	ldr	r3, [r3, #8]
 8003a7e:	f003 030c 	and.w	r3, r3, #12
 8003a82:	2b00      	cmp	r3, #0
 8003a84:	d00b      	beq.n	8003a9e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003a86:	4b47      	ldr	r3, [pc, #284]	; (8003ba4 <HAL_RCC_OscConfig+0x240>)
 8003a88:	689b      	ldr	r3, [r3, #8]
 8003a8a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003a8e:	2b08      	cmp	r3, #8
 8003a90:	d11c      	bne.n	8003acc <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003a92:	4b44      	ldr	r3, [pc, #272]	; (8003ba4 <HAL_RCC_OscConfig+0x240>)
 8003a94:	685b      	ldr	r3, [r3, #4]
 8003a96:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003a9a:	2b00      	cmp	r3, #0
 8003a9c:	d116      	bne.n	8003acc <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003a9e:	4b41      	ldr	r3, [pc, #260]	; (8003ba4 <HAL_RCC_OscConfig+0x240>)
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	f003 0302 	and.w	r3, r3, #2
 8003aa6:	2b00      	cmp	r3, #0
 8003aa8:	d005      	beq.n	8003ab6 <HAL_RCC_OscConfig+0x152>
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	68db      	ldr	r3, [r3, #12]
 8003aae:	2b01      	cmp	r3, #1
 8003ab0:	d001      	beq.n	8003ab6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003ab2:	2301      	movs	r3, #1
 8003ab4:	e1c7      	b.n	8003e46 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003ab6:	4b3b      	ldr	r3, [pc, #236]	; (8003ba4 <HAL_RCC_OscConfig+0x240>)
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	691b      	ldr	r3, [r3, #16]
 8003ac2:	00db      	lsls	r3, r3, #3
 8003ac4:	4937      	ldr	r1, [pc, #220]	; (8003ba4 <HAL_RCC_OscConfig+0x240>)
 8003ac6:	4313      	orrs	r3, r2
 8003ac8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003aca:	e03a      	b.n	8003b42 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	68db      	ldr	r3, [r3, #12]
 8003ad0:	2b00      	cmp	r3, #0
 8003ad2:	d020      	beq.n	8003b16 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003ad4:	4b34      	ldr	r3, [pc, #208]	; (8003ba8 <HAL_RCC_OscConfig+0x244>)
 8003ad6:	2201      	movs	r2, #1
 8003ad8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ada:	f7fd fe25 	bl	8001728 <HAL_GetTick>
 8003ade:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003ae0:	e008      	b.n	8003af4 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003ae2:	f7fd fe21 	bl	8001728 <HAL_GetTick>
 8003ae6:	4602      	mov	r2, r0
 8003ae8:	693b      	ldr	r3, [r7, #16]
 8003aea:	1ad3      	subs	r3, r2, r3
 8003aec:	2b02      	cmp	r3, #2
 8003aee:	d901      	bls.n	8003af4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003af0:	2303      	movs	r3, #3
 8003af2:	e1a8      	b.n	8003e46 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003af4:	4b2b      	ldr	r3, [pc, #172]	; (8003ba4 <HAL_RCC_OscConfig+0x240>)
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	f003 0302 	and.w	r3, r3, #2
 8003afc:	2b00      	cmp	r3, #0
 8003afe:	d0f0      	beq.n	8003ae2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003b00:	4b28      	ldr	r3, [pc, #160]	; (8003ba4 <HAL_RCC_OscConfig+0x240>)
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	691b      	ldr	r3, [r3, #16]
 8003b0c:	00db      	lsls	r3, r3, #3
 8003b0e:	4925      	ldr	r1, [pc, #148]	; (8003ba4 <HAL_RCC_OscConfig+0x240>)
 8003b10:	4313      	orrs	r3, r2
 8003b12:	600b      	str	r3, [r1, #0]
 8003b14:	e015      	b.n	8003b42 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003b16:	4b24      	ldr	r3, [pc, #144]	; (8003ba8 <HAL_RCC_OscConfig+0x244>)
 8003b18:	2200      	movs	r2, #0
 8003b1a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b1c:	f7fd fe04 	bl	8001728 <HAL_GetTick>
 8003b20:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003b22:	e008      	b.n	8003b36 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003b24:	f7fd fe00 	bl	8001728 <HAL_GetTick>
 8003b28:	4602      	mov	r2, r0
 8003b2a:	693b      	ldr	r3, [r7, #16]
 8003b2c:	1ad3      	subs	r3, r2, r3
 8003b2e:	2b02      	cmp	r3, #2
 8003b30:	d901      	bls.n	8003b36 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003b32:	2303      	movs	r3, #3
 8003b34:	e187      	b.n	8003e46 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003b36:	4b1b      	ldr	r3, [pc, #108]	; (8003ba4 <HAL_RCC_OscConfig+0x240>)
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	f003 0302 	and.w	r3, r3, #2
 8003b3e:	2b00      	cmp	r3, #0
 8003b40:	d1f0      	bne.n	8003b24 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	f003 0308 	and.w	r3, r3, #8
 8003b4a:	2b00      	cmp	r3, #0
 8003b4c:	d036      	beq.n	8003bbc <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	695b      	ldr	r3, [r3, #20]
 8003b52:	2b00      	cmp	r3, #0
 8003b54:	d016      	beq.n	8003b84 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003b56:	4b15      	ldr	r3, [pc, #84]	; (8003bac <HAL_RCC_OscConfig+0x248>)
 8003b58:	2201      	movs	r2, #1
 8003b5a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003b5c:	f7fd fde4 	bl	8001728 <HAL_GetTick>
 8003b60:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003b62:	e008      	b.n	8003b76 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003b64:	f7fd fde0 	bl	8001728 <HAL_GetTick>
 8003b68:	4602      	mov	r2, r0
 8003b6a:	693b      	ldr	r3, [r7, #16]
 8003b6c:	1ad3      	subs	r3, r2, r3
 8003b6e:	2b02      	cmp	r3, #2
 8003b70:	d901      	bls.n	8003b76 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003b72:	2303      	movs	r3, #3
 8003b74:	e167      	b.n	8003e46 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003b76:	4b0b      	ldr	r3, [pc, #44]	; (8003ba4 <HAL_RCC_OscConfig+0x240>)
 8003b78:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003b7a:	f003 0302 	and.w	r3, r3, #2
 8003b7e:	2b00      	cmp	r3, #0
 8003b80:	d0f0      	beq.n	8003b64 <HAL_RCC_OscConfig+0x200>
 8003b82:	e01b      	b.n	8003bbc <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003b84:	4b09      	ldr	r3, [pc, #36]	; (8003bac <HAL_RCC_OscConfig+0x248>)
 8003b86:	2200      	movs	r2, #0
 8003b88:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003b8a:	f7fd fdcd 	bl	8001728 <HAL_GetTick>
 8003b8e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003b90:	e00e      	b.n	8003bb0 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003b92:	f7fd fdc9 	bl	8001728 <HAL_GetTick>
 8003b96:	4602      	mov	r2, r0
 8003b98:	693b      	ldr	r3, [r7, #16]
 8003b9a:	1ad3      	subs	r3, r2, r3
 8003b9c:	2b02      	cmp	r3, #2
 8003b9e:	d907      	bls.n	8003bb0 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003ba0:	2303      	movs	r3, #3
 8003ba2:	e150      	b.n	8003e46 <HAL_RCC_OscConfig+0x4e2>
 8003ba4:	40023800 	.word	0x40023800
 8003ba8:	42470000 	.word	0x42470000
 8003bac:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003bb0:	4b88      	ldr	r3, [pc, #544]	; (8003dd4 <HAL_RCC_OscConfig+0x470>)
 8003bb2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003bb4:	f003 0302 	and.w	r3, r3, #2
 8003bb8:	2b00      	cmp	r3, #0
 8003bba:	d1ea      	bne.n	8003b92 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	f003 0304 	and.w	r3, r3, #4
 8003bc4:	2b00      	cmp	r3, #0
 8003bc6:	f000 8097 	beq.w	8003cf8 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003bca:	2300      	movs	r3, #0
 8003bcc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003bce:	4b81      	ldr	r3, [pc, #516]	; (8003dd4 <HAL_RCC_OscConfig+0x470>)
 8003bd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bd2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003bd6:	2b00      	cmp	r3, #0
 8003bd8:	d10f      	bne.n	8003bfa <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003bda:	2300      	movs	r3, #0
 8003bdc:	60bb      	str	r3, [r7, #8]
 8003bde:	4b7d      	ldr	r3, [pc, #500]	; (8003dd4 <HAL_RCC_OscConfig+0x470>)
 8003be0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003be2:	4a7c      	ldr	r2, [pc, #496]	; (8003dd4 <HAL_RCC_OscConfig+0x470>)
 8003be4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003be8:	6413      	str	r3, [r2, #64]	; 0x40
 8003bea:	4b7a      	ldr	r3, [pc, #488]	; (8003dd4 <HAL_RCC_OscConfig+0x470>)
 8003bec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003bf2:	60bb      	str	r3, [r7, #8]
 8003bf4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003bf6:	2301      	movs	r3, #1
 8003bf8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003bfa:	4b77      	ldr	r3, [pc, #476]	; (8003dd8 <HAL_RCC_OscConfig+0x474>)
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003c02:	2b00      	cmp	r3, #0
 8003c04:	d118      	bne.n	8003c38 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003c06:	4b74      	ldr	r3, [pc, #464]	; (8003dd8 <HAL_RCC_OscConfig+0x474>)
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	4a73      	ldr	r2, [pc, #460]	; (8003dd8 <HAL_RCC_OscConfig+0x474>)
 8003c0c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003c10:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003c12:	f7fd fd89 	bl	8001728 <HAL_GetTick>
 8003c16:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003c18:	e008      	b.n	8003c2c <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003c1a:	f7fd fd85 	bl	8001728 <HAL_GetTick>
 8003c1e:	4602      	mov	r2, r0
 8003c20:	693b      	ldr	r3, [r7, #16]
 8003c22:	1ad3      	subs	r3, r2, r3
 8003c24:	2b02      	cmp	r3, #2
 8003c26:	d901      	bls.n	8003c2c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003c28:	2303      	movs	r3, #3
 8003c2a:	e10c      	b.n	8003e46 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003c2c:	4b6a      	ldr	r3, [pc, #424]	; (8003dd8 <HAL_RCC_OscConfig+0x474>)
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003c34:	2b00      	cmp	r3, #0
 8003c36:	d0f0      	beq.n	8003c1a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	689b      	ldr	r3, [r3, #8]
 8003c3c:	2b01      	cmp	r3, #1
 8003c3e:	d106      	bne.n	8003c4e <HAL_RCC_OscConfig+0x2ea>
 8003c40:	4b64      	ldr	r3, [pc, #400]	; (8003dd4 <HAL_RCC_OscConfig+0x470>)
 8003c42:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c44:	4a63      	ldr	r2, [pc, #396]	; (8003dd4 <HAL_RCC_OscConfig+0x470>)
 8003c46:	f043 0301 	orr.w	r3, r3, #1
 8003c4a:	6713      	str	r3, [r2, #112]	; 0x70
 8003c4c:	e01c      	b.n	8003c88 <HAL_RCC_OscConfig+0x324>
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	689b      	ldr	r3, [r3, #8]
 8003c52:	2b05      	cmp	r3, #5
 8003c54:	d10c      	bne.n	8003c70 <HAL_RCC_OscConfig+0x30c>
 8003c56:	4b5f      	ldr	r3, [pc, #380]	; (8003dd4 <HAL_RCC_OscConfig+0x470>)
 8003c58:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c5a:	4a5e      	ldr	r2, [pc, #376]	; (8003dd4 <HAL_RCC_OscConfig+0x470>)
 8003c5c:	f043 0304 	orr.w	r3, r3, #4
 8003c60:	6713      	str	r3, [r2, #112]	; 0x70
 8003c62:	4b5c      	ldr	r3, [pc, #368]	; (8003dd4 <HAL_RCC_OscConfig+0x470>)
 8003c64:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c66:	4a5b      	ldr	r2, [pc, #364]	; (8003dd4 <HAL_RCC_OscConfig+0x470>)
 8003c68:	f043 0301 	orr.w	r3, r3, #1
 8003c6c:	6713      	str	r3, [r2, #112]	; 0x70
 8003c6e:	e00b      	b.n	8003c88 <HAL_RCC_OscConfig+0x324>
 8003c70:	4b58      	ldr	r3, [pc, #352]	; (8003dd4 <HAL_RCC_OscConfig+0x470>)
 8003c72:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c74:	4a57      	ldr	r2, [pc, #348]	; (8003dd4 <HAL_RCC_OscConfig+0x470>)
 8003c76:	f023 0301 	bic.w	r3, r3, #1
 8003c7a:	6713      	str	r3, [r2, #112]	; 0x70
 8003c7c:	4b55      	ldr	r3, [pc, #340]	; (8003dd4 <HAL_RCC_OscConfig+0x470>)
 8003c7e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c80:	4a54      	ldr	r2, [pc, #336]	; (8003dd4 <HAL_RCC_OscConfig+0x470>)
 8003c82:	f023 0304 	bic.w	r3, r3, #4
 8003c86:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	689b      	ldr	r3, [r3, #8]
 8003c8c:	2b00      	cmp	r3, #0
 8003c8e:	d015      	beq.n	8003cbc <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003c90:	f7fd fd4a 	bl	8001728 <HAL_GetTick>
 8003c94:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003c96:	e00a      	b.n	8003cae <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003c98:	f7fd fd46 	bl	8001728 <HAL_GetTick>
 8003c9c:	4602      	mov	r2, r0
 8003c9e:	693b      	ldr	r3, [r7, #16]
 8003ca0:	1ad3      	subs	r3, r2, r3
 8003ca2:	f241 3288 	movw	r2, #5000	; 0x1388
 8003ca6:	4293      	cmp	r3, r2
 8003ca8:	d901      	bls.n	8003cae <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8003caa:	2303      	movs	r3, #3
 8003cac:	e0cb      	b.n	8003e46 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003cae:	4b49      	ldr	r3, [pc, #292]	; (8003dd4 <HAL_RCC_OscConfig+0x470>)
 8003cb0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003cb2:	f003 0302 	and.w	r3, r3, #2
 8003cb6:	2b00      	cmp	r3, #0
 8003cb8:	d0ee      	beq.n	8003c98 <HAL_RCC_OscConfig+0x334>
 8003cba:	e014      	b.n	8003ce6 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003cbc:	f7fd fd34 	bl	8001728 <HAL_GetTick>
 8003cc0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003cc2:	e00a      	b.n	8003cda <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003cc4:	f7fd fd30 	bl	8001728 <HAL_GetTick>
 8003cc8:	4602      	mov	r2, r0
 8003cca:	693b      	ldr	r3, [r7, #16]
 8003ccc:	1ad3      	subs	r3, r2, r3
 8003cce:	f241 3288 	movw	r2, #5000	; 0x1388
 8003cd2:	4293      	cmp	r3, r2
 8003cd4:	d901      	bls.n	8003cda <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8003cd6:	2303      	movs	r3, #3
 8003cd8:	e0b5      	b.n	8003e46 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003cda:	4b3e      	ldr	r3, [pc, #248]	; (8003dd4 <HAL_RCC_OscConfig+0x470>)
 8003cdc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003cde:	f003 0302 	and.w	r3, r3, #2
 8003ce2:	2b00      	cmp	r3, #0
 8003ce4:	d1ee      	bne.n	8003cc4 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003ce6:	7dfb      	ldrb	r3, [r7, #23]
 8003ce8:	2b01      	cmp	r3, #1
 8003cea:	d105      	bne.n	8003cf8 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003cec:	4b39      	ldr	r3, [pc, #228]	; (8003dd4 <HAL_RCC_OscConfig+0x470>)
 8003cee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cf0:	4a38      	ldr	r2, [pc, #224]	; (8003dd4 <HAL_RCC_OscConfig+0x470>)
 8003cf2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003cf6:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	699b      	ldr	r3, [r3, #24]
 8003cfc:	2b00      	cmp	r3, #0
 8003cfe:	f000 80a1 	beq.w	8003e44 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003d02:	4b34      	ldr	r3, [pc, #208]	; (8003dd4 <HAL_RCC_OscConfig+0x470>)
 8003d04:	689b      	ldr	r3, [r3, #8]
 8003d06:	f003 030c 	and.w	r3, r3, #12
 8003d0a:	2b08      	cmp	r3, #8
 8003d0c:	d05c      	beq.n	8003dc8 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	699b      	ldr	r3, [r3, #24]
 8003d12:	2b02      	cmp	r3, #2
 8003d14:	d141      	bne.n	8003d9a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003d16:	4b31      	ldr	r3, [pc, #196]	; (8003ddc <HAL_RCC_OscConfig+0x478>)
 8003d18:	2200      	movs	r2, #0
 8003d1a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003d1c:	f7fd fd04 	bl	8001728 <HAL_GetTick>
 8003d20:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003d22:	e008      	b.n	8003d36 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003d24:	f7fd fd00 	bl	8001728 <HAL_GetTick>
 8003d28:	4602      	mov	r2, r0
 8003d2a:	693b      	ldr	r3, [r7, #16]
 8003d2c:	1ad3      	subs	r3, r2, r3
 8003d2e:	2b02      	cmp	r3, #2
 8003d30:	d901      	bls.n	8003d36 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8003d32:	2303      	movs	r3, #3
 8003d34:	e087      	b.n	8003e46 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003d36:	4b27      	ldr	r3, [pc, #156]	; (8003dd4 <HAL_RCC_OscConfig+0x470>)
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003d3e:	2b00      	cmp	r3, #0
 8003d40:	d1f0      	bne.n	8003d24 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	69da      	ldr	r2, [r3, #28]
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	6a1b      	ldr	r3, [r3, #32]
 8003d4a:	431a      	orrs	r2, r3
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d50:	019b      	lsls	r3, r3, #6
 8003d52:	431a      	orrs	r2, r3
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d58:	085b      	lsrs	r3, r3, #1
 8003d5a:	3b01      	subs	r3, #1
 8003d5c:	041b      	lsls	r3, r3, #16
 8003d5e:	431a      	orrs	r2, r3
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d64:	061b      	lsls	r3, r3, #24
 8003d66:	491b      	ldr	r1, [pc, #108]	; (8003dd4 <HAL_RCC_OscConfig+0x470>)
 8003d68:	4313      	orrs	r3, r2
 8003d6a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003d6c:	4b1b      	ldr	r3, [pc, #108]	; (8003ddc <HAL_RCC_OscConfig+0x478>)
 8003d6e:	2201      	movs	r2, #1
 8003d70:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003d72:	f7fd fcd9 	bl	8001728 <HAL_GetTick>
 8003d76:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003d78:	e008      	b.n	8003d8c <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003d7a:	f7fd fcd5 	bl	8001728 <HAL_GetTick>
 8003d7e:	4602      	mov	r2, r0
 8003d80:	693b      	ldr	r3, [r7, #16]
 8003d82:	1ad3      	subs	r3, r2, r3
 8003d84:	2b02      	cmp	r3, #2
 8003d86:	d901      	bls.n	8003d8c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003d88:	2303      	movs	r3, #3
 8003d8a:	e05c      	b.n	8003e46 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003d8c:	4b11      	ldr	r3, [pc, #68]	; (8003dd4 <HAL_RCC_OscConfig+0x470>)
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003d94:	2b00      	cmp	r3, #0
 8003d96:	d0f0      	beq.n	8003d7a <HAL_RCC_OscConfig+0x416>
 8003d98:	e054      	b.n	8003e44 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003d9a:	4b10      	ldr	r3, [pc, #64]	; (8003ddc <HAL_RCC_OscConfig+0x478>)
 8003d9c:	2200      	movs	r2, #0
 8003d9e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003da0:	f7fd fcc2 	bl	8001728 <HAL_GetTick>
 8003da4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003da6:	e008      	b.n	8003dba <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003da8:	f7fd fcbe 	bl	8001728 <HAL_GetTick>
 8003dac:	4602      	mov	r2, r0
 8003dae:	693b      	ldr	r3, [r7, #16]
 8003db0:	1ad3      	subs	r3, r2, r3
 8003db2:	2b02      	cmp	r3, #2
 8003db4:	d901      	bls.n	8003dba <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8003db6:	2303      	movs	r3, #3
 8003db8:	e045      	b.n	8003e46 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003dba:	4b06      	ldr	r3, [pc, #24]	; (8003dd4 <HAL_RCC_OscConfig+0x470>)
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003dc2:	2b00      	cmp	r3, #0
 8003dc4:	d1f0      	bne.n	8003da8 <HAL_RCC_OscConfig+0x444>
 8003dc6:	e03d      	b.n	8003e44 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	699b      	ldr	r3, [r3, #24]
 8003dcc:	2b01      	cmp	r3, #1
 8003dce:	d107      	bne.n	8003de0 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003dd0:	2301      	movs	r3, #1
 8003dd2:	e038      	b.n	8003e46 <HAL_RCC_OscConfig+0x4e2>
 8003dd4:	40023800 	.word	0x40023800
 8003dd8:	40007000 	.word	0x40007000
 8003ddc:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003de0:	4b1b      	ldr	r3, [pc, #108]	; (8003e50 <HAL_RCC_OscConfig+0x4ec>)
 8003de2:	685b      	ldr	r3, [r3, #4]
 8003de4:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	699b      	ldr	r3, [r3, #24]
 8003dea:	2b01      	cmp	r3, #1
 8003dec:	d028      	beq.n	8003e40 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003dee:	68fb      	ldr	r3, [r7, #12]
 8003df0:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003df8:	429a      	cmp	r2, r3
 8003dfa:	d121      	bne.n	8003e40 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003dfc:	68fb      	ldr	r3, [r7, #12]
 8003dfe:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003e06:	429a      	cmp	r2, r3
 8003e08:	d11a      	bne.n	8003e40 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003e0a:	68fa      	ldr	r2, [r7, #12]
 8003e0c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003e10:	4013      	ands	r3, r2
 8003e12:	687a      	ldr	r2, [r7, #4]
 8003e14:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003e16:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003e18:	4293      	cmp	r3, r2
 8003e1a:	d111      	bne.n	8003e40 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003e1c:	68fb      	ldr	r3, [r7, #12]
 8003e1e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e26:	085b      	lsrs	r3, r3, #1
 8003e28:	3b01      	subs	r3, #1
 8003e2a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003e2c:	429a      	cmp	r2, r3
 8003e2e:	d107      	bne.n	8003e40 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003e30:	68fb      	ldr	r3, [r7, #12]
 8003e32:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e3a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003e3c:	429a      	cmp	r2, r3
 8003e3e:	d001      	beq.n	8003e44 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8003e40:	2301      	movs	r3, #1
 8003e42:	e000      	b.n	8003e46 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003e44:	2300      	movs	r3, #0
}
 8003e46:	4618      	mov	r0, r3
 8003e48:	3718      	adds	r7, #24
 8003e4a:	46bd      	mov	sp, r7
 8003e4c:	bd80      	pop	{r7, pc}
 8003e4e:	bf00      	nop
 8003e50:	40023800 	.word	0x40023800

08003e54 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003e54:	b580      	push	{r7, lr}
 8003e56:	b084      	sub	sp, #16
 8003e58:	af00      	add	r7, sp, #0
 8003e5a:	6078      	str	r0, [r7, #4]
 8003e5c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	2b00      	cmp	r3, #0
 8003e62:	d101      	bne.n	8003e68 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003e64:	2301      	movs	r3, #1
 8003e66:	e0cc      	b.n	8004002 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003e68:	4b68      	ldr	r3, [pc, #416]	; (800400c <HAL_RCC_ClockConfig+0x1b8>)
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	f003 0307 	and.w	r3, r3, #7
 8003e70:	683a      	ldr	r2, [r7, #0]
 8003e72:	429a      	cmp	r2, r3
 8003e74:	d90c      	bls.n	8003e90 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003e76:	4b65      	ldr	r3, [pc, #404]	; (800400c <HAL_RCC_ClockConfig+0x1b8>)
 8003e78:	683a      	ldr	r2, [r7, #0]
 8003e7a:	b2d2      	uxtb	r2, r2
 8003e7c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003e7e:	4b63      	ldr	r3, [pc, #396]	; (800400c <HAL_RCC_ClockConfig+0x1b8>)
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	f003 0307 	and.w	r3, r3, #7
 8003e86:	683a      	ldr	r2, [r7, #0]
 8003e88:	429a      	cmp	r2, r3
 8003e8a:	d001      	beq.n	8003e90 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003e8c:	2301      	movs	r3, #1
 8003e8e:	e0b8      	b.n	8004002 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	f003 0302 	and.w	r3, r3, #2
 8003e98:	2b00      	cmp	r3, #0
 8003e9a:	d020      	beq.n	8003ede <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	f003 0304 	and.w	r3, r3, #4
 8003ea4:	2b00      	cmp	r3, #0
 8003ea6:	d005      	beq.n	8003eb4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003ea8:	4b59      	ldr	r3, [pc, #356]	; (8004010 <HAL_RCC_ClockConfig+0x1bc>)
 8003eaa:	689b      	ldr	r3, [r3, #8]
 8003eac:	4a58      	ldr	r2, [pc, #352]	; (8004010 <HAL_RCC_ClockConfig+0x1bc>)
 8003eae:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003eb2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	f003 0308 	and.w	r3, r3, #8
 8003ebc:	2b00      	cmp	r3, #0
 8003ebe:	d005      	beq.n	8003ecc <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003ec0:	4b53      	ldr	r3, [pc, #332]	; (8004010 <HAL_RCC_ClockConfig+0x1bc>)
 8003ec2:	689b      	ldr	r3, [r3, #8]
 8003ec4:	4a52      	ldr	r2, [pc, #328]	; (8004010 <HAL_RCC_ClockConfig+0x1bc>)
 8003ec6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003eca:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003ecc:	4b50      	ldr	r3, [pc, #320]	; (8004010 <HAL_RCC_ClockConfig+0x1bc>)
 8003ece:	689b      	ldr	r3, [r3, #8]
 8003ed0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	689b      	ldr	r3, [r3, #8]
 8003ed8:	494d      	ldr	r1, [pc, #308]	; (8004010 <HAL_RCC_ClockConfig+0x1bc>)
 8003eda:	4313      	orrs	r3, r2
 8003edc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	f003 0301 	and.w	r3, r3, #1
 8003ee6:	2b00      	cmp	r3, #0
 8003ee8:	d044      	beq.n	8003f74 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	685b      	ldr	r3, [r3, #4]
 8003eee:	2b01      	cmp	r3, #1
 8003ef0:	d107      	bne.n	8003f02 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003ef2:	4b47      	ldr	r3, [pc, #284]	; (8004010 <HAL_RCC_ClockConfig+0x1bc>)
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003efa:	2b00      	cmp	r3, #0
 8003efc:	d119      	bne.n	8003f32 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003efe:	2301      	movs	r3, #1
 8003f00:	e07f      	b.n	8004002 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	685b      	ldr	r3, [r3, #4]
 8003f06:	2b02      	cmp	r3, #2
 8003f08:	d003      	beq.n	8003f12 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003f0e:	2b03      	cmp	r3, #3
 8003f10:	d107      	bne.n	8003f22 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003f12:	4b3f      	ldr	r3, [pc, #252]	; (8004010 <HAL_RCC_ClockConfig+0x1bc>)
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003f1a:	2b00      	cmp	r3, #0
 8003f1c:	d109      	bne.n	8003f32 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003f1e:	2301      	movs	r3, #1
 8003f20:	e06f      	b.n	8004002 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003f22:	4b3b      	ldr	r3, [pc, #236]	; (8004010 <HAL_RCC_ClockConfig+0x1bc>)
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	f003 0302 	and.w	r3, r3, #2
 8003f2a:	2b00      	cmp	r3, #0
 8003f2c:	d101      	bne.n	8003f32 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003f2e:	2301      	movs	r3, #1
 8003f30:	e067      	b.n	8004002 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003f32:	4b37      	ldr	r3, [pc, #220]	; (8004010 <HAL_RCC_ClockConfig+0x1bc>)
 8003f34:	689b      	ldr	r3, [r3, #8]
 8003f36:	f023 0203 	bic.w	r2, r3, #3
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	685b      	ldr	r3, [r3, #4]
 8003f3e:	4934      	ldr	r1, [pc, #208]	; (8004010 <HAL_RCC_ClockConfig+0x1bc>)
 8003f40:	4313      	orrs	r3, r2
 8003f42:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003f44:	f7fd fbf0 	bl	8001728 <HAL_GetTick>
 8003f48:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003f4a:	e00a      	b.n	8003f62 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003f4c:	f7fd fbec 	bl	8001728 <HAL_GetTick>
 8003f50:	4602      	mov	r2, r0
 8003f52:	68fb      	ldr	r3, [r7, #12]
 8003f54:	1ad3      	subs	r3, r2, r3
 8003f56:	f241 3288 	movw	r2, #5000	; 0x1388
 8003f5a:	4293      	cmp	r3, r2
 8003f5c:	d901      	bls.n	8003f62 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003f5e:	2303      	movs	r3, #3
 8003f60:	e04f      	b.n	8004002 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003f62:	4b2b      	ldr	r3, [pc, #172]	; (8004010 <HAL_RCC_ClockConfig+0x1bc>)
 8003f64:	689b      	ldr	r3, [r3, #8]
 8003f66:	f003 020c 	and.w	r2, r3, #12
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	685b      	ldr	r3, [r3, #4]
 8003f6e:	009b      	lsls	r3, r3, #2
 8003f70:	429a      	cmp	r2, r3
 8003f72:	d1eb      	bne.n	8003f4c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003f74:	4b25      	ldr	r3, [pc, #148]	; (800400c <HAL_RCC_ClockConfig+0x1b8>)
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	f003 0307 	and.w	r3, r3, #7
 8003f7c:	683a      	ldr	r2, [r7, #0]
 8003f7e:	429a      	cmp	r2, r3
 8003f80:	d20c      	bcs.n	8003f9c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003f82:	4b22      	ldr	r3, [pc, #136]	; (800400c <HAL_RCC_ClockConfig+0x1b8>)
 8003f84:	683a      	ldr	r2, [r7, #0]
 8003f86:	b2d2      	uxtb	r2, r2
 8003f88:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003f8a:	4b20      	ldr	r3, [pc, #128]	; (800400c <HAL_RCC_ClockConfig+0x1b8>)
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	f003 0307 	and.w	r3, r3, #7
 8003f92:	683a      	ldr	r2, [r7, #0]
 8003f94:	429a      	cmp	r2, r3
 8003f96:	d001      	beq.n	8003f9c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003f98:	2301      	movs	r3, #1
 8003f9a:	e032      	b.n	8004002 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	f003 0304 	and.w	r3, r3, #4
 8003fa4:	2b00      	cmp	r3, #0
 8003fa6:	d008      	beq.n	8003fba <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003fa8:	4b19      	ldr	r3, [pc, #100]	; (8004010 <HAL_RCC_ClockConfig+0x1bc>)
 8003faa:	689b      	ldr	r3, [r3, #8]
 8003fac:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	68db      	ldr	r3, [r3, #12]
 8003fb4:	4916      	ldr	r1, [pc, #88]	; (8004010 <HAL_RCC_ClockConfig+0x1bc>)
 8003fb6:	4313      	orrs	r3, r2
 8003fb8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	f003 0308 	and.w	r3, r3, #8
 8003fc2:	2b00      	cmp	r3, #0
 8003fc4:	d009      	beq.n	8003fda <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003fc6:	4b12      	ldr	r3, [pc, #72]	; (8004010 <HAL_RCC_ClockConfig+0x1bc>)
 8003fc8:	689b      	ldr	r3, [r3, #8]
 8003fca:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	691b      	ldr	r3, [r3, #16]
 8003fd2:	00db      	lsls	r3, r3, #3
 8003fd4:	490e      	ldr	r1, [pc, #56]	; (8004010 <HAL_RCC_ClockConfig+0x1bc>)
 8003fd6:	4313      	orrs	r3, r2
 8003fd8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003fda:	f000 f821 	bl	8004020 <HAL_RCC_GetSysClockFreq>
 8003fde:	4602      	mov	r2, r0
 8003fe0:	4b0b      	ldr	r3, [pc, #44]	; (8004010 <HAL_RCC_ClockConfig+0x1bc>)
 8003fe2:	689b      	ldr	r3, [r3, #8]
 8003fe4:	091b      	lsrs	r3, r3, #4
 8003fe6:	f003 030f 	and.w	r3, r3, #15
 8003fea:	490a      	ldr	r1, [pc, #40]	; (8004014 <HAL_RCC_ClockConfig+0x1c0>)
 8003fec:	5ccb      	ldrb	r3, [r1, r3]
 8003fee:	fa22 f303 	lsr.w	r3, r2, r3
 8003ff2:	4a09      	ldr	r2, [pc, #36]	; (8004018 <HAL_RCC_ClockConfig+0x1c4>)
 8003ff4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003ff6:	4b09      	ldr	r3, [pc, #36]	; (800401c <HAL_RCC_ClockConfig+0x1c8>)
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	4618      	mov	r0, r3
 8003ffc:	f7fc fdae 	bl	8000b5c <HAL_InitTick>

  return HAL_OK;
 8004000:	2300      	movs	r3, #0
}
 8004002:	4618      	mov	r0, r3
 8004004:	3710      	adds	r7, #16
 8004006:	46bd      	mov	sp, r7
 8004008:	bd80      	pop	{r7, pc}
 800400a:	bf00      	nop
 800400c:	40023c00 	.word	0x40023c00
 8004010:	40023800 	.word	0x40023800
 8004014:	08017354 	.word	0x08017354
 8004018:	20000000 	.word	0x20000000
 800401c:	20000004 	.word	0x20000004

08004020 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004020:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004024:	b090      	sub	sp, #64	; 0x40
 8004026:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8004028:	2300      	movs	r3, #0
 800402a:	637b      	str	r3, [r7, #52]	; 0x34
 800402c:	2300      	movs	r3, #0
 800402e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004030:	2300      	movs	r3, #0
 8004032:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8004034:	2300      	movs	r3, #0
 8004036:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004038:	4b59      	ldr	r3, [pc, #356]	; (80041a0 <HAL_RCC_GetSysClockFreq+0x180>)
 800403a:	689b      	ldr	r3, [r3, #8]
 800403c:	f003 030c 	and.w	r3, r3, #12
 8004040:	2b08      	cmp	r3, #8
 8004042:	d00d      	beq.n	8004060 <HAL_RCC_GetSysClockFreq+0x40>
 8004044:	2b08      	cmp	r3, #8
 8004046:	f200 80a1 	bhi.w	800418c <HAL_RCC_GetSysClockFreq+0x16c>
 800404a:	2b00      	cmp	r3, #0
 800404c:	d002      	beq.n	8004054 <HAL_RCC_GetSysClockFreq+0x34>
 800404e:	2b04      	cmp	r3, #4
 8004050:	d003      	beq.n	800405a <HAL_RCC_GetSysClockFreq+0x3a>
 8004052:	e09b      	b.n	800418c <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004054:	4b53      	ldr	r3, [pc, #332]	; (80041a4 <HAL_RCC_GetSysClockFreq+0x184>)
 8004056:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8004058:	e09b      	b.n	8004192 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800405a:	4b53      	ldr	r3, [pc, #332]	; (80041a8 <HAL_RCC_GetSysClockFreq+0x188>)
 800405c:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800405e:	e098      	b.n	8004192 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004060:	4b4f      	ldr	r3, [pc, #316]	; (80041a0 <HAL_RCC_GetSysClockFreq+0x180>)
 8004062:	685b      	ldr	r3, [r3, #4]
 8004064:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004068:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800406a:	4b4d      	ldr	r3, [pc, #308]	; (80041a0 <HAL_RCC_GetSysClockFreq+0x180>)
 800406c:	685b      	ldr	r3, [r3, #4]
 800406e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004072:	2b00      	cmp	r3, #0
 8004074:	d028      	beq.n	80040c8 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004076:	4b4a      	ldr	r3, [pc, #296]	; (80041a0 <HAL_RCC_GetSysClockFreq+0x180>)
 8004078:	685b      	ldr	r3, [r3, #4]
 800407a:	099b      	lsrs	r3, r3, #6
 800407c:	2200      	movs	r2, #0
 800407e:	623b      	str	r3, [r7, #32]
 8004080:	627a      	str	r2, [r7, #36]	; 0x24
 8004082:	6a3b      	ldr	r3, [r7, #32]
 8004084:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8004088:	2100      	movs	r1, #0
 800408a:	4b47      	ldr	r3, [pc, #284]	; (80041a8 <HAL_RCC_GetSysClockFreq+0x188>)
 800408c:	fb03 f201 	mul.w	r2, r3, r1
 8004090:	2300      	movs	r3, #0
 8004092:	fb00 f303 	mul.w	r3, r0, r3
 8004096:	4413      	add	r3, r2
 8004098:	4a43      	ldr	r2, [pc, #268]	; (80041a8 <HAL_RCC_GetSysClockFreq+0x188>)
 800409a:	fba0 1202 	umull	r1, r2, r0, r2
 800409e:	62fa      	str	r2, [r7, #44]	; 0x2c
 80040a0:	460a      	mov	r2, r1
 80040a2:	62ba      	str	r2, [r7, #40]	; 0x28
 80040a4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80040a6:	4413      	add	r3, r2
 80040a8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80040aa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80040ac:	2200      	movs	r2, #0
 80040ae:	61bb      	str	r3, [r7, #24]
 80040b0:	61fa      	str	r2, [r7, #28]
 80040b2:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80040b6:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 80040ba:	f7fc f8d9 	bl	8000270 <__aeabi_uldivmod>
 80040be:	4602      	mov	r2, r0
 80040c0:	460b      	mov	r3, r1
 80040c2:	4613      	mov	r3, r2
 80040c4:	63fb      	str	r3, [r7, #60]	; 0x3c
 80040c6:	e053      	b.n	8004170 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80040c8:	4b35      	ldr	r3, [pc, #212]	; (80041a0 <HAL_RCC_GetSysClockFreq+0x180>)
 80040ca:	685b      	ldr	r3, [r3, #4]
 80040cc:	099b      	lsrs	r3, r3, #6
 80040ce:	2200      	movs	r2, #0
 80040d0:	613b      	str	r3, [r7, #16]
 80040d2:	617a      	str	r2, [r7, #20]
 80040d4:	693b      	ldr	r3, [r7, #16]
 80040d6:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 80040da:	f04f 0b00 	mov.w	fp, #0
 80040de:	4652      	mov	r2, sl
 80040e0:	465b      	mov	r3, fp
 80040e2:	f04f 0000 	mov.w	r0, #0
 80040e6:	f04f 0100 	mov.w	r1, #0
 80040ea:	0159      	lsls	r1, r3, #5
 80040ec:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80040f0:	0150      	lsls	r0, r2, #5
 80040f2:	4602      	mov	r2, r0
 80040f4:	460b      	mov	r3, r1
 80040f6:	ebb2 080a 	subs.w	r8, r2, sl
 80040fa:	eb63 090b 	sbc.w	r9, r3, fp
 80040fe:	f04f 0200 	mov.w	r2, #0
 8004102:	f04f 0300 	mov.w	r3, #0
 8004106:	ea4f 1389 	mov.w	r3, r9, lsl #6
 800410a:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 800410e:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8004112:	ebb2 0408 	subs.w	r4, r2, r8
 8004116:	eb63 0509 	sbc.w	r5, r3, r9
 800411a:	f04f 0200 	mov.w	r2, #0
 800411e:	f04f 0300 	mov.w	r3, #0
 8004122:	00eb      	lsls	r3, r5, #3
 8004124:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004128:	00e2      	lsls	r2, r4, #3
 800412a:	4614      	mov	r4, r2
 800412c:	461d      	mov	r5, r3
 800412e:	eb14 030a 	adds.w	r3, r4, sl
 8004132:	603b      	str	r3, [r7, #0]
 8004134:	eb45 030b 	adc.w	r3, r5, fp
 8004138:	607b      	str	r3, [r7, #4]
 800413a:	f04f 0200 	mov.w	r2, #0
 800413e:	f04f 0300 	mov.w	r3, #0
 8004142:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004146:	4629      	mov	r1, r5
 8004148:	028b      	lsls	r3, r1, #10
 800414a:	4621      	mov	r1, r4
 800414c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004150:	4621      	mov	r1, r4
 8004152:	028a      	lsls	r2, r1, #10
 8004154:	4610      	mov	r0, r2
 8004156:	4619      	mov	r1, r3
 8004158:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800415a:	2200      	movs	r2, #0
 800415c:	60bb      	str	r3, [r7, #8]
 800415e:	60fa      	str	r2, [r7, #12]
 8004160:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004164:	f7fc f884 	bl	8000270 <__aeabi_uldivmod>
 8004168:	4602      	mov	r2, r0
 800416a:	460b      	mov	r3, r1
 800416c:	4613      	mov	r3, r2
 800416e:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004170:	4b0b      	ldr	r3, [pc, #44]	; (80041a0 <HAL_RCC_GetSysClockFreq+0x180>)
 8004172:	685b      	ldr	r3, [r3, #4]
 8004174:	0c1b      	lsrs	r3, r3, #16
 8004176:	f003 0303 	and.w	r3, r3, #3
 800417a:	3301      	adds	r3, #1
 800417c:	005b      	lsls	r3, r3, #1
 800417e:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8004180:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004182:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004184:	fbb2 f3f3 	udiv	r3, r2, r3
 8004188:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800418a:	e002      	b.n	8004192 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800418c:	4b05      	ldr	r3, [pc, #20]	; (80041a4 <HAL_RCC_GetSysClockFreq+0x184>)
 800418e:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8004190:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004192:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8004194:	4618      	mov	r0, r3
 8004196:	3740      	adds	r7, #64	; 0x40
 8004198:	46bd      	mov	sp, r7
 800419a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800419e:	bf00      	nop
 80041a0:	40023800 	.word	0x40023800
 80041a4:	00f42400 	.word	0x00f42400
 80041a8:	02faf080 	.word	0x02faf080

080041ac <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80041ac:	b480      	push	{r7}
 80041ae:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80041b0:	4b03      	ldr	r3, [pc, #12]	; (80041c0 <HAL_RCC_GetHCLKFreq+0x14>)
 80041b2:	681b      	ldr	r3, [r3, #0]
}
 80041b4:	4618      	mov	r0, r3
 80041b6:	46bd      	mov	sp, r7
 80041b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041bc:	4770      	bx	lr
 80041be:	bf00      	nop
 80041c0:	20000000 	.word	0x20000000

080041c4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80041c4:	b580      	push	{r7, lr}
 80041c6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80041c8:	f7ff fff0 	bl	80041ac <HAL_RCC_GetHCLKFreq>
 80041cc:	4602      	mov	r2, r0
 80041ce:	4b05      	ldr	r3, [pc, #20]	; (80041e4 <HAL_RCC_GetPCLK1Freq+0x20>)
 80041d0:	689b      	ldr	r3, [r3, #8]
 80041d2:	0a9b      	lsrs	r3, r3, #10
 80041d4:	f003 0307 	and.w	r3, r3, #7
 80041d8:	4903      	ldr	r1, [pc, #12]	; (80041e8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80041da:	5ccb      	ldrb	r3, [r1, r3]
 80041dc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80041e0:	4618      	mov	r0, r3
 80041e2:	bd80      	pop	{r7, pc}
 80041e4:	40023800 	.word	0x40023800
 80041e8:	08017364 	.word	0x08017364

080041ec <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80041ec:	b480      	push	{r7}
 80041ee:	b083      	sub	sp, #12
 80041f0:	af00      	add	r7, sp, #0
 80041f2:	6078      	str	r0, [r7, #4]
 80041f4:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	220f      	movs	r2, #15
 80041fa:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80041fc:	4b12      	ldr	r3, [pc, #72]	; (8004248 <HAL_RCC_GetClockConfig+0x5c>)
 80041fe:	689b      	ldr	r3, [r3, #8]
 8004200:	f003 0203 	and.w	r2, r3, #3
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8004208:	4b0f      	ldr	r3, [pc, #60]	; (8004248 <HAL_RCC_GetClockConfig+0x5c>)
 800420a:	689b      	ldr	r3, [r3, #8]
 800420c:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8004214:	4b0c      	ldr	r3, [pc, #48]	; (8004248 <HAL_RCC_GetClockConfig+0x5c>)
 8004216:	689b      	ldr	r3, [r3, #8]
 8004218:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8004220:	4b09      	ldr	r3, [pc, #36]	; (8004248 <HAL_RCC_GetClockConfig+0x5c>)
 8004222:	689b      	ldr	r3, [r3, #8]
 8004224:	08db      	lsrs	r3, r3, #3
 8004226:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800422e:	4b07      	ldr	r3, [pc, #28]	; (800424c <HAL_RCC_GetClockConfig+0x60>)
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	f003 0207 	and.w	r2, r3, #7
 8004236:	683b      	ldr	r3, [r7, #0]
 8004238:	601a      	str	r2, [r3, #0]
}
 800423a:	bf00      	nop
 800423c:	370c      	adds	r7, #12
 800423e:	46bd      	mov	sp, r7
 8004240:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004244:	4770      	bx	lr
 8004246:	bf00      	nop
 8004248:	40023800 	.word	0x40023800
 800424c:	40023c00 	.word	0x40023c00

08004250 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004250:	b580      	push	{r7, lr}
 8004252:	b086      	sub	sp, #24
 8004254:	af00      	add	r7, sp, #0
 8004256:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004258:	2300      	movs	r3, #0
 800425a:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 800425c:	2300      	movs	r3, #0
 800425e:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	f003 0301 	and.w	r3, r3, #1
 8004268:	2b00      	cmp	r3, #0
 800426a:	d105      	bne.n	8004278 <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8004274:	2b00      	cmp	r3, #0
 8004276:	d035      	beq.n	80042e4 <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8004278:	4b62      	ldr	r3, [pc, #392]	; (8004404 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 800427a:	2200      	movs	r2, #0
 800427c:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800427e:	f7fd fa53 	bl	8001728 <HAL_GetTick>
 8004282:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004284:	e008      	b.n	8004298 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8004286:	f7fd fa4f 	bl	8001728 <HAL_GetTick>
 800428a:	4602      	mov	r2, r0
 800428c:	697b      	ldr	r3, [r7, #20]
 800428e:	1ad3      	subs	r3, r2, r3
 8004290:	2b02      	cmp	r3, #2
 8004292:	d901      	bls.n	8004298 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004294:	2303      	movs	r3, #3
 8004296:	e0b0      	b.n	80043fa <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004298:	4b5b      	ldr	r3, [pc, #364]	; (8004408 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80042a0:	2b00      	cmp	r3, #0
 80042a2:	d1f0      	bne.n	8004286 <HAL_RCCEx_PeriphCLKConfig+0x36>
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	685b      	ldr	r3, [r3, #4]
 80042a8:	019a      	lsls	r2, r3, #6
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	689b      	ldr	r3, [r3, #8]
 80042ae:	071b      	lsls	r3, r3, #28
 80042b0:	4955      	ldr	r1, [pc, #340]	; (8004408 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80042b2:	4313      	orrs	r3, r2
 80042b4:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80042b8:	4b52      	ldr	r3, [pc, #328]	; (8004404 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 80042ba:	2201      	movs	r2, #1
 80042bc:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80042be:	f7fd fa33 	bl	8001728 <HAL_GetTick>
 80042c2:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80042c4:	e008      	b.n	80042d8 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80042c6:	f7fd fa2f 	bl	8001728 <HAL_GetTick>
 80042ca:	4602      	mov	r2, r0
 80042cc:	697b      	ldr	r3, [r7, #20]
 80042ce:	1ad3      	subs	r3, r2, r3
 80042d0:	2b02      	cmp	r3, #2
 80042d2:	d901      	bls.n	80042d8 <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80042d4:	2303      	movs	r3, #3
 80042d6:	e090      	b.n	80043fa <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80042d8:	4b4b      	ldr	r3, [pc, #300]	; (8004408 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80042e0:	2b00      	cmp	r3, #0
 80042e2:	d0f0      	beq.n	80042c6 <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	f003 0302 	and.w	r3, r3, #2
 80042ec:	2b00      	cmp	r3, #0
 80042ee:	f000 8083 	beq.w	80043f8 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80042f2:	2300      	movs	r3, #0
 80042f4:	60fb      	str	r3, [r7, #12]
 80042f6:	4b44      	ldr	r3, [pc, #272]	; (8004408 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80042f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042fa:	4a43      	ldr	r2, [pc, #268]	; (8004408 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80042fc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004300:	6413      	str	r3, [r2, #64]	; 0x40
 8004302:	4b41      	ldr	r3, [pc, #260]	; (8004408 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004304:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004306:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800430a:	60fb      	str	r3, [r7, #12]
 800430c:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 800430e:	4b3f      	ldr	r3, [pc, #252]	; (800440c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	4a3e      	ldr	r2, [pc, #248]	; (800440c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8004314:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004318:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 800431a:	f7fd fa05 	bl	8001728 <HAL_GetTick>
 800431e:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8004320:	e008      	b.n	8004334 <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8004322:	f7fd fa01 	bl	8001728 <HAL_GetTick>
 8004326:	4602      	mov	r2, r0
 8004328:	697b      	ldr	r3, [r7, #20]
 800432a:	1ad3      	subs	r3, r2, r3
 800432c:	2b02      	cmp	r3, #2
 800432e:	d901      	bls.n	8004334 <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 8004330:	2303      	movs	r3, #3
 8004332:	e062      	b.n	80043fa <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8004334:	4b35      	ldr	r3, [pc, #212]	; (800440c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800433c:	2b00      	cmp	r3, #0
 800433e:	d0f0      	beq.n	8004322 <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004340:	4b31      	ldr	r3, [pc, #196]	; (8004408 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004342:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004344:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004348:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800434a:	693b      	ldr	r3, [r7, #16]
 800434c:	2b00      	cmp	r3, #0
 800434e:	d02f      	beq.n	80043b0 <HAL_RCCEx_PeriphCLKConfig+0x160>
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	68db      	ldr	r3, [r3, #12]
 8004354:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004358:	693a      	ldr	r2, [r7, #16]
 800435a:	429a      	cmp	r2, r3
 800435c:	d028      	beq.n	80043b0 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800435e:	4b2a      	ldr	r3, [pc, #168]	; (8004408 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004360:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004362:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004366:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004368:	4b29      	ldr	r3, [pc, #164]	; (8004410 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 800436a:	2201      	movs	r2, #1
 800436c:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800436e:	4b28      	ldr	r3, [pc, #160]	; (8004410 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8004370:	2200      	movs	r2, #0
 8004372:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8004374:	4a24      	ldr	r2, [pc, #144]	; (8004408 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004376:	693b      	ldr	r3, [r7, #16]
 8004378:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800437a:	4b23      	ldr	r3, [pc, #140]	; (8004408 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800437c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800437e:	f003 0301 	and.w	r3, r3, #1
 8004382:	2b01      	cmp	r3, #1
 8004384:	d114      	bne.n	80043b0 <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8004386:	f7fd f9cf 	bl	8001728 <HAL_GetTick>
 800438a:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800438c:	e00a      	b.n	80043a4 <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800438e:	f7fd f9cb 	bl	8001728 <HAL_GetTick>
 8004392:	4602      	mov	r2, r0
 8004394:	697b      	ldr	r3, [r7, #20]
 8004396:	1ad3      	subs	r3, r2, r3
 8004398:	f241 3288 	movw	r2, #5000	; 0x1388
 800439c:	4293      	cmp	r3, r2
 800439e:	d901      	bls.n	80043a4 <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 80043a0:	2303      	movs	r3, #3
 80043a2:	e02a      	b.n	80043fa <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80043a4:	4b18      	ldr	r3, [pc, #96]	; (8004408 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80043a6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80043a8:	f003 0302 	and.w	r3, r3, #2
 80043ac:	2b00      	cmp	r3, #0
 80043ae:	d0ee      	beq.n	800438e <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	68db      	ldr	r3, [r3, #12]
 80043b4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80043b8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80043bc:	d10d      	bne.n	80043da <HAL_RCCEx_PeriphCLKConfig+0x18a>
 80043be:	4b12      	ldr	r3, [pc, #72]	; (8004408 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80043c0:	689b      	ldr	r3, [r3, #8]
 80043c2:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	68db      	ldr	r3, [r3, #12]
 80043ca:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 80043ce:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80043d2:	490d      	ldr	r1, [pc, #52]	; (8004408 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80043d4:	4313      	orrs	r3, r2
 80043d6:	608b      	str	r3, [r1, #8]
 80043d8:	e005      	b.n	80043e6 <HAL_RCCEx_PeriphCLKConfig+0x196>
 80043da:	4b0b      	ldr	r3, [pc, #44]	; (8004408 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80043dc:	689b      	ldr	r3, [r3, #8]
 80043de:	4a0a      	ldr	r2, [pc, #40]	; (8004408 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80043e0:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 80043e4:	6093      	str	r3, [r2, #8]
 80043e6:	4b08      	ldr	r3, [pc, #32]	; (8004408 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80043e8:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	68db      	ldr	r3, [r3, #12]
 80043ee:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80043f2:	4905      	ldr	r1, [pc, #20]	; (8004408 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80043f4:	4313      	orrs	r3, r2
 80043f6:	670b      	str	r3, [r1, #112]	; 0x70
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 80043f8:	2300      	movs	r3, #0
}
 80043fa:	4618      	mov	r0, r3
 80043fc:	3718      	adds	r7, #24
 80043fe:	46bd      	mov	sp, r7
 8004400:	bd80      	pop	{r7, pc}
 8004402:	bf00      	nop
 8004404:	42470068 	.word	0x42470068
 8004408:	40023800 	.word	0x40023800
 800440c:	40007000 	.word	0x40007000
 8004410:	42470e40 	.word	0x42470e40

08004414 <HAL_RCC_DeInit>:
  *            - Peripheral clocks
  *            - LSI, LSE and RTC clocks
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_DeInit(void)
{
 8004414:	b580      	push	{r7, lr}
 8004416:	b082      	sub	sp, #8
 8004418:	af00      	add	r7, sp, #0
  uint32_t tickstart;

  /* Get Start Tick */
  tickstart = HAL_GetTick();
 800441a:	f7fd f985 	bl	8001728 <HAL_GetTick>
 800441e:	6078      	str	r0, [r7, #4]

  /* Set HSION bit to the reset value */
  SET_BIT(RCC->CR, RCC_CR_HSION);
 8004420:	4b5d      	ldr	r3, [pc, #372]	; (8004598 <HAL_RCC_DeInit+0x184>)
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	4a5c      	ldr	r2, [pc, #368]	; (8004598 <HAL_RCC_DeInit+0x184>)
 8004426:	f043 0301 	orr.w	r3, r3, #1
 800442a:	6013      	str	r3, [r2, #0]

  /* Wait till HSI is ready */
  while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == RESET)
 800442c:	e008      	b.n	8004440 <HAL_RCC_DeInit+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800442e:	f7fd f97b 	bl	8001728 <HAL_GetTick>
 8004432:	4602      	mov	r2, r0
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	1ad3      	subs	r3, r2, r3
 8004438:	2b02      	cmp	r3, #2
 800443a:	d901      	bls.n	8004440 <HAL_RCC_DeInit+0x2c>
    {
      return HAL_TIMEOUT;
 800443c:	2303      	movs	r3, #3
 800443e:	e0a7      	b.n	8004590 <HAL_RCC_DeInit+0x17c>
  while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == RESET)
 8004440:	4b55      	ldr	r3, [pc, #340]	; (8004598 <HAL_RCC_DeInit+0x184>)
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	f003 0302 	and.w	r3, r3, #2
 8004448:	2b00      	cmp	r3, #0
 800444a:	d0f0      	beq.n	800442e <HAL_RCC_DeInit+0x1a>
    }
  }

  /* Set HSITRIM[4:0] bits to the reset value */
  SET_BIT(RCC->CR, RCC_CR_HSITRIM_4);
 800444c:	4b52      	ldr	r3, [pc, #328]	; (8004598 <HAL_RCC_DeInit+0x184>)
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	4a51      	ldr	r2, [pc, #324]	; (8004598 <HAL_RCC_DeInit+0x184>)
 8004452:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004456:	6013      	str	r3, [r2, #0]

  /* Get Start Tick */
  tickstart = HAL_GetTick();
 8004458:	f7fd f966 	bl	8001728 <HAL_GetTick>
 800445c:	6078      	str	r0, [r7, #4]

  /* Reset CFGR register */
  CLEAR_REG(RCC->CFGR);
 800445e:	4b4e      	ldr	r3, [pc, #312]	; (8004598 <HAL_RCC_DeInit+0x184>)
 8004460:	2200      	movs	r2, #0
 8004462:	609a      	str	r2, [r3, #8]

  /* Wait till clock switch is ready */
  while (READ_BIT(RCC->CFGR, RCC_CFGR_SWS) != RESET)
 8004464:	e00a      	b.n	800447c <HAL_RCC_DeInit+0x68>
  {
    if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004466:	f7fd f95f 	bl	8001728 <HAL_GetTick>
 800446a:	4602      	mov	r2, r0
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	1ad3      	subs	r3, r2, r3
 8004470:	f241 3288 	movw	r2, #5000	; 0x1388
 8004474:	4293      	cmp	r3, r2
 8004476:	d901      	bls.n	800447c <HAL_RCC_DeInit+0x68>
    {
      return HAL_TIMEOUT;
 8004478:	2303      	movs	r3, #3
 800447a:	e089      	b.n	8004590 <HAL_RCC_DeInit+0x17c>
  while (READ_BIT(RCC->CFGR, RCC_CFGR_SWS) != RESET)
 800447c:	4b46      	ldr	r3, [pc, #280]	; (8004598 <HAL_RCC_DeInit+0x184>)
 800447e:	689b      	ldr	r3, [r3, #8]
 8004480:	f003 030c 	and.w	r3, r3, #12
 8004484:	2b00      	cmp	r3, #0
 8004486:	d1ee      	bne.n	8004466 <HAL_RCC_DeInit+0x52>
    }
  }

  /* Get Start Tick */
  tickstart = HAL_GetTick();
 8004488:	f7fd f94e 	bl	8001728 <HAL_GetTick>
 800448c:	6078      	str	r0, [r7, #4]

  /* Clear HSEON, HSEBYP and CSSON bits */
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON | RCC_CR_HSEBYP | RCC_CR_CSSON);
 800448e:	4b42      	ldr	r3, [pc, #264]	; (8004598 <HAL_RCC_DeInit+0x184>)
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	4a41      	ldr	r2, [pc, #260]	; (8004598 <HAL_RCC_DeInit+0x184>)
 8004494:	f423 2350 	bic.w	r3, r3, #851968	; 0xd0000
 8004498:	6013      	str	r3, [r2, #0]

  /* Wait till HSE is disabled */
  while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != RESET)
 800449a:	e008      	b.n	80044ae <HAL_RCC_DeInit+0x9a>
  {
    if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800449c:	f7fd f944 	bl	8001728 <HAL_GetTick>
 80044a0:	4602      	mov	r2, r0
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	1ad3      	subs	r3, r2, r3
 80044a6:	2b64      	cmp	r3, #100	; 0x64
 80044a8:	d901      	bls.n	80044ae <HAL_RCC_DeInit+0x9a>
    {
      return HAL_TIMEOUT;
 80044aa:	2303      	movs	r3, #3
 80044ac:	e070      	b.n	8004590 <HAL_RCC_DeInit+0x17c>
  while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != RESET)
 80044ae:	4b3a      	ldr	r3, [pc, #232]	; (8004598 <HAL_RCC_DeInit+0x184>)
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80044b6:	2b00      	cmp	r3, #0
 80044b8:	d1f0      	bne.n	800449c <HAL_RCC_DeInit+0x88>
    }
  }

  /* Get Start Tick */
  tickstart = HAL_GetTick();
 80044ba:	f7fd f935 	bl	8001728 <HAL_GetTick>
 80044be:	6078      	str	r0, [r7, #4]

  /* Clear PLLON bit */
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 80044c0:	4b35      	ldr	r3, [pc, #212]	; (8004598 <HAL_RCC_DeInit+0x184>)
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	4a34      	ldr	r2, [pc, #208]	; (8004598 <HAL_RCC_DeInit+0x184>)
 80044c6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80044ca:	6013      	str	r3, [r2, #0]

  /* Wait till PLL is disabled */
  while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != RESET)
 80044cc:	e008      	b.n	80044e0 <HAL_RCC_DeInit+0xcc>
  {
    if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80044ce:	f7fd f92b 	bl	8001728 <HAL_GetTick>
 80044d2:	4602      	mov	r2, r0
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	1ad3      	subs	r3, r2, r3
 80044d8:	2b02      	cmp	r3, #2
 80044da:	d901      	bls.n	80044e0 <HAL_RCC_DeInit+0xcc>
    {
      return HAL_TIMEOUT;
 80044dc:	2303      	movs	r3, #3
 80044de:	e057      	b.n	8004590 <HAL_RCC_DeInit+0x17c>
  while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != RESET)
 80044e0:	4b2d      	ldr	r3, [pc, #180]	; (8004598 <HAL_RCC_DeInit+0x184>)
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80044e8:	2b00      	cmp	r3, #0
 80044ea:	d1f0      	bne.n	80044ce <HAL_RCC_DeInit+0xba>
    }
  }

#if defined(RCC_PLLI2S_SUPPORT)
  /* Get Start Tick */
  tickstart = HAL_GetTick();
 80044ec:	f7fd f91c 	bl	8001728 <HAL_GetTick>
 80044f0:	6078      	str	r0, [r7, #4]

  /* Reset PLLI2SON bit */
  CLEAR_BIT(RCC->CR, RCC_CR_PLLI2SON);
 80044f2:	4b29      	ldr	r3, [pc, #164]	; (8004598 <HAL_RCC_DeInit+0x184>)
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	4a28      	ldr	r2, [pc, #160]	; (8004598 <HAL_RCC_DeInit+0x184>)
 80044f8:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80044fc:	6013      	str	r3, [r2, #0]

  /* Wait till PLLI2S is disabled */
  while (READ_BIT(RCC->CR, RCC_CR_PLLI2SRDY) != RESET)
 80044fe:	e008      	b.n	8004512 <HAL_RCC_DeInit+0xfe>
  {
    if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8004500:	f7fd f912 	bl	8001728 <HAL_GetTick>
 8004504:	4602      	mov	r2, r0
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	1ad3      	subs	r3, r2, r3
 800450a:	2b02      	cmp	r3, #2
 800450c:	d901      	bls.n	8004512 <HAL_RCC_DeInit+0xfe>
    {
      return HAL_TIMEOUT;
 800450e:	2303      	movs	r3, #3
 8004510:	e03e      	b.n	8004590 <HAL_RCC_DeInit+0x17c>
  while (READ_BIT(RCC->CR, RCC_CR_PLLI2SRDY) != RESET)
 8004512:	4b21      	ldr	r3, [pc, #132]	; (8004598 <HAL_RCC_DeInit+0x184>)
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800451a:	2b00      	cmp	r3, #0
 800451c:	d1f0      	bne.n	8004500 <HAL_RCC_DeInit+0xec>
    defined(STM32F423xx) || defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx)
  RCC->PLLCFGR = RCC_PLLCFGR_PLLM_4 | RCC_PLLCFGR_PLLN_6 | RCC_PLLCFGR_PLLN_7 | RCC_PLLCFGR_PLLQ_2 | RCC_PLLCFGR_PLLR_1;
#elif defined(STM32F410Tx) || defined(STM32F410Cx) || defined(STM32F410Rx)
  RCC->PLLCFGR = RCC_PLLCFGR_PLLR_0 | RCC_PLLCFGR_PLLR_1 | RCC_PLLCFGR_PLLR_2 | RCC_PLLCFGR_PLLM_4 | RCC_PLLCFGR_PLLN_6 | RCC_PLLCFGR_PLLN_7 | RCC_PLLCFGR_PLLQ_0 | RCC_PLLCFGR_PLLQ_1 | RCC_PLLCFGR_PLLQ_2 | RCC_PLLCFGR_PLLQ_3;
#else
  RCC->PLLCFGR = RCC_PLLCFGR_PLLM_4 | RCC_PLLCFGR_PLLN_6 | RCC_PLLCFGR_PLLN_7 | RCC_PLLCFGR_PLLQ_2;
 800451e:	4b1e      	ldr	r3, [pc, #120]	; (8004598 <HAL_RCC_DeInit+0x184>)
 8004520:	4a1e      	ldr	r2, [pc, #120]	; (800459c <HAL_RCC_DeInit+0x188>)
 8004522:	605a      	str	r2, [r3, #4]
  /* Reset PLLI2SCFGR register to default value */
#if defined(STM32F412Cx) || defined(STM32F412Rx) || defined(STM32F412Vx) || defined(STM32F412Zx) || defined(STM32F413xx) || \
    defined(STM32F423xx) || defined(STM32F446xx)
  RCC->PLLI2SCFGR = RCC_PLLI2SCFGR_PLLI2SM_4 | RCC_PLLI2SCFGR_PLLI2SN_6 | RCC_PLLI2SCFGR_PLLI2SN_7 | RCC_PLLI2SCFGR_PLLI2SQ_2 | RCC_PLLI2SCFGR_PLLI2SR_1;
#elif defined(STM32F401xC) || defined(STM32F401xE) || defined(STM32F405xx) || defined(STM32F415xx) || defined(STM32F407xx) || defined(STM32F417xx)
  RCC->PLLI2SCFGR = RCC_PLLI2SCFGR_PLLI2SN_6 | RCC_PLLI2SCFGR_PLLI2SN_7 | RCC_PLLI2SCFGR_PLLI2SR_1;
 8004524:	4b1c      	ldr	r3, [pc, #112]	; (8004598 <HAL_RCC_DeInit+0x184>)
 8004526:	4a1e      	ldr	r2, [pc, #120]	; (80045a0 <HAL_RCC_DeInit+0x18c>)
 8004528:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#elif defined(STM32F446xx)
  RCC->PLLSAICFGR = RCC_PLLSAICFGR_PLLSAIM_4 | RCC_PLLSAICFGR_PLLSAIN_6 | RCC_PLLSAICFGR_PLLSAIN_7 | RCC_PLLSAICFGR_PLLSAIQ_2;
#endif /* STM32F427xx || STM32F429xx || STM32F437xx || STM32F439xx || STM32F469xx || STM32F479xx */

  /* Disable all interrupts */
  CLEAR_BIT(RCC->CIR, RCC_CIR_LSIRDYIE | RCC_CIR_LSERDYIE | RCC_CIR_HSIRDYIE | RCC_CIR_HSERDYIE | RCC_CIR_PLLRDYIE);
 800452c:	4b1a      	ldr	r3, [pc, #104]	; (8004598 <HAL_RCC_DeInit+0x184>)
 800452e:	68db      	ldr	r3, [r3, #12]
 8004530:	4a19      	ldr	r2, [pc, #100]	; (8004598 <HAL_RCC_DeInit+0x184>)
 8004532:	f423 53f8 	bic.w	r3, r3, #7936	; 0x1f00
 8004536:	60d3      	str	r3, [r2, #12]

#if defined(RCC_CIR_PLLI2SRDYIE)
  CLEAR_BIT(RCC->CIR, RCC_CIR_PLLI2SRDYIE);
 8004538:	4b17      	ldr	r3, [pc, #92]	; (8004598 <HAL_RCC_DeInit+0x184>)
 800453a:	68db      	ldr	r3, [r3, #12]
 800453c:	4a16      	ldr	r2, [pc, #88]	; (8004598 <HAL_RCC_DeInit+0x184>)
 800453e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004542:	60d3      	str	r3, [r2, #12]
#if defined(RCC_CIR_PLLSAIRDYIE)
  CLEAR_BIT(RCC->CIR, RCC_CIR_PLLSAIRDYIE);
#endif /* RCC_CIR_PLLSAIRDYIE */

  /* Clear all interrupt flags */
  SET_BIT(RCC->CIR, RCC_CIR_LSIRDYC | RCC_CIR_LSERDYC | RCC_CIR_HSIRDYC | RCC_CIR_HSERDYC | RCC_CIR_PLLRDYC | RCC_CIR_CSSC);
 8004544:	4b14      	ldr	r3, [pc, #80]	; (8004598 <HAL_RCC_DeInit+0x184>)
 8004546:	68db      	ldr	r3, [r3, #12]
 8004548:	4a13      	ldr	r2, [pc, #76]	; (8004598 <HAL_RCC_DeInit+0x184>)
 800454a:	f443 031f 	orr.w	r3, r3, #10420224	; 0x9f0000
 800454e:	60d3      	str	r3, [r2, #12]

#if defined(RCC_CIR_PLLI2SRDYC)
  SET_BIT(RCC->CIR, RCC_CIR_PLLI2SRDYC);
 8004550:	4b11      	ldr	r3, [pc, #68]	; (8004598 <HAL_RCC_DeInit+0x184>)
 8004552:	68db      	ldr	r3, [r3, #12]
 8004554:	4a10      	ldr	r2, [pc, #64]	; (8004598 <HAL_RCC_DeInit+0x184>)
 8004556:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800455a:	60d3      	str	r3, [r2, #12]
#if defined(RCC_CIR_PLLSAIRDYC)
  SET_BIT(RCC->CIR, RCC_CIR_PLLSAIRDYC);
#endif /* RCC_CIR_PLLSAIRDYC */

  /* Clear LSION bit */
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSION);
 800455c:	4b0e      	ldr	r3, [pc, #56]	; (8004598 <HAL_RCC_DeInit+0x184>)
 800455e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004560:	4a0d      	ldr	r2, [pc, #52]	; (8004598 <HAL_RCC_DeInit+0x184>)
 8004562:	f023 0301 	bic.w	r3, r3, #1
 8004566:	6753      	str	r3, [r2, #116]	; 0x74

  /* Reset all CSR flags */
  SET_BIT(RCC->CSR, RCC_CSR_RMVF);
 8004568:	4b0b      	ldr	r3, [pc, #44]	; (8004598 <HAL_RCC_DeInit+0x184>)
 800456a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800456c:	4a0a      	ldr	r2, [pc, #40]	; (8004598 <HAL_RCC_DeInit+0x184>)
 800456e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004572:	6753      	str	r3, [r2, #116]	; 0x74

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HSI_VALUE;
 8004574:	4b0b      	ldr	r3, [pc, #44]	; (80045a4 <HAL_RCC_DeInit+0x190>)
 8004576:	4a0c      	ldr	r2, [pc, #48]	; (80045a8 <HAL_RCC_DeInit+0x194>)
 8004578:	601a      	str	r2, [r3, #0]

  /* Adapt Systick interrupt period */
  if(HAL_InitTick(uwTickPrio) != HAL_OK)
 800457a:	4b0c      	ldr	r3, [pc, #48]	; (80045ac <HAL_RCC_DeInit+0x198>)
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	4618      	mov	r0, r3
 8004580:	f7fc faec 	bl	8000b5c <HAL_InitTick>
 8004584:	4603      	mov	r3, r0
 8004586:	2b00      	cmp	r3, #0
 8004588:	d001      	beq.n	800458e <HAL_RCC_DeInit+0x17a>
  {
    return HAL_ERROR;
 800458a:	2301      	movs	r3, #1
 800458c:	e000      	b.n	8004590 <HAL_RCC_DeInit+0x17c>
  }
  else
  {
    return HAL_OK;
 800458e:	2300      	movs	r3, #0
  }
}
 8004590:	4618      	mov	r0, r3
 8004592:	3708      	adds	r7, #8
 8004594:	46bd      	mov	sp, r7
 8004596:	bd80      	pop	{r7, pc}
 8004598:	40023800 	.word	0x40023800
 800459c:	04003010 	.word	0x04003010
 80045a0:	20003000 	.word	0x20003000
 80045a4:	20000000 	.word	0x20000000
 80045a8:	00f42400 	.word	0x00f42400
 80045ac:	20000004 	.word	0x20000004

080045b0 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 80045b0:	b580      	push	{r7, lr}
 80045b2:	b084      	sub	sp, #16
 80045b4:	af00      	add	r7, sp, #0
 80045b6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 80045b8:	2301      	movs	r3, #1
 80045ba:	73fb      	strb	r3, [r7, #15]

  /* Check RTC handler validity */
  if (hrtc == NULL)
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	2b00      	cmp	r3, #0
 80045c0:	d101      	bne.n	80045c6 <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 80045c2:	2301      	movs	r3, #1
 80045c4:	e066      	b.n	8004694 <HAL_RTC_Init+0xe4>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else /* USE_HAL_RTC_REGISTER_CALLBACKS */
  if (hrtc->State == HAL_RTC_STATE_RESET)
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	7f5b      	ldrb	r3, [r3, #29]
 80045ca:	b2db      	uxtb	r3, r3
 80045cc:	2b00      	cmp	r3, #0
 80045ce:	d105      	bne.n	80045dc <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	2200      	movs	r2, #0
 80045d4:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 80045d6:	6878      	ldr	r0, [r7, #4]
 80045d8:	f7fc fa96 	bl	8000b08 <HAL_RTC_MspInit>
  }
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	2202      	movs	r2, #2
 80045e0:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	22ca      	movs	r2, #202	; 0xca
 80045e8:	625a      	str	r2, [r3, #36]	; 0x24
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	2253      	movs	r2, #83	; 0x53
 80045f0:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 80045f2:	6878      	ldr	r0, [r7, #4]
 80045f4:	f000 f87a 	bl	80046ec <RTC_EnterInitMode>
 80045f8:	4603      	mov	r3, r0
 80045fa:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 80045fc:	7bfb      	ldrb	r3, [r7, #15]
 80045fe:	2b00      	cmp	r3, #0
 8004600:	d12c      	bne.n	800465c <HAL_RTC_Init+0xac>
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	689b      	ldr	r3, [r3, #8]
 8004608:	687a      	ldr	r2, [r7, #4]
 800460a:	6812      	ldr	r2, [r2, #0]
 800460c:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8004610:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004614:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	6899      	ldr	r1, [r3, #8]
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	685a      	ldr	r2, [r3, #4]
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	691b      	ldr	r3, [r3, #16]
 8004624:	431a      	orrs	r2, r3
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	695b      	ldr	r3, [r3, #20]
 800462a:	431a      	orrs	r2, r3
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	430a      	orrs	r2, r1
 8004632:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	687a      	ldr	r2, [r7, #4]
 800463a:	68d2      	ldr	r2, [r2, #12]
 800463c:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	6919      	ldr	r1, [r3, #16]
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	689b      	ldr	r3, [r3, #8]
 8004648:	041a      	lsls	r2, r3, #16
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	430a      	orrs	r2, r1
 8004650:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8004652:	6878      	ldr	r0, [r7, #4]
 8004654:	f000 f881 	bl	800475a <RTC_ExitInitMode>
 8004658:	4603      	mov	r3, r0
 800465a:	73fb      	strb	r3, [r7, #15]
  }

  if (status == HAL_OK)
 800465c:	7bfb      	ldrb	r3, [r7, #15]
 800465e:	2b00      	cmp	r3, #0
 8004660:	d113      	bne.n	800468a <HAL_RTC_Init+0xda>
  {
    hrtc->Instance->TAFCR &= (uint32_t)~RTC_OUTPUT_TYPE_PUSHPULL;
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8004670:	641a      	str	r2, [r3, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	681b      	ldr	r3, [r3, #0]
 8004676:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	699a      	ldr	r2, [r3, #24]
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	430a      	orrs	r2, r1
 8004682:	641a      	str	r2, [r3, #64]	; 0x40

    hrtc->State = HAL_RTC_STATE_READY;
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	2201      	movs	r2, #1
 8004688:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	22ff      	movs	r2, #255	; 0xff
 8004690:	625a      	str	r2, [r3, #36]	; 0x24

  return status;
 8004692:	7bfb      	ldrb	r3, [r7, #15]
}
 8004694:	4618      	mov	r0, r3
 8004696:	3710      	adds	r7, #16
 8004698:	46bd      	mov	sp, r7
 800469a:	bd80      	pop	{r7, pc}

0800469c <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 800469c:	b580      	push	{r7, lr}
 800469e:	b084      	sub	sp, #16
 80046a0:	af00      	add	r7, sp, #0
 80046a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80046a4:	2300      	movs	r3, #0
 80046a6:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	68da      	ldr	r2, [r3, #12]
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80046b6:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 80046b8:	f7fd f836 	bl	8001728 <HAL_GetTick>
 80046bc:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 80046be:	e009      	b.n	80046d4 <HAL_RTC_WaitForSynchro+0x38>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80046c0:	f7fd f832 	bl	8001728 <HAL_GetTick>
 80046c4:	4602      	mov	r2, r0
 80046c6:	68fb      	ldr	r3, [r7, #12]
 80046c8:	1ad3      	subs	r3, r2, r3
 80046ca:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80046ce:	d901      	bls.n	80046d4 <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 80046d0:	2303      	movs	r3, #3
 80046d2:	e007      	b.n	80046e4 <HAL_RTC_WaitForSynchro+0x48>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	68db      	ldr	r3, [r3, #12]
 80046da:	f003 0320 	and.w	r3, r3, #32
 80046de:	2b00      	cmp	r3, #0
 80046e0:	d0ee      	beq.n	80046c0 <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 80046e2:	2300      	movs	r3, #0
}
 80046e4:	4618      	mov	r0, r3
 80046e6:	3710      	adds	r7, #16
 80046e8:	46bd      	mov	sp, r7
 80046ea:	bd80      	pop	{r7, pc}

080046ec <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 80046ec:	b580      	push	{r7, lr}
 80046ee:	b084      	sub	sp, #16
 80046f0:	af00      	add	r7, sp, #0
 80046f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80046f4:	2300      	movs	r3, #0
 80046f6:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 80046f8:	2300      	movs	r3, #0
 80046fa:	73fb      	strb	r3, [r7, #15]

  /* Check that Initialization mode is not already set */
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	68db      	ldr	r3, [r3, #12]
 8004702:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004706:	2b00      	cmp	r3, #0
 8004708:	d122      	bne.n	8004750 <RTC_EnterInitMode+0x64>
  {
    /* Set INIT bit to enter Initialization mode */
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	68da      	ldr	r2, [r3, #12]
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8004718:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 800471a:	f7fd f805 	bl	8001728 <HAL_GetTick>
 800471e:	60b8      	str	r0, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8004720:	e00c      	b.n	800473c <RTC_EnterInitMode+0x50>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8004722:	f7fd f801 	bl	8001728 <HAL_GetTick>
 8004726:	4602      	mov	r2, r0
 8004728:	68bb      	ldr	r3, [r7, #8]
 800472a:	1ad3      	subs	r3, r2, r3
 800472c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004730:	d904      	bls.n	800473c <RTC_EnterInitMode+0x50>
      {
        /* Set RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	2204      	movs	r2, #4
 8004736:	775a      	strb	r2, [r3, #29]
        status = HAL_ERROR;
 8004738:	2301      	movs	r3, #1
 800473a:	73fb      	strb	r3, [r7, #15]
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	68db      	ldr	r3, [r3, #12]
 8004742:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004746:	2b00      	cmp	r3, #0
 8004748:	d102      	bne.n	8004750 <RTC_EnterInitMode+0x64>
 800474a:	7bfb      	ldrb	r3, [r7, #15]
 800474c:	2b01      	cmp	r3, #1
 800474e:	d1e8      	bne.n	8004722 <RTC_EnterInitMode+0x36>
      }
    }
  }

  return status;
 8004750:	7bfb      	ldrb	r3, [r7, #15]
}
 8004752:	4618      	mov	r0, r3
 8004754:	3710      	adds	r7, #16
 8004756:	46bd      	mov	sp, r7
 8004758:	bd80      	pop	{r7, pc}

0800475a <RTC_ExitInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 800475a:	b580      	push	{r7, lr}
 800475c:	b084      	sub	sp, #16
 800475e:	af00      	add	r7, sp, #0
 8004760:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004762:	2300      	movs	r3, #0
 8004764:	73fb      	strb	r3, [r7, #15]

  /* Clear INIT bit to exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	68da      	ldr	r2, [r3, #12]
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004774:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	689b      	ldr	r3, [r3, #8]
 800477c:	f003 0320 	and.w	r3, r3, #32
 8004780:	2b00      	cmp	r3, #0
 8004782:	d10a      	bne.n	800479a <RTC_ExitInitMode+0x40>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8004784:	6878      	ldr	r0, [r7, #4]
 8004786:	f7ff ff89 	bl	800469c <HAL_RTC_WaitForSynchro>
 800478a:	4603      	mov	r3, r0
 800478c:	2b00      	cmp	r3, #0
 800478e:	d004      	beq.n	800479a <RTC_ExitInitMode+0x40>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	2204      	movs	r2, #4
 8004794:	775a      	strb	r2, [r3, #29]
      status = HAL_ERROR;
 8004796:	2301      	movs	r3, #1
 8004798:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 800479a:	7bfb      	ldrb	r3, [r7, #15]
}
 800479c:	4618      	mov	r0, r3
 800479e:	3710      	adds	r7, #16
 80047a0:	46bd      	mov	sp, r7
 80047a2:	bd80      	pop	{r7, pc}

080047a4 <HAL_RTCEx_BKUPWrite>:
  *                                 to specify the register.
  * @param  Data Data to be written in the specified RTC Backup data register.
  * @retval None
  */
void HAL_RTCEx_BKUPWrite(RTC_HandleTypeDef *hrtc, uint32_t BackupRegister, uint32_t Data)
{
 80047a4:	b480      	push	{r7}
 80047a6:	b087      	sub	sp, #28
 80047a8:	af00      	add	r7, sp, #0
 80047aa:	60f8      	str	r0, [r7, #12]
 80047ac:	60b9      	str	r1, [r7, #8]
 80047ae:	607a      	str	r2, [r7, #4]
  uint32_t tmp = 0U;
 80047b0:	2300      	movs	r3, #0
 80047b2:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t) & (hrtc->Instance->BKP0R);
 80047b4:	68fb      	ldr	r3, [r7, #12]
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	3350      	adds	r3, #80	; 0x50
 80047ba:	617b      	str	r3, [r7, #20]
  tmp += (BackupRegister * 4U);
 80047bc:	68bb      	ldr	r3, [r7, #8]
 80047be:	009b      	lsls	r3, r3, #2
 80047c0:	697a      	ldr	r2, [r7, #20]
 80047c2:	4413      	add	r3, r2
 80047c4:	617b      	str	r3, [r7, #20]

  /* Write the specified register */
  *(__IO uint32_t *)tmp = (uint32_t)Data;
 80047c6:	697b      	ldr	r3, [r7, #20]
 80047c8:	687a      	ldr	r2, [r7, #4]
 80047ca:	601a      	str	r2, [r3, #0]
}
 80047cc:	bf00      	nop
 80047ce:	371c      	adds	r7, #28
 80047d0:	46bd      	mov	sp, r7
 80047d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047d6:	4770      	bx	lr

080047d8 <HAL_RTCEx_BKUPRead>:
  *          This parameter can be: RTC_BKP_DRx (where x can be from 0 to 19)
  *                                 to specify the register.
  * @retval Read value
  */
uint32_t HAL_RTCEx_BKUPRead(RTC_HandleTypeDef *hrtc, uint32_t BackupRegister)
{
 80047d8:	b480      	push	{r7}
 80047da:	b085      	sub	sp, #20
 80047dc:	af00      	add	r7, sp, #0
 80047de:	6078      	str	r0, [r7, #4]
 80047e0:	6039      	str	r1, [r7, #0]
  uint32_t tmp = 0U;
 80047e2:	2300      	movs	r3, #0
 80047e4:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t) & (hrtc->Instance->BKP0R);
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	3350      	adds	r3, #80	; 0x50
 80047ec:	60fb      	str	r3, [r7, #12]
  tmp += (BackupRegister * 4U);
 80047ee:	683b      	ldr	r3, [r7, #0]
 80047f0:	009b      	lsls	r3, r3, #2
 80047f2:	68fa      	ldr	r2, [r7, #12]
 80047f4:	4413      	add	r3, r2
 80047f6:	60fb      	str	r3, [r7, #12]

  /* Read the specified register */
  return (*(__IO uint32_t *)tmp);
 80047f8:	68fb      	ldr	r3, [r7, #12]
 80047fa:	681b      	ldr	r3, [r3, #0]
}
 80047fc:	4618      	mov	r0, r3
 80047fe:	3714      	adds	r7, #20
 8004800:	46bd      	mov	sp, r7
 8004802:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004806:	4770      	bx	lr

08004808 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004808:	b580      	push	{r7, lr}
 800480a:	b082      	sub	sp, #8
 800480c:	af00      	add	r7, sp, #0
 800480e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	2b00      	cmp	r3, #0
 8004814:	d101      	bne.n	800481a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004816:	2301      	movs	r3, #1
 8004818:	e041      	b.n	800489e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004820:	b2db      	uxtb	r3, r3
 8004822:	2b00      	cmp	r3, #0
 8004824:	d106      	bne.n	8004834 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	2200      	movs	r2, #0
 800482a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800482e:	6878      	ldr	r0, [r7, #4]
 8004830:	f000 f839 	bl	80048a6 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	2202      	movs	r2, #2
 8004838:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	681a      	ldr	r2, [r3, #0]
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	3304      	adds	r3, #4
 8004844:	4619      	mov	r1, r3
 8004846:	4610      	mov	r0, r2
 8004848:	f000 f9d8 	bl	8004bfc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	2201      	movs	r2, #1
 8004850:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	2201      	movs	r2, #1
 8004858:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	2201      	movs	r2, #1
 8004860:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	2201      	movs	r2, #1
 8004868:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	2201      	movs	r2, #1
 8004870:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	2201      	movs	r2, #1
 8004878:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	2201      	movs	r2, #1
 8004880:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	2201      	movs	r2, #1
 8004888:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	2201      	movs	r2, #1
 8004890:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	2201      	movs	r2, #1
 8004898:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800489c:	2300      	movs	r3, #0
}
 800489e:	4618      	mov	r0, r3
 80048a0:	3708      	adds	r7, #8
 80048a2:	46bd      	mov	sp, r7
 80048a4:	bd80      	pop	{r7, pc}

080048a6 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80048a6:	b480      	push	{r7}
 80048a8:	b083      	sub	sp, #12
 80048aa:	af00      	add	r7, sp, #0
 80048ac:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80048ae:	bf00      	nop
 80048b0:	370c      	adds	r7, #12
 80048b2:	46bd      	mov	sp, r7
 80048b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048b8:	4770      	bx	lr
	...

080048bc <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80048bc:	b480      	push	{r7}
 80048be:	b085      	sub	sp, #20
 80048c0:	af00      	add	r7, sp, #0
 80048c2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80048ca:	b2db      	uxtb	r3, r3
 80048cc:	2b01      	cmp	r3, #1
 80048ce:	d001      	beq.n	80048d4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80048d0:	2301      	movs	r3, #1
 80048d2:	e04e      	b.n	8004972 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	2202      	movs	r2, #2
 80048d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	68da      	ldr	r2, [r3, #12]
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	f042 0201 	orr.w	r2, r2, #1
 80048ea:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	4a23      	ldr	r2, [pc, #140]	; (8004980 <HAL_TIM_Base_Start_IT+0xc4>)
 80048f2:	4293      	cmp	r3, r2
 80048f4:	d022      	beq.n	800493c <HAL_TIM_Base_Start_IT+0x80>
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80048fe:	d01d      	beq.n	800493c <HAL_TIM_Base_Start_IT+0x80>
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	4a1f      	ldr	r2, [pc, #124]	; (8004984 <HAL_TIM_Base_Start_IT+0xc8>)
 8004906:	4293      	cmp	r3, r2
 8004908:	d018      	beq.n	800493c <HAL_TIM_Base_Start_IT+0x80>
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	4a1e      	ldr	r2, [pc, #120]	; (8004988 <HAL_TIM_Base_Start_IT+0xcc>)
 8004910:	4293      	cmp	r3, r2
 8004912:	d013      	beq.n	800493c <HAL_TIM_Base_Start_IT+0x80>
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	4a1c      	ldr	r2, [pc, #112]	; (800498c <HAL_TIM_Base_Start_IT+0xd0>)
 800491a:	4293      	cmp	r3, r2
 800491c:	d00e      	beq.n	800493c <HAL_TIM_Base_Start_IT+0x80>
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	681b      	ldr	r3, [r3, #0]
 8004922:	4a1b      	ldr	r2, [pc, #108]	; (8004990 <HAL_TIM_Base_Start_IT+0xd4>)
 8004924:	4293      	cmp	r3, r2
 8004926:	d009      	beq.n	800493c <HAL_TIM_Base_Start_IT+0x80>
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	4a19      	ldr	r2, [pc, #100]	; (8004994 <HAL_TIM_Base_Start_IT+0xd8>)
 800492e:	4293      	cmp	r3, r2
 8004930:	d004      	beq.n	800493c <HAL_TIM_Base_Start_IT+0x80>
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	4a18      	ldr	r2, [pc, #96]	; (8004998 <HAL_TIM_Base_Start_IT+0xdc>)
 8004938:	4293      	cmp	r3, r2
 800493a:	d111      	bne.n	8004960 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	689b      	ldr	r3, [r3, #8]
 8004942:	f003 0307 	and.w	r3, r3, #7
 8004946:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004948:	68fb      	ldr	r3, [r7, #12]
 800494a:	2b06      	cmp	r3, #6
 800494c:	d010      	beq.n	8004970 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	681b      	ldr	r3, [r3, #0]
 8004952:	681a      	ldr	r2, [r3, #0]
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	f042 0201 	orr.w	r2, r2, #1
 800495c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800495e:	e007      	b.n	8004970 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	681a      	ldr	r2, [r3, #0]
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	f042 0201 	orr.w	r2, r2, #1
 800496e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004970:	2300      	movs	r3, #0
}
 8004972:	4618      	mov	r0, r3
 8004974:	3714      	adds	r7, #20
 8004976:	46bd      	mov	sp, r7
 8004978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800497c:	4770      	bx	lr
 800497e:	bf00      	nop
 8004980:	40010000 	.word	0x40010000
 8004984:	40000400 	.word	0x40000400
 8004988:	40000800 	.word	0x40000800
 800498c:	40000c00 	.word	0x40000c00
 8004990:	40010400 	.word	0x40010400
 8004994:	40014000 	.word	0x40014000
 8004998:	40001800 	.word	0x40001800

0800499c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800499c:	b580      	push	{r7, lr}
 800499e:	b082      	sub	sp, #8
 80049a0:	af00      	add	r7, sp, #0
 80049a2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	691b      	ldr	r3, [r3, #16]
 80049aa:	f003 0302 	and.w	r3, r3, #2
 80049ae:	2b02      	cmp	r3, #2
 80049b0:	d122      	bne.n	80049f8 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	68db      	ldr	r3, [r3, #12]
 80049b8:	f003 0302 	and.w	r3, r3, #2
 80049bc:	2b02      	cmp	r3, #2
 80049be:	d11b      	bne.n	80049f8 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	f06f 0202 	mvn.w	r2, #2
 80049c8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	2201      	movs	r2, #1
 80049ce:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	681b      	ldr	r3, [r3, #0]
 80049d4:	699b      	ldr	r3, [r3, #24]
 80049d6:	f003 0303 	and.w	r3, r3, #3
 80049da:	2b00      	cmp	r3, #0
 80049dc:	d003      	beq.n	80049e6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80049de:	6878      	ldr	r0, [r7, #4]
 80049e0:	f000 f8ee 	bl	8004bc0 <HAL_TIM_IC_CaptureCallback>
 80049e4:	e005      	b.n	80049f2 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80049e6:	6878      	ldr	r0, [r7, #4]
 80049e8:	f000 f8e0 	bl	8004bac <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80049ec:	6878      	ldr	r0, [r7, #4]
 80049ee:	f000 f8f1 	bl	8004bd4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	2200      	movs	r2, #0
 80049f6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	691b      	ldr	r3, [r3, #16]
 80049fe:	f003 0304 	and.w	r3, r3, #4
 8004a02:	2b04      	cmp	r3, #4
 8004a04:	d122      	bne.n	8004a4c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	681b      	ldr	r3, [r3, #0]
 8004a0a:	68db      	ldr	r3, [r3, #12]
 8004a0c:	f003 0304 	and.w	r3, r3, #4
 8004a10:	2b04      	cmp	r3, #4
 8004a12:	d11b      	bne.n	8004a4c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	f06f 0204 	mvn.w	r2, #4
 8004a1c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	2202      	movs	r2, #2
 8004a22:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	681b      	ldr	r3, [r3, #0]
 8004a28:	699b      	ldr	r3, [r3, #24]
 8004a2a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004a2e:	2b00      	cmp	r3, #0
 8004a30:	d003      	beq.n	8004a3a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004a32:	6878      	ldr	r0, [r7, #4]
 8004a34:	f000 f8c4 	bl	8004bc0 <HAL_TIM_IC_CaptureCallback>
 8004a38:	e005      	b.n	8004a46 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004a3a:	6878      	ldr	r0, [r7, #4]
 8004a3c:	f000 f8b6 	bl	8004bac <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004a40:	6878      	ldr	r0, [r7, #4]
 8004a42:	f000 f8c7 	bl	8004bd4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	2200      	movs	r2, #0
 8004a4a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	691b      	ldr	r3, [r3, #16]
 8004a52:	f003 0308 	and.w	r3, r3, #8
 8004a56:	2b08      	cmp	r3, #8
 8004a58:	d122      	bne.n	8004aa0 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	68db      	ldr	r3, [r3, #12]
 8004a60:	f003 0308 	and.w	r3, r3, #8
 8004a64:	2b08      	cmp	r3, #8
 8004a66:	d11b      	bne.n	8004aa0 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	f06f 0208 	mvn.w	r2, #8
 8004a70:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	2204      	movs	r2, #4
 8004a76:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	69db      	ldr	r3, [r3, #28]
 8004a7e:	f003 0303 	and.w	r3, r3, #3
 8004a82:	2b00      	cmp	r3, #0
 8004a84:	d003      	beq.n	8004a8e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004a86:	6878      	ldr	r0, [r7, #4]
 8004a88:	f000 f89a 	bl	8004bc0 <HAL_TIM_IC_CaptureCallback>
 8004a8c:	e005      	b.n	8004a9a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004a8e:	6878      	ldr	r0, [r7, #4]
 8004a90:	f000 f88c 	bl	8004bac <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004a94:	6878      	ldr	r0, [r7, #4]
 8004a96:	f000 f89d 	bl	8004bd4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	2200      	movs	r2, #0
 8004a9e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	691b      	ldr	r3, [r3, #16]
 8004aa6:	f003 0310 	and.w	r3, r3, #16
 8004aaa:	2b10      	cmp	r3, #16
 8004aac:	d122      	bne.n	8004af4 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	68db      	ldr	r3, [r3, #12]
 8004ab4:	f003 0310 	and.w	r3, r3, #16
 8004ab8:	2b10      	cmp	r3, #16
 8004aba:	d11b      	bne.n	8004af4 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	f06f 0210 	mvn.w	r2, #16
 8004ac4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	2208      	movs	r2, #8
 8004aca:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	69db      	ldr	r3, [r3, #28]
 8004ad2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004ad6:	2b00      	cmp	r3, #0
 8004ad8:	d003      	beq.n	8004ae2 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004ada:	6878      	ldr	r0, [r7, #4]
 8004adc:	f000 f870 	bl	8004bc0 <HAL_TIM_IC_CaptureCallback>
 8004ae0:	e005      	b.n	8004aee <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004ae2:	6878      	ldr	r0, [r7, #4]
 8004ae4:	f000 f862 	bl	8004bac <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004ae8:	6878      	ldr	r0, [r7, #4]
 8004aea:	f000 f873 	bl	8004bd4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	2200      	movs	r2, #0
 8004af2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	691b      	ldr	r3, [r3, #16]
 8004afa:	f003 0301 	and.w	r3, r3, #1
 8004afe:	2b01      	cmp	r3, #1
 8004b00:	d10e      	bne.n	8004b20 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	681b      	ldr	r3, [r3, #0]
 8004b06:	68db      	ldr	r3, [r3, #12]
 8004b08:	f003 0301 	and.w	r3, r3, #1
 8004b0c:	2b01      	cmp	r3, #1
 8004b0e:	d107      	bne.n	8004b20 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	681b      	ldr	r3, [r3, #0]
 8004b14:	f06f 0201 	mvn.w	r2, #1
 8004b18:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004b1a:	6878      	ldr	r0, [r7, #4]
 8004b1c:	f7fb ffb0 	bl	8000a80 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	691b      	ldr	r3, [r3, #16]
 8004b26:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004b2a:	2b80      	cmp	r3, #128	; 0x80
 8004b2c:	d10e      	bne.n	8004b4c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	681b      	ldr	r3, [r3, #0]
 8004b32:	68db      	ldr	r3, [r3, #12]
 8004b34:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004b38:	2b80      	cmp	r3, #128	; 0x80
 8004b3a:	d107      	bne.n	8004b4c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004b44:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004b46:	6878      	ldr	r0, [r7, #4]
 8004b48:	f000 f902 	bl	8004d50 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	691b      	ldr	r3, [r3, #16]
 8004b52:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004b56:	2b40      	cmp	r3, #64	; 0x40
 8004b58:	d10e      	bne.n	8004b78 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	68db      	ldr	r3, [r3, #12]
 8004b60:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004b64:	2b40      	cmp	r3, #64	; 0x40
 8004b66:	d107      	bne.n	8004b78 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	681b      	ldr	r3, [r3, #0]
 8004b6c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004b70:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004b72:	6878      	ldr	r0, [r7, #4]
 8004b74:	f000 f838 	bl	8004be8 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	691b      	ldr	r3, [r3, #16]
 8004b7e:	f003 0320 	and.w	r3, r3, #32
 8004b82:	2b20      	cmp	r3, #32
 8004b84:	d10e      	bne.n	8004ba4 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	681b      	ldr	r3, [r3, #0]
 8004b8a:	68db      	ldr	r3, [r3, #12]
 8004b8c:	f003 0320 	and.w	r3, r3, #32
 8004b90:	2b20      	cmp	r3, #32
 8004b92:	d107      	bne.n	8004ba4 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	f06f 0220 	mvn.w	r2, #32
 8004b9c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004b9e:	6878      	ldr	r0, [r7, #4]
 8004ba0:	f000 f8cc 	bl	8004d3c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004ba4:	bf00      	nop
 8004ba6:	3708      	adds	r7, #8
 8004ba8:	46bd      	mov	sp, r7
 8004baa:	bd80      	pop	{r7, pc}

08004bac <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004bac:	b480      	push	{r7}
 8004bae:	b083      	sub	sp, #12
 8004bb0:	af00      	add	r7, sp, #0
 8004bb2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004bb4:	bf00      	nop
 8004bb6:	370c      	adds	r7, #12
 8004bb8:	46bd      	mov	sp, r7
 8004bba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bbe:	4770      	bx	lr

08004bc0 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004bc0:	b480      	push	{r7}
 8004bc2:	b083      	sub	sp, #12
 8004bc4:	af00      	add	r7, sp, #0
 8004bc6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004bc8:	bf00      	nop
 8004bca:	370c      	adds	r7, #12
 8004bcc:	46bd      	mov	sp, r7
 8004bce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bd2:	4770      	bx	lr

08004bd4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004bd4:	b480      	push	{r7}
 8004bd6:	b083      	sub	sp, #12
 8004bd8:	af00      	add	r7, sp, #0
 8004bda:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004bdc:	bf00      	nop
 8004bde:	370c      	adds	r7, #12
 8004be0:	46bd      	mov	sp, r7
 8004be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004be6:	4770      	bx	lr

08004be8 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004be8:	b480      	push	{r7}
 8004bea:	b083      	sub	sp, #12
 8004bec:	af00      	add	r7, sp, #0
 8004bee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004bf0:	bf00      	nop
 8004bf2:	370c      	adds	r7, #12
 8004bf4:	46bd      	mov	sp, r7
 8004bf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bfa:	4770      	bx	lr

08004bfc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004bfc:	b480      	push	{r7}
 8004bfe:	b085      	sub	sp, #20
 8004c00:	af00      	add	r7, sp, #0
 8004c02:	6078      	str	r0, [r7, #4]
 8004c04:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	4a40      	ldr	r2, [pc, #256]	; (8004d10 <TIM_Base_SetConfig+0x114>)
 8004c10:	4293      	cmp	r3, r2
 8004c12:	d013      	beq.n	8004c3c <TIM_Base_SetConfig+0x40>
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004c1a:	d00f      	beq.n	8004c3c <TIM_Base_SetConfig+0x40>
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	4a3d      	ldr	r2, [pc, #244]	; (8004d14 <TIM_Base_SetConfig+0x118>)
 8004c20:	4293      	cmp	r3, r2
 8004c22:	d00b      	beq.n	8004c3c <TIM_Base_SetConfig+0x40>
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	4a3c      	ldr	r2, [pc, #240]	; (8004d18 <TIM_Base_SetConfig+0x11c>)
 8004c28:	4293      	cmp	r3, r2
 8004c2a:	d007      	beq.n	8004c3c <TIM_Base_SetConfig+0x40>
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	4a3b      	ldr	r2, [pc, #236]	; (8004d1c <TIM_Base_SetConfig+0x120>)
 8004c30:	4293      	cmp	r3, r2
 8004c32:	d003      	beq.n	8004c3c <TIM_Base_SetConfig+0x40>
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	4a3a      	ldr	r2, [pc, #232]	; (8004d20 <TIM_Base_SetConfig+0x124>)
 8004c38:	4293      	cmp	r3, r2
 8004c3a:	d108      	bne.n	8004c4e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004c3c:	68fb      	ldr	r3, [r7, #12]
 8004c3e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004c42:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004c44:	683b      	ldr	r3, [r7, #0]
 8004c46:	685b      	ldr	r3, [r3, #4]
 8004c48:	68fa      	ldr	r2, [r7, #12]
 8004c4a:	4313      	orrs	r3, r2
 8004c4c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	4a2f      	ldr	r2, [pc, #188]	; (8004d10 <TIM_Base_SetConfig+0x114>)
 8004c52:	4293      	cmp	r3, r2
 8004c54:	d02b      	beq.n	8004cae <TIM_Base_SetConfig+0xb2>
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004c5c:	d027      	beq.n	8004cae <TIM_Base_SetConfig+0xb2>
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	4a2c      	ldr	r2, [pc, #176]	; (8004d14 <TIM_Base_SetConfig+0x118>)
 8004c62:	4293      	cmp	r3, r2
 8004c64:	d023      	beq.n	8004cae <TIM_Base_SetConfig+0xb2>
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	4a2b      	ldr	r2, [pc, #172]	; (8004d18 <TIM_Base_SetConfig+0x11c>)
 8004c6a:	4293      	cmp	r3, r2
 8004c6c:	d01f      	beq.n	8004cae <TIM_Base_SetConfig+0xb2>
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	4a2a      	ldr	r2, [pc, #168]	; (8004d1c <TIM_Base_SetConfig+0x120>)
 8004c72:	4293      	cmp	r3, r2
 8004c74:	d01b      	beq.n	8004cae <TIM_Base_SetConfig+0xb2>
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	4a29      	ldr	r2, [pc, #164]	; (8004d20 <TIM_Base_SetConfig+0x124>)
 8004c7a:	4293      	cmp	r3, r2
 8004c7c:	d017      	beq.n	8004cae <TIM_Base_SetConfig+0xb2>
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	4a28      	ldr	r2, [pc, #160]	; (8004d24 <TIM_Base_SetConfig+0x128>)
 8004c82:	4293      	cmp	r3, r2
 8004c84:	d013      	beq.n	8004cae <TIM_Base_SetConfig+0xb2>
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	4a27      	ldr	r2, [pc, #156]	; (8004d28 <TIM_Base_SetConfig+0x12c>)
 8004c8a:	4293      	cmp	r3, r2
 8004c8c:	d00f      	beq.n	8004cae <TIM_Base_SetConfig+0xb2>
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	4a26      	ldr	r2, [pc, #152]	; (8004d2c <TIM_Base_SetConfig+0x130>)
 8004c92:	4293      	cmp	r3, r2
 8004c94:	d00b      	beq.n	8004cae <TIM_Base_SetConfig+0xb2>
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	4a25      	ldr	r2, [pc, #148]	; (8004d30 <TIM_Base_SetConfig+0x134>)
 8004c9a:	4293      	cmp	r3, r2
 8004c9c:	d007      	beq.n	8004cae <TIM_Base_SetConfig+0xb2>
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	4a24      	ldr	r2, [pc, #144]	; (8004d34 <TIM_Base_SetConfig+0x138>)
 8004ca2:	4293      	cmp	r3, r2
 8004ca4:	d003      	beq.n	8004cae <TIM_Base_SetConfig+0xb2>
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	4a23      	ldr	r2, [pc, #140]	; (8004d38 <TIM_Base_SetConfig+0x13c>)
 8004caa:	4293      	cmp	r3, r2
 8004cac:	d108      	bne.n	8004cc0 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004cae:	68fb      	ldr	r3, [r7, #12]
 8004cb0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004cb4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004cb6:	683b      	ldr	r3, [r7, #0]
 8004cb8:	68db      	ldr	r3, [r3, #12]
 8004cba:	68fa      	ldr	r2, [r7, #12]
 8004cbc:	4313      	orrs	r3, r2
 8004cbe:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004cc0:	68fb      	ldr	r3, [r7, #12]
 8004cc2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004cc6:	683b      	ldr	r3, [r7, #0]
 8004cc8:	695b      	ldr	r3, [r3, #20]
 8004cca:	4313      	orrs	r3, r2
 8004ccc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	68fa      	ldr	r2, [r7, #12]
 8004cd2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004cd4:	683b      	ldr	r3, [r7, #0]
 8004cd6:	689a      	ldr	r2, [r3, #8]
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004cdc:	683b      	ldr	r3, [r7, #0]
 8004cde:	681a      	ldr	r2, [r3, #0]
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	4a0a      	ldr	r2, [pc, #40]	; (8004d10 <TIM_Base_SetConfig+0x114>)
 8004ce8:	4293      	cmp	r3, r2
 8004cea:	d003      	beq.n	8004cf4 <TIM_Base_SetConfig+0xf8>
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	4a0c      	ldr	r2, [pc, #48]	; (8004d20 <TIM_Base_SetConfig+0x124>)
 8004cf0:	4293      	cmp	r3, r2
 8004cf2:	d103      	bne.n	8004cfc <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004cf4:	683b      	ldr	r3, [r7, #0]
 8004cf6:	691a      	ldr	r2, [r3, #16]
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	2201      	movs	r2, #1
 8004d00:	615a      	str	r2, [r3, #20]
}
 8004d02:	bf00      	nop
 8004d04:	3714      	adds	r7, #20
 8004d06:	46bd      	mov	sp, r7
 8004d08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d0c:	4770      	bx	lr
 8004d0e:	bf00      	nop
 8004d10:	40010000 	.word	0x40010000
 8004d14:	40000400 	.word	0x40000400
 8004d18:	40000800 	.word	0x40000800
 8004d1c:	40000c00 	.word	0x40000c00
 8004d20:	40010400 	.word	0x40010400
 8004d24:	40014000 	.word	0x40014000
 8004d28:	40014400 	.word	0x40014400
 8004d2c:	40014800 	.word	0x40014800
 8004d30:	40001800 	.word	0x40001800
 8004d34:	40001c00 	.word	0x40001c00
 8004d38:	40002000 	.word	0x40002000

08004d3c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004d3c:	b480      	push	{r7}
 8004d3e:	b083      	sub	sp, #12
 8004d40:	af00      	add	r7, sp, #0
 8004d42:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004d44:	bf00      	nop
 8004d46:	370c      	adds	r7, #12
 8004d48:	46bd      	mov	sp, r7
 8004d4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d4e:	4770      	bx	lr

08004d50 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004d50:	b480      	push	{r7}
 8004d52:	b083      	sub	sp, #12
 8004d54:	af00      	add	r7, sp, #0
 8004d56:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004d58:	bf00      	nop
 8004d5a:	370c      	adds	r7, #12
 8004d5c:	46bd      	mov	sp, r7
 8004d5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d62:	4770      	bx	lr

08004d64 <MX_LWIP_Init>:

/**
  * LwIP initialization function
  */
void MX_LWIP_Init(void)
{
 8004d64:	b5b0      	push	{r4, r5, r7, lr}
 8004d66:	b08c      	sub	sp, #48	; 0x30
 8004d68:	af04      	add	r7, sp, #16
  /* IP addresses initialization */
  IP_ADDRESS[0] = 192;
 8004d6a:	4b96      	ldr	r3, [pc, #600]	; (8004fc4 <MX_LWIP_Init+0x260>)
 8004d6c:	22c0      	movs	r2, #192	; 0xc0
 8004d6e:	701a      	strb	r2, [r3, #0]
  IP_ADDRESS[1] = 168;
 8004d70:	4b94      	ldr	r3, [pc, #592]	; (8004fc4 <MX_LWIP_Init+0x260>)
 8004d72:	22a8      	movs	r2, #168	; 0xa8
 8004d74:	705a      	strb	r2, [r3, #1]
  IP_ADDRESS[2] = 50;
 8004d76:	4b93      	ldr	r3, [pc, #588]	; (8004fc4 <MX_LWIP_Init+0x260>)
 8004d78:	2232      	movs	r2, #50	; 0x32
 8004d7a:	709a      	strb	r2, [r3, #2]
  IP_ADDRESS[3] = 10;
 8004d7c:	4b91      	ldr	r3, [pc, #580]	; (8004fc4 <MX_LWIP_Init+0x260>)
 8004d7e:	220a      	movs	r2, #10
 8004d80:	70da      	strb	r2, [r3, #3]
  NETMASK_ADDRESS[0] = 255;
 8004d82:	4b91      	ldr	r3, [pc, #580]	; (8004fc8 <MX_LWIP_Init+0x264>)
 8004d84:	22ff      	movs	r2, #255	; 0xff
 8004d86:	701a      	strb	r2, [r3, #0]
  NETMASK_ADDRESS[1] = 255;
 8004d88:	4b8f      	ldr	r3, [pc, #572]	; (8004fc8 <MX_LWIP_Init+0x264>)
 8004d8a:	22ff      	movs	r2, #255	; 0xff
 8004d8c:	705a      	strb	r2, [r3, #1]
  NETMASK_ADDRESS[2] = 255;
 8004d8e:	4b8e      	ldr	r3, [pc, #568]	; (8004fc8 <MX_LWIP_Init+0x264>)
 8004d90:	22ff      	movs	r2, #255	; 0xff
 8004d92:	709a      	strb	r2, [r3, #2]
  NETMASK_ADDRESS[3] = 0;
 8004d94:	4b8c      	ldr	r3, [pc, #560]	; (8004fc8 <MX_LWIP_Init+0x264>)
 8004d96:	2200      	movs	r2, #0
 8004d98:	70da      	strb	r2, [r3, #3]
  GATEWAY_ADDRESS[0] = 192;
 8004d9a:	4b8c      	ldr	r3, [pc, #560]	; (8004fcc <MX_LWIP_Init+0x268>)
 8004d9c:	22c0      	movs	r2, #192	; 0xc0
 8004d9e:	701a      	strb	r2, [r3, #0]
  GATEWAY_ADDRESS[1] = 168;
 8004da0:	4b8a      	ldr	r3, [pc, #552]	; (8004fcc <MX_LWIP_Init+0x268>)
 8004da2:	22a8      	movs	r2, #168	; 0xa8
 8004da4:	705a      	strb	r2, [r3, #1]
  GATEWAY_ADDRESS[2] = 50;
 8004da6:	4b89      	ldr	r3, [pc, #548]	; (8004fcc <MX_LWIP_Init+0x268>)
 8004da8:	2232      	movs	r2, #50	; 0x32
 8004daa:	709a      	strb	r2, [r3, #2]
  GATEWAY_ADDRESS[3] = 1;
 8004dac:	4b87      	ldr	r3, [pc, #540]	; (8004fcc <MX_LWIP_Init+0x268>)
 8004dae:	2201      	movs	r2, #1
 8004db0:	70da      	strb	r2, [r3, #3]

/* USER CODE BEGIN IP_ADDRESSES */
/* USER CODE END IP_ADDRESSES */

  /* Initilialize the LwIP stack with RTOS */
  tcpip_init( NULL, NULL );
 8004db2:	2100      	movs	r1, #0
 8004db4:	2000      	movs	r0, #0
 8004db6:	f003 fe19 	bl	80089ec <tcpip_init>

  /* IP addresses initialization without DHCP (IPv4) */
  IP4_ADDR(&ipaddr, IP_ADDRESS[0], IP_ADDRESS[1], IP_ADDRESS[2], IP_ADDRESS[3]);
 8004dba:	4b82      	ldr	r3, [pc, #520]	; (8004fc4 <MX_LWIP_Init+0x260>)
 8004dbc:	781b      	ldrb	r3, [r3, #0]
 8004dbe:	061a      	lsls	r2, r3, #24
 8004dc0:	4b80      	ldr	r3, [pc, #512]	; (8004fc4 <MX_LWIP_Init+0x260>)
 8004dc2:	785b      	ldrb	r3, [r3, #1]
 8004dc4:	041b      	lsls	r3, r3, #16
 8004dc6:	431a      	orrs	r2, r3
 8004dc8:	4b7e      	ldr	r3, [pc, #504]	; (8004fc4 <MX_LWIP_Init+0x260>)
 8004dca:	789b      	ldrb	r3, [r3, #2]
 8004dcc:	021b      	lsls	r3, r3, #8
 8004dce:	4313      	orrs	r3, r2
 8004dd0:	4a7c      	ldr	r2, [pc, #496]	; (8004fc4 <MX_LWIP_Init+0x260>)
 8004dd2:	78d2      	ldrb	r2, [r2, #3]
 8004dd4:	4313      	orrs	r3, r2
 8004dd6:	061a      	lsls	r2, r3, #24
 8004dd8:	4b7a      	ldr	r3, [pc, #488]	; (8004fc4 <MX_LWIP_Init+0x260>)
 8004dda:	781b      	ldrb	r3, [r3, #0]
 8004ddc:	0619      	lsls	r1, r3, #24
 8004dde:	4b79      	ldr	r3, [pc, #484]	; (8004fc4 <MX_LWIP_Init+0x260>)
 8004de0:	785b      	ldrb	r3, [r3, #1]
 8004de2:	041b      	lsls	r3, r3, #16
 8004de4:	4319      	orrs	r1, r3
 8004de6:	4b77      	ldr	r3, [pc, #476]	; (8004fc4 <MX_LWIP_Init+0x260>)
 8004de8:	789b      	ldrb	r3, [r3, #2]
 8004dea:	021b      	lsls	r3, r3, #8
 8004dec:	430b      	orrs	r3, r1
 8004dee:	4975      	ldr	r1, [pc, #468]	; (8004fc4 <MX_LWIP_Init+0x260>)
 8004df0:	78c9      	ldrb	r1, [r1, #3]
 8004df2:	430b      	orrs	r3, r1
 8004df4:	021b      	lsls	r3, r3, #8
 8004df6:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8004dfa:	431a      	orrs	r2, r3
 8004dfc:	4b71      	ldr	r3, [pc, #452]	; (8004fc4 <MX_LWIP_Init+0x260>)
 8004dfe:	781b      	ldrb	r3, [r3, #0]
 8004e00:	0619      	lsls	r1, r3, #24
 8004e02:	4b70      	ldr	r3, [pc, #448]	; (8004fc4 <MX_LWIP_Init+0x260>)
 8004e04:	785b      	ldrb	r3, [r3, #1]
 8004e06:	041b      	lsls	r3, r3, #16
 8004e08:	4319      	orrs	r1, r3
 8004e0a:	4b6e      	ldr	r3, [pc, #440]	; (8004fc4 <MX_LWIP_Init+0x260>)
 8004e0c:	789b      	ldrb	r3, [r3, #2]
 8004e0e:	021b      	lsls	r3, r3, #8
 8004e10:	430b      	orrs	r3, r1
 8004e12:	496c      	ldr	r1, [pc, #432]	; (8004fc4 <MX_LWIP_Init+0x260>)
 8004e14:	78c9      	ldrb	r1, [r1, #3]
 8004e16:	430b      	orrs	r3, r1
 8004e18:	0a1b      	lsrs	r3, r3, #8
 8004e1a:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8004e1e:	431a      	orrs	r2, r3
 8004e20:	4b68      	ldr	r3, [pc, #416]	; (8004fc4 <MX_LWIP_Init+0x260>)
 8004e22:	781b      	ldrb	r3, [r3, #0]
 8004e24:	0619      	lsls	r1, r3, #24
 8004e26:	4b67      	ldr	r3, [pc, #412]	; (8004fc4 <MX_LWIP_Init+0x260>)
 8004e28:	785b      	ldrb	r3, [r3, #1]
 8004e2a:	041b      	lsls	r3, r3, #16
 8004e2c:	4319      	orrs	r1, r3
 8004e2e:	4b65      	ldr	r3, [pc, #404]	; (8004fc4 <MX_LWIP_Init+0x260>)
 8004e30:	789b      	ldrb	r3, [r3, #2]
 8004e32:	021b      	lsls	r3, r3, #8
 8004e34:	430b      	orrs	r3, r1
 8004e36:	4963      	ldr	r1, [pc, #396]	; (8004fc4 <MX_LWIP_Init+0x260>)
 8004e38:	78c9      	ldrb	r1, [r1, #3]
 8004e3a:	430b      	orrs	r3, r1
 8004e3c:	0e1b      	lsrs	r3, r3, #24
 8004e3e:	4313      	orrs	r3, r2
 8004e40:	4a63      	ldr	r2, [pc, #396]	; (8004fd0 <MX_LWIP_Init+0x26c>)
 8004e42:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&netmask, NETMASK_ADDRESS[0], NETMASK_ADDRESS[1] , NETMASK_ADDRESS[2], NETMASK_ADDRESS[3]);
 8004e44:	4b60      	ldr	r3, [pc, #384]	; (8004fc8 <MX_LWIP_Init+0x264>)
 8004e46:	781b      	ldrb	r3, [r3, #0]
 8004e48:	061a      	lsls	r2, r3, #24
 8004e4a:	4b5f      	ldr	r3, [pc, #380]	; (8004fc8 <MX_LWIP_Init+0x264>)
 8004e4c:	785b      	ldrb	r3, [r3, #1]
 8004e4e:	041b      	lsls	r3, r3, #16
 8004e50:	431a      	orrs	r2, r3
 8004e52:	4b5d      	ldr	r3, [pc, #372]	; (8004fc8 <MX_LWIP_Init+0x264>)
 8004e54:	789b      	ldrb	r3, [r3, #2]
 8004e56:	021b      	lsls	r3, r3, #8
 8004e58:	4313      	orrs	r3, r2
 8004e5a:	4a5b      	ldr	r2, [pc, #364]	; (8004fc8 <MX_LWIP_Init+0x264>)
 8004e5c:	78d2      	ldrb	r2, [r2, #3]
 8004e5e:	4313      	orrs	r3, r2
 8004e60:	061a      	lsls	r2, r3, #24
 8004e62:	4b59      	ldr	r3, [pc, #356]	; (8004fc8 <MX_LWIP_Init+0x264>)
 8004e64:	781b      	ldrb	r3, [r3, #0]
 8004e66:	0619      	lsls	r1, r3, #24
 8004e68:	4b57      	ldr	r3, [pc, #348]	; (8004fc8 <MX_LWIP_Init+0x264>)
 8004e6a:	785b      	ldrb	r3, [r3, #1]
 8004e6c:	041b      	lsls	r3, r3, #16
 8004e6e:	4319      	orrs	r1, r3
 8004e70:	4b55      	ldr	r3, [pc, #340]	; (8004fc8 <MX_LWIP_Init+0x264>)
 8004e72:	789b      	ldrb	r3, [r3, #2]
 8004e74:	021b      	lsls	r3, r3, #8
 8004e76:	430b      	orrs	r3, r1
 8004e78:	4953      	ldr	r1, [pc, #332]	; (8004fc8 <MX_LWIP_Init+0x264>)
 8004e7a:	78c9      	ldrb	r1, [r1, #3]
 8004e7c:	430b      	orrs	r3, r1
 8004e7e:	021b      	lsls	r3, r3, #8
 8004e80:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8004e84:	431a      	orrs	r2, r3
 8004e86:	4b50      	ldr	r3, [pc, #320]	; (8004fc8 <MX_LWIP_Init+0x264>)
 8004e88:	781b      	ldrb	r3, [r3, #0]
 8004e8a:	0619      	lsls	r1, r3, #24
 8004e8c:	4b4e      	ldr	r3, [pc, #312]	; (8004fc8 <MX_LWIP_Init+0x264>)
 8004e8e:	785b      	ldrb	r3, [r3, #1]
 8004e90:	041b      	lsls	r3, r3, #16
 8004e92:	4319      	orrs	r1, r3
 8004e94:	4b4c      	ldr	r3, [pc, #304]	; (8004fc8 <MX_LWIP_Init+0x264>)
 8004e96:	789b      	ldrb	r3, [r3, #2]
 8004e98:	021b      	lsls	r3, r3, #8
 8004e9a:	430b      	orrs	r3, r1
 8004e9c:	494a      	ldr	r1, [pc, #296]	; (8004fc8 <MX_LWIP_Init+0x264>)
 8004e9e:	78c9      	ldrb	r1, [r1, #3]
 8004ea0:	430b      	orrs	r3, r1
 8004ea2:	0a1b      	lsrs	r3, r3, #8
 8004ea4:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8004ea8:	431a      	orrs	r2, r3
 8004eaa:	4b47      	ldr	r3, [pc, #284]	; (8004fc8 <MX_LWIP_Init+0x264>)
 8004eac:	781b      	ldrb	r3, [r3, #0]
 8004eae:	0619      	lsls	r1, r3, #24
 8004eb0:	4b45      	ldr	r3, [pc, #276]	; (8004fc8 <MX_LWIP_Init+0x264>)
 8004eb2:	785b      	ldrb	r3, [r3, #1]
 8004eb4:	041b      	lsls	r3, r3, #16
 8004eb6:	4319      	orrs	r1, r3
 8004eb8:	4b43      	ldr	r3, [pc, #268]	; (8004fc8 <MX_LWIP_Init+0x264>)
 8004eba:	789b      	ldrb	r3, [r3, #2]
 8004ebc:	021b      	lsls	r3, r3, #8
 8004ebe:	430b      	orrs	r3, r1
 8004ec0:	4941      	ldr	r1, [pc, #260]	; (8004fc8 <MX_LWIP_Init+0x264>)
 8004ec2:	78c9      	ldrb	r1, [r1, #3]
 8004ec4:	430b      	orrs	r3, r1
 8004ec6:	0e1b      	lsrs	r3, r3, #24
 8004ec8:	4313      	orrs	r3, r2
 8004eca:	4a42      	ldr	r2, [pc, #264]	; (8004fd4 <MX_LWIP_Init+0x270>)
 8004ecc:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&gw, GATEWAY_ADDRESS[0], GATEWAY_ADDRESS[1], GATEWAY_ADDRESS[2], GATEWAY_ADDRESS[3]);
 8004ece:	4b3f      	ldr	r3, [pc, #252]	; (8004fcc <MX_LWIP_Init+0x268>)
 8004ed0:	781b      	ldrb	r3, [r3, #0]
 8004ed2:	061a      	lsls	r2, r3, #24
 8004ed4:	4b3d      	ldr	r3, [pc, #244]	; (8004fcc <MX_LWIP_Init+0x268>)
 8004ed6:	785b      	ldrb	r3, [r3, #1]
 8004ed8:	041b      	lsls	r3, r3, #16
 8004eda:	431a      	orrs	r2, r3
 8004edc:	4b3b      	ldr	r3, [pc, #236]	; (8004fcc <MX_LWIP_Init+0x268>)
 8004ede:	789b      	ldrb	r3, [r3, #2]
 8004ee0:	021b      	lsls	r3, r3, #8
 8004ee2:	4313      	orrs	r3, r2
 8004ee4:	4a39      	ldr	r2, [pc, #228]	; (8004fcc <MX_LWIP_Init+0x268>)
 8004ee6:	78d2      	ldrb	r2, [r2, #3]
 8004ee8:	4313      	orrs	r3, r2
 8004eea:	061a      	lsls	r2, r3, #24
 8004eec:	4b37      	ldr	r3, [pc, #220]	; (8004fcc <MX_LWIP_Init+0x268>)
 8004eee:	781b      	ldrb	r3, [r3, #0]
 8004ef0:	0619      	lsls	r1, r3, #24
 8004ef2:	4b36      	ldr	r3, [pc, #216]	; (8004fcc <MX_LWIP_Init+0x268>)
 8004ef4:	785b      	ldrb	r3, [r3, #1]
 8004ef6:	041b      	lsls	r3, r3, #16
 8004ef8:	4319      	orrs	r1, r3
 8004efa:	4b34      	ldr	r3, [pc, #208]	; (8004fcc <MX_LWIP_Init+0x268>)
 8004efc:	789b      	ldrb	r3, [r3, #2]
 8004efe:	021b      	lsls	r3, r3, #8
 8004f00:	430b      	orrs	r3, r1
 8004f02:	4932      	ldr	r1, [pc, #200]	; (8004fcc <MX_LWIP_Init+0x268>)
 8004f04:	78c9      	ldrb	r1, [r1, #3]
 8004f06:	430b      	orrs	r3, r1
 8004f08:	021b      	lsls	r3, r3, #8
 8004f0a:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8004f0e:	431a      	orrs	r2, r3
 8004f10:	4b2e      	ldr	r3, [pc, #184]	; (8004fcc <MX_LWIP_Init+0x268>)
 8004f12:	781b      	ldrb	r3, [r3, #0]
 8004f14:	0619      	lsls	r1, r3, #24
 8004f16:	4b2d      	ldr	r3, [pc, #180]	; (8004fcc <MX_LWIP_Init+0x268>)
 8004f18:	785b      	ldrb	r3, [r3, #1]
 8004f1a:	041b      	lsls	r3, r3, #16
 8004f1c:	4319      	orrs	r1, r3
 8004f1e:	4b2b      	ldr	r3, [pc, #172]	; (8004fcc <MX_LWIP_Init+0x268>)
 8004f20:	789b      	ldrb	r3, [r3, #2]
 8004f22:	021b      	lsls	r3, r3, #8
 8004f24:	430b      	orrs	r3, r1
 8004f26:	4929      	ldr	r1, [pc, #164]	; (8004fcc <MX_LWIP_Init+0x268>)
 8004f28:	78c9      	ldrb	r1, [r1, #3]
 8004f2a:	430b      	orrs	r3, r1
 8004f2c:	0a1b      	lsrs	r3, r3, #8
 8004f2e:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8004f32:	431a      	orrs	r2, r3
 8004f34:	4b25      	ldr	r3, [pc, #148]	; (8004fcc <MX_LWIP_Init+0x268>)
 8004f36:	781b      	ldrb	r3, [r3, #0]
 8004f38:	0619      	lsls	r1, r3, #24
 8004f3a:	4b24      	ldr	r3, [pc, #144]	; (8004fcc <MX_LWIP_Init+0x268>)
 8004f3c:	785b      	ldrb	r3, [r3, #1]
 8004f3e:	041b      	lsls	r3, r3, #16
 8004f40:	4319      	orrs	r1, r3
 8004f42:	4b22      	ldr	r3, [pc, #136]	; (8004fcc <MX_LWIP_Init+0x268>)
 8004f44:	789b      	ldrb	r3, [r3, #2]
 8004f46:	021b      	lsls	r3, r3, #8
 8004f48:	430b      	orrs	r3, r1
 8004f4a:	4920      	ldr	r1, [pc, #128]	; (8004fcc <MX_LWIP_Init+0x268>)
 8004f4c:	78c9      	ldrb	r1, [r1, #3]
 8004f4e:	430b      	orrs	r3, r1
 8004f50:	0e1b      	lsrs	r3, r3, #24
 8004f52:	4313      	orrs	r3, r2
 8004f54:	4a20      	ldr	r2, [pc, #128]	; (8004fd8 <MX_LWIP_Init+0x274>)
 8004f56:	6013      	str	r3, [r2, #0]

  /* add the network interface (IPv4/IPv6) with RTOS */
  netif_add(&gnetif, &ipaddr, &netmask, &gw, NULL, &ethernetif_init, &tcpip_input);
 8004f58:	4b20      	ldr	r3, [pc, #128]	; (8004fdc <MX_LWIP_Init+0x278>)
 8004f5a:	9302      	str	r3, [sp, #8]
 8004f5c:	4b20      	ldr	r3, [pc, #128]	; (8004fe0 <MX_LWIP_Init+0x27c>)
 8004f5e:	9301      	str	r3, [sp, #4]
 8004f60:	2300      	movs	r3, #0
 8004f62:	9300      	str	r3, [sp, #0]
 8004f64:	4b1c      	ldr	r3, [pc, #112]	; (8004fd8 <MX_LWIP_Init+0x274>)
 8004f66:	4a1b      	ldr	r2, [pc, #108]	; (8004fd4 <MX_LWIP_Init+0x270>)
 8004f68:	4919      	ldr	r1, [pc, #100]	; (8004fd0 <MX_LWIP_Init+0x26c>)
 8004f6a:	481e      	ldr	r0, [pc, #120]	; (8004fe4 <MX_LWIP_Init+0x280>)
 8004f6c:	f004 fbd8 	bl	8009720 <netif_add>

  /* Registers the default network interface */
  netif_set_default(&gnetif);
 8004f70:	481c      	ldr	r0, [pc, #112]	; (8004fe4 <MX_LWIP_Init+0x280>)
 8004f72:	f004 fd87 	bl	8009a84 <netif_set_default>

  if (netif_is_link_up(&gnetif))
 8004f76:	4b1b      	ldr	r3, [pc, #108]	; (8004fe4 <MX_LWIP_Init+0x280>)
 8004f78:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8004f7c:	089b      	lsrs	r3, r3, #2
 8004f7e:	f003 0301 	and.w	r3, r3, #1
 8004f82:	b2db      	uxtb	r3, r3
 8004f84:	2b00      	cmp	r3, #0
 8004f86:	d003      	beq.n	8004f90 <MX_LWIP_Init+0x22c>
  {
    /* When the netif is fully configured this function must be called */
    netif_set_up(&gnetif);
 8004f88:	4816      	ldr	r0, [pc, #88]	; (8004fe4 <MX_LWIP_Init+0x280>)
 8004f8a:	f004 fd8b 	bl	8009aa4 <netif_set_up>
 8004f8e:	e002      	b.n	8004f96 <MX_LWIP_Init+0x232>
  }
  else
  {
    /* When the netif link is down this function must be called */
    netif_set_down(&gnetif);
 8004f90:	4814      	ldr	r0, [pc, #80]	; (8004fe4 <MX_LWIP_Init+0x280>)
 8004f92:	f004 fdf3 	bl	8009b7c <netif_set_down>
  }

  /* Set the link callback function, this function is called on change of link status*/
  netif_set_link_callback(&gnetif, ethernet_link_status_updated);
 8004f96:	4914      	ldr	r1, [pc, #80]	; (8004fe8 <MX_LWIP_Init+0x284>)
 8004f98:	4812      	ldr	r0, [pc, #72]	; (8004fe4 <MX_LWIP_Init+0x280>)
 8004f9a:	f004 fe85 	bl	8009ca8 <netif_set_link_callback>

  /* Create the Ethernet link handler thread */
/* USER CODE BEGIN H7_OS_THREAD_DEF_CREATE_CMSIS_RTOS_V1 */
  osThreadDef(EthLink, ethernet_link_thread, osPriorityBelowNormal, 0, configMINIMAL_STACK_SIZE *2);
 8004f9e:	4b13      	ldr	r3, [pc, #76]	; (8004fec <MX_LWIP_Init+0x288>)
 8004fa0:	1d3c      	adds	r4, r7, #4
 8004fa2:	461d      	mov	r5, r3
 8004fa4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004fa6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004fa8:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8004fac:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  osThreadCreate (osThread(EthLink), &gnetif);
 8004fb0:	1d3b      	adds	r3, r7, #4
 8004fb2:	490c      	ldr	r1, [pc, #48]	; (8004fe4 <MX_LWIP_Init+0x280>)
 8004fb4:	4618      	mov	r0, r3
 8004fb6:	f000 fd07 	bl	80059c8 <osThreadCreate>
/* USER CODE END H7_OS_THREAD_DEF_CREATE_CMSIS_RTOS_V1 */

/* USER CODE BEGIN 3 */

/* USER CODE END 3 */
}
 8004fba:	bf00      	nop
 8004fbc:	3720      	adds	r7, #32
 8004fbe:	46bd      	mov	sp, r7
 8004fc0:	bdb0      	pop	{r4, r5, r7, pc}
 8004fc2:	bf00      	nop
 8004fc4:	20000450 	.word	0x20000450
 8004fc8:	20000454 	.word	0x20000454
 8004fcc:	20000458 	.word	0x20000458
 8004fd0:	20000444 	.word	0x20000444
 8004fd4:	20000448 	.word	0x20000448
 8004fd8:	2000044c 	.word	0x2000044c
 8004fdc:	08008929 	.word	0x08008929
 8004fe0:	08005491 	.word	0x08005491
 8004fe4:	20000410 	.word	0x20000410
 8004fe8:	08004ff1 	.word	0x08004ff1
 8004fec:	08014830 	.word	0x08014830

08004ff0 <ethernet_link_status_updated>:
  * @brief  Notify the User about the network interface config status
  * @param  netif: the network interface
  * @retval None
  */
static void ethernet_link_status_updated(struct netif *netif)
{
 8004ff0:	b480      	push	{r7}
 8004ff2:	b083      	sub	sp, #12
 8004ff4:	af00      	add	r7, sp, #0
 8004ff6:	6078      	str	r0, [r7, #4]
  else /* netif is down */
  {
/* USER CODE BEGIN 6 */
/* USER CODE END 6 */
  }
}
 8004ff8:	bf00      	nop
 8004ffa:	370c      	adds	r7, #12
 8004ffc:	46bd      	mov	sp, r7
 8004ffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005002:	4770      	bx	lr

08005004 <HAL_ETH_RxCpltCallback>:
  * @brief  Ethernet Rx Transfer completed callback
  * @param  handlerEth: ETH handler
  * @retval None
  */
void HAL_ETH_RxCpltCallback(ETH_HandleTypeDef *handlerEth)
{
 8005004:	b580      	push	{r7, lr}
 8005006:	b082      	sub	sp, #8
 8005008:	af00      	add	r7, sp, #0
 800500a:	6078      	str	r0, [r7, #4]
  osSemaphoreRelease(RxPktSemaphore);
 800500c:	4b04      	ldr	r3, [pc, #16]	; (8005020 <HAL_ETH_RxCpltCallback+0x1c>)
 800500e:	681b      	ldr	r3, [r3, #0]
 8005010:	4618      	mov	r0, r3
 8005012:	f000 fe23 	bl	8005c5c <osSemaphoreRelease>
}
 8005016:	bf00      	nop
 8005018:	3708      	adds	r7, #8
 800501a:	46bd      	mov	sp, r7
 800501c:	bd80      	pop	{r7, pc}
 800501e:	bf00      	nop
 8005020:	20004f34 	.word	0x20004f34

08005024 <HAL_ETH_TxCpltCallback>:
  * @brief  Ethernet Tx Transfer completed callback
  * @param  handlerEth: ETH handler
  * @retval None
  */
void HAL_ETH_TxCpltCallback(ETH_HandleTypeDef *handlerEth)
{
 8005024:	b580      	push	{r7, lr}
 8005026:	b082      	sub	sp, #8
 8005028:	af00      	add	r7, sp, #0
 800502a:	6078      	str	r0, [r7, #4]
  osSemaphoreRelease(TxPktSemaphore);
 800502c:	4b04      	ldr	r3, [pc, #16]	; (8005040 <HAL_ETH_TxCpltCallback+0x1c>)
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	4618      	mov	r0, r3
 8005032:	f000 fe13 	bl	8005c5c <osSemaphoreRelease>
}
 8005036:	bf00      	nop
 8005038:	3708      	adds	r7, #8
 800503a:	46bd      	mov	sp, r7
 800503c:	bd80      	pop	{r7, pc}
 800503e:	bf00      	nop
 8005040:	20004f38 	.word	0x20004f38

08005044 <HAL_ETH_ErrorCallback>:
  * @brief  Ethernet DMA transfer error callback
  * @param  handlerEth: ETH handler
  * @retval None
  */
void HAL_ETH_ErrorCallback(ETH_HandleTypeDef *handlerEth)
{
 8005044:	b580      	push	{r7, lr}
 8005046:	b082      	sub	sp, #8
 8005048:	af00      	add	r7, sp, #0
 800504a:	6078      	str	r0, [r7, #4]
  if((HAL_ETH_GetDMAError(handlerEth) & ETH_DMASR_RBUS) == ETH_DMASR_RBUS)
 800504c:	6878      	ldr	r0, [r7, #4]
 800504e:	f7fd fabb 	bl	80025c8 <HAL_ETH_GetDMAError>
 8005052:	4603      	mov	r3, r0
 8005054:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005058:	2b80      	cmp	r3, #128	; 0x80
 800505a:	d104      	bne.n	8005066 <HAL_ETH_ErrorCallback+0x22>
  {
     osSemaphoreRelease(RxPktSemaphore);
 800505c:	4b04      	ldr	r3, [pc, #16]	; (8005070 <HAL_ETH_ErrorCallback+0x2c>)
 800505e:	681b      	ldr	r3, [r3, #0]
 8005060:	4618      	mov	r0, r3
 8005062:	f000 fdfb 	bl	8005c5c <osSemaphoreRelease>
  }
}
 8005066:	bf00      	nop
 8005068:	3708      	adds	r7, #8
 800506a:	46bd      	mov	sp, r7
 800506c:	bd80      	pop	{r7, pc}
 800506e:	bf00      	nop
 8005070:	20004f34 	.word	0x20004f34

08005074 <low_level_init>:
 *
 * @param netif the already initialized lwip network interface structure
 *        for this ethernetif
 */
static void low_level_init(struct netif *netif)
{
 8005074:	b5b0      	push	{r4, r5, r7, lr}
 8005076:	b0a8      	sub	sp, #160	; 0xa0
 8005078:	af00      	add	r7, sp, #0
 800507a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_eth_init_status = HAL_OK;
 800507c:	2300      	movs	r3, #0
 800507e:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
  uint32_t duplex, speed = 0;
 8005082:	2300      	movs	r3, #0
 8005084:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  int32_t PHYLinkState = 0;
 8005088:	2300      	movs	r3, #0
 800508a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  ETH_MACConfigTypeDef MACConf = {0};
 800508e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8005092:	2264      	movs	r2, #100	; 0x64
 8005094:	2100      	movs	r1, #0
 8005096:	4618      	mov	r0, r3
 8005098:	f00e fbc9 	bl	801382e <memset>
  /* Start ETH HAL Init */

   uint8_t MACAddr[6] ;
  heth.Instance = ETH;
 800509c:	4b85      	ldr	r3, [pc, #532]	; (80052b4 <low_level_init+0x240>)
 800509e:	4a86      	ldr	r2, [pc, #536]	; (80052b8 <low_level_init+0x244>)
 80050a0:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 80050a2:	2300      	movs	r3, #0
 80050a4:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  MACAddr[1] = 0x80;
 80050a8:	2380      	movs	r3, #128	; 0x80
 80050aa:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  MACAddr[2] = 0xE1;
 80050ae:	23e1      	movs	r3, #225	; 0xe1
 80050b0:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  MACAddr[3] = 0x00;
 80050b4:	2300      	movs	r3, #0
 80050b6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  MACAddr[4] = 0x00;
 80050ba:	2300      	movs	r3, #0
 80050bc:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
  MACAddr[5] = 0x00;
 80050c0:	2300      	movs	r3, #0
 80050c2:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
  heth.Init.MACAddr = &MACAddr[0];
 80050c6:	4a7b      	ldr	r2, [pc, #492]	; (80052b4 <low_level_init+0x240>)
 80050c8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80050cc:	6053      	str	r3, [r2, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 80050ce:	4b79      	ldr	r3, [pc, #484]	; (80052b4 <low_level_init+0x240>)
 80050d0:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 80050d4:	609a      	str	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 80050d6:	4b77      	ldr	r3, [pc, #476]	; (80052b4 <low_level_init+0x240>)
 80050d8:	4a78      	ldr	r2, [pc, #480]	; (80052bc <low_level_init+0x248>)
 80050da:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 80050dc:	4b75      	ldr	r3, [pc, #468]	; (80052b4 <low_level_init+0x240>)
 80050de:	4a78      	ldr	r2, [pc, #480]	; (80052c0 <low_level_init+0x24c>)
 80050e0:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1536;
 80050e2:	4b74      	ldr	r3, [pc, #464]	; (80052b4 <low_level_init+0x240>)
 80050e4:	f44f 62c0 	mov.w	r2, #1536	; 0x600
 80050e8:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  hal_eth_init_status = HAL_ETH_Init(&heth);
 80050ea:	4872      	ldr	r0, [pc, #456]	; (80052b4 <low_level_init+0x240>)
 80050ec:	f7fc fc2e 	bl	800194c <HAL_ETH_Init>
 80050f0:	4603      	mov	r3, r0
 80050f2:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 80050f6:	2238      	movs	r2, #56	; 0x38
 80050f8:	2100      	movs	r1, #0
 80050fa:	4872      	ldr	r0, [pc, #456]	; (80052c4 <low_level_init+0x250>)
 80050fc:	f00e fb97 	bl	801382e <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 8005100:	4b70      	ldr	r3, [pc, #448]	; (80052c4 <low_level_init+0x250>)
 8005102:	2221      	movs	r2, #33	; 0x21
 8005104:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 8005106:	4b6f      	ldr	r3, [pc, #444]	; (80052c4 <low_level_init+0x250>)
 8005108:	f44f 0240 	mov.w	r2, #12582912	; 0xc00000
 800510c:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 800510e:	4b6d      	ldr	r3, [pc, #436]	; (80052c4 <low_level_init+0x250>)
 8005110:	2200      	movs	r2, #0
 8005112:	611a      	str	r2, [r3, #16]

  /* End ETH HAL Init */

  /* Initialize the RX POOL */
  LWIP_MEMPOOL_INIT(RX_POOL);
 8005114:	486c      	ldr	r0, [pc, #432]	; (80052c8 <low_level_init+0x254>)
 8005116:	f004 f98b 	bl	8009430 <memp_init_pool>

#if LWIP_ARP || LWIP_ETHERNET

  /* set MAC hardware address length */
  netif->hwaddr_len = ETH_HWADDR_LEN;
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	2206      	movs	r2, #6
 800511e:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  /* set MAC hardware address */
  netif->hwaddr[0] =  heth.Init.MACAddr[0];
 8005122:	4b64      	ldr	r3, [pc, #400]	; (80052b4 <low_level_init+0x240>)
 8005124:	685b      	ldr	r3, [r3, #4]
 8005126:	781a      	ldrb	r2, [r3, #0]
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
  netif->hwaddr[1] =  heth.Init.MACAddr[1];
 800512e:	4b61      	ldr	r3, [pc, #388]	; (80052b4 <low_level_init+0x240>)
 8005130:	685b      	ldr	r3, [r3, #4]
 8005132:	785a      	ldrb	r2, [r3, #1]
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
  netif->hwaddr[2] =  heth.Init.MACAddr[2];
 800513a:	4b5e      	ldr	r3, [pc, #376]	; (80052b4 <low_level_init+0x240>)
 800513c:	685b      	ldr	r3, [r3, #4]
 800513e:	789a      	ldrb	r2, [r3, #2]
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
  netif->hwaddr[3] =  heth.Init.MACAddr[3];
 8005146:	4b5b      	ldr	r3, [pc, #364]	; (80052b4 <low_level_init+0x240>)
 8005148:	685b      	ldr	r3, [r3, #4]
 800514a:	78da      	ldrb	r2, [r3, #3]
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
  netif->hwaddr[4] =  heth.Init.MACAddr[4];
 8005152:	4b58      	ldr	r3, [pc, #352]	; (80052b4 <low_level_init+0x240>)
 8005154:	685b      	ldr	r3, [r3, #4]
 8005156:	791a      	ldrb	r2, [r3, #4]
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
  netif->hwaddr[5] =  heth.Init.MACAddr[5];
 800515e:	4b55      	ldr	r3, [pc, #340]	; (80052b4 <low_level_init+0x240>)
 8005160:	685b      	ldr	r3, [r3, #4]
 8005162:	795a      	ldrb	r2, [r3, #5]
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b

  /* maximum transfer unit */
  netif->mtu = ETH_MAX_PAYLOAD;
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	f240 52dc 	movw	r2, #1500	; 0x5dc
 8005170:	849a      	strh	r2, [r3, #36]	; 0x24

  /* Accept broadcast address and ARP traffic */
  /* don't set NETIF_FLAG_ETHARP if this device is not an ethernet one */
  #if LWIP_ARP
    netif->flags |= NETIF_FLAG_BROADCAST | NETIF_FLAG_ETHARP;
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8005178:	f043 030a 	orr.w	r3, r3, #10
 800517c:	b2da      	uxtb	r2, r3
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
  #else
    netif->flags |= NETIF_FLAG_BROADCAST;
  #endif /* LWIP_ARP */

  /* create a binary semaphore used for informing ethernetif of frame reception */
  RxPktSemaphore = xSemaphoreCreateBinary();
 8005184:	2203      	movs	r2, #3
 8005186:	2100      	movs	r1, #0
 8005188:	2001      	movs	r0, #1
 800518a:	f001 f80d 	bl	80061a8 <xQueueGenericCreate>
 800518e:	4603      	mov	r3, r0
 8005190:	4a4e      	ldr	r2, [pc, #312]	; (80052cc <low_level_init+0x258>)
 8005192:	6013      	str	r3, [r2, #0]

  /* create a binary semaphore used for informing ethernetif of frame transmission */
  TxPktSemaphore = xSemaphoreCreateBinary();
 8005194:	2203      	movs	r2, #3
 8005196:	2100      	movs	r1, #0
 8005198:	2001      	movs	r0, #1
 800519a:	f001 f805 	bl	80061a8 <xQueueGenericCreate>
 800519e:	4603      	mov	r3, r0
 80051a0:	4a4b      	ldr	r2, [pc, #300]	; (80052d0 <low_level_init+0x25c>)
 80051a2:	6013      	str	r3, [r2, #0]

  /* create the task that handles the ETH_MAC */
/* USER CODE BEGIN OS_THREAD_DEF_CREATE_CMSIS_RTOS_V1 */
  osThreadDef(EthIf, ethernetif_input, osPriorityRealtime, 0, INTERFACE_THREAD_STACK_SIZE);
 80051a4:	4b4b      	ldr	r3, [pc, #300]	; (80052d4 <low_level_init+0x260>)
 80051a6:	f107 0408 	add.w	r4, r7, #8
 80051aa:	461d      	mov	r5, r3
 80051ac:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80051ae:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80051b0:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80051b4:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  osThreadCreate (osThread(EthIf), netif);
 80051b8:	f107 0308 	add.w	r3, r7, #8
 80051bc:	6879      	ldr	r1, [r7, #4]
 80051be:	4618      	mov	r0, r3
 80051c0:	f000 fc02 	bl	80059c8 <osThreadCreate>

/* USER CODE BEGIN PHY_PRE_CONFIG */

/* USER CODE END PHY_PRE_CONFIG */
  /* Set PHY IO functions */
  LAN8742_RegisterBusIO(&LAN8742, &LAN8742_IOCtx);
 80051c4:	4944      	ldr	r1, [pc, #272]	; (80052d8 <low_level_init+0x264>)
 80051c6:	4845      	ldr	r0, [pc, #276]	; (80052dc <low_level_init+0x268>)
 80051c8:	f7fc f8e3 	bl	8001392 <LAN8742_RegisterBusIO>

  /* Initialize the LAN8742 ETH PHY */
  LAN8742_Init(&LAN8742);
 80051cc:	4843      	ldr	r0, [pc, #268]	; (80052dc <low_level_init+0x268>)
 80051ce:	f7fc f912 	bl	80013f6 <LAN8742_Init>

  if (hal_eth_init_status == HAL_OK)
 80051d2:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 80051d6:	2b00      	cmp	r3, #0
 80051d8:	d165      	bne.n	80052a6 <low_level_init+0x232>
  {
    PHYLinkState = LAN8742_GetLinkState(&LAN8742);
 80051da:	4840      	ldr	r0, [pc, #256]	; (80052dc <low_level_init+0x268>)
 80051dc:	f7fc f9b3 	bl	8001546 <LAN8742_GetLinkState>
 80051e0:	f8c7 0090 	str.w	r0, [r7, #144]	; 0x90

    /* Get link state */
    if(PHYLinkState <= LAN8742_STATUS_LINK_DOWN)
 80051e4:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80051e8:	2b01      	cmp	r3, #1
 80051ea:	dc06      	bgt.n	80051fa <low_level_init+0x186>
    {
      netif_set_link_down(netif);
 80051ec:	6878      	ldr	r0, [r7, #4]
 80051ee:	f004 fd2b 	bl	8009c48 <netif_set_link_down>
      netif_set_down(netif);
 80051f2:	6878      	ldr	r0, [r7, #4]
 80051f4:	f004 fcc2 	bl	8009b7c <netif_set_down>
#endif /* LWIP_ARP || LWIP_ETHERNET */

/* USER CODE BEGIN LOW_LEVEL_INIT */

/* USER CODE END LOW_LEVEL_INIT */
}
 80051f8:	e057      	b.n	80052aa <low_level_init+0x236>
      switch (PHYLinkState)
 80051fa:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80051fe:	3b02      	subs	r3, #2
 8005200:	2b03      	cmp	r3, #3
 8005202:	d82b      	bhi.n	800525c <low_level_init+0x1e8>
 8005204:	a201      	add	r2, pc, #4	; (adr r2, 800520c <low_level_init+0x198>)
 8005206:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800520a:	bf00      	nop
 800520c:	0800521d 	.word	0x0800521d
 8005210:	0800522f 	.word	0x0800522f
 8005214:	0800523f 	.word	0x0800523f
 8005218:	0800524f 	.word	0x0800524f
        duplex = ETH_FULLDUPLEX_MODE;
 800521c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8005220:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
        speed = ETH_SPEED_100M;
 8005224:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8005228:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
        break;
 800522c:	e01f      	b.n	800526e <low_level_init+0x1fa>
        duplex = ETH_HALFDUPLEX_MODE;
 800522e:	2300      	movs	r3, #0
 8005230:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
        speed = ETH_SPEED_100M;
 8005234:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8005238:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
        break;
 800523c:	e017      	b.n	800526e <low_level_init+0x1fa>
        duplex = ETH_FULLDUPLEX_MODE;
 800523e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8005242:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
        speed = ETH_SPEED_10M;
 8005246:	2300      	movs	r3, #0
 8005248:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
        break;
 800524c:	e00f      	b.n	800526e <low_level_init+0x1fa>
        duplex = ETH_HALFDUPLEX_MODE;
 800524e:	2300      	movs	r3, #0
 8005250:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
        speed = ETH_SPEED_10M;
 8005254:	2300      	movs	r3, #0
 8005256:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
        break;
 800525a:	e008      	b.n	800526e <low_level_init+0x1fa>
        duplex = ETH_FULLDUPLEX_MODE;
 800525c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8005260:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
        speed = ETH_SPEED_100M;
 8005264:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8005268:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
        break;
 800526c:	bf00      	nop
    HAL_ETH_GetMACConfig(&heth, &MACConf);
 800526e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8005272:	4619      	mov	r1, r3
 8005274:	480f      	ldr	r0, [pc, #60]	; (80052b4 <low_level_init+0x240>)
 8005276:	f7fd f84d 	bl	8002314 <HAL_ETH_GetMACConfig>
    MACConf.DuplexMode = duplex;
 800527a:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800527e:	647b      	str	r3, [r7, #68]	; 0x44
    MACConf.Speed = speed;
 8005280:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005284:	643b      	str	r3, [r7, #64]	; 0x40
    HAL_ETH_SetMACConfig(&heth, &MACConf);
 8005286:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800528a:	4619      	mov	r1, r3
 800528c:	4809      	ldr	r0, [pc, #36]	; (80052b4 <low_level_init+0x240>)
 800528e:	f7fd f92b 	bl	80024e8 <HAL_ETH_SetMACConfig>
    HAL_ETH_Start_IT(&heth);
 8005292:	4808      	ldr	r0, [pc, #32]	; (80052b4 <low_level_init+0x240>)
 8005294:	f7fc fbd8 	bl	8001a48 <HAL_ETH_Start_IT>
    netif_set_up(netif);
 8005298:	6878      	ldr	r0, [r7, #4]
 800529a:	f004 fc03 	bl	8009aa4 <netif_set_up>
    netif_set_link_up(netif);
 800529e:	6878      	ldr	r0, [r7, #4]
 80052a0:	f004 fc9e 	bl	8009be0 <netif_set_link_up>
}
 80052a4:	e001      	b.n	80052aa <low_level_init+0x236>
    Error_Handler();
 80052a6:	f7fb fbfd 	bl	8000aa4 <Error_Handler>
}
 80052aa:	bf00      	nop
 80052ac:	37a0      	adds	r7, #160	; 0xa0
 80052ae:	46bd      	mov	sp, r7
 80052b0:	bdb0      	pop	{r4, r5, r7, pc}
 80052b2:	bf00      	nop
 80052b4:	20004f3c 	.word	0x20004f3c
 80052b8:	40028000 	.word	0x40028000
 80052bc:	20004e94 	.word	0x20004e94
 80052c0:	20004df4 	.word	0x20004df4
 80052c4:	20004fec 	.word	0x20004fec
 80052c8:	0801736c 	.word	0x0801736c
 80052cc:	20004f34 	.word	0x20004f34
 80052d0:	20004f38 	.word	0x20004f38
 80052d4:	08014854 	.word	0x08014854
 80052d8:	2000000c 	.word	0x2000000c
 80052dc:	20005024 	.word	0x20005024

080052e0 <low_level_output>:
 *       to become available since the stack doesn't retry to send a packet
 *       dropped because of memory failure (except for the TCP timers).
 */

static err_t low_level_output(struct netif *netif, struct pbuf *p)
{
 80052e0:	b580      	push	{r7, lr}
 80052e2:	b092      	sub	sp, #72	; 0x48
 80052e4:	af00      	add	r7, sp, #0
 80052e6:	6078      	str	r0, [r7, #4]
 80052e8:	6039      	str	r1, [r7, #0]
  uint32_t i = 0U;
 80052ea:	2300      	movs	r3, #0
 80052ec:	647b      	str	r3, [r7, #68]	; 0x44
  struct pbuf *q = NULL;
 80052ee:	2300      	movs	r3, #0
 80052f0:	643b      	str	r3, [r7, #64]	; 0x40
  err_t errval = ERR_OK;
 80052f2:	2300      	movs	r3, #0
 80052f4:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  ETH_BufferTypeDef Txbuffer[ETH_TX_DESC_CNT] = {0};
 80052f8:	f107 030c 	add.w	r3, r7, #12
 80052fc:	2230      	movs	r2, #48	; 0x30
 80052fe:	2100      	movs	r1, #0
 8005300:	4618      	mov	r0, r3
 8005302:	f00e fa94 	bl	801382e <memset>

  memset(Txbuffer, 0 , ETH_TX_DESC_CNT*sizeof(ETH_BufferTypeDef));
 8005306:	f107 030c 	add.w	r3, r7, #12
 800530a:	2230      	movs	r2, #48	; 0x30
 800530c:	2100      	movs	r1, #0
 800530e:	4618      	mov	r0, r3
 8005310:	f00e fa8d 	bl	801382e <memset>

  for(q = p; q != NULL; q = q->next)
 8005314:	683b      	ldr	r3, [r7, #0]
 8005316:	643b      	str	r3, [r7, #64]	; 0x40
 8005318:	e045      	b.n	80053a6 <low_level_output+0xc6>
  {
    if(i >= ETH_TX_DESC_CNT)
 800531a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800531c:	2b03      	cmp	r3, #3
 800531e:	d902      	bls.n	8005326 <low_level_output+0x46>
      return ERR_IF;
 8005320:	f06f 030b 	mvn.w	r3, #11
 8005324:	e065      	b.n	80053f2 <low_level_output+0x112>

    Txbuffer[i].buffer = q->payload;
 8005326:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005328:	6859      	ldr	r1, [r3, #4]
 800532a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800532c:	4613      	mov	r3, r2
 800532e:	005b      	lsls	r3, r3, #1
 8005330:	4413      	add	r3, r2
 8005332:	009b      	lsls	r3, r3, #2
 8005334:	3348      	adds	r3, #72	; 0x48
 8005336:	443b      	add	r3, r7
 8005338:	3b3c      	subs	r3, #60	; 0x3c
 800533a:	6019      	str	r1, [r3, #0]
    Txbuffer[i].len = q->len;
 800533c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800533e:	895b      	ldrh	r3, [r3, #10]
 8005340:	4619      	mov	r1, r3
 8005342:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005344:	4613      	mov	r3, r2
 8005346:	005b      	lsls	r3, r3, #1
 8005348:	4413      	add	r3, r2
 800534a:	009b      	lsls	r3, r3, #2
 800534c:	3348      	adds	r3, #72	; 0x48
 800534e:	443b      	add	r3, r7
 8005350:	3b38      	subs	r3, #56	; 0x38
 8005352:	6019      	str	r1, [r3, #0]

    if(i>0)
 8005354:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005356:	2b00      	cmp	r3, #0
 8005358:	d011      	beq.n	800537e <low_level_output+0x9e>
    {
      Txbuffer[i-1].next = &Txbuffer[i];
 800535a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800535c:	1e5a      	subs	r2, r3, #1
 800535e:	f107 000c 	add.w	r0, r7, #12
 8005362:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8005364:	460b      	mov	r3, r1
 8005366:	005b      	lsls	r3, r3, #1
 8005368:	440b      	add	r3, r1
 800536a:	009b      	lsls	r3, r3, #2
 800536c:	18c1      	adds	r1, r0, r3
 800536e:	4613      	mov	r3, r2
 8005370:	005b      	lsls	r3, r3, #1
 8005372:	4413      	add	r3, r2
 8005374:	009b      	lsls	r3, r3, #2
 8005376:	3348      	adds	r3, #72	; 0x48
 8005378:	443b      	add	r3, r7
 800537a:	3b34      	subs	r3, #52	; 0x34
 800537c:	6019      	str	r1, [r3, #0]
    }

    if(q->next == NULL)
 800537e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005380:	681b      	ldr	r3, [r3, #0]
 8005382:	2b00      	cmp	r3, #0
 8005384:	d109      	bne.n	800539a <low_level_output+0xba>
    {
      Txbuffer[i].next = NULL;
 8005386:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005388:	4613      	mov	r3, r2
 800538a:	005b      	lsls	r3, r3, #1
 800538c:	4413      	add	r3, r2
 800538e:	009b      	lsls	r3, r3, #2
 8005390:	3348      	adds	r3, #72	; 0x48
 8005392:	443b      	add	r3, r7
 8005394:	3b34      	subs	r3, #52	; 0x34
 8005396:	2200      	movs	r2, #0
 8005398:	601a      	str	r2, [r3, #0]
    }

    i++;
 800539a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800539c:	3301      	adds	r3, #1
 800539e:	647b      	str	r3, [r7, #68]	; 0x44
  for(q = p; q != NULL; q = q->next)
 80053a0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80053a2:	681b      	ldr	r3, [r3, #0]
 80053a4:	643b      	str	r3, [r7, #64]	; 0x40
 80053a6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80053a8:	2b00      	cmp	r3, #0
 80053aa:	d1b6      	bne.n	800531a <low_level_output+0x3a>
  }

  TxConfig.Length = p->tot_len;
 80053ac:	683b      	ldr	r3, [r7, #0]
 80053ae:	891b      	ldrh	r3, [r3, #8]
 80053b0:	461a      	mov	r2, r3
 80053b2:	4b12      	ldr	r3, [pc, #72]	; (80053fc <low_level_output+0x11c>)
 80053b4:	605a      	str	r2, [r3, #4]
  TxConfig.TxBuffer = Txbuffer;
 80053b6:	4a11      	ldr	r2, [pc, #68]	; (80053fc <low_level_output+0x11c>)
 80053b8:	f107 030c 	add.w	r3, r7, #12
 80053bc:	6093      	str	r3, [r2, #8]
  TxConfig.pData = p;
 80053be:	4a0f      	ldr	r2, [pc, #60]	; (80053fc <low_level_output+0x11c>)
 80053c0:	683b      	ldr	r3, [r7, #0]
 80053c2:	6353      	str	r3, [r2, #52]	; 0x34

  pbuf_ref(p);
 80053c4:	6838      	ldr	r0, [r7, #0]
 80053c6:	f005 f8c3 	bl	800a550 <pbuf_ref>

  HAL_ETH_Transmit_IT(&heth, &TxConfig);
 80053ca:	490c      	ldr	r1, [pc, #48]	; (80053fc <low_level_output+0x11c>)
 80053cc:	480c      	ldr	r0, [pc, #48]	; (8005400 <low_level_output+0x120>)
 80053ce:	f7fc fc48 	bl	8001c62 <HAL_ETH_Transmit_IT>
  while(osSemaphoreWait(TxPktSemaphore, TIME_WAITING_FOR_INPUT)!=osOK)
 80053d2:	bf00      	nop
 80053d4:	4b0b      	ldr	r3, [pc, #44]	; (8005404 <low_level_output+0x124>)
 80053d6:	681b      	ldr	r3, [r3, #0]
 80053d8:	f04f 31ff 	mov.w	r1, #4294967295
 80053dc:	4618      	mov	r0, r3
 80053de:	f000 fbef 	bl	8005bc0 <osSemaphoreWait>
 80053e2:	4603      	mov	r3, r0
 80053e4:	2b00      	cmp	r3, #0
 80053e6:	d1f5      	bne.n	80053d4 <low_level_output+0xf4>

  {
  }

  HAL_ETH_ReleaseTxPacket(&heth);
 80053e8:	4805      	ldr	r0, [pc, #20]	; (8005400 <low_level_output+0x120>)
 80053ea:	f7fc fdcd 	bl	8001f88 <HAL_ETH_ReleaseTxPacket>

  return errval;
 80053ee:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
}
 80053f2:	4618      	mov	r0, r3
 80053f4:	3748      	adds	r7, #72	; 0x48
 80053f6:	46bd      	mov	sp, r7
 80053f8:	bd80      	pop	{r7, pc}
 80053fa:	bf00      	nop
 80053fc:	20004fec 	.word	0x20004fec
 8005400:	20004f3c 	.word	0x20004f3c
 8005404:	20004f38 	.word	0x20004f38

08005408 <low_level_input>:
 * @param netif the lwip network interface structure for this ethernetif
 * @return a pbuf filled with the received packet (including MAC header)
 *         NULL on memory error
   */
static struct pbuf * low_level_input(struct netif *netif)
{
 8005408:	b580      	push	{r7, lr}
 800540a:	b084      	sub	sp, #16
 800540c:	af00      	add	r7, sp, #0
 800540e:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 8005410:	2300      	movs	r3, #0
 8005412:	60fb      	str	r3, [r7, #12]

  if(RxAllocStatus == RX_ALLOC_OK)
 8005414:	4b07      	ldr	r3, [pc, #28]	; (8005434 <low_level_input+0x2c>)
 8005416:	781b      	ldrb	r3, [r3, #0]
 8005418:	2b00      	cmp	r3, #0
 800541a:	d105      	bne.n	8005428 <low_level_input+0x20>
  {
    HAL_ETH_ReadData(&heth, (void **)&p);
 800541c:	f107 030c 	add.w	r3, r7, #12
 8005420:	4619      	mov	r1, r3
 8005422:	4805      	ldr	r0, [pc, #20]	; (8005438 <low_level_input+0x30>)
 8005424:	f7fc fc79 	bl	8001d1a <HAL_ETH_ReadData>
  }

  return p;
 8005428:	68fb      	ldr	r3, [r7, #12]
}
 800542a:	4618      	mov	r0, r3
 800542c:	3710      	adds	r7, #16
 800542e:	46bd      	mov	sp, r7
 8005430:	bd80      	pop	{r7, pc}
 8005432:	bf00      	nop
 8005434:	20004df0 	.word	0x20004df0
 8005438:	20004f3c 	.word	0x20004f3c

0800543c <ethernetif_input>:
 * the appropriate input function is called.
 *
 * @param netif the lwip network interface structure for this ethernetif
 */
static void ethernetif_input(void const * argument)
{
 800543c:	b580      	push	{r7, lr}
 800543e:	b084      	sub	sp, #16
 8005440:	af00      	add	r7, sp, #0
 8005442:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 8005444:	2300      	movs	r3, #0
 8005446:	60fb      	str	r3, [r7, #12]
  struct netif *netif = (struct netif *) argument;
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	60bb      	str	r3, [r7, #8]

  for( ;; )
  {
    if (osSemaphoreWait(RxPktSemaphore, TIME_WAITING_FOR_INPUT) == osOK)
 800544c:	4b0f      	ldr	r3, [pc, #60]	; (800548c <ethernetif_input+0x50>)
 800544e:	681b      	ldr	r3, [r3, #0]
 8005450:	f04f 31ff 	mov.w	r1, #4294967295
 8005454:	4618      	mov	r0, r3
 8005456:	f000 fbb3 	bl	8005bc0 <osSemaphoreWait>
 800545a:	4603      	mov	r3, r0
 800545c:	2b00      	cmp	r3, #0
 800545e:	d1f5      	bne.n	800544c <ethernetif_input+0x10>
    {
      do
      {
        p = low_level_input( netif );
 8005460:	68b8      	ldr	r0, [r7, #8]
 8005462:	f7ff ffd1 	bl	8005408 <low_level_input>
 8005466:	60f8      	str	r0, [r7, #12]
        if (p != NULL)
 8005468:	68fb      	ldr	r3, [r7, #12]
 800546a:	2b00      	cmp	r3, #0
 800546c:	d00a      	beq.n	8005484 <ethernetif_input+0x48>
        {
          if (netif->input( p, netif) != ERR_OK )
 800546e:	68bb      	ldr	r3, [r7, #8]
 8005470:	691b      	ldr	r3, [r3, #16]
 8005472:	68b9      	ldr	r1, [r7, #8]
 8005474:	68f8      	ldr	r0, [r7, #12]
 8005476:	4798      	blx	r3
 8005478:	4603      	mov	r3, r0
 800547a:	2b00      	cmp	r3, #0
 800547c:	d002      	beq.n	8005484 <ethernetif_input+0x48>
          {
            pbuf_free(p);
 800547e:	68f8      	ldr	r0, [r7, #12]
 8005480:	f004 ffc0 	bl	800a404 <pbuf_free>
          }
        }
      } while(p!=NULL);
 8005484:	68fb      	ldr	r3, [r7, #12]
 8005486:	2b00      	cmp	r3, #0
 8005488:	d1ea      	bne.n	8005460 <ethernetif_input+0x24>
    if (osSemaphoreWait(RxPktSemaphore, TIME_WAITING_FOR_INPUT) == osOK)
 800548a:	e7df      	b.n	800544c <ethernetif_input+0x10>
 800548c:	20004f34 	.word	0x20004f34

08005490 <ethernetif_init>:
 * @return ERR_OK if the loopif is initialized
 *         ERR_MEM if private data couldn't be allocated
 *         any other err_t on error
 */
err_t ethernetif_init(struct netif *netif)
{
 8005490:	b580      	push	{r7, lr}
 8005492:	b082      	sub	sp, #8
 8005494:	af00      	add	r7, sp, #0
 8005496:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("netif != NULL", (netif != NULL));
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	2b00      	cmp	r3, #0
 800549c:	d106      	bne.n	80054ac <ethernetif_init+0x1c>
 800549e:	4b0e      	ldr	r3, [pc, #56]	; (80054d8 <ethernetif_init+0x48>)
 80054a0:	f240 12df 	movw	r2, #479	; 0x1df
 80054a4:	490d      	ldr	r1, [pc, #52]	; (80054dc <ethernetif_init+0x4c>)
 80054a6:	480e      	ldr	r0, [pc, #56]	; (80054e0 <ethernetif_init+0x50>)
 80054a8:	f00e fa5e 	bl	8013968 <iprintf>
   * The last argument should be replaced with your link speed, in units
   * of bits per second.
   */
  // MIB2_INIT_NETIF(netif, snmp_ifType_ethernet_csmacd, LINK_SPEED_OF_YOUR_NETIF_IN_BPS);

  netif->name[0] = IFNAME0;
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	2273      	movs	r2, #115	; 0x73
 80054b0:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
  netif->name[1] = IFNAME1;
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	2274      	movs	r2, #116	; 0x74
 80054b8:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
   * is available...) */

#if LWIP_IPV4
#if LWIP_ARP || LWIP_ETHERNET
#if LWIP_ARP
  netif->output = etharp_output;
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	4a09      	ldr	r2, [pc, #36]	; (80054e4 <ethernetif_init+0x54>)
 80054c0:	615a      	str	r2, [r3, #20]

#if LWIP_IPV6
  netif->output_ip6 = ethip6_output;
#endif /* LWIP_IPV6 */

  netif->linkoutput = low_level_output;
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	4a08      	ldr	r2, [pc, #32]	; (80054e8 <ethernetif_init+0x58>)
 80054c6:	619a      	str	r2, [r3, #24]

  /* initialize the hardware */
  low_level_init(netif);
 80054c8:	6878      	ldr	r0, [r7, #4]
 80054ca:	f7ff fdd3 	bl	8005074 <low_level_init>

  return ERR_OK;
 80054ce:	2300      	movs	r3, #0
}
 80054d0:	4618      	mov	r0, r3
 80054d2:	3708      	adds	r7, #8
 80054d4:	46bd      	mov	sp, r7
 80054d6:	bd80      	pop	{r7, pc}
 80054d8:	08014870 	.word	0x08014870
 80054dc:	0801488c 	.word	0x0801488c
 80054e0:	0801489c 	.word	0x0801489c
 80054e4:	080113b5 	.word	0x080113b5
 80054e8:	080052e1 	.word	0x080052e1

080054ec <pbuf_free_custom>:
  * @brief  Custom Rx pbuf free callback
  * @param  pbuf: pbuf to be freed
  * @retval None
  */
void pbuf_free_custom(struct pbuf *p)
{
 80054ec:	b580      	push	{r7, lr}
 80054ee:	b084      	sub	sp, #16
 80054f0:	af00      	add	r7, sp, #0
 80054f2:	6078      	str	r0, [r7, #4]
  struct pbuf_custom* custom_pbuf = (struct pbuf_custom*)p;
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	60fb      	str	r3, [r7, #12]
  LWIP_MEMPOOL_FREE(RX_POOL, custom_pbuf);
 80054f8:	68f9      	ldr	r1, [r7, #12]
 80054fa:	4809      	ldr	r0, [pc, #36]	; (8005520 <pbuf_free_custom+0x34>)
 80054fc:	f004 f8ba 	bl	8009674 <memp_free_pool>

  /* If the Rx Buffer Pool was exhausted, signal the ethernetif_input task to
   * call HAL_ETH_GetRxDataBuffer to rebuild the Rx descriptors. */

  if (RxAllocStatus == RX_ALLOC_ERROR)
 8005500:	4b08      	ldr	r3, [pc, #32]	; (8005524 <pbuf_free_custom+0x38>)
 8005502:	781b      	ldrb	r3, [r3, #0]
 8005504:	2b01      	cmp	r3, #1
 8005506:	d107      	bne.n	8005518 <pbuf_free_custom+0x2c>
  {
    RxAllocStatus = RX_ALLOC_OK;
 8005508:	4b06      	ldr	r3, [pc, #24]	; (8005524 <pbuf_free_custom+0x38>)
 800550a:	2200      	movs	r2, #0
 800550c:	701a      	strb	r2, [r3, #0]
    osSemaphoreRelease(RxPktSemaphore);
 800550e:	4b06      	ldr	r3, [pc, #24]	; (8005528 <pbuf_free_custom+0x3c>)
 8005510:	681b      	ldr	r3, [r3, #0]
 8005512:	4618      	mov	r0, r3
 8005514:	f000 fba2 	bl	8005c5c <osSemaphoreRelease>
  }
}
 8005518:	bf00      	nop
 800551a:	3710      	adds	r7, #16
 800551c:	46bd      	mov	sp, r7
 800551e:	bd80      	pop	{r7, pc}
 8005520:	0801736c 	.word	0x0801736c
 8005524:	20004df0 	.word	0x20004df0
 8005528:	20004f34 	.word	0x20004f34

0800552c <sys_now>:
*         when LWIP_TIMERS == 1 and NO_SYS == 1
* @param  None
* @retval Current Time value
*/
u32_t sys_now(void)
{
 800552c:	b580      	push	{r7, lr}
 800552e:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 8005530:	f7fc f8fa 	bl	8001728 <HAL_GetTick>
 8005534:	4603      	mov	r3, r0
}
 8005536:	4618      	mov	r0, r3
 8005538:	bd80      	pop	{r7, pc}
	...

0800553c <HAL_ETH_MspInit>:
  * @param  ethHandle: ETH handle
  * @retval None
  */

void HAL_ETH_MspInit(ETH_HandleTypeDef* ethHandle)
{
 800553c:	b580      	push	{r7, lr}
 800553e:	b08e      	sub	sp, #56	; 0x38
 8005540:	af00      	add	r7, sp, #0
 8005542:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005544:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005548:	2200      	movs	r2, #0
 800554a:	601a      	str	r2, [r3, #0]
 800554c:	605a      	str	r2, [r3, #4]
 800554e:	609a      	str	r2, [r3, #8]
 8005550:	60da      	str	r2, [r3, #12]
 8005552:	611a      	str	r2, [r3, #16]
  if(ethHandle->Instance==ETH)
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	681b      	ldr	r3, [r3, #0]
 8005558:	4a4a      	ldr	r2, [pc, #296]	; (8005684 <HAL_ETH_MspInit+0x148>)
 800555a:	4293      	cmp	r3, r2
 800555c:	f040 808d 	bne.w	800567a <HAL_ETH_MspInit+0x13e>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Enable Peripheral clock */
    __HAL_RCC_ETH_CLK_ENABLE();
 8005560:	2300      	movs	r3, #0
 8005562:	623b      	str	r3, [r7, #32]
 8005564:	4b48      	ldr	r3, [pc, #288]	; (8005688 <HAL_ETH_MspInit+0x14c>)
 8005566:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005568:	4a47      	ldr	r2, [pc, #284]	; (8005688 <HAL_ETH_MspInit+0x14c>)
 800556a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800556e:	6313      	str	r3, [r2, #48]	; 0x30
 8005570:	4b45      	ldr	r3, [pc, #276]	; (8005688 <HAL_ETH_MspInit+0x14c>)
 8005572:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005574:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005578:	623b      	str	r3, [r7, #32]
 800557a:	6a3b      	ldr	r3, [r7, #32]
 800557c:	2300      	movs	r3, #0
 800557e:	61fb      	str	r3, [r7, #28]
 8005580:	4b41      	ldr	r3, [pc, #260]	; (8005688 <HAL_ETH_MspInit+0x14c>)
 8005582:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005584:	4a40      	ldr	r2, [pc, #256]	; (8005688 <HAL_ETH_MspInit+0x14c>)
 8005586:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800558a:	6313      	str	r3, [r2, #48]	; 0x30
 800558c:	4b3e      	ldr	r3, [pc, #248]	; (8005688 <HAL_ETH_MspInit+0x14c>)
 800558e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005590:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8005594:	61fb      	str	r3, [r7, #28]
 8005596:	69fb      	ldr	r3, [r7, #28]
 8005598:	2300      	movs	r3, #0
 800559a:	61bb      	str	r3, [r7, #24]
 800559c:	4b3a      	ldr	r3, [pc, #232]	; (8005688 <HAL_ETH_MspInit+0x14c>)
 800559e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80055a0:	4a39      	ldr	r2, [pc, #228]	; (8005688 <HAL_ETH_MspInit+0x14c>)
 80055a2:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80055a6:	6313      	str	r3, [r2, #48]	; 0x30
 80055a8:	4b37      	ldr	r3, [pc, #220]	; (8005688 <HAL_ETH_MspInit+0x14c>)
 80055aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80055ac:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80055b0:	61bb      	str	r3, [r7, #24]
 80055b2:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80055b4:	2300      	movs	r3, #0
 80055b6:	617b      	str	r3, [r7, #20]
 80055b8:	4b33      	ldr	r3, [pc, #204]	; (8005688 <HAL_ETH_MspInit+0x14c>)
 80055ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80055bc:	4a32      	ldr	r2, [pc, #200]	; (8005688 <HAL_ETH_MspInit+0x14c>)
 80055be:	f043 0304 	orr.w	r3, r3, #4
 80055c2:	6313      	str	r3, [r2, #48]	; 0x30
 80055c4:	4b30      	ldr	r3, [pc, #192]	; (8005688 <HAL_ETH_MspInit+0x14c>)
 80055c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80055c8:	f003 0304 	and.w	r3, r3, #4
 80055cc:	617b      	str	r3, [r7, #20]
 80055ce:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80055d0:	2300      	movs	r3, #0
 80055d2:	613b      	str	r3, [r7, #16]
 80055d4:	4b2c      	ldr	r3, [pc, #176]	; (8005688 <HAL_ETH_MspInit+0x14c>)
 80055d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80055d8:	4a2b      	ldr	r2, [pc, #172]	; (8005688 <HAL_ETH_MspInit+0x14c>)
 80055da:	f043 0301 	orr.w	r3, r3, #1
 80055de:	6313      	str	r3, [r2, #48]	; 0x30
 80055e0:	4b29      	ldr	r3, [pc, #164]	; (8005688 <HAL_ETH_MspInit+0x14c>)
 80055e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80055e4:	f003 0301 	and.w	r3, r3, #1
 80055e8:	613b      	str	r3, [r7, #16]
 80055ea:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80055ec:	2300      	movs	r3, #0
 80055ee:	60fb      	str	r3, [r7, #12]
 80055f0:	4b25      	ldr	r3, [pc, #148]	; (8005688 <HAL_ETH_MspInit+0x14c>)
 80055f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80055f4:	4a24      	ldr	r2, [pc, #144]	; (8005688 <HAL_ETH_MspInit+0x14c>)
 80055f6:	f043 0302 	orr.w	r3, r3, #2
 80055fa:	6313      	str	r3, [r2, #48]	; 0x30
 80055fc:	4b22      	ldr	r3, [pc, #136]	; (8005688 <HAL_ETH_MspInit+0x14c>)
 80055fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005600:	f003 0302 	and.w	r3, r3, #2
 8005604:	60fb      	str	r3, [r7, #12]
 8005606:	68fb      	ldr	r3, [r7, #12]
    PC5     ------> ETH_RXD1
    PB11     ------> ETH_TX_EN
    PB12     ------> ETH_TXD0
    PB13     ------> ETH_TXD1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 8005608:	2332      	movs	r3, #50	; 0x32
 800560a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800560c:	2302      	movs	r3, #2
 800560e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005610:	2300      	movs	r3, #0
 8005612:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005614:	2303      	movs	r3, #3
 8005616:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8005618:	230b      	movs	r3, #11
 800561a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800561c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005620:	4619      	mov	r1, r3
 8005622:	481a      	ldr	r0, [pc, #104]	; (800568c <HAL_ETH_MspInit+0x150>)
 8005624:	f7fd feaa 	bl	800337c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_7;
 8005628:	2386      	movs	r3, #134	; 0x86
 800562a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800562c:	2302      	movs	r3, #2
 800562e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005630:	2300      	movs	r3, #0
 8005632:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005634:	2303      	movs	r3, #3
 8005636:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8005638:	230b      	movs	r3, #11
 800563a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800563c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005640:	4619      	mov	r1, r3
 8005642:	4813      	ldr	r0, [pc, #76]	; (8005690 <HAL_ETH_MspInit+0x154>)
 8005644:	f7fd fe9a 	bl	800337c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13;
 8005648:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 800564c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800564e:	2302      	movs	r3, #2
 8005650:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005652:	2300      	movs	r3, #0
 8005654:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005656:	2303      	movs	r3, #3
 8005658:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800565a:	230b      	movs	r3, #11
 800565c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800565e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005662:	4619      	mov	r1, r3
 8005664:	480b      	ldr	r0, [pc, #44]	; (8005694 <HAL_ETH_MspInit+0x158>)
 8005666:	f7fd fe89 	bl	800337c <HAL_GPIO_Init>

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(ETH_IRQn, 5, 0);
 800566a:	2200      	movs	r2, #0
 800566c:	2105      	movs	r1, #5
 800566e:	203d      	movs	r0, #61	; 0x3d
 8005670:	f7fc f942 	bl	80018f8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ETH_IRQn);
 8005674:	203d      	movs	r0, #61	; 0x3d
 8005676:	f7fc f95b 	bl	8001930 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }
}
 800567a:	bf00      	nop
 800567c:	3738      	adds	r7, #56	; 0x38
 800567e:	46bd      	mov	sp, r7
 8005680:	bd80      	pop	{r7, pc}
 8005682:	bf00      	nop
 8005684:	40028000 	.word	0x40028000
 8005688:	40023800 	.word	0x40023800
 800568c:	40020800 	.word	0x40020800
 8005690:	40020000 	.word	0x40020000
 8005694:	40020400 	.word	0x40020400

08005698 <ETH_PHY_IO_Init>:
  * @brief  Initializes the MDIO interface GPIO and clocks.
  * @param  None
  * @retval 0 if OK, -1 if ERROR
  */
int32_t ETH_PHY_IO_Init(void)
{
 8005698:	b580      	push	{r7, lr}
 800569a:	af00      	add	r7, sp, #0
  /* We assume that MDIO GPIO configuration is already done
     in the ETH_MspInit() else it should be done here
  */

  /* Configure the MDIO Clock */
  HAL_ETH_SetMDIOClockRange(&heth);
 800569c:	4802      	ldr	r0, [pc, #8]	; (80056a8 <ETH_PHY_IO_Init+0x10>)
 800569e:	f7fc ff3d 	bl	800251c <HAL_ETH_SetMDIOClockRange>

  return 0;
 80056a2:	2300      	movs	r3, #0
}
 80056a4:	4618      	mov	r0, r3
 80056a6:	bd80      	pop	{r7, pc}
 80056a8:	20004f3c 	.word	0x20004f3c

080056ac <ETH_PHY_IO_DeInit>:
  * @brief  De-Initializes the MDIO interface .
  * @param  None
  * @retval 0 if OK, -1 if ERROR
  */
int32_t ETH_PHY_IO_DeInit (void)
{
 80056ac:	b480      	push	{r7}
 80056ae:	af00      	add	r7, sp, #0
  return 0;
 80056b0:	2300      	movs	r3, #0
}
 80056b2:	4618      	mov	r0, r3
 80056b4:	46bd      	mov	sp, r7
 80056b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056ba:	4770      	bx	lr

080056bc <ETH_PHY_IO_ReadReg>:
  * @param  RegAddr: PHY register address
  * @param  pRegVal: pointer to hold the register value
  * @retval 0 if OK -1 if Error
  */
int32_t ETH_PHY_IO_ReadReg(uint32_t DevAddr, uint32_t RegAddr, uint32_t *pRegVal)
{
 80056bc:	b580      	push	{r7, lr}
 80056be:	b084      	sub	sp, #16
 80056c0:	af00      	add	r7, sp, #0
 80056c2:	60f8      	str	r0, [r7, #12]
 80056c4:	60b9      	str	r1, [r7, #8]
 80056c6:	607a      	str	r2, [r7, #4]
  if(HAL_ETH_ReadPHYRegister(&heth, DevAddr, RegAddr, pRegVal) != HAL_OK)
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	68ba      	ldr	r2, [r7, #8]
 80056cc:	68f9      	ldr	r1, [r7, #12]
 80056ce:	4807      	ldr	r0, [pc, #28]	; (80056ec <ETH_PHY_IO_ReadReg+0x30>)
 80056d0:	f7fc fd8c 	bl	80021ec <HAL_ETH_ReadPHYRegister>
 80056d4:	4603      	mov	r3, r0
 80056d6:	2b00      	cmp	r3, #0
 80056d8:	d002      	beq.n	80056e0 <ETH_PHY_IO_ReadReg+0x24>
  {
    return -1;
 80056da:	f04f 33ff 	mov.w	r3, #4294967295
 80056de:	e000      	b.n	80056e2 <ETH_PHY_IO_ReadReg+0x26>
  }

  return 0;
 80056e0:	2300      	movs	r3, #0
}
 80056e2:	4618      	mov	r0, r3
 80056e4:	3710      	adds	r7, #16
 80056e6:	46bd      	mov	sp, r7
 80056e8:	bd80      	pop	{r7, pc}
 80056ea:	bf00      	nop
 80056ec:	20004f3c 	.word	0x20004f3c

080056f0 <ETH_PHY_IO_WriteReg>:
  * @param  RegAddr: PHY register address
  * @param  RegVal: Value to be written
  * @retval 0 if OK -1 if Error
  */
int32_t ETH_PHY_IO_WriteReg(uint32_t DevAddr, uint32_t RegAddr, uint32_t RegVal)
{
 80056f0:	b580      	push	{r7, lr}
 80056f2:	b084      	sub	sp, #16
 80056f4:	af00      	add	r7, sp, #0
 80056f6:	60f8      	str	r0, [r7, #12]
 80056f8:	60b9      	str	r1, [r7, #8]
 80056fa:	607a      	str	r2, [r7, #4]
  if(HAL_ETH_WritePHYRegister(&heth, DevAddr, RegAddr, RegVal) != HAL_OK)
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	68ba      	ldr	r2, [r7, #8]
 8005700:	68f9      	ldr	r1, [r7, #12]
 8005702:	4807      	ldr	r0, [pc, #28]	; (8005720 <ETH_PHY_IO_WriteReg+0x30>)
 8005704:	f7fc fdbd 	bl	8002282 <HAL_ETH_WritePHYRegister>
 8005708:	4603      	mov	r3, r0
 800570a:	2b00      	cmp	r3, #0
 800570c:	d002      	beq.n	8005714 <ETH_PHY_IO_WriteReg+0x24>
  {
    return -1;
 800570e:	f04f 33ff 	mov.w	r3, #4294967295
 8005712:	e000      	b.n	8005716 <ETH_PHY_IO_WriteReg+0x26>
  }

  return 0;
 8005714:	2300      	movs	r3, #0
}
 8005716:	4618      	mov	r0, r3
 8005718:	3710      	adds	r7, #16
 800571a:	46bd      	mov	sp, r7
 800571c:	bd80      	pop	{r7, pc}
 800571e:	bf00      	nop
 8005720:	20004f3c 	.word	0x20004f3c

08005724 <ETH_PHY_IO_GetTick>:
/**
  * @brief  Get the time in millisecons used for internal PHY driver process.
  * @retval Time value
  */
int32_t ETH_PHY_IO_GetTick(void)
{
 8005724:	b580      	push	{r7, lr}
 8005726:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 8005728:	f7fb fffe 	bl	8001728 <HAL_GetTick>
 800572c:	4603      	mov	r3, r0
}
 800572e:	4618      	mov	r0, r3
 8005730:	bd80      	pop	{r7, pc}
	...

08005734 <ethernet_link_thread>:
  * @brief  Check the ETH link state then update ETH driver and netif link accordingly.
  * @retval None
  */

void ethernet_link_thread(void const * argument)
{
 8005734:	b580      	push	{r7, lr}
 8005736:	b0a0      	sub	sp, #128	; 0x80
 8005738:	af00      	add	r7, sp, #0
 800573a:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef MACConf = {0};
 800573c:	f107 0308 	add.w	r3, r7, #8
 8005740:	2264      	movs	r2, #100	; 0x64
 8005742:	2100      	movs	r1, #0
 8005744:	4618      	mov	r0, r3
 8005746:	f00e f872 	bl	801382e <memset>
  int32_t PHYLinkState = 0;
 800574a:	2300      	movs	r3, #0
 800574c:	673b      	str	r3, [r7, #112]	; 0x70
  uint32_t linkchanged = 0U, speed = 0U, duplex = 0U;
 800574e:	2300      	movs	r3, #0
 8005750:	67fb      	str	r3, [r7, #124]	; 0x7c
 8005752:	2300      	movs	r3, #0
 8005754:	67bb      	str	r3, [r7, #120]	; 0x78
 8005756:	2300      	movs	r3, #0
 8005758:	677b      	str	r3, [r7, #116]	; 0x74

  struct netif *netif = (struct netif *) argument;
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	66fb      	str	r3, [r7, #108]	; 0x6c

/* USER CODE END ETH link init */

  for(;;)
  {
  PHYLinkState = LAN8742_GetLinkState(&LAN8742);
 800575e:	483a      	ldr	r0, [pc, #232]	; (8005848 <ethernet_link_thread+0x114>)
 8005760:	f7fb fef1 	bl	8001546 <LAN8742_GetLinkState>
 8005764:	6738      	str	r0, [r7, #112]	; 0x70

  if(netif_is_link_up(netif) && (PHYLinkState <= LAN8742_STATUS_LINK_DOWN))
 8005766:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005768:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800576c:	089b      	lsrs	r3, r3, #2
 800576e:	f003 0301 	and.w	r3, r3, #1
 8005772:	b2db      	uxtb	r3, r3
 8005774:	2b00      	cmp	r3, #0
 8005776:	d00c      	beq.n	8005792 <ethernet_link_thread+0x5e>
 8005778:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800577a:	2b01      	cmp	r3, #1
 800577c:	dc09      	bgt.n	8005792 <ethernet_link_thread+0x5e>
  {
    HAL_ETH_Stop_IT(&heth);
 800577e:	4833      	ldr	r0, [pc, #204]	; (800584c <ethernet_link_thread+0x118>)
 8005780:	f7fc f9f0 	bl	8001b64 <HAL_ETH_Stop_IT>
    netif_set_down(netif);
 8005784:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8005786:	f004 f9f9 	bl	8009b7c <netif_set_down>
    netif_set_link_down(netif);
 800578a:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800578c:	f004 fa5c 	bl	8009c48 <netif_set_link_down>
 8005790:	e055      	b.n	800583e <ethernet_link_thread+0x10a>
  }
  else if(!netif_is_link_up(netif) && (PHYLinkState > LAN8742_STATUS_LINK_DOWN))
 8005792:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005794:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8005798:	f003 0304 	and.w	r3, r3, #4
 800579c:	2b00      	cmp	r3, #0
 800579e:	d14e      	bne.n	800583e <ethernet_link_thread+0x10a>
 80057a0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80057a2:	2b01      	cmp	r3, #1
 80057a4:	dd4b      	ble.n	800583e <ethernet_link_thread+0x10a>
  {
    switch (PHYLinkState)
 80057a6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80057a8:	3b02      	subs	r3, #2
 80057aa:	2b03      	cmp	r3, #3
 80057ac:	d82a      	bhi.n	8005804 <ethernet_link_thread+0xd0>
 80057ae:	a201      	add	r2, pc, #4	; (adr r2, 80057b4 <ethernet_link_thread+0x80>)
 80057b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80057b4:	080057c5 	.word	0x080057c5
 80057b8:	080057d7 	.word	0x080057d7
 80057bc:	080057e7 	.word	0x080057e7
 80057c0:	080057f7 	.word	0x080057f7
    {
    case LAN8742_STATUS_100MBITS_FULLDUPLEX:
      duplex = ETH_FULLDUPLEX_MODE;
 80057c4:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80057c8:	677b      	str	r3, [r7, #116]	; 0x74
      speed = ETH_SPEED_100M;
 80057ca:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80057ce:	67bb      	str	r3, [r7, #120]	; 0x78
      linkchanged = 1;
 80057d0:	2301      	movs	r3, #1
 80057d2:	67fb      	str	r3, [r7, #124]	; 0x7c
      break;
 80057d4:	e017      	b.n	8005806 <ethernet_link_thread+0xd2>
    case LAN8742_STATUS_100MBITS_HALFDUPLEX:
      duplex = ETH_HALFDUPLEX_MODE;
 80057d6:	2300      	movs	r3, #0
 80057d8:	677b      	str	r3, [r7, #116]	; 0x74
      speed = ETH_SPEED_100M;
 80057da:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80057de:	67bb      	str	r3, [r7, #120]	; 0x78
      linkchanged = 1;
 80057e0:	2301      	movs	r3, #1
 80057e2:	67fb      	str	r3, [r7, #124]	; 0x7c
      break;
 80057e4:	e00f      	b.n	8005806 <ethernet_link_thread+0xd2>
    case LAN8742_STATUS_10MBITS_FULLDUPLEX:
      duplex = ETH_FULLDUPLEX_MODE;
 80057e6:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80057ea:	677b      	str	r3, [r7, #116]	; 0x74
      speed = ETH_SPEED_10M;
 80057ec:	2300      	movs	r3, #0
 80057ee:	67bb      	str	r3, [r7, #120]	; 0x78
      linkchanged = 1;
 80057f0:	2301      	movs	r3, #1
 80057f2:	67fb      	str	r3, [r7, #124]	; 0x7c
      break;
 80057f4:	e007      	b.n	8005806 <ethernet_link_thread+0xd2>
    case LAN8742_STATUS_10MBITS_HALFDUPLEX:
      duplex = ETH_HALFDUPLEX_MODE;
 80057f6:	2300      	movs	r3, #0
 80057f8:	677b      	str	r3, [r7, #116]	; 0x74
      speed = ETH_SPEED_10M;
 80057fa:	2300      	movs	r3, #0
 80057fc:	67bb      	str	r3, [r7, #120]	; 0x78
      linkchanged = 1;
 80057fe:	2301      	movs	r3, #1
 8005800:	67fb      	str	r3, [r7, #124]	; 0x7c
      break;
 8005802:	e000      	b.n	8005806 <ethernet_link_thread+0xd2>
    default:
      break;
 8005804:	bf00      	nop
    }

    if(linkchanged)
 8005806:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8005808:	2b00      	cmp	r3, #0
 800580a:	d018      	beq.n	800583e <ethernet_link_thread+0x10a>
    {
      /* Get MAC Config MAC */
      HAL_ETH_GetMACConfig(&heth, &MACConf);
 800580c:	f107 0308 	add.w	r3, r7, #8
 8005810:	4619      	mov	r1, r3
 8005812:	480e      	ldr	r0, [pc, #56]	; (800584c <ethernet_link_thread+0x118>)
 8005814:	f7fc fd7e 	bl	8002314 <HAL_ETH_GetMACConfig>
      MACConf.DuplexMode = duplex;
 8005818:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800581a:	623b      	str	r3, [r7, #32]
      MACConf.Speed = speed;
 800581c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800581e:	61fb      	str	r3, [r7, #28]
      HAL_ETH_SetMACConfig(&heth, &MACConf);
 8005820:	f107 0308 	add.w	r3, r7, #8
 8005824:	4619      	mov	r1, r3
 8005826:	4809      	ldr	r0, [pc, #36]	; (800584c <ethernet_link_thread+0x118>)
 8005828:	f7fc fe5e 	bl	80024e8 <HAL_ETH_SetMACConfig>
      HAL_ETH_Start_IT(&heth);
 800582c:	4807      	ldr	r0, [pc, #28]	; (800584c <ethernet_link_thread+0x118>)
 800582e:	f7fc f90b 	bl	8001a48 <HAL_ETH_Start_IT>
      netif_set_up(netif);
 8005832:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8005834:	f004 f936 	bl	8009aa4 <netif_set_up>
      netif_set_link_up(netif);
 8005838:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800583a:	f004 f9d1 	bl	8009be0 <netif_set_link_up>

/* USER CODE BEGIN ETH link Thread core code for User BSP */

/* USER CODE END ETH link Thread core code for User BSP */

    osDelay(100);
 800583e:	2064      	movs	r0, #100	; 0x64
 8005840:	f000 f90e 	bl	8005a60 <osDelay>
  PHYLinkState = LAN8742_GetLinkState(&LAN8742);
 8005844:	e78b      	b.n	800575e <ethernet_link_thread+0x2a>
 8005846:	bf00      	nop
 8005848:	20005024 	.word	0x20005024
 800584c:	20004f3c 	.word	0x20004f3c

08005850 <HAL_ETH_RxAllocateCallback>:
  }
}

void HAL_ETH_RxAllocateCallback(uint8_t **buff)
{
 8005850:	b580      	push	{r7, lr}
 8005852:	b086      	sub	sp, #24
 8005854:	af02      	add	r7, sp, #8
 8005856:	6078      	str	r0, [r7, #4]
/* USER CODE BEGIN HAL ETH RxAllocateCallback */
  struct pbuf_custom *p = LWIP_MEMPOOL_ALLOC(RX_POOL);
 8005858:	4812      	ldr	r0, [pc, #72]	; (80058a4 <HAL_ETH_RxAllocateCallback+0x54>)
 800585a:	f003 fe91 	bl	8009580 <memp_malloc_pool>
 800585e:	60f8      	str	r0, [r7, #12]
  if (p)
 8005860:	68fb      	ldr	r3, [r7, #12]
 8005862:	2b00      	cmp	r3, #0
 8005864:	d014      	beq.n	8005890 <HAL_ETH_RxAllocateCallback+0x40>
  {
    /* Get the buff from the struct pbuf address. */
    *buff = (uint8_t *)p + offsetof(RxBuff_t, buff);
 8005866:	68fb      	ldr	r3, [r7, #12]
 8005868:	f103 0220 	add.w	r2, r3, #32
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	601a      	str	r2, [r3, #0]
    p->custom_free_function = pbuf_free_custom;
 8005870:	68fb      	ldr	r3, [r7, #12]
 8005872:	4a0d      	ldr	r2, [pc, #52]	; (80058a8 <HAL_ETH_RxAllocateCallback+0x58>)
 8005874:	611a      	str	r2, [r3, #16]
    /* Initialize the struct pbuf.
    * This must be performed whenever a buffer's allocated because it may be
    * changed by lwIP or the app, e.g., pbuf_free decrements ref. */
    pbuf_alloced_custom(PBUF_RAW, 0, PBUF_REF, p, *buff, ETH_RX_BUF_SIZE);
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	681b      	ldr	r3, [r3, #0]
 800587a:	f44f 62c0 	mov.w	r2, #1536	; 0x600
 800587e:	9201      	str	r2, [sp, #4]
 8005880:	9300      	str	r3, [sp, #0]
 8005882:	68fb      	ldr	r3, [r7, #12]
 8005884:	2241      	movs	r2, #65	; 0x41
 8005886:	2100      	movs	r1, #0
 8005888:	2000      	movs	r0, #0
 800588a:	f004 fc01 	bl	800a090 <pbuf_alloced_custom>
  {
    RxAllocStatus = RX_ALLOC_ERROR;
    *buff = NULL;
  }
/* USER CODE END HAL ETH RxAllocateCallback */
}
 800588e:	e005      	b.n	800589c <HAL_ETH_RxAllocateCallback+0x4c>
    RxAllocStatus = RX_ALLOC_ERROR;
 8005890:	4b06      	ldr	r3, [pc, #24]	; (80058ac <HAL_ETH_RxAllocateCallback+0x5c>)
 8005892:	2201      	movs	r2, #1
 8005894:	701a      	strb	r2, [r3, #0]
    *buff = NULL;
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	2200      	movs	r2, #0
 800589a:	601a      	str	r2, [r3, #0]
}
 800589c:	bf00      	nop
 800589e:	3710      	adds	r7, #16
 80058a0:	46bd      	mov	sp, r7
 80058a2:	bd80      	pop	{r7, pc}
 80058a4:	0801736c 	.word	0x0801736c
 80058a8:	080054ed 	.word	0x080054ed
 80058ac:	20004df0 	.word	0x20004df0

080058b0 <HAL_ETH_RxLinkCallback>:

void HAL_ETH_RxLinkCallback(void **pStart, void **pEnd, uint8_t *buff, uint16_t Length)
{
 80058b0:	b480      	push	{r7}
 80058b2:	b089      	sub	sp, #36	; 0x24
 80058b4:	af00      	add	r7, sp, #0
 80058b6:	60f8      	str	r0, [r7, #12]
 80058b8:	60b9      	str	r1, [r7, #8]
 80058ba:	607a      	str	r2, [r7, #4]
 80058bc:	807b      	strh	r3, [r7, #2]
/* USER CODE BEGIN HAL ETH RxLinkCallback */

  struct pbuf **ppStart = (struct pbuf **)pStart;
 80058be:	68fb      	ldr	r3, [r7, #12]
 80058c0:	61bb      	str	r3, [r7, #24]
  struct pbuf **ppEnd = (struct pbuf **)pEnd;
 80058c2:	68bb      	ldr	r3, [r7, #8]
 80058c4:	617b      	str	r3, [r7, #20]
  struct pbuf *p = NULL;
 80058c6:	2300      	movs	r3, #0
 80058c8:	61fb      	str	r3, [r7, #28]

  /* Get the struct pbuf from the buff address. */
  p = (struct pbuf *)(buff - offsetof(RxBuff_t, buff));
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	3b20      	subs	r3, #32
 80058ce:	61fb      	str	r3, [r7, #28]
  p->next = NULL;
 80058d0:	69fb      	ldr	r3, [r7, #28]
 80058d2:	2200      	movs	r2, #0
 80058d4:	601a      	str	r2, [r3, #0]
  p->tot_len = 0;
 80058d6:	69fb      	ldr	r3, [r7, #28]
 80058d8:	2200      	movs	r2, #0
 80058da:	811a      	strh	r2, [r3, #8]
  p->len = Length;
 80058dc:	69fb      	ldr	r3, [r7, #28]
 80058de:	887a      	ldrh	r2, [r7, #2]
 80058e0:	815a      	strh	r2, [r3, #10]

  /* Chain the buffer. */
  if (!*ppStart)
 80058e2:	69bb      	ldr	r3, [r7, #24]
 80058e4:	681b      	ldr	r3, [r3, #0]
 80058e6:	2b00      	cmp	r3, #0
 80058e8:	d103      	bne.n	80058f2 <HAL_ETH_RxLinkCallback+0x42>
  {
    /* The first buffer of the packet. */
    *ppStart = p;
 80058ea:	69bb      	ldr	r3, [r7, #24]
 80058ec:	69fa      	ldr	r2, [r7, #28]
 80058ee:	601a      	str	r2, [r3, #0]
 80058f0:	e003      	b.n	80058fa <HAL_ETH_RxLinkCallback+0x4a>
  }
  else
  {
    /* Chain the buffer to the end of the packet. */
    (*ppEnd)->next = p;
 80058f2:	697b      	ldr	r3, [r7, #20]
 80058f4:	681b      	ldr	r3, [r3, #0]
 80058f6:	69fa      	ldr	r2, [r7, #28]
 80058f8:	601a      	str	r2, [r3, #0]
  }
  *ppEnd  = p;
 80058fa:	697b      	ldr	r3, [r7, #20]
 80058fc:	69fa      	ldr	r2, [r7, #28]
 80058fe:	601a      	str	r2, [r3, #0]

  /* Update the total length of all the buffers of the chain. Each pbuf in the chain should have its tot_len
   * set to its own length, plus the length of all the following pbufs in the chain. */
  for (p = *ppStart; p != NULL; p = p->next)
 8005900:	69bb      	ldr	r3, [r7, #24]
 8005902:	681b      	ldr	r3, [r3, #0]
 8005904:	61fb      	str	r3, [r7, #28]
 8005906:	e009      	b.n	800591c <HAL_ETH_RxLinkCallback+0x6c>
  {
    p->tot_len += Length;
 8005908:	69fb      	ldr	r3, [r7, #28]
 800590a:	891a      	ldrh	r2, [r3, #8]
 800590c:	887b      	ldrh	r3, [r7, #2]
 800590e:	4413      	add	r3, r2
 8005910:	b29a      	uxth	r2, r3
 8005912:	69fb      	ldr	r3, [r7, #28]
 8005914:	811a      	strh	r2, [r3, #8]
  for (p = *ppStart; p != NULL; p = p->next)
 8005916:	69fb      	ldr	r3, [r7, #28]
 8005918:	681b      	ldr	r3, [r3, #0]
 800591a:	61fb      	str	r3, [r7, #28]
 800591c:	69fb      	ldr	r3, [r7, #28]
 800591e:	2b00      	cmp	r3, #0
 8005920:	d1f2      	bne.n	8005908 <HAL_ETH_RxLinkCallback+0x58>
  }

/* USER CODE END HAL ETH RxLinkCallback */
}
 8005922:	bf00      	nop
 8005924:	bf00      	nop
 8005926:	3724      	adds	r7, #36	; 0x24
 8005928:	46bd      	mov	sp, r7
 800592a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800592e:	4770      	bx	lr

08005930 <HAL_ETH_TxFreeCallback>:

void HAL_ETH_TxFreeCallback(uint32_t * buff)
{
 8005930:	b580      	push	{r7, lr}
 8005932:	b082      	sub	sp, #8
 8005934:	af00      	add	r7, sp, #0
 8005936:	6078      	str	r0, [r7, #4]
/* USER CODE BEGIN HAL ETH TxFreeCallback */

  pbuf_free((struct pbuf *)buff);
 8005938:	6878      	ldr	r0, [r7, #4]
 800593a:	f004 fd63 	bl	800a404 <pbuf_free>

/* USER CODE END HAL ETH TxFreeCallback */
}
 800593e:	bf00      	nop
 8005940:	3708      	adds	r7, #8
 8005942:	46bd      	mov	sp, r7
 8005944:	bd80      	pop	{r7, pc}

08005946 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8005946:	b480      	push	{r7}
 8005948:	b085      	sub	sp, #20
 800594a:	af00      	add	r7, sp, #0
 800594c:	4603      	mov	r3, r0
 800594e:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8005950:	2300      	movs	r3, #0
 8005952:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8005954:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005958:	2b84      	cmp	r3, #132	; 0x84
 800595a:	d005      	beq.n	8005968 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 800595c:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8005960:	68fb      	ldr	r3, [r7, #12]
 8005962:	4413      	add	r3, r2
 8005964:	3303      	adds	r3, #3
 8005966:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8005968:	68fb      	ldr	r3, [r7, #12]
}
 800596a:	4618      	mov	r0, r3
 800596c:	3714      	adds	r7, #20
 800596e:	46bd      	mov	sp, r7
 8005970:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005974:	4770      	bx	lr

08005976 <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 8005976:	b480      	push	{r7}
 8005978:	b083      	sub	sp, #12
 800597a:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800597c:	f3ef 8305 	mrs	r3, IPSR
 8005980:	607b      	str	r3, [r7, #4]
  return(result);
 8005982:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 8005984:	2b00      	cmp	r3, #0
 8005986:	bf14      	ite	ne
 8005988:	2301      	movne	r3, #1
 800598a:	2300      	moveq	r3, #0
 800598c:	b2db      	uxtb	r3, r3
}
 800598e:	4618      	mov	r0, r3
 8005990:	370c      	adds	r7, #12
 8005992:	46bd      	mov	sp, r7
 8005994:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005998:	4770      	bx	lr

0800599a <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 800599a:	b580      	push	{r7, lr}
 800599c:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 800599e:	f001 fc41 	bl	8007224 <vTaskStartScheduler>
  
  return osOK;
 80059a2:	2300      	movs	r3, #0
}
 80059a4:	4618      	mov	r0, r3
 80059a6:	bd80      	pop	{r7, pc}

080059a8 <osKernelSysTick>:
* @param  None
* @retval None
* @note   MUST REMAIN UNCHANGED: \b osKernelSysTick shall be consistent in every CMSIS-RTOS.
*/
uint32_t osKernelSysTick(void)
{
 80059a8:	b580      	push	{r7, lr}
 80059aa:	af00      	add	r7, sp, #0
  if (inHandlerMode()) {
 80059ac:	f7ff ffe3 	bl	8005976 <inHandlerMode>
 80059b0:	4603      	mov	r3, r0
 80059b2:	2b00      	cmp	r3, #0
 80059b4:	d003      	beq.n	80059be <osKernelSysTick+0x16>
    return xTaskGetTickCountFromISR();
 80059b6:	f001 fd59 	bl	800746c <xTaskGetTickCountFromISR>
 80059ba:	4603      	mov	r3, r0
 80059bc:	e002      	b.n	80059c4 <osKernelSysTick+0x1c>
  }
  else {
    return xTaskGetTickCount();
 80059be:	f001 fd45 	bl	800744c <xTaskGetTickCount>
 80059c2:	4603      	mov	r3, r0
  }
}
 80059c4:	4618      	mov	r0, r3
 80059c6:	bd80      	pop	{r7, pc}

080059c8 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 80059c8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80059ca:	b089      	sub	sp, #36	; 0x24
 80059cc:	af04      	add	r7, sp, #16
 80059ce:	6078      	str	r0, [r7, #4]
 80059d0:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	695b      	ldr	r3, [r3, #20]
 80059d6:	2b00      	cmp	r3, #0
 80059d8:	d020      	beq.n	8005a1c <osThreadCreate+0x54>
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	699b      	ldr	r3, [r3, #24]
 80059de:	2b00      	cmp	r3, #0
 80059e0:	d01c      	beq.n	8005a1c <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	685c      	ldr	r4, [r3, #4]
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	681d      	ldr	r5, [r3, #0]
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	691e      	ldr	r6, [r3, #16]
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80059f4:	4618      	mov	r0, r3
 80059f6:	f7ff ffa6 	bl	8005946 <makeFreeRtosPriority>
 80059fa:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	695b      	ldr	r3, [r3, #20]
 8005a00:	687a      	ldr	r2, [r7, #4]
 8005a02:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8005a04:	9202      	str	r2, [sp, #8]
 8005a06:	9301      	str	r3, [sp, #4]
 8005a08:	9100      	str	r1, [sp, #0]
 8005a0a:	683b      	ldr	r3, [r7, #0]
 8005a0c:	4632      	mov	r2, r6
 8005a0e:	4629      	mov	r1, r5
 8005a10:	4620      	mov	r0, r4
 8005a12:	f001 fa29 	bl	8006e68 <xTaskCreateStatic>
 8005a16:	4603      	mov	r3, r0
 8005a18:	60fb      	str	r3, [r7, #12]
 8005a1a:	e01c      	b.n	8005a56 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	685c      	ldr	r4, [r3, #4]
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8005a28:	b29e      	uxth	r6, r3
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8005a30:	4618      	mov	r0, r3
 8005a32:	f7ff ff88 	bl	8005946 <makeFreeRtosPriority>
 8005a36:	4602      	mov	r2, r0
 8005a38:	f107 030c 	add.w	r3, r7, #12
 8005a3c:	9301      	str	r3, [sp, #4]
 8005a3e:	9200      	str	r2, [sp, #0]
 8005a40:	683b      	ldr	r3, [r7, #0]
 8005a42:	4632      	mov	r2, r6
 8005a44:	4629      	mov	r1, r5
 8005a46:	4620      	mov	r0, r4
 8005a48:	f001 fa6b 	bl	8006f22 <xTaskCreate>
 8005a4c:	4603      	mov	r3, r0
 8005a4e:	2b01      	cmp	r3, #1
 8005a50:	d001      	beq.n	8005a56 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8005a52:	2300      	movs	r3, #0
 8005a54:	e000      	b.n	8005a58 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8005a56:	68fb      	ldr	r3, [r7, #12]
}
 8005a58:	4618      	mov	r0, r3
 8005a5a:	3714      	adds	r7, #20
 8005a5c:	46bd      	mov	sp, r7
 8005a5e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08005a60 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8005a60:	b580      	push	{r7, lr}
 8005a62:	b084      	sub	sp, #16
 8005a64:	af00      	add	r7, sp, #0
 8005a66:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8005a6c:	68fb      	ldr	r3, [r7, #12]
 8005a6e:	2b00      	cmp	r3, #0
 8005a70:	d001      	beq.n	8005a76 <osDelay+0x16>
 8005a72:	68fb      	ldr	r3, [r7, #12]
 8005a74:	e000      	b.n	8005a78 <osDelay+0x18>
 8005a76:	2301      	movs	r3, #1
 8005a78:	4618      	mov	r0, r3
 8005a7a:	f001 fb9f 	bl	80071bc <vTaskDelay>
  
  return osOK;
 8005a7e:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8005a80:	4618      	mov	r0, r3
 8005a82:	3710      	adds	r7, #16
 8005a84:	46bd      	mov	sp, r7
 8005a86:	bd80      	pop	{r7, pc}

08005a88 <osMutexCreate>:
* @param  mutex_def     mutex definition referenced with \ref osMutex.
* @retval  mutex ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMutexCreate shall be consistent in every CMSIS-RTOS.
*/
osMutexId osMutexCreate (const osMutexDef_t *mutex_def)
{
 8005a88:	b580      	push	{r7, lr}
 8005a8a:	b082      	sub	sp, #8
 8005a8c:	af00      	add	r7, sp, #0
 8005a8e:	6078      	str	r0, [r7, #4]
#if ( configUSE_MUTEXES == 1)

#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if (mutex_def->controlblock != NULL) {
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	685b      	ldr	r3, [r3, #4]
 8005a94:	2b00      	cmp	r3, #0
 8005a96:	d007      	beq.n	8005aa8 <osMutexCreate+0x20>
    return xSemaphoreCreateMutexStatic( mutex_def->controlblock );
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	685b      	ldr	r3, [r3, #4]
 8005a9c:	4619      	mov	r1, r3
 8005a9e:	2001      	movs	r0, #1
 8005aa0:	f000 fc0d 	bl	80062be <xQueueCreateMutexStatic>
 8005aa4:	4603      	mov	r3, r0
 8005aa6:	e003      	b.n	8005ab0 <osMutexCreate+0x28>
     }
  else {
    return xSemaphoreCreateMutex(); 
 8005aa8:	2001      	movs	r0, #1
 8005aaa:	f000 fbf0 	bl	800628e <xQueueCreateMutex>
 8005aae:	4603      	mov	r3, r0
    return xSemaphoreCreateMutex(); 
#endif
#else
  return NULL;
#endif
}
 8005ab0:	4618      	mov	r0, r3
 8005ab2:	3708      	adds	r7, #8
 8005ab4:	46bd      	mov	sp, r7
 8005ab6:	bd80      	pop	{r7, pc}

08005ab8 <osMutexWait>:
* @param millisec      timeout value or 0 in case of no time-out.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMutexWait shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexWait (osMutexId mutex_id, uint32_t millisec)
{
 8005ab8:	b580      	push	{r7, lr}
 8005aba:	b084      	sub	sp, #16
 8005abc:	af00      	add	r7, sp, #0
 8005abe:	6078      	str	r0, [r7, #4]
 8005ac0:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 8005ac2:	2300      	movs	r3, #0
 8005ac4:	60bb      	str	r3, [r7, #8]
  
  
  if (mutex_id == NULL) {
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	2b00      	cmp	r3, #0
 8005aca:	d101      	bne.n	8005ad0 <osMutexWait+0x18>
    return osErrorParameter;
 8005acc:	2380      	movs	r3, #128	; 0x80
 8005ace:	e03a      	b.n	8005b46 <osMutexWait+0x8e>
  }
  
  ticks = 0;
 8005ad0:	2300      	movs	r3, #0
 8005ad2:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 8005ad4:	683b      	ldr	r3, [r7, #0]
 8005ad6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005ada:	d103      	bne.n	8005ae4 <osMutexWait+0x2c>
    ticks = portMAX_DELAY;
 8005adc:	f04f 33ff 	mov.w	r3, #4294967295
 8005ae0:	60fb      	str	r3, [r7, #12]
 8005ae2:	e009      	b.n	8005af8 <osMutexWait+0x40>
  }
  else if (millisec != 0) {
 8005ae4:	683b      	ldr	r3, [r7, #0]
 8005ae6:	2b00      	cmp	r3, #0
 8005ae8:	d006      	beq.n	8005af8 <osMutexWait+0x40>
    ticks = millisec / portTICK_PERIOD_MS;
 8005aea:	683b      	ldr	r3, [r7, #0]
 8005aec:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 8005aee:	68fb      	ldr	r3, [r7, #12]
 8005af0:	2b00      	cmp	r3, #0
 8005af2:	d101      	bne.n	8005af8 <osMutexWait+0x40>
      ticks = 1;
 8005af4:	2301      	movs	r3, #1
 8005af6:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 8005af8:	f7ff ff3d 	bl	8005976 <inHandlerMode>
 8005afc:	4603      	mov	r3, r0
 8005afe:	2b00      	cmp	r3, #0
 8005b00:	d017      	beq.n	8005b32 <osMutexWait+0x7a>
    if (xSemaphoreTakeFromISR(mutex_id, &taskWoken) != pdTRUE) {
 8005b02:	f107 0308 	add.w	r3, r7, #8
 8005b06:	461a      	mov	r2, r3
 8005b08:	2100      	movs	r1, #0
 8005b0a:	6878      	ldr	r0, [r7, #4]
 8005b0c:	f001 f804 	bl	8006b18 <xQueueReceiveFromISR>
 8005b10:	4603      	mov	r3, r0
 8005b12:	2b01      	cmp	r3, #1
 8005b14:	d001      	beq.n	8005b1a <osMutexWait+0x62>
      return osErrorOS;
 8005b16:	23ff      	movs	r3, #255	; 0xff
 8005b18:	e015      	b.n	8005b46 <osMutexWait+0x8e>
    }
	portEND_SWITCHING_ISR(taskWoken);
 8005b1a:	68bb      	ldr	r3, [r7, #8]
 8005b1c:	2b00      	cmp	r3, #0
 8005b1e:	d011      	beq.n	8005b44 <osMutexWait+0x8c>
 8005b20:	4b0b      	ldr	r3, [pc, #44]	; (8005b50 <osMutexWait+0x98>)
 8005b22:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005b26:	601a      	str	r2, [r3, #0]
 8005b28:	f3bf 8f4f 	dsb	sy
 8005b2c:	f3bf 8f6f 	isb	sy
 8005b30:	e008      	b.n	8005b44 <osMutexWait+0x8c>
  } 
  else if (xSemaphoreTake(mutex_id, ticks) != pdTRUE) {
 8005b32:	68f9      	ldr	r1, [r7, #12]
 8005b34:	6878      	ldr	r0, [r7, #4]
 8005b36:	f000 fee3 	bl	8006900 <xQueueSemaphoreTake>
 8005b3a:	4603      	mov	r3, r0
 8005b3c:	2b01      	cmp	r3, #1
 8005b3e:	d001      	beq.n	8005b44 <osMutexWait+0x8c>
    return osErrorOS;
 8005b40:	23ff      	movs	r3, #255	; 0xff
 8005b42:	e000      	b.n	8005b46 <osMutexWait+0x8e>
  }
  
  return osOK;
 8005b44:	2300      	movs	r3, #0
}
 8005b46:	4618      	mov	r0, r3
 8005b48:	3710      	adds	r7, #16
 8005b4a:	46bd      	mov	sp, r7
 8005b4c:	bd80      	pop	{r7, pc}
 8005b4e:	bf00      	nop
 8005b50:	e000ed04 	.word	0xe000ed04

08005b54 <osMutexRelease>:
* @param mutex_id      mutex ID obtained by \ref osMutexCreate.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMutexRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexRelease (osMutexId mutex_id)
{
 8005b54:	b580      	push	{r7, lr}
 8005b56:	b084      	sub	sp, #16
 8005b58:	af00      	add	r7, sp, #0
 8005b5a:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 8005b5c:	2300      	movs	r3, #0
 8005b5e:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 8005b60:	2300      	movs	r3, #0
 8005b62:	60bb      	str	r3, [r7, #8]
  
  if (inHandlerMode()) {
 8005b64:	f7ff ff07 	bl	8005976 <inHandlerMode>
 8005b68:	4603      	mov	r3, r0
 8005b6a:	2b00      	cmp	r3, #0
 8005b6c:	d016      	beq.n	8005b9c <osMutexRelease+0x48>
    if (xSemaphoreGiveFromISR(mutex_id, &taskWoken) != pdTRUE) {
 8005b6e:	f107 0308 	add.w	r3, r7, #8
 8005b72:	4619      	mov	r1, r3
 8005b74:	6878      	ldr	r0, [r7, #4]
 8005b76:	f000 fd56 	bl	8006626 <xQueueGiveFromISR>
 8005b7a:	4603      	mov	r3, r0
 8005b7c:	2b01      	cmp	r3, #1
 8005b7e:	d001      	beq.n	8005b84 <osMutexRelease+0x30>
      return osErrorOS;
 8005b80:	23ff      	movs	r3, #255	; 0xff
 8005b82:	e017      	b.n	8005bb4 <osMutexRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 8005b84:	68bb      	ldr	r3, [r7, #8]
 8005b86:	2b00      	cmp	r3, #0
 8005b88:	d013      	beq.n	8005bb2 <osMutexRelease+0x5e>
 8005b8a:	4b0c      	ldr	r3, [pc, #48]	; (8005bbc <osMutexRelease+0x68>)
 8005b8c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005b90:	601a      	str	r2, [r3, #0]
 8005b92:	f3bf 8f4f 	dsb	sy
 8005b96:	f3bf 8f6f 	isb	sy
 8005b9a:	e00a      	b.n	8005bb2 <osMutexRelease+0x5e>
  }
  else if (xSemaphoreGive(mutex_id) != pdTRUE) 
 8005b9c:	2300      	movs	r3, #0
 8005b9e:	2200      	movs	r2, #0
 8005ba0:	2100      	movs	r1, #0
 8005ba2:	6878      	ldr	r0, [r7, #4]
 8005ba4:	f000 fba6 	bl	80062f4 <xQueueGenericSend>
 8005ba8:	4603      	mov	r3, r0
 8005baa:	2b01      	cmp	r3, #1
 8005bac:	d001      	beq.n	8005bb2 <osMutexRelease+0x5e>
  {
    result = osErrorOS;
 8005bae:	23ff      	movs	r3, #255	; 0xff
 8005bb0:	60fb      	str	r3, [r7, #12]
  }
  return result;
 8005bb2:	68fb      	ldr	r3, [r7, #12]
}
 8005bb4:	4618      	mov	r0, r3
 8005bb6:	3710      	adds	r7, #16
 8005bb8:	46bd      	mov	sp, r7
 8005bba:	bd80      	pop	{r7, pc}
 8005bbc:	e000ed04 	.word	0xe000ed04

08005bc0 <osSemaphoreWait>:
* @param  millisec      timeout value or 0 in case of no time-out.
* @retval  number of available tokens, or -1 in case of incorrect parameters.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreWait shall be consistent in every CMSIS-RTOS.
*/
int32_t osSemaphoreWait (osSemaphoreId semaphore_id, uint32_t millisec)
{
 8005bc0:	b580      	push	{r7, lr}
 8005bc2:	b084      	sub	sp, #16
 8005bc4:	af00      	add	r7, sp, #0
 8005bc6:	6078      	str	r0, [r7, #4]
 8005bc8:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 8005bca:	2300      	movs	r3, #0
 8005bcc:	60bb      	str	r3, [r7, #8]
  
  
  if (semaphore_id == NULL) {
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	2b00      	cmp	r3, #0
 8005bd2:	d101      	bne.n	8005bd8 <osSemaphoreWait+0x18>
    return osErrorParameter;
 8005bd4:	2380      	movs	r3, #128	; 0x80
 8005bd6:	e03a      	b.n	8005c4e <osSemaphoreWait+0x8e>
  }
  
  ticks = 0;
 8005bd8:	2300      	movs	r3, #0
 8005bda:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 8005bdc:	683b      	ldr	r3, [r7, #0]
 8005bde:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005be2:	d103      	bne.n	8005bec <osSemaphoreWait+0x2c>
    ticks = portMAX_DELAY;
 8005be4:	f04f 33ff 	mov.w	r3, #4294967295
 8005be8:	60fb      	str	r3, [r7, #12]
 8005bea:	e009      	b.n	8005c00 <osSemaphoreWait+0x40>
  }
  else if (millisec != 0) {
 8005bec:	683b      	ldr	r3, [r7, #0]
 8005bee:	2b00      	cmp	r3, #0
 8005bf0:	d006      	beq.n	8005c00 <osSemaphoreWait+0x40>
    ticks = millisec / portTICK_PERIOD_MS;
 8005bf2:	683b      	ldr	r3, [r7, #0]
 8005bf4:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 8005bf6:	68fb      	ldr	r3, [r7, #12]
 8005bf8:	2b00      	cmp	r3, #0
 8005bfa:	d101      	bne.n	8005c00 <osSemaphoreWait+0x40>
      ticks = 1;
 8005bfc:	2301      	movs	r3, #1
 8005bfe:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 8005c00:	f7ff feb9 	bl	8005976 <inHandlerMode>
 8005c04:	4603      	mov	r3, r0
 8005c06:	2b00      	cmp	r3, #0
 8005c08:	d017      	beq.n	8005c3a <osSemaphoreWait+0x7a>
    if (xSemaphoreTakeFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 8005c0a:	f107 0308 	add.w	r3, r7, #8
 8005c0e:	461a      	mov	r2, r3
 8005c10:	2100      	movs	r1, #0
 8005c12:	6878      	ldr	r0, [r7, #4]
 8005c14:	f000 ff80 	bl	8006b18 <xQueueReceiveFromISR>
 8005c18:	4603      	mov	r3, r0
 8005c1a:	2b01      	cmp	r3, #1
 8005c1c:	d001      	beq.n	8005c22 <osSemaphoreWait+0x62>
      return osErrorOS;
 8005c1e:	23ff      	movs	r3, #255	; 0xff
 8005c20:	e015      	b.n	8005c4e <osSemaphoreWait+0x8e>
    }
	portEND_SWITCHING_ISR(taskWoken);
 8005c22:	68bb      	ldr	r3, [r7, #8]
 8005c24:	2b00      	cmp	r3, #0
 8005c26:	d011      	beq.n	8005c4c <osSemaphoreWait+0x8c>
 8005c28:	4b0b      	ldr	r3, [pc, #44]	; (8005c58 <osSemaphoreWait+0x98>)
 8005c2a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005c2e:	601a      	str	r2, [r3, #0]
 8005c30:	f3bf 8f4f 	dsb	sy
 8005c34:	f3bf 8f6f 	isb	sy
 8005c38:	e008      	b.n	8005c4c <osSemaphoreWait+0x8c>
  }  
  else if (xSemaphoreTake(semaphore_id, ticks) != pdTRUE) {
 8005c3a:	68f9      	ldr	r1, [r7, #12]
 8005c3c:	6878      	ldr	r0, [r7, #4]
 8005c3e:	f000 fe5f 	bl	8006900 <xQueueSemaphoreTake>
 8005c42:	4603      	mov	r3, r0
 8005c44:	2b01      	cmp	r3, #1
 8005c46:	d001      	beq.n	8005c4c <osSemaphoreWait+0x8c>
    return osErrorOS;
 8005c48:	23ff      	movs	r3, #255	; 0xff
 8005c4a:	e000      	b.n	8005c4e <osSemaphoreWait+0x8e>
  }
  
  return osOK;
 8005c4c:	2300      	movs	r3, #0
}
 8005c4e:	4618      	mov	r0, r3
 8005c50:	3710      	adds	r7, #16
 8005c52:	46bd      	mov	sp, r7
 8005c54:	bd80      	pop	{r7, pc}
 8005c56:	bf00      	nop
 8005c58:	e000ed04 	.word	0xe000ed04

08005c5c <osSemaphoreRelease>:
* @param  semaphore_id  semaphore object referenced with \ref osSemaphore.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osSemaphoreRelease (osSemaphoreId semaphore_id)
{
 8005c5c:	b580      	push	{r7, lr}
 8005c5e:	b084      	sub	sp, #16
 8005c60:	af00      	add	r7, sp, #0
 8005c62:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 8005c64:	2300      	movs	r3, #0
 8005c66:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 8005c68:	2300      	movs	r3, #0
 8005c6a:	60bb      	str	r3, [r7, #8]
  
  
  if (inHandlerMode()) {
 8005c6c:	f7ff fe83 	bl	8005976 <inHandlerMode>
 8005c70:	4603      	mov	r3, r0
 8005c72:	2b00      	cmp	r3, #0
 8005c74:	d016      	beq.n	8005ca4 <osSemaphoreRelease+0x48>
    if (xSemaphoreGiveFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 8005c76:	f107 0308 	add.w	r3, r7, #8
 8005c7a:	4619      	mov	r1, r3
 8005c7c:	6878      	ldr	r0, [r7, #4]
 8005c7e:	f000 fcd2 	bl	8006626 <xQueueGiveFromISR>
 8005c82:	4603      	mov	r3, r0
 8005c84:	2b01      	cmp	r3, #1
 8005c86:	d001      	beq.n	8005c8c <osSemaphoreRelease+0x30>
      return osErrorOS;
 8005c88:	23ff      	movs	r3, #255	; 0xff
 8005c8a:	e017      	b.n	8005cbc <osSemaphoreRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 8005c8c:	68bb      	ldr	r3, [r7, #8]
 8005c8e:	2b00      	cmp	r3, #0
 8005c90:	d013      	beq.n	8005cba <osSemaphoreRelease+0x5e>
 8005c92:	4b0c      	ldr	r3, [pc, #48]	; (8005cc4 <osSemaphoreRelease+0x68>)
 8005c94:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005c98:	601a      	str	r2, [r3, #0]
 8005c9a:	f3bf 8f4f 	dsb	sy
 8005c9e:	f3bf 8f6f 	isb	sy
 8005ca2:	e00a      	b.n	8005cba <osSemaphoreRelease+0x5e>
  }
  else {
    if (xSemaphoreGive(semaphore_id) != pdTRUE) {
 8005ca4:	2300      	movs	r3, #0
 8005ca6:	2200      	movs	r2, #0
 8005ca8:	2100      	movs	r1, #0
 8005caa:	6878      	ldr	r0, [r7, #4]
 8005cac:	f000 fb22 	bl	80062f4 <xQueueGenericSend>
 8005cb0:	4603      	mov	r3, r0
 8005cb2:	2b01      	cmp	r3, #1
 8005cb4:	d001      	beq.n	8005cba <osSemaphoreRelease+0x5e>
      result = osErrorOS;
 8005cb6:	23ff      	movs	r3, #255	; 0xff
 8005cb8:	60fb      	str	r3, [r7, #12]
    }
  }
  
  return result;
 8005cba:	68fb      	ldr	r3, [r7, #12]
}
 8005cbc:	4618      	mov	r0, r3
 8005cbe:	3710      	adds	r7, #16
 8005cc0:	46bd      	mov	sp, r7
 8005cc2:	bd80      	pop	{r7, pc}
 8005cc4:	e000ed04 	.word	0xe000ed04

08005cc8 <osMessageCreate>:
* @param  thread_id     thread ID (obtained by \ref osThreadCreate or \ref osThreadGetId) or NULL.
* @retval  message queue ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMessageCreate shall be consistent in every CMSIS-RTOS.
*/
osMessageQId osMessageCreate (const osMessageQDef_t *queue_def, osThreadId thread_id)
{
 8005cc8:	b590      	push	{r4, r7, lr}
 8005cca:	b085      	sub	sp, #20
 8005ccc:	af02      	add	r7, sp, #8
 8005cce:	6078      	str	r0, [r7, #4]
 8005cd0:	6039      	str	r1, [r7, #0]
  (void) thread_id;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if ((queue_def->buffer != NULL) && (queue_def->controlblock != NULL)) {
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	689b      	ldr	r3, [r3, #8]
 8005cd6:	2b00      	cmp	r3, #0
 8005cd8:	d011      	beq.n	8005cfe <osMessageCreate+0x36>
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	68db      	ldr	r3, [r3, #12]
 8005cde:	2b00      	cmp	r3, #0
 8005ce0:	d00d      	beq.n	8005cfe <osMessageCreate+0x36>
    return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	6818      	ldr	r0, [r3, #0]
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	6859      	ldr	r1, [r3, #4]
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	689a      	ldr	r2, [r3, #8]
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	68db      	ldr	r3, [r3, #12]
 8005cf2:	2400      	movs	r4, #0
 8005cf4:	9400      	str	r4, [sp, #0]
 8005cf6:	f000 f9df 	bl	80060b8 <xQueueGenericCreateStatic>
 8005cfa:	4603      	mov	r3, r0
 8005cfc:	e008      	b.n	8005d10 <osMessageCreate+0x48>
  }
  else {
    return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	6818      	ldr	r0, [r3, #0]
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	685b      	ldr	r3, [r3, #4]
 8005d06:	2200      	movs	r2, #0
 8005d08:	4619      	mov	r1, r3
 8005d0a:	f000 fa4d 	bl	80061a8 <xQueueGenericCreate>
 8005d0e:	4603      	mov	r3, r0
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
#else  
  return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
#endif
}
 8005d10:	4618      	mov	r0, r3
 8005d12:	370c      	adds	r7, #12
 8005d14:	46bd      	mov	sp, r7
 8005d16:	bd90      	pop	{r4, r7, pc}

08005d18 <osMessagePut>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMessagePut shall be consistent in every CMSIS-RTOS.
*/
osStatus osMessagePut (osMessageQId queue_id, uint32_t info, uint32_t millisec)
{
 8005d18:	b580      	push	{r7, lr}
 8005d1a:	b086      	sub	sp, #24
 8005d1c:	af00      	add	r7, sp, #0
 8005d1e:	60f8      	str	r0, [r7, #12]
 8005d20:	60b9      	str	r1, [r7, #8]
 8005d22:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken = pdFALSE;
 8005d24:	2300      	movs	r3, #0
 8005d26:	613b      	str	r3, [r7, #16]
  TickType_t ticks;
  
  ticks = millisec / portTICK_PERIOD_MS;
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	617b      	str	r3, [r7, #20]
  if (ticks == 0) {
 8005d2c:	697b      	ldr	r3, [r7, #20]
 8005d2e:	2b00      	cmp	r3, #0
 8005d30:	d101      	bne.n	8005d36 <osMessagePut+0x1e>
    ticks = 1;
 8005d32:	2301      	movs	r3, #1
 8005d34:	617b      	str	r3, [r7, #20]
  }
  
  if (inHandlerMode()) {
 8005d36:	f7ff fe1e 	bl	8005976 <inHandlerMode>
 8005d3a:	4603      	mov	r3, r0
 8005d3c:	2b00      	cmp	r3, #0
 8005d3e:	d018      	beq.n	8005d72 <osMessagePut+0x5a>
    if (xQueueSendFromISR(queue_id, &info, &taskWoken) != pdTRUE) {
 8005d40:	f107 0210 	add.w	r2, r7, #16
 8005d44:	f107 0108 	add.w	r1, r7, #8
 8005d48:	2300      	movs	r3, #0
 8005d4a:	68f8      	ldr	r0, [r7, #12]
 8005d4c:	f000 fbd0 	bl	80064f0 <xQueueGenericSendFromISR>
 8005d50:	4603      	mov	r3, r0
 8005d52:	2b01      	cmp	r3, #1
 8005d54:	d001      	beq.n	8005d5a <osMessagePut+0x42>
      return osErrorOS;
 8005d56:	23ff      	movs	r3, #255	; 0xff
 8005d58:	e018      	b.n	8005d8c <osMessagePut+0x74>
    }
    portEND_SWITCHING_ISR(taskWoken);
 8005d5a:	693b      	ldr	r3, [r7, #16]
 8005d5c:	2b00      	cmp	r3, #0
 8005d5e:	d014      	beq.n	8005d8a <osMessagePut+0x72>
 8005d60:	4b0c      	ldr	r3, [pc, #48]	; (8005d94 <osMessagePut+0x7c>)
 8005d62:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005d66:	601a      	str	r2, [r3, #0]
 8005d68:	f3bf 8f4f 	dsb	sy
 8005d6c:	f3bf 8f6f 	isb	sy
 8005d70:	e00b      	b.n	8005d8a <osMessagePut+0x72>
  }
  else {
    if (xQueueSend(queue_id, &info, ticks) != pdTRUE) {
 8005d72:	f107 0108 	add.w	r1, r7, #8
 8005d76:	2300      	movs	r3, #0
 8005d78:	697a      	ldr	r2, [r7, #20]
 8005d7a:	68f8      	ldr	r0, [r7, #12]
 8005d7c:	f000 faba 	bl	80062f4 <xQueueGenericSend>
 8005d80:	4603      	mov	r3, r0
 8005d82:	2b01      	cmp	r3, #1
 8005d84:	d001      	beq.n	8005d8a <osMessagePut+0x72>
      return osErrorOS;
 8005d86:	23ff      	movs	r3, #255	; 0xff
 8005d88:	e000      	b.n	8005d8c <osMessagePut+0x74>
    }
  }
  
  return osOK;
 8005d8a:	2300      	movs	r3, #0
}
 8005d8c:	4618      	mov	r0, r3
 8005d8e:	3718      	adds	r7, #24
 8005d90:	46bd      	mov	sp, r7
 8005d92:	bd80      	pop	{r7, pc}
 8005d94:	e000ed04 	.word	0xe000ed04

08005d98 <osMessageGet>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval event information that includes status code.
* @note   MUST REMAIN UNCHANGED: \b osMessageGet shall be consistent in every CMSIS-RTOS.
*/
osEvent osMessageGet (osMessageQId queue_id, uint32_t millisec)
{
 8005d98:	b590      	push	{r4, r7, lr}
 8005d9a:	b08b      	sub	sp, #44	; 0x2c
 8005d9c:	af00      	add	r7, sp, #0
 8005d9e:	60f8      	str	r0, [r7, #12]
 8005da0:	60b9      	str	r1, [r7, #8]
 8005da2:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken;
  TickType_t ticks;
  osEvent event;
  
  event.def.message_id = queue_id;
 8005da4:	68bb      	ldr	r3, [r7, #8]
 8005da6:	61fb      	str	r3, [r7, #28]
  event.value.v = 0;
 8005da8:	2300      	movs	r3, #0
 8005daa:	61bb      	str	r3, [r7, #24]
  
  if (queue_id == NULL) {
 8005dac:	68bb      	ldr	r3, [r7, #8]
 8005dae:	2b00      	cmp	r3, #0
 8005db0:	d10a      	bne.n	8005dc8 <osMessageGet+0x30>
    event.status = osErrorParameter;
 8005db2:	2380      	movs	r3, #128	; 0x80
 8005db4:	617b      	str	r3, [r7, #20]
    return event;
 8005db6:	68fb      	ldr	r3, [r7, #12]
 8005db8:	461c      	mov	r4, r3
 8005dba:	f107 0314 	add.w	r3, r7, #20
 8005dbe:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8005dc2:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8005dc6:	e054      	b.n	8005e72 <osMessageGet+0xda>
  }
  
  taskWoken = pdFALSE;
 8005dc8:	2300      	movs	r3, #0
 8005dca:	623b      	str	r3, [r7, #32]
  
  ticks = 0;
 8005dcc:	2300      	movs	r3, #0
 8005dce:	627b      	str	r3, [r7, #36]	; 0x24
  if (millisec == osWaitForever) {
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005dd6:	d103      	bne.n	8005de0 <osMessageGet+0x48>
    ticks = portMAX_DELAY;
 8005dd8:	f04f 33ff 	mov.w	r3, #4294967295
 8005ddc:	627b      	str	r3, [r7, #36]	; 0x24
 8005dde:	e009      	b.n	8005df4 <osMessageGet+0x5c>
  }
  else if (millisec != 0) {
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	2b00      	cmp	r3, #0
 8005de4:	d006      	beq.n	8005df4 <osMessageGet+0x5c>
    ticks = millisec / portTICK_PERIOD_MS;
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	627b      	str	r3, [r7, #36]	; 0x24
    if (ticks == 0) {
 8005dea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005dec:	2b00      	cmp	r3, #0
 8005dee:	d101      	bne.n	8005df4 <osMessageGet+0x5c>
      ticks = 1;
 8005df0:	2301      	movs	r3, #1
 8005df2:	627b      	str	r3, [r7, #36]	; 0x24
    }
  }
  
  if (inHandlerMode()) {
 8005df4:	f7ff fdbf 	bl	8005976 <inHandlerMode>
 8005df8:	4603      	mov	r3, r0
 8005dfa:	2b00      	cmp	r3, #0
 8005dfc:	d01c      	beq.n	8005e38 <osMessageGet+0xa0>
    if (xQueueReceiveFromISR(queue_id, &event.value.v, &taskWoken) == pdTRUE) {
 8005dfe:	f107 0220 	add.w	r2, r7, #32
 8005e02:	f107 0314 	add.w	r3, r7, #20
 8005e06:	3304      	adds	r3, #4
 8005e08:	4619      	mov	r1, r3
 8005e0a:	68b8      	ldr	r0, [r7, #8]
 8005e0c:	f000 fe84 	bl	8006b18 <xQueueReceiveFromISR>
 8005e10:	4603      	mov	r3, r0
 8005e12:	2b01      	cmp	r3, #1
 8005e14:	d102      	bne.n	8005e1c <osMessageGet+0x84>
      /* We have mail */
      event.status = osEventMessage;
 8005e16:	2310      	movs	r3, #16
 8005e18:	617b      	str	r3, [r7, #20]
 8005e1a:	e001      	b.n	8005e20 <osMessageGet+0x88>
    }
    else {
      event.status = osOK;
 8005e1c:	2300      	movs	r3, #0
 8005e1e:	617b      	str	r3, [r7, #20]
    }
    portEND_SWITCHING_ISR(taskWoken);
 8005e20:	6a3b      	ldr	r3, [r7, #32]
 8005e22:	2b00      	cmp	r3, #0
 8005e24:	d01d      	beq.n	8005e62 <osMessageGet+0xca>
 8005e26:	4b15      	ldr	r3, [pc, #84]	; (8005e7c <osMessageGet+0xe4>)
 8005e28:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005e2c:	601a      	str	r2, [r3, #0]
 8005e2e:	f3bf 8f4f 	dsb	sy
 8005e32:	f3bf 8f6f 	isb	sy
 8005e36:	e014      	b.n	8005e62 <osMessageGet+0xca>
  }
  else {
    if (xQueueReceive(queue_id, &event.value.v, ticks) == pdTRUE) {
 8005e38:	f107 0314 	add.w	r3, r7, #20
 8005e3c:	3304      	adds	r3, #4
 8005e3e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005e40:	4619      	mov	r1, r3
 8005e42:	68b8      	ldr	r0, [r7, #8]
 8005e44:	f000 fc7c 	bl	8006740 <xQueueReceive>
 8005e48:	4603      	mov	r3, r0
 8005e4a:	2b01      	cmp	r3, #1
 8005e4c:	d102      	bne.n	8005e54 <osMessageGet+0xbc>
      /* We have mail */
      event.status = osEventMessage;
 8005e4e:	2310      	movs	r3, #16
 8005e50:	617b      	str	r3, [r7, #20]
 8005e52:	e006      	b.n	8005e62 <osMessageGet+0xca>
    }
    else {
      event.status = (ticks == 0) ? osOK : osEventTimeout;
 8005e54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e56:	2b00      	cmp	r3, #0
 8005e58:	d101      	bne.n	8005e5e <osMessageGet+0xc6>
 8005e5a:	2300      	movs	r3, #0
 8005e5c:	e000      	b.n	8005e60 <osMessageGet+0xc8>
 8005e5e:	2340      	movs	r3, #64	; 0x40
 8005e60:	617b      	str	r3, [r7, #20]
    }
  }
  
  return event;
 8005e62:	68fb      	ldr	r3, [r7, #12]
 8005e64:	461c      	mov	r4, r3
 8005e66:	f107 0314 	add.w	r3, r7, #20
 8005e6a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8005e6e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 8005e72:	68f8      	ldr	r0, [r7, #12]
 8005e74:	372c      	adds	r7, #44	; 0x2c
 8005e76:	46bd      	mov	sp, r7
 8005e78:	bd90      	pop	{r4, r7, pc}
 8005e7a:	bf00      	nop
 8005e7c:	e000ed04 	.word	0xe000ed04

08005e80 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8005e80:	b480      	push	{r7}
 8005e82:	b083      	sub	sp, #12
 8005e84:	af00      	add	r7, sp, #0
 8005e86:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	f103 0208 	add.w	r2, r3, #8
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	f04f 32ff 	mov.w	r2, #4294967295
 8005e98:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	f103 0208 	add.w	r2, r3, #8
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	f103 0208 	add.w	r2, r3, #8
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	2200      	movs	r2, #0
 8005eb2:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8005eb4:	bf00      	nop
 8005eb6:	370c      	adds	r7, #12
 8005eb8:	46bd      	mov	sp, r7
 8005eba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ebe:	4770      	bx	lr

08005ec0 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8005ec0:	b480      	push	{r7}
 8005ec2:	b083      	sub	sp, #12
 8005ec4:	af00      	add	r7, sp, #0
 8005ec6:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	2200      	movs	r2, #0
 8005ecc:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8005ece:	bf00      	nop
 8005ed0:	370c      	adds	r7, #12
 8005ed2:	46bd      	mov	sp, r7
 8005ed4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ed8:	4770      	bx	lr

08005eda <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8005eda:	b480      	push	{r7}
 8005edc:	b085      	sub	sp, #20
 8005ede:	af00      	add	r7, sp, #0
 8005ee0:	6078      	str	r0, [r7, #4]
 8005ee2:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	685b      	ldr	r3, [r3, #4]
 8005ee8:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8005eea:	683b      	ldr	r3, [r7, #0]
 8005eec:	68fa      	ldr	r2, [r7, #12]
 8005eee:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8005ef0:	68fb      	ldr	r3, [r7, #12]
 8005ef2:	689a      	ldr	r2, [r3, #8]
 8005ef4:	683b      	ldr	r3, [r7, #0]
 8005ef6:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8005ef8:	68fb      	ldr	r3, [r7, #12]
 8005efa:	689b      	ldr	r3, [r3, #8]
 8005efc:	683a      	ldr	r2, [r7, #0]
 8005efe:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8005f00:	68fb      	ldr	r3, [r7, #12]
 8005f02:	683a      	ldr	r2, [r7, #0]
 8005f04:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8005f06:	683b      	ldr	r3, [r7, #0]
 8005f08:	687a      	ldr	r2, [r7, #4]
 8005f0a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	681b      	ldr	r3, [r3, #0]
 8005f10:	1c5a      	adds	r2, r3, #1
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	601a      	str	r2, [r3, #0]
}
 8005f16:	bf00      	nop
 8005f18:	3714      	adds	r7, #20
 8005f1a:	46bd      	mov	sp, r7
 8005f1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f20:	4770      	bx	lr

08005f22 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8005f22:	b480      	push	{r7}
 8005f24:	b085      	sub	sp, #20
 8005f26:	af00      	add	r7, sp, #0
 8005f28:	6078      	str	r0, [r7, #4]
 8005f2a:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8005f2c:	683b      	ldr	r3, [r7, #0]
 8005f2e:	681b      	ldr	r3, [r3, #0]
 8005f30:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8005f32:	68bb      	ldr	r3, [r7, #8]
 8005f34:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005f38:	d103      	bne.n	8005f42 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	691b      	ldr	r3, [r3, #16]
 8005f3e:	60fb      	str	r3, [r7, #12]
 8005f40:	e00c      	b.n	8005f5c <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	3308      	adds	r3, #8
 8005f46:	60fb      	str	r3, [r7, #12]
 8005f48:	e002      	b.n	8005f50 <vListInsert+0x2e>
 8005f4a:	68fb      	ldr	r3, [r7, #12]
 8005f4c:	685b      	ldr	r3, [r3, #4]
 8005f4e:	60fb      	str	r3, [r7, #12]
 8005f50:	68fb      	ldr	r3, [r7, #12]
 8005f52:	685b      	ldr	r3, [r3, #4]
 8005f54:	681b      	ldr	r3, [r3, #0]
 8005f56:	68ba      	ldr	r2, [r7, #8]
 8005f58:	429a      	cmp	r2, r3
 8005f5a:	d2f6      	bcs.n	8005f4a <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8005f5c:	68fb      	ldr	r3, [r7, #12]
 8005f5e:	685a      	ldr	r2, [r3, #4]
 8005f60:	683b      	ldr	r3, [r7, #0]
 8005f62:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8005f64:	683b      	ldr	r3, [r7, #0]
 8005f66:	685b      	ldr	r3, [r3, #4]
 8005f68:	683a      	ldr	r2, [r7, #0]
 8005f6a:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8005f6c:	683b      	ldr	r3, [r7, #0]
 8005f6e:	68fa      	ldr	r2, [r7, #12]
 8005f70:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8005f72:	68fb      	ldr	r3, [r7, #12]
 8005f74:	683a      	ldr	r2, [r7, #0]
 8005f76:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8005f78:	683b      	ldr	r3, [r7, #0]
 8005f7a:	687a      	ldr	r2, [r7, #4]
 8005f7c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	681b      	ldr	r3, [r3, #0]
 8005f82:	1c5a      	adds	r2, r3, #1
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	601a      	str	r2, [r3, #0]
}
 8005f88:	bf00      	nop
 8005f8a:	3714      	adds	r7, #20
 8005f8c:	46bd      	mov	sp, r7
 8005f8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f92:	4770      	bx	lr

08005f94 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8005f94:	b480      	push	{r7}
 8005f96:	b085      	sub	sp, #20
 8005f98:	af00      	add	r7, sp, #0
 8005f9a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	691b      	ldr	r3, [r3, #16]
 8005fa0:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	685b      	ldr	r3, [r3, #4]
 8005fa6:	687a      	ldr	r2, [r7, #4]
 8005fa8:	6892      	ldr	r2, [r2, #8]
 8005faa:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	689b      	ldr	r3, [r3, #8]
 8005fb0:	687a      	ldr	r2, [r7, #4]
 8005fb2:	6852      	ldr	r2, [r2, #4]
 8005fb4:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8005fb6:	68fb      	ldr	r3, [r7, #12]
 8005fb8:	685b      	ldr	r3, [r3, #4]
 8005fba:	687a      	ldr	r2, [r7, #4]
 8005fbc:	429a      	cmp	r2, r3
 8005fbe:	d103      	bne.n	8005fc8 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	689a      	ldr	r2, [r3, #8]
 8005fc4:	68fb      	ldr	r3, [r7, #12]
 8005fc6:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	2200      	movs	r2, #0
 8005fcc:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8005fce:	68fb      	ldr	r3, [r7, #12]
 8005fd0:	681b      	ldr	r3, [r3, #0]
 8005fd2:	1e5a      	subs	r2, r3, #1
 8005fd4:	68fb      	ldr	r3, [r7, #12]
 8005fd6:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8005fd8:	68fb      	ldr	r3, [r7, #12]
 8005fda:	681b      	ldr	r3, [r3, #0]
}
 8005fdc:	4618      	mov	r0, r3
 8005fde:	3714      	adds	r7, #20
 8005fe0:	46bd      	mov	sp, r7
 8005fe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fe6:	4770      	bx	lr

08005fe8 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8005fe8:	b580      	push	{r7, lr}
 8005fea:	b084      	sub	sp, #16
 8005fec:	af00      	add	r7, sp, #0
 8005fee:	6078      	str	r0, [r7, #4]
 8005ff0:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8005ff6:	68fb      	ldr	r3, [r7, #12]
 8005ff8:	2b00      	cmp	r3, #0
 8005ffa:	d10a      	bne.n	8006012 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8005ffc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006000:	f383 8811 	msr	BASEPRI, r3
 8006004:	f3bf 8f6f 	isb	sy
 8006008:	f3bf 8f4f 	dsb	sy
 800600c:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800600e:	bf00      	nop
 8006010:	e7fe      	b.n	8006010 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8006012:	f002 f887 	bl	8008124 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8006016:	68fb      	ldr	r3, [r7, #12]
 8006018:	681a      	ldr	r2, [r3, #0]
 800601a:	68fb      	ldr	r3, [r7, #12]
 800601c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800601e:	68f9      	ldr	r1, [r7, #12]
 8006020:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8006022:	fb01 f303 	mul.w	r3, r1, r3
 8006026:	441a      	add	r2, r3
 8006028:	68fb      	ldr	r3, [r7, #12]
 800602a:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800602c:	68fb      	ldr	r3, [r7, #12]
 800602e:	2200      	movs	r2, #0
 8006030:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8006032:	68fb      	ldr	r3, [r7, #12]
 8006034:	681a      	ldr	r2, [r3, #0]
 8006036:	68fb      	ldr	r3, [r7, #12]
 8006038:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800603a:	68fb      	ldr	r3, [r7, #12]
 800603c:	681a      	ldr	r2, [r3, #0]
 800603e:	68fb      	ldr	r3, [r7, #12]
 8006040:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006042:	3b01      	subs	r3, #1
 8006044:	68f9      	ldr	r1, [r7, #12]
 8006046:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8006048:	fb01 f303 	mul.w	r3, r1, r3
 800604c:	441a      	add	r2, r3
 800604e:	68fb      	ldr	r3, [r7, #12]
 8006050:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8006052:	68fb      	ldr	r3, [r7, #12]
 8006054:	22ff      	movs	r2, #255	; 0xff
 8006056:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800605a:	68fb      	ldr	r3, [r7, #12]
 800605c:	22ff      	movs	r2, #255	; 0xff
 800605e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8006062:	683b      	ldr	r3, [r7, #0]
 8006064:	2b00      	cmp	r3, #0
 8006066:	d114      	bne.n	8006092 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006068:	68fb      	ldr	r3, [r7, #12]
 800606a:	691b      	ldr	r3, [r3, #16]
 800606c:	2b00      	cmp	r3, #0
 800606e:	d01a      	beq.n	80060a6 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006070:	68fb      	ldr	r3, [r7, #12]
 8006072:	3310      	adds	r3, #16
 8006074:	4618      	mov	r0, r3
 8006076:	f001 fb49 	bl	800770c <xTaskRemoveFromEventList>
 800607a:	4603      	mov	r3, r0
 800607c:	2b00      	cmp	r3, #0
 800607e:	d012      	beq.n	80060a6 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8006080:	4b0c      	ldr	r3, [pc, #48]	; (80060b4 <xQueueGenericReset+0xcc>)
 8006082:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006086:	601a      	str	r2, [r3, #0]
 8006088:	f3bf 8f4f 	dsb	sy
 800608c:	f3bf 8f6f 	isb	sy
 8006090:	e009      	b.n	80060a6 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8006092:	68fb      	ldr	r3, [r7, #12]
 8006094:	3310      	adds	r3, #16
 8006096:	4618      	mov	r0, r3
 8006098:	f7ff fef2 	bl	8005e80 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800609c:	68fb      	ldr	r3, [r7, #12]
 800609e:	3324      	adds	r3, #36	; 0x24
 80060a0:	4618      	mov	r0, r3
 80060a2:	f7ff feed 	bl	8005e80 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80060a6:	f002 f86d 	bl	8008184 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80060aa:	2301      	movs	r3, #1
}
 80060ac:	4618      	mov	r0, r3
 80060ae:	3710      	adds	r7, #16
 80060b0:	46bd      	mov	sp, r7
 80060b2:	bd80      	pop	{r7, pc}
 80060b4:	e000ed04 	.word	0xe000ed04

080060b8 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80060b8:	b580      	push	{r7, lr}
 80060ba:	b08e      	sub	sp, #56	; 0x38
 80060bc:	af02      	add	r7, sp, #8
 80060be:	60f8      	str	r0, [r7, #12]
 80060c0:	60b9      	str	r1, [r7, #8]
 80060c2:	607a      	str	r2, [r7, #4]
 80060c4:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80060c6:	68fb      	ldr	r3, [r7, #12]
 80060c8:	2b00      	cmp	r3, #0
 80060ca:	d10a      	bne.n	80060e2 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 80060cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80060d0:	f383 8811 	msr	BASEPRI, r3
 80060d4:	f3bf 8f6f 	isb	sy
 80060d8:	f3bf 8f4f 	dsb	sy
 80060dc:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80060de:	bf00      	nop
 80060e0:	e7fe      	b.n	80060e0 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80060e2:	683b      	ldr	r3, [r7, #0]
 80060e4:	2b00      	cmp	r3, #0
 80060e6:	d10a      	bne.n	80060fe <xQueueGenericCreateStatic+0x46>
	__asm volatile
 80060e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80060ec:	f383 8811 	msr	BASEPRI, r3
 80060f0:	f3bf 8f6f 	isb	sy
 80060f4:	f3bf 8f4f 	dsb	sy
 80060f8:	627b      	str	r3, [r7, #36]	; 0x24
}
 80060fa:	bf00      	nop
 80060fc:	e7fe      	b.n	80060fc <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	2b00      	cmp	r3, #0
 8006102:	d002      	beq.n	800610a <xQueueGenericCreateStatic+0x52>
 8006104:	68bb      	ldr	r3, [r7, #8]
 8006106:	2b00      	cmp	r3, #0
 8006108:	d001      	beq.n	800610e <xQueueGenericCreateStatic+0x56>
 800610a:	2301      	movs	r3, #1
 800610c:	e000      	b.n	8006110 <xQueueGenericCreateStatic+0x58>
 800610e:	2300      	movs	r3, #0
 8006110:	2b00      	cmp	r3, #0
 8006112:	d10a      	bne.n	800612a <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8006114:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006118:	f383 8811 	msr	BASEPRI, r3
 800611c:	f3bf 8f6f 	isb	sy
 8006120:	f3bf 8f4f 	dsb	sy
 8006124:	623b      	str	r3, [r7, #32]
}
 8006126:	bf00      	nop
 8006128:	e7fe      	b.n	8006128 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	2b00      	cmp	r3, #0
 800612e:	d102      	bne.n	8006136 <xQueueGenericCreateStatic+0x7e>
 8006130:	68bb      	ldr	r3, [r7, #8]
 8006132:	2b00      	cmp	r3, #0
 8006134:	d101      	bne.n	800613a <xQueueGenericCreateStatic+0x82>
 8006136:	2301      	movs	r3, #1
 8006138:	e000      	b.n	800613c <xQueueGenericCreateStatic+0x84>
 800613a:	2300      	movs	r3, #0
 800613c:	2b00      	cmp	r3, #0
 800613e:	d10a      	bne.n	8006156 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8006140:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006144:	f383 8811 	msr	BASEPRI, r3
 8006148:	f3bf 8f6f 	isb	sy
 800614c:	f3bf 8f4f 	dsb	sy
 8006150:	61fb      	str	r3, [r7, #28]
}
 8006152:	bf00      	nop
 8006154:	e7fe      	b.n	8006154 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8006156:	2348      	movs	r3, #72	; 0x48
 8006158:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800615a:	697b      	ldr	r3, [r7, #20]
 800615c:	2b48      	cmp	r3, #72	; 0x48
 800615e:	d00a      	beq.n	8006176 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8006160:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006164:	f383 8811 	msr	BASEPRI, r3
 8006168:	f3bf 8f6f 	isb	sy
 800616c:	f3bf 8f4f 	dsb	sy
 8006170:	61bb      	str	r3, [r7, #24]
}
 8006172:	bf00      	nop
 8006174:	e7fe      	b.n	8006174 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8006176:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8006178:	683b      	ldr	r3, [r7, #0]
 800617a:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800617c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800617e:	2b00      	cmp	r3, #0
 8006180:	d00d      	beq.n	800619e <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8006182:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006184:	2201      	movs	r2, #1
 8006186:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800618a:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800618e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006190:	9300      	str	r3, [sp, #0]
 8006192:	4613      	mov	r3, r2
 8006194:	687a      	ldr	r2, [r7, #4]
 8006196:	68b9      	ldr	r1, [r7, #8]
 8006198:	68f8      	ldr	r0, [r7, #12]
 800619a:	f000 f83f 	bl	800621c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800619e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 80061a0:	4618      	mov	r0, r3
 80061a2:	3730      	adds	r7, #48	; 0x30
 80061a4:	46bd      	mov	sp, r7
 80061a6:	bd80      	pop	{r7, pc}

080061a8 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 80061a8:	b580      	push	{r7, lr}
 80061aa:	b08a      	sub	sp, #40	; 0x28
 80061ac:	af02      	add	r7, sp, #8
 80061ae:	60f8      	str	r0, [r7, #12]
 80061b0:	60b9      	str	r1, [r7, #8]
 80061b2:	4613      	mov	r3, r2
 80061b4:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80061b6:	68fb      	ldr	r3, [r7, #12]
 80061b8:	2b00      	cmp	r3, #0
 80061ba:	d10a      	bne.n	80061d2 <xQueueGenericCreate+0x2a>
	__asm volatile
 80061bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80061c0:	f383 8811 	msr	BASEPRI, r3
 80061c4:	f3bf 8f6f 	isb	sy
 80061c8:	f3bf 8f4f 	dsb	sy
 80061cc:	613b      	str	r3, [r7, #16]
}
 80061ce:	bf00      	nop
 80061d0:	e7fe      	b.n	80061d0 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80061d2:	68fb      	ldr	r3, [r7, #12]
 80061d4:	68ba      	ldr	r2, [r7, #8]
 80061d6:	fb02 f303 	mul.w	r3, r2, r3
 80061da:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 80061dc:	69fb      	ldr	r3, [r7, #28]
 80061de:	3348      	adds	r3, #72	; 0x48
 80061e0:	4618      	mov	r0, r3
 80061e2:	f002 f8c1 	bl	8008368 <pvPortMalloc>
 80061e6:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 80061e8:	69bb      	ldr	r3, [r7, #24]
 80061ea:	2b00      	cmp	r3, #0
 80061ec:	d011      	beq.n	8006212 <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 80061ee:	69bb      	ldr	r3, [r7, #24]
 80061f0:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80061f2:	697b      	ldr	r3, [r7, #20]
 80061f4:	3348      	adds	r3, #72	; 0x48
 80061f6:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 80061f8:	69bb      	ldr	r3, [r7, #24]
 80061fa:	2200      	movs	r2, #0
 80061fc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8006200:	79fa      	ldrb	r2, [r7, #7]
 8006202:	69bb      	ldr	r3, [r7, #24]
 8006204:	9300      	str	r3, [sp, #0]
 8006206:	4613      	mov	r3, r2
 8006208:	697a      	ldr	r2, [r7, #20]
 800620a:	68b9      	ldr	r1, [r7, #8]
 800620c:	68f8      	ldr	r0, [r7, #12]
 800620e:	f000 f805 	bl	800621c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8006212:	69bb      	ldr	r3, [r7, #24]
	}
 8006214:	4618      	mov	r0, r3
 8006216:	3720      	adds	r7, #32
 8006218:	46bd      	mov	sp, r7
 800621a:	bd80      	pop	{r7, pc}

0800621c <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800621c:	b580      	push	{r7, lr}
 800621e:	b084      	sub	sp, #16
 8006220:	af00      	add	r7, sp, #0
 8006222:	60f8      	str	r0, [r7, #12]
 8006224:	60b9      	str	r1, [r7, #8]
 8006226:	607a      	str	r2, [r7, #4]
 8006228:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800622a:	68bb      	ldr	r3, [r7, #8]
 800622c:	2b00      	cmp	r3, #0
 800622e:	d103      	bne.n	8006238 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8006230:	69bb      	ldr	r3, [r7, #24]
 8006232:	69ba      	ldr	r2, [r7, #24]
 8006234:	601a      	str	r2, [r3, #0]
 8006236:	e002      	b.n	800623e <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8006238:	69bb      	ldr	r3, [r7, #24]
 800623a:	687a      	ldr	r2, [r7, #4]
 800623c:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800623e:	69bb      	ldr	r3, [r7, #24]
 8006240:	68fa      	ldr	r2, [r7, #12]
 8006242:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8006244:	69bb      	ldr	r3, [r7, #24]
 8006246:	68ba      	ldr	r2, [r7, #8]
 8006248:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800624a:	2101      	movs	r1, #1
 800624c:	69b8      	ldr	r0, [r7, #24]
 800624e:	f7ff fecb 	bl	8005fe8 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8006252:	bf00      	nop
 8006254:	3710      	adds	r7, #16
 8006256:	46bd      	mov	sp, r7
 8006258:	bd80      	pop	{r7, pc}

0800625a <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 800625a:	b580      	push	{r7, lr}
 800625c:	b082      	sub	sp, #8
 800625e:	af00      	add	r7, sp, #0
 8006260:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	2b00      	cmp	r3, #0
 8006266:	d00e      	beq.n	8006286 <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	2200      	movs	r2, #0
 800626c:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	2200      	movs	r2, #0
 8006272:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	2200      	movs	r2, #0
 8006278:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 800627a:	2300      	movs	r3, #0
 800627c:	2200      	movs	r2, #0
 800627e:	2100      	movs	r1, #0
 8006280:	6878      	ldr	r0, [r7, #4]
 8006282:	f000 f837 	bl	80062f4 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 8006286:	bf00      	nop
 8006288:	3708      	adds	r7, #8
 800628a:	46bd      	mov	sp, r7
 800628c:	bd80      	pop	{r7, pc}

0800628e <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 800628e:	b580      	push	{r7, lr}
 8006290:	b086      	sub	sp, #24
 8006292:	af00      	add	r7, sp, #0
 8006294:	4603      	mov	r3, r0
 8006296:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8006298:	2301      	movs	r3, #1
 800629a:	617b      	str	r3, [r7, #20]
 800629c:	2300      	movs	r3, #0
 800629e:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 80062a0:	79fb      	ldrb	r3, [r7, #7]
 80062a2:	461a      	mov	r2, r3
 80062a4:	6939      	ldr	r1, [r7, #16]
 80062a6:	6978      	ldr	r0, [r7, #20]
 80062a8:	f7ff ff7e 	bl	80061a8 <xQueueGenericCreate>
 80062ac:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 80062ae:	68f8      	ldr	r0, [r7, #12]
 80062b0:	f7ff ffd3 	bl	800625a <prvInitialiseMutex>

		return xNewQueue;
 80062b4:	68fb      	ldr	r3, [r7, #12]
	}
 80062b6:	4618      	mov	r0, r3
 80062b8:	3718      	adds	r7, #24
 80062ba:	46bd      	mov	sp, r7
 80062bc:	bd80      	pop	{r7, pc}

080062be <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 80062be:	b580      	push	{r7, lr}
 80062c0:	b088      	sub	sp, #32
 80062c2:	af02      	add	r7, sp, #8
 80062c4:	4603      	mov	r3, r0
 80062c6:	6039      	str	r1, [r7, #0]
 80062c8:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 80062ca:	2301      	movs	r3, #1
 80062cc:	617b      	str	r3, [r7, #20]
 80062ce:	2300      	movs	r3, #0
 80062d0:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 80062d2:	79fb      	ldrb	r3, [r7, #7]
 80062d4:	9300      	str	r3, [sp, #0]
 80062d6:	683b      	ldr	r3, [r7, #0]
 80062d8:	2200      	movs	r2, #0
 80062da:	6939      	ldr	r1, [r7, #16]
 80062dc:	6978      	ldr	r0, [r7, #20]
 80062de:	f7ff feeb 	bl	80060b8 <xQueueGenericCreateStatic>
 80062e2:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 80062e4:	68f8      	ldr	r0, [r7, #12]
 80062e6:	f7ff ffb8 	bl	800625a <prvInitialiseMutex>

		return xNewQueue;
 80062ea:	68fb      	ldr	r3, [r7, #12]
	}
 80062ec:	4618      	mov	r0, r3
 80062ee:	3718      	adds	r7, #24
 80062f0:	46bd      	mov	sp, r7
 80062f2:	bd80      	pop	{r7, pc}

080062f4 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80062f4:	b580      	push	{r7, lr}
 80062f6:	b08e      	sub	sp, #56	; 0x38
 80062f8:	af00      	add	r7, sp, #0
 80062fa:	60f8      	str	r0, [r7, #12]
 80062fc:	60b9      	str	r1, [r7, #8]
 80062fe:	607a      	str	r2, [r7, #4]
 8006300:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8006302:	2300      	movs	r3, #0
 8006304:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8006306:	68fb      	ldr	r3, [r7, #12]
 8006308:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800630a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800630c:	2b00      	cmp	r3, #0
 800630e:	d10a      	bne.n	8006326 <xQueueGenericSend+0x32>
	__asm volatile
 8006310:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006314:	f383 8811 	msr	BASEPRI, r3
 8006318:	f3bf 8f6f 	isb	sy
 800631c:	f3bf 8f4f 	dsb	sy
 8006320:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8006322:	bf00      	nop
 8006324:	e7fe      	b.n	8006324 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006326:	68bb      	ldr	r3, [r7, #8]
 8006328:	2b00      	cmp	r3, #0
 800632a:	d103      	bne.n	8006334 <xQueueGenericSend+0x40>
 800632c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800632e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006330:	2b00      	cmp	r3, #0
 8006332:	d101      	bne.n	8006338 <xQueueGenericSend+0x44>
 8006334:	2301      	movs	r3, #1
 8006336:	e000      	b.n	800633a <xQueueGenericSend+0x46>
 8006338:	2300      	movs	r3, #0
 800633a:	2b00      	cmp	r3, #0
 800633c:	d10a      	bne.n	8006354 <xQueueGenericSend+0x60>
	__asm volatile
 800633e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006342:	f383 8811 	msr	BASEPRI, r3
 8006346:	f3bf 8f6f 	isb	sy
 800634a:	f3bf 8f4f 	dsb	sy
 800634e:	627b      	str	r3, [r7, #36]	; 0x24
}
 8006350:	bf00      	nop
 8006352:	e7fe      	b.n	8006352 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8006354:	683b      	ldr	r3, [r7, #0]
 8006356:	2b02      	cmp	r3, #2
 8006358:	d103      	bne.n	8006362 <xQueueGenericSend+0x6e>
 800635a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800635c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800635e:	2b01      	cmp	r3, #1
 8006360:	d101      	bne.n	8006366 <xQueueGenericSend+0x72>
 8006362:	2301      	movs	r3, #1
 8006364:	e000      	b.n	8006368 <xQueueGenericSend+0x74>
 8006366:	2300      	movs	r3, #0
 8006368:	2b00      	cmp	r3, #0
 800636a:	d10a      	bne.n	8006382 <xQueueGenericSend+0x8e>
	__asm volatile
 800636c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006370:	f383 8811 	msr	BASEPRI, r3
 8006374:	f3bf 8f6f 	isb	sy
 8006378:	f3bf 8f4f 	dsb	sy
 800637c:	623b      	str	r3, [r7, #32]
}
 800637e:	bf00      	nop
 8006380:	e7fe      	b.n	8006380 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8006382:	f001 fb83 	bl	8007a8c <xTaskGetSchedulerState>
 8006386:	4603      	mov	r3, r0
 8006388:	2b00      	cmp	r3, #0
 800638a:	d102      	bne.n	8006392 <xQueueGenericSend+0x9e>
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	2b00      	cmp	r3, #0
 8006390:	d101      	bne.n	8006396 <xQueueGenericSend+0xa2>
 8006392:	2301      	movs	r3, #1
 8006394:	e000      	b.n	8006398 <xQueueGenericSend+0xa4>
 8006396:	2300      	movs	r3, #0
 8006398:	2b00      	cmp	r3, #0
 800639a:	d10a      	bne.n	80063b2 <xQueueGenericSend+0xbe>
	__asm volatile
 800639c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80063a0:	f383 8811 	msr	BASEPRI, r3
 80063a4:	f3bf 8f6f 	isb	sy
 80063a8:	f3bf 8f4f 	dsb	sy
 80063ac:	61fb      	str	r3, [r7, #28]
}
 80063ae:	bf00      	nop
 80063b0:	e7fe      	b.n	80063b0 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80063b2:	f001 feb7 	bl	8008124 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80063b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80063b8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80063ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80063bc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80063be:	429a      	cmp	r2, r3
 80063c0:	d302      	bcc.n	80063c8 <xQueueGenericSend+0xd4>
 80063c2:	683b      	ldr	r3, [r7, #0]
 80063c4:	2b02      	cmp	r3, #2
 80063c6:	d129      	bne.n	800641c <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80063c8:	683a      	ldr	r2, [r7, #0]
 80063ca:	68b9      	ldr	r1, [r7, #8]
 80063cc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80063ce:	f000 fc3b 	bl	8006c48 <prvCopyDataToQueue>
 80063d2:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80063d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80063d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80063d8:	2b00      	cmp	r3, #0
 80063da:	d010      	beq.n	80063fe <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80063dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80063de:	3324      	adds	r3, #36	; 0x24
 80063e0:	4618      	mov	r0, r3
 80063e2:	f001 f993 	bl	800770c <xTaskRemoveFromEventList>
 80063e6:	4603      	mov	r3, r0
 80063e8:	2b00      	cmp	r3, #0
 80063ea:	d013      	beq.n	8006414 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80063ec:	4b3f      	ldr	r3, [pc, #252]	; (80064ec <xQueueGenericSend+0x1f8>)
 80063ee:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80063f2:	601a      	str	r2, [r3, #0]
 80063f4:	f3bf 8f4f 	dsb	sy
 80063f8:	f3bf 8f6f 	isb	sy
 80063fc:	e00a      	b.n	8006414 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80063fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006400:	2b00      	cmp	r3, #0
 8006402:	d007      	beq.n	8006414 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8006404:	4b39      	ldr	r3, [pc, #228]	; (80064ec <xQueueGenericSend+0x1f8>)
 8006406:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800640a:	601a      	str	r2, [r3, #0]
 800640c:	f3bf 8f4f 	dsb	sy
 8006410:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8006414:	f001 feb6 	bl	8008184 <vPortExitCritical>
				return pdPASS;
 8006418:	2301      	movs	r3, #1
 800641a:	e063      	b.n	80064e4 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	2b00      	cmp	r3, #0
 8006420:	d103      	bne.n	800642a <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8006422:	f001 feaf 	bl	8008184 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8006426:	2300      	movs	r3, #0
 8006428:	e05c      	b.n	80064e4 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 800642a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800642c:	2b00      	cmp	r3, #0
 800642e:	d106      	bne.n	800643e <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8006430:	f107 0314 	add.w	r3, r7, #20
 8006434:	4618      	mov	r0, r3
 8006436:	f001 f9cb 	bl	80077d0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800643a:	2301      	movs	r3, #1
 800643c:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800643e:	f001 fea1 	bl	8008184 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8006442:	f000 ff59 	bl	80072f8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8006446:	f001 fe6d 	bl	8008124 <vPortEnterCritical>
 800644a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800644c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006450:	b25b      	sxtb	r3, r3
 8006452:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006456:	d103      	bne.n	8006460 <xQueueGenericSend+0x16c>
 8006458:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800645a:	2200      	movs	r2, #0
 800645c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006460:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006462:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006466:	b25b      	sxtb	r3, r3
 8006468:	f1b3 3fff 	cmp.w	r3, #4294967295
 800646c:	d103      	bne.n	8006476 <xQueueGenericSend+0x182>
 800646e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006470:	2200      	movs	r2, #0
 8006472:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006476:	f001 fe85 	bl	8008184 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800647a:	1d3a      	adds	r2, r7, #4
 800647c:	f107 0314 	add.w	r3, r7, #20
 8006480:	4611      	mov	r1, r2
 8006482:	4618      	mov	r0, r3
 8006484:	f001 f9ba 	bl	80077fc <xTaskCheckForTimeOut>
 8006488:	4603      	mov	r3, r0
 800648a:	2b00      	cmp	r3, #0
 800648c:	d124      	bne.n	80064d8 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800648e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006490:	f000 fcd2 	bl	8006e38 <prvIsQueueFull>
 8006494:	4603      	mov	r3, r0
 8006496:	2b00      	cmp	r3, #0
 8006498:	d018      	beq.n	80064cc <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800649a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800649c:	3310      	adds	r3, #16
 800649e:	687a      	ldr	r2, [r7, #4]
 80064a0:	4611      	mov	r1, r2
 80064a2:	4618      	mov	r0, r3
 80064a4:	f001 f90e 	bl	80076c4 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80064a8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80064aa:	f000 fc5d 	bl	8006d68 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80064ae:	f000 ff31 	bl	8007314 <xTaskResumeAll>
 80064b2:	4603      	mov	r3, r0
 80064b4:	2b00      	cmp	r3, #0
 80064b6:	f47f af7c 	bne.w	80063b2 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 80064ba:	4b0c      	ldr	r3, [pc, #48]	; (80064ec <xQueueGenericSend+0x1f8>)
 80064bc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80064c0:	601a      	str	r2, [r3, #0]
 80064c2:	f3bf 8f4f 	dsb	sy
 80064c6:	f3bf 8f6f 	isb	sy
 80064ca:	e772      	b.n	80063b2 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80064cc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80064ce:	f000 fc4b 	bl	8006d68 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80064d2:	f000 ff1f 	bl	8007314 <xTaskResumeAll>
 80064d6:	e76c      	b.n	80063b2 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80064d8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80064da:	f000 fc45 	bl	8006d68 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80064de:	f000 ff19 	bl	8007314 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80064e2:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 80064e4:	4618      	mov	r0, r3
 80064e6:	3738      	adds	r7, #56	; 0x38
 80064e8:	46bd      	mov	sp, r7
 80064ea:	bd80      	pop	{r7, pc}
 80064ec:	e000ed04 	.word	0xe000ed04

080064f0 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 80064f0:	b580      	push	{r7, lr}
 80064f2:	b090      	sub	sp, #64	; 0x40
 80064f4:	af00      	add	r7, sp, #0
 80064f6:	60f8      	str	r0, [r7, #12]
 80064f8:	60b9      	str	r1, [r7, #8]
 80064fa:	607a      	str	r2, [r7, #4]
 80064fc:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80064fe:	68fb      	ldr	r3, [r7, #12]
 8006500:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 8006502:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006504:	2b00      	cmp	r3, #0
 8006506:	d10a      	bne.n	800651e <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8006508:	f04f 0350 	mov.w	r3, #80	; 0x50
 800650c:	f383 8811 	msr	BASEPRI, r3
 8006510:	f3bf 8f6f 	isb	sy
 8006514:	f3bf 8f4f 	dsb	sy
 8006518:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800651a:	bf00      	nop
 800651c:	e7fe      	b.n	800651c <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800651e:	68bb      	ldr	r3, [r7, #8]
 8006520:	2b00      	cmp	r3, #0
 8006522:	d103      	bne.n	800652c <xQueueGenericSendFromISR+0x3c>
 8006524:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006526:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006528:	2b00      	cmp	r3, #0
 800652a:	d101      	bne.n	8006530 <xQueueGenericSendFromISR+0x40>
 800652c:	2301      	movs	r3, #1
 800652e:	e000      	b.n	8006532 <xQueueGenericSendFromISR+0x42>
 8006530:	2300      	movs	r3, #0
 8006532:	2b00      	cmp	r3, #0
 8006534:	d10a      	bne.n	800654c <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8006536:	f04f 0350 	mov.w	r3, #80	; 0x50
 800653a:	f383 8811 	msr	BASEPRI, r3
 800653e:	f3bf 8f6f 	isb	sy
 8006542:	f3bf 8f4f 	dsb	sy
 8006546:	627b      	str	r3, [r7, #36]	; 0x24
}
 8006548:	bf00      	nop
 800654a:	e7fe      	b.n	800654a <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800654c:	683b      	ldr	r3, [r7, #0]
 800654e:	2b02      	cmp	r3, #2
 8006550:	d103      	bne.n	800655a <xQueueGenericSendFromISR+0x6a>
 8006552:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006554:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006556:	2b01      	cmp	r3, #1
 8006558:	d101      	bne.n	800655e <xQueueGenericSendFromISR+0x6e>
 800655a:	2301      	movs	r3, #1
 800655c:	e000      	b.n	8006560 <xQueueGenericSendFromISR+0x70>
 800655e:	2300      	movs	r3, #0
 8006560:	2b00      	cmp	r3, #0
 8006562:	d10a      	bne.n	800657a <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8006564:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006568:	f383 8811 	msr	BASEPRI, r3
 800656c:	f3bf 8f6f 	isb	sy
 8006570:	f3bf 8f4f 	dsb	sy
 8006574:	623b      	str	r3, [r7, #32]
}
 8006576:	bf00      	nop
 8006578:	e7fe      	b.n	8006578 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800657a:	f001 feb5 	bl	80082e8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800657e:	f3ef 8211 	mrs	r2, BASEPRI
 8006582:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006586:	f383 8811 	msr	BASEPRI, r3
 800658a:	f3bf 8f6f 	isb	sy
 800658e:	f3bf 8f4f 	dsb	sy
 8006592:	61fa      	str	r2, [r7, #28]
 8006594:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8006596:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8006598:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800659a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800659c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800659e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80065a0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80065a2:	429a      	cmp	r2, r3
 80065a4:	d302      	bcc.n	80065ac <xQueueGenericSendFromISR+0xbc>
 80065a6:	683b      	ldr	r3, [r7, #0]
 80065a8:	2b02      	cmp	r3, #2
 80065aa:	d12f      	bne.n	800660c <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80065ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80065ae:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80065b2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 80065b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80065b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80065ba:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80065bc:	683a      	ldr	r2, [r7, #0]
 80065be:	68b9      	ldr	r1, [r7, #8]
 80065c0:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80065c2:	f000 fb41 	bl	8006c48 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80065c6:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 80065ca:	f1b3 3fff 	cmp.w	r3, #4294967295
 80065ce:	d112      	bne.n	80065f6 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80065d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80065d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80065d4:	2b00      	cmp	r3, #0
 80065d6:	d016      	beq.n	8006606 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80065d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80065da:	3324      	adds	r3, #36	; 0x24
 80065dc:	4618      	mov	r0, r3
 80065de:	f001 f895 	bl	800770c <xTaskRemoveFromEventList>
 80065e2:	4603      	mov	r3, r0
 80065e4:	2b00      	cmp	r3, #0
 80065e6:	d00e      	beq.n	8006606 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	2b00      	cmp	r3, #0
 80065ec:	d00b      	beq.n	8006606 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	2201      	movs	r2, #1
 80065f2:	601a      	str	r2, [r3, #0]
 80065f4:	e007      	b.n	8006606 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80065f6:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80065fa:	3301      	adds	r3, #1
 80065fc:	b2db      	uxtb	r3, r3
 80065fe:	b25a      	sxtb	r2, r3
 8006600:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006602:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8006606:	2301      	movs	r3, #1
 8006608:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 800660a:	e001      	b.n	8006610 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800660c:	2300      	movs	r3, #0
 800660e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006610:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006612:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8006614:	697b      	ldr	r3, [r7, #20]
 8006616:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800661a:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800661c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800661e:	4618      	mov	r0, r3
 8006620:	3740      	adds	r7, #64	; 0x40
 8006622:	46bd      	mov	sp, r7
 8006624:	bd80      	pop	{r7, pc}

08006626 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8006626:	b580      	push	{r7, lr}
 8006628:	b08e      	sub	sp, #56	; 0x38
 800662a:	af00      	add	r7, sp, #0
 800662c:	6078      	str	r0, [r7, #4]
 800662e:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 8006634:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006636:	2b00      	cmp	r3, #0
 8006638:	d10a      	bne.n	8006650 <xQueueGiveFromISR+0x2a>
	__asm volatile
 800663a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800663e:	f383 8811 	msr	BASEPRI, r3
 8006642:	f3bf 8f6f 	isb	sy
 8006646:	f3bf 8f4f 	dsb	sy
 800664a:	623b      	str	r3, [r7, #32]
}
 800664c:	bf00      	nop
 800664e:	e7fe      	b.n	800664e <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8006650:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006652:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006654:	2b00      	cmp	r3, #0
 8006656:	d00a      	beq.n	800666e <xQueueGiveFromISR+0x48>
	__asm volatile
 8006658:	f04f 0350 	mov.w	r3, #80	; 0x50
 800665c:	f383 8811 	msr	BASEPRI, r3
 8006660:	f3bf 8f6f 	isb	sy
 8006664:	f3bf 8f4f 	dsb	sy
 8006668:	61fb      	str	r3, [r7, #28]
}
 800666a:	bf00      	nop
 800666c:	e7fe      	b.n	800666c <xQueueGiveFromISR+0x46>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 800666e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006670:	681b      	ldr	r3, [r3, #0]
 8006672:	2b00      	cmp	r3, #0
 8006674:	d103      	bne.n	800667e <xQueueGiveFromISR+0x58>
 8006676:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006678:	689b      	ldr	r3, [r3, #8]
 800667a:	2b00      	cmp	r3, #0
 800667c:	d101      	bne.n	8006682 <xQueueGiveFromISR+0x5c>
 800667e:	2301      	movs	r3, #1
 8006680:	e000      	b.n	8006684 <xQueueGiveFromISR+0x5e>
 8006682:	2300      	movs	r3, #0
 8006684:	2b00      	cmp	r3, #0
 8006686:	d10a      	bne.n	800669e <xQueueGiveFromISR+0x78>
	__asm volatile
 8006688:	f04f 0350 	mov.w	r3, #80	; 0x50
 800668c:	f383 8811 	msr	BASEPRI, r3
 8006690:	f3bf 8f6f 	isb	sy
 8006694:	f3bf 8f4f 	dsb	sy
 8006698:	61bb      	str	r3, [r7, #24]
}
 800669a:	bf00      	nop
 800669c:	e7fe      	b.n	800669c <xQueueGiveFromISR+0x76>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800669e:	f001 fe23 	bl	80082e8 <vPortValidateInterruptPriority>
	__asm volatile
 80066a2:	f3ef 8211 	mrs	r2, BASEPRI
 80066a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80066aa:	f383 8811 	msr	BASEPRI, r3
 80066ae:	f3bf 8f6f 	isb	sy
 80066b2:	f3bf 8f4f 	dsb	sy
 80066b6:	617a      	str	r2, [r7, #20]
 80066b8:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 80066ba:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80066bc:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80066be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80066c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80066c2:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 80066c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80066c6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80066c8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80066ca:	429a      	cmp	r2, r3
 80066cc:	d22b      	bcs.n	8006726 <xQueueGiveFromISR+0x100>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80066ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80066d0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80066d4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80066d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80066da:	1c5a      	adds	r2, r3, #1
 80066dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80066de:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80066e0:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80066e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80066e8:	d112      	bne.n	8006710 <xQueueGiveFromISR+0xea>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80066ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80066ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80066ee:	2b00      	cmp	r3, #0
 80066f0:	d016      	beq.n	8006720 <xQueueGiveFromISR+0xfa>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80066f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80066f4:	3324      	adds	r3, #36	; 0x24
 80066f6:	4618      	mov	r0, r3
 80066f8:	f001 f808 	bl	800770c <xTaskRemoveFromEventList>
 80066fc:	4603      	mov	r3, r0
 80066fe:	2b00      	cmp	r3, #0
 8006700:	d00e      	beq.n	8006720 <xQueueGiveFromISR+0xfa>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8006702:	683b      	ldr	r3, [r7, #0]
 8006704:	2b00      	cmp	r3, #0
 8006706:	d00b      	beq.n	8006720 <xQueueGiveFromISR+0xfa>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8006708:	683b      	ldr	r3, [r7, #0]
 800670a:	2201      	movs	r2, #1
 800670c:	601a      	str	r2, [r3, #0]
 800670e:	e007      	b.n	8006720 <xQueueGiveFromISR+0xfa>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8006710:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006714:	3301      	adds	r3, #1
 8006716:	b2db      	uxtb	r3, r3
 8006718:	b25a      	sxtb	r2, r3
 800671a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800671c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8006720:	2301      	movs	r3, #1
 8006722:	637b      	str	r3, [r7, #52]	; 0x34
 8006724:	e001      	b.n	800672a <xQueueGiveFromISR+0x104>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8006726:	2300      	movs	r3, #0
 8006728:	637b      	str	r3, [r7, #52]	; 0x34
 800672a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800672c:	60fb      	str	r3, [r7, #12]
	__asm volatile
 800672e:	68fb      	ldr	r3, [r7, #12]
 8006730:	f383 8811 	msr	BASEPRI, r3
}
 8006734:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8006736:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8006738:	4618      	mov	r0, r3
 800673a:	3738      	adds	r7, #56	; 0x38
 800673c:	46bd      	mov	sp, r7
 800673e:	bd80      	pop	{r7, pc}

08006740 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8006740:	b580      	push	{r7, lr}
 8006742:	b08c      	sub	sp, #48	; 0x30
 8006744:	af00      	add	r7, sp, #0
 8006746:	60f8      	str	r0, [r7, #12]
 8006748:	60b9      	str	r1, [r7, #8]
 800674a:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800674c:	2300      	movs	r3, #0
 800674e:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8006750:	68fb      	ldr	r3, [r7, #12]
 8006752:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8006754:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006756:	2b00      	cmp	r3, #0
 8006758:	d10a      	bne.n	8006770 <xQueueReceive+0x30>
	__asm volatile
 800675a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800675e:	f383 8811 	msr	BASEPRI, r3
 8006762:	f3bf 8f6f 	isb	sy
 8006766:	f3bf 8f4f 	dsb	sy
 800676a:	623b      	str	r3, [r7, #32]
}
 800676c:	bf00      	nop
 800676e:	e7fe      	b.n	800676e <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006770:	68bb      	ldr	r3, [r7, #8]
 8006772:	2b00      	cmp	r3, #0
 8006774:	d103      	bne.n	800677e <xQueueReceive+0x3e>
 8006776:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006778:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800677a:	2b00      	cmp	r3, #0
 800677c:	d101      	bne.n	8006782 <xQueueReceive+0x42>
 800677e:	2301      	movs	r3, #1
 8006780:	e000      	b.n	8006784 <xQueueReceive+0x44>
 8006782:	2300      	movs	r3, #0
 8006784:	2b00      	cmp	r3, #0
 8006786:	d10a      	bne.n	800679e <xQueueReceive+0x5e>
	__asm volatile
 8006788:	f04f 0350 	mov.w	r3, #80	; 0x50
 800678c:	f383 8811 	msr	BASEPRI, r3
 8006790:	f3bf 8f6f 	isb	sy
 8006794:	f3bf 8f4f 	dsb	sy
 8006798:	61fb      	str	r3, [r7, #28]
}
 800679a:	bf00      	nop
 800679c:	e7fe      	b.n	800679c <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800679e:	f001 f975 	bl	8007a8c <xTaskGetSchedulerState>
 80067a2:	4603      	mov	r3, r0
 80067a4:	2b00      	cmp	r3, #0
 80067a6:	d102      	bne.n	80067ae <xQueueReceive+0x6e>
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	2b00      	cmp	r3, #0
 80067ac:	d101      	bne.n	80067b2 <xQueueReceive+0x72>
 80067ae:	2301      	movs	r3, #1
 80067b0:	e000      	b.n	80067b4 <xQueueReceive+0x74>
 80067b2:	2300      	movs	r3, #0
 80067b4:	2b00      	cmp	r3, #0
 80067b6:	d10a      	bne.n	80067ce <xQueueReceive+0x8e>
	__asm volatile
 80067b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80067bc:	f383 8811 	msr	BASEPRI, r3
 80067c0:	f3bf 8f6f 	isb	sy
 80067c4:	f3bf 8f4f 	dsb	sy
 80067c8:	61bb      	str	r3, [r7, #24]
}
 80067ca:	bf00      	nop
 80067cc:	e7fe      	b.n	80067cc <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80067ce:	f001 fca9 	bl	8008124 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80067d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80067d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80067d6:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80067d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067da:	2b00      	cmp	r3, #0
 80067dc:	d01f      	beq.n	800681e <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80067de:	68b9      	ldr	r1, [r7, #8]
 80067e0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80067e2:	f000 fa9b 	bl	8006d1c <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80067e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067e8:	1e5a      	subs	r2, r3, #1
 80067ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80067ec:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80067ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80067f0:	691b      	ldr	r3, [r3, #16]
 80067f2:	2b00      	cmp	r3, #0
 80067f4:	d00f      	beq.n	8006816 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80067f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80067f8:	3310      	adds	r3, #16
 80067fa:	4618      	mov	r0, r3
 80067fc:	f000 ff86 	bl	800770c <xTaskRemoveFromEventList>
 8006800:	4603      	mov	r3, r0
 8006802:	2b00      	cmp	r3, #0
 8006804:	d007      	beq.n	8006816 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8006806:	4b3d      	ldr	r3, [pc, #244]	; (80068fc <xQueueReceive+0x1bc>)
 8006808:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800680c:	601a      	str	r2, [r3, #0]
 800680e:	f3bf 8f4f 	dsb	sy
 8006812:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8006816:	f001 fcb5 	bl	8008184 <vPortExitCritical>
				return pdPASS;
 800681a:	2301      	movs	r3, #1
 800681c:	e069      	b.n	80068f2 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800681e:	687b      	ldr	r3, [r7, #4]
 8006820:	2b00      	cmp	r3, #0
 8006822:	d103      	bne.n	800682c <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8006824:	f001 fcae 	bl	8008184 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8006828:	2300      	movs	r3, #0
 800682a:	e062      	b.n	80068f2 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 800682c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800682e:	2b00      	cmp	r3, #0
 8006830:	d106      	bne.n	8006840 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8006832:	f107 0310 	add.w	r3, r7, #16
 8006836:	4618      	mov	r0, r3
 8006838:	f000 ffca 	bl	80077d0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800683c:	2301      	movs	r3, #1
 800683e:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8006840:	f001 fca0 	bl	8008184 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8006844:	f000 fd58 	bl	80072f8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8006848:	f001 fc6c 	bl	8008124 <vPortEnterCritical>
 800684c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800684e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006852:	b25b      	sxtb	r3, r3
 8006854:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006858:	d103      	bne.n	8006862 <xQueueReceive+0x122>
 800685a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800685c:	2200      	movs	r2, #0
 800685e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006862:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006864:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006868:	b25b      	sxtb	r3, r3
 800686a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800686e:	d103      	bne.n	8006878 <xQueueReceive+0x138>
 8006870:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006872:	2200      	movs	r2, #0
 8006874:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006878:	f001 fc84 	bl	8008184 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800687c:	1d3a      	adds	r2, r7, #4
 800687e:	f107 0310 	add.w	r3, r7, #16
 8006882:	4611      	mov	r1, r2
 8006884:	4618      	mov	r0, r3
 8006886:	f000 ffb9 	bl	80077fc <xTaskCheckForTimeOut>
 800688a:	4603      	mov	r3, r0
 800688c:	2b00      	cmp	r3, #0
 800688e:	d123      	bne.n	80068d8 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006890:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006892:	f000 fabb 	bl	8006e0c <prvIsQueueEmpty>
 8006896:	4603      	mov	r3, r0
 8006898:	2b00      	cmp	r3, #0
 800689a:	d017      	beq.n	80068cc <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800689c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800689e:	3324      	adds	r3, #36	; 0x24
 80068a0:	687a      	ldr	r2, [r7, #4]
 80068a2:	4611      	mov	r1, r2
 80068a4:	4618      	mov	r0, r3
 80068a6:	f000 ff0d 	bl	80076c4 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80068aa:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80068ac:	f000 fa5c 	bl	8006d68 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80068b0:	f000 fd30 	bl	8007314 <xTaskResumeAll>
 80068b4:	4603      	mov	r3, r0
 80068b6:	2b00      	cmp	r3, #0
 80068b8:	d189      	bne.n	80067ce <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 80068ba:	4b10      	ldr	r3, [pc, #64]	; (80068fc <xQueueReceive+0x1bc>)
 80068bc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80068c0:	601a      	str	r2, [r3, #0]
 80068c2:	f3bf 8f4f 	dsb	sy
 80068c6:	f3bf 8f6f 	isb	sy
 80068ca:	e780      	b.n	80067ce <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 80068cc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80068ce:	f000 fa4b 	bl	8006d68 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80068d2:	f000 fd1f 	bl	8007314 <xTaskResumeAll>
 80068d6:	e77a      	b.n	80067ce <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 80068d8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80068da:	f000 fa45 	bl	8006d68 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80068de:	f000 fd19 	bl	8007314 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80068e2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80068e4:	f000 fa92 	bl	8006e0c <prvIsQueueEmpty>
 80068e8:	4603      	mov	r3, r0
 80068ea:	2b00      	cmp	r3, #0
 80068ec:	f43f af6f 	beq.w	80067ce <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80068f0:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80068f2:	4618      	mov	r0, r3
 80068f4:	3730      	adds	r7, #48	; 0x30
 80068f6:	46bd      	mov	sp, r7
 80068f8:	bd80      	pop	{r7, pc}
 80068fa:	bf00      	nop
 80068fc:	e000ed04 	.word	0xe000ed04

08006900 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8006900:	b580      	push	{r7, lr}
 8006902:	b08e      	sub	sp, #56	; 0x38
 8006904:	af00      	add	r7, sp, #0
 8006906:	6078      	str	r0, [r7, #4]
 8006908:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800690a:	2300      	movs	r3, #0
 800690c:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800690e:	687b      	ldr	r3, [r7, #4]
 8006910:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8006912:	2300      	movs	r3, #0
 8006914:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8006916:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006918:	2b00      	cmp	r3, #0
 800691a:	d10a      	bne.n	8006932 <xQueueSemaphoreTake+0x32>
	__asm volatile
 800691c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006920:	f383 8811 	msr	BASEPRI, r3
 8006924:	f3bf 8f6f 	isb	sy
 8006928:	f3bf 8f4f 	dsb	sy
 800692c:	623b      	str	r3, [r7, #32]
}
 800692e:	bf00      	nop
 8006930:	e7fe      	b.n	8006930 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8006932:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006934:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006936:	2b00      	cmp	r3, #0
 8006938:	d00a      	beq.n	8006950 <xQueueSemaphoreTake+0x50>
	__asm volatile
 800693a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800693e:	f383 8811 	msr	BASEPRI, r3
 8006942:	f3bf 8f6f 	isb	sy
 8006946:	f3bf 8f4f 	dsb	sy
 800694a:	61fb      	str	r3, [r7, #28]
}
 800694c:	bf00      	nop
 800694e:	e7fe      	b.n	800694e <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8006950:	f001 f89c 	bl	8007a8c <xTaskGetSchedulerState>
 8006954:	4603      	mov	r3, r0
 8006956:	2b00      	cmp	r3, #0
 8006958:	d102      	bne.n	8006960 <xQueueSemaphoreTake+0x60>
 800695a:	683b      	ldr	r3, [r7, #0]
 800695c:	2b00      	cmp	r3, #0
 800695e:	d101      	bne.n	8006964 <xQueueSemaphoreTake+0x64>
 8006960:	2301      	movs	r3, #1
 8006962:	e000      	b.n	8006966 <xQueueSemaphoreTake+0x66>
 8006964:	2300      	movs	r3, #0
 8006966:	2b00      	cmp	r3, #0
 8006968:	d10a      	bne.n	8006980 <xQueueSemaphoreTake+0x80>
	__asm volatile
 800696a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800696e:	f383 8811 	msr	BASEPRI, r3
 8006972:	f3bf 8f6f 	isb	sy
 8006976:	f3bf 8f4f 	dsb	sy
 800697a:	61bb      	str	r3, [r7, #24]
}
 800697c:	bf00      	nop
 800697e:	e7fe      	b.n	800697e <xQueueSemaphoreTake+0x7e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8006980:	f001 fbd0 	bl	8008124 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8006984:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006986:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006988:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800698a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800698c:	2b00      	cmp	r3, #0
 800698e:	d024      	beq.n	80069da <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8006990:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006992:	1e5a      	subs	r2, r3, #1
 8006994:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006996:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8006998:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800699a:	681b      	ldr	r3, [r3, #0]
 800699c:	2b00      	cmp	r3, #0
 800699e:	d104      	bne.n	80069aa <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 80069a0:	f001 fa1c 	bl	8007ddc <pvTaskIncrementMutexHeldCount>
 80069a4:	4602      	mov	r2, r0
 80069a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80069a8:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80069aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80069ac:	691b      	ldr	r3, [r3, #16]
 80069ae:	2b00      	cmp	r3, #0
 80069b0:	d00f      	beq.n	80069d2 <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80069b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80069b4:	3310      	adds	r3, #16
 80069b6:	4618      	mov	r0, r3
 80069b8:	f000 fea8 	bl	800770c <xTaskRemoveFromEventList>
 80069bc:	4603      	mov	r3, r0
 80069be:	2b00      	cmp	r3, #0
 80069c0:	d007      	beq.n	80069d2 <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80069c2:	4b54      	ldr	r3, [pc, #336]	; (8006b14 <xQueueSemaphoreTake+0x214>)
 80069c4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80069c8:	601a      	str	r2, [r3, #0]
 80069ca:	f3bf 8f4f 	dsb	sy
 80069ce:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80069d2:	f001 fbd7 	bl	8008184 <vPortExitCritical>
				return pdPASS;
 80069d6:	2301      	movs	r3, #1
 80069d8:	e097      	b.n	8006b0a <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80069da:	683b      	ldr	r3, [r7, #0]
 80069dc:	2b00      	cmp	r3, #0
 80069de:	d111      	bne.n	8006a04 <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 80069e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80069e2:	2b00      	cmp	r3, #0
 80069e4:	d00a      	beq.n	80069fc <xQueueSemaphoreTake+0xfc>
	__asm volatile
 80069e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80069ea:	f383 8811 	msr	BASEPRI, r3
 80069ee:	f3bf 8f6f 	isb	sy
 80069f2:	f3bf 8f4f 	dsb	sy
 80069f6:	617b      	str	r3, [r7, #20]
}
 80069f8:	bf00      	nop
 80069fa:	e7fe      	b.n	80069fa <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 80069fc:	f001 fbc2 	bl	8008184 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8006a00:	2300      	movs	r3, #0
 8006a02:	e082      	b.n	8006b0a <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 8006a04:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006a06:	2b00      	cmp	r3, #0
 8006a08:	d106      	bne.n	8006a18 <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8006a0a:	f107 030c 	add.w	r3, r7, #12
 8006a0e:	4618      	mov	r0, r3
 8006a10:	f000 fede 	bl	80077d0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8006a14:	2301      	movs	r3, #1
 8006a16:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8006a18:	f001 fbb4 	bl	8008184 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8006a1c:	f000 fc6c 	bl	80072f8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8006a20:	f001 fb80 	bl	8008124 <vPortEnterCritical>
 8006a24:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006a26:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006a2a:	b25b      	sxtb	r3, r3
 8006a2c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006a30:	d103      	bne.n	8006a3a <xQueueSemaphoreTake+0x13a>
 8006a32:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006a34:	2200      	movs	r2, #0
 8006a36:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006a3a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006a3c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006a40:	b25b      	sxtb	r3, r3
 8006a42:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006a46:	d103      	bne.n	8006a50 <xQueueSemaphoreTake+0x150>
 8006a48:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006a4a:	2200      	movs	r2, #0
 8006a4c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006a50:	f001 fb98 	bl	8008184 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8006a54:	463a      	mov	r2, r7
 8006a56:	f107 030c 	add.w	r3, r7, #12
 8006a5a:	4611      	mov	r1, r2
 8006a5c:	4618      	mov	r0, r3
 8006a5e:	f000 fecd 	bl	80077fc <xTaskCheckForTimeOut>
 8006a62:	4603      	mov	r3, r0
 8006a64:	2b00      	cmp	r3, #0
 8006a66:	d132      	bne.n	8006ace <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006a68:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8006a6a:	f000 f9cf 	bl	8006e0c <prvIsQueueEmpty>
 8006a6e:	4603      	mov	r3, r0
 8006a70:	2b00      	cmp	r3, #0
 8006a72:	d026      	beq.n	8006ac2 <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8006a74:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006a76:	681b      	ldr	r3, [r3, #0]
 8006a78:	2b00      	cmp	r3, #0
 8006a7a:	d109      	bne.n	8006a90 <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 8006a7c:	f001 fb52 	bl	8008124 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8006a80:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006a82:	689b      	ldr	r3, [r3, #8]
 8006a84:	4618      	mov	r0, r3
 8006a86:	f001 f81f 	bl	8007ac8 <xTaskPriorityInherit>
 8006a8a:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 8006a8c:	f001 fb7a 	bl	8008184 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8006a90:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006a92:	3324      	adds	r3, #36	; 0x24
 8006a94:	683a      	ldr	r2, [r7, #0]
 8006a96:	4611      	mov	r1, r2
 8006a98:	4618      	mov	r0, r3
 8006a9a:	f000 fe13 	bl	80076c4 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8006a9e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8006aa0:	f000 f962 	bl	8006d68 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8006aa4:	f000 fc36 	bl	8007314 <xTaskResumeAll>
 8006aa8:	4603      	mov	r3, r0
 8006aaa:	2b00      	cmp	r3, #0
 8006aac:	f47f af68 	bne.w	8006980 <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 8006ab0:	4b18      	ldr	r3, [pc, #96]	; (8006b14 <xQueueSemaphoreTake+0x214>)
 8006ab2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006ab6:	601a      	str	r2, [r3, #0]
 8006ab8:	f3bf 8f4f 	dsb	sy
 8006abc:	f3bf 8f6f 	isb	sy
 8006ac0:	e75e      	b.n	8006980 <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8006ac2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8006ac4:	f000 f950 	bl	8006d68 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8006ac8:	f000 fc24 	bl	8007314 <xTaskResumeAll>
 8006acc:	e758      	b.n	8006980 <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8006ace:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8006ad0:	f000 f94a 	bl	8006d68 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8006ad4:	f000 fc1e 	bl	8007314 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006ad8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8006ada:	f000 f997 	bl	8006e0c <prvIsQueueEmpty>
 8006ade:	4603      	mov	r3, r0
 8006ae0:	2b00      	cmp	r3, #0
 8006ae2:	f43f af4d 	beq.w	8006980 <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8006ae6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ae8:	2b00      	cmp	r3, #0
 8006aea:	d00d      	beq.n	8006b08 <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 8006aec:	f001 fb1a 	bl	8008124 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8006af0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8006af2:	f000 f891 	bl	8006c18 <prvGetDisinheritPriorityAfterTimeout>
 8006af6:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8006af8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006afa:	689b      	ldr	r3, [r3, #8]
 8006afc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8006afe:	4618      	mov	r0, r3
 8006b00:	f001 f8de 	bl	8007cc0 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8006b04:	f001 fb3e 	bl	8008184 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8006b08:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8006b0a:	4618      	mov	r0, r3
 8006b0c:	3738      	adds	r7, #56	; 0x38
 8006b0e:	46bd      	mov	sp, r7
 8006b10:	bd80      	pop	{r7, pc}
 8006b12:	bf00      	nop
 8006b14:	e000ed04 	.word	0xe000ed04

08006b18 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8006b18:	b580      	push	{r7, lr}
 8006b1a:	b08e      	sub	sp, #56	; 0x38
 8006b1c:	af00      	add	r7, sp, #0
 8006b1e:	60f8      	str	r0, [r7, #12]
 8006b20:	60b9      	str	r1, [r7, #8]
 8006b22:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8006b24:	68fb      	ldr	r3, [r7, #12]
 8006b26:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8006b28:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b2a:	2b00      	cmp	r3, #0
 8006b2c:	d10a      	bne.n	8006b44 <xQueueReceiveFromISR+0x2c>
	__asm volatile
 8006b2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b32:	f383 8811 	msr	BASEPRI, r3
 8006b36:	f3bf 8f6f 	isb	sy
 8006b3a:	f3bf 8f4f 	dsb	sy
 8006b3e:	623b      	str	r3, [r7, #32]
}
 8006b40:	bf00      	nop
 8006b42:	e7fe      	b.n	8006b42 <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006b44:	68bb      	ldr	r3, [r7, #8]
 8006b46:	2b00      	cmp	r3, #0
 8006b48:	d103      	bne.n	8006b52 <xQueueReceiveFromISR+0x3a>
 8006b4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b4e:	2b00      	cmp	r3, #0
 8006b50:	d101      	bne.n	8006b56 <xQueueReceiveFromISR+0x3e>
 8006b52:	2301      	movs	r3, #1
 8006b54:	e000      	b.n	8006b58 <xQueueReceiveFromISR+0x40>
 8006b56:	2300      	movs	r3, #0
 8006b58:	2b00      	cmp	r3, #0
 8006b5a:	d10a      	bne.n	8006b72 <xQueueReceiveFromISR+0x5a>
	__asm volatile
 8006b5c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b60:	f383 8811 	msr	BASEPRI, r3
 8006b64:	f3bf 8f6f 	isb	sy
 8006b68:	f3bf 8f4f 	dsb	sy
 8006b6c:	61fb      	str	r3, [r7, #28]
}
 8006b6e:	bf00      	nop
 8006b70:	e7fe      	b.n	8006b70 <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8006b72:	f001 fbb9 	bl	80082e8 <vPortValidateInterruptPriority>
	__asm volatile
 8006b76:	f3ef 8211 	mrs	r2, BASEPRI
 8006b7a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b7e:	f383 8811 	msr	BASEPRI, r3
 8006b82:	f3bf 8f6f 	isb	sy
 8006b86:	f3bf 8f4f 	dsb	sy
 8006b8a:	61ba      	str	r2, [r7, #24]
 8006b8c:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8006b8e:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8006b90:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006b92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b94:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006b96:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8006b98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b9a:	2b00      	cmp	r3, #0
 8006b9c:	d02f      	beq.n	8006bfe <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8006b9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ba0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006ba4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8006ba8:	68b9      	ldr	r1, [r7, #8]
 8006baa:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006bac:	f000 f8b6 	bl	8006d1c <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8006bb0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006bb2:	1e5a      	subs	r2, r3, #1
 8006bb4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006bb6:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8006bb8:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8006bbc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006bc0:	d112      	bne.n	8006be8 <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006bc2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006bc4:	691b      	ldr	r3, [r3, #16]
 8006bc6:	2b00      	cmp	r3, #0
 8006bc8:	d016      	beq.n	8006bf8 <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006bca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006bcc:	3310      	adds	r3, #16
 8006bce:	4618      	mov	r0, r3
 8006bd0:	f000 fd9c 	bl	800770c <xTaskRemoveFromEventList>
 8006bd4:	4603      	mov	r3, r0
 8006bd6:	2b00      	cmp	r3, #0
 8006bd8:	d00e      	beq.n	8006bf8 <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8006bda:	687b      	ldr	r3, [r7, #4]
 8006bdc:	2b00      	cmp	r3, #0
 8006bde:	d00b      	beq.n	8006bf8 <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	2201      	movs	r2, #1
 8006be4:	601a      	str	r2, [r3, #0]
 8006be6:	e007      	b.n	8006bf8 <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8006be8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006bec:	3301      	adds	r3, #1
 8006bee:	b2db      	uxtb	r3, r3
 8006bf0:	b25a      	sxtb	r2, r3
 8006bf2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006bf4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 8006bf8:	2301      	movs	r3, #1
 8006bfa:	637b      	str	r3, [r7, #52]	; 0x34
 8006bfc:	e001      	b.n	8006c02 <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 8006bfe:	2300      	movs	r3, #0
 8006c00:	637b      	str	r3, [r7, #52]	; 0x34
 8006c02:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006c04:	613b      	str	r3, [r7, #16]
	__asm volatile
 8006c06:	693b      	ldr	r3, [r7, #16]
 8006c08:	f383 8811 	msr	BASEPRI, r3
}
 8006c0c:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8006c0e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8006c10:	4618      	mov	r0, r3
 8006c12:	3738      	adds	r7, #56	; 0x38
 8006c14:	46bd      	mov	sp, r7
 8006c16:	bd80      	pop	{r7, pc}

08006c18 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8006c18:	b480      	push	{r7}
 8006c1a:	b085      	sub	sp, #20
 8006c1c:	af00      	add	r7, sp, #0
 8006c1e:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8006c20:	687b      	ldr	r3, [r7, #4]
 8006c22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c24:	2b00      	cmp	r3, #0
 8006c26:	d006      	beq.n	8006c36 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8006c28:	687b      	ldr	r3, [r7, #4]
 8006c2a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006c2c:	681b      	ldr	r3, [r3, #0]
 8006c2e:	f1c3 0310 	rsb	r3, r3, #16
 8006c32:	60fb      	str	r3, [r7, #12]
 8006c34:	e001      	b.n	8006c3a <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8006c36:	2300      	movs	r3, #0
 8006c38:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8006c3a:	68fb      	ldr	r3, [r7, #12]
	}
 8006c3c:	4618      	mov	r0, r3
 8006c3e:	3714      	adds	r7, #20
 8006c40:	46bd      	mov	sp, r7
 8006c42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c46:	4770      	bx	lr

08006c48 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8006c48:	b580      	push	{r7, lr}
 8006c4a:	b086      	sub	sp, #24
 8006c4c:	af00      	add	r7, sp, #0
 8006c4e:	60f8      	str	r0, [r7, #12]
 8006c50:	60b9      	str	r1, [r7, #8]
 8006c52:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8006c54:	2300      	movs	r3, #0
 8006c56:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006c58:	68fb      	ldr	r3, [r7, #12]
 8006c5a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006c5c:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8006c5e:	68fb      	ldr	r3, [r7, #12]
 8006c60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c62:	2b00      	cmp	r3, #0
 8006c64:	d10d      	bne.n	8006c82 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8006c66:	68fb      	ldr	r3, [r7, #12]
 8006c68:	681b      	ldr	r3, [r3, #0]
 8006c6a:	2b00      	cmp	r3, #0
 8006c6c:	d14d      	bne.n	8006d0a <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8006c6e:	68fb      	ldr	r3, [r7, #12]
 8006c70:	689b      	ldr	r3, [r3, #8]
 8006c72:	4618      	mov	r0, r3
 8006c74:	f000 ff9e 	bl	8007bb4 <xTaskPriorityDisinherit>
 8006c78:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8006c7a:	68fb      	ldr	r3, [r7, #12]
 8006c7c:	2200      	movs	r2, #0
 8006c7e:	609a      	str	r2, [r3, #8]
 8006c80:	e043      	b.n	8006d0a <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8006c82:	687b      	ldr	r3, [r7, #4]
 8006c84:	2b00      	cmp	r3, #0
 8006c86:	d119      	bne.n	8006cbc <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8006c88:	68fb      	ldr	r3, [r7, #12]
 8006c8a:	6858      	ldr	r0, [r3, #4]
 8006c8c:	68fb      	ldr	r3, [r7, #12]
 8006c8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c90:	461a      	mov	r2, r3
 8006c92:	68b9      	ldr	r1, [r7, #8]
 8006c94:	f00c fdbd 	bl	8013812 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8006c98:	68fb      	ldr	r3, [r7, #12]
 8006c9a:	685a      	ldr	r2, [r3, #4]
 8006c9c:	68fb      	ldr	r3, [r7, #12]
 8006c9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ca0:	441a      	add	r2, r3
 8006ca2:	68fb      	ldr	r3, [r7, #12]
 8006ca4:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8006ca6:	68fb      	ldr	r3, [r7, #12]
 8006ca8:	685a      	ldr	r2, [r3, #4]
 8006caa:	68fb      	ldr	r3, [r7, #12]
 8006cac:	689b      	ldr	r3, [r3, #8]
 8006cae:	429a      	cmp	r2, r3
 8006cb0:	d32b      	bcc.n	8006d0a <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8006cb2:	68fb      	ldr	r3, [r7, #12]
 8006cb4:	681a      	ldr	r2, [r3, #0]
 8006cb6:	68fb      	ldr	r3, [r7, #12]
 8006cb8:	605a      	str	r2, [r3, #4]
 8006cba:	e026      	b.n	8006d0a <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8006cbc:	68fb      	ldr	r3, [r7, #12]
 8006cbe:	68d8      	ldr	r0, [r3, #12]
 8006cc0:	68fb      	ldr	r3, [r7, #12]
 8006cc2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006cc4:	461a      	mov	r2, r3
 8006cc6:	68b9      	ldr	r1, [r7, #8]
 8006cc8:	f00c fda3 	bl	8013812 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8006ccc:	68fb      	ldr	r3, [r7, #12]
 8006cce:	68da      	ldr	r2, [r3, #12]
 8006cd0:	68fb      	ldr	r3, [r7, #12]
 8006cd2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006cd4:	425b      	negs	r3, r3
 8006cd6:	441a      	add	r2, r3
 8006cd8:	68fb      	ldr	r3, [r7, #12]
 8006cda:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8006cdc:	68fb      	ldr	r3, [r7, #12]
 8006cde:	68da      	ldr	r2, [r3, #12]
 8006ce0:	68fb      	ldr	r3, [r7, #12]
 8006ce2:	681b      	ldr	r3, [r3, #0]
 8006ce4:	429a      	cmp	r2, r3
 8006ce6:	d207      	bcs.n	8006cf8 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8006ce8:	68fb      	ldr	r3, [r7, #12]
 8006cea:	689a      	ldr	r2, [r3, #8]
 8006cec:	68fb      	ldr	r3, [r7, #12]
 8006cee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006cf0:	425b      	negs	r3, r3
 8006cf2:	441a      	add	r2, r3
 8006cf4:	68fb      	ldr	r3, [r7, #12]
 8006cf6:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	2b02      	cmp	r3, #2
 8006cfc:	d105      	bne.n	8006d0a <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8006cfe:	693b      	ldr	r3, [r7, #16]
 8006d00:	2b00      	cmp	r3, #0
 8006d02:	d002      	beq.n	8006d0a <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8006d04:	693b      	ldr	r3, [r7, #16]
 8006d06:	3b01      	subs	r3, #1
 8006d08:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8006d0a:	693b      	ldr	r3, [r7, #16]
 8006d0c:	1c5a      	adds	r2, r3, #1
 8006d0e:	68fb      	ldr	r3, [r7, #12]
 8006d10:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8006d12:	697b      	ldr	r3, [r7, #20]
}
 8006d14:	4618      	mov	r0, r3
 8006d16:	3718      	adds	r7, #24
 8006d18:	46bd      	mov	sp, r7
 8006d1a:	bd80      	pop	{r7, pc}

08006d1c <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8006d1c:	b580      	push	{r7, lr}
 8006d1e:	b082      	sub	sp, #8
 8006d20:	af00      	add	r7, sp, #0
 8006d22:	6078      	str	r0, [r7, #4]
 8006d24:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8006d26:	687b      	ldr	r3, [r7, #4]
 8006d28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d2a:	2b00      	cmp	r3, #0
 8006d2c:	d018      	beq.n	8006d60 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8006d2e:	687b      	ldr	r3, [r7, #4]
 8006d30:	68da      	ldr	r2, [r3, #12]
 8006d32:	687b      	ldr	r3, [r7, #4]
 8006d34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d36:	441a      	add	r2, r3
 8006d38:	687b      	ldr	r3, [r7, #4]
 8006d3a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8006d3c:	687b      	ldr	r3, [r7, #4]
 8006d3e:	68da      	ldr	r2, [r3, #12]
 8006d40:	687b      	ldr	r3, [r7, #4]
 8006d42:	689b      	ldr	r3, [r3, #8]
 8006d44:	429a      	cmp	r2, r3
 8006d46:	d303      	bcc.n	8006d50 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8006d48:	687b      	ldr	r3, [r7, #4]
 8006d4a:	681a      	ldr	r2, [r3, #0]
 8006d4c:	687b      	ldr	r3, [r7, #4]
 8006d4e:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8006d50:	687b      	ldr	r3, [r7, #4]
 8006d52:	68d9      	ldr	r1, [r3, #12]
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d58:	461a      	mov	r2, r3
 8006d5a:	6838      	ldr	r0, [r7, #0]
 8006d5c:	f00c fd59 	bl	8013812 <memcpy>
	}
}
 8006d60:	bf00      	nop
 8006d62:	3708      	adds	r7, #8
 8006d64:	46bd      	mov	sp, r7
 8006d66:	bd80      	pop	{r7, pc}

08006d68 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8006d68:	b580      	push	{r7, lr}
 8006d6a:	b084      	sub	sp, #16
 8006d6c:	af00      	add	r7, sp, #0
 8006d6e:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8006d70:	f001 f9d8 	bl	8008124 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006d7a:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8006d7c:	e011      	b.n	8006da2 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006d7e:	687b      	ldr	r3, [r7, #4]
 8006d80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d82:	2b00      	cmp	r3, #0
 8006d84:	d012      	beq.n	8006dac <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006d86:	687b      	ldr	r3, [r7, #4]
 8006d88:	3324      	adds	r3, #36	; 0x24
 8006d8a:	4618      	mov	r0, r3
 8006d8c:	f000 fcbe 	bl	800770c <xTaskRemoveFromEventList>
 8006d90:	4603      	mov	r3, r0
 8006d92:	2b00      	cmp	r3, #0
 8006d94:	d001      	beq.n	8006d9a <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8006d96:	f000 fd93 	bl	80078c0 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8006d9a:	7bfb      	ldrb	r3, [r7, #15]
 8006d9c:	3b01      	subs	r3, #1
 8006d9e:	b2db      	uxtb	r3, r3
 8006da0:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8006da2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006da6:	2b00      	cmp	r3, #0
 8006da8:	dce9      	bgt.n	8006d7e <prvUnlockQueue+0x16>
 8006daa:	e000      	b.n	8006dae <prvUnlockQueue+0x46>
					break;
 8006dac:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8006dae:	687b      	ldr	r3, [r7, #4]
 8006db0:	22ff      	movs	r2, #255	; 0xff
 8006db2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8006db6:	f001 f9e5 	bl	8008184 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8006dba:	f001 f9b3 	bl	8008124 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8006dbe:	687b      	ldr	r3, [r7, #4]
 8006dc0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006dc4:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8006dc6:	e011      	b.n	8006dec <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006dc8:	687b      	ldr	r3, [r7, #4]
 8006dca:	691b      	ldr	r3, [r3, #16]
 8006dcc:	2b00      	cmp	r3, #0
 8006dce:	d012      	beq.n	8006df6 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006dd0:	687b      	ldr	r3, [r7, #4]
 8006dd2:	3310      	adds	r3, #16
 8006dd4:	4618      	mov	r0, r3
 8006dd6:	f000 fc99 	bl	800770c <xTaskRemoveFromEventList>
 8006dda:	4603      	mov	r3, r0
 8006ddc:	2b00      	cmp	r3, #0
 8006dde:	d001      	beq.n	8006de4 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8006de0:	f000 fd6e 	bl	80078c0 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8006de4:	7bbb      	ldrb	r3, [r7, #14]
 8006de6:	3b01      	subs	r3, #1
 8006de8:	b2db      	uxtb	r3, r3
 8006dea:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8006dec:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006df0:	2b00      	cmp	r3, #0
 8006df2:	dce9      	bgt.n	8006dc8 <prvUnlockQueue+0x60>
 8006df4:	e000      	b.n	8006df8 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8006df6:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8006df8:	687b      	ldr	r3, [r7, #4]
 8006dfa:	22ff      	movs	r2, #255	; 0xff
 8006dfc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8006e00:	f001 f9c0 	bl	8008184 <vPortExitCritical>
}
 8006e04:	bf00      	nop
 8006e06:	3710      	adds	r7, #16
 8006e08:	46bd      	mov	sp, r7
 8006e0a:	bd80      	pop	{r7, pc}

08006e0c <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8006e0c:	b580      	push	{r7, lr}
 8006e0e:	b084      	sub	sp, #16
 8006e10:	af00      	add	r7, sp, #0
 8006e12:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8006e14:	f001 f986 	bl	8008124 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006e1c:	2b00      	cmp	r3, #0
 8006e1e:	d102      	bne.n	8006e26 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8006e20:	2301      	movs	r3, #1
 8006e22:	60fb      	str	r3, [r7, #12]
 8006e24:	e001      	b.n	8006e2a <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8006e26:	2300      	movs	r3, #0
 8006e28:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8006e2a:	f001 f9ab 	bl	8008184 <vPortExitCritical>

	return xReturn;
 8006e2e:	68fb      	ldr	r3, [r7, #12]
}
 8006e30:	4618      	mov	r0, r3
 8006e32:	3710      	adds	r7, #16
 8006e34:	46bd      	mov	sp, r7
 8006e36:	bd80      	pop	{r7, pc}

08006e38 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8006e38:	b580      	push	{r7, lr}
 8006e3a:	b084      	sub	sp, #16
 8006e3c:	af00      	add	r7, sp, #0
 8006e3e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8006e40:	f001 f970 	bl	8008124 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8006e44:	687b      	ldr	r3, [r7, #4]
 8006e46:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006e48:	687b      	ldr	r3, [r7, #4]
 8006e4a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006e4c:	429a      	cmp	r2, r3
 8006e4e:	d102      	bne.n	8006e56 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8006e50:	2301      	movs	r3, #1
 8006e52:	60fb      	str	r3, [r7, #12]
 8006e54:	e001      	b.n	8006e5a <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8006e56:	2300      	movs	r3, #0
 8006e58:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8006e5a:	f001 f993 	bl	8008184 <vPortExitCritical>

	return xReturn;
 8006e5e:	68fb      	ldr	r3, [r7, #12]
}
 8006e60:	4618      	mov	r0, r3
 8006e62:	3710      	adds	r7, #16
 8006e64:	46bd      	mov	sp, r7
 8006e66:	bd80      	pop	{r7, pc}

08006e68 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8006e68:	b580      	push	{r7, lr}
 8006e6a:	b08e      	sub	sp, #56	; 0x38
 8006e6c:	af04      	add	r7, sp, #16
 8006e6e:	60f8      	str	r0, [r7, #12]
 8006e70:	60b9      	str	r1, [r7, #8]
 8006e72:	607a      	str	r2, [r7, #4]
 8006e74:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8006e76:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006e78:	2b00      	cmp	r3, #0
 8006e7a:	d10a      	bne.n	8006e92 <xTaskCreateStatic+0x2a>
	__asm volatile
 8006e7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e80:	f383 8811 	msr	BASEPRI, r3
 8006e84:	f3bf 8f6f 	isb	sy
 8006e88:	f3bf 8f4f 	dsb	sy
 8006e8c:	623b      	str	r3, [r7, #32]
}
 8006e8e:	bf00      	nop
 8006e90:	e7fe      	b.n	8006e90 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8006e92:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006e94:	2b00      	cmp	r3, #0
 8006e96:	d10a      	bne.n	8006eae <xTaskCreateStatic+0x46>
	__asm volatile
 8006e98:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e9c:	f383 8811 	msr	BASEPRI, r3
 8006ea0:	f3bf 8f6f 	isb	sy
 8006ea4:	f3bf 8f4f 	dsb	sy
 8006ea8:	61fb      	str	r3, [r7, #28]
}
 8006eaa:	bf00      	nop
 8006eac:	e7fe      	b.n	8006eac <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8006eae:	23b4      	movs	r3, #180	; 0xb4
 8006eb0:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8006eb2:	693b      	ldr	r3, [r7, #16]
 8006eb4:	2bb4      	cmp	r3, #180	; 0xb4
 8006eb6:	d00a      	beq.n	8006ece <xTaskCreateStatic+0x66>
	__asm volatile
 8006eb8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ebc:	f383 8811 	msr	BASEPRI, r3
 8006ec0:	f3bf 8f6f 	isb	sy
 8006ec4:	f3bf 8f4f 	dsb	sy
 8006ec8:	61bb      	str	r3, [r7, #24]
}
 8006eca:	bf00      	nop
 8006ecc:	e7fe      	b.n	8006ecc <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8006ece:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8006ed0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006ed2:	2b00      	cmp	r3, #0
 8006ed4:	d01e      	beq.n	8006f14 <xTaskCreateStatic+0xac>
 8006ed6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006ed8:	2b00      	cmp	r3, #0
 8006eda:	d01b      	beq.n	8006f14 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8006edc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006ede:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8006ee0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ee2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006ee4:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8006ee6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ee8:	2202      	movs	r2, #2
 8006eea:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8006eee:	2300      	movs	r3, #0
 8006ef0:	9303      	str	r3, [sp, #12]
 8006ef2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ef4:	9302      	str	r3, [sp, #8]
 8006ef6:	f107 0314 	add.w	r3, r7, #20
 8006efa:	9301      	str	r3, [sp, #4]
 8006efc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006efe:	9300      	str	r3, [sp, #0]
 8006f00:	683b      	ldr	r3, [r7, #0]
 8006f02:	687a      	ldr	r2, [r7, #4]
 8006f04:	68b9      	ldr	r1, [r7, #8]
 8006f06:	68f8      	ldr	r0, [r7, #12]
 8006f08:	f000 f850 	bl	8006fac <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8006f0c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8006f0e:	f000 f8eb 	bl	80070e8 <prvAddNewTaskToReadyList>
 8006f12:	e001      	b.n	8006f18 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8006f14:	2300      	movs	r3, #0
 8006f16:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8006f18:	697b      	ldr	r3, [r7, #20]
	}
 8006f1a:	4618      	mov	r0, r3
 8006f1c:	3728      	adds	r7, #40	; 0x28
 8006f1e:	46bd      	mov	sp, r7
 8006f20:	bd80      	pop	{r7, pc}

08006f22 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8006f22:	b580      	push	{r7, lr}
 8006f24:	b08c      	sub	sp, #48	; 0x30
 8006f26:	af04      	add	r7, sp, #16
 8006f28:	60f8      	str	r0, [r7, #12]
 8006f2a:	60b9      	str	r1, [r7, #8]
 8006f2c:	603b      	str	r3, [r7, #0]
 8006f2e:	4613      	mov	r3, r2
 8006f30:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8006f32:	88fb      	ldrh	r3, [r7, #6]
 8006f34:	009b      	lsls	r3, r3, #2
 8006f36:	4618      	mov	r0, r3
 8006f38:	f001 fa16 	bl	8008368 <pvPortMalloc>
 8006f3c:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8006f3e:	697b      	ldr	r3, [r7, #20]
 8006f40:	2b00      	cmp	r3, #0
 8006f42:	d00e      	beq.n	8006f62 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8006f44:	20b4      	movs	r0, #180	; 0xb4
 8006f46:	f001 fa0f 	bl	8008368 <pvPortMalloc>
 8006f4a:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8006f4c:	69fb      	ldr	r3, [r7, #28]
 8006f4e:	2b00      	cmp	r3, #0
 8006f50:	d003      	beq.n	8006f5a <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8006f52:	69fb      	ldr	r3, [r7, #28]
 8006f54:	697a      	ldr	r2, [r7, #20]
 8006f56:	631a      	str	r2, [r3, #48]	; 0x30
 8006f58:	e005      	b.n	8006f66 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8006f5a:	6978      	ldr	r0, [r7, #20]
 8006f5c:	f001 fad0 	bl	8008500 <vPortFree>
 8006f60:	e001      	b.n	8006f66 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8006f62:	2300      	movs	r3, #0
 8006f64:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8006f66:	69fb      	ldr	r3, [r7, #28]
 8006f68:	2b00      	cmp	r3, #0
 8006f6a:	d017      	beq.n	8006f9c <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8006f6c:	69fb      	ldr	r3, [r7, #28]
 8006f6e:	2200      	movs	r2, #0
 8006f70:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8006f74:	88fa      	ldrh	r2, [r7, #6]
 8006f76:	2300      	movs	r3, #0
 8006f78:	9303      	str	r3, [sp, #12]
 8006f7a:	69fb      	ldr	r3, [r7, #28]
 8006f7c:	9302      	str	r3, [sp, #8]
 8006f7e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006f80:	9301      	str	r3, [sp, #4]
 8006f82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f84:	9300      	str	r3, [sp, #0]
 8006f86:	683b      	ldr	r3, [r7, #0]
 8006f88:	68b9      	ldr	r1, [r7, #8]
 8006f8a:	68f8      	ldr	r0, [r7, #12]
 8006f8c:	f000 f80e 	bl	8006fac <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8006f90:	69f8      	ldr	r0, [r7, #28]
 8006f92:	f000 f8a9 	bl	80070e8 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8006f96:	2301      	movs	r3, #1
 8006f98:	61bb      	str	r3, [r7, #24]
 8006f9a:	e002      	b.n	8006fa2 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8006f9c:	f04f 33ff 	mov.w	r3, #4294967295
 8006fa0:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8006fa2:	69bb      	ldr	r3, [r7, #24]
	}
 8006fa4:	4618      	mov	r0, r3
 8006fa6:	3720      	adds	r7, #32
 8006fa8:	46bd      	mov	sp, r7
 8006faa:	bd80      	pop	{r7, pc}

08006fac <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8006fac:	b580      	push	{r7, lr}
 8006fae:	b088      	sub	sp, #32
 8006fb0:	af00      	add	r7, sp, #0
 8006fb2:	60f8      	str	r0, [r7, #12]
 8006fb4:	60b9      	str	r1, [r7, #8]
 8006fb6:	607a      	str	r2, [r7, #4]
 8006fb8:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8006fba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006fbc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006fbe:	687b      	ldr	r3, [r7, #4]
 8006fc0:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8006fc4:	3b01      	subs	r3, #1
 8006fc6:	009b      	lsls	r3, r3, #2
 8006fc8:	4413      	add	r3, r2
 8006fca:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8006fcc:	69bb      	ldr	r3, [r7, #24]
 8006fce:	f023 0307 	bic.w	r3, r3, #7
 8006fd2:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8006fd4:	69bb      	ldr	r3, [r7, #24]
 8006fd6:	f003 0307 	and.w	r3, r3, #7
 8006fda:	2b00      	cmp	r3, #0
 8006fdc:	d00a      	beq.n	8006ff4 <prvInitialiseNewTask+0x48>
	__asm volatile
 8006fde:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006fe2:	f383 8811 	msr	BASEPRI, r3
 8006fe6:	f3bf 8f6f 	isb	sy
 8006fea:	f3bf 8f4f 	dsb	sy
 8006fee:	617b      	str	r3, [r7, #20]
}
 8006ff0:	bf00      	nop
 8006ff2:	e7fe      	b.n	8006ff2 <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8006ff4:	68bb      	ldr	r3, [r7, #8]
 8006ff6:	2b00      	cmp	r3, #0
 8006ff8:	d01f      	beq.n	800703a <prvInitialiseNewTask+0x8e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8006ffa:	2300      	movs	r3, #0
 8006ffc:	61fb      	str	r3, [r7, #28]
 8006ffe:	e012      	b.n	8007026 <prvInitialiseNewTask+0x7a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8007000:	68ba      	ldr	r2, [r7, #8]
 8007002:	69fb      	ldr	r3, [r7, #28]
 8007004:	4413      	add	r3, r2
 8007006:	7819      	ldrb	r1, [r3, #0]
 8007008:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800700a:	69fb      	ldr	r3, [r7, #28]
 800700c:	4413      	add	r3, r2
 800700e:	3334      	adds	r3, #52	; 0x34
 8007010:	460a      	mov	r2, r1
 8007012:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8007014:	68ba      	ldr	r2, [r7, #8]
 8007016:	69fb      	ldr	r3, [r7, #28]
 8007018:	4413      	add	r3, r2
 800701a:	781b      	ldrb	r3, [r3, #0]
 800701c:	2b00      	cmp	r3, #0
 800701e:	d006      	beq.n	800702e <prvInitialiseNewTask+0x82>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8007020:	69fb      	ldr	r3, [r7, #28]
 8007022:	3301      	adds	r3, #1
 8007024:	61fb      	str	r3, [r7, #28]
 8007026:	69fb      	ldr	r3, [r7, #28]
 8007028:	2b0f      	cmp	r3, #15
 800702a:	d9e9      	bls.n	8007000 <prvInitialiseNewTask+0x54>
 800702c:	e000      	b.n	8007030 <prvInitialiseNewTask+0x84>
			{
				break;
 800702e:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8007030:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007032:	2200      	movs	r2, #0
 8007034:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8007038:	e003      	b.n	8007042 <prvInitialiseNewTask+0x96>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800703a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800703c:	2200      	movs	r2, #0
 800703e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8007042:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007044:	2b0f      	cmp	r3, #15
 8007046:	d901      	bls.n	800704c <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8007048:	230f      	movs	r3, #15
 800704a:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800704c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800704e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007050:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8007052:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007054:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007056:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8007058:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800705a:	2200      	movs	r2, #0
 800705c:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800705e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007060:	3304      	adds	r3, #4
 8007062:	4618      	mov	r0, r3
 8007064:	f7fe ff2c 	bl	8005ec0 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8007068:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800706a:	3318      	adds	r3, #24
 800706c:	4618      	mov	r0, r3
 800706e:	f7fe ff27 	bl	8005ec0 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8007072:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007074:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007076:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007078:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800707a:	f1c3 0210 	rsb	r2, r3, #16
 800707e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007080:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8007082:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007084:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007086:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8007088:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800708a:	2200      	movs	r2, #0
 800708c:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8007090:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007092:	2200      	movs	r2, #0
 8007094:	f883 20b0 	strb.w	r2, [r3, #176]	; 0xb0
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8007098:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800709a:	334c      	adds	r3, #76	; 0x4c
 800709c:	2260      	movs	r2, #96	; 0x60
 800709e:	2100      	movs	r1, #0
 80070a0:	4618      	mov	r0, r3
 80070a2:	f00c fbc4 	bl	801382e <memset>
 80070a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80070a8:	4a0c      	ldr	r2, [pc, #48]	; (80070dc <prvInitialiseNewTask+0x130>)
 80070aa:	651a      	str	r2, [r3, #80]	; 0x50
 80070ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80070ae:	4a0c      	ldr	r2, [pc, #48]	; (80070e0 <prvInitialiseNewTask+0x134>)
 80070b0:	655a      	str	r2, [r3, #84]	; 0x54
 80070b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80070b4:	4a0b      	ldr	r2, [pc, #44]	; (80070e4 <prvInitialiseNewTask+0x138>)
 80070b6:	659a      	str	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80070b8:	683a      	ldr	r2, [r7, #0]
 80070ba:	68f9      	ldr	r1, [r7, #12]
 80070bc:	69b8      	ldr	r0, [r7, #24]
 80070be:	f000 ff07 	bl	8007ed0 <pxPortInitialiseStack>
 80070c2:	4602      	mov	r2, r0
 80070c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80070c6:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80070c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80070ca:	2b00      	cmp	r3, #0
 80070cc:	d002      	beq.n	80070d4 <prvInitialiseNewTask+0x128>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80070ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80070d0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80070d2:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80070d4:	bf00      	nop
 80070d6:	3720      	adds	r7, #32
 80070d8:	46bd      	mov	sp, r7
 80070da:	bd80      	pop	{r7, pc}
 80070dc:	080174fc 	.word	0x080174fc
 80070e0:	0801751c 	.word	0x0801751c
 80070e4:	080174dc 	.word	0x080174dc

080070e8 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80070e8:	b580      	push	{r7, lr}
 80070ea:	b082      	sub	sp, #8
 80070ec:	af00      	add	r7, sp, #0
 80070ee:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80070f0:	f001 f818 	bl	8008124 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80070f4:	4b2a      	ldr	r3, [pc, #168]	; (80071a0 <prvAddNewTaskToReadyList+0xb8>)
 80070f6:	681b      	ldr	r3, [r3, #0]
 80070f8:	3301      	adds	r3, #1
 80070fa:	4a29      	ldr	r2, [pc, #164]	; (80071a0 <prvAddNewTaskToReadyList+0xb8>)
 80070fc:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80070fe:	4b29      	ldr	r3, [pc, #164]	; (80071a4 <prvAddNewTaskToReadyList+0xbc>)
 8007100:	681b      	ldr	r3, [r3, #0]
 8007102:	2b00      	cmp	r3, #0
 8007104:	d109      	bne.n	800711a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8007106:	4a27      	ldr	r2, [pc, #156]	; (80071a4 <prvAddNewTaskToReadyList+0xbc>)
 8007108:	687b      	ldr	r3, [r7, #4]
 800710a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800710c:	4b24      	ldr	r3, [pc, #144]	; (80071a0 <prvAddNewTaskToReadyList+0xb8>)
 800710e:	681b      	ldr	r3, [r3, #0]
 8007110:	2b01      	cmp	r3, #1
 8007112:	d110      	bne.n	8007136 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8007114:	f000 fbf8 	bl	8007908 <prvInitialiseTaskLists>
 8007118:	e00d      	b.n	8007136 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800711a:	4b23      	ldr	r3, [pc, #140]	; (80071a8 <prvAddNewTaskToReadyList+0xc0>)
 800711c:	681b      	ldr	r3, [r3, #0]
 800711e:	2b00      	cmp	r3, #0
 8007120:	d109      	bne.n	8007136 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8007122:	4b20      	ldr	r3, [pc, #128]	; (80071a4 <prvAddNewTaskToReadyList+0xbc>)
 8007124:	681b      	ldr	r3, [r3, #0]
 8007126:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007128:	687b      	ldr	r3, [r7, #4]
 800712a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800712c:	429a      	cmp	r2, r3
 800712e:	d802      	bhi.n	8007136 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8007130:	4a1c      	ldr	r2, [pc, #112]	; (80071a4 <prvAddNewTaskToReadyList+0xbc>)
 8007132:	687b      	ldr	r3, [r7, #4]
 8007134:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8007136:	4b1d      	ldr	r3, [pc, #116]	; (80071ac <prvAddNewTaskToReadyList+0xc4>)
 8007138:	681b      	ldr	r3, [r3, #0]
 800713a:	3301      	adds	r3, #1
 800713c:	4a1b      	ldr	r2, [pc, #108]	; (80071ac <prvAddNewTaskToReadyList+0xc4>)
 800713e:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8007140:	687b      	ldr	r3, [r7, #4]
 8007142:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007144:	2201      	movs	r2, #1
 8007146:	409a      	lsls	r2, r3
 8007148:	4b19      	ldr	r3, [pc, #100]	; (80071b0 <prvAddNewTaskToReadyList+0xc8>)
 800714a:	681b      	ldr	r3, [r3, #0]
 800714c:	4313      	orrs	r3, r2
 800714e:	4a18      	ldr	r2, [pc, #96]	; (80071b0 <prvAddNewTaskToReadyList+0xc8>)
 8007150:	6013      	str	r3, [r2, #0]
 8007152:	687b      	ldr	r3, [r7, #4]
 8007154:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007156:	4613      	mov	r3, r2
 8007158:	009b      	lsls	r3, r3, #2
 800715a:	4413      	add	r3, r2
 800715c:	009b      	lsls	r3, r3, #2
 800715e:	4a15      	ldr	r2, [pc, #84]	; (80071b4 <prvAddNewTaskToReadyList+0xcc>)
 8007160:	441a      	add	r2, r3
 8007162:	687b      	ldr	r3, [r7, #4]
 8007164:	3304      	adds	r3, #4
 8007166:	4619      	mov	r1, r3
 8007168:	4610      	mov	r0, r2
 800716a:	f7fe feb6 	bl	8005eda <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800716e:	f001 f809 	bl	8008184 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8007172:	4b0d      	ldr	r3, [pc, #52]	; (80071a8 <prvAddNewTaskToReadyList+0xc0>)
 8007174:	681b      	ldr	r3, [r3, #0]
 8007176:	2b00      	cmp	r3, #0
 8007178:	d00e      	beq.n	8007198 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800717a:	4b0a      	ldr	r3, [pc, #40]	; (80071a4 <prvAddNewTaskToReadyList+0xbc>)
 800717c:	681b      	ldr	r3, [r3, #0]
 800717e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007180:	687b      	ldr	r3, [r7, #4]
 8007182:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007184:	429a      	cmp	r2, r3
 8007186:	d207      	bcs.n	8007198 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8007188:	4b0b      	ldr	r3, [pc, #44]	; (80071b8 <prvAddNewTaskToReadyList+0xd0>)
 800718a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800718e:	601a      	str	r2, [r3, #0]
 8007190:	f3bf 8f4f 	dsb	sy
 8007194:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007198:	bf00      	nop
 800719a:	3708      	adds	r7, #8
 800719c:	46bd      	mov	sp, r7
 800719e:	bd80      	pop	{r7, pc}
 80071a0:	200051f8 	.word	0x200051f8
 80071a4:	20005044 	.word	0x20005044
 80071a8:	20005204 	.word	0x20005204
 80071ac:	20005214 	.word	0x20005214
 80071b0:	20005200 	.word	0x20005200
 80071b4:	20005048 	.word	0x20005048
 80071b8:	e000ed04 	.word	0xe000ed04

080071bc <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80071bc:	b580      	push	{r7, lr}
 80071be:	b084      	sub	sp, #16
 80071c0:	af00      	add	r7, sp, #0
 80071c2:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80071c4:	2300      	movs	r3, #0
 80071c6:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80071c8:	687b      	ldr	r3, [r7, #4]
 80071ca:	2b00      	cmp	r3, #0
 80071cc:	d017      	beq.n	80071fe <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80071ce:	4b13      	ldr	r3, [pc, #76]	; (800721c <vTaskDelay+0x60>)
 80071d0:	681b      	ldr	r3, [r3, #0]
 80071d2:	2b00      	cmp	r3, #0
 80071d4:	d00a      	beq.n	80071ec <vTaskDelay+0x30>
	__asm volatile
 80071d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80071da:	f383 8811 	msr	BASEPRI, r3
 80071de:	f3bf 8f6f 	isb	sy
 80071e2:	f3bf 8f4f 	dsb	sy
 80071e6:	60bb      	str	r3, [r7, #8]
}
 80071e8:	bf00      	nop
 80071ea:	e7fe      	b.n	80071ea <vTaskDelay+0x2e>
			vTaskSuspendAll();
 80071ec:	f000 f884 	bl	80072f8 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80071f0:	2100      	movs	r1, #0
 80071f2:	6878      	ldr	r0, [r7, #4]
 80071f4:	f000 fe06 	bl	8007e04 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80071f8:	f000 f88c 	bl	8007314 <xTaskResumeAll>
 80071fc:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80071fe:	68fb      	ldr	r3, [r7, #12]
 8007200:	2b00      	cmp	r3, #0
 8007202:	d107      	bne.n	8007214 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8007204:	4b06      	ldr	r3, [pc, #24]	; (8007220 <vTaskDelay+0x64>)
 8007206:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800720a:	601a      	str	r2, [r3, #0]
 800720c:	f3bf 8f4f 	dsb	sy
 8007210:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8007214:	bf00      	nop
 8007216:	3710      	adds	r7, #16
 8007218:	46bd      	mov	sp, r7
 800721a:	bd80      	pop	{r7, pc}
 800721c:	20005220 	.word	0x20005220
 8007220:	e000ed04 	.word	0xe000ed04

08007224 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8007224:	b580      	push	{r7, lr}
 8007226:	b08a      	sub	sp, #40	; 0x28
 8007228:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800722a:	2300      	movs	r3, #0
 800722c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800722e:	2300      	movs	r3, #0
 8007230:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8007232:	463a      	mov	r2, r7
 8007234:	1d39      	adds	r1, r7, #4
 8007236:	f107 0308 	add.w	r3, r7, #8
 800723a:	4618      	mov	r0, r3
 800723c:	f7f9 fa10 	bl	8000660 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8007240:	6839      	ldr	r1, [r7, #0]
 8007242:	687b      	ldr	r3, [r7, #4]
 8007244:	68ba      	ldr	r2, [r7, #8]
 8007246:	9202      	str	r2, [sp, #8]
 8007248:	9301      	str	r3, [sp, #4]
 800724a:	2300      	movs	r3, #0
 800724c:	9300      	str	r3, [sp, #0]
 800724e:	2300      	movs	r3, #0
 8007250:	460a      	mov	r2, r1
 8007252:	4921      	ldr	r1, [pc, #132]	; (80072d8 <vTaskStartScheduler+0xb4>)
 8007254:	4821      	ldr	r0, [pc, #132]	; (80072dc <vTaskStartScheduler+0xb8>)
 8007256:	f7ff fe07 	bl	8006e68 <xTaskCreateStatic>
 800725a:	4603      	mov	r3, r0
 800725c:	4a20      	ldr	r2, [pc, #128]	; (80072e0 <vTaskStartScheduler+0xbc>)
 800725e:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8007260:	4b1f      	ldr	r3, [pc, #124]	; (80072e0 <vTaskStartScheduler+0xbc>)
 8007262:	681b      	ldr	r3, [r3, #0]
 8007264:	2b00      	cmp	r3, #0
 8007266:	d002      	beq.n	800726e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8007268:	2301      	movs	r3, #1
 800726a:	617b      	str	r3, [r7, #20]
 800726c:	e001      	b.n	8007272 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800726e:	2300      	movs	r3, #0
 8007270:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8007272:	697b      	ldr	r3, [r7, #20]
 8007274:	2b01      	cmp	r3, #1
 8007276:	d11b      	bne.n	80072b0 <vTaskStartScheduler+0x8c>
	__asm volatile
 8007278:	f04f 0350 	mov.w	r3, #80	; 0x50
 800727c:	f383 8811 	msr	BASEPRI, r3
 8007280:	f3bf 8f6f 	isb	sy
 8007284:	f3bf 8f4f 	dsb	sy
 8007288:	613b      	str	r3, [r7, #16]
}
 800728a:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800728c:	4b15      	ldr	r3, [pc, #84]	; (80072e4 <vTaskStartScheduler+0xc0>)
 800728e:	681b      	ldr	r3, [r3, #0]
 8007290:	334c      	adds	r3, #76	; 0x4c
 8007292:	4a15      	ldr	r2, [pc, #84]	; (80072e8 <vTaskStartScheduler+0xc4>)
 8007294:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8007296:	4b15      	ldr	r3, [pc, #84]	; (80072ec <vTaskStartScheduler+0xc8>)
 8007298:	f04f 32ff 	mov.w	r2, #4294967295
 800729c:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800729e:	4b14      	ldr	r3, [pc, #80]	; (80072f0 <vTaskStartScheduler+0xcc>)
 80072a0:	2201      	movs	r2, #1
 80072a2:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80072a4:	4b13      	ldr	r3, [pc, #76]	; (80072f4 <vTaskStartScheduler+0xd0>)
 80072a6:	2200      	movs	r2, #0
 80072a8:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80072aa:	f000 fe99 	bl	8007fe0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80072ae:	e00e      	b.n	80072ce <vTaskStartScheduler+0xaa>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80072b0:	697b      	ldr	r3, [r7, #20]
 80072b2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80072b6:	d10a      	bne.n	80072ce <vTaskStartScheduler+0xaa>
	__asm volatile
 80072b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80072bc:	f383 8811 	msr	BASEPRI, r3
 80072c0:	f3bf 8f6f 	isb	sy
 80072c4:	f3bf 8f4f 	dsb	sy
 80072c8:	60fb      	str	r3, [r7, #12]
}
 80072ca:	bf00      	nop
 80072cc:	e7fe      	b.n	80072cc <vTaskStartScheduler+0xa8>
}
 80072ce:	bf00      	nop
 80072d0:	3718      	adds	r7, #24
 80072d2:	46bd      	mov	sp, r7
 80072d4:	bd80      	pop	{r7, pc}
 80072d6:	bf00      	nop
 80072d8:	080148c4 	.word	0x080148c4
 80072dc:	080078d9 	.word	0x080078d9
 80072e0:	2000521c 	.word	0x2000521c
 80072e4:	20005044 	.word	0x20005044
 80072e8:	20000030 	.word	0x20000030
 80072ec:	20005218 	.word	0x20005218
 80072f0:	20005204 	.word	0x20005204
 80072f4:	200051fc 	.word	0x200051fc

080072f8 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80072f8:	b480      	push	{r7}
 80072fa:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 80072fc:	4b04      	ldr	r3, [pc, #16]	; (8007310 <vTaskSuspendAll+0x18>)
 80072fe:	681b      	ldr	r3, [r3, #0]
 8007300:	3301      	adds	r3, #1
 8007302:	4a03      	ldr	r2, [pc, #12]	; (8007310 <vTaskSuspendAll+0x18>)
 8007304:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8007306:	bf00      	nop
 8007308:	46bd      	mov	sp, r7
 800730a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800730e:	4770      	bx	lr
 8007310:	20005220 	.word	0x20005220

08007314 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8007314:	b580      	push	{r7, lr}
 8007316:	b084      	sub	sp, #16
 8007318:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800731a:	2300      	movs	r3, #0
 800731c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800731e:	2300      	movs	r3, #0
 8007320:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8007322:	4b41      	ldr	r3, [pc, #260]	; (8007428 <xTaskResumeAll+0x114>)
 8007324:	681b      	ldr	r3, [r3, #0]
 8007326:	2b00      	cmp	r3, #0
 8007328:	d10a      	bne.n	8007340 <xTaskResumeAll+0x2c>
	__asm volatile
 800732a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800732e:	f383 8811 	msr	BASEPRI, r3
 8007332:	f3bf 8f6f 	isb	sy
 8007336:	f3bf 8f4f 	dsb	sy
 800733a:	603b      	str	r3, [r7, #0]
}
 800733c:	bf00      	nop
 800733e:	e7fe      	b.n	800733e <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8007340:	f000 fef0 	bl	8008124 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8007344:	4b38      	ldr	r3, [pc, #224]	; (8007428 <xTaskResumeAll+0x114>)
 8007346:	681b      	ldr	r3, [r3, #0]
 8007348:	3b01      	subs	r3, #1
 800734a:	4a37      	ldr	r2, [pc, #220]	; (8007428 <xTaskResumeAll+0x114>)
 800734c:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800734e:	4b36      	ldr	r3, [pc, #216]	; (8007428 <xTaskResumeAll+0x114>)
 8007350:	681b      	ldr	r3, [r3, #0]
 8007352:	2b00      	cmp	r3, #0
 8007354:	d161      	bne.n	800741a <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8007356:	4b35      	ldr	r3, [pc, #212]	; (800742c <xTaskResumeAll+0x118>)
 8007358:	681b      	ldr	r3, [r3, #0]
 800735a:	2b00      	cmp	r3, #0
 800735c:	d05d      	beq.n	800741a <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800735e:	e02e      	b.n	80073be <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007360:	4b33      	ldr	r3, [pc, #204]	; (8007430 <xTaskResumeAll+0x11c>)
 8007362:	68db      	ldr	r3, [r3, #12]
 8007364:	68db      	ldr	r3, [r3, #12]
 8007366:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8007368:	68fb      	ldr	r3, [r7, #12]
 800736a:	3318      	adds	r3, #24
 800736c:	4618      	mov	r0, r3
 800736e:	f7fe fe11 	bl	8005f94 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007372:	68fb      	ldr	r3, [r7, #12]
 8007374:	3304      	adds	r3, #4
 8007376:	4618      	mov	r0, r3
 8007378:	f7fe fe0c 	bl	8005f94 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800737c:	68fb      	ldr	r3, [r7, #12]
 800737e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007380:	2201      	movs	r2, #1
 8007382:	409a      	lsls	r2, r3
 8007384:	4b2b      	ldr	r3, [pc, #172]	; (8007434 <xTaskResumeAll+0x120>)
 8007386:	681b      	ldr	r3, [r3, #0]
 8007388:	4313      	orrs	r3, r2
 800738a:	4a2a      	ldr	r2, [pc, #168]	; (8007434 <xTaskResumeAll+0x120>)
 800738c:	6013      	str	r3, [r2, #0]
 800738e:	68fb      	ldr	r3, [r7, #12]
 8007390:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007392:	4613      	mov	r3, r2
 8007394:	009b      	lsls	r3, r3, #2
 8007396:	4413      	add	r3, r2
 8007398:	009b      	lsls	r3, r3, #2
 800739a:	4a27      	ldr	r2, [pc, #156]	; (8007438 <xTaskResumeAll+0x124>)
 800739c:	441a      	add	r2, r3
 800739e:	68fb      	ldr	r3, [r7, #12]
 80073a0:	3304      	adds	r3, #4
 80073a2:	4619      	mov	r1, r3
 80073a4:	4610      	mov	r0, r2
 80073a6:	f7fe fd98 	bl	8005eda <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80073aa:	68fb      	ldr	r3, [r7, #12]
 80073ac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80073ae:	4b23      	ldr	r3, [pc, #140]	; (800743c <xTaskResumeAll+0x128>)
 80073b0:	681b      	ldr	r3, [r3, #0]
 80073b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80073b4:	429a      	cmp	r2, r3
 80073b6:	d302      	bcc.n	80073be <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 80073b8:	4b21      	ldr	r3, [pc, #132]	; (8007440 <xTaskResumeAll+0x12c>)
 80073ba:	2201      	movs	r2, #1
 80073bc:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80073be:	4b1c      	ldr	r3, [pc, #112]	; (8007430 <xTaskResumeAll+0x11c>)
 80073c0:	681b      	ldr	r3, [r3, #0]
 80073c2:	2b00      	cmp	r3, #0
 80073c4:	d1cc      	bne.n	8007360 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80073c6:	68fb      	ldr	r3, [r7, #12]
 80073c8:	2b00      	cmp	r3, #0
 80073ca:	d001      	beq.n	80073d0 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80073cc:	f000 fb3e 	bl	8007a4c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80073d0:	4b1c      	ldr	r3, [pc, #112]	; (8007444 <xTaskResumeAll+0x130>)
 80073d2:	681b      	ldr	r3, [r3, #0]
 80073d4:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 80073d6:	687b      	ldr	r3, [r7, #4]
 80073d8:	2b00      	cmp	r3, #0
 80073da:	d010      	beq.n	80073fe <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80073dc:	f000 f858 	bl	8007490 <xTaskIncrementTick>
 80073e0:	4603      	mov	r3, r0
 80073e2:	2b00      	cmp	r3, #0
 80073e4:	d002      	beq.n	80073ec <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 80073e6:	4b16      	ldr	r3, [pc, #88]	; (8007440 <xTaskResumeAll+0x12c>)
 80073e8:	2201      	movs	r2, #1
 80073ea:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 80073ec:	687b      	ldr	r3, [r7, #4]
 80073ee:	3b01      	subs	r3, #1
 80073f0:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 80073f2:	687b      	ldr	r3, [r7, #4]
 80073f4:	2b00      	cmp	r3, #0
 80073f6:	d1f1      	bne.n	80073dc <xTaskResumeAll+0xc8>

						xPendedTicks = 0;
 80073f8:	4b12      	ldr	r3, [pc, #72]	; (8007444 <xTaskResumeAll+0x130>)
 80073fa:	2200      	movs	r2, #0
 80073fc:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80073fe:	4b10      	ldr	r3, [pc, #64]	; (8007440 <xTaskResumeAll+0x12c>)
 8007400:	681b      	ldr	r3, [r3, #0]
 8007402:	2b00      	cmp	r3, #0
 8007404:	d009      	beq.n	800741a <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8007406:	2301      	movs	r3, #1
 8007408:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800740a:	4b0f      	ldr	r3, [pc, #60]	; (8007448 <xTaskResumeAll+0x134>)
 800740c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007410:	601a      	str	r2, [r3, #0]
 8007412:	f3bf 8f4f 	dsb	sy
 8007416:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800741a:	f000 feb3 	bl	8008184 <vPortExitCritical>

	return xAlreadyYielded;
 800741e:	68bb      	ldr	r3, [r7, #8]
}
 8007420:	4618      	mov	r0, r3
 8007422:	3710      	adds	r7, #16
 8007424:	46bd      	mov	sp, r7
 8007426:	bd80      	pop	{r7, pc}
 8007428:	20005220 	.word	0x20005220
 800742c:	200051f8 	.word	0x200051f8
 8007430:	200051b8 	.word	0x200051b8
 8007434:	20005200 	.word	0x20005200
 8007438:	20005048 	.word	0x20005048
 800743c:	20005044 	.word	0x20005044
 8007440:	2000520c 	.word	0x2000520c
 8007444:	20005208 	.word	0x20005208
 8007448:	e000ed04 	.word	0xe000ed04

0800744c <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800744c:	b480      	push	{r7}
 800744e:	b083      	sub	sp, #12
 8007450:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8007452:	4b05      	ldr	r3, [pc, #20]	; (8007468 <xTaskGetTickCount+0x1c>)
 8007454:	681b      	ldr	r3, [r3, #0]
 8007456:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8007458:	687b      	ldr	r3, [r7, #4]
}
 800745a:	4618      	mov	r0, r3
 800745c:	370c      	adds	r7, #12
 800745e:	46bd      	mov	sp, r7
 8007460:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007464:	4770      	bx	lr
 8007466:	bf00      	nop
 8007468:	200051fc 	.word	0x200051fc

0800746c <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 800746c:	b580      	push	{r7, lr}
 800746e:	b082      	sub	sp, #8
 8007470:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8007472:	f000 ff39 	bl	80082e8 <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 8007476:	2300      	movs	r3, #0
 8007478:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 800747a:	4b04      	ldr	r3, [pc, #16]	; (800748c <xTaskGetTickCountFromISR+0x20>)
 800747c:	681b      	ldr	r3, [r3, #0]
 800747e:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8007480:	683b      	ldr	r3, [r7, #0]
}
 8007482:	4618      	mov	r0, r3
 8007484:	3708      	adds	r7, #8
 8007486:	46bd      	mov	sp, r7
 8007488:	bd80      	pop	{r7, pc}
 800748a:	bf00      	nop
 800748c:	200051fc 	.word	0x200051fc

08007490 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8007490:	b580      	push	{r7, lr}
 8007492:	b086      	sub	sp, #24
 8007494:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8007496:	2300      	movs	r3, #0
 8007498:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800749a:	4b4e      	ldr	r3, [pc, #312]	; (80075d4 <xTaskIncrementTick+0x144>)
 800749c:	681b      	ldr	r3, [r3, #0]
 800749e:	2b00      	cmp	r3, #0
 80074a0:	f040 808e 	bne.w	80075c0 <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80074a4:	4b4c      	ldr	r3, [pc, #304]	; (80075d8 <xTaskIncrementTick+0x148>)
 80074a6:	681b      	ldr	r3, [r3, #0]
 80074a8:	3301      	adds	r3, #1
 80074aa:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80074ac:	4a4a      	ldr	r2, [pc, #296]	; (80075d8 <xTaskIncrementTick+0x148>)
 80074ae:	693b      	ldr	r3, [r7, #16]
 80074b0:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80074b2:	693b      	ldr	r3, [r7, #16]
 80074b4:	2b00      	cmp	r3, #0
 80074b6:	d120      	bne.n	80074fa <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 80074b8:	4b48      	ldr	r3, [pc, #288]	; (80075dc <xTaskIncrementTick+0x14c>)
 80074ba:	681b      	ldr	r3, [r3, #0]
 80074bc:	681b      	ldr	r3, [r3, #0]
 80074be:	2b00      	cmp	r3, #0
 80074c0:	d00a      	beq.n	80074d8 <xTaskIncrementTick+0x48>
	__asm volatile
 80074c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80074c6:	f383 8811 	msr	BASEPRI, r3
 80074ca:	f3bf 8f6f 	isb	sy
 80074ce:	f3bf 8f4f 	dsb	sy
 80074d2:	603b      	str	r3, [r7, #0]
}
 80074d4:	bf00      	nop
 80074d6:	e7fe      	b.n	80074d6 <xTaskIncrementTick+0x46>
 80074d8:	4b40      	ldr	r3, [pc, #256]	; (80075dc <xTaskIncrementTick+0x14c>)
 80074da:	681b      	ldr	r3, [r3, #0]
 80074dc:	60fb      	str	r3, [r7, #12]
 80074de:	4b40      	ldr	r3, [pc, #256]	; (80075e0 <xTaskIncrementTick+0x150>)
 80074e0:	681b      	ldr	r3, [r3, #0]
 80074e2:	4a3e      	ldr	r2, [pc, #248]	; (80075dc <xTaskIncrementTick+0x14c>)
 80074e4:	6013      	str	r3, [r2, #0]
 80074e6:	4a3e      	ldr	r2, [pc, #248]	; (80075e0 <xTaskIncrementTick+0x150>)
 80074e8:	68fb      	ldr	r3, [r7, #12]
 80074ea:	6013      	str	r3, [r2, #0]
 80074ec:	4b3d      	ldr	r3, [pc, #244]	; (80075e4 <xTaskIncrementTick+0x154>)
 80074ee:	681b      	ldr	r3, [r3, #0]
 80074f0:	3301      	adds	r3, #1
 80074f2:	4a3c      	ldr	r2, [pc, #240]	; (80075e4 <xTaskIncrementTick+0x154>)
 80074f4:	6013      	str	r3, [r2, #0]
 80074f6:	f000 faa9 	bl	8007a4c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80074fa:	4b3b      	ldr	r3, [pc, #236]	; (80075e8 <xTaskIncrementTick+0x158>)
 80074fc:	681b      	ldr	r3, [r3, #0]
 80074fe:	693a      	ldr	r2, [r7, #16]
 8007500:	429a      	cmp	r2, r3
 8007502:	d348      	bcc.n	8007596 <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007504:	4b35      	ldr	r3, [pc, #212]	; (80075dc <xTaskIncrementTick+0x14c>)
 8007506:	681b      	ldr	r3, [r3, #0]
 8007508:	681b      	ldr	r3, [r3, #0]
 800750a:	2b00      	cmp	r3, #0
 800750c:	d104      	bne.n	8007518 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800750e:	4b36      	ldr	r3, [pc, #216]	; (80075e8 <xTaskIncrementTick+0x158>)
 8007510:	f04f 32ff 	mov.w	r2, #4294967295
 8007514:	601a      	str	r2, [r3, #0]
					break;
 8007516:	e03e      	b.n	8007596 <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007518:	4b30      	ldr	r3, [pc, #192]	; (80075dc <xTaskIncrementTick+0x14c>)
 800751a:	681b      	ldr	r3, [r3, #0]
 800751c:	68db      	ldr	r3, [r3, #12]
 800751e:	68db      	ldr	r3, [r3, #12]
 8007520:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8007522:	68bb      	ldr	r3, [r7, #8]
 8007524:	685b      	ldr	r3, [r3, #4]
 8007526:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8007528:	693a      	ldr	r2, [r7, #16]
 800752a:	687b      	ldr	r3, [r7, #4]
 800752c:	429a      	cmp	r2, r3
 800752e:	d203      	bcs.n	8007538 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8007530:	4a2d      	ldr	r2, [pc, #180]	; (80075e8 <xTaskIncrementTick+0x158>)
 8007532:	687b      	ldr	r3, [r7, #4]
 8007534:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8007536:	e02e      	b.n	8007596 <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007538:	68bb      	ldr	r3, [r7, #8]
 800753a:	3304      	adds	r3, #4
 800753c:	4618      	mov	r0, r3
 800753e:	f7fe fd29 	bl	8005f94 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8007542:	68bb      	ldr	r3, [r7, #8]
 8007544:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007546:	2b00      	cmp	r3, #0
 8007548:	d004      	beq.n	8007554 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800754a:	68bb      	ldr	r3, [r7, #8]
 800754c:	3318      	adds	r3, #24
 800754e:	4618      	mov	r0, r3
 8007550:	f7fe fd20 	bl	8005f94 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8007554:	68bb      	ldr	r3, [r7, #8]
 8007556:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007558:	2201      	movs	r2, #1
 800755a:	409a      	lsls	r2, r3
 800755c:	4b23      	ldr	r3, [pc, #140]	; (80075ec <xTaskIncrementTick+0x15c>)
 800755e:	681b      	ldr	r3, [r3, #0]
 8007560:	4313      	orrs	r3, r2
 8007562:	4a22      	ldr	r2, [pc, #136]	; (80075ec <xTaskIncrementTick+0x15c>)
 8007564:	6013      	str	r3, [r2, #0]
 8007566:	68bb      	ldr	r3, [r7, #8]
 8007568:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800756a:	4613      	mov	r3, r2
 800756c:	009b      	lsls	r3, r3, #2
 800756e:	4413      	add	r3, r2
 8007570:	009b      	lsls	r3, r3, #2
 8007572:	4a1f      	ldr	r2, [pc, #124]	; (80075f0 <xTaskIncrementTick+0x160>)
 8007574:	441a      	add	r2, r3
 8007576:	68bb      	ldr	r3, [r7, #8]
 8007578:	3304      	adds	r3, #4
 800757a:	4619      	mov	r1, r3
 800757c:	4610      	mov	r0, r2
 800757e:	f7fe fcac 	bl	8005eda <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8007582:	68bb      	ldr	r3, [r7, #8]
 8007584:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007586:	4b1b      	ldr	r3, [pc, #108]	; (80075f4 <xTaskIncrementTick+0x164>)
 8007588:	681b      	ldr	r3, [r3, #0]
 800758a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800758c:	429a      	cmp	r2, r3
 800758e:	d3b9      	bcc.n	8007504 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8007590:	2301      	movs	r3, #1
 8007592:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007594:	e7b6      	b.n	8007504 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8007596:	4b17      	ldr	r3, [pc, #92]	; (80075f4 <xTaskIncrementTick+0x164>)
 8007598:	681b      	ldr	r3, [r3, #0]
 800759a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800759c:	4914      	ldr	r1, [pc, #80]	; (80075f0 <xTaskIncrementTick+0x160>)
 800759e:	4613      	mov	r3, r2
 80075a0:	009b      	lsls	r3, r3, #2
 80075a2:	4413      	add	r3, r2
 80075a4:	009b      	lsls	r3, r3, #2
 80075a6:	440b      	add	r3, r1
 80075a8:	681b      	ldr	r3, [r3, #0]
 80075aa:	2b01      	cmp	r3, #1
 80075ac:	d901      	bls.n	80075b2 <xTaskIncrementTick+0x122>
			{
				xSwitchRequired = pdTRUE;
 80075ae:	2301      	movs	r3, #1
 80075b0:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 80075b2:	4b11      	ldr	r3, [pc, #68]	; (80075f8 <xTaskIncrementTick+0x168>)
 80075b4:	681b      	ldr	r3, [r3, #0]
 80075b6:	2b00      	cmp	r3, #0
 80075b8:	d007      	beq.n	80075ca <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 80075ba:	2301      	movs	r3, #1
 80075bc:	617b      	str	r3, [r7, #20]
 80075be:	e004      	b.n	80075ca <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 80075c0:	4b0e      	ldr	r3, [pc, #56]	; (80075fc <xTaskIncrementTick+0x16c>)
 80075c2:	681b      	ldr	r3, [r3, #0]
 80075c4:	3301      	adds	r3, #1
 80075c6:	4a0d      	ldr	r2, [pc, #52]	; (80075fc <xTaskIncrementTick+0x16c>)
 80075c8:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 80075ca:	697b      	ldr	r3, [r7, #20]
}
 80075cc:	4618      	mov	r0, r3
 80075ce:	3718      	adds	r7, #24
 80075d0:	46bd      	mov	sp, r7
 80075d2:	bd80      	pop	{r7, pc}
 80075d4:	20005220 	.word	0x20005220
 80075d8:	200051fc 	.word	0x200051fc
 80075dc:	200051b0 	.word	0x200051b0
 80075e0:	200051b4 	.word	0x200051b4
 80075e4:	20005210 	.word	0x20005210
 80075e8:	20005218 	.word	0x20005218
 80075ec:	20005200 	.word	0x20005200
 80075f0:	20005048 	.word	0x20005048
 80075f4:	20005044 	.word	0x20005044
 80075f8:	2000520c 	.word	0x2000520c
 80075fc:	20005208 	.word	0x20005208

08007600 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8007600:	b480      	push	{r7}
 8007602:	b087      	sub	sp, #28
 8007604:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8007606:	4b29      	ldr	r3, [pc, #164]	; (80076ac <vTaskSwitchContext+0xac>)
 8007608:	681b      	ldr	r3, [r3, #0]
 800760a:	2b00      	cmp	r3, #0
 800760c:	d003      	beq.n	8007616 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800760e:	4b28      	ldr	r3, [pc, #160]	; (80076b0 <vTaskSwitchContext+0xb0>)
 8007610:	2201      	movs	r2, #1
 8007612:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8007614:	e044      	b.n	80076a0 <vTaskSwitchContext+0xa0>
		xYieldPending = pdFALSE;
 8007616:	4b26      	ldr	r3, [pc, #152]	; (80076b0 <vTaskSwitchContext+0xb0>)
 8007618:	2200      	movs	r2, #0
 800761a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800761c:	4b25      	ldr	r3, [pc, #148]	; (80076b4 <vTaskSwitchContext+0xb4>)
 800761e:	681b      	ldr	r3, [r3, #0]
 8007620:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8007622:	68fb      	ldr	r3, [r7, #12]
 8007624:	fab3 f383 	clz	r3, r3
 8007628:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 800762a:	7afb      	ldrb	r3, [r7, #11]
 800762c:	f1c3 031f 	rsb	r3, r3, #31
 8007630:	617b      	str	r3, [r7, #20]
 8007632:	4921      	ldr	r1, [pc, #132]	; (80076b8 <vTaskSwitchContext+0xb8>)
 8007634:	697a      	ldr	r2, [r7, #20]
 8007636:	4613      	mov	r3, r2
 8007638:	009b      	lsls	r3, r3, #2
 800763a:	4413      	add	r3, r2
 800763c:	009b      	lsls	r3, r3, #2
 800763e:	440b      	add	r3, r1
 8007640:	681b      	ldr	r3, [r3, #0]
 8007642:	2b00      	cmp	r3, #0
 8007644:	d10a      	bne.n	800765c <vTaskSwitchContext+0x5c>
	__asm volatile
 8007646:	f04f 0350 	mov.w	r3, #80	; 0x50
 800764a:	f383 8811 	msr	BASEPRI, r3
 800764e:	f3bf 8f6f 	isb	sy
 8007652:	f3bf 8f4f 	dsb	sy
 8007656:	607b      	str	r3, [r7, #4]
}
 8007658:	bf00      	nop
 800765a:	e7fe      	b.n	800765a <vTaskSwitchContext+0x5a>
 800765c:	697a      	ldr	r2, [r7, #20]
 800765e:	4613      	mov	r3, r2
 8007660:	009b      	lsls	r3, r3, #2
 8007662:	4413      	add	r3, r2
 8007664:	009b      	lsls	r3, r3, #2
 8007666:	4a14      	ldr	r2, [pc, #80]	; (80076b8 <vTaskSwitchContext+0xb8>)
 8007668:	4413      	add	r3, r2
 800766a:	613b      	str	r3, [r7, #16]
 800766c:	693b      	ldr	r3, [r7, #16]
 800766e:	685b      	ldr	r3, [r3, #4]
 8007670:	685a      	ldr	r2, [r3, #4]
 8007672:	693b      	ldr	r3, [r7, #16]
 8007674:	605a      	str	r2, [r3, #4]
 8007676:	693b      	ldr	r3, [r7, #16]
 8007678:	685a      	ldr	r2, [r3, #4]
 800767a:	693b      	ldr	r3, [r7, #16]
 800767c:	3308      	adds	r3, #8
 800767e:	429a      	cmp	r2, r3
 8007680:	d104      	bne.n	800768c <vTaskSwitchContext+0x8c>
 8007682:	693b      	ldr	r3, [r7, #16]
 8007684:	685b      	ldr	r3, [r3, #4]
 8007686:	685a      	ldr	r2, [r3, #4]
 8007688:	693b      	ldr	r3, [r7, #16]
 800768a:	605a      	str	r2, [r3, #4]
 800768c:	693b      	ldr	r3, [r7, #16]
 800768e:	685b      	ldr	r3, [r3, #4]
 8007690:	68db      	ldr	r3, [r3, #12]
 8007692:	4a0a      	ldr	r2, [pc, #40]	; (80076bc <vTaskSwitchContext+0xbc>)
 8007694:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8007696:	4b09      	ldr	r3, [pc, #36]	; (80076bc <vTaskSwitchContext+0xbc>)
 8007698:	681b      	ldr	r3, [r3, #0]
 800769a:	334c      	adds	r3, #76	; 0x4c
 800769c:	4a08      	ldr	r2, [pc, #32]	; (80076c0 <vTaskSwitchContext+0xc0>)
 800769e:	6013      	str	r3, [r2, #0]
}
 80076a0:	bf00      	nop
 80076a2:	371c      	adds	r7, #28
 80076a4:	46bd      	mov	sp, r7
 80076a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076aa:	4770      	bx	lr
 80076ac:	20005220 	.word	0x20005220
 80076b0:	2000520c 	.word	0x2000520c
 80076b4:	20005200 	.word	0x20005200
 80076b8:	20005048 	.word	0x20005048
 80076bc:	20005044 	.word	0x20005044
 80076c0:	20000030 	.word	0x20000030

080076c4 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80076c4:	b580      	push	{r7, lr}
 80076c6:	b084      	sub	sp, #16
 80076c8:	af00      	add	r7, sp, #0
 80076ca:	6078      	str	r0, [r7, #4]
 80076cc:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80076ce:	687b      	ldr	r3, [r7, #4]
 80076d0:	2b00      	cmp	r3, #0
 80076d2:	d10a      	bne.n	80076ea <vTaskPlaceOnEventList+0x26>
	__asm volatile
 80076d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80076d8:	f383 8811 	msr	BASEPRI, r3
 80076dc:	f3bf 8f6f 	isb	sy
 80076e0:	f3bf 8f4f 	dsb	sy
 80076e4:	60fb      	str	r3, [r7, #12]
}
 80076e6:	bf00      	nop
 80076e8:	e7fe      	b.n	80076e8 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80076ea:	4b07      	ldr	r3, [pc, #28]	; (8007708 <vTaskPlaceOnEventList+0x44>)
 80076ec:	681b      	ldr	r3, [r3, #0]
 80076ee:	3318      	adds	r3, #24
 80076f0:	4619      	mov	r1, r3
 80076f2:	6878      	ldr	r0, [r7, #4]
 80076f4:	f7fe fc15 	bl	8005f22 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80076f8:	2101      	movs	r1, #1
 80076fa:	6838      	ldr	r0, [r7, #0]
 80076fc:	f000 fb82 	bl	8007e04 <prvAddCurrentTaskToDelayedList>
}
 8007700:	bf00      	nop
 8007702:	3710      	adds	r7, #16
 8007704:	46bd      	mov	sp, r7
 8007706:	bd80      	pop	{r7, pc}
 8007708:	20005044 	.word	0x20005044

0800770c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800770c:	b580      	push	{r7, lr}
 800770e:	b086      	sub	sp, #24
 8007710:	af00      	add	r7, sp, #0
 8007712:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007714:	687b      	ldr	r3, [r7, #4]
 8007716:	68db      	ldr	r3, [r3, #12]
 8007718:	68db      	ldr	r3, [r3, #12]
 800771a:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800771c:	693b      	ldr	r3, [r7, #16]
 800771e:	2b00      	cmp	r3, #0
 8007720:	d10a      	bne.n	8007738 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8007722:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007726:	f383 8811 	msr	BASEPRI, r3
 800772a:	f3bf 8f6f 	isb	sy
 800772e:	f3bf 8f4f 	dsb	sy
 8007732:	60fb      	str	r3, [r7, #12]
}
 8007734:	bf00      	nop
 8007736:	e7fe      	b.n	8007736 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8007738:	693b      	ldr	r3, [r7, #16]
 800773a:	3318      	adds	r3, #24
 800773c:	4618      	mov	r0, r3
 800773e:	f7fe fc29 	bl	8005f94 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007742:	4b1d      	ldr	r3, [pc, #116]	; (80077b8 <xTaskRemoveFromEventList+0xac>)
 8007744:	681b      	ldr	r3, [r3, #0]
 8007746:	2b00      	cmp	r3, #0
 8007748:	d11c      	bne.n	8007784 <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800774a:	693b      	ldr	r3, [r7, #16]
 800774c:	3304      	adds	r3, #4
 800774e:	4618      	mov	r0, r3
 8007750:	f7fe fc20 	bl	8005f94 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8007754:	693b      	ldr	r3, [r7, #16]
 8007756:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007758:	2201      	movs	r2, #1
 800775a:	409a      	lsls	r2, r3
 800775c:	4b17      	ldr	r3, [pc, #92]	; (80077bc <xTaskRemoveFromEventList+0xb0>)
 800775e:	681b      	ldr	r3, [r3, #0]
 8007760:	4313      	orrs	r3, r2
 8007762:	4a16      	ldr	r2, [pc, #88]	; (80077bc <xTaskRemoveFromEventList+0xb0>)
 8007764:	6013      	str	r3, [r2, #0]
 8007766:	693b      	ldr	r3, [r7, #16]
 8007768:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800776a:	4613      	mov	r3, r2
 800776c:	009b      	lsls	r3, r3, #2
 800776e:	4413      	add	r3, r2
 8007770:	009b      	lsls	r3, r3, #2
 8007772:	4a13      	ldr	r2, [pc, #76]	; (80077c0 <xTaskRemoveFromEventList+0xb4>)
 8007774:	441a      	add	r2, r3
 8007776:	693b      	ldr	r3, [r7, #16]
 8007778:	3304      	adds	r3, #4
 800777a:	4619      	mov	r1, r3
 800777c:	4610      	mov	r0, r2
 800777e:	f7fe fbac 	bl	8005eda <vListInsertEnd>
 8007782:	e005      	b.n	8007790 <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8007784:	693b      	ldr	r3, [r7, #16]
 8007786:	3318      	adds	r3, #24
 8007788:	4619      	mov	r1, r3
 800778a:	480e      	ldr	r0, [pc, #56]	; (80077c4 <xTaskRemoveFromEventList+0xb8>)
 800778c:	f7fe fba5 	bl	8005eda <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8007790:	693b      	ldr	r3, [r7, #16]
 8007792:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007794:	4b0c      	ldr	r3, [pc, #48]	; (80077c8 <xTaskRemoveFromEventList+0xbc>)
 8007796:	681b      	ldr	r3, [r3, #0]
 8007798:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800779a:	429a      	cmp	r2, r3
 800779c:	d905      	bls.n	80077aa <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800779e:	2301      	movs	r3, #1
 80077a0:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80077a2:	4b0a      	ldr	r3, [pc, #40]	; (80077cc <xTaskRemoveFromEventList+0xc0>)
 80077a4:	2201      	movs	r2, #1
 80077a6:	601a      	str	r2, [r3, #0]
 80077a8:	e001      	b.n	80077ae <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 80077aa:	2300      	movs	r3, #0
 80077ac:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 80077ae:	697b      	ldr	r3, [r7, #20]
}
 80077b0:	4618      	mov	r0, r3
 80077b2:	3718      	adds	r7, #24
 80077b4:	46bd      	mov	sp, r7
 80077b6:	bd80      	pop	{r7, pc}
 80077b8:	20005220 	.word	0x20005220
 80077bc:	20005200 	.word	0x20005200
 80077c0:	20005048 	.word	0x20005048
 80077c4:	200051b8 	.word	0x200051b8
 80077c8:	20005044 	.word	0x20005044
 80077cc:	2000520c 	.word	0x2000520c

080077d0 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80077d0:	b480      	push	{r7}
 80077d2:	b083      	sub	sp, #12
 80077d4:	af00      	add	r7, sp, #0
 80077d6:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80077d8:	4b06      	ldr	r3, [pc, #24]	; (80077f4 <vTaskInternalSetTimeOutState+0x24>)
 80077da:	681a      	ldr	r2, [r3, #0]
 80077dc:	687b      	ldr	r3, [r7, #4]
 80077de:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80077e0:	4b05      	ldr	r3, [pc, #20]	; (80077f8 <vTaskInternalSetTimeOutState+0x28>)
 80077e2:	681a      	ldr	r2, [r3, #0]
 80077e4:	687b      	ldr	r3, [r7, #4]
 80077e6:	605a      	str	r2, [r3, #4]
}
 80077e8:	bf00      	nop
 80077ea:	370c      	adds	r7, #12
 80077ec:	46bd      	mov	sp, r7
 80077ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077f2:	4770      	bx	lr
 80077f4:	20005210 	.word	0x20005210
 80077f8:	200051fc 	.word	0x200051fc

080077fc <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80077fc:	b580      	push	{r7, lr}
 80077fe:	b088      	sub	sp, #32
 8007800:	af00      	add	r7, sp, #0
 8007802:	6078      	str	r0, [r7, #4]
 8007804:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8007806:	687b      	ldr	r3, [r7, #4]
 8007808:	2b00      	cmp	r3, #0
 800780a:	d10a      	bne.n	8007822 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 800780c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007810:	f383 8811 	msr	BASEPRI, r3
 8007814:	f3bf 8f6f 	isb	sy
 8007818:	f3bf 8f4f 	dsb	sy
 800781c:	613b      	str	r3, [r7, #16]
}
 800781e:	bf00      	nop
 8007820:	e7fe      	b.n	8007820 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8007822:	683b      	ldr	r3, [r7, #0]
 8007824:	2b00      	cmp	r3, #0
 8007826:	d10a      	bne.n	800783e <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8007828:	f04f 0350 	mov.w	r3, #80	; 0x50
 800782c:	f383 8811 	msr	BASEPRI, r3
 8007830:	f3bf 8f6f 	isb	sy
 8007834:	f3bf 8f4f 	dsb	sy
 8007838:	60fb      	str	r3, [r7, #12]
}
 800783a:	bf00      	nop
 800783c:	e7fe      	b.n	800783c <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800783e:	f000 fc71 	bl	8008124 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8007842:	4b1d      	ldr	r3, [pc, #116]	; (80078b8 <xTaskCheckForTimeOut+0xbc>)
 8007844:	681b      	ldr	r3, [r3, #0]
 8007846:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8007848:	687b      	ldr	r3, [r7, #4]
 800784a:	685b      	ldr	r3, [r3, #4]
 800784c:	69ba      	ldr	r2, [r7, #24]
 800784e:	1ad3      	subs	r3, r2, r3
 8007850:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8007852:	683b      	ldr	r3, [r7, #0]
 8007854:	681b      	ldr	r3, [r3, #0]
 8007856:	f1b3 3fff 	cmp.w	r3, #4294967295
 800785a:	d102      	bne.n	8007862 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800785c:	2300      	movs	r3, #0
 800785e:	61fb      	str	r3, [r7, #28]
 8007860:	e023      	b.n	80078aa <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8007862:	687b      	ldr	r3, [r7, #4]
 8007864:	681a      	ldr	r2, [r3, #0]
 8007866:	4b15      	ldr	r3, [pc, #84]	; (80078bc <xTaskCheckForTimeOut+0xc0>)
 8007868:	681b      	ldr	r3, [r3, #0]
 800786a:	429a      	cmp	r2, r3
 800786c:	d007      	beq.n	800787e <xTaskCheckForTimeOut+0x82>
 800786e:	687b      	ldr	r3, [r7, #4]
 8007870:	685b      	ldr	r3, [r3, #4]
 8007872:	69ba      	ldr	r2, [r7, #24]
 8007874:	429a      	cmp	r2, r3
 8007876:	d302      	bcc.n	800787e <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8007878:	2301      	movs	r3, #1
 800787a:	61fb      	str	r3, [r7, #28]
 800787c:	e015      	b.n	80078aa <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800787e:	683b      	ldr	r3, [r7, #0]
 8007880:	681b      	ldr	r3, [r3, #0]
 8007882:	697a      	ldr	r2, [r7, #20]
 8007884:	429a      	cmp	r2, r3
 8007886:	d20b      	bcs.n	80078a0 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8007888:	683b      	ldr	r3, [r7, #0]
 800788a:	681a      	ldr	r2, [r3, #0]
 800788c:	697b      	ldr	r3, [r7, #20]
 800788e:	1ad2      	subs	r2, r2, r3
 8007890:	683b      	ldr	r3, [r7, #0]
 8007892:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8007894:	6878      	ldr	r0, [r7, #4]
 8007896:	f7ff ff9b 	bl	80077d0 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800789a:	2300      	movs	r3, #0
 800789c:	61fb      	str	r3, [r7, #28]
 800789e:	e004      	b.n	80078aa <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 80078a0:	683b      	ldr	r3, [r7, #0]
 80078a2:	2200      	movs	r2, #0
 80078a4:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80078a6:	2301      	movs	r3, #1
 80078a8:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 80078aa:	f000 fc6b 	bl	8008184 <vPortExitCritical>

	return xReturn;
 80078ae:	69fb      	ldr	r3, [r7, #28]
}
 80078b0:	4618      	mov	r0, r3
 80078b2:	3720      	adds	r7, #32
 80078b4:	46bd      	mov	sp, r7
 80078b6:	bd80      	pop	{r7, pc}
 80078b8:	200051fc 	.word	0x200051fc
 80078bc:	20005210 	.word	0x20005210

080078c0 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80078c0:	b480      	push	{r7}
 80078c2:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80078c4:	4b03      	ldr	r3, [pc, #12]	; (80078d4 <vTaskMissedYield+0x14>)
 80078c6:	2201      	movs	r2, #1
 80078c8:	601a      	str	r2, [r3, #0]
}
 80078ca:	bf00      	nop
 80078cc:	46bd      	mov	sp, r7
 80078ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078d2:	4770      	bx	lr
 80078d4:	2000520c 	.word	0x2000520c

080078d8 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80078d8:	b580      	push	{r7, lr}
 80078da:	b082      	sub	sp, #8
 80078dc:	af00      	add	r7, sp, #0
 80078de:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80078e0:	f000 f852 	bl	8007988 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80078e4:	4b06      	ldr	r3, [pc, #24]	; (8007900 <prvIdleTask+0x28>)
 80078e6:	681b      	ldr	r3, [r3, #0]
 80078e8:	2b01      	cmp	r3, #1
 80078ea:	d9f9      	bls.n	80078e0 <prvIdleTask+0x8>
			{
				taskYIELD();
 80078ec:	4b05      	ldr	r3, [pc, #20]	; (8007904 <prvIdleTask+0x2c>)
 80078ee:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80078f2:	601a      	str	r2, [r3, #0]
 80078f4:	f3bf 8f4f 	dsb	sy
 80078f8:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80078fc:	e7f0      	b.n	80078e0 <prvIdleTask+0x8>
 80078fe:	bf00      	nop
 8007900:	20005048 	.word	0x20005048
 8007904:	e000ed04 	.word	0xe000ed04

08007908 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8007908:	b580      	push	{r7, lr}
 800790a:	b082      	sub	sp, #8
 800790c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800790e:	2300      	movs	r3, #0
 8007910:	607b      	str	r3, [r7, #4]
 8007912:	e00c      	b.n	800792e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8007914:	687a      	ldr	r2, [r7, #4]
 8007916:	4613      	mov	r3, r2
 8007918:	009b      	lsls	r3, r3, #2
 800791a:	4413      	add	r3, r2
 800791c:	009b      	lsls	r3, r3, #2
 800791e:	4a12      	ldr	r2, [pc, #72]	; (8007968 <prvInitialiseTaskLists+0x60>)
 8007920:	4413      	add	r3, r2
 8007922:	4618      	mov	r0, r3
 8007924:	f7fe faac 	bl	8005e80 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8007928:	687b      	ldr	r3, [r7, #4]
 800792a:	3301      	adds	r3, #1
 800792c:	607b      	str	r3, [r7, #4]
 800792e:	687b      	ldr	r3, [r7, #4]
 8007930:	2b0f      	cmp	r3, #15
 8007932:	d9ef      	bls.n	8007914 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8007934:	480d      	ldr	r0, [pc, #52]	; (800796c <prvInitialiseTaskLists+0x64>)
 8007936:	f7fe faa3 	bl	8005e80 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800793a:	480d      	ldr	r0, [pc, #52]	; (8007970 <prvInitialiseTaskLists+0x68>)
 800793c:	f7fe faa0 	bl	8005e80 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8007940:	480c      	ldr	r0, [pc, #48]	; (8007974 <prvInitialiseTaskLists+0x6c>)
 8007942:	f7fe fa9d 	bl	8005e80 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8007946:	480c      	ldr	r0, [pc, #48]	; (8007978 <prvInitialiseTaskLists+0x70>)
 8007948:	f7fe fa9a 	bl	8005e80 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800794c:	480b      	ldr	r0, [pc, #44]	; (800797c <prvInitialiseTaskLists+0x74>)
 800794e:	f7fe fa97 	bl	8005e80 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8007952:	4b0b      	ldr	r3, [pc, #44]	; (8007980 <prvInitialiseTaskLists+0x78>)
 8007954:	4a05      	ldr	r2, [pc, #20]	; (800796c <prvInitialiseTaskLists+0x64>)
 8007956:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8007958:	4b0a      	ldr	r3, [pc, #40]	; (8007984 <prvInitialiseTaskLists+0x7c>)
 800795a:	4a05      	ldr	r2, [pc, #20]	; (8007970 <prvInitialiseTaskLists+0x68>)
 800795c:	601a      	str	r2, [r3, #0]
}
 800795e:	bf00      	nop
 8007960:	3708      	adds	r7, #8
 8007962:	46bd      	mov	sp, r7
 8007964:	bd80      	pop	{r7, pc}
 8007966:	bf00      	nop
 8007968:	20005048 	.word	0x20005048
 800796c:	20005188 	.word	0x20005188
 8007970:	2000519c 	.word	0x2000519c
 8007974:	200051b8 	.word	0x200051b8
 8007978:	200051cc 	.word	0x200051cc
 800797c:	200051e4 	.word	0x200051e4
 8007980:	200051b0 	.word	0x200051b0
 8007984:	200051b4 	.word	0x200051b4

08007988 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8007988:	b580      	push	{r7, lr}
 800798a:	b082      	sub	sp, #8
 800798c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800798e:	e019      	b.n	80079c4 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8007990:	f000 fbc8 	bl	8008124 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007994:	4b10      	ldr	r3, [pc, #64]	; (80079d8 <prvCheckTasksWaitingTermination+0x50>)
 8007996:	68db      	ldr	r3, [r3, #12]
 8007998:	68db      	ldr	r3, [r3, #12]
 800799a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800799c:	687b      	ldr	r3, [r7, #4]
 800799e:	3304      	adds	r3, #4
 80079a0:	4618      	mov	r0, r3
 80079a2:	f7fe faf7 	bl	8005f94 <uxListRemove>
				--uxCurrentNumberOfTasks;
 80079a6:	4b0d      	ldr	r3, [pc, #52]	; (80079dc <prvCheckTasksWaitingTermination+0x54>)
 80079a8:	681b      	ldr	r3, [r3, #0]
 80079aa:	3b01      	subs	r3, #1
 80079ac:	4a0b      	ldr	r2, [pc, #44]	; (80079dc <prvCheckTasksWaitingTermination+0x54>)
 80079ae:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80079b0:	4b0b      	ldr	r3, [pc, #44]	; (80079e0 <prvCheckTasksWaitingTermination+0x58>)
 80079b2:	681b      	ldr	r3, [r3, #0]
 80079b4:	3b01      	subs	r3, #1
 80079b6:	4a0a      	ldr	r2, [pc, #40]	; (80079e0 <prvCheckTasksWaitingTermination+0x58>)
 80079b8:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80079ba:	f000 fbe3 	bl	8008184 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80079be:	6878      	ldr	r0, [r7, #4]
 80079c0:	f000 f810 	bl	80079e4 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80079c4:	4b06      	ldr	r3, [pc, #24]	; (80079e0 <prvCheckTasksWaitingTermination+0x58>)
 80079c6:	681b      	ldr	r3, [r3, #0]
 80079c8:	2b00      	cmp	r3, #0
 80079ca:	d1e1      	bne.n	8007990 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80079cc:	bf00      	nop
 80079ce:	bf00      	nop
 80079d0:	3708      	adds	r7, #8
 80079d2:	46bd      	mov	sp, r7
 80079d4:	bd80      	pop	{r7, pc}
 80079d6:	bf00      	nop
 80079d8:	200051cc 	.word	0x200051cc
 80079dc:	200051f8 	.word	0x200051f8
 80079e0:	200051e0 	.word	0x200051e0

080079e4 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80079e4:	b580      	push	{r7, lr}
 80079e6:	b084      	sub	sp, #16
 80079e8:	af00      	add	r7, sp, #0
 80079ea:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 80079ec:	687b      	ldr	r3, [r7, #4]
 80079ee:	334c      	adds	r3, #76	; 0x4c
 80079f0:	4618      	mov	r0, r3
 80079f2:	f00c f81d 	bl	8013a30 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80079f6:	687b      	ldr	r3, [r7, #4]
 80079f8:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 80079fc:	2b00      	cmp	r3, #0
 80079fe:	d108      	bne.n	8007a12 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8007a00:	687b      	ldr	r3, [r7, #4]
 8007a02:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007a04:	4618      	mov	r0, r3
 8007a06:	f000 fd7b 	bl	8008500 <vPortFree>
				vPortFree( pxTCB );
 8007a0a:	6878      	ldr	r0, [r7, #4]
 8007a0c:	f000 fd78 	bl	8008500 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8007a10:	e018      	b.n	8007a44 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8007a12:	687b      	ldr	r3, [r7, #4]
 8007a14:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 8007a18:	2b01      	cmp	r3, #1
 8007a1a:	d103      	bne.n	8007a24 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8007a1c:	6878      	ldr	r0, [r7, #4]
 8007a1e:	f000 fd6f 	bl	8008500 <vPortFree>
	}
 8007a22:	e00f      	b.n	8007a44 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8007a24:	687b      	ldr	r3, [r7, #4]
 8007a26:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 8007a2a:	2b02      	cmp	r3, #2
 8007a2c:	d00a      	beq.n	8007a44 <prvDeleteTCB+0x60>
	__asm volatile
 8007a2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a32:	f383 8811 	msr	BASEPRI, r3
 8007a36:	f3bf 8f6f 	isb	sy
 8007a3a:	f3bf 8f4f 	dsb	sy
 8007a3e:	60fb      	str	r3, [r7, #12]
}
 8007a40:	bf00      	nop
 8007a42:	e7fe      	b.n	8007a42 <prvDeleteTCB+0x5e>
	}
 8007a44:	bf00      	nop
 8007a46:	3710      	adds	r7, #16
 8007a48:	46bd      	mov	sp, r7
 8007a4a:	bd80      	pop	{r7, pc}

08007a4c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8007a4c:	b480      	push	{r7}
 8007a4e:	b083      	sub	sp, #12
 8007a50:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007a52:	4b0c      	ldr	r3, [pc, #48]	; (8007a84 <prvResetNextTaskUnblockTime+0x38>)
 8007a54:	681b      	ldr	r3, [r3, #0]
 8007a56:	681b      	ldr	r3, [r3, #0]
 8007a58:	2b00      	cmp	r3, #0
 8007a5a:	d104      	bne.n	8007a66 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8007a5c:	4b0a      	ldr	r3, [pc, #40]	; (8007a88 <prvResetNextTaskUnblockTime+0x3c>)
 8007a5e:	f04f 32ff 	mov.w	r2, #4294967295
 8007a62:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8007a64:	e008      	b.n	8007a78 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007a66:	4b07      	ldr	r3, [pc, #28]	; (8007a84 <prvResetNextTaskUnblockTime+0x38>)
 8007a68:	681b      	ldr	r3, [r3, #0]
 8007a6a:	68db      	ldr	r3, [r3, #12]
 8007a6c:	68db      	ldr	r3, [r3, #12]
 8007a6e:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8007a70:	687b      	ldr	r3, [r7, #4]
 8007a72:	685b      	ldr	r3, [r3, #4]
 8007a74:	4a04      	ldr	r2, [pc, #16]	; (8007a88 <prvResetNextTaskUnblockTime+0x3c>)
 8007a76:	6013      	str	r3, [r2, #0]
}
 8007a78:	bf00      	nop
 8007a7a:	370c      	adds	r7, #12
 8007a7c:	46bd      	mov	sp, r7
 8007a7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a82:	4770      	bx	lr
 8007a84:	200051b0 	.word	0x200051b0
 8007a88:	20005218 	.word	0x20005218

08007a8c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8007a8c:	b480      	push	{r7}
 8007a8e:	b083      	sub	sp, #12
 8007a90:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8007a92:	4b0b      	ldr	r3, [pc, #44]	; (8007ac0 <xTaskGetSchedulerState+0x34>)
 8007a94:	681b      	ldr	r3, [r3, #0]
 8007a96:	2b00      	cmp	r3, #0
 8007a98:	d102      	bne.n	8007aa0 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8007a9a:	2301      	movs	r3, #1
 8007a9c:	607b      	str	r3, [r7, #4]
 8007a9e:	e008      	b.n	8007ab2 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007aa0:	4b08      	ldr	r3, [pc, #32]	; (8007ac4 <xTaskGetSchedulerState+0x38>)
 8007aa2:	681b      	ldr	r3, [r3, #0]
 8007aa4:	2b00      	cmp	r3, #0
 8007aa6:	d102      	bne.n	8007aae <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8007aa8:	2302      	movs	r3, #2
 8007aaa:	607b      	str	r3, [r7, #4]
 8007aac:	e001      	b.n	8007ab2 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8007aae:	2300      	movs	r3, #0
 8007ab0:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8007ab2:	687b      	ldr	r3, [r7, #4]
	}
 8007ab4:	4618      	mov	r0, r3
 8007ab6:	370c      	adds	r7, #12
 8007ab8:	46bd      	mov	sp, r7
 8007aba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007abe:	4770      	bx	lr
 8007ac0:	20005204 	.word	0x20005204
 8007ac4:	20005220 	.word	0x20005220

08007ac8 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8007ac8:	b580      	push	{r7, lr}
 8007aca:	b084      	sub	sp, #16
 8007acc:	af00      	add	r7, sp, #0
 8007ace:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8007ad0:	687b      	ldr	r3, [r7, #4]
 8007ad2:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8007ad4:	2300      	movs	r3, #0
 8007ad6:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8007ad8:	687b      	ldr	r3, [r7, #4]
 8007ada:	2b00      	cmp	r3, #0
 8007adc:	d05e      	beq.n	8007b9c <xTaskPriorityInherit+0xd4>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8007ade:	68bb      	ldr	r3, [r7, #8]
 8007ae0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007ae2:	4b31      	ldr	r3, [pc, #196]	; (8007ba8 <xTaskPriorityInherit+0xe0>)
 8007ae4:	681b      	ldr	r3, [r3, #0]
 8007ae6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007ae8:	429a      	cmp	r2, r3
 8007aea:	d24e      	bcs.n	8007b8a <xTaskPriorityInherit+0xc2>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8007aec:	68bb      	ldr	r3, [r7, #8]
 8007aee:	699b      	ldr	r3, [r3, #24]
 8007af0:	2b00      	cmp	r3, #0
 8007af2:	db06      	blt.n	8007b02 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007af4:	4b2c      	ldr	r3, [pc, #176]	; (8007ba8 <xTaskPriorityInherit+0xe0>)
 8007af6:	681b      	ldr	r3, [r3, #0]
 8007af8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007afa:	f1c3 0210 	rsb	r2, r3, #16
 8007afe:	68bb      	ldr	r3, [r7, #8]
 8007b00:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8007b02:	68bb      	ldr	r3, [r7, #8]
 8007b04:	6959      	ldr	r1, [r3, #20]
 8007b06:	68bb      	ldr	r3, [r7, #8]
 8007b08:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007b0a:	4613      	mov	r3, r2
 8007b0c:	009b      	lsls	r3, r3, #2
 8007b0e:	4413      	add	r3, r2
 8007b10:	009b      	lsls	r3, r3, #2
 8007b12:	4a26      	ldr	r2, [pc, #152]	; (8007bac <xTaskPriorityInherit+0xe4>)
 8007b14:	4413      	add	r3, r2
 8007b16:	4299      	cmp	r1, r3
 8007b18:	d12f      	bne.n	8007b7a <xTaskPriorityInherit+0xb2>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007b1a:	68bb      	ldr	r3, [r7, #8]
 8007b1c:	3304      	adds	r3, #4
 8007b1e:	4618      	mov	r0, r3
 8007b20:	f7fe fa38 	bl	8005f94 <uxListRemove>
 8007b24:	4603      	mov	r3, r0
 8007b26:	2b00      	cmp	r3, #0
 8007b28:	d10a      	bne.n	8007b40 <xTaskPriorityInherit+0x78>
					{
						/* It is known that the task is in its ready list so
						there is no need to check again and the port level
						reset macro can be called directly. */
						portRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority, uxTopReadyPriority );
 8007b2a:	68bb      	ldr	r3, [r7, #8]
 8007b2c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007b2e:	2201      	movs	r2, #1
 8007b30:	fa02 f303 	lsl.w	r3, r2, r3
 8007b34:	43da      	mvns	r2, r3
 8007b36:	4b1e      	ldr	r3, [pc, #120]	; (8007bb0 <xTaskPriorityInherit+0xe8>)
 8007b38:	681b      	ldr	r3, [r3, #0]
 8007b3a:	4013      	ands	r3, r2
 8007b3c:	4a1c      	ldr	r2, [pc, #112]	; (8007bb0 <xTaskPriorityInherit+0xe8>)
 8007b3e:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8007b40:	4b19      	ldr	r3, [pc, #100]	; (8007ba8 <xTaskPriorityInherit+0xe0>)
 8007b42:	681b      	ldr	r3, [r3, #0]
 8007b44:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007b46:	68bb      	ldr	r3, [r7, #8]
 8007b48:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8007b4a:	68bb      	ldr	r3, [r7, #8]
 8007b4c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007b4e:	2201      	movs	r2, #1
 8007b50:	409a      	lsls	r2, r3
 8007b52:	4b17      	ldr	r3, [pc, #92]	; (8007bb0 <xTaskPriorityInherit+0xe8>)
 8007b54:	681b      	ldr	r3, [r3, #0]
 8007b56:	4313      	orrs	r3, r2
 8007b58:	4a15      	ldr	r2, [pc, #84]	; (8007bb0 <xTaskPriorityInherit+0xe8>)
 8007b5a:	6013      	str	r3, [r2, #0]
 8007b5c:	68bb      	ldr	r3, [r7, #8]
 8007b5e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007b60:	4613      	mov	r3, r2
 8007b62:	009b      	lsls	r3, r3, #2
 8007b64:	4413      	add	r3, r2
 8007b66:	009b      	lsls	r3, r3, #2
 8007b68:	4a10      	ldr	r2, [pc, #64]	; (8007bac <xTaskPriorityInherit+0xe4>)
 8007b6a:	441a      	add	r2, r3
 8007b6c:	68bb      	ldr	r3, [r7, #8]
 8007b6e:	3304      	adds	r3, #4
 8007b70:	4619      	mov	r1, r3
 8007b72:	4610      	mov	r0, r2
 8007b74:	f7fe f9b1 	bl	8005eda <vListInsertEnd>
 8007b78:	e004      	b.n	8007b84 <xTaskPriorityInherit+0xbc>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8007b7a:	4b0b      	ldr	r3, [pc, #44]	; (8007ba8 <xTaskPriorityInherit+0xe0>)
 8007b7c:	681b      	ldr	r3, [r3, #0]
 8007b7e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007b80:	68bb      	ldr	r3, [r7, #8]
 8007b82:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8007b84:	2301      	movs	r3, #1
 8007b86:	60fb      	str	r3, [r7, #12]
 8007b88:	e008      	b.n	8007b9c <xTaskPriorityInherit+0xd4>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8007b8a:	68bb      	ldr	r3, [r7, #8]
 8007b8c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007b8e:	4b06      	ldr	r3, [pc, #24]	; (8007ba8 <xTaskPriorityInherit+0xe0>)
 8007b90:	681b      	ldr	r3, [r3, #0]
 8007b92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007b94:	429a      	cmp	r2, r3
 8007b96:	d201      	bcs.n	8007b9c <xTaskPriorityInherit+0xd4>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8007b98:	2301      	movs	r3, #1
 8007b9a:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8007b9c:	68fb      	ldr	r3, [r7, #12]
	}
 8007b9e:	4618      	mov	r0, r3
 8007ba0:	3710      	adds	r7, #16
 8007ba2:	46bd      	mov	sp, r7
 8007ba4:	bd80      	pop	{r7, pc}
 8007ba6:	bf00      	nop
 8007ba8:	20005044 	.word	0x20005044
 8007bac:	20005048 	.word	0x20005048
 8007bb0:	20005200 	.word	0x20005200

08007bb4 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8007bb4:	b580      	push	{r7, lr}
 8007bb6:	b086      	sub	sp, #24
 8007bb8:	af00      	add	r7, sp, #0
 8007bba:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8007bbc:	687b      	ldr	r3, [r7, #4]
 8007bbe:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8007bc0:	2300      	movs	r3, #0
 8007bc2:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8007bc4:	687b      	ldr	r3, [r7, #4]
 8007bc6:	2b00      	cmp	r3, #0
 8007bc8:	d06e      	beq.n	8007ca8 <xTaskPriorityDisinherit+0xf4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8007bca:	4b3a      	ldr	r3, [pc, #232]	; (8007cb4 <xTaskPriorityDisinherit+0x100>)
 8007bcc:	681b      	ldr	r3, [r3, #0]
 8007bce:	693a      	ldr	r2, [r7, #16]
 8007bd0:	429a      	cmp	r2, r3
 8007bd2:	d00a      	beq.n	8007bea <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8007bd4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007bd8:	f383 8811 	msr	BASEPRI, r3
 8007bdc:	f3bf 8f6f 	isb	sy
 8007be0:	f3bf 8f4f 	dsb	sy
 8007be4:	60fb      	str	r3, [r7, #12]
}
 8007be6:	bf00      	nop
 8007be8:	e7fe      	b.n	8007be8 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8007bea:	693b      	ldr	r3, [r7, #16]
 8007bec:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007bee:	2b00      	cmp	r3, #0
 8007bf0:	d10a      	bne.n	8007c08 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8007bf2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007bf6:	f383 8811 	msr	BASEPRI, r3
 8007bfa:	f3bf 8f6f 	isb	sy
 8007bfe:	f3bf 8f4f 	dsb	sy
 8007c02:	60bb      	str	r3, [r7, #8]
}
 8007c04:	bf00      	nop
 8007c06:	e7fe      	b.n	8007c06 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8007c08:	693b      	ldr	r3, [r7, #16]
 8007c0a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007c0c:	1e5a      	subs	r2, r3, #1
 8007c0e:	693b      	ldr	r3, [r7, #16]
 8007c10:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8007c12:	693b      	ldr	r3, [r7, #16]
 8007c14:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007c16:	693b      	ldr	r3, [r7, #16]
 8007c18:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007c1a:	429a      	cmp	r2, r3
 8007c1c:	d044      	beq.n	8007ca8 <xTaskPriorityDisinherit+0xf4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8007c1e:	693b      	ldr	r3, [r7, #16]
 8007c20:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007c22:	2b00      	cmp	r3, #0
 8007c24:	d140      	bne.n	8007ca8 <xTaskPriorityDisinherit+0xf4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007c26:	693b      	ldr	r3, [r7, #16]
 8007c28:	3304      	adds	r3, #4
 8007c2a:	4618      	mov	r0, r3
 8007c2c:	f7fe f9b2 	bl	8005f94 <uxListRemove>
 8007c30:	4603      	mov	r3, r0
 8007c32:	2b00      	cmp	r3, #0
 8007c34:	d115      	bne.n	8007c62 <xTaskPriorityDisinherit+0xae>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8007c36:	693b      	ldr	r3, [r7, #16]
 8007c38:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007c3a:	491f      	ldr	r1, [pc, #124]	; (8007cb8 <xTaskPriorityDisinherit+0x104>)
 8007c3c:	4613      	mov	r3, r2
 8007c3e:	009b      	lsls	r3, r3, #2
 8007c40:	4413      	add	r3, r2
 8007c42:	009b      	lsls	r3, r3, #2
 8007c44:	440b      	add	r3, r1
 8007c46:	681b      	ldr	r3, [r3, #0]
 8007c48:	2b00      	cmp	r3, #0
 8007c4a:	d10a      	bne.n	8007c62 <xTaskPriorityDisinherit+0xae>
 8007c4c:	693b      	ldr	r3, [r7, #16]
 8007c4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007c50:	2201      	movs	r2, #1
 8007c52:	fa02 f303 	lsl.w	r3, r2, r3
 8007c56:	43da      	mvns	r2, r3
 8007c58:	4b18      	ldr	r3, [pc, #96]	; (8007cbc <xTaskPriorityDisinherit+0x108>)
 8007c5a:	681b      	ldr	r3, [r3, #0]
 8007c5c:	4013      	ands	r3, r2
 8007c5e:	4a17      	ldr	r2, [pc, #92]	; (8007cbc <xTaskPriorityDisinherit+0x108>)
 8007c60:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8007c62:	693b      	ldr	r3, [r7, #16]
 8007c64:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007c66:	693b      	ldr	r3, [r7, #16]
 8007c68:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007c6a:	693b      	ldr	r3, [r7, #16]
 8007c6c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007c6e:	f1c3 0210 	rsb	r2, r3, #16
 8007c72:	693b      	ldr	r3, [r7, #16]
 8007c74:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8007c76:	693b      	ldr	r3, [r7, #16]
 8007c78:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007c7a:	2201      	movs	r2, #1
 8007c7c:	409a      	lsls	r2, r3
 8007c7e:	4b0f      	ldr	r3, [pc, #60]	; (8007cbc <xTaskPriorityDisinherit+0x108>)
 8007c80:	681b      	ldr	r3, [r3, #0]
 8007c82:	4313      	orrs	r3, r2
 8007c84:	4a0d      	ldr	r2, [pc, #52]	; (8007cbc <xTaskPriorityDisinherit+0x108>)
 8007c86:	6013      	str	r3, [r2, #0]
 8007c88:	693b      	ldr	r3, [r7, #16]
 8007c8a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007c8c:	4613      	mov	r3, r2
 8007c8e:	009b      	lsls	r3, r3, #2
 8007c90:	4413      	add	r3, r2
 8007c92:	009b      	lsls	r3, r3, #2
 8007c94:	4a08      	ldr	r2, [pc, #32]	; (8007cb8 <xTaskPriorityDisinherit+0x104>)
 8007c96:	441a      	add	r2, r3
 8007c98:	693b      	ldr	r3, [r7, #16]
 8007c9a:	3304      	adds	r3, #4
 8007c9c:	4619      	mov	r1, r3
 8007c9e:	4610      	mov	r0, r2
 8007ca0:	f7fe f91b 	bl	8005eda <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8007ca4:	2301      	movs	r3, #1
 8007ca6:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8007ca8:	697b      	ldr	r3, [r7, #20]
	}
 8007caa:	4618      	mov	r0, r3
 8007cac:	3718      	adds	r7, #24
 8007cae:	46bd      	mov	sp, r7
 8007cb0:	bd80      	pop	{r7, pc}
 8007cb2:	bf00      	nop
 8007cb4:	20005044 	.word	0x20005044
 8007cb8:	20005048 	.word	0x20005048
 8007cbc:	20005200 	.word	0x20005200

08007cc0 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8007cc0:	b580      	push	{r7, lr}
 8007cc2:	b088      	sub	sp, #32
 8007cc4:	af00      	add	r7, sp, #0
 8007cc6:	6078      	str	r0, [r7, #4]
 8007cc8:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 8007cca:	687b      	ldr	r3, [r7, #4]
 8007ccc:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8007cce:	2301      	movs	r3, #1
 8007cd0:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8007cd2:	687b      	ldr	r3, [r7, #4]
 8007cd4:	2b00      	cmp	r3, #0
 8007cd6:	d077      	beq.n	8007dc8 <vTaskPriorityDisinheritAfterTimeout+0x108>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8007cd8:	69bb      	ldr	r3, [r7, #24]
 8007cda:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007cdc:	2b00      	cmp	r3, #0
 8007cde:	d10a      	bne.n	8007cf6 <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 8007ce0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ce4:	f383 8811 	msr	BASEPRI, r3
 8007ce8:	f3bf 8f6f 	isb	sy
 8007cec:	f3bf 8f4f 	dsb	sy
 8007cf0:	60fb      	str	r3, [r7, #12]
}
 8007cf2:	bf00      	nop
 8007cf4:	e7fe      	b.n	8007cf4 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8007cf6:	69bb      	ldr	r3, [r7, #24]
 8007cf8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007cfa:	683a      	ldr	r2, [r7, #0]
 8007cfc:	429a      	cmp	r2, r3
 8007cfe:	d902      	bls.n	8007d06 <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8007d00:	683b      	ldr	r3, [r7, #0]
 8007d02:	61fb      	str	r3, [r7, #28]
 8007d04:	e002      	b.n	8007d0c <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8007d06:	69bb      	ldr	r3, [r7, #24]
 8007d08:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007d0a:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8007d0c:	69bb      	ldr	r3, [r7, #24]
 8007d0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007d10:	69fa      	ldr	r2, [r7, #28]
 8007d12:	429a      	cmp	r2, r3
 8007d14:	d058      	beq.n	8007dc8 <vTaskPriorityDisinheritAfterTimeout+0x108>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8007d16:	69bb      	ldr	r3, [r7, #24]
 8007d18:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007d1a:	697a      	ldr	r2, [r7, #20]
 8007d1c:	429a      	cmp	r2, r3
 8007d1e:	d153      	bne.n	8007dc8 <vTaskPriorityDisinheritAfterTimeout+0x108>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8007d20:	4b2b      	ldr	r3, [pc, #172]	; (8007dd0 <vTaskPriorityDisinheritAfterTimeout+0x110>)
 8007d22:	681b      	ldr	r3, [r3, #0]
 8007d24:	69ba      	ldr	r2, [r7, #24]
 8007d26:	429a      	cmp	r2, r3
 8007d28:	d10a      	bne.n	8007d40 <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 8007d2a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d2e:	f383 8811 	msr	BASEPRI, r3
 8007d32:	f3bf 8f6f 	isb	sy
 8007d36:	f3bf 8f4f 	dsb	sy
 8007d3a:	60bb      	str	r3, [r7, #8]
}
 8007d3c:	bf00      	nop
 8007d3e:	e7fe      	b.n	8007d3e <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8007d40:	69bb      	ldr	r3, [r7, #24]
 8007d42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007d44:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8007d46:	69bb      	ldr	r3, [r7, #24]
 8007d48:	69fa      	ldr	r2, [r7, #28]
 8007d4a:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8007d4c:	69bb      	ldr	r3, [r7, #24]
 8007d4e:	699b      	ldr	r3, [r3, #24]
 8007d50:	2b00      	cmp	r3, #0
 8007d52:	db04      	blt.n	8007d5e <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007d54:	69fb      	ldr	r3, [r7, #28]
 8007d56:	f1c3 0210 	rsb	r2, r3, #16
 8007d5a:	69bb      	ldr	r3, [r7, #24]
 8007d5c:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8007d5e:	69bb      	ldr	r3, [r7, #24]
 8007d60:	6959      	ldr	r1, [r3, #20]
 8007d62:	693a      	ldr	r2, [r7, #16]
 8007d64:	4613      	mov	r3, r2
 8007d66:	009b      	lsls	r3, r3, #2
 8007d68:	4413      	add	r3, r2
 8007d6a:	009b      	lsls	r3, r3, #2
 8007d6c:	4a19      	ldr	r2, [pc, #100]	; (8007dd4 <vTaskPriorityDisinheritAfterTimeout+0x114>)
 8007d6e:	4413      	add	r3, r2
 8007d70:	4299      	cmp	r1, r3
 8007d72:	d129      	bne.n	8007dc8 <vTaskPriorityDisinheritAfterTimeout+0x108>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007d74:	69bb      	ldr	r3, [r7, #24]
 8007d76:	3304      	adds	r3, #4
 8007d78:	4618      	mov	r0, r3
 8007d7a:	f7fe f90b 	bl	8005f94 <uxListRemove>
 8007d7e:	4603      	mov	r3, r0
 8007d80:	2b00      	cmp	r3, #0
 8007d82:	d10a      	bne.n	8007d9a <vTaskPriorityDisinheritAfterTimeout+0xda>
						{
							/* It is known that the task is in its ready list so
							there is no need to check again and the port level
							reset macro can be called directly. */
							portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 8007d84:	69bb      	ldr	r3, [r7, #24]
 8007d86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007d88:	2201      	movs	r2, #1
 8007d8a:	fa02 f303 	lsl.w	r3, r2, r3
 8007d8e:	43da      	mvns	r2, r3
 8007d90:	4b11      	ldr	r3, [pc, #68]	; (8007dd8 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 8007d92:	681b      	ldr	r3, [r3, #0]
 8007d94:	4013      	ands	r3, r2
 8007d96:	4a10      	ldr	r2, [pc, #64]	; (8007dd8 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 8007d98:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8007d9a:	69bb      	ldr	r3, [r7, #24]
 8007d9c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007d9e:	2201      	movs	r2, #1
 8007da0:	409a      	lsls	r2, r3
 8007da2:	4b0d      	ldr	r3, [pc, #52]	; (8007dd8 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 8007da4:	681b      	ldr	r3, [r3, #0]
 8007da6:	4313      	orrs	r3, r2
 8007da8:	4a0b      	ldr	r2, [pc, #44]	; (8007dd8 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 8007daa:	6013      	str	r3, [r2, #0]
 8007dac:	69bb      	ldr	r3, [r7, #24]
 8007dae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007db0:	4613      	mov	r3, r2
 8007db2:	009b      	lsls	r3, r3, #2
 8007db4:	4413      	add	r3, r2
 8007db6:	009b      	lsls	r3, r3, #2
 8007db8:	4a06      	ldr	r2, [pc, #24]	; (8007dd4 <vTaskPriorityDisinheritAfterTimeout+0x114>)
 8007dba:	441a      	add	r2, r3
 8007dbc:	69bb      	ldr	r3, [r7, #24]
 8007dbe:	3304      	adds	r3, #4
 8007dc0:	4619      	mov	r1, r3
 8007dc2:	4610      	mov	r0, r2
 8007dc4:	f7fe f889 	bl	8005eda <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8007dc8:	bf00      	nop
 8007dca:	3720      	adds	r7, #32
 8007dcc:	46bd      	mov	sp, r7
 8007dce:	bd80      	pop	{r7, pc}
 8007dd0:	20005044 	.word	0x20005044
 8007dd4:	20005048 	.word	0x20005048
 8007dd8:	20005200 	.word	0x20005200

08007ddc <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 8007ddc:	b480      	push	{r7}
 8007dde:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8007de0:	4b07      	ldr	r3, [pc, #28]	; (8007e00 <pvTaskIncrementMutexHeldCount+0x24>)
 8007de2:	681b      	ldr	r3, [r3, #0]
 8007de4:	2b00      	cmp	r3, #0
 8007de6:	d004      	beq.n	8007df2 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8007de8:	4b05      	ldr	r3, [pc, #20]	; (8007e00 <pvTaskIncrementMutexHeldCount+0x24>)
 8007dea:	681b      	ldr	r3, [r3, #0]
 8007dec:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8007dee:	3201      	adds	r2, #1
 8007df0:	649a      	str	r2, [r3, #72]	; 0x48
		}

		return pxCurrentTCB;
 8007df2:	4b03      	ldr	r3, [pc, #12]	; (8007e00 <pvTaskIncrementMutexHeldCount+0x24>)
 8007df4:	681b      	ldr	r3, [r3, #0]
	}
 8007df6:	4618      	mov	r0, r3
 8007df8:	46bd      	mov	sp, r7
 8007dfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dfe:	4770      	bx	lr
 8007e00:	20005044 	.word	0x20005044

08007e04 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8007e04:	b580      	push	{r7, lr}
 8007e06:	b084      	sub	sp, #16
 8007e08:	af00      	add	r7, sp, #0
 8007e0a:	6078      	str	r0, [r7, #4]
 8007e0c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8007e0e:	4b29      	ldr	r3, [pc, #164]	; (8007eb4 <prvAddCurrentTaskToDelayedList+0xb0>)
 8007e10:	681b      	ldr	r3, [r3, #0]
 8007e12:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007e14:	4b28      	ldr	r3, [pc, #160]	; (8007eb8 <prvAddCurrentTaskToDelayedList+0xb4>)
 8007e16:	681b      	ldr	r3, [r3, #0]
 8007e18:	3304      	adds	r3, #4
 8007e1a:	4618      	mov	r0, r3
 8007e1c:	f7fe f8ba 	bl	8005f94 <uxListRemove>
 8007e20:	4603      	mov	r3, r0
 8007e22:	2b00      	cmp	r3, #0
 8007e24:	d10b      	bne.n	8007e3e <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8007e26:	4b24      	ldr	r3, [pc, #144]	; (8007eb8 <prvAddCurrentTaskToDelayedList+0xb4>)
 8007e28:	681b      	ldr	r3, [r3, #0]
 8007e2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007e2c:	2201      	movs	r2, #1
 8007e2e:	fa02 f303 	lsl.w	r3, r2, r3
 8007e32:	43da      	mvns	r2, r3
 8007e34:	4b21      	ldr	r3, [pc, #132]	; (8007ebc <prvAddCurrentTaskToDelayedList+0xb8>)
 8007e36:	681b      	ldr	r3, [r3, #0]
 8007e38:	4013      	ands	r3, r2
 8007e3a:	4a20      	ldr	r2, [pc, #128]	; (8007ebc <prvAddCurrentTaskToDelayedList+0xb8>)
 8007e3c:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8007e3e:	687b      	ldr	r3, [r7, #4]
 8007e40:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007e44:	d10a      	bne.n	8007e5c <prvAddCurrentTaskToDelayedList+0x58>
 8007e46:	683b      	ldr	r3, [r7, #0]
 8007e48:	2b00      	cmp	r3, #0
 8007e4a:	d007      	beq.n	8007e5c <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007e4c:	4b1a      	ldr	r3, [pc, #104]	; (8007eb8 <prvAddCurrentTaskToDelayedList+0xb4>)
 8007e4e:	681b      	ldr	r3, [r3, #0]
 8007e50:	3304      	adds	r3, #4
 8007e52:	4619      	mov	r1, r3
 8007e54:	481a      	ldr	r0, [pc, #104]	; (8007ec0 <prvAddCurrentTaskToDelayedList+0xbc>)
 8007e56:	f7fe f840 	bl	8005eda <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8007e5a:	e026      	b.n	8007eaa <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8007e5c:	68fa      	ldr	r2, [r7, #12]
 8007e5e:	687b      	ldr	r3, [r7, #4]
 8007e60:	4413      	add	r3, r2
 8007e62:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8007e64:	4b14      	ldr	r3, [pc, #80]	; (8007eb8 <prvAddCurrentTaskToDelayedList+0xb4>)
 8007e66:	681b      	ldr	r3, [r3, #0]
 8007e68:	68ba      	ldr	r2, [r7, #8]
 8007e6a:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8007e6c:	68ba      	ldr	r2, [r7, #8]
 8007e6e:	68fb      	ldr	r3, [r7, #12]
 8007e70:	429a      	cmp	r2, r3
 8007e72:	d209      	bcs.n	8007e88 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007e74:	4b13      	ldr	r3, [pc, #76]	; (8007ec4 <prvAddCurrentTaskToDelayedList+0xc0>)
 8007e76:	681a      	ldr	r2, [r3, #0]
 8007e78:	4b0f      	ldr	r3, [pc, #60]	; (8007eb8 <prvAddCurrentTaskToDelayedList+0xb4>)
 8007e7a:	681b      	ldr	r3, [r3, #0]
 8007e7c:	3304      	adds	r3, #4
 8007e7e:	4619      	mov	r1, r3
 8007e80:	4610      	mov	r0, r2
 8007e82:	f7fe f84e 	bl	8005f22 <vListInsert>
}
 8007e86:	e010      	b.n	8007eaa <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007e88:	4b0f      	ldr	r3, [pc, #60]	; (8007ec8 <prvAddCurrentTaskToDelayedList+0xc4>)
 8007e8a:	681a      	ldr	r2, [r3, #0]
 8007e8c:	4b0a      	ldr	r3, [pc, #40]	; (8007eb8 <prvAddCurrentTaskToDelayedList+0xb4>)
 8007e8e:	681b      	ldr	r3, [r3, #0]
 8007e90:	3304      	adds	r3, #4
 8007e92:	4619      	mov	r1, r3
 8007e94:	4610      	mov	r0, r2
 8007e96:	f7fe f844 	bl	8005f22 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8007e9a:	4b0c      	ldr	r3, [pc, #48]	; (8007ecc <prvAddCurrentTaskToDelayedList+0xc8>)
 8007e9c:	681b      	ldr	r3, [r3, #0]
 8007e9e:	68ba      	ldr	r2, [r7, #8]
 8007ea0:	429a      	cmp	r2, r3
 8007ea2:	d202      	bcs.n	8007eaa <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8007ea4:	4a09      	ldr	r2, [pc, #36]	; (8007ecc <prvAddCurrentTaskToDelayedList+0xc8>)
 8007ea6:	68bb      	ldr	r3, [r7, #8]
 8007ea8:	6013      	str	r3, [r2, #0]
}
 8007eaa:	bf00      	nop
 8007eac:	3710      	adds	r7, #16
 8007eae:	46bd      	mov	sp, r7
 8007eb0:	bd80      	pop	{r7, pc}
 8007eb2:	bf00      	nop
 8007eb4:	200051fc 	.word	0x200051fc
 8007eb8:	20005044 	.word	0x20005044
 8007ebc:	20005200 	.word	0x20005200
 8007ec0:	200051e4 	.word	0x200051e4
 8007ec4:	200051b4 	.word	0x200051b4
 8007ec8:	200051b0 	.word	0x200051b0
 8007ecc:	20005218 	.word	0x20005218

08007ed0 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8007ed0:	b480      	push	{r7}
 8007ed2:	b085      	sub	sp, #20
 8007ed4:	af00      	add	r7, sp, #0
 8007ed6:	60f8      	str	r0, [r7, #12]
 8007ed8:	60b9      	str	r1, [r7, #8]
 8007eda:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8007edc:	68fb      	ldr	r3, [r7, #12]
 8007ede:	3b04      	subs	r3, #4
 8007ee0:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8007ee2:	68fb      	ldr	r3, [r7, #12]
 8007ee4:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8007ee8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8007eea:	68fb      	ldr	r3, [r7, #12]
 8007eec:	3b04      	subs	r3, #4
 8007eee:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8007ef0:	68bb      	ldr	r3, [r7, #8]
 8007ef2:	f023 0201 	bic.w	r2, r3, #1
 8007ef6:	68fb      	ldr	r3, [r7, #12]
 8007ef8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8007efa:	68fb      	ldr	r3, [r7, #12]
 8007efc:	3b04      	subs	r3, #4
 8007efe:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8007f00:	4a0c      	ldr	r2, [pc, #48]	; (8007f34 <pxPortInitialiseStack+0x64>)
 8007f02:	68fb      	ldr	r3, [r7, #12]
 8007f04:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8007f06:	68fb      	ldr	r3, [r7, #12]
 8007f08:	3b14      	subs	r3, #20
 8007f0a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8007f0c:	687a      	ldr	r2, [r7, #4]
 8007f0e:	68fb      	ldr	r3, [r7, #12]
 8007f10:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8007f12:	68fb      	ldr	r3, [r7, #12]
 8007f14:	3b04      	subs	r3, #4
 8007f16:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8007f18:	68fb      	ldr	r3, [r7, #12]
 8007f1a:	f06f 0202 	mvn.w	r2, #2
 8007f1e:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8007f20:	68fb      	ldr	r3, [r7, #12]
 8007f22:	3b20      	subs	r3, #32
 8007f24:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8007f26:	68fb      	ldr	r3, [r7, #12]
}
 8007f28:	4618      	mov	r0, r3
 8007f2a:	3714      	adds	r7, #20
 8007f2c:	46bd      	mov	sp, r7
 8007f2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f32:	4770      	bx	lr
 8007f34:	08007f39 	.word	0x08007f39

08007f38 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8007f38:	b480      	push	{r7}
 8007f3a:	b085      	sub	sp, #20
 8007f3c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8007f3e:	2300      	movs	r3, #0
 8007f40:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8007f42:	4b12      	ldr	r3, [pc, #72]	; (8007f8c <prvTaskExitError+0x54>)
 8007f44:	681b      	ldr	r3, [r3, #0]
 8007f46:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007f4a:	d00a      	beq.n	8007f62 <prvTaskExitError+0x2a>
	__asm volatile
 8007f4c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f50:	f383 8811 	msr	BASEPRI, r3
 8007f54:	f3bf 8f6f 	isb	sy
 8007f58:	f3bf 8f4f 	dsb	sy
 8007f5c:	60fb      	str	r3, [r7, #12]
}
 8007f5e:	bf00      	nop
 8007f60:	e7fe      	b.n	8007f60 <prvTaskExitError+0x28>
	__asm volatile
 8007f62:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f66:	f383 8811 	msr	BASEPRI, r3
 8007f6a:	f3bf 8f6f 	isb	sy
 8007f6e:	f3bf 8f4f 	dsb	sy
 8007f72:	60bb      	str	r3, [r7, #8]
}
 8007f74:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8007f76:	bf00      	nop
 8007f78:	687b      	ldr	r3, [r7, #4]
 8007f7a:	2b00      	cmp	r3, #0
 8007f7c:	d0fc      	beq.n	8007f78 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8007f7e:	bf00      	nop
 8007f80:	bf00      	nop
 8007f82:	3714      	adds	r7, #20
 8007f84:	46bd      	mov	sp, r7
 8007f86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f8a:	4770      	bx	lr
 8007f8c:	20000020 	.word	0x20000020

08007f90 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8007f90:	4b07      	ldr	r3, [pc, #28]	; (8007fb0 <pxCurrentTCBConst2>)
 8007f92:	6819      	ldr	r1, [r3, #0]
 8007f94:	6808      	ldr	r0, [r1, #0]
 8007f96:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007f9a:	f380 8809 	msr	PSP, r0
 8007f9e:	f3bf 8f6f 	isb	sy
 8007fa2:	f04f 0000 	mov.w	r0, #0
 8007fa6:	f380 8811 	msr	BASEPRI, r0
 8007faa:	4770      	bx	lr
 8007fac:	f3af 8000 	nop.w

08007fb0 <pxCurrentTCBConst2>:
 8007fb0:	20005044 	.word	0x20005044
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8007fb4:	bf00      	nop
 8007fb6:	bf00      	nop

08007fb8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8007fb8:	4808      	ldr	r0, [pc, #32]	; (8007fdc <prvPortStartFirstTask+0x24>)
 8007fba:	6800      	ldr	r0, [r0, #0]
 8007fbc:	6800      	ldr	r0, [r0, #0]
 8007fbe:	f380 8808 	msr	MSP, r0
 8007fc2:	f04f 0000 	mov.w	r0, #0
 8007fc6:	f380 8814 	msr	CONTROL, r0
 8007fca:	b662      	cpsie	i
 8007fcc:	b661      	cpsie	f
 8007fce:	f3bf 8f4f 	dsb	sy
 8007fd2:	f3bf 8f6f 	isb	sy
 8007fd6:	df00      	svc	0
 8007fd8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8007fda:	bf00      	nop
 8007fdc:	e000ed08 	.word	0xe000ed08

08007fe0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8007fe0:	b580      	push	{r7, lr}
 8007fe2:	b086      	sub	sp, #24
 8007fe4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8007fe6:	4b46      	ldr	r3, [pc, #280]	; (8008100 <xPortStartScheduler+0x120>)
 8007fe8:	681b      	ldr	r3, [r3, #0]
 8007fea:	4a46      	ldr	r2, [pc, #280]	; (8008104 <xPortStartScheduler+0x124>)
 8007fec:	4293      	cmp	r3, r2
 8007fee:	d10a      	bne.n	8008006 <xPortStartScheduler+0x26>
	__asm volatile
 8007ff0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ff4:	f383 8811 	msr	BASEPRI, r3
 8007ff8:	f3bf 8f6f 	isb	sy
 8007ffc:	f3bf 8f4f 	dsb	sy
 8008000:	613b      	str	r3, [r7, #16]
}
 8008002:	bf00      	nop
 8008004:	e7fe      	b.n	8008004 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8008006:	4b3e      	ldr	r3, [pc, #248]	; (8008100 <xPortStartScheduler+0x120>)
 8008008:	681b      	ldr	r3, [r3, #0]
 800800a:	4a3f      	ldr	r2, [pc, #252]	; (8008108 <xPortStartScheduler+0x128>)
 800800c:	4293      	cmp	r3, r2
 800800e:	d10a      	bne.n	8008026 <xPortStartScheduler+0x46>
	__asm volatile
 8008010:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008014:	f383 8811 	msr	BASEPRI, r3
 8008018:	f3bf 8f6f 	isb	sy
 800801c:	f3bf 8f4f 	dsb	sy
 8008020:	60fb      	str	r3, [r7, #12]
}
 8008022:	bf00      	nop
 8008024:	e7fe      	b.n	8008024 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8008026:	4b39      	ldr	r3, [pc, #228]	; (800810c <xPortStartScheduler+0x12c>)
 8008028:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800802a:	697b      	ldr	r3, [r7, #20]
 800802c:	781b      	ldrb	r3, [r3, #0]
 800802e:	b2db      	uxtb	r3, r3
 8008030:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8008032:	697b      	ldr	r3, [r7, #20]
 8008034:	22ff      	movs	r2, #255	; 0xff
 8008036:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8008038:	697b      	ldr	r3, [r7, #20]
 800803a:	781b      	ldrb	r3, [r3, #0]
 800803c:	b2db      	uxtb	r3, r3
 800803e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8008040:	78fb      	ldrb	r3, [r7, #3]
 8008042:	b2db      	uxtb	r3, r3
 8008044:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8008048:	b2da      	uxtb	r2, r3
 800804a:	4b31      	ldr	r3, [pc, #196]	; (8008110 <xPortStartScheduler+0x130>)
 800804c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800804e:	4b31      	ldr	r3, [pc, #196]	; (8008114 <xPortStartScheduler+0x134>)
 8008050:	2207      	movs	r2, #7
 8008052:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8008054:	e009      	b.n	800806a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8008056:	4b2f      	ldr	r3, [pc, #188]	; (8008114 <xPortStartScheduler+0x134>)
 8008058:	681b      	ldr	r3, [r3, #0]
 800805a:	3b01      	subs	r3, #1
 800805c:	4a2d      	ldr	r2, [pc, #180]	; (8008114 <xPortStartScheduler+0x134>)
 800805e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8008060:	78fb      	ldrb	r3, [r7, #3]
 8008062:	b2db      	uxtb	r3, r3
 8008064:	005b      	lsls	r3, r3, #1
 8008066:	b2db      	uxtb	r3, r3
 8008068:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800806a:	78fb      	ldrb	r3, [r7, #3]
 800806c:	b2db      	uxtb	r3, r3
 800806e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008072:	2b80      	cmp	r3, #128	; 0x80
 8008074:	d0ef      	beq.n	8008056 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8008076:	4b27      	ldr	r3, [pc, #156]	; (8008114 <xPortStartScheduler+0x134>)
 8008078:	681b      	ldr	r3, [r3, #0]
 800807a:	f1c3 0307 	rsb	r3, r3, #7
 800807e:	2b04      	cmp	r3, #4
 8008080:	d00a      	beq.n	8008098 <xPortStartScheduler+0xb8>
	__asm volatile
 8008082:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008086:	f383 8811 	msr	BASEPRI, r3
 800808a:	f3bf 8f6f 	isb	sy
 800808e:	f3bf 8f4f 	dsb	sy
 8008092:	60bb      	str	r3, [r7, #8]
}
 8008094:	bf00      	nop
 8008096:	e7fe      	b.n	8008096 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8008098:	4b1e      	ldr	r3, [pc, #120]	; (8008114 <xPortStartScheduler+0x134>)
 800809a:	681b      	ldr	r3, [r3, #0]
 800809c:	021b      	lsls	r3, r3, #8
 800809e:	4a1d      	ldr	r2, [pc, #116]	; (8008114 <xPortStartScheduler+0x134>)
 80080a0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80080a2:	4b1c      	ldr	r3, [pc, #112]	; (8008114 <xPortStartScheduler+0x134>)
 80080a4:	681b      	ldr	r3, [r3, #0]
 80080a6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80080aa:	4a1a      	ldr	r2, [pc, #104]	; (8008114 <xPortStartScheduler+0x134>)
 80080ac:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80080ae:	687b      	ldr	r3, [r7, #4]
 80080b0:	b2da      	uxtb	r2, r3
 80080b2:	697b      	ldr	r3, [r7, #20]
 80080b4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80080b6:	4b18      	ldr	r3, [pc, #96]	; (8008118 <xPortStartScheduler+0x138>)
 80080b8:	681b      	ldr	r3, [r3, #0]
 80080ba:	4a17      	ldr	r2, [pc, #92]	; (8008118 <xPortStartScheduler+0x138>)
 80080bc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80080c0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80080c2:	4b15      	ldr	r3, [pc, #84]	; (8008118 <xPortStartScheduler+0x138>)
 80080c4:	681b      	ldr	r3, [r3, #0]
 80080c6:	4a14      	ldr	r2, [pc, #80]	; (8008118 <xPortStartScheduler+0x138>)
 80080c8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80080cc:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80080ce:	f000 f8dd 	bl	800828c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80080d2:	4b12      	ldr	r3, [pc, #72]	; (800811c <xPortStartScheduler+0x13c>)
 80080d4:	2200      	movs	r2, #0
 80080d6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80080d8:	f000 f8fc 	bl	80082d4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80080dc:	4b10      	ldr	r3, [pc, #64]	; (8008120 <xPortStartScheduler+0x140>)
 80080de:	681b      	ldr	r3, [r3, #0]
 80080e0:	4a0f      	ldr	r2, [pc, #60]	; (8008120 <xPortStartScheduler+0x140>)
 80080e2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 80080e6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80080e8:	f7ff ff66 	bl	8007fb8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80080ec:	f7ff fa88 	bl	8007600 <vTaskSwitchContext>
	prvTaskExitError();
 80080f0:	f7ff ff22 	bl	8007f38 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80080f4:	2300      	movs	r3, #0
}
 80080f6:	4618      	mov	r0, r3
 80080f8:	3718      	adds	r7, #24
 80080fa:	46bd      	mov	sp, r7
 80080fc:	bd80      	pop	{r7, pc}
 80080fe:	bf00      	nop
 8008100:	e000ed00 	.word	0xe000ed00
 8008104:	410fc271 	.word	0x410fc271
 8008108:	410fc270 	.word	0x410fc270
 800810c:	e000e400 	.word	0xe000e400
 8008110:	20005224 	.word	0x20005224
 8008114:	20005228 	.word	0x20005228
 8008118:	e000ed20 	.word	0xe000ed20
 800811c:	20000020 	.word	0x20000020
 8008120:	e000ef34 	.word	0xe000ef34

08008124 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8008124:	b480      	push	{r7}
 8008126:	b083      	sub	sp, #12
 8008128:	af00      	add	r7, sp, #0
	__asm volatile
 800812a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800812e:	f383 8811 	msr	BASEPRI, r3
 8008132:	f3bf 8f6f 	isb	sy
 8008136:	f3bf 8f4f 	dsb	sy
 800813a:	607b      	str	r3, [r7, #4]
}
 800813c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800813e:	4b0f      	ldr	r3, [pc, #60]	; (800817c <vPortEnterCritical+0x58>)
 8008140:	681b      	ldr	r3, [r3, #0]
 8008142:	3301      	adds	r3, #1
 8008144:	4a0d      	ldr	r2, [pc, #52]	; (800817c <vPortEnterCritical+0x58>)
 8008146:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8008148:	4b0c      	ldr	r3, [pc, #48]	; (800817c <vPortEnterCritical+0x58>)
 800814a:	681b      	ldr	r3, [r3, #0]
 800814c:	2b01      	cmp	r3, #1
 800814e:	d10f      	bne.n	8008170 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8008150:	4b0b      	ldr	r3, [pc, #44]	; (8008180 <vPortEnterCritical+0x5c>)
 8008152:	681b      	ldr	r3, [r3, #0]
 8008154:	b2db      	uxtb	r3, r3
 8008156:	2b00      	cmp	r3, #0
 8008158:	d00a      	beq.n	8008170 <vPortEnterCritical+0x4c>
	__asm volatile
 800815a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800815e:	f383 8811 	msr	BASEPRI, r3
 8008162:	f3bf 8f6f 	isb	sy
 8008166:	f3bf 8f4f 	dsb	sy
 800816a:	603b      	str	r3, [r7, #0]
}
 800816c:	bf00      	nop
 800816e:	e7fe      	b.n	800816e <vPortEnterCritical+0x4a>
	}
}
 8008170:	bf00      	nop
 8008172:	370c      	adds	r7, #12
 8008174:	46bd      	mov	sp, r7
 8008176:	f85d 7b04 	ldr.w	r7, [sp], #4
 800817a:	4770      	bx	lr
 800817c:	20000020 	.word	0x20000020
 8008180:	e000ed04 	.word	0xe000ed04

08008184 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8008184:	b480      	push	{r7}
 8008186:	b083      	sub	sp, #12
 8008188:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800818a:	4b12      	ldr	r3, [pc, #72]	; (80081d4 <vPortExitCritical+0x50>)
 800818c:	681b      	ldr	r3, [r3, #0]
 800818e:	2b00      	cmp	r3, #0
 8008190:	d10a      	bne.n	80081a8 <vPortExitCritical+0x24>
	__asm volatile
 8008192:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008196:	f383 8811 	msr	BASEPRI, r3
 800819a:	f3bf 8f6f 	isb	sy
 800819e:	f3bf 8f4f 	dsb	sy
 80081a2:	607b      	str	r3, [r7, #4]
}
 80081a4:	bf00      	nop
 80081a6:	e7fe      	b.n	80081a6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 80081a8:	4b0a      	ldr	r3, [pc, #40]	; (80081d4 <vPortExitCritical+0x50>)
 80081aa:	681b      	ldr	r3, [r3, #0]
 80081ac:	3b01      	subs	r3, #1
 80081ae:	4a09      	ldr	r2, [pc, #36]	; (80081d4 <vPortExitCritical+0x50>)
 80081b0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80081b2:	4b08      	ldr	r3, [pc, #32]	; (80081d4 <vPortExitCritical+0x50>)
 80081b4:	681b      	ldr	r3, [r3, #0]
 80081b6:	2b00      	cmp	r3, #0
 80081b8:	d105      	bne.n	80081c6 <vPortExitCritical+0x42>
 80081ba:	2300      	movs	r3, #0
 80081bc:	603b      	str	r3, [r7, #0]
	__asm volatile
 80081be:	683b      	ldr	r3, [r7, #0]
 80081c0:	f383 8811 	msr	BASEPRI, r3
}
 80081c4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 80081c6:	bf00      	nop
 80081c8:	370c      	adds	r7, #12
 80081ca:	46bd      	mov	sp, r7
 80081cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081d0:	4770      	bx	lr
 80081d2:	bf00      	nop
 80081d4:	20000020 	.word	0x20000020
	...

080081e0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80081e0:	f3ef 8009 	mrs	r0, PSP
 80081e4:	f3bf 8f6f 	isb	sy
 80081e8:	4b15      	ldr	r3, [pc, #84]	; (8008240 <pxCurrentTCBConst>)
 80081ea:	681a      	ldr	r2, [r3, #0]
 80081ec:	f01e 0f10 	tst.w	lr, #16
 80081f0:	bf08      	it	eq
 80081f2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80081f6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80081fa:	6010      	str	r0, [r2, #0]
 80081fc:	e92d 0009 	stmdb	sp!, {r0, r3}
 8008200:	f04f 0050 	mov.w	r0, #80	; 0x50
 8008204:	f380 8811 	msr	BASEPRI, r0
 8008208:	f3bf 8f4f 	dsb	sy
 800820c:	f3bf 8f6f 	isb	sy
 8008210:	f7ff f9f6 	bl	8007600 <vTaskSwitchContext>
 8008214:	f04f 0000 	mov.w	r0, #0
 8008218:	f380 8811 	msr	BASEPRI, r0
 800821c:	bc09      	pop	{r0, r3}
 800821e:	6819      	ldr	r1, [r3, #0]
 8008220:	6808      	ldr	r0, [r1, #0]
 8008222:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008226:	f01e 0f10 	tst.w	lr, #16
 800822a:	bf08      	it	eq
 800822c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8008230:	f380 8809 	msr	PSP, r0
 8008234:	f3bf 8f6f 	isb	sy
 8008238:	4770      	bx	lr
 800823a:	bf00      	nop
 800823c:	f3af 8000 	nop.w

08008240 <pxCurrentTCBConst>:
 8008240:	20005044 	.word	0x20005044
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8008244:	bf00      	nop
 8008246:	bf00      	nop

08008248 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8008248:	b580      	push	{r7, lr}
 800824a:	b082      	sub	sp, #8
 800824c:	af00      	add	r7, sp, #0
	__asm volatile
 800824e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008252:	f383 8811 	msr	BASEPRI, r3
 8008256:	f3bf 8f6f 	isb	sy
 800825a:	f3bf 8f4f 	dsb	sy
 800825e:	607b      	str	r3, [r7, #4]
}
 8008260:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8008262:	f7ff f915 	bl	8007490 <xTaskIncrementTick>
 8008266:	4603      	mov	r3, r0
 8008268:	2b00      	cmp	r3, #0
 800826a:	d003      	beq.n	8008274 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800826c:	4b06      	ldr	r3, [pc, #24]	; (8008288 <SysTick_Handler+0x40>)
 800826e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008272:	601a      	str	r2, [r3, #0]
 8008274:	2300      	movs	r3, #0
 8008276:	603b      	str	r3, [r7, #0]
	__asm volatile
 8008278:	683b      	ldr	r3, [r7, #0]
 800827a:	f383 8811 	msr	BASEPRI, r3
}
 800827e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8008280:	bf00      	nop
 8008282:	3708      	adds	r7, #8
 8008284:	46bd      	mov	sp, r7
 8008286:	bd80      	pop	{r7, pc}
 8008288:	e000ed04 	.word	0xe000ed04

0800828c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800828c:	b480      	push	{r7}
 800828e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8008290:	4b0b      	ldr	r3, [pc, #44]	; (80082c0 <vPortSetupTimerInterrupt+0x34>)
 8008292:	2200      	movs	r2, #0
 8008294:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8008296:	4b0b      	ldr	r3, [pc, #44]	; (80082c4 <vPortSetupTimerInterrupt+0x38>)
 8008298:	2200      	movs	r2, #0
 800829a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800829c:	4b0a      	ldr	r3, [pc, #40]	; (80082c8 <vPortSetupTimerInterrupt+0x3c>)
 800829e:	681b      	ldr	r3, [r3, #0]
 80082a0:	4a0a      	ldr	r2, [pc, #40]	; (80082cc <vPortSetupTimerInterrupt+0x40>)
 80082a2:	fba2 2303 	umull	r2, r3, r2, r3
 80082a6:	099b      	lsrs	r3, r3, #6
 80082a8:	4a09      	ldr	r2, [pc, #36]	; (80082d0 <vPortSetupTimerInterrupt+0x44>)
 80082aa:	3b01      	subs	r3, #1
 80082ac:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80082ae:	4b04      	ldr	r3, [pc, #16]	; (80082c0 <vPortSetupTimerInterrupt+0x34>)
 80082b0:	2207      	movs	r2, #7
 80082b2:	601a      	str	r2, [r3, #0]
}
 80082b4:	bf00      	nop
 80082b6:	46bd      	mov	sp, r7
 80082b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082bc:	4770      	bx	lr
 80082be:	bf00      	nop
 80082c0:	e000e010 	.word	0xe000e010
 80082c4:	e000e018 	.word	0xe000e018
 80082c8:	20000000 	.word	0x20000000
 80082cc:	10624dd3 	.word	0x10624dd3
 80082d0:	e000e014 	.word	0xe000e014

080082d4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80082d4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 80082e4 <vPortEnableVFP+0x10>
 80082d8:	6801      	ldr	r1, [r0, #0]
 80082da:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80082de:	6001      	str	r1, [r0, #0]
 80082e0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80082e2:	bf00      	nop
 80082e4:	e000ed88 	.word	0xe000ed88

080082e8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 80082e8:	b480      	push	{r7}
 80082ea:	b085      	sub	sp, #20
 80082ec:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 80082ee:	f3ef 8305 	mrs	r3, IPSR
 80082f2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80082f4:	68fb      	ldr	r3, [r7, #12]
 80082f6:	2b0f      	cmp	r3, #15
 80082f8:	d914      	bls.n	8008324 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80082fa:	4a17      	ldr	r2, [pc, #92]	; (8008358 <vPortValidateInterruptPriority+0x70>)
 80082fc:	68fb      	ldr	r3, [r7, #12]
 80082fe:	4413      	add	r3, r2
 8008300:	781b      	ldrb	r3, [r3, #0]
 8008302:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8008304:	4b15      	ldr	r3, [pc, #84]	; (800835c <vPortValidateInterruptPriority+0x74>)
 8008306:	781b      	ldrb	r3, [r3, #0]
 8008308:	7afa      	ldrb	r2, [r7, #11]
 800830a:	429a      	cmp	r2, r3
 800830c:	d20a      	bcs.n	8008324 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800830e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008312:	f383 8811 	msr	BASEPRI, r3
 8008316:	f3bf 8f6f 	isb	sy
 800831a:	f3bf 8f4f 	dsb	sy
 800831e:	607b      	str	r3, [r7, #4]
}
 8008320:	bf00      	nop
 8008322:	e7fe      	b.n	8008322 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8008324:	4b0e      	ldr	r3, [pc, #56]	; (8008360 <vPortValidateInterruptPriority+0x78>)
 8008326:	681b      	ldr	r3, [r3, #0]
 8008328:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800832c:	4b0d      	ldr	r3, [pc, #52]	; (8008364 <vPortValidateInterruptPriority+0x7c>)
 800832e:	681b      	ldr	r3, [r3, #0]
 8008330:	429a      	cmp	r2, r3
 8008332:	d90a      	bls.n	800834a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8008334:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008338:	f383 8811 	msr	BASEPRI, r3
 800833c:	f3bf 8f6f 	isb	sy
 8008340:	f3bf 8f4f 	dsb	sy
 8008344:	603b      	str	r3, [r7, #0]
}
 8008346:	bf00      	nop
 8008348:	e7fe      	b.n	8008348 <vPortValidateInterruptPriority+0x60>
	}
 800834a:	bf00      	nop
 800834c:	3714      	adds	r7, #20
 800834e:	46bd      	mov	sp, r7
 8008350:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008354:	4770      	bx	lr
 8008356:	bf00      	nop
 8008358:	e000e3f0 	.word	0xe000e3f0
 800835c:	20005224 	.word	0x20005224
 8008360:	e000ed0c 	.word	0xe000ed0c
 8008364:	20005228 	.word	0x20005228

08008368 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8008368:	b580      	push	{r7, lr}
 800836a:	b08a      	sub	sp, #40	; 0x28
 800836c:	af00      	add	r7, sp, #0
 800836e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8008370:	2300      	movs	r3, #0
 8008372:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8008374:	f7fe ffc0 	bl	80072f8 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8008378:	4b5b      	ldr	r3, [pc, #364]	; (80084e8 <pvPortMalloc+0x180>)
 800837a:	681b      	ldr	r3, [r3, #0]
 800837c:	2b00      	cmp	r3, #0
 800837e:	d101      	bne.n	8008384 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8008380:	f000 f920 	bl	80085c4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8008384:	4b59      	ldr	r3, [pc, #356]	; (80084ec <pvPortMalloc+0x184>)
 8008386:	681a      	ldr	r2, [r3, #0]
 8008388:	687b      	ldr	r3, [r7, #4]
 800838a:	4013      	ands	r3, r2
 800838c:	2b00      	cmp	r3, #0
 800838e:	f040 8093 	bne.w	80084b8 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8008392:	687b      	ldr	r3, [r7, #4]
 8008394:	2b00      	cmp	r3, #0
 8008396:	d01d      	beq.n	80083d4 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8008398:	2208      	movs	r2, #8
 800839a:	687b      	ldr	r3, [r7, #4]
 800839c:	4413      	add	r3, r2
 800839e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80083a0:	687b      	ldr	r3, [r7, #4]
 80083a2:	f003 0307 	and.w	r3, r3, #7
 80083a6:	2b00      	cmp	r3, #0
 80083a8:	d014      	beq.n	80083d4 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80083aa:	687b      	ldr	r3, [r7, #4]
 80083ac:	f023 0307 	bic.w	r3, r3, #7
 80083b0:	3308      	adds	r3, #8
 80083b2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80083b4:	687b      	ldr	r3, [r7, #4]
 80083b6:	f003 0307 	and.w	r3, r3, #7
 80083ba:	2b00      	cmp	r3, #0
 80083bc:	d00a      	beq.n	80083d4 <pvPortMalloc+0x6c>
	__asm volatile
 80083be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80083c2:	f383 8811 	msr	BASEPRI, r3
 80083c6:	f3bf 8f6f 	isb	sy
 80083ca:	f3bf 8f4f 	dsb	sy
 80083ce:	617b      	str	r3, [r7, #20]
}
 80083d0:	bf00      	nop
 80083d2:	e7fe      	b.n	80083d2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80083d4:	687b      	ldr	r3, [r7, #4]
 80083d6:	2b00      	cmp	r3, #0
 80083d8:	d06e      	beq.n	80084b8 <pvPortMalloc+0x150>
 80083da:	4b45      	ldr	r3, [pc, #276]	; (80084f0 <pvPortMalloc+0x188>)
 80083dc:	681b      	ldr	r3, [r3, #0]
 80083de:	687a      	ldr	r2, [r7, #4]
 80083e0:	429a      	cmp	r2, r3
 80083e2:	d869      	bhi.n	80084b8 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80083e4:	4b43      	ldr	r3, [pc, #268]	; (80084f4 <pvPortMalloc+0x18c>)
 80083e6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80083e8:	4b42      	ldr	r3, [pc, #264]	; (80084f4 <pvPortMalloc+0x18c>)
 80083ea:	681b      	ldr	r3, [r3, #0]
 80083ec:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80083ee:	e004      	b.n	80083fa <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 80083f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80083f2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80083f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80083f6:	681b      	ldr	r3, [r3, #0]
 80083f8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80083fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80083fc:	685b      	ldr	r3, [r3, #4]
 80083fe:	687a      	ldr	r2, [r7, #4]
 8008400:	429a      	cmp	r2, r3
 8008402:	d903      	bls.n	800840c <pvPortMalloc+0xa4>
 8008404:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008406:	681b      	ldr	r3, [r3, #0]
 8008408:	2b00      	cmp	r3, #0
 800840a:	d1f1      	bne.n	80083f0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800840c:	4b36      	ldr	r3, [pc, #216]	; (80084e8 <pvPortMalloc+0x180>)
 800840e:	681b      	ldr	r3, [r3, #0]
 8008410:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008412:	429a      	cmp	r2, r3
 8008414:	d050      	beq.n	80084b8 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8008416:	6a3b      	ldr	r3, [r7, #32]
 8008418:	681b      	ldr	r3, [r3, #0]
 800841a:	2208      	movs	r2, #8
 800841c:	4413      	add	r3, r2
 800841e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8008420:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008422:	681a      	ldr	r2, [r3, #0]
 8008424:	6a3b      	ldr	r3, [r7, #32]
 8008426:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8008428:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800842a:	685a      	ldr	r2, [r3, #4]
 800842c:	687b      	ldr	r3, [r7, #4]
 800842e:	1ad2      	subs	r2, r2, r3
 8008430:	2308      	movs	r3, #8
 8008432:	005b      	lsls	r3, r3, #1
 8008434:	429a      	cmp	r2, r3
 8008436:	d91f      	bls.n	8008478 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8008438:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800843a:	687b      	ldr	r3, [r7, #4]
 800843c:	4413      	add	r3, r2
 800843e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8008440:	69bb      	ldr	r3, [r7, #24]
 8008442:	f003 0307 	and.w	r3, r3, #7
 8008446:	2b00      	cmp	r3, #0
 8008448:	d00a      	beq.n	8008460 <pvPortMalloc+0xf8>
	__asm volatile
 800844a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800844e:	f383 8811 	msr	BASEPRI, r3
 8008452:	f3bf 8f6f 	isb	sy
 8008456:	f3bf 8f4f 	dsb	sy
 800845a:	613b      	str	r3, [r7, #16]
}
 800845c:	bf00      	nop
 800845e:	e7fe      	b.n	800845e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8008460:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008462:	685a      	ldr	r2, [r3, #4]
 8008464:	687b      	ldr	r3, [r7, #4]
 8008466:	1ad2      	subs	r2, r2, r3
 8008468:	69bb      	ldr	r3, [r7, #24]
 800846a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800846c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800846e:	687a      	ldr	r2, [r7, #4]
 8008470:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8008472:	69b8      	ldr	r0, [r7, #24]
 8008474:	f000 f908 	bl	8008688 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8008478:	4b1d      	ldr	r3, [pc, #116]	; (80084f0 <pvPortMalloc+0x188>)
 800847a:	681a      	ldr	r2, [r3, #0]
 800847c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800847e:	685b      	ldr	r3, [r3, #4]
 8008480:	1ad3      	subs	r3, r2, r3
 8008482:	4a1b      	ldr	r2, [pc, #108]	; (80084f0 <pvPortMalloc+0x188>)
 8008484:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8008486:	4b1a      	ldr	r3, [pc, #104]	; (80084f0 <pvPortMalloc+0x188>)
 8008488:	681a      	ldr	r2, [r3, #0]
 800848a:	4b1b      	ldr	r3, [pc, #108]	; (80084f8 <pvPortMalloc+0x190>)
 800848c:	681b      	ldr	r3, [r3, #0]
 800848e:	429a      	cmp	r2, r3
 8008490:	d203      	bcs.n	800849a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8008492:	4b17      	ldr	r3, [pc, #92]	; (80084f0 <pvPortMalloc+0x188>)
 8008494:	681b      	ldr	r3, [r3, #0]
 8008496:	4a18      	ldr	r2, [pc, #96]	; (80084f8 <pvPortMalloc+0x190>)
 8008498:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800849a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800849c:	685a      	ldr	r2, [r3, #4]
 800849e:	4b13      	ldr	r3, [pc, #76]	; (80084ec <pvPortMalloc+0x184>)
 80084a0:	681b      	ldr	r3, [r3, #0]
 80084a2:	431a      	orrs	r2, r3
 80084a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80084a6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80084a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80084aa:	2200      	movs	r2, #0
 80084ac:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 80084ae:	4b13      	ldr	r3, [pc, #76]	; (80084fc <pvPortMalloc+0x194>)
 80084b0:	681b      	ldr	r3, [r3, #0]
 80084b2:	3301      	adds	r3, #1
 80084b4:	4a11      	ldr	r2, [pc, #68]	; (80084fc <pvPortMalloc+0x194>)
 80084b6:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80084b8:	f7fe ff2c 	bl	8007314 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80084bc:	69fb      	ldr	r3, [r7, #28]
 80084be:	f003 0307 	and.w	r3, r3, #7
 80084c2:	2b00      	cmp	r3, #0
 80084c4:	d00a      	beq.n	80084dc <pvPortMalloc+0x174>
	__asm volatile
 80084c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80084ca:	f383 8811 	msr	BASEPRI, r3
 80084ce:	f3bf 8f6f 	isb	sy
 80084d2:	f3bf 8f4f 	dsb	sy
 80084d6:	60fb      	str	r3, [r7, #12]
}
 80084d8:	bf00      	nop
 80084da:	e7fe      	b.n	80084da <pvPortMalloc+0x172>
	return pvReturn;
 80084dc:	69fb      	ldr	r3, [r7, #28]
}
 80084de:	4618      	mov	r0, r3
 80084e0:	3728      	adds	r7, #40	; 0x28
 80084e2:	46bd      	mov	sp, r7
 80084e4:	bd80      	pop	{r7, pc}
 80084e6:	bf00      	nop
 80084e8:	20008e34 	.word	0x20008e34
 80084ec:	20008e48 	.word	0x20008e48
 80084f0:	20008e38 	.word	0x20008e38
 80084f4:	20008e2c 	.word	0x20008e2c
 80084f8:	20008e3c 	.word	0x20008e3c
 80084fc:	20008e40 	.word	0x20008e40

08008500 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8008500:	b580      	push	{r7, lr}
 8008502:	b086      	sub	sp, #24
 8008504:	af00      	add	r7, sp, #0
 8008506:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8008508:	687b      	ldr	r3, [r7, #4]
 800850a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800850c:	687b      	ldr	r3, [r7, #4]
 800850e:	2b00      	cmp	r3, #0
 8008510:	d04d      	beq.n	80085ae <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8008512:	2308      	movs	r3, #8
 8008514:	425b      	negs	r3, r3
 8008516:	697a      	ldr	r2, [r7, #20]
 8008518:	4413      	add	r3, r2
 800851a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800851c:	697b      	ldr	r3, [r7, #20]
 800851e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8008520:	693b      	ldr	r3, [r7, #16]
 8008522:	685a      	ldr	r2, [r3, #4]
 8008524:	4b24      	ldr	r3, [pc, #144]	; (80085b8 <vPortFree+0xb8>)
 8008526:	681b      	ldr	r3, [r3, #0]
 8008528:	4013      	ands	r3, r2
 800852a:	2b00      	cmp	r3, #0
 800852c:	d10a      	bne.n	8008544 <vPortFree+0x44>
	__asm volatile
 800852e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008532:	f383 8811 	msr	BASEPRI, r3
 8008536:	f3bf 8f6f 	isb	sy
 800853a:	f3bf 8f4f 	dsb	sy
 800853e:	60fb      	str	r3, [r7, #12]
}
 8008540:	bf00      	nop
 8008542:	e7fe      	b.n	8008542 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8008544:	693b      	ldr	r3, [r7, #16]
 8008546:	681b      	ldr	r3, [r3, #0]
 8008548:	2b00      	cmp	r3, #0
 800854a:	d00a      	beq.n	8008562 <vPortFree+0x62>
	__asm volatile
 800854c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008550:	f383 8811 	msr	BASEPRI, r3
 8008554:	f3bf 8f6f 	isb	sy
 8008558:	f3bf 8f4f 	dsb	sy
 800855c:	60bb      	str	r3, [r7, #8]
}
 800855e:	bf00      	nop
 8008560:	e7fe      	b.n	8008560 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8008562:	693b      	ldr	r3, [r7, #16]
 8008564:	685a      	ldr	r2, [r3, #4]
 8008566:	4b14      	ldr	r3, [pc, #80]	; (80085b8 <vPortFree+0xb8>)
 8008568:	681b      	ldr	r3, [r3, #0]
 800856a:	4013      	ands	r3, r2
 800856c:	2b00      	cmp	r3, #0
 800856e:	d01e      	beq.n	80085ae <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8008570:	693b      	ldr	r3, [r7, #16]
 8008572:	681b      	ldr	r3, [r3, #0]
 8008574:	2b00      	cmp	r3, #0
 8008576:	d11a      	bne.n	80085ae <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8008578:	693b      	ldr	r3, [r7, #16]
 800857a:	685a      	ldr	r2, [r3, #4]
 800857c:	4b0e      	ldr	r3, [pc, #56]	; (80085b8 <vPortFree+0xb8>)
 800857e:	681b      	ldr	r3, [r3, #0]
 8008580:	43db      	mvns	r3, r3
 8008582:	401a      	ands	r2, r3
 8008584:	693b      	ldr	r3, [r7, #16]
 8008586:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8008588:	f7fe feb6 	bl	80072f8 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800858c:	693b      	ldr	r3, [r7, #16]
 800858e:	685a      	ldr	r2, [r3, #4]
 8008590:	4b0a      	ldr	r3, [pc, #40]	; (80085bc <vPortFree+0xbc>)
 8008592:	681b      	ldr	r3, [r3, #0]
 8008594:	4413      	add	r3, r2
 8008596:	4a09      	ldr	r2, [pc, #36]	; (80085bc <vPortFree+0xbc>)
 8008598:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800859a:	6938      	ldr	r0, [r7, #16]
 800859c:	f000 f874 	bl	8008688 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 80085a0:	4b07      	ldr	r3, [pc, #28]	; (80085c0 <vPortFree+0xc0>)
 80085a2:	681b      	ldr	r3, [r3, #0]
 80085a4:	3301      	adds	r3, #1
 80085a6:	4a06      	ldr	r2, [pc, #24]	; (80085c0 <vPortFree+0xc0>)
 80085a8:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 80085aa:	f7fe feb3 	bl	8007314 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80085ae:	bf00      	nop
 80085b0:	3718      	adds	r7, #24
 80085b2:	46bd      	mov	sp, r7
 80085b4:	bd80      	pop	{r7, pc}
 80085b6:	bf00      	nop
 80085b8:	20008e48 	.word	0x20008e48
 80085bc:	20008e38 	.word	0x20008e38
 80085c0:	20008e44 	.word	0x20008e44

080085c4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80085c4:	b480      	push	{r7}
 80085c6:	b085      	sub	sp, #20
 80085c8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80085ca:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 80085ce:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80085d0:	4b27      	ldr	r3, [pc, #156]	; (8008670 <prvHeapInit+0xac>)
 80085d2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80085d4:	68fb      	ldr	r3, [r7, #12]
 80085d6:	f003 0307 	and.w	r3, r3, #7
 80085da:	2b00      	cmp	r3, #0
 80085dc:	d00c      	beq.n	80085f8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80085de:	68fb      	ldr	r3, [r7, #12]
 80085e0:	3307      	adds	r3, #7
 80085e2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80085e4:	68fb      	ldr	r3, [r7, #12]
 80085e6:	f023 0307 	bic.w	r3, r3, #7
 80085ea:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80085ec:	68ba      	ldr	r2, [r7, #8]
 80085ee:	68fb      	ldr	r3, [r7, #12]
 80085f0:	1ad3      	subs	r3, r2, r3
 80085f2:	4a1f      	ldr	r2, [pc, #124]	; (8008670 <prvHeapInit+0xac>)
 80085f4:	4413      	add	r3, r2
 80085f6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80085f8:	68fb      	ldr	r3, [r7, #12]
 80085fa:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80085fc:	4a1d      	ldr	r2, [pc, #116]	; (8008674 <prvHeapInit+0xb0>)
 80085fe:	687b      	ldr	r3, [r7, #4]
 8008600:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8008602:	4b1c      	ldr	r3, [pc, #112]	; (8008674 <prvHeapInit+0xb0>)
 8008604:	2200      	movs	r2, #0
 8008606:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8008608:	687b      	ldr	r3, [r7, #4]
 800860a:	68ba      	ldr	r2, [r7, #8]
 800860c:	4413      	add	r3, r2
 800860e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8008610:	2208      	movs	r2, #8
 8008612:	68fb      	ldr	r3, [r7, #12]
 8008614:	1a9b      	subs	r3, r3, r2
 8008616:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8008618:	68fb      	ldr	r3, [r7, #12]
 800861a:	f023 0307 	bic.w	r3, r3, #7
 800861e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8008620:	68fb      	ldr	r3, [r7, #12]
 8008622:	4a15      	ldr	r2, [pc, #84]	; (8008678 <prvHeapInit+0xb4>)
 8008624:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8008626:	4b14      	ldr	r3, [pc, #80]	; (8008678 <prvHeapInit+0xb4>)
 8008628:	681b      	ldr	r3, [r3, #0]
 800862a:	2200      	movs	r2, #0
 800862c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800862e:	4b12      	ldr	r3, [pc, #72]	; (8008678 <prvHeapInit+0xb4>)
 8008630:	681b      	ldr	r3, [r3, #0]
 8008632:	2200      	movs	r2, #0
 8008634:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8008636:	687b      	ldr	r3, [r7, #4]
 8008638:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800863a:	683b      	ldr	r3, [r7, #0]
 800863c:	68fa      	ldr	r2, [r7, #12]
 800863e:	1ad2      	subs	r2, r2, r3
 8008640:	683b      	ldr	r3, [r7, #0]
 8008642:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8008644:	4b0c      	ldr	r3, [pc, #48]	; (8008678 <prvHeapInit+0xb4>)
 8008646:	681a      	ldr	r2, [r3, #0]
 8008648:	683b      	ldr	r3, [r7, #0]
 800864a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800864c:	683b      	ldr	r3, [r7, #0]
 800864e:	685b      	ldr	r3, [r3, #4]
 8008650:	4a0a      	ldr	r2, [pc, #40]	; (800867c <prvHeapInit+0xb8>)
 8008652:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8008654:	683b      	ldr	r3, [r7, #0]
 8008656:	685b      	ldr	r3, [r3, #4]
 8008658:	4a09      	ldr	r2, [pc, #36]	; (8008680 <prvHeapInit+0xbc>)
 800865a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800865c:	4b09      	ldr	r3, [pc, #36]	; (8008684 <prvHeapInit+0xc0>)
 800865e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8008662:	601a      	str	r2, [r3, #0]
}
 8008664:	bf00      	nop
 8008666:	3714      	adds	r7, #20
 8008668:	46bd      	mov	sp, r7
 800866a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800866e:	4770      	bx	lr
 8008670:	2000522c 	.word	0x2000522c
 8008674:	20008e2c 	.word	0x20008e2c
 8008678:	20008e34 	.word	0x20008e34
 800867c:	20008e3c 	.word	0x20008e3c
 8008680:	20008e38 	.word	0x20008e38
 8008684:	20008e48 	.word	0x20008e48

08008688 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8008688:	b480      	push	{r7}
 800868a:	b085      	sub	sp, #20
 800868c:	af00      	add	r7, sp, #0
 800868e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8008690:	4b28      	ldr	r3, [pc, #160]	; (8008734 <prvInsertBlockIntoFreeList+0xac>)
 8008692:	60fb      	str	r3, [r7, #12]
 8008694:	e002      	b.n	800869c <prvInsertBlockIntoFreeList+0x14>
 8008696:	68fb      	ldr	r3, [r7, #12]
 8008698:	681b      	ldr	r3, [r3, #0]
 800869a:	60fb      	str	r3, [r7, #12]
 800869c:	68fb      	ldr	r3, [r7, #12]
 800869e:	681b      	ldr	r3, [r3, #0]
 80086a0:	687a      	ldr	r2, [r7, #4]
 80086a2:	429a      	cmp	r2, r3
 80086a4:	d8f7      	bhi.n	8008696 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80086a6:	68fb      	ldr	r3, [r7, #12]
 80086a8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80086aa:	68fb      	ldr	r3, [r7, #12]
 80086ac:	685b      	ldr	r3, [r3, #4]
 80086ae:	68ba      	ldr	r2, [r7, #8]
 80086b0:	4413      	add	r3, r2
 80086b2:	687a      	ldr	r2, [r7, #4]
 80086b4:	429a      	cmp	r2, r3
 80086b6:	d108      	bne.n	80086ca <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80086b8:	68fb      	ldr	r3, [r7, #12]
 80086ba:	685a      	ldr	r2, [r3, #4]
 80086bc:	687b      	ldr	r3, [r7, #4]
 80086be:	685b      	ldr	r3, [r3, #4]
 80086c0:	441a      	add	r2, r3
 80086c2:	68fb      	ldr	r3, [r7, #12]
 80086c4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80086c6:	68fb      	ldr	r3, [r7, #12]
 80086c8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80086ca:	687b      	ldr	r3, [r7, #4]
 80086cc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80086ce:	687b      	ldr	r3, [r7, #4]
 80086d0:	685b      	ldr	r3, [r3, #4]
 80086d2:	68ba      	ldr	r2, [r7, #8]
 80086d4:	441a      	add	r2, r3
 80086d6:	68fb      	ldr	r3, [r7, #12]
 80086d8:	681b      	ldr	r3, [r3, #0]
 80086da:	429a      	cmp	r2, r3
 80086dc:	d118      	bne.n	8008710 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80086de:	68fb      	ldr	r3, [r7, #12]
 80086e0:	681a      	ldr	r2, [r3, #0]
 80086e2:	4b15      	ldr	r3, [pc, #84]	; (8008738 <prvInsertBlockIntoFreeList+0xb0>)
 80086e4:	681b      	ldr	r3, [r3, #0]
 80086e6:	429a      	cmp	r2, r3
 80086e8:	d00d      	beq.n	8008706 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80086ea:	687b      	ldr	r3, [r7, #4]
 80086ec:	685a      	ldr	r2, [r3, #4]
 80086ee:	68fb      	ldr	r3, [r7, #12]
 80086f0:	681b      	ldr	r3, [r3, #0]
 80086f2:	685b      	ldr	r3, [r3, #4]
 80086f4:	441a      	add	r2, r3
 80086f6:	687b      	ldr	r3, [r7, #4]
 80086f8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80086fa:	68fb      	ldr	r3, [r7, #12]
 80086fc:	681b      	ldr	r3, [r3, #0]
 80086fe:	681a      	ldr	r2, [r3, #0]
 8008700:	687b      	ldr	r3, [r7, #4]
 8008702:	601a      	str	r2, [r3, #0]
 8008704:	e008      	b.n	8008718 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8008706:	4b0c      	ldr	r3, [pc, #48]	; (8008738 <prvInsertBlockIntoFreeList+0xb0>)
 8008708:	681a      	ldr	r2, [r3, #0]
 800870a:	687b      	ldr	r3, [r7, #4]
 800870c:	601a      	str	r2, [r3, #0]
 800870e:	e003      	b.n	8008718 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8008710:	68fb      	ldr	r3, [r7, #12]
 8008712:	681a      	ldr	r2, [r3, #0]
 8008714:	687b      	ldr	r3, [r7, #4]
 8008716:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8008718:	68fa      	ldr	r2, [r7, #12]
 800871a:	687b      	ldr	r3, [r7, #4]
 800871c:	429a      	cmp	r2, r3
 800871e:	d002      	beq.n	8008726 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8008720:	68fb      	ldr	r3, [r7, #12]
 8008722:	687a      	ldr	r2, [r7, #4]
 8008724:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008726:	bf00      	nop
 8008728:	3714      	adds	r7, #20
 800872a:	46bd      	mov	sp, r7
 800872c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008730:	4770      	bx	lr
 8008732:	bf00      	nop
 8008734:	20008e2c 	.word	0x20008e2c
 8008738:	20008e34 	.word	0x20008e34

0800873c <tcpip_timeouts_mbox_fetch>:
 * @param mbox the mbox to fetch the message from
 * @param msg the place to store the message
 */
static void
tcpip_timeouts_mbox_fetch(sys_mbox_t *mbox, void **msg)
{
 800873c:	b580      	push	{r7, lr}
 800873e:	b084      	sub	sp, #16
 8008740:	af00      	add	r7, sp, #0
 8008742:	6078      	str	r0, [r7, #4]
 8008744:	6039      	str	r1, [r7, #0]
  u32_t sleeptime, res;

again:
  LWIP_ASSERT_CORE_LOCKED();

  sleeptime = sys_timeouts_sleeptime();
 8008746:	f007 fc77 	bl	8010038 <sys_timeouts_sleeptime>
 800874a:	60f8      	str	r0, [r7, #12]
  if (sleeptime == SYS_TIMEOUTS_SLEEPTIME_INFINITE) {
 800874c:	68fb      	ldr	r3, [r7, #12]
 800874e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008752:	d10b      	bne.n	800876c <tcpip_timeouts_mbox_fetch+0x30>
    UNLOCK_TCPIP_CORE();
 8008754:	4813      	ldr	r0, [pc, #76]	; (80087a4 <tcpip_timeouts_mbox_fetch+0x68>)
 8008756:	f00a fede 	bl	8013516 <sys_mutex_unlock>
    sys_arch_mbox_fetch(mbox, msg, 0);
 800875a:	2200      	movs	r2, #0
 800875c:	6839      	ldr	r1, [r7, #0]
 800875e:	6878      	ldr	r0, [r7, #4]
 8008760:	f00a fe30 	bl	80133c4 <sys_arch_mbox_fetch>
    LOCK_TCPIP_CORE();
 8008764:	480f      	ldr	r0, [pc, #60]	; (80087a4 <tcpip_timeouts_mbox_fetch+0x68>)
 8008766:	f00a fec7 	bl	80134f8 <sys_mutex_lock>
    return;
 800876a:	e018      	b.n	800879e <tcpip_timeouts_mbox_fetch+0x62>
  } else if (sleeptime == 0) {
 800876c:	68fb      	ldr	r3, [r7, #12]
 800876e:	2b00      	cmp	r3, #0
 8008770:	d102      	bne.n	8008778 <tcpip_timeouts_mbox_fetch+0x3c>
    sys_check_timeouts();
 8008772:	f007 fc27 	bl	800ffc4 <sys_check_timeouts>
    /* We try again to fetch a message from the mbox. */
    goto again;
 8008776:	e7e6      	b.n	8008746 <tcpip_timeouts_mbox_fetch+0xa>
  }

  UNLOCK_TCPIP_CORE();
 8008778:	480a      	ldr	r0, [pc, #40]	; (80087a4 <tcpip_timeouts_mbox_fetch+0x68>)
 800877a:	f00a fecc 	bl	8013516 <sys_mutex_unlock>
  res = sys_arch_mbox_fetch(mbox, msg, sleeptime);
 800877e:	68fa      	ldr	r2, [r7, #12]
 8008780:	6839      	ldr	r1, [r7, #0]
 8008782:	6878      	ldr	r0, [r7, #4]
 8008784:	f00a fe1e 	bl	80133c4 <sys_arch_mbox_fetch>
 8008788:	60b8      	str	r0, [r7, #8]
  LOCK_TCPIP_CORE();
 800878a:	4806      	ldr	r0, [pc, #24]	; (80087a4 <tcpip_timeouts_mbox_fetch+0x68>)
 800878c:	f00a feb4 	bl	80134f8 <sys_mutex_lock>
  if (res == SYS_ARCH_TIMEOUT) {
 8008790:	68bb      	ldr	r3, [r7, #8]
 8008792:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008796:	d102      	bne.n	800879e <tcpip_timeouts_mbox_fetch+0x62>
    /* If a SYS_ARCH_TIMEOUT value is returned, a timeout occurred
       before a message could be fetched. */
    sys_check_timeouts();
 8008798:	f007 fc14 	bl	800ffc4 <sys_check_timeouts>
    /* We try again to fetch a message from the mbox. */
    goto again;
 800879c:	e7d3      	b.n	8008746 <tcpip_timeouts_mbox_fetch+0xa>
  }
}
 800879e:	3710      	adds	r7, #16
 80087a0:	46bd      	mov	sp, r7
 80087a2:	bd80      	pop	{r7, pc}
 80087a4:	20008e58 	.word	0x20008e58

080087a8 <tcpip_thread>:
 *
 * @param arg unused argument
 */
static void
tcpip_thread(void *arg)
{
 80087a8:	b580      	push	{r7, lr}
 80087aa:	b084      	sub	sp, #16
 80087ac:	af00      	add	r7, sp, #0
 80087ae:	6078      	str	r0, [r7, #4]
  struct tcpip_msg *msg;
  LWIP_UNUSED_ARG(arg);

  LWIP_MARK_TCPIP_THREAD();

  LOCK_TCPIP_CORE();
 80087b0:	4810      	ldr	r0, [pc, #64]	; (80087f4 <tcpip_thread+0x4c>)
 80087b2:	f00a fea1 	bl	80134f8 <sys_mutex_lock>
  if (tcpip_init_done != NULL) {
 80087b6:	4b10      	ldr	r3, [pc, #64]	; (80087f8 <tcpip_thread+0x50>)
 80087b8:	681b      	ldr	r3, [r3, #0]
 80087ba:	2b00      	cmp	r3, #0
 80087bc:	d005      	beq.n	80087ca <tcpip_thread+0x22>
    tcpip_init_done(tcpip_init_done_arg);
 80087be:	4b0e      	ldr	r3, [pc, #56]	; (80087f8 <tcpip_thread+0x50>)
 80087c0:	681b      	ldr	r3, [r3, #0]
 80087c2:	4a0e      	ldr	r2, [pc, #56]	; (80087fc <tcpip_thread+0x54>)
 80087c4:	6812      	ldr	r2, [r2, #0]
 80087c6:	4610      	mov	r0, r2
 80087c8:	4798      	blx	r3
  }

  while (1) {                          /* MAIN Loop */
    LWIP_TCPIP_THREAD_ALIVE();
    /* wait for a message, timeouts are processed while waiting */
    TCPIP_MBOX_FETCH(&tcpip_mbox, (void **)&msg);
 80087ca:	f107 030c 	add.w	r3, r7, #12
 80087ce:	4619      	mov	r1, r3
 80087d0:	480b      	ldr	r0, [pc, #44]	; (8008800 <tcpip_thread+0x58>)
 80087d2:	f7ff ffb3 	bl	800873c <tcpip_timeouts_mbox_fetch>
    if (msg == NULL) {
 80087d6:	68fb      	ldr	r3, [r7, #12]
 80087d8:	2b00      	cmp	r3, #0
 80087da:	d106      	bne.n	80087ea <tcpip_thread+0x42>
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: invalid message: NULL\n"));
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 80087dc:	4b09      	ldr	r3, [pc, #36]	; (8008804 <tcpip_thread+0x5c>)
 80087de:	2291      	movs	r2, #145	; 0x91
 80087e0:	4909      	ldr	r1, [pc, #36]	; (8008808 <tcpip_thread+0x60>)
 80087e2:	480a      	ldr	r0, [pc, #40]	; (800880c <tcpip_thread+0x64>)
 80087e4:	f00b f8c0 	bl	8013968 <iprintf>
      continue;
 80087e8:	e003      	b.n	80087f2 <tcpip_thread+0x4a>
    }
    tcpip_thread_handle_msg(msg);
 80087ea:	68fb      	ldr	r3, [r7, #12]
 80087ec:	4618      	mov	r0, r3
 80087ee:	f000 f80f 	bl	8008810 <tcpip_thread_handle_msg>
    TCPIP_MBOX_FETCH(&tcpip_mbox, (void **)&msg);
 80087f2:	e7ea      	b.n	80087ca <tcpip_thread+0x22>
 80087f4:	20008e58 	.word	0x20008e58
 80087f8:	20008e4c 	.word	0x20008e4c
 80087fc:	20008e50 	.word	0x20008e50
 8008800:	20008e54 	.word	0x20008e54
 8008804:	080148cc 	.word	0x080148cc
 8008808:	080148fc 	.word	0x080148fc
 800880c:	0801491c 	.word	0x0801491c

08008810 <tcpip_thread_handle_msg>:
/* Handle a single tcpip_msg
 * This is in its own function for access by tests only.
 */
static void
tcpip_thread_handle_msg(struct tcpip_msg *msg)
{
 8008810:	b580      	push	{r7, lr}
 8008812:	b082      	sub	sp, #8
 8008814:	af00      	add	r7, sp, #0
 8008816:	6078      	str	r0, [r7, #4]
  switch (msg->type) {
 8008818:	687b      	ldr	r3, [r7, #4]
 800881a:	781b      	ldrb	r3, [r3, #0]
 800881c:	2b02      	cmp	r3, #2
 800881e:	d026      	beq.n	800886e <tcpip_thread_handle_msg+0x5e>
 8008820:	2b02      	cmp	r3, #2
 8008822:	dc2b      	bgt.n	800887c <tcpip_thread_handle_msg+0x6c>
 8008824:	2b00      	cmp	r3, #0
 8008826:	d002      	beq.n	800882e <tcpip_thread_handle_msg+0x1e>
 8008828:	2b01      	cmp	r3, #1
 800882a:	d015      	beq.n	8008858 <tcpip_thread_handle_msg+0x48>
 800882c:	e026      	b.n	800887c <tcpip_thread_handle_msg+0x6c>
#endif /* !LWIP_TCPIP_CORE_LOCKING */

#if !LWIP_TCPIP_CORE_LOCKING_INPUT
    case TCPIP_MSG_INPKT:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: PACKET %p\n", (void *)msg));
      if (msg->msg.inp.input_fn(msg->msg.inp.p, msg->msg.inp.netif) != ERR_OK) {
 800882e:	687b      	ldr	r3, [r7, #4]
 8008830:	68db      	ldr	r3, [r3, #12]
 8008832:	687a      	ldr	r2, [r7, #4]
 8008834:	6850      	ldr	r0, [r2, #4]
 8008836:	687a      	ldr	r2, [r7, #4]
 8008838:	6892      	ldr	r2, [r2, #8]
 800883a:	4611      	mov	r1, r2
 800883c:	4798      	blx	r3
 800883e:	4603      	mov	r3, r0
 8008840:	2b00      	cmp	r3, #0
 8008842:	d004      	beq.n	800884e <tcpip_thread_handle_msg+0x3e>
        pbuf_free(msg->msg.inp.p);
 8008844:	687b      	ldr	r3, [r7, #4]
 8008846:	685b      	ldr	r3, [r3, #4]
 8008848:	4618      	mov	r0, r3
 800884a:	f001 fddb 	bl	800a404 <pbuf_free>
      }
      memp_free(MEMP_TCPIP_MSG_INPKT, msg);
 800884e:	6879      	ldr	r1, [r7, #4]
 8008850:	2009      	movs	r0, #9
 8008852:	f000 ff33 	bl	80096bc <memp_free>
      break;
 8008856:	e018      	b.n	800888a <tcpip_thread_handle_msg+0x7a>
      break;
#endif /* LWIP_TCPIP_TIMEOUT && LWIP_TIMERS */

    case TCPIP_MSG_CALLBACK:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: CALLBACK %p\n", (void *)msg));
      msg->msg.cb.function(msg->msg.cb.ctx);
 8008858:	687b      	ldr	r3, [r7, #4]
 800885a:	685b      	ldr	r3, [r3, #4]
 800885c:	687a      	ldr	r2, [r7, #4]
 800885e:	6892      	ldr	r2, [r2, #8]
 8008860:	4610      	mov	r0, r2
 8008862:	4798      	blx	r3
      memp_free(MEMP_TCPIP_MSG_API, msg);
 8008864:	6879      	ldr	r1, [r7, #4]
 8008866:	2008      	movs	r0, #8
 8008868:	f000 ff28 	bl	80096bc <memp_free>
      break;
 800886c:	e00d      	b.n	800888a <tcpip_thread_handle_msg+0x7a>

    case TCPIP_MSG_CALLBACK_STATIC:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: CALLBACK_STATIC %p\n", (void *)msg));
      msg->msg.cb.function(msg->msg.cb.ctx);
 800886e:	687b      	ldr	r3, [r7, #4]
 8008870:	685b      	ldr	r3, [r3, #4]
 8008872:	687a      	ldr	r2, [r7, #4]
 8008874:	6892      	ldr	r2, [r2, #8]
 8008876:	4610      	mov	r0, r2
 8008878:	4798      	blx	r3
      break;
 800887a:	e006      	b.n	800888a <tcpip_thread_handle_msg+0x7a>

    default:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: invalid message: %d\n", msg->type));
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 800887c:	4b05      	ldr	r3, [pc, #20]	; (8008894 <tcpip_thread_handle_msg+0x84>)
 800887e:	22cf      	movs	r2, #207	; 0xcf
 8008880:	4905      	ldr	r1, [pc, #20]	; (8008898 <tcpip_thread_handle_msg+0x88>)
 8008882:	4806      	ldr	r0, [pc, #24]	; (800889c <tcpip_thread_handle_msg+0x8c>)
 8008884:	f00b f870 	bl	8013968 <iprintf>
      break;
 8008888:	bf00      	nop
  }
}
 800888a:	bf00      	nop
 800888c:	3708      	adds	r7, #8
 800888e:	46bd      	mov	sp, r7
 8008890:	bd80      	pop	{r7, pc}
 8008892:	bf00      	nop
 8008894:	080148cc 	.word	0x080148cc
 8008898:	080148fc 	.word	0x080148fc
 800889c:	0801491c 	.word	0x0801491c

080088a0 <tcpip_inpkt>:
 * @param inp the network interface on which the packet was received
 * @param input_fn input function to call
 */
err_t
tcpip_inpkt(struct pbuf *p, struct netif *inp, netif_input_fn input_fn)
{
 80088a0:	b580      	push	{r7, lr}
 80088a2:	b086      	sub	sp, #24
 80088a4:	af00      	add	r7, sp, #0
 80088a6:	60f8      	str	r0, [r7, #12]
 80088a8:	60b9      	str	r1, [r7, #8]
 80088aa:	607a      	str	r2, [r7, #4]
  UNLOCK_TCPIP_CORE();
  return ret;
#else /* LWIP_TCPIP_CORE_LOCKING_INPUT */
  struct tcpip_msg *msg;

  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(tcpip_mbox));
 80088ac:	481a      	ldr	r0, [pc, #104]	; (8008918 <tcpip_inpkt+0x78>)
 80088ae:	f00a fdc8 	bl	8013442 <sys_mbox_valid>
 80088b2:	4603      	mov	r3, r0
 80088b4:	2b00      	cmp	r3, #0
 80088b6:	d105      	bne.n	80088c4 <tcpip_inpkt+0x24>
 80088b8:	4b18      	ldr	r3, [pc, #96]	; (800891c <tcpip_inpkt+0x7c>)
 80088ba:	22fc      	movs	r2, #252	; 0xfc
 80088bc:	4918      	ldr	r1, [pc, #96]	; (8008920 <tcpip_inpkt+0x80>)
 80088be:	4819      	ldr	r0, [pc, #100]	; (8008924 <tcpip_inpkt+0x84>)
 80088c0:	f00b f852 	bl	8013968 <iprintf>

  msg = (struct tcpip_msg *)memp_malloc(MEMP_TCPIP_MSG_INPKT);
 80088c4:	2009      	movs	r0, #9
 80088c6:	f000 fe7d 	bl	80095c4 <memp_malloc>
 80088ca:	6178      	str	r0, [r7, #20]
  if (msg == NULL) {
 80088cc:	697b      	ldr	r3, [r7, #20]
 80088ce:	2b00      	cmp	r3, #0
 80088d0:	d102      	bne.n	80088d8 <tcpip_inpkt+0x38>
    return ERR_MEM;
 80088d2:	f04f 33ff 	mov.w	r3, #4294967295
 80088d6:	e01a      	b.n	800890e <tcpip_inpkt+0x6e>
  }

  msg->type = TCPIP_MSG_INPKT;
 80088d8:	697b      	ldr	r3, [r7, #20]
 80088da:	2200      	movs	r2, #0
 80088dc:	701a      	strb	r2, [r3, #0]
  msg->msg.inp.p = p;
 80088de:	697b      	ldr	r3, [r7, #20]
 80088e0:	68fa      	ldr	r2, [r7, #12]
 80088e2:	605a      	str	r2, [r3, #4]
  msg->msg.inp.netif = inp;
 80088e4:	697b      	ldr	r3, [r7, #20]
 80088e6:	68ba      	ldr	r2, [r7, #8]
 80088e8:	609a      	str	r2, [r3, #8]
  msg->msg.inp.input_fn = input_fn;
 80088ea:	697b      	ldr	r3, [r7, #20]
 80088ec:	687a      	ldr	r2, [r7, #4]
 80088ee:	60da      	str	r2, [r3, #12]
  if (sys_mbox_trypost(&tcpip_mbox, msg) != ERR_OK) {
 80088f0:	6979      	ldr	r1, [r7, #20]
 80088f2:	4809      	ldr	r0, [pc, #36]	; (8008918 <tcpip_inpkt+0x78>)
 80088f4:	f00a fd42 	bl	801337c <sys_mbox_trypost>
 80088f8:	4603      	mov	r3, r0
 80088fa:	2b00      	cmp	r3, #0
 80088fc:	d006      	beq.n	800890c <tcpip_inpkt+0x6c>
    memp_free(MEMP_TCPIP_MSG_INPKT, msg);
 80088fe:	6979      	ldr	r1, [r7, #20]
 8008900:	2009      	movs	r0, #9
 8008902:	f000 fedb 	bl	80096bc <memp_free>
    return ERR_MEM;
 8008906:	f04f 33ff 	mov.w	r3, #4294967295
 800890a:	e000      	b.n	800890e <tcpip_inpkt+0x6e>
  }
  return ERR_OK;
 800890c:	2300      	movs	r3, #0
#endif /* LWIP_TCPIP_CORE_LOCKING_INPUT */
}
 800890e:	4618      	mov	r0, r3
 8008910:	3718      	adds	r7, #24
 8008912:	46bd      	mov	sp, r7
 8008914:	bd80      	pop	{r7, pc}
 8008916:	bf00      	nop
 8008918:	20008e54 	.word	0x20008e54
 800891c:	080148cc 	.word	0x080148cc
 8008920:	08014944 	.word	0x08014944
 8008924:	0801491c 	.word	0x0801491c

08008928 <tcpip_input>:
 *          NETIF_FLAG_ETHERNET flags)
 * @param inp the network interface on which the packet was received
 */
err_t
tcpip_input(struct pbuf *p, struct netif *inp)
{
 8008928:	b580      	push	{r7, lr}
 800892a:	b082      	sub	sp, #8
 800892c:	af00      	add	r7, sp, #0
 800892e:	6078      	str	r0, [r7, #4]
 8008930:	6039      	str	r1, [r7, #0]
#if LWIP_ETHERNET
  if (inp->flags & (NETIF_FLAG_ETHARP | NETIF_FLAG_ETHERNET)) {
 8008932:	683b      	ldr	r3, [r7, #0]
 8008934:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8008938:	f003 0318 	and.w	r3, r3, #24
 800893c:	2b00      	cmp	r3, #0
 800893e:	d006      	beq.n	800894e <tcpip_input+0x26>
    return tcpip_inpkt(p, inp, ethernet_input);
 8008940:	4a08      	ldr	r2, [pc, #32]	; (8008964 <tcpip_input+0x3c>)
 8008942:	6839      	ldr	r1, [r7, #0]
 8008944:	6878      	ldr	r0, [r7, #4]
 8008946:	f7ff ffab 	bl	80088a0 <tcpip_inpkt>
 800894a:	4603      	mov	r3, r0
 800894c:	e005      	b.n	800895a <tcpip_input+0x32>
  } else
#endif /* LWIP_ETHERNET */
    return tcpip_inpkt(p, inp, ip_input);
 800894e:	4a06      	ldr	r2, [pc, #24]	; (8008968 <tcpip_input+0x40>)
 8008950:	6839      	ldr	r1, [r7, #0]
 8008952:	6878      	ldr	r0, [r7, #4]
 8008954:	f7ff ffa4 	bl	80088a0 <tcpip_inpkt>
 8008958:	4603      	mov	r3, r0
}
 800895a:	4618      	mov	r0, r3
 800895c:	3708      	adds	r7, #8
 800895e:	46bd      	mov	sp, r7
 8008960:	bd80      	pop	{r7, pc}
 8008962:	bf00      	nop
 8008964:	08013105 	.word	0x08013105
 8008968:	08011ee1 	.word	0x08011ee1

0800896c <tcpip_try_callback>:
 *
 * @see tcpip_callback
 */
err_t
tcpip_try_callback(tcpip_callback_fn function, void *ctx)
{
 800896c:	b580      	push	{r7, lr}
 800896e:	b084      	sub	sp, #16
 8008970:	af00      	add	r7, sp, #0
 8008972:	6078      	str	r0, [r7, #4]
 8008974:	6039      	str	r1, [r7, #0]
  struct tcpip_msg *msg;

  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(tcpip_mbox));
 8008976:	4819      	ldr	r0, [pc, #100]	; (80089dc <tcpip_try_callback+0x70>)
 8008978:	f00a fd63 	bl	8013442 <sys_mbox_valid>
 800897c:	4603      	mov	r3, r0
 800897e:	2b00      	cmp	r3, #0
 8008980:	d106      	bne.n	8008990 <tcpip_try_callback+0x24>
 8008982:	4b17      	ldr	r3, [pc, #92]	; (80089e0 <tcpip_try_callback+0x74>)
 8008984:	f240 125d 	movw	r2, #349	; 0x15d
 8008988:	4916      	ldr	r1, [pc, #88]	; (80089e4 <tcpip_try_callback+0x78>)
 800898a:	4817      	ldr	r0, [pc, #92]	; (80089e8 <tcpip_try_callback+0x7c>)
 800898c:	f00a ffec 	bl	8013968 <iprintf>

  msg = (struct tcpip_msg *)memp_malloc(MEMP_TCPIP_MSG_API);
 8008990:	2008      	movs	r0, #8
 8008992:	f000 fe17 	bl	80095c4 <memp_malloc>
 8008996:	60f8      	str	r0, [r7, #12]
  if (msg == NULL) {
 8008998:	68fb      	ldr	r3, [r7, #12]
 800899a:	2b00      	cmp	r3, #0
 800899c:	d102      	bne.n	80089a4 <tcpip_try_callback+0x38>
    return ERR_MEM;
 800899e:	f04f 33ff 	mov.w	r3, #4294967295
 80089a2:	e017      	b.n	80089d4 <tcpip_try_callback+0x68>
  }

  msg->type = TCPIP_MSG_CALLBACK;
 80089a4:	68fb      	ldr	r3, [r7, #12]
 80089a6:	2201      	movs	r2, #1
 80089a8:	701a      	strb	r2, [r3, #0]
  msg->msg.cb.function = function;
 80089aa:	68fb      	ldr	r3, [r7, #12]
 80089ac:	687a      	ldr	r2, [r7, #4]
 80089ae:	605a      	str	r2, [r3, #4]
  msg->msg.cb.ctx = ctx;
 80089b0:	68fb      	ldr	r3, [r7, #12]
 80089b2:	683a      	ldr	r2, [r7, #0]
 80089b4:	609a      	str	r2, [r3, #8]

  if (sys_mbox_trypost(&tcpip_mbox, msg) != ERR_OK) {
 80089b6:	68f9      	ldr	r1, [r7, #12]
 80089b8:	4808      	ldr	r0, [pc, #32]	; (80089dc <tcpip_try_callback+0x70>)
 80089ba:	f00a fcdf 	bl	801337c <sys_mbox_trypost>
 80089be:	4603      	mov	r3, r0
 80089c0:	2b00      	cmp	r3, #0
 80089c2:	d006      	beq.n	80089d2 <tcpip_try_callback+0x66>
    memp_free(MEMP_TCPIP_MSG_API, msg);
 80089c4:	68f9      	ldr	r1, [r7, #12]
 80089c6:	2008      	movs	r0, #8
 80089c8:	f000 fe78 	bl	80096bc <memp_free>
    return ERR_MEM;
 80089cc:	f04f 33ff 	mov.w	r3, #4294967295
 80089d0:	e000      	b.n	80089d4 <tcpip_try_callback+0x68>
  }
  return ERR_OK;
 80089d2:	2300      	movs	r3, #0
}
 80089d4:	4618      	mov	r0, r3
 80089d6:	3710      	adds	r7, #16
 80089d8:	46bd      	mov	sp, r7
 80089da:	bd80      	pop	{r7, pc}
 80089dc:	20008e54 	.word	0x20008e54
 80089e0:	080148cc 	.word	0x080148cc
 80089e4:	08014944 	.word	0x08014944
 80089e8:	0801491c 	.word	0x0801491c

080089ec <tcpip_init>:
 * @param initfunc a function to call when tcpip_thread is running and finished initializing
 * @param arg argument to pass to initfunc
 */
void
tcpip_init(tcpip_init_done_fn initfunc, void *arg)
{
 80089ec:	b580      	push	{r7, lr}
 80089ee:	b084      	sub	sp, #16
 80089f0:	af02      	add	r7, sp, #8
 80089f2:	6078      	str	r0, [r7, #4]
 80089f4:	6039      	str	r1, [r7, #0]
  lwip_init();
 80089f6:	f000 f871 	bl	8008adc <lwip_init>

  tcpip_init_done = initfunc;
 80089fa:	4a17      	ldr	r2, [pc, #92]	; (8008a58 <tcpip_init+0x6c>)
 80089fc:	687b      	ldr	r3, [r7, #4]
 80089fe:	6013      	str	r3, [r2, #0]
  tcpip_init_done_arg = arg;
 8008a00:	4a16      	ldr	r2, [pc, #88]	; (8008a5c <tcpip_init+0x70>)
 8008a02:	683b      	ldr	r3, [r7, #0]
 8008a04:	6013      	str	r3, [r2, #0]
  if (sys_mbox_new(&tcpip_mbox, TCPIP_MBOX_SIZE) != ERR_OK) {
 8008a06:	2106      	movs	r1, #6
 8008a08:	4815      	ldr	r0, [pc, #84]	; (8008a60 <tcpip_init+0x74>)
 8008a0a:	f00a fc7d 	bl	8013308 <sys_mbox_new>
 8008a0e:	4603      	mov	r3, r0
 8008a10:	2b00      	cmp	r3, #0
 8008a12:	d006      	beq.n	8008a22 <tcpip_init+0x36>
    LWIP_ASSERT("failed to create tcpip_thread mbox", 0);
 8008a14:	4b13      	ldr	r3, [pc, #76]	; (8008a64 <tcpip_init+0x78>)
 8008a16:	f240 2261 	movw	r2, #609	; 0x261
 8008a1a:	4913      	ldr	r1, [pc, #76]	; (8008a68 <tcpip_init+0x7c>)
 8008a1c:	4813      	ldr	r0, [pc, #76]	; (8008a6c <tcpip_init+0x80>)
 8008a1e:	f00a ffa3 	bl	8013968 <iprintf>
  }
#if LWIP_TCPIP_CORE_LOCKING
  if (sys_mutex_new(&lock_tcpip_core) != ERR_OK) {
 8008a22:	4813      	ldr	r0, [pc, #76]	; (8008a70 <tcpip_init+0x84>)
 8008a24:	f00a fd2c 	bl	8013480 <sys_mutex_new>
 8008a28:	4603      	mov	r3, r0
 8008a2a:	2b00      	cmp	r3, #0
 8008a2c:	d006      	beq.n	8008a3c <tcpip_init+0x50>
    LWIP_ASSERT("failed to create lock_tcpip_core", 0);
 8008a2e:	4b0d      	ldr	r3, [pc, #52]	; (8008a64 <tcpip_init+0x78>)
 8008a30:	f240 2265 	movw	r2, #613	; 0x265
 8008a34:	490f      	ldr	r1, [pc, #60]	; (8008a74 <tcpip_init+0x88>)
 8008a36:	480d      	ldr	r0, [pc, #52]	; (8008a6c <tcpip_init+0x80>)
 8008a38:	f00a ff96 	bl	8013968 <iprintf>
  }
#endif /* LWIP_TCPIP_CORE_LOCKING */

  sys_thread_new(TCPIP_THREAD_NAME, tcpip_thread, NULL, TCPIP_THREAD_STACKSIZE, TCPIP_THREAD_PRIO);
 8008a3c:	2300      	movs	r3, #0
 8008a3e:	9300      	str	r3, [sp, #0]
 8008a40:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008a44:	2200      	movs	r2, #0
 8008a46:	490c      	ldr	r1, [pc, #48]	; (8008a78 <tcpip_init+0x8c>)
 8008a48:	480c      	ldr	r0, [pc, #48]	; (8008a7c <tcpip_init+0x90>)
 8008a4a:	f00a fd71 	bl	8013530 <sys_thread_new>
}
 8008a4e:	bf00      	nop
 8008a50:	3708      	adds	r7, #8
 8008a52:	46bd      	mov	sp, r7
 8008a54:	bd80      	pop	{r7, pc}
 8008a56:	bf00      	nop
 8008a58:	20008e4c 	.word	0x20008e4c
 8008a5c:	20008e50 	.word	0x20008e50
 8008a60:	20008e54 	.word	0x20008e54
 8008a64:	080148cc 	.word	0x080148cc
 8008a68:	08014954 	.word	0x08014954
 8008a6c:	0801491c 	.word	0x0801491c
 8008a70:	20008e58 	.word	0x20008e58
 8008a74:	08014978 	.word	0x08014978
 8008a78:	080087a9 	.word	0x080087a9
 8008a7c:	0801499c 	.word	0x0801499c

08008a80 <lwip_htons>:
 * @param n u16_t in host byte order
 * @return n in network byte order
 */
u16_t
lwip_htons(u16_t n)
{
 8008a80:	b480      	push	{r7}
 8008a82:	b083      	sub	sp, #12
 8008a84:	af00      	add	r7, sp, #0
 8008a86:	4603      	mov	r3, r0
 8008a88:	80fb      	strh	r3, [r7, #6]
  return PP_HTONS(n);
 8008a8a:	88fb      	ldrh	r3, [r7, #6]
 8008a8c:	021b      	lsls	r3, r3, #8
 8008a8e:	b21a      	sxth	r2, r3
 8008a90:	88fb      	ldrh	r3, [r7, #6]
 8008a92:	0a1b      	lsrs	r3, r3, #8
 8008a94:	b29b      	uxth	r3, r3
 8008a96:	b21b      	sxth	r3, r3
 8008a98:	4313      	orrs	r3, r2
 8008a9a:	b21b      	sxth	r3, r3
 8008a9c:	b29b      	uxth	r3, r3
}
 8008a9e:	4618      	mov	r0, r3
 8008aa0:	370c      	adds	r7, #12
 8008aa2:	46bd      	mov	sp, r7
 8008aa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008aa8:	4770      	bx	lr

08008aaa <lwip_htonl>:
 * @param n u32_t in host byte order
 * @return n in network byte order
 */
u32_t
lwip_htonl(u32_t n)
{
 8008aaa:	b480      	push	{r7}
 8008aac:	b083      	sub	sp, #12
 8008aae:	af00      	add	r7, sp, #0
 8008ab0:	6078      	str	r0, [r7, #4]
  return PP_HTONL(n);
 8008ab2:	687b      	ldr	r3, [r7, #4]
 8008ab4:	061a      	lsls	r2, r3, #24
 8008ab6:	687b      	ldr	r3, [r7, #4]
 8008ab8:	021b      	lsls	r3, r3, #8
 8008aba:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8008abe:	431a      	orrs	r2, r3
 8008ac0:	687b      	ldr	r3, [r7, #4]
 8008ac2:	0a1b      	lsrs	r3, r3, #8
 8008ac4:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8008ac8:	431a      	orrs	r2, r3
 8008aca:	687b      	ldr	r3, [r7, #4]
 8008acc:	0e1b      	lsrs	r3, r3, #24
 8008ace:	4313      	orrs	r3, r2
}
 8008ad0:	4618      	mov	r0, r3
 8008ad2:	370c      	adds	r7, #12
 8008ad4:	46bd      	mov	sp, r7
 8008ad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ada:	4770      	bx	lr

08008adc <lwip_init>:
 * Initialize all modules.
 * Use this in NO_SYS mode. Use tcpip_init() otherwise.
 */
void
lwip_init(void)
{
 8008adc:	b580      	push	{r7, lr}
 8008ade:	b082      	sub	sp, #8
 8008ae0:	af00      	add	r7, sp, #0
#ifndef LWIP_SKIP_CONST_CHECK
  int a = 0;
 8008ae2:	2300      	movs	r3, #0
 8008ae4:	607b      	str	r3, [r7, #4]
#ifndef LWIP_SKIP_PACKING_CHECK
  LWIP_ASSERT("Struct packing not implemented correctly. Check your lwIP port.", sizeof(struct packed_struct_test) == PACKED_STRUCT_TEST_EXPECTED_SIZE);
#endif

  /* Modules initialization */
  stats_init();
 8008ae6:	f001 ff37 	bl	800a958 <stats_init>
#if !NO_SYS
  sys_init();
 8008aea:	f00a fcbb 	bl	8013464 <sys_init>
#endif /* !NO_SYS */
  mem_init();
 8008aee:	f000 f8d5 	bl	8008c9c <mem_init>
  memp_init();
 8008af2:	f000 fcd1 	bl	8009498 <memp_init>
  pbuf_init();
  netif_init();
 8008af6:	f000 fe0b 	bl	8009710 <netif_init>
#endif /* LWIP_IPV4 */
#if LWIP_RAW
  raw_init();
#endif /* LWIP_RAW */
#if LWIP_UDP
  udp_init();
 8008afa:	f007 fad5 	bl	80100a8 <udp_init>
#endif /* LWIP_UDP */
#if LWIP_TCP
  tcp_init();
 8008afe:	f001 ff33 	bl	800a968 <tcp_init>
#if PPP_SUPPORT
  ppp_init();
#endif

#if LWIP_TIMERS
  sys_timeouts_init();
 8008b02:	f007 fa17 	bl	800ff34 <sys_timeouts_init>
#endif /* LWIP_TIMERS */
}
 8008b06:	bf00      	nop
 8008b08:	3708      	adds	r7, #8
 8008b0a:	46bd      	mov	sp, r7
 8008b0c:	bd80      	pop	{r7, pc}
	...

08008b10 <ptr_to_mem>:
#define mem_overflow_check_element(mem)
#endif /* MEM_OVERFLOW_CHECK */

static struct mem *
ptr_to_mem(mem_size_t ptr)
{
 8008b10:	b480      	push	{r7}
 8008b12:	b083      	sub	sp, #12
 8008b14:	af00      	add	r7, sp, #0
 8008b16:	4603      	mov	r3, r0
 8008b18:	80fb      	strh	r3, [r7, #6]
  return (struct mem *)(void *)&ram[ptr];
 8008b1a:	4b05      	ldr	r3, [pc, #20]	; (8008b30 <ptr_to_mem+0x20>)
 8008b1c:	681a      	ldr	r2, [r3, #0]
 8008b1e:	88fb      	ldrh	r3, [r7, #6]
 8008b20:	4413      	add	r3, r2
}
 8008b22:	4618      	mov	r0, r3
 8008b24:	370c      	adds	r7, #12
 8008b26:	46bd      	mov	sp, r7
 8008b28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b2c:	4770      	bx	lr
 8008b2e:	bf00      	nop
 8008b30:	200094c8 	.word	0x200094c8

08008b34 <mem_to_ptr>:

static mem_size_t
mem_to_ptr(void *mem)
{
 8008b34:	b480      	push	{r7}
 8008b36:	b083      	sub	sp, #12
 8008b38:	af00      	add	r7, sp, #0
 8008b3a:	6078      	str	r0, [r7, #4]
  return (mem_size_t)((u8_t *)mem - ram);
 8008b3c:	4b05      	ldr	r3, [pc, #20]	; (8008b54 <mem_to_ptr+0x20>)
 8008b3e:	681b      	ldr	r3, [r3, #0]
 8008b40:	687a      	ldr	r2, [r7, #4]
 8008b42:	1ad3      	subs	r3, r2, r3
 8008b44:	b29b      	uxth	r3, r3
}
 8008b46:	4618      	mov	r0, r3
 8008b48:	370c      	adds	r7, #12
 8008b4a:	46bd      	mov	sp, r7
 8008b4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b50:	4770      	bx	lr
 8008b52:	bf00      	nop
 8008b54:	200094c8 	.word	0x200094c8

08008b58 <plug_holes>:
 * This assumes access to the heap is protected by the calling function
 * already.
 */
static void
plug_holes(struct mem *mem)
{
 8008b58:	b590      	push	{r4, r7, lr}
 8008b5a:	b085      	sub	sp, #20
 8008b5c:	af00      	add	r7, sp, #0
 8008b5e:	6078      	str	r0, [r7, #4]
  struct mem *nmem;
  struct mem *pmem;

  LWIP_ASSERT("plug_holes: mem >= ram", (u8_t *)mem >= ram);
 8008b60:	4b45      	ldr	r3, [pc, #276]	; (8008c78 <plug_holes+0x120>)
 8008b62:	681b      	ldr	r3, [r3, #0]
 8008b64:	687a      	ldr	r2, [r7, #4]
 8008b66:	429a      	cmp	r2, r3
 8008b68:	d206      	bcs.n	8008b78 <plug_holes+0x20>
 8008b6a:	4b44      	ldr	r3, [pc, #272]	; (8008c7c <plug_holes+0x124>)
 8008b6c:	f240 12df 	movw	r2, #479	; 0x1df
 8008b70:	4943      	ldr	r1, [pc, #268]	; (8008c80 <plug_holes+0x128>)
 8008b72:	4844      	ldr	r0, [pc, #272]	; (8008c84 <plug_holes+0x12c>)
 8008b74:	f00a fef8 	bl	8013968 <iprintf>
  LWIP_ASSERT("plug_holes: mem < ram_end", (u8_t *)mem < (u8_t *)ram_end);
 8008b78:	4b43      	ldr	r3, [pc, #268]	; (8008c88 <plug_holes+0x130>)
 8008b7a:	681b      	ldr	r3, [r3, #0]
 8008b7c:	687a      	ldr	r2, [r7, #4]
 8008b7e:	429a      	cmp	r2, r3
 8008b80:	d306      	bcc.n	8008b90 <plug_holes+0x38>
 8008b82:	4b3e      	ldr	r3, [pc, #248]	; (8008c7c <plug_holes+0x124>)
 8008b84:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8008b88:	4940      	ldr	r1, [pc, #256]	; (8008c8c <plug_holes+0x134>)
 8008b8a:	483e      	ldr	r0, [pc, #248]	; (8008c84 <plug_holes+0x12c>)
 8008b8c:	f00a feec 	bl	8013968 <iprintf>
  LWIP_ASSERT("plug_holes: mem->used == 0", mem->used == 0);
 8008b90:	687b      	ldr	r3, [r7, #4]
 8008b92:	791b      	ldrb	r3, [r3, #4]
 8008b94:	2b00      	cmp	r3, #0
 8008b96:	d006      	beq.n	8008ba6 <plug_holes+0x4e>
 8008b98:	4b38      	ldr	r3, [pc, #224]	; (8008c7c <plug_holes+0x124>)
 8008b9a:	f240 12e1 	movw	r2, #481	; 0x1e1
 8008b9e:	493c      	ldr	r1, [pc, #240]	; (8008c90 <plug_holes+0x138>)
 8008ba0:	4838      	ldr	r0, [pc, #224]	; (8008c84 <plug_holes+0x12c>)
 8008ba2:	f00a fee1 	bl	8013968 <iprintf>

  /* plug hole forward */
  LWIP_ASSERT("plug_holes: mem->next <= MEM_SIZE_ALIGNED", mem->next <= MEM_SIZE_ALIGNED);
 8008ba6:	687b      	ldr	r3, [r7, #4]
 8008ba8:	881b      	ldrh	r3, [r3, #0]
 8008baa:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8008bae:	d906      	bls.n	8008bbe <plug_holes+0x66>
 8008bb0:	4b32      	ldr	r3, [pc, #200]	; (8008c7c <plug_holes+0x124>)
 8008bb2:	f44f 72f2 	mov.w	r2, #484	; 0x1e4
 8008bb6:	4937      	ldr	r1, [pc, #220]	; (8008c94 <plug_holes+0x13c>)
 8008bb8:	4832      	ldr	r0, [pc, #200]	; (8008c84 <plug_holes+0x12c>)
 8008bba:	f00a fed5 	bl	8013968 <iprintf>

  nmem = ptr_to_mem(mem->next);
 8008bbe:	687b      	ldr	r3, [r7, #4]
 8008bc0:	881b      	ldrh	r3, [r3, #0]
 8008bc2:	4618      	mov	r0, r3
 8008bc4:	f7ff ffa4 	bl	8008b10 <ptr_to_mem>
 8008bc8:	60f8      	str	r0, [r7, #12]
  if (mem != nmem && nmem->used == 0 && (u8_t *)nmem != (u8_t *)ram_end) {
 8008bca:	687a      	ldr	r2, [r7, #4]
 8008bcc:	68fb      	ldr	r3, [r7, #12]
 8008bce:	429a      	cmp	r2, r3
 8008bd0:	d024      	beq.n	8008c1c <plug_holes+0xc4>
 8008bd2:	68fb      	ldr	r3, [r7, #12]
 8008bd4:	791b      	ldrb	r3, [r3, #4]
 8008bd6:	2b00      	cmp	r3, #0
 8008bd8:	d120      	bne.n	8008c1c <plug_holes+0xc4>
 8008bda:	4b2b      	ldr	r3, [pc, #172]	; (8008c88 <plug_holes+0x130>)
 8008bdc:	681b      	ldr	r3, [r3, #0]
 8008bde:	68fa      	ldr	r2, [r7, #12]
 8008be0:	429a      	cmp	r2, r3
 8008be2:	d01b      	beq.n	8008c1c <plug_holes+0xc4>
    /* if mem->next is unused and not end of ram, combine mem and mem->next */
    if (lfree == nmem) {
 8008be4:	4b2c      	ldr	r3, [pc, #176]	; (8008c98 <plug_holes+0x140>)
 8008be6:	681b      	ldr	r3, [r3, #0]
 8008be8:	68fa      	ldr	r2, [r7, #12]
 8008bea:	429a      	cmp	r2, r3
 8008bec:	d102      	bne.n	8008bf4 <plug_holes+0x9c>
      lfree = mem;
 8008bee:	4a2a      	ldr	r2, [pc, #168]	; (8008c98 <plug_holes+0x140>)
 8008bf0:	687b      	ldr	r3, [r7, #4]
 8008bf2:	6013      	str	r3, [r2, #0]
    }
    mem->next = nmem->next;
 8008bf4:	68fb      	ldr	r3, [r7, #12]
 8008bf6:	881a      	ldrh	r2, [r3, #0]
 8008bf8:	687b      	ldr	r3, [r7, #4]
 8008bfa:	801a      	strh	r2, [r3, #0]
    if (nmem->next != MEM_SIZE_ALIGNED) {
 8008bfc:	68fb      	ldr	r3, [r7, #12]
 8008bfe:	881b      	ldrh	r3, [r3, #0]
 8008c00:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8008c04:	d00a      	beq.n	8008c1c <plug_holes+0xc4>
      ptr_to_mem(nmem->next)->prev = mem_to_ptr(mem);
 8008c06:	68fb      	ldr	r3, [r7, #12]
 8008c08:	881b      	ldrh	r3, [r3, #0]
 8008c0a:	4618      	mov	r0, r3
 8008c0c:	f7ff ff80 	bl	8008b10 <ptr_to_mem>
 8008c10:	4604      	mov	r4, r0
 8008c12:	6878      	ldr	r0, [r7, #4]
 8008c14:	f7ff ff8e 	bl	8008b34 <mem_to_ptr>
 8008c18:	4603      	mov	r3, r0
 8008c1a:	8063      	strh	r3, [r4, #2]
    }
  }

  /* plug hole backward */
  pmem = ptr_to_mem(mem->prev);
 8008c1c:	687b      	ldr	r3, [r7, #4]
 8008c1e:	885b      	ldrh	r3, [r3, #2]
 8008c20:	4618      	mov	r0, r3
 8008c22:	f7ff ff75 	bl	8008b10 <ptr_to_mem>
 8008c26:	60b8      	str	r0, [r7, #8]
  if (pmem != mem && pmem->used == 0) {
 8008c28:	68ba      	ldr	r2, [r7, #8]
 8008c2a:	687b      	ldr	r3, [r7, #4]
 8008c2c:	429a      	cmp	r2, r3
 8008c2e:	d01f      	beq.n	8008c70 <plug_holes+0x118>
 8008c30:	68bb      	ldr	r3, [r7, #8]
 8008c32:	791b      	ldrb	r3, [r3, #4]
 8008c34:	2b00      	cmp	r3, #0
 8008c36:	d11b      	bne.n	8008c70 <plug_holes+0x118>
    /* if mem->prev is unused, combine mem and mem->prev */
    if (lfree == mem) {
 8008c38:	4b17      	ldr	r3, [pc, #92]	; (8008c98 <plug_holes+0x140>)
 8008c3a:	681b      	ldr	r3, [r3, #0]
 8008c3c:	687a      	ldr	r2, [r7, #4]
 8008c3e:	429a      	cmp	r2, r3
 8008c40:	d102      	bne.n	8008c48 <plug_holes+0xf0>
      lfree = pmem;
 8008c42:	4a15      	ldr	r2, [pc, #84]	; (8008c98 <plug_holes+0x140>)
 8008c44:	68bb      	ldr	r3, [r7, #8]
 8008c46:	6013      	str	r3, [r2, #0]
    }
    pmem->next = mem->next;
 8008c48:	687b      	ldr	r3, [r7, #4]
 8008c4a:	881a      	ldrh	r2, [r3, #0]
 8008c4c:	68bb      	ldr	r3, [r7, #8]
 8008c4e:	801a      	strh	r2, [r3, #0]
    if (mem->next != MEM_SIZE_ALIGNED) {
 8008c50:	687b      	ldr	r3, [r7, #4]
 8008c52:	881b      	ldrh	r3, [r3, #0]
 8008c54:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8008c58:	d00a      	beq.n	8008c70 <plug_holes+0x118>
      ptr_to_mem(mem->next)->prev = mem_to_ptr(pmem);
 8008c5a:	687b      	ldr	r3, [r7, #4]
 8008c5c:	881b      	ldrh	r3, [r3, #0]
 8008c5e:	4618      	mov	r0, r3
 8008c60:	f7ff ff56 	bl	8008b10 <ptr_to_mem>
 8008c64:	4604      	mov	r4, r0
 8008c66:	68b8      	ldr	r0, [r7, #8]
 8008c68:	f7ff ff64 	bl	8008b34 <mem_to_ptr>
 8008c6c:	4603      	mov	r3, r0
 8008c6e:	8063      	strh	r3, [r4, #2]
    }
  }
}
 8008c70:	bf00      	nop
 8008c72:	3714      	adds	r7, #20
 8008c74:	46bd      	mov	sp, r7
 8008c76:	bd90      	pop	{r4, r7, pc}
 8008c78:	200094c8 	.word	0x200094c8
 8008c7c:	080149ac 	.word	0x080149ac
 8008c80:	080149dc 	.word	0x080149dc
 8008c84:	080149f4 	.word	0x080149f4
 8008c88:	200094cc 	.word	0x200094cc
 8008c8c:	08014a1c 	.word	0x08014a1c
 8008c90:	08014a38 	.word	0x08014a38
 8008c94:	08014a54 	.word	0x08014a54
 8008c98:	200094d4 	.word	0x200094d4

08008c9c <mem_init>:
/**
 * Zero the heap and initialize start, end and lowest-free
 */
void
mem_init(void)
{
 8008c9c:	b580      	push	{r7, lr}
 8008c9e:	b082      	sub	sp, #8
 8008ca0:	af00      	add	r7, sp, #0

  LWIP_ASSERT("Sanity check alignment",
              (SIZEOF_STRUCT_MEM & (MEM_ALIGNMENT - 1)) == 0);

  /* align the heap */
  ram = (u8_t *)LWIP_MEM_ALIGN(LWIP_RAM_HEAP_POINTER);
 8008ca2:	4b21      	ldr	r3, [pc, #132]	; (8008d28 <mem_init+0x8c>)
 8008ca4:	3303      	adds	r3, #3
 8008ca6:	f023 0303 	bic.w	r3, r3, #3
 8008caa:	461a      	mov	r2, r3
 8008cac:	4b1f      	ldr	r3, [pc, #124]	; (8008d2c <mem_init+0x90>)
 8008cae:	601a      	str	r2, [r3, #0]
  /* initialize the start of the heap */
  mem = (struct mem *)(void *)ram;
 8008cb0:	4b1e      	ldr	r3, [pc, #120]	; (8008d2c <mem_init+0x90>)
 8008cb2:	681b      	ldr	r3, [r3, #0]
 8008cb4:	607b      	str	r3, [r7, #4]
  mem->next = MEM_SIZE_ALIGNED;
 8008cb6:	687b      	ldr	r3, [r7, #4]
 8008cb8:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 8008cbc:	801a      	strh	r2, [r3, #0]
  mem->prev = 0;
 8008cbe:	687b      	ldr	r3, [r7, #4]
 8008cc0:	2200      	movs	r2, #0
 8008cc2:	805a      	strh	r2, [r3, #2]
  mem->used = 0;
 8008cc4:	687b      	ldr	r3, [r7, #4]
 8008cc6:	2200      	movs	r2, #0
 8008cc8:	711a      	strb	r2, [r3, #4]
  /* initialize the end of the heap */
  ram_end = ptr_to_mem(MEM_SIZE_ALIGNED);
 8008cca:	f44f 60c8 	mov.w	r0, #1600	; 0x640
 8008cce:	f7ff ff1f 	bl	8008b10 <ptr_to_mem>
 8008cd2:	4603      	mov	r3, r0
 8008cd4:	4a16      	ldr	r2, [pc, #88]	; (8008d30 <mem_init+0x94>)
 8008cd6:	6013      	str	r3, [r2, #0]
  ram_end->used = 1;
 8008cd8:	4b15      	ldr	r3, [pc, #84]	; (8008d30 <mem_init+0x94>)
 8008cda:	681b      	ldr	r3, [r3, #0]
 8008cdc:	2201      	movs	r2, #1
 8008cde:	711a      	strb	r2, [r3, #4]
  ram_end->next = MEM_SIZE_ALIGNED;
 8008ce0:	4b13      	ldr	r3, [pc, #76]	; (8008d30 <mem_init+0x94>)
 8008ce2:	681b      	ldr	r3, [r3, #0]
 8008ce4:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 8008ce8:	801a      	strh	r2, [r3, #0]
  ram_end->prev = MEM_SIZE_ALIGNED;
 8008cea:	4b11      	ldr	r3, [pc, #68]	; (8008d30 <mem_init+0x94>)
 8008cec:	681b      	ldr	r3, [r3, #0]
 8008cee:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 8008cf2:	805a      	strh	r2, [r3, #2]
  MEM_SANITY();

  /* initialize the lowest-free pointer to the start of the heap */
  lfree = (struct mem *)(void *)ram;
 8008cf4:	4b0d      	ldr	r3, [pc, #52]	; (8008d2c <mem_init+0x90>)
 8008cf6:	681b      	ldr	r3, [r3, #0]
 8008cf8:	4a0e      	ldr	r2, [pc, #56]	; (8008d34 <mem_init+0x98>)
 8008cfa:	6013      	str	r3, [r2, #0]

  MEM_STATS_AVAIL(avail, MEM_SIZE_ALIGNED);
 8008cfc:	4b0e      	ldr	r3, [pc, #56]	; (8008d38 <mem_init+0x9c>)
 8008cfe:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 8008d02:	f8a3 20aa 	strh.w	r2, [r3, #170]	; 0xaa

  if (sys_mutex_new(&mem_mutex) != ERR_OK) {
 8008d06:	480d      	ldr	r0, [pc, #52]	; (8008d3c <mem_init+0xa0>)
 8008d08:	f00a fbba 	bl	8013480 <sys_mutex_new>
 8008d0c:	4603      	mov	r3, r0
 8008d0e:	2b00      	cmp	r3, #0
 8008d10:	d006      	beq.n	8008d20 <mem_init+0x84>
    LWIP_ASSERT("failed to create mem_mutex", 0);
 8008d12:	4b0b      	ldr	r3, [pc, #44]	; (8008d40 <mem_init+0xa4>)
 8008d14:	f240 221f 	movw	r2, #543	; 0x21f
 8008d18:	490a      	ldr	r1, [pc, #40]	; (8008d44 <mem_init+0xa8>)
 8008d1a:	480b      	ldr	r0, [pc, #44]	; (8008d48 <mem_init+0xac>)
 8008d1c:	f00a fe24 	bl	8013968 <iprintf>
  }
}
 8008d20:	bf00      	nop
 8008d22:	3708      	adds	r7, #8
 8008d24:	46bd      	mov	sp, r7
 8008d26:	bd80      	pop	{r7, pc}
 8008d28:	20008e74 	.word	0x20008e74
 8008d2c:	200094c8 	.word	0x200094c8
 8008d30:	200094cc 	.word	0x200094cc
 8008d34:	200094d4 	.word	0x200094d4
 8008d38:	2000c64c 	.word	0x2000c64c
 8008d3c:	200094d0 	.word	0x200094d0
 8008d40:	080149ac 	.word	0x080149ac
 8008d44:	08014a80 	.word	0x08014a80
 8008d48:	080149f4 	.word	0x080149f4

08008d4c <mem_link_valid>:
/* Check if a struct mem is correctly linked.
 * If not, double-free is a possible reason.
 */
static int
mem_link_valid(struct mem *mem)
{
 8008d4c:	b580      	push	{r7, lr}
 8008d4e:	b086      	sub	sp, #24
 8008d50:	af00      	add	r7, sp, #0
 8008d52:	6078      	str	r0, [r7, #4]
  struct mem *nmem, *pmem;
  mem_size_t rmem_idx;
  rmem_idx = mem_to_ptr(mem);
 8008d54:	6878      	ldr	r0, [r7, #4]
 8008d56:	f7ff feed 	bl	8008b34 <mem_to_ptr>
 8008d5a:	4603      	mov	r3, r0
 8008d5c:	82fb      	strh	r3, [r7, #22]
  nmem = ptr_to_mem(mem->next);
 8008d5e:	687b      	ldr	r3, [r7, #4]
 8008d60:	881b      	ldrh	r3, [r3, #0]
 8008d62:	4618      	mov	r0, r3
 8008d64:	f7ff fed4 	bl	8008b10 <ptr_to_mem>
 8008d68:	6138      	str	r0, [r7, #16]
  pmem = ptr_to_mem(mem->prev);
 8008d6a:	687b      	ldr	r3, [r7, #4]
 8008d6c:	885b      	ldrh	r3, [r3, #2]
 8008d6e:	4618      	mov	r0, r3
 8008d70:	f7ff fece 	bl	8008b10 <ptr_to_mem>
 8008d74:	60f8      	str	r0, [r7, #12]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 8008d76:	687b      	ldr	r3, [r7, #4]
 8008d78:	881b      	ldrh	r3, [r3, #0]
 8008d7a:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8008d7e:	d818      	bhi.n	8008db2 <mem_link_valid+0x66>
 8008d80:	687b      	ldr	r3, [r7, #4]
 8008d82:	885b      	ldrh	r3, [r3, #2]
 8008d84:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8008d88:	d813      	bhi.n	8008db2 <mem_link_valid+0x66>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 8008d8a:	687b      	ldr	r3, [r7, #4]
 8008d8c:	885b      	ldrh	r3, [r3, #2]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 8008d8e:	8afa      	ldrh	r2, [r7, #22]
 8008d90:	429a      	cmp	r2, r3
 8008d92:	d004      	beq.n	8008d9e <mem_link_valid+0x52>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 8008d94:	68fb      	ldr	r3, [r7, #12]
 8008d96:	881b      	ldrh	r3, [r3, #0]
 8008d98:	8afa      	ldrh	r2, [r7, #22]
 8008d9a:	429a      	cmp	r2, r3
 8008d9c:	d109      	bne.n	8008db2 <mem_link_valid+0x66>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 8008d9e:	4b08      	ldr	r3, [pc, #32]	; (8008dc0 <mem_link_valid+0x74>)
 8008da0:	681b      	ldr	r3, [r3, #0]
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 8008da2:	693a      	ldr	r2, [r7, #16]
 8008da4:	429a      	cmp	r2, r3
 8008da6:	d006      	beq.n	8008db6 <mem_link_valid+0x6a>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 8008da8:	693b      	ldr	r3, [r7, #16]
 8008daa:	885b      	ldrh	r3, [r3, #2]
 8008dac:	8afa      	ldrh	r2, [r7, #22]
 8008dae:	429a      	cmp	r2, r3
 8008db0:	d001      	beq.n	8008db6 <mem_link_valid+0x6a>
    return 0;
 8008db2:	2300      	movs	r3, #0
 8008db4:	e000      	b.n	8008db8 <mem_link_valid+0x6c>
  }
  return 1;
 8008db6:	2301      	movs	r3, #1
}
 8008db8:	4618      	mov	r0, r3
 8008dba:	3718      	adds	r7, #24
 8008dbc:	46bd      	mov	sp, r7
 8008dbe:	bd80      	pop	{r7, pc}
 8008dc0:	200094cc 	.word	0x200094cc

08008dc4 <mem_free>:
 * @param rmem is the data portion of a struct mem as returned by a previous
 *             call to mem_malloc()
 */
void
mem_free(void *rmem)
{
 8008dc4:	b580      	push	{r7, lr}
 8008dc6:	b088      	sub	sp, #32
 8008dc8:	af00      	add	r7, sp, #0
 8008dca:	6078      	str	r0, [r7, #4]
  struct mem *mem;
  LWIP_MEM_FREE_DECL_PROTECT();

  if (rmem == NULL) {
 8008dcc:	687b      	ldr	r3, [r7, #4]
 8008dce:	2b00      	cmp	r3, #0
 8008dd0:	f000 80a2 	beq.w	8008f18 <mem_free+0x154>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("mem_free(p == NULL) was called.\n"));
    return;
  }
  if ((((mem_ptr_t)rmem) & (MEM_ALIGNMENT - 1)) != 0) {
 8008dd4:	687b      	ldr	r3, [r7, #4]
 8008dd6:	f003 0303 	and.w	r3, r3, #3
 8008dda:	2b00      	cmp	r3, #0
 8008ddc:	d015      	beq.n	8008e0a <mem_free+0x46>
    LWIP_MEM_ILLEGAL_FREE("mem_free: sanity check alignment");
 8008dde:	4b50      	ldr	r3, [pc, #320]	; (8008f20 <mem_free+0x15c>)
 8008de0:	f240 2273 	movw	r2, #627	; 0x273
 8008de4:	494f      	ldr	r1, [pc, #316]	; (8008f24 <mem_free+0x160>)
 8008de6:	4850      	ldr	r0, [pc, #320]	; (8008f28 <mem_free+0x164>)
 8008de8:	f00a fdbe 	bl	8013968 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: sanity check alignment\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 8008dec:	f00a fbc6 	bl	801357c <sys_arch_protect>
 8008df0:	60f8      	str	r0, [r7, #12]
 8008df2:	4b4e      	ldr	r3, [pc, #312]	; (8008f2c <mem_free+0x168>)
 8008df4:	f8b3 30b0 	ldrh.w	r3, [r3, #176]	; 0xb0
 8008df8:	3301      	adds	r3, #1
 8008dfa:	b29a      	uxth	r2, r3
 8008dfc:	4b4b      	ldr	r3, [pc, #300]	; (8008f2c <mem_free+0x168>)
 8008dfe:	f8a3 20b0 	strh.w	r2, [r3, #176]	; 0xb0
 8008e02:	68f8      	ldr	r0, [r7, #12]
 8008e04:	f00a fbc8 	bl	8013598 <sys_arch_unprotect>
    return;
 8008e08:	e087      	b.n	8008f1a <mem_free+0x156>
  }

  /* Get the corresponding struct mem: */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 8008e0a:	687b      	ldr	r3, [r7, #4]
 8008e0c:	3b08      	subs	r3, #8
 8008e0e:	61fb      	str	r3, [r7, #28]

  if ((u8_t *)mem < ram || (u8_t *)rmem + MIN_SIZE_ALIGNED > (u8_t *)ram_end) {
 8008e10:	4b47      	ldr	r3, [pc, #284]	; (8008f30 <mem_free+0x16c>)
 8008e12:	681b      	ldr	r3, [r3, #0]
 8008e14:	69fa      	ldr	r2, [r7, #28]
 8008e16:	429a      	cmp	r2, r3
 8008e18:	d306      	bcc.n	8008e28 <mem_free+0x64>
 8008e1a:	687b      	ldr	r3, [r7, #4]
 8008e1c:	f103 020c 	add.w	r2, r3, #12
 8008e20:	4b44      	ldr	r3, [pc, #272]	; (8008f34 <mem_free+0x170>)
 8008e22:	681b      	ldr	r3, [r3, #0]
 8008e24:	429a      	cmp	r2, r3
 8008e26:	d915      	bls.n	8008e54 <mem_free+0x90>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory");
 8008e28:	4b3d      	ldr	r3, [pc, #244]	; (8008f20 <mem_free+0x15c>)
 8008e2a:	f240 227f 	movw	r2, #639	; 0x27f
 8008e2e:	4942      	ldr	r1, [pc, #264]	; (8008f38 <mem_free+0x174>)
 8008e30:	483d      	ldr	r0, [pc, #244]	; (8008f28 <mem_free+0x164>)
 8008e32:	f00a fd99 	bl	8013968 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 8008e36:	f00a fba1 	bl	801357c <sys_arch_protect>
 8008e3a:	6138      	str	r0, [r7, #16]
 8008e3c:	4b3b      	ldr	r3, [pc, #236]	; (8008f2c <mem_free+0x168>)
 8008e3e:	f8b3 30b0 	ldrh.w	r3, [r3, #176]	; 0xb0
 8008e42:	3301      	adds	r3, #1
 8008e44:	b29a      	uxth	r2, r3
 8008e46:	4b39      	ldr	r3, [pc, #228]	; (8008f2c <mem_free+0x168>)
 8008e48:	f8a3 20b0 	strh.w	r2, [r3, #176]	; 0xb0
 8008e4c:	6938      	ldr	r0, [r7, #16]
 8008e4e:	f00a fba3 	bl	8013598 <sys_arch_unprotect>
    return;
 8008e52:	e062      	b.n	8008f1a <mem_free+0x156>
  }
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
 8008e54:	4839      	ldr	r0, [pc, #228]	; (8008f3c <mem_free+0x178>)
 8008e56:	f00a fb4f 	bl	80134f8 <sys_mutex_lock>
  /* mem has to be in a used state */
  if (!mem->used) {
 8008e5a:	69fb      	ldr	r3, [r7, #28]
 8008e5c:	791b      	ldrb	r3, [r3, #4]
 8008e5e:	2b00      	cmp	r3, #0
 8008e60:	d118      	bne.n	8008e94 <mem_free+0xd0>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: double free");
 8008e62:	4b2f      	ldr	r3, [pc, #188]	; (8008f20 <mem_free+0x15c>)
 8008e64:	f44f 7223 	mov.w	r2, #652	; 0x28c
 8008e68:	4935      	ldr	r1, [pc, #212]	; (8008f40 <mem_free+0x17c>)
 8008e6a:	482f      	ldr	r0, [pc, #188]	; (8008f28 <mem_free+0x164>)
 8008e6c:	f00a fd7c 	bl	8013968 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
 8008e70:	4832      	ldr	r0, [pc, #200]	; (8008f3c <mem_free+0x178>)
 8008e72:	f00a fb50 	bl	8013516 <sys_mutex_unlock>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 8008e76:	f00a fb81 	bl	801357c <sys_arch_protect>
 8008e7a:	6178      	str	r0, [r7, #20]
 8008e7c:	4b2b      	ldr	r3, [pc, #172]	; (8008f2c <mem_free+0x168>)
 8008e7e:	f8b3 30b0 	ldrh.w	r3, [r3, #176]	; 0xb0
 8008e82:	3301      	adds	r3, #1
 8008e84:	b29a      	uxth	r2, r3
 8008e86:	4b29      	ldr	r3, [pc, #164]	; (8008f2c <mem_free+0x168>)
 8008e88:	f8a3 20b0 	strh.w	r2, [r3, #176]	; 0xb0
 8008e8c:	6978      	ldr	r0, [r7, #20]
 8008e8e:	f00a fb83 	bl	8013598 <sys_arch_unprotect>
    return;
 8008e92:	e042      	b.n	8008f1a <mem_free+0x156>
  }

  if (!mem_link_valid(mem)) {
 8008e94:	69f8      	ldr	r0, [r7, #28]
 8008e96:	f7ff ff59 	bl	8008d4c <mem_link_valid>
 8008e9a:	4603      	mov	r3, r0
 8008e9c:	2b00      	cmp	r3, #0
 8008e9e:	d118      	bne.n	8008ed2 <mem_free+0x10e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: non-linked: double free");
 8008ea0:	4b1f      	ldr	r3, [pc, #124]	; (8008f20 <mem_free+0x15c>)
 8008ea2:	f240 2295 	movw	r2, #661	; 0x295
 8008ea6:	4927      	ldr	r1, [pc, #156]	; (8008f44 <mem_free+0x180>)
 8008ea8:	481f      	ldr	r0, [pc, #124]	; (8008f28 <mem_free+0x164>)
 8008eaa:	f00a fd5d 	bl	8013968 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
 8008eae:	4823      	ldr	r0, [pc, #140]	; (8008f3c <mem_free+0x178>)
 8008eb0:	f00a fb31 	bl	8013516 <sys_mutex_unlock>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: non-linked: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 8008eb4:	f00a fb62 	bl	801357c <sys_arch_protect>
 8008eb8:	61b8      	str	r0, [r7, #24]
 8008eba:	4b1c      	ldr	r3, [pc, #112]	; (8008f2c <mem_free+0x168>)
 8008ebc:	f8b3 30b0 	ldrh.w	r3, [r3, #176]	; 0xb0
 8008ec0:	3301      	adds	r3, #1
 8008ec2:	b29a      	uxth	r2, r3
 8008ec4:	4b19      	ldr	r3, [pc, #100]	; (8008f2c <mem_free+0x168>)
 8008ec6:	f8a3 20b0 	strh.w	r2, [r3, #176]	; 0xb0
 8008eca:	69b8      	ldr	r0, [r7, #24]
 8008ecc:	f00a fb64 	bl	8013598 <sys_arch_unprotect>
    return;
 8008ed0:	e023      	b.n	8008f1a <mem_free+0x156>
  }

  /* mem is now unused. */
  mem->used = 0;
 8008ed2:	69fb      	ldr	r3, [r7, #28]
 8008ed4:	2200      	movs	r2, #0
 8008ed6:	711a      	strb	r2, [r3, #4]

  if (mem < lfree) {
 8008ed8:	4b1b      	ldr	r3, [pc, #108]	; (8008f48 <mem_free+0x184>)
 8008eda:	681b      	ldr	r3, [r3, #0]
 8008edc:	69fa      	ldr	r2, [r7, #28]
 8008ede:	429a      	cmp	r2, r3
 8008ee0:	d202      	bcs.n	8008ee8 <mem_free+0x124>
    /* the newly freed struct is now the lowest */
    lfree = mem;
 8008ee2:	4a19      	ldr	r2, [pc, #100]	; (8008f48 <mem_free+0x184>)
 8008ee4:	69fb      	ldr	r3, [r7, #28]
 8008ee6:	6013      	str	r3, [r2, #0]
  }

  MEM_STATS_DEC_USED(used, mem->next - (mem_size_t)(((u8_t *)mem - ram)));
 8008ee8:	4b10      	ldr	r3, [pc, #64]	; (8008f2c <mem_free+0x168>)
 8008eea:	f8b3 20ac 	ldrh.w	r2, [r3, #172]	; 0xac
 8008eee:	4b10      	ldr	r3, [pc, #64]	; (8008f30 <mem_free+0x16c>)
 8008ef0:	681b      	ldr	r3, [r3, #0]
 8008ef2:	69f9      	ldr	r1, [r7, #28]
 8008ef4:	1acb      	subs	r3, r1, r3
 8008ef6:	b299      	uxth	r1, r3
 8008ef8:	69fb      	ldr	r3, [r7, #28]
 8008efa:	881b      	ldrh	r3, [r3, #0]
 8008efc:	1acb      	subs	r3, r1, r3
 8008efe:	b29b      	uxth	r3, r3
 8008f00:	4413      	add	r3, r2
 8008f02:	b29a      	uxth	r2, r3
 8008f04:	4b09      	ldr	r3, [pc, #36]	; (8008f2c <mem_free+0x168>)
 8008f06:	f8a3 20ac 	strh.w	r2, [r3, #172]	; 0xac

  /* finally, see if prev or next are free also */
  plug_holes(mem);
 8008f0a:	69f8      	ldr	r0, [r7, #28]
 8008f0c:	f7ff fe24 	bl	8008b58 <plug_holes>
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
 8008f10:	480a      	ldr	r0, [pc, #40]	; (8008f3c <mem_free+0x178>)
 8008f12:	f00a fb00 	bl	8013516 <sys_mutex_unlock>
 8008f16:	e000      	b.n	8008f1a <mem_free+0x156>
    return;
 8008f18:	bf00      	nop
}
 8008f1a:	3720      	adds	r7, #32
 8008f1c:	46bd      	mov	sp, r7
 8008f1e:	bd80      	pop	{r7, pc}
 8008f20:	080149ac 	.word	0x080149ac
 8008f24:	08014a9c 	.word	0x08014a9c
 8008f28:	080149f4 	.word	0x080149f4
 8008f2c:	2000c64c 	.word	0x2000c64c
 8008f30:	200094c8 	.word	0x200094c8
 8008f34:	200094cc 	.word	0x200094cc
 8008f38:	08014ac0 	.word	0x08014ac0
 8008f3c:	200094d0 	.word	0x200094d0
 8008f40:	08014adc 	.word	0x08014adc
 8008f44:	08014b04 	.word	0x08014b04
 8008f48:	200094d4 	.word	0x200094d4

08008f4c <mem_trim>:
 *         or NULL if newsize is > old size, in which case rmem is NOT touched
 *         or freed!
 */
void *
mem_trim(void *rmem, mem_size_t new_size)
{
 8008f4c:	b580      	push	{r7, lr}
 8008f4e:	b088      	sub	sp, #32
 8008f50:	af00      	add	r7, sp, #0
 8008f52:	6078      	str	r0, [r7, #4]
 8008f54:	460b      	mov	r3, r1
 8008f56:	807b      	strh	r3, [r7, #2]
  /* use the FREE_PROTECT here: it protects with sem OR SYS_ARCH_PROTECT */
  LWIP_MEM_FREE_DECL_PROTECT();

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  newsize = (mem_size_t)LWIP_MEM_ALIGN_SIZE(new_size);
 8008f58:	887b      	ldrh	r3, [r7, #2]
 8008f5a:	3303      	adds	r3, #3
 8008f5c:	b29b      	uxth	r3, r3
 8008f5e:	f023 0303 	bic.w	r3, r3, #3
 8008f62:	83fb      	strh	r3, [r7, #30]
  if (newsize < MIN_SIZE_ALIGNED) {
 8008f64:	8bfb      	ldrh	r3, [r7, #30]
 8008f66:	2b0b      	cmp	r3, #11
 8008f68:	d801      	bhi.n	8008f6e <mem_trim+0x22>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    newsize = MIN_SIZE_ALIGNED;
 8008f6a:	230c      	movs	r3, #12
 8008f6c:	83fb      	strh	r3, [r7, #30]
  }
#if MEM_OVERFLOW_CHECK
  newsize += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((newsize > MEM_SIZE_ALIGNED) || (newsize < new_size)) {
 8008f6e:	8bfb      	ldrh	r3, [r7, #30]
 8008f70:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8008f74:	d803      	bhi.n	8008f7e <mem_trim+0x32>
 8008f76:	8bfa      	ldrh	r2, [r7, #30]
 8008f78:	887b      	ldrh	r3, [r7, #2]
 8008f7a:	429a      	cmp	r2, r3
 8008f7c:	d201      	bcs.n	8008f82 <mem_trim+0x36>
    return NULL;
 8008f7e:	2300      	movs	r3, #0
 8008f80:	e0f8      	b.n	8009174 <mem_trim+0x228>
  }

  LWIP_ASSERT("mem_trim: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
 8008f82:	4b7e      	ldr	r3, [pc, #504]	; (800917c <mem_trim+0x230>)
 8008f84:	681b      	ldr	r3, [r3, #0]
 8008f86:	687a      	ldr	r2, [r7, #4]
 8008f88:	429a      	cmp	r2, r3
 8008f8a:	d304      	bcc.n	8008f96 <mem_trim+0x4a>
 8008f8c:	4b7c      	ldr	r3, [pc, #496]	; (8009180 <mem_trim+0x234>)
 8008f8e:	681b      	ldr	r3, [r3, #0]
 8008f90:	687a      	ldr	r2, [r7, #4]
 8008f92:	429a      	cmp	r2, r3
 8008f94:	d306      	bcc.n	8008fa4 <mem_trim+0x58>
 8008f96:	4b7b      	ldr	r3, [pc, #492]	; (8009184 <mem_trim+0x238>)
 8008f98:	f240 22d1 	movw	r2, #721	; 0x2d1
 8008f9c:	497a      	ldr	r1, [pc, #488]	; (8009188 <mem_trim+0x23c>)
 8008f9e:	487b      	ldr	r0, [pc, #492]	; (800918c <mem_trim+0x240>)
 8008fa0:	f00a fce2 	bl	8013968 <iprintf>
              (u8_t *)rmem < (u8_t *)ram_end);

  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
 8008fa4:	4b75      	ldr	r3, [pc, #468]	; (800917c <mem_trim+0x230>)
 8008fa6:	681b      	ldr	r3, [r3, #0]
 8008fa8:	687a      	ldr	r2, [r7, #4]
 8008faa:	429a      	cmp	r2, r3
 8008fac:	d304      	bcc.n	8008fb8 <mem_trim+0x6c>
 8008fae:	4b74      	ldr	r3, [pc, #464]	; (8009180 <mem_trim+0x234>)
 8008fb0:	681b      	ldr	r3, [r3, #0]
 8008fb2:	687a      	ldr	r2, [r7, #4]
 8008fb4:	429a      	cmp	r2, r3
 8008fb6:	d30f      	bcc.n	8008fd8 <mem_trim+0x8c>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_trim: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 8008fb8:	f00a fae0 	bl	801357c <sys_arch_protect>
 8008fbc:	60b8      	str	r0, [r7, #8]
 8008fbe:	4b74      	ldr	r3, [pc, #464]	; (8009190 <mem_trim+0x244>)
 8008fc0:	f8b3 30b0 	ldrh.w	r3, [r3, #176]	; 0xb0
 8008fc4:	3301      	adds	r3, #1
 8008fc6:	b29a      	uxth	r2, r3
 8008fc8:	4b71      	ldr	r3, [pc, #452]	; (8009190 <mem_trim+0x244>)
 8008fca:	f8a3 20b0 	strh.w	r2, [r3, #176]	; 0xb0
 8008fce:	68b8      	ldr	r0, [r7, #8]
 8008fd0:	f00a fae2 	bl	8013598 <sys_arch_unprotect>
    return rmem;
 8008fd4:	687b      	ldr	r3, [r7, #4]
 8008fd6:	e0cd      	b.n	8009174 <mem_trim+0x228>
  }
  /* Get the corresponding struct mem ... */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 8008fd8:	687b      	ldr	r3, [r7, #4]
 8008fda:	3b08      	subs	r3, #8
 8008fdc:	61bb      	str	r3, [r7, #24]
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* ... and its offset pointer */
  ptr = mem_to_ptr(mem);
 8008fde:	69b8      	ldr	r0, [r7, #24]
 8008fe0:	f7ff fda8 	bl	8008b34 <mem_to_ptr>
 8008fe4:	4603      	mov	r3, r0
 8008fe6:	82fb      	strh	r3, [r7, #22]

  size = (mem_size_t)((mem_size_t)(mem->next - ptr) - (SIZEOF_STRUCT_MEM + MEM_SANITY_OVERHEAD));
 8008fe8:	69bb      	ldr	r3, [r7, #24]
 8008fea:	881a      	ldrh	r2, [r3, #0]
 8008fec:	8afb      	ldrh	r3, [r7, #22]
 8008fee:	1ad3      	subs	r3, r2, r3
 8008ff0:	b29b      	uxth	r3, r3
 8008ff2:	3b08      	subs	r3, #8
 8008ff4:	82bb      	strh	r3, [r7, #20]
  LWIP_ASSERT("mem_trim can only shrink memory", newsize <= size);
 8008ff6:	8bfa      	ldrh	r2, [r7, #30]
 8008ff8:	8abb      	ldrh	r3, [r7, #20]
 8008ffa:	429a      	cmp	r2, r3
 8008ffc:	d906      	bls.n	800900c <mem_trim+0xc0>
 8008ffe:	4b61      	ldr	r3, [pc, #388]	; (8009184 <mem_trim+0x238>)
 8009000:	f44f 7239 	mov.w	r2, #740	; 0x2e4
 8009004:	4963      	ldr	r1, [pc, #396]	; (8009194 <mem_trim+0x248>)
 8009006:	4861      	ldr	r0, [pc, #388]	; (800918c <mem_trim+0x240>)
 8009008:	f00a fcae 	bl	8013968 <iprintf>
  if (newsize > size) {
 800900c:	8bfa      	ldrh	r2, [r7, #30]
 800900e:	8abb      	ldrh	r3, [r7, #20]
 8009010:	429a      	cmp	r2, r3
 8009012:	d901      	bls.n	8009018 <mem_trim+0xcc>
    /* not supported */
    return NULL;
 8009014:	2300      	movs	r3, #0
 8009016:	e0ad      	b.n	8009174 <mem_trim+0x228>
  }
  if (newsize == size) {
 8009018:	8bfa      	ldrh	r2, [r7, #30]
 800901a:	8abb      	ldrh	r3, [r7, #20]
 800901c:	429a      	cmp	r2, r3
 800901e:	d101      	bne.n	8009024 <mem_trim+0xd8>
    /* No change in size, simply return */
    return rmem;
 8009020:	687b      	ldr	r3, [r7, #4]
 8009022:	e0a7      	b.n	8009174 <mem_trim+0x228>
  }

  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
 8009024:	485c      	ldr	r0, [pc, #368]	; (8009198 <mem_trim+0x24c>)
 8009026:	f00a fa67 	bl	80134f8 <sys_mutex_lock>

  mem2 = ptr_to_mem(mem->next);
 800902a:	69bb      	ldr	r3, [r7, #24]
 800902c:	881b      	ldrh	r3, [r3, #0]
 800902e:	4618      	mov	r0, r3
 8009030:	f7ff fd6e 	bl	8008b10 <ptr_to_mem>
 8009034:	6138      	str	r0, [r7, #16]
  if (mem2->used == 0) {
 8009036:	693b      	ldr	r3, [r7, #16]
 8009038:	791b      	ldrb	r3, [r3, #4]
 800903a:	2b00      	cmp	r3, #0
 800903c:	d14b      	bne.n	80090d6 <mem_trim+0x18a>
    /* The next struct is unused, we can simply move it at little */
    mem_size_t next;
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 800903e:	69bb      	ldr	r3, [r7, #24]
 8009040:	881b      	ldrh	r3, [r3, #0]
 8009042:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8009046:	d106      	bne.n	8009056 <mem_trim+0x10a>
 8009048:	4b4e      	ldr	r3, [pc, #312]	; (8009184 <mem_trim+0x238>)
 800904a:	f240 22f5 	movw	r2, #757	; 0x2f5
 800904e:	4953      	ldr	r1, [pc, #332]	; (800919c <mem_trim+0x250>)
 8009050:	484e      	ldr	r0, [pc, #312]	; (800918c <mem_trim+0x240>)
 8009052:	f00a fc89 	bl	8013968 <iprintf>
    /* remember the old next pointer */
    next = mem2->next;
 8009056:	693b      	ldr	r3, [r7, #16]
 8009058:	881b      	ldrh	r3, [r3, #0]
 800905a:	81bb      	strh	r3, [r7, #12]
    /* create new struct mem which is moved directly after the shrinked mem */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 800905c:	8afa      	ldrh	r2, [r7, #22]
 800905e:	8bfb      	ldrh	r3, [r7, #30]
 8009060:	4413      	add	r3, r2
 8009062:	b29b      	uxth	r3, r3
 8009064:	3308      	adds	r3, #8
 8009066:	81fb      	strh	r3, [r7, #14]
    if (lfree == mem2) {
 8009068:	4b4d      	ldr	r3, [pc, #308]	; (80091a0 <mem_trim+0x254>)
 800906a:	681b      	ldr	r3, [r3, #0]
 800906c:	693a      	ldr	r2, [r7, #16]
 800906e:	429a      	cmp	r2, r3
 8009070:	d106      	bne.n	8009080 <mem_trim+0x134>
      lfree = ptr_to_mem(ptr2);
 8009072:	89fb      	ldrh	r3, [r7, #14]
 8009074:	4618      	mov	r0, r3
 8009076:	f7ff fd4b 	bl	8008b10 <ptr_to_mem>
 800907a:	4603      	mov	r3, r0
 800907c:	4a48      	ldr	r2, [pc, #288]	; (80091a0 <mem_trim+0x254>)
 800907e:	6013      	str	r3, [r2, #0]
    }
    mem2 = ptr_to_mem(ptr2);
 8009080:	89fb      	ldrh	r3, [r7, #14]
 8009082:	4618      	mov	r0, r3
 8009084:	f7ff fd44 	bl	8008b10 <ptr_to_mem>
 8009088:	6138      	str	r0, [r7, #16]
    mem2->used = 0;
 800908a:	693b      	ldr	r3, [r7, #16]
 800908c:	2200      	movs	r2, #0
 800908e:	711a      	strb	r2, [r3, #4]
    /* restore the next pointer */
    mem2->next = next;
 8009090:	693b      	ldr	r3, [r7, #16]
 8009092:	89ba      	ldrh	r2, [r7, #12]
 8009094:	801a      	strh	r2, [r3, #0]
    /* link it back to mem */
    mem2->prev = ptr;
 8009096:	693b      	ldr	r3, [r7, #16]
 8009098:	8afa      	ldrh	r2, [r7, #22]
 800909a:	805a      	strh	r2, [r3, #2]
    /* link mem to it */
    mem->next = ptr2;
 800909c:	69bb      	ldr	r3, [r7, #24]
 800909e:	89fa      	ldrh	r2, [r7, #14]
 80090a0:	801a      	strh	r2, [r3, #0]
    /* last thing to restore linked list: as we have moved mem2,
     * let 'mem2->next->prev' point to mem2 again. but only if mem2->next is not
     * the end of the heap */
    if (mem2->next != MEM_SIZE_ALIGNED) {
 80090a2:	693b      	ldr	r3, [r7, #16]
 80090a4:	881b      	ldrh	r3, [r3, #0]
 80090a6:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 80090aa:	d007      	beq.n	80090bc <mem_trim+0x170>
      ptr_to_mem(mem2->next)->prev = ptr2;
 80090ac:	693b      	ldr	r3, [r7, #16]
 80090ae:	881b      	ldrh	r3, [r3, #0]
 80090b0:	4618      	mov	r0, r3
 80090b2:	f7ff fd2d 	bl	8008b10 <ptr_to_mem>
 80090b6:	4602      	mov	r2, r0
 80090b8:	89fb      	ldrh	r3, [r7, #14]
 80090ba:	8053      	strh	r3, [r2, #2]
    }
    MEM_STATS_DEC_USED(used, (size - newsize));
 80090bc:	4b34      	ldr	r3, [pc, #208]	; (8009190 <mem_trim+0x244>)
 80090be:	f8b3 20ac 	ldrh.w	r2, [r3, #172]	; 0xac
 80090c2:	8bf9      	ldrh	r1, [r7, #30]
 80090c4:	8abb      	ldrh	r3, [r7, #20]
 80090c6:	1acb      	subs	r3, r1, r3
 80090c8:	b29b      	uxth	r3, r3
 80090ca:	4413      	add	r3, r2
 80090cc:	b29a      	uxth	r2, r3
 80090ce:	4b30      	ldr	r3, [pc, #192]	; (8009190 <mem_trim+0x244>)
 80090d0:	f8a3 20ac 	strh.w	r2, [r3, #172]	; 0xac
 80090d4:	e04a      	b.n	800916c <mem_trim+0x220>
    /* no need to plug holes, we've already done that */
  } else if (newsize + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED <= size) {
 80090d6:	8bfb      	ldrh	r3, [r7, #30]
 80090d8:	f103 0214 	add.w	r2, r3, #20
 80090dc:	8abb      	ldrh	r3, [r7, #20]
 80090de:	429a      	cmp	r2, r3
 80090e0:	d844      	bhi.n	800916c <mem_trim+0x220>
     * Old size ('size') must be big enough to contain at least 'newsize' plus a struct mem
     * ('SIZEOF_STRUCT_MEM') with some data ('MIN_SIZE_ALIGNED').
     * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
     *       region that couldn't hold data, but when mem->next gets freed,
     *       the 2 regions would be combined, resulting in more free memory */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 80090e2:	8afa      	ldrh	r2, [r7, #22]
 80090e4:	8bfb      	ldrh	r3, [r7, #30]
 80090e6:	4413      	add	r3, r2
 80090e8:	b29b      	uxth	r3, r3
 80090ea:	3308      	adds	r3, #8
 80090ec:	81fb      	strh	r3, [r7, #14]
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 80090ee:	69bb      	ldr	r3, [r7, #24]
 80090f0:	881b      	ldrh	r3, [r3, #0]
 80090f2:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 80090f6:	d106      	bne.n	8009106 <mem_trim+0x1ba>
 80090f8:	4b22      	ldr	r3, [pc, #136]	; (8009184 <mem_trim+0x238>)
 80090fa:	f240 3216 	movw	r2, #790	; 0x316
 80090fe:	4927      	ldr	r1, [pc, #156]	; (800919c <mem_trim+0x250>)
 8009100:	4822      	ldr	r0, [pc, #136]	; (800918c <mem_trim+0x240>)
 8009102:	f00a fc31 	bl	8013968 <iprintf>
    mem2 = ptr_to_mem(ptr2);
 8009106:	89fb      	ldrh	r3, [r7, #14]
 8009108:	4618      	mov	r0, r3
 800910a:	f7ff fd01 	bl	8008b10 <ptr_to_mem>
 800910e:	6138      	str	r0, [r7, #16]
    if (mem2 < lfree) {
 8009110:	4b23      	ldr	r3, [pc, #140]	; (80091a0 <mem_trim+0x254>)
 8009112:	681b      	ldr	r3, [r3, #0]
 8009114:	693a      	ldr	r2, [r7, #16]
 8009116:	429a      	cmp	r2, r3
 8009118:	d202      	bcs.n	8009120 <mem_trim+0x1d4>
      lfree = mem2;
 800911a:	4a21      	ldr	r2, [pc, #132]	; (80091a0 <mem_trim+0x254>)
 800911c:	693b      	ldr	r3, [r7, #16]
 800911e:	6013      	str	r3, [r2, #0]
    }
    mem2->used = 0;
 8009120:	693b      	ldr	r3, [r7, #16]
 8009122:	2200      	movs	r2, #0
 8009124:	711a      	strb	r2, [r3, #4]
    mem2->next = mem->next;
 8009126:	69bb      	ldr	r3, [r7, #24]
 8009128:	881a      	ldrh	r2, [r3, #0]
 800912a:	693b      	ldr	r3, [r7, #16]
 800912c:	801a      	strh	r2, [r3, #0]
    mem2->prev = ptr;
 800912e:	693b      	ldr	r3, [r7, #16]
 8009130:	8afa      	ldrh	r2, [r7, #22]
 8009132:	805a      	strh	r2, [r3, #2]
    mem->next = ptr2;
 8009134:	69bb      	ldr	r3, [r7, #24]
 8009136:	89fa      	ldrh	r2, [r7, #14]
 8009138:	801a      	strh	r2, [r3, #0]
    if (mem2->next != MEM_SIZE_ALIGNED) {
 800913a:	693b      	ldr	r3, [r7, #16]
 800913c:	881b      	ldrh	r3, [r3, #0]
 800913e:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8009142:	d007      	beq.n	8009154 <mem_trim+0x208>
      ptr_to_mem(mem2->next)->prev = ptr2;
 8009144:	693b      	ldr	r3, [r7, #16]
 8009146:	881b      	ldrh	r3, [r3, #0]
 8009148:	4618      	mov	r0, r3
 800914a:	f7ff fce1 	bl	8008b10 <ptr_to_mem>
 800914e:	4602      	mov	r2, r0
 8009150:	89fb      	ldrh	r3, [r7, #14]
 8009152:	8053      	strh	r3, [r2, #2]
    }
    MEM_STATS_DEC_USED(used, (size - newsize));
 8009154:	4b0e      	ldr	r3, [pc, #56]	; (8009190 <mem_trim+0x244>)
 8009156:	f8b3 20ac 	ldrh.w	r2, [r3, #172]	; 0xac
 800915a:	8bf9      	ldrh	r1, [r7, #30]
 800915c:	8abb      	ldrh	r3, [r7, #20]
 800915e:	1acb      	subs	r3, r1, r3
 8009160:	b29b      	uxth	r3, r3
 8009162:	4413      	add	r3, r2
 8009164:	b29a      	uxth	r2, r3
 8009166:	4b0a      	ldr	r3, [pc, #40]	; (8009190 <mem_trim+0x244>)
 8009168:	f8a3 20ac 	strh.w	r2, [r3, #172]	; 0xac
#endif
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
 800916c:	480a      	ldr	r0, [pc, #40]	; (8009198 <mem_trim+0x24c>)
 800916e:	f00a f9d2 	bl	8013516 <sys_mutex_unlock>
  return rmem;
 8009172:	687b      	ldr	r3, [r7, #4]
}
 8009174:	4618      	mov	r0, r3
 8009176:	3720      	adds	r7, #32
 8009178:	46bd      	mov	sp, r7
 800917a:	bd80      	pop	{r7, pc}
 800917c:	200094c8 	.word	0x200094c8
 8009180:	200094cc 	.word	0x200094cc
 8009184:	080149ac 	.word	0x080149ac
 8009188:	08014b38 	.word	0x08014b38
 800918c:	080149f4 	.word	0x080149f4
 8009190:	2000c64c 	.word	0x2000c64c
 8009194:	08014b50 	.word	0x08014b50
 8009198:	200094d0 	.word	0x200094d0
 800919c:	08014b70 	.word	0x08014b70
 80091a0:	200094d4 	.word	0x200094d4

080091a4 <mem_malloc>:
 *
 * Note that the returned value will always be aligned (as defined by MEM_ALIGNMENT).
 */
void *
mem_malloc(mem_size_t size_in)
{
 80091a4:	b590      	push	{r4, r7, lr}
 80091a6:	b089      	sub	sp, #36	; 0x24
 80091a8:	af00      	add	r7, sp, #0
 80091aa:	4603      	mov	r3, r0
 80091ac:	80fb      	strh	r3, [r7, #6]
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  u8_t local_mem_free_count = 0;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_ALLOC_DECL_PROTECT();

  if (size_in == 0) {
 80091ae:	88fb      	ldrh	r3, [r7, #6]
 80091b0:	2b00      	cmp	r3, #0
 80091b2:	d101      	bne.n	80091b8 <mem_malloc+0x14>
    return NULL;
 80091b4:	2300      	movs	r3, #0
 80091b6:	e121      	b.n	80093fc <mem_malloc+0x258>
  }

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  size = (mem_size_t)LWIP_MEM_ALIGN_SIZE(size_in);
 80091b8:	88fb      	ldrh	r3, [r7, #6]
 80091ba:	3303      	adds	r3, #3
 80091bc:	b29b      	uxth	r3, r3
 80091be:	f023 0303 	bic.w	r3, r3, #3
 80091c2:	83bb      	strh	r3, [r7, #28]
  if (size < MIN_SIZE_ALIGNED) {
 80091c4:	8bbb      	ldrh	r3, [r7, #28]
 80091c6:	2b0b      	cmp	r3, #11
 80091c8:	d801      	bhi.n	80091ce <mem_malloc+0x2a>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    size = MIN_SIZE_ALIGNED;
 80091ca:	230c      	movs	r3, #12
 80091cc:	83bb      	strh	r3, [r7, #28]
  }
#if MEM_OVERFLOW_CHECK
  size += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((size > MEM_SIZE_ALIGNED) || (size < size_in)) {
 80091ce:	8bbb      	ldrh	r3, [r7, #28]
 80091d0:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 80091d4:	d803      	bhi.n	80091de <mem_malloc+0x3a>
 80091d6:	8bba      	ldrh	r2, [r7, #28]
 80091d8:	88fb      	ldrh	r3, [r7, #6]
 80091da:	429a      	cmp	r2, r3
 80091dc:	d201      	bcs.n	80091e2 <mem_malloc+0x3e>
    return NULL;
 80091de:	2300      	movs	r3, #0
 80091e0:	e10c      	b.n	80093fc <mem_malloc+0x258>
  }

  /* protect the heap from concurrent access */
  sys_mutex_lock(&mem_mutex);
 80091e2:	4888      	ldr	r0, [pc, #544]	; (8009404 <mem_malloc+0x260>)
 80091e4:	f00a f988 	bl	80134f8 <sys_mutex_lock>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

    /* Scan through the heap searching for a free block that is big enough,
     * beginning with the lowest free block.
     */
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 80091e8:	4b87      	ldr	r3, [pc, #540]	; (8009408 <mem_malloc+0x264>)
 80091ea:	681b      	ldr	r3, [r3, #0]
 80091ec:	4618      	mov	r0, r3
 80091ee:	f7ff fca1 	bl	8008b34 <mem_to_ptr>
 80091f2:	4603      	mov	r3, r0
 80091f4:	83fb      	strh	r3, [r7, #30]
 80091f6:	e0ee      	b.n	80093d6 <mem_malloc+0x232>
         ptr = ptr_to_mem(ptr)->next) {
      mem = ptr_to_mem(ptr);
 80091f8:	8bfb      	ldrh	r3, [r7, #30]
 80091fa:	4618      	mov	r0, r3
 80091fc:	f7ff fc88 	bl	8008b10 <ptr_to_mem>
 8009200:	6178      	str	r0, [r7, #20]
        local_mem_free_count = 1;
        break;
      }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

      if ((!mem->used) &&
 8009202:	697b      	ldr	r3, [r7, #20]
 8009204:	791b      	ldrb	r3, [r3, #4]
 8009206:	2b00      	cmp	r3, #0
 8009208:	f040 80de 	bne.w	80093c8 <mem_malloc+0x224>
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
 800920c:	697b      	ldr	r3, [r7, #20]
 800920e:	881b      	ldrh	r3, [r3, #0]
 8009210:	461a      	mov	r2, r3
 8009212:	8bfb      	ldrh	r3, [r7, #30]
 8009214:	1ad3      	subs	r3, r2, r3
 8009216:	f1a3 0208 	sub.w	r2, r3, #8
 800921a:	8bbb      	ldrh	r3, [r7, #28]
      if ((!mem->used) &&
 800921c:	429a      	cmp	r2, r3
 800921e:	f0c0 80d3 	bcc.w	80093c8 <mem_malloc+0x224>
        /* mem is not used and at least perfect fit is possible:
         * mem->next - (ptr + SIZEOF_STRUCT_MEM) gives us the 'user data size' of mem */

        if (mem->next - (ptr + SIZEOF_STRUCT_MEM) >= (size + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED)) {
 8009222:	697b      	ldr	r3, [r7, #20]
 8009224:	881b      	ldrh	r3, [r3, #0]
 8009226:	461a      	mov	r2, r3
 8009228:	8bfb      	ldrh	r3, [r7, #30]
 800922a:	1ad3      	subs	r3, r2, r3
 800922c:	f1a3 0208 	sub.w	r2, r3, #8
 8009230:	8bbb      	ldrh	r3, [r7, #28]
 8009232:	3314      	adds	r3, #20
 8009234:	429a      	cmp	r2, r3
 8009236:	d34c      	bcc.n	80092d2 <mem_malloc+0x12e>
           * struct mem would fit in but no data between mem2 and mem2->next
           * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
           *       region that couldn't hold data, but when mem->next gets freed,
           *       the 2 regions would be combined, resulting in more free memory
           */
          ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + size);
 8009238:	8bfa      	ldrh	r2, [r7, #30]
 800923a:	8bbb      	ldrh	r3, [r7, #28]
 800923c:	4413      	add	r3, r2
 800923e:	b29b      	uxth	r3, r3
 8009240:	3308      	adds	r3, #8
 8009242:	827b      	strh	r3, [r7, #18]
          LWIP_ASSERT("invalid next ptr",ptr2 != MEM_SIZE_ALIGNED);
 8009244:	8a7b      	ldrh	r3, [r7, #18]
 8009246:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800924a:	d106      	bne.n	800925a <mem_malloc+0xb6>
 800924c:	4b6f      	ldr	r3, [pc, #444]	; (800940c <mem_malloc+0x268>)
 800924e:	f240 3287 	movw	r2, #903	; 0x387
 8009252:	496f      	ldr	r1, [pc, #444]	; (8009410 <mem_malloc+0x26c>)
 8009254:	486f      	ldr	r0, [pc, #444]	; (8009414 <mem_malloc+0x270>)
 8009256:	f00a fb87 	bl	8013968 <iprintf>
          /* create mem2 struct */
          mem2 = ptr_to_mem(ptr2);
 800925a:	8a7b      	ldrh	r3, [r7, #18]
 800925c:	4618      	mov	r0, r3
 800925e:	f7ff fc57 	bl	8008b10 <ptr_to_mem>
 8009262:	60f8      	str	r0, [r7, #12]
          mem2->used = 0;
 8009264:	68fb      	ldr	r3, [r7, #12]
 8009266:	2200      	movs	r2, #0
 8009268:	711a      	strb	r2, [r3, #4]
          mem2->next = mem->next;
 800926a:	697b      	ldr	r3, [r7, #20]
 800926c:	881a      	ldrh	r2, [r3, #0]
 800926e:	68fb      	ldr	r3, [r7, #12]
 8009270:	801a      	strh	r2, [r3, #0]
          mem2->prev = ptr;
 8009272:	68fb      	ldr	r3, [r7, #12]
 8009274:	8bfa      	ldrh	r2, [r7, #30]
 8009276:	805a      	strh	r2, [r3, #2]
          /* and insert it between mem and mem->next */
          mem->next = ptr2;
 8009278:	697b      	ldr	r3, [r7, #20]
 800927a:	8a7a      	ldrh	r2, [r7, #18]
 800927c:	801a      	strh	r2, [r3, #0]
          mem->used = 1;
 800927e:	697b      	ldr	r3, [r7, #20]
 8009280:	2201      	movs	r2, #1
 8009282:	711a      	strb	r2, [r3, #4]

          if (mem2->next != MEM_SIZE_ALIGNED) {
 8009284:	68fb      	ldr	r3, [r7, #12]
 8009286:	881b      	ldrh	r3, [r3, #0]
 8009288:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800928c:	d007      	beq.n	800929e <mem_malloc+0xfa>
            ptr_to_mem(mem2->next)->prev = ptr2;
 800928e:	68fb      	ldr	r3, [r7, #12]
 8009290:	881b      	ldrh	r3, [r3, #0]
 8009292:	4618      	mov	r0, r3
 8009294:	f7ff fc3c 	bl	8008b10 <ptr_to_mem>
 8009298:	4602      	mov	r2, r0
 800929a:	8a7b      	ldrh	r3, [r7, #18]
 800929c:	8053      	strh	r3, [r2, #2]
          }
          MEM_STATS_INC_USED(used, (size + SIZEOF_STRUCT_MEM));
 800929e:	4b5e      	ldr	r3, [pc, #376]	; (8009418 <mem_malloc+0x274>)
 80092a0:	f8b3 20ac 	ldrh.w	r2, [r3, #172]	; 0xac
 80092a4:	8bbb      	ldrh	r3, [r7, #28]
 80092a6:	4413      	add	r3, r2
 80092a8:	b29b      	uxth	r3, r3
 80092aa:	3308      	adds	r3, #8
 80092ac:	b29a      	uxth	r2, r3
 80092ae:	4b5a      	ldr	r3, [pc, #360]	; (8009418 <mem_malloc+0x274>)
 80092b0:	f8a3 20ac 	strh.w	r2, [r3, #172]	; 0xac
 80092b4:	4b58      	ldr	r3, [pc, #352]	; (8009418 <mem_malloc+0x274>)
 80092b6:	f8b3 20ae 	ldrh.w	r2, [r3, #174]	; 0xae
 80092ba:	4b57      	ldr	r3, [pc, #348]	; (8009418 <mem_malloc+0x274>)
 80092bc:	f8b3 30ac 	ldrh.w	r3, [r3, #172]	; 0xac
 80092c0:	429a      	cmp	r2, r3
 80092c2:	d227      	bcs.n	8009314 <mem_malloc+0x170>
 80092c4:	4b54      	ldr	r3, [pc, #336]	; (8009418 <mem_malloc+0x274>)
 80092c6:	f8b3 20ac 	ldrh.w	r2, [r3, #172]	; 0xac
 80092ca:	4b53      	ldr	r3, [pc, #332]	; (8009418 <mem_malloc+0x274>)
 80092cc:	f8a3 20ae 	strh.w	r2, [r3, #174]	; 0xae
 80092d0:	e020      	b.n	8009314 <mem_malloc+0x170>
           * take care of this).
           * -> near fit or exact fit: do not split, no mem2 creation
           * also can't move mem->next directly behind mem, since mem->next
           * will always be used at this point!
           */
          mem->used = 1;
 80092d2:	697b      	ldr	r3, [r7, #20]
 80092d4:	2201      	movs	r2, #1
 80092d6:	711a      	strb	r2, [r3, #4]
          MEM_STATS_INC_USED(used, mem->next - mem_to_ptr(mem));
 80092d8:	4b4f      	ldr	r3, [pc, #316]	; (8009418 <mem_malloc+0x274>)
 80092da:	f8b3 20ac 	ldrh.w	r2, [r3, #172]	; 0xac
 80092de:	697b      	ldr	r3, [r7, #20]
 80092e0:	881b      	ldrh	r3, [r3, #0]
 80092e2:	4413      	add	r3, r2
 80092e4:	b29c      	uxth	r4, r3
 80092e6:	6978      	ldr	r0, [r7, #20]
 80092e8:	f7ff fc24 	bl	8008b34 <mem_to_ptr>
 80092ec:	4603      	mov	r3, r0
 80092ee:	1ae3      	subs	r3, r4, r3
 80092f0:	b29a      	uxth	r2, r3
 80092f2:	4b49      	ldr	r3, [pc, #292]	; (8009418 <mem_malloc+0x274>)
 80092f4:	f8a3 20ac 	strh.w	r2, [r3, #172]	; 0xac
 80092f8:	4b47      	ldr	r3, [pc, #284]	; (8009418 <mem_malloc+0x274>)
 80092fa:	f8b3 20ae 	ldrh.w	r2, [r3, #174]	; 0xae
 80092fe:	4b46      	ldr	r3, [pc, #280]	; (8009418 <mem_malloc+0x274>)
 8009300:	f8b3 30ac 	ldrh.w	r3, [r3, #172]	; 0xac
 8009304:	429a      	cmp	r2, r3
 8009306:	d205      	bcs.n	8009314 <mem_malloc+0x170>
 8009308:	4b43      	ldr	r3, [pc, #268]	; (8009418 <mem_malloc+0x274>)
 800930a:	f8b3 20ac 	ldrh.w	r2, [r3, #172]	; 0xac
 800930e:	4b42      	ldr	r3, [pc, #264]	; (8009418 <mem_malloc+0x274>)
 8009310:	f8a3 20ae 	strh.w	r2, [r3, #174]	; 0xae
        }
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
mem_malloc_adjust_lfree:
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
        if (mem == lfree) {
 8009314:	4b3c      	ldr	r3, [pc, #240]	; (8009408 <mem_malloc+0x264>)
 8009316:	681b      	ldr	r3, [r3, #0]
 8009318:	697a      	ldr	r2, [r7, #20]
 800931a:	429a      	cmp	r2, r3
 800931c:	d127      	bne.n	800936e <mem_malloc+0x1ca>
          struct mem *cur = lfree;
 800931e:	4b3a      	ldr	r3, [pc, #232]	; (8009408 <mem_malloc+0x264>)
 8009320:	681b      	ldr	r3, [r3, #0]
 8009322:	61bb      	str	r3, [r7, #24]
          /* Find next free block after mem and update lowest free pointer */
          while (cur->used && cur != ram_end) {
 8009324:	e005      	b.n	8009332 <mem_malloc+0x18e>
              /* If mem_free or mem_trim have run, we have to restart since they
                 could have altered our current struct mem or lfree. */
              goto mem_malloc_adjust_lfree;
            }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
            cur = ptr_to_mem(cur->next);
 8009326:	69bb      	ldr	r3, [r7, #24]
 8009328:	881b      	ldrh	r3, [r3, #0]
 800932a:	4618      	mov	r0, r3
 800932c:	f7ff fbf0 	bl	8008b10 <ptr_to_mem>
 8009330:	61b8      	str	r0, [r7, #24]
          while (cur->used && cur != ram_end) {
 8009332:	69bb      	ldr	r3, [r7, #24]
 8009334:	791b      	ldrb	r3, [r3, #4]
 8009336:	2b00      	cmp	r3, #0
 8009338:	d004      	beq.n	8009344 <mem_malloc+0x1a0>
 800933a:	4b38      	ldr	r3, [pc, #224]	; (800941c <mem_malloc+0x278>)
 800933c:	681b      	ldr	r3, [r3, #0]
 800933e:	69ba      	ldr	r2, [r7, #24]
 8009340:	429a      	cmp	r2, r3
 8009342:	d1f0      	bne.n	8009326 <mem_malloc+0x182>
          }
          lfree = cur;
 8009344:	4a30      	ldr	r2, [pc, #192]	; (8009408 <mem_malloc+0x264>)
 8009346:	69bb      	ldr	r3, [r7, #24]
 8009348:	6013      	str	r3, [r2, #0]
          LWIP_ASSERT("mem_malloc: !lfree->used", ((lfree == ram_end) || (!lfree->used)));
 800934a:	4b2f      	ldr	r3, [pc, #188]	; (8009408 <mem_malloc+0x264>)
 800934c:	681a      	ldr	r2, [r3, #0]
 800934e:	4b33      	ldr	r3, [pc, #204]	; (800941c <mem_malloc+0x278>)
 8009350:	681b      	ldr	r3, [r3, #0]
 8009352:	429a      	cmp	r2, r3
 8009354:	d00b      	beq.n	800936e <mem_malloc+0x1ca>
 8009356:	4b2c      	ldr	r3, [pc, #176]	; (8009408 <mem_malloc+0x264>)
 8009358:	681b      	ldr	r3, [r3, #0]
 800935a:	791b      	ldrb	r3, [r3, #4]
 800935c:	2b00      	cmp	r3, #0
 800935e:	d006      	beq.n	800936e <mem_malloc+0x1ca>
 8009360:	4b2a      	ldr	r3, [pc, #168]	; (800940c <mem_malloc+0x268>)
 8009362:	f240 32b5 	movw	r2, #949	; 0x3b5
 8009366:	492e      	ldr	r1, [pc, #184]	; (8009420 <mem_malloc+0x27c>)
 8009368:	482a      	ldr	r0, [pc, #168]	; (8009414 <mem_malloc+0x270>)
 800936a:	f00a fafd 	bl	8013968 <iprintf>
        }
        LWIP_MEM_ALLOC_UNPROTECT();
        sys_mutex_unlock(&mem_mutex);
 800936e:	4825      	ldr	r0, [pc, #148]	; (8009404 <mem_malloc+0x260>)
 8009370:	f00a f8d1 	bl	8013516 <sys_mutex_unlock>
        LWIP_ASSERT("mem_malloc: allocated memory not above ram_end.",
 8009374:	8bba      	ldrh	r2, [r7, #28]
 8009376:	697b      	ldr	r3, [r7, #20]
 8009378:	4413      	add	r3, r2
 800937a:	3308      	adds	r3, #8
 800937c:	4a27      	ldr	r2, [pc, #156]	; (800941c <mem_malloc+0x278>)
 800937e:	6812      	ldr	r2, [r2, #0]
 8009380:	4293      	cmp	r3, r2
 8009382:	d906      	bls.n	8009392 <mem_malloc+0x1ee>
 8009384:	4b21      	ldr	r3, [pc, #132]	; (800940c <mem_malloc+0x268>)
 8009386:	f240 32b9 	movw	r2, #953	; 0x3b9
 800938a:	4926      	ldr	r1, [pc, #152]	; (8009424 <mem_malloc+0x280>)
 800938c:	4821      	ldr	r0, [pc, #132]	; (8009414 <mem_malloc+0x270>)
 800938e:	f00a faeb 	bl	8013968 <iprintf>
                    (mem_ptr_t)mem + SIZEOF_STRUCT_MEM + size <= (mem_ptr_t)ram_end);
        LWIP_ASSERT("mem_malloc: allocated memory properly aligned.",
 8009392:	697b      	ldr	r3, [r7, #20]
 8009394:	f003 0303 	and.w	r3, r3, #3
 8009398:	2b00      	cmp	r3, #0
 800939a:	d006      	beq.n	80093aa <mem_malloc+0x206>
 800939c:	4b1b      	ldr	r3, [pc, #108]	; (800940c <mem_malloc+0x268>)
 800939e:	f240 32bb 	movw	r2, #955	; 0x3bb
 80093a2:	4921      	ldr	r1, [pc, #132]	; (8009428 <mem_malloc+0x284>)
 80093a4:	481b      	ldr	r0, [pc, #108]	; (8009414 <mem_malloc+0x270>)
 80093a6:	f00a fadf 	bl	8013968 <iprintf>
                    ((mem_ptr_t)mem + SIZEOF_STRUCT_MEM) % MEM_ALIGNMENT == 0);
        LWIP_ASSERT("mem_malloc: sanity check alignment",
 80093aa:	697b      	ldr	r3, [r7, #20]
 80093ac:	f003 0303 	and.w	r3, r3, #3
 80093b0:	2b00      	cmp	r3, #0
 80093b2:	d006      	beq.n	80093c2 <mem_malloc+0x21e>
 80093b4:	4b15      	ldr	r3, [pc, #84]	; (800940c <mem_malloc+0x268>)
 80093b6:	f240 32bd 	movw	r2, #957	; 0x3bd
 80093ba:	491c      	ldr	r1, [pc, #112]	; (800942c <mem_malloc+0x288>)
 80093bc:	4815      	ldr	r0, [pc, #84]	; (8009414 <mem_malloc+0x270>)
 80093be:	f00a fad3 	bl	8013968 <iprintf>

#if MEM_OVERFLOW_CHECK
        mem_overflow_init_element(mem, size_in);
#endif
        MEM_SANITY();
        return (u8_t *)mem + SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET;
 80093c2:	697b      	ldr	r3, [r7, #20]
 80093c4:	3308      	adds	r3, #8
 80093c6:	e019      	b.n	80093fc <mem_malloc+0x258>
         ptr = ptr_to_mem(ptr)->next) {
 80093c8:	8bfb      	ldrh	r3, [r7, #30]
 80093ca:	4618      	mov	r0, r3
 80093cc:	f7ff fba0 	bl	8008b10 <ptr_to_mem>
 80093d0:	4603      	mov	r3, r0
 80093d2:	881b      	ldrh	r3, [r3, #0]
 80093d4:	83fb      	strh	r3, [r7, #30]
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 80093d6:	8bfa      	ldrh	r2, [r7, #30]
 80093d8:	8bbb      	ldrh	r3, [r7, #28]
 80093da:	f5c3 63c8 	rsb	r3, r3, #1600	; 0x640
 80093de:	429a      	cmp	r2, r3
 80093e0:	f4ff af0a 	bcc.w	80091f8 <mem_malloc+0x54>
    }
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
    /* if we got interrupted by a mem_free, try again */
  } while (local_mem_free_count != 0);
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  MEM_STATS_INC(err);
 80093e4:	4b0c      	ldr	r3, [pc, #48]	; (8009418 <mem_malloc+0x274>)
 80093e6:	f8b3 30a8 	ldrh.w	r3, [r3, #168]	; 0xa8
 80093ea:	3301      	adds	r3, #1
 80093ec:	b29a      	uxth	r2, r3
 80093ee:	4b0a      	ldr	r3, [pc, #40]	; (8009418 <mem_malloc+0x274>)
 80093f0:	f8a3 20a8 	strh.w	r2, [r3, #168]	; 0xa8
  LWIP_MEM_ALLOC_UNPROTECT();
  sys_mutex_unlock(&mem_mutex);
 80093f4:	4803      	ldr	r0, [pc, #12]	; (8009404 <mem_malloc+0x260>)
 80093f6:	f00a f88e 	bl	8013516 <sys_mutex_unlock>
  LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("mem_malloc: could not allocate %"S16_F" bytes\n", (s16_t)size));
  return NULL;
 80093fa:	2300      	movs	r3, #0
}
 80093fc:	4618      	mov	r0, r3
 80093fe:	3724      	adds	r7, #36	; 0x24
 8009400:	46bd      	mov	sp, r7
 8009402:	bd90      	pop	{r4, r7, pc}
 8009404:	200094d0 	.word	0x200094d0
 8009408:	200094d4 	.word	0x200094d4
 800940c:	080149ac 	.word	0x080149ac
 8009410:	08014b70 	.word	0x08014b70
 8009414:	080149f4 	.word	0x080149f4
 8009418:	2000c64c 	.word	0x2000c64c
 800941c:	200094cc 	.word	0x200094cc
 8009420:	08014b84 	.word	0x08014b84
 8009424:	08014ba0 	.word	0x08014ba0
 8009428:	08014bd0 	.word	0x08014bd0
 800942c:	08014c00 	.word	0x08014c00

08009430 <memp_init_pool>:
 *
 * @param desc pool to initialize
 */
void
memp_init_pool(const struct memp_desc *desc)
{
 8009430:	b480      	push	{r7}
 8009432:	b085      	sub	sp, #20
 8009434:	af00      	add	r7, sp, #0
 8009436:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(desc);
#else
  int i;
  struct memp *memp;

  *desc->tab = NULL;
 8009438:	687b      	ldr	r3, [r7, #4]
 800943a:	68db      	ldr	r3, [r3, #12]
 800943c:	2200      	movs	r2, #0
 800943e:	601a      	str	r2, [r3, #0]
  memp = (struct memp *)LWIP_MEM_ALIGN(desc->base);
 8009440:	687b      	ldr	r3, [r7, #4]
 8009442:	689b      	ldr	r3, [r3, #8]
 8009444:	3303      	adds	r3, #3
 8009446:	f023 0303 	bic.w	r3, r3, #3
 800944a:	60bb      	str	r3, [r7, #8]
                                       + MEM_SANITY_REGION_AFTER_ALIGNED
#endif
                                      ));
#endif
  /* create a linked list of memp elements */
  for (i = 0; i < desc->num; ++i) {
 800944c:	2300      	movs	r3, #0
 800944e:	60fb      	str	r3, [r7, #12]
 8009450:	e011      	b.n	8009476 <memp_init_pool+0x46>
    memp->next = *desc->tab;
 8009452:	687b      	ldr	r3, [r7, #4]
 8009454:	68db      	ldr	r3, [r3, #12]
 8009456:	681a      	ldr	r2, [r3, #0]
 8009458:	68bb      	ldr	r3, [r7, #8]
 800945a:	601a      	str	r2, [r3, #0]
    *desc->tab = memp;
 800945c:	687b      	ldr	r3, [r7, #4]
 800945e:	68db      	ldr	r3, [r3, #12]
 8009460:	68ba      	ldr	r2, [r7, #8]
 8009462:	601a      	str	r2, [r3, #0]
#if MEMP_OVERFLOW_CHECK
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */
    /* cast through void* to get rid of alignment warnings */
    memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + desc->size
 8009464:	687b      	ldr	r3, [r7, #4]
 8009466:	889b      	ldrh	r3, [r3, #4]
 8009468:	461a      	mov	r2, r3
 800946a:	68bb      	ldr	r3, [r7, #8]
 800946c:	4413      	add	r3, r2
 800946e:	60bb      	str	r3, [r7, #8]
  for (i = 0; i < desc->num; ++i) {
 8009470:	68fb      	ldr	r3, [r7, #12]
 8009472:	3301      	adds	r3, #1
 8009474:	60fb      	str	r3, [r7, #12]
 8009476:	687b      	ldr	r3, [r7, #4]
 8009478:	88db      	ldrh	r3, [r3, #6]
 800947a:	461a      	mov	r2, r3
 800947c:	68fb      	ldr	r3, [r7, #12]
 800947e:	4293      	cmp	r3, r2
 8009480:	dbe7      	blt.n	8009452 <memp_init_pool+0x22>
                                   + MEM_SANITY_REGION_AFTER_ALIGNED
#endif
                                  );
  }
#if MEMP_STATS
  desc->stats->avail = desc->num;
 8009482:	687b      	ldr	r3, [r7, #4]
 8009484:	681b      	ldr	r3, [r3, #0]
 8009486:	687a      	ldr	r2, [r7, #4]
 8009488:	88d2      	ldrh	r2, [r2, #6]
 800948a:	805a      	strh	r2, [r3, #2]
#endif /* !MEMP_MEM_MALLOC */

#if MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY)
  desc->stats->name  = desc->desc;
#endif /* MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY) */
}
 800948c:	bf00      	nop
 800948e:	3714      	adds	r7, #20
 8009490:	46bd      	mov	sp, r7
 8009492:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009496:	4770      	bx	lr

08009498 <memp_init>:
 *
 * Carves out memp_memory into linked lists for each pool-type.
 */
void
memp_init(void)
{
 8009498:	b580      	push	{r7, lr}
 800949a:	b082      	sub	sp, #8
 800949c:	af00      	add	r7, sp, #0
  u16_t i;

  /* for every pool: */
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 800949e:	2300      	movs	r3, #0
 80094a0:	80fb      	strh	r3, [r7, #6]
 80094a2:	e014      	b.n	80094ce <memp_init+0x36>
    memp_init_pool(memp_pools[i]);
 80094a4:	88fb      	ldrh	r3, [r7, #6]
 80094a6:	4a0e      	ldr	r2, [pc, #56]	; (80094e0 <memp_init+0x48>)
 80094a8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80094ac:	4618      	mov	r0, r3
 80094ae:	f7ff ffbf 	bl	8009430 <memp_init_pool>

#if LWIP_STATS && MEMP_STATS
    lwip_stats.memp[i] = memp_pools[i]->stats;
 80094b2:	88fb      	ldrh	r3, [r7, #6]
 80094b4:	4a0a      	ldr	r2, [pc, #40]	; (80094e0 <memp_init+0x48>)
 80094b6:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80094ba:	88fb      	ldrh	r3, [r7, #6]
 80094bc:	6812      	ldr	r2, [r2, #0]
 80094be:	4909      	ldr	r1, [pc, #36]	; (80094e4 <memp_init+0x4c>)
 80094c0:	332c      	adds	r3, #44	; 0x2c
 80094c2:	009b      	lsls	r3, r3, #2
 80094c4:	440b      	add	r3, r1
 80094c6:	605a      	str	r2, [r3, #4]
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 80094c8:	88fb      	ldrh	r3, [r7, #6]
 80094ca:	3301      	adds	r3, #1
 80094cc:	80fb      	strh	r3, [r7, #6]
 80094ce:	88fb      	ldrh	r3, [r7, #6]
 80094d0:	2b0c      	cmp	r3, #12
 80094d2:	d9e7      	bls.n	80094a4 <memp_init+0xc>

#if MEMP_OVERFLOW_CHECK >= 2
  /* check everything a first time to see if it worked */
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */
}
 80094d4:	bf00      	nop
 80094d6:	bf00      	nop
 80094d8:	3708      	adds	r7, #8
 80094da:	46bd      	mov	sp, r7
 80094dc:	bd80      	pop	{r7, pc}
 80094de:	bf00      	nop
 80094e0:	0801744c 	.word	0x0801744c
 80094e4:	2000c64c 	.word	0x2000c64c

080094e8 <do_memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
do_memp_malloc_pool(const struct memp_desc *desc)
#else
do_memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 80094e8:	b580      	push	{r7, lr}
 80094ea:	b084      	sub	sp, #16
 80094ec:	af00      	add	r7, sp, #0
 80094ee:	6078      	str	r0, [r7, #4]

#if MEMP_MEM_MALLOC
  memp = (struct memp *)mem_malloc(MEMP_SIZE + MEMP_ALIGN_SIZE(desc->size));
  SYS_ARCH_PROTECT(old_level);
#else /* MEMP_MEM_MALLOC */
  SYS_ARCH_PROTECT(old_level);
 80094f0:	f00a f844 	bl	801357c <sys_arch_protect>
 80094f4:	60f8      	str	r0, [r7, #12]

  memp = *desc->tab;
 80094f6:	687b      	ldr	r3, [r7, #4]
 80094f8:	68db      	ldr	r3, [r3, #12]
 80094fa:	681b      	ldr	r3, [r3, #0]
 80094fc:	60bb      	str	r3, [r7, #8]
#endif /* MEMP_MEM_MALLOC */

  if (memp != NULL) {
 80094fe:	68bb      	ldr	r3, [r7, #8]
 8009500:	2b00      	cmp	r3, #0
 8009502:	d029      	beq.n	8009558 <do_memp_malloc_pool+0x70>
#if !MEMP_MEM_MALLOC
#if MEMP_OVERFLOW_CHECK == 1
    memp_overflow_check_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */

    *desc->tab = memp->next;
 8009504:	687b      	ldr	r3, [r7, #4]
 8009506:	68db      	ldr	r3, [r3, #12]
 8009508:	68ba      	ldr	r2, [r7, #8]
 800950a:	6812      	ldr	r2, [r2, #0]
 800950c:	601a      	str	r2, [r3, #0]
    memp->line = line;
#if MEMP_MEM_MALLOC
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_MEM_MALLOC */
#endif /* MEMP_OVERFLOW_CHECK */
    LWIP_ASSERT("memp_malloc: memp properly aligned",
 800950e:	68bb      	ldr	r3, [r7, #8]
 8009510:	f003 0303 	and.w	r3, r3, #3
 8009514:	2b00      	cmp	r3, #0
 8009516:	d006      	beq.n	8009526 <do_memp_malloc_pool+0x3e>
 8009518:	4b16      	ldr	r3, [pc, #88]	; (8009574 <do_memp_malloc_pool+0x8c>)
 800951a:	f44f 728c 	mov.w	r2, #280	; 0x118
 800951e:	4916      	ldr	r1, [pc, #88]	; (8009578 <do_memp_malloc_pool+0x90>)
 8009520:	4816      	ldr	r0, [pc, #88]	; (800957c <do_memp_malloc_pool+0x94>)
 8009522:	f00a fa21 	bl	8013968 <iprintf>
                ((mem_ptr_t)memp % MEM_ALIGNMENT) == 0);
#if MEMP_STATS
    desc->stats->used++;
 8009526:	687b      	ldr	r3, [r7, #4]
 8009528:	681b      	ldr	r3, [r3, #0]
 800952a:	889a      	ldrh	r2, [r3, #4]
 800952c:	3201      	adds	r2, #1
 800952e:	b292      	uxth	r2, r2
 8009530:	809a      	strh	r2, [r3, #4]
    if (desc->stats->used > desc->stats->max) {
 8009532:	687b      	ldr	r3, [r7, #4]
 8009534:	681b      	ldr	r3, [r3, #0]
 8009536:	889a      	ldrh	r2, [r3, #4]
 8009538:	687b      	ldr	r3, [r7, #4]
 800953a:	681b      	ldr	r3, [r3, #0]
 800953c:	88db      	ldrh	r3, [r3, #6]
 800953e:	429a      	cmp	r2, r3
 8009540:	d905      	bls.n	800954e <do_memp_malloc_pool+0x66>
      desc->stats->max = desc->stats->used;
 8009542:	687b      	ldr	r3, [r7, #4]
 8009544:	681a      	ldr	r2, [r3, #0]
 8009546:	687b      	ldr	r3, [r7, #4]
 8009548:	681b      	ldr	r3, [r3, #0]
 800954a:	8892      	ldrh	r2, [r2, #4]
 800954c:	80da      	strh	r2, [r3, #6]
    }
#endif
    SYS_ARCH_UNPROTECT(old_level);
 800954e:	68f8      	ldr	r0, [r7, #12]
 8009550:	f00a f822 	bl	8013598 <sys_arch_unprotect>
    /* cast through u8_t* to get rid of alignment warnings */
    return ((u8_t *)memp + MEMP_SIZE);
 8009554:	68bb      	ldr	r3, [r7, #8]
 8009556:	e009      	b.n	800956c <do_memp_malloc_pool+0x84>
  } else {
#if MEMP_STATS
    desc->stats->err++;
 8009558:	687b      	ldr	r3, [r7, #4]
 800955a:	681b      	ldr	r3, [r3, #0]
 800955c:	881a      	ldrh	r2, [r3, #0]
 800955e:	3201      	adds	r2, #1
 8009560:	b292      	uxth	r2, r2
 8009562:	801a      	strh	r2, [r3, #0]
#endif
    SYS_ARCH_UNPROTECT(old_level);
 8009564:	68f8      	ldr	r0, [r7, #12]
 8009566:	f00a f817 	bl	8013598 <sys_arch_unprotect>
    LWIP_DEBUGF(MEMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("memp_malloc: out of memory in pool %s\n", desc->desc));
  }

  return NULL;
 800956a:	2300      	movs	r3, #0
}
 800956c:	4618      	mov	r0, r3
 800956e:	3710      	adds	r7, #16
 8009570:	46bd      	mov	sp, r7
 8009572:	bd80      	pop	{r7, pc}
 8009574:	08014c24 	.word	0x08014c24
 8009578:	08014c54 	.word	0x08014c54
 800957c:	08014c78 	.word	0x08014c78

08009580 <memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc_pool(const struct memp_desc *desc)
#else
memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 8009580:	b580      	push	{r7, lr}
 8009582:	b082      	sub	sp, #8
 8009584:	af00      	add	r7, sp, #0
 8009586:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("invalid pool desc", desc != NULL);
 8009588:	687b      	ldr	r3, [r7, #4]
 800958a:	2b00      	cmp	r3, #0
 800958c:	d106      	bne.n	800959c <memp_malloc_pool+0x1c>
 800958e:	4b0a      	ldr	r3, [pc, #40]	; (80095b8 <memp_malloc_pool+0x38>)
 8009590:	f44f 729e 	mov.w	r2, #316	; 0x13c
 8009594:	4909      	ldr	r1, [pc, #36]	; (80095bc <memp_malloc_pool+0x3c>)
 8009596:	480a      	ldr	r0, [pc, #40]	; (80095c0 <memp_malloc_pool+0x40>)
 8009598:	f00a f9e6 	bl	8013968 <iprintf>
  if (desc == NULL) {
 800959c:	687b      	ldr	r3, [r7, #4]
 800959e:	2b00      	cmp	r3, #0
 80095a0:	d101      	bne.n	80095a6 <memp_malloc_pool+0x26>
    return NULL;
 80095a2:	2300      	movs	r3, #0
 80095a4:	e003      	b.n	80095ae <memp_malloc_pool+0x2e>
  }

#if !MEMP_OVERFLOW_CHECK
  return do_memp_malloc_pool(desc);
 80095a6:	6878      	ldr	r0, [r7, #4]
 80095a8:	f7ff ff9e 	bl	80094e8 <do_memp_malloc_pool>
 80095ac:	4603      	mov	r3, r0
#else
  return do_memp_malloc_pool_fn(desc, file, line);
#endif
}
 80095ae:	4618      	mov	r0, r3
 80095b0:	3708      	adds	r7, #8
 80095b2:	46bd      	mov	sp, r7
 80095b4:	bd80      	pop	{r7, pc}
 80095b6:	bf00      	nop
 80095b8:	08014c24 	.word	0x08014c24
 80095bc:	08014ca0 	.word	0x08014ca0
 80095c0:	08014c78 	.word	0x08014c78

080095c4 <memp_malloc>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc(memp_t type)
#else
memp_malloc_fn(memp_t type, const char *file, const int line)
#endif
{
 80095c4:	b580      	push	{r7, lr}
 80095c6:	b084      	sub	sp, #16
 80095c8:	af00      	add	r7, sp, #0
 80095ca:	4603      	mov	r3, r0
 80095cc:	71fb      	strb	r3, [r7, #7]
  void *memp;
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 80095ce:	79fb      	ldrb	r3, [r7, #7]
 80095d0:	2b0c      	cmp	r3, #12
 80095d2:	d908      	bls.n	80095e6 <memp_malloc+0x22>
 80095d4:	4b0a      	ldr	r3, [pc, #40]	; (8009600 <memp_malloc+0x3c>)
 80095d6:	f240 1257 	movw	r2, #343	; 0x157
 80095da:	490a      	ldr	r1, [pc, #40]	; (8009604 <memp_malloc+0x40>)
 80095dc:	480a      	ldr	r0, [pc, #40]	; (8009608 <memp_malloc+0x44>)
 80095de:	f00a f9c3 	bl	8013968 <iprintf>
 80095e2:	2300      	movs	r3, #0
 80095e4:	e008      	b.n	80095f8 <memp_malloc+0x34>
#if MEMP_OVERFLOW_CHECK >= 2
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */

#if !MEMP_OVERFLOW_CHECK
  memp = do_memp_malloc_pool(memp_pools[type]);
 80095e6:	79fb      	ldrb	r3, [r7, #7]
 80095e8:	4a08      	ldr	r2, [pc, #32]	; (800960c <memp_malloc+0x48>)
 80095ea:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80095ee:	4618      	mov	r0, r3
 80095f0:	f7ff ff7a 	bl	80094e8 <do_memp_malloc_pool>
 80095f4:	60f8      	str	r0, [r7, #12]
#else
  memp = do_memp_malloc_pool_fn(memp_pools[type], file, line);
#endif

  return memp;
 80095f6:	68fb      	ldr	r3, [r7, #12]
}
 80095f8:	4618      	mov	r0, r3
 80095fa:	3710      	adds	r7, #16
 80095fc:	46bd      	mov	sp, r7
 80095fe:	bd80      	pop	{r7, pc}
 8009600:	08014c24 	.word	0x08014c24
 8009604:	08014cb4 	.word	0x08014cb4
 8009608:	08014c78 	.word	0x08014c78
 800960c:	0801744c 	.word	0x0801744c

08009610 <do_memp_free_pool>:

static void
do_memp_free_pool(const struct memp_desc *desc, void *mem)
{
 8009610:	b580      	push	{r7, lr}
 8009612:	b084      	sub	sp, #16
 8009614:	af00      	add	r7, sp, #0
 8009616:	6078      	str	r0, [r7, #4]
 8009618:	6039      	str	r1, [r7, #0]
  struct memp *memp;
  SYS_ARCH_DECL_PROTECT(old_level);

  LWIP_ASSERT("memp_free: mem properly aligned",
 800961a:	683b      	ldr	r3, [r7, #0]
 800961c:	f003 0303 	and.w	r3, r3, #3
 8009620:	2b00      	cmp	r3, #0
 8009622:	d006      	beq.n	8009632 <do_memp_free_pool+0x22>
 8009624:	4b10      	ldr	r3, [pc, #64]	; (8009668 <do_memp_free_pool+0x58>)
 8009626:	f44f 72b6 	mov.w	r2, #364	; 0x16c
 800962a:	4910      	ldr	r1, [pc, #64]	; (800966c <do_memp_free_pool+0x5c>)
 800962c:	4810      	ldr	r0, [pc, #64]	; (8009670 <do_memp_free_pool+0x60>)
 800962e:	f00a f99b 	bl	8013968 <iprintf>
              ((mem_ptr_t)mem % MEM_ALIGNMENT) == 0);

  /* cast through void* to get rid of alignment warnings */
  memp = (struct memp *)(void *)((u8_t *)mem - MEMP_SIZE);
 8009632:	683b      	ldr	r3, [r7, #0]
 8009634:	60fb      	str	r3, [r7, #12]

  SYS_ARCH_PROTECT(old_level);
 8009636:	f009 ffa1 	bl	801357c <sys_arch_protect>
 800963a:	60b8      	str	r0, [r7, #8]
#if MEMP_OVERFLOW_CHECK == 1
  memp_overflow_check_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */

#if MEMP_STATS
  desc->stats->used--;
 800963c:	687b      	ldr	r3, [r7, #4]
 800963e:	681b      	ldr	r3, [r3, #0]
 8009640:	889a      	ldrh	r2, [r3, #4]
 8009642:	3a01      	subs	r2, #1
 8009644:	b292      	uxth	r2, r2
 8009646:	809a      	strh	r2, [r3, #4]
#if MEMP_MEM_MALLOC
  LWIP_UNUSED_ARG(desc);
  SYS_ARCH_UNPROTECT(old_level);
  mem_free(memp);
#else /* MEMP_MEM_MALLOC */
  memp->next = *desc->tab;
 8009648:	687b      	ldr	r3, [r7, #4]
 800964a:	68db      	ldr	r3, [r3, #12]
 800964c:	681a      	ldr	r2, [r3, #0]
 800964e:	68fb      	ldr	r3, [r7, #12]
 8009650:	601a      	str	r2, [r3, #0]
  *desc->tab = memp;
 8009652:	687b      	ldr	r3, [r7, #4]
 8009654:	68db      	ldr	r3, [r3, #12]
 8009656:	68fa      	ldr	r2, [r7, #12]
 8009658:	601a      	str	r2, [r3, #0]

#if MEMP_SANITY_CHECK
  LWIP_ASSERT("memp sanity", memp_sanity(desc));
#endif /* MEMP_SANITY_CHECK */

  SYS_ARCH_UNPROTECT(old_level);
 800965a:	68b8      	ldr	r0, [r7, #8]
 800965c:	f009 ff9c 	bl	8013598 <sys_arch_unprotect>
#endif /* !MEMP_MEM_MALLOC */
}
 8009660:	bf00      	nop
 8009662:	3710      	adds	r7, #16
 8009664:	46bd      	mov	sp, r7
 8009666:	bd80      	pop	{r7, pc}
 8009668:	08014c24 	.word	0x08014c24
 800966c:	08014cd4 	.word	0x08014cd4
 8009670:	08014c78 	.word	0x08014c78

08009674 <memp_free_pool>:
 * @param desc the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free_pool(const struct memp_desc *desc, void *mem)
{
 8009674:	b580      	push	{r7, lr}
 8009676:	b082      	sub	sp, #8
 8009678:	af00      	add	r7, sp, #0
 800967a:	6078      	str	r0, [r7, #4]
 800967c:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("invalid pool desc", desc != NULL);
 800967e:	687b      	ldr	r3, [r7, #4]
 8009680:	2b00      	cmp	r3, #0
 8009682:	d106      	bne.n	8009692 <memp_free_pool+0x1e>
 8009684:	4b0a      	ldr	r3, [pc, #40]	; (80096b0 <memp_free_pool+0x3c>)
 8009686:	f240 1295 	movw	r2, #405	; 0x195
 800968a:	490a      	ldr	r1, [pc, #40]	; (80096b4 <memp_free_pool+0x40>)
 800968c:	480a      	ldr	r0, [pc, #40]	; (80096b8 <memp_free_pool+0x44>)
 800968e:	f00a f96b 	bl	8013968 <iprintf>
  if ((desc == NULL) || (mem == NULL)) {
 8009692:	687b      	ldr	r3, [r7, #4]
 8009694:	2b00      	cmp	r3, #0
 8009696:	d007      	beq.n	80096a8 <memp_free_pool+0x34>
 8009698:	683b      	ldr	r3, [r7, #0]
 800969a:	2b00      	cmp	r3, #0
 800969c:	d004      	beq.n	80096a8 <memp_free_pool+0x34>
    return;
  }

  do_memp_free_pool(desc, mem);
 800969e:	6839      	ldr	r1, [r7, #0]
 80096a0:	6878      	ldr	r0, [r7, #4]
 80096a2:	f7ff ffb5 	bl	8009610 <do_memp_free_pool>
 80096a6:	e000      	b.n	80096aa <memp_free_pool+0x36>
    return;
 80096a8:	bf00      	nop
}
 80096aa:	3708      	adds	r7, #8
 80096ac:	46bd      	mov	sp, r7
 80096ae:	bd80      	pop	{r7, pc}
 80096b0:	08014c24 	.word	0x08014c24
 80096b4:	08014ca0 	.word	0x08014ca0
 80096b8:	08014c78 	.word	0x08014c78

080096bc <memp_free>:
 * @param type the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free(memp_t type, void *mem)
{
 80096bc:	b580      	push	{r7, lr}
 80096be:	b082      	sub	sp, #8
 80096c0:	af00      	add	r7, sp, #0
 80096c2:	4603      	mov	r3, r0
 80096c4:	6039      	str	r1, [r7, #0]
 80096c6:	71fb      	strb	r3, [r7, #7]
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  struct memp *old_first;
#endif

  LWIP_ERROR("memp_free: type < MEMP_MAX", (type < MEMP_MAX), return;);
 80096c8:	79fb      	ldrb	r3, [r7, #7]
 80096ca:	2b0c      	cmp	r3, #12
 80096cc:	d907      	bls.n	80096de <memp_free+0x22>
 80096ce:	4b0c      	ldr	r3, [pc, #48]	; (8009700 <memp_free+0x44>)
 80096d0:	f44f 72d5 	mov.w	r2, #426	; 0x1aa
 80096d4:	490b      	ldr	r1, [pc, #44]	; (8009704 <memp_free+0x48>)
 80096d6:	480c      	ldr	r0, [pc, #48]	; (8009708 <memp_free+0x4c>)
 80096d8:	f00a f946 	bl	8013968 <iprintf>
 80096dc:	e00c      	b.n	80096f8 <memp_free+0x3c>

  if (mem == NULL) {
 80096de:	683b      	ldr	r3, [r7, #0]
 80096e0:	2b00      	cmp	r3, #0
 80096e2:	d008      	beq.n	80096f6 <memp_free+0x3a>

#ifdef LWIP_HOOK_MEMP_AVAILABLE
  old_first = *memp_pools[type]->tab;
#endif

  do_memp_free_pool(memp_pools[type], mem);
 80096e4:	79fb      	ldrb	r3, [r7, #7]
 80096e6:	4a09      	ldr	r2, [pc, #36]	; (800970c <memp_free+0x50>)
 80096e8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80096ec:	6839      	ldr	r1, [r7, #0]
 80096ee:	4618      	mov	r0, r3
 80096f0:	f7ff ff8e 	bl	8009610 <do_memp_free_pool>
 80096f4:	e000      	b.n	80096f8 <memp_free+0x3c>
    return;
 80096f6:	bf00      	nop
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  if (old_first == NULL) {
    LWIP_HOOK_MEMP_AVAILABLE(type);
  }
#endif
}
 80096f8:	3708      	adds	r7, #8
 80096fa:	46bd      	mov	sp, r7
 80096fc:	bd80      	pop	{r7, pc}
 80096fe:	bf00      	nop
 8009700:	08014c24 	.word	0x08014c24
 8009704:	08014cf4 	.word	0x08014cf4
 8009708:	08014c78 	.word	0x08014c78
 800970c:	0801744c 	.word	0x0801744c

08009710 <netif_init>:
}
#endif /* LWIP_HAVE_LOOPIF */

void
netif_init(void)
{
 8009710:	b480      	push	{r7}
 8009712:	af00      	add	r7, sp, #0

  netif_set_link_up(&loop_netif);
  netif_set_up(&loop_netif);

#endif /* LWIP_HAVE_LOOPIF */
}
 8009714:	bf00      	nop
 8009716:	46bd      	mov	sp, r7
 8009718:	f85d 7b04 	ldr.w	r7, [sp], #4
 800971c:	4770      	bx	lr
	...

08009720 <netif_add>:
netif_add(struct netif *netif,
#if LWIP_IPV4
          const ip4_addr_t *ipaddr, const ip4_addr_t *netmask, const ip4_addr_t *gw,
#endif /* LWIP_IPV4 */
          void *state, netif_init_fn init, netif_input_fn input)
{
 8009720:	b580      	push	{r7, lr}
 8009722:	b086      	sub	sp, #24
 8009724:	af00      	add	r7, sp, #0
 8009726:	60f8      	str	r0, [r7, #12]
 8009728:	60b9      	str	r1, [r7, #8]
 800972a:	607a      	str	r2, [r7, #4]
 800972c:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("single netif already set", 0);
    return NULL;
  }
#endif

  LWIP_ERROR("netif_add: invalid netif", netif != NULL, return NULL);
 800972e:	68fb      	ldr	r3, [r7, #12]
 8009730:	2b00      	cmp	r3, #0
 8009732:	d108      	bne.n	8009746 <netif_add+0x26>
 8009734:	4b57      	ldr	r3, [pc, #348]	; (8009894 <netif_add+0x174>)
 8009736:	f240 1227 	movw	r2, #295	; 0x127
 800973a:	4957      	ldr	r1, [pc, #348]	; (8009898 <netif_add+0x178>)
 800973c:	4857      	ldr	r0, [pc, #348]	; (800989c <netif_add+0x17c>)
 800973e:	f00a f913 	bl	8013968 <iprintf>
 8009742:	2300      	movs	r3, #0
 8009744:	e0a2      	b.n	800988c <netif_add+0x16c>
  LWIP_ERROR("netif_add: No init function given", init != NULL, return NULL);
 8009746:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009748:	2b00      	cmp	r3, #0
 800974a:	d108      	bne.n	800975e <netif_add+0x3e>
 800974c:	4b51      	ldr	r3, [pc, #324]	; (8009894 <netif_add+0x174>)
 800974e:	f44f 7294 	mov.w	r2, #296	; 0x128
 8009752:	4953      	ldr	r1, [pc, #332]	; (80098a0 <netif_add+0x180>)
 8009754:	4851      	ldr	r0, [pc, #324]	; (800989c <netif_add+0x17c>)
 8009756:	f00a f907 	bl	8013968 <iprintf>
 800975a:	2300      	movs	r3, #0
 800975c:	e096      	b.n	800988c <netif_add+0x16c>

#if LWIP_IPV4
  if (ipaddr == NULL) {
 800975e:	68bb      	ldr	r3, [r7, #8]
 8009760:	2b00      	cmp	r3, #0
 8009762:	d101      	bne.n	8009768 <netif_add+0x48>
    ipaddr = ip_2_ip4(IP4_ADDR_ANY);
 8009764:	4b4f      	ldr	r3, [pc, #316]	; (80098a4 <netif_add+0x184>)
 8009766:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 8009768:	687b      	ldr	r3, [r7, #4]
 800976a:	2b00      	cmp	r3, #0
 800976c:	d101      	bne.n	8009772 <netif_add+0x52>
    netmask = ip_2_ip4(IP4_ADDR_ANY);
 800976e:	4b4d      	ldr	r3, [pc, #308]	; (80098a4 <netif_add+0x184>)
 8009770:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 8009772:	683b      	ldr	r3, [r7, #0]
 8009774:	2b00      	cmp	r3, #0
 8009776:	d101      	bne.n	800977c <netif_add+0x5c>
    gw = ip_2_ip4(IP4_ADDR_ANY);
 8009778:	4b4a      	ldr	r3, [pc, #296]	; (80098a4 <netif_add+0x184>)
 800977a:	603b      	str	r3, [r7, #0]
  }

  /* reset new interface configuration state */
  ip_addr_set_zero_ip4(&netif->ip_addr);
 800977c:	68fb      	ldr	r3, [r7, #12]
 800977e:	2200      	movs	r2, #0
 8009780:	605a      	str	r2, [r3, #4]
  ip_addr_set_zero_ip4(&netif->netmask);
 8009782:	68fb      	ldr	r3, [r7, #12]
 8009784:	2200      	movs	r2, #0
 8009786:	609a      	str	r2, [r3, #8]
  ip_addr_set_zero_ip4(&netif->gw);
 8009788:	68fb      	ldr	r3, [r7, #12]
 800978a:	2200      	movs	r2, #0
 800978c:	60da      	str	r2, [r3, #12]
  netif->output = netif_null_output_ip4;
 800978e:	68fb      	ldr	r3, [r7, #12]
 8009790:	4a45      	ldr	r2, [pc, #276]	; (80098a8 <netif_add+0x188>)
 8009792:	615a      	str	r2, [r3, #20]
#endif /* LWIP_IPV6_ADDRESS_LIFETIMES */
  }
  netif->output_ip6 = netif_null_output_ip6;
#endif /* LWIP_IPV6 */
  NETIF_SET_CHECKSUM_CTRL(netif, NETIF_CHECKSUM_ENABLE_ALL);
  netif->mtu = 0;
 8009794:	68fb      	ldr	r3, [r7, #12]
 8009796:	2200      	movs	r2, #0
 8009798:	849a      	strh	r2, [r3, #36]	; 0x24
  netif->flags = 0;
 800979a:	68fb      	ldr	r3, [r7, #12]
 800979c:	2200      	movs	r2, #0
 800979e:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
#endif /* LWIP_IPV6 */
#if LWIP_NETIF_STATUS_CALLBACK
  netif->status_callback = NULL;
#endif /* LWIP_NETIF_STATUS_CALLBACK */
#if LWIP_NETIF_LINK_CALLBACK
  netif->link_callback = NULL;
 80097a2:	68fb      	ldr	r3, [r7, #12]
 80097a4:	2200      	movs	r2, #0
 80097a6:	61da      	str	r2, [r3, #28]
  netif->loop_first = NULL;
  netif->loop_last = NULL;
#endif /* ENABLE_LOOPBACK */

  /* remember netif specific state information data */
  netif->state = state;
 80097a8:	68fb      	ldr	r3, [r7, #12]
 80097aa:	6a3a      	ldr	r2, [r7, #32]
 80097ac:	621a      	str	r2, [r3, #32]
  netif->num = netif_num;
 80097ae:	4b3f      	ldr	r3, [pc, #252]	; (80098ac <netif_add+0x18c>)
 80097b0:	781a      	ldrb	r2, [r3, #0]
 80097b2:	68fb      	ldr	r3, [r7, #12]
 80097b4:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  netif->input = input;
 80097b8:	68fb      	ldr	r3, [r7, #12]
 80097ba:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80097bc:	611a      	str	r2, [r3, #16]
#if ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS
  netif->loop_cnt_current = 0;
#endif /* ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS */

#if LWIP_IPV4
  netif_set_addr(netif, ipaddr, netmask, gw);
 80097be:	683b      	ldr	r3, [r7, #0]
 80097c0:	687a      	ldr	r2, [r7, #4]
 80097c2:	68b9      	ldr	r1, [r7, #8]
 80097c4:	68f8      	ldr	r0, [r7, #12]
 80097c6:	f000 f913 	bl	80099f0 <netif_set_addr>
#endif /* LWIP_IPV4 */

  /* call user specified initialization function for netif */
  if (init(netif) != ERR_OK) {
 80097ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80097cc:	68f8      	ldr	r0, [r7, #12]
 80097ce:	4798      	blx	r3
 80097d0:	4603      	mov	r3, r0
 80097d2:	2b00      	cmp	r3, #0
 80097d4:	d001      	beq.n	80097da <netif_add+0xba>
    return NULL;
 80097d6:	2300      	movs	r3, #0
 80097d8:	e058      	b.n	800988c <netif_add+0x16c>
     */
  {
    struct netif *netif2;
    int num_netifs;
    do {
      if (netif->num == 255) {
 80097da:	68fb      	ldr	r3, [r7, #12]
 80097dc:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80097e0:	2bff      	cmp	r3, #255	; 0xff
 80097e2:	d103      	bne.n	80097ec <netif_add+0xcc>
        netif->num = 0;
 80097e4:	68fb      	ldr	r3, [r7, #12]
 80097e6:	2200      	movs	r2, #0
 80097e8:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      }
      num_netifs = 0;
 80097ec:	2300      	movs	r3, #0
 80097ee:	613b      	str	r3, [r7, #16]
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 80097f0:	4b2f      	ldr	r3, [pc, #188]	; (80098b0 <netif_add+0x190>)
 80097f2:	681b      	ldr	r3, [r3, #0]
 80097f4:	617b      	str	r3, [r7, #20]
 80097f6:	e02b      	b.n	8009850 <netif_add+0x130>
        LWIP_ASSERT("netif already added", netif2 != netif);
 80097f8:	697a      	ldr	r2, [r7, #20]
 80097fa:	68fb      	ldr	r3, [r7, #12]
 80097fc:	429a      	cmp	r2, r3
 80097fe:	d106      	bne.n	800980e <netif_add+0xee>
 8009800:	4b24      	ldr	r3, [pc, #144]	; (8009894 <netif_add+0x174>)
 8009802:	f240 128b 	movw	r2, #395	; 0x18b
 8009806:	492b      	ldr	r1, [pc, #172]	; (80098b4 <netif_add+0x194>)
 8009808:	4824      	ldr	r0, [pc, #144]	; (800989c <netif_add+0x17c>)
 800980a:	f00a f8ad 	bl	8013968 <iprintf>
        num_netifs++;
 800980e:	693b      	ldr	r3, [r7, #16]
 8009810:	3301      	adds	r3, #1
 8009812:	613b      	str	r3, [r7, #16]
        LWIP_ASSERT("too many netifs, max. supported number is 255", num_netifs <= 255);
 8009814:	693b      	ldr	r3, [r7, #16]
 8009816:	2bff      	cmp	r3, #255	; 0xff
 8009818:	dd06      	ble.n	8009828 <netif_add+0x108>
 800981a:	4b1e      	ldr	r3, [pc, #120]	; (8009894 <netif_add+0x174>)
 800981c:	f240 128d 	movw	r2, #397	; 0x18d
 8009820:	4925      	ldr	r1, [pc, #148]	; (80098b8 <netif_add+0x198>)
 8009822:	481e      	ldr	r0, [pc, #120]	; (800989c <netif_add+0x17c>)
 8009824:	f00a f8a0 	bl	8013968 <iprintf>
        if (netif2->num == netif->num) {
 8009828:	697b      	ldr	r3, [r7, #20]
 800982a:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
 800982e:	68fb      	ldr	r3, [r7, #12]
 8009830:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8009834:	429a      	cmp	r2, r3
 8009836:	d108      	bne.n	800984a <netif_add+0x12a>
          netif->num++;
 8009838:	68fb      	ldr	r3, [r7, #12]
 800983a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800983e:	3301      	adds	r3, #1
 8009840:	b2da      	uxtb	r2, r3
 8009842:	68fb      	ldr	r3, [r7, #12]
 8009844:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
          break;
 8009848:	e005      	b.n	8009856 <netif_add+0x136>
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 800984a:	697b      	ldr	r3, [r7, #20]
 800984c:	681b      	ldr	r3, [r3, #0]
 800984e:	617b      	str	r3, [r7, #20]
 8009850:	697b      	ldr	r3, [r7, #20]
 8009852:	2b00      	cmp	r3, #0
 8009854:	d1d0      	bne.n	80097f8 <netif_add+0xd8>
        }
      }
    } while (netif2 != NULL);
 8009856:	697b      	ldr	r3, [r7, #20]
 8009858:	2b00      	cmp	r3, #0
 800985a:	d1be      	bne.n	80097da <netif_add+0xba>
  }
  if (netif->num == 254) {
 800985c:	68fb      	ldr	r3, [r7, #12]
 800985e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8009862:	2bfe      	cmp	r3, #254	; 0xfe
 8009864:	d103      	bne.n	800986e <netif_add+0x14e>
    netif_num = 0;
 8009866:	4b11      	ldr	r3, [pc, #68]	; (80098ac <netif_add+0x18c>)
 8009868:	2200      	movs	r2, #0
 800986a:	701a      	strb	r2, [r3, #0]
 800986c:	e006      	b.n	800987c <netif_add+0x15c>
  } else {
    netif_num = (u8_t)(netif->num + 1);
 800986e:	68fb      	ldr	r3, [r7, #12]
 8009870:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8009874:	3301      	adds	r3, #1
 8009876:	b2da      	uxtb	r2, r3
 8009878:	4b0c      	ldr	r3, [pc, #48]	; (80098ac <netif_add+0x18c>)
 800987a:	701a      	strb	r2, [r3, #0]
  }

  /* add this netif to the list */
  netif->next = netif_list;
 800987c:	4b0c      	ldr	r3, [pc, #48]	; (80098b0 <netif_add+0x190>)
 800987e:	681a      	ldr	r2, [r3, #0]
 8009880:	68fb      	ldr	r3, [r7, #12]
 8009882:	601a      	str	r2, [r3, #0]
  netif_list = netif;
 8009884:	4a0a      	ldr	r2, [pc, #40]	; (80098b0 <netif_add+0x190>)
 8009886:	68fb      	ldr	r3, [r7, #12]
 8009888:	6013      	str	r3, [r2, #0]
#endif /* LWIP_IPV4 */
  LWIP_DEBUGF(NETIF_DEBUG, ("\n"));

  netif_invoke_ext_callback(netif, LWIP_NSC_NETIF_ADDED, NULL);

  return netif;
 800988a:	68fb      	ldr	r3, [r7, #12]
}
 800988c:	4618      	mov	r0, r3
 800988e:	3718      	adds	r7, #24
 8009890:	46bd      	mov	sp, r7
 8009892:	bd80      	pop	{r7, pc}
 8009894:	08014d10 	.word	0x08014d10
 8009898:	08014da4 	.word	0x08014da4
 800989c:	08014d60 	.word	0x08014d60
 80098a0:	08014dc0 	.word	0x08014dc0
 80098a4:	080174c0 	.word	0x080174c0
 80098a8:	08009ccb 	.word	0x08009ccb
 80098ac:	2000c648 	.word	0x2000c648
 80098b0:	2000c640 	.word	0x2000c640
 80098b4:	08014de4 	.word	0x08014de4
 80098b8:	08014df8 	.word	0x08014df8

080098bc <netif_do_ip_addr_changed>:

static void
netif_do_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 80098bc:	b580      	push	{r7, lr}
 80098be:	b082      	sub	sp, #8
 80098c0:	af00      	add	r7, sp, #0
 80098c2:	6078      	str	r0, [r7, #4]
 80098c4:	6039      	str	r1, [r7, #0]
#if LWIP_TCP
  tcp_netif_ip_addr_changed(old_addr, new_addr);
 80098c6:	6839      	ldr	r1, [r7, #0]
 80098c8:	6878      	ldr	r0, [r7, #4]
 80098ca:	f002 fbbf 	bl	800c04c <tcp_netif_ip_addr_changed>
#endif /* LWIP_TCP */
#if LWIP_UDP
  udp_netif_ip_addr_changed(old_addr, new_addr);
 80098ce:	6839      	ldr	r1, [r7, #0]
 80098d0:	6878      	ldr	r0, [r7, #4]
 80098d2:	f007 f8d9 	bl	8010a88 <udp_netif_ip_addr_changed>
#endif /* LWIP_UDP */
#if LWIP_RAW
  raw_netif_ip_addr_changed(old_addr, new_addr);
#endif /* LWIP_RAW */
}
 80098d6:	bf00      	nop
 80098d8:	3708      	adds	r7, #8
 80098da:	46bd      	mov	sp, r7
 80098dc:	bd80      	pop	{r7, pc}
	...

080098e0 <netif_do_set_ipaddr>:

#if LWIP_IPV4
static int
netif_do_set_ipaddr(struct netif *netif, const ip4_addr_t *ipaddr, ip_addr_t *old_addr)
{
 80098e0:	b580      	push	{r7, lr}
 80098e2:	b086      	sub	sp, #24
 80098e4:	af00      	add	r7, sp, #0
 80098e6:	60f8      	str	r0, [r7, #12]
 80098e8:	60b9      	str	r1, [r7, #8]
 80098ea:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT("invalid pointer", ipaddr != NULL);
 80098ec:	68bb      	ldr	r3, [r7, #8]
 80098ee:	2b00      	cmp	r3, #0
 80098f0:	d106      	bne.n	8009900 <netif_do_set_ipaddr+0x20>
 80098f2:	4b1d      	ldr	r3, [pc, #116]	; (8009968 <netif_do_set_ipaddr+0x88>)
 80098f4:	f240 12cb 	movw	r2, #459	; 0x1cb
 80098f8:	491c      	ldr	r1, [pc, #112]	; (800996c <netif_do_set_ipaddr+0x8c>)
 80098fa:	481d      	ldr	r0, [pc, #116]	; (8009970 <netif_do_set_ipaddr+0x90>)
 80098fc:	f00a f834 	bl	8013968 <iprintf>
  LWIP_ASSERT("invalid pointer", old_addr != NULL);
 8009900:	687b      	ldr	r3, [r7, #4]
 8009902:	2b00      	cmp	r3, #0
 8009904:	d106      	bne.n	8009914 <netif_do_set_ipaddr+0x34>
 8009906:	4b18      	ldr	r3, [pc, #96]	; (8009968 <netif_do_set_ipaddr+0x88>)
 8009908:	f44f 72e6 	mov.w	r2, #460	; 0x1cc
 800990c:	4917      	ldr	r1, [pc, #92]	; (800996c <netif_do_set_ipaddr+0x8c>)
 800990e:	4818      	ldr	r0, [pc, #96]	; (8009970 <netif_do_set_ipaddr+0x90>)
 8009910:	f00a f82a 	bl	8013968 <iprintf>

  /* address is actually being changed? */
  if (ip4_addr_cmp(ipaddr, netif_ip4_addr(netif)) == 0) {
 8009914:	68bb      	ldr	r3, [r7, #8]
 8009916:	681a      	ldr	r2, [r3, #0]
 8009918:	68fb      	ldr	r3, [r7, #12]
 800991a:	3304      	adds	r3, #4
 800991c:	681b      	ldr	r3, [r3, #0]
 800991e:	429a      	cmp	r2, r3
 8009920:	d01c      	beq.n	800995c <netif_do_set_ipaddr+0x7c>
    ip_addr_t new_addr;
    *ip_2_ip4(&new_addr) = *ipaddr;
 8009922:	68bb      	ldr	r3, [r7, #8]
 8009924:	681b      	ldr	r3, [r3, #0]
 8009926:	617b      	str	r3, [r7, #20]
    IP_SET_TYPE_VAL(new_addr, IPADDR_TYPE_V4);

    ip_addr_copy(*old_addr, *netif_ip_addr4(netif));
 8009928:	68fb      	ldr	r3, [r7, #12]
 800992a:	3304      	adds	r3, #4
 800992c:	681a      	ldr	r2, [r3, #0]
 800992e:	687b      	ldr	r3, [r7, #4]
 8009930:	601a      	str	r2, [r3, #0]

    LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: netif address being changed\n"));
    netif_do_ip_addr_changed(old_addr, &new_addr);
 8009932:	f107 0314 	add.w	r3, r7, #20
 8009936:	4619      	mov	r1, r3
 8009938:	6878      	ldr	r0, [r7, #4]
 800993a:	f7ff ffbf 	bl	80098bc <netif_do_ip_addr_changed>

    mib2_remove_ip4(netif);
    mib2_remove_route_ip4(0, netif);
    /* set new IP address to netif */
    ip4_addr_set(ip_2_ip4(&netif->ip_addr), ipaddr);
 800993e:	68bb      	ldr	r3, [r7, #8]
 8009940:	2b00      	cmp	r3, #0
 8009942:	d002      	beq.n	800994a <netif_do_set_ipaddr+0x6a>
 8009944:	68bb      	ldr	r3, [r7, #8]
 8009946:	681b      	ldr	r3, [r3, #0]
 8009948:	e000      	b.n	800994c <netif_do_set_ipaddr+0x6c>
 800994a:	2300      	movs	r3, #0
 800994c:	68fa      	ldr	r2, [r7, #12]
 800994e:	6053      	str	r3, [r2, #4]
    IP_SET_TYPE_VAL(netif->ip_addr, IPADDR_TYPE_V4);
    mib2_add_ip4(netif);
    mib2_add_route_ip4(0, netif);

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4);
 8009950:	2101      	movs	r1, #1
 8009952:	68f8      	ldr	r0, [r7, #12]
 8009954:	f000 f8d2 	bl	8009afc <netif_issue_reports>

    NETIF_STATUS_CALLBACK(netif);
    return 1; /* address changed */
 8009958:	2301      	movs	r3, #1
 800995a:	e000      	b.n	800995e <netif_do_set_ipaddr+0x7e>
  }
  return 0; /* address unchanged */
 800995c:	2300      	movs	r3, #0
}
 800995e:	4618      	mov	r0, r3
 8009960:	3718      	adds	r7, #24
 8009962:	46bd      	mov	sp, r7
 8009964:	bd80      	pop	{r7, pc}
 8009966:	bf00      	nop
 8009968:	08014d10 	.word	0x08014d10
 800996c:	08014e28 	.word	0x08014e28
 8009970:	08014d60 	.word	0x08014d60

08009974 <netif_do_set_netmask>:
  }
}

static int
netif_do_set_netmask(struct netif *netif, const ip4_addr_t *netmask, ip_addr_t *old_nm)
{
 8009974:	b480      	push	{r7}
 8009976:	b085      	sub	sp, #20
 8009978:	af00      	add	r7, sp, #0
 800997a:	60f8      	str	r0, [r7, #12]
 800997c:	60b9      	str	r1, [r7, #8]
 800997e:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(netmask, netif_ip4_netmask(netif)) == 0) {
 8009980:	68bb      	ldr	r3, [r7, #8]
 8009982:	681a      	ldr	r2, [r3, #0]
 8009984:	68fb      	ldr	r3, [r7, #12]
 8009986:	3308      	adds	r3, #8
 8009988:	681b      	ldr	r3, [r3, #0]
 800998a:	429a      	cmp	r2, r3
 800998c:	d00a      	beq.n	80099a4 <netif_do_set_netmask+0x30>
#else
    LWIP_UNUSED_ARG(old_nm);
#endif
    mib2_remove_route_ip4(0, netif);
    /* set new netmask to netif */
    ip4_addr_set(ip_2_ip4(&netif->netmask), netmask);
 800998e:	68bb      	ldr	r3, [r7, #8]
 8009990:	2b00      	cmp	r3, #0
 8009992:	d002      	beq.n	800999a <netif_do_set_netmask+0x26>
 8009994:	68bb      	ldr	r3, [r7, #8]
 8009996:	681b      	ldr	r3, [r3, #0]
 8009998:	e000      	b.n	800999c <netif_do_set_netmask+0x28>
 800999a:	2300      	movs	r3, #0
 800999c:	68fa      	ldr	r2, [r7, #12]
 800999e:	6093      	str	r3, [r2, #8]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_netmask(netif)),
                ip4_addr2_16(netif_ip4_netmask(netif)),
                ip4_addr3_16(netif_ip4_netmask(netif)),
                ip4_addr4_16(netif_ip4_netmask(netif))));
    return 1; /* netmask changed */
 80099a0:	2301      	movs	r3, #1
 80099a2:	e000      	b.n	80099a6 <netif_do_set_netmask+0x32>
  }
  return 0; /* netmask unchanged */
 80099a4:	2300      	movs	r3, #0
}
 80099a6:	4618      	mov	r0, r3
 80099a8:	3714      	adds	r7, #20
 80099aa:	46bd      	mov	sp, r7
 80099ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099b0:	4770      	bx	lr

080099b2 <netif_do_set_gw>:
  }
}

static int
netif_do_set_gw(struct netif *netif, const ip4_addr_t *gw, ip_addr_t *old_gw)
{
 80099b2:	b480      	push	{r7}
 80099b4:	b085      	sub	sp, #20
 80099b6:	af00      	add	r7, sp, #0
 80099b8:	60f8      	str	r0, [r7, #12]
 80099ba:	60b9      	str	r1, [r7, #8]
 80099bc:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(gw, netif_ip4_gw(netif)) == 0) {
 80099be:	68bb      	ldr	r3, [r7, #8]
 80099c0:	681a      	ldr	r2, [r3, #0]
 80099c2:	68fb      	ldr	r3, [r7, #12]
 80099c4:	330c      	adds	r3, #12
 80099c6:	681b      	ldr	r3, [r3, #0]
 80099c8:	429a      	cmp	r2, r3
 80099ca:	d00a      	beq.n	80099e2 <netif_do_set_gw+0x30>
    ip_addr_copy(*old_gw, *netif_ip_gw4(netif));
#else
    LWIP_UNUSED_ARG(old_gw);
#endif

    ip4_addr_set(ip_2_ip4(&netif->gw), gw);
 80099cc:	68bb      	ldr	r3, [r7, #8]
 80099ce:	2b00      	cmp	r3, #0
 80099d0:	d002      	beq.n	80099d8 <netif_do_set_gw+0x26>
 80099d2:	68bb      	ldr	r3, [r7, #8]
 80099d4:	681b      	ldr	r3, [r3, #0]
 80099d6:	e000      	b.n	80099da <netif_do_set_gw+0x28>
 80099d8:	2300      	movs	r3, #0
 80099da:	68fa      	ldr	r2, [r7, #12]
 80099dc:	60d3      	str	r3, [r2, #12]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_gw(netif)),
                ip4_addr2_16(netif_ip4_gw(netif)),
                ip4_addr3_16(netif_ip4_gw(netif)),
                ip4_addr4_16(netif_ip4_gw(netif))));
    return 1; /* gateway changed */
 80099de:	2301      	movs	r3, #1
 80099e0:	e000      	b.n	80099e4 <netif_do_set_gw+0x32>
  }
  return 0; /* gateway unchanged */
 80099e2:	2300      	movs	r3, #0
}
 80099e4:	4618      	mov	r0, r3
 80099e6:	3714      	adds	r7, #20
 80099e8:	46bd      	mov	sp, r7
 80099ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099ee:	4770      	bx	lr

080099f0 <netif_set_addr>:
 * @param gw the new default gateway
 */
void
netif_set_addr(struct netif *netif, const ip4_addr_t *ipaddr, const ip4_addr_t *netmask,
               const ip4_addr_t *gw)
{
 80099f0:	b580      	push	{r7, lr}
 80099f2:	b088      	sub	sp, #32
 80099f4:	af00      	add	r7, sp, #0
 80099f6:	60f8      	str	r0, [r7, #12]
 80099f8:	60b9      	str	r1, [r7, #8]
 80099fa:	607a      	str	r2, [r7, #4]
 80099fc:	603b      	str	r3, [r7, #0]
  ip_addr_t old_nm_val;
  ip_addr_t old_gw_val;
  ip_addr_t *old_nm = &old_nm_val;
  ip_addr_t *old_gw = &old_gw_val;
#else
  ip_addr_t *old_nm = NULL;
 80099fe:	2300      	movs	r3, #0
 8009a00:	61fb      	str	r3, [r7, #28]
  ip_addr_t *old_gw = NULL;
 8009a02:	2300      	movs	r3, #0
 8009a04:	61bb      	str	r3, [r7, #24]
  int remove;

  LWIP_ASSERT_CORE_LOCKED();

  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 8009a06:	68bb      	ldr	r3, [r7, #8]
 8009a08:	2b00      	cmp	r3, #0
 8009a0a:	d101      	bne.n	8009a10 <netif_set_addr+0x20>
    ipaddr = IP4_ADDR_ANY4;
 8009a0c:	4b1c      	ldr	r3, [pc, #112]	; (8009a80 <netif_set_addr+0x90>)
 8009a0e:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 8009a10:	687b      	ldr	r3, [r7, #4]
 8009a12:	2b00      	cmp	r3, #0
 8009a14:	d101      	bne.n	8009a1a <netif_set_addr+0x2a>
    netmask = IP4_ADDR_ANY4;
 8009a16:	4b1a      	ldr	r3, [pc, #104]	; (8009a80 <netif_set_addr+0x90>)
 8009a18:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 8009a1a:	683b      	ldr	r3, [r7, #0]
 8009a1c:	2b00      	cmp	r3, #0
 8009a1e:	d101      	bne.n	8009a24 <netif_set_addr+0x34>
    gw = IP4_ADDR_ANY4;
 8009a20:	4b17      	ldr	r3, [pc, #92]	; (8009a80 <netif_set_addr+0x90>)
 8009a22:	603b      	str	r3, [r7, #0]
  }

  remove = ip4_addr_isany(ipaddr);
 8009a24:	68bb      	ldr	r3, [r7, #8]
 8009a26:	2b00      	cmp	r3, #0
 8009a28:	d003      	beq.n	8009a32 <netif_set_addr+0x42>
 8009a2a:	68bb      	ldr	r3, [r7, #8]
 8009a2c:	681b      	ldr	r3, [r3, #0]
 8009a2e:	2b00      	cmp	r3, #0
 8009a30:	d101      	bne.n	8009a36 <netif_set_addr+0x46>
 8009a32:	2301      	movs	r3, #1
 8009a34:	e000      	b.n	8009a38 <netif_set_addr+0x48>
 8009a36:	2300      	movs	r3, #0
 8009a38:	617b      	str	r3, [r7, #20]
  if (remove) {
 8009a3a:	697b      	ldr	r3, [r7, #20]
 8009a3c:	2b00      	cmp	r3, #0
 8009a3e:	d006      	beq.n	8009a4e <netif_set_addr+0x5e>
    /* when removing an address, we have to remove it *before* changing netmask/gw
       to ensure that tcp RST segment can be sent correctly */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 8009a40:	f107 0310 	add.w	r3, r7, #16
 8009a44:	461a      	mov	r2, r3
 8009a46:	68b9      	ldr	r1, [r7, #8]
 8009a48:	68f8      	ldr	r0, [r7, #12]
 8009a4a:	f7ff ff49 	bl	80098e0 <netif_do_set_ipaddr>
      change_reason |= LWIP_NSC_IPV4_ADDRESS_CHANGED;
      cb_args.ipv4_changed.old_address = &old_addr;
#endif
    }
  }
  if (netif_do_set_netmask(netif, netmask, old_nm)) {
 8009a4e:	69fa      	ldr	r2, [r7, #28]
 8009a50:	6879      	ldr	r1, [r7, #4]
 8009a52:	68f8      	ldr	r0, [r7, #12]
 8009a54:	f7ff ff8e 	bl	8009974 <netif_do_set_netmask>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_NETMASK_CHANGED;
    cb_args.ipv4_changed.old_netmask = old_nm;
#endif
  }
  if (netif_do_set_gw(netif, gw, old_gw)) {
 8009a58:	69ba      	ldr	r2, [r7, #24]
 8009a5a:	6839      	ldr	r1, [r7, #0]
 8009a5c:	68f8      	ldr	r0, [r7, #12]
 8009a5e:	f7ff ffa8 	bl	80099b2 <netif_do_set_gw>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_GATEWAY_CHANGED;
    cb_args.ipv4_changed.old_gw = old_gw;
#endif
  }
  if (!remove) {
 8009a62:	697b      	ldr	r3, [r7, #20]
 8009a64:	2b00      	cmp	r3, #0
 8009a66:	d106      	bne.n	8009a76 <netif_set_addr+0x86>
    /* set ipaddr last to ensure netmask/gw have been set when status callback is called */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 8009a68:	f107 0310 	add.w	r3, r7, #16
 8009a6c:	461a      	mov	r2, r3
 8009a6e:	68b9      	ldr	r1, [r7, #8]
 8009a70:	68f8      	ldr	r0, [r7, #12]
 8009a72:	f7ff ff35 	bl	80098e0 <netif_do_set_ipaddr>
  if (change_reason != LWIP_NSC_NONE) {
    change_reason |= LWIP_NSC_IPV4_SETTINGS_CHANGED;
    netif_invoke_ext_callback(netif, change_reason, &cb_args);
  }
#endif
}
 8009a76:	bf00      	nop
 8009a78:	3720      	adds	r7, #32
 8009a7a:	46bd      	mov	sp, r7
 8009a7c:	bd80      	pop	{r7, pc}
 8009a7e:	bf00      	nop
 8009a80:	080174c0 	.word	0x080174c0

08009a84 <netif_set_default>:
 *
 * @param netif the default network interface
 */
void
netif_set_default(struct netif *netif)
{
 8009a84:	b480      	push	{r7}
 8009a86:	b083      	sub	sp, #12
 8009a88:	af00      	add	r7, sp, #0
 8009a8a:	6078      	str	r0, [r7, #4]
    mib2_remove_route_ip4(1, netif);
  } else {
    /* install default route */
    mib2_add_route_ip4(1, netif);
  }
  netif_default = netif;
 8009a8c:	4a04      	ldr	r2, [pc, #16]	; (8009aa0 <netif_set_default+0x1c>)
 8009a8e:	687b      	ldr	r3, [r7, #4]
 8009a90:	6013      	str	r3, [r2, #0]
  LWIP_DEBUGF(NETIF_DEBUG, ("netif: setting default interface %c%c\n",
                            netif ? netif->name[0] : '\'', netif ? netif->name[1] : '\''));
}
 8009a92:	bf00      	nop
 8009a94:	370c      	adds	r7, #12
 8009a96:	46bd      	mov	sp, r7
 8009a98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a9c:	4770      	bx	lr
 8009a9e:	bf00      	nop
 8009aa0:	2000c644 	.word	0x2000c644

08009aa4 <netif_set_up>:
 * Bring an interface up, available for processing
 * traffic.
 */
void
netif_set_up(struct netif *netif)
{
 8009aa4:	b580      	push	{r7, lr}
 8009aa6:	b082      	sub	sp, #8
 8009aa8:	af00      	add	r7, sp, #0
 8009aaa:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_up: invalid netif", netif != NULL, return);
 8009aac:	687b      	ldr	r3, [r7, #4]
 8009aae:	2b00      	cmp	r3, #0
 8009ab0:	d107      	bne.n	8009ac2 <netif_set_up+0x1e>
 8009ab2:	4b0f      	ldr	r3, [pc, #60]	; (8009af0 <netif_set_up+0x4c>)
 8009ab4:	f44f 7254 	mov.w	r2, #848	; 0x350
 8009ab8:	490e      	ldr	r1, [pc, #56]	; (8009af4 <netif_set_up+0x50>)
 8009aba:	480f      	ldr	r0, [pc, #60]	; (8009af8 <netif_set_up+0x54>)
 8009abc:	f009 ff54 	bl	8013968 <iprintf>
 8009ac0:	e013      	b.n	8009aea <netif_set_up+0x46>

  if (!(netif->flags & NETIF_FLAG_UP)) {
 8009ac2:	687b      	ldr	r3, [r7, #4]
 8009ac4:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8009ac8:	f003 0301 	and.w	r3, r3, #1
 8009acc:	2b00      	cmp	r3, #0
 8009ace:	d10c      	bne.n	8009aea <netif_set_up+0x46>
    netif_set_flags(netif, NETIF_FLAG_UP);
 8009ad0:	687b      	ldr	r3, [r7, #4]
 8009ad2:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8009ad6:	f043 0301 	orr.w	r3, r3, #1
 8009ada:	b2da      	uxtb	r2, r3
 8009adc:	687b      	ldr	r3, [r7, #4]
 8009ade:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
      args.status_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 8009ae2:	2103      	movs	r1, #3
 8009ae4:	6878      	ldr	r0, [r7, #4]
 8009ae6:	f000 f809 	bl	8009afc <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */
  }
}
 8009aea:	3708      	adds	r7, #8
 8009aec:	46bd      	mov	sp, r7
 8009aee:	bd80      	pop	{r7, pc}
 8009af0:	08014d10 	.word	0x08014d10
 8009af4:	08014e98 	.word	0x08014e98
 8009af8:	08014d60 	.word	0x08014d60

08009afc <netif_issue_reports>:

/** Send ARP/IGMP/MLD/RS events, e.g. on link-up/netif-up or addr-change
 */
static void
netif_issue_reports(struct netif *netif, u8_t report_type)
{
 8009afc:	b580      	push	{r7, lr}
 8009afe:	b082      	sub	sp, #8
 8009b00:	af00      	add	r7, sp, #0
 8009b02:	6078      	str	r0, [r7, #4]
 8009b04:	460b      	mov	r3, r1
 8009b06:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("netif_issue_reports: invalid netif", netif != NULL);
 8009b08:	687b      	ldr	r3, [r7, #4]
 8009b0a:	2b00      	cmp	r3, #0
 8009b0c:	d106      	bne.n	8009b1c <netif_issue_reports+0x20>
 8009b0e:	4b18      	ldr	r3, [pc, #96]	; (8009b70 <netif_issue_reports+0x74>)
 8009b10:	f240 326d 	movw	r2, #877	; 0x36d
 8009b14:	4917      	ldr	r1, [pc, #92]	; (8009b74 <netif_issue_reports+0x78>)
 8009b16:	4818      	ldr	r0, [pc, #96]	; (8009b78 <netif_issue_reports+0x7c>)
 8009b18:	f009 ff26 	bl	8013968 <iprintf>

  /* Only send reports when both link and admin states are up */
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 8009b1c:	687b      	ldr	r3, [r7, #4]
 8009b1e:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8009b22:	f003 0304 	and.w	r3, r3, #4
 8009b26:	2b00      	cmp	r3, #0
 8009b28:	d01e      	beq.n	8009b68 <netif_issue_reports+0x6c>
      !(netif->flags & NETIF_FLAG_UP)) {
 8009b2a:	687b      	ldr	r3, [r7, #4]
 8009b2c:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8009b30:	f003 0301 	and.w	r3, r3, #1
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 8009b34:	2b00      	cmp	r3, #0
 8009b36:	d017      	beq.n	8009b68 <netif_issue_reports+0x6c>
    return;
  }

#if LWIP_IPV4
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 8009b38:	78fb      	ldrb	r3, [r7, #3]
 8009b3a:	f003 0301 	and.w	r3, r3, #1
 8009b3e:	2b00      	cmp	r3, #0
 8009b40:	d013      	beq.n	8009b6a <netif_issue_reports+0x6e>
      !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 8009b42:	687b      	ldr	r3, [r7, #4]
 8009b44:	3304      	adds	r3, #4
 8009b46:	681b      	ldr	r3, [r3, #0]
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 8009b48:	2b00      	cmp	r3, #0
 8009b4a:	d00e      	beq.n	8009b6a <netif_issue_reports+0x6e>
#if LWIP_ARP
    /* For Ethernet network interfaces, we would like to send a "gratuitous ARP" */
    if (netif->flags & (NETIF_FLAG_ETHARP)) {
 8009b4c:	687b      	ldr	r3, [r7, #4]
 8009b4e:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8009b52:	f003 0308 	and.w	r3, r3, #8
 8009b56:	2b00      	cmp	r3, #0
 8009b58:	d007      	beq.n	8009b6a <netif_issue_reports+0x6e>
      etharp_gratuitous(netif);
 8009b5a:	687b      	ldr	r3, [r7, #4]
 8009b5c:	3304      	adds	r3, #4
 8009b5e:	4619      	mov	r1, r3
 8009b60:	6878      	ldr	r0, [r7, #4]
 8009b62:	f007 ff3b 	bl	80119dc <etharp_request>
 8009b66:	e000      	b.n	8009b6a <netif_issue_reports+0x6e>
    return;
 8009b68:	bf00      	nop
    /* send mld memberships */
    mld6_report_groups(netif);
#endif /* LWIP_IPV6_MLD */
  }
#endif /* LWIP_IPV6 */
}
 8009b6a:	3708      	adds	r7, #8
 8009b6c:	46bd      	mov	sp, r7
 8009b6e:	bd80      	pop	{r7, pc}
 8009b70:	08014d10 	.word	0x08014d10
 8009b74:	08014eb4 	.word	0x08014eb4
 8009b78:	08014d60 	.word	0x08014d60

08009b7c <netif_set_down>:
 * @ingroup netif
 * Bring an interface down, disabling any traffic processing.
 */
void
netif_set_down(struct netif *netif)
{
 8009b7c:	b580      	push	{r7, lr}
 8009b7e:	b082      	sub	sp, #8
 8009b80:	af00      	add	r7, sp, #0
 8009b82:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_down: invalid netif", netif != NULL, return);
 8009b84:	687b      	ldr	r3, [r7, #4]
 8009b86:	2b00      	cmp	r3, #0
 8009b88:	d107      	bne.n	8009b9a <netif_set_down+0x1e>
 8009b8a:	4b12      	ldr	r3, [pc, #72]	; (8009bd4 <netif_set_down+0x58>)
 8009b8c:	f240 329b 	movw	r2, #923	; 0x39b
 8009b90:	4911      	ldr	r1, [pc, #68]	; (8009bd8 <netif_set_down+0x5c>)
 8009b92:	4812      	ldr	r0, [pc, #72]	; (8009bdc <netif_set_down+0x60>)
 8009b94:	f009 fee8 	bl	8013968 <iprintf>
 8009b98:	e019      	b.n	8009bce <netif_set_down+0x52>

  if (netif->flags & NETIF_FLAG_UP) {
 8009b9a:	687b      	ldr	r3, [r7, #4]
 8009b9c:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8009ba0:	f003 0301 	and.w	r3, r3, #1
 8009ba4:	2b00      	cmp	r3, #0
 8009ba6:	d012      	beq.n	8009bce <netif_set_down+0x52>
      args.status_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_clear_flags(netif, NETIF_FLAG_UP);
 8009ba8:	687b      	ldr	r3, [r7, #4]
 8009baa:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8009bae:	f023 0301 	bic.w	r3, r3, #1
 8009bb2:	b2da      	uxtb	r2, r3
 8009bb4:	687b      	ldr	r3, [r7, #4]
 8009bb6:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    MIB2_COPY_SYSUPTIME_TO(&netif->ts);

#if LWIP_IPV4 && LWIP_ARP
    if (netif->flags & NETIF_FLAG_ETHARP) {
 8009bba:	687b      	ldr	r3, [r7, #4]
 8009bbc:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8009bc0:	f003 0308 	and.w	r3, r3, #8
 8009bc4:	2b00      	cmp	r3, #0
 8009bc6:	d002      	beq.n	8009bce <netif_set_down+0x52>
      etharp_cleanup_netif(netif);
 8009bc8:	6878      	ldr	r0, [r7, #4]
 8009bca:	f007 fa85 	bl	80110d8 <etharp_cleanup_netif>
    nd6_cleanup_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_STATUS_CALLBACK(netif);
  }
}
 8009bce:	3708      	adds	r7, #8
 8009bd0:	46bd      	mov	sp, r7
 8009bd2:	bd80      	pop	{r7, pc}
 8009bd4:	08014d10 	.word	0x08014d10
 8009bd8:	08014ed8 	.word	0x08014ed8
 8009bdc:	08014d60 	.word	0x08014d60

08009be0 <netif_set_link_up>:
 * @ingroup netif
 * Called by a driver when its link goes up
 */
void
netif_set_link_up(struct netif *netif)
{
 8009be0:	b580      	push	{r7, lr}
 8009be2:	b082      	sub	sp, #8
 8009be4:	af00      	add	r7, sp, #0
 8009be6:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_up: invalid netif", netif != NULL, return);
 8009be8:	687b      	ldr	r3, [r7, #4]
 8009bea:	2b00      	cmp	r3, #0
 8009bec:	d107      	bne.n	8009bfe <netif_set_link_up+0x1e>
 8009bee:	4b13      	ldr	r3, [pc, #76]	; (8009c3c <netif_set_link_up+0x5c>)
 8009bf0:	f44f 7278 	mov.w	r2, #992	; 0x3e0
 8009bf4:	4912      	ldr	r1, [pc, #72]	; (8009c40 <netif_set_link_up+0x60>)
 8009bf6:	4813      	ldr	r0, [pc, #76]	; (8009c44 <netif_set_link_up+0x64>)
 8009bf8:	f009 feb6 	bl	8013968 <iprintf>
 8009bfc:	e01b      	b.n	8009c36 <netif_set_link_up+0x56>

  if (!(netif->flags & NETIF_FLAG_LINK_UP)) {
 8009bfe:	687b      	ldr	r3, [r7, #4]
 8009c00:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8009c04:	f003 0304 	and.w	r3, r3, #4
 8009c08:	2b00      	cmp	r3, #0
 8009c0a:	d114      	bne.n	8009c36 <netif_set_link_up+0x56>
    netif_set_flags(netif, NETIF_FLAG_LINK_UP);
 8009c0c:	687b      	ldr	r3, [r7, #4]
 8009c0e:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8009c12:	f043 0304 	orr.w	r3, r3, #4
 8009c16:	b2da      	uxtb	r2, r3
 8009c18:	687b      	ldr	r3, [r7, #4]
 8009c1a:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

#if LWIP_AUTOIP
    autoip_network_changed(netif);
#endif /* LWIP_AUTOIP */

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 8009c1e:	2103      	movs	r1, #3
 8009c20:	6878      	ldr	r0, [r7, #4]
 8009c22:	f7ff ff6b 	bl	8009afc <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_LINK_CALLBACK(netif);
 8009c26:	687b      	ldr	r3, [r7, #4]
 8009c28:	69db      	ldr	r3, [r3, #28]
 8009c2a:	2b00      	cmp	r3, #0
 8009c2c:	d003      	beq.n	8009c36 <netif_set_link_up+0x56>
 8009c2e:	687b      	ldr	r3, [r7, #4]
 8009c30:	69db      	ldr	r3, [r3, #28]
 8009c32:	6878      	ldr	r0, [r7, #4]
 8009c34:	4798      	blx	r3
      args.link_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 8009c36:	3708      	adds	r7, #8
 8009c38:	46bd      	mov	sp, r7
 8009c3a:	bd80      	pop	{r7, pc}
 8009c3c:	08014d10 	.word	0x08014d10
 8009c40:	08014ef8 	.word	0x08014ef8
 8009c44:	08014d60 	.word	0x08014d60

08009c48 <netif_set_link_down>:
 * @ingroup netif
 * Called by a driver when its link goes down
 */
void
netif_set_link_down(struct netif *netif)
{
 8009c48:	b580      	push	{r7, lr}
 8009c4a:	b082      	sub	sp, #8
 8009c4c:	af00      	add	r7, sp, #0
 8009c4e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_down: invalid netif", netif != NULL, return);
 8009c50:	687b      	ldr	r3, [r7, #4]
 8009c52:	2b00      	cmp	r3, #0
 8009c54:	d107      	bne.n	8009c66 <netif_set_link_down+0x1e>
 8009c56:	4b11      	ldr	r3, [pc, #68]	; (8009c9c <netif_set_link_down+0x54>)
 8009c58:	f240 4206 	movw	r2, #1030	; 0x406
 8009c5c:	4910      	ldr	r1, [pc, #64]	; (8009ca0 <netif_set_link_down+0x58>)
 8009c5e:	4811      	ldr	r0, [pc, #68]	; (8009ca4 <netif_set_link_down+0x5c>)
 8009c60:	f009 fe82 	bl	8013968 <iprintf>
 8009c64:	e017      	b.n	8009c96 <netif_set_link_down+0x4e>

  if (netif->flags & NETIF_FLAG_LINK_UP) {
 8009c66:	687b      	ldr	r3, [r7, #4]
 8009c68:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8009c6c:	f003 0304 	and.w	r3, r3, #4
 8009c70:	2b00      	cmp	r3, #0
 8009c72:	d010      	beq.n	8009c96 <netif_set_link_down+0x4e>
    netif_clear_flags(netif, NETIF_FLAG_LINK_UP);
 8009c74:	687b      	ldr	r3, [r7, #4]
 8009c76:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8009c7a:	f023 0304 	bic.w	r3, r3, #4
 8009c7e:	b2da      	uxtb	r2, r3
 8009c80:	687b      	ldr	r3, [r7, #4]
 8009c82:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    NETIF_LINK_CALLBACK(netif);
 8009c86:	687b      	ldr	r3, [r7, #4]
 8009c88:	69db      	ldr	r3, [r3, #28]
 8009c8a:	2b00      	cmp	r3, #0
 8009c8c:	d003      	beq.n	8009c96 <netif_set_link_down+0x4e>
 8009c8e:	687b      	ldr	r3, [r7, #4]
 8009c90:	69db      	ldr	r3, [r3, #28]
 8009c92:	6878      	ldr	r0, [r7, #4]
 8009c94:	4798      	blx	r3
      args.link_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 8009c96:	3708      	adds	r7, #8
 8009c98:	46bd      	mov	sp, r7
 8009c9a:	bd80      	pop	{r7, pc}
 8009c9c:	08014d10 	.word	0x08014d10
 8009ca0:	08014f1c 	.word	0x08014f1c
 8009ca4:	08014d60 	.word	0x08014d60

08009ca8 <netif_set_link_callback>:
 * @ingroup netif
 * Set callback to be called when link is brought up/down
 */
void
netif_set_link_callback(struct netif *netif, netif_status_callback_fn link_callback)
{
 8009ca8:	b480      	push	{r7}
 8009caa:	b083      	sub	sp, #12
 8009cac:	af00      	add	r7, sp, #0
 8009cae:	6078      	str	r0, [r7, #4]
 8009cb0:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();

  if (netif) {
 8009cb2:	687b      	ldr	r3, [r7, #4]
 8009cb4:	2b00      	cmp	r3, #0
 8009cb6:	d002      	beq.n	8009cbe <netif_set_link_callback+0x16>
    netif->link_callback = link_callback;
 8009cb8:	687b      	ldr	r3, [r7, #4]
 8009cba:	683a      	ldr	r2, [r7, #0]
 8009cbc:	61da      	str	r2, [r3, #28]
  }
}
 8009cbe:	bf00      	nop
 8009cc0:	370c      	adds	r7, #12
 8009cc2:	46bd      	mov	sp, r7
 8009cc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cc8:	4770      	bx	lr

08009cca <netif_null_output_ip4>:
#if LWIP_IPV4
/** Dummy IPv4 output function for netifs not supporting IPv4
 */
static err_t
netif_null_output_ip4(struct netif *netif, struct pbuf *p, const ip4_addr_t *ipaddr)
{
 8009cca:	b480      	push	{r7}
 8009ccc:	b085      	sub	sp, #20
 8009cce:	af00      	add	r7, sp, #0
 8009cd0:	60f8      	str	r0, [r7, #12]
 8009cd2:	60b9      	str	r1, [r7, #8]
 8009cd4:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(netif);
  LWIP_UNUSED_ARG(p);
  LWIP_UNUSED_ARG(ipaddr);

  return ERR_IF;
 8009cd6:	f06f 030b 	mvn.w	r3, #11
}
 8009cda:	4618      	mov	r0, r3
 8009cdc:	3714      	adds	r7, #20
 8009cde:	46bd      	mov	sp, r7
 8009ce0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ce4:	4770      	bx	lr
	...

08009ce8 <netif_get_by_index>:
*
* @param idx index of netif to find
*/
struct netif *
netif_get_by_index(u8_t idx)
{
 8009ce8:	b480      	push	{r7}
 8009cea:	b085      	sub	sp, #20
 8009cec:	af00      	add	r7, sp, #0
 8009cee:	4603      	mov	r3, r0
 8009cf0:	71fb      	strb	r3, [r7, #7]
  struct netif *netif;

  LWIP_ASSERT_CORE_LOCKED();

  if (idx != NETIF_NO_INDEX) {
 8009cf2:	79fb      	ldrb	r3, [r7, #7]
 8009cf4:	2b00      	cmp	r3, #0
 8009cf6:	d013      	beq.n	8009d20 <netif_get_by_index+0x38>
    NETIF_FOREACH(netif) {
 8009cf8:	4b0d      	ldr	r3, [pc, #52]	; (8009d30 <netif_get_by_index+0x48>)
 8009cfa:	681b      	ldr	r3, [r3, #0]
 8009cfc:	60fb      	str	r3, [r7, #12]
 8009cfe:	e00c      	b.n	8009d1a <netif_get_by_index+0x32>
      if (idx == netif_get_index(netif)) {
 8009d00:	68fb      	ldr	r3, [r7, #12]
 8009d02:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8009d06:	3301      	adds	r3, #1
 8009d08:	b2db      	uxtb	r3, r3
 8009d0a:	79fa      	ldrb	r2, [r7, #7]
 8009d0c:	429a      	cmp	r2, r3
 8009d0e:	d101      	bne.n	8009d14 <netif_get_by_index+0x2c>
        return netif; /* found! */
 8009d10:	68fb      	ldr	r3, [r7, #12]
 8009d12:	e006      	b.n	8009d22 <netif_get_by_index+0x3a>
    NETIF_FOREACH(netif) {
 8009d14:	68fb      	ldr	r3, [r7, #12]
 8009d16:	681b      	ldr	r3, [r3, #0]
 8009d18:	60fb      	str	r3, [r7, #12]
 8009d1a:	68fb      	ldr	r3, [r7, #12]
 8009d1c:	2b00      	cmp	r3, #0
 8009d1e:	d1ef      	bne.n	8009d00 <netif_get_by_index+0x18>
      }
    }
  }

  return NULL;
 8009d20:	2300      	movs	r3, #0
}
 8009d22:	4618      	mov	r0, r3
 8009d24:	3714      	adds	r7, #20
 8009d26:	46bd      	mov	sp, r7
 8009d28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d2c:	4770      	bx	lr
 8009d2e:	bf00      	nop
 8009d30:	2000c640 	.word	0x2000c640

08009d34 <pbuf_free_ooseq>:
#if !NO_SYS
static
#endif /* !NO_SYS */
void
pbuf_free_ooseq(void)
{
 8009d34:	b580      	push	{r7, lr}
 8009d36:	b082      	sub	sp, #8
 8009d38:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 0);
 8009d3a:	f009 fc1f 	bl	801357c <sys_arch_protect>
 8009d3e:	6038      	str	r0, [r7, #0]
 8009d40:	4b0d      	ldr	r3, [pc, #52]	; (8009d78 <pbuf_free_ooseq+0x44>)
 8009d42:	2200      	movs	r2, #0
 8009d44:	701a      	strb	r2, [r3, #0]
 8009d46:	6838      	ldr	r0, [r7, #0]
 8009d48:	f009 fc26 	bl	8013598 <sys_arch_unprotect>

  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 8009d4c:	4b0b      	ldr	r3, [pc, #44]	; (8009d7c <pbuf_free_ooseq+0x48>)
 8009d4e:	681b      	ldr	r3, [r3, #0]
 8009d50:	607b      	str	r3, [r7, #4]
 8009d52:	e00a      	b.n	8009d6a <pbuf_free_ooseq+0x36>
    if (pcb->ooseq != NULL) {
 8009d54:	687b      	ldr	r3, [r7, #4]
 8009d56:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009d58:	2b00      	cmp	r3, #0
 8009d5a:	d003      	beq.n	8009d64 <pbuf_free_ooseq+0x30>
      /** Free the ooseq pbufs of one PCB only */
      LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free_ooseq: freeing out-of-sequence pbufs\n"));
      tcp_free_ooseq(pcb);
 8009d5c:	6878      	ldr	r0, [r7, #4]
 8009d5e:	f002 f9b3 	bl	800c0c8 <tcp_free_ooseq>
      return;
 8009d62:	e005      	b.n	8009d70 <pbuf_free_ooseq+0x3c>
  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 8009d64:	687b      	ldr	r3, [r7, #4]
 8009d66:	68db      	ldr	r3, [r3, #12]
 8009d68:	607b      	str	r3, [r7, #4]
 8009d6a:	687b      	ldr	r3, [r7, #4]
 8009d6c:	2b00      	cmp	r3, #0
 8009d6e:	d1f1      	bne.n	8009d54 <pbuf_free_ooseq+0x20>
    }
  }
}
 8009d70:	3708      	adds	r7, #8
 8009d72:	46bd      	mov	sp, r7
 8009d74:	bd80      	pop	{r7, pc}
 8009d76:	bf00      	nop
 8009d78:	2000c649 	.word	0x2000c649
 8009d7c:	2000c754 	.word	0x2000c754

08009d80 <pbuf_free_ooseq_callback>:
/**
 * Just a callback function for tcpip_callback() that calls pbuf_free_ooseq().
 */
static void
pbuf_free_ooseq_callback(void *arg)
{
 8009d80:	b580      	push	{r7, lr}
 8009d82:	b082      	sub	sp, #8
 8009d84:	af00      	add	r7, sp, #0
 8009d86:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);
  pbuf_free_ooseq();
 8009d88:	f7ff ffd4 	bl	8009d34 <pbuf_free_ooseq>
}
 8009d8c:	bf00      	nop
 8009d8e:	3708      	adds	r7, #8
 8009d90:	46bd      	mov	sp, r7
 8009d92:	bd80      	pop	{r7, pc}

08009d94 <pbuf_pool_is_empty>:
#endif /* !NO_SYS */

/** Queue a call to pbuf_free_ooseq if not already queued. */
static void
pbuf_pool_is_empty(void)
{
 8009d94:	b580      	push	{r7, lr}
 8009d96:	b082      	sub	sp, #8
 8009d98:	af00      	add	r7, sp, #0
#ifndef PBUF_POOL_FREE_OOSEQ_QUEUE_CALL
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 1);
#else /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
  u8_t queued;
  SYS_ARCH_DECL_PROTECT(old_level);
  SYS_ARCH_PROTECT(old_level);
 8009d9a:	f009 fbef 	bl	801357c <sys_arch_protect>
 8009d9e:	6078      	str	r0, [r7, #4]
  queued = pbuf_free_ooseq_pending;
 8009da0:	4b0f      	ldr	r3, [pc, #60]	; (8009de0 <pbuf_pool_is_empty+0x4c>)
 8009da2:	781b      	ldrb	r3, [r3, #0]
 8009da4:	70fb      	strb	r3, [r7, #3]
  pbuf_free_ooseq_pending = 1;
 8009da6:	4b0e      	ldr	r3, [pc, #56]	; (8009de0 <pbuf_pool_is_empty+0x4c>)
 8009da8:	2201      	movs	r2, #1
 8009daa:	701a      	strb	r2, [r3, #0]
  SYS_ARCH_UNPROTECT(old_level);
 8009dac:	6878      	ldr	r0, [r7, #4]
 8009dae:	f009 fbf3 	bl	8013598 <sys_arch_unprotect>

  if (!queued) {
 8009db2:	78fb      	ldrb	r3, [r7, #3]
 8009db4:	2b00      	cmp	r3, #0
 8009db6:	d10f      	bne.n	8009dd8 <pbuf_pool_is_empty+0x44>
    /* queue a call to pbuf_free_ooseq if not already queued */
    PBUF_POOL_FREE_OOSEQ_QUEUE_CALL();
 8009db8:	2100      	movs	r1, #0
 8009dba:	480a      	ldr	r0, [pc, #40]	; (8009de4 <pbuf_pool_is_empty+0x50>)
 8009dbc:	f7fe fdd6 	bl	800896c <tcpip_try_callback>
 8009dc0:	4603      	mov	r3, r0
 8009dc2:	2b00      	cmp	r3, #0
 8009dc4:	d008      	beq.n	8009dd8 <pbuf_pool_is_empty+0x44>
 8009dc6:	f009 fbd9 	bl	801357c <sys_arch_protect>
 8009dca:	6078      	str	r0, [r7, #4]
 8009dcc:	4b04      	ldr	r3, [pc, #16]	; (8009de0 <pbuf_pool_is_empty+0x4c>)
 8009dce:	2200      	movs	r2, #0
 8009dd0:	701a      	strb	r2, [r3, #0]
 8009dd2:	6878      	ldr	r0, [r7, #4]
 8009dd4:	f009 fbe0 	bl	8013598 <sys_arch_unprotect>
  }
#endif /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
}
 8009dd8:	bf00      	nop
 8009dda:	3708      	adds	r7, #8
 8009ddc:	46bd      	mov	sp, r7
 8009dde:	bd80      	pop	{r7, pc}
 8009de0:	2000c649 	.word	0x2000c649
 8009de4:	08009d81 	.word	0x08009d81

08009de8 <pbuf_init_alloced_pbuf>:
#endif /* !LWIP_TCP || !TCP_QUEUE_OOSEQ || !PBUF_POOL_FREE_OOSEQ */

/* Initialize members of struct pbuf after allocation */
static void
pbuf_init_alloced_pbuf(struct pbuf *p, void *payload, u16_t tot_len, u16_t len, pbuf_type type, u8_t flags)
{
 8009de8:	b480      	push	{r7}
 8009dea:	b085      	sub	sp, #20
 8009dec:	af00      	add	r7, sp, #0
 8009dee:	60f8      	str	r0, [r7, #12]
 8009df0:	60b9      	str	r1, [r7, #8]
 8009df2:	4611      	mov	r1, r2
 8009df4:	461a      	mov	r2, r3
 8009df6:	460b      	mov	r3, r1
 8009df8:	80fb      	strh	r3, [r7, #6]
 8009dfa:	4613      	mov	r3, r2
 8009dfc:	80bb      	strh	r3, [r7, #4]
  p->next = NULL;
 8009dfe:	68fb      	ldr	r3, [r7, #12]
 8009e00:	2200      	movs	r2, #0
 8009e02:	601a      	str	r2, [r3, #0]
  p->payload = payload;
 8009e04:	68fb      	ldr	r3, [r7, #12]
 8009e06:	68ba      	ldr	r2, [r7, #8]
 8009e08:	605a      	str	r2, [r3, #4]
  p->tot_len = tot_len;
 8009e0a:	68fb      	ldr	r3, [r7, #12]
 8009e0c:	88fa      	ldrh	r2, [r7, #6]
 8009e0e:	811a      	strh	r2, [r3, #8]
  p->len = len;
 8009e10:	68fb      	ldr	r3, [r7, #12]
 8009e12:	88ba      	ldrh	r2, [r7, #4]
 8009e14:	815a      	strh	r2, [r3, #10]
  p->type_internal = (u8_t)type;
 8009e16:	8b3b      	ldrh	r3, [r7, #24]
 8009e18:	b2da      	uxtb	r2, r3
 8009e1a:	68fb      	ldr	r3, [r7, #12]
 8009e1c:	731a      	strb	r2, [r3, #12]
  p->flags = flags;
 8009e1e:	68fb      	ldr	r3, [r7, #12]
 8009e20:	7f3a      	ldrb	r2, [r7, #28]
 8009e22:	735a      	strb	r2, [r3, #13]
  p->ref = 1;
 8009e24:	68fb      	ldr	r3, [r7, #12]
 8009e26:	2201      	movs	r2, #1
 8009e28:	739a      	strb	r2, [r3, #14]
  p->if_idx = NETIF_NO_INDEX;
 8009e2a:	68fb      	ldr	r3, [r7, #12]
 8009e2c:	2200      	movs	r2, #0
 8009e2e:	73da      	strb	r2, [r3, #15]
}
 8009e30:	bf00      	nop
 8009e32:	3714      	adds	r7, #20
 8009e34:	46bd      	mov	sp, r7
 8009e36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e3a:	4770      	bx	lr

08009e3c <pbuf_alloc>:
 * @return the allocated pbuf. If multiple pbufs where allocated, this
 * is the first pbuf of a pbuf chain.
 */
struct pbuf *
pbuf_alloc(pbuf_layer layer, u16_t length, pbuf_type type)
{
 8009e3c:	b580      	push	{r7, lr}
 8009e3e:	b08c      	sub	sp, #48	; 0x30
 8009e40:	af02      	add	r7, sp, #8
 8009e42:	4603      	mov	r3, r0
 8009e44:	71fb      	strb	r3, [r7, #7]
 8009e46:	460b      	mov	r3, r1
 8009e48:	80bb      	strh	r3, [r7, #4]
 8009e4a:	4613      	mov	r3, r2
 8009e4c:	807b      	strh	r3, [r7, #2]
  struct pbuf *p;
  u16_t offset = (u16_t)layer;
 8009e4e:	79fb      	ldrb	r3, [r7, #7]
 8009e50:	847b      	strh	r3, [r7, #34]	; 0x22
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F")\n", length));

  switch (type) {
 8009e52:	887b      	ldrh	r3, [r7, #2]
 8009e54:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 8009e58:	d07f      	beq.n	8009f5a <pbuf_alloc+0x11e>
 8009e5a:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 8009e5e:	f300 80c8 	bgt.w	8009ff2 <pbuf_alloc+0x1b6>
 8009e62:	f5b3 7fc1 	cmp.w	r3, #386	; 0x182
 8009e66:	d010      	beq.n	8009e8a <pbuf_alloc+0x4e>
 8009e68:	f5b3 7fc1 	cmp.w	r3, #386	; 0x182
 8009e6c:	f300 80c1 	bgt.w	8009ff2 <pbuf_alloc+0x1b6>
 8009e70:	2b01      	cmp	r3, #1
 8009e72:	d002      	beq.n	8009e7a <pbuf_alloc+0x3e>
 8009e74:	2b41      	cmp	r3, #65	; 0x41
 8009e76:	f040 80bc 	bne.w	8009ff2 <pbuf_alloc+0x1b6>
    case PBUF_REF: /* fall through */
    case PBUF_ROM:
      p = pbuf_alloc_reference(NULL, length, type);
 8009e7a:	887a      	ldrh	r2, [r7, #2]
 8009e7c:	88bb      	ldrh	r3, [r7, #4]
 8009e7e:	4619      	mov	r1, r3
 8009e80:	2000      	movs	r0, #0
 8009e82:	f000 f8d1 	bl	800a028 <pbuf_alloc_reference>
 8009e86:	6278      	str	r0, [r7, #36]	; 0x24
      break;
 8009e88:	e0bd      	b.n	800a006 <pbuf_alloc+0x1ca>
    case PBUF_POOL: {
      struct pbuf *q, *last;
      u16_t rem_len; /* remaining length */
      p = NULL;
 8009e8a:	2300      	movs	r3, #0
 8009e8c:	627b      	str	r3, [r7, #36]	; 0x24
      last = NULL;
 8009e8e:	2300      	movs	r3, #0
 8009e90:	61fb      	str	r3, [r7, #28]
      rem_len = length;
 8009e92:	88bb      	ldrh	r3, [r7, #4]
 8009e94:	837b      	strh	r3, [r7, #26]
      do {
        u16_t qlen;
        q = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
 8009e96:	200c      	movs	r0, #12
 8009e98:	f7ff fb94 	bl	80095c4 <memp_malloc>
 8009e9c:	6138      	str	r0, [r7, #16]
        if (q == NULL) {
 8009e9e:	693b      	ldr	r3, [r7, #16]
 8009ea0:	2b00      	cmp	r3, #0
 8009ea2:	d109      	bne.n	8009eb8 <pbuf_alloc+0x7c>
          PBUF_POOL_IS_EMPTY();
 8009ea4:	f7ff ff76 	bl	8009d94 <pbuf_pool_is_empty>
          /* free chain so far allocated */
          if (p) {
 8009ea8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009eaa:	2b00      	cmp	r3, #0
 8009eac:	d002      	beq.n	8009eb4 <pbuf_alloc+0x78>
            pbuf_free(p);
 8009eae:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8009eb0:	f000 faa8 	bl	800a404 <pbuf_free>
          }
          /* bail out unsuccessfully */
          return NULL;
 8009eb4:	2300      	movs	r3, #0
 8009eb6:	e0a7      	b.n	800a008 <pbuf_alloc+0x1cc>
        }
        qlen = LWIP_MIN(rem_len, (u16_t)(PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)));
 8009eb8:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8009eba:	3303      	adds	r3, #3
 8009ebc:	b29b      	uxth	r3, r3
 8009ebe:	f023 0303 	bic.w	r3, r3, #3
 8009ec2:	b29b      	uxth	r3, r3
 8009ec4:	f5c3 7314 	rsb	r3, r3, #592	; 0x250
 8009ec8:	b29b      	uxth	r3, r3
 8009eca:	8b7a      	ldrh	r2, [r7, #26]
 8009ecc:	4293      	cmp	r3, r2
 8009ece:	bf28      	it	cs
 8009ed0:	4613      	movcs	r3, r2
 8009ed2:	81fb      	strh	r3, [r7, #14]
        pbuf_init_alloced_pbuf(q, LWIP_MEM_ALIGN((void *)((u8_t *)q + SIZEOF_STRUCT_PBUF + offset)),
 8009ed4:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8009ed6:	3310      	adds	r3, #16
 8009ed8:	693a      	ldr	r2, [r7, #16]
 8009eda:	4413      	add	r3, r2
 8009edc:	3303      	adds	r3, #3
 8009ede:	f023 0303 	bic.w	r3, r3, #3
 8009ee2:	4618      	mov	r0, r3
 8009ee4:	89f9      	ldrh	r1, [r7, #14]
 8009ee6:	8b7a      	ldrh	r2, [r7, #26]
 8009ee8:	2300      	movs	r3, #0
 8009eea:	9301      	str	r3, [sp, #4]
 8009eec:	887b      	ldrh	r3, [r7, #2]
 8009eee:	9300      	str	r3, [sp, #0]
 8009ef0:	460b      	mov	r3, r1
 8009ef2:	4601      	mov	r1, r0
 8009ef4:	6938      	ldr	r0, [r7, #16]
 8009ef6:	f7ff ff77 	bl	8009de8 <pbuf_init_alloced_pbuf>
                               rem_len, qlen, type, 0);
        LWIP_ASSERT("pbuf_alloc: pbuf q->payload properly aligned",
 8009efa:	693b      	ldr	r3, [r7, #16]
 8009efc:	685b      	ldr	r3, [r3, #4]
 8009efe:	f003 0303 	and.w	r3, r3, #3
 8009f02:	2b00      	cmp	r3, #0
 8009f04:	d006      	beq.n	8009f14 <pbuf_alloc+0xd8>
 8009f06:	4b42      	ldr	r3, [pc, #264]	; (800a010 <pbuf_alloc+0x1d4>)
 8009f08:	f44f 7280 	mov.w	r2, #256	; 0x100
 8009f0c:	4941      	ldr	r1, [pc, #260]	; (800a014 <pbuf_alloc+0x1d8>)
 8009f0e:	4842      	ldr	r0, [pc, #264]	; (800a018 <pbuf_alloc+0x1dc>)
 8009f10:	f009 fd2a 	bl	8013968 <iprintf>
                    ((mem_ptr_t)q->payload % MEM_ALIGNMENT) == 0);
        LWIP_ASSERT("PBUF_POOL_BUFSIZE must be bigger than MEM_ALIGNMENT",
 8009f14:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8009f16:	3303      	adds	r3, #3
 8009f18:	f023 0303 	bic.w	r3, r3, #3
 8009f1c:	f5b3 7f14 	cmp.w	r3, #592	; 0x250
 8009f20:	d106      	bne.n	8009f30 <pbuf_alloc+0xf4>
 8009f22:	4b3b      	ldr	r3, [pc, #236]	; (800a010 <pbuf_alloc+0x1d4>)
 8009f24:	f44f 7281 	mov.w	r2, #258	; 0x102
 8009f28:	493c      	ldr	r1, [pc, #240]	; (800a01c <pbuf_alloc+0x1e0>)
 8009f2a:	483b      	ldr	r0, [pc, #236]	; (800a018 <pbuf_alloc+0x1dc>)
 8009f2c:	f009 fd1c 	bl	8013968 <iprintf>
                    (PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)) > 0 );
        if (p == NULL) {
 8009f30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009f32:	2b00      	cmp	r3, #0
 8009f34:	d102      	bne.n	8009f3c <pbuf_alloc+0x100>
          /* allocated head of pbuf chain (into p) */
          p = q;
 8009f36:	693b      	ldr	r3, [r7, #16]
 8009f38:	627b      	str	r3, [r7, #36]	; 0x24
 8009f3a:	e002      	b.n	8009f42 <pbuf_alloc+0x106>
        } else {
          /* make previous pbuf point to this pbuf */
          last->next = q;
 8009f3c:	69fb      	ldr	r3, [r7, #28]
 8009f3e:	693a      	ldr	r2, [r7, #16]
 8009f40:	601a      	str	r2, [r3, #0]
        }
        last = q;
 8009f42:	693b      	ldr	r3, [r7, #16]
 8009f44:	61fb      	str	r3, [r7, #28]
        rem_len = (u16_t)(rem_len - qlen);
 8009f46:	8b7a      	ldrh	r2, [r7, #26]
 8009f48:	89fb      	ldrh	r3, [r7, #14]
 8009f4a:	1ad3      	subs	r3, r2, r3
 8009f4c:	837b      	strh	r3, [r7, #26]
        offset = 0;
 8009f4e:	2300      	movs	r3, #0
 8009f50:	847b      	strh	r3, [r7, #34]	; 0x22
      } while (rem_len > 0);
 8009f52:	8b7b      	ldrh	r3, [r7, #26]
 8009f54:	2b00      	cmp	r3, #0
 8009f56:	d19e      	bne.n	8009e96 <pbuf_alloc+0x5a>
      break;
 8009f58:	e055      	b.n	800a006 <pbuf_alloc+0x1ca>
    }
    case PBUF_RAM: {
      u16_t payload_len = (u16_t)(LWIP_MEM_ALIGN_SIZE(offset) + LWIP_MEM_ALIGN_SIZE(length));
 8009f5a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8009f5c:	3303      	adds	r3, #3
 8009f5e:	b29b      	uxth	r3, r3
 8009f60:	f023 0303 	bic.w	r3, r3, #3
 8009f64:	b29a      	uxth	r2, r3
 8009f66:	88bb      	ldrh	r3, [r7, #4]
 8009f68:	3303      	adds	r3, #3
 8009f6a:	b29b      	uxth	r3, r3
 8009f6c:	f023 0303 	bic.w	r3, r3, #3
 8009f70:	b29b      	uxth	r3, r3
 8009f72:	4413      	add	r3, r2
 8009f74:	833b      	strh	r3, [r7, #24]
      mem_size_t alloc_len = (mem_size_t)(LWIP_MEM_ALIGN_SIZE(SIZEOF_STRUCT_PBUF) + payload_len);
 8009f76:	8b3b      	ldrh	r3, [r7, #24]
 8009f78:	3310      	adds	r3, #16
 8009f7a:	82fb      	strh	r3, [r7, #22]

      /* bug #50040: Check for integer overflow when calculating alloc_len */
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 8009f7c:	8b3a      	ldrh	r2, [r7, #24]
 8009f7e:	88bb      	ldrh	r3, [r7, #4]
 8009f80:	3303      	adds	r3, #3
 8009f82:	f023 0303 	bic.w	r3, r3, #3
 8009f86:	429a      	cmp	r2, r3
 8009f88:	d306      	bcc.n	8009f98 <pbuf_alloc+0x15c>
          (alloc_len < LWIP_MEM_ALIGN_SIZE(length))) {
 8009f8a:	8afa      	ldrh	r2, [r7, #22]
 8009f8c:	88bb      	ldrh	r3, [r7, #4]
 8009f8e:	3303      	adds	r3, #3
 8009f90:	f023 0303 	bic.w	r3, r3, #3
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 8009f94:	429a      	cmp	r2, r3
 8009f96:	d201      	bcs.n	8009f9c <pbuf_alloc+0x160>
        return NULL;
 8009f98:	2300      	movs	r3, #0
 8009f9a:	e035      	b.n	800a008 <pbuf_alloc+0x1cc>
      }

      /* If pbuf is to be allocated in RAM, allocate memory for it. */
      p = (struct pbuf *)mem_malloc(alloc_len);
 8009f9c:	8afb      	ldrh	r3, [r7, #22]
 8009f9e:	4618      	mov	r0, r3
 8009fa0:	f7ff f900 	bl	80091a4 <mem_malloc>
 8009fa4:	6278      	str	r0, [r7, #36]	; 0x24
      if (p == NULL) {
 8009fa6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009fa8:	2b00      	cmp	r3, #0
 8009faa:	d101      	bne.n	8009fb0 <pbuf_alloc+0x174>
        return NULL;
 8009fac:	2300      	movs	r3, #0
 8009fae:	e02b      	b.n	800a008 <pbuf_alloc+0x1cc>
      }
      pbuf_init_alloced_pbuf(p, LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset)),
 8009fb0:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8009fb2:	3310      	adds	r3, #16
 8009fb4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009fb6:	4413      	add	r3, r2
 8009fb8:	3303      	adds	r3, #3
 8009fba:	f023 0303 	bic.w	r3, r3, #3
 8009fbe:	4618      	mov	r0, r3
 8009fc0:	88b9      	ldrh	r1, [r7, #4]
 8009fc2:	88ba      	ldrh	r2, [r7, #4]
 8009fc4:	2300      	movs	r3, #0
 8009fc6:	9301      	str	r3, [sp, #4]
 8009fc8:	887b      	ldrh	r3, [r7, #2]
 8009fca:	9300      	str	r3, [sp, #0]
 8009fcc:	460b      	mov	r3, r1
 8009fce:	4601      	mov	r1, r0
 8009fd0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8009fd2:	f7ff ff09 	bl	8009de8 <pbuf_init_alloced_pbuf>
                             length, length, type, 0);
      LWIP_ASSERT("pbuf_alloc: pbuf->payload properly aligned",
 8009fd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009fd8:	685b      	ldr	r3, [r3, #4]
 8009fda:	f003 0303 	and.w	r3, r3, #3
 8009fde:	2b00      	cmp	r3, #0
 8009fe0:	d010      	beq.n	800a004 <pbuf_alloc+0x1c8>
 8009fe2:	4b0b      	ldr	r3, [pc, #44]	; (800a010 <pbuf_alloc+0x1d4>)
 8009fe4:	f44f 7291 	mov.w	r2, #290	; 0x122
 8009fe8:	490d      	ldr	r1, [pc, #52]	; (800a020 <pbuf_alloc+0x1e4>)
 8009fea:	480b      	ldr	r0, [pc, #44]	; (800a018 <pbuf_alloc+0x1dc>)
 8009fec:	f009 fcbc 	bl	8013968 <iprintf>
                  ((mem_ptr_t)p->payload % MEM_ALIGNMENT) == 0);
      break;
 8009ff0:	e008      	b.n	800a004 <pbuf_alloc+0x1c8>
    }
    default:
      LWIP_ASSERT("pbuf_alloc: erroneous type", 0);
 8009ff2:	4b07      	ldr	r3, [pc, #28]	; (800a010 <pbuf_alloc+0x1d4>)
 8009ff4:	f240 1227 	movw	r2, #295	; 0x127
 8009ff8:	490a      	ldr	r1, [pc, #40]	; (800a024 <pbuf_alloc+0x1e8>)
 8009ffa:	4807      	ldr	r0, [pc, #28]	; (800a018 <pbuf_alloc+0x1dc>)
 8009ffc:	f009 fcb4 	bl	8013968 <iprintf>
      return NULL;
 800a000:	2300      	movs	r3, #0
 800a002:	e001      	b.n	800a008 <pbuf_alloc+0x1cc>
      break;
 800a004:	bf00      	nop
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F") == %p\n", length, (void *)p));
  return p;
 800a006:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800a008:	4618      	mov	r0, r3
 800a00a:	3728      	adds	r7, #40	; 0x28
 800a00c:	46bd      	mov	sp, r7
 800a00e:	bd80      	pop	{r7, pc}
 800a010:	08014f40 	.word	0x08014f40
 800a014:	08014f70 	.word	0x08014f70
 800a018:	08014fa0 	.word	0x08014fa0
 800a01c:	08014fc8 	.word	0x08014fc8
 800a020:	08014ffc 	.word	0x08014ffc
 800a024:	08015028 	.word	0x08015028

0800a028 <pbuf_alloc_reference>:
 *
 * @return the allocated pbuf.
 */
struct pbuf *
pbuf_alloc_reference(void *payload, u16_t length, pbuf_type type)
{
 800a028:	b580      	push	{r7, lr}
 800a02a:	b086      	sub	sp, #24
 800a02c:	af02      	add	r7, sp, #8
 800a02e:	6078      	str	r0, [r7, #4]
 800a030:	460b      	mov	r3, r1
 800a032:	807b      	strh	r3, [r7, #2]
 800a034:	4613      	mov	r3, r2
 800a036:	803b      	strh	r3, [r7, #0]
  struct pbuf *p;
  LWIP_ASSERT("invalid pbuf_type", (type == PBUF_REF) || (type == PBUF_ROM));
 800a038:	883b      	ldrh	r3, [r7, #0]
 800a03a:	2b41      	cmp	r3, #65	; 0x41
 800a03c:	d009      	beq.n	800a052 <pbuf_alloc_reference+0x2a>
 800a03e:	883b      	ldrh	r3, [r7, #0]
 800a040:	2b01      	cmp	r3, #1
 800a042:	d006      	beq.n	800a052 <pbuf_alloc_reference+0x2a>
 800a044:	4b0f      	ldr	r3, [pc, #60]	; (800a084 <pbuf_alloc_reference+0x5c>)
 800a046:	f44f 72a5 	mov.w	r2, #330	; 0x14a
 800a04a:	490f      	ldr	r1, [pc, #60]	; (800a088 <pbuf_alloc_reference+0x60>)
 800a04c:	480f      	ldr	r0, [pc, #60]	; (800a08c <pbuf_alloc_reference+0x64>)
 800a04e:	f009 fc8b 	bl	8013968 <iprintf>
  /* only allocate memory for the pbuf structure */
  p = (struct pbuf *)memp_malloc(MEMP_PBUF);
 800a052:	200b      	movs	r0, #11
 800a054:	f7ff fab6 	bl	80095c4 <memp_malloc>
 800a058:	60f8      	str	r0, [r7, #12]
  if (p == NULL) {
 800a05a:	68fb      	ldr	r3, [r7, #12]
 800a05c:	2b00      	cmp	r3, #0
 800a05e:	d101      	bne.n	800a064 <pbuf_alloc_reference+0x3c>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_alloc_reference: Could not allocate MEMP_PBUF for PBUF_%s.\n",
                 (type == PBUF_ROM) ? "ROM" : "REF"));
    return NULL;
 800a060:	2300      	movs	r3, #0
 800a062:	e00b      	b.n	800a07c <pbuf_alloc_reference+0x54>
  }
  pbuf_init_alloced_pbuf(p, payload, length, length, type, 0);
 800a064:	8879      	ldrh	r1, [r7, #2]
 800a066:	887a      	ldrh	r2, [r7, #2]
 800a068:	2300      	movs	r3, #0
 800a06a:	9301      	str	r3, [sp, #4]
 800a06c:	883b      	ldrh	r3, [r7, #0]
 800a06e:	9300      	str	r3, [sp, #0]
 800a070:	460b      	mov	r3, r1
 800a072:	6879      	ldr	r1, [r7, #4]
 800a074:	68f8      	ldr	r0, [r7, #12]
 800a076:	f7ff feb7 	bl	8009de8 <pbuf_init_alloced_pbuf>
  return p;
 800a07a:	68fb      	ldr	r3, [r7, #12]
}
 800a07c:	4618      	mov	r0, r3
 800a07e:	3710      	adds	r7, #16
 800a080:	46bd      	mov	sp, r7
 800a082:	bd80      	pop	{r7, pc}
 800a084:	08014f40 	.word	0x08014f40
 800a088:	08015044 	.word	0x08015044
 800a08c:	08014fa0 	.word	0x08014fa0

0800a090 <pbuf_alloced_custom>:
 *        big enough to hold 'length' plus the header size
 */
struct pbuf *
pbuf_alloced_custom(pbuf_layer l, u16_t length, pbuf_type type, struct pbuf_custom *p,
                    void *payload_mem, u16_t payload_mem_len)
{
 800a090:	b580      	push	{r7, lr}
 800a092:	b088      	sub	sp, #32
 800a094:	af02      	add	r7, sp, #8
 800a096:	607b      	str	r3, [r7, #4]
 800a098:	4603      	mov	r3, r0
 800a09a:	73fb      	strb	r3, [r7, #15]
 800a09c:	460b      	mov	r3, r1
 800a09e:	81bb      	strh	r3, [r7, #12]
 800a0a0:	4613      	mov	r3, r2
 800a0a2:	817b      	strh	r3, [r7, #10]
  u16_t offset = (u16_t)l;
 800a0a4:	7bfb      	ldrb	r3, [r7, #15]
 800a0a6:	827b      	strh	r3, [r7, #18]
  void *payload;
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloced_custom(length=%"U16_F")\n", length));

  if (LWIP_MEM_ALIGN_SIZE(offset) + length > payload_mem_len) {
 800a0a8:	8a7b      	ldrh	r3, [r7, #18]
 800a0aa:	3303      	adds	r3, #3
 800a0ac:	f023 0203 	bic.w	r2, r3, #3
 800a0b0:	89bb      	ldrh	r3, [r7, #12]
 800a0b2:	441a      	add	r2, r3
 800a0b4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800a0b6:	429a      	cmp	r2, r3
 800a0b8:	d901      	bls.n	800a0be <pbuf_alloced_custom+0x2e>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_WARNING, ("pbuf_alloced_custom(length=%"U16_F") buffer too short\n", length));
    return NULL;
 800a0ba:	2300      	movs	r3, #0
 800a0bc:	e018      	b.n	800a0f0 <pbuf_alloced_custom+0x60>
  }

  if (payload_mem != NULL) {
 800a0be:	6a3b      	ldr	r3, [r7, #32]
 800a0c0:	2b00      	cmp	r3, #0
 800a0c2:	d007      	beq.n	800a0d4 <pbuf_alloced_custom+0x44>
    payload = (u8_t *)payload_mem + LWIP_MEM_ALIGN_SIZE(offset);
 800a0c4:	8a7b      	ldrh	r3, [r7, #18]
 800a0c6:	3303      	adds	r3, #3
 800a0c8:	f023 0303 	bic.w	r3, r3, #3
 800a0cc:	6a3a      	ldr	r2, [r7, #32]
 800a0ce:	4413      	add	r3, r2
 800a0d0:	617b      	str	r3, [r7, #20]
 800a0d2:	e001      	b.n	800a0d8 <pbuf_alloced_custom+0x48>
  } else {
    payload = NULL;
 800a0d4:	2300      	movs	r3, #0
 800a0d6:	617b      	str	r3, [r7, #20]
  }
  pbuf_init_alloced_pbuf(&p->pbuf, payload, length, length, type, PBUF_FLAG_IS_CUSTOM);
 800a0d8:	6878      	ldr	r0, [r7, #4]
 800a0da:	89b9      	ldrh	r1, [r7, #12]
 800a0dc:	89ba      	ldrh	r2, [r7, #12]
 800a0de:	2302      	movs	r3, #2
 800a0e0:	9301      	str	r3, [sp, #4]
 800a0e2:	897b      	ldrh	r3, [r7, #10]
 800a0e4:	9300      	str	r3, [sp, #0]
 800a0e6:	460b      	mov	r3, r1
 800a0e8:	6979      	ldr	r1, [r7, #20]
 800a0ea:	f7ff fe7d 	bl	8009de8 <pbuf_init_alloced_pbuf>
  return &p->pbuf;
 800a0ee:	687b      	ldr	r3, [r7, #4]
}
 800a0f0:	4618      	mov	r0, r3
 800a0f2:	3718      	adds	r7, #24
 800a0f4:	46bd      	mov	sp, r7
 800a0f6:	bd80      	pop	{r7, pc}

0800a0f8 <pbuf_realloc>:
 *
 * @note Despite its name, pbuf_realloc cannot grow the size of a pbuf (chain).
 */
void
pbuf_realloc(struct pbuf *p, u16_t new_len)
{
 800a0f8:	b580      	push	{r7, lr}
 800a0fa:	b084      	sub	sp, #16
 800a0fc:	af00      	add	r7, sp, #0
 800a0fe:	6078      	str	r0, [r7, #4]
 800a100:	460b      	mov	r3, r1
 800a102:	807b      	strh	r3, [r7, #2]
  struct pbuf *q;
  u16_t rem_len; /* remaining length */
  u16_t shrink;

  LWIP_ASSERT("pbuf_realloc: p != NULL", p != NULL);
 800a104:	687b      	ldr	r3, [r7, #4]
 800a106:	2b00      	cmp	r3, #0
 800a108:	d106      	bne.n	800a118 <pbuf_realloc+0x20>
 800a10a:	4b3a      	ldr	r3, [pc, #232]	; (800a1f4 <pbuf_realloc+0xfc>)
 800a10c:	f44f 72cc 	mov.w	r2, #408	; 0x198
 800a110:	4939      	ldr	r1, [pc, #228]	; (800a1f8 <pbuf_realloc+0x100>)
 800a112:	483a      	ldr	r0, [pc, #232]	; (800a1fc <pbuf_realloc+0x104>)
 800a114:	f009 fc28 	bl	8013968 <iprintf>

  /* desired length larger than current length? */
  if (new_len >= p->tot_len) {
 800a118:	687b      	ldr	r3, [r7, #4]
 800a11a:	891b      	ldrh	r3, [r3, #8]
 800a11c:	887a      	ldrh	r2, [r7, #2]
 800a11e:	429a      	cmp	r2, r3
 800a120:	d263      	bcs.n	800a1ea <pbuf_realloc+0xf2>
    return;
  }

  /* the pbuf chain grows by (new_len - p->tot_len) bytes
   * (which may be negative in case of shrinking) */
  shrink = (u16_t)(p->tot_len - new_len);
 800a122:	687b      	ldr	r3, [r7, #4]
 800a124:	891a      	ldrh	r2, [r3, #8]
 800a126:	887b      	ldrh	r3, [r7, #2]
 800a128:	1ad3      	subs	r3, r2, r3
 800a12a:	813b      	strh	r3, [r7, #8]

  /* first, step over any pbufs that should remain in the chain */
  rem_len = new_len;
 800a12c:	887b      	ldrh	r3, [r7, #2]
 800a12e:	817b      	strh	r3, [r7, #10]
  q = p;
 800a130:	687b      	ldr	r3, [r7, #4]
 800a132:	60fb      	str	r3, [r7, #12]
  /* should this pbuf be kept? */
  while (rem_len > q->len) {
 800a134:	e018      	b.n	800a168 <pbuf_realloc+0x70>
    /* decrease remaining length by pbuf length */
    rem_len = (u16_t)(rem_len - q->len);
 800a136:	68fb      	ldr	r3, [r7, #12]
 800a138:	895b      	ldrh	r3, [r3, #10]
 800a13a:	897a      	ldrh	r2, [r7, #10]
 800a13c:	1ad3      	subs	r3, r2, r3
 800a13e:	817b      	strh	r3, [r7, #10]
    /* decrease total length indicator */
    q->tot_len = (u16_t)(q->tot_len - shrink);
 800a140:	68fb      	ldr	r3, [r7, #12]
 800a142:	891a      	ldrh	r2, [r3, #8]
 800a144:	893b      	ldrh	r3, [r7, #8]
 800a146:	1ad3      	subs	r3, r2, r3
 800a148:	b29a      	uxth	r2, r3
 800a14a:	68fb      	ldr	r3, [r7, #12]
 800a14c:	811a      	strh	r2, [r3, #8]
    /* proceed to next pbuf in chain */
    q = q->next;
 800a14e:	68fb      	ldr	r3, [r7, #12]
 800a150:	681b      	ldr	r3, [r3, #0]
 800a152:	60fb      	str	r3, [r7, #12]
    LWIP_ASSERT("pbuf_realloc: q != NULL", q != NULL);
 800a154:	68fb      	ldr	r3, [r7, #12]
 800a156:	2b00      	cmp	r3, #0
 800a158:	d106      	bne.n	800a168 <pbuf_realloc+0x70>
 800a15a:	4b26      	ldr	r3, [pc, #152]	; (800a1f4 <pbuf_realloc+0xfc>)
 800a15c:	f240 12af 	movw	r2, #431	; 0x1af
 800a160:	4927      	ldr	r1, [pc, #156]	; (800a200 <pbuf_realloc+0x108>)
 800a162:	4826      	ldr	r0, [pc, #152]	; (800a1fc <pbuf_realloc+0x104>)
 800a164:	f009 fc00 	bl	8013968 <iprintf>
  while (rem_len > q->len) {
 800a168:	68fb      	ldr	r3, [r7, #12]
 800a16a:	895b      	ldrh	r3, [r3, #10]
 800a16c:	897a      	ldrh	r2, [r7, #10]
 800a16e:	429a      	cmp	r2, r3
 800a170:	d8e1      	bhi.n	800a136 <pbuf_realloc+0x3e>
  /* we have now reached the new last pbuf (in q) */
  /* rem_len == desired length for pbuf q */

  /* shrink allocated memory for PBUF_RAM */
  /* (other types merely adjust their length fields */
  if (pbuf_match_allocsrc(q, PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) && (rem_len != q->len)
 800a172:	68fb      	ldr	r3, [r7, #12]
 800a174:	7b1b      	ldrb	r3, [r3, #12]
 800a176:	f003 030f 	and.w	r3, r3, #15
 800a17a:	2b00      	cmp	r3, #0
 800a17c:	d121      	bne.n	800a1c2 <pbuf_realloc+0xca>
 800a17e:	68fb      	ldr	r3, [r7, #12]
 800a180:	895b      	ldrh	r3, [r3, #10]
 800a182:	897a      	ldrh	r2, [r7, #10]
 800a184:	429a      	cmp	r2, r3
 800a186:	d01c      	beq.n	800a1c2 <pbuf_realloc+0xca>
#if LWIP_SUPPORT_CUSTOM_PBUF
      && ((q->flags & PBUF_FLAG_IS_CUSTOM) == 0)
 800a188:	68fb      	ldr	r3, [r7, #12]
 800a18a:	7b5b      	ldrb	r3, [r3, #13]
 800a18c:	f003 0302 	and.w	r3, r3, #2
 800a190:	2b00      	cmp	r3, #0
 800a192:	d116      	bne.n	800a1c2 <pbuf_realloc+0xca>
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
     ) {
    /* reallocate and adjust the length of the pbuf that will be split */
    q = (struct pbuf *)mem_trim(q, (mem_size_t)(((u8_t *)q->payload - (u8_t *)q) + rem_len));
 800a194:	68fb      	ldr	r3, [r7, #12]
 800a196:	685a      	ldr	r2, [r3, #4]
 800a198:	68fb      	ldr	r3, [r7, #12]
 800a19a:	1ad3      	subs	r3, r2, r3
 800a19c:	b29a      	uxth	r2, r3
 800a19e:	897b      	ldrh	r3, [r7, #10]
 800a1a0:	4413      	add	r3, r2
 800a1a2:	b29b      	uxth	r3, r3
 800a1a4:	4619      	mov	r1, r3
 800a1a6:	68f8      	ldr	r0, [r7, #12]
 800a1a8:	f7fe fed0 	bl	8008f4c <mem_trim>
 800a1ac:	60f8      	str	r0, [r7, #12]
    LWIP_ASSERT("mem_trim returned q == NULL", q != NULL);
 800a1ae:	68fb      	ldr	r3, [r7, #12]
 800a1b0:	2b00      	cmp	r3, #0
 800a1b2:	d106      	bne.n	800a1c2 <pbuf_realloc+0xca>
 800a1b4:	4b0f      	ldr	r3, [pc, #60]	; (800a1f4 <pbuf_realloc+0xfc>)
 800a1b6:	f240 12bd 	movw	r2, #445	; 0x1bd
 800a1ba:	4912      	ldr	r1, [pc, #72]	; (800a204 <pbuf_realloc+0x10c>)
 800a1bc:	480f      	ldr	r0, [pc, #60]	; (800a1fc <pbuf_realloc+0x104>)
 800a1be:	f009 fbd3 	bl	8013968 <iprintf>
  }
  /* adjust length fields for new last pbuf */
  q->len = rem_len;
 800a1c2:	68fb      	ldr	r3, [r7, #12]
 800a1c4:	897a      	ldrh	r2, [r7, #10]
 800a1c6:	815a      	strh	r2, [r3, #10]
  q->tot_len = q->len;
 800a1c8:	68fb      	ldr	r3, [r7, #12]
 800a1ca:	895a      	ldrh	r2, [r3, #10]
 800a1cc:	68fb      	ldr	r3, [r7, #12]
 800a1ce:	811a      	strh	r2, [r3, #8]

  /* any remaining pbufs in chain? */
  if (q->next != NULL) {
 800a1d0:	68fb      	ldr	r3, [r7, #12]
 800a1d2:	681b      	ldr	r3, [r3, #0]
 800a1d4:	2b00      	cmp	r3, #0
 800a1d6:	d004      	beq.n	800a1e2 <pbuf_realloc+0xea>
    /* free remaining pbufs in chain */
    pbuf_free(q->next);
 800a1d8:	68fb      	ldr	r3, [r7, #12]
 800a1da:	681b      	ldr	r3, [r3, #0]
 800a1dc:	4618      	mov	r0, r3
 800a1de:	f000 f911 	bl	800a404 <pbuf_free>
  }
  /* q is last packet in chain */
  q->next = NULL;
 800a1e2:	68fb      	ldr	r3, [r7, #12]
 800a1e4:	2200      	movs	r2, #0
 800a1e6:	601a      	str	r2, [r3, #0]
 800a1e8:	e000      	b.n	800a1ec <pbuf_realloc+0xf4>
    return;
 800a1ea:	bf00      	nop

}
 800a1ec:	3710      	adds	r7, #16
 800a1ee:	46bd      	mov	sp, r7
 800a1f0:	bd80      	pop	{r7, pc}
 800a1f2:	bf00      	nop
 800a1f4:	08014f40 	.word	0x08014f40
 800a1f8:	08015058 	.word	0x08015058
 800a1fc:	08014fa0 	.word	0x08014fa0
 800a200:	08015070 	.word	0x08015070
 800a204:	08015088 	.word	0x08015088

0800a208 <pbuf_add_header_impl>:
 * @return non-zero on failure, zero on success.
 *
 */
static u8_t
pbuf_add_header_impl(struct pbuf *p, size_t header_size_increment, u8_t force)
{
 800a208:	b580      	push	{r7, lr}
 800a20a:	b086      	sub	sp, #24
 800a20c:	af00      	add	r7, sp, #0
 800a20e:	60f8      	str	r0, [r7, #12]
 800a210:	60b9      	str	r1, [r7, #8]
 800a212:	4613      	mov	r3, r2
 800a214:	71fb      	strb	r3, [r7, #7]
  u16_t type_internal;
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 800a216:	68fb      	ldr	r3, [r7, #12]
 800a218:	2b00      	cmp	r3, #0
 800a21a:	d106      	bne.n	800a22a <pbuf_add_header_impl+0x22>
 800a21c:	4b2b      	ldr	r3, [pc, #172]	; (800a2cc <pbuf_add_header_impl+0xc4>)
 800a21e:	f240 12df 	movw	r2, #479	; 0x1df
 800a222:	492b      	ldr	r1, [pc, #172]	; (800a2d0 <pbuf_add_header_impl+0xc8>)
 800a224:	482b      	ldr	r0, [pc, #172]	; (800a2d4 <pbuf_add_header_impl+0xcc>)
 800a226:	f009 fb9f 	bl	8013968 <iprintf>
  if ((p == NULL) || (header_size_increment > 0xFFFF)) {
 800a22a:	68fb      	ldr	r3, [r7, #12]
 800a22c:	2b00      	cmp	r3, #0
 800a22e:	d003      	beq.n	800a238 <pbuf_add_header_impl+0x30>
 800a230:	68bb      	ldr	r3, [r7, #8]
 800a232:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a236:	d301      	bcc.n	800a23c <pbuf_add_header_impl+0x34>
    return 1;
 800a238:	2301      	movs	r3, #1
 800a23a:	e043      	b.n	800a2c4 <pbuf_add_header_impl+0xbc>
  }
  if (header_size_increment == 0) {
 800a23c:	68bb      	ldr	r3, [r7, #8]
 800a23e:	2b00      	cmp	r3, #0
 800a240:	d101      	bne.n	800a246 <pbuf_add_header_impl+0x3e>
    return 0;
 800a242:	2300      	movs	r3, #0
 800a244:	e03e      	b.n	800a2c4 <pbuf_add_header_impl+0xbc>
  }

  increment_magnitude = (u16_t)header_size_increment;
 800a246:	68bb      	ldr	r3, [r7, #8]
 800a248:	827b      	strh	r3, [r7, #18]
  /* Do not allow tot_len to wrap as a result. */
  if ((u16_t)(increment_magnitude + p->tot_len) < increment_magnitude) {
 800a24a:	68fb      	ldr	r3, [r7, #12]
 800a24c:	891a      	ldrh	r2, [r3, #8]
 800a24e:	8a7b      	ldrh	r3, [r7, #18]
 800a250:	4413      	add	r3, r2
 800a252:	b29b      	uxth	r3, r3
 800a254:	8a7a      	ldrh	r2, [r7, #18]
 800a256:	429a      	cmp	r2, r3
 800a258:	d901      	bls.n	800a25e <pbuf_add_header_impl+0x56>
    return 1;
 800a25a:	2301      	movs	r3, #1
 800a25c:	e032      	b.n	800a2c4 <pbuf_add_header_impl+0xbc>
  }

  type_internal = p->type_internal;
 800a25e:	68fb      	ldr	r3, [r7, #12]
 800a260:	7b1b      	ldrb	r3, [r3, #12]
 800a262:	823b      	strh	r3, [r7, #16]

  /* pbuf types containing payloads? */
  if (type_internal & PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS) {
 800a264:	8a3b      	ldrh	r3, [r7, #16]
 800a266:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a26a:	2b00      	cmp	r3, #0
 800a26c:	d00c      	beq.n	800a288 <pbuf_add_header_impl+0x80>
    /* set new payload pointer */
    payload = (u8_t *)p->payload - header_size_increment;
 800a26e:	68fb      	ldr	r3, [r7, #12]
 800a270:	685a      	ldr	r2, [r3, #4]
 800a272:	68bb      	ldr	r3, [r7, #8]
 800a274:	425b      	negs	r3, r3
 800a276:	4413      	add	r3, r2
 800a278:	617b      	str	r3, [r7, #20]
    /* boundary check fails? */
    if ((u8_t *)payload < (u8_t *)p + SIZEOF_STRUCT_PBUF) {
 800a27a:	68fb      	ldr	r3, [r7, #12]
 800a27c:	3310      	adds	r3, #16
 800a27e:	697a      	ldr	r2, [r7, #20]
 800a280:	429a      	cmp	r2, r3
 800a282:	d20d      	bcs.n	800a2a0 <pbuf_add_header_impl+0x98>
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE,
                   ("pbuf_add_header: failed as %p < %p (not enough space for new header size)\n",
                    (void *)payload, (void *)((u8_t *)p + SIZEOF_STRUCT_PBUF)));
      /* bail out unsuccessfully */
      return 1;
 800a284:	2301      	movs	r3, #1
 800a286:	e01d      	b.n	800a2c4 <pbuf_add_header_impl+0xbc>
    }
    /* pbuf types referring to external payloads? */
  } else {
    /* hide a header in the payload? */
    if (force) {
 800a288:	79fb      	ldrb	r3, [r7, #7]
 800a28a:	2b00      	cmp	r3, #0
 800a28c:	d006      	beq.n	800a29c <pbuf_add_header_impl+0x94>
      payload = (u8_t *)p->payload - header_size_increment;
 800a28e:	68fb      	ldr	r3, [r7, #12]
 800a290:	685a      	ldr	r2, [r3, #4]
 800a292:	68bb      	ldr	r3, [r7, #8]
 800a294:	425b      	negs	r3, r3
 800a296:	4413      	add	r3, r2
 800a298:	617b      	str	r3, [r7, #20]
 800a29a:	e001      	b.n	800a2a0 <pbuf_add_header_impl+0x98>
    } else {
      /* cannot expand payload to front (yet!)
       * bail out unsuccessfully */
      return 1;
 800a29c:	2301      	movs	r3, #1
 800a29e:	e011      	b.n	800a2c4 <pbuf_add_header_impl+0xbc>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_add_header: old %p new %p (%"U16_F")\n",
              (void *)p->payload, (void *)payload, increment_magnitude));

  /* modify pbuf fields */
  p->payload = payload;
 800a2a0:	68fb      	ldr	r3, [r7, #12]
 800a2a2:	697a      	ldr	r2, [r7, #20]
 800a2a4:	605a      	str	r2, [r3, #4]
  p->len = (u16_t)(p->len + increment_magnitude);
 800a2a6:	68fb      	ldr	r3, [r7, #12]
 800a2a8:	895a      	ldrh	r2, [r3, #10]
 800a2aa:	8a7b      	ldrh	r3, [r7, #18]
 800a2ac:	4413      	add	r3, r2
 800a2ae:	b29a      	uxth	r2, r3
 800a2b0:	68fb      	ldr	r3, [r7, #12]
 800a2b2:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len + increment_magnitude);
 800a2b4:	68fb      	ldr	r3, [r7, #12]
 800a2b6:	891a      	ldrh	r2, [r3, #8]
 800a2b8:	8a7b      	ldrh	r3, [r7, #18]
 800a2ba:	4413      	add	r3, r2
 800a2bc:	b29a      	uxth	r2, r3
 800a2be:	68fb      	ldr	r3, [r7, #12]
 800a2c0:	811a      	strh	r2, [r3, #8]


  return 0;
 800a2c2:	2300      	movs	r3, #0
}
 800a2c4:	4618      	mov	r0, r3
 800a2c6:	3718      	adds	r7, #24
 800a2c8:	46bd      	mov	sp, r7
 800a2ca:	bd80      	pop	{r7, pc}
 800a2cc:	08014f40 	.word	0x08014f40
 800a2d0:	080150a4 	.word	0x080150a4
 800a2d4:	08014fa0 	.word	0x08014fa0

0800a2d8 <pbuf_add_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_add_header(struct pbuf *p, size_t header_size_increment)
{
 800a2d8:	b580      	push	{r7, lr}
 800a2da:	b082      	sub	sp, #8
 800a2dc:	af00      	add	r7, sp, #0
 800a2de:	6078      	str	r0, [r7, #4]
 800a2e0:	6039      	str	r1, [r7, #0]
  return pbuf_add_header_impl(p, header_size_increment, 0);
 800a2e2:	2200      	movs	r2, #0
 800a2e4:	6839      	ldr	r1, [r7, #0]
 800a2e6:	6878      	ldr	r0, [r7, #4]
 800a2e8:	f7ff ff8e 	bl	800a208 <pbuf_add_header_impl>
 800a2ec:	4603      	mov	r3, r0
}
 800a2ee:	4618      	mov	r0, r3
 800a2f0:	3708      	adds	r7, #8
 800a2f2:	46bd      	mov	sp, r7
 800a2f4:	bd80      	pop	{r7, pc}
	...

0800a2f8 <pbuf_remove_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_remove_header(struct pbuf *p, size_t header_size_decrement)
{
 800a2f8:	b580      	push	{r7, lr}
 800a2fa:	b084      	sub	sp, #16
 800a2fc:	af00      	add	r7, sp, #0
 800a2fe:	6078      	str	r0, [r7, #4]
 800a300:	6039      	str	r1, [r7, #0]
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 800a302:	687b      	ldr	r3, [r7, #4]
 800a304:	2b00      	cmp	r3, #0
 800a306:	d106      	bne.n	800a316 <pbuf_remove_header+0x1e>
 800a308:	4b20      	ldr	r3, [pc, #128]	; (800a38c <pbuf_remove_header+0x94>)
 800a30a:	f240 224b 	movw	r2, #587	; 0x24b
 800a30e:	4920      	ldr	r1, [pc, #128]	; (800a390 <pbuf_remove_header+0x98>)
 800a310:	4820      	ldr	r0, [pc, #128]	; (800a394 <pbuf_remove_header+0x9c>)
 800a312:	f009 fb29 	bl	8013968 <iprintf>
  if ((p == NULL) || (header_size_decrement > 0xFFFF)) {
 800a316:	687b      	ldr	r3, [r7, #4]
 800a318:	2b00      	cmp	r3, #0
 800a31a:	d003      	beq.n	800a324 <pbuf_remove_header+0x2c>
 800a31c:	683b      	ldr	r3, [r7, #0]
 800a31e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a322:	d301      	bcc.n	800a328 <pbuf_remove_header+0x30>
    return 1;
 800a324:	2301      	movs	r3, #1
 800a326:	e02c      	b.n	800a382 <pbuf_remove_header+0x8a>
  }
  if (header_size_decrement == 0) {
 800a328:	683b      	ldr	r3, [r7, #0]
 800a32a:	2b00      	cmp	r3, #0
 800a32c:	d101      	bne.n	800a332 <pbuf_remove_header+0x3a>
    return 0;
 800a32e:	2300      	movs	r3, #0
 800a330:	e027      	b.n	800a382 <pbuf_remove_header+0x8a>
  }

  increment_magnitude = (u16_t)header_size_decrement;
 800a332:	683b      	ldr	r3, [r7, #0]
 800a334:	81fb      	strh	r3, [r7, #14]
  /* Check that we aren't going to move off the end of the pbuf */
  LWIP_ERROR("increment_magnitude <= p->len", (increment_magnitude <= p->len), return 1;);
 800a336:	687b      	ldr	r3, [r7, #4]
 800a338:	895b      	ldrh	r3, [r3, #10]
 800a33a:	89fa      	ldrh	r2, [r7, #14]
 800a33c:	429a      	cmp	r2, r3
 800a33e:	d908      	bls.n	800a352 <pbuf_remove_header+0x5a>
 800a340:	4b12      	ldr	r3, [pc, #72]	; (800a38c <pbuf_remove_header+0x94>)
 800a342:	f240 2255 	movw	r2, #597	; 0x255
 800a346:	4914      	ldr	r1, [pc, #80]	; (800a398 <pbuf_remove_header+0xa0>)
 800a348:	4812      	ldr	r0, [pc, #72]	; (800a394 <pbuf_remove_header+0x9c>)
 800a34a:	f009 fb0d 	bl	8013968 <iprintf>
 800a34e:	2301      	movs	r3, #1
 800a350:	e017      	b.n	800a382 <pbuf_remove_header+0x8a>

  /* remember current payload pointer */
  payload = p->payload;
 800a352:	687b      	ldr	r3, [r7, #4]
 800a354:	685b      	ldr	r3, [r3, #4]
 800a356:	60bb      	str	r3, [r7, #8]
  LWIP_UNUSED_ARG(payload); /* only used in LWIP_DEBUGF below */

  /* increase payload pointer (guarded by length check above) */
  p->payload = (u8_t *)p->payload + header_size_decrement;
 800a358:	687b      	ldr	r3, [r7, #4]
 800a35a:	685a      	ldr	r2, [r3, #4]
 800a35c:	683b      	ldr	r3, [r7, #0]
 800a35e:	441a      	add	r2, r3
 800a360:	687b      	ldr	r3, [r7, #4]
 800a362:	605a      	str	r2, [r3, #4]
  /* modify pbuf length fields */
  p->len = (u16_t)(p->len - increment_magnitude);
 800a364:	687b      	ldr	r3, [r7, #4]
 800a366:	895a      	ldrh	r2, [r3, #10]
 800a368:	89fb      	ldrh	r3, [r7, #14]
 800a36a:	1ad3      	subs	r3, r2, r3
 800a36c:	b29a      	uxth	r2, r3
 800a36e:	687b      	ldr	r3, [r7, #4]
 800a370:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len - increment_magnitude);
 800a372:	687b      	ldr	r3, [r7, #4]
 800a374:	891a      	ldrh	r2, [r3, #8]
 800a376:	89fb      	ldrh	r3, [r7, #14]
 800a378:	1ad3      	subs	r3, r2, r3
 800a37a:	b29a      	uxth	r2, r3
 800a37c:	687b      	ldr	r3, [r7, #4]
 800a37e:	811a      	strh	r2, [r3, #8]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_remove_header: old %p new %p (%"U16_F")\n",
              (void *)payload, (void *)p->payload, increment_magnitude));

  return 0;
 800a380:	2300      	movs	r3, #0
}
 800a382:	4618      	mov	r0, r3
 800a384:	3710      	adds	r7, #16
 800a386:	46bd      	mov	sp, r7
 800a388:	bd80      	pop	{r7, pc}
 800a38a:	bf00      	nop
 800a38c:	08014f40 	.word	0x08014f40
 800a390:	080150a4 	.word	0x080150a4
 800a394:	08014fa0 	.word	0x08014fa0
 800a398:	080150b0 	.word	0x080150b0

0800a39c <pbuf_header_impl>:

static u8_t
pbuf_header_impl(struct pbuf *p, s16_t header_size_increment, u8_t force)
{
 800a39c:	b580      	push	{r7, lr}
 800a39e:	b082      	sub	sp, #8
 800a3a0:	af00      	add	r7, sp, #0
 800a3a2:	6078      	str	r0, [r7, #4]
 800a3a4:	460b      	mov	r3, r1
 800a3a6:	807b      	strh	r3, [r7, #2]
 800a3a8:	4613      	mov	r3, r2
 800a3aa:	707b      	strb	r3, [r7, #1]
  if (header_size_increment < 0) {
 800a3ac:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800a3b0:	2b00      	cmp	r3, #0
 800a3b2:	da08      	bge.n	800a3c6 <pbuf_header_impl+0x2a>
    return pbuf_remove_header(p, (size_t) - header_size_increment);
 800a3b4:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800a3b8:	425b      	negs	r3, r3
 800a3ba:	4619      	mov	r1, r3
 800a3bc:	6878      	ldr	r0, [r7, #4]
 800a3be:	f7ff ff9b 	bl	800a2f8 <pbuf_remove_header>
 800a3c2:	4603      	mov	r3, r0
 800a3c4:	e007      	b.n	800a3d6 <pbuf_header_impl+0x3a>
  } else {
    return pbuf_add_header_impl(p, (size_t)header_size_increment, force);
 800a3c6:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800a3ca:	787a      	ldrb	r2, [r7, #1]
 800a3cc:	4619      	mov	r1, r3
 800a3ce:	6878      	ldr	r0, [r7, #4]
 800a3d0:	f7ff ff1a 	bl	800a208 <pbuf_add_header_impl>
 800a3d4:	4603      	mov	r3, r0
  }
}
 800a3d6:	4618      	mov	r0, r3
 800a3d8:	3708      	adds	r7, #8
 800a3da:	46bd      	mov	sp, r7
 800a3dc:	bd80      	pop	{r7, pc}

0800a3de <pbuf_header_force>:
 * Same as pbuf_header but does not check if 'header_size > 0' is allowed.
 * This is used internally only, to allow PBUF_REF for RX.
 */
u8_t
pbuf_header_force(struct pbuf *p, s16_t header_size_increment)
{
 800a3de:	b580      	push	{r7, lr}
 800a3e0:	b082      	sub	sp, #8
 800a3e2:	af00      	add	r7, sp, #0
 800a3e4:	6078      	str	r0, [r7, #4]
 800a3e6:	460b      	mov	r3, r1
 800a3e8:	807b      	strh	r3, [r7, #2]
  return pbuf_header_impl(p, header_size_increment, 1);
 800a3ea:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800a3ee:	2201      	movs	r2, #1
 800a3f0:	4619      	mov	r1, r3
 800a3f2:	6878      	ldr	r0, [r7, #4]
 800a3f4:	f7ff ffd2 	bl	800a39c <pbuf_header_impl>
 800a3f8:	4603      	mov	r3, r0
}
 800a3fa:	4618      	mov	r0, r3
 800a3fc:	3708      	adds	r7, #8
 800a3fe:	46bd      	mov	sp, r7
 800a400:	bd80      	pop	{r7, pc}
	...

0800a404 <pbuf_free>:
 * 1->1->1 becomes .......
 *
 */
u8_t
pbuf_free(struct pbuf *p)
{
 800a404:	b580      	push	{r7, lr}
 800a406:	b088      	sub	sp, #32
 800a408:	af00      	add	r7, sp, #0
 800a40a:	6078      	str	r0, [r7, #4]
  u8_t alloc_src;
  struct pbuf *q;
  u8_t count;

  if (p == NULL) {
 800a40c:	687b      	ldr	r3, [r7, #4]
 800a40e:	2b00      	cmp	r3, #0
 800a410:	d10b      	bne.n	800a42a <pbuf_free+0x26>
    LWIP_ASSERT("p != NULL", p != NULL);
 800a412:	687b      	ldr	r3, [r7, #4]
 800a414:	2b00      	cmp	r3, #0
 800a416:	d106      	bne.n	800a426 <pbuf_free+0x22>
 800a418:	4b3b      	ldr	r3, [pc, #236]	; (800a508 <pbuf_free+0x104>)
 800a41a:	f44f 7237 	mov.w	r2, #732	; 0x2dc
 800a41e:	493b      	ldr	r1, [pc, #236]	; (800a50c <pbuf_free+0x108>)
 800a420:	483b      	ldr	r0, [pc, #236]	; (800a510 <pbuf_free+0x10c>)
 800a422:	f009 faa1 	bl	8013968 <iprintf>
    /* if assertions are disabled, proceed with debug output */
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_free(p == NULL) was called.\n"));
    return 0;
 800a426:	2300      	movs	r3, #0
 800a428:	e069      	b.n	800a4fe <pbuf_free+0xfa>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free(%p)\n", (void *)p));

  PERF_START;

  count = 0;
 800a42a:	2300      	movs	r3, #0
 800a42c:	77fb      	strb	r3, [r7, #31]
  /* de-allocate all consecutive pbufs from the head of the chain that
   * obtain a zero reference count after decrementing*/
  while (p != NULL) {
 800a42e:	e062      	b.n	800a4f6 <pbuf_free+0xf2>
    LWIP_PBUF_REF_T ref;
    SYS_ARCH_DECL_PROTECT(old_level);
    /* Since decrementing ref cannot be guaranteed to be a single machine operation
     * we must protect it. We put the new ref into a local variable to prevent
     * further protection. */
    SYS_ARCH_PROTECT(old_level);
 800a430:	f009 f8a4 	bl	801357c <sys_arch_protect>
 800a434:	61b8      	str	r0, [r7, #24]
    /* all pbufs in a chain are referenced at least once */
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
 800a436:	687b      	ldr	r3, [r7, #4]
 800a438:	7b9b      	ldrb	r3, [r3, #14]
 800a43a:	2b00      	cmp	r3, #0
 800a43c:	d106      	bne.n	800a44c <pbuf_free+0x48>
 800a43e:	4b32      	ldr	r3, [pc, #200]	; (800a508 <pbuf_free+0x104>)
 800a440:	f240 22f1 	movw	r2, #753	; 0x2f1
 800a444:	4933      	ldr	r1, [pc, #204]	; (800a514 <pbuf_free+0x110>)
 800a446:	4832      	ldr	r0, [pc, #200]	; (800a510 <pbuf_free+0x10c>)
 800a448:	f009 fa8e 	bl	8013968 <iprintf>
    /* decrease reference count (number of pointers to pbuf) */
    ref = --(p->ref);
 800a44c:	687b      	ldr	r3, [r7, #4]
 800a44e:	7b9b      	ldrb	r3, [r3, #14]
 800a450:	3b01      	subs	r3, #1
 800a452:	b2da      	uxtb	r2, r3
 800a454:	687b      	ldr	r3, [r7, #4]
 800a456:	739a      	strb	r2, [r3, #14]
 800a458:	687b      	ldr	r3, [r7, #4]
 800a45a:	7b9b      	ldrb	r3, [r3, #14]
 800a45c:	75fb      	strb	r3, [r7, #23]
    SYS_ARCH_UNPROTECT(old_level);
 800a45e:	69b8      	ldr	r0, [r7, #24]
 800a460:	f009 f89a 	bl	8013598 <sys_arch_unprotect>
    /* this pbuf is no longer referenced to? */
    if (ref == 0) {
 800a464:	7dfb      	ldrb	r3, [r7, #23]
 800a466:	2b00      	cmp	r3, #0
 800a468:	d143      	bne.n	800a4f2 <pbuf_free+0xee>
      /* remember next pbuf in chain for next iteration */
      q = p->next;
 800a46a:	687b      	ldr	r3, [r7, #4]
 800a46c:	681b      	ldr	r3, [r3, #0]
 800a46e:	613b      	str	r3, [r7, #16]
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: deallocating %p\n", (void *)p));
      alloc_src = pbuf_get_allocsrc(p);
 800a470:	687b      	ldr	r3, [r7, #4]
 800a472:	7b1b      	ldrb	r3, [r3, #12]
 800a474:	f003 030f 	and.w	r3, r3, #15
 800a478:	73fb      	strb	r3, [r7, #15]
#if LWIP_SUPPORT_CUSTOM_PBUF
      /* is this a custom pbuf? */
      if ((p->flags & PBUF_FLAG_IS_CUSTOM) != 0) {
 800a47a:	687b      	ldr	r3, [r7, #4]
 800a47c:	7b5b      	ldrb	r3, [r3, #13]
 800a47e:	f003 0302 	and.w	r3, r3, #2
 800a482:	2b00      	cmp	r3, #0
 800a484:	d011      	beq.n	800a4aa <pbuf_free+0xa6>
        struct pbuf_custom *pc = (struct pbuf_custom *)p;
 800a486:	687b      	ldr	r3, [r7, #4]
 800a488:	60bb      	str	r3, [r7, #8]
        LWIP_ASSERT("pc->custom_free_function != NULL", pc->custom_free_function != NULL);
 800a48a:	68bb      	ldr	r3, [r7, #8]
 800a48c:	691b      	ldr	r3, [r3, #16]
 800a48e:	2b00      	cmp	r3, #0
 800a490:	d106      	bne.n	800a4a0 <pbuf_free+0x9c>
 800a492:	4b1d      	ldr	r3, [pc, #116]	; (800a508 <pbuf_free+0x104>)
 800a494:	f240 22ff 	movw	r2, #767	; 0x2ff
 800a498:	491f      	ldr	r1, [pc, #124]	; (800a518 <pbuf_free+0x114>)
 800a49a:	481d      	ldr	r0, [pc, #116]	; (800a510 <pbuf_free+0x10c>)
 800a49c:	f009 fa64 	bl	8013968 <iprintf>
        pc->custom_free_function(p);
 800a4a0:	68bb      	ldr	r3, [r7, #8]
 800a4a2:	691b      	ldr	r3, [r3, #16]
 800a4a4:	6878      	ldr	r0, [r7, #4]
 800a4a6:	4798      	blx	r3
 800a4a8:	e01d      	b.n	800a4e6 <pbuf_free+0xe2>
      } else
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
      {
        /* is this a pbuf from the pool? */
        if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF_POOL) {
 800a4aa:	7bfb      	ldrb	r3, [r7, #15]
 800a4ac:	2b02      	cmp	r3, #2
 800a4ae:	d104      	bne.n	800a4ba <pbuf_free+0xb6>
          memp_free(MEMP_PBUF_POOL, p);
 800a4b0:	6879      	ldr	r1, [r7, #4]
 800a4b2:	200c      	movs	r0, #12
 800a4b4:	f7ff f902 	bl	80096bc <memp_free>
 800a4b8:	e015      	b.n	800a4e6 <pbuf_free+0xe2>
          /* is this a ROM or RAM referencing pbuf? */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF) {
 800a4ba:	7bfb      	ldrb	r3, [r7, #15]
 800a4bc:	2b01      	cmp	r3, #1
 800a4be:	d104      	bne.n	800a4ca <pbuf_free+0xc6>
          memp_free(MEMP_PBUF, p);
 800a4c0:	6879      	ldr	r1, [r7, #4]
 800a4c2:	200b      	movs	r0, #11
 800a4c4:	f7ff f8fa 	bl	80096bc <memp_free>
 800a4c8:	e00d      	b.n	800a4e6 <pbuf_free+0xe2>
          /* type == PBUF_RAM */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) {
 800a4ca:	7bfb      	ldrb	r3, [r7, #15]
 800a4cc:	2b00      	cmp	r3, #0
 800a4ce:	d103      	bne.n	800a4d8 <pbuf_free+0xd4>
          mem_free(p);
 800a4d0:	6878      	ldr	r0, [r7, #4]
 800a4d2:	f7fe fc77 	bl	8008dc4 <mem_free>
 800a4d6:	e006      	b.n	800a4e6 <pbuf_free+0xe2>
        } else {
          /* @todo: support freeing other types */
          LWIP_ASSERT("invalid pbuf type", 0);
 800a4d8:	4b0b      	ldr	r3, [pc, #44]	; (800a508 <pbuf_free+0x104>)
 800a4da:	f240 320f 	movw	r2, #783	; 0x30f
 800a4de:	490f      	ldr	r1, [pc, #60]	; (800a51c <pbuf_free+0x118>)
 800a4e0:	480b      	ldr	r0, [pc, #44]	; (800a510 <pbuf_free+0x10c>)
 800a4e2:	f009 fa41 	bl	8013968 <iprintf>
        }
      }
      count++;
 800a4e6:	7ffb      	ldrb	r3, [r7, #31]
 800a4e8:	3301      	adds	r3, #1
 800a4ea:	77fb      	strb	r3, [r7, #31]
      /* proceed to next pbuf */
      p = q;
 800a4ec:	693b      	ldr	r3, [r7, #16]
 800a4ee:	607b      	str	r3, [r7, #4]
 800a4f0:	e001      	b.n	800a4f6 <pbuf_free+0xf2>
      /* p->ref > 0, this pbuf is still referenced to */
      /* (and so the remaining pbufs in chain as well) */
    } else {
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: %p has ref %"U16_F", ending here.\n", (void *)p, (u16_t)ref));
      /* stop walking through the chain */
      p = NULL;
 800a4f2:	2300      	movs	r3, #0
 800a4f4:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 800a4f6:	687b      	ldr	r3, [r7, #4]
 800a4f8:	2b00      	cmp	r3, #0
 800a4fa:	d199      	bne.n	800a430 <pbuf_free+0x2c>
    }
  }
  PERF_STOP("pbuf_free");
  /* return number of de-allocated pbufs */
  return count;
 800a4fc:	7ffb      	ldrb	r3, [r7, #31]
}
 800a4fe:	4618      	mov	r0, r3
 800a500:	3720      	adds	r7, #32
 800a502:	46bd      	mov	sp, r7
 800a504:	bd80      	pop	{r7, pc}
 800a506:	bf00      	nop
 800a508:	08014f40 	.word	0x08014f40
 800a50c:	080150a4 	.word	0x080150a4
 800a510:	08014fa0 	.word	0x08014fa0
 800a514:	080150d0 	.word	0x080150d0
 800a518:	080150e8 	.word	0x080150e8
 800a51c:	0801510c 	.word	0x0801510c

0800a520 <pbuf_clen>:
 * @param p first pbuf of chain
 * @return the number of pbufs in a chain
 */
u16_t
pbuf_clen(const struct pbuf *p)
{
 800a520:	b480      	push	{r7}
 800a522:	b085      	sub	sp, #20
 800a524:	af00      	add	r7, sp, #0
 800a526:	6078      	str	r0, [r7, #4]
  u16_t len;

  len = 0;
 800a528:	2300      	movs	r3, #0
 800a52a:	81fb      	strh	r3, [r7, #14]
  while (p != NULL) {
 800a52c:	e005      	b.n	800a53a <pbuf_clen+0x1a>
    ++len;
 800a52e:	89fb      	ldrh	r3, [r7, #14]
 800a530:	3301      	adds	r3, #1
 800a532:	81fb      	strh	r3, [r7, #14]
    p = p->next;
 800a534:	687b      	ldr	r3, [r7, #4]
 800a536:	681b      	ldr	r3, [r3, #0]
 800a538:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 800a53a:	687b      	ldr	r3, [r7, #4]
 800a53c:	2b00      	cmp	r3, #0
 800a53e:	d1f6      	bne.n	800a52e <pbuf_clen+0xe>
  }
  return len;
 800a540:	89fb      	ldrh	r3, [r7, #14]
}
 800a542:	4618      	mov	r0, r3
 800a544:	3714      	adds	r7, #20
 800a546:	46bd      	mov	sp, r7
 800a548:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a54c:	4770      	bx	lr
	...

0800a550 <pbuf_ref>:
 * @param p pbuf to increase reference counter of
 *
 */
void
pbuf_ref(struct pbuf *p)
{
 800a550:	b580      	push	{r7, lr}
 800a552:	b084      	sub	sp, #16
 800a554:	af00      	add	r7, sp, #0
 800a556:	6078      	str	r0, [r7, #4]
  /* pbuf given? */
  if (p != NULL) {
 800a558:	687b      	ldr	r3, [r7, #4]
 800a55a:	2b00      	cmp	r3, #0
 800a55c:	d016      	beq.n	800a58c <pbuf_ref+0x3c>
    SYS_ARCH_SET(p->ref, (LWIP_PBUF_REF_T)(p->ref + 1));
 800a55e:	f009 f80d 	bl	801357c <sys_arch_protect>
 800a562:	60f8      	str	r0, [r7, #12]
 800a564:	687b      	ldr	r3, [r7, #4]
 800a566:	7b9b      	ldrb	r3, [r3, #14]
 800a568:	3301      	adds	r3, #1
 800a56a:	b2da      	uxtb	r2, r3
 800a56c:	687b      	ldr	r3, [r7, #4]
 800a56e:	739a      	strb	r2, [r3, #14]
 800a570:	68f8      	ldr	r0, [r7, #12]
 800a572:	f009 f811 	bl	8013598 <sys_arch_unprotect>
    LWIP_ASSERT("pbuf ref overflow", p->ref > 0);
 800a576:	687b      	ldr	r3, [r7, #4]
 800a578:	7b9b      	ldrb	r3, [r3, #14]
 800a57a:	2b00      	cmp	r3, #0
 800a57c:	d106      	bne.n	800a58c <pbuf_ref+0x3c>
 800a57e:	4b05      	ldr	r3, [pc, #20]	; (800a594 <pbuf_ref+0x44>)
 800a580:	f240 3242 	movw	r2, #834	; 0x342
 800a584:	4904      	ldr	r1, [pc, #16]	; (800a598 <pbuf_ref+0x48>)
 800a586:	4805      	ldr	r0, [pc, #20]	; (800a59c <pbuf_ref+0x4c>)
 800a588:	f009 f9ee 	bl	8013968 <iprintf>
  }
}
 800a58c:	bf00      	nop
 800a58e:	3710      	adds	r7, #16
 800a590:	46bd      	mov	sp, r7
 800a592:	bd80      	pop	{r7, pc}
 800a594:	08014f40 	.word	0x08014f40
 800a598:	08015120 	.word	0x08015120
 800a59c:	08014fa0 	.word	0x08014fa0

0800a5a0 <pbuf_cat>:
 *
 * @see pbuf_chain()
 */
void
pbuf_cat(struct pbuf *h, struct pbuf *t)
{
 800a5a0:	b580      	push	{r7, lr}
 800a5a2:	b084      	sub	sp, #16
 800a5a4:	af00      	add	r7, sp, #0
 800a5a6:	6078      	str	r0, [r7, #4]
 800a5a8:	6039      	str	r1, [r7, #0]
  struct pbuf *p;

  LWIP_ERROR("(h != NULL) && (t != NULL) (programmer violates API)",
 800a5aa:	687b      	ldr	r3, [r7, #4]
 800a5ac:	2b00      	cmp	r3, #0
 800a5ae:	d002      	beq.n	800a5b6 <pbuf_cat+0x16>
 800a5b0:	683b      	ldr	r3, [r7, #0]
 800a5b2:	2b00      	cmp	r3, #0
 800a5b4:	d107      	bne.n	800a5c6 <pbuf_cat+0x26>
 800a5b6:	4b20      	ldr	r3, [pc, #128]	; (800a638 <pbuf_cat+0x98>)
 800a5b8:	f240 3259 	movw	r2, #857	; 0x359
 800a5bc:	491f      	ldr	r1, [pc, #124]	; (800a63c <pbuf_cat+0x9c>)
 800a5be:	4820      	ldr	r0, [pc, #128]	; (800a640 <pbuf_cat+0xa0>)
 800a5c0:	f009 f9d2 	bl	8013968 <iprintf>
 800a5c4:	e034      	b.n	800a630 <pbuf_cat+0x90>
             ((h != NULL) && (t != NULL)), return;);

  /* proceed to last pbuf of chain */
  for (p = h; p->next != NULL; p = p->next) {
 800a5c6:	687b      	ldr	r3, [r7, #4]
 800a5c8:	60fb      	str	r3, [r7, #12]
 800a5ca:	e00a      	b.n	800a5e2 <pbuf_cat+0x42>
    /* add total length of second chain to all totals of first chain */
    p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 800a5cc:	68fb      	ldr	r3, [r7, #12]
 800a5ce:	891a      	ldrh	r2, [r3, #8]
 800a5d0:	683b      	ldr	r3, [r7, #0]
 800a5d2:	891b      	ldrh	r3, [r3, #8]
 800a5d4:	4413      	add	r3, r2
 800a5d6:	b29a      	uxth	r2, r3
 800a5d8:	68fb      	ldr	r3, [r7, #12]
 800a5da:	811a      	strh	r2, [r3, #8]
  for (p = h; p->next != NULL; p = p->next) {
 800a5dc:	68fb      	ldr	r3, [r7, #12]
 800a5de:	681b      	ldr	r3, [r3, #0]
 800a5e0:	60fb      	str	r3, [r7, #12]
 800a5e2:	68fb      	ldr	r3, [r7, #12]
 800a5e4:	681b      	ldr	r3, [r3, #0]
 800a5e6:	2b00      	cmp	r3, #0
 800a5e8:	d1f0      	bne.n	800a5cc <pbuf_cat+0x2c>
  }
  /* { p is last pbuf of first h chain, p->next == NULL } */
  LWIP_ASSERT("p->tot_len == p->len (of last pbuf in chain)", p->tot_len == p->len);
 800a5ea:	68fb      	ldr	r3, [r7, #12]
 800a5ec:	891a      	ldrh	r2, [r3, #8]
 800a5ee:	68fb      	ldr	r3, [r7, #12]
 800a5f0:	895b      	ldrh	r3, [r3, #10]
 800a5f2:	429a      	cmp	r2, r3
 800a5f4:	d006      	beq.n	800a604 <pbuf_cat+0x64>
 800a5f6:	4b10      	ldr	r3, [pc, #64]	; (800a638 <pbuf_cat+0x98>)
 800a5f8:	f240 3262 	movw	r2, #866	; 0x362
 800a5fc:	4911      	ldr	r1, [pc, #68]	; (800a644 <pbuf_cat+0xa4>)
 800a5fe:	4810      	ldr	r0, [pc, #64]	; (800a640 <pbuf_cat+0xa0>)
 800a600:	f009 f9b2 	bl	8013968 <iprintf>
  LWIP_ASSERT("p->next == NULL", p->next == NULL);
 800a604:	68fb      	ldr	r3, [r7, #12]
 800a606:	681b      	ldr	r3, [r3, #0]
 800a608:	2b00      	cmp	r3, #0
 800a60a:	d006      	beq.n	800a61a <pbuf_cat+0x7a>
 800a60c:	4b0a      	ldr	r3, [pc, #40]	; (800a638 <pbuf_cat+0x98>)
 800a60e:	f240 3263 	movw	r2, #867	; 0x363
 800a612:	490d      	ldr	r1, [pc, #52]	; (800a648 <pbuf_cat+0xa8>)
 800a614:	480a      	ldr	r0, [pc, #40]	; (800a640 <pbuf_cat+0xa0>)
 800a616:	f009 f9a7 	bl	8013968 <iprintf>
  /* add total length of second chain to last pbuf total of first chain */
  p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 800a61a:	68fb      	ldr	r3, [r7, #12]
 800a61c:	891a      	ldrh	r2, [r3, #8]
 800a61e:	683b      	ldr	r3, [r7, #0]
 800a620:	891b      	ldrh	r3, [r3, #8]
 800a622:	4413      	add	r3, r2
 800a624:	b29a      	uxth	r2, r3
 800a626:	68fb      	ldr	r3, [r7, #12]
 800a628:	811a      	strh	r2, [r3, #8]
  /* chain last pbuf of head (p) with first of tail (t) */
  p->next = t;
 800a62a:	68fb      	ldr	r3, [r7, #12]
 800a62c:	683a      	ldr	r2, [r7, #0]
 800a62e:	601a      	str	r2, [r3, #0]
  /* p->next now references t, but the caller will drop its reference to t,
   * so netto there is no change to the reference count of t.
   */
}
 800a630:	3710      	adds	r7, #16
 800a632:	46bd      	mov	sp, r7
 800a634:	bd80      	pop	{r7, pc}
 800a636:	bf00      	nop
 800a638:	08014f40 	.word	0x08014f40
 800a63c:	08015134 	.word	0x08015134
 800a640:	08014fa0 	.word	0x08014fa0
 800a644:	0801516c 	.word	0x0801516c
 800a648:	0801519c 	.word	0x0801519c

0800a64c <pbuf_chain>:
 * The ->ref field of the first pbuf of the tail chain is adjusted.
 *
 */
void
pbuf_chain(struct pbuf *h, struct pbuf *t)
{
 800a64c:	b580      	push	{r7, lr}
 800a64e:	b082      	sub	sp, #8
 800a650:	af00      	add	r7, sp, #0
 800a652:	6078      	str	r0, [r7, #4]
 800a654:	6039      	str	r1, [r7, #0]
  pbuf_cat(h, t);
 800a656:	6839      	ldr	r1, [r7, #0]
 800a658:	6878      	ldr	r0, [r7, #4]
 800a65a:	f7ff ffa1 	bl	800a5a0 <pbuf_cat>
  /* t is now referenced by h */
  pbuf_ref(t);
 800a65e:	6838      	ldr	r0, [r7, #0]
 800a660:	f7ff ff76 	bl	800a550 <pbuf_ref>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_chain: %p references %p\n", (void *)h, (void *)t));
}
 800a664:	bf00      	nop
 800a666:	3708      	adds	r7, #8
 800a668:	46bd      	mov	sp, r7
 800a66a:	bd80      	pop	{r7, pc}

0800a66c <pbuf_copy>:
 *         ERR_ARG if one of the pbufs is NULL or p_to is not big
 *                 enough to hold p_from
 */
err_t
pbuf_copy(struct pbuf *p_to, const struct pbuf *p_from)
{
 800a66c:	b580      	push	{r7, lr}
 800a66e:	b086      	sub	sp, #24
 800a670:	af00      	add	r7, sp, #0
 800a672:	6078      	str	r0, [r7, #4]
 800a674:	6039      	str	r1, [r7, #0]
  size_t offset_to = 0, offset_from = 0, len;
 800a676:	2300      	movs	r3, #0
 800a678:	617b      	str	r3, [r7, #20]
 800a67a:	2300      	movs	r3, #0
 800a67c:	613b      	str	r3, [r7, #16]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy(%p, %p)\n",
              (const void *)p_to, (const void *)p_from));

  /* is the target big enough to hold the source? */
  LWIP_ERROR("pbuf_copy: target not big enough to hold source", ((p_to != NULL) &&
 800a67e:	687b      	ldr	r3, [r7, #4]
 800a680:	2b00      	cmp	r3, #0
 800a682:	d008      	beq.n	800a696 <pbuf_copy+0x2a>
 800a684:	683b      	ldr	r3, [r7, #0]
 800a686:	2b00      	cmp	r3, #0
 800a688:	d005      	beq.n	800a696 <pbuf_copy+0x2a>
 800a68a:	687b      	ldr	r3, [r7, #4]
 800a68c:	891a      	ldrh	r2, [r3, #8]
 800a68e:	683b      	ldr	r3, [r7, #0]
 800a690:	891b      	ldrh	r3, [r3, #8]
 800a692:	429a      	cmp	r2, r3
 800a694:	d209      	bcs.n	800a6aa <pbuf_copy+0x3e>
 800a696:	4b57      	ldr	r3, [pc, #348]	; (800a7f4 <pbuf_copy+0x188>)
 800a698:	f240 32c9 	movw	r2, #969	; 0x3c9
 800a69c:	4956      	ldr	r1, [pc, #344]	; (800a7f8 <pbuf_copy+0x18c>)
 800a69e:	4857      	ldr	r0, [pc, #348]	; (800a7fc <pbuf_copy+0x190>)
 800a6a0:	f009 f962 	bl	8013968 <iprintf>
 800a6a4:	f06f 030f 	mvn.w	r3, #15
 800a6a8:	e09f      	b.n	800a7ea <pbuf_copy+0x17e>
             (p_from != NULL) && (p_to->tot_len >= p_from->tot_len)), return ERR_ARG;);

  /* iterate through pbuf chain */
  do {
    /* copy one part of the original chain */
    if ((p_to->len - offset_to) >= (p_from->len - offset_from)) {
 800a6aa:	687b      	ldr	r3, [r7, #4]
 800a6ac:	895b      	ldrh	r3, [r3, #10]
 800a6ae:	461a      	mov	r2, r3
 800a6b0:	697b      	ldr	r3, [r7, #20]
 800a6b2:	1ad2      	subs	r2, r2, r3
 800a6b4:	683b      	ldr	r3, [r7, #0]
 800a6b6:	895b      	ldrh	r3, [r3, #10]
 800a6b8:	4619      	mov	r1, r3
 800a6ba:	693b      	ldr	r3, [r7, #16]
 800a6bc:	1acb      	subs	r3, r1, r3
 800a6be:	429a      	cmp	r2, r3
 800a6c0:	d306      	bcc.n	800a6d0 <pbuf_copy+0x64>
      /* complete current p_from fits into current p_to */
      len = p_from->len - offset_from;
 800a6c2:	683b      	ldr	r3, [r7, #0]
 800a6c4:	895b      	ldrh	r3, [r3, #10]
 800a6c6:	461a      	mov	r2, r3
 800a6c8:	693b      	ldr	r3, [r7, #16]
 800a6ca:	1ad3      	subs	r3, r2, r3
 800a6cc:	60fb      	str	r3, [r7, #12]
 800a6ce:	e005      	b.n	800a6dc <pbuf_copy+0x70>
    } else {
      /* current p_from does not fit into current p_to */
      len = p_to->len - offset_to;
 800a6d0:	687b      	ldr	r3, [r7, #4]
 800a6d2:	895b      	ldrh	r3, [r3, #10]
 800a6d4:	461a      	mov	r2, r3
 800a6d6:	697b      	ldr	r3, [r7, #20]
 800a6d8:	1ad3      	subs	r3, r2, r3
 800a6da:	60fb      	str	r3, [r7, #12]
    }
    MEMCPY((u8_t *)p_to->payload + offset_to, (u8_t *)p_from->payload + offset_from, len);
 800a6dc:	687b      	ldr	r3, [r7, #4]
 800a6de:	685a      	ldr	r2, [r3, #4]
 800a6e0:	697b      	ldr	r3, [r7, #20]
 800a6e2:	18d0      	adds	r0, r2, r3
 800a6e4:	683b      	ldr	r3, [r7, #0]
 800a6e6:	685a      	ldr	r2, [r3, #4]
 800a6e8:	693b      	ldr	r3, [r7, #16]
 800a6ea:	4413      	add	r3, r2
 800a6ec:	68fa      	ldr	r2, [r7, #12]
 800a6ee:	4619      	mov	r1, r3
 800a6f0:	f009 f88f 	bl	8013812 <memcpy>
    offset_to += len;
 800a6f4:	697a      	ldr	r2, [r7, #20]
 800a6f6:	68fb      	ldr	r3, [r7, #12]
 800a6f8:	4413      	add	r3, r2
 800a6fa:	617b      	str	r3, [r7, #20]
    offset_from += len;
 800a6fc:	693a      	ldr	r2, [r7, #16]
 800a6fe:	68fb      	ldr	r3, [r7, #12]
 800a700:	4413      	add	r3, r2
 800a702:	613b      	str	r3, [r7, #16]
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 800a704:	687b      	ldr	r3, [r7, #4]
 800a706:	895b      	ldrh	r3, [r3, #10]
 800a708:	461a      	mov	r2, r3
 800a70a:	697b      	ldr	r3, [r7, #20]
 800a70c:	4293      	cmp	r3, r2
 800a70e:	d906      	bls.n	800a71e <pbuf_copy+0xb2>
 800a710:	4b38      	ldr	r3, [pc, #224]	; (800a7f4 <pbuf_copy+0x188>)
 800a712:	f240 32d9 	movw	r2, #985	; 0x3d9
 800a716:	493a      	ldr	r1, [pc, #232]	; (800a800 <pbuf_copy+0x194>)
 800a718:	4838      	ldr	r0, [pc, #224]	; (800a7fc <pbuf_copy+0x190>)
 800a71a:	f009 f925 	bl	8013968 <iprintf>
    LWIP_ASSERT("offset_from <= p_from->len", offset_from <= p_from->len);
 800a71e:	683b      	ldr	r3, [r7, #0]
 800a720:	895b      	ldrh	r3, [r3, #10]
 800a722:	461a      	mov	r2, r3
 800a724:	693b      	ldr	r3, [r7, #16]
 800a726:	4293      	cmp	r3, r2
 800a728:	d906      	bls.n	800a738 <pbuf_copy+0xcc>
 800a72a:	4b32      	ldr	r3, [pc, #200]	; (800a7f4 <pbuf_copy+0x188>)
 800a72c:	f240 32da 	movw	r2, #986	; 0x3da
 800a730:	4934      	ldr	r1, [pc, #208]	; (800a804 <pbuf_copy+0x198>)
 800a732:	4832      	ldr	r0, [pc, #200]	; (800a7fc <pbuf_copy+0x190>)
 800a734:	f009 f918 	bl	8013968 <iprintf>
    if (offset_from >= p_from->len) {
 800a738:	683b      	ldr	r3, [r7, #0]
 800a73a:	895b      	ldrh	r3, [r3, #10]
 800a73c:	461a      	mov	r2, r3
 800a73e:	693b      	ldr	r3, [r7, #16]
 800a740:	4293      	cmp	r3, r2
 800a742:	d304      	bcc.n	800a74e <pbuf_copy+0xe2>
      /* on to next p_from (if any) */
      offset_from = 0;
 800a744:	2300      	movs	r3, #0
 800a746:	613b      	str	r3, [r7, #16]
      p_from = p_from->next;
 800a748:	683b      	ldr	r3, [r7, #0]
 800a74a:	681b      	ldr	r3, [r3, #0]
 800a74c:	603b      	str	r3, [r7, #0]
    }
    if (offset_to == p_to->len) {
 800a74e:	687b      	ldr	r3, [r7, #4]
 800a750:	895b      	ldrh	r3, [r3, #10]
 800a752:	461a      	mov	r2, r3
 800a754:	697b      	ldr	r3, [r7, #20]
 800a756:	4293      	cmp	r3, r2
 800a758:	d114      	bne.n	800a784 <pbuf_copy+0x118>
      /* on to next p_to (if any) */
      offset_to = 0;
 800a75a:	2300      	movs	r3, #0
 800a75c:	617b      	str	r3, [r7, #20]
      p_to = p_to->next;
 800a75e:	687b      	ldr	r3, [r7, #4]
 800a760:	681b      	ldr	r3, [r3, #0]
 800a762:	607b      	str	r3, [r7, #4]
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL), return ERR_ARG;);
 800a764:	687b      	ldr	r3, [r7, #4]
 800a766:	2b00      	cmp	r3, #0
 800a768:	d10c      	bne.n	800a784 <pbuf_copy+0x118>
 800a76a:	683b      	ldr	r3, [r7, #0]
 800a76c:	2b00      	cmp	r3, #0
 800a76e:	d009      	beq.n	800a784 <pbuf_copy+0x118>
 800a770:	4b20      	ldr	r3, [pc, #128]	; (800a7f4 <pbuf_copy+0x188>)
 800a772:	f44f 7279 	mov.w	r2, #996	; 0x3e4
 800a776:	4924      	ldr	r1, [pc, #144]	; (800a808 <pbuf_copy+0x19c>)
 800a778:	4820      	ldr	r0, [pc, #128]	; (800a7fc <pbuf_copy+0x190>)
 800a77a:	f009 f8f5 	bl	8013968 <iprintf>
 800a77e:	f06f 030f 	mvn.w	r3, #15
 800a782:	e032      	b.n	800a7ea <pbuf_copy+0x17e>
    }

    if ((p_from != NULL) && (p_from->len == p_from->tot_len)) {
 800a784:	683b      	ldr	r3, [r7, #0]
 800a786:	2b00      	cmp	r3, #0
 800a788:	d013      	beq.n	800a7b2 <pbuf_copy+0x146>
 800a78a:	683b      	ldr	r3, [r7, #0]
 800a78c:	895a      	ldrh	r2, [r3, #10]
 800a78e:	683b      	ldr	r3, [r7, #0]
 800a790:	891b      	ldrh	r3, [r3, #8]
 800a792:	429a      	cmp	r2, r3
 800a794:	d10d      	bne.n	800a7b2 <pbuf_copy+0x146>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 800a796:	683b      	ldr	r3, [r7, #0]
 800a798:	681b      	ldr	r3, [r3, #0]
 800a79a:	2b00      	cmp	r3, #0
 800a79c:	d009      	beq.n	800a7b2 <pbuf_copy+0x146>
 800a79e:	4b15      	ldr	r3, [pc, #84]	; (800a7f4 <pbuf_copy+0x188>)
 800a7a0:	f240 32e9 	movw	r2, #1001	; 0x3e9
 800a7a4:	4919      	ldr	r1, [pc, #100]	; (800a80c <pbuf_copy+0x1a0>)
 800a7a6:	4815      	ldr	r0, [pc, #84]	; (800a7fc <pbuf_copy+0x190>)
 800a7a8:	f009 f8de 	bl	8013968 <iprintf>
 800a7ac:	f06f 0305 	mvn.w	r3, #5
 800a7b0:	e01b      	b.n	800a7ea <pbuf_copy+0x17e>
                 (p_from->next == NULL), return ERR_VAL;);
    }
    if ((p_to != NULL) && (p_to->len == p_to->tot_len)) {
 800a7b2:	687b      	ldr	r3, [r7, #4]
 800a7b4:	2b00      	cmp	r3, #0
 800a7b6:	d013      	beq.n	800a7e0 <pbuf_copy+0x174>
 800a7b8:	687b      	ldr	r3, [r7, #4]
 800a7ba:	895a      	ldrh	r2, [r3, #10]
 800a7bc:	687b      	ldr	r3, [r7, #4]
 800a7be:	891b      	ldrh	r3, [r3, #8]
 800a7c0:	429a      	cmp	r2, r3
 800a7c2:	d10d      	bne.n	800a7e0 <pbuf_copy+0x174>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 800a7c4:	687b      	ldr	r3, [r7, #4]
 800a7c6:	681b      	ldr	r3, [r3, #0]
 800a7c8:	2b00      	cmp	r3, #0
 800a7ca:	d009      	beq.n	800a7e0 <pbuf_copy+0x174>
 800a7cc:	4b09      	ldr	r3, [pc, #36]	; (800a7f4 <pbuf_copy+0x188>)
 800a7ce:	f240 32ee 	movw	r2, #1006	; 0x3ee
 800a7d2:	490e      	ldr	r1, [pc, #56]	; (800a80c <pbuf_copy+0x1a0>)
 800a7d4:	4809      	ldr	r0, [pc, #36]	; (800a7fc <pbuf_copy+0x190>)
 800a7d6:	f009 f8c7 	bl	8013968 <iprintf>
 800a7da:	f06f 0305 	mvn.w	r3, #5
 800a7de:	e004      	b.n	800a7ea <pbuf_copy+0x17e>
                 (p_to->next == NULL), return ERR_VAL;);
    }
  } while (p_from);
 800a7e0:	683b      	ldr	r3, [r7, #0]
 800a7e2:	2b00      	cmp	r3, #0
 800a7e4:	f47f af61 	bne.w	800a6aa <pbuf_copy+0x3e>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy: end of chain reached.\n"));
  return ERR_OK;
 800a7e8:	2300      	movs	r3, #0
}
 800a7ea:	4618      	mov	r0, r3
 800a7ec:	3718      	adds	r7, #24
 800a7ee:	46bd      	mov	sp, r7
 800a7f0:	bd80      	pop	{r7, pc}
 800a7f2:	bf00      	nop
 800a7f4:	08014f40 	.word	0x08014f40
 800a7f8:	080151e8 	.word	0x080151e8
 800a7fc:	08014fa0 	.word	0x08014fa0
 800a800:	08015218 	.word	0x08015218
 800a804:	08015230 	.word	0x08015230
 800a808:	0801524c 	.word	0x0801524c
 800a80c:	0801525c 	.word	0x0801525c

0800a810 <pbuf_copy_partial>:
 * @param offset offset into the packet buffer from where to begin copying len bytes
 * @return the number of bytes copied, or 0 on failure
 */
u16_t
pbuf_copy_partial(const struct pbuf *buf, void *dataptr, u16_t len, u16_t offset)
{
 800a810:	b580      	push	{r7, lr}
 800a812:	b088      	sub	sp, #32
 800a814:	af00      	add	r7, sp, #0
 800a816:	60f8      	str	r0, [r7, #12]
 800a818:	60b9      	str	r1, [r7, #8]
 800a81a:	4611      	mov	r1, r2
 800a81c:	461a      	mov	r2, r3
 800a81e:	460b      	mov	r3, r1
 800a820:	80fb      	strh	r3, [r7, #6]
 800a822:	4613      	mov	r3, r2
 800a824:	80bb      	strh	r3, [r7, #4]
  const struct pbuf *p;
  u16_t left = 0;
 800a826:	2300      	movs	r3, #0
 800a828:	837b      	strh	r3, [r7, #26]
  u16_t buf_copy_len;
  u16_t copied_total = 0;
 800a82a:	2300      	movs	r3, #0
 800a82c:	82fb      	strh	r3, [r7, #22]

  LWIP_ERROR("pbuf_copy_partial: invalid buf", (buf != NULL), return 0;);
 800a82e:	68fb      	ldr	r3, [r7, #12]
 800a830:	2b00      	cmp	r3, #0
 800a832:	d108      	bne.n	800a846 <pbuf_copy_partial+0x36>
 800a834:	4b2b      	ldr	r3, [pc, #172]	; (800a8e4 <pbuf_copy_partial+0xd4>)
 800a836:	f240 420a 	movw	r2, #1034	; 0x40a
 800a83a:	492b      	ldr	r1, [pc, #172]	; (800a8e8 <pbuf_copy_partial+0xd8>)
 800a83c:	482b      	ldr	r0, [pc, #172]	; (800a8ec <pbuf_copy_partial+0xdc>)
 800a83e:	f009 f893 	bl	8013968 <iprintf>
 800a842:	2300      	movs	r3, #0
 800a844:	e04a      	b.n	800a8dc <pbuf_copy_partial+0xcc>
  LWIP_ERROR("pbuf_copy_partial: invalid dataptr", (dataptr != NULL), return 0;);
 800a846:	68bb      	ldr	r3, [r7, #8]
 800a848:	2b00      	cmp	r3, #0
 800a84a:	d108      	bne.n	800a85e <pbuf_copy_partial+0x4e>
 800a84c:	4b25      	ldr	r3, [pc, #148]	; (800a8e4 <pbuf_copy_partial+0xd4>)
 800a84e:	f240 420b 	movw	r2, #1035	; 0x40b
 800a852:	4927      	ldr	r1, [pc, #156]	; (800a8f0 <pbuf_copy_partial+0xe0>)
 800a854:	4825      	ldr	r0, [pc, #148]	; (800a8ec <pbuf_copy_partial+0xdc>)
 800a856:	f009 f887 	bl	8013968 <iprintf>
 800a85a:	2300      	movs	r3, #0
 800a85c:	e03e      	b.n	800a8dc <pbuf_copy_partial+0xcc>

  /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. */
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 800a85e:	68fb      	ldr	r3, [r7, #12]
 800a860:	61fb      	str	r3, [r7, #28]
 800a862:	e034      	b.n	800a8ce <pbuf_copy_partial+0xbe>
    if ((offset != 0) && (offset >= p->len)) {
 800a864:	88bb      	ldrh	r3, [r7, #4]
 800a866:	2b00      	cmp	r3, #0
 800a868:	d00a      	beq.n	800a880 <pbuf_copy_partial+0x70>
 800a86a:	69fb      	ldr	r3, [r7, #28]
 800a86c:	895b      	ldrh	r3, [r3, #10]
 800a86e:	88ba      	ldrh	r2, [r7, #4]
 800a870:	429a      	cmp	r2, r3
 800a872:	d305      	bcc.n	800a880 <pbuf_copy_partial+0x70>
      /* don't copy from this buffer -> on to the next */
      offset = (u16_t)(offset - p->len);
 800a874:	69fb      	ldr	r3, [r7, #28]
 800a876:	895b      	ldrh	r3, [r3, #10]
 800a878:	88ba      	ldrh	r2, [r7, #4]
 800a87a:	1ad3      	subs	r3, r2, r3
 800a87c:	80bb      	strh	r3, [r7, #4]
 800a87e:	e023      	b.n	800a8c8 <pbuf_copy_partial+0xb8>
    } else {
      /* copy from this buffer. maybe only partially. */
      buf_copy_len = (u16_t)(p->len - offset);
 800a880:	69fb      	ldr	r3, [r7, #28]
 800a882:	895a      	ldrh	r2, [r3, #10]
 800a884:	88bb      	ldrh	r3, [r7, #4]
 800a886:	1ad3      	subs	r3, r2, r3
 800a888:	833b      	strh	r3, [r7, #24]
      if (buf_copy_len > len) {
 800a88a:	8b3a      	ldrh	r2, [r7, #24]
 800a88c:	88fb      	ldrh	r3, [r7, #6]
 800a88e:	429a      	cmp	r2, r3
 800a890:	d901      	bls.n	800a896 <pbuf_copy_partial+0x86>
        buf_copy_len = len;
 800a892:	88fb      	ldrh	r3, [r7, #6]
 800a894:	833b      	strh	r3, [r7, #24]
      }
      /* copy the necessary parts of the buffer */
      MEMCPY(&((char *)dataptr)[left], &((char *)p->payload)[offset], buf_copy_len);
 800a896:	8b7b      	ldrh	r3, [r7, #26]
 800a898:	68ba      	ldr	r2, [r7, #8]
 800a89a:	18d0      	adds	r0, r2, r3
 800a89c:	69fb      	ldr	r3, [r7, #28]
 800a89e:	685a      	ldr	r2, [r3, #4]
 800a8a0:	88bb      	ldrh	r3, [r7, #4]
 800a8a2:	4413      	add	r3, r2
 800a8a4:	8b3a      	ldrh	r2, [r7, #24]
 800a8a6:	4619      	mov	r1, r3
 800a8a8:	f008 ffb3 	bl	8013812 <memcpy>
      copied_total = (u16_t)(copied_total + buf_copy_len);
 800a8ac:	8afa      	ldrh	r2, [r7, #22]
 800a8ae:	8b3b      	ldrh	r3, [r7, #24]
 800a8b0:	4413      	add	r3, r2
 800a8b2:	82fb      	strh	r3, [r7, #22]
      left = (u16_t)(left + buf_copy_len);
 800a8b4:	8b7a      	ldrh	r2, [r7, #26]
 800a8b6:	8b3b      	ldrh	r3, [r7, #24]
 800a8b8:	4413      	add	r3, r2
 800a8ba:	837b      	strh	r3, [r7, #26]
      len = (u16_t)(len - buf_copy_len);
 800a8bc:	88fa      	ldrh	r2, [r7, #6]
 800a8be:	8b3b      	ldrh	r3, [r7, #24]
 800a8c0:	1ad3      	subs	r3, r2, r3
 800a8c2:	80fb      	strh	r3, [r7, #6]
      offset = 0;
 800a8c4:	2300      	movs	r3, #0
 800a8c6:	80bb      	strh	r3, [r7, #4]
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 800a8c8:	69fb      	ldr	r3, [r7, #28]
 800a8ca:	681b      	ldr	r3, [r3, #0]
 800a8cc:	61fb      	str	r3, [r7, #28]
 800a8ce:	88fb      	ldrh	r3, [r7, #6]
 800a8d0:	2b00      	cmp	r3, #0
 800a8d2:	d002      	beq.n	800a8da <pbuf_copy_partial+0xca>
 800a8d4:	69fb      	ldr	r3, [r7, #28]
 800a8d6:	2b00      	cmp	r3, #0
 800a8d8:	d1c4      	bne.n	800a864 <pbuf_copy_partial+0x54>
    }
  }
  return copied_total;
 800a8da:	8afb      	ldrh	r3, [r7, #22]
}
 800a8dc:	4618      	mov	r0, r3
 800a8de:	3720      	adds	r7, #32
 800a8e0:	46bd      	mov	sp, r7
 800a8e2:	bd80      	pop	{r7, pc}
 800a8e4:	08014f40 	.word	0x08014f40
 800a8e8:	08015288 	.word	0x08015288
 800a8ec:	08014fa0 	.word	0x08014fa0
 800a8f0:	080152a8 	.word	0x080152a8

0800a8f4 <pbuf_clone>:
 *
 * @return a new pbuf or NULL if allocation fails
 */
struct pbuf *
pbuf_clone(pbuf_layer layer, pbuf_type type, struct pbuf *p)
{
 800a8f4:	b580      	push	{r7, lr}
 800a8f6:	b084      	sub	sp, #16
 800a8f8:	af00      	add	r7, sp, #0
 800a8fa:	4603      	mov	r3, r0
 800a8fc:	603a      	str	r2, [r7, #0]
 800a8fe:	71fb      	strb	r3, [r7, #7]
 800a900:	460b      	mov	r3, r1
 800a902:	80bb      	strh	r3, [r7, #4]
  struct pbuf *q;
  err_t err;
  q = pbuf_alloc(layer, p->tot_len, type);
 800a904:	683b      	ldr	r3, [r7, #0]
 800a906:	8919      	ldrh	r1, [r3, #8]
 800a908:	88ba      	ldrh	r2, [r7, #4]
 800a90a:	79fb      	ldrb	r3, [r7, #7]
 800a90c:	4618      	mov	r0, r3
 800a90e:	f7ff fa95 	bl	8009e3c <pbuf_alloc>
 800a912:	60f8      	str	r0, [r7, #12]
  if (q == NULL) {
 800a914:	68fb      	ldr	r3, [r7, #12]
 800a916:	2b00      	cmp	r3, #0
 800a918:	d101      	bne.n	800a91e <pbuf_clone+0x2a>
    return NULL;
 800a91a:	2300      	movs	r3, #0
 800a91c:	e011      	b.n	800a942 <pbuf_clone+0x4e>
  }
  err = pbuf_copy(q, p);
 800a91e:	6839      	ldr	r1, [r7, #0]
 800a920:	68f8      	ldr	r0, [r7, #12]
 800a922:	f7ff fea3 	bl	800a66c <pbuf_copy>
 800a926:	4603      	mov	r3, r0
 800a928:	72fb      	strb	r3, [r7, #11]
  LWIP_UNUSED_ARG(err); /* in case of LWIP_NOASSERT */
  LWIP_ASSERT("pbuf_copy failed", err == ERR_OK);
 800a92a:	f997 300b 	ldrsb.w	r3, [r7, #11]
 800a92e:	2b00      	cmp	r3, #0
 800a930:	d006      	beq.n	800a940 <pbuf_clone+0x4c>
 800a932:	4b06      	ldr	r3, [pc, #24]	; (800a94c <pbuf_clone+0x58>)
 800a934:	f240 5224 	movw	r2, #1316	; 0x524
 800a938:	4905      	ldr	r1, [pc, #20]	; (800a950 <pbuf_clone+0x5c>)
 800a93a:	4806      	ldr	r0, [pc, #24]	; (800a954 <pbuf_clone+0x60>)
 800a93c:	f009 f814 	bl	8013968 <iprintf>
  return q;
 800a940:	68fb      	ldr	r3, [r7, #12]
}
 800a942:	4618      	mov	r0, r3
 800a944:	3710      	adds	r7, #16
 800a946:	46bd      	mov	sp, r7
 800a948:	bd80      	pop	{r7, pc}
 800a94a:	bf00      	nop
 800a94c:	08014f40 	.word	0x08014f40
 800a950:	080153b4 	.word	0x080153b4
 800a954:	08014fa0 	.word	0x08014fa0

0800a958 <stats_init>:

struct stats_ lwip_stats;

void
stats_init(void)
{
 800a958:	b480      	push	{r7}
 800a95a:	af00      	add	r7, sp, #0
#ifdef LWIP_DEBUG
#if MEM_STATS
  lwip_stats.mem.name = "MEM";
#endif /* MEM_STATS */
#endif /* LWIP_DEBUG */
}
 800a95c:	bf00      	nop
 800a95e:	46bd      	mov	sp, r7
 800a960:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a964:	4770      	bx	lr
	...

0800a968 <tcp_init>:
/**
 * Initialize this module.
 */
void
tcp_init(void)
{
 800a968:	b580      	push	{r7, lr}
 800a96a:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  tcp_port = TCP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 800a96c:	f009 f814 	bl	8013998 <rand>
 800a970:	4603      	mov	r3, r0
 800a972:	b29b      	uxth	r3, r3
 800a974:	f3c3 030d 	ubfx	r3, r3, #0, #14
 800a978:	b29b      	uxth	r3, r3
 800a97a:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 800a97e:	b29a      	uxth	r2, r3
 800a980:	4b01      	ldr	r3, [pc, #4]	; (800a988 <tcp_init+0x20>)
 800a982:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 800a984:	bf00      	nop
 800a986:	bd80      	pop	{r7, pc}
 800a988:	20000024 	.word	0x20000024

0800a98c <tcp_free>:

/** Free a tcp pcb */
void
tcp_free(struct tcp_pcb *pcb)
{
 800a98c:	b580      	push	{r7, lr}
 800a98e:	b082      	sub	sp, #8
 800a990:	af00      	add	r7, sp, #0
 800a992:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 800a994:	687b      	ldr	r3, [r7, #4]
 800a996:	7d1b      	ldrb	r3, [r3, #20]
 800a998:	2b01      	cmp	r3, #1
 800a99a:	d105      	bne.n	800a9a8 <tcp_free+0x1c>
 800a99c:	4b06      	ldr	r3, [pc, #24]	; (800a9b8 <tcp_free+0x2c>)
 800a99e:	22d4      	movs	r2, #212	; 0xd4
 800a9a0:	4906      	ldr	r1, [pc, #24]	; (800a9bc <tcp_free+0x30>)
 800a9a2:	4807      	ldr	r0, [pc, #28]	; (800a9c0 <tcp_free+0x34>)
 800a9a4:	f008 ffe0 	bl	8013968 <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB, pcb);
 800a9a8:	6879      	ldr	r1, [r7, #4]
 800a9aa:	2001      	movs	r0, #1
 800a9ac:	f7fe fe86 	bl	80096bc <memp_free>
}
 800a9b0:	bf00      	nop
 800a9b2:	3708      	adds	r7, #8
 800a9b4:	46bd      	mov	sp, r7
 800a9b6:	bd80      	pop	{r7, pc}
 800a9b8:	08015440 	.word	0x08015440
 800a9bc:	08015470 	.word	0x08015470
 800a9c0:	08015484 	.word	0x08015484

0800a9c4 <tcp_free_listen>:

/** Free a tcp listen pcb */
static void
tcp_free_listen(struct tcp_pcb *pcb)
{
 800a9c4:	b580      	push	{r7, lr}
 800a9c6:	b082      	sub	sp, #8
 800a9c8:	af00      	add	r7, sp, #0
 800a9ca:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free_listen: !LISTEN", pcb->state != LISTEN);
 800a9cc:	687b      	ldr	r3, [r7, #4]
 800a9ce:	7d1b      	ldrb	r3, [r3, #20]
 800a9d0:	2b01      	cmp	r3, #1
 800a9d2:	d105      	bne.n	800a9e0 <tcp_free_listen+0x1c>
 800a9d4:	4b06      	ldr	r3, [pc, #24]	; (800a9f0 <tcp_free_listen+0x2c>)
 800a9d6:	22df      	movs	r2, #223	; 0xdf
 800a9d8:	4906      	ldr	r1, [pc, #24]	; (800a9f4 <tcp_free_listen+0x30>)
 800a9da:	4807      	ldr	r0, [pc, #28]	; (800a9f8 <tcp_free_listen+0x34>)
 800a9dc:	f008 ffc4 	bl	8013968 <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB_LISTEN, pcb);
 800a9e0:	6879      	ldr	r1, [r7, #4]
 800a9e2:	2002      	movs	r0, #2
 800a9e4:	f7fe fe6a 	bl	80096bc <memp_free>
}
 800a9e8:	bf00      	nop
 800a9ea:	3708      	adds	r7, #8
 800a9ec:	46bd      	mov	sp, r7
 800a9ee:	bd80      	pop	{r7, pc}
 800a9f0:	08015440 	.word	0x08015440
 800a9f4:	080154ac 	.word	0x080154ac
 800a9f8:	08015484 	.word	0x08015484

0800a9fc <tcp_tmr>:
/**
 * Called periodically to dispatch TCP timers.
 */
void
tcp_tmr(void)
{
 800a9fc:	b580      	push	{r7, lr}
 800a9fe:	af00      	add	r7, sp, #0
  /* Call tcp_fasttmr() every 250 ms */
  tcp_fasttmr();
 800aa00:	f000 fea2 	bl	800b748 <tcp_fasttmr>

  if (++tcp_timer & 1) {
 800aa04:	4b07      	ldr	r3, [pc, #28]	; (800aa24 <tcp_tmr+0x28>)
 800aa06:	781b      	ldrb	r3, [r3, #0]
 800aa08:	3301      	adds	r3, #1
 800aa0a:	b2da      	uxtb	r2, r3
 800aa0c:	4b05      	ldr	r3, [pc, #20]	; (800aa24 <tcp_tmr+0x28>)
 800aa0e:	701a      	strb	r2, [r3, #0]
 800aa10:	4b04      	ldr	r3, [pc, #16]	; (800aa24 <tcp_tmr+0x28>)
 800aa12:	781b      	ldrb	r3, [r3, #0]
 800aa14:	f003 0301 	and.w	r3, r3, #1
 800aa18:	2b00      	cmp	r3, #0
 800aa1a:	d001      	beq.n	800aa20 <tcp_tmr+0x24>
    /* Call tcp_slowtmr() every 500 ms, i.e., every other timer
       tcp_tmr() is called. */
    tcp_slowtmr();
 800aa1c:	f000 fb54 	bl	800b0c8 <tcp_slowtmr>
  }
}
 800aa20:	bf00      	nop
 800aa22:	bd80      	pop	{r7, pc}
 800aa24:	2000c75d 	.word	0x2000c75d

0800aa28 <tcp_remove_listener>:
/** Called when a listen pcb is closed. Iterates one pcb list and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_remove_listener(struct tcp_pcb *list, struct tcp_pcb_listen *lpcb)
{
 800aa28:	b580      	push	{r7, lr}
 800aa2a:	b084      	sub	sp, #16
 800aa2c:	af00      	add	r7, sp, #0
 800aa2e:	6078      	str	r0, [r7, #4]
 800aa30:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;

  LWIP_ASSERT("tcp_remove_listener: invalid listener", lpcb != NULL);
 800aa32:	683b      	ldr	r3, [r7, #0]
 800aa34:	2b00      	cmp	r3, #0
 800aa36:	d105      	bne.n	800aa44 <tcp_remove_listener+0x1c>
 800aa38:	4b0d      	ldr	r3, [pc, #52]	; (800aa70 <tcp_remove_listener+0x48>)
 800aa3a:	22ff      	movs	r2, #255	; 0xff
 800aa3c:	490d      	ldr	r1, [pc, #52]	; (800aa74 <tcp_remove_listener+0x4c>)
 800aa3e:	480e      	ldr	r0, [pc, #56]	; (800aa78 <tcp_remove_listener+0x50>)
 800aa40:	f008 ff92 	bl	8013968 <iprintf>

  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 800aa44:	687b      	ldr	r3, [r7, #4]
 800aa46:	60fb      	str	r3, [r7, #12]
 800aa48:	e00a      	b.n	800aa60 <tcp_remove_listener+0x38>
    if (pcb->listener == lpcb) {
 800aa4a:	68fb      	ldr	r3, [r7, #12]
 800aa4c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800aa4e:	683a      	ldr	r2, [r7, #0]
 800aa50:	429a      	cmp	r2, r3
 800aa52:	d102      	bne.n	800aa5a <tcp_remove_listener+0x32>
      pcb->listener = NULL;
 800aa54:	68fb      	ldr	r3, [r7, #12]
 800aa56:	2200      	movs	r2, #0
 800aa58:	67da      	str	r2, [r3, #124]	; 0x7c
  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 800aa5a:	68fb      	ldr	r3, [r7, #12]
 800aa5c:	68db      	ldr	r3, [r3, #12]
 800aa5e:	60fb      	str	r3, [r7, #12]
 800aa60:	68fb      	ldr	r3, [r7, #12]
 800aa62:	2b00      	cmp	r3, #0
 800aa64:	d1f1      	bne.n	800aa4a <tcp_remove_listener+0x22>
    }
  }
}
 800aa66:	bf00      	nop
 800aa68:	bf00      	nop
 800aa6a:	3710      	adds	r7, #16
 800aa6c:	46bd      	mov	sp, r7
 800aa6e:	bd80      	pop	{r7, pc}
 800aa70:	08015440 	.word	0x08015440
 800aa74:	080154c8 	.word	0x080154c8
 800aa78:	08015484 	.word	0x08015484

0800aa7c <tcp_listen_closed>:
/** Called when a listen pcb is closed. Iterates all pcb lists and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_listen_closed(struct tcp_pcb *pcb)
{
 800aa7c:	b580      	push	{r7, lr}
 800aa7e:	b084      	sub	sp, #16
 800aa80:	af00      	add	r7, sp, #0
 800aa82:	6078      	str	r0, [r7, #4]
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
  size_t i;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 800aa84:	687b      	ldr	r3, [r7, #4]
 800aa86:	2b00      	cmp	r3, #0
 800aa88:	d106      	bne.n	800aa98 <tcp_listen_closed+0x1c>
 800aa8a:	4b14      	ldr	r3, [pc, #80]	; (800aadc <tcp_listen_closed+0x60>)
 800aa8c:	f240 1211 	movw	r2, #273	; 0x111
 800aa90:	4913      	ldr	r1, [pc, #76]	; (800aae0 <tcp_listen_closed+0x64>)
 800aa92:	4814      	ldr	r0, [pc, #80]	; (800aae4 <tcp_listen_closed+0x68>)
 800aa94:	f008 ff68 	bl	8013968 <iprintf>
  LWIP_ASSERT("pcb->state == LISTEN", pcb->state == LISTEN);
 800aa98:	687b      	ldr	r3, [r7, #4]
 800aa9a:	7d1b      	ldrb	r3, [r3, #20]
 800aa9c:	2b01      	cmp	r3, #1
 800aa9e:	d006      	beq.n	800aaae <tcp_listen_closed+0x32>
 800aaa0:	4b0e      	ldr	r3, [pc, #56]	; (800aadc <tcp_listen_closed+0x60>)
 800aaa2:	f44f 7289 	mov.w	r2, #274	; 0x112
 800aaa6:	4910      	ldr	r1, [pc, #64]	; (800aae8 <tcp_listen_closed+0x6c>)
 800aaa8:	480e      	ldr	r0, [pc, #56]	; (800aae4 <tcp_listen_closed+0x68>)
 800aaaa:	f008 ff5d 	bl	8013968 <iprintf>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 800aaae:	2301      	movs	r3, #1
 800aab0:	60fb      	str	r3, [r7, #12]
 800aab2:	e00b      	b.n	800aacc <tcp_listen_closed+0x50>
    tcp_remove_listener(*tcp_pcb_lists[i], (struct tcp_pcb_listen *)pcb);
 800aab4:	4a0d      	ldr	r2, [pc, #52]	; (800aaec <tcp_listen_closed+0x70>)
 800aab6:	68fb      	ldr	r3, [r7, #12]
 800aab8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800aabc:	681b      	ldr	r3, [r3, #0]
 800aabe:	6879      	ldr	r1, [r7, #4]
 800aac0:	4618      	mov	r0, r3
 800aac2:	f7ff ffb1 	bl	800aa28 <tcp_remove_listener>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 800aac6:	68fb      	ldr	r3, [r7, #12]
 800aac8:	3301      	adds	r3, #1
 800aaca:	60fb      	str	r3, [r7, #12]
 800aacc:	68fb      	ldr	r3, [r7, #12]
 800aace:	2b03      	cmp	r3, #3
 800aad0:	d9f0      	bls.n	800aab4 <tcp_listen_closed+0x38>
  }
#endif
  LWIP_UNUSED_ARG(pcb);
}
 800aad2:	bf00      	nop
 800aad4:	bf00      	nop
 800aad6:	3710      	adds	r7, #16
 800aad8:	46bd      	mov	sp, r7
 800aada:	bd80      	pop	{r7, pc}
 800aadc:	08015440 	.word	0x08015440
 800aae0:	080154f0 	.word	0x080154f0
 800aae4:	08015484 	.word	0x08015484
 800aae8:	080154fc 	.word	0x080154fc
 800aaec:	08017498 	.word	0x08017498

0800aaf0 <tcp_close_shutdown>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
static err_t
tcp_close_shutdown(struct tcp_pcb *pcb, u8_t rst_on_unacked_data)
{
 800aaf0:	b5b0      	push	{r4, r5, r7, lr}
 800aaf2:	b088      	sub	sp, #32
 800aaf4:	af04      	add	r7, sp, #16
 800aaf6:	6078      	str	r0, [r7, #4]
 800aaf8:	460b      	mov	r3, r1
 800aafa:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("tcp_close_shutdown: invalid pcb", pcb != NULL);
 800aafc:	687b      	ldr	r3, [r7, #4]
 800aafe:	2b00      	cmp	r3, #0
 800ab00:	d106      	bne.n	800ab10 <tcp_close_shutdown+0x20>
 800ab02:	4b63      	ldr	r3, [pc, #396]	; (800ac90 <tcp_close_shutdown+0x1a0>)
 800ab04:	f44f 72af 	mov.w	r2, #350	; 0x15e
 800ab08:	4962      	ldr	r1, [pc, #392]	; (800ac94 <tcp_close_shutdown+0x1a4>)
 800ab0a:	4863      	ldr	r0, [pc, #396]	; (800ac98 <tcp_close_shutdown+0x1a8>)
 800ab0c:	f008 ff2c 	bl	8013968 <iprintf>

  if (rst_on_unacked_data && ((pcb->state == ESTABLISHED) || (pcb->state == CLOSE_WAIT))) {
 800ab10:	78fb      	ldrb	r3, [r7, #3]
 800ab12:	2b00      	cmp	r3, #0
 800ab14:	d066      	beq.n	800abe4 <tcp_close_shutdown+0xf4>
 800ab16:	687b      	ldr	r3, [r7, #4]
 800ab18:	7d1b      	ldrb	r3, [r3, #20]
 800ab1a:	2b04      	cmp	r3, #4
 800ab1c:	d003      	beq.n	800ab26 <tcp_close_shutdown+0x36>
 800ab1e:	687b      	ldr	r3, [r7, #4]
 800ab20:	7d1b      	ldrb	r3, [r3, #20]
 800ab22:	2b07      	cmp	r3, #7
 800ab24:	d15e      	bne.n	800abe4 <tcp_close_shutdown+0xf4>
    if ((pcb->refused_data != NULL) || (pcb->rcv_wnd != TCP_WND_MAX(pcb))) {
 800ab26:	687b      	ldr	r3, [r7, #4]
 800ab28:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800ab2a:	2b00      	cmp	r3, #0
 800ab2c:	d104      	bne.n	800ab38 <tcp_close_shutdown+0x48>
 800ab2e:	687b      	ldr	r3, [r7, #4]
 800ab30:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800ab32:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 800ab36:	d055      	beq.n	800abe4 <tcp_close_shutdown+0xf4>
      /* Not all data received by application, send RST to tell the remote
         side about this. */
      LWIP_ASSERT("pcb->flags & TF_RXCLOSED", pcb->flags & TF_RXCLOSED);
 800ab38:	687b      	ldr	r3, [r7, #4]
 800ab3a:	8b5b      	ldrh	r3, [r3, #26]
 800ab3c:	f003 0310 	and.w	r3, r3, #16
 800ab40:	2b00      	cmp	r3, #0
 800ab42:	d106      	bne.n	800ab52 <tcp_close_shutdown+0x62>
 800ab44:	4b52      	ldr	r3, [pc, #328]	; (800ac90 <tcp_close_shutdown+0x1a0>)
 800ab46:	f44f 72b2 	mov.w	r2, #356	; 0x164
 800ab4a:	4954      	ldr	r1, [pc, #336]	; (800ac9c <tcp_close_shutdown+0x1ac>)
 800ab4c:	4852      	ldr	r0, [pc, #328]	; (800ac98 <tcp_close_shutdown+0x1a8>)
 800ab4e:	f008 ff0b 	bl	8013968 <iprintf>

      /* don't call tcp_abort here: we must not deallocate the pcb since
         that might not be expected when calling tcp_close */
      tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 800ab52:	687b      	ldr	r3, [r7, #4]
 800ab54:	6d18      	ldr	r0, [r3, #80]	; 0x50
 800ab56:	687b      	ldr	r3, [r7, #4]
 800ab58:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 800ab5a:	687d      	ldr	r5, [r7, #4]
 800ab5c:	687b      	ldr	r3, [r7, #4]
 800ab5e:	3304      	adds	r3, #4
 800ab60:	687a      	ldr	r2, [r7, #4]
 800ab62:	8ad2      	ldrh	r2, [r2, #22]
 800ab64:	6879      	ldr	r1, [r7, #4]
 800ab66:	8b09      	ldrh	r1, [r1, #24]
 800ab68:	9102      	str	r1, [sp, #8]
 800ab6a:	9201      	str	r2, [sp, #4]
 800ab6c:	9300      	str	r3, [sp, #0]
 800ab6e:	462b      	mov	r3, r5
 800ab70:	4622      	mov	r2, r4
 800ab72:	4601      	mov	r1, r0
 800ab74:	6878      	ldr	r0, [r7, #4]
 800ab76:	f004 ff5b 	bl	800fa30 <tcp_rst>
              pcb->local_port, pcb->remote_port);

      tcp_pcb_purge(pcb);
 800ab7a:	6878      	ldr	r0, [r7, #4]
 800ab7c:	f001 f8f0 	bl	800bd60 <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 800ab80:	4b47      	ldr	r3, [pc, #284]	; (800aca0 <tcp_close_shutdown+0x1b0>)
 800ab82:	681b      	ldr	r3, [r3, #0]
 800ab84:	687a      	ldr	r2, [r7, #4]
 800ab86:	429a      	cmp	r2, r3
 800ab88:	d105      	bne.n	800ab96 <tcp_close_shutdown+0xa6>
 800ab8a:	4b45      	ldr	r3, [pc, #276]	; (800aca0 <tcp_close_shutdown+0x1b0>)
 800ab8c:	681b      	ldr	r3, [r3, #0]
 800ab8e:	68db      	ldr	r3, [r3, #12]
 800ab90:	4a43      	ldr	r2, [pc, #268]	; (800aca0 <tcp_close_shutdown+0x1b0>)
 800ab92:	6013      	str	r3, [r2, #0]
 800ab94:	e013      	b.n	800abbe <tcp_close_shutdown+0xce>
 800ab96:	4b42      	ldr	r3, [pc, #264]	; (800aca0 <tcp_close_shutdown+0x1b0>)
 800ab98:	681b      	ldr	r3, [r3, #0]
 800ab9a:	60fb      	str	r3, [r7, #12]
 800ab9c:	e00c      	b.n	800abb8 <tcp_close_shutdown+0xc8>
 800ab9e:	68fb      	ldr	r3, [r7, #12]
 800aba0:	68db      	ldr	r3, [r3, #12]
 800aba2:	687a      	ldr	r2, [r7, #4]
 800aba4:	429a      	cmp	r2, r3
 800aba6:	d104      	bne.n	800abb2 <tcp_close_shutdown+0xc2>
 800aba8:	687b      	ldr	r3, [r7, #4]
 800abaa:	68da      	ldr	r2, [r3, #12]
 800abac:	68fb      	ldr	r3, [r7, #12]
 800abae:	60da      	str	r2, [r3, #12]
 800abb0:	e005      	b.n	800abbe <tcp_close_shutdown+0xce>
 800abb2:	68fb      	ldr	r3, [r7, #12]
 800abb4:	68db      	ldr	r3, [r3, #12]
 800abb6:	60fb      	str	r3, [r7, #12]
 800abb8:	68fb      	ldr	r3, [r7, #12]
 800abba:	2b00      	cmp	r3, #0
 800abbc:	d1ef      	bne.n	800ab9e <tcp_close_shutdown+0xae>
 800abbe:	687b      	ldr	r3, [r7, #4]
 800abc0:	2200      	movs	r2, #0
 800abc2:	60da      	str	r2, [r3, #12]
 800abc4:	4b37      	ldr	r3, [pc, #220]	; (800aca4 <tcp_close_shutdown+0x1b4>)
 800abc6:	2201      	movs	r2, #1
 800abc8:	701a      	strb	r2, [r3, #0]
      /* Deallocate the pcb since we already sent a RST for it */
      if (tcp_input_pcb == pcb) {
 800abca:	4b37      	ldr	r3, [pc, #220]	; (800aca8 <tcp_close_shutdown+0x1b8>)
 800abcc:	681b      	ldr	r3, [r3, #0]
 800abce:	687a      	ldr	r2, [r7, #4]
 800abd0:	429a      	cmp	r2, r3
 800abd2:	d102      	bne.n	800abda <tcp_close_shutdown+0xea>
        /* prevent using a deallocated pcb: free it from tcp_input later */
        tcp_trigger_input_pcb_close();
 800abd4:	f003 fdee 	bl	800e7b4 <tcp_trigger_input_pcb_close>
 800abd8:	e002      	b.n	800abe0 <tcp_close_shutdown+0xf0>
      } else {
        tcp_free(pcb);
 800abda:	6878      	ldr	r0, [r7, #4]
 800abdc:	f7ff fed6 	bl	800a98c <tcp_free>
      }
      return ERR_OK;
 800abe0:	2300      	movs	r3, #0
 800abe2:	e050      	b.n	800ac86 <tcp_close_shutdown+0x196>
    }
  }

  /* - states which free the pcb are handled here,
     - states which send FIN and change state are handled in tcp_close_shutdown_fin() */
  switch (pcb->state) {
 800abe4:	687b      	ldr	r3, [r7, #4]
 800abe6:	7d1b      	ldrb	r3, [r3, #20]
 800abe8:	2b02      	cmp	r3, #2
 800abea:	d03b      	beq.n	800ac64 <tcp_close_shutdown+0x174>
 800abec:	2b02      	cmp	r3, #2
 800abee:	dc44      	bgt.n	800ac7a <tcp_close_shutdown+0x18a>
 800abf0:	2b00      	cmp	r3, #0
 800abf2:	d002      	beq.n	800abfa <tcp_close_shutdown+0x10a>
 800abf4:	2b01      	cmp	r3, #1
 800abf6:	d02a      	beq.n	800ac4e <tcp_close_shutdown+0x15e>
 800abf8:	e03f      	b.n	800ac7a <tcp_close_shutdown+0x18a>
       * and the user needs some way to free it should the need arise.
       * Calling tcp_close() with a pcb that has already been closed, (i.e. twice)
       * or for a pcb that has been used and then entered the CLOSED state
       * is erroneous, but this should never happen as the pcb has in those cases
       * been freed, and so any remaining handles are bogus. */
      if (pcb->local_port != 0) {
 800abfa:	687b      	ldr	r3, [r7, #4]
 800abfc:	8adb      	ldrh	r3, [r3, #22]
 800abfe:	2b00      	cmp	r3, #0
 800ac00:	d021      	beq.n	800ac46 <tcp_close_shutdown+0x156>
        TCP_RMV(&tcp_bound_pcbs, pcb);
 800ac02:	4b2a      	ldr	r3, [pc, #168]	; (800acac <tcp_close_shutdown+0x1bc>)
 800ac04:	681b      	ldr	r3, [r3, #0]
 800ac06:	687a      	ldr	r2, [r7, #4]
 800ac08:	429a      	cmp	r2, r3
 800ac0a:	d105      	bne.n	800ac18 <tcp_close_shutdown+0x128>
 800ac0c:	4b27      	ldr	r3, [pc, #156]	; (800acac <tcp_close_shutdown+0x1bc>)
 800ac0e:	681b      	ldr	r3, [r3, #0]
 800ac10:	68db      	ldr	r3, [r3, #12]
 800ac12:	4a26      	ldr	r2, [pc, #152]	; (800acac <tcp_close_shutdown+0x1bc>)
 800ac14:	6013      	str	r3, [r2, #0]
 800ac16:	e013      	b.n	800ac40 <tcp_close_shutdown+0x150>
 800ac18:	4b24      	ldr	r3, [pc, #144]	; (800acac <tcp_close_shutdown+0x1bc>)
 800ac1a:	681b      	ldr	r3, [r3, #0]
 800ac1c:	60bb      	str	r3, [r7, #8]
 800ac1e:	e00c      	b.n	800ac3a <tcp_close_shutdown+0x14a>
 800ac20:	68bb      	ldr	r3, [r7, #8]
 800ac22:	68db      	ldr	r3, [r3, #12]
 800ac24:	687a      	ldr	r2, [r7, #4]
 800ac26:	429a      	cmp	r2, r3
 800ac28:	d104      	bne.n	800ac34 <tcp_close_shutdown+0x144>
 800ac2a:	687b      	ldr	r3, [r7, #4]
 800ac2c:	68da      	ldr	r2, [r3, #12]
 800ac2e:	68bb      	ldr	r3, [r7, #8]
 800ac30:	60da      	str	r2, [r3, #12]
 800ac32:	e005      	b.n	800ac40 <tcp_close_shutdown+0x150>
 800ac34:	68bb      	ldr	r3, [r7, #8]
 800ac36:	68db      	ldr	r3, [r3, #12]
 800ac38:	60bb      	str	r3, [r7, #8]
 800ac3a:	68bb      	ldr	r3, [r7, #8]
 800ac3c:	2b00      	cmp	r3, #0
 800ac3e:	d1ef      	bne.n	800ac20 <tcp_close_shutdown+0x130>
 800ac40:	687b      	ldr	r3, [r7, #4]
 800ac42:	2200      	movs	r2, #0
 800ac44:	60da      	str	r2, [r3, #12]
      }
      tcp_free(pcb);
 800ac46:	6878      	ldr	r0, [r7, #4]
 800ac48:	f7ff fea0 	bl	800a98c <tcp_free>
      break;
 800ac4c:	e01a      	b.n	800ac84 <tcp_close_shutdown+0x194>
    case LISTEN:
      tcp_listen_closed(pcb);
 800ac4e:	6878      	ldr	r0, [r7, #4]
 800ac50:	f7ff ff14 	bl	800aa7c <tcp_listen_closed>
      tcp_pcb_remove(&tcp_listen_pcbs.pcbs, pcb);
 800ac54:	6879      	ldr	r1, [r7, #4]
 800ac56:	4816      	ldr	r0, [pc, #88]	; (800acb0 <tcp_close_shutdown+0x1c0>)
 800ac58:	f001 f8d2 	bl	800be00 <tcp_pcb_remove>
      tcp_free_listen(pcb);
 800ac5c:	6878      	ldr	r0, [r7, #4]
 800ac5e:	f7ff feb1 	bl	800a9c4 <tcp_free_listen>
      break;
 800ac62:	e00f      	b.n	800ac84 <tcp_close_shutdown+0x194>
    case SYN_SENT:
      TCP_PCB_REMOVE_ACTIVE(pcb);
 800ac64:	6879      	ldr	r1, [r7, #4]
 800ac66:	480e      	ldr	r0, [pc, #56]	; (800aca0 <tcp_close_shutdown+0x1b0>)
 800ac68:	f001 f8ca 	bl	800be00 <tcp_pcb_remove>
 800ac6c:	4b0d      	ldr	r3, [pc, #52]	; (800aca4 <tcp_close_shutdown+0x1b4>)
 800ac6e:	2201      	movs	r2, #1
 800ac70:	701a      	strb	r2, [r3, #0]
      tcp_free(pcb);
 800ac72:	6878      	ldr	r0, [r7, #4]
 800ac74:	f7ff fe8a 	bl	800a98c <tcp_free>
      MIB2_STATS_INC(mib2.tcpattemptfails);
      break;
 800ac78:	e004      	b.n	800ac84 <tcp_close_shutdown+0x194>
    default:
      return tcp_close_shutdown_fin(pcb);
 800ac7a:	6878      	ldr	r0, [r7, #4]
 800ac7c:	f000 f81a 	bl	800acb4 <tcp_close_shutdown_fin>
 800ac80:	4603      	mov	r3, r0
 800ac82:	e000      	b.n	800ac86 <tcp_close_shutdown+0x196>
  }
  return ERR_OK;
 800ac84:	2300      	movs	r3, #0
}
 800ac86:	4618      	mov	r0, r3
 800ac88:	3710      	adds	r7, #16
 800ac8a:	46bd      	mov	sp, r7
 800ac8c:	bdb0      	pop	{r4, r5, r7, pc}
 800ac8e:	bf00      	nop
 800ac90:	08015440 	.word	0x08015440
 800ac94:	08015514 	.word	0x08015514
 800ac98:	08015484 	.word	0x08015484
 800ac9c:	08015534 	.word	0x08015534
 800aca0:	2000c754 	.word	0x2000c754
 800aca4:	2000c75c 	.word	0x2000c75c
 800aca8:	2000c794 	.word	0x2000c794
 800acac:	2000c74c 	.word	0x2000c74c
 800acb0:	2000c750 	.word	0x2000c750

0800acb4 <tcp_close_shutdown_fin>:

static err_t
tcp_close_shutdown_fin(struct tcp_pcb *pcb)
{
 800acb4:	b580      	push	{r7, lr}
 800acb6:	b084      	sub	sp, #16
 800acb8:	af00      	add	r7, sp, #0
 800acba:	6078      	str	r0, [r7, #4]
  err_t err;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 800acbc:	687b      	ldr	r3, [r7, #4]
 800acbe:	2b00      	cmp	r3, #0
 800acc0:	d106      	bne.n	800acd0 <tcp_close_shutdown_fin+0x1c>
 800acc2:	4b2e      	ldr	r3, [pc, #184]	; (800ad7c <tcp_close_shutdown_fin+0xc8>)
 800acc4:	f44f 72ce 	mov.w	r2, #412	; 0x19c
 800acc8:	492d      	ldr	r1, [pc, #180]	; (800ad80 <tcp_close_shutdown_fin+0xcc>)
 800acca:	482e      	ldr	r0, [pc, #184]	; (800ad84 <tcp_close_shutdown_fin+0xd0>)
 800accc:	f008 fe4c 	bl	8013968 <iprintf>

  switch (pcb->state) {
 800acd0:	687b      	ldr	r3, [r7, #4]
 800acd2:	7d1b      	ldrb	r3, [r3, #20]
 800acd4:	2b07      	cmp	r3, #7
 800acd6:	d020      	beq.n	800ad1a <tcp_close_shutdown_fin+0x66>
 800acd8:	2b07      	cmp	r3, #7
 800acda:	dc2b      	bgt.n	800ad34 <tcp_close_shutdown_fin+0x80>
 800acdc:	2b03      	cmp	r3, #3
 800acde:	d002      	beq.n	800ace6 <tcp_close_shutdown_fin+0x32>
 800ace0:	2b04      	cmp	r3, #4
 800ace2:	d00d      	beq.n	800ad00 <tcp_close_shutdown_fin+0x4c>
 800ace4:	e026      	b.n	800ad34 <tcp_close_shutdown_fin+0x80>
    case SYN_RCVD:
      err = tcp_send_fin(pcb);
 800ace6:	6878      	ldr	r0, [r7, #4]
 800ace8:	f003 ff8a 	bl	800ec00 <tcp_send_fin>
 800acec:	4603      	mov	r3, r0
 800acee:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 800acf0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800acf4:	2b00      	cmp	r3, #0
 800acf6:	d11f      	bne.n	800ad38 <tcp_close_shutdown_fin+0x84>
        tcp_backlog_accepted(pcb);
        MIB2_STATS_INC(mib2.tcpattemptfails);
        pcb->state = FIN_WAIT_1;
 800acf8:	687b      	ldr	r3, [r7, #4]
 800acfa:	2205      	movs	r2, #5
 800acfc:	751a      	strb	r2, [r3, #20]
      }
      break;
 800acfe:	e01b      	b.n	800ad38 <tcp_close_shutdown_fin+0x84>
    case ESTABLISHED:
      err = tcp_send_fin(pcb);
 800ad00:	6878      	ldr	r0, [r7, #4]
 800ad02:	f003 ff7d 	bl	800ec00 <tcp_send_fin>
 800ad06:	4603      	mov	r3, r0
 800ad08:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 800ad0a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800ad0e:	2b00      	cmp	r3, #0
 800ad10:	d114      	bne.n	800ad3c <tcp_close_shutdown_fin+0x88>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = FIN_WAIT_1;
 800ad12:	687b      	ldr	r3, [r7, #4]
 800ad14:	2205      	movs	r2, #5
 800ad16:	751a      	strb	r2, [r3, #20]
      }
      break;
 800ad18:	e010      	b.n	800ad3c <tcp_close_shutdown_fin+0x88>
    case CLOSE_WAIT:
      err = tcp_send_fin(pcb);
 800ad1a:	6878      	ldr	r0, [r7, #4]
 800ad1c:	f003 ff70 	bl	800ec00 <tcp_send_fin>
 800ad20:	4603      	mov	r3, r0
 800ad22:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 800ad24:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800ad28:	2b00      	cmp	r3, #0
 800ad2a:	d109      	bne.n	800ad40 <tcp_close_shutdown_fin+0x8c>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = LAST_ACK;
 800ad2c:	687b      	ldr	r3, [r7, #4]
 800ad2e:	2209      	movs	r2, #9
 800ad30:	751a      	strb	r2, [r3, #20]
      }
      break;
 800ad32:	e005      	b.n	800ad40 <tcp_close_shutdown_fin+0x8c>
    default:
      /* Has already been closed, do nothing. */
      return ERR_OK;
 800ad34:	2300      	movs	r3, #0
 800ad36:	e01c      	b.n	800ad72 <tcp_close_shutdown_fin+0xbe>
      break;
 800ad38:	bf00      	nop
 800ad3a:	e002      	b.n	800ad42 <tcp_close_shutdown_fin+0x8e>
      break;
 800ad3c:	bf00      	nop
 800ad3e:	e000      	b.n	800ad42 <tcp_close_shutdown_fin+0x8e>
      break;
 800ad40:	bf00      	nop
  }

  if (err == ERR_OK) {
 800ad42:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800ad46:	2b00      	cmp	r3, #0
 800ad48:	d103      	bne.n	800ad52 <tcp_close_shutdown_fin+0x9e>
    /* To ensure all data has been sent when tcp_close returns, we have
       to make sure tcp_output doesn't fail.
       Since we don't really have to ensure all data has been sent when tcp_close
       returns (unsent data is sent from tcp timer functions, also), we don't care
       for the return value of tcp_output for now. */
    tcp_output(pcb);
 800ad4a:	6878      	ldr	r0, [r7, #4]
 800ad4c:	f004 f8a8 	bl	800eea0 <tcp_output>
 800ad50:	e00d      	b.n	800ad6e <tcp_close_shutdown_fin+0xba>
  } else if (err == ERR_MEM) {
 800ad52:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800ad56:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ad5a:	d108      	bne.n	800ad6e <tcp_close_shutdown_fin+0xba>
    /* Mark this pcb for closing. Closing is retried from tcp_tmr. */
    tcp_set_flags(pcb, TF_CLOSEPEND);
 800ad5c:	687b      	ldr	r3, [r7, #4]
 800ad5e:	8b5b      	ldrh	r3, [r3, #26]
 800ad60:	f043 0308 	orr.w	r3, r3, #8
 800ad64:	b29a      	uxth	r2, r3
 800ad66:	687b      	ldr	r3, [r7, #4]
 800ad68:	835a      	strh	r2, [r3, #26]
    /* We have to return ERR_OK from here to indicate to the callers that this
       pcb should not be used any more as it will be freed soon via tcp_tmr.
       This is OK here since sending FIN does not guarantee a time frime for
       actually freeing the pcb, either (it is left in closure states for
       remote ACK or timeout) */
    return ERR_OK;
 800ad6a:	2300      	movs	r3, #0
 800ad6c:	e001      	b.n	800ad72 <tcp_close_shutdown_fin+0xbe>
  }
  return err;
 800ad6e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800ad72:	4618      	mov	r0, r3
 800ad74:	3710      	adds	r7, #16
 800ad76:	46bd      	mov	sp, r7
 800ad78:	bd80      	pop	{r7, pc}
 800ad7a:	bf00      	nop
 800ad7c:	08015440 	.word	0x08015440
 800ad80:	080154f0 	.word	0x080154f0
 800ad84:	08015484 	.word	0x08015484

0800ad88 <tcp_close>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
err_t
tcp_close(struct tcp_pcb *pcb)
{
 800ad88:	b580      	push	{r7, lr}
 800ad8a:	b082      	sub	sp, #8
 800ad8c:	af00      	add	r7, sp, #0
 800ad8e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_close: invalid pcb", pcb != NULL, return ERR_ARG);
 800ad90:	687b      	ldr	r3, [r7, #4]
 800ad92:	2b00      	cmp	r3, #0
 800ad94:	d109      	bne.n	800adaa <tcp_close+0x22>
 800ad96:	4b0f      	ldr	r3, [pc, #60]	; (800add4 <tcp_close+0x4c>)
 800ad98:	f44f 72f4 	mov.w	r2, #488	; 0x1e8
 800ad9c:	490e      	ldr	r1, [pc, #56]	; (800add8 <tcp_close+0x50>)
 800ad9e:	480f      	ldr	r0, [pc, #60]	; (800addc <tcp_close+0x54>)
 800ada0:	f008 fde2 	bl	8013968 <iprintf>
 800ada4:	f06f 030f 	mvn.w	r3, #15
 800ada8:	e00f      	b.n	800adca <tcp_close+0x42>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_close: closing in "));

  tcp_debug_print_state(pcb->state);

  if (pcb->state != LISTEN) {
 800adaa:	687b      	ldr	r3, [r7, #4]
 800adac:	7d1b      	ldrb	r3, [r3, #20]
 800adae:	2b01      	cmp	r3, #1
 800adb0:	d006      	beq.n	800adc0 <tcp_close+0x38>
    /* Set a flag not to receive any more data... */
    tcp_set_flags(pcb, TF_RXCLOSED);
 800adb2:	687b      	ldr	r3, [r7, #4]
 800adb4:	8b5b      	ldrh	r3, [r3, #26]
 800adb6:	f043 0310 	orr.w	r3, r3, #16
 800adba:	b29a      	uxth	r2, r3
 800adbc:	687b      	ldr	r3, [r7, #4]
 800adbe:	835a      	strh	r2, [r3, #26]
  }
  /* ... and close */
  return tcp_close_shutdown(pcb, 1);
 800adc0:	2101      	movs	r1, #1
 800adc2:	6878      	ldr	r0, [r7, #4]
 800adc4:	f7ff fe94 	bl	800aaf0 <tcp_close_shutdown>
 800adc8:	4603      	mov	r3, r0
}
 800adca:	4618      	mov	r0, r3
 800adcc:	3708      	adds	r7, #8
 800adce:	46bd      	mov	sp, r7
 800add0:	bd80      	pop	{r7, pc}
 800add2:	bf00      	nop
 800add4:	08015440 	.word	0x08015440
 800add8:	08015550 	.word	0x08015550
 800addc:	08015484 	.word	0x08015484

0800ade0 <tcp_abandon>:
 * @param pcb the tcp_pcb to abort
 * @param reset boolean to indicate whether a reset should be sent
 */
void
tcp_abandon(struct tcp_pcb *pcb, int reset)
{
 800ade0:	b580      	push	{r7, lr}
 800ade2:	b08e      	sub	sp, #56	; 0x38
 800ade4:	af04      	add	r7, sp, #16
 800ade6:	6078      	str	r0, [r7, #4]
 800ade8:	6039      	str	r1, [r7, #0]
#endif /* LWIP_CALLBACK_API */
  void *errf_arg;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_abandon: invalid pcb", pcb != NULL, return);
 800adea:	687b      	ldr	r3, [r7, #4]
 800adec:	2b00      	cmp	r3, #0
 800adee:	d107      	bne.n	800ae00 <tcp_abandon+0x20>
 800adf0:	4b52      	ldr	r3, [pc, #328]	; (800af3c <tcp_abandon+0x15c>)
 800adf2:	f240 223d 	movw	r2, #573	; 0x23d
 800adf6:	4952      	ldr	r1, [pc, #328]	; (800af40 <tcp_abandon+0x160>)
 800adf8:	4852      	ldr	r0, [pc, #328]	; (800af44 <tcp_abandon+0x164>)
 800adfa:	f008 fdb5 	bl	8013968 <iprintf>
 800adfe:	e099      	b.n	800af34 <tcp_abandon+0x154>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_abort/tcp_abandon for listen-pcbs",
 800ae00:	687b      	ldr	r3, [r7, #4]
 800ae02:	7d1b      	ldrb	r3, [r3, #20]
 800ae04:	2b01      	cmp	r3, #1
 800ae06:	d106      	bne.n	800ae16 <tcp_abandon+0x36>
 800ae08:	4b4c      	ldr	r3, [pc, #304]	; (800af3c <tcp_abandon+0x15c>)
 800ae0a:	f44f 7210 	mov.w	r2, #576	; 0x240
 800ae0e:	494e      	ldr	r1, [pc, #312]	; (800af48 <tcp_abandon+0x168>)
 800ae10:	484c      	ldr	r0, [pc, #304]	; (800af44 <tcp_abandon+0x164>)
 800ae12:	f008 fda9 	bl	8013968 <iprintf>
              pcb->state != LISTEN);
  /* Figure out on which TCP PCB list we are, and remove us. If we
     are in an active state, call the receive function associated with
     the PCB with a NULL argument, and send an RST to the remote end. */
  if (pcb->state == TIME_WAIT) {
 800ae16:	687b      	ldr	r3, [r7, #4]
 800ae18:	7d1b      	ldrb	r3, [r3, #20]
 800ae1a:	2b0a      	cmp	r3, #10
 800ae1c:	d107      	bne.n	800ae2e <tcp_abandon+0x4e>
    tcp_pcb_remove(&tcp_tw_pcbs, pcb);
 800ae1e:	6879      	ldr	r1, [r7, #4]
 800ae20:	484a      	ldr	r0, [pc, #296]	; (800af4c <tcp_abandon+0x16c>)
 800ae22:	f000 ffed 	bl	800be00 <tcp_pcb_remove>
    tcp_free(pcb);
 800ae26:	6878      	ldr	r0, [r7, #4]
 800ae28:	f7ff fdb0 	bl	800a98c <tcp_free>
 800ae2c:	e082      	b.n	800af34 <tcp_abandon+0x154>
  } else {
    int send_rst = 0;
 800ae2e:	2300      	movs	r3, #0
 800ae30:	627b      	str	r3, [r7, #36]	; 0x24
    u16_t local_port = 0;
 800ae32:	2300      	movs	r3, #0
 800ae34:	847b      	strh	r3, [r7, #34]	; 0x22
    enum tcp_state last_state;
    seqno = pcb->snd_nxt;
 800ae36:	687b      	ldr	r3, [r7, #4]
 800ae38:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ae3a:	61bb      	str	r3, [r7, #24]
    ackno = pcb->rcv_nxt;
 800ae3c:	687b      	ldr	r3, [r7, #4]
 800ae3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ae40:	617b      	str	r3, [r7, #20]
#if LWIP_CALLBACK_API
    errf = pcb->errf;
 800ae42:	687b      	ldr	r3, [r7, #4]
 800ae44:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800ae48:	613b      	str	r3, [r7, #16]
#endif /* LWIP_CALLBACK_API */
    errf_arg = pcb->callback_arg;
 800ae4a:	687b      	ldr	r3, [r7, #4]
 800ae4c:	691b      	ldr	r3, [r3, #16]
 800ae4e:	60fb      	str	r3, [r7, #12]
    if (pcb->state == CLOSED) {
 800ae50:	687b      	ldr	r3, [r7, #4]
 800ae52:	7d1b      	ldrb	r3, [r3, #20]
 800ae54:	2b00      	cmp	r3, #0
 800ae56:	d126      	bne.n	800aea6 <tcp_abandon+0xc6>
      if (pcb->local_port != 0) {
 800ae58:	687b      	ldr	r3, [r7, #4]
 800ae5a:	8adb      	ldrh	r3, [r3, #22]
 800ae5c:	2b00      	cmp	r3, #0
 800ae5e:	d02e      	beq.n	800aebe <tcp_abandon+0xde>
        /* bound, not yet opened */
        TCP_RMV(&tcp_bound_pcbs, pcb);
 800ae60:	4b3b      	ldr	r3, [pc, #236]	; (800af50 <tcp_abandon+0x170>)
 800ae62:	681b      	ldr	r3, [r3, #0]
 800ae64:	687a      	ldr	r2, [r7, #4]
 800ae66:	429a      	cmp	r2, r3
 800ae68:	d105      	bne.n	800ae76 <tcp_abandon+0x96>
 800ae6a:	4b39      	ldr	r3, [pc, #228]	; (800af50 <tcp_abandon+0x170>)
 800ae6c:	681b      	ldr	r3, [r3, #0]
 800ae6e:	68db      	ldr	r3, [r3, #12]
 800ae70:	4a37      	ldr	r2, [pc, #220]	; (800af50 <tcp_abandon+0x170>)
 800ae72:	6013      	str	r3, [r2, #0]
 800ae74:	e013      	b.n	800ae9e <tcp_abandon+0xbe>
 800ae76:	4b36      	ldr	r3, [pc, #216]	; (800af50 <tcp_abandon+0x170>)
 800ae78:	681b      	ldr	r3, [r3, #0]
 800ae7a:	61fb      	str	r3, [r7, #28]
 800ae7c:	e00c      	b.n	800ae98 <tcp_abandon+0xb8>
 800ae7e:	69fb      	ldr	r3, [r7, #28]
 800ae80:	68db      	ldr	r3, [r3, #12]
 800ae82:	687a      	ldr	r2, [r7, #4]
 800ae84:	429a      	cmp	r2, r3
 800ae86:	d104      	bne.n	800ae92 <tcp_abandon+0xb2>
 800ae88:	687b      	ldr	r3, [r7, #4]
 800ae8a:	68da      	ldr	r2, [r3, #12]
 800ae8c:	69fb      	ldr	r3, [r7, #28]
 800ae8e:	60da      	str	r2, [r3, #12]
 800ae90:	e005      	b.n	800ae9e <tcp_abandon+0xbe>
 800ae92:	69fb      	ldr	r3, [r7, #28]
 800ae94:	68db      	ldr	r3, [r3, #12]
 800ae96:	61fb      	str	r3, [r7, #28]
 800ae98:	69fb      	ldr	r3, [r7, #28]
 800ae9a:	2b00      	cmp	r3, #0
 800ae9c:	d1ef      	bne.n	800ae7e <tcp_abandon+0x9e>
 800ae9e:	687b      	ldr	r3, [r7, #4]
 800aea0:	2200      	movs	r2, #0
 800aea2:	60da      	str	r2, [r3, #12]
 800aea4:	e00b      	b.n	800aebe <tcp_abandon+0xde>
      }
    } else {
      send_rst = reset;
 800aea6:	683b      	ldr	r3, [r7, #0]
 800aea8:	627b      	str	r3, [r7, #36]	; 0x24
      local_port = pcb->local_port;
 800aeaa:	687b      	ldr	r3, [r7, #4]
 800aeac:	8adb      	ldrh	r3, [r3, #22]
 800aeae:	847b      	strh	r3, [r7, #34]	; 0x22
      TCP_PCB_REMOVE_ACTIVE(pcb);
 800aeb0:	6879      	ldr	r1, [r7, #4]
 800aeb2:	4828      	ldr	r0, [pc, #160]	; (800af54 <tcp_abandon+0x174>)
 800aeb4:	f000 ffa4 	bl	800be00 <tcp_pcb_remove>
 800aeb8:	4b27      	ldr	r3, [pc, #156]	; (800af58 <tcp_abandon+0x178>)
 800aeba:	2201      	movs	r2, #1
 800aebc:	701a      	strb	r2, [r3, #0]
    }
    if (pcb->unacked != NULL) {
 800aebe:	687b      	ldr	r3, [r7, #4]
 800aec0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800aec2:	2b00      	cmp	r3, #0
 800aec4:	d004      	beq.n	800aed0 <tcp_abandon+0xf0>
      tcp_segs_free(pcb->unacked);
 800aec6:	687b      	ldr	r3, [r7, #4]
 800aec8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800aeca:	4618      	mov	r0, r3
 800aecc:	f000 fd1c 	bl	800b908 <tcp_segs_free>
    }
    if (pcb->unsent != NULL) {
 800aed0:	687b      	ldr	r3, [r7, #4]
 800aed2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800aed4:	2b00      	cmp	r3, #0
 800aed6:	d004      	beq.n	800aee2 <tcp_abandon+0x102>
      tcp_segs_free(pcb->unsent);
 800aed8:	687b      	ldr	r3, [r7, #4]
 800aeda:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800aedc:	4618      	mov	r0, r3
 800aede:	f000 fd13 	bl	800b908 <tcp_segs_free>
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 800aee2:	687b      	ldr	r3, [r7, #4]
 800aee4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800aee6:	2b00      	cmp	r3, #0
 800aee8:	d004      	beq.n	800aef4 <tcp_abandon+0x114>
      tcp_segs_free(pcb->ooseq);
 800aeea:	687b      	ldr	r3, [r7, #4]
 800aeec:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800aeee:	4618      	mov	r0, r3
 800aef0:	f000 fd0a 	bl	800b908 <tcp_segs_free>
    }
#endif /* TCP_QUEUE_OOSEQ */
    tcp_backlog_accepted(pcb);
    if (send_rst) {
 800aef4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aef6:	2b00      	cmp	r3, #0
 800aef8:	d00e      	beq.n	800af18 <tcp_abandon+0x138>
      LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_abandon: sending RST\n"));
      tcp_rst(pcb, seqno, ackno, &pcb->local_ip, &pcb->remote_ip, local_port, pcb->remote_port);
 800aefa:	6879      	ldr	r1, [r7, #4]
 800aefc:	687b      	ldr	r3, [r7, #4]
 800aefe:	3304      	adds	r3, #4
 800af00:	687a      	ldr	r2, [r7, #4]
 800af02:	8b12      	ldrh	r2, [r2, #24]
 800af04:	9202      	str	r2, [sp, #8]
 800af06:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 800af08:	9201      	str	r2, [sp, #4]
 800af0a:	9300      	str	r3, [sp, #0]
 800af0c:	460b      	mov	r3, r1
 800af0e:	697a      	ldr	r2, [r7, #20]
 800af10:	69b9      	ldr	r1, [r7, #24]
 800af12:	6878      	ldr	r0, [r7, #4]
 800af14:	f004 fd8c 	bl	800fa30 <tcp_rst>
    }
    last_state = pcb->state;
 800af18:	687b      	ldr	r3, [r7, #4]
 800af1a:	7d1b      	ldrb	r3, [r3, #20]
 800af1c:	72fb      	strb	r3, [r7, #11]
    tcp_free(pcb);
 800af1e:	6878      	ldr	r0, [r7, #4]
 800af20:	f7ff fd34 	bl	800a98c <tcp_free>
    TCP_EVENT_ERR(last_state, errf, errf_arg, ERR_ABRT);
 800af24:	693b      	ldr	r3, [r7, #16]
 800af26:	2b00      	cmp	r3, #0
 800af28:	d004      	beq.n	800af34 <tcp_abandon+0x154>
 800af2a:	693b      	ldr	r3, [r7, #16]
 800af2c:	f06f 010c 	mvn.w	r1, #12
 800af30:	68f8      	ldr	r0, [r7, #12]
 800af32:	4798      	blx	r3
  }
}
 800af34:	3728      	adds	r7, #40	; 0x28
 800af36:	46bd      	mov	sp, r7
 800af38:	bd80      	pop	{r7, pc}
 800af3a:	bf00      	nop
 800af3c:	08015440 	.word	0x08015440
 800af40:	08015584 	.word	0x08015584
 800af44:	08015484 	.word	0x08015484
 800af48:	080155a0 	.word	0x080155a0
 800af4c:	2000c758 	.word	0x2000c758
 800af50:	2000c74c 	.word	0x2000c74c
 800af54:	2000c754 	.word	0x2000c754
 800af58:	2000c75c 	.word	0x2000c75c

0800af5c <tcp_abort>:
 *
 * @param pcb the tcp pcb to abort
 */
void
tcp_abort(struct tcp_pcb *pcb)
{
 800af5c:	b580      	push	{r7, lr}
 800af5e:	b082      	sub	sp, #8
 800af60:	af00      	add	r7, sp, #0
 800af62:	6078      	str	r0, [r7, #4]
  tcp_abandon(pcb, 1);
 800af64:	2101      	movs	r1, #1
 800af66:	6878      	ldr	r0, [r7, #4]
 800af68:	f7ff ff3a 	bl	800ade0 <tcp_abandon>
}
 800af6c:	bf00      	nop
 800af6e:	3708      	adds	r7, #8
 800af70:	46bd      	mov	sp, r7
 800af72:	bd80      	pop	{r7, pc}

0800af74 <tcp_update_rcv_ann_wnd>:
 * Returns how much extra window would be advertised if we sent an
 * update now.
 */
u32_t
tcp_update_rcv_ann_wnd(struct tcp_pcb *pcb)
{
 800af74:	b580      	push	{r7, lr}
 800af76:	b084      	sub	sp, #16
 800af78:	af00      	add	r7, sp, #0
 800af7a:	6078      	str	r0, [r7, #4]
  u32_t new_right_edge;

  LWIP_ASSERT("tcp_update_rcv_ann_wnd: invalid pcb", pcb != NULL);
 800af7c:	687b      	ldr	r3, [r7, #4]
 800af7e:	2b00      	cmp	r3, #0
 800af80:	d106      	bne.n	800af90 <tcp_update_rcv_ann_wnd+0x1c>
 800af82:	4b25      	ldr	r3, [pc, #148]	; (800b018 <tcp_update_rcv_ann_wnd+0xa4>)
 800af84:	f240 32a6 	movw	r2, #934	; 0x3a6
 800af88:	4924      	ldr	r1, [pc, #144]	; (800b01c <tcp_update_rcv_ann_wnd+0xa8>)
 800af8a:	4825      	ldr	r0, [pc, #148]	; (800b020 <tcp_update_rcv_ann_wnd+0xac>)
 800af8c:	f008 fcec 	bl	8013968 <iprintf>
  new_right_edge = pcb->rcv_nxt + pcb->rcv_wnd;
 800af90:	687b      	ldr	r3, [r7, #4]
 800af92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800af94:	687a      	ldr	r2, [r7, #4]
 800af96:	8d12      	ldrh	r2, [r2, #40]	; 0x28
 800af98:	4413      	add	r3, r2
 800af9a:	60fb      	str	r3, [r7, #12]

  if (TCP_SEQ_GEQ(new_right_edge, pcb->rcv_ann_right_edge + LWIP_MIN((TCP_WND / 2), pcb->mss))) {
 800af9c:	687b      	ldr	r3, [r7, #4]
 800af9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800afa0:	687a      	ldr	r2, [r7, #4]
 800afa2:	8e52      	ldrh	r2, [r2, #50]	; 0x32
 800afa4:	f5b2 6f86 	cmp.w	r2, #1072	; 0x430
 800afa8:	bf28      	it	cs
 800afaa:	f44f 6286 	movcs.w	r2, #1072	; 0x430
 800afae:	b292      	uxth	r2, r2
 800afb0:	4413      	add	r3, r2
 800afb2:	68fa      	ldr	r2, [r7, #12]
 800afb4:	1ad3      	subs	r3, r2, r3
 800afb6:	2b00      	cmp	r3, #0
 800afb8:	db08      	blt.n	800afcc <tcp_update_rcv_ann_wnd+0x58>
    /* we can advertise more window */
    pcb->rcv_ann_wnd = pcb->rcv_wnd;
 800afba:	687b      	ldr	r3, [r7, #4]
 800afbc:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800afbe:	687b      	ldr	r3, [r7, #4]
 800afc0:	855a      	strh	r2, [r3, #42]	; 0x2a
    return new_right_edge - pcb->rcv_ann_right_edge;
 800afc2:	687b      	ldr	r3, [r7, #4]
 800afc4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800afc6:	68fa      	ldr	r2, [r7, #12]
 800afc8:	1ad3      	subs	r3, r2, r3
 800afca:	e020      	b.n	800b00e <tcp_update_rcv_ann_wnd+0x9a>
  } else {
    if (TCP_SEQ_GT(pcb->rcv_nxt, pcb->rcv_ann_right_edge)) {
 800afcc:	687b      	ldr	r3, [r7, #4]
 800afce:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800afd0:	687b      	ldr	r3, [r7, #4]
 800afd2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800afd4:	1ad3      	subs	r3, r2, r3
 800afd6:	2b00      	cmp	r3, #0
 800afd8:	dd03      	ble.n	800afe2 <tcp_update_rcv_ann_wnd+0x6e>
      /* Can happen due to other end sending out of advertised window,
       * but within actual available (but not yet advertised) window */
      pcb->rcv_ann_wnd = 0;
 800afda:	687b      	ldr	r3, [r7, #4]
 800afdc:	2200      	movs	r2, #0
 800afde:	855a      	strh	r2, [r3, #42]	; 0x2a
 800afe0:	e014      	b.n	800b00c <tcp_update_rcv_ann_wnd+0x98>
    } else {
      /* keep the right edge of window constant */
      u32_t new_rcv_ann_wnd = pcb->rcv_ann_right_edge - pcb->rcv_nxt;
 800afe2:	687b      	ldr	r3, [r7, #4]
 800afe4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800afe6:	687b      	ldr	r3, [r7, #4]
 800afe8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800afea:	1ad3      	subs	r3, r2, r3
 800afec:	60bb      	str	r3, [r7, #8]
#if !LWIP_WND_SCALE
      LWIP_ASSERT("new_rcv_ann_wnd <= 0xffff", new_rcv_ann_wnd <= 0xffff);
 800afee:	68bb      	ldr	r3, [r7, #8]
 800aff0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800aff4:	d306      	bcc.n	800b004 <tcp_update_rcv_ann_wnd+0x90>
 800aff6:	4b08      	ldr	r3, [pc, #32]	; (800b018 <tcp_update_rcv_ann_wnd+0xa4>)
 800aff8:	f240 32b6 	movw	r2, #950	; 0x3b6
 800affc:	4909      	ldr	r1, [pc, #36]	; (800b024 <tcp_update_rcv_ann_wnd+0xb0>)
 800affe:	4808      	ldr	r0, [pc, #32]	; (800b020 <tcp_update_rcv_ann_wnd+0xac>)
 800b000:	f008 fcb2 	bl	8013968 <iprintf>
#endif
      pcb->rcv_ann_wnd = (tcpwnd_size_t)new_rcv_ann_wnd;
 800b004:	68bb      	ldr	r3, [r7, #8]
 800b006:	b29a      	uxth	r2, r3
 800b008:	687b      	ldr	r3, [r7, #4]
 800b00a:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
    return 0;
 800b00c:	2300      	movs	r3, #0
  }
}
 800b00e:	4618      	mov	r0, r3
 800b010:	3710      	adds	r7, #16
 800b012:	46bd      	mov	sp, r7
 800b014:	bd80      	pop	{r7, pc}
 800b016:	bf00      	nop
 800b018:	08015440 	.word	0x08015440
 800b01c:	0801569c 	.word	0x0801569c
 800b020:	08015484 	.word	0x08015484
 800b024:	080156c0 	.word	0x080156c0

0800b028 <tcp_recved>:
 * @param pcb the tcp_pcb for which data is read
 * @param len the amount of bytes that have been read by the application
 */
void
tcp_recved(struct tcp_pcb *pcb, u16_t len)
{
 800b028:	b580      	push	{r7, lr}
 800b02a:	b084      	sub	sp, #16
 800b02c:	af00      	add	r7, sp, #0
 800b02e:	6078      	str	r0, [r7, #4]
 800b030:	460b      	mov	r3, r1
 800b032:	807b      	strh	r3, [r7, #2]
  u32_t wnd_inflation;
  tcpwnd_size_t rcv_wnd;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_recved: invalid pcb", pcb != NULL, return);
 800b034:	687b      	ldr	r3, [r7, #4]
 800b036:	2b00      	cmp	r3, #0
 800b038:	d107      	bne.n	800b04a <tcp_recved+0x22>
 800b03a:	4b1f      	ldr	r3, [pc, #124]	; (800b0b8 <tcp_recved+0x90>)
 800b03c:	f240 32cf 	movw	r2, #975	; 0x3cf
 800b040:	491e      	ldr	r1, [pc, #120]	; (800b0bc <tcp_recved+0x94>)
 800b042:	481f      	ldr	r0, [pc, #124]	; (800b0c0 <tcp_recved+0x98>)
 800b044:	f008 fc90 	bl	8013968 <iprintf>
 800b048:	e032      	b.n	800b0b0 <tcp_recved+0x88>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_recved for listen-pcbs",
 800b04a:	687b      	ldr	r3, [r7, #4]
 800b04c:	7d1b      	ldrb	r3, [r3, #20]
 800b04e:	2b01      	cmp	r3, #1
 800b050:	d106      	bne.n	800b060 <tcp_recved+0x38>
 800b052:	4b19      	ldr	r3, [pc, #100]	; (800b0b8 <tcp_recved+0x90>)
 800b054:	f240 32d2 	movw	r2, #978	; 0x3d2
 800b058:	491a      	ldr	r1, [pc, #104]	; (800b0c4 <tcp_recved+0x9c>)
 800b05a:	4819      	ldr	r0, [pc, #100]	; (800b0c0 <tcp_recved+0x98>)
 800b05c:	f008 fc84 	bl	8013968 <iprintf>
              pcb->state != LISTEN);

  rcv_wnd = (tcpwnd_size_t)(pcb->rcv_wnd + len);
 800b060:	687b      	ldr	r3, [r7, #4]
 800b062:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800b064:	887b      	ldrh	r3, [r7, #2]
 800b066:	4413      	add	r3, r2
 800b068:	81fb      	strh	r3, [r7, #14]
  if ((rcv_wnd > TCP_WND_MAX(pcb)) || (rcv_wnd < pcb->rcv_wnd)) {
 800b06a:	89fb      	ldrh	r3, [r7, #14]
 800b06c:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 800b070:	d804      	bhi.n	800b07c <tcp_recved+0x54>
 800b072:	687b      	ldr	r3, [r7, #4]
 800b074:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b076:	89fa      	ldrh	r2, [r7, #14]
 800b078:	429a      	cmp	r2, r3
 800b07a:	d204      	bcs.n	800b086 <tcp_recved+0x5e>
    /* window got too big or tcpwnd_size_t overflow */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: window got too big or tcpwnd_size_t overflow\n"));
    pcb->rcv_wnd = TCP_WND_MAX(pcb);
 800b07c:	687b      	ldr	r3, [r7, #4]
 800b07e:	f44f 6206 	mov.w	r2, #2144	; 0x860
 800b082:	851a      	strh	r2, [r3, #40]	; 0x28
 800b084:	e002      	b.n	800b08c <tcp_recved+0x64>
  } else  {
    pcb->rcv_wnd = rcv_wnd;
 800b086:	687b      	ldr	r3, [r7, #4]
 800b088:	89fa      	ldrh	r2, [r7, #14]
 800b08a:	851a      	strh	r2, [r3, #40]	; 0x28
  }

  wnd_inflation = tcp_update_rcv_ann_wnd(pcb);
 800b08c:	6878      	ldr	r0, [r7, #4]
 800b08e:	f7ff ff71 	bl	800af74 <tcp_update_rcv_ann_wnd>
 800b092:	60b8      	str	r0, [r7, #8]

  /* If the change in the right edge of window is significant (default
   * watermark is TCP_WND/4), then send an explicit update now.
   * Otherwise wait for a packet to be sent in the normal course of
   * events (or more window to be available later) */
  if (wnd_inflation >= TCP_WND_UPDATE_THRESHOLD) {
 800b094:	68bb      	ldr	r3, [r7, #8]
 800b096:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 800b09a:	d309      	bcc.n	800b0b0 <tcp_recved+0x88>
    tcp_ack_now(pcb);
 800b09c:	687b      	ldr	r3, [r7, #4]
 800b09e:	8b5b      	ldrh	r3, [r3, #26]
 800b0a0:	f043 0302 	orr.w	r3, r3, #2
 800b0a4:	b29a      	uxth	r2, r3
 800b0a6:	687b      	ldr	r3, [r7, #4]
 800b0a8:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 800b0aa:	6878      	ldr	r0, [r7, #4]
 800b0ac:	f003 fef8 	bl	800eea0 <tcp_output>
  }

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: received %"U16_F" bytes, wnd %"TCPWNDSIZE_F" (%"TCPWNDSIZE_F").\n",
                          len, pcb->rcv_wnd, (u16_t)(TCP_WND_MAX(pcb) - pcb->rcv_wnd)));
}
 800b0b0:	3710      	adds	r7, #16
 800b0b2:	46bd      	mov	sp, r7
 800b0b4:	bd80      	pop	{r7, pc}
 800b0b6:	bf00      	nop
 800b0b8:	08015440 	.word	0x08015440
 800b0bc:	080156dc 	.word	0x080156dc
 800b0c0:	08015484 	.word	0x08015484
 800b0c4:	080156f4 	.word	0x080156f4

0800b0c8 <tcp_slowtmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_slowtmr(void)
{
 800b0c8:	b5b0      	push	{r4, r5, r7, lr}
 800b0ca:	b090      	sub	sp, #64	; 0x40
 800b0cc:	af04      	add	r7, sp, #16
  tcpwnd_size_t eff_wnd;
  u8_t pcb_remove;      /* flag if a PCB should be removed */
  u8_t pcb_reset;       /* flag if a RST should be sent when removing */
  err_t err;

  err = ERR_OK;
 800b0ce:	2300      	movs	r3, #0
 800b0d0:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25

  ++tcp_ticks;
 800b0d4:	4b94      	ldr	r3, [pc, #592]	; (800b328 <tcp_slowtmr+0x260>)
 800b0d6:	681b      	ldr	r3, [r3, #0]
 800b0d8:	3301      	adds	r3, #1
 800b0da:	4a93      	ldr	r2, [pc, #588]	; (800b328 <tcp_slowtmr+0x260>)
 800b0dc:	6013      	str	r3, [r2, #0]
  ++tcp_timer_ctr;
 800b0de:	4b93      	ldr	r3, [pc, #588]	; (800b32c <tcp_slowtmr+0x264>)
 800b0e0:	781b      	ldrb	r3, [r3, #0]
 800b0e2:	3301      	adds	r3, #1
 800b0e4:	b2da      	uxtb	r2, r3
 800b0e6:	4b91      	ldr	r3, [pc, #580]	; (800b32c <tcp_slowtmr+0x264>)
 800b0e8:	701a      	strb	r2, [r3, #0]

tcp_slowtmr_start:
  /* Steps through all of the active PCBs. */
  prev = NULL;
 800b0ea:	2300      	movs	r3, #0
 800b0ec:	62bb      	str	r3, [r7, #40]	; 0x28
  pcb = tcp_active_pcbs;
 800b0ee:	4b90      	ldr	r3, [pc, #576]	; (800b330 <tcp_slowtmr+0x268>)
 800b0f0:	681b      	ldr	r3, [r3, #0]
 800b0f2:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (pcb == NULL) {
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: no active pcbs\n"));
  }
  while (pcb != NULL) {
 800b0f4:	e29f      	b.n	800b636 <tcp_slowtmr+0x56e>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: processing active pcb\n"));
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != CLOSED\n", pcb->state != CLOSED);
 800b0f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b0f8:	7d1b      	ldrb	r3, [r3, #20]
 800b0fa:	2b00      	cmp	r3, #0
 800b0fc:	d106      	bne.n	800b10c <tcp_slowtmr+0x44>
 800b0fe:	4b8d      	ldr	r3, [pc, #564]	; (800b334 <tcp_slowtmr+0x26c>)
 800b100:	f240 42be 	movw	r2, #1214	; 0x4be
 800b104:	498c      	ldr	r1, [pc, #560]	; (800b338 <tcp_slowtmr+0x270>)
 800b106:	488d      	ldr	r0, [pc, #564]	; (800b33c <tcp_slowtmr+0x274>)
 800b108:	f008 fc2e 	bl	8013968 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != LISTEN\n", pcb->state != LISTEN);
 800b10c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b10e:	7d1b      	ldrb	r3, [r3, #20]
 800b110:	2b01      	cmp	r3, #1
 800b112:	d106      	bne.n	800b122 <tcp_slowtmr+0x5a>
 800b114:	4b87      	ldr	r3, [pc, #540]	; (800b334 <tcp_slowtmr+0x26c>)
 800b116:	f240 42bf 	movw	r2, #1215	; 0x4bf
 800b11a:	4989      	ldr	r1, [pc, #548]	; (800b340 <tcp_slowtmr+0x278>)
 800b11c:	4887      	ldr	r0, [pc, #540]	; (800b33c <tcp_slowtmr+0x274>)
 800b11e:	f008 fc23 	bl	8013968 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != TIME-WAIT\n", pcb->state != TIME_WAIT);
 800b122:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b124:	7d1b      	ldrb	r3, [r3, #20]
 800b126:	2b0a      	cmp	r3, #10
 800b128:	d106      	bne.n	800b138 <tcp_slowtmr+0x70>
 800b12a:	4b82      	ldr	r3, [pc, #520]	; (800b334 <tcp_slowtmr+0x26c>)
 800b12c:	f44f 6298 	mov.w	r2, #1216	; 0x4c0
 800b130:	4984      	ldr	r1, [pc, #528]	; (800b344 <tcp_slowtmr+0x27c>)
 800b132:	4882      	ldr	r0, [pc, #520]	; (800b33c <tcp_slowtmr+0x274>)
 800b134:	f008 fc18 	bl	8013968 <iprintf>
    if (pcb->last_timer == tcp_timer_ctr) {
 800b138:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b13a:	7f9a      	ldrb	r2, [r3, #30]
 800b13c:	4b7b      	ldr	r3, [pc, #492]	; (800b32c <tcp_slowtmr+0x264>)
 800b13e:	781b      	ldrb	r3, [r3, #0]
 800b140:	429a      	cmp	r2, r3
 800b142:	d105      	bne.n	800b150 <tcp_slowtmr+0x88>
      /* skip this pcb, we have already processed it */
      prev = pcb;
 800b144:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b146:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 800b148:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b14a:	68db      	ldr	r3, [r3, #12]
 800b14c:	62fb      	str	r3, [r7, #44]	; 0x2c
      continue;
 800b14e:	e272      	b.n	800b636 <tcp_slowtmr+0x56e>
    }
    pcb->last_timer = tcp_timer_ctr;
 800b150:	4b76      	ldr	r3, [pc, #472]	; (800b32c <tcp_slowtmr+0x264>)
 800b152:	781a      	ldrb	r2, [r3, #0]
 800b154:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b156:	779a      	strb	r2, [r3, #30]

    pcb_remove = 0;
 800b158:	2300      	movs	r3, #0
 800b15a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    pcb_reset = 0;
 800b15e:	2300      	movs	r3, #0
 800b160:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

    if (pcb->state == SYN_SENT && pcb->nrtx >= TCP_SYNMAXRTX) {
 800b164:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b166:	7d1b      	ldrb	r3, [r3, #20]
 800b168:	2b02      	cmp	r3, #2
 800b16a:	d10a      	bne.n	800b182 <tcp_slowtmr+0xba>
 800b16c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b16e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800b172:	2b05      	cmp	r3, #5
 800b174:	d905      	bls.n	800b182 <tcp_slowtmr+0xba>
      ++pcb_remove;
 800b176:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b17a:	3301      	adds	r3, #1
 800b17c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800b180:	e11e      	b.n	800b3c0 <tcp_slowtmr+0x2f8>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max SYN retries reached\n"));
    } else if (pcb->nrtx >= TCP_MAXRTX) {
 800b182:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b184:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800b188:	2b0b      	cmp	r3, #11
 800b18a:	d905      	bls.n	800b198 <tcp_slowtmr+0xd0>
      ++pcb_remove;
 800b18c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b190:	3301      	adds	r3, #1
 800b192:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800b196:	e113      	b.n	800b3c0 <tcp_slowtmr+0x2f8>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max DATA retries reached\n"));
    } else {
      if (pcb->persist_backoff > 0) {
 800b198:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b19a:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800b19e:	2b00      	cmp	r3, #0
 800b1a0:	d075      	beq.n	800b28e <tcp_slowtmr+0x1c6>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with in-flight data", pcb->unacked == NULL);
 800b1a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b1a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b1a6:	2b00      	cmp	r3, #0
 800b1a8:	d006      	beq.n	800b1b8 <tcp_slowtmr+0xf0>
 800b1aa:	4b62      	ldr	r3, [pc, #392]	; (800b334 <tcp_slowtmr+0x26c>)
 800b1ac:	f240 42d4 	movw	r2, #1236	; 0x4d4
 800b1b0:	4965      	ldr	r1, [pc, #404]	; (800b348 <tcp_slowtmr+0x280>)
 800b1b2:	4862      	ldr	r0, [pc, #392]	; (800b33c <tcp_slowtmr+0x274>)
 800b1b4:	f008 fbd8 	bl	8013968 <iprintf>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with empty send buffer", pcb->unsent != NULL);
 800b1b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b1ba:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b1bc:	2b00      	cmp	r3, #0
 800b1be:	d106      	bne.n	800b1ce <tcp_slowtmr+0x106>
 800b1c0:	4b5c      	ldr	r3, [pc, #368]	; (800b334 <tcp_slowtmr+0x26c>)
 800b1c2:	f240 42d5 	movw	r2, #1237	; 0x4d5
 800b1c6:	4961      	ldr	r1, [pc, #388]	; (800b34c <tcp_slowtmr+0x284>)
 800b1c8:	485c      	ldr	r0, [pc, #368]	; (800b33c <tcp_slowtmr+0x274>)
 800b1ca:	f008 fbcd 	bl	8013968 <iprintf>
        if (pcb->persist_probe >= TCP_MAXRTX) {
 800b1ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b1d0:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 800b1d4:	2b0b      	cmp	r3, #11
 800b1d6:	d905      	bls.n	800b1e4 <tcp_slowtmr+0x11c>
          ++pcb_remove; /* max probes reached */
 800b1d8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b1dc:	3301      	adds	r3, #1
 800b1de:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800b1e2:	e0ed      	b.n	800b3c0 <tcp_slowtmr+0x2f8>
        } else {
          u8_t backoff_cnt = tcp_persist_backoff[pcb->persist_backoff - 1];
 800b1e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b1e6:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800b1ea:	3b01      	subs	r3, #1
 800b1ec:	4a58      	ldr	r2, [pc, #352]	; (800b350 <tcp_slowtmr+0x288>)
 800b1ee:	5cd3      	ldrb	r3, [r2, r3]
 800b1f0:	747b      	strb	r3, [r7, #17]
          if (pcb->persist_cnt < backoff_cnt) {
 800b1f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b1f4:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 800b1f8:	7c7a      	ldrb	r2, [r7, #17]
 800b1fa:	429a      	cmp	r2, r3
 800b1fc:	d907      	bls.n	800b20e <tcp_slowtmr+0x146>
            pcb->persist_cnt++;
 800b1fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b200:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 800b204:	3301      	adds	r3, #1
 800b206:	b2da      	uxtb	r2, r3
 800b208:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b20a:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
          }
          if (pcb->persist_cnt >= backoff_cnt) {
 800b20e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b210:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 800b214:	7c7a      	ldrb	r2, [r7, #17]
 800b216:	429a      	cmp	r2, r3
 800b218:	f200 80d2 	bhi.w	800b3c0 <tcp_slowtmr+0x2f8>
            int next_slot = 1; /* increment timer to next slot */
 800b21c:	2301      	movs	r3, #1
 800b21e:	623b      	str	r3, [r7, #32]
            /* If snd_wnd is zero, send 1 byte probes */
            if (pcb->snd_wnd == 0) {
 800b220:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b222:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800b226:	2b00      	cmp	r3, #0
 800b228:	d108      	bne.n	800b23c <tcp_slowtmr+0x174>
              if (tcp_zero_window_probe(pcb) != ERR_OK) {
 800b22a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800b22c:	f004 fcf4 	bl	800fc18 <tcp_zero_window_probe>
 800b230:	4603      	mov	r3, r0
 800b232:	2b00      	cmp	r3, #0
 800b234:	d014      	beq.n	800b260 <tcp_slowtmr+0x198>
                next_slot = 0; /* try probe again with current slot */
 800b236:	2300      	movs	r3, #0
 800b238:	623b      	str	r3, [r7, #32]
 800b23a:	e011      	b.n	800b260 <tcp_slowtmr+0x198>
              }
              /* snd_wnd not fully closed, split unsent head and fill window */
            } else {
              if (tcp_split_unsent_seg(pcb, (u16_t)pcb->snd_wnd) == ERR_OK) {
 800b23c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b23e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800b242:	4619      	mov	r1, r3
 800b244:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800b246:	f003 fb89 	bl	800e95c <tcp_split_unsent_seg>
 800b24a:	4603      	mov	r3, r0
 800b24c:	2b00      	cmp	r3, #0
 800b24e:	d107      	bne.n	800b260 <tcp_slowtmr+0x198>
                if (tcp_output(pcb) == ERR_OK) {
 800b250:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800b252:	f003 fe25 	bl	800eea0 <tcp_output>
 800b256:	4603      	mov	r3, r0
 800b258:	2b00      	cmp	r3, #0
 800b25a:	d101      	bne.n	800b260 <tcp_slowtmr+0x198>
                  /* sending will cancel persist timer, else retry with current slot */
                  next_slot = 0;
 800b25c:	2300      	movs	r3, #0
 800b25e:	623b      	str	r3, [r7, #32]
                }
              }
            }
            if (next_slot) {
 800b260:	6a3b      	ldr	r3, [r7, #32]
 800b262:	2b00      	cmp	r3, #0
 800b264:	f000 80ac 	beq.w	800b3c0 <tcp_slowtmr+0x2f8>
              pcb->persist_cnt = 0;
 800b268:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b26a:	2200      	movs	r2, #0
 800b26c:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
              if (pcb->persist_backoff < sizeof(tcp_persist_backoff)) {
 800b270:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b272:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800b276:	2b06      	cmp	r3, #6
 800b278:	f200 80a2 	bhi.w	800b3c0 <tcp_slowtmr+0x2f8>
                pcb->persist_backoff++;
 800b27c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b27e:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800b282:	3301      	adds	r3, #1
 800b284:	b2da      	uxtb	r2, r3
 800b286:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b288:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
 800b28c:	e098      	b.n	800b3c0 <tcp_slowtmr+0x2f8>
            }
          }
        }
      } else {
        /* Increase the retransmission timer if it is running */
        if ((pcb->rtime >= 0) && (pcb->rtime < 0x7FFF)) {
 800b28e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b290:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800b294:	2b00      	cmp	r3, #0
 800b296:	db0f      	blt.n	800b2b8 <tcp_slowtmr+0x1f0>
 800b298:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b29a:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800b29e:	f647 72ff 	movw	r2, #32767	; 0x7fff
 800b2a2:	4293      	cmp	r3, r2
 800b2a4:	d008      	beq.n	800b2b8 <tcp_slowtmr+0x1f0>
          ++pcb->rtime;
 800b2a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b2a8:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800b2ac:	b29b      	uxth	r3, r3
 800b2ae:	3301      	adds	r3, #1
 800b2b0:	b29b      	uxth	r3, r3
 800b2b2:	b21a      	sxth	r2, r3
 800b2b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b2b6:	861a      	strh	r2, [r3, #48]	; 0x30
        }

        if (pcb->rtime >= pcb->rto) {
 800b2b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b2ba:	f9b3 2030 	ldrsh.w	r2, [r3, #48]	; 0x30
 800b2be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b2c0:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 800b2c4:	429a      	cmp	r2, r3
 800b2c6:	db7b      	blt.n	800b3c0 <tcp_slowtmr+0x2f8>
                                      " pcb->rto %"S16_F"\n",
                                      pcb->rtime, pcb->rto));
          /* If prepare phase fails but we have unsent data but no unacked data,
             still execute the backoff calculations below, as this means we somehow
             failed to send segment. */
          if ((tcp_rexmit_rto_prepare(pcb) == ERR_OK) || ((pcb->unacked == NULL) && (pcb->unsent != NULL))) {
 800b2c8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800b2ca:	f004 f8e5 	bl	800f498 <tcp_rexmit_rto_prepare>
 800b2ce:	4603      	mov	r3, r0
 800b2d0:	2b00      	cmp	r3, #0
 800b2d2:	d007      	beq.n	800b2e4 <tcp_slowtmr+0x21c>
 800b2d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b2d6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b2d8:	2b00      	cmp	r3, #0
 800b2da:	d171      	bne.n	800b3c0 <tcp_slowtmr+0x2f8>
 800b2dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b2de:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b2e0:	2b00      	cmp	r3, #0
 800b2e2:	d06d      	beq.n	800b3c0 <tcp_slowtmr+0x2f8>
            /* Double retransmission time-out unless we are trying to
             * connect to somebody (i.e., we are in SYN_SENT). */
            if (pcb->state != SYN_SENT) {
 800b2e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b2e6:	7d1b      	ldrb	r3, [r3, #20]
 800b2e8:	2b02      	cmp	r3, #2
 800b2ea:	d03a      	beq.n	800b362 <tcp_slowtmr+0x29a>
              u8_t backoff_idx = LWIP_MIN(pcb->nrtx, sizeof(tcp_backoff) - 1);
 800b2ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b2ee:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800b2f2:	2b0c      	cmp	r3, #12
 800b2f4:	bf28      	it	cs
 800b2f6:	230c      	movcs	r3, #12
 800b2f8:	76fb      	strb	r3, [r7, #27]
              int calc_rto = ((pcb->sa >> 3) + pcb->sv) << tcp_backoff[backoff_idx];
 800b2fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b2fc:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800b300:	10db      	asrs	r3, r3, #3
 800b302:	b21b      	sxth	r3, r3
 800b304:	461a      	mov	r2, r3
 800b306:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b308:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800b30c:	4413      	add	r3, r2
 800b30e:	7efa      	ldrb	r2, [r7, #27]
 800b310:	4910      	ldr	r1, [pc, #64]	; (800b354 <tcp_slowtmr+0x28c>)
 800b312:	5c8a      	ldrb	r2, [r1, r2]
 800b314:	4093      	lsls	r3, r2
 800b316:	617b      	str	r3, [r7, #20]
              pcb->rto = (s16_t)LWIP_MIN(calc_rto, 0x7FFF);
 800b318:	697b      	ldr	r3, [r7, #20]
 800b31a:	f647 72fe 	movw	r2, #32766	; 0x7ffe
 800b31e:	4293      	cmp	r3, r2
 800b320:	dc1a      	bgt.n	800b358 <tcp_slowtmr+0x290>
 800b322:	697b      	ldr	r3, [r7, #20]
 800b324:	b21a      	sxth	r2, r3
 800b326:	e019      	b.n	800b35c <tcp_slowtmr+0x294>
 800b328:	2000c748 	.word	0x2000c748
 800b32c:	2000c75e 	.word	0x2000c75e
 800b330:	2000c754 	.word	0x2000c754
 800b334:	08015440 	.word	0x08015440
 800b338:	08015784 	.word	0x08015784
 800b33c:	08015484 	.word	0x08015484
 800b340:	080157b0 	.word	0x080157b0
 800b344:	080157dc 	.word	0x080157dc
 800b348:	0801580c 	.word	0x0801580c
 800b34c:	08015840 	.word	0x08015840
 800b350:	08017490 	.word	0x08017490
 800b354:	08017480 	.word	0x08017480
 800b358:	f647 72ff 	movw	r2, #32767	; 0x7fff
 800b35c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b35e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
            }

            /* Reset the retransmission timer. */
            pcb->rtime = 0;
 800b362:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b364:	2200      	movs	r2, #0
 800b366:	861a      	strh	r2, [r3, #48]	; 0x30

            /* Reduce congestion window and ssthresh. */
            eff_wnd = LWIP_MIN(pcb->cwnd, pcb->snd_wnd);
 800b368:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b36a:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800b36e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b370:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800b374:	4293      	cmp	r3, r2
 800b376:	bf28      	it	cs
 800b378:	4613      	movcs	r3, r2
 800b37a:	827b      	strh	r3, [r7, #18]
            pcb->ssthresh = eff_wnd >> 1;
 800b37c:	8a7b      	ldrh	r3, [r7, #18]
 800b37e:	085b      	lsrs	r3, r3, #1
 800b380:	b29a      	uxth	r2, r3
 800b382:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b384:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
            if (pcb->ssthresh < (tcpwnd_size_t)(pcb->mss << 1)) {
 800b388:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b38a:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 800b38e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b390:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800b392:	005b      	lsls	r3, r3, #1
 800b394:	b29b      	uxth	r3, r3
 800b396:	429a      	cmp	r2, r3
 800b398:	d206      	bcs.n	800b3a8 <tcp_slowtmr+0x2e0>
              pcb->ssthresh = (tcpwnd_size_t)(pcb->mss << 1);
 800b39a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b39c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800b39e:	005b      	lsls	r3, r3, #1
 800b3a0:	b29a      	uxth	r2, r3
 800b3a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b3a4:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
            }
            pcb->cwnd = pcb->mss;
 800b3a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b3aa:	8e5a      	ldrh	r2, [r3, #50]	; 0x32
 800b3ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b3ae:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
            LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: cwnd %"TCPWNDSIZE_F
                                         " ssthresh %"TCPWNDSIZE_F"\n",
                                         pcb->cwnd, pcb->ssthresh));
            pcb->bytes_acked = 0;
 800b3b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b3b4:	2200      	movs	r2, #0
 800b3b6:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

            /* The following needs to be called AFTER cwnd is set to one
               mss - STJ */
            tcp_rexmit_rto_commit(pcb);
 800b3ba:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800b3bc:	f004 f8dc 	bl	800f578 <tcp_rexmit_rto_commit>
          }
        }
      }
    }
    /* Check if this PCB has stayed too long in FIN-WAIT-2 */
    if (pcb->state == FIN_WAIT_2) {
 800b3c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b3c2:	7d1b      	ldrb	r3, [r3, #20]
 800b3c4:	2b06      	cmp	r3, #6
 800b3c6:	d111      	bne.n	800b3ec <tcp_slowtmr+0x324>
      /* If this PCB is in FIN_WAIT_2 because of SHUT_WR don't let it time out. */
      if (pcb->flags & TF_RXCLOSED) {
 800b3c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b3ca:	8b5b      	ldrh	r3, [r3, #26]
 800b3cc:	f003 0310 	and.w	r3, r3, #16
 800b3d0:	2b00      	cmp	r3, #0
 800b3d2:	d00b      	beq.n	800b3ec <tcp_slowtmr+0x324>
        /* PCB was fully closed (either through close() or SHUT_RDWR):
           normal FIN-WAIT timeout handling. */
        if ((u32_t)(tcp_ticks - pcb->tmr) >
 800b3d4:	4b9d      	ldr	r3, [pc, #628]	; (800b64c <tcp_slowtmr+0x584>)
 800b3d6:	681a      	ldr	r2, [r3, #0]
 800b3d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b3da:	6a1b      	ldr	r3, [r3, #32]
 800b3dc:	1ad3      	subs	r3, r2, r3
 800b3de:	2b28      	cmp	r3, #40	; 0x28
 800b3e0:	d904      	bls.n	800b3ec <tcp_slowtmr+0x324>
            TCP_FIN_WAIT_TIMEOUT / TCP_SLOW_INTERVAL) {
          ++pcb_remove;
 800b3e2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b3e6:	3301      	adds	r3, #1
 800b3e8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        }
      }
    }

    /* Check if KEEPALIVE should be sent */
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 800b3ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b3ee:	7a5b      	ldrb	r3, [r3, #9]
 800b3f0:	f003 0308 	and.w	r3, r3, #8
 800b3f4:	2b00      	cmp	r3, #0
 800b3f6:	d04c      	beq.n	800b492 <tcp_slowtmr+0x3ca>
        ((pcb->state == ESTABLISHED) ||
 800b3f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b3fa:	7d1b      	ldrb	r3, [r3, #20]
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 800b3fc:	2b04      	cmp	r3, #4
 800b3fe:	d003      	beq.n	800b408 <tcp_slowtmr+0x340>
         (pcb->state == CLOSE_WAIT))) {
 800b400:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b402:	7d1b      	ldrb	r3, [r3, #20]
        ((pcb->state == ESTABLISHED) ||
 800b404:	2b07      	cmp	r3, #7
 800b406:	d144      	bne.n	800b492 <tcp_slowtmr+0x3ca>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800b408:	4b90      	ldr	r3, [pc, #576]	; (800b64c <tcp_slowtmr+0x584>)
 800b40a:	681a      	ldr	r2, [r3, #0]
 800b40c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b40e:	6a1b      	ldr	r3, [r3, #32]
 800b410:	1ad2      	subs	r2, r2, r3
          (pcb->keep_idle + TCP_KEEP_DUR(pcb)) / TCP_SLOW_INTERVAL) {
 800b412:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b414:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800b418:	f503 2324 	add.w	r3, r3, #671744	; 0xa4000
 800b41c:	f603 43b8 	addw	r3, r3, #3256	; 0xcb8
 800b420:	498b      	ldr	r1, [pc, #556]	; (800b650 <tcp_slowtmr+0x588>)
 800b422:	fba1 1303 	umull	r1, r3, r1, r3
 800b426:	095b      	lsrs	r3, r3, #5
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800b428:	429a      	cmp	r2, r3
 800b42a:	d90a      	bls.n	800b442 <tcp_slowtmr+0x37a>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: KEEPALIVE timeout. Aborting connection to "));
        ip_addr_debug_print_val(TCP_DEBUG, pcb->remote_ip);
        LWIP_DEBUGF(TCP_DEBUG, ("\n"));

        ++pcb_remove;
 800b42c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b430:	3301      	adds	r3, #1
 800b432:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        ++pcb_reset;
 800b436:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800b43a:	3301      	adds	r3, #1
 800b43c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800b440:	e027      	b.n	800b492 <tcp_slowtmr+0x3ca>
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 800b442:	4b82      	ldr	r3, [pc, #520]	; (800b64c <tcp_slowtmr+0x584>)
 800b444:	681a      	ldr	r2, [r3, #0]
 800b446:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b448:	6a1b      	ldr	r3, [r3, #32]
 800b44a:	1ad2      	subs	r2, r2, r3
                 (pcb->keep_idle + pcb->keep_cnt_sent * TCP_KEEP_INTVL(pcb))
 800b44c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b44e:	f8d3 1094 	ldr.w	r1, [r3, #148]	; 0x94
 800b452:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b454:	f893 309b 	ldrb.w	r3, [r3, #155]	; 0x9b
 800b458:	4618      	mov	r0, r3
 800b45a:	4b7e      	ldr	r3, [pc, #504]	; (800b654 <tcp_slowtmr+0x58c>)
 800b45c:	fb00 f303 	mul.w	r3, r0, r3
 800b460:	440b      	add	r3, r1
                 / TCP_SLOW_INTERVAL) {
 800b462:	497b      	ldr	r1, [pc, #492]	; (800b650 <tcp_slowtmr+0x588>)
 800b464:	fba1 1303 	umull	r1, r3, r1, r3
 800b468:	095b      	lsrs	r3, r3, #5
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 800b46a:	429a      	cmp	r2, r3
 800b46c:	d911      	bls.n	800b492 <tcp_slowtmr+0x3ca>
        err = tcp_keepalive(pcb);
 800b46e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800b470:	f004 fb92 	bl	800fb98 <tcp_keepalive>
 800b474:	4603      	mov	r3, r0
 800b476:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        if (err == ERR_OK) {
 800b47a:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 800b47e:	2b00      	cmp	r3, #0
 800b480:	d107      	bne.n	800b492 <tcp_slowtmr+0x3ca>
          pcb->keep_cnt_sent++;
 800b482:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b484:	f893 309b 	ldrb.w	r3, [r3, #155]	; 0x9b
 800b488:	3301      	adds	r3, #1
 800b48a:	b2da      	uxtb	r2, r3
 800b48c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b48e:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b

    /* If this PCB has queued out of sequence data, but has been
       inactive for too long, will drop the data (it will eventually
       be retransmitted). */
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL &&
 800b492:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b494:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b496:	2b00      	cmp	r3, #0
 800b498:	d011      	beq.n	800b4be <tcp_slowtmr+0x3f6>
        (tcp_ticks - pcb->tmr >= (u32_t)pcb->rto * TCP_OOSEQ_TIMEOUT)) {
 800b49a:	4b6c      	ldr	r3, [pc, #432]	; (800b64c <tcp_slowtmr+0x584>)
 800b49c:	681a      	ldr	r2, [r3, #0]
 800b49e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b4a0:	6a1b      	ldr	r3, [r3, #32]
 800b4a2:	1ad2      	subs	r2, r2, r3
 800b4a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b4a6:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 800b4aa:	4619      	mov	r1, r3
 800b4ac:	460b      	mov	r3, r1
 800b4ae:	005b      	lsls	r3, r3, #1
 800b4b0:	440b      	add	r3, r1
 800b4b2:	005b      	lsls	r3, r3, #1
    if (pcb->ooseq != NULL &&
 800b4b4:	429a      	cmp	r2, r3
 800b4b6:	d302      	bcc.n	800b4be <tcp_slowtmr+0x3f6>
      LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: dropping OOSEQ queued data\n"));
      tcp_free_ooseq(pcb);
 800b4b8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800b4ba:	f000 fe05 	bl	800c0c8 <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Check if this PCB has stayed too long in SYN-RCVD */
    if (pcb->state == SYN_RCVD) {
 800b4be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b4c0:	7d1b      	ldrb	r3, [r3, #20]
 800b4c2:	2b03      	cmp	r3, #3
 800b4c4:	d10b      	bne.n	800b4de <tcp_slowtmr+0x416>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800b4c6:	4b61      	ldr	r3, [pc, #388]	; (800b64c <tcp_slowtmr+0x584>)
 800b4c8:	681a      	ldr	r2, [r3, #0]
 800b4ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b4cc:	6a1b      	ldr	r3, [r3, #32]
 800b4ce:	1ad3      	subs	r3, r2, r3
 800b4d0:	2b28      	cmp	r3, #40	; 0x28
 800b4d2:	d904      	bls.n	800b4de <tcp_slowtmr+0x416>
          TCP_SYN_RCVD_TIMEOUT / TCP_SLOW_INTERVAL) {
        ++pcb_remove;
 800b4d4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b4d8:	3301      	adds	r3, #1
 800b4da:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in SYN-RCVD\n"));
      }
    }

    /* Check if this PCB has stayed too long in LAST-ACK */
    if (pcb->state == LAST_ACK) {
 800b4de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b4e0:	7d1b      	ldrb	r3, [r3, #20]
 800b4e2:	2b09      	cmp	r3, #9
 800b4e4:	d10b      	bne.n	800b4fe <tcp_slowtmr+0x436>
      if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 800b4e6:	4b59      	ldr	r3, [pc, #356]	; (800b64c <tcp_slowtmr+0x584>)
 800b4e8:	681a      	ldr	r2, [r3, #0]
 800b4ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b4ec:	6a1b      	ldr	r3, [r3, #32]
 800b4ee:	1ad3      	subs	r3, r2, r3
 800b4f0:	2bf0      	cmp	r3, #240	; 0xf0
 800b4f2:	d904      	bls.n	800b4fe <tcp_slowtmr+0x436>
        ++pcb_remove;
 800b4f4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b4f8:	3301      	adds	r3, #1
 800b4fa:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in LAST-ACK\n"));
      }
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 800b4fe:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b502:	2b00      	cmp	r3, #0
 800b504:	d060      	beq.n	800b5c8 <tcp_slowtmr+0x500>
      struct tcp_pcb *pcb2;
#if LWIP_CALLBACK_API
      tcp_err_fn err_fn = pcb->errf;
 800b506:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b508:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b50c:	60fb      	str	r3, [r7, #12]
#endif /* LWIP_CALLBACK_API */
      void *err_arg;
      enum tcp_state last_state;
      tcp_pcb_purge(pcb);
 800b50e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800b510:	f000 fc26 	bl	800bd60 <tcp_pcb_purge>
      /* Remove PCB from tcp_active_pcbs list. */
      if (prev != NULL) {
 800b514:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b516:	2b00      	cmp	r3, #0
 800b518:	d010      	beq.n	800b53c <tcp_slowtmr+0x474>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_active_pcbs", pcb != tcp_active_pcbs);
 800b51a:	4b4f      	ldr	r3, [pc, #316]	; (800b658 <tcp_slowtmr+0x590>)
 800b51c:	681b      	ldr	r3, [r3, #0]
 800b51e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b520:	429a      	cmp	r2, r3
 800b522:	d106      	bne.n	800b532 <tcp_slowtmr+0x46a>
 800b524:	4b4d      	ldr	r3, [pc, #308]	; (800b65c <tcp_slowtmr+0x594>)
 800b526:	f240 526d 	movw	r2, #1389	; 0x56d
 800b52a:	494d      	ldr	r1, [pc, #308]	; (800b660 <tcp_slowtmr+0x598>)
 800b52c:	484d      	ldr	r0, [pc, #308]	; (800b664 <tcp_slowtmr+0x59c>)
 800b52e:	f008 fa1b 	bl	8013968 <iprintf>
        prev->next = pcb->next;
 800b532:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b534:	68da      	ldr	r2, [r3, #12]
 800b536:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b538:	60da      	str	r2, [r3, #12]
 800b53a:	e00f      	b.n	800b55c <tcp_slowtmr+0x494>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_active_pcbs", tcp_active_pcbs == pcb);
 800b53c:	4b46      	ldr	r3, [pc, #280]	; (800b658 <tcp_slowtmr+0x590>)
 800b53e:	681b      	ldr	r3, [r3, #0]
 800b540:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b542:	429a      	cmp	r2, r3
 800b544:	d006      	beq.n	800b554 <tcp_slowtmr+0x48c>
 800b546:	4b45      	ldr	r3, [pc, #276]	; (800b65c <tcp_slowtmr+0x594>)
 800b548:	f240 5271 	movw	r2, #1393	; 0x571
 800b54c:	4946      	ldr	r1, [pc, #280]	; (800b668 <tcp_slowtmr+0x5a0>)
 800b54e:	4845      	ldr	r0, [pc, #276]	; (800b664 <tcp_slowtmr+0x59c>)
 800b550:	f008 fa0a 	bl	8013968 <iprintf>
        tcp_active_pcbs = pcb->next;
 800b554:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b556:	68db      	ldr	r3, [r3, #12]
 800b558:	4a3f      	ldr	r2, [pc, #252]	; (800b658 <tcp_slowtmr+0x590>)
 800b55a:	6013      	str	r3, [r2, #0]
      }

      if (pcb_reset) {
 800b55c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800b560:	2b00      	cmp	r3, #0
 800b562:	d013      	beq.n	800b58c <tcp_slowtmr+0x4c4>
        tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 800b564:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b566:	6d18      	ldr	r0, [r3, #80]	; 0x50
 800b568:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b56a:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 800b56c:	6afd      	ldr	r5, [r7, #44]	; 0x2c
 800b56e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b570:	3304      	adds	r3, #4
 800b572:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b574:	8ad2      	ldrh	r2, [r2, #22]
 800b576:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800b578:	8b09      	ldrh	r1, [r1, #24]
 800b57a:	9102      	str	r1, [sp, #8]
 800b57c:	9201      	str	r2, [sp, #4]
 800b57e:	9300      	str	r3, [sp, #0]
 800b580:	462b      	mov	r3, r5
 800b582:	4622      	mov	r2, r4
 800b584:	4601      	mov	r1, r0
 800b586:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800b588:	f004 fa52 	bl	800fa30 <tcp_rst>
                pcb->local_port, pcb->remote_port);
      }

      err_arg = pcb->callback_arg;
 800b58c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b58e:	691b      	ldr	r3, [r3, #16]
 800b590:	60bb      	str	r3, [r7, #8]
      last_state = pcb->state;
 800b592:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b594:	7d1b      	ldrb	r3, [r3, #20]
 800b596:	71fb      	strb	r3, [r7, #7]
      pcb2 = pcb;
 800b598:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b59a:	603b      	str	r3, [r7, #0]
      pcb = pcb->next;
 800b59c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b59e:	68db      	ldr	r3, [r3, #12]
 800b5a0:	62fb      	str	r3, [r7, #44]	; 0x2c
      tcp_free(pcb2);
 800b5a2:	6838      	ldr	r0, [r7, #0]
 800b5a4:	f7ff f9f2 	bl	800a98c <tcp_free>

      tcp_active_pcbs_changed = 0;
 800b5a8:	4b30      	ldr	r3, [pc, #192]	; (800b66c <tcp_slowtmr+0x5a4>)
 800b5aa:	2200      	movs	r2, #0
 800b5ac:	701a      	strb	r2, [r3, #0]
      TCP_EVENT_ERR(last_state, err_fn, err_arg, ERR_ABRT);
 800b5ae:	68fb      	ldr	r3, [r7, #12]
 800b5b0:	2b00      	cmp	r3, #0
 800b5b2:	d004      	beq.n	800b5be <tcp_slowtmr+0x4f6>
 800b5b4:	68fb      	ldr	r3, [r7, #12]
 800b5b6:	f06f 010c 	mvn.w	r1, #12
 800b5ba:	68b8      	ldr	r0, [r7, #8]
 800b5bc:	4798      	blx	r3
      if (tcp_active_pcbs_changed) {
 800b5be:	4b2b      	ldr	r3, [pc, #172]	; (800b66c <tcp_slowtmr+0x5a4>)
 800b5c0:	781b      	ldrb	r3, [r3, #0]
 800b5c2:	2b00      	cmp	r3, #0
 800b5c4:	d037      	beq.n	800b636 <tcp_slowtmr+0x56e>
        goto tcp_slowtmr_start;
 800b5c6:	e590      	b.n	800b0ea <tcp_slowtmr+0x22>
      }
    } else {
      /* get the 'next' element now and work with 'prev' below (in case of abort) */
      prev = pcb;
 800b5c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b5ca:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 800b5cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b5ce:	68db      	ldr	r3, [r3, #12]
 800b5d0:	62fb      	str	r3, [r7, #44]	; 0x2c

      /* We check if we should poll the connection. */
      ++prev->polltmr;
 800b5d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b5d4:	7f1b      	ldrb	r3, [r3, #28]
 800b5d6:	3301      	adds	r3, #1
 800b5d8:	b2da      	uxtb	r2, r3
 800b5da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b5dc:	771a      	strb	r2, [r3, #28]
      if (prev->polltmr >= prev->pollinterval) {
 800b5de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b5e0:	7f1a      	ldrb	r2, [r3, #28]
 800b5e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b5e4:	7f5b      	ldrb	r3, [r3, #29]
 800b5e6:	429a      	cmp	r2, r3
 800b5e8:	d325      	bcc.n	800b636 <tcp_slowtmr+0x56e>
        prev->polltmr = 0;
 800b5ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b5ec:	2200      	movs	r2, #0
 800b5ee:	771a      	strb	r2, [r3, #28]
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: polling application\n"));
        tcp_active_pcbs_changed = 0;
 800b5f0:	4b1e      	ldr	r3, [pc, #120]	; (800b66c <tcp_slowtmr+0x5a4>)
 800b5f2:	2200      	movs	r2, #0
 800b5f4:	701a      	strb	r2, [r3, #0]
        TCP_EVENT_POLL(prev, err);
 800b5f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b5f8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800b5fc:	2b00      	cmp	r3, #0
 800b5fe:	d00b      	beq.n	800b618 <tcp_slowtmr+0x550>
 800b600:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b602:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800b606:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b608:	6912      	ldr	r2, [r2, #16]
 800b60a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800b60c:	4610      	mov	r0, r2
 800b60e:	4798      	blx	r3
 800b610:	4603      	mov	r3, r0
 800b612:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 800b616:	e002      	b.n	800b61e <tcp_slowtmr+0x556>
 800b618:	2300      	movs	r3, #0
 800b61a:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        if (tcp_active_pcbs_changed) {
 800b61e:	4b13      	ldr	r3, [pc, #76]	; (800b66c <tcp_slowtmr+0x5a4>)
 800b620:	781b      	ldrb	r3, [r3, #0]
 800b622:	2b00      	cmp	r3, #0
 800b624:	d000      	beq.n	800b628 <tcp_slowtmr+0x560>
          goto tcp_slowtmr_start;
 800b626:	e560      	b.n	800b0ea <tcp_slowtmr+0x22>
        }
        /* if err == ERR_ABRT, 'prev' is already deallocated */
        if (err == ERR_OK) {
 800b628:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 800b62c:	2b00      	cmp	r3, #0
 800b62e:	d102      	bne.n	800b636 <tcp_slowtmr+0x56e>
          tcp_output(prev);
 800b630:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b632:	f003 fc35 	bl	800eea0 <tcp_output>
  while (pcb != NULL) {
 800b636:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b638:	2b00      	cmp	r3, #0
 800b63a:	f47f ad5c 	bne.w	800b0f6 <tcp_slowtmr+0x2e>
    }
  }


  /* Steps through all of the TIME-WAIT PCBs. */
  prev = NULL;
 800b63e:	2300      	movs	r3, #0
 800b640:	62bb      	str	r3, [r7, #40]	; 0x28
  pcb = tcp_tw_pcbs;
 800b642:	4b0b      	ldr	r3, [pc, #44]	; (800b670 <tcp_slowtmr+0x5a8>)
 800b644:	681b      	ldr	r3, [r3, #0]
 800b646:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (pcb != NULL) {
 800b648:	e067      	b.n	800b71a <tcp_slowtmr+0x652>
 800b64a:	bf00      	nop
 800b64c:	2000c748 	.word	0x2000c748
 800b650:	10624dd3 	.word	0x10624dd3
 800b654:	000124f8 	.word	0x000124f8
 800b658:	2000c754 	.word	0x2000c754
 800b65c:	08015440 	.word	0x08015440
 800b660:	08015878 	.word	0x08015878
 800b664:	08015484 	.word	0x08015484
 800b668:	080158a4 	.word	0x080158a4
 800b66c:	2000c75c 	.word	0x2000c75c
 800b670:	2000c758 	.word	0x2000c758
    LWIP_ASSERT("tcp_slowtmr: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 800b674:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b676:	7d1b      	ldrb	r3, [r3, #20]
 800b678:	2b0a      	cmp	r3, #10
 800b67a:	d006      	beq.n	800b68a <tcp_slowtmr+0x5c2>
 800b67c:	4b2b      	ldr	r3, [pc, #172]	; (800b72c <tcp_slowtmr+0x664>)
 800b67e:	f240 52a1 	movw	r2, #1441	; 0x5a1
 800b682:	492b      	ldr	r1, [pc, #172]	; (800b730 <tcp_slowtmr+0x668>)
 800b684:	482b      	ldr	r0, [pc, #172]	; (800b734 <tcp_slowtmr+0x66c>)
 800b686:	f008 f96f 	bl	8013968 <iprintf>
    pcb_remove = 0;
 800b68a:	2300      	movs	r3, #0
 800b68c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

    /* Check if this PCB has stayed long enough in TIME-WAIT */
    if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 800b690:	4b29      	ldr	r3, [pc, #164]	; (800b738 <tcp_slowtmr+0x670>)
 800b692:	681a      	ldr	r2, [r3, #0]
 800b694:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b696:	6a1b      	ldr	r3, [r3, #32]
 800b698:	1ad3      	subs	r3, r2, r3
 800b69a:	2bf0      	cmp	r3, #240	; 0xf0
 800b69c:	d904      	bls.n	800b6a8 <tcp_slowtmr+0x5e0>
      ++pcb_remove;
 800b69e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b6a2:	3301      	adds	r3, #1
 800b6a4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 800b6a8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b6ac:	2b00      	cmp	r3, #0
 800b6ae:	d02f      	beq.n	800b710 <tcp_slowtmr+0x648>
      struct tcp_pcb *pcb2;
      tcp_pcb_purge(pcb);
 800b6b0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800b6b2:	f000 fb55 	bl	800bd60 <tcp_pcb_purge>
      /* Remove PCB from tcp_tw_pcbs list. */
      if (prev != NULL) {
 800b6b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b6b8:	2b00      	cmp	r3, #0
 800b6ba:	d010      	beq.n	800b6de <tcp_slowtmr+0x616>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_tw_pcbs", pcb != tcp_tw_pcbs);
 800b6bc:	4b1f      	ldr	r3, [pc, #124]	; (800b73c <tcp_slowtmr+0x674>)
 800b6be:	681b      	ldr	r3, [r3, #0]
 800b6c0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b6c2:	429a      	cmp	r2, r3
 800b6c4:	d106      	bne.n	800b6d4 <tcp_slowtmr+0x60c>
 800b6c6:	4b19      	ldr	r3, [pc, #100]	; (800b72c <tcp_slowtmr+0x664>)
 800b6c8:	f240 52af 	movw	r2, #1455	; 0x5af
 800b6cc:	491c      	ldr	r1, [pc, #112]	; (800b740 <tcp_slowtmr+0x678>)
 800b6ce:	4819      	ldr	r0, [pc, #100]	; (800b734 <tcp_slowtmr+0x66c>)
 800b6d0:	f008 f94a 	bl	8013968 <iprintf>
        prev->next = pcb->next;
 800b6d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b6d6:	68da      	ldr	r2, [r3, #12]
 800b6d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b6da:	60da      	str	r2, [r3, #12]
 800b6dc:	e00f      	b.n	800b6fe <tcp_slowtmr+0x636>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_tw_pcbs", tcp_tw_pcbs == pcb);
 800b6de:	4b17      	ldr	r3, [pc, #92]	; (800b73c <tcp_slowtmr+0x674>)
 800b6e0:	681b      	ldr	r3, [r3, #0]
 800b6e2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b6e4:	429a      	cmp	r2, r3
 800b6e6:	d006      	beq.n	800b6f6 <tcp_slowtmr+0x62e>
 800b6e8:	4b10      	ldr	r3, [pc, #64]	; (800b72c <tcp_slowtmr+0x664>)
 800b6ea:	f240 52b3 	movw	r2, #1459	; 0x5b3
 800b6ee:	4915      	ldr	r1, [pc, #84]	; (800b744 <tcp_slowtmr+0x67c>)
 800b6f0:	4810      	ldr	r0, [pc, #64]	; (800b734 <tcp_slowtmr+0x66c>)
 800b6f2:	f008 f939 	bl	8013968 <iprintf>
        tcp_tw_pcbs = pcb->next;
 800b6f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b6f8:	68db      	ldr	r3, [r3, #12]
 800b6fa:	4a10      	ldr	r2, [pc, #64]	; (800b73c <tcp_slowtmr+0x674>)
 800b6fc:	6013      	str	r3, [r2, #0]
      }
      pcb2 = pcb;
 800b6fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b700:	61fb      	str	r3, [r7, #28]
      pcb = pcb->next;
 800b702:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b704:	68db      	ldr	r3, [r3, #12]
 800b706:	62fb      	str	r3, [r7, #44]	; 0x2c
      tcp_free(pcb2);
 800b708:	69f8      	ldr	r0, [r7, #28]
 800b70a:	f7ff f93f 	bl	800a98c <tcp_free>
 800b70e:	e004      	b.n	800b71a <tcp_slowtmr+0x652>
    } else {
      prev = pcb;
 800b710:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b712:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 800b714:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b716:	68db      	ldr	r3, [r3, #12]
 800b718:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (pcb != NULL) {
 800b71a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b71c:	2b00      	cmp	r3, #0
 800b71e:	d1a9      	bne.n	800b674 <tcp_slowtmr+0x5ac>
    }
  }
}
 800b720:	bf00      	nop
 800b722:	bf00      	nop
 800b724:	3730      	adds	r7, #48	; 0x30
 800b726:	46bd      	mov	sp, r7
 800b728:	bdb0      	pop	{r4, r5, r7, pc}
 800b72a:	bf00      	nop
 800b72c:	08015440 	.word	0x08015440
 800b730:	080158d0 	.word	0x080158d0
 800b734:	08015484 	.word	0x08015484
 800b738:	2000c748 	.word	0x2000c748
 800b73c:	2000c758 	.word	0x2000c758
 800b740:	08015900 	.word	0x08015900
 800b744:	08015928 	.word	0x08015928

0800b748 <tcp_fasttmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_fasttmr(void)
{
 800b748:	b580      	push	{r7, lr}
 800b74a:	b082      	sub	sp, #8
 800b74c:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;

  ++tcp_timer_ctr;
 800b74e:	4b2d      	ldr	r3, [pc, #180]	; (800b804 <tcp_fasttmr+0xbc>)
 800b750:	781b      	ldrb	r3, [r3, #0]
 800b752:	3301      	adds	r3, #1
 800b754:	b2da      	uxtb	r2, r3
 800b756:	4b2b      	ldr	r3, [pc, #172]	; (800b804 <tcp_fasttmr+0xbc>)
 800b758:	701a      	strb	r2, [r3, #0]

tcp_fasttmr_start:
  pcb = tcp_active_pcbs;
 800b75a:	4b2b      	ldr	r3, [pc, #172]	; (800b808 <tcp_fasttmr+0xc0>)
 800b75c:	681b      	ldr	r3, [r3, #0]
 800b75e:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 800b760:	e048      	b.n	800b7f4 <tcp_fasttmr+0xac>
    if (pcb->last_timer != tcp_timer_ctr) {
 800b762:	687b      	ldr	r3, [r7, #4]
 800b764:	7f9a      	ldrb	r2, [r3, #30]
 800b766:	4b27      	ldr	r3, [pc, #156]	; (800b804 <tcp_fasttmr+0xbc>)
 800b768:	781b      	ldrb	r3, [r3, #0]
 800b76a:	429a      	cmp	r2, r3
 800b76c:	d03f      	beq.n	800b7ee <tcp_fasttmr+0xa6>
      struct tcp_pcb *next;
      pcb->last_timer = tcp_timer_ctr;
 800b76e:	4b25      	ldr	r3, [pc, #148]	; (800b804 <tcp_fasttmr+0xbc>)
 800b770:	781a      	ldrb	r2, [r3, #0]
 800b772:	687b      	ldr	r3, [r7, #4]
 800b774:	779a      	strb	r2, [r3, #30]
      /* send delayed ACKs */
      if (pcb->flags & TF_ACK_DELAY) {
 800b776:	687b      	ldr	r3, [r7, #4]
 800b778:	8b5b      	ldrh	r3, [r3, #26]
 800b77a:	f003 0301 	and.w	r3, r3, #1
 800b77e:	2b00      	cmp	r3, #0
 800b780:	d010      	beq.n	800b7a4 <tcp_fasttmr+0x5c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: delayed ACK\n"));
        tcp_ack_now(pcb);
 800b782:	687b      	ldr	r3, [r7, #4]
 800b784:	8b5b      	ldrh	r3, [r3, #26]
 800b786:	f043 0302 	orr.w	r3, r3, #2
 800b78a:	b29a      	uxth	r2, r3
 800b78c:	687b      	ldr	r3, [r7, #4]
 800b78e:	835a      	strh	r2, [r3, #26]
        tcp_output(pcb);
 800b790:	6878      	ldr	r0, [r7, #4]
 800b792:	f003 fb85 	bl	800eea0 <tcp_output>
        tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800b796:	687b      	ldr	r3, [r7, #4]
 800b798:	8b5b      	ldrh	r3, [r3, #26]
 800b79a:	f023 0303 	bic.w	r3, r3, #3
 800b79e:	b29a      	uxth	r2, r3
 800b7a0:	687b      	ldr	r3, [r7, #4]
 800b7a2:	835a      	strh	r2, [r3, #26]
      }
      /* send pending FIN */
      if (pcb->flags & TF_CLOSEPEND) {
 800b7a4:	687b      	ldr	r3, [r7, #4]
 800b7a6:	8b5b      	ldrh	r3, [r3, #26]
 800b7a8:	f003 0308 	and.w	r3, r3, #8
 800b7ac:	2b00      	cmp	r3, #0
 800b7ae:	d009      	beq.n	800b7c4 <tcp_fasttmr+0x7c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: pending FIN\n"));
        tcp_clear_flags(pcb, TF_CLOSEPEND);
 800b7b0:	687b      	ldr	r3, [r7, #4]
 800b7b2:	8b5b      	ldrh	r3, [r3, #26]
 800b7b4:	f023 0308 	bic.w	r3, r3, #8
 800b7b8:	b29a      	uxth	r2, r3
 800b7ba:	687b      	ldr	r3, [r7, #4]
 800b7bc:	835a      	strh	r2, [r3, #26]
        tcp_close_shutdown_fin(pcb);
 800b7be:	6878      	ldr	r0, [r7, #4]
 800b7c0:	f7ff fa78 	bl	800acb4 <tcp_close_shutdown_fin>
      }

      next = pcb->next;
 800b7c4:	687b      	ldr	r3, [r7, #4]
 800b7c6:	68db      	ldr	r3, [r3, #12]
 800b7c8:	603b      	str	r3, [r7, #0]

      /* If there is data which was previously "refused" by upper layer */
      if (pcb->refused_data != NULL) {
 800b7ca:	687b      	ldr	r3, [r7, #4]
 800b7cc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800b7ce:	2b00      	cmp	r3, #0
 800b7d0:	d00a      	beq.n	800b7e8 <tcp_fasttmr+0xa0>
        tcp_active_pcbs_changed = 0;
 800b7d2:	4b0e      	ldr	r3, [pc, #56]	; (800b80c <tcp_fasttmr+0xc4>)
 800b7d4:	2200      	movs	r2, #0
 800b7d6:	701a      	strb	r2, [r3, #0]
        tcp_process_refused_data(pcb);
 800b7d8:	6878      	ldr	r0, [r7, #4]
 800b7da:	f000 f819 	bl	800b810 <tcp_process_refused_data>
        if (tcp_active_pcbs_changed) {
 800b7de:	4b0b      	ldr	r3, [pc, #44]	; (800b80c <tcp_fasttmr+0xc4>)
 800b7e0:	781b      	ldrb	r3, [r3, #0]
 800b7e2:	2b00      	cmp	r3, #0
 800b7e4:	d000      	beq.n	800b7e8 <tcp_fasttmr+0xa0>
          /* application callback has changed the pcb list: restart the loop */
          goto tcp_fasttmr_start;
 800b7e6:	e7b8      	b.n	800b75a <tcp_fasttmr+0x12>
        }
      }
      pcb = next;
 800b7e8:	683b      	ldr	r3, [r7, #0]
 800b7ea:	607b      	str	r3, [r7, #4]
 800b7ec:	e002      	b.n	800b7f4 <tcp_fasttmr+0xac>
    } else {
      pcb = pcb->next;
 800b7ee:	687b      	ldr	r3, [r7, #4]
 800b7f0:	68db      	ldr	r3, [r3, #12]
 800b7f2:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 800b7f4:	687b      	ldr	r3, [r7, #4]
 800b7f6:	2b00      	cmp	r3, #0
 800b7f8:	d1b3      	bne.n	800b762 <tcp_fasttmr+0x1a>
    }
  }
}
 800b7fa:	bf00      	nop
 800b7fc:	bf00      	nop
 800b7fe:	3708      	adds	r7, #8
 800b800:	46bd      	mov	sp, r7
 800b802:	bd80      	pop	{r7, pc}
 800b804:	2000c75e 	.word	0x2000c75e
 800b808:	2000c754 	.word	0x2000c754
 800b80c:	2000c75c 	.word	0x2000c75c

0800b810 <tcp_process_refused_data>:
}

/** Pass pcb->refused_data to the recv callback */
err_t
tcp_process_refused_data(struct tcp_pcb *pcb)
{
 800b810:	b590      	push	{r4, r7, lr}
 800b812:	b085      	sub	sp, #20
 800b814:	af00      	add	r7, sp, #0
 800b816:	6078      	str	r0, [r7, #4]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  struct pbuf *rest;
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

  LWIP_ERROR("tcp_process_refused_data: invalid pcb", pcb != NULL, return ERR_ARG);
 800b818:	687b      	ldr	r3, [r7, #4]
 800b81a:	2b00      	cmp	r3, #0
 800b81c:	d109      	bne.n	800b832 <tcp_process_refused_data+0x22>
 800b81e:	4b37      	ldr	r3, [pc, #220]	; (800b8fc <tcp_process_refused_data+0xec>)
 800b820:	f240 6209 	movw	r2, #1545	; 0x609
 800b824:	4936      	ldr	r1, [pc, #216]	; (800b900 <tcp_process_refused_data+0xf0>)
 800b826:	4837      	ldr	r0, [pc, #220]	; (800b904 <tcp_process_refused_data+0xf4>)
 800b828:	f008 f89e 	bl	8013968 <iprintf>
 800b82c:	f06f 030f 	mvn.w	r3, #15
 800b830:	e060      	b.n	800b8f4 <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  while (pcb->refused_data != NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
  {
    err_t err;
    u8_t refused_flags = pcb->refused_data->flags;
 800b832:	687b      	ldr	r3, [r7, #4]
 800b834:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800b836:	7b5b      	ldrb	r3, [r3, #13]
 800b838:	73bb      	strb	r3, [r7, #14]
    /* set pcb->refused_data to NULL in case the callback frees it and then
       closes the pcb */
    struct pbuf *refused_data = pcb->refused_data;
 800b83a:	687b      	ldr	r3, [r7, #4]
 800b83c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800b83e:	60bb      	str	r3, [r7, #8]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
    pbuf_split_64k(refused_data, &rest);
    pcb->refused_data = rest;
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    pcb->refused_data = NULL;
 800b840:	687b      	ldr	r3, [r7, #4]
 800b842:	2200      	movs	r2, #0
 800b844:	679a      	str	r2, [r3, #120]	; 0x78
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    /* Notify again application with data previously received. */
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: notify kept packet\n"));
    TCP_EVENT_RECV(pcb, refused_data, ERR_OK, err);
 800b846:	687b      	ldr	r3, [r7, #4]
 800b848:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800b84c:	2b00      	cmp	r3, #0
 800b84e:	d00b      	beq.n	800b868 <tcp_process_refused_data+0x58>
 800b850:	687b      	ldr	r3, [r7, #4]
 800b852:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 800b856:	687b      	ldr	r3, [r7, #4]
 800b858:	6918      	ldr	r0, [r3, #16]
 800b85a:	2300      	movs	r3, #0
 800b85c:	68ba      	ldr	r2, [r7, #8]
 800b85e:	6879      	ldr	r1, [r7, #4]
 800b860:	47a0      	blx	r4
 800b862:	4603      	mov	r3, r0
 800b864:	73fb      	strb	r3, [r7, #15]
 800b866:	e007      	b.n	800b878 <tcp_process_refused_data+0x68>
 800b868:	2300      	movs	r3, #0
 800b86a:	68ba      	ldr	r2, [r7, #8]
 800b86c:	6879      	ldr	r1, [r7, #4]
 800b86e:	2000      	movs	r0, #0
 800b870:	f000 f8a4 	bl	800b9bc <tcp_recv_null>
 800b874:	4603      	mov	r3, r0
 800b876:	73fb      	strb	r3, [r7, #15]
    if (err == ERR_OK) {
 800b878:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b87c:	2b00      	cmp	r3, #0
 800b87e:	d12a      	bne.n	800b8d6 <tcp_process_refused_data+0xc6>
      /* did refused_data include a FIN? */
      if ((refused_flags & PBUF_FLAG_TCP_FIN)
 800b880:	7bbb      	ldrb	r3, [r7, #14]
 800b882:	f003 0320 	and.w	r3, r3, #32
 800b886:	2b00      	cmp	r3, #0
 800b888:	d033      	beq.n	800b8f2 <tcp_process_refused_data+0xe2>
          && (rest == NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
         ) {
        /* correct rcv_wnd as the application won't call tcp_recved()
           for the FIN's seqno */
        if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 800b88a:	687b      	ldr	r3, [r7, #4]
 800b88c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b88e:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 800b892:	d005      	beq.n	800b8a0 <tcp_process_refused_data+0x90>
          pcb->rcv_wnd++;
 800b894:	687b      	ldr	r3, [r7, #4]
 800b896:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b898:	3301      	adds	r3, #1
 800b89a:	b29a      	uxth	r2, r3
 800b89c:	687b      	ldr	r3, [r7, #4]
 800b89e:	851a      	strh	r2, [r3, #40]	; 0x28
        }
        TCP_EVENT_CLOSED(pcb, err);
 800b8a0:	687b      	ldr	r3, [r7, #4]
 800b8a2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800b8a6:	2b00      	cmp	r3, #0
 800b8a8:	d00b      	beq.n	800b8c2 <tcp_process_refused_data+0xb2>
 800b8aa:	687b      	ldr	r3, [r7, #4]
 800b8ac:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 800b8b0:	687b      	ldr	r3, [r7, #4]
 800b8b2:	6918      	ldr	r0, [r3, #16]
 800b8b4:	2300      	movs	r3, #0
 800b8b6:	2200      	movs	r2, #0
 800b8b8:	6879      	ldr	r1, [r7, #4]
 800b8ba:	47a0      	blx	r4
 800b8bc:	4603      	mov	r3, r0
 800b8be:	73fb      	strb	r3, [r7, #15]
 800b8c0:	e001      	b.n	800b8c6 <tcp_process_refused_data+0xb6>
 800b8c2:	2300      	movs	r3, #0
 800b8c4:	73fb      	strb	r3, [r7, #15]
        if (err == ERR_ABRT) {
 800b8c6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b8ca:	f113 0f0d 	cmn.w	r3, #13
 800b8ce:	d110      	bne.n	800b8f2 <tcp_process_refused_data+0xe2>
          return ERR_ABRT;
 800b8d0:	f06f 030c 	mvn.w	r3, #12
 800b8d4:	e00e      	b.n	800b8f4 <tcp_process_refused_data+0xe4>
        }
      }
    } else if (err == ERR_ABRT) {
 800b8d6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b8da:	f113 0f0d 	cmn.w	r3, #13
 800b8de:	d102      	bne.n	800b8e6 <tcp_process_refused_data+0xd6>
      /* if err == ERR_ABRT, 'pcb' is already deallocated */
      /* Drop incoming packets because pcb is "full" (only if the incoming
         segment contains data). */
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: drop incoming packets, because pcb is \"full\"\n"));
      return ERR_ABRT;
 800b8e0:	f06f 030c 	mvn.w	r3, #12
 800b8e4:	e006      	b.n	800b8f4 <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
      if (rest != NULL) {
        pbuf_cat(refused_data, rest);
      }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
      pcb->refused_data = refused_data;
 800b8e6:	687b      	ldr	r3, [r7, #4]
 800b8e8:	68ba      	ldr	r2, [r7, #8]
 800b8ea:	679a      	str	r2, [r3, #120]	; 0x78
      return ERR_INPROGRESS;
 800b8ec:	f06f 0304 	mvn.w	r3, #4
 800b8f0:	e000      	b.n	800b8f4 <tcp_process_refused_data+0xe4>
    }
  }
  return ERR_OK;
 800b8f2:	2300      	movs	r3, #0
}
 800b8f4:	4618      	mov	r0, r3
 800b8f6:	3714      	adds	r7, #20
 800b8f8:	46bd      	mov	sp, r7
 800b8fa:	bd90      	pop	{r4, r7, pc}
 800b8fc:	08015440 	.word	0x08015440
 800b900:	08015950 	.word	0x08015950
 800b904:	08015484 	.word	0x08015484

0800b908 <tcp_segs_free>:
 *
 * @param seg tcp_seg list of TCP segments to free
 */
void
tcp_segs_free(struct tcp_seg *seg)
{
 800b908:	b580      	push	{r7, lr}
 800b90a:	b084      	sub	sp, #16
 800b90c:	af00      	add	r7, sp, #0
 800b90e:	6078      	str	r0, [r7, #4]
  while (seg != NULL) {
 800b910:	e007      	b.n	800b922 <tcp_segs_free+0x1a>
    struct tcp_seg *next = seg->next;
 800b912:	687b      	ldr	r3, [r7, #4]
 800b914:	681b      	ldr	r3, [r3, #0]
 800b916:	60fb      	str	r3, [r7, #12]
    tcp_seg_free(seg);
 800b918:	6878      	ldr	r0, [r7, #4]
 800b91a:	f000 f80a 	bl	800b932 <tcp_seg_free>
    seg = next;
 800b91e:	68fb      	ldr	r3, [r7, #12]
 800b920:	607b      	str	r3, [r7, #4]
  while (seg != NULL) {
 800b922:	687b      	ldr	r3, [r7, #4]
 800b924:	2b00      	cmp	r3, #0
 800b926:	d1f4      	bne.n	800b912 <tcp_segs_free+0xa>
  }
}
 800b928:	bf00      	nop
 800b92a:	bf00      	nop
 800b92c:	3710      	adds	r7, #16
 800b92e:	46bd      	mov	sp, r7
 800b930:	bd80      	pop	{r7, pc}

0800b932 <tcp_seg_free>:
 *
 * @param seg single tcp_seg to free
 */
void
tcp_seg_free(struct tcp_seg *seg)
{
 800b932:	b580      	push	{r7, lr}
 800b934:	b082      	sub	sp, #8
 800b936:	af00      	add	r7, sp, #0
 800b938:	6078      	str	r0, [r7, #4]
  if (seg != NULL) {
 800b93a:	687b      	ldr	r3, [r7, #4]
 800b93c:	2b00      	cmp	r3, #0
 800b93e:	d00c      	beq.n	800b95a <tcp_seg_free+0x28>
    if (seg->p != NULL) {
 800b940:	687b      	ldr	r3, [r7, #4]
 800b942:	685b      	ldr	r3, [r3, #4]
 800b944:	2b00      	cmp	r3, #0
 800b946:	d004      	beq.n	800b952 <tcp_seg_free+0x20>
      pbuf_free(seg->p);
 800b948:	687b      	ldr	r3, [r7, #4]
 800b94a:	685b      	ldr	r3, [r3, #4]
 800b94c:	4618      	mov	r0, r3
 800b94e:	f7fe fd59 	bl	800a404 <pbuf_free>
#if TCP_DEBUG
      seg->p = NULL;
#endif /* TCP_DEBUG */
    }
    memp_free(MEMP_TCP_SEG, seg);
 800b952:	6879      	ldr	r1, [r7, #4]
 800b954:	2003      	movs	r0, #3
 800b956:	f7fd feb1 	bl	80096bc <memp_free>
  }
}
 800b95a:	bf00      	nop
 800b95c:	3708      	adds	r7, #8
 800b95e:	46bd      	mov	sp, r7
 800b960:	bd80      	pop	{r7, pc}
	...

0800b964 <tcp_seg_copy>:
 * @param seg the old tcp_seg
 * @return a copy of seg
 */
struct tcp_seg *
tcp_seg_copy(struct tcp_seg *seg)
{
 800b964:	b580      	push	{r7, lr}
 800b966:	b084      	sub	sp, #16
 800b968:	af00      	add	r7, sp, #0
 800b96a:	6078      	str	r0, [r7, #4]
  struct tcp_seg *cseg;

  LWIP_ASSERT("tcp_seg_copy: invalid seg", seg != NULL);
 800b96c:	687b      	ldr	r3, [r7, #4]
 800b96e:	2b00      	cmp	r3, #0
 800b970:	d106      	bne.n	800b980 <tcp_seg_copy+0x1c>
 800b972:	4b0f      	ldr	r3, [pc, #60]	; (800b9b0 <tcp_seg_copy+0x4c>)
 800b974:	f240 6282 	movw	r2, #1666	; 0x682
 800b978:	490e      	ldr	r1, [pc, #56]	; (800b9b4 <tcp_seg_copy+0x50>)
 800b97a:	480f      	ldr	r0, [pc, #60]	; (800b9b8 <tcp_seg_copy+0x54>)
 800b97c:	f007 fff4 	bl	8013968 <iprintf>

  cseg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG);
 800b980:	2003      	movs	r0, #3
 800b982:	f7fd fe1f 	bl	80095c4 <memp_malloc>
 800b986:	60f8      	str	r0, [r7, #12]
  if (cseg == NULL) {
 800b988:	68fb      	ldr	r3, [r7, #12]
 800b98a:	2b00      	cmp	r3, #0
 800b98c:	d101      	bne.n	800b992 <tcp_seg_copy+0x2e>
    return NULL;
 800b98e:	2300      	movs	r3, #0
 800b990:	e00a      	b.n	800b9a8 <tcp_seg_copy+0x44>
  }
  SMEMCPY((u8_t *)cseg, (const u8_t *)seg, sizeof(struct tcp_seg));
 800b992:	2210      	movs	r2, #16
 800b994:	6879      	ldr	r1, [r7, #4]
 800b996:	68f8      	ldr	r0, [r7, #12]
 800b998:	f007 ff3b 	bl	8013812 <memcpy>
  pbuf_ref(cseg->p);
 800b99c:	68fb      	ldr	r3, [r7, #12]
 800b99e:	685b      	ldr	r3, [r3, #4]
 800b9a0:	4618      	mov	r0, r3
 800b9a2:	f7fe fdd5 	bl	800a550 <pbuf_ref>
  return cseg;
 800b9a6:	68fb      	ldr	r3, [r7, #12]
}
 800b9a8:	4618      	mov	r0, r3
 800b9aa:	3710      	adds	r7, #16
 800b9ac:	46bd      	mov	sp, r7
 800b9ae:	bd80      	pop	{r7, pc}
 800b9b0:	08015440 	.word	0x08015440
 800b9b4:	08015994 	.word	0x08015994
 800b9b8:	08015484 	.word	0x08015484

0800b9bc <tcp_recv_null>:
 * Default receive callback that is called if the user didn't register
 * a recv callback for the pcb.
 */
err_t
tcp_recv_null(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
 800b9bc:	b580      	push	{r7, lr}
 800b9be:	b084      	sub	sp, #16
 800b9c0:	af00      	add	r7, sp, #0
 800b9c2:	60f8      	str	r0, [r7, #12]
 800b9c4:	60b9      	str	r1, [r7, #8]
 800b9c6:	607a      	str	r2, [r7, #4]
 800b9c8:	70fb      	strb	r3, [r7, #3]
  LWIP_UNUSED_ARG(arg);

  LWIP_ERROR("tcp_recv_null: invalid pcb", pcb != NULL, return ERR_ARG);
 800b9ca:	68bb      	ldr	r3, [r7, #8]
 800b9cc:	2b00      	cmp	r3, #0
 800b9ce:	d109      	bne.n	800b9e4 <tcp_recv_null+0x28>
 800b9d0:	4b12      	ldr	r3, [pc, #72]	; (800ba1c <tcp_recv_null+0x60>)
 800b9d2:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 800b9d6:	4912      	ldr	r1, [pc, #72]	; (800ba20 <tcp_recv_null+0x64>)
 800b9d8:	4812      	ldr	r0, [pc, #72]	; (800ba24 <tcp_recv_null+0x68>)
 800b9da:	f007 ffc5 	bl	8013968 <iprintf>
 800b9de:	f06f 030f 	mvn.w	r3, #15
 800b9e2:	e016      	b.n	800ba12 <tcp_recv_null+0x56>

  if (p != NULL) {
 800b9e4:	687b      	ldr	r3, [r7, #4]
 800b9e6:	2b00      	cmp	r3, #0
 800b9e8:	d009      	beq.n	800b9fe <tcp_recv_null+0x42>
    tcp_recved(pcb, p->tot_len);
 800b9ea:	687b      	ldr	r3, [r7, #4]
 800b9ec:	891b      	ldrh	r3, [r3, #8]
 800b9ee:	4619      	mov	r1, r3
 800b9f0:	68b8      	ldr	r0, [r7, #8]
 800b9f2:	f7ff fb19 	bl	800b028 <tcp_recved>
    pbuf_free(p);
 800b9f6:	6878      	ldr	r0, [r7, #4]
 800b9f8:	f7fe fd04 	bl	800a404 <pbuf_free>
 800b9fc:	e008      	b.n	800ba10 <tcp_recv_null+0x54>
  } else if (err == ERR_OK) {
 800b9fe:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800ba02:	2b00      	cmp	r3, #0
 800ba04:	d104      	bne.n	800ba10 <tcp_recv_null+0x54>
    return tcp_close(pcb);
 800ba06:	68b8      	ldr	r0, [r7, #8]
 800ba08:	f7ff f9be 	bl	800ad88 <tcp_close>
 800ba0c:	4603      	mov	r3, r0
 800ba0e:	e000      	b.n	800ba12 <tcp_recv_null+0x56>
  }
  return ERR_OK;
 800ba10:	2300      	movs	r3, #0
}
 800ba12:	4618      	mov	r0, r3
 800ba14:	3710      	adds	r7, #16
 800ba16:	46bd      	mov	sp, r7
 800ba18:	bd80      	pop	{r7, pc}
 800ba1a:	bf00      	nop
 800ba1c:	08015440 	.word	0x08015440
 800ba20:	080159b0 	.word	0x080159b0
 800ba24:	08015484 	.word	0x08015484

0800ba28 <tcp_kill_prio>:
 *
 * @param prio minimum priority
 */
static void
tcp_kill_prio(u8_t prio)
{
 800ba28:	b580      	push	{r7, lr}
 800ba2a:	b086      	sub	sp, #24
 800ba2c:	af00      	add	r7, sp, #0
 800ba2e:	4603      	mov	r3, r0
 800ba30:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;
  u8_t mprio;

  mprio = LWIP_MIN(TCP_PRIO_MAX, prio);
 800ba32:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800ba36:	2b00      	cmp	r3, #0
 800ba38:	db01      	blt.n	800ba3e <tcp_kill_prio+0x16>
 800ba3a:	79fb      	ldrb	r3, [r7, #7]
 800ba3c:	e000      	b.n	800ba40 <tcp_kill_prio+0x18>
 800ba3e:	237f      	movs	r3, #127	; 0x7f
 800ba40:	72fb      	strb	r3, [r7, #11]

  /* We want to kill connections with a lower prio, so bail out if 
   * supplied prio is 0 - there can never be a lower prio
   */
  if (mprio == 0) {
 800ba42:	7afb      	ldrb	r3, [r7, #11]
 800ba44:	2b00      	cmp	r3, #0
 800ba46:	d034      	beq.n	800bab2 <tcp_kill_prio+0x8a>
  /* We only want kill connections with a lower prio, so decrement prio by one 
   * and start searching for oldest connection with same or lower priority than mprio.
   * We want to find the connections with the lowest possible prio, and among
   * these the one with the longest inactivity time.
   */
  mprio--;
 800ba48:	7afb      	ldrb	r3, [r7, #11]
 800ba4a:	3b01      	subs	r3, #1
 800ba4c:	72fb      	strb	r3, [r7, #11]

  inactivity = 0;
 800ba4e:	2300      	movs	r3, #0
 800ba50:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 800ba52:	2300      	movs	r3, #0
 800ba54:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800ba56:	4b19      	ldr	r3, [pc, #100]	; (800babc <tcp_kill_prio+0x94>)
 800ba58:	681b      	ldr	r3, [r3, #0]
 800ba5a:	617b      	str	r3, [r7, #20]
 800ba5c:	e01f      	b.n	800ba9e <tcp_kill_prio+0x76>
        /* lower prio is always a kill candidate */
    if ((pcb->prio < mprio) ||
 800ba5e:	697b      	ldr	r3, [r7, #20]
 800ba60:	7d5b      	ldrb	r3, [r3, #21]
 800ba62:	7afa      	ldrb	r2, [r7, #11]
 800ba64:	429a      	cmp	r2, r3
 800ba66:	d80c      	bhi.n	800ba82 <tcp_kill_prio+0x5a>
        /* longer inactivity is also a kill candidate */
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 800ba68:	697b      	ldr	r3, [r7, #20]
 800ba6a:	7d5b      	ldrb	r3, [r3, #21]
    if ((pcb->prio < mprio) ||
 800ba6c:	7afa      	ldrb	r2, [r7, #11]
 800ba6e:	429a      	cmp	r2, r3
 800ba70:	d112      	bne.n	800ba98 <tcp_kill_prio+0x70>
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 800ba72:	4b13      	ldr	r3, [pc, #76]	; (800bac0 <tcp_kill_prio+0x98>)
 800ba74:	681a      	ldr	r2, [r3, #0]
 800ba76:	697b      	ldr	r3, [r7, #20]
 800ba78:	6a1b      	ldr	r3, [r3, #32]
 800ba7a:	1ad3      	subs	r3, r2, r3
 800ba7c:	68fa      	ldr	r2, [r7, #12]
 800ba7e:	429a      	cmp	r2, r3
 800ba80:	d80a      	bhi.n	800ba98 <tcp_kill_prio+0x70>
      inactivity = tcp_ticks - pcb->tmr;
 800ba82:	4b0f      	ldr	r3, [pc, #60]	; (800bac0 <tcp_kill_prio+0x98>)
 800ba84:	681a      	ldr	r2, [r3, #0]
 800ba86:	697b      	ldr	r3, [r7, #20]
 800ba88:	6a1b      	ldr	r3, [r3, #32]
 800ba8a:	1ad3      	subs	r3, r2, r3
 800ba8c:	60fb      	str	r3, [r7, #12]
      inactive   = pcb;
 800ba8e:	697b      	ldr	r3, [r7, #20]
 800ba90:	613b      	str	r3, [r7, #16]
      mprio      = pcb->prio;
 800ba92:	697b      	ldr	r3, [r7, #20]
 800ba94:	7d5b      	ldrb	r3, [r3, #21]
 800ba96:	72fb      	strb	r3, [r7, #11]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800ba98:	697b      	ldr	r3, [r7, #20]
 800ba9a:	68db      	ldr	r3, [r3, #12]
 800ba9c:	617b      	str	r3, [r7, #20]
 800ba9e:	697b      	ldr	r3, [r7, #20]
 800baa0:	2b00      	cmp	r3, #0
 800baa2:	d1dc      	bne.n	800ba5e <tcp_kill_prio+0x36>
    }
  }
  if (inactive != NULL) {
 800baa4:	693b      	ldr	r3, [r7, #16]
 800baa6:	2b00      	cmp	r3, #0
 800baa8:	d004      	beq.n	800bab4 <tcp_kill_prio+0x8c>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_prio: killing oldest PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 800baaa:	6938      	ldr	r0, [r7, #16]
 800baac:	f7ff fa56 	bl	800af5c <tcp_abort>
 800bab0:	e000      	b.n	800bab4 <tcp_kill_prio+0x8c>
    return;
 800bab2:	bf00      	nop
  }
}
 800bab4:	3718      	adds	r7, #24
 800bab6:	46bd      	mov	sp, r7
 800bab8:	bd80      	pop	{r7, pc}
 800baba:	bf00      	nop
 800babc:	2000c754 	.word	0x2000c754
 800bac0:	2000c748 	.word	0x2000c748

0800bac4 <tcp_kill_state>:
 * Kills the oldest connection that is in specific state.
 * Called from tcp_alloc() for LAST_ACK and CLOSING if no more connections are available.
 */
static void
tcp_kill_state(enum tcp_state state)
{
 800bac4:	b580      	push	{r7, lr}
 800bac6:	b086      	sub	sp, #24
 800bac8:	af00      	add	r7, sp, #0
 800baca:	4603      	mov	r3, r0
 800bacc:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  LWIP_ASSERT("invalid state", (state == CLOSING) || (state == LAST_ACK));
 800bace:	79fb      	ldrb	r3, [r7, #7]
 800bad0:	2b08      	cmp	r3, #8
 800bad2:	d009      	beq.n	800bae8 <tcp_kill_state+0x24>
 800bad4:	79fb      	ldrb	r3, [r7, #7]
 800bad6:	2b09      	cmp	r3, #9
 800bad8:	d006      	beq.n	800bae8 <tcp_kill_state+0x24>
 800bada:	4b1a      	ldr	r3, [pc, #104]	; (800bb44 <tcp_kill_state+0x80>)
 800badc:	f240 62dd 	movw	r2, #1757	; 0x6dd
 800bae0:	4919      	ldr	r1, [pc, #100]	; (800bb48 <tcp_kill_state+0x84>)
 800bae2:	481a      	ldr	r0, [pc, #104]	; (800bb4c <tcp_kill_state+0x88>)
 800bae4:	f007 ff40 	bl	8013968 <iprintf>

  inactivity = 0;
 800bae8:	2300      	movs	r3, #0
 800baea:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 800baec:	2300      	movs	r3, #0
 800baee:	613b      	str	r3, [r7, #16]
  /* Go through the list of active pcbs and get the oldest pcb that is in state
     CLOSING/LAST_ACK. */
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800baf0:	4b17      	ldr	r3, [pc, #92]	; (800bb50 <tcp_kill_state+0x8c>)
 800baf2:	681b      	ldr	r3, [r3, #0]
 800baf4:	617b      	str	r3, [r7, #20]
 800baf6:	e017      	b.n	800bb28 <tcp_kill_state+0x64>
    if (pcb->state == state) {
 800baf8:	697b      	ldr	r3, [r7, #20]
 800bafa:	7d1b      	ldrb	r3, [r3, #20]
 800bafc:	79fa      	ldrb	r2, [r7, #7]
 800bafe:	429a      	cmp	r2, r3
 800bb00:	d10f      	bne.n	800bb22 <tcp_kill_state+0x5e>
      if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 800bb02:	4b14      	ldr	r3, [pc, #80]	; (800bb54 <tcp_kill_state+0x90>)
 800bb04:	681a      	ldr	r2, [r3, #0]
 800bb06:	697b      	ldr	r3, [r7, #20]
 800bb08:	6a1b      	ldr	r3, [r3, #32]
 800bb0a:	1ad3      	subs	r3, r2, r3
 800bb0c:	68fa      	ldr	r2, [r7, #12]
 800bb0e:	429a      	cmp	r2, r3
 800bb10:	d807      	bhi.n	800bb22 <tcp_kill_state+0x5e>
        inactivity = tcp_ticks - pcb->tmr;
 800bb12:	4b10      	ldr	r3, [pc, #64]	; (800bb54 <tcp_kill_state+0x90>)
 800bb14:	681a      	ldr	r2, [r3, #0]
 800bb16:	697b      	ldr	r3, [r7, #20]
 800bb18:	6a1b      	ldr	r3, [r3, #32]
 800bb1a:	1ad3      	subs	r3, r2, r3
 800bb1c:	60fb      	str	r3, [r7, #12]
        inactive = pcb;
 800bb1e:	697b      	ldr	r3, [r7, #20]
 800bb20:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800bb22:	697b      	ldr	r3, [r7, #20]
 800bb24:	68db      	ldr	r3, [r3, #12]
 800bb26:	617b      	str	r3, [r7, #20]
 800bb28:	697b      	ldr	r3, [r7, #20]
 800bb2a:	2b00      	cmp	r3, #0
 800bb2c:	d1e4      	bne.n	800baf8 <tcp_kill_state+0x34>
      }
    }
  }
  if (inactive != NULL) {
 800bb2e:	693b      	ldr	r3, [r7, #16]
 800bb30:	2b00      	cmp	r3, #0
 800bb32:	d003      	beq.n	800bb3c <tcp_kill_state+0x78>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_closing: killing oldest %s PCB %p (%"S32_F")\n",
                            tcp_state_str[state], (void *)inactive, inactivity));
    /* Don't send a RST, since no data is lost. */
    tcp_abandon(inactive, 0);
 800bb34:	2100      	movs	r1, #0
 800bb36:	6938      	ldr	r0, [r7, #16]
 800bb38:	f7ff f952 	bl	800ade0 <tcp_abandon>
  }
}
 800bb3c:	bf00      	nop
 800bb3e:	3718      	adds	r7, #24
 800bb40:	46bd      	mov	sp, r7
 800bb42:	bd80      	pop	{r7, pc}
 800bb44:	08015440 	.word	0x08015440
 800bb48:	080159cc 	.word	0x080159cc
 800bb4c:	08015484 	.word	0x08015484
 800bb50:	2000c754 	.word	0x2000c754
 800bb54:	2000c748 	.word	0x2000c748

0800bb58 <tcp_kill_timewait>:
 * Kills the oldest connection that is in TIME_WAIT state.
 * Called from tcp_alloc() if no more connections are available.
 */
static void
tcp_kill_timewait(void)
{
 800bb58:	b580      	push	{r7, lr}
 800bb5a:	b084      	sub	sp, #16
 800bb5c:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  inactivity = 0;
 800bb5e:	2300      	movs	r3, #0
 800bb60:	607b      	str	r3, [r7, #4]
  inactive = NULL;
 800bb62:	2300      	movs	r3, #0
 800bb64:	60bb      	str	r3, [r7, #8]
  /* Go through the list of TIME_WAIT pcbs and get the oldest pcb. */
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800bb66:	4b12      	ldr	r3, [pc, #72]	; (800bbb0 <tcp_kill_timewait+0x58>)
 800bb68:	681b      	ldr	r3, [r3, #0]
 800bb6a:	60fb      	str	r3, [r7, #12]
 800bb6c:	e012      	b.n	800bb94 <tcp_kill_timewait+0x3c>
    if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 800bb6e:	4b11      	ldr	r3, [pc, #68]	; (800bbb4 <tcp_kill_timewait+0x5c>)
 800bb70:	681a      	ldr	r2, [r3, #0]
 800bb72:	68fb      	ldr	r3, [r7, #12]
 800bb74:	6a1b      	ldr	r3, [r3, #32]
 800bb76:	1ad3      	subs	r3, r2, r3
 800bb78:	687a      	ldr	r2, [r7, #4]
 800bb7a:	429a      	cmp	r2, r3
 800bb7c:	d807      	bhi.n	800bb8e <tcp_kill_timewait+0x36>
      inactivity = tcp_ticks - pcb->tmr;
 800bb7e:	4b0d      	ldr	r3, [pc, #52]	; (800bbb4 <tcp_kill_timewait+0x5c>)
 800bb80:	681a      	ldr	r2, [r3, #0]
 800bb82:	68fb      	ldr	r3, [r7, #12]
 800bb84:	6a1b      	ldr	r3, [r3, #32]
 800bb86:	1ad3      	subs	r3, r2, r3
 800bb88:	607b      	str	r3, [r7, #4]
      inactive = pcb;
 800bb8a:	68fb      	ldr	r3, [r7, #12]
 800bb8c:	60bb      	str	r3, [r7, #8]
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800bb8e:	68fb      	ldr	r3, [r7, #12]
 800bb90:	68db      	ldr	r3, [r3, #12]
 800bb92:	60fb      	str	r3, [r7, #12]
 800bb94:	68fb      	ldr	r3, [r7, #12]
 800bb96:	2b00      	cmp	r3, #0
 800bb98:	d1e9      	bne.n	800bb6e <tcp_kill_timewait+0x16>
    }
  }
  if (inactive != NULL) {
 800bb9a:	68bb      	ldr	r3, [r7, #8]
 800bb9c:	2b00      	cmp	r3, #0
 800bb9e:	d002      	beq.n	800bba6 <tcp_kill_timewait+0x4e>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_timewait: killing oldest TIME-WAIT PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 800bba0:	68b8      	ldr	r0, [r7, #8]
 800bba2:	f7ff f9db 	bl	800af5c <tcp_abort>
  }
}
 800bba6:	bf00      	nop
 800bba8:	3710      	adds	r7, #16
 800bbaa:	46bd      	mov	sp, r7
 800bbac:	bd80      	pop	{r7, pc}
 800bbae:	bf00      	nop
 800bbb0:	2000c758 	.word	0x2000c758
 800bbb4:	2000c748 	.word	0x2000c748

0800bbb8 <tcp_handle_closepend>:
 * now send the FIN (which failed before), the pcb might be in a state that is
 * OK for us to now free it.
 */
static void
tcp_handle_closepend(void)
{
 800bbb8:	b580      	push	{r7, lr}
 800bbba:	b082      	sub	sp, #8
 800bbbc:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb = tcp_active_pcbs;
 800bbbe:	4b10      	ldr	r3, [pc, #64]	; (800bc00 <tcp_handle_closepend+0x48>)
 800bbc0:	681b      	ldr	r3, [r3, #0]
 800bbc2:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 800bbc4:	e014      	b.n	800bbf0 <tcp_handle_closepend+0x38>
    struct tcp_pcb *next = pcb->next;
 800bbc6:	687b      	ldr	r3, [r7, #4]
 800bbc8:	68db      	ldr	r3, [r3, #12]
 800bbca:	603b      	str	r3, [r7, #0]
    /* send pending FIN */
    if (pcb->flags & TF_CLOSEPEND) {
 800bbcc:	687b      	ldr	r3, [r7, #4]
 800bbce:	8b5b      	ldrh	r3, [r3, #26]
 800bbd0:	f003 0308 	and.w	r3, r3, #8
 800bbd4:	2b00      	cmp	r3, #0
 800bbd6:	d009      	beq.n	800bbec <tcp_handle_closepend+0x34>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_handle_closepend: pending FIN\n"));
      tcp_clear_flags(pcb, TF_CLOSEPEND);
 800bbd8:	687b      	ldr	r3, [r7, #4]
 800bbda:	8b5b      	ldrh	r3, [r3, #26]
 800bbdc:	f023 0308 	bic.w	r3, r3, #8
 800bbe0:	b29a      	uxth	r2, r3
 800bbe2:	687b      	ldr	r3, [r7, #4]
 800bbe4:	835a      	strh	r2, [r3, #26]
      tcp_close_shutdown_fin(pcb);
 800bbe6:	6878      	ldr	r0, [r7, #4]
 800bbe8:	f7ff f864 	bl	800acb4 <tcp_close_shutdown_fin>
    }
    pcb = next;
 800bbec:	683b      	ldr	r3, [r7, #0]
 800bbee:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 800bbf0:	687b      	ldr	r3, [r7, #4]
 800bbf2:	2b00      	cmp	r3, #0
 800bbf4:	d1e7      	bne.n	800bbc6 <tcp_handle_closepend+0xe>
  }
}
 800bbf6:	bf00      	nop
 800bbf8:	bf00      	nop
 800bbfa:	3708      	adds	r7, #8
 800bbfc:	46bd      	mov	sp, r7
 800bbfe:	bd80      	pop	{r7, pc}
 800bc00:	2000c754 	.word	0x2000c754

0800bc04 <tcp_alloc>:
 * @param prio priority for the new pcb
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_alloc(u8_t prio)
{
 800bc04:	b580      	push	{r7, lr}
 800bc06:	b084      	sub	sp, #16
 800bc08:	af00      	add	r7, sp, #0
 800bc0a:	4603      	mov	r3, r0
 800bc0c:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800bc0e:	2001      	movs	r0, #1
 800bc10:	f7fd fcd8 	bl	80095c4 <memp_malloc>
 800bc14:	60f8      	str	r0, [r7, #12]
  if (pcb == NULL) {
 800bc16:	68fb      	ldr	r3, [r7, #12]
 800bc18:	2b00      	cmp	r3, #0
 800bc1a:	d14e      	bne.n	800bcba <tcp_alloc+0xb6>
    /* Try to send FIN for all pcbs stuck in TF_CLOSEPEND first */
    tcp_handle_closepend();
 800bc1c:	f7ff ffcc 	bl	800bbb8 <tcp_handle_closepend>

    /* Try killing oldest connection in TIME-WAIT. */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest TIME-WAIT connection\n"));
    tcp_kill_timewait();
 800bc20:	f7ff ff9a 	bl	800bb58 <tcp_kill_timewait>
    /* Try to allocate a tcp_pcb again. */
    pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800bc24:	2001      	movs	r0, #1
 800bc26:	f7fd fccd 	bl	80095c4 <memp_malloc>
 800bc2a:	60f8      	str	r0, [r7, #12]
    if (pcb == NULL) {
 800bc2c:	68fb      	ldr	r3, [r7, #12]
 800bc2e:	2b00      	cmp	r3, #0
 800bc30:	d139      	bne.n	800bca6 <tcp_alloc+0xa2>
      /* Try killing oldest connection in LAST-ACK (these wouldn't go to TIME-WAIT). */
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest LAST-ACK connection\n"));
      tcp_kill_state(LAST_ACK);
 800bc32:	2009      	movs	r0, #9
 800bc34:	f7ff ff46 	bl	800bac4 <tcp_kill_state>
      /* Try to allocate a tcp_pcb again. */
      pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800bc38:	2001      	movs	r0, #1
 800bc3a:	f7fd fcc3 	bl	80095c4 <memp_malloc>
 800bc3e:	60f8      	str	r0, [r7, #12]
      if (pcb == NULL) {
 800bc40:	68fb      	ldr	r3, [r7, #12]
 800bc42:	2b00      	cmp	r3, #0
 800bc44:	d125      	bne.n	800bc92 <tcp_alloc+0x8e>
        /* Try killing oldest connection in CLOSING. */
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest CLOSING connection\n"));
        tcp_kill_state(CLOSING);
 800bc46:	2008      	movs	r0, #8
 800bc48:	f7ff ff3c 	bl	800bac4 <tcp_kill_state>
        /* Try to allocate a tcp_pcb again. */
        pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800bc4c:	2001      	movs	r0, #1
 800bc4e:	f7fd fcb9 	bl	80095c4 <memp_malloc>
 800bc52:	60f8      	str	r0, [r7, #12]
        if (pcb == NULL) {
 800bc54:	68fb      	ldr	r3, [r7, #12]
 800bc56:	2b00      	cmp	r3, #0
 800bc58:	d111      	bne.n	800bc7e <tcp_alloc+0x7a>
          /* Try killing oldest active connection with lower priority than the new one. */
          LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing oldest connection with prio lower than %d\n", prio));
          tcp_kill_prio(prio);
 800bc5a:	79fb      	ldrb	r3, [r7, #7]
 800bc5c:	4618      	mov	r0, r3
 800bc5e:	f7ff fee3 	bl	800ba28 <tcp_kill_prio>
          /* Try to allocate a tcp_pcb again. */
          pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800bc62:	2001      	movs	r0, #1
 800bc64:	f7fd fcae 	bl	80095c4 <memp_malloc>
 800bc68:	60f8      	str	r0, [r7, #12]
          if (pcb != NULL) {
 800bc6a:	68fb      	ldr	r3, [r7, #12]
 800bc6c:	2b00      	cmp	r3, #0
 800bc6e:	d006      	beq.n	800bc7e <tcp_alloc+0x7a>
            /* adjust err stats: memp_malloc failed multiple times before */
            MEMP_STATS_DEC(err, MEMP_TCP_PCB);
 800bc70:	4b36      	ldr	r3, [pc, #216]	; (800bd4c <tcp_alloc+0x148>)
 800bc72:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 800bc76:	881a      	ldrh	r2, [r3, #0]
 800bc78:	3a01      	subs	r2, #1
 800bc7a:	b292      	uxth	r2, r2
 800bc7c:	801a      	strh	r2, [r3, #0]
          }
        }
        if (pcb != NULL) {
 800bc7e:	68fb      	ldr	r3, [r7, #12]
 800bc80:	2b00      	cmp	r3, #0
 800bc82:	d006      	beq.n	800bc92 <tcp_alloc+0x8e>
          /* adjust err stats: memp_malloc failed multiple times before */
          MEMP_STATS_DEC(err, MEMP_TCP_PCB);
 800bc84:	4b31      	ldr	r3, [pc, #196]	; (800bd4c <tcp_alloc+0x148>)
 800bc86:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 800bc8a:	881a      	ldrh	r2, [r3, #0]
 800bc8c:	3a01      	subs	r2, #1
 800bc8e:	b292      	uxth	r2, r2
 800bc90:	801a      	strh	r2, [r3, #0]
        }
      }
      if (pcb != NULL) {
 800bc92:	68fb      	ldr	r3, [r7, #12]
 800bc94:	2b00      	cmp	r3, #0
 800bc96:	d006      	beq.n	800bca6 <tcp_alloc+0xa2>
        /* adjust err stats: memp_malloc failed multiple times before */
        MEMP_STATS_DEC(err, MEMP_TCP_PCB);
 800bc98:	4b2c      	ldr	r3, [pc, #176]	; (800bd4c <tcp_alloc+0x148>)
 800bc9a:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 800bc9e:	881a      	ldrh	r2, [r3, #0]
 800bca0:	3a01      	subs	r2, #1
 800bca2:	b292      	uxth	r2, r2
 800bca4:	801a      	strh	r2, [r3, #0]
      }
    }
    if (pcb != NULL) {
 800bca6:	68fb      	ldr	r3, [r7, #12]
 800bca8:	2b00      	cmp	r3, #0
 800bcaa:	d006      	beq.n	800bcba <tcp_alloc+0xb6>
      /* adjust err stats: memp_malloc failed above */
      MEMP_STATS_DEC(err, MEMP_TCP_PCB);
 800bcac:	4b27      	ldr	r3, [pc, #156]	; (800bd4c <tcp_alloc+0x148>)
 800bcae:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 800bcb2:	881a      	ldrh	r2, [r3, #0]
 800bcb4:	3a01      	subs	r2, #1
 800bcb6:	b292      	uxth	r2, r2
 800bcb8:	801a      	strh	r2, [r3, #0]
    }
  }
  if (pcb != NULL) {
 800bcba:	68fb      	ldr	r3, [r7, #12]
 800bcbc:	2b00      	cmp	r3, #0
 800bcbe:	d03f      	beq.n	800bd40 <tcp_alloc+0x13c>
    /* zero out the whole pcb, so there is no need to initialize members to zero */
    memset(pcb, 0, sizeof(struct tcp_pcb));
 800bcc0:	229c      	movs	r2, #156	; 0x9c
 800bcc2:	2100      	movs	r1, #0
 800bcc4:	68f8      	ldr	r0, [r7, #12]
 800bcc6:	f007 fdb2 	bl	801382e <memset>
    pcb->prio = prio;
 800bcca:	68fb      	ldr	r3, [r7, #12]
 800bccc:	79fa      	ldrb	r2, [r7, #7]
 800bcce:	755a      	strb	r2, [r3, #21]
    pcb->snd_buf = TCP_SND_BUF;
 800bcd0:	68fb      	ldr	r3, [r7, #12]
 800bcd2:	f44f 6286 	mov.w	r2, #1072	; 0x430
 800bcd6:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
    /* Start with a window that does not need scaling. When window scaling is
       enabled and used, the window is enlarged when both sides agree on scaling. */
    pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 800bcda:	68fb      	ldr	r3, [r7, #12]
 800bcdc:	f44f 6206 	mov.w	r2, #2144	; 0x860
 800bce0:	855a      	strh	r2, [r3, #42]	; 0x2a
 800bce2:	68fb      	ldr	r3, [r7, #12]
 800bce4:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 800bce6:	68fb      	ldr	r3, [r7, #12]
 800bce8:	851a      	strh	r2, [r3, #40]	; 0x28
    pcb->ttl = TCP_TTL;
 800bcea:	68fb      	ldr	r3, [r7, #12]
 800bcec:	22ff      	movs	r2, #255	; 0xff
 800bcee:	72da      	strb	r2, [r3, #11]
    /* As initial send MSS, we use TCP_MSS but limit it to 536.
       The send MSS is updated when an MSS option is received. */
    pcb->mss = INITIAL_MSS;
 800bcf0:	68fb      	ldr	r3, [r7, #12]
 800bcf2:	f44f 7206 	mov.w	r2, #536	; 0x218
 800bcf6:	865a      	strh	r2, [r3, #50]	; 0x32
    pcb->rto = 3000 / TCP_SLOW_INTERVAL;
 800bcf8:	68fb      	ldr	r3, [r7, #12]
 800bcfa:	2206      	movs	r2, #6
 800bcfc:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    pcb->sv = 3000 / TCP_SLOW_INTERVAL;
 800bd00:	68fb      	ldr	r3, [r7, #12]
 800bd02:	2206      	movs	r2, #6
 800bd04:	87da      	strh	r2, [r3, #62]	; 0x3e
    pcb->rtime = -1;
 800bd06:	68fb      	ldr	r3, [r7, #12]
 800bd08:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800bd0c:	861a      	strh	r2, [r3, #48]	; 0x30
    pcb->cwnd = 1;
 800bd0e:	68fb      	ldr	r3, [r7, #12]
 800bd10:	2201      	movs	r2, #1
 800bd12:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
    pcb->tmr = tcp_ticks;
 800bd16:	4b0e      	ldr	r3, [pc, #56]	; (800bd50 <tcp_alloc+0x14c>)
 800bd18:	681a      	ldr	r2, [r3, #0]
 800bd1a:	68fb      	ldr	r3, [r7, #12]
 800bd1c:	621a      	str	r2, [r3, #32]
    pcb->last_timer = tcp_timer_ctr;
 800bd1e:	4b0d      	ldr	r3, [pc, #52]	; (800bd54 <tcp_alloc+0x150>)
 800bd20:	781a      	ldrb	r2, [r3, #0]
 800bd22:	68fb      	ldr	r3, [r7, #12]
 800bd24:	779a      	strb	r2, [r3, #30]
    of using the largest advertised receive window.  We've seen complications with
    receiving TCPs that use window scaling and/or window auto-tuning where the
    initial advertised window is very small and then grows rapidly once the
    connection is established. To avoid these complications, we set ssthresh to the
    largest effective cwnd (amount of in-flight data) that the sender can have. */
    pcb->ssthresh = TCP_SND_BUF;
 800bd26:	68fb      	ldr	r3, [r7, #12]
 800bd28:	f44f 6286 	mov.w	r2, #1072	; 0x430
 800bd2c:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

#if LWIP_CALLBACK_API
    pcb->recv = tcp_recv_null;
 800bd30:	68fb      	ldr	r3, [r7, #12]
 800bd32:	4a09      	ldr	r2, [pc, #36]	; (800bd58 <tcp_alloc+0x154>)
 800bd34:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#endif /* LWIP_CALLBACK_API */

    /* Init KEEPALIVE timer */
    pcb->keep_idle  = TCP_KEEPIDLE_DEFAULT;
 800bd38:	68fb      	ldr	r3, [r7, #12]
 800bd3a:	4a08      	ldr	r2, [pc, #32]	; (800bd5c <tcp_alloc+0x158>)
 800bd3c:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
#if LWIP_TCP_KEEPALIVE
    pcb->keep_intvl = TCP_KEEPINTVL_DEFAULT;
    pcb->keep_cnt   = TCP_KEEPCNT_DEFAULT;
#endif /* LWIP_TCP_KEEPALIVE */
  }
  return pcb;
 800bd40:	68fb      	ldr	r3, [r7, #12]
}
 800bd42:	4618      	mov	r0, r3
 800bd44:	3710      	adds	r7, #16
 800bd46:	46bd      	mov	sp, r7
 800bd48:	bd80      	pop	{r7, pc}
 800bd4a:	bf00      	nop
 800bd4c:	2000c64c 	.word	0x2000c64c
 800bd50:	2000c748 	.word	0x2000c748
 800bd54:	2000c75e 	.word	0x2000c75e
 800bd58:	0800b9bd 	.word	0x0800b9bd
 800bd5c:	006ddd00 	.word	0x006ddd00

0800bd60 <tcp_pcb_purge>:
 *
 * @param pcb tcp_pcb to purge. The pcb itself is not deallocated!
 */
void
tcp_pcb_purge(struct tcp_pcb *pcb)
{
 800bd60:	b580      	push	{r7, lr}
 800bd62:	b082      	sub	sp, #8
 800bd64:	af00      	add	r7, sp, #0
 800bd66:	6078      	str	r0, [r7, #4]
  LWIP_ERROR("tcp_pcb_purge: invalid pcb", pcb != NULL, return);
 800bd68:	687b      	ldr	r3, [r7, #4]
 800bd6a:	2b00      	cmp	r3, #0
 800bd6c:	d107      	bne.n	800bd7e <tcp_pcb_purge+0x1e>
 800bd6e:	4b21      	ldr	r3, [pc, #132]	; (800bdf4 <tcp_pcb_purge+0x94>)
 800bd70:	f640 0251 	movw	r2, #2129	; 0x851
 800bd74:	4920      	ldr	r1, [pc, #128]	; (800bdf8 <tcp_pcb_purge+0x98>)
 800bd76:	4821      	ldr	r0, [pc, #132]	; (800bdfc <tcp_pcb_purge+0x9c>)
 800bd78:	f007 fdf6 	bl	8013968 <iprintf>
 800bd7c:	e037      	b.n	800bdee <tcp_pcb_purge+0x8e>

  if (pcb->state != CLOSED &&
 800bd7e:	687b      	ldr	r3, [r7, #4]
 800bd80:	7d1b      	ldrb	r3, [r3, #20]
 800bd82:	2b00      	cmp	r3, #0
 800bd84:	d033      	beq.n	800bdee <tcp_pcb_purge+0x8e>
      pcb->state != TIME_WAIT &&
 800bd86:	687b      	ldr	r3, [r7, #4]
 800bd88:	7d1b      	ldrb	r3, [r3, #20]
  if (pcb->state != CLOSED &&
 800bd8a:	2b0a      	cmp	r3, #10
 800bd8c:	d02f      	beq.n	800bdee <tcp_pcb_purge+0x8e>
      pcb->state != LISTEN) {
 800bd8e:	687b      	ldr	r3, [r7, #4]
 800bd90:	7d1b      	ldrb	r3, [r3, #20]
      pcb->state != TIME_WAIT &&
 800bd92:	2b01      	cmp	r3, #1
 800bd94:	d02b      	beq.n	800bdee <tcp_pcb_purge+0x8e>

    LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge\n"));

    tcp_backlog_accepted(pcb);

    if (pcb->refused_data != NULL) {
 800bd96:	687b      	ldr	r3, [r7, #4]
 800bd98:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800bd9a:	2b00      	cmp	r3, #0
 800bd9c:	d007      	beq.n	800bdae <tcp_pcb_purge+0x4e>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->refused_data\n"));
      pbuf_free(pcb->refused_data);
 800bd9e:	687b      	ldr	r3, [r7, #4]
 800bda0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800bda2:	4618      	mov	r0, r3
 800bda4:	f7fe fb2e 	bl	800a404 <pbuf_free>
      pcb->refused_data = NULL;
 800bda8:	687b      	ldr	r3, [r7, #4]
 800bdaa:	2200      	movs	r2, #0
 800bdac:	679a      	str	r2, [r3, #120]	; 0x78
    }
    if (pcb->unacked != NULL) {
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->unacked\n"));
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 800bdae:	687b      	ldr	r3, [r7, #4]
 800bdb0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800bdb2:	2b00      	cmp	r3, #0
 800bdb4:	d002      	beq.n	800bdbc <tcp_pcb_purge+0x5c>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->ooseq\n"));
      tcp_free_ooseq(pcb);
 800bdb6:	6878      	ldr	r0, [r7, #4]
 800bdb8:	f000 f986 	bl	800c0c8 <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Stop the retransmission timer as it will expect data on unacked
       queue if it fires */
    pcb->rtime = -1;
 800bdbc:	687b      	ldr	r3, [r7, #4]
 800bdbe:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800bdc2:	861a      	strh	r2, [r3, #48]	; 0x30

    tcp_segs_free(pcb->unsent);
 800bdc4:	687b      	ldr	r3, [r7, #4]
 800bdc6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800bdc8:	4618      	mov	r0, r3
 800bdca:	f7ff fd9d 	bl	800b908 <tcp_segs_free>
    tcp_segs_free(pcb->unacked);
 800bdce:	687b      	ldr	r3, [r7, #4]
 800bdd0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bdd2:	4618      	mov	r0, r3
 800bdd4:	f7ff fd98 	bl	800b908 <tcp_segs_free>
    pcb->unacked = pcb->unsent = NULL;
 800bdd8:	687b      	ldr	r3, [r7, #4]
 800bdda:	2200      	movs	r2, #0
 800bddc:	66da      	str	r2, [r3, #108]	; 0x6c
 800bdde:	687b      	ldr	r3, [r7, #4]
 800bde0:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 800bde2:	687b      	ldr	r3, [r7, #4]
 800bde4:	671a      	str	r2, [r3, #112]	; 0x70
#if TCP_OVERSIZE
    pcb->unsent_oversize = 0;
 800bde6:	687b      	ldr	r3, [r7, #4]
 800bde8:	2200      	movs	r2, #0
 800bdea:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* TCP_OVERSIZE */
  }
}
 800bdee:	3708      	adds	r7, #8
 800bdf0:	46bd      	mov	sp, r7
 800bdf2:	bd80      	pop	{r7, pc}
 800bdf4:	08015440 	.word	0x08015440
 800bdf8:	08015a8c 	.word	0x08015a8c
 800bdfc:	08015484 	.word	0x08015484

0800be00 <tcp_pcb_remove>:
 * @param pcblist PCB list to purge.
 * @param pcb tcp_pcb to purge. The pcb itself is NOT deallocated!
 */
void
tcp_pcb_remove(struct tcp_pcb **pcblist, struct tcp_pcb *pcb)
{
 800be00:	b580      	push	{r7, lr}
 800be02:	b084      	sub	sp, #16
 800be04:	af00      	add	r7, sp, #0
 800be06:	6078      	str	r0, [r7, #4]
 800be08:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("tcp_pcb_remove: invalid pcb", pcb != NULL);
 800be0a:	683b      	ldr	r3, [r7, #0]
 800be0c:	2b00      	cmp	r3, #0
 800be0e:	d106      	bne.n	800be1e <tcp_pcb_remove+0x1e>
 800be10:	4b3e      	ldr	r3, [pc, #248]	; (800bf0c <tcp_pcb_remove+0x10c>)
 800be12:	f640 0283 	movw	r2, #2179	; 0x883
 800be16:	493e      	ldr	r1, [pc, #248]	; (800bf10 <tcp_pcb_remove+0x110>)
 800be18:	483e      	ldr	r0, [pc, #248]	; (800bf14 <tcp_pcb_remove+0x114>)
 800be1a:	f007 fda5 	bl	8013968 <iprintf>
  LWIP_ASSERT("tcp_pcb_remove: invalid pcblist", pcblist != NULL);
 800be1e:	687b      	ldr	r3, [r7, #4]
 800be20:	2b00      	cmp	r3, #0
 800be22:	d106      	bne.n	800be32 <tcp_pcb_remove+0x32>
 800be24:	4b39      	ldr	r3, [pc, #228]	; (800bf0c <tcp_pcb_remove+0x10c>)
 800be26:	f640 0284 	movw	r2, #2180	; 0x884
 800be2a:	493b      	ldr	r1, [pc, #236]	; (800bf18 <tcp_pcb_remove+0x118>)
 800be2c:	4839      	ldr	r0, [pc, #228]	; (800bf14 <tcp_pcb_remove+0x114>)
 800be2e:	f007 fd9b 	bl	8013968 <iprintf>

  TCP_RMV(pcblist, pcb);
 800be32:	687b      	ldr	r3, [r7, #4]
 800be34:	681b      	ldr	r3, [r3, #0]
 800be36:	683a      	ldr	r2, [r7, #0]
 800be38:	429a      	cmp	r2, r3
 800be3a:	d105      	bne.n	800be48 <tcp_pcb_remove+0x48>
 800be3c:	687b      	ldr	r3, [r7, #4]
 800be3e:	681b      	ldr	r3, [r3, #0]
 800be40:	68da      	ldr	r2, [r3, #12]
 800be42:	687b      	ldr	r3, [r7, #4]
 800be44:	601a      	str	r2, [r3, #0]
 800be46:	e013      	b.n	800be70 <tcp_pcb_remove+0x70>
 800be48:	687b      	ldr	r3, [r7, #4]
 800be4a:	681b      	ldr	r3, [r3, #0]
 800be4c:	60fb      	str	r3, [r7, #12]
 800be4e:	e00c      	b.n	800be6a <tcp_pcb_remove+0x6a>
 800be50:	68fb      	ldr	r3, [r7, #12]
 800be52:	68db      	ldr	r3, [r3, #12]
 800be54:	683a      	ldr	r2, [r7, #0]
 800be56:	429a      	cmp	r2, r3
 800be58:	d104      	bne.n	800be64 <tcp_pcb_remove+0x64>
 800be5a:	683b      	ldr	r3, [r7, #0]
 800be5c:	68da      	ldr	r2, [r3, #12]
 800be5e:	68fb      	ldr	r3, [r7, #12]
 800be60:	60da      	str	r2, [r3, #12]
 800be62:	e005      	b.n	800be70 <tcp_pcb_remove+0x70>
 800be64:	68fb      	ldr	r3, [r7, #12]
 800be66:	68db      	ldr	r3, [r3, #12]
 800be68:	60fb      	str	r3, [r7, #12]
 800be6a:	68fb      	ldr	r3, [r7, #12]
 800be6c:	2b00      	cmp	r3, #0
 800be6e:	d1ef      	bne.n	800be50 <tcp_pcb_remove+0x50>
 800be70:	683b      	ldr	r3, [r7, #0]
 800be72:	2200      	movs	r2, #0
 800be74:	60da      	str	r2, [r3, #12]

  tcp_pcb_purge(pcb);
 800be76:	6838      	ldr	r0, [r7, #0]
 800be78:	f7ff ff72 	bl	800bd60 <tcp_pcb_purge>

  /* if there is an outstanding delayed ACKs, send it */
  if ((pcb->state != TIME_WAIT) &&
 800be7c:	683b      	ldr	r3, [r7, #0]
 800be7e:	7d1b      	ldrb	r3, [r3, #20]
 800be80:	2b0a      	cmp	r3, #10
 800be82:	d013      	beq.n	800beac <tcp_pcb_remove+0xac>
      (pcb->state != LISTEN) &&
 800be84:	683b      	ldr	r3, [r7, #0]
 800be86:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != TIME_WAIT) &&
 800be88:	2b01      	cmp	r3, #1
 800be8a:	d00f      	beq.n	800beac <tcp_pcb_remove+0xac>
      (pcb->flags & TF_ACK_DELAY)) {
 800be8c:	683b      	ldr	r3, [r7, #0]
 800be8e:	8b5b      	ldrh	r3, [r3, #26]
 800be90:	f003 0301 	and.w	r3, r3, #1
      (pcb->state != LISTEN) &&
 800be94:	2b00      	cmp	r3, #0
 800be96:	d009      	beq.n	800beac <tcp_pcb_remove+0xac>
    tcp_ack_now(pcb);
 800be98:	683b      	ldr	r3, [r7, #0]
 800be9a:	8b5b      	ldrh	r3, [r3, #26]
 800be9c:	f043 0302 	orr.w	r3, r3, #2
 800bea0:	b29a      	uxth	r2, r3
 800bea2:	683b      	ldr	r3, [r7, #0]
 800bea4:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 800bea6:	6838      	ldr	r0, [r7, #0]
 800bea8:	f002 fffa 	bl	800eea0 <tcp_output>
  }

  if (pcb->state != LISTEN) {
 800beac:	683b      	ldr	r3, [r7, #0]
 800beae:	7d1b      	ldrb	r3, [r3, #20]
 800beb0:	2b01      	cmp	r3, #1
 800beb2:	d020      	beq.n	800bef6 <tcp_pcb_remove+0xf6>
    LWIP_ASSERT("unsent segments leaking", pcb->unsent == NULL);
 800beb4:	683b      	ldr	r3, [r7, #0]
 800beb6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800beb8:	2b00      	cmp	r3, #0
 800beba:	d006      	beq.n	800beca <tcp_pcb_remove+0xca>
 800bebc:	4b13      	ldr	r3, [pc, #76]	; (800bf0c <tcp_pcb_remove+0x10c>)
 800bebe:	f640 0293 	movw	r2, #2195	; 0x893
 800bec2:	4916      	ldr	r1, [pc, #88]	; (800bf1c <tcp_pcb_remove+0x11c>)
 800bec4:	4813      	ldr	r0, [pc, #76]	; (800bf14 <tcp_pcb_remove+0x114>)
 800bec6:	f007 fd4f 	bl	8013968 <iprintf>
    LWIP_ASSERT("unacked segments leaking", pcb->unacked == NULL);
 800beca:	683b      	ldr	r3, [r7, #0]
 800becc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bece:	2b00      	cmp	r3, #0
 800bed0:	d006      	beq.n	800bee0 <tcp_pcb_remove+0xe0>
 800bed2:	4b0e      	ldr	r3, [pc, #56]	; (800bf0c <tcp_pcb_remove+0x10c>)
 800bed4:	f640 0294 	movw	r2, #2196	; 0x894
 800bed8:	4911      	ldr	r1, [pc, #68]	; (800bf20 <tcp_pcb_remove+0x120>)
 800beda:	480e      	ldr	r0, [pc, #56]	; (800bf14 <tcp_pcb_remove+0x114>)
 800bedc:	f007 fd44 	bl	8013968 <iprintf>
#if TCP_QUEUE_OOSEQ
    LWIP_ASSERT("ooseq segments leaking", pcb->ooseq == NULL);
 800bee0:	683b      	ldr	r3, [r7, #0]
 800bee2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800bee4:	2b00      	cmp	r3, #0
 800bee6:	d006      	beq.n	800bef6 <tcp_pcb_remove+0xf6>
 800bee8:	4b08      	ldr	r3, [pc, #32]	; (800bf0c <tcp_pcb_remove+0x10c>)
 800beea:	f640 0296 	movw	r2, #2198	; 0x896
 800beee:	490d      	ldr	r1, [pc, #52]	; (800bf24 <tcp_pcb_remove+0x124>)
 800bef0:	4808      	ldr	r0, [pc, #32]	; (800bf14 <tcp_pcb_remove+0x114>)
 800bef2:	f007 fd39 	bl	8013968 <iprintf>
#endif /* TCP_QUEUE_OOSEQ */
  }

  pcb->state = CLOSED;
 800bef6:	683b      	ldr	r3, [r7, #0]
 800bef8:	2200      	movs	r2, #0
 800befa:	751a      	strb	r2, [r3, #20]
  /* reset the local port to prevent the pcb from being 'bound' */
  pcb->local_port = 0;
 800befc:	683b      	ldr	r3, [r7, #0]
 800befe:	2200      	movs	r2, #0
 800bf00:	82da      	strh	r2, [r3, #22]

  LWIP_ASSERT("tcp_pcb_remove: tcp_pcbs_sane()", tcp_pcbs_sane());
}
 800bf02:	bf00      	nop
 800bf04:	3710      	adds	r7, #16
 800bf06:	46bd      	mov	sp, r7
 800bf08:	bd80      	pop	{r7, pc}
 800bf0a:	bf00      	nop
 800bf0c:	08015440 	.word	0x08015440
 800bf10:	08015aa8 	.word	0x08015aa8
 800bf14:	08015484 	.word	0x08015484
 800bf18:	08015ac4 	.word	0x08015ac4
 800bf1c:	08015ae4 	.word	0x08015ae4
 800bf20:	08015afc 	.word	0x08015afc
 800bf24:	08015b18 	.word	0x08015b18

0800bf28 <tcp_next_iss>:
 *
 * @return u32_t pseudo random sequence number
 */
u32_t
tcp_next_iss(struct tcp_pcb *pcb)
{
 800bf28:	b580      	push	{r7, lr}
 800bf2a:	b082      	sub	sp, #8
 800bf2c:	af00      	add	r7, sp, #0
 800bf2e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
  return LWIP_HOOK_TCP_ISN(&pcb->local_ip, pcb->local_port, &pcb->remote_ip, pcb->remote_port);
#else /* LWIP_HOOK_TCP_ISN */
  static u32_t iss = 6510;

  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
 800bf30:	687b      	ldr	r3, [r7, #4]
 800bf32:	2b00      	cmp	r3, #0
 800bf34:	d106      	bne.n	800bf44 <tcp_next_iss+0x1c>
 800bf36:	4b0a      	ldr	r3, [pc, #40]	; (800bf60 <tcp_next_iss+0x38>)
 800bf38:	f640 02af 	movw	r2, #2223	; 0x8af
 800bf3c:	4909      	ldr	r1, [pc, #36]	; (800bf64 <tcp_next_iss+0x3c>)
 800bf3e:	480a      	ldr	r0, [pc, #40]	; (800bf68 <tcp_next_iss+0x40>)
 800bf40:	f007 fd12 	bl	8013968 <iprintf>
  LWIP_UNUSED_ARG(pcb);

  iss += tcp_ticks;       /* XXX */
 800bf44:	4b09      	ldr	r3, [pc, #36]	; (800bf6c <tcp_next_iss+0x44>)
 800bf46:	681a      	ldr	r2, [r3, #0]
 800bf48:	4b09      	ldr	r3, [pc, #36]	; (800bf70 <tcp_next_iss+0x48>)
 800bf4a:	681b      	ldr	r3, [r3, #0]
 800bf4c:	4413      	add	r3, r2
 800bf4e:	4a07      	ldr	r2, [pc, #28]	; (800bf6c <tcp_next_iss+0x44>)
 800bf50:	6013      	str	r3, [r2, #0]
  return iss;
 800bf52:	4b06      	ldr	r3, [pc, #24]	; (800bf6c <tcp_next_iss+0x44>)
 800bf54:	681b      	ldr	r3, [r3, #0]
#endif /* LWIP_HOOK_TCP_ISN */
}
 800bf56:	4618      	mov	r0, r3
 800bf58:	3708      	adds	r7, #8
 800bf5a:	46bd      	mov	sp, r7
 800bf5c:	bd80      	pop	{r7, pc}
 800bf5e:	bf00      	nop
 800bf60:	08015440 	.word	0x08015440
 800bf64:	08015b30 	.word	0x08015b30
 800bf68:	08015484 	.word	0x08015484
 800bf6c:	20000028 	.word	0x20000028
 800bf70:	2000c748 	.word	0x2000c748

0800bf74 <tcp_eff_send_mss_netif>:
 * by calculating the minimum of TCP_MSS and the mtu (if set) of the target
 * netif (if not NULL).
 */
u16_t
tcp_eff_send_mss_netif(u16_t sendmss, struct netif *outif, const ip_addr_t *dest)
{
 800bf74:	b580      	push	{r7, lr}
 800bf76:	b086      	sub	sp, #24
 800bf78:	af00      	add	r7, sp, #0
 800bf7a:	4603      	mov	r3, r0
 800bf7c:	60b9      	str	r1, [r7, #8]
 800bf7e:	607a      	str	r2, [r7, #4]
 800bf80:	81fb      	strh	r3, [r7, #14]
  u16_t mss_s;
  u16_t mtu;

  LWIP_UNUSED_ARG(dest); /* in case IPv6 is disabled */

  LWIP_ASSERT("tcp_eff_send_mss_netif: invalid dst_ip", dest != NULL);
 800bf82:	687b      	ldr	r3, [r7, #4]
 800bf84:	2b00      	cmp	r3, #0
 800bf86:	d106      	bne.n	800bf96 <tcp_eff_send_mss_netif+0x22>
 800bf88:	4b14      	ldr	r3, [pc, #80]	; (800bfdc <tcp_eff_send_mss_netif+0x68>)
 800bf8a:	f640 02c5 	movw	r2, #2245	; 0x8c5
 800bf8e:	4914      	ldr	r1, [pc, #80]	; (800bfe0 <tcp_eff_send_mss_netif+0x6c>)
 800bf90:	4814      	ldr	r0, [pc, #80]	; (800bfe4 <tcp_eff_send_mss_netif+0x70>)
 800bf92:	f007 fce9 	bl	8013968 <iprintf>
  else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
  {
    if (outif == NULL) {
 800bf96:	68bb      	ldr	r3, [r7, #8]
 800bf98:	2b00      	cmp	r3, #0
 800bf9a:	d101      	bne.n	800bfa0 <tcp_eff_send_mss_netif+0x2c>
      return sendmss;
 800bf9c:	89fb      	ldrh	r3, [r7, #14]
 800bf9e:	e019      	b.n	800bfd4 <tcp_eff_send_mss_netif+0x60>
    }
    mtu = outif->mtu;
 800bfa0:	68bb      	ldr	r3, [r7, #8]
 800bfa2:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800bfa4:	82fb      	strh	r3, [r7, #22]
  }
#endif /* LWIP_IPV4 */

  if (mtu != 0) {
 800bfa6:	8afb      	ldrh	r3, [r7, #22]
 800bfa8:	2b00      	cmp	r3, #0
 800bfaa:	d012      	beq.n	800bfd2 <tcp_eff_send_mss_netif+0x5e>
    else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    {
      offset = IP_HLEN + TCP_HLEN;
 800bfac:	2328      	movs	r3, #40	; 0x28
 800bfae:	82bb      	strh	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
    mss_s = (mtu > offset) ? (u16_t)(mtu - offset) : 0;
 800bfb0:	8afa      	ldrh	r2, [r7, #22]
 800bfb2:	8abb      	ldrh	r3, [r7, #20]
 800bfb4:	429a      	cmp	r2, r3
 800bfb6:	d904      	bls.n	800bfc2 <tcp_eff_send_mss_netif+0x4e>
 800bfb8:	8afa      	ldrh	r2, [r7, #22]
 800bfba:	8abb      	ldrh	r3, [r7, #20]
 800bfbc:	1ad3      	subs	r3, r2, r3
 800bfbe:	b29b      	uxth	r3, r3
 800bfc0:	e000      	b.n	800bfc4 <tcp_eff_send_mss_netif+0x50>
 800bfc2:	2300      	movs	r3, #0
 800bfc4:	827b      	strh	r3, [r7, #18]
    /* RFC 1122, chap 4.2.2.6:
     * Eff.snd.MSS = min(SendMSS+20, MMS_S) - TCPhdrsize - IPoptionsize
     * We correct for TCP options in tcp_write(), and don't support IP options.
     */
    sendmss = LWIP_MIN(sendmss, mss_s);
 800bfc6:	8a7a      	ldrh	r2, [r7, #18]
 800bfc8:	89fb      	ldrh	r3, [r7, #14]
 800bfca:	4293      	cmp	r3, r2
 800bfcc:	bf28      	it	cs
 800bfce:	4613      	movcs	r3, r2
 800bfd0:	81fb      	strh	r3, [r7, #14]
  }
  return sendmss;
 800bfd2:	89fb      	ldrh	r3, [r7, #14]
}
 800bfd4:	4618      	mov	r0, r3
 800bfd6:	3718      	adds	r7, #24
 800bfd8:	46bd      	mov	sp, r7
 800bfda:	bd80      	pop	{r7, pc}
 800bfdc:	08015440 	.word	0x08015440
 800bfe0:	08015b4c 	.word	0x08015b4c
 800bfe4:	08015484 	.word	0x08015484

0800bfe8 <tcp_netif_ip_addr_changed_pcblist>:
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

/** Helper function for tcp_netif_ip_addr_changed() that iterates a pcb list */
static void
tcp_netif_ip_addr_changed_pcblist(const ip_addr_t *old_addr, struct tcp_pcb *pcb_list)
{
 800bfe8:	b580      	push	{r7, lr}
 800bfea:	b084      	sub	sp, #16
 800bfec:	af00      	add	r7, sp, #0
 800bfee:	6078      	str	r0, [r7, #4]
 800bff0:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;
  pcb = pcb_list;
 800bff2:	683b      	ldr	r3, [r7, #0]
 800bff4:	60fb      	str	r3, [r7, #12]

  LWIP_ASSERT("tcp_netif_ip_addr_changed_pcblist: invalid old_addr", old_addr != NULL);
 800bff6:	687b      	ldr	r3, [r7, #4]
 800bff8:	2b00      	cmp	r3, #0
 800bffa:	d119      	bne.n	800c030 <tcp_netif_ip_addr_changed_pcblist+0x48>
 800bffc:	4b10      	ldr	r3, [pc, #64]	; (800c040 <tcp_netif_ip_addr_changed_pcblist+0x58>)
 800bffe:	f44f 6210 	mov.w	r2, #2304	; 0x900
 800c002:	4910      	ldr	r1, [pc, #64]	; (800c044 <tcp_netif_ip_addr_changed_pcblist+0x5c>)
 800c004:	4810      	ldr	r0, [pc, #64]	; (800c048 <tcp_netif_ip_addr_changed_pcblist+0x60>)
 800c006:	f007 fcaf 	bl	8013968 <iprintf>

  while (pcb != NULL) {
 800c00a:	e011      	b.n	800c030 <tcp_netif_ip_addr_changed_pcblist+0x48>
    /* PCB bound to current local interface address? */
    if (ip_addr_cmp(&pcb->local_ip, old_addr)
 800c00c:	68fb      	ldr	r3, [r7, #12]
 800c00e:	681a      	ldr	r2, [r3, #0]
 800c010:	687b      	ldr	r3, [r7, #4]
 800c012:	681b      	ldr	r3, [r3, #0]
 800c014:	429a      	cmp	r2, r3
 800c016:	d108      	bne.n	800c02a <tcp_netif_ip_addr_changed_pcblist+0x42>
        /* connections to link-local addresses must persist (RFC3927 ch. 1.9) */
        && (!IP_IS_V4_VAL(pcb->local_ip) || !ip4_addr_islinklocal(ip_2_ip4(&pcb->local_ip)))
#endif /* LWIP_AUTOIP */
       ) {
      /* this connection must be aborted */
      struct tcp_pcb *next = pcb->next;
 800c018:	68fb      	ldr	r3, [r7, #12]
 800c01a:	68db      	ldr	r3, [r3, #12]
 800c01c:	60bb      	str	r3, [r7, #8]
      LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: aborting TCP pcb %p\n", (void *)pcb));
      tcp_abort(pcb);
 800c01e:	68f8      	ldr	r0, [r7, #12]
 800c020:	f7fe ff9c 	bl	800af5c <tcp_abort>
      pcb = next;
 800c024:	68bb      	ldr	r3, [r7, #8]
 800c026:	60fb      	str	r3, [r7, #12]
 800c028:	e002      	b.n	800c030 <tcp_netif_ip_addr_changed_pcblist+0x48>
    } else {
      pcb = pcb->next;
 800c02a:	68fb      	ldr	r3, [r7, #12]
 800c02c:	68db      	ldr	r3, [r3, #12]
 800c02e:	60fb      	str	r3, [r7, #12]
  while (pcb != NULL) {
 800c030:	68fb      	ldr	r3, [r7, #12]
 800c032:	2b00      	cmp	r3, #0
 800c034:	d1ea      	bne.n	800c00c <tcp_netif_ip_addr_changed_pcblist+0x24>
    }
  }
}
 800c036:	bf00      	nop
 800c038:	bf00      	nop
 800c03a:	3710      	adds	r7, #16
 800c03c:	46bd      	mov	sp, r7
 800c03e:	bd80      	pop	{r7, pc}
 800c040:	08015440 	.word	0x08015440
 800c044:	08015b74 	.word	0x08015b74
 800c048:	08015484 	.word	0x08015484

0800c04c <tcp_netif_ip_addr_changed>:
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change or NULL if netif has been removed
 */
void
tcp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 800c04c:	b580      	push	{r7, lr}
 800c04e:	b084      	sub	sp, #16
 800c050:	af00      	add	r7, sp, #0
 800c052:	6078      	str	r0, [r7, #4]
 800c054:	6039      	str	r1, [r7, #0]
  struct tcp_pcb_listen *lpcb;

  if (!ip_addr_isany(old_addr)) {
 800c056:	687b      	ldr	r3, [r7, #4]
 800c058:	2b00      	cmp	r3, #0
 800c05a:	d02a      	beq.n	800c0b2 <tcp_netif_ip_addr_changed+0x66>
 800c05c:	687b      	ldr	r3, [r7, #4]
 800c05e:	681b      	ldr	r3, [r3, #0]
 800c060:	2b00      	cmp	r3, #0
 800c062:	d026      	beq.n	800c0b2 <tcp_netif_ip_addr_changed+0x66>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_active_pcbs);
 800c064:	4b15      	ldr	r3, [pc, #84]	; (800c0bc <tcp_netif_ip_addr_changed+0x70>)
 800c066:	681b      	ldr	r3, [r3, #0]
 800c068:	4619      	mov	r1, r3
 800c06a:	6878      	ldr	r0, [r7, #4]
 800c06c:	f7ff ffbc 	bl	800bfe8 <tcp_netif_ip_addr_changed_pcblist>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_bound_pcbs);
 800c070:	4b13      	ldr	r3, [pc, #76]	; (800c0c0 <tcp_netif_ip_addr_changed+0x74>)
 800c072:	681b      	ldr	r3, [r3, #0]
 800c074:	4619      	mov	r1, r3
 800c076:	6878      	ldr	r0, [r7, #4]
 800c078:	f7ff ffb6 	bl	800bfe8 <tcp_netif_ip_addr_changed_pcblist>

    if (!ip_addr_isany(new_addr)) {
 800c07c:	683b      	ldr	r3, [r7, #0]
 800c07e:	2b00      	cmp	r3, #0
 800c080:	d017      	beq.n	800c0b2 <tcp_netif_ip_addr_changed+0x66>
 800c082:	683b      	ldr	r3, [r7, #0]
 800c084:	681b      	ldr	r3, [r3, #0]
 800c086:	2b00      	cmp	r3, #0
 800c088:	d013      	beq.n	800c0b2 <tcp_netif_ip_addr_changed+0x66>
      /* PCB bound to current local interface address? */
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800c08a:	4b0e      	ldr	r3, [pc, #56]	; (800c0c4 <tcp_netif_ip_addr_changed+0x78>)
 800c08c:	681b      	ldr	r3, [r3, #0]
 800c08e:	60fb      	str	r3, [r7, #12]
 800c090:	e00c      	b.n	800c0ac <tcp_netif_ip_addr_changed+0x60>
        /* PCB bound to current local interface address? */
        if (ip_addr_cmp(&lpcb->local_ip, old_addr)) {
 800c092:	68fb      	ldr	r3, [r7, #12]
 800c094:	681a      	ldr	r2, [r3, #0]
 800c096:	687b      	ldr	r3, [r7, #4]
 800c098:	681b      	ldr	r3, [r3, #0]
 800c09a:	429a      	cmp	r2, r3
 800c09c:	d103      	bne.n	800c0a6 <tcp_netif_ip_addr_changed+0x5a>
          /* The PCB is listening to the old ipaddr and
            * is set to listen to the new one instead */
          ip_addr_copy(lpcb->local_ip, *new_addr);
 800c09e:	683b      	ldr	r3, [r7, #0]
 800c0a0:	681a      	ldr	r2, [r3, #0]
 800c0a2:	68fb      	ldr	r3, [r7, #12]
 800c0a4:	601a      	str	r2, [r3, #0]
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800c0a6:	68fb      	ldr	r3, [r7, #12]
 800c0a8:	68db      	ldr	r3, [r3, #12]
 800c0aa:	60fb      	str	r3, [r7, #12]
 800c0ac:	68fb      	ldr	r3, [r7, #12]
 800c0ae:	2b00      	cmp	r3, #0
 800c0b0:	d1ef      	bne.n	800c092 <tcp_netif_ip_addr_changed+0x46>
        }
      }
    }
  }
}
 800c0b2:	bf00      	nop
 800c0b4:	3710      	adds	r7, #16
 800c0b6:	46bd      	mov	sp, r7
 800c0b8:	bd80      	pop	{r7, pc}
 800c0ba:	bf00      	nop
 800c0bc:	2000c754 	.word	0x2000c754
 800c0c0:	2000c74c 	.word	0x2000c74c
 800c0c4:	2000c750 	.word	0x2000c750

0800c0c8 <tcp_free_ooseq>:

#if TCP_QUEUE_OOSEQ
/* Free all ooseq pbufs (and possibly reset SACK state) */
void
tcp_free_ooseq(struct tcp_pcb *pcb)
{
 800c0c8:	b580      	push	{r7, lr}
 800c0ca:	b082      	sub	sp, #8
 800c0cc:	af00      	add	r7, sp, #0
 800c0ce:	6078      	str	r0, [r7, #4]
  if (pcb->ooseq) {
 800c0d0:	687b      	ldr	r3, [r7, #4]
 800c0d2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c0d4:	2b00      	cmp	r3, #0
 800c0d6:	d007      	beq.n	800c0e8 <tcp_free_ooseq+0x20>
    tcp_segs_free(pcb->ooseq);
 800c0d8:	687b      	ldr	r3, [r7, #4]
 800c0da:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c0dc:	4618      	mov	r0, r3
 800c0de:	f7ff fc13 	bl	800b908 <tcp_segs_free>
    pcb->ooseq = NULL;
 800c0e2:	687b      	ldr	r3, [r7, #4]
 800c0e4:	2200      	movs	r2, #0
 800c0e6:	675a      	str	r2, [r3, #116]	; 0x74
#if LWIP_TCP_SACK_OUT
    memset(pcb->rcv_sacks, 0, sizeof(pcb->rcv_sacks));
#endif /* LWIP_TCP_SACK_OUT */
  }
}
 800c0e8:	bf00      	nop
 800c0ea:	3708      	adds	r7, #8
 800c0ec:	46bd      	mov	sp, r7
 800c0ee:	bd80      	pop	{r7, pc}

0800c0f0 <tcp_input>:
 * @param p received TCP segment to process (p->payload pointing to the TCP header)
 * @param inp network interface on which this segment was received
 */
void
tcp_input(struct pbuf *p, struct netif *inp)
{
 800c0f0:	b590      	push	{r4, r7, lr}
 800c0f2:	b08d      	sub	sp, #52	; 0x34
 800c0f4:	af04      	add	r7, sp, #16
 800c0f6:	6078      	str	r0, [r7, #4]
 800c0f8:	6039      	str	r1, [r7, #0]
  u8_t hdrlen_bytes;
  err_t err;

  LWIP_UNUSED_ARG(inp);
  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("tcp_input: invalid pbuf", p != NULL);
 800c0fa:	687b      	ldr	r3, [r7, #4]
 800c0fc:	2b00      	cmp	r3, #0
 800c0fe:	d105      	bne.n	800c10c <tcp_input+0x1c>
 800c100:	4b9b      	ldr	r3, [pc, #620]	; (800c370 <tcp_input+0x280>)
 800c102:	2283      	movs	r2, #131	; 0x83
 800c104:	499b      	ldr	r1, [pc, #620]	; (800c374 <tcp_input+0x284>)
 800c106:	489c      	ldr	r0, [pc, #624]	; (800c378 <tcp_input+0x288>)
 800c108:	f007 fc2e 	bl	8013968 <iprintf>

  PERF_START;

  TCP_STATS_INC(tcp.recv);
 800c10c:	4b9b      	ldr	r3, [pc, #620]	; (800c37c <tcp_input+0x28c>)
 800c10e:	f8b3 3092 	ldrh.w	r3, [r3, #146]	; 0x92
 800c112:	3301      	adds	r3, #1
 800c114:	b29a      	uxth	r2, r3
 800c116:	4b99      	ldr	r3, [pc, #612]	; (800c37c <tcp_input+0x28c>)
 800c118:	f8a3 2092 	strh.w	r2, [r3, #146]	; 0x92
  MIB2_STATS_INC(mib2.tcpinsegs);

  tcphdr = (struct tcp_hdr *)p->payload;
 800c11c:	687b      	ldr	r3, [r7, #4]
 800c11e:	685b      	ldr	r3, [r3, #4]
 800c120:	4a97      	ldr	r2, [pc, #604]	; (800c380 <tcp_input+0x290>)
 800c122:	6013      	str	r3, [r2, #0]
#if TCP_INPUT_DEBUG
  tcp_debug_print(tcphdr);
#endif

  /* Check that TCP header fits in payload */
  if (p->len < TCP_HLEN) {
 800c124:	687b      	ldr	r3, [r7, #4]
 800c126:	895b      	ldrh	r3, [r3, #10]
 800c128:	2b13      	cmp	r3, #19
 800c12a:	d809      	bhi.n	800c140 <tcp_input+0x50>
    /* drop short packets */
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: short packet (%"U16_F" bytes) discarded\n", p->tot_len));
    TCP_STATS_INC(tcp.lenerr);
 800c12c:	4b93      	ldr	r3, [pc, #588]	; (800c37c <tcp_input+0x28c>)
 800c12e:	f8b3 309a 	ldrh.w	r3, [r3, #154]	; 0x9a
 800c132:	3301      	adds	r3, #1
 800c134:	b29a      	uxth	r2, r3
 800c136:	4b91      	ldr	r3, [pc, #580]	; (800c37c <tcp_input+0x28c>)
 800c138:	f8a3 209a 	strh.w	r2, [r3, #154]	; 0x9a
    goto dropped;
 800c13c:	f000 bc1c 	b.w	800c978 <tcp_input+0x888>
  }

  /* Don't even process incoming broadcasts/multicasts. */
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 800c140:	4b90      	ldr	r3, [pc, #576]	; (800c384 <tcp_input+0x294>)
 800c142:	695b      	ldr	r3, [r3, #20]
 800c144:	4a8f      	ldr	r2, [pc, #572]	; (800c384 <tcp_input+0x294>)
 800c146:	6812      	ldr	r2, [r2, #0]
 800c148:	4611      	mov	r1, r2
 800c14a:	4618      	mov	r0, r3
 800c14c:	f006 f92c 	bl	80123a8 <ip4_addr_isbroadcast_u32>
 800c150:	4603      	mov	r3, r0
 800c152:	2b00      	cmp	r3, #0
 800c154:	d105      	bne.n	800c162 <tcp_input+0x72>
      ip_addr_ismulticast(ip_current_dest_addr())) {
 800c156:	4b8b      	ldr	r3, [pc, #556]	; (800c384 <tcp_input+0x294>)
 800c158:	695b      	ldr	r3, [r3, #20]
 800c15a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 800c15e:	2be0      	cmp	r3, #224	; 0xe0
 800c160:	d109      	bne.n	800c176 <tcp_input+0x86>
    TCP_STATS_INC(tcp.proterr);
 800c162:	4b86      	ldr	r3, [pc, #536]	; (800c37c <tcp_input+0x28c>)
 800c164:	f8b3 30a0 	ldrh.w	r3, [r3, #160]	; 0xa0
 800c168:	3301      	adds	r3, #1
 800c16a:	b29a      	uxth	r2, r3
 800c16c:	4b83      	ldr	r3, [pc, #524]	; (800c37c <tcp_input+0x28c>)
 800c16e:	f8a3 20a0 	strh.w	r2, [r3, #160]	; 0xa0
    goto dropped;
 800c172:	f000 bc01 	b.w	800c978 <tcp_input+0x888>
    }
  }
#endif /* CHECKSUM_CHECK_TCP */

  /* sanity-check header length */
  hdrlen_bytes = TCPH_HDRLEN_BYTES(tcphdr);
 800c176:	4b82      	ldr	r3, [pc, #520]	; (800c380 <tcp_input+0x290>)
 800c178:	681b      	ldr	r3, [r3, #0]
 800c17a:	899b      	ldrh	r3, [r3, #12]
 800c17c:	b29b      	uxth	r3, r3
 800c17e:	4618      	mov	r0, r3
 800c180:	f7fc fc7e 	bl	8008a80 <lwip_htons>
 800c184:	4603      	mov	r3, r0
 800c186:	0b1b      	lsrs	r3, r3, #12
 800c188:	b29b      	uxth	r3, r3
 800c18a:	b2db      	uxtb	r3, r3
 800c18c:	009b      	lsls	r3, r3, #2
 800c18e:	74bb      	strb	r3, [r7, #18]
  if ((hdrlen_bytes < TCP_HLEN) || (hdrlen_bytes > p->tot_len)) {
 800c190:	7cbb      	ldrb	r3, [r7, #18]
 800c192:	2b13      	cmp	r3, #19
 800c194:	d905      	bls.n	800c1a2 <tcp_input+0xb2>
 800c196:	7cbb      	ldrb	r3, [r7, #18]
 800c198:	b29a      	uxth	r2, r3
 800c19a:	687b      	ldr	r3, [r7, #4]
 800c19c:	891b      	ldrh	r3, [r3, #8]
 800c19e:	429a      	cmp	r2, r3
 800c1a0:	d908      	bls.n	800c1b4 <tcp_input+0xc4>
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: invalid header length (%"U16_F")\n", (u16_t)hdrlen_bytes));
    TCP_STATS_INC(tcp.lenerr);
 800c1a2:	4b76      	ldr	r3, [pc, #472]	; (800c37c <tcp_input+0x28c>)
 800c1a4:	f8b3 309a 	ldrh.w	r3, [r3, #154]	; 0x9a
 800c1a8:	3301      	adds	r3, #1
 800c1aa:	b29a      	uxth	r2, r3
 800c1ac:	4b73      	ldr	r3, [pc, #460]	; (800c37c <tcp_input+0x28c>)
 800c1ae:	f8a3 209a 	strh.w	r2, [r3, #154]	; 0x9a
    goto dropped;
 800c1b2:	e3e1      	b.n	800c978 <tcp_input+0x888>
  }

  /* Move the payload pointer in the pbuf so that it points to the
     TCP data instead of the TCP header. */
  tcphdr_optlen = (u16_t)(hdrlen_bytes - TCP_HLEN);
 800c1b4:	7cbb      	ldrb	r3, [r7, #18]
 800c1b6:	b29b      	uxth	r3, r3
 800c1b8:	3b14      	subs	r3, #20
 800c1ba:	b29a      	uxth	r2, r3
 800c1bc:	4b72      	ldr	r3, [pc, #456]	; (800c388 <tcp_input+0x298>)
 800c1be:	801a      	strh	r2, [r3, #0]
  tcphdr_opt2 = NULL;
 800c1c0:	4b72      	ldr	r3, [pc, #456]	; (800c38c <tcp_input+0x29c>)
 800c1c2:	2200      	movs	r2, #0
 800c1c4:	601a      	str	r2, [r3, #0]
  if (p->len >= hdrlen_bytes) {
 800c1c6:	687b      	ldr	r3, [r7, #4]
 800c1c8:	895a      	ldrh	r2, [r3, #10]
 800c1ca:	7cbb      	ldrb	r3, [r7, #18]
 800c1cc:	b29b      	uxth	r3, r3
 800c1ce:	429a      	cmp	r2, r3
 800c1d0:	d309      	bcc.n	800c1e6 <tcp_input+0xf6>
    /* all options are in the first pbuf */
    tcphdr_opt1len = tcphdr_optlen;
 800c1d2:	4b6d      	ldr	r3, [pc, #436]	; (800c388 <tcp_input+0x298>)
 800c1d4:	881a      	ldrh	r2, [r3, #0]
 800c1d6:	4b6e      	ldr	r3, [pc, #440]	; (800c390 <tcp_input+0x2a0>)
 800c1d8:	801a      	strh	r2, [r3, #0]
    pbuf_remove_header(p, hdrlen_bytes); /* cannot fail */
 800c1da:	7cbb      	ldrb	r3, [r7, #18]
 800c1dc:	4619      	mov	r1, r3
 800c1de:	6878      	ldr	r0, [r7, #4]
 800c1e0:	f7fe f88a 	bl	800a2f8 <pbuf_remove_header>
 800c1e4:	e056      	b.n	800c294 <tcp_input+0x1a4>
  } else {
    u16_t opt2len;
    /* TCP header fits into first pbuf, options don't - data is in the next pbuf */
    /* there must be a next pbuf, due to hdrlen_bytes sanity check above */
    LWIP_ASSERT("p->next != NULL", p->next != NULL);
 800c1e6:	687b      	ldr	r3, [r7, #4]
 800c1e8:	681b      	ldr	r3, [r3, #0]
 800c1ea:	2b00      	cmp	r3, #0
 800c1ec:	d105      	bne.n	800c1fa <tcp_input+0x10a>
 800c1ee:	4b60      	ldr	r3, [pc, #384]	; (800c370 <tcp_input+0x280>)
 800c1f0:	22c2      	movs	r2, #194	; 0xc2
 800c1f2:	4968      	ldr	r1, [pc, #416]	; (800c394 <tcp_input+0x2a4>)
 800c1f4:	4860      	ldr	r0, [pc, #384]	; (800c378 <tcp_input+0x288>)
 800c1f6:	f007 fbb7 	bl	8013968 <iprintf>

    /* advance over the TCP header (cannot fail) */
    pbuf_remove_header(p, TCP_HLEN);
 800c1fa:	2114      	movs	r1, #20
 800c1fc:	6878      	ldr	r0, [r7, #4]
 800c1fe:	f7fe f87b 	bl	800a2f8 <pbuf_remove_header>

    /* determine how long the first and second parts of the options are */
    tcphdr_opt1len = p->len;
 800c202:	687b      	ldr	r3, [r7, #4]
 800c204:	895a      	ldrh	r2, [r3, #10]
 800c206:	4b62      	ldr	r3, [pc, #392]	; (800c390 <tcp_input+0x2a0>)
 800c208:	801a      	strh	r2, [r3, #0]
    opt2len = (u16_t)(tcphdr_optlen - tcphdr_opt1len);
 800c20a:	4b5f      	ldr	r3, [pc, #380]	; (800c388 <tcp_input+0x298>)
 800c20c:	881a      	ldrh	r2, [r3, #0]
 800c20e:	4b60      	ldr	r3, [pc, #384]	; (800c390 <tcp_input+0x2a0>)
 800c210:	881b      	ldrh	r3, [r3, #0]
 800c212:	1ad3      	subs	r3, r2, r3
 800c214:	823b      	strh	r3, [r7, #16]

    /* options continue in the next pbuf: set p to zero length and hide the
        options in the next pbuf (adjusting p->tot_len) */
    pbuf_remove_header(p, tcphdr_opt1len);
 800c216:	4b5e      	ldr	r3, [pc, #376]	; (800c390 <tcp_input+0x2a0>)
 800c218:	881b      	ldrh	r3, [r3, #0]
 800c21a:	4619      	mov	r1, r3
 800c21c:	6878      	ldr	r0, [r7, #4]
 800c21e:	f7fe f86b 	bl	800a2f8 <pbuf_remove_header>

    /* check that the options fit in the second pbuf */
    if (opt2len > p->next->len) {
 800c222:	687b      	ldr	r3, [r7, #4]
 800c224:	681b      	ldr	r3, [r3, #0]
 800c226:	895b      	ldrh	r3, [r3, #10]
 800c228:	8a3a      	ldrh	r2, [r7, #16]
 800c22a:	429a      	cmp	r2, r3
 800c22c:	d908      	bls.n	800c240 <tcp_input+0x150>
      /* drop short packets */
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: options overflow second pbuf (%"U16_F" bytes)\n", p->next->len));
      TCP_STATS_INC(tcp.lenerr);
 800c22e:	4b53      	ldr	r3, [pc, #332]	; (800c37c <tcp_input+0x28c>)
 800c230:	f8b3 309a 	ldrh.w	r3, [r3, #154]	; 0x9a
 800c234:	3301      	adds	r3, #1
 800c236:	b29a      	uxth	r2, r3
 800c238:	4b50      	ldr	r3, [pc, #320]	; (800c37c <tcp_input+0x28c>)
 800c23a:	f8a3 209a 	strh.w	r2, [r3, #154]	; 0x9a
      goto dropped;
 800c23e:	e39b      	b.n	800c978 <tcp_input+0x888>
    }

    /* remember the pointer to the second part of the options */
    tcphdr_opt2 = (u8_t *)p->next->payload;
 800c240:	687b      	ldr	r3, [r7, #4]
 800c242:	681b      	ldr	r3, [r3, #0]
 800c244:	685b      	ldr	r3, [r3, #4]
 800c246:	4a51      	ldr	r2, [pc, #324]	; (800c38c <tcp_input+0x29c>)
 800c248:	6013      	str	r3, [r2, #0]

    /* advance p->next to point after the options, and manually
        adjust p->tot_len to keep it consistent with the changed p->next */
    pbuf_remove_header(p->next, opt2len);
 800c24a:	687b      	ldr	r3, [r7, #4]
 800c24c:	681b      	ldr	r3, [r3, #0]
 800c24e:	8a3a      	ldrh	r2, [r7, #16]
 800c250:	4611      	mov	r1, r2
 800c252:	4618      	mov	r0, r3
 800c254:	f7fe f850 	bl	800a2f8 <pbuf_remove_header>
    p->tot_len = (u16_t)(p->tot_len - opt2len);
 800c258:	687b      	ldr	r3, [r7, #4]
 800c25a:	891a      	ldrh	r2, [r3, #8]
 800c25c:	8a3b      	ldrh	r3, [r7, #16]
 800c25e:	1ad3      	subs	r3, r2, r3
 800c260:	b29a      	uxth	r2, r3
 800c262:	687b      	ldr	r3, [r7, #4]
 800c264:	811a      	strh	r2, [r3, #8]

    LWIP_ASSERT("p->len == 0", p->len == 0);
 800c266:	687b      	ldr	r3, [r7, #4]
 800c268:	895b      	ldrh	r3, [r3, #10]
 800c26a:	2b00      	cmp	r3, #0
 800c26c:	d005      	beq.n	800c27a <tcp_input+0x18a>
 800c26e:	4b40      	ldr	r3, [pc, #256]	; (800c370 <tcp_input+0x280>)
 800c270:	22df      	movs	r2, #223	; 0xdf
 800c272:	4949      	ldr	r1, [pc, #292]	; (800c398 <tcp_input+0x2a8>)
 800c274:	4840      	ldr	r0, [pc, #256]	; (800c378 <tcp_input+0x288>)
 800c276:	f007 fb77 	bl	8013968 <iprintf>
    LWIP_ASSERT("p->tot_len == p->next->tot_len", p->tot_len == p->next->tot_len);
 800c27a:	687b      	ldr	r3, [r7, #4]
 800c27c:	891a      	ldrh	r2, [r3, #8]
 800c27e:	687b      	ldr	r3, [r7, #4]
 800c280:	681b      	ldr	r3, [r3, #0]
 800c282:	891b      	ldrh	r3, [r3, #8]
 800c284:	429a      	cmp	r2, r3
 800c286:	d005      	beq.n	800c294 <tcp_input+0x1a4>
 800c288:	4b39      	ldr	r3, [pc, #228]	; (800c370 <tcp_input+0x280>)
 800c28a:	22e0      	movs	r2, #224	; 0xe0
 800c28c:	4943      	ldr	r1, [pc, #268]	; (800c39c <tcp_input+0x2ac>)
 800c28e:	483a      	ldr	r0, [pc, #232]	; (800c378 <tcp_input+0x288>)
 800c290:	f007 fb6a 	bl	8013968 <iprintf>
  }

  /* Convert fields in TCP header to host byte order. */
  tcphdr->src = lwip_ntohs(tcphdr->src);
 800c294:	4b3a      	ldr	r3, [pc, #232]	; (800c380 <tcp_input+0x290>)
 800c296:	681b      	ldr	r3, [r3, #0]
 800c298:	881b      	ldrh	r3, [r3, #0]
 800c29a:	b29b      	uxth	r3, r3
 800c29c:	4a38      	ldr	r2, [pc, #224]	; (800c380 <tcp_input+0x290>)
 800c29e:	6814      	ldr	r4, [r2, #0]
 800c2a0:	4618      	mov	r0, r3
 800c2a2:	f7fc fbed 	bl	8008a80 <lwip_htons>
 800c2a6:	4603      	mov	r3, r0
 800c2a8:	8023      	strh	r3, [r4, #0]
  tcphdr->dest = lwip_ntohs(tcphdr->dest);
 800c2aa:	4b35      	ldr	r3, [pc, #212]	; (800c380 <tcp_input+0x290>)
 800c2ac:	681b      	ldr	r3, [r3, #0]
 800c2ae:	885b      	ldrh	r3, [r3, #2]
 800c2b0:	b29b      	uxth	r3, r3
 800c2b2:	4a33      	ldr	r2, [pc, #204]	; (800c380 <tcp_input+0x290>)
 800c2b4:	6814      	ldr	r4, [r2, #0]
 800c2b6:	4618      	mov	r0, r3
 800c2b8:	f7fc fbe2 	bl	8008a80 <lwip_htons>
 800c2bc:	4603      	mov	r3, r0
 800c2be:	8063      	strh	r3, [r4, #2]
  seqno = tcphdr->seqno = lwip_ntohl(tcphdr->seqno);
 800c2c0:	4b2f      	ldr	r3, [pc, #188]	; (800c380 <tcp_input+0x290>)
 800c2c2:	681b      	ldr	r3, [r3, #0]
 800c2c4:	685b      	ldr	r3, [r3, #4]
 800c2c6:	4a2e      	ldr	r2, [pc, #184]	; (800c380 <tcp_input+0x290>)
 800c2c8:	6814      	ldr	r4, [r2, #0]
 800c2ca:	4618      	mov	r0, r3
 800c2cc:	f7fc fbed 	bl	8008aaa <lwip_htonl>
 800c2d0:	4603      	mov	r3, r0
 800c2d2:	6063      	str	r3, [r4, #4]
 800c2d4:	6863      	ldr	r3, [r4, #4]
 800c2d6:	4a32      	ldr	r2, [pc, #200]	; (800c3a0 <tcp_input+0x2b0>)
 800c2d8:	6013      	str	r3, [r2, #0]
  ackno = tcphdr->ackno = lwip_ntohl(tcphdr->ackno);
 800c2da:	4b29      	ldr	r3, [pc, #164]	; (800c380 <tcp_input+0x290>)
 800c2dc:	681b      	ldr	r3, [r3, #0]
 800c2de:	689b      	ldr	r3, [r3, #8]
 800c2e0:	4a27      	ldr	r2, [pc, #156]	; (800c380 <tcp_input+0x290>)
 800c2e2:	6814      	ldr	r4, [r2, #0]
 800c2e4:	4618      	mov	r0, r3
 800c2e6:	f7fc fbe0 	bl	8008aaa <lwip_htonl>
 800c2ea:	4603      	mov	r3, r0
 800c2ec:	60a3      	str	r3, [r4, #8]
 800c2ee:	68a3      	ldr	r3, [r4, #8]
 800c2f0:	4a2c      	ldr	r2, [pc, #176]	; (800c3a4 <tcp_input+0x2b4>)
 800c2f2:	6013      	str	r3, [r2, #0]
  tcphdr->wnd = lwip_ntohs(tcphdr->wnd);
 800c2f4:	4b22      	ldr	r3, [pc, #136]	; (800c380 <tcp_input+0x290>)
 800c2f6:	681b      	ldr	r3, [r3, #0]
 800c2f8:	89db      	ldrh	r3, [r3, #14]
 800c2fa:	b29b      	uxth	r3, r3
 800c2fc:	4a20      	ldr	r2, [pc, #128]	; (800c380 <tcp_input+0x290>)
 800c2fe:	6814      	ldr	r4, [r2, #0]
 800c300:	4618      	mov	r0, r3
 800c302:	f7fc fbbd 	bl	8008a80 <lwip_htons>
 800c306:	4603      	mov	r3, r0
 800c308:	81e3      	strh	r3, [r4, #14]

  flags = TCPH_FLAGS(tcphdr);
 800c30a:	4b1d      	ldr	r3, [pc, #116]	; (800c380 <tcp_input+0x290>)
 800c30c:	681b      	ldr	r3, [r3, #0]
 800c30e:	899b      	ldrh	r3, [r3, #12]
 800c310:	b29b      	uxth	r3, r3
 800c312:	4618      	mov	r0, r3
 800c314:	f7fc fbb4 	bl	8008a80 <lwip_htons>
 800c318:	4603      	mov	r3, r0
 800c31a:	b2db      	uxtb	r3, r3
 800c31c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800c320:	b2da      	uxtb	r2, r3
 800c322:	4b21      	ldr	r3, [pc, #132]	; (800c3a8 <tcp_input+0x2b8>)
 800c324:	701a      	strb	r2, [r3, #0]
  tcplen = p->tot_len;
 800c326:	687b      	ldr	r3, [r7, #4]
 800c328:	891a      	ldrh	r2, [r3, #8]
 800c32a:	4b20      	ldr	r3, [pc, #128]	; (800c3ac <tcp_input+0x2bc>)
 800c32c:	801a      	strh	r2, [r3, #0]
  if (flags & (TCP_FIN | TCP_SYN)) {
 800c32e:	4b1e      	ldr	r3, [pc, #120]	; (800c3a8 <tcp_input+0x2b8>)
 800c330:	781b      	ldrb	r3, [r3, #0]
 800c332:	f003 0303 	and.w	r3, r3, #3
 800c336:	2b00      	cmp	r3, #0
 800c338:	d014      	beq.n	800c364 <tcp_input+0x274>
    tcplen++;
 800c33a:	4b1c      	ldr	r3, [pc, #112]	; (800c3ac <tcp_input+0x2bc>)
 800c33c:	881b      	ldrh	r3, [r3, #0]
 800c33e:	3301      	adds	r3, #1
 800c340:	b29a      	uxth	r2, r3
 800c342:	4b1a      	ldr	r3, [pc, #104]	; (800c3ac <tcp_input+0x2bc>)
 800c344:	801a      	strh	r2, [r3, #0]
    if (tcplen < p->tot_len) {
 800c346:	687b      	ldr	r3, [r7, #4]
 800c348:	891a      	ldrh	r2, [r3, #8]
 800c34a:	4b18      	ldr	r3, [pc, #96]	; (800c3ac <tcp_input+0x2bc>)
 800c34c:	881b      	ldrh	r3, [r3, #0]
 800c34e:	429a      	cmp	r2, r3
 800c350:	d908      	bls.n	800c364 <tcp_input+0x274>
      /* u16_t overflow, cannot handle this */
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: length u16_t overflow, cannot handle this\n"));
      TCP_STATS_INC(tcp.lenerr);
 800c352:	4b0a      	ldr	r3, [pc, #40]	; (800c37c <tcp_input+0x28c>)
 800c354:	f8b3 309a 	ldrh.w	r3, [r3, #154]	; 0x9a
 800c358:	3301      	adds	r3, #1
 800c35a:	b29a      	uxth	r2, r3
 800c35c:	4b07      	ldr	r3, [pc, #28]	; (800c37c <tcp_input+0x28c>)
 800c35e:	f8a3 209a 	strh.w	r2, [r3, #154]	; 0x9a
      goto dropped;
 800c362:	e309      	b.n	800c978 <tcp_input+0x888>
    }
  }

  /* Demultiplex an incoming segment. First, we check if it is destined
     for an active connection. */
  prev = NULL;
 800c364:	2300      	movs	r3, #0
 800c366:	61bb      	str	r3, [r7, #24]

  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800c368:	4b11      	ldr	r3, [pc, #68]	; (800c3b0 <tcp_input+0x2c0>)
 800c36a:	681b      	ldr	r3, [r3, #0]
 800c36c:	61fb      	str	r3, [r7, #28]
 800c36e:	e0a1      	b.n	800c4b4 <tcp_input+0x3c4>
 800c370:	08015ba8 	.word	0x08015ba8
 800c374:	08015bdc 	.word	0x08015bdc
 800c378:	08015bf4 	.word	0x08015bf4
 800c37c:	2000c64c 	.word	0x2000c64c
 800c380:	2000c770 	.word	0x2000c770
 800c384:	20008e5c 	.word	0x20008e5c
 800c388:	2000c774 	.word	0x2000c774
 800c38c:	2000c778 	.word	0x2000c778
 800c390:	2000c776 	.word	0x2000c776
 800c394:	08015c1c 	.word	0x08015c1c
 800c398:	08015c2c 	.word	0x08015c2c
 800c39c:	08015c38 	.word	0x08015c38
 800c3a0:	2000c780 	.word	0x2000c780
 800c3a4:	2000c784 	.word	0x2000c784
 800c3a8:	2000c78c 	.word	0x2000c78c
 800c3ac:	2000c78a 	.word	0x2000c78a
 800c3b0:	2000c754 	.word	0x2000c754
    LWIP_ASSERT("tcp_input: active pcb->state != CLOSED", pcb->state != CLOSED);
 800c3b4:	69fb      	ldr	r3, [r7, #28]
 800c3b6:	7d1b      	ldrb	r3, [r3, #20]
 800c3b8:	2b00      	cmp	r3, #0
 800c3ba:	d105      	bne.n	800c3c8 <tcp_input+0x2d8>
 800c3bc:	4b8a      	ldr	r3, [pc, #552]	; (800c5e8 <tcp_input+0x4f8>)
 800c3be:	22fb      	movs	r2, #251	; 0xfb
 800c3c0:	498a      	ldr	r1, [pc, #552]	; (800c5ec <tcp_input+0x4fc>)
 800c3c2:	488b      	ldr	r0, [pc, #556]	; (800c5f0 <tcp_input+0x500>)
 800c3c4:	f007 fad0 	bl	8013968 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != TIME-WAIT", pcb->state != TIME_WAIT);
 800c3c8:	69fb      	ldr	r3, [r7, #28]
 800c3ca:	7d1b      	ldrb	r3, [r3, #20]
 800c3cc:	2b0a      	cmp	r3, #10
 800c3ce:	d105      	bne.n	800c3dc <tcp_input+0x2ec>
 800c3d0:	4b85      	ldr	r3, [pc, #532]	; (800c5e8 <tcp_input+0x4f8>)
 800c3d2:	22fc      	movs	r2, #252	; 0xfc
 800c3d4:	4987      	ldr	r1, [pc, #540]	; (800c5f4 <tcp_input+0x504>)
 800c3d6:	4886      	ldr	r0, [pc, #536]	; (800c5f0 <tcp_input+0x500>)
 800c3d8:	f007 fac6 	bl	8013968 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != LISTEN", pcb->state != LISTEN);
 800c3dc:	69fb      	ldr	r3, [r7, #28]
 800c3de:	7d1b      	ldrb	r3, [r3, #20]
 800c3e0:	2b01      	cmp	r3, #1
 800c3e2:	d105      	bne.n	800c3f0 <tcp_input+0x300>
 800c3e4:	4b80      	ldr	r3, [pc, #512]	; (800c5e8 <tcp_input+0x4f8>)
 800c3e6:	22fd      	movs	r2, #253	; 0xfd
 800c3e8:	4983      	ldr	r1, [pc, #524]	; (800c5f8 <tcp_input+0x508>)
 800c3ea:	4881      	ldr	r0, [pc, #516]	; (800c5f0 <tcp_input+0x500>)
 800c3ec:	f007 fabc 	bl	8013968 <iprintf>

    /* check if PCB is bound to specific netif */
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800c3f0:	69fb      	ldr	r3, [r7, #28]
 800c3f2:	7a1b      	ldrb	r3, [r3, #8]
 800c3f4:	2b00      	cmp	r3, #0
 800c3f6:	d00c      	beq.n	800c412 <tcp_input+0x322>
        (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800c3f8:	69fb      	ldr	r3, [r7, #28]
 800c3fa:	7a1a      	ldrb	r2, [r3, #8]
 800c3fc:	4b7f      	ldr	r3, [pc, #508]	; (800c5fc <tcp_input+0x50c>)
 800c3fe:	685b      	ldr	r3, [r3, #4]
 800c400:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800c404:	3301      	adds	r3, #1
 800c406:	b2db      	uxtb	r3, r3
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800c408:	429a      	cmp	r2, r3
 800c40a:	d002      	beq.n	800c412 <tcp_input+0x322>
      prev = pcb;
 800c40c:	69fb      	ldr	r3, [r7, #28]
 800c40e:	61bb      	str	r3, [r7, #24]
      continue;
 800c410:	e04d      	b.n	800c4ae <tcp_input+0x3be>
    }

    if (pcb->remote_port == tcphdr->src &&
 800c412:	69fb      	ldr	r3, [r7, #28]
 800c414:	8b1a      	ldrh	r2, [r3, #24]
 800c416:	4b7a      	ldr	r3, [pc, #488]	; (800c600 <tcp_input+0x510>)
 800c418:	681b      	ldr	r3, [r3, #0]
 800c41a:	881b      	ldrh	r3, [r3, #0]
 800c41c:	b29b      	uxth	r3, r3
 800c41e:	429a      	cmp	r2, r3
 800c420:	d143      	bne.n	800c4aa <tcp_input+0x3ba>
        pcb->local_port == tcphdr->dest &&
 800c422:	69fb      	ldr	r3, [r7, #28]
 800c424:	8ada      	ldrh	r2, [r3, #22]
 800c426:	4b76      	ldr	r3, [pc, #472]	; (800c600 <tcp_input+0x510>)
 800c428:	681b      	ldr	r3, [r3, #0]
 800c42a:	885b      	ldrh	r3, [r3, #2]
 800c42c:	b29b      	uxth	r3, r3
    if (pcb->remote_port == tcphdr->src &&
 800c42e:	429a      	cmp	r2, r3
 800c430:	d13b      	bne.n	800c4aa <tcp_input+0x3ba>
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800c432:	69fb      	ldr	r3, [r7, #28]
 800c434:	685a      	ldr	r2, [r3, #4]
 800c436:	4b71      	ldr	r3, [pc, #452]	; (800c5fc <tcp_input+0x50c>)
 800c438:	691b      	ldr	r3, [r3, #16]
        pcb->local_port == tcphdr->dest &&
 800c43a:	429a      	cmp	r2, r3
 800c43c:	d135      	bne.n	800c4aa <tcp_input+0x3ba>
        ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 800c43e:	69fb      	ldr	r3, [r7, #28]
 800c440:	681a      	ldr	r2, [r3, #0]
 800c442:	4b6e      	ldr	r3, [pc, #440]	; (800c5fc <tcp_input+0x50c>)
 800c444:	695b      	ldr	r3, [r3, #20]
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800c446:	429a      	cmp	r2, r3
 800c448:	d12f      	bne.n	800c4aa <tcp_input+0x3ba>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      LWIP_ASSERT("tcp_input: pcb->next != pcb (before cache)", pcb->next != pcb);
 800c44a:	69fb      	ldr	r3, [r7, #28]
 800c44c:	68db      	ldr	r3, [r3, #12]
 800c44e:	69fa      	ldr	r2, [r7, #28]
 800c450:	429a      	cmp	r2, r3
 800c452:	d106      	bne.n	800c462 <tcp_input+0x372>
 800c454:	4b64      	ldr	r3, [pc, #400]	; (800c5e8 <tcp_input+0x4f8>)
 800c456:	f240 120d 	movw	r2, #269	; 0x10d
 800c45a:	496a      	ldr	r1, [pc, #424]	; (800c604 <tcp_input+0x514>)
 800c45c:	4864      	ldr	r0, [pc, #400]	; (800c5f0 <tcp_input+0x500>)
 800c45e:	f007 fa83 	bl	8013968 <iprintf>
      if (prev != NULL) {
 800c462:	69bb      	ldr	r3, [r7, #24]
 800c464:	2b00      	cmp	r3, #0
 800c466:	d00b      	beq.n	800c480 <tcp_input+0x390>
        prev->next = pcb->next;
 800c468:	69fb      	ldr	r3, [r7, #28]
 800c46a:	68da      	ldr	r2, [r3, #12]
 800c46c:	69bb      	ldr	r3, [r7, #24]
 800c46e:	60da      	str	r2, [r3, #12]
        pcb->next = tcp_active_pcbs;
 800c470:	4b65      	ldr	r3, [pc, #404]	; (800c608 <tcp_input+0x518>)
 800c472:	681a      	ldr	r2, [r3, #0]
 800c474:	69fb      	ldr	r3, [r7, #28]
 800c476:	60da      	str	r2, [r3, #12]
        tcp_active_pcbs = pcb;
 800c478:	4a63      	ldr	r2, [pc, #396]	; (800c608 <tcp_input+0x518>)
 800c47a:	69fb      	ldr	r3, [r7, #28]
 800c47c:	6013      	str	r3, [r2, #0]
 800c47e:	e007      	b.n	800c490 <tcp_input+0x3a0>
      } else {
        TCP_STATS_INC(tcp.cachehit);
 800c480:	4b62      	ldr	r3, [pc, #392]	; (800c60c <tcp_input+0x51c>)
 800c482:	f8b3 30a6 	ldrh.w	r3, [r3, #166]	; 0xa6
 800c486:	3301      	adds	r3, #1
 800c488:	b29a      	uxth	r2, r3
 800c48a:	4b60      	ldr	r3, [pc, #384]	; (800c60c <tcp_input+0x51c>)
 800c48c:	f8a3 20a6 	strh.w	r2, [r3, #166]	; 0xa6
      }
      LWIP_ASSERT("tcp_input: pcb->next != pcb (after cache)", pcb->next != pcb);
 800c490:	69fb      	ldr	r3, [r7, #28]
 800c492:	68db      	ldr	r3, [r3, #12]
 800c494:	69fa      	ldr	r2, [r7, #28]
 800c496:	429a      	cmp	r2, r3
 800c498:	d111      	bne.n	800c4be <tcp_input+0x3ce>
 800c49a:	4b53      	ldr	r3, [pc, #332]	; (800c5e8 <tcp_input+0x4f8>)
 800c49c:	f240 1215 	movw	r2, #277	; 0x115
 800c4a0:	495b      	ldr	r1, [pc, #364]	; (800c610 <tcp_input+0x520>)
 800c4a2:	4853      	ldr	r0, [pc, #332]	; (800c5f0 <tcp_input+0x500>)
 800c4a4:	f007 fa60 	bl	8013968 <iprintf>
      break;
 800c4a8:	e009      	b.n	800c4be <tcp_input+0x3ce>
    }
    prev = pcb;
 800c4aa:	69fb      	ldr	r3, [r7, #28]
 800c4ac:	61bb      	str	r3, [r7, #24]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800c4ae:	69fb      	ldr	r3, [r7, #28]
 800c4b0:	68db      	ldr	r3, [r3, #12]
 800c4b2:	61fb      	str	r3, [r7, #28]
 800c4b4:	69fb      	ldr	r3, [r7, #28]
 800c4b6:	2b00      	cmp	r3, #0
 800c4b8:	f47f af7c 	bne.w	800c3b4 <tcp_input+0x2c4>
 800c4bc:	e000      	b.n	800c4c0 <tcp_input+0x3d0>
      break;
 800c4be:	bf00      	nop
  }

  if (pcb == NULL) {
 800c4c0:	69fb      	ldr	r3, [r7, #28]
 800c4c2:	2b00      	cmp	r3, #0
 800c4c4:	f040 80bb 	bne.w	800c63e <tcp_input+0x54e>
    /* If it did not go to an active connection, we check the connections
       in the TIME-WAIT state. */
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800c4c8:	4b52      	ldr	r3, [pc, #328]	; (800c614 <tcp_input+0x524>)
 800c4ca:	681b      	ldr	r3, [r3, #0]
 800c4cc:	61fb      	str	r3, [r7, #28]
 800c4ce:	e03f      	b.n	800c550 <tcp_input+0x460>
      LWIP_ASSERT("tcp_input: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 800c4d0:	69fb      	ldr	r3, [r7, #28]
 800c4d2:	7d1b      	ldrb	r3, [r3, #20]
 800c4d4:	2b0a      	cmp	r3, #10
 800c4d6:	d006      	beq.n	800c4e6 <tcp_input+0x3f6>
 800c4d8:	4b43      	ldr	r3, [pc, #268]	; (800c5e8 <tcp_input+0x4f8>)
 800c4da:	f240 121f 	movw	r2, #287	; 0x11f
 800c4de:	494e      	ldr	r1, [pc, #312]	; (800c618 <tcp_input+0x528>)
 800c4e0:	4843      	ldr	r0, [pc, #268]	; (800c5f0 <tcp_input+0x500>)
 800c4e2:	f007 fa41 	bl	8013968 <iprintf>

      /* check if PCB is bound to specific netif */
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800c4e6:	69fb      	ldr	r3, [r7, #28]
 800c4e8:	7a1b      	ldrb	r3, [r3, #8]
 800c4ea:	2b00      	cmp	r3, #0
 800c4ec:	d009      	beq.n	800c502 <tcp_input+0x412>
          (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800c4ee:	69fb      	ldr	r3, [r7, #28]
 800c4f0:	7a1a      	ldrb	r2, [r3, #8]
 800c4f2:	4b42      	ldr	r3, [pc, #264]	; (800c5fc <tcp_input+0x50c>)
 800c4f4:	685b      	ldr	r3, [r3, #4]
 800c4f6:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800c4fa:	3301      	adds	r3, #1
 800c4fc:	b2db      	uxtb	r3, r3
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800c4fe:	429a      	cmp	r2, r3
 800c500:	d122      	bne.n	800c548 <tcp_input+0x458>
        continue;
      }

      if (pcb->remote_port == tcphdr->src &&
 800c502:	69fb      	ldr	r3, [r7, #28]
 800c504:	8b1a      	ldrh	r2, [r3, #24]
 800c506:	4b3e      	ldr	r3, [pc, #248]	; (800c600 <tcp_input+0x510>)
 800c508:	681b      	ldr	r3, [r3, #0]
 800c50a:	881b      	ldrh	r3, [r3, #0]
 800c50c:	b29b      	uxth	r3, r3
 800c50e:	429a      	cmp	r2, r3
 800c510:	d11b      	bne.n	800c54a <tcp_input+0x45a>
          pcb->local_port == tcphdr->dest &&
 800c512:	69fb      	ldr	r3, [r7, #28]
 800c514:	8ada      	ldrh	r2, [r3, #22]
 800c516:	4b3a      	ldr	r3, [pc, #232]	; (800c600 <tcp_input+0x510>)
 800c518:	681b      	ldr	r3, [r3, #0]
 800c51a:	885b      	ldrh	r3, [r3, #2]
 800c51c:	b29b      	uxth	r3, r3
      if (pcb->remote_port == tcphdr->src &&
 800c51e:	429a      	cmp	r2, r3
 800c520:	d113      	bne.n	800c54a <tcp_input+0x45a>
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800c522:	69fb      	ldr	r3, [r7, #28]
 800c524:	685a      	ldr	r2, [r3, #4]
 800c526:	4b35      	ldr	r3, [pc, #212]	; (800c5fc <tcp_input+0x50c>)
 800c528:	691b      	ldr	r3, [r3, #16]
          pcb->local_port == tcphdr->dest &&
 800c52a:	429a      	cmp	r2, r3
 800c52c:	d10d      	bne.n	800c54a <tcp_input+0x45a>
          ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 800c52e:	69fb      	ldr	r3, [r7, #28]
 800c530:	681a      	ldr	r2, [r3, #0]
 800c532:	4b32      	ldr	r3, [pc, #200]	; (800c5fc <tcp_input+0x50c>)
 800c534:	695b      	ldr	r3, [r3, #20]
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800c536:	429a      	cmp	r2, r3
 800c538:	d107      	bne.n	800c54a <tcp_input+0x45a>
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
        if (LWIP_HOOK_TCP_INPACKET_PCB(pcb, tcphdr, tcphdr_optlen, tcphdr_opt1len,
                                       tcphdr_opt2, p) == ERR_OK)
#endif
        {
          tcp_timewait_input(pcb);
 800c53a:	69f8      	ldr	r0, [r7, #28]
 800c53c:	f000 fb88 	bl	800cc50 <tcp_timewait_input>
        }
        pbuf_free(p);
 800c540:	6878      	ldr	r0, [r7, #4]
 800c542:	f7fd ff5f 	bl	800a404 <pbuf_free>
        return;
 800c546:	e224      	b.n	800c992 <tcp_input+0x8a2>
        continue;
 800c548:	bf00      	nop
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800c54a:	69fb      	ldr	r3, [r7, #28]
 800c54c:	68db      	ldr	r3, [r3, #12]
 800c54e:	61fb      	str	r3, [r7, #28]
 800c550:	69fb      	ldr	r3, [r7, #28]
 800c552:	2b00      	cmp	r3, #0
 800c554:	d1bc      	bne.n	800c4d0 <tcp_input+0x3e0>
      }
    }

    /* Finally, if we still did not get a match, we check all PCBs that
       are LISTENing for incoming connections. */
    prev = NULL;
 800c556:	2300      	movs	r3, #0
 800c558:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800c55a:	4b30      	ldr	r3, [pc, #192]	; (800c61c <tcp_input+0x52c>)
 800c55c:	681b      	ldr	r3, [r3, #0]
 800c55e:	617b      	str	r3, [r7, #20]
 800c560:	e02a      	b.n	800c5b8 <tcp_input+0x4c8>
      /* check if PCB is bound to specific netif */
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 800c562:	697b      	ldr	r3, [r7, #20]
 800c564:	7a1b      	ldrb	r3, [r3, #8]
 800c566:	2b00      	cmp	r3, #0
 800c568:	d00c      	beq.n	800c584 <tcp_input+0x494>
          (lpcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800c56a:	697b      	ldr	r3, [r7, #20]
 800c56c:	7a1a      	ldrb	r2, [r3, #8]
 800c56e:	4b23      	ldr	r3, [pc, #140]	; (800c5fc <tcp_input+0x50c>)
 800c570:	685b      	ldr	r3, [r3, #4]
 800c572:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800c576:	3301      	adds	r3, #1
 800c578:	b2db      	uxtb	r3, r3
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 800c57a:	429a      	cmp	r2, r3
 800c57c:	d002      	beq.n	800c584 <tcp_input+0x494>
        prev = (struct tcp_pcb *)lpcb;
 800c57e:	697b      	ldr	r3, [r7, #20]
 800c580:	61bb      	str	r3, [r7, #24]
        continue;
 800c582:	e016      	b.n	800c5b2 <tcp_input+0x4c2>
      }

      if (lpcb->local_port == tcphdr->dest) {
 800c584:	697b      	ldr	r3, [r7, #20]
 800c586:	8ada      	ldrh	r2, [r3, #22]
 800c588:	4b1d      	ldr	r3, [pc, #116]	; (800c600 <tcp_input+0x510>)
 800c58a:	681b      	ldr	r3, [r3, #0]
 800c58c:	885b      	ldrh	r3, [r3, #2]
 800c58e:	b29b      	uxth	r3, r3
 800c590:	429a      	cmp	r2, r3
 800c592:	d10c      	bne.n	800c5ae <tcp_input+0x4be>
          lpcb_prev = prev;
#else /* SO_REUSE */
          break;
#endif /* SO_REUSE */
        } else if (IP_ADDR_PCB_VERSION_MATCH_EXACT(lpcb, ip_current_dest_addr())) {
          if (ip_addr_cmp(&lpcb->local_ip, ip_current_dest_addr())) {
 800c594:	697b      	ldr	r3, [r7, #20]
 800c596:	681a      	ldr	r2, [r3, #0]
 800c598:	4b18      	ldr	r3, [pc, #96]	; (800c5fc <tcp_input+0x50c>)
 800c59a:	695b      	ldr	r3, [r3, #20]
 800c59c:	429a      	cmp	r2, r3
 800c59e:	d00f      	beq.n	800c5c0 <tcp_input+0x4d0>
            /* found an exact match */
            break;
          } else if (ip_addr_isany(&lpcb->local_ip)) {
 800c5a0:	697b      	ldr	r3, [r7, #20]
 800c5a2:	2b00      	cmp	r3, #0
 800c5a4:	d00d      	beq.n	800c5c2 <tcp_input+0x4d2>
 800c5a6:	697b      	ldr	r3, [r7, #20]
 800c5a8:	681b      	ldr	r3, [r3, #0]
 800c5aa:	2b00      	cmp	r3, #0
 800c5ac:	d009      	beq.n	800c5c2 <tcp_input+0x4d2>
            break;
#endif /* SO_REUSE */
          }
        }
      }
      prev = (struct tcp_pcb *)lpcb;
 800c5ae:	697b      	ldr	r3, [r7, #20]
 800c5b0:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800c5b2:	697b      	ldr	r3, [r7, #20]
 800c5b4:	68db      	ldr	r3, [r3, #12]
 800c5b6:	617b      	str	r3, [r7, #20]
 800c5b8:	697b      	ldr	r3, [r7, #20]
 800c5ba:	2b00      	cmp	r3, #0
 800c5bc:	d1d1      	bne.n	800c562 <tcp_input+0x472>
 800c5be:	e000      	b.n	800c5c2 <tcp_input+0x4d2>
            break;
 800c5c0:	bf00      	nop
      /* only pass to ANY if no specific local IP has been found */
      lpcb = lpcb_any;
      prev = lpcb_prev;
    }
#endif /* SO_REUSE */
    if (lpcb != NULL) {
 800c5c2:	697b      	ldr	r3, [r7, #20]
 800c5c4:	2b00      	cmp	r3, #0
 800c5c6:	d03a      	beq.n	800c63e <tcp_input+0x54e>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      if (prev != NULL) {
 800c5c8:	69bb      	ldr	r3, [r7, #24]
 800c5ca:	2b00      	cmp	r3, #0
 800c5cc:	d028      	beq.n	800c620 <tcp_input+0x530>
        ((struct tcp_pcb_listen *)prev)->next = lpcb->next;
 800c5ce:	697b      	ldr	r3, [r7, #20]
 800c5d0:	68da      	ldr	r2, [r3, #12]
 800c5d2:	69bb      	ldr	r3, [r7, #24]
 800c5d4:	60da      	str	r2, [r3, #12]
        /* our successor is the remainder of the listening list */
        lpcb->next = tcp_listen_pcbs.listen_pcbs;
 800c5d6:	4b11      	ldr	r3, [pc, #68]	; (800c61c <tcp_input+0x52c>)
 800c5d8:	681a      	ldr	r2, [r3, #0]
 800c5da:	697b      	ldr	r3, [r7, #20]
 800c5dc:	60da      	str	r2, [r3, #12]
        /* put this listening pcb at the head of the listening list */
        tcp_listen_pcbs.listen_pcbs = lpcb;
 800c5de:	4a0f      	ldr	r2, [pc, #60]	; (800c61c <tcp_input+0x52c>)
 800c5e0:	697b      	ldr	r3, [r7, #20]
 800c5e2:	6013      	str	r3, [r2, #0]
 800c5e4:	e024      	b.n	800c630 <tcp_input+0x540>
 800c5e6:	bf00      	nop
 800c5e8:	08015ba8 	.word	0x08015ba8
 800c5ec:	08015c58 	.word	0x08015c58
 800c5f0:	08015bf4 	.word	0x08015bf4
 800c5f4:	08015c80 	.word	0x08015c80
 800c5f8:	08015cac 	.word	0x08015cac
 800c5fc:	20008e5c 	.word	0x20008e5c
 800c600:	2000c770 	.word	0x2000c770
 800c604:	08015cd4 	.word	0x08015cd4
 800c608:	2000c754 	.word	0x2000c754
 800c60c:	2000c64c 	.word	0x2000c64c
 800c610:	08015d00 	.word	0x08015d00
 800c614:	2000c758 	.word	0x2000c758
 800c618:	08015d2c 	.word	0x08015d2c
 800c61c:	2000c750 	.word	0x2000c750
      } else {
        TCP_STATS_INC(tcp.cachehit);
 800c620:	4ba0      	ldr	r3, [pc, #640]	; (800c8a4 <tcp_input+0x7b4>)
 800c622:	f8b3 30a6 	ldrh.w	r3, [r3, #166]	; 0xa6
 800c626:	3301      	adds	r3, #1
 800c628:	b29a      	uxth	r2, r3
 800c62a:	4b9e      	ldr	r3, [pc, #632]	; (800c8a4 <tcp_input+0x7b4>)
 800c62c:	f8a3 20a6 	strh.w	r2, [r3, #166]	; 0xa6
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
      if (LWIP_HOOK_TCP_INPACKET_PCB((struct tcp_pcb *)lpcb, tcphdr, tcphdr_optlen,
                                     tcphdr_opt1len, tcphdr_opt2, p) == ERR_OK)
#endif
      {
        tcp_listen_input(lpcb);
 800c630:	6978      	ldr	r0, [r7, #20]
 800c632:	f000 fa05 	bl	800ca40 <tcp_listen_input>
      }
      pbuf_free(p);
 800c636:	6878      	ldr	r0, [r7, #4]
 800c638:	f7fd fee4 	bl	800a404 <pbuf_free>
      return;
 800c63c:	e1a9      	b.n	800c992 <tcp_input+0x8a2>
      tcphdr_opt1len, tcphdr_opt2, p) != ERR_OK) {
    pbuf_free(p);
    return;
  }
#endif
  if (pcb != NULL) {
 800c63e:	69fb      	ldr	r3, [r7, #28]
 800c640:	2b00      	cmp	r3, #0
 800c642:	f000 815f 	beq.w	800c904 <tcp_input+0x814>
#if TCP_INPUT_DEBUG
    tcp_debug_print_state(pcb->state);
#endif /* TCP_INPUT_DEBUG */

    /* Set up a tcp_seg structure. */
    inseg.next = NULL;
 800c646:	4b98      	ldr	r3, [pc, #608]	; (800c8a8 <tcp_input+0x7b8>)
 800c648:	2200      	movs	r2, #0
 800c64a:	601a      	str	r2, [r3, #0]
    inseg.len = p->tot_len;
 800c64c:	687b      	ldr	r3, [r7, #4]
 800c64e:	891a      	ldrh	r2, [r3, #8]
 800c650:	4b95      	ldr	r3, [pc, #596]	; (800c8a8 <tcp_input+0x7b8>)
 800c652:	811a      	strh	r2, [r3, #8]
    inseg.p = p;
 800c654:	4a94      	ldr	r2, [pc, #592]	; (800c8a8 <tcp_input+0x7b8>)
 800c656:	687b      	ldr	r3, [r7, #4]
 800c658:	6053      	str	r3, [r2, #4]
    inseg.tcphdr = tcphdr;
 800c65a:	4b94      	ldr	r3, [pc, #592]	; (800c8ac <tcp_input+0x7bc>)
 800c65c:	681b      	ldr	r3, [r3, #0]
 800c65e:	4a92      	ldr	r2, [pc, #584]	; (800c8a8 <tcp_input+0x7b8>)
 800c660:	60d3      	str	r3, [r2, #12]

    recv_data = NULL;
 800c662:	4b93      	ldr	r3, [pc, #588]	; (800c8b0 <tcp_input+0x7c0>)
 800c664:	2200      	movs	r2, #0
 800c666:	601a      	str	r2, [r3, #0]
    recv_flags = 0;
 800c668:	4b92      	ldr	r3, [pc, #584]	; (800c8b4 <tcp_input+0x7c4>)
 800c66a:	2200      	movs	r2, #0
 800c66c:	701a      	strb	r2, [r3, #0]
    recv_acked = 0;
 800c66e:	4b92      	ldr	r3, [pc, #584]	; (800c8b8 <tcp_input+0x7c8>)
 800c670:	2200      	movs	r2, #0
 800c672:	801a      	strh	r2, [r3, #0]

    if (flags & TCP_PSH) {
 800c674:	4b91      	ldr	r3, [pc, #580]	; (800c8bc <tcp_input+0x7cc>)
 800c676:	781b      	ldrb	r3, [r3, #0]
 800c678:	f003 0308 	and.w	r3, r3, #8
 800c67c:	2b00      	cmp	r3, #0
 800c67e:	d006      	beq.n	800c68e <tcp_input+0x59e>
      p->flags |= PBUF_FLAG_PUSH;
 800c680:	687b      	ldr	r3, [r7, #4]
 800c682:	7b5b      	ldrb	r3, [r3, #13]
 800c684:	f043 0301 	orr.w	r3, r3, #1
 800c688:	b2da      	uxtb	r2, r3
 800c68a:	687b      	ldr	r3, [r7, #4]
 800c68c:	735a      	strb	r2, [r3, #13]
    }

    /* If there is data which was previously "refused" by upper layer */
    if (pcb->refused_data != NULL) {
 800c68e:	69fb      	ldr	r3, [r7, #28]
 800c690:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800c692:	2b00      	cmp	r3, #0
 800c694:	d01e      	beq.n	800c6d4 <tcp_input+0x5e4>
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 800c696:	69f8      	ldr	r0, [r7, #28]
 800c698:	f7ff f8ba 	bl	800b810 <tcp_process_refused_data>
 800c69c:	4603      	mov	r3, r0
 800c69e:	f113 0f0d 	cmn.w	r3, #13
 800c6a2:	d007      	beq.n	800c6b4 <tcp_input+0x5c4>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 800c6a4:	69fb      	ldr	r3, [r7, #28]
 800c6a6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 800c6a8:	2b00      	cmp	r3, #0
 800c6aa:	d013      	beq.n	800c6d4 <tcp_input+0x5e4>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 800c6ac:	4b84      	ldr	r3, [pc, #528]	; (800c8c0 <tcp_input+0x7d0>)
 800c6ae:	881b      	ldrh	r3, [r3, #0]
 800c6b0:	2b00      	cmp	r3, #0
 800c6b2:	d00f      	beq.n	800c6d4 <tcp_input+0x5e4>
        /* pcb has been aborted or refused data is still refused and the new
           segment contains data */
        if (pcb->rcv_ann_wnd == 0) {
 800c6b4:	69fb      	ldr	r3, [r7, #28]
 800c6b6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800c6b8:	2b00      	cmp	r3, #0
 800c6ba:	d102      	bne.n	800c6c2 <tcp_input+0x5d2>
          /* this is a zero-window probe, we respond to it with current RCV.NXT
          and drop the data segment */
          tcp_send_empty_ack(pcb);
 800c6bc:	69f8      	ldr	r0, [r7, #28]
 800c6be:	f003 fa09 	bl	800fad4 <tcp_send_empty_ack>
        }
        TCP_STATS_INC(tcp.drop);
 800c6c2:	4b78      	ldr	r3, [pc, #480]	; (800c8a4 <tcp_input+0x7b4>)
 800c6c4:	f8b3 3096 	ldrh.w	r3, [r3, #150]	; 0x96
 800c6c8:	3301      	adds	r3, #1
 800c6ca:	b29a      	uxth	r2, r3
 800c6cc:	4b75      	ldr	r3, [pc, #468]	; (800c8a4 <tcp_input+0x7b4>)
 800c6ce:	f8a3 2096 	strh.w	r2, [r3, #150]	; 0x96
        MIB2_STATS_INC(mib2.tcpinerrs);
        goto aborted;
 800c6d2:	e104      	b.n	800c8de <tcp_input+0x7ee>
      }
    }
    tcp_input_pcb = pcb;
 800c6d4:	4a7b      	ldr	r2, [pc, #492]	; (800c8c4 <tcp_input+0x7d4>)
 800c6d6:	69fb      	ldr	r3, [r7, #28]
 800c6d8:	6013      	str	r3, [r2, #0]
    err = tcp_process(pcb);
 800c6da:	69f8      	ldr	r0, [r7, #28]
 800c6dc:	f000 fb32 	bl	800cd44 <tcp_process>
 800c6e0:	4603      	mov	r3, r0
 800c6e2:	74fb      	strb	r3, [r7, #19]
    /* A return value of ERR_ABRT means that tcp_abort() was called
       and that the pcb has been freed. If so, we don't do anything. */
    if (err != ERR_ABRT) {
 800c6e4:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800c6e8:	f113 0f0d 	cmn.w	r3, #13
 800c6ec:	f000 80d1 	beq.w	800c892 <tcp_input+0x7a2>
      if (recv_flags & TF_RESET) {
 800c6f0:	4b70      	ldr	r3, [pc, #448]	; (800c8b4 <tcp_input+0x7c4>)
 800c6f2:	781b      	ldrb	r3, [r3, #0]
 800c6f4:	f003 0308 	and.w	r3, r3, #8
 800c6f8:	2b00      	cmp	r3, #0
 800c6fa:	d015      	beq.n	800c728 <tcp_input+0x638>
        /* TF_RESET means that the connection was reset by the other
           end. We then call the error callback to inform the
           application that the connection is dead before we
           deallocate the PCB. */
        TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_RST);
 800c6fc:	69fb      	ldr	r3, [r7, #28]
 800c6fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c702:	2b00      	cmp	r3, #0
 800c704:	d008      	beq.n	800c718 <tcp_input+0x628>
 800c706:	69fb      	ldr	r3, [r7, #28]
 800c708:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c70c:	69fa      	ldr	r2, [r7, #28]
 800c70e:	6912      	ldr	r2, [r2, #16]
 800c710:	f06f 010d 	mvn.w	r1, #13
 800c714:	4610      	mov	r0, r2
 800c716:	4798      	blx	r3
        tcp_pcb_remove(&tcp_active_pcbs, pcb);
 800c718:	69f9      	ldr	r1, [r7, #28]
 800c71a:	486b      	ldr	r0, [pc, #428]	; (800c8c8 <tcp_input+0x7d8>)
 800c71c:	f7ff fb70 	bl	800be00 <tcp_pcb_remove>
        tcp_free(pcb);
 800c720:	69f8      	ldr	r0, [r7, #28]
 800c722:	f7fe f933 	bl	800a98c <tcp_free>
 800c726:	e0da      	b.n	800c8de <tcp_input+0x7ee>
      } else {
        err = ERR_OK;
 800c728:	2300      	movs	r3, #0
 800c72a:	74fb      	strb	r3, [r7, #19]
        /* If the application has registered a "sent" function to be
           called when new send buffer space is available, we call it
           now. */
        if (recv_acked > 0) {
 800c72c:	4b62      	ldr	r3, [pc, #392]	; (800c8b8 <tcp_input+0x7c8>)
 800c72e:	881b      	ldrh	r3, [r3, #0]
 800c730:	2b00      	cmp	r3, #0
 800c732:	d01d      	beq.n	800c770 <tcp_input+0x680>
          while (acked > 0) {
            acked16 = (u16_t)LWIP_MIN(acked, 0xffffu);
            acked -= acked16;
#else
          {
            acked16 = recv_acked;
 800c734:	4b60      	ldr	r3, [pc, #384]	; (800c8b8 <tcp_input+0x7c8>)
 800c736:	881b      	ldrh	r3, [r3, #0]
 800c738:	81fb      	strh	r3, [r7, #14]
#endif
            TCP_EVENT_SENT(pcb, (u16_t)acked16, err);
 800c73a:	69fb      	ldr	r3, [r7, #28]
 800c73c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800c740:	2b00      	cmp	r3, #0
 800c742:	d00a      	beq.n	800c75a <tcp_input+0x66a>
 800c744:	69fb      	ldr	r3, [r7, #28]
 800c746:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800c74a:	69fa      	ldr	r2, [r7, #28]
 800c74c:	6910      	ldr	r0, [r2, #16]
 800c74e:	89fa      	ldrh	r2, [r7, #14]
 800c750:	69f9      	ldr	r1, [r7, #28]
 800c752:	4798      	blx	r3
 800c754:	4603      	mov	r3, r0
 800c756:	74fb      	strb	r3, [r7, #19]
 800c758:	e001      	b.n	800c75e <tcp_input+0x66e>
 800c75a:	2300      	movs	r3, #0
 800c75c:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 800c75e:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800c762:	f113 0f0d 	cmn.w	r3, #13
 800c766:	f000 8096 	beq.w	800c896 <tcp_input+0x7a6>
              goto aborted;
            }
          }
          recv_acked = 0;
 800c76a:	4b53      	ldr	r3, [pc, #332]	; (800c8b8 <tcp_input+0x7c8>)
 800c76c:	2200      	movs	r2, #0
 800c76e:	801a      	strh	r2, [r3, #0]
        }
        if (tcp_input_delayed_close(pcb)) {
 800c770:	69f8      	ldr	r0, [r7, #28]
 800c772:	f000 f925 	bl	800c9c0 <tcp_input_delayed_close>
 800c776:	4603      	mov	r3, r0
 800c778:	2b00      	cmp	r3, #0
 800c77a:	f040 808e 	bne.w	800c89a <tcp_input+0x7aa>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
        while (recv_data != NULL) {
          struct pbuf *rest = NULL;
          pbuf_split_64k(recv_data, &rest);
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
        if (recv_data != NULL) {
 800c77e:	4b4c      	ldr	r3, [pc, #304]	; (800c8b0 <tcp_input+0x7c0>)
 800c780:	681b      	ldr	r3, [r3, #0]
 800c782:	2b00      	cmp	r3, #0
 800c784:	d041      	beq.n	800c80a <tcp_input+0x71a>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

          LWIP_ASSERT("pcb->refused_data == NULL", pcb->refused_data == NULL);
 800c786:	69fb      	ldr	r3, [r7, #28]
 800c788:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800c78a:	2b00      	cmp	r3, #0
 800c78c:	d006      	beq.n	800c79c <tcp_input+0x6ac>
 800c78e:	4b4f      	ldr	r3, [pc, #316]	; (800c8cc <tcp_input+0x7dc>)
 800c790:	f44f 72f3 	mov.w	r2, #486	; 0x1e6
 800c794:	494e      	ldr	r1, [pc, #312]	; (800c8d0 <tcp_input+0x7e0>)
 800c796:	484f      	ldr	r0, [pc, #316]	; (800c8d4 <tcp_input+0x7e4>)
 800c798:	f007 f8e6 	bl	8013968 <iprintf>
          if (pcb->flags & TF_RXCLOSED) {
 800c79c:	69fb      	ldr	r3, [r7, #28]
 800c79e:	8b5b      	ldrh	r3, [r3, #26]
 800c7a0:	f003 0310 	and.w	r3, r3, #16
 800c7a4:	2b00      	cmp	r3, #0
 800c7a6:	d008      	beq.n	800c7ba <tcp_input+0x6ca>
            /* received data although already closed -> abort (send RST) to
               notify the remote host that not all data has been processed */
            pbuf_free(recv_data);
 800c7a8:	4b41      	ldr	r3, [pc, #260]	; (800c8b0 <tcp_input+0x7c0>)
 800c7aa:	681b      	ldr	r3, [r3, #0]
 800c7ac:	4618      	mov	r0, r3
 800c7ae:	f7fd fe29 	bl	800a404 <pbuf_free>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_free(rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            tcp_abort(pcb);
 800c7b2:	69f8      	ldr	r0, [r7, #28]
 800c7b4:	f7fe fbd2 	bl	800af5c <tcp_abort>
            goto aborted;
 800c7b8:	e091      	b.n	800c8de <tcp_input+0x7ee>
          }

          /* Notify application that data has been received. */
          TCP_EVENT_RECV(pcb, recv_data, ERR_OK, err);
 800c7ba:	69fb      	ldr	r3, [r7, #28]
 800c7bc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800c7c0:	2b00      	cmp	r3, #0
 800c7c2:	d00c      	beq.n	800c7de <tcp_input+0x6ee>
 800c7c4:	69fb      	ldr	r3, [r7, #28]
 800c7c6:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 800c7ca:	69fb      	ldr	r3, [r7, #28]
 800c7cc:	6918      	ldr	r0, [r3, #16]
 800c7ce:	4b38      	ldr	r3, [pc, #224]	; (800c8b0 <tcp_input+0x7c0>)
 800c7d0:	681a      	ldr	r2, [r3, #0]
 800c7d2:	2300      	movs	r3, #0
 800c7d4:	69f9      	ldr	r1, [r7, #28]
 800c7d6:	47a0      	blx	r4
 800c7d8:	4603      	mov	r3, r0
 800c7da:	74fb      	strb	r3, [r7, #19]
 800c7dc:	e008      	b.n	800c7f0 <tcp_input+0x700>
 800c7de:	4b34      	ldr	r3, [pc, #208]	; (800c8b0 <tcp_input+0x7c0>)
 800c7e0:	681a      	ldr	r2, [r3, #0]
 800c7e2:	2300      	movs	r3, #0
 800c7e4:	69f9      	ldr	r1, [r7, #28]
 800c7e6:	2000      	movs	r0, #0
 800c7e8:	f7ff f8e8 	bl	800b9bc <tcp_recv_null>
 800c7ec:	4603      	mov	r3, r0
 800c7ee:	74fb      	strb	r3, [r7, #19]
          if (err == ERR_ABRT) {
 800c7f0:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800c7f4:	f113 0f0d 	cmn.w	r3, #13
 800c7f8:	d051      	beq.n	800c89e <tcp_input+0x7ae>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            goto aborted;
          }

          /* If the upper layer can't receive this data, store it */
          if (err != ERR_OK) {
 800c7fa:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800c7fe:	2b00      	cmp	r3, #0
 800c800:	d003      	beq.n	800c80a <tcp_input+0x71a>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_cat(recv_data, rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            pcb->refused_data = recv_data;
 800c802:	4b2b      	ldr	r3, [pc, #172]	; (800c8b0 <tcp_input+0x7c0>)
 800c804:	681a      	ldr	r2, [r3, #0]
 800c806:	69fb      	ldr	r3, [r7, #28]
 800c808:	679a      	str	r2, [r3, #120]	; 0x78
          }
        }

        /* If a FIN segment was received, we call the callback
           function with a NULL buffer to indicate EOF. */
        if (recv_flags & TF_GOT_FIN) {
 800c80a:	4b2a      	ldr	r3, [pc, #168]	; (800c8b4 <tcp_input+0x7c4>)
 800c80c:	781b      	ldrb	r3, [r3, #0]
 800c80e:	f003 0320 	and.w	r3, r3, #32
 800c812:	2b00      	cmp	r3, #0
 800c814:	d030      	beq.n	800c878 <tcp_input+0x788>
          if (pcb->refused_data != NULL) {
 800c816:	69fb      	ldr	r3, [r7, #28]
 800c818:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800c81a:	2b00      	cmp	r3, #0
 800c81c:	d009      	beq.n	800c832 <tcp_input+0x742>
            /* Delay this if we have refused data. */
            pcb->refused_data->flags |= PBUF_FLAG_TCP_FIN;
 800c81e:	69fb      	ldr	r3, [r7, #28]
 800c820:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800c822:	7b5a      	ldrb	r2, [r3, #13]
 800c824:	69fb      	ldr	r3, [r7, #28]
 800c826:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800c828:	f042 0220 	orr.w	r2, r2, #32
 800c82c:	b2d2      	uxtb	r2, r2
 800c82e:	735a      	strb	r2, [r3, #13]
 800c830:	e022      	b.n	800c878 <tcp_input+0x788>
          } else {
            /* correct rcv_wnd as the application won't call tcp_recved()
               for the FIN's seqno */
            if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 800c832:	69fb      	ldr	r3, [r7, #28]
 800c834:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800c836:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 800c83a:	d005      	beq.n	800c848 <tcp_input+0x758>
              pcb->rcv_wnd++;
 800c83c:	69fb      	ldr	r3, [r7, #28]
 800c83e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800c840:	3301      	adds	r3, #1
 800c842:	b29a      	uxth	r2, r3
 800c844:	69fb      	ldr	r3, [r7, #28]
 800c846:	851a      	strh	r2, [r3, #40]	; 0x28
            }
            TCP_EVENT_CLOSED(pcb, err);
 800c848:	69fb      	ldr	r3, [r7, #28]
 800c84a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800c84e:	2b00      	cmp	r3, #0
 800c850:	d00b      	beq.n	800c86a <tcp_input+0x77a>
 800c852:	69fb      	ldr	r3, [r7, #28]
 800c854:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 800c858:	69fb      	ldr	r3, [r7, #28]
 800c85a:	6918      	ldr	r0, [r3, #16]
 800c85c:	2300      	movs	r3, #0
 800c85e:	2200      	movs	r2, #0
 800c860:	69f9      	ldr	r1, [r7, #28]
 800c862:	47a0      	blx	r4
 800c864:	4603      	mov	r3, r0
 800c866:	74fb      	strb	r3, [r7, #19]
 800c868:	e001      	b.n	800c86e <tcp_input+0x77e>
 800c86a:	2300      	movs	r3, #0
 800c86c:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 800c86e:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800c872:	f113 0f0d 	cmn.w	r3, #13
 800c876:	d02f      	beq.n	800c8d8 <tcp_input+0x7e8>
              goto aborted;
            }
          }
        }

        tcp_input_pcb = NULL;
 800c878:	4b12      	ldr	r3, [pc, #72]	; (800c8c4 <tcp_input+0x7d4>)
 800c87a:	2200      	movs	r2, #0
 800c87c:	601a      	str	r2, [r3, #0]
        if (tcp_input_delayed_close(pcb)) {
 800c87e:	69f8      	ldr	r0, [r7, #28]
 800c880:	f000 f89e 	bl	800c9c0 <tcp_input_delayed_close>
 800c884:	4603      	mov	r3, r0
 800c886:	2b00      	cmp	r3, #0
 800c888:	d128      	bne.n	800c8dc <tcp_input+0x7ec>
          goto aborted;
        }
        /* Try to send something out. */
        tcp_output(pcb);
 800c88a:	69f8      	ldr	r0, [r7, #28]
 800c88c:	f002 fb08 	bl	800eea0 <tcp_output>
 800c890:	e025      	b.n	800c8de <tcp_input+0x7ee>
#endif /* TCP_INPUT_DEBUG */
      }
    }
    /* Jump target if pcb has been aborted in a callback (by calling tcp_abort()).
       Below this line, 'pcb' may not be dereferenced! */
aborted:
 800c892:	bf00      	nop
 800c894:	e023      	b.n	800c8de <tcp_input+0x7ee>
              goto aborted;
 800c896:	bf00      	nop
 800c898:	e021      	b.n	800c8de <tcp_input+0x7ee>
          goto aborted;
 800c89a:	bf00      	nop
 800c89c:	e01f      	b.n	800c8de <tcp_input+0x7ee>
            goto aborted;
 800c89e:	bf00      	nop
 800c8a0:	e01d      	b.n	800c8de <tcp_input+0x7ee>
 800c8a2:	bf00      	nop
 800c8a4:	2000c64c 	.word	0x2000c64c
 800c8a8:	2000c760 	.word	0x2000c760
 800c8ac:	2000c770 	.word	0x2000c770
 800c8b0:	2000c790 	.word	0x2000c790
 800c8b4:	2000c78d 	.word	0x2000c78d
 800c8b8:	2000c788 	.word	0x2000c788
 800c8bc:	2000c78c 	.word	0x2000c78c
 800c8c0:	2000c78a 	.word	0x2000c78a
 800c8c4:	2000c794 	.word	0x2000c794
 800c8c8:	2000c754 	.word	0x2000c754
 800c8cc:	08015ba8 	.word	0x08015ba8
 800c8d0:	08015d5c 	.word	0x08015d5c
 800c8d4:	08015bf4 	.word	0x08015bf4
              goto aborted;
 800c8d8:	bf00      	nop
 800c8da:	e000      	b.n	800c8de <tcp_input+0x7ee>
          goto aborted;
 800c8dc:	bf00      	nop
    tcp_input_pcb = NULL;
 800c8de:	4b2e      	ldr	r3, [pc, #184]	; (800c998 <tcp_input+0x8a8>)
 800c8e0:	2200      	movs	r2, #0
 800c8e2:	601a      	str	r2, [r3, #0]
    recv_data = NULL;
 800c8e4:	4b2d      	ldr	r3, [pc, #180]	; (800c99c <tcp_input+0x8ac>)
 800c8e6:	2200      	movs	r2, #0
 800c8e8:	601a      	str	r2, [r3, #0]

    /* give up our reference to inseg.p */
    if (inseg.p != NULL) {
 800c8ea:	4b2d      	ldr	r3, [pc, #180]	; (800c9a0 <tcp_input+0x8b0>)
 800c8ec:	685b      	ldr	r3, [r3, #4]
 800c8ee:	2b00      	cmp	r3, #0
 800c8f0:	d04e      	beq.n	800c990 <tcp_input+0x8a0>
      pbuf_free(inseg.p);
 800c8f2:	4b2b      	ldr	r3, [pc, #172]	; (800c9a0 <tcp_input+0x8b0>)
 800c8f4:	685b      	ldr	r3, [r3, #4]
 800c8f6:	4618      	mov	r0, r3
 800c8f8:	f7fd fd84 	bl	800a404 <pbuf_free>
      inseg.p = NULL;
 800c8fc:	4b28      	ldr	r3, [pc, #160]	; (800c9a0 <tcp_input+0x8b0>)
 800c8fe:	2200      	movs	r2, #0
 800c900:	605a      	str	r2, [r3, #4]
    pbuf_free(p);
  }

  LWIP_ASSERT("tcp_input: tcp_pcbs_sane()", tcp_pcbs_sane());
  PERF_STOP("tcp_input");
  return;
 800c902:	e045      	b.n	800c990 <tcp_input+0x8a0>
    if (!(TCPH_FLAGS(tcphdr) & TCP_RST)) {
 800c904:	4b27      	ldr	r3, [pc, #156]	; (800c9a4 <tcp_input+0x8b4>)
 800c906:	681b      	ldr	r3, [r3, #0]
 800c908:	899b      	ldrh	r3, [r3, #12]
 800c90a:	b29b      	uxth	r3, r3
 800c90c:	4618      	mov	r0, r3
 800c90e:	f7fc f8b7 	bl	8008a80 <lwip_htons>
 800c912:	4603      	mov	r3, r0
 800c914:	b2db      	uxtb	r3, r3
 800c916:	f003 0304 	and.w	r3, r3, #4
 800c91a:	2b00      	cmp	r3, #0
 800c91c:	d128      	bne.n	800c970 <tcp_input+0x880>
      TCP_STATS_INC(tcp.proterr);
 800c91e:	4b22      	ldr	r3, [pc, #136]	; (800c9a8 <tcp_input+0x8b8>)
 800c920:	f8b3 30a0 	ldrh.w	r3, [r3, #160]	; 0xa0
 800c924:	3301      	adds	r3, #1
 800c926:	b29a      	uxth	r2, r3
 800c928:	4b1f      	ldr	r3, [pc, #124]	; (800c9a8 <tcp_input+0x8b8>)
 800c92a:	f8a3 20a0 	strh.w	r2, [r3, #160]	; 0xa0
      TCP_STATS_INC(tcp.drop);
 800c92e:	4b1e      	ldr	r3, [pc, #120]	; (800c9a8 <tcp_input+0x8b8>)
 800c930:	f8b3 3096 	ldrh.w	r3, [r3, #150]	; 0x96
 800c934:	3301      	adds	r3, #1
 800c936:	b29a      	uxth	r2, r3
 800c938:	4b1b      	ldr	r3, [pc, #108]	; (800c9a8 <tcp_input+0x8b8>)
 800c93a:	f8a3 2096 	strh.w	r2, [r3, #150]	; 0x96
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 800c93e:	4b1b      	ldr	r3, [pc, #108]	; (800c9ac <tcp_input+0x8bc>)
 800c940:	6819      	ldr	r1, [r3, #0]
 800c942:	4b1b      	ldr	r3, [pc, #108]	; (800c9b0 <tcp_input+0x8c0>)
 800c944:	881b      	ldrh	r3, [r3, #0]
 800c946:	461a      	mov	r2, r3
 800c948:	4b1a      	ldr	r3, [pc, #104]	; (800c9b4 <tcp_input+0x8c4>)
 800c94a:	681b      	ldr	r3, [r3, #0]
 800c94c:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800c94e:	4b15      	ldr	r3, [pc, #84]	; (800c9a4 <tcp_input+0x8b4>)
 800c950:	681b      	ldr	r3, [r3, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 800c952:	885b      	ldrh	r3, [r3, #2]
 800c954:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800c956:	4a13      	ldr	r2, [pc, #76]	; (800c9a4 <tcp_input+0x8b4>)
 800c958:	6812      	ldr	r2, [r2, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 800c95a:	8812      	ldrh	r2, [r2, #0]
 800c95c:	b292      	uxth	r2, r2
 800c95e:	9202      	str	r2, [sp, #8]
 800c960:	9301      	str	r3, [sp, #4]
 800c962:	4b15      	ldr	r3, [pc, #84]	; (800c9b8 <tcp_input+0x8c8>)
 800c964:	9300      	str	r3, [sp, #0]
 800c966:	4b15      	ldr	r3, [pc, #84]	; (800c9bc <tcp_input+0x8cc>)
 800c968:	4602      	mov	r2, r0
 800c96a:	2000      	movs	r0, #0
 800c96c:	f003 f860 	bl	800fa30 <tcp_rst>
    pbuf_free(p);
 800c970:	6878      	ldr	r0, [r7, #4]
 800c972:	f7fd fd47 	bl	800a404 <pbuf_free>
  return;
 800c976:	e00b      	b.n	800c990 <tcp_input+0x8a0>
dropped:
  TCP_STATS_INC(tcp.drop);
 800c978:	4b0b      	ldr	r3, [pc, #44]	; (800c9a8 <tcp_input+0x8b8>)
 800c97a:	f8b3 3096 	ldrh.w	r3, [r3, #150]	; 0x96
 800c97e:	3301      	adds	r3, #1
 800c980:	b29a      	uxth	r2, r3
 800c982:	4b09      	ldr	r3, [pc, #36]	; (800c9a8 <tcp_input+0x8b8>)
 800c984:	f8a3 2096 	strh.w	r2, [r3, #150]	; 0x96
  MIB2_STATS_INC(mib2.tcpinerrs);
  pbuf_free(p);
 800c988:	6878      	ldr	r0, [r7, #4]
 800c98a:	f7fd fd3b 	bl	800a404 <pbuf_free>
 800c98e:	e000      	b.n	800c992 <tcp_input+0x8a2>
  return;
 800c990:	bf00      	nop
}
 800c992:	3724      	adds	r7, #36	; 0x24
 800c994:	46bd      	mov	sp, r7
 800c996:	bd90      	pop	{r4, r7, pc}
 800c998:	2000c794 	.word	0x2000c794
 800c99c:	2000c790 	.word	0x2000c790
 800c9a0:	2000c760 	.word	0x2000c760
 800c9a4:	2000c770 	.word	0x2000c770
 800c9a8:	2000c64c 	.word	0x2000c64c
 800c9ac:	2000c784 	.word	0x2000c784
 800c9b0:	2000c78a 	.word	0x2000c78a
 800c9b4:	2000c780 	.word	0x2000c780
 800c9b8:	20008e6c 	.word	0x20008e6c
 800c9bc:	20008e70 	.word	0x20008e70

0800c9c0 <tcp_input_delayed_close>:
 * any more.
 * @returns 1 if the pcb has been closed and deallocated, 0 otherwise
 */
static int
tcp_input_delayed_close(struct tcp_pcb *pcb)
{
 800c9c0:	b580      	push	{r7, lr}
 800c9c2:	b082      	sub	sp, #8
 800c9c4:	af00      	add	r7, sp, #0
 800c9c6:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_input_delayed_close: invalid pcb", pcb != NULL);
 800c9c8:	687b      	ldr	r3, [r7, #4]
 800c9ca:	2b00      	cmp	r3, #0
 800c9cc:	d106      	bne.n	800c9dc <tcp_input_delayed_close+0x1c>
 800c9ce:	4b17      	ldr	r3, [pc, #92]	; (800ca2c <tcp_input_delayed_close+0x6c>)
 800c9d0:	f240 225a 	movw	r2, #602	; 0x25a
 800c9d4:	4916      	ldr	r1, [pc, #88]	; (800ca30 <tcp_input_delayed_close+0x70>)
 800c9d6:	4817      	ldr	r0, [pc, #92]	; (800ca34 <tcp_input_delayed_close+0x74>)
 800c9d8:	f006 ffc6 	bl	8013968 <iprintf>

  if (recv_flags & TF_CLOSED) {
 800c9dc:	4b16      	ldr	r3, [pc, #88]	; (800ca38 <tcp_input_delayed_close+0x78>)
 800c9de:	781b      	ldrb	r3, [r3, #0]
 800c9e0:	f003 0310 	and.w	r3, r3, #16
 800c9e4:	2b00      	cmp	r3, #0
 800c9e6:	d01c      	beq.n	800ca22 <tcp_input_delayed_close+0x62>
    /* The connection has been closed and we will deallocate the
        PCB. */
    if (!(pcb->flags & TF_RXCLOSED)) {
 800c9e8:	687b      	ldr	r3, [r7, #4]
 800c9ea:	8b5b      	ldrh	r3, [r3, #26]
 800c9ec:	f003 0310 	and.w	r3, r3, #16
 800c9f0:	2b00      	cmp	r3, #0
 800c9f2:	d10d      	bne.n	800ca10 <tcp_input_delayed_close+0x50>
      /* Connection closed although the application has only shut down the
          tx side: call the PCB's err callback and indicate the closure to
          ensure the application doesn't continue using the PCB. */
      TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_CLSD);
 800c9f4:	687b      	ldr	r3, [r7, #4]
 800c9f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c9fa:	2b00      	cmp	r3, #0
 800c9fc:	d008      	beq.n	800ca10 <tcp_input_delayed_close+0x50>
 800c9fe:	687b      	ldr	r3, [r7, #4]
 800ca00:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800ca04:	687a      	ldr	r2, [r7, #4]
 800ca06:	6912      	ldr	r2, [r2, #16]
 800ca08:	f06f 010e 	mvn.w	r1, #14
 800ca0c:	4610      	mov	r0, r2
 800ca0e:	4798      	blx	r3
    }
    tcp_pcb_remove(&tcp_active_pcbs, pcb);
 800ca10:	6879      	ldr	r1, [r7, #4]
 800ca12:	480a      	ldr	r0, [pc, #40]	; (800ca3c <tcp_input_delayed_close+0x7c>)
 800ca14:	f7ff f9f4 	bl	800be00 <tcp_pcb_remove>
    tcp_free(pcb);
 800ca18:	6878      	ldr	r0, [r7, #4]
 800ca1a:	f7fd ffb7 	bl	800a98c <tcp_free>
    return 1;
 800ca1e:	2301      	movs	r3, #1
 800ca20:	e000      	b.n	800ca24 <tcp_input_delayed_close+0x64>
  }
  return 0;
 800ca22:	2300      	movs	r3, #0
}
 800ca24:	4618      	mov	r0, r3
 800ca26:	3708      	adds	r7, #8
 800ca28:	46bd      	mov	sp, r7
 800ca2a:	bd80      	pop	{r7, pc}
 800ca2c:	08015ba8 	.word	0x08015ba8
 800ca30:	08015d78 	.word	0x08015d78
 800ca34:	08015bf4 	.word	0x08015bf4
 800ca38:	2000c78d 	.word	0x2000c78d
 800ca3c:	2000c754 	.word	0x2000c754

0800ca40 <tcp_listen_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_listen_input(struct tcp_pcb_listen *pcb)
{
 800ca40:	b590      	push	{r4, r7, lr}
 800ca42:	b08b      	sub	sp, #44	; 0x2c
 800ca44:	af04      	add	r7, sp, #16
 800ca46:	6078      	str	r0, [r7, #4]
  struct tcp_pcb *npcb;
  u32_t iss;
  err_t rc;

  if (flags & TCP_RST) {
 800ca48:	4b73      	ldr	r3, [pc, #460]	; (800cc18 <tcp_listen_input+0x1d8>)
 800ca4a:	781b      	ldrb	r3, [r3, #0]
 800ca4c:	f003 0304 	and.w	r3, r3, #4
 800ca50:	2b00      	cmp	r3, #0
 800ca52:	f040 80da 	bne.w	800cc0a <tcp_listen_input+0x1ca>
    /* An incoming RST should be ignored. Return. */
    return;
  }

  LWIP_ASSERT("tcp_listen_input: invalid pcb", pcb != NULL);
 800ca56:	687b      	ldr	r3, [r7, #4]
 800ca58:	2b00      	cmp	r3, #0
 800ca5a:	d106      	bne.n	800ca6a <tcp_listen_input+0x2a>
 800ca5c:	4b6f      	ldr	r3, [pc, #444]	; (800cc1c <tcp_listen_input+0x1dc>)
 800ca5e:	f240 2281 	movw	r2, #641	; 0x281
 800ca62:	496f      	ldr	r1, [pc, #444]	; (800cc20 <tcp_listen_input+0x1e0>)
 800ca64:	486f      	ldr	r0, [pc, #444]	; (800cc24 <tcp_listen_input+0x1e4>)
 800ca66:	f006 ff7f 	bl	8013968 <iprintf>

  /* In the LISTEN state, we check for incoming SYN segments,
     creates a new PCB, and responds with a SYN|ACK. */
  if (flags & TCP_ACK) {
 800ca6a:	4b6b      	ldr	r3, [pc, #428]	; (800cc18 <tcp_listen_input+0x1d8>)
 800ca6c:	781b      	ldrb	r3, [r3, #0]
 800ca6e:	f003 0310 	and.w	r3, r3, #16
 800ca72:	2b00      	cmp	r3, #0
 800ca74:	d019      	beq.n	800caaa <tcp_listen_input+0x6a>
    /* For incoming segments with the ACK flag set, respond with a
       RST. */
    LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_listen_input: ACK in LISTEN, sending reset\n"));
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800ca76:	4b6c      	ldr	r3, [pc, #432]	; (800cc28 <tcp_listen_input+0x1e8>)
 800ca78:	6819      	ldr	r1, [r3, #0]
 800ca7a:	4b6c      	ldr	r3, [pc, #432]	; (800cc2c <tcp_listen_input+0x1ec>)
 800ca7c:	881b      	ldrh	r3, [r3, #0]
 800ca7e:	461a      	mov	r2, r3
 800ca80:	4b6b      	ldr	r3, [pc, #428]	; (800cc30 <tcp_listen_input+0x1f0>)
 800ca82:	681b      	ldr	r3, [r3, #0]
 800ca84:	18d0      	adds	r0, r2, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800ca86:	4b6b      	ldr	r3, [pc, #428]	; (800cc34 <tcp_listen_input+0x1f4>)
 800ca88:	681b      	ldr	r3, [r3, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800ca8a:	885b      	ldrh	r3, [r3, #2]
 800ca8c:	b29b      	uxth	r3, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800ca8e:	4a69      	ldr	r2, [pc, #420]	; (800cc34 <tcp_listen_input+0x1f4>)
 800ca90:	6812      	ldr	r2, [r2, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800ca92:	8812      	ldrh	r2, [r2, #0]
 800ca94:	b292      	uxth	r2, r2
 800ca96:	9202      	str	r2, [sp, #8]
 800ca98:	9301      	str	r3, [sp, #4]
 800ca9a:	4b67      	ldr	r3, [pc, #412]	; (800cc38 <tcp_listen_input+0x1f8>)
 800ca9c:	9300      	str	r3, [sp, #0]
 800ca9e:	4b67      	ldr	r3, [pc, #412]	; (800cc3c <tcp_listen_input+0x1fc>)
 800caa0:	4602      	mov	r2, r0
 800caa2:	6878      	ldr	r0, [r7, #4]
 800caa4:	f002 ffc4 	bl	800fa30 <tcp_rst>
      tcp_abandon(npcb, 0);
      return;
    }
    tcp_output(npcb);
  }
  return;
 800caa8:	e0b1      	b.n	800cc0e <tcp_listen_input+0x1ce>
  } else if (flags & TCP_SYN) {
 800caaa:	4b5b      	ldr	r3, [pc, #364]	; (800cc18 <tcp_listen_input+0x1d8>)
 800caac:	781b      	ldrb	r3, [r3, #0]
 800caae:	f003 0302 	and.w	r3, r3, #2
 800cab2:	2b00      	cmp	r3, #0
 800cab4:	f000 80ab 	beq.w	800cc0e <tcp_listen_input+0x1ce>
    npcb = tcp_alloc(pcb->prio);
 800cab8:	687b      	ldr	r3, [r7, #4]
 800caba:	7d5b      	ldrb	r3, [r3, #21]
 800cabc:	4618      	mov	r0, r3
 800cabe:	f7ff f8a1 	bl	800bc04 <tcp_alloc>
 800cac2:	6178      	str	r0, [r7, #20]
    if (npcb == NULL) {
 800cac4:	697b      	ldr	r3, [r7, #20]
 800cac6:	2b00      	cmp	r3, #0
 800cac8:	d119      	bne.n	800cafe <tcp_listen_input+0xbe>
      TCP_STATS_INC(tcp.memerr);
 800caca:	4b5d      	ldr	r3, [pc, #372]	; (800cc40 <tcp_listen_input+0x200>)
 800cacc:	f8b3 309c 	ldrh.w	r3, [r3, #156]	; 0x9c
 800cad0:	3301      	adds	r3, #1
 800cad2:	b29a      	uxth	r2, r3
 800cad4:	4b5a      	ldr	r3, [pc, #360]	; (800cc40 <tcp_listen_input+0x200>)
 800cad6:	f8a3 209c 	strh.w	r2, [r3, #156]	; 0x9c
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 800cada:	687b      	ldr	r3, [r7, #4]
 800cadc:	699b      	ldr	r3, [r3, #24]
 800cade:	2b00      	cmp	r3, #0
 800cae0:	d00a      	beq.n	800caf8 <tcp_listen_input+0xb8>
 800cae2:	687b      	ldr	r3, [r7, #4]
 800cae4:	699b      	ldr	r3, [r3, #24]
 800cae6:	687a      	ldr	r2, [r7, #4]
 800cae8:	6910      	ldr	r0, [r2, #16]
 800caea:	f04f 32ff 	mov.w	r2, #4294967295
 800caee:	2100      	movs	r1, #0
 800caf0:	4798      	blx	r3
 800caf2:	4603      	mov	r3, r0
 800caf4:	73bb      	strb	r3, [r7, #14]
      return;
 800caf6:	e08b      	b.n	800cc10 <tcp_listen_input+0x1d0>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 800caf8:	23f0      	movs	r3, #240	; 0xf0
 800cafa:	73bb      	strb	r3, [r7, #14]
      return;
 800cafc:	e088      	b.n	800cc10 <tcp_listen_input+0x1d0>
    ip_addr_copy(npcb->local_ip, *ip_current_dest_addr());
 800cafe:	4b51      	ldr	r3, [pc, #324]	; (800cc44 <tcp_listen_input+0x204>)
 800cb00:	695a      	ldr	r2, [r3, #20]
 800cb02:	697b      	ldr	r3, [r7, #20]
 800cb04:	601a      	str	r2, [r3, #0]
    ip_addr_copy(npcb->remote_ip, *ip_current_src_addr());
 800cb06:	4b4f      	ldr	r3, [pc, #316]	; (800cc44 <tcp_listen_input+0x204>)
 800cb08:	691a      	ldr	r2, [r3, #16]
 800cb0a:	697b      	ldr	r3, [r7, #20]
 800cb0c:	605a      	str	r2, [r3, #4]
    npcb->local_port = pcb->local_port;
 800cb0e:	687b      	ldr	r3, [r7, #4]
 800cb10:	8ada      	ldrh	r2, [r3, #22]
 800cb12:	697b      	ldr	r3, [r7, #20]
 800cb14:	82da      	strh	r2, [r3, #22]
    npcb->remote_port = tcphdr->src;
 800cb16:	4b47      	ldr	r3, [pc, #284]	; (800cc34 <tcp_listen_input+0x1f4>)
 800cb18:	681b      	ldr	r3, [r3, #0]
 800cb1a:	881b      	ldrh	r3, [r3, #0]
 800cb1c:	b29a      	uxth	r2, r3
 800cb1e:	697b      	ldr	r3, [r7, #20]
 800cb20:	831a      	strh	r2, [r3, #24]
    npcb->state = SYN_RCVD;
 800cb22:	697b      	ldr	r3, [r7, #20]
 800cb24:	2203      	movs	r2, #3
 800cb26:	751a      	strb	r2, [r3, #20]
    npcb->rcv_nxt = seqno + 1;
 800cb28:	4b41      	ldr	r3, [pc, #260]	; (800cc30 <tcp_listen_input+0x1f0>)
 800cb2a:	681b      	ldr	r3, [r3, #0]
 800cb2c:	1c5a      	adds	r2, r3, #1
 800cb2e:	697b      	ldr	r3, [r7, #20]
 800cb30:	625a      	str	r2, [r3, #36]	; 0x24
    npcb->rcv_ann_right_edge = npcb->rcv_nxt;
 800cb32:	697b      	ldr	r3, [r7, #20]
 800cb34:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800cb36:	697b      	ldr	r3, [r7, #20]
 800cb38:	62da      	str	r2, [r3, #44]	; 0x2c
    iss = tcp_next_iss(npcb);
 800cb3a:	6978      	ldr	r0, [r7, #20]
 800cb3c:	f7ff f9f4 	bl	800bf28 <tcp_next_iss>
 800cb40:	6138      	str	r0, [r7, #16]
    npcb->snd_wl2 = iss;
 800cb42:	697b      	ldr	r3, [r7, #20]
 800cb44:	693a      	ldr	r2, [r7, #16]
 800cb46:	659a      	str	r2, [r3, #88]	; 0x58
    npcb->snd_nxt = iss;
 800cb48:	697b      	ldr	r3, [r7, #20]
 800cb4a:	693a      	ldr	r2, [r7, #16]
 800cb4c:	651a      	str	r2, [r3, #80]	; 0x50
    npcb->lastack = iss;
 800cb4e:	697b      	ldr	r3, [r7, #20]
 800cb50:	693a      	ldr	r2, [r7, #16]
 800cb52:	645a      	str	r2, [r3, #68]	; 0x44
    npcb->snd_lbb = iss;
 800cb54:	697b      	ldr	r3, [r7, #20]
 800cb56:	693a      	ldr	r2, [r7, #16]
 800cb58:	65da      	str	r2, [r3, #92]	; 0x5c
    npcb->snd_wl1 = seqno - 1;/* initialise to seqno-1 to force window update */
 800cb5a:	4b35      	ldr	r3, [pc, #212]	; (800cc30 <tcp_listen_input+0x1f0>)
 800cb5c:	681b      	ldr	r3, [r3, #0]
 800cb5e:	1e5a      	subs	r2, r3, #1
 800cb60:	697b      	ldr	r3, [r7, #20]
 800cb62:	655a      	str	r2, [r3, #84]	; 0x54
    npcb->callback_arg = pcb->callback_arg;
 800cb64:	687b      	ldr	r3, [r7, #4]
 800cb66:	691a      	ldr	r2, [r3, #16]
 800cb68:	697b      	ldr	r3, [r7, #20]
 800cb6a:	611a      	str	r2, [r3, #16]
    npcb->listener = pcb;
 800cb6c:	697b      	ldr	r3, [r7, #20]
 800cb6e:	687a      	ldr	r2, [r7, #4]
 800cb70:	67da      	str	r2, [r3, #124]	; 0x7c
    npcb->so_options = pcb->so_options & SOF_INHERITED;
 800cb72:	687b      	ldr	r3, [r7, #4]
 800cb74:	7a5b      	ldrb	r3, [r3, #9]
 800cb76:	f003 030c 	and.w	r3, r3, #12
 800cb7a:	b2da      	uxtb	r2, r3
 800cb7c:	697b      	ldr	r3, [r7, #20]
 800cb7e:	725a      	strb	r2, [r3, #9]
    npcb->netif_idx = pcb->netif_idx;
 800cb80:	687b      	ldr	r3, [r7, #4]
 800cb82:	7a1a      	ldrb	r2, [r3, #8]
 800cb84:	697b      	ldr	r3, [r7, #20]
 800cb86:	721a      	strb	r2, [r3, #8]
    TCP_REG_ACTIVE(npcb);
 800cb88:	4b2f      	ldr	r3, [pc, #188]	; (800cc48 <tcp_listen_input+0x208>)
 800cb8a:	681a      	ldr	r2, [r3, #0]
 800cb8c:	697b      	ldr	r3, [r7, #20]
 800cb8e:	60da      	str	r2, [r3, #12]
 800cb90:	4a2d      	ldr	r2, [pc, #180]	; (800cc48 <tcp_listen_input+0x208>)
 800cb92:	697b      	ldr	r3, [r7, #20]
 800cb94:	6013      	str	r3, [r2, #0]
 800cb96:	f003 f90d 	bl	800fdb4 <tcp_timer_needed>
 800cb9a:	4b2c      	ldr	r3, [pc, #176]	; (800cc4c <tcp_listen_input+0x20c>)
 800cb9c:	2201      	movs	r2, #1
 800cb9e:	701a      	strb	r2, [r3, #0]
    tcp_parseopt(npcb);
 800cba0:	6978      	ldr	r0, [r7, #20]
 800cba2:	f001 fd91 	bl	800e6c8 <tcp_parseopt>
    npcb->snd_wnd = tcphdr->wnd;
 800cba6:	4b23      	ldr	r3, [pc, #140]	; (800cc34 <tcp_listen_input+0x1f4>)
 800cba8:	681b      	ldr	r3, [r3, #0]
 800cbaa:	89db      	ldrh	r3, [r3, #14]
 800cbac:	b29a      	uxth	r2, r3
 800cbae:	697b      	ldr	r3, [r7, #20]
 800cbb0:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
    npcb->snd_wnd_max = npcb->snd_wnd;
 800cbb4:	697b      	ldr	r3, [r7, #20]
 800cbb6:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800cbba:	697b      	ldr	r3, [r7, #20]
 800cbbc:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
 800cbc0:	697b      	ldr	r3, [r7, #20]
 800cbc2:	8e5c      	ldrh	r4, [r3, #50]	; 0x32
 800cbc4:	697b      	ldr	r3, [r7, #20]
 800cbc6:	3304      	adds	r3, #4
 800cbc8:	4618      	mov	r0, r3
 800cbca:	f005 f8e5 	bl	8011d98 <ip4_route>
 800cbce:	4601      	mov	r1, r0
 800cbd0:	697b      	ldr	r3, [r7, #20]
 800cbd2:	3304      	adds	r3, #4
 800cbd4:	461a      	mov	r2, r3
 800cbd6:	4620      	mov	r0, r4
 800cbd8:	f7ff f9cc 	bl	800bf74 <tcp_eff_send_mss_netif>
 800cbdc:	4603      	mov	r3, r0
 800cbde:	461a      	mov	r2, r3
 800cbe0:	697b      	ldr	r3, [r7, #20]
 800cbe2:	865a      	strh	r2, [r3, #50]	; 0x32
    rc = tcp_enqueue_flags(npcb, TCP_SYN | TCP_ACK);
 800cbe4:	2112      	movs	r1, #18
 800cbe6:	6978      	ldr	r0, [r7, #20]
 800cbe8:	f002 f85a 	bl	800eca0 <tcp_enqueue_flags>
 800cbec:	4603      	mov	r3, r0
 800cbee:	73fb      	strb	r3, [r7, #15]
    if (rc != ERR_OK) {
 800cbf0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800cbf4:	2b00      	cmp	r3, #0
 800cbf6:	d004      	beq.n	800cc02 <tcp_listen_input+0x1c2>
      tcp_abandon(npcb, 0);
 800cbf8:	2100      	movs	r1, #0
 800cbfa:	6978      	ldr	r0, [r7, #20]
 800cbfc:	f7fe f8f0 	bl	800ade0 <tcp_abandon>
      return;
 800cc00:	e006      	b.n	800cc10 <tcp_listen_input+0x1d0>
    tcp_output(npcb);
 800cc02:	6978      	ldr	r0, [r7, #20]
 800cc04:	f002 f94c 	bl	800eea0 <tcp_output>
  return;
 800cc08:	e001      	b.n	800cc0e <tcp_listen_input+0x1ce>
    return;
 800cc0a:	bf00      	nop
 800cc0c:	e000      	b.n	800cc10 <tcp_listen_input+0x1d0>
  return;
 800cc0e:	bf00      	nop
}
 800cc10:	371c      	adds	r7, #28
 800cc12:	46bd      	mov	sp, r7
 800cc14:	bd90      	pop	{r4, r7, pc}
 800cc16:	bf00      	nop
 800cc18:	2000c78c 	.word	0x2000c78c
 800cc1c:	08015ba8 	.word	0x08015ba8
 800cc20:	08015da0 	.word	0x08015da0
 800cc24:	08015bf4 	.word	0x08015bf4
 800cc28:	2000c784 	.word	0x2000c784
 800cc2c:	2000c78a 	.word	0x2000c78a
 800cc30:	2000c780 	.word	0x2000c780
 800cc34:	2000c770 	.word	0x2000c770
 800cc38:	20008e6c 	.word	0x20008e6c
 800cc3c:	20008e70 	.word	0x20008e70
 800cc40:	2000c64c 	.word	0x2000c64c
 800cc44:	20008e5c 	.word	0x20008e5c
 800cc48:	2000c754 	.word	0x2000c754
 800cc4c:	2000c75c 	.word	0x2000c75c

0800cc50 <tcp_timewait_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_timewait_input(struct tcp_pcb *pcb)
{
 800cc50:	b580      	push	{r7, lr}
 800cc52:	b086      	sub	sp, #24
 800cc54:	af04      	add	r7, sp, #16
 800cc56:	6078      	str	r0, [r7, #4]
  /* RFC 1337: in TIME_WAIT, ignore RST and ACK FINs + any 'acceptable' segments */
  /* RFC 793 3.9 Event Processing - Segment Arrives:
   * - first check sequence number - we skip that one in TIME_WAIT (always
   *   acceptable since we only send ACKs)
   * - second check the RST bit (... return) */
  if (flags & TCP_RST) {
 800cc58:	4b2f      	ldr	r3, [pc, #188]	; (800cd18 <tcp_timewait_input+0xc8>)
 800cc5a:	781b      	ldrb	r3, [r3, #0]
 800cc5c:	f003 0304 	and.w	r3, r3, #4
 800cc60:	2b00      	cmp	r3, #0
 800cc62:	d153      	bne.n	800cd0c <tcp_timewait_input+0xbc>
    return;
  }

  LWIP_ASSERT("tcp_timewait_input: invalid pcb", pcb != NULL);
 800cc64:	687b      	ldr	r3, [r7, #4]
 800cc66:	2b00      	cmp	r3, #0
 800cc68:	d106      	bne.n	800cc78 <tcp_timewait_input+0x28>
 800cc6a:	4b2c      	ldr	r3, [pc, #176]	; (800cd1c <tcp_timewait_input+0xcc>)
 800cc6c:	f240 22ee 	movw	r2, #750	; 0x2ee
 800cc70:	492b      	ldr	r1, [pc, #172]	; (800cd20 <tcp_timewait_input+0xd0>)
 800cc72:	482c      	ldr	r0, [pc, #176]	; (800cd24 <tcp_timewait_input+0xd4>)
 800cc74:	f006 fe78 	bl	8013968 <iprintf>

  /* - fourth, check the SYN bit, */
  if (flags & TCP_SYN) {
 800cc78:	4b27      	ldr	r3, [pc, #156]	; (800cd18 <tcp_timewait_input+0xc8>)
 800cc7a:	781b      	ldrb	r3, [r3, #0]
 800cc7c:	f003 0302 	and.w	r3, r3, #2
 800cc80:	2b00      	cmp	r3, #0
 800cc82:	d02a      	beq.n	800ccda <tcp_timewait_input+0x8a>
    /* If an incoming segment is not acceptable, an acknowledgment
       should be sent in reply */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd)) {
 800cc84:	4b28      	ldr	r3, [pc, #160]	; (800cd28 <tcp_timewait_input+0xd8>)
 800cc86:	681a      	ldr	r2, [r3, #0]
 800cc88:	687b      	ldr	r3, [r7, #4]
 800cc8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cc8c:	1ad3      	subs	r3, r2, r3
 800cc8e:	2b00      	cmp	r3, #0
 800cc90:	db2d      	blt.n	800ccee <tcp_timewait_input+0x9e>
 800cc92:	4b25      	ldr	r3, [pc, #148]	; (800cd28 <tcp_timewait_input+0xd8>)
 800cc94:	681a      	ldr	r2, [r3, #0]
 800cc96:	687b      	ldr	r3, [r7, #4]
 800cc98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cc9a:	6879      	ldr	r1, [r7, #4]
 800cc9c:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800cc9e:	440b      	add	r3, r1
 800cca0:	1ad3      	subs	r3, r2, r3
 800cca2:	2b00      	cmp	r3, #0
 800cca4:	dc23      	bgt.n	800ccee <tcp_timewait_input+0x9e>
      /* If the SYN is in the window it is an error, send a reset */
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800cca6:	4b21      	ldr	r3, [pc, #132]	; (800cd2c <tcp_timewait_input+0xdc>)
 800cca8:	6819      	ldr	r1, [r3, #0]
 800ccaa:	4b21      	ldr	r3, [pc, #132]	; (800cd30 <tcp_timewait_input+0xe0>)
 800ccac:	881b      	ldrh	r3, [r3, #0]
 800ccae:	461a      	mov	r2, r3
 800ccb0:	4b1d      	ldr	r3, [pc, #116]	; (800cd28 <tcp_timewait_input+0xd8>)
 800ccb2:	681b      	ldr	r3, [r3, #0]
 800ccb4:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800ccb6:	4b1f      	ldr	r3, [pc, #124]	; (800cd34 <tcp_timewait_input+0xe4>)
 800ccb8:	681b      	ldr	r3, [r3, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800ccba:	885b      	ldrh	r3, [r3, #2]
 800ccbc:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800ccbe:	4a1d      	ldr	r2, [pc, #116]	; (800cd34 <tcp_timewait_input+0xe4>)
 800ccc0:	6812      	ldr	r2, [r2, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800ccc2:	8812      	ldrh	r2, [r2, #0]
 800ccc4:	b292      	uxth	r2, r2
 800ccc6:	9202      	str	r2, [sp, #8]
 800ccc8:	9301      	str	r3, [sp, #4]
 800ccca:	4b1b      	ldr	r3, [pc, #108]	; (800cd38 <tcp_timewait_input+0xe8>)
 800cccc:	9300      	str	r3, [sp, #0]
 800ccce:	4b1b      	ldr	r3, [pc, #108]	; (800cd3c <tcp_timewait_input+0xec>)
 800ccd0:	4602      	mov	r2, r0
 800ccd2:	6878      	ldr	r0, [r7, #4]
 800ccd4:	f002 feac 	bl	800fa30 <tcp_rst>
      return;
 800ccd8:	e01b      	b.n	800cd12 <tcp_timewait_input+0xc2>
    }
  } else if (flags & TCP_FIN) {
 800ccda:	4b0f      	ldr	r3, [pc, #60]	; (800cd18 <tcp_timewait_input+0xc8>)
 800ccdc:	781b      	ldrb	r3, [r3, #0]
 800ccde:	f003 0301 	and.w	r3, r3, #1
 800cce2:	2b00      	cmp	r3, #0
 800cce4:	d003      	beq.n	800ccee <tcp_timewait_input+0x9e>
    /* - eighth, check the FIN bit: Remain in the TIME-WAIT state.
         Restart the 2 MSL time-wait timeout.*/
    pcb->tmr = tcp_ticks;
 800cce6:	4b16      	ldr	r3, [pc, #88]	; (800cd40 <tcp_timewait_input+0xf0>)
 800cce8:	681a      	ldr	r2, [r3, #0]
 800ccea:	687b      	ldr	r3, [r7, #4]
 800ccec:	621a      	str	r2, [r3, #32]
  }

  if ((tcplen > 0)) {
 800ccee:	4b10      	ldr	r3, [pc, #64]	; (800cd30 <tcp_timewait_input+0xe0>)
 800ccf0:	881b      	ldrh	r3, [r3, #0]
 800ccf2:	2b00      	cmp	r3, #0
 800ccf4:	d00c      	beq.n	800cd10 <tcp_timewait_input+0xc0>
    /* Acknowledge data, FIN or out-of-window SYN */
    tcp_ack_now(pcb);
 800ccf6:	687b      	ldr	r3, [r7, #4]
 800ccf8:	8b5b      	ldrh	r3, [r3, #26]
 800ccfa:	f043 0302 	orr.w	r3, r3, #2
 800ccfe:	b29a      	uxth	r2, r3
 800cd00:	687b      	ldr	r3, [r7, #4]
 800cd02:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 800cd04:	6878      	ldr	r0, [r7, #4]
 800cd06:	f002 f8cb 	bl	800eea0 <tcp_output>
  }
  return;
 800cd0a:	e001      	b.n	800cd10 <tcp_timewait_input+0xc0>
    return;
 800cd0c:	bf00      	nop
 800cd0e:	e000      	b.n	800cd12 <tcp_timewait_input+0xc2>
  return;
 800cd10:	bf00      	nop
}
 800cd12:	3708      	adds	r7, #8
 800cd14:	46bd      	mov	sp, r7
 800cd16:	bd80      	pop	{r7, pc}
 800cd18:	2000c78c 	.word	0x2000c78c
 800cd1c:	08015ba8 	.word	0x08015ba8
 800cd20:	08015dc0 	.word	0x08015dc0
 800cd24:	08015bf4 	.word	0x08015bf4
 800cd28:	2000c780 	.word	0x2000c780
 800cd2c:	2000c784 	.word	0x2000c784
 800cd30:	2000c78a 	.word	0x2000c78a
 800cd34:	2000c770 	.word	0x2000c770
 800cd38:	20008e6c 	.word	0x20008e6c
 800cd3c:	20008e70 	.word	0x20008e70
 800cd40:	2000c748 	.word	0x2000c748

0800cd44 <tcp_process>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static err_t
tcp_process(struct tcp_pcb *pcb)
{
 800cd44:	b590      	push	{r4, r7, lr}
 800cd46:	b08d      	sub	sp, #52	; 0x34
 800cd48:	af04      	add	r7, sp, #16
 800cd4a:	6078      	str	r0, [r7, #4]
  struct tcp_seg *rseg;
  u8_t acceptable = 0;
 800cd4c:	2300      	movs	r3, #0
 800cd4e:	76fb      	strb	r3, [r7, #27]
  err_t err;

  err = ERR_OK;
 800cd50:	2300      	movs	r3, #0
 800cd52:	76bb      	strb	r3, [r7, #26]

  LWIP_ASSERT("tcp_process: invalid pcb", pcb != NULL);
 800cd54:	687b      	ldr	r3, [r7, #4]
 800cd56:	2b00      	cmp	r3, #0
 800cd58:	d106      	bne.n	800cd68 <tcp_process+0x24>
 800cd5a:	4b9d      	ldr	r3, [pc, #628]	; (800cfd0 <tcp_process+0x28c>)
 800cd5c:	f44f 7247 	mov.w	r2, #796	; 0x31c
 800cd60:	499c      	ldr	r1, [pc, #624]	; (800cfd4 <tcp_process+0x290>)
 800cd62:	489d      	ldr	r0, [pc, #628]	; (800cfd8 <tcp_process+0x294>)
 800cd64:	f006 fe00 	bl	8013968 <iprintf>

  /* Process incoming RST segments. */
  if (flags & TCP_RST) {
 800cd68:	4b9c      	ldr	r3, [pc, #624]	; (800cfdc <tcp_process+0x298>)
 800cd6a:	781b      	ldrb	r3, [r3, #0]
 800cd6c:	f003 0304 	and.w	r3, r3, #4
 800cd70:	2b00      	cmp	r3, #0
 800cd72:	d04e      	beq.n	800ce12 <tcp_process+0xce>
    /* First, determine if the reset is acceptable. */
    if (pcb->state == SYN_SENT) {
 800cd74:	687b      	ldr	r3, [r7, #4]
 800cd76:	7d1b      	ldrb	r3, [r3, #20]
 800cd78:	2b02      	cmp	r3, #2
 800cd7a:	d108      	bne.n	800cd8e <tcp_process+0x4a>
      /* "In the SYN-SENT state (a RST received in response to an initial SYN),
          the RST is acceptable if the ACK field acknowledges the SYN." */
      if (ackno == pcb->snd_nxt) {
 800cd7c:	687b      	ldr	r3, [r7, #4]
 800cd7e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800cd80:	4b97      	ldr	r3, [pc, #604]	; (800cfe0 <tcp_process+0x29c>)
 800cd82:	681b      	ldr	r3, [r3, #0]
 800cd84:	429a      	cmp	r2, r3
 800cd86:	d123      	bne.n	800cdd0 <tcp_process+0x8c>
        acceptable = 1;
 800cd88:	2301      	movs	r3, #1
 800cd8a:	76fb      	strb	r3, [r7, #27]
 800cd8c:	e020      	b.n	800cdd0 <tcp_process+0x8c>
      }
    } else {
      /* "In all states except SYN-SENT, all reset (RST) segments are validated
          by checking their SEQ-fields." */
      if (seqno == pcb->rcv_nxt) {
 800cd8e:	687b      	ldr	r3, [r7, #4]
 800cd90:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800cd92:	4b94      	ldr	r3, [pc, #592]	; (800cfe4 <tcp_process+0x2a0>)
 800cd94:	681b      	ldr	r3, [r3, #0]
 800cd96:	429a      	cmp	r2, r3
 800cd98:	d102      	bne.n	800cda0 <tcp_process+0x5c>
        acceptable = 1;
 800cd9a:	2301      	movs	r3, #1
 800cd9c:	76fb      	strb	r3, [r7, #27]
 800cd9e:	e017      	b.n	800cdd0 <tcp_process+0x8c>
      } else  if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 800cda0:	4b90      	ldr	r3, [pc, #576]	; (800cfe4 <tcp_process+0x2a0>)
 800cda2:	681a      	ldr	r2, [r3, #0]
 800cda4:	687b      	ldr	r3, [r7, #4]
 800cda6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cda8:	1ad3      	subs	r3, r2, r3
 800cdaa:	2b00      	cmp	r3, #0
 800cdac:	db10      	blt.n	800cdd0 <tcp_process+0x8c>
 800cdae:	4b8d      	ldr	r3, [pc, #564]	; (800cfe4 <tcp_process+0x2a0>)
 800cdb0:	681a      	ldr	r2, [r3, #0]
 800cdb2:	687b      	ldr	r3, [r7, #4]
 800cdb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cdb6:	6879      	ldr	r1, [r7, #4]
 800cdb8:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800cdba:	440b      	add	r3, r1
 800cdbc:	1ad3      	subs	r3, r2, r3
 800cdbe:	2b00      	cmp	r3, #0
 800cdc0:	dc06      	bgt.n	800cdd0 <tcp_process+0x8c>
                                  pcb->rcv_nxt + pcb->rcv_wnd)) {
        /* If the sequence number is inside the window, we send a challenge ACK
           and wait for a re-send with matching sequence number.
           This follows RFC 5961 section 3.2 and addresses CVE-2004-0230
           (RST spoofing attack), which is present in RFC 793 RST handling. */
        tcp_ack_now(pcb);
 800cdc2:	687b      	ldr	r3, [r7, #4]
 800cdc4:	8b5b      	ldrh	r3, [r3, #26]
 800cdc6:	f043 0302 	orr.w	r3, r3, #2
 800cdca:	b29a      	uxth	r2, r3
 800cdcc:	687b      	ldr	r3, [r7, #4]
 800cdce:	835a      	strh	r2, [r3, #26]
      }
    }

    if (acceptable) {
 800cdd0:	7efb      	ldrb	r3, [r7, #27]
 800cdd2:	2b00      	cmp	r3, #0
 800cdd4:	d01b      	beq.n	800ce0e <tcp_process+0xca>
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: Connection RESET\n"));
      LWIP_ASSERT("tcp_input: pcb->state != CLOSED", pcb->state != CLOSED);
 800cdd6:	687b      	ldr	r3, [r7, #4]
 800cdd8:	7d1b      	ldrb	r3, [r3, #20]
 800cdda:	2b00      	cmp	r3, #0
 800cddc:	d106      	bne.n	800cdec <tcp_process+0xa8>
 800cdde:	4b7c      	ldr	r3, [pc, #496]	; (800cfd0 <tcp_process+0x28c>)
 800cde0:	f44f 724e 	mov.w	r2, #824	; 0x338
 800cde4:	4980      	ldr	r1, [pc, #512]	; (800cfe8 <tcp_process+0x2a4>)
 800cde6:	487c      	ldr	r0, [pc, #496]	; (800cfd8 <tcp_process+0x294>)
 800cde8:	f006 fdbe 	bl	8013968 <iprintf>
      recv_flags |= TF_RESET;
 800cdec:	4b7f      	ldr	r3, [pc, #508]	; (800cfec <tcp_process+0x2a8>)
 800cdee:	781b      	ldrb	r3, [r3, #0]
 800cdf0:	f043 0308 	orr.w	r3, r3, #8
 800cdf4:	b2da      	uxtb	r2, r3
 800cdf6:	4b7d      	ldr	r3, [pc, #500]	; (800cfec <tcp_process+0x2a8>)
 800cdf8:	701a      	strb	r2, [r3, #0]
      tcp_clear_flags(pcb, TF_ACK_DELAY);
 800cdfa:	687b      	ldr	r3, [r7, #4]
 800cdfc:	8b5b      	ldrh	r3, [r3, #26]
 800cdfe:	f023 0301 	bic.w	r3, r3, #1
 800ce02:	b29a      	uxth	r2, r3
 800ce04:	687b      	ldr	r3, [r7, #4]
 800ce06:	835a      	strh	r2, [r3, #26]
      return ERR_RST;
 800ce08:	f06f 030d 	mvn.w	r3, #13
 800ce0c:	e37a      	b.n	800d504 <tcp_process+0x7c0>
    } else {
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                                    seqno, pcb->rcv_nxt));
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                              seqno, pcb->rcv_nxt));
      return ERR_OK;
 800ce0e:	2300      	movs	r3, #0
 800ce10:	e378      	b.n	800d504 <tcp_process+0x7c0>
    }
  }

  if ((flags & TCP_SYN) && (pcb->state != SYN_SENT && pcb->state != SYN_RCVD)) {
 800ce12:	4b72      	ldr	r3, [pc, #456]	; (800cfdc <tcp_process+0x298>)
 800ce14:	781b      	ldrb	r3, [r3, #0]
 800ce16:	f003 0302 	and.w	r3, r3, #2
 800ce1a:	2b00      	cmp	r3, #0
 800ce1c:	d010      	beq.n	800ce40 <tcp_process+0xfc>
 800ce1e:	687b      	ldr	r3, [r7, #4]
 800ce20:	7d1b      	ldrb	r3, [r3, #20]
 800ce22:	2b02      	cmp	r3, #2
 800ce24:	d00c      	beq.n	800ce40 <tcp_process+0xfc>
 800ce26:	687b      	ldr	r3, [r7, #4]
 800ce28:	7d1b      	ldrb	r3, [r3, #20]
 800ce2a:	2b03      	cmp	r3, #3
 800ce2c:	d008      	beq.n	800ce40 <tcp_process+0xfc>
    /* Cope with new connection attempt after remote end crashed */
    tcp_ack_now(pcb);
 800ce2e:	687b      	ldr	r3, [r7, #4]
 800ce30:	8b5b      	ldrh	r3, [r3, #26]
 800ce32:	f043 0302 	orr.w	r3, r3, #2
 800ce36:	b29a      	uxth	r2, r3
 800ce38:	687b      	ldr	r3, [r7, #4]
 800ce3a:	835a      	strh	r2, [r3, #26]
    return ERR_OK;
 800ce3c:	2300      	movs	r3, #0
 800ce3e:	e361      	b.n	800d504 <tcp_process+0x7c0>
  }

  if ((pcb->flags & TF_RXCLOSED) == 0) {
 800ce40:	687b      	ldr	r3, [r7, #4]
 800ce42:	8b5b      	ldrh	r3, [r3, #26]
 800ce44:	f003 0310 	and.w	r3, r3, #16
 800ce48:	2b00      	cmp	r3, #0
 800ce4a:	d103      	bne.n	800ce54 <tcp_process+0x110>
    /* Update the PCB (in)activity timer unless rx is closed (see tcp_shutdown) */
    pcb->tmr = tcp_ticks;
 800ce4c:	4b68      	ldr	r3, [pc, #416]	; (800cff0 <tcp_process+0x2ac>)
 800ce4e:	681a      	ldr	r2, [r3, #0]
 800ce50:	687b      	ldr	r3, [r7, #4]
 800ce52:	621a      	str	r2, [r3, #32]
  }
  pcb->keep_cnt_sent = 0;
 800ce54:	687b      	ldr	r3, [r7, #4]
 800ce56:	2200      	movs	r2, #0
 800ce58:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b
  pcb->persist_probe = 0;
 800ce5c:	687b      	ldr	r3, [r7, #4]
 800ce5e:	2200      	movs	r2, #0
 800ce60:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a

  tcp_parseopt(pcb);
 800ce64:	6878      	ldr	r0, [r7, #4]
 800ce66:	f001 fc2f 	bl	800e6c8 <tcp_parseopt>

  /* Do different things depending on the TCP state. */
  switch (pcb->state) {
 800ce6a:	687b      	ldr	r3, [r7, #4]
 800ce6c:	7d1b      	ldrb	r3, [r3, #20]
 800ce6e:	3b02      	subs	r3, #2
 800ce70:	2b07      	cmp	r3, #7
 800ce72:	f200 8337 	bhi.w	800d4e4 <tcp_process+0x7a0>
 800ce76:	a201      	add	r2, pc, #4	; (adr r2, 800ce7c <tcp_process+0x138>)
 800ce78:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ce7c:	0800ce9d 	.word	0x0800ce9d
 800ce80:	0800d0cd 	.word	0x0800d0cd
 800ce84:	0800d245 	.word	0x0800d245
 800ce88:	0800d26f 	.word	0x0800d26f
 800ce8c:	0800d393 	.word	0x0800d393
 800ce90:	0800d245 	.word	0x0800d245
 800ce94:	0800d41f 	.word	0x0800d41f
 800ce98:	0800d4af 	.word	0x0800d4af
    case SYN_SENT:
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("SYN-SENT: ackno %"U32_F" pcb->snd_nxt %"U32_F" unacked %"U32_F"\n", ackno,
                                    pcb->snd_nxt, lwip_ntohl(pcb->unacked->tcphdr->seqno)));
      /* received SYN ACK with expected sequence number? */
      if ((flags & TCP_ACK) && (flags & TCP_SYN)
 800ce9c:	4b4f      	ldr	r3, [pc, #316]	; (800cfdc <tcp_process+0x298>)
 800ce9e:	781b      	ldrb	r3, [r3, #0]
 800cea0:	f003 0310 	and.w	r3, r3, #16
 800cea4:	2b00      	cmp	r3, #0
 800cea6:	f000 80e4 	beq.w	800d072 <tcp_process+0x32e>
 800ceaa:	4b4c      	ldr	r3, [pc, #304]	; (800cfdc <tcp_process+0x298>)
 800ceac:	781b      	ldrb	r3, [r3, #0]
 800ceae:	f003 0302 	and.w	r3, r3, #2
 800ceb2:	2b00      	cmp	r3, #0
 800ceb4:	f000 80dd 	beq.w	800d072 <tcp_process+0x32e>
          && (ackno == pcb->lastack + 1)) {
 800ceb8:	687b      	ldr	r3, [r7, #4]
 800ceba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800cebc:	1c5a      	adds	r2, r3, #1
 800cebe:	4b48      	ldr	r3, [pc, #288]	; (800cfe0 <tcp_process+0x29c>)
 800cec0:	681b      	ldr	r3, [r3, #0]
 800cec2:	429a      	cmp	r2, r3
 800cec4:	f040 80d5 	bne.w	800d072 <tcp_process+0x32e>
        pcb->rcv_nxt = seqno + 1;
 800cec8:	4b46      	ldr	r3, [pc, #280]	; (800cfe4 <tcp_process+0x2a0>)
 800ceca:	681b      	ldr	r3, [r3, #0]
 800cecc:	1c5a      	adds	r2, r3, #1
 800cece:	687b      	ldr	r3, [r7, #4]
 800ced0:	625a      	str	r2, [r3, #36]	; 0x24
        pcb->rcv_ann_right_edge = pcb->rcv_nxt;
 800ced2:	687b      	ldr	r3, [r7, #4]
 800ced4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800ced6:	687b      	ldr	r3, [r7, #4]
 800ced8:	62da      	str	r2, [r3, #44]	; 0x2c
        pcb->lastack = ackno;
 800ceda:	4b41      	ldr	r3, [pc, #260]	; (800cfe0 <tcp_process+0x29c>)
 800cedc:	681a      	ldr	r2, [r3, #0]
 800cede:	687b      	ldr	r3, [r7, #4]
 800cee0:	645a      	str	r2, [r3, #68]	; 0x44
        pcb->snd_wnd = tcphdr->wnd;
 800cee2:	4b44      	ldr	r3, [pc, #272]	; (800cff4 <tcp_process+0x2b0>)
 800cee4:	681b      	ldr	r3, [r3, #0]
 800cee6:	89db      	ldrh	r3, [r3, #14]
 800cee8:	b29a      	uxth	r2, r3
 800ceea:	687b      	ldr	r3, [r7, #4]
 800ceec:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
        pcb->snd_wnd_max = pcb->snd_wnd;
 800cef0:	687b      	ldr	r3, [r7, #4]
 800cef2:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800cef6:	687b      	ldr	r3, [r7, #4]
 800cef8:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
        pcb->snd_wl1 = seqno - 1; /* initialise to seqno - 1 to force window update */
 800cefc:	4b39      	ldr	r3, [pc, #228]	; (800cfe4 <tcp_process+0x2a0>)
 800cefe:	681b      	ldr	r3, [r3, #0]
 800cf00:	1e5a      	subs	r2, r3, #1
 800cf02:	687b      	ldr	r3, [r7, #4]
 800cf04:	655a      	str	r2, [r3, #84]	; 0x54
        pcb->state = ESTABLISHED;
 800cf06:	687b      	ldr	r3, [r7, #4]
 800cf08:	2204      	movs	r2, #4
 800cf0a:	751a      	strb	r2, [r3, #20]

#if TCP_CALCULATE_EFF_SEND_MSS
        pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 800cf0c:	687b      	ldr	r3, [r7, #4]
 800cf0e:	8e5c      	ldrh	r4, [r3, #50]	; 0x32
 800cf10:	687b      	ldr	r3, [r7, #4]
 800cf12:	3304      	adds	r3, #4
 800cf14:	4618      	mov	r0, r3
 800cf16:	f004 ff3f 	bl	8011d98 <ip4_route>
 800cf1a:	4601      	mov	r1, r0
 800cf1c:	687b      	ldr	r3, [r7, #4]
 800cf1e:	3304      	adds	r3, #4
 800cf20:	461a      	mov	r2, r3
 800cf22:	4620      	mov	r0, r4
 800cf24:	f7ff f826 	bl	800bf74 <tcp_eff_send_mss_netif>
 800cf28:	4603      	mov	r3, r0
 800cf2a:	461a      	mov	r2, r3
 800cf2c:	687b      	ldr	r3, [r7, #4]
 800cf2e:	865a      	strh	r2, [r3, #50]	; 0x32
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

        pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 800cf30:	687b      	ldr	r3, [r7, #4]
 800cf32:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800cf34:	009a      	lsls	r2, r3, #2
 800cf36:	687b      	ldr	r3, [r7, #4]
 800cf38:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800cf3a:	005b      	lsls	r3, r3, #1
 800cf3c:	f241 111c 	movw	r1, #4380	; 0x111c
 800cf40:	428b      	cmp	r3, r1
 800cf42:	bf38      	it	cc
 800cf44:	460b      	movcc	r3, r1
 800cf46:	429a      	cmp	r2, r3
 800cf48:	d204      	bcs.n	800cf54 <tcp_process+0x210>
 800cf4a:	687b      	ldr	r3, [r7, #4]
 800cf4c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800cf4e:	009b      	lsls	r3, r3, #2
 800cf50:	b29b      	uxth	r3, r3
 800cf52:	e00d      	b.n	800cf70 <tcp_process+0x22c>
 800cf54:	687b      	ldr	r3, [r7, #4]
 800cf56:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800cf58:	005b      	lsls	r3, r3, #1
 800cf5a:	f241 121c 	movw	r2, #4380	; 0x111c
 800cf5e:	4293      	cmp	r3, r2
 800cf60:	d904      	bls.n	800cf6c <tcp_process+0x228>
 800cf62:	687b      	ldr	r3, [r7, #4]
 800cf64:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800cf66:	005b      	lsls	r3, r3, #1
 800cf68:	b29b      	uxth	r3, r3
 800cf6a:	e001      	b.n	800cf70 <tcp_process+0x22c>
 800cf6c:	f241 131c 	movw	r3, #4380	; 0x111c
 800cf70:	687a      	ldr	r2, [r7, #4]
 800cf72:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
        LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SENT): cwnd %"TCPWNDSIZE_F
                                     " ssthresh %"TCPWNDSIZE_F"\n",
                                     pcb->cwnd, pcb->ssthresh));
        LWIP_ASSERT("pcb->snd_queuelen > 0", (pcb->snd_queuelen > 0));
 800cf76:	687b      	ldr	r3, [r7, #4]
 800cf78:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800cf7c:	2b00      	cmp	r3, #0
 800cf7e:	d106      	bne.n	800cf8e <tcp_process+0x24a>
 800cf80:	4b13      	ldr	r3, [pc, #76]	; (800cfd0 <tcp_process+0x28c>)
 800cf82:	f44f 725b 	mov.w	r2, #876	; 0x36c
 800cf86:	491c      	ldr	r1, [pc, #112]	; (800cff8 <tcp_process+0x2b4>)
 800cf88:	4813      	ldr	r0, [pc, #76]	; (800cfd8 <tcp_process+0x294>)
 800cf8a:	f006 fced 	bl	8013968 <iprintf>
        --pcb->snd_queuelen;
 800cf8e:	687b      	ldr	r3, [r7, #4]
 800cf90:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800cf94:	3b01      	subs	r3, #1
 800cf96:	b29a      	uxth	r2, r3
 800cf98:	687b      	ldr	r3, [r7, #4]
 800cf9a:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
        LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_process: SYN-SENT --queuelen %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));
        rseg = pcb->unacked;
 800cf9e:	687b      	ldr	r3, [r7, #4]
 800cfa0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800cfa2:	61fb      	str	r3, [r7, #28]
        if (rseg == NULL) {
 800cfa4:	69fb      	ldr	r3, [r7, #28]
 800cfa6:	2b00      	cmp	r3, #0
 800cfa8:	d12a      	bne.n	800d000 <tcp_process+0x2bc>
          /* might happen if tcp_output fails in tcp_rexmit_rto()
             in which case the segment is on the unsent list */
          rseg = pcb->unsent;
 800cfaa:	687b      	ldr	r3, [r7, #4]
 800cfac:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800cfae:	61fb      	str	r3, [r7, #28]
          LWIP_ASSERT("no segment to free", rseg != NULL);
 800cfb0:	69fb      	ldr	r3, [r7, #28]
 800cfb2:	2b00      	cmp	r3, #0
 800cfb4:	d106      	bne.n	800cfc4 <tcp_process+0x280>
 800cfb6:	4b06      	ldr	r3, [pc, #24]	; (800cfd0 <tcp_process+0x28c>)
 800cfb8:	f44f 725d 	mov.w	r2, #884	; 0x374
 800cfbc:	490f      	ldr	r1, [pc, #60]	; (800cffc <tcp_process+0x2b8>)
 800cfbe:	4806      	ldr	r0, [pc, #24]	; (800cfd8 <tcp_process+0x294>)
 800cfc0:	f006 fcd2 	bl	8013968 <iprintf>
          pcb->unsent = rseg->next;
 800cfc4:	69fb      	ldr	r3, [r7, #28]
 800cfc6:	681a      	ldr	r2, [r3, #0]
 800cfc8:	687b      	ldr	r3, [r7, #4]
 800cfca:	66da      	str	r2, [r3, #108]	; 0x6c
 800cfcc:	e01c      	b.n	800d008 <tcp_process+0x2c4>
 800cfce:	bf00      	nop
 800cfd0:	08015ba8 	.word	0x08015ba8
 800cfd4:	08015de0 	.word	0x08015de0
 800cfd8:	08015bf4 	.word	0x08015bf4
 800cfdc:	2000c78c 	.word	0x2000c78c
 800cfe0:	2000c784 	.word	0x2000c784
 800cfe4:	2000c780 	.word	0x2000c780
 800cfe8:	08015dfc 	.word	0x08015dfc
 800cfec:	2000c78d 	.word	0x2000c78d
 800cff0:	2000c748 	.word	0x2000c748
 800cff4:	2000c770 	.word	0x2000c770
 800cff8:	08015e1c 	.word	0x08015e1c
 800cffc:	08015e34 	.word	0x08015e34
        } else {
          pcb->unacked = rseg->next;
 800d000:	69fb      	ldr	r3, [r7, #28]
 800d002:	681a      	ldr	r2, [r3, #0]
 800d004:	687b      	ldr	r3, [r7, #4]
 800d006:	671a      	str	r2, [r3, #112]	; 0x70
        }
        tcp_seg_free(rseg);
 800d008:	69f8      	ldr	r0, [r7, #28]
 800d00a:	f7fe fc92 	bl	800b932 <tcp_seg_free>

        /* If there's nothing left to acknowledge, stop the retransmit
           timer, otherwise reset it to start again */
        if (pcb->unacked == NULL) {
 800d00e:	687b      	ldr	r3, [r7, #4]
 800d010:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d012:	2b00      	cmp	r3, #0
 800d014:	d104      	bne.n	800d020 <tcp_process+0x2dc>
          pcb->rtime = -1;
 800d016:	687b      	ldr	r3, [r7, #4]
 800d018:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800d01c:	861a      	strh	r2, [r3, #48]	; 0x30
 800d01e:	e006      	b.n	800d02e <tcp_process+0x2ea>
        } else {
          pcb->rtime = 0;
 800d020:	687b      	ldr	r3, [r7, #4]
 800d022:	2200      	movs	r2, #0
 800d024:	861a      	strh	r2, [r3, #48]	; 0x30
          pcb->nrtx = 0;
 800d026:	687b      	ldr	r3, [r7, #4]
 800d028:	2200      	movs	r2, #0
 800d02a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        }

        /* Call the user specified function to call when successfully
         * connected. */
        TCP_EVENT_CONNECTED(pcb, ERR_OK, err);
 800d02e:	687b      	ldr	r3, [r7, #4]
 800d030:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800d034:	2b00      	cmp	r3, #0
 800d036:	d00a      	beq.n	800d04e <tcp_process+0x30a>
 800d038:	687b      	ldr	r3, [r7, #4]
 800d03a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800d03e:	687a      	ldr	r2, [r7, #4]
 800d040:	6910      	ldr	r0, [r2, #16]
 800d042:	2200      	movs	r2, #0
 800d044:	6879      	ldr	r1, [r7, #4]
 800d046:	4798      	blx	r3
 800d048:	4603      	mov	r3, r0
 800d04a:	76bb      	strb	r3, [r7, #26]
 800d04c:	e001      	b.n	800d052 <tcp_process+0x30e>
 800d04e:	2300      	movs	r3, #0
 800d050:	76bb      	strb	r3, [r7, #26]
        if (err == ERR_ABRT) {
 800d052:	f997 301a 	ldrsb.w	r3, [r7, #26]
 800d056:	f113 0f0d 	cmn.w	r3, #13
 800d05a:	d102      	bne.n	800d062 <tcp_process+0x31e>
          return ERR_ABRT;
 800d05c:	f06f 030c 	mvn.w	r3, #12
 800d060:	e250      	b.n	800d504 <tcp_process+0x7c0>
        }
        tcp_ack_now(pcb);
 800d062:	687b      	ldr	r3, [r7, #4]
 800d064:	8b5b      	ldrh	r3, [r3, #26]
 800d066:	f043 0302 	orr.w	r3, r3, #2
 800d06a:	b29a      	uxth	r2, r3
 800d06c:	687b      	ldr	r3, [r7, #4]
 800d06e:	835a      	strh	r2, [r3, #26]
        if (pcb->nrtx < TCP_SYNMAXRTX) {
          pcb->rtime = 0;
          tcp_rexmit_rto(pcb);
        }
      }
      break;
 800d070:	e23a      	b.n	800d4e8 <tcp_process+0x7a4>
      else if (flags & TCP_ACK) {
 800d072:	4b98      	ldr	r3, [pc, #608]	; (800d2d4 <tcp_process+0x590>)
 800d074:	781b      	ldrb	r3, [r3, #0]
 800d076:	f003 0310 	and.w	r3, r3, #16
 800d07a:	2b00      	cmp	r3, #0
 800d07c:	f000 8234 	beq.w	800d4e8 <tcp_process+0x7a4>
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800d080:	4b95      	ldr	r3, [pc, #596]	; (800d2d8 <tcp_process+0x594>)
 800d082:	6819      	ldr	r1, [r3, #0]
 800d084:	4b95      	ldr	r3, [pc, #596]	; (800d2dc <tcp_process+0x598>)
 800d086:	881b      	ldrh	r3, [r3, #0]
 800d088:	461a      	mov	r2, r3
 800d08a:	4b95      	ldr	r3, [pc, #596]	; (800d2e0 <tcp_process+0x59c>)
 800d08c:	681b      	ldr	r3, [r3, #0]
 800d08e:	18d0      	adds	r0, r2, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800d090:	4b94      	ldr	r3, [pc, #592]	; (800d2e4 <tcp_process+0x5a0>)
 800d092:	681b      	ldr	r3, [r3, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800d094:	885b      	ldrh	r3, [r3, #2]
 800d096:	b29b      	uxth	r3, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800d098:	4a92      	ldr	r2, [pc, #584]	; (800d2e4 <tcp_process+0x5a0>)
 800d09a:	6812      	ldr	r2, [r2, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800d09c:	8812      	ldrh	r2, [r2, #0]
 800d09e:	b292      	uxth	r2, r2
 800d0a0:	9202      	str	r2, [sp, #8]
 800d0a2:	9301      	str	r3, [sp, #4]
 800d0a4:	4b90      	ldr	r3, [pc, #576]	; (800d2e8 <tcp_process+0x5a4>)
 800d0a6:	9300      	str	r3, [sp, #0]
 800d0a8:	4b90      	ldr	r3, [pc, #576]	; (800d2ec <tcp_process+0x5a8>)
 800d0aa:	4602      	mov	r2, r0
 800d0ac:	6878      	ldr	r0, [r7, #4]
 800d0ae:	f002 fcbf 	bl	800fa30 <tcp_rst>
        if (pcb->nrtx < TCP_SYNMAXRTX) {
 800d0b2:	687b      	ldr	r3, [r7, #4]
 800d0b4:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800d0b8:	2b05      	cmp	r3, #5
 800d0ba:	f200 8215 	bhi.w	800d4e8 <tcp_process+0x7a4>
          pcb->rtime = 0;
 800d0be:	687b      	ldr	r3, [r7, #4]
 800d0c0:	2200      	movs	r2, #0
 800d0c2:	861a      	strh	r2, [r3, #48]	; 0x30
          tcp_rexmit_rto(pcb);
 800d0c4:	6878      	ldr	r0, [r7, #4]
 800d0c6:	f002 fa7f 	bl	800f5c8 <tcp_rexmit_rto>
      break;
 800d0ca:	e20d      	b.n	800d4e8 <tcp_process+0x7a4>
    case SYN_RCVD:
      if (flags & TCP_ACK) {
 800d0cc:	4b81      	ldr	r3, [pc, #516]	; (800d2d4 <tcp_process+0x590>)
 800d0ce:	781b      	ldrb	r3, [r3, #0]
 800d0d0:	f003 0310 	and.w	r3, r3, #16
 800d0d4:	2b00      	cmp	r3, #0
 800d0d6:	f000 80a1 	beq.w	800d21c <tcp_process+0x4d8>
        /* expected ACK number? */
        if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800d0da:	4b7f      	ldr	r3, [pc, #508]	; (800d2d8 <tcp_process+0x594>)
 800d0dc:	681a      	ldr	r2, [r3, #0]
 800d0de:	687b      	ldr	r3, [r7, #4]
 800d0e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d0e2:	1ad3      	subs	r3, r2, r3
 800d0e4:	3b01      	subs	r3, #1
 800d0e6:	2b00      	cmp	r3, #0
 800d0e8:	db7e      	blt.n	800d1e8 <tcp_process+0x4a4>
 800d0ea:	4b7b      	ldr	r3, [pc, #492]	; (800d2d8 <tcp_process+0x594>)
 800d0ec:	681a      	ldr	r2, [r3, #0]
 800d0ee:	687b      	ldr	r3, [r7, #4]
 800d0f0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d0f2:	1ad3      	subs	r3, r2, r3
 800d0f4:	2b00      	cmp	r3, #0
 800d0f6:	dc77      	bgt.n	800d1e8 <tcp_process+0x4a4>
          pcb->state = ESTABLISHED;
 800d0f8:	687b      	ldr	r3, [r7, #4]
 800d0fa:	2204      	movs	r2, #4
 800d0fc:	751a      	strb	r2, [r3, #20]
          LWIP_DEBUGF(TCP_DEBUG, ("TCP connection established %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
          if (pcb->listener == NULL) {
 800d0fe:	687b      	ldr	r3, [r7, #4]
 800d100:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d102:	2b00      	cmp	r3, #0
 800d104:	d102      	bne.n	800d10c <tcp_process+0x3c8>
            /* listen pcb might be closed by now */
            err = ERR_VAL;
 800d106:	23fa      	movs	r3, #250	; 0xfa
 800d108:	76bb      	strb	r3, [r7, #26]
 800d10a:	e01d      	b.n	800d148 <tcp_process+0x404>
          } else
#endif /* LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG */
          {
#if LWIP_CALLBACK_API
            LWIP_ASSERT("pcb->listener->accept != NULL", pcb->listener->accept != NULL);
 800d10c:	687b      	ldr	r3, [r7, #4]
 800d10e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d110:	699b      	ldr	r3, [r3, #24]
 800d112:	2b00      	cmp	r3, #0
 800d114:	d106      	bne.n	800d124 <tcp_process+0x3e0>
 800d116:	4b76      	ldr	r3, [pc, #472]	; (800d2f0 <tcp_process+0x5ac>)
 800d118:	f44f 726a 	mov.w	r2, #936	; 0x3a8
 800d11c:	4975      	ldr	r1, [pc, #468]	; (800d2f4 <tcp_process+0x5b0>)
 800d11e:	4876      	ldr	r0, [pc, #472]	; (800d2f8 <tcp_process+0x5b4>)
 800d120:	f006 fc22 	bl	8013968 <iprintf>
#endif
            tcp_backlog_accepted(pcb);
            /* Call the accept function. */
            TCP_EVENT_ACCEPT(pcb->listener, pcb, pcb->callback_arg, ERR_OK, err);
 800d124:	687b      	ldr	r3, [r7, #4]
 800d126:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d128:	699b      	ldr	r3, [r3, #24]
 800d12a:	2b00      	cmp	r3, #0
 800d12c:	d00a      	beq.n	800d144 <tcp_process+0x400>
 800d12e:	687b      	ldr	r3, [r7, #4]
 800d130:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d132:	699b      	ldr	r3, [r3, #24]
 800d134:	687a      	ldr	r2, [r7, #4]
 800d136:	6910      	ldr	r0, [r2, #16]
 800d138:	2200      	movs	r2, #0
 800d13a:	6879      	ldr	r1, [r7, #4]
 800d13c:	4798      	blx	r3
 800d13e:	4603      	mov	r3, r0
 800d140:	76bb      	strb	r3, [r7, #26]
 800d142:	e001      	b.n	800d148 <tcp_process+0x404>
 800d144:	23f0      	movs	r3, #240	; 0xf0
 800d146:	76bb      	strb	r3, [r7, #26]
          }
          if (err != ERR_OK) {
 800d148:	f997 301a 	ldrsb.w	r3, [r7, #26]
 800d14c:	2b00      	cmp	r3, #0
 800d14e:	d00a      	beq.n	800d166 <tcp_process+0x422>
            /* If the accept function returns with an error, we abort
             * the connection. */
            /* Already aborted? */
            if (err != ERR_ABRT) {
 800d150:	f997 301a 	ldrsb.w	r3, [r7, #26]
 800d154:	f113 0f0d 	cmn.w	r3, #13
 800d158:	d002      	beq.n	800d160 <tcp_process+0x41c>
              tcp_abort(pcb);
 800d15a:	6878      	ldr	r0, [r7, #4]
 800d15c:	f7fd fefe 	bl	800af5c <tcp_abort>
            }
            return ERR_ABRT;
 800d160:	f06f 030c 	mvn.w	r3, #12
 800d164:	e1ce      	b.n	800d504 <tcp_process+0x7c0>
          }
          /* If there was any data contained within this ACK,
           * we'd better pass it on to the application as well. */
          tcp_receive(pcb);
 800d166:	6878      	ldr	r0, [r7, #4]
 800d168:	f000 fae0 	bl	800d72c <tcp_receive>

          /* Prevent ACK for SYN to generate a sent event */
          if (recv_acked != 0) {
 800d16c:	4b63      	ldr	r3, [pc, #396]	; (800d2fc <tcp_process+0x5b8>)
 800d16e:	881b      	ldrh	r3, [r3, #0]
 800d170:	2b00      	cmp	r3, #0
 800d172:	d005      	beq.n	800d180 <tcp_process+0x43c>
            recv_acked--;
 800d174:	4b61      	ldr	r3, [pc, #388]	; (800d2fc <tcp_process+0x5b8>)
 800d176:	881b      	ldrh	r3, [r3, #0]
 800d178:	3b01      	subs	r3, #1
 800d17a:	b29a      	uxth	r2, r3
 800d17c:	4b5f      	ldr	r3, [pc, #380]	; (800d2fc <tcp_process+0x5b8>)
 800d17e:	801a      	strh	r2, [r3, #0]
          }

          pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 800d180:	687b      	ldr	r3, [r7, #4]
 800d182:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800d184:	009a      	lsls	r2, r3, #2
 800d186:	687b      	ldr	r3, [r7, #4]
 800d188:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800d18a:	005b      	lsls	r3, r3, #1
 800d18c:	f241 111c 	movw	r1, #4380	; 0x111c
 800d190:	428b      	cmp	r3, r1
 800d192:	bf38      	it	cc
 800d194:	460b      	movcc	r3, r1
 800d196:	429a      	cmp	r2, r3
 800d198:	d204      	bcs.n	800d1a4 <tcp_process+0x460>
 800d19a:	687b      	ldr	r3, [r7, #4]
 800d19c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800d19e:	009b      	lsls	r3, r3, #2
 800d1a0:	b29b      	uxth	r3, r3
 800d1a2:	e00d      	b.n	800d1c0 <tcp_process+0x47c>
 800d1a4:	687b      	ldr	r3, [r7, #4]
 800d1a6:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800d1a8:	005b      	lsls	r3, r3, #1
 800d1aa:	f241 121c 	movw	r2, #4380	; 0x111c
 800d1ae:	4293      	cmp	r3, r2
 800d1b0:	d904      	bls.n	800d1bc <tcp_process+0x478>
 800d1b2:	687b      	ldr	r3, [r7, #4]
 800d1b4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800d1b6:	005b      	lsls	r3, r3, #1
 800d1b8:	b29b      	uxth	r3, r3
 800d1ba:	e001      	b.n	800d1c0 <tcp_process+0x47c>
 800d1bc:	f241 131c 	movw	r3, #4380	; 0x111c
 800d1c0:	687a      	ldr	r2, [r7, #4]
 800d1c2:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SYN_RCVD): cwnd %"TCPWNDSIZE_F
                                       " ssthresh %"TCPWNDSIZE_F"\n",
                                       pcb->cwnd, pcb->ssthresh));

          if (recv_flags & TF_GOT_FIN) {
 800d1c6:	4b4e      	ldr	r3, [pc, #312]	; (800d300 <tcp_process+0x5bc>)
 800d1c8:	781b      	ldrb	r3, [r3, #0]
 800d1ca:	f003 0320 	and.w	r3, r3, #32
 800d1ce:	2b00      	cmp	r3, #0
 800d1d0:	d037      	beq.n	800d242 <tcp_process+0x4fe>
            tcp_ack_now(pcb);
 800d1d2:	687b      	ldr	r3, [r7, #4]
 800d1d4:	8b5b      	ldrh	r3, [r3, #26]
 800d1d6:	f043 0302 	orr.w	r3, r3, #2
 800d1da:	b29a      	uxth	r2, r3
 800d1dc:	687b      	ldr	r3, [r7, #4]
 800d1de:	835a      	strh	r2, [r3, #26]
            pcb->state = CLOSE_WAIT;
 800d1e0:	687b      	ldr	r3, [r7, #4]
 800d1e2:	2207      	movs	r2, #7
 800d1e4:	751a      	strb	r2, [r3, #20]
          if (recv_flags & TF_GOT_FIN) {
 800d1e6:	e02c      	b.n	800d242 <tcp_process+0x4fe>
          }
        } else {
          /* incorrect ACK number, send RST */
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800d1e8:	4b3b      	ldr	r3, [pc, #236]	; (800d2d8 <tcp_process+0x594>)
 800d1ea:	6819      	ldr	r1, [r3, #0]
 800d1ec:	4b3b      	ldr	r3, [pc, #236]	; (800d2dc <tcp_process+0x598>)
 800d1ee:	881b      	ldrh	r3, [r3, #0]
 800d1f0:	461a      	mov	r2, r3
 800d1f2:	4b3b      	ldr	r3, [pc, #236]	; (800d2e0 <tcp_process+0x59c>)
 800d1f4:	681b      	ldr	r3, [r3, #0]
 800d1f6:	18d0      	adds	r0, r2, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800d1f8:	4b3a      	ldr	r3, [pc, #232]	; (800d2e4 <tcp_process+0x5a0>)
 800d1fa:	681b      	ldr	r3, [r3, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800d1fc:	885b      	ldrh	r3, [r3, #2]
 800d1fe:	b29b      	uxth	r3, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800d200:	4a38      	ldr	r2, [pc, #224]	; (800d2e4 <tcp_process+0x5a0>)
 800d202:	6812      	ldr	r2, [r2, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800d204:	8812      	ldrh	r2, [r2, #0]
 800d206:	b292      	uxth	r2, r2
 800d208:	9202      	str	r2, [sp, #8]
 800d20a:	9301      	str	r3, [sp, #4]
 800d20c:	4b36      	ldr	r3, [pc, #216]	; (800d2e8 <tcp_process+0x5a4>)
 800d20e:	9300      	str	r3, [sp, #0]
 800d210:	4b36      	ldr	r3, [pc, #216]	; (800d2ec <tcp_process+0x5a8>)
 800d212:	4602      	mov	r2, r0
 800d214:	6878      	ldr	r0, [r7, #4]
 800d216:	f002 fc0b 	bl	800fa30 <tcp_rst>
        }
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
        /* Looks like another copy of the SYN - retransmit our SYN-ACK */
        tcp_rexmit(pcb);
      }
      break;
 800d21a:	e167      	b.n	800d4ec <tcp_process+0x7a8>
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
 800d21c:	4b2d      	ldr	r3, [pc, #180]	; (800d2d4 <tcp_process+0x590>)
 800d21e:	781b      	ldrb	r3, [r3, #0]
 800d220:	f003 0302 	and.w	r3, r3, #2
 800d224:	2b00      	cmp	r3, #0
 800d226:	f000 8161 	beq.w	800d4ec <tcp_process+0x7a8>
 800d22a:	687b      	ldr	r3, [r7, #4]
 800d22c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d22e:	1e5a      	subs	r2, r3, #1
 800d230:	4b2b      	ldr	r3, [pc, #172]	; (800d2e0 <tcp_process+0x59c>)
 800d232:	681b      	ldr	r3, [r3, #0]
 800d234:	429a      	cmp	r2, r3
 800d236:	f040 8159 	bne.w	800d4ec <tcp_process+0x7a8>
        tcp_rexmit(pcb);
 800d23a:	6878      	ldr	r0, [r7, #4]
 800d23c:	f002 f9e6 	bl	800f60c <tcp_rexmit>
      break;
 800d240:	e154      	b.n	800d4ec <tcp_process+0x7a8>
 800d242:	e153      	b.n	800d4ec <tcp_process+0x7a8>
    case CLOSE_WAIT:
    /* FALLTHROUGH */
    case ESTABLISHED:
      tcp_receive(pcb);
 800d244:	6878      	ldr	r0, [r7, #4]
 800d246:	f000 fa71 	bl	800d72c <tcp_receive>
      if (recv_flags & TF_GOT_FIN) { /* passive close */
 800d24a:	4b2d      	ldr	r3, [pc, #180]	; (800d300 <tcp_process+0x5bc>)
 800d24c:	781b      	ldrb	r3, [r3, #0]
 800d24e:	f003 0320 	and.w	r3, r3, #32
 800d252:	2b00      	cmp	r3, #0
 800d254:	f000 814c 	beq.w	800d4f0 <tcp_process+0x7ac>
        tcp_ack_now(pcb);
 800d258:	687b      	ldr	r3, [r7, #4]
 800d25a:	8b5b      	ldrh	r3, [r3, #26]
 800d25c:	f043 0302 	orr.w	r3, r3, #2
 800d260:	b29a      	uxth	r2, r3
 800d262:	687b      	ldr	r3, [r7, #4]
 800d264:	835a      	strh	r2, [r3, #26]
        pcb->state = CLOSE_WAIT;
 800d266:	687b      	ldr	r3, [r7, #4]
 800d268:	2207      	movs	r2, #7
 800d26a:	751a      	strb	r2, [r3, #20]
      }
      break;
 800d26c:	e140      	b.n	800d4f0 <tcp_process+0x7ac>
    case FIN_WAIT_1:
      tcp_receive(pcb);
 800d26e:	6878      	ldr	r0, [r7, #4]
 800d270:	f000 fa5c 	bl	800d72c <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 800d274:	4b22      	ldr	r3, [pc, #136]	; (800d300 <tcp_process+0x5bc>)
 800d276:	781b      	ldrb	r3, [r3, #0]
 800d278:	f003 0320 	and.w	r3, r3, #32
 800d27c:	2b00      	cmp	r3, #0
 800d27e:	d071      	beq.n	800d364 <tcp_process+0x620>
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800d280:	4b14      	ldr	r3, [pc, #80]	; (800d2d4 <tcp_process+0x590>)
 800d282:	781b      	ldrb	r3, [r3, #0]
 800d284:	f003 0310 	and.w	r3, r3, #16
 800d288:	2b00      	cmp	r3, #0
 800d28a:	d060      	beq.n	800d34e <tcp_process+0x60a>
 800d28c:	687b      	ldr	r3, [r7, #4]
 800d28e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800d290:	4b11      	ldr	r3, [pc, #68]	; (800d2d8 <tcp_process+0x594>)
 800d292:	681b      	ldr	r3, [r3, #0]
 800d294:	429a      	cmp	r2, r3
 800d296:	d15a      	bne.n	800d34e <tcp_process+0x60a>
            pcb->unsent == NULL) {
 800d298:	687b      	ldr	r3, [r7, #4]
 800d29a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800d29c:	2b00      	cmp	r3, #0
 800d29e:	d156      	bne.n	800d34e <tcp_process+0x60a>
          LWIP_DEBUGF(TCP_DEBUG,
                      ("TCP connection closed: FIN_WAIT_1 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
          tcp_ack_now(pcb);
 800d2a0:	687b      	ldr	r3, [r7, #4]
 800d2a2:	8b5b      	ldrh	r3, [r3, #26]
 800d2a4:	f043 0302 	orr.w	r3, r3, #2
 800d2a8:	b29a      	uxth	r2, r3
 800d2aa:	687b      	ldr	r3, [r7, #4]
 800d2ac:	835a      	strh	r2, [r3, #26]
          tcp_pcb_purge(pcb);
 800d2ae:	6878      	ldr	r0, [r7, #4]
 800d2b0:	f7fe fd56 	bl	800bd60 <tcp_pcb_purge>
          TCP_RMV_ACTIVE(pcb);
 800d2b4:	4b13      	ldr	r3, [pc, #76]	; (800d304 <tcp_process+0x5c0>)
 800d2b6:	681b      	ldr	r3, [r3, #0]
 800d2b8:	687a      	ldr	r2, [r7, #4]
 800d2ba:	429a      	cmp	r2, r3
 800d2bc:	d105      	bne.n	800d2ca <tcp_process+0x586>
 800d2be:	4b11      	ldr	r3, [pc, #68]	; (800d304 <tcp_process+0x5c0>)
 800d2c0:	681b      	ldr	r3, [r3, #0]
 800d2c2:	68db      	ldr	r3, [r3, #12]
 800d2c4:	4a0f      	ldr	r2, [pc, #60]	; (800d304 <tcp_process+0x5c0>)
 800d2c6:	6013      	str	r3, [r2, #0]
 800d2c8:	e02e      	b.n	800d328 <tcp_process+0x5e4>
 800d2ca:	4b0e      	ldr	r3, [pc, #56]	; (800d304 <tcp_process+0x5c0>)
 800d2cc:	681b      	ldr	r3, [r3, #0]
 800d2ce:	617b      	str	r3, [r7, #20]
 800d2d0:	e027      	b.n	800d322 <tcp_process+0x5de>
 800d2d2:	bf00      	nop
 800d2d4:	2000c78c 	.word	0x2000c78c
 800d2d8:	2000c784 	.word	0x2000c784
 800d2dc:	2000c78a 	.word	0x2000c78a
 800d2e0:	2000c780 	.word	0x2000c780
 800d2e4:	2000c770 	.word	0x2000c770
 800d2e8:	20008e6c 	.word	0x20008e6c
 800d2ec:	20008e70 	.word	0x20008e70
 800d2f0:	08015ba8 	.word	0x08015ba8
 800d2f4:	08015e48 	.word	0x08015e48
 800d2f8:	08015bf4 	.word	0x08015bf4
 800d2fc:	2000c788 	.word	0x2000c788
 800d300:	2000c78d 	.word	0x2000c78d
 800d304:	2000c754 	.word	0x2000c754
 800d308:	697b      	ldr	r3, [r7, #20]
 800d30a:	68db      	ldr	r3, [r3, #12]
 800d30c:	687a      	ldr	r2, [r7, #4]
 800d30e:	429a      	cmp	r2, r3
 800d310:	d104      	bne.n	800d31c <tcp_process+0x5d8>
 800d312:	687b      	ldr	r3, [r7, #4]
 800d314:	68da      	ldr	r2, [r3, #12]
 800d316:	697b      	ldr	r3, [r7, #20]
 800d318:	60da      	str	r2, [r3, #12]
 800d31a:	e005      	b.n	800d328 <tcp_process+0x5e4>
 800d31c:	697b      	ldr	r3, [r7, #20]
 800d31e:	68db      	ldr	r3, [r3, #12]
 800d320:	617b      	str	r3, [r7, #20]
 800d322:	697b      	ldr	r3, [r7, #20]
 800d324:	2b00      	cmp	r3, #0
 800d326:	d1ef      	bne.n	800d308 <tcp_process+0x5c4>
 800d328:	687b      	ldr	r3, [r7, #4]
 800d32a:	2200      	movs	r2, #0
 800d32c:	60da      	str	r2, [r3, #12]
 800d32e:	4b77      	ldr	r3, [pc, #476]	; (800d50c <tcp_process+0x7c8>)
 800d330:	2201      	movs	r2, #1
 800d332:	701a      	strb	r2, [r3, #0]
          pcb->state = TIME_WAIT;
 800d334:	687b      	ldr	r3, [r7, #4]
 800d336:	220a      	movs	r2, #10
 800d338:	751a      	strb	r2, [r3, #20]
          TCP_REG(&tcp_tw_pcbs, pcb);
 800d33a:	4b75      	ldr	r3, [pc, #468]	; (800d510 <tcp_process+0x7cc>)
 800d33c:	681a      	ldr	r2, [r3, #0]
 800d33e:	687b      	ldr	r3, [r7, #4]
 800d340:	60da      	str	r2, [r3, #12]
 800d342:	4a73      	ldr	r2, [pc, #460]	; (800d510 <tcp_process+0x7cc>)
 800d344:	687b      	ldr	r3, [r7, #4]
 800d346:	6013      	str	r3, [r2, #0]
 800d348:	f002 fd34 	bl	800fdb4 <tcp_timer_needed>
        }
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
                 pcb->unsent == NULL) {
        pcb->state = FIN_WAIT_2;
      }
      break;
 800d34c:	e0d2      	b.n	800d4f4 <tcp_process+0x7b0>
          tcp_ack_now(pcb);
 800d34e:	687b      	ldr	r3, [r7, #4]
 800d350:	8b5b      	ldrh	r3, [r3, #26]
 800d352:	f043 0302 	orr.w	r3, r3, #2
 800d356:	b29a      	uxth	r2, r3
 800d358:	687b      	ldr	r3, [r7, #4]
 800d35a:	835a      	strh	r2, [r3, #26]
          pcb->state = CLOSING;
 800d35c:	687b      	ldr	r3, [r7, #4]
 800d35e:	2208      	movs	r2, #8
 800d360:	751a      	strb	r2, [r3, #20]
      break;
 800d362:	e0c7      	b.n	800d4f4 <tcp_process+0x7b0>
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800d364:	4b6b      	ldr	r3, [pc, #428]	; (800d514 <tcp_process+0x7d0>)
 800d366:	781b      	ldrb	r3, [r3, #0]
 800d368:	f003 0310 	and.w	r3, r3, #16
 800d36c:	2b00      	cmp	r3, #0
 800d36e:	f000 80c1 	beq.w	800d4f4 <tcp_process+0x7b0>
 800d372:	687b      	ldr	r3, [r7, #4]
 800d374:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800d376:	4b68      	ldr	r3, [pc, #416]	; (800d518 <tcp_process+0x7d4>)
 800d378:	681b      	ldr	r3, [r3, #0]
 800d37a:	429a      	cmp	r2, r3
 800d37c:	f040 80ba 	bne.w	800d4f4 <tcp_process+0x7b0>
                 pcb->unsent == NULL) {
 800d380:	687b      	ldr	r3, [r7, #4]
 800d382:	6edb      	ldr	r3, [r3, #108]	; 0x6c
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800d384:	2b00      	cmp	r3, #0
 800d386:	f040 80b5 	bne.w	800d4f4 <tcp_process+0x7b0>
        pcb->state = FIN_WAIT_2;
 800d38a:	687b      	ldr	r3, [r7, #4]
 800d38c:	2206      	movs	r2, #6
 800d38e:	751a      	strb	r2, [r3, #20]
      break;
 800d390:	e0b0      	b.n	800d4f4 <tcp_process+0x7b0>
    case FIN_WAIT_2:
      tcp_receive(pcb);
 800d392:	6878      	ldr	r0, [r7, #4]
 800d394:	f000 f9ca 	bl	800d72c <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 800d398:	4b60      	ldr	r3, [pc, #384]	; (800d51c <tcp_process+0x7d8>)
 800d39a:	781b      	ldrb	r3, [r3, #0]
 800d39c:	f003 0320 	and.w	r3, r3, #32
 800d3a0:	2b00      	cmp	r3, #0
 800d3a2:	f000 80a9 	beq.w	800d4f8 <tcp_process+0x7b4>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: FIN_WAIT_2 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_ack_now(pcb);
 800d3a6:	687b      	ldr	r3, [r7, #4]
 800d3a8:	8b5b      	ldrh	r3, [r3, #26]
 800d3aa:	f043 0302 	orr.w	r3, r3, #2
 800d3ae:	b29a      	uxth	r2, r3
 800d3b0:	687b      	ldr	r3, [r7, #4]
 800d3b2:	835a      	strh	r2, [r3, #26]
        tcp_pcb_purge(pcb);
 800d3b4:	6878      	ldr	r0, [r7, #4]
 800d3b6:	f7fe fcd3 	bl	800bd60 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 800d3ba:	4b59      	ldr	r3, [pc, #356]	; (800d520 <tcp_process+0x7dc>)
 800d3bc:	681b      	ldr	r3, [r3, #0]
 800d3be:	687a      	ldr	r2, [r7, #4]
 800d3c0:	429a      	cmp	r2, r3
 800d3c2:	d105      	bne.n	800d3d0 <tcp_process+0x68c>
 800d3c4:	4b56      	ldr	r3, [pc, #344]	; (800d520 <tcp_process+0x7dc>)
 800d3c6:	681b      	ldr	r3, [r3, #0]
 800d3c8:	68db      	ldr	r3, [r3, #12]
 800d3ca:	4a55      	ldr	r2, [pc, #340]	; (800d520 <tcp_process+0x7dc>)
 800d3cc:	6013      	str	r3, [r2, #0]
 800d3ce:	e013      	b.n	800d3f8 <tcp_process+0x6b4>
 800d3d0:	4b53      	ldr	r3, [pc, #332]	; (800d520 <tcp_process+0x7dc>)
 800d3d2:	681b      	ldr	r3, [r3, #0]
 800d3d4:	613b      	str	r3, [r7, #16]
 800d3d6:	e00c      	b.n	800d3f2 <tcp_process+0x6ae>
 800d3d8:	693b      	ldr	r3, [r7, #16]
 800d3da:	68db      	ldr	r3, [r3, #12]
 800d3dc:	687a      	ldr	r2, [r7, #4]
 800d3de:	429a      	cmp	r2, r3
 800d3e0:	d104      	bne.n	800d3ec <tcp_process+0x6a8>
 800d3e2:	687b      	ldr	r3, [r7, #4]
 800d3e4:	68da      	ldr	r2, [r3, #12]
 800d3e6:	693b      	ldr	r3, [r7, #16]
 800d3e8:	60da      	str	r2, [r3, #12]
 800d3ea:	e005      	b.n	800d3f8 <tcp_process+0x6b4>
 800d3ec:	693b      	ldr	r3, [r7, #16]
 800d3ee:	68db      	ldr	r3, [r3, #12]
 800d3f0:	613b      	str	r3, [r7, #16]
 800d3f2:	693b      	ldr	r3, [r7, #16]
 800d3f4:	2b00      	cmp	r3, #0
 800d3f6:	d1ef      	bne.n	800d3d8 <tcp_process+0x694>
 800d3f8:	687b      	ldr	r3, [r7, #4]
 800d3fa:	2200      	movs	r2, #0
 800d3fc:	60da      	str	r2, [r3, #12]
 800d3fe:	4b43      	ldr	r3, [pc, #268]	; (800d50c <tcp_process+0x7c8>)
 800d400:	2201      	movs	r2, #1
 800d402:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 800d404:	687b      	ldr	r3, [r7, #4]
 800d406:	220a      	movs	r2, #10
 800d408:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 800d40a:	4b41      	ldr	r3, [pc, #260]	; (800d510 <tcp_process+0x7cc>)
 800d40c:	681a      	ldr	r2, [r3, #0]
 800d40e:	687b      	ldr	r3, [r7, #4]
 800d410:	60da      	str	r2, [r3, #12]
 800d412:	4a3f      	ldr	r2, [pc, #252]	; (800d510 <tcp_process+0x7cc>)
 800d414:	687b      	ldr	r3, [r7, #4]
 800d416:	6013      	str	r3, [r2, #0]
 800d418:	f002 fccc 	bl	800fdb4 <tcp_timer_needed>
      }
      break;
 800d41c:	e06c      	b.n	800d4f8 <tcp_process+0x7b4>
    case CLOSING:
      tcp_receive(pcb);
 800d41e:	6878      	ldr	r0, [r7, #4]
 800d420:	f000 f984 	bl	800d72c <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 800d424:	4b3b      	ldr	r3, [pc, #236]	; (800d514 <tcp_process+0x7d0>)
 800d426:	781b      	ldrb	r3, [r3, #0]
 800d428:	f003 0310 	and.w	r3, r3, #16
 800d42c:	2b00      	cmp	r3, #0
 800d42e:	d065      	beq.n	800d4fc <tcp_process+0x7b8>
 800d430:	687b      	ldr	r3, [r7, #4]
 800d432:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800d434:	4b38      	ldr	r3, [pc, #224]	; (800d518 <tcp_process+0x7d4>)
 800d436:	681b      	ldr	r3, [r3, #0]
 800d438:	429a      	cmp	r2, r3
 800d43a:	d15f      	bne.n	800d4fc <tcp_process+0x7b8>
 800d43c:	687b      	ldr	r3, [r7, #4]
 800d43e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d440:	2b00      	cmp	r3, #0
 800d442:	d15b      	bne.n	800d4fc <tcp_process+0x7b8>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: CLOSING %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_pcb_purge(pcb);
 800d444:	6878      	ldr	r0, [r7, #4]
 800d446:	f7fe fc8b 	bl	800bd60 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 800d44a:	4b35      	ldr	r3, [pc, #212]	; (800d520 <tcp_process+0x7dc>)
 800d44c:	681b      	ldr	r3, [r3, #0]
 800d44e:	687a      	ldr	r2, [r7, #4]
 800d450:	429a      	cmp	r2, r3
 800d452:	d105      	bne.n	800d460 <tcp_process+0x71c>
 800d454:	4b32      	ldr	r3, [pc, #200]	; (800d520 <tcp_process+0x7dc>)
 800d456:	681b      	ldr	r3, [r3, #0]
 800d458:	68db      	ldr	r3, [r3, #12]
 800d45a:	4a31      	ldr	r2, [pc, #196]	; (800d520 <tcp_process+0x7dc>)
 800d45c:	6013      	str	r3, [r2, #0]
 800d45e:	e013      	b.n	800d488 <tcp_process+0x744>
 800d460:	4b2f      	ldr	r3, [pc, #188]	; (800d520 <tcp_process+0x7dc>)
 800d462:	681b      	ldr	r3, [r3, #0]
 800d464:	60fb      	str	r3, [r7, #12]
 800d466:	e00c      	b.n	800d482 <tcp_process+0x73e>
 800d468:	68fb      	ldr	r3, [r7, #12]
 800d46a:	68db      	ldr	r3, [r3, #12]
 800d46c:	687a      	ldr	r2, [r7, #4]
 800d46e:	429a      	cmp	r2, r3
 800d470:	d104      	bne.n	800d47c <tcp_process+0x738>
 800d472:	687b      	ldr	r3, [r7, #4]
 800d474:	68da      	ldr	r2, [r3, #12]
 800d476:	68fb      	ldr	r3, [r7, #12]
 800d478:	60da      	str	r2, [r3, #12]
 800d47a:	e005      	b.n	800d488 <tcp_process+0x744>
 800d47c:	68fb      	ldr	r3, [r7, #12]
 800d47e:	68db      	ldr	r3, [r3, #12]
 800d480:	60fb      	str	r3, [r7, #12]
 800d482:	68fb      	ldr	r3, [r7, #12]
 800d484:	2b00      	cmp	r3, #0
 800d486:	d1ef      	bne.n	800d468 <tcp_process+0x724>
 800d488:	687b      	ldr	r3, [r7, #4]
 800d48a:	2200      	movs	r2, #0
 800d48c:	60da      	str	r2, [r3, #12]
 800d48e:	4b1f      	ldr	r3, [pc, #124]	; (800d50c <tcp_process+0x7c8>)
 800d490:	2201      	movs	r2, #1
 800d492:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 800d494:	687b      	ldr	r3, [r7, #4]
 800d496:	220a      	movs	r2, #10
 800d498:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 800d49a:	4b1d      	ldr	r3, [pc, #116]	; (800d510 <tcp_process+0x7cc>)
 800d49c:	681a      	ldr	r2, [r3, #0]
 800d49e:	687b      	ldr	r3, [r7, #4]
 800d4a0:	60da      	str	r2, [r3, #12]
 800d4a2:	4a1b      	ldr	r2, [pc, #108]	; (800d510 <tcp_process+0x7cc>)
 800d4a4:	687b      	ldr	r3, [r7, #4]
 800d4a6:	6013      	str	r3, [r2, #0]
 800d4a8:	f002 fc84 	bl	800fdb4 <tcp_timer_needed>
      }
      break;
 800d4ac:	e026      	b.n	800d4fc <tcp_process+0x7b8>
    case LAST_ACK:
      tcp_receive(pcb);
 800d4ae:	6878      	ldr	r0, [r7, #4]
 800d4b0:	f000 f93c 	bl	800d72c <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 800d4b4:	4b17      	ldr	r3, [pc, #92]	; (800d514 <tcp_process+0x7d0>)
 800d4b6:	781b      	ldrb	r3, [r3, #0]
 800d4b8:	f003 0310 	and.w	r3, r3, #16
 800d4bc:	2b00      	cmp	r3, #0
 800d4be:	d01f      	beq.n	800d500 <tcp_process+0x7bc>
 800d4c0:	687b      	ldr	r3, [r7, #4]
 800d4c2:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800d4c4:	4b14      	ldr	r3, [pc, #80]	; (800d518 <tcp_process+0x7d4>)
 800d4c6:	681b      	ldr	r3, [r3, #0]
 800d4c8:	429a      	cmp	r2, r3
 800d4ca:	d119      	bne.n	800d500 <tcp_process+0x7bc>
 800d4cc:	687b      	ldr	r3, [r7, #4]
 800d4ce:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d4d0:	2b00      	cmp	r3, #0
 800d4d2:	d115      	bne.n	800d500 <tcp_process+0x7bc>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: LAST_ACK %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        /* bugfix #21699: don't set pcb->state to CLOSED here or we risk leaking segments */
        recv_flags |= TF_CLOSED;
 800d4d4:	4b11      	ldr	r3, [pc, #68]	; (800d51c <tcp_process+0x7d8>)
 800d4d6:	781b      	ldrb	r3, [r3, #0]
 800d4d8:	f043 0310 	orr.w	r3, r3, #16
 800d4dc:	b2da      	uxtb	r2, r3
 800d4de:	4b0f      	ldr	r3, [pc, #60]	; (800d51c <tcp_process+0x7d8>)
 800d4e0:	701a      	strb	r2, [r3, #0]
      }
      break;
 800d4e2:	e00d      	b.n	800d500 <tcp_process+0x7bc>
    default:
      break;
 800d4e4:	bf00      	nop
 800d4e6:	e00c      	b.n	800d502 <tcp_process+0x7be>
      break;
 800d4e8:	bf00      	nop
 800d4ea:	e00a      	b.n	800d502 <tcp_process+0x7be>
      break;
 800d4ec:	bf00      	nop
 800d4ee:	e008      	b.n	800d502 <tcp_process+0x7be>
      break;
 800d4f0:	bf00      	nop
 800d4f2:	e006      	b.n	800d502 <tcp_process+0x7be>
      break;
 800d4f4:	bf00      	nop
 800d4f6:	e004      	b.n	800d502 <tcp_process+0x7be>
      break;
 800d4f8:	bf00      	nop
 800d4fa:	e002      	b.n	800d502 <tcp_process+0x7be>
      break;
 800d4fc:	bf00      	nop
 800d4fe:	e000      	b.n	800d502 <tcp_process+0x7be>
      break;
 800d500:	bf00      	nop
  }
  return ERR_OK;
 800d502:	2300      	movs	r3, #0
}
 800d504:	4618      	mov	r0, r3
 800d506:	3724      	adds	r7, #36	; 0x24
 800d508:	46bd      	mov	sp, r7
 800d50a:	bd90      	pop	{r4, r7, pc}
 800d50c:	2000c75c 	.word	0x2000c75c
 800d510:	2000c758 	.word	0x2000c758
 800d514:	2000c78c 	.word	0x2000c78c
 800d518:	2000c784 	.word	0x2000c784
 800d51c:	2000c78d 	.word	0x2000c78d
 800d520:	2000c754 	.word	0x2000c754

0800d524 <tcp_oos_insert_segment>:
 *
 * Called from tcp_receive()
 */
static void
tcp_oos_insert_segment(struct tcp_seg *cseg, struct tcp_seg *next)
{
 800d524:	b590      	push	{r4, r7, lr}
 800d526:	b085      	sub	sp, #20
 800d528:	af00      	add	r7, sp, #0
 800d52a:	6078      	str	r0, [r7, #4]
 800d52c:	6039      	str	r1, [r7, #0]
  struct tcp_seg *old_seg;

  LWIP_ASSERT("tcp_oos_insert_segment: invalid cseg", cseg != NULL);
 800d52e:	687b      	ldr	r3, [r7, #4]
 800d530:	2b00      	cmp	r3, #0
 800d532:	d106      	bne.n	800d542 <tcp_oos_insert_segment+0x1e>
 800d534:	4b3b      	ldr	r3, [pc, #236]	; (800d624 <tcp_oos_insert_segment+0x100>)
 800d536:	f240 421f 	movw	r2, #1055	; 0x41f
 800d53a:	493b      	ldr	r1, [pc, #236]	; (800d628 <tcp_oos_insert_segment+0x104>)
 800d53c:	483b      	ldr	r0, [pc, #236]	; (800d62c <tcp_oos_insert_segment+0x108>)
 800d53e:	f006 fa13 	bl	8013968 <iprintf>

  if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 800d542:	687b      	ldr	r3, [r7, #4]
 800d544:	68db      	ldr	r3, [r3, #12]
 800d546:	899b      	ldrh	r3, [r3, #12]
 800d548:	b29b      	uxth	r3, r3
 800d54a:	4618      	mov	r0, r3
 800d54c:	f7fb fa98 	bl	8008a80 <lwip_htons>
 800d550:	4603      	mov	r3, r0
 800d552:	b2db      	uxtb	r3, r3
 800d554:	f003 0301 	and.w	r3, r3, #1
 800d558:	2b00      	cmp	r3, #0
 800d55a:	d028      	beq.n	800d5ae <tcp_oos_insert_segment+0x8a>
    /* received segment overlaps all following segments */
    tcp_segs_free(next);
 800d55c:	6838      	ldr	r0, [r7, #0]
 800d55e:	f7fe f9d3 	bl	800b908 <tcp_segs_free>
    next = NULL;
 800d562:	2300      	movs	r3, #0
 800d564:	603b      	str	r3, [r7, #0]
 800d566:	e056      	b.n	800d616 <tcp_oos_insert_segment+0xf2>
       oos queue may have segments with FIN flag */
    while (next &&
           TCP_SEQ_GEQ((seqno + cseg->len),
                       (next->tcphdr->seqno + next->len))) {
      /* cseg with FIN already processed */
      if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 800d568:	683b      	ldr	r3, [r7, #0]
 800d56a:	68db      	ldr	r3, [r3, #12]
 800d56c:	899b      	ldrh	r3, [r3, #12]
 800d56e:	b29b      	uxth	r3, r3
 800d570:	4618      	mov	r0, r3
 800d572:	f7fb fa85 	bl	8008a80 <lwip_htons>
 800d576:	4603      	mov	r3, r0
 800d578:	b2db      	uxtb	r3, r3
 800d57a:	f003 0301 	and.w	r3, r3, #1
 800d57e:	2b00      	cmp	r3, #0
 800d580:	d00d      	beq.n	800d59e <tcp_oos_insert_segment+0x7a>
        TCPH_SET_FLAG(cseg->tcphdr, TCP_FIN);
 800d582:	687b      	ldr	r3, [r7, #4]
 800d584:	68db      	ldr	r3, [r3, #12]
 800d586:	899b      	ldrh	r3, [r3, #12]
 800d588:	b29c      	uxth	r4, r3
 800d58a:	2001      	movs	r0, #1
 800d58c:	f7fb fa78 	bl	8008a80 <lwip_htons>
 800d590:	4603      	mov	r3, r0
 800d592:	461a      	mov	r2, r3
 800d594:	687b      	ldr	r3, [r7, #4]
 800d596:	68db      	ldr	r3, [r3, #12]
 800d598:	4322      	orrs	r2, r4
 800d59a:	b292      	uxth	r2, r2
 800d59c:	819a      	strh	r2, [r3, #12]
      }
      old_seg = next;
 800d59e:	683b      	ldr	r3, [r7, #0]
 800d5a0:	60fb      	str	r3, [r7, #12]
      next = next->next;
 800d5a2:	683b      	ldr	r3, [r7, #0]
 800d5a4:	681b      	ldr	r3, [r3, #0]
 800d5a6:	603b      	str	r3, [r7, #0]
      tcp_seg_free(old_seg);
 800d5a8:	68f8      	ldr	r0, [r7, #12]
 800d5aa:	f7fe f9c2 	bl	800b932 <tcp_seg_free>
    while (next &&
 800d5ae:	683b      	ldr	r3, [r7, #0]
 800d5b0:	2b00      	cmp	r3, #0
 800d5b2:	d00e      	beq.n	800d5d2 <tcp_oos_insert_segment+0xae>
           TCP_SEQ_GEQ((seqno + cseg->len),
 800d5b4:	687b      	ldr	r3, [r7, #4]
 800d5b6:	891b      	ldrh	r3, [r3, #8]
 800d5b8:	461a      	mov	r2, r3
 800d5ba:	4b1d      	ldr	r3, [pc, #116]	; (800d630 <tcp_oos_insert_segment+0x10c>)
 800d5bc:	681b      	ldr	r3, [r3, #0]
 800d5be:	441a      	add	r2, r3
 800d5c0:	683b      	ldr	r3, [r7, #0]
 800d5c2:	68db      	ldr	r3, [r3, #12]
 800d5c4:	685b      	ldr	r3, [r3, #4]
 800d5c6:	6839      	ldr	r1, [r7, #0]
 800d5c8:	8909      	ldrh	r1, [r1, #8]
 800d5ca:	440b      	add	r3, r1
 800d5cc:	1ad3      	subs	r3, r2, r3
    while (next &&
 800d5ce:	2b00      	cmp	r3, #0
 800d5d0:	daca      	bge.n	800d568 <tcp_oos_insert_segment+0x44>
    }
    if (next &&
 800d5d2:	683b      	ldr	r3, [r7, #0]
 800d5d4:	2b00      	cmp	r3, #0
 800d5d6:	d01e      	beq.n	800d616 <tcp_oos_insert_segment+0xf2>
        TCP_SEQ_GT(seqno + cseg->len, next->tcphdr->seqno)) {
 800d5d8:	687b      	ldr	r3, [r7, #4]
 800d5da:	891b      	ldrh	r3, [r3, #8]
 800d5dc:	461a      	mov	r2, r3
 800d5de:	4b14      	ldr	r3, [pc, #80]	; (800d630 <tcp_oos_insert_segment+0x10c>)
 800d5e0:	681b      	ldr	r3, [r3, #0]
 800d5e2:	441a      	add	r2, r3
 800d5e4:	683b      	ldr	r3, [r7, #0]
 800d5e6:	68db      	ldr	r3, [r3, #12]
 800d5e8:	685b      	ldr	r3, [r3, #4]
 800d5ea:	1ad3      	subs	r3, r2, r3
    if (next &&
 800d5ec:	2b00      	cmp	r3, #0
 800d5ee:	dd12      	ble.n	800d616 <tcp_oos_insert_segment+0xf2>
      /* We need to trim the incoming segment. */
      cseg->len = (u16_t)(next->tcphdr->seqno - seqno);
 800d5f0:	683b      	ldr	r3, [r7, #0]
 800d5f2:	68db      	ldr	r3, [r3, #12]
 800d5f4:	685b      	ldr	r3, [r3, #4]
 800d5f6:	b29a      	uxth	r2, r3
 800d5f8:	4b0d      	ldr	r3, [pc, #52]	; (800d630 <tcp_oos_insert_segment+0x10c>)
 800d5fa:	681b      	ldr	r3, [r3, #0]
 800d5fc:	b29b      	uxth	r3, r3
 800d5fe:	1ad3      	subs	r3, r2, r3
 800d600:	b29a      	uxth	r2, r3
 800d602:	687b      	ldr	r3, [r7, #4]
 800d604:	811a      	strh	r2, [r3, #8]
      pbuf_realloc(cseg->p, cseg->len);
 800d606:	687b      	ldr	r3, [r7, #4]
 800d608:	685a      	ldr	r2, [r3, #4]
 800d60a:	687b      	ldr	r3, [r7, #4]
 800d60c:	891b      	ldrh	r3, [r3, #8]
 800d60e:	4619      	mov	r1, r3
 800d610:	4610      	mov	r0, r2
 800d612:	f7fc fd71 	bl	800a0f8 <pbuf_realloc>
    }
  }
  cseg->next = next;
 800d616:	687b      	ldr	r3, [r7, #4]
 800d618:	683a      	ldr	r2, [r7, #0]
 800d61a:	601a      	str	r2, [r3, #0]
}
 800d61c:	bf00      	nop
 800d61e:	3714      	adds	r7, #20
 800d620:	46bd      	mov	sp, r7
 800d622:	bd90      	pop	{r4, r7, pc}
 800d624:	08015ba8 	.word	0x08015ba8
 800d628:	08015e68 	.word	0x08015e68
 800d62c:	08015bf4 	.word	0x08015bf4
 800d630:	2000c780 	.word	0x2000c780

0800d634 <tcp_free_acked_segments>:

/** Remove segments from a list if the incoming ACK acknowledges them */
static struct tcp_seg *
tcp_free_acked_segments(struct tcp_pcb *pcb, struct tcp_seg *seg_list, const char *dbg_list_name,
                        struct tcp_seg *dbg_other_seg_list)
{
 800d634:	b5b0      	push	{r4, r5, r7, lr}
 800d636:	b086      	sub	sp, #24
 800d638:	af00      	add	r7, sp, #0
 800d63a:	60f8      	str	r0, [r7, #12]
 800d63c:	60b9      	str	r1, [r7, #8]
 800d63e:	607a      	str	r2, [r7, #4]
 800d640:	603b      	str	r3, [r7, #0]
  u16_t clen;

  LWIP_UNUSED_ARG(dbg_list_name);
  LWIP_UNUSED_ARG(dbg_other_seg_list);

  while (seg_list != NULL &&
 800d642:	e03e      	b.n	800d6c2 <tcp_free_acked_segments+0x8e>
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: removing %"U32_F":%"U32_F" from pcb->%s\n",
                                  lwip_ntohl(seg_list->tcphdr->seqno),
                                  lwip_ntohl(seg_list->tcphdr->seqno) + TCP_TCPLEN(seg_list),
                                  dbg_list_name));

    next = seg_list;
 800d644:	68bb      	ldr	r3, [r7, #8]
 800d646:	617b      	str	r3, [r7, #20]
    seg_list = seg_list->next;
 800d648:	68bb      	ldr	r3, [r7, #8]
 800d64a:	681b      	ldr	r3, [r3, #0]
 800d64c:	60bb      	str	r3, [r7, #8]

    clen = pbuf_clen(next->p);
 800d64e:	697b      	ldr	r3, [r7, #20]
 800d650:	685b      	ldr	r3, [r3, #4]
 800d652:	4618      	mov	r0, r3
 800d654:	f7fc ff64 	bl	800a520 <pbuf_clen>
 800d658:	4603      	mov	r3, r0
 800d65a:	827b      	strh	r3, [r7, #18]
    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_receive: queuelen %"TCPWNDSIZE_F" ... ",
                                 (tcpwnd_size_t)pcb->snd_queuelen));
    LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= clen));
 800d65c:	68fb      	ldr	r3, [r7, #12]
 800d65e:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800d662:	8a7a      	ldrh	r2, [r7, #18]
 800d664:	429a      	cmp	r2, r3
 800d666:	d906      	bls.n	800d676 <tcp_free_acked_segments+0x42>
 800d668:	4b2a      	ldr	r3, [pc, #168]	; (800d714 <tcp_free_acked_segments+0xe0>)
 800d66a:	f240 4257 	movw	r2, #1111	; 0x457
 800d66e:	492a      	ldr	r1, [pc, #168]	; (800d718 <tcp_free_acked_segments+0xe4>)
 800d670:	482a      	ldr	r0, [pc, #168]	; (800d71c <tcp_free_acked_segments+0xe8>)
 800d672:	f006 f979 	bl	8013968 <iprintf>

    pcb->snd_queuelen = (u16_t)(pcb->snd_queuelen - clen);
 800d676:	68fb      	ldr	r3, [r7, #12]
 800d678:	f8b3 2066 	ldrh.w	r2, [r3, #102]	; 0x66
 800d67c:	8a7b      	ldrh	r3, [r7, #18]
 800d67e:	1ad3      	subs	r3, r2, r3
 800d680:	b29a      	uxth	r2, r3
 800d682:	68fb      	ldr	r3, [r7, #12]
 800d684:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
    recv_acked = (tcpwnd_size_t)(recv_acked + next->len);
 800d688:	697b      	ldr	r3, [r7, #20]
 800d68a:	891a      	ldrh	r2, [r3, #8]
 800d68c:	4b24      	ldr	r3, [pc, #144]	; (800d720 <tcp_free_acked_segments+0xec>)
 800d68e:	881b      	ldrh	r3, [r3, #0]
 800d690:	4413      	add	r3, r2
 800d692:	b29a      	uxth	r2, r3
 800d694:	4b22      	ldr	r3, [pc, #136]	; (800d720 <tcp_free_acked_segments+0xec>)
 800d696:	801a      	strh	r2, [r3, #0]
    tcp_seg_free(next);
 800d698:	6978      	ldr	r0, [r7, #20]
 800d69a:	f7fe f94a 	bl	800b932 <tcp_seg_free>

    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("%"TCPWNDSIZE_F" (after freeing %s)\n",
                                 (tcpwnd_size_t)pcb->snd_queuelen,
                                 dbg_list_name));
    if (pcb->snd_queuelen != 0) {
 800d69e:	68fb      	ldr	r3, [r7, #12]
 800d6a0:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800d6a4:	2b00      	cmp	r3, #0
 800d6a6:	d00c      	beq.n	800d6c2 <tcp_free_acked_segments+0x8e>
      LWIP_ASSERT("tcp_receive: valid queue length",
 800d6a8:	68bb      	ldr	r3, [r7, #8]
 800d6aa:	2b00      	cmp	r3, #0
 800d6ac:	d109      	bne.n	800d6c2 <tcp_free_acked_segments+0x8e>
 800d6ae:	683b      	ldr	r3, [r7, #0]
 800d6b0:	2b00      	cmp	r3, #0
 800d6b2:	d106      	bne.n	800d6c2 <tcp_free_acked_segments+0x8e>
 800d6b4:	4b17      	ldr	r3, [pc, #92]	; (800d714 <tcp_free_acked_segments+0xe0>)
 800d6b6:	f240 4261 	movw	r2, #1121	; 0x461
 800d6ba:	491a      	ldr	r1, [pc, #104]	; (800d724 <tcp_free_acked_segments+0xf0>)
 800d6bc:	4817      	ldr	r0, [pc, #92]	; (800d71c <tcp_free_acked_segments+0xe8>)
 800d6be:	f006 f953 	bl	8013968 <iprintf>
  while (seg_list != NULL &&
 800d6c2:	68bb      	ldr	r3, [r7, #8]
 800d6c4:	2b00      	cmp	r3, #0
 800d6c6:	d020      	beq.n	800d70a <tcp_free_acked_segments+0xd6>
         TCP_SEQ_LEQ(lwip_ntohl(seg_list->tcphdr->seqno) +
 800d6c8:	68bb      	ldr	r3, [r7, #8]
 800d6ca:	68db      	ldr	r3, [r3, #12]
 800d6cc:	685b      	ldr	r3, [r3, #4]
 800d6ce:	4618      	mov	r0, r3
 800d6d0:	f7fb f9eb 	bl	8008aaa <lwip_htonl>
 800d6d4:	4604      	mov	r4, r0
 800d6d6:	68bb      	ldr	r3, [r7, #8]
 800d6d8:	891b      	ldrh	r3, [r3, #8]
 800d6da:	461d      	mov	r5, r3
 800d6dc:	68bb      	ldr	r3, [r7, #8]
 800d6de:	68db      	ldr	r3, [r3, #12]
 800d6e0:	899b      	ldrh	r3, [r3, #12]
 800d6e2:	b29b      	uxth	r3, r3
 800d6e4:	4618      	mov	r0, r3
 800d6e6:	f7fb f9cb 	bl	8008a80 <lwip_htons>
 800d6ea:	4603      	mov	r3, r0
 800d6ec:	b2db      	uxtb	r3, r3
 800d6ee:	f003 0303 	and.w	r3, r3, #3
 800d6f2:	2b00      	cmp	r3, #0
 800d6f4:	d001      	beq.n	800d6fa <tcp_free_acked_segments+0xc6>
 800d6f6:	2301      	movs	r3, #1
 800d6f8:	e000      	b.n	800d6fc <tcp_free_acked_segments+0xc8>
 800d6fa:	2300      	movs	r3, #0
 800d6fc:	442b      	add	r3, r5
 800d6fe:	18e2      	adds	r2, r4, r3
 800d700:	4b09      	ldr	r3, [pc, #36]	; (800d728 <tcp_free_acked_segments+0xf4>)
 800d702:	681b      	ldr	r3, [r3, #0]
 800d704:	1ad3      	subs	r3, r2, r3
  while (seg_list != NULL &&
 800d706:	2b00      	cmp	r3, #0
 800d708:	dd9c      	ble.n	800d644 <tcp_free_acked_segments+0x10>
                  seg_list != NULL || dbg_other_seg_list != NULL);
    }
  }
  return seg_list;
 800d70a:	68bb      	ldr	r3, [r7, #8]
}
 800d70c:	4618      	mov	r0, r3
 800d70e:	3718      	adds	r7, #24
 800d710:	46bd      	mov	sp, r7
 800d712:	bdb0      	pop	{r4, r5, r7, pc}
 800d714:	08015ba8 	.word	0x08015ba8
 800d718:	08015e90 	.word	0x08015e90
 800d71c:	08015bf4 	.word	0x08015bf4
 800d720:	2000c788 	.word	0x2000c788
 800d724:	08015eb8 	.word	0x08015eb8
 800d728:	2000c784 	.word	0x2000c784

0800d72c <tcp_receive>:
 *
 * Called from tcp_process().
 */
static void
tcp_receive(struct tcp_pcb *pcb)
{
 800d72c:	b5b0      	push	{r4, r5, r7, lr}
 800d72e:	b094      	sub	sp, #80	; 0x50
 800d730:	af00      	add	r7, sp, #0
 800d732:	6078      	str	r0, [r7, #4]
  s16_t m;
  u32_t right_wnd_edge;
  int found_dupack = 0;
 800d734:	2300      	movs	r3, #0
 800d736:	64bb      	str	r3, [r7, #72]	; 0x48

  LWIP_ASSERT("tcp_receive: invalid pcb", pcb != NULL);
 800d738:	687b      	ldr	r3, [r7, #4]
 800d73a:	2b00      	cmp	r3, #0
 800d73c:	d106      	bne.n	800d74c <tcp_receive+0x20>
 800d73e:	4b91      	ldr	r3, [pc, #580]	; (800d984 <tcp_receive+0x258>)
 800d740:	f240 427b 	movw	r2, #1147	; 0x47b
 800d744:	4990      	ldr	r1, [pc, #576]	; (800d988 <tcp_receive+0x25c>)
 800d746:	4891      	ldr	r0, [pc, #580]	; (800d98c <tcp_receive+0x260>)
 800d748:	f006 f90e 	bl	8013968 <iprintf>
  LWIP_ASSERT("tcp_receive: wrong state", pcb->state >= ESTABLISHED);
 800d74c:	687b      	ldr	r3, [r7, #4]
 800d74e:	7d1b      	ldrb	r3, [r3, #20]
 800d750:	2b03      	cmp	r3, #3
 800d752:	d806      	bhi.n	800d762 <tcp_receive+0x36>
 800d754:	4b8b      	ldr	r3, [pc, #556]	; (800d984 <tcp_receive+0x258>)
 800d756:	f240 427c 	movw	r2, #1148	; 0x47c
 800d75a:	498d      	ldr	r1, [pc, #564]	; (800d990 <tcp_receive+0x264>)
 800d75c:	488b      	ldr	r0, [pc, #556]	; (800d98c <tcp_receive+0x260>)
 800d75e:	f006 f903 	bl	8013968 <iprintf>

  if (flags & TCP_ACK) {
 800d762:	4b8c      	ldr	r3, [pc, #560]	; (800d994 <tcp_receive+0x268>)
 800d764:	781b      	ldrb	r3, [r3, #0]
 800d766:	f003 0310 	and.w	r3, r3, #16
 800d76a:	2b00      	cmp	r3, #0
 800d76c:	f000 8264 	beq.w	800dc38 <tcp_receive+0x50c>
    right_wnd_edge = pcb->snd_wnd + pcb->snd_wl2;
 800d770:	687b      	ldr	r3, [r7, #4]
 800d772:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800d776:	461a      	mov	r2, r3
 800d778:	687b      	ldr	r3, [r7, #4]
 800d77a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800d77c:	4413      	add	r3, r2
 800d77e:	633b      	str	r3, [r7, #48]	; 0x30

    /* Update window. */
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 800d780:	687b      	ldr	r3, [r7, #4]
 800d782:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800d784:	4b84      	ldr	r3, [pc, #528]	; (800d998 <tcp_receive+0x26c>)
 800d786:	681b      	ldr	r3, [r3, #0]
 800d788:	1ad3      	subs	r3, r2, r3
 800d78a:	2b00      	cmp	r3, #0
 800d78c:	db1b      	blt.n	800d7c6 <tcp_receive+0x9a>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 800d78e:	687b      	ldr	r3, [r7, #4]
 800d790:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800d792:	4b81      	ldr	r3, [pc, #516]	; (800d998 <tcp_receive+0x26c>)
 800d794:	681b      	ldr	r3, [r3, #0]
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 800d796:	429a      	cmp	r2, r3
 800d798:	d106      	bne.n	800d7a8 <tcp_receive+0x7c>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 800d79a:	687b      	ldr	r3, [r7, #4]
 800d79c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800d79e:	4b7f      	ldr	r3, [pc, #508]	; (800d99c <tcp_receive+0x270>)
 800d7a0:	681b      	ldr	r3, [r3, #0]
 800d7a2:	1ad3      	subs	r3, r2, r3
 800d7a4:	2b00      	cmp	r3, #0
 800d7a6:	db0e      	blt.n	800d7c6 <tcp_receive+0x9a>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 800d7a8:	687b      	ldr	r3, [r7, #4]
 800d7aa:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800d7ac:	4b7b      	ldr	r3, [pc, #492]	; (800d99c <tcp_receive+0x270>)
 800d7ae:	681b      	ldr	r3, [r3, #0]
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 800d7b0:	429a      	cmp	r2, r3
 800d7b2:	d125      	bne.n	800d800 <tcp_receive+0xd4>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 800d7b4:	4b7a      	ldr	r3, [pc, #488]	; (800d9a0 <tcp_receive+0x274>)
 800d7b6:	681b      	ldr	r3, [r3, #0]
 800d7b8:	89db      	ldrh	r3, [r3, #14]
 800d7ba:	b29a      	uxth	r2, r3
 800d7bc:	687b      	ldr	r3, [r7, #4]
 800d7be:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800d7c2:	429a      	cmp	r2, r3
 800d7c4:	d91c      	bls.n	800d800 <tcp_receive+0xd4>
      pcb->snd_wnd = SND_WND_SCALE(pcb, tcphdr->wnd);
 800d7c6:	4b76      	ldr	r3, [pc, #472]	; (800d9a0 <tcp_receive+0x274>)
 800d7c8:	681b      	ldr	r3, [r3, #0]
 800d7ca:	89db      	ldrh	r3, [r3, #14]
 800d7cc:	b29a      	uxth	r2, r3
 800d7ce:	687b      	ldr	r3, [r7, #4]
 800d7d0:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
      /* keep track of the biggest window announced by the remote host to calculate
         the maximum segment size */
      if (pcb->snd_wnd_max < pcb->snd_wnd) {
 800d7d4:	687b      	ldr	r3, [r7, #4]
 800d7d6:	f8b3 2062 	ldrh.w	r2, [r3, #98]	; 0x62
 800d7da:	687b      	ldr	r3, [r7, #4]
 800d7dc:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800d7e0:	429a      	cmp	r2, r3
 800d7e2:	d205      	bcs.n	800d7f0 <tcp_receive+0xc4>
        pcb->snd_wnd_max = pcb->snd_wnd;
 800d7e4:	687b      	ldr	r3, [r7, #4]
 800d7e6:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800d7ea:	687b      	ldr	r3, [r7, #4]
 800d7ec:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
      }
      pcb->snd_wl1 = seqno;
 800d7f0:	4b69      	ldr	r3, [pc, #420]	; (800d998 <tcp_receive+0x26c>)
 800d7f2:	681a      	ldr	r2, [r3, #0]
 800d7f4:	687b      	ldr	r3, [r7, #4]
 800d7f6:	655a      	str	r2, [r3, #84]	; 0x54
      pcb->snd_wl2 = ackno;
 800d7f8:	4b68      	ldr	r3, [pc, #416]	; (800d99c <tcp_receive+0x270>)
 800d7fa:	681a      	ldr	r2, [r3, #0]
 800d7fc:	687b      	ldr	r3, [r7, #4]
 800d7fe:	659a      	str	r2, [r3, #88]	; 0x58
     * If it only passes 1, should reset dupack counter
     *
     */

    /* Clause 1 */
    if (TCP_SEQ_LEQ(ackno, pcb->lastack)) {
 800d800:	4b66      	ldr	r3, [pc, #408]	; (800d99c <tcp_receive+0x270>)
 800d802:	681a      	ldr	r2, [r3, #0]
 800d804:	687b      	ldr	r3, [r7, #4]
 800d806:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d808:	1ad3      	subs	r3, r2, r3
 800d80a:	2b00      	cmp	r3, #0
 800d80c:	dc58      	bgt.n	800d8c0 <tcp_receive+0x194>
      /* Clause 2 */
      if (tcplen == 0) {
 800d80e:	4b65      	ldr	r3, [pc, #404]	; (800d9a4 <tcp_receive+0x278>)
 800d810:	881b      	ldrh	r3, [r3, #0]
 800d812:	2b00      	cmp	r3, #0
 800d814:	d14b      	bne.n	800d8ae <tcp_receive+0x182>
        /* Clause 3 */
        if (pcb->snd_wl2 + pcb->snd_wnd == right_wnd_edge) {
 800d816:	687b      	ldr	r3, [r7, #4]
 800d818:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800d81a:	687a      	ldr	r2, [r7, #4]
 800d81c:	f8b2 2060 	ldrh.w	r2, [r2, #96]	; 0x60
 800d820:	4413      	add	r3, r2
 800d822:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d824:	429a      	cmp	r2, r3
 800d826:	d142      	bne.n	800d8ae <tcp_receive+0x182>
          /* Clause 4 */
          if (pcb->rtime >= 0) {
 800d828:	687b      	ldr	r3, [r7, #4]
 800d82a:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800d82e:	2b00      	cmp	r3, #0
 800d830:	db3d      	blt.n	800d8ae <tcp_receive+0x182>
            /* Clause 5 */
            if (pcb->lastack == ackno) {
 800d832:	687b      	ldr	r3, [r7, #4]
 800d834:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800d836:	4b59      	ldr	r3, [pc, #356]	; (800d99c <tcp_receive+0x270>)
 800d838:	681b      	ldr	r3, [r3, #0]
 800d83a:	429a      	cmp	r2, r3
 800d83c:	d137      	bne.n	800d8ae <tcp_receive+0x182>
              found_dupack = 1;
 800d83e:	2301      	movs	r3, #1
 800d840:	64bb      	str	r3, [r7, #72]	; 0x48
              if ((u8_t)(pcb->dupacks + 1) > pcb->dupacks) {
 800d842:	687b      	ldr	r3, [r7, #4]
 800d844:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800d848:	2bff      	cmp	r3, #255	; 0xff
 800d84a:	d007      	beq.n	800d85c <tcp_receive+0x130>
                ++pcb->dupacks;
 800d84c:	687b      	ldr	r3, [r7, #4]
 800d84e:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800d852:	3301      	adds	r3, #1
 800d854:	b2da      	uxtb	r2, r3
 800d856:	687b      	ldr	r3, [r7, #4]
 800d858:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
              }
              if (pcb->dupacks > 3) {
 800d85c:	687b      	ldr	r3, [r7, #4]
 800d85e:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800d862:	2b03      	cmp	r3, #3
 800d864:	d91b      	bls.n	800d89e <tcp_receive+0x172>
                /* Inflate the congestion window */
                TCP_WND_INC(pcb->cwnd, pcb->mss);
 800d866:	687b      	ldr	r3, [r7, #4]
 800d868:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800d86c:	687b      	ldr	r3, [r7, #4]
 800d86e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800d870:	4413      	add	r3, r2
 800d872:	b29a      	uxth	r2, r3
 800d874:	687b      	ldr	r3, [r7, #4]
 800d876:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800d87a:	429a      	cmp	r2, r3
 800d87c:	d30a      	bcc.n	800d894 <tcp_receive+0x168>
 800d87e:	687b      	ldr	r3, [r7, #4]
 800d880:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800d884:	687b      	ldr	r3, [r7, #4]
 800d886:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800d888:	4413      	add	r3, r2
 800d88a:	b29a      	uxth	r2, r3
 800d88c:	687b      	ldr	r3, [r7, #4]
 800d88e:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 800d892:	e004      	b.n	800d89e <tcp_receive+0x172>
 800d894:	687b      	ldr	r3, [r7, #4]
 800d896:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800d89a:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
              }
              if (pcb->dupacks >= 3) {
 800d89e:	687b      	ldr	r3, [r7, #4]
 800d8a0:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800d8a4:	2b02      	cmp	r3, #2
 800d8a6:	d902      	bls.n	800d8ae <tcp_receive+0x182>
                /* Do fast retransmit (checked via TF_INFR, not via dupacks count) */
                tcp_rexmit_fast(pcb);
 800d8a8:	6878      	ldr	r0, [r7, #4]
 800d8aa:	f001 ff1b 	bl	800f6e4 <tcp_rexmit_fast>
          }
        }
      }
      /* If Clause (1) or more is true, but not a duplicate ack, reset
       * count of consecutive duplicate acks */
      if (!found_dupack) {
 800d8ae:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800d8b0:	2b00      	cmp	r3, #0
 800d8b2:	f040 8161 	bne.w	800db78 <tcp_receive+0x44c>
        pcb->dupacks = 0;
 800d8b6:	687b      	ldr	r3, [r7, #4]
 800d8b8:	2200      	movs	r2, #0
 800d8ba:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800d8be:	e15b      	b.n	800db78 <tcp_receive+0x44c>
      }
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800d8c0:	4b36      	ldr	r3, [pc, #216]	; (800d99c <tcp_receive+0x270>)
 800d8c2:	681a      	ldr	r2, [r3, #0]
 800d8c4:	687b      	ldr	r3, [r7, #4]
 800d8c6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d8c8:	1ad3      	subs	r3, r2, r3
 800d8ca:	3b01      	subs	r3, #1
 800d8cc:	2b00      	cmp	r3, #0
 800d8ce:	f2c0 814e 	blt.w	800db6e <tcp_receive+0x442>
 800d8d2:	4b32      	ldr	r3, [pc, #200]	; (800d99c <tcp_receive+0x270>)
 800d8d4:	681a      	ldr	r2, [r3, #0]
 800d8d6:	687b      	ldr	r3, [r7, #4]
 800d8d8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d8da:	1ad3      	subs	r3, r2, r3
 800d8dc:	2b00      	cmp	r3, #0
 800d8de:	f300 8146 	bgt.w	800db6e <tcp_receive+0x442>
      tcpwnd_size_t acked;

      /* Reset the "IN Fast Retransmit" flag, since we are no longer
         in fast retransmit. Also reset the congestion window to the
         slow start threshold. */
      if (pcb->flags & TF_INFR) {
 800d8e2:	687b      	ldr	r3, [r7, #4]
 800d8e4:	8b5b      	ldrh	r3, [r3, #26]
 800d8e6:	f003 0304 	and.w	r3, r3, #4
 800d8ea:	2b00      	cmp	r3, #0
 800d8ec:	d010      	beq.n	800d910 <tcp_receive+0x1e4>
        tcp_clear_flags(pcb, TF_INFR);
 800d8ee:	687b      	ldr	r3, [r7, #4]
 800d8f0:	8b5b      	ldrh	r3, [r3, #26]
 800d8f2:	f023 0304 	bic.w	r3, r3, #4
 800d8f6:	b29a      	uxth	r2, r3
 800d8f8:	687b      	ldr	r3, [r7, #4]
 800d8fa:	835a      	strh	r2, [r3, #26]
        pcb->cwnd = pcb->ssthresh;
 800d8fc:	687b      	ldr	r3, [r7, #4]
 800d8fe:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 800d902:	687b      	ldr	r3, [r7, #4]
 800d904:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
        pcb->bytes_acked = 0;
 800d908:	687b      	ldr	r3, [r7, #4]
 800d90a:	2200      	movs	r2, #0
 800d90c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
      }

      /* Reset the number of retransmissions. */
      pcb->nrtx = 0;
 800d910:	687b      	ldr	r3, [r7, #4]
 800d912:	2200      	movs	r2, #0
 800d914:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Reset the retransmission time-out. */
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 800d918:	687b      	ldr	r3, [r7, #4]
 800d91a:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800d91e:	10db      	asrs	r3, r3, #3
 800d920:	b21b      	sxth	r3, r3
 800d922:	b29a      	uxth	r2, r3
 800d924:	687b      	ldr	r3, [r7, #4]
 800d926:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800d92a:	b29b      	uxth	r3, r3
 800d92c:	4413      	add	r3, r2
 800d92e:	b29b      	uxth	r3, r3
 800d930:	b21a      	sxth	r2, r3
 800d932:	687b      	ldr	r3, [r7, #4]
 800d934:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      /* Record how much data this ACK acks */
      acked = (tcpwnd_size_t)(ackno - pcb->lastack);
 800d938:	4b18      	ldr	r3, [pc, #96]	; (800d99c <tcp_receive+0x270>)
 800d93a:	681b      	ldr	r3, [r3, #0]
 800d93c:	b29a      	uxth	r2, r3
 800d93e:	687b      	ldr	r3, [r7, #4]
 800d940:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d942:	b29b      	uxth	r3, r3
 800d944:	1ad3      	subs	r3, r2, r3
 800d946:	85fb      	strh	r3, [r7, #46]	; 0x2e

      /* Reset the fast retransmit variables. */
      pcb->dupacks = 0;
 800d948:	687b      	ldr	r3, [r7, #4]
 800d94a:	2200      	movs	r2, #0
 800d94c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
      pcb->lastack = ackno;
 800d950:	4b12      	ldr	r3, [pc, #72]	; (800d99c <tcp_receive+0x270>)
 800d952:	681a      	ldr	r2, [r3, #0]
 800d954:	687b      	ldr	r3, [r7, #4]
 800d956:	645a      	str	r2, [r3, #68]	; 0x44

      /* Update the congestion control variables (cwnd and
         ssthresh). */
      if (pcb->state >= ESTABLISHED) {
 800d958:	687b      	ldr	r3, [r7, #4]
 800d95a:	7d1b      	ldrb	r3, [r3, #20]
 800d95c:	2b03      	cmp	r3, #3
 800d95e:	f240 8097 	bls.w	800da90 <tcp_receive+0x364>
        if (pcb->cwnd < pcb->ssthresh) {
 800d962:	687b      	ldr	r3, [r7, #4]
 800d964:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800d968:	687b      	ldr	r3, [r7, #4]
 800d96a:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 800d96e:	429a      	cmp	r2, r3
 800d970:	d245      	bcs.n	800d9fe <tcp_receive+0x2d2>
          tcpwnd_size_t increase;
          /* limit to 1 SMSS segment during period following RTO */
          u8_t num_seg = (pcb->flags & TF_RTO) ? 1 : 2;
 800d972:	687b      	ldr	r3, [r7, #4]
 800d974:	8b5b      	ldrh	r3, [r3, #26]
 800d976:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800d97a:	2b00      	cmp	r3, #0
 800d97c:	d014      	beq.n	800d9a8 <tcp_receive+0x27c>
 800d97e:	2301      	movs	r3, #1
 800d980:	e013      	b.n	800d9aa <tcp_receive+0x27e>
 800d982:	bf00      	nop
 800d984:	08015ba8 	.word	0x08015ba8
 800d988:	08015ed8 	.word	0x08015ed8
 800d98c:	08015bf4 	.word	0x08015bf4
 800d990:	08015ef4 	.word	0x08015ef4
 800d994:	2000c78c 	.word	0x2000c78c
 800d998:	2000c780 	.word	0x2000c780
 800d99c:	2000c784 	.word	0x2000c784
 800d9a0:	2000c770 	.word	0x2000c770
 800d9a4:	2000c78a 	.word	0x2000c78a
 800d9a8:	2302      	movs	r3, #2
 800d9aa:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
          /* RFC 3465, section 2.2 Slow Start */
          increase = LWIP_MIN(acked, (tcpwnd_size_t)(num_seg * pcb->mss));
 800d9ae:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800d9b2:	b29a      	uxth	r2, r3
 800d9b4:	687b      	ldr	r3, [r7, #4]
 800d9b6:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800d9b8:	fb12 f303 	smulbb	r3, r2, r3
 800d9bc:	b29b      	uxth	r3, r3
 800d9be:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800d9c0:	4293      	cmp	r3, r2
 800d9c2:	bf28      	it	cs
 800d9c4:	4613      	movcs	r3, r2
 800d9c6:	857b      	strh	r3, [r7, #42]	; 0x2a
          TCP_WND_INC(pcb->cwnd, increase);
 800d9c8:	687b      	ldr	r3, [r7, #4]
 800d9ca:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800d9ce:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800d9d0:	4413      	add	r3, r2
 800d9d2:	b29a      	uxth	r2, r3
 800d9d4:	687b      	ldr	r3, [r7, #4]
 800d9d6:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800d9da:	429a      	cmp	r2, r3
 800d9dc:	d309      	bcc.n	800d9f2 <tcp_receive+0x2c6>
 800d9de:	687b      	ldr	r3, [r7, #4]
 800d9e0:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800d9e4:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800d9e6:	4413      	add	r3, r2
 800d9e8:	b29a      	uxth	r2, r3
 800d9ea:	687b      	ldr	r3, [r7, #4]
 800d9ec:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 800d9f0:	e04e      	b.n	800da90 <tcp_receive+0x364>
 800d9f2:	687b      	ldr	r3, [r7, #4]
 800d9f4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800d9f8:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 800d9fc:	e048      	b.n	800da90 <tcp_receive+0x364>
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_receive: slow start cwnd %"TCPWNDSIZE_F"\n", pcb->cwnd));
        } else {
          /* RFC 3465, section 2.1 Congestion Avoidance */
          TCP_WND_INC(pcb->bytes_acked, acked);
 800d9fe:	687b      	ldr	r3, [r7, #4]
 800da00:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 800da04:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800da06:	4413      	add	r3, r2
 800da08:	b29a      	uxth	r2, r3
 800da0a:	687b      	ldr	r3, [r7, #4]
 800da0c:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800da10:	429a      	cmp	r2, r3
 800da12:	d309      	bcc.n	800da28 <tcp_receive+0x2fc>
 800da14:	687b      	ldr	r3, [r7, #4]
 800da16:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 800da1a:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800da1c:	4413      	add	r3, r2
 800da1e:	b29a      	uxth	r2, r3
 800da20:	687b      	ldr	r3, [r7, #4]
 800da22:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800da26:	e004      	b.n	800da32 <tcp_receive+0x306>
 800da28:	687b      	ldr	r3, [r7, #4]
 800da2a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800da2e:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          if (pcb->bytes_acked >= pcb->cwnd) {
 800da32:	687b      	ldr	r3, [r7, #4]
 800da34:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 800da38:	687b      	ldr	r3, [r7, #4]
 800da3a:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800da3e:	429a      	cmp	r2, r3
 800da40:	d326      	bcc.n	800da90 <tcp_receive+0x364>
            pcb->bytes_acked = (tcpwnd_size_t)(pcb->bytes_acked - pcb->cwnd);
 800da42:	687b      	ldr	r3, [r7, #4]
 800da44:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 800da48:	687b      	ldr	r3, [r7, #4]
 800da4a:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800da4e:	1ad3      	subs	r3, r2, r3
 800da50:	b29a      	uxth	r2, r3
 800da52:	687b      	ldr	r3, [r7, #4]
 800da54:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
            TCP_WND_INC(pcb->cwnd, pcb->mss);
 800da58:	687b      	ldr	r3, [r7, #4]
 800da5a:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800da5e:	687b      	ldr	r3, [r7, #4]
 800da60:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800da62:	4413      	add	r3, r2
 800da64:	b29a      	uxth	r2, r3
 800da66:	687b      	ldr	r3, [r7, #4]
 800da68:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800da6c:	429a      	cmp	r2, r3
 800da6e:	d30a      	bcc.n	800da86 <tcp_receive+0x35a>
 800da70:	687b      	ldr	r3, [r7, #4]
 800da72:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800da76:	687b      	ldr	r3, [r7, #4]
 800da78:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800da7a:	4413      	add	r3, r2
 800da7c:	b29a      	uxth	r2, r3
 800da7e:	687b      	ldr	r3, [r7, #4]
 800da80:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 800da84:	e004      	b.n	800da90 <tcp_receive+0x364>
 800da86:	687b      	ldr	r3, [r7, #4]
 800da88:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800da8c:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
                                    pcb->unacked != NULL ?
                                    lwip_ntohl(pcb->unacked->tcphdr->seqno) + TCP_TCPLEN(pcb->unacked) : 0));

      /* Remove segment from the unacknowledged list if the incoming
         ACK acknowledges them. */
      pcb->unacked = tcp_free_acked_segments(pcb, pcb->unacked, "unacked", pcb->unsent);
 800da90:	687b      	ldr	r3, [r7, #4]
 800da92:	6f19      	ldr	r1, [r3, #112]	; 0x70
 800da94:	687b      	ldr	r3, [r7, #4]
 800da96:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800da98:	4a98      	ldr	r2, [pc, #608]	; (800dcfc <tcp_receive+0x5d0>)
 800da9a:	6878      	ldr	r0, [r7, #4]
 800da9c:	f7ff fdca 	bl	800d634 <tcp_free_acked_segments>
 800daa0:	4602      	mov	r2, r0
 800daa2:	687b      	ldr	r3, [r7, #4]
 800daa4:	671a      	str	r2, [r3, #112]	; 0x70
         on the list are acknowledged by the ACK. This may seem
         strange since an "unsent" segment shouldn't be acked. The
         rationale is that lwIP puts all outstanding segments on the
         ->unsent list after a retransmission, so these segments may
         in fact have been sent once. */
      pcb->unsent = tcp_free_acked_segments(pcb, pcb->unsent, "unsent", pcb->unacked);
 800daa6:	687b      	ldr	r3, [r7, #4]
 800daa8:	6ed9      	ldr	r1, [r3, #108]	; 0x6c
 800daaa:	687b      	ldr	r3, [r7, #4]
 800daac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800daae:	4a94      	ldr	r2, [pc, #592]	; (800dd00 <tcp_receive+0x5d4>)
 800dab0:	6878      	ldr	r0, [r7, #4]
 800dab2:	f7ff fdbf 	bl	800d634 <tcp_free_acked_segments>
 800dab6:	4602      	mov	r2, r0
 800dab8:	687b      	ldr	r3, [r7, #4]
 800daba:	66da      	str	r2, [r3, #108]	; 0x6c

      /* If there's nothing left to acknowledge, stop the retransmit
         timer, otherwise reset it to start again */
      if (pcb->unacked == NULL) {
 800dabc:	687b      	ldr	r3, [r7, #4]
 800dabe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800dac0:	2b00      	cmp	r3, #0
 800dac2:	d104      	bne.n	800dace <tcp_receive+0x3a2>
        pcb->rtime = -1;
 800dac4:	687b      	ldr	r3, [r7, #4]
 800dac6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800daca:	861a      	strh	r2, [r3, #48]	; 0x30
 800dacc:	e002      	b.n	800dad4 <tcp_receive+0x3a8>
      } else {
        pcb->rtime = 0;
 800dace:	687b      	ldr	r3, [r7, #4]
 800dad0:	2200      	movs	r2, #0
 800dad2:	861a      	strh	r2, [r3, #48]	; 0x30
      }

      pcb->polltmr = 0;
 800dad4:	687b      	ldr	r3, [r7, #4]
 800dad6:	2200      	movs	r2, #0
 800dad8:	771a      	strb	r2, [r3, #28]

#if TCP_OVERSIZE
      if (pcb->unsent == NULL) {
 800dada:	687b      	ldr	r3, [r7, #4]
 800dadc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800dade:	2b00      	cmp	r3, #0
 800dae0:	d103      	bne.n	800daea <tcp_receive+0x3be>
        pcb->unsent_oversize = 0;
 800dae2:	687b      	ldr	r3, [r7, #4]
 800dae4:	2200      	movs	r2, #0
 800dae6:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
        /* Inform neighbor reachability of forward progress. */
        nd6_reachability_hint(ip6_current_src_addr());
      }
#endif /* LWIP_IPV6 && LWIP_ND6_TCP_REACHABILITY_HINTS*/

      pcb->snd_buf = (tcpwnd_size_t)(pcb->snd_buf + recv_acked);
 800daea:	687b      	ldr	r3, [r7, #4]
 800daec:	f8b3 2064 	ldrh.w	r2, [r3, #100]	; 0x64
 800daf0:	4b84      	ldr	r3, [pc, #528]	; (800dd04 <tcp_receive+0x5d8>)
 800daf2:	881b      	ldrh	r3, [r3, #0]
 800daf4:	4413      	add	r3, r2
 800daf6:	b29a      	uxth	r2, r3
 800daf8:	687b      	ldr	r3, [r7, #4]
 800dafa:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
      /* check if this ACK ends our retransmission of in-flight data */
      if (pcb->flags & TF_RTO) {
 800dafe:	687b      	ldr	r3, [r7, #4]
 800db00:	8b5b      	ldrh	r3, [r3, #26]
 800db02:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800db06:	2b00      	cmp	r3, #0
 800db08:	d035      	beq.n	800db76 <tcp_receive+0x44a>
        /* RTO is done if
            1) both queues are empty or
            2) unacked is empty and unsent head contains data not part of RTO or
            3) unacked head contains data not part of RTO */
        if (pcb->unacked == NULL) {
 800db0a:	687b      	ldr	r3, [r7, #4]
 800db0c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800db0e:	2b00      	cmp	r3, #0
 800db10:	d118      	bne.n	800db44 <tcp_receive+0x418>
          if ((pcb->unsent == NULL) ||
 800db12:	687b      	ldr	r3, [r7, #4]
 800db14:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800db16:	2b00      	cmp	r3, #0
 800db18:	d00c      	beq.n	800db34 <tcp_receive+0x408>
              (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unsent->tcphdr->seqno)))) {
 800db1a:	687b      	ldr	r3, [r7, #4]
 800db1c:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 800db1e:	687b      	ldr	r3, [r7, #4]
 800db20:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800db22:	68db      	ldr	r3, [r3, #12]
 800db24:	685b      	ldr	r3, [r3, #4]
 800db26:	4618      	mov	r0, r3
 800db28:	f7fa ffbf 	bl	8008aaa <lwip_htonl>
 800db2c:	4603      	mov	r3, r0
 800db2e:	1ae3      	subs	r3, r4, r3
          if ((pcb->unsent == NULL) ||
 800db30:	2b00      	cmp	r3, #0
 800db32:	dc20      	bgt.n	800db76 <tcp_receive+0x44a>
            tcp_clear_flags(pcb, TF_RTO);
 800db34:	687b      	ldr	r3, [r7, #4]
 800db36:	8b5b      	ldrh	r3, [r3, #26]
 800db38:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800db3c:	b29a      	uxth	r2, r3
 800db3e:	687b      	ldr	r3, [r7, #4]
 800db40:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800db42:	e018      	b.n	800db76 <tcp_receive+0x44a>
          }
        } else if (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unacked->tcphdr->seqno))) {
 800db44:	687b      	ldr	r3, [r7, #4]
 800db46:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 800db48:	687b      	ldr	r3, [r7, #4]
 800db4a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800db4c:	68db      	ldr	r3, [r3, #12]
 800db4e:	685b      	ldr	r3, [r3, #4]
 800db50:	4618      	mov	r0, r3
 800db52:	f7fa ffaa 	bl	8008aaa <lwip_htonl>
 800db56:	4603      	mov	r3, r0
 800db58:	1ae3      	subs	r3, r4, r3
 800db5a:	2b00      	cmp	r3, #0
 800db5c:	dc0b      	bgt.n	800db76 <tcp_receive+0x44a>
          tcp_clear_flags(pcb, TF_RTO);
 800db5e:	687b      	ldr	r3, [r7, #4]
 800db60:	8b5b      	ldrh	r3, [r3, #26]
 800db62:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800db66:	b29a      	uxth	r2, r3
 800db68:	687b      	ldr	r3, [r7, #4]
 800db6a:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800db6c:	e003      	b.n	800db76 <tcp_receive+0x44a>
        }
      }
      /* End of ACK for new data processing. */
    } else {
      /* Out of sequence ACK, didn't really ack anything */
      tcp_send_empty_ack(pcb);
 800db6e:	6878      	ldr	r0, [r7, #4]
 800db70:	f001 ffb0 	bl	800fad4 <tcp_send_empty_ack>
 800db74:	e000      	b.n	800db78 <tcp_receive+0x44c>
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800db76:	bf00      	nop
                                pcb->rttest, pcb->rtseq, ackno));

    /* RTT estimation calculations. This is done by checking if the
       incoming segment acknowledges the segment we use to take a
       round-trip time measurement. */
    if (pcb->rttest && TCP_SEQ_LT(pcb->rtseq, ackno)) {
 800db78:	687b      	ldr	r3, [r7, #4]
 800db7a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800db7c:	2b00      	cmp	r3, #0
 800db7e:	d05b      	beq.n	800dc38 <tcp_receive+0x50c>
 800db80:	687b      	ldr	r3, [r7, #4]
 800db82:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800db84:	4b60      	ldr	r3, [pc, #384]	; (800dd08 <tcp_receive+0x5dc>)
 800db86:	681b      	ldr	r3, [r3, #0]
 800db88:	1ad3      	subs	r3, r2, r3
 800db8a:	2b00      	cmp	r3, #0
 800db8c:	da54      	bge.n	800dc38 <tcp_receive+0x50c>
      /* diff between this shouldn't exceed 32K since this are tcp timer ticks
         and a round-trip shouldn't be that long... */
      m = (s16_t)(tcp_ticks - pcb->rttest);
 800db8e:	4b5f      	ldr	r3, [pc, #380]	; (800dd0c <tcp_receive+0x5e0>)
 800db90:	681b      	ldr	r3, [r3, #0]
 800db92:	b29a      	uxth	r2, r3
 800db94:	687b      	ldr	r3, [r7, #4]
 800db96:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800db98:	b29b      	uxth	r3, r3
 800db9a:	1ad3      	subs	r3, r2, r3
 800db9c:	b29b      	uxth	r3, r3
 800db9e:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: experienced rtt %"U16_F" ticks (%"U16_F" msec).\n",
                                  m, (u16_t)(m * TCP_SLOW_INTERVAL)));

      /* This is taken directly from VJs original code in his paper */
      m = (s16_t)(m - (pcb->sa >> 3));
 800dba2:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 800dba6:	687b      	ldr	r3, [r7, #4]
 800dba8:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800dbac:	10db      	asrs	r3, r3, #3
 800dbae:	b21b      	sxth	r3, r3
 800dbb0:	b29b      	uxth	r3, r3
 800dbb2:	1ad3      	subs	r3, r2, r3
 800dbb4:	b29b      	uxth	r3, r3
 800dbb6:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      pcb->sa = (s16_t)(pcb->sa + m);
 800dbba:	687b      	ldr	r3, [r7, #4]
 800dbbc:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800dbc0:	b29a      	uxth	r2, r3
 800dbc2:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800dbc6:	4413      	add	r3, r2
 800dbc8:	b29b      	uxth	r3, r3
 800dbca:	b21a      	sxth	r2, r3
 800dbcc:	687b      	ldr	r3, [r7, #4]
 800dbce:	879a      	strh	r2, [r3, #60]	; 0x3c
      if (m < 0) {
 800dbd0:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 800dbd4:	2b00      	cmp	r3, #0
 800dbd6:	da05      	bge.n	800dbe4 <tcp_receive+0x4b8>
        m = (s16_t) - m;
 800dbd8:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800dbdc:	425b      	negs	r3, r3
 800dbde:	b29b      	uxth	r3, r3
 800dbe0:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      }
      m = (s16_t)(m - (pcb->sv >> 2));
 800dbe4:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 800dbe8:	687b      	ldr	r3, [r7, #4]
 800dbea:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800dbee:	109b      	asrs	r3, r3, #2
 800dbf0:	b21b      	sxth	r3, r3
 800dbf2:	b29b      	uxth	r3, r3
 800dbf4:	1ad3      	subs	r3, r2, r3
 800dbf6:	b29b      	uxth	r3, r3
 800dbf8:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      pcb->sv = (s16_t)(pcb->sv + m);
 800dbfc:	687b      	ldr	r3, [r7, #4]
 800dbfe:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800dc02:	b29a      	uxth	r2, r3
 800dc04:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800dc08:	4413      	add	r3, r2
 800dc0a:	b29b      	uxth	r3, r3
 800dc0c:	b21a      	sxth	r2, r3
 800dc0e:	687b      	ldr	r3, [r7, #4]
 800dc10:	87da      	strh	r2, [r3, #62]	; 0x3e
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 800dc12:	687b      	ldr	r3, [r7, #4]
 800dc14:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800dc18:	10db      	asrs	r3, r3, #3
 800dc1a:	b21b      	sxth	r3, r3
 800dc1c:	b29a      	uxth	r2, r3
 800dc1e:	687b      	ldr	r3, [r7, #4]
 800dc20:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800dc24:	b29b      	uxth	r3, r3
 800dc26:	4413      	add	r3, r2
 800dc28:	b29b      	uxth	r3, r3
 800dc2a:	b21a      	sxth	r2, r3
 800dc2c:	687b      	ldr	r3, [r7, #4]
 800dc2e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: RTO %"U16_F" (%"U16_F" milliseconds)\n",
                                  pcb->rto, (u16_t)(pcb->rto * TCP_SLOW_INTERVAL)));

      pcb->rttest = 0;
 800dc32:	687b      	ldr	r3, [r7, #4]
 800dc34:	2200      	movs	r2, #0
 800dc36:	635a      	str	r2, [r3, #52]	; 0x34

  /* If the incoming segment contains data, we must process it
     further unless the pcb already received a FIN.
     (RFC 793, chapter 3.9, "SEGMENT ARRIVES" in states CLOSE-WAIT, CLOSING,
     LAST-ACK and TIME-WAIT: "Ignore the segment text.") */
  if ((tcplen > 0) && (pcb->state < CLOSE_WAIT)) {
 800dc38:	4b35      	ldr	r3, [pc, #212]	; (800dd10 <tcp_receive+0x5e4>)
 800dc3a:	881b      	ldrh	r3, [r3, #0]
 800dc3c:	2b00      	cmp	r3, #0
 800dc3e:	f000 84e2 	beq.w	800e606 <tcp_receive+0xeda>
 800dc42:	687b      	ldr	r3, [r7, #4]
 800dc44:	7d1b      	ldrb	r3, [r3, #20]
 800dc46:	2b06      	cmp	r3, #6
 800dc48:	f200 84dd 	bhi.w	800e606 <tcp_receive+0xeda>
       this if the sequence number of the incoming segment is less
       than rcv_nxt, and the sequence number plus the length of the
       segment is larger than rcv_nxt. */
    /*    if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
          if (TCP_SEQ_LT(pcb->rcv_nxt, seqno + tcplen)) {*/
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 800dc4c:	687b      	ldr	r3, [r7, #4]
 800dc4e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800dc50:	4b30      	ldr	r3, [pc, #192]	; (800dd14 <tcp_receive+0x5e8>)
 800dc52:	681b      	ldr	r3, [r3, #0]
 800dc54:	1ad3      	subs	r3, r2, r3
 800dc56:	3b01      	subs	r3, #1
 800dc58:	2b00      	cmp	r3, #0
 800dc5a:	f2c0 808f 	blt.w	800dd7c <tcp_receive+0x650>
 800dc5e:	687b      	ldr	r3, [r7, #4]
 800dc60:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800dc62:	4b2b      	ldr	r3, [pc, #172]	; (800dd10 <tcp_receive+0x5e4>)
 800dc64:	881b      	ldrh	r3, [r3, #0]
 800dc66:	4619      	mov	r1, r3
 800dc68:	4b2a      	ldr	r3, [pc, #168]	; (800dd14 <tcp_receive+0x5e8>)
 800dc6a:	681b      	ldr	r3, [r3, #0]
 800dc6c:	440b      	add	r3, r1
 800dc6e:	1ad3      	subs	r3, r2, r3
 800dc70:	3301      	adds	r3, #1
 800dc72:	2b00      	cmp	r3, #0
 800dc74:	f300 8082 	bgt.w	800dd7c <tcp_receive+0x650>

         After we are done with adjusting the pbuf pointers we must
         adjust the ->data pointer in the seg and the segment
         length.*/

      struct pbuf *p = inseg.p;
 800dc78:	4b27      	ldr	r3, [pc, #156]	; (800dd18 <tcp_receive+0x5ec>)
 800dc7a:	685b      	ldr	r3, [r3, #4]
 800dc7c:	647b      	str	r3, [r7, #68]	; 0x44
      u32_t off32 = pcb->rcv_nxt - seqno;
 800dc7e:	687b      	ldr	r3, [r7, #4]
 800dc80:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800dc82:	4b24      	ldr	r3, [pc, #144]	; (800dd14 <tcp_receive+0x5e8>)
 800dc84:	681b      	ldr	r3, [r3, #0]
 800dc86:	1ad3      	subs	r3, r2, r3
 800dc88:	627b      	str	r3, [r7, #36]	; 0x24
      u16_t new_tot_len, off;
      LWIP_ASSERT("inseg.p != NULL", inseg.p);
 800dc8a:	4b23      	ldr	r3, [pc, #140]	; (800dd18 <tcp_receive+0x5ec>)
 800dc8c:	685b      	ldr	r3, [r3, #4]
 800dc8e:	2b00      	cmp	r3, #0
 800dc90:	d106      	bne.n	800dca0 <tcp_receive+0x574>
 800dc92:	4b22      	ldr	r3, [pc, #136]	; (800dd1c <tcp_receive+0x5f0>)
 800dc94:	f240 5294 	movw	r2, #1428	; 0x594
 800dc98:	4921      	ldr	r1, [pc, #132]	; (800dd20 <tcp_receive+0x5f4>)
 800dc9a:	4822      	ldr	r0, [pc, #136]	; (800dd24 <tcp_receive+0x5f8>)
 800dc9c:	f005 fe64 	bl	8013968 <iprintf>
      LWIP_ASSERT("insane offset!", (off32 < 0xffff));
 800dca0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dca2:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800dca6:	4293      	cmp	r3, r2
 800dca8:	d906      	bls.n	800dcb8 <tcp_receive+0x58c>
 800dcaa:	4b1c      	ldr	r3, [pc, #112]	; (800dd1c <tcp_receive+0x5f0>)
 800dcac:	f240 5295 	movw	r2, #1429	; 0x595
 800dcb0:	491d      	ldr	r1, [pc, #116]	; (800dd28 <tcp_receive+0x5fc>)
 800dcb2:	481c      	ldr	r0, [pc, #112]	; (800dd24 <tcp_receive+0x5f8>)
 800dcb4:	f005 fe58 	bl	8013968 <iprintf>
      off = (u16_t)off32;
 800dcb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dcba:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
      LWIP_ASSERT("pbuf too short!", (((s32_t)inseg.p->tot_len) >= off));
 800dcbe:	4b16      	ldr	r3, [pc, #88]	; (800dd18 <tcp_receive+0x5ec>)
 800dcc0:	685b      	ldr	r3, [r3, #4]
 800dcc2:	891b      	ldrh	r3, [r3, #8]
 800dcc4:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800dcc8:	429a      	cmp	r2, r3
 800dcca:	d906      	bls.n	800dcda <tcp_receive+0x5ae>
 800dccc:	4b13      	ldr	r3, [pc, #76]	; (800dd1c <tcp_receive+0x5f0>)
 800dcce:	f240 5297 	movw	r2, #1431	; 0x597
 800dcd2:	4916      	ldr	r1, [pc, #88]	; (800dd2c <tcp_receive+0x600>)
 800dcd4:	4813      	ldr	r0, [pc, #76]	; (800dd24 <tcp_receive+0x5f8>)
 800dcd6:	f005 fe47 	bl	8013968 <iprintf>
      inseg.len -= off;
 800dcda:	4b0f      	ldr	r3, [pc, #60]	; (800dd18 <tcp_receive+0x5ec>)
 800dcdc:	891a      	ldrh	r2, [r3, #8]
 800dcde:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800dce2:	1ad3      	subs	r3, r2, r3
 800dce4:	b29a      	uxth	r2, r3
 800dce6:	4b0c      	ldr	r3, [pc, #48]	; (800dd18 <tcp_receive+0x5ec>)
 800dce8:	811a      	strh	r2, [r3, #8]
      new_tot_len = (u16_t)(inseg.p->tot_len - off);
 800dcea:	4b0b      	ldr	r3, [pc, #44]	; (800dd18 <tcp_receive+0x5ec>)
 800dcec:	685b      	ldr	r3, [r3, #4]
 800dcee:	891a      	ldrh	r2, [r3, #8]
 800dcf0:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800dcf4:	1ad3      	subs	r3, r2, r3
 800dcf6:	847b      	strh	r3, [r7, #34]	; 0x22
      while (p->len < off) {
 800dcf8:	e02a      	b.n	800dd50 <tcp_receive+0x624>
 800dcfa:	bf00      	nop
 800dcfc:	08015f10 	.word	0x08015f10
 800dd00:	08015f18 	.word	0x08015f18
 800dd04:	2000c788 	.word	0x2000c788
 800dd08:	2000c784 	.word	0x2000c784
 800dd0c:	2000c748 	.word	0x2000c748
 800dd10:	2000c78a 	.word	0x2000c78a
 800dd14:	2000c780 	.word	0x2000c780
 800dd18:	2000c760 	.word	0x2000c760
 800dd1c:	08015ba8 	.word	0x08015ba8
 800dd20:	08015f20 	.word	0x08015f20
 800dd24:	08015bf4 	.word	0x08015bf4
 800dd28:	08015f30 	.word	0x08015f30
 800dd2c:	08015f40 	.word	0x08015f40
        off -= p->len;
 800dd30:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800dd32:	895b      	ldrh	r3, [r3, #10]
 800dd34:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800dd38:	1ad3      	subs	r3, r2, r3
 800dd3a:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
        /* all pbufs up to and including this one have len==0, so tot_len is equal */
        p->tot_len = new_tot_len;
 800dd3e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800dd40:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 800dd42:	811a      	strh	r2, [r3, #8]
        p->len = 0;
 800dd44:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800dd46:	2200      	movs	r2, #0
 800dd48:	815a      	strh	r2, [r3, #10]
        p = p->next;
 800dd4a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800dd4c:	681b      	ldr	r3, [r3, #0]
 800dd4e:	647b      	str	r3, [r7, #68]	; 0x44
      while (p->len < off) {
 800dd50:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800dd52:	895b      	ldrh	r3, [r3, #10]
 800dd54:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800dd58:	429a      	cmp	r2, r3
 800dd5a:	d8e9      	bhi.n	800dd30 <tcp_receive+0x604>
      }
      /* cannot fail... */
      pbuf_remove_header(p, off);
 800dd5c:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800dd60:	4619      	mov	r1, r3
 800dd62:	6c78      	ldr	r0, [r7, #68]	; 0x44
 800dd64:	f7fc fac8 	bl	800a2f8 <pbuf_remove_header>
      inseg.tcphdr->seqno = seqno = pcb->rcv_nxt;
 800dd68:	687b      	ldr	r3, [r7, #4]
 800dd6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dd6c:	4a91      	ldr	r2, [pc, #580]	; (800dfb4 <tcp_receive+0x888>)
 800dd6e:	6013      	str	r3, [r2, #0]
 800dd70:	4b91      	ldr	r3, [pc, #580]	; (800dfb8 <tcp_receive+0x88c>)
 800dd72:	68db      	ldr	r3, [r3, #12]
 800dd74:	4a8f      	ldr	r2, [pc, #572]	; (800dfb4 <tcp_receive+0x888>)
 800dd76:	6812      	ldr	r2, [r2, #0]
 800dd78:	605a      	str	r2, [r3, #4]
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 800dd7a:	e00d      	b.n	800dd98 <tcp_receive+0x66c>
    } else {
      if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
 800dd7c:	4b8d      	ldr	r3, [pc, #564]	; (800dfb4 <tcp_receive+0x888>)
 800dd7e:	681a      	ldr	r2, [r3, #0]
 800dd80:	687b      	ldr	r3, [r7, #4]
 800dd82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dd84:	1ad3      	subs	r3, r2, r3
 800dd86:	2b00      	cmp	r3, #0
 800dd88:	da06      	bge.n	800dd98 <tcp_receive+0x66c>
        /* the whole segment is < rcv_nxt */
        /* must be a duplicate of a packet that has already been correctly handled */

        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: duplicate seqno %"U32_F"\n", seqno));
        tcp_ack_now(pcb);
 800dd8a:	687b      	ldr	r3, [r7, #4]
 800dd8c:	8b5b      	ldrh	r3, [r3, #26]
 800dd8e:	f043 0302 	orr.w	r3, r3, #2
 800dd92:	b29a      	uxth	r2, r3
 800dd94:	687b      	ldr	r3, [r7, #4]
 800dd96:	835a      	strh	r2, [r3, #26]
    }

    /* The sequence number must be within the window (above rcv_nxt
       and below rcv_nxt + rcv_wnd) in order to be further
       processed. */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 800dd98:	4b86      	ldr	r3, [pc, #536]	; (800dfb4 <tcp_receive+0x888>)
 800dd9a:	681a      	ldr	r2, [r3, #0]
 800dd9c:	687b      	ldr	r3, [r7, #4]
 800dd9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dda0:	1ad3      	subs	r3, r2, r3
 800dda2:	2b00      	cmp	r3, #0
 800dda4:	f2c0 842a 	blt.w	800e5fc <tcp_receive+0xed0>
 800dda8:	4b82      	ldr	r3, [pc, #520]	; (800dfb4 <tcp_receive+0x888>)
 800ddaa:	681a      	ldr	r2, [r3, #0]
 800ddac:	687b      	ldr	r3, [r7, #4]
 800ddae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ddb0:	6879      	ldr	r1, [r7, #4]
 800ddb2:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800ddb4:	440b      	add	r3, r1
 800ddb6:	1ad3      	subs	r3, r2, r3
 800ddb8:	3301      	adds	r3, #1
 800ddba:	2b00      	cmp	r3, #0
 800ddbc:	f300 841e 	bgt.w	800e5fc <tcp_receive+0xed0>
                        pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
      if (pcb->rcv_nxt == seqno) {
 800ddc0:	687b      	ldr	r3, [r7, #4]
 800ddc2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800ddc4:	4b7b      	ldr	r3, [pc, #492]	; (800dfb4 <tcp_receive+0x888>)
 800ddc6:	681b      	ldr	r3, [r3, #0]
 800ddc8:	429a      	cmp	r2, r3
 800ddca:	f040 829a 	bne.w	800e302 <tcp_receive+0xbd6>
        /* The incoming segment is the next in sequence. We check if
           we have to trim the end of the segment and update rcv_nxt
           and pass the data to the application. */
        tcplen = TCP_TCPLEN(&inseg);
 800ddce:	4b7a      	ldr	r3, [pc, #488]	; (800dfb8 <tcp_receive+0x88c>)
 800ddd0:	891c      	ldrh	r4, [r3, #8]
 800ddd2:	4b79      	ldr	r3, [pc, #484]	; (800dfb8 <tcp_receive+0x88c>)
 800ddd4:	68db      	ldr	r3, [r3, #12]
 800ddd6:	899b      	ldrh	r3, [r3, #12]
 800ddd8:	b29b      	uxth	r3, r3
 800ddda:	4618      	mov	r0, r3
 800dddc:	f7fa fe50 	bl	8008a80 <lwip_htons>
 800dde0:	4603      	mov	r3, r0
 800dde2:	b2db      	uxtb	r3, r3
 800dde4:	f003 0303 	and.w	r3, r3, #3
 800dde8:	2b00      	cmp	r3, #0
 800ddea:	d001      	beq.n	800ddf0 <tcp_receive+0x6c4>
 800ddec:	2301      	movs	r3, #1
 800ddee:	e000      	b.n	800ddf2 <tcp_receive+0x6c6>
 800ddf0:	2300      	movs	r3, #0
 800ddf2:	4423      	add	r3, r4
 800ddf4:	b29a      	uxth	r2, r3
 800ddf6:	4b71      	ldr	r3, [pc, #452]	; (800dfbc <tcp_receive+0x890>)
 800ddf8:	801a      	strh	r2, [r3, #0]

        if (tcplen > pcb->rcv_wnd) {
 800ddfa:	687b      	ldr	r3, [r7, #4]
 800ddfc:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800ddfe:	4b6f      	ldr	r3, [pc, #444]	; (800dfbc <tcp_receive+0x890>)
 800de00:	881b      	ldrh	r3, [r3, #0]
 800de02:	429a      	cmp	r2, r3
 800de04:	d275      	bcs.n	800def2 <tcp_receive+0x7c6>
          LWIP_DEBUGF(TCP_INPUT_DEBUG,
                      ("tcp_receive: other end overran receive window"
                       "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                       seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 800de06:	4b6c      	ldr	r3, [pc, #432]	; (800dfb8 <tcp_receive+0x88c>)
 800de08:	68db      	ldr	r3, [r3, #12]
 800de0a:	899b      	ldrh	r3, [r3, #12]
 800de0c:	b29b      	uxth	r3, r3
 800de0e:	4618      	mov	r0, r3
 800de10:	f7fa fe36 	bl	8008a80 <lwip_htons>
 800de14:	4603      	mov	r3, r0
 800de16:	b2db      	uxtb	r3, r3
 800de18:	f003 0301 	and.w	r3, r3, #1
 800de1c:	2b00      	cmp	r3, #0
 800de1e:	d01f      	beq.n	800de60 <tcp_receive+0x734>
            /* Must remove the FIN from the header as we're trimming
             * that byte of sequence-space from the packet */
            TCPH_FLAGS_SET(inseg.tcphdr, TCPH_FLAGS(inseg.tcphdr) & ~(unsigned int)TCP_FIN);
 800de20:	4b65      	ldr	r3, [pc, #404]	; (800dfb8 <tcp_receive+0x88c>)
 800de22:	68db      	ldr	r3, [r3, #12]
 800de24:	899b      	ldrh	r3, [r3, #12]
 800de26:	b29b      	uxth	r3, r3
 800de28:	b21b      	sxth	r3, r3
 800de2a:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800de2e:	b21c      	sxth	r4, r3
 800de30:	4b61      	ldr	r3, [pc, #388]	; (800dfb8 <tcp_receive+0x88c>)
 800de32:	68db      	ldr	r3, [r3, #12]
 800de34:	899b      	ldrh	r3, [r3, #12]
 800de36:	b29b      	uxth	r3, r3
 800de38:	4618      	mov	r0, r3
 800de3a:	f7fa fe21 	bl	8008a80 <lwip_htons>
 800de3e:	4603      	mov	r3, r0
 800de40:	b2db      	uxtb	r3, r3
 800de42:	b29b      	uxth	r3, r3
 800de44:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 800de48:	b29b      	uxth	r3, r3
 800de4a:	4618      	mov	r0, r3
 800de4c:	f7fa fe18 	bl	8008a80 <lwip_htons>
 800de50:	4603      	mov	r3, r0
 800de52:	b21b      	sxth	r3, r3
 800de54:	4323      	orrs	r3, r4
 800de56:	b21a      	sxth	r2, r3
 800de58:	4b57      	ldr	r3, [pc, #348]	; (800dfb8 <tcp_receive+0x88c>)
 800de5a:	68db      	ldr	r3, [r3, #12]
 800de5c:	b292      	uxth	r2, r2
 800de5e:	819a      	strh	r2, [r3, #12]
          }
          /* Adjust length of segment to fit in the window. */
          TCPWND_CHECK16(pcb->rcv_wnd);
          inseg.len = (u16_t)pcb->rcv_wnd;
 800de60:	687b      	ldr	r3, [r7, #4]
 800de62:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800de64:	4b54      	ldr	r3, [pc, #336]	; (800dfb8 <tcp_receive+0x88c>)
 800de66:	811a      	strh	r2, [r3, #8]
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 800de68:	4b53      	ldr	r3, [pc, #332]	; (800dfb8 <tcp_receive+0x88c>)
 800de6a:	68db      	ldr	r3, [r3, #12]
 800de6c:	899b      	ldrh	r3, [r3, #12]
 800de6e:	b29b      	uxth	r3, r3
 800de70:	4618      	mov	r0, r3
 800de72:	f7fa fe05 	bl	8008a80 <lwip_htons>
 800de76:	4603      	mov	r3, r0
 800de78:	b2db      	uxtb	r3, r3
 800de7a:	f003 0302 	and.w	r3, r3, #2
 800de7e:	2b00      	cmp	r3, #0
 800de80:	d005      	beq.n	800de8e <tcp_receive+0x762>
            inseg.len -= 1;
 800de82:	4b4d      	ldr	r3, [pc, #308]	; (800dfb8 <tcp_receive+0x88c>)
 800de84:	891b      	ldrh	r3, [r3, #8]
 800de86:	3b01      	subs	r3, #1
 800de88:	b29a      	uxth	r2, r3
 800de8a:	4b4b      	ldr	r3, [pc, #300]	; (800dfb8 <tcp_receive+0x88c>)
 800de8c:	811a      	strh	r2, [r3, #8]
          }
          pbuf_realloc(inseg.p, inseg.len);
 800de8e:	4b4a      	ldr	r3, [pc, #296]	; (800dfb8 <tcp_receive+0x88c>)
 800de90:	685b      	ldr	r3, [r3, #4]
 800de92:	4a49      	ldr	r2, [pc, #292]	; (800dfb8 <tcp_receive+0x88c>)
 800de94:	8912      	ldrh	r2, [r2, #8]
 800de96:	4611      	mov	r1, r2
 800de98:	4618      	mov	r0, r3
 800de9a:	f7fc f92d 	bl	800a0f8 <pbuf_realloc>
          tcplen = TCP_TCPLEN(&inseg);
 800de9e:	4b46      	ldr	r3, [pc, #280]	; (800dfb8 <tcp_receive+0x88c>)
 800dea0:	891c      	ldrh	r4, [r3, #8]
 800dea2:	4b45      	ldr	r3, [pc, #276]	; (800dfb8 <tcp_receive+0x88c>)
 800dea4:	68db      	ldr	r3, [r3, #12]
 800dea6:	899b      	ldrh	r3, [r3, #12]
 800dea8:	b29b      	uxth	r3, r3
 800deaa:	4618      	mov	r0, r3
 800deac:	f7fa fde8 	bl	8008a80 <lwip_htons>
 800deb0:	4603      	mov	r3, r0
 800deb2:	b2db      	uxtb	r3, r3
 800deb4:	f003 0303 	and.w	r3, r3, #3
 800deb8:	2b00      	cmp	r3, #0
 800deba:	d001      	beq.n	800dec0 <tcp_receive+0x794>
 800debc:	2301      	movs	r3, #1
 800debe:	e000      	b.n	800dec2 <tcp_receive+0x796>
 800dec0:	2300      	movs	r3, #0
 800dec2:	4423      	add	r3, r4
 800dec4:	b29a      	uxth	r2, r3
 800dec6:	4b3d      	ldr	r3, [pc, #244]	; (800dfbc <tcp_receive+0x890>)
 800dec8:	801a      	strh	r2, [r3, #0]
          LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 800deca:	4b3c      	ldr	r3, [pc, #240]	; (800dfbc <tcp_receive+0x890>)
 800decc:	881b      	ldrh	r3, [r3, #0]
 800dece:	461a      	mov	r2, r3
 800ded0:	4b38      	ldr	r3, [pc, #224]	; (800dfb4 <tcp_receive+0x888>)
 800ded2:	681b      	ldr	r3, [r3, #0]
 800ded4:	441a      	add	r2, r3
 800ded6:	687b      	ldr	r3, [r7, #4]
 800ded8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800deda:	6879      	ldr	r1, [r7, #4]
 800dedc:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800dede:	440b      	add	r3, r1
 800dee0:	429a      	cmp	r2, r3
 800dee2:	d006      	beq.n	800def2 <tcp_receive+0x7c6>
 800dee4:	4b36      	ldr	r3, [pc, #216]	; (800dfc0 <tcp_receive+0x894>)
 800dee6:	f240 52cb 	movw	r2, #1483	; 0x5cb
 800deea:	4936      	ldr	r1, [pc, #216]	; (800dfc4 <tcp_receive+0x898>)
 800deec:	4836      	ldr	r0, [pc, #216]	; (800dfc8 <tcp_receive+0x89c>)
 800deee:	f005 fd3b 	bl	8013968 <iprintf>
        }
#if TCP_QUEUE_OOSEQ
        /* Received in-sequence data, adjust ooseq data if:
           - FIN has been received or
           - inseq overlaps with ooseq */
        if (pcb->ooseq != NULL) {
 800def2:	687b      	ldr	r3, [r7, #4]
 800def4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800def6:	2b00      	cmp	r3, #0
 800def8:	f000 80e7 	beq.w	800e0ca <tcp_receive+0x99e>
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 800defc:	4b2e      	ldr	r3, [pc, #184]	; (800dfb8 <tcp_receive+0x88c>)
 800defe:	68db      	ldr	r3, [r3, #12]
 800df00:	899b      	ldrh	r3, [r3, #12]
 800df02:	b29b      	uxth	r3, r3
 800df04:	4618      	mov	r0, r3
 800df06:	f7fa fdbb 	bl	8008a80 <lwip_htons>
 800df0a:	4603      	mov	r3, r0
 800df0c:	b2db      	uxtb	r3, r3
 800df0e:	f003 0301 	and.w	r3, r3, #1
 800df12:	2b00      	cmp	r3, #0
 800df14:	d010      	beq.n	800df38 <tcp_receive+0x80c>
            LWIP_DEBUGF(TCP_INPUT_DEBUG,
                        ("tcp_receive: received in-order FIN, binning ooseq queue\n"));
            /* Received in-order FIN means anything that was received
             * out of order must now have been received in-order, so
             * bin the ooseq queue */
            while (pcb->ooseq != NULL) {
 800df16:	e00a      	b.n	800df2e <tcp_receive+0x802>
              struct tcp_seg *old_ooseq = pcb->ooseq;
 800df18:	687b      	ldr	r3, [r7, #4]
 800df1a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800df1c:	60fb      	str	r3, [r7, #12]
              pcb->ooseq = pcb->ooseq->next;
 800df1e:	687b      	ldr	r3, [r7, #4]
 800df20:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800df22:	681a      	ldr	r2, [r3, #0]
 800df24:	687b      	ldr	r3, [r7, #4]
 800df26:	675a      	str	r2, [r3, #116]	; 0x74
              tcp_seg_free(old_ooseq);
 800df28:	68f8      	ldr	r0, [r7, #12]
 800df2a:	f7fd fd02 	bl	800b932 <tcp_seg_free>
            while (pcb->ooseq != NULL) {
 800df2e:	687b      	ldr	r3, [r7, #4]
 800df30:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800df32:	2b00      	cmp	r3, #0
 800df34:	d1f0      	bne.n	800df18 <tcp_receive+0x7ec>
 800df36:	e0c8      	b.n	800e0ca <tcp_receive+0x99e>
            }
          } else {
            struct tcp_seg *next = pcb->ooseq;
 800df38:	687b      	ldr	r3, [r7, #4]
 800df3a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800df3c:	63fb      	str	r3, [r7, #60]	; 0x3c
            /* Remove all segments on ooseq that are covered by inseg already.
             * FIN is copied from ooseq to inseg if present. */
            while (next &&
 800df3e:	e052      	b.n	800dfe6 <tcp_receive+0x8ba>
                   TCP_SEQ_GEQ(seqno + tcplen,
                               next->tcphdr->seqno + next->len)) {
              struct tcp_seg *tmp;
              /* inseg cannot have FIN here (already processed above) */
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 800df40:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800df42:	68db      	ldr	r3, [r3, #12]
 800df44:	899b      	ldrh	r3, [r3, #12]
 800df46:	b29b      	uxth	r3, r3
 800df48:	4618      	mov	r0, r3
 800df4a:	f7fa fd99 	bl	8008a80 <lwip_htons>
 800df4e:	4603      	mov	r3, r0
 800df50:	b2db      	uxtb	r3, r3
 800df52:	f003 0301 	and.w	r3, r3, #1
 800df56:	2b00      	cmp	r3, #0
 800df58:	d03d      	beq.n	800dfd6 <tcp_receive+0x8aa>
                  (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) == 0) {
 800df5a:	4b17      	ldr	r3, [pc, #92]	; (800dfb8 <tcp_receive+0x88c>)
 800df5c:	68db      	ldr	r3, [r3, #12]
 800df5e:	899b      	ldrh	r3, [r3, #12]
 800df60:	b29b      	uxth	r3, r3
 800df62:	4618      	mov	r0, r3
 800df64:	f7fa fd8c 	bl	8008a80 <lwip_htons>
 800df68:	4603      	mov	r3, r0
 800df6a:	b2db      	uxtb	r3, r3
 800df6c:	f003 0302 	and.w	r3, r3, #2
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 800df70:	2b00      	cmp	r3, #0
 800df72:	d130      	bne.n	800dfd6 <tcp_receive+0x8aa>
                TCPH_SET_FLAG(inseg.tcphdr, TCP_FIN);
 800df74:	4b10      	ldr	r3, [pc, #64]	; (800dfb8 <tcp_receive+0x88c>)
 800df76:	68db      	ldr	r3, [r3, #12]
 800df78:	899b      	ldrh	r3, [r3, #12]
 800df7a:	b29c      	uxth	r4, r3
 800df7c:	2001      	movs	r0, #1
 800df7e:	f7fa fd7f 	bl	8008a80 <lwip_htons>
 800df82:	4603      	mov	r3, r0
 800df84:	461a      	mov	r2, r3
 800df86:	4b0c      	ldr	r3, [pc, #48]	; (800dfb8 <tcp_receive+0x88c>)
 800df88:	68db      	ldr	r3, [r3, #12]
 800df8a:	4322      	orrs	r2, r4
 800df8c:	b292      	uxth	r2, r2
 800df8e:	819a      	strh	r2, [r3, #12]
                tcplen = TCP_TCPLEN(&inseg);
 800df90:	4b09      	ldr	r3, [pc, #36]	; (800dfb8 <tcp_receive+0x88c>)
 800df92:	891c      	ldrh	r4, [r3, #8]
 800df94:	4b08      	ldr	r3, [pc, #32]	; (800dfb8 <tcp_receive+0x88c>)
 800df96:	68db      	ldr	r3, [r3, #12]
 800df98:	899b      	ldrh	r3, [r3, #12]
 800df9a:	b29b      	uxth	r3, r3
 800df9c:	4618      	mov	r0, r3
 800df9e:	f7fa fd6f 	bl	8008a80 <lwip_htons>
 800dfa2:	4603      	mov	r3, r0
 800dfa4:	b2db      	uxtb	r3, r3
 800dfa6:	f003 0303 	and.w	r3, r3, #3
 800dfaa:	2b00      	cmp	r3, #0
 800dfac:	d00e      	beq.n	800dfcc <tcp_receive+0x8a0>
 800dfae:	2301      	movs	r3, #1
 800dfb0:	e00d      	b.n	800dfce <tcp_receive+0x8a2>
 800dfb2:	bf00      	nop
 800dfb4:	2000c780 	.word	0x2000c780
 800dfb8:	2000c760 	.word	0x2000c760
 800dfbc:	2000c78a 	.word	0x2000c78a
 800dfc0:	08015ba8 	.word	0x08015ba8
 800dfc4:	08015f50 	.word	0x08015f50
 800dfc8:	08015bf4 	.word	0x08015bf4
 800dfcc:	2300      	movs	r3, #0
 800dfce:	4423      	add	r3, r4
 800dfd0:	b29a      	uxth	r2, r3
 800dfd2:	4b98      	ldr	r3, [pc, #608]	; (800e234 <tcp_receive+0xb08>)
 800dfd4:	801a      	strh	r2, [r3, #0]
              }
              tmp = next;
 800dfd6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800dfd8:	613b      	str	r3, [r7, #16]
              next = next->next;
 800dfda:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800dfdc:	681b      	ldr	r3, [r3, #0]
 800dfde:	63fb      	str	r3, [r7, #60]	; 0x3c
              tcp_seg_free(tmp);
 800dfe0:	6938      	ldr	r0, [r7, #16]
 800dfe2:	f7fd fca6 	bl	800b932 <tcp_seg_free>
            while (next &&
 800dfe6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800dfe8:	2b00      	cmp	r3, #0
 800dfea:	d00e      	beq.n	800e00a <tcp_receive+0x8de>
                   TCP_SEQ_GEQ(seqno + tcplen,
 800dfec:	4b91      	ldr	r3, [pc, #580]	; (800e234 <tcp_receive+0xb08>)
 800dfee:	881b      	ldrh	r3, [r3, #0]
 800dff0:	461a      	mov	r2, r3
 800dff2:	4b91      	ldr	r3, [pc, #580]	; (800e238 <tcp_receive+0xb0c>)
 800dff4:	681b      	ldr	r3, [r3, #0]
 800dff6:	441a      	add	r2, r3
 800dff8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800dffa:	68db      	ldr	r3, [r3, #12]
 800dffc:	685b      	ldr	r3, [r3, #4]
 800dffe:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800e000:	8909      	ldrh	r1, [r1, #8]
 800e002:	440b      	add	r3, r1
 800e004:	1ad3      	subs	r3, r2, r3
            while (next &&
 800e006:	2b00      	cmp	r3, #0
 800e008:	da9a      	bge.n	800df40 <tcp_receive+0x814>
            }
            /* Now trim right side of inseg if it overlaps with the first
             * segment on ooseq */
            if (next &&
 800e00a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e00c:	2b00      	cmp	r3, #0
 800e00e:	d059      	beq.n	800e0c4 <tcp_receive+0x998>
                TCP_SEQ_GT(seqno + tcplen,
 800e010:	4b88      	ldr	r3, [pc, #544]	; (800e234 <tcp_receive+0xb08>)
 800e012:	881b      	ldrh	r3, [r3, #0]
 800e014:	461a      	mov	r2, r3
 800e016:	4b88      	ldr	r3, [pc, #544]	; (800e238 <tcp_receive+0xb0c>)
 800e018:	681b      	ldr	r3, [r3, #0]
 800e01a:	441a      	add	r2, r3
 800e01c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e01e:	68db      	ldr	r3, [r3, #12]
 800e020:	685b      	ldr	r3, [r3, #4]
 800e022:	1ad3      	subs	r3, r2, r3
            if (next &&
 800e024:	2b00      	cmp	r3, #0
 800e026:	dd4d      	ble.n	800e0c4 <tcp_receive+0x998>
                           next->tcphdr->seqno)) {
              /* inseg cannot have FIN here (already processed above) */
              inseg.len = (u16_t)(next->tcphdr->seqno - seqno);
 800e028:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e02a:	68db      	ldr	r3, [r3, #12]
 800e02c:	685b      	ldr	r3, [r3, #4]
 800e02e:	b29a      	uxth	r2, r3
 800e030:	4b81      	ldr	r3, [pc, #516]	; (800e238 <tcp_receive+0xb0c>)
 800e032:	681b      	ldr	r3, [r3, #0]
 800e034:	b29b      	uxth	r3, r3
 800e036:	1ad3      	subs	r3, r2, r3
 800e038:	b29a      	uxth	r2, r3
 800e03a:	4b80      	ldr	r3, [pc, #512]	; (800e23c <tcp_receive+0xb10>)
 800e03c:	811a      	strh	r2, [r3, #8]
              if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 800e03e:	4b7f      	ldr	r3, [pc, #508]	; (800e23c <tcp_receive+0xb10>)
 800e040:	68db      	ldr	r3, [r3, #12]
 800e042:	899b      	ldrh	r3, [r3, #12]
 800e044:	b29b      	uxth	r3, r3
 800e046:	4618      	mov	r0, r3
 800e048:	f7fa fd1a 	bl	8008a80 <lwip_htons>
 800e04c:	4603      	mov	r3, r0
 800e04e:	b2db      	uxtb	r3, r3
 800e050:	f003 0302 	and.w	r3, r3, #2
 800e054:	2b00      	cmp	r3, #0
 800e056:	d005      	beq.n	800e064 <tcp_receive+0x938>
                inseg.len -= 1;
 800e058:	4b78      	ldr	r3, [pc, #480]	; (800e23c <tcp_receive+0xb10>)
 800e05a:	891b      	ldrh	r3, [r3, #8]
 800e05c:	3b01      	subs	r3, #1
 800e05e:	b29a      	uxth	r2, r3
 800e060:	4b76      	ldr	r3, [pc, #472]	; (800e23c <tcp_receive+0xb10>)
 800e062:	811a      	strh	r2, [r3, #8]
              }
              pbuf_realloc(inseg.p, inseg.len);
 800e064:	4b75      	ldr	r3, [pc, #468]	; (800e23c <tcp_receive+0xb10>)
 800e066:	685b      	ldr	r3, [r3, #4]
 800e068:	4a74      	ldr	r2, [pc, #464]	; (800e23c <tcp_receive+0xb10>)
 800e06a:	8912      	ldrh	r2, [r2, #8]
 800e06c:	4611      	mov	r1, r2
 800e06e:	4618      	mov	r0, r3
 800e070:	f7fc f842 	bl	800a0f8 <pbuf_realloc>
              tcplen = TCP_TCPLEN(&inseg);
 800e074:	4b71      	ldr	r3, [pc, #452]	; (800e23c <tcp_receive+0xb10>)
 800e076:	891c      	ldrh	r4, [r3, #8]
 800e078:	4b70      	ldr	r3, [pc, #448]	; (800e23c <tcp_receive+0xb10>)
 800e07a:	68db      	ldr	r3, [r3, #12]
 800e07c:	899b      	ldrh	r3, [r3, #12]
 800e07e:	b29b      	uxth	r3, r3
 800e080:	4618      	mov	r0, r3
 800e082:	f7fa fcfd 	bl	8008a80 <lwip_htons>
 800e086:	4603      	mov	r3, r0
 800e088:	b2db      	uxtb	r3, r3
 800e08a:	f003 0303 	and.w	r3, r3, #3
 800e08e:	2b00      	cmp	r3, #0
 800e090:	d001      	beq.n	800e096 <tcp_receive+0x96a>
 800e092:	2301      	movs	r3, #1
 800e094:	e000      	b.n	800e098 <tcp_receive+0x96c>
 800e096:	2300      	movs	r3, #0
 800e098:	4423      	add	r3, r4
 800e09a:	b29a      	uxth	r2, r3
 800e09c:	4b65      	ldr	r3, [pc, #404]	; (800e234 <tcp_receive+0xb08>)
 800e09e:	801a      	strh	r2, [r3, #0]
              LWIP_ASSERT("tcp_receive: segment not trimmed correctly to ooseq queue\n",
 800e0a0:	4b64      	ldr	r3, [pc, #400]	; (800e234 <tcp_receive+0xb08>)
 800e0a2:	881b      	ldrh	r3, [r3, #0]
 800e0a4:	461a      	mov	r2, r3
 800e0a6:	4b64      	ldr	r3, [pc, #400]	; (800e238 <tcp_receive+0xb0c>)
 800e0a8:	681b      	ldr	r3, [r3, #0]
 800e0aa:	441a      	add	r2, r3
 800e0ac:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e0ae:	68db      	ldr	r3, [r3, #12]
 800e0b0:	685b      	ldr	r3, [r3, #4]
 800e0b2:	429a      	cmp	r2, r3
 800e0b4:	d006      	beq.n	800e0c4 <tcp_receive+0x998>
 800e0b6:	4b62      	ldr	r3, [pc, #392]	; (800e240 <tcp_receive+0xb14>)
 800e0b8:	f240 52fc 	movw	r2, #1532	; 0x5fc
 800e0bc:	4961      	ldr	r1, [pc, #388]	; (800e244 <tcp_receive+0xb18>)
 800e0be:	4862      	ldr	r0, [pc, #392]	; (800e248 <tcp_receive+0xb1c>)
 800e0c0:	f005 fc52 	bl	8013968 <iprintf>
                          (seqno + tcplen) == next->tcphdr->seqno);
            }
            pcb->ooseq = next;
 800e0c4:	687b      	ldr	r3, [r7, #4]
 800e0c6:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800e0c8:	675a      	str	r2, [r3, #116]	; 0x74
          }
        }
#endif /* TCP_QUEUE_OOSEQ */

        pcb->rcv_nxt = seqno + tcplen;
 800e0ca:	4b5a      	ldr	r3, [pc, #360]	; (800e234 <tcp_receive+0xb08>)
 800e0cc:	881b      	ldrh	r3, [r3, #0]
 800e0ce:	461a      	mov	r2, r3
 800e0d0:	4b59      	ldr	r3, [pc, #356]	; (800e238 <tcp_receive+0xb0c>)
 800e0d2:	681b      	ldr	r3, [r3, #0]
 800e0d4:	441a      	add	r2, r3
 800e0d6:	687b      	ldr	r3, [r7, #4]
 800e0d8:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update the receiver's (our) window. */
        LWIP_ASSERT("tcp_receive: tcplen > rcv_wnd\n", pcb->rcv_wnd >= tcplen);
 800e0da:	687b      	ldr	r3, [r7, #4]
 800e0dc:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800e0de:	4b55      	ldr	r3, [pc, #340]	; (800e234 <tcp_receive+0xb08>)
 800e0e0:	881b      	ldrh	r3, [r3, #0]
 800e0e2:	429a      	cmp	r2, r3
 800e0e4:	d206      	bcs.n	800e0f4 <tcp_receive+0x9c8>
 800e0e6:	4b56      	ldr	r3, [pc, #344]	; (800e240 <tcp_receive+0xb14>)
 800e0e8:	f240 6207 	movw	r2, #1543	; 0x607
 800e0ec:	4957      	ldr	r1, [pc, #348]	; (800e24c <tcp_receive+0xb20>)
 800e0ee:	4856      	ldr	r0, [pc, #344]	; (800e248 <tcp_receive+0xb1c>)
 800e0f0:	f005 fc3a 	bl	8013968 <iprintf>
        pcb->rcv_wnd -= tcplen;
 800e0f4:	687b      	ldr	r3, [r7, #4]
 800e0f6:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800e0f8:	4b4e      	ldr	r3, [pc, #312]	; (800e234 <tcp_receive+0xb08>)
 800e0fa:	881b      	ldrh	r3, [r3, #0]
 800e0fc:	1ad3      	subs	r3, r2, r3
 800e0fe:	b29a      	uxth	r2, r3
 800e100:	687b      	ldr	r3, [r7, #4]
 800e102:	851a      	strh	r2, [r3, #40]	; 0x28

        tcp_update_rcv_ann_wnd(pcb);
 800e104:	6878      	ldr	r0, [r7, #4]
 800e106:	f7fc ff35 	bl	800af74 <tcp_update_rcv_ann_wnd>
           chains its data on this pbuf as well.

           If the segment was a FIN, we set the TF_GOT_FIN flag that will
           be used to indicate to the application that the remote side has
           closed its end of the connection. */
        if (inseg.p->tot_len > 0) {
 800e10a:	4b4c      	ldr	r3, [pc, #304]	; (800e23c <tcp_receive+0xb10>)
 800e10c:	685b      	ldr	r3, [r3, #4]
 800e10e:	891b      	ldrh	r3, [r3, #8]
 800e110:	2b00      	cmp	r3, #0
 800e112:	d006      	beq.n	800e122 <tcp_receive+0x9f6>
          recv_data = inseg.p;
 800e114:	4b49      	ldr	r3, [pc, #292]	; (800e23c <tcp_receive+0xb10>)
 800e116:	685b      	ldr	r3, [r3, #4]
 800e118:	4a4d      	ldr	r2, [pc, #308]	; (800e250 <tcp_receive+0xb24>)
 800e11a:	6013      	str	r3, [r2, #0]
          /* Since this pbuf now is the responsibility of the
             application, we delete our reference to it so that we won't
             (mistakingly) deallocate it. */
          inseg.p = NULL;
 800e11c:	4b47      	ldr	r3, [pc, #284]	; (800e23c <tcp_receive+0xb10>)
 800e11e:	2200      	movs	r2, #0
 800e120:	605a      	str	r2, [r3, #4]
        }
        if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 800e122:	4b46      	ldr	r3, [pc, #280]	; (800e23c <tcp_receive+0xb10>)
 800e124:	68db      	ldr	r3, [r3, #12]
 800e126:	899b      	ldrh	r3, [r3, #12]
 800e128:	b29b      	uxth	r3, r3
 800e12a:	4618      	mov	r0, r3
 800e12c:	f7fa fca8 	bl	8008a80 <lwip_htons>
 800e130:	4603      	mov	r3, r0
 800e132:	b2db      	uxtb	r3, r3
 800e134:	f003 0301 	and.w	r3, r3, #1
 800e138:	2b00      	cmp	r3, #0
 800e13a:	f000 80b8 	beq.w	800e2ae <tcp_receive+0xb82>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: received FIN.\n"));
          recv_flags |= TF_GOT_FIN;
 800e13e:	4b45      	ldr	r3, [pc, #276]	; (800e254 <tcp_receive+0xb28>)
 800e140:	781b      	ldrb	r3, [r3, #0]
 800e142:	f043 0320 	orr.w	r3, r3, #32
 800e146:	b2da      	uxtb	r2, r3
 800e148:	4b42      	ldr	r3, [pc, #264]	; (800e254 <tcp_receive+0xb28>)
 800e14a:	701a      	strb	r2, [r3, #0]
        }

#if TCP_QUEUE_OOSEQ
        /* We now check if we have segments on the ->ooseq queue that
           are now in sequence. */
        while (pcb->ooseq != NULL &&
 800e14c:	e0af      	b.n	800e2ae <tcp_receive+0xb82>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {

          struct tcp_seg *cseg = pcb->ooseq;
 800e14e:	687b      	ldr	r3, [r7, #4]
 800e150:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800e152:	60bb      	str	r3, [r7, #8]
          seqno = pcb->ooseq->tcphdr->seqno;
 800e154:	687b      	ldr	r3, [r7, #4]
 800e156:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800e158:	68db      	ldr	r3, [r3, #12]
 800e15a:	685b      	ldr	r3, [r3, #4]
 800e15c:	4a36      	ldr	r2, [pc, #216]	; (800e238 <tcp_receive+0xb0c>)
 800e15e:	6013      	str	r3, [r2, #0]

          pcb->rcv_nxt += TCP_TCPLEN(cseg);
 800e160:	68bb      	ldr	r3, [r7, #8]
 800e162:	891b      	ldrh	r3, [r3, #8]
 800e164:	461c      	mov	r4, r3
 800e166:	68bb      	ldr	r3, [r7, #8]
 800e168:	68db      	ldr	r3, [r3, #12]
 800e16a:	899b      	ldrh	r3, [r3, #12]
 800e16c:	b29b      	uxth	r3, r3
 800e16e:	4618      	mov	r0, r3
 800e170:	f7fa fc86 	bl	8008a80 <lwip_htons>
 800e174:	4603      	mov	r3, r0
 800e176:	b2db      	uxtb	r3, r3
 800e178:	f003 0303 	and.w	r3, r3, #3
 800e17c:	2b00      	cmp	r3, #0
 800e17e:	d001      	beq.n	800e184 <tcp_receive+0xa58>
 800e180:	2301      	movs	r3, #1
 800e182:	e000      	b.n	800e186 <tcp_receive+0xa5a>
 800e184:	2300      	movs	r3, #0
 800e186:	191a      	adds	r2, r3, r4
 800e188:	687b      	ldr	r3, [r7, #4]
 800e18a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e18c:	441a      	add	r2, r3
 800e18e:	687b      	ldr	r3, [r7, #4]
 800e190:	625a      	str	r2, [r3, #36]	; 0x24
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 800e192:	687b      	ldr	r3, [r7, #4]
 800e194:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800e196:	461c      	mov	r4, r3
 800e198:	68bb      	ldr	r3, [r7, #8]
 800e19a:	891b      	ldrh	r3, [r3, #8]
 800e19c:	461d      	mov	r5, r3
 800e19e:	68bb      	ldr	r3, [r7, #8]
 800e1a0:	68db      	ldr	r3, [r3, #12]
 800e1a2:	899b      	ldrh	r3, [r3, #12]
 800e1a4:	b29b      	uxth	r3, r3
 800e1a6:	4618      	mov	r0, r3
 800e1a8:	f7fa fc6a 	bl	8008a80 <lwip_htons>
 800e1ac:	4603      	mov	r3, r0
 800e1ae:	b2db      	uxtb	r3, r3
 800e1b0:	f003 0303 	and.w	r3, r3, #3
 800e1b4:	2b00      	cmp	r3, #0
 800e1b6:	d001      	beq.n	800e1bc <tcp_receive+0xa90>
 800e1b8:	2301      	movs	r3, #1
 800e1ba:	e000      	b.n	800e1be <tcp_receive+0xa92>
 800e1bc:	2300      	movs	r3, #0
 800e1be:	442b      	add	r3, r5
 800e1c0:	429c      	cmp	r4, r3
 800e1c2:	d206      	bcs.n	800e1d2 <tcp_receive+0xaa6>
 800e1c4:	4b1e      	ldr	r3, [pc, #120]	; (800e240 <tcp_receive+0xb14>)
 800e1c6:	f240 622b 	movw	r2, #1579	; 0x62b
 800e1ca:	4923      	ldr	r1, [pc, #140]	; (800e258 <tcp_receive+0xb2c>)
 800e1cc:	481e      	ldr	r0, [pc, #120]	; (800e248 <tcp_receive+0xb1c>)
 800e1ce:	f005 fbcb 	bl	8013968 <iprintf>
                      pcb->rcv_wnd >= TCP_TCPLEN(cseg));
          pcb->rcv_wnd -= TCP_TCPLEN(cseg);
 800e1d2:	68bb      	ldr	r3, [r7, #8]
 800e1d4:	891b      	ldrh	r3, [r3, #8]
 800e1d6:	461c      	mov	r4, r3
 800e1d8:	68bb      	ldr	r3, [r7, #8]
 800e1da:	68db      	ldr	r3, [r3, #12]
 800e1dc:	899b      	ldrh	r3, [r3, #12]
 800e1de:	b29b      	uxth	r3, r3
 800e1e0:	4618      	mov	r0, r3
 800e1e2:	f7fa fc4d 	bl	8008a80 <lwip_htons>
 800e1e6:	4603      	mov	r3, r0
 800e1e8:	b2db      	uxtb	r3, r3
 800e1ea:	f003 0303 	and.w	r3, r3, #3
 800e1ee:	2b00      	cmp	r3, #0
 800e1f0:	d001      	beq.n	800e1f6 <tcp_receive+0xaca>
 800e1f2:	2301      	movs	r3, #1
 800e1f4:	e000      	b.n	800e1f8 <tcp_receive+0xacc>
 800e1f6:	2300      	movs	r3, #0
 800e1f8:	1919      	adds	r1, r3, r4
 800e1fa:	687b      	ldr	r3, [r7, #4]
 800e1fc:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800e1fe:	b28b      	uxth	r3, r1
 800e200:	1ad3      	subs	r3, r2, r3
 800e202:	b29a      	uxth	r2, r3
 800e204:	687b      	ldr	r3, [r7, #4]
 800e206:	851a      	strh	r2, [r3, #40]	; 0x28

          tcp_update_rcv_ann_wnd(pcb);
 800e208:	6878      	ldr	r0, [r7, #4]
 800e20a:	f7fc feb3 	bl	800af74 <tcp_update_rcv_ann_wnd>

          if (cseg->p->tot_len > 0) {
 800e20e:	68bb      	ldr	r3, [r7, #8]
 800e210:	685b      	ldr	r3, [r3, #4]
 800e212:	891b      	ldrh	r3, [r3, #8]
 800e214:	2b00      	cmp	r3, #0
 800e216:	d028      	beq.n	800e26a <tcp_receive+0xb3e>
            /* Chain this pbuf onto the pbuf that we will pass to
               the application. */
            /* With window scaling, this can overflow recv_data->tot_len, but
               that's not a problem since we explicitly fix that before passing
               recv_data to the application. */
            if (recv_data) {
 800e218:	4b0d      	ldr	r3, [pc, #52]	; (800e250 <tcp_receive+0xb24>)
 800e21a:	681b      	ldr	r3, [r3, #0]
 800e21c:	2b00      	cmp	r3, #0
 800e21e:	d01d      	beq.n	800e25c <tcp_receive+0xb30>
              pbuf_cat(recv_data, cseg->p);
 800e220:	4b0b      	ldr	r3, [pc, #44]	; (800e250 <tcp_receive+0xb24>)
 800e222:	681a      	ldr	r2, [r3, #0]
 800e224:	68bb      	ldr	r3, [r7, #8]
 800e226:	685b      	ldr	r3, [r3, #4]
 800e228:	4619      	mov	r1, r3
 800e22a:	4610      	mov	r0, r2
 800e22c:	f7fc f9b8 	bl	800a5a0 <pbuf_cat>
 800e230:	e018      	b.n	800e264 <tcp_receive+0xb38>
 800e232:	bf00      	nop
 800e234:	2000c78a 	.word	0x2000c78a
 800e238:	2000c780 	.word	0x2000c780
 800e23c:	2000c760 	.word	0x2000c760
 800e240:	08015ba8 	.word	0x08015ba8
 800e244:	08015f88 	.word	0x08015f88
 800e248:	08015bf4 	.word	0x08015bf4
 800e24c:	08015fc4 	.word	0x08015fc4
 800e250:	2000c790 	.word	0x2000c790
 800e254:	2000c78d 	.word	0x2000c78d
 800e258:	08015fe4 	.word	0x08015fe4
            } else {
              recv_data = cseg->p;
 800e25c:	68bb      	ldr	r3, [r7, #8]
 800e25e:	685b      	ldr	r3, [r3, #4]
 800e260:	4a70      	ldr	r2, [pc, #448]	; (800e424 <tcp_receive+0xcf8>)
 800e262:	6013      	str	r3, [r2, #0]
            }
            cseg->p = NULL;
 800e264:	68bb      	ldr	r3, [r7, #8]
 800e266:	2200      	movs	r2, #0
 800e268:	605a      	str	r2, [r3, #4]
          }
          if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 800e26a:	68bb      	ldr	r3, [r7, #8]
 800e26c:	68db      	ldr	r3, [r3, #12]
 800e26e:	899b      	ldrh	r3, [r3, #12]
 800e270:	b29b      	uxth	r3, r3
 800e272:	4618      	mov	r0, r3
 800e274:	f7fa fc04 	bl	8008a80 <lwip_htons>
 800e278:	4603      	mov	r3, r0
 800e27a:	b2db      	uxtb	r3, r3
 800e27c:	f003 0301 	and.w	r3, r3, #1
 800e280:	2b00      	cmp	r3, #0
 800e282:	d00d      	beq.n	800e2a0 <tcp_receive+0xb74>
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: dequeued FIN.\n"));
            recv_flags |= TF_GOT_FIN;
 800e284:	4b68      	ldr	r3, [pc, #416]	; (800e428 <tcp_receive+0xcfc>)
 800e286:	781b      	ldrb	r3, [r3, #0]
 800e288:	f043 0320 	orr.w	r3, r3, #32
 800e28c:	b2da      	uxtb	r2, r3
 800e28e:	4b66      	ldr	r3, [pc, #408]	; (800e428 <tcp_receive+0xcfc>)
 800e290:	701a      	strb	r2, [r3, #0]
            if (pcb->state == ESTABLISHED) { /* force passive close or we can move to active close */
 800e292:	687b      	ldr	r3, [r7, #4]
 800e294:	7d1b      	ldrb	r3, [r3, #20]
 800e296:	2b04      	cmp	r3, #4
 800e298:	d102      	bne.n	800e2a0 <tcp_receive+0xb74>
              pcb->state = CLOSE_WAIT;
 800e29a:	687b      	ldr	r3, [r7, #4]
 800e29c:	2207      	movs	r2, #7
 800e29e:	751a      	strb	r2, [r3, #20]
            }
          }

          pcb->ooseq = cseg->next;
 800e2a0:	68bb      	ldr	r3, [r7, #8]
 800e2a2:	681a      	ldr	r2, [r3, #0]
 800e2a4:	687b      	ldr	r3, [r7, #4]
 800e2a6:	675a      	str	r2, [r3, #116]	; 0x74
          tcp_seg_free(cseg);
 800e2a8:	68b8      	ldr	r0, [r7, #8]
 800e2aa:	f7fd fb42 	bl	800b932 <tcp_seg_free>
        while (pcb->ooseq != NULL &&
 800e2ae:	687b      	ldr	r3, [r7, #4]
 800e2b0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800e2b2:	2b00      	cmp	r3, #0
 800e2b4:	d008      	beq.n	800e2c8 <tcp_receive+0xb9c>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {
 800e2b6:	687b      	ldr	r3, [r7, #4]
 800e2b8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800e2ba:	68db      	ldr	r3, [r3, #12]
 800e2bc:	685a      	ldr	r2, [r3, #4]
 800e2be:	687b      	ldr	r3, [r7, #4]
 800e2c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        while (pcb->ooseq != NULL &&
 800e2c2:	429a      	cmp	r2, r3
 800e2c4:	f43f af43 	beq.w	800e14e <tcp_receive+0xa22>
#endif /* LWIP_TCP_SACK_OUT */
#endif /* TCP_QUEUE_OOSEQ */


        /* Acknowledge the segment(s). */
        tcp_ack(pcb);
 800e2c8:	687b      	ldr	r3, [r7, #4]
 800e2ca:	8b5b      	ldrh	r3, [r3, #26]
 800e2cc:	f003 0301 	and.w	r3, r3, #1
 800e2d0:	2b00      	cmp	r3, #0
 800e2d2:	d00e      	beq.n	800e2f2 <tcp_receive+0xbc6>
 800e2d4:	687b      	ldr	r3, [r7, #4]
 800e2d6:	8b5b      	ldrh	r3, [r3, #26]
 800e2d8:	f023 0301 	bic.w	r3, r3, #1
 800e2dc:	b29a      	uxth	r2, r3
 800e2de:	687b      	ldr	r3, [r7, #4]
 800e2e0:	835a      	strh	r2, [r3, #26]
 800e2e2:	687b      	ldr	r3, [r7, #4]
 800e2e4:	8b5b      	ldrh	r3, [r3, #26]
 800e2e6:	f043 0302 	orr.w	r3, r3, #2
 800e2ea:	b29a      	uxth	r2, r3
 800e2ec:	687b      	ldr	r3, [r7, #4]
 800e2ee:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 800e2f0:	e188      	b.n	800e604 <tcp_receive+0xed8>
        tcp_ack(pcb);
 800e2f2:	687b      	ldr	r3, [r7, #4]
 800e2f4:	8b5b      	ldrh	r3, [r3, #26]
 800e2f6:	f043 0301 	orr.w	r3, r3, #1
 800e2fa:	b29a      	uxth	r2, r3
 800e2fc:	687b      	ldr	r3, [r7, #4]
 800e2fe:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 800e300:	e180      	b.n	800e604 <tcp_receive+0xed8>
      } else {
        /* We get here if the incoming segment is out-of-sequence. */

#if TCP_QUEUE_OOSEQ
        /* We queue the segment on the ->ooseq queue. */
        if (pcb->ooseq == NULL) {
 800e302:	687b      	ldr	r3, [r7, #4]
 800e304:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800e306:	2b00      	cmp	r3, #0
 800e308:	d106      	bne.n	800e318 <tcp_receive+0xbec>
          pcb->ooseq = tcp_seg_copy(&inseg);
 800e30a:	4848      	ldr	r0, [pc, #288]	; (800e42c <tcp_receive+0xd00>)
 800e30c:	f7fd fb2a 	bl	800b964 <tcp_seg_copy>
 800e310:	4602      	mov	r2, r0
 800e312:	687b      	ldr	r3, [r7, #4]
 800e314:	675a      	str	r2, [r3, #116]	; 0x74
 800e316:	e16d      	b.n	800e5f4 <tcp_receive+0xec8>
#if LWIP_TCP_SACK_OUT
          /* This is the left edge of the lowest possible SACK range.
             It may start before the newly received segment (possibly adjusted below). */
          u32_t sackbeg = TCP_SEQ_LT(seqno, pcb->ooseq->tcphdr->seqno) ? seqno : pcb->ooseq->tcphdr->seqno;
#endif /* LWIP_TCP_SACK_OUT */
          struct tcp_seg *next, *prev = NULL;
 800e318:	2300      	movs	r3, #0
 800e31a:	637b      	str	r3, [r7, #52]	; 0x34
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 800e31c:	687b      	ldr	r3, [r7, #4]
 800e31e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800e320:	63bb      	str	r3, [r7, #56]	; 0x38
 800e322:	e157      	b.n	800e5d4 <tcp_receive+0xea8>
            if (seqno == next->tcphdr->seqno) {
 800e324:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e326:	68db      	ldr	r3, [r3, #12]
 800e328:	685a      	ldr	r2, [r3, #4]
 800e32a:	4b41      	ldr	r3, [pc, #260]	; (800e430 <tcp_receive+0xd04>)
 800e32c:	681b      	ldr	r3, [r3, #0]
 800e32e:	429a      	cmp	r2, r3
 800e330:	d11d      	bne.n	800e36e <tcp_receive+0xc42>
              /* The sequence number of the incoming segment is the
                 same as the sequence number of the segment on
                 ->ooseq. We check the lengths to see which one to
                 discard. */
              if (inseg.len > next->len) {
 800e332:	4b3e      	ldr	r3, [pc, #248]	; (800e42c <tcp_receive+0xd00>)
 800e334:	891a      	ldrh	r2, [r3, #8]
 800e336:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e338:	891b      	ldrh	r3, [r3, #8]
 800e33a:	429a      	cmp	r2, r3
 800e33c:	f240 814f 	bls.w	800e5de <tcp_receive+0xeb2>
                /* The incoming segment is larger than the old
                   segment. We replace some segments with the new
                   one. */
                struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 800e340:	483a      	ldr	r0, [pc, #232]	; (800e42c <tcp_receive+0xd00>)
 800e342:	f7fd fb0f 	bl	800b964 <tcp_seg_copy>
 800e346:	6178      	str	r0, [r7, #20]
                if (cseg != NULL) {
 800e348:	697b      	ldr	r3, [r7, #20]
 800e34a:	2b00      	cmp	r3, #0
 800e34c:	f000 8149 	beq.w	800e5e2 <tcp_receive+0xeb6>
                  if (prev != NULL) {
 800e350:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e352:	2b00      	cmp	r3, #0
 800e354:	d003      	beq.n	800e35e <tcp_receive+0xc32>
                    prev->next = cseg;
 800e356:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e358:	697a      	ldr	r2, [r7, #20]
 800e35a:	601a      	str	r2, [r3, #0]
 800e35c:	e002      	b.n	800e364 <tcp_receive+0xc38>
                  } else {
                    pcb->ooseq = cseg;
 800e35e:	687b      	ldr	r3, [r7, #4]
 800e360:	697a      	ldr	r2, [r7, #20]
 800e362:	675a      	str	r2, [r3, #116]	; 0x74
                  }
                  tcp_oos_insert_segment(cseg, next);
 800e364:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800e366:	6978      	ldr	r0, [r7, #20]
 800e368:	f7ff f8dc 	bl	800d524 <tcp_oos_insert_segment>
                }
                break;
 800e36c:	e139      	b.n	800e5e2 <tcp_receive+0xeb6>
                   segment was smaller than the old one; in either
                   case, we ditch the incoming segment. */
                break;
              }
            } else {
              if (prev == NULL) {
 800e36e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e370:	2b00      	cmp	r3, #0
 800e372:	d117      	bne.n	800e3a4 <tcp_receive+0xc78>
                if (TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {
 800e374:	4b2e      	ldr	r3, [pc, #184]	; (800e430 <tcp_receive+0xd04>)
 800e376:	681a      	ldr	r2, [r3, #0]
 800e378:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e37a:	68db      	ldr	r3, [r3, #12]
 800e37c:	685b      	ldr	r3, [r3, #4]
 800e37e:	1ad3      	subs	r3, r2, r3
 800e380:	2b00      	cmp	r3, #0
 800e382:	da57      	bge.n	800e434 <tcp_receive+0xd08>
                  /* The sequence number of the incoming segment is lower
                     than the sequence number of the first segment on the
                     queue. We put the incoming segment first on the
                     queue. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 800e384:	4829      	ldr	r0, [pc, #164]	; (800e42c <tcp_receive+0xd00>)
 800e386:	f7fd faed 	bl	800b964 <tcp_seg_copy>
 800e38a:	61b8      	str	r0, [r7, #24]
                  if (cseg != NULL) {
 800e38c:	69bb      	ldr	r3, [r7, #24]
 800e38e:	2b00      	cmp	r3, #0
 800e390:	f000 8129 	beq.w	800e5e6 <tcp_receive+0xeba>
                    pcb->ooseq = cseg;
 800e394:	687b      	ldr	r3, [r7, #4]
 800e396:	69ba      	ldr	r2, [r7, #24]
 800e398:	675a      	str	r2, [r3, #116]	; 0x74
                    tcp_oos_insert_segment(cseg, next);
 800e39a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800e39c:	69b8      	ldr	r0, [r7, #24]
 800e39e:	f7ff f8c1 	bl	800d524 <tcp_oos_insert_segment>
                  }
                  break;
 800e3a2:	e120      	b.n	800e5e6 <tcp_receive+0xeba>
                }
              } else {
                /*if (TCP_SEQ_LT(prev->tcphdr->seqno, seqno) &&
                  TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {*/
                if (TCP_SEQ_BETWEEN(seqno, prev->tcphdr->seqno + 1, next->tcphdr->seqno - 1)) {
 800e3a4:	4b22      	ldr	r3, [pc, #136]	; (800e430 <tcp_receive+0xd04>)
 800e3a6:	681a      	ldr	r2, [r3, #0]
 800e3a8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e3aa:	68db      	ldr	r3, [r3, #12]
 800e3ac:	685b      	ldr	r3, [r3, #4]
 800e3ae:	1ad3      	subs	r3, r2, r3
 800e3b0:	3b01      	subs	r3, #1
 800e3b2:	2b00      	cmp	r3, #0
 800e3b4:	db3e      	blt.n	800e434 <tcp_receive+0xd08>
 800e3b6:	4b1e      	ldr	r3, [pc, #120]	; (800e430 <tcp_receive+0xd04>)
 800e3b8:	681a      	ldr	r2, [r3, #0]
 800e3ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e3bc:	68db      	ldr	r3, [r3, #12]
 800e3be:	685b      	ldr	r3, [r3, #4]
 800e3c0:	1ad3      	subs	r3, r2, r3
 800e3c2:	3301      	adds	r3, #1
 800e3c4:	2b00      	cmp	r3, #0
 800e3c6:	dc35      	bgt.n	800e434 <tcp_receive+0xd08>
                  /* The sequence number of the incoming segment is in
                     between the sequence numbers of the previous and
                     the next segment on ->ooseq. We trim trim the previous
                     segment, delete next segments that included in received segment
                     and trim received, if needed. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 800e3c8:	4818      	ldr	r0, [pc, #96]	; (800e42c <tcp_receive+0xd00>)
 800e3ca:	f7fd facb 	bl	800b964 <tcp_seg_copy>
 800e3ce:	61f8      	str	r0, [r7, #28]
                  if (cseg != NULL) {
 800e3d0:	69fb      	ldr	r3, [r7, #28]
 800e3d2:	2b00      	cmp	r3, #0
 800e3d4:	f000 8109 	beq.w	800e5ea <tcp_receive+0xebe>
                    if (TCP_SEQ_GT(prev->tcphdr->seqno + prev->len, seqno)) {
 800e3d8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e3da:	68db      	ldr	r3, [r3, #12]
 800e3dc:	685b      	ldr	r3, [r3, #4]
 800e3de:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800e3e0:	8912      	ldrh	r2, [r2, #8]
 800e3e2:	441a      	add	r2, r3
 800e3e4:	4b12      	ldr	r3, [pc, #72]	; (800e430 <tcp_receive+0xd04>)
 800e3e6:	681b      	ldr	r3, [r3, #0]
 800e3e8:	1ad3      	subs	r3, r2, r3
 800e3ea:	2b00      	cmp	r3, #0
 800e3ec:	dd12      	ble.n	800e414 <tcp_receive+0xce8>
                      /* We need to trim the prev segment. */
                      prev->len = (u16_t)(seqno - prev->tcphdr->seqno);
 800e3ee:	4b10      	ldr	r3, [pc, #64]	; (800e430 <tcp_receive+0xd04>)
 800e3f0:	681b      	ldr	r3, [r3, #0]
 800e3f2:	b29a      	uxth	r2, r3
 800e3f4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e3f6:	68db      	ldr	r3, [r3, #12]
 800e3f8:	685b      	ldr	r3, [r3, #4]
 800e3fa:	b29b      	uxth	r3, r3
 800e3fc:	1ad3      	subs	r3, r2, r3
 800e3fe:	b29a      	uxth	r2, r3
 800e400:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e402:	811a      	strh	r2, [r3, #8]
                      pbuf_realloc(prev->p, prev->len);
 800e404:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e406:	685a      	ldr	r2, [r3, #4]
 800e408:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e40a:	891b      	ldrh	r3, [r3, #8]
 800e40c:	4619      	mov	r1, r3
 800e40e:	4610      	mov	r0, r2
 800e410:	f7fb fe72 	bl	800a0f8 <pbuf_realloc>
                    }
                    prev->next = cseg;
 800e414:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e416:	69fa      	ldr	r2, [r7, #28]
 800e418:	601a      	str	r2, [r3, #0]
                    tcp_oos_insert_segment(cseg, next);
 800e41a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800e41c:	69f8      	ldr	r0, [r7, #28]
 800e41e:	f7ff f881 	bl	800d524 <tcp_oos_insert_segment>
                  }
                  break;
 800e422:	e0e2      	b.n	800e5ea <tcp_receive+0xebe>
 800e424:	2000c790 	.word	0x2000c790
 800e428:	2000c78d 	.word	0x2000c78d
 800e42c:	2000c760 	.word	0x2000c760
 800e430:	2000c780 	.word	0x2000c780
#endif /* LWIP_TCP_SACK_OUT */

              /* We don't use 'prev' below, so let's set it to current 'next'.
                 This way even if we break the loop below, 'prev' will be pointing
                 at the segment right in front of the newly added one. */
              prev = next;
 800e434:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e436:	637b      	str	r3, [r7, #52]	; 0x34

              /* If the "next" segment is the last segment on the
                 ooseq queue, we add the incoming segment to the end
                 of the list. */
              if (next->next == NULL &&
 800e438:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e43a:	681b      	ldr	r3, [r3, #0]
 800e43c:	2b00      	cmp	r3, #0
 800e43e:	f040 80c6 	bne.w	800e5ce <tcp_receive+0xea2>
                  TCP_SEQ_GT(seqno, next->tcphdr->seqno)) {
 800e442:	4b80      	ldr	r3, [pc, #512]	; (800e644 <tcp_receive+0xf18>)
 800e444:	681a      	ldr	r2, [r3, #0]
 800e446:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e448:	68db      	ldr	r3, [r3, #12]
 800e44a:	685b      	ldr	r3, [r3, #4]
 800e44c:	1ad3      	subs	r3, r2, r3
              if (next->next == NULL &&
 800e44e:	2b00      	cmp	r3, #0
 800e450:	f340 80bd 	ble.w	800e5ce <tcp_receive+0xea2>
                if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 800e454:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e456:	68db      	ldr	r3, [r3, #12]
 800e458:	899b      	ldrh	r3, [r3, #12]
 800e45a:	b29b      	uxth	r3, r3
 800e45c:	4618      	mov	r0, r3
 800e45e:	f7fa fb0f 	bl	8008a80 <lwip_htons>
 800e462:	4603      	mov	r3, r0
 800e464:	b2db      	uxtb	r3, r3
 800e466:	f003 0301 	and.w	r3, r3, #1
 800e46a:	2b00      	cmp	r3, #0
 800e46c:	f040 80bf 	bne.w	800e5ee <tcp_receive+0xec2>
                  /* segment "next" already contains all data */
                  break;
                }
                next->next = tcp_seg_copy(&inseg);
 800e470:	4875      	ldr	r0, [pc, #468]	; (800e648 <tcp_receive+0xf1c>)
 800e472:	f7fd fa77 	bl	800b964 <tcp_seg_copy>
 800e476:	4602      	mov	r2, r0
 800e478:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e47a:	601a      	str	r2, [r3, #0]
                if (next->next != NULL) {
 800e47c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e47e:	681b      	ldr	r3, [r3, #0]
 800e480:	2b00      	cmp	r3, #0
 800e482:	f000 80b6 	beq.w	800e5f2 <tcp_receive+0xec6>
                  if (TCP_SEQ_GT(next->tcphdr->seqno + next->len, seqno)) {
 800e486:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e488:	68db      	ldr	r3, [r3, #12]
 800e48a:	685b      	ldr	r3, [r3, #4]
 800e48c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800e48e:	8912      	ldrh	r2, [r2, #8]
 800e490:	441a      	add	r2, r3
 800e492:	4b6c      	ldr	r3, [pc, #432]	; (800e644 <tcp_receive+0xf18>)
 800e494:	681b      	ldr	r3, [r3, #0]
 800e496:	1ad3      	subs	r3, r2, r3
 800e498:	2b00      	cmp	r3, #0
 800e49a:	dd12      	ble.n	800e4c2 <tcp_receive+0xd96>
                    /* We need to trim the last segment. */
                    next->len = (u16_t)(seqno - next->tcphdr->seqno);
 800e49c:	4b69      	ldr	r3, [pc, #420]	; (800e644 <tcp_receive+0xf18>)
 800e49e:	681b      	ldr	r3, [r3, #0]
 800e4a0:	b29a      	uxth	r2, r3
 800e4a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e4a4:	68db      	ldr	r3, [r3, #12]
 800e4a6:	685b      	ldr	r3, [r3, #4]
 800e4a8:	b29b      	uxth	r3, r3
 800e4aa:	1ad3      	subs	r3, r2, r3
 800e4ac:	b29a      	uxth	r2, r3
 800e4ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e4b0:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->p, next->len);
 800e4b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e4b4:	685a      	ldr	r2, [r3, #4]
 800e4b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e4b8:	891b      	ldrh	r3, [r3, #8]
 800e4ba:	4619      	mov	r1, r3
 800e4bc:	4610      	mov	r0, r2
 800e4be:	f7fb fe1b 	bl	800a0f8 <pbuf_realloc>
                  }
                  /* check if the remote side overruns our receive window */
                  if (TCP_SEQ_GT((u32_t)tcplen + seqno, pcb->rcv_nxt + (u32_t)pcb->rcv_wnd)) {
 800e4c2:	4b62      	ldr	r3, [pc, #392]	; (800e64c <tcp_receive+0xf20>)
 800e4c4:	881b      	ldrh	r3, [r3, #0]
 800e4c6:	461a      	mov	r2, r3
 800e4c8:	4b5e      	ldr	r3, [pc, #376]	; (800e644 <tcp_receive+0xf18>)
 800e4ca:	681b      	ldr	r3, [r3, #0]
 800e4cc:	441a      	add	r2, r3
 800e4ce:	687b      	ldr	r3, [r7, #4]
 800e4d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e4d2:	6879      	ldr	r1, [r7, #4]
 800e4d4:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800e4d6:	440b      	add	r3, r1
 800e4d8:	1ad3      	subs	r3, r2, r3
 800e4da:	2b00      	cmp	r3, #0
 800e4dc:	f340 8089 	ble.w	800e5f2 <tcp_receive+0xec6>
                    LWIP_DEBUGF(TCP_INPUT_DEBUG,
                                ("tcp_receive: other end overran receive window"
                                 "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                                 seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
                    if (TCPH_FLAGS(next->next->tcphdr) & TCP_FIN) {
 800e4e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e4e2:	681b      	ldr	r3, [r3, #0]
 800e4e4:	68db      	ldr	r3, [r3, #12]
 800e4e6:	899b      	ldrh	r3, [r3, #12]
 800e4e8:	b29b      	uxth	r3, r3
 800e4ea:	4618      	mov	r0, r3
 800e4ec:	f7fa fac8 	bl	8008a80 <lwip_htons>
 800e4f0:	4603      	mov	r3, r0
 800e4f2:	b2db      	uxtb	r3, r3
 800e4f4:	f003 0301 	and.w	r3, r3, #1
 800e4f8:	2b00      	cmp	r3, #0
 800e4fa:	d022      	beq.n	800e542 <tcp_receive+0xe16>
                      /* Must remove the FIN from the header as we're trimming
                       * that byte of sequence-space from the packet */
                      TCPH_FLAGS_SET(next->next->tcphdr, TCPH_FLAGS(next->next->tcphdr) & ~TCP_FIN);
 800e4fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e4fe:	681b      	ldr	r3, [r3, #0]
 800e500:	68db      	ldr	r3, [r3, #12]
 800e502:	899b      	ldrh	r3, [r3, #12]
 800e504:	b29b      	uxth	r3, r3
 800e506:	b21b      	sxth	r3, r3
 800e508:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800e50c:	b21c      	sxth	r4, r3
 800e50e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e510:	681b      	ldr	r3, [r3, #0]
 800e512:	68db      	ldr	r3, [r3, #12]
 800e514:	899b      	ldrh	r3, [r3, #12]
 800e516:	b29b      	uxth	r3, r3
 800e518:	4618      	mov	r0, r3
 800e51a:	f7fa fab1 	bl	8008a80 <lwip_htons>
 800e51e:	4603      	mov	r3, r0
 800e520:	b2db      	uxtb	r3, r3
 800e522:	b29b      	uxth	r3, r3
 800e524:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 800e528:	b29b      	uxth	r3, r3
 800e52a:	4618      	mov	r0, r3
 800e52c:	f7fa faa8 	bl	8008a80 <lwip_htons>
 800e530:	4603      	mov	r3, r0
 800e532:	b21b      	sxth	r3, r3
 800e534:	4323      	orrs	r3, r4
 800e536:	b21a      	sxth	r2, r3
 800e538:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e53a:	681b      	ldr	r3, [r3, #0]
 800e53c:	68db      	ldr	r3, [r3, #12]
 800e53e:	b292      	uxth	r2, r2
 800e540:	819a      	strh	r2, [r3, #12]
                    }
                    /* Adjust length of segment to fit in the window. */
                    next->next->len = (u16_t)(pcb->rcv_nxt + pcb->rcv_wnd - seqno);
 800e542:	687b      	ldr	r3, [r7, #4]
 800e544:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e546:	b29a      	uxth	r2, r3
 800e548:	687b      	ldr	r3, [r7, #4]
 800e54a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800e54c:	4413      	add	r3, r2
 800e54e:	b299      	uxth	r1, r3
 800e550:	4b3c      	ldr	r3, [pc, #240]	; (800e644 <tcp_receive+0xf18>)
 800e552:	681b      	ldr	r3, [r3, #0]
 800e554:	b29a      	uxth	r2, r3
 800e556:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e558:	681b      	ldr	r3, [r3, #0]
 800e55a:	1a8a      	subs	r2, r1, r2
 800e55c:	b292      	uxth	r2, r2
 800e55e:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->next->p, next->next->len);
 800e560:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e562:	681b      	ldr	r3, [r3, #0]
 800e564:	685a      	ldr	r2, [r3, #4]
 800e566:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e568:	681b      	ldr	r3, [r3, #0]
 800e56a:	891b      	ldrh	r3, [r3, #8]
 800e56c:	4619      	mov	r1, r3
 800e56e:	4610      	mov	r0, r2
 800e570:	f7fb fdc2 	bl	800a0f8 <pbuf_realloc>
                    tcplen = TCP_TCPLEN(next->next);
 800e574:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e576:	681b      	ldr	r3, [r3, #0]
 800e578:	891c      	ldrh	r4, [r3, #8]
 800e57a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e57c:	681b      	ldr	r3, [r3, #0]
 800e57e:	68db      	ldr	r3, [r3, #12]
 800e580:	899b      	ldrh	r3, [r3, #12]
 800e582:	b29b      	uxth	r3, r3
 800e584:	4618      	mov	r0, r3
 800e586:	f7fa fa7b 	bl	8008a80 <lwip_htons>
 800e58a:	4603      	mov	r3, r0
 800e58c:	b2db      	uxtb	r3, r3
 800e58e:	f003 0303 	and.w	r3, r3, #3
 800e592:	2b00      	cmp	r3, #0
 800e594:	d001      	beq.n	800e59a <tcp_receive+0xe6e>
 800e596:	2301      	movs	r3, #1
 800e598:	e000      	b.n	800e59c <tcp_receive+0xe70>
 800e59a:	2300      	movs	r3, #0
 800e59c:	4423      	add	r3, r4
 800e59e:	b29a      	uxth	r2, r3
 800e5a0:	4b2a      	ldr	r3, [pc, #168]	; (800e64c <tcp_receive+0xf20>)
 800e5a2:	801a      	strh	r2, [r3, #0]
                    LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 800e5a4:	4b29      	ldr	r3, [pc, #164]	; (800e64c <tcp_receive+0xf20>)
 800e5a6:	881b      	ldrh	r3, [r3, #0]
 800e5a8:	461a      	mov	r2, r3
 800e5aa:	4b26      	ldr	r3, [pc, #152]	; (800e644 <tcp_receive+0xf18>)
 800e5ac:	681b      	ldr	r3, [r3, #0]
 800e5ae:	441a      	add	r2, r3
 800e5b0:	687b      	ldr	r3, [r7, #4]
 800e5b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e5b4:	6879      	ldr	r1, [r7, #4]
 800e5b6:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800e5b8:	440b      	add	r3, r1
 800e5ba:	429a      	cmp	r2, r3
 800e5bc:	d019      	beq.n	800e5f2 <tcp_receive+0xec6>
 800e5be:	4b24      	ldr	r3, [pc, #144]	; (800e650 <tcp_receive+0xf24>)
 800e5c0:	f44f 62df 	mov.w	r2, #1784	; 0x6f8
 800e5c4:	4923      	ldr	r1, [pc, #140]	; (800e654 <tcp_receive+0xf28>)
 800e5c6:	4824      	ldr	r0, [pc, #144]	; (800e658 <tcp_receive+0xf2c>)
 800e5c8:	f005 f9ce 	bl	8013968 <iprintf>
                                (seqno + tcplen) == (pcb->rcv_nxt + pcb->rcv_wnd));
                  }
                }
                break;
 800e5cc:	e011      	b.n	800e5f2 <tcp_receive+0xec6>
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 800e5ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e5d0:	681b      	ldr	r3, [r3, #0]
 800e5d2:	63bb      	str	r3, [r7, #56]	; 0x38
 800e5d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e5d6:	2b00      	cmp	r3, #0
 800e5d8:	f47f aea4 	bne.w	800e324 <tcp_receive+0xbf8>
 800e5dc:	e00a      	b.n	800e5f4 <tcp_receive+0xec8>
                break;
 800e5de:	bf00      	nop
 800e5e0:	e008      	b.n	800e5f4 <tcp_receive+0xec8>
                break;
 800e5e2:	bf00      	nop
 800e5e4:	e006      	b.n	800e5f4 <tcp_receive+0xec8>
                  break;
 800e5e6:	bf00      	nop
 800e5e8:	e004      	b.n	800e5f4 <tcp_receive+0xec8>
                  break;
 800e5ea:	bf00      	nop
 800e5ec:	e002      	b.n	800e5f4 <tcp_receive+0xec8>
                  break;
 800e5ee:	bf00      	nop
 800e5f0:	e000      	b.n	800e5f4 <tcp_receive+0xec8>
                break;
 800e5f2:	bf00      	nop
#endif /* TCP_OOSEQ_BYTES_LIMIT || TCP_OOSEQ_PBUFS_LIMIT */
#endif /* TCP_QUEUE_OOSEQ */

        /* We send the ACK packet after we've (potentially) dealt with SACKs,
           so they can be included in the acknowledgment. */
        tcp_send_empty_ack(pcb);
 800e5f4:	6878      	ldr	r0, [r7, #4]
 800e5f6:	f001 fa6d 	bl	800fad4 <tcp_send_empty_ack>
      if (pcb->rcv_nxt == seqno) {
 800e5fa:	e003      	b.n	800e604 <tcp_receive+0xed8>
      }
    } else {
      /* The incoming segment is not within the window. */
      tcp_send_empty_ack(pcb);
 800e5fc:	6878      	ldr	r0, [r7, #4]
 800e5fe:	f001 fa69 	bl	800fad4 <tcp_send_empty_ack>
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 800e602:	e01a      	b.n	800e63a <tcp_receive+0xf0e>
 800e604:	e019      	b.n	800e63a <tcp_receive+0xf0e>
    }
  } else {
    /* Segments with length 0 is taken care of here. Segments that
       fall out of the window are ACKed. */
    if (!TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
 800e606:	4b0f      	ldr	r3, [pc, #60]	; (800e644 <tcp_receive+0xf18>)
 800e608:	681a      	ldr	r2, [r3, #0]
 800e60a:	687b      	ldr	r3, [r7, #4]
 800e60c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e60e:	1ad3      	subs	r3, r2, r3
 800e610:	2b00      	cmp	r3, #0
 800e612:	db0a      	blt.n	800e62a <tcp_receive+0xefe>
 800e614:	4b0b      	ldr	r3, [pc, #44]	; (800e644 <tcp_receive+0xf18>)
 800e616:	681a      	ldr	r2, [r3, #0]
 800e618:	687b      	ldr	r3, [r7, #4]
 800e61a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e61c:	6879      	ldr	r1, [r7, #4]
 800e61e:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800e620:	440b      	add	r3, r1
 800e622:	1ad3      	subs	r3, r2, r3
 800e624:	3301      	adds	r3, #1
 800e626:	2b00      	cmp	r3, #0
 800e628:	dd07      	ble.n	800e63a <tcp_receive+0xf0e>
      tcp_ack_now(pcb);
 800e62a:	687b      	ldr	r3, [r7, #4]
 800e62c:	8b5b      	ldrh	r3, [r3, #26]
 800e62e:	f043 0302 	orr.w	r3, r3, #2
 800e632:	b29a      	uxth	r2, r3
 800e634:	687b      	ldr	r3, [r7, #4]
 800e636:	835a      	strh	r2, [r3, #26]
    }
  }
}
 800e638:	e7ff      	b.n	800e63a <tcp_receive+0xf0e>
 800e63a:	bf00      	nop
 800e63c:	3750      	adds	r7, #80	; 0x50
 800e63e:	46bd      	mov	sp, r7
 800e640:	bdb0      	pop	{r4, r5, r7, pc}
 800e642:	bf00      	nop
 800e644:	2000c780 	.word	0x2000c780
 800e648:	2000c760 	.word	0x2000c760
 800e64c:	2000c78a 	.word	0x2000c78a
 800e650:	08015ba8 	.word	0x08015ba8
 800e654:	08015f50 	.word	0x08015f50
 800e658:	08015bf4 	.word	0x08015bf4

0800e65c <tcp_get_next_optbyte>:

static u8_t
tcp_get_next_optbyte(void)
{
 800e65c:	b480      	push	{r7}
 800e65e:	b083      	sub	sp, #12
 800e660:	af00      	add	r7, sp, #0
  u16_t optidx = tcp_optidx++;
 800e662:	4b15      	ldr	r3, [pc, #84]	; (800e6b8 <tcp_get_next_optbyte+0x5c>)
 800e664:	881b      	ldrh	r3, [r3, #0]
 800e666:	1c5a      	adds	r2, r3, #1
 800e668:	b291      	uxth	r1, r2
 800e66a:	4a13      	ldr	r2, [pc, #76]	; (800e6b8 <tcp_get_next_optbyte+0x5c>)
 800e66c:	8011      	strh	r1, [r2, #0]
 800e66e:	80fb      	strh	r3, [r7, #6]
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 800e670:	4b12      	ldr	r3, [pc, #72]	; (800e6bc <tcp_get_next_optbyte+0x60>)
 800e672:	681b      	ldr	r3, [r3, #0]
 800e674:	2b00      	cmp	r3, #0
 800e676:	d004      	beq.n	800e682 <tcp_get_next_optbyte+0x26>
 800e678:	4b11      	ldr	r3, [pc, #68]	; (800e6c0 <tcp_get_next_optbyte+0x64>)
 800e67a:	881b      	ldrh	r3, [r3, #0]
 800e67c:	88fa      	ldrh	r2, [r7, #6]
 800e67e:	429a      	cmp	r2, r3
 800e680:	d208      	bcs.n	800e694 <tcp_get_next_optbyte+0x38>
    u8_t *opts = (u8_t *)tcphdr + TCP_HLEN;
 800e682:	4b10      	ldr	r3, [pc, #64]	; (800e6c4 <tcp_get_next_optbyte+0x68>)
 800e684:	681b      	ldr	r3, [r3, #0]
 800e686:	3314      	adds	r3, #20
 800e688:	603b      	str	r3, [r7, #0]
    return opts[optidx];
 800e68a:	88fb      	ldrh	r3, [r7, #6]
 800e68c:	683a      	ldr	r2, [r7, #0]
 800e68e:	4413      	add	r3, r2
 800e690:	781b      	ldrb	r3, [r3, #0]
 800e692:	e00b      	b.n	800e6ac <tcp_get_next_optbyte+0x50>
  } else {
    u8_t idx = (u8_t)(optidx - tcphdr_opt1len);
 800e694:	88fb      	ldrh	r3, [r7, #6]
 800e696:	b2da      	uxtb	r2, r3
 800e698:	4b09      	ldr	r3, [pc, #36]	; (800e6c0 <tcp_get_next_optbyte+0x64>)
 800e69a:	881b      	ldrh	r3, [r3, #0]
 800e69c:	b2db      	uxtb	r3, r3
 800e69e:	1ad3      	subs	r3, r2, r3
 800e6a0:	717b      	strb	r3, [r7, #5]
    return tcphdr_opt2[idx];
 800e6a2:	4b06      	ldr	r3, [pc, #24]	; (800e6bc <tcp_get_next_optbyte+0x60>)
 800e6a4:	681a      	ldr	r2, [r3, #0]
 800e6a6:	797b      	ldrb	r3, [r7, #5]
 800e6a8:	4413      	add	r3, r2
 800e6aa:	781b      	ldrb	r3, [r3, #0]
  }
}
 800e6ac:	4618      	mov	r0, r3
 800e6ae:	370c      	adds	r7, #12
 800e6b0:	46bd      	mov	sp, r7
 800e6b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e6b6:	4770      	bx	lr
 800e6b8:	2000c77c 	.word	0x2000c77c
 800e6bc:	2000c778 	.word	0x2000c778
 800e6c0:	2000c776 	.word	0x2000c776
 800e6c4:	2000c770 	.word	0x2000c770

0800e6c8 <tcp_parseopt>:
 *
 * @param pcb the tcp_pcb for which a segment arrived
 */
static void
tcp_parseopt(struct tcp_pcb *pcb)
{
 800e6c8:	b580      	push	{r7, lr}
 800e6ca:	b084      	sub	sp, #16
 800e6cc:	af00      	add	r7, sp, #0
 800e6ce:	6078      	str	r0, [r7, #4]
  u16_t mss;
#if LWIP_TCP_TIMESTAMPS
  u32_t tsval;
#endif

  LWIP_ASSERT("tcp_parseopt: invalid pcb", pcb != NULL);
 800e6d0:	687b      	ldr	r3, [r7, #4]
 800e6d2:	2b00      	cmp	r3, #0
 800e6d4:	d106      	bne.n	800e6e4 <tcp_parseopt+0x1c>
 800e6d6:	4b32      	ldr	r3, [pc, #200]	; (800e7a0 <tcp_parseopt+0xd8>)
 800e6d8:	f240 727d 	movw	r2, #1917	; 0x77d
 800e6dc:	4931      	ldr	r1, [pc, #196]	; (800e7a4 <tcp_parseopt+0xdc>)
 800e6de:	4832      	ldr	r0, [pc, #200]	; (800e7a8 <tcp_parseopt+0xe0>)
 800e6e0:	f005 f942 	bl	8013968 <iprintf>

  /* Parse the TCP MSS option, if present. */
  if (tcphdr_optlen != 0) {
 800e6e4:	4b31      	ldr	r3, [pc, #196]	; (800e7ac <tcp_parseopt+0xe4>)
 800e6e6:	881b      	ldrh	r3, [r3, #0]
 800e6e8:	2b00      	cmp	r3, #0
 800e6ea:	d055      	beq.n	800e798 <tcp_parseopt+0xd0>
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 800e6ec:	4b30      	ldr	r3, [pc, #192]	; (800e7b0 <tcp_parseopt+0xe8>)
 800e6ee:	2200      	movs	r2, #0
 800e6f0:	801a      	strh	r2, [r3, #0]
 800e6f2:	e045      	b.n	800e780 <tcp_parseopt+0xb8>
      u8_t opt = tcp_get_next_optbyte();
 800e6f4:	f7ff ffb2 	bl	800e65c <tcp_get_next_optbyte>
 800e6f8:	4603      	mov	r3, r0
 800e6fa:	73fb      	strb	r3, [r7, #15]
      switch (opt) {
 800e6fc:	7bfb      	ldrb	r3, [r7, #15]
 800e6fe:	2b02      	cmp	r3, #2
 800e700:	d006      	beq.n	800e710 <tcp_parseopt+0x48>
 800e702:	2b02      	cmp	r3, #2
 800e704:	dc2b      	bgt.n	800e75e <tcp_parseopt+0x96>
 800e706:	2b00      	cmp	r3, #0
 800e708:	d041      	beq.n	800e78e <tcp_parseopt+0xc6>
 800e70a:	2b01      	cmp	r3, #1
 800e70c:	d127      	bne.n	800e75e <tcp_parseopt+0x96>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: EOL\n"));
          return;
        case LWIP_TCP_OPT_NOP:
          /* NOP option. */
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: NOP\n"));
          break;
 800e70e:	e037      	b.n	800e780 <tcp_parseopt+0xb8>
        case LWIP_TCP_OPT_MSS:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: MSS\n"));
          if (tcp_get_next_optbyte() != LWIP_TCP_OPT_LEN_MSS || (tcp_optidx - 2 + LWIP_TCP_OPT_LEN_MSS) > tcphdr_optlen) {
 800e710:	f7ff ffa4 	bl	800e65c <tcp_get_next_optbyte>
 800e714:	4603      	mov	r3, r0
 800e716:	2b04      	cmp	r3, #4
 800e718:	d13b      	bne.n	800e792 <tcp_parseopt+0xca>
 800e71a:	4b25      	ldr	r3, [pc, #148]	; (800e7b0 <tcp_parseopt+0xe8>)
 800e71c:	881b      	ldrh	r3, [r3, #0]
 800e71e:	3301      	adds	r3, #1
 800e720:	4a22      	ldr	r2, [pc, #136]	; (800e7ac <tcp_parseopt+0xe4>)
 800e722:	8812      	ldrh	r2, [r2, #0]
 800e724:	4293      	cmp	r3, r2
 800e726:	da34      	bge.n	800e792 <tcp_parseopt+0xca>
            /* Bad length */
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: bad length\n"));
            return;
          }
          /* An MSS option with the right option length. */
          mss = (u16_t)(tcp_get_next_optbyte() << 8);
 800e728:	f7ff ff98 	bl	800e65c <tcp_get_next_optbyte>
 800e72c:	4603      	mov	r3, r0
 800e72e:	b29b      	uxth	r3, r3
 800e730:	021b      	lsls	r3, r3, #8
 800e732:	81bb      	strh	r3, [r7, #12]
          mss |= tcp_get_next_optbyte();
 800e734:	f7ff ff92 	bl	800e65c <tcp_get_next_optbyte>
 800e738:	4603      	mov	r3, r0
 800e73a:	b29a      	uxth	r2, r3
 800e73c:	89bb      	ldrh	r3, [r7, #12]
 800e73e:	4313      	orrs	r3, r2
 800e740:	81bb      	strh	r3, [r7, #12]
          /* Limit the mss to the configured TCP_MSS and prevent division by zero */
          pcb->mss = ((mss > TCP_MSS) || (mss == 0)) ? TCP_MSS : mss;
 800e742:	89bb      	ldrh	r3, [r7, #12]
 800e744:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 800e748:	d804      	bhi.n	800e754 <tcp_parseopt+0x8c>
 800e74a:	89bb      	ldrh	r3, [r7, #12]
 800e74c:	2b00      	cmp	r3, #0
 800e74e:	d001      	beq.n	800e754 <tcp_parseopt+0x8c>
 800e750:	89ba      	ldrh	r2, [r7, #12]
 800e752:	e001      	b.n	800e758 <tcp_parseopt+0x90>
 800e754:	f44f 7206 	mov.w	r2, #536	; 0x218
 800e758:	687b      	ldr	r3, [r7, #4]
 800e75a:	865a      	strh	r2, [r3, #50]	; 0x32
          break;
 800e75c:	e010      	b.n	800e780 <tcp_parseopt+0xb8>
          }
          break;
#endif /* LWIP_TCP_SACK_OUT */
        default:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: other\n"));
          data = tcp_get_next_optbyte();
 800e75e:	f7ff ff7d 	bl	800e65c <tcp_get_next_optbyte>
 800e762:	4603      	mov	r3, r0
 800e764:	72fb      	strb	r3, [r7, #11]
          if (data < 2) {
 800e766:	7afb      	ldrb	r3, [r7, #11]
 800e768:	2b01      	cmp	r3, #1
 800e76a:	d914      	bls.n	800e796 <tcp_parseopt+0xce>
               and we don't process them further. */
            return;
          }
          /* All other options have a length field, so that we easily
             can skip past them. */
          tcp_optidx += data - 2;
 800e76c:	7afb      	ldrb	r3, [r7, #11]
 800e76e:	b29a      	uxth	r2, r3
 800e770:	4b0f      	ldr	r3, [pc, #60]	; (800e7b0 <tcp_parseopt+0xe8>)
 800e772:	881b      	ldrh	r3, [r3, #0]
 800e774:	4413      	add	r3, r2
 800e776:	b29b      	uxth	r3, r3
 800e778:	3b02      	subs	r3, #2
 800e77a:	b29a      	uxth	r2, r3
 800e77c:	4b0c      	ldr	r3, [pc, #48]	; (800e7b0 <tcp_parseopt+0xe8>)
 800e77e:	801a      	strh	r2, [r3, #0]
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 800e780:	4b0b      	ldr	r3, [pc, #44]	; (800e7b0 <tcp_parseopt+0xe8>)
 800e782:	881a      	ldrh	r2, [r3, #0]
 800e784:	4b09      	ldr	r3, [pc, #36]	; (800e7ac <tcp_parseopt+0xe4>)
 800e786:	881b      	ldrh	r3, [r3, #0]
 800e788:	429a      	cmp	r2, r3
 800e78a:	d3b3      	bcc.n	800e6f4 <tcp_parseopt+0x2c>
 800e78c:	e004      	b.n	800e798 <tcp_parseopt+0xd0>
          return;
 800e78e:	bf00      	nop
 800e790:	e002      	b.n	800e798 <tcp_parseopt+0xd0>
            return;
 800e792:	bf00      	nop
 800e794:	e000      	b.n	800e798 <tcp_parseopt+0xd0>
            return;
 800e796:	bf00      	nop
      }
    }
  }
}
 800e798:	3710      	adds	r7, #16
 800e79a:	46bd      	mov	sp, r7
 800e79c:	bd80      	pop	{r7, pc}
 800e79e:	bf00      	nop
 800e7a0:	08015ba8 	.word	0x08015ba8
 800e7a4:	0801600c 	.word	0x0801600c
 800e7a8:	08015bf4 	.word	0x08015bf4
 800e7ac:	2000c774 	.word	0x2000c774
 800e7b0:	2000c77c 	.word	0x2000c77c

0800e7b4 <tcp_trigger_input_pcb_close>:

void
tcp_trigger_input_pcb_close(void)
{
 800e7b4:	b480      	push	{r7}
 800e7b6:	af00      	add	r7, sp, #0
  recv_flags |= TF_CLOSED;
 800e7b8:	4b05      	ldr	r3, [pc, #20]	; (800e7d0 <tcp_trigger_input_pcb_close+0x1c>)
 800e7ba:	781b      	ldrb	r3, [r3, #0]
 800e7bc:	f043 0310 	orr.w	r3, r3, #16
 800e7c0:	b2da      	uxtb	r2, r3
 800e7c2:	4b03      	ldr	r3, [pc, #12]	; (800e7d0 <tcp_trigger_input_pcb_close+0x1c>)
 800e7c4:	701a      	strb	r2, [r3, #0]
}
 800e7c6:	bf00      	nop
 800e7c8:	46bd      	mov	sp, r7
 800e7ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e7ce:	4770      	bx	lr
 800e7d0:	2000c78d 	.word	0x2000c78d

0800e7d4 <tcp_route>:
static err_t tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif);

/* tcp_route: common code that returns a fixed bound netif or calls ip_route */
static struct netif *
tcp_route(const struct tcp_pcb *pcb, const ip_addr_t *src, const ip_addr_t *dst)
{
 800e7d4:	b580      	push	{r7, lr}
 800e7d6:	b084      	sub	sp, #16
 800e7d8:	af00      	add	r7, sp, #0
 800e7da:	60f8      	str	r0, [r7, #12]
 800e7dc:	60b9      	str	r1, [r7, #8]
 800e7de:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(src); /* in case IPv4-only and source-based routing is disabled */

  if ((pcb != NULL) && (pcb->netif_idx != NETIF_NO_INDEX)) {
 800e7e0:	68fb      	ldr	r3, [r7, #12]
 800e7e2:	2b00      	cmp	r3, #0
 800e7e4:	d00a      	beq.n	800e7fc <tcp_route+0x28>
 800e7e6:	68fb      	ldr	r3, [r7, #12]
 800e7e8:	7a1b      	ldrb	r3, [r3, #8]
 800e7ea:	2b00      	cmp	r3, #0
 800e7ec:	d006      	beq.n	800e7fc <tcp_route+0x28>
    return netif_get_by_index(pcb->netif_idx);
 800e7ee:	68fb      	ldr	r3, [r7, #12]
 800e7f0:	7a1b      	ldrb	r3, [r3, #8]
 800e7f2:	4618      	mov	r0, r3
 800e7f4:	f7fb fa78 	bl	8009ce8 <netif_get_by_index>
 800e7f8:	4603      	mov	r3, r0
 800e7fa:	e003      	b.n	800e804 <tcp_route+0x30>
  } else {
    return ip_route(src, dst);
 800e7fc:	6878      	ldr	r0, [r7, #4]
 800e7fe:	f003 facb 	bl	8011d98 <ip4_route>
 800e802:	4603      	mov	r3, r0
  }
}
 800e804:	4618      	mov	r0, r3
 800e806:	3710      	adds	r7, #16
 800e808:	46bd      	mov	sp, r7
 800e80a:	bd80      	pop	{r7, pc}

0800e80c <tcp_create_segment>:
 * The TCP header is filled in except ackno and wnd.
 * p is freed on failure.
 */
static struct tcp_seg *
tcp_create_segment(const struct tcp_pcb *pcb, struct pbuf *p, u8_t hdrflags, u32_t seqno, u8_t optflags)
{
 800e80c:	b590      	push	{r4, r7, lr}
 800e80e:	b087      	sub	sp, #28
 800e810:	af00      	add	r7, sp, #0
 800e812:	60f8      	str	r0, [r7, #12]
 800e814:	60b9      	str	r1, [r7, #8]
 800e816:	603b      	str	r3, [r7, #0]
 800e818:	4613      	mov	r3, r2
 800e81a:	71fb      	strb	r3, [r7, #7]
  struct tcp_seg *seg;
  u8_t optlen;

  LWIP_ASSERT("tcp_create_segment: invalid pcb", pcb != NULL);
 800e81c:	68fb      	ldr	r3, [r7, #12]
 800e81e:	2b00      	cmp	r3, #0
 800e820:	d105      	bne.n	800e82e <tcp_create_segment+0x22>
 800e822:	4b48      	ldr	r3, [pc, #288]	; (800e944 <tcp_create_segment+0x138>)
 800e824:	22a3      	movs	r2, #163	; 0xa3
 800e826:	4948      	ldr	r1, [pc, #288]	; (800e948 <tcp_create_segment+0x13c>)
 800e828:	4848      	ldr	r0, [pc, #288]	; (800e94c <tcp_create_segment+0x140>)
 800e82a:	f005 f89d 	bl	8013968 <iprintf>
  LWIP_ASSERT("tcp_create_segment: invalid pbuf", p != NULL);
 800e82e:	68bb      	ldr	r3, [r7, #8]
 800e830:	2b00      	cmp	r3, #0
 800e832:	d105      	bne.n	800e840 <tcp_create_segment+0x34>
 800e834:	4b43      	ldr	r3, [pc, #268]	; (800e944 <tcp_create_segment+0x138>)
 800e836:	22a4      	movs	r2, #164	; 0xa4
 800e838:	4945      	ldr	r1, [pc, #276]	; (800e950 <tcp_create_segment+0x144>)
 800e83a:	4844      	ldr	r0, [pc, #272]	; (800e94c <tcp_create_segment+0x140>)
 800e83c:	f005 f894 	bl	8013968 <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 800e840:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800e844:	009b      	lsls	r3, r3, #2
 800e846:	b2db      	uxtb	r3, r3
 800e848:	f003 0304 	and.w	r3, r3, #4
 800e84c:	75fb      	strb	r3, [r7, #23]

  if ((seg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG)) == NULL) {
 800e84e:	2003      	movs	r0, #3
 800e850:	f7fa feb8 	bl	80095c4 <memp_malloc>
 800e854:	6138      	str	r0, [r7, #16]
 800e856:	693b      	ldr	r3, [r7, #16]
 800e858:	2b00      	cmp	r3, #0
 800e85a:	d104      	bne.n	800e866 <tcp_create_segment+0x5a>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no memory.\n"));
    pbuf_free(p);
 800e85c:	68b8      	ldr	r0, [r7, #8]
 800e85e:	f7fb fdd1 	bl	800a404 <pbuf_free>
    return NULL;
 800e862:	2300      	movs	r3, #0
 800e864:	e069      	b.n	800e93a <tcp_create_segment+0x12e>
  }
  seg->flags = optflags;
 800e866:	693b      	ldr	r3, [r7, #16]
 800e868:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 800e86c:	729a      	strb	r2, [r3, #10]
  seg->next = NULL;
 800e86e:	693b      	ldr	r3, [r7, #16]
 800e870:	2200      	movs	r2, #0
 800e872:	601a      	str	r2, [r3, #0]
  seg->p = p;
 800e874:	693b      	ldr	r3, [r7, #16]
 800e876:	68ba      	ldr	r2, [r7, #8]
 800e878:	605a      	str	r2, [r3, #4]
  LWIP_ASSERT("p->tot_len >= optlen", p->tot_len >= optlen);
 800e87a:	68bb      	ldr	r3, [r7, #8]
 800e87c:	891a      	ldrh	r2, [r3, #8]
 800e87e:	7dfb      	ldrb	r3, [r7, #23]
 800e880:	b29b      	uxth	r3, r3
 800e882:	429a      	cmp	r2, r3
 800e884:	d205      	bcs.n	800e892 <tcp_create_segment+0x86>
 800e886:	4b2f      	ldr	r3, [pc, #188]	; (800e944 <tcp_create_segment+0x138>)
 800e888:	22b0      	movs	r2, #176	; 0xb0
 800e88a:	4932      	ldr	r1, [pc, #200]	; (800e954 <tcp_create_segment+0x148>)
 800e88c:	482f      	ldr	r0, [pc, #188]	; (800e94c <tcp_create_segment+0x140>)
 800e88e:	f005 f86b 	bl	8013968 <iprintf>
  seg->len = p->tot_len - optlen;
 800e892:	68bb      	ldr	r3, [r7, #8]
 800e894:	891a      	ldrh	r2, [r3, #8]
 800e896:	7dfb      	ldrb	r3, [r7, #23]
 800e898:	b29b      	uxth	r3, r3
 800e89a:	1ad3      	subs	r3, r2, r3
 800e89c:	b29a      	uxth	r2, r3
 800e89e:	693b      	ldr	r3, [r7, #16]
 800e8a0:	811a      	strh	r2, [r3, #8]
  LWIP_ASSERT("invalid optflags passed: TF_SEG_DATA_CHECKSUMMED",
              (optflags & TF_SEG_DATA_CHECKSUMMED) == 0);
#endif /* TCP_CHECKSUM_ON_COPY */

  /* build TCP header */
  if (pbuf_add_header(p, TCP_HLEN)) {
 800e8a2:	2114      	movs	r1, #20
 800e8a4:	68b8      	ldr	r0, [r7, #8]
 800e8a6:	f7fb fd17 	bl	800a2d8 <pbuf_add_header>
 800e8aa:	4603      	mov	r3, r0
 800e8ac:	2b00      	cmp	r3, #0
 800e8ae:	d00c      	beq.n	800e8ca <tcp_create_segment+0xbe>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no room for TCP header in pbuf.\n"));
    TCP_STATS_INC(tcp.err);
 800e8b0:	4b29      	ldr	r3, [pc, #164]	; (800e958 <tcp_create_segment+0x14c>)
 800e8b2:	f8b3 30a4 	ldrh.w	r3, [r3, #164]	; 0xa4
 800e8b6:	3301      	adds	r3, #1
 800e8b8:	b29a      	uxth	r2, r3
 800e8ba:	4b27      	ldr	r3, [pc, #156]	; (800e958 <tcp_create_segment+0x14c>)
 800e8bc:	f8a3 20a4 	strh.w	r2, [r3, #164]	; 0xa4
    tcp_seg_free(seg);
 800e8c0:	6938      	ldr	r0, [r7, #16]
 800e8c2:	f7fd f836 	bl	800b932 <tcp_seg_free>
    return NULL;
 800e8c6:	2300      	movs	r3, #0
 800e8c8:	e037      	b.n	800e93a <tcp_create_segment+0x12e>
  }
  seg->tcphdr = (struct tcp_hdr *)seg->p->payload;
 800e8ca:	693b      	ldr	r3, [r7, #16]
 800e8cc:	685b      	ldr	r3, [r3, #4]
 800e8ce:	685a      	ldr	r2, [r3, #4]
 800e8d0:	693b      	ldr	r3, [r7, #16]
 800e8d2:	60da      	str	r2, [r3, #12]
  seg->tcphdr->src = lwip_htons(pcb->local_port);
 800e8d4:	68fb      	ldr	r3, [r7, #12]
 800e8d6:	8ada      	ldrh	r2, [r3, #22]
 800e8d8:	693b      	ldr	r3, [r7, #16]
 800e8da:	68dc      	ldr	r4, [r3, #12]
 800e8dc:	4610      	mov	r0, r2
 800e8de:	f7fa f8cf 	bl	8008a80 <lwip_htons>
 800e8e2:	4603      	mov	r3, r0
 800e8e4:	8023      	strh	r3, [r4, #0]
  seg->tcphdr->dest = lwip_htons(pcb->remote_port);
 800e8e6:	68fb      	ldr	r3, [r7, #12]
 800e8e8:	8b1a      	ldrh	r2, [r3, #24]
 800e8ea:	693b      	ldr	r3, [r7, #16]
 800e8ec:	68dc      	ldr	r4, [r3, #12]
 800e8ee:	4610      	mov	r0, r2
 800e8f0:	f7fa f8c6 	bl	8008a80 <lwip_htons>
 800e8f4:	4603      	mov	r3, r0
 800e8f6:	8063      	strh	r3, [r4, #2]
  seg->tcphdr->seqno = lwip_htonl(seqno);
 800e8f8:	693b      	ldr	r3, [r7, #16]
 800e8fa:	68dc      	ldr	r4, [r3, #12]
 800e8fc:	6838      	ldr	r0, [r7, #0]
 800e8fe:	f7fa f8d4 	bl	8008aaa <lwip_htonl>
 800e902:	4603      	mov	r3, r0
 800e904:	6063      	str	r3, [r4, #4]
  /* ackno is set in tcp_output */
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), hdrflags);
 800e906:	7dfb      	ldrb	r3, [r7, #23]
 800e908:	089b      	lsrs	r3, r3, #2
 800e90a:	b2db      	uxtb	r3, r3
 800e90c:	b29b      	uxth	r3, r3
 800e90e:	3305      	adds	r3, #5
 800e910:	b29b      	uxth	r3, r3
 800e912:	031b      	lsls	r3, r3, #12
 800e914:	b29a      	uxth	r2, r3
 800e916:	79fb      	ldrb	r3, [r7, #7]
 800e918:	b29b      	uxth	r3, r3
 800e91a:	4313      	orrs	r3, r2
 800e91c:	b29a      	uxth	r2, r3
 800e91e:	693b      	ldr	r3, [r7, #16]
 800e920:	68dc      	ldr	r4, [r3, #12]
 800e922:	4610      	mov	r0, r2
 800e924:	f7fa f8ac 	bl	8008a80 <lwip_htons>
 800e928:	4603      	mov	r3, r0
 800e92a:	81a3      	strh	r3, [r4, #12]
  /* wnd and chksum are set in tcp_output */
  seg->tcphdr->urgp = 0;
 800e92c:	693b      	ldr	r3, [r7, #16]
 800e92e:	68db      	ldr	r3, [r3, #12]
 800e930:	2200      	movs	r2, #0
 800e932:	749a      	strb	r2, [r3, #18]
 800e934:	2200      	movs	r2, #0
 800e936:	74da      	strb	r2, [r3, #19]
  return seg;
 800e938:	693b      	ldr	r3, [r7, #16]
}
 800e93a:	4618      	mov	r0, r3
 800e93c:	371c      	adds	r7, #28
 800e93e:	46bd      	mov	sp, r7
 800e940:	bd90      	pop	{r4, r7, pc}
 800e942:	bf00      	nop
 800e944:	08016028 	.word	0x08016028
 800e948:	0801605c 	.word	0x0801605c
 800e94c:	0801607c 	.word	0x0801607c
 800e950:	080160a4 	.word	0x080160a4
 800e954:	080160c8 	.word	0x080160c8
 800e958:	2000c64c 	.word	0x2000c64c

0800e95c <tcp_split_unsent_seg>:
 * @param pcb the tcp_pcb for which to split the unsent head
 * @param split the amount of payload to remain in the head
 */
err_t
tcp_split_unsent_seg(struct tcp_pcb *pcb, u16_t split)
{
 800e95c:	b590      	push	{r4, r7, lr}
 800e95e:	b08b      	sub	sp, #44	; 0x2c
 800e960:	af02      	add	r7, sp, #8
 800e962:	6078      	str	r0, [r7, #4]
 800e964:	460b      	mov	r3, r1
 800e966:	807b      	strh	r3, [r7, #2]
  struct tcp_seg *seg = NULL, *useg = NULL;
 800e968:	2300      	movs	r3, #0
 800e96a:	61fb      	str	r3, [r7, #28]
 800e96c:	2300      	movs	r3, #0
 800e96e:	617b      	str	r3, [r7, #20]
  struct pbuf *p = NULL;
 800e970:	2300      	movs	r3, #0
 800e972:	613b      	str	r3, [r7, #16]
  u16_t chksum = 0;
  u8_t chksum_swapped = 0;
  struct pbuf *q;
#endif /* TCP_CHECKSUM_ON_COPY */

  LWIP_ASSERT("tcp_split_unsent_seg: invalid pcb", pcb != NULL);
 800e974:	687b      	ldr	r3, [r7, #4]
 800e976:	2b00      	cmp	r3, #0
 800e978:	d106      	bne.n	800e988 <tcp_split_unsent_seg+0x2c>
 800e97a:	4b99      	ldr	r3, [pc, #612]	; (800ebe0 <tcp_split_unsent_seg+0x284>)
 800e97c:	f240 324b 	movw	r2, #843	; 0x34b
 800e980:	4998      	ldr	r1, [pc, #608]	; (800ebe4 <tcp_split_unsent_seg+0x288>)
 800e982:	4899      	ldr	r0, [pc, #612]	; (800ebe8 <tcp_split_unsent_seg+0x28c>)
 800e984:	f004 fff0 	bl	8013968 <iprintf>

  useg = pcb->unsent;
 800e988:	687b      	ldr	r3, [r7, #4]
 800e98a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e98c:	617b      	str	r3, [r7, #20]
  if (useg == NULL) {
 800e98e:	697b      	ldr	r3, [r7, #20]
 800e990:	2b00      	cmp	r3, #0
 800e992:	d102      	bne.n	800e99a <tcp_split_unsent_seg+0x3e>
    return ERR_MEM;
 800e994:	f04f 33ff 	mov.w	r3, #4294967295
 800e998:	e11e      	b.n	800ebd8 <tcp_split_unsent_seg+0x27c>
  }

  if (split == 0) {
 800e99a:	887b      	ldrh	r3, [r7, #2]
 800e99c:	2b00      	cmp	r3, #0
 800e99e:	d109      	bne.n	800e9b4 <tcp_split_unsent_seg+0x58>
    LWIP_ASSERT("Can't split segment into length 0", 0);
 800e9a0:	4b8f      	ldr	r3, [pc, #572]	; (800ebe0 <tcp_split_unsent_seg+0x284>)
 800e9a2:	f240 3253 	movw	r2, #851	; 0x353
 800e9a6:	4991      	ldr	r1, [pc, #580]	; (800ebec <tcp_split_unsent_seg+0x290>)
 800e9a8:	488f      	ldr	r0, [pc, #572]	; (800ebe8 <tcp_split_unsent_seg+0x28c>)
 800e9aa:	f004 ffdd 	bl	8013968 <iprintf>
    return ERR_VAL;
 800e9ae:	f06f 0305 	mvn.w	r3, #5
 800e9b2:	e111      	b.n	800ebd8 <tcp_split_unsent_seg+0x27c>
  }

  if (useg->len <= split) {
 800e9b4:	697b      	ldr	r3, [r7, #20]
 800e9b6:	891b      	ldrh	r3, [r3, #8]
 800e9b8:	887a      	ldrh	r2, [r7, #2]
 800e9ba:	429a      	cmp	r2, r3
 800e9bc:	d301      	bcc.n	800e9c2 <tcp_split_unsent_seg+0x66>
    return ERR_OK;
 800e9be:	2300      	movs	r3, #0
 800e9c0:	e10a      	b.n	800ebd8 <tcp_split_unsent_seg+0x27c>
  }

  LWIP_ASSERT("split <= mss", split <= pcb->mss);
 800e9c2:	687b      	ldr	r3, [r7, #4]
 800e9c4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800e9c6:	887a      	ldrh	r2, [r7, #2]
 800e9c8:	429a      	cmp	r2, r3
 800e9ca:	d906      	bls.n	800e9da <tcp_split_unsent_seg+0x7e>
 800e9cc:	4b84      	ldr	r3, [pc, #528]	; (800ebe0 <tcp_split_unsent_seg+0x284>)
 800e9ce:	f240 325b 	movw	r2, #859	; 0x35b
 800e9d2:	4987      	ldr	r1, [pc, #540]	; (800ebf0 <tcp_split_unsent_seg+0x294>)
 800e9d4:	4884      	ldr	r0, [pc, #528]	; (800ebe8 <tcp_split_unsent_seg+0x28c>)
 800e9d6:	f004 ffc7 	bl	8013968 <iprintf>
  LWIP_ASSERT("useg->len > 0", useg->len > 0);
 800e9da:	697b      	ldr	r3, [r7, #20]
 800e9dc:	891b      	ldrh	r3, [r3, #8]
 800e9de:	2b00      	cmp	r3, #0
 800e9e0:	d106      	bne.n	800e9f0 <tcp_split_unsent_seg+0x94>
 800e9e2:	4b7f      	ldr	r3, [pc, #508]	; (800ebe0 <tcp_split_unsent_seg+0x284>)
 800e9e4:	f44f 7257 	mov.w	r2, #860	; 0x35c
 800e9e8:	4982      	ldr	r1, [pc, #520]	; (800ebf4 <tcp_split_unsent_seg+0x298>)
 800e9ea:	487f      	ldr	r0, [pc, #508]	; (800ebe8 <tcp_split_unsent_seg+0x28c>)
 800e9ec:	f004 ffbc 	bl	8013968 <iprintf>
   * to split this packet so we may actually exceed the max value by
   * one!
   */
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue: split_unsent_seg: %u\n", (unsigned int)pcb->snd_queuelen));

  optflags = useg->flags;
 800e9f0:	697b      	ldr	r3, [r7, #20]
 800e9f2:	7a9b      	ldrb	r3, [r3, #10]
 800e9f4:	73fb      	strb	r3, [r7, #15]
#if TCP_CHECKSUM_ON_COPY
  /* Remove since checksum is not stored until after tcp_create_segment() */
  optflags &= ~TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */
  optlen = LWIP_TCP_OPT_LENGTH(optflags);
 800e9f6:	7bfb      	ldrb	r3, [r7, #15]
 800e9f8:	009b      	lsls	r3, r3, #2
 800e9fa:	b2db      	uxtb	r3, r3
 800e9fc:	f003 0304 	and.w	r3, r3, #4
 800ea00:	73bb      	strb	r3, [r7, #14]
  remainder = useg->len - split;
 800ea02:	697b      	ldr	r3, [r7, #20]
 800ea04:	891a      	ldrh	r2, [r3, #8]
 800ea06:	887b      	ldrh	r3, [r7, #2]
 800ea08:	1ad3      	subs	r3, r2, r3
 800ea0a:	81bb      	strh	r3, [r7, #12]

  /* Create new pbuf for the remainder of the split */
  p = pbuf_alloc(PBUF_TRANSPORT, remainder + optlen, PBUF_RAM);
 800ea0c:	7bbb      	ldrb	r3, [r7, #14]
 800ea0e:	b29a      	uxth	r2, r3
 800ea10:	89bb      	ldrh	r3, [r7, #12]
 800ea12:	4413      	add	r3, r2
 800ea14:	b29b      	uxth	r3, r3
 800ea16:	f44f 7220 	mov.w	r2, #640	; 0x280
 800ea1a:	4619      	mov	r1, r3
 800ea1c:	2036      	movs	r0, #54	; 0x36
 800ea1e:	f7fb fa0d 	bl	8009e3c <pbuf_alloc>
 800ea22:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 800ea24:	693b      	ldr	r3, [r7, #16]
 800ea26:	2b00      	cmp	r3, #0
 800ea28:	f000 80b7 	beq.w	800eb9a <tcp_split_unsent_seg+0x23e>
                ("tcp_split_unsent_seg: could not allocate memory for pbuf remainder %u\n", remainder));
    goto memerr;
  }

  /* Offset into the original pbuf is past TCP/IP headers, options, and split amount */
  offset = useg->p->tot_len - useg->len + split;
 800ea2c:	697b      	ldr	r3, [r7, #20]
 800ea2e:	685b      	ldr	r3, [r3, #4]
 800ea30:	891a      	ldrh	r2, [r3, #8]
 800ea32:	697b      	ldr	r3, [r7, #20]
 800ea34:	891b      	ldrh	r3, [r3, #8]
 800ea36:	1ad3      	subs	r3, r2, r3
 800ea38:	b29a      	uxth	r2, r3
 800ea3a:	887b      	ldrh	r3, [r7, #2]
 800ea3c:	4413      	add	r3, r2
 800ea3e:	817b      	strh	r3, [r7, #10]
  /* Copy remainder into new pbuf, headers and options will not be filled out */
  if (pbuf_copy_partial(useg->p, (u8_t *)p->payload + optlen, remainder, offset ) != remainder) {
 800ea40:	697b      	ldr	r3, [r7, #20]
 800ea42:	6858      	ldr	r0, [r3, #4]
 800ea44:	693b      	ldr	r3, [r7, #16]
 800ea46:	685a      	ldr	r2, [r3, #4]
 800ea48:	7bbb      	ldrb	r3, [r7, #14]
 800ea4a:	18d1      	adds	r1, r2, r3
 800ea4c:	897b      	ldrh	r3, [r7, #10]
 800ea4e:	89ba      	ldrh	r2, [r7, #12]
 800ea50:	f7fb fede 	bl	800a810 <pbuf_copy_partial>
 800ea54:	4603      	mov	r3, r0
 800ea56:	461a      	mov	r2, r3
 800ea58:	89bb      	ldrh	r3, [r7, #12]
 800ea5a:	4293      	cmp	r3, r2
 800ea5c:	f040 809f 	bne.w	800eb9e <tcp_split_unsent_seg+0x242>
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Options are created when calling tcp_output() */

  /* Migrate flags from original segment */
  split_flags = TCPH_FLAGS(useg->tcphdr);
 800ea60:	697b      	ldr	r3, [r7, #20]
 800ea62:	68db      	ldr	r3, [r3, #12]
 800ea64:	899b      	ldrh	r3, [r3, #12]
 800ea66:	b29b      	uxth	r3, r3
 800ea68:	4618      	mov	r0, r3
 800ea6a:	f7fa f809 	bl	8008a80 <lwip_htons>
 800ea6e:	4603      	mov	r3, r0
 800ea70:	b2db      	uxtb	r3, r3
 800ea72:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800ea76:	76fb      	strb	r3, [r7, #27]
  remainder_flags = 0; /* ACK added in tcp_output() */
 800ea78:	2300      	movs	r3, #0
 800ea7a:	76bb      	strb	r3, [r7, #26]

  if (split_flags & TCP_PSH) {
 800ea7c:	7efb      	ldrb	r3, [r7, #27]
 800ea7e:	f003 0308 	and.w	r3, r3, #8
 800ea82:	2b00      	cmp	r3, #0
 800ea84:	d007      	beq.n	800ea96 <tcp_split_unsent_seg+0x13a>
    split_flags &= ~TCP_PSH;
 800ea86:	7efb      	ldrb	r3, [r7, #27]
 800ea88:	f023 0308 	bic.w	r3, r3, #8
 800ea8c:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_PSH;
 800ea8e:	7ebb      	ldrb	r3, [r7, #26]
 800ea90:	f043 0308 	orr.w	r3, r3, #8
 800ea94:	76bb      	strb	r3, [r7, #26]
  }
  if (split_flags & TCP_FIN) {
 800ea96:	7efb      	ldrb	r3, [r7, #27]
 800ea98:	f003 0301 	and.w	r3, r3, #1
 800ea9c:	2b00      	cmp	r3, #0
 800ea9e:	d007      	beq.n	800eab0 <tcp_split_unsent_seg+0x154>
    split_flags &= ~TCP_FIN;
 800eaa0:	7efb      	ldrb	r3, [r7, #27]
 800eaa2:	f023 0301 	bic.w	r3, r3, #1
 800eaa6:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_FIN;
 800eaa8:	7ebb      	ldrb	r3, [r7, #26]
 800eaaa:	f043 0301 	orr.w	r3, r3, #1
 800eaae:	76bb      	strb	r3, [r7, #26]
  }
  /* SYN should be left on split, RST should not be present with data */

  seg = tcp_create_segment(pcb, p, remainder_flags, lwip_ntohl(useg->tcphdr->seqno) + split, optflags);
 800eab0:	697b      	ldr	r3, [r7, #20]
 800eab2:	68db      	ldr	r3, [r3, #12]
 800eab4:	685b      	ldr	r3, [r3, #4]
 800eab6:	4618      	mov	r0, r3
 800eab8:	f7f9 fff7 	bl	8008aaa <lwip_htonl>
 800eabc:	4602      	mov	r2, r0
 800eabe:	887b      	ldrh	r3, [r7, #2]
 800eac0:	18d1      	adds	r1, r2, r3
 800eac2:	7eba      	ldrb	r2, [r7, #26]
 800eac4:	7bfb      	ldrb	r3, [r7, #15]
 800eac6:	9300      	str	r3, [sp, #0]
 800eac8:	460b      	mov	r3, r1
 800eaca:	6939      	ldr	r1, [r7, #16]
 800eacc:	6878      	ldr	r0, [r7, #4]
 800eace:	f7ff fe9d 	bl	800e80c <tcp_create_segment>
 800ead2:	61f8      	str	r0, [r7, #28]
  if (seg == NULL) {
 800ead4:	69fb      	ldr	r3, [r7, #28]
 800ead6:	2b00      	cmp	r3, #0
 800ead8:	d063      	beq.n	800eba2 <tcp_split_unsent_seg+0x246>
  seg->chksum_swapped = chksum_swapped;
  seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Remove this segment from the queue since trimming it may free pbufs */
  pcb->snd_queuelen -= pbuf_clen(useg->p);
 800eada:	697b      	ldr	r3, [r7, #20]
 800eadc:	685b      	ldr	r3, [r3, #4]
 800eade:	4618      	mov	r0, r3
 800eae0:	f7fb fd1e 	bl	800a520 <pbuf_clen>
 800eae4:	4603      	mov	r3, r0
 800eae6:	461a      	mov	r2, r3
 800eae8:	687b      	ldr	r3, [r7, #4]
 800eaea:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800eaee:	1a9b      	subs	r3, r3, r2
 800eaf0:	b29a      	uxth	r2, r3
 800eaf2:	687b      	ldr	r3, [r7, #4]
 800eaf4:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  /* Trim the original pbuf into our split size.  At this point our remainder segment must be setup
  successfully because we are modifying the original segment */
  pbuf_realloc(useg->p, useg->p->tot_len - remainder);
 800eaf8:	697b      	ldr	r3, [r7, #20]
 800eafa:	6858      	ldr	r0, [r3, #4]
 800eafc:	697b      	ldr	r3, [r7, #20]
 800eafe:	685b      	ldr	r3, [r3, #4]
 800eb00:	891a      	ldrh	r2, [r3, #8]
 800eb02:	89bb      	ldrh	r3, [r7, #12]
 800eb04:	1ad3      	subs	r3, r2, r3
 800eb06:	b29b      	uxth	r3, r3
 800eb08:	4619      	mov	r1, r3
 800eb0a:	f7fb faf5 	bl	800a0f8 <pbuf_realloc>
  useg->len -= remainder;
 800eb0e:	697b      	ldr	r3, [r7, #20]
 800eb10:	891a      	ldrh	r2, [r3, #8]
 800eb12:	89bb      	ldrh	r3, [r7, #12]
 800eb14:	1ad3      	subs	r3, r2, r3
 800eb16:	b29a      	uxth	r2, r3
 800eb18:	697b      	ldr	r3, [r7, #20]
 800eb1a:	811a      	strh	r2, [r3, #8]
  TCPH_SET_FLAG(useg->tcphdr, split_flags);
 800eb1c:	697b      	ldr	r3, [r7, #20]
 800eb1e:	68db      	ldr	r3, [r3, #12]
 800eb20:	899b      	ldrh	r3, [r3, #12]
 800eb22:	b29c      	uxth	r4, r3
 800eb24:	7efb      	ldrb	r3, [r7, #27]
 800eb26:	b29b      	uxth	r3, r3
 800eb28:	4618      	mov	r0, r3
 800eb2a:	f7f9 ffa9 	bl	8008a80 <lwip_htons>
 800eb2e:	4603      	mov	r3, r0
 800eb30:	461a      	mov	r2, r3
 800eb32:	697b      	ldr	r3, [r7, #20]
 800eb34:	68db      	ldr	r3, [r3, #12]
 800eb36:	4322      	orrs	r2, r4
 800eb38:	b292      	uxth	r2, r2
 800eb3a:	819a      	strh	r2, [r3, #12]
  /* By trimming, realloc may have actually shrunk the pbuf, so clear oversize_left */
  useg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */

  /* Add back to the queue with new trimmed pbuf */
  pcb->snd_queuelen += pbuf_clen(useg->p);
 800eb3c:	697b      	ldr	r3, [r7, #20]
 800eb3e:	685b      	ldr	r3, [r3, #4]
 800eb40:	4618      	mov	r0, r3
 800eb42:	f7fb fced 	bl	800a520 <pbuf_clen>
 800eb46:	4603      	mov	r3, r0
 800eb48:	461a      	mov	r2, r3
 800eb4a:	687b      	ldr	r3, [r7, #4]
 800eb4c:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800eb50:	4413      	add	r3, r2
 800eb52:	b29a      	uxth	r2, r3
 800eb54:	687b      	ldr	r3, [r7, #4]
 800eb56:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Update number of segments on the queues. Note that length now may
   * exceed TCP_SND_QUEUELEN! We don't have to touch pcb->snd_buf
   * because the total amount of data is constant when packet is split */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 800eb5a:	69fb      	ldr	r3, [r7, #28]
 800eb5c:	685b      	ldr	r3, [r3, #4]
 800eb5e:	4618      	mov	r0, r3
 800eb60:	f7fb fcde 	bl	800a520 <pbuf_clen>
 800eb64:	4603      	mov	r3, r0
 800eb66:	461a      	mov	r2, r3
 800eb68:	687b      	ldr	r3, [r7, #4]
 800eb6a:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800eb6e:	4413      	add	r3, r2
 800eb70:	b29a      	uxth	r2, r3
 800eb72:	687b      	ldr	r3, [r7, #4]
 800eb74:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  /* Finally insert remainder into queue after split (which stays head) */
  seg->next = useg->next;
 800eb78:	697b      	ldr	r3, [r7, #20]
 800eb7a:	681a      	ldr	r2, [r3, #0]
 800eb7c:	69fb      	ldr	r3, [r7, #28]
 800eb7e:	601a      	str	r2, [r3, #0]
  useg->next = seg;
 800eb80:	697b      	ldr	r3, [r7, #20]
 800eb82:	69fa      	ldr	r2, [r7, #28]
 800eb84:	601a      	str	r2, [r3, #0]

#if TCP_OVERSIZE
  /* If remainder is last segment on the unsent, ensure we clear the oversize amount
   * because the remainder is always sized to the exact remaining amount */
  if (seg->next == NULL) {
 800eb86:	69fb      	ldr	r3, [r7, #28]
 800eb88:	681b      	ldr	r3, [r3, #0]
 800eb8a:	2b00      	cmp	r3, #0
 800eb8c:	d103      	bne.n	800eb96 <tcp_split_unsent_seg+0x23a>
    pcb->unsent_oversize = 0;
 800eb8e:	687b      	ldr	r3, [r7, #4]
 800eb90:	2200      	movs	r2, #0
 800eb92:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  }
#endif /* TCP_OVERSIZE */

  return ERR_OK;
 800eb96:	2300      	movs	r3, #0
 800eb98:	e01e      	b.n	800ebd8 <tcp_split_unsent_seg+0x27c>
    goto memerr;
 800eb9a:	bf00      	nop
 800eb9c:	e002      	b.n	800eba4 <tcp_split_unsent_seg+0x248>
    goto memerr;
 800eb9e:	bf00      	nop
 800eba0:	e000      	b.n	800eba4 <tcp_split_unsent_seg+0x248>
    goto memerr;
 800eba2:	bf00      	nop
memerr:
  TCP_STATS_INC(tcp.memerr);
 800eba4:	4b14      	ldr	r3, [pc, #80]	; (800ebf8 <tcp_split_unsent_seg+0x29c>)
 800eba6:	f8b3 309c 	ldrh.w	r3, [r3, #156]	; 0x9c
 800ebaa:	3301      	adds	r3, #1
 800ebac:	b29a      	uxth	r2, r3
 800ebae:	4b12      	ldr	r3, [pc, #72]	; (800ebf8 <tcp_split_unsent_seg+0x29c>)
 800ebb0:	f8a3 209c 	strh.w	r2, [r3, #156]	; 0x9c

  LWIP_ASSERT("seg == NULL", seg == NULL);
 800ebb4:	69fb      	ldr	r3, [r7, #28]
 800ebb6:	2b00      	cmp	r3, #0
 800ebb8:	d006      	beq.n	800ebc8 <tcp_split_unsent_seg+0x26c>
 800ebba:	4b09      	ldr	r3, [pc, #36]	; (800ebe0 <tcp_split_unsent_seg+0x284>)
 800ebbc:	f44f 7276 	mov.w	r2, #984	; 0x3d8
 800ebc0:	490e      	ldr	r1, [pc, #56]	; (800ebfc <tcp_split_unsent_seg+0x2a0>)
 800ebc2:	4809      	ldr	r0, [pc, #36]	; (800ebe8 <tcp_split_unsent_seg+0x28c>)
 800ebc4:	f004 fed0 	bl	8013968 <iprintf>
  if (p != NULL) {
 800ebc8:	693b      	ldr	r3, [r7, #16]
 800ebca:	2b00      	cmp	r3, #0
 800ebcc:	d002      	beq.n	800ebd4 <tcp_split_unsent_seg+0x278>
    pbuf_free(p);
 800ebce:	6938      	ldr	r0, [r7, #16]
 800ebd0:	f7fb fc18 	bl	800a404 <pbuf_free>
  }

  return ERR_MEM;
 800ebd4:	f04f 33ff 	mov.w	r3, #4294967295
}
 800ebd8:	4618      	mov	r0, r3
 800ebda:	3724      	adds	r7, #36	; 0x24
 800ebdc:	46bd      	mov	sp, r7
 800ebde:	bd90      	pop	{r4, r7, pc}
 800ebe0:	08016028 	.word	0x08016028
 800ebe4:	080163bc 	.word	0x080163bc
 800ebe8:	0801607c 	.word	0x0801607c
 800ebec:	080163e0 	.word	0x080163e0
 800ebf0:	08016404 	.word	0x08016404
 800ebf4:	08016414 	.word	0x08016414
 800ebf8:	2000c64c 	.word	0x2000c64c
 800ebfc:	08016424 	.word	0x08016424

0800ec00 <tcp_send_fin>:
 * @param pcb the tcp_pcb over which to send a segment
 * @return ERR_OK if sent, another err_t otherwise
 */
err_t
tcp_send_fin(struct tcp_pcb *pcb)
{
 800ec00:	b590      	push	{r4, r7, lr}
 800ec02:	b085      	sub	sp, #20
 800ec04:	af00      	add	r7, sp, #0
 800ec06:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_send_fin: invalid pcb", pcb != NULL);
 800ec08:	687b      	ldr	r3, [r7, #4]
 800ec0a:	2b00      	cmp	r3, #0
 800ec0c:	d106      	bne.n	800ec1c <tcp_send_fin+0x1c>
 800ec0e:	4b21      	ldr	r3, [pc, #132]	; (800ec94 <tcp_send_fin+0x94>)
 800ec10:	f240 32eb 	movw	r2, #1003	; 0x3eb
 800ec14:	4920      	ldr	r1, [pc, #128]	; (800ec98 <tcp_send_fin+0x98>)
 800ec16:	4821      	ldr	r0, [pc, #132]	; (800ec9c <tcp_send_fin+0x9c>)
 800ec18:	f004 fea6 	bl	8013968 <iprintf>

  /* first, try to add the fin to the last unsent segment */
  if (pcb->unsent != NULL) {
 800ec1c:	687b      	ldr	r3, [r7, #4]
 800ec1e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ec20:	2b00      	cmp	r3, #0
 800ec22:	d02e      	beq.n	800ec82 <tcp_send_fin+0x82>
    struct tcp_seg *last_unsent;
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 800ec24:	687b      	ldr	r3, [r7, #4]
 800ec26:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ec28:	60fb      	str	r3, [r7, #12]
 800ec2a:	e002      	b.n	800ec32 <tcp_send_fin+0x32>
         last_unsent = last_unsent->next);
 800ec2c:	68fb      	ldr	r3, [r7, #12]
 800ec2e:	681b      	ldr	r3, [r3, #0]
 800ec30:	60fb      	str	r3, [r7, #12]
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 800ec32:	68fb      	ldr	r3, [r7, #12]
 800ec34:	681b      	ldr	r3, [r3, #0]
 800ec36:	2b00      	cmp	r3, #0
 800ec38:	d1f8      	bne.n	800ec2c <tcp_send_fin+0x2c>

    if ((TCPH_FLAGS(last_unsent->tcphdr) & (TCP_SYN | TCP_FIN | TCP_RST)) == 0) {
 800ec3a:	68fb      	ldr	r3, [r7, #12]
 800ec3c:	68db      	ldr	r3, [r3, #12]
 800ec3e:	899b      	ldrh	r3, [r3, #12]
 800ec40:	b29b      	uxth	r3, r3
 800ec42:	4618      	mov	r0, r3
 800ec44:	f7f9 ff1c 	bl	8008a80 <lwip_htons>
 800ec48:	4603      	mov	r3, r0
 800ec4a:	b2db      	uxtb	r3, r3
 800ec4c:	f003 0307 	and.w	r3, r3, #7
 800ec50:	2b00      	cmp	r3, #0
 800ec52:	d116      	bne.n	800ec82 <tcp_send_fin+0x82>
      /* no SYN/FIN/RST flag in the header, we can add the FIN flag */
      TCPH_SET_FLAG(last_unsent->tcphdr, TCP_FIN);
 800ec54:	68fb      	ldr	r3, [r7, #12]
 800ec56:	68db      	ldr	r3, [r3, #12]
 800ec58:	899b      	ldrh	r3, [r3, #12]
 800ec5a:	b29c      	uxth	r4, r3
 800ec5c:	2001      	movs	r0, #1
 800ec5e:	f7f9 ff0f 	bl	8008a80 <lwip_htons>
 800ec62:	4603      	mov	r3, r0
 800ec64:	461a      	mov	r2, r3
 800ec66:	68fb      	ldr	r3, [r7, #12]
 800ec68:	68db      	ldr	r3, [r3, #12]
 800ec6a:	4322      	orrs	r2, r4
 800ec6c:	b292      	uxth	r2, r2
 800ec6e:	819a      	strh	r2, [r3, #12]
      tcp_set_flags(pcb, TF_FIN);
 800ec70:	687b      	ldr	r3, [r7, #4]
 800ec72:	8b5b      	ldrh	r3, [r3, #26]
 800ec74:	f043 0320 	orr.w	r3, r3, #32
 800ec78:	b29a      	uxth	r2, r3
 800ec7a:	687b      	ldr	r3, [r7, #4]
 800ec7c:	835a      	strh	r2, [r3, #26]
      return ERR_OK;
 800ec7e:	2300      	movs	r3, #0
 800ec80:	e004      	b.n	800ec8c <tcp_send_fin+0x8c>
    }
  }
  /* no data, no length, flags, copy=1, no optdata */
  return tcp_enqueue_flags(pcb, TCP_FIN);
 800ec82:	2101      	movs	r1, #1
 800ec84:	6878      	ldr	r0, [r7, #4]
 800ec86:	f000 f80b 	bl	800eca0 <tcp_enqueue_flags>
 800ec8a:	4603      	mov	r3, r0
}
 800ec8c:	4618      	mov	r0, r3
 800ec8e:	3714      	adds	r7, #20
 800ec90:	46bd      	mov	sp, r7
 800ec92:	bd90      	pop	{r4, r7, pc}
 800ec94:	08016028 	.word	0x08016028
 800ec98:	08016430 	.word	0x08016430
 800ec9c:	0801607c 	.word	0x0801607c

0800eca0 <tcp_enqueue_flags>:
 * @param pcb Protocol control block for the TCP connection.
 * @param flags TCP header flags to set in the outgoing segment.
 */
err_t
tcp_enqueue_flags(struct tcp_pcb *pcb, u8_t flags)
{
 800eca0:	b580      	push	{r7, lr}
 800eca2:	b08a      	sub	sp, #40	; 0x28
 800eca4:	af02      	add	r7, sp, #8
 800eca6:	6078      	str	r0, [r7, #4]
 800eca8:	460b      	mov	r3, r1
 800ecaa:	70fb      	strb	r3, [r7, #3]
  struct pbuf *p;
  struct tcp_seg *seg;
  u8_t optflags = 0;
 800ecac:	2300      	movs	r3, #0
 800ecae:	77fb      	strb	r3, [r7, #31]
  u8_t optlen = 0;
 800ecb0:	2300      	movs	r3, #0
 800ecb2:	75fb      	strb	r3, [r7, #23]

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: queuelen: %"U16_F"\n", (u16_t)pcb->snd_queuelen));

  LWIP_ASSERT("tcp_enqueue_flags: need either TCP_SYN or TCP_FIN in flags (programmer violates API)",
 800ecb4:	78fb      	ldrb	r3, [r7, #3]
 800ecb6:	f003 0303 	and.w	r3, r3, #3
 800ecba:	2b00      	cmp	r3, #0
 800ecbc:	d106      	bne.n	800eccc <tcp_enqueue_flags+0x2c>
 800ecbe:	4b6f      	ldr	r3, [pc, #444]	; (800ee7c <tcp_enqueue_flags+0x1dc>)
 800ecc0:	f240 4211 	movw	r2, #1041	; 0x411
 800ecc4:	496e      	ldr	r1, [pc, #440]	; (800ee80 <tcp_enqueue_flags+0x1e0>)
 800ecc6:	486f      	ldr	r0, [pc, #444]	; (800ee84 <tcp_enqueue_flags+0x1e4>)
 800ecc8:	f004 fe4e 	bl	8013968 <iprintf>
              (flags & (TCP_SYN | TCP_FIN)) != 0);
  LWIP_ASSERT("tcp_enqueue_flags: invalid pcb", pcb != NULL);
 800eccc:	687b      	ldr	r3, [r7, #4]
 800ecce:	2b00      	cmp	r3, #0
 800ecd0:	d106      	bne.n	800ece0 <tcp_enqueue_flags+0x40>
 800ecd2:	4b6a      	ldr	r3, [pc, #424]	; (800ee7c <tcp_enqueue_flags+0x1dc>)
 800ecd4:	f240 4213 	movw	r2, #1043	; 0x413
 800ecd8:	496b      	ldr	r1, [pc, #428]	; (800ee88 <tcp_enqueue_flags+0x1e8>)
 800ecda:	486a      	ldr	r0, [pc, #424]	; (800ee84 <tcp_enqueue_flags+0x1e4>)
 800ecdc:	f004 fe44 	bl	8013968 <iprintf>

  /* No need to check pcb->snd_queuelen if only SYN or FIN are allowed! */

  /* Get options for this segment. This is a special case since this is the
     only place where a SYN can be sent. */
  if (flags & TCP_SYN) {
 800ece0:	78fb      	ldrb	r3, [r7, #3]
 800ece2:	f003 0302 	and.w	r3, r3, #2
 800ece6:	2b00      	cmp	r3, #0
 800ece8:	d001      	beq.n	800ecee <tcp_enqueue_flags+0x4e>
    optflags = TF_SEG_OPTS_MSS;
 800ecea:	2301      	movs	r3, #1
 800ecec:	77fb      	strb	r3, [r7, #31]
    /* Make sure the timestamp option is only included in data segments if we
       agreed about it with the remote host (and in active open SYN segments). */
    optflags |= TF_SEG_OPTS_TS;
  }
#endif /* LWIP_TCP_TIMESTAMPS */
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 800ecee:	7ffb      	ldrb	r3, [r7, #31]
 800ecf0:	009b      	lsls	r3, r3, #2
 800ecf2:	b2db      	uxtb	r3, r3
 800ecf4:	f003 0304 	and.w	r3, r3, #4
 800ecf8:	75fb      	strb	r3, [r7, #23]

  /* Allocate pbuf with room for TCP header + options */
  if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 800ecfa:	7dfb      	ldrb	r3, [r7, #23]
 800ecfc:	b29b      	uxth	r3, r3
 800ecfe:	f44f 7220 	mov.w	r2, #640	; 0x280
 800ed02:	4619      	mov	r1, r3
 800ed04:	2036      	movs	r0, #54	; 0x36
 800ed06:	f7fb f899 	bl	8009e3c <pbuf_alloc>
 800ed0a:	6138      	str	r0, [r7, #16]
 800ed0c:	693b      	ldr	r3, [r7, #16]
 800ed0e:	2b00      	cmp	r3, #0
 800ed10:	d111      	bne.n	800ed36 <tcp_enqueue_flags+0x96>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800ed12:	687b      	ldr	r3, [r7, #4]
 800ed14:	8b5b      	ldrh	r3, [r3, #26]
 800ed16:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ed1a:	b29a      	uxth	r2, r3
 800ed1c:	687b      	ldr	r3, [r7, #4]
 800ed1e:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
 800ed20:	4b5a      	ldr	r3, [pc, #360]	; (800ee8c <tcp_enqueue_flags+0x1ec>)
 800ed22:	f8b3 309c 	ldrh.w	r3, [r3, #156]	; 0x9c
 800ed26:	3301      	adds	r3, #1
 800ed28:	b29a      	uxth	r2, r3
 800ed2a:	4b58      	ldr	r3, [pc, #352]	; (800ee8c <tcp_enqueue_flags+0x1ec>)
 800ed2c:	f8a3 209c 	strh.w	r2, [r3, #156]	; 0x9c
    return ERR_MEM;
 800ed30:	f04f 33ff 	mov.w	r3, #4294967295
 800ed34:	e09d      	b.n	800ee72 <tcp_enqueue_flags+0x1d2>
  }
  LWIP_ASSERT("tcp_enqueue_flags: check that first pbuf can hold optlen",
 800ed36:	693b      	ldr	r3, [r7, #16]
 800ed38:	895a      	ldrh	r2, [r3, #10]
 800ed3a:	7dfb      	ldrb	r3, [r7, #23]
 800ed3c:	b29b      	uxth	r3, r3
 800ed3e:	429a      	cmp	r2, r3
 800ed40:	d206      	bcs.n	800ed50 <tcp_enqueue_flags+0xb0>
 800ed42:	4b4e      	ldr	r3, [pc, #312]	; (800ee7c <tcp_enqueue_flags+0x1dc>)
 800ed44:	f240 4239 	movw	r2, #1081	; 0x439
 800ed48:	4951      	ldr	r1, [pc, #324]	; (800ee90 <tcp_enqueue_flags+0x1f0>)
 800ed4a:	484e      	ldr	r0, [pc, #312]	; (800ee84 <tcp_enqueue_flags+0x1e4>)
 800ed4c:	f004 fe0c 	bl	8013968 <iprintf>
              (p->len >= optlen));

  /* Allocate memory for tcp_seg, and fill in fields. */
  if ((seg = tcp_create_segment(pcb, p, flags, pcb->snd_lbb, optflags)) == NULL) {
 800ed50:	687b      	ldr	r3, [r7, #4]
 800ed52:	6dd9      	ldr	r1, [r3, #92]	; 0x5c
 800ed54:	78fa      	ldrb	r2, [r7, #3]
 800ed56:	7ffb      	ldrb	r3, [r7, #31]
 800ed58:	9300      	str	r3, [sp, #0]
 800ed5a:	460b      	mov	r3, r1
 800ed5c:	6939      	ldr	r1, [r7, #16]
 800ed5e:	6878      	ldr	r0, [r7, #4]
 800ed60:	f7ff fd54 	bl	800e80c <tcp_create_segment>
 800ed64:	60f8      	str	r0, [r7, #12]
 800ed66:	68fb      	ldr	r3, [r7, #12]
 800ed68:	2b00      	cmp	r3, #0
 800ed6a:	d111      	bne.n	800ed90 <tcp_enqueue_flags+0xf0>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800ed6c:	687b      	ldr	r3, [r7, #4]
 800ed6e:	8b5b      	ldrh	r3, [r3, #26]
 800ed70:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ed74:	b29a      	uxth	r2, r3
 800ed76:	687b      	ldr	r3, [r7, #4]
 800ed78:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
 800ed7a:	4b44      	ldr	r3, [pc, #272]	; (800ee8c <tcp_enqueue_flags+0x1ec>)
 800ed7c:	f8b3 309c 	ldrh.w	r3, [r3, #156]	; 0x9c
 800ed80:	3301      	adds	r3, #1
 800ed82:	b29a      	uxth	r2, r3
 800ed84:	4b41      	ldr	r3, [pc, #260]	; (800ee8c <tcp_enqueue_flags+0x1ec>)
 800ed86:	f8a3 209c 	strh.w	r2, [r3, #156]	; 0x9c
    return ERR_MEM;
 800ed8a:	f04f 33ff 	mov.w	r3, #4294967295
 800ed8e:	e070      	b.n	800ee72 <tcp_enqueue_flags+0x1d2>
  }
  LWIP_ASSERT("seg->tcphdr not aligned", ((mem_ptr_t)seg->tcphdr % LWIP_MIN(MEM_ALIGNMENT, 4)) == 0);
 800ed90:	68fb      	ldr	r3, [r7, #12]
 800ed92:	68db      	ldr	r3, [r3, #12]
 800ed94:	f003 0303 	and.w	r3, r3, #3
 800ed98:	2b00      	cmp	r3, #0
 800ed9a:	d006      	beq.n	800edaa <tcp_enqueue_flags+0x10a>
 800ed9c:	4b37      	ldr	r3, [pc, #220]	; (800ee7c <tcp_enqueue_flags+0x1dc>)
 800ed9e:	f240 4242 	movw	r2, #1090	; 0x442
 800eda2:	493c      	ldr	r1, [pc, #240]	; (800ee94 <tcp_enqueue_flags+0x1f4>)
 800eda4:	4837      	ldr	r0, [pc, #220]	; (800ee84 <tcp_enqueue_flags+0x1e4>)
 800eda6:	f004 fddf 	bl	8013968 <iprintf>
  LWIP_ASSERT("tcp_enqueue_flags: invalid segment length", seg->len == 0);
 800edaa:	68fb      	ldr	r3, [r7, #12]
 800edac:	891b      	ldrh	r3, [r3, #8]
 800edae:	2b00      	cmp	r3, #0
 800edb0:	d006      	beq.n	800edc0 <tcp_enqueue_flags+0x120>
 800edb2:	4b32      	ldr	r3, [pc, #200]	; (800ee7c <tcp_enqueue_flags+0x1dc>)
 800edb4:	f240 4243 	movw	r2, #1091	; 0x443
 800edb8:	4937      	ldr	r1, [pc, #220]	; (800ee98 <tcp_enqueue_flags+0x1f8>)
 800edba:	4832      	ldr	r0, [pc, #200]	; (800ee84 <tcp_enqueue_flags+0x1e4>)
 800edbc:	f004 fdd4 	bl	8013968 <iprintf>
               lwip_ntohl(seg->tcphdr->seqno),
               lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg),
               (u16_t)flags));

  /* Now append seg to pcb->unsent queue */
  if (pcb->unsent == NULL) {
 800edc0:	687b      	ldr	r3, [r7, #4]
 800edc2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800edc4:	2b00      	cmp	r3, #0
 800edc6:	d103      	bne.n	800edd0 <tcp_enqueue_flags+0x130>
    pcb->unsent = seg;
 800edc8:	687b      	ldr	r3, [r7, #4]
 800edca:	68fa      	ldr	r2, [r7, #12]
 800edcc:	66da      	str	r2, [r3, #108]	; 0x6c
 800edce:	e00d      	b.n	800edec <tcp_enqueue_flags+0x14c>
  } else {
    struct tcp_seg *useg;
    for (useg = pcb->unsent; useg->next != NULL; useg = useg->next);
 800edd0:	687b      	ldr	r3, [r7, #4]
 800edd2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800edd4:	61bb      	str	r3, [r7, #24]
 800edd6:	e002      	b.n	800edde <tcp_enqueue_flags+0x13e>
 800edd8:	69bb      	ldr	r3, [r7, #24]
 800edda:	681b      	ldr	r3, [r3, #0]
 800eddc:	61bb      	str	r3, [r7, #24]
 800edde:	69bb      	ldr	r3, [r7, #24]
 800ede0:	681b      	ldr	r3, [r3, #0]
 800ede2:	2b00      	cmp	r3, #0
 800ede4:	d1f8      	bne.n	800edd8 <tcp_enqueue_flags+0x138>
    useg->next = seg;
 800ede6:	69bb      	ldr	r3, [r7, #24]
 800ede8:	68fa      	ldr	r2, [r7, #12]
 800edea:	601a      	str	r2, [r3, #0]
  }
#if TCP_OVERSIZE
  /* The new unsent tail has no space */
  pcb->unsent_oversize = 0;
 800edec:	687b      	ldr	r3, [r7, #4]
 800edee:	2200      	movs	r2, #0
 800edf0:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* TCP_OVERSIZE */

  /* SYN and FIN bump the sequence number */
  if ((flags & TCP_SYN) || (flags & TCP_FIN)) {
 800edf4:	78fb      	ldrb	r3, [r7, #3]
 800edf6:	f003 0302 	and.w	r3, r3, #2
 800edfa:	2b00      	cmp	r3, #0
 800edfc:	d104      	bne.n	800ee08 <tcp_enqueue_flags+0x168>
 800edfe:	78fb      	ldrb	r3, [r7, #3]
 800ee00:	f003 0301 	and.w	r3, r3, #1
 800ee04:	2b00      	cmp	r3, #0
 800ee06:	d004      	beq.n	800ee12 <tcp_enqueue_flags+0x172>
    pcb->snd_lbb++;
 800ee08:	687b      	ldr	r3, [r7, #4]
 800ee0a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800ee0c:	1c5a      	adds	r2, r3, #1
 800ee0e:	687b      	ldr	r3, [r7, #4]
 800ee10:	65da      	str	r2, [r3, #92]	; 0x5c
    /* optlen does not influence snd_buf */
  }
  if (flags & TCP_FIN) {
 800ee12:	78fb      	ldrb	r3, [r7, #3]
 800ee14:	f003 0301 	and.w	r3, r3, #1
 800ee18:	2b00      	cmp	r3, #0
 800ee1a:	d006      	beq.n	800ee2a <tcp_enqueue_flags+0x18a>
    tcp_set_flags(pcb, TF_FIN);
 800ee1c:	687b      	ldr	r3, [r7, #4]
 800ee1e:	8b5b      	ldrh	r3, [r3, #26]
 800ee20:	f043 0320 	orr.w	r3, r3, #32
 800ee24:	b29a      	uxth	r2, r3
 800ee26:	687b      	ldr	r3, [r7, #4]
 800ee28:	835a      	strh	r2, [r3, #26]
  }

  /* update number of segments on the queues */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 800ee2a:	68fb      	ldr	r3, [r7, #12]
 800ee2c:	685b      	ldr	r3, [r3, #4]
 800ee2e:	4618      	mov	r0, r3
 800ee30:	f7fb fb76 	bl	800a520 <pbuf_clen>
 800ee34:	4603      	mov	r3, r0
 800ee36:	461a      	mov	r2, r3
 800ee38:	687b      	ldr	r3, [r7, #4]
 800ee3a:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800ee3e:	4413      	add	r3, r2
 800ee40:	b29a      	uxth	r2, r3
 800ee42:	687b      	ldr	r3, [r7, #4]
 800ee44:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: %"S16_F" (after enqueued)\n", pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 800ee48:	687b      	ldr	r3, [r7, #4]
 800ee4a:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800ee4e:	2b00      	cmp	r3, #0
 800ee50:	d00e      	beq.n	800ee70 <tcp_enqueue_flags+0x1d0>
    LWIP_ASSERT("tcp_enqueue_flags: invalid queue length",
 800ee52:	687b      	ldr	r3, [r7, #4]
 800ee54:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ee56:	2b00      	cmp	r3, #0
 800ee58:	d10a      	bne.n	800ee70 <tcp_enqueue_flags+0x1d0>
 800ee5a:	687b      	ldr	r3, [r7, #4]
 800ee5c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ee5e:	2b00      	cmp	r3, #0
 800ee60:	d106      	bne.n	800ee70 <tcp_enqueue_flags+0x1d0>
 800ee62:	4b06      	ldr	r3, [pc, #24]	; (800ee7c <tcp_enqueue_flags+0x1dc>)
 800ee64:	f240 4265 	movw	r2, #1125	; 0x465
 800ee68:	490c      	ldr	r1, [pc, #48]	; (800ee9c <tcp_enqueue_flags+0x1fc>)
 800ee6a:	4806      	ldr	r0, [pc, #24]	; (800ee84 <tcp_enqueue_flags+0x1e4>)
 800ee6c:	f004 fd7c 	bl	8013968 <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  return ERR_OK;
 800ee70:	2300      	movs	r3, #0
}
 800ee72:	4618      	mov	r0, r3
 800ee74:	3720      	adds	r7, #32
 800ee76:	46bd      	mov	sp, r7
 800ee78:	bd80      	pop	{r7, pc}
 800ee7a:	bf00      	nop
 800ee7c:	08016028 	.word	0x08016028
 800ee80:	0801644c 	.word	0x0801644c
 800ee84:	0801607c 	.word	0x0801607c
 800ee88:	080164a4 	.word	0x080164a4
 800ee8c:	2000c64c 	.word	0x2000c64c
 800ee90:	080164c4 	.word	0x080164c4
 800ee94:	08016500 	.word	0x08016500
 800ee98:	08016518 	.word	0x08016518
 800ee9c:	08016544 	.word	0x08016544

0800eea0 <tcp_output>:
 * @return ERR_OK if data has been sent or nothing to send
 *         another err_t on error
 */
err_t
tcp_output(struct tcp_pcb *pcb)
{
 800eea0:	b5b0      	push	{r4, r5, r7, lr}
 800eea2:	b08a      	sub	sp, #40	; 0x28
 800eea4:	af00      	add	r7, sp, #0
 800eea6:	6078      	str	r0, [r7, #4]
  s16_t i = 0;
#endif /* TCP_CWND_DEBUG */

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("tcp_output: invalid pcb", pcb != NULL);
 800eea8:	687b      	ldr	r3, [r7, #4]
 800eeaa:	2b00      	cmp	r3, #0
 800eeac:	d106      	bne.n	800eebc <tcp_output+0x1c>
 800eeae:	4b8a      	ldr	r3, [pc, #552]	; (800f0d8 <tcp_output+0x238>)
 800eeb0:	f240 42e1 	movw	r2, #1249	; 0x4e1
 800eeb4:	4989      	ldr	r1, [pc, #548]	; (800f0dc <tcp_output+0x23c>)
 800eeb6:	488a      	ldr	r0, [pc, #552]	; (800f0e0 <tcp_output+0x240>)
 800eeb8:	f004 fd56 	bl	8013968 <iprintf>
  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_output for listen-pcbs",
 800eebc:	687b      	ldr	r3, [r7, #4]
 800eebe:	7d1b      	ldrb	r3, [r3, #20]
 800eec0:	2b01      	cmp	r3, #1
 800eec2:	d106      	bne.n	800eed2 <tcp_output+0x32>
 800eec4:	4b84      	ldr	r3, [pc, #528]	; (800f0d8 <tcp_output+0x238>)
 800eec6:	f240 42e3 	movw	r2, #1251	; 0x4e3
 800eeca:	4986      	ldr	r1, [pc, #536]	; (800f0e4 <tcp_output+0x244>)
 800eecc:	4884      	ldr	r0, [pc, #528]	; (800f0e0 <tcp_output+0x240>)
 800eece:	f004 fd4b 	bl	8013968 <iprintf>

  /* First, check if we are invoked by the TCP input processing
     code. If so, we do not output anything. Instead, we rely on the
     input processing code to call us when input processing is done
     with. */
  if (tcp_input_pcb == pcb) {
 800eed2:	4b85      	ldr	r3, [pc, #532]	; (800f0e8 <tcp_output+0x248>)
 800eed4:	681b      	ldr	r3, [r3, #0]
 800eed6:	687a      	ldr	r2, [r7, #4]
 800eed8:	429a      	cmp	r2, r3
 800eeda:	d101      	bne.n	800eee0 <tcp_output+0x40>
    return ERR_OK;
 800eedc:	2300      	movs	r3, #0
 800eede:	e1ce      	b.n	800f27e <tcp_output+0x3de>
  }

  wnd = LWIP_MIN(pcb->snd_wnd, pcb->cwnd);
 800eee0:	687b      	ldr	r3, [r7, #4]
 800eee2:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800eee6:	687b      	ldr	r3, [r7, #4]
 800eee8:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800eeec:	4293      	cmp	r3, r2
 800eeee:	bf28      	it	cs
 800eef0:	4613      	movcs	r3, r2
 800eef2:	b29b      	uxth	r3, r3
 800eef4:	61bb      	str	r3, [r7, #24]

  seg = pcb->unsent;
 800eef6:	687b      	ldr	r3, [r7, #4]
 800eef8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800eefa:	627b      	str	r3, [r7, #36]	; 0x24

  if (seg == NULL) {
 800eefc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800eefe:	2b00      	cmp	r3, #0
 800ef00:	d10b      	bne.n	800ef1a <tcp_output+0x7a>
                                 ", seg == NULL, ack %"U32_F"\n",
                                 pcb->snd_wnd, pcb->cwnd, wnd, pcb->lastack));

    /* If the TF_ACK_NOW flag is set and the ->unsent queue is empty, construct
     * an empty ACK segment and send it. */
    if (pcb->flags & TF_ACK_NOW) {
 800ef02:	687b      	ldr	r3, [r7, #4]
 800ef04:	8b5b      	ldrh	r3, [r3, #26]
 800ef06:	f003 0302 	and.w	r3, r3, #2
 800ef0a:	2b00      	cmp	r3, #0
 800ef0c:	f000 81aa 	beq.w	800f264 <tcp_output+0x3c4>
      return tcp_send_empty_ack(pcb);
 800ef10:	6878      	ldr	r0, [r7, #4]
 800ef12:	f000 fddf 	bl	800fad4 <tcp_send_empty_ack>
 800ef16:	4603      	mov	r3, r0
 800ef18:	e1b1      	b.n	800f27e <tcp_output+0x3de>
                 pcb->snd_wnd, pcb->cwnd, wnd,
                 lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len,
                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack));
  }

  netif = tcp_route(pcb, &pcb->local_ip, &pcb->remote_ip);
 800ef1a:	6879      	ldr	r1, [r7, #4]
 800ef1c:	687b      	ldr	r3, [r7, #4]
 800ef1e:	3304      	adds	r3, #4
 800ef20:	461a      	mov	r2, r3
 800ef22:	6878      	ldr	r0, [r7, #4]
 800ef24:	f7ff fc56 	bl	800e7d4 <tcp_route>
 800ef28:	6178      	str	r0, [r7, #20]
  if (netif == NULL) {
 800ef2a:	697b      	ldr	r3, [r7, #20]
 800ef2c:	2b00      	cmp	r3, #0
 800ef2e:	d102      	bne.n	800ef36 <tcp_output+0x96>
    return ERR_RTE;
 800ef30:	f06f 0303 	mvn.w	r3, #3
 800ef34:	e1a3      	b.n	800f27e <tcp_output+0x3de>
  }

  /* If we don't have a local IP address, we get one from netif */
  if (ip_addr_isany(&pcb->local_ip)) {
 800ef36:	687b      	ldr	r3, [r7, #4]
 800ef38:	2b00      	cmp	r3, #0
 800ef3a:	d003      	beq.n	800ef44 <tcp_output+0xa4>
 800ef3c:	687b      	ldr	r3, [r7, #4]
 800ef3e:	681b      	ldr	r3, [r3, #0]
 800ef40:	2b00      	cmp	r3, #0
 800ef42:	d111      	bne.n	800ef68 <tcp_output+0xc8>
    const ip_addr_t *local_ip = ip_netif_get_local_ip(netif, &pcb->remote_ip);
 800ef44:	697b      	ldr	r3, [r7, #20]
 800ef46:	2b00      	cmp	r3, #0
 800ef48:	d002      	beq.n	800ef50 <tcp_output+0xb0>
 800ef4a:	697b      	ldr	r3, [r7, #20]
 800ef4c:	3304      	adds	r3, #4
 800ef4e:	e000      	b.n	800ef52 <tcp_output+0xb2>
 800ef50:	2300      	movs	r3, #0
 800ef52:	613b      	str	r3, [r7, #16]
    if (local_ip == NULL) {
 800ef54:	693b      	ldr	r3, [r7, #16]
 800ef56:	2b00      	cmp	r3, #0
 800ef58:	d102      	bne.n	800ef60 <tcp_output+0xc0>
      return ERR_RTE;
 800ef5a:	f06f 0303 	mvn.w	r3, #3
 800ef5e:	e18e      	b.n	800f27e <tcp_output+0x3de>
    }
    ip_addr_copy(pcb->local_ip, *local_ip);
 800ef60:	693b      	ldr	r3, [r7, #16]
 800ef62:	681a      	ldr	r2, [r3, #0]
 800ef64:	687b      	ldr	r3, [r7, #4]
 800ef66:	601a      	str	r2, [r3, #0]
  }

  /* Handle the current segment not fitting within the window */
  if (lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd) {
 800ef68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ef6a:	68db      	ldr	r3, [r3, #12]
 800ef6c:	685b      	ldr	r3, [r3, #4]
 800ef6e:	4618      	mov	r0, r3
 800ef70:	f7f9 fd9b 	bl	8008aaa <lwip_htonl>
 800ef74:	4602      	mov	r2, r0
 800ef76:	687b      	ldr	r3, [r7, #4]
 800ef78:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ef7a:	1ad3      	subs	r3, r2, r3
 800ef7c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ef7e:	8912      	ldrh	r2, [r2, #8]
 800ef80:	4413      	add	r3, r2
 800ef82:	69ba      	ldr	r2, [r7, #24]
 800ef84:	429a      	cmp	r2, r3
 800ef86:	d227      	bcs.n	800efd8 <tcp_output+0x138>
     * within the remaining (could be 0) send window and RTO timer is not running (we
     * have no in-flight data). If window is still too small after persist timer fires,
     * then we split the segment. We don't consider the congestion window since a cwnd
     * smaller than 1 SMSS implies in-flight data
     */
    if (wnd == pcb->snd_wnd && pcb->unacked == NULL && pcb->persist_backoff == 0) {
 800ef88:	687b      	ldr	r3, [r7, #4]
 800ef8a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800ef8e:	461a      	mov	r2, r3
 800ef90:	69bb      	ldr	r3, [r7, #24]
 800ef92:	4293      	cmp	r3, r2
 800ef94:	d114      	bne.n	800efc0 <tcp_output+0x120>
 800ef96:	687b      	ldr	r3, [r7, #4]
 800ef98:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ef9a:	2b00      	cmp	r3, #0
 800ef9c:	d110      	bne.n	800efc0 <tcp_output+0x120>
 800ef9e:	687b      	ldr	r3, [r7, #4]
 800efa0:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800efa4:	2b00      	cmp	r3, #0
 800efa6:	d10b      	bne.n	800efc0 <tcp_output+0x120>
      pcb->persist_cnt = 0;
 800efa8:	687b      	ldr	r3, [r7, #4]
 800efaa:	2200      	movs	r2, #0
 800efac:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
      pcb->persist_backoff = 1;
 800efb0:	687b      	ldr	r3, [r7, #4]
 800efb2:	2201      	movs	r2, #1
 800efb4:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
      pcb->persist_probe = 0;
 800efb8:	687b      	ldr	r3, [r7, #4]
 800efba:	2200      	movs	r2, #0
 800efbc:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
    }
    /* We need an ACK, but can't send data now, so send an empty ACK */
    if (pcb->flags & TF_ACK_NOW) {
 800efc0:	687b      	ldr	r3, [r7, #4]
 800efc2:	8b5b      	ldrh	r3, [r3, #26]
 800efc4:	f003 0302 	and.w	r3, r3, #2
 800efc8:	2b00      	cmp	r3, #0
 800efca:	f000 814d 	beq.w	800f268 <tcp_output+0x3c8>
      return tcp_send_empty_ack(pcb);
 800efce:	6878      	ldr	r0, [r7, #4]
 800efd0:	f000 fd80 	bl	800fad4 <tcp_send_empty_ack>
 800efd4:	4603      	mov	r3, r0
 800efd6:	e152      	b.n	800f27e <tcp_output+0x3de>
    }
    goto output_done;
  }
  /* Stop persist timer, above conditions are not active */
  pcb->persist_backoff = 0;
 800efd8:	687b      	ldr	r3, [r7, #4]
 800efda:	2200      	movs	r2, #0
 800efdc:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99

  /* useg should point to last segment on unacked queue */
  useg = pcb->unacked;
 800efe0:	687b      	ldr	r3, [r7, #4]
 800efe2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800efe4:	623b      	str	r3, [r7, #32]
  if (useg != NULL) {
 800efe6:	6a3b      	ldr	r3, [r7, #32]
 800efe8:	2b00      	cmp	r3, #0
 800efea:	f000 811c 	beq.w	800f226 <tcp_output+0x386>
    for (; useg->next != NULL; useg = useg->next);
 800efee:	e002      	b.n	800eff6 <tcp_output+0x156>
 800eff0:	6a3b      	ldr	r3, [r7, #32]
 800eff2:	681b      	ldr	r3, [r3, #0]
 800eff4:	623b      	str	r3, [r7, #32]
 800eff6:	6a3b      	ldr	r3, [r7, #32]
 800eff8:	681b      	ldr	r3, [r3, #0]
 800effa:	2b00      	cmp	r3, #0
 800effc:	d1f8      	bne.n	800eff0 <tcp_output+0x150>
  }
  /* data available and window allows it to be sent? */
  while (seg != NULL &&
 800effe:	e112      	b.n	800f226 <tcp_output+0x386>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
    LWIP_ASSERT("RST not expected here!",
 800f000:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f002:	68db      	ldr	r3, [r3, #12]
 800f004:	899b      	ldrh	r3, [r3, #12]
 800f006:	b29b      	uxth	r3, r3
 800f008:	4618      	mov	r0, r3
 800f00a:	f7f9 fd39 	bl	8008a80 <lwip_htons>
 800f00e:	4603      	mov	r3, r0
 800f010:	b2db      	uxtb	r3, r3
 800f012:	f003 0304 	and.w	r3, r3, #4
 800f016:	2b00      	cmp	r3, #0
 800f018:	d006      	beq.n	800f028 <tcp_output+0x188>
 800f01a:	4b2f      	ldr	r3, [pc, #188]	; (800f0d8 <tcp_output+0x238>)
 800f01c:	f240 5236 	movw	r2, #1334	; 0x536
 800f020:	4932      	ldr	r1, [pc, #200]	; (800f0ec <tcp_output+0x24c>)
 800f022:	482f      	ldr	r0, [pc, #188]	; (800f0e0 <tcp_output+0x240>)
 800f024:	f004 fca0 	bl	8013968 <iprintf>
     * - if tcp_write had a memory error before (prevent delayed ACK timeout) or
     * - if FIN was already enqueued for this PCB (SYN is always alone in a segment -
     *   either seg->next != NULL or pcb->unacked == NULL;
     *   RST is no sent using tcp_write/tcp_output.
     */
    if ((tcp_do_output_nagle(pcb) == 0) &&
 800f028:	687b      	ldr	r3, [r7, #4]
 800f02a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f02c:	2b00      	cmp	r3, #0
 800f02e:	d01f      	beq.n	800f070 <tcp_output+0x1d0>
 800f030:	687b      	ldr	r3, [r7, #4]
 800f032:	8b5b      	ldrh	r3, [r3, #26]
 800f034:	f003 0344 	and.w	r3, r3, #68	; 0x44
 800f038:	2b00      	cmp	r3, #0
 800f03a:	d119      	bne.n	800f070 <tcp_output+0x1d0>
 800f03c:	687b      	ldr	r3, [r7, #4]
 800f03e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f040:	2b00      	cmp	r3, #0
 800f042:	d00b      	beq.n	800f05c <tcp_output+0x1bc>
 800f044:	687b      	ldr	r3, [r7, #4]
 800f046:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f048:	681b      	ldr	r3, [r3, #0]
 800f04a:	2b00      	cmp	r3, #0
 800f04c:	d110      	bne.n	800f070 <tcp_output+0x1d0>
 800f04e:	687b      	ldr	r3, [r7, #4]
 800f050:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f052:	891a      	ldrh	r2, [r3, #8]
 800f054:	687b      	ldr	r3, [r7, #4]
 800f056:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800f058:	429a      	cmp	r2, r3
 800f05a:	d209      	bcs.n	800f070 <tcp_output+0x1d0>
 800f05c:	687b      	ldr	r3, [r7, #4]
 800f05e:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 800f062:	2b00      	cmp	r3, #0
 800f064:	d004      	beq.n	800f070 <tcp_output+0x1d0>
 800f066:	687b      	ldr	r3, [r7, #4]
 800f068:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800f06c:	2b08      	cmp	r3, #8
 800f06e:	d901      	bls.n	800f074 <tcp_output+0x1d4>
 800f070:	2301      	movs	r3, #1
 800f072:	e000      	b.n	800f076 <tcp_output+0x1d6>
 800f074:	2300      	movs	r3, #0
 800f076:	2b00      	cmp	r3, #0
 800f078:	d106      	bne.n	800f088 <tcp_output+0x1e8>
        ((pcb->flags & (TF_NAGLEMEMERR | TF_FIN)) == 0)) {
 800f07a:	687b      	ldr	r3, [r7, #4]
 800f07c:	8b5b      	ldrh	r3, [r3, #26]
 800f07e:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
    if ((tcp_do_output_nagle(pcb) == 0) &&
 800f082:	2b00      	cmp	r3, #0
 800f084:	f000 80e4 	beq.w	800f250 <tcp_output+0x3b0>
                                 pcb->lastack,
                                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack, i));
    ++i;
#endif /* TCP_CWND_DEBUG */

    if (pcb->state != SYN_SENT) {
 800f088:	687b      	ldr	r3, [r7, #4]
 800f08a:	7d1b      	ldrb	r3, [r3, #20]
 800f08c:	2b02      	cmp	r3, #2
 800f08e:	d00d      	beq.n	800f0ac <tcp_output+0x20c>
      TCPH_SET_FLAG(seg->tcphdr, TCP_ACK);
 800f090:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f092:	68db      	ldr	r3, [r3, #12]
 800f094:	899b      	ldrh	r3, [r3, #12]
 800f096:	b29c      	uxth	r4, r3
 800f098:	2010      	movs	r0, #16
 800f09a:	f7f9 fcf1 	bl	8008a80 <lwip_htons>
 800f09e:	4603      	mov	r3, r0
 800f0a0:	461a      	mov	r2, r3
 800f0a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f0a4:	68db      	ldr	r3, [r3, #12]
 800f0a6:	4322      	orrs	r2, r4
 800f0a8:	b292      	uxth	r2, r2
 800f0aa:	819a      	strh	r2, [r3, #12]
    }

    err = tcp_output_segment(seg, pcb, netif);
 800f0ac:	697a      	ldr	r2, [r7, #20]
 800f0ae:	6879      	ldr	r1, [r7, #4]
 800f0b0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800f0b2:	f000 f909 	bl	800f2c8 <tcp_output_segment>
 800f0b6:	4603      	mov	r3, r0
 800f0b8:	73fb      	strb	r3, [r7, #15]
    if (err != ERR_OK) {
 800f0ba:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800f0be:	2b00      	cmp	r3, #0
 800f0c0:	d016      	beq.n	800f0f0 <tcp_output+0x250>
      /* segment could not be sent, for whatever reason */
      tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800f0c2:	687b      	ldr	r3, [r7, #4]
 800f0c4:	8b5b      	ldrh	r3, [r3, #26]
 800f0c6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800f0ca:	b29a      	uxth	r2, r3
 800f0cc:	687b      	ldr	r3, [r7, #4]
 800f0ce:	835a      	strh	r2, [r3, #26]
      return err;
 800f0d0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800f0d4:	e0d3      	b.n	800f27e <tcp_output+0x3de>
 800f0d6:	bf00      	nop
 800f0d8:	08016028 	.word	0x08016028
 800f0dc:	0801656c 	.word	0x0801656c
 800f0e0:	0801607c 	.word	0x0801607c
 800f0e4:	08016584 	.word	0x08016584
 800f0e8:	2000c794 	.word	0x2000c794
 800f0ec:	080165ac 	.word	0x080165ac
    }
#if TCP_OVERSIZE_DBGCHECK
    seg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */
    pcb->unsent = seg->next;
 800f0f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f0f2:	681a      	ldr	r2, [r3, #0]
 800f0f4:	687b      	ldr	r3, [r7, #4]
 800f0f6:	66da      	str	r2, [r3, #108]	; 0x6c
    if (pcb->state != SYN_SENT) {
 800f0f8:	687b      	ldr	r3, [r7, #4]
 800f0fa:	7d1b      	ldrb	r3, [r3, #20]
 800f0fc:	2b02      	cmp	r3, #2
 800f0fe:	d006      	beq.n	800f10e <tcp_output+0x26e>
      tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800f100:	687b      	ldr	r3, [r7, #4]
 800f102:	8b5b      	ldrh	r3, [r3, #26]
 800f104:	f023 0303 	bic.w	r3, r3, #3
 800f108:	b29a      	uxth	r2, r3
 800f10a:	687b      	ldr	r3, [r7, #4]
 800f10c:	835a      	strh	r2, [r3, #26]
    }
    snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 800f10e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f110:	68db      	ldr	r3, [r3, #12]
 800f112:	685b      	ldr	r3, [r3, #4]
 800f114:	4618      	mov	r0, r3
 800f116:	f7f9 fcc8 	bl	8008aaa <lwip_htonl>
 800f11a:	4604      	mov	r4, r0
 800f11c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f11e:	891b      	ldrh	r3, [r3, #8]
 800f120:	461d      	mov	r5, r3
 800f122:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f124:	68db      	ldr	r3, [r3, #12]
 800f126:	899b      	ldrh	r3, [r3, #12]
 800f128:	b29b      	uxth	r3, r3
 800f12a:	4618      	mov	r0, r3
 800f12c:	f7f9 fca8 	bl	8008a80 <lwip_htons>
 800f130:	4603      	mov	r3, r0
 800f132:	b2db      	uxtb	r3, r3
 800f134:	f003 0303 	and.w	r3, r3, #3
 800f138:	2b00      	cmp	r3, #0
 800f13a:	d001      	beq.n	800f140 <tcp_output+0x2a0>
 800f13c:	2301      	movs	r3, #1
 800f13e:	e000      	b.n	800f142 <tcp_output+0x2a2>
 800f140:	2300      	movs	r3, #0
 800f142:	442b      	add	r3, r5
 800f144:	4423      	add	r3, r4
 800f146:	60bb      	str	r3, [r7, #8]
    if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 800f148:	687b      	ldr	r3, [r7, #4]
 800f14a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800f14c:	68bb      	ldr	r3, [r7, #8]
 800f14e:	1ad3      	subs	r3, r2, r3
 800f150:	2b00      	cmp	r3, #0
 800f152:	da02      	bge.n	800f15a <tcp_output+0x2ba>
      pcb->snd_nxt = snd_nxt;
 800f154:	687b      	ldr	r3, [r7, #4]
 800f156:	68ba      	ldr	r2, [r7, #8]
 800f158:	651a      	str	r2, [r3, #80]	; 0x50
    }
    /* put segment on unacknowledged list if length > 0 */
    if (TCP_TCPLEN(seg) > 0) {
 800f15a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f15c:	891b      	ldrh	r3, [r3, #8]
 800f15e:	461c      	mov	r4, r3
 800f160:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f162:	68db      	ldr	r3, [r3, #12]
 800f164:	899b      	ldrh	r3, [r3, #12]
 800f166:	b29b      	uxth	r3, r3
 800f168:	4618      	mov	r0, r3
 800f16a:	f7f9 fc89 	bl	8008a80 <lwip_htons>
 800f16e:	4603      	mov	r3, r0
 800f170:	b2db      	uxtb	r3, r3
 800f172:	f003 0303 	and.w	r3, r3, #3
 800f176:	2b00      	cmp	r3, #0
 800f178:	d001      	beq.n	800f17e <tcp_output+0x2de>
 800f17a:	2301      	movs	r3, #1
 800f17c:	e000      	b.n	800f180 <tcp_output+0x2e0>
 800f17e:	2300      	movs	r3, #0
 800f180:	4423      	add	r3, r4
 800f182:	2b00      	cmp	r3, #0
 800f184:	d049      	beq.n	800f21a <tcp_output+0x37a>
      seg->next = NULL;
 800f186:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f188:	2200      	movs	r2, #0
 800f18a:	601a      	str	r2, [r3, #0]
      /* unacked list is empty? */
      if (pcb->unacked == NULL) {
 800f18c:	687b      	ldr	r3, [r7, #4]
 800f18e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f190:	2b00      	cmp	r3, #0
 800f192:	d105      	bne.n	800f1a0 <tcp_output+0x300>
        pcb->unacked = seg;
 800f194:	687b      	ldr	r3, [r7, #4]
 800f196:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f198:	671a      	str	r2, [r3, #112]	; 0x70
        useg = seg;
 800f19a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f19c:	623b      	str	r3, [r7, #32]
 800f19e:	e03f      	b.n	800f220 <tcp_output+0x380>
        /* unacked list is not empty? */
      } else {
        /* In the case of fast retransmit, the packet should not go to the tail
         * of the unacked queue, but rather somewhere before it. We need to check for
         * this case. -STJ Jul 27, 2004 */
        if (TCP_SEQ_LT(lwip_ntohl(seg->tcphdr->seqno), lwip_ntohl(useg->tcphdr->seqno))) {
 800f1a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f1a2:	68db      	ldr	r3, [r3, #12]
 800f1a4:	685b      	ldr	r3, [r3, #4]
 800f1a6:	4618      	mov	r0, r3
 800f1a8:	f7f9 fc7f 	bl	8008aaa <lwip_htonl>
 800f1ac:	4604      	mov	r4, r0
 800f1ae:	6a3b      	ldr	r3, [r7, #32]
 800f1b0:	68db      	ldr	r3, [r3, #12]
 800f1b2:	685b      	ldr	r3, [r3, #4]
 800f1b4:	4618      	mov	r0, r3
 800f1b6:	f7f9 fc78 	bl	8008aaa <lwip_htonl>
 800f1ba:	4603      	mov	r3, r0
 800f1bc:	1ae3      	subs	r3, r4, r3
 800f1be:	2b00      	cmp	r3, #0
 800f1c0:	da24      	bge.n	800f20c <tcp_output+0x36c>
          /* add segment to before tail of unacked list, keeping the list sorted */
          struct tcp_seg **cur_seg = &(pcb->unacked);
 800f1c2:	687b      	ldr	r3, [r7, #4]
 800f1c4:	3370      	adds	r3, #112	; 0x70
 800f1c6:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 800f1c8:	e002      	b.n	800f1d0 <tcp_output+0x330>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
            cur_seg = &((*cur_seg)->next );
 800f1ca:	69fb      	ldr	r3, [r7, #28]
 800f1cc:	681b      	ldr	r3, [r3, #0]
 800f1ce:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 800f1d0:	69fb      	ldr	r3, [r7, #28]
 800f1d2:	681b      	ldr	r3, [r3, #0]
 800f1d4:	2b00      	cmp	r3, #0
 800f1d6:	d011      	beq.n	800f1fc <tcp_output+0x35c>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 800f1d8:	69fb      	ldr	r3, [r7, #28]
 800f1da:	681b      	ldr	r3, [r3, #0]
 800f1dc:	68db      	ldr	r3, [r3, #12]
 800f1de:	685b      	ldr	r3, [r3, #4]
 800f1e0:	4618      	mov	r0, r3
 800f1e2:	f7f9 fc62 	bl	8008aaa <lwip_htonl>
 800f1e6:	4604      	mov	r4, r0
 800f1e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f1ea:	68db      	ldr	r3, [r3, #12]
 800f1ec:	685b      	ldr	r3, [r3, #4]
 800f1ee:	4618      	mov	r0, r3
 800f1f0:	f7f9 fc5b 	bl	8008aaa <lwip_htonl>
 800f1f4:	4603      	mov	r3, r0
 800f1f6:	1ae3      	subs	r3, r4, r3
          while (*cur_seg &&
 800f1f8:	2b00      	cmp	r3, #0
 800f1fa:	dbe6      	blt.n	800f1ca <tcp_output+0x32a>
          }
          seg->next = (*cur_seg);
 800f1fc:	69fb      	ldr	r3, [r7, #28]
 800f1fe:	681a      	ldr	r2, [r3, #0]
 800f200:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f202:	601a      	str	r2, [r3, #0]
          (*cur_seg) = seg;
 800f204:	69fb      	ldr	r3, [r7, #28]
 800f206:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f208:	601a      	str	r2, [r3, #0]
 800f20a:	e009      	b.n	800f220 <tcp_output+0x380>
        } else {
          /* add segment to tail of unacked list */
          useg->next = seg;
 800f20c:	6a3b      	ldr	r3, [r7, #32]
 800f20e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f210:	601a      	str	r2, [r3, #0]
          useg = useg->next;
 800f212:	6a3b      	ldr	r3, [r7, #32]
 800f214:	681b      	ldr	r3, [r3, #0]
 800f216:	623b      	str	r3, [r7, #32]
 800f218:	e002      	b.n	800f220 <tcp_output+0x380>
        }
      }
      /* do not queue empty segments on the unacked list */
    } else {
      tcp_seg_free(seg);
 800f21a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800f21c:	f7fc fb89 	bl	800b932 <tcp_seg_free>
    }
    seg = pcb->unsent;
 800f220:	687b      	ldr	r3, [r7, #4]
 800f222:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f224:	627b      	str	r3, [r7, #36]	; 0x24
  while (seg != NULL &&
 800f226:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f228:	2b00      	cmp	r3, #0
 800f22a:	d012      	beq.n	800f252 <tcp_output+0x3b2>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
 800f22c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f22e:	68db      	ldr	r3, [r3, #12]
 800f230:	685b      	ldr	r3, [r3, #4]
 800f232:	4618      	mov	r0, r3
 800f234:	f7f9 fc39 	bl	8008aaa <lwip_htonl>
 800f238:	4602      	mov	r2, r0
 800f23a:	687b      	ldr	r3, [r7, #4]
 800f23c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800f23e:	1ad3      	subs	r3, r2, r3
 800f240:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f242:	8912      	ldrh	r2, [r2, #8]
 800f244:	4413      	add	r3, r2
  while (seg != NULL &&
 800f246:	69ba      	ldr	r2, [r7, #24]
 800f248:	429a      	cmp	r2, r3
 800f24a:	f4bf aed9 	bcs.w	800f000 <tcp_output+0x160>
 800f24e:	e000      	b.n	800f252 <tcp_output+0x3b2>
      break;
 800f250:	bf00      	nop
  }
#if TCP_OVERSIZE
  if (pcb->unsent == NULL) {
 800f252:	687b      	ldr	r3, [r7, #4]
 800f254:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f256:	2b00      	cmp	r3, #0
 800f258:	d108      	bne.n	800f26c <tcp_output+0x3cc>
    /* last unsent has been removed, reset unsent_oversize */
    pcb->unsent_oversize = 0;
 800f25a:	687b      	ldr	r3, [r7, #4]
 800f25c:	2200      	movs	r2, #0
 800f25e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
 800f262:	e004      	b.n	800f26e <tcp_output+0x3ce>
    goto output_done;
 800f264:	bf00      	nop
 800f266:	e002      	b.n	800f26e <tcp_output+0x3ce>
    goto output_done;
 800f268:	bf00      	nop
 800f26a:	e000      	b.n	800f26e <tcp_output+0x3ce>
  }
#endif /* TCP_OVERSIZE */

output_done:
 800f26c:	bf00      	nop
  tcp_clear_flags(pcb, TF_NAGLEMEMERR);
 800f26e:	687b      	ldr	r3, [r7, #4]
 800f270:	8b5b      	ldrh	r3, [r3, #26]
 800f272:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800f276:	b29a      	uxth	r2, r3
 800f278:	687b      	ldr	r3, [r7, #4]
 800f27a:	835a      	strh	r2, [r3, #26]
  return ERR_OK;
 800f27c:	2300      	movs	r3, #0
}
 800f27e:	4618      	mov	r0, r3
 800f280:	3728      	adds	r7, #40	; 0x28
 800f282:	46bd      	mov	sp, r7
 800f284:	bdb0      	pop	{r4, r5, r7, pc}
 800f286:	bf00      	nop

0800f288 <tcp_output_segment_busy>:
 * @arg seg the tcp segment to check
 * @return 1 if ref != 1, 0 if ref == 1
 */
static int
tcp_output_segment_busy(const struct tcp_seg *seg)
{
 800f288:	b580      	push	{r7, lr}
 800f28a:	b082      	sub	sp, #8
 800f28c:	af00      	add	r7, sp, #0
 800f28e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_output_segment_busy: invalid seg", seg != NULL);
 800f290:	687b      	ldr	r3, [r7, #4]
 800f292:	2b00      	cmp	r3, #0
 800f294:	d106      	bne.n	800f2a4 <tcp_output_segment_busy+0x1c>
 800f296:	4b09      	ldr	r3, [pc, #36]	; (800f2bc <tcp_output_segment_busy+0x34>)
 800f298:	f240 529a 	movw	r2, #1434	; 0x59a
 800f29c:	4908      	ldr	r1, [pc, #32]	; (800f2c0 <tcp_output_segment_busy+0x38>)
 800f29e:	4809      	ldr	r0, [pc, #36]	; (800f2c4 <tcp_output_segment_busy+0x3c>)
 800f2a0:	f004 fb62 	bl	8013968 <iprintf>

  /* We only need to check the first pbuf here:
     If a pbuf is queued for transmission, a driver calls pbuf_ref(),
     which only changes the ref count of the first pbuf */
  if (seg->p->ref != 1) {
 800f2a4:	687b      	ldr	r3, [r7, #4]
 800f2a6:	685b      	ldr	r3, [r3, #4]
 800f2a8:	7b9b      	ldrb	r3, [r3, #14]
 800f2aa:	2b01      	cmp	r3, #1
 800f2ac:	d001      	beq.n	800f2b2 <tcp_output_segment_busy+0x2a>
    /* other reference found */
    return 1;
 800f2ae:	2301      	movs	r3, #1
 800f2b0:	e000      	b.n	800f2b4 <tcp_output_segment_busy+0x2c>
  }
  /* no other references found */
  return 0;
 800f2b2:	2300      	movs	r3, #0
}
 800f2b4:	4618      	mov	r0, r3
 800f2b6:	3708      	adds	r7, #8
 800f2b8:	46bd      	mov	sp, r7
 800f2ba:	bd80      	pop	{r7, pc}
 800f2bc:	08016028 	.word	0x08016028
 800f2c0:	080165c4 	.word	0x080165c4
 800f2c4:	0801607c 	.word	0x0801607c

0800f2c8 <tcp_output_segment>:
 * @param pcb the tcp_pcb for the TCP connection used to send the segment
 * @param netif the netif used to send the segment
 */
static err_t
tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif)
{
 800f2c8:	b5b0      	push	{r4, r5, r7, lr}
 800f2ca:	b08c      	sub	sp, #48	; 0x30
 800f2cc:	af04      	add	r7, sp, #16
 800f2ce:	60f8      	str	r0, [r7, #12]
 800f2d0:	60b9      	str	r1, [r7, #8]
 800f2d2:	607a      	str	r2, [r7, #4]
  u32_t *opts;
#if TCP_CHECKSUM_ON_COPY
  int seg_chksum_was_swapped = 0;
#endif

  LWIP_ASSERT("tcp_output_segment: invalid seg", seg != NULL);
 800f2d4:	68fb      	ldr	r3, [r7, #12]
 800f2d6:	2b00      	cmp	r3, #0
 800f2d8:	d106      	bne.n	800f2e8 <tcp_output_segment+0x20>
 800f2da:	4b67      	ldr	r3, [pc, #412]	; (800f478 <tcp_output_segment+0x1b0>)
 800f2dc:	f44f 62b7 	mov.w	r2, #1464	; 0x5b8
 800f2e0:	4966      	ldr	r1, [pc, #408]	; (800f47c <tcp_output_segment+0x1b4>)
 800f2e2:	4867      	ldr	r0, [pc, #412]	; (800f480 <tcp_output_segment+0x1b8>)
 800f2e4:	f004 fb40 	bl	8013968 <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid pcb", pcb != NULL);
 800f2e8:	68bb      	ldr	r3, [r7, #8]
 800f2ea:	2b00      	cmp	r3, #0
 800f2ec:	d106      	bne.n	800f2fc <tcp_output_segment+0x34>
 800f2ee:	4b62      	ldr	r3, [pc, #392]	; (800f478 <tcp_output_segment+0x1b0>)
 800f2f0:	f240 52b9 	movw	r2, #1465	; 0x5b9
 800f2f4:	4963      	ldr	r1, [pc, #396]	; (800f484 <tcp_output_segment+0x1bc>)
 800f2f6:	4862      	ldr	r0, [pc, #392]	; (800f480 <tcp_output_segment+0x1b8>)
 800f2f8:	f004 fb36 	bl	8013968 <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid netif", netif != NULL);
 800f2fc:	687b      	ldr	r3, [r7, #4]
 800f2fe:	2b00      	cmp	r3, #0
 800f300:	d106      	bne.n	800f310 <tcp_output_segment+0x48>
 800f302:	4b5d      	ldr	r3, [pc, #372]	; (800f478 <tcp_output_segment+0x1b0>)
 800f304:	f240 52ba 	movw	r2, #1466	; 0x5ba
 800f308:	495f      	ldr	r1, [pc, #380]	; (800f488 <tcp_output_segment+0x1c0>)
 800f30a:	485d      	ldr	r0, [pc, #372]	; (800f480 <tcp_output_segment+0x1b8>)
 800f30c:	f004 fb2c 	bl	8013968 <iprintf>

  if (tcp_output_segment_busy(seg)) {
 800f310:	68f8      	ldr	r0, [r7, #12]
 800f312:	f7ff ffb9 	bl	800f288 <tcp_output_segment_busy>
 800f316:	4603      	mov	r3, r0
 800f318:	2b00      	cmp	r3, #0
 800f31a:	d001      	beq.n	800f320 <tcp_output_segment+0x58>
    /* This should not happen: rexmit functions should have checked this.
       However, since this function modifies p->len, we must not continue in this case. */
    LWIP_DEBUGF(TCP_RTO_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_output_segment: segment busy\n"));
    return ERR_OK;
 800f31c:	2300      	movs	r3, #0
 800f31e:	e0a7      	b.n	800f470 <tcp_output_segment+0x1a8>
  }

  /* The TCP header has already been constructed, but the ackno and
   wnd fields remain. */
  seg->tcphdr->ackno = lwip_htonl(pcb->rcv_nxt);
 800f320:	68bb      	ldr	r3, [r7, #8]
 800f322:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800f324:	68fb      	ldr	r3, [r7, #12]
 800f326:	68dc      	ldr	r4, [r3, #12]
 800f328:	4610      	mov	r0, r2
 800f32a:	f7f9 fbbe 	bl	8008aaa <lwip_htonl>
 800f32e:	4603      	mov	r3, r0
 800f330:	60a3      	str	r3, [r4, #8]
       the window scale option) is never scaled. */
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(pcb->rcv_ann_wnd));
  } else
#endif /* LWIP_WND_SCALE */
  {
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 800f332:	68bb      	ldr	r3, [r7, #8]
 800f334:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 800f336:	68fb      	ldr	r3, [r7, #12]
 800f338:	68dc      	ldr	r4, [r3, #12]
 800f33a:	4610      	mov	r0, r2
 800f33c:	f7f9 fba0 	bl	8008a80 <lwip_htons>
 800f340:	4603      	mov	r3, r0
 800f342:	81e3      	strh	r3, [r4, #14]
  }

  pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 800f344:	68bb      	ldr	r3, [r7, #8]
 800f346:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f348:	68ba      	ldr	r2, [r7, #8]
 800f34a:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 800f34c:	441a      	add	r2, r3
 800f34e:	68bb      	ldr	r3, [r7, #8]
 800f350:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Add any requested options.  NB MSS option is only set on SYN
     packets, so ignore it here */
  /* cast through void* to get rid of alignment warnings */
  opts = (u32_t *)(void *)(seg->tcphdr + 1);
 800f352:	68fb      	ldr	r3, [r7, #12]
 800f354:	68db      	ldr	r3, [r3, #12]
 800f356:	3314      	adds	r3, #20
 800f358:	61fb      	str	r3, [r7, #28]
  if (seg->flags & TF_SEG_OPTS_MSS) {
 800f35a:	68fb      	ldr	r3, [r7, #12]
 800f35c:	7a9b      	ldrb	r3, [r3, #10]
 800f35e:	f003 0301 	and.w	r3, r3, #1
 800f362:	2b00      	cmp	r3, #0
 800f364:	d015      	beq.n	800f392 <tcp_output_segment+0xca>
    u16_t mss;
#if TCP_CALCULATE_EFF_SEND_MSS
    mss = tcp_eff_send_mss_netif(TCP_MSS, netif, &pcb->remote_ip);
 800f366:	68bb      	ldr	r3, [r7, #8]
 800f368:	3304      	adds	r3, #4
 800f36a:	461a      	mov	r2, r3
 800f36c:	6879      	ldr	r1, [r7, #4]
 800f36e:	f44f 7006 	mov.w	r0, #536	; 0x218
 800f372:	f7fc fdff 	bl	800bf74 <tcp_eff_send_mss_netif>
 800f376:	4603      	mov	r3, r0
 800f378:	837b      	strh	r3, [r7, #26]
#else /* TCP_CALCULATE_EFF_SEND_MSS */
    mss = TCP_MSS;
#endif /* TCP_CALCULATE_EFF_SEND_MSS */
    *opts = TCP_BUILD_MSS_OPTION(mss);
 800f37a:	8b7b      	ldrh	r3, [r7, #26]
 800f37c:	f043 7301 	orr.w	r3, r3, #33816576	; 0x2040000
 800f380:	4618      	mov	r0, r3
 800f382:	f7f9 fb92 	bl	8008aaa <lwip_htonl>
 800f386:	4602      	mov	r2, r0
 800f388:	69fb      	ldr	r3, [r7, #28]
 800f38a:	601a      	str	r2, [r3, #0]
    opts += 1;
 800f38c:	69fb      	ldr	r3, [r7, #28]
 800f38e:	3304      	adds	r3, #4
 800f390:	61fb      	str	r3, [r7, #28]
  }
#endif

  /* Set retransmission timer running if it is not currently enabled
     This must be set before checking the route. */
  if (pcb->rtime < 0) {
 800f392:	68bb      	ldr	r3, [r7, #8]
 800f394:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800f398:	2b00      	cmp	r3, #0
 800f39a:	da02      	bge.n	800f3a2 <tcp_output_segment+0xda>
    pcb->rtime = 0;
 800f39c:	68bb      	ldr	r3, [r7, #8]
 800f39e:	2200      	movs	r2, #0
 800f3a0:	861a      	strh	r2, [r3, #48]	; 0x30
  }

  if (pcb->rttest == 0) {
 800f3a2:	68bb      	ldr	r3, [r7, #8]
 800f3a4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f3a6:	2b00      	cmp	r3, #0
 800f3a8:	d10c      	bne.n	800f3c4 <tcp_output_segment+0xfc>
    pcb->rttest = tcp_ticks;
 800f3aa:	4b38      	ldr	r3, [pc, #224]	; (800f48c <tcp_output_segment+0x1c4>)
 800f3ac:	681a      	ldr	r2, [r3, #0]
 800f3ae:	68bb      	ldr	r3, [r7, #8]
 800f3b0:	635a      	str	r2, [r3, #52]	; 0x34
    pcb->rtseq = lwip_ntohl(seg->tcphdr->seqno);
 800f3b2:	68fb      	ldr	r3, [r7, #12]
 800f3b4:	68db      	ldr	r3, [r3, #12]
 800f3b6:	685b      	ldr	r3, [r3, #4]
 800f3b8:	4618      	mov	r0, r3
 800f3ba:	f7f9 fb76 	bl	8008aaa <lwip_htonl>
 800f3be:	4602      	mov	r2, r0
 800f3c0:	68bb      	ldr	r3, [r7, #8]
 800f3c2:	639a      	str	r2, [r3, #56]	; 0x38
  }
  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output_segment: %"U32_F":%"U32_F"\n",
                                 lwip_htonl(seg->tcphdr->seqno), lwip_htonl(seg->tcphdr->seqno) +
                                 seg->len));

  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
 800f3c4:	68fb      	ldr	r3, [r7, #12]
 800f3c6:	68da      	ldr	r2, [r3, #12]
 800f3c8:	68fb      	ldr	r3, [r7, #12]
 800f3ca:	685b      	ldr	r3, [r3, #4]
 800f3cc:	685b      	ldr	r3, [r3, #4]
 800f3ce:	1ad3      	subs	r3, r2, r3
 800f3d0:	833b      	strh	r3, [r7, #24]
  if (len == 0) {
    /** Exclude retransmitted segments from this count. */
    MIB2_STATS_INC(mib2.tcpoutsegs);
  }

  seg->p->len -= len;
 800f3d2:	68fb      	ldr	r3, [r7, #12]
 800f3d4:	685b      	ldr	r3, [r3, #4]
 800f3d6:	8959      	ldrh	r1, [r3, #10]
 800f3d8:	68fb      	ldr	r3, [r7, #12]
 800f3da:	685b      	ldr	r3, [r3, #4]
 800f3dc:	8b3a      	ldrh	r2, [r7, #24]
 800f3de:	1a8a      	subs	r2, r1, r2
 800f3e0:	b292      	uxth	r2, r2
 800f3e2:	815a      	strh	r2, [r3, #10]
  seg->p->tot_len -= len;
 800f3e4:	68fb      	ldr	r3, [r7, #12]
 800f3e6:	685b      	ldr	r3, [r3, #4]
 800f3e8:	8919      	ldrh	r1, [r3, #8]
 800f3ea:	68fb      	ldr	r3, [r7, #12]
 800f3ec:	685b      	ldr	r3, [r3, #4]
 800f3ee:	8b3a      	ldrh	r2, [r7, #24]
 800f3f0:	1a8a      	subs	r2, r1, r2
 800f3f2:	b292      	uxth	r2, r2
 800f3f4:	811a      	strh	r2, [r3, #8]

  seg->p->payload = seg->tcphdr;
 800f3f6:	68fb      	ldr	r3, [r7, #12]
 800f3f8:	685b      	ldr	r3, [r3, #4]
 800f3fa:	68fa      	ldr	r2, [r7, #12]
 800f3fc:	68d2      	ldr	r2, [r2, #12]
 800f3fe:	605a      	str	r2, [r3, #4]

  seg->tcphdr->chksum = 0;
 800f400:	68fb      	ldr	r3, [r7, #12]
 800f402:	68db      	ldr	r3, [r3, #12]
 800f404:	2200      	movs	r2, #0
 800f406:	741a      	strb	r2, [r3, #16]
 800f408:	2200      	movs	r2, #0
 800f40a:	745a      	strb	r2, [r3, #17]

#ifdef LWIP_HOOK_TCP_OUT_ADD_TCPOPTS
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(seg->p, seg->tcphdr, pcb, opts);
#endif
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(seg->tcphdr + 1)) + LWIP_TCP_OPT_LENGTH_SEGMENT(seg->flags, pcb));
 800f40c:	68fb      	ldr	r3, [r7, #12]
 800f40e:	68db      	ldr	r3, [r3, #12]
 800f410:	f103 0214 	add.w	r2, r3, #20
 800f414:	68fb      	ldr	r3, [r7, #12]
 800f416:	7a9b      	ldrb	r3, [r3, #10]
 800f418:	009b      	lsls	r3, r3, #2
 800f41a:	f003 0304 	and.w	r3, r3, #4
 800f41e:	4413      	add	r3, r2
 800f420:	69fa      	ldr	r2, [r7, #28]
 800f422:	429a      	cmp	r2, r3
 800f424:	d006      	beq.n	800f434 <tcp_output_segment+0x16c>
 800f426:	4b14      	ldr	r3, [pc, #80]	; (800f478 <tcp_output_segment+0x1b0>)
 800f428:	f240 621c 	movw	r2, #1564	; 0x61c
 800f42c:	4918      	ldr	r1, [pc, #96]	; (800f490 <tcp_output_segment+0x1c8>)
 800f42e:	4814      	ldr	r0, [pc, #80]	; (800f480 <tcp_output_segment+0x1b8>)
 800f430:	f004 fa9a 	bl	8013968 <iprintf>
    seg->tcphdr->chksum = ip_chksum_pseudo(seg->p, IP_PROTO_TCP,
                                           seg->p->tot_len, &pcb->local_ip, &pcb->remote_ip);
#endif /* TCP_CHECKSUM_ON_COPY */
  }
#endif /* CHECKSUM_GEN_TCP */
  TCP_STATS_INC(tcp.xmit);
 800f434:	4b17      	ldr	r3, [pc, #92]	; (800f494 <tcp_output_segment+0x1cc>)
 800f436:	f8b3 3090 	ldrh.w	r3, [r3, #144]	; 0x90
 800f43a:	3301      	adds	r3, #1
 800f43c:	b29a      	uxth	r2, r3
 800f43e:	4b15      	ldr	r3, [pc, #84]	; (800f494 <tcp_output_segment+0x1cc>)
 800f440:	f8a3 2090 	strh.w	r2, [r3, #144]	; 0x90

  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if(seg->p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl,
 800f444:	68fb      	ldr	r3, [r7, #12]
 800f446:	6858      	ldr	r0, [r3, #4]
 800f448:	68b9      	ldr	r1, [r7, #8]
 800f44a:	68bb      	ldr	r3, [r7, #8]
 800f44c:	1d1c      	adds	r4, r3, #4
 800f44e:	68bb      	ldr	r3, [r7, #8]
 800f450:	7add      	ldrb	r5, [r3, #11]
 800f452:	68bb      	ldr	r3, [r7, #8]
 800f454:	7a9b      	ldrb	r3, [r3, #10]
 800f456:	687a      	ldr	r2, [r7, #4]
 800f458:	9202      	str	r2, [sp, #8]
 800f45a:	2206      	movs	r2, #6
 800f45c:	9201      	str	r2, [sp, #4]
 800f45e:	9300      	str	r3, [sp, #0]
 800f460:	462b      	mov	r3, r5
 800f462:	4622      	mov	r2, r4
 800f464:	f002 feae 	bl	80121c4 <ip4_output_if>
 800f468:	4603      	mov	r3, r0
 800f46a:	75fb      	strb	r3, [r7, #23]
    seg->chksum = SWAP_BYTES_IN_WORD(seg->chksum);
    seg->chksum_swapped = 1;
  }
#endif

  return err;
 800f46c:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800f470:	4618      	mov	r0, r3
 800f472:	3720      	adds	r7, #32
 800f474:	46bd      	mov	sp, r7
 800f476:	bdb0      	pop	{r4, r5, r7, pc}
 800f478:	08016028 	.word	0x08016028
 800f47c:	080165ec 	.word	0x080165ec
 800f480:	0801607c 	.word	0x0801607c
 800f484:	0801660c 	.word	0x0801660c
 800f488:	0801662c 	.word	0x0801662c
 800f48c:	2000c748 	.word	0x2000c748
 800f490:	08016650 	.word	0x08016650
 800f494:	2000c64c 	.word	0x2000c64c

0800f498 <tcp_rexmit_rto_prepare>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
err_t
tcp_rexmit_rto_prepare(struct tcp_pcb *pcb)
{
 800f498:	b5b0      	push	{r4, r5, r7, lr}
 800f49a:	b084      	sub	sp, #16
 800f49c:	af00      	add	r7, sp, #0
 800f49e:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;

  LWIP_ASSERT("tcp_rexmit_rto_prepare: invalid pcb", pcb != NULL);
 800f4a0:	687b      	ldr	r3, [r7, #4]
 800f4a2:	2b00      	cmp	r3, #0
 800f4a4:	d106      	bne.n	800f4b4 <tcp_rexmit_rto_prepare+0x1c>
 800f4a6:	4b31      	ldr	r3, [pc, #196]	; (800f56c <tcp_rexmit_rto_prepare+0xd4>)
 800f4a8:	f240 6263 	movw	r2, #1635	; 0x663
 800f4ac:	4930      	ldr	r1, [pc, #192]	; (800f570 <tcp_rexmit_rto_prepare+0xd8>)
 800f4ae:	4831      	ldr	r0, [pc, #196]	; (800f574 <tcp_rexmit_rto_prepare+0xdc>)
 800f4b0:	f004 fa5a 	bl	8013968 <iprintf>

  if (pcb->unacked == NULL) {
 800f4b4:	687b      	ldr	r3, [r7, #4]
 800f4b6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f4b8:	2b00      	cmp	r3, #0
 800f4ba:	d102      	bne.n	800f4c2 <tcp_rexmit_rto_prepare+0x2a>
    return ERR_VAL;
 800f4bc:	f06f 0305 	mvn.w	r3, #5
 800f4c0:	e050      	b.n	800f564 <tcp_rexmit_rto_prepare+0xcc>

  /* Move all unacked segments to the head of the unsent queue.
     However, give up if any of the unsent pbufs are still referenced by the
     netif driver due to deferred transmission. No point loading the link further
     if it is struggling to flush its buffered writes. */
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 800f4c2:	687b      	ldr	r3, [r7, #4]
 800f4c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f4c6:	60fb      	str	r3, [r7, #12]
 800f4c8:	e00b      	b.n	800f4e2 <tcp_rexmit_rto_prepare+0x4a>
    if (tcp_output_segment_busy(seg)) {
 800f4ca:	68f8      	ldr	r0, [r7, #12]
 800f4cc:	f7ff fedc 	bl	800f288 <tcp_output_segment_busy>
 800f4d0:	4603      	mov	r3, r0
 800f4d2:	2b00      	cmp	r3, #0
 800f4d4:	d002      	beq.n	800f4dc <tcp_rexmit_rto_prepare+0x44>
      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
      return ERR_VAL;
 800f4d6:	f06f 0305 	mvn.w	r3, #5
 800f4da:	e043      	b.n	800f564 <tcp_rexmit_rto_prepare+0xcc>
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 800f4dc:	68fb      	ldr	r3, [r7, #12]
 800f4de:	681b      	ldr	r3, [r3, #0]
 800f4e0:	60fb      	str	r3, [r7, #12]
 800f4e2:	68fb      	ldr	r3, [r7, #12]
 800f4e4:	681b      	ldr	r3, [r3, #0]
 800f4e6:	2b00      	cmp	r3, #0
 800f4e8:	d1ef      	bne.n	800f4ca <tcp_rexmit_rto_prepare+0x32>
    }
  }
  if (tcp_output_segment_busy(seg)) {
 800f4ea:	68f8      	ldr	r0, [r7, #12]
 800f4ec:	f7ff fecc 	bl	800f288 <tcp_output_segment_busy>
 800f4f0:	4603      	mov	r3, r0
 800f4f2:	2b00      	cmp	r3, #0
 800f4f4:	d002      	beq.n	800f4fc <tcp_rexmit_rto_prepare+0x64>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
    return ERR_VAL;
 800f4f6:	f06f 0305 	mvn.w	r3, #5
 800f4fa:	e033      	b.n	800f564 <tcp_rexmit_rto_prepare+0xcc>
  }
  /* concatenate unsent queue after unacked queue */
  seg->next = pcb->unsent;
 800f4fc:	687b      	ldr	r3, [r7, #4]
 800f4fe:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 800f500:	68fb      	ldr	r3, [r7, #12]
 800f502:	601a      	str	r2, [r3, #0]
  if (pcb->unsent == NULL) {
    pcb->unsent_oversize = seg->oversize_left;
  }
#endif /* TCP_OVERSIZE_DBGCHECK */
  /* unsent queue is the concatenated queue (of unacked, unsent) */
  pcb->unsent = pcb->unacked;
 800f504:	687b      	ldr	r3, [r7, #4]
 800f506:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800f508:	687b      	ldr	r3, [r7, #4]
 800f50a:	66da      	str	r2, [r3, #108]	; 0x6c
  /* unacked queue is now empty */
  pcb->unacked = NULL;
 800f50c:	687b      	ldr	r3, [r7, #4]
 800f50e:	2200      	movs	r2, #0
 800f510:	671a      	str	r2, [r3, #112]	; 0x70

  /* Mark RTO in-progress */
  tcp_set_flags(pcb, TF_RTO);
 800f512:	687b      	ldr	r3, [r7, #4]
 800f514:	8b5b      	ldrh	r3, [r3, #26]
 800f516:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800f51a:	b29a      	uxth	r2, r3
 800f51c:	687b      	ldr	r3, [r7, #4]
 800f51e:	835a      	strh	r2, [r3, #26]
  /* Record the next byte following retransmit */
  pcb->rto_end = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 800f520:	68fb      	ldr	r3, [r7, #12]
 800f522:	68db      	ldr	r3, [r3, #12]
 800f524:	685b      	ldr	r3, [r3, #4]
 800f526:	4618      	mov	r0, r3
 800f528:	f7f9 fabf 	bl	8008aaa <lwip_htonl>
 800f52c:	4604      	mov	r4, r0
 800f52e:	68fb      	ldr	r3, [r7, #12]
 800f530:	891b      	ldrh	r3, [r3, #8]
 800f532:	461d      	mov	r5, r3
 800f534:	68fb      	ldr	r3, [r7, #12]
 800f536:	68db      	ldr	r3, [r3, #12]
 800f538:	899b      	ldrh	r3, [r3, #12]
 800f53a:	b29b      	uxth	r3, r3
 800f53c:	4618      	mov	r0, r3
 800f53e:	f7f9 fa9f 	bl	8008a80 <lwip_htons>
 800f542:	4603      	mov	r3, r0
 800f544:	b2db      	uxtb	r3, r3
 800f546:	f003 0303 	and.w	r3, r3, #3
 800f54a:	2b00      	cmp	r3, #0
 800f54c:	d001      	beq.n	800f552 <tcp_rexmit_rto_prepare+0xba>
 800f54e:	2301      	movs	r3, #1
 800f550:	e000      	b.n	800f554 <tcp_rexmit_rto_prepare+0xbc>
 800f552:	2300      	movs	r3, #0
 800f554:	442b      	add	r3, r5
 800f556:	18e2      	adds	r2, r4, r3
 800f558:	687b      	ldr	r3, [r7, #4]
 800f55a:	64da      	str	r2, [r3, #76]	; 0x4c
  /* Don't take any RTT measurements after retransmitting. */
  pcb->rttest = 0;
 800f55c:	687b      	ldr	r3, [r7, #4]
 800f55e:	2200      	movs	r2, #0
 800f560:	635a      	str	r2, [r3, #52]	; 0x34

  return ERR_OK;
 800f562:	2300      	movs	r3, #0
}
 800f564:	4618      	mov	r0, r3
 800f566:	3710      	adds	r7, #16
 800f568:	46bd      	mov	sp, r7
 800f56a:	bdb0      	pop	{r4, r5, r7, pc}
 800f56c:	08016028 	.word	0x08016028
 800f570:	08016664 	.word	0x08016664
 800f574:	0801607c 	.word	0x0801607c

0800f578 <tcp_rexmit_rto_commit>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto_commit(struct tcp_pcb *pcb)
{
 800f578:	b580      	push	{r7, lr}
 800f57a:	b082      	sub	sp, #8
 800f57c:	af00      	add	r7, sp, #0
 800f57e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto_commit: invalid pcb", pcb != NULL);
 800f580:	687b      	ldr	r3, [r7, #4]
 800f582:	2b00      	cmp	r3, #0
 800f584:	d106      	bne.n	800f594 <tcp_rexmit_rto_commit+0x1c>
 800f586:	4b0d      	ldr	r3, [pc, #52]	; (800f5bc <tcp_rexmit_rto_commit+0x44>)
 800f588:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 800f58c:	490c      	ldr	r1, [pc, #48]	; (800f5c0 <tcp_rexmit_rto_commit+0x48>)
 800f58e:	480d      	ldr	r0, [pc, #52]	; (800f5c4 <tcp_rexmit_rto_commit+0x4c>)
 800f590:	f004 f9ea 	bl	8013968 <iprintf>

  /* increment number of retransmissions */
  if (pcb->nrtx < 0xFF) {
 800f594:	687b      	ldr	r3, [r7, #4]
 800f596:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800f59a:	2bff      	cmp	r3, #255	; 0xff
 800f59c:	d007      	beq.n	800f5ae <tcp_rexmit_rto_commit+0x36>
    ++pcb->nrtx;
 800f59e:	687b      	ldr	r3, [r7, #4]
 800f5a0:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800f5a4:	3301      	adds	r3, #1
 800f5a6:	b2da      	uxtb	r2, r3
 800f5a8:	687b      	ldr	r3, [r7, #4]
 800f5aa:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }
  /* Do the actual retransmission */
  tcp_output(pcb);
 800f5ae:	6878      	ldr	r0, [r7, #4]
 800f5b0:	f7ff fc76 	bl	800eea0 <tcp_output>
}
 800f5b4:	bf00      	nop
 800f5b6:	3708      	adds	r7, #8
 800f5b8:	46bd      	mov	sp, r7
 800f5ba:	bd80      	pop	{r7, pc}
 800f5bc:	08016028 	.word	0x08016028
 800f5c0:	08016688 	.word	0x08016688
 800f5c4:	0801607c 	.word	0x0801607c

0800f5c8 <tcp_rexmit_rto>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto(struct tcp_pcb *pcb)
{
 800f5c8:	b580      	push	{r7, lr}
 800f5ca:	b082      	sub	sp, #8
 800f5cc:	af00      	add	r7, sp, #0
 800f5ce:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto: invalid pcb", pcb != NULL);
 800f5d0:	687b      	ldr	r3, [r7, #4]
 800f5d2:	2b00      	cmp	r3, #0
 800f5d4:	d106      	bne.n	800f5e4 <tcp_rexmit_rto+0x1c>
 800f5d6:	4b0a      	ldr	r3, [pc, #40]	; (800f600 <tcp_rexmit_rto+0x38>)
 800f5d8:	f240 62ad 	movw	r2, #1709	; 0x6ad
 800f5dc:	4909      	ldr	r1, [pc, #36]	; (800f604 <tcp_rexmit_rto+0x3c>)
 800f5de:	480a      	ldr	r0, [pc, #40]	; (800f608 <tcp_rexmit_rto+0x40>)
 800f5e0:	f004 f9c2 	bl	8013968 <iprintf>

  if (tcp_rexmit_rto_prepare(pcb) == ERR_OK) {
 800f5e4:	6878      	ldr	r0, [r7, #4]
 800f5e6:	f7ff ff57 	bl	800f498 <tcp_rexmit_rto_prepare>
 800f5ea:	4603      	mov	r3, r0
 800f5ec:	2b00      	cmp	r3, #0
 800f5ee:	d102      	bne.n	800f5f6 <tcp_rexmit_rto+0x2e>
    tcp_rexmit_rto_commit(pcb);
 800f5f0:	6878      	ldr	r0, [r7, #4]
 800f5f2:	f7ff ffc1 	bl	800f578 <tcp_rexmit_rto_commit>
  }
}
 800f5f6:	bf00      	nop
 800f5f8:	3708      	adds	r7, #8
 800f5fa:	46bd      	mov	sp, r7
 800f5fc:	bd80      	pop	{r7, pc}
 800f5fe:	bf00      	nop
 800f600:	08016028 	.word	0x08016028
 800f604:	080166ac 	.word	0x080166ac
 800f608:	0801607c 	.word	0x0801607c

0800f60c <tcp_rexmit>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
err_t
tcp_rexmit(struct tcp_pcb *pcb)
{
 800f60c:	b590      	push	{r4, r7, lr}
 800f60e:	b085      	sub	sp, #20
 800f610:	af00      	add	r7, sp, #0
 800f612:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;
  struct tcp_seg **cur_seg;

  LWIP_ASSERT("tcp_rexmit: invalid pcb", pcb != NULL);
 800f614:	687b      	ldr	r3, [r7, #4]
 800f616:	2b00      	cmp	r3, #0
 800f618:	d106      	bne.n	800f628 <tcp_rexmit+0x1c>
 800f61a:	4b2f      	ldr	r3, [pc, #188]	; (800f6d8 <tcp_rexmit+0xcc>)
 800f61c:	f240 62c1 	movw	r2, #1729	; 0x6c1
 800f620:	492e      	ldr	r1, [pc, #184]	; (800f6dc <tcp_rexmit+0xd0>)
 800f622:	482f      	ldr	r0, [pc, #188]	; (800f6e0 <tcp_rexmit+0xd4>)
 800f624:	f004 f9a0 	bl	8013968 <iprintf>

  if (pcb->unacked == NULL) {
 800f628:	687b      	ldr	r3, [r7, #4]
 800f62a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f62c:	2b00      	cmp	r3, #0
 800f62e:	d102      	bne.n	800f636 <tcp_rexmit+0x2a>
    return ERR_VAL;
 800f630:	f06f 0305 	mvn.w	r3, #5
 800f634:	e04c      	b.n	800f6d0 <tcp_rexmit+0xc4>
  }

  seg = pcb->unacked;
 800f636:	687b      	ldr	r3, [r7, #4]
 800f638:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f63a:	60bb      	str	r3, [r7, #8]

  /* Give up if the segment is still referenced by the netif driver
     due to deferred transmission. */
  if (tcp_output_segment_busy(seg)) {
 800f63c:	68b8      	ldr	r0, [r7, #8]
 800f63e:	f7ff fe23 	bl	800f288 <tcp_output_segment_busy>
 800f642:	4603      	mov	r3, r0
 800f644:	2b00      	cmp	r3, #0
 800f646:	d002      	beq.n	800f64e <tcp_rexmit+0x42>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit busy\n"));
    return ERR_VAL;
 800f648:	f06f 0305 	mvn.w	r3, #5
 800f64c:	e040      	b.n	800f6d0 <tcp_rexmit+0xc4>
  }

  /* Move the first unacked segment to the unsent queue */
  /* Keep the unsent queue sorted. */
  pcb->unacked = seg->next;
 800f64e:	68bb      	ldr	r3, [r7, #8]
 800f650:	681a      	ldr	r2, [r3, #0]
 800f652:	687b      	ldr	r3, [r7, #4]
 800f654:	671a      	str	r2, [r3, #112]	; 0x70

  cur_seg = &(pcb->unsent);
 800f656:	687b      	ldr	r3, [r7, #4]
 800f658:	336c      	adds	r3, #108	; 0x6c
 800f65a:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 800f65c:	e002      	b.n	800f664 <tcp_rexmit+0x58>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
    cur_seg = &((*cur_seg)->next );
 800f65e:	68fb      	ldr	r3, [r7, #12]
 800f660:	681b      	ldr	r3, [r3, #0]
 800f662:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 800f664:	68fb      	ldr	r3, [r7, #12]
 800f666:	681b      	ldr	r3, [r3, #0]
 800f668:	2b00      	cmp	r3, #0
 800f66a:	d011      	beq.n	800f690 <tcp_rexmit+0x84>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 800f66c:	68fb      	ldr	r3, [r7, #12]
 800f66e:	681b      	ldr	r3, [r3, #0]
 800f670:	68db      	ldr	r3, [r3, #12]
 800f672:	685b      	ldr	r3, [r3, #4]
 800f674:	4618      	mov	r0, r3
 800f676:	f7f9 fa18 	bl	8008aaa <lwip_htonl>
 800f67a:	4604      	mov	r4, r0
 800f67c:	68bb      	ldr	r3, [r7, #8]
 800f67e:	68db      	ldr	r3, [r3, #12]
 800f680:	685b      	ldr	r3, [r3, #4]
 800f682:	4618      	mov	r0, r3
 800f684:	f7f9 fa11 	bl	8008aaa <lwip_htonl>
 800f688:	4603      	mov	r3, r0
 800f68a:	1ae3      	subs	r3, r4, r3
  while (*cur_seg &&
 800f68c:	2b00      	cmp	r3, #0
 800f68e:	dbe6      	blt.n	800f65e <tcp_rexmit+0x52>
  }
  seg->next = *cur_seg;
 800f690:	68fb      	ldr	r3, [r7, #12]
 800f692:	681a      	ldr	r2, [r3, #0]
 800f694:	68bb      	ldr	r3, [r7, #8]
 800f696:	601a      	str	r2, [r3, #0]
  *cur_seg = seg;
 800f698:	68fb      	ldr	r3, [r7, #12]
 800f69a:	68ba      	ldr	r2, [r7, #8]
 800f69c:	601a      	str	r2, [r3, #0]
#if TCP_OVERSIZE
  if (seg->next == NULL) {
 800f69e:	68bb      	ldr	r3, [r7, #8]
 800f6a0:	681b      	ldr	r3, [r3, #0]
 800f6a2:	2b00      	cmp	r3, #0
 800f6a4:	d103      	bne.n	800f6ae <tcp_rexmit+0xa2>
    /* the retransmitted segment is last in unsent, so reset unsent_oversize */
    pcb->unsent_oversize = 0;
 800f6a6:	687b      	ldr	r3, [r7, #4]
 800f6a8:	2200      	movs	r2, #0
 800f6aa:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  }
#endif /* TCP_OVERSIZE */

  if (pcb->nrtx < 0xFF) {
 800f6ae:	687b      	ldr	r3, [r7, #4]
 800f6b0:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800f6b4:	2bff      	cmp	r3, #255	; 0xff
 800f6b6:	d007      	beq.n	800f6c8 <tcp_rexmit+0xbc>
    ++pcb->nrtx;
 800f6b8:	687b      	ldr	r3, [r7, #4]
 800f6ba:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800f6be:	3301      	adds	r3, #1
 800f6c0:	b2da      	uxtb	r2, r3
 800f6c2:	687b      	ldr	r3, [r7, #4]
 800f6c4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }

  /* Don't take any rtt measurements after retransmitting. */
  pcb->rttest = 0;
 800f6c8:	687b      	ldr	r3, [r7, #4]
 800f6ca:	2200      	movs	r2, #0
 800f6cc:	635a      	str	r2, [r3, #52]	; 0x34

  /* Do the actual retransmission. */
  MIB2_STATS_INC(mib2.tcpretranssegs);
  /* No need to call tcp_output: we are always called from tcp_input()
     and thus tcp_output directly returns. */
  return ERR_OK;
 800f6ce:	2300      	movs	r3, #0
}
 800f6d0:	4618      	mov	r0, r3
 800f6d2:	3714      	adds	r7, #20
 800f6d4:	46bd      	mov	sp, r7
 800f6d6:	bd90      	pop	{r4, r7, pc}
 800f6d8:	08016028 	.word	0x08016028
 800f6dc:	080166c8 	.word	0x080166c8
 800f6e0:	0801607c 	.word	0x0801607c

0800f6e4 <tcp_rexmit_fast>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
void
tcp_rexmit_fast(struct tcp_pcb *pcb)
{
 800f6e4:	b580      	push	{r7, lr}
 800f6e6:	b082      	sub	sp, #8
 800f6e8:	af00      	add	r7, sp, #0
 800f6ea:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_fast: invalid pcb", pcb != NULL);
 800f6ec:	687b      	ldr	r3, [r7, #4]
 800f6ee:	2b00      	cmp	r3, #0
 800f6f0:	d106      	bne.n	800f700 <tcp_rexmit_fast+0x1c>
 800f6f2:	4b2a      	ldr	r3, [pc, #168]	; (800f79c <tcp_rexmit_fast+0xb8>)
 800f6f4:	f240 62f9 	movw	r2, #1785	; 0x6f9
 800f6f8:	4929      	ldr	r1, [pc, #164]	; (800f7a0 <tcp_rexmit_fast+0xbc>)
 800f6fa:	482a      	ldr	r0, [pc, #168]	; (800f7a4 <tcp_rexmit_fast+0xc0>)
 800f6fc:	f004 f934 	bl	8013968 <iprintf>

  if (pcb->unacked != NULL && !(pcb->flags & TF_INFR)) {
 800f700:	687b      	ldr	r3, [r7, #4]
 800f702:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f704:	2b00      	cmp	r3, #0
 800f706:	d044      	beq.n	800f792 <tcp_rexmit_fast+0xae>
 800f708:	687b      	ldr	r3, [r7, #4]
 800f70a:	8b5b      	ldrh	r3, [r3, #26]
 800f70c:	f003 0304 	and.w	r3, r3, #4
 800f710:	2b00      	cmp	r3, #0
 800f712:	d13e      	bne.n	800f792 <tcp_rexmit_fast+0xae>
    LWIP_DEBUGF(TCP_FR_DEBUG,
                ("tcp_receive: dupacks %"U16_F" (%"U32_F
                 "), fast retransmit %"U32_F"\n",
                 (u16_t)pcb->dupacks, pcb->lastack,
                 lwip_ntohl(pcb->unacked->tcphdr->seqno)));
    if (tcp_rexmit(pcb) == ERR_OK) {
 800f714:	6878      	ldr	r0, [r7, #4]
 800f716:	f7ff ff79 	bl	800f60c <tcp_rexmit>
 800f71a:	4603      	mov	r3, r0
 800f71c:	2b00      	cmp	r3, #0
 800f71e:	d138      	bne.n	800f792 <tcp_rexmit_fast+0xae>
      /* Set ssthresh to half of the minimum of the current
       * cwnd and the advertised window */
      pcb->ssthresh = LWIP_MIN(pcb->cwnd, pcb->snd_wnd) / 2;
 800f720:	687b      	ldr	r3, [r7, #4]
 800f722:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800f726:	687b      	ldr	r3, [r7, #4]
 800f728:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800f72c:	4293      	cmp	r3, r2
 800f72e:	bf28      	it	cs
 800f730:	4613      	movcs	r3, r2
 800f732:	b29b      	uxth	r3, r3
 800f734:	0fda      	lsrs	r2, r3, #31
 800f736:	4413      	add	r3, r2
 800f738:	105b      	asrs	r3, r3, #1
 800f73a:	b29a      	uxth	r2, r3
 800f73c:	687b      	ldr	r3, [r7, #4]
 800f73e:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

      /* The minimum value for ssthresh should be 2 MSS */
      if (pcb->ssthresh < (2U * pcb->mss)) {
 800f742:	687b      	ldr	r3, [r7, #4]
 800f744:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 800f748:	461a      	mov	r2, r3
 800f74a:	687b      	ldr	r3, [r7, #4]
 800f74c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800f74e:	005b      	lsls	r3, r3, #1
 800f750:	429a      	cmp	r2, r3
 800f752:	d206      	bcs.n	800f762 <tcp_rexmit_fast+0x7e>
        LWIP_DEBUGF(TCP_FR_DEBUG,
                    ("tcp_receive: The minimum value for ssthresh %"TCPWNDSIZE_F
                     " should be min 2 mss %"U16_F"...\n",
                     pcb->ssthresh, (u16_t)(2 * pcb->mss)));
        pcb->ssthresh = 2 * pcb->mss;
 800f754:	687b      	ldr	r3, [r7, #4]
 800f756:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800f758:	005b      	lsls	r3, r3, #1
 800f75a:	b29a      	uxth	r2, r3
 800f75c:	687b      	ldr	r3, [r7, #4]
 800f75e:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
      }

      pcb->cwnd = pcb->ssthresh + 3 * pcb->mss;
 800f762:	687b      	ldr	r3, [r7, #4]
 800f764:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 800f768:	687b      	ldr	r3, [r7, #4]
 800f76a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800f76c:	4619      	mov	r1, r3
 800f76e:	0049      	lsls	r1, r1, #1
 800f770:	440b      	add	r3, r1
 800f772:	b29b      	uxth	r3, r3
 800f774:	4413      	add	r3, r2
 800f776:	b29a      	uxth	r2, r3
 800f778:	687b      	ldr	r3, [r7, #4]
 800f77a:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
      tcp_set_flags(pcb, TF_INFR);
 800f77e:	687b      	ldr	r3, [r7, #4]
 800f780:	8b5b      	ldrh	r3, [r3, #26]
 800f782:	f043 0304 	orr.w	r3, r3, #4
 800f786:	b29a      	uxth	r2, r3
 800f788:	687b      	ldr	r3, [r7, #4]
 800f78a:	835a      	strh	r2, [r3, #26]

      /* Reset the retransmission timer to prevent immediate rto retransmissions */
      pcb->rtime = 0;
 800f78c:	687b      	ldr	r3, [r7, #4]
 800f78e:	2200      	movs	r2, #0
 800f790:	861a      	strh	r2, [r3, #48]	; 0x30
    }
  }
}
 800f792:	bf00      	nop
 800f794:	3708      	adds	r7, #8
 800f796:	46bd      	mov	sp, r7
 800f798:	bd80      	pop	{r7, pc}
 800f79a:	bf00      	nop
 800f79c:	08016028 	.word	0x08016028
 800f7a0:	080166e0 	.word	0x080166e0
 800f7a4:	0801607c 	.word	0x0801607c

0800f7a8 <tcp_output_alloc_header_common>:

static struct pbuf *
tcp_output_alloc_header_common(u32_t ackno, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */,
                        u16_t src_port, u16_t dst_port, u8_t flags, u16_t wnd)
{
 800f7a8:	b580      	push	{r7, lr}
 800f7aa:	b086      	sub	sp, #24
 800f7ac:	af00      	add	r7, sp, #0
 800f7ae:	60f8      	str	r0, [r7, #12]
 800f7b0:	607b      	str	r3, [r7, #4]
 800f7b2:	460b      	mov	r3, r1
 800f7b4:	817b      	strh	r3, [r7, #10]
 800f7b6:	4613      	mov	r3, r2
 800f7b8:	813b      	strh	r3, [r7, #8]
  struct tcp_hdr *tcphdr;
  struct pbuf *p;

  p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
 800f7ba:	897a      	ldrh	r2, [r7, #10]
 800f7bc:	893b      	ldrh	r3, [r7, #8]
 800f7be:	4413      	add	r3, r2
 800f7c0:	b29b      	uxth	r3, r3
 800f7c2:	3314      	adds	r3, #20
 800f7c4:	b29b      	uxth	r3, r3
 800f7c6:	f44f 7220 	mov.w	r2, #640	; 0x280
 800f7ca:	4619      	mov	r1, r3
 800f7cc:	2022      	movs	r0, #34	; 0x22
 800f7ce:	f7fa fb35 	bl	8009e3c <pbuf_alloc>
 800f7d2:	6178      	str	r0, [r7, #20]
  if (p != NULL) {
 800f7d4:	697b      	ldr	r3, [r7, #20]
 800f7d6:	2b00      	cmp	r3, #0
 800f7d8:	d04d      	beq.n	800f876 <tcp_output_alloc_header_common+0xce>
    LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
 800f7da:	897b      	ldrh	r3, [r7, #10]
 800f7dc:	3313      	adds	r3, #19
 800f7de:	697a      	ldr	r2, [r7, #20]
 800f7e0:	8952      	ldrh	r2, [r2, #10]
 800f7e2:	4293      	cmp	r3, r2
 800f7e4:	db06      	blt.n	800f7f4 <tcp_output_alloc_header_common+0x4c>
 800f7e6:	4b26      	ldr	r3, [pc, #152]	; (800f880 <tcp_output_alloc_header_common+0xd8>)
 800f7e8:	f240 7223 	movw	r2, #1827	; 0x723
 800f7ec:	4925      	ldr	r1, [pc, #148]	; (800f884 <tcp_output_alloc_header_common+0xdc>)
 800f7ee:	4826      	ldr	r0, [pc, #152]	; (800f888 <tcp_output_alloc_header_common+0xe0>)
 800f7f0:	f004 f8ba 	bl	8013968 <iprintf>
                (p->len >= TCP_HLEN + optlen));
    tcphdr = (struct tcp_hdr *)p->payload;
 800f7f4:	697b      	ldr	r3, [r7, #20]
 800f7f6:	685b      	ldr	r3, [r3, #4]
 800f7f8:	613b      	str	r3, [r7, #16]
    tcphdr->src = lwip_htons(src_port);
 800f7fa:	8c3b      	ldrh	r3, [r7, #32]
 800f7fc:	4618      	mov	r0, r3
 800f7fe:	f7f9 f93f 	bl	8008a80 <lwip_htons>
 800f802:	4603      	mov	r3, r0
 800f804:	461a      	mov	r2, r3
 800f806:	693b      	ldr	r3, [r7, #16]
 800f808:	801a      	strh	r2, [r3, #0]
    tcphdr->dest = lwip_htons(dst_port);
 800f80a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800f80c:	4618      	mov	r0, r3
 800f80e:	f7f9 f937 	bl	8008a80 <lwip_htons>
 800f812:	4603      	mov	r3, r0
 800f814:	461a      	mov	r2, r3
 800f816:	693b      	ldr	r3, [r7, #16]
 800f818:	805a      	strh	r2, [r3, #2]
    tcphdr->seqno = seqno_be;
 800f81a:	693b      	ldr	r3, [r7, #16]
 800f81c:	687a      	ldr	r2, [r7, #4]
 800f81e:	605a      	str	r2, [r3, #4]
    tcphdr->ackno = lwip_htonl(ackno);
 800f820:	68f8      	ldr	r0, [r7, #12]
 800f822:	f7f9 f942 	bl	8008aaa <lwip_htonl>
 800f826:	4602      	mov	r2, r0
 800f828:	693b      	ldr	r3, [r7, #16]
 800f82a:	609a      	str	r2, [r3, #8]
    TCPH_HDRLEN_FLAGS_SET(tcphdr, (5 + optlen / 4), flags);
 800f82c:	897b      	ldrh	r3, [r7, #10]
 800f82e:	089b      	lsrs	r3, r3, #2
 800f830:	b29b      	uxth	r3, r3
 800f832:	3305      	adds	r3, #5
 800f834:	b29b      	uxth	r3, r3
 800f836:	031b      	lsls	r3, r3, #12
 800f838:	b29a      	uxth	r2, r3
 800f83a:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800f83e:	b29b      	uxth	r3, r3
 800f840:	4313      	orrs	r3, r2
 800f842:	b29b      	uxth	r3, r3
 800f844:	4618      	mov	r0, r3
 800f846:	f7f9 f91b 	bl	8008a80 <lwip_htons>
 800f84a:	4603      	mov	r3, r0
 800f84c:	461a      	mov	r2, r3
 800f84e:	693b      	ldr	r3, [r7, #16]
 800f850:	819a      	strh	r2, [r3, #12]
    tcphdr->wnd = lwip_htons(wnd);
 800f852:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800f854:	4618      	mov	r0, r3
 800f856:	f7f9 f913 	bl	8008a80 <lwip_htons>
 800f85a:	4603      	mov	r3, r0
 800f85c:	461a      	mov	r2, r3
 800f85e:	693b      	ldr	r3, [r7, #16]
 800f860:	81da      	strh	r2, [r3, #14]
    tcphdr->chksum = 0;
 800f862:	693b      	ldr	r3, [r7, #16]
 800f864:	2200      	movs	r2, #0
 800f866:	741a      	strb	r2, [r3, #16]
 800f868:	2200      	movs	r2, #0
 800f86a:	745a      	strb	r2, [r3, #17]
    tcphdr->urgp = 0;
 800f86c:	693b      	ldr	r3, [r7, #16]
 800f86e:	2200      	movs	r2, #0
 800f870:	749a      	strb	r2, [r3, #18]
 800f872:	2200      	movs	r2, #0
 800f874:	74da      	strb	r2, [r3, #19]
  }
  return p;
 800f876:	697b      	ldr	r3, [r7, #20]
}
 800f878:	4618      	mov	r0, r3
 800f87a:	3718      	adds	r7, #24
 800f87c:	46bd      	mov	sp, r7
 800f87e:	bd80      	pop	{r7, pc}
 800f880:	08016028 	.word	0x08016028
 800f884:	08016700 	.word	0x08016700
 800f888:	0801607c 	.word	0x0801607c

0800f88c <tcp_output_alloc_header>:
 * @return pbuf with p->payload being the tcp_hdr
 */
static struct pbuf *
tcp_output_alloc_header(struct tcp_pcb *pcb, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */)
{
 800f88c:	b5b0      	push	{r4, r5, r7, lr}
 800f88e:	b08a      	sub	sp, #40	; 0x28
 800f890:	af04      	add	r7, sp, #16
 800f892:	60f8      	str	r0, [r7, #12]
 800f894:	607b      	str	r3, [r7, #4]
 800f896:	460b      	mov	r3, r1
 800f898:	817b      	strh	r3, [r7, #10]
 800f89a:	4613      	mov	r3, r2
 800f89c:	813b      	strh	r3, [r7, #8]
  struct pbuf *p;

  LWIP_ASSERT("tcp_output_alloc_header: invalid pcb", pcb != NULL);
 800f89e:	68fb      	ldr	r3, [r7, #12]
 800f8a0:	2b00      	cmp	r3, #0
 800f8a2:	d106      	bne.n	800f8b2 <tcp_output_alloc_header+0x26>
 800f8a4:	4b15      	ldr	r3, [pc, #84]	; (800f8fc <tcp_output_alloc_header+0x70>)
 800f8a6:	f240 7242 	movw	r2, #1858	; 0x742
 800f8aa:	4915      	ldr	r1, [pc, #84]	; (800f900 <tcp_output_alloc_header+0x74>)
 800f8ac:	4815      	ldr	r0, [pc, #84]	; (800f904 <tcp_output_alloc_header+0x78>)
 800f8ae:	f004 f85b 	bl	8013968 <iprintf>

  p = tcp_output_alloc_header_common(pcb->rcv_nxt, optlen, datalen,
 800f8b2:	68fb      	ldr	r3, [r7, #12]
 800f8b4:	6a58      	ldr	r0, [r3, #36]	; 0x24
 800f8b6:	68fb      	ldr	r3, [r7, #12]
 800f8b8:	8adb      	ldrh	r3, [r3, #22]
 800f8ba:	68fa      	ldr	r2, [r7, #12]
 800f8bc:	8b12      	ldrh	r2, [r2, #24]
 800f8be:	68f9      	ldr	r1, [r7, #12]
 800f8c0:	8d49      	ldrh	r1, [r1, #42]	; 0x2a
 800f8c2:	893d      	ldrh	r5, [r7, #8]
 800f8c4:	897c      	ldrh	r4, [r7, #10]
 800f8c6:	9103      	str	r1, [sp, #12]
 800f8c8:	2110      	movs	r1, #16
 800f8ca:	9102      	str	r1, [sp, #8]
 800f8cc:	9201      	str	r2, [sp, #4]
 800f8ce:	9300      	str	r3, [sp, #0]
 800f8d0:	687b      	ldr	r3, [r7, #4]
 800f8d2:	462a      	mov	r2, r5
 800f8d4:	4621      	mov	r1, r4
 800f8d6:	f7ff ff67 	bl	800f7a8 <tcp_output_alloc_header_common>
 800f8da:	6178      	str	r0, [r7, #20]
    seqno_be, pcb->local_port, pcb->remote_port, TCP_ACK,
    TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
  if (p != NULL) {
 800f8dc:	697b      	ldr	r3, [r7, #20]
 800f8de:	2b00      	cmp	r3, #0
 800f8e0:	d006      	beq.n	800f8f0 <tcp_output_alloc_header+0x64>
    /* If we're sending a packet, update the announced right window edge */
    pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 800f8e2:	68fb      	ldr	r3, [r7, #12]
 800f8e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f8e6:	68fa      	ldr	r2, [r7, #12]
 800f8e8:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 800f8ea:	441a      	add	r2, r3
 800f8ec:	68fb      	ldr	r3, [r7, #12]
 800f8ee:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  return p;
 800f8f0:	697b      	ldr	r3, [r7, #20]
}
 800f8f2:	4618      	mov	r0, r3
 800f8f4:	3718      	adds	r7, #24
 800f8f6:	46bd      	mov	sp, r7
 800f8f8:	bdb0      	pop	{r4, r5, r7, pc}
 800f8fa:	bf00      	nop
 800f8fc:	08016028 	.word	0x08016028
 800f900:	08016730 	.word	0x08016730
 800f904:	0801607c 	.word	0x0801607c

0800f908 <tcp_output_fill_options>:

/* Fill in options for control segments */
static void
tcp_output_fill_options(const struct tcp_pcb *pcb, struct pbuf *p, u8_t optflags, u8_t num_sacks)
{
 800f908:	b580      	push	{r7, lr}
 800f90a:	b088      	sub	sp, #32
 800f90c:	af00      	add	r7, sp, #0
 800f90e:	60f8      	str	r0, [r7, #12]
 800f910:	60b9      	str	r1, [r7, #8]
 800f912:	4611      	mov	r1, r2
 800f914:	461a      	mov	r2, r3
 800f916:	460b      	mov	r3, r1
 800f918:	71fb      	strb	r3, [r7, #7]
 800f91a:	4613      	mov	r3, r2
 800f91c:	71bb      	strb	r3, [r7, #6]
  struct tcp_hdr *tcphdr;
  u32_t *opts;
  u16_t sacks_len = 0;
 800f91e:	2300      	movs	r3, #0
 800f920:	83fb      	strh	r3, [r7, #30]

  LWIP_ASSERT("tcp_output_fill_options: invalid pbuf", p != NULL);
 800f922:	68bb      	ldr	r3, [r7, #8]
 800f924:	2b00      	cmp	r3, #0
 800f926:	d106      	bne.n	800f936 <tcp_output_fill_options+0x2e>
 800f928:	4b13      	ldr	r3, [pc, #76]	; (800f978 <tcp_output_fill_options+0x70>)
 800f92a:	f240 7256 	movw	r2, #1878	; 0x756
 800f92e:	4913      	ldr	r1, [pc, #76]	; (800f97c <tcp_output_fill_options+0x74>)
 800f930:	4813      	ldr	r0, [pc, #76]	; (800f980 <tcp_output_fill_options+0x78>)
 800f932:	f004 f819 	bl	8013968 <iprintf>

  tcphdr = (struct tcp_hdr *)p->payload;
 800f936:	68bb      	ldr	r3, [r7, #8]
 800f938:	685b      	ldr	r3, [r3, #4]
 800f93a:	61bb      	str	r3, [r7, #24]
  opts = (u32_t *)(void *)(tcphdr + 1);
 800f93c:	69bb      	ldr	r3, [r7, #24]
 800f93e:	3314      	adds	r3, #20
 800f940:	617b      	str	r3, [r7, #20]
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(p, tcphdr, pcb, opts);
#endif

  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(sacks_len);
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(tcphdr + 1)) + sacks_len * 4 + LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb));
 800f942:	69bb      	ldr	r3, [r7, #24]
 800f944:	f103 0214 	add.w	r2, r3, #20
 800f948:	8bfb      	ldrh	r3, [r7, #30]
 800f94a:	009b      	lsls	r3, r3, #2
 800f94c:	4619      	mov	r1, r3
 800f94e:	79fb      	ldrb	r3, [r7, #7]
 800f950:	009b      	lsls	r3, r3, #2
 800f952:	f003 0304 	and.w	r3, r3, #4
 800f956:	440b      	add	r3, r1
 800f958:	4413      	add	r3, r2
 800f95a:	697a      	ldr	r2, [r7, #20]
 800f95c:	429a      	cmp	r2, r3
 800f95e:	d006      	beq.n	800f96e <tcp_output_fill_options+0x66>
 800f960:	4b05      	ldr	r3, [pc, #20]	; (800f978 <tcp_output_fill_options+0x70>)
 800f962:	f240 7275 	movw	r2, #1909	; 0x775
 800f966:	4907      	ldr	r1, [pc, #28]	; (800f984 <tcp_output_fill_options+0x7c>)
 800f968:	4805      	ldr	r0, [pc, #20]	; (800f980 <tcp_output_fill_options+0x78>)
 800f96a:	f003 fffd 	bl	8013968 <iprintf>
  LWIP_UNUSED_ARG(optflags); /* for LWIP_NOASSERT */
  LWIP_UNUSED_ARG(opts); /* for LWIP_NOASSERT */
}
 800f96e:	bf00      	nop
 800f970:	3720      	adds	r7, #32
 800f972:	46bd      	mov	sp, r7
 800f974:	bd80      	pop	{r7, pc}
 800f976:	bf00      	nop
 800f978:	08016028 	.word	0x08016028
 800f97c:	08016758 	.word	0x08016758
 800f980:	0801607c 	.word	0x0801607c
 800f984:	08016650 	.word	0x08016650

0800f988 <tcp_output_control_segment>:
 * header checksum and calling ip_output_if while handling netif hints and stats.
 */
static err_t
tcp_output_control_segment(const struct tcp_pcb *pcb, struct pbuf *p,
                           const ip_addr_t *src, const ip_addr_t *dst)
{
 800f988:	b580      	push	{r7, lr}
 800f98a:	b08a      	sub	sp, #40	; 0x28
 800f98c:	af04      	add	r7, sp, #16
 800f98e:	60f8      	str	r0, [r7, #12]
 800f990:	60b9      	str	r1, [r7, #8]
 800f992:	607a      	str	r2, [r7, #4]
 800f994:	603b      	str	r3, [r7, #0]
  err_t err;
  struct netif *netif;

  LWIP_ASSERT("tcp_output_control_segment: invalid pbuf", p != NULL);
 800f996:	68bb      	ldr	r3, [r7, #8]
 800f998:	2b00      	cmp	r3, #0
 800f99a:	d106      	bne.n	800f9aa <tcp_output_control_segment+0x22>
 800f99c:	4b20      	ldr	r3, [pc, #128]	; (800fa20 <tcp_output_control_segment+0x98>)
 800f99e:	f240 7287 	movw	r2, #1927	; 0x787
 800f9a2:	4920      	ldr	r1, [pc, #128]	; (800fa24 <tcp_output_control_segment+0x9c>)
 800f9a4:	4820      	ldr	r0, [pc, #128]	; (800fa28 <tcp_output_control_segment+0xa0>)
 800f9a6:	f003 ffdf 	bl	8013968 <iprintf>

  netif = tcp_route(pcb, src, dst);
 800f9aa:	683a      	ldr	r2, [r7, #0]
 800f9ac:	6879      	ldr	r1, [r7, #4]
 800f9ae:	68f8      	ldr	r0, [r7, #12]
 800f9b0:	f7fe ff10 	bl	800e7d4 <tcp_route>
 800f9b4:	6138      	str	r0, [r7, #16]
  if (netif == NULL) {
 800f9b6:	693b      	ldr	r3, [r7, #16]
 800f9b8:	2b00      	cmp	r3, #0
 800f9ba:	d102      	bne.n	800f9c2 <tcp_output_control_segment+0x3a>
    err = ERR_RTE;
 800f9bc:	23fc      	movs	r3, #252	; 0xfc
 800f9be:	75fb      	strb	r3, [r7, #23]
 800f9c0:	e024      	b.n	800fa0c <tcp_output_control_segment+0x84>
      struct tcp_hdr *tcphdr = (struct tcp_hdr *)p->payload;
      tcphdr->chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
                                        src, dst);
    }
#endif
    if (pcb != NULL) {
 800f9c2:	68fb      	ldr	r3, [r7, #12]
 800f9c4:	2b00      	cmp	r3, #0
 800f9c6:	d006      	beq.n	800f9d6 <tcp_output_control_segment+0x4e>
      NETIF_SET_HINTS(netif, LWIP_CONST_CAST(struct netif_hint*, &(pcb->netif_hints)));
      ttl = pcb->ttl;
 800f9c8:	68fb      	ldr	r3, [r7, #12]
 800f9ca:	7adb      	ldrb	r3, [r3, #11]
 800f9cc:	75bb      	strb	r3, [r7, #22]
      tos = pcb->tos;
 800f9ce:	68fb      	ldr	r3, [r7, #12]
 800f9d0:	7a9b      	ldrb	r3, [r3, #10]
 800f9d2:	757b      	strb	r3, [r7, #21]
 800f9d4:	e003      	b.n	800f9de <tcp_output_control_segment+0x56>
    } else {
      /* Send output with hardcoded TTL/HL since we have no access to the pcb */
      ttl = TCP_TTL;
 800f9d6:	23ff      	movs	r3, #255	; 0xff
 800f9d8:	75bb      	strb	r3, [r7, #22]
      tos = 0;
 800f9da:	2300      	movs	r3, #0
 800f9dc:	757b      	strb	r3, [r7, #21]
    }
    TCP_STATS_INC(tcp.xmit);
 800f9de:	4b13      	ldr	r3, [pc, #76]	; (800fa2c <tcp_output_control_segment+0xa4>)
 800f9e0:	f8b3 3090 	ldrh.w	r3, [r3, #144]	; 0x90
 800f9e4:	3301      	adds	r3, #1
 800f9e6:	b29a      	uxth	r2, r3
 800f9e8:	4b10      	ldr	r3, [pc, #64]	; (800fa2c <tcp_output_control_segment+0xa4>)
 800f9ea:	f8a3 2090 	strh.w	r2, [r3, #144]	; 0x90
    err = ip_output_if(p, src, dst, ttl, tos, IP_PROTO_TCP, netif);
 800f9ee:	7dba      	ldrb	r2, [r7, #22]
 800f9f0:	693b      	ldr	r3, [r7, #16]
 800f9f2:	9302      	str	r3, [sp, #8]
 800f9f4:	2306      	movs	r3, #6
 800f9f6:	9301      	str	r3, [sp, #4]
 800f9f8:	7d7b      	ldrb	r3, [r7, #21]
 800f9fa:	9300      	str	r3, [sp, #0]
 800f9fc:	4613      	mov	r3, r2
 800f9fe:	683a      	ldr	r2, [r7, #0]
 800fa00:	6879      	ldr	r1, [r7, #4]
 800fa02:	68b8      	ldr	r0, [r7, #8]
 800fa04:	f002 fbde 	bl	80121c4 <ip4_output_if>
 800fa08:	4603      	mov	r3, r0
 800fa0a:	75fb      	strb	r3, [r7, #23]
    NETIF_RESET_HINTS(netif);
  }
  pbuf_free(p);
 800fa0c:	68b8      	ldr	r0, [r7, #8]
 800fa0e:	f7fa fcf9 	bl	800a404 <pbuf_free>
  return err;
 800fa12:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800fa16:	4618      	mov	r0, r3
 800fa18:	3718      	adds	r7, #24
 800fa1a:	46bd      	mov	sp, r7
 800fa1c:	bd80      	pop	{r7, pc}
 800fa1e:	bf00      	nop
 800fa20:	08016028 	.word	0x08016028
 800fa24:	08016780 	.word	0x08016780
 800fa28:	0801607c 	.word	0x0801607c
 800fa2c:	2000c64c 	.word	0x2000c64c

0800fa30 <tcp_rst>:
 */
void
tcp_rst(const struct tcp_pcb *pcb, u32_t seqno, u32_t ackno,
        const ip_addr_t *local_ip, const ip_addr_t *remote_ip,
        u16_t local_port, u16_t remote_port)
{
 800fa30:	b590      	push	{r4, r7, lr}
 800fa32:	b08b      	sub	sp, #44	; 0x2c
 800fa34:	af04      	add	r7, sp, #16
 800fa36:	60f8      	str	r0, [r7, #12]
 800fa38:	60b9      	str	r1, [r7, #8]
 800fa3a:	607a      	str	r2, [r7, #4]
 800fa3c:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  u16_t wnd;
  u8_t optlen;

  LWIP_ASSERT("tcp_rst: invalid local_ip", local_ip != NULL);
 800fa3e:	683b      	ldr	r3, [r7, #0]
 800fa40:	2b00      	cmp	r3, #0
 800fa42:	d106      	bne.n	800fa52 <tcp_rst+0x22>
 800fa44:	4b1f      	ldr	r3, [pc, #124]	; (800fac4 <tcp_rst+0x94>)
 800fa46:	f240 72c4 	movw	r2, #1988	; 0x7c4
 800fa4a:	491f      	ldr	r1, [pc, #124]	; (800fac8 <tcp_rst+0x98>)
 800fa4c:	481f      	ldr	r0, [pc, #124]	; (800facc <tcp_rst+0x9c>)
 800fa4e:	f003 ff8b 	bl	8013968 <iprintf>
  LWIP_ASSERT("tcp_rst: invalid remote_ip", remote_ip != NULL);
 800fa52:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fa54:	2b00      	cmp	r3, #0
 800fa56:	d106      	bne.n	800fa66 <tcp_rst+0x36>
 800fa58:	4b1a      	ldr	r3, [pc, #104]	; (800fac4 <tcp_rst+0x94>)
 800fa5a:	f240 72c5 	movw	r2, #1989	; 0x7c5
 800fa5e:	491c      	ldr	r1, [pc, #112]	; (800fad0 <tcp_rst+0xa0>)
 800fa60:	481a      	ldr	r0, [pc, #104]	; (800facc <tcp_rst+0x9c>)
 800fa62:	f003 ff81 	bl	8013968 <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 800fa66:	2300      	movs	r3, #0
 800fa68:	75fb      	strb	r3, [r7, #23]

#if LWIP_WND_SCALE
  wnd = PP_HTONS(((TCP_WND >> TCP_RCV_SCALE) & 0xFFFF));
#else
  wnd = PP_HTONS(TCP_WND);
 800fa6a:	f246 0308 	movw	r3, #24584	; 0x6008
 800fa6e:	82bb      	strh	r3, [r7, #20]
#endif

  p = tcp_output_alloc_header_common(ackno, optlen, 0, lwip_htonl(seqno), local_port,
 800fa70:	7dfb      	ldrb	r3, [r7, #23]
 800fa72:	b29c      	uxth	r4, r3
 800fa74:	68b8      	ldr	r0, [r7, #8]
 800fa76:	f7f9 f818 	bl	8008aaa <lwip_htonl>
 800fa7a:	4602      	mov	r2, r0
 800fa7c:	8abb      	ldrh	r3, [r7, #20]
 800fa7e:	9303      	str	r3, [sp, #12]
 800fa80:	2314      	movs	r3, #20
 800fa82:	9302      	str	r3, [sp, #8]
 800fa84:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 800fa86:	9301      	str	r3, [sp, #4]
 800fa88:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800fa8a:	9300      	str	r3, [sp, #0]
 800fa8c:	4613      	mov	r3, r2
 800fa8e:	2200      	movs	r2, #0
 800fa90:	4621      	mov	r1, r4
 800fa92:	6878      	ldr	r0, [r7, #4]
 800fa94:	f7ff fe88 	bl	800f7a8 <tcp_output_alloc_header_common>
 800fa98:	6138      	str	r0, [r7, #16]
    remote_port, TCP_RST | TCP_ACK, wnd);
  if (p == NULL) {
 800fa9a:	693b      	ldr	r3, [r7, #16]
 800fa9c:	2b00      	cmp	r3, #0
 800fa9e:	d00c      	beq.n	800faba <tcp_rst+0x8a>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_rst: could not allocate memory for pbuf\n"));
    return;
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 800faa0:	7dfb      	ldrb	r3, [r7, #23]
 800faa2:	2200      	movs	r2, #0
 800faa4:	6939      	ldr	r1, [r7, #16]
 800faa6:	68f8      	ldr	r0, [r7, #12]
 800faa8:	f7ff ff2e 	bl	800f908 <tcp_output_fill_options>

  MIB2_STATS_INC(mib2.tcpoutrsts);

  tcp_output_control_segment(pcb, p, local_ip, remote_ip);
 800faac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800faae:	683a      	ldr	r2, [r7, #0]
 800fab0:	6939      	ldr	r1, [r7, #16]
 800fab2:	68f8      	ldr	r0, [r7, #12]
 800fab4:	f7ff ff68 	bl	800f988 <tcp_output_control_segment>
 800fab8:	e000      	b.n	800fabc <tcp_rst+0x8c>
    return;
 800faba:	bf00      	nop
  LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_rst: seqno %"U32_F" ackno %"U32_F".\n", seqno, ackno));
}
 800fabc:	371c      	adds	r7, #28
 800fabe:	46bd      	mov	sp, r7
 800fac0:	bd90      	pop	{r4, r7, pc}
 800fac2:	bf00      	nop
 800fac4:	08016028 	.word	0x08016028
 800fac8:	080167ac 	.word	0x080167ac
 800facc:	0801607c 	.word	0x0801607c
 800fad0:	080167c8 	.word	0x080167c8

0800fad4 <tcp_send_empty_ack>:
 *
 * @param pcb Protocol control block for the TCP connection to send the ACK
 */
err_t
tcp_send_empty_ack(struct tcp_pcb *pcb)
{
 800fad4:	b590      	push	{r4, r7, lr}
 800fad6:	b087      	sub	sp, #28
 800fad8:	af00      	add	r7, sp, #0
 800fada:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen, optflags = 0;
 800fadc:	2300      	movs	r3, #0
 800fade:	75fb      	strb	r3, [r7, #23]
  u8_t num_sacks = 0;
 800fae0:	2300      	movs	r3, #0
 800fae2:	75bb      	strb	r3, [r7, #22]

  LWIP_ASSERT("tcp_send_empty_ack: invalid pcb", pcb != NULL);
 800fae4:	687b      	ldr	r3, [r7, #4]
 800fae6:	2b00      	cmp	r3, #0
 800fae8:	d106      	bne.n	800faf8 <tcp_send_empty_ack+0x24>
 800faea:	4b28      	ldr	r3, [pc, #160]	; (800fb8c <tcp_send_empty_ack+0xb8>)
 800faec:	f240 72ea 	movw	r2, #2026	; 0x7ea
 800faf0:	4927      	ldr	r1, [pc, #156]	; (800fb90 <tcp_send_empty_ack+0xbc>)
 800faf2:	4828      	ldr	r0, [pc, #160]	; (800fb94 <tcp_send_empty_ack+0xc0>)
 800faf4:	f003 ff38 	bl	8013968 <iprintf>
#if LWIP_TCP_TIMESTAMPS
  if (pcb->flags & TF_TIMESTAMP) {
    optflags = TF_SEG_OPTS_TS;
  }
#endif
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 800faf8:	7dfb      	ldrb	r3, [r7, #23]
 800fafa:	009b      	lsls	r3, r3, #2
 800fafc:	b2db      	uxtb	r3, r3
 800fafe:	f003 0304 	and.w	r3, r3, #4
 800fb02:	757b      	strb	r3, [r7, #21]
  if ((num_sacks = tcp_get_num_sacks(pcb, optlen)) > 0) {
    optlen += 4 + num_sacks * 8; /* 4 bytes for header (including 2*NOP), plus 8B for each SACK */
  }
#endif

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt));
 800fb04:	7d7b      	ldrb	r3, [r7, #21]
 800fb06:	b29c      	uxth	r4, r3
 800fb08:	687b      	ldr	r3, [r7, #4]
 800fb0a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800fb0c:	4618      	mov	r0, r3
 800fb0e:	f7f8 ffcc 	bl	8008aaa <lwip_htonl>
 800fb12:	4603      	mov	r3, r0
 800fb14:	2200      	movs	r2, #0
 800fb16:	4621      	mov	r1, r4
 800fb18:	6878      	ldr	r0, [r7, #4]
 800fb1a:	f7ff feb7 	bl	800f88c <tcp_output_alloc_header>
 800fb1e:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 800fb20:	693b      	ldr	r3, [r7, #16]
 800fb22:	2b00      	cmp	r3, #0
 800fb24:	d109      	bne.n	800fb3a <tcp_send_empty_ack+0x66>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800fb26:	687b      	ldr	r3, [r7, #4]
 800fb28:	8b5b      	ldrh	r3, [r3, #26]
 800fb2a:	f043 0303 	orr.w	r3, r3, #3
 800fb2e:	b29a      	uxth	r2, r3
 800fb30:	687b      	ldr	r3, [r7, #4]
 800fb32:	835a      	strh	r2, [r3, #26]
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output: (ACK) could not allocate pbuf\n"));
    return ERR_BUF;
 800fb34:	f06f 0301 	mvn.w	r3, #1
 800fb38:	e023      	b.n	800fb82 <tcp_send_empty_ack+0xae>
  }
  tcp_output_fill_options(pcb, p, optflags, num_sacks);
 800fb3a:	7dbb      	ldrb	r3, [r7, #22]
 800fb3c:	7dfa      	ldrb	r2, [r7, #23]
 800fb3e:	6939      	ldr	r1, [r7, #16]
 800fb40:	6878      	ldr	r0, [r7, #4]
 800fb42:	f7ff fee1 	bl	800f908 <tcp_output_fill_options>
  pcb->ts_lastacksent = pcb->rcv_nxt;
#endif

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG,
              ("tcp_output: sending ACK for %"U32_F"\n", pcb->rcv_nxt));
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 800fb46:	687a      	ldr	r2, [r7, #4]
 800fb48:	687b      	ldr	r3, [r7, #4]
 800fb4a:	3304      	adds	r3, #4
 800fb4c:	6939      	ldr	r1, [r7, #16]
 800fb4e:	6878      	ldr	r0, [r7, #4]
 800fb50:	f7ff ff1a 	bl	800f988 <tcp_output_control_segment>
 800fb54:	4603      	mov	r3, r0
 800fb56:	73fb      	strb	r3, [r7, #15]
  if (err != ERR_OK) {
 800fb58:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800fb5c:	2b00      	cmp	r3, #0
 800fb5e:	d007      	beq.n	800fb70 <tcp_send_empty_ack+0x9c>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800fb60:	687b      	ldr	r3, [r7, #4]
 800fb62:	8b5b      	ldrh	r3, [r3, #26]
 800fb64:	f043 0303 	orr.w	r3, r3, #3
 800fb68:	b29a      	uxth	r2, r3
 800fb6a:	687b      	ldr	r3, [r7, #4]
 800fb6c:	835a      	strh	r2, [r3, #26]
 800fb6e:	e006      	b.n	800fb7e <tcp_send_empty_ack+0xaa>
  } else {
    /* remove ACK flags from the PCB, as we sent an empty ACK now */
    tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800fb70:	687b      	ldr	r3, [r7, #4]
 800fb72:	8b5b      	ldrh	r3, [r3, #26]
 800fb74:	f023 0303 	bic.w	r3, r3, #3
 800fb78:	b29a      	uxth	r2, r3
 800fb7a:	687b      	ldr	r3, [r7, #4]
 800fb7c:	835a      	strh	r2, [r3, #26]
  }

  return err;
 800fb7e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800fb82:	4618      	mov	r0, r3
 800fb84:	371c      	adds	r7, #28
 800fb86:	46bd      	mov	sp, r7
 800fb88:	bd90      	pop	{r4, r7, pc}
 800fb8a:	bf00      	nop
 800fb8c:	08016028 	.word	0x08016028
 800fb90:	080167e4 	.word	0x080167e4
 800fb94:	0801607c 	.word	0x0801607c

0800fb98 <tcp_keepalive>:
 *
 * @param pcb the tcp_pcb for which to send a keepalive packet
 */
err_t
tcp_keepalive(struct tcp_pcb *pcb)
{
 800fb98:	b590      	push	{r4, r7, lr}
 800fb9a:	b087      	sub	sp, #28
 800fb9c:	af00      	add	r7, sp, #0
 800fb9e:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 800fba0:	2300      	movs	r3, #0
 800fba2:	75fb      	strb	r3, [r7, #23]

  LWIP_ASSERT("tcp_keepalive: invalid pcb", pcb != NULL);
 800fba4:	687b      	ldr	r3, [r7, #4]
 800fba6:	2b00      	cmp	r3, #0
 800fba8:	d106      	bne.n	800fbb8 <tcp_keepalive+0x20>
 800fbaa:	4b18      	ldr	r3, [pc, #96]	; (800fc0c <tcp_keepalive+0x74>)
 800fbac:	f640 0224 	movw	r2, #2084	; 0x824
 800fbb0:	4917      	ldr	r1, [pc, #92]	; (800fc10 <tcp_keepalive+0x78>)
 800fbb2:	4818      	ldr	r0, [pc, #96]	; (800fc14 <tcp_keepalive+0x7c>)
 800fbb4:	f003 fed8 	bl	8013968 <iprintf>
  LWIP_DEBUGF(TCP_DEBUG, ("\n"));

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: tcp_ticks %"U32_F"   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
                          tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt - 1));
 800fbb8:	7dfb      	ldrb	r3, [r7, #23]
 800fbba:	b29c      	uxth	r4, r3
 800fbbc:	687b      	ldr	r3, [r7, #4]
 800fbbe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800fbc0:	3b01      	subs	r3, #1
 800fbc2:	4618      	mov	r0, r3
 800fbc4:	f7f8 ff71 	bl	8008aaa <lwip_htonl>
 800fbc8:	4603      	mov	r3, r0
 800fbca:	2200      	movs	r2, #0
 800fbcc:	4621      	mov	r1, r4
 800fbce:	6878      	ldr	r0, [r7, #4]
 800fbd0:	f7ff fe5c 	bl	800f88c <tcp_output_alloc_header>
 800fbd4:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 800fbd6:	693b      	ldr	r3, [r7, #16]
 800fbd8:	2b00      	cmp	r3, #0
 800fbda:	d102      	bne.n	800fbe2 <tcp_keepalive+0x4a>
    LWIP_DEBUGF(TCP_DEBUG,
                ("tcp_keepalive: could not allocate memory for pbuf\n"));
    return ERR_MEM;
 800fbdc:	f04f 33ff 	mov.w	r3, #4294967295
 800fbe0:	e010      	b.n	800fc04 <tcp_keepalive+0x6c>
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 800fbe2:	7dfb      	ldrb	r3, [r7, #23]
 800fbe4:	2200      	movs	r2, #0
 800fbe6:	6939      	ldr	r1, [r7, #16]
 800fbe8:	6878      	ldr	r0, [r7, #4]
 800fbea:	f7ff fe8d 	bl	800f908 <tcp_output_fill_options>
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 800fbee:	687a      	ldr	r2, [r7, #4]
 800fbf0:	687b      	ldr	r3, [r7, #4]
 800fbf2:	3304      	adds	r3, #4
 800fbf4:	6939      	ldr	r1, [r7, #16]
 800fbf6:	6878      	ldr	r0, [r7, #4]
 800fbf8:	f7ff fec6 	bl	800f988 <tcp_output_control_segment>
 800fbfc:	4603      	mov	r3, r0
 800fbfe:	73fb      	strb	r3, [r7, #15]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: seqno %"U32_F" ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 800fc00:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800fc04:	4618      	mov	r0, r3
 800fc06:	371c      	adds	r7, #28
 800fc08:	46bd      	mov	sp, r7
 800fc0a:	bd90      	pop	{r4, r7, pc}
 800fc0c:	08016028 	.word	0x08016028
 800fc10:	08016804 	.word	0x08016804
 800fc14:	0801607c 	.word	0x0801607c

0800fc18 <tcp_zero_window_probe>:
 *
 * @param pcb the tcp_pcb for which to send a zero-window probe packet
 */
err_t
tcp_zero_window_probe(struct tcp_pcb *pcb)
{
 800fc18:	b590      	push	{r4, r7, lr}
 800fc1a:	b08b      	sub	sp, #44	; 0x2c
 800fc1c:	af00      	add	r7, sp, #0
 800fc1e:	6078      	str	r0, [r7, #4]
  struct tcp_hdr *tcphdr;
  struct tcp_seg *seg;
  u16_t len;
  u8_t is_fin;
  u32_t snd_nxt;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 800fc20:	2300      	movs	r3, #0
 800fc22:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  LWIP_ASSERT("tcp_zero_window_probe: invalid pcb", pcb != NULL);
 800fc26:	687b      	ldr	r3, [r7, #4]
 800fc28:	2b00      	cmp	r3, #0
 800fc2a:	d106      	bne.n	800fc3a <tcp_zero_window_probe+0x22>
 800fc2c:	4b4c      	ldr	r3, [pc, #304]	; (800fd60 <tcp_zero_window_probe+0x148>)
 800fc2e:	f640 024f 	movw	r2, #2127	; 0x84f
 800fc32:	494c      	ldr	r1, [pc, #304]	; (800fd64 <tcp_zero_window_probe+0x14c>)
 800fc34:	484c      	ldr	r0, [pc, #304]	; (800fd68 <tcp_zero_window_probe+0x150>)
 800fc36:	f003 fe97 	bl	8013968 <iprintf>
              ("tcp_zero_window_probe: tcp_ticks %"U32_F
               "   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
               tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  /* Only consider unsent, persist timer should be off when there is data in-flight */
  seg = pcb->unsent;
 800fc3a:	687b      	ldr	r3, [r7, #4]
 800fc3c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800fc3e:	623b      	str	r3, [r7, #32]
  if (seg == NULL) {
 800fc40:	6a3b      	ldr	r3, [r7, #32]
 800fc42:	2b00      	cmp	r3, #0
 800fc44:	d101      	bne.n	800fc4a <tcp_zero_window_probe+0x32>
    /* Not expected, persist timer should be off when the send buffer is empty */
    return ERR_OK;
 800fc46:	2300      	movs	r3, #0
 800fc48:	e086      	b.n	800fd58 <tcp_zero_window_probe+0x140>

  /* increment probe count. NOTE: we record probe even if it fails
     to actually transmit due to an error. This ensures memory exhaustion/
     routing problem doesn't leave a zero-window pcb as an indefinite zombie.
     RTO mechanism has similar behavior, see pcb->nrtx */
  if (pcb->persist_probe < 0xFF) {
 800fc4a:	687b      	ldr	r3, [r7, #4]
 800fc4c:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 800fc50:	2bff      	cmp	r3, #255	; 0xff
 800fc52:	d007      	beq.n	800fc64 <tcp_zero_window_probe+0x4c>
    ++pcb->persist_probe;
 800fc54:	687b      	ldr	r3, [r7, #4]
 800fc56:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 800fc5a:	3301      	adds	r3, #1
 800fc5c:	b2da      	uxtb	r2, r3
 800fc5e:	687b      	ldr	r3, [r7, #4]
 800fc60:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
  }

  is_fin = ((TCPH_FLAGS(seg->tcphdr) & TCP_FIN) != 0) && (seg->len == 0);
 800fc64:	6a3b      	ldr	r3, [r7, #32]
 800fc66:	68db      	ldr	r3, [r3, #12]
 800fc68:	899b      	ldrh	r3, [r3, #12]
 800fc6a:	b29b      	uxth	r3, r3
 800fc6c:	4618      	mov	r0, r3
 800fc6e:	f7f8 ff07 	bl	8008a80 <lwip_htons>
 800fc72:	4603      	mov	r3, r0
 800fc74:	b2db      	uxtb	r3, r3
 800fc76:	f003 0301 	and.w	r3, r3, #1
 800fc7a:	2b00      	cmp	r3, #0
 800fc7c:	d005      	beq.n	800fc8a <tcp_zero_window_probe+0x72>
 800fc7e:	6a3b      	ldr	r3, [r7, #32]
 800fc80:	891b      	ldrh	r3, [r3, #8]
 800fc82:	2b00      	cmp	r3, #0
 800fc84:	d101      	bne.n	800fc8a <tcp_zero_window_probe+0x72>
 800fc86:	2301      	movs	r3, #1
 800fc88:	e000      	b.n	800fc8c <tcp_zero_window_probe+0x74>
 800fc8a:	2300      	movs	r3, #0
 800fc8c:	77fb      	strb	r3, [r7, #31]
  /* we want to send one seqno: either FIN or data (no options) */
  len = is_fin ? 0 : 1;
 800fc8e:	7ffb      	ldrb	r3, [r7, #31]
 800fc90:	2b00      	cmp	r3, #0
 800fc92:	bf0c      	ite	eq
 800fc94:	2301      	moveq	r3, #1
 800fc96:	2300      	movne	r3, #0
 800fc98:	b2db      	uxtb	r3, r3
 800fc9a:	83bb      	strh	r3, [r7, #28]

  p = tcp_output_alloc_header(pcb, optlen, len, seg->tcphdr->seqno);
 800fc9c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800fca0:	b299      	uxth	r1, r3
 800fca2:	6a3b      	ldr	r3, [r7, #32]
 800fca4:	68db      	ldr	r3, [r3, #12]
 800fca6:	685b      	ldr	r3, [r3, #4]
 800fca8:	8bba      	ldrh	r2, [r7, #28]
 800fcaa:	6878      	ldr	r0, [r7, #4]
 800fcac:	f7ff fdee 	bl	800f88c <tcp_output_alloc_header>
 800fcb0:	61b8      	str	r0, [r7, #24]
  if (p == NULL) {
 800fcb2:	69bb      	ldr	r3, [r7, #24]
 800fcb4:	2b00      	cmp	r3, #0
 800fcb6:	d102      	bne.n	800fcbe <tcp_zero_window_probe+0xa6>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: no memory for pbuf\n"));
    return ERR_MEM;
 800fcb8:	f04f 33ff 	mov.w	r3, #4294967295
 800fcbc:	e04c      	b.n	800fd58 <tcp_zero_window_probe+0x140>
  }
  tcphdr = (struct tcp_hdr *)p->payload;
 800fcbe:	69bb      	ldr	r3, [r7, #24]
 800fcc0:	685b      	ldr	r3, [r3, #4]
 800fcc2:	617b      	str	r3, [r7, #20]

  if (is_fin) {
 800fcc4:	7ffb      	ldrb	r3, [r7, #31]
 800fcc6:	2b00      	cmp	r3, #0
 800fcc8:	d011      	beq.n	800fcee <tcp_zero_window_probe+0xd6>
    /* FIN segment, no data */
    TCPH_FLAGS_SET(tcphdr, TCP_ACK | TCP_FIN);
 800fcca:	697b      	ldr	r3, [r7, #20]
 800fccc:	899b      	ldrh	r3, [r3, #12]
 800fcce:	b29b      	uxth	r3, r3
 800fcd0:	b21b      	sxth	r3, r3
 800fcd2:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800fcd6:	b21c      	sxth	r4, r3
 800fcd8:	2011      	movs	r0, #17
 800fcda:	f7f8 fed1 	bl	8008a80 <lwip_htons>
 800fcde:	4603      	mov	r3, r0
 800fce0:	b21b      	sxth	r3, r3
 800fce2:	4323      	orrs	r3, r4
 800fce4:	b21b      	sxth	r3, r3
 800fce6:	b29a      	uxth	r2, r3
 800fce8:	697b      	ldr	r3, [r7, #20]
 800fcea:	819a      	strh	r2, [r3, #12]
 800fcec:	e010      	b.n	800fd10 <tcp_zero_window_probe+0xf8>
  } else {
    /* Data segment, copy in one byte from the head of the unacked queue */
    char *d = ((char *)p->payload + TCP_HLEN);
 800fcee:	69bb      	ldr	r3, [r7, #24]
 800fcf0:	685b      	ldr	r3, [r3, #4]
 800fcf2:	3314      	adds	r3, #20
 800fcf4:	613b      	str	r3, [r7, #16]
    /* Depending on whether the segment has already been sent (unacked) or not
       (unsent), seg->p->payload points to the IP header or TCP header.
       Ensure we copy the first TCP data byte: */
    pbuf_copy_partial(seg->p, d, 1, seg->p->tot_len - seg->len);
 800fcf6:	6a3b      	ldr	r3, [r7, #32]
 800fcf8:	6858      	ldr	r0, [r3, #4]
 800fcfa:	6a3b      	ldr	r3, [r7, #32]
 800fcfc:	685b      	ldr	r3, [r3, #4]
 800fcfe:	891a      	ldrh	r2, [r3, #8]
 800fd00:	6a3b      	ldr	r3, [r7, #32]
 800fd02:	891b      	ldrh	r3, [r3, #8]
 800fd04:	1ad3      	subs	r3, r2, r3
 800fd06:	b29b      	uxth	r3, r3
 800fd08:	2201      	movs	r2, #1
 800fd0a:	6939      	ldr	r1, [r7, #16]
 800fd0c:	f7fa fd80 	bl	800a810 <pbuf_copy_partial>
  }

  /* The byte may be acknowledged without the window being opened. */
  snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + 1;
 800fd10:	6a3b      	ldr	r3, [r7, #32]
 800fd12:	68db      	ldr	r3, [r3, #12]
 800fd14:	685b      	ldr	r3, [r3, #4]
 800fd16:	4618      	mov	r0, r3
 800fd18:	f7f8 fec7 	bl	8008aaa <lwip_htonl>
 800fd1c:	4603      	mov	r3, r0
 800fd1e:	3301      	adds	r3, #1
 800fd20:	60fb      	str	r3, [r7, #12]
  if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 800fd22:	687b      	ldr	r3, [r7, #4]
 800fd24:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800fd26:	68fb      	ldr	r3, [r7, #12]
 800fd28:	1ad3      	subs	r3, r2, r3
 800fd2a:	2b00      	cmp	r3, #0
 800fd2c:	da02      	bge.n	800fd34 <tcp_zero_window_probe+0x11c>
    pcb->snd_nxt = snd_nxt;
 800fd2e:	687b      	ldr	r3, [r7, #4]
 800fd30:	68fa      	ldr	r2, [r7, #12]
 800fd32:	651a      	str	r2, [r3, #80]	; 0x50
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 800fd34:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800fd38:	2200      	movs	r2, #0
 800fd3a:	69b9      	ldr	r1, [r7, #24]
 800fd3c:	6878      	ldr	r0, [r7, #4]
 800fd3e:	f7ff fde3 	bl	800f908 <tcp_output_fill_options>

  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 800fd42:	687a      	ldr	r2, [r7, #4]
 800fd44:	687b      	ldr	r3, [r7, #4]
 800fd46:	3304      	adds	r3, #4
 800fd48:	69b9      	ldr	r1, [r7, #24]
 800fd4a:	6878      	ldr	r0, [r7, #4]
 800fd4c:	f7ff fe1c 	bl	800f988 <tcp_output_control_segment>
 800fd50:	4603      	mov	r3, r0
 800fd52:	72fb      	strb	r3, [r7, #11]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: seqno %"U32_F
                          " ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 800fd54:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 800fd58:	4618      	mov	r0, r3
 800fd5a:	372c      	adds	r7, #44	; 0x2c
 800fd5c:	46bd      	mov	sp, r7
 800fd5e:	bd90      	pop	{r4, r7, pc}
 800fd60:	08016028 	.word	0x08016028
 800fd64:	08016820 	.word	0x08016820
 800fd68:	0801607c 	.word	0x0801607c

0800fd6c <tcpip_tcp_timer>:
 *
 * @param arg unused argument
 */
static void
tcpip_tcp_timer(void *arg)
{
 800fd6c:	b580      	push	{r7, lr}
 800fd6e:	b082      	sub	sp, #8
 800fd70:	af00      	add	r7, sp, #0
 800fd72:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);

  /* call TCP timer handler */
  tcp_tmr();
 800fd74:	f7fa fe42 	bl	800a9fc <tcp_tmr>
  /* timer still needed? */
  if (tcp_active_pcbs || tcp_tw_pcbs) {
 800fd78:	4b0a      	ldr	r3, [pc, #40]	; (800fda4 <tcpip_tcp_timer+0x38>)
 800fd7a:	681b      	ldr	r3, [r3, #0]
 800fd7c:	2b00      	cmp	r3, #0
 800fd7e:	d103      	bne.n	800fd88 <tcpip_tcp_timer+0x1c>
 800fd80:	4b09      	ldr	r3, [pc, #36]	; (800fda8 <tcpip_tcp_timer+0x3c>)
 800fd82:	681b      	ldr	r3, [r3, #0]
 800fd84:	2b00      	cmp	r3, #0
 800fd86:	d005      	beq.n	800fd94 <tcpip_tcp_timer+0x28>
    /* restart timer */
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 800fd88:	2200      	movs	r2, #0
 800fd8a:	4908      	ldr	r1, [pc, #32]	; (800fdac <tcpip_tcp_timer+0x40>)
 800fd8c:	20fa      	movs	r0, #250	; 0xfa
 800fd8e:	f000 f8f3 	bl	800ff78 <sys_timeout>
 800fd92:	e003      	b.n	800fd9c <tcpip_tcp_timer+0x30>
  } else {
    /* disable timer */
    tcpip_tcp_timer_active = 0;
 800fd94:	4b06      	ldr	r3, [pc, #24]	; (800fdb0 <tcpip_tcp_timer+0x44>)
 800fd96:	2200      	movs	r2, #0
 800fd98:	601a      	str	r2, [r3, #0]
  }
}
 800fd9a:	bf00      	nop
 800fd9c:	bf00      	nop
 800fd9e:	3708      	adds	r7, #8
 800fda0:	46bd      	mov	sp, r7
 800fda2:	bd80      	pop	{r7, pc}
 800fda4:	2000c754 	.word	0x2000c754
 800fda8:	2000c758 	.word	0x2000c758
 800fdac:	0800fd6d 	.word	0x0800fd6d
 800fdb0:	2000c7a0 	.word	0x2000c7a0

0800fdb4 <tcp_timer_needed>:
 * the reason is to have the TCP timer only running when
 * there are active (or time-wait) PCBs.
 */
void
tcp_timer_needed(void)
{
 800fdb4:	b580      	push	{r7, lr}
 800fdb6:	af00      	add	r7, sp, #0
  LWIP_ASSERT_CORE_LOCKED();

  /* timer is off but needed again? */
  if (!tcpip_tcp_timer_active && (tcp_active_pcbs || tcp_tw_pcbs)) {
 800fdb8:	4b0a      	ldr	r3, [pc, #40]	; (800fde4 <tcp_timer_needed+0x30>)
 800fdba:	681b      	ldr	r3, [r3, #0]
 800fdbc:	2b00      	cmp	r3, #0
 800fdbe:	d10f      	bne.n	800fde0 <tcp_timer_needed+0x2c>
 800fdc0:	4b09      	ldr	r3, [pc, #36]	; (800fde8 <tcp_timer_needed+0x34>)
 800fdc2:	681b      	ldr	r3, [r3, #0]
 800fdc4:	2b00      	cmp	r3, #0
 800fdc6:	d103      	bne.n	800fdd0 <tcp_timer_needed+0x1c>
 800fdc8:	4b08      	ldr	r3, [pc, #32]	; (800fdec <tcp_timer_needed+0x38>)
 800fdca:	681b      	ldr	r3, [r3, #0]
 800fdcc:	2b00      	cmp	r3, #0
 800fdce:	d007      	beq.n	800fde0 <tcp_timer_needed+0x2c>
    /* enable and start timer */
    tcpip_tcp_timer_active = 1;
 800fdd0:	4b04      	ldr	r3, [pc, #16]	; (800fde4 <tcp_timer_needed+0x30>)
 800fdd2:	2201      	movs	r2, #1
 800fdd4:	601a      	str	r2, [r3, #0]
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 800fdd6:	2200      	movs	r2, #0
 800fdd8:	4905      	ldr	r1, [pc, #20]	; (800fdf0 <tcp_timer_needed+0x3c>)
 800fdda:	20fa      	movs	r0, #250	; 0xfa
 800fddc:	f000 f8cc 	bl	800ff78 <sys_timeout>
  }
}
 800fde0:	bf00      	nop
 800fde2:	bd80      	pop	{r7, pc}
 800fde4:	2000c7a0 	.word	0x2000c7a0
 800fde8:	2000c754 	.word	0x2000c754
 800fdec:	2000c758 	.word	0x2000c758
 800fdf0:	0800fd6d 	.word	0x0800fd6d

0800fdf4 <sys_timeout_abs>:
#if LWIP_DEBUG_TIMERNAMES
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg)
#endif
{
 800fdf4:	b580      	push	{r7, lr}
 800fdf6:	b086      	sub	sp, #24
 800fdf8:	af00      	add	r7, sp, #0
 800fdfa:	60f8      	str	r0, [r7, #12]
 800fdfc:	60b9      	str	r1, [r7, #8]
 800fdfe:	607a      	str	r2, [r7, #4]
  struct sys_timeo *timeout, *t;

  timeout = (struct sys_timeo *)memp_malloc(MEMP_SYS_TIMEOUT);
 800fe00:	200a      	movs	r0, #10
 800fe02:	f7f9 fbdf 	bl	80095c4 <memp_malloc>
 800fe06:	6138      	str	r0, [r7, #16]
  if (timeout == NULL) {
 800fe08:	693b      	ldr	r3, [r7, #16]
 800fe0a:	2b00      	cmp	r3, #0
 800fe0c:	d109      	bne.n	800fe22 <sys_timeout_abs+0x2e>
    LWIP_ASSERT("sys_timeout: timeout != NULL, pool MEMP_SYS_TIMEOUT is empty", timeout != NULL);
 800fe0e:	693b      	ldr	r3, [r7, #16]
 800fe10:	2b00      	cmp	r3, #0
 800fe12:	d151      	bne.n	800feb8 <sys_timeout_abs+0xc4>
 800fe14:	4b2a      	ldr	r3, [pc, #168]	; (800fec0 <sys_timeout_abs+0xcc>)
 800fe16:	22be      	movs	r2, #190	; 0xbe
 800fe18:	492a      	ldr	r1, [pc, #168]	; (800fec4 <sys_timeout_abs+0xd0>)
 800fe1a:	482b      	ldr	r0, [pc, #172]	; (800fec8 <sys_timeout_abs+0xd4>)
 800fe1c:	f003 fda4 	bl	8013968 <iprintf>
    return;
 800fe20:	e04a      	b.n	800feb8 <sys_timeout_abs+0xc4>
  }

  timeout->next = NULL;
 800fe22:	693b      	ldr	r3, [r7, #16]
 800fe24:	2200      	movs	r2, #0
 800fe26:	601a      	str	r2, [r3, #0]
  timeout->h = handler;
 800fe28:	693b      	ldr	r3, [r7, #16]
 800fe2a:	68ba      	ldr	r2, [r7, #8]
 800fe2c:	609a      	str	r2, [r3, #8]
  timeout->arg = arg;
 800fe2e:	693b      	ldr	r3, [r7, #16]
 800fe30:	687a      	ldr	r2, [r7, #4]
 800fe32:	60da      	str	r2, [r3, #12]
  timeout->time = abs_time;
 800fe34:	693b      	ldr	r3, [r7, #16]
 800fe36:	68fa      	ldr	r2, [r7, #12]
 800fe38:	605a      	str	r2, [r3, #4]
  timeout->handler_name = handler_name;
  LWIP_DEBUGF(TIMERS_DEBUG, ("sys_timeout: %p abs_time=%"U32_F" handler=%s arg=%p\n",
                             (void *)timeout, abs_time, handler_name, (void *)arg));
#endif /* LWIP_DEBUG_TIMERNAMES */

  if (next_timeout == NULL) {
 800fe3a:	4b24      	ldr	r3, [pc, #144]	; (800fecc <sys_timeout_abs+0xd8>)
 800fe3c:	681b      	ldr	r3, [r3, #0]
 800fe3e:	2b00      	cmp	r3, #0
 800fe40:	d103      	bne.n	800fe4a <sys_timeout_abs+0x56>
    next_timeout = timeout;
 800fe42:	4a22      	ldr	r2, [pc, #136]	; (800fecc <sys_timeout_abs+0xd8>)
 800fe44:	693b      	ldr	r3, [r7, #16]
 800fe46:	6013      	str	r3, [r2, #0]
    return;
 800fe48:	e037      	b.n	800feba <sys_timeout_abs+0xc6>
  }
  if (TIME_LESS_THAN(timeout->time, next_timeout->time)) {
 800fe4a:	693b      	ldr	r3, [r7, #16]
 800fe4c:	685a      	ldr	r2, [r3, #4]
 800fe4e:	4b1f      	ldr	r3, [pc, #124]	; (800fecc <sys_timeout_abs+0xd8>)
 800fe50:	681b      	ldr	r3, [r3, #0]
 800fe52:	685b      	ldr	r3, [r3, #4]
 800fe54:	1ad3      	subs	r3, r2, r3
 800fe56:	0fdb      	lsrs	r3, r3, #31
 800fe58:	f003 0301 	and.w	r3, r3, #1
 800fe5c:	b2db      	uxtb	r3, r3
 800fe5e:	2b00      	cmp	r3, #0
 800fe60:	d007      	beq.n	800fe72 <sys_timeout_abs+0x7e>
    timeout->next = next_timeout;
 800fe62:	4b1a      	ldr	r3, [pc, #104]	; (800fecc <sys_timeout_abs+0xd8>)
 800fe64:	681a      	ldr	r2, [r3, #0]
 800fe66:	693b      	ldr	r3, [r7, #16]
 800fe68:	601a      	str	r2, [r3, #0]
    next_timeout = timeout;
 800fe6a:	4a18      	ldr	r2, [pc, #96]	; (800fecc <sys_timeout_abs+0xd8>)
 800fe6c:	693b      	ldr	r3, [r7, #16]
 800fe6e:	6013      	str	r3, [r2, #0]
 800fe70:	e023      	b.n	800feba <sys_timeout_abs+0xc6>
  } else {
    for (t = next_timeout; t != NULL; t = t->next) {
 800fe72:	4b16      	ldr	r3, [pc, #88]	; (800fecc <sys_timeout_abs+0xd8>)
 800fe74:	681b      	ldr	r3, [r3, #0]
 800fe76:	617b      	str	r3, [r7, #20]
 800fe78:	e01a      	b.n	800feb0 <sys_timeout_abs+0xbc>
      if ((t->next == NULL) || TIME_LESS_THAN(timeout->time, t->next->time)) {
 800fe7a:	697b      	ldr	r3, [r7, #20]
 800fe7c:	681b      	ldr	r3, [r3, #0]
 800fe7e:	2b00      	cmp	r3, #0
 800fe80:	d00b      	beq.n	800fe9a <sys_timeout_abs+0xa6>
 800fe82:	693b      	ldr	r3, [r7, #16]
 800fe84:	685a      	ldr	r2, [r3, #4]
 800fe86:	697b      	ldr	r3, [r7, #20]
 800fe88:	681b      	ldr	r3, [r3, #0]
 800fe8a:	685b      	ldr	r3, [r3, #4]
 800fe8c:	1ad3      	subs	r3, r2, r3
 800fe8e:	0fdb      	lsrs	r3, r3, #31
 800fe90:	f003 0301 	and.w	r3, r3, #1
 800fe94:	b2db      	uxtb	r3, r3
 800fe96:	2b00      	cmp	r3, #0
 800fe98:	d007      	beq.n	800feaa <sys_timeout_abs+0xb6>
        timeout->next = t->next;
 800fe9a:	697b      	ldr	r3, [r7, #20]
 800fe9c:	681a      	ldr	r2, [r3, #0]
 800fe9e:	693b      	ldr	r3, [r7, #16]
 800fea0:	601a      	str	r2, [r3, #0]
        t->next = timeout;
 800fea2:	697b      	ldr	r3, [r7, #20]
 800fea4:	693a      	ldr	r2, [r7, #16]
 800fea6:	601a      	str	r2, [r3, #0]
        break;
 800fea8:	e007      	b.n	800feba <sys_timeout_abs+0xc6>
    for (t = next_timeout; t != NULL; t = t->next) {
 800feaa:	697b      	ldr	r3, [r7, #20]
 800feac:	681b      	ldr	r3, [r3, #0]
 800feae:	617b      	str	r3, [r7, #20]
 800feb0:	697b      	ldr	r3, [r7, #20]
 800feb2:	2b00      	cmp	r3, #0
 800feb4:	d1e1      	bne.n	800fe7a <sys_timeout_abs+0x86>
 800feb6:	e000      	b.n	800feba <sys_timeout_abs+0xc6>
    return;
 800feb8:	bf00      	nop
      }
    }
  }
}
 800feba:	3718      	adds	r7, #24
 800febc:	46bd      	mov	sp, r7
 800febe:	bd80      	pop	{r7, pc}
 800fec0:	08016844 	.word	0x08016844
 800fec4:	08016878 	.word	0x08016878
 800fec8:	080168b8 	.word	0x080168b8
 800fecc:	2000c798 	.word	0x2000c798

0800fed0 <lwip_cyclic_timer>:
#if !LWIP_TESTMODE
static
#endif
void
lwip_cyclic_timer(void *arg)
{
 800fed0:	b580      	push	{r7, lr}
 800fed2:	b086      	sub	sp, #24
 800fed4:	af00      	add	r7, sp, #0
 800fed6:	6078      	str	r0, [r7, #4]
  u32_t now;
  u32_t next_timeout_time;
  const struct lwip_cyclic_timer *cyclic = (const struct lwip_cyclic_timer *)arg;
 800fed8:	687b      	ldr	r3, [r7, #4]
 800feda:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  LWIP_DEBUGF(TIMERS_DEBUG, ("tcpip: %s()\n", cyclic->handler_name));
#endif
  cyclic->handler();
 800fedc:	697b      	ldr	r3, [r7, #20]
 800fede:	685b      	ldr	r3, [r3, #4]
 800fee0:	4798      	blx	r3

  now = sys_now();
 800fee2:	f7f5 fb23 	bl	800552c <sys_now>
 800fee6:	6138      	str	r0, [r7, #16]
  next_timeout_time = (u32_t)(current_timeout_due_time + cyclic->interval_ms);  /* overflow handled by TIME_LESS_THAN macro */ 
 800fee8:	697b      	ldr	r3, [r7, #20]
 800feea:	681a      	ldr	r2, [r3, #0]
 800feec:	4b0f      	ldr	r3, [pc, #60]	; (800ff2c <lwip_cyclic_timer+0x5c>)
 800feee:	681b      	ldr	r3, [r3, #0]
 800fef0:	4413      	add	r3, r2
 800fef2:	60fb      	str	r3, [r7, #12]
  if (TIME_LESS_THAN(next_timeout_time, now)) {
 800fef4:	68fa      	ldr	r2, [r7, #12]
 800fef6:	693b      	ldr	r3, [r7, #16]
 800fef8:	1ad3      	subs	r3, r2, r3
 800fefa:	0fdb      	lsrs	r3, r3, #31
 800fefc:	f003 0301 	and.w	r3, r3, #1
 800ff00:	b2db      	uxtb	r3, r3
 800ff02:	2b00      	cmp	r3, #0
 800ff04:	d009      	beq.n	800ff1a <lwip_cyclic_timer+0x4a>
    /* timer would immediately expire again -> "overload" -> restart without any correction */
#if LWIP_DEBUG_TIMERNAMES
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg);
 800ff06:	697b      	ldr	r3, [r7, #20]
 800ff08:	681a      	ldr	r2, [r3, #0]
 800ff0a:	693b      	ldr	r3, [r7, #16]
 800ff0c:	4413      	add	r3, r2
 800ff0e:	687a      	ldr	r2, [r7, #4]
 800ff10:	4907      	ldr	r1, [pc, #28]	; (800ff30 <lwip_cyclic_timer+0x60>)
 800ff12:	4618      	mov	r0, r3
 800ff14:	f7ff ff6e 	bl	800fdf4 <sys_timeout_abs>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
#endif
  }
}
 800ff18:	e004      	b.n	800ff24 <lwip_cyclic_timer+0x54>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
 800ff1a:	687a      	ldr	r2, [r7, #4]
 800ff1c:	4904      	ldr	r1, [pc, #16]	; (800ff30 <lwip_cyclic_timer+0x60>)
 800ff1e:	68f8      	ldr	r0, [r7, #12]
 800ff20:	f7ff ff68 	bl	800fdf4 <sys_timeout_abs>
}
 800ff24:	bf00      	nop
 800ff26:	3718      	adds	r7, #24
 800ff28:	46bd      	mov	sp, r7
 800ff2a:	bd80      	pop	{r7, pc}
 800ff2c:	2000c79c 	.word	0x2000c79c
 800ff30:	0800fed1 	.word	0x0800fed1

0800ff34 <sys_timeouts_init>:

/** Initialize this module */
void sys_timeouts_init(void)
{
 800ff34:	b580      	push	{r7, lr}
 800ff36:	b082      	sub	sp, #8
 800ff38:	af00      	add	r7, sp, #0
  size_t i;
  /* tcp_tmr() at index 0 is started on demand */
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 800ff3a:	2301      	movs	r3, #1
 800ff3c:	607b      	str	r3, [r7, #4]
 800ff3e:	e00e      	b.n	800ff5e <sys_timeouts_init+0x2a>
    /* we have to cast via size_t to get rid of const warning
      (this is OK as cyclic_timer() casts back to const* */
    sys_timeout(lwip_cyclic_timers[i].interval_ms, lwip_cyclic_timer, LWIP_CONST_CAST(void *, &lwip_cyclic_timers[i]));
 800ff40:	4a0b      	ldr	r2, [pc, #44]	; (800ff70 <sys_timeouts_init+0x3c>)
 800ff42:	687b      	ldr	r3, [r7, #4]
 800ff44:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 800ff48:	687b      	ldr	r3, [r7, #4]
 800ff4a:	00db      	lsls	r3, r3, #3
 800ff4c:	4a08      	ldr	r2, [pc, #32]	; (800ff70 <sys_timeouts_init+0x3c>)
 800ff4e:	4413      	add	r3, r2
 800ff50:	461a      	mov	r2, r3
 800ff52:	4908      	ldr	r1, [pc, #32]	; (800ff74 <sys_timeouts_init+0x40>)
 800ff54:	f000 f810 	bl	800ff78 <sys_timeout>
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 800ff58:	687b      	ldr	r3, [r7, #4]
 800ff5a:	3301      	adds	r3, #1
 800ff5c:	607b      	str	r3, [r7, #4]
 800ff5e:	687b      	ldr	r3, [r7, #4]
 800ff60:	2b02      	cmp	r3, #2
 800ff62:	d9ed      	bls.n	800ff40 <sys_timeouts_init+0xc>
  }
}
 800ff64:	bf00      	nop
 800ff66:	bf00      	nop
 800ff68:	3708      	adds	r7, #8
 800ff6a:	46bd      	mov	sp, r7
 800ff6c:	bd80      	pop	{r7, pc}
 800ff6e:	bf00      	nop
 800ff70:	080174a8 	.word	0x080174a8
 800ff74:	0800fed1 	.word	0x0800fed1

0800ff78 <sys_timeout>:
sys_timeout_debug(u32_t msecs, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
void
sys_timeout(u32_t msecs, sys_timeout_handler handler, void *arg)
#endif /* LWIP_DEBUG_TIMERNAMES */
{
 800ff78:	b580      	push	{r7, lr}
 800ff7a:	b086      	sub	sp, #24
 800ff7c:	af00      	add	r7, sp, #0
 800ff7e:	60f8      	str	r0, [r7, #12]
 800ff80:	60b9      	str	r1, [r7, #8]
 800ff82:	607a      	str	r2, [r7, #4]
  u32_t next_timeout_time;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("Timeout time too long, max is LWIP_UINT32_MAX/4 msecs", msecs <= (LWIP_UINT32_MAX / 4));
 800ff84:	68fb      	ldr	r3, [r7, #12]
 800ff86:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800ff8a:	d306      	bcc.n	800ff9a <sys_timeout+0x22>
 800ff8c:	4b0a      	ldr	r3, [pc, #40]	; (800ffb8 <sys_timeout+0x40>)
 800ff8e:	f240 1229 	movw	r2, #297	; 0x129
 800ff92:	490a      	ldr	r1, [pc, #40]	; (800ffbc <sys_timeout+0x44>)
 800ff94:	480a      	ldr	r0, [pc, #40]	; (800ffc0 <sys_timeout+0x48>)
 800ff96:	f003 fce7 	bl	8013968 <iprintf>

  next_timeout_time = (u32_t)(sys_now() + msecs); /* overflow handled by TIME_LESS_THAN macro */ 
 800ff9a:	f7f5 fac7 	bl	800552c <sys_now>
 800ff9e:	4602      	mov	r2, r0
 800ffa0:	68fb      	ldr	r3, [r7, #12]
 800ffa2:	4413      	add	r3, r2
 800ffa4:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  sys_timeout_abs(next_timeout_time, handler, arg, handler_name);
#else
  sys_timeout_abs(next_timeout_time, handler, arg);
 800ffa6:	687a      	ldr	r2, [r7, #4]
 800ffa8:	68b9      	ldr	r1, [r7, #8]
 800ffaa:	6978      	ldr	r0, [r7, #20]
 800ffac:	f7ff ff22 	bl	800fdf4 <sys_timeout_abs>
#endif
}
 800ffb0:	bf00      	nop
 800ffb2:	3718      	adds	r7, #24
 800ffb4:	46bd      	mov	sp, r7
 800ffb6:	bd80      	pop	{r7, pc}
 800ffb8:	08016844 	.word	0x08016844
 800ffbc:	080168e0 	.word	0x080168e0
 800ffc0:	080168b8 	.word	0x080168b8

0800ffc4 <sys_check_timeouts>:
 *
 * Must be called periodically from your main loop.
 */
void
sys_check_timeouts(void)
{
 800ffc4:	b580      	push	{r7, lr}
 800ffc6:	b084      	sub	sp, #16
 800ffc8:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  /* Process only timers expired at the start of the function. */
  now = sys_now();
 800ffca:	f7f5 faaf 	bl	800552c <sys_now>
 800ffce:	60f8      	str	r0, [r7, #12]
    sys_timeout_handler handler;
    void *arg;

    PBUF_CHECK_FREE_OOSEQ();

    tmptimeout = next_timeout;
 800ffd0:	4b17      	ldr	r3, [pc, #92]	; (8010030 <sys_check_timeouts+0x6c>)
 800ffd2:	681b      	ldr	r3, [r3, #0]
 800ffd4:	60bb      	str	r3, [r7, #8]
    if (tmptimeout == NULL) {
 800ffd6:	68bb      	ldr	r3, [r7, #8]
 800ffd8:	2b00      	cmp	r3, #0
 800ffda:	d022      	beq.n	8010022 <sys_check_timeouts+0x5e>
      return;
    }

    if (TIME_LESS_THAN(now, tmptimeout->time)) {
 800ffdc:	68bb      	ldr	r3, [r7, #8]
 800ffde:	685b      	ldr	r3, [r3, #4]
 800ffe0:	68fa      	ldr	r2, [r7, #12]
 800ffe2:	1ad3      	subs	r3, r2, r3
 800ffe4:	0fdb      	lsrs	r3, r3, #31
 800ffe6:	f003 0301 	and.w	r3, r3, #1
 800ffea:	b2db      	uxtb	r3, r3
 800ffec:	2b00      	cmp	r3, #0
 800ffee:	d11a      	bne.n	8010026 <sys_check_timeouts+0x62>
      return;
    }

    /* Timeout has expired */
    next_timeout = tmptimeout->next;
 800fff0:	68bb      	ldr	r3, [r7, #8]
 800fff2:	681b      	ldr	r3, [r3, #0]
 800fff4:	4a0e      	ldr	r2, [pc, #56]	; (8010030 <sys_check_timeouts+0x6c>)
 800fff6:	6013      	str	r3, [r2, #0]
    handler = tmptimeout->h;
 800fff8:	68bb      	ldr	r3, [r7, #8]
 800fffa:	689b      	ldr	r3, [r3, #8]
 800fffc:	607b      	str	r3, [r7, #4]
    arg = tmptimeout->arg;
 800fffe:	68bb      	ldr	r3, [r7, #8]
 8010000:	68db      	ldr	r3, [r3, #12]
 8010002:	603b      	str	r3, [r7, #0]
    current_timeout_due_time = tmptimeout->time;
 8010004:	68bb      	ldr	r3, [r7, #8]
 8010006:	685b      	ldr	r3, [r3, #4]
 8010008:	4a0a      	ldr	r2, [pc, #40]	; (8010034 <sys_check_timeouts+0x70>)
 801000a:	6013      	str	r3, [r2, #0]
    if (handler != NULL) {
      LWIP_DEBUGF(TIMERS_DEBUG, ("sct calling h=%s t=%"U32_F" arg=%p\n",
                                 tmptimeout->handler_name, sys_now() - tmptimeout->time, arg));
    }
#endif /* LWIP_DEBUG_TIMERNAMES */
    memp_free(MEMP_SYS_TIMEOUT, tmptimeout);
 801000c:	68b9      	ldr	r1, [r7, #8]
 801000e:	200a      	movs	r0, #10
 8010010:	f7f9 fb54 	bl	80096bc <memp_free>
    if (handler != NULL) {
 8010014:	687b      	ldr	r3, [r7, #4]
 8010016:	2b00      	cmp	r3, #0
 8010018:	d0da      	beq.n	800ffd0 <sys_check_timeouts+0xc>
      handler(arg);
 801001a:	687b      	ldr	r3, [r7, #4]
 801001c:	6838      	ldr	r0, [r7, #0]
 801001e:	4798      	blx	r3
  do {
 8010020:	e7d6      	b.n	800ffd0 <sys_check_timeouts+0xc>
      return;
 8010022:	bf00      	nop
 8010024:	e000      	b.n	8010028 <sys_check_timeouts+0x64>
      return;
 8010026:	bf00      	nop
    }
    LWIP_TCPIP_THREAD_ALIVE();

    /* Repeat until all expired timers have been called */
  } while (1);
}
 8010028:	3710      	adds	r7, #16
 801002a:	46bd      	mov	sp, r7
 801002c:	bd80      	pop	{r7, pc}
 801002e:	bf00      	nop
 8010030:	2000c798 	.word	0x2000c798
 8010034:	2000c79c 	.word	0x2000c79c

08010038 <sys_timeouts_sleeptime>:
/** Return the time left before the next timeout is due. If no timeouts are
 * enqueued, returns 0xffffffff
 */
u32_t
sys_timeouts_sleeptime(void)
{
 8010038:	b580      	push	{r7, lr}
 801003a:	b082      	sub	sp, #8
 801003c:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  if (next_timeout == NULL) {
 801003e:	4b16      	ldr	r3, [pc, #88]	; (8010098 <sys_timeouts_sleeptime+0x60>)
 8010040:	681b      	ldr	r3, [r3, #0]
 8010042:	2b00      	cmp	r3, #0
 8010044:	d102      	bne.n	801004c <sys_timeouts_sleeptime+0x14>
    return SYS_TIMEOUTS_SLEEPTIME_INFINITE;
 8010046:	f04f 33ff 	mov.w	r3, #4294967295
 801004a:	e020      	b.n	801008e <sys_timeouts_sleeptime+0x56>
  }
  now = sys_now();
 801004c:	f7f5 fa6e 	bl	800552c <sys_now>
 8010050:	6078      	str	r0, [r7, #4]
  if (TIME_LESS_THAN(next_timeout->time, now)) {
 8010052:	4b11      	ldr	r3, [pc, #68]	; (8010098 <sys_timeouts_sleeptime+0x60>)
 8010054:	681b      	ldr	r3, [r3, #0]
 8010056:	685a      	ldr	r2, [r3, #4]
 8010058:	687b      	ldr	r3, [r7, #4]
 801005a:	1ad3      	subs	r3, r2, r3
 801005c:	0fdb      	lsrs	r3, r3, #31
 801005e:	f003 0301 	and.w	r3, r3, #1
 8010062:	b2db      	uxtb	r3, r3
 8010064:	2b00      	cmp	r3, #0
 8010066:	d001      	beq.n	801006c <sys_timeouts_sleeptime+0x34>
    return 0;
 8010068:	2300      	movs	r3, #0
 801006a:	e010      	b.n	801008e <sys_timeouts_sleeptime+0x56>
  } else {
    u32_t ret = (u32_t)(next_timeout->time - now);
 801006c:	4b0a      	ldr	r3, [pc, #40]	; (8010098 <sys_timeouts_sleeptime+0x60>)
 801006e:	681b      	ldr	r3, [r3, #0]
 8010070:	685a      	ldr	r2, [r3, #4]
 8010072:	687b      	ldr	r3, [r7, #4]
 8010074:	1ad3      	subs	r3, r2, r3
 8010076:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("invalid sleeptime", ret <= LWIP_MAX_TIMEOUT);
 8010078:	683b      	ldr	r3, [r7, #0]
 801007a:	2b00      	cmp	r3, #0
 801007c:	da06      	bge.n	801008c <sys_timeouts_sleeptime+0x54>
 801007e:	4b07      	ldr	r3, [pc, #28]	; (801009c <sys_timeouts_sleeptime+0x64>)
 8010080:	f44f 72dc 	mov.w	r2, #440	; 0x1b8
 8010084:	4906      	ldr	r1, [pc, #24]	; (80100a0 <sys_timeouts_sleeptime+0x68>)
 8010086:	4807      	ldr	r0, [pc, #28]	; (80100a4 <sys_timeouts_sleeptime+0x6c>)
 8010088:	f003 fc6e 	bl	8013968 <iprintf>
    return ret;
 801008c:	683b      	ldr	r3, [r7, #0]
  }
}
 801008e:	4618      	mov	r0, r3
 8010090:	3708      	adds	r7, #8
 8010092:	46bd      	mov	sp, r7
 8010094:	bd80      	pop	{r7, pc}
 8010096:	bf00      	nop
 8010098:	2000c798 	.word	0x2000c798
 801009c:	08016844 	.word	0x08016844
 80100a0:	08016918 	.word	0x08016918
 80100a4:	080168b8 	.word	0x080168b8

080100a8 <udp_init>:
/**
 * Initialize this module.
 */
void
udp_init(void)
{
 80100a8:	b580      	push	{r7, lr}
 80100aa:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  udp_port = UDP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 80100ac:	f003 fc74 	bl	8013998 <rand>
 80100b0:	4603      	mov	r3, r0
 80100b2:	b29b      	uxth	r3, r3
 80100b4:	f3c3 030d 	ubfx	r3, r3, #0, #14
 80100b8:	b29b      	uxth	r3, r3
 80100ba:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 80100be:	b29a      	uxth	r2, r3
 80100c0:	4b01      	ldr	r3, [pc, #4]	; (80100c8 <udp_init+0x20>)
 80100c2:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 80100c4:	bf00      	nop
 80100c6:	bd80      	pop	{r7, pc}
 80100c8:	2000002c 	.word	0x2000002c

080100cc <udp_new_port>:
 *
 * @return a new (free) local UDP port number
 */
static u16_t
udp_new_port(void)
{
 80100cc:	b480      	push	{r7}
 80100ce:	b083      	sub	sp, #12
 80100d0:	af00      	add	r7, sp, #0
  u16_t n = 0;
 80100d2:	2300      	movs	r3, #0
 80100d4:	80fb      	strh	r3, [r7, #6]
  struct udp_pcb *pcb;

again:
  if (udp_port++ == UDP_LOCAL_PORT_RANGE_END) {
 80100d6:	4b17      	ldr	r3, [pc, #92]	; (8010134 <udp_new_port+0x68>)
 80100d8:	881b      	ldrh	r3, [r3, #0]
 80100da:	1c5a      	adds	r2, r3, #1
 80100dc:	b291      	uxth	r1, r2
 80100de:	4a15      	ldr	r2, [pc, #84]	; (8010134 <udp_new_port+0x68>)
 80100e0:	8011      	strh	r1, [r2, #0]
 80100e2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80100e6:	4293      	cmp	r3, r2
 80100e8:	d103      	bne.n	80100f2 <udp_new_port+0x26>
    udp_port = UDP_LOCAL_PORT_RANGE_START;
 80100ea:	4b12      	ldr	r3, [pc, #72]	; (8010134 <udp_new_port+0x68>)
 80100ec:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 80100f0:	801a      	strh	r2, [r3, #0]
  }
  /* Check all PCBs. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 80100f2:	4b11      	ldr	r3, [pc, #68]	; (8010138 <udp_new_port+0x6c>)
 80100f4:	681b      	ldr	r3, [r3, #0]
 80100f6:	603b      	str	r3, [r7, #0]
 80100f8:	e011      	b.n	801011e <udp_new_port+0x52>
    if (pcb->local_port == udp_port) {
 80100fa:	683b      	ldr	r3, [r7, #0]
 80100fc:	8a5a      	ldrh	r2, [r3, #18]
 80100fe:	4b0d      	ldr	r3, [pc, #52]	; (8010134 <udp_new_port+0x68>)
 8010100:	881b      	ldrh	r3, [r3, #0]
 8010102:	429a      	cmp	r2, r3
 8010104:	d108      	bne.n	8010118 <udp_new_port+0x4c>
      if (++n > (UDP_LOCAL_PORT_RANGE_END - UDP_LOCAL_PORT_RANGE_START)) {
 8010106:	88fb      	ldrh	r3, [r7, #6]
 8010108:	3301      	adds	r3, #1
 801010a:	80fb      	strh	r3, [r7, #6]
 801010c:	88fb      	ldrh	r3, [r7, #6]
 801010e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8010112:	d3e0      	bcc.n	80100d6 <udp_new_port+0xa>
        return 0;
 8010114:	2300      	movs	r3, #0
 8010116:	e007      	b.n	8010128 <udp_new_port+0x5c>
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8010118:	683b      	ldr	r3, [r7, #0]
 801011a:	68db      	ldr	r3, [r3, #12]
 801011c:	603b      	str	r3, [r7, #0]
 801011e:	683b      	ldr	r3, [r7, #0]
 8010120:	2b00      	cmp	r3, #0
 8010122:	d1ea      	bne.n	80100fa <udp_new_port+0x2e>
      }
      goto again;
    }
  }
  return udp_port;
 8010124:	4b03      	ldr	r3, [pc, #12]	; (8010134 <udp_new_port+0x68>)
 8010126:	881b      	ldrh	r3, [r3, #0]
}
 8010128:	4618      	mov	r0, r3
 801012a:	370c      	adds	r7, #12
 801012c:	46bd      	mov	sp, r7
 801012e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010132:	4770      	bx	lr
 8010134:	2000002c 	.word	0x2000002c
 8010138:	2000c7a4 	.word	0x2000c7a4

0801013c <udp_input_local_match>:
 * @param broadcast 1 if his is an IPv4 broadcast (global or subnet-only), 0 otherwise (only used for IPv4)
 * @return 1 on match, 0 otherwise
 */
static u8_t
udp_input_local_match(struct udp_pcb *pcb, struct netif *inp, u8_t broadcast)
{
 801013c:	b580      	push	{r7, lr}
 801013e:	b084      	sub	sp, #16
 8010140:	af00      	add	r7, sp, #0
 8010142:	60f8      	str	r0, [r7, #12]
 8010144:	60b9      	str	r1, [r7, #8]
 8010146:	4613      	mov	r3, r2
 8010148:	71fb      	strb	r3, [r7, #7]
  LWIP_UNUSED_ARG(inp);       /* in IPv6 only case */
  LWIP_UNUSED_ARG(broadcast); /* in IPv6 only case */

  LWIP_ASSERT("udp_input_local_match: invalid pcb", pcb != NULL);
 801014a:	68fb      	ldr	r3, [r7, #12]
 801014c:	2b00      	cmp	r3, #0
 801014e:	d105      	bne.n	801015c <udp_input_local_match+0x20>
 8010150:	4b27      	ldr	r3, [pc, #156]	; (80101f0 <udp_input_local_match+0xb4>)
 8010152:	2287      	movs	r2, #135	; 0x87
 8010154:	4927      	ldr	r1, [pc, #156]	; (80101f4 <udp_input_local_match+0xb8>)
 8010156:	4828      	ldr	r0, [pc, #160]	; (80101f8 <udp_input_local_match+0xbc>)
 8010158:	f003 fc06 	bl	8013968 <iprintf>
  LWIP_ASSERT("udp_input_local_match: invalid netif", inp != NULL);
 801015c:	68bb      	ldr	r3, [r7, #8]
 801015e:	2b00      	cmp	r3, #0
 8010160:	d105      	bne.n	801016e <udp_input_local_match+0x32>
 8010162:	4b23      	ldr	r3, [pc, #140]	; (80101f0 <udp_input_local_match+0xb4>)
 8010164:	2288      	movs	r2, #136	; 0x88
 8010166:	4925      	ldr	r1, [pc, #148]	; (80101fc <udp_input_local_match+0xc0>)
 8010168:	4823      	ldr	r0, [pc, #140]	; (80101f8 <udp_input_local_match+0xbc>)
 801016a:	f003 fbfd 	bl	8013968 <iprintf>

  /* check if PCB is bound to specific netif */
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 801016e:	68fb      	ldr	r3, [r7, #12]
 8010170:	7a1b      	ldrb	r3, [r3, #8]
 8010172:	2b00      	cmp	r3, #0
 8010174:	d00b      	beq.n	801018e <udp_input_local_match+0x52>
      (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 8010176:	68fb      	ldr	r3, [r7, #12]
 8010178:	7a1a      	ldrb	r2, [r3, #8]
 801017a:	4b21      	ldr	r3, [pc, #132]	; (8010200 <udp_input_local_match+0xc4>)
 801017c:	685b      	ldr	r3, [r3, #4]
 801017e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8010182:	3301      	adds	r3, #1
 8010184:	b2db      	uxtb	r3, r3
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8010186:	429a      	cmp	r2, r3
 8010188:	d001      	beq.n	801018e <udp_input_local_match+0x52>
    return 0;
 801018a:	2300      	movs	r3, #0
 801018c:	e02b      	b.n	80101e6 <udp_input_local_match+0xaa>
  /* Only need to check PCB if incoming IP version matches PCB IP version */
  if (IP_ADDR_PCB_VERSION_MATCH_EXACT(pcb, ip_current_dest_addr())) {
#if LWIP_IPV4
    /* Special case: IPv4 broadcast: all or broadcasts in my subnet
     * Note: broadcast variable can only be 1 if it is an IPv4 broadcast */
    if (broadcast != 0) {
 801018e:	79fb      	ldrb	r3, [r7, #7]
 8010190:	2b00      	cmp	r3, #0
 8010192:	d018      	beq.n	80101c6 <udp_input_local_match+0x8a>
#if IP_SOF_BROADCAST_RECV
      if (ip_get_option(pcb, SOF_BROADCAST))
#endif /* IP_SOF_BROADCAST_RECV */
      {
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 8010194:	68fb      	ldr	r3, [r7, #12]
 8010196:	2b00      	cmp	r3, #0
 8010198:	d013      	beq.n	80101c2 <udp_input_local_match+0x86>
 801019a:	68fb      	ldr	r3, [r7, #12]
 801019c:	681b      	ldr	r3, [r3, #0]
 801019e:	2b00      	cmp	r3, #0
 80101a0:	d00f      	beq.n	80101c2 <udp_input_local_match+0x86>
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 80101a2:	4b17      	ldr	r3, [pc, #92]	; (8010200 <udp_input_local_match+0xc4>)
 80101a4:	695b      	ldr	r3, [r3, #20]
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 80101a6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80101aa:	d00a      	beq.n	80101c2 <udp_input_local_match+0x86>
            ip4_addr_netcmp(ip_2_ip4(&pcb->local_ip), ip4_current_dest_addr(), netif_ip4_netmask(inp))) {
 80101ac:	68fb      	ldr	r3, [r7, #12]
 80101ae:	681a      	ldr	r2, [r3, #0]
 80101b0:	4b13      	ldr	r3, [pc, #76]	; (8010200 <udp_input_local_match+0xc4>)
 80101b2:	695b      	ldr	r3, [r3, #20]
 80101b4:	405a      	eors	r2, r3
 80101b6:	68bb      	ldr	r3, [r7, #8]
 80101b8:	3308      	adds	r3, #8
 80101ba:	681b      	ldr	r3, [r3, #0]
 80101bc:	4013      	ands	r3, r2
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 80101be:	2b00      	cmp	r3, #0
 80101c0:	d110      	bne.n	80101e4 <udp_input_local_match+0xa8>
          return 1;
 80101c2:	2301      	movs	r3, #1
 80101c4:	e00f      	b.n	80101e6 <udp_input_local_match+0xaa>
        }
      }
    } else
#endif /* LWIP_IPV4 */
      /* Handle IPv4 and IPv6: all or exact match */
      if (ip_addr_isany(&pcb->local_ip) || ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 80101c6:	68fb      	ldr	r3, [r7, #12]
 80101c8:	2b00      	cmp	r3, #0
 80101ca:	d009      	beq.n	80101e0 <udp_input_local_match+0xa4>
 80101cc:	68fb      	ldr	r3, [r7, #12]
 80101ce:	681b      	ldr	r3, [r3, #0]
 80101d0:	2b00      	cmp	r3, #0
 80101d2:	d005      	beq.n	80101e0 <udp_input_local_match+0xa4>
 80101d4:	68fb      	ldr	r3, [r7, #12]
 80101d6:	681a      	ldr	r2, [r3, #0]
 80101d8:	4b09      	ldr	r3, [pc, #36]	; (8010200 <udp_input_local_match+0xc4>)
 80101da:	695b      	ldr	r3, [r3, #20]
 80101dc:	429a      	cmp	r2, r3
 80101de:	d101      	bne.n	80101e4 <udp_input_local_match+0xa8>
        return 1;
 80101e0:	2301      	movs	r3, #1
 80101e2:	e000      	b.n	80101e6 <udp_input_local_match+0xaa>
      }
  }

  return 0;
 80101e4:	2300      	movs	r3, #0
}
 80101e6:	4618      	mov	r0, r3
 80101e8:	3710      	adds	r7, #16
 80101ea:	46bd      	mov	sp, r7
 80101ec:	bd80      	pop	{r7, pc}
 80101ee:	bf00      	nop
 80101f0:	0801692c 	.word	0x0801692c
 80101f4:	0801695c 	.word	0x0801695c
 80101f8:	08016980 	.word	0x08016980
 80101fc:	080169a8 	.word	0x080169a8
 8010200:	20008e5c 	.word	0x20008e5c

08010204 <udp_input>:
 * @param inp network interface on which the datagram was received.
 *
 */
void
udp_input(struct pbuf *p, struct netif *inp)
{
 8010204:	b590      	push	{r4, r7, lr}
 8010206:	b08d      	sub	sp, #52	; 0x34
 8010208:	af02      	add	r7, sp, #8
 801020a:	6078      	str	r0, [r7, #4]
 801020c:	6039      	str	r1, [r7, #0]
  struct udp_hdr *udphdr;
  struct udp_pcb *pcb, *prev;
  struct udp_pcb *uncon_pcb;
  u16_t src, dest;
  u8_t broadcast;
  u8_t for_us = 0;
 801020e:	2300      	movs	r3, #0
 8010210:	76fb      	strb	r3, [r7, #27]

  LWIP_UNUSED_ARG(inp);

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("udp_input: invalid pbuf", p != NULL);
 8010212:	687b      	ldr	r3, [r7, #4]
 8010214:	2b00      	cmp	r3, #0
 8010216:	d105      	bne.n	8010224 <udp_input+0x20>
 8010218:	4b98      	ldr	r3, [pc, #608]	; (801047c <udp_input+0x278>)
 801021a:	22cf      	movs	r2, #207	; 0xcf
 801021c:	4998      	ldr	r1, [pc, #608]	; (8010480 <udp_input+0x27c>)
 801021e:	4899      	ldr	r0, [pc, #612]	; (8010484 <udp_input+0x280>)
 8010220:	f003 fba2 	bl	8013968 <iprintf>
  LWIP_ASSERT("udp_input: invalid netif", inp != NULL);
 8010224:	683b      	ldr	r3, [r7, #0]
 8010226:	2b00      	cmp	r3, #0
 8010228:	d105      	bne.n	8010236 <udp_input+0x32>
 801022a:	4b94      	ldr	r3, [pc, #592]	; (801047c <udp_input+0x278>)
 801022c:	22d0      	movs	r2, #208	; 0xd0
 801022e:	4996      	ldr	r1, [pc, #600]	; (8010488 <udp_input+0x284>)
 8010230:	4894      	ldr	r0, [pc, #592]	; (8010484 <udp_input+0x280>)
 8010232:	f003 fb99 	bl	8013968 <iprintf>

  PERF_START;

  UDP_STATS_INC(udp.recv);
 8010236:	4b95      	ldr	r3, [pc, #596]	; (801048c <udp_input+0x288>)
 8010238:	f8b3 307a 	ldrh.w	r3, [r3, #122]	; 0x7a
 801023c:	3301      	adds	r3, #1
 801023e:	b29a      	uxth	r2, r3
 8010240:	4b92      	ldr	r3, [pc, #584]	; (801048c <udp_input+0x288>)
 8010242:	f8a3 207a 	strh.w	r2, [r3, #122]	; 0x7a

  /* Check minimum length (UDP header) */
  if (p->len < UDP_HLEN) {
 8010246:	687b      	ldr	r3, [r7, #4]
 8010248:	895b      	ldrh	r3, [r3, #10]
 801024a:	2b07      	cmp	r3, #7
 801024c:	d813      	bhi.n	8010276 <udp_input+0x72>
    /* drop short packets */
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_input: short UDP datagram (%"U16_F" bytes) discarded\n", p->tot_len));
    UDP_STATS_INC(udp.lenerr);
 801024e:	4b8f      	ldr	r3, [pc, #572]	; (801048c <udp_input+0x288>)
 8010250:	f8b3 3082 	ldrh.w	r3, [r3, #130]	; 0x82
 8010254:	3301      	adds	r3, #1
 8010256:	b29a      	uxth	r2, r3
 8010258:	4b8c      	ldr	r3, [pc, #560]	; (801048c <udp_input+0x288>)
 801025a:	f8a3 2082 	strh.w	r2, [r3, #130]	; 0x82
    UDP_STATS_INC(udp.drop);
 801025e:	4b8b      	ldr	r3, [pc, #556]	; (801048c <udp_input+0x288>)
 8010260:	f8b3 307e 	ldrh.w	r3, [r3, #126]	; 0x7e
 8010264:	3301      	adds	r3, #1
 8010266:	b29a      	uxth	r2, r3
 8010268:	4b88      	ldr	r3, [pc, #544]	; (801048c <udp_input+0x288>)
 801026a:	f8a3 207e 	strh.w	r2, [r3, #126]	; 0x7e
    MIB2_STATS_INC(mib2.udpinerrors);
    pbuf_free(p);
 801026e:	6878      	ldr	r0, [r7, #4]
 8010270:	f7fa f8c8 	bl	800a404 <pbuf_free>
    goto end;
 8010274:	e0fd      	b.n	8010472 <udp_input+0x26e>
  }

  udphdr = (struct udp_hdr *)p->payload;
 8010276:	687b      	ldr	r3, [r7, #4]
 8010278:	685b      	ldr	r3, [r3, #4]
 801027a:	617b      	str	r3, [r7, #20]

  /* is broadcast packet ? */
  broadcast = ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif());
 801027c:	4b84      	ldr	r3, [pc, #528]	; (8010490 <udp_input+0x28c>)
 801027e:	695b      	ldr	r3, [r3, #20]
 8010280:	4a83      	ldr	r2, [pc, #524]	; (8010490 <udp_input+0x28c>)
 8010282:	6812      	ldr	r2, [r2, #0]
 8010284:	4611      	mov	r1, r2
 8010286:	4618      	mov	r0, r3
 8010288:	f002 f88e 	bl	80123a8 <ip4_addr_isbroadcast_u32>
 801028c:	4603      	mov	r3, r0
 801028e:	74fb      	strb	r3, [r7, #19]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_input: received datagram of length %"U16_F"\n", p->tot_len));

  /* convert src and dest ports to host byte order */
  src = lwip_ntohs(udphdr->src);
 8010290:	697b      	ldr	r3, [r7, #20]
 8010292:	881b      	ldrh	r3, [r3, #0]
 8010294:	b29b      	uxth	r3, r3
 8010296:	4618      	mov	r0, r3
 8010298:	f7f8 fbf2 	bl	8008a80 <lwip_htons>
 801029c:	4603      	mov	r3, r0
 801029e:	823b      	strh	r3, [r7, #16]
  dest = lwip_ntohs(udphdr->dest);
 80102a0:	697b      	ldr	r3, [r7, #20]
 80102a2:	885b      	ldrh	r3, [r3, #2]
 80102a4:	b29b      	uxth	r3, r3
 80102a6:	4618      	mov	r0, r3
 80102a8:	f7f8 fbea 	bl	8008a80 <lwip_htons>
 80102ac:	4603      	mov	r3, r0
 80102ae:	81fb      	strh	r3, [r7, #14]
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_dest_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", lwip_ntohs(udphdr->dest)));
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_src_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", lwip_ntohs(udphdr->src)));

  pcb = NULL;
 80102b0:	2300      	movs	r3, #0
 80102b2:	627b      	str	r3, [r7, #36]	; 0x24
  prev = NULL;
 80102b4:	2300      	movs	r3, #0
 80102b6:	623b      	str	r3, [r7, #32]
  uncon_pcb = NULL;
 80102b8:	2300      	movs	r3, #0
 80102ba:	61fb      	str	r3, [r7, #28]
  /* Iterate through the UDP pcb list for a matching pcb.
   * 'Perfect match' pcbs (connected to the remote port & ip address) are
   * preferred. If no perfect match is found, the first unconnected pcb that
   * matches the local port and ip address gets the datagram. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 80102bc:	4b75      	ldr	r3, [pc, #468]	; (8010494 <udp_input+0x290>)
 80102be:	681b      	ldr	r3, [r3, #0]
 80102c0:	627b      	str	r3, [r7, #36]	; 0x24
 80102c2:	e05d      	b.n	8010380 <udp_input+0x17c>
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", pcb->local_port));
    ip_addr_debug_print_val(UDP_DEBUG, pcb->remote_ip);
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", pcb->remote_port));

    /* compare PCB local addr+port to UDP destination addr+port */
    if ((pcb->local_port == dest) &&
 80102c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80102c6:	8a5b      	ldrh	r3, [r3, #18]
 80102c8:	89fa      	ldrh	r2, [r7, #14]
 80102ca:	429a      	cmp	r2, r3
 80102cc:	d153      	bne.n	8010376 <udp_input+0x172>
        (udp_input_local_match(pcb, inp, broadcast) != 0)) {
 80102ce:	7cfb      	ldrb	r3, [r7, #19]
 80102d0:	461a      	mov	r2, r3
 80102d2:	6839      	ldr	r1, [r7, #0]
 80102d4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80102d6:	f7ff ff31 	bl	801013c <udp_input_local_match>
 80102da:	4603      	mov	r3, r0
    if ((pcb->local_port == dest) &&
 80102dc:	2b00      	cmp	r3, #0
 80102de:	d04a      	beq.n	8010376 <udp_input+0x172>
      if ((pcb->flags & UDP_FLAGS_CONNECTED) == 0) {
 80102e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80102e2:	7c1b      	ldrb	r3, [r3, #16]
 80102e4:	f003 0304 	and.w	r3, r3, #4
 80102e8:	2b00      	cmp	r3, #0
 80102ea:	d11d      	bne.n	8010328 <udp_input+0x124>
        if (uncon_pcb == NULL) {
 80102ec:	69fb      	ldr	r3, [r7, #28]
 80102ee:	2b00      	cmp	r3, #0
 80102f0:	d102      	bne.n	80102f8 <udp_input+0xf4>
          /* the first unconnected matching PCB */
          uncon_pcb = pcb;
 80102f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80102f4:	61fb      	str	r3, [r7, #28]
 80102f6:	e017      	b.n	8010328 <udp_input+0x124>
#if LWIP_IPV4
        } else if (broadcast && ip4_current_dest_addr()->addr == IPADDR_BROADCAST) {
 80102f8:	7cfb      	ldrb	r3, [r7, #19]
 80102fa:	2b00      	cmp	r3, #0
 80102fc:	d014      	beq.n	8010328 <udp_input+0x124>
 80102fe:	4b64      	ldr	r3, [pc, #400]	; (8010490 <udp_input+0x28c>)
 8010300:	695b      	ldr	r3, [r3, #20]
 8010302:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010306:	d10f      	bne.n	8010328 <udp_input+0x124>
          /* global broadcast address (only valid for IPv4; match was checked before) */
          if (!IP_IS_V4_VAL(uncon_pcb->local_ip) || !ip4_addr_cmp(ip_2_ip4(&uncon_pcb->local_ip), netif_ip4_addr(inp))) {
 8010308:	69fb      	ldr	r3, [r7, #28]
 801030a:	681a      	ldr	r2, [r3, #0]
 801030c:	683b      	ldr	r3, [r7, #0]
 801030e:	3304      	adds	r3, #4
 8010310:	681b      	ldr	r3, [r3, #0]
 8010312:	429a      	cmp	r2, r3
 8010314:	d008      	beq.n	8010328 <udp_input+0x124>
            /* uncon_pcb does not match the input netif, check this pcb */
            if (IP_IS_V4_VAL(pcb->local_ip) && ip4_addr_cmp(ip_2_ip4(&pcb->local_ip), netif_ip4_addr(inp))) {
 8010316:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010318:	681a      	ldr	r2, [r3, #0]
 801031a:	683b      	ldr	r3, [r7, #0]
 801031c:	3304      	adds	r3, #4
 801031e:	681b      	ldr	r3, [r3, #0]
 8010320:	429a      	cmp	r2, r3
 8010322:	d101      	bne.n	8010328 <udp_input+0x124>
              /* better match */
              uncon_pcb = pcb;
 8010324:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010326:	61fb      	str	r3, [r7, #28]
        }
#endif /* SO_REUSE */
      }

      /* compare PCB remote addr+port to UDP source addr+port */
      if ((pcb->remote_port == src) &&
 8010328:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801032a:	8a9b      	ldrh	r3, [r3, #20]
 801032c:	8a3a      	ldrh	r2, [r7, #16]
 801032e:	429a      	cmp	r2, r3
 8010330:	d121      	bne.n	8010376 <udp_input+0x172>
          (ip_addr_isany_val(pcb->remote_ip) ||
 8010332:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010334:	685b      	ldr	r3, [r3, #4]
      if ((pcb->remote_port == src) &&
 8010336:	2b00      	cmp	r3, #0
 8010338:	d005      	beq.n	8010346 <udp_input+0x142>
           ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()))) {
 801033a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801033c:	685a      	ldr	r2, [r3, #4]
 801033e:	4b54      	ldr	r3, [pc, #336]	; (8010490 <udp_input+0x28c>)
 8010340:	691b      	ldr	r3, [r3, #16]
          (ip_addr_isany_val(pcb->remote_ip) ||
 8010342:	429a      	cmp	r2, r3
 8010344:	d117      	bne.n	8010376 <udp_input+0x172>
        /* the first fully matching PCB */
        if (prev != NULL) {
 8010346:	6a3b      	ldr	r3, [r7, #32]
 8010348:	2b00      	cmp	r3, #0
 801034a:	d00b      	beq.n	8010364 <udp_input+0x160>
          /* move the pcb to the front of udp_pcbs so that is
             found faster next time */
          prev->next = pcb->next;
 801034c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801034e:	68da      	ldr	r2, [r3, #12]
 8010350:	6a3b      	ldr	r3, [r7, #32]
 8010352:	60da      	str	r2, [r3, #12]
          pcb->next = udp_pcbs;
 8010354:	4b4f      	ldr	r3, [pc, #316]	; (8010494 <udp_input+0x290>)
 8010356:	681a      	ldr	r2, [r3, #0]
 8010358:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801035a:	60da      	str	r2, [r3, #12]
          udp_pcbs = pcb;
 801035c:	4a4d      	ldr	r2, [pc, #308]	; (8010494 <udp_input+0x290>)
 801035e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010360:	6013      	str	r3, [r2, #0]
        } else {
          UDP_STATS_INC(udp.cachehit);
        }
        break;
 8010362:	e010      	b.n	8010386 <udp_input+0x182>
          UDP_STATS_INC(udp.cachehit);
 8010364:	4b49      	ldr	r3, [pc, #292]	; (801048c <udp_input+0x288>)
 8010366:	f8b3 308e 	ldrh.w	r3, [r3, #142]	; 0x8e
 801036a:	3301      	adds	r3, #1
 801036c:	b29a      	uxth	r2, r3
 801036e:	4b47      	ldr	r3, [pc, #284]	; (801048c <udp_input+0x288>)
 8010370:	f8a3 208e 	strh.w	r2, [r3, #142]	; 0x8e
        break;
 8010374:	e007      	b.n	8010386 <udp_input+0x182>
      }
    }

    prev = pcb;
 8010376:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010378:	623b      	str	r3, [r7, #32]
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 801037a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801037c:	68db      	ldr	r3, [r3, #12]
 801037e:	627b      	str	r3, [r7, #36]	; 0x24
 8010380:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010382:	2b00      	cmp	r3, #0
 8010384:	d19e      	bne.n	80102c4 <udp_input+0xc0>
  }
  /* no fully matching pcb found? then look for an unconnected pcb */
  if (pcb == NULL) {
 8010386:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010388:	2b00      	cmp	r3, #0
 801038a:	d101      	bne.n	8010390 <udp_input+0x18c>
    pcb = uncon_pcb;
 801038c:	69fb      	ldr	r3, [r7, #28]
 801038e:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* Check checksum if this is a match or if it was directed at us. */
  if (pcb != NULL) {
 8010390:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010392:	2b00      	cmp	r3, #0
 8010394:	d002      	beq.n	801039c <udp_input+0x198>
    for_us = 1;
 8010396:	2301      	movs	r3, #1
 8010398:	76fb      	strb	r3, [r7, #27]
 801039a:	e00a      	b.n	80103b2 <udp_input+0x1ae>
      for_us = netif_get_ip6_addr_match(inp, ip6_current_dest_addr()) >= 0;
    }
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    if (!ip_current_is_v6()) {
      for_us = ip4_addr_cmp(netif_ip4_addr(inp), ip4_current_dest_addr());
 801039c:	683b      	ldr	r3, [r7, #0]
 801039e:	3304      	adds	r3, #4
 80103a0:	681a      	ldr	r2, [r3, #0]
 80103a2:	4b3b      	ldr	r3, [pc, #236]	; (8010490 <udp_input+0x28c>)
 80103a4:	695b      	ldr	r3, [r3, #20]
 80103a6:	429a      	cmp	r2, r3
 80103a8:	bf0c      	ite	eq
 80103aa:	2301      	moveq	r3, #1
 80103ac:	2300      	movne	r3, #0
 80103ae:	b2db      	uxtb	r3, r3
 80103b0:	76fb      	strb	r3, [r7, #27]
    }
#endif /* LWIP_IPV4 */
  }

  if (for_us) {
 80103b2:	7efb      	ldrb	r3, [r7, #27]
 80103b4:	2b00      	cmp	r3, #0
 80103b6:	d059      	beq.n	801046c <udp_input+0x268>
          }
        }
      }
    }
#endif /* CHECKSUM_CHECK_UDP */
    if (pbuf_remove_header(p, UDP_HLEN)) {
 80103b8:	2108      	movs	r1, #8
 80103ba:	6878      	ldr	r0, [r7, #4]
 80103bc:	f7f9 ff9c 	bl	800a2f8 <pbuf_remove_header>
 80103c0:	4603      	mov	r3, r0
 80103c2:	2b00      	cmp	r3, #0
 80103c4:	d012      	beq.n	80103ec <udp_input+0x1e8>
      /* Can we cope with this failing? Just assert for now */
      LWIP_ASSERT("pbuf_remove_header failed\n", 0);
 80103c6:	4b2d      	ldr	r3, [pc, #180]	; (801047c <udp_input+0x278>)
 80103c8:	f44f 72b8 	mov.w	r2, #368	; 0x170
 80103cc:	4932      	ldr	r1, [pc, #200]	; (8010498 <udp_input+0x294>)
 80103ce:	482d      	ldr	r0, [pc, #180]	; (8010484 <udp_input+0x280>)
 80103d0:	f003 faca 	bl	8013968 <iprintf>
      UDP_STATS_INC(udp.drop);
 80103d4:	4b2d      	ldr	r3, [pc, #180]	; (801048c <udp_input+0x288>)
 80103d6:	f8b3 307e 	ldrh.w	r3, [r3, #126]	; 0x7e
 80103da:	3301      	adds	r3, #1
 80103dc:	b29a      	uxth	r2, r3
 80103de:	4b2b      	ldr	r3, [pc, #172]	; (801048c <udp_input+0x288>)
 80103e0:	f8a3 207e 	strh.w	r2, [r3, #126]	; 0x7e
      MIB2_STATS_INC(mib2.udpinerrors);
      pbuf_free(p);
 80103e4:	6878      	ldr	r0, [r7, #4]
 80103e6:	f7fa f80d 	bl	800a404 <pbuf_free>
      goto end;
 80103ea:	e042      	b.n	8010472 <udp_input+0x26e>
    }

    if (pcb != NULL) {
 80103ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80103ee:	2b00      	cmp	r3, #0
 80103f0:	d012      	beq.n	8010418 <udp_input+0x214>
          }
        }
      }
#endif /* SO_REUSE && SO_REUSE_RXTOALL */
      /* callback */
      if (pcb->recv != NULL) {
 80103f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80103f4:	699b      	ldr	r3, [r3, #24]
 80103f6:	2b00      	cmp	r3, #0
 80103f8:	d00a      	beq.n	8010410 <udp_input+0x20c>
        /* now the recv function is responsible for freeing p */
        pcb->recv(pcb->recv_arg, pcb, p, ip_current_src_addr(), src);
 80103fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80103fc:	699c      	ldr	r4, [r3, #24]
 80103fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010400:	69d8      	ldr	r0, [r3, #28]
 8010402:	8a3b      	ldrh	r3, [r7, #16]
 8010404:	9300      	str	r3, [sp, #0]
 8010406:	4b25      	ldr	r3, [pc, #148]	; (801049c <udp_input+0x298>)
 8010408:	687a      	ldr	r2, [r7, #4]
 801040a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 801040c:	47a0      	blx	r4
  } else {
    pbuf_free(p);
  }
end:
  PERF_STOP("udp_input");
  return;
 801040e:	e031      	b.n	8010474 <udp_input+0x270>
        pbuf_free(p);
 8010410:	6878      	ldr	r0, [r7, #4]
 8010412:	f7f9 fff7 	bl	800a404 <pbuf_free>
        goto end;
 8010416:	e02c      	b.n	8010472 <udp_input+0x26e>
      if (!broadcast && !ip_addr_ismulticast(ip_current_dest_addr())) {
 8010418:	7cfb      	ldrb	r3, [r7, #19]
 801041a:	2b00      	cmp	r3, #0
 801041c:	d112      	bne.n	8010444 <udp_input+0x240>
 801041e:	4b1c      	ldr	r3, [pc, #112]	; (8010490 <udp_input+0x28c>)
 8010420:	695b      	ldr	r3, [r3, #20]
 8010422:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8010426:	2be0      	cmp	r3, #224	; 0xe0
 8010428:	d00c      	beq.n	8010444 <udp_input+0x240>
        pbuf_header_force(p, (s16_t)(ip_current_header_tot_len() + UDP_HLEN));
 801042a:	4b19      	ldr	r3, [pc, #100]	; (8010490 <udp_input+0x28c>)
 801042c:	899b      	ldrh	r3, [r3, #12]
 801042e:	3308      	adds	r3, #8
 8010430:	b29b      	uxth	r3, r3
 8010432:	b21b      	sxth	r3, r3
 8010434:	4619      	mov	r1, r3
 8010436:	6878      	ldr	r0, [r7, #4]
 8010438:	f7f9 ffd1 	bl	800a3de <pbuf_header_force>
        icmp_port_unreach(ip_current_is_v6(), p);
 801043c:	2103      	movs	r1, #3
 801043e:	6878      	ldr	r0, [r7, #4]
 8010440:	f001 fc16 	bl	8011c70 <icmp_dest_unreach>
      UDP_STATS_INC(udp.proterr);
 8010444:	4b11      	ldr	r3, [pc, #68]	; (801048c <udp_input+0x288>)
 8010446:	f8b3 3088 	ldrh.w	r3, [r3, #136]	; 0x88
 801044a:	3301      	adds	r3, #1
 801044c:	b29a      	uxth	r2, r3
 801044e:	4b0f      	ldr	r3, [pc, #60]	; (801048c <udp_input+0x288>)
 8010450:	f8a3 2088 	strh.w	r2, [r3, #136]	; 0x88
      UDP_STATS_INC(udp.drop);
 8010454:	4b0d      	ldr	r3, [pc, #52]	; (801048c <udp_input+0x288>)
 8010456:	f8b3 307e 	ldrh.w	r3, [r3, #126]	; 0x7e
 801045a:	3301      	adds	r3, #1
 801045c:	b29a      	uxth	r2, r3
 801045e:	4b0b      	ldr	r3, [pc, #44]	; (801048c <udp_input+0x288>)
 8010460:	f8a3 207e 	strh.w	r2, [r3, #126]	; 0x7e
      pbuf_free(p);
 8010464:	6878      	ldr	r0, [r7, #4]
 8010466:	f7f9 ffcd 	bl	800a404 <pbuf_free>
  return;
 801046a:	e003      	b.n	8010474 <udp_input+0x270>
    pbuf_free(p);
 801046c:	6878      	ldr	r0, [r7, #4]
 801046e:	f7f9 ffc9 	bl	800a404 <pbuf_free>
  return;
 8010472:	bf00      	nop
  UDP_STATS_INC(udp.drop);
  MIB2_STATS_INC(mib2.udpinerrors);
  pbuf_free(p);
  PERF_STOP("udp_input");
#endif /* CHECKSUM_CHECK_UDP */
}
 8010474:	372c      	adds	r7, #44	; 0x2c
 8010476:	46bd      	mov	sp, r7
 8010478:	bd90      	pop	{r4, r7, pc}
 801047a:	bf00      	nop
 801047c:	0801692c 	.word	0x0801692c
 8010480:	080169d0 	.word	0x080169d0
 8010484:	08016980 	.word	0x08016980
 8010488:	080169e8 	.word	0x080169e8
 801048c:	2000c64c 	.word	0x2000c64c
 8010490:	20008e5c 	.word	0x20008e5c
 8010494:	2000c7a4 	.word	0x2000c7a4
 8010498:	08016a04 	.word	0x08016a04
 801049c:	20008e6c 	.word	0x20008e6c

080104a0 <udp_sendto>:
 * @see udp_disconnect() udp_send()
 */
err_t
udp_sendto(struct udp_pcb *pcb, struct pbuf *p,
           const ip_addr_t *dst_ip, u16_t dst_port)
{
 80104a0:	b580      	push	{r7, lr}
 80104a2:	b088      	sub	sp, #32
 80104a4:	af02      	add	r7, sp, #8
 80104a6:	60f8      	str	r0, [r7, #12]
 80104a8:	60b9      	str	r1, [r7, #8]
 80104aa:	607a      	str	r2, [r7, #4]
 80104ac:	807b      	strh	r3, [r7, #2]
                  u16_t dst_port, u8_t have_chksum, u16_t chksum)
{
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  struct netif *netif;

  LWIP_ERROR("udp_sendto: invalid pcb", pcb != NULL, return ERR_ARG);
 80104ae:	68fb      	ldr	r3, [r7, #12]
 80104b0:	2b00      	cmp	r3, #0
 80104b2:	d109      	bne.n	80104c8 <udp_sendto+0x28>
 80104b4:	4b27      	ldr	r3, [pc, #156]	; (8010554 <udp_sendto+0xb4>)
 80104b6:	f44f 7206 	mov.w	r2, #536	; 0x218
 80104ba:	4927      	ldr	r1, [pc, #156]	; (8010558 <udp_sendto+0xb8>)
 80104bc:	4827      	ldr	r0, [pc, #156]	; (801055c <udp_sendto+0xbc>)
 80104be:	f003 fa53 	bl	8013968 <iprintf>
 80104c2:	f06f 030f 	mvn.w	r3, #15
 80104c6:	e040      	b.n	801054a <udp_sendto+0xaa>
  LWIP_ERROR("udp_sendto: invalid pbuf", p != NULL, return ERR_ARG);
 80104c8:	68bb      	ldr	r3, [r7, #8]
 80104ca:	2b00      	cmp	r3, #0
 80104cc:	d109      	bne.n	80104e2 <udp_sendto+0x42>
 80104ce:	4b21      	ldr	r3, [pc, #132]	; (8010554 <udp_sendto+0xb4>)
 80104d0:	f240 2219 	movw	r2, #537	; 0x219
 80104d4:	4922      	ldr	r1, [pc, #136]	; (8010560 <udp_sendto+0xc0>)
 80104d6:	4821      	ldr	r0, [pc, #132]	; (801055c <udp_sendto+0xbc>)
 80104d8:	f003 fa46 	bl	8013968 <iprintf>
 80104dc:	f06f 030f 	mvn.w	r3, #15
 80104e0:	e033      	b.n	801054a <udp_sendto+0xaa>
  LWIP_ERROR("udp_sendto: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 80104e2:	687b      	ldr	r3, [r7, #4]
 80104e4:	2b00      	cmp	r3, #0
 80104e6:	d109      	bne.n	80104fc <udp_sendto+0x5c>
 80104e8:	4b1a      	ldr	r3, [pc, #104]	; (8010554 <udp_sendto+0xb4>)
 80104ea:	f240 221a 	movw	r2, #538	; 0x21a
 80104ee:	491d      	ldr	r1, [pc, #116]	; (8010564 <udp_sendto+0xc4>)
 80104f0:	481a      	ldr	r0, [pc, #104]	; (801055c <udp_sendto+0xbc>)
 80104f2:	f003 fa39 	bl	8013968 <iprintf>
 80104f6:	f06f 030f 	mvn.w	r3, #15
 80104fa:	e026      	b.n	801054a <udp_sendto+0xaa>
    return ERR_VAL;
  }

  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_send\n"));

  if (pcb->netif_idx != NETIF_NO_INDEX) {
 80104fc:	68fb      	ldr	r3, [r7, #12]
 80104fe:	7a1b      	ldrb	r3, [r3, #8]
 8010500:	2b00      	cmp	r3, #0
 8010502:	d006      	beq.n	8010512 <udp_sendto+0x72>
    netif = netif_get_by_index(pcb->netif_idx);
 8010504:	68fb      	ldr	r3, [r7, #12]
 8010506:	7a1b      	ldrb	r3, [r3, #8]
 8010508:	4618      	mov	r0, r3
 801050a:	f7f9 fbed 	bl	8009ce8 <netif_get_by_index>
 801050e:	6178      	str	r0, [r7, #20]
 8010510:	e003      	b.n	801051a <udp_sendto+0x7a>

    if (netif == NULL)
#endif /* LWIP_MULTICAST_TX_OPTIONS */
    {
      /* find the outgoing network interface for this packet */
      netif = ip_route(&pcb->local_ip, dst_ip);
 8010512:	6878      	ldr	r0, [r7, #4]
 8010514:	f001 fc40 	bl	8011d98 <ip4_route>
 8010518:	6178      	str	r0, [r7, #20]
    }
  }

  /* no outgoing network interface could be found? */
  if (netif == NULL) {
 801051a:	697b      	ldr	r3, [r7, #20]
 801051c:	2b00      	cmp	r3, #0
 801051e:	d10a      	bne.n	8010536 <udp_sendto+0x96>
    LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: No route to "));
    ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, dst_ip);
    LWIP_DEBUGF(UDP_DEBUG, ("\n"));
    UDP_STATS_INC(udp.rterr);
 8010520:	4b11      	ldr	r3, [pc, #68]	; (8010568 <udp_sendto+0xc8>)
 8010522:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
 8010526:	3301      	adds	r3, #1
 8010528:	b29a      	uxth	r2, r3
 801052a:	4b0f      	ldr	r3, [pc, #60]	; (8010568 <udp_sendto+0xc8>)
 801052c:	f8a3 2086 	strh.w	r2, [r3, #134]	; 0x86
    return ERR_RTE;
 8010530:	f06f 0303 	mvn.w	r3, #3
 8010534:	e009      	b.n	801054a <udp_sendto+0xaa>
  }
#if LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP
  return udp_sendto_if_chksum(pcb, p, dst_ip, dst_port, netif, have_chksum, chksum);
#else /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  return udp_sendto_if(pcb, p, dst_ip, dst_port, netif);
 8010536:	887a      	ldrh	r2, [r7, #2]
 8010538:	697b      	ldr	r3, [r7, #20]
 801053a:	9300      	str	r3, [sp, #0]
 801053c:	4613      	mov	r3, r2
 801053e:	687a      	ldr	r2, [r7, #4]
 8010540:	68b9      	ldr	r1, [r7, #8]
 8010542:	68f8      	ldr	r0, [r7, #12]
 8010544:	f000 f812 	bl	801056c <udp_sendto_if>
 8010548:	4603      	mov	r3, r0
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
}
 801054a:	4618      	mov	r0, r3
 801054c:	3718      	adds	r7, #24
 801054e:	46bd      	mov	sp, r7
 8010550:	bd80      	pop	{r7, pc}
 8010552:	bf00      	nop
 8010554:	0801692c 	.word	0x0801692c
 8010558:	08016a50 	.word	0x08016a50
 801055c:	08016980 	.word	0x08016980
 8010560:	08016a68 	.word	0x08016a68
 8010564:	08016a84 	.word	0x08016a84
 8010568:	2000c64c 	.word	0x2000c64c

0801056c <udp_sendto_if>:
 * @see udp_disconnect() udp_send()
 */
err_t
udp_sendto_if(struct udp_pcb *pcb, struct pbuf *p,
              const ip_addr_t *dst_ip, u16_t dst_port, struct netif *netif)
{
 801056c:	b580      	push	{r7, lr}
 801056e:	b088      	sub	sp, #32
 8010570:	af02      	add	r7, sp, #8
 8010572:	60f8      	str	r0, [r7, #12]
 8010574:	60b9      	str	r1, [r7, #8]
 8010576:	607a      	str	r2, [r7, #4]
 8010578:	807b      	strh	r3, [r7, #2]
                     u16_t chksum)
{
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  const ip_addr_t *src_ip;

  LWIP_ERROR("udp_sendto_if: invalid pcb", pcb != NULL, return ERR_ARG);
 801057a:	68fb      	ldr	r3, [r7, #12]
 801057c:	2b00      	cmp	r3, #0
 801057e:	d109      	bne.n	8010594 <udp_sendto_if+0x28>
 8010580:	4b2e      	ldr	r3, [pc, #184]	; (801063c <udp_sendto_if+0xd0>)
 8010582:	f44f 7220 	mov.w	r2, #640	; 0x280
 8010586:	492e      	ldr	r1, [pc, #184]	; (8010640 <udp_sendto_if+0xd4>)
 8010588:	482e      	ldr	r0, [pc, #184]	; (8010644 <udp_sendto_if+0xd8>)
 801058a:	f003 f9ed 	bl	8013968 <iprintf>
 801058e:	f06f 030f 	mvn.w	r3, #15
 8010592:	e04f      	b.n	8010634 <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid pbuf", p != NULL, return ERR_ARG);
 8010594:	68bb      	ldr	r3, [r7, #8]
 8010596:	2b00      	cmp	r3, #0
 8010598:	d109      	bne.n	80105ae <udp_sendto_if+0x42>
 801059a:	4b28      	ldr	r3, [pc, #160]	; (801063c <udp_sendto_if+0xd0>)
 801059c:	f240 2281 	movw	r2, #641	; 0x281
 80105a0:	4929      	ldr	r1, [pc, #164]	; (8010648 <udp_sendto_if+0xdc>)
 80105a2:	4828      	ldr	r0, [pc, #160]	; (8010644 <udp_sendto_if+0xd8>)
 80105a4:	f003 f9e0 	bl	8013968 <iprintf>
 80105a8:	f06f 030f 	mvn.w	r3, #15
 80105ac:	e042      	b.n	8010634 <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 80105ae:	687b      	ldr	r3, [r7, #4]
 80105b0:	2b00      	cmp	r3, #0
 80105b2:	d109      	bne.n	80105c8 <udp_sendto_if+0x5c>
 80105b4:	4b21      	ldr	r3, [pc, #132]	; (801063c <udp_sendto_if+0xd0>)
 80105b6:	f240 2282 	movw	r2, #642	; 0x282
 80105ba:	4924      	ldr	r1, [pc, #144]	; (801064c <udp_sendto_if+0xe0>)
 80105bc:	4821      	ldr	r0, [pc, #132]	; (8010644 <udp_sendto_if+0xd8>)
 80105be:	f003 f9d3 	bl	8013968 <iprintf>
 80105c2:	f06f 030f 	mvn.w	r3, #15
 80105c6:	e035      	b.n	8010634 <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid netif", netif != NULL, return ERR_ARG);
 80105c8:	6a3b      	ldr	r3, [r7, #32]
 80105ca:	2b00      	cmp	r3, #0
 80105cc:	d109      	bne.n	80105e2 <udp_sendto_if+0x76>
 80105ce:	4b1b      	ldr	r3, [pc, #108]	; (801063c <udp_sendto_if+0xd0>)
 80105d0:	f240 2283 	movw	r2, #643	; 0x283
 80105d4:	491e      	ldr	r1, [pc, #120]	; (8010650 <udp_sendto_if+0xe4>)
 80105d6:	481b      	ldr	r0, [pc, #108]	; (8010644 <udp_sendto_if+0xd8>)
 80105d8:	f003 f9c6 	bl	8013968 <iprintf>
 80105dc:	f06f 030f 	mvn.w	r3, #15
 80105e0:	e028      	b.n	8010634 <udp_sendto_if+0xc8>
#endif /* LWIP_IPV6 */
#if LWIP_IPV4 && LWIP_IPV6
  else
#endif /* LWIP_IPV4 && LWIP_IPV6 */
#if LWIP_IPV4
    if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 80105e2:	68fb      	ldr	r3, [r7, #12]
 80105e4:	2b00      	cmp	r3, #0
 80105e6:	d009      	beq.n	80105fc <udp_sendto_if+0x90>
 80105e8:	68fb      	ldr	r3, [r7, #12]
 80105ea:	681b      	ldr	r3, [r3, #0]
 80105ec:	2b00      	cmp	r3, #0
 80105ee:	d005      	beq.n	80105fc <udp_sendto_if+0x90>
        ip4_addr_ismulticast(ip_2_ip4(&pcb->local_ip))) {
 80105f0:	68fb      	ldr	r3, [r7, #12]
 80105f2:	681b      	ldr	r3, [r3, #0]
 80105f4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 80105f8:	2be0      	cmp	r3, #224	; 0xe0
 80105fa:	d103      	bne.n	8010604 <udp_sendto_if+0x98>
      /* if the local_ip is any or multicast
       * use the outgoing network interface IP address as source address */
      src_ip = netif_ip_addr4(netif);
 80105fc:	6a3b      	ldr	r3, [r7, #32]
 80105fe:	3304      	adds	r3, #4
 8010600:	617b      	str	r3, [r7, #20]
 8010602:	e00b      	b.n	801061c <udp_sendto_if+0xb0>
    } else {
      /* check if UDP PCB local IP address is correct
       * this could be an old address if netif->ip_addr has changed */
      if (!ip4_addr_cmp(ip_2_ip4(&(pcb->local_ip)), netif_ip4_addr(netif))) {
 8010604:	68fb      	ldr	r3, [r7, #12]
 8010606:	681a      	ldr	r2, [r3, #0]
 8010608:	6a3b      	ldr	r3, [r7, #32]
 801060a:	3304      	adds	r3, #4
 801060c:	681b      	ldr	r3, [r3, #0]
 801060e:	429a      	cmp	r2, r3
 8010610:	d002      	beq.n	8010618 <udp_sendto_if+0xac>
        /* local_ip doesn't match, drop the packet */
        return ERR_RTE;
 8010612:	f06f 0303 	mvn.w	r3, #3
 8010616:	e00d      	b.n	8010634 <udp_sendto_if+0xc8>
      }
      /* use UDP PCB local IP address as source address */
      src_ip = &pcb->local_ip;
 8010618:	68fb      	ldr	r3, [r7, #12]
 801061a:	617b      	str	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
#if LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP
  return udp_sendto_if_src_chksum(pcb, p, dst_ip, dst_port, netif, have_chksum, chksum, src_ip);
#else /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  return udp_sendto_if_src(pcb, p, dst_ip, dst_port, netif, src_ip);
 801061c:	887a      	ldrh	r2, [r7, #2]
 801061e:	697b      	ldr	r3, [r7, #20]
 8010620:	9301      	str	r3, [sp, #4]
 8010622:	6a3b      	ldr	r3, [r7, #32]
 8010624:	9300      	str	r3, [sp, #0]
 8010626:	4613      	mov	r3, r2
 8010628:	687a      	ldr	r2, [r7, #4]
 801062a:	68b9      	ldr	r1, [r7, #8]
 801062c:	68f8      	ldr	r0, [r7, #12]
 801062e:	f000 f811 	bl	8010654 <udp_sendto_if_src>
 8010632:	4603      	mov	r3, r0
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
}
 8010634:	4618      	mov	r0, r3
 8010636:	3718      	adds	r7, #24
 8010638:	46bd      	mov	sp, r7
 801063a:	bd80      	pop	{r7, pc}
 801063c:	0801692c 	.word	0x0801692c
 8010640:	08016aa0 	.word	0x08016aa0
 8010644:	08016980 	.word	0x08016980
 8010648:	08016abc 	.word	0x08016abc
 801064c:	08016ad8 	.word	0x08016ad8
 8010650:	08016af8 	.word	0x08016af8

08010654 <udp_sendto_if_src>:
/** @ingroup udp_raw
 * Same as @ref udp_sendto_if, but with source address */
err_t
udp_sendto_if_src(struct udp_pcb *pcb, struct pbuf *p,
                  const ip_addr_t *dst_ip, u16_t dst_port, struct netif *netif, const ip_addr_t *src_ip)
{
 8010654:	b580      	push	{r7, lr}
 8010656:	b08c      	sub	sp, #48	; 0x30
 8010658:	af04      	add	r7, sp, #16
 801065a:	60f8      	str	r0, [r7, #12]
 801065c:	60b9      	str	r1, [r7, #8]
 801065e:	607a      	str	r2, [r7, #4]
 8010660:	807b      	strh	r3, [r7, #2]
  u8_t ip_proto;
  u8_t ttl;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_sendto_if_src: invalid pcb", pcb != NULL, return ERR_ARG);
 8010662:	68fb      	ldr	r3, [r7, #12]
 8010664:	2b00      	cmp	r3, #0
 8010666:	d109      	bne.n	801067c <udp_sendto_if_src+0x28>
 8010668:	4b69      	ldr	r3, [pc, #420]	; (8010810 <udp_sendto_if_src+0x1bc>)
 801066a:	f240 22d1 	movw	r2, #721	; 0x2d1
 801066e:	4969      	ldr	r1, [pc, #420]	; (8010814 <udp_sendto_if_src+0x1c0>)
 8010670:	4869      	ldr	r0, [pc, #420]	; (8010818 <udp_sendto_if_src+0x1c4>)
 8010672:	f003 f979 	bl	8013968 <iprintf>
 8010676:	f06f 030f 	mvn.w	r3, #15
 801067a:	e0c4      	b.n	8010806 <udp_sendto_if_src+0x1b2>
  LWIP_ERROR("udp_sendto_if_src: invalid pbuf", p != NULL, return ERR_ARG);
 801067c:	68bb      	ldr	r3, [r7, #8]
 801067e:	2b00      	cmp	r3, #0
 8010680:	d109      	bne.n	8010696 <udp_sendto_if_src+0x42>
 8010682:	4b63      	ldr	r3, [pc, #396]	; (8010810 <udp_sendto_if_src+0x1bc>)
 8010684:	f240 22d2 	movw	r2, #722	; 0x2d2
 8010688:	4964      	ldr	r1, [pc, #400]	; (801081c <udp_sendto_if_src+0x1c8>)
 801068a:	4863      	ldr	r0, [pc, #396]	; (8010818 <udp_sendto_if_src+0x1c4>)
 801068c:	f003 f96c 	bl	8013968 <iprintf>
 8010690:	f06f 030f 	mvn.w	r3, #15
 8010694:	e0b7      	b.n	8010806 <udp_sendto_if_src+0x1b2>
  LWIP_ERROR("udp_sendto_if_src: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 8010696:	687b      	ldr	r3, [r7, #4]
 8010698:	2b00      	cmp	r3, #0
 801069a:	d109      	bne.n	80106b0 <udp_sendto_if_src+0x5c>
 801069c:	4b5c      	ldr	r3, [pc, #368]	; (8010810 <udp_sendto_if_src+0x1bc>)
 801069e:	f240 22d3 	movw	r2, #723	; 0x2d3
 80106a2:	495f      	ldr	r1, [pc, #380]	; (8010820 <udp_sendto_if_src+0x1cc>)
 80106a4:	485c      	ldr	r0, [pc, #368]	; (8010818 <udp_sendto_if_src+0x1c4>)
 80106a6:	f003 f95f 	bl	8013968 <iprintf>
 80106aa:	f06f 030f 	mvn.w	r3, #15
 80106ae:	e0aa      	b.n	8010806 <udp_sendto_if_src+0x1b2>
  LWIP_ERROR("udp_sendto_if_src: invalid src_ip", src_ip != NULL, return ERR_ARG);
 80106b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80106b2:	2b00      	cmp	r3, #0
 80106b4:	d109      	bne.n	80106ca <udp_sendto_if_src+0x76>
 80106b6:	4b56      	ldr	r3, [pc, #344]	; (8010810 <udp_sendto_if_src+0x1bc>)
 80106b8:	f44f 7235 	mov.w	r2, #724	; 0x2d4
 80106bc:	4959      	ldr	r1, [pc, #356]	; (8010824 <udp_sendto_if_src+0x1d0>)
 80106be:	4856      	ldr	r0, [pc, #344]	; (8010818 <udp_sendto_if_src+0x1c4>)
 80106c0:	f003 f952 	bl	8013968 <iprintf>
 80106c4:	f06f 030f 	mvn.w	r3, #15
 80106c8:	e09d      	b.n	8010806 <udp_sendto_if_src+0x1b2>
  LWIP_ERROR("udp_sendto_if_src: invalid netif", netif != NULL, return ERR_ARG);
 80106ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80106cc:	2b00      	cmp	r3, #0
 80106ce:	d109      	bne.n	80106e4 <udp_sendto_if_src+0x90>
 80106d0:	4b4f      	ldr	r3, [pc, #316]	; (8010810 <udp_sendto_if_src+0x1bc>)
 80106d2:	f240 22d5 	movw	r2, #725	; 0x2d5
 80106d6:	4954      	ldr	r1, [pc, #336]	; (8010828 <udp_sendto_if_src+0x1d4>)
 80106d8:	484f      	ldr	r0, [pc, #316]	; (8010818 <udp_sendto_if_src+0x1c4>)
 80106da:	f003 f945 	bl	8013968 <iprintf>
 80106de:	f06f 030f 	mvn.w	r3, #15
 80106e2:	e090      	b.n	8010806 <udp_sendto_if_src+0x1b2>
    return ERR_VAL;
  }
#endif /* LWIP_IPV4 && IP_SOF_BROADCAST */

  /* if the PCB is not yet bound to a port, bind it here */
  if (pcb->local_port == 0) {
 80106e4:	68fb      	ldr	r3, [r7, #12]
 80106e6:	8a5b      	ldrh	r3, [r3, #18]
 80106e8:	2b00      	cmp	r3, #0
 80106ea:	d10f      	bne.n	801070c <udp_sendto_if_src+0xb8>
    LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_send: not yet bound to a port, binding now\n"));
    err = udp_bind(pcb, &pcb->local_ip, pcb->local_port);
 80106ec:	68f9      	ldr	r1, [r7, #12]
 80106ee:	68fb      	ldr	r3, [r7, #12]
 80106f0:	8a5b      	ldrh	r3, [r3, #18]
 80106f2:	461a      	mov	r2, r3
 80106f4:	68f8      	ldr	r0, [r7, #12]
 80106f6:	f000 f89d 	bl	8010834 <udp_bind>
 80106fa:	4603      	mov	r3, r0
 80106fc:	76fb      	strb	r3, [r7, #27]
    if (err != ERR_OK) {
 80106fe:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8010702:	2b00      	cmp	r3, #0
 8010704:	d002      	beq.n	801070c <udp_sendto_if_src+0xb8>
      LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: forced port bind failed\n"));
      return err;
 8010706:	f997 301b 	ldrsb.w	r3, [r7, #27]
 801070a:	e07c      	b.n	8010806 <udp_sendto_if_src+0x1b2>
    }
  }

  /* packet too large to add a UDP header without causing an overflow? */
  if ((u16_t)(p->tot_len + UDP_HLEN) < p->tot_len) {
 801070c:	68bb      	ldr	r3, [r7, #8]
 801070e:	891b      	ldrh	r3, [r3, #8]
 8010710:	f64f 72f7 	movw	r2, #65527	; 0xfff7
 8010714:	4293      	cmp	r3, r2
 8010716:	d902      	bls.n	801071e <udp_sendto_if_src+0xca>
    return ERR_MEM;
 8010718:	f04f 33ff 	mov.w	r3, #4294967295
 801071c:	e073      	b.n	8010806 <udp_sendto_if_src+0x1b2>
  }
  /* not enough space to add an UDP header to first pbuf in given p chain? */
  if (pbuf_add_header(p, UDP_HLEN)) {
 801071e:	2108      	movs	r1, #8
 8010720:	68b8      	ldr	r0, [r7, #8]
 8010722:	f7f9 fdd9 	bl	800a2d8 <pbuf_add_header>
 8010726:	4603      	mov	r3, r0
 8010728:	2b00      	cmp	r3, #0
 801072a:	d015      	beq.n	8010758 <udp_sendto_if_src+0x104>
    /* allocate header in a separate new pbuf */
    q = pbuf_alloc(PBUF_IP, UDP_HLEN, PBUF_RAM);
 801072c:	f44f 7220 	mov.w	r2, #640	; 0x280
 8010730:	2108      	movs	r1, #8
 8010732:	2022      	movs	r0, #34	; 0x22
 8010734:	f7f9 fb82 	bl	8009e3c <pbuf_alloc>
 8010738:	61f8      	str	r0, [r7, #28]
    /* new header pbuf could not be allocated? */
    if (q == NULL) {
 801073a:	69fb      	ldr	r3, [r7, #28]
 801073c:	2b00      	cmp	r3, #0
 801073e:	d102      	bne.n	8010746 <udp_sendto_if_src+0xf2>
      LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: could not allocate header\n"));
      return ERR_MEM;
 8010740:	f04f 33ff 	mov.w	r3, #4294967295
 8010744:	e05f      	b.n	8010806 <udp_sendto_if_src+0x1b2>
    }
    if (p->tot_len != 0) {
 8010746:	68bb      	ldr	r3, [r7, #8]
 8010748:	891b      	ldrh	r3, [r3, #8]
 801074a:	2b00      	cmp	r3, #0
 801074c:	d006      	beq.n	801075c <udp_sendto_if_src+0x108>
      /* chain header q in front of given pbuf p (only if p contains data) */
      pbuf_chain(q, p);
 801074e:	68b9      	ldr	r1, [r7, #8]
 8010750:	69f8      	ldr	r0, [r7, #28]
 8010752:	f7f9 ff7b 	bl	800a64c <pbuf_chain>
 8010756:	e001      	b.n	801075c <udp_sendto_if_src+0x108>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_send: added header pbuf %p before given pbuf %p\n", (void *)q, (void *)p));
  } else {
    /* adding space for header within p succeeded */
    /* first pbuf q equals given pbuf */
    q = p;
 8010758:	68bb      	ldr	r3, [r7, #8]
 801075a:	61fb      	str	r3, [r7, #28]
    LWIP_DEBUGF(UDP_DEBUG, ("udp_send: added header in given pbuf %p\n", (void *)p));
  }
  LWIP_ASSERT("check that first pbuf can hold struct udp_hdr",
 801075c:	69fb      	ldr	r3, [r7, #28]
 801075e:	895b      	ldrh	r3, [r3, #10]
 8010760:	2b07      	cmp	r3, #7
 8010762:	d806      	bhi.n	8010772 <udp_sendto_if_src+0x11e>
 8010764:	4b2a      	ldr	r3, [pc, #168]	; (8010810 <udp_sendto_if_src+0x1bc>)
 8010766:	f240 320d 	movw	r2, #781	; 0x30d
 801076a:	4930      	ldr	r1, [pc, #192]	; (801082c <udp_sendto_if_src+0x1d8>)
 801076c:	482a      	ldr	r0, [pc, #168]	; (8010818 <udp_sendto_if_src+0x1c4>)
 801076e:	f003 f8fb 	bl	8013968 <iprintf>
              (q->len >= sizeof(struct udp_hdr)));
  /* q now represents the packet to be sent */
  udphdr = (struct udp_hdr *)q->payload;
 8010772:	69fb      	ldr	r3, [r7, #28]
 8010774:	685b      	ldr	r3, [r3, #4]
 8010776:	617b      	str	r3, [r7, #20]
  udphdr->src = lwip_htons(pcb->local_port);
 8010778:	68fb      	ldr	r3, [r7, #12]
 801077a:	8a5b      	ldrh	r3, [r3, #18]
 801077c:	4618      	mov	r0, r3
 801077e:	f7f8 f97f 	bl	8008a80 <lwip_htons>
 8010782:	4603      	mov	r3, r0
 8010784:	461a      	mov	r2, r3
 8010786:	697b      	ldr	r3, [r7, #20]
 8010788:	801a      	strh	r2, [r3, #0]
  udphdr->dest = lwip_htons(dst_port);
 801078a:	887b      	ldrh	r3, [r7, #2]
 801078c:	4618      	mov	r0, r3
 801078e:	f7f8 f977 	bl	8008a80 <lwip_htons>
 8010792:	4603      	mov	r3, r0
 8010794:	461a      	mov	r2, r3
 8010796:	697b      	ldr	r3, [r7, #20]
 8010798:	805a      	strh	r2, [r3, #2]
  /* in UDP, 0 checksum means 'no checksum' */
  udphdr->chksum = 0x0000;
 801079a:	697b      	ldr	r3, [r7, #20]
 801079c:	2200      	movs	r2, #0
 801079e:	719a      	strb	r2, [r3, #6]
 80107a0:	2200      	movs	r2, #0
 80107a2:	71da      	strb	r2, [r3, #7]
    ip_proto = IP_PROTO_UDPLITE;
  } else
#endif /* LWIP_UDPLITE */
  {      /* UDP */
    LWIP_DEBUGF(UDP_DEBUG, ("udp_send: UDP packet length %"U16_F"\n", q->tot_len));
    udphdr->len = lwip_htons(q->tot_len);
 80107a4:	69fb      	ldr	r3, [r7, #28]
 80107a6:	891b      	ldrh	r3, [r3, #8]
 80107a8:	4618      	mov	r0, r3
 80107aa:	f7f8 f969 	bl	8008a80 <lwip_htons>
 80107ae:	4603      	mov	r3, r0
 80107b0:	461a      	mov	r2, r3
 80107b2:	697b      	ldr	r3, [r7, #20]
 80107b4:	809a      	strh	r2, [r3, #4]
        }
        udphdr->chksum = udpchksum;
      }
    }
#endif /* CHECKSUM_GEN_UDP */
    ip_proto = IP_PROTO_UDP;
 80107b6:	2311      	movs	r3, #17
 80107b8:	74fb      	strb	r3, [r7, #19]

  /* Determine TTL to use */
#if LWIP_MULTICAST_TX_OPTIONS
  ttl = (ip_addr_ismulticast(dst_ip) ? udp_get_multicast_ttl(pcb) : pcb->ttl);
#else /* LWIP_MULTICAST_TX_OPTIONS */
  ttl = pcb->ttl;
 80107ba:	68fb      	ldr	r3, [r7, #12]
 80107bc:	7adb      	ldrb	r3, [r3, #11]
 80107be:	74bb      	strb	r3, [r7, #18]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_send: UDP checksum 0x%04"X16_F"\n", udphdr->chksum));
  LWIP_DEBUGF(UDP_DEBUG, ("udp_send: ip_output_if (,,,,0x%02"X16_F",)\n", (u16_t)ip_proto));
  /* output to IP */
  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if_src(q, src_ip, dst_ip, ttl, pcb->tos, ip_proto, netif);
 80107c0:	68fb      	ldr	r3, [r7, #12]
 80107c2:	7a9b      	ldrb	r3, [r3, #10]
 80107c4:	7cb9      	ldrb	r1, [r7, #18]
 80107c6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80107c8:	9202      	str	r2, [sp, #8]
 80107ca:	7cfa      	ldrb	r2, [r7, #19]
 80107cc:	9201      	str	r2, [sp, #4]
 80107ce:	9300      	str	r3, [sp, #0]
 80107d0:	460b      	mov	r3, r1
 80107d2:	687a      	ldr	r2, [r7, #4]
 80107d4:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80107d6:	69f8      	ldr	r0, [r7, #28]
 80107d8:	f001 fd1e 	bl	8012218 <ip4_output_if_src>
 80107dc:	4603      	mov	r3, r0
 80107de:	76fb      	strb	r3, [r7, #27]

  /* @todo: must this be increased even if error occurred? */
  MIB2_STATS_INC(mib2.udpoutdatagrams);

  /* did we chain a separate header pbuf earlier? */
  if (q != p) {
 80107e0:	69fa      	ldr	r2, [r7, #28]
 80107e2:	68bb      	ldr	r3, [r7, #8]
 80107e4:	429a      	cmp	r2, r3
 80107e6:	d004      	beq.n	80107f2 <udp_sendto_if_src+0x19e>
    /* free the header pbuf */
    pbuf_free(q);
 80107e8:	69f8      	ldr	r0, [r7, #28]
 80107ea:	f7f9 fe0b 	bl	800a404 <pbuf_free>
    q = NULL;
 80107ee:	2300      	movs	r3, #0
 80107f0:	61fb      	str	r3, [r7, #28]
    /* p is still referenced by the caller, and will live on */
  }

  UDP_STATS_INC(udp.xmit);
 80107f2:	4b0f      	ldr	r3, [pc, #60]	; (8010830 <udp_sendto_if_src+0x1dc>)
 80107f4:	f8b3 3078 	ldrh.w	r3, [r3, #120]	; 0x78
 80107f8:	3301      	adds	r3, #1
 80107fa:	b29a      	uxth	r2, r3
 80107fc:	4b0c      	ldr	r3, [pc, #48]	; (8010830 <udp_sendto_if_src+0x1dc>)
 80107fe:	f8a3 2078 	strh.w	r2, [r3, #120]	; 0x78
  return err;
 8010802:	f997 301b 	ldrsb.w	r3, [r7, #27]
}
 8010806:	4618      	mov	r0, r3
 8010808:	3720      	adds	r7, #32
 801080a:	46bd      	mov	sp, r7
 801080c:	bd80      	pop	{r7, pc}
 801080e:	bf00      	nop
 8010810:	0801692c 	.word	0x0801692c
 8010814:	08016b18 	.word	0x08016b18
 8010818:	08016980 	.word	0x08016980
 801081c:	08016b38 	.word	0x08016b38
 8010820:	08016b58 	.word	0x08016b58
 8010824:	08016b7c 	.word	0x08016b7c
 8010828:	08016ba0 	.word	0x08016ba0
 801082c:	08016bc4 	.word	0x08016bc4
 8010830:	2000c64c 	.word	0x2000c64c

08010834 <udp_bind>:
 *
 * @see udp_disconnect()
 */
err_t
udp_bind(struct udp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 8010834:	b580      	push	{r7, lr}
 8010836:	b086      	sub	sp, #24
 8010838:	af00      	add	r7, sp, #0
 801083a:	60f8      	str	r0, [r7, #12]
 801083c:	60b9      	str	r1, [r7, #8]
 801083e:	4613      	mov	r3, r2
 8010840:	80fb      	strh	r3, [r7, #6]

  LWIP_ASSERT_CORE_LOCKED();

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 8010842:	68bb      	ldr	r3, [r7, #8]
 8010844:	2b00      	cmp	r3, #0
 8010846:	d101      	bne.n	801084c <udp_bind+0x18>
    ipaddr = IP4_ADDR_ANY;
 8010848:	4b39      	ldr	r3, [pc, #228]	; (8010930 <udp_bind+0xfc>)
 801084a:	60bb      	str	r3, [r7, #8]
  }
#else /* LWIP_IPV4 */
  LWIP_ERROR("udp_bind: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
#endif /* LWIP_IPV4 */

  LWIP_ERROR("udp_bind: invalid pcb", pcb != NULL, return ERR_ARG);
 801084c:	68fb      	ldr	r3, [r7, #12]
 801084e:	2b00      	cmp	r3, #0
 8010850:	d109      	bne.n	8010866 <udp_bind+0x32>
 8010852:	4b38      	ldr	r3, [pc, #224]	; (8010934 <udp_bind+0x100>)
 8010854:	f240 32b7 	movw	r2, #951	; 0x3b7
 8010858:	4937      	ldr	r1, [pc, #220]	; (8010938 <udp_bind+0x104>)
 801085a:	4838      	ldr	r0, [pc, #224]	; (801093c <udp_bind+0x108>)
 801085c:	f003 f884 	bl	8013968 <iprintf>
 8010860:	f06f 030f 	mvn.w	r3, #15
 8010864:	e060      	b.n	8010928 <udp_bind+0xf4>

  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_bind(ipaddr = "));
  ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_TRACE, ipaddr);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, (", port = %"U16_F")\n", port));

  rebind = 0;
 8010866:	2300      	movs	r3, #0
 8010868:	74fb      	strb	r3, [r7, #19]
  /* Check for double bind and rebind of the same pcb */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 801086a:	4b35      	ldr	r3, [pc, #212]	; (8010940 <udp_bind+0x10c>)
 801086c:	681b      	ldr	r3, [r3, #0]
 801086e:	617b      	str	r3, [r7, #20]
 8010870:	e009      	b.n	8010886 <udp_bind+0x52>
    /* is this UDP PCB already on active list? */
    if (pcb == ipcb) {
 8010872:	68fa      	ldr	r2, [r7, #12]
 8010874:	697b      	ldr	r3, [r7, #20]
 8010876:	429a      	cmp	r2, r3
 8010878:	d102      	bne.n	8010880 <udp_bind+0x4c>
      rebind = 1;
 801087a:	2301      	movs	r3, #1
 801087c:	74fb      	strb	r3, [r7, #19]
      break;
 801087e:	e005      	b.n	801088c <udp_bind+0x58>
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8010880:	697b      	ldr	r3, [r7, #20]
 8010882:	68db      	ldr	r3, [r3, #12]
 8010884:	617b      	str	r3, [r7, #20]
 8010886:	697b      	ldr	r3, [r7, #20]
 8010888:	2b00      	cmp	r3, #0
 801088a:	d1f2      	bne.n	8010872 <udp_bind+0x3e>
    ipaddr = &zoned_ipaddr;
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  /* no port specified? */
  if (port == 0) {
 801088c:	88fb      	ldrh	r3, [r7, #6]
 801088e:	2b00      	cmp	r3, #0
 8010890:	d109      	bne.n	80108a6 <udp_bind+0x72>
    port = udp_new_port();
 8010892:	f7ff fc1b 	bl	80100cc <udp_new_port>
 8010896:	4603      	mov	r3, r0
 8010898:	80fb      	strh	r3, [r7, #6]
    if (port == 0) {
 801089a:	88fb      	ldrh	r3, [r7, #6]
 801089c:	2b00      	cmp	r3, #0
 801089e:	d12c      	bne.n	80108fa <udp_bind+0xc6>
      /* no more ports available in local range */
      LWIP_DEBUGF(UDP_DEBUG, ("udp_bind: out of free UDP ports\n"));
      return ERR_USE;
 80108a0:	f06f 0307 	mvn.w	r3, #7
 80108a4:	e040      	b.n	8010928 <udp_bind+0xf4>
    }
  } else {
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 80108a6:	4b26      	ldr	r3, [pc, #152]	; (8010940 <udp_bind+0x10c>)
 80108a8:	681b      	ldr	r3, [r3, #0]
 80108aa:	617b      	str	r3, [r7, #20]
 80108ac:	e022      	b.n	80108f4 <udp_bind+0xc0>
      if (pcb != ipcb) {
 80108ae:	68fa      	ldr	r2, [r7, #12]
 80108b0:	697b      	ldr	r3, [r7, #20]
 80108b2:	429a      	cmp	r2, r3
 80108b4:	d01b      	beq.n	80108ee <udp_bind+0xba>
        if (!ip_get_option(pcb, SOF_REUSEADDR) ||
            !ip_get_option(ipcb, SOF_REUSEADDR))
#endif /* SO_REUSE */
        {
          /* port matches that of PCB in list and REUSEADDR not set -> reject */
          if ((ipcb->local_port == port) &&
 80108b6:	697b      	ldr	r3, [r7, #20]
 80108b8:	8a5b      	ldrh	r3, [r3, #18]
 80108ba:	88fa      	ldrh	r2, [r7, #6]
 80108bc:	429a      	cmp	r2, r3
 80108be:	d116      	bne.n	80108ee <udp_bind+0xba>
              /* IP address matches or any IP used? */
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 80108c0:	697b      	ldr	r3, [r7, #20]
 80108c2:	681a      	ldr	r2, [r3, #0]
 80108c4:	68bb      	ldr	r3, [r7, #8]
 80108c6:	681b      	ldr	r3, [r3, #0]
          if ((ipcb->local_port == port) &&
 80108c8:	429a      	cmp	r2, r3
 80108ca:	d00d      	beq.n	80108e8 <udp_bind+0xb4>
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 80108cc:	68bb      	ldr	r3, [r7, #8]
 80108ce:	2b00      	cmp	r3, #0
 80108d0:	d00a      	beq.n	80108e8 <udp_bind+0xb4>
 80108d2:	68bb      	ldr	r3, [r7, #8]
 80108d4:	681b      	ldr	r3, [r3, #0]
 80108d6:	2b00      	cmp	r3, #0
 80108d8:	d006      	beq.n	80108e8 <udp_bind+0xb4>
              ip_addr_isany(&ipcb->local_ip))) {
 80108da:	697b      	ldr	r3, [r7, #20]
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 80108dc:	2b00      	cmp	r3, #0
 80108de:	d003      	beq.n	80108e8 <udp_bind+0xb4>
              ip_addr_isany(&ipcb->local_ip))) {
 80108e0:	697b      	ldr	r3, [r7, #20]
 80108e2:	681b      	ldr	r3, [r3, #0]
 80108e4:	2b00      	cmp	r3, #0
 80108e6:	d102      	bne.n	80108ee <udp_bind+0xba>
            /* other PCB already binds to this local IP and port */
            LWIP_DEBUGF(UDP_DEBUG,
                        ("udp_bind: local port %"U16_F" already bound by another pcb\n", port));
            return ERR_USE;
 80108e8:	f06f 0307 	mvn.w	r3, #7
 80108ec:	e01c      	b.n	8010928 <udp_bind+0xf4>
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 80108ee:	697b      	ldr	r3, [r7, #20]
 80108f0:	68db      	ldr	r3, [r3, #12]
 80108f2:	617b      	str	r3, [r7, #20]
 80108f4:	697b      	ldr	r3, [r7, #20]
 80108f6:	2b00      	cmp	r3, #0
 80108f8:	d1d9      	bne.n	80108ae <udp_bind+0x7a>
        }
      }
    }
  }

  ip_addr_set_ipaddr(&pcb->local_ip, ipaddr);
 80108fa:	68bb      	ldr	r3, [r7, #8]
 80108fc:	2b00      	cmp	r3, #0
 80108fe:	d002      	beq.n	8010906 <udp_bind+0xd2>
 8010900:	68bb      	ldr	r3, [r7, #8]
 8010902:	681b      	ldr	r3, [r3, #0]
 8010904:	e000      	b.n	8010908 <udp_bind+0xd4>
 8010906:	2300      	movs	r3, #0
 8010908:	68fa      	ldr	r2, [r7, #12]
 801090a:	6013      	str	r3, [r2, #0]

  pcb->local_port = port;
 801090c:	68fb      	ldr	r3, [r7, #12]
 801090e:	88fa      	ldrh	r2, [r7, #6]
 8010910:	825a      	strh	r2, [r3, #18]
  mib2_udp_bind(pcb);
  /* pcb not active yet? */
  if (rebind == 0) {
 8010912:	7cfb      	ldrb	r3, [r7, #19]
 8010914:	2b00      	cmp	r3, #0
 8010916:	d106      	bne.n	8010926 <udp_bind+0xf2>
    /* place the PCB on the active list if not already there */
    pcb->next = udp_pcbs;
 8010918:	4b09      	ldr	r3, [pc, #36]	; (8010940 <udp_bind+0x10c>)
 801091a:	681a      	ldr	r2, [r3, #0]
 801091c:	68fb      	ldr	r3, [r7, #12]
 801091e:	60da      	str	r2, [r3, #12]
    udp_pcbs = pcb;
 8010920:	4a07      	ldr	r2, [pc, #28]	; (8010940 <udp_bind+0x10c>)
 8010922:	68fb      	ldr	r3, [r7, #12]
 8010924:	6013      	str	r3, [r2, #0]
  }
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("udp_bind: bound to "));
  ip_addr_debug_print_val(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, pcb->local_ip);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, (", port %"U16_F")\n", pcb->local_port));
  return ERR_OK;
 8010926:	2300      	movs	r3, #0
}
 8010928:	4618      	mov	r0, r3
 801092a:	3718      	adds	r7, #24
 801092c:	46bd      	mov	sp, r7
 801092e:	bd80      	pop	{r7, pc}
 8010930:	080174c0 	.word	0x080174c0
 8010934:	0801692c 	.word	0x0801692c
 8010938:	08016bf4 	.word	0x08016bf4
 801093c:	08016980 	.word	0x08016980
 8010940:	2000c7a4 	.word	0x2000c7a4

08010944 <udp_disconnect>:
 *
 * @param pcb the udp pcb to disconnect.
 */
void
udp_disconnect(struct udp_pcb *pcb)
{
 8010944:	b580      	push	{r7, lr}
 8010946:	b082      	sub	sp, #8
 8010948:	af00      	add	r7, sp, #0
 801094a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_disconnect: invalid pcb", pcb != NULL, return);
 801094c:	687b      	ldr	r3, [r7, #4]
 801094e:	2b00      	cmp	r3, #0
 8010950:	d107      	bne.n	8010962 <udp_disconnect+0x1e>
 8010952:	4b0d      	ldr	r3, [pc, #52]	; (8010988 <udp_disconnect+0x44>)
 8010954:	f240 426a 	movw	r2, #1130	; 0x46a
 8010958:	490c      	ldr	r1, [pc, #48]	; (801098c <udp_disconnect+0x48>)
 801095a:	480d      	ldr	r0, [pc, #52]	; (8010990 <udp_disconnect+0x4c>)
 801095c:	f003 f804 	bl	8013968 <iprintf>
 8010960:	e00f      	b.n	8010982 <udp_disconnect+0x3e>
#if LWIP_IPV4 && LWIP_IPV6
  if (IP_IS_ANY_TYPE_VAL(pcb->local_ip)) {
    ip_addr_copy(pcb->remote_ip, *IP_ANY_TYPE);
  } else {
#endif
    ip_addr_set_any(IP_IS_V6_VAL(pcb->remote_ip), &pcb->remote_ip);
 8010962:	687b      	ldr	r3, [r7, #4]
 8010964:	2200      	movs	r2, #0
 8010966:	605a      	str	r2, [r3, #4]
#if LWIP_IPV4 && LWIP_IPV6
  }
#endif
  pcb->remote_port = 0;
 8010968:	687b      	ldr	r3, [r7, #4]
 801096a:	2200      	movs	r2, #0
 801096c:	829a      	strh	r2, [r3, #20]
  pcb->netif_idx = NETIF_NO_INDEX;
 801096e:	687b      	ldr	r3, [r7, #4]
 8010970:	2200      	movs	r2, #0
 8010972:	721a      	strb	r2, [r3, #8]
  /* mark PCB as unconnected */
  udp_clear_flags(pcb, UDP_FLAGS_CONNECTED);
 8010974:	687b      	ldr	r3, [r7, #4]
 8010976:	7c1b      	ldrb	r3, [r3, #16]
 8010978:	f023 0304 	bic.w	r3, r3, #4
 801097c:	b2da      	uxtb	r2, r3
 801097e:	687b      	ldr	r3, [r7, #4]
 8010980:	741a      	strb	r2, [r3, #16]
}
 8010982:	3708      	adds	r7, #8
 8010984:	46bd      	mov	sp, r7
 8010986:	bd80      	pop	{r7, pc}
 8010988:	0801692c 	.word	0x0801692c
 801098c:	08016c44 	.word	0x08016c44
 8010990:	08016980 	.word	0x08016980

08010994 <udp_recv>:
 * @param recv function pointer of the callback function
 * @param recv_arg additional argument to pass to the callback function
 */
void
udp_recv(struct udp_pcb *pcb, udp_recv_fn recv, void *recv_arg)
{
 8010994:	b580      	push	{r7, lr}
 8010996:	b084      	sub	sp, #16
 8010998:	af00      	add	r7, sp, #0
 801099a:	60f8      	str	r0, [r7, #12]
 801099c:	60b9      	str	r1, [r7, #8]
 801099e:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_recv: invalid pcb", pcb != NULL, return);
 80109a0:	68fb      	ldr	r3, [r7, #12]
 80109a2:	2b00      	cmp	r3, #0
 80109a4:	d107      	bne.n	80109b6 <udp_recv+0x22>
 80109a6:	4b08      	ldr	r3, [pc, #32]	; (80109c8 <udp_recv+0x34>)
 80109a8:	f240 428a 	movw	r2, #1162	; 0x48a
 80109ac:	4907      	ldr	r1, [pc, #28]	; (80109cc <udp_recv+0x38>)
 80109ae:	4808      	ldr	r0, [pc, #32]	; (80109d0 <udp_recv+0x3c>)
 80109b0:	f002 ffda 	bl	8013968 <iprintf>
 80109b4:	e005      	b.n	80109c2 <udp_recv+0x2e>

  /* remember recv() callback and user data */
  pcb->recv = recv;
 80109b6:	68fb      	ldr	r3, [r7, #12]
 80109b8:	68ba      	ldr	r2, [r7, #8]
 80109ba:	619a      	str	r2, [r3, #24]
  pcb->recv_arg = recv_arg;
 80109bc:	68fb      	ldr	r3, [r7, #12]
 80109be:	687a      	ldr	r2, [r7, #4]
 80109c0:	61da      	str	r2, [r3, #28]
}
 80109c2:	3710      	adds	r7, #16
 80109c4:	46bd      	mov	sp, r7
 80109c6:	bd80      	pop	{r7, pc}
 80109c8:	0801692c 	.word	0x0801692c
 80109cc:	08016c60 	.word	0x08016c60
 80109d0:	08016980 	.word	0x08016980

080109d4 <udp_remove>:
 *
 * @see udp_new()
 */
void
udp_remove(struct udp_pcb *pcb)
{
 80109d4:	b580      	push	{r7, lr}
 80109d6:	b084      	sub	sp, #16
 80109d8:	af00      	add	r7, sp, #0
 80109da:	6078      	str	r0, [r7, #4]
  struct udp_pcb *pcb2;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_remove: invalid pcb", pcb != NULL, return);
 80109dc:	687b      	ldr	r3, [r7, #4]
 80109de:	2b00      	cmp	r3, #0
 80109e0:	d107      	bne.n	80109f2 <udp_remove+0x1e>
 80109e2:	4b19      	ldr	r3, [pc, #100]	; (8010a48 <udp_remove+0x74>)
 80109e4:	f240 42a1 	movw	r2, #1185	; 0x4a1
 80109e8:	4918      	ldr	r1, [pc, #96]	; (8010a4c <udp_remove+0x78>)
 80109ea:	4819      	ldr	r0, [pc, #100]	; (8010a50 <udp_remove+0x7c>)
 80109ec:	f002 ffbc 	bl	8013968 <iprintf>
 80109f0:	e026      	b.n	8010a40 <udp_remove+0x6c>

  mib2_udp_unbind(pcb);
  /* pcb to be removed is first in list? */
  if (udp_pcbs == pcb) {
 80109f2:	4b18      	ldr	r3, [pc, #96]	; (8010a54 <udp_remove+0x80>)
 80109f4:	681b      	ldr	r3, [r3, #0]
 80109f6:	687a      	ldr	r2, [r7, #4]
 80109f8:	429a      	cmp	r2, r3
 80109fa:	d105      	bne.n	8010a08 <udp_remove+0x34>
    /* make list start at 2nd pcb */
    udp_pcbs = udp_pcbs->next;
 80109fc:	4b15      	ldr	r3, [pc, #84]	; (8010a54 <udp_remove+0x80>)
 80109fe:	681b      	ldr	r3, [r3, #0]
 8010a00:	68db      	ldr	r3, [r3, #12]
 8010a02:	4a14      	ldr	r2, [pc, #80]	; (8010a54 <udp_remove+0x80>)
 8010a04:	6013      	str	r3, [r2, #0]
 8010a06:	e017      	b.n	8010a38 <udp_remove+0x64>
    /* pcb not 1st in list */
  } else {
    for (pcb2 = udp_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
 8010a08:	4b12      	ldr	r3, [pc, #72]	; (8010a54 <udp_remove+0x80>)
 8010a0a:	681b      	ldr	r3, [r3, #0]
 8010a0c:	60fb      	str	r3, [r7, #12]
 8010a0e:	e010      	b.n	8010a32 <udp_remove+0x5e>
      /* find pcb in udp_pcbs list */
      if (pcb2->next != NULL && pcb2->next == pcb) {
 8010a10:	68fb      	ldr	r3, [r7, #12]
 8010a12:	68db      	ldr	r3, [r3, #12]
 8010a14:	2b00      	cmp	r3, #0
 8010a16:	d009      	beq.n	8010a2c <udp_remove+0x58>
 8010a18:	68fb      	ldr	r3, [r7, #12]
 8010a1a:	68db      	ldr	r3, [r3, #12]
 8010a1c:	687a      	ldr	r2, [r7, #4]
 8010a1e:	429a      	cmp	r2, r3
 8010a20:	d104      	bne.n	8010a2c <udp_remove+0x58>
        /* remove pcb from list */
        pcb2->next = pcb->next;
 8010a22:	687b      	ldr	r3, [r7, #4]
 8010a24:	68da      	ldr	r2, [r3, #12]
 8010a26:	68fb      	ldr	r3, [r7, #12]
 8010a28:	60da      	str	r2, [r3, #12]
        break;
 8010a2a:	e005      	b.n	8010a38 <udp_remove+0x64>
    for (pcb2 = udp_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
 8010a2c:	68fb      	ldr	r3, [r7, #12]
 8010a2e:	68db      	ldr	r3, [r3, #12]
 8010a30:	60fb      	str	r3, [r7, #12]
 8010a32:	68fb      	ldr	r3, [r7, #12]
 8010a34:	2b00      	cmp	r3, #0
 8010a36:	d1eb      	bne.n	8010a10 <udp_remove+0x3c>
      }
    }
  }
  memp_free(MEMP_UDP_PCB, pcb);
 8010a38:	6879      	ldr	r1, [r7, #4]
 8010a3a:	2000      	movs	r0, #0
 8010a3c:	f7f8 fe3e 	bl	80096bc <memp_free>
}
 8010a40:	3710      	adds	r7, #16
 8010a42:	46bd      	mov	sp, r7
 8010a44:	bd80      	pop	{r7, pc}
 8010a46:	bf00      	nop
 8010a48:	0801692c 	.word	0x0801692c
 8010a4c:	08016c78 	.word	0x08016c78
 8010a50:	08016980 	.word	0x08016980
 8010a54:	2000c7a4 	.word	0x2000c7a4

08010a58 <udp_new>:
 *
 * @see udp_remove()
 */
struct udp_pcb *
udp_new(void)
{
 8010a58:	b580      	push	{r7, lr}
 8010a5a:	b082      	sub	sp, #8
 8010a5c:	af00      	add	r7, sp, #0
  struct udp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct udp_pcb *)memp_malloc(MEMP_UDP_PCB);
 8010a5e:	2000      	movs	r0, #0
 8010a60:	f7f8 fdb0 	bl	80095c4 <memp_malloc>
 8010a64:	6078      	str	r0, [r7, #4]
  /* could allocate UDP PCB? */
  if (pcb != NULL) {
 8010a66:	687b      	ldr	r3, [r7, #4]
 8010a68:	2b00      	cmp	r3, #0
 8010a6a:	d007      	beq.n	8010a7c <udp_new+0x24>
    /* UDP Lite: by initializing to all zeroes, chksum_len is set to 0
     * which means checksum is generated over the whole datagram per default
     * (recommended as default by RFC 3828). */
    /* initialize PCB to all zeroes */
    memset(pcb, 0, sizeof(struct udp_pcb));
 8010a6c:	2220      	movs	r2, #32
 8010a6e:	2100      	movs	r1, #0
 8010a70:	6878      	ldr	r0, [r7, #4]
 8010a72:	f002 fedc 	bl	801382e <memset>
    pcb->ttl = UDP_TTL;
 8010a76:	687b      	ldr	r3, [r7, #4]
 8010a78:	22ff      	movs	r2, #255	; 0xff
 8010a7a:	72da      	strb	r2, [r3, #11]
#if LWIP_MULTICAST_TX_OPTIONS
    udp_set_multicast_ttl(pcb, UDP_TTL);
#endif /* LWIP_MULTICAST_TX_OPTIONS */
  }
  return pcb;
 8010a7c:	687b      	ldr	r3, [r7, #4]
}
 8010a7e:	4618      	mov	r0, r3
 8010a80:	3708      	adds	r7, #8
 8010a82:	46bd      	mov	sp, r7
 8010a84:	bd80      	pop	{r7, pc}
	...

08010a88 <udp_netif_ip_addr_changed>:
 *
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change
 */
void udp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 8010a88:	b480      	push	{r7}
 8010a8a:	b085      	sub	sp, #20
 8010a8c:	af00      	add	r7, sp, #0
 8010a8e:	6078      	str	r0, [r7, #4]
 8010a90:	6039      	str	r1, [r7, #0]
  struct udp_pcb *upcb;

  if (!ip_addr_isany(old_addr) && !ip_addr_isany(new_addr)) {
 8010a92:	687b      	ldr	r3, [r7, #4]
 8010a94:	2b00      	cmp	r3, #0
 8010a96:	d01e      	beq.n	8010ad6 <udp_netif_ip_addr_changed+0x4e>
 8010a98:	687b      	ldr	r3, [r7, #4]
 8010a9a:	681b      	ldr	r3, [r3, #0]
 8010a9c:	2b00      	cmp	r3, #0
 8010a9e:	d01a      	beq.n	8010ad6 <udp_netif_ip_addr_changed+0x4e>
 8010aa0:	683b      	ldr	r3, [r7, #0]
 8010aa2:	2b00      	cmp	r3, #0
 8010aa4:	d017      	beq.n	8010ad6 <udp_netif_ip_addr_changed+0x4e>
 8010aa6:	683b      	ldr	r3, [r7, #0]
 8010aa8:	681b      	ldr	r3, [r3, #0]
 8010aaa:	2b00      	cmp	r3, #0
 8010aac:	d013      	beq.n	8010ad6 <udp_netif_ip_addr_changed+0x4e>
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 8010aae:	4b0d      	ldr	r3, [pc, #52]	; (8010ae4 <udp_netif_ip_addr_changed+0x5c>)
 8010ab0:	681b      	ldr	r3, [r3, #0]
 8010ab2:	60fb      	str	r3, [r7, #12]
 8010ab4:	e00c      	b.n	8010ad0 <udp_netif_ip_addr_changed+0x48>
      /* PCB bound to current local interface address? */
      if (ip_addr_cmp(&upcb->local_ip, old_addr)) {
 8010ab6:	68fb      	ldr	r3, [r7, #12]
 8010ab8:	681a      	ldr	r2, [r3, #0]
 8010aba:	687b      	ldr	r3, [r7, #4]
 8010abc:	681b      	ldr	r3, [r3, #0]
 8010abe:	429a      	cmp	r2, r3
 8010ac0:	d103      	bne.n	8010aca <udp_netif_ip_addr_changed+0x42>
        /* The PCB is bound to the old ipaddr and
         * is set to bound to the new one instead */
        ip_addr_copy(upcb->local_ip, *new_addr);
 8010ac2:	683b      	ldr	r3, [r7, #0]
 8010ac4:	681a      	ldr	r2, [r3, #0]
 8010ac6:	68fb      	ldr	r3, [r7, #12]
 8010ac8:	601a      	str	r2, [r3, #0]
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 8010aca:	68fb      	ldr	r3, [r7, #12]
 8010acc:	68db      	ldr	r3, [r3, #12]
 8010ace:	60fb      	str	r3, [r7, #12]
 8010ad0:	68fb      	ldr	r3, [r7, #12]
 8010ad2:	2b00      	cmp	r3, #0
 8010ad4:	d1ef      	bne.n	8010ab6 <udp_netif_ip_addr_changed+0x2e>
      }
    }
  }
}
 8010ad6:	bf00      	nop
 8010ad8:	3714      	adds	r7, #20
 8010ada:	46bd      	mov	sp, r7
 8010adc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010ae0:	4770      	bx	lr
 8010ae2:	bf00      	nop
 8010ae4:	2000c7a4 	.word	0x2000c7a4

08010ae8 <etharp_free_entry>:
#endif /* ARP_QUEUEING */

/** Clean up ARP table entries */
static void
etharp_free_entry(int i)
{
 8010ae8:	b580      	push	{r7, lr}
 8010aea:	b082      	sub	sp, #8
 8010aec:	af00      	add	r7, sp, #0
 8010aee:	6078      	str	r0, [r7, #4]
  /* remove from SNMP ARP index tree */
  mib2_remove_arp_entry(arp_table[i].netif, &arp_table[i].ipaddr);
  /* and empty packet queue */
  if (arp_table[i].q != NULL) {
 8010af0:	4915      	ldr	r1, [pc, #84]	; (8010b48 <etharp_free_entry+0x60>)
 8010af2:	687a      	ldr	r2, [r7, #4]
 8010af4:	4613      	mov	r3, r2
 8010af6:	005b      	lsls	r3, r3, #1
 8010af8:	4413      	add	r3, r2
 8010afa:	00db      	lsls	r3, r3, #3
 8010afc:	440b      	add	r3, r1
 8010afe:	681b      	ldr	r3, [r3, #0]
 8010b00:	2b00      	cmp	r3, #0
 8010b02:	d013      	beq.n	8010b2c <etharp_free_entry+0x44>
    /* remove all queued packets */
    LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_free_entry: freeing entry %"U16_F", packet queue %p.\n", (u16_t)i, (void *)(arp_table[i].q)));
    free_etharp_q(arp_table[i].q);
 8010b04:	4910      	ldr	r1, [pc, #64]	; (8010b48 <etharp_free_entry+0x60>)
 8010b06:	687a      	ldr	r2, [r7, #4]
 8010b08:	4613      	mov	r3, r2
 8010b0a:	005b      	lsls	r3, r3, #1
 8010b0c:	4413      	add	r3, r2
 8010b0e:	00db      	lsls	r3, r3, #3
 8010b10:	440b      	add	r3, r1
 8010b12:	681b      	ldr	r3, [r3, #0]
 8010b14:	4618      	mov	r0, r3
 8010b16:	f7f9 fc75 	bl	800a404 <pbuf_free>
    arp_table[i].q = NULL;
 8010b1a:	490b      	ldr	r1, [pc, #44]	; (8010b48 <etharp_free_entry+0x60>)
 8010b1c:	687a      	ldr	r2, [r7, #4]
 8010b1e:	4613      	mov	r3, r2
 8010b20:	005b      	lsls	r3, r3, #1
 8010b22:	4413      	add	r3, r2
 8010b24:	00db      	lsls	r3, r3, #3
 8010b26:	440b      	add	r3, r1
 8010b28:	2200      	movs	r2, #0
 8010b2a:	601a      	str	r2, [r3, #0]
  }
  /* recycle entry for re-use */
  arp_table[i].state = ETHARP_STATE_EMPTY;
 8010b2c:	4906      	ldr	r1, [pc, #24]	; (8010b48 <etharp_free_entry+0x60>)
 8010b2e:	687a      	ldr	r2, [r7, #4]
 8010b30:	4613      	mov	r3, r2
 8010b32:	005b      	lsls	r3, r3, #1
 8010b34:	4413      	add	r3, r2
 8010b36:	00db      	lsls	r3, r3, #3
 8010b38:	440b      	add	r3, r1
 8010b3a:	3314      	adds	r3, #20
 8010b3c:	2200      	movs	r2, #0
 8010b3e:	701a      	strb	r2, [r3, #0]
  arp_table[i].ctime = 0;
  arp_table[i].netif = NULL;
  ip4_addr_set_zero(&arp_table[i].ipaddr);
  arp_table[i].ethaddr = ethzero;
#endif /* LWIP_DEBUG */
}
 8010b40:	bf00      	nop
 8010b42:	3708      	adds	r7, #8
 8010b44:	46bd      	mov	sp, r7
 8010b46:	bd80      	pop	{r7, pc}
 8010b48:	2000c7a8 	.word	0x2000c7a8

08010b4c <etharp_tmr>:
 * This function should be called every ARP_TMR_INTERVAL milliseconds (1 second),
 * in order to expire entries in the ARP table.
 */
void
etharp_tmr(void)
{
 8010b4c:	b580      	push	{r7, lr}
 8010b4e:	b082      	sub	sp, #8
 8010b50:	af00      	add	r7, sp, #0
  int i;

  LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer\n"));
  /* remove expired entries from the ARP table */
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8010b52:	2300      	movs	r3, #0
 8010b54:	607b      	str	r3, [r7, #4]
 8010b56:	e096      	b.n	8010c86 <etharp_tmr+0x13a>
    u8_t state = arp_table[i].state;
 8010b58:	494f      	ldr	r1, [pc, #316]	; (8010c98 <etharp_tmr+0x14c>)
 8010b5a:	687a      	ldr	r2, [r7, #4]
 8010b5c:	4613      	mov	r3, r2
 8010b5e:	005b      	lsls	r3, r3, #1
 8010b60:	4413      	add	r3, r2
 8010b62:	00db      	lsls	r3, r3, #3
 8010b64:	440b      	add	r3, r1
 8010b66:	3314      	adds	r3, #20
 8010b68:	781b      	ldrb	r3, [r3, #0]
 8010b6a:	70fb      	strb	r3, [r7, #3]
    if (state != ETHARP_STATE_EMPTY
 8010b6c:	78fb      	ldrb	r3, [r7, #3]
 8010b6e:	2b00      	cmp	r3, #0
 8010b70:	f000 8086 	beq.w	8010c80 <etharp_tmr+0x134>
#if ETHARP_SUPPORT_STATIC_ENTRIES
        && (state != ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
       ) {
      arp_table[i].ctime++;
 8010b74:	4948      	ldr	r1, [pc, #288]	; (8010c98 <etharp_tmr+0x14c>)
 8010b76:	687a      	ldr	r2, [r7, #4]
 8010b78:	4613      	mov	r3, r2
 8010b7a:	005b      	lsls	r3, r3, #1
 8010b7c:	4413      	add	r3, r2
 8010b7e:	00db      	lsls	r3, r3, #3
 8010b80:	440b      	add	r3, r1
 8010b82:	3312      	adds	r3, #18
 8010b84:	881b      	ldrh	r3, [r3, #0]
 8010b86:	3301      	adds	r3, #1
 8010b88:	b298      	uxth	r0, r3
 8010b8a:	4943      	ldr	r1, [pc, #268]	; (8010c98 <etharp_tmr+0x14c>)
 8010b8c:	687a      	ldr	r2, [r7, #4]
 8010b8e:	4613      	mov	r3, r2
 8010b90:	005b      	lsls	r3, r3, #1
 8010b92:	4413      	add	r3, r2
 8010b94:	00db      	lsls	r3, r3, #3
 8010b96:	440b      	add	r3, r1
 8010b98:	3312      	adds	r3, #18
 8010b9a:	4602      	mov	r2, r0
 8010b9c:	801a      	strh	r2, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 8010b9e:	493e      	ldr	r1, [pc, #248]	; (8010c98 <etharp_tmr+0x14c>)
 8010ba0:	687a      	ldr	r2, [r7, #4]
 8010ba2:	4613      	mov	r3, r2
 8010ba4:	005b      	lsls	r3, r3, #1
 8010ba6:	4413      	add	r3, r2
 8010ba8:	00db      	lsls	r3, r3, #3
 8010baa:	440b      	add	r3, r1
 8010bac:	3312      	adds	r3, #18
 8010bae:	881b      	ldrh	r3, [r3, #0]
 8010bb0:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 8010bb4:	d215      	bcs.n	8010be2 <etharp_tmr+0x96>
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 8010bb6:	4938      	ldr	r1, [pc, #224]	; (8010c98 <etharp_tmr+0x14c>)
 8010bb8:	687a      	ldr	r2, [r7, #4]
 8010bba:	4613      	mov	r3, r2
 8010bbc:	005b      	lsls	r3, r3, #1
 8010bbe:	4413      	add	r3, r2
 8010bc0:	00db      	lsls	r3, r3, #3
 8010bc2:	440b      	add	r3, r1
 8010bc4:	3314      	adds	r3, #20
 8010bc6:	781b      	ldrb	r3, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 8010bc8:	2b01      	cmp	r3, #1
 8010bca:	d10e      	bne.n	8010bea <etharp_tmr+0x9e>
           (arp_table[i].ctime >= ARP_MAXPENDING))) {
 8010bcc:	4932      	ldr	r1, [pc, #200]	; (8010c98 <etharp_tmr+0x14c>)
 8010bce:	687a      	ldr	r2, [r7, #4]
 8010bd0:	4613      	mov	r3, r2
 8010bd2:	005b      	lsls	r3, r3, #1
 8010bd4:	4413      	add	r3, r2
 8010bd6:	00db      	lsls	r3, r3, #3
 8010bd8:	440b      	add	r3, r1
 8010bda:	3312      	adds	r3, #18
 8010bdc:	881b      	ldrh	r3, [r3, #0]
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 8010bde:	2b04      	cmp	r3, #4
 8010be0:	d903      	bls.n	8010bea <etharp_tmr+0x9e>
        /* pending or stable entry has become old! */
        LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer: expired %s entry %d.\n",
                                   arp_table[i].state >= ETHARP_STATE_STABLE ? "stable" : "pending", i));
        /* clean up entries that have just been expired */
        etharp_free_entry(i);
 8010be2:	6878      	ldr	r0, [r7, #4]
 8010be4:	f7ff ff80 	bl	8010ae8 <etharp_free_entry>
 8010be8:	e04a      	b.n	8010c80 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_1) {
 8010bea:	492b      	ldr	r1, [pc, #172]	; (8010c98 <etharp_tmr+0x14c>)
 8010bec:	687a      	ldr	r2, [r7, #4]
 8010bee:	4613      	mov	r3, r2
 8010bf0:	005b      	lsls	r3, r3, #1
 8010bf2:	4413      	add	r3, r2
 8010bf4:	00db      	lsls	r3, r3, #3
 8010bf6:	440b      	add	r3, r1
 8010bf8:	3314      	adds	r3, #20
 8010bfa:	781b      	ldrb	r3, [r3, #0]
 8010bfc:	2b03      	cmp	r3, #3
 8010bfe:	d10a      	bne.n	8010c16 <etharp_tmr+0xca>
        /* Don't send more than one request every 2 seconds. */
        arp_table[i].state = ETHARP_STATE_STABLE_REREQUESTING_2;
 8010c00:	4925      	ldr	r1, [pc, #148]	; (8010c98 <etharp_tmr+0x14c>)
 8010c02:	687a      	ldr	r2, [r7, #4]
 8010c04:	4613      	mov	r3, r2
 8010c06:	005b      	lsls	r3, r3, #1
 8010c08:	4413      	add	r3, r2
 8010c0a:	00db      	lsls	r3, r3, #3
 8010c0c:	440b      	add	r3, r1
 8010c0e:	3314      	adds	r3, #20
 8010c10:	2204      	movs	r2, #4
 8010c12:	701a      	strb	r2, [r3, #0]
 8010c14:	e034      	b.n	8010c80 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_2) {
 8010c16:	4920      	ldr	r1, [pc, #128]	; (8010c98 <etharp_tmr+0x14c>)
 8010c18:	687a      	ldr	r2, [r7, #4]
 8010c1a:	4613      	mov	r3, r2
 8010c1c:	005b      	lsls	r3, r3, #1
 8010c1e:	4413      	add	r3, r2
 8010c20:	00db      	lsls	r3, r3, #3
 8010c22:	440b      	add	r3, r1
 8010c24:	3314      	adds	r3, #20
 8010c26:	781b      	ldrb	r3, [r3, #0]
 8010c28:	2b04      	cmp	r3, #4
 8010c2a:	d10a      	bne.n	8010c42 <etharp_tmr+0xf6>
        /* Reset state to stable, so that the next transmitted packet will
           re-send an ARP request. */
        arp_table[i].state = ETHARP_STATE_STABLE;
 8010c2c:	491a      	ldr	r1, [pc, #104]	; (8010c98 <etharp_tmr+0x14c>)
 8010c2e:	687a      	ldr	r2, [r7, #4]
 8010c30:	4613      	mov	r3, r2
 8010c32:	005b      	lsls	r3, r3, #1
 8010c34:	4413      	add	r3, r2
 8010c36:	00db      	lsls	r3, r3, #3
 8010c38:	440b      	add	r3, r1
 8010c3a:	3314      	adds	r3, #20
 8010c3c:	2202      	movs	r2, #2
 8010c3e:	701a      	strb	r2, [r3, #0]
 8010c40:	e01e      	b.n	8010c80 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 8010c42:	4915      	ldr	r1, [pc, #84]	; (8010c98 <etharp_tmr+0x14c>)
 8010c44:	687a      	ldr	r2, [r7, #4]
 8010c46:	4613      	mov	r3, r2
 8010c48:	005b      	lsls	r3, r3, #1
 8010c4a:	4413      	add	r3, r2
 8010c4c:	00db      	lsls	r3, r3, #3
 8010c4e:	440b      	add	r3, r1
 8010c50:	3314      	adds	r3, #20
 8010c52:	781b      	ldrb	r3, [r3, #0]
 8010c54:	2b01      	cmp	r3, #1
 8010c56:	d113      	bne.n	8010c80 <etharp_tmr+0x134>
        /* still pending, resend an ARP query */
        etharp_request(arp_table[i].netif, &arp_table[i].ipaddr);
 8010c58:	490f      	ldr	r1, [pc, #60]	; (8010c98 <etharp_tmr+0x14c>)
 8010c5a:	687a      	ldr	r2, [r7, #4]
 8010c5c:	4613      	mov	r3, r2
 8010c5e:	005b      	lsls	r3, r3, #1
 8010c60:	4413      	add	r3, r2
 8010c62:	00db      	lsls	r3, r3, #3
 8010c64:	440b      	add	r3, r1
 8010c66:	3308      	adds	r3, #8
 8010c68:	6818      	ldr	r0, [r3, #0]
 8010c6a:	687a      	ldr	r2, [r7, #4]
 8010c6c:	4613      	mov	r3, r2
 8010c6e:	005b      	lsls	r3, r3, #1
 8010c70:	4413      	add	r3, r2
 8010c72:	00db      	lsls	r3, r3, #3
 8010c74:	4a08      	ldr	r2, [pc, #32]	; (8010c98 <etharp_tmr+0x14c>)
 8010c76:	4413      	add	r3, r2
 8010c78:	3304      	adds	r3, #4
 8010c7a:	4619      	mov	r1, r3
 8010c7c:	f000 feae 	bl	80119dc <etharp_request>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8010c80:	687b      	ldr	r3, [r7, #4]
 8010c82:	3301      	adds	r3, #1
 8010c84:	607b      	str	r3, [r7, #4]
 8010c86:	687b      	ldr	r3, [r7, #4]
 8010c88:	2b09      	cmp	r3, #9
 8010c8a:	f77f af65 	ble.w	8010b58 <etharp_tmr+0xc>
      }
    }
  }
}
 8010c8e:	bf00      	nop
 8010c90:	bf00      	nop
 8010c92:	3708      	adds	r7, #8
 8010c94:	46bd      	mov	sp, r7
 8010c96:	bd80      	pop	{r7, pc}
 8010c98:	2000c7a8 	.word	0x2000c7a8

08010c9c <etharp_find_entry>:
 * @return The ARP entry index that matched or is created, ERR_MEM if no
 * entry is found or could be recycled.
 */
static s16_t
etharp_find_entry(const ip4_addr_t *ipaddr, u8_t flags, struct netif *netif)
{
 8010c9c:	b580      	push	{r7, lr}
 8010c9e:	b08a      	sub	sp, #40	; 0x28
 8010ca0:	af00      	add	r7, sp, #0
 8010ca2:	60f8      	str	r0, [r7, #12]
 8010ca4:	460b      	mov	r3, r1
 8010ca6:	607a      	str	r2, [r7, #4]
 8010ca8:	72fb      	strb	r3, [r7, #11]
  s16_t old_pending = ARP_TABLE_SIZE, old_stable = ARP_TABLE_SIZE;
 8010caa:	230a      	movs	r3, #10
 8010cac:	84fb      	strh	r3, [r7, #38]	; 0x26
 8010cae:	230a      	movs	r3, #10
 8010cb0:	84bb      	strh	r3, [r7, #36]	; 0x24
  s16_t empty = ARP_TABLE_SIZE;
 8010cb2:	230a      	movs	r3, #10
 8010cb4:	847b      	strh	r3, [r7, #34]	; 0x22
  s16_t i = 0;
 8010cb6:	2300      	movs	r3, #0
 8010cb8:	843b      	strh	r3, [r7, #32]
  /* oldest entry with packets on queue */
  s16_t old_queue = ARP_TABLE_SIZE;
 8010cba:	230a      	movs	r3, #10
 8010cbc:	83fb      	strh	r3, [r7, #30]
  /* its age */
  u16_t age_queue = 0, age_pending = 0, age_stable = 0;
 8010cbe:	2300      	movs	r3, #0
 8010cc0:	83bb      	strh	r3, [r7, #28]
 8010cc2:	2300      	movs	r3, #0
 8010cc4:	837b      	strh	r3, [r7, #26]
 8010cc6:	2300      	movs	r3, #0
 8010cc8:	833b      	strh	r3, [r7, #24]
   * 4) remember the oldest pending entry with queued packets (if any)
   * 5) search for a matching IP entry, either pending or stable
   *    until 5 matches, or all entries are searched for.
   */

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8010cca:	2300      	movs	r3, #0
 8010ccc:	843b      	strh	r3, [r7, #32]
 8010cce:	e0ae      	b.n	8010e2e <etharp_find_entry+0x192>
    u8_t state = arp_table[i].state;
 8010cd0:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8010cd4:	49a6      	ldr	r1, [pc, #664]	; (8010f70 <etharp_find_entry+0x2d4>)
 8010cd6:	4613      	mov	r3, r2
 8010cd8:	005b      	lsls	r3, r3, #1
 8010cda:	4413      	add	r3, r2
 8010cdc:	00db      	lsls	r3, r3, #3
 8010cde:	440b      	add	r3, r1
 8010ce0:	3314      	adds	r3, #20
 8010ce2:	781b      	ldrb	r3, [r3, #0]
 8010ce4:	75fb      	strb	r3, [r7, #23]
    /* no empty entry found yet and now we do find one? */
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
 8010ce6:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 8010cea:	2b0a      	cmp	r3, #10
 8010cec:	d105      	bne.n	8010cfa <etharp_find_entry+0x5e>
 8010cee:	7dfb      	ldrb	r3, [r7, #23]
 8010cf0:	2b00      	cmp	r3, #0
 8010cf2:	d102      	bne.n	8010cfa <etharp_find_entry+0x5e>
      LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_find_entry: found empty entry %d\n", (int)i));
      /* remember first empty entry */
      empty = i;
 8010cf4:	8c3b      	ldrh	r3, [r7, #32]
 8010cf6:	847b      	strh	r3, [r7, #34]	; 0x22
 8010cf8:	e095      	b.n	8010e26 <etharp_find_entry+0x18a>
    } else if (state != ETHARP_STATE_EMPTY) {
 8010cfa:	7dfb      	ldrb	r3, [r7, #23]
 8010cfc:	2b00      	cmp	r3, #0
 8010cfe:	f000 8092 	beq.w	8010e26 <etharp_find_entry+0x18a>
      LWIP_ASSERT("state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE",
 8010d02:	7dfb      	ldrb	r3, [r7, #23]
 8010d04:	2b01      	cmp	r3, #1
 8010d06:	d009      	beq.n	8010d1c <etharp_find_entry+0x80>
 8010d08:	7dfb      	ldrb	r3, [r7, #23]
 8010d0a:	2b01      	cmp	r3, #1
 8010d0c:	d806      	bhi.n	8010d1c <etharp_find_entry+0x80>
 8010d0e:	4b99      	ldr	r3, [pc, #612]	; (8010f74 <etharp_find_entry+0x2d8>)
 8010d10:	f240 1223 	movw	r2, #291	; 0x123
 8010d14:	4998      	ldr	r1, [pc, #608]	; (8010f78 <etharp_find_entry+0x2dc>)
 8010d16:	4899      	ldr	r0, [pc, #612]	; (8010f7c <etharp_find_entry+0x2e0>)
 8010d18:	f002 fe26 	bl	8013968 <iprintf>
                  state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE);
      /* if given, does IP address match IP address in ARP entry? */
      if (ipaddr && ip4_addr_cmp(ipaddr, &arp_table[i].ipaddr)
 8010d1c:	68fb      	ldr	r3, [r7, #12]
 8010d1e:	2b00      	cmp	r3, #0
 8010d20:	d020      	beq.n	8010d64 <etharp_find_entry+0xc8>
 8010d22:	68fb      	ldr	r3, [r7, #12]
 8010d24:	6819      	ldr	r1, [r3, #0]
 8010d26:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8010d2a:	4891      	ldr	r0, [pc, #580]	; (8010f70 <etharp_find_entry+0x2d4>)
 8010d2c:	4613      	mov	r3, r2
 8010d2e:	005b      	lsls	r3, r3, #1
 8010d30:	4413      	add	r3, r2
 8010d32:	00db      	lsls	r3, r3, #3
 8010d34:	4403      	add	r3, r0
 8010d36:	3304      	adds	r3, #4
 8010d38:	681b      	ldr	r3, [r3, #0]
 8010d3a:	4299      	cmp	r1, r3
 8010d3c:	d112      	bne.n	8010d64 <etharp_find_entry+0xc8>
#if ETHARP_TABLE_MATCH_NETIF
          && ((netif == NULL) || (netif == arp_table[i].netif))
 8010d3e:	687b      	ldr	r3, [r7, #4]
 8010d40:	2b00      	cmp	r3, #0
 8010d42:	d00c      	beq.n	8010d5e <etharp_find_entry+0xc2>
 8010d44:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8010d48:	4989      	ldr	r1, [pc, #548]	; (8010f70 <etharp_find_entry+0x2d4>)
 8010d4a:	4613      	mov	r3, r2
 8010d4c:	005b      	lsls	r3, r3, #1
 8010d4e:	4413      	add	r3, r2
 8010d50:	00db      	lsls	r3, r3, #3
 8010d52:	440b      	add	r3, r1
 8010d54:	3308      	adds	r3, #8
 8010d56:	681b      	ldr	r3, [r3, #0]
 8010d58:	687a      	ldr	r2, [r7, #4]
 8010d5a:	429a      	cmp	r2, r3
 8010d5c:	d102      	bne.n	8010d64 <etharp_find_entry+0xc8>
#endif /* ETHARP_TABLE_MATCH_NETIF */
         ) {
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: found matching entry %d\n", (int)i));
        /* found exact IP address match, simply bail out */
        return i;
 8010d5e:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8010d62:	e100      	b.n	8010f66 <etharp_find_entry+0x2ca>
      }
      /* pending entry? */
      if (state == ETHARP_STATE_PENDING) {
 8010d64:	7dfb      	ldrb	r3, [r7, #23]
 8010d66:	2b01      	cmp	r3, #1
 8010d68:	d140      	bne.n	8010dec <etharp_find_entry+0x150>
        /* pending with queued packets? */
        if (arp_table[i].q != NULL) {
 8010d6a:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8010d6e:	4980      	ldr	r1, [pc, #512]	; (8010f70 <etharp_find_entry+0x2d4>)
 8010d70:	4613      	mov	r3, r2
 8010d72:	005b      	lsls	r3, r3, #1
 8010d74:	4413      	add	r3, r2
 8010d76:	00db      	lsls	r3, r3, #3
 8010d78:	440b      	add	r3, r1
 8010d7a:	681b      	ldr	r3, [r3, #0]
 8010d7c:	2b00      	cmp	r3, #0
 8010d7e:	d01a      	beq.n	8010db6 <etharp_find_entry+0x11a>
          if (arp_table[i].ctime >= age_queue) {
 8010d80:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8010d84:	497a      	ldr	r1, [pc, #488]	; (8010f70 <etharp_find_entry+0x2d4>)
 8010d86:	4613      	mov	r3, r2
 8010d88:	005b      	lsls	r3, r3, #1
 8010d8a:	4413      	add	r3, r2
 8010d8c:	00db      	lsls	r3, r3, #3
 8010d8e:	440b      	add	r3, r1
 8010d90:	3312      	adds	r3, #18
 8010d92:	881b      	ldrh	r3, [r3, #0]
 8010d94:	8bba      	ldrh	r2, [r7, #28]
 8010d96:	429a      	cmp	r2, r3
 8010d98:	d845      	bhi.n	8010e26 <etharp_find_entry+0x18a>
            old_queue = i;
 8010d9a:	8c3b      	ldrh	r3, [r7, #32]
 8010d9c:	83fb      	strh	r3, [r7, #30]
            age_queue = arp_table[i].ctime;
 8010d9e:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8010da2:	4973      	ldr	r1, [pc, #460]	; (8010f70 <etharp_find_entry+0x2d4>)
 8010da4:	4613      	mov	r3, r2
 8010da6:	005b      	lsls	r3, r3, #1
 8010da8:	4413      	add	r3, r2
 8010daa:	00db      	lsls	r3, r3, #3
 8010dac:	440b      	add	r3, r1
 8010dae:	3312      	adds	r3, #18
 8010db0:	881b      	ldrh	r3, [r3, #0]
 8010db2:	83bb      	strh	r3, [r7, #28]
 8010db4:	e037      	b.n	8010e26 <etharp_find_entry+0x18a>
          }
        } else
          /* pending without queued packets? */
        {
          if (arp_table[i].ctime >= age_pending) {
 8010db6:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8010dba:	496d      	ldr	r1, [pc, #436]	; (8010f70 <etharp_find_entry+0x2d4>)
 8010dbc:	4613      	mov	r3, r2
 8010dbe:	005b      	lsls	r3, r3, #1
 8010dc0:	4413      	add	r3, r2
 8010dc2:	00db      	lsls	r3, r3, #3
 8010dc4:	440b      	add	r3, r1
 8010dc6:	3312      	adds	r3, #18
 8010dc8:	881b      	ldrh	r3, [r3, #0]
 8010dca:	8b7a      	ldrh	r2, [r7, #26]
 8010dcc:	429a      	cmp	r2, r3
 8010dce:	d82a      	bhi.n	8010e26 <etharp_find_entry+0x18a>
            old_pending = i;
 8010dd0:	8c3b      	ldrh	r3, [r7, #32]
 8010dd2:	84fb      	strh	r3, [r7, #38]	; 0x26
            age_pending = arp_table[i].ctime;
 8010dd4:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8010dd8:	4965      	ldr	r1, [pc, #404]	; (8010f70 <etharp_find_entry+0x2d4>)
 8010dda:	4613      	mov	r3, r2
 8010ddc:	005b      	lsls	r3, r3, #1
 8010dde:	4413      	add	r3, r2
 8010de0:	00db      	lsls	r3, r3, #3
 8010de2:	440b      	add	r3, r1
 8010de4:	3312      	adds	r3, #18
 8010de6:	881b      	ldrh	r3, [r3, #0]
 8010de8:	837b      	strh	r3, [r7, #26]
 8010dea:	e01c      	b.n	8010e26 <etharp_find_entry+0x18a>
          }
        }
        /* stable entry? */
      } else if (state >= ETHARP_STATE_STABLE) {
 8010dec:	7dfb      	ldrb	r3, [r7, #23]
 8010dee:	2b01      	cmp	r3, #1
 8010df0:	d919      	bls.n	8010e26 <etharp_find_entry+0x18a>
        /* don't record old_stable for static entries since they never expire */
        if (state < ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
        {
          /* remember entry with oldest stable entry in oldest, its age in maxtime */
          if (arp_table[i].ctime >= age_stable) {
 8010df2:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8010df6:	495e      	ldr	r1, [pc, #376]	; (8010f70 <etharp_find_entry+0x2d4>)
 8010df8:	4613      	mov	r3, r2
 8010dfa:	005b      	lsls	r3, r3, #1
 8010dfc:	4413      	add	r3, r2
 8010dfe:	00db      	lsls	r3, r3, #3
 8010e00:	440b      	add	r3, r1
 8010e02:	3312      	adds	r3, #18
 8010e04:	881b      	ldrh	r3, [r3, #0]
 8010e06:	8b3a      	ldrh	r2, [r7, #24]
 8010e08:	429a      	cmp	r2, r3
 8010e0a:	d80c      	bhi.n	8010e26 <etharp_find_entry+0x18a>
            old_stable = i;
 8010e0c:	8c3b      	ldrh	r3, [r7, #32]
 8010e0e:	84bb      	strh	r3, [r7, #36]	; 0x24
            age_stable = arp_table[i].ctime;
 8010e10:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8010e14:	4956      	ldr	r1, [pc, #344]	; (8010f70 <etharp_find_entry+0x2d4>)
 8010e16:	4613      	mov	r3, r2
 8010e18:	005b      	lsls	r3, r3, #1
 8010e1a:	4413      	add	r3, r2
 8010e1c:	00db      	lsls	r3, r3, #3
 8010e1e:	440b      	add	r3, r1
 8010e20:	3312      	adds	r3, #18
 8010e22:	881b      	ldrh	r3, [r3, #0]
 8010e24:	833b      	strh	r3, [r7, #24]
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8010e26:	8c3b      	ldrh	r3, [r7, #32]
 8010e28:	3301      	adds	r3, #1
 8010e2a:	b29b      	uxth	r3, r3
 8010e2c:	843b      	strh	r3, [r7, #32]
 8010e2e:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8010e32:	2b09      	cmp	r3, #9
 8010e34:	f77f af4c 	ble.w	8010cd0 <etharp_find_entry+0x34>
    }
  }
  /* { we have no match } => try to create a new entry */

  /* don't create new entry, only search? */
  if (((flags & ETHARP_FLAG_FIND_ONLY) != 0) ||
 8010e38:	7afb      	ldrb	r3, [r7, #11]
 8010e3a:	f003 0302 	and.w	r3, r3, #2
 8010e3e:	2b00      	cmp	r3, #0
 8010e40:	d108      	bne.n	8010e54 <etharp_find_entry+0x1b8>
 8010e42:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 8010e46:	2b0a      	cmp	r3, #10
 8010e48:	d107      	bne.n	8010e5a <etharp_find_entry+0x1be>
      /* or no empty entry found and not allowed to recycle? */
      ((empty == ARP_TABLE_SIZE) && ((flags & ETHARP_FLAG_TRY_HARD) == 0))) {
 8010e4a:	7afb      	ldrb	r3, [r7, #11]
 8010e4c:	f003 0301 	and.w	r3, r3, #1
 8010e50:	2b00      	cmp	r3, #0
 8010e52:	d102      	bne.n	8010e5a <etharp_find_entry+0x1be>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty entry found and not allowed to recycle\n"));
    return (s16_t)ERR_MEM;
 8010e54:	f04f 33ff 	mov.w	r3, #4294967295
 8010e58:	e085      	b.n	8010f66 <etharp_find_entry+0x2ca>
   *
   * { ETHARP_FLAG_TRY_HARD is set at this point }
   */

  /* 1) empty entry available? */
  if (empty < ARP_TABLE_SIZE) {
 8010e5a:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 8010e5e:	2b09      	cmp	r3, #9
 8010e60:	dc02      	bgt.n	8010e68 <etharp_find_entry+0x1cc>
    i = empty;
 8010e62:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8010e64:	843b      	strh	r3, [r7, #32]
 8010e66:	e039      	b.n	8010edc <etharp_find_entry+0x240>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting empty entry %d\n", (int)i));
  } else {
    /* 2) found recyclable stable entry? */
    if (old_stable < ARP_TABLE_SIZE) {
 8010e68:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 8010e6c:	2b09      	cmp	r3, #9
 8010e6e:	dc14      	bgt.n	8010e9a <etharp_find_entry+0x1fe>
      /* recycle oldest stable*/
      i = old_stable;
 8010e70:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8010e72:	843b      	strh	r3, [r7, #32]
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest stable entry %d\n", (int)i));
      /* no queued packets should exist on stable entries */
      LWIP_ASSERT("arp_table[i].q == NULL", arp_table[i].q == NULL);
 8010e74:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8010e78:	493d      	ldr	r1, [pc, #244]	; (8010f70 <etharp_find_entry+0x2d4>)
 8010e7a:	4613      	mov	r3, r2
 8010e7c:	005b      	lsls	r3, r3, #1
 8010e7e:	4413      	add	r3, r2
 8010e80:	00db      	lsls	r3, r3, #3
 8010e82:	440b      	add	r3, r1
 8010e84:	681b      	ldr	r3, [r3, #0]
 8010e86:	2b00      	cmp	r3, #0
 8010e88:	d018      	beq.n	8010ebc <etharp_find_entry+0x220>
 8010e8a:	4b3a      	ldr	r3, [pc, #232]	; (8010f74 <etharp_find_entry+0x2d8>)
 8010e8c:	f240 126d 	movw	r2, #365	; 0x16d
 8010e90:	493b      	ldr	r1, [pc, #236]	; (8010f80 <etharp_find_entry+0x2e4>)
 8010e92:	483a      	ldr	r0, [pc, #232]	; (8010f7c <etharp_find_entry+0x2e0>)
 8010e94:	f002 fd68 	bl	8013968 <iprintf>
 8010e98:	e010      	b.n	8010ebc <etharp_find_entry+0x220>
      /* 3) found recyclable pending entry without queued packets? */
    } else if (old_pending < ARP_TABLE_SIZE) {
 8010e9a:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 8010e9e:	2b09      	cmp	r3, #9
 8010ea0:	dc02      	bgt.n	8010ea8 <etharp_find_entry+0x20c>
      /* recycle oldest pending */
      i = old_pending;
 8010ea2:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8010ea4:	843b      	strh	r3, [r7, #32]
 8010ea6:	e009      	b.n	8010ebc <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d (without queue)\n", (int)i));
      /* 4) found recyclable pending entry with queued packets? */
    } else if (old_queue < ARP_TABLE_SIZE) {
 8010ea8:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8010eac:	2b09      	cmp	r3, #9
 8010eae:	dc02      	bgt.n	8010eb6 <etharp_find_entry+0x21a>
      /* recycle oldest pending (queued packets are free in etharp_free_entry) */
      i = old_queue;
 8010eb0:	8bfb      	ldrh	r3, [r7, #30]
 8010eb2:	843b      	strh	r3, [r7, #32]
 8010eb4:	e002      	b.n	8010ebc <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d, freeing packet queue %p\n", (int)i, (void *)(arp_table[i].q)));
      /* no empty or recyclable entries found */
    } else {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty or recyclable entries found\n"));
      return (s16_t)ERR_MEM;
 8010eb6:	f04f 33ff 	mov.w	r3, #4294967295
 8010eba:	e054      	b.n	8010f66 <etharp_find_entry+0x2ca>
    }

    /* { empty or recyclable entry found } */
    LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 8010ebc:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8010ec0:	2b09      	cmp	r3, #9
 8010ec2:	dd06      	ble.n	8010ed2 <etharp_find_entry+0x236>
 8010ec4:	4b2b      	ldr	r3, [pc, #172]	; (8010f74 <etharp_find_entry+0x2d8>)
 8010ec6:	f240 127f 	movw	r2, #383	; 0x17f
 8010eca:	492e      	ldr	r1, [pc, #184]	; (8010f84 <etharp_find_entry+0x2e8>)
 8010ecc:	482b      	ldr	r0, [pc, #172]	; (8010f7c <etharp_find_entry+0x2e0>)
 8010ece:	f002 fd4b 	bl	8013968 <iprintf>
    etharp_free_entry(i);
 8010ed2:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8010ed6:	4618      	mov	r0, r3
 8010ed8:	f7ff fe06 	bl	8010ae8 <etharp_free_entry>
  }

  LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 8010edc:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8010ee0:	2b09      	cmp	r3, #9
 8010ee2:	dd06      	ble.n	8010ef2 <etharp_find_entry+0x256>
 8010ee4:	4b23      	ldr	r3, [pc, #140]	; (8010f74 <etharp_find_entry+0x2d8>)
 8010ee6:	f240 1283 	movw	r2, #387	; 0x183
 8010eea:	4926      	ldr	r1, [pc, #152]	; (8010f84 <etharp_find_entry+0x2e8>)
 8010eec:	4823      	ldr	r0, [pc, #140]	; (8010f7c <etharp_find_entry+0x2e0>)
 8010eee:	f002 fd3b 	bl	8013968 <iprintf>
  LWIP_ASSERT("arp_table[i].state == ETHARP_STATE_EMPTY",
 8010ef2:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8010ef6:	491e      	ldr	r1, [pc, #120]	; (8010f70 <etharp_find_entry+0x2d4>)
 8010ef8:	4613      	mov	r3, r2
 8010efa:	005b      	lsls	r3, r3, #1
 8010efc:	4413      	add	r3, r2
 8010efe:	00db      	lsls	r3, r3, #3
 8010f00:	440b      	add	r3, r1
 8010f02:	3314      	adds	r3, #20
 8010f04:	781b      	ldrb	r3, [r3, #0]
 8010f06:	2b00      	cmp	r3, #0
 8010f08:	d006      	beq.n	8010f18 <etharp_find_entry+0x27c>
 8010f0a:	4b1a      	ldr	r3, [pc, #104]	; (8010f74 <etharp_find_entry+0x2d8>)
 8010f0c:	f44f 72c2 	mov.w	r2, #388	; 0x184
 8010f10:	491d      	ldr	r1, [pc, #116]	; (8010f88 <etharp_find_entry+0x2ec>)
 8010f12:	481a      	ldr	r0, [pc, #104]	; (8010f7c <etharp_find_entry+0x2e0>)
 8010f14:	f002 fd28 	bl	8013968 <iprintf>
              arp_table[i].state == ETHARP_STATE_EMPTY);

  /* IP address given? */
  if (ipaddr != NULL) {
 8010f18:	68fb      	ldr	r3, [r7, #12]
 8010f1a:	2b00      	cmp	r3, #0
 8010f1c:	d00b      	beq.n	8010f36 <etharp_find_entry+0x29a>
    /* set IP address */
    ip4_addr_copy(arp_table[i].ipaddr, *ipaddr);
 8010f1e:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8010f22:	68fb      	ldr	r3, [r7, #12]
 8010f24:	6819      	ldr	r1, [r3, #0]
 8010f26:	4812      	ldr	r0, [pc, #72]	; (8010f70 <etharp_find_entry+0x2d4>)
 8010f28:	4613      	mov	r3, r2
 8010f2a:	005b      	lsls	r3, r3, #1
 8010f2c:	4413      	add	r3, r2
 8010f2e:	00db      	lsls	r3, r3, #3
 8010f30:	4403      	add	r3, r0
 8010f32:	3304      	adds	r3, #4
 8010f34:	6019      	str	r1, [r3, #0]
  }
  arp_table[i].ctime = 0;
 8010f36:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8010f3a:	490d      	ldr	r1, [pc, #52]	; (8010f70 <etharp_find_entry+0x2d4>)
 8010f3c:	4613      	mov	r3, r2
 8010f3e:	005b      	lsls	r3, r3, #1
 8010f40:	4413      	add	r3, r2
 8010f42:	00db      	lsls	r3, r3, #3
 8010f44:	440b      	add	r3, r1
 8010f46:	3312      	adds	r3, #18
 8010f48:	2200      	movs	r2, #0
 8010f4a:	801a      	strh	r2, [r3, #0]
#if ETHARP_TABLE_MATCH_NETIF
  arp_table[i].netif = netif;
 8010f4c:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8010f50:	4907      	ldr	r1, [pc, #28]	; (8010f70 <etharp_find_entry+0x2d4>)
 8010f52:	4613      	mov	r3, r2
 8010f54:	005b      	lsls	r3, r3, #1
 8010f56:	4413      	add	r3, r2
 8010f58:	00db      	lsls	r3, r3, #3
 8010f5a:	440b      	add	r3, r1
 8010f5c:	3308      	adds	r3, #8
 8010f5e:	687a      	ldr	r2, [r7, #4]
 8010f60:	601a      	str	r2, [r3, #0]
#endif /* ETHARP_TABLE_MATCH_NETIF */
  return (s16_t)i;
 8010f62:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
}
 8010f66:	4618      	mov	r0, r3
 8010f68:	3728      	adds	r7, #40	; 0x28
 8010f6a:	46bd      	mov	sp, r7
 8010f6c:	bd80      	pop	{r7, pc}
 8010f6e:	bf00      	nop
 8010f70:	2000c7a8 	.word	0x2000c7a8
 8010f74:	08016c90 	.word	0x08016c90
 8010f78:	08016cc8 	.word	0x08016cc8
 8010f7c:	08016d08 	.word	0x08016d08
 8010f80:	08016d30 	.word	0x08016d30
 8010f84:	08016d48 	.word	0x08016d48
 8010f88:	08016d5c 	.word	0x08016d5c

08010f8c <etharp_update_arp_entry>:
 *
 * @see pbuf_free()
 */
static err_t
etharp_update_arp_entry(struct netif *netif, const ip4_addr_t *ipaddr, struct eth_addr *ethaddr, u8_t flags)
{
 8010f8c:	b580      	push	{r7, lr}
 8010f8e:	b088      	sub	sp, #32
 8010f90:	af02      	add	r7, sp, #8
 8010f92:	60f8      	str	r0, [r7, #12]
 8010f94:	60b9      	str	r1, [r7, #8]
 8010f96:	607a      	str	r2, [r7, #4]
 8010f98:	70fb      	strb	r3, [r7, #3]
  s16_t i;
  LWIP_ASSERT("netif->hwaddr_len == ETH_HWADDR_LEN", netif->hwaddr_len == ETH_HWADDR_LEN);
 8010f9a:	68fb      	ldr	r3, [r7, #12]
 8010f9c:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8010fa0:	2b06      	cmp	r3, #6
 8010fa2:	d006      	beq.n	8010fb2 <etharp_update_arp_entry+0x26>
 8010fa4:	4b48      	ldr	r3, [pc, #288]	; (80110c8 <etharp_update_arp_entry+0x13c>)
 8010fa6:	f240 12a9 	movw	r2, #425	; 0x1a9
 8010faa:	4948      	ldr	r1, [pc, #288]	; (80110cc <etharp_update_arp_entry+0x140>)
 8010fac:	4848      	ldr	r0, [pc, #288]	; (80110d0 <etharp_update_arp_entry+0x144>)
 8010fae:	f002 fcdb 	bl	8013968 <iprintf>
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: %"U16_F".%"U16_F".%"U16_F".%"U16_F" - %02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F"\n",
              ip4_addr1_16(ipaddr), ip4_addr2_16(ipaddr), ip4_addr3_16(ipaddr), ip4_addr4_16(ipaddr),
              (u16_t)ethaddr->addr[0], (u16_t)ethaddr->addr[1], (u16_t)ethaddr->addr[2],
              (u16_t)ethaddr->addr[3], (u16_t)ethaddr->addr[4], (u16_t)ethaddr->addr[5]));
  /* non-unicast address? */
  if (ip4_addr_isany(ipaddr) ||
 8010fb2:	68bb      	ldr	r3, [r7, #8]
 8010fb4:	2b00      	cmp	r3, #0
 8010fb6:	d012      	beq.n	8010fde <etharp_update_arp_entry+0x52>
 8010fb8:	68bb      	ldr	r3, [r7, #8]
 8010fba:	681b      	ldr	r3, [r3, #0]
 8010fbc:	2b00      	cmp	r3, #0
 8010fbe:	d00e      	beq.n	8010fde <etharp_update_arp_entry+0x52>
      ip4_addr_isbroadcast(ipaddr, netif) ||
 8010fc0:	68bb      	ldr	r3, [r7, #8]
 8010fc2:	681b      	ldr	r3, [r3, #0]
 8010fc4:	68f9      	ldr	r1, [r7, #12]
 8010fc6:	4618      	mov	r0, r3
 8010fc8:	f001 f9ee 	bl	80123a8 <ip4_addr_isbroadcast_u32>
 8010fcc:	4603      	mov	r3, r0
  if (ip4_addr_isany(ipaddr) ||
 8010fce:	2b00      	cmp	r3, #0
 8010fd0:	d105      	bne.n	8010fde <etharp_update_arp_entry+0x52>
      ip4_addr_ismulticast(ipaddr)) {
 8010fd2:	68bb      	ldr	r3, [r7, #8]
 8010fd4:	681b      	ldr	r3, [r3, #0]
 8010fd6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
      ip4_addr_isbroadcast(ipaddr, netif) ||
 8010fda:	2be0      	cmp	r3, #224	; 0xe0
 8010fdc:	d102      	bne.n	8010fe4 <etharp_update_arp_entry+0x58>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 8010fde:	f06f 030f 	mvn.w	r3, #15
 8010fe2:	e06c      	b.n	80110be <etharp_update_arp_entry+0x132>
  }
  /* find or create ARP entry */
  i = etharp_find_entry(ipaddr, flags, netif);
 8010fe4:	78fb      	ldrb	r3, [r7, #3]
 8010fe6:	68fa      	ldr	r2, [r7, #12]
 8010fe8:	4619      	mov	r1, r3
 8010fea:	68b8      	ldr	r0, [r7, #8]
 8010fec:	f7ff fe56 	bl	8010c9c <etharp_find_entry>
 8010ff0:	4603      	mov	r3, r0
 8010ff2:	82fb      	strh	r3, [r7, #22]
  /* bail out if no entry could be found */
  if (i < 0) {
 8010ff4:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8010ff8:	2b00      	cmp	r3, #0
 8010ffa:	da02      	bge.n	8011002 <etharp_update_arp_entry+0x76>
    return (err_t)i;
 8010ffc:	8afb      	ldrh	r3, [r7, #22]
 8010ffe:	b25b      	sxtb	r3, r3
 8011000:	e05d      	b.n	80110be <etharp_update_arp_entry+0x132>
    return ERR_VAL;
  } else
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
  {
    /* mark it stable */
    arp_table[i].state = ETHARP_STATE_STABLE;
 8011002:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8011006:	4933      	ldr	r1, [pc, #204]	; (80110d4 <etharp_update_arp_entry+0x148>)
 8011008:	4613      	mov	r3, r2
 801100a:	005b      	lsls	r3, r3, #1
 801100c:	4413      	add	r3, r2
 801100e:	00db      	lsls	r3, r3, #3
 8011010:	440b      	add	r3, r1
 8011012:	3314      	adds	r3, #20
 8011014:	2202      	movs	r2, #2
 8011016:	701a      	strb	r2, [r3, #0]
  }

  /* record network interface */
  arp_table[i].netif = netif;
 8011018:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 801101c:	492d      	ldr	r1, [pc, #180]	; (80110d4 <etharp_update_arp_entry+0x148>)
 801101e:	4613      	mov	r3, r2
 8011020:	005b      	lsls	r3, r3, #1
 8011022:	4413      	add	r3, r2
 8011024:	00db      	lsls	r3, r3, #3
 8011026:	440b      	add	r3, r1
 8011028:	3308      	adds	r3, #8
 801102a:	68fa      	ldr	r2, [r7, #12]
 801102c:	601a      	str	r2, [r3, #0]
  /* insert in SNMP ARP index tree */
  mib2_add_arp_entry(netif, &arp_table[i].ipaddr);

  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: updating stable entry %"S16_F"\n", i));
  /* update address */
  SMEMCPY(&arp_table[i].ethaddr, ethaddr, ETH_HWADDR_LEN);
 801102e:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8011032:	4613      	mov	r3, r2
 8011034:	005b      	lsls	r3, r3, #1
 8011036:	4413      	add	r3, r2
 8011038:	00db      	lsls	r3, r3, #3
 801103a:	3308      	adds	r3, #8
 801103c:	4a25      	ldr	r2, [pc, #148]	; (80110d4 <etharp_update_arp_entry+0x148>)
 801103e:	4413      	add	r3, r2
 8011040:	3304      	adds	r3, #4
 8011042:	2206      	movs	r2, #6
 8011044:	6879      	ldr	r1, [r7, #4]
 8011046:	4618      	mov	r0, r3
 8011048:	f002 fbe3 	bl	8013812 <memcpy>
  /* reset time stamp */
  arp_table[i].ctime = 0;
 801104c:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8011050:	4920      	ldr	r1, [pc, #128]	; (80110d4 <etharp_update_arp_entry+0x148>)
 8011052:	4613      	mov	r3, r2
 8011054:	005b      	lsls	r3, r3, #1
 8011056:	4413      	add	r3, r2
 8011058:	00db      	lsls	r3, r3, #3
 801105a:	440b      	add	r3, r1
 801105c:	3312      	adds	r3, #18
 801105e:	2200      	movs	r2, #0
 8011060:	801a      	strh	r2, [r3, #0]
    /* get the packet pointer */
    p = q->p;
    /* now queue entry can be freed */
    memp_free(MEMP_ARP_QUEUE, q);
#else /* ARP_QUEUEING */
  if (arp_table[i].q != NULL) {
 8011062:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8011066:	491b      	ldr	r1, [pc, #108]	; (80110d4 <etharp_update_arp_entry+0x148>)
 8011068:	4613      	mov	r3, r2
 801106a:	005b      	lsls	r3, r3, #1
 801106c:	4413      	add	r3, r2
 801106e:	00db      	lsls	r3, r3, #3
 8011070:	440b      	add	r3, r1
 8011072:	681b      	ldr	r3, [r3, #0]
 8011074:	2b00      	cmp	r3, #0
 8011076:	d021      	beq.n	80110bc <etharp_update_arp_entry+0x130>
    struct pbuf *p = arp_table[i].q;
 8011078:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 801107c:	4915      	ldr	r1, [pc, #84]	; (80110d4 <etharp_update_arp_entry+0x148>)
 801107e:	4613      	mov	r3, r2
 8011080:	005b      	lsls	r3, r3, #1
 8011082:	4413      	add	r3, r2
 8011084:	00db      	lsls	r3, r3, #3
 8011086:	440b      	add	r3, r1
 8011088:	681b      	ldr	r3, [r3, #0]
 801108a:	613b      	str	r3, [r7, #16]
    arp_table[i].q = NULL;
 801108c:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8011090:	4910      	ldr	r1, [pc, #64]	; (80110d4 <etharp_update_arp_entry+0x148>)
 8011092:	4613      	mov	r3, r2
 8011094:	005b      	lsls	r3, r3, #1
 8011096:	4413      	add	r3, r2
 8011098:	00db      	lsls	r3, r3, #3
 801109a:	440b      	add	r3, r1
 801109c:	2200      	movs	r2, #0
 801109e:	601a      	str	r2, [r3, #0]
#endif /* ARP_QUEUEING */
    /* send the queued IP packet */
    ethernet_output(netif, p, (struct eth_addr *)(netif->hwaddr), ethaddr, ETHTYPE_IP);
 80110a0:	68fb      	ldr	r3, [r7, #12]
 80110a2:	f103 0226 	add.w	r2, r3, #38	; 0x26
 80110a6:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80110aa:	9300      	str	r3, [sp, #0]
 80110ac:	687b      	ldr	r3, [r7, #4]
 80110ae:	6939      	ldr	r1, [r7, #16]
 80110b0:	68f8      	ldr	r0, [r7, #12]
 80110b2:	f002 f8d9 	bl	8013268 <ethernet_output>
    /* free the queued IP packet */
    pbuf_free(p);
 80110b6:	6938      	ldr	r0, [r7, #16]
 80110b8:	f7f9 f9a4 	bl	800a404 <pbuf_free>
  }
  return ERR_OK;
 80110bc:	2300      	movs	r3, #0
}
 80110be:	4618      	mov	r0, r3
 80110c0:	3718      	adds	r7, #24
 80110c2:	46bd      	mov	sp, r7
 80110c4:	bd80      	pop	{r7, pc}
 80110c6:	bf00      	nop
 80110c8:	08016c90 	.word	0x08016c90
 80110cc:	08016d88 	.word	0x08016d88
 80110d0:	08016d08 	.word	0x08016d08
 80110d4:	2000c7a8 	.word	0x2000c7a8

080110d8 <etharp_cleanup_netif>:
 *
 * @param netif points to a network interface
 */
void
etharp_cleanup_netif(struct netif *netif)
{
 80110d8:	b580      	push	{r7, lr}
 80110da:	b084      	sub	sp, #16
 80110dc:	af00      	add	r7, sp, #0
 80110de:	6078      	str	r0, [r7, #4]
  int i;

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 80110e0:	2300      	movs	r3, #0
 80110e2:	60fb      	str	r3, [r7, #12]
 80110e4:	e01e      	b.n	8011124 <etharp_cleanup_netif+0x4c>
    u8_t state = arp_table[i].state;
 80110e6:	4913      	ldr	r1, [pc, #76]	; (8011134 <etharp_cleanup_netif+0x5c>)
 80110e8:	68fa      	ldr	r2, [r7, #12]
 80110ea:	4613      	mov	r3, r2
 80110ec:	005b      	lsls	r3, r3, #1
 80110ee:	4413      	add	r3, r2
 80110f0:	00db      	lsls	r3, r3, #3
 80110f2:	440b      	add	r3, r1
 80110f4:	3314      	adds	r3, #20
 80110f6:	781b      	ldrb	r3, [r3, #0]
 80110f8:	72fb      	strb	r3, [r7, #11]
    if ((state != ETHARP_STATE_EMPTY) && (arp_table[i].netif == netif)) {
 80110fa:	7afb      	ldrb	r3, [r7, #11]
 80110fc:	2b00      	cmp	r3, #0
 80110fe:	d00e      	beq.n	801111e <etharp_cleanup_netif+0x46>
 8011100:	490c      	ldr	r1, [pc, #48]	; (8011134 <etharp_cleanup_netif+0x5c>)
 8011102:	68fa      	ldr	r2, [r7, #12]
 8011104:	4613      	mov	r3, r2
 8011106:	005b      	lsls	r3, r3, #1
 8011108:	4413      	add	r3, r2
 801110a:	00db      	lsls	r3, r3, #3
 801110c:	440b      	add	r3, r1
 801110e:	3308      	adds	r3, #8
 8011110:	681b      	ldr	r3, [r3, #0]
 8011112:	687a      	ldr	r2, [r7, #4]
 8011114:	429a      	cmp	r2, r3
 8011116:	d102      	bne.n	801111e <etharp_cleanup_netif+0x46>
      etharp_free_entry(i);
 8011118:	68f8      	ldr	r0, [r7, #12]
 801111a:	f7ff fce5 	bl	8010ae8 <etharp_free_entry>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 801111e:	68fb      	ldr	r3, [r7, #12]
 8011120:	3301      	adds	r3, #1
 8011122:	60fb      	str	r3, [r7, #12]
 8011124:	68fb      	ldr	r3, [r7, #12]
 8011126:	2b09      	cmp	r3, #9
 8011128:	dddd      	ble.n	80110e6 <etharp_cleanup_netif+0xe>
    }
  }
}
 801112a:	bf00      	nop
 801112c:	bf00      	nop
 801112e:	3710      	adds	r7, #16
 8011130:	46bd      	mov	sp, r7
 8011132:	bd80      	pop	{r7, pc}
 8011134:	2000c7a8 	.word	0x2000c7a8

08011138 <etharp_input>:
 *
 * @see pbuf_free()
 */
void
etharp_input(struct pbuf *p, struct netif *netif)
{
 8011138:	b5b0      	push	{r4, r5, r7, lr}
 801113a:	b08a      	sub	sp, #40	; 0x28
 801113c:	af04      	add	r7, sp, #16
 801113e:	6078      	str	r0, [r7, #4]
 8011140:	6039      	str	r1, [r7, #0]
  ip4_addr_t sipaddr, dipaddr;
  u8_t for_us;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 8011142:	683b      	ldr	r3, [r7, #0]
 8011144:	2b00      	cmp	r3, #0
 8011146:	d107      	bne.n	8011158 <etharp_input+0x20>
 8011148:	4b49      	ldr	r3, [pc, #292]	; (8011270 <etharp_input+0x138>)
 801114a:	f240 228a 	movw	r2, #650	; 0x28a
 801114e:	4949      	ldr	r1, [pc, #292]	; (8011274 <etharp_input+0x13c>)
 8011150:	4849      	ldr	r0, [pc, #292]	; (8011278 <etharp_input+0x140>)
 8011152:	f002 fc09 	bl	8013968 <iprintf>
 8011156:	e088      	b.n	801126a <etharp_input+0x132>

  hdr = (struct etharp_hdr *)p->payload;
 8011158:	687b      	ldr	r3, [r7, #4]
 801115a:	685b      	ldr	r3, [r3, #4]
 801115c:	613b      	str	r3, [r7, #16]

  /* RFC 826 "Packet Reception": */
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 801115e:	693b      	ldr	r3, [r7, #16]
 8011160:	881b      	ldrh	r3, [r3, #0]
 8011162:	b29b      	uxth	r3, r3
 8011164:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8011168:	d10c      	bne.n	8011184 <etharp_input+0x4c>
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 801116a:	693b      	ldr	r3, [r7, #16]
 801116c:	791b      	ldrb	r3, [r3, #4]
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 801116e:	2b06      	cmp	r3, #6
 8011170:	d108      	bne.n	8011184 <etharp_input+0x4c>
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 8011172:	693b      	ldr	r3, [r7, #16]
 8011174:	795b      	ldrb	r3, [r3, #5]
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 8011176:	2b04      	cmp	r3, #4
 8011178:	d104      	bne.n	8011184 <etharp_input+0x4c>
      (hdr->proto != PP_HTONS(ETHTYPE_IP)))  {
 801117a:	693b      	ldr	r3, [r7, #16]
 801117c:	885b      	ldrh	r3, [r3, #2]
 801117e:	b29b      	uxth	r3, r3
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 8011180:	2b08      	cmp	r3, #8
 8011182:	d00f      	beq.n	80111a4 <etharp_input+0x6c>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
                ("etharp_input: packet dropped, wrong hw type, hwlen, proto, protolen or ethernet type (%"U16_F"/%"U16_F"/%"U16_F"/%"U16_F")\n",
                 hdr->hwtype, (u16_t)hdr->hwlen, hdr->proto, (u16_t)hdr->protolen));
    ETHARP_STATS_INC(etharp.proterr);
 8011184:	4b3d      	ldr	r3, [pc, #244]	; (801127c <etharp_input+0x144>)
 8011186:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8011188:	3301      	adds	r3, #1
 801118a:	b29a      	uxth	r2, r3
 801118c:	4b3b      	ldr	r3, [pc, #236]	; (801127c <etharp_input+0x144>)
 801118e:	851a      	strh	r2, [r3, #40]	; 0x28
    ETHARP_STATS_INC(etharp.drop);
 8011190:	4b3a      	ldr	r3, [pc, #232]	; (801127c <etharp_input+0x144>)
 8011192:	8bdb      	ldrh	r3, [r3, #30]
 8011194:	3301      	adds	r3, #1
 8011196:	b29a      	uxth	r2, r3
 8011198:	4b38      	ldr	r3, [pc, #224]	; (801127c <etharp_input+0x144>)
 801119a:	83da      	strh	r2, [r3, #30]
    pbuf_free(p);
 801119c:	6878      	ldr	r0, [r7, #4]
 801119e:	f7f9 f931 	bl	800a404 <pbuf_free>
    return;
 80111a2:	e062      	b.n	801126a <etharp_input+0x132>
  }
  ETHARP_STATS_INC(etharp.recv);
 80111a4:	4b35      	ldr	r3, [pc, #212]	; (801127c <etharp_input+0x144>)
 80111a6:	8b5b      	ldrh	r3, [r3, #26]
 80111a8:	3301      	adds	r3, #1
 80111aa:	b29a      	uxth	r2, r3
 80111ac:	4b33      	ldr	r3, [pc, #204]	; (801127c <etharp_input+0x144>)
 80111ae:	835a      	strh	r2, [r3, #26]
  autoip_arp_reply(netif, hdr);
#endif /* LWIP_AUTOIP */

  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing (not using structure copy which breaks strict-aliasing rules). */
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&sipaddr, &hdr->sipaddr);
 80111b0:	693b      	ldr	r3, [r7, #16]
 80111b2:	330e      	adds	r3, #14
 80111b4:	681b      	ldr	r3, [r3, #0]
 80111b6:	60fb      	str	r3, [r7, #12]
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&dipaddr, &hdr->dipaddr);
 80111b8:	693b      	ldr	r3, [r7, #16]
 80111ba:	3318      	adds	r3, #24
 80111bc:	681b      	ldr	r3, [r3, #0]
 80111be:	60bb      	str	r3, [r7, #8]

  /* this interface is not configured? */
  if (ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 80111c0:	683b      	ldr	r3, [r7, #0]
 80111c2:	3304      	adds	r3, #4
 80111c4:	681b      	ldr	r3, [r3, #0]
 80111c6:	2b00      	cmp	r3, #0
 80111c8:	d102      	bne.n	80111d0 <etharp_input+0x98>
    for_us = 0;
 80111ca:	2300      	movs	r3, #0
 80111cc:	75fb      	strb	r3, [r7, #23]
 80111ce:	e009      	b.n	80111e4 <etharp_input+0xac>
  } else {
    /* ARP packet directed to us? */
    for_us = (u8_t)ip4_addr_cmp(&dipaddr, netif_ip4_addr(netif));
 80111d0:	68ba      	ldr	r2, [r7, #8]
 80111d2:	683b      	ldr	r3, [r7, #0]
 80111d4:	3304      	adds	r3, #4
 80111d6:	681b      	ldr	r3, [r3, #0]
 80111d8:	429a      	cmp	r2, r3
 80111da:	bf0c      	ite	eq
 80111dc:	2301      	moveq	r3, #1
 80111de:	2300      	movne	r3, #0
 80111e0:	b2db      	uxtb	r3, r3
 80111e2:	75fb      	strb	r3, [r7, #23]
  /* ARP message directed to us?
      -> add IP address in ARP cache; assume requester wants to talk to us,
         can result in directly sending the queued packets for this host.
     ARP message not directed to us?
      ->  update the source IP address in the cache, if present */
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 80111e4:	693b      	ldr	r3, [r7, #16]
 80111e6:	f103 0208 	add.w	r2, r3, #8
 80111ea:	7dfb      	ldrb	r3, [r7, #23]
 80111ec:	2b00      	cmp	r3, #0
 80111ee:	d001      	beq.n	80111f4 <etharp_input+0xbc>
 80111f0:	2301      	movs	r3, #1
 80111f2:	e000      	b.n	80111f6 <etharp_input+0xbe>
 80111f4:	2302      	movs	r3, #2
 80111f6:	f107 010c 	add.w	r1, r7, #12
 80111fa:	6838      	ldr	r0, [r7, #0]
 80111fc:	f7ff fec6 	bl	8010f8c <etharp_update_arp_entry>
                          for_us ? ETHARP_FLAG_TRY_HARD : ETHARP_FLAG_FIND_ONLY);

  /* now act on the message itself */
  switch (hdr->opcode) {
 8011200:	693b      	ldr	r3, [r7, #16]
 8011202:	88db      	ldrh	r3, [r3, #6]
 8011204:	b29b      	uxth	r3, r3
 8011206:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 801120a:	d003      	beq.n	8011214 <etharp_input+0xdc>
 801120c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8011210:	d025      	beq.n	801125e <etharp_input+0x126>
 8011212:	e01d      	b.n	8011250 <etharp_input+0x118>
       * reply. In any case, we time-stamp any existing ARP entry,
       * and possibly send out an IP packet that was queued on it. */

      LWIP_DEBUGF (ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_input: incoming ARP request\n"));
      /* ARP request for our address? */
      if (for_us) {
 8011214:	7dfb      	ldrb	r3, [r7, #23]
 8011216:	2b00      	cmp	r3, #0
 8011218:	d023      	beq.n	8011262 <etharp_input+0x12a>
        /* send ARP response */
        etharp_raw(netif,
                   (struct eth_addr *)netif->hwaddr, &hdr->shwaddr,
 801121a:	683b      	ldr	r3, [r7, #0]
 801121c:	f103 0026 	add.w	r0, r3, #38	; 0x26
 8011220:	693b      	ldr	r3, [r7, #16]
 8011222:	f103 0408 	add.w	r4, r3, #8
                   (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif),
 8011226:	683b      	ldr	r3, [r7, #0]
 8011228:	f103 0526 	add.w	r5, r3, #38	; 0x26
 801122c:	683b      	ldr	r3, [r7, #0]
 801122e:	3304      	adds	r3, #4
                   &hdr->shwaddr, &sipaddr,
 8011230:	693a      	ldr	r2, [r7, #16]
 8011232:	3208      	adds	r2, #8
        etharp_raw(netif,
 8011234:	2102      	movs	r1, #2
 8011236:	9103      	str	r1, [sp, #12]
 8011238:	f107 010c 	add.w	r1, r7, #12
 801123c:	9102      	str	r1, [sp, #8]
 801123e:	9201      	str	r2, [sp, #4]
 8011240:	9300      	str	r3, [sp, #0]
 8011242:	462b      	mov	r3, r5
 8011244:	4622      	mov	r2, r4
 8011246:	4601      	mov	r1, r0
 8011248:	6838      	ldr	r0, [r7, #0]
 801124a:	f000 fb0b 	bl	8011864 <etharp_raw>
        /* request was not directed to us */
      } else {
        /* { for_us == 0 and netif->ip_addr.addr != 0 } */
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_input: ARP request was not for us.\n"));
      }
      break;
 801124e:	e008      	b.n	8011262 <etharp_input+0x12a>
      dhcp_arp_reply(netif, &sipaddr);
#endif /* (LWIP_DHCP && DHCP_DOES_ARP_CHECK) */
      break;
    default:
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_input: ARP unknown opcode type %"S16_F"\n", lwip_htons(hdr->opcode)));
      ETHARP_STATS_INC(etharp.err);
 8011250:	4b0a      	ldr	r3, [pc, #40]	; (801127c <etharp_input+0x144>)
 8011252:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8011254:	3301      	adds	r3, #1
 8011256:	b29a      	uxth	r2, r3
 8011258:	4b08      	ldr	r3, [pc, #32]	; (801127c <etharp_input+0x144>)
 801125a:	859a      	strh	r2, [r3, #44]	; 0x2c
      break;
 801125c:	e002      	b.n	8011264 <etharp_input+0x12c>
      break;
 801125e:	bf00      	nop
 8011260:	e000      	b.n	8011264 <etharp_input+0x12c>
      break;
 8011262:	bf00      	nop
  }
  /* free ARP packet */
  pbuf_free(p);
 8011264:	6878      	ldr	r0, [r7, #4]
 8011266:	f7f9 f8cd 	bl	800a404 <pbuf_free>
}
 801126a:	3718      	adds	r7, #24
 801126c:	46bd      	mov	sp, r7
 801126e:	bdb0      	pop	{r4, r5, r7, pc}
 8011270:	08016c90 	.word	0x08016c90
 8011274:	08016de0 	.word	0x08016de0
 8011278:	08016d08 	.word	0x08016d08
 801127c:	2000c64c 	.word	0x2000c64c

08011280 <etharp_output_to_arp_index>:
/** Just a small helper function that sends a pbuf to an ethernet address
 * in the arp_table specified by the index 'arp_idx'.
 */
static err_t
etharp_output_to_arp_index(struct netif *netif, struct pbuf *q, netif_addr_idx_t arp_idx)
{
 8011280:	b580      	push	{r7, lr}
 8011282:	b086      	sub	sp, #24
 8011284:	af02      	add	r7, sp, #8
 8011286:	60f8      	str	r0, [r7, #12]
 8011288:	60b9      	str	r1, [r7, #8]
 801128a:	4613      	mov	r3, r2
 801128c:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 801128e:	79fa      	ldrb	r2, [r7, #7]
 8011290:	4944      	ldr	r1, [pc, #272]	; (80113a4 <etharp_output_to_arp_index+0x124>)
 8011292:	4613      	mov	r3, r2
 8011294:	005b      	lsls	r3, r3, #1
 8011296:	4413      	add	r3, r2
 8011298:	00db      	lsls	r3, r3, #3
 801129a:	440b      	add	r3, r1
 801129c:	3314      	adds	r3, #20
 801129e:	781b      	ldrb	r3, [r3, #0]
 80112a0:	2b01      	cmp	r3, #1
 80112a2:	d806      	bhi.n	80112b2 <etharp_output_to_arp_index+0x32>
 80112a4:	4b40      	ldr	r3, [pc, #256]	; (80113a8 <etharp_output_to_arp_index+0x128>)
 80112a6:	f240 22ee 	movw	r2, #750	; 0x2ee
 80112aa:	4940      	ldr	r1, [pc, #256]	; (80113ac <etharp_output_to_arp_index+0x12c>)
 80112ac:	4840      	ldr	r0, [pc, #256]	; (80113b0 <etharp_output_to_arp_index+0x130>)
 80112ae:	f002 fb5b 	bl	8013968 <iprintf>
              arp_table[arp_idx].state >= ETHARP_STATE_STABLE);
  /* if arp table entry is about to expire: re-request it,
     but only if its state is ETHARP_STATE_STABLE to prevent flooding the
     network with ARP requests if this address is used frequently. */
  if (arp_table[arp_idx].state == ETHARP_STATE_STABLE) {
 80112b2:	79fa      	ldrb	r2, [r7, #7]
 80112b4:	493b      	ldr	r1, [pc, #236]	; (80113a4 <etharp_output_to_arp_index+0x124>)
 80112b6:	4613      	mov	r3, r2
 80112b8:	005b      	lsls	r3, r3, #1
 80112ba:	4413      	add	r3, r2
 80112bc:	00db      	lsls	r3, r3, #3
 80112be:	440b      	add	r3, r1
 80112c0:	3314      	adds	r3, #20
 80112c2:	781b      	ldrb	r3, [r3, #0]
 80112c4:	2b02      	cmp	r3, #2
 80112c6:	d153      	bne.n	8011370 <etharp_output_to_arp_index+0xf0>
    if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_BROADCAST) {
 80112c8:	79fa      	ldrb	r2, [r7, #7]
 80112ca:	4936      	ldr	r1, [pc, #216]	; (80113a4 <etharp_output_to_arp_index+0x124>)
 80112cc:	4613      	mov	r3, r2
 80112ce:	005b      	lsls	r3, r3, #1
 80112d0:	4413      	add	r3, r2
 80112d2:	00db      	lsls	r3, r3, #3
 80112d4:	440b      	add	r3, r1
 80112d6:	3312      	adds	r3, #18
 80112d8:	881b      	ldrh	r3, [r3, #0]
 80112da:	f5b3 7f8e 	cmp.w	r3, #284	; 0x11c
 80112de:	d919      	bls.n	8011314 <etharp_output_to_arp_index+0x94>
      /* issue a standard request using broadcast */
      if (etharp_request(netif, &arp_table[arp_idx].ipaddr) == ERR_OK) {
 80112e0:	79fa      	ldrb	r2, [r7, #7]
 80112e2:	4613      	mov	r3, r2
 80112e4:	005b      	lsls	r3, r3, #1
 80112e6:	4413      	add	r3, r2
 80112e8:	00db      	lsls	r3, r3, #3
 80112ea:	4a2e      	ldr	r2, [pc, #184]	; (80113a4 <etharp_output_to_arp_index+0x124>)
 80112ec:	4413      	add	r3, r2
 80112ee:	3304      	adds	r3, #4
 80112f0:	4619      	mov	r1, r3
 80112f2:	68f8      	ldr	r0, [r7, #12]
 80112f4:	f000 fb72 	bl	80119dc <etharp_request>
 80112f8:	4603      	mov	r3, r0
 80112fa:	2b00      	cmp	r3, #0
 80112fc:	d138      	bne.n	8011370 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 80112fe:	79fa      	ldrb	r2, [r7, #7]
 8011300:	4928      	ldr	r1, [pc, #160]	; (80113a4 <etharp_output_to_arp_index+0x124>)
 8011302:	4613      	mov	r3, r2
 8011304:	005b      	lsls	r3, r3, #1
 8011306:	4413      	add	r3, r2
 8011308:	00db      	lsls	r3, r3, #3
 801130a:	440b      	add	r3, r1
 801130c:	3314      	adds	r3, #20
 801130e:	2203      	movs	r2, #3
 8011310:	701a      	strb	r2, [r3, #0]
 8011312:	e02d      	b.n	8011370 <etharp_output_to_arp_index+0xf0>
      }
    } else if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_UNICAST) {
 8011314:	79fa      	ldrb	r2, [r7, #7]
 8011316:	4923      	ldr	r1, [pc, #140]	; (80113a4 <etharp_output_to_arp_index+0x124>)
 8011318:	4613      	mov	r3, r2
 801131a:	005b      	lsls	r3, r3, #1
 801131c:	4413      	add	r3, r2
 801131e:	00db      	lsls	r3, r3, #3
 8011320:	440b      	add	r3, r1
 8011322:	3312      	adds	r3, #18
 8011324:	881b      	ldrh	r3, [r3, #0]
 8011326:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
 801132a:	d321      	bcc.n	8011370 <etharp_output_to_arp_index+0xf0>
      /* issue a unicast request (for 15 seconds) to prevent unnecessary broadcast */
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 801132c:	79fa      	ldrb	r2, [r7, #7]
 801132e:	4613      	mov	r3, r2
 8011330:	005b      	lsls	r3, r3, #1
 8011332:	4413      	add	r3, r2
 8011334:	00db      	lsls	r3, r3, #3
 8011336:	4a1b      	ldr	r2, [pc, #108]	; (80113a4 <etharp_output_to_arp_index+0x124>)
 8011338:	4413      	add	r3, r2
 801133a:	1d19      	adds	r1, r3, #4
 801133c:	79fa      	ldrb	r2, [r7, #7]
 801133e:	4613      	mov	r3, r2
 8011340:	005b      	lsls	r3, r3, #1
 8011342:	4413      	add	r3, r2
 8011344:	00db      	lsls	r3, r3, #3
 8011346:	3308      	adds	r3, #8
 8011348:	4a16      	ldr	r2, [pc, #88]	; (80113a4 <etharp_output_to_arp_index+0x124>)
 801134a:	4413      	add	r3, r2
 801134c:	3304      	adds	r3, #4
 801134e:	461a      	mov	r2, r3
 8011350:	68f8      	ldr	r0, [r7, #12]
 8011352:	f000 fb21 	bl	8011998 <etharp_request_dst>
 8011356:	4603      	mov	r3, r0
 8011358:	2b00      	cmp	r3, #0
 801135a:	d109      	bne.n	8011370 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 801135c:	79fa      	ldrb	r2, [r7, #7]
 801135e:	4911      	ldr	r1, [pc, #68]	; (80113a4 <etharp_output_to_arp_index+0x124>)
 8011360:	4613      	mov	r3, r2
 8011362:	005b      	lsls	r3, r3, #1
 8011364:	4413      	add	r3, r2
 8011366:	00db      	lsls	r3, r3, #3
 8011368:	440b      	add	r3, r1
 801136a:	3314      	adds	r3, #20
 801136c:	2203      	movs	r2, #3
 801136e:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), &arp_table[arp_idx].ethaddr, ETHTYPE_IP);
 8011370:	68fb      	ldr	r3, [r7, #12]
 8011372:	f103 0126 	add.w	r1, r3, #38	; 0x26
 8011376:	79fa      	ldrb	r2, [r7, #7]
 8011378:	4613      	mov	r3, r2
 801137a:	005b      	lsls	r3, r3, #1
 801137c:	4413      	add	r3, r2
 801137e:	00db      	lsls	r3, r3, #3
 8011380:	3308      	adds	r3, #8
 8011382:	4a08      	ldr	r2, [pc, #32]	; (80113a4 <etharp_output_to_arp_index+0x124>)
 8011384:	4413      	add	r3, r2
 8011386:	3304      	adds	r3, #4
 8011388:	f44f 6200 	mov.w	r2, #2048	; 0x800
 801138c:	9200      	str	r2, [sp, #0]
 801138e:	460a      	mov	r2, r1
 8011390:	68b9      	ldr	r1, [r7, #8]
 8011392:	68f8      	ldr	r0, [r7, #12]
 8011394:	f001 ff68 	bl	8013268 <ethernet_output>
 8011398:	4603      	mov	r3, r0
}
 801139a:	4618      	mov	r0, r3
 801139c:	3710      	adds	r7, #16
 801139e:	46bd      	mov	sp, r7
 80113a0:	bd80      	pop	{r7, pc}
 80113a2:	bf00      	nop
 80113a4:	2000c7a8 	.word	0x2000c7a8
 80113a8:	08016c90 	.word	0x08016c90
 80113ac:	08016e00 	.word	0x08016e00
 80113b0:	08016d08 	.word	0x08016d08

080113b4 <etharp_output>:
 * - ERR_RTE No route to destination (no gateway to external networks),
 * or the return type of either etharp_query() or ethernet_output().
 */
err_t
etharp_output(struct netif *netif, struct pbuf *q, const ip4_addr_t *ipaddr)
{
 80113b4:	b580      	push	{r7, lr}
 80113b6:	b08a      	sub	sp, #40	; 0x28
 80113b8:	af02      	add	r7, sp, #8
 80113ba:	60f8      	str	r0, [r7, #12]
 80113bc:	60b9      	str	r1, [r7, #8]
 80113be:	607a      	str	r2, [r7, #4]
  const struct eth_addr *dest;
  struct eth_addr mcastaddr;
  const ip4_addr_t *dst_addr = ipaddr;
 80113c0:	687b      	ldr	r3, [r7, #4]
 80113c2:	61bb      	str	r3, [r7, #24]

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("netif != NULL", netif != NULL);
 80113c4:	68fb      	ldr	r3, [r7, #12]
 80113c6:	2b00      	cmp	r3, #0
 80113c8:	d106      	bne.n	80113d8 <etharp_output+0x24>
 80113ca:	4b76      	ldr	r3, [pc, #472]	; (80115a4 <etharp_output+0x1f0>)
 80113cc:	f240 321e 	movw	r2, #798	; 0x31e
 80113d0:	4975      	ldr	r1, [pc, #468]	; (80115a8 <etharp_output+0x1f4>)
 80113d2:	4876      	ldr	r0, [pc, #472]	; (80115ac <etharp_output+0x1f8>)
 80113d4:	f002 fac8 	bl	8013968 <iprintf>
  LWIP_ASSERT("q != NULL", q != NULL);
 80113d8:	68bb      	ldr	r3, [r7, #8]
 80113da:	2b00      	cmp	r3, #0
 80113dc:	d106      	bne.n	80113ec <etharp_output+0x38>
 80113de:	4b71      	ldr	r3, [pc, #452]	; (80115a4 <etharp_output+0x1f0>)
 80113e0:	f240 321f 	movw	r2, #799	; 0x31f
 80113e4:	4972      	ldr	r1, [pc, #456]	; (80115b0 <etharp_output+0x1fc>)
 80113e6:	4871      	ldr	r0, [pc, #452]	; (80115ac <etharp_output+0x1f8>)
 80113e8:	f002 fabe 	bl	8013968 <iprintf>
  LWIP_ASSERT("ipaddr != NULL", ipaddr != NULL);
 80113ec:	687b      	ldr	r3, [r7, #4]
 80113ee:	2b00      	cmp	r3, #0
 80113f0:	d106      	bne.n	8011400 <etharp_output+0x4c>
 80113f2:	4b6c      	ldr	r3, [pc, #432]	; (80115a4 <etharp_output+0x1f0>)
 80113f4:	f44f 7248 	mov.w	r2, #800	; 0x320
 80113f8:	496e      	ldr	r1, [pc, #440]	; (80115b4 <etharp_output+0x200>)
 80113fa:	486c      	ldr	r0, [pc, #432]	; (80115ac <etharp_output+0x1f8>)
 80113fc:	f002 fab4 	bl	8013968 <iprintf>

  /* Determine on destination hardware address. Broadcasts and multicasts
   * are special, other IP addresses are looked up in the ARP table. */

  /* broadcast destination IP address? */
  if (ip4_addr_isbroadcast(ipaddr, netif)) {
 8011400:	687b      	ldr	r3, [r7, #4]
 8011402:	681b      	ldr	r3, [r3, #0]
 8011404:	68f9      	ldr	r1, [r7, #12]
 8011406:	4618      	mov	r0, r3
 8011408:	f000 ffce 	bl	80123a8 <ip4_addr_isbroadcast_u32>
 801140c:	4603      	mov	r3, r0
 801140e:	2b00      	cmp	r3, #0
 8011410:	d002      	beq.n	8011418 <etharp_output+0x64>
    /* broadcast on Ethernet also */
    dest = (const struct eth_addr *)&ethbroadcast;
 8011412:	4b69      	ldr	r3, [pc, #420]	; (80115b8 <etharp_output+0x204>)
 8011414:	61fb      	str	r3, [r7, #28]
 8011416:	e0b5      	b.n	8011584 <etharp_output+0x1d0>
    /* multicast destination IP address? */
  } else if (ip4_addr_ismulticast(ipaddr)) {
 8011418:	687b      	ldr	r3, [r7, #4]
 801141a:	681b      	ldr	r3, [r3, #0]
 801141c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8011420:	2be0      	cmp	r3, #224	; 0xe0
 8011422:	d118      	bne.n	8011456 <etharp_output+0xa2>
    /* Hash IP multicast address to MAC address.*/
    mcastaddr.addr[0] = LL_IP4_MULTICAST_ADDR_0;
 8011424:	2301      	movs	r3, #1
 8011426:	743b      	strb	r3, [r7, #16]
    mcastaddr.addr[1] = LL_IP4_MULTICAST_ADDR_1;
 8011428:	2300      	movs	r3, #0
 801142a:	747b      	strb	r3, [r7, #17]
    mcastaddr.addr[2] = LL_IP4_MULTICAST_ADDR_2;
 801142c:	235e      	movs	r3, #94	; 0x5e
 801142e:	74bb      	strb	r3, [r7, #18]
    mcastaddr.addr[3] = ip4_addr2(ipaddr) & 0x7f;
 8011430:	687b      	ldr	r3, [r7, #4]
 8011432:	3301      	adds	r3, #1
 8011434:	781b      	ldrb	r3, [r3, #0]
 8011436:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 801143a:	b2db      	uxtb	r3, r3
 801143c:	74fb      	strb	r3, [r7, #19]
    mcastaddr.addr[4] = ip4_addr3(ipaddr);
 801143e:	687b      	ldr	r3, [r7, #4]
 8011440:	3302      	adds	r3, #2
 8011442:	781b      	ldrb	r3, [r3, #0]
 8011444:	753b      	strb	r3, [r7, #20]
    mcastaddr.addr[5] = ip4_addr4(ipaddr);
 8011446:	687b      	ldr	r3, [r7, #4]
 8011448:	3303      	adds	r3, #3
 801144a:	781b      	ldrb	r3, [r3, #0]
 801144c:	757b      	strb	r3, [r7, #21]
    /* destination Ethernet address is multicast */
    dest = &mcastaddr;
 801144e:	f107 0310 	add.w	r3, r7, #16
 8011452:	61fb      	str	r3, [r7, #28]
 8011454:	e096      	b.n	8011584 <etharp_output+0x1d0>
    /* unicast destination IP address? */
  } else {
    netif_addr_idx_t i;
    /* outside local network? if so, this can neither be a global broadcast nor
       a subnet broadcast. */
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 8011456:	687b      	ldr	r3, [r7, #4]
 8011458:	681a      	ldr	r2, [r3, #0]
 801145a:	68fb      	ldr	r3, [r7, #12]
 801145c:	3304      	adds	r3, #4
 801145e:	681b      	ldr	r3, [r3, #0]
 8011460:	405a      	eors	r2, r3
 8011462:	68fb      	ldr	r3, [r7, #12]
 8011464:	3308      	adds	r3, #8
 8011466:	681b      	ldr	r3, [r3, #0]
 8011468:	4013      	ands	r3, r2
 801146a:	2b00      	cmp	r3, #0
 801146c:	d012      	beq.n	8011494 <etharp_output+0xe0>
        !ip4_addr_islinklocal(ipaddr)) {
 801146e:	687b      	ldr	r3, [r7, #4]
 8011470:	681b      	ldr	r3, [r3, #0]
 8011472:	b29b      	uxth	r3, r3
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 8011474:	f64f 62a9 	movw	r2, #65193	; 0xfea9
 8011478:	4293      	cmp	r3, r2
 801147a:	d00b      	beq.n	8011494 <etharp_output+0xe0>
        dst_addr = LWIP_HOOK_ETHARP_GET_GW(netif, ipaddr);
        if (dst_addr == NULL)
#endif /* LWIP_HOOK_ETHARP_GET_GW */
        {
          /* interface has default gateway? */
          if (!ip4_addr_isany_val(*netif_ip4_gw(netif))) {
 801147c:	68fb      	ldr	r3, [r7, #12]
 801147e:	330c      	adds	r3, #12
 8011480:	681b      	ldr	r3, [r3, #0]
 8011482:	2b00      	cmp	r3, #0
 8011484:	d003      	beq.n	801148e <etharp_output+0xda>
            /* send to hardware address of default gateway IP address */
            dst_addr = netif_ip4_gw(netif);
 8011486:	68fb      	ldr	r3, [r7, #12]
 8011488:	330c      	adds	r3, #12
 801148a:	61bb      	str	r3, [r7, #24]
 801148c:	e002      	b.n	8011494 <etharp_output+0xe0>
            /* no default gateway available */
          } else {
            /* no route to destination error (default gateway missing) */
            return ERR_RTE;
 801148e:	f06f 0303 	mvn.w	r3, #3
 8011492:	e083      	b.n	801159c <etharp_output+0x1e8>
    if (netif->hints != NULL) {
      /* per-pcb cached entry was given */
      netif_addr_idx_t etharp_cached_entry = netif->hints->addr_hint;
      if (etharp_cached_entry < ARP_TABLE_SIZE) {
#endif /* LWIP_NETIF_HWADDRHINT */
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 8011494:	4b49      	ldr	r3, [pc, #292]	; (80115bc <etharp_output+0x208>)
 8011496:	781b      	ldrb	r3, [r3, #0]
 8011498:	4619      	mov	r1, r3
 801149a:	4a49      	ldr	r2, [pc, #292]	; (80115c0 <etharp_output+0x20c>)
 801149c:	460b      	mov	r3, r1
 801149e:	005b      	lsls	r3, r3, #1
 80114a0:	440b      	add	r3, r1
 80114a2:	00db      	lsls	r3, r3, #3
 80114a4:	4413      	add	r3, r2
 80114a6:	3314      	adds	r3, #20
 80114a8:	781b      	ldrb	r3, [r3, #0]
 80114aa:	2b01      	cmp	r3, #1
 80114ac:	d92b      	bls.n	8011506 <etharp_output+0x152>
#if ETHARP_TABLE_MATCH_NETIF
            (arp_table[etharp_cached_entry].netif == netif) &&
 80114ae:	4b43      	ldr	r3, [pc, #268]	; (80115bc <etharp_output+0x208>)
 80114b0:	781b      	ldrb	r3, [r3, #0]
 80114b2:	4619      	mov	r1, r3
 80114b4:	4a42      	ldr	r2, [pc, #264]	; (80115c0 <etharp_output+0x20c>)
 80114b6:	460b      	mov	r3, r1
 80114b8:	005b      	lsls	r3, r3, #1
 80114ba:	440b      	add	r3, r1
 80114bc:	00db      	lsls	r3, r3, #3
 80114be:	4413      	add	r3, r2
 80114c0:	3308      	adds	r3, #8
 80114c2:	681b      	ldr	r3, [r3, #0]
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 80114c4:	68fa      	ldr	r2, [r7, #12]
 80114c6:	429a      	cmp	r2, r3
 80114c8:	d11d      	bne.n	8011506 <etharp_output+0x152>
#endif
            (ip4_addr_cmp(dst_addr, &arp_table[etharp_cached_entry].ipaddr))) {
 80114ca:	69bb      	ldr	r3, [r7, #24]
 80114cc:	681a      	ldr	r2, [r3, #0]
 80114ce:	4b3b      	ldr	r3, [pc, #236]	; (80115bc <etharp_output+0x208>)
 80114d0:	781b      	ldrb	r3, [r3, #0]
 80114d2:	4618      	mov	r0, r3
 80114d4:	493a      	ldr	r1, [pc, #232]	; (80115c0 <etharp_output+0x20c>)
 80114d6:	4603      	mov	r3, r0
 80114d8:	005b      	lsls	r3, r3, #1
 80114da:	4403      	add	r3, r0
 80114dc:	00db      	lsls	r3, r3, #3
 80114de:	440b      	add	r3, r1
 80114e0:	3304      	adds	r3, #4
 80114e2:	681b      	ldr	r3, [r3, #0]
            (arp_table[etharp_cached_entry].netif == netif) &&
 80114e4:	429a      	cmp	r2, r3
 80114e6:	d10e      	bne.n	8011506 <etharp_output+0x152>
          /* the per-pcb-cached entry is stable and the right one! */
          ETHARP_STATS_INC(etharp.cachehit);
 80114e8:	4b36      	ldr	r3, [pc, #216]	; (80115c4 <etharp_output+0x210>)
 80114ea:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80114ec:	3301      	adds	r3, #1
 80114ee:	b29a      	uxth	r2, r3
 80114f0:	4b34      	ldr	r3, [pc, #208]	; (80115c4 <etharp_output+0x210>)
 80114f2:	85da      	strh	r2, [r3, #46]	; 0x2e
          return etharp_output_to_arp_index(netif, q, etharp_cached_entry);
 80114f4:	4b31      	ldr	r3, [pc, #196]	; (80115bc <etharp_output+0x208>)
 80114f6:	781b      	ldrb	r3, [r3, #0]
 80114f8:	461a      	mov	r2, r3
 80114fa:	68b9      	ldr	r1, [r7, #8]
 80114fc:	68f8      	ldr	r0, [r7, #12]
 80114fe:	f7ff febf 	bl	8011280 <etharp_output_to_arp_index>
 8011502:	4603      	mov	r3, r0
 8011504:	e04a      	b.n	801159c <etharp_output+0x1e8>
    }
#endif /* LWIP_NETIF_HWADDRHINT */

    /* find stable entry: do this here since this is a critical path for
       throughput and etharp_find_entry() is kind of slow */
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 8011506:	2300      	movs	r3, #0
 8011508:	75fb      	strb	r3, [r7, #23]
 801150a:	e031      	b.n	8011570 <etharp_output+0x1bc>
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 801150c:	7dfa      	ldrb	r2, [r7, #23]
 801150e:	492c      	ldr	r1, [pc, #176]	; (80115c0 <etharp_output+0x20c>)
 8011510:	4613      	mov	r3, r2
 8011512:	005b      	lsls	r3, r3, #1
 8011514:	4413      	add	r3, r2
 8011516:	00db      	lsls	r3, r3, #3
 8011518:	440b      	add	r3, r1
 801151a:	3314      	adds	r3, #20
 801151c:	781b      	ldrb	r3, [r3, #0]
 801151e:	2b01      	cmp	r3, #1
 8011520:	d923      	bls.n	801156a <etharp_output+0x1b6>
#if ETHARP_TABLE_MATCH_NETIF
          (arp_table[i].netif == netif) &&
 8011522:	7dfa      	ldrb	r2, [r7, #23]
 8011524:	4926      	ldr	r1, [pc, #152]	; (80115c0 <etharp_output+0x20c>)
 8011526:	4613      	mov	r3, r2
 8011528:	005b      	lsls	r3, r3, #1
 801152a:	4413      	add	r3, r2
 801152c:	00db      	lsls	r3, r3, #3
 801152e:	440b      	add	r3, r1
 8011530:	3308      	adds	r3, #8
 8011532:	681b      	ldr	r3, [r3, #0]
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 8011534:	68fa      	ldr	r2, [r7, #12]
 8011536:	429a      	cmp	r2, r3
 8011538:	d117      	bne.n	801156a <etharp_output+0x1b6>
#endif
          (ip4_addr_cmp(dst_addr, &arp_table[i].ipaddr))) {
 801153a:	69bb      	ldr	r3, [r7, #24]
 801153c:	6819      	ldr	r1, [r3, #0]
 801153e:	7dfa      	ldrb	r2, [r7, #23]
 8011540:	481f      	ldr	r0, [pc, #124]	; (80115c0 <etharp_output+0x20c>)
 8011542:	4613      	mov	r3, r2
 8011544:	005b      	lsls	r3, r3, #1
 8011546:	4413      	add	r3, r2
 8011548:	00db      	lsls	r3, r3, #3
 801154a:	4403      	add	r3, r0
 801154c:	3304      	adds	r3, #4
 801154e:	681b      	ldr	r3, [r3, #0]
          (arp_table[i].netif == netif) &&
 8011550:	4299      	cmp	r1, r3
 8011552:	d10a      	bne.n	801156a <etharp_output+0x1b6>
        /* found an existing, stable entry */
        ETHARP_SET_ADDRHINT(netif, i);
 8011554:	4a19      	ldr	r2, [pc, #100]	; (80115bc <etharp_output+0x208>)
 8011556:	7dfb      	ldrb	r3, [r7, #23]
 8011558:	7013      	strb	r3, [r2, #0]
        return etharp_output_to_arp_index(netif, q, i);
 801155a:	7dfb      	ldrb	r3, [r7, #23]
 801155c:	461a      	mov	r2, r3
 801155e:	68b9      	ldr	r1, [r7, #8]
 8011560:	68f8      	ldr	r0, [r7, #12]
 8011562:	f7ff fe8d 	bl	8011280 <etharp_output_to_arp_index>
 8011566:	4603      	mov	r3, r0
 8011568:	e018      	b.n	801159c <etharp_output+0x1e8>
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 801156a:	7dfb      	ldrb	r3, [r7, #23]
 801156c:	3301      	adds	r3, #1
 801156e:	75fb      	strb	r3, [r7, #23]
 8011570:	7dfb      	ldrb	r3, [r7, #23]
 8011572:	2b09      	cmp	r3, #9
 8011574:	d9ca      	bls.n	801150c <etharp_output+0x158>
      }
    }
    /* no stable entry found, use the (slower) query function:
       queue on destination Ethernet address belonging to ipaddr */
    return etharp_query(netif, dst_addr, q);
 8011576:	68ba      	ldr	r2, [r7, #8]
 8011578:	69b9      	ldr	r1, [r7, #24]
 801157a:	68f8      	ldr	r0, [r7, #12]
 801157c:	f000 f824 	bl	80115c8 <etharp_query>
 8011580:	4603      	mov	r3, r0
 8011582:	e00b      	b.n	801159c <etharp_output+0x1e8>
  }

  /* continuation for multicast/broadcast destinations */
  /* obtain source Ethernet address of the given interface */
  /* send packet directly on the link */
  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), dest, ETHTYPE_IP);
 8011584:	68fb      	ldr	r3, [r7, #12]
 8011586:	f103 0226 	add.w	r2, r3, #38	; 0x26
 801158a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 801158e:	9300      	str	r3, [sp, #0]
 8011590:	69fb      	ldr	r3, [r7, #28]
 8011592:	68b9      	ldr	r1, [r7, #8]
 8011594:	68f8      	ldr	r0, [r7, #12]
 8011596:	f001 fe67 	bl	8013268 <ethernet_output>
 801159a:	4603      	mov	r3, r0
}
 801159c:	4618      	mov	r0, r3
 801159e:	3720      	adds	r7, #32
 80115a0:	46bd      	mov	sp, r7
 80115a2:	bd80      	pop	{r7, pc}
 80115a4:	08016c90 	.word	0x08016c90
 80115a8:	08016de0 	.word	0x08016de0
 80115ac:	08016d08 	.word	0x08016d08
 80115b0:	08016e30 	.word	0x08016e30
 80115b4:	08016dd0 	.word	0x08016dd0
 80115b8:	080174c4 	.word	0x080174c4
 80115bc:	2000c898 	.word	0x2000c898
 80115c0:	2000c7a8 	.word	0x2000c7a8
 80115c4:	2000c64c 	.word	0x2000c64c

080115c8 <etharp_query>:
 * - ERR_ARG Non-unicast address given, those will not appear in ARP cache.
 *
 */
err_t
etharp_query(struct netif *netif, const ip4_addr_t *ipaddr, struct pbuf *q)
{
 80115c8:	b580      	push	{r7, lr}
 80115ca:	b08c      	sub	sp, #48	; 0x30
 80115cc:	af02      	add	r7, sp, #8
 80115ce:	60f8      	str	r0, [r7, #12]
 80115d0:	60b9      	str	r1, [r7, #8]
 80115d2:	607a      	str	r2, [r7, #4]
  struct eth_addr *srcaddr = (struct eth_addr *)netif->hwaddr;
 80115d4:	68fb      	ldr	r3, [r7, #12]
 80115d6:	3326      	adds	r3, #38	; 0x26
 80115d8:	617b      	str	r3, [r7, #20]
  err_t result = ERR_MEM;
 80115da:	23ff      	movs	r3, #255	; 0xff
 80115dc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  int is_new_entry = 0;
 80115e0:	2300      	movs	r3, #0
 80115e2:	623b      	str	r3, [r7, #32]
  s16_t i_err;
  netif_addr_idx_t i;

  /* non-unicast address? */
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 80115e4:	68bb      	ldr	r3, [r7, #8]
 80115e6:	681b      	ldr	r3, [r3, #0]
 80115e8:	68f9      	ldr	r1, [r7, #12]
 80115ea:	4618      	mov	r0, r3
 80115ec:	f000 fedc 	bl	80123a8 <ip4_addr_isbroadcast_u32>
 80115f0:	4603      	mov	r3, r0
 80115f2:	2b00      	cmp	r3, #0
 80115f4:	d10c      	bne.n	8011610 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 80115f6:	68bb      	ldr	r3, [r7, #8]
 80115f8:	681b      	ldr	r3, [r3, #0]
 80115fa:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 80115fe:	2be0      	cmp	r3, #224	; 0xe0
 8011600:	d006      	beq.n	8011610 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 8011602:	68bb      	ldr	r3, [r7, #8]
 8011604:	2b00      	cmp	r3, #0
 8011606:	d003      	beq.n	8011610 <etharp_query+0x48>
      ip4_addr_isany(ipaddr)) {
 8011608:	68bb      	ldr	r3, [r7, #8]
 801160a:	681b      	ldr	r3, [r3, #0]
 801160c:	2b00      	cmp	r3, #0
 801160e:	d102      	bne.n	8011616 <etharp_query+0x4e>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 8011610:	f06f 030f 	mvn.w	r3, #15
 8011614:	e110      	b.n	8011838 <etharp_query+0x270>
  }

  /* find entry in ARP cache, ask to create entry if queueing packet */
  i_err = etharp_find_entry(ipaddr, ETHARP_FLAG_TRY_HARD, netif);
 8011616:	68fa      	ldr	r2, [r7, #12]
 8011618:	2101      	movs	r1, #1
 801161a:	68b8      	ldr	r0, [r7, #8]
 801161c:	f7ff fb3e 	bl	8010c9c <etharp_find_entry>
 8011620:	4603      	mov	r3, r0
 8011622:	827b      	strh	r3, [r7, #18]

  /* could not find or create entry? */
  if (i_err < 0) {
 8011624:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8011628:	2b00      	cmp	r3, #0
 801162a:	da0b      	bge.n	8011644 <etharp_query+0x7c>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not create ARP entry\n"));
    if (q) {
 801162c:	687b      	ldr	r3, [r7, #4]
 801162e:	2b00      	cmp	r3, #0
 8011630:	d005      	beq.n	801163e <etharp_query+0x76>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: packet dropped\n"));
      ETHARP_STATS_INC(etharp.memerr);
 8011632:	4b83      	ldr	r3, [pc, #524]	; (8011840 <etharp_query+0x278>)
 8011634:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8011636:	3301      	adds	r3, #1
 8011638:	b29a      	uxth	r2, r3
 801163a:	4b81      	ldr	r3, [pc, #516]	; (8011840 <etharp_query+0x278>)
 801163c:	849a      	strh	r2, [r3, #36]	; 0x24
    }
    return (err_t)i_err;
 801163e:	8a7b      	ldrh	r3, [r7, #18]
 8011640:	b25b      	sxtb	r3, r3
 8011642:	e0f9      	b.n	8011838 <etharp_query+0x270>
  }
  LWIP_ASSERT("type overflow", (size_t)i_err < NETIF_ADDR_IDX_MAX);
 8011644:	8a7b      	ldrh	r3, [r7, #18]
 8011646:	2b7e      	cmp	r3, #126	; 0x7e
 8011648:	d906      	bls.n	8011658 <etharp_query+0x90>
 801164a:	4b7e      	ldr	r3, [pc, #504]	; (8011844 <etharp_query+0x27c>)
 801164c:	f240 32c1 	movw	r2, #961	; 0x3c1
 8011650:	497d      	ldr	r1, [pc, #500]	; (8011848 <etharp_query+0x280>)
 8011652:	487e      	ldr	r0, [pc, #504]	; (801184c <etharp_query+0x284>)
 8011654:	f002 f988 	bl	8013968 <iprintf>
  i = (netif_addr_idx_t)i_err;
 8011658:	8a7b      	ldrh	r3, [r7, #18]
 801165a:	747b      	strb	r3, [r7, #17]

  /* mark a fresh entry as pending (we just sent a request) */
  if (arp_table[i].state == ETHARP_STATE_EMPTY) {
 801165c:	7c7a      	ldrb	r2, [r7, #17]
 801165e:	497c      	ldr	r1, [pc, #496]	; (8011850 <etharp_query+0x288>)
 8011660:	4613      	mov	r3, r2
 8011662:	005b      	lsls	r3, r3, #1
 8011664:	4413      	add	r3, r2
 8011666:	00db      	lsls	r3, r3, #3
 8011668:	440b      	add	r3, r1
 801166a:	3314      	adds	r3, #20
 801166c:	781b      	ldrb	r3, [r3, #0]
 801166e:	2b00      	cmp	r3, #0
 8011670:	d115      	bne.n	801169e <etharp_query+0xd6>
    is_new_entry = 1;
 8011672:	2301      	movs	r3, #1
 8011674:	623b      	str	r3, [r7, #32]
    arp_table[i].state = ETHARP_STATE_PENDING;
 8011676:	7c7a      	ldrb	r2, [r7, #17]
 8011678:	4975      	ldr	r1, [pc, #468]	; (8011850 <etharp_query+0x288>)
 801167a:	4613      	mov	r3, r2
 801167c:	005b      	lsls	r3, r3, #1
 801167e:	4413      	add	r3, r2
 8011680:	00db      	lsls	r3, r3, #3
 8011682:	440b      	add	r3, r1
 8011684:	3314      	adds	r3, #20
 8011686:	2201      	movs	r2, #1
 8011688:	701a      	strb	r2, [r3, #0]
    /* record network interface for re-sending arp request in etharp_tmr */
    arp_table[i].netif = netif;
 801168a:	7c7a      	ldrb	r2, [r7, #17]
 801168c:	4970      	ldr	r1, [pc, #448]	; (8011850 <etharp_query+0x288>)
 801168e:	4613      	mov	r3, r2
 8011690:	005b      	lsls	r3, r3, #1
 8011692:	4413      	add	r3, r2
 8011694:	00db      	lsls	r3, r3, #3
 8011696:	440b      	add	r3, r1
 8011698:	3308      	adds	r3, #8
 801169a:	68fa      	ldr	r2, [r7, #12]
 801169c:	601a      	str	r2, [r3, #0]
  }

  /* { i is either a STABLE or (new or existing) PENDING entry } */
  LWIP_ASSERT("arp_table[i].state == PENDING or STABLE",
 801169e:	7c7a      	ldrb	r2, [r7, #17]
 80116a0:	496b      	ldr	r1, [pc, #428]	; (8011850 <etharp_query+0x288>)
 80116a2:	4613      	mov	r3, r2
 80116a4:	005b      	lsls	r3, r3, #1
 80116a6:	4413      	add	r3, r2
 80116a8:	00db      	lsls	r3, r3, #3
 80116aa:	440b      	add	r3, r1
 80116ac:	3314      	adds	r3, #20
 80116ae:	781b      	ldrb	r3, [r3, #0]
 80116b0:	2b01      	cmp	r3, #1
 80116b2:	d011      	beq.n	80116d8 <etharp_query+0x110>
 80116b4:	7c7a      	ldrb	r2, [r7, #17]
 80116b6:	4966      	ldr	r1, [pc, #408]	; (8011850 <etharp_query+0x288>)
 80116b8:	4613      	mov	r3, r2
 80116ba:	005b      	lsls	r3, r3, #1
 80116bc:	4413      	add	r3, r2
 80116be:	00db      	lsls	r3, r3, #3
 80116c0:	440b      	add	r3, r1
 80116c2:	3314      	adds	r3, #20
 80116c4:	781b      	ldrb	r3, [r3, #0]
 80116c6:	2b01      	cmp	r3, #1
 80116c8:	d806      	bhi.n	80116d8 <etharp_query+0x110>
 80116ca:	4b5e      	ldr	r3, [pc, #376]	; (8011844 <etharp_query+0x27c>)
 80116cc:	f240 32cd 	movw	r2, #973	; 0x3cd
 80116d0:	4960      	ldr	r1, [pc, #384]	; (8011854 <etharp_query+0x28c>)
 80116d2:	485e      	ldr	r0, [pc, #376]	; (801184c <etharp_query+0x284>)
 80116d4:	f002 f948 	bl	8013968 <iprintf>
              ((arp_table[i].state == ETHARP_STATE_PENDING) ||
               (arp_table[i].state >= ETHARP_STATE_STABLE)));

  /* do we have a new entry? or an implicit query request? */
  if (is_new_entry || (q == NULL)) {
 80116d8:	6a3b      	ldr	r3, [r7, #32]
 80116da:	2b00      	cmp	r3, #0
 80116dc:	d102      	bne.n	80116e4 <etharp_query+0x11c>
 80116de:	687b      	ldr	r3, [r7, #4]
 80116e0:	2b00      	cmp	r3, #0
 80116e2:	d10c      	bne.n	80116fe <etharp_query+0x136>
    /* try to resolve it; send out ARP request */
    result = etharp_request(netif, ipaddr);
 80116e4:	68b9      	ldr	r1, [r7, #8]
 80116e6:	68f8      	ldr	r0, [r7, #12]
 80116e8:	f000 f978 	bl	80119dc <etharp_request>
 80116ec:	4603      	mov	r3, r0
 80116ee:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      /* ARP request couldn't be sent */
      /* We don't re-send arp request in etharp_tmr, but we still queue packets,
         since this failure could be temporary, and the next packet calling
         etharp_query again could lead to sending the queued packets. */
    }
    if (q == NULL) {
 80116f2:	687b      	ldr	r3, [r7, #4]
 80116f4:	2b00      	cmp	r3, #0
 80116f6:	d102      	bne.n	80116fe <etharp_query+0x136>
      return result;
 80116f8:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80116fc:	e09c      	b.n	8011838 <etharp_query+0x270>
    }
  }

  /* packet given? */
  LWIP_ASSERT("q != NULL", q != NULL);
 80116fe:	687b      	ldr	r3, [r7, #4]
 8011700:	2b00      	cmp	r3, #0
 8011702:	d106      	bne.n	8011712 <etharp_query+0x14a>
 8011704:	4b4f      	ldr	r3, [pc, #316]	; (8011844 <etharp_query+0x27c>)
 8011706:	f240 32e1 	movw	r2, #993	; 0x3e1
 801170a:	4953      	ldr	r1, [pc, #332]	; (8011858 <etharp_query+0x290>)
 801170c:	484f      	ldr	r0, [pc, #316]	; (801184c <etharp_query+0x284>)
 801170e:	f002 f92b 	bl	8013968 <iprintf>
  /* stable entry? */
  if (arp_table[i].state >= ETHARP_STATE_STABLE) {
 8011712:	7c7a      	ldrb	r2, [r7, #17]
 8011714:	494e      	ldr	r1, [pc, #312]	; (8011850 <etharp_query+0x288>)
 8011716:	4613      	mov	r3, r2
 8011718:	005b      	lsls	r3, r3, #1
 801171a:	4413      	add	r3, r2
 801171c:	00db      	lsls	r3, r3, #3
 801171e:	440b      	add	r3, r1
 8011720:	3314      	adds	r3, #20
 8011722:	781b      	ldrb	r3, [r3, #0]
 8011724:	2b01      	cmp	r3, #1
 8011726:	d917      	bls.n	8011758 <etharp_query+0x190>
    /* we have a valid IP->Ethernet address mapping */
    ETHARP_SET_ADDRHINT(netif, i);
 8011728:	4a4c      	ldr	r2, [pc, #304]	; (801185c <etharp_query+0x294>)
 801172a:	7c7b      	ldrb	r3, [r7, #17]
 801172c:	7013      	strb	r3, [r2, #0]
    /* send the packet */
    result = ethernet_output(netif, q, srcaddr, &(arp_table[i].ethaddr), ETHTYPE_IP);
 801172e:	7c7a      	ldrb	r2, [r7, #17]
 8011730:	4613      	mov	r3, r2
 8011732:	005b      	lsls	r3, r3, #1
 8011734:	4413      	add	r3, r2
 8011736:	00db      	lsls	r3, r3, #3
 8011738:	3308      	adds	r3, #8
 801173a:	4a45      	ldr	r2, [pc, #276]	; (8011850 <etharp_query+0x288>)
 801173c:	4413      	add	r3, r2
 801173e:	3304      	adds	r3, #4
 8011740:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8011744:	9200      	str	r2, [sp, #0]
 8011746:	697a      	ldr	r2, [r7, #20]
 8011748:	6879      	ldr	r1, [r7, #4]
 801174a:	68f8      	ldr	r0, [r7, #12]
 801174c:	f001 fd8c 	bl	8013268 <ethernet_output>
 8011750:	4603      	mov	r3, r0
 8011752:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8011756:	e06d      	b.n	8011834 <etharp_query+0x26c>
    /* pending entry? (either just created or already pending */
  } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 8011758:	7c7a      	ldrb	r2, [r7, #17]
 801175a:	493d      	ldr	r1, [pc, #244]	; (8011850 <etharp_query+0x288>)
 801175c:	4613      	mov	r3, r2
 801175e:	005b      	lsls	r3, r3, #1
 8011760:	4413      	add	r3, r2
 8011762:	00db      	lsls	r3, r3, #3
 8011764:	440b      	add	r3, r1
 8011766:	3314      	adds	r3, #20
 8011768:	781b      	ldrb	r3, [r3, #0]
 801176a:	2b01      	cmp	r3, #1
 801176c:	d162      	bne.n	8011834 <etharp_query+0x26c>
    /* entry is still pending, queue the given packet 'q' */
    struct pbuf *p;
    int copy_needed = 0;
 801176e:	2300      	movs	r3, #0
 8011770:	61bb      	str	r3, [r7, #24]
    /* IF q includes a pbuf that must be copied, copy the whole chain into a
     * new PBUF_RAM. See the definition of PBUF_NEEDS_COPY for details. */
    p = q;
 8011772:	687b      	ldr	r3, [r7, #4]
 8011774:	61fb      	str	r3, [r7, #28]
    while (p) {
 8011776:	e01c      	b.n	80117b2 <etharp_query+0x1ea>
      LWIP_ASSERT("no packet queues allowed!", (p->len != p->tot_len) || (p->next == 0));
 8011778:	69fb      	ldr	r3, [r7, #28]
 801177a:	895a      	ldrh	r2, [r3, #10]
 801177c:	69fb      	ldr	r3, [r7, #28]
 801177e:	891b      	ldrh	r3, [r3, #8]
 8011780:	429a      	cmp	r2, r3
 8011782:	d10a      	bne.n	801179a <etharp_query+0x1d2>
 8011784:	69fb      	ldr	r3, [r7, #28]
 8011786:	681b      	ldr	r3, [r3, #0]
 8011788:	2b00      	cmp	r3, #0
 801178a:	d006      	beq.n	801179a <etharp_query+0x1d2>
 801178c:	4b2d      	ldr	r3, [pc, #180]	; (8011844 <etharp_query+0x27c>)
 801178e:	f240 32f1 	movw	r2, #1009	; 0x3f1
 8011792:	4933      	ldr	r1, [pc, #204]	; (8011860 <etharp_query+0x298>)
 8011794:	482d      	ldr	r0, [pc, #180]	; (801184c <etharp_query+0x284>)
 8011796:	f002 f8e7 	bl	8013968 <iprintf>
      if (PBUF_NEEDS_COPY(p)) {
 801179a:	69fb      	ldr	r3, [r7, #28]
 801179c:	7b1b      	ldrb	r3, [r3, #12]
 801179e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80117a2:	2b00      	cmp	r3, #0
 80117a4:	d002      	beq.n	80117ac <etharp_query+0x1e4>
        copy_needed = 1;
 80117a6:	2301      	movs	r3, #1
 80117a8:	61bb      	str	r3, [r7, #24]
        break;
 80117aa:	e005      	b.n	80117b8 <etharp_query+0x1f0>
      }
      p = p->next;
 80117ac:	69fb      	ldr	r3, [r7, #28]
 80117ae:	681b      	ldr	r3, [r3, #0]
 80117b0:	61fb      	str	r3, [r7, #28]
    while (p) {
 80117b2:	69fb      	ldr	r3, [r7, #28]
 80117b4:	2b00      	cmp	r3, #0
 80117b6:	d1df      	bne.n	8011778 <etharp_query+0x1b0>
    }
    if (copy_needed) {
 80117b8:	69bb      	ldr	r3, [r7, #24]
 80117ba:	2b00      	cmp	r3, #0
 80117bc:	d007      	beq.n	80117ce <etharp_query+0x206>
      /* copy the whole packet into new pbufs */
      p = pbuf_clone(PBUF_LINK, PBUF_RAM, q);
 80117be:	687a      	ldr	r2, [r7, #4]
 80117c0:	f44f 7120 	mov.w	r1, #640	; 0x280
 80117c4:	200e      	movs	r0, #14
 80117c6:	f7f9 f895 	bl	800a8f4 <pbuf_clone>
 80117ca:	61f8      	str	r0, [r7, #28]
 80117cc:	e004      	b.n	80117d8 <etharp_query+0x210>
    } else {
      /* referencing the old pbuf is enough */
      p = q;
 80117ce:	687b      	ldr	r3, [r7, #4]
 80117d0:	61fb      	str	r3, [r7, #28]
      pbuf_ref(p);
 80117d2:	69f8      	ldr	r0, [r7, #28]
 80117d4:	f7f8 febc 	bl	800a550 <pbuf_ref>
    }
    /* packet could be taken over? */
    if (p != NULL) {
 80117d8:	69fb      	ldr	r3, [r7, #28]
 80117da:	2b00      	cmp	r3, #0
 80117dc:	d021      	beq.n	8011822 <etharp_query+0x25a>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
        result = ERR_MEM;
      }
#else /* ARP_QUEUEING */
      /* always queue one packet per ARP request only, freeing a previously queued packet */
      if (arp_table[i].q != NULL) {
 80117de:	7c7a      	ldrb	r2, [r7, #17]
 80117e0:	491b      	ldr	r1, [pc, #108]	; (8011850 <etharp_query+0x288>)
 80117e2:	4613      	mov	r3, r2
 80117e4:	005b      	lsls	r3, r3, #1
 80117e6:	4413      	add	r3, r2
 80117e8:	00db      	lsls	r3, r3, #3
 80117ea:	440b      	add	r3, r1
 80117ec:	681b      	ldr	r3, [r3, #0]
 80117ee:	2b00      	cmp	r3, #0
 80117f0:	d00a      	beq.n	8011808 <etharp_query+0x240>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: dropped previously queued packet %p for ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
        pbuf_free(arp_table[i].q);
 80117f2:	7c7a      	ldrb	r2, [r7, #17]
 80117f4:	4916      	ldr	r1, [pc, #88]	; (8011850 <etharp_query+0x288>)
 80117f6:	4613      	mov	r3, r2
 80117f8:	005b      	lsls	r3, r3, #1
 80117fa:	4413      	add	r3, r2
 80117fc:	00db      	lsls	r3, r3, #3
 80117fe:	440b      	add	r3, r1
 8011800:	681b      	ldr	r3, [r3, #0]
 8011802:	4618      	mov	r0, r3
 8011804:	f7f8 fdfe 	bl	800a404 <pbuf_free>
      }
      arp_table[i].q = p;
 8011808:	7c7a      	ldrb	r2, [r7, #17]
 801180a:	4911      	ldr	r1, [pc, #68]	; (8011850 <etharp_query+0x288>)
 801180c:	4613      	mov	r3, r2
 801180e:	005b      	lsls	r3, r3, #1
 8011810:	4413      	add	r3, r2
 8011812:	00db      	lsls	r3, r3, #3
 8011814:	440b      	add	r3, r1
 8011816:	69fa      	ldr	r2, [r7, #28]
 8011818:	601a      	str	r2, [r3, #0]
      result = ERR_OK;
 801181a:	2300      	movs	r3, #0
 801181c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8011820:	e008      	b.n	8011834 <etharp_query+0x26c>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: queued packet %p on ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
#endif /* ARP_QUEUEING */
    } else {
      ETHARP_STATS_INC(etharp.memerr);
 8011822:	4b07      	ldr	r3, [pc, #28]	; (8011840 <etharp_query+0x278>)
 8011824:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8011826:	3301      	adds	r3, #1
 8011828:	b29a      	uxth	r2, r3
 801182a:	4b05      	ldr	r3, [pc, #20]	; (8011840 <etharp_query+0x278>)
 801182c:	849a      	strh	r2, [r3, #36]	; 0x24
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
      result = ERR_MEM;
 801182e:	23ff      	movs	r3, #255	; 0xff
 8011830:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }
  }
  return result;
 8011834:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 8011838:	4618      	mov	r0, r3
 801183a:	3728      	adds	r7, #40	; 0x28
 801183c:	46bd      	mov	sp, r7
 801183e:	bd80      	pop	{r7, pc}
 8011840:	2000c64c 	.word	0x2000c64c
 8011844:	08016c90 	.word	0x08016c90
 8011848:	08016e3c 	.word	0x08016e3c
 801184c:	08016d08 	.word	0x08016d08
 8011850:	2000c7a8 	.word	0x2000c7a8
 8011854:	08016e4c 	.word	0x08016e4c
 8011858:	08016e30 	.word	0x08016e30
 801185c:	2000c898 	.word	0x2000c898
 8011860:	08016e74 	.word	0x08016e74

08011864 <etharp_raw>:
etharp_raw(struct netif *netif, const struct eth_addr *ethsrc_addr,
           const struct eth_addr *ethdst_addr,
           const struct eth_addr *hwsrc_addr, const ip4_addr_t *ipsrc_addr,
           const struct eth_addr *hwdst_addr, const ip4_addr_t *ipdst_addr,
           const u16_t opcode)
{
 8011864:	b580      	push	{r7, lr}
 8011866:	b08a      	sub	sp, #40	; 0x28
 8011868:	af02      	add	r7, sp, #8
 801186a:	60f8      	str	r0, [r7, #12]
 801186c:	60b9      	str	r1, [r7, #8]
 801186e:	607a      	str	r2, [r7, #4]
 8011870:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  err_t result = ERR_OK;
 8011872:	2300      	movs	r3, #0
 8011874:	77fb      	strb	r3, [r7, #31]
  struct etharp_hdr *hdr;

  LWIP_ASSERT("netif != NULL", netif != NULL);
 8011876:	68fb      	ldr	r3, [r7, #12]
 8011878:	2b00      	cmp	r3, #0
 801187a:	d106      	bne.n	801188a <etharp_raw+0x26>
 801187c:	4b40      	ldr	r3, [pc, #256]	; (8011980 <etharp_raw+0x11c>)
 801187e:	f240 4257 	movw	r2, #1111	; 0x457
 8011882:	4940      	ldr	r1, [pc, #256]	; (8011984 <etharp_raw+0x120>)
 8011884:	4840      	ldr	r0, [pc, #256]	; (8011988 <etharp_raw+0x124>)
 8011886:	f002 f86f 	bl	8013968 <iprintf>

  /* allocate a pbuf for the outgoing ARP request packet */
  p = pbuf_alloc(PBUF_LINK, SIZEOF_ETHARP_HDR, PBUF_RAM);
 801188a:	f44f 7220 	mov.w	r2, #640	; 0x280
 801188e:	211c      	movs	r1, #28
 8011890:	200e      	movs	r0, #14
 8011892:	f7f8 fad3 	bl	8009e3c <pbuf_alloc>
 8011896:	61b8      	str	r0, [r7, #24]
  /* could allocate a pbuf for an ARP request? */
  if (p == NULL) {
 8011898:	69bb      	ldr	r3, [r7, #24]
 801189a:	2b00      	cmp	r3, #0
 801189c:	d108      	bne.n	80118b0 <etharp_raw+0x4c>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("etharp_raw: could not allocate pbuf for ARP request.\n"));
    ETHARP_STATS_INC(etharp.memerr);
 801189e:	4b3b      	ldr	r3, [pc, #236]	; (801198c <etharp_raw+0x128>)
 80118a0:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80118a2:	3301      	adds	r3, #1
 80118a4:	b29a      	uxth	r2, r3
 80118a6:	4b39      	ldr	r3, [pc, #228]	; (801198c <etharp_raw+0x128>)
 80118a8:	849a      	strh	r2, [r3, #36]	; 0x24
    return ERR_MEM;
 80118aa:	f04f 33ff 	mov.w	r3, #4294967295
 80118ae:	e063      	b.n	8011978 <etharp_raw+0x114>
  }
  LWIP_ASSERT("check that first pbuf can hold struct etharp_hdr",
 80118b0:	69bb      	ldr	r3, [r7, #24]
 80118b2:	895b      	ldrh	r3, [r3, #10]
 80118b4:	2b1b      	cmp	r3, #27
 80118b6:	d806      	bhi.n	80118c6 <etharp_raw+0x62>
 80118b8:	4b31      	ldr	r3, [pc, #196]	; (8011980 <etharp_raw+0x11c>)
 80118ba:	f240 4262 	movw	r2, #1122	; 0x462
 80118be:	4934      	ldr	r1, [pc, #208]	; (8011990 <etharp_raw+0x12c>)
 80118c0:	4831      	ldr	r0, [pc, #196]	; (8011988 <etharp_raw+0x124>)
 80118c2:	f002 f851 	bl	8013968 <iprintf>
              (p->len >= SIZEOF_ETHARP_HDR));

  hdr = (struct etharp_hdr *)p->payload;
 80118c6:	69bb      	ldr	r3, [r7, #24]
 80118c8:	685b      	ldr	r3, [r3, #4]
 80118ca:	617b      	str	r3, [r7, #20]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_raw: sending raw ARP packet.\n"));
  hdr->opcode = lwip_htons(opcode);
 80118cc:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 80118ce:	4618      	mov	r0, r3
 80118d0:	f7f7 f8d6 	bl	8008a80 <lwip_htons>
 80118d4:	4603      	mov	r3, r0
 80118d6:	461a      	mov	r2, r3
 80118d8:	697b      	ldr	r3, [r7, #20]
 80118da:	80da      	strh	r2, [r3, #6]

  LWIP_ASSERT("netif->hwaddr_len must be the same as ETH_HWADDR_LEN for etharp!",
 80118dc:	68fb      	ldr	r3, [r7, #12]
 80118de:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80118e2:	2b06      	cmp	r3, #6
 80118e4:	d006      	beq.n	80118f4 <etharp_raw+0x90>
 80118e6:	4b26      	ldr	r3, [pc, #152]	; (8011980 <etharp_raw+0x11c>)
 80118e8:	f240 4269 	movw	r2, #1129	; 0x469
 80118ec:	4929      	ldr	r1, [pc, #164]	; (8011994 <etharp_raw+0x130>)
 80118ee:	4826      	ldr	r0, [pc, #152]	; (8011988 <etharp_raw+0x124>)
 80118f0:	f002 f83a 	bl	8013968 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));

  /* Write the ARP MAC-Addresses */
  SMEMCPY(&hdr->shwaddr, hwsrc_addr, ETH_HWADDR_LEN);
 80118f4:	697b      	ldr	r3, [r7, #20]
 80118f6:	3308      	adds	r3, #8
 80118f8:	2206      	movs	r2, #6
 80118fa:	6839      	ldr	r1, [r7, #0]
 80118fc:	4618      	mov	r0, r3
 80118fe:	f001 ff88 	bl	8013812 <memcpy>
  SMEMCPY(&hdr->dhwaddr, hwdst_addr, ETH_HWADDR_LEN);
 8011902:	697b      	ldr	r3, [r7, #20]
 8011904:	3312      	adds	r3, #18
 8011906:	2206      	movs	r2, #6
 8011908:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 801190a:	4618      	mov	r0, r3
 801190c:	f001 ff81 	bl	8013812 <memcpy>
  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing. */
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->sipaddr, ipsrc_addr);
 8011910:	697b      	ldr	r3, [r7, #20]
 8011912:	330e      	adds	r3, #14
 8011914:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8011916:	6812      	ldr	r2, [r2, #0]
 8011918:	601a      	str	r2, [r3, #0]
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->dipaddr, ipdst_addr);
 801191a:	697b      	ldr	r3, [r7, #20]
 801191c:	3318      	adds	r3, #24
 801191e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8011920:	6812      	ldr	r2, [r2, #0]
 8011922:	601a      	str	r2, [r3, #0]

  hdr->hwtype = PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET);
 8011924:	697b      	ldr	r3, [r7, #20]
 8011926:	2200      	movs	r2, #0
 8011928:	701a      	strb	r2, [r3, #0]
 801192a:	2200      	movs	r2, #0
 801192c:	f042 0201 	orr.w	r2, r2, #1
 8011930:	705a      	strb	r2, [r3, #1]
  hdr->proto = PP_HTONS(ETHTYPE_IP);
 8011932:	697b      	ldr	r3, [r7, #20]
 8011934:	2200      	movs	r2, #0
 8011936:	f042 0208 	orr.w	r2, r2, #8
 801193a:	709a      	strb	r2, [r3, #2]
 801193c:	2200      	movs	r2, #0
 801193e:	70da      	strb	r2, [r3, #3]
  /* set hwlen and protolen */
  hdr->hwlen = ETH_HWADDR_LEN;
 8011940:	697b      	ldr	r3, [r7, #20]
 8011942:	2206      	movs	r2, #6
 8011944:	711a      	strb	r2, [r3, #4]
  hdr->protolen = sizeof(ip4_addr_t);
 8011946:	697b      	ldr	r3, [r7, #20]
 8011948:	2204      	movs	r2, #4
 801194a:	715a      	strb	r2, [r3, #5]
  if (ip4_addr_islinklocal(ipsrc_addr)) {
    ethernet_output(netif, p, ethsrc_addr, &ethbroadcast, ETHTYPE_ARP);
  } else
#endif /* LWIP_AUTOIP */
  {
    ethernet_output(netif, p, ethsrc_addr, ethdst_addr, ETHTYPE_ARP);
 801194c:	f640 0306 	movw	r3, #2054	; 0x806
 8011950:	9300      	str	r3, [sp, #0]
 8011952:	687b      	ldr	r3, [r7, #4]
 8011954:	68ba      	ldr	r2, [r7, #8]
 8011956:	69b9      	ldr	r1, [r7, #24]
 8011958:	68f8      	ldr	r0, [r7, #12]
 801195a:	f001 fc85 	bl	8013268 <ethernet_output>
  }

  ETHARP_STATS_INC(etharp.xmit);
 801195e:	4b0b      	ldr	r3, [pc, #44]	; (801198c <etharp_raw+0x128>)
 8011960:	8b1b      	ldrh	r3, [r3, #24]
 8011962:	3301      	adds	r3, #1
 8011964:	b29a      	uxth	r2, r3
 8011966:	4b09      	ldr	r3, [pc, #36]	; (801198c <etharp_raw+0x128>)
 8011968:	831a      	strh	r2, [r3, #24]
  /* free ARP query packet */
  pbuf_free(p);
 801196a:	69b8      	ldr	r0, [r7, #24]
 801196c:	f7f8 fd4a 	bl	800a404 <pbuf_free>
  p = NULL;
 8011970:	2300      	movs	r3, #0
 8011972:	61bb      	str	r3, [r7, #24]
  /* could not allocate pbuf for ARP request */

  return result;
 8011974:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8011978:	4618      	mov	r0, r3
 801197a:	3720      	adds	r7, #32
 801197c:	46bd      	mov	sp, r7
 801197e:	bd80      	pop	{r7, pc}
 8011980:	08016c90 	.word	0x08016c90
 8011984:	08016de0 	.word	0x08016de0
 8011988:	08016d08 	.word	0x08016d08
 801198c:	2000c64c 	.word	0x2000c64c
 8011990:	08016e90 	.word	0x08016e90
 8011994:	08016ec4 	.word	0x08016ec4

08011998 <etharp_request_dst>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
static err_t
etharp_request_dst(struct netif *netif, const ip4_addr_t *ipaddr, const struct eth_addr *hw_dst_addr)
{
 8011998:	b580      	push	{r7, lr}
 801199a:	b088      	sub	sp, #32
 801199c:	af04      	add	r7, sp, #16
 801199e:	60f8      	str	r0, [r7, #12]
 80119a0:	60b9      	str	r1, [r7, #8]
 80119a2:	607a      	str	r2, [r7, #4]
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 80119a4:	68fb      	ldr	r3, [r7, #12]
 80119a6:	f103 0126 	add.w	r1, r3, #38	; 0x26
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 80119aa:	68fb      	ldr	r3, [r7, #12]
 80119ac:	f103 0026 	add.w	r0, r3, #38	; 0x26
 80119b0:	68fb      	ldr	r3, [r7, #12]
 80119b2:	3304      	adds	r3, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 80119b4:	2201      	movs	r2, #1
 80119b6:	9203      	str	r2, [sp, #12]
 80119b8:	68ba      	ldr	r2, [r7, #8]
 80119ba:	9202      	str	r2, [sp, #8]
 80119bc:	4a06      	ldr	r2, [pc, #24]	; (80119d8 <etharp_request_dst+0x40>)
 80119be:	9201      	str	r2, [sp, #4]
 80119c0:	9300      	str	r3, [sp, #0]
 80119c2:	4603      	mov	r3, r0
 80119c4:	687a      	ldr	r2, [r7, #4]
 80119c6:	68f8      	ldr	r0, [r7, #12]
 80119c8:	f7ff ff4c 	bl	8011864 <etharp_raw>
 80119cc:	4603      	mov	r3, r0
                    ipaddr, ARP_REQUEST);
}
 80119ce:	4618      	mov	r0, r3
 80119d0:	3710      	adds	r7, #16
 80119d2:	46bd      	mov	sp, r7
 80119d4:	bd80      	pop	{r7, pc}
 80119d6:	bf00      	nop
 80119d8:	080174cc 	.word	0x080174cc

080119dc <etharp_request>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
err_t
etharp_request(struct netif *netif, const ip4_addr_t *ipaddr)
{
 80119dc:	b580      	push	{r7, lr}
 80119de:	b082      	sub	sp, #8
 80119e0:	af00      	add	r7, sp, #0
 80119e2:	6078      	str	r0, [r7, #4]
 80119e4:	6039      	str	r1, [r7, #0]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_request: sending ARP request.\n"));
  return etharp_request_dst(netif, ipaddr, &ethbroadcast);
 80119e6:	4a05      	ldr	r2, [pc, #20]	; (80119fc <etharp_request+0x20>)
 80119e8:	6839      	ldr	r1, [r7, #0]
 80119ea:	6878      	ldr	r0, [r7, #4]
 80119ec:	f7ff ffd4 	bl	8011998 <etharp_request_dst>
 80119f0:	4603      	mov	r3, r0
}
 80119f2:	4618      	mov	r0, r3
 80119f4:	3708      	adds	r7, #8
 80119f6:	46bd      	mov	sp, r7
 80119f8:	bd80      	pop	{r7, pc}
 80119fa:	bf00      	nop
 80119fc:	080174c4 	.word	0x080174c4

08011a00 <icmp_input>:
 * @param p the icmp echo request packet, p->payload pointing to the icmp header
 * @param inp the netif on which this packet was received
 */
void
icmp_input(struct pbuf *p, struct netif *inp)
{
 8011a00:	b580      	push	{r7, lr}
 8011a02:	b08e      	sub	sp, #56	; 0x38
 8011a04:	af04      	add	r7, sp, #16
 8011a06:	6078      	str	r0, [r7, #4]
 8011a08:	6039      	str	r1, [r7, #0]
  struct icmp_echo_hdr *iecho;
  const struct ip_hdr *iphdr_in;
  u16_t hlen;
  const ip4_addr_t *src;

  ICMP_STATS_INC(icmp.recv);
 8011a0a:	4b92      	ldr	r3, [pc, #584]	; (8011c54 <icmp_input+0x254>)
 8011a0c:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8011a10:	3301      	adds	r3, #1
 8011a12:	b29a      	uxth	r2, r3
 8011a14:	4b8f      	ldr	r3, [pc, #572]	; (8011c54 <icmp_input+0x254>)
 8011a16:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  MIB2_STATS_INC(mib2.icmpinmsgs);

  iphdr_in = ip4_current_header();
 8011a1a:	4b8f      	ldr	r3, [pc, #572]	; (8011c58 <icmp_input+0x258>)
 8011a1c:	689b      	ldr	r3, [r3, #8]
 8011a1e:	627b      	str	r3, [r7, #36]	; 0x24
  hlen = IPH_HL_BYTES(iphdr_in);
 8011a20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011a22:	781b      	ldrb	r3, [r3, #0]
 8011a24:	f003 030f 	and.w	r3, r3, #15
 8011a28:	b2db      	uxtb	r3, r3
 8011a2a:	009b      	lsls	r3, r3, #2
 8011a2c:	b2db      	uxtb	r3, r3
 8011a2e:	847b      	strh	r3, [r7, #34]	; 0x22
  if (hlen < IP_HLEN) {
 8011a30:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8011a32:	2b13      	cmp	r3, #19
 8011a34:	f240 80e6 	bls.w	8011c04 <icmp_input+0x204>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short IP header (%"S16_F" bytes) received\n", hlen));
    goto lenerr;
  }
  if (p->len < sizeof(u16_t) * 2) {
 8011a38:	687b      	ldr	r3, [r7, #4]
 8011a3a:	895b      	ldrh	r3, [r3, #10]
 8011a3c:	2b03      	cmp	r3, #3
 8011a3e:	f240 80e3 	bls.w	8011c08 <icmp_input+0x208>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short ICMP (%"U16_F" bytes) received\n", p->tot_len));
    goto lenerr;
  }

  type = *((u8_t *)p->payload);
 8011a42:	687b      	ldr	r3, [r7, #4]
 8011a44:	685b      	ldr	r3, [r3, #4]
 8011a46:	781b      	ldrb	r3, [r3, #0]
 8011a48:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
#ifdef LWIP_DEBUG
  code = *(((u8_t *)p->payload) + 1);
  /* if debug is enabled but debug statement below is somehow disabled: */
  LWIP_UNUSED_ARG(code);
#endif /* LWIP_DEBUG */
  switch (type) {
 8011a4c:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8011a50:	2b00      	cmp	r3, #0
 8011a52:	f000 80d0 	beq.w	8011bf6 <icmp_input+0x1f6>
 8011a56:	2b08      	cmp	r3, #8
 8011a58:	f040 80bc 	bne.w	8011bd4 <icmp_input+0x1d4>
         (as obviously, an echo request has been sent, too). */
      MIB2_STATS_INC(mib2.icmpinechoreps);
      break;
    case ICMP_ECHO:
      MIB2_STATS_INC(mib2.icmpinechos);
      src = ip4_current_dest_addr();
 8011a5c:	4b7f      	ldr	r3, [pc, #508]	; (8011c5c <icmp_input+0x25c>)
 8011a5e:	61fb      	str	r3, [r7, #28]
      /* multicast destination address? */
      if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8011a60:	4b7d      	ldr	r3, [pc, #500]	; (8011c58 <icmp_input+0x258>)
 8011a62:	695b      	ldr	r3, [r3, #20]
 8011a64:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8011a68:	2be0      	cmp	r3, #224	; 0xe0
 8011a6a:	f000 80dc 	beq.w	8011c26 <icmp_input+0x226>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to multicast pings\n"));
        goto icmperr;
#endif /* LWIP_MULTICAST_PING */
      }
      /* broadcast destination address? */
      if (ip4_addr_isbroadcast(ip4_current_dest_addr(), ip_current_netif())) {
 8011a6e:	4b7a      	ldr	r3, [pc, #488]	; (8011c58 <icmp_input+0x258>)
 8011a70:	695b      	ldr	r3, [r3, #20]
 8011a72:	4a79      	ldr	r2, [pc, #484]	; (8011c58 <icmp_input+0x258>)
 8011a74:	6812      	ldr	r2, [r2, #0]
 8011a76:	4611      	mov	r1, r2
 8011a78:	4618      	mov	r0, r3
 8011a7a:	f000 fc95 	bl	80123a8 <ip4_addr_isbroadcast_u32>
 8011a7e:	4603      	mov	r3, r0
 8011a80:	2b00      	cmp	r3, #0
 8011a82:	f040 80d2 	bne.w	8011c2a <icmp_input+0x22a>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to broadcast pings\n"));
        goto icmperr;
#endif /* LWIP_BROADCAST_PING */
      }
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ping\n"));
      if (p->tot_len < sizeof(struct icmp_echo_hdr)) {
 8011a86:	687b      	ldr	r3, [r7, #4]
 8011a88:	891b      	ldrh	r3, [r3, #8]
 8011a8a:	2b07      	cmp	r3, #7
 8011a8c:	f240 80be 	bls.w	8011c0c <icmp_input+0x20c>
          return;
        }
      }
#endif
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN
      if (pbuf_add_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 8011a90:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8011a92:	330e      	adds	r3, #14
 8011a94:	4619      	mov	r1, r3
 8011a96:	6878      	ldr	r0, [r7, #4]
 8011a98:	f7f8 fc1e 	bl	800a2d8 <pbuf_add_header>
 8011a9c:	4603      	mov	r3, r0
 8011a9e:	2b00      	cmp	r3, #0
 8011aa0:	d04b      	beq.n	8011b3a <icmp_input+0x13a>
        /* p is not big enough to contain link headers
         * allocate a new one and copy p into it
         */
        struct pbuf *r;
        u16_t alloc_len = (u16_t)(p->tot_len + hlen);
 8011aa2:	687b      	ldr	r3, [r7, #4]
 8011aa4:	891a      	ldrh	r2, [r3, #8]
 8011aa6:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8011aa8:	4413      	add	r3, r2
 8011aaa:	837b      	strh	r3, [r7, #26]
        if (alloc_len < p->tot_len) {
 8011aac:	687b      	ldr	r3, [r7, #4]
 8011aae:	891b      	ldrh	r3, [r3, #8]
 8011ab0:	8b7a      	ldrh	r2, [r7, #26]
 8011ab2:	429a      	cmp	r2, r3
 8011ab4:	f0c0 80bb 	bcc.w	8011c2e <icmp_input+0x22e>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed (tot_len overflow)\n"));
          goto icmperr;
        }
        /* allocate new packet buffer with space for link headers */
        r = pbuf_alloc(PBUF_LINK, alloc_len, PBUF_RAM);
 8011ab8:	8b7b      	ldrh	r3, [r7, #26]
 8011aba:	f44f 7220 	mov.w	r2, #640	; 0x280
 8011abe:	4619      	mov	r1, r3
 8011ac0:	200e      	movs	r0, #14
 8011ac2:	f7f8 f9bb 	bl	8009e3c <pbuf_alloc>
 8011ac6:	6178      	str	r0, [r7, #20]
        if (r == NULL) {
 8011ac8:	697b      	ldr	r3, [r7, #20]
 8011aca:	2b00      	cmp	r3, #0
 8011acc:	f000 80b1 	beq.w	8011c32 <icmp_input+0x232>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed\n"));
          goto icmperr;
        }
        if (r->len < hlen + sizeof(struct icmp_echo_hdr)) {
 8011ad0:	697b      	ldr	r3, [r7, #20]
 8011ad2:	895b      	ldrh	r3, [r3, #10]
 8011ad4:	461a      	mov	r2, r3
 8011ad6:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8011ad8:	3308      	adds	r3, #8
 8011ada:	429a      	cmp	r2, r3
 8011adc:	d203      	bcs.n	8011ae6 <icmp_input+0xe6>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("first pbuf cannot hold the ICMP header"));
          pbuf_free(r);
 8011ade:	6978      	ldr	r0, [r7, #20]
 8011ae0:	f7f8 fc90 	bl	800a404 <pbuf_free>
          goto icmperr;
 8011ae4:	e0a6      	b.n	8011c34 <icmp_input+0x234>
        }
        /* copy the ip header */
        MEMCPY(r->payload, iphdr_in, hlen);
 8011ae6:	697b      	ldr	r3, [r7, #20]
 8011ae8:	685b      	ldr	r3, [r3, #4]
 8011aea:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8011aec:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8011aee:	4618      	mov	r0, r3
 8011af0:	f001 fe8f 	bl	8013812 <memcpy>
        /* switch r->payload back to icmp header (cannot fail) */
        if (pbuf_remove_header(r, hlen)) {
 8011af4:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8011af6:	4619      	mov	r1, r3
 8011af8:	6978      	ldr	r0, [r7, #20]
 8011afa:	f7f8 fbfd 	bl	800a2f8 <pbuf_remove_header>
 8011afe:	4603      	mov	r3, r0
 8011b00:	2b00      	cmp	r3, #0
 8011b02:	d009      	beq.n	8011b18 <icmp_input+0x118>
          LWIP_ASSERT("icmp_input: moving r->payload to icmp header failed\n", 0);
 8011b04:	4b56      	ldr	r3, [pc, #344]	; (8011c60 <icmp_input+0x260>)
 8011b06:	22b6      	movs	r2, #182	; 0xb6
 8011b08:	4956      	ldr	r1, [pc, #344]	; (8011c64 <icmp_input+0x264>)
 8011b0a:	4857      	ldr	r0, [pc, #348]	; (8011c68 <icmp_input+0x268>)
 8011b0c:	f001 ff2c 	bl	8013968 <iprintf>
          pbuf_free(r);
 8011b10:	6978      	ldr	r0, [r7, #20]
 8011b12:	f7f8 fc77 	bl	800a404 <pbuf_free>
          goto icmperr;
 8011b16:	e08d      	b.n	8011c34 <icmp_input+0x234>
        }
        /* copy the rest of the packet without ip header */
        if (pbuf_copy(r, p) != ERR_OK) {
 8011b18:	6879      	ldr	r1, [r7, #4]
 8011b1a:	6978      	ldr	r0, [r7, #20]
 8011b1c:	f7f8 fda6 	bl	800a66c <pbuf_copy>
 8011b20:	4603      	mov	r3, r0
 8011b22:	2b00      	cmp	r3, #0
 8011b24:	d003      	beq.n	8011b2e <icmp_input+0x12e>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("icmp_input: copying to new pbuf failed"));
          pbuf_free(r);
 8011b26:	6978      	ldr	r0, [r7, #20]
 8011b28:	f7f8 fc6c 	bl	800a404 <pbuf_free>
          goto icmperr;
 8011b2c:	e082      	b.n	8011c34 <icmp_input+0x234>
        }
        /* free the original p */
        pbuf_free(p);
 8011b2e:	6878      	ldr	r0, [r7, #4]
 8011b30:	f7f8 fc68 	bl	800a404 <pbuf_free>
        /* we now have an identical copy of p that has room for link headers */
        p = r;
 8011b34:	697b      	ldr	r3, [r7, #20]
 8011b36:	607b      	str	r3, [r7, #4]
 8011b38:	e00f      	b.n	8011b5a <icmp_input+0x15a>
      } else {
        /* restore p->payload to point to icmp header (cannot fail) */
        if (pbuf_remove_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 8011b3a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8011b3c:	330e      	adds	r3, #14
 8011b3e:	4619      	mov	r1, r3
 8011b40:	6878      	ldr	r0, [r7, #4]
 8011b42:	f7f8 fbd9 	bl	800a2f8 <pbuf_remove_header>
 8011b46:	4603      	mov	r3, r0
 8011b48:	2b00      	cmp	r3, #0
 8011b4a:	d006      	beq.n	8011b5a <icmp_input+0x15a>
          LWIP_ASSERT("icmp_input: restoring original p->payload failed\n", 0);
 8011b4c:	4b44      	ldr	r3, [pc, #272]	; (8011c60 <icmp_input+0x260>)
 8011b4e:	22c7      	movs	r2, #199	; 0xc7
 8011b50:	4946      	ldr	r1, [pc, #280]	; (8011c6c <icmp_input+0x26c>)
 8011b52:	4845      	ldr	r0, [pc, #276]	; (8011c68 <icmp_input+0x268>)
 8011b54:	f001 ff08 	bl	8013968 <iprintf>
          goto icmperr;
 8011b58:	e06c      	b.n	8011c34 <icmp_input+0x234>
      }
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN */
      /* At this point, all checks are OK. */
      /* We generate an answer by switching the dest and src ip addresses,
       * setting the icmp type to ECHO_RESPONSE and updating the checksum. */
      iecho = (struct icmp_echo_hdr *)p->payload;
 8011b5a:	687b      	ldr	r3, [r7, #4]
 8011b5c:	685b      	ldr	r3, [r3, #4]
 8011b5e:	613b      	str	r3, [r7, #16]
      if (pbuf_add_header(p, hlen)) {
 8011b60:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8011b62:	4619      	mov	r1, r3
 8011b64:	6878      	ldr	r0, [r7, #4]
 8011b66:	f7f8 fbb7 	bl	800a2d8 <pbuf_add_header>
 8011b6a:	4603      	mov	r3, r0
 8011b6c:	2b00      	cmp	r3, #0
 8011b6e:	d144      	bne.n	8011bfa <icmp_input+0x1fa>
        LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("Can't move over header in packet"));
      } else {
        err_t ret;
        struct ip_hdr *iphdr = (struct ip_hdr *)p->payload;
 8011b70:	687b      	ldr	r3, [r7, #4]
 8011b72:	685b      	ldr	r3, [r3, #4]
 8011b74:	60fb      	str	r3, [r7, #12]
        ip4_addr_copy(iphdr->src, *src);
 8011b76:	69fb      	ldr	r3, [r7, #28]
 8011b78:	681a      	ldr	r2, [r3, #0]
 8011b7a:	68fb      	ldr	r3, [r7, #12]
 8011b7c:	60da      	str	r2, [r3, #12]
        ip4_addr_copy(iphdr->dest, *ip4_current_src_addr());
 8011b7e:	4b36      	ldr	r3, [pc, #216]	; (8011c58 <icmp_input+0x258>)
 8011b80:	691a      	ldr	r2, [r3, #16]
 8011b82:	68fb      	ldr	r3, [r7, #12]
 8011b84:	611a      	str	r2, [r3, #16]
        ICMPH_TYPE_SET(iecho, ICMP_ER);
 8011b86:	693b      	ldr	r3, [r7, #16]
 8011b88:	2200      	movs	r2, #0
 8011b8a:	701a      	strb	r2, [r3, #0]
        else {
          iecho->chksum = 0;
        }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF */
#else /* CHECKSUM_GEN_ICMP */
        iecho->chksum = 0;
 8011b8c:	693b      	ldr	r3, [r7, #16]
 8011b8e:	2200      	movs	r2, #0
 8011b90:	709a      	strb	r2, [r3, #2]
 8011b92:	2200      	movs	r2, #0
 8011b94:	70da      	strb	r2, [r3, #3]
#endif /* CHECKSUM_GEN_ICMP */

        /* Set the correct TTL and recalculate the header checksum. */
        IPH_TTL_SET(iphdr, ICMP_TTL);
 8011b96:	68fb      	ldr	r3, [r7, #12]
 8011b98:	22ff      	movs	r2, #255	; 0xff
 8011b9a:	721a      	strb	r2, [r3, #8]
        IPH_CHKSUM_SET(iphdr, 0);
 8011b9c:	68fb      	ldr	r3, [r7, #12]
 8011b9e:	2200      	movs	r2, #0
 8011ba0:	729a      	strb	r2, [r3, #10]
 8011ba2:	2200      	movs	r2, #0
 8011ba4:	72da      	strb	r2, [r3, #11]
        IF__NETIF_CHECKSUM_ENABLED(inp, NETIF_CHECKSUM_GEN_IP) {
          IPH_CHKSUM_SET(iphdr, inet_chksum(iphdr, hlen));
        }
#endif /* CHECKSUM_GEN_IP */

        ICMP_STATS_INC(icmp.xmit);
 8011ba6:	4b2b      	ldr	r3, [pc, #172]	; (8011c54 <icmp_input+0x254>)
 8011ba8:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8011bac:	3301      	adds	r3, #1
 8011bae:	b29a      	uxth	r2, r3
 8011bb0:	4b28      	ldr	r3, [pc, #160]	; (8011c54 <icmp_input+0x254>)
 8011bb2:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
        MIB2_STATS_INC(mib2.icmpoutmsgs);
        /* increase number of echo replies attempted to send */
        MIB2_STATS_INC(mib2.icmpoutechoreps);

        /* send an ICMP packet */
        ret = ip4_output_if(p, src, LWIP_IP_HDRINCL,
 8011bb6:	683b      	ldr	r3, [r7, #0]
 8011bb8:	9302      	str	r3, [sp, #8]
 8011bba:	2301      	movs	r3, #1
 8011bbc:	9301      	str	r3, [sp, #4]
 8011bbe:	2300      	movs	r3, #0
 8011bc0:	9300      	str	r3, [sp, #0]
 8011bc2:	23ff      	movs	r3, #255	; 0xff
 8011bc4:	2200      	movs	r2, #0
 8011bc6:	69f9      	ldr	r1, [r7, #28]
 8011bc8:	6878      	ldr	r0, [r7, #4]
 8011bca:	f000 fafb 	bl	80121c4 <ip4_output_if>
 8011bce:	4603      	mov	r3, r0
 8011bd0:	72fb      	strb	r3, [r7, #11]
                            ICMP_TTL, 0, IP_PROTO_ICMP, inp);
        if (ret != ERR_OK) {
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ip_output_if returned an error: %s\n", lwip_strerr(ret)));
        }
      }
      break;
 8011bd2:	e012      	b.n	8011bfa <icmp_input+0x1fa>
      } else if (type == ICMP_AMR) {
        MIB2_STATS_INC(mib2.icmpinaddrmaskreps);
      }
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ICMP type %"S16_F" code %"S16_F" not supported.\n",
                               (s16_t)type, (s16_t)code));
      ICMP_STATS_INC(icmp.proterr);
 8011bd4:	4b1f      	ldr	r3, [pc, #124]	; (8011c54 <icmp_input+0x254>)
 8011bd6:	f8b3 3070 	ldrh.w	r3, [r3, #112]	; 0x70
 8011bda:	3301      	adds	r3, #1
 8011bdc:	b29a      	uxth	r2, r3
 8011bde:	4b1d      	ldr	r3, [pc, #116]	; (8011c54 <icmp_input+0x254>)
 8011be0:	f8a3 2070 	strh.w	r2, [r3, #112]	; 0x70
      ICMP_STATS_INC(icmp.drop);
 8011be4:	4b1b      	ldr	r3, [pc, #108]	; (8011c54 <icmp_input+0x254>)
 8011be6:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8011bea:	3301      	adds	r3, #1
 8011bec:	b29a      	uxth	r2, r3
 8011bee:	4b19      	ldr	r3, [pc, #100]	; (8011c54 <icmp_input+0x254>)
 8011bf0:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
 8011bf4:	e002      	b.n	8011bfc <icmp_input+0x1fc>
      break;
 8011bf6:	bf00      	nop
 8011bf8:	e000      	b.n	8011bfc <icmp_input+0x1fc>
      break;
 8011bfa:	bf00      	nop
  }
  pbuf_free(p);
 8011bfc:	6878      	ldr	r0, [r7, #4]
 8011bfe:	f7f8 fc01 	bl	800a404 <pbuf_free>
  return;
 8011c02:	e023      	b.n	8011c4c <icmp_input+0x24c>
    goto lenerr;
 8011c04:	bf00      	nop
 8011c06:	e002      	b.n	8011c0e <icmp_input+0x20e>
    goto lenerr;
 8011c08:	bf00      	nop
 8011c0a:	e000      	b.n	8011c0e <icmp_input+0x20e>
        goto lenerr;
 8011c0c:	bf00      	nop
lenerr:
  pbuf_free(p);
 8011c0e:	6878      	ldr	r0, [r7, #4]
 8011c10:	f7f8 fbf8 	bl	800a404 <pbuf_free>
  ICMP_STATS_INC(icmp.lenerr);
 8011c14:	4b0f      	ldr	r3, [pc, #60]	; (8011c54 <icmp_input+0x254>)
 8011c16:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8011c1a:	3301      	adds	r3, #1
 8011c1c:	b29a      	uxth	r2, r3
 8011c1e:	4b0d      	ldr	r3, [pc, #52]	; (8011c54 <icmp_input+0x254>)
 8011c20:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 8011c24:	e012      	b.n	8011c4c <icmp_input+0x24c>
        goto icmperr;
 8011c26:	bf00      	nop
 8011c28:	e004      	b.n	8011c34 <icmp_input+0x234>
        goto icmperr;
 8011c2a:	bf00      	nop
 8011c2c:	e002      	b.n	8011c34 <icmp_input+0x234>
          goto icmperr;
 8011c2e:	bf00      	nop
 8011c30:	e000      	b.n	8011c34 <icmp_input+0x234>
          goto icmperr;
 8011c32:	bf00      	nop
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING
icmperr:
  pbuf_free(p);
 8011c34:	6878      	ldr	r0, [r7, #4]
 8011c36:	f7f8 fbe5 	bl	800a404 <pbuf_free>
  ICMP_STATS_INC(icmp.err);
 8011c3a:	4b06      	ldr	r3, [pc, #24]	; (8011c54 <icmp_input+0x254>)
 8011c3c:	f8b3 3074 	ldrh.w	r3, [r3, #116]	; 0x74
 8011c40:	3301      	adds	r3, #1
 8011c42:	b29a      	uxth	r2, r3
 8011c44:	4b03      	ldr	r3, [pc, #12]	; (8011c54 <icmp_input+0x254>)
 8011c46:	f8a3 2074 	strh.w	r2, [r3, #116]	; 0x74
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 8011c4a:	bf00      	nop
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING */
}
 8011c4c:	3728      	adds	r7, #40	; 0x28
 8011c4e:	46bd      	mov	sp, r7
 8011c50:	bd80      	pop	{r7, pc}
 8011c52:	bf00      	nop
 8011c54:	2000c64c 	.word	0x2000c64c
 8011c58:	20008e5c 	.word	0x20008e5c
 8011c5c:	20008e70 	.word	0x20008e70
 8011c60:	08016f08 	.word	0x08016f08
 8011c64:	08016f40 	.word	0x08016f40
 8011c68:	08016f78 	.word	0x08016f78
 8011c6c:	08016fa0 	.word	0x08016fa0

08011c70 <icmp_dest_unreach>:
 *          p->payload pointing to the IP header
 * @param t type of the 'unreachable' packet
 */
void
icmp_dest_unreach(struct pbuf *p, enum icmp_dur_type t)
{
 8011c70:	b580      	push	{r7, lr}
 8011c72:	b082      	sub	sp, #8
 8011c74:	af00      	add	r7, sp, #0
 8011c76:	6078      	str	r0, [r7, #4]
 8011c78:	460b      	mov	r3, r1
 8011c7a:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpoutdestunreachs);
  icmp_send_response(p, ICMP_DUR, t);
 8011c7c:	78fb      	ldrb	r3, [r7, #3]
 8011c7e:	461a      	mov	r2, r3
 8011c80:	2103      	movs	r1, #3
 8011c82:	6878      	ldr	r0, [r7, #4]
 8011c84:	f000 f814 	bl	8011cb0 <icmp_send_response>
}
 8011c88:	bf00      	nop
 8011c8a:	3708      	adds	r7, #8
 8011c8c:	46bd      	mov	sp, r7
 8011c8e:	bd80      	pop	{r7, pc}

08011c90 <icmp_time_exceeded>:
 *          p->payload pointing to the IP header
 * @param t type of the 'time exceeded' packet
 */
void
icmp_time_exceeded(struct pbuf *p, enum icmp_te_type t)
{
 8011c90:	b580      	push	{r7, lr}
 8011c92:	b082      	sub	sp, #8
 8011c94:	af00      	add	r7, sp, #0
 8011c96:	6078      	str	r0, [r7, #4]
 8011c98:	460b      	mov	r3, r1
 8011c9a:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpouttimeexcds);
  icmp_send_response(p, ICMP_TE, t);
 8011c9c:	78fb      	ldrb	r3, [r7, #3]
 8011c9e:	461a      	mov	r2, r3
 8011ca0:	210b      	movs	r1, #11
 8011ca2:	6878      	ldr	r0, [r7, #4]
 8011ca4:	f000 f804 	bl	8011cb0 <icmp_send_response>
}
 8011ca8:	bf00      	nop
 8011caa:	3708      	adds	r7, #8
 8011cac:	46bd      	mov	sp, r7
 8011cae:	bd80      	pop	{r7, pc}

08011cb0 <icmp_send_response>:
 * @param type Type of the ICMP header
 * @param code Code of the ICMP header
 */
static void
icmp_send_response(struct pbuf *p, u8_t type, u8_t code)
{
 8011cb0:	b580      	push	{r7, lr}
 8011cb2:	b08c      	sub	sp, #48	; 0x30
 8011cb4:	af04      	add	r7, sp, #16
 8011cb6:	6078      	str	r0, [r7, #4]
 8011cb8:	460b      	mov	r3, r1
 8011cba:	70fb      	strb	r3, [r7, #3]
 8011cbc:	4613      	mov	r3, r2
 8011cbe:	70bb      	strb	r3, [r7, #2]

  /* increase number of messages attempted to send */
  MIB2_STATS_INC(mib2.icmpoutmsgs);

  /* ICMP header + IP header + 8 bytes of data */
  q = pbuf_alloc(PBUF_IP, sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE,
 8011cc0:	f44f 7220 	mov.w	r2, #640	; 0x280
 8011cc4:	2124      	movs	r1, #36	; 0x24
 8011cc6:	2022      	movs	r0, #34	; 0x22
 8011cc8:	f7f8 f8b8 	bl	8009e3c <pbuf_alloc>
 8011ccc:	61f8      	str	r0, [r7, #28]
                 PBUF_RAM);
  if (q == NULL) {
 8011cce:	69fb      	ldr	r3, [r7, #28]
 8011cd0:	2b00      	cmp	r3, #0
 8011cd2:	d054      	beq.n	8011d7e <icmp_send_response+0xce>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_time_exceeded: failed to allocate pbuf for ICMP packet.\n"));
    MIB2_STATS_INC(mib2.icmpouterrors);
    return;
  }
  LWIP_ASSERT("check that first pbuf can hold icmp message",
 8011cd4:	69fb      	ldr	r3, [r7, #28]
 8011cd6:	895b      	ldrh	r3, [r3, #10]
 8011cd8:	2b23      	cmp	r3, #35	; 0x23
 8011cda:	d806      	bhi.n	8011cea <icmp_send_response+0x3a>
 8011cdc:	4b2a      	ldr	r3, [pc, #168]	; (8011d88 <icmp_send_response+0xd8>)
 8011cde:	f44f 72b4 	mov.w	r2, #360	; 0x168
 8011ce2:	492a      	ldr	r1, [pc, #168]	; (8011d8c <icmp_send_response+0xdc>)
 8011ce4:	482a      	ldr	r0, [pc, #168]	; (8011d90 <icmp_send_response+0xe0>)
 8011ce6:	f001 fe3f 	bl	8013968 <iprintf>
              (q->len >= (sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE)));

  iphdr = (struct ip_hdr *)p->payload;
 8011cea:	687b      	ldr	r3, [r7, #4]
 8011cec:	685b      	ldr	r3, [r3, #4]
 8011cee:	61bb      	str	r3, [r7, #24]
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->src);
  LWIP_DEBUGF(ICMP_DEBUG, (" to "));
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->dest);
  LWIP_DEBUGF(ICMP_DEBUG, ("\n"));

  icmphdr = (struct icmp_echo_hdr *)q->payload;
 8011cf0:	69fb      	ldr	r3, [r7, #28]
 8011cf2:	685b      	ldr	r3, [r3, #4]
 8011cf4:	617b      	str	r3, [r7, #20]
  icmphdr->type = type;
 8011cf6:	697b      	ldr	r3, [r7, #20]
 8011cf8:	78fa      	ldrb	r2, [r7, #3]
 8011cfa:	701a      	strb	r2, [r3, #0]
  icmphdr->code = code;
 8011cfc:	697b      	ldr	r3, [r7, #20]
 8011cfe:	78ba      	ldrb	r2, [r7, #2]
 8011d00:	705a      	strb	r2, [r3, #1]
  icmphdr->id = 0;
 8011d02:	697b      	ldr	r3, [r7, #20]
 8011d04:	2200      	movs	r2, #0
 8011d06:	711a      	strb	r2, [r3, #4]
 8011d08:	2200      	movs	r2, #0
 8011d0a:	715a      	strb	r2, [r3, #5]
  icmphdr->seqno = 0;
 8011d0c:	697b      	ldr	r3, [r7, #20]
 8011d0e:	2200      	movs	r2, #0
 8011d10:	719a      	strb	r2, [r3, #6]
 8011d12:	2200      	movs	r2, #0
 8011d14:	71da      	strb	r2, [r3, #7]

  /* copy fields from original packet */
  SMEMCPY((u8_t *)q->payload + sizeof(struct icmp_echo_hdr), (u8_t *)p->payload,
 8011d16:	69fb      	ldr	r3, [r7, #28]
 8011d18:	685b      	ldr	r3, [r3, #4]
 8011d1a:	f103 0008 	add.w	r0, r3, #8
 8011d1e:	687b      	ldr	r3, [r7, #4]
 8011d20:	685b      	ldr	r3, [r3, #4]
 8011d22:	221c      	movs	r2, #28
 8011d24:	4619      	mov	r1, r3
 8011d26:	f001 fd74 	bl	8013812 <memcpy>
          IP_HLEN + ICMP_DEST_UNREACH_DATASIZE);

  ip4_addr_copy(iphdr_src, iphdr->src);
 8011d2a:	69bb      	ldr	r3, [r7, #24]
 8011d2c:	68db      	ldr	r3, [r3, #12]
 8011d2e:	60fb      	str	r3, [r7, #12]
    ip4_addr_t iphdr_dst;
    ip4_addr_copy(iphdr_dst, iphdr->dest);
    netif = ip4_route_src(&iphdr_dst, &iphdr_src);
  }
#else
  netif = ip4_route(&iphdr_src);
 8011d30:	f107 030c 	add.w	r3, r7, #12
 8011d34:	4618      	mov	r0, r3
 8011d36:	f000 f82f 	bl	8011d98 <ip4_route>
 8011d3a:	6138      	str	r0, [r7, #16]
#endif
  if (netif != NULL) {
 8011d3c:	693b      	ldr	r3, [r7, #16]
 8011d3e:	2b00      	cmp	r3, #0
 8011d40:	d019      	beq.n	8011d76 <icmp_send_response+0xc6>
    /* calculate checksum */
    icmphdr->chksum = 0;
 8011d42:	697b      	ldr	r3, [r7, #20]
 8011d44:	2200      	movs	r2, #0
 8011d46:	709a      	strb	r2, [r3, #2]
 8011d48:	2200      	movs	r2, #0
 8011d4a:	70da      	strb	r2, [r3, #3]
#if CHECKSUM_GEN_ICMP
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_ICMP) {
      icmphdr->chksum = inet_chksum(icmphdr, q->len);
    }
#endif
    ICMP_STATS_INC(icmp.xmit);
 8011d4c:	4b11      	ldr	r3, [pc, #68]	; (8011d94 <icmp_send_response+0xe4>)
 8011d4e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8011d52:	3301      	adds	r3, #1
 8011d54:	b29a      	uxth	r2, r3
 8011d56:	4b0f      	ldr	r3, [pc, #60]	; (8011d94 <icmp_send_response+0xe4>)
 8011d58:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
    ip4_output_if(q, NULL, &iphdr_src, ICMP_TTL, 0, IP_PROTO_ICMP, netif);
 8011d5c:	f107 020c 	add.w	r2, r7, #12
 8011d60:	693b      	ldr	r3, [r7, #16]
 8011d62:	9302      	str	r3, [sp, #8]
 8011d64:	2301      	movs	r3, #1
 8011d66:	9301      	str	r3, [sp, #4]
 8011d68:	2300      	movs	r3, #0
 8011d6a:	9300      	str	r3, [sp, #0]
 8011d6c:	23ff      	movs	r3, #255	; 0xff
 8011d6e:	2100      	movs	r1, #0
 8011d70:	69f8      	ldr	r0, [r7, #28]
 8011d72:	f000 fa27 	bl	80121c4 <ip4_output_if>
  }
  pbuf_free(q);
 8011d76:	69f8      	ldr	r0, [r7, #28]
 8011d78:	f7f8 fb44 	bl	800a404 <pbuf_free>
 8011d7c:	e000      	b.n	8011d80 <icmp_send_response+0xd0>
    return;
 8011d7e:	bf00      	nop
}
 8011d80:	3720      	adds	r7, #32
 8011d82:	46bd      	mov	sp, r7
 8011d84:	bd80      	pop	{r7, pc}
 8011d86:	bf00      	nop
 8011d88:	08016f08 	.word	0x08016f08
 8011d8c:	08016fd4 	.word	0x08016fd4
 8011d90:	08016f78 	.word	0x08016f78
 8011d94:	2000c64c 	.word	0x2000c64c

08011d98 <ip4_route>:
 * @param dest the destination IP address for which to find the route
 * @return the netif on which to send to reach dest
 */
struct netif *
ip4_route(const ip4_addr_t *dest)
{
 8011d98:	b480      	push	{r7}
 8011d9a:	b085      	sub	sp, #20
 8011d9c:	af00      	add	r7, sp, #0
 8011d9e:	6078      	str	r0, [r7, #4]

  /* bug #54569: in case LWIP_SINGLE_NETIF=1 and LWIP_DEBUGF() disabled, the following loop is optimized away */
  LWIP_UNUSED_ARG(dest);

  /* iterate through netifs */
  NETIF_FOREACH(netif) {
 8011da0:	4b37      	ldr	r3, [pc, #220]	; (8011e80 <ip4_route+0xe8>)
 8011da2:	681b      	ldr	r3, [r3, #0]
 8011da4:	60fb      	str	r3, [r7, #12]
 8011da6:	e036      	b.n	8011e16 <ip4_route+0x7e>
    /* is the netif up, does it have a link and a valid address? */
    if (netif_is_up(netif) && netif_is_link_up(netif) && !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 8011da8:	68fb      	ldr	r3, [r7, #12]
 8011daa:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8011dae:	f003 0301 	and.w	r3, r3, #1
 8011db2:	b2db      	uxtb	r3, r3
 8011db4:	2b00      	cmp	r3, #0
 8011db6:	d02b      	beq.n	8011e10 <ip4_route+0x78>
 8011db8:	68fb      	ldr	r3, [r7, #12]
 8011dba:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8011dbe:	089b      	lsrs	r3, r3, #2
 8011dc0:	f003 0301 	and.w	r3, r3, #1
 8011dc4:	b2db      	uxtb	r3, r3
 8011dc6:	2b00      	cmp	r3, #0
 8011dc8:	d022      	beq.n	8011e10 <ip4_route+0x78>
 8011dca:	68fb      	ldr	r3, [r7, #12]
 8011dcc:	3304      	adds	r3, #4
 8011dce:	681b      	ldr	r3, [r3, #0]
 8011dd0:	2b00      	cmp	r3, #0
 8011dd2:	d01d      	beq.n	8011e10 <ip4_route+0x78>
      /* network mask matches? */
      if (ip4_addr_netcmp(dest, netif_ip4_addr(netif), netif_ip4_netmask(netif))) {
 8011dd4:	687b      	ldr	r3, [r7, #4]
 8011dd6:	681a      	ldr	r2, [r3, #0]
 8011dd8:	68fb      	ldr	r3, [r7, #12]
 8011dda:	3304      	adds	r3, #4
 8011ddc:	681b      	ldr	r3, [r3, #0]
 8011dde:	405a      	eors	r2, r3
 8011de0:	68fb      	ldr	r3, [r7, #12]
 8011de2:	3308      	adds	r3, #8
 8011de4:	681b      	ldr	r3, [r3, #0]
 8011de6:	4013      	ands	r3, r2
 8011de8:	2b00      	cmp	r3, #0
 8011dea:	d101      	bne.n	8011df0 <ip4_route+0x58>
        /* return netif on which to forward IP packet */
        return netif;
 8011dec:	68fb      	ldr	r3, [r7, #12]
 8011dee:	e040      	b.n	8011e72 <ip4_route+0xda>
      }
      /* gateway matches on a non broadcast interface? (i.e. peer in a point to point interface) */
      if (((netif->flags & NETIF_FLAG_BROADCAST) == 0) && ip4_addr_cmp(dest, netif_ip4_gw(netif))) {
 8011df0:	68fb      	ldr	r3, [r7, #12]
 8011df2:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8011df6:	f003 0302 	and.w	r3, r3, #2
 8011dfa:	2b00      	cmp	r3, #0
 8011dfc:	d108      	bne.n	8011e10 <ip4_route+0x78>
 8011dfe:	687b      	ldr	r3, [r7, #4]
 8011e00:	681a      	ldr	r2, [r3, #0]
 8011e02:	68fb      	ldr	r3, [r7, #12]
 8011e04:	330c      	adds	r3, #12
 8011e06:	681b      	ldr	r3, [r3, #0]
 8011e08:	429a      	cmp	r2, r3
 8011e0a:	d101      	bne.n	8011e10 <ip4_route+0x78>
        /* return netif on which to forward IP packet */
        return netif;
 8011e0c:	68fb      	ldr	r3, [r7, #12]
 8011e0e:	e030      	b.n	8011e72 <ip4_route+0xda>
  NETIF_FOREACH(netif) {
 8011e10:	68fb      	ldr	r3, [r7, #12]
 8011e12:	681b      	ldr	r3, [r3, #0]
 8011e14:	60fb      	str	r3, [r7, #12]
 8011e16:	68fb      	ldr	r3, [r7, #12]
 8011e18:	2b00      	cmp	r3, #0
 8011e1a:	d1c5      	bne.n	8011da8 <ip4_route+0x10>
    return netif;
  }
#endif
#endif /* !LWIP_SINGLE_NETIF */

  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 8011e1c:	4b19      	ldr	r3, [pc, #100]	; (8011e84 <ip4_route+0xec>)
 8011e1e:	681b      	ldr	r3, [r3, #0]
 8011e20:	2b00      	cmp	r3, #0
 8011e22:	d01a      	beq.n	8011e5a <ip4_route+0xc2>
 8011e24:	4b17      	ldr	r3, [pc, #92]	; (8011e84 <ip4_route+0xec>)
 8011e26:	681b      	ldr	r3, [r3, #0]
 8011e28:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8011e2c:	f003 0301 	and.w	r3, r3, #1
 8011e30:	2b00      	cmp	r3, #0
 8011e32:	d012      	beq.n	8011e5a <ip4_route+0xc2>
 8011e34:	4b13      	ldr	r3, [pc, #76]	; (8011e84 <ip4_route+0xec>)
 8011e36:	681b      	ldr	r3, [r3, #0]
 8011e38:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8011e3c:	f003 0304 	and.w	r3, r3, #4
 8011e40:	2b00      	cmp	r3, #0
 8011e42:	d00a      	beq.n	8011e5a <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 8011e44:	4b0f      	ldr	r3, [pc, #60]	; (8011e84 <ip4_route+0xec>)
 8011e46:	681b      	ldr	r3, [r3, #0]
 8011e48:	3304      	adds	r3, #4
 8011e4a:	681b      	ldr	r3, [r3, #0]
  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 8011e4c:	2b00      	cmp	r3, #0
 8011e4e:	d004      	beq.n	8011e5a <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 8011e50:	687b      	ldr	r3, [r7, #4]
 8011e52:	681b      	ldr	r3, [r3, #0]
 8011e54:	b2db      	uxtb	r3, r3
 8011e56:	2b7f      	cmp	r3, #127	; 0x7f
 8011e58:	d109      	bne.n	8011e6e <ip4_route+0xd6>
    /* No matching netif found and default netif is not usable.
       If this is not good enough for you, use LWIP_HOOK_IP4_ROUTE() */
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_route: No route to %"U16_F".%"U16_F".%"U16_F".%"U16_F"\n",
                ip4_addr1_16(dest), ip4_addr2_16(dest), ip4_addr3_16(dest), ip4_addr4_16(dest)));
    IP_STATS_INC(ip.rterr);
 8011e5a:	4b0b      	ldr	r3, [pc, #44]	; (8011e88 <ip4_route+0xf0>)
 8011e5c:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8011e60:	3301      	adds	r3, #1
 8011e62:	b29a      	uxth	r2, r3
 8011e64:	4b08      	ldr	r3, [pc, #32]	; (8011e88 <ip4_route+0xf0>)
 8011e66:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    MIB2_STATS_INC(mib2.ipoutnoroutes);
    return NULL;
 8011e6a:	2300      	movs	r3, #0
 8011e6c:	e001      	b.n	8011e72 <ip4_route+0xda>
  }

  return netif_default;
 8011e6e:	4b05      	ldr	r3, [pc, #20]	; (8011e84 <ip4_route+0xec>)
 8011e70:	681b      	ldr	r3, [r3, #0]
}
 8011e72:	4618      	mov	r0, r3
 8011e74:	3714      	adds	r7, #20
 8011e76:	46bd      	mov	sp, r7
 8011e78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011e7c:	4770      	bx	lr
 8011e7e:	bf00      	nop
 8011e80:	2000c640 	.word	0x2000c640
 8011e84:	2000c644 	.word	0x2000c644
 8011e88:	2000c64c 	.word	0x2000c64c

08011e8c <ip4_input_accept>:
#endif /* IP_FORWARD */

/** Return true if the current input packet should be accepted on this netif */
static int
ip4_input_accept(struct netif *netif)
{
 8011e8c:	b580      	push	{r7, lr}
 8011e8e:	b082      	sub	sp, #8
 8011e90:	af00      	add	r7, sp, #0
 8011e92:	6078      	str	r0, [r7, #4]
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(netif_ip4_addr(netif)) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ~ip4_addr_get_u32(netif_ip4_netmask(netif))));

  /* interface is up and configured? */
  if ((netif_is_up(netif)) && (!ip4_addr_isany_val(*netif_ip4_addr(netif)))) {
 8011e94:	687b      	ldr	r3, [r7, #4]
 8011e96:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8011e9a:	f003 0301 	and.w	r3, r3, #1
 8011e9e:	b2db      	uxtb	r3, r3
 8011ea0:	2b00      	cmp	r3, #0
 8011ea2:	d016      	beq.n	8011ed2 <ip4_input_accept+0x46>
 8011ea4:	687b      	ldr	r3, [r7, #4]
 8011ea6:	3304      	adds	r3, #4
 8011ea8:	681b      	ldr	r3, [r3, #0]
 8011eaa:	2b00      	cmp	r3, #0
 8011eac:	d011      	beq.n	8011ed2 <ip4_input_accept+0x46>
    /* unicast to this interface address? */
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 8011eae:	4b0b      	ldr	r3, [pc, #44]	; (8011edc <ip4_input_accept+0x50>)
 8011eb0:	695a      	ldr	r2, [r3, #20]
 8011eb2:	687b      	ldr	r3, [r7, #4]
 8011eb4:	3304      	adds	r3, #4
 8011eb6:	681b      	ldr	r3, [r3, #0]
 8011eb8:	429a      	cmp	r2, r3
 8011eba:	d008      	beq.n	8011ece <ip4_input_accept+0x42>
        /* or broadcast on this interface network address? */
        ip4_addr_isbroadcast(ip4_current_dest_addr(), netif)
 8011ebc:	4b07      	ldr	r3, [pc, #28]	; (8011edc <ip4_input_accept+0x50>)
 8011ebe:	695b      	ldr	r3, [r3, #20]
 8011ec0:	6879      	ldr	r1, [r7, #4]
 8011ec2:	4618      	mov	r0, r3
 8011ec4:	f000 fa70 	bl	80123a8 <ip4_addr_isbroadcast_u32>
 8011ec8:	4603      	mov	r3, r0
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 8011eca:	2b00      	cmp	r3, #0
 8011ecc:	d001      	beq.n	8011ed2 <ip4_input_accept+0x46>
#endif /* LWIP_NETIF_LOOPBACK && !LWIP_HAVE_LOOPIF */
       ) {
      LWIP_DEBUGF(IP_DEBUG, ("ip4_input: packet accepted on interface %c%c\n",
                             netif->name[0], netif->name[1]));
      /* accept on this netif */
      return 1;
 8011ece:	2301      	movs	r3, #1
 8011ed0:	e000      	b.n	8011ed4 <ip4_input_accept+0x48>
      /* accept on this netif */
      return 1;
    }
#endif /* LWIP_AUTOIP */
  }
  return 0;
 8011ed2:	2300      	movs	r3, #0
}
 8011ed4:	4618      	mov	r0, r3
 8011ed6:	3708      	adds	r7, #8
 8011ed8:	46bd      	mov	sp, r7
 8011eda:	bd80      	pop	{r7, pc}
 8011edc:	20008e5c 	.word	0x20008e5c

08011ee0 <ip4_input>:
 * @return ERR_OK if the packet was processed (could return ERR_* if it wasn't
 *         processed, but currently always returns ERR_OK)
 */
err_t
ip4_input(struct pbuf *p, struct netif *inp)
{
 8011ee0:	b580      	push	{r7, lr}
 8011ee2:	b086      	sub	sp, #24
 8011ee4:	af00      	add	r7, sp, #0
 8011ee6:	6078      	str	r0, [r7, #4]
 8011ee8:	6039      	str	r1, [r7, #0]
  raw_input_state_t raw_status;
#endif /* LWIP_RAW */

  LWIP_ASSERT_CORE_LOCKED();

  IP_STATS_INC(ip.recv);
 8011eea:	4b8f      	ldr	r3, [pc, #572]	; (8012128 <ip4_input+0x248>)
 8011eec:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 8011ef0:	3301      	adds	r3, #1
 8011ef2:	b29a      	uxth	r2, r3
 8011ef4:	4b8c      	ldr	r3, [pc, #560]	; (8012128 <ip4_input+0x248>)
 8011ef6:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
  MIB2_STATS_INC(mib2.ipinreceives);

  /* identify the IP header */
  iphdr = (struct ip_hdr *)p->payload;
 8011efa:	687b      	ldr	r3, [r7, #4]
 8011efc:	685b      	ldr	r3, [r3, #4]
 8011efe:	617b      	str	r3, [r7, #20]
  if (IPH_V(iphdr) != 4) {
 8011f00:	697b      	ldr	r3, [r7, #20]
 8011f02:	781b      	ldrb	r3, [r3, #0]
 8011f04:	091b      	lsrs	r3, r3, #4
 8011f06:	b2db      	uxtb	r3, r3
 8011f08:	2b04      	cmp	r3, #4
 8011f0a:	d014      	beq.n	8011f36 <ip4_input+0x56>
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_WARNING, ("IP packet dropped due to bad version number %"U16_F"\n", (u16_t)IPH_V(iphdr)));
    ip4_debug_print(p);
    pbuf_free(p);
 8011f0c:	6878      	ldr	r0, [r7, #4]
 8011f0e:	f7f8 fa79 	bl	800a404 <pbuf_free>
    IP_STATS_INC(ip.err);
 8011f12:	4b85      	ldr	r3, [pc, #532]	; (8012128 <ip4_input+0x248>)
 8011f14:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8011f18:	3301      	adds	r3, #1
 8011f1a:	b29a      	uxth	r2, r3
 8011f1c:	4b82      	ldr	r3, [pc, #520]	; (8012128 <ip4_input+0x248>)
 8011f1e:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    IP_STATS_INC(ip.drop);
 8011f22:	4b81      	ldr	r3, [pc, #516]	; (8012128 <ip4_input+0x248>)
 8011f24:	f8b3 304e 	ldrh.w	r3, [r3, #78]	; 0x4e
 8011f28:	3301      	adds	r3, #1
 8011f2a:	b29a      	uxth	r2, r3
 8011f2c:	4b7e      	ldr	r3, [pc, #504]	; (8012128 <ip4_input+0x248>)
 8011f2e:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
    MIB2_STATS_INC(mib2.ipinhdrerrors);
    return ERR_OK;
 8011f32:	2300      	movs	r3, #0
 8011f34:	e13e      	b.n	80121b4 <ip4_input+0x2d4>
    return ERR_OK;
  }
#endif

  /* obtain IP header length in bytes */
  iphdr_hlen = IPH_HL_BYTES(iphdr);
 8011f36:	697b      	ldr	r3, [r7, #20]
 8011f38:	781b      	ldrb	r3, [r3, #0]
 8011f3a:	f003 030f 	and.w	r3, r3, #15
 8011f3e:	b2db      	uxtb	r3, r3
 8011f40:	009b      	lsls	r3, r3, #2
 8011f42:	b2db      	uxtb	r3, r3
 8011f44:	81fb      	strh	r3, [r7, #14]
  /* obtain ip length in bytes */
  iphdr_len = lwip_ntohs(IPH_LEN(iphdr));
 8011f46:	697b      	ldr	r3, [r7, #20]
 8011f48:	885b      	ldrh	r3, [r3, #2]
 8011f4a:	b29b      	uxth	r3, r3
 8011f4c:	4618      	mov	r0, r3
 8011f4e:	f7f6 fd97 	bl	8008a80 <lwip_htons>
 8011f52:	4603      	mov	r3, r0
 8011f54:	81bb      	strh	r3, [r7, #12]

  /* Trim pbuf. This is especially required for packets < 60 bytes. */
  if (iphdr_len < p->tot_len) {
 8011f56:	687b      	ldr	r3, [r7, #4]
 8011f58:	891b      	ldrh	r3, [r3, #8]
 8011f5a:	89ba      	ldrh	r2, [r7, #12]
 8011f5c:	429a      	cmp	r2, r3
 8011f5e:	d204      	bcs.n	8011f6a <ip4_input+0x8a>
    pbuf_realloc(p, iphdr_len);
 8011f60:	89bb      	ldrh	r3, [r7, #12]
 8011f62:	4619      	mov	r1, r3
 8011f64:	6878      	ldr	r0, [r7, #4]
 8011f66:	f7f8 f8c7 	bl	800a0f8 <pbuf_realloc>
  }

  /* header length exceeds first pbuf length, or ip length exceeds total pbuf length? */
  if ((iphdr_hlen > p->len) || (iphdr_len > p->tot_len) || (iphdr_hlen < IP_HLEN)) {
 8011f6a:	687b      	ldr	r3, [r7, #4]
 8011f6c:	895b      	ldrh	r3, [r3, #10]
 8011f6e:	89fa      	ldrh	r2, [r7, #14]
 8011f70:	429a      	cmp	r2, r3
 8011f72:	d807      	bhi.n	8011f84 <ip4_input+0xa4>
 8011f74:	687b      	ldr	r3, [r7, #4]
 8011f76:	891b      	ldrh	r3, [r3, #8]
 8011f78:	89ba      	ldrh	r2, [r7, #12]
 8011f7a:	429a      	cmp	r2, r3
 8011f7c:	d802      	bhi.n	8011f84 <ip4_input+0xa4>
 8011f7e:	89fb      	ldrh	r3, [r7, #14]
 8011f80:	2b13      	cmp	r3, #19
 8011f82:	d814      	bhi.n	8011fae <ip4_input+0xce>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                  ("IP (len %"U16_F") is longer than pbuf (len %"U16_F"), IP packet dropped.\n",
                   iphdr_len, p->tot_len));
    }
    /* free (drop) packet pbufs */
    pbuf_free(p);
 8011f84:	6878      	ldr	r0, [r7, #4]
 8011f86:	f7f8 fa3d 	bl	800a404 <pbuf_free>
    IP_STATS_INC(ip.lenerr);
 8011f8a:	4b67      	ldr	r3, [pc, #412]	; (8012128 <ip4_input+0x248>)
 8011f8c:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8011f90:	3301      	adds	r3, #1
 8011f92:	b29a      	uxth	r2, r3
 8011f94:	4b64      	ldr	r3, [pc, #400]	; (8012128 <ip4_input+0x248>)
 8011f96:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    IP_STATS_INC(ip.drop);
 8011f9a:	4b63      	ldr	r3, [pc, #396]	; (8012128 <ip4_input+0x248>)
 8011f9c:	f8b3 304e 	ldrh.w	r3, [r3, #78]	; 0x4e
 8011fa0:	3301      	adds	r3, #1
 8011fa2:	b29a      	uxth	r2, r3
 8011fa4:	4b60      	ldr	r3, [pc, #384]	; (8012128 <ip4_input+0x248>)
 8011fa6:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
    MIB2_STATS_INC(mib2.ipindiscards);
    return ERR_OK;
 8011faa:	2300      	movs	r3, #0
 8011fac:	e102      	b.n	80121b4 <ip4_input+0x2d4>
    }
  }
#endif

  /* copy IP addresses to aligned ip_addr_t */
  ip_addr_copy_from_ip4(ip_data.current_iphdr_dest, iphdr->dest);
 8011fae:	697b      	ldr	r3, [r7, #20]
 8011fb0:	691b      	ldr	r3, [r3, #16]
 8011fb2:	4a5e      	ldr	r2, [pc, #376]	; (801212c <ip4_input+0x24c>)
 8011fb4:	6153      	str	r3, [r2, #20]
  ip_addr_copy_from_ip4(ip_data.current_iphdr_src, iphdr->src);
 8011fb6:	697b      	ldr	r3, [r7, #20]
 8011fb8:	68db      	ldr	r3, [r3, #12]
 8011fba:	4a5c      	ldr	r2, [pc, #368]	; (801212c <ip4_input+0x24c>)
 8011fbc:	6113      	str	r3, [r2, #16]

  /* match packet against an interface, i.e. is this packet for us? */
  if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8011fbe:	4b5b      	ldr	r3, [pc, #364]	; (801212c <ip4_input+0x24c>)
 8011fc0:	695b      	ldr	r3, [r3, #20]
 8011fc2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8011fc6:	2be0      	cmp	r3, #224	; 0xe0
 8011fc8:	d112      	bne.n	8011ff0 <ip4_input+0x110>
      netif = inp;
    } else {
      netif = NULL;
    }
#else /* LWIP_IGMP */
    if ((netif_is_up(inp)) && (!ip4_addr_isany_val(*netif_ip4_addr(inp)))) {
 8011fca:	683b      	ldr	r3, [r7, #0]
 8011fcc:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8011fd0:	f003 0301 	and.w	r3, r3, #1
 8011fd4:	b2db      	uxtb	r3, r3
 8011fd6:	2b00      	cmp	r3, #0
 8011fd8:	d007      	beq.n	8011fea <ip4_input+0x10a>
 8011fda:	683b      	ldr	r3, [r7, #0]
 8011fdc:	3304      	adds	r3, #4
 8011fde:	681b      	ldr	r3, [r3, #0]
 8011fe0:	2b00      	cmp	r3, #0
 8011fe2:	d002      	beq.n	8011fea <ip4_input+0x10a>
      netif = inp;
 8011fe4:	683b      	ldr	r3, [r7, #0]
 8011fe6:	613b      	str	r3, [r7, #16]
 8011fe8:	e02a      	b.n	8012040 <ip4_input+0x160>
    } else {
      netif = NULL;
 8011fea:	2300      	movs	r3, #0
 8011fec:	613b      	str	r3, [r7, #16]
 8011fee:	e027      	b.n	8012040 <ip4_input+0x160>
    }
#endif /* LWIP_IGMP */
  } else {
    /* start trying with inp. if that's not acceptable, start walking the
       list of configured netifs. */
    if (ip4_input_accept(inp)) {
 8011ff0:	6838      	ldr	r0, [r7, #0]
 8011ff2:	f7ff ff4b 	bl	8011e8c <ip4_input_accept>
 8011ff6:	4603      	mov	r3, r0
 8011ff8:	2b00      	cmp	r3, #0
 8011ffa:	d002      	beq.n	8012002 <ip4_input+0x122>
      netif = inp;
 8011ffc:	683b      	ldr	r3, [r7, #0]
 8011ffe:	613b      	str	r3, [r7, #16]
 8012000:	e01e      	b.n	8012040 <ip4_input+0x160>
    } else {
      netif = NULL;
 8012002:	2300      	movs	r3, #0
 8012004:	613b      	str	r3, [r7, #16]
#if !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF
      /* Packets sent to the loopback address must not be accepted on an
       * interface that does not have the loopback address assigned to it,
       * unless a non-loopback interface is used for loopback traffic. */
      if (!ip4_addr_isloopback(ip4_current_dest_addr()))
 8012006:	4b49      	ldr	r3, [pc, #292]	; (801212c <ip4_input+0x24c>)
 8012008:	695b      	ldr	r3, [r3, #20]
 801200a:	b2db      	uxtb	r3, r3
 801200c:	2b7f      	cmp	r3, #127	; 0x7f
 801200e:	d017      	beq.n	8012040 <ip4_input+0x160>
#endif /* !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF */
      {
#if !LWIP_SINGLE_NETIF
        NETIF_FOREACH(netif) {
 8012010:	4b47      	ldr	r3, [pc, #284]	; (8012130 <ip4_input+0x250>)
 8012012:	681b      	ldr	r3, [r3, #0]
 8012014:	613b      	str	r3, [r7, #16]
 8012016:	e00e      	b.n	8012036 <ip4_input+0x156>
          if (netif == inp) {
 8012018:	693a      	ldr	r2, [r7, #16]
 801201a:	683b      	ldr	r3, [r7, #0]
 801201c:	429a      	cmp	r2, r3
 801201e:	d006      	beq.n	801202e <ip4_input+0x14e>
            /* we checked that before already */
            continue;
          }
          if (ip4_input_accept(netif)) {
 8012020:	6938      	ldr	r0, [r7, #16]
 8012022:	f7ff ff33 	bl	8011e8c <ip4_input_accept>
 8012026:	4603      	mov	r3, r0
 8012028:	2b00      	cmp	r3, #0
 801202a:	d108      	bne.n	801203e <ip4_input+0x15e>
 801202c:	e000      	b.n	8012030 <ip4_input+0x150>
            continue;
 801202e:	bf00      	nop
        NETIF_FOREACH(netif) {
 8012030:	693b      	ldr	r3, [r7, #16]
 8012032:	681b      	ldr	r3, [r3, #0]
 8012034:	613b      	str	r3, [r7, #16]
 8012036:	693b      	ldr	r3, [r7, #16]
 8012038:	2b00      	cmp	r3, #0
 801203a:	d1ed      	bne.n	8012018 <ip4_input+0x138>
 801203c:	e000      	b.n	8012040 <ip4_input+0x160>
            break;
 801203e:	bf00      	nop
      && !ip4_addr_isany_val(*ip4_current_src_addr())
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */
     )
#endif /* LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING */
  {
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 8012040:	4b3a      	ldr	r3, [pc, #232]	; (801212c <ip4_input+0x24c>)
 8012042:	691b      	ldr	r3, [r3, #16]
 8012044:	6839      	ldr	r1, [r7, #0]
 8012046:	4618      	mov	r0, r3
 8012048:	f000 f9ae 	bl	80123a8 <ip4_addr_isbroadcast_u32>
 801204c:	4603      	mov	r3, r0
 801204e:	2b00      	cmp	r3, #0
 8012050:	d105      	bne.n	801205e <ip4_input+0x17e>
        (ip4_addr_ismulticast(ip4_current_src_addr()))) {
 8012052:	4b36      	ldr	r3, [pc, #216]	; (801212c <ip4_input+0x24c>)
 8012054:	691b      	ldr	r3, [r3, #16]
 8012056:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 801205a:	2be0      	cmp	r3, #224	; 0xe0
 801205c:	d10c      	bne.n	8012078 <ip4_input+0x198>
      /* packet source is not valid */
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("ip4_input: packet source is not valid.\n"));
      /* free (drop) packet pbufs */
      pbuf_free(p);
 801205e:	6878      	ldr	r0, [r7, #4]
 8012060:	f7f8 f9d0 	bl	800a404 <pbuf_free>
      IP_STATS_INC(ip.drop);
 8012064:	4b30      	ldr	r3, [pc, #192]	; (8012128 <ip4_input+0x248>)
 8012066:	f8b3 304e 	ldrh.w	r3, [r3, #78]	; 0x4e
 801206a:	3301      	adds	r3, #1
 801206c:	b29a      	uxth	r2, r3
 801206e:	4b2e      	ldr	r3, [pc, #184]	; (8012128 <ip4_input+0x248>)
 8012070:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
      return ERR_OK;
 8012074:	2300      	movs	r3, #0
 8012076:	e09d      	b.n	80121b4 <ip4_input+0x2d4>
    }
  }

  /* packet not for us? */
  if (netif == NULL) {
 8012078:	693b      	ldr	r3, [r7, #16]
 801207a:	2b00      	cmp	r3, #0
 801207c:	d10c      	bne.n	8012098 <ip4_input+0x1b8>
      /* try to forward IP packet on (other) interfaces */
      ip4_forward(p, (struct ip_hdr *)p->payload, inp);
    } else
#endif /* IP_FORWARD */
    {
      IP_STATS_INC(ip.drop);
 801207e:	4b2a      	ldr	r3, [pc, #168]	; (8012128 <ip4_input+0x248>)
 8012080:	f8b3 304e 	ldrh.w	r3, [r3, #78]	; 0x4e
 8012084:	3301      	adds	r3, #1
 8012086:	b29a      	uxth	r2, r3
 8012088:	4b27      	ldr	r3, [pc, #156]	; (8012128 <ip4_input+0x248>)
 801208a:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
    }
    pbuf_free(p);
 801208e:	6878      	ldr	r0, [r7, #4]
 8012090:	f7f8 f9b8 	bl	800a404 <pbuf_free>
    return ERR_OK;
 8012094:	2300      	movs	r3, #0
 8012096:	e08d      	b.n	80121b4 <ip4_input+0x2d4>
  }
  /* packet consists of multiple fragments? */
  if ((IPH_OFFSET(iphdr) & PP_HTONS(IP_OFFMASK | IP_MF)) != 0) {
 8012098:	697b      	ldr	r3, [r7, #20]
 801209a:	88db      	ldrh	r3, [r3, #6]
 801209c:	b29b      	uxth	r3, r3
 801209e:	461a      	mov	r2, r3
 80120a0:	f64f 733f 	movw	r3, #65343	; 0xff3f
 80120a4:	4013      	ands	r3, r2
 80120a6:	2b00      	cmp	r3, #0
 80120a8:	d00b      	beq.n	80120c2 <ip4_input+0x1e2>
#if IP_REASSEMBLY /* packet fragment reassembly code present? */
    LWIP_DEBUGF(IP_DEBUG, ("IP packet is a fragment (id=0x%04"X16_F" tot_len=%"U16_F" len=%"U16_F" MF=%"U16_F" offset=%"U16_F"), calling ip4_reass()\n",
                           lwip_ntohs(IPH_ID(iphdr)), p->tot_len, lwip_ntohs(IPH_LEN(iphdr)), (u16_t)!!(IPH_OFFSET(iphdr) & PP_HTONS(IP_MF)), (u16_t)((lwip_ntohs(IPH_OFFSET(iphdr)) & IP_OFFMASK) * 8)));
    /* reassemble the packet*/
    p = ip4_reass(p);
 80120aa:	6878      	ldr	r0, [r7, #4]
 80120ac:	f000 fcca 	bl	8012a44 <ip4_reass>
 80120b0:	6078      	str	r0, [r7, #4]
    /* packet not fully reassembled yet? */
    if (p == NULL) {
 80120b2:	687b      	ldr	r3, [r7, #4]
 80120b4:	2b00      	cmp	r3, #0
 80120b6:	d101      	bne.n	80120bc <ip4_input+0x1dc>
      return ERR_OK;
 80120b8:	2300      	movs	r3, #0
 80120ba:	e07b      	b.n	80121b4 <ip4_input+0x2d4>
    }
    iphdr = (const struct ip_hdr *)p->payload;
 80120bc:	687b      	ldr	r3, [r7, #4]
 80120be:	685b      	ldr	r3, [r3, #4]
 80120c0:	617b      	str	r3, [r7, #20]
  /* send to upper layers */
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: \n"));
  ip4_debug_print(p);
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: p->len %"U16_F" p->tot_len %"U16_F"\n", p->len, p->tot_len));

  ip_data.current_netif = netif;
 80120c2:	4a1a      	ldr	r2, [pc, #104]	; (801212c <ip4_input+0x24c>)
 80120c4:	693b      	ldr	r3, [r7, #16]
 80120c6:	6013      	str	r3, [r2, #0]
  ip_data.current_input_netif = inp;
 80120c8:	4a18      	ldr	r2, [pc, #96]	; (801212c <ip4_input+0x24c>)
 80120ca:	683b      	ldr	r3, [r7, #0]
 80120cc:	6053      	str	r3, [r2, #4]
  ip_data.current_ip4_header = iphdr;
 80120ce:	4a17      	ldr	r2, [pc, #92]	; (801212c <ip4_input+0x24c>)
 80120d0:	697b      	ldr	r3, [r7, #20]
 80120d2:	6093      	str	r3, [r2, #8]
  ip_data.current_ip_header_tot_len = IPH_HL_BYTES(iphdr);
 80120d4:	697b      	ldr	r3, [r7, #20]
 80120d6:	781b      	ldrb	r3, [r3, #0]
 80120d8:	f003 030f 	and.w	r3, r3, #15
 80120dc:	b2db      	uxtb	r3, r3
 80120de:	009b      	lsls	r3, r3, #2
 80120e0:	b2db      	uxtb	r3, r3
 80120e2:	b29a      	uxth	r2, r3
 80120e4:	4b11      	ldr	r3, [pc, #68]	; (801212c <ip4_input+0x24c>)
 80120e6:	819a      	strh	r2, [r3, #12]
  /* raw input did not eat the packet? */
  raw_status = raw_input(p, inp);
  if (raw_status != RAW_INPUT_EATEN)
#endif /* LWIP_RAW */
  {
    pbuf_remove_header(p, iphdr_hlen); /* Move to payload, no check necessary. */
 80120e8:	89fb      	ldrh	r3, [r7, #14]
 80120ea:	4619      	mov	r1, r3
 80120ec:	6878      	ldr	r0, [r7, #4]
 80120ee:	f7f8 f903 	bl	800a2f8 <pbuf_remove_header>

    switch (IPH_PROTO(iphdr)) {
 80120f2:	697b      	ldr	r3, [r7, #20]
 80120f4:	7a5b      	ldrb	r3, [r3, #9]
 80120f6:	2b11      	cmp	r3, #17
 80120f8:	d006      	beq.n	8012108 <ip4_input+0x228>
 80120fa:	2b11      	cmp	r3, #17
 80120fc:	dc1a      	bgt.n	8012134 <ip4_input+0x254>
 80120fe:	2b01      	cmp	r3, #1
 8012100:	d00c      	beq.n	801211c <ip4_input+0x23c>
 8012102:	2b06      	cmp	r3, #6
 8012104:	d005      	beq.n	8012112 <ip4_input+0x232>
 8012106:	e015      	b.n	8012134 <ip4_input+0x254>
      case IP_PROTO_UDP:
#if LWIP_UDPLITE
      case IP_PROTO_UDPLITE:
#endif /* LWIP_UDPLITE */
        MIB2_STATS_INC(mib2.ipindelivers);
        udp_input(p, inp);
 8012108:	6839      	ldr	r1, [r7, #0]
 801210a:	6878      	ldr	r0, [r7, #4]
 801210c:	f7fe f87a 	bl	8010204 <udp_input>
        break;
 8012110:	e03d      	b.n	801218e <ip4_input+0x2ae>
#endif /* LWIP_UDP */
#if LWIP_TCP
      case IP_PROTO_TCP:
        MIB2_STATS_INC(mib2.ipindelivers);
        tcp_input(p, inp);
 8012112:	6839      	ldr	r1, [r7, #0]
 8012114:	6878      	ldr	r0, [r7, #4]
 8012116:	f7f9 ffeb 	bl	800c0f0 <tcp_input>
        break;
 801211a:	e038      	b.n	801218e <ip4_input+0x2ae>
#endif /* LWIP_TCP */
#if LWIP_ICMP
      case IP_PROTO_ICMP:
        MIB2_STATS_INC(mib2.ipindelivers);
        icmp_input(p, inp);
 801211c:	6839      	ldr	r1, [r7, #0]
 801211e:	6878      	ldr	r0, [r7, #4]
 8012120:	f7ff fc6e 	bl	8011a00 <icmp_input>
        break;
 8012124:	e033      	b.n	801218e <ip4_input+0x2ae>
 8012126:	bf00      	nop
 8012128:	2000c64c 	.word	0x2000c64c
 801212c:	20008e5c 	.word	0x20008e5c
 8012130:	2000c640 	.word	0x2000c640
        } else
#endif /* LWIP_RAW */
        {
#if LWIP_ICMP
          /* send ICMP destination protocol unreachable unless is was a broadcast */
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 8012134:	4b21      	ldr	r3, [pc, #132]	; (80121bc <ip4_input+0x2dc>)
 8012136:	695b      	ldr	r3, [r3, #20]
 8012138:	6939      	ldr	r1, [r7, #16]
 801213a:	4618      	mov	r0, r3
 801213c:	f000 f934 	bl	80123a8 <ip4_addr_isbroadcast_u32>
 8012140:	4603      	mov	r3, r0
 8012142:	2b00      	cmp	r3, #0
 8012144:	d10f      	bne.n	8012166 <ip4_input+0x286>
              !ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8012146:	4b1d      	ldr	r3, [pc, #116]	; (80121bc <ip4_input+0x2dc>)
 8012148:	695b      	ldr	r3, [r3, #20]
 801214a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 801214e:	2be0      	cmp	r3, #224	; 0xe0
 8012150:	d009      	beq.n	8012166 <ip4_input+0x286>
            pbuf_header_force(p, (s16_t)iphdr_hlen); /* Move to ip header, no check necessary. */
 8012152:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8012156:	4619      	mov	r1, r3
 8012158:	6878      	ldr	r0, [r7, #4]
 801215a:	f7f8 f940 	bl	800a3de <pbuf_header_force>
            icmp_dest_unreach(p, ICMP_DUR_PROTO);
 801215e:	2102      	movs	r1, #2
 8012160:	6878      	ldr	r0, [r7, #4]
 8012162:	f7ff fd85 	bl	8011c70 <icmp_dest_unreach>
          }
#endif /* LWIP_ICMP */

          LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("Unsupported transport protocol %"U16_F"\n", (u16_t)IPH_PROTO(iphdr)));

          IP_STATS_INC(ip.proterr);
 8012166:	4b16      	ldr	r3, [pc, #88]	; (80121c0 <ip4_input+0x2e0>)
 8012168:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 801216c:	3301      	adds	r3, #1
 801216e:	b29a      	uxth	r2, r3
 8012170:	4b13      	ldr	r3, [pc, #76]	; (80121c0 <ip4_input+0x2e0>)
 8012172:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
          IP_STATS_INC(ip.drop);
 8012176:	4b12      	ldr	r3, [pc, #72]	; (80121c0 <ip4_input+0x2e0>)
 8012178:	f8b3 304e 	ldrh.w	r3, [r3, #78]	; 0x4e
 801217c:	3301      	adds	r3, #1
 801217e:	b29a      	uxth	r2, r3
 8012180:	4b0f      	ldr	r3, [pc, #60]	; (80121c0 <ip4_input+0x2e0>)
 8012182:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
          MIB2_STATS_INC(mib2.ipinunknownprotos);
        }
        pbuf_free(p);
 8012186:	6878      	ldr	r0, [r7, #4]
 8012188:	f7f8 f93c 	bl	800a404 <pbuf_free>
        break;
 801218c:	bf00      	nop
    }
  }

  /* @todo: this is not really necessary... */
  ip_data.current_netif = NULL;
 801218e:	4b0b      	ldr	r3, [pc, #44]	; (80121bc <ip4_input+0x2dc>)
 8012190:	2200      	movs	r2, #0
 8012192:	601a      	str	r2, [r3, #0]
  ip_data.current_input_netif = NULL;
 8012194:	4b09      	ldr	r3, [pc, #36]	; (80121bc <ip4_input+0x2dc>)
 8012196:	2200      	movs	r2, #0
 8012198:	605a      	str	r2, [r3, #4]
  ip_data.current_ip4_header = NULL;
 801219a:	4b08      	ldr	r3, [pc, #32]	; (80121bc <ip4_input+0x2dc>)
 801219c:	2200      	movs	r2, #0
 801219e:	609a      	str	r2, [r3, #8]
  ip_data.current_ip_header_tot_len = 0;
 80121a0:	4b06      	ldr	r3, [pc, #24]	; (80121bc <ip4_input+0x2dc>)
 80121a2:	2200      	movs	r2, #0
 80121a4:	819a      	strh	r2, [r3, #12]
  ip4_addr_set_any(ip4_current_src_addr());
 80121a6:	4b05      	ldr	r3, [pc, #20]	; (80121bc <ip4_input+0x2dc>)
 80121a8:	2200      	movs	r2, #0
 80121aa:	611a      	str	r2, [r3, #16]
  ip4_addr_set_any(ip4_current_dest_addr());
 80121ac:	4b03      	ldr	r3, [pc, #12]	; (80121bc <ip4_input+0x2dc>)
 80121ae:	2200      	movs	r2, #0
 80121b0:	615a      	str	r2, [r3, #20]

  return ERR_OK;
 80121b2:	2300      	movs	r3, #0
}
 80121b4:	4618      	mov	r0, r3
 80121b6:	3718      	adds	r7, #24
 80121b8:	46bd      	mov	sp, r7
 80121ba:	bd80      	pop	{r7, pc}
 80121bc:	20008e5c 	.word	0x20008e5c
 80121c0:	2000c64c 	.word	0x2000c64c

080121c4 <ip4_output_if>:
 */
err_t
ip4_output_if(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
              u8_t ttl, u8_t tos,
              u8_t proto, struct netif *netif)
{
 80121c4:	b580      	push	{r7, lr}
 80121c6:	b08a      	sub	sp, #40	; 0x28
 80121c8:	af04      	add	r7, sp, #16
 80121ca:	60f8      	str	r0, [r7, #12]
 80121cc:	60b9      	str	r1, [r7, #8]
 80121ce:	607a      	str	r2, [r7, #4]
 80121d0:	70fb      	strb	r3, [r7, #3]
ip4_output_if_opt(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos, u8_t proto, struct netif *netif, void *ip_options,
                  u16_t optlen)
{
#endif /* IP_OPTIONS_SEND */
  const ip4_addr_t *src_used = src;
 80121d2:	68bb      	ldr	r3, [r7, #8]
 80121d4:	617b      	str	r3, [r7, #20]
  if (dest != LWIP_IP_HDRINCL) {
 80121d6:	687b      	ldr	r3, [r7, #4]
 80121d8:	2b00      	cmp	r3, #0
 80121da:	d009      	beq.n	80121f0 <ip4_output_if+0x2c>
    if (ip4_addr_isany(src)) {
 80121dc:	68bb      	ldr	r3, [r7, #8]
 80121de:	2b00      	cmp	r3, #0
 80121e0:	d003      	beq.n	80121ea <ip4_output_if+0x26>
 80121e2:	68bb      	ldr	r3, [r7, #8]
 80121e4:	681b      	ldr	r3, [r3, #0]
 80121e6:	2b00      	cmp	r3, #0
 80121e8:	d102      	bne.n	80121f0 <ip4_output_if+0x2c>
      src_used = netif_ip4_addr(netif);
 80121ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80121ec:	3304      	adds	r3, #4
 80121ee:	617b      	str	r3, [r7, #20]

#if IP_OPTIONS_SEND
  return ip4_output_if_opt_src(p, src_used, dest, ttl, tos, proto, netif,
                               ip_options, optlen);
#else /* IP_OPTIONS_SEND */
  return ip4_output_if_src(p, src_used, dest, ttl, tos, proto, netif);
 80121f0:	78fa      	ldrb	r2, [r7, #3]
 80121f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80121f4:	9302      	str	r3, [sp, #8]
 80121f6:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80121fa:	9301      	str	r3, [sp, #4]
 80121fc:	f897 3020 	ldrb.w	r3, [r7, #32]
 8012200:	9300      	str	r3, [sp, #0]
 8012202:	4613      	mov	r3, r2
 8012204:	687a      	ldr	r2, [r7, #4]
 8012206:	6979      	ldr	r1, [r7, #20]
 8012208:	68f8      	ldr	r0, [r7, #12]
 801220a:	f000 f805 	bl	8012218 <ip4_output_if_src>
 801220e:	4603      	mov	r3, r0
#endif /* IP_OPTIONS_SEND */
}
 8012210:	4618      	mov	r0, r3
 8012212:	3718      	adds	r7, #24
 8012214:	46bd      	mov	sp, r7
 8012216:	bd80      	pop	{r7, pc}

08012218 <ip4_output_if_src>:
 */
err_t
ip4_output_if_src(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos,
                  u8_t proto, struct netif *netif)
{
 8012218:	b580      	push	{r7, lr}
 801221a:	b088      	sub	sp, #32
 801221c:	af00      	add	r7, sp, #0
 801221e:	60f8      	str	r0, [r7, #12]
 8012220:	60b9      	str	r1, [r7, #8]
 8012222:	607a      	str	r2, [r7, #4]
 8012224:	70fb      	strb	r3, [r7, #3]
#if CHECKSUM_GEN_IP_INLINE
  u32_t chk_sum = 0;
#endif /* CHECKSUM_GEN_IP_INLINE */

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
 8012226:	68fb      	ldr	r3, [r7, #12]
 8012228:	7b9b      	ldrb	r3, [r3, #14]
 801222a:	2b01      	cmp	r3, #1
 801222c:	d006      	beq.n	801223c <ip4_output_if_src+0x24>
 801222e:	4b57      	ldr	r3, [pc, #348]	; (801238c <ip4_output_if_src+0x174>)
 8012230:	f44f 7255 	mov.w	r2, #852	; 0x354
 8012234:	4956      	ldr	r1, [pc, #344]	; (8012390 <ip4_output_if_src+0x178>)
 8012236:	4857      	ldr	r0, [pc, #348]	; (8012394 <ip4_output_if_src+0x17c>)
 8012238:	f001 fb96 	bl	8013968 <iprintf>

  MIB2_STATS_INC(mib2.ipoutrequests);

  /* Should the IP header be generated or is it already included in p? */
  if (dest != LWIP_IP_HDRINCL) {
 801223c:	687b      	ldr	r3, [r7, #4]
 801223e:	2b00      	cmp	r3, #0
 8012240:	d068      	beq.n	8012314 <ip4_output_if_src+0xfc>
    u16_t ip_hlen = IP_HLEN;
 8012242:	2314      	movs	r3, #20
 8012244:	837b      	strh	r3, [r7, #26]
      }
#endif /* CHECKSUM_GEN_IP_INLINE */
    }
#endif /* IP_OPTIONS_SEND */
    /* generate IP header */
    if (pbuf_add_header(p, IP_HLEN)) {
 8012246:	2114      	movs	r1, #20
 8012248:	68f8      	ldr	r0, [r7, #12]
 801224a:	f7f8 f845 	bl	800a2d8 <pbuf_add_header>
 801224e:	4603      	mov	r3, r0
 8012250:	2b00      	cmp	r3, #0
 8012252:	d00a      	beq.n	801226a <ip4_output_if_src+0x52>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: not enough room for IP header in pbuf\n"));

      IP_STATS_INC(ip.err);
 8012254:	4b50      	ldr	r3, [pc, #320]	; (8012398 <ip4_output_if_src+0x180>)
 8012256:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 801225a:	3301      	adds	r3, #1
 801225c:	b29a      	uxth	r2, r3
 801225e:	4b4e      	ldr	r3, [pc, #312]	; (8012398 <ip4_output_if_src+0x180>)
 8012260:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 8012264:	f06f 0301 	mvn.w	r3, #1
 8012268:	e08c      	b.n	8012384 <ip4_output_if_src+0x16c>
    }

    iphdr = (struct ip_hdr *)p->payload;
 801226a:	68fb      	ldr	r3, [r7, #12]
 801226c:	685b      	ldr	r3, [r3, #4]
 801226e:	61fb      	str	r3, [r7, #28]
    LWIP_ASSERT("check that first pbuf can hold struct ip_hdr",
 8012270:	68fb      	ldr	r3, [r7, #12]
 8012272:	895b      	ldrh	r3, [r3, #10]
 8012274:	2b13      	cmp	r3, #19
 8012276:	d806      	bhi.n	8012286 <ip4_output_if_src+0x6e>
 8012278:	4b44      	ldr	r3, [pc, #272]	; (801238c <ip4_output_if_src+0x174>)
 801227a:	f44f 7262 	mov.w	r2, #904	; 0x388
 801227e:	4947      	ldr	r1, [pc, #284]	; (801239c <ip4_output_if_src+0x184>)
 8012280:	4844      	ldr	r0, [pc, #272]	; (8012394 <ip4_output_if_src+0x17c>)
 8012282:	f001 fb71 	bl	8013968 <iprintf>
                (p->len >= sizeof(struct ip_hdr)));

    IPH_TTL_SET(iphdr, ttl);
 8012286:	69fb      	ldr	r3, [r7, #28]
 8012288:	78fa      	ldrb	r2, [r7, #3]
 801228a:	721a      	strb	r2, [r3, #8]
    IPH_PROTO_SET(iphdr, proto);
 801228c:	69fb      	ldr	r3, [r7, #28]
 801228e:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 8012292:	725a      	strb	r2, [r3, #9]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(proto | (ttl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */

    /* dest cannot be NULL here */
    ip4_addr_copy(iphdr->dest, *dest);
 8012294:	687b      	ldr	r3, [r7, #4]
 8012296:	681a      	ldr	r2, [r3, #0]
 8012298:	69fb      	ldr	r3, [r7, #28]
 801229a:	611a      	str	r2, [r3, #16]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += ip4_addr_get_u32(&iphdr->dest) & 0xFFFF;
    chk_sum += ip4_addr_get_u32(&iphdr->dest) >> 16;
#endif /* CHECKSUM_GEN_IP_INLINE */

    IPH_VHL_SET(iphdr, 4, ip_hlen / 4);
 801229c:	8b7b      	ldrh	r3, [r7, #26]
 801229e:	089b      	lsrs	r3, r3, #2
 80122a0:	b29b      	uxth	r3, r3
 80122a2:	b2db      	uxtb	r3, r3
 80122a4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80122a8:	b2da      	uxtb	r2, r3
 80122aa:	69fb      	ldr	r3, [r7, #28]
 80122ac:	701a      	strb	r2, [r3, #0]
    IPH_TOS_SET(iphdr, tos);
 80122ae:	69fb      	ldr	r3, [r7, #28]
 80122b0:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 80122b4:	705a      	strb	r2, [r3, #1]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(tos | (iphdr->_v_hl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_LEN_SET(iphdr, lwip_htons(p->tot_len));
 80122b6:	68fb      	ldr	r3, [r7, #12]
 80122b8:	891b      	ldrh	r3, [r3, #8]
 80122ba:	4618      	mov	r0, r3
 80122bc:	f7f6 fbe0 	bl	8008a80 <lwip_htons>
 80122c0:	4603      	mov	r3, r0
 80122c2:	461a      	mov	r2, r3
 80122c4:	69fb      	ldr	r3, [r7, #28]
 80122c6:	805a      	strh	r2, [r3, #2]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_len;
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_OFFSET_SET(iphdr, 0);
 80122c8:	69fb      	ldr	r3, [r7, #28]
 80122ca:	2200      	movs	r2, #0
 80122cc:	719a      	strb	r2, [r3, #6]
 80122ce:	2200      	movs	r2, #0
 80122d0:	71da      	strb	r2, [r3, #7]
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
 80122d2:	4b33      	ldr	r3, [pc, #204]	; (80123a0 <ip4_output_if_src+0x188>)
 80122d4:	881b      	ldrh	r3, [r3, #0]
 80122d6:	4618      	mov	r0, r3
 80122d8:	f7f6 fbd2 	bl	8008a80 <lwip_htons>
 80122dc:	4603      	mov	r3, r0
 80122de:	461a      	mov	r2, r3
 80122e0:	69fb      	ldr	r3, [r7, #28]
 80122e2:	809a      	strh	r2, [r3, #4]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_id;
#endif /* CHECKSUM_GEN_IP_INLINE */
    ++ip_id;
 80122e4:	4b2e      	ldr	r3, [pc, #184]	; (80123a0 <ip4_output_if_src+0x188>)
 80122e6:	881b      	ldrh	r3, [r3, #0]
 80122e8:	3301      	adds	r3, #1
 80122ea:	b29a      	uxth	r2, r3
 80122ec:	4b2c      	ldr	r3, [pc, #176]	; (80123a0 <ip4_output_if_src+0x188>)
 80122ee:	801a      	strh	r2, [r3, #0]

    if (src == NULL) {
 80122f0:	68bb      	ldr	r3, [r7, #8]
 80122f2:	2b00      	cmp	r3, #0
 80122f4:	d104      	bne.n	8012300 <ip4_output_if_src+0xe8>
      ip4_addr_copy(iphdr->src, *IP4_ADDR_ANY4);
 80122f6:	4b2b      	ldr	r3, [pc, #172]	; (80123a4 <ip4_output_if_src+0x18c>)
 80122f8:	681a      	ldr	r2, [r3, #0]
 80122fa:	69fb      	ldr	r3, [r7, #28]
 80122fc:	60da      	str	r2, [r3, #12]
 80122fe:	e003      	b.n	8012308 <ip4_output_if_src+0xf0>
    } else {
      /* src cannot be NULL here */
      ip4_addr_copy(iphdr->src, *src);
 8012300:	68bb      	ldr	r3, [r7, #8]
 8012302:	681a      	ldr	r2, [r3, #0]
 8012304:	69fb      	ldr	r3, [r7, #28]
 8012306:	60da      	str	r2, [r3, #12]
    else {
      IPH_CHKSUM_SET(iphdr, 0);
    }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF*/
#else /* CHECKSUM_GEN_IP_INLINE */
    IPH_CHKSUM_SET(iphdr, 0);
 8012308:	69fb      	ldr	r3, [r7, #28]
 801230a:	2200      	movs	r2, #0
 801230c:	729a      	strb	r2, [r3, #10]
 801230e:	2200      	movs	r2, #0
 8012310:	72da      	strb	r2, [r3, #11]
 8012312:	e017      	b.n	8012344 <ip4_output_if_src+0x12c>
    }
#endif /* CHECKSUM_GEN_IP */
#endif /* CHECKSUM_GEN_IP_INLINE */
  } else {
    /* IP header already included in p */
    if (p->len < IP_HLEN) {
 8012314:	68fb      	ldr	r3, [r7, #12]
 8012316:	895b      	ldrh	r3, [r3, #10]
 8012318:	2b13      	cmp	r3, #19
 801231a:	d80a      	bhi.n	8012332 <ip4_output_if_src+0x11a>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: LWIP_IP_HDRINCL but pbuf is too short\n"));
      IP_STATS_INC(ip.err);
 801231c:	4b1e      	ldr	r3, [pc, #120]	; (8012398 <ip4_output_if_src+0x180>)
 801231e:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8012322:	3301      	adds	r3, #1
 8012324:	b29a      	uxth	r2, r3
 8012326:	4b1c      	ldr	r3, [pc, #112]	; (8012398 <ip4_output_if_src+0x180>)
 8012328:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 801232c:	f06f 0301 	mvn.w	r3, #1
 8012330:	e028      	b.n	8012384 <ip4_output_if_src+0x16c>
    }
    iphdr = (struct ip_hdr *)p->payload;
 8012332:	68fb      	ldr	r3, [r7, #12]
 8012334:	685b      	ldr	r3, [r3, #4]
 8012336:	61fb      	str	r3, [r7, #28]
    ip4_addr_copy(dest_addr, iphdr->dest);
 8012338:	69fb      	ldr	r3, [r7, #28]
 801233a:	691b      	ldr	r3, [r3, #16]
 801233c:	617b      	str	r3, [r7, #20]
    dest = &dest_addr;
 801233e:	f107 0314 	add.w	r3, r7, #20
 8012342:	607b      	str	r3, [r7, #4]
  }

  IP_STATS_INC(ip.xmit);
 8012344:	4b14      	ldr	r3, [pc, #80]	; (8012398 <ip4_output_if_src+0x180>)
 8012346:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 801234a:	3301      	adds	r3, #1
 801234c:	b29a      	uxth	r2, r3
 801234e:	4b12      	ldr	r3, [pc, #72]	; (8012398 <ip4_output_if_src+0x180>)
 8012350:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
  }
#endif /* LWIP_MULTICAST_TX_OPTIONS */
#endif /* ENABLE_LOOPBACK */
#if IP_FRAG
  /* don't fragment if interface has mtu set to 0 [loopif] */
  if (netif->mtu && (p->tot_len > netif->mtu)) {
 8012354:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012356:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8012358:	2b00      	cmp	r3, #0
 801235a:	d00c      	beq.n	8012376 <ip4_output_if_src+0x15e>
 801235c:	68fb      	ldr	r3, [r7, #12]
 801235e:	891a      	ldrh	r2, [r3, #8]
 8012360:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012362:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8012364:	429a      	cmp	r2, r3
 8012366:	d906      	bls.n	8012376 <ip4_output_if_src+0x15e>
    return ip4_frag(p, netif, dest);
 8012368:	687a      	ldr	r2, [r7, #4]
 801236a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 801236c:	68f8      	ldr	r0, [r7, #12]
 801236e:	f000 fd7b 	bl	8012e68 <ip4_frag>
 8012372:	4603      	mov	r3, r0
 8012374:	e006      	b.n	8012384 <ip4_output_if_src+0x16c>
  }
#endif /* IP_FRAG */

  LWIP_DEBUGF(IP_DEBUG, ("ip4_output_if: call netif->output()\n"));
  return netif->output(netif, p, dest);
 8012376:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012378:	695b      	ldr	r3, [r3, #20]
 801237a:	687a      	ldr	r2, [r7, #4]
 801237c:	68f9      	ldr	r1, [r7, #12]
 801237e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8012380:	4798      	blx	r3
 8012382:	4603      	mov	r3, r0
}
 8012384:	4618      	mov	r0, r3
 8012386:	3720      	adds	r7, #32
 8012388:	46bd      	mov	sp, r7
 801238a:	bd80      	pop	{r7, pc}
 801238c:	08017000 	.word	0x08017000
 8012390:	08017034 	.word	0x08017034
 8012394:	08017040 	.word	0x08017040
 8012398:	2000c64c 	.word	0x2000c64c
 801239c:	08017068 	.word	0x08017068
 80123a0:	2000c89a 	.word	0x2000c89a
 80123a4:	080174c0 	.word	0x080174c0

080123a8 <ip4_addr_isbroadcast_u32>:
 * @param netif the network interface against which the address is checked
 * @return returns non-zero if the address is a broadcast address
 */
u8_t
ip4_addr_isbroadcast_u32(u32_t addr, const struct netif *netif)
{
 80123a8:	b480      	push	{r7}
 80123aa:	b085      	sub	sp, #20
 80123ac:	af00      	add	r7, sp, #0
 80123ae:	6078      	str	r0, [r7, #4]
 80123b0:	6039      	str	r1, [r7, #0]
  ip4_addr_t ipaddr;
  ip4_addr_set_u32(&ipaddr, addr);
 80123b2:	687b      	ldr	r3, [r7, #4]
 80123b4:	60fb      	str	r3, [r7, #12]

  /* all ones (broadcast) or all zeroes (old skool broadcast) */
  if ((~addr == IPADDR_ANY) ||
 80123b6:	687b      	ldr	r3, [r7, #4]
 80123b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80123bc:	d002      	beq.n	80123c4 <ip4_addr_isbroadcast_u32+0x1c>
 80123be:	687b      	ldr	r3, [r7, #4]
 80123c0:	2b00      	cmp	r3, #0
 80123c2:	d101      	bne.n	80123c8 <ip4_addr_isbroadcast_u32+0x20>
      (addr == IPADDR_ANY)) {
    return 1;
 80123c4:	2301      	movs	r3, #1
 80123c6:	e02a      	b.n	801241e <ip4_addr_isbroadcast_u32+0x76>
    /* no broadcast support on this network interface? */
  } else if ((netif->flags & NETIF_FLAG_BROADCAST) == 0) {
 80123c8:	683b      	ldr	r3, [r7, #0]
 80123ca:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80123ce:	f003 0302 	and.w	r3, r3, #2
 80123d2:	2b00      	cmp	r3, #0
 80123d4:	d101      	bne.n	80123da <ip4_addr_isbroadcast_u32+0x32>
    /* the given address cannot be a broadcast address
     * nor can we check against any broadcast addresses */
    return 0;
 80123d6:	2300      	movs	r3, #0
 80123d8:	e021      	b.n	801241e <ip4_addr_isbroadcast_u32+0x76>
    /* address matches network interface address exactly? => no broadcast */
  } else if (addr == ip4_addr_get_u32(netif_ip4_addr(netif))) {
 80123da:	683b      	ldr	r3, [r7, #0]
 80123dc:	3304      	adds	r3, #4
 80123de:	681b      	ldr	r3, [r3, #0]
 80123e0:	687a      	ldr	r2, [r7, #4]
 80123e2:	429a      	cmp	r2, r3
 80123e4:	d101      	bne.n	80123ea <ip4_addr_isbroadcast_u32+0x42>
    return 0;
 80123e6:	2300      	movs	r3, #0
 80123e8:	e019      	b.n	801241e <ip4_addr_isbroadcast_u32+0x76>
    /*  on the same (sub) network... */
  } else if (ip4_addr_netcmp(&ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif))
 80123ea:	68fa      	ldr	r2, [r7, #12]
 80123ec:	683b      	ldr	r3, [r7, #0]
 80123ee:	3304      	adds	r3, #4
 80123f0:	681b      	ldr	r3, [r3, #0]
 80123f2:	405a      	eors	r2, r3
 80123f4:	683b      	ldr	r3, [r7, #0]
 80123f6:	3308      	adds	r3, #8
 80123f8:	681b      	ldr	r3, [r3, #0]
 80123fa:	4013      	ands	r3, r2
 80123fc:	2b00      	cmp	r3, #0
 80123fe:	d10d      	bne.n	801241c <ip4_addr_isbroadcast_u32+0x74>
             /* ...and host identifier bits are all ones? =>... */
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 8012400:	683b      	ldr	r3, [r7, #0]
 8012402:	3308      	adds	r3, #8
 8012404:	681b      	ldr	r3, [r3, #0]
 8012406:	43da      	mvns	r2, r3
 8012408:	687b      	ldr	r3, [r7, #4]
 801240a:	401a      	ands	r2, r3
                 (IPADDR_BROADCAST & ~ip4_addr_get_u32(netif_ip4_netmask(netif))))) {
 801240c:	683b      	ldr	r3, [r7, #0]
 801240e:	3308      	adds	r3, #8
 8012410:	681b      	ldr	r3, [r3, #0]
 8012412:	43db      	mvns	r3, r3
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 8012414:	429a      	cmp	r2, r3
 8012416:	d101      	bne.n	801241c <ip4_addr_isbroadcast_u32+0x74>
    /* => network broadcast address */
    return 1;
 8012418:	2301      	movs	r3, #1
 801241a:	e000      	b.n	801241e <ip4_addr_isbroadcast_u32+0x76>
  } else {
    return 0;
 801241c:	2300      	movs	r3, #0
  }
}
 801241e:	4618      	mov	r0, r3
 8012420:	3714      	adds	r7, #20
 8012422:	46bd      	mov	sp, r7
 8012424:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012428:	4770      	bx	lr
	...

0801242c <ip_reass_tmr>:
 *
 * Should be called every 1000 msec (defined by IP_TMR_INTERVAL).
 */
void
ip_reass_tmr(void)
{
 801242c:	b580      	push	{r7, lr}
 801242e:	b084      	sub	sp, #16
 8012430:	af00      	add	r7, sp, #0
  struct ip_reassdata *r, *prev = NULL;
 8012432:	2300      	movs	r3, #0
 8012434:	60bb      	str	r3, [r7, #8]

  r = reassdatagrams;
 8012436:	4b12      	ldr	r3, [pc, #72]	; (8012480 <ip_reass_tmr+0x54>)
 8012438:	681b      	ldr	r3, [r3, #0]
 801243a:	60fb      	str	r3, [r7, #12]
  while (r != NULL) {
 801243c:	e018      	b.n	8012470 <ip_reass_tmr+0x44>
    /* Decrement the timer. Once it reaches 0,
     * clean up the incomplete fragment assembly */
    if (r->timer > 0) {
 801243e:	68fb      	ldr	r3, [r7, #12]
 8012440:	7fdb      	ldrb	r3, [r3, #31]
 8012442:	2b00      	cmp	r3, #0
 8012444:	d00b      	beq.n	801245e <ip_reass_tmr+0x32>
      r->timer--;
 8012446:	68fb      	ldr	r3, [r7, #12]
 8012448:	7fdb      	ldrb	r3, [r3, #31]
 801244a:	3b01      	subs	r3, #1
 801244c:	b2da      	uxtb	r2, r3
 801244e:	68fb      	ldr	r3, [r7, #12]
 8012450:	77da      	strb	r2, [r3, #31]
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer dec %"U16_F"\n", (u16_t)r->timer));
      prev = r;
 8012452:	68fb      	ldr	r3, [r7, #12]
 8012454:	60bb      	str	r3, [r7, #8]
      r = r->next;
 8012456:	68fb      	ldr	r3, [r7, #12]
 8012458:	681b      	ldr	r3, [r3, #0]
 801245a:	60fb      	str	r3, [r7, #12]
 801245c:	e008      	b.n	8012470 <ip_reass_tmr+0x44>
    } else {
      /* reassembly timed out */
      struct ip_reassdata *tmp;
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer timed out\n"));
      tmp = r;
 801245e:	68fb      	ldr	r3, [r7, #12]
 8012460:	607b      	str	r3, [r7, #4]
      /* get the next pointer before freeing */
      r = r->next;
 8012462:	68fb      	ldr	r3, [r7, #12]
 8012464:	681b      	ldr	r3, [r3, #0]
 8012466:	60fb      	str	r3, [r7, #12]
      /* free the helper struct and all enqueued pbufs */
      ip_reass_free_complete_datagram(tmp, prev);
 8012468:	68b9      	ldr	r1, [r7, #8]
 801246a:	6878      	ldr	r0, [r7, #4]
 801246c:	f000 f80a 	bl	8012484 <ip_reass_free_complete_datagram>
  while (r != NULL) {
 8012470:	68fb      	ldr	r3, [r7, #12]
 8012472:	2b00      	cmp	r3, #0
 8012474:	d1e3      	bne.n	801243e <ip_reass_tmr+0x12>
    }
  }
}
 8012476:	bf00      	nop
 8012478:	bf00      	nop
 801247a:	3710      	adds	r7, #16
 801247c:	46bd      	mov	sp, r7
 801247e:	bd80      	pop	{r7, pc}
 8012480:	2000c89c 	.word	0x2000c89c

08012484 <ip_reass_free_complete_datagram>:
 * @param prev the previous datagram in the linked list
 * @return the number of pbufs freed
 */
static int
ip_reass_free_complete_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 8012484:	b580      	push	{r7, lr}
 8012486:	b088      	sub	sp, #32
 8012488:	af00      	add	r7, sp, #0
 801248a:	6078      	str	r0, [r7, #4]
 801248c:	6039      	str	r1, [r7, #0]
  u16_t pbufs_freed = 0;
 801248e:	2300      	movs	r3, #0
 8012490:	83fb      	strh	r3, [r7, #30]
  u16_t clen;
  struct pbuf *p;
  struct ip_reass_helper *iprh;

  LWIP_ASSERT("prev != ipr", prev != ipr);
 8012492:	683a      	ldr	r2, [r7, #0]
 8012494:	687b      	ldr	r3, [r7, #4]
 8012496:	429a      	cmp	r2, r3
 8012498:	d105      	bne.n	80124a6 <ip_reass_free_complete_datagram+0x22>
 801249a:	4b45      	ldr	r3, [pc, #276]	; (80125b0 <ip_reass_free_complete_datagram+0x12c>)
 801249c:	22ab      	movs	r2, #171	; 0xab
 801249e:	4945      	ldr	r1, [pc, #276]	; (80125b4 <ip_reass_free_complete_datagram+0x130>)
 80124a0:	4845      	ldr	r0, [pc, #276]	; (80125b8 <ip_reass_free_complete_datagram+0x134>)
 80124a2:	f001 fa61 	bl	8013968 <iprintf>
  if (prev != NULL) {
 80124a6:	683b      	ldr	r3, [r7, #0]
 80124a8:	2b00      	cmp	r3, #0
 80124aa:	d00a      	beq.n	80124c2 <ip_reass_free_complete_datagram+0x3e>
    LWIP_ASSERT("prev->next == ipr", prev->next == ipr);
 80124ac:	683b      	ldr	r3, [r7, #0]
 80124ae:	681b      	ldr	r3, [r3, #0]
 80124b0:	687a      	ldr	r2, [r7, #4]
 80124b2:	429a      	cmp	r2, r3
 80124b4:	d005      	beq.n	80124c2 <ip_reass_free_complete_datagram+0x3e>
 80124b6:	4b3e      	ldr	r3, [pc, #248]	; (80125b0 <ip_reass_free_complete_datagram+0x12c>)
 80124b8:	22ad      	movs	r2, #173	; 0xad
 80124ba:	4940      	ldr	r1, [pc, #256]	; (80125bc <ip_reass_free_complete_datagram+0x138>)
 80124bc:	483e      	ldr	r0, [pc, #248]	; (80125b8 <ip_reass_free_complete_datagram+0x134>)
 80124be:	f001 fa53 	bl	8013968 <iprintf>
  }

  MIB2_STATS_INC(mib2.ipreasmfails);
#if LWIP_ICMP
  iprh = (struct ip_reass_helper *)ipr->p->payload;
 80124c2:	687b      	ldr	r3, [r7, #4]
 80124c4:	685b      	ldr	r3, [r3, #4]
 80124c6:	685b      	ldr	r3, [r3, #4]
 80124c8:	617b      	str	r3, [r7, #20]
  if (iprh->start == 0) {
 80124ca:	697b      	ldr	r3, [r7, #20]
 80124cc:	889b      	ldrh	r3, [r3, #4]
 80124ce:	b29b      	uxth	r3, r3
 80124d0:	2b00      	cmp	r3, #0
 80124d2:	d12a      	bne.n	801252a <ip_reass_free_complete_datagram+0xa6>
    /* The first fragment was received, send ICMP time exceeded. */
    /* First, de-queue the first pbuf from r->p. */
    p = ipr->p;
 80124d4:	687b      	ldr	r3, [r7, #4]
 80124d6:	685b      	ldr	r3, [r3, #4]
 80124d8:	61bb      	str	r3, [r7, #24]
    ipr->p = iprh->next_pbuf;
 80124da:	697b      	ldr	r3, [r7, #20]
 80124dc:	681a      	ldr	r2, [r3, #0]
 80124de:	687b      	ldr	r3, [r7, #4]
 80124e0:	605a      	str	r2, [r3, #4]
    /* Then, copy the original header into it. */
    SMEMCPY(p->payload, &ipr->iphdr, IP_HLEN);
 80124e2:	69bb      	ldr	r3, [r7, #24]
 80124e4:	6858      	ldr	r0, [r3, #4]
 80124e6:	687b      	ldr	r3, [r7, #4]
 80124e8:	3308      	adds	r3, #8
 80124ea:	2214      	movs	r2, #20
 80124ec:	4619      	mov	r1, r3
 80124ee:	f001 f990 	bl	8013812 <memcpy>
    icmp_time_exceeded(p, ICMP_TE_FRAG);
 80124f2:	2101      	movs	r1, #1
 80124f4:	69b8      	ldr	r0, [r7, #24]
 80124f6:	f7ff fbcb 	bl	8011c90 <icmp_time_exceeded>
    clen = pbuf_clen(p);
 80124fa:	69b8      	ldr	r0, [r7, #24]
 80124fc:	f7f8 f810 	bl	800a520 <pbuf_clen>
 8012500:	4603      	mov	r3, r0
 8012502:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 8012504:	8bfa      	ldrh	r2, [r7, #30]
 8012506:	8a7b      	ldrh	r3, [r7, #18]
 8012508:	4413      	add	r3, r2
 801250a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 801250e:	db05      	blt.n	801251c <ip_reass_free_complete_datagram+0x98>
 8012510:	4b27      	ldr	r3, [pc, #156]	; (80125b0 <ip_reass_free_complete_datagram+0x12c>)
 8012512:	22bc      	movs	r2, #188	; 0xbc
 8012514:	492a      	ldr	r1, [pc, #168]	; (80125c0 <ip_reass_free_complete_datagram+0x13c>)
 8012516:	4828      	ldr	r0, [pc, #160]	; (80125b8 <ip_reass_free_complete_datagram+0x134>)
 8012518:	f001 fa26 	bl	8013968 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 801251c:	8bfa      	ldrh	r2, [r7, #30]
 801251e:	8a7b      	ldrh	r3, [r7, #18]
 8012520:	4413      	add	r3, r2
 8012522:	83fb      	strh	r3, [r7, #30]
    pbuf_free(p);
 8012524:	69b8      	ldr	r0, [r7, #24]
 8012526:	f7f7 ff6d 	bl	800a404 <pbuf_free>
  }
#endif /* LWIP_ICMP */

  /* First, free all received pbufs.  The individual pbufs need to be released
     separately as they have not yet been chained */
  p = ipr->p;
 801252a:	687b      	ldr	r3, [r7, #4]
 801252c:	685b      	ldr	r3, [r3, #4]
 801252e:	61bb      	str	r3, [r7, #24]
  while (p != NULL) {
 8012530:	e01f      	b.n	8012572 <ip_reass_free_complete_datagram+0xee>
    struct pbuf *pcur;
    iprh = (struct ip_reass_helper *)p->payload;
 8012532:	69bb      	ldr	r3, [r7, #24]
 8012534:	685b      	ldr	r3, [r3, #4]
 8012536:	617b      	str	r3, [r7, #20]
    pcur = p;
 8012538:	69bb      	ldr	r3, [r7, #24]
 801253a:	60fb      	str	r3, [r7, #12]
    /* get the next pointer before freeing */
    p = iprh->next_pbuf;
 801253c:	697b      	ldr	r3, [r7, #20]
 801253e:	681b      	ldr	r3, [r3, #0]
 8012540:	61bb      	str	r3, [r7, #24]
    clen = pbuf_clen(pcur);
 8012542:	68f8      	ldr	r0, [r7, #12]
 8012544:	f7f7 ffec 	bl	800a520 <pbuf_clen>
 8012548:	4603      	mov	r3, r0
 801254a:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 801254c:	8bfa      	ldrh	r2, [r7, #30]
 801254e:	8a7b      	ldrh	r3, [r7, #18]
 8012550:	4413      	add	r3, r2
 8012552:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8012556:	db05      	blt.n	8012564 <ip_reass_free_complete_datagram+0xe0>
 8012558:	4b15      	ldr	r3, [pc, #84]	; (80125b0 <ip_reass_free_complete_datagram+0x12c>)
 801255a:	22cc      	movs	r2, #204	; 0xcc
 801255c:	4918      	ldr	r1, [pc, #96]	; (80125c0 <ip_reass_free_complete_datagram+0x13c>)
 801255e:	4816      	ldr	r0, [pc, #88]	; (80125b8 <ip_reass_free_complete_datagram+0x134>)
 8012560:	f001 fa02 	bl	8013968 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 8012564:	8bfa      	ldrh	r2, [r7, #30]
 8012566:	8a7b      	ldrh	r3, [r7, #18]
 8012568:	4413      	add	r3, r2
 801256a:	83fb      	strh	r3, [r7, #30]
    pbuf_free(pcur);
 801256c:	68f8      	ldr	r0, [r7, #12]
 801256e:	f7f7 ff49 	bl	800a404 <pbuf_free>
  while (p != NULL) {
 8012572:	69bb      	ldr	r3, [r7, #24]
 8012574:	2b00      	cmp	r3, #0
 8012576:	d1dc      	bne.n	8012532 <ip_reass_free_complete_datagram+0xae>
  }
  /* Then, unchain the struct ip_reassdata from the list and free it. */
  ip_reass_dequeue_datagram(ipr, prev);
 8012578:	6839      	ldr	r1, [r7, #0]
 801257a:	6878      	ldr	r0, [r7, #4]
 801257c:	f000 f8ca 	bl	8012714 <ip_reass_dequeue_datagram>
  LWIP_ASSERT("ip_reass_pbufcount >= pbufs_freed", ip_reass_pbufcount >= pbufs_freed);
 8012580:	4b10      	ldr	r3, [pc, #64]	; (80125c4 <ip_reass_free_complete_datagram+0x140>)
 8012582:	881b      	ldrh	r3, [r3, #0]
 8012584:	8bfa      	ldrh	r2, [r7, #30]
 8012586:	429a      	cmp	r2, r3
 8012588:	d905      	bls.n	8012596 <ip_reass_free_complete_datagram+0x112>
 801258a:	4b09      	ldr	r3, [pc, #36]	; (80125b0 <ip_reass_free_complete_datagram+0x12c>)
 801258c:	22d2      	movs	r2, #210	; 0xd2
 801258e:	490e      	ldr	r1, [pc, #56]	; (80125c8 <ip_reass_free_complete_datagram+0x144>)
 8012590:	4809      	ldr	r0, [pc, #36]	; (80125b8 <ip_reass_free_complete_datagram+0x134>)
 8012592:	f001 f9e9 	bl	8013968 <iprintf>
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - pbufs_freed);
 8012596:	4b0b      	ldr	r3, [pc, #44]	; (80125c4 <ip_reass_free_complete_datagram+0x140>)
 8012598:	881a      	ldrh	r2, [r3, #0]
 801259a:	8bfb      	ldrh	r3, [r7, #30]
 801259c:	1ad3      	subs	r3, r2, r3
 801259e:	b29a      	uxth	r2, r3
 80125a0:	4b08      	ldr	r3, [pc, #32]	; (80125c4 <ip_reass_free_complete_datagram+0x140>)
 80125a2:	801a      	strh	r2, [r3, #0]

  return pbufs_freed;
 80125a4:	8bfb      	ldrh	r3, [r7, #30]
}
 80125a6:	4618      	mov	r0, r3
 80125a8:	3720      	adds	r7, #32
 80125aa:	46bd      	mov	sp, r7
 80125ac:	bd80      	pop	{r7, pc}
 80125ae:	bf00      	nop
 80125b0:	08017098 	.word	0x08017098
 80125b4:	080170d4 	.word	0x080170d4
 80125b8:	080170e0 	.word	0x080170e0
 80125bc:	08017108 	.word	0x08017108
 80125c0:	0801711c 	.word	0x0801711c
 80125c4:	2000c8a0 	.word	0x2000c8a0
 80125c8:	0801713c 	.word	0x0801713c

080125cc <ip_reass_remove_oldest_datagram>:
 *        (used for freeing other datagrams if not enough space)
 * @return the number of pbufs freed
 */
static int
ip_reass_remove_oldest_datagram(struct ip_hdr *fraghdr, int pbufs_needed)
{
 80125cc:	b580      	push	{r7, lr}
 80125ce:	b08a      	sub	sp, #40	; 0x28
 80125d0:	af00      	add	r7, sp, #0
 80125d2:	6078      	str	r0, [r7, #4]
 80125d4:	6039      	str	r1, [r7, #0]
  /* @todo Can't we simply remove the last datagram in the
   *       linked list behind reassdatagrams?
   */
  struct ip_reassdata *r, *oldest, *prev, *oldest_prev;
  int pbufs_freed = 0, pbufs_freed_current;
 80125d6:	2300      	movs	r3, #0
 80125d8:	617b      	str	r3, [r7, #20]
  int other_datagrams;

  /* Free datagrams until being allowed to enqueue 'pbufs_needed' pbufs,
   * but don't free the datagram that 'fraghdr' belongs to! */
  do {
    oldest = NULL;
 80125da:	2300      	movs	r3, #0
 80125dc:	623b      	str	r3, [r7, #32]
    prev = NULL;
 80125de:	2300      	movs	r3, #0
 80125e0:	61fb      	str	r3, [r7, #28]
    oldest_prev = NULL;
 80125e2:	2300      	movs	r3, #0
 80125e4:	61bb      	str	r3, [r7, #24]
    other_datagrams = 0;
 80125e6:	2300      	movs	r3, #0
 80125e8:	613b      	str	r3, [r7, #16]
    r = reassdatagrams;
 80125ea:	4b28      	ldr	r3, [pc, #160]	; (801268c <ip_reass_remove_oldest_datagram+0xc0>)
 80125ec:	681b      	ldr	r3, [r3, #0]
 80125ee:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 80125f0:	e030      	b.n	8012654 <ip_reass_remove_oldest_datagram+0x88>
      if (!IP_ADDRESSES_AND_ID_MATCH(&r->iphdr, fraghdr)) {
 80125f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80125f4:	695a      	ldr	r2, [r3, #20]
 80125f6:	687b      	ldr	r3, [r7, #4]
 80125f8:	68db      	ldr	r3, [r3, #12]
 80125fa:	429a      	cmp	r2, r3
 80125fc:	d10c      	bne.n	8012618 <ip_reass_remove_oldest_datagram+0x4c>
 80125fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012600:	699a      	ldr	r2, [r3, #24]
 8012602:	687b      	ldr	r3, [r7, #4]
 8012604:	691b      	ldr	r3, [r3, #16]
 8012606:	429a      	cmp	r2, r3
 8012608:	d106      	bne.n	8012618 <ip_reass_remove_oldest_datagram+0x4c>
 801260a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801260c:	899a      	ldrh	r2, [r3, #12]
 801260e:	687b      	ldr	r3, [r7, #4]
 8012610:	889b      	ldrh	r3, [r3, #4]
 8012612:	b29b      	uxth	r3, r3
 8012614:	429a      	cmp	r2, r3
 8012616:	d014      	beq.n	8012642 <ip_reass_remove_oldest_datagram+0x76>
        /* Not the same datagram as fraghdr */
        other_datagrams++;
 8012618:	693b      	ldr	r3, [r7, #16]
 801261a:	3301      	adds	r3, #1
 801261c:	613b      	str	r3, [r7, #16]
        if (oldest == NULL) {
 801261e:	6a3b      	ldr	r3, [r7, #32]
 8012620:	2b00      	cmp	r3, #0
 8012622:	d104      	bne.n	801262e <ip_reass_remove_oldest_datagram+0x62>
          oldest = r;
 8012624:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012626:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 8012628:	69fb      	ldr	r3, [r7, #28]
 801262a:	61bb      	str	r3, [r7, #24]
 801262c:	e009      	b.n	8012642 <ip_reass_remove_oldest_datagram+0x76>
        } else if (r->timer <= oldest->timer) {
 801262e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012630:	7fda      	ldrb	r2, [r3, #31]
 8012632:	6a3b      	ldr	r3, [r7, #32]
 8012634:	7fdb      	ldrb	r3, [r3, #31]
 8012636:	429a      	cmp	r2, r3
 8012638:	d803      	bhi.n	8012642 <ip_reass_remove_oldest_datagram+0x76>
          /* older than the previous oldest */
          oldest = r;
 801263a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801263c:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 801263e:	69fb      	ldr	r3, [r7, #28]
 8012640:	61bb      	str	r3, [r7, #24]
        }
      }
      if (r->next != NULL) {
 8012642:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012644:	681b      	ldr	r3, [r3, #0]
 8012646:	2b00      	cmp	r3, #0
 8012648:	d001      	beq.n	801264e <ip_reass_remove_oldest_datagram+0x82>
        prev = r;
 801264a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801264c:	61fb      	str	r3, [r7, #28]
      }
      r = r->next;
 801264e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012650:	681b      	ldr	r3, [r3, #0]
 8012652:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 8012654:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012656:	2b00      	cmp	r3, #0
 8012658:	d1cb      	bne.n	80125f2 <ip_reass_remove_oldest_datagram+0x26>
    }
    if (oldest != NULL) {
 801265a:	6a3b      	ldr	r3, [r7, #32]
 801265c:	2b00      	cmp	r3, #0
 801265e:	d008      	beq.n	8012672 <ip_reass_remove_oldest_datagram+0xa6>
      pbufs_freed_current = ip_reass_free_complete_datagram(oldest, oldest_prev);
 8012660:	69b9      	ldr	r1, [r7, #24]
 8012662:	6a38      	ldr	r0, [r7, #32]
 8012664:	f7ff ff0e 	bl	8012484 <ip_reass_free_complete_datagram>
 8012668:	60f8      	str	r0, [r7, #12]
      pbufs_freed += pbufs_freed_current;
 801266a:	697a      	ldr	r2, [r7, #20]
 801266c:	68fb      	ldr	r3, [r7, #12]
 801266e:	4413      	add	r3, r2
 8012670:	617b      	str	r3, [r7, #20]
    }
  } while ((pbufs_freed < pbufs_needed) && (other_datagrams > 1));
 8012672:	697a      	ldr	r2, [r7, #20]
 8012674:	683b      	ldr	r3, [r7, #0]
 8012676:	429a      	cmp	r2, r3
 8012678:	da02      	bge.n	8012680 <ip_reass_remove_oldest_datagram+0xb4>
 801267a:	693b      	ldr	r3, [r7, #16]
 801267c:	2b01      	cmp	r3, #1
 801267e:	dcac      	bgt.n	80125da <ip_reass_remove_oldest_datagram+0xe>
  return pbufs_freed;
 8012680:	697b      	ldr	r3, [r7, #20]
}
 8012682:	4618      	mov	r0, r3
 8012684:	3728      	adds	r7, #40	; 0x28
 8012686:	46bd      	mov	sp, r7
 8012688:	bd80      	pop	{r7, pc}
 801268a:	bf00      	nop
 801268c:	2000c89c 	.word	0x2000c89c

08012690 <ip_reass_enqueue_new_datagram>:
 * @param clen number of pbufs needed to enqueue (used for freeing other datagrams if not enough space)
 * @return A pointer to the queue location into which the fragment was enqueued
 */
static struct ip_reassdata *
ip_reass_enqueue_new_datagram(struct ip_hdr *fraghdr, int clen)
{
 8012690:	b580      	push	{r7, lr}
 8012692:	b084      	sub	sp, #16
 8012694:	af00      	add	r7, sp, #0
 8012696:	6078      	str	r0, [r7, #4]
 8012698:	6039      	str	r1, [r7, #0]
#if ! IP_REASS_FREE_OLDEST
  LWIP_UNUSED_ARG(clen);
#endif

  /* No matching previous fragment found, allocate a new reassdata struct */
  ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 801269a:	2004      	movs	r0, #4
 801269c:	f7f6 ff92 	bl	80095c4 <memp_malloc>
 80126a0:	60f8      	str	r0, [r7, #12]
  if (ipr == NULL) {
 80126a2:	68fb      	ldr	r3, [r7, #12]
 80126a4:	2b00      	cmp	r3, #0
 80126a6:	d116      	bne.n	80126d6 <ip_reass_enqueue_new_datagram+0x46>
#if IP_REASS_FREE_OLDEST
    if (ip_reass_remove_oldest_datagram(fraghdr, clen) >= clen) {
 80126a8:	6839      	ldr	r1, [r7, #0]
 80126aa:	6878      	ldr	r0, [r7, #4]
 80126ac:	f7ff ff8e 	bl	80125cc <ip_reass_remove_oldest_datagram>
 80126b0:	4602      	mov	r2, r0
 80126b2:	683b      	ldr	r3, [r7, #0]
 80126b4:	4293      	cmp	r3, r2
 80126b6:	dc03      	bgt.n	80126c0 <ip_reass_enqueue_new_datagram+0x30>
      ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 80126b8:	2004      	movs	r0, #4
 80126ba:	f7f6 ff83 	bl	80095c4 <memp_malloc>
 80126be:	60f8      	str	r0, [r7, #12]
    }
    if (ipr == NULL)
 80126c0:	68fb      	ldr	r3, [r7, #12]
 80126c2:	2b00      	cmp	r3, #0
 80126c4:	d107      	bne.n	80126d6 <ip_reass_enqueue_new_datagram+0x46>
#endif /* IP_REASS_FREE_OLDEST */
    {
      IPFRAG_STATS_INC(ip_frag.memerr);
 80126c6:	4b11      	ldr	r3, [pc, #68]	; (801270c <ip_reass_enqueue_new_datagram+0x7c>)
 80126c8:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 80126ca:	3301      	adds	r3, #1
 80126cc:	b29a      	uxth	r2, r3
 80126ce:	4b0f      	ldr	r3, [pc, #60]	; (801270c <ip_reass_enqueue_new_datagram+0x7c>)
 80126d0:	879a      	strh	r2, [r3, #60]	; 0x3c
      LWIP_DEBUGF(IP_REASS_DEBUG, ("Failed to alloc reassdata struct\n"));
      return NULL;
 80126d2:	2300      	movs	r3, #0
 80126d4:	e016      	b.n	8012704 <ip_reass_enqueue_new_datagram+0x74>
    }
  }
  memset(ipr, 0, sizeof(struct ip_reassdata));
 80126d6:	2220      	movs	r2, #32
 80126d8:	2100      	movs	r1, #0
 80126da:	68f8      	ldr	r0, [r7, #12]
 80126dc:	f001 f8a7 	bl	801382e <memset>
  ipr->timer = IP_REASS_MAXAGE;
 80126e0:	68fb      	ldr	r3, [r7, #12]
 80126e2:	220f      	movs	r2, #15
 80126e4:	77da      	strb	r2, [r3, #31]

  /* enqueue the new structure to the front of the list */
  ipr->next = reassdatagrams;
 80126e6:	4b0a      	ldr	r3, [pc, #40]	; (8012710 <ip_reass_enqueue_new_datagram+0x80>)
 80126e8:	681a      	ldr	r2, [r3, #0]
 80126ea:	68fb      	ldr	r3, [r7, #12]
 80126ec:	601a      	str	r2, [r3, #0]
  reassdatagrams = ipr;
 80126ee:	4a08      	ldr	r2, [pc, #32]	; (8012710 <ip_reass_enqueue_new_datagram+0x80>)
 80126f0:	68fb      	ldr	r3, [r7, #12]
 80126f2:	6013      	str	r3, [r2, #0]
  /* copy the ip header for later tests and input */
  /* @todo: no ip options supported? */
  SMEMCPY(&(ipr->iphdr), fraghdr, IP_HLEN);
 80126f4:	68fb      	ldr	r3, [r7, #12]
 80126f6:	3308      	adds	r3, #8
 80126f8:	2214      	movs	r2, #20
 80126fa:	6879      	ldr	r1, [r7, #4]
 80126fc:	4618      	mov	r0, r3
 80126fe:	f001 f888 	bl	8013812 <memcpy>
  return ipr;
 8012702:	68fb      	ldr	r3, [r7, #12]
}
 8012704:	4618      	mov	r0, r3
 8012706:	3710      	adds	r7, #16
 8012708:	46bd      	mov	sp, r7
 801270a:	bd80      	pop	{r7, pc}
 801270c:	2000c64c 	.word	0x2000c64c
 8012710:	2000c89c 	.word	0x2000c89c

08012714 <ip_reass_dequeue_datagram>:
 * Dequeues a datagram from the datagram queue. Doesn't deallocate the pbufs.
 * @param ipr points to the queue entry to dequeue
 */
static void
ip_reass_dequeue_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 8012714:	b580      	push	{r7, lr}
 8012716:	b082      	sub	sp, #8
 8012718:	af00      	add	r7, sp, #0
 801271a:	6078      	str	r0, [r7, #4]
 801271c:	6039      	str	r1, [r7, #0]
  /* dequeue the reass struct  */
  if (reassdatagrams == ipr) {
 801271e:	4b10      	ldr	r3, [pc, #64]	; (8012760 <ip_reass_dequeue_datagram+0x4c>)
 8012720:	681b      	ldr	r3, [r3, #0]
 8012722:	687a      	ldr	r2, [r7, #4]
 8012724:	429a      	cmp	r2, r3
 8012726:	d104      	bne.n	8012732 <ip_reass_dequeue_datagram+0x1e>
    /* it was the first in the list */
    reassdatagrams = ipr->next;
 8012728:	687b      	ldr	r3, [r7, #4]
 801272a:	681b      	ldr	r3, [r3, #0]
 801272c:	4a0c      	ldr	r2, [pc, #48]	; (8012760 <ip_reass_dequeue_datagram+0x4c>)
 801272e:	6013      	str	r3, [r2, #0]
 8012730:	e00d      	b.n	801274e <ip_reass_dequeue_datagram+0x3a>
  } else {
    /* it wasn't the first, so it must have a valid 'prev' */
    LWIP_ASSERT("sanity check linked list", prev != NULL);
 8012732:	683b      	ldr	r3, [r7, #0]
 8012734:	2b00      	cmp	r3, #0
 8012736:	d106      	bne.n	8012746 <ip_reass_dequeue_datagram+0x32>
 8012738:	4b0a      	ldr	r3, [pc, #40]	; (8012764 <ip_reass_dequeue_datagram+0x50>)
 801273a:	f240 1245 	movw	r2, #325	; 0x145
 801273e:	490a      	ldr	r1, [pc, #40]	; (8012768 <ip_reass_dequeue_datagram+0x54>)
 8012740:	480a      	ldr	r0, [pc, #40]	; (801276c <ip_reass_dequeue_datagram+0x58>)
 8012742:	f001 f911 	bl	8013968 <iprintf>
    prev->next = ipr->next;
 8012746:	687b      	ldr	r3, [r7, #4]
 8012748:	681a      	ldr	r2, [r3, #0]
 801274a:	683b      	ldr	r3, [r7, #0]
 801274c:	601a      	str	r2, [r3, #0]
  }

  /* now we can free the ip_reassdata struct */
  memp_free(MEMP_REASSDATA, ipr);
 801274e:	6879      	ldr	r1, [r7, #4]
 8012750:	2004      	movs	r0, #4
 8012752:	f7f6 ffb3 	bl	80096bc <memp_free>
}
 8012756:	bf00      	nop
 8012758:	3708      	adds	r7, #8
 801275a:	46bd      	mov	sp, r7
 801275c:	bd80      	pop	{r7, pc}
 801275e:	bf00      	nop
 8012760:	2000c89c 	.word	0x2000c89c
 8012764:	08017098 	.word	0x08017098
 8012768:	08017160 	.word	0x08017160
 801276c:	080170e0 	.word	0x080170e0

08012770 <ip_reass_chain_frag_into_datagram_and_validate>:
 * @param is_last is 1 if this pbuf has MF==0 (ipr->flags not updated yet)
 * @return see IP_REASS_VALIDATE_* defines
 */
static int
ip_reass_chain_frag_into_datagram_and_validate(struct ip_reassdata *ipr, struct pbuf *new_p, int is_last)
{
 8012770:	b580      	push	{r7, lr}
 8012772:	b08c      	sub	sp, #48	; 0x30
 8012774:	af00      	add	r7, sp, #0
 8012776:	60f8      	str	r0, [r7, #12]
 8012778:	60b9      	str	r1, [r7, #8]
 801277a:	607a      	str	r2, [r7, #4]
  struct ip_reass_helper *iprh, *iprh_tmp, *iprh_prev = NULL;
 801277c:	2300      	movs	r3, #0
 801277e:	62bb      	str	r3, [r7, #40]	; 0x28
  struct pbuf *q;
  u16_t offset, len;
  u8_t hlen;
  struct ip_hdr *fraghdr;
  int valid = 1;
 8012780:	2301      	movs	r3, #1
 8012782:	623b      	str	r3, [r7, #32]

  /* Extract length and fragment offset from current fragment */
  fraghdr = (struct ip_hdr *)new_p->payload;
 8012784:	68bb      	ldr	r3, [r7, #8]
 8012786:	685b      	ldr	r3, [r3, #4]
 8012788:	61fb      	str	r3, [r7, #28]
  len = lwip_ntohs(IPH_LEN(fraghdr));
 801278a:	69fb      	ldr	r3, [r7, #28]
 801278c:	885b      	ldrh	r3, [r3, #2]
 801278e:	b29b      	uxth	r3, r3
 8012790:	4618      	mov	r0, r3
 8012792:	f7f6 f975 	bl	8008a80 <lwip_htons>
 8012796:	4603      	mov	r3, r0
 8012798:	837b      	strh	r3, [r7, #26]
  hlen = IPH_HL_BYTES(fraghdr);
 801279a:	69fb      	ldr	r3, [r7, #28]
 801279c:	781b      	ldrb	r3, [r3, #0]
 801279e:	f003 030f 	and.w	r3, r3, #15
 80127a2:	b2db      	uxtb	r3, r3
 80127a4:	009b      	lsls	r3, r3, #2
 80127a6:	767b      	strb	r3, [r7, #25]
  if (hlen > len) {
 80127a8:	7e7b      	ldrb	r3, [r7, #25]
 80127aa:	b29b      	uxth	r3, r3
 80127ac:	8b7a      	ldrh	r2, [r7, #26]
 80127ae:	429a      	cmp	r2, r3
 80127b0:	d202      	bcs.n	80127b8 <ip_reass_chain_frag_into_datagram_and_validate+0x48>
    /* invalid datagram */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 80127b2:	f04f 33ff 	mov.w	r3, #4294967295
 80127b6:	e135      	b.n	8012a24 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  len = (u16_t)(len - hlen);
 80127b8:	7e7b      	ldrb	r3, [r7, #25]
 80127ba:	b29b      	uxth	r3, r3
 80127bc:	8b7a      	ldrh	r2, [r7, #26]
 80127be:	1ad3      	subs	r3, r2, r3
 80127c0:	837b      	strh	r3, [r7, #26]
  offset = IPH_OFFSET_BYTES(fraghdr);
 80127c2:	69fb      	ldr	r3, [r7, #28]
 80127c4:	88db      	ldrh	r3, [r3, #6]
 80127c6:	b29b      	uxth	r3, r3
 80127c8:	4618      	mov	r0, r3
 80127ca:	f7f6 f959 	bl	8008a80 <lwip_htons>
 80127ce:	4603      	mov	r3, r0
 80127d0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80127d4:	b29b      	uxth	r3, r3
 80127d6:	00db      	lsls	r3, r3, #3
 80127d8:	82fb      	strh	r3, [r7, #22]
  /* overwrite the fragment's ip header from the pbuf with our helper struct,
   * and setup the embedded helper structure. */
  /* make sure the struct ip_reass_helper fits into the IP header */
  LWIP_ASSERT("sizeof(struct ip_reass_helper) <= IP_HLEN",
              sizeof(struct ip_reass_helper) <= IP_HLEN);
  iprh = (struct ip_reass_helper *)new_p->payload;
 80127da:	68bb      	ldr	r3, [r7, #8]
 80127dc:	685b      	ldr	r3, [r3, #4]
 80127de:	62fb      	str	r3, [r7, #44]	; 0x2c
  iprh->next_pbuf = NULL;
 80127e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80127e2:	2200      	movs	r2, #0
 80127e4:	701a      	strb	r2, [r3, #0]
 80127e6:	2200      	movs	r2, #0
 80127e8:	705a      	strb	r2, [r3, #1]
 80127ea:	2200      	movs	r2, #0
 80127ec:	709a      	strb	r2, [r3, #2]
 80127ee:	2200      	movs	r2, #0
 80127f0:	70da      	strb	r2, [r3, #3]
  iprh->start = offset;
 80127f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80127f4:	8afa      	ldrh	r2, [r7, #22]
 80127f6:	809a      	strh	r2, [r3, #4]
  iprh->end = (u16_t)(offset + len);
 80127f8:	8afa      	ldrh	r2, [r7, #22]
 80127fa:	8b7b      	ldrh	r3, [r7, #26]
 80127fc:	4413      	add	r3, r2
 80127fe:	b29a      	uxth	r2, r3
 8012800:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012802:	80da      	strh	r2, [r3, #6]
  if (iprh->end < offset) {
 8012804:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012806:	88db      	ldrh	r3, [r3, #6]
 8012808:	b29b      	uxth	r3, r3
 801280a:	8afa      	ldrh	r2, [r7, #22]
 801280c:	429a      	cmp	r2, r3
 801280e:	d902      	bls.n	8012816 <ip_reass_chain_frag_into_datagram_and_validate+0xa6>
    /* u16_t overflow, cannot handle this */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 8012810:	f04f 33ff 	mov.w	r3, #4294967295
 8012814:	e106      	b.n	8012a24 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }

  /* Iterate through until we either get to the end of the list (append),
   * or we find one with a larger offset (insert). */
  for (q = ipr->p; q != NULL;) {
 8012816:	68fb      	ldr	r3, [r7, #12]
 8012818:	685b      	ldr	r3, [r3, #4]
 801281a:	627b      	str	r3, [r7, #36]	; 0x24
 801281c:	e068      	b.n	80128f0 <ip_reass_chain_frag_into_datagram_and_validate+0x180>
    iprh_tmp = (struct ip_reass_helper *)q->payload;
 801281e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012820:	685b      	ldr	r3, [r3, #4]
 8012822:	613b      	str	r3, [r7, #16]
    if (iprh->start < iprh_tmp->start) {
 8012824:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012826:	889b      	ldrh	r3, [r3, #4]
 8012828:	b29a      	uxth	r2, r3
 801282a:	693b      	ldr	r3, [r7, #16]
 801282c:	889b      	ldrh	r3, [r3, #4]
 801282e:	b29b      	uxth	r3, r3
 8012830:	429a      	cmp	r2, r3
 8012832:	d235      	bcs.n	80128a0 <ip_reass_chain_frag_into_datagram_and_validate+0x130>
      /* the new pbuf should be inserted before this */
      iprh->next_pbuf = q;
 8012834:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012836:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8012838:	601a      	str	r2, [r3, #0]
      if (iprh_prev != NULL) {
 801283a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801283c:	2b00      	cmp	r3, #0
 801283e:	d020      	beq.n	8012882 <ip_reass_chain_frag_into_datagram_and_validate+0x112>
        /* not the fragment with the lowest offset */
#if IP_REASS_CHECK_OVERLAP
        if ((iprh->start < iprh_prev->end) || (iprh->end > iprh_tmp->start)) {
 8012840:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012842:	889b      	ldrh	r3, [r3, #4]
 8012844:	b29a      	uxth	r2, r3
 8012846:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012848:	88db      	ldrh	r3, [r3, #6]
 801284a:	b29b      	uxth	r3, r3
 801284c:	429a      	cmp	r2, r3
 801284e:	d307      	bcc.n	8012860 <ip_reass_chain_frag_into_datagram_and_validate+0xf0>
 8012850:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012852:	88db      	ldrh	r3, [r3, #6]
 8012854:	b29a      	uxth	r2, r3
 8012856:	693b      	ldr	r3, [r7, #16]
 8012858:	889b      	ldrh	r3, [r3, #4]
 801285a:	b29b      	uxth	r3, r3
 801285c:	429a      	cmp	r2, r3
 801285e:	d902      	bls.n	8012866 <ip_reass_chain_frag_into_datagram_and_validate+0xf6>
          /* fragment overlaps with previous or following, throw away */
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 8012860:	f04f 33ff 	mov.w	r3, #4294967295
 8012864:	e0de      	b.n	8012a24 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        iprh_prev->next_pbuf = new_p;
 8012866:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012868:	68ba      	ldr	r2, [r7, #8]
 801286a:	601a      	str	r2, [r3, #0]
        if (iprh_prev->end != iprh->start) {
 801286c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801286e:	88db      	ldrh	r3, [r3, #6]
 8012870:	b29a      	uxth	r2, r3
 8012872:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012874:	889b      	ldrh	r3, [r3, #4]
 8012876:	b29b      	uxth	r3, r3
 8012878:	429a      	cmp	r2, r3
 801287a:	d03d      	beq.n	80128f8 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 801287c:	2300      	movs	r3, #0
 801287e:	623b      	str	r3, [r7, #32]
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        /* fragment with the lowest offset */
        ipr->p = new_p;
      }
      break;
 8012880:	e03a      	b.n	80128f8 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
        if (iprh->end > iprh_tmp->start) {
 8012882:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012884:	88db      	ldrh	r3, [r3, #6]
 8012886:	b29a      	uxth	r2, r3
 8012888:	693b      	ldr	r3, [r7, #16]
 801288a:	889b      	ldrh	r3, [r3, #4]
 801288c:	b29b      	uxth	r3, r3
 801288e:	429a      	cmp	r2, r3
 8012890:	d902      	bls.n	8012898 <ip_reass_chain_frag_into_datagram_and_validate+0x128>
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 8012892:	f04f 33ff 	mov.w	r3, #4294967295
 8012896:	e0c5      	b.n	8012a24 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        ipr->p = new_p;
 8012898:	68fb      	ldr	r3, [r7, #12]
 801289a:	68ba      	ldr	r2, [r7, #8]
 801289c:	605a      	str	r2, [r3, #4]
      break;
 801289e:	e02b      	b.n	80128f8 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
    } else if (iprh->start == iprh_tmp->start) {
 80128a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80128a2:	889b      	ldrh	r3, [r3, #4]
 80128a4:	b29a      	uxth	r2, r3
 80128a6:	693b      	ldr	r3, [r7, #16]
 80128a8:	889b      	ldrh	r3, [r3, #4]
 80128aa:	b29b      	uxth	r3, r3
 80128ac:	429a      	cmp	r2, r3
 80128ae:	d102      	bne.n	80128b6 <ip_reass_chain_frag_into_datagram_and_validate+0x146>
      /* received the same datagram twice: no need to keep the datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 80128b0:	f04f 33ff 	mov.w	r3, #4294967295
 80128b4:	e0b6      	b.n	8012a24 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#if IP_REASS_CHECK_OVERLAP
    } else if (iprh->start < iprh_tmp->end) {
 80128b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80128b8:	889b      	ldrh	r3, [r3, #4]
 80128ba:	b29a      	uxth	r2, r3
 80128bc:	693b      	ldr	r3, [r7, #16]
 80128be:	88db      	ldrh	r3, [r3, #6]
 80128c0:	b29b      	uxth	r3, r3
 80128c2:	429a      	cmp	r2, r3
 80128c4:	d202      	bcs.n	80128cc <ip_reass_chain_frag_into_datagram_and_validate+0x15c>
      /* overlap: no need to keep the new datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 80128c6:	f04f 33ff 	mov.w	r3, #4294967295
 80128ca:	e0ab      	b.n	8012a24 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#endif /* IP_REASS_CHECK_OVERLAP */
    } else {
      /* Check if the fragments received so far have no holes. */
      if (iprh_prev != NULL) {
 80128cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80128ce:	2b00      	cmp	r3, #0
 80128d0:	d009      	beq.n	80128e6 <ip_reass_chain_frag_into_datagram_and_validate+0x176>
        if (iprh_prev->end != iprh_tmp->start) {
 80128d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80128d4:	88db      	ldrh	r3, [r3, #6]
 80128d6:	b29a      	uxth	r2, r3
 80128d8:	693b      	ldr	r3, [r7, #16]
 80128da:	889b      	ldrh	r3, [r3, #4]
 80128dc:	b29b      	uxth	r3, r3
 80128de:	429a      	cmp	r2, r3
 80128e0:	d001      	beq.n	80128e6 <ip_reass_chain_frag_into_datagram_and_validate+0x176>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 80128e2:	2300      	movs	r3, #0
 80128e4:	623b      	str	r3, [r7, #32]
        }
      }
    }
    q = iprh_tmp->next_pbuf;
 80128e6:	693b      	ldr	r3, [r7, #16]
 80128e8:	681b      	ldr	r3, [r3, #0]
 80128ea:	627b      	str	r3, [r7, #36]	; 0x24
    iprh_prev = iprh_tmp;
 80128ec:	693b      	ldr	r3, [r7, #16]
 80128ee:	62bb      	str	r3, [r7, #40]	; 0x28
  for (q = ipr->p; q != NULL;) {
 80128f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80128f2:	2b00      	cmp	r3, #0
 80128f4:	d193      	bne.n	801281e <ip_reass_chain_frag_into_datagram_and_validate+0xae>
 80128f6:	e000      	b.n	80128fa <ip_reass_chain_frag_into_datagram_and_validate+0x18a>
      break;
 80128f8:	bf00      	nop
  }

  /* If q is NULL, then we made it to the end of the list. Determine what to do now */
  if (q == NULL) {
 80128fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80128fc:	2b00      	cmp	r3, #0
 80128fe:	d12d      	bne.n	801295c <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
    if (iprh_prev != NULL) {
 8012900:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012902:	2b00      	cmp	r3, #0
 8012904:	d01c      	beq.n	8012940 <ip_reass_chain_frag_into_datagram_and_validate+0x1d0>
      /* this is (for now), the fragment with the highest offset:
       * chain it to the last fragment */
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("check fragments don't overlap", iprh_prev->end <= iprh->start);
 8012906:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012908:	88db      	ldrh	r3, [r3, #6]
 801290a:	b29a      	uxth	r2, r3
 801290c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801290e:	889b      	ldrh	r3, [r3, #4]
 8012910:	b29b      	uxth	r3, r3
 8012912:	429a      	cmp	r2, r3
 8012914:	d906      	bls.n	8012924 <ip_reass_chain_frag_into_datagram_and_validate+0x1b4>
 8012916:	4b45      	ldr	r3, [pc, #276]	; (8012a2c <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8012918:	f44f 72db 	mov.w	r2, #438	; 0x1b6
 801291c:	4944      	ldr	r1, [pc, #272]	; (8012a30 <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 801291e:	4845      	ldr	r0, [pc, #276]	; (8012a34 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8012920:	f001 f822 	bl	8013968 <iprintf>
#endif /* IP_REASS_CHECK_OVERLAP */
      iprh_prev->next_pbuf = new_p;
 8012924:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012926:	68ba      	ldr	r2, [r7, #8]
 8012928:	601a      	str	r2, [r3, #0]
      if (iprh_prev->end != iprh->start) {
 801292a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801292c:	88db      	ldrh	r3, [r3, #6]
 801292e:	b29a      	uxth	r2, r3
 8012930:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012932:	889b      	ldrh	r3, [r3, #4]
 8012934:	b29b      	uxth	r3, r3
 8012936:	429a      	cmp	r2, r3
 8012938:	d010      	beq.n	801295c <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
        valid = 0;
 801293a:	2300      	movs	r3, #0
 801293c:	623b      	str	r3, [r7, #32]
 801293e:	e00d      	b.n	801295c <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
      }
    } else {
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("no previous fragment, this must be the first fragment!",
 8012940:	68fb      	ldr	r3, [r7, #12]
 8012942:	685b      	ldr	r3, [r3, #4]
 8012944:	2b00      	cmp	r3, #0
 8012946:	d006      	beq.n	8012956 <ip_reass_chain_frag_into_datagram_and_validate+0x1e6>
 8012948:	4b38      	ldr	r3, [pc, #224]	; (8012a2c <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 801294a:	f44f 72df 	mov.w	r2, #446	; 0x1be
 801294e:	493a      	ldr	r1, [pc, #232]	; (8012a38 <ip_reass_chain_frag_into_datagram_and_validate+0x2c8>)
 8012950:	4838      	ldr	r0, [pc, #224]	; (8012a34 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8012952:	f001 f809 	bl	8013968 <iprintf>
                  ipr->p == NULL);
#endif /* IP_REASS_CHECK_OVERLAP */
      /* this is the first fragment we ever received for this ip datagram */
      ipr->p = new_p;
 8012956:	68fb      	ldr	r3, [r7, #12]
 8012958:	68ba      	ldr	r2, [r7, #8]
 801295a:	605a      	str	r2, [r3, #4]
    }
  }

  /* At this point, the validation part begins: */
  /* If we already received the last fragment */
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
 801295c:	687b      	ldr	r3, [r7, #4]
 801295e:	2b00      	cmp	r3, #0
 8012960:	d105      	bne.n	801296e <ip_reass_chain_frag_into_datagram_and_validate+0x1fe>
 8012962:	68fb      	ldr	r3, [r7, #12]
 8012964:	7f9b      	ldrb	r3, [r3, #30]
 8012966:	f003 0301 	and.w	r3, r3, #1
 801296a:	2b00      	cmp	r3, #0
 801296c:	d059      	beq.n	8012a22 <ip_reass_chain_frag_into_datagram_and_validate+0x2b2>
    /* and had no holes so far */
    if (valid) {
 801296e:	6a3b      	ldr	r3, [r7, #32]
 8012970:	2b00      	cmp	r3, #0
 8012972:	d04f      	beq.n	8012a14 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      /* then check if the rest of the fragments is here */
      /* Check if the queue starts with the first datagram */
      if ((ipr->p == NULL) || (((struct ip_reass_helper *)ipr->p->payload)->start != 0)) {
 8012974:	68fb      	ldr	r3, [r7, #12]
 8012976:	685b      	ldr	r3, [r3, #4]
 8012978:	2b00      	cmp	r3, #0
 801297a:	d006      	beq.n	801298a <ip_reass_chain_frag_into_datagram_and_validate+0x21a>
 801297c:	68fb      	ldr	r3, [r7, #12]
 801297e:	685b      	ldr	r3, [r3, #4]
 8012980:	685b      	ldr	r3, [r3, #4]
 8012982:	889b      	ldrh	r3, [r3, #4]
 8012984:	b29b      	uxth	r3, r3
 8012986:	2b00      	cmp	r3, #0
 8012988:	d002      	beq.n	8012990 <ip_reass_chain_frag_into_datagram_and_validate+0x220>
        valid = 0;
 801298a:	2300      	movs	r3, #0
 801298c:	623b      	str	r3, [r7, #32]
 801298e:	e041      	b.n	8012a14 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      } else {
        /* and check that there are no holes after this datagram */
        iprh_prev = iprh;
 8012990:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012992:	62bb      	str	r3, [r7, #40]	; 0x28
        q = iprh->next_pbuf;
 8012994:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012996:	681b      	ldr	r3, [r3, #0]
 8012998:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 801299a:	e012      	b.n	80129c2 <ip_reass_chain_frag_into_datagram_and_validate+0x252>
          iprh = (struct ip_reass_helper *)q->payload;
 801299c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801299e:	685b      	ldr	r3, [r3, #4]
 80129a0:	62fb      	str	r3, [r7, #44]	; 0x2c
          if (iprh_prev->end != iprh->start) {
 80129a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80129a4:	88db      	ldrh	r3, [r3, #6]
 80129a6:	b29a      	uxth	r2, r3
 80129a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80129aa:	889b      	ldrh	r3, [r3, #4]
 80129ac:	b29b      	uxth	r3, r3
 80129ae:	429a      	cmp	r2, r3
 80129b0:	d002      	beq.n	80129b8 <ip_reass_chain_frag_into_datagram_and_validate+0x248>
            valid = 0;
 80129b2:	2300      	movs	r3, #0
 80129b4:	623b      	str	r3, [r7, #32]
            break;
 80129b6:	e007      	b.n	80129c8 <ip_reass_chain_frag_into_datagram_and_validate+0x258>
          }
          iprh_prev = iprh;
 80129b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80129ba:	62bb      	str	r3, [r7, #40]	; 0x28
          q = iprh->next_pbuf;
 80129bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80129be:	681b      	ldr	r3, [r3, #0]
 80129c0:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 80129c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80129c4:	2b00      	cmp	r3, #0
 80129c6:	d1e9      	bne.n	801299c <ip_reass_chain_frag_into_datagram_and_validate+0x22c>
        }
        /* if still valid, all fragments are received
         * (because to the MF==0 already arrived */
        if (valid) {
 80129c8:	6a3b      	ldr	r3, [r7, #32]
 80129ca:	2b00      	cmp	r3, #0
 80129cc:	d022      	beq.n	8012a14 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
          LWIP_ASSERT("sanity check", ipr->p != NULL);
 80129ce:	68fb      	ldr	r3, [r7, #12]
 80129d0:	685b      	ldr	r3, [r3, #4]
 80129d2:	2b00      	cmp	r3, #0
 80129d4:	d106      	bne.n	80129e4 <ip_reass_chain_frag_into_datagram_and_validate+0x274>
 80129d6:	4b15      	ldr	r3, [pc, #84]	; (8012a2c <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 80129d8:	f240 12df 	movw	r2, #479	; 0x1df
 80129dc:	4917      	ldr	r1, [pc, #92]	; (8012a3c <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 80129de:	4815      	ldr	r0, [pc, #84]	; (8012a34 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 80129e0:	f000 ffc2 	bl	8013968 <iprintf>
          LWIP_ASSERT("sanity check",
 80129e4:	68fb      	ldr	r3, [r7, #12]
 80129e6:	685b      	ldr	r3, [r3, #4]
 80129e8:	685b      	ldr	r3, [r3, #4]
 80129ea:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80129ec:	429a      	cmp	r2, r3
 80129ee:	d106      	bne.n	80129fe <ip_reass_chain_frag_into_datagram_and_validate+0x28e>
 80129f0:	4b0e      	ldr	r3, [pc, #56]	; (8012a2c <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 80129f2:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 80129f6:	4911      	ldr	r1, [pc, #68]	; (8012a3c <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 80129f8:	480e      	ldr	r0, [pc, #56]	; (8012a34 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 80129fa:	f000 ffb5 	bl	8013968 <iprintf>
                      ((struct ip_reass_helper *)ipr->p->payload) != iprh);
          LWIP_ASSERT("validate_datagram:next_pbuf!=NULL",
 80129fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012a00:	681b      	ldr	r3, [r3, #0]
 8012a02:	2b00      	cmp	r3, #0
 8012a04:	d006      	beq.n	8012a14 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
 8012a06:	4b09      	ldr	r3, [pc, #36]	; (8012a2c <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8012a08:	f44f 72f1 	mov.w	r2, #482	; 0x1e2
 8012a0c:	490c      	ldr	r1, [pc, #48]	; (8012a40 <ip_reass_chain_frag_into_datagram_and_validate+0x2d0>)
 8012a0e:	4809      	ldr	r0, [pc, #36]	; (8012a34 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8012a10:	f000 ffaa 	bl	8013968 <iprintf>
      }
    }
    /* If valid is 0 here, there are some fragments missing in the middle
     * (since MF == 0 has already arrived). Such datagrams simply time out if
     * no more fragments are received... */
    return valid ? IP_REASS_VALIDATE_TELEGRAM_FINISHED : IP_REASS_VALIDATE_PBUF_QUEUED;
 8012a14:	6a3b      	ldr	r3, [r7, #32]
 8012a16:	2b00      	cmp	r3, #0
 8012a18:	bf14      	ite	ne
 8012a1a:	2301      	movne	r3, #1
 8012a1c:	2300      	moveq	r3, #0
 8012a1e:	b2db      	uxtb	r3, r3
 8012a20:	e000      	b.n	8012a24 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  /* If we come here, not all fragments were received, yet! */
  return IP_REASS_VALIDATE_PBUF_QUEUED; /* not yet valid! */
 8012a22:	2300      	movs	r3, #0
}
 8012a24:	4618      	mov	r0, r3
 8012a26:	3730      	adds	r7, #48	; 0x30
 8012a28:	46bd      	mov	sp, r7
 8012a2a:	bd80      	pop	{r7, pc}
 8012a2c:	08017098 	.word	0x08017098
 8012a30:	0801717c 	.word	0x0801717c
 8012a34:	080170e0 	.word	0x080170e0
 8012a38:	0801719c 	.word	0x0801719c
 8012a3c:	080171d4 	.word	0x080171d4
 8012a40:	080171e4 	.word	0x080171e4

08012a44 <ip4_reass>:
 * @param p points to a pbuf chain of the fragment
 * @return NULL if reassembly is incomplete, ? otherwise
 */
struct pbuf *
ip4_reass(struct pbuf *p)
{
 8012a44:	b580      	push	{r7, lr}
 8012a46:	b08e      	sub	sp, #56	; 0x38
 8012a48:	af00      	add	r7, sp, #0
 8012a4a:	6078      	str	r0, [r7, #4]
  u16_t offset, len, clen;
  u8_t hlen;
  int valid;
  int is_last;

  IPFRAG_STATS_INC(ip_frag.recv);
 8012a4c:	4b9d      	ldr	r3, [pc, #628]	; (8012cc4 <ip4_reass+0x280>)
 8012a4e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8012a50:	3301      	adds	r3, #1
 8012a52:	b29a      	uxth	r2, r3
 8012a54:	4b9b      	ldr	r3, [pc, #620]	; (8012cc4 <ip4_reass+0x280>)
 8012a56:	865a      	strh	r2, [r3, #50]	; 0x32
  MIB2_STATS_INC(mib2.ipreasmreqds);

  fraghdr = (struct ip_hdr *)p->payload;
 8012a58:	687b      	ldr	r3, [r7, #4]
 8012a5a:	685b      	ldr	r3, [r3, #4]
 8012a5c:	62bb      	str	r3, [r7, #40]	; 0x28

  if (IPH_HL_BYTES(fraghdr) != IP_HLEN) {
 8012a5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012a60:	781b      	ldrb	r3, [r3, #0]
 8012a62:	f003 030f 	and.w	r3, r3, #15
 8012a66:	b2db      	uxtb	r3, r3
 8012a68:	009b      	lsls	r3, r3, #2
 8012a6a:	b2db      	uxtb	r3, r3
 8012a6c:	2b14      	cmp	r3, #20
 8012a6e:	d008      	beq.n	8012a82 <ip4_reass+0x3e>
    LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: IP options currently not supported!\n"));
    IPFRAG_STATS_INC(ip_frag.err);
 8012a70:	4b94      	ldr	r3, [pc, #592]	; (8012cc4 <ip4_reass+0x280>)
 8012a72:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8012a76:	3301      	adds	r3, #1
 8012a78:	b29a      	uxth	r2, r3
 8012a7a:	4b92      	ldr	r3, [pc, #584]	; (8012cc4 <ip4_reass+0x280>)
 8012a7c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
    goto nullreturn;
 8012a80:	e17c      	b.n	8012d7c <ip4_reass+0x338>
  }

  offset = IPH_OFFSET_BYTES(fraghdr);
 8012a82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012a84:	88db      	ldrh	r3, [r3, #6]
 8012a86:	b29b      	uxth	r3, r3
 8012a88:	4618      	mov	r0, r3
 8012a8a:	f7f5 fff9 	bl	8008a80 <lwip_htons>
 8012a8e:	4603      	mov	r3, r0
 8012a90:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8012a94:	b29b      	uxth	r3, r3
 8012a96:	00db      	lsls	r3, r3, #3
 8012a98:	84fb      	strh	r3, [r7, #38]	; 0x26
  len = lwip_ntohs(IPH_LEN(fraghdr));
 8012a9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012a9c:	885b      	ldrh	r3, [r3, #2]
 8012a9e:	b29b      	uxth	r3, r3
 8012aa0:	4618      	mov	r0, r3
 8012aa2:	f7f5 ffed 	bl	8008a80 <lwip_htons>
 8012aa6:	4603      	mov	r3, r0
 8012aa8:	84bb      	strh	r3, [r7, #36]	; 0x24
  hlen = IPH_HL_BYTES(fraghdr);
 8012aaa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012aac:	781b      	ldrb	r3, [r3, #0]
 8012aae:	f003 030f 	and.w	r3, r3, #15
 8012ab2:	b2db      	uxtb	r3, r3
 8012ab4:	009b      	lsls	r3, r3, #2
 8012ab6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  if (hlen > len) {
 8012aba:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8012abe:	b29b      	uxth	r3, r3
 8012ac0:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8012ac2:	429a      	cmp	r2, r3
 8012ac4:	f0c0 8157 	bcc.w	8012d76 <ip4_reass+0x332>
    /* invalid datagram */
    goto nullreturn;
  }
  len = (u16_t)(len - hlen);
 8012ac8:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8012acc:	b29b      	uxth	r3, r3
 8012ace:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8012ad0:	1ad3      	subs	r3, r2, r3
 8012ad2:	84bb      	strh	r3, [r7, #36]	; 0x24

  /* Check if we are allowed to enqueue more datagrams. */
  clen = pbuf_clen(p);
 8012ad4:	6878      	ldr	r0, [r7, #4]
 8012ad6:	f7f7 fd23 	bl	800a520 <pbuf_clen>
 8012ada:	4603      	mov	r3, r0
 8012adc:	843b      	strh	r3, [r7, #32]
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
 8012ade:	4b7a      	ldr	r3, [pc, #488]	; (8012cc8 <ip4_reass+0x284>)
 8012ae0:	881b      	ldrh	r3, [r3, #0]
 8012ae2:	461a      	mov	r2, r3
 8012ae4:	8c3b      	ldrh	r3, [r7, #32]
 8012ae6:	4413      	add	r3, r2
 8012ae8:	2b0a      	cmp	r3, #10
 8012aea:	dd15      	ble.n	8012b18 <ip4_reass+0xd4>
#if IP_REASS_FREE_OLDEST
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 8012aec:	8c3b      	ldrh	r3, [r7, #32]
 8012aee:	4619      	mov	r1, r3
 8012af0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8012af2:	f7ff fd6b 	bl	80125cc <ip_reass_remove_oldest_datagram>
 8012af6:	4603      	mov	r3, r0
 8012af8:	2b00      	cmp	r3, #0
 8012afa:	d006      	beq.n	8012b0a <ip4_reass+0xc6>
        ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS))
 8012afc:	4b72      	ldr	r3, [pc, #456]	; (8012cc8 <ip4_reass+0x284>)
 8012afe:	881b      	ldrh	r3, [r3, #0]
 8012b00:	461a      	mov	r2, r3
 8012b02:	8c3b      	ldrh	r3, [r7, #32]
 8012b04:	4413      	add	r3, r2
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 8012b06:	2b0a      	cmp	r3, #10
 8012b08:	dd06      	ble.n	8012b18 <ip4_reass+0xd4>
#endif /* IP_REASS_FREE_OLDEST */
    {
      /* No datagram could be freed and still too many pbufs enqueued */
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: Overflow condition: pbufct=%d, clen=%d, MAX=%d\n",
                                   ip_reass_pbufcount, clen, IP_REASS_MAX_PBUFS));
      IPFRAG_STATS_INC(ip_frag.memerr);
 8012b0a:	4b6e      	ldr	r3, [pc, #440]	; (8012cc4 <ip4_reass+0x280>)
 8012b0c:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 8012b0e:	3301      	adds	r3, #1
 8012b10:	b29a      	uxth	r2, r3
 8012b12:	4b6c      	ldr	r3, [pc, #432]	; (8012cc4 <ip4_reass+0x280>)
 8012b14:	879a      	strh	r2, [r3, #60]	; 0x3c
      /* @todo: send ICMP time exceeded here? */
      /* drop this pbuf */
      goto nullreturn;
 8012b16:	e131      	b.n	8012d7c <ip4_reass+0x338>
    }
  }

  /* Look for the datagram the fragment belongs to in the current datagram queue,
   * remembering the previous in the queue for later dequeueing. */
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 8012b18:	4b6c      	ldr	r3, [pc, #432]	; (8012ccc <ip4_reass+0x288>)
 8012b1a:	681b      	ldr	r3, [r3, #0]
 8012b1c:	633b      	str	r3, [r7, #48]	; 0x30
 8012b1e:	e01e      	b.n	8012b5e <ip4_reass+0x11a>
    /* Check if the incoming fragment matches the one currently present
       in the reassembly buffer. If so, we proceed with copying the
       fragment into the buffer. */
    if (IP_ADDRESSES_AND_ID_MATCH(&ipr->iphdr, fraghdr)) {
 8012b20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012b22:	695a      	ldr	r2, [r3, #20]
 8012b24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012b26:	68db      	ldr	r3, [r3, #12]
 8012b28:	429a      	cmp	r2, r3
 8012b2a:	d115      	bne.n	8012b58 <ip4_reass+0x114>
 8012b2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012b2e:	699a      	ldr	r2, [r3, #24]
 8012b30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012b32:	691b      	ldr	r3, [r3, #16]
 8012b34:	429a      	cmp	r2, r3
 8012b36:	d10f      	bne.n	8012b58 <ip4_reass+0x114>
 8012b38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012b3a:	899a      	ldrh	r2, [r3, #12]
 8012b3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012b3e:	889b      	ldrh	r3, [r3, #4]
 8012b40:	b29b      	uxth	r3, r3
 8012b42:	429a      	cmp	r2, r3
 8012b44:	d108      	bne.n	8012b58 <ip4_reass+0x114>
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: matching previous fragment ID=%"X16_F"\n",
                                   lwip_ntohs(IPH_ID(fraghdr))));
      IPFRAG_STATS_INC(ip_frag.cachehit);
 8012b46:	4b5f      	ldr	r3, [pc, #380]	; (8012cc4 <ip4_reass+0x280>)
 8012b48:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8012b4c:	3301      	adds	r3, #1
 8012b4e:	b29a      	uxth	r2, r3
 8012b50:	4b5c      	ldr	r3, [pc, #368]	; (8012cc4 <ip4_reass+0x280>)
 8012b52:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
      break;
 8012b56:	e005      	b.n	8012b64 <ip4_reass+0x120>
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 8012b58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012b5a:	681b      	ldr	r3, [r3, #0]
 8012b5c:	633b      	str	r3, [r7, #48]	; 0x30
 8012b5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012b60:	2b00      	cmp	r3, #0
 8012b62:	d1dd      	bne.n	8012b20 <ip4_reass+0xdc>
    }
  }

  if (ipr == NULL) {
 8012b64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012b66:	2b00      	cmp	r3, #0
 8012b68:	d109      	bne.n	8012b7e <ip4_reass+0x13a>
    /* Enqueue a new datagram into the datagram queue */
    ipr = ip_reass_enqueue_new_datagram(fraghdr, clen);
 8012b6a:	8c3b      	ldrh	r3, [r7, #32]
 8012b6c:	4619      	mov	r1, r3
 8012b6e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8012b70:	f7ff fd8e 	bl	8012690 <ip_reass_enqueue_new_datagram>
 8012b74:	6338      	str	r0, [r7, #48]	; 0x30
    /* Bail if unable to enqueue */
    if (ipr == NULL) {
 8012b76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012b78:	2b00      	cmp	r3, #0
 8012b7a:	d11c      	bne.n	8012bb6 <ip4_reass+0x172>
      goto nullreturn;
 8012b7c:	e0fe      	b.n	8012d7c <ip4_reass+0x338>
    }
  } else {
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 8012b7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012b80:	88db      	ldrh	r3, [r3, #6]
 8012b82:	b29b      	uxth	r3, r3
 8012b84:	4618      	mov	r0, r3
 8012b86:	f7f5 ff7b 	bl	8008a80 <lwip_htons>
 8012b8a:	4603      	mov	r3, r0
 8012b8c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8012b90:	2b00      	cmp	r3, #0
 8012b92:	d110      	bne.n	8012bb6 <ip4_reass+0x172>
        ((lwip_ntohs(IPH_OFFSET(&ipr->iphdr)) & IP_OFFMASK) != 0)) {
 8012b94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012b96:	89db      	ldrh	r3, [r3, #14]
 8012b98:	4618      	mov	r0, r3
 8012b9a:	f7f5 ff71 	bl	8008a80 <lwip_htons>
 8012b9e:	4603      	mov	r3, r0
 8012ba0:	f3c3 030c 	ubfx	r3, r3, #0, #13
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 8012ba4:	2b00      	cmp	r3, #0
 8012ba6:	d006      	beq.n	8012bb6 <ip4_reass+0x172>
      /* ipr->iphdr is not the header from the first fragment, but fraghdr is
       * -> copy fraghdr into ipr->iphdr since we want to have the header
       * of the first fragment (for ICMP time exceeded and later, for copying
       * all options, if supported)*/
      SMEMCPY(&ipr->iphdr, fraghdr, IP_HLEN);
 8012ba8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012baa:	3308      	adds	r3, #8
 8012bac:	2214      	movs	r2, #20
 8012bae:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8012bb0:	4618      	mov	r0, r3
 8012bb2:	f000 fe2e 	bl	8013812 <memcpy>

  /* At this point, we have either created a new entry or pointing
   * to an existing one */

  /* check for 'no more fragments', and update queue entry*/
  is_last = (IPH_OFFSET(fraghdr) & PP_NTOHS(IP_MF)) == 0;
 8012bb6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012bb8:	88db      	ldrh	r3, [r3, #6]
 8012bba:	b29b      	uxth	r3, r3
 8012bbc:	f003 0320 	and.w	r3, r3, #32
 8012bc0:	2b00      	cmp	r3, #0
 8012bc2:	bf0c      	ite	eq
 8012bc4:	2301      	moveq	r3, #1
 8012bc6:	2300      	movne	r3, #0
 8012bc8:	b2db      	uxtb	r3, r3
 8012bca:	61fb      	str	r3, [r7, #28]
  if (is_last) {
 8012bcc:	69fb      	ldr	r3, [r7, #28]
 8012bce:	2b00      	cmp	r3, #0
 8012bd0:	d00e      	beq.n	8012bf0 <ip4_reass+0x1ac>
    u16_t datagram_len = (u16_t)(offset + len);
 8012bd2:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8012bd4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8012bd6:	4413      	add	r3, r2
 8012bd8:	837b      	strh	r3, [r7, #26]
    if ((datagram_len < offset) || (datagram_len > (0xFFFF - IP_HLEN))) {
 8012bda:	8b7a      	ldrh	r2, [r7, #26]
 8012bdc:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8012bde:	429a      	cmp	r2, r3
 8012be0:	f0c0 80a7 	bcc.w	8012d32 <ip4_reass+0x2ee>
 8012be4:	8b7b      	ldrh	r3, [r7, #26]
 8012be6:	f64f 72eb 	movw	r2, #65515	; 0xffeb
 8012bea:	4293      	cmp	r3, r2
 8012bec:	f200 80a1 	bhi.w	8012d32 <ip4_reass+0x2ee>
      goto nullreturn_ipr;
    }
  }
  /* find the right place to insert this pbuf */
  /* @todo: trim pbufs if fragments are overlapping */
  valid = ip_reass_chain_frag_into_datagram_and_validate(ipr, p, is_last);
 8012bf0:	69fa      	ldr	r2, [r7, #28]
 8012bf2:	6879      	ldr	r1, [r7, #4]
 8012bf4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8012bf6:	f7ff fdbb 	bl	8012770 <ip_reass_chain_frag_into_datagram_and_validate>
 8012bfa:	6178      	str	r0, [r7, #20]
  if (valid == IP_REASS_VALIDATE_PBUF_DROPPED) {
 8012bfc:	697b      	ldr	r3, [r7, #20]
 8012bfe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012c02:	f000 8098 	beq.w	8012d36 <ip4_reass+0x2f2>
  /* if we come here, the pbuf has been enqueued */

  /* Track the current number of pbufs current 'in-flight', in order to limit
     the number of fragments that may be enqueued at any one time
     (overflow checked by testing against IP_REASS_MAX_PBUFS) */
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 8012c06:	4b30      	ldr	r3, [pc, #192]	; (8012cc8 <ip4_reass+0x284>)
 8012c08:	881a      	ldrh	r2, [r3, #0]
 8012c0a:	8c3b      	ldrh	r3, [r7, #32]
 8012c0c:	4413      	add	r3, r2
 8012c0e:	b29a      	uxth	r2, r3
 8012c10:	4b2d      	ldr	r3, [pc, #180]	; (8012cc8 <ip4_reass+0x284>)
 8012c12:	801a      	strh	r2, [r3, #0]
  if (is_last) {
 8012c14:	69fb      	ldr	r3, [r7, #28]
 8012c16:	2b00      	cmp	r3, #0
 8012c18:	d00d      	beq.n	8012c36 <ip4_reass+0x1f2>
    u16_t datagram_len = (u16_t)(offset + len);
 8012c1a:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8012c1c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8012c1e:	4413      	add	r3, r2
 8012c20:	827b      	strh	r3, [r7, #18]
    ipr->datagram_len = datagram_len;
 8012c22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012c24:	8a7a      	ldrh	r2, [r7, #18]
 8012c26:	839a      	strh	r2, [r3, #28]
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 8012c28:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012c2a:	7f9b      	ldrb	r3, [r3, #30]
 8012c2c:	f043 0301 	orr.w	r3, r3, #1
 8012c30:	b2da      	uxtb	r2, r3
 8012c32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012c34:	779a      	strb	r2, [r3, #30]
    LWIP_DEBUGF(IP_REASS_DEBUG,
                ("ip4_reass: last fragment seen, total len %"S16_F"\n",
                 ipr->datagram_len));
  }

  if (valid == IP_REASS_VALIDATE_TELEGRAM_FINISHED) {
 8012c36:	697b      	ldr	r3, [r7, #20]
 8012c38:	2b01      	cmp	r3, #1
 8012c3a:	d178      	bne.n	8012d2e <ip4_reass+0x2ea>
    struct ip_reassdata *ipr_prev;
    /* the totally last fragment (flag more fragments = 0) was received at least
     * once AND all fragments are received */
    u16_t datagram_len = (u16_t)(ipr->datagram_len + IP_HLEN);
 8012c3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012c3e:	8b9b      	ldrh	r3, [r3, #28]
 8012c40:	3314      	adds	r3, #20
 8012c42:	823b      	strh	r3, [r7, #16]

    /* save the second pbuf before copying the header over the pointer */
    r = ((struct ip_reass_helper *)ipr->p->payload)->next_pbuf;
 8012c44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012c46:	685b      	ldr	r3, [r3, #4]
 8012c48:	685b      	ldr	r3, [r3, #4]
 8012c4a:	681b      	ldr	r3, [r3, #0]
 8012c4c:	637b      	str	r3, [r7, #52]	; 0x34

    /* copy the original ip header back to the first pbuf */
    fraghdr = (struct ip_hdr *)(ipr->p->payload);
 8012c4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012c50:	685b      	ldr	r3, [r3, #4]
 8012c52:	685b      	ldr	r3, [r3, #4]
 8012c54:	62bb      	str	r3, [r7, #40]	; 0x28
    SMEMCPY(fraghdr, &ipr->iphdr, IP_HLEN);
 8012c56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012c58:	3308      	adds	r3, #8
 8012c5a:	2214      	movs	r2, #20
 8012c5c:	4619      	mov	r1, r3
 8012c5e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8012c60:	f000 fdd7 	bl	8013812 <memcpy>
    IPH_LEN_SET(fraghdr, lwip_htons(datagram_len));
 8012c64:	8a3b      	ldrh	r3, [r7, #16]
 8012c66:	4618      	mov	r0, r3
 8012c68:	f7f5 ff0a 	bl	8008a80 <lwip_htons>
 8012c6c:	4603      	mov	r3, r0
 8012c6e:	461a      	mov	r2, r3
 8012c70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012c72:	805a      	strh	r2, [r3, #2]
    IPH_OFFSET_SET(fraghdr, 0);
 8012c74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012c76:	2200      	movs	r2, #0
 8012c78:	719a      	strb	r2, [r3, #6]
 8012c7a:	2200      	movs	r2, #0
 8012c7c:	71da      	strb	r2, [r3, #7]
    IPH_CHKSUM_SET(fraghdr, 0);
 8012c7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012c80:	2200      	movs	r2, #0
 8012c82:	729a      	strb	r2, [r3, #10]
 8012c84:	2200      	movs	r2, #0
 8012c86:	72da      	strb	r2, [r3, #11]
    IF__NETIF_CHECKSUM_ENABLED(ip_current_input_netif(), NETIF_CHECKSUM_GEN_IP) {
      IPH_CHKSUM_SET(fraghdr, inet_chksum(fraghdr, IP_HLEN));
    }
#endif /* CHECKSUM_GEN_IP */

    p = ipr->p;
 8012c88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012c8a:	685b      	ldr	r3, [r3, #4]
 8012c8c:	607b      	str	r3, [r7, #4]

    /* chain together the pbufs contained within the reass_data list. */
    while (r != NULL) {
 8012c8e:	e00d      	b.n	8012cac <ip4_reass+0x268>
      iprh = (struct ip_reass_helper *)r->payload;
 8012c90:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012c92:	685b      	ldr	r3, [r3, #4]
 8012c94:	60fb      	str	r3, [r7, #12]

      /* hide the ip header for every succeeding fragment */
      pbuf_remove_header(r, IP_HLEN);
 8012c96:	2114      	movs	r1, #20
 8012c98:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8012c9a:	f7f7 fb2d 	bl	800a2f8 <pbuf_remove_header>
      pbuf_cat(p, r);
 8012c9e:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8012ca0:	6878      	ldr	r0, [r7, #4]
 8012ca2:	f7f7 fc7d 	bl	800a5a0 <pbuf_cat>
      r = iprh->next_pbuf;
 8012ca6:	68fb      	ldr	r3, [r7, #12]
 8012ca8:	681b      	ldr	r3, [r3, #0]
 8012caa:	637b      	str	r3, [r7, #52]	; 0x34
    while (r != NULL) {
 8012cac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012cae:	2b00      	cmp	r3, #0
 8012cb0:	d1ee      	bne.n	8012c90 <ip4_reass+0x24c>
    }

    /* find the previous entry in the linked list */
    if (ipr == reassdatagrams) {
 8012cb2:	4b06      	ldr	r3, [pc, #24]	; (8012ccc <ip4_reass+0x288>)
 8012cb4:	681b      	ldr	r3, [r3, #0]
 8012cb6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8012cb8:	429a      	cmp	r2, r3
 8012cba:	d109      	bne.n	8012cd0 <ip4_reass+0x28c>
      ipr_prev = NULL;
 8012cbc:	2300      	movs	r3, #0
 8012cbe:	62fb      	str	r3, [r7, #44]	; 0x2c
 8012cc0:	e017      	b.n	8012cf2 <ip4_reass+0x2ae>
 8012cc2:	bf00      	nop
 8012cc4:	2000c64c 	.word	0x2000c64c
 8012cc8:	2000c8a0 	.word	0x2000c8a0
 8012ccc:	2000c89c 	.word	0x2000c89c
    } else {
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 8012cd0:	4b31      	ldr	r3, [pc, #196]	; (8012d98 <ip4_reass+0x354>)
 8012cd2:	681b      	ldr	r3, [r3, #0]
 8012cd4:	62fb      	str	r3, [r7, #44]	; 0x2c
 8012cd6:	e007      	b.n	8012ce8 <ip4_reass+0x2a4>
        if (ipr_prev->next == ipr) {
 8012cd8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012cda:	681b      	ldr	r3, [r3, #0]
 8012cdc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8012cde:	429a      	cmp	r2, r3
 8012ce0:	d006      	beq.n	8012cf0 <ip4_reass+0x2ac>
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 8012ce2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012ce4:	681b      	ldr	r3, [r3, #0]
 8012ce6:	62fb      	str	r3, [r7, #44]	; 0x2c
 8012ce8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012cea:	2b00      	cmp	r3, #0
 8012cec:	d1f4      	bne.n	8012cd8 <ip4_reass+0x294>
 8012cee:	e000      	b.n	8012cf2 <ip4_reass+0x2ae>
          break;
 8012cf0:	bf00      	nop
        }
      }
    }

    /* release the sources allocate for the fragment queue entry */
    ip_reass_dequeue_datagram(ipr, ipr_prev);
 8012cf2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8012cf4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8012cf6:	f7ff fd0d 	bl	8012714 <ip_reass_dequeue_datagram>

    /* and adjust the number of pbufs currently queued for reassembly. */
    clen = pbuf_clen(p);
 8012cfa:	6878      	ldr	r0, [r7, #4]
 8012cfc:	f7f7 fc10 	bl	800a520 <pbuf_clen>
 8012d00:	4603      	mov	r3, r0
 8012d02:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("ip_reass_pbufcount >= clen", ip_reass_pbufcount >= clen);
 8012d04:	4b25      	ldr	r3, [pc, #148]	; (8012d9c <ip4_reass+0x358>)
 8012d06:	881b      	ldrh	r3, [r3, #0]
 8012d08:	8c3a      	ldrh	r2, [r7, #32]
 8012d0a:	429a      	cmp	r2, r3
 8012d0c:	d906      	bls.n	8012d1c <ip4_reass+0x2d8>
 8012d0e:	4b24      	ldr	r3, [pc, #144]	; (8012da0 <ip4_reass+0x35c>)
 8012d10:	f240 229b 	movw	r2, #667	; 0x29b
 8012d14:	4923      	ldr	r1, [pc, #140]	; (8012da4 <ip4_reass+0x360>)
 8012d16:	4824      	ldr	r0, [pc, #144]	; (8012da8 <ip4_reass+0x364>)
 8012d18:	f000 fe26 	bl	8013968 <iprintf>
    ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - clen);
 8012d1c:	4b1f      	ldr	r3, [pc, #124]	; (8012d9c <ip4_reass+0x358>)
 8012d1e:	881a      	ldrh	r2, [r3, #0]
 8012d20:	8c3b      	ldrh	r3, [r7, #32]
 8012d22:	1ad3      	subs	r3, r2, r3
 8012d24:	b29a      	uxth	r2, r3
 8012d26:	4b1d      	ldr	r3, [pc, #116]	; (8012d9c <ip4_reass+0x358>)
 8012d28:	801a      	strh	r2, [r3, #0]

    MIB2_STATS_INC(mib2.ipreasmoks);

    /* Return the pbuf chain */
    return p;
 8012d2a:	687b      	ldr	r3, [r7, #4]
 8012d2c:	e030      	b.n	8012d90 <ip4_reass+0x34c>
  }
  /* the datagram is not (yet?) reassembled completely */
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_pbufcount: %d out\n", ip_reass_pbufcount));
  return NULL;
 8012d2e:	2300      	movs	r3, #0
 8012d30:	e02e      	b.n	8012d90 <ip4_reass+0x34c>
      goto nullreturn_ipr;
 8012d32:	bf00      	nop
 8012d34:	e000      	b.n	8012d38 <ip4_reass+0x2f4>
    goto nullreturn_ipr;
 8012d36:	bf00      	nop

nullreturn_ipr:
  LWIP_ASSERT("ipr != NULL", ipr != NULL);
 8012d38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012d3a:	2b00      	cmp	r3, #0
 8012d3c:	d106      	bne.n	8012d4c <ip4_reass+0x308>
 8012d3e:	4b18      	ldr	r3, [pc, #96]	; (8012da0 <ip4_reass+0x35c>)
 8012d40:	f44f 722a 	mov.w	r2, #680	; 0x2a8
 8012d44:	4919      	ldr	r1, [pc, #100]	; (8012dac <ip4_reass+0x368>)
 8012d46:	4818      	ldr	r0, [pc, #96]	; (8012da8 <ip4_reass+0x364>)
 8012d48:	f000 fe0e 	bl	8013968 <iprintf>
  if (ipr->p == NULL) {
 8012d4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012d4e:	685b      	ldr	r3, [r3, #4]
 8012d50:	2b00      	cmp	r3, #0
 8012d52:	d112      	bne.n	8012d7a <ip4_reass+0x336>
    /* dropped pbuf after creating a new datagram entry: remove the entry, too */
    LWIP_ASSERT("not firstalthough just enqueued", ipr == reassdatagrams);
 8012d54:	4b10      	ldr	r3, [pc, #64]	; (8012d98 <ip4_reass+0x354>)
 8012d56:	681b      	ldr	r3, [r3, #0]
 8012d58:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8012d5a:	429a      	cmp	r2, r3
 8012d5c:	d006      	beq.n	8012d6c <ip4_reass+0x328>
 8012d5e:	4b10      	ldr	r3, [pc, #64]	; (8012da0 <ip4_reass+0x35c>)
 8012d60:	f240 22ab 	movw	r2, #683	; 0x2ab
 8012d64:	4912      	ldr	r1, [pc, #72]	; (8012db0 <ip4_reass+0x36c>)
 8012d66:	4810      	ldr	r0, [pc, #64]	; (8012da8 <ip4_reass+0x364>)
 8012d68:	f000 fdfe 	bl	8013968 <iprintf>
    ip_reass_dequeue_datagram(ipr, NULL);
 8012d6c:	2100      	movs	r1, #0
 8012d6e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8012d70:	f7ff fcd0 	bl	8012714 <ip_reass_dequeue_datagram>
 8012d74:	e002      	b.n	8012d7c <ip4_reass+0x338>
    goto nullreturn;
 8012d76:	bf00      	nop
 8012d78:	e000      	b.n	8012d7c <ip4_reass+0x338>
  }

nullreturn:
 8012d7a:	bf00      	nop
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: nullreturn\n"));
  IPFRAG_STATS_INC(ip_frag.drop);
 8012d7c:	4b0d      	ldr	r3, [pc, #52]	; (8012db4 <ip4_reass+0x370>)
 8012d7e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8012d80:	3301      	adds	r3, #1
 8012d82:	b29a      	uxth	r2, r3
 8012d84:	4b0b      	ldr	r3, [pc, #44]	; (8012db4 <ip4_reass+0x370>)
 8012d86:	86da      	strh	r2, [r3, #54]	; 0x36
  pbuf_free(p);
 8012d88:	6878      	ldr	r0, [r7, #4]
 8012d8a:	f7f7 fb3b 	bl	800a404 <pbuf_free>
  return NULL;
 8012d8e:	2300      	movs	r3, #0
}
 8012d90:	4618      	mov	r0, r3
 8012d92:	3738      	adds	r7, #56	; 0x38
 8012d94:	46bd      	mov	sp, r7
 8012d96:	bd80      	pop	{r7, pc}
 8012d98:	2000c89c 	.word	0x2000c89c
 8012d9c:	2000c8a0 	.word	0x2000c8a0
 8012da0:	08017098 	.word	0x08017098
 8012da4:	08017208 	.word	0x08017208
 8012da8:	080170e0 	.word	0x080170e0
 8012dac:	08017224 	.word	0x08017224
 8012db0:	08017230 	.word	0x08017230
 8012db4:	2000c64c 	.word	0x2000c64c

08012db8 <ip_frag_alloc_pbuf_custom_ref>:
#if IP_FRAG
#if !LWIP_NETIF_TX_SINGLE_PBUF
/** Allocate a new struct pbuf_custom_ref */
static struct pbuf_custom_ref *
ip_frag_alloc_pbuf_custom_ref(void)
{
 8012db8:	b580      	push	{r7, lr}
 8012dba:	af00      	add	r7, sp, #0
  return (struct pbuf_custom_ref *)memp_malloc(MEMP_FRAG_PBUF);
 8012dbc:	2005      	movs	r0, #5
 8012dbe:	f7f6 fc01 	bl	80095c4 <memp_malloc>
 8012dc2:	4603      	mov	r3, r0
}
 8012dc4:	4618      	mov	r0, r3
 8012dc6:	bd80      	pop	{r7, pc}

08012dc8 <ip_frag_free_pbuf_custom_ref>:

/** Free a struct pbuf_custom_ref */
static void
ip_frag_free_pbuf_custom_ref(struct pbuf_custom_ref *p)
{
 8012dc8:	b580      	push	{r7, lr}
 8012dca:	b082      	sub	sp, #8
 8012dcc:	af00      	add	r7, sp, #0
 8012dce:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("p != NULL", p != NULL);
 8012dd0:	687b      	ldr	r3, [r7, #4]
 8012dd2:	2b00      	cmp	r3, #0
 8012dd4:	d106      	bne.n	8012de4 <ip_frag_free_pbuf_custom_ref+0x1c>
 8012dd6:	4b07      	ldr	r3, [pc, #28]	; (8012df4 <ip_frag_free_pbuf_custom_ref+0x2c>)
 8012dd8:	f44f 7231 	mov.w	r2, #708	; 0x2c4
 8012ddc:	4906      	ldr	r1, [pc, #24]	; (8012df8 <ip_frag_free_pbuf_custom_ref+0x30>)
 8012dde:	4807      	ldr	r0, [pc, #28]	; (8012dfc <ip_frag_free_pbuf_custom_ref+0x34>)
 8012de0:	f000 fdc2 	bl	8013968 <iprintf>
  memp_free(MEMP_FRAG_PBUF, p);
 8012de4:	6879      	ldr	r1, [r7, #4]
 8012de6:	2005      	movs	r0, #5
 8012de8:	f7f6 fc68 	bl	80096bc <memp_free>
}
 8012dec:	bf00      	nop
 8012dee:	3708      	adds	r7, #8
 8012df0:	46bd      	mov	sp, r7
 8012df2:	bd80      	pop	{r7, pc}
 8012df4:	08017098 	.word	0x08017098
 8012df8:	08017250 	.word	0x08017250
 8012dfc:	080170e0 	.word	0x080170e0

08012e00 <ipfrag_free_pbuf_custom>:

/** Free-callback function to free a 'struct pbuf_custom_ref', called by
 * pbuf_free. */
static void
ipfrag_free_pbuf_custom(struct pbuf *p)
{
 8012e00:	b580      	push	{r7, lr}
 8012e02:	b084      	sub	sp, #16
 8012e04:	af00      	add	r7, sp, #0
 8012e06:	6078      	str	r0, [r7, #4]
  struct pbuf_custom_ref *pcr = (struct pbuf_custom_ref *)p;
 8012e08:	687b      	ldr	r3, [r7, #4]
 8012e0a:	60fb      	str	r3, [r7, #12]
  LWIP_ASSERT("pcr != NULL", pcr != NULL);
 8012e0c:	68fb      	ldr	r3, [r7, #12]
 8012e0e:	2b00      	cmp	r3, #0
 8012e10:	d106      	bne.n	8012e20 <ipfrag_free_pbuf_custom+0x20>
 8012e12:	4b11      	ldr	r3, [pc, #68]	; (8012e58 <ipfrag_free_pbuf_custom+0x58>)
 8012e14:	f240 22ce 	movw	r2, #718	; 0x2ce
 8012e18:	4910      	ldr	r1, [pc, #64]	; (8012e5c <ipfrag_free_pbuf_custom+0x5c>)
 8012e1a:	4811      	ldr	r0, [pc, #68]	; (8012e60 <ipfrag_free_pbuf_custom+0x60>)
 8012e1c:	f000 fda4 	bl	8013968 <iprintf>
  LWIP_ASSERT("pcr == p", (void *)pcr == (void *)p);
 8012e20:	68fa      	ldr	r2, [r7, #12]
 8012e22:	687b      	ldr	r3, [r7, #4]
 8012e24:	429a      	cmp	r2, r3
 8012e26:	d006      	beq.n	8012e36 <ipfrag_free_pbuf_custom+0x36>
 8012e28:	4b0b      	ldr	r3, [pc, #44]	; (8012e58 <ipfrag_free_pbuf_custom+0x58>)
 8012e2a:	f240 22cf 	movw	r2, #719	; 0x2cf
 8012e2e:	490d      	ldr	r1, [pc, #52]	; (8012e64 <ipfrag_free_pbuf_custom+0x64>)
 8012e30:	480b      	ldr	r0, [pc, #44]	; (8012e60 <ipfrag_free_pbuf_custom+0x60>)
 8012e32:	f000 fd99 	bl	8013968 <iprintf>
  if (pcr->original != NULL) {
 8012e36:	68fb      	ldr	r3, [r7, #12]
 8012e38:	695b      	ldr	r3, [r3, #20]
 8012e3a:	2b00      	cmp	r3, #0
 8012e3c:	d004      	beq.n	8012e48 <ipfrag_free_pbuf_custom+0x48>
    pbuf_free(pcr->original);
 8012e3e:	68fb      	ldr	r3, [r7, #12]
 8012e40:	695b      	ldr	r3, [r3, #20]
 8012e42:	4618      	mov	r0, r3
 8012e44:	f7f7 fade 	bl	800a404 <pbuf_free>
  }
  ip_frag_free_pbuf_custom_ref(pcr);
 8012e48:	68f8      	ldr	r0, [r7, #12]
 8012e4a:	f7ff ffbd 	bl	8012dc8 <ip_frag_free_pbuf_custom_ref>
}
 8012e4e:	bf00      	nop
 8012e50:	3710      	adds	r7, #16
 8012e52:	46bd      	mov	sp, r7
 8012e54:	bd80      	pop	{r7, pc}
 8012e56:	bf00      	nop
 8012e58:	08017098 	.word	0x08017098
 8012e5c:	0801725c 	.word	0x0801725c
 8012e60:	080170e0 	.word	0x080170e0
 8012e64:	08017268 	.word	0x08017268

08012e68 <ip4_frag>:
 *
 * @return ERR_OK if sent successfully, err_t otherwise
 */
err_t
ip4_frag(struct pbuf *p, struct netif *netif, const ip4_addr_t *dest)
{
 8012e68:	b580      	push	{r7, lr}
 8012e6a:	b094      	sub	sp, #80	; 0x50
 8012e6c:	af02      	add	r7, sp, #8
 8012e6e:	60f8      	str	r0, [r7, #12]
 8012e70:	60b9      	str	r1, [r7, #8]
 8012e72:	607a      	str	r2, [r7, #4]
  struct pbuf *rambuf;
#if !LWIP_NETIF_TX_SINGLE_PBUF
  struct pbuf *newpbuf;
  u16_t newpbuflen = 0;
 8012e74:	2300      	movs	r3, #0
 8012e76:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
  u16_t left_to_copy;
#endif
  struct ip_hdr *original_iphdr;
  struct ip_hdr *iphdr;
  const u16_t nfb = (u16_t)((netif->mtu - IP_HLEN) / 8);
 8012e7a:	68bb      	ldr	r3, [r7, #8]
 8012e7c:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8012e7e:	3b14      	subs	r3, #20
 8012e80:	2b00      	cmp	r3, #0
 8012e82:	da00      	bge.n	8012e86 <ip4_frag+0x1e>
 8012e84:	3307      	adds	r3, #7
 8012e86:	10db      	asrs	r3, r3, #3
 8012e88:	877b      	strh	r3, [r7, #58]	; 0x3a
  u16_t left, fragsize;
  u16_t ofo;
  int last;
  u16_t poff = IP_HLEN;
 8012e8a:	2314      	movs	r3, #20
 8012e8c:	87fb      	strh	r3, [r7, #62]	; 0x3e
  u16_t tmp;
  int mf_set;

  original_iphdr = (struct ip_hdr *)p->payload;
 8012e8e:	68fb      	ldr	r3, [r7, #12]
 8012e90:	685b      	ldr	r3, [r3, #4]
 8012e92:	637b      	str	r3, [r7, #52]	; 0x34
  iphdr = original_iphdr;
 8012e94:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012e96:	633b      	str	r3, [r7, #48]	; 0x30
  if (IPH_HL_BYTES(iphdr) != IP_HLEN) {
 8012e98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012e9a:	781b      	ldrb	r3, [r3, #0]
 8012e9c:	f003 030f 	and.w	r3, r3, #15
 8012ea0:	b2db      	uxtb	r3, r3
 8012ea2:	009b      	lsls	r3, r3, #2
 8012ea4:	b2db      	uxtb	r3, r3
 8012ea6:	2b14      	cmp	r3, #20
 8012ea8:	d002      	beq.n	8012eb0 <ip4_frag+0x48>
    /* ip4_frag() does not support IP options */
    return ERR_VAL;
 8012eaa:	f06f 0305 	mvn.w	r3, #5
 8012eae:	e116      	b.n	80130de <ip4_frag+0x276>
  }
  LWIP_ERROR("ip4_frag(): pbuf too short", p->len >= IP_HLEN, return ERR_VAL);
 8012eb0:	68fb      	ldr	r3, [r7, #12]
 8012eb2:	895b      	ldrh	r3, [r3, #10]
 8012eb4:	2b13      	cmp	r3, #19
 8012eb6:	d809      	bhi.n	8012ecc <ip4_frag+0x64>
 8012eb8:	4b8b      	ldr	r3, [pc, #556]	; (80130e8 <ip4_frag+0x280>)
 8012eba:	f44f 723f 	mov.w	r2, #764	; 0x2fc
 8012ebe:	498b      	ldr	r1, [pc, #556]	; (80130ec <ip4_frag+0x284>)
 8012ec0:	488b      	ldr	r0, [pc, #556]	; (80130f0 <ip4_frag+0x288>)
 8012ec2:	f000 fd51 	bl	8013968 <iprintf>
 8012ec6:	f06f 0305 	mvn.w	r3, #5
 8012eca:	e108      	b.n	80130de <ip4_frag+0x276>

  /* Save original offset */
  tmp = lwip_ntohs(IPH_OFFSET(iphdr));
 8012ecc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012ece:	88db      	ldrh	r3, [r3, #6]
 8012ed0:	b29b      	uxth	r3, r3
 8012ed2:	4618      	mov	r0, r3
 8012ed4:	f7f5 fdd4 	bl	8008a80 <lwip_htons>
 8012ed8:	4603      	mov	r3, r0
 8012eda:	87bb      	strh	r3, [r7, #60]	; 0x3c
  ofo = tmp & IP_OFFMASK;
 8012edc:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8012ede:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8012ee2:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  /* already fragmented? if so, the last fragment we create must have MF, too */
  mf_set = tmp & IP_MF;
 8012ee6:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8012ee8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8012eec:	62fb      	str	r3, [r7, #44]	; 0x2c

  left = (u16_t)(p->tot_len - IP_HLEN);
 8012eee:	68fb      	ldr	r3, [r7, #12]
 8012ef0:	891b      	ldrh	r3, [r3, #8]
 8012ef2:	3b14      	subs	r3, #20
 8012ef4:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42

  while (left) {
 8012ef8:	e0e7      	b.n	80130ca <ip4_frag+0x262>
    /* Fill this fragment */
    fragsize = LWIP_MIN(left, (u16_t)(nfb * 8));
 8012efa:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8012efc:	00db      	lsls	r3, r3, #3
 8012efe:	b29b      	uxth	r3, r3
 8012f00:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8012f04:	4293      	cmp	r3, r2
 8012f06:	bf28      	it	cs
 8012f08:	4613      	movcs	r3, r2
 8012f0a:	857b      	strh	r3, [r7, #42]	; 0x2a
    /* When not using a static buffer, create a chain of pbufs.
     * The first will be a PBUF_RAM holding the link and IP header.
     * The rest will be PBUF_REFs mirroring the pbuf chain to be fragged,
     * but limited to the size of an mtu.
     */
    rambuf = pbuf_alloc(PBUF_LINK, IP_HLEN, PBUF_RAM);
 8012f0c:	f44f 7220 	mov.w	r2, #640	; 0x280
 8012f10:	2114      	movs	r1, #20
 8012f12:	200e      	movs	r0, #14
 8012f14:	f7f6 ff92 	bl	8009e3c <pbuf_alloc>
 8012f18:	6278      	str	r0, [r7, #36]	; 0x24
    if (rambuf == NULL) {
 8012f1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012f1c:	2b00      	cmp	r3, #0
 8012f1e:	f000 80db 	beq.w	80130d8 <ip4_frag+0x270>
      goto memerr;
    }
    LWIP_ASSERT("this needs a pbuf in one piece!",
 8012f22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012f24:	895b      	ldrh	r3, [r3, #10]
 8012f26:	2b13      	cmp	r3, #19
 8012f28:	d806      	bhi.n	8012f38 <ip4_frag+0xd0>
 8012f2a:	4b6f      	ldr	r3, [pc, #444]	; (80130e8 <ip4_frag+0x280>)
 8012f2c:	f44f 7249 	mov.w	r2, #804	; 0x324
 8012f30:	4970      	ldr	r1, [pc, #448]	; (80130f4 <ip4_frag+0x28c>)
 8012f32:	486f      	ldr	r0, [pc, #444]	; (80130f0 <ip4_frag+0x288>)
 8012f34:	f000 fd18 	bl	8013968 <iprintf>
                (rambuf->len >= (IP_HLEN)));
    SMEMCPY(rambuf->payload, original_iphdr, IP_HLEN);
 8012f38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012f3a:	685b      	ldr	r3, [r3, #4]
 8012f3c:	2214      	movs	r2, #20
 8012f3e:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8012f40:	4618      	mov	r0, r3
 8012f42:	f000 fc66 	bl	8013812 <memcpy>
    iphdr = (struct ip_hdr *)rambuf->payload;
 8012f46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012f48:	685b      	ldr	r3, [r3, #4]
 8012f4a:	633b      	str	r3, [r7, #48]	; 0x30

    left_to_copy = fragsize;
 8012f4c:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8012f4e:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
    while (left_to_copy) {
 8012f52:	e064      	b.n	801301e <ip4_frag+0x1b6>
      struct pbuf_custom_ref *pcr;
      u16_t plen = (u16_t)(p->len - poff);
 8012f54:	68fb      	ldr	r3, [r7, #12]
 8012f56:	895a      	ldrh	r2, [r3, #10]
 8012f58:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8012f5a:	1ad3      	subs	r3, r2, r3
 8012f5c:	83fb      	strh	r3, [r7, #30]
      LWIP_ASSERT("p->len >= poff", p->len >= poff);
 8012f5e:	68fb      	ldr	r3, [r7, #12]
 8012f60:	895b      	ldrh	r3, [r3, #10]
 8012f62:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 8012f64:	429a      	cmp	r2, r3
 8012f66:	d906      	bls.n	8012f76 <ip4_frag+0x10e>
 8012f68:	4b5f      	ldr	r3, [pc, #380]	; (80130e8 <ip4_frag+0x280>)
 8012f6a:	f240 322d 	movw	r2, #813	; 0x32d
 8012f6e:	4962      	ldr	r1, [pc, #392]	; (80130f8 <ip4_frag+0x290>)
 8012f70:	485f      	ldr	r0, [pc, #380]	; (80130f0 <ip4_frag+0x288>)
 8012f72:	f000 fcf9 	bl	8013968 <iprintf>
      newpbuflen = LWIP_MIN(left_to_copy, plen);
 8012f76:	8bfa      	ldrh	r2, [r7, #30]
 8012f78:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8012f7c:	4293      	cmp	r3, r2
 8012f7e:	bf28      	it	cs
 8012f80:	4613      	movcs	r3, r2
 8012f82:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
      /* Is this pbuf already empty? */
      if (!newpbuflen) {
 8012f86:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8012f8a:	2b00      	cmp	r3, #0
 8012f8c:	d105      	bne.n	8012f9a <ip4_frag+0x132>
        poff = 0;
 8012f8e:	2300      	movs	r3, #0
 8012f90:	87fb      	strh	r3, [r7, #62]	; 0x3e
        p = p->next;
 8012f92:	68fb      	ldr	r3, [r7, #12]
 8012f94:	681b      	ldr	r3, [r3, #0]
 8012f96:	60fb      	str	r3, [r7, #12]
        continue;
 8012f98:	e041      	b.n	801301e <ip4_frag+0x1b6>
      }
      pcr = ip_frag_alloc_pbuf_custom_ref();
 8012f9a:	f7ff ff0d 	bl	8012db8 <ip_frag_alloc_pbuf_custom_ref>
 8012f9e:	61b8      	str	r0, [r7, #24]
      if (pcr == NULL) {
 8012fa0:	69bb      	ldr	r3, [r7, #24]
 8012fa2:	2b00      	cmp	r3, #0
 8012fa4:	d103      	bne.n	8012fae <ip4_frag+0x146>
        pbuf_free(rambuf);
 8012fa6:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8012fa8:	f7f7 fa2c 	bl	800a404 <pbuf_free>
        goto memerr;
 8012fac:	e095      	b.n	80130da <ip4_frag+0x272>
      }
      /* Mirror this pbuf, although we might not need all of it. */
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 8012fae:	69b8      	ldr	r0, [r7, #24]
                                    (u8_t *)p->payload + poff, newpbuflen);
 8012fb0:	68fb      	ldr	r3, [r7, #12]
 8012fb2:	685a      	ldr	r2, [r3, #4]
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 8012fb4:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8012fb6:	4413      	add	r3, r2
 8012fb8:	f8b7 1046 	ldrh.w	r1, [r7, #70]	; 0x46
 8012fbc:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 8012fc0:	9201      	str	r2, [sp, #4]
 8012fc2:	9300      	str	r3, [sp, #0]
 8012fc4:	4603      	mov	r3, r0
 8012fc6:	2241      	movs	r2, #65	; 0x41
 8012fc8:	2000      	movs	r0, #0
 8012fca:	f7f7 f861 	bl	800a090 <pbuf_alloced_custom>
 8012fce:	6178      	str	r0, [r7, #20]
      if (newpbuf == NULL) {
 8012fd0:	697b      	ldr	r3, [r7, #20]
 8012fd2:	2b00      	cmp	r3, #0
 8012fd4:	d106      	bne.n	8012fe4 <ip4_frag+0x17c>
        ip_frag_free_pbuf_custom_ref(pcr);
 8012fd6:	69b8      	ldr	r0, [r7, #24]
 8012fd8:	f7ff fef6 	bl	8012dc8 <ip_frag_free_pbuf_custom_ref>
        pbuf_free(rambuf);
 8012fdc:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8012fde:	f7f7 fa11 	bl	800a404 <pbuf_free>
        goto memerr;
 8012fe2:	e07a      	b.n	80130da <ip4_frag+0x272>
      }
      pbuf_ref(p);
 8012fe4:	68f8      	ldr	r0, [r7, #12]
 8012fe6:	f7f7 fab3 	bl	800a550 <pbuf_ref>
      pcr->original = p;
 8012fea:	69bb      	ldr	r3, [r7, #24]
 8012fec:	68fa      	ldr	r2, [r7, #12]
 8012fee:	615a      	str	r2, [r3, #20]
      pcr->pc.custom_free_function = ipfrag_free_pbuf_custom;
 8012ff0:	69bb      	ldr	r3, [r7, #24]
 8012ff2:	4a42      	ldr	r2, [pc, #264]	; (80130fc <ip4_frag+0x294>)
 8012ff4:	611a      	str	r2, [r3, #16]

      /* Add it to end of rambuf's chain, but using pbuf_cat, not pbuf_chain
       * so that it is removed when pbuf_dechain is later called on rambuf.
       */
      pbuf_cat(rambuf, newpbuf);
 8012ff6:	6979      	ldr	r1, [r7, #20]
 8012ff8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8012ffa:	f7f7 fad1 	bl	800a5a0 <pbuf_cat>
      left_to_copy = (u16_t)(left_to_copy - newpbuflen);
 8012ffe:	f8b7 2044 	ldrh.w	r2, [r7, #68]	; 0x44
 8013002:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8013006:	1ad3      	subs	r3, r2, r3
 8013008:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
      if (left_to_copy) {
 801300c:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8013010:	2b00      	cmp	r3, #0
 8013012:	d004      	beq.n	801301e <ip4_frag+0x1b6>
        poff = 0;
 8013014:	2300      	movs	r3, #0
 8013016:	87fb      	strh	r3, [r7, #62]	; 0x3e
        p = p->next;
 8013018:	68fb      	ldr	r3, [r7, #12]
 801301a:	681b      	ldr	r3, [r3, #0]
 801301c:	60fb      	str	r3, [r7, #12]
    while (left_to_copy) {
 801301e:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8013022:	2b00      	cmp	r3, #0
 8013024:	d196      	bne.n	8012f54 <ip4_frag+0xec>
      }
    }
    poff = (u16_t)(poff + newpbuflen);
 8013026:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 8013028:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 801302c:	4413      	add	r3, r2
 801302e:	87fb      	strh	r3, [r7, #62]	; 0x3e
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

    /* Correct header */
    last = (left <= netif->mtu - IP_HLEN);
 8013030:	68bb      	ldr	r3, [r7, #8]
 8013032:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8013034:	f1a3 0213 	sub.w	r2, r3, #19
 8013038:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 801303c:	429a      	cmp	r2, r3
 801303e:	bfcc      	ite	gt
 8013040:	2301      	movgt	r3, #1
 8013042:	2300      	movle	r3, #0
 8013044:	b2db      	uxtb	r3, r3
 8013046:	623b      	str	r3, [r7, #32]

    /* Set new offset and MF flag */
    tmp = (IP_OFFMASK & (ofo));
 8013048:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 801304c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8013050:	87bb      	strh	r3, [r7, #60]	; 0x3c
    if (!last || mf_set) {
 8013052:	6a3b      	ldr	r3, [r7, #32]
 8013054:	2b00      	cmp	r3, #0
 8013056:	d002      	beq.n	801305e <ip4_frag+0x1f6>
 8013058:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801305a:	2b00      	cmp	r3, #0
 801305c:	d003      	beq.n	8013066 <ip4_frag+0x1fe>
      /* the last fragment has MF set if the input frame had it */
      tmp = tmp | IP_MF;
 801305e:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8013060:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8013064:	87bb      	strh	r3, [r7, #60]	; 0x3c
    }
    IPH_OFFSET_SET(iphdr, lwip_htons(tmp));
 8013066:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8013068:	4618      	mov	r0, r3
 801306a:	f7f5 fd09 	bl	8008a80 <lwip_htons>
 801306e:	4603      	mov	r3, r0
 8013070:	461a      	mov	r2, r3
 8013072:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013074:	80da      	strh	r2, [r3, #6]
    IPH_LEN_SET(iphdr, lwip_htons((u16_t)(fragsize + IP_HLEN)));
 8013076:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8013078:	3314      	adds	r3, #20
 801307a:	b29b      	uxth	r3, r3
 801307c:	4618      	mov	r0, r3
 801307e:	f7f5 fcff 	bl	8008a80 <lwip_htons>
 8013082:	4603      	mov	r3, r0
 8013084:	461a      	mov	r2, r3
 8013086:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013088:	805a      	strh	r2, [r3, #2]
    IPH_CHKSUM_SET(iphdr, 0);
 801308a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801308c:	2200      	movs	r2, #0
 801308e:	729a      	strb	r2, [r3, #10]
 8013090:	2200      	movs	r2, #0
 8013092:	72da      	strb	r2, [r3, #11]
#endif /* CHECKSUM_GEN_IP */

    /* No need for separate header pbuf - we allowed room for it in rambuf
     * when allocated.
     */
    netif->output(netif, rambuf, dest);
 8013094:	68bb      	ldr	r3, [r7, #8]
 8013096:	695b      	ldr	r3, [r3, #20]
 8013098:	687a      	ldr	r2, [r7, #4]
 801309a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 801309c:	68b8      	ldr	r0, [r7, #8]
 801309e:	4798      	blx	r3
    IPFRAG_STATS_INC(ip_frag.xmit);
 80130a0:	4b17      	ldr	r3, [pc, #92]	; (8013100 <ip4_frag+0x298>)
 80130a2:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
 80130a4:	3301      	adds	r3, #1
 80130a6:	b29a      	uxth	r2, r3
 80130a8:	4b15      	ldr	r3, [pc, #84]	; (8013100 <ip4_frag+0x298>)
 80130aa:	861a      	strh	r2, [r3, #48]	; 0x30
     * recreate it next time round the loop. If we're lucky the hardware
     * will have already sent the packet, the free will really free, and
     * there will be zero memory penalty.
     */

    pbuf_free(rambuf);
 80130ac:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80130ae:	f7f7 f9a9 	bl	800a404 <pbuf_free>
    left = (u16_t)(left - fragsize);
 80130b2:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 80130b6:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80130b8:	1ad3      	subs	r3, r2, r3
 80130ba:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
    ofo = (u16_t)(ofo + nfb);
 80130be:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 80130c2:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 80130c4:	4413      	add	r3, r2
 80130c6:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  while (left) {
 80130ca:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80130ce:	2b00      	cmp	r3, #0
 80130d0:	f47f af13 	bne.w	8012efa <ip4_frag+0x92>
  }
  MIB2_STATS_INC(mib2.ipfragoks);
  return ERR_OK;
 80130d4:	2300      	movs	r3, #0
 80130d6:	e002      	b.n	80130de <ip4_frag+0x276>
      goto memerr;
 80130d8:	bf00      	nop
memerr:
  MIB2_STATS_INC(mib2.ipfragfails);
  return ERR_MEM;
 80130da:	f04f 33ff 	mov.w	r3, #4294967295
}
 80130de:	4618      	mov	r0, r3
 80130e0:	3748      	adds	r7, #72	; 0x48
 80130e2:	46bd      	mov	sp, r7
 80130e4:	bd80      	pop	{r7, pc}
 80130e6:	bf00      	nop
 80130e8:	08017098 	.word	0x08017098
 80130ec:	08017274 	.word	0x08017274
 80130f0:	080170e0 	.word	0x080170e0
 80130f4:	08017290 	.word	0x08017290
 80130f8:	080172b0 	.word	0x080172b0
 80130fc:	08012e01 	.word	0x08012e01
 8013100:	2000c64c 	.word	0x2000c64c

08013104 <ethernet_input>:
 * @see ETHARP_SUPPORT_VLAN
 * @see LWIP_HOOK_VLAN_CHECK
 */
err_t
ethernet_input(struct pbuf *p, struct netif *netif)
{
 8013104:	b580      	push	{r7, lr}
 8013106:	b086      	sub	sp, #24
 8013108:	af00      	add	r7, sp, #0
 801310a:	6078      	str	r0, [r7, #4]
 801310c:	6039      	str	r1, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t type;
#if LWIP_ARP || ETHARP_SUPPORT_VLAN || LWIP_IPV6
  u16_t next_hdr_offset = SIZEOF_ETH_HDR;
 801310e:	230e      	movs	r3, #14
 8013110:	82fb      	strh	r3, [r7, #22]
#endif /* LWIP_ARP || ETHARP_SUPPORT_VLAN */

  LWIP_ASSERT_CORE_LOCKED();

  if (p->len <= SIZEOF_ETH_HDR) {
 8013112:	687b      	ldr	r3, [r7, #4]
 8013114:	895b      	ldrh	r3, [r3, #10]
 8013116:	2b0e      	cmp	r3, #14
 8013118:	d80c      	bhi.n	8013134 <ethernet_input+0x30>
    /* a packet with only an ethernet header (or less) is not valid for us */
    ETHARP_STATS_INC(etharp.proterr);
 801311a:	4b51      	ldr	r3, [pc, #324]	; (8013260 <ethernet_input+0x15c>)
 801311c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801311e:	3301      	adds	r3, #1
 8013120:	b29a      	uxth	r2, r3
 8013122:	4b4f      	ldr	r3, [pc, #316]	; (8013260 <ethernet_input+0x15c>)
 8013124:	851a      	strh	r2, [r3, #40]	; 0x28
    ETHARP_STATS_INC(etharp.drop);
 8013126:	4b4e      	ldr	r3, [pc, #312]	; (8013260 <ethernet_input+0x15c>)
 8013128:	8bdb      	ldrh	r3, [r3, #30]
 801312a:	3301      	adds	r3, #1
 801312c:	b29a      	uxth	r2, r3
 801312e:	4b4c      	ldr	r3, [pc, #304]	; (8013260 <ethernet_input+0x15c>)
 8013130:	83da      	strh	r2, [r3, #30]
    MIB2_STATS_NETIF_INC(netif, ifinerrors);
    goto free_and_return;
 8013132:	e08d      	b.n	8013250 <ethernet_input+0x14c>
  }

  if (p->if_idx == NETIF_NO_INDEX) {
 8013134:	687b      	ldr	r3, [r7, #4]
 8013136:	7bdb      	ldrb	r3, [r3, #15]
 8013138:	2b00      	cmp	r3, #0
 801313a:	d106      	bne.n	801314a <ethernet_input+0x46>
    p->if_idx = netif_get_index(netif);
 801313c:	683b      	ldr	r3, [r7, #0]
 801313e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8013142:	3301      	adds	r3, #1
 8013144:	b2da      	uxtb	r2, r3
 8013146:	687b      	ldr	r3, [r7, #4]
 8013148:	73da      	strb	r2, [r3, #15]
  }

  /* points to packet payload, which starts with an Ethernet header */
  ethhdr = (struct eth_hdr *)p->payload;
 801314a:	687b      	ldr	r3, [r7, #4]
 801314c:	685b      	ldr	r3, [r3, #4]
 801314e:	613b      	str	r3, [r7, #16]
               (unsigned char)ethhdr->dest.addr[3], (unsigned char)ethhdr->dest.addr[4], (unsigned char)ethhdr->dest.addr[5],
               (unsigned char)ethhdr->src.addr[0],  (unsigned char)ethhdr->src.addr[1],  (unsigned char)ethhdr->src.addr[2],
               (unsigned char)ethhdr->src.addr[3],  (unsigned char)ethhdr->src.addr[4],  (unsigned char)ethhdr->src.addr[5],
               lwip_htons(ethhdr->type)));

  type = ethhdr->type;
 8013150:	693b      	ldr	r3, [r7, #16]
 8013152:	7b1a      	ldrb	r2, [r3, #12]
 8013154:	7b5b      	ldrb	r3, [r3, #13]
 8013156:	021b      	lsls	r3, r3, #8
 8013158:	4313      	orrs	r3, r2
 801315a:	81fb      	strh	r3, [r7, #14]

#if LWIP_ARP_FILTER_NETIF
  netif = LWIP_ARP_FILTER_NETIF_FN(p, netif, lwip_htons(type));
#endif /* LWIP_ARP_FILTER_NETIF*/

  if (ethhdr->dest.addr[0] & 1) {
 801315c:	693b      	ldr	r3, [r7, #16]
 801315e:	781b      	ldrb	r3, [r3, #0]
 8013160:	f003 0301 	and.w	r3, r3, #1
 8013164:	2b00      	cmp	r3, #0
 8013166:	d023      	beq.n	80131b0 <ethernet_input+0xac>
    /* this might be a multicast or broadcast packet */
    if (ethhdr->dest.addr[0] == LL_IP4_MULTICAST_ADDR_0) {
 8013168:	693b      	ldr	r3, [r7, #16]
 801316a:	781b      	ldrb	r3, [r3, #0]
 801316c:	2b01      	cmp	r3, #1
 801316e:	d10f      	bne.n	8013190 <ethernet_input+0x8c>
#if LWIP_IPV4
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 8013170:	693b      	ldr	r3, [r7, #16]
 8013172:	785b      	ldrb	r3, [r3, #1]
 8013174:	2b00      	cmp	r3, #0
 8013176:	d11b      	bne.n	80131b0 <ethernet_input+0xac>
          (ethhdr->dest.addr[2] == LL_IP4_MULTICAST_ADDR_2)) {
 8013178:	693b      	ldr	r3, [r7, #16]
 801317a:	789b      	ldrb	r3, [r3, #2]
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 801317c:	2b5e      	cmp	r3, #94	; 0x5e
 801317e:	d117      	bne.n	80131b0 <ethernet_input+0xac>
        /* mark the pbuf as link-layer multicast */
        p->flags |= PBUF_FLAG_LLMCAST;
 8013180:	687b      	ldr	r3, [r7, #4]
 8013182:	7b5b      	ldrb	r3, [r3, #13]
 8013184:	f043 0310 	orr.w	r3, r3, #16
 8013188:	b2da      	uxtb	r2, r3
 801318a:	687b      	ldr	r3, [r7, #4]
 801318c:	735a      	strb	r2, [r3, #13]
 801318e:	e00f      	b.n	80131b0 <ethernet_input+0xac>
             (ethhdr->dest.addr[1] == LL_IP6_MULTICAST_ADDR_1)) {
      /* mark the pbuf as link-layer multicast */
      p->flags |= PBUF_FLAG_LLMCAST;
    }
#endif /* LWIP_IPV6 */
    else if (eth_addr_cmp(&ethhdr->dest, &ethbroadcast)) {
 8013190:	693b      	ldr	r3, [r7, #16]
 8013192:	2206      	movs	r2, #6
 8013194:	4933      	ldr	r1, [pc, #204]	; (8013264 <ethernet_input+0x160>)
 8013196:	4618      	mov	r0, r3
 8013198:	f000 fb2b 	bl	80137f2 <memcmp>
 801319c:	4603      	mov	r3, r0
 801319e:	2b00      	cmp	r3, #0
 80131a0:	d106      	bne.n	80131b0 <ethernet_input+0xac>
      /* mark the pbuf as link-layer broadcast */
      p->flags |= PBUF_FLAG_LLBCAST;
 80131a2:	687b      	ldr	r3, [r7, #4]
 80131a4:	7b5b      	ldrb	r3, [r3, #13]
 80131a6:	f043 0308 	orr.w	r3, r3, #8
 80131aa:	b2da      	uxtb	r2, r3
 80131ac:	687b      	ldr	r3, [r7, #4]
 80131ae:	735a      	strb	r2, [r3, #13]
    }
  }

  switch (type) {
 80131b0:	89fb      	ldrh	r3, [r7, #14]
 80131b2:	2b08      	cmp	r3, #8
 80131b4:	d003      	beq.n	80131be <ethernet_input+0xba>
 80131b6:	f5b3 6fc1 	cmp.w	r3, #1544	; 0x608
 80131ba:	d014      	beq.n	80131e6 <ethernet_input+0xe2>
 80131bc:	e034      	b.n	8013228 <ethernet_input+0x124>
#if LWIP_IPV4 && LWIP_ARP
    /* IP packet? */
    case PP_HTONS(ETHTYPE_IP):
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 80131be:	683b      	ldr	r3, [r7, #0]
 80131c0:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80131c4:	f003 0308 	and.w	r3, r3, #8
 80131c8:	2b00      	cmp	r3, #0
 80131ca:	d03c      	beq.n	8013246 <ethernet_input+0x142>
        goto free_and_return;
      }
      /* skip Ethernet header (min. size checked above) */
      if (pbuf_remove_header(p, next_hdr_offset)) {
 80131cc:	8afb      	ldrh	r3, [r7, #22]
 80131ce:	4619      	mov	r1, r3
 80131d0:	6878      	ldr	r0, [r7, #4]
 80131d2:	f7f7 f891 	bl	800a2f8 <pbuf_remove_header>
 80131d6:	4603      	mov	r3, r0
 80131d8:	2b00      	cmp	r3, #0
 80131da:	d136      	bne.n	801324a <ethernet_input+0x146>
                     p->tot_len, next_hdr_offset));
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("Can't move over header in packet"));
        goto free_and_return;
      } else {
        /* pass to IP layer */
        ip4_input(p, netif);
 80131dc:	6839      	ldr	r1, [r7, #0]
 80131de:	6878      	ldr	r0, [r7, #4]
 80131e0:	f7fe fe7e 	bl	8011ee0 <ip4_input>
      }
      break;
 80131e4:	e02d      	b.n	8013242 <ethernet_input+0x13e>

    case PP_HTONS(ETHTYPE_ARP):
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 80131e6:	683b      	ldr	r3, [r7, #0]
 80131e8:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80131ec:	f003 0308 	and.w	r3, r3, #8
 80131f0:	2b00      	cmp	r3, #0
 80131f2:	d02c      	beq.n	801324e <ethernet_input+0x14a>
        goto free_and_return;
      }
      /* skip Ethernet header (min. size checked above) */
      if (pbuf_remove_header(p, next_hdr_offset)) {
 80131f4:	8afb      	ldrh	r3, [r7, #22]
 80131f6:	4619      	mov	r1, r3
 80131f8:	6878      	ldr	r0, [r7, #4]
 80131fa:	f7f7 f87d 	bl	800a2f8 <pbuf_remove_header>
 80131fe:	4603      	mov	r3, r0
 8013200:	2b00      	cmp	r3, #0
 8013202:	d00c      	beq.n	801321e <ethernet_input+0x11a>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
                    ("ethernet_input: ARP response packet dropped, too short (%"U16_F"/%"U16_F")\n",
                     p->tot_len, next_hdr_offset));
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("Can't move over header in packet"));
        ETHARP_STATS_INC(etharp.lenerr);
 8013204:	4b16      	ldr	r3, [pc, #88]	; (8013260 <ethernet_input+0x15c>)
 8013206:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 8013208:	3301      	adds	r3, #1
 801320a:	b29a      	uxth	r2, r3
 801320c:	4b14      	ldr	r3, [pc, #80]	; (8013260 <ethernet_input+0x15c>)
 801320e:	845a      	strh	r2, [r3, #34]	; 0x22
        ETHARP_STATS_INC(etharp.drop);
 8013210:	4b13      	ldr	r3, [pc, #76]	; (8013260 <ethernet_input+0x15c>)
 8013212:	8bdb      	ldrh	r3, [r3, #30]
 8013214:	3301      	adds	r3, #1
 8013216:	b29a      	uxth	r2, r3
 8013218:	4b11      	ldr	r3, [pc, #68]	; (8013260 <ethernet_input+0x15c>)
 801321a:	83da      	strh	r2, [r3, #30]
        goto free_and_return;
 801321c:	e018      	b.n	8013250 <ethernet_input+0x14c>
      } else {
        /* pass p to ARP module */
        etharp_input(p, netif);
 801321e:	6839      	ldr	r1, [r7, #0]
 8013220:	6878      	ldr	r0, [r7, #4]
 8013222:	f7fd ff89 	bl	8011138 <etharp_input>
      }
      break;
 8013226:	e00c      	b.n	8013242 <ethernet_input+0x13e>
#ifdef LWIP_HOOK_UNKNOWN_ETH_PROTOCOL
      if (LWIP_HOOK_UNKNOWN_ETH_PROTOCOL(p, netif) == ERR_OK) {
        break;
      }
#endif
      ETHARP_STATS_INC(etharp.proterr);
 8013228:	4b0d      	ldr	r3, [pc, #52]	; (8013260 <ethernet_input+0x15c>)
 801322a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801322c:	3301      	adds	r3, #1
 801322e:	b29a      	uxth	r2, r3
 8013230:	4b0b      	ldr	r3, [pc, #44]	; (8013260 <ethernet_input+0x15c>)
 8013232:	851a      	strh	r2, [r3, #40]	; 0x28
      ETHARP_STATS_INC(etharp.drop);
 8013234:	4b0a      	ldr	r3, [pc, #40]	; (8013260 <ethernet_input+0x15c>)
 8013236:	8bdb      	ldrh	r3, [r3, #30]
 8013238:	3301      	adds	r3, #1
 801323a:	b29a      	uxth	r2, r3
 801323c:	4b08      	ldr	r3, [pc, #32]	; (8013260 <ethernet_input+0x15c>)
 801323e:	83da      	strh	r2, [r3, #30]
      MIB2_STATS_NETIF_INC(netif, ifinunknownprotos);
      goto free_and_return;
 8013240:	e006      	b.n	8013250 <ethernet_input+0x14c>
  }

  /* This means the pbuf is freed or consumed,
     so the caller doesn't have to free it again */
  return ERR_OK;
 8013242:	2300      	movs	r3, #0
 8013244:	e008      	b.n	8013258 <ethernet_input+0x154>
        goto free_and_return;
 8013246:	bf00      	nop
 8013248:	e002      	b.n	8013250 <ethernet_input+0x14c>
        goto free_and_return;
 801324a:	bf00      	nop
 801324c:	e000      	b.n	8013250 <ethernet_input+0x14c>
        goto free_and_return;
 801324e:	bf00      	nop

free_and_return:
  pbuf_free(p);
 8013250:	6878      	ldr	r0, [r7, #4]
 8013252:	f7f7 f8d7 	bl	800a404 <pbuf_free>
  return ERR_OK;
 8013256:	2300      	movs	r3, #0
}
 8013258:	4618      	mov	r0, r3
 801325a:	3718      	adds	r7, #24
 801325c:	46bd      	mov	sp, r7
 801325e:	bd80      	pop	{r7, pc}
 8013260:	2000c64c 	.word	0x2000c64c
 8013264:	080174c4 	.word	0x080174c4

08013268 <ethernet_output>:
 * @return ERR_OK if the packet was sent, any other err_t on failure
 */
err_t
ethernet_output(struct netif * netif, struct pbuf * p,
                const struct eth_addr * src, const struct eth_addr * dst,
                u16_t eth_type) {
 8013268:	b580      	push	{r7, lr}
 801326a:	b086      	sub	sp, #24
 801326c:	af00      	add	r7, sp, #0
 801326e:	60f8      	str	r0, [r7, #12]
 8013270:	60b9      	str	r1, [r7, #8]
 8013272:	607a      	str	r2, [r7, #4]
 8013274:	603b      	str	r3, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t eth_type_be = lwip_htons(eth_type);
 8013276:	8c3b      	ldrh	r3, [r7, #32]
 8013278:	4618      	mov	r0, r3
 801327a:	f7f5 fc01 	bl	8008a80 <lwip_htons>
 801327e:	4603      	mov	r3, r0
 8013280:	82fb      	strh	r3, [r7, #22]

    eth_type_be = PP_HTONS(ETHTYPE_VLAN);
  } else
#endif /* ETHARP_SUPPORT_VLAN && defined(LWIP_HOOK_VLAN_SET) */
  {
    if (pbuf_add_header(p, SIZEOF_ETH_HDR) != 0) {
 8013282:	210e      	movs	r1, #14
 8013284:	68b8      	ldr	r0, [r7, #8]
 8013286:	f7f7 f827 	bl	800a2d8 <pbuf_add_header>
 801328a:	4603      	mov	r3, r0
 801328c:	2b00      	cmp	r3, #0
 801328e:	d125      	bne.n	80132dc <ethernet_output+0x74>
    }
  }

  LWIP_ASSERT_CORE_LOCKED();

  ethhdr = (struct eth_hdr *)p->payload;
 8013290:	68bb      	ldr	r3, [r7, #8]
 8013292:	685b      	ldr	r3, [r3, #4]
 8013294:	613b      	str	r3, [r7, #16]
  ethhdr->type = eth_type_be;
 8013296:	693b      	ldr	r3, [r7, #16]
 8013298:	8afa      	ldrh	r2, [r7, #22]
 801329a:	819a      	strh	r2, [r3, #12]
  SMEMCPY(&ethhdr->dest, dst, ETH_HWADDR_LEN);
 801329c:	693b      	ldr	r3, [r7, #16]
 801329e:	2206      	movs	r2, #6
 80132a0:	6839      	ldr	r1, [r7, #0]
 80132a2:	4618      	mov	r0, r3
 80132a4:	f000 fab5 	bl	8013812 <memcpy>
  SMEMCPY(&ethhdr->src,  src, ETH_HWADDR_LEN);
 80132a8:	693b      	ldr	r3, [r7, #16]
 80132aa:	3306      	adds	r3, #6
 80132ac:	2206      	movs	r2, #6
 80132ae:	6879      	ldr	r1, [r7, #4]
 80132b0:	4618      	mov	r0, r3
 80132b2:	f000 faae 	bl	8013812 <memcpy>

  LWIP_ASSERT("netif->hwaddr_len must be 6 for ethernet_output!",
 80132b6:	68fb      	ldr	r3, [r7, #12]
 80132b8:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80132bc:	2b06      	cmp	r3, #6
 80132be:	d006      	beq.n	80132ce <ethernet_output+0x66>
 80132c0:	4b0d      	ldr	r3, [pc, #52]	; (80132f8 <ethernet_output+0x90>)
 80132c2:	f44f 7299 	mov.w	r2, #306	; 0x132
 80132c6:	490d      	ldr	r1, [pc, #52]	; (80132fc <ethernet_output+0x94>)
 80132c8:	480d      	ldr	r0, [pc, #52]	; (8013300 <ethernet_output+0x98>)
 80132ca:	f000 fb4d 	bl	8013968 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE,
              ("ethernet_output: sending packet %p\n", (void *)p));

  /* send the packet */
  return netif->linkoutput(netif, p);
 80132ce:	68fb      	ldr	r3, [r7, #12]
 80132d0:	699b      	ldr	r3, [r3, #24]
 80132d2:	68b9      	ldr	r1, [r7, #8]
 80132d4:	68f8      	ldr	r0, [r7, #12]
 80132d6:	4798      	blx	r3
 80132d8:	4603      	mov	r3, r0
 80132da:	e008      	b.n	80132ee <ethernet_output+0x86>
      goto pbuf_header_failed;
 80132dc:	bf00      	nop

pbuf_header_failed:
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
              ("ethernet_output: could not allocate room for header.\n"));
  LINK_STATS_INC(link.lenerr);
 80132de:	4b09      	ldr	r3, [pc, #36]	; (8013304 <ethernet_output+0x9c>)
 80132e0:	895b      	ldrh	r3, [r3, #10]
 80132e2:	3301      	adds	r3, #1
 80132e4:	b29a      	uxth	r2, r3
 80132e6:	4b07      	ldr	r3, [pc, #28]	; (8013304 <ethernet_output+0x9c>)
 80132e8:	815a      	strh	r2, [r3, #10]
  return ERR_BUF;
 80132ea:	f06f 0301 	mvn.w	r3, #1
}
 80132ee:	4618      	mov	r0, r3
 80132f0:	3718      	adds	r7, #24
 80132f2:	46bd      	mov	sp, r7
 80132f4:	bd80      	pop	{r7, pc}
 80132f6:	bf00      	nop
 80132f8:	080172c0 	.word	0x080172c0
 80132fc:	080172f8 	.word	0x080172f8
 8013300:	0801732c 	.word	0x0801732c
 8013304:	2000c64c 	.word	0x2000c64c

08013308 <sys_mbox_new>:
#endif

/*-----------------------------------------------------------------------------------*/
//  Creates an empty mailbox.
err_t sys_mbox_new(sys_mbox_t *mbox, int size)
{
 8013308:	b580      	push	{r7, lr}
 801330a:	b086      	sub	sp, #24
 801330c:	af00      	add	r7, sp, #0
 801330e:	6078      	str	r0, [r7, #4]
 8013310:	6039      	str	r1, [r7, #0]
#if (osCMSIS < 0x20000U)
  osMessageQDef(QUEUE, size, void *);
 8013312:	683b      	ldr	r3, [r7, #0]
 8013314:	60bb      	str	r3, [r7, #8]
 8013316:	2304      	movs	r3, #4
 8013318:	60fb      	str	r3, [r7, #12]
 801331a:	2300      	movs	r3, #0
 801331c:	613b      	str	r3, [r7, #16]
 801331e:	2300      	movs	r3, #0
 8013320:	617b      	str	r3, [r7, #20]
  *mbox = osMessageCreate(osMessageQ(QUEUE), NULL);
 8013322:	f107 0308 	add.w	r3, r7, #8
 8013326:	2100      	movs	r1, #0
 8013328:	4618      	mov	r0, r3
 801332a:	f7f2 fccd 	bl	8005cc8 <osMessageCreate>
 801332e:	4602      	mov	r2, r0
 8013330:	687b      	ldr	r3, [r7, #4]
 8013332:	601a      	str	r2, [r3, #0]
#else
  *mbox = osMessageQueueNew(size, sizeof(void *), NULL);
#endif
#if SYS_STATS
  ++lwip_stats.sys.mbox.used;
 8013334:	4b10      	ldr	r3, [pc, #64]	; (8013378 <sys_mbox_new+0x70>)
 8013336:	f8b3 30f4 	ldrh.w	r3, [r3, #244]	; 0xf4
 801333a:	3301      	adds	r3, #1
 801333c:	b29a      	uxth	r2, r3
 801333e:	4b0e      	ldr	r3, [pc, #56]	; (8013378 <sys_mbox_new+0x70>)
 8013340:	f8a3 20f4 	strh.w	r2, [r3, #244]	; 0xf4
  if(lwip_stats.sys.mbox.max < lwip_stats.sys.mbox.used)
 8013344:	4b0c      	ldr	r3, [pc, #48]	; (8013378 <sys_mbox_new+0x70>)
 8013346:	f8b3 20f6 	ldrh.w	r2, [r3, #246]	; 0xf6
 801334a:	4b0b      	ldr	r3, [pc, #44]	; (8013378 <sys_mbox_new+0x70>)
 801334c:	f8b3 30f4 	ldrh.w	r3, [r3, #244]	; 0xf4
 8013350:	429a      	cmp	r2, r3
 8013352:	d205      	bcs.n	8013360 <sys_mbox_new+0x58>
  {
    lwip_stats.sys.mbox.max = lwip_stats.sys.mbox.used;
 8013354:	4b08      	ldr	r3, [pc, #32]	; (8013378 <sys_mbox_new+0x70>)
 8013356:	f8b3 20f4 	ldrh.w	r2, [r3, #244]	; 0xf4
 801335a:	4b07      	ldr	r3, [pc, #28]	; (8013378 <sys_mbox_new+0x70>)
 801335c:	f8a3 20f6 	strh.w	r2, [r3, #246]	; 0xf6
  }
#endif /* SYS_STATS */
  if(*mbox == NULL)
 8013360:	687b      	ldr	r3, [r7, #4]
 8013362:	681b      	ldr	r3, [r3, #0]
 8013364:	2b00      	cmp	r3, #0
 8013366:	d102      	bne.n	801336e <sys_mbox_new+0x66>
    return ERR_MEM;
 8013368:	f04f 33ff 	mov.w	r3, #4294967295
 801336c:	e000      	b.n	8013370 <sys_mbox_new+0x68>

  return ERR_OK;
 801336e:	2300      	movs	r3, #0
}
 8013370:	4618      	mov	r0, r3
 8013372:	3718      	adds	r7, #24
 8013374:	46bd      	mov	sp, r7
 8013376:	bd80      	pop	{r7, pc}
 8013378:	2000c64c 	.word	0x2000c64c

0801337c <sys_mbox_trypost>:


/*-----------------------------------------------------------------------------------*/
//   Try to post the "msg" to the mailbox.
err_t sys_mbox_trypost(sys_mbox_t *mbox, void *msg)
{
 801337c:	b580      	push	{r7, lr}
 801337e:	b084      	sub	sp, #16
 8013380:	af00      	add	r7, sp, #0
 8013382:	6078      	str	r0, [r7, #4]
 8013384:	6039      	str	r1, [r7, #0]
  err_t result;
#if (osCMSIS < 0x20000U)
  if(osMessagePut(*mbox, (uint32_t)msg, 0) == osOK)
 8013386:	687b      	ldr	r3, [r7, #4]
 8013388:	681b      	ldr	r3, [r3, #0]
 801338a:	6839      	ldr	r1, [r7, #0]
 801338c:	2200      	movs	r2, #0
 801338e:	4618      	mov	r0, r3
 8013390:	f7f2 fcc2 	bl	8005d18 <osMessagePut>
 8013394:	4603      	mov	r3, r0
 8013396:	2b00      	cmp	r3, #0
 8013398:	d102      	bne.n	80133a0 <sys_mbox_trypost+0x24>
#else
  if(osMessageQueuePut(*mbox, &msg, 0, 0) == osOK)
#endif
  {
    result = ERR_OK;
 801339a:	2300      	movs	r3, #0
 801339c:	73fb      	strb	r3, [r7, #15]
 801339e:	e009      	b.n	80133b4 <sys_mbox_trypost+0x38>
  }
  else
  {
    // could not post, queue must be full
    result = ERR_MEM;
 80133a0:	23ff      	movs	r3, #255	; 0xff
 80133a2:	73fb      	strb	r3, [r7, #15]

#if SYS_STATS
    lwip_stats.sys.mbox.err++;
 80133a4:	4b06      	ldr	r3, [pc, #24]	; (80133c0 <sys_mbox_trypost+0x44>)
 80133a6:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80133aa:	3301      	adds	r3, #1
 80133ac:	b29a      	uxth	r2, r3
 80133ae:	4b04      	ldr	r3, [pc, #16]	; (80133c0 <sys_mbox_trypost+0x44>)
 80133b0:	f8a3 20f8 	strh.w	r2, [r3, #248]	; 0xf8
#endif /* SYS_STATS */
  }

  return result;
 80133b4:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80133b8:	4618      	mov	r0, r3
 80133ba:	3710      	adds	r7, #16
 80133bc:	46bd      	mov	sp, r7
 80133be:	bd80      	pop	{r7, pc}
 80133c0:	2000c64c 	.word	0x2000c64c

080133c4 <sys_arch_mbox_fetch>:

  Note that a function with a similar name, sys_mbox_fetch(), is
  implemented by lwIP.
*/
u32_t sys_arch_mbox_fetch(sys_mbox_t *mbox, void **msg, u32_t timeout)
{
 80133c4:	b580      	push	{r7, lr}
 80133c6:	b08c      	sub	sp, #48	; 0x30
 80133c8:	af00      	add	r7, sp, #0
 80133ca:	61f8      	str	r0, [r7, #28]
 80133cc:	61b9      	str	r1, [r7, #24]
 80133ce:	617a      	str	r2, [r7, #20]
#if (osCMSIS < 0x20000U)
  osEvent event;
  uint32_t starttime = osKernelSysTick();
 80133d0:	f7f2 faea 	bl	80059a8 <osKernelSysTick>
 80133d4:	62f8      	str	r0, [r7, #44]	; 0x2c
#else
  osStatus_t status;
  uint32_t starttime = osKernelGetTickCount();
#endif
  if(timeout != 0)
 80133d6:	697b      	ldr	r3, [r7, #20]
 80133d8:	2b00      	cmp	r3, #0
 80133da:	d017      	beq.n	801340c <sys_arch_mbox_fetch+0x48>
  {
#if (osCMSIS < 0x20000U)
    event = osMessageGet (*mbox, timeout);
 80133dc:	69fb      	ldr	r3, [r7, #28]
 80133de:	6819      	ldr	r1, [r3, #0]
 80133e0:	f107 0320 	add.w	r3, r7, #32
 80133e4:	697a      	ldr	r2, [r7, #20]
 80133e6:	4618      	mov	r0, r3
 80133e8:	f7f2 fcd6 	bl	8005d98 <osMessageGet>

    if(event.status == osEventMessage)
 80133ec:	6a3b      	ldr	r3, [r7, #32]
 80133ee:	2b10      	cmp	r3, #16
 80133f0:	d109      	bne.n	8013406 <sys_arch_mbox_fetch+0x42>
    {
      *msg = (void *)event.value.v;
 80133f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80133f4:	461a      	mov	r2, r3
 80133f6:	69bb      	ldr	r3, [r7, #24]
 80133f8:	601a      	str	r2, [r3, #0]
      return (osKernelSysTick() - starttime);
 80133fa:	f7f2 fad5 	bl	80059a8 <osKernelSysTick>
 80133fe:	4602      	mov	r2, r0
 8013400:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013402:	1ad3      	subs	r3, r2, r3
 8013404:	e019      	b.n	801343a <sys_arch_mbox_fetch+0x76>
      return (osKernelGetTickCount() - starttime);
    }
#endif
    else
    {
      return SYS_ARCH_TIMEOUT;
 8013406:	f04f 33ff 	mov.w	r3, #4294967295
 801340a:	e016      	b.n	801343a <sys_arch_mbox_fetch+0x76>
    }
  }
  else
  {
#if (osCMSIS < 0x20000U)
    event = osMessageGet (*mbox, osWaitForever);
 801340c:	69fb      	ldr	r3, [r7, #28]
 801340e:	6819      	ldr	r1, [r3, #0]
 8013410:	463b      	mov	r3, r7
 8013412:	f04f 32ff 	mov.w	r2, #4294967295
 8013416:	4618      	mov	r0, r3
 8013418:	f7f2 fcbe 	bl	8005d98 <osMessageGet>
 801341c:	f107 0320 	add.w	r3, r7, #32
 8013420:	463a      	mov	r2, r7
 8013422:	ca07      	ldmia	r2, {r0, r1, r2}
 8013424:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    *msg = (void *)event.value.v;
 8013428:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801342a:	461a      	mov	r2, r3
 801342c:	69bb      	ldr	r3, [r7, #24]
 801342e:	601a      	str	r2, [r3, #0]
    return (osKernelSysTick() - starttime);
 8013430:	f7f2 faba 	bl	80059a8 <osKernelSysTick>
 8013434:	4602      	mov	r2, r0
 8013436:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013438:	1ad3      	subs	r3, r2, r3
#else
    osMessageQueueGet(*mbox, msg, 0, osWaitForever );
    return (osKernelGetTickCount() - starttime);
#endif
  }
}
 801343a:	4618      	mov	r0, r3
 801343c:	3730      	adds	r7, #48	; 0x30
 801343e:	46bd      	mov	sp, r7
 8013440:	bd80      	pop	{r7, pc}

08013442 <sys_mbox_valid>:
    return SYS_MBOX_EMPTY;
  }
}
/*----------------------------------------------------------------------------------*/
int sys_mbox_valid(sys_mbox_t *mbox)
{
 8013442:	b480      	push	{r7}
 8013444:	b083      	sub	sp, #12
 8013446:	af00      	add	r7, sp, #0
 8013448:	6078      	str	r0, [r7, #4]
  if (*mbox == SYS_MBOX_NULL)
 801344a:	687b      	ldr	r3, [r7, #4]
 801344c:	681b      	ldr	r3, [r3, #0]
 801344e:	2b00      	cmp	r3, #0
 8013450:	d101      	bne.n	8013456 <sys_mbox_valid+0x14>
    return 0;
 8013452:	2300      	movs	r3, #0
 8013454:	e000      	b.n	8013458 <sys_mbox_valid+0x16>
  else
    return 1;
 8013456:	2301      	movs	r3, #1
}
 8013458:	4618      	mov	r0, r3
 801345a:	370c      	adds	r7, #12
 801345c:	46bd      	mov	sp, r7
 801345e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013462:	4770      	bx	lr

08013464 <sys_init>:
#else
osMutexId_t lwip_sys_mutex;
#endif
// Initialize sys arch
void sys_init(void)
{
 8013464:	b580      	push	{r7, lr}
 8013466:	af00      	add	r7, sp, #0
#if (osCMSIS < 0x20000U)
  lwip_sys_mutex = osMutexCreate(osMutex(lwip_sys_mutex));
 8013468:	4803      	ldr	r0, [pc, #12]	; (8013478 <sys_init+0x14>)
 801346a:	f7f2 fb0d 	bl	8005a88 <osMutexCreate>
 801346e:	4603      	mov	r3, r0
 8013470:	4a02      	ldr	r2, [pc, #8]	; (801347c <sys_init+0x18>)
 8013472:	6013      	str	r3, [r2, #0]
#else
  lwip_sys_mutex = osMutexNew(NULL);
#endif
}
 8013474:	bf00      	nop
 8013476:	bd80      	pop	{r7, pc}
 8013478:	080174d4 	.word	0x080174d4
 801347c:	2000c8a4 	.word	0x2000c8a4

08013480 <sys_mutex_new>:
                                      /* Mutexes*/
/*-----------------------------------------------------------------------------------*/
/*-----------------------------------------------------------------------------------*/
#if LWIP_COMPAT_MUTEX == 0
/* Create a new mutex*/
err_t sys_mutex_new(sys_mutex_t *mutex) {
 8013480:	b580      	push	{r7, lr}
 8013482:	b084      	sub	sp, #16
 8013484:	af00      	add	r7, sp, #0
 8013486:	6078      	str	r0, [r7, #4]

#if (osCMSIS < 0x20000U)
  osMutexDef(MUTEX);
 8013488:	2300      	movs	r3, #0
 801348a:	60bb      	str	r3, [r7, #8]
 801348c:	2300      	movs	r3, #0
 801348e:	60fb      	str	r3, [r7, #12]
  *mutex = osMutexCreate(osMutex(MUTEX));
 8013490:	f107 0308 	add.w	r3, r7, #8
 8013494:	4618      	mov	r0, r3
 8013496:	f7f2 faf7 	bl	8005a88 <osMutexCreate>
 801349a:	4602      	mov	r2, r0
 801349c:	687b      	ldr	r3, [r7, #4]
 801349e:	601a      	str	r2, [r3, #0]
#else
  *mutex = osMutexNew(NULL);
#endif

  if(*mutex == NULL)
 80134a0:	687b      	ldr	r3, [r7, #4]
 80134a2:	681b      	ldr	r3, [r3, #0]
 80134a4:	2b00      	cmp	r3, #0
 80134a6:	d10a      	bne.n	80134be <sys_mutex_new+0x3e>
  {
#if SYS_STATS
    ++lwip_stats.sys.mutex.err;
 80134a8:	4b12      	ldr	r3, [pc, #72]	; (80134f4 <sys_mutex_new+0x74>)
 80134aa:	f8b3 30f2 	ldrh.w	r3, [r3, #242]	; 0xf2
 80134ae:	3301      	adds	r3, #1
 80134b0:	b29a      	uxth	r2, r3
 80134b2:	4b10      	ldr	r3, [pc, #64]	; (80134f4 <sys_mutex_new+0x74>)
 80134b4:	f8a3 20f2 	strh.w	r2, [r3, #242]	; 0xf2
#endif /* SYS_STATS */
    return ERR_MEM;
 80134b8:	f04f 33ff 	mov.w	r3, #4294967295
 80134bc:	e016      	b.n	80134ec <sys_mutex_new+0x6c>
  }

#if SYS_STATS
  ++lwip_stats.sys.mutex.used;
 80134be:	4b0d      	ldr	r3, [pc, #52]	; (80134f4 <sys_mutex_new+0x74>)
 80134c0:	f8b3 30ee 	ldrh.w	r3, [r3, #238]	; 0xee
 80134c4:	3301      	adds	r3, #1
 80134c6:	b29a      	uxth	r2, r3
 80134c8:	4b0a      	ldr	r3, [pc, #40]	; (80134f4 <sys_mutex_new+0x74>)
 80134ca:	f8a3 20ee 	strh.w	r2, [r3, #238]	; 0xee
  if (lwip_stats.sys.mutex.max < lwip_stats.sys.mutex.used) {
 80134ce:	4b09      	ldr	r3, [pc, #36]	; (80134f4 <sys_mutex_new+0x74>)
 80134d0:	f8b3 20f0 	ldrh.w	r2, [r3, #240]	; 0xf0
 80134d4:	4b07      	ldr	r3, [pc, #28]	; (80134f4 <sys_mutex_new+0x74>)
 80134d6:	f8b3 30ee 	ldrh.w	r3, [r3, #238]	; 0xee
 80134da:	429a      	cmp	r2, r3
 80134dc:	d205      	bcs.n	80134ea <sys_mutex_new+0x6a>
    lwip_stats.sys.mutex.max = lwip_stats.sys.mutex.used;
 80134de:	4b05      	ldr	r3, [pc, #20]	; (80134f4 <sys_mutex_new+0x74>)
 80134e0:	f8b3 20ee 	ldrh.w	r2, [r3, #238]	; 0xee
 80134e4:	4b03      	ldr	r3, [pc, #12]	; (80134f4 <sys_mutex_new+0x74>)
 80134e6:	f8a3 20f0 	strh.w	r2, [r3, #240]	; 0xf0
  }
#endif /* SYS_STATS */
  return ERR_OK;
 80134ea:	2300      	movs	r3, #0
}
 80134ec:	4618      	mov	r0, r3
 80134ee:	3710      	adds	r7, #16
 80134f0:	46bd      	mov	sp, r7
 80134f2:	bd80      	pop	{r7, pc}
 80134f4:	2000c64c 	.word	0x2000c64c

080134f8 <sys_mutex_lock>:
  osMutexDelete(*mutex);
}
/*-----------------------------------------------------------------------------------*/
/* Lock a mutex*/
void sys_mutex_lock(sys_mutex_t *mutex)
{
 80134f8:	b580      	push	{r7, lr}
 80134fa:	b082      	sub	sp, #8
 80134fc:	af00      	add	r7, sp, #0
 80134fe:	6078      	str	r0, [r7, #4]
#if (osCMSIS < 0x20000U)
  osMutexWait(*mutex, osWaitForever);
 8013500:	687b      	ldr	r3, [r7, #4]
 8013502:	681b      	ldr	r3, [r3, #0]
 8013504:	f04f 31ff 	mov.w	r1, #4294967295
 8013508:	4618      	mov	r0, r3
 801350a:	f7f2 fad5 	bl	8005ab8 <osMutexWait>
#else
  osMutexAcquire(*mutex, osWaitForever);
#endif
}
 801350e:	bf00      	nop
 8013510:	3708      	adds	r7, #8
 8013512:	46bd      	mov	sp, r7
 8013514:	bd80      	pop	{r7, pc}

08013516 <sys_mutex_unlock>:

/*-----------------------------------------------------------------------------------*/
/* Unlock a mutex*/
void sys_mutex_unlock(sys_mutex_t *mutex)
{
 8013516:	b580      	push	{r7, lr}
 8013518:	b082      	sub	sp, #8
 801351a:	af00      	add	r7, sp, #0
 801351c:	6078      	str	r0, [r7, #4]
  osMutexRelease(*mutex);
 801351e:	687b      	ldr	r3, [r7, #4]
 8013520:	681b      	ldr	r3, [r3, #0]
 8013522:	4618      	mov	r0, r3
 8013524:	f7f2 fb16 	bl	8005b54 <osMutexRelease>
}
 8013528:	bf00      	nop
 801352a:	3708      	adds	r7, #8
 801352c:	46bd      	mov	sp, r7
 801352e:	bd80      	pop	{r7, pc}

08013530 <sys_thread_new>:
  function "thread()". The "arg" argument will be passed as an argument to the
  thread() function. The id of the new thread is returned. Both the id and
  the priority are system dependent.
*/
sys_thread_t sys_thread_new(const char *name, lwip_thread_fn thread , void *arg, int stacksize, int prio)
{
 8013530:	b580      	push	{r7, lr}
 8013532:	b08c      	sub	sp, #48	; 0x30
 8013534:	af00      	add	r7, sp, #0
 8013536:	60f8      	str	r0, [r7, #12]
 8013538:	60b9      	str	r1, [r7, #8]
 801353a:	607a      	str	r2, [r7, #4]
 801353c:	603b      	str	r3, [r7, #0]
#if (osCMSIS < 0x20000U)
  const osThreadDef_t os_thread_def = { (char *)name, (os_pthread)thread, (osPriority)prio, 0, stacksize};
 801353e:	f107 0314 	add.w	r3, r7, #20
 8013542:	2200      	movs	r2, #0
 8013544:	601a      	str	r2, [r3, #0]
 8013546:	605a      	str	r2, [r3, #4]
 8013548:	609a      	str	r2, [r3, #8]
 801354a:	60da      	str	r2, [r3, #12]
 801354c:	611a      	str	r2, [r3, #16]
 801354e:	615a      	str	r2, [r3, #20]
 8013550:	619a      	str	r2, [r3, #24]
 8013552:	68fb      	ldr	r3, [r7, #12]
 8013554:	617b      	str	r3, [r7, #20]
 8013556:	68bb      	ldr	r3, [r7, #8]
 8013558:	61bb      	str	r3, [r7, #24]
 801355a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801355c:	b21b      	sxth	r3, r3
 801355e:	83bb      	strh	r3, [r7, #28]
 8013560:	683b      	ldr	r3, [r7, #0]
 8013562:	627b      	str	r3, [r7, #36]	; 0x24
  return osThreadCreate(&os_thread_def, arg);
 8013564:	f107 0314 	add.w	r3, r7, #20
 8013568:	6879      	ldr	r1, [r7, #4]
 801356a:	4618      	mov	r0, r3
 801356c:	f7f2 fa2c 	bl	80059c8 <osThreadCreate>
 8013570:	4603      	mov	r3, r0
                        .stack_size = stacksize,
                        .priority = (osPriority_t)prio,
                      };
  return osThreadNew(thread, arg, &attributes);
#endif
}
 8013572:	4618      	mov	r0, r3
 8013574:	3730      	adds	r7, #48	; 0x30
 8013576:	46bd      	mov	sp, r7
 8013578:	bd80      	pop	{r7, pc}
	...

0801357c <sys_arch_protect>:

  Note: This function is based on FreeRTOS API, because no equivalent CMSIS-RTOS
        API is available
*/
sys_prot_t sys_arch_protect(void)
{
 801357c:	b580      	push	{r7, lr}
 801357e:	af00      	add	r7, sp, #0
#if (osCMSIS < 0x20000U)
  osMutexWait(lwip_sys_mutex, osWaitForever);
 8013580:	4b04      	ldr	r3, [pc, #16]	; (8013594 <sys_arch_protect+0x18>)
 8013582:	681b      	ldr	r3, [r3, #0]
 8013584:	f04f 31ff 	mov.w	r1, #4294967295
 8013588:	4618      	mov	r0, r3
 801358a:	f7f2 fa95 	bl	8005ab8 <osMutexWait>
#else
  osMutexAcquire(lwip_sys_mutex, osWaitForever);
#endif
  return (sys_prot_t)1;
 801358e:	2301      	movs	r3, #1
}
 8013590:	4618      	mov	r0, r3
 8013592:	bd80      	pop	{r7, pc}
 8013594:	2000c8a4 	.word	0x2000c8a4

08013598 <sys_arch_unprotect>:

  Note: This function is based on FreeRTOS API, because no equivalent CMSIS-RTOS
        API is available
*/
void sys_arch_unprotect(sys_prot_t pval)
{
 8013598:	b580      	push	{r7, lr}
 801359a:	b082      	sub	sp, #8
 801359c:	af00      	add	r7, sp, #0
 801359e:	6078      	str	r0, [r7, #4]
  ( void ) pval;
  osMutexRelease(lwip_sys_mutex);
 80135a0:	4b04      	ldr	r3, [pc, #16]	; (80135b4 <sys_arch_unprotect+0x1c>)
 80135a2:	681b      	ldr	r3, [r3, #0]
 80135a4:	4618      	mov	r0, r3
 80135a6:	f7f2 fad5 	bl	8005b54 <osMutexRelease>
}
 80135aa:	bf00      	nop
 80135ac:	3708      	adds	r7, #8
 80135ae:	46bd      	mov	sp, r7
 80135b0:	bd80      	pop	{r7, pc}
 80135b2:	bf00      	nop
 80135b4:	2000c8a4 	.word	0x2000c8a4

080135b8 <std>:
 80135b8:	2300      	movs	r3, #0
 80135ba:	b510      	push	{r4, lr}
 80135bc:	4604      	mov	r4, r0
 80135be:	e9c0 3300 	strd	r3, r3, [r0]
 80135c2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80135c6:	6083      	str	r3, [r0, #8]
 80135c8:	8181      	strh	r1, [r0, #12]
 80135ca:	6643      	str	r3, [r0, #100]	; 0x64
 80135cc:	81c2      	strh	r2, [r0, #14]
 80135ce:	6183      	str	r3, [r0, #24]
 80135d0:	4619      	mov	r1, r3
 80135d2:	2208      	movs	r2, #8
 80135d4:	305c      	adds	r0, #92	; 0x5c
 80135d6:	f000 f92a 	bl	801382e <memset>
 80135da:	4b05      	ldr	r3, [pc, #20]	; (80135f0 <std+0x38>)
 80135dc:	6263      	str	r3, [r4, #36]	; 0x24
 80135de:	4b05      	ldr	r3, [pc, #20]	; (80135f4 <std+0x3c>)
 80135e0:	62a3      	str	r3, [r4, #40]	; 0x28
 80135e2:	4b05      	ldr	r3, [pc, #20]	; (80135f8 <std+0x40>)
 80135e4:	62e3      	str	r3, [r4, #44]	; 0x2c
 80135e6:	4b05      	ldr	r3, [pc, #20]	; (80135fc <std+0x44>)
 80135e8:	6224      	str	r4, [r4, #32]
 80135ea:	6323      	str	r3, [r4, #48]	; 0x30
 80135ec:	bd10      	pop	{r4, pc}
 80135ee:	bf00      	nop
 80135f0:	08013b09 	.word	0x08013b09
 80135f4:	08013b2b 	.word	0x08013b2b
 80135f8:	08013b63 	.word	0x08013b63
 80135fc:	08013b87 	.word	0x08013b87

08013600 <_cleanup_r>:
 8013600:	4901      	ldr	r1, [pc, #4]	; (8013608 <_cleanup_r+0x8>)
 8013602:	f000 b8af 	b.w	8013764 <_fwalk_reent>
 8013606:	bf00      	nop
 8013608:	08013d1d 	.word	0x08013d1d

0801360c <__sfmoreglue>:
 801360c:	b570      	push	{r4, r5, r6, lr}
 801360e:	2268      	movs	r2, #104	; 0x68
 8013610:	1e4d      	subs	r5, r1, #1
 8013612:	4355      	muls	r5, r2
 8013614:	460e      	mov	r6, r1
 8013616:	f105 0174 	add.w	r1, r5, #116	; 0x74
 801361a:	f000 f931 	bl	8013880 <_malloc_r>
 801361e:	4604      	mov	r4, r0
 8013620:	b140      	cbz	r0, 8013634 <__sfmoreglue+0x28>
 8013622:	2100      	movs	r1, #0
 8013624:	e9c0 1600 	strd	r1, r6, [r0]
 8013628:	300c      	adds	r0, #12
 801362a:	60a0      	str	r0, [r4, #8]
 801362c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8013630:	f000 f8fd 	bl	801382e <memset>
 8013634:	4620      	mov	r0, r4
 8013636:	bd70      	pop	{r4, r5, r6, pc}

08013638 <__sfp_lock_acquire>:
 8013638:	4801      	ldr	r0, [pc, #4]	; (8013640 <__sfp_lock_acquire+0x8>)
 801363a:	f000 b8d8 	b.w	80137ee <__retarget_lock_acquire_recursive>
 801363e:	bf00      	nop
 8013640:	2000c8a9 	.word	0x2000c8a9

08013644 <__sfp_lock_release>:
 8013644:	4801      	ldr	r0, [pc, #4]	; (801364c <__sfp_lock_release+0x8>)
 8013646:	f000 b8d3 	b.w	80137f0 <__retarget_lock_release_recursive>
 801364a:	bf00      	nop
 801364c:	2000c8a9 	.word	0x2000c8a9

08013650 <__sinit_lock_acquire>:
 8013650:	4801      	ldr	r0, [pc, #4]	; (8013658 <__sinit_lock_acquire+0x8>)
 8013652:	f000 b8cc 	b.w	80137ee <__retarget_lock_acquire_recursive>
 8013656:	bf00      	nop
 8013658:	2000c8aa 	.word	0x2000c8aa

0801365c <__sinit_lock_release>:
 801365c:	4801      	ldr	r0, [pc, #4]	; (8013664 <__sinit_lock_release+0x8>)
 801365e:	f000 b8c7 	b.w	80137f0 <__retarget_lock_release_recursive>
 8013662:	bf00      	nop
 8013664:	2000c8aa 	.word	0x2000c8aa

08013668 <__sinit>:
 8013668:	b510      	push	{r4, lr}
 801366a:	4604      	mov	r4, r0
 801366c:	f7ff fff0 	bl	8013650 <__sinit_lock_acquire>
 8013670:	69a3      	ldr	r3, [r4, #24]
 8013672:	b11b      	cbz	r3, 801367c <__sinit+0x14>
 8013674:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8013678:	f7ff bff0 	b.w	801365c <__sinit_lock_release>
 801367c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8013680:	6523      	str	r3, [r4, #80]	; 0x50
 8013682:	4b13      	ldr	r3, [pc, #76]	; (80136d0 <__sinit+0x68>)
 8013684:	4a13      	ldr	r2, [pc, #76]	; (80136d4 <__sinit+0x6c>)
 8013686:	681b      	ldr	r3, [r3, #0]
 8013688:	62a2      	str	r2, [r4, #40]	; 0x28
 801368a:	42a3      	cmp	r3, r4
 801368c:	bf04      	itt	eq
 801368e:	2301      	moveq	r3, #1
 8013690:	61a3      	streq	r3, [r4, #24]
 8013692:	4620      	mov	r0, r4
 8013694:	f000 f820 	bl	80136d8 <__sfp>
 8013698:	6060      	str	r0, [r4, #4]
 801369a:	4620      	mov	r0, r4
 801369c:	f000 f81c 	bl	80136d8 <__sfp>
 80136a0:	60a0      	str	r0, [r4, #8]
 80136a2:	4620      	mov	r0, r4
 80136a4:	f000 f818 	bl	80136d8 <__sfp>
 80136a8:	2200      	movs	r2, #0
 80136aa:	60e0      	str	r0, [r4, #12]
 80136ac:	2104      	movs	r1, #4
 80136ae:	6860      	ldr	r0, [r4, #4]
 80136b0:	f7ff ff82 	bl	80135b8 <std>
 80136b4:	68a0      	ldr	r0, [r4, #8]
 80136b6:	2201      	movs	r2, #1
 80136b8:	2109      	movs	r1, #9
 80136ba:	f7ff ff7d 	bl	80135b8 <std>
 80136be:	68e0      	ldr	r0, [r4, #12]
 80136c0:	2202      	movs	r2, #2
 80136c2:	2112      	movs	r1, #18
 80136c4:	f7ff ff78 	bl	80135b8 <std>
 80136c8:	2301      	movs	r3, #1
 80136ca:	61a3      	str	r3, [r4, #24]
 80136cc:	e7d2      	b.n	8013674 <__sinit+0xc>
 80136ce:	bf00      	nop
 80136d0:	0801753c 	.word	0x0801753c
 80136d4:	08013601 	.word	0x08013601

080136d8 <__sfp>:
 80136d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80136da:	4607      	mov	r7, r0
 80136dc:	f7ff ffac 	bl	8013638 <__sfp_lock_acquire>
 80136e0:	4b1e      	ldr	r3, [pc, #120]	; (801375c <__sfp+0x84>)
 80136e2:	681e      	ldr	r6, [r3, #0]
 80136e4:	69b3      	ldr	r3, [r6, #24]
 80136e6:	b913      	cbnz	r3, 80136ee <__sfp+0x16>
 80136e8:	4630      	mov	r0, r6
 80136ea:	f7ff ffbd 	bl	8013668 <__sinit>
 80136ee:	3648      	adds	r6, #72	; 0x48
 80136f0:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80136f4:	3b01      	subs	r3, #1
 80136f6:	d503      	bpl.n	8013700 <__sfp+0x28>
 80136f8:	6833      	ldr	r3, [r6, #0]
 80136fa:	b30b      	cbz	r3, 8013740 <__sfp+0x68>
 80136fc:	6836      	ldr	r6, [r6, #0]
 80136fe:	e7f7      	b.n	80136f0 <__sfp+0x18>
 8013700:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8013704:	b9d5      	cbnz	r5, 801373c <__sfp+0x64>
 8013706:	4b16      	ldr	r3, [pc, #88]	; (8013760 <__sfp+0x88>)
 8013708:	60e3      	str	r3, [r4, #12]
 801370a:	f104 0058 	add.w	r0, r4, #88	; 0x58
 801370e:	6665      	str	r5, [r4, #100]	; 0x64
 8013710:	f000 f86c 	bl	80137ec <__retarget_lock_init_recursive>
 8013714:	f7ff ff96 	bl	8013644 <__sfp_lock_release>
 8013718:	e9c4 5501 	strd	r5, r5, [r4, #4]
 801371c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8013720:	6025      	str	r5, [r4, #0]
 8013722:	61a5      	str	r5, [r4, #24]
 8013724:	2208      	movs	r2, #8
 8013726:	4629      	mov	r1, r5
 8013728:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 801372c:	f000 f87f 	bl	801382e <memset>
 8013730:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8013734:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8013738:	4620      	mov	r0, r4
 801373a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801373c:	3468      	adds	r4, #104	; 0x68
 801373e:	e7d9      	b.n	80136f4 <__sfp+0x1c>
 8013740:	2104      	movs	r1, #4
 8013742:	4638      	mov	r0, r7
 8013744:	f7ff ff62 	bl	801360c <__sfmoreglue>
 8013748:	4604      	mov	r4, r0
 801374a:	6030      	str	r0, [r6, #0]
 801374c:	2800      	cmp	r0, #0
 801374e:	d1d5      	bne.n	80136fc <__sfp+0x24>
 8013750:	f7ff ff78 	bl	8013644 <__sfp_lock_release>
 8013754:	230c      	movs	r3, #12
 8013756:	603b      	str	r3, [r7, #0]
 8013758:	e7ee      	b.n	8013738 <__sfp+0x60>
 801375a:	bf00      	nop
 801375c:	0801753c 	.word	0x0801753c
 8013760:	ffff0001 	.word	0xffff0001

08013764 <_fwalk_reent>:
 8013764:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8013768:	4606      	mov	r6, r0
 801376a:	4688      	mov	r8, r1
 801376c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8013770:	2700      	movs	r7, #0
 8013772:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8013776:	f1b9 0901 	subs.w	r9, r9, #1
 801377a:	d505      	bpl.n	8013788 <_fwalk_reent+0x24>
 801377c:	6824      	ldr	r4, [r4, #0]
 801377e:	2c00      	cmp	r4, #0
 8013780:	d1f7      	bne.n	8013772 <_fwalk_reent+0xe>
 8013782:	4638      	mov	r0, r7
 8013784:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8013788:	89ab      	ldrh	r3, [r5, #12]
 801378a:	2b01      	cmp	r3, #1
 801378c:	d907      	bls.n	801379e <_fwalk_reent+0x3a>
 801378e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8013792:	3301      	adds	r3, #1
 8013794:	d003      	beq.n	801379e <_fwalk_reent+0x3a>
 8013796:	4629      	mov	r1, r5
 8013798:	4630      	mov	r0, r6
 801379a:	47c0      	blx	r8
 801379c:	4307      	orrs	r7, r0
 801379e:	3568      	adds	r5, #104	; 0x68
 80137a0:	e7e9      	b.n	8013776 <_fwalk_reent+0x12>
	...

080137a4 <__libc_init_array>:
 80137a4:	b570      	push	{r4, r5, r6, lr}
 80137a6:	4d0d      	ldr	r5, [pc, #52]	; (80137dc <__libc_init_array+0x38>)
 80137a8:	4c0d      	ldr	r4, [pc, #52]	; (80137e0 <__libc_init_array+0x3c>)
 80137aa:	1b64      	subs	r4, r4, r5
 80137ac:	10a4      	asrs	r4, r4, #2
 80137ae:	2600      	movs	r6, #0
 80137b0:	42a6      	cmp	r6, r4
 80137b2:	d109      	bne.n	80137c8 <__libc_init_array+0x24>
 80137b4:	4d0b      	ldr	r5, [pc, #44]	; (80137e4 <__libc_init_array+0x40>)
 80137b6:	4c0c      	ldr	r4, [pc, #48]	; (80137e8 <__libc_init_array+0x44>)
 80137b8:	f001 f802 	bl	80147c0 <_init>
 80137bc:	1b64      	subs	r4, r4, r5
 80137be:	10a4      	asrs	r4, r4, #2
 80137c0:	2600      	movs	r6, #0
 80137c2:	42a6      	cmp	r6, r4
 80137c4:	d105      	bne.n	80137d2 <__libc_init_array+0x2e>
 80137c6:	bd70      	pop	{r4, r5, r6, pc}
 80137c8:	f855 3b04 	ldr.w	r3, [r5], #4
 80137cc:	4798      	blx	r3
 80137ce:	3601      	adds	r6, #1
 80137d0:	e7ee      	b.n	80137b0 <__libc_init_array+0xc>
 80137d2:	f855 3b04 	ldr.w	r3, [r5], #4
 80137d6:	4798      	blx	r3
 80137d8:	3601      	adds	r6, #1
 80137da:	e7f2      	b.n	80137c2 <__libc_init_array+0x1e>
 80137dc:	0801762c 	.word	0x0801762c
 80137e0:	0801762c 	.word	0x0801762c
 80137e4:	0801762c 	.word	0x0801762c
 80137e8:	08017630 	.word	0x08017630

080137ec <__retarget_lock_init_recursive>:
 80137ec:	4770      	bx	lr

080137ee <__retarget_lock_acquire_recursive>:
 80137ee:	4770      	bx	lr

080137f0 <__retarget_lock_release_recursive>:
 80137f0:	4770      	bx	lr

080137f2 <memcmp>:
 80137f2:	b510      	push	{r4, lr}
 80137f4:	3901      	subs	r1, #1
 80137f6:	4402      	add	r2, r0
 80137f8:	4290      	cmp	r0, r2
 80137fa:	d101      	bne.n	8013800 <memcmp+0xe>
 80137fc:	2000      	movs	r0, #0
 80137fe:	e005      	b.n	801380c <memcmp+0x1a>
 8013800:	7803      	ldrb	r3, [r0, #0]
 8013802:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8013806:	42a3      	cmp	r3, r4
 8013808:	d001      	beq.n	801380e <memcmp+0x1c>
 801380a:	1b18      	subs	r0, r3, r4
 801380c:	bd10      	pop	{r4, pc}
 801380e:	3001      	adds	r0, #1
 8013810:	e7f2      	b.n	80137f8 <memcmp+0x6>

08013812 <memcpy>:
 8013812:	440a      	add	r2, r1
 8013814:	4291      	cmp	r1, r2
 8013816:	f100 33ff 	add.w	r3, r0, #4294967295
 801381a:	d100      	bne.n	801381e <memcpy+0xc>
 801381c:	4770      	bx	lr
 801381e:	b510      	push	{r4, lr}
 8013820:	f811 4b01 	ldrb.w	r4, [r1], #1
 8013824:	f803 4f01 	strb.w	r4, [r3, #1]!
 8013828:	4291      	cmp	r1, r2
 801382a:	d1f9      	bne.n	8013820 <memcpy+0xe>
 801382c:	bd10      	pop	{r4, pc}

0801382e <memset>:
 801382e:	4402      	add	r2, r0
 8013830:	4603      	mov	r3, r0
 8013832:	4293      	cmp	r3, r2
 8013834:	d100      	bne.n	8013838 <memset+0xa>
 8013836:	4770      	bx	lr
 8013838:	f803 1b01 	strb.w	r1, [r3], #1
 801383c:	e7f9      	b.n	8013832 <memset+0x4>
	...

08013840 <sbrk_aligned>:
 8013840:	b570      	push	{r4, r5, r6, lr}
 8013842:	4e0e      	ldr	r6, [pc, #56]	; (801387c <sbrk_aligned+0x3c>)
 8013844:	460c      	mov	r4, r1
 8013846:	6831      	ldr	r1, [r6, #0]
 8013848:	4605      	mov	r5, r0
 801384a:	b911      	cbnz	r1, 8013852 <sbrk_aligned+0x12>
 801384c:	f000 f94c 	bl	8013ae8 <_sbrk_r>
 8013850:	6030      	str	r0, [r6, #0]
 8013852:	4621      	mov	r1, r4
 8013854:	4628      	mov	r0, r5
 8013856:	f000 f947 	bl	8013ae8 <_sbrk_r>
 801385a:	1c43      	adds	r3, r0, #1
 801385c:	d00a      	beq.n	8013874 <sbrk_aligned+0x34>
 801385e:	1cc4      	adds	r4, r0, #3
 8013860:	f024 0403 	bic.w	r4, r4, #3
 8013864:	42a0      	cmp	r0, r4
 8013866:	d007      	beq.n	8013878 <sbrk_aligned+0x38>
 8013868:	1a21      	subs	r1, r4, r0
 801386a:	4628      	mov	r0, r5
 801386c:	f000 f93c 	bl	8013ae8 <_sbrk_r>
 8013870:	3001      	adds	r0, #1
 8013872:	d101      	bne.n	8013878 <sbrk_aligned+0x38>
 8013874:	f04f 34ff 	mov.w	r4, #4294967295
 8013878:	4620      	mov	r0, r4
 801387a:	bd70      	pop	{r4, r5, r6, pc}
 801387c:	2000c8b0 	.word	0x2000c8b0

08013880 <_malloc_r>:
 8013880:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013884:	1ccd      	adds	r5, r1, #3
 8013886:	f025 0503 	bic.w	r5, r5, #3
 801388a:	3508      	adds	r5, #8
 801388c:	2d0c      	cmp	r5, #12
 801388e:	bf38      	it	cc
 8013890:	250c      	movcc	r5, #12
 8013892:	2d00      	cmp	r5, #0
 8013894:	4607      	mov	r7, r0
 8013896:	db01      	blt.n	801389c <_malloc_r+0x1c>
 8013898:	42a9      	cmp	r1, r5
 801389a:	d905      	bls.n	80138a8 <_malloc_r+0x28>
 801389c:	230c      	movs	r3, #12
 801389e:	603b      	str	r3, [r7, #0]
 80138a0:	2600      	movs	r6, #0
 80138a2:	4630      	mov	r0, r6
 80138a4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80138a8:	4e2e      	ldr	r6, [pc, #184]	; (8013964 <_malloc_r+0xe4>)
 80138aa:	f000 fa9f 	bl	8013dec <__malloc_lock>
 80138ae:	6833      	ldr	r3, [r6, #0]
 80138b0:	461c      	mov	r4, r3
 80138b2:	bb34      	cbnz	r4, 8013902 <_malloc_r+0x82>
 80138b4:	4629      	mov	r1, r5
 80138b6:	4638      	mov	r0, r7
 80138b8:	f7ff ffc2 	bl	8013840 <sbrk_aligned>
 80138bc:	1c43      	adds	r3, r0, #1
 80138be:	4604      	mov	r4, r0
 80138c0:	d14d      	bne.n	801395e <_malloc_r+0xde>
 80138c2:	6834      	ldr	r4, [r6, #0]
 80138c4:	4626      	mov	r6, r4
 80138c6:	2e00      	cmp	r6, #0
 80138c8:	d140      	bne.n	801394c <_malloc_r+0xcc>
 80138ca:	6823      	ldr	r3, [r4, #0]
 80138cc:	4631      	mov	r1, r6
 80138ce:	4638      	mov	r0, r7
 80138d0:	eb04 0803 	add.w	r8, r4, r3
 80138d4:	f000 f908 	bl	8013ae8 <_sbrk_r>
 80138d8:	4580      	cmp	r8, r0
 80138da:	d13a      	bne.n	8013952 <_malloc_r+0xd2>
 80138dc:	6821      	ldr	r1, [r4, #0]
 80138de:	3503      	adds	r5, #3
 80138e0:	1a6d      	subs	r5, r5, r1
 80138e2:	f025 0503 	bic.w	r5, r5, #3
 80138e6:	3508      	adds	r5, #8
 80138e8:	2d0c      	cmp	r5, #12
 80138ea:	bf38      	it	cc
 80138ec:	250c      	movcc	r5, #12
 80138ee:	4629      	mov	r1, r5
 80138f0:	4638      	mov	r0, r7
 80138f2:	f7ff ffa5 	bl	8013840 <sbrk_aligned>
 80138f6:	3001      	adds	r0, #1
 80138f8:	d02b      	beq.n	8013952 <_malloc_r+0xd2>
 80138fa:	6823      	ldr	r3, [r4, #0]
 80138fc:	442b      	add	r3, r5
 80138fe:	6023      	str	r3, [r4, #0]
 8013900:	e00e      	b.n	8013920 <_malloc_r+0xa0>
 8013902:	6822      	ldr	r2, [r4, #0]
 8013904:	1b52      	subs	r2, r2, r5
 8013906:	d41e      	bmi.n	8013946 <_malloc_r+0xc6>
 8013908:	2a0b      	cmp	r2, #11
 801390a:	d916      	bls.n	801393a <_malloc_r+0xba>
 801390c:	1961      	adds	r1, r4, r5
 801390e:	42a3      	cmp	r3, r4
 8013910:	6025      	str	r5, [r4, #0]
 8013912:	bf18      	it	ne
 8013914:	6059      	strne	r1, [r3, #4]
 8013916:	6863      	ldr	r3, [r4, #4]
 8013918:	bf08      	it	eq
 801391a:	6031      	streq	r1, [r6, #0]
 801391c:	5162      	str	r2, [r4, r5]
 801391e:	604b      	str	r3, [r1, #4]
 8013920:	4638      	mov	r0, r7
 8013922:	f104 060b 	add.w	r6, r4, #11
 8013926:	f000 fa67 	bl	8013df8 <__malloc_unlock>
 801392a:	f026 0607 	bic.w	r6, r6, #7
 801392e:	1d23      	adds	r3, r4, #4
 8013930:	1af2      	subs	r2, r6, r3
 8013932:	d0b6      	beq.n	80138a2 <_malloc_r+0x22>
 8013934:	1b9b      	subs	r3, r3, r6
 8013936:	50a3      	str	r3, [r4, r2]
 8013938:	e7b3      	b.n	80138a2 <_malloc_r+0x22>
 801393a:	6862      	ldr	r2, [r4, #4]
 801393c:	42a3      	cmp	r3, r4
 801393e:	bf0c      	ite	eq
 8013940:	6032      	streq	r2, [r6, #0]
 8013942:	605a      	strne	r2, [r3, #4]
 8013944:	e7ec      	b.n	8013920 <_malloc_r+0xa0>
 8013946:	4623      	mov	r3, r4
 8013948:	6864      	ldr	r4, [r4, #4]
 801394a:	e7b2      	b.n	80138b2 <_malloc_r+0x32>
 801394c:	4634      	mov	r4, r6
 801394e:	6876      	ldr	r6, [r6, #4]
 8013950:	e7b9      	b.n	80138c6 <_malloc_r+0x46>
 8013952:	230c      	movs	r3, #12
 8013954:	603b      	str	r3, [r7, #0]
 8013956:	4638      	mov	r0, r7
 8013958:	f000 fa4e 	bl	8013df8 <__malloc_unlock>
 801395c:	e7a1      	b.n	80138a2 <_malloc_r+0x22>
 801395e:	6025      	str	r5, [r4, #0]
 8013960:	e7de      	b.n	8013920 <_malloc_r+0xa0>
 8013962:	bf00      	nop
 8013964:	2000c8ac 	.word	0x2000c8ac

08013968 <iprintf>:
 8013968:	b40f      	push	{r0, r1, r2, r3}
 801396a:	4b0a      	ldr	r3, [pc, #40]	; (8013994 <iprintf+0x2c>)
 801396c:	b513      	push	{r0, r1, r4, lr}
 801396e:	681c      	ldr	r4, [r3, #0]
 8013970:	b124      	cbz	r4, 801397c <iprintf+0x14>
 8013972:	69a3      	ldr	r3, [r4, #24]
 8013974:	b913      	cbnz	r3, 801397c <iprintf+0x14>
 8013976:	4620      	mov	r0, r4
 8013978:	f7ff fe76 	bl	8013668 <__sinit>
 801397c:	ab05      	add	r3, sp, #20
 801397e:	9a04      	ldr	r2, [sp, #16]
 8013980:	68a1      	ldr	r1, [r4, #8]
 8013982:	9301      	str	r3, [sp, #4]
 8013984:	4620      	mov	r0, r4
 8013986:	f000 fab3 	bl	8013ef0 <_vfiprintf_r>
 801398a:	b002      	add	sp, #8
 801398c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8013990:	b004      	add	sp, #16
 8013992:	4770      	bx	lr
 8013994:	20000030 	.word	0x20000030

08013998 <rand>:
 8013998:	4b16      	ldr	r3, [pc, #88]	; (80139f4 <rand+0x5c>)
 801399a:	b510      	push	{r4, lr}
 801399c:	681c      	ldr	r4, [r3, #0]
 801399e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80139a0:	b9b3      	cbnz	r3, 80139d0 <rand+0x38>
 80139a2:	2018      	movs	r0, #24
 80139a4:	f000 fa1a 	bl	8013ddc <malloc>
 80139a8:	63a0      	str	r0, [r4, #56]	; 0x38
 80139aa:	b928      	cbnz	r0, 80139b8 <rand+0x20>
 80139ac:	4602      	mov	r2, r0
 80139ae:	4b12      	ldr	r3, [pc, #72]	; (80139f8 <rand+0x60>)
 80139b0:	4812      	ldr	r0, [pc, #72]	; (80139fc <rand+0x64>)
 80139b2:	214e      	movs	r1, #78	; 0x4e
 80139b4:	f000 f8fe 	bl	8013bb4 <__assert_func>
 80139b8:	4a11      	ldr	r2, [pc, #68]	; (8013a00 <rand+0x68>)
 80139ba:	4b12      	ldr	r3, [pc, #72]	; (8013a04 <rand+0x6c>)
 80139bc:	e9c0 2300 	strd	r2, r3, [r0]
 80139c0:	4b11      	ldr	r3, [pc, #68]	; (8013a08 <rand+0x70>)
 80139c2:	6083      	str	r3, [r0, #8]
 80139c4:	230b      	movs	r3, #11
 80139c6:	8183      	strh	r3, [r0, #12]
 80139c8:	2201      	movs	r2, #1
 80139ca:	2300      	movs	r3, #0
 80139cc:	e9c0 2304 	strd	r2, r3, [r0, #16]
 80139d0:	6ba4      	ldr	r4, [r4, #56]	; 0x38
 80139d2:	4a0e      	ldr	r2, [pc, #56]	; (8013a0c <rand+0x74>)
 80139d4:	6920      	ldr	r0, [r4, #16]
 80139d6:	6963      	ldr	r3, [r4, #20]
 80139d8:	490d      	ldr	r1, [pc, #52]	; (8013a10 <rand+0x78>)
 80139da:	4342      	muls	r2, r0
 80139dc:	fb01 2203 	mla	r2, r1, r3, r2
 80139e0:	fba0 0101 	umull	r0, r1, r0, r1
 80139e4:	1c43      	adds	r3, r0, #1
 80139e6:	eb42 0001 	adc.w	r0, r2, r1
 80139ea:	e9c4 3004 	strd	r3, r0, [r4, #16]
 80139ee:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 80139f2:	bd10      	pop	{r4, pc}
 80139f4:	20000030 	.word	0x20000030
 80139f8:	08017540 	.word	0x08017540
 80139fc:	08017557 	.word	0x08017557
 8013a00:	abcd330e 	.word	0xabcd330e
 8013a04:	e66d1234 	.word	0xe66d1234
 8013a08:	0005deec 	.word	0x0005deec
 8013a0c:	5851f42d 	.word	0x5851f42d
 8013a10:	4c957f2d 	.word	0x4c957f2d

08013a14 <cleanup_glue>:
 8013a14:	b538      	push	{r3, r4, r5, lr}
 8013a16:	460c      	mov	r4, r1
 8013a18:	6809      	ldr	r1, [r1, #0]
 8013a1a:	4605      	mov	r5, r0
 8013a1c:	b109      	cbz	r1, 8013a22 <cleanup_glue+0xe>
 8013a1e:	f7ff fff9 	bl	8013a14 <cleanup_glue>
 8013a22:	4621      	mov	r1, r4
 8013a24:	4628      	mov	r0, r5
 8013a26:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8013a2a:	f000 b9eb 	b.w	8013e04 <_free_r>
	...

08013a30 <_reclaim_reent>:
 8013a30:	4b2c      	ldr	r3, [pc, #176]	; (8013ae4 <_reclaim_reent+0xb4>)
 8013a32:	681b      	ldr	r3, [r3, #0]
 8013a34:	4283      	cmp	r3, r0
 8013a36:	b570      	push	{r4, r5, r6, lr}
 8013a38:	4604      	mov	r4, r0
 8013a3a:	d051      	beq.n	8013ae0 <_reclaim_reent+0xb0>
 8013a3c:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8013a3e:	b143      	cbz	r3, 8013a52 <_reclaim_reent+0x22>
 8013a40:	68db      	ldr	r3, [r3, #12]
 8013a42:	2b00      	cmp	r3, #0
 8013a44:	d14a      	bne.n	8013adc <_reclaim_reent+0xac>
 8013a46:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8013a48:	6819      	ldr	r1, [r3, #0]
 8013a4a:	b111      	cbz	r1, 8013a52 <_reclaim_reent+0x22>
 8013a4c:	4620      	mov	r0, r4
 8013a4e:	f000 f9d9 	bl	8013e04 <_free_r>
 8013a52:	6961      	ldr	r1, [r4, #20]
 8013a54:	b111      	cbz	r1, 8013a5c <_reclaim_reent+0x2c>
 8013a56:	4620      	mov	r0, r4
 8013a58:	f000 f9d4 	bl	8013e04 <_free_r>
 8013a5c:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8013a5e:	b111      	cbz	r1, 8013a66 <_reclaim_reent+0x36>
 8013a60:	4620      	mov	r0, r4
 8013a62:	f000 f9cf 	bl	8013e04 <_free_r>
 8013a66:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8013a68:	b111      	cbz	r1, 8013a70 <_reclaim_reent+0x40>
 8013a6a:	4620      	mov	r0, r4
 8013a6c:	f000 f9ca 	bl	8013e04 <_free_r>
 8013a70:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8013a72:	b111      	cbz	r1, 8013a7a <_reclaim_reent+0x4a>
 8013a74:	4620      	mov	r0, r4
 8013a76:	f000 f9c5 	bl	8013e04 <_free_r>
 8013a7a:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8013a7c:	b111      	cbz	r1, 8013a84 <_reclaim_reent+0x54>
 8013a7e:	4620      	mov	r0, r4
 8013a80:	f000 f9c0 	bl	8013e04 <_free_r>
 8013a84:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 8013a86:	b111      	cbz	r1, 8013a8e <_reclaim_reent+0x5e>
 8013a88:	4620      	mov	r0, r4
 8013a8a:	f000 f9bb 	bl	8013e04 <_free_r>
 8013a8e:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8013a90:	b111      	cbz	r1, 8013a98 <_reclaim_reent+0x68>
 8013a92:	4620      	mov	r0, r4
 8013a94:	f000 f9b6 	bl	8013e04 <_free_r>
 8013a98:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8013a9a:	b111      	cbz	r1, 8013aa2 <_reclaim_reent+0x72>
 8013a9c:	4620      	mov	r0, r4
 8013a9e:	f000 f9b1 	bl	8013e04 <_free_r>
 8013aa2:	69a3      	ldr	r3, [r4, #24]
 8013aa4:	b1e3      	cbz	r3, 8013ae0 <_reclaim_reent+0xb0>
 8013aa6:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8013aa8:	4620      	mov	r0, r4
 8013aaa:	4798      	blx	r3
 8013aac:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8013aae:	b1b9      	cbz	r1, 8013ae0 <_reclaim_reent+0xb0>
 8013ab0:	4620      	mov	r0, r4
 8013ab2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8013ab6:	f7ff bfad 	b.w	8013a14 <cleanup_glue>
 8013aba:	5949      	ldr	r1, [r1, r5]
 8013abc:	b941      	cbnz	r1, 8013ad0 <_reclaim_reent+0xa0>
 8013abe:	3504      	adds	r5, #4
 8013ac0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8013ac2:	2d80      	cmp	r5, #128	; 0x80
 8013ac4:	68d9      	ldr	r1, [r3, #12]
 8013ac6:	d1f8      	bne.n	8013aba <_reclaim_reent+0x8a>
 8013ac8:	4620      	mov	r0, r4
 8013aca:	f000 f99b 	bl	8013e04 <_free_r>
 8013ace:	e7ba      	b.n	8013a46 <_reclaim_reent+0x16>
 8013ad0:	680e      	ldr	r6, [r1, #0]
 8013ad2:	4620      	mov	r0, r4
 8013ad4:	f000 f996 	bl	8013e04 <_free_r>
 8013ad8:	4631      	mov	r1, r6
 8013ada:	e7ef      	b.n	8013abc <_reclaim_reent+0x8c>
 8013adc:	2500      	movs	r5, #0
 8013ade:	e7ef      	b.n	8013ac0 <_reclaim_reent+0x90>
 8013ae0:	bd70      	pop	{r4, r5, r6, pc}
 8013ae2:	bf00      	nop
 8013ae4:	20000030 	.word	0x20000030

08013ae8 <_sbrk_r>:
 8013ae8:	b538      	push	{r3, r4, r5, lr}
 8013aea:	4d06      	ldr	r5, [pc, #24]	; (8013b04 <_sbrk_r+0x1c>)
 8013aec:	2300      	movs	r3, #0
 8013aee:	4604      	mov	r4, r0
 8013af0:	4608      	mov	r0, r1
 8013af2:	602b      	str	r3, [r5, #0]
 8013af4:	f7ed f96a 	bl	8000dcc <_sbrk>
 8013af8:	1c43      	adds	r3, r0, #1
 8013afa:	d102      	bne.n	8013b02 <_sbrk_r+0x1a>
 8013afc:	682b      	ldr	r3, [r5, #0]
 8013afe:	b103      	cbz	r3, 8013b02 <_sbrk_r+0x1a>
 8013b00:	6023      	str	r3, [r4, #0]
 8013b02:	bd38      	pop	{r3, r4, r5, pc}
 8013b04:	2000c8b4 	.word	0x2000c8b4

08013b08 <__sread>:
 8013b08:	b510      	push	{r4, lr}
 8013b0a:	460c      	mov	r4, r1
 8013b0c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8013b10:	f000 fcb2 	bl	8014478 <_read_r>
 8013b14:	2800      	cmp	r0, #0
 8013b16:	bfab      	itete	ge
 8013b18:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8013b1a:	89a3      	ldrhlt	r3, [r4, #12]
 8013b1c:	181b      	addge	r3, r3, r0
 8013b1e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8013b22:	bfac      	ite	ge
 8013b24:	6563      	strge	r3, [r4, #84]	; 0x54
 8013b26:	81a3      	strhlt	r3, [r4, #12]
 8013b28:	bd10      	pop	{r4, pc}

08013b2a <__swrite>:
 8013b2a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013b2e:	461f      	mov	r7, r3
 8013b30:	898b      	ldrh	r3, [r1, #12]
 8013b32:	05db      	lsls	r3, r3, #23
 8013b34:	4605      	mov	r5, r0
 8013b36:	460c      	mov	r4, r1
 8013b38:	4616      	mov	r6, r2
 8013b3a:	d505      	bpl.n	8013b48 <__swrite+0x1e>
 8013b3c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8013b40:	2302      	movs	r3, #2
 8013b42:	2200      	movs	r2, #0
 8013b44:	f000 f938 	bl	8013db8 <_lseek_r>
 8013b48:	89a3      	ldrh	r3, [r4, #12]
 8013b4a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8013b4e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8013b52:	81a3      	strh	r3, [r4, #12]
 8013b54:	4632      	mov	r2, r6
 8013b56:	463b      	mov	r3, r7
 8013b58:	4628      	mov	r0, r5
 8013b5a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8013b5e:	f000 b817 	b.w	8013b90 <_write_r>

08013b62 <__sseek>:
 8013b62:	b510      	push	{r4, lr}
 8013b64:	460c      	mov	r4, r1
 8013b66:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8013b6a:	f000 f925 	bl	8013db8 <_lseek_r>
 8013b6e:	1c43      	adds	r3, r0, #1
 8013b70:	89a3      	ldrh	r3, [r4, #12]
 8013b72:	bf15      	itete	ne
 8013b74:	6560      	strne	r0, [r4, #84]	; 0x54
 8013b76:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8013b7a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8013b7e:	81a3      	strheq	r3, [r4, #12]
 8013b80:	bf18      	it	ne
 8013b82:	81a3      	strhne	r3, [r4, #12]
 8013b84:	bd10      	pop	{r4, pc}

08013b86 <__sclose>:
 8013b86:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8013b8a:	f000 b831 	b.w	8013bf0 <_close_r>
	...

08013b90 <_write_r>:
 8013b90:	b538      	push	{r3, r4, r5, lr}
 8013b92:	4d07      	ldr	r5, [pc, #28]	; (8013bb0 <_write_r+0x20>)
 8013b94:	4604      	mov	r4, r0
 8013b96:	4608      	mov	r0, r1
 8013b98:	4611      	mov	r1, r2
 8013b9a:	2200      	movs	r2, #0
 8013b9c:	602a      	str	r2, [r5, #0]
 8013b9e:	461a      	mov	r2, r3
 8013ba0:	f7ed f8c3 	bl	8000d2a <_write>
 8013ba4:	1c43      	adds	r3, r0, #1
 8013ba6:	d102      	bne.n	8013bae <_write_r+0x1e>
 8013ba8:	682b      	ldr	r3, [r5, #0]
 8013baa:	b103      	cbz	r3, 8013bae <_write_r+0x1e>
 8013bac:	6023      	str	r3, [r4, #0]
 8013bae:	bd38      	pop	{r3, r4, r5, pc}
 8013bb0:	2000c8b4 	.word	0x2000c8b4

08013bb4 <__assert_func>:
 8013bb4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8013bb6:	4614      	mov	r4, r2
 8013bb8:	461a      	mov	r2, r3
 8013bba:	4b09      	ldr	r3, [pc, #36]	; (8013be0 <__assert_func+0x2c>)
 8013bbc:	681b      	ldr	r3, [r3, #0]
 8013bbe:	4605      	mov	r5, r0
 8013bc0:	68d8      	ldr	r0, [r3, #12]
 8013bc2:	b14c      	cbz	r4, 8013bd8 <__assert_func+0x24>
 8013bc4:	4b07      	ldr	r3, [pc, #28]	; (8013be4 <__assert_func+0x30>)
 8013bc6:	9100      	str	r1, [sp, #0]
 8013bc8:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8013bcc:	4906      	ldr	r1, [pc, #24]	; (8013be8 <__assert_func+0x34>)
 8013bce:	462b      	mov	r3, r5
 8013bd0:	f000 f8e0 	bl	8013d94 <fiprintf>
 8013bd4:	f000 fd22 	bl	801461c <abort>
 8013bd8:	4b04      	ldr	r3, [pc, #16]	; (8013bec <__assert_func+0x38>)
 8013bda:	461c      	mov	r4, r3
 8013bdc:	e7f3      	b.n	8013bc6 <__assert_func+0x12>
 8013bde:	bf00      	nop
 8013be0:	20000030 	.word	0x20000030
 8013be4:	080175b2 	.word	0x080175b2
 8013be8:	080175bf 	.word	0x080175bf
 8013bec:	080175ed 	.word	0x080175ed

08013bf0 <_close_r>:
 8013bf0:	b538      	push	{r3, r4, r5, lr}
 8013bf2:	4d06      	ldr	r5, [pc, #24]	; (8013c0c <_close_r+0x1c>)
 8013bf4:	2300      	movs	r3, #0
 8013bf6:	4604      	mov	r4, r0
 8013bf8:	4608      	mov	r0, r1
 8013bfa:	602b      	str	r3, [r5, #0]
 8013bfc:	f7ed f8b1 	bl	8000d62 <_close>
 8013c00:	1c43      	adds	r3, r0, #1
 8013c02:	d102      	bne.n	8013c0a <_close_r+0x1a>
 8013c04:	682b      	ldr	r3, [r5, #0]
 8013c06:	b103      	cbz	r3, 8013c0a <_close_r+0x1a>
 8013c08:	6023      	str	r3, [r4, #0]
 8013c0a:	bd38      	pop	{r3, r4, r5, pc}
 8013c0c:	2000c8b4 	.word	0x2000c8b4

08013c10 <__sflush_r>:
 8013c10:	898a      	ldrh	r2, [r1, #12]
 8013c12:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013c16:	4605      	mov	r5, r0
 8013c18:	0710      	lsls	r0, r2, #28
 8013c1a:	460c      	mov	r4, r1
 8013c1c:	d458      	bmi.n	8013cd0 <__sflush_r+0xc0>
 8013c1e:	684b      	ldr	r3, [r1, #4]
 8013c20:	2b00      	cmp	r3, #0
 8013c22:	dc05      	bgt.n	8013c30 <__sflush_r+0x20>
 8013c24:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8013c26:	2b00      	cmp	r3, #0
 8013c28:	dc02      	bgt.n	8013c30 <__sflush_r+0x20>
 8013c2a:	2000      	movs	r0, #0
 8013c2c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013c30:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8013c32:	2e00      	cmp	r6, #0
 8013c34:	d0f9      	beq.n	8013c2a <__sflush_r+0x1a>
 8013c36:	2300      	movs	r3, #0
 8013c38:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8013c3c:	682f      	ldr	r7, [r5, #0]
 8013c3e:	602b      	str	r3, [r5, #0]
 8013c40:	d032      	beq.n	8013ca8 <__sflush_r+0x98>
 8013c42:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8013c44:	89a3      	ldrh	r3, [r4, #12]
 8013c46:	075a      	lsls	r2, r3, #29
 8013c48:	d505      	bpl.n	8013c56 <__sflush_r+0x46>
 8013c4a:	6863      	ldr	r3, [r4, #4]
 8013c4c:	1ac0      	subs	r0, r0, r3
 8013c4e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8013c50:	b10b      	cbz	r3, 8013c56 <__sflush_r+0x46>
 8013c52:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8013c54:	1ac0      	subs	r0, r0, r3
 8013c56:	2300      	movs	r3, #0
 8013c58:	4602      	mov	r2, r0
 8013c5a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8013c5c:	6a21      	ldr	r1, [r4, #32]
 8013c5e:	4628      	mov	r0, r5
 8013c60:	47b0      	blx	r6
 8013c62:	1c43      	adds	r3, r0, #1
 8013c64:	89a3      	ldrh	r3, [r4, #12]
 8013c66:	d106      	bne.n	8013c76 <__sflush_r+0x66>
 8013c68:	6829      	ldr	r1, [r5, #0]
 8013c6a:	291d      	cmp	r1, #29
 8013c6c:	d82c      	bhi.n	8013cc8 <__sflush_r+0xb8>
 8013c6e:	4a2a      	ldr	r2, [pc, #168]	; (8013d18 <__sflush_r+0x108>)
 8013c70:	40ca      	lsrs	r2, r1
 8013c72:	07d6      	lsls	r6, r2, #31
 8013c74:	d528      	bpl.n	8013cc8 <__sflush_r+0xb8>
 8013c76:	2200      	movs	r2, #0
 8013c78:	6062      	str	r2, [r4, #4]
 8013c7a:	04d9      	lsls	r1, r3, #19
 8013c7c:	6922      	ldr	r2, [r4, #16]
 8013c7e:	6022      	str	r2, [r4, #0]
 8013c80:	d504      	bpl.n	8013c8c <__sflush_r+0x7c>
 8013c82:	1c42      	adds	r2, r0, #1
 8013c84:	d101      	bne.n	8013c8a <__sflush_r+0x7a>
 8013c86:	682b      	ldr	r3, [r5, #0]
 8013c88:	b903      	cbnz	r3, 8013c8c <__sflush_r+0x7c>
 8013c8a:	6560      	str	r0, [r4, #84]	; 0x54
 8013c8c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8013c8e:	602f      	str	r7, [r5, #0]
 8013c90:	2900      	cmp	r1, #0
 8013c92:	d0ca      	beq.n	8013c2a <__sflush_r+0x1a>
 8013c94:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8013c98:	4299      	cmp	r1, r3
 8013c9a:	d002      	beq.n	8013ca2 <__sflush_r+0x92>
 8013c9c:	4628      	mov	r0, r5
 8013c9e:	f000 f8b1 	bl	8013e04 <_free_r>
 8013ca2:	2000      	movs	r0, #0
 8013ca4:	6360      	str	r0, [r4, #52]	; 0x34
 8013ca6:	e7c1      	b.n	8013c2c <__sflush_r+0x1c>
 8013ca8:	6a21      	ldr	r1, [r4, #32]
 8013caa:	2301      	movs	r3, #1
 8013cac:	4628      	mov	r0, r5
 8013cae:	47b0      	blx	r6
 8013cb0:	1c41      	adds	r1, r0, #1
 8013cb2:	d1c7      	bne.n	8013c44 <__sflush_r+0x34>
 8013cb4:	682b      	ldr	r3, [r5, #0]
 8013cb6:	2b00      	cmp	r3, #0
 8013cb8:	d0c4      	beq.n	8013c44 <__sflush_r+0x34>
 8013cba:	2b1d      	cmp	r3, #29
 8013cbc:	d001      	beq.n	8013cc2 <__sflush_r+0xb2>
 8013cbe:	2b16      	cmp	r3, #22
 8013cc0:	d101      	bne.n	8013cc6 <__sflush_r+0xb6>
 8013cc2:	602f      	str	r7, [r5, #0]
 8013cc4:	e7b1      	b.n	8013c2a <__sflush_r+0x1a>
 8013cc6:	89a3      	ldrh	r3, [r4, #12]
 8013cc8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8013ccc:	81a3      	strh	r3, [r4, #12]
 8013cce:	e7ad      	b.n	8013c2c <__sflush_r+0x1c>
 8013cd0:	690f      	ldr	r7, [r1, #16]
 8013cd2:	2f00      	cmp	r7, #0
 8013cd4:	d0a9      	beq.n	8013c2a <__sflush_r+0x1a>
 8013cd6:	0793      	lsls	r3, r2, #30
 8013cd8:	680e      	ldr	r6, [r1, #0]
 8013cda:	bf08      	it	eq
 8013cdc:	694b      	ldreq	r3, [r1, #20]
 8013cde:	600f      	str	r7, [r1, #0]
 8013ce0:	bf18      	it	ne
 8013ce2:	2300      	movne	r3, #0
 8013ce4:	eba6 0807 	sub.w	r8, r6, r7
 8013ce8:	608b      	str	r3, [r1, #8]
 8013cea:	f1b8 0f00 	cmp.w	r8, #0
 8013cee:	dd9c      	ble.n	8013c2a <__sflush_r+0x1a>
 8013cf0:	6a21      	ldr	r1, [r4, #32]
 8013cf2:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8013cf4:	4643      	mov	r3, r8
 8013cf6:	463a      	mov	r2, r7
 8013cf8:	4628      	mov	r0, r5
 8013cfa:	47b0      	blx	r6
 8013cfc:	2800      	cmp	r0, #0
 8013cfe:	dc06      	bgt.n	8013d0e <__sflush_r+0xfe>
 8013d00:	89a3      	ldrh	r3, [r4, #12]
 8013d02:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8013d06:	81a3      	strh	r3, [r4, #12]
 8013d08:	f04f 30ff 	mov.w	r0, #4294967295
 8013d0c:	e78e      	b.n	8013c2c <__sflush_r+0x1c>
 8013d0e:	4407      	add	r7, r0
 8013d10:	eba8 0800 	sub.w	r8, r8, r0
 8013d14:	e7e9      	b.n	8013cea <__sflush_r+0xda>
 8013d16:	bf00      	nop
 8013d18:	20400001 	.word	0x20400001

08013d1c <_fflush_r>:
 8013d1c:	b538      	push	{r3, r4, r5, lr}
 8013d1e:	690b      	ldr	r3, [r1, #16]
 8013d20:	4605      	mov	r5, r0
 8013d22:	460c      	mov	r4, r1
 8013d24:	b913      	cbnz	r3, 8013d2c <_fflush_r+0x10>
 8013d26:	2500      	movs	r5, #0
 8013d28:	4628      	mov	r0, r5
 8013d2a:	bd38      	pop	{r3, r4, r5, pc}
 8013d2c:	b118      	cbz	r0, 8013d36 <_fflush_r+0x1a>
 8013d2e:	6983      	ldr	r3, [r0, #24]
 8013d30:	b90b      	cbnz	r3, 8013d36 <_fflush_r+0x1a>
 8013d32:	f7ff fc99 	bl	8013668 <__sinit>
 8013d36:	4b14      	ldr	r3, [pc, #80]	; (8013d88 <_fflush_r+0x6c>)
 8013d38:	429c      	cmp	r4, r3
 8013d3a:	d11b      	bne.n	8013d74 <_fflush_r+0x58>
 8013d3c:	686c      	ldr	r4, [r5, #4]
 8013d3e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8013d42:	2b00      	cmp	r3, #0
 8013d44:	d0ef      	beq.n	8013d26 <_fflush_r+0xa>
 8013d46:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8013d48:	07d0      	lsls	r0, r2, #31
 8013d4a:	d404      	bmi.n	8013d56 <_fflush_r+0x3a>
 8013d4c:	0599      	lsls	r1, r3, #22
 8013d4e:	d402      	bmi.n	8013d56 <_fflush_r+0x3a>
 8013d50:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8013d52:	f7ff fd4c 	bl	80137ee <__retarget_lock_acquire_recursive>
 8013d56:	4628      	mov	r0, r5
 8013d58:	4621      	mov	r1, r4
 8013d5a:	f7ff ff59 	bl	8013c10 <__sflush_r>
 8013d5e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8013d60:	07da      	lsls	r2, r3, #31
 8013d62:	4605      	mov	r5, r0
 8013d64:	d4e0      	bmi.n	8013d28 <_fflush_r+0xc>
 8013d66:	89a3      	ldrh	r3, [r4, #12]
 8013d68:	059b      	lsls	r3, r3, #22
 8013d6a:	d4dd      	bmi.n	8013d28 <_fflush_r+0xc>
 8013d6c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8013d6e:	f7ff fd3f 	bl	80137f0 <__retarget_lock_release_recursive>
 8013d72:	e7d9      	b.n	8013d28 <_fflush_r+0xc>
 8013d74:	4b05      	ldr	r3, [pc, #20]	; (8013d8c <_fflush_r+0x70>)
 8013d76:	429c      	cmp	r4, r3
 8013d78:	d101      	bne.n	8013d7e <_fflush_r+0x62>
 8013d7a:	68ac      	ldr	r4, [r5, #8]
 8013d7c:	e7df      	b.n	8013d3e <_fflush_r+0x22>
 8013d7e:	4b04      	ldr	r3, [pc, #16]	; (8013d90 <_fflush_r+0x74>)
 8013d80:	429c      	cmp	r4, r3
 8013d82:	bf08      	it	eq
 8013d84:	68ec      	ldreq	r4, [r5, #12]
 8013d86:	e7da      	b.n	8013d3e <_fflush_r+0x22>
 8013d88:	080174fc 	.word	0x080174fc
 8013d8c:	0801751c 	.word	0x0801751c
 8013d90:	080174dc 	.word	0x080174dc

08013d94 <fiprintf>:
 8013d94:	b40e      	push	{r1, r2, r3}
 8013d96:	b503      	push	{r0, r1, lr}
 8013d98:	4601      	mov	r1, r0
 8013d9a:	ab03      	add	r3, sp, #12
 8013d9c:	4805      	ldr	r0, [pc, #20]	; (8013db4 <fiprintf+0x20>)
 8013d9e:	f853 2b04 	ldr.w	r2, [r3], #4
 8013da2:	6800      	ldr	r0, [r0, #0]
 8013da4:	9301      	str	r3, [sp, #4]
 8013da6:	f000 f8a3 	bl	8013ef0 <_vfiprintf_r>
 8013daa:	b002      	add	sp, #8
 8013dac:	f85d eb04 	ldr.w	lr, [sp], #4
 8013db0:	b003      	add	sp, #12
 8013db2:	4770      	bx	lr
 8013db4:	20000030 	.word	0x20000030

08013db8 <_lseek_r>:
 8013db8:	b538      	push	{r3, r4, r5, lr}
 8013dba:	4d07      	ldr	r5, [pc, #28]	; (8013dd8 <_lseek_r+0x20>)
 8013dbc:	4604      	mov	r4, r0
 8013dbe:	4608      	mov	r0, r1
 8013dc0:	4611      	mov	r1, r2
 8013dc2:	2200      	movs	r2, #0
 8013dc4:	602a      	str	r2, [r5, #0]
 8013dc6:	461a      	mov	r2, r3
 8013dc8:	f7ec fff2 	bl	8000db0 <_lseek>
 8013dcc:	1c43      	adds	r3, r0, #1
 8013dce:	d102      	bne.n	8013dd6 <_lseek_r+0x1e>
 8013dd0:	682b      	ldr	r3, [r5, #0]
 8013dd2:	b103      	cbz	r3, 8013dd6 <_lseek_r+0x1e>
 8013dd4:	6023      	str	r3, [r4, #0]
 8013dd6:	bd38      	pop	{r3, r4, r5, pc}
 8013dd8:	2000c8b4 	.word	0x2000c8b4

08013ddc <malloc>:
 8013ddc:	4b02      	ldr	r3, [pc, #8]	; (8013de8 <malloc+0xc>)
 8013dde:	4601      	mov	r1, r0
 8013de0:	6818      	ldr	r0, [r3, #0]
 8013de2:	f7ff bd4d 	b.w	8013880 <_malloc_r>
 8013de6:	bf00      	nop
 8013de8:	20000030 	.word	0x20000030

08013dec <__malloc_lock>:
 8013dec:	4801      	ldr	r0, [pc, #4]	; (8013df4 <__malloc_lock+0x8>)
 8013dee:	f7ff bcfe 	b.w	80137ee <__retarget_lock_acquire_recursive>
 8013df2:	bf00      	nop
 8013df4:	2000c8a8 	.word	0x2000c8a8

08013df8 <__malloc_unlock>:
 8013df8:	4801      	ldr	r0, [pc, #4]	; (8013e00 <__malloc_unlock+0x8>)
 8013dfa:	f7ff bcf9 	b.w	80137f0 <__retarget_lock_release_recursive>
 8013dfe:	bf00      	nop
 8013e00:	2000c8a8 	.word	0x2000c8a8

08013e04 <_free_r>:
 8013e04:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8013e06:	2900      	cmp	r1, #0
 8013e08:	d044      	beq.n	8013e94 <_free_r+0x90>
 8013e0a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8013e0e:	9001      	str	r0, [sp, #4]
 8013e10:	2b00      	cmp	r3, #0
 8013e12:	f1a1 0404 	sub.w	r4, r1, #4
 8013e16:	bfb8      	it	lt
 8013e18:	18e4      	addlt	r4, r4, r3
 8013e1a:	f7ff ffe7 	bl	8013dec <__malloc_lock>
 8013e1e:	4a1e      	ldr	r2, [pc, #120]	; (8013e98 <_free_r+0x94>)
 8013e20:	9801      	ldr	r0, [sp, #4]
 8013e22:	6813      	ldr	r3, [r2, #0]
 8013e24:	b933      	cbnz	r3, 8013e34 <_free_r+0x30>
 8013e26:	6063      	str	r3, [r4, #4]
 8013e28:	6014      	str	r4, [r2, #0]
 8013e2a:	b003      	add	sp, #12
 8013e2c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8013e30:	f7ff bfe2 	b.w	8013df8 <__malloc_unlock>
 8013e34:	42a3      	cmp	r3, r4
 8013e36:	d908      	bls.n	8013e4a <_free_r+0x46>
 8013e38:	6825      	ldr	r5, [r4, #0]
 8013e3a:	1961      	adds	r1, r4, r5
 8013e3c:	428b      	cmp	r3, r1
 8013e3e:	bf01      	itttt	eq
 8013e40:	6819      	ldreq	r1, [r3, #0]
 8013e42:	685b      	ldreq	r3, [r3, #4]
 8013e44:	1949      	addeq	r1, r1, r5
 8013e46:	6021      	streq	r1, [r4, #0]
 8013e48:	e7ed      	b.n	8013e26 <_free_r+0x22>
 8013e4a:	461a      	mov	r2, r3
 8013e4c:	685b      	ldr	r3, [r3, #4]
 8013e4e:	b10b      	cbz	r3, 8013e54 <_free_r+0x50>
 8013e50:	42a3      	cmp	r3, r4
 8013e52:	d9fa      	bls.n	8013e4a <_free_r+0x46>
 8013e54:	6811      	ldr	r1, [r2, #0]
 8013e56:	1855      	adds	r5, r2, r1
 8013e58:	42a5      	cmp	r5, r4
 8013e5a:	d10b      	bne.n	8013e74 <_free_r+0x70>
 8013e5c:	6824      	ldr	r4, [r4, #0]
 8013e5e:	4421      	add	r1, r4
 8013e60:	1854      	adds	r4, r2, r1
 8013e62:	42a3      	cmp	r3, r4
 8013e64:	6011      	str	r1, [r2, #0]
 8013e66:	d1e0      	bne.n	8013e2a <_free_r+0x26>
 8013e68:	681c      	ldr	r4, [r3, #0]
 8013e6a:	685b      	ldr	r3, [r3, #4]
 8013e6c:	6053      	str	r3, [r2, #4]
 8013e6e:	4421      	add	r1, r4
 8013e70:	6011      	str	r1, [r2, #0]
 8013e72:	e7da      	b.n	8013e2a <_free_r+0x26>
 8013e74:	d902      	bls.n	8013e7c <_free_r+0x78>
 8013e76:	230c      	movs	r3, #12
 8013e78:	6003      	str	r3, [r0, #0]
 8013e7a:	e7d6      	b.n	8013e2a <_free_r+0x26>
 8013e7c:	6825      	ldr	r5, [r4, #0]
 8013e7e:	1961      	adds	r1, r4, r5
 8013e80:	428b      	cmp	r3, r1
 8013e82:	bf04      	itt	eq
 8013e84:	6819      	ldreq	r1, [r3, #0]
 8013e86:	685b      	ldreq	r3, [r3, #4]
 8013e88:	6063      	str	r3, [r4, #4]
 8013e8a:	bf04      	itt	eq
 8013e8c:	1949      	addeq	r1, r1, r5
 8013e8e:	6021      	streq	r1, [r4, #0]
 8013e90:	6054      	str	r4, [r2, #4]
 8013e92:	e7ca      	b.n	8013e2a <_free_r+0x26>
 8013e94:	b003      	add	sp, #12
 8013e96:	bd30      	pop	{r4, r5, pc}
 8013e98:	2000c8ac 	.word	0x2000c8ac

08013e9c <__sfputc_r>:
 8013e9c:	6893      	ldr	r3, [r2, #8]
 8013e9e:	3b01      	subs	r3, #1
 8013ea0:	2b00      	cmp	r3, #0
 8013ea2:	b410      	push	{r4}
 8013ea4:	6093      	str	r3, [r2, #8]
 8013ea6:	da08      	bge.n	8013eba <__sfputc_r+0x1e>
 8013ea8:	6994      	ldr	r4, [r2, #24]
 8013eaa:	42a3      	cmp	r3, r4
 8013eac:	db01      	blt.n	8013eb2 <__sfputc_r+0x16>
 8013eae:	290a      	cmp	r1, #10
 8013eb0:	d103      	bne.n	8013eba <__sfputc_r+0x1e>
 8013eb2:	f85d 4b04 	ldr.w	r4, [sp], #4
 8013eb6:	f000 baf1 	b.w	801449c <__swbuf_r>
 8013eba:	6813      	ldr	r3, [r2, #0]
 8013ebc:	1c58      	adds	r0, r3, #1
 8013ebe:	6010      	str	r0, [r2, #0]
 8013ec0:	7019      	strb	r1, [r3, #0]
 8013ec2:	4608      	mov	r0, r1
 8013ec4:	f85d 4b04 	ldr.w	r4, [sp], #4
 8013ec8:	4770      	bx	lr

08013eca <__sfputs_r>:
 8013eca:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013ecc:	4606      	mov	r6, r0
 8013ece:	460f      	mov	r7, r1
 8013ed0:	4614      	mov	r4, r2
 8013ed2:	18d5      	adds	r5, r2, r3
 8013ed4:	42ac      	cmp	r4, r5
 8013ed6:	d101      	bne.n	8013edc <__sfputs_r+0x12>
 8013ed8:	2000      	movs	r0, #0
 8013eda:	e007      	b.n	8013eec <__sfputs_r+0x22>
 8013edc:	f814 1b01 	ldrb.w	r1, [r4], #1
 8013ee0:	463a      	mov	r2, r7
 8013ee2:	4630      	mov	r0, r6
 8013ee4:	f7ff ffda 	bl	8013e9c <__sfputc_r>
 8013ee8:	1c43      	adds	r3, r0, #1
 8013eea:	d1f3      	bne.n	8013ed4 <__sfputs_r+0xa>
 8013eec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08013ef0 <_vfiprintf_r>:
 8013ef0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013ef4:	460d      	mov	r5, r1
 8013ef6:	b09d      	sub	sp, #116	; 0x74
 8013ef8:	4614      	mov	r4, r2
 8013efa:	4698      	mov	r8, r3
 8013efc:	4606      	mov	r6, r0
 8013efe:	b118      	cbz	r0, 8013f08 <_vfiprintf_r+0x18>
 8013f00:	6983      	ldr	r3, [r0, #24]
 8013f02:	b90b      	cbnz	r3, 8013f08 <_vfiprintf_r+0x18>
 8013f04:	f7ff fbb0 	bl	8013668 <__sinit>
 8013f08:	4b89      	ldr	r3, [pc, #548]	; (8014130 <_vfiprintf_r+0x240>)
 8013f0a:	429d      	cmp	r5, r3
 8013f0c:	d11b      	bne.n	8013f46 <_vfiprintf_r+0x56>
 8013f0e:	6875      	ldr	r5, [r6, #4]
 8013f10:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8013f12:	07d9      	lsls	r1, r3, #31
 8013f14:	d405      	bmi.n	8013f22 <_vfiprintf_r+0x32>
 8013f16:	89ab      	ldrh	r3, [r5, #12]
 8013f18:	059a      	lsls	r2, r3, #22
 8013f1a:	d402      	bmi.n	8013f22 <_vfiprintf_r+0x32>
 8013f1c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8013f1e:	f7ff fc66 	bl	80137ee <__retarget_lock_acquire_recursive>
 8013f22:	89ab      	ldrh	r3, [r5, #12]
 8013f24:	071b      	lsls	r3, r3, #28
 8013f26:	d501      	bpl.n	8013f2c <_vfiprintf_r+0x3c>
 8013f28:	692b      	ldr	r3, [r5, #16]
 8013f2a:	b9eb      	cbnz	r3, 8013f68 <_vfiprintf_r+0x78>
 8013f2c:	4629      	mov	r1, r5
 8013f2e:	4630      	mov	r0, r6
 8013f30:	f000 fb06 	bl	8014540 <__swsetup_r>
 8013f34:	b1c0      	cbz	r0, 8013f68 <_vfiprintf_r+0x78>
 8013f36:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8013f38:	07dc      	lsls	r4, r3, #31
 8013f3a:	d50e      	bpl.n	8013f5a <_vfiprintf_r+0x6a>
 8013f3c:	f04f 30ff 	mov.w	r0, #4294967295
 8013f40:	b01d      	add	sp, #116	; 0x74
 8013f42:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013f46:	4b7b      	ldr	r3, [pc, #492]	; (8014134 <_vfiprintf_r+0x244>)
 8013f48:	429d      	cmp	r5, r3
 8013f4a:	d101      	bne.n	8013f50 <_vfiprintf_r+0x60>
 8013f4c:	68b5      	ldr	r5, [r6, #8]
 8013f4e:	e7df      	b.n	8013f10 <_vfiprintf_r+0x20>
 8013f50:	4b79      	ldr	r3, [pc, #484]	; (8014138 <_vfiprintf_r+0x248>)
 8013f52:	429d      	cmp	r5, r3
 8013f54:	bf08      	it	eq
 8013f56:	68f5      	ldreq	r5, [r6, #12]
 8013f58:	e7da      	b.n	8013f10 <_vfiprintf_r+0x20>
 8013f5a:	89ab      	ldrh	r3, [r5, #12]
 8013f5c:	0598      	lsls	r0, r3, #22
 8013f5e:	d4ed      	bmi.n	8013f3c <_vfiprintf_r+0x4c>
 8013f60:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8013f62:	f7ff fc45 	bl	80137f0 <__retarget_lock_release_recursive>
 8013f66:	e7e9      	b.n	8013f3c <_vfiprintf_r+0x4c>
 8013f68:	2300      	movs	r3, #0
 8013f6a:	9309      	str	r3, [sp, #36]	; 0x24
 8013f6c:	2320      	movs	r3, #32
 8013f6e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8013f72:	f8cd 800c 	str.w	r8, [sp, #12]
 8013f76:	2330      	movs	r3, #48	; 0x30
 8013f78:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 801413c <_vfiprintf_r+0x24c>
 8013f7c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8013f80:	f04f 0901 	mov.w	r9, #1
 8013f84:	4623      	mov	r3, r4
 8013f86:	469a      	mov	sl, r3
 8013f88:	f813 2b01 	ldrb.w	r2, [r3], #1
 8013f8c:	b10a      	cbz	r2, 8013f92 <_vfiprintf_r+0xa2>
 8013f8e:	2a25      	cmp	r2, #37	; 0x25
 8013f90:	d1f9      	bne.n	8013f86 <_vfiprintf_r+0x96>
 8013f92:	ebba 0b04 	subs.w	fp, sl, r4
 8013f96:	d00b      	beq.n	8013fb0 <_vfiprintf_r+0xc0>
 8013f98:	465b      	mov	r3, fp
 8013f9a:	4622      	mov	r2, r4
 8013f9c:	4629      	mov	r1, r5
 8013f9e:	4630      	mov	r0, r6
 8013fa0:	f7ff ff93 	bl	8013eca <__sfputs_r>
 8013fa4:	3001      	adds	r0, #1
 8013fa6:	f000 80aa 	beq.w	80140fe <_vfiprintf_r+0x20e>
 8013faa:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8013fac:	445a      	add	r2, fp
 8013fae:	9209      	str	r2, [sp, #36]	; 0x24
 8013fb0:	f89a 3000 	ldrb.w	r3, [sl]
 8013fb4:	2b00      	cmp	r3, #0
 8013fb6:	f000 80a2 	beq.w	80140fe <_vfiprintf_r+0x20e>
 8013fba:	2300      	movs	r3, #0
 8013fbc:	f04f 32ff 	mov.w	r2, #4294967295
 8013fc0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8013fc4:	f10a 0a01 	add.w	sl, sl, #1
 8013fc8:	9304      	str	r3, [sp, #16]
 8013fca:	9307      	str	r3, [sp, #28]
 8013fcc:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8013fd0:	931a      	str	r3, [sp, #104]	; 0x68
 8013fd2:	4654      	mov	r4, sl
 8013fd4:	2205      	movs	r2, #5
 8013fd6:	f814 1b01 	ldrb.w	r1, [r4], #1
 8013fda:	4858      	ldr	r0, [pc, #352]	; (801413c <_vfiprintf_r+0x24c>)
 8013fdc:	f7ec f8f8 	bl	80001d0 <memchr>
 8013fe0:	9a04      	ldr	r2, [sp, #16]
 8013fe2:	b9d8      	cbnz	r0, 801401c <_vfiprintf_r+0x12c>
 8013fe4:	06d1      	lsls	r1, r2, #27
 8013fe6:	bf44      	itt	mi
 8013fe8:	2320      	movmi	r3, #32
 8013fea:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8013fee:	0713      	lsls	r3, r2, #28
 8013ff0:	bf44      	itt	mi
 8013ff2:	232b      	movmi	r3, #43	; 0x2b
 8013ff4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8013ff8:	f89a 3000 	ldrb.w	r3, [sl]
 8013ffc:	2b2a      	cmp	r3, #42	; 0x2a
 8013ffe:	d015      	beq.n	801402c <_vfiprintf_r+0x13c>
 8014000:	9a07      	ldr	r2, [sp, #28]
 8014002:	4654      	mov	r4, sl
 8014004:	2000      	movs	r0, #0
 8014006:	f04f 0c0a 	mov.w	ip, #10
 801400a:	4621      	mov	r1, r4
 801400c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8014010:	3b30      	subs	r3, #48	; 0x30
 8014012:	2b09      	cmp	r3, #9
 8014014:	d94e      	bls.n	80140b4 <_vfiprintf_r+0x1c4>
 8014016:	b1b0      	cbz	r0, 8014046 <_vfiprintf_r+0x156>
 8014018:	9207      	str	r2, [sp, #28]
 801401a:	e014      	b.n	8014046 <_vfiprintf_r+0x156>
 801401c:	eba0 0308 	sub.w	r3, r0, r8
 8014020:	fa09 f303 	lsl.w	r3, r9, r3
 8014024:	4313      	orrs	r3, r2
 8014026:	9304      	str	r3, [sp, #16]
 8014028:	46a2      	mov	sl, r4
 801402a:	e7d2      	b.n	8013fd2 <_vfiprintf_r+0xe2>
 801402c:	9b03      	ldr	r3, [sp, #12]
 801402e:	1d19      	adds	r1, r3, #4
 8014030:	681b      	ldr	r3, [r3, #0]
 8014032:	9103      	str	r1, [sp, #12]
 8014034:	2b00      	cmp	r3, #0
 8014036:	bfbb      	ittet	lt
 8014038:	425b      	neglt	r3, r3
 801403a:	f042 0202 	orrlt.w	r2, r2, #2
 801403e:	9307      	strge	r3, [sp, #28]
 8014040:	9307      	strlt	r3, [sp, #28]
 8014042:	bfb8      	it	lt
 8014044:	9204      	strlt	r2, [sp, #16]
 8014046:	7823      	ldrb	r3, [r4, #0]
 8014048:	2b2e      	cmp	r3, #46	; 0x2e
 801404a:	d10c      	bne.n	8014066 <_vfiprintf_r+0x176>
 801404c:	7863      	ldrb	r3, [r4, #1]
 801404e:	2b2a      	cmp	r3, #42	; 0x2a
 8014050:	d135      	bne.n	80140be <_vfiprintf_r+0x1ce>
 8014052:	9b03      	ldr	r3, [sp, #12]
 8014054:	1d1a      	adds	r2, r3, #4
 8014056:	681b      	ldr	r3, [r3, #0]
 8014058:	9203      	str	r2, [sp, #12]
 801405a:	2b00      	cmp	r3, #0
 801405c:	bfb8      	it	lt
 801405e:	f04f 33ff 	movlt.w	r3, #4294967295
 8014062:	3402      	adds	r4, #2
 8014064:	9305      	str	r3, [sp, #20]
 8014066:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 801414c <_vfiprintf_r+0x25c>
 801406a:	7821      	ldrb	r1, [r4, #0]
 801406c:	2203      	movs	r2, #3
 801406e:	4650      	mov	r0, sl
 8014070:	f7ec f8ae 	bl	80001d0 <memchr>
 8014074:	b140      	cbz	r0, 8014088 <_vfiprintf_r+0x198>
 8014076:	2340      	movs	r3, #64	; 0x40
 8014078:	eba0 000a 	sub.w	r0, r0, sl
 801407c:	fa03 f000 	lsl.w	r0, r3, r0
 8014080:	9b04      	ldr	r3, [sp, #16]
 8014082:	4303      	orrs	r3, r0
 8014084:	3401      	adds	r4, #1
 8014086:	9304      	str	r3, [sp, #16]
 8014088:	f814 1b01 	ldrb.w	r1, [r4], #1
 801408c:	482c      	ldr	r0, [pc, #176]	; (8014140 <_vfiprintf_r+0x250>)
 801408e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8014092:	2206      	movs	r2, #6
 8014094:	f7ec f89c 	bl	80001d0 <memchr>
 8014098:	2800      	cmp	r0, #0
 801409a:	d03f      	beq.n	801411c <_vfiprintf_r+0x22c>
 801409c:	4b29      	ldr	r3, [pc, #164]	; (8014144 <_vfiprintf_r+0x254>)
 801409e:	bb1b      	cbnz	r3, 80140e8 <_vfiprintf_r+0x1f8>
 80140a0:	9b03      	ldr	r3, [sp, #12]
 80140a2:	3307      	adds	r3, #7
 80140a4:	f023 0307 	bic.w	r3, r3, #7
 80140a8:	3308      	adds	r3, #8
 80140aa:	9303      	str	r3, [sp, #12]
 80140ac:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80140ae:	443b      	add	r3, r7
 80140b0:	9309      	str	r3, [sp, #36]	; 0x24
 80140b2:	e767      	b.n	8013f84 <_vfiprintf_r+0x94>
 80140b4:	fb0c 3202 	mla	r2, ip, r2, r3
 80140b8:	460c      	mov	r4, r1
 80140ba:	2001      	movs	r0, #1
 80140bc:	e7a5      	b.n	801400a <_vfiprintf_r+0x11a>
 80140be:	2300      	movs	r3, #0
 80140c0:	3401      	adds	r4, #1
 80140c2:	9305      	str	r3, [sp, #20]
 80140c4:	4619      	mov	r1, r3
 80140c6:	f04f 0c0a 	mov.w	ip, #10
 80140ca:	4620      	mov	r0, r4
 80140cc:	f810 2b01 	ldrb.w	r2, [r0], #1
 80140d0:	3a30      	subs	r2, #48	; 0x30
 80140d2:	2a09      	cmp	r2, #9
 80140d4:	d903      	bls.n	80140de <_vfiprintf_r+0x1ee>
 80140d6:	2b00      	cmp	r3, #0
 80140d8:	d0c5      	beq.n	8014066 <_vfiprintf_r+0x176>
 80140da:	9105      	str	r1, [sp, #20]
 80140dc:	e7c3      	b.n	8014066 <_vfiprintf_r+0x176>
 80140de:	fb0c 2101 	mla	r1, ip, r1, r2
 80140e2:	4604      	mov	r4, r0
 80140e4:	2301      	movs	r3, #1
 80140e6:	e7f0      	b.n	80140ca <_vfiprintf_r+0x1da>
 80140e8:	ab03      	add	r3, sp, #12
 80140ea:	9300      	str	r3, [sp, #0]
 80140ec:	462a      	mov	r2, r5
 80140ee:	4b16      	ldr	r3, [pc, #88]	; (8014148 <_vfiprintf_r+0x258>)
 80140f0:	a904      	add	r1, sp, #16
 80140f2:	4630      	mov	r0, r6
 80140f4:	f3af 8000 	nop.w
 80140f8:	4607      	mov	r7, r0
 80140fa:	1c78      	adds	r0, r7, #1
 80140fc:	d1d6      	bne.n	80140ac <_vfiprintf_r+0x1bc>
 80140fe:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8014100:	07d9      	lsls	r1, r3, #31
 8014102:	d405      	bmi.n	8014110 <_vfiprintf_r+0x220>
 8014104:	89ab      	ldrh	r3, [r5, #12]
 8014106:	059a      	lsls	r2, r3, #22
 8014108:	d402      	bmi.n	8014110 <_vfiprintf_r+0x220>
 801410a:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801410c:	f7ff fb70 	bl	80137f0 <__retarget_lock_release_recursive>
 8014110:	89ab      	ldrh	r3, [r5, #12]
 8014112:	065b      	lsls	r3, r3, #25
 8014114:	f53f af12 	bmi.w	8013f3c <_vfiprintf_r+0x4c>
 8014118:	9809      	ldr	r0, [sp, #36]	; 0x24
 801411a:	e711      	b.n	8013f40 <_vfiprintf_r+0x50>
 801411c:	ab03      	add	r3, sp, #12
 801411e:	9300      	str	r3, [sp, #0]
 8014120:	462a      	mov	r2, r5
 8014122:	4b09      	ldr	r3, [pc, #36]	; (8014148 <_vfiprintf_r+0x258>)
 8014124:	a904      	add	r1, sp, #16
 8014126:	4630      	mov	r0, r6
 8014128:	f000 f880 	bl	801422c <_printf_i>
 801412c:	e7e4      	b.n	80140f8 <_vfiprintf_r+0x208>
 801412e:	bf00      	nop
 8014130:	080174fc 	.word	0x080174fc
 8014134:	0801751c 	.word	0x0801751c
 8014138:	080174dc 	.word	0x080174dc
 801413c:	080175ee 	.word	0x080175ee
 8014140:	080175f8 	.word	0x080175f8
 8014144:	00000000 	.word	0x00000000
 8014148:	08013ecb 	.word	0x08013ecb
 801414c:	080175f4 	.word	0x080175f4

08014150 <_printf_common>:
 8014150:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8014154:	4616      	mov	r6, r2
 8014156:	4699      	mov	r9, r3
 8014158:	688a      	ldr	r2, [r1, #8]
 801415a:	690b      	ldr	r3, [r1, #16]
 801415c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8014160:	4293      	cmp	r3, r2
 8014162:	bfb8      	it	lt
 8014164:	4613      	movlt	r3, r2
 8014166:	6033      	str	r3, [r6, #0]
 8014168:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 801416c:	4607      	mov	r7, r0
 801416e:	460c      	mov	r4, r1
 8014170:	b10a      	cbz	r2, 8014176 <_printf_common+0x26>
 8014172:	3301      	adds	r3, #1
 8014174:	6033      	str	r3, [r6, #0]
 8014176:	6823      	ldr	r3, [r4, #0]
 8014178:	0699      	lsls	r1, r3, #26
 801417a:	bf42      	ittt	mi
 801417c:	6833      	ldrmi	r3, [r6, #0]
 801417e:	3302      	addmi	r3, #2
 8014180:	6033      	strmi	r3, [r6, #0]
 8014182:	6825      	ldr	r5, [r4, #0]
 8014184:	f015 0506 	ands.w	r5, r5, #6
 8014188:	d106      	bne.n	8014198 <_printf_common+0x48>
 801418a:	f104 0a19 	add.w	sl, r4, #25
 801418e:	68e3      	ldr	r3, [r4, #12]
 8014190:	6832      	ldr	r2, [r6, #0]
 8014192:	1a9b      	subs	r3, r3, r2
 8014194:	42ab      	cmp	r3, r5
 8014196:	dc26      	bgt.n	80141e6 <_printf_common+0x96>
 8014198:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 801419c:	1e13      	subs	r3, r2, #0
 801419e:	6822      	ldr	r2, [r4, #0]
 80141a0:	bf18      	it	ne
 80141a2:	2301      	movne	r3, #1
 80141a4:	0692      	lsls	r2, r2, #26
 80141a6:	d42b      	bmi.n	8014200 <_printf_common+0xb0>
 80141a8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80141ac:	4649      	mov	r1, r9
 80141ae:	4638      	mov	r0, r7
 80141b0:	47c0      	blx	r8
 80141b2:	3001      	adds	r0, #1
 80141b4:	d01e      	beq.n	80141f4 <_printf_common+0xa4>
 80141b6:	6823      	ldr	r3, [r4, #0]
 80141b8:	68e5      	ldr	r5, [r4, #12]
 80141ba:	6832      	ldr	r2, [r6, #0]
 80141bc:	f003 0306 	and.w	r3, r3, #6
 80141c0:	2b04      	cmp	r3, #4
 80141c2:	bf08      	it	eq
 80141c4:	1aad      	subeq	r5, r5, r2
 80141c6:	68a3      	ldr	r3, [r4, #8]
 80141c8:	6922      	ldr	r2, [r4, #16]
 80141ca:	bf0c      	ite	eq
 80141cc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80141d0:	2500      	movne	r5, #0
 80141d2:	4293      	cmp	r3, r2
 80141d4:	bfc4      	itt	gt
 80141d6:	1a9b      	subgt	r3, r3, r2
 80141d8:	18ed      	addgt	r5, r5, r3
 80141da:	2600      	movs	r6, #0
 80141dc:	341a      	adds	r4, #26
 80141de:	42b5      	cmp	r5, r6
 80141e0:	d11a      	bne.n	8014218 <_printf_common+0xc8>
 80141e2:	2000      	movs	r0, #0
 80141e4:	e008      	b.n	80141f8 <_printf_common+0xa8>
 80141e6:	2301      	movs	r3, #1
 80141e8:	4652      	mov	r2, sl
 80141ea:	4649      	mov	r1, r9
 80141ec:	4638      	mov	r0, r7
 80141ee:	47c0      	blx	r8
 80141f0:	3001      	adds	r0, #1
 80141f2:	d103      	bne.n	80141fc <_printf_common+0xac>
 80141f4:	f04f 30ff 	mov.w	r0, #4294967295
 80141f8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80141fc:	3501      	adds	r5, #1
 80141fe:	e7c6      	b.n	801418e <_printf_common+0x3e>
 8014200:	18e1      	adds	r1, r4, r3
 8014202:	1c5a      	adds	r2, r3, #1
 8014204:	2030      	movs	r0, #48	; 0x30
 8014206:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 801420a:	4422      	add	r2, r4
 801420c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8014210:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8014214:	3302      	adds	r3, #2
 8014216:	e7c7      	b.n	80141a8 <_printf_common+0x58>
 8014218:	2301      	movs	r3, #1
 801421a:	4622      	mov	r2, r4
 801421c:	4649      	mov	r1, r9
 801421e:	4638      	mov	r0, r7
 8014220:	47c0      	blx	r8
 8014222:	3001      	adds	r0, #1
 8014224:	d0e6      	beq.n	80141f4 <_printf_common+0xa4>
 8014226:	3601      	adds	r6, #1
 8014228:	e7d9      	b.n	80141de <_printf_common+0x8e>
	...

0801422c <_printf_i>:
 801422c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8014230:	7e0f      	ldrb	r7, [r1, #24]
 8014232:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8014234:	2f78      	cmp	r7, #120	; 0x78
 8014236:	4691      	mov	r9, r2
 8014238:	4680      	mov	r8, r0
 801423a:	460c      	mov	r4, r1
 801423c:	469a      	mov	sl, r3
 801423e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8014242:	d807      	bhi.n	8014254 <_printf_i+0x28>
 8014244:	2f62      	cmp	r7, #98	; 0x62
 8014246:	d80a      	bhi.n	801425e <_printf_i+0x32>
 8014248:	2f00      	cmp	r7, #0
 801424a:	f000 80d8 	beq.w	80143fe <_printf_i+0x1d2>
 801424e:	2f58      	cmp	r7, #88	; 0x58
 8014250:	f000 80a3 	beq.w	801439a <_printf_i+0x16e>
 8014254:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8014258:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 801425c:	e03a      	b.n	80142d4 <_printf_i+0xa8>
 801425e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8014262:	2b15      	cmp	r3, #21
 8014264:	d8f6      	bhi.n	8014254 <_printf_i+0x28>
 8014266:	a101      	add	r1, pc, #4	; (adr r1, 801426c <_printf_i+0x40>)
 8014268:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 801426c:	080142c5 	.word	0x080142c5
 8014270:	080142d9 	.word	0x080142d9
 8014274:	08014255 	.word	0x08014255
 8014278:	08014255 	.word	0x08014255
 801427c:	08014255 	.word	0x08014255
 8014280:	08014255 	.word	0x08014255
 8014284:	080142d9 	.word	0x080142d9
 8014288:	08014255 	.word	0x08014255
 801428c:	08014255 	.word	0x08014255
 8014290:	08014255 	.word	0x08014255
 8014294:	08014255 	.word	0x08014255
 8014298:	080143e5 	.word	0x080143e5
 801429c:	08014309 	.word	0x08014309
 80142a0:	080143c7 	.word	0x080143c7
 80142a4:	08014255 	.word	0x08014255
 80142a8:	08014255 	.word	0x08014255
 80142ac:	08014407 	.word	0x08014407
 80142b0:	08014255 	.word	0x08014255
 80142b4:	08014309 	.word	0x08014309
 80142b8:	08014255 	.word	0x08014255
 80142bc:	08014255 	.word	0x08014255
 80142c0:	080143cf 	.word	0x080143cf
 80142c4:	682b      	ldr	r3, [r5, #0]
 80142c6:	1d1a      	adds	r2, r3, #4
 80142c8:	681b      	ldr	r3, [r3, #0]
 80142ca:	602a      	str	r2, [r5, #0]
 80142cc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80142d0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80142d4:	2301      	movs	r3, #1
 80142d6:	e0a3      	b.n	8014420 <_printf_i+0x1f4>
 80142d8:	6820      	ldr	r0, [r4, #0]
 80142da:	6829      	ldr	r1, [r5, #0]
 80142dc:	0606      	lsls	r6, r0, #24
 80142de:	f101 0304 	add.w	r3, r1, #4
 80142e2:	d50a      	bpl.n	80142fa <_printf_i+0xce>
 80142e4:	680e      	ldr	r6, [r1, #0]
 80142e6:	602b      	str	r3, [r5, #0]
 80142e8:	2e00      	cmp	r6, #0
 80142ea:	da03      	bge.n	80142f4 <_printf_i+0xc8>
 80142ec:	232d      	movs	r3, #45	; 0x2d
 80142ee:	4276      	negs	r6, r6
 80142f0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80142f4:	485e      	ldr	r0, [pc, #376]	; (8014470 <_printf_i+0x244>)
 80142f6:	230a      	movs	r3, #10
 80142f8:	e019      	b.n	801432e <_printf_i+0x102>
 80142fa:	680e      	ldr	r6, [r1, #0]
 80142fc:	602b      	str	r3, [r5, #0]
 80142fe:	f010 0f40 	tst.w	r0, #64	; 0x40
 8014302:	bf18      	it	ne
 8014304:	b236      	sxthne	r6, r6
 8014306:	e7ef      	b.n	80142e8 <_printf_i+0xbc>
 8014308:	682b      	ldr	r3, [r5, #0]
 801430a:	6820      	ldr	r0, [r4, #0]
 801430c:	1d19      	adds	r1, r3, #4
 801430e:	6029      	str	r1, [r5, #0]
 8014310:	0601      	lsls	r1, r0, #24
 8014312:	d501      	bpl.n	8014318 <_printf_i+0xec>
 8014314:	681e      	ldr	r6, [r3, #0]
 8014316:	e002      	b.n	801431e <_printf_i+0xf2>
 8014318:	0646      	lsls	r6, r0, #25
 801431a:	d5fb      	bpl.n	8014314 <_printf_i+0xe8>
 801431c:	881e      	ldrh	r6, [r3, #0]
 801431e:	4854      	ldr	r0, [pc, #336]	; (8014470 <_printf_i+0x244>)
 8014320:	2f6f      	cmp	r7, #111	; 0x6f
 8014322:	bf0c      	ite	eq
 8014324:	2308      	moveq	r3, #8
 8014326:	230a      	movne	r3, #10
 8014328:	2100      	movs	r1, #0
 801432a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 801432e:	6865      	ldr	r5, [r4, #4]
 8014330:	60a5      	str	r5, [r4, #8]
 8014332:	2d00      	cmp	r5, #0
 8014334:	bfa2      	ittt	ge
 8014336:	6821      	ldrge	r1, [r4, #0]
 8014338:	f021 0104 	bicge.w	r1, r1, #4
 801433c:	6021      	strge	r1, [r4, #0]
 801433e:	b90e      	cbnz	r6, 8014344 <_printf_i+0x118>
 8014340:	2d00      	cmp	r5, #0
 8014342:	d04d      	beq.n	80143e0 <_printf_i+0x1b4>
 8014344:	4615      	mov	r5, r2
 8014346:	fbb6 f1f3 	udiv	r1, r6, r3
 801434a:	fb03 6711 	mls	r7, r3, r1, r6
 801434e:	5dc7      	ldrb	r7, [r0, r7]
 8014350:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8014354:	4637      	mov	r7, r6
 8014356:	42bb      	cmp	r3, r7
 8014358:	460e      	mov	r6, r1
 801435a:	d9f4      	bls.n	8014346 <_printf_i+0x11a>
 801435c:	2b08      	cmp	r3, #8
 801435e:	d10b      	bne.n	8014378 <_printf_i+0x14c>
 8014360:	6823      	ldr	r3, [r4, #0]
 8014362:	07de      	lsls	r6, r3, #31
 8014364:	d508      	bpl.n	8014378 <_printf_i+0x14c>
 8014366:	6923      	ldr	r3, [r4, #16]
 8014368:	6861      	ldr	r1, [r4, #4]
 801436a:	4299      	cmp	r1, r3
 801436c:	bfde      	ittt	le
 801436e:	2330      	movle	r3, #48	; 0x30
 8014370:	f805 3c01 	strble.w	r3, [r5, #-1]
 8014374:	f105 35ff 	addle.w	r5, r5, #4294967295
 8014378:	1b52      	subs	r2, r2, r5
 801437a:	6122      	str	r2, [r4, #16]
 801437c:	f8cd a000 	str.w	sl, [sp]
 8014380:	464b      	mov	r3, r9
 8014382:	aa03      	add	r2, sp, #12
 8014384:	4621      	mov	r1, r4
 8014386:	4640      	mov	r0, r8
 8014388:	f7ff fee2 	bl	8014150 <_printf_common>
 801438c:	3001      	adds	r0, #1
 801438e:	d14c      	bne.n	801442a <_printf_i+0x1fe>
 8014390:	f04f 30ff 	mov.w	r0, #4294967295
 8014394:	b004      	add	sp, #16
 8014396:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801439a:	4835      	ldr	r0, [pc, #212]	; (8014470 <_printf_i+0x244>)
 801439c:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80143a0:	6829      	ldr	r1, [r5, #0]
 80143a2:	6823      	ldr	r3, [r4, #0]
 80143a4:	f851 6b04 	ldr.w	r6, [r1], #4
 80143a8:	6029      	str	r1, [r5, #0]
 80143aa:	061d      	lsls	r5, r3, #24
 80143ac:	d514      	bpl.n	80143d8 <_printf_i+0x1ac>
 80143ae:	07df      	lsls	r7, r3, #31
 80143b0:	bf44      	itt	mi
 80143b2:	f043 0320 	orrmi.w	r3, r3, #32
 80143b6:	6023      	strmi	r3, [r4, #0]
 80143b8:	b91e      	cbnz	r6, 80143c2 <_printf_i+0x196>
 80143ba:	6823      	ldr	r3, [r4, #0]
 80143bc:	f023 0320 	bic.w	r3, r3, #32
 80143c0:	6023      	str	r3, [r4, #0]
 80143c2:	2310      	movs	r3, #16
 80143c4:	e7b0      	b.n	8014328 <_printf_i+0xfc>
 80143c6:	6823      	ldr	r3, [r4, #0]
 80143c8:	f043 0320 	orr.w	r3, r3, #32
 80143cc:	6023      	str	r3, [r4, #0]
 80143ce:	2378      	movs	r3, #120	; 0x78
 80143d0:	4828      	ldr	r0, [pc, #160]	; (8014474 <_printf_i+0x248>)
 80143d2:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80143d6:	e7e3      	b.n	80143a0 <_printf_i+0x174>
 80143d8:	0659      	lsls	r1, r3, #25
 80143da:	bf48      	it	mi
 80143dc:	b2b6      	uxthmi	r6, r6
 80143de:	e7e6      	b.n	80143ae <_printf_i+0x182>
 80143e0:	4615      	mov	r5, r2
 80143e2:	e7bb      	b.n	801435c <_printf_i+0x130>
 80143e4:	682b      	ldr	r3, [r5, #0]
 80143e6:	6826      	ldr	r6, [r4, #0]
 80143e8:	6961      	ldr	r1, [r4, #20]
 80143ea:	1d18      	adds	r0, r3, #4
 80143ec:	6028      	str	r0, [r5, #0]
 80143ee:	0635      	lsls	r5, r6, #24
 80143f0:	681b      	ldr	r3, [r3, #0]
 80143f2:	d501      	bpl.n	80143f8 <_printf_i+0x1cc>
 80143f4:	6019      	str	r1, [r3, #0]
 80143f6:	e002      	b.n	80143fe <_printf_i+0x1d2>
 80143f8:	0670      	lsls	r0, r6, #25
 80143fa:	d5fb      	bpl.n	80143f4 <_printf_i+0x1c8>
 80143fc:	8019      	strh	r1, [r3, #0]
 80143fe:	2300      	movs	r3, #0
 8014400:	6123      	str	r3, [r4, #16]
 8014402:	4615      	mov	r5, r2
 8014404:	e7ba      	b.n	801437c <_printf_i+0x150>
 8014406:	682b      	ldr	r3, [r5, #0]
 8014408:	1d1a      	adds	r2, r3, #4
 801440a:	602a      	str	r2, [r5, #0]
 801440c:	681d      	ldr	r5, [r3, #0]
 801440e:	6862      	ldr	r2, [r4, #4]
 8014410:	2100      	movs	r1, #0
 8014412:	4628      	mov	r0, r5
 8014414:	f7eb fedc 	bl	80001d0 <memchr>
 8014418:	b108      	cbz	r0, 801441e <_printf_i+0x1f2>
 801441a:	1b40      	subs	r0, r0, r5
 801441c:	6060      	str	r0, [r4, #4]
 801441e:	6863      	ldr	r3, [r4, #4]
 8014420:	6123      	str	r3, [r4, #16]
 8014422:	2300      	movs	r3, #0
 8014424:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8014428:	e7a8      	b.n	801437c <_printf_i+0x150>
 801442a:	6923      	ldr	r3, [r4, #16]
 801442c:	462a      	mov	r2, r5
 801442e:	4649      	mov	r1, r9
 8014430:	4640      	mov	r0, r8
 8014432:	47d0      	blx	sl
 8014434:	3001      	adds	r0, #1
 8014436:	d0ab      	beq.n	8014390 <_printf_i+0x164>
 8014438:	6823      	ldr	r3, [r4, #0]
 801443a:	079b      	lsls	r3, r3, #30
 801443c:	d413      	bmi.n	8014466 <_printf_i+0x23a>
 801443e:	68e0      	ldr	r0, [r4, #12]
 8014440:	9b03      	ldr	r3, [sp, #12]
 8014442:	4298      	cmp	r0, r3
 8014444:	bfb8      	it	lt
 8014446:	4618      	movlt	r0, r3
 8014448:	e7a4      	b.n	8014394 <_printf_i+0x168>
 801444a:	2301      	movs	r3, #1
 801444c:	4632      	mov	r2, r6
 801444e:	4649      	mov	r1, r9
 8014450:	4640      	mov	r0, r8
 8014452:	47d0      	blx	sl
 8014454:	3001      	adds	r0, #1
 8014456:	d09b      	beq.n	8014390 <_printf_i+0x164>
 8014458:	3501      	adds	r5, #1
 801445a:	68e3      	ldr	r3, [r4, #12]
 801445c:	9903      	ldr	r1, [sp, #12]
 801445e:	1a5b      	subs	r3, r3, r1
 8014460:	42ab      	cmp	r3, r5
 8014462:	dcf2      	bgt.n	801444a <_printf_i+0x21e>
 8014464:	e7eb      	b.n	801443e <_printf_i+0x212>
 8014466:	2500      	movs	r5, #0
 8014468:	f104 0619 	add.w	r6, r4, #25
 801446c:	e7f5      	b.n	801445a <_printf_i+0x22e>
 801446e:	bf00      	nop
 8014470:	080175ff 	.word	0x080175ff
 8014474:	08017610 	.word	0x08017610

08014478 <_read_r>:
 8014478:	b538      	push	{r3, r4, r5, lr}
 801447a:	4d07      	ldr	r5, [pc, #28]	; (8014498 <_read_r+0x20>)
 801447c:	4604      	mov	r4, r0
 801447e:	4608      	mov	r0, r1
 8014480:	4611      	mov	r1, r2
 8014482:	2200      	movs	r2, #0
 8014484:	602a      	str	r2, [r5, #0]
 8014486:	461a      	mov	r2, r3
 8014488:	f7ec fc32 	bl	8000cf0 <_read>
 801448c:	1c43      	adds	r3, r0, #1
 801448e:	d102      	bne.n	8014496 <_read_r+0x1e>
 8014490:	682b      	ldr	r3, [r5, #0]
 8014492:	b103      	cbz	r3, 8014496 <_read_r+0x1e>
 8014494:	6023      	str	r3, [r4, #0]
 8014496:	bd38      	pop	{r3, r4, r5, pc}
 8014498:	2000c8b4 	.word	0x2000c8b4

0801449c <__swbuf_r>:
 801449c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801449e:	460e      	mov	r6, r1
 80144a0:	4614      	mov	r4, r2
 80144a2:	4605      	mov	r5, r0
 80144a4:	b118      	cbz	r0, 80144ae <__swbuf_r+0x12>
 80144a6:	6983      	ldr	r3, [r0, #24]
 80144a8:	b90b      	cbnz	r3, 80144ae <__swbuf_r+0x12>
 80144aa:	f7ff f8dd 	bl	8013668 <__sinit>
 80144ae:	4b21      	ldr	r3, [pc, #132]	; (8014534 <__swbuf_r+0x98>)
 80144b0:	429c      	cmp	r4, r3
 80144b2:	d12b      	bne.n	801450c <__swbuf_r+0x70>
 80144b4:	686c      	ldr	r4, [r5, #4]
 80144b6:	69a3      	ldr	r3, [r4, #24]
 80144b8:	60a3      	str	r3, [r4, #8]
 80144ba:	89a3      	ldrh	r3, [r4, #12]
 80144bc:	071a      	lsls	r2, r3, #28
 80144be:	d52f      	bpl.n	8014520 <__swbuf_r+0x84>
 80144c0:	6923      	ldr	r3, [r4, #16]
 80144c2:	b36b      	cbz	r3, 8014520 <__swbuf_r+0x84>
 80144c4:	6923      	ldr	r3, [r4, #16]
 80144c6:	6820      	ldr	r0, [r4, #0]
 80144c8:	1ac0      	subs	r0, r0, r3
 80144ca:	6963      	ldr	r3, [r4, #20]
 80144cc:	b2f6      	uxtb	r6, r6
 80144ce:	4283      	cmp	r3, r0
 80144d0:	4637      	mov	r7, r6
 80144d2:	dc04      	bgt.n	80144de <__swbuf_r+0x42>
 80144d4:	4621      	mov	r1, r4
 80144d6:	4628      	mov	r0, r5
 80144d8:	f7ff fc20 	bl	8013d1c <_fflush_r>
 80144dc:	bb30      	cbnz	r0, 801452c <__swbuf_r+0x90>
 80144de:	68a3      	ldr	r3, [r4, #8]
 80144e0:	3b01      	subs	r3, #1
 80144e2:	60a3      	str	r3, [r4, #8]
 80144e4:	6823      	ldr	r3, [r4, #0]
 80144e6:	1c5a      	adds	r2, r3, #1
 80144e8:	6022      	str	r2, [r4, #0]
 80144ea:	701e      	strb	r6, [r3, #0]
 80144ec:	6963      	ldr	r3, [r4, #20]
 80144ee:	3001      	adds	r0, #1
 80144f0:	4283      	cmp	r3, r0
 80144f2:	d004      	beq.n	80144fe <__swbuf_r+0x62>
 80144f4:	89a3      	ldrh	r3, [r4, #12]
 80144f6:	07db      	lsls	r3, r3, #31
 80144f8:	d506      	bpl.n	8014508 <__swbuf_r+0x6c>
 80144fa:	2e0a      	cmp	r6, #10
 80144fc:	d104      	bne.n	8014508 <__swbuf_r+0x6c>
 80144fe:	4621      	mov	r1, r4
 8014500:	4628      	mov	r0, r5
 8014502:	f7ff fc0b 	bl	8013d1c <_fflush_r>
 8014506:	b988      	cbnz	r0, 801452c <__swbuf_r+0x90>
 8014508:	4638      	mov	r0, r7
 801450a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801450c:	4b0a      	ldr	r3, [pc, #40]	; (8014538 <__swbuf_r+0x9c>)
 801450e:	429c      	cmp	r4, r3
 8014510:	d101      	bne.n	8014516 <__swbuf_r+0x7a>
 8014512:	68ac      	ldr	r4, [r5, #8]
 8014514:	e7cf      	b.n	80144b6 <__swbuf_r+0x1a>
 8014516:	4b09      	ldr	r3, [pc, #36]	; (801453c <__swbuf_r+0xa0>)
 8014518:	429c      	cmp	r4, r3
 801451a:	bf08      	it	eq
 801451c:	68ec      	ldreq	r4, [r5, #12]
 801451e:	e7ca      	b.n	80144b6 <__swbuf_r+0x1a>
 8014520:	4621      	mov	r1, r4
 8014522:	4628      	mov	r0, r5
 8014524:	f000 f80c 	bl	8014540 <__swsetup_r>
 8014528:	2800      	cmp	r0, #0
 801452a:	d0cb      	beq.n	80144c4 <__swbuf_r+0x28>
 801452c:	f04f 37ff 	mov.w	r7, #4294967295
 8014530:	e7ea      	b.n	8014508 <__swbuf_r+0x6c>
 8014532:	bf00      	nop
 8014534:	080174fc 	.word	0x080174fc
 8014538:	0801751c 	.word	0x0801751c
 801453c:	080174dc 	.word	0x080174dc

08014540 <__swsetup_r>:
 8014540:	4b32      	ldr	r3, [pc, #200]	; (801460c <__swsetup_r+0xcc>)
 8014542:	b570      	push	{r4, r5, r6, lr}
 8014544:	681d      	ldr	r5, [r3, #0]
 8014546:	4606      	mov	r6, r0
 8014548:	460c      	mov	r4, r1
 801454a:	b125      	cbz	r5, 8014556 <__swsetup_r+0x16>
 801454c:	69ab      	ldr	r3, [r5, #24]
 801454e:	b913      	cbnz	r3, 8014556 <__swsetup_r+0x16>
 8014550:	4628      	mov	r0, r5
 8014552:	f7ff f889 	bl	8013668 <__sinit>
 8014556:	4b2e      	ldr	r3, [pc, #184]	; (8014610 <__swsetup_r+0xd0>)
 8014558:	429c      	cmp	r4, r3
 801455a:	d10f      	bne.n	801457c <__swsetup_r+0x3c>
 801455c:	686c      	ldr	r4, [r5, #4]
 801455e:	89a3      	ldrh	r3, [r4, #12]
 8014560:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8014564:	0719      	lsls	r1, r3, #28
 8014566:	d42c      	bmi.n	80145c2 <__swsetup_r+0x82>
 8014568:	06dd      	lsls	r5, r3, #27
 801456a:	d411      	bmi.n	8014590 <__swsetup_r+0x50>
 801456c:	2309      	movs	r3, #9
 801456e:	6033      	str	r3, [r6, #0]
 8014570:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8014574:	81a3      	strh	r3, [r4, #12]
 8014576:	f04f 30ff 	mov.w	r0, #4294967295
 801457a:	e03e      	b.n	80145fa <__swsetup_r+0xba>
 801457c:	4b25      	ldr	r3, [pc, #148]	; (8014614 <__swsetup_r+0xd4>)
 801457e:	429c      	cmp	r4, r3
 8014580:	d101      	bne.n	8014586 <__swsetup_r+0x46>
 8014582:	68ac      	ldr	r4, [r5, #8]
 8014584:	e7eb      	b.n	801455e <__swsetup_r+0x1e>
 8014586:	4b24      	ldr	r3, [pc, #144]	; (8014618 <__swsetup_r+0xd8>)
 8014588:	429c      	cmp	r4, r3
 801458a:	bf08      	it	eq
 801458c:	68ec      	ldreq	r4, [r5, #12]
 801458e:	e7e6      	b.n	801455e <__swsetup_r+0x1e>
 8014590:	0758      	lsls	r0, r3, #29
 8014592:	d512      	bpl.n	80145ba <__swsetup_r+0x7a>
 8014594:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8014596:	b141      	cbz	r1, 80145aa <__swsetup_r+0x6a>
 8014598:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801459c:	4299      	cmp	r1, r3
 801459e:	d002      	beq.n	80145a6 <__swsetup_r+0x66>
 80145a0:	4630      	mov	r0, r6
 80145a2:	f7ff fc2f 	bl	8013e04 <_free_r>
 80145a6:	2300      	movs	r3, #0
 80145a8:	6363      	str	r3, [r4, #52]	; 0x34
 80145aa:	89a3      	ldrh	r3, [r4, #12]
 80145ac:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80145b0:	81a3      	strh	r3, [r4, #12]
 80145b2:	2300      	movs	r3, #0
 80145b4:	6063      	str	r3, [r4, #4]
 80145b6:	6923      	ldr	r3, [r4, #16]
 80145b8:	6023      	str	r3, [r4, #0]
 80145ba:	89a3      	ldrh	r3, [r4, #12]
 80145bc:	f043 0308 	orr.w	r3, r3, #8
 80145c0:	81a3      	strh	r3, [r4, #12]
 80145c2:	6923      	ldr	r3, [r4, #16]
 80145c4:	b94b      	cbnz	r3, 80145da <__swsetup_r+0x9a>
 80145c6:	89a3      	ldrh	r3, [r4, #12]
 80145c8:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80145cc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80145d0:	d003      	beq.n	80145da <__swsetup_r+0x9a>
 80145d2:	4621      	mov	r1, r4
 80145d4:	4630      	mov	r0, r6
 80145d6:	f000 f84d 	bl	8014674 <__smakebuf_r>
 80145da:	89a0      	ldrh	r0, [r4, #12]
 80145dc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80145e0:	f010 0301 	ands.w	r3, r0, #1
 80145e4:	d00a      	beq.n	80145fc <__swsetup_r+0xbc>
 80145e6:	2300      	movs	r3, #0
 80145e8:	60a3      	str	r3, [r4, #8]
 80145ea:	6963      	ldr	r3, [r4, #20]
 80145ec:	425b      	negs	r3, r3
 80145ee:	61a3      	str	r3, [r4, #24]
 80145f0:	6923      	ldr	r3, [r4, #16]
 80145f2:	b943      	cbnz	r3, 8014606 <__swsetup_r+0xc6>
 80145f4:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80145f8:	d1ba      	bne.n	8014570 <__swsetup_r+0x30>
 80145fa:	bd70      	pop	{r4, r5, r6, pc}
 80145fc:	0781      	lsls	r1, r0, #30
 80145fe:	bf58      	it	pl
 8014600:	6963      	ldrpl	r3, [r4, #20]
 8014602:	60a3      	str	r3, [r4, #8]
 8014604:	e7f4      	b.n	80145f0 <__swsetup_r+0xb0>
 8014606:	2000      	movs	r0, #0
 8014608:	e7f7      	b.n	80145fa <__swsetup_r+0xba>
 801460a:	bf00      	nop
 801460c:	20000030 	.word	0x20000030
 8014610:	080174fc 	.word	0x080174fc
 8014614:	0801751c 	.word	0x0801751c
 8014618:	080174dc 	.word	0x080174dc

0801461c <abort>:
 801461c:	b508      	push	{r3, lr}
 801461e:	2006      	movs	r0, #6
 8014620:	f000 f890 	bl	8014744 <raise>
 8014624:	2001      	movs	r0, #1
 8014626:	f7ec fb59 	bl	8000cdc <_exit>

0801462a <__swhatbuf_r>:
 801462a:	b570      	push	{r4, r5, r6, lr}
 801462c:	460e      	mov	r6, r1
 801462e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8014632:	2900      	cmp	r1, #0
 8014634:	b096      	sub	sp, #88	; 0x58
 8014636:	4614      	mov	r4, r2
 8014638:	461d      	mov	r5, r3
 801463a:	da08      	bge.n	801464e <__swhatbuf_r+0x24>
 801463c:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8014640:	2200      	movs	r2, #0
 8014642:	602a      	str	r2, [r5, #0]
 8014644:	061a      	lsls	r2, r3, #24
 8014646:	d410      	bmi.n	801466a <__swhatbuf_r+0x40>
 8014648:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801464c:	e00e      	b.n	801466c <__swhatbuf_r+0x42>
 801464e:	466a      	mov	r2, sp
 8014650:	f000 f894 	bl	801477c <_fstat_r>
 8014654:	2800      	cmp	r0, #0
 8014656:	dbf1      	blt.n	801463c <__swhatbuf_r+0x12>
 8014658:	9a01      	ldr	r2, [sp, #4]
 801465a:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 801465e:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8014662:	425a      	negs	r2, r3
 8014664:	415a      	adcs	r2, r3
 8014666:	602a      	str	r2, [r5, #0]
 8014668:	e7ee      	b.n	8014648 <__swhatbuf_r+0x1e>
 801466a:	2340      	movs	r3, #64	; 0x40
 801466c:	2000      	movs	r0, #0
 801466e:	6023      	str	r3, [r4, #0]
 8014670:	b016      	add	sp, #88	; 0x58
 8014672:	bd70      	pop	{r4, r5, r6, pc}

08014674 <__smakebuf_r>:
 8014674:	898b      	ldrh	r3, [r1, #12]
 8014676:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8014678:	079d      	lsls	r5, r3, #30
 801467a:	4606      	mov	r6, r0
 801467c:	460c      	mov	r4, r1
 801467e:	d507      	bpl.n	8014690 <__smakebuf_r+0x1c>
 8014680:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8014684:	6023      	str	r3, [r4, #0]
 8014686:	6123      	str	r3, [r4, #16]
 8014688:	2301      	movs	r3, #1
 801468a:	6163      	str	r3, [r4, #20]
 801468c:	b002      	add	sp, #8
 801468e:	bd70      	pop	{r4, r5, r6, pc}
 8014690:	ab01      	add	r3, sp, #4
 8014692:	466a      	mov	r2, sp
 8014694:	f7ff ffc9 	bl	801462a <__swhatbuf_r>
 8014698:	9900      	ldr	r1, [sp, #0]
 801469a:	4605      	mov	r5, r0
 801469c:	4630      	mov	r0, r6
 801469e:	f7ff f8ef 	bl	8013880 <_malloc_r>
 80146a2:	b948      	cbnz	r0, 80146b8 <__smakebuf_r+0x44>
 80146a4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80146a8:	059a      	lsls	r2, r3, #22
 80146aa:	d4ef      	bmi.n	801468c <__smakebuf_r+0x18>
 80146ac:	f023 0303 	bic.w	r3, r3, #3
 80146b0:	f043 0302 	orr.w	r3, r3, #2
 80146b4:	81a3      	strh	r3, [r4, #12]
 80146b6:	e7e3      	b.n	8014680 <__smakebuf_r+0xc>
 80146b8:	4b0d      	ldr	r3, [pc, #52]	; (80146f0 <__smakebuf_r+0x7c>)
 80146ba:	62b3      	str	r3, [r6, #40]	; 0x28
 80146bc:	89a3      	ldrh	r3, [r4, #12]
 80146be:	6020      	str	r0, [r4, #0]
 80146c0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80146c4:	81a3      	strh	r3, [r4, #12]
 80146c6:	9b00      	ldr	r3, [sp, #0]
 80146c8:	6163      	str	r3, [r4, #20]
 80146ca:	9b01      	ldr	r3, [sp, #4]
 80146cc:	6120      	str	r0, [r4, #16]
 80146ce:	b15b      	cbz	r3, 80146e8 <__smakebuf_r+0x74>
 80146d0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80146d4:	4630      	mov	r0, r6
 80146d6:	f000 f863 	bl	80147a0 <_isatty_r>
 80146da:	b128      	cbz	r0, 80146e8 <__smakebuf_r+0x74>
 80146dc:	89a3      	ldrh	r3, [r4, #12]
 80146de:	f023 0303 	bic.w	r3, r3, #3
 80146e2:	f043 0301 	orr.w	r3, r3, #1
 80146e6:	81a3      	strh	r3, [r4, #12]
 80146e8:	89a0      	ldrh	r0, [r4, #12]
 80146ea:	4305      	orrs	r5, r0
 80146ec:	81a5      	strh	r5, [r4, #12]
 80146ee:	e7cd      	b.n	801468c <__smakebuf_r+0x18>
 80146f0:	08013601 	.word	0x08013601

080146f4 <_raise_r>:
 80146f4:	291f      	cmp	r1, #31
 80146f6:	b538      	push	{r3, r4, r5, lr}
 80146f8:	4604      	mov	r4, r0
 80146fa:	460d      	mov	r5, r1
 80146fc:	d904      	bls.n	8014708 <_raise_r+0x14>
 80146fe:	2316      	movs	r3, #22
 8014700:	6003      	str	r3, [r0, #0]
 8014702:	f04f 30ff 	mov.w	r0, #4294967295
 8014706:	bd38      	pop	{r3, r4, r5, pc}
 8014708:	6c42      	ldr	r2, [r0, #68]	; 0x44
 801470a:	b112      	cbz	r2, 8014712 <_raise_r+0x1e>
 801470c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8014710:	b94b      	cbnz	r3, 8014726 <_raise_r+0x32>
 8014712:	4620      	mov	r0, r4
 8014714:	f000 f830 	bl	8014778 <_getpid_r>
 8014718:	462a      	mov	r2, r5
 801471a:	4601      	mov	r1, r0
 801471c:	4620      	mov	r0, r4
 801471e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8014722:	f000 b817 	b.w	8014754 <_kill_r>
 8014726:	2b01      	cmp	r3, #1
 8014728:	d00a      	beq.n	8014740 <_raise_r+0x4c>
 801472a:	1c59      	adds	r1, r3, #1
 801472c:	d103      	bne.n	8014736 <_raise_r+0x42>
 801472e:	2316      	movs	r3, #22
 8014730:	6003      	str	r3, [r0, #0]
 8014732:	2001      	movs	r0, #1
 8014734:	e7e7      	b.n	8014706 <_raise_r+0x12>
 8014736:	2400      	movs	r4, #0
 8014738:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 801473c:	4628      	mov	r0, r5
 801473e:	4798      	blx	r3
 8014740:	2000      	movs	r0, #0
 8014742:	e7e0      	b.n	8014706 <_raise_r+0x12>

08014744 <raise>:
 8014744:	4b02      	ldr	r3, [pc, #8]	; (8014750 <raise+0xc>)
 8014746:	4601      	mov	r1, r0
 8014748:	6818      	ldr	r0, [r3, #0]
 801474a:	f7ff bfd3 	b.w	80146f4 <_raise_r>
 801474e:	bf00      	nop
 8014750:	20000030 	.word	0x20000030

08014754 <_kill_r>:
 8014754:	b538      	push	{r3, r4, r5, lr}
 8014756:	4d07      	ldr	r5, [pc, #28]	; (8014774 <_kill_r+0x20>)
 8014758:	2300      	movs	r3, #0
 801475a:	4604      	mov	r4, r0
 801475c:	4608      	mov	r0, r1
 801475e:	4611      	mov	r1, r2
 8014760:	602b      	str	r3, [r5, #0]
 8014762:	f7ec faa9 	bl	8000cb8 <_kill>
 8014766:	1c43      	adds	r3, r0, #1
 8014768:	d102      	bne.n	8014770 <_kill_r+0x1c>
 801476a:	682b      	ldr	r3, [r5, #0]
 801476c:	b103      	cbz	r3, 8014770 <_kill_r+0x1c>
 801476e:	6023      	str	r3, [r4, #0]
 8014770:	bd38      	pop	{r3, r4, r5, pc}
 8014772:	bf00      	nop
 8014774:	2000c8b4 	.word	0x2000c8b4

08014778 <_getpid_r>:
 8014778:	f7ec ba96 	b.w	8000ca8 <_getpid>

0801477c <_fstat_r>:
 801477c:	b538      	push	{r3, r4, r5, lr}
 801477e:	4d07      	ldr	r5, [pc, #28]	; (801479c <_fstat_r+0x20>)
 8014780:	2300      	movs	r3, #0
 8014782:	4604      	mov	r4, r0
 8014784:	4608      	mov	r0, r1
 8014786:	4611      	mov	r1, r2
 8014788:	602b      	str	r3, [r5, #0]
 801478a:	f7ec faf6 	bl	8000d7a <_fstat>
 801478e:	1c43      	adds	r3, r0, #1
 8014790:	d102      	bne.n	8014798 <_fstat_r+0x1c>
 8014792:	682b      	ldr	r3, [r5, #0]
 8014794:	b103      	cbz	r3, 8014798 <_fstat_r+0x1c>
 8014796:	6023      	str	r3, [r4, #0]
 8014798:	bd38      	pop	{r3, r4, r5, pc}
 801479a:	bf00      	nop
 801479c:	2000c8b4 	.word	0x2000c8b4

080147a0 <_isatty_r>:
 80147a0:	b538      	push	{r3, r4, r5, lr}
 80147a2:	4d06      	ldr	r5, [pc, #24]	; (80147bc <_isatty_r+0x1c>)
 80147a4:	2300      	movs	r3, #0
 80147a6:	4604      	mov	r4, r0
 80147a8:	4608      	mov	r0, r1
 80147aa:	602b      	str	r3, [r5, #0]
 80147ac:	f7ec faf5 	bl	8000d9a <_isatty>
 80147b0:	1c43      	adds	r3, r0, #1
 80147b2:	d102      	bne.n	80147ba <_isatty_r+0x1a>
 80147b4:	682b      	ldr	r3, [r5, #0]
 80147b6:	b103      	cbz	r3, 80147ba <_isatty_r+0x1a>
 80147b8:	6023      	str	r3, [r4, #0]
 80147ba:	bd38      	pop	{r3, r4, r5, pc}
 80147bc:	2000c8b4 	.word	0x2000c8b4

080147c0 <_init>:
 80147c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80147c2:	bf00      	nop
 80147c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80147c6:	bc08      	pop	{r3}
 80147c8:	469e      	mov	lr, r3
 80147ca:	4770      	bx	lr

080147cc <_fini>:
 80147cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80147ce:	bf00      	nop
 80147d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80147d2:	bc08      	pop	{r3}
 80147d4:	469e      	mov	lr, r3
 80147d6:	4770      	bx	lr
