
alternate-firmware.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08020000  08020000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00017194  08020190  08020190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00003a04  08037324  08037324  00027324  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0803ad28  0803ad28  00030098  2**0
                  CONTENTS
  4 .ARM          00000008  0803ad28  0803ad28  0002ad28  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0803ad30  0803ad30  00030098  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0803ad30  0803ad30  0002ad30  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0803ad34  0803ad34  0002ad34  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000098  20000000  0803ad38  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00030098  2**0
                  CONTENTS
 10 .bss          0000eee4  20000098  20000098  00030098  2**2
                  ALLOC
 11 ._user_heap_stack 00010404  2000ef7c  2000ef7c  00030098  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00030098  2**0
                  CONTENTS, READONLY
 13 .debug_info   00034307  00000000  00000000  000300c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00007e73  00000000  00000000  000643cf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000023f8  00000000  00000000  0006c248  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00002220  00000000  00000000  0006e640  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0003402c  00000000  00000000  00070860  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00037c3b  00000000  00000000  000a488c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000f5663  00000000  00000000  000dc4c7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  001d1b2a  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00009dd0  00000000  00000000  001d1b7c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08020190 <__do_global_dtors_aux>:
 8020190:	b510      	push	{r4, lr}
 8020192:	4c05      	ldr	r4, [pc, #20]	; (80201a8 <__do_global_dtors_aux+0x18>)
 8020194:	7823      	ldrb	r3, [r4, #0]
 8020196:	b933      	cbnz	r3, 80201a6 <__do_global_dtors_aux+0x16>
 8020198:	4b04      	ldr	r3, [pc, #16]	; (80201ac <__do_global_dtors_aux+0x1c>)
 802019a:	b113      	cbz	r3, 80201a2 <__do_global_dtors_aux+0x12>
 802019c:	4804      	ldr	r0, [pc, #16]	; (80201b0 <__do_global_dtors_aux+0x20>)
 802019e:	f3af 8000 	nop.w
 80201a2:	2301      	movs	r3, #1
 80201a4:	7023      	strb	r3, [r4, #0]
 80201a6:	bd10      	pop	{r4, pc}
 80201a8:	20000098 	.word	0x20000098
 80201ac:	00000000 	.word	0x00000000
 80201b0:	0803730c 	.word	0x0803730c

080201b4 <frame_dummy>:
 80201b4:	b508      	push	{r3, lr}
 80201b6:	4b03      	ldr	r3, [pc, #12]	; (80201c4 <frame_dummy+0x10>)
 80201b8:	b11b      	cbz	r3, 80201c2 <frame_dummy+0xe>
 80201ba:	4903      	ldr	r1, [pc, #12]	; (80201c8 <frame_dummy+0x14>)
 80201bc:	4803      	ldr	r0, [pc, #12]	; (80201cc <frame_dummy+0x18>)
 80201be:	f3af 8000 	nop.w
 80201c2:	bd08      	pop	{r3, pc}
 80201c4:	00000000 	.word	0x00000000
 80201c8:	2000009c 	.word	0x2000009c
 80201cc:	0803730c 	.word	0x0803730c

080201d0 <strlen>:
 80201d0:	4603      	mov	r3, r0
 80201d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80201d6:	2a00      	cmp	r2, #0
 80201d8:	d1fb      	bne.n	80201d2 <strlen+0x2>
 80201da:	1a18      	subs	r0, r3, r0
 80201dc:	3801      	subs	r0, #1
 80201de:	4770      	bx	lr

080201e0 <memchr>:
 80201e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80201e4:	2a10      	cmp	r2, #16
 80201e6:	db2b      	blt.n	8020240 <memchr+0x60>
 80201e8:	f010 0f07 	tst.w	r0, #7
 80201ec:	d008      	beq.n	8020200 <memchr+0x20>
 80201ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80201f2:	3a01      	subs	r2, #1
 80201f4:	428b      	cmp	r3, r1
 80201f6:	d02d      	beq.n	8020254 <memchr+0x74>
 80201f8:	f010 0f07 	tst.w	r0, #7
 80201fc:	b342      	cbz	r2, 8020250 <memchr+0x70>
 80201fe:	d1f6      	bne.n	80201ee <memchr+0xe>
 8020200:	b4f0      	push	{r4, r5, r6, r7}
 8020202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8020206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 802020a:	f022 0407 	bic.w	r4, r2, #7
 802020e:	f07f 0700 	mvns.w	r7, #0
 8020212:	2300      	movs	r3, #0
 8020214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8020218:	3c08      	subs	r4, #8
 802021a:	ea85 0501 	eor.w	r5, r5, r1
 802021e:	ea86 0601 	eor.w	r6, r6, r1
 8020222:	fa85 f547 	uadd8	r5, r5, r7
 8020226:	faa3 f587 	sel	r5, r3, r7
 802022a:	fa86 f647 	uadd8	r6, r6, r7
 802022e:	faa5 f687 	sel	r6, r5, r7
 8020232:	b98e      	cbnz	r6, 8020258 <memchr+0x78>
 8020234:	d1ee      	bne.n	8020214 <memchr+0x34>
 8020236:	bcf0      	pop	{r4, r5, r6, r7}
 8020238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 802023c:	f002 0207 	and.w	r2, r2, #7
 8020240:	b132      	cbz	r2, 8020250 <memchr+0x70>
 8020242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8020246:	3a01      	subs	r2, #1
 8020248:	ea83 0301 	eor.w	r3, r3, r1
 802024c:	b113      	cbz	r3, 8020254 <memchr+0x74>
 802024e:	d1f8      	bne.n	8020242 <memchr+0x62>
 8020250:	2000      	movs	r0, #0
 8020252:	4770      	bx	lr
 8020254:	3801      	subs	r0, #1
 8020256:	4770      	bx	lr
 8020258:	2d00      	cmp	r5, #0
 802025a:	bf06      	itte	eq
 802025c:	4635      	moveq	r5, r6
 802025e:	3803      	subeq	r0, #3
 8020260:	3807      	subne	r0, #7
 8020262:	f015 0f01 	tst.w	r5, #1
 8020266:	d107      	bne.n	8020278 <memchr+0x98>
 8020268:	3001      	adds	r0, #1
 802026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 802026e:	bf02      	ittt	eq
 8020270:	3001      	addeq	r0, #1
 8020272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8020276:	3001      	addeq	r0, #1
 8020278:	bcf0      	pop	{r4, r5, r6, r7}
 802027a:	3801      	subs	r0, #1
 802027c:	4770      	bx	lr
 802027e:	bf00      	nop

08020280 <__aeabi_uldivmod>:
 8020280:	b953      	cbnz	r3, 8020298 <__aeabi_uldivmod+0x18>
 8020282:	b94a      	cbnz	r2, 8020298 <__aeabi_uldivmod+0x18>
 8020284:	2900      	cmp	r1, #0
 8020286:	bf08      	it	eq
 8020288:	2800      	cmpeq	r0, #0
 802028a:	bf1c      	itt	ne
 802028c:	f04f 31ff 	movne.w	r1, #4294967295
 8020290:	f04f 30ff 	movne.w	r0, #4294967295
 8020294:	f000 b974 	b.w	8020580 <__aeabi_idiv0>
 8020298:	f1ad 0c08 	sub.w	ip, sp, #8
 802029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80202a0:	f000 f806 	bl	80202b0 <__udivmoddi4>
 80202a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80202a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80202ac:	b004      	add	sp, #16
 80202ae:	4770      	bx	lr

080202b0 <__udivmoddi4>:
 80202b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80202b4:	9d08      	ldr	r5, [sp, #32]
 80202b6:	4604      	mov	r4, r0
 80202b8:	468e      	mov	lr, r1
 80202ba:	2b00      	cmp	r3, #0
 80202bc:	d14d      	bne.n	802035a <__udivmoddi4+0xaa>
 80202be:	428a      	cmp	r2, r1
 80202c0:	4694      	mov	ip, r2
 80202c2:	d969      	bls.n	8020398 <__udivmoddi4+0xe8>
 80202c4:	fab2 f282 	clz	r2, r2
 80202c8:	b152      	cbz	r2, 80202e0 <__udivmoddi4+0x30>
 80202ca:	fa01 f302 	lsl.w	r3, r1, r2
 80202ce:	f1c2 0120 	rsb	r1, r2, #32
 80202d2:	fa20 f101 	lsr.w	r1, r0, r1
 80202d6:	fa0c fc02 	lsl.w	ip, ip, r2
 80202da:	ea41 0e03 	orr.w	lr, r1, r3
 80202de:	4094      	lsls	r4, r2
 80202e0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80202e4:	0c21      	lsrs	r1, r4, #16
 80202e6:	fbbe f6f8 	udiv	r6, lr, r8
 80202ea:	fa1f f78c 	uxth.w	r7, ip
 80202ee:	fb08 e316 	mls	r3, r8, r6, lr
 80202f2:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80202f6:	fb06 f107 	mul.w	r1, r6, r7
 80202fa:	4299      	cmp	r1, r3
 80202fc:	d90a      	bls.n	8020314 <__udivmoddi4+0x64>
 80202fe:	eb1c 0303 	adds.w	r3, ip, r3
 8020302:	f106 30ff 	add.w	r0, r6, #4294967295
 8020306:	f080 811f 	bcs.w	8020548 <__udivmoddi4+0x298>
 802030a:	4299      	cmp	r1, r3
 802030c:	f240 811c 	bls.w	8020548 <__udivmoddi4+0x298>
 8020310:	3e02      	subs	r6, #2
 8020312:	4463      	add	r3, ip
 8020314:	1a5b      	subs	r3, r3, r1
 8020316:	b2a4      	uxth	r4, r4
 8020318:	fbb3 f0f8 	udiv	r0, r3, r8
 802031c:	fb08 3310 	mls	r3, r8, r0, r3
 8020320:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8020324:	fb00 f707 	mul.w	r7, r0, r7
 8020328:	42a7      	cmp	r7, r4
 802032a:	d90a      	bls.n	8020342 <__udivmoddi4+0x92>
 802032c:	eb1c 0404 	adds.w	r4, ip, r4
 8020330:	f100 33ff 	add.w	r3, r0, #4294967295
 8020334:	f080 810a 	bcs.w	802054c <__udivmoddi4+0x29c>
 8020338:	42a7      	cmp	r7, r4
 802033a:	f240 8107 	bls.w	802054c <__udivmoddi4+0x29c>
 802033e:	4464      	add	r4, ip
 8020340:	3802      	subs	r0, #2
 8020342:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8020346:	1be4      	subs	r4, r4, r7
 8020348:	2600      	movs	r6, #0
 802034a:	b11d      	cbz	r5, 8020354 <__udivmoddi4+0xa4>
 802034c:	40d4      	lsrs	r4, r2
 802034e:	2300      	movs	r3, #0
 8020350:	e9c5 4300 	strd	r4, r3, [r5]
 8020354:	4631      	mov	r1, r6
 8020356:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 802035a:	428b      	cmp	r3, r1
 802035c:	d909      	bls.n	8020372 <__udivmoddi4+0xc2>
 802035e:	2d00      	cmp	r5, #0
 8020360:	f000 80ef 	beq.w	8020542 <__udivmoddi4+0x292>
 8020364:	2600      	movs	r6, #0
 8020366:	e9c5 0100 	strd	r0, r1, [r5]
 802036a:	4630      	mov	r0, r6
 802036c:	4631      	mov	r1, r6
 802036e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8020372:	fab3 f683 	clz	r6, r3
 8020376:	2e00      	cmp	r6, #0
 8020378:	d14a      	bne.n	8020410 <__udivmoddi4+0x160>
 802037a:	428b      	cmp	r3, r1
 802037c:	d302      	bcc.n	8020384 <__udivmoddi4+0xd4>
 802037e:	4282      	cmp	r2, r0
 8020380:	f200 80f9 	bhi.w	8020576 <__udivmoddi4+0x2c6>
 8020384:	1a84      	subs	r4, r0, r2
 8020386:	eb61 0303 	sbc.w	r3, r1, r3
 802038a:	2001      	movs	r0, #1
 802038c:	469e      	mov	lr, r3
 802038e:	2d00      	cmp	r5, #0
 8020390:	d0e0      	beq.n	8020354 <__udivmoddi4+0xa4>
 8020392:	e9c5 4e00 	strd	r4, lr, [r5]
 8020396:	e7dd      	b.n	8020354 <__udivmoddi4+0xa4>
 8020398:	b902      	cbnz	r2, 802039c <__udivmoddi4+0xec>
 802039a:	deff      	udf	#255	; 0xff
 802039c:	fab2 f282 	clz	r2, r2
 80203a0:	2a00      	cmp	r2, #0
 80203a2:	f040 8092 	bne.w	80204ca <__udivmoddi4+0x21a>
 80203a6:	eba1 010c 	sub.w	r1, r1, ip
 80203aa:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80203ae:	fa1f fe8c 	uxth.w	lr, ip
 80203b2:	2601      	movs	r6, #1
 80203b4:	0c20      	lsrs	r0, r4, #16
 80203b6:	fbb1 f3f7 	udiv	r3, r1, r7
 80203ba:	fb07 1113 	mls	r1, r7, r3, r1
 80203be:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80203c2:	fb0e f003 	mul.w	r0, lr, r3
 80203c6:	4288      	cmp	r0, r1
 80203c8:	d908      	bls.n	80203dc <__udivmoddi4+0x12c>
 80203ca:	eb1c 0101 	adds.w	r1, ip, r1
 80203ce:	f103 38ff 	add.w	r8, r3, #4294967295
 80203d2:	d202      	bcs.n	80203da <__udivmoddi4+0x12a>
 80203d4:	4288      	cmp	r0, r1
 80203d6:	f200 80cb 	bhi.w	8020570 <__udivmoddi4+0x2c0>
 80203da:	4643      	mov	r3, r8
 80203dc:	1a09      	subs	r1, r1, r0
 80203de:	b2a4      	uxth	r4, r4
 80203e0:	fbb1 f0f7 	udiv	r0, r1, r7
 80203e4:	fb07 1110 	mls	r1, r7, r0, r1
 80203e8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80203ec:	fb0e fe00 	mul.w	lr, lr, r0
 80203f0:	45a6      	cmp	lr, r4
 80203f2:	d908      	bls.n	8020406 <__udivmoddi4+0x156>
 80203f4:	eb1c 0404 	adds.w	r4, ip, r4
 80203f8:	f100 31ff 	add.w	r1, r0, #4294967295
 80203fc:	d202      	bcs.n	8020404 <__udivmoddi4+0x154>
 80203fe:	45a6      	cmp	lr, r4
 8020400:	f200 80bb 	bhi.w	802057a <__udivmoddi4+0x2ca>
 8020404:	4608      	mov	r0, r1
 8020406:	eba4 040e 	sub.w	r4, r4, lr
 802040a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 802040e:	e79c      	b.n	802034a <__udivmoddi4+0x9a>
 8020410:	f1c6 0720 	rsb	r7, r6, #32
 8020414:	40b3      	lsls	r3, r6
 8020416:	fa22 fc07 	lsr.w	ip, r2, r7
 802041a:	ea4c 0c03 	orr.w	ip, ip, r3
 802041e:	fa20 f407 	lsr.w	r4, r0, r7
 8020422:	fa01 f306 	lsl.w	r3, r1, r6
 8020426:	431c      	orrs	r4, r3
 8020428:	40f9      	lsrs	r1, r7
 802042a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 802042e:	fa00 f306 	lsl.w	r3, r0, r6
 8020432:	fbb1 f8f9 	udiv	r8, r1, r9
 8020436:	0c20      	lsrs	r0, r4, #16
 8020438:	fa1f fe8c 	uxth.w	lr, ip
 802043c:	fb09 1118 	mls	r1, r9, r8, r1
 8020440:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8020444:	fb08 f00e 	mul.w	r0, r8, lr
 8020448:	4288      	cmp	r0, r1
 802044a:	fa02 f206 	lsl.w	r2, r2, r6
 802044e:	d90b      	bls.n	8020468 <__udivmoddi4+0x1b8>
 8020450:	eb1c 0101 	adds.w	r1, ip, r1
 8020454:	f108 3aff 	add.w	sl, r8, #4294967295
 8020458:	f080 8088 	bcs.w	802056c <__udivmoddi4+0x2bc>
 802045c:	4288      	cmp	r0, r1
 802045e:	f240 8085 	bls.w	802056c <__udivmoddi4+0x2bc>
 8020462:	f1a8 0802 	sub.w	r8, r8, #2
 8020466:	4461      	add	r1, ip
 8020468:	1a09      	subs	r1, r1, r0
 802046a:	b2a4      	uxth	r4, r4
 802046c:	fbb1 f0f9 	udiv	r0, r1, r9
 8020470:	fb09 1110 	mls	r1, r9, r0, r1
 8020474:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8020478:	fb00 fe0e 	mul.w	lr, r0, lr
 802047c:	458e      	cmp	lr, r1
 802047e:	d908      	bls.n	8020492 <__udivmoddi4+0x1e2>
 8020480:	eb1c 0101 	adds.w	r1, ip, r1
 8020484:	f100 34ff 	add.w	r4, r0, #4294967295
 8020488:	d26c      	bcs.n	8020564 <__udivmoddi4+0x2b4>
 802048a:	458e      	cmp	lr, r1
 802048c:	d96a      	bls.n	8020564 <__udivmoddi4+0x2b4>
 802048e:	3802      	subs	r0, #2
 8020490:	4461      	add	r1, ip
 8020492:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8020496:	fba0 9402 	umull	r9, r4, r0, r2
 802049a:	eba1 010e 	sub.w	r1, r1, lr
 802049e:	42a1      	cmp	r1, r4
 80204a0:	46c8      	mov	r8, r9
 80204a2:	46a6      	mov	lr, r4
 80204a4:	d356      	bcc.n	8020554 <__udivmoddi4+0x2a4>
 80204a6:	d053      	beq.n	8020550 <__udivmoddi4+0x2a0>
 80204a8:	b15d      	cbz	r5, 80204c2 <__udivmoddi4+0x212>
 80204aa:	ebb3 0208 	subs.w	r2, r3, r8
 80204ae:	eb61 010e 	sbc.w	r1, r1, lr
 80204b2:	fa01 f707 	lsl.w	r7, r1, r7
 80204b6:	fa22 f306 	lsr.w	r3, r2, r6
 80204ba:	40f1      	lsrs	r1, r6
 80204bc:	431f      	orrs	r7, r3
 80204be:	e9c5 7100 	strd	r7, r1, [r5]
 80204c2:	2600      	movs	r6, #0
 80204c4:	4631      	mov	r1, r6
 80204c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80204ca:	f1c2 0320 	rsb	r3, r2, #32
 80204ce:	40d8      	lsrs	r0, r3
 80204d0:	fa0c fc02 	lsl.w	ip, ip, r2
 80204d4:	fa21 f303 	lsr.w	r3, r1, r3
 80204d8:	4091      	lsls	r1, r2
 80204da:	4301      	orrs	r1, r0
 80204dc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80204e0:	fa1f fe8c 	uxth.w	lr, ip
 80204e4:	fbb3 f0f7 	udiv	r0, r3, r7
 80204e8:	fb07 3610 	mls	r6, r7, r0, r3
 80204ec:	0c0b      	lsrs	r3, r1, #16
 80204ee:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80204f2:	fb00 f60e 	mul.w	r6, r0, lr
 80204f6:	429e      	cmp	r6, r3
 80204f8:	fa04 f402 	lsl.w	r4, r4, r2
 80204fc:	d908      	bls.n	8020510 <__udivmoddi4+0x260>
 80204fe:	eb1c 0303 	adds.w	r3, ip, r3
 8020502:	f100 38ff 	add.w	r8, r0, #4294967295
 8020506:	d22f      	bcs.n	8020568 <__udivmoddi4+0x2b8>
 8020508:	429e      	cmp	r6, r3
 802050a:	d92d      	bls.n	8020568 <__udivmoddi4+0x2b8>
 802050c:	3802      	subs	r0, #2
 802050e:	4463      	add	r3, ip
 8020510:	1b9b      	subs	r3, r3, r6
 8020512:	b289      	uxth	r1, r1
 8020514:	fbb3 f6f7 	udiv	r6, r3, r7
 8020518:	fb07 3316 	mls	r3, r7, r6, r3
 802051c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8020520:	fb06 f30e 	mul.w	r3, r6, lr
 8020524:	428b      	cmp	r3, r1
 8020526:	d908      	bls.n	802053a <__udivmoddi4+0x28a>
 8020528:	eb1c 0101 	adds.w	r1, ip, r1
 802052c:	f106 38ff 	add.w	r8, r6, #4294967295
 8020530:	d216      	bcs.n	8020560 <__udivmoddi4+0x2b0>
 8020532:	428b      	cmp	r3, r1
 8020534:	d914      	bls.n	8020560 <__udivmoddi4+0x2b0>
 8020536:	3e02      	subs	r6, #2
 8020538:	4461      	add	r1, ip
 802053a:	1ac9      	subs	r1, r1, r3
 802053c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8020540:	e738      	b.n	80203b4 <__udivmoddi4+0x104>
 8020542:	462e      	mov	r6, r5
 8020544:	4628      	mov	r0, r5
 8020546:	e705      	b.n	8020354 <__udivmoddi4+0xa4>
 8020548:	4606      	mov	r6, r0
 802054a:	e6e3      	b.n	8020314 <__udivmoddi4+0x64>
 802054c:	4618      	mov	r0, r3
 802054e:	e6f8      	b.n	8020342 <__udivmoddi4+0x92>
 8020550:	454b      	cmp	r3, r9
 8020552:	d2a9      	bcs.n	80204a8 <__udivmoddi4+0x1f8>
 8020554:	ebb9 0802 	subs.w	r8, r9, r2
 8020558:	eb64 0e0c 	sbc.w	lr, r4, ip
 802055c:	3801      	subs	r0, #1
 802055e:	e7a3      	b.n	80204a8 <__udivmoddi4+0x1f8>
 8020560:	4646      	mov	r6, r8
 8020562:	e7ea      	b.n	802053a <__udivmoddi4+0x28a>
 8020564:	4620      	mov	r0, r4
 8020566:	e794      	b.n	8020492 <__udivmoddi4+0x1e2>
 8020568:	4640      	mov	r0, r8
 802056a:	e7d1      	b.n	8020510 <__udivmoddi4+0x260>
 802056c:	46d0      	mov	r8, sl
 802056e:	e77b      	b.n	8020468 <__udivmoddi4+0x1b8>
 8020570:	3b02      	subs	r3, #2
 8020572:	4461      	add	r1, ip
 8020574:	e732      	b.n	80203dc <__udivmoddi4+0x12c>
 8020576:	4630      	mov	r0, r6
 8020578:	e709      	b.n	802038e <__udivmoddi4+0xde>
 802057a:	4464      	add	r4, ip
 802057c:	3802      	subs	r0, #2
 802057e:	e742      	b.n	8020406 <__udivmoddi4+0x156>

08020580 <__aeabi_idiv0>:
 8020580:	4770      	bx	lr
 8020582:	bf00      	nop

08020584 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8020584:	b480      	push	{r7}
 8020586:	b085      	sub	sp, #20
 8020588:	af00      	add	r7, sp, #0
 802058a:	60f8      	str	r0, [r7, #12]
 802058c:	60b9      	str	r1, [r7, #8]
 802058e:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8020590:	68fb      	ldr	r3, [r7, #12]
 8020592:	4a07      	ldr	r2, [pc, #28]	; (80205b0 <vApplicationGetIdleTaskMemory+0x2c>)
 8020594:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8020596:	68bb      	ldr	r3, [r7, #8]
 8020598:	4a06      	ldr	r2, [pc, #24]	; (80205b4 <vApplicationGetIdleTaskMemory+0x30>)
 802059a:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 802059c:	687b      	ldr	r3, [r7, #4]
 802059e:	2280      	movs	r2, #128	; 0x80
 80205a0:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 80205a2:	bf00      	nop
 80205a4:	3714      	adds	r7, #20
 80205a6:	46bd      	mov	sp, r7
 80205a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80205ac:	4770      	bx	lr
 80205ae:	bf00      	nop
 80205b0:	200000b4 	.word	0x200000b4
 80205b4:	20000168 	.word	0x20000168

080205b8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80205b8:	b5b0      	push	{r4, r5, r7, lr}
 80205ba:	b08e      	sub	sp, #56	; 0x38
 80205bc:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80205be:	f000 ff93 	bl	80214e8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80205c2:	f000 f833 	bl	802062c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80205c6:	f000 f8c3 	bl	8020750 <MX_GPIO_Init>
  MX_RTC_Init();
 80205ca:	f000 f89b 	bl	8020704 <MX_RTC_Init>
	/* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityAboveNormal, 0, 256);
 80205ce:	4b13      	ldr	r3, [pc, #76]	; (802061c <main+0x64>)
 80205d0:	f107 041c 	add.w	r4, r7, #28
 80205d4:	461d      	mov	r5, r3
 80205d6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80205d8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80205da:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80205de:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 80205e2:	f107 031c 	add.w	r3, r7, #28
 80205e6:	2100      	movs	r1, #0
 80205e8:	4618      	mov	r0, r3
 80205ea:	f004 fc59 	bl	8024ea0 <osThreadCreate>
 80205ee:	4603      	mov	r3, r0
 80205f0:	4a0b      	ldr	r2, [pc, #44]	; (8020620 <main+0x68>)
 80205f2:	6013      	str	r3, [r2, #0]

  /* definition and creation of tcpTask */
  osThreadDef(tcpTask, StartTCPTask, osPriorityNormal, 0, 512);
 80205f4:	4b0b      	ldr	r3, [pc, #44]	; (8020624 <main+0x6c>)
 80205f6:	463c      	mov	r4, r7
 80205f8:	461d      	mov	r5, r3
 80205fa:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80205fc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80205fe:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8020602:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  tcpTaskHandle = osThreadCreate(osThread(tcpTask), NULL);
 8020606:	463b      	mov	r3, r7
 8020608:	2100      	movs	r1, #0
 802060a:	4618      	mov	r0, r3
 802060c:	f004 fc48 	bl	8024ea0 <osThreadCreate>
 8020610:	4603      	mov	r3, r0
 8020612:	4a05      	ldr	r2, [pc, #20]	; (8020628 <main+0x70>)
 8020614:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_THREADS */

  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 8020616:	f004 fc2c 	bl	8024e72 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1) {
 802061a:	e7fe      	b.n	802061a <main+0x62>
 802061c:	08037398 	.word	0x08037398
 8020620:	20000388 	.word	0x20000388
 8020624:	080373b4 	.word	0x080373b4
 8020628:	2000038c 	.word	0x2000038c

0802062c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 802062c:	b580      	push	{r7, lr}
 802062e:	b094      	sub	sp, #80	; 0x50
 8020630:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8020632:	f107 0320 	add.w	r3, r7, #32
 8020636:	2230      	movs	r2, #48	; 0x30
 8020638:	2100      	movs	r1, #0
 802063a:	4618      	mov	r0, r3
 802063c:	f015 fcc4 	bl	8035fc8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8020640:	f107 030c 	add.w	r3, r7, #12
 8020644:	2200      	movs	r2, #0
 8020646:	601a      	str	r2, [r3, #0]
 8020648:	605a      	str	r2, [r3, #4]
 802064a:	609a      	str	r2, [r3, #8]
 802064c:	60da      	str	r2, [r3, #12]
 802064e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8020650:	2300      	movs	r3, #0
 8020652:	60bb      	str	r3, [r7, #8]
 8020654:	4b29      	ldr	r3, [pc, #164]	; (80206fc <SystemClock_Config+0xd0>)
 8020656:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8020658:	4a28      	ldr	r2, [pc, #160]	; (80206fc <SystemClock_Config+0xd0>)
 802065a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 802065e:	6413      	str	r3, [r2, #64]	; 0x40
 8020660:	4b26      	ldr	r3, [pc, #152]	; (80206fc <SystemClock_Config+0xd0>)
 8020662:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8020664:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8020668:	60bb      	str	r3, [r7, #8]
 802066a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 802066c:	2300      	movs	r3, #0
 802066e:	607b      	str	r3, [r7, #4]
 8020670:	4b23      	ldr	r3, [pc, #140]	; (8020700 <SystemClock_Config+0xd4>)
 8020672:	681b      	ldr	r3, [r3, #0]
 8020674:	4a22      	ldr	r2, [pc, #136]	; (8020700 <SystemClock_Config+0xd4>)
 8020676:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 802067a:	6013      	str	r3, [r2, #0]
 802067c:	4b20      	ldr	r3, [pc, #128]	; (8020700 <SystemClock_Config+0xd4>)
 802067e:	681b      	ldr	r3, [r3, #0]
 8020680:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8020684:	607b      	str	r3, [r7, #4]
 8020686:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI;
 8020688:	230a      	movs	r3, #10
 802068a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 802068c:	2301      	movs	r3, #1
 802068e:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8020690:	2310      	movs	r3, #16
 8020692:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8020694:	2301      	movs	r3, #1
 8020696:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8020698:	2302      	movs	r3, #2
 802069a:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 802069c:	2300      	movs	r3, #0
 802069e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80206a0:	2308      	movs	r3, #8
 80206a2:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 80206a4:	23a8      	movs	r3, #168	; 0xa8
 80206a6:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80206a8:	2302      	movs	r3, #2
 80206aa:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80206ac:	2304      	movs	r3, #4
 80206ae:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80206b0:	f107 0320 	add.w	r3, r7, #32
 80206b4:	4618      	mov	r0, r3
 80206b6:	f002 fca7 	bl	8023008 <HAL_RCC_OscConfig>
 80206ba:	4603      	mov	r3, r0
 80206bc:	2b00      	cmp	r3, #0
 80206be:	d001      	beq.n	80206c4 <SystemClock_Config+0x98>
  {
    Error_Handler();
 80206c0:	f000 f91e 	bl	8020900 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80206c4:	230f      	movs	r3, #15
 80206c6:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80206c8:	2302      	movs	r3, #2
 80206ca:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80206cc:	2300      	movs	r3, #0
 80206ce:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80206d0:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80206d4:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80206d6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80206da:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80206dc:	f107 030c 	add.w	r3, r7, #12
 80206e0:	2105      	movs	r1, #5
 80206e2:	4618      	mov	r0, r3
 80206e4:	f002 ff08 	bl	80234f8 <HAL_RCC_ClockConfig>
 80206e8:	4603      	mov	r3, r0
 80206ea:	2b00      	cmp	r3, #0
 80206ec:	d001      	beq.n	80206f2 <SystemClock_Config+0xc6>
  {
    Error_Handler();
 80206ee:	f000 f907 	bl	8020900 <Error_Handler>
  }
}
 80206f2:	bf00      	nop
 80206f4:	3750      	adds	r7, #80	; 0x50
 80206f6:	46bd      	mov	sp, r7
 80206f8:	bd80      	pop	{r7, pc}
 80206fa:	bf00      	nop
 80206fc:	40023800 	.word	0x40023800
 8020700:	40007000 	.word	0x40007000

08020704 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8020704:	b580      	push	{r7, lr}
 8020706:	af00      	add	r7, sp, #0

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8020708:	4b0f      	ldr	r3, [pc, #60]	; (8020748 <MX_RTC_Init+0x44>)
 802070a:	4a10      	ldr	r2, [pc, #64]	; (802074c <MX_RTC_Init+0x48>)
 802070c:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 802070e:	4b0e      	ldr	r3, [pc, #56]	; (8020748 <MX_RTC_Init+0x44>)
 8020710:	2200      	movs	r2, #0
 8020712:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8020714:	4b0c      	ldr	r3, [pc, #48]	; (8020748 <MX_RTC_Init+0x44>)
 8020716:	227f      	movs	r2, #127	; 0x7f
 8020718:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 802071a:	4b0b      	ldr	r3, [pc, #44]	; (8020748 <MX_RTC_Init+0x44>)
 802071c:	22ff      	movs	r2, #255	; 0xff
 802071e:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8020720:	4b09      	ldr	r3, [pc, #36]	; (8020748 <MX_RTC_Init+0x44>)
 8020722:	2200      	movs	r2, #0
 8020724:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8020726:	4b08      	ldr	r3, [pc, #32]	; (8020748 <MX_RTC_Init+0x44>)
 8020728:	2200      	movs	r2, #0
 802072a:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 802072c:	4b06      	ldr	r3, [pc, #24]	; (8020748 <MX_RTC_Init+0x44>)
 802072e:	2200      	movs	r2, #0
 8020730:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8020732:	4805      	ldr	r0, [pc, #20]	; (8020748 <MX_RTC_Init+0x44>)
 8020734:	f003 f9c0 	bl	8023ab8 <HAL_RTC_Init>
 8020738:	4603      	mov	r3, r0
 802073a:	2b00      	cmp	r3, #0
 802073c:	d001      	beq.n	8020742 <MX_RTC_Init+0x3e>
  {
    Error_Handler();
 802073e:	f000 f8df 	bl	8020900 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8020742:	bf00      	nop
 8020744:	bd80      	pop	{r7, pc}
 8020746:	bf00      	nop
 8020748:	20000368 	.word	0x20000368
 802074c:	40002800 	.word	0x40002800

08020750 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8020750:	b580      	push	{r7, lr}
 8020752:	b08a      	sub	sp, #40	; 0x28
 8020754:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8020756:	f107 0314 	add.w	r3, r7, #20
 802075a:	2200      	movs	r2, #0
 802075c:	601a      	str	r2, [r3, #0]
 802075e:	605a      	str	r2, [r3, #4]
 8020760:	609a      	str	r2, [r3, #8]
 8020762:	60da      	str	r2, [r3, #12]
 8020764:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8020766:	2300      	movs	r3, #0
 8020768:	613b      	str	r3, [r7, #16]
 802076a:	4b4a      	ldr	r3, [pc, #296]	; (8020894 <MX_GPIO_Init+0x144>)
 802076c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 802076e:	4a49      	ldr	r2, [pc, #292]	; (8020894 <MX_GPIO_Init+0x144>)
 8020770:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8020774:	6313      	str	r3, [r2, #48]	; 0x30
 8020776:	4b47      	ldr	r3, [pc, #284]	; (8020894 <MX_GPIO_Init+0x144>)
 8020778:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 802077a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 802077e:	613b      	str	r3, [r7, #16]
 8020780:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8020782:	2300      	movs	r3, #0
 8020784:	60fb      	str	r3, [r7, #12]
 8020786:	4b43      	ldr	r3, [pc, #268]	; (8020894 <MX_GPIO_Init+0x144>)
 8020788:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 802078a:	4a42      	ldr	r2, [pc, #264]	; (8020894 <MX_GPIO_Init+0x144>)
 802078c:	f043 0304 	orr.w	r3, r3, #4
 8020790:	6313      	str	r3, [r2, #48]	; 0x30
 8020792:	4b40      	ldr	r3, [pc, #256]	; (8020894 <MX_GPIO_Init+0x144>)
 8020794:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8020796:	f003 0304 	and.w	r3, r3, #4
 802079a:	60fb      	str	r3, [r7, #12]
 802079c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 802079e:	2300      	movs	r3, #0
 80207a0:	60bb      	str	r3, [r7, #8]
 80207a2:	4b3c      	ldr	r3, [pc, #240]	; (8020894 <MX_GPIO_Init+0x144>)
 80207a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80207a6:	4a3b      	ldr	r2, [pc, #236]	; (8020894 <MX_GPIO_Init+0x144>)
 80207a8:	f043 0301 	orr.w	r3, r3, #1
 80207ac:	6313      	str	r3, [r2, #48]	; 0x30
 80207ae:	4b39      	ldr	r3, [pc, #228]	; (8020894 <MX_GPIO_Init+0x144>)
 80207b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80207b2:	f003 0301 	and.w	r3, r3, #1
 80207b6:	60bb      	str	r3, [r7, #8]
 80207b8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80207ba:	2300      	movs	r3, #0
 80207bc:	607b      	str	r3, [r7, #4]
 80207be:	4b35      	ldr	r3, [pc, #212]	; (8020894 <MX_GPIO_Init+0x144>)
 80207c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80207c2:	4a34      	ldr	r2, [pc, #208]	; (8020894 <MX_GPIO_Init+0x144>)
 80207c4:	f043 0302 	orr.w	r3, r3, #2
 80207c8:	6313      	str	r3, [r2, #48]	; 0x30
 80207ca:	4b32      	ldr	r3, [pc, #200]	; (8020894 <MX_GPIO_Init+0x144>)
 80207cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80207ce:	f003 0302 	and.w	r3, r3, #2
 80207d2:	607b      	str	r3, [r7, #4]
 80207d4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80207d6:	2300      	movs	r3, #0
 80207d8:	603b      	str	r3, [r7, #0]
 80207da:	4b2e      	ldr	r3, [pc, #184]	; (8020894 <MX_GPIO_Init+0x144>)
 80207dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80207de:	4a2d      	ldr	r2, [pc, #180]	; (8020894 <MX_GPIO_Init+0x144>)
 80207e0:	f043 0308 	orr.w	r3, r3, #8
 80207e4:	6313      	str	r3, [r2, #48]	; 0x30
 80207e6:	4b2b      	ldr	r3, [pc, #172]	; (8020894 <MX_GPIO_Init+0x144>)
 80207e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80207ea:	f003 0308 	and.w	r3, r3, #8
 80207ee:	603b      	str	r3, [r7, #0]
 80207f0:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED3_GPIO_Port, LED3_Pin, GPIO_PIN_RESET);
 80207f2:	2200      	movs	r2, #0
 80207f4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80207f8:	4827      	ldr	r0, [pc, #156]	; (8020898 <MX_GPIO_Init+0x148>)
 80207fa:	f002 fba9 	bl	8022f50 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, LED2_Pin|LED1_Pin|LED0_Pin, GPIO_PIN_RESET);
 80207fe:	2200      	movs	r2, #0
 8020800:	f44f 71e0 	mov.w	r1, #448	; 0x1c0
 8020804:	4825      	ldr	r0, [pc, #148]	; (802089c <MX_GPIO_Init+0x14c>)
 8020806:	f002 fba3 	bl	8022f50 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(BOOT_CHARGE_GPIO_Port, BOOT_CHARGE_Pin, GPIO_PIN_RESET);
 802080a:	2200      	movs	r2, #0
 802080c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8020810:	4823      	ldr	r0, [pc, #140]	; (80208a0 <MX_GPIO_Init+0x150>)
 8020812:	f002 fb9d 	bl	8022f50 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED3_Pin */
  GPIO_InitStruct.Pin = LED3_Pin;
 8020816:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 802081a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 802081c:	2301      	movs	r3, #1
 802081e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8020820:	2300      	movs	r3, #0
 8020822:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8020824:	2300      	movs	r3, #0
 8020826:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LED3_GPIO_Port, &GPIO_InitStruct);
 8020828:	f107 0314 	add.w	r3, r7, #20
 802082c:	4619      	mov	r1, r3
 802082e:	481a      	ldr	r0, [pc, #104]	; (8020898 <MX_GPIO_Init+0x148>)
 8020830:	f002 f9f2 	bl	8022c18 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED2_Pin LED1_Pin LED0_Pin */
  GPIO_InitStruct.Pin = LED2_Pin|LED1_Pin|LED0_Pin;
 8020834:	f44f 73e0 	mov.w	r3, #448	; 0x1c0
 8020838:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 802083a:	2301      	movs	r3, #1
 802083c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 802083e:	2300      	movs	r3, #0
 8020840:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8020842:	2300      	movs	r3, #0
 8020844:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8020846:	f107 0314 	add.w	r3, r7, #20
 802084a:	4619      	mov	r1, r3
 802084c:	4813      	ldr	r0, [pc, #76]	; (802089c <MX_GPIO_Init+0x14c>)
 802084e:	f002 f9e3 	bl	8022c18 <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT_CHARGE_Pin */
  GPIO_InitStruct.Pin = BOOT_CHARGE_Pin;
 8020852:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8020856:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8020858:	2301      	movs	r3, #1
 802085a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 802085c:	2300      	movs	r3, #0
 802085e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8020860:	2300      	movs	r3, #0
 8020862:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(BOOT_CHARGE_GPIO_Port, &GPIO_InitStruct);
 8020864:	f107 0314 	add.w	r3, r7, #20
 8020868:	4619      	mov	r1, r3
 802086a:	480d      	ldr	r0, [pc, #52]	; (80208a0 <MX_GPIO_Init+0x150>)
 802086c:	f002 f9d4 	bl	8022c18 <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT_READ_Pin */
  GPIO_InitStruct.Pin = BOOT_READ_Pin;
 8020870:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8020874:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8020876:	2300      	movs	r3, #0
 8020878:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 802087a:	2300      	movs	r3, #0
 802087c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(BOOT_READ_GPIO_Port, &GPIO_InitStruct);
 802087e:	f107 0314 	add.w	r3, r7, #20
 8020882:	4619      	mov	r1, r3
 8020884:	4806      	ldr	r0, [pc, #24]	; (80208a0 <MX_GPIO_Init+0x150>)
 8020886:	f002 f9c7 	bl	8022c18 <HAL_GPIO_Init>

}
 802088a:	bf00      	nop
 802088c:	3728      	adds	r7, #40	; 0x28
 802088e:	46bd      	mov	sp, r7
 8020890:	bd80      	pop	{r7, pc}
 8020892:	bf00      	nop
 8020894:	40023800 	.word	0x40023800
 8020898:	40020c00 	.word	0x40020c00
 802089c:	40020800 	.word	0x40020800
 80208a0:	40020000 	.word	0x40020000

080208a4 <StartDefaultTask>:
 * @param  argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 80208a4:	b580      	push	{r7, lr}
 80208a6:	b082      	sub	sp, #8
 80208a8:	af00      	add	r7, sp, #0
 80208aa:	6078      	str	r0, [r7, #4]
  /* init code for LWIP */
  MX_LWIP_Init();
 80208ac:	f003 fcc6 	bl	802423c <MX_LWIP_Init>
	for (;;) {
		/*
		 *  Heartbeat LED0
		 */
		//osDelay(1);
		HAL_GPIO_TogglePin(LED0_GPIO_Port, LED0_Pin);
 80208b0:	f44f 7180 	mov.w	r1, #256	; 0x100
 80208b4:	4803      	ldr	r0, [pc, #12]	; (80208c4 <StartDefaultTask+0x20>)
 80208b6:	f002 fb64 	bl	8022f82 <HAL_GPIO_TogglePin>
		osDelay(500);
 80208ba:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80208be:	f004 fb3b 	bl	8024f38 <osDelay>
		HAL_GPIO_TogglePin(LED0_GPIO_Port, LED0_Pin);
 80208c2:	e7f5      	b.n	80208b0 <StartDefaultTask+0xc>
 80208c4:	40020800 	.word	0x40020800

080208c8 <StartTCPTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTCPTask */
void StartTCPTask(void const * argument)
{
 80208c8:	b580      	push	{r7, lr}
 80208ca:	b082      	sub	sp, #8
 80208cc:	af00      	add	r7, sp, #0
 80208ce:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTCPTask */

	server_init();
 80208d0:	f000 facc 	bl	8020e6c <server_init>

  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 80208d4:	2001      	movs	r0, #1
 80208d6:	f004 fb2f 	bl	8024f38 <osDelay>
 80208da:	e7fb      	b.n	80208d4 <StartTCPTask+0xc>

080208dc <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80208dc:	b580      	push	{r7, lr}
 80208de:	b082      	sub	sp, #8
 80208e0:	af00      	add	r7, sp, #0
 80208e2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 80208e4:	687b      	ldr	r3, [r7, #4]
 80208e6:	681b      	ldr	r3, [r3, #0]
 80208e8:	4a04      	ldr	r2, [pc, #16]	; (80208fc <HAL_TIM_PeriodElapsedCallback+0x20>)
 80208ea:	4293      	cmp	r3, r2
 80208ec:	d101      	bne.n	80208f2 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80208ee:	f000 fe1d 	bl	802152c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80208f2:	bf00      	nop
 80208f4:	3708      	adds	r7, #8
 80208f6:	46bd      	mov	sp, r7
 80208f8:	bd80      	pop	{r7, pc}
 80208fa:	bf00      	nop
 80208fc:	40001000 	.word	0x40001000

08020900 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8020900:	b480      	push	{r7}
 8020902:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8020904:	b672      	cpsid	i
}
 8020906:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8020908:	e7fe      	b.n	8020908 <Error_Handler+0x8>
	...

0802090c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 802090c:	b580      	push	{r7, lr}
 802090e:	b082      	sub	sp, #8
 8020910:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8020912:	2300      	movs	r3, #0
 8020914:	607b      	str	r3, [r7, #4]
 8020916:	4b12      	ldr	r3, [pc, #72]	; (8020960 <HAL_MspInit+0x54>)
 8020918:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 802091a:	4a11      	ldr	r2, [pc, #68]	; (8020960 <HAL_MspInit+0x54>)
 802091c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8020920:	6453      	str	r3, [r2, #68]	; 0x44
 8020922:	4b0f      	ldr	r3, [pc, #60]	; (8020960 <HAL_MspInit+0x54>)
 8020924:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8020926:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 802092a:	607b      	str	r3, [r7, #4]
 802092c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 802092e:	2300      	movs	r3, #0
 8020930:	603b      	str	r3, [r7, #0]
 8020932:	4b0b      	ldr	r3, [pc, #44]	; (8020960 <HAL_MspInit+0x54>)
 8020934:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8020936:	4a0a      	ldr	r2, [pc, #40]	; (8020960 <HAL_MspInit+0x54>)
 8020938:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 802093c:	6413      	str	r3, [r2, #64]	; 0x40
 802093e:	4b08      	ldr	r3, [pc, #32]	; (8020960 <HAL_MspInit+0x54>)
 8020940:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8020942:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8020946:	603b      	str	r3, [r7, #0]
 8020948:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 802094a:	2200      	movs	r2, #0
 802094c:	210f      	movs	r1, #15
 802094e:	f06f 0001 	mvn.w	r0, #1
 8020952:	f000 fee7 	bl	8021724 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8020956:	bf00      	nop
 8020958:	3708      	adds	r7, #8
 802095a:	46bd      	mov	sp, r7
 802095c:	bd80      	pop	{r7, pc}
 802095e:	bf00      	nop
 8020960:	40023800 	.word	0x40023800

08020964 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8020964:	b580      	push	{r7, lr}
 8020966:	b086      	sub	sp, #24
 8020968:	af00      	add	r7, sp, #0
 802096a:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 802096c:	f107 0308 	add.w	r3, r7, #8
 8020970:	2200      	movs	r2, #0
 8020972:	601a      	str	r2, [r3, #0]
 8020974:	605a      	str	r2, [r3, #4]
 8020976:	609a      	str	r2, [r3, #8]
 8020978:	60da      	str	r2, [r3, #12]
  if(hrtc->Instance==RTC)
 802097a:	687b      	ldr	r3, [r7, #4]
 802097c:	681b      	ldr	r3, [r3, #0]
 802097e:	4a0c      	ldr	r2, [pc, #48]	; (80209b0 <HAL_RTC_MspInit+0x4c>)
 8020980:	4293      	cmp	r3, r2
 8020982:	d111      	bne.n	80209a8 <HAL_RTC_MspInit+0x44>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8020984:	2302      	movs	r3, #2
 8020986:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8020988:	f44f 7300 	mov.w	r3, #512	; 0x200
 802098c:	617b      	str	r3, [r7, #20]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 802098e:	f107 0308 	add.w	r3, r7, #8
 8020992:	4618      	mov	r0, r3
 8020994:	f002 ffae 	bl	80238f4 <HAL_RCCEx_PeriphCLKConfig>
 8020998:	4603      	mov	r3, r0
 802099a:	2b00      	cmp	r3, #0
 802099c:	d001      	beq.n	80209a2 <HAL_RTC_MspInit+0x3e>
    {
      Error_Handler();
 802099e:	f7ff ffaf 	bl	8020900 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 80209a2:	4b04      	ldr	r3, [pc, #16]	; (80209b4 <HAL_RTC_MspInit+0x50>)
 80209a4:	2201      	movs	r2, #1
 80209a6:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 80209a8:	bf00      	nop
 80209aa:	3718      	adds	r7, #24
 80209ac:	46bd      	mov	sp, r7
 80209ae:	bd80      	pop	{r7, pc}
 80209b0:	40002800 	.word	0x40002800
 80209b4:	42470e3c 	.word	0x42470e3c

080209b8 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80209b8:	b580      	push	{r7, lr}
 80209ba:	b08e      	sub	sp, #56	; 0x38
 80209bc:	af00      	add	r7, sp, #0
 80209be:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 80209c0:	2300      	movs	r3, #0
 80209c2:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 80209c4:	2300      	movs	r3, #0
 80209c6:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 80209c8:	2300      	movs	r3, #0
 80209ca:	60fb      	str	r3, [r7, #12]
 80209cc:	4b33      	ldr	r3, [pc, #204]	; (8020a9c <HAL_InitTick+0xe4>)
 80209ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80209d0:	4a32      	ldr	r2, [pc, #200]	; (8020a9c <HAL_InitTick+0xe4>)
 80209d2:	f043 0310 	orr.w	r3, r3, #16
 80209d6:	6413      	str	r3, [r2, #64]	; 0x40
 80209d8:	4b30      	ldr	r3, [pc, #192]	; (8020a9c <HAL_InitTick+0xe4>)
 80209da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80209dc:	f003 0310 	and.w	r3, r3, #16
 80209e0:	60fb      	str	r3, [r7, #12]
 80209e2:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80209e4:	f107 0210 	add.w	r2, r7, #16
 80209e8:	f107 0314 	add.w	r3, r7, #20
 80209ec:	4611      	mov	r1, r2
 80209ee:	4618      	mov	r0, r3
 80209f0:	f002 ff4e 	bl	8023890 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 80209f4:	6a3b      	ldr	r3, [r7, #32]
 80209f6:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 80209f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80209fa:	2b00      	cmp	r3, #0
 80209fc:	d103      	bne.n	8020a06 <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 80209fe:	f002 ff33 	bl	8023868 <HAL_RCC_GetPCLK1Freq>
 8020a02:	6378      	str	r0, [r7, #52]	; 0x34
 8020a04:	e004      	b.n	8020a10 <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8020a06:	f002 ff2f 	bl	8023868 <HAL_RCC_GetPCLK1Freq>
 8020a0a:	4603      	mov	r3, r0
 8020a0c:	005b      	lsls	r3, r3, #1
 8020a0e:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8020a10:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8020a12:	4a23      	ldr	r2, [pc, #140]	; (8020aa0 <HAL_InitTick+0xe8>)
 8020a14:	fba2 2303 	umull	r2, r3, r2, r3
 8020a18:	0c9b      	lsrs	r3, r3, #18
 8020a1a:	3b01      	subs	r3, #1
 8020a1c:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8020a1e:	4b21      	ldr	r3, [pc, #132]	; (8020aa4 <HAL_InitTick+0xec>)
 8020a20:	4a21      	ldr	r2, [pc, #132]	; (8020aa8 <HAL_InitTick+0xf0>)
 8020a22:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8020a24:	4b1f      	ldr	r3, [pc, #124]	; (8020aa4 <HAL_InitTick+0xec>)
 8020a26:	f240 32e7 	movw	r2, #999	; 0x3e7
 8020a2a:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8020a2c:	4a1d      	ldr	r2, [pc, #116]	; (8020aa4 <HAL_InitTick+0xec>)
 8020a2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8020a30:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8020a32:	4b1c      	ldr	r3, [pc, #112]	; (8020aa4 <HAL_InitTick+0xec>)
 8020a34:	2200      	movs	r2, #0
 8020a36:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8020a38:	4b1a      	ldr	r3, [pc, #104]	; (8020aa4 <HAL_InitTick+0xec>)
 8020a3a:	2200      	movs	r2, #0
 8020a3c:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8020a3e:	4b19      	ldr	r3, [pc, #100]	; (8020aa4 <HAL_InitTick+0xec>)
 8020a40:	2200      	movs	r2, #0
 8020a42:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 8020a44:	4817      	ldr	r0, [pc, #92]	; (8020aa4 <HAL_InitTick+0xec>)
 8020a46:	f003 f94b 	bl	8023ce0 <HAL_TIM_Base_Init>
 8020a4a:	4603      	mov	r3, r0
 8020a4c:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 8020a50:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8020a54:	2b00      	cmp	r3, #0
 8020a56:	d11b      	bne.n	8020a90 <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8020a58:	4812      	ldr	r0, [pc, #72]	; (8020aa4 <HAL_InitTick+0xec>)
 8020a5a:	f003 f99b 	bl	8023d94 <HAL_TIM_Base_Start_IT>
 8020a5e:	4603      	mov	r3, r0
 8020a60:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 8020a64:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8020a68:	2b00      	cmp	r3, #0
 8020a6a:	d111      	bne.n	8020a90 <HAL_InitTick+0xd8>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8020a6c:	2036      	movs	r0, #54	; 0x36
 8020a6e:	f000 fe75 	bl	802175c <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8020a72:	687b      	ldr	r3, [r7, #4]
 8020a74:	2b0f      	cmp	r3, #15
 8020a76:	d808      	bhi.n	8020a8a <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 8020a78:	2200      	movs	r2, #0
 8020a7a:	6879      	ldr	r1, [r7, #4]
 8020a7c:	2036      	movs	r0, #54	; 0x36
 8020a7e:	f000 fe51 	bl	8021724 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8020a82:	4a0a      	ldr	r2, [pc, #40]	; (8020aac <HAL_InitTick+0xf4>)
 8020a84:	687b      	ldr	r3, [r7, #4]
 8020a86:	6013      	str	r3, [r2, #0]
 8020a88:	e002      	b.n	8020a90 <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 8020a8a:	2301      	movs	r3, #1
 8020a8c:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8020a90:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 8020a94:	4618      	mov	r0, r3
 8020a96:	3738      	adds	r7, #56	; 0x38
 8020a98:	46bd      	mov	sp, r7
 8020a9a:	bd80      	pop	{r7, pc}
 8020a9c:	40023800 	.word	0x40023800
 8020aa0:	431bde83 	.word	0x431bde83
 8020aa4:	20000390 	.word	0x20000390
 8020aa8:	40001000 	.word	0x40001000
 8020aac:	20000008 	.word	0x20000008

08020ab0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8020ab0:	b480      	push	{r7}
 8020ab2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8020ab4:	e7fe      	b.n	8020ab4 <NMI_Handler+0x4>

08020ab6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8020ab6:	b480      	push	{r7}
 8020ab8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8020aba:	e7fe      	b.n	8020aba <HardFault_Handler+0x4>

08020abc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8020abc:	b480      	push	{r7}
 8020abe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8020ac0:	e7fe      	b.n	8020ac0 <MemManage_Handler+0x4>

08020ac2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8020ac2:	b480      	push	{r7}
 8020ac4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8020ac6:	e7fe      	b.n	8020ac6 <BusFault_Handler+0x4>

08020ac8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8020ac8:	b480      	push	{r7}
 8020aca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8020acc:	e7fe      	b.n	8020acc <UsageFault_Handler+0x4>

08020ace <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8020ace:	b480      	push	{r7}
 8020ad0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8020ad2:	bf00      	nop
 8020ad4:	46bd      	mov	sp, r7
 8020ad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020ada:	4770      	bx	lr

08020adc <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8020adc:	b580      	push	{r7, lr}
 8020ade:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8020ae0:	4802      	ldr	r0, [pc, #8]	; (8020aec <TIM6_DAC_IRQHandler+0x10>)
 8020ae2:	f003 f9c7 	bl	8023e74 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8020ae6:	bf00      	nop
 8020ae8:	bd80      	pop	{r7, pc}
 8020aea:	bf00      	nop
 8020aec:	20000390 	.word	0x20000390

08020af0 <ETH_IRQHandler>:

/**
  * @brief This function handles Ethernet global interrupt.
  */
void ETH_IRQHandler(void)
{
 8020af0:	b580      	push	{r7, lr}
 8020af2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ETH_IRQn 0 */

  /* USER CODE END ETH_IRQn 0 */
  HAL_ETH_IRQHandler(&heth);
 8020af4:	4802      	ldr	r0, [pc, #8]	; (8020b00 <ETH_IRQHandler+0x10>)
 8020af6:	f001 f9b9 	bl	8021e6c <HAL_ETH_IRQHandler>
  /* USER CODE BEGIN ETH_IRQn 1 */

  /* USER CODE END ETH_IRQn 1 */
}
 8020afa:	bf00      	nop
 8020afc:	bd80      	pop	{r7, pc}
 8020afe:	bf00      	nop
 8020b00:	20004f2c 	.word	0x20004f2c

08020b04 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8020b04:	b480      	push	{r7}
 8020b06:	af00      	add	r7, sp, #0
  return 1;
 8020b08:	2301      	movs	r3, #1
}
 8020b0a:	4618      	mov	r0, r3
 8020b0c:	46bd      	mov	sp, r7
 8020b0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020b12:	4770      	bx	lr

08020b14 <_kill>:

int _kill(int pid, int sig)
{
 8020b14:	b480      	push	{r7}
 8020b16:	b083      	sub	sp, #12
 8020b18:	af00      	add	r7, sp, #0
 8020b1a:	6078      	str	r0, [r7, #4]
 8020b1c:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8020b1e:	4b05      	ldr	r3, [pc, #20]	; (8020b34 <_kill+0x20>)
 8020b20:	2216      	movs	r2, #22
 8020b22:	601a      	str	r2, [r3, #0]
  return -1;
 8020b24:	f04f 33ff 	mov.w	r3, #4294967295
}
 8020b28:	4618      	mov	r0, r3
 8020b2a:	370c      	adds	r7, #12
 8020b2c:	46bd      	mov	sp, r7
 8020b2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020b32:	4770      	bx	lr
 8020b34:	2000ef78 	.word	0x2000ef78

08020b38 <_exit>:

void _exit (int status)
{
 8020b38:	b580      	push	{r7, lr}
 8020b3a:	b082      	sub	sp, #8
 8020b3c:	af00      	add	r7, sp, #0
 8020b3e:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8020b40:	f04f 31ff 	mov.w	r1, #4294967295
 8020b44:	6878      	ldr	r0, [r7, #4]
 8020b46:	f7ff ffe5 	bl	8020b14 <_kill>
  while (1) {}    /* Make sure we hang here */
 8020b4a:	e7fe      	b.n	8020b4a <_exit+0x12>

08020b4c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8020b4c:	b580      	push	{r7, lr}
 8020b4e:	b086      	sub	sp, #24
 8020b50:	af00      	add	r7, sp, #0
 8020b52:	60f8      	str	r0, [r7, #12]
 8020b54:	60b9      	str	r1, [r7, #8]
 8020b56:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8020b58:	2300      	movs	r3, #0
 8020b5a:	617b      	str	r3, [r7, #20]
 8020b5c:	e00a      	b.n	8020b74 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8020b5e:	f3af 8000 	nop.w
 8020b62:	4601      	mov	r1, r0
 8020b64:	68bb      	ldr	r3, [r7, #8]
 8020b66:	1c5a      	adds	r2, r3, #1
 8020b68:	60ba      	str	r2, [r7, #8]
 8020b6a:	b2ca      	uxtb	r2, r1
 8020b6c:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8020b6e:	697b      	ldr	r3, [r7, #20]
 8020b70:	3301      	adds	r3, #1
 8020b72:	617b      	str	r3, [r7, #20]
 8020b74:	697a      	ldr	r2, [r7, #20]
 8020b76:	687b      	ldr	r3, [r7, #4]
 8020b78:	429a      	cmp	r2, r3
 8020b7a:	dbf0      	blt.n	8020b5e <_read+0x12>
  }

  return len;
 8020b7c:	687b      	ldr	r3, [r7, #4]
}
 8020b7e:	4618      	mov	r0, r3
 8020b80:	3718      	adds	r7, #24
 8020b82:	46bd      	mov	sp, r7
 8020b84:	bd80      	pop	{r7, pc}

08020b86 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8020b86:	b580      	push	{r7, lr}
 8020b88:	b086      	sub	sp, #24
 8020b8a:	af00      	add	r7, sp, #0
 8020b8c:	60f8      	str	r0, [r7, #12]
 8020b8e:	60b9      	str	r1, [r7, #8]
 8020b90:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8020b92:	2300      	movs	r3, #0
 8020b94:	617b      	str	r3, [r7, #20]
 8020b96:	e009      	b.n	8020bac <_write+0x26>
  {
    __io_putchar(*ptr++);
 8020b98:	68bb      	ldr	r3, [r7, #8]
 8020b9a:	1c5a      	adds	r2, r3, #1
 8020b9c:	60ba      	str	r2, [r7, #8]
 8020b9e:	781b      	ldrb	r3, [r3, #0]
 8020ba0:	4618      	mov	r0, r3
 8020ba2:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8020ba6:	697b      	ldr	r3, [r7, #20]
 8020ba8:	3301      	adds	r3, #1
 8020baa:	617b      	str	r3, [r7, #20]
 8020bac:	697a      	ldr	r2, [r7, #20]
 8020bae:	687b      	ldr	r3, [r7, #4]
 8020bb0:	429a      	cmp	r2, r3
 8020bb2:	dbf1      	blt.n	8020b98 <_write+0x12>
  }
  return len;
 8020bb4:	687b      	ldr	r3, [r7, #4]
}
 8020bb6:	4618      	mov	r0, r3
 8020bb8:	3718      	adds	r7, #24
 8020bba:	46bd      	mov	sp, r7
 8020bbc:	bd80      	pop	{r7, pc}

08020bbe <_close>:

int _close(int file)
{
 8020bbe:	b480      	push	{r7}
 8020bc0:	b083      	sub	sp, #12
 8020bc2:	af00      	add	r7, sp, #0
 8020bc4:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8020bc6:	f04f 33ff 	mov.w	r3, #4294967295
}
 8020bca:	4618      	mov	r0, r3
 8020bcc:	370c      	adds	r7, #12
 8020bce:	46bd      	mov	sp, r7
 8020bd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020bd4:	4770      	bx	lr

08020bd6 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8020bd6:	b480      	push	{r7}
 8020bd8:	b083      	sub	sp, #12
 8020bda:	af00      	add	r7, sp, #0
 8020bdc:	6078      	str	r0, [r7, #4]
 8020bde:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8020be0:	683b      	ldr	r3, [r7, #0]
 8020be2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8020be6:	605a      	str	r2, [r3, #4]
  return 0;
 8020be8:	2300      	movs	r3, #0
}
 8020bea:	4618      	mov	r0, r3
 8020bec:	370c      	adds	r7, #12
 8020bee:	46bd      	mov	sp, r7
 8020bf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020bf4:	4770      	bx	lr

08020bf6 <_isatty>:

int _isatty(int file)
{
 8020bf6:	b480      	push	{r7}
 8020bf8:	b083      	sub	sp, #12
 8020bfa:	af00      	add	r7, sp, #0
 8020bfc:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8020bfe:	2301      	movs	r3, #1
}
 8020c00:	4618      	mov	r0, r3
 8020c02:	370c      	adds	r7, #12
 8020c04:	46bd      	mov	sp, r7
 8020c06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020c0a:	4770      	bx	lr

08020c0c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8020c0c:	b480      	push	{r7}
 8020c0e:	b085      	sub	sp, #20
 8020c10:	af00      	add	r7, sp, #0
 8020c12:	60f8      	str	r0, [r7, #12]
 8020c14:	60b9      	str	r1, [r7, #8]
 8020c16:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8020c18:	2300      	movs	r3, #0
}
 8020c1a:	4618      	mov	r0, r3
 8020c1c:	3714      	adds	r7, #20
 8020c1e:	46bd      	mov	sp, r7
 8020c20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020c24:	4770      	bx	lr
	...

08020c28 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8020c28:	b480      	push	{r7}
 8020c2a:	b087      	sub	sp, #28
 8020c2c:	af00      	add	r7, sp, #0
 8020c2e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8020c30:	4a14      	ldr	r2, [pc, #80]	; (8020c84 <_sbrk+0x5c>)
 8020c32:	4b15      	ldr	r3, [pc, #84]	; (8020c88 <_sbrk+0x60>)
 8020c34:	1ad3      	subs	r3, r2, r3
 8020c36:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8020c38:	697b      	ldr	r3, [r7, #20]
 8020c3a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8020c3c:	4b13      	ldr	r3, [pc, #76]	; (8020c8c <_sbrk+0x64>)
 8020c3e:	681b      	ldr	r3, [r3, #0]
 8020c40:	2b00      	cmp	r3, #0
 8020c42:	d102      	bne.n	8020c4a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8020c44:	4b11      	ldr	r3, [pc, #68]	; (8020c8c <_sbrk+0x64>)
 8020c46:	4a12      	ldr	r2, [pc, #72]	; (8020c90 <_sbrk+0x68>)
 8020c48:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8020c4a:	4b10      	ldr	r3, [pc, #64]	; (8020c8c <_sbrk+0x64>)
 8020c4c:	681a      	ldr	r2, [r3, #0]
 8020c4e:	687b      	ldr	r3, [r7, #4]
 8020c50:	4413      	add	r3, r2
 8020c52:	693a      	ldr	r2, [r7, #16]
 8020c54:	429a      	cmp	r2, r3
 8020c56:	d205      	bcs.n	8020c64 <_sbrk+0x3c>
  {
    errno = ENOMEM;
 8020c58:	4b0e      	ldr	r3, [pc, #56]	; (8020c94 <_sbrk+0x6c>)
 8020c5a:	220c      	movs	r2, #12
 8020c5c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8020c5e:	f04f 33ff 	mov.w	r3, #4294967295
 8020c62:	e009      	b.n	8020c78 <_sbrk+0x50>
  }

  prev_heap_end = __sbrk_heap_end;
 8020c64:	4b09      	ldr	r3, [pc, #36]	; (8020c8c <_sbrk+0x64>)
 8020c66:	681b      	ldr	r3, [r3, #0]
 8020c68:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8020c6a:	4b08      	ldr	r3, [pc, #32]	; (8020c8c <_sbrk+0x64>)
 8020c6c:	681a      	ldr	r2, [r3, #0]
 8020c6e:	687b      	ldr	r3, [r7, #4]
 8020c70:	4413      	add	r3, r2
 8020c72:	4a06      	ldr	r2, [pc, #24]	; (8020c8c <_sbrk+0x64>)
 8020c74:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8020c76:	68fb      	ldr	r3, [r7, #12]
}
 8020c78:	4618      	mov	r0, r3
 8020c7a:	371c      	adds	r7, #28
 8020c7c:	46bd      	mov	sp, r7
 8020c7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020c82:	4770      	bx	lr
 8020c84:	20020000 	.word	0x20020000
 8020c88:	00000400 	.word	0x00000400
 8020c8c:	200003d8 	.word	0x200003d8
 8020c90:	2000ef80 	.word	0x2000ef80
 8020c94:	2000ef78 	.word	0x2000ef78

08020c98 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8020c98:	b480      	push	{r7}
 8020c9a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8020c9c:	4b07      	ldr	r3, [pc, #28]	; (8020cbc <SystemInit+0x24>)
 8020c9e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8020ca2:	4a06      	ldr	r2, [pc, #24]	; (8020cbc <SystemInit+0x24>)
 8020ca4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8020ca8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  SystemInit_ExtMemCtl(); 
#endif /* DATA_IN_ExtSRAM || DATA_IN_ExtSDRAM */

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
 8020cac:	4b03      	ldr	r3, [pc, #12]	; (8020cbc <SystemInit+0x24>)
 8020cae:	4a04      	ldr	r2, [pc, #16]	; (8020cc0 <SystemInit+0x28>)
 8020cb0:	609a      	str	r2, [r3, #8]
#endif /* USER_VECT_TAB_ADDRESS */
}
 8020cb2:	bf00      	nop
 8020cb4:	46bd      	mov	sp, r7
 8020cb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020cba:	4770      	bx	lr
 8020cbc:	e000ed00 	.word	0xe000ed00
 8020cc0:	08020000 	.word	0x08020000

08020cc4 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 8020cc4:	b480      	push	{r7}
 8020cc6:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8020cc8:	f3bf 8f4f 	dsb	sy
}
 8020ccc:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8020cce:	4b06      	ldr	r3, [pc, #24]	; (8020ce8 <__NVIC_SystemReset+0x24>)
 8020cd0:	68db      	ldr	r3, [r3, #12]
 8020cd2:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8020cd6:	4904      	ldr	r1, [pc, #16]	; (8020ce8 <__NVIC_SystemReset+0x24>)
 8020cd8:	4b04      	ldr	r3, [pc, #16]	; (8020cec <__NVIC_SystemReset+0x28>)
 8020cda:	4313      	orrs	r3, r2
 8020cdc:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 8020cde:	f3bf 8f4f 	dsb	sy
}
 8020ce2:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 8020ce4:	bf00      	nop
 8020ce6:	e7fd      	b.n	8020ce4 <__NVIC_SystemReset+0x20>
 8020ce8:	e000ed00 	.word	0xe000ed00
 8020cec:	05fa0004 	.word	0x05fa0004

08020cf0 <devparse>:

extern RTC_HandleTypeDef hrtc;

#ifndef DEVPARSE
#define DEVPARSE
parse_t devparse(char *data, u16_t len, char *response, u16_t *ret_len, struct netconn* newconn) {
 8020cf0:	b580      	push	{r7, lr}
 8020cf2:	b088      	sub	sp, #32
 8020cf4:	af02      	add	r7, sp, #8
 8020cf6:	60f8      	str	r0, [r7, #12]
 8020cf8:	607a      	str	r2, [r7, #4]
 8020cfa:	603b      	str	r3, [r7, #0]
 8020cfc:	460b      	mov	r3, r1
 8020cfe:	817b      	strh	r3, [r7, #10]
	 *  	6 bits: opcode
	 */

	char* str;

	if (len > 0) {
 8020d00:	897b      	ldrh	r3, [r7, #10]
 8020d02:	2b00      	cmp	r3, #0
 8020d04:	f000 809e 	beq.w	8020e44 <devparse+0x154>

		u8_t opcode = (*data );//>> 2); // get opcode from first 6 bits
 8020d08:	68fb      	ldr	r3, [r7, #12]
 8020d0a:	781b      	ldrb	r3, [r3, #0]
 8020d0c:	75fb      	strb	r3, [r7, #23]

		switch (opcode) {
 8020d0e:	7dfb      	ldrb	r3, [r7, #23]
 8020d10:	3b41      	subs	r3, #65	; 0x41
 8020d12:	2b11      	cmp	r3, #17
 8020d14:	f200 8086 	bhi.w	8020e24 <devparse+0x134>
 8020d18:	a201      	add	r2, pc, #4	; (adr r2, 8020d20 <devparse+0x30>)
 8020d1a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8020d1e:	bf00      	nop
 8020d20:	08020d69 	.word	0x08020d69
 8020d24:	08020e25 	.word	0x08020e25
 8020d28:	08020e25 	.word	0x08020e25
 8020d2c:	08020e25 	.word	0x08020e25
 8020d30:	08020e25 	.word	0x08020e25
 8020d34:	08020e25 	.word	0x08020e25
 8020d38:	08020e05 	.word	0x08020e05
 8020d3c:	08020e25 	.word	0x08020e25
 8020d40:	08020d8d 	.word	0x08020d8d
 8020d44:	08020e25 	.word	0x08020e25
 8020d48:	08020e25 	.word	0x08020e25
 8020d4c:	08020e25 	.word	0x08020e25
 8020d50:	08020e25 	.word	0x08020e25
 8020d54:	08020e25 	.word	0x08020e25
 8020d58:	08020e25 	.word	0x08020e25
 8020d5c:	08020e25 	.word	0x08020e25
 8020d60:	08020e25 	.word	0x08020e25
 8020d64:	08020dd3 	.word	0x08020dd3
		case 'A':
			HAL_GPIO_TogglePin(LED1_GPIO_Port, LED1_Pin); // Toggle LED1
 8020d68:	2180      	movs	r1, #128	; 0x80
 8020d6a:	4839      	ldr	r0, [pc, #228]	; (8020e50 <devparse+0x160>)
 8020d6c:	f002 f909 	bl	8022f82 <HAL_GPIO_TogglePin>

			str = "Toggled LED1\r\n";
 8020d70:	4b38      	ldr	r3, [pc, #224]	; (8020e54 <devparse+0x164>)
 8020d72:	613b      	str	r3, [r7, #16]
			*ret_len = strlen(str);
 8020d74:	6938      	ldr	r0, [r7, #16]
 8020d76:	f7ff fa2b 	bl	80201d0 <strlen>
 8020d7a:	4603      	mov	r3, r0
 8020d7c:	b29a      	uxth	r2, r3
 8020d7e:	683b      	ldr	r3, [r7, #0]
 8020d80:	801a      	strh	r2, [r3, #0]
			strcpy(response, str);
 8020d82:	6939      	ldr	r1, [r7, #16]
 8020d84:	6878      	ldr	r0, [r7, #4]
 8020d86:	f015 fb4e 	bl	8036426 <strcpy>

			break;
 8020d8a:	e059      	b.n	8020e40 <devparse+0x150>
		case 'I':
			/*
			 * Set IAP Flag
			 */
			HAL_PWR_EnableBkUpAccess();
 8020d8c:	f002 f914 	bl	8022fb8 <HAL_PWR_EnableBkUpAccess>
			// Clears IAP Flag in RTC Backup data Register 1
			HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_DR1, 0xDEE2);
 8020d90:	f64d 62e2 	movw	r2, #57058	; 0xdee2
 8020d94:	2101      	movs	r1, #1
 8020d96:	4830      	ldr	r0, [pc, #192]	; (8020e58 <devparse+0x168>)
 8020d98:	f002 ff88 	bl	8023cac <HAL_RTCEx_BKUPWrite>
			HAL_PWR_DisableBkUpAccess();
 8020d9c:	f002 f920 	bl	8022fe0 <HAL_PWR_DisableBkUpAccess>

			str = "IAP Flag Set\r\nResetting MCU\r\n";
 8020da0:	4b2e      	ldr	r3, [pc, #184]	; (8020e5c <devparse+0x16c>)
 8020da2:	613b      	str	r3, [r7, #16]
			*ret_len = strlen(str);
 8020da4:	6938      	ldr	r0, [r7, #16]
 8020da6:	f7ff fa13 	bl	80201d0 <strlen>
 8020daa:	4603      	mov	r3, r0
 8020dac:	b29a      	uxth	r2, r3
 8020dae:	683b      	ldr	r3, [r7, #0]
 8020db0:	801a      	strh	r2, [r3, #0]
			strcpy(response, str);
 8020db2:	6939      	ldr	r1, [r7, #16]
 8020db4:	6878      	ldr	r0, [r7, #4]
 8020db6:	f015 fb36 	bl	8036426 <strcpy>

			netconn_write(newconn, (void*)response, (size_t)*ret_len, NETCONN_COPY);
 8020dba:	683b      	ldr	r3, [r7, #0]
 8020dbc:	881b      	ldrh	r3, [r3, #0]
 8020dbe:	461a      	mov	r2, r3
 8020dc0:	2300      	movs	r3, #0
 8020dc2:	9300      	str	r3, [sp, #0]
 8020dc4:	2301      	movs	r3, #1
 8020dc6:	6879      	ldr	r1, [r7, #4]
 8020dc8:	6a38      	ldr	r0, [r7, #32]
 8020dca:	f007 fc89 	bl	80286e0 <netconn_write_partly>

			NVIC_SystemReset();
 8020dce:	f7ff ff79 	bl	8020cc4 <__NVIC_SystemReset>
			break;

		case 'R':
			str = "Resetting MCU\r\n";
 8020dd2:	4b23      	ldr	r3, [pc, #140]	; (8020e60 <devparse+0x170>)
 8020dd4:	613b      	str	r3, [r7, #16]
			*ret_len = strlen(str);
 8020dd6:	6938      	ldr	r0, [r7, #16]
 8020dd8:	f7ff f9fa 	bl	80201d0 <strlen>
 8020ddc:	4603      	mov	r3, r0
 8020dde:	b29a      	uxth	r2, r3
 8020de0:	683b      	ldr	r3, [r7, #0]
 8020de2:	801a      	strh	r2, [r3, #0]
			strcpy(response, str);
 8020de4:	6939      	ldr	r1, [r7, #16]
 8020de6:	6878      	ldr	r0, [r7, #4]
 8020de8:	f015 fb1d 	bl	8036426 <strcpy>

			netconn_write(newconn, (void*)response, (size_t)*ret_len, NETCONN_COPY);
 8020dec:	683b      	ldr	r3, [r7, #0]
 8020dee:	881b      	ldrh	r3, [r3, #0]
 8020df0:	461a      	mov	r2, r3
 8020df2:	2300      	movs	r3, #0
 8020df4:	9300      	str	r3, [sp, #0]
 8020df6:	2301      	movs	r3, #1
 8020df8:	6879      	ldr	r1, [r7, #4]
 8020dfa:	6a38      	ldr	r0, [r7, #32]
 8020dfc:	f007 fc70 	bl	80286e0 <netconn_write_partly>

			NVIC_SystemReset();
 8020e00:	f7ff ff60 	bl	8020cc4 <__NVIC_SystemReset>
			break;

		case 'G':
			*ret_len = strlen(GIT_INFO);
 8020e04:	4b17      	ldr	r3, [pc, #92]	; (8020e64 <devparse+0x174>)
 8020e06:	681b      	ldr	r3, [r3, #0]
 8020e08:	4618      	mov	r0, r3
 8020e0a:	f7ff f9e1 	bl	80201d0 <strlen>
 8020e0e:	4603      	mov	r3, r0
 8020e10:	b29a      	uxth	r2, r3
 8020e12:	683b      	ldr	r3, [r7, #0]
 8020e14:	801a      	strh	r2, [r3, #0]
			strcpy(response, GIT_INFO);
 8020e16:	4b13      	ldr	r3, [pc, #76]	; (8020e64 <devparse+0x174>)
 8020e18:	681b      	ldr	r3, [r3, #0]
 8020e1a:	4619      	mov	r1, r3
 8020e1c:	6878      	ldr	r0, [r7, #4]
 8020e1e:	f015 fb02 	bl	8036426 <strcpy>

			break;
 8020e22:	e00d      	b.n	8020e40 <devparse+0x150>

		default:
			str = "Unknown Command\r\n";
 8020e24:	4b10      	ldr	r3, [pc, #64]	; (8020e68 <devparse+0x178>)
 8020e26:	613b      	str	r3, [r7, #16]
			*ret_len = strlen(str);
 8020e28:	6938      	ldr	r0, [r7, #16]
 8020e2a:	f7ff f9d1 	bl	80201d0 <strlen>
 8020e2e:	4603      	mov	r3, r0
 8020e30:	b29a      	uxth	r2, r3
 8020e32:	683b      	ldr	r3, [r7, #0]
 8020e34:	801a      	strh	r2, [r3, #0]
			strcpy(response, str);
 8020e36:	6939      	ldr	r1, [r7, #16]
 8020e38:	6878      	ldr	r0, [r7, #4]
 8020e3a:	f015 faf4 	bl	8036426 <strcpy>

			break;
 8020e3e:	bf00      	nop
		}

		return PARSE_OK;
 8020e40:	2300      	movs	r3, #0
 8020e42:	e000      	b.n	8020e46 <devparse+0x156>
	} else {
		return PARSE_ERR;
 8020e44:	2301      	movs	r3, #1
	}

}
 8020e46:	4618      	mov	r0, r3
 8020e48:	3718      	adds	r7, #24
 8020e4a:	46bd      	mov	sp, r7
 8020e4c:	bd80      	pop	{r7, pc}
 8020e4e:	bf00      	nop
 8020e50:	40020800 	.word	0x40020800
 8020e54:	08037430 	.word	0x08037430
 8020e58:	20000368 	.word	0x20000368
 8020e5c:	08037440 	.word	0x08037440
 8020e60:	08037460 	.word	0x08037460
 8020e64:	20000004 	.word	0x20000004
 8020e68:	08037470 	.word	0x08037470

08020e6c <server_init>:
#endif

/*
 * Starts the TCP server
 */
void server_init() {
 8020e6c:	b580      	push	{r7, lr}
 8020e6e:	b082      	sub	sp, #8
 8020e70:	af02      	add	r7, sp, #8


	// prime server to connect to clients
	if ( NULL == sys_thread_new("server_connection_thread", server_waitForClientConnection, NULL,
 8020e72:	2300      	movs	r3, #0
 8020e74:	9300      	str	r3, [sp, #0]
 8020e76:	f44f 7300 	mov.w	r3, #512	; 0x200
 8020e7a:	2200      	movs	r2, #0
 8020e7c:	4907      	ldr	r1, [pc, #28]	; (8020e9c <server_init+0x30>)
 8020e7e:	4808      	ldr	r0, [pc, #32]	; (8020ea0 <server_init+0x34>)
 8020e80:	f014 fef8 	bl	8035c74 <sys_thread_new>
			512, osPriorityNormal)) {

	}

	if ( NULL == sys_thread_new("server_broadcast_thread", server_broadcast, NULL,
 8020e84:	2300      	movs	r3, #0
 8020e86:	9300      	str	r3, [sp, #0]
 8020e88:	f44f 7300 	mov.w	r3, #512	; 0x200
 8020e8c:	2200      	movs	r2, #0
 8020e8e:	4905      	ldr	r1, [pc, #20]	; (8020ea4 <server_init+0x38>)
 8020e90:	4805      	ldr	r0, [pc, #20]	; (8020ea8 <server_init+0x3c>)
 8020e92:	f014 feef 	bl	8035c74 <sys_thread_new>
				512, osPriorityNormal)) {

		}
}
 8020e96:	bf00      	nop
 8020e98:	46bd      	mov	sp, r7
 8020e9a:	bd80      	pop	{r7, pc}
 8020e9c:	08020ead 	.word	0x08020ead
 8020ea0:	08037484 	.word	0x08037484
 8020ea4:	08021185 	.word	0x08021185
 8020ea8:	080374a0 	.word	0x080374a0

08020eac <server_waitForClientConnection>:
/*
 * Sets the server in connection mode
 * When a connection is established, an ID is generated and pushed to the connections list for use
 * Server reenters connection mode
 */
static void server_waitForClientConnection(void *arg) {
 8020eac:	b580      	push	{r7, lr}
 8020eae:	b08a      	sub	sp, #40	; 0x28
 8020eb0:	af02      	add	r7, sp, #8
 8020eb2:	6078      	str	r0, [r7, #4]
	err_t err;

	LWIP_UNUSED_ARG(arg);

	/* Create a new connection identifier. */
	conn = netconn_new(NETCONN_TCP);
 8020eb4:	2200      	movs	r2, #0
 8020eb6:	2100      	movs	r1, #0
 8020eb8:	2010      	movs	r0, #16
 8020eba:	f007 f855 	bl	8027f68 <netconn_new_with_proto_and_callback>
 8020ebe:	4603      	mov	r3, r0
 8020ec0:	4a2f      	ldr	r2, [pc, #188]	; (8020f80 <server_waitForClientConnection+0xd4>)
 8020ec2:	6013      	str	r3, [r2, #0]

	if (conn != NULL) {
 8020ec4:	4b2e      	ldr	r3, [pc, #184]	; (8020f80 <server_waitForClientConnection+0xd4>)
 8020ec6:	681b      	ldr	r3, [r3, #0]
 8020ec8:	2b00      	cmp	r3, #0
 8020eca:	d054      	beq.n	8020f76 <server_waitForClientConnection+0xca>
		/* Bind connection to ephemeral port number 50000. */
		err = netconn_bind(conn, IP4_ADDR_ANY, SERVER_PORT);
 8020ecc:	4b2c      	ldr	r3, [pc, #176]	; (8020f80 <server_waitForClientConnection+0xd4>)
 8020ece:	681b      	ldr	r3, [r3, #0]
 8020ed0:	f24c 3250 	movw	r2, #50000	; 0xc350
 8020ed4:	492b      	ldr	r1, [pc, #172]	; (8020f84 <server_waitForClientConnection+0xd8>)
 8020ed6:	4618      	mov	r0, r3
 8020ed8:	f007 f900 	bl	80280dc <netconn_bind>
 8020edc:	4603      	mov	r3, r0
 8020ede:	77fb      	strb	r3, [r7, #31]

		if (err == ERR_OK) {
 8020ee0:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8020ee4:	2b00      	cmp	r3, #0
 8020ee6:	d146      	bne.n	8020f76 <server_waitForClientConnection+0xca>
			/* Tell connection to go into listening mode. */
			netconn_listen(conn);
 8020ee8:	4b25      	ldr	r3, [pc, #148]	; (8020f80 <server_waitForClientConnection+0xd4>)
 8020eea:	681b      	ldr	r3, [r3, #0]
 8020eec:	21ff      	movs	r1, #255	; 0xff
 8020eee:	4618      	mov	r0, r3
 8020ef0:	f007 f92c 	bl	802814c <netconn_listen_with_backlog>

			while (1) {
				int8_t ID = server_addConnection();
 8020ef4:	f000 f850 	bl	8020f98 <server_addConnection>
 8020ef8:	4603      	mov	r3, r0
 8020efa:	77bb      	strb	r3, [r7, #30]

				if (ID != -1) {
 8020efc:	f997 301e 	ldrsb.w	r3, [r7, #30]
 8020f00:	f1b3 3fff 	cmp.w	r3, #4294967295
 8020f04:	d0f6      	beq.n	8020ef4 <server_waitForClientConnection+0x48>
					// connection accepted, spawn recv thread
					char thread_name[22];
					snprintf(thread_name, 22, "server_recv_thread_%02d", ID);
 8020f06:	f997 301e 	ldrsb.w	r3, [r7, #30]
 8020f0a:	f107 0008 	add.w	r0, r7, #8
 8020f0e:	4a1e      	ldr	r2, [pc, #120]	; (8020f88 <server_waitForClientConnection+0xdc>)
 8020f10:	2116      	movs	r1, #22
 8020f12:	f015 fa11 	bl	8036338 <sniprintf>
					netconn_write(connections[ID], (void*)thread_name, (size_t)22, NETCONN_COPY);
 8020f16:	f997 301e 	ldrsb.w	r3, [r7, #30]
 8020f1a:	461a      	mov	r2, r3
 8020f1c:	4b1b      	ldr	r3, [pc, #108]	; (8020f8c <server_waitForClientConnection+0xe0>)
 8020f1e:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8020f22:	f107 0108 	add.w	r1, r7, #8
 8020f26:	2300      	movs	r3, #0
 8020f28:	9300      	str	r3, [sp, #0]
 8020f2a:	2301      	movs	r3, #1
 8020f2c:	2216      	movs	r2, #22
 8020f2e:	f007 fbd7 	bl	80286e0 <netconn_write_partly>
					netconn_write(connections[ID], (void*)"\r\n", (size_t)2, NETCONN_COPY);
 8020f32:	f997 301e 	ldrsb.w	r3, [r7, #30]
 8020f36:	461a      	mov	r2, r3
 8020f38:	4b14      	ldr	r3, [pc, #80]	; (8020f8c <server_waitForClientConnection+0xe0>)
 8020f3a:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8020f3e:	2300      	movs	r3, #0
 8020f40:	9300      	str	r3, [sp, #0]
 8020f42:	2301      	movs	r3, #1
 8020f44:	2202      	movs	r2, #2
 8020f46:	4912      	ldr	r1, [pc, #72]	; (8020f90 <server_waitForClientConnection+0xe4>)
 8020f48:	f007 fbca 	bl	80286e0 <netconn_write_partly>

					if ( NULL == sys_thread_new(thread_name, server_recv, &ID,
 8020f4c:	f107 021e 	add.w	r2, r7, #30
 8020f50:	f107 0008 	add.w	r0, r7, #8
 8020f54:	2300      	movs	r3, #0
 8020f56:	9300      	str	r3, [sp, #0]
 8020f58:	f44f 7300 	mov.w	r3, #512	; 0x200
 8020f5c:	490d      	ldr	r1, [pc, #52]	; (8020f94 <server_waitForClientConnection+0xe8>)
 8020f5e:	f014 fe89 	bl	8035c74 <sys_thread_new>
 8020f62:	4603      	mov	r3, r0
 8020f64:	2b00      	cmp	r3, #0
 8020f66:	d1c5      	bne.n	8020ef4 <server_waitForClientConnection+0x48>
							512, osPriorityNormal) ) {
						// Failed to instantiate, free socket
						server_removeConnection(ID);
 8020f68:	f997 301e 	ldrsb.w	r3, [r7, #30]
 8020f6c:	b2db      	uxtb	r3, r3
 8020f6e:	4618      	mov	r0, r3
 8020f70:	f000 f858 	bl	8021024 <server_removeConnection>
			while (1) {
 8020f74:	e7be      	b.n	8020ef4 <server_waitForClientConnection+0x48>

				} // end if
			} // end while
		}
	}
}
 8020f76:	bf00      	nop
 8020f78:	3720      	adds	r7, #32
 8020f7a:	46bd      	mov	sp, r7
 8020f7c:	bd80      	pop	{r7, pc}
 8020f7e:	bf00      	nop
 8020f80:	200003f8 	.word	0x200003f8
 8020f84:	0803abc4 	.word	0x0803abc4
 8020f88:	080374b8 	.word	0x080374b8
 8020f8c:	200003dc 	.word	0x200003dc
 8020f90:	080374d0 	.word	0x080374d0
 8020f94:	08021061 	.word	0x08021061

08020f98 <server_addConnection>:

/*
 * Adds netconn to connections list and assigns a free ID to a netconn
 * RETURNS assigned ID, -1 for a rejected connection
 */
static int8_t server_addConnection() {
 8020f98:	b580      	push	{r7, lr}
 8020f9a:	b084      	sub	sp, #16
 8020f9c:	af00      	add	r7, sp, #0
	/* Grab new connection. */
	netconn* newconn = malloc(sizeof(netconn*));
 8020f9e:	2004      	movs	r0, #4
 8020fa0:	f014 ffca 	bl	8035f38 <malloc>
 8020fa4:	4603      	mov	r3, r0
 8020fa6:	607b      	str	r3, [r7, #4]

	err_t err = netconn_accept(conn, &newconn);
 8020fa8:	4b1c      	ldr	r3, [pc, #112]	; (802101c <server_addConnection+0x84>)
 8020faa:	681b      	ldr	r3, [r3, #0]
 8020fac:	1d3a      	adds	r2, r7, #4
 8020fae:	4611      	mov	r1, r2
 8020fb0:	4618      	mov	r0, r3
 8020fb2:	f007 f8f7 	bl	80281a4 <netconn_accept>
 8020fb6:	4603      	mov	r3, r0
 8020fb8:	72fb      	strb	r3, [r7, #11]

	if (err == ERR_OK) {
 8020fba:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8020fbe:	2b00      	cmp	r3, #0
 8020fc0:	d11a      	bne.n	8020ff8 <server_addConnection+0x60>
		for (int id = 0; id < MAX_CONN_NUM; ++id) {
 8020fc2:	2300      	movs	r3, #0
 8020fc4:	60fb      	str	r3, [r7, #12]
 8020fc6:	e014      	b.n	8020ff2 <server_addConnection+0x5a>
			if (connections[id] == NULL) {
 8020fc8:	4a15      	ldr	r2, [pc, #84]	; (8021020 <server_addConnection+0x88>)
 8020fca:	68fb      	ldr	r3, [r7, #12]
 8020fcc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8020fd0:	2b00      	cmp	r3, #0
 8020fd2:	d10b      	bne.n	8020fec <server_addConnection+0x54>
				// free ID found, assign to newconn
				connections[id] = newconn;
 8020fd4:	687a      	ldr	r2, [r7, #4]
 8020fd6:	4912      	ldr	r1, [pc, #72]	; (8021020 <server_addConnection+0x88>)
 8020fd8:	68fb      	ldr	r3, [r7, #12]
 8020fda:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

				 newconn->recv_timeout = 3000; // 3 sec timeout
 8020fde:	687b      	ldr	r3, [r7, #4]
 8020fe0:	f640 32b8 	movw	r2, #3000	; 0xbb8
 8020fe4:	61da      	str	r2, [r3, #28]

				return id;
 8020fe6:	68fb      	ldr	r3, [r7, #12]
 8020fe8:	b25b      	sxtb	r3, r3
 8020fea:	e013      	b.n	8021014 <server_addConnection+0x7c>
		for (int id = 0; id < MAX_CONN_NUM; ++id) {
 8020fec:	68fb      	ldr	r3, [r7, #12]
 8020fee:	3301      	adds	r3, #1
 8020ff0:	60fb      	str	r3, [r7, #12]
 8020ff2:	68fb      	ldr	r3, [r7, #12]
 8020ff4:	2b06      	cmp	r3, #6
 8020ff6:	dde7      	ble.n	8020fc8 <server_addConnection+0x30>
		}
	}

	// Out of space in connection array , reject connection
	/* Close connection and discard connection identifier. */
	netconn_close(newconn);
 8020ff8:	687b      	ldr	r3, [r7, #4]
 8020ffa:	4618      	mov	r0, r3
 8020ffc:	f007 fc72 	bl	80288e4 <netconn_close>
	netconn_delete(newconn);
 8021000:	687b      	ldr	r3, [r7, #4]
 8021002:	4618      	mov	r0, r3
 8021004:	f007 f84e 	bl	80280a4 <netconn_delete>

	free(newconn);
 8021008:	687b      	ldr	r3, [r7, #4]
 802100a:	4618      	mov	r0, r3
 802100c:	f014 ff9c 	bl	8035f48 <free>

	return -1;
 8021010:	f04f 33ff 	mov.w	r3, #4294967295
}
 8021014:	4618      	mov	r0, r3
 8021016:	3710      	adds	r7, #16
 8021018:	46bd      	mov	sp, r7
 802101a:	bd80      	pop	{r7, pc}
 802101c:	200003f8 	.word	0x200003f8
 8021020:	200003dc 	.word	0x200003dc

08021024 <server_removeConnection>:

/*
 * Removes netconn from connections list and frees ID for a new netconn to use
 */
static void server_removeConnection(u8_t ID) {
 8021024:	b580      	push	{r7, lr}
 8021026:	b084      	sub	sp, #16
 8021028:	af00      	add	r7, sp, #0
 802102a:	4603      	mov	r3, r0
 802102c:	71fb      	strb	r3, [r7, #7]
	netconn* newconn = connections[ID];
 802102e:	79fb      	ldrb	r3, [r7, #7]
 8021030:	4a0a      	ldr	r2, [pc, #40]	; (802105c <server_removeConnection+0x38>)
 8021032:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8021036:	60fb      	str	r3, [r7, #12]

	netconn_close(newconn);
 8021038:	68f8      	ldr	r0, [r7, #12]
 802103a:	f007 fc53 	bl	80288e4 <netconn_close>
	netconn_delete(newconn);
 802103e:	68f8      	ldr	r0, [r7, #12]
 8021040:	f007 f830 	bl	80280a4 <netconn_delete>

	free(newconn);
 8021044:	68f8      	ldr	r0, [r7, #12]
 8021046:	f014 ff7f 	bl	8035f48 <free>

	connections[ID] = NULL;
 802104a:	79fb      	ldrb	r3, [r7, #7]
 802104c:	4a03      	ldr	r2, [pc, #12]	; (802105c <server_removeConnection+0x38>)
 802104e:	2100      	movs	r1, #0
 8021050:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
}
 8021054:	bf00      	nop
 8021056:	3710      	adds	r7, #16
 8021058:	46bd      	mov	sp, r7
 802105a:	bd80      	pop	{r7, pc}
 802105c:	200003dc 	.word	0x200003dc

08021060 <server_recv>:

static void server_recv(void *arg) {
 8021060:	b590      	push	{r4, r7, lr}
 8021062:	b0ef      	sub	sp, #444	; 0x1bc
 8021064:	af02      	add	r7, sp, #8
 8021066:	f507 73d8 	add.w	r3, r7, #432	; 0x1b0
 802106a:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 802106e:	6018      	str	r0, [r3, #0]
	struct netbuf *buf;

	char msg[MAX_MSG_LEN];
	char smsg[MAX_MSG_LEN];

	u8_t ID = ((int*)arg)[0];
 8021070:	f507 73d8 	add.w	r3, r7, #432	; 0x1b0
 8021074:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8021078:	681b      	ldr	r3, [r3, #0]
 802107a:	681b      	ldr	r3, [r3, #0]
 802107c:	f887 31af 	strb.w	r3, [r7, #431]	; 0x1af
	netconn* newconn = connections[ID];
 8021080:	f897 31af 	ldrb.w	r3, [r7, #431]	; 0x1af
 8021084:	4a3d      	ldr	r2, [pc, #244]	; (802117c <server_recv+0x11c>)
 8021086:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 802108a:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8

	/* Process the new connection. */
	/* receive the data from the client */
	for(;;) {
		if (netconn_recv(newconn, &buf) == ERR_OK) {
 802108e:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 8021092:	4619      	mov	r1, r3
 8021094:	f8d7 01a8 	ldr.w	r0, [r7, #424]	; 0x1a8
 8021098:	f007 faa8 	bl	80285ec <netconn_recv>
 802109c:	4603      	mov	r3, r0
 802109e:	2b00      	cmp	r3, #0
 80210a0:	d150      	bne.n	8021144 <server_recv+0xe4>
			/* Extract the address and port in case they are required */
			do {
					strncpy (msg, buf->p->payload, buf->p->len);   // get the message from the client
 80210a2:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 80210a6:	681b      	ldr	r3, [r3, #0]
 80210a8:	6859      	ldr	r1, [r3, #4]
 80210aa:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 80210ae:	681b      	ldr	r3, [r3, #0]
 80210b0:	895b      	ldrh	r3, [r3, #10]
 80210b2:	461a      	mov	r2, r3
 80210b4:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 80210b8:	4618      	mov	r0, r3
 80210ba:	f015 f9bc 	bl	8036436 <strncpy>
					u16_t ret_len = 0;
 80210be:	f507 73d8 	add.w	r3, r7, #432	; 0x1b0
 80210c2:	f5a3 73d1 	sub.w	r3, r3, #418	; 0x1a2
 80210c6:	2200      	movs	r2, #0
 80210c8:	801a      	strh	r2, [r3, #0]

					parse_t rc = devparse(msg, buf->p->len, smsg, &ret_len, newconn);
 80210ca:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 80210ce:	681b      	ldr	r3, [r3, #0]
 80210d0:	8959      	ldrh	r1, [r3, #10]
 80210d2:	f107 040e 	add.w	r4, r7, #14
 80210d6:	f107 0210 	add.w	r2, r7, #16
 80210da:	f107 00d8 	add.w	r0, r7, #216	; 0xd8
 80210de:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 80210e2:	9300      	str	r3, [sp, #0]
 80210e4:	4623      	mov	r3, r4
 80210e6:	f7ff fe03 	bl	8020cf0 <devparse>
 80210ea:	4603      	mov	r3, r0
 80210ec:	f887 31a7 	strb.w	r3, [r7, #423]	; 0x1a7

					if (ret_len > 0) {
 80210f0:	f507 73d8 	add.w	r3, r7, #432	; 0x1b0
 80210f4:	f5a3 73d1 	sub.w	r3, r3, #418	; 0x1a2
 80210f8:	881b      	ldrh	r3, [r3, #0]
 80210fa:	2b00      	cmp	r3, #0
 80210fc:	d00e      	beq.n	802111c <server_recv+0xbc>
						netconn_write(newconn, (void*)smsg, (size_t)ret_len, NETCONN_COPY);
 80210fe:	f507 73d8 	add.w	r3, r7, #432	; 0x1b0
 8021102:	f5a3 73d1 	sub.w	r3, r3, #418	; 0x1a2
 8021106:	881b      	ldrh	r3, [r3, #0]
 8021108:	461a      	mov	r2, r3
 802110a:	f107 0110 	add.w	r1, r7, #16
 802110e:	2300      	movs	r3, #0
 8021110:	9300      	str	r3, [sp, #0]
 8021112:	2301      	movs	r3, #1
 8021114:	f8d7 01a8 	ldr.w	r0, [r7, #424]	; 0x1a8
 8021118:	f007 fae2 	bl	80286e0 <netconn_write_partly>
					}

					memset (msg, '\0', 100);  // clear the buffer
 802111c:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 8021120:	2264      	movs	r2, #100	; 0x64
 8021122:	2100      	movs	r1, #0
 8021124:	4618      	mov	r0, r3
 8021126:	f014 ff4f 	bl	8035fc8 <memset>
				} while (netbuf_next(buf) >= 0);
 802112a:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 802112e:	4618      	mov	r0, r3
 8021130:	f009 f80a 	bl	802a148 <netbuf_next>
 8021134:	4603      	mov	r3, r0
 8021136:	2b00      	cmp	r3, #0
 8021138:	dab3      	bge.n	80210a2 <server_recv+0x42>

			netbuf_delete(buf);
 802113a:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 802113e:	4618      	mov	r0, r3
 8021140:	f008 ffe2 	bl	802a108 <netbuf_delete>
		}
		// recv timeout or error
		if (netconn_write(newconn, (void*)"", (size_t)1, NETCONN_COPY) != ERR_OK) {
 8021144:	2300      	movs	r3, #0
 8021146:	9300      	str	r3, [sp, #0]
 8021148:	2301      	movs	r3, #1
 802114a:	2201      	movs	r2, #1
 802114c:	490c      	ldr	r1, [pc, #48]	; (8021180 <server_recv+0x120>)
 802114e:	f8d7 01a8 	ldr.w	r0, [r7, #424]	; 0x1a8
 8021152:	f007 fac5 	bl	80286e0 <netconn_write_partly>
 8021156:	4603      	mov	r3, r0
 8021158:	2b00      	cmp	r3, #0
 802115a:	d100      	bne.n	802115e <server_recv+0xfe>
		if (netconn_recv(newconn, &buf) == ERR_OK) {
 802115c:	e797      	b.n	802108e <server_recv+0x2e>
			// connection closed
			break;
 802115e:	bf00      	nop
		}
	}

	server_removeConnection(ID);
 8021160:	f897 31af 	ldrb.w	r3, [r7, #431]	; 0x1af
 8021164:	4618      	mov	r0, r3
 8021166:	f7ff ff5d 	bl	8021024 <server_removeConnection>

	vTaskDelete(NULL);
 802116a:	2000      	movs	r0, #0
 802116c:	f005 fb8c 	bl	8026888 <vTaskDelete>
}
 8021170:	bf00      	nop
 8021172:	f507 77da 	add.w	r7, r7, #436	; 0x1b4
 8021176:	46bd      	mov	sp, r7
 8021178:	bd90      	pop	{r4, r7, pc}
 802117a:	bf00      	nop
 802117c:	200003dc 	.word	0x200003dc
 8021180:	080374d4 	.word	0x080374d4

08021184 <server_broadcast>:

static void server_broadcast(void *arg) {
 8021184:	b580      	push	{r7, lr}
 8021186:	b086      	sub	sp, #24
 8021188:	af02      	add	r7, sp, #8
 802118a:	6078      	str	r0, [r7, #4]
	for (;;) {
		for (int i = 0; i < MAX_CONN_NUM; ++i) {
 802118c:	2300      	movs	r3, #0
 802118e:	60fb      	str	r3, [r7, #12]
 8021190:	e013      	b.n	80211ba <server_broadcast+0x36>
			if (connections[i] != NULL) {
 8021192:	4a0e      	ldr	r2, [pc, #56]	; (80211cc <server_broadcast+0x48>)
 8021194:	68fb      	ldr	r3, [r7, #12]
 8021196:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 802119a:	2b00      	cmp	r3, #0
 802119c:	d00a      	beq.n	80211b4 <server_broadcast+0x30>
				netconn_write(connections[i], (void*)"data\r\n", (size_t)7, NETCONN_COPY);
 802119e:	4a0b      	ldr	r2, [pc, #44]	; (80211cc <server_broadcast+0x48>)
 80211a0:	68fb      	ldr	r3, [r7, #12]
 80211a2:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 80211a6:	2300      	movs	r3, #0
 80211a8:	9300      	str	r3, [sp, #0]
 80211aa:	2301      	movs	r3, #1
 80211ac:	2207      	movs	r2, #7
 80211ae:	4908      	ldr	r1, [pc, #32]	; (80211d0 <server_broadcast+0x4c>)
 80211b0:	f007 fa96 	bl	80286e0 <netconn_write_partly>
		for (int i = 0; i < MAX_CONN_NUM; ++i) {
 80211b4:	68fb      	ldr	r3, [r7, #12]
 80211b6:	3301      	adds	r3, #1
 80211b8:	60fb      	str	r3, [r7, #12]
 80211ba:	68fb      	ldr	r3, [r7, #12]
 80211bc:	2b06      	cmp	r3, #6
 80211be:	dde8      	ble.n	8021192 <server_broadcast+0xe>
			}
		}
		osDelay(1000);
 80211c0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80211c4:	f003 feb8 	bl	8024f38 <osDelay>
		for (int i = 0; i < MAX_CONN_NUM; ++i) {
 80211c8:	e7e0      	b.n	802118c <server_broadcast+0x8>
 80211ca:	bf00      	nop
 80211cc:	200003dc 	.word	0x200003dc
 80211d0:	080374d8 	.word	0x080374d8

080211d4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80211d4:	f8df d034 	ldr.w	sp, [pc, #52]	; 802120c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80211d8:	480d      	ldr	r0, [pc, #52]	; (8021210 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80211da:	490e      	ldr	r1, [pc, #56]	; (8021214 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80211dc:	4a0e      	ldr	r2, [pc, #56]	; (8021218 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80211de:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80211e0:	e002      	b.n	80211e8 <LoopCopyDataInit>

080211e2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80211e2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80211e4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80211e6:	3304      	adds	r3, #4

080211e8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80211e8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80211ea:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80211ec:	d3f9      	bcc.n	80211e2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80211ee:	4a0b      	ldr	r2, [pc, #44]	; (802121c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80211f0:	4c0b      	ldr	r4, [pc, #44]	; (8021220 <LoopFillZerobss+0x26>)
  movs r3, #0
 80211f2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80211f4:	e001      	b.n	80211fa <LoopFillZerobss>

080211f6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80211f6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80211f8:	3204      	adds	r2, #4

080211fa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80211fa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80211fc:	d3fb      	bcc.n	80211f6 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80211fe:	f7ff fd4b 	bl	8020c98 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8021202:	f014 fe71 	bl	8035ee8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8021206:	f7ff f9d7 	bl	80205b8 <main>
  bx  lr    
 802120a:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 802120c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8021210:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8021214:	20000098 	.word	0x20000098
  ldr r2, =_sidata
 8021218:	0803ad38 	.word	0x0803ad38
  ldr r2, =_sbss
 802121c:	20000098 	.word	0x20000098
  ldr r4, =_ebss
 8021220:	2000ef7c 	.word	0x2000ef7c

08021224 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8021224:	e7fe      	b.n	8021224 <ADC_IRQHandler>

08021226 <LAN8742_RegisterBusIO>:
  * @param  ioctx: holds device IO functions.  
  * @retval LAN8742_STATUS_OK  if OK
  *         LAN8742_STATUS_ERROR if missing mandatory function
  */
int32_t  LAN8742_RegisterBusIO(lan8742_Object_t *pObj, lan8742_IOCtx_t *ioctx)
{
 8021226:	b480      	push	{r7}
 8021228:	b083      	sub	sp, #12
 802122a:	af00      	add	r7, sp, #0
 802122c:	6078      	str	r0, [r7, #4]
 802122e:	6039      	str	r1, [r7, #0]
  if(!pObj || !ioctx->ReadReg || !ioctx->WriteReg || !ioctx->GetTick)
 8021230:	687b      	ldr	r3, [r7, #4]
 8021232:	2b00      	cmp	r3, #0
 8021234:	d00b      	beq.n	802124e <LAN8742_RegisterBusIO+0x28>
 8021236:	683b      	ldr	r3, [r7, #0]
 8021238:	68db      	ldr	r3, [r3, #12]
 802123a:	2b00      	cmp	r3, #0
 802123c:	d007      	beq.n	802124e <LAN8742_RegisterBusIO+0x28>
 802123e:	683b      	ldr	r3, [r7, #0]
 8021240:	689b      	ldr	r3, [r3, #8]
 8021242:	2b00      	cmp	r3, #0
 8021244:	d003      	beq.n	802124e <LAN8742_RegisterBusIO+0x28>
 8021246:	683b      	ldr	r3, [r7, #0]
 8021248:	691b      	ldr	r3, [r3, #16]
 802124a:	2b00      	cmp	r3, #0
 802124c:	d102      	bne.n	8021254 <LAN8742_RegisterBusIO+0x2e>
  {
    return LAN8742_STATUS_ERROR;
 802124e:	f04f 33ff 	mov.w	r3, #4294967295
 8021252:	e014      	b.n	802127e <LAN8742_RegisterBusIO+0x58>
  }
  
  pObj->IO.Init = ioctx->Init;
 8021254:	683b      	ldr	r3, [r7, #0]
 8021256:	681a      	ldr	r2, [r3, #0]
 8021258:	687b      	ldr	r3, [r7, #4]
 802125a:	609a      	str	r2, [r3, #8]
  pObj->IO.DeInit = ioctx->DeInit;
 802125c:	683b      	ldr	r3, [r7, #0]
 802125e:	685a      	ldr	r2, [r3, #4]
 8021260:	687b      	ldr	r3, [r7, #4]
 8021262:	60da      	str	r2, [r3, #12]
  pObj->IO.ReadReg = ioctx->ReadReg;
 8021264:	683b      	ldr	r3, [r7, #0]
 8021266:	68da      	ldr	r2, [r3, #12]
 8021268:	687b      	ldr	r3, [r7, #4]
 802126a:	615a      	str	r2, [r3, #20]
  pObj->IO.WriteReg = ioctx->WriteReg;
 802126c:	683b      	ldr	r3, [r7, #0]
 802126e:	689a      	ldr	r2, [r3, #8]
 8021270:	687b      	ldr	r3, [r7, #4]
 8021272:	611a      	str	r2, [r3, #16]
  pObj->IO.GetTick = ioctx->GetTick;
 8021274:	683b      	ldr	r3, [r7, #0]
 8021276:	691a      	ldr	r2, [r3, #16]
 8021278:	687b      	ldr	r3, [r7, #4]
 802127a:	619a      	str	r2, [r3, #24]
  
  return LAN8742_STATUS_OK;
 802127c:	2300      	movs	r3, #0
}
 802127e:	4618      	mov	r0, r3
 8021280:	370c      	adds	r7, #12
 8021282:	46bd      	mov	sp, r7
 8021284:	f85d 7b04 	ldr.w	r7, [sp], #4
 8021288:	4770      	bx	lr

0802128a <LAN8742_Init>:
  *         LAN8742_STATUS_READ_ERROR if connot read register
  *         LAN8742_STATUS_WRITE_ERROR if connot write to register
  *         LAN8742_STATUS_RESET_TIMEOUT if cannot perform a software reset
  */
 int32_t LAN8742_Init(lan8742_Object_t *pObj)
 {
 802128a:	b580      	push	{r7, lr}
 802128c:	b086      	sub	sp, #24
 802128e:	af00      	add	r7, sp, #0
 8021290:	6078      	str	r0, [r7, #4]
   uint32_t tickstart = 0, regvalue = 0, addr = 0;
 8021292:	2300      	movs	r3, #0
 8021294:	60fb      	str	r3, [r7, #12]
 8021296:	2300      	movs	r3, #0
 8021298:	60bb      	str	r3, [r7, #8]
 802129a:	2300      	movs	r3, #0
 802129c:	617b      	str	r3, [r7, #20]
   int32_t status = LAN8742_STATUS_OK;
 802129e:	2300      	movs	r3, #0
 80212a0:	613b      	str	r3, [r7, #16]
   
   if(pObj->Is_Initialized == 0)
 80212a2:	687b      	ldr	r3, [r7, #4]
 80212a4:	685b      	ldr	r3, [r3, #4]
 80212a6:	2b00      	cmp	r3, #0
 80212a8:	d17c      	bne.n	80213a4 <LAN8742_Init+0x11a>
   {
     if(pObj->IO.Init != 0)
 80212aa:	687b      	ldr	r3, [r7, #4]
 80212ac:	689b      	ldr	r3, [r3, #8]
 80212ae:	2b00      	cmp	r3, #0
 80212b0:	d002      	beq.n	80212b8 <LAN8742_Init+0x2e>
     {
       /* GPIO and Clocks initialization */
       pObj->IO.Init();
 80212b2:	687b      	ldr	r3, [r7, #4]
 80212b4:	689b      	ldr	r3, [r3, #8]
 80212b6:	4798      	blx	r3
     }
   
     /* for later check */
     pObj->DevAddr = LAN8742_MAX_DEV_ADDR + 1;
 80212b8:	687b      	ldr	r3, [r7, #4]
 80212ba:	2220      	movs	r2, #32
 80212bc:	601a      	str	r2, [r3, #0]
   
     /* Get the device address from special mode register */  
     for(addr = 0; addr <= LAN8742_MAX_DEV_ADDR; addr ++)
 80212be:	2300      	movs	r3, #0
 80212c0:	617b      	str	r3, [r7, #20]
 80212c2:	e01c      	b.n	80212fe <LAN8742_Init+0x74>
     {
       if(pObj->IO.ReadReg(addr, LAN8742_SMR, &regvalue) < 0)
 80212c4:	687b      	ldr	r3, [r7, #4]
 80212c6:	695b      	ldr	r3, [r3, #20]
 80212c8:	f107 0208 	add.w	r2, r7, #8
 80212cc:	2112      	movs	r1, #18
 80212ce:	6978      	ldr	r0, [r7, #20]
 80212d0:	4798      	blx	r3
 80212d2:	4603      	mov	r3, r0
 80212d4:	2b00      	cmp	r3, #0
 80212d6:	da03      	bge.n	80212e0 <LAN8742_Init+0x56>
       { 
         status = LAN8742_STATUS_READ_ERROR;
 80212d8:	f06f 0304 	mvn.w	r3, #4
 80212dc:	613b      	str	r3, [r7, #16]
         /* Can't read from this device address 
            continue with next address */
         continue;
 80212de:	e00b      	b.n	80212f8 <LAN8742_Init+0x6e>
       }
     
       if((regvalue & LAN8742_SMR_PHY_ADDR) == addr)
 80212e0:	68bb      	ldr	r3, [r7, #8]
 80212e2:	f003 031f 	and.w	r3, r3, #31
 80212e6:	697a      	ldr	r2, [r7, #20]
 80212e8:	429a      	cmp	r2, r3
 80212ea:	d105      	bne.n	80212f8 <LAN8742_Init+0x6e>
       {
         pObj->DevAddr = addr;
 80212ec:	687b      	ldr	r3, [r7, #4]
 80212ee:	697a      	ldr	r2, [r7, #20]
 80212f0:	601a      	str	r2, [r3, #0]
         status = LAN8742_STATUS_OK;
 80212f2:	2300      	movs	r3, #0
 80212f4:	613b      	str	r3, [r7, #16]
         break;
 80212f6:	e005      	b.n	8021304 <LAN8742_Init+0x7a>
     for(addr = 0; addr <= LAN8742_MAX_DEV_ADDR; addr ++)
 80212f8:	697b      	ldr	r3, [r7, #20]
 80212fa:	3301      	adds	r3, #1
 80212fc:	617b      	str	r3, [r7, #20]
 80212fe:	697b      	ldr	r3, [r7, #20]
 8021300:	2b1f      	cmp	r3, #31
 8021302:	d9df      	bls.n	80212c4 <LAN8742_Init+0x3a>
       }
     }
   
     if(pObj->DevAddr > LAN8742_MAX_DEV_ADDR)
 8021304:	687b      	ldr	r3, [r7, #4]
 8021306:	681b      	ldr	r3, [r3, #0]
 8021308:	2b1f      	cmp	r3, #31
 802130a:	d902      	bls.n	8021312 <LAN8742_Init+0x88>
     {
       status = LAN8742_STATUS_ADDRESS_ERROR;
 802130c:	f06f 0302 	mvn.w	r3, #2
 8021310:	613b      	str	r3, [r7, #16]
     }
     
     /* if device address is matched */
     if(status == LAN8742_STATUS_OK)
 8021312:	693b      	ldr	r3, [r7, #16]
 8021314:	2b00      	cmp	r3, #0
 8021316:	d145      	bne.n	80213a4 <LAN8742_Init+0x11a>
     {
       /* set a software reset  */
       if(pObj->IO.WriteReg(pObj->DevAddr, LAN8742_BCR, LAN8742_BCR_SOFT_RESET) >= 0)
 8021318:	687b      	ldr	r3, [r7, #4]
 802131a:	691b      	ldr	r3, [r3, #16]
 802131c:	687a      	ldr	r2, [r7, #4]
 802131e:	6810      	ldr	r0, [r2, #0]
 8021320:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8021324:	2100      	movs	r1, #0
 8021326:	4798      	blx	r3
 8021328:	4603      	mov	r3, r0
 802132a:	2b00      	cmp	r3, #0
 802132c:	db37      	blt.n	802139e <LAN8742_Init+0x114>
       { 
         /* get software reset status */
         if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BCR, &regvalue) >= 0)
 802132e:	687b      	ldr	r3, [r7, #4]
 8021330:	695b      	ldr	r3, [r3, #20]
 8021332:	687a      	ldr	r2, [r7, #4]
 8021334:	6810      	ldr	r0, [r2, #0]
 8021336:	f107 0208 	add.w	r2, r7, #8
 802133a:	2100      	movs	r1, #0
 802133c:	4798      	blx	r3
 802133e:	4603      	mov	r3, r0
 8021340:	2b00      	cmp	r3, #0
 8021342:	db28      	blt.n	8021396 <LAN8742_Init+0x10c>
         { 
           tickstart = pObj->IO.GetTick();
 8021344:	687b      	ldr	r3, [r7, #4]
 8021346:	699b      	ldr	r3, [r3, #24]
 8021348:	4798      	blx	r3
 802134a:	4603      	mov	r3, r0
 802134c:	60fb      	str	r3, [r7, #12]
           
           /* wait until software reset is done or timeout occured  */
           while(regvalue & LAN8742_BCR_SOFT_RESET)
 802134e:	e01c      	b.n	802138a <LAN8742_Init+0x100>
           {
             if((pObj->IO.GetTick() - tickstart) <= LAN8742_SW_RESET_TO)
 8021350:	687b      	ldr	r3, [r7, #4]
 8021352:	699b      	ldr	r3, [r3, #24]
 8021354:	4798      	blx	r3
 8021356:	4603      	mov	r3, r0
 8021358:	461a      	mov	r2, r3
 802135a:	68fb      	ldr	r3, [r7, #12]
 802135c:	1ad3      	subs	r3, r2, r3
 802135e:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8021362:	d80e      	bhi.n	8021382 <LAN8742_Init+0xf8>
             {
               if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BCR, &regvalue) < 0)
 8021364:	687b      	ldr	r3, [r7, #4]
 8021366:	695b      	ldr	r3, [r3, #20]
 8021368:	687a      	ldr	r2, [r7, #4]
 802136a:	6810      	ldr	r0, [r2, #0]
 802136c:	f107 0208 	add.w	r2, r7, #8
 8021370:	2100      	movs	r1, #0
 8021372:	4798      	blx	r3
 8021374:	4603      	mov	r3, r0
 8021376:	2b00      	cmp	r3, #0
 8021378:	da07      	bge.n	802138a <LAN8742_Init+0x100>
               { 
                 status = LAN8742_STATUS_READ_ERROR;
 802137a:	f06f 0304 	mvn.w	r3, #4
 802137e:	613b      	str	r3, [r7, #16]
                 break;
 8021380:	e010      	b.n	80213a4 <LAN8742_Init+0x11a>
               }
             }
             else
             {
               status = LAN8742_STATUS_RESET_TIMEOUT;
 8021382:	f06f 0301 	mvn.w	r3, #1
 8021386:	613b      	str	r3, [r7, #16]
               break;
 8021388:	e00c      	b.n	80213a4 <LAN8742_Init+0x11a>
           while(regvalue & LAN8742_BCR_SOFT_RESET)
 802138a:	68bb      	ldr	r3, [r7, #8]
 802138c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8021390:	2b00      	cmp	r3, #0
 8021392:	d1dd      	bne.n	8021350 <LAN8742_Init+0xc6>
 8021394:	e006      	b.n	80213a4 <LAN8742_Init+0x11a>
             }
           } 
         }
         else
         {
           status = LAN8742_STATUS_READ_ERROR;
 8021396:	f06f 0304 	mvn.w	r3, #4
 802139a:	613b      	str	r3, [r7, #16]
 802139c:	e002      	b.n	80213a4 <LAN8742_Init+0x11a>
         }
       }
       else
       {
         status = LAN8742_STATUS_WRITE_ERROR;
 802139e:	f06f 0303 	mvn.w	r3, #3
 80213a2:	613b      	str	r3, [r7, #16]
       }
     }
   }
      
   if(status == LAN8742_STATUS_OK)
 80213a4:	693b      	ldr	r3, [r7, #16]
 80213a6:	2b00      	cmp	r3, #0
 80213a8:	d112      	bne.n	80213d0 <LAN8742_Init+0x146>
   {
     tickstart =  pObj->IO.GetTick();
 80213aa:	687b      	ldr	r3, [r7, #4]
 80213ac:	699b      	ldr	r3, [r3, #24]
 80213ae:	4798      	blx	r3
 80213b0:	4603      	mov	r3, r0
 80213b2:	60fb      	str	r3, [r7, #12]
     
     /* Wait for 2s to perform initialization */
     while((pObj->IO.GetTick() - tickstart) <= LAN8742_INIT_TO)
 80213b4:	bf00      	nop
 80213b6:	687b      	ldr	r3, [r7, #4]
 80213b8:	699b      	ldr	r3, [r3, #24]
 80213ba:	4798      	blx	r3
 80213bc:	4603      	mov	r3, r0
 80213be:	461a      	mov	r2, r3
 80213c0:	68fb      	ldr	r3, [r7, #12]
 80213c2:	1ad3      	subs	r3, r2, r3
 80213c4:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 80213c8:	d9f5      	bls.n	80213b6 <LAN8742_Init+0x12c>
     {
     }
     pObj->Is_Initialized = 1;
 80213ca:	687b      	ldr	r3, [r7, #4]
 80213cc:	2201      	movs	r2, #1
 80213ce:	605a      	str	r2, [r3, #4]
   }
   
   return status;
 80213d0:	693b      	ldr	r3, [r7, #16]
 }
 80213d2:	4618      	mov	r0, r3
 80213d4:	3718      	adds	r7, #24
 80213d6:	46bd      	mov	sp, r7
 80213d8:	bd80      	pop	{r7, pc}

080213da <LAN8742_GetLinkState>:
  *         LAN8742_STATUS_10MBITS_HALFDUPLEX  if 10Mb/s HD       
  *         LAN8742_STATUS_READ_ERROR if connot read register
  *         LAN8742_STATUS_WRITE_ERROR if connot write to register
  */
int32_t LAN8742_GetLinkState(lan8742_Object_t *pObj)
{
 80213da:	b580      	push	{r7, lr}
 80213dc:	b084      	sub	sp, #16
 80213de:	af00      	add	r7, sp, #0
 80213e0:	6078      	str	r0, [r7, #4]
  uint32_t readval = 0;
 80213e2:	2300      	movs	r3, #0
 80213e4:	60fb      	str	r3, [r7, #12]
  
  /* Read Status register  */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BSR, &readval) < 0)
 80213e6:	687b      	ldr	r3, [r7, #4]
 80213e8:	695b      	ldr	r3, [r3, #20]
 80213ea:	687a      	ldr	r2, [r7, #4]
 80213ec:	6810      	ldr	r0, [r2, #0]
 80213ee:	f107 020c 	add.w	r2, r7, #12
 80213f2:	2101      	movs	r1, #1
 80213f4:	4798      	blx	r3
 80213f6:	4603      	mov	r3, r0
 80213f8:	2b00      	cmp	r3, #0
 80213fa:	da02      	bge.n	8021402 <LAN8742_GetLinkState+0x28>
  {
    return LAN8742_STATUS_READ_ERROR;
 80213fc:	f06f 0304 	mvn.w	r3, #4
 8021400:	e06e      	b.n	80214e0 <LAN8742_GetLinkState+0x106>
  }
  
  /* Read Status register again */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BSR, &readval) < 0)
 8021402:	687b      	ldr	r3, [r7, #4]
 8021404:	695b      	ldr	r3, [r3, #20]
 8021406:	687a      	ldr	r2, [r7, #4]
 8021408:	6810      	ldr	r0, [r2, #0]
 802140a:	f107 020c 	add.w	r2, r7, #12
 802140e:	2101      	movs	r1, #1
 8021410:	4798      	blx	r3
 8021412:	4603      	mov	r3, r0
 8021414:	2b00      	cmp	r3, #0
 8021416:	da02      	bge.n	802141e <LAN8742_GetLinkState+0x44>
  {
    return LAN8742_STATUS_READ_ERROR;
 8021418:	f06f 0304 	mvn.w	r3, #4
 802141c:	e060      	b.n	80214e0 <LAN8742_GetLinkState+0x106>
  }
  
  if((readval & LAN8742_BSR_LINK_STATUS) == 0)
 802141e:	68fb      	ldr	r3, [r7, #12]
 8021420:	f003 0304 	and.w	r3, r3, #4
 8021424:	2b00      	cmp	r3, #0
 8021426:	d101      	bne.n	802142c <LAN8742_GetLinkState+0x52>
  {
    /* Return Link Down status */
    return LAN8742_STATUS_LINK_DOWN;    
 8021428:	2301      	movs	r3, #1
 802142a:	e059      	b.n	80214e0 <LAN8742_GetLinkState+0x106>
  }
  
  /* Check Auto negotiaition */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BCR, &readval) < 0)
 802142c:	687b      	ldr	r3, [r7, #4]
 802142e:	695b      	ldr	r3, [r3, #20]
 8021430:	687a      	ldr	r2, [r7, #4]
 8021432:	6810      	ldr	r0, [r2, #0]
 8021434:	f107 020c 	add.w	r2, r7, #12
 8021438:	2100      	movs	r1, #0
 802143a:	4798      	blx	r3
 802143c:	4603      	mov	r3, r0
 802143e:	2b00      	cmp	r3, #0
 8021440:	da02      	bge.n	8021448 <LAN8742_GetLinkState+0x6e>
  {
    return LAN8742_STATUS_READ_ERROR;
 8021442:	f06f 0304 	mvn.w	r3, #4
 8021446:	e04b      	b.n	80214e0 <LAN8742_GetLinkState+0x106>
  }
  
  if((readval & LAN8742_BCR_AUTONEGO_EN) != LAN8742_BCR_AUTONEGO_EN)
 8021448:	68fb      	ldr	r3, [r7, #12]
 802144a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 802144e:	2b00      	cmp	r3, #0
 8021450:	d11b      	bne.n	802148a <LAN8742_GetLinkState+0xb0>
  {
    if(((readval & LAN8742_BCR_SPEED_SELECT) == LAN8742_BCR_SPEED_SELECT) && ((readval & LAN8742_BCR_DUPLEX_MODE) == LAN8742_BCR_DUPLEX_MODE)) 
 8021452:	68fb      	ldr	r3, [r7, #12]
 8021454:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8021458:	2b00      	cmp	r3, #0
 802145a:	d006      	beq.n	802146a <LAN8742_GetLinkState+0x90>
 802145c:	68fb      	ldr	r3, [r7, #12]
 802145e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8021462:	2b00      	cmp	r3, #0
 8021464:	d001      	beq.n	802146a <LAN8742_GetLinkState+0x90>
    {
      return LAN8742_STATUS_100MBITS_FULLDUPLEX;
 8021466:	2302      	movs	r3, #2
 8021468:	e03a      	b.n	80214e0 <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_BCR_SPEED_SELECT) == LAN8742_BCR_SPEED_SELECT)
 802146a:	68fb      	ldr	r3, [r7, #12]
 802146c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8021470:	2b00      	cmp	r3, #0
 8021472:	d001      	beq.n	8021478 <LAN8742_GetLinkState+0x9e>
    {
      return LAN8742_STATUS_100MBITS_HALFDUPLEX;
 8021474:	2303      	movs	r3, #3
 8021476:	e033      	b.n	80214e0 <LAN8742_GetLinkState+0x106>
    }        
    else if ((readval & LAN8742_BCR_DUPLEX_MODE) == LAN8742_BCR_DUPLEX_MODE)
 8021478:	68fb      	ldr	r3, [r7, #12]
 802147a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 802147e:	2b00      	cmp	r3, #0
 8021480:	d001      	beq.n	8021486 <LAN8742_GetLinkState+0xac>
    {
      return LAN8742_STATUS_10MBITS_FULLDUPLEX;
 8021482:	2304      	movs	r3, #4
 8021484:	e02c      	b.n	80214e0 <LAN8742_GetLinkState+0x106>
    }
    else
    {
      return LAN8742_STATUS_10MBITS_HALFDUPLEX;
 8021486:	2305      	movs	r3, #5
 8021488:	e02a      	b.n	80214e0 <LAN8742_GetLinkState+0x106>
    }  		
  }
  else /* Auto Nego enabled */
  {
    if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_PHYSCSR, &readval) < 0)
 802148a:	687b      	ldr	r3, [r7, #4]
 802148c:	695b      	ldr	r3, [r3, #20]
 802148e:	687a      	ldr	r2, [r7, #4]
 8021490:	6810      	ldr	r0, [r2, #0]
 8021492:	f107 020c 	add.w	r2, r7, #12
 8021496:	211f      	movs	r1, #31
 8021498:	4798      	blx	r3
 802149a:	4603      	mov	r3, r0
 802149c:	2b00      	cmp	r3, #0
 802149e:	da02      	bge.n	80214a6 <LAN8742_GetLinkState+0xcc>
    {
      return LAN8742_STATUS_READ_ERROR;
 80214a0:	f06f 0304 	mvn.w	r3, #4
 80214a4:	e01c      	b.n	80214e0 <LAN8742_GetLinkState+0x106>
    }
    
    /* Check if auto nego not done */
    if((readval & LAN8742_PHYSCSR_AUTONEGO_DONE) == 0)
 80214a6:	68fb      	ldr	r3, [r7, #12]
 80214a8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80214ac:	2b00      	cmp	r3, #0
 80214ae:	d101      	bne.n	80214b4 <LAN8742_GetLinkState+0xda>
    {
      return LAN8742_STATUS_AUTONEGO_NOTDONE;
 80214b0:	2306      	movs	r3, #6
 80214b2:	e015      	b.n	80214e0 <LAN8742_GetLinkState+0x106>
    }
    
    if((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_100BTX_FD)
 80214b4:	68fb      	ldr	r3, [r7, #12]
 80214b6:	f003 031c 	and.w	r3, r3, #28
 80214ba:	2b18      	cmp	r3, #24
 80214bc:	d101      	bne.n	80214c2 <LAN8742_GetLinkState+0xe8>
    {
      return LAN8742_STATUS_100MBITS_FULLDUPLEX;
 80214be:	2302      	movs	r3, #2
 80214c0:	e00e      	b.n	80214e0 <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_100BTX_HD)
 80214c2:	68fb      	ldr	r3, [r7, #12]
 80214c4:	f003 031c 	and.w	r3, r3, #28
 80214c8:	2b08      	cmp	r3, #8
 80214ca:	d101      	bne.n	80214d0 <LAN8742_GetLinkState+0xf6>
    {
      return LAN8742_STATUS_100MBITS_HALFDUPLEX;
 80214cc:	2303      	movs	r3, #3
 80214ce:	e007      	b.n	80214e0 <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_10BT_FD)
 80214d0:	68fb      	ldr	r3, [r7, #12]
 80214d2:	f003 031c 	and.w	r3, r3, #28
 80214d6:	2b14      	cmp	r3, #20
 80214d8:	d101      	bne.n	80214de <LAN8742_GetLinkState+0x104>
    {
      return LAN8742_STATUS_10MBITS_FULLDUPLEX;
 80214da:	2304      	movs	r3, #4
 80214dc:	e000      	b.n	80214e0 <LAN8742_GetLinkState+0x106>
    }
    else
    {
      return LAN8742_STATUS_10MBITS_HALFDUPLEX;
 80214de:	2305      	movs	r3, #5
    }				
  }
}
 80214e0:	4618      	mov	r0, r3
 80214e2:	3710      	adds	r7, #16
 80214e4:	46bd      	mov	sp, r7
 80214e6:	bd80      	pop	{r7, pc}

080214e8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80214e8:	b580      	push	{r7, lr}
 80214ea:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80214ec:	4b0e      	ldr	r3, [pc, #56]	; (8021528 <HAL_Init+0x40>)
 80214ee:	681b      	ldr	r3, [r3, #0]
 80214f0:	4a0d      	ldr	r2, [pc, #52]	; (8021528 <HAL_Init+0x40>)
 80214f2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80214f6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80214f8:	4b0b      	ldr	r3, [pc, #44]	; (8021528 <HAL_Init+0x40>)
 80214fa:	681b      	ldr	r3, [r3, #0]
 80214fc:	4a0a      	ldr	r2, [pc, #40]	; (8021528 <HAL_Init+0x40>)
 80214fe:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8021502:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8021504:	4b08      	ldr	r3, [pc, #32]	; (8021528 <HAL_Init+0x40>)
 8021506:	681b      	ldr	r3, [r3, #0]
 8021508:	4a07      	ldr	r2, [pc, #28]	; (8021528 <HAL_Init+0x40>)
 802150a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 802150e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8021510:	2003      	movs	r0, #3
 8021512:	f000 f8fc 	bl	802170e <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8021516:	200f      	movs	r0, #15
 8021518:	f7ff fa4e 	bl	80209b8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 802151c:	f7ff f9f6 	bl	802090c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8021520:	2300      	movs	r3, #0
}
 8021522:	4618      	mov	r0, r3
 8021524:	bd80      	pop	{r7, pc}
 8021526:	bf00      	nop
 8021528:	40023c00 	.word	0x40023c00

0802152c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 802152c:	b480      	push	{r7}
 802152e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8021530:	4b06      	ldr	r3, [pc, #24]	; (802154c <HAL_IncTick+0x20>)
 8021532:	781b      	ldrb	r3, [r3, #0]
 8021534:	461a      	mov	r2, r3
 8021536:	4b06      	ldr	r3, [pc, #24]	; (8021550 <HAL_IncTick+0x24>)
 8021538:	681b      	ldr	r3, [r3, #0]
 802153a:	4413      	add	r3, r2
 802153c:	4a04      	ldr	r2, [pc, #16]	; (8021550 <HAL_IncTick+0x24>)
 802153e:	6013      	str	r3, [r2, #0]
}
 8021540:	bf00      	nop
 8021542:	46bd      	mov	sp, r7
 8021544:	f85d 7b04 	ldr.w	r7, [sp], #4
 8021548:	4770      	bx	lr
 802154a:	bf00      	nop
 802154c:	2000000c 	.word	0x2000000c
 8021550:	200003fc 	.word	0x200003fc

08021554 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8021554:	b480      	push	{r7}
 8021556:	af00      	add	r7, sp, #0
  return uwTick;
 8021558:	4b03      	ldr	r3, [pc, #12]	; (8021568 <HAL_GetTick+0x14>)
 802155a:	681b      	ldr	r3, [r3, #0]
}
 802155c:	4618      	mov	r0, r3
 802155e:	46bd      	mov	sp, r7
 8021560:	f85d 7b04 	ldr.w	r7, [sp], #4
 8021564:	4770      	bx	lr
 8021566:	bf00      	nop
 8021568:	200003fc 	.word	0x200003fc

0802156c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 802156c:	b580      	push	{r7, lr}
 802156e:	b084      	sub	sp, #16
 8021570:	af00      	add	r7, sp, #0
 8021572:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8021574:	f7ff ffee 	bl	8021554 <HAL_GetTick>
 8021578:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 802157a:	687b      	ldr	r3, [r7, #4]
 802157c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 802157e:	68fb      	ldr	r3, [r7, #12]
 8021580:	f1b3 3fff 	cmp.w	r3, #4294967295
 8021584:	d005      	beq.n	8021592 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8021586:	4b0a      	ldr	r3, [pc, #40]	; (80215b0 <HAL_Delay+0x44>)
 8021588:	781b      	ldrb	r3, [r3, #0]
 802158a:	461a      	mov	r2, r3
 802158c:	68fb      	ldr	r3, [r7, #12]
 802158e:	4413      	add	r3, r2
 8021590:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8021592:	bf00      	nop
 8021594:	f7ff ffde 	bl	8021554 <HAL_GetTick>
 8021598:	4602      	mov	r2, r0
 802159a:	68bb      	ldr	r3, [r7, #8]
 802159c:	1ad3      	subs	r3, r2, r3
 802159e:	68fa      	ldr	r2, [r7, #12]
 80215a0:	429a      	cmp	r2, r3
 80215a2:	d8f7      	bhi.n	8021594 <HAL_Delay+0x28>
  {
  }
}
 80215a4:	bf00      	nop
 80215a6:	bf00      	nop
 80215a8:	3710      	adds	r7, #16
 80215aa:	46bd      	mov	sp, r7
 80215ac:	bd80      	pop	{r7, pc}
 80215ae:	bf00      	nop
 80215b0:	2000000c 	.word	0x2000000c

080215b4 <__NVIC_SetPriorityGrouping>:
{
 80215b4:	b480      	push	{r7}
 80215b6:	b085      	sub	sp, #20
 80215b8:	af00      	add	r7, sp, #0
 80215ba:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80215bc:	687b      	ldr	r3, [r7, #4]
 80215be:	f003 0307 	and.w	r3, r3, #7
 80215c2:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80215c4:	4b0c      	ldr	r3, [pc, #48]	; (80215f8 <__NVIC_SetPriorityGrouping+0x44>)
 80215c6:	68db      	ldr	r3, [r3, #12]
 80215c8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80215ca:	68ba      	ldr	r2, [r7, #8]
 80215cc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80215d0:	4013      	ands	r3, r2
 80215d2:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80215d4:	68fb      	ldr	r3, [r7, #12]
 80215d6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80215d8:	68bb      	ldr	r3, [r7, #8]
 80215da:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80215dc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80215e0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80215e4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80215e6:	4a04      	ldr	r2, [pc, #16]	; (80215f8 <__NVIC_SetPriorityGrouping+0x44>)
 80215e8:	68bb      	ldr	r3, [r7, #8]
 80215ea:	60d3      	str	r3, [r2, #12]
}
 80215ec:	bf00      	nop
 80215ee:	3714      	adds	r7, #20
 80215f0:	46bd      	mov	sp, r7
 80215f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80215f6:	4770      	bx	lr
 80215f8:	e000ed00 	.word	0xe000ed00

080215fc <__NVIC_GetPriorityGrouping>:
{
 80215fc:	b480      	push	{r7}
 80215fe:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8021600:	4b04      	ldr	r3, [pc, #16]	; (8021614 <__NVIC_GetPriorityGrouping+0x18>)
 8021602:	68db      	ldr	r3, [r3, #12]
 8021604:	0a1b      	lsrs	r3, r3, #8
 8021606:	f003 0307 	and.w	r3, r3, #7
}
 802160a:	4618      	mov	r0, r3
 802160c:	46bd      	mov	sp, r7
 802160e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8021612:	4770      	bx	lr
 8021614:	e000ed00 	.word	0xe000ed00

08021618 <__NVIC_EnableIRQ>:
{
 8021618:	b480      	push	{r7}
 802161a:	b083      	sub	sp, #12
 802161c:	af00      	add	r7, sp, #0
 802161e:	4603      	mov	r3, r0
 8021620:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8021622:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8021626:	2b00      	cmp	r3, #0
 8021628:	db0b      	blt.n	8021642 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 802162a:	79fb      	ldrb	r3, [r7, #7]
 802162c:	f003 021f 	and.w	r2, r3, #31
 8021630:	4907      	ldr	r1, [pc, #28]	; (8021650 <__NVIC_EnableIRQ+0x38>)
 8021632:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8021636:	095b      	lsrs	r3, r3, #5
 8021638:	2001      	movs	r0, #1
 802163a:	fa00 f202 	lsl.w	r2, r0, r2
 802163e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8021642:	bf00      	nop
 8021644:	370c      	adds	r7, #12
 8021646:	46bd      	mov	sp, r7
 8021648:	f85d 7b04 	ldr.w	r7, [sp], #4
 802164c:	4770      	bx	lr
 802164e:	bf00      	nop
 8021650:	e000e100 	.word	0xe000e100

08021654 <__NVIC_SetPriority>:
{
 8021654:	b480      	push	{r7}
 8021656:	b083      	sub	sp, #12
 8021658:	af00      	add	r7, sp, #0
 802165a:	4603      	mov	r3, r0
 802165c:	6039      	str	r1, [r7, #0]
 802165e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8021660:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8021664:	2b00      	cmp	r3, #0
 8021666:	db0a      	blt.n	802167e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8021668:	683b      	ldr	r3, [r7, #0]
 802166a:	b2da      	uxtb	r2, r3
 802166c:	490c      	ldr	r1, [pc, #48]	; (80216a0 <__NVIC_SetPriority+0x4c>)
 802166e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8021672:	0112      	lsls	r2, r2, #4
 8021674:	b2d2      	uxtb	r2, r2
 8021676:	440b      	add	r3, r1
 8021678:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 802167c:	e00a      	b.n	8021694 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 802167e:	683b      	ldr	r3, [r7, #0]
 8021680:	b2da      	uxtb	r2, r3
 8021682:	4908      	ldr	r1, [pc, #32]	; (80216a4 <__NVIC_SetPriority+0x50>)
 8021684:	79fb      	ldrb	r3, [r7, #7]
 8021686:	f003 030f 	and.w	r3, r3, #15
 802168a:	3b04      	subs	r3, #4
 802168c:	0112      	lsls	r2, r2, #4
 802168e:	b2d2      	uxtb	r2, r2
 8021690:	440b      	add	r3, r1
 8021692:	761a      	strb	r2, [r3, #24]
}
 8021694:	bf00      	nop
 8021696:	370c      	adds	r7, #12
 8021698:	46bd      	mov	sp, r7
 802169a:	f85d 7b04 	ldr.w	r7, [sp], #4
 802169e:	4770      	bx	lr
 80216a0:	e000e100 	.word	0xe000e100
 80216a4:	e000ed00 	.word	0xe000ed00

080216a8 <NVIC_EncodePriority>:
{
 80216a8:	b480      	push	{r7}
 80216aa:	b089      	sub	sp, #36	; 0x24
 80216ac:	af00      	add	r7, sp, #0
 80216ae:	60f8      	str	r0, [r7, #12]
 80216b0:	60b9      	str	r1, [r7, #8]
 80216b2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80216b4:	68fb      	ldr	r3, [r7, #12]
 80216b6:	f003 0307 	and.w	r3, r3, #7
 80216ba:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80216bc:	69fb      	ldr	r3, [r7, #28]
 80216be:	f1c3 0307 	rsb	r3, r3, #7
 80216c2:	2b04      	cmp	r3, #4
 80216c4:	bf28      	it	cs
 80216c6:	2304      	movcs	r3, #4
 80216c8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80216ca:	69fb      	ldr	r3, [r7, #28]
 80216cc:	3304      	adds	r3, #4
 80216ce:	2b06      	cmp	r3, #6
 80216d0:	d902      	bls.n	80216d8 <NVIC_EncodePriority+0x30>
 80216d2:	69fb      	ldr	r3, [r7, #28]
 80216d4:	3b03      	subs	r3, #3
 80216d6:	e000      	b.n	80216da <NVIC_EncodePriority+0x32>
 80216d8:	2300      	movs	r3, #0
 80216da:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80216dc:	f04f 32ff 	mov.w	r2, #4294967295
 80216e0:	69bb      	ldr	r3, [r7, #24]
 80216e2:	fa02 f303 	lsl.w	r3, r2, r3
 80216e6:	43da      	mvns	r2, r3
 80216e8:	68bb      	ldr	r3, [r7, #8]
 80216ea:	401a      	ands	r2, r3
 80216ec:	697b      	ldr	r3, [r7, #20]
 80216ee:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80216f0:	f04f 31ff 	mov.w	r1, #4294967295
 80216f4:	697b      	ldr	r3, [r7, #20]
 80216f6:	fa01 f303 	lsl.w	r3, r1, r3
 80216fa:	43d9      	mvns	r1, r3
 80216fc:	687b      	ldr	r3, [r7, #4]
 80216fe:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8021700:	4313      	orrs	r3, r2
}
 8021702:	4618      	mov	r0, r3
 8021704:	3724      	adds	r7, #36	; 0x24
 8021706:	46bd      	mov	sp, r7
 8021708:	f85d 7b04 	ldr.w	r7, [sp], #4
 802170c:	4770      	bx	lr

0802170e <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 802170e:	b580      	push	{r7, lr}
 8021710:	b082      	sub	sp, #8
 8021712:	af00      	add	r7, sp, #0
 8021714:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8021716:	6878      	ldr	r0, [r7, #4]
 8021718:	f7ff ff4c 	bl	80215b4 <__NVIC_SetPriorityGrouping>
}
 802171c:	bf00      	nop
 802171e:	3708      	adds	r7, #8
 8021720:	46bd      	mov	sp, r7
 8021722:	bd80      	pop	{r7, pc}

08021724 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8021724:	b580      	push	{r7, lr}
 8021726:	b086      	sub	sp, #24
 8021728:	af00      	add	r7, sp, #0
 802172a:	4603      	mov	r3, r0
 802172c:	60b9      	str	r1, [r7, #8]
 802172e:	607a      	str	r2, [r7, #4]
 8021730:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8021732:	2300      	movs	r3, #0
 8021734:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8021736:	f7ff ff61 	bl	80215fc <__NVIC_GetPriorityGrouping>
 802173a:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 802173c:	687a      	ldr	r2, [r7, #4]
 802173e:	68b9      	ldr	r1, [r7, #8]
 8021740:	6978      	ldr	r0, [r7, #20]
 8021742:	f7ff ffb1 	bl	80216a8 <NVIC_EncodePriority>
 8021746:	4602      	mov	r2, r0
 8021748:	f997 300f 	ldrsb.w	r3, [r7, #15]
 802174c:	4611      	mov	r1, r2
 802174e:	4618      	mov	r0, r3
 8021750:	f7ff ff80 	bl	8021654 <__NVIC_SetPriority>
}
 8021754:	bf00      	nop
 8021756:	3718      	adds	r7, #24
 8021758:	46bd      	mov	sp, r7
 802175a:	bd80      	pop	{r7, pc}

0802175c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 802175c:	b580      	push	{r7, lr}
 802175e:	b082      	sub	sp, #8
 8021760:	af00      	add	r7, sp, #0
 8021762:	4603      	mov	r3, r0
 8021764:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8021766:	f997 3007 	ldrsb.w	r3, [r7, #7]
 802176a:	4618      	mov	r0, r3
 802176c:	f7ff ff54 	bl	8021618 <__NVIC_EnableIRQ>
}
 8021770:	bf00      	nop
 8021772:	3708      	adds	r7, #8
 8021774:	46bd      	mov	sp, r7
 8021776:	bd80      	pop	{r7, pc}

08021778 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8021778:	b580      	push	{r7, lr}
 802177a:	b084      	sub	sp, #16
 802177c:	af00      	add	r7, sp, #0
 802177e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 8021780:	687b      	ldr	r3, [r7, #4]
 8021782:	2b00      	cmp	r3, #0
 8021784:	d101      	bne.n	802178a <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 8021786:	2301      	movs	r3, #1
 8021788:	e06c      	b.n	8021864 <HAL_ETH_Init+0xec>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 802178a:	687b      	ldr	r3, [r7, #4]
 802178c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8021790:	2b00      	cmp	r3, #0
 8021792:	d106      	bne.n	80217a2 <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 8021794:	687b      	ldr	r3, [r7, #4]
 8021796:	2223      	movs	r2, #35	; 0x23
 8021798:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 802179c:	6878      	ldr	r0, [r7, #4]
 802179e:	f003 f939 	bl	8024a14 <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80217a2:	2300      	movs	r3, #0
 80217a4:	60bb      	str	r3, [r7, #8]
 80217a6:	4b31      	ldr	r3, [pc, #196]	; (802186c <HAL_ETH_Init+0xf4>)
 80217a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80217aa:	4a30      	ldr	r2, [pc, #192]	; (802186c <HAL_ETH_Init+0xf4>)
 80217ac:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80217b0:	6453      	str	r3, [r2, #68]	; 0x44
 80217b2:	4b2e      	ldr	r3, [pc, #184]	; (802186c <HAL_ETH_Init+0xf4>)
 80217b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80217b6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80217ba:	60bb      	str	r3, [r7, #8]
 80217bc:	68bb      	ldr	r3, [r7, #8]

  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 80217be:	4b2c      	ldr	r3, [pc, #176]	; (8021870 <HAL_ETH_Init+0xf8>)
 80217c0:	685b      	ldr	r3, [r3, #4]
 80217c2:	4a2b      	ldr	r2, [pc, #172]	; (8021870 <HAL_ETH_Init+0xf8>)
 80217c4:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80217c8:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 80217ca:	4b29      	ldr	r3, [pc, #164]	; (8021870 <HAL_ETH_Init+0xf8>)
 80217cc:	685a      	ldr	r2, [r3, #4]
 80217ce:	687b      	ldr	r3, [r7, #4]
 80217d0:	689b      	ldr	r3, [r3, #8]
 80217d2:	4927      	ldr	r1, [pc, #156]	; (8021870 <HAL_ETH_Init+0xf8>)
 80217d4:	4313      	orrs	r3, r2
 80217d6:	604b      	str	r3, [r1, #4]
  /* Dummy read to sync SYSCFG with ETH */
  (void)SYSCFG->PMC;
 80217d8:	4b25      	ldr	r3, [pc, #148]	; (8021870 <HAL_ETH_Init+0xf8>)
 80217da:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR);
 80217dc:	687b      	ldr	r3, [r7, #4]
 80217de:	681b      	ldr	r3, [r3, #0]
 80217e0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80217e4:	681b      	ldr	r3, [r3, #0]
 80217e6:	687a      	ldr	r2, [r7, #4]
 80217e8:	6812      	ldr	r2, [r2, #0]
 80217ea:	f043 0301 	orr.w	r3, r3, #1
 80217ee:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80217f2:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80217f4:	f7ff feae 	bl	8021554 <HAL_GetTick>
 80217f8:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 80217fa:	e011      	b.n	8021820 <HAL_ETH_Init+0xa8>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 80217fc:	f7ff feaa 	bl	8021554 <HAL_GetTick>
 8021800:	4602      	mov	r2, r0
 8021802:	68fb      	ldr	r3, [r7, #12]
 8021804:	1ad3      	subs	r3, r2, r3
 8021806:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 802180a:	d909      	bls.n	8021820 <HAL_ETH_Init+0xa8>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 802180c:	687b      	ldr	r3, [r7, #4]
 802180e:	2204      	movs	r2, #4
 8021810:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 8021814:	687b      	ldr	r3, [r7, #4]
 8021816:	22e0      	movs	r2, #224	; 0xe0
 8021818:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      /* Return Error */
      return HAL_ERROR;
 802181c:	2301      	movs	r3, #1
 802181e:	e021      	b.n	8021864 <HAL_ETH_Init+0xec>
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 8021820:	687b      	ldr	r3, [r7, #4]
 8021822:	681b      	ldr	r3, [r3, #0]
 8021824:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8021828:	681b      	ldr	r3, [r3, #0]
 802182a:	f003 0301 	and.w	r3, r3, #1
 802182e:	2b00      	cmp	r3, #0
 8021830:	d1e4      	bne.n	80217fc <HAL_ETH_Init+0x84>
    }
  }


  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 8021832:	6878      	ldr	r0, [r7, #4]
 8021834:	f000 ff4a 	bl	80226cc <ETH_MACDMAConfig>


  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 8021838:	6878      	ldr	r0, [r7, #4]
 802183a:	f000 fff1 	bl	8022820 <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 802183e:	6878      	ldr	r0, [r7, #4]
 8021840:	f001 f847 	bl	80228d2 <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 8021844:	687b      	ldr	r3, [r7, #4]
 8021846:	685b      	ldr	r3, [r3, #4]
 8021848:	461a      	mov	r2, r3
 802184a:	2100      	movs	r1, #0
 802184c:	6878      	ldr	r0, [r7, #4]
 802184e:	f000 ffaf 	bl	80227b0 <ETH_MACAddressConfig>

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 8021852:	687b      	ldr	r3, [r7, #4]
 8021854:	2200      	movs	r2, #0
 8021856:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  heth->gState = HAL_ETH_STATE_READY;
 802185a:	687b      	ldr	r3, [r7, #4]
 802185c:	2210      	movs	r2, #16
 802185e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8021862:	2300      	movs	r3, #0
}
 8021864:	4618      	mov	r0, r3
 8021866:	3710      	adds	r7, #16
 8021868:	46bd      	mov	sp, r7
 802186a:	bd80      	pop	{r7, pc}
 802186c:	40023800 	.word	0x40023800
 8021870:	40013800 	.word	0x40013800

08021874 <HAL_ETH_Start_IT>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Start_IT(ETH_HandleTypeDef *heth)
{
 8021874:	b580      	push	{r7, lr}
 8021876:	b084      	sub	sp, #16
 8021878:	af00      	add	r7, sp, #0
 802187a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg1;

  if (heth->gState == HAL_ETH_STATE_READY)
 802187c:	687b      	ldr	r3, [r7, #4]
 802187e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8021882:	2b10      	cmp	r3, #16
 8021884:	d17f      	bne.n	8021986 <HAL_ETH_Start_IT+0x112>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 8021886:	687b      	ldr	r3, [r7, #4]
 8021888:	2223      	movs	r2, #35	; 0x23
 802188a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* save IT mode to ETH Handle */
    heth->RxDescList.ItMode = 1U;
 802188e:	687b      	ldr	r3, [r7, #4]
 8021890:	2201      	movs	r2, #1
 8021892:	659a      	str	r2, [r3, #88]	; 0x58
    /* Disable MMC Interrupts */
    SET_BIT(heth->Instance->MACIMR, ETH_MACIMR_TSTIM | ETH_MACIMR_PMTIM);
 8021894:	687b      	ldr	r3, [r7, #4]
 8021896:	681b      	ldr	r3, [r3, #0]
 8021898:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 802189a:	687b      	ldr	r3, [r7, #4]
 802189c:	681b      	ldr	r3, [r3, #0]
 802189e:	f442 7202 	orr.w	r2, r2, #520	; 0x208
 80218a2:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable Rx MMC Interrupts */
    SET_BIT(heth->Instance->MMCRIMR, ETH_MMCRIMR_RGUFM | ETH_MMCRIMR_RFAEM | \
 80218a4:	687b      	ldr	r3, [r7, #4]
 80218a6:	681b      	ldr	r3, [r3, #0]
 80218a8:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
 80218ac:	687a      	ldr	r2, [r7, #4]
 80218ae:	6812      	ldr	r2, [r2, #0]
 80218b0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80218b4:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80218b8:	f8c2 310c 	str.w	r3, [r2, #268]	; 0x10c
            ETH_MMCRIMR_RFCEM);

    /* Disable Tx MMC Interrupts */
    SET_BIT(heth->Instance->MMCTIMR, ETH_MMCTIMR_TGFM | ETH_MMCTIMR_TGFMSCM | \
 80218bc:	687b      	ldr	r3, [r7, #4]
 80218be:	681b      	ldr	r3, [r3, #0]
 80218c0:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
 80218c4:	687b      	ldr	r3, [r7, #4]
 80218c6:	681b      	ldr	r3, [r3, #0]
 80218c8:	f442 1203 	orr.w	r2, r2, #2146304	; 0x20c000
 80218cc:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
            ETH_MMCTIMR_TGFSCM);

    /* Set nombre of descriptors to build */
    heth->RxDescList.RxBuildDescCnt = ETH_RX_DESC_CNT;
 80218d0:	687b      	ldr	r3, [r7, #4]
 80218d2:	2204      	movs	r2, #4
 80218d4:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Build all descriptors */
    ETH_UpdateDescriptor(heth);
 80218d6:	6878      	ldr	r0, [r7, #4]
 80218d8:	f000 f9f8 	bl	8021ccc <ETH_UpdateDescriptor>

    /* Enable the MAC transmission */
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
 80218dc:	687b      	ldr	r3, [r7, #4]
 80218de:	681b      	ldr	r3, [r3, #0]
 80218e0:	681a      	ldr	r2, [r3, #0]
 80218e2:	687b      	ldr	r3, [r7, #4]
 80218e4:	681b      	ldr	r3, [r3, #0]
 80218e6:	f042 0208 	orr.w	r2, r2, #8
 80218ea:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 80218ec:	687b      	ldr	r3, [r7, #4]
 80218ee:	681b      	ldr	r3, [r3, #0]
 80218f0:	681b      	ldr	r3, [r3, #0]
 80218f2:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 80218f4:	2001      	movs	r0, #1
 80218f6:	f7ff fe39 	bl	802156c <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 80218fa:	687b      	ldr	r3, [r7, #4]
 80218fc:	681b      	ldr	r3, [r3, #0]
 80218fe:	68fa      	ldr	r2, [r7, #12]
 8021900:	601a      	str	r2, [r3, #0]

    /* Enable the MAC reception */
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_RE);
 8021902:	687b      	ldr	r3, [r7, #4]
 8021904:	681b      	ldr	r3, [r3, #0]
 8021906:	681a      	ldr	r2, [r3, #0]
 8021908:	687b      	ldr	r3, [r7, #4]
 802190a:	681b      	ldr	r3, [r3, #0]
 802190c:	f042 0204 	orr.w	r2, r2, #4
 8021910:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 8021912:	687b      	ldr	r3, [r7, #4]
 8021914:	681b      	ldr	r3, [r3, #0]
 8021916:	681b      	ldr	r3, [r3, #0]
 8021918:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 802191a:	2001      	movs	r0, #1
 802191c:	f7ff fe26 	bl	802156c <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 8021920:	687b      	ldr	r3, [r7, #4]
 8021922:	681b      	ldr	r3, [r3, #0]
 8021924:	68fa      	ldr	r2, [r7, #12]
 8021926:	601a      	str	r2, [r3, #0]

    /* Flush Transmit FIFO */
    ETH_FlushTransmitFIFO(heth);
 8021928:	6878      	ldr	r0, [r7, #4]
 802192a:	f000 fd70 	bl	802240e <ETH_FlushTransmitFIFO>

    /* Enable the DMA transmission */
    SET_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_ST);
 802192e:	687b      	ldr	r3, [r7, #4]
 8021930:	681b      	ldr	r3, [r3, #0]
 8021932:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8021936:	699b      	ldr	r3, [r3, #24]
 8021938:	687a      	ldr	r2, [r7, #4]
 802193a:	6812      	ldr	r2, [r2, #0]
 802193c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8021940:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8021944:	6193      	str	r3, [r2, #24]

    /* Enable the DMA reception */
    SET_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_SR);
 8021946:	687b      	ldr	r3, [r7, #4]
 8021948:	681b      	ldr	r3, [r3, #0]
 802194a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 802194e:	699b      	ldr	r3, [r3, #24]
 8021950:	687a      	ldr	r2, [r7, #4]
 8021952:	6812      	ldr	r2, [r2, #0]
 8021954:	f043 0302 	orr.w	r3, r3, #2
 8021958:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 802195c:	6193      	str	r3, [r2, #24]
    /* Enable ETH DMA interrupts:
    - Tx complete interrupt
    - Rx complete interrupt
    - Fatal bus interrupt
    */
    __HAL_ETH_DMA_ENABLE_IT(heth, (ETH_DMAIER_NISE | ETH_DMAIER_RIE | ETH_DMAIER_TIE  |
 802195e:	687b      	ldr	r3, [r7, #4]
 8021960:	681b      	ldr	r3, [r3, #0]
 8021962:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8021966:	69db      	ldr	r3, [r3, #28]
 8021968:	687a      	ldr	r2, [r7, #4]
 802196a:	6812      	ldr	r2, [r2, #0]
 802196c:	f443 33d0 	orr.w	r3, r3, #106496	; 0x1a000
 8021970:	f043 03c1 	orr.w	r3, r3, #193	; 0xc1
 8021974:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8021978:	61d3      	str	r3, [r2, #28]
                                   ETH_DMAIER_FBEIE | ETH_DMAIER_AISE | ETH_DMAIER_RBUIE));

    heth->gState = HAL_ETH_STATE_STARTED;
 802197a:	687b      	ldr	r3, [r7, #4]
 802197c:	2223      	movs	r2, #35	; 0x23
 802197e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    return HAL_OK;
 8021982:	2300      	movs	r3, #0
 8021984:	e000      	b.n	8021988 <HAL_ETH_Start_IT+0x114>
  }
  else
  {
    return HAL_ERROR;
 8021986:	2301      	movs	r3, #1
  }
}
 8021988:	4618      	mov	r0, r3
 802198a:	3710      	adds	r7, #16
 802198c:	46bd      	mov	sp, r7
 802198e:	bd80      	pop	{r7, pc}

08021990 <HAL_ETH_Stop_IT>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Stop_IT(ETH_HandleTypeDef *heth)
{
 8021990:	b580      	push	{r7, lr}
 8021992:	b086      	sub	sp, #24
 8021994:	af00      	add	r7, sp, #0
 8021996:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t descindex;
  uint32_t tmpreg1;

  if (heth->gState == HAL_ETH_STATE_STARTED)
 8021998:	687b      	ldr	r3, [r7, #4]
 802199a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 802199e:	2b23      	cmp	r3, #35	; 0x23
 80219a0:	d170      	bne.n	8021a84 <HAL_ETH_Stop_IT+0xf4>
  {
    /* Set the ETH peripheral state to BUSY */
    heth->gState = HAL_ETH_STATE_BUSY;
 80219a2:	687b      	ldr	r3, [r7, #4]
 80219a4:	2223      	movs	r2, #35	; 0x23
 80219a6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    __HAL_ETH_DMA_DISABLE_IT(heth, (ETH_DMAIER_NISE | ETH_DMAIER_RIE | ETH_DMAIER_TIE  |
 80219aa:	687b      	ldr	r3, [r7, #4]
 80219ac:	681b      	ldr	r3, [r3, #0]
 80219ae:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80219b2:	69db      	ldr	r3, [r3, #28]
 80219b4:	687a      	ldr	r2, [r7, #4]
 80219b6:	6812      	ldr	r2, [r2, #0]
 80219b8:	f423 33d0 	bic.w	r3, r3, #106496	; 0x1a000
 80219bc:	f023 03c1 	bic.w	r3, r3, #193	; 0xc1
 80219c0:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80219c4:	61d3      	str	r3, [r2, #28]
                                    ETH_DMAIER_FBEIE | ETH_DMAIER_AISE | ETH_DMAIER_RBUIE));

    /* Disable the DMA transmission */
    CLEAR_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_ST);
 80219c6:	687b      	ldr	r3, [r7, #4]
 80219c8:	681b      	ldr	r3, [r3, #0]
 80219ca:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80219ce:	699b      	ldr	r3, [r3, #24]
 80219d0:	687a      	ldr	r2, [r7, #4]
 80219d2:	6812      	ldr	r2, [r2, #0]
 80219d4:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80219d8:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80219dc:	6193      	str	r3, [r2, #24]

    /* Disable the DMA reception */
    CLEAR_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_SR);
 80219de:	687b      	ldr	r3, [r7, #4]
 80219e0:	681b      	ldr	r3, [r3, #0]
 80219e2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80219e6:	699b      	ldr	r3, [r3, #24]
 80219e8:	687a      	ldr	r2, [r7, #4]
 80219ea:	6812      	ldr	r2, [r2, #0]
 80219ec:	f023 0302 	bic.w	r3, r3, #2
 80219f0:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80219f4:	6193      	str	r3, [r2, #24]

    /* Disable the MAC reception */
    CLEAR_BIT(heth->Instance->MACCR, ETH_MACCR_RE);
 80219f6:	687b      	ldr	r3, [r7, #4]
 80219f8:	681b      	ldr	r3, [r3, #0]
 80219fa:	681a      	ldr	r2, [r3, #0]
 80219fc:	687b      	ldr	r3, [r7, #4]
 80219fe:	681b      	ldr	r3, [r3, #0]
 8021a00:	f022 0204 	bic.w	r2, r2, #4
 8021a04:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 8021a06:	687b      	ldr	r3, [r7, #4]
 8021a08:	681b      	ldr	r3, [r3, #0]
 8021a0a:	681b      	ldr	r3, [r3, #0]
 8021a0c:	613b      	str	r3, [r7, #16]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8021a0e:	2001      	movs	r0, #1
 8021a10:	f7ff fdac 	bl	802156c <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 8021a14:	687b      	ldr	r3, [r7, #4]
 8021a16:	681b      	ldr	r3, [r3, #0]
 8021a18:	693a      	ldr	r2, [r7, #16]
 8021a1a:	601a      	str	r2, [r3, #0]

    /* Flush Transmit FIFO */
    ETH_FlushTransmitFIFO(heth);
 8021a1c:	6878      	ldr	r0, [r7, #4]
 8021a1e:	f000 fcf6 	bl	802240e <ETH_FlushTransmitFIFO>

    /* Disable the MAC transmission */
    CLEAR_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
 8021a22:	687b      	ldr	r3, [r7, #4]
 8021a24:	681b      	ldr	r3, [r3, #0]
 8021a26:	681a      	ldr	r2, [r3, #0]
 8021a28:	687b      	ldr	r3, [r7, #4]
 8021a2a:	681b      	ldr	r3, [r3, #0]
 8021a2c:	f022 0208 	bic.w	r2, r2, #8
 8021a30:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 8021a32:	687b      	ldr	r3, [r7, #4]
 8021a34:	681b      	ldr	r3, [r3, #0]
 8021a36:	681b      	ldr	r3, [r3, #0]
 8021a38:	613b      	str	r3, [r7, #16]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8021a3a:	2001      	movs	r0, #1
 8021a3c:	f7ff fd96 	bl	802156c <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 8021a40:	687b      	ldr	r3, [r7, #4]
 8021a42:	681b      	ldr	r3, [r3, #0]
 8021a44:	693a      	ldr	r2, [r7, #16]
 8021a46:	601a      	str	r2, [r3, #0]

    /* Clear IOC bit to all Rx descriptors */
    for (descindex = 0; descindex < (uint32_t)ETH_RX_DESC_CNT; descindex++)
 8021a48:	2300      	movs	r3, #0
 8021a4a:	617b      	str	r3, [r7, #20]
 8021a4c:	e00e      	b.n	8021a6c <HAL_ETH_Stop_IT+0xdc>
    {
      dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descindex];
 8021a4e:	687b      	ldr	r3, [r7, #4]
 8021a50:	697a      	ldr	r2, [r7, #20]
 8021a52:	3212      	adds	r2, #18
 8021a54:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8021a58:	60fb      	str	r3, [r7, #12]
      SET_BIT(dmarxdesc->DESC1, ETH_DMARXDESC_DIC);
 8021a5a:	68fb      	ldr	r3, [r7, #12]
 8021a5c:	685b      	ldr	r3, [r3, #4]
 8021a5e:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8021a62:	68fb      	ldr	r3, [r7, #12]
 8021a64:	605a      	str	r2, [r3, #4]
    for (descindex = 0; descindex < (uint32_t)ETH_RX_DESC_CNT; descindex++)
 8021a66:	697b      	ldr	r3, [r7, #20]
 8021a68:	3301      	adds	r3, #1
 8021a6a:	617b      	str	r3, [r7, #20]
 8021a6c:	697b      	ldr	r3, [r7, #20]
 8021a6e:	2b03      	cmp	r3, #3
 8021a70:	d9ed      	bls.n	8021a4e <HAL_ETH_Stop_IT+0xbe>
    }

    heth->RxDescList.ItMode = 0U;
 8021a72:	687b      	ldr	r3, [r7, #4]
 8021a74:	2200      	movs	r2, #0
 8021a76:	659a      	str	r2, [r3, #88]	; 0x58

    heth->gState = HAL_ETH_STATE_READY;
 8021a78:	687b      	ldr	r3, [r7, #4]
 8021a7a:	2210      	movs	r2, #16
 8021a7c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Return function status */
    return HAL_OK;
 8021a80:	2300      	movs	r3, #0
 8021a82:	e000      	b.n	8021a86 <HAL_ETH_Stop_IT+0xf6>
  }
  else
  {
    return HAL_ERROR;
 8021a84:	2301      	movs	r3, #1
  }
}
 8021a86:	4618      	mov	r0, r3
 8021a88:	3718      	adds	r7, #24
 8021a8a:	46bd      	mov	sp, r7
 8021a8c:	bd80      	pop	{r7, pc}

08021a8e <HAL_ETH_Transmit_IT>:
  *         the configuration information for ETHERNET module
  * @param  pTxConfig: Hold the configuration of packet to be transmitted
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Transmit_IT(ETH_HandleTypeDef *heth, ETH_TxPacketConfig *pTxConfig)
{
 8021a8e:	b580      	push	{r7, lr}
 8021a90:	b082      	sub	sp, #8
 8021a92:	af00      	add	r7, sp, #0
 8021a94:	6078      	str	r0, [r7, #4]
 8021a96:	6039      	str	r1, [r7, #0]
  if (pTxConfig == NULL)
 8021a98:	683b      	ldr	r3, [r7, #0]
 8021a9a:	2b00      	cmp	r3, #0
 8021a9c:	d109      	bne.n	8021ab2 <HAL_ETH_Transmit_IT+0x24>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_PARAM;
 8021a9e:	687b      	ldr	r3, [r7, #4]
 8021aa0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8021aa4:	f043 0201 	orr.w	r2, r3, #1
 8021aa8:	687b      	ldr	r3, [r7, #4]
 8021aaa:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    return HAL_ERROR;
 8021aae:	2301      	movs	r3, #1
 8021ab0:	e045      	b.n	8021b3e <HAL_ETH_Transmit_IT+0xb0>
  }

  if (heth->gState == HAL_ETH_STATE_STARTED)
 8021ab2:	687b      	ldr	r3, [r7, #4]
 8021ab4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8021ab8:	2b23      	cmp	r3, #35	; 0x23
 8021aba:	d13f      	bne.n	8021b3c <HAL_ETH_Transmit_IT+0xae>
  {
    /* Save the packet pointer to release.  */
    heth->TxDescList.CurrentPacketAddress = (uint32_t *)pTxConfig->pData;
 8021abc:	683b      	ldr	r3, [r7, #0]
 8021abe:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8021ac0:	687b      	ldr	r3, [r7, #4]
 8021ac2:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Config DMA Tx descriptor by Tx Packet info */
    if (ETH_Prepare_Tx_Descriptors(heth, pTxConfig, 1) != HAL_ETH_ERROR_NONE)
 8021ac4:	2201      	movs	r2, #1
 8021ac6:	6839      	ldr	r1, [r7, #0]
 8021ac8:	6878      	ldr	r0, [r7, #4]
 8021aca:	f000 ff6f 	bl	80229ac <ETH_Prepare_Tx_Descriptors>
 8021ace:	4603      	mov	r3, r0
 8021ad0:	2b00      	cmp	r3, #0
 8021ad2:	d009      	beq.n	8021ae8 <HAL_ETH_Transmit_IT+0x5a>
    {
      heth->ErrorCode |= HAL_ETH_ERROR_BUSY;
 8021ad4:	687b      	ldr	r3, [r7, #4]
 8021ad6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8021ada:	f043 0202 	orr.w	r2, r3, #2
 8021ade:	687b      	ldr	r3, [r7, #4]
 8021ae0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      return HAL_ERROR;
 8021ae4:	2301      	movs	r3, #1
 8021ae6:	e02a      	b.n	8021b3e <HAL_ETH_Transmit_IT+0xb0>
  __ASM volatile ("dsb 0xF":::"memory");
 8021ae8:	f3bf 8f4f 	dsb	sy
}
 8021aec:	bf00      	nop

    /* Ensure completion of descriptor preparation before transmission start */
    __DSB();

    /* Incr current tx desc index */
    INCR_TX_DESC_INDEX(heth->TxDescList.CurTxDesc, 1U);
 8021aee:	687b      	ldr	r3, [r7, #4]
 8021af0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8021af2:	1c5a      	adds	r2, r3, #1
 8021af4:	687b      	ldr	r3, [r7, #4]
 8021af6:	629a      	str	r2, [r3, #40]	; 0x28
 8021af8:	687b      	ldr	r3, [r7, #4]
 8021afa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8021afc:	2b03      	cmp	r3, #3
 8021afe:	d904      	bls.n	8021b0a <HAL_ETH_Transmit_IT+0x7c>
 8021b00:	687b      	ldr	r3, [r7, #4]
 8021b02:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8021b04:	1f1a      	subs	r2, r3, #4
 8021b06:	687b      	ldr	r3, [r7, #4]
 8021b08:	629a      	str	r2, [r3, #40]	; 0x28

    /* Start transmission */
    /* issue a poll command to Tx DMA by writing address of next immediate free descriptor */
    if (((heth->Instance)->DMASR & ETH_DMASR_TBUS) != (uint32_t)RESET)
 8021b0a:	687b      	ldr	r3, [r7, #4]
 8021b0c:	681b      	ldr	r3, [r3, #0]
 8021b0e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8021b12:	695b      	ldr	r3, [r3, #20]
 8021b14:	f003 0304 	and.w	r3, r3, #4
 8021b18:	2b00      	cmp	r3, #0
 8021b1a:	d00d      	beq.n	8021b38 <HAL_ETH_Transmit_IT+0xaa>
    {
      /* Clear TBUS ETHERNET DMA flag */
      (heth->Instance)->DMASR = ETH_DMASR_TBUS;
 8021b1c:	687b      	ldr	r3, [r7, #4]
 8021b1e:	681b      	ldr	r3, [r3, #0]
 8021b20:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8021b24:	461a      	mov	r2, r3
 8021b26:	2304      	movs	r3, #4
 8021b28:	6153      	str	r3, [r2, #20]
      /* Resume DMA transmission*/
      (heth->Instance)->DMATPDR = 0U;
 8021b2a:	687b      	ldr	r3, [r7, #4]
 8021b2c:	681b      	ldr	r3, [r3, #0]
 8021b2e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8021b32:	461a      	mov	r2, r3
 8021b34:	2300      	movs	r3, #0
 8021b36:	6053      	str	r3, [r2, #4]
    }

    return HAL_OK;
 8021b38:	2300      	movs	r3, #0
 8021b3a:	e000      	b.n	8021b3e <HAL_ETH_Transmit_IT+0xb0>

  }
  else
  {
    return HAL_ERROR;
 8021b3c:	2301      	movs	r3, #1
  }
}
 8021b3e:	4618      	mov	r0, r3
 8021b40:	3708      	adds	r7, #8
 8021b42:	46bd      	mov	sp, r7
 8021b44:	bd80      	pop	{r7, pc}

08021b46 <HAL_ETH_ReadData>:
  *         the configuration information for ETHERNET module
  * @param  pAppBuff: Pointer to an application buffer to receive the packet.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadData(ETH_HandleTypeDef *heth, void **pAppBuff)
{
 8021b46:	b580      	push	{r7, lr}
 8021b48:	b088      	sub	sp, #32
 8021b4a:	af00      	add	r7, sp, #0
 8021b4c:	6078      	str	r0, [r7, #4]
 8021b4e:	6039      	str	r1, [r7, #0]
  uint32_t descidx;
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t desccnt = 0U;
 8021b50:	2300      	movs	r3, #0
 8021b52:	617b      	str	r3, [r7, #20]
  uint32_t desccntmax;
  uint32_t bufflength;
  uint8_t rxdataready = 0U;
 8021b54:	2300      	movs	r3, #0
 8021b56:	73fb      	strb	r3, [r7, #15]


  if (pAppBuff == NULL)
 8021b58:	683b      	ldr	r3, [r7, #0]
 8021b5a:	2b00      	cmp	r3, #0
 8021b5c:	d109      	bne.n	8021b72 <HAL_ETH_ReadData+0x2c>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_PARAM;
 8021b5e:	687b      	ldr	r3, [r7, #4]
 8021b60:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8021b64:	f043 0201 	orr.w	r2, r3, #1
 8021b68:	687b      	ldr	r3, [r7, #4]
 8021b6a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    return HAL_ERROR;
 8021b6e:	2301      	movs	r3, #1
 8021b70:	e0a8      	b.n	8021cc4 <HAL_ETH_ReadData+0x17e>
  }

  if (heth->gState != HAL_ETH_STATE_STARTED)
 8021b72:	687b      	ldr	r3, [r7, #4]
 8021b74:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8021b78:	2b23      	cmp	r3, #35	; 0x23
 8021b7a:	d001      	beq.n	8021b80 <HAL_ETH_ReadData+0x3a>
  {
    return HAL_ERROR;
 8021b7c:	2301      	movs	r3, #1
 8021b7e:	e0a1      	b.n	8021cc4 <HAL_ETH_ReadData+0x17e>
  }

  descidx = heth->RxDescList.RxDescIdx;
 8021b80:	687b      	ldr	r3, [r7, #4]
 8021b82:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8021b84:	61fb      	str	r3, [r7, #28]
  dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 8021b86:	687b      	ldr	r3, [r7, #4]
 8021b88:	69fa      	ldr	r2, [r7, #28]
 8021b8a:	3212      	adds	r2, #18
 8021b8c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8021b90:	61bb      	str	r3, [r7, #24]
  desccntmax = ETH_RX_DESC_CNT - heth->RxDescList.RxBuildDescCnt;
 8021b92:	687b      	ldr	r3, [r7, #4]
 8021b94:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8021b96:	f1c3 0304 	rsb	r3, r3, #4
 8021b9a:	60bb      	str	r3, [r7, #8]

  /* Check if descriptor is not owned by DMA */
  while ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 8021b9c:	e06a      	b.n	8021c74 <HAL_ETH_ReadData+0x12e>
         && (rxdataready == 0U))
  {
    if (READ_BIT(dmarxdesc->DESC0,  ETH_DMARXDESC_LS)  != (uint32_t)RESET)
 8021b9e:	69bb      	ldr	r3, [r7, #24]
 8021ba0:	681b      	ldr	r3, [r3, #0]
 8021ba2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8021ba6:	2b00      	cmp	r3, #0
 8021ba8:	d007      	beq.n	8021bba <HAL_ETH_ReadData+0x74>
    {
      /* Get timestamp high */
      heth->RxDescList.TimeStamp.TimeStampHigh = dmarxdesc->DESC6;
 8021baa:	69bb      	ldr	r3, [r7, #24]
 8021bac:	699a      	ldr	r2, [r3, #24]
 8021bae:	687b      	ldr	r3, [r7, #4]
 8021bb0:	679a      	str	r2, [r3, #120]	; 0x78
      /* Get timestamp low */
      heth->RxDescList.TimeStamp.TimeStampLow  = dmarxdesc->DESC7;
 8021bb2:	69bb      	ldr	r3, [r7, #24]
 8021bb4:	69da      	ldr	r2, [r3, #28]
 8021bb6:	687b      	ldr	r3, [r7, #4]
 8021bb8:	675a      	str	r2, [r3, #116]	; 0x74
    }
    if ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_FS) != (uint32_t)RESET) || (heth->RxDescList.pRxStart != NULL))
 8021bba:	69bb      	ldr	r3, [r7, #24]
 8021bbc:	681b      	ldr	r3, [r3, #0]
 8021bbe:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8021bc2:	2b00      	cmp	r3, #0
 8021bc4:	d103      	bne.n	8021bce <HAL_ETH_ReadData+0x88>
 8021bc6:	687b      	ldr	r3, [r7, #4]
 8021bc8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8021bca:	2b00      	cmp	r3, #0
 8021bcc:	d040      	beq.n	8021c50 <HAL_ETH_ReadData+0x10a>
    {
      /* Check first descriptor */
      if (READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_FS) != (uint32_t)RESET)
 8021bce:	69bb      	ldr	r3, [r7, #24]
 8021bd0:	681b      	ldr	r3, [r3, #0]
 8021bd2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8021bd6:	2b00      	cmp	r3, #0
 8021bd8:	d005      	beq.n	8021be6 <HAL_ETH_ReadData+0xa0>
      {
        heth->RxDescList.RxDescCnt = 0;
 8021bda:	687b      	ldr	r3, [r7, #4]
 8021bdc:	2200      	movs	r2, #0
 8021bde:	661a      	str	r2, [r3, #96]	; 0x60
        heth->RxDescList.RxDataLength = 0;
 8021be0:	687b      	ldr	r3, [r7, #4]
 8021be2:	2200      	movs	r2, #0
 8021be4:	665a      	str	r2, [r3, #100]	; 0x64
      }

      /* Check if last descriptor */
      bufflength = heth->Init.RxBuffLen;
 8021be6:	687b      	ldr	r3, [r7, #4]
 8021be8:	695b      	ldr	r3, [r3, #20]
 8021bea:	613b      	str	r3, [r7, #16]
      if (READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_LS) != (uint32_t)RESET)
 8021bec:	69bb      	ldr	r3, [r7, #24]
 8021bee:	681b      	ldr	r3, [r3, #0]
 8021bf0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8021bf4:	2b00      	cmp	r3, #0
 8021bf6:	d00c      	beq.n	8021c12 <HAL_ETH_ReadData+0xcc>
      {
        /* Get the Frame Length of the received packet: substruct 4 bytes of the CRC */
        bufflength = ((dmarxdesc->DESC0 & ETH_DMARXDESC_FL) >> ETH_DMARXDESC_FRAMELENGTHSHIFT) - 4U;
 8021bf8:	69bb      	ldr	r3, [r7, #24]
 8021bfa:	681b      	ldr	r3, [r3, #0]
 8021bfc:	0c1b      	lsrs	r3, r3, #16
 8021bfe:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8021c02:	3b04      	subs	r3, #4
 8021c04:	613b      	str	r3, [r7, #16]

        /* Save Last descriptor index */
        heth->RxDescList.pRxLastRxDesc = dmarxdesc->DESC0;
 8021c06:	69bb      	ldr	r3, [r7, #24]
 8021c08:	681a      	ldr	r2, [r3, #0]
 8021c0a:	687b      	ldr	r3, [r7, #4]
 8021c0c:	671a      	str	r2, [r3, #112]	; 0x70

        /* Packet ready */
        rxdataready = 1;
 8021c0e:	2301      	movs	r3, #1
 8021c10:	73fb      	strb	r3, [r7, #15]
      }

      /* Link data */
      WRITE_REG(dmarxdesc->BackupAddr0, dmarxdesc->DESC2);
 8021c12:	69bb      	ldr	r3, [r7, #24]
 8021c14:	689a      	ldr	r2, [r3, #8]
 8021c16:	69bb      	ldr	r3, [r7, #24]
 8021c18:	621a      	str	r2, [r3, #32]
      /*Call registered Link callback*/
      heth->rxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
                           (uint8_t *)dmarxdesc->BackupAddr0, bufflength);
#else
      /* Link callback */
      HAL_ETH_RxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
 8021c1a:	687b      	ldr	r3, [r7, #4]
 8021c1c:	f103 007c 	add.w	r0, r3, #124	; 0x7c
 8021c20:	687b      	ldr	r3, [r7, #4]
 8021c22:	f103 0180 	add.w	r1, r3, #128	; 0x80
                             (uint8_t *)dmarxdesc->BackupAddr0, (uint16_t) bufflength);
 8021c26:	69bb      	ldr	r3, [r7, #24]
 8021c28:	6a1b      	ldr	r3, [r3, #32]
      HAL_ETH_RxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
 8021c2a:	461a      	mov	r2, r3
 8021c2c:	693b      	ldr	r3, [r7, #16]
 8021c2e:	b29b      	uxth	r3, r3
 8021c30:	f003 f8aa 	bl	8024d88 <HAL_ETH_RxLinkCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
      heth->RxDescList.RxDescCnt++;
 8021c34:	687b      	ldr	r3, [r7, #4]
 8021c36:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8021c38:	1c5a      	adds	r2, r3, #1
 8021c3a:	687b      	ldr	r3, [r7, #4]
 8021c3c:	661a      	str	r2, [r3, #96]	; 0x60
      heth->RxDescList.RxDataLength += bufflength;
 8021c3e:	687b      	ldr	r3, [r7, #4]
 8021c40:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8021c42:	693b      	ldr	r3, [r7, #16]
 8021c44:	441a      	add	r2, r3
 8021c46:	687b      	ldr	r3, [r7, #4]
 8021c48:	665a      	str	r2, [r3, #100]	; 0x64

      /* Clear buffer pointer */
      dmarxdesc->BackupAddr0 = 0;
 8021c4a:	69bb      	ldr	r3, [r7, #24]
 8021c4c:	2200      	movs	r2, #0
 8021c4e:	621a      	str	r2, [r3, #32]
    }

    /* Increment current rx descriptor index */
    INCR_RX_DESC_INDEX(descidx, 1U);
 8021c50:	69fb      	ldr	r3, [r7, #28]
 8021c52:	3301      	adds	r3, #1
 8021c54:	61fb      	str	r3, [r7, #28]
 8021c56:	69fb      	ldr	r3, [r7, #28]
 8021c58:	2b03      	cmp	r3, #3
 8021c5a:	d902      	bls.n	8021c62 <HAL_ETH_ReadData+0x11c>
 8021c5c:	69fb      	ldr	r3, [r7, #28]
 8021c5e:	3b04      	subs	r3, #4
 8021c60:	61fb      	str	r3, [r7, #28]
    /* Get current descriptor address */
    dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 8021c62:	687b      	ldr	r3, [r7, #4]
 8021c64:	69fa      	ldr	r2, [r7, #28]
 8021c66:	3212      	adds	r2, #18
 8021c68:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8021c6c:	61bb      	str	r3, [r7, #24]
    desccnt++;
 8021c6e:	697b      	ldr	r3, [r7, #20]
 8021c70:	3301      	adds	r3, #1
 8021c72:	617b      	str	r3, [r7, #20]
  while ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 8021c74:	69bb      	ldr	r3, [r7, #24]
 8021c76:	681b      	ldr	r3, [r3, #0]
 8021c78:	2b00      	cmp	r3, #0
 8021c7a:	db06      	blt.n	8021c8a <HAL_ETH_ReadData+0x144>
 8021c7c:	697a      	ldr	r2, [r7, #20]
 8021c7e:	68bb      	ldr	r3, [r7, #8]
 8021c80:	429a      	cmp	r2, r3
 8021c82:	d202      	bcs.n	8021c8a <HAL_ETH_ReadData+0x144>
         && (rxdataready == 0U))
 8021c84:	7bfb      	ldrb	r3, [r7, #15]
 8021c86:	2b00      	cmp	r3, #0
 8021c88:	d089      	beq.n	8021b9e <HAL_ETH_ReadData+0x58>
  }

  heth->RxDescList.RxBuildDescCnt += desccnt;
 8021c8a:	687b      	ldr	r3, [r7, #4]
 8021c8c:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8021c8e:	697b      	ldr	r3, [r7, #20]
 8021c90:	441a      	add	r2, r3
 8021c92:	687b      	ldr	r3, [r7, #4]
 8021c94:	66da      	str	r2, [r3, #108]	; 0x6c
  if ((heth->RxDescList.RxBuildDescCnt) != 0U)
 8021c96:	687b      	ldr	r3, [r7, #4]
 8021c98:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8021c9a:	2b00      	cmp	r3, #0
 8021c9c:	d002      	beq.n	8021ca4 <HAL_ETH_ReadData+0x15e>
  {
    /* Update Descriptors */
    ETH_UpdateDescriptor(heth);
 8021c9e:	6878      	ldr	r0, [r7, #4]
 8021ca0:	f000 f814 	bl	8021ccc <ETH_UpdateDescriptor>
  }

  heth->RxDescList.RxDescIdx = descidx;
 8021ca4:	687b      	ldr	r3, [r7, #4]
 8021ca6:	69fa      	ldr	r2, [r7, #28]
 8021ca8:	65da      	str	r2, [r3, #92]	; 0x5c

  if (rxdataready == 1U)
 8021caa:	7bfb      	ldrb	r3, [r7, #15]
 8021cac:	2b01      	cmp	r3, #1
 8021cae:	d108      	bne.n	8021cc2 <HAL_ETH_ReadData+0x17c>
  {
    /* Return received packet */
    *pAppBuff = heth->RxDescList.pRxStart;
 8021cb0:	687b      	ldr	r3, [r7, #4]
 8021cb2:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 8021cb4:	683b      	ldr	r3, [r7, #0]
 8021cb6:	601a      	str	r2, [r3, #0]
    /* Reset first element */
    heth->RxDescList.pRxStart = NULL;
 8021cb8:	687b      	ldr	r3, [r7, #4]
 8021cba:	2200      	movs	r2, #0
 8021cbc:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8021cbe:	2300      	movs	r3, #0
 8021cc0:	e000      	b.n	8021cc4 <HAL_ETH_ReadData+0x17e>
  }

  /* Packet not ready */
  return HAL_ERROR;
 8021cc2:	2301      	movs	r3, #1
}
 8021cc4:	4618      	mov	r0, r3
 8021cc6:	3720      	adds	r7, #32
 8021cc8:	46bd      	mov	sp, r7
 8021cca:	bd80      	pop	{r7, pc}

08021ccc <ETH_UpdateDescriptor>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_UpdateDescriptor(ETH_HandleTypeDef *heth)
{
 8021ccc:	b580      	push	{r7, lr}
 8021cce:	b088      	sub	sp, #32
 8021cd0:	af00      	add	r7, sp, #0
 8021cd2:	6078      	str	r0, [r7, #4]
  uint32_t descidx;
  uint32_t desccount;
  ETH_DMADescTypeDef *dmarxdesc;
  uint8_t *buff = NULL;
 8021cd4:	2300      	movs	r3, #0
 8021cd6:	60fb      	str	r3, [r7, #12]
  uint8_t allocStatus = 1U;
 8021cd8:	2301      	movs	r3, #1
 8021cda:	74fb      	strb	r3, [r7, #19]

  descidx = heth->RxDescList.RxBuildDescIdx;
 8021cdc:	687b      	ldr	r3, [r7, #4]
 8021cde:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8021ce0:	61fb      	str	r3, [r7, #28]
  dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 8021ce2:	687b      	ldr	r3, [r7, #4]
 8021ce4:	69fa      	ldr	r2, [r7, #28]
 8021ce6:	3212      	adds	r2, #18
 8021ce8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8021cec:	617b      	str	r3, [r7, #20]
  desccount = heth->RxDescList.RxBuildDescCnt;
 8021cee:	687b      	ldr	r3, [r7, #4]
 8021cf0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8021cf2:	61bb      	str	r3, [r7, #24]

  while ((desccount > 0U) && (allocStatus != 0U))
 8021cf4:	e040      	b.n	8021d78 <ETH_UpdateDescriptor+0xac>
  {
    /* Check if a buffer's attached the descriptor */
    if (READ_REG(dmarxdesc->BackupAddr0) == 0U)
 8021cf6:	697b      	ldr	r3, [r7, #20]
 8021cf8:	6a1b      	ldr	r3, [r3, #32]
 8021cfa:	2b00      	cmp	r3, #0
 8021cfc:	d112      	bne.n	8021d24 <ETH_UpdateDescriptor+0x58>
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /*Call registered Allocate callback*/
      heth->rxAllocateCallback(&buff);
#else
      /* Allocate callback */
      HAL_ETH_RxAllocateCallback(&buff);
 8021cfe:	f107 030c 	add.w	r3, r7, #12
 8021d02:	4618      	mov	r0, r3
 8021d04:	f003 f810 	bl	8024d28 <HAL_ETH_RxAllocateCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
      if (buff == NULL)
 8021d08:	68fb      	ldr	r3, [r7, #12]
 8021d0a:	2b00      	cmp	r3, #0
 8021d0c:	d102      	bne.n	8021d14 <ETH_UpdateDescriptor+0x48>
      {
        allocStatus = 0U;
 8021d0e:	2300      	movs	r3, #0
 8021d10:	74fb      	strb	r3, [r7, #19]
 8021d12:	e007      	b.n	8021d24 <ETH_UpdateDescriptor+0x58>
      }
      else
      {
        WRITE_REG(dmarxdesc->BackupAddr0, (uint32_t)buff);
 8021d14:	68fb      	ldr	r3, [r7, #12]
 8021d16:	461a      	mov	r2, r3
 8021d18:	697b      	ldr	r3, [r7, #20]
 8021d1a:	621a      	str	r2, [r3, #32]
        WRITE_REG(dmarxdesc->DESC2, (uint32_t)buff);
 8021d1c:	68fb      	ldr	r3, [r7, #12]
 8021d1e:	461a      	mov	r2, r3
 8021d20:	697b      	ldr	r3, [r7, #20]
 8021d22:	609a      	str	r2, [r3, #8]
      }
    }

    if (allocStatus != 0U)
 8021d24:	7cfb      	ldrb	r3, [r7, #19]
 8021d26:	2b00      	cmp	r3, #0
 8021d28:	d026      	beq.n	8021d78 <ETH_UpdateDescriptor+0xac>
    {
      if (heth->RxDescList.ItMode == 0U)
 8021d2a:	687b      	ldr	r3, [r7, #4]
 8021d2c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8021d2e:	2b00      	cmp	r3, #0
 8021d30:	d103      	bne.n	8021d3a <ETH_UpdateDescriptor+0x6e>
      {
        WRITE_REG(dmarxdesc->DESC1, ETH_DMARXDESC_DIC | ETH_RX_BUF_SIZE | ETH_DMARXDESC_RCH);
 8021d32:	697b      	ldr	r3, [r7, #20]
 8021d34:	4a1e      	ldr	r2, [pc, #120]	; (8021db0 <ETH_UpdateDescriptor+0xe4>)
 8021d36:	605a      	str	r2, [r3, #4]
 8021d38:	e003      	b.n	8021d42 <ETH_UpdateDescriptor+0x76>
      }
      else
      {
        WRITE_REG(dmarxdesc->DESC1, ETH_RX_BUF_SIZE | ETH_DMARXDESC_RCH);
 8021d3a:	697b      	ldr	r3, [r7, #20]
 8021d3c:	f44f 428c 	mov.w	r2, #17920	; 0x4600
 8021d40:	605a      	str	r2, [r3, #4]
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 8021d42:	f3bf 8f5f 	dmb	sy
}
 8021d46:	bf00      	nop
         is fully performed.
         The __DMB() instruction is added to avoid any potential compiler optimization that
         may lead to abnormal behavior. */
      __DMB();

      SET_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN);
 8021d48:	697b      	ldr	r3, [r7, #20]
 8021d4a:	681b      	ldr	r3, [r3, #0]
 8021d4c:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8021d50:	697b      	ldr	r3, [r7, #20]
 8021d52:	601a      	str	r2, [r3, #0]

      /* Increment current rx descriptor index */
      INCR_RX_DESC_INDEX(descidx, 1U);
 8021d54:	69fb      	ldr	r3, [r7, #28]
 8021d56:	3301      	adds	r3, #1
 8021d58:	61fb      	str	r3, [r7, #28]
 8021d5a:	69fb      	ldr	r3, [r7, #28]
 8021d5c:	2b03      	cmp	r3, #3
 8021d5e:	d902      	bls.n	8021d66 <ETH_UpdateDescriptor+0x9a>
 8021d60:	69fb      	ldr	r3, [r7, #28]
 8021d62:	3b04      	subs	r3, #4
 8021d64:	61fb      	str	r3, [r7, #28]
      /* Get current descriptor address */
      dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 8021d66:	687b      	ldr	r3, [r7, #4]
 8021d68:	69fa      	ldr	r2, [r7, #28]
 8021d6a:	3212      	adds	r2, #18
 8021d6c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8021d70:	617b      	str	r3, [r7, #20]
      desccount--;
 8021d72:	69bb      	ldr	r3, [r7, #24]
 8021d74:	3b01      	subs	r3, #1
 8021d76:	61bb      	str	r3, [r7, #24]
  while ((desccount > 0U) && (allocStatus != 0U))
 8021d78:	69bb      	ldr	r3, [r7, #24]
 8021d7a:	2b00      	cmp	r3, #0
 8021d7c:	d002      	beq.n	8021d84 <ETH_UpdateDescriptor+0xb8>
 8021d7e:	7cfb      	ldrb	r3, [r7, #19]
 8021d80:	2b00      	cmp	r3, #0
 8021d82:	d1b8      	bne.n	8021cf6 <ETH_UpdateDescriptor+0x2a>
    }
  }

  if (heth->RxDescList.RxBuildDescCnt != desccount)
 8021d84:	687b      	ldr	r3, [r7, #4]
 8021d86:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8021d88:	69ba      	ldr	r2, [r7, #24]
 8021d8a:	429a      	cmp	r2, r3
 8021d8c:	d00c      	beq.n	8021da8 <ETH_UpdateDescriptor+0xdc>
  {
    /* Set the Tail pointer address */
    WRITE_REG(heth->Instance->DMARPDR, 0);
 8021d8e:	687b      	ldr	r3, [r7, #4]
 8021d90:	681b      	ldr	r3, [r3, #0]
 8021d92:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8021d96:	461a      	mov	r2, r3
 8021d98:	2300      	movs	r3, #0
 8021d9a:	6093      	str	r3, [r2, #8]

    heth->RxDescList.RxBuildDescIdx = descidx;
 8021d9c:	687b      	ldr	r3, [r7, #4]
 8021d9e:	69fa      	ldr	r2, [r7, #28]
 8021da0:	669a      	str	r2, [r3, #104]	; 0x68
    heth->RxDescList.RxBuildDescCnt = desccount;
 8021da2:	687b      	ldr	r3, [r7, #4]
 8021da4:	69ba      	ldr	r2, [r7, #24]
 8021da6:	66da      	str	r2, [r3, #108]	; 0x6c
  }
}
 8021da8:	bf00      	nop
 8021daa:	3720      	adds	r7, #32
 8021dac:	46bd      	mov	sp, r7
 8021dae:	bd80      	pop	{r7, pc}
 8021db0:	80004600 	.word	0x80004600

08021db4 <HAL_ETH_ReleaseTxPacket>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReleaseTxPacket(ETH_HandleTypeDef *heth)
{
 8021db4:	b580      	push	{r7, lr}
 8021db6:	b086      	sub	sp, #24
 8021db8:	af00      	add	r7, sp, #0
 8021dba:	6078      	str	r0, [r7, #4]
  ETH_TxDescListTypeDef *dmatxdesclist = &heth->TxDescList;
 8021dbc:	687b      	ldr	r3, [r7, #4]
 8021dbe:	3318      	adds	r3, #24
 8021dc0:	60bb      	str	r3, [r7, #8]
  uint32_t numOfBuf =  dmatxdesclist->BuffersInUse;
 8021dc2:	68bb      	ldr	r3, [r7, #8]
 8021dc4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8021dc6:	617b      	str	r3, [r7, #20]
  uint32_t idx =       dmatxdesclist->releaseIndex;
 8021dc8:	68bb      	ldr	r3, [r7, #8]
 8021dca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8021dcc:	613b      	str	r3, [r7, #16]
  uint8_t pktTxStatus = 1U;
 8021dce:	2301      	movs	r3, #1
 8021dd0:	73fb      	strb	r3, [r7, #15]
#ifdef HAL_ETH_USE_PTP
  ETH_TimeStampTypeDef *timestamp = &heth->TxTimestamp;
#endif /* HAL_ETH_USE_PTP */

  /* Loop through buffers in use.  */
  while ((numOfBuf != 0U) && (pktTxStatus != 0U))
 8021dd2:	e03f      	b.n	8021e54 <HAL_ETH_ReleaseTxPacket+0xa0>
  {
    pktInUse = 1U;
 8021dd4:	2301      	movs	r3, #1
 8021dd6:	73bb      	strb	r3, [r7, #14]
    numOfBuf--;
 8021dd8:	697b      	ldr	r3, [r7, #20]
 8021dda:	3b01      	subs	r3, #1
 8021ddc:	617b      	str	r3, [r7, #20]
    /* If no packet, just examine the next packet.  */
    if (dmatxdesclist->PacketAddress[idx] == NULL)
 8021dde:	68ba      	ldr	r2, [r7, #8]
 8021de0:	693b      	ldr	r3, [r7, #16]
 8021de2:	3304      	adds	r3, #4
 8021de4:	009b      	lsls	r3, r3, #2
 8021de6:	4413      	add	r3, r2
 8021de8:	685b      	ldr	r3, [r3, #4]
 8021dea:	2b00      	cmp	r3, #0
 8021dec:	d106      	bne.n	8021dfc <HAL_ETH_ReleaseTxPacket+0x48>
    {
      /* No packet in use, skip to next.  */
      idx = (idx + 1U) & (ETH_TX_DESC_CNT - 1U);
 8021dee:	693b      	ldr	r3, [r7, #16]
 8021df0:	3301      	adds	r3, #1
 8021df2:	f003 0303 	and.w	r3, r3, #3
 8021df6:	613b      	str	r3, [r7, #16]
      pktInUse = 0U;
 8021df8:	2300      	movs	r3, #0
 8021dfa:	73bb      	strb	r3, [r7, #14]
    }

    if (pktInUse != 0U)
 8021dfc:	7bbb      	ldrb	r3, [r7, #14]
 8021dfe:	2b00      	cmp	r3, #0
 8021e00:	d028      	beq.n	8021e54 <HAL_ETH_ReleaseTxPacket+0xa0>
    {
      /* Determine if the packet has been transmitted.  */
      if ((heth->Init.TxDesc[idx].DESC0 & ETH_DMATXDESC_OWN) == 0U)
 8021e02:	687b      	ldr	r3, [r7, #4]
 8021e04:	68d9      	ldr	r1, [r3, #12]
 8021e06:	693a      	ldr	r2, [r7, #16]
 8021e08:	4613      	mov	r3, r2
 8021e0a:	009b      	lsls	r3, r3, #2
 8021e0c:	4413      	add	r3, r2
 8021e0e:	00db      	lsls	r3, r3, #3
 8021e10:	440b      	add	r3, r1
 8021e12:	681b      	ldr	r3, [r3, #0]
 8021e14:	2b00      	cmp	r3, #0
 8021e16:	db1b      	blt.n	8021e50 <HAL_ETH_ReleaseTxPacket+0x9c>
#ifdef HAL_ETH_USE_PTP
        /* Handle Ptp  */
        HAL_ETH_TxPtpCallback(dmatxdesclist->PacketAddress[idx], timestamp);
#endif  /* HAL_ETH_USE_PTP */
        /* Release the packet.  */
        HAL_ETH_TxFreeCallback(dmatxdesclist->PacketAddress[idx]);
 8021e18:	68ba      	ldr	r2, [r7, #8]
 8021e1a:	693b      	ldr	r3, [r7, #16]
 8021e1c:	3304      	adds	r3, #4
 8021e1e:	009b      	lsls	r3, r3, #2
 8021e20:	4413      	add	r3, r2
 8021e22:	685b      	ldr	r3, [r3, #4]
 8021e24:	4618      	mov	r0, r3
 8021e26:	f002 ffef 	bl	8024e08 <HAL_ETH_TxFreeCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */

        /* Clear the entry in the in-use array.  */
        dmatxdesclist->PacketAddress[idx] = NULL;
 8021e2a:	68ba      	ldr	r2, [r7, #8]
 8021e2c:	693b      	ldr	r3, [r7, #16]
 8021e2e:	3304      	adds	r3, #4
 8021e30:	009b      	lsls	r3, r3, #2
 8021e32:	4413      	add	r3, r2
 8021e34:	2200      	movs	r2, #0
 8021e36:	605a      	str	r2, [r3, #4]

        /* Update the transmit relesae index and number of buffers in use.  */
        idx = (idx + 1U) & (ETH_TX_DESC_CNT - 1U);
 8021e38:	693b      	ldr	r3, [r7, #16]
 8021e3a:	3301      	adds	r3, #1
 8021e3c:	f003 0303 	and.w	r3, r3, #3
 8021e40:	613b      	str	r3, [r7, #16]
        dmatxdesclist->BuffersInUse = numOfBuf;
 8021e42:	68bb      	ldr	r3, [r7, #8]
 8021e44:	697a      	ldr	r2, [r7, #20]
 8021e46:	629a      	str	r2, [r3, #40]	; 0x28
        dmatxdesclist->releaseIndex = idx;
 8021e48:	68bb      	ldr	r3, [r7, #8]
 8021e4a:	693a      	ldr	r2, [r7, #16]
 8021e4c:	62da      	str	r2, [r3, #44]	; 0x2c
 8021e4e:	e001      	b.n	8021e54 <HAL_ETH_ReleaseTxPacket+0xa0>
      }
      else
      {
        /* Get out of the loop!  */
        pktTxStatus = 0U;
 8021e50:	2300      	movs	r3, #0
 8021e52:	73fb      	strb	r3, [r7, #15]
  while ((numOfBuf != 0U) && (pktTxStatus != 0U))
 8021e54:	697b      	ldr	r3, [r7, #20]
 8021e56:	2b00      	cmp	r3, #0
 8021e58:	d002      	beq.n	8021e60 <HAL_ETH_ReleaseTxPacket+0xac>
 8021e5a:	7bfb      	ldrb	r3, [r7, #15]
 8021e5c:	2b00      	cmp	r3, #0
 8021e5e:	d1b9      	bne.n	8021dd4 <HAL_ETH_ReleaseTxPacket+0x20>
      }
    }
  }
  return HAL_OK;
 8021e60:	2300      	movs	r3, #0
}
 8021e62:	4618      	mov	r0, r3
 8021e64:	3718      	adds	r7, #24
 8021e66:	46bd      	mov	sp, r7
 8021e68:	bd80      	pop	{r7, pc}
	...

08021e6c <HAL_ETH_IRQHandler>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
void HAL_ETH_IRQHandler(ETH_HandleTypeDef *heth)
{
 8021e6c:	b580      	push	{r7, lr}
 8021e6e:	b082      	sub	sp, #8
 8021e70:	af00      	add	r7, sp, #0
 8021e72:	6078      	str	r0, [r7, #4]
  /* Packet received */
  if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMASR_RS))
 8021e74:	687b      	ldr	r3, [r7, #4]
 8021e76:	681b      	ldr	r3, [r3, #0]
 8021e78:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8021e7c:	695b      	ldr	r3, [r3, #20]
 8021e7e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8021e82:	2b40      	cmp	r3, #64	; 0x40
 8021e84:	d112      	bne.n	8021eac <HAL_ETH_IRQHandler+0x40>
  {
    if (__HAL_ETH_DMA_GET_IT_SOURCE(heth, ETH_DMAIER_RIE))
 8021e86:	687b      	ldr	r3, [r7, #4]
 8021e88:	681b      	ldr	r3, [r3, #0]
 8021e8a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8021e8e:	69db      	ldr	r3, [r3, #28]
 8021e90:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8021e94:	2b40      	cmp	r3, #64	; 0x40
 8021e96:	d109      	bne.n	8021eac <HAL_ETH_IRQHandler+0x40>
    {
      /* Clear the Eth DMA Rx IT pending bits */
      __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMASR_RS | ETH_DMASR_NIS);
 8021e98:	687b      	ldr	r3, [r7, #4]
 8021e9a:	681b      	ldr	r3, [r3, #0]
 8021e9c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8021ea0:	461a      	mov	r2, r3
 8021ea2:	4b50      	ldr	r3, [pc, #320]	; (8021fe4 <HAL_ETH_IRQHandler+0x178>)
 8021ea4:	6153      	str	r3, [r2, #20]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /*Call registered Receive complete callback*/
      heth->RxCpltCallback(heth);
#else
      /* Receive complete callback */
      HAL_ETH_RxCpltCallback(heth);
 8021ea6:	6878      	ldr	r0, [r7, #4]
 8021ea8:	f002 fb18 	bl	80244dc <HAL_ETH_RxCpltCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
    }
  }

  /* Packet transmitted */
  if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMASR_TS))
 8021eac:	687b      	ldr	r3, [r7, #4]
 8021eae:	681b      	ldr	r3, [r3, #0]
 8021eb0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8021eb4:	695b      	ldr	r3, [r3, #20]
 8021eb6:	f003 0301 	and.w	r3, r3, #1
 8021eba:	2b01      	cmp	r3, #1
 8021ebc:	d113      	bne.n	8021ee6 <HAL_ETH_IRQHandler+0x7a>
  {
    if (__HAL_ETH_DMA_GET_IT_SOURCE(heth, ETH_DMAIER_TIE))
 8021ebe:	687b      	ldr	r3, [r7, #4]
 8021ec0:	681b      	ldr	r3, [r3, #0]
 8021ec2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8021ec6:	69db      	ldr	r3, [r3, #28]
 8021ec8:	f003 0301 	and.w	r3, r3, #1
 8021ecc:	2b01      	cmp	r3, #1
 8021ece:	d10a      	bne.n	8021ee6 <HAL_ETH_IRQHandler+0x7a>
    {
      /* Clear the Eth DMA Tx IT pending bits */
      __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMASR_TS | ETH_DMASR_NIS);
 8021ed0:	687b      	ldr	r3, [r7, #4]
 8021ed2:	681b      	ldr	r3, [r3, #0]
 8021ed4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8021ed8:	461a      	mov	r2, r3
 8021eda:	f04f 1301 	mov.w	r3, #65537	; 0x10001
 8021ede:	6153      	str	r3, [r2, #20]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /*Call registered Transmit complete callback*/
      heth->TxCpltCallback(heth);
#else
      /* Transfer complete callback */
      HAL_ETH_TxCpltCallback(heth);
 8021ee0:	6878      	ldr	r0, [r7, #4]
 8021ee2:	f002 fb0b 	bl	80244fc <HAL_ETH_TxCpltCallback>
    }
  }


  /* ETH DMA Error */
  if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMASR_AIS))
 8021ee6:	687b      	ldr	r3, [r7, #4]
 8021ee8:	681b      	ldr	r3, [r3, #0]
 8021eea:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8021eee:	695b      	ldr	r3, [r3, #20]
 8021ef0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8021ef4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8021ef8:	d14c      	bne.n	8021f94 <HAL_ETH_IRQHandler+0x128>
  {
    if (__HAL_ETH_DMA_GET_IT_SOURCE(heth, ETH_DMAIER_AISE))
 8021efa:	687b      	ldr	r3, [r7, #4]
 8021efc:	681b      	ldr	r3, [r3, #0]
 8021efe:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8021f02:	69db      	ldr	r3, [r3, #28]
 8021f04:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8021f08:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8021f0c:	d142      	bne.n	8021f94 <HAL_ETH_IRQHandler+0x128>
    {
      heth->ErrorCode |= HAL_ETH_ERROR_DMA;
 8021f0e:	687b      	ldr	r3, [r7, #4]
 8021f10:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8021f14:	f043 0208 	orr.w	r2, r3, #8
 8021f18:	687b      	ldr	r3, [r7, #4]
 8021f1a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      /* if fatal bus error occurred */
      if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMASR_FBES))
 8021f1e:	687b      	ldr	r3, [r7, #4]
 8021f20:	681b      	ldr	r3, [r3, #0]
 8021f22:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8021f26:	695b      	ldr	r3, [r3, #20]
 8021f28:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8021f2c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8021f30:	d11a      	bne.n	8021f68 <HAL_ETH_IRQHandler+0xfc>
      {
        /* Get DMA error code  */
        heth->DMAErrorCode = READ_BIT(heth->Instance->DMASR, (ETH_DMASR_FBES | ETH_DMASR_TPS | ETH_DMASR_RPS));
 8021f32:	687b      	ldr	r3, [r7, #4]
 8021f34:	681b      	ldr	r3, [r3, #0]
 8021f36:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8021f3a:	695a      	ldr	r2, [r3, #20]
 8021f3c:	4b2a      	ldr	r3, [pc, #168]	; (8021fe8 <HAL_ETH_IRQHandler+0x17c>)
 8021f3e:	4013      	ands	r3, r2
 8021f40:	687a      	ldr	r2, [r7, #4]
 8021f42:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c

        /* Disable all interrupts */
        __HAL_ETH_DMA_DISABLE_IT(heth, ETH_DMAIER_NISE | ETH_DMAIER_AISE);
 8021f46:	687b      	ldr	r3, [r7, #4]
 8021f48:	681b      	ldr	r3, [r3, #0]
 8021f4a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8021f4e:	69db      	ldr	r3, [r3, #28]
 8021f50:	687a      	ldr	r2, [r7, #4]
 8021f52:	6812      	ldr	r2, [r2, #0]
 8021f54:	f423 33c0 	bic.w	r3, r3, #98304	; 0x18000
 8021f58:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8021f5c:	61d3      	str	r3, [r2, #28]

        /* Set HAL state to ERROR */
        heth->gState = HAL_ETH_STATE_ERROR;
 8021f5e:	687b      	ldr	r3, [r7, #4]
 8021f60:	22e0      	movs	r2, #224	; 0xe0
 8021f62:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
 8021f66:	e012      	b.n	8021f8e <HAL_ETH_IRQHandler+0x122>
      }
      else
      {
        /* Get DMA error status  */
        heth->DMAErrorCode = READ_BIT(heth->Instance->DMASR, (ETH_DMASR_ETS | ETH_DMASR_RWTS |
 8021f68:	687b      	ldr	r3, [r7, #4]
 8021f6a:	681b      	ldr	r3, [r3, #0]
 8021f6c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8021f70:	695a      	ldr	r2, [r3, #20]
 8021f72:	f248 6380 	movw	r3, #34432	; 0x8680
 8021f76:	4013      	ands	r3, r2
 8021f78:	687a      	ldr	r2, [r7, #4]
 8021f7a:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
                                                              ETH_DMASR_RBUS | ETH_DMASR_AIS));

        /* Clear the interrupt summary flag */
        __HAL_ETH_DMA_CLEAR_IT(heth, (ETH_DMASR_ETS | ETH_DMASR_RWTS |
 8021f7e:	687b      	ldr	r3, [r7, #4]
 8021f80:	681b      	ldr	r3, [r3, #0]
 8021f82:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8021f86:	461a      	mov	r2, r3
 8021f88:	f248 6380 	movw	r3, #34432	; 0x8680
 8021f8c:	6153      	str	r3, [r2, #20]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /* Call registered Error callback*/
      heth->ErrorCallback(heth);
#else
      /* Ethernet DMA Error callback */
      HAL_ETH_ErrorCallback(heth);
 8021f8e:	6878      	ldr	r0, [r7, #4]
 8021f90:	f002 fac4 	bl	802451c <HAL_ETH_ErrorCallback>
    }
  }


  /* ETH PMT IT */
  if (__HAL_ETH_MAC_GET_IT(heth, ETH_MAC_PMT_IT))
 8021f94:	687b      	ldr	r3, [r7, #4]
 8021f96:	681b      	ldr	r3, [r3, #0]
 8021f98:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8021f9a:	f003 0308 	and.w	r3, r3, #8
 8021f9e:	2b08      	cmp	r3, #8
 8021fa0:	d10e      	bne.n	8021fc0 <HAL_ETH_IRQHandler+0x154>
  {
    /* Get MAC Wake-up source and clear the status register pending bit */
    heth->MACWakeUpEvent = READ_BIT(heth->Instance->MACPMTCSR, (ETH_MACPMTCSR_WFR | ETH_MACPMTCSR_MPR));
 8021fa2:	687b      	ldr	r3, [r7, #4]
 8021fa4:	681b      	ldr	r3, [r3, #0]
 8021fa6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8021fa8:	f003 0260 	and.w	r2, r3, #96	; 0x60
 8021fac:	687b      	ldr	r3, [r7, #4]
 8021fae:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered PMT callback*/
    heth->PMTCallback(heth);
#else
    /* Ethernet PMT callback */
    HAL_ETH_PMTCallback(heth);
 8021fb2:	6878      	ldr	r0, [r7, #4]
 8021fb4:	f000 f81c 	bl	8021ff0 <HAL_ETH_PMTCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */

    heth->MACWakeUpEvent = (uint32_t)(0x0U);
 8021fb8:	687b      	ldr	r3, [r7, #4]
 8021fba:	2200      	movs	r2, #0
 8021fbc:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  }


  /* check ETH WAKEUP exti flag */
  if (__HAL_ETH_WAKEUP_EXTI_GET_FLAG(ETH_WAKEUP_EXTI_LINE) != (uint32_t)RESET)
 8021fc0:	4b0a      	ldr	r3, [pc, #40]	; (8021fec <HAL_ETH_IRQHandler+0x180>)
 8021fc2:	695b      	ldr	r3, [r3, #20]
 8021fc4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8021fc8:	2b00      	cmp	r3, #0
 8021fca:	d006      	beq.n	8021fda <HAL_ETH_IRQHandler+0x16e>
  {
    /* Clear ETH WAKEUP Exti pending bit */
    __HAL_ETH_WAKEUP_EXTI_CLEAR_FLAG(ETH_WAKEUP_EXTI_LINE);
 8021fcc:	4b07      	ldr	r3, [pc, #28]	; (8021fec <HAL_ETH_IRQHandler+0x180>)
 8021fce:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8021fd2:	615a      	str	r2, [r3, #20]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered WakeUp callback*/
    heth->WakeUpCallback(heth);
#else
    /* ETH WAKEUP callback */
    HAL_ETH_WakeUpCallback(heth);
 8021fd4:	6878      	ldr	r0, [r7, #4]
 8021fd6:	f000 f815 	bl	8022004 <HAL_ETH_WakeUpCallback>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }
}
 8021fda:	bf00      	nop
 8021fdc:	3708      	adds	r7, #8
 8021fde:	46bd      	mov	sp, r7
 8021fe0:	bd80      	pop	{r7, pc}
 8021fe2:	bf00      	nop
 8021fe4:	00010040 	.word	0x00010040
 8021fe8:	007e2000 	.word	0x007e2000
 8021fec:	40013c00 	.word	0x40013c00

08021ff0 <HAL_ETH_PMTCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_PMTCallback(ETH_HandleTypeDef *heth)
{
 8021ff0:	b480      	push	{r7}
 8021ff2:	b083      	sub	sp, #12
 8021ff4:	af00      	add	r7, sp, #0
 8021ff6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_PMTCallback could be implemented in the user file
  */
}
 8021ff8:	bf00      	nop
 8021ffa:	370c      	adds	r7, #12
 8021ffc:	46bd      	mov	sp, r7
 8021ffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8022002:	4770      	bx	lr

08022004 <HAL_ETH_WakeUpCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_WakeUpCallback(ETH_HandleTypeDef *heth)
{
 8022004:	b480      	push	{r7}
 8022006:	b083      	sub	sp, #12
 8022008:	af00      	add	r7, sp, #0
 802200a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ETH_WakeUpCallback could be implemented in the user file
   */
}
 802200c:	bf00      	nop
 802200e:	370c      	adds	r7, #12
 8022010:	46bd      	mov	sp, r7
 8022012:	f85d 7b04 	ldr.w	r7, [sp], #4
 8022016:	4770      	bx	lr

08022018 <HAL_ETH_ReadPHYRegister>:
  * @param pRegValue: parameter to hold read value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadPHYRegister(ETH_HandleTypeDef *heth, uint32_t PHYAddr, uint32_t PHYReg,
                                          uint32_t *pRegValue)
{
 8022018:	b580      	push	{r7, lr}
 802201a:	b086      	sub	sp, #24
 802201c:	af00      	add	r7, sp, #0
 802201e:	60f8      	str	r0, [r7, #12]
 8022020:	60b9      	str	r1, [r7, #8]
 8022022:	607a      	str	r2, [r7, #4]
 8022024:	603b      	str	r3, [r7, #0]
  uint32_t tmpreg1;
  uint32_t tickstart;

  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = heth->Instance->MACMIIAR;
 8022026:	68fb      	ldr	r3, [r7, #12]
 8022028:	681b      	ldr	r3, [r3, #0]
 802202a:	691b      	ldr	r3, [r3, #16]
 802202c:	617b      	str	r3, [r7, #20]

  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 802202e:	697b      	ldr	r3, [r7, #20]
 8022030:	f003 031c 	and.w	r3, r3, #28
 8022034:	617b      	str	r3, [r7, #20]

  /* Prepare the MII address register value */
  tmpreg1 |= ((PHYAddr << 11U) & ETH_MACMIIAR_PA);                        /* Set the PHY device address   */
 8022036:	68bb      	ldr	r3, [r7, #8]
 8022038:	02db      	lsls	r3, r3, #11
 802203a:	b29b      	uxth	r3, r3
 802203c:	697a      	ldr	r2, [r7, #20]
 802203e:	4313      	orrs	r3, r2
 8022040:	617b      	str	r3, [r7, #20]
  tmpreg1 |= (((uint32_t)PHYReg << 6U) & ETH_MACMIIAR_MR);                /* Set the PHY register address */
 8022042:	687b      	ldr	r3, [r7, #4]
 8022044:	019b      	lsls	r3, r3, #6
 8022046:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 802204a:	697a      	ldr	r2, [r7, #20]
 802204c:	4313      	orrs	r3, r2
 802204e:	617b      	str	r3, [r7, #20]
  tmpreg1 &= ~ETH_MACMIIAR_MW;                                            /* Set the read mode            */
 8022050:	697b      	ldr	r3, [r7, #20]
 8022052:	f023 0302 	bic.w	r3, r3, #2
 8022056:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MB;                                             /* Set the MII Busy bit         */
 8022058:	697b      	ldr	r3, [r7, #20]
 802205a:	f043 0301 	orr.w	r3, r3, #1
 802205e:	617b      	str	r3, [r7, #20]

  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg1;
 8022060:	68fb      	ldr	r3, [r7, #12]
 8022062:	681b      	ldr	r3, [r3, #0]
 8022064:	697a      	ldr	r2, [r7, #20]
 8022066:	611a      	str	r2, [r3, #16]


  tickstart = HAL_GetTick();
 8022068:	f7ff fa74 	bl	8021554 <HAL_GetTick>
 802206c:	6138      	str	r0, [r7, #16]

  /* Check for the Busy flag */
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 802206e:	e00d      	b.n	802208c <HAL_ETH_ReadPHYRegister+0x74>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > PHY_READ_TO)
 8022070:	f7ff fa70 	bl	8021554 <HAL_GetTick>
 8022074:	4602      	mov	r2, r0
 8022076:	693b      	ldr	r3, [r7, #16]
 8022078:	1ad3      	subs	r3, r2, r3
 802207a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 802207e:	d301      	bcc.n	8022084 <HAL_ETH_ReadPHYRegister+0x6c>
    {
      return HAL_ERROR;
 8022080:	2301      	movs	r3, #1
 8022082:	e010      	b.n	80220a6 <HAL_ETH_ReadPHYRegister+0x8e>
    }

    tmpreg1 = heth->Instance->MACMIIAR;
 8022084:	68fb      	ldr	r3, [r7, #12]
 8022086:	681b      	ldr	r3, [r3, #0]
 8022088:	691b      	ldr	r3, [r3, #16]
 802208a:	617b      	str	r3, [r7, #20]
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 802208c:	697b      	ldr	r3, [r7, #20]
 802208e:	f003 0301 	and.w	r3, r3, #1
 8022092:	2b00      	cmp	r3, #0
 8022094:	d1ec      	bne.n	8022070 <HAL_ETH_ReadPHYRegister+0x58>
  }

  /* Get MACMIIDR value */
  *pRegValue = (uint16_t)(heth->Instance->MACMIIDR);
 8022096:	68fb      	ldr	r3, [r7, #12]
 8022098:	681b      	ldr	r3, [r3, #0]
 802209a:	695b      	ldr	r3, [r3, #20]
 802209c:	b29b      	uxth	r3, r3
 802209e:	461a      	mov	r2, r3
 80220a0:	683b      	ldr	r3, [r7, #0]
 80220a2:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 80220a4:	2300      	movs	r3, #0
}
 80220a6:	4618      	mov	r0, r3
 80220a8:	3718      	adds	r7, #24
 80220aa:	46bd      	mov	sp, r7
 80220ac:	bd80      	pop	{r7, pc}

080220ae <HAL_ETH_WritePHYRegister>:
  * @param  RegValue: the value to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_WritePHYRegister(ETH_HandleTypeDef *heth, uint32_t PHYAddr, uint32_t PHYReg,
                                           uint32_t RegValue)
{
 80220ae:	b580      	push	{r7, lr}
 80220b0:	b086      	sub	sp, #24
 80220b2:	af00      	add	r7, sp, #0
 80220b4:	60f8      	str	r0, [r7, #12]
 80220b6:	60b9      	str	r1, [r7, #8]
 80220b8:	607a      	str	r2, [r7, #4]
 80220ba:	603b      	str	r3, [r7, #0]
  uint32_t tmpreg1;
  uint32_t tickstart;

  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = heth->Instance->MACMIIAR;
 80220bc:	68fb      	ldr	r3, [r7, #12]
 80220be:	681b      	ldr	r3, [r3, #0]
 80220c0:	691b      	ldr	r3, [r3, #16]
 80220c2:	617b      	str	r3, [r7, #20]

  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 80220c4:	697b      	ldr	r3, [r7, #20]
 80220c6:	f003 031c 	and.w	r3, r3, #28
 80220ca:	617b      	str	r3, [r7, #20]

  /* Prepare the MII register address value */
  tmpreg1 |= ((PHYAddr << 11U) & ETH_MACMIIAR_PA);                      /* Set the PHY device address */
 80220cc:	68bb      	ldr	r3, [r7, #8]
 80220ce:	02db      	lsls	r3, r3, #11
 80220d0:	b29b      	uxth	r3, r3
 80220d2:	697a      	ldr	r2, [r7, #20]
 80220d4:	4313      	orrs	r3, r2
 80220d6:	617b      	str	r3, [r7, #20]
  tmpreg1 |= (((uint32_t)PHYReg << 6U) & ETH_MACMIIAR_MR);              /* Set the PHY register address */
 80220d8:	687b      	ldr	r3, [r7, #4]
 80220da:	019b      	lsls	r3, r3, #6
 80220dc:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 80220e0:	697a      	ldr	r2, [r7, #20]
 80220e2:	4313      	orrs	r3, r2
 80220e4:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MW;                                           /* Set the write mode */
 80220e6:	697b      	ldr	r3, [r7, #20]
 80220e8:	f043 0302 	orr.w	r3, r3, #2
 80220ec:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MB;                                           /* Set the MII Busy bit */
 80220ee:	697b      	ldr	r3, [r7, #20]
 80220f0:	f043 0301 	orr.w	r3, r3, #1
 80220f4:	617b      	str	r3, [r7, #20]

  /* Give the value to the MII data register */
  heth->Instance->MACMIIDR = (uint16_t)RegValue;
 80220f6:	683b      	ldr	r3, [r7, #0]
 80220f8:	b29a      	uxth	r2, r3
 80220fa:	68fb      	ldr	r3, [r7, #12]
 80220fc:	681b      	ldr	r3, [r3, #0]
 80220fe:	615a      	str	r2, [r3, #20]

  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg1;
 8022100:	68fb      	ldr	r3, [r7, #12]
 8022102:	681b      	ldr	r3, [r3, #0]
 8022104:	697a      	ldr	r2, [r7, #20]
 8022106:	611a      	str	r2, [r3, #16]

  /* Get tick */
  tickstart = HAL_GetTick();
 8022108:	f7ff fa24 	bl	8021554 <HAL_GetTick>
 802210c:	6138      	str	r0, [r7, #16]

  /* Check for the Busy flag */
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 802210e:	e00d      	b.n	802212c <HAL_ETH_WritePHYRegister+0x7e>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > PHY_WRITE_TO)
 8022110:	f7ff fa20 	bl	8021554 <HAL_GetTick>
 8022114:	4602      	mov	r2, r0
 8022116:	693b      	ldr	r3, [r7, #16]
 8022118:	1ad3      	subs	r3, r2, r3
 802211a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 802211e:	d301      	bcc.n	8022124 <HAL_ETH_WritePHYRegister+0x76>
    {
      return HAL_ERROR;
 8022120:	2301      	movs	r3, #1
 8022122:	e009      	b.n	8022138 <HAL_ETH_WritePHYRegister+0x8a>
    }

    tmpreg1 = heth->Instance->MACMIIAR;
 8022124:	68fb      	ldr	r3, [r7, #12]
 8022126:	681b      	ldr	r3, [r3, #0]
 8022128:	691b      	ldr	r3, [r3, #16]
 802212a:	617b      	str	r3, [r7, #20]
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 802212c:	697b      	ldr	r3, [r7, #20]
 802212e:	f003 0301 	and.w	r3, r3, #1
 8022132:	2b00      	cmp	r3, #0
 8022134:	d1ec      	bne.n	8022110 <HAL_ETH_WritePHYRegister+0x62>
  }

  return HAL_OK;
 8022136:	2300      	movs	r3, #0
}
 8022138:	4618      	mov	r0, r3
 802213a:	3718      	adds	r7, #24
 802213c:	46bd      	mov	sp, r7
 802213e:	bd80      	pop	{r7, pc}

08022140 <HAL_ETH_GetMACConfig>:
  * @param  macconf: pointer to a ETH_MACConfigTypeDef structure that will hold
  *         the configuration of the MAC.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_ETH_GetMACConfig(ETH_HandleTypeDef *heth, ETH_MACConfigTypeDef *macconf)
{
 8022140:	b480      	push	{r7}
 8022142:	b083      	sub	sp, #12
 8022144:	af00      	add	r7, sp, #0
 8022146:	6078      	str	r0, [r7, #4]
 8022148:	6039      	str	r1, [r7, #0]
  if (macconf == NULL)
 802214a:	683b      	ldr	r3, [r7, #0]
 802214c:	2b00      	cmp	r3, #0
 802214e:	d101      	bne.n	8022154 <HAL_ETH_GetMACConfig+0x14>
  {
    return HAL_ERROR;
 8022150:	2301      	movs	r3, #1
 8022152:	e0d9      	b.n	8022308 <HAL_ETH_GetMACConfig+0x1c8>
  }

  /* Get MAC parameters */
  macconf->DeferralCheck = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DC) >> 4) > 0U) ? ENABLE : DISABLE;
 8022154:	687b      	ldr	r3, [r7, #4]
 8022156:	681b      	ldr	r3, [r3, #0]
 8022158:	681b      	ldr	r3, [r3, #0]
 802215a:	f003 0310 	and.w	r3, r3, #16
 802215e:	2b00      	cmp	r3, #0
 8022160:	bf14      	ite	ne
 8022162:	2301      	movne	r3, #1
 8022164:	2300      	moveq	r3, #0
 8022166:	b2db      	uxtb	r3, r3
 8022168:	461a      	mov	r2, r3
 802216a:	683b      	ldr	r3, [r7, #0]
 802216c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
  macconf->BackOffLimit = READ_BIT(heth->Instance->MACCR, ETH_MACCR_BL);
 8022170:	687b      	ldr	r3, [r7, #4]
 8022172:	681b      	ldr	r3, [r3, #0]
 8022174:	681b      	ldr	r3, [r3, #0]
 8022176:	f003 0260 	and.w	r2, r3, #96	; 0x60
 802217a:	683b      	ldr	r3, [r7, #0]
 802217c:	625a      	str	r2, [r3, #36]	; 0x24
  macconf->RetryTransmission = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_RD) >> 9) == 0U) ? ENABLE : DISABLE;
 802217e:	687b      	ldr	r3, [r7, #4]
 8022180:	681b      	ldr	r3, [r3, #0]
 8022182:	681b      	ldr	r3, [r3, #0]
 8022184:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8022188:	2b00      	cmp	r3, #0
 802218a:	bf0c      	ite	eq
 802218c:	2301      	moveq	r3, #1
 802218e:	2300      	movne	r3, #0
 8022190:	b2db      	uxtb	r3, r3
 8022192:	461a      	mov	r2, r3
 8022194:	683b      	ldr	r3, [r7, #0]
 8022196:	f883 2020 	strb.w	r2, [r3, #32]
  macconf->CarrierSenseDuringTransmit = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_CSD) >> 16) > 0U)
 802219a:	687b      	ldr	r3, [r7, #4]
 802219c:	681b      	ldr	r3, [r3, #0]
 802219e:	681b      	ldr	r3, [r3, #0]
 80221a0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
                                        ? ENABLE : DISABLE;
 80221a4:	2b00      	cmp	r3, #0
 80221a6:	bf14      	ite	ne
 80221a8:	2301      	movne	r3, #1
 80221aa:	2300      	moveq	r3, #0
 80221ac:	b2db      	uxtb	r3, r3
 80221ae:	461a      	mov	r2, r3
  macconf->CarrierSenseDuringTransmit = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_CSD) >> 16) > 0U)
 80221b0:	683b      	ldr	r3, [r7, #0]
 80221b2:	77da      	strb	r2, [r3, #31]
  macconf->ReceiveOwn = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_ROD) >> 13) == 0U) ? ENABLE : DISABLE;
 80221b4:	687b      	ldr	r3, [r7, #4]
 80221b6:	681b      	ldr	r3, [r3, #0]
 80221b8:	681b      	ldr	r3, [r3, #0]
 80221ba:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80221be:	2b00      	cmp	r3, #0
 80221c0:	bf0c      	ite	eq
 80221c2:	2301      	moveq	r3, #1
 80221c4:	2300      	movne	r3, #0
 80221c6:	b2db      	uxtb	r3, r3
 80221c8:	461a      	mov	r2, r3
 80221ca:	683b      	ldr	r3, [r7, #0]
 80221cc:	779a      	strb	r2, [r3, #30]
  macconf->LoopbackMode = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_LM) >> 12) > 0U) ? ENABLE : DISABLE;
 80221ce:	687b      	ldr	r3, [r7, #4]
 80221d0:	681b      	ldr	r3, [r3, #0]
 80221d2:	681b      	ldr	r3, [r3, #0]
 80221d4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80221d8:	2b00      	cmp	r3, #0
 80221da:	bf14      	ite	ne
 80221dc:	2301      	movne	r3, #1
 80221de:	2300      	moveq	r3, #0
 80221e0:	b2db      	uxtb	r3, r3
 80221e2:	461a      	mov	r2, r3
 80221e4:	683b      	ldr	r3, [r7, #0]
 80221e6:	771a      	strb	r2, [r3, #28]
  macconf->DuplexMode = READ_BIT(heth->Instance->MACCR, ETH_MACCR_DM);
 80221e8:	687b      	ldr	r3, [r7, #4]
 80221ea:	681b      	ldr	r3, [r3, #0]
 80221ec:	681b      	ldr	r3, [r3, #0]
 80221ee:	f403 6200 	and.w	r2, r3, #2048	; 0x800
 80221f2:	683b      	ldr	r3, [r7, #0]
 80221f4:	619a      	str	r2, [r3, #24]
  macconf->Speed = READ_BIT(heth->Instance->MACCR, ETH_MACCR_FES);
 80221f6:	687b      	ldr	r3, [r7, #4]
 80221f8:	681b      	ldr	r3, [r3, #0]
 80221fa:	681b      	ldr	r3, [r3, #0]
 80221fc:	f403 4280 	and.w	r2, r3, #16384	; 0x4000
 8022200:	683b      	ldr	r3, [r7, #0]
 8022202:	615a      	str	r2, [r3, #20]
  macconf->Jabber = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_JD) >> 22) == 0U) ? ENABLE : DISABLE;
 8022204:	687b      	ldr	r3, [r7, #4]
 8022206:	681b      	ldr	r3, [r3, #0]
 8022208:	681b      	ldr	r3, [r3, #0]
 802220a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 802220e:	2b00      	cmp	r3, #0
 8022210:	bf0c      	ite	eq
 8022212:	2301      	moveq	r3, #1
 8022214:	2300      	movne	r3, #0
 8022216:	b2db      	uxtb	r3, r3
 8022218:	461a      	mov	r2, r3
 802221a:	683b      	ldr	r3, [r7, #0]
 802221c:	745a      	strb	r2, [r3, #17]
  macconf->Watchdog = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_WD) >> 23) == 0U) ? ENABLE : DISABLE;
 802221e:	687b      	ldr	r3, [r7, #4]
 8022220:	681b      	ldr	r3, [r3, #0]
 8022222:	681b      	ldr	r3, [r3, #0]
 8022224:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8022228:	2b00      	cmp	r3, #0
 802222a:	bf0c      	ite	eq
 802222c:	2301      	moveq	r3, #1
 802222e:	2300      	movne	r3, #0
 8022230:	b2db      	uxtb	r3, r3
 8022232:	461a      	mov	r2, r3
 8022234:	683b      	ldr	r3, [r7, #0]
 8022236:	741a      	strb	r2, [r3, #16]
  macconf->AutomaticPadCRCStrip = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_APCS) >> 7) > 0U) ? ENABLE : DISABLE;
 8022238:	687b      	ldr	r3, [r7, #4]
 802223a:	681b      	ldr	r3, [r3, #0]
 802223c:	681b      	ldr	r3, [r3, #0]
 802223e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8022242:	2b00      	cmp	r3, #0
 8022244:	bf14      	ite	ne
 8022246:	2301      	movne	r3, #1
 8022248:	2300      	moveq	r3, #0
 802224a:	b2db      	uxtb	r3, r3
 802224c:	461a      	mov	r2, r3
 802224e:	683b      	ldr	r3, [r7, #0]
 8022250:	73da      	strb	r2, [r3, #15]
  macconf->InterPacketGapVal = READ_BIT(heth->Instance->MACCR, ETH_MACCR_IFG);
 8022252:	687b      	ldr	r3, [r7, #4]
 8022254:	681b      	ldr	r3, [r3, #0]
 8022256:	681b      	ldr	r3, [r3, #0]
 8022258:	f403 2260 	and.w	r2, r3, #917504	; 0xe0000
 802225c:	683b      	ldr	r3, [r7, #0]
 802225e:	609a      	str	r2, [r3, #8]
  macconf->ChecksumOffload = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_IPCO) >> 10U) > 0U) ? ENABLE : DISABLE;
 8022260:	687b      	ldr	r3, [r7, #4]
 8022262:	681b      	ldr	r3, [r3, #0]
 8022264:	681b      	ldr	r3, [r3, #0]
 8022266:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 802226a:	2b00      	cmp	r3, #0
 802226c:	bf14      	ite	ne
 802226e:	2301      	movne	r3, #1
 8022270:	2300      	moveq	r3, #0
 8022272:	b2db      	uxtb	r3, r3
 8022274:	461a      	mov	r2, r3
 8022276:	683b      	ldr	r3, [r7, #0]
 8022278:	711a      	strb	r2, [r3, #4]


  macconf->TransmitFlowControl = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_TFCE) >> 1) > 0U) ? ENABLE : DISABLE;
 802227a:	687b      	ldr	r3, [r7, #4]
 802227c:	681b      	ldr	r3, [r3, #0]
 802227e:	699b      	ldr	r3, [r3, #24]
 8022280:	f003 0302 	and.w	r3, r3, #2
 8022284:	2b00      	cmp	r3, #0
 8022286:	bf14      	ite	ne
 8022288:	2301      	movne	r3, #1
 802228a:	2300      	moveq	r3, #0
 802228c:	b2db      	uxtb	r3, r3
 802228e:	461a      	mov	r2, r3
 8022290:	683b      	ldr	r3, [r7, #0]
 8022292:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  macconf->ZeroQuantaPause = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_ZQPD) >> 7) == 0U) ? ENABLE : DISABLE;
 8022296:	687b      	ldr	r3, [r7, #4]
 8022298:	681b      	ldr	r3, [r3, #0]
 802229a:	699b      	ldr	r3, [r3, #24]
 802229c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80222a0:	2b00      	cmp	r3, #0
 80222a2:	bf0c      	ite	eq
 80222a4:	2301      	moveq	r3, #1
 80222a6:	2300      	movne	r3, #0
 80222a8:	b2db      	uxtb	r3, r3
 80222aa:	461a      	mov	r2, r3
 80222ac:	683b      	ldr	r3, [r7, #0]
 80222ae:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
  macconf->PauseLowThreshold = READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_PLT);
 80222b2:	687b      	ldr	r3, [r7, #4]
 80222b4:	681b      	ldr	r3, [r3, #0]
 80222b6:	699b      	ldr	r3, [r3, #24]
 80222b8:	f003 0230 	and.w	r2, r3, #48	; 0x30
 80222bc:	683b      	ldr	r3, [r7, #0]
 80222be:	651a      	str	r2, [r3, #80]	; 0x50
  macconf->PauseTime = (READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_PT) >> 16);
 80222c0:	687b      	ldr	r3, [r7, #4]
 80222c2:	681b      	ldr	r3, [r3, #0]
 80222c4:	699b      	ldr	r3, [r3, #24]
 80222c6:	0c1b      	lsrs	r3, r3, #16
 80222c8:	b29a      	uxth	r2, r3
 80222ca:	683b      	ldr	r3, [r7, #0]
 80222cc:	649a      	str	r2, [r3, #72]	; 0x48
  macconf->ReceiveFlowControl = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_RFCE) >> 2U) > 0U) ? ENABLE : DISABLE;
 80222ce:	687b      	ldr	r3, [r7, #4]
 80222d0:	681b      	ldr	r3, [r3, #0]
 80222d2:	699b      	ldr	r3, [r3, #24]
 80222d4:	f003 0304 	and.w	r3, r3, #4
 80222d8:	2b00      	cmp	r3, #0
 80222da:	bf14      	ite	ne
 80222dc:	2301      	movne	r3, #1
 80222de:	2300      	moveq	r3, #0
 80222e0:	b2db      	uxtb	r3, r3
 80222e2:	461a      	mov	r2, r3
 80222e4:	683b      	ldr	r3, [r7, #0]
 80222e6:	f883 2056 	strb.w	r2, [r3, #86]	; 0x56
  macconf->UnicastPausePacketDetect = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_UPFD) >> 3U) > 0U)
 80222ea:	687b      	ldr	r3, [r7, #4]
 80222ec:	681b      	ldr	r3, [r3, #0]
 80222ee:	699b      	ldr	r3, [r3, #24]
 80222f0:	f003 0308 	and.w	r3, r3, #8
                                      ? ENABLE : DISABLE;
 80222f4:	2b00      	cmp	r3, #0
 80222f6:	bf14      	ite	ne
 80222f8:	2301      	movne	r3, #1
 80222fa:	2300      	moveq	r3, #0
 80222fc:	b2db      	uxtb	r3, r3
 80222fe:	461a      	mov	r2, r3
  macconf->UnicastPausePacketDetect = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_UPFD) >> 3U) > 0U)
 8022300:	683b      	ldr	r3, [r7, #0]
 8022302:	f883 2055 	strb.w	r2, [r3, #85]	; 0x55

  return HAL_OK;
 8022306:	2300      	movs	r3, #0
}
 8022308:	4618      	mov	r0, r3
 802230a:	370c      	adds	r7, #12
 802230c:	46bd      	mov	sp, r7
 802230e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8022312:	4770      	bx	lr

08022314 <HAL_ETH_SetMACConfig>:
  * @param  macconf: pointer to a ETH_MACConfigTypeDef structure that contains
  *         the configuration of the MAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 8022314:	b580      	push	{r7, lr}
 8022316:	b082      	sub	sp, #8
 8022318:	af00      	add	r7, sp, #0
 802231a:	6078      	str	r0, [r7, #4]
 802231c:	6039      	str	r1, [r7, #0]
  if (macconf == NULL)
 802231e:	683b      	ldr	r3, [r7, #0]
 8022320:	2b00      	cmp	r3, #0
 8022322:	d101      	bne.n	8022328 <HAL_ETH_SetMACConfig+0x14>
  {
    return HAL_ERROR;
 8022324:	2301      	movs	r3, #1
 8022326:	e00b      	b.n	8022340 <HAL_ETH_SetMACConfig+0x2c>
  }

  if (heth->gState == HAL_ETH_STATE_READY)
 8022328:	687b      	ldr	r3, [r7, #4]
 802232a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 802232e:	2b10      	cmp	r3, #16
 8022330:	d105      	bne.n	802233e <HAL_ETH_SetMACConfig+0x2a>
  {
    ETH_SetMACConfig(heth, macconf);
 8022332:	6839      	ldr	r1, [r7, #0]
 8022334:	6878      	ldr	r0, [r7, #4]
 8022336:	f000 f88f 	bl	8022458 <ETH_SetMACConfig>

    return HAL_OK;
 802233a:	2300      	movs	r3, #0
 802233c:	e000      	b.n	8022340 <HAL_ETH_SetMACConfig+0x2c>
  }
  else
  {
    return HAL_ERROR;
 802233e:	2301      	movs	r3, #1
  }
}
 8022340:	4618      	mov	r0, r3
 8022342:	3708      	adds	r7, #8
 8022344:	46bd      	mov	sp, r7
 8022346:	bd80      	pop	{r7, pc}

08022348 <HAL_ETH_SetMDIOClockRange>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
void HAL_ETH_SetMDIOClockRange(ETH_HandleTypeDef *heth)
{
 8022348:	b580      	push	{r7, lr}
 802234a:	b084      	sub	sp, #16
 802234c:	af00      	add	r7, sp, #0
 802234e:	6078      	str	r0, [r7, #4]
  uint32_t hclk;
  uint32_t tmpreg;

  /* Get the ETHERNET MACMIIAR value */
  tmpreg = (heth->Instance)->MACMIIAR;
 8022350:	687b      	ldr	r3, [r7, #4]
 8022352:	681b      	ldr	r3, [r3, #0]
 8022354:	691b      	ldr	r3, [r3, #16]
 8022356:	60fb      	str	r3, [r7, #12]
  /* Clear CSR Clock Range CR[2:0] bits */
  tmpreg &= ETH_MACMIIAR_CR_MASK;
 8022358:	68fb      	ldr	r3, [r7, #12]
 802235a:	f023 031c 	bic.w	r3, r3, #28
 802235e:	60fb      	str	r3, [r7, #12]

  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 8022360:	f001 fa76 	bl	8023850 <HAL_RCC_GetHCLKFreq>
 8022364:	60b8      	str	r0, [r7, #8]

  /* Set CR bits depending on hclk value */
  if ((hclk >= 20000000U) && (hclk < 35000000U))
 8022366:	68bb      	ldr	r3, [r7, #8]
 8022368:	4a1d      	ldr	r2, [pc, #116]	; (80223e0 <HAL_ETH_SetMDIOClockRange+0x98>)
 802236a:	4293      	cmp	r3, r2
 802236c:	d908      	bls.n	8022380 <HAL_ETH_SetMDIOClockRange+0x38>
 802236e:	68bb      	ldr	r3, [r7, #8]
 8022370:	4a1c      	ldr	r2, [pc, #112]	; (80223e4 <HAL_ETH_SetMDIOClockRange+0x9c>)
 8022372:	4293      	cmp	r3, r2
 8022374:	d804      	bhi.n	8022380 <HAL_ETH_SetMDIOClockRange+0x38>
  {
    /* CSR Clock Range between 20-35 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div16;
 8022376:	68fb      	ldr	r3, [r7, #12]
 8022378:	f043 0308 	orr.w	r3, r3, #8
 802237c:	60fb      	str	r3, [r7, #12]
 802237e:	e027      	b.n	80223d0 <HAL_ETH_SetMDIOClockRange+0x88>
  }
  else if ((hclk >= 35000000U) && (hclk < 60000000U))
 8022380:	68bb      	ldr	r3, [r7, #8]
 8022382:	4a18      	ldr	r2, [pc, #96]	; (80223e4 <HAL_ETH_SetMDIOClockRange+0x9c>)
 8022384:	4293      	cmp	r3, r2
 8022386:	d908      	bls.n	802239a <HAL_ETH_SetMDIOClockRange+0x52>
 8022388:	68bb      	ldr	r3, [r7, #8]
 802238a:	4a17      	ldr	r2, [pc, #92]	; (80223e8 <HAL_ETH_SetMDIOClockRange+0xa0>)
 802238c:	4293      	cmp	r3, r2
 802238e:	d204      	bcs.n	802239a <HAL_ETH_SetMDIOClockRange+0x52>
  {
    /* CSR Clock Range between 35-60 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div26;
 8022390:	68fb      	ldr	r3, [r7, #12]
 8022392:	f043 030c 	orr.w	r3, r3, #12
 8022396:	60fb      	str	r3, [r7, #12]
 8022398:	e01a      	b.n	80223d0 <HAL_ETH_SetMDIOClockRange+0x88>
  }
  else if ((hclk >= 60000000U) && (hclk < 100000000U))
 802239a:	68bb      	ldr	r3, [r7, #8]
 802239c:	4a12      	ldr	r2, [pc, #72]	; (80223e8 <HAL_ETH_SetMDIOClockRange+0xa0>)
 802239e:	4293      	cmp	r3, r2
 80223a0:	d303      	bcc.n	80223aa <HAL_ETH_SetMDIOClockRange+0x62>
 80223a2:	68bb      	ldr	r3, [r7, #8]
 80223a4:	4a11      	ldr	r2, [pc, #68]	; (80223ec <HAL_ETH_SetMDIOClockRange+0xa4>)
 80223a6:	4293      	cmp	r3, r2
 80223a8:	d911      	bls.n	80223ce <HAL_ETH_SetMDIOClockRange+0x86>
  {
    /* CSR Clock Range between 60-100 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div42;
  }
  else if ((hclk >= 100000000U) && (hclk < 150000000U))
 80223aa:	68bb      	ldr	r3, [r7, #8]
 80223ac:	4a0f      	ldr	r2, [pc, #60]	; (80223ec <HAL_ETH_SetMDIOClockRange+0xa4>)
 80223ae:	4293      	cmp	r3, r2
 80223b0:	d908      	bls.n	80223c4 <HAL_ETH_SetMDIOClockRange+0x7c>
 80223b2:	68bb      	ldr	r3, [r7, #8]
 80223b4:	4a0e      	ldr	r2, [pc, #56]	; (80223f0 <HAL_ETH_SetMDIOClockRange+0xa8>)
 80223b6:	4293      	cmp	r3, r2
 80223b8:	d804      	bhi.n	80223c4 <HAL_ETH_SetMDIOClockRange+0x7c>
  {
    /* CSR Clock Range between 100-150 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div62;
 80223ba:	68fb      	ldr	r3, [r7, #12]
 80223bc:	f043 0304 	orr.w	r3, r3, #4
 80223c0:	60fb      	str	r3, [r7, #12]
 80223c2:	e005      	b.n	80223d0 <HAL_ETH_SetMDIOClockRange+0x88>
  }
  else /* ((hclk >= 150000000)&&(hclk <= 183000000))*/
  {
    /* CSR Clock Range between 150-183 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div102;
 80223c4:	68fb      	ldr	r3, [r7, #12]
 80223c6:	f043 0310 	orr.w	r3, r3, #16
 80223ca:	60fb      	str	r3, [r7, #12]
 80223cc:	e000      	b.n	80223d0 <HAL_ETH_SetMDIOClockRange+0x88>
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div42;
 80223ce:	bf00      	nop
  }

  /* Write to ETHERNET MAC MIIAR: Configure the ETHERNET CSR Clock Range */
  (heth->Instance)->MACMIIAR = (uint32_t)tmpreg;
 80223d0:	687b      	ldr	r3, [r7, #4]
 80223d2:	681b      	ldr	r3, [r3, #0]
 80223d4:	68fa      	ldr	r2, [r7, #12]
 80223d6:	611a      	str	r2, [r3, #16]
}
 80223d8:	bf00      	nop
 80223da:	3710      	adds	r7, #16
 80223dc:	46bd      	mov	sp, r7
 80223de:	bd80      	pop	{r7, pc}
 80223e0:	01312cff 	.word	0x01312cff
 80223e4:	02160ebf 	.word	0x02160ebf
 80223e8:	03938700 	.word	0x03938700
 80223ec:	05f5e0ff 	.word	0x05f5e0ff
 80223f0:	08f0d17f 	.word	0x08f0d17f

080223f4 <HAL_ETH_GetDMAError>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval ETH DMA Error Code
  */
uint32_t HAL_ETH_GetDMAError(ETH_HandleTypeDef *heth)
{
 80223f4:	b480      	push	{r7}
 80223f6:	b083      	sub	sp, #12
 80223f8:	af00      	add	r7, sp, #0
 80223fa:	6078      	str	r0, [r7, #4]
  return heth->DMAErrorCode;
 80223fc:	687b      	ldr	r3, [r7, #4]
 80223fe:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
}
 8022402:	4618      	mov	r0, r3
 8022404:	370c      	adds	r7, #12
 8022406:	46bd      	mov	sp, r7
 8022408:	f85d 7b04 	ldr.w	r7, [sp], #4
 802240c:	4770      	bx	lr

0802240e <ETH_FlushTransmitFIFO>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_FlushTransmitFIFO(ETH_HandleTypeDef *heth)
{
 802240e:	b580      	push	{r7, lr}
 8022410:	b084      	sub	sp, #16
 8022412:	af00      	add	r7, sp, #0
 8022414:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg = 0;
 8022416:	2300      	movs	r3, #0
 8022418:	60fb      	str	r3, [r7, #12]

  /* Set the Flush Transmit FIFO bit */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_FTF;
 802241a:	687b      	ldr	r3, [r7, #4]
 802241c:	681b      	ldr	r3, [r3, #0]
 802241e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8022422:	699b      	ldr	r3, [r3, #24]
 8022424:	687a      	ldr	r2, [r7, #4]
 8022426:	6812      	ldr	r2, [r2, #0]
 8022428:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 802242c:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8022430:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = (heth->Instance)->DMAOMR;
 8022432:	687b      	ldr	r3, [r7, #4]
 8022434:	681b      	ldr	r3, [r3, #0]
 8022436:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 802243a:	699b      	ldr	r3, [r3, #24]
 802243c:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 802243e:	2001      	movs	r0, #1
 8022440:	f7ff f894 	bl	802156c <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg;
 8022444:	687b      	ldr	r3, [r7, #4]
 8022446:	681a      	ldr	r2, [r3, #0]
 8022448:	68fb      	ldr	r3, [r7, #12]
 802244a:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 802244e:	6193      	str	r3, [r2, #24]
}
 8022450:	bf00      	nop
 8022452:	3710      	adds	r7, #16
 8022454:	46bd      	mov	sp, r7
 8022456:	bd80      	pop	{r7, pc}

08022458 <ETH_SetMACConfig>:

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 8022458:	b580      	push	{r7, lr}
 802245a:	b084      	sub	sp, #16
 802245c:	af00      	add	r7, sp, #0
 802245e:	6078      	str	r0, [r7, #4]
 8022460:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 8022462:	687b      	ldr	r3, [r7, #4]
 8022464:	681b      	ldr	r3, [r3, #0]
 8022466:	681b      	ldr	r3, [r3, #0]
 8022468:	60fb      	str	r3, [r7, #12]
  /* Clear WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 802246a:	68fa      	ldr	r2, [r7, #12]
 802246c:	4b51      	ldr	r3, [pc, #324]	; (80225b4 <ETH_SetMACConfig+0x15c>)
 802246e:	4013      	ands	r3, r2
 8022470:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8022472:	683b      	ldr	r3, [r7, #0]
 8022474:	7c1b      	ldrb	r3, [r3, #16]
 8022476:	2b00      	cmp	r3, #0
 8022478:	d102      	bne.n	8022480 <ETH_SetMACConfig+0x28>
 802247a:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 802247e:	e000      	b.n	8022482 <ETH_SetMACConfig+0x2a>
 8022480:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 8022482:	683b      	ldr	r3, [r7, #0]
 8022484:	7c5b      	ldrb	r3, [r3, #17]
 8022486:	2b00      	cmp	r3, #0
 8022488:	d102      	bne.n	8022490 <ETH_SetMACConfig+0x38>
 802248a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 802248e:	e000      	b.n	8022492 <ETH_SetMACConfig+0x3a>
 8022490:	2300      	movs	r3, #0
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8022492:	431a      	orrs	r2, r3
                        (uint32_t)macconf->InterPacketGapVal |
 8022494:	683b      	ldr	r3, [r7, #0]
 8022496:	689b      	ldr	r3, [r3, #8]
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 8022498:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 802249a:	683b      	ldr	r3, [r7, #0]
 802249c:	7fdb      	ldrb	r3, [r3, #31]
 802249e:	041b      	lsls	r3, r3, #16
                        (uint32_t)macconf->InterPacketGapVal |
 80224a0:	431a      	orrs	r2, r3
                        macconf->Speed |
 80224a2:	683b      	ldr	r3, [r7, #0]
 80224a4:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 80224a6:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 80224a8:	683a      	ldr	r2, [r7, #0]
 80224aa:	7f92      	ldrb	r2, [r2, #30]
 80224ac:	2a00      	cmp	r2, #0
 80224ae:	d102      	bne.n	80224b6 <ETH_SetMACConfig+0x5e>
 80224b0:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80224b4:	e000      	b.n	80224b8 <ETH_SetMACConfig+0x60>
 80224b6:	2200      	movs	r2, #0
                        macconf->Speed |
 80224b8:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 80224ba:	683b      	ldr	r3, [r7, #0]
 80224bc:	7f1b      	ldrb	r3, [r3, #28]
 80224be:	031b      	lsls	r3, r3, #12
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 80224c0:	431a      	orrs	r2, r3
                        macconf->DuplexMode |
 80224c2:	683b      	ldr	r3, [r7, #0]
 80224c4:	699b      	ldr	r3, [r3, #24]
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 80224c6:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 80224c8:	683b      	ldr	r3, [r7, #0]
 80224ca:	791b      	ldrb	r3, [r3, #4]
 80224cc:	029b      	lsls	r3, r3, #10
                        macconf->DuplexMode |
 80224ce:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 80224d0:	683a      	ldr	r2, [r7, #0]
 80224d2:	f892 2020 	ldrb.w	r2, [r2, #32]
 80224d6:	2a00      	cmp	r2, #0
 80224d8:	d102      	bne.n	80224e0 <ETH_SetMACConfig+0x88>
 80224da:	f44f 7200 	mov.w	r2, #512	; 0x200
 80224de:	e000      	b.n	80224e2 <ETH_SetMACConfig+0x8a>
 80224e0:	2200      	movs	r2, #0
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 80224e2:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 80224e4:	683b      	ldr	r3, [r7, #0]
 80224e6:	7bdb      	ldrb	r3, [r3, #15]
 80224e8:	01db      	lsls	r3, r3, #7
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 80224ea:	431a      	orrs	r2, r3
                        macconf->BackOffLimit |
 80224ec:	683b      	ldr	r3, [r7, #0]
 80224ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 80224f0:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->DeferralCheck << 4U));
 80224f2:	683b      	ldr	r3, [r7, #0]
 80224f4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80224f8:	011b      	lsls	r3, r3, #4
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 80224fa:	4313      	orrs	r3, r2
 80224fc:	68fa      	ldr	r2, [r7, #12]
 80224fe:	4313      	orrs	r3, r2
 8022500:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 8022502:	687b      	ldr	r3, [r7, #4]
 8022504:	681b      	ldr	r3, [r3, #0]
 8022506:	68fa      	ldr	r2, [r7, #12]
 8022508:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 802250a:	687b      	ldr	r3, [r7, #4]
 802250c:	681b      	ldr	r3, [r3, #0]
 802250e:	681b      	ldr	r3, [r3, #0]
 8022510:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8022512:	2001      	movs	r0, #1
 8022514:	f7ff f82a 	bl	802156c <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8022518:	687b      	ldr	r3, [r7, #4]
 802251a:	681b      	ldr	r3, [r3, #0]
 802251c:	68fa      	ldr	r2, [r7, #12]
 802251e:	601a      	str	r2, [r3, #0]

  /*----------------------- ETHERNET MACFCR Configuration --------------------*/

  /* Get the ETHERNET MACFCR value */
  tmpreg1 = (heth->Instance)->MACFCR;
 8022520:	687b      	ldr	r3, [r7, #4]
 8022522:	681b      	ldr	r3, [r3, #0]
 8022524:	699b      	ldr	r3, [r3, #24]
 8022526:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 8022528:	68fa      	ldr	r2, [r7, #12]
 802252a:	f64f 7341 	movw	r3, #65345	; 0xff41
 802252e:	4013      	ands	r3, r2
 8022530:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8022532:	683b      	ldr	r3, [r7, #0]
 8022534:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8022536:	041b      	lsls	r3, r3, #16
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 8022538:	683a      	ldr	r2, [r7, #0]
 802253a:	f892 204c 	ldrb.w	r2, [r2, #76]	; 0x4c
 802253e:	2a00      	cmp	r2, #0
 8022540:	d101      	bne.n	8022546 <ETH_SetMACConfig+0xee>
 8022542:	2280      	movs	r2, #128	; 0x80
 8022544:	e000      	b.n	8022548 <ETH_SetMACConfig+0xf0>
 8022546:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8022548:	431a      	orrs	r2, r3
                        macconf->PauseLowThreshold |
 802254a:	683b      	ldr	r3, [r7, #0]
 802254c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 802254e:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 8022550:	683a      	ldr	r2, [r7, #0]
 8022552:	f892 2055 	ldrb.w	r2, [r2, #85]	; 0x55
 8022556:	2a01      	cmp	r2, #1
 8022558:	d101      	bne.n	802255e <ETH_SetMACConfig+0x106>
 802255a:	2208      	movs	r2, #8
 802255c:	e000      	b.n	8022560 <ETH_SetMACConfig+0x108>
 802255e:	2200      	movs	r2, #0
                        macconf->PauseLowThreshold |
 8022560:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveFlowControl == ENABLE) ? 1U : 0U) << 2U) |
 8022562:	683a      	ldr	r2, [r7, #0]
 8022564:	f892 2056 	ldrb.w	r2, [r2, #86]	; 0x56
 8022568:	2a01      	cmp	r2, #1
 802256a:	d101      	bne.n	8022570 <ETH_SetMACConfig+0x118>
 802256c:	2204      	movs	r2, #4
 802256e:	e000      	b.n	8022572 <ETH_SetMACConfig+0x11a>
 8022570:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 8022572:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->TransmitFlowControl == ENABLE) ? 1U : 0U) << 1U));
 8022574:	683a      	ldr	r2, [r7, #0]
 8022576:	f892 2054 	ldrb.w	r2, [r2, #84]	; 0x54
 802257a:	2a01      	cmp	r2, #1
 802257c:	d101      	bne.n	8022582 <ETH_SetMACConfig+0x12a>
 802257e:	2202      	movs	r2, #2
 8022580:	e000      	b.n	8022584 <ETH_SetMACConfig+0x12c>
 8022582:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8022584:	4313      	orrs	r3, r2
 8022586:	68fa      	ldr	r2, [r7, #12]
 8022588:	4313      	orrs	r3, r2
 802258a:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACFCR */
  (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 802258c:	687b      	ldr	r3, [r7, #4]
 802258e:	681b      	ldr	r3, [r3, #0]
 8022590:	68fa      	ldr	r2, [r7, #12]
 8022592:	619a      	str	r2, [r3, #24]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACFCR;
 8022594:	687b      	ldr	r3, [r7, #4]
 8022596:	681b      	ldr	r3, [r3, #0]
 8022598:	699b      	ldr	r3, [r3, #24]
 802259a:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 802259c:	2001      	movs	r0, #1
 802259e:	f7fe ffe5 	bl	802156c <HAL_Delay>
  (heth->Instance)->MACFCR = tmpreg1;
 80225a2:	687b      	ldr	r3, [r7, #4]
 80225a4:	681b      	ldr	r3, [r3, #0]
 80225a6:	68fa      	ldr	r2, [r7, #12]
 80225a8:	619a      	str	r2, [r3, #24]
}
 80225aa:	bf00      	nop
 80225ac:	3710      	adds	r7, #16
 80225ae:	46bd      	mov	sp, r7
 80225b0:	bd80      	pop	{r7, pc}
 80225b2:	bf00      	nop
 80225b4:	ff20810f 	.word	0xff20810f

080225b8 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 80225b8:	b580      	push	{r7, lr}
 80225ba:	b084      	sub	sp, #16
 80225bc:	af00      	add	r7, sp, #0
 80225be:	6078      	str	r0, [r7, #4]
 80225c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*----------------------- ETHERNET DMAOMR Configuration --------------------*/
  /* Get the ETHERNET DMAOMR value */
  tmpreg1 = (heth->Instance)->DMAOMR;
 80225c2:	687b      	ldr	r3, [r7, #4]
 80225c4:	681b      	ldr	r3, [r3, #0]
 80225c6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80225ca:	699b      	ldr	r3, [r3, #24]
 80225cc:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 80225ce:	68fa      	ldr	r2, [r7, #12]
 80225d0:	4b3d      	ldr	r3, [pc, #244]	; (80226c8 <ETH_SetDMAConfig+0x110>)
 80225d2:	4013      	ands	r3, r2
 80225d4:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 80225d6:	683b      	ldr	r3, [r7, #0]
 80225d8:	7b1b      	ldrb	r3, [r3, #12]
 80225da:	2b00      	cmp	r3, #0
 80225dc:	d102      	bne.n	80225e4 <ETH_SetDMAConfig+0x2c>
 80225de:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 80225e2:	e000      	b.n	80225e6 <ETH_SetDMAConfig+0x2e>
 80225e4:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 80225e6:	683b      	ldr	r3, [r7, #0]
 80225e8:	7b5b      	ldrb	r3, [r3, #13]
 80225ea:	065b      	lsls	r3, r3, #25
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 80225ec:	4313      	orrs	r3, r2
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 80225ee:	683a      	ldr	r2, [r7, #0]
 80225f0:	7f52      	ldrb	r2, [r2, #29]
 80225f2:	2a00      	cmp	r2, #0
 80225f4:	d102      	bne.n	80225fc <ETH_SetDMAConfig+0x44>
 80225f6:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80225fa:	e000      	b.n	80225fe <ETH_SetDMAConfig+0x46>
 80225fc:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 80225fe:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8022600:	683b      	ldr	r3, [r7, #0]
 8022602:	7b9b      	ldrb	r3, [r3, #14]
 8022604:	055b      	lsls	r3, r3, #21
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 8022606:	431a      	orrs	r2, r3
                        dmaconf->TransmitThresholdControl |
 8022608:	683b      	ldr	r3, [r7, #0]
 802260a:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 802260c:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 802260e:	683b      	ldr	r3, [r7, #0]
 8022610:	7f1b      	ldrb	r3, [r3, #28]
 8022612:	01db      	lsls	r3, r3, #7
                        dmaconf->TransmitThresholdControl |
 8022614:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 8022616:	683b      	ldr	r3, [r7, #0]
 8022618:	7f9b      	ldrb	r3, [r3, #30]
 802261a:	019b      	lsls	r3, r3, #6
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 802261c:	431a      	orrs	r2, r3
                        dmaconf->ReceiveThresholdControl |
 802261e:	683b      	ldr	r3, [r7, #0]
 8022620:	6a1b      	ldr	r3, [r3, #32]
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 8022622:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->SecondFrameOperate << 2U));
 8022624:	683b      	ldr	r3, [r7, #0]
 8022626:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 802262a:	009b      	lsls	r3, r3, #2
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 802262c:	4313      	orrs	r3, r2
 802262e:	68fa      	ldr	r2, [r7, #12]
 8022630:	4313      	orrs	r3, r2
 8022632:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET DMAOMR */
  (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 8022634:	687b      	ldr	r3, [r7, #4]
 8022636:	681b      	ldr	r3, [r3, #0]
 8022638:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 802263c:	461a      	mov	r2, r3
 802263e:	68fb      	ldr	r3, [r7, #12]
 8022640:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8022642:	687b      	ldr	r3, [r7, #4]
 8022644:	681b      	ldr	r3, [r3, #0]
 8022646:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 802264a:	699b      	ldr	r3, [r3, #24]
 802264c:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 802264e:	2001      	movs	r0, #1
 8022650:	f7fe ff8c 	bl	802156c <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 8022654:	687b      	ldr	r3, [r7, #4]
 8022656:	681b      	ldr	r3, [r3, #0]
 8022658:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 802265c:	461a      	mov	r2, r3
 802265e:	68fb      	ldr	r3, [r7, #12]
 8022660:	6193      	str	r3, [r2, #24]

  /*----------------------- ETHERNET DMABMR Configuration --------------------*/
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8022662:	683b      	ldr	r3, [r7, #0]
 8022664:	791b      	ldrb	r3, [r3, #4]
 8022666:	065a      	lsls	r2, r3, #25
                                        dmaconf->BurstMode |
 8022668:	683b      	ldr	r3, [r7, #0]
 802266a:	689b      	ldr	r3, [r3, #8]
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 802266c:	431a      	orrs	r2, r3
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 802266e:	683b      	ldr	r3, [r7, #0]
 8022670:	699b      	ldr	r3, [r3, #24]
                                        dmaconf->BurstMode |
 8022672:	431a      	orrs	r2, r3
                                                                       Rx it is applied for the other */
                                        dmaconf->TxDMABurstLength |
 8022674:	683b      	ldr	r3, [r7, #0]
 8022676:	691b      	ldr	r3, [r3, #16]
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 8022678:	431a      	orrs	r2, r3
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 802267a:	683b      	ldr	r3, [r7, #0]
 802267c:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8022680:	01db      	lsls	r3, r3, #7
                                        dmaconf->TxDMABurstLength |
 8022682:	431a      	orrs	r2, r3
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8022684:	683b      	ldr	r3, [r7, #0]
 8022686:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8022688:	009b      	lsls	r3, r3, #2
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 802268a:	431a      	orrs	r2, r3
                                        dmaconf->DMAArbitration |
 802268c:	683b      	ldr	r3, [r7, #0]
 802268e:	681b      	ldr	r3, [r3, #0]
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8022690:	4313      	orrs	r3, r2
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8022692:	687a      	ldr	r2, [r7, #4]
 8022694:	6812      	ldr	r2, [r2, #0]
 8022696:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 802269a:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 802269e:	6013      	str	r3, [r2, #0]
                                        ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMABMR;
 80226a0:	687b      	ldr	r3, [r7, #4]
 80226a2:	681b      	ldr	r3, [r3, #0]
 80226a4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80226a8:	681b      	ldr	r3, [r3, #0]
 80226aa:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80226ac:	2001      	movs	r0, #1
 80226ae:	f7fe ff5d 	bl	802156c <HAL_Delay>
  (heth->Instance)->DMABMR = tmpreg1;
 80226b2:	687b      	ldr	r3, [r7, #4]
 80226b4:	681b      	ldr	r3, [r3, #0]
 80226b6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80226ba:	461a      	mov	r2, r3
 80226bc:	68fb      	ldr	r3, [r7, #12]
 80226be:	6013      	str	r3, [r2, #0]
}
 80226c0:	bf00      	nop
 80226c2:	3710      	adds	r7, #16
 80226c4:	46bd      	mov	sp, r7
 80226c6:	bd80      	pop	{r7, pc}
 80226c8:	f8de3f23 	.word	0xf8de3f23

080226cc <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 80226cc:	b580      	push	{r7, lr}
 80226ce:	b0a6      	sub	sp, #152	; 0x98
 80226d0:	af00      	add	r7, sp, #0
 80226d2:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.Watchdog = ENABLE;
 80226d4:	2301      	movs	r3, #1
 80226d6:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
  macDefaultConf.Jabber = ENABLE;
 80226da:	2301      	movs	r3, #1
 80226dc:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
  macDefaultConf.InterPacketGapVal = ETH_INTERFRAMEGAP_96BIT;
 80226e0:	2300      	movs	r3, #0
 80226e2:	63fb      	str	r3, [r7, #60]	; 0x3c
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 80226e4:	2300      	movs	r3, #0
 80226e6:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
  macDefaultConf.ReceiveOwn = ENABLE;
 80226ea:	2301      	movs	r3, #1
 80226ec:	f887 3052 	strb.w	r3, [r7, #82]	; 0x52
  macDefaultConf.LoopbackMode = DISABLE;
 80226f0:	2300      	movs	r3, #0
 80226f2:	f887 3050 	strb.w	r3, [r7, #80]	; 0x50
  macDefaultConf.ChecksumOffload = ENABLE;
 80226f6:	2301      	movs	r3, #1
 80226f8:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  macDefaultConf.RetryTransmission = DISABLE;
 80226fc:	2300      	movs	r3, #0
 80226fe:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
  macDefaultConf.AutomaticPadCRCStrip = DISABLE;
 8022702:	2300      	movs	r3, #0
 8022704:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8022708:	2300      	movs	r3, #0
 802270a:	65bb      	str	r3, [r7, #88]	; 0x58
  macDefaultConf.DeferralCheck = DISABLE;
 802270c:	2300      	movs	r3, #0
 802270e:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  macDefaultConf.PauseTime = 0x0U;
 8022712:	2300      	movs	r3, #0
 8022714:	67fb      	str	r3, [r7, #124]	; 0x7c
  macDefaultConf.ZeroQuantaPause = DISABLE;
 8022716:	2300      	movs	r3, #0
 8022718:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 802271c:	2300      	movs	r3, #0
 802271e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macDefaultConf.ReceiveFlowControl = DISABLE;
 8022722:	2300      	movs	r3, #0
 8022724:	f887 308a 	strb.w	r3, [r7, #138]	; 0x8a
  macDefaultConf.TransmitFlowControl = DISABLE;
 8022728:	2300      	movs	r3, #0
 802272a:	f887 3088 	strb.w	r3, [r7, #136]	; 0x88
  macDefaultConf.Speed = ETH_SPEED_100M;
 802272e:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8022732:	64bb      	str	r3, [r7, #72]	; 0x48
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 8022734:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8022738:	64fb      	str	r3, [r7, #76]	; 0x4c
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 802273a:	2300      	movs	r3, #0
 802273c:	f887 3089 	strb.w	r3, [r7, #137]	; 0x89

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 8022740:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8022744:	4619      	mov	r1, r3
 8022746:	6878      	ldr	r0, [r7, #4]
 8022748:	f7ff fe86 	bl	8022458 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.DropTCPIPChecksumErrorFrame = ENABLE;
 802274c:	2301      	movs	r3, #1
 802274e:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.ReceiveStoreForward = ENABLE;
 8022750:	2301      	movs	r3, #1
 8022752:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.FlushRxPacket = ENABLE;
 8022754:	2301      	movs	r3, #1
 8022756:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  dmaDefaultConf.TransmitStoreForward = ENABLE;
 802275a:	2301      	movs	r3, #1
 802275c:	75bb      	strb	r3, [r7, #22]
  dmaDefaultConf.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 802275e:	2300      	movs	r3, #0
 8022760:	61fb      	str	r3, [r7, #28]
  dmaDefaultConf.ForwardErrorFrames = DISABLE;
 8022762:	2300      	movs	r3, #0
 8022764:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  dmaDefaultConf.ForwardUndersizedGoodFrames = DISABLE;
 8022768:	2300      	movs	r3, #0
 802276a:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  dmaDefaultConf.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 802276e:	2300      	movs	r3, #0
 8022770:	62bb      	str	r3, [r7, #40]	; 0x28
  dmaDefaultConf.SecondFrameOperate = ENABLE;
 8022772:	2301      	movs	r3, #1
 8022774:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 8022778:	2301      	movs	r3, #1
 802277a:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 802277c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8022780:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8022782:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8022786:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8022788:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 802278c:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.EnhancedDescriptorFormat = ENABLE;
 802278e:	2301      	movs	r3, #1
 8022790:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
  dmaDefaultConf.DescriptorSkipLength = 0x0U;
 8022794:	2300      	movs	r3, #0
 8022796:	633b      	str	r3, [r7, #48]	; 0x30
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 8022798:	2300      	movs	r3, #0
 802279a:	60bb      	str	r3, [r7, #8]

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 802279c:	f107 0308 	add.w	r3, r7, #8
 80227a0:	4619      	mov	r1, r3
 80227a2:	6878      	ldr	r0, [r7, #4]
 80227a4:	f7ff ff08 	bl	80225b8 <ETH_SetDMAConfig>
}
 80227a8:	bf00      	nop
 80227aa:	3798      	adds	r7, #152	; 0x98
 80227ac:	46bd      	mov	sp, r7
 80227ae:	bd80      	pop	{r7, pc}

080227b0 <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 80227b0:	b480      	push	{r7}
 80227b2:	b087      	sub	sp, #28
 80227b4:	af00      	add	r7, sp, #0
 80227b6:	60f8      	str	r0, [r7, #12]
 80227b8:	60b9      	str	r1, [r7, #8]
 80227ba:	607a      	str	r2, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);

  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 80227bc:	687b      	ldr	r3, [r7, #4]
 80227be:	3305      	adds	r3, #5
 80227c0:	781b      	ldrb	r3, [r3, #0]
 80227c2:	021b      	lsls	r3, r3, #8
 80227c4:	687a      	ldr	r2, [r7, #4]
 80227c6:	3204      	adds	r2, #4
 80227c8:	7812      	ldrb	r2, [r2, #0]
 80227ca:	4313      	orrs	r3, r2
 80227cc:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 80227ce:	68ba      	ldr	r2, [r7, #8]
 80227d0:	4b11      	ldr	r3, [pc, #68]	; (8022818 <ETH_MACAddressConfig+0x68>)
 80227d2:	4413      	add	r3, r2
 80227d4:	461a      	mov	r2, r3
 80227d6:	697b      	ldr	r3, [r7, #20]
 80227d8:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 80227da:	687b      	ldr	r3, [r7, #4]
 80227dc:	3303      	adds	r3, #3
 80227de:	781b      	ldrb	r3, [r3, #0]
 80227e0:	061a      	lsls	r2, r3, #24
 80227e2:	687b      	ldr	r3, [r7, #4]
 80227e4:	3302      	adds	r3, #2
 80227e6:	781b      	ldrb	r3, [r3, #0]
 80227e8:	041b      	lsls	r3, r3, #16
 80227ea:	431a      	orrs	r2, r3
 80227ec:	687b      	ldr	r3, [r7, #4]
 80227ee:	3301      	adds	r3, #1
 80227f0:	781b      	ldrb	r3, [r3, #0]
 80227f2:	021b      	lsls	r3, r3, #8
 80227f4:	4313      	orrs	r3, r2
 80227f6:	687a      	ldr	r2, [r7, #4]
 80227f8:	7812      	ldrb	r2, [r2, #0]
 80227fa:	4313      	orrs	r3, r2
 80227fc:	617b      	str	r3, [r7, #20]

  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 80227fe:	68ba      	ldr	r2, [r7, #8]
 8022800:	4b06      	ldr	r3, [pc, #24]	; (802281c <ETH_MACAddressConfig+0x6c>)
 8022802:	4413      	add	r3, r2
 8022804:	461a      	mov	r2, r3
 8022806:	697b      	ldr	r3, [r7, #20]
 8022808:	6013      	str	r3, [r2, #0]
}
 802280a:	bf00      	nop
 802280c:	371c      	adds	r7, #28
 802280e:	46bd      	mov	sp, r7
 8022810:	f85d 7b04 	ldr.w	r7, [sp], #4
 8022814:	4770      	bx	lr
 8022816:	bf00      	nop
 8022818:	40028040 	.word	0x40028040
 802281c:	40028044 	.word	0x40028044

08022820 <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 8022820:	b480      	push	{r7}
 8022822:	b085      	sub	sp, #20
 8022824:	af00      	add	r7, sp, #0
 8022826:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8022828:	2300      	movs	r3, #0
 802282a:	60fb      	str	r3, [r7, #12]
 802282c:	e03e      	b.n	80228ac <ETH_DMATxDescListInit+0x8c>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 802282e:	687b      	ldr	r3, [r7, #4]
 8022830:	68d9      	ldr	r1, [r3, #12]
 8022832:	68fa      	ldr	r2, [r7, #12]
 8022834:	4613      	mov	r3, r2
 8022836:	009b      	lsls	r3, r3, #2
 8022838:	4413      	add	r3, r2
 802283a:	00db      	lsls	r3, r3, #3
 802283c:	440b      	add	r3, r1
 802283e:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0);
 8022840:	68bb      	ldr	r3, [r7, #8]
 8022842:	2200      	movs	r2, #0
 8022844:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 8022846:	68bb      	ldr	r3, [r7, #8]
 8022848:	2200      	movs	r2, #0
 802284a:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0);
 802284c:	68bb      	ldr	r3, [r7, #8]
 802284e:	2200      	movs	r2, #0
 8022850:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0);
 8022852:	68bb      	ldr	r3, [r7, #8]
 8022854:	2200      	movs	r2, #0
 8022856:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 8022858:	68b9      	ldr	r1, [r7, #8]
 802285a:	687b      	ldr	r3, [r7, #4]
 802285c:	68fa      	ldr	r2, [r7, #12]
 802285e:	3206      	adds	r2, #6
 8022860:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    /* Set Second Address Chained bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_TCH);
 8022864:	68bb      	ldr	r3, [r7, #8]
 8022866:	681b      	ldr	r3, [r3, #0]
 8022868:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 802286c:	68bb      	ldr	r3, [r7, #8]
 802286e:	601a      	str	r2, [r3, #0]

    if (i < ((uint32_t)ETH_TX_DESC_CNT - 1U))
 8022870:	68fb      	ldr	r3, [r7, #12]
 8022872:	2b02      	cmp	r3, #2
 8022874:	d80c      	bhi.n	8022890 <ETH_DMATxDescListInit+0x70>
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc + i + 1U));
 8022876:	687b      	ldr	r3, [r7, #4]
 8022878:	68d9      	ldr	r1, [r3, #12]
 802287a:	68fb      	ldr	r3, [r7, #12]
 802287c:	1c5a      	adds	r2, r3, #1
 802287e:	4613      	mov	r3, r2
 8022880:	009b      	lsls	r3, r3, #2
 8022882:	4413      	add	r3, r2
 8022884:	00db      	lsls	r3, r3, #3
 8022886:	440b      	add	r3, r1
 8022888:	461a      	mov	r2, r3
 802288a:	68bb      	ldr	r3, [r7, #8]
 802288c:	60da      	str	r2, [r3, #12]
 802288e:	e004      	b.n	802289a <ETH_DMATxDescListInit+0x7a>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc));
 8022890:	687b      	ldr	r3, [r7, #4]
 8022892:	68db      	ldr	r3, [r3, #12]
 8022894:	461a      	mov	r2, r3
 8022896:	68bb      	ldr	r3, [r7, #8]
 8022898:	60da      	str	r2, [r3, #12]
    }

    /* Set the DMA Tx descriptors checksum insertion */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL);
 802289a:	68bb      	ldr	r3, [r7, #8]
 802289c:	681b      	ldr	r3, [r3, #0]
 802289e:	f443 0240 	orr.w	r2, r3, #12582912	; 0xc00000
 80228a2:	68bb      	ldr	r3, [r7, #8]
 80228a4:	601a      	str	r2, [r3, #0]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 80228a6:	68fb      	ldr	r3, [r7, #12]
 80228a8:	3301      	adds	r3, #1
 80228aa:	60fb      	str	r3, [r7, #12]
 80228ac:	68fb      	ldr	r3, [r7, #12]
 80228ae:	2b03      	cmp	r3, #3
 80228b0:	d9bd      	bls.n	802282e <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 80228b2:	687b      	ldr	r3, [r7, #4]
 80228b4:	2200      	movs	r2, #0
 80228b6:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMATDLAR, (uint32_t) heth->Init.TxDesc);
 80228b8:	687b      	ldr	r3, [r7, #4]
 80228ba:	68da      	ldr	r2, [r3, #12]
 80228bc:	687b      	ldr	r3, [r7, #4]
 80228be:	681b      	ldr	r3, [r3, #0]
 80228c0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80228c4:	611a      	str	r2, [r3, #16]
}
 80228c6:	bf00      	nop
 80228c8:	3714      	adds	r7, #20
 80228ca:	46bd      	mov	sp, r7
 80228cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80228d0:	4770      	bx	lr

080228d2 <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 80228d2:	b480      	push	{r7}
 80228d4:	b085      	sub	sp, #20
 80228d6:	af00      	add	r7, sp, #0
 80228d8:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 80228da:	2300      	movs	r3, #0
 80228dc:	60fb      	str	r3, [r7, #12]
 80228de:	e046      	b.n	802296e <ETH_DMARxDescListInit+0x9c>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 80228e0:	687b      	ldr	r3, [r7, #4]
 80228e2:	6919      	ldr	r1, [r3, #16]
 80228e4:	68fa      	ldr	r2, [r7, #12]
 80228e6:	4613      	mov	r3, r2
 80228e8:	009b      	lsls	r3, r3, #2
 80228ea:	4413      	add	r3, r2
 80228ec:	00db      	lsls	r3, r3, #3
 80228ee:	440b      	add	r3, r1
 80228f0:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0);
 80228f2:	68bb      	ldr	r3, [r7, #8]
 80228f4:	2200      	movs	r2, #0
 80228f6:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0);
 80228f8:	68bb      	ldr	r3, [r7, #8]
 80228fa:	2200      	movs	r2, #0
 80228fc:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0);
 80228fe:	68bb      	ldr	r3, [r7, #8]
 8022900:	2200      	movs	r2, #0
 8022902:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0);
 8022904:	68bb      	ldr	r3, [r7, #8]
 8022906:	2200      	movs	r2, #0
 8022908:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0);
 802290a:	68bb      	ldr	r3, [r7, #8]
 802290c:	2200      	movs	r2, #0
 802290e:	621a      	str	r2, [r3, #32]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0);
 8022910:	68bb      	ldr	r3, [r7, #8]
 8022912:	2200      	movs	r2, #0
 8022914:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set Own bit of the Rx descriptor Status */
    dmarxdesc->DESC0 = ETH_DMARXDESC_OWN;
 8022916:	68bb      	ldr	r3, [r7, #8]
 8022918:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 802291c:	601a      	str	r2, [r3, #0]

    /* Set Buffer1 size and Second Address Chained bit */
    dmarxdesc->DESC1 = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;
 802291e:	68bb      	ldr	r3, [r7, #8]
 8022920:	f44f 428c 	mov.w	r2, #17920	; 0x4600
 8022924:	605a      	str	r2, [r3, #4]

    /* Enable Ethernet DMA Rx Descriptor interrupt */
    dmarxdesc->DESC1 &= ~ETH_DMARXDESC_DIC;
 8022926:	68bb      	ldr	r3, [r7, #8]
 8022928:	685b      	ldr	r3, [r3, #4]
 802292a:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 802292e:	68bb      	ldr	r3, [r7, #8]
 8022930:	605a      	str	r2, [r3, #4]

    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 8022932:	68b9      	ldr	r1, [r7, #8]
 8022934:	687b      	ldr	r3, [r7, #4]
 8022936:	68fa      	ldr	r2, [r7, #12]
 8022938:	3212      	adds	r2, #18
 802293a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    if (i < ((uint32_t)ETH_RX_DESC_CNT - 1U))
 802293e:	68fb      	ldr	r3, [r7, #12]
 8022940:	2b02      	cmp	r3, #2
 8022942:	d80c      	bhi.n	802295e <ETH_DMARxDescListInit+0x8c>
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc + i + 1U));
 8022944:	687b      	ldr	r3, [r7, #4]
 8022946:	6919      	ldr	r1, [r3, #16]
 8022948:	68fb      	ldr	r3, [r7, #12]
 802294a:	1c5a      	adds	r2, r3, #1
 802294c:	4613      	mov	r3, r2
 802294e:	009b      	lsls	r3, r3, #2
 8022950:	4413      	add	r3, r2
 8022952:	00db      	lsls	r3, r3, #3
 8022954:	440b      	add	r3, r1
 8022956:	461a      	mov	r2, r3
 8022958:	68bb      	ldr	r3, [r7, #8]
 802295a:	60da      	str	r2, [r3, #12]
 802295c:	e004      	b.n	8022968 <ETH_DMARxDescListInit+0x96>
    }
    else
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc));
 802295e:	687b      	ldr	r3, [r7, #4]
 8022960:	691b      	ldr	r3, [r3, #16]
 8022962:	461a      	mov	r2, r3
 8022964:	68bb      	ldr	r3, [r7, #8]
 8022966:	60da      	str	r2, [r3, #12]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8022968:	68fb      	ldr	r3, [r7, #12]
 802296a:	3301      	adds	r3, #1
 802296c:	60fb      	str	r3, [r7, #12]
 802296e:	68fb      	ldr	r3, [r7, #12]
 8022970:	2b03      	cmp	r3, #3
 8022972:	d9b5      	bls.n	80228e0 <ETH_DMARxDescListInit+0xe>
    }
  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0);
 8022974:	687b      	ldr	r3, [r7, #4]
 8022976:	2200      	movs	r2, #0
 8022978:	65da      	str	r2, [r3, #92]	; 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0);
 802297a:	687b      	ldr	r3, [r7, #4]
 802297c:	2200      	movs	r2, #0
 802297e:	661a      	str	r2, [r3, #96]	; 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0);
 8022980:	687b      	ldr	r3, [r7, #4]
 8022982:	2200      	movs	r2, #0
 8022984:	669a      	str	r2, [r3, #104]	; 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0);
 8022986:	687b      	ldr	r3, [r7, #4]
 8022988:	2200      	movs	r2, #0
 802298a:	66da      	str	r2, [r3, #108]	; 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0);
 802298c:	687b      	ldr	r3, [r7, #4]
 802298e:	2200      	movs	r2, #0
 8022990:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMARDLAR, (uint32_t) heth->Init.RxDesc);
 8022992:	687b      	ldr	r3, [r7, #4]
 8022994:	691a      	ldr	r2, [r3, #16]
 8022996:	687b      	ldr	r3, [r7, #4]
 8022998:	681b      	ldr	r3, [r3, #0]
 802299a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 802299e:	60da      	str	r2, [r3, #12]
}
 80229a0:	bf00      	nop
 80229a2:	3714      	adds	r7, #20
 80229a4:	46bd      	mov	sp, r7
 80229a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80229aa:	4770      	bx	lr

080229ac <ETH_Prepare_Tx_Descriptors>:
  * @param  pTxConfig: Tx packet configuration
  * @param  ItMode: Enable or disable Tx EOT interrept
  * @retval Status
  */
static uint32_t ETH_Prepare_Tx_Descriptors(ETH_HandleTypeDef *heth, ETH_TxPacketConfig *pTxConfig, uint32_t ItMode)
{
 80229ac:	b480      	push	{r7}
 80229ae:	b08d      	sub	sp, #52	; 0x34
 80229b0:	af00      	add	r7, sp, #0
 80229b2:	60f8      	str	r0, [r7, #12]
 80229b4:	60b9      	str	r1, [r7, #8]
 80229b6:	607a      	str	r2, [r7, #4]
  ETH_TxDescListTypeDef *dmatxdesclist = &heth->TxDescList;
 80229b8:	68fb      	ldr	r3, [r7, #12]
 80229ba:	3318      	adds	r3, #24
 80229bc:	617b      	str	r3, [r7, #20]
  uint32_t descidx = dmatxdesclist->CurTxDesc;
 80229be:	697b      	ldr	r3, [r7, #20]
 80229c0:	691b      	ldr	r3, [r3, #16]
 80229c2:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t firstdescidx = dmatxdesclist->CurTxDesc;
 80229c4:	697b      	ldr	r3, [r7, #20]
 80229c6:	691b      	ldr	r3, [r3, #16]
 80229c8:	613b      	str	r3, [r7, #16]
  uint32_t idx;
  uint32_t descnbr = 0;
 80229ca:	2300      	movs	r3, #0
 80229cc:	627b      	str	r3, [r7, #36]	; 0x24
  ETH_DMADescTypeDef *dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 80229ce:	697b      	ldr	r3, [r7, #20]
 80229d0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80229d2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80229d6:	623b      	str	r3, [r7, #32]

  ETH_BufferTypeDef  *txbuffer = pTxConfig->TxBuffer;
 80229d8:	68bb      	ldr	r3, [r7, #8]
 80229da:	689b      	ldr	r3, [r3, #8]
 80229dc:	61fb      	str	r3, [r7, #28]
  uint32_t           bd_count = 0;
 80229de:	2300      	movs	r3, #0
 80229e0:	61bb      	str	r3, [r7, #24]

  /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
  if ((READ_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN) == ETH_DMATXDESC_OWN)
 80229e2:	6a3b      	ldr	r3, [r7, #32]
 80229e4:	681b      	ldr	r3, [r3, #0]
 80229e6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80229ea:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80229ee:	d007      	beq.n	8022a00 <ETH_Prepare_Tx_Descriptors+0x54>
      || (dmatxdesclist->PacketAddress[descidx] != NULL))
 80229f0:	697a      	ldr	r2, [r7, #20]
 80229f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80229f4:	3304      	adds	r3, #4
 80229f6:	009b      	lsls	r3, r3, #2
 80229f8:	4413      	add	r3, r2
 80229fa:	685b      	ldr	r3, [r3, #4]
 80229fc:	2b00      	cmp	r3, #0
 80229fe:	d001      	beq.n	8022a04 <ETH_Prepare_Tx_Descriptors+0x58>
  {
    return HAL_ETH_ERROR_BUSY;
 8022a00:	2302      	movs	r3, #2
 8022a02:	e103      	b.n	8022c0c <ETH_Prepare_Tx_Descriptors+0x260>
  }


  descnbr += 1U;
 8022a04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8022a06:	3301      	adds	r3, #1
 8022a08:	627b      	str	r3, [r7, #36]	; 0x24

  /* Set header or buffer 1 address */
  WRITE_REG(dmatxdesc->DESC2, (uint32_t)txbuffer->buffer);
 8022a0a:	69fb      	ldr	r3, [r7, #28]
 8022a0c:	681b      	ldr	r3, [r3, #0]
 8022a0e:	461a      	mov	r2, r3
 8022a10:	6a3b      	ldr	r3, [r7, #32]
 8022a12:	609a      	str	r2, [r3, #8]

  /* Set header or buffer 1 Length */
  MODIFY_REG(dmatxdesc->DESC1, ETH_DMATXDESC_TBS1, txbuffer->len);
 8022a14:	6a3b      	ldr	r3, [r7, #32]
 8022a16:	685b      	ldr	r3, [r3, #4]
 8022a18:	f423 53ff 	bic.w	r3, r3, #8160	; 0x1fe0
 8022a1c:	f023 031f 	bic.w	r3, r3, #31
 8022a20:	69fa      	ldr	r2, [r7, #28]
 8022a22:	6852      	ldr	r2, [r2, #4]
 8022a24:	431a      	orrs	r2, r3
 8022a26:	6a3b      	ldr	r3, [r7, #32]
 8022a28:	605a      	str	r2, [r3, #4]

  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CSUM) != 0U)
 8022a2a:	68bb      	ldr	r3, [r7, #8]
 8022a2c:	681b      	ldr	r3, [r3, #0]
 8022a2e:	f003 0301 	and.w	r3, r3, #1
 8022a32:	2b00      	cmp	r3, #0
 8022a34:	d008      	beq.n	8022a48 <ETH_Prepare_Tx_Descriptors+0x9c>
  {
    MODIFY_REG(dmatxdesc->DESC0, ETH_DMATXDESC_CIC, pTxConfig->ChecksumCtrl);
 8022a36:	6a3b      	ldr	r3, [r7, #32]
 8022a38:	681b      	ldr	r3, [r3, #0]
 8022a3a:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8022a3e:	68bb      	ldr	r3, [r7, #8]
 8022a40:	695b      	ldr	r3, [r3, #20]
 8022a42:	431a      	orrs	r2, r3
 8022a44:	6a3b      	ldr	r3, [r7, #32]
 8022a46:	601a      	str	r2, [r3, #0]
  }

  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CRCPAD) != 0U)
 8022a48:	68bb      	ldr	r3, [r7, #8]
 8022a4a:	681b      	ldr	r3, [r3, #0]
 8022a4c:	f003 0320 	and.w	r3, r3, #32
 8022a50:	2b00      	cmp	r3, #0
 8022a52:	d008      	beq.n	8022a66 <ETH_Prepare_Tx_Descriptors+0xba>
  {
    MODIFY_REG(dmatxdesc->DESC0, ETH_CRC_PAD_DISABLE, pTxConfig->CRCPadCtrl);
 8022a54:	6a3b      	ldr	r3, [r7, #32]
 8022a56:	681b      	ldr	r3, [r3, #0]
 8022a58:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8022a5c:	68bb      	ldr	r3, [r7, #8]
 8022a5e:	691b      	ldr	r3, [r3, #16]
 8022a60:	431a      	orrs	r2, r3
 8022a62:	6a3b      	ldr	r3, [r7, #32]
 8022a64:	601a      	str	r2, [r3, #0]
  }


  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_VLANTAG) != 0U)
 8022a66:	68bb      	ldr	r3, [r7, #8]
 8022a68:	681b      	ldr	r3, [r3, #0]
 8022a6a:	f003 0304 	and.w	r3, r3, #4
 8022a6e:	2b00      	cmp	r3, #0
 8022a70:	d005      	beq.n	8022a7e <ETH_Prepare_Tx_Descriptors+0xd2>
  {
    /* Set Vlan Type */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_VF);
 8022a72:	6a3b      	ldr	r3, [r7, #32]
 8022a74:	681b      	ldr	r3, [r3, #0]
 8022a76:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8022a7a:	6a3b      	ldr	r3, [r7, #32]
 8022a7c:	601a      	str	r2, [r3, #0]
  }

  /* Mark it as First Descriptor */
  SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_FS);
 8022a7e:	6a3b      	ldr	r3, [r7, #32]
 8022a80:	681b      	ldr	r3, [r3, #0]
 8022a82:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8022a86:	6a3b      	ldr	r3, [r7, #32]
 8022a88:	601a      	str	r2, [r3, #0]
  __ASM volatile ("dmb 0xF":::"memory");
 8022a8a:	f3bf 8f5f 	dmb	sy
}
 8022a8e:	bf00      	nop

  /* Ensure rest of descriptor is written to RAM before the OWN bit */
  __DMB();
  /* set OWN bit of FIRST descriptor */
  SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN);
 8022a90:	6a3b      	ldr	r3, [r7, #32]
 8022a92:	681b      	ldr	r3, [r3, #0]
 8022a94:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8022a98:	6a3b      	ldr	r3, [r7, #32]
 8022a9a:	601a      	str	r2, [r3, #0]

  /* only if the packet is split into more than one descriptors > 1 */
  while (txbuffer->next != NULL)
 8022a9c:	e084      	b.n	8022ba8 <ETH_Prepare_Tx_Descriptors+0x1fc>
  {
    /* Clear the LD bit of previous descriptor */
    CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_LS);
 8022a9e:	6a3b      	ldr	r3, [r7, #32]
 8022aa0:	681b      	ldr	r3, [r3, #0]
 8022aa2:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8022aa6:	6a3b      	ldr	r3, [r7, #32]
 8022aa8:	601a      	str	r2, [r3, #0]
    if (ItMode != ((uint32_t)RESET))
 8022aaa:	687b      	ldr	r3, [r7, #4]
 8022aac:	2b00      	cmp	r3, #0
 8022aae:	d006      	beq.n	8022abe <ETH_Prepare_Tx_Descriptors+0x112>
    {
      /* Set Interrupt on completion bit */
      SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 8022ab0:	6a3b      	ldr	r3, [r7, #32]
 8022ab2:	681b      	ldr	r3, [r3, #0]
 8022ab4:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8022ab8:	6a3b      	ldr	r3, [r7, #32]
 8022aba:	601a      	str	r2, [r3, #0]
 8022abc:	e005      	b.n	8022aca <ETH_Prepare_Tx_Descriptors+0x11e>
    }
    else
    {
      /* Clear Interrupt on completion bit */
      CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 8022abe:	6a3b      	ldr	r3, [r7, #32]
 8022ac0:	681b      	ldr	r3, [r3, #0]
 8022ac2:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8022ac6:	6a3b      	ldr	r3, [r7, #32]
 8022ac8:	601a      	str	r2, [r3, #0]
    }
    /* Increment current tx descriptor index */
    INCR_TX_DESC_INDEX(descidx, 1U);
 8022aca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8022acc:	3301      	adds	r3, #1
 8022ace:	62fb      	str	r3, [r7, #44]	; 0x2c
 8022ad0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8022ad2:	2b03      	cmp	r3, #3
 8022ad4:	d902      	bls.n	8022adc <ETH_Prepare_Tx_Descriptors+0x130>
 8022ad6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8022ad8:	3b04      	subs	r3, #4
 8022ada:	62fb      	str	r3, [r7, #44]	; 0x2c
    /* Get current descriptor address */
    dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8022adc:	697b      	ldr	r3, [r7, #20]
 8022ade:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8022ae0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8022ae4:	623b      	str	r3, [r7, #32]

    /* Clear the FD bit of new Descriptor */
    CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_FS);
 8022ae6:	6a3b      	ldr	r3, [r7, #32]
 8022ae8:	681b      	ldr	r3, [r3, #0]
 8022aea:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8022aee:	6a3b      	ldr	r3, [r7, #32]
 8022af0:	601a      	str	r2, [r3, #0]

    /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
    if ((READ_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN) == ETH_DMATXDESC_OWN)
 8022af2:	6a3b      	ldr	r3, [r7, #32]
 8022af4:	681b      	ldr	r3, [r3, #0]
 8022af6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8022afa:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8022afe:	d007      	beq.n	8022b10 <ETH_Prepare_Tx_Descriptors+0x164>
        || (dmatxdesclist->PacketAddress[descidx] != NULL))
 8022b00:	697a      	ldr	r2, [r7, #20]
 8022b02:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8022b04:	3304      	adds	r3, #4
 8022b06:	009b      	lsls	r3, r3, #2
 8022b08:	4413      	add	r3, r2
 8022b0a:	685b      	ldr	r3, [r3, #4]
 8022b0c:	2b00      	cmp	r3, #0
 8022b0e:	d029      	beq.n	8022b64 <ETH_Prepare_Tx_Descriptors+0x1b8>
    {
      descidx = firstdescidx;
 8022b10:	693b      	ldr	r3, [r7, #16]
 8022b12:	62fb      	str	r3, [r7, #44]	; 0x2c
      dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8022b14:	697b      	ldr	r3, [r7, #20]
 8022b16:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8022b18:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8022b1c:	623b      	str	r3, [r7, #32]

      /* clear previous desc own bit */
      for (idx = 0; idx < descnbr; idx ++)
 8022b1e:	2300      	movs	r3, #0
 8022b20:	62bb      	str	r3, [r7, #40]	; 0x28
 8022b22:	e019      	b.n	8022b58 <ETH_Prepare_Tx_Descriptors+0x1ac>
  __ASM volatile ("dmb 0xF":::"memory");
 8022b24:	f3bf 8f5f 	dmb	sy
}
 8022b28:	bf00      	nop
      {
        /* Ensure rest of descriptor is written to RAM before the OWN bit */
        __DMB();

        CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN);
 8022b2a:	6a3b      	ldr	r3, [r7, #32]
 8022b2c:	681b      	ldr	r3, [r3, #0]
 8022b2e:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8022b32:	6a3b      	ldr	r3, [r7, #32]
 8022b34:	601a      	str	r2, [r3, #0]

        /* Increment current tx descriptor index */
        INCR_TX_DESC_INDEX(descidx, 1U);
 8022b36:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8022b38:	3301      	adds	r3, #1
 8022b3a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8022b3c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8022b3e:	2b03      	cmp	r3, #3
 8022b40:	d902      	bls.n	8022b48 <ETH_Prepare_Tx_Descriptors+0x19c>
 8022b42:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8022b44:	3b04      	subs	r3, #4
 8022b46:	62fb      	str	r3, [r7, #44]	; 0x2c
        /* Get current descriptor address */
        dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8022b48:	697b      	ldr	r3, [r7, #20]
 8022b4a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8022b4c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8022b50:	623b      	str	r3, [r7, #32]
      for (idx = 0; idx < descnbr; idx ++)
 8022b52:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8022b54:	3301      	adds	r3, #1
 8022b56:	62bb      	str	r3, [r7, #40]	; 0x28
 8022b58:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8022b5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8022b5c:	429a      	cmp	r2, r3
 8022b5e:	d3e1      	bcc.n	8022b24 <ETH_Prepare_Tx_Descriptors+0x178>
      }

      return HAL_ETH_ERROR_BUSY;
 8022b60:	2302      	movs	r3, #2
 8022b62:	e053      	b.n	8022c0c <ETH_Prepare_Tx_Descriptors+0x260>
    }

    descnbr += 1U;
 8022b64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8022b66:	3301      	adds	r3, #1
 8022b68:	627b      	str	r3, [r7, #36]	; 0x24

    /* Get the next Tx buffer in the list */
    txbuffer = txbuffer->next;
 8022b6a:	69fb      	ldr	r3, [r7, #28]
 8022b6c:	689b      	ldr	r3, [r3, #8]
 8022b6e:	61fb      	str	r3, [r7, #28]

    /* Set header or buffer 1 address */
    WRITE_REG(dmatxdesc->DESC2, (uint32_t)txbuffer->buffer);
 8022b70:	69fb      	ldr	r3, [r7, #28]
 8022b72:	681b      	ldr	r3, [r3, #0]
 8022b74:	461a      	mov	r2, r3
 8022b76:	6a3b      	ldr	r3, [r7, #32]
 8022b78:	609a      	str	r2, [r3, #8]

    /* Set header or buffer 1 Length */
    MODIFY_REG(dmatxdesc->DESC1, ETH_DMATXDESC_TBS1, txbuffer->len);
 8022b7a:	6a3b      	ldr	r3, [r7, #32]
 8022b7c:	685b      	ldr	r3, [r3, #4]
 8022b7e:	f423 53ff 	bic.w	r3, r3, #8160	; 0x1fe0
 8022b82:	f023 031f 	bic.w	r3, r3, #31
 8022b86:	69fa      	ldr	r2, [r7, #28]
 8022b88:	6852      	ldr	r2, [r2, #4]
 8022b8a:	431a      	orrs	r2, r3
 8022b8c:	6a3b      	ldr	r3, [r7, #32]
 8022b8e:	605a      	str	r2, [r3, #4]

    bd_count += 1U;
 8022b90:	69bb      	ldr	r3, [r7, #24]
 8022b92:	3301      	adds	r3, #1
 8022b94:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("dmb 0xF":::"memory");
 8022b96:	f3bf 8f5f 	dmb	sy
}
 8022b9a:	bf00      	nop

    /* Ensure rest of descriptor is written to RAM before the OWN bit */
    __DMB();
    /* Set Own bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN);
 8022b9c:	6a3b      	ldr	r3, [r7, #32]
 8022b9e:	681b      	ldr	r3, [r3, #0]
 8022ba0:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8022ba4:	6a3b      	ldr	r3, [r7, #32]
 8022ba6:	601a      	str	r2, [r3, #0]
  while (txbuffer->next != NULL)
 8022ba8:	69fb      	ldr	r3, [r7, #28]
 8022baa:	689b      	ldr	r3, [r3, #8]
 8022bac:	2b00      	cmp	r3, #0
 8022bae:	f47f af76 	bne.w	8022a9e <ETH_Prepare_Tx_Descriptors+0xf2>
  }

  if (ItMode != ((uint32_t)RESET))
 8022bb2:	687b      	ldr	r3, [r7, #4]
 8022bb4:	2b00      	cmp	r3, #0
 8022bb6:	d006      	beq.n	8022bc6 <ETH_Prepare_Tx_Descriptors+0x21a>
  {
    /* Set Interrupt on completion bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 8022bb8:	6a3b      	ldr	r3, [r7, #32]
 8022bba:	681b      	ldr	r3, [r3, #0]
 8022bbc:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8022bc0:	6a3b      	ldr	r3, [r7, #32]
 8022bc2:	601a      	str	r2, [r3, #0]
 8022bc4:	e005      	b.n	8022bd2 <ETH_Prepare_Tx_Descriptors+0x226>
  }
  else
  {
    /* Clear Interrupt on completion bit */
    CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 8022bc6:	6a3b      	ldr	r3, [r7, #32]
 8022bc8:	681b      	ldr	r3, [r3, #0]
 8022bca:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8022bce:	6a3b      	ldr	r3, [r7, #32]
 8022bd0:	601a      	str	r2, [r3, #0]
  }

  /* Mark it as LAST descriptor */
  SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_LS);
 8022bd2:	6a3b      	ldr	r3, [r7, #32]
 8022bd4:	681b      	ldr	r3, [r3, #0]
 8022bd6:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8022bda:	6a3b      	ldr	r3, [r7, #32]
 8022bdc:	601a      	str	r2, [r3, #0]
  /* Save the current packet address to expose it to the application */
  dmatxdesclist->PacketAddress[descidx] = dmatxdesclist->CurrentPacketAddress;
 8022bde:	697b      	ldr	r3, [r7, #20]
 8022be0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8022be2:	6979      	ldr	r1, [r7, #20]
 8022be4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8022be6:	3304      	adds	r3, #4
 8022be8:	009b      	lsls	r3, r3, #2
 8022bea:	440b      	add	r3, r1
 8022bec:	605a      	str	r2, [r3, #4]

  dmatxdesclist->CurTxDesc = descidx;
 8022bee:	697b      	ldr	r3, [r7, #20]
 8022bf0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8022bf2:	611a      	str	r2, [r3, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 8022bf4:	b672      	cpsid	i
}
 8022bf6:	bf00      	nop

  /* disable the interrupt */
  __disable_irq();

  dmatxdesclist->BuffersInUse += bd_count + 1U;
 8022bf8:	697b      	ldr	r3, [r7, #20]
 8022bfa:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8022bfc:	69bb      	ldr	r3, [r7, #24]
 8022bfe:	4413      	add	r3, r2
 8022c00:	1c5a      	adds	r2, r3, #1
 8022c02:	697b      	ldr	r3, [r7, #20]
 8022c04:	629a      	str	r2, [r3, #40]	; 0x28
  __ASM volatile ("cpsie i" : : : "memory");
 8022c06:	b662      	cpsie	i
}
 8022c08:	bf00      	nop
  /* Enable interrupts back */
  __enable_irq();


  /* Return function status */
  return HAL_ETH_ERROR_NONE;
 8022c0a:	2300      	movs	r3, #0
}
 8022c0c:	4618      	mov	r0, r3
 8022c0e:	3734      	adds	r7, #52	; 0x34
 8022c10:	46bd      	mov	sp, r7
 8022c12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8022c16:	4770      	bx	lr

08022c18 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8022c18:	b480      	push	{r7}
 8022c1a:	b089      	sub	sp, #36	; 0x24
 8022c1c:	af00      	add	r7, sp, #0
 8022c1e:	6078      	str	r0, [r7, #4]
 8022c20:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8022c22:	2300      	movs	r3, #0
 8022c24:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8022c26:	2300      	movs	r3, #0
 8022c28:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8022c2a:	2300      	movs	r3, #0
 8022c2c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8022c2e:	2300      	movs	r3, #0
 8022c30:	61fb      	str	r3, [r7, #28]
 8022c32:	e16b      	b.n	8022f0c <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8022c34:	2201      	movs	r2, #1
 8022c36:	69fb      	ldr	r3, [r7, #28]
 8022c38:	fa02 f303 	lsl.w	r3, r2, r3
 8022c3c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8022c3e:	683b      	ldr	r3, [r7, #0]
 8022c40:	681b      	ldr	r3, [r3, #0]
 8022c42:	697a      	ldr	r2, [r7, #20]
 8022c44:	4013      	ands	r3, r2
 8022c46:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8022c48:	693a      	ldr	r2, [r7, #16]
 8022c4a:	697b      	ldr	r3, [r7, #20]
 8022c4c:	429a      	cmp	r2, r3
 8022c4e:	f040 815a 	bne.w	8022f06 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8022c52:	683b      	ldr	r3, [r7, #0]
 8022c54:	685b      	ldr	r3, [r3, #4]
 8022c56:	f003 0303 	and.w	r3, r3, #3
 8022c5a:	2b01      	cmp	r3, #1
 8022c5c:	d005      	beq.n	8022c6a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8022c5e:	683b      	ldr	r3, [r7, #0]
 8022c60:	685b      	ldr	r3, [r3, #4]
 8022c62:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8022c66:	2b02      	cmp	r3, #2
 8022c68:	d130      	bne.n	8022ccc <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8022c6a:	687b      	ldr	r3, [r7, #4]
 8022c6c:	689b      	ldr	r3, [r3, #8]
 8022c6e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8022c70:	69fb      	ldr	r3, [r7, #28]
 8022c72:	005b      	lsls	r3, r3, #1
 8022c74:	2203      	movs	r2, #3
 8022c76:	fa02 f303 	lsl.w	r3, r2, r3
 8022c7a:	43db      	mvns	r3, r3
 8022c7c:	69ba      	ldr	r2, [r7, #24]
 8022c7e:	4013      	ands	r3, r2
 8022c80:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8022c82:	683b      	ldr	r3, [r7, #0]
 8022c84:	68da      	ldr	r2, [r3, #12]
 8022c86:	69fb      	ldr	r3, [r7, #28]
 8022c88:	005b      	lsls	r3, r3, #1
 8022c8a:	fa02 f303 	lsl.w	r3, r2, r3
 8022c8e:	69ba      	ldr	r2, [r7, #24]
 8022c90:	4313      	orrs	r3, r2
 8022c92:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8022c94:	687b      	ldr	r3, [r7, #4]
 8022c96:	69ba      	ldr	r2, [r7, #24]
 8022c98:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8022c9a:	687b      	ldr	r3, [r7, #4]
 8022c9c:	685b      	ldr	r3, [r3, #4]
 8022c9e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8022ca0:	2201      	movs	r2, #1
 8022ca2:	69fb      	ldr	r3, [r7, #28]
 8022ca4:	fa02 f303 	lsl.w	r3, r2, r3
 8022ca8:	43db      	mvns	r3, r3
 8022caa:	69ba      	ldr	r2, [r7, #24]
 8022cac:	4013      	ands	r3, r2
 8022cae:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8022cb0:	683b      	ldr	r3, [r7, #0]
 8022cb2:	685b      	ldr	r3, [r3, #4]
 8022cb4:	091b      	lsrs	r3, r3, #4
 8022cb6:	f003 0201 	and.w	r2, r3, #1
 8022cba:	69fb      	ldr	r3, [r7, #28]
 8022cbc:	fa02 f303 	lsl.w	r3, r2, r3
 8022cc0:	69ba      	ldr	r2, [r7, #24]
 8022cc2:	4313      	orrs	r3, r2
 8022cc4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8022cc6:	687b      	ldr	r3, [r7, #4]
 8022cc8:	69ba      	ldr	r2, [r7, #24]
 8022cca:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8022ccc:	683b      	ldr	r3, [r7, #0]
 8022cce:	685b      	ldr	r3, [r3, #4]
 8022cd0:	f003 0303 	and.w	r3, r3, #3
 8022cd4:	2b03      	cmp	r3, #3
 8022cd6:	d017      	beq.n	8022d08 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8022cd8:	687b      	ldr	r3, [r7, #4]
 8022cda:	68db      	ldr	r3, [r3, #12]
 8022cdc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8022cde:	69fb      	ldr	r3, [r7, #28]
 8022ce0:	005b      	lsls	r3, r3, #1
 8022ce2:	2203      	movs	r2, #3
 8022ce4:	fa02 f303 	lsl.w	r3, r2, r3
 8022ce8:	43db      	mvns	r3, r3
 8022cea:	69ba      	ldr	r2, [r7, #24]
 8022cec:	4013      	ands	r3, r2
 8022cee:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8022cf0:	683b      	ldr	r3, [r7, #0]
 8022cf2:	689a      	ldr	r2, [r3, #8]
 8022cf4:	69fb      	ldr	r3, [r7, #28]
 8022cf6:	005b      	lsls	r3, r3, #1
 8022cf8:	fa02 f303 	lsl.w	r3, r2, r3
 8022cfc:	69ba      	ldr	r2, [r7, #24]
 8022cfe:	4313      	orrs	r3, r2
 8022d00:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8022d02:	687b      	ldr	r3, [r7, #4]
 8022d04:	69ba      	ldr	r2, [r7, #24]
 8022d06:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8022d08:	683b      	ldr	r3, [r7, #0]
 8022d0a:	685b      	ldr	r3, [r3, #4]
 8022d0c:	f003 0303 	and.w	r3, r3, #3
 8022d10:	2b02      	cmp	r3, #2
 8022d12:	d123      	bne.n	8022d5c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8022d14:	69fb      	ldr	r3, [r7, #28]
 8022d16:	08da      	lsrs	r2, r3, #3
 8022d18:	687b      	ldr	r3, [r7, #4]
 8022d1a:	3208      	adds	r2, #8
 8022d1c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8022d20:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8022d22:	69fb      	ldr	r3, [r7, #28]
 8022d24:	f003 0307 	and.w	r3, r3, #7
 8022d28:	009b      	lsls	r3, r3, #2
 8022d2a:	220f      	movs	r2, #15
 8022d2c:	fa02 f303 	lsl.w	r3, r2, r3
 8022d30:	43db      	mvns	r3, r3
 8022d32:	69ba      	ldr	r2, [r7, #24]
 8022d34:	4013      	ands	r3, r2
 8022d36:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8022d38:	683b      	ldr	r3, [r7, #0]
 8022d3a:	691a      	ldr	r2, [r3, #16]
 8022d3c:	69fb      	ldr	r3, [r7, #28]
 8022d3e:	f003 0307 	and.w	r3, r3, #7
 8022d42:	009b      	lsls	r3, r3, #2
 8022d44:	fa02 f303 	lsl.w	r3, r2, r3
 8022d48:	69ba      	ldr	r2, [r7, #24]
 8022d4a:	4313      	orrs	r3, r2
 8022d4c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8022d4e:	69fb      	ldr	r3, [r7, #28]
 8022d50:	08da      	lsrs	r2, r3, #3
 8022d52:	687b      	ldr	r3, [r7, #4]
 8022d54:	3208      	adds	r2, #8
 8022d56:	69b9      	ldr	r1, [r7, #24]
 8022d58:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8022d5c:	687b      	ldr	r3, [r7, #4]
 8022d5e:	681b      	ldr	r3, [r3, #0]
 8022d60:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8022d62:	69fb      	ldr	r3, [r7, #28]
 8022d64:	005b      	lsls	r3, r3, #1
 8022d66:	2203      	movs	r2, #3
 8022d68:	fa02 f303 	lsl.w	r3, r2, r3
 8022d6c:	43db      	mvns	r3, r3
 8022d6e:	69ba      	ldr	r2, [r7, #24]
 8022d70:	4013      	ands	r3, r2
 8022d72:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8022d74:	683b      	ldr	r3, [r7, #0]
 8022d76:	685b      	ldr	r3, [r3, #4]
 8022d78:	f003 0203 	and.w	r2, r3, #3
 8022d7c:	69fb      	ldr	r3, [r7, #28]
 8022d7e:	005b      	lsls	r3, r3, #1
 8022d80:	fa02 f303 	lsl.w	r3, r2, r3
 8022d84:	69ba      	ldr	r2, [r7, #24]
 8022d86:	4313      	orrs	r3, r2
 8022d88:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8022d8a:	687b      	ldr	r3, [r7, #4]
 8022d8c:	69ba      	ldr	r2, [r7, #24]
 8022d8e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8022d90:	683b      	ldr	r3, [r7, #0]
 8022d92:	685b      	ldr	r3, [r3, #4]
 8022d94:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8022d98:	2b00      	cmp	r3, #0
 8022d9a:	f000 80b4 	beq.w	8022f06 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8022d9e:	2300      	movs	r3, #0
 8022da0:	60fb      	str	r3, [r7, #12]
 8022da2:	4b60      	ldr	r3, [pc, #384]	; (8022f24 <HAL_GPIO_Init+0x30c>)
 8022da4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8022da6:	4a5f      	ldr	r2, [pc, #380]	; (8022f24 <HAL_GPIO_Init+0x30c>)
 8022da8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8022dac:	6453      	str	r3, [r2, #68]	; 0x44
 8022dae:	4b5d      	ldr	r3, [pc, #372]	; (8022f24 <HAL_GPIO_Init+0x30c>)
 8022db0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8022db2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8022db6:	60fb      	str	r3, [r7, #12]
 8022db8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8022dba:	4a5b      	ldr	r2, [pc, #364]	; (8022f28 <HAL_GPIO_Init+0x310>)
 8022dbc:	69fb      	ldr	r3, [r7, #28]
 8022dbe:	089b      	lsrs	r3, r3, #2
 8022dc0:	3302      	adds	r3, #2
 8022dc2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8022dc6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8022dc8:	69fb      	ldr	r3, [r7, #28]
 8022dca:	f003 0303 	and.w	r3, r3, #3
 8022dce:	009b      	lsls	r3, r3, #2
 8022dd0:	220f      	movs	r2, #15
 8022dd2:	fa02 f303 	lsl.w	r3, r2, r3
 8022dd6:	43db      	mvns	r3, r3
 8022dd8:	69ba      	ldr	r2, [r7, #24]
 8022dda:	4013      	ands	r3, r2
 8022ddc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8022dde:	687b      	ldr	r3, [r7, #4]
 8022de0:	4a52      	ldr	r2, [pc, #328]	; (8022f2c <HAL_GPIO_Init+0x314>)
 8022de2:	4293      	cmp	r3, r2
 8022de4:	d02b      	beq.n	8022e3e <HAL_GPIO_Init+0x226>
 8022de6:	687b      	ldr	r3, [r7, #4]
 8022de8:	4a51      	ldr	r2, [pc, #324]	; (8022f30 <HAL_GPIO_Init+0x318>)
 8022dea:	4293      	cmp	r3, r2
 8022dec:	d025      	beq.n	8022e3a <HAL_GPIO_Init+0x222>
 8022dee:	687b      	ldr	r3, [r7, #4]
 8022df0:	4a50      	ldr	r2, [pc, #320]	; (8022f34 <HAL_GPIO_Init+0x31c>)
 8022df2:	4293      	cmp	r3, r2
 8022df4:	d01f      	beq.n	8022e36 <HAL_GPIO_Init+0x21e>
 8022df6:	687b      	ldr	r3, [r7, #4]
 8022df8:	4a4f      	ldr	r2, [pc, #316]	; (8022f38 <HAL_GPIO_Init+0x320>)
 8022dfa:	4293      	cmp	r3, r2
 8022dfc:	d019      	beq.n	8022e32 <HAL_GPIO_Init+0x21a>
 8022dfe:	687b      	ldr	r3, [r7, #4]
 8022e00:	4a4e      	ldr	r2, [pc, #312]	; (8022f3c <HAL_GPIO_Init+0x324>)
 8022e02:	4293      	cmp	r3, r2
 8022e04:	d013      	beq.n	8022e2e <HAL_GPIO_Init+0x216>
 8022e06:	687b      	ldr	r3, [r7, #4]
 8022e08:	4a4d      	ldr	r2, [pc, #308]	; (8022f40 <HAL_GPIO_Init+0x328>)
 8022e0a:	4293      	cmp	r3, r2
 8022e0c:	d00d      	beq.n	8022e2a <HAL_GPIO_Init+0x212>
 8022e0e:	687b      	ldr	r3, [r7, #4]
 8022e10:	4a4c      	ldr	r2, [pc, #304]	; (8022f44 <HAL_GPIO_Init+0x32c>)
 8022e12:	4293      	cmp	r3, r2
 8022e14:	d007      	beq.n	8022e26 <HAL_GPIO_Init+0x20e>
 8022e16:	687b      	ldr	r3, [r7, #4]
 8022e18:	4a4b      	ldr	r2, [pc, #300]	; (8022f48 <HAL_GPIO_Init+0x330>)
 8022e1a:	4293      	cmp	r3, r2
 8022e1c:	d101      	bne.n	8022e22 <HAL_GPIO_Init+0x20a>
 8022e1e:	2307      	movs	r3, #7
 8022e20:	e00e      	b.n	8022e40 <HAL_GPIO_Init+0x228>
 8022e22:	2308      	movs	r3, #8
 8022e24:	e00c      	b.n	8022e40 <HAL_GPIO_Init+0x228>
 8022e26:	2306      	movs	r3, #6
 8022e28:	e00a      	b.n	8022e40 <HAL_GPIO_Init+0x228>
 8022e2a:	2305      	movs	r3, #5
 8022e2c:	e008      	b.n	8022e40 <HAL_GPIO_Init+0x228>
 8022e2e:	2304      	movs	r3, #4
 8022e30:	e006      	b.n	8022e40 <HAL_GPIO_Init+0x228>
 8022e32:	2303      	movs	r3, #3
 8022e34:	e004      	b.n	8022e40 <HAL_GPIO_Init+0x228>
 8022e36:	2302      	movs	r3, #2
 8022e38:	e002      	b.n	8022e40 <HAL_GPIO_Init+0x228>
 8022e3a:	2301      	movs	r3, #1
 8022e3c:	e000      	b.n	8022e40 <HAL_GPIO_Init+0x228>
 8022e3e:	2300      	movs	r3, #0
 8022e40:	69fa      	ldr	r2, [r7, #28]
 8022e42:	f002 0203 	and.w	r2, r2, #3
 8022e46:	0092      	lsls	r2, r2, #2
 8022e48:	4093      	lsls	r3, r2
 8022e4a:	69ba      	ldr	r2, [r7, #24]
 8022e4c:	4313      	orrs	r3, r2
 8022e4e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8022e50:	4935      	ldr	r1, [pc, #212]	; (8022f28 <HAL_GPIO_Init+0x310>)
 8022e52:	69fb      	ldr	r3, [r7, #28]
 8022e54:	089b      	lsrs	r3, r3, #2
 8022e56:	3302      	adds	r3, #2
 8022e58:	69ba      	ldr	r2, [r7, #24]
 8022e5a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8022e5e:	4b3b      	ldr	r3, [pc, #236]	; (8022f4c <HAL_GPIO_Init+0x334>)
 8022e60:	689b      	ldr	r3, [r3, #8]
 8022e62:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8022e64:	693b      	ldr	r3, [r7, #16]
 8022e66:	43db      	mvns	r3, r3
 8022e68:	69ba      	ldr	r2, [r7, #24]
 8022e6a:	4013      	ands	r3, r2
 8022e6c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8022e6e:	683b      	ldr	r3, [r7, #0]
 8022e70:	685b      	ldr	r3, [r3, #4]
 8022e72:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8022e76:	2b00      	cmp	r3, #0
 8022e78:	d003      	beq.n	8022e82 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8022e7a:	69ba      	ldr	r2, [r7, #24]
 8022e7c:	693b      	ldr	r3, [r7, #16]
 8022e7e:	4313      	orrs	r3, r2
 8022e80:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8022e82:	4a32      	ldr	r2, [pc, #200]	; (8022f4c <HAL_GPIO_Init+0x334>)
 8022e84:	69bb      	ldr	r3, [r7, #24]
 8022e86:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8022e88:	4b30      	ldr	r3, [pc, #192]	; (8022f4c <HAL_GPIO_Init+0x334>)
 8022e8a:	68db      	ldr	r3, [r3, #12]
 8022e8c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8022e8e:	693b      	ldr	r3, [r7, #16]
 8022e90:	43db      	mvns	r3, r3
 8022e92:	69ba      	ldr	r2, [r7, #24]
 8022e94:	4013      	ands	r3, r2
 8022e96:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8022e98:	683b      	ldr	r3, [r7, #0]
 8022e9a:	685b      	ldr	r3, [r3, #4]
 8022e9c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8022ea0:	2b00      	cmp	r3, #0
 8022ea2:	d003      	beq.n	8022eac <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8022ea4:	69ba      	ldr	r2, [r7, #24]
 8022ea6:	693b      	ldr	r3, [r7, #16]
 8022ea8:	4313      	orrs	r3, r2
 8022eaa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8022eac:	4a27      	ldr	r2, [pc, #156]	; (8022f4c <HAL_GPIO_Init+0x334>)
 8022eae:	69bb      	ldr	r3, [r7, #24]
 8022eb0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8022eb2:	4b26      	ldr	r3, [pc, #152]	; (8022f4c <HAL_GPIO_Init+0x334>)
 8022eb4:	685b      	ldr	r3, [r3, #4]
 8022eb6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8022eb8:	693b      	ldr	r3, [r7, #16]
 8022eba:	43db      	mvns	r3, r3
 8022ebc:	69ba      	ldr	r2, [r7, #24]
 8022ebe:	4013      	ands	r3, r2
 8022ec0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8022ec2:	683b      	ldr	r3, [r7, #0]
 8022ec4:	685b      	ldr	r3, [r3, #4]
 8022ec6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8022eca:	2b00      	cmp	r3, #0
 8022ecc:	d003      	beq.n	8022ed6 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8022ece:	69ba      	ldr	r2, [r7, #24]
 8022ed0:	693b      	ldr	r3, [r7, #16]
 8022ed2:	4313      	orrs	r3, r2
 8022ed4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8022ed6:	4a1d      	ldr	r2, [pc, #116]	; (8022f4c <HAL_GPIO_Init+0x334>)
 8022ed8:	69bb      	ldr	r3, [r7, #24]
 8022eda:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8022edc:	4b1b      	ldr	r3, [pc, #108]	; (8022f4c <HAL_GPIO_Init+0x334>)
 8022ede:	681b      	ldr	r3, [r3, #0]
 8022ee0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8022ee2:	693b      	ldr	r3, [r7, #16]
 8022ee4:	43db      	mvns	r3, r3
 8022ee6:	69ba      	ldr	r2, [r7, #24]
 8022ee8:	4013      	ands	r3, r2
 8022eea:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8022eec:	683b      	ldr	r3, [r7, #0]
 8022eee:	685b      	ldr	r3, [r3, #4]
 8022ef0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8022ef4:	2b00      	cmp	r3, #0
 8022ef6:	d003      	beq.n	8022f00 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8022ef8:	69ba      	ldr	r2, [r7, #24]
 8022efa:	693b      	ldr	r3, [r7, #16]
 8022efc:	4313      	orrs	r3, r2
 8022efe:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8022f00:	4a12      	ldr	r2, [pc, #72]	; (8022f4c <HAL_GPIO_Init+0x334>)
 8022f02:	69bb      	ldr	r3, [r7, #24]
 8022f04:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8022f06:	69fb      	ldr	r3, [r7, #28]
 8022f08:	3301      	adds	r3, #1
 8022f0a:	61fb      	str	r3, [r7, #28]
 8022f0c:	69fb      	ldr	r3, [r7, #28]
 8022f0e:	2b0f      	cmp	r3, #15
 8022f10:	f67f ae90 	bls.w	8022c34 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8022f14:	bf00      	nop
 8022f16:	bf00      	nop
 8022f18:	3724      	adds	r7, #36	; 0x24
 8022f1a:	46bd      	mov	sp, r7
 8022f1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8022f20:	4770      	bx	lr
 8022f22:	bf00      	nop
 8022f24:	40023800 	.word	0x40023800
 8022f28:	40013800 	.word	0x40013800
 8022f2c:	40020000 	.word	0x40020000
 8022f30:	40020400 	.word	0x40020400
 8022f34:	40020800 	.word	0x40020800
 8022f38:	40020c00 	.word	0x40020c00
 8022f3c:	40021000 	.word	0x40021000
 8022f40:	40021400 	.word	0x40021400
 8022f44:	40021800 	.word	0x40021800
 8022f48:	40021c00 	.word	0x40021c00
 8022f4c:	40013c00 	.word	0x40013c00

08022f50 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8022f50:	b480      	push	{r7}
 8022f52:	b083      	sub	sp, #12
 8022f54:	af00      	add	r7, sp, #0
 8022f56:	6078      	str	r0, [r7, #4]
 8022f58:	460b      	mov	r3, r1
 8022f5a:	807b      	strh	r3, [r7, #2]
 8022f5c:	4613      	mov	r3, r2
 8022f5e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8022f60:	787b      	ldrb	r3, [r7, #1]
 8022f62:	2b00      	cmp	r3, #0
 8022f64:	d003      	beq.n	8022f6e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8022f66:	887a      	ldrh	r2, [r7, #2]
 8022f68:	687b      	ldr	r3, [r7, #4]
 8022f6a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8022f6c:	e003      	b.n	8022f76 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8022f6e:	887b      	ldrh	r3, [r7, #2]
 8022f70:	041a      	lsls	r2, r3, #16
 8022f72:	687b      	ldr	r3, [r7, #4]
 8022f74:	619a      	str	r2, [r3, #24]
}
 8022f76:	bf00      	nop
 8022f78:	370c      	adds	r7, #12
 8022f7a:	46bd      	mov	sp, r7
 8022f7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8022f80:	4770      	bx	lr

08022f82 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8022f82:	b480      	push	{r7}
 8022f84:	b085      	sub	sp, #20
 8022f86:	af00      	add	r7, sp, #0
 8022f88:	6078      	str	r0, [r7, #4]
 8022f8a:	460b      	mov	r3, r1
 8022f8c:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8022f8e:	687b      	ldr	r3, [r7, #4]
 8022f90:	695b      	ldr	r3, [r3, #20]
 8022f92:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8022f94:	887a      	ldrh	r2, [r7, #2]
 8022f96:	68fb      	ldr	r3, [r7, #12]
 8022f98:	4013      	ands	r3, r2
 8022f9a:	041a      	lsls	r2, r3, #16
 8022f9c:	68fb      	ldr	r3, [r7, #12]
 8022f9e:	43d9      	mvns	r1, r3
 8022fa0:	887b      	ldrh	r3, [r7, #2]
 8022fa2:	400b      	ands	r3, r1
 8022fa4:	431a      	orrs	r2, r3
 8022fa6:	687b      	ldr	r3, [r7, #4]
 8022fa8:	619a      	str	r2, [r3, #24]
}
 8022faa:	bf00      	nop
 8022fac:	3714      	adds	r7, #20
 8022fae:	46bd      	mov	sp, r7
 8022fb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8022fb4:	4770      	bx	lr
	...

08022fb8 <HAL_PWR_EnableBkUpAccess>:
  *         in backup domain protection disabling/enabling after programming the
  *         DBP bit" section.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8022fb8:	b480      	push	{r7}
 8022fba:	b083      	sub	sp, #12
 8022fbc:	af00      	add	r7, sp, #0
  __IO uint32_t dummyread;
  *(__IO uint32_t *) CR_DBP_BB = (uint32_t)ENABLE;
 8022fbe:	4b06      	ldr	r3, [pc, #24]	; (8022fd8 <HAL_PWR_EnableBkUpAccess+0x20>)
 8022fc0:	2201      	movs	r2, #1
 8022fc2:	601a      	str	r2, [r3, #0]
  dummyread = PWR->CR;
 8022fc4:	4b05      	ldr	r3, [pc, #20]	; (8022fdc <HAL_PWR_EnableBkUpAccess+0x24>)
 8022fc6:	681b      	ldr	r3, [r3, #0]
 8022fc8:	607b      	str	r3, [r7, #4]
  UNUSED(dummyread);
 8022fca:	687b      	ldr	r3, [r7, #4]
}
 8022fcc:	bf00      	nop
 8022fce:	370c      	adds	r7, #12
 8022fd0:	46bd      	mov	sp, r7
 8022fd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8022fd6:	4770      	bx	lr
 8022fd8:	420e0020 	.word	0x420e0020
 8022fdc:	40007000 	.word	0x40007000

08022fe0 <HAL_PWR_DisableBkUpAccess>:
  *         in backup domain protection disabling/enabling after programming the
  *         DBP bit" section.
  * @retval None
  */
void HAL_PWR_DisableBkUpAccess(void)
{
 8022fe0:	b480      	push	{r7}
 8022fe2:	b083      	sub	sp, #12
 8022fe4:	af00      	add	r7, sp, #0
  __IO uint32_t dummyread;
  *(__IO uint32_t *) CR_DBP_BB = (uint32_t)DISABLE;
 8022fe6:	4b06      	ldr	r3, [pc, #24]	; (8023000 <HAL_PWR_DisableBkUpAccess+0x20>)
 8022fe8:	2200      	movs	r2, #0
 8022fea:	601a      	str	r2, [r3, #0]
  dummyread = PWR->CR;
 8022fec:	4b05      	ldr	r3, [pc, #20]	; (8023004 <HAL_PWR_DisableBkUpAccess+0x24>)
 8022fee:	681b      	ldr	r3, [r3, #0]
 8022ff0:	607b      	str	r3, [r7, #4]
  UNUSED(dummyread);
 8022ff2:	687b      	ldr	r3, [r7, #4]
}
 8022ff4:	bf00      	nop
 8022ff6:	370c      	adds	r7, #12
 8022ff8:	46bd      	mov	sp, r7
 8022ffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8022ffe:	4770      	bx	lr
 8023000:	420e0020 	.word	0x420e0020
 8023004:	40007000 	.word	0x40007000

08023008 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8023008:	b580      	push	{r7, lr}
 802300a:	b086      	sub	sp, #24
 802300c:	af00      	add	r7, sp, #0
 802300e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8023010:	687b      	ldr	r3, [r7, #4]
 8023012:	2b00      	cmp	r3, #0
 8023014:	d101      	bne.n	802301a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8023016:	2301      	movs	r3, #1
 8023018:	e267      	b.n	80234ea <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 802301a:	687b      	ldr	r3, [r7, #4]
 802301c:	681b      	ldr	r3, [r3, #0]
 802301e:	f003 0301 	and.w	r3, r3, #1
 8023022:	2b00      	cmp	r3, #0
 8023024:	d075      	beq.n	8023112 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8023026:	4b88      	ldr	r3, [pc, #544]	; (8023248 <HAL_RCC_OscConfig+0x240>)
 8023028:	689b      	ldr	r3, [r3, #8]
 802302a:	f003 030c 	and.w	r3, r3, #12
 802302e:	2b04      	cmp	r3, #4
 8023030:	d00c      	beq.n	802304c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8023032:	4b85      	ldr	r3, [pc, #532]	; (8023248 <HAL_RCC_OscConfig+0x240>)
 8023034:	689b      	ldr	r3, [r3, #8]
 8023036:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 802303a:	2b08      	cmp	r3, #8
 802303c:	d112      	bne.n	8023064 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 802303e:	4b82      	ldr	r3, [pc, #520]	; (8023248 <HAL_RCC_OscConfig+0x240>)
 8023040:	685b      	ldr	r3, [r3, #4]
 8023042:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8023046:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 802304a:	d10b      	bne.n	8023064 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 802304c:	4b7e      	ldr	r3, [pc, #504]	; (8023248 <HAL_RCC_OscConfig+0x240>)
 802304e:	681b      	ldr	r3, [r3, #0]
 8023050:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8023054:	2b00      	cmp	r3, #0
 8023056:	d05b      	beq.n	8023110 <HAL_RCC_OscConfig+0x108>
 8023058:	687b      	ldr	r3, [r7, #4]
 802305a:	685b      	ldr	r3, [r3, #4]
 802305c:	2b00      	cmp	r3, #0
 802305e:	d157      	bne.n	8023110 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8023060:	2301      	movs	r3, #1
 8023062:	e242      	b.n	80234ea <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8023064:	687b      	ldr	r3, [r7, #4]
 8023066:	685b      	ldr	r3, [r3, #4]
 8023068:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 802306c:	d106      	bne.n	802307c <HAL_RCC_OscConfig+0x74>
 802306e:	4b76      	ldr	r3, [pc, #472]	; (8023248 <HAL_RCC_OscConfig+0x240>)
 8023070:	681b      	ldr	r3, [r3, #0]
 8023072:	4a75      	ldr	r2, [pc, #468]	; (8023248 <HAL_RCC_OscConfig+0x240>)
 8023074:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8023078:	6013      	str	r3, [r2, #0]
 802307a:	e01d      	b.n	80230b8 <HAL_RCC_OscConfig+0xb0>
 802307c:	687b      	ldr	r3, [r7, #4]
 802307e:	685b      	ldr	r3, [r3, #4]
 8023080:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8023084:	d10c      	bne.n	80230a0 <HAL_RCC_OscConfig+0x98>
 8023086:	4b70      	ldr	r3, [pc, #448]	; (8023248 <HAL_RCC_OscConfig+0x240>)
 8023088:	681b      	ldr	r3, [r3, #0]
 802308a:	4a6f      	ldr	r2, [pc, #444]	; (8023248 <HAL_RCC_OscConfig+0x240>)
 802308c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8023090:	6013      	str	r3, [r2, #0]
 8023092:	4b6d      	ldr	r3, [pc, #436]	; (8023248 <HAL_RCC_OscConfig+0x240>)
 8023094:	681b      	ldr	r3, [r3, #0]
 8023096:	4a6c      	ldr	r2, [pc, #432]	; (8023248 <HAL_RCC_OscConfig+0x240>)
 8023098:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 802309c:	6013      	str	r3, [r2, #0]
 802309e:	e00b      	b.n	80230b8 <HAL_RCC_OscConfig+0xb0>
 80230a0:	4b69      	ldr	r3, [pc, #420]	; (8023248 <HAL_RCC_OscConfig+0x240>)
 80230a2:	681b      	ldr	r3, [r3, #0]
 80230a4:	4a68      	ldr	r2, [pc, #416]	; (8023248 <HAL_RCC_OscConfig+0x240>)
 80230a6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80230aa:	6013      	str	r3, [r2, #0]
 80230ac:	4b66      	ldr	r3, [pc, #408]	; (8023248 <HAL_RCC_OscConfig+0x240>)
 80230ae:	681b      	ldr	r3, [r3, #0]
 80230b0:	4a65      	ldr	r2, [pc, #404]	; (8023248 <HAL_RCC_OscConfig+0x240>)
 80230b2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80230b6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80230b8:	687b      	ldr	r3, [r7, #4]
 80230ba:	685b      	ldr	r3, [r3, #4]
 80230bc:	2b00      	cmp	r3, #0
 80230be:	d013      	beq.n	80230e8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80230c0:	f7fe fa48 	bl	8021554 <HAL_GetTick>
 80230c4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80230c6:	e008      	b.n	80230da <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80230c8:	f7fe fa44 	bl	8021554 <HAL_GetTick>
 80230cc:	4602      	mov	r2, r0
 80230ce:	693b      	ldr	r3, [r7, #16]
 80230d0:	1ad3      	subs	r3, r2, r3
 80230d2:	2b64      	cmp	r3, #100	; 0x64
 80230d4:	d901      	bls.n	80230da <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80230d6:	2303      	movs	r3, #3
 80230d8:	e207      	b.n	80234ea <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80230da:	4b5b      	ldr	r3, [pc, #364]	; (8023248 <HAL_RCC_OscConfig+0x240>)
 80230dc:	681b      	ldr	r3, [r3, #0]
 80230de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80230e2:	2b00      	cmp	r3, #0
 80230e4:	d0f0      	beq.n	80230c8 <HAL_RCC_OscConfig+0xc0>
 80230e6:	e014      	b.n	8023112 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80230e8:	f7fe fa34 	bl	8021554 <HAL_GetTick>
 80230ec:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80230ee:	e008      	b.n	8023102 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80230f0:	f7fe fa30 	bl	8021554 <HAL_GetTick>
 80230f4:	4602      	mov	r2, r0
 80230f6:	693b      	ldr	r3, [r7, #16]
 80230f8:	1ad3      	subs	r3, r2, r3
 80230fa:	2b64      	cmp	r3, #100	; 0x64
 80230fc:	d901      	bls.n	8023102 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80230fe:	2303      	movs	r3, #3
 8023100:	e1f3      	b.n	80234ea <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8023102:	4b51      	ldr	r3, [pc, #324]	; (8023248 <HAL_RCC_OscConfig+0x240>)
 8023104:	681b      	ldr	r3, [r3, #0]
 8023106:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 802310a:	2b00      	cmp	r3, #0
 802310c:	d1f0      	bne.n	80230f0 <HAL_RCC_OscConfig+0xe8>
 802310e:	e000      	b.n	8023112 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8023110:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8023112:	687b      	ldr	r3, [r7, #4]
 8023114:	681b      	ldr	r3, [r3, #0]
 8023116:	f003 0302 	and.w	r3, r3, #2
 802311a:	2b00      	cmp	r3, #0
 802311c:	d063      	beq.n	80231e6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 802311e:	4b4a      	ldr	r3, [pc, #296]	; (8023248 <HAL_RCC_OscConfig+0x240>)
 8023120:	689b      	ldr	r3, [r3, #8]
 8023122:	f003 030c 	and.w	r3, r3, #12
 8023126:	2b00      	cmp	r3, #0
 8023128:	d00b      	beq.n	8023142 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 802312a:	4b47      	ldr	r3, [pc, #284]	; (8023248 <HAL_RCC_OscConfig+0x240>)
 802312c:	689b      	ldr	r3, [r3, #8]
 802312e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8023132:	2b08      	cmp	r3, #8
 8023134:	d11c      	bne.n	8023170 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8023136:	4b44      	ldr	r3, [pc, #272]	; (8023248 <HAL_RCC_OscConfig+0x240>)
 8023138:	685b      	ldr	r3, [r3, #4]
 802313a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 802313e:	2b00      	cmp	r3, #0
 8023140:	d116      	bne.n	8023170 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8023142:	4b41      	ldr	r3, [pc, #260]	; (8023248 <HAL_RCC_OscConfig+0x240>)
 8023144:	681b      	ldr	r3, [r3, #0]
 8023146:	f003 0302 	and.w	r3, r3, #2
 802314a:	2b00      	cmp	r3, #0
 802314c:	d005      	beq.n	802315a <HAL_RCC_OscConfig+0x152>
 802314e:	687b      	ldr	r3, [r7, #4]
 8023150:	68db      	ldr	r3, [r3, #12]
 8023152:	2b01      	cmp	r3, #1
 8023154:	d001      	beq.n	802315a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8023156:	2301      	movs	r3, #1
 8023158:	e1c7      	b.n	80234ea <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 802315a:	4b3b      	ldr	r3, [pc, #236]	; (8023248 <HAL_RCC_OscConfig+0x240>)
 802315c:	681b      	ldr	r3, [r3, #0]
 802315e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8023162:	687b      	ldr	r3, [r7, #4]
 8023164:	691b      	ldr	r3, [r3, #16]
 8023166:	00db      	lsls	r3, r3, #3
 8023168:	4937      	ldr	r1, [pc, #220]	; (8023248 <HAL_RCC_OscConfig+0x240>)
 802316a:	4313      	orrs	r3, r2
 802316c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 802316e:	e03a      	b.n	80231e6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8023170:	687b      	ldr	r3, [r7, #4]
 8023172:	68db      	ldr	r3, [r3, #12]
 8023174:	2b00      	cmp	r3, #0
 8023176:	d020      	beq.n	80231ba <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8023178:	4b34      	ldr	r3, [pc, #208]	; (802324c <HAL_RCC_OscConfig+0x244>)
 802317a:	2201      	movs	r2, #1
 802317c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 802317e:	f7fe f9e9 	bl	8021554 <HAL_GetTick>
 8023182:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8023184:	e008      	b.n	8023198 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8023186:	f7fe f9e5 	bl	8021554 <HAL_GetTick>
 802318a:	4602      	mov	r2, r0
 802318c:	693b      	ldr	r3, [r7, #16]
 802318e:	1ad3      	subs	r3, r2, r3
 8023190:	2b02      	cmp	r3, #2
 8023192:	d901      	bls.n	8023198 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8023194:	2303      	movs	r3, #3
 8023196:	e1a8      	b.n	80234ea <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8023198:	4b2b      	ldr	r3, [pc, #172]	; (8023248 <HAL_RCC_OscConfig+0x240>)
 802319a:	681b      	ldr	r3, [r3, #0]
 802319c:	f003 0302 	and.w	r3, r3, #2
 80231a0:	2b00      	cmp	r3, #0
 80231a2:	d0f0      	beq.n	8023186 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80231a4:	4b28      	ldr	r3, [pc, #160]	; (8023248 <HAL_RCC_OscConfig+0x240>)
 80231a6:	681b      	ldr	r3, [r3, #0]
 80231a8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80231ac:	687b      	ldr	r3, [r7, #4]
 80231ae:	691b      	ldr	r3, [r3, #16]
 80231b0:	00db      	lsls	r3, r3, #3
 80231b2:	4925      	ldr	r1, [pc, #148]	; (8023248 <HAL_RCC_OscConfig+0x240>)
 80231b4:	4313      	orrs	r3, r2
 80231b6:	600b      	str	r3, [r1, #0]
 80231b8:	e015      	b.n	80231e6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80231ba:	4b24      	ldr	r3, [pc, #144]	; (802324c <HAL_RCC_OscConfig+0x244>)
 80231bc:	2200      	movs	r2, #0
 80231be:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80231c0:	f7fe f9c8 	bl	8021554 <HAL_GetTick>
 80231c4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80231c6:	e008      	b.n	80231da <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80231c8:	f7fe f9c4 	bl	8021554 <HAL_GetTick>
 80231cc:	4602      	mov	r2, r0
 80231ce:	693b      	ldr	r3, [r7, #16]
 80231d0:	1ad3      	subs	r3, r2, r3
 80231d2:	2b02      	cmp	r3, #2
 80231d4:	d901      	bls.n	80231da <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80231d6:	2303      	movs	r3, #3
 80231d8:	e187      	b.n	80234ea <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80231da:	4b1b      	ldr	r3, [pc, #108]	; (8023248 <HAL_RCC_OscConfig+0x240>)
 80231dc:	681b      	ldr	r3, [r3, #0]
 80231de:	f003 0302 	and.w	r3, r3, #2
 80231e2:	2b00      	cmp	r3, #0
 80231e4:	d1f0      	bne.n	80231c8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80231e6:	687b      	ldr	r3, [r7, #4]
 80231e8:	681b      	ldr	r3, [r3, #0]
 80231ea:	f003 0308 	and.w	r3, r3, #8
 80231ee:	2b00      	cmp	r3, #0
 80231f0:	d036      	beq.n	8023260 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80231f2:	687b      	ldr	r3, [r7, #4]
 80231f4:	695b      	ldr	r3, [r3, #20]
 80231f6:	2b00      	cmp	r3, #0
 80231f8:	d016      	beq.n	8023228 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80231fa:	4b15      	ldr	r3, [pc, #84]	; (8023250 <HAL_RCC_OscConfig+0x248>)
 80231fc:	2201      	movs	r2, #1
 80231fe:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8023200:	f7fe f9a8 	bl	8021554 <HAL_GetTick>
 8023204:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8023206:	e008      	b.n	802321a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8023208:	f7fe f9a4 	bl	8021554 <HAL_GetTick>
 802320c:	4602      	mov	r2, r0
 802320e:	693b      	ldr	r3, [r7, #16]
 8023210:	1ad3      	subs	r3, r2, r3
 8023212:	2b02      	cmp	r3, #2
 8023214:	d901      	bls.n	802321a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8023216:	2303      	movs	r3, #3
 8023218:	e167      	b.n	80234ea <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 802321a:	4b0b      	ldr	r3, [pc, #44]	; (8023248 <HAL_RCC_OscConfig+0x240>)
 802321c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 802321e:	f003 0302 	and.w	r3, r3, #2
 8023222:	2b00      	cmp	r3, #0
 8023224:	d0f0      	beq.n	8023208 <HAL_RCC_OscConfig+0x200>
 8023226:	e01b      	b.n	8023260 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8023228:	4b09      	ldr	r3, [pc, #36]	; (8023250 <HAL_RCC_OscConfig+0x248>)
 802322a:	2200      	movs	r2, #0
 802322c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 802322e:	f7fe f991 	bl	8021554 <HAL_GetTick>
 8023232:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8023234:	e00e      	b.n	8023254 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8023236:	f7fe f98d 	bl	8021554 <HAL_GetTick>
 802323a:	4602      	mov	r2, r0
 802323c:	693b      	ldr	r3, [r7, #16]
 802323e:	1ad3      	subs	r3, r2, r3
 8023240:	2b02      	cmp	r3, #2
 8023242:	d907      	bls.n	8023254 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8023244:	2303      	movs	r3, #3
 8023246:	e150      	b.n	80234ea <HAL_RCC_OscConfig+0x4e2>
 8023248:	40023800 	.word	0x40023800
 802324c:	42470000 	.word	0x42470000
 8023250:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8023254:	4b88      	ldr	r3, [pc, #544]	; (8023478 <HAL_RCC_OscConfig+0x470>)
 8023256:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8023258:	f003 0302 	and.w	r3, r3, #2
 802325c:	2b00      	cmp	r3, #0
 802325e:	d1ea      	bne.n	8023236 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8023260:	687b      	ldr	r3, [r7, #4]
 8023262:	681b      	ldr	r3, [r3, #0]
 8023264:	f003 0304 	and.w	r3, r3, #4
 8023268:	2b00      	cmp	r3, #0
 802326a:	f000 8097 	beq.w	802339c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 802326e:	2300      	movs	r3, #0
 8023270:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8023272:	4b81      	ldr	r3, [pc, #516]	; (8023478 <HAL_RCC_OscConfig+0x470>)
 8023274:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8023276:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 802327a:	2b00      	cmp	r3, #0
 802327c:	d10f      	bne.n	802329e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 802327e:	2300      	movs	r3, #0
 8023280:	60bb      	str	r3, [r7, #8]
 8023282:	4b7d      	ldr	r3, [pc, #500]	; (8023478 <HAL_RCC_OscConfig+0x470>)
 8023284:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8023286:	4a7c      	ldr	r2, [pc, #496]	; (8023478 <HAL_RCC_OscConfig+0x470>)
 8023288:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 802328c:	6413      	str	r3, [r2, #64]	; 0x40
 802328e:	4b7a      	ldr	r3, [pc, #488]	; (8023478 <HAL_RCC_OscConfig+0x470>)
 8023290:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8023292:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8023296:	60bb      	str	r3, [r7, #8]
 8023298:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 802329a:	2301      	movs	r3, #1
 802329c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 802329e:	4b77      	ldr	r3, [pc, #476]	; (802347c <HAL_RCC_OscConfig+0x474>)
 80232a0:	681b      	ldr	r3, [r3, #0]
 80232a2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80232a6:	2b00      	cmp	r3, #0
 80232a8:	d118      	bne.n	80232dc <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80232aa:	4b74      	ldr	r3, [pc, #464]	; (802347c <HAL_RCC_OscConfig+0x474>)
 80232ac:	681b      	ldr	r3, [r3, #0]
 80232ae:	4a73      	ldr	r2, [pc, #460]	; (802347c <HAL_RCC_OscConfig+0x474>)
 80232b0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80232b4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80232b6:	f7fe f94d 	bl	8021554 <HAL_GetTick>
 80232ba:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80232bc:	e008      	b.n	80232d0 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80232be:	f7fe f949 	bl	8021554 <HAL_GetTick>
 80232c2:	4602      	mov	r2, r0
 80232c4:	693b      	ldr	r3, [r7, #16]
 80232c6:	1ad3      	subs	r3, r2, r3
 80232c8:	2b02      	cmp	r3, #2
 80232ca:	d901      	bls.n	80232d0 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80232cc:	2303      	movs	r3, #3
 80232ce:	e10c      	b.n	80234ea <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80232d0:	4b6a      	ldr	r3, [pc, #424]	; (802347c <HAL_RCC_OscConfig+0x474>)
 80232d2:	681b      	ldr	r3, [r3, #0]
 80232d4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80232d8:	2b00      	cmp	r3, #0
 80232da:	d0f0      	beq.n	80232be <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80232dc:	687b      	ldr	r3, [r7, #4]
 80232de:	689b      	ldr	r3, [r3, #8]
 80232e0:	2b01      	cmp	r3, #1
 80232e2:	d106      	bne.n	80232f2 <HAL_RCC_OscConfig+0x2ea>
 80232e4:	4b64      	ldr	r3, [pc, #400]	; (8023478 <HAL_RCC_OscConfig+0x470>)
 80232e6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80232e8:	4a63      	ldr	r2, [pc, #396]	; (8023478 <HAL_RCC_OscConfig+0x470>)
 80232ea:	f043 0301 	orr.w	r3, r3, #1
 80232ee:	6713      	str	r3, [r2, #112]	; 0x70
 80232f0:	e01c      	b.n	802332c <HAL_RCC_OscConfig+0x324>
 80232f2:	687b      	ldr	r3, [r7, #4]
 80232f4:	689b      	ldr	r3, [r3, #8]
 80232f6:	2b05      	cmp	r3, #5
 80232f8:	d10c      	bne.n	8023314 <HAL_RCC_OscConfig+0x30c>
 80232fa:	4b5f      	ldr	r3, [pc, #380]	; (8023478 <HAL_RCC_OscConfig+0x470>)
 80232fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80232fe:	4a5e      	ldr	r2, [pc, #376]	; (8023478 <HAL_RCC_OscConfig+0x470>)
 8023300:	f043 0304 	orr.w	r3, r3, #4
 8023304:	6713      	str	r3, [r2, #112]	; 0x70
 8023306:	4b5c      	ldr	r3, [pc, #368]	; (8023478 <HAL_RCC_OscConfig+0x470>)
 8023308:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 802330a:	4a5b      	ldr	r2, [pc, #364]	; (8023478 <HAL_RCC_OscConfig+0x470>)
 802330c:	f043 0301 	orr.w	r3, r3, #1
 8023310:	6713      	str	r3, [r2, #112]	; 0x70
 8023312:	e00b      	b.n	802332c <HAL_RCC_OscConfig+0x324>
 8023314:	4b58      	ldr	r3, [pc, #352]	; (8023478 <HAL_RCC_OscConfig+0x470>)
 8023316:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8023318:	4a57      	ldr	r2, [pc, #348]	; (8023478 <HAL_RCC_OscConfig+0x470>)
 802331a:	f023 0301 	bic.w	r3, r3, #1
 802331e:	6713      	str	r3, [r2, #112]	; 0x70
 8023320:	4b55      	ldr	r3, [pc, #340]	; (8023478 <HAL_RCC_OscConfig+0x470>)
 8023322:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8023324:	4a54      	ldr	r2, [pc, #336]	; (8023478 <HAL_RCC_OscConfig+0x470>)
 8023326:	f023 0304 	bic.w	r3, r3, #4
 802332a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 802332c:	687b      	ldr	r3, [r7, #4]
 802332e:	689b      	ldr	r3, [r3, #8]
 8023330:	2b00      	cmp	r3, #0
 8023332:	d015      	beq.n	8023360 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8023334:	f7fe f90e 	bl	8021554 <HAL_GetTick>
 8023338:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 802333a:	e00a      	b.n	8023352 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 802333c:	f7fe f90a 	bl	8021554 <HAL_GetTick>
 8023340:	4602      	mov	r2, r0
 8023342:	693b      	ldr	r3, [r7, #16]
 8023344:	1ad3      	subs	r3, r2, r3
 8023346:	f241 3288 	movw	r2, #5000	; 0x1388
 802334a:	4293      	cmp	r3, r2
 802334c:	d901      	bls.n	8023352 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 802334e:	2303      	movs	r3, #3
 8023350:	e0cb      	b.n	80234ea <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8023352:	4b49      	ldr	r3, [pc, #292]	; (8023478 <HAL_RCC_OscConfig+0x470>)
 8023354:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8023356:	f003 0302 	and.w	r3, r3, #2
 802335a:	2b00      	cmp	r3, #0
 802335c:	d0ee      	beq.n	802333c <HAL_RCC_OscConfig+0x334>
 802335e:	e014      	b.n	802338a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8023360:	f7fe f8f8 	bl	8021554 <HAL_GetTick>
 8023364:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8023366:	e00a      	b.n	802337e <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8023368:	f7fe f8f4 	bl	8021554 <HAL_GetTick>
 802336c:	4602      	mov	r2, r0
 802336e:	693b      	ldr	r3, [r7, #16]
 8023370:	1ad3      	subs	r3, r2, r3
 8023372:	f241 3288 	movw	r2, #5000	; 0x1388
 8023376:	4293      	cmp	r3, r2
 8023378:	d901      	bls.n	802337e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 802337a:	2303      	movs	r3, #3
 802337c:	e0b5      	b.n	80234ea <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 802337e:	4b3e      	ldr	r3, [pc, #248]	; (8023478 <HAL_RCC_OscConfig+0x470>)
 8023380:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8023382:	f003 0302 	and.w	r3, r3, #2
 8023386:	2b00      	cmp	r3, #0
 8023388:	d1ee      	bne.n	8023368 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 802338a:	7dfb      	ldrb	r3, [r7, #23]
 802338c:	2b01      	cmp	r3, #1
 802338e:	d105      	bne.n	802339c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8023390:	4b39      	ldr	r3, [pc, #228]	; (8023478 <HAL_RCC_OscConfig+0x470>)
 8023392:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8023394:	4a38      	ldr	r2, [pc, #224]	; (8023478 <HAL_RCC_OscConfig+0x470>)
 8023396:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 802339a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 802339c:	687b      	ldr	r3, [r7, #4]
 802339e:	699b      	ldr	r3, [r3, #24]
 80233a0:	2b00      	cmp	r3, #0
 80233a2:	f000 80a1 	beq.w	80234e8 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80233a6:	4b34      	ldr	r3, [pc, #208]	; (8023478 <HAL_RCC_OscConfig+0x470>)
 80233a8:	689b      	ldr	r3, [r3, #8]
 80233aa:	f003 030c 	and.w	r3, r3, #12
 80233ae:	2b08      	cmp	r3, #8
 80233b0:	d05c      	beq.n	802346c <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80233b2:	687b      	ldr	r3, [r7, #4]
 80233b4:	699b      	ldr	r3, [r3, #24]
 80233b6:	2b02      	cmp	r3, #2
 80233b8:	d141      	bne.n	802343e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80233ba:	4b31      	ldr	r3, [pc, #196]	; (8023480 <HAL_RCC_OscConfig+0x478>)
 80233bc:	2200      	movs	r2, #0
 80233be:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80233c0:	f7fe f8c8 	bl	8021554 <HAL_GetTick>
 80233c4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80233c6:	e008      	b.n	80233da <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80233c8:	f7fe f8c4 	bl	8021554 <HAL_GetTick>
 80233cc:	4602      	mov	r2, r0
 80233ce:	693b      	ldr	r3, [r7, #16]
 80233d0:	1ad3      	subs	r3, r2, r3
 80233d2:	2b02      	cmp	r3, #2
 80233d4:	d901      	bls.n	80233da <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80233d6:	2303      	movs	r3, #3
 80233d8:	e087      	b.n	80234ea <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80233da:	4b27      	ldr	r3, [pc, #156]	; (8023478 <HAL_RCC_OscConfig+0x470>)
 80233dc:	681b      	ldr	r3, [r3, #0]
 80233de:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80233e2:	2b00      	cmp	r3, #0
 80233e4:	d1f0      	bne.n	80233c8 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80233e6:	687b      	ldr	r3, [r7, #4]
 80233e8:	69da      	ldr	r2, [r3, #28]
 80233ea:	687b      	ldr	r3, [r7, #4]
 80233ec:	6a1b      	ldr	r3, [r3, #32]
 80233ee:	431a      	orrs	r2, r3
 80233f0:	687b      	ldr	r3, [r7, #4]
 80233f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80233f4:	019b      	lsls	r3, r3, #6
 80233f6:	431a      	orrs	r2, r3
 80233f8:	687b      	ldr	r3, [r7, #4]
 80233fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80233fc:	085b      	lsrs	r3, r3, #1
 80233fe:	3b01      	subs	r3, #1
 8023400:	041b      	lsls	r3, r3, #16
 8023402:	431a      	orrs	r2, r3
 8023404:	687b      	ldr	r3, [r7, #4]
 8023406:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8023408:	061b      	lsls	r3, r3, #24
 802340a:	491b      	ldr	r1, [pc, #108]	; (8023478 <HAL_RCC_OscConfig+0x470>)
 802340c:	4313      	orrs	r3, r2
 802340e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8023410:	4b1b      	ldr	r3, [pc, #108]	; (8023480 <HAL_RCC_OscConfig+0x478>)
 8023412:	2201      	movs	r2, #1
 8023414:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8023416:	f7fe f89d 	bl	8021554 <HAL_GetTick>
 802341a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 802341c:	e008      	b.n	8023430 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 802341e:	f7fe f899 	bl	8021554 <HAL_GetTick>
 8023422:	4602      	mov	r2, r0
 8023424:	693b      	ldr	r3, [r7, #16]
 8023426:	1ad3      	subs	r3, r2, r3
 8023428:	2b02      	cmp	r3, #2
 802342a:	d901      	bls.n	8023430 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 802342c:	2303      	movs	r3, #3
 802342e:	e05c      	b.n	80234ea <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8023430:	4b11      	ldr	r3, [pc, #68]	; (8023478 <HAL_RCC_OscConfig+0x470>)
 8023432:	681b      	ldr	r3, [r3, #0]
 8023434:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8023438:	2b00      	cmp	r3, #0
 802343a:	d0f0      	beq.n	802341e <HAL_RCC_OscConfig+0x416>
 802343c:	e054      	b.n	80234e8 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 802343e:	4b10      	ldr	r3, [pc, #64]	; (8023480 <HAL_RCC_OscConfig+0x478>)
 8023440:	2200      	movs	r2, #0
 8023442:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8023444:	f7fe f886 	bl	8021554 <HAL_GetTick>
 8023448:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 802344a:	e008      	b.n	802345e <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 802344c:	f7fe f882 	bl	8021554 <HAL_GetTick>
 8023450:	4602      	mov	r2, r0
 8023452:	693b      	ldr	r3, [r7, #16]
 8023454:	1ad3      	subs	r3, r2, r3
 8023456:	2b02      	cmp	r3, #2
 8023458:	d901      	bls.n	802345e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 802345a:	2303      	movs	r3, #3
 802345c:	e045      	b.n	80234ea <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 802345e:	4b06      	ldr	r3, [pc, #24]	; (8023478 <HAL_RCC_OscConfig+0x470>)
 8023460:	681b      	ldr	r3, [r3, #0]
 8023462:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8023466:	2b00      	cmp	r3, #0
 8023468:	d1f0      	bne.n	802344c <HAL_RCC_OscConfig+0x444>
 802346a:	e03d      	b.n	80234e8 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 802346c:	687b      	ldr	r3, [r7, #4]
 802346e:	699b      	ldr	r3, [r3, #24]
 8023470:	2b01      	cmp	r3, #1
 8023472:	d107      	bne.n	8023484 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8023474:	2301      	movs	r3, #1
 8023476:	e038      	b.n	80234ea <HAL_RCC_OscConfig+0x4e2>
 8023478:	40023800 	.word	0x40023800
 802347c:	40007000 	.word	0x40007000
 8023480:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8023484:	4b1b      	ldr	r3, [pc, #108]	; (80234f4 <HAL_RCC_OscConfig+0x4ec>)
 8023486:	685b      	ldr	r3, [r3, #4]
 8023488:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 802348a:	687b      	ldr	r3, [r7, #4]
 802348c:	699b      	ldr	r3, [r3, #24]
 802348e:	2b01      	cmp	r3, #1
 8023490:	d028      	beq.n	80234e4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8023492:	68fb      	ldr	r3, [r7, #12]
 8023494:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8023498:	687b      	ldr	r3, [r7, #4]
 802349a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 802349c:	429a      	cmp	r2, r3
 802349e:	d121      	bne.n	80234e4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80234a0:	68fb      	ldr	r3, [r7, #12]
 80234a2:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80234a6:	687b      	ldr	r3, [r7, #4]
 80234a8:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80234aa:	429a      	cmp	r2, r3
 80234ac:	d11a      	bne.n	80234e4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80234ae:	68fa      	ldr	r2, [r7, #12]
 80234b0:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80234b4:	4013      	ands	r3, r2
 80234b6:	687a      	ldr	r2, [r7, #4]
 80234b8:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80234ba:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80234bc:	4293      	cmp	r3, r2
 80234be:	d111      	bne.n	80234e4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80234c0:	68fb      	ldr	r3, [r7, #12]
 80234c2:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80234c6:	687b      	ldr	r3, [r7, #4]
 80234c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80234ca:	085b      	lsrs	r3, r3, #1
 80234cc:	3b01      	subs	r3, #1
 80234ce:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80234d0:	429a      	cmp	r2, r3
 80234d2:	d107      	bne.n	80234e4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80234d4:	68fb      	ldr	r3, [r7, #12]
 80234d6:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80234da:	687b      	ldr	r3, [r7, #4]
 80234dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80234de:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80234e0:	429a      	cmp	r2, r3
 80234e2:	d001      	beq.n	80234e8 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80234e4:	2301      	movs	r3, #1
 80234e6:	e000      	b.n	80234ea <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80234e8:	2300      	movs	r3, #0
}
 80234ea:	4618      	mov	r0, r3
 80234ec:	3718      	adds	r7, #24
 80234ee:	46bd      	mov	sp, r7
 80234f0:	bd80      	pop	{r7, pc}
 80234f2:	bf00      	nop
 80234f4:	40023800 	.word	0x40023800

080234f8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80234f8:	b580      	push	{r7, lr}
 80234fa:	b084      	sub	sp, #16
 80234fc:	af00      	add	r7, sp, #0
 80234fe:	6078      	str	r0, [r7, #4]
 8023500:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8023502:	687b      	ldr	r3, [r7, #4]
 8023504:	2b00      	cmp	r3, #0
 8023506:	d101      	bne.n	802350c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8023508:	2301      	movs	r3, #1
 802350a:	e0cc      	b.n	80236a6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 802350c:	4b68      	ldr	r3, [pc, #416]	; (80236b0 <HAL_RCC_ClockConfig+0x1b8>)
 802350e:	681b      	ldr	r3, [r3, #0]
 8023510:	f003 0307 	and.w	r3, r3, #7
 8023514:	683a      	ldr	r2, [r7, #0]
 8023516:	429a      	cmp	r2, r3
 8023518:	d90c      	bls.n	8023534 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 802351a:	4b65      	ldr	r3, [pc, #404]	; (80236b0 <HAL_RCC_ClockConfig+0x1b8>)
 802351c:	683a      	ldr	r2, [r7, #0]
 802351e:	b2d2      	uxtb	r2, r2
 8023520:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8023522:	4b63      	ldr	r3, [pc, #396]	; (80236b0 <HAL_RCC_ClockConfig+0x1b8>)
 8023524:	681b      	ldr	r3, [r3, #0]
 8023526:	f003 0307 	and.w	r3, r3, #7
 802352a:	683a      	ldr	r2, [r7, #0]
 802352c:	429a      	cmp	r2, r3
 802352e:	d001      	beq.n	8023534 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8023530:	2301      	movs	r3, #1
 8023532:	e0b8      	b.n	80236a6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8023534:	687b      	ldr	r3, [r7, #4]
 8023536:	681b      	ldr	r3, [r3, #0]
 8023538:	f003 0302 	and.w	r3, r3, #2
 802353c:	2b00      	cmp	r3, #0
 802353e:	d020      	beq.n	8023582 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8023540:	687b      	ldr	r3, [r7, #4]
 8023542:	681b      	ldr	r3, [r3, #0]
 8023544:	f003 0304 	and.w	r3, r3, #4
 8023548:	2b00      	cmp	r3, #0
 802354a:	d005      	beq.n	8023558 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 802354c:	4b59      	ldr	r3, [pc, #356]	; (80236b4 <HAL_RCC_ClockConfig+0x1bc>)
 802354e:	689b      	ldr	r3, [r3, #8]
 8023550:	4a58      	ldr	r2, [pc, #352]	; (80236b4 <HAL_RCC_ClockConfig+0x1bc>)
 8023552:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8023556:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8023558:	687b      	ldr	r3, [r7, #4]
 802355a:	681b      	ldr	r3, [r3, #0]
 802355c:	f003 0308 	and.w	r3, r3, #8
 8023560:	2b00      	cmp	r3, #0
 8023562:	d005      	beq.n	8023570 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8023564:	4b53      	ldr	r3, [pc, #332]	; (80236b4 <HAL_RCC_ClockConfig+0x1bc>)
 8023566:	689b      	ldr	r3, [r3, #8]
 8023568:	4a52      	ldr	r2, [pc, #328]	; (80236b4 <HAL_RCC_ClockConfig+0x1bc>)
 802356a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 802356e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8023570:	4b50      	ldr	r3, [pc, #320]	; (80236b4 <HAL_RCC_ClockConfig+0x1bc>)
 8023572:	689b      	ldr	r3, [r3, #8]
 8023574:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8023578:	687b      	ldr	r3, [r7, #4]
 802357a:	689b      	ldr	r3, [r3, #8]
 802357c:	494d      	ldr	r1, [pc, #308]	; (80236b4 <HAL_RCC_ClockConfig+0x1bc>)
 802357e:	4313      	orrs	r3, r2
 8023580:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8023582:	687b      	ldr	r3, [r7, #4]
 8023584:	681b      	ldr	r3, [r3, #0]
 8023586:	f003 0301 	and.w	r3, r3, #1
 802358a:	2b00      	cmp	r3, #0
 802358c:	d044      	beq.n	8023618 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 802358e:	687b      	ldr	r3, [r7, #4]
 8023590:	685b      	ldr	r3, [r3, #4]
 8023592:	2b01      	cmp	r3, #1
 8023594:	d107      	bne.n	80235a6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8023596:	4b47      	ldr	r3, [pc, #284]	; (80236b4 <HAL_RCC_ClockConfig+0x1bc>)
 8023598:	681b      	ldr	r3, [r3, #0]
 802359a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 802359e:	2b00      	cmp	r3, #0
 80235a0:	d119      	bne.n	80235d6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80235a2:	2301      	movs	r3, #1
 80235a4:	e07f      	b.n	80236a6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80235a6:	687b      	ldr	r3, [r7, #4]
 80235a8:	685b      	ldr	r3, [r3, #4]
 80235aa:	2b02      	cmp	r3, #2
 80235ac:	d003      	beq.n	80235b6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80235ae:	687b      	ldr	r3, [r7, #4]
 80235b0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80235b2:	2b03      	cmp	r3, #3
 80235b4:	d107      	bne.n	80235c6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80235b6:	4b3f      	ldr	r3, [pc, #252]	; (80236b4 <HAL_RCC_ClockConfig+0x1bc>)
 80235b8:	681b      	ldr	r3, [r3, #0]
 80235ba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80235be:	2b00      	cmp	r3, #0
 80235c0:	d109      	bne.n	80235d6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80235c2:	2301      	movs	r3, #1
 80235c4:	e06f      	b.n	80236a6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80235c6:	4b3b      	ldr	r3, [pc, #236]	; (80236b4 <HAL_RCC_ClockConfig+0x1bc>)
 80235c8:	681b      	ldr	r3, [r3, #0]
 80235ca:	f003 0302 	and.w	r3, r3, #2
 80235ce:	2b00      	cmp	r3, #0
 80235d0:	d101      	bne.n	80235d6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80235d2:	2301      	movs	r3, #1
 80235d4:	e067      	b.n	80236a6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80235d6:	4b37      	ldr	r3, [pc, #220]	; (80236b4 <HAL_RCC_ClockConfig+0x1bc>)
 80235d8:	689b      	ldr	r3, [r3, #8]
 80235da:	f023 0203 	bic.w	r2, r3, #3
 80235de:	687b      	ldr	r3, [r7, #4]
 80235e0:	685b      	ldr	r3, [r3, #4]
 80235e2:	4934      	ldr	r1, [pc, #208]	; (80236b4 <HAL_RCC_ClockConfig+0x1bc>)
 80235e4:	4313      	orrs	r3, r2
 80235e6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80235e8:	f7fd ffb4 	bl	8021554 <HAL_GetTick>
 80235ec:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80235ee:	e00a      	b.n	8023606 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80235f0:	f7fd ffb0 	bl	8021554 <HAL_GetTick>
 80235f4:	4602      	mov	r2, r0
 80235f6:	68fb      	ldr	r3, [r7, #12]
 80235f8:	1ad3      	subs	r3, r2, r3
 80235fa:	f241 3288 	movw	r2, #5000	; 0x1388
 80235fe:	4293      	cmp	r3, r2
 8023600:	d901      	bls.n	8023606 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8023602:	2303      	movs	r3, #3
 8023604:	e04f      	b.n	80236a6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8023606:	4b2b      	ldr	r3, [pc, #172]	; (80236b4 <HAL_RCC_ClockConfig+0x1bc>)
 8023608:	689b      	ldr	r3, [r3, #8]
 802360a:	f003 020c 	and.w	r2, r3, #12
 802360e:	687b      	ldr	r3, [r7, #4]
 8023610:	685b      	ldr	r3, [r3, #4]
 8023612:	009b      	lsls	r3, r3, #2
 8023614:	429a      	cmp	r2, r3
 8023616:	d1eb      	bne.n	80235f0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8023618:	4b25      	ldr	r3, [pc, #148]	; (80236b0 <HAL_RCC_ClockConfig+0x1b8>)
 802361a:	681b      	ldr	r3, [r3, #0]
 802361c:	f003 0307 	and.w	r3, r3, #7
 8023620:	683a      	ldr	r2, [r7, #0]
 8023622:	429a      	cmp	r2, r3
 8023624:	d20c      	bcs.n	8023640 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8023626:	4b22      	ldr	r3, [pc, #136]	; (80236b0 <HAL_RCC_ClockConfig+0x1b8>)
 8023628:	683a      	ldr	r2, [r7, #0]
 802362a:	b2d2      	uxtb	r2, r2
 802362c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 802362e:	4b20      	ldr	r3, [pc, #128]	; (80236b0 <HAL_RCC_ClockConfig+0x1b8>)
 8023630:	681b      	ldr	r3, [r3, #0]
 8023632:	f003 0307 	and.w	r3, r3, #7
 8023636:	683a      	ldr	r2, [r7, #0]
 8023638:	429a      	cmp	r2, r3
 802363a:	d001      	beq.n	8023640 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 802363c:	2301      	movs	r3, #1
 802363e:	e032      	b.n	80236a6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8023640:	687b      	ldr	r3, [r7, #4]
 8023642:	681b      	ldr	r3, [r3, #0]
 8023644:	f003 0304 	and.w	r3, r3, #4
 8023648:	2b00      	cmp	r3, #0
 802364a:	d008      	beq.n	802365e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 802364c:	4b19      	ldr	r3, [pc, #100]	; (80236b4 <HAL_RCC_ClockConfig+0x1bc>)
 802364e:	689b      	ldr	r3, [r3, #8]
 8023650:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8023654:	687b      	ldr	r3, [r7, #4]
 8023656:	68db      	ldr	r3, [r3, #12]
 8023658:	4916      	ldr	r1, [pc, #88]	; (80236b4 <HAL_RCC_ClockConfig+0x1bc>)
 802365a:	4313      	orrs	r3, r2
 802365c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 802365e:	687b      	ldr	r3, [r7, #4]
 8023660:	681b      	ldr	r3, [r3, #0]
 8023662:	f003 0308 	and.w	r3, r3, #8
 8023666:	2b00      	cmp	r3, #0
 8023668:	d009      	beq.n	802367e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 802366a:	4b12      	ldr	r3, [pc, #72]	; (80236b4 <HAL_RCC_ClockConfig+0x1bc>)
 802366c:	689b      	ldr	r3, [r3, #8]
 802366e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8023672:	687b      	ldr	r3, [r7, #4]
 8023674:	691b      	ldr	r3, [r3, #16]
 8023676:	00db      	lsls	r3, r3, #3
 8023678:	490e      	ldr	r1, [pc, #56]	; (80236b4 <HAL_RCC_ClockConfig+0x1bc>)
 802367a:	4313      	orrs	r3, r2
 802367c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 802367e:	f000 f821 	bl	80236c4 <HAL_RCC_GetSysClockFreq>
 8023682:	4602      	mov	r2, r0
 8023684:	4b0b      	ldr	r3, [pc, #44]	; (80236b4 <HAL_RCC_ClockConfig+0x1bc>)
 8023686:	689b      	ldr	r3, [r3, #8]
 8023688:	091b      	lsrs	r3, r3, #4
 802368a:	f003 030f 	and.w	r3, r3, #15
 802368e:	490a      	ldr	r1, [pc, #40]	; (80236b8 <HAL_RCC_ClockConfig+0x1c0>)
 8023690:	5ccb      	ldrb	r3, [r1, r3]
 8023692:	fa22 f303 	lsr.w	r3, r2, r3
 8023696:	4a09      	ldr	r2, [pc, #36]	; (80236bc <HAL_RCC_ClockConfig+0x1c4>)
 8023698:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 802369a:	4b09      	ldr	r3, [pc, #36]	; (80236c0 <HAL_RCC_ClockConfig+0x1c8>)
 802369c:	681b      	ldr	r3, [r3, #0]
 802369e:	4618      	mov	r0, r3
 80236a0:	f7fd f98a 	bl	80209b8 <HAL_InitTick>

  return HAL_OK;
 80236a4:	2300      	movs	r3, #0
}
 80236a6:	4618      	mov	r0, r3
 80236a8:	3710      	adds	r7, #16
 80236aa:	46bd      	mov	sp, r7
 80236ac:	bd80      	pop	{r7, pc}
 80236ae:	bf00      	nop
 80236b0:	40023c00 	.word	0x40023c00
 80236b4:	40023800 	.word	0x40023800
 80236b8:	0803aa54 	.word	0x0803aa54
 80236bc:	20000000 	.word	0x20000000
 80236c0:	20000008 	.word	0x20000008

080236c4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80236c4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80236c8:	b090      	sub	sp, #64	; 0x40
 80236ca:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80236cc:	2300      	movs	r3, #0
 80236ce:	637b      	str	r3, [r7, #52]	; 0x34
 80236d0:	2300      	movs	r3, #0
 80236d2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80236d4:	2300      	movs	r3, #0
 80236d6:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 80236d8:	2300      	movs	r3, #0
 80236da:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80236dc:	4b59      	ldr	r3, [pc, #356]	; (8023844 <HAL_RCC_GetSysClockFreq+0x180>)
 80236de:	689b      	ldr	r3, [r3, #8]
 80236e0:	f003 030c 	and.w	r3, r3, #12
 80236e4:	2b08      	cmp	r3, #8
 80236e6:	d00d      	beq.n	8023704 <HAL_RCC_GetSysClockFreq+0x40>
 80236e8:	2b08      	cmp	r3, #8
 80236ea:	f200 80a1 	bhi.w	8023830 <HAL_RCC_GetSysClockFreq+0x16c>
 80236ee:	2b00      	cmp	r3, #0
 80236f0:	d002      	beq.n	80236f8 <HAL_RCC_GetSysClockFreq+0x34>
 80236f2:	2b04      	cmp	r3, #4
 80236f4:	d003      	beq.n	80236fe <HAL_RCC_GetSysClockFreq+0x3a>
 80236f6:	e09b      	b.n	8023830 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80236f8:	4b53      	ldr	r3, [pc, #332]	; (8023848 <HAL_RCC_GetSysClockFreq+0x184>)
 80236fa:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 80236fc:	e09b      	b.n	8023836 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80236fe:	4b53      	ldr	r3, [pc, #332]	; (802384c <HAL_RCC_GetSysClockFreq+0x188>)
 8023700:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8023702:	e098      	b.n	8023836 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8023704:	4b4f      	ldr	r3, [pc, #316]	; (8023844 <HAL_RCC_GetSysClockFreq+0x180>)
 8023706:	685b      	ldr	r3, [r3, #4]
 8023708:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 802370c:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 802370e:	4b4d      	ldr	r3, [pc, #308]	; (8023844 <HAL_RCC_GetSysClockFreq+0x180>)
 8023710:	685b      	ldr	r3, [r3, #4]
 8023712:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8023716:	2b00      	cmp	r3, #0
 8023718:	d028      	beq.n	802376c <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 802371a:	4b4a      	ldr	r3, [pc, #296]	; (8023844 <HAL_RCC_GetSysClockFreq+0x180>)
 802371c:	685b      	ldr	r3, [r3, #4]
 802371e:	099b      	lsrs	r3, r3, #6
 8023720:	2200      	movs	r2, #0
 8023722:	623b      	str	r3, [r7, #32]
 8023724:	627a      	str	r2, [r7, #36]	; 0x24
 8023726:	6a3b      	ldr	r3, [r7, #32]
 8023728:	f3c3 0008 	ubfx	r0, r3, #0, #9
 802372c:	2100      	movs	r1, #0
 802372e:	4b47      	ldr	r3, [pc, #284]	; (802384c <HAL_RCC_GetSysClockFreq+0x188>)
 8023730:	fb03 f201 	mul.w	r2, r3, r1
 8023734:	2300      	movs	r3, #0
 8023736:	fb00 f303 	mul.w	r3, r0, r3
 802373a:	4413      	add	r3, r2
 802373c:	4a43      	ldr	r2, [pc, #268]	; (802384c <HAL_RCC_GetSysClockFreq+0x188>)
 802373e:	fba0 1202 	umull	r1, r2, r0, r2
 8023742:	62fa      	str	r2, [r7, #44]	; 0x2c
 8023744:	460a      	mov	r2, r1
 8023746:	62ba      	str	r2, [r7, #40]	; 0x28
 8023748:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 802374a:	4413      	add	r3, r2
 802374c:	62fb      	str	r3, [r7, #44]	; 0x2c
 802374e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8023750:	2200      	movs	r2, #0
 8023752:	61bb      	str	r3, [r7, #24]
 8023754:	61fa      	str	r2, [r7, #28]
 8023756:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 802375a:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 802375e:	f7fc fd8f 	bl	8020280 <__aeabi_uldivmod>
 8023762:	4602      	mov	r2, r0
 8023764:	460b      	mov	r3, r1
 8023766:	4613      	mov	r3, r2
 8023768:	63fb      	str	r3, [r7, #60]	; 0x3c
 802376a:	e053      	b.n	8023814 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 802376c:	4b35      	ldr	r3, [pc, #212]	; (8023844 <HAL_RCC_GetSysClockFreq+0x180>)
 802376e:	685b      	ldr	r3, [r3, #4]
 8023770:	099b      	lsrs	r3, r3, #6
 8023772:	2200      	movs	r2, #0
 8023774:	613b      	str	r3, [r7, #16]
 8023776:	617a      	str	r2, [r7, #20]
 8023778:	693b      	ldr	r3, [r7, #16]
 802377a:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 802377e:	f04f 0b00 	mov.w	fp, #0
 8023782:	4652      	mov	r2, sl
 8023784:	465b      	mov	r3, fp
 8023786:	f04f 0000 	mov.w	r0, #0
 802378a:	f04f 0100 	mov.w	r1, #0
 802378e:	0159      	lsls	r1, r3, #5
 8023790:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8023794:	0150      	lsls	r0, r2, #5
 8023796:	4602      	mov	r2, r0
 8023798:	460b      	mov	r3, r1
 802379a:	ebb2 080a 	subs.w	r8, r2, sl
 802379e:	eb63 090b 	sbc.w	r9, r3, fp
 80237a2:	f04f 0200 	mov.w	r2, #0
 80237a6:	f04f 0300 	mov.w	r3, #0
 80237aa:	ea4f 1389 	mov.w	r3, r9, lsl #6
 80237ae:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 80237b2:	ea4f 1288 	mov.w	r2, r8, lsl #6
 80237b6:	ebb2 0408 	subs.w	r4, r2, r8
 80237ba:	eb63 0509 	sbc.w	r5, r3, r9
 80237be:	f04f 0200 	mov.w	r2, #0
 80237c2:	f04f 0300 	mov.w	r3, #0
 80237c6:	00eb      	lsls	r3, r5, #3
 80237c8:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80237cc:	00e2      	lsls	r2, r4, #3
 80237ce:	4614      	mov	r4, r2
 80237d0:	461d      	mov	r5, r3
 80237d2:	eb14 030a 	adds.w	r3, r4, sl
 80237d6:	603b      	str	r3, [r7, #0]
 80237d8:	eb45 030b 	adc.w	r3, r5, fp
 80237dc:	607b      	str	r3, [r7, #4]
 80237de:	f04f 0200 	mov.w	r2, #0
 80237e2:	f04f 0300 	mov.w	r3, #0
 80237e6:	e9d7 4500 	ldrd	r4, r5, [r7]
 80237ea:	4629      	mov	r1, r5
 80237ec:	028b      	lsls	r3, r1, #10
 80237ee:	4621      	mov	r1, r4
 80237f0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80237f4:	4621      	mov	r1, r4
 80237f6:	028a      	lsls	r2, r1, #10
 80237f8:	4610      	mov	r0, r2
 80237fa:	4619      	mov	r1, r3
 80237fc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80237fe:	2200      	movs	r2, #0
 8023800:	60bb      	str	r3, [r7, #8]
 8023802:	60fa      	str	r2, [r7, #12]
 8023804:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8023808:	f7fc fd3a 	bl	8020280 <__aeabi_uldivmod>
 802380c:	4602      	mov	r2, r0
 802380e:	460b      	mov	r3, r1
 8023810:	4613      	mov	r3, r2
 8023812:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8023814:	4b0b      	ldr	r3, [pc, #44]	; (8023844 <HAL_RCC_GetSysClockFreq+0x180>)
 8023816:	685b      	ldr	r3, [r3, #4]
 8023818:	0c1b      	lsrs	r3, r3, #16
 802381a:	f003 0303 	and.w	r3, r3, #3
 802381e:	3301      	adds	r3, #1
 8023820:	005b      	lsls	r3, r3, #1
 8023822:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8023824:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8023826:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8023828:	fbb2 f3f3 	udiv	r3, r2, r3
 802382c:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 802382e:	e002      	b.n	8023836 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8023830:	4b05      	ldr	r3, [pc, #20]	; (8023848 <HAL_RCC_GetSysClockFreq+0x184>)
 8023832:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8023834:	bf00      	nop
    }
  }
  return sysclockfreq;
 8023836:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8023838:	4618      	mov	r0, r3
 802383a:	3740      	adds	r7, #64	; 0x40
 802383c:	46bd      	mov	sp, r7
 802383e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8023842:	bf00      	nop
 8023844:	40023800 	.word	0x40023800
 8023848:	00f42400 	.word	0x00f42400
 802384c:	02faf080 	.word	0x02faf080

08023850 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8023850:	b480      	push	{r7}
 8023852:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8023854:	4b03      	ldr	r3, [pc, #12]	; (8023864 <HAL_RCC_GetHCLKFreq+0x14>)
 8023856:	681b      	ldr	r3, [r3, #0]
}
 8023858:	4618      	mov	r0, r3
 802385a:	46bd      	mov	sp, r7
 802385c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8023860:	4770      	bx	lr
 8023862:	bf00      	nop
 8023864:	20000000 	.word	0x20000000

08023868 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8023868:	b580      	push	{r7, lr}
 802386a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 802386c:	f7ff fff0 	bl	8023850 <HAL_RCC_GetHCLKFreq>
 8023870:	4602      	mov	r2, r0
 8023872:	4b05      	ldr	r3, [pc, #20]	; (8023888 <HAL_RCC_GetPCLK1Freq+0x20>)
 8023874:	689b      	ldr	r3, [r3, #8]
 8023876:	0a9b      	lsrs	r3, r3, #10
 8023878:	f003 0307 	and.w	r3, r3, #7
 802387c:	4903      	ldr	r1, [pc, #12]	; (802388c <HAL_RCC_GetPCLK1Freq+0x24>)
 802387e:	5ccb      	ldrb	r3, [r1, r3]
 8023880:	fa22 f303 	lsr.w	r3, r2, r3
}
 8023884:	4618      	mov	r0, r3
 8023886:	bd80      	pop	{r7, pc}
 8023888:	40023800 	.word	0x40023800
 802388c:	0803aa64 	.word	0x0803aa64

08023890 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8023890:	b480      	push	{r7}
 8023892:	b083      	sub	sp, #12
 8023894:	af00      	add	r7, sp, #0
 8023896:	6078      	str	r0, [r7, #4]
 8023898:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 802389a:	687b      	ldr	r3, [r7, #4]
 802389c:	220f      	movs	r2, #15
 802389e:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80238a0:	4b12      	ldr	r3, [pc, #72]	; (80238ec <HAL_RCC_GetClockConfig+0x5c>)
 80238a2:	689b      	ldr	r3, [r3, #8]
 80238a4:	f003 0203 	and.w	r2, r3, #3
 80238a8:	687b      	ldr	r3, [r7, #4]
 80238aa:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80238ac:	4b0f      	ldr	r3, [pc, #60]	; (80238ec <HAL_RCC_GetClockConfig+0x5c>)
 80238ae:	689b      	ldr	r3, [r3, #8]
 80238b0:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80238b4:	687b      	ldr	r3, [r7, #4]
 80238b6:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80238b8:	4b0c      	ldr	r3, [pc, #48]	; (80238ec <HAL_RCC_GetClockConfig+0x5c>)
 80238ba:	689b      	ldr	r3, [r3, #8]
 80238bc:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80238c0:	687b      	ldr	r3, [r7, #4]
 80238c2:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 80238c4:	4b09      	ldr	r3, [pc, #36]	; (80238ec <HAL_RCC_GetClockConfig+0x5c>)
 80238c6:	689b      	ldr	r3, [r3, #8]
 80238c8:	08db      	lsrs	r3, r3, #3
 80238ca:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80238ce:	687b      	ldr	r3, [r7, #4]
 80238d0:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80238d2:	4b07      	ldr	r3, [pc, #28]	; (80238f0 <HAL_RCC_GetClockConfig+0x60>)
 80238d4:	681b      	ldr	r3, [r3, #0]
 80238d6:	f003 0207 	and.w	r2, r3, #7
 80238da:	683b      	ldr	r3, [r7, #0]
 80238dc:	601a      	str	r2, [r3, #0]
}
 80238de:	bf00      	nop
 80238e0:	370c      	adds	r7, #12
 80238e2:	46bd      	mov	sp, r7
 80238e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80238e8:	4770      	bx	lr
 80238ea:	bf00      	nop
 80238ec:	40023800 	.word	0x40023800
 80238f0:	40023c00 	.word	0x40023c00

080238f4 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80238f4:	b580      	push	{r7, lr}
 80238f6:	b086      	sub	sp, #24
 80238f8:	af00      	add	r7, sp, #0
 80238fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80238fc:	2300      	movs	r3, #0
 80238fe:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8023900:	2300      	movs	r3, #0
 8023902:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8023904:	687b      	ldr	r3, [r7, #4]
 8023906:	681b      	ldr	r3, [r3, #0]
 8023908:	f003 0301 	and.w	r3, r3, #1
 802390c:	2b00      	cmp	r3, #0
 802390e:	d105      	bne.n	802391c <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8023910:	687b      	ldr	r3, [r7, #4]
 8023912:	681b      	ldr	r3, [r3, #0]
 8023914:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8023918:	2b00      	cmp	r3, #0
 802391a:	d035      	beq.n	8023988 <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 802391c:	4b62      	ldr	r3, [pc, #392]	; (8023aa8 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 802391e:	2200      	movs	r2, #0
 8023920:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8023922:	f7fd fe17 	bl	8021554 <HAL_GetTick>
 8023926:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8023928:	e008      	b.n	802393c <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 802392a:	f7fd fe13 	bl	8021554 <HAL_GetTick>
 802392e:	4602      	mov	r2, r0
 8023930:	697b      	ldr	r3, [r7, #20]
 8023932:	1ad3      	subs	r3, r2, r3
 8023934:	2b02      	cmp	r3, #2
 8023936:	d901      	bls.n	802393c <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8023938:	2303      	movs	r3, #3
 802393a:	e0b0      	b.n	8023a9e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 802393c:	4b5b      	ldr	r3, [pc, #364]	; (8023aac <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 802393e:	681b      	ldr	r3, [r3, #0]
 8023940:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8023944:	2b00      	cmp	r3, #0
 8023946:	d1f0      	bne.n	802392a <HAL_RCCEx_PeriphCLKConfig+0x36>
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8023948:	687b      	ldr	r3, [r7, #4]
 802394a:	685b      	ldr	r3, [r3, #4]
 802394c:	019a      	lsls	r2, r3, #6
 802394e:	687b      	ldr	r3, [r7, #4]
 8023950:	689b      	ldr	r3, [r3, #8]
 8023952:	071b      	lsls	r3, r3, #28
 8023954:	4955      	ldr	r1, [pc, #340]	; (8023aac <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8023956:	4313      	orrs	r3, r2
 8023958:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 802395c:	4b52      	ldr	r3, [pc, #328]	; (8023aa8 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 802395e:	2201      	movs	r2, #1
 8023960:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8023962:	f7fd fdf7 	bl	8021554 <HAL_GetTick>
 8023966:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8023968:	e008      	b.n	802397c <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 802396a:	f7fd fdf3 	bl	8021554 <HAL_GetTick>
 802396e:	4602      	mov	r2, r0
 8023970:	697b      	ldr	r3, [r7, #20]
 8023972:	1ad3      	subs	r3, r2, r3
 8023974:	2b02      	cmp	r3, #2
 8023976:	d901      	bls.n	802397c <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8023978:	2303      	movs	r3, #3
 802397a:	e090      	b.n	8023a9e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 802397c:	4b4b      	ldr	r3, [pc, #300]	; (8023aac <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 802397e:	681b      	ldr	r3, [r3, #0]
 8023980:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8023984:	2b00      	cmp	r3, #0
 8023986:	d0f0      	beq.n	802396a <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8023988:	687b      	ldr	r3, [r7, #4]
 802398a:	681b      	ldr	r3, [r3, #0]
 802398c:	f003 0302 	and.w	r3, r3, #2
 8023990:	2b00      	cmp	r3, #0
 8023992:	f000 8083 	beq.w	8023a9c <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8023996:	2300      	movs	r3, #0
 8023998:	60fb      	str	r3, [r7, #12]
 802399a:	4b44      	ldr	r3, [pc, #272]	; (8023aac <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 802399c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 802399e:	4a43      	ldr	r2, [pc, #268]	; (8023aac <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80239a0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80239a4:	6413      	str	r3, [r2, #64]	; 0x40
 80239a6:	4b41      	ldr	r3, [pc, #260]	; (8023aac <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80239a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80239aa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80239ae:	60fb      	str	r3, [r7, #12]
 80239b0:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 80239b2:	4b3f      	ldr	r3, [pc, #252]	; (8023ab0 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80239b4:	681b      	ldr	r3, [r3, #0]
 80239b6:	4a3e      	ldr	r2, [pc, #248]	; (8023ab0 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80239b8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80239bc:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80239be:	f7fd fdc9 	bl	8021554 <HAL_GetTick>
 80239c2:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 80239c4:	e008      	b.n	80239d8 <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 80239c6:	f7fd fdc5 	bl	8021554 <HAL_GetTick>
 80239ca:	4602      	mov	r2, r0
 80239cc:	697b      	ldr	r3, [r7, #20]
 80239ce:	1ad3      	subs	r3, r2, r3
 80239d0:	2b02      	cmp	r3, #2
 80239d2:	d901      	bls.n	80239d8 <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 80239d4:	2303      	movs	r3, #3
 80239d6:	e062      	b.n	8023a9e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 80239d8:	4b35      	ldr	r3, [pc, #212]	; (8023ab0 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80239da:	681b      	ldr	r3, [r3, #0]
 80239dc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80239e0:	2b00      	cmp	r3, #0
 80239e2:	d0f0      	beq.n	80239c6 <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80239e4:	4b31      	ldr	r3, [pc, #196]	; (8023aac <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80239e6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80239e8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80239ec:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80239ee:	693b      	ldr	r3, [r7, #16]
 80239f0:	2b00      	cmp	r3, #0
 80239f2:	d02f      	beq.n	8023a54 <HAL_RCCEx_PeriphCLKConfig+0x160>
 80239f4:	687b      	ldr	r3, [r7, #4]
 80239f6:	68db      	ldr	r3, [r3, #12]
 80239f8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80239fc:	693a      	ldr	r2, [r7, #16]
 80239fe:	429a      	cmp	r2, r3
 8023a00:	d028      	beq.n	8023a54 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8023a02:	4b2a      	ldr	r3, [pc, #168]	; (8023aac <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8023a04:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8023a06:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8023a0a:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8023a0c:	4b29      	ldr	r3, [pc, #164]	; (8023ab4 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8023a0e:	2201      	movs	r2, #1
 8023a10:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8023a12:	4b28      	ldr	r3, [pc, #160]	; (8023ab4 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8023a14:	2200      	movs	r2, #0
 8023a16:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8023a18:	4a24      	ldr	r2, [pc, #144]	; (8023aac <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8023a1a:	693b      	ldr	r3, [r7, #16]
 8023a1c:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8023a1e:	4b23      	ldr	r3, [pc, #140]	; (8023aac <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8023a20:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8023a22:	f003 0301 	and.w	r3, r3, #1
 8023a26:	2b01      	cmp	r3, #1
 8023a28:	d114      	bne.n	8023a54 <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8023a2a:	f7fd fd93 	bl	8021554 <HAL_GetTick>
 8023a2e:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8023a30:	e00a      	b.n	8023a48 <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8023a32:	f7fd fd8f 	bl	8021554 <HAL_GetTick>
 8023a36:	4602      	mov	r2, r0
 8023a38:	697b      	ldr	r3, [r7, #20]
 8023a3a:	1ad3      	subs	r3, r2, r3
 8023a3c:	f241 3288 	movw	r2, #5000	; 0x1388
 8023a40:	4293      	cmp	r3, r2
 8023a42:	d901      	bls.n	8023a48 <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 8023a44:	2303      	movs	r3, #3
 8023a46:	e02a      	b.n	8023a9e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8023a48:	4b18      	ldr	r3, [pc, #96]	; (8023aac <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8023a4a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8023a4c:	f003 0302 	and.w	r3, r3, #2
 8023a50:	2b00      	cmp	r3, #0
 8023a52:	d0ee      	beq.n	8023a32 <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8023a54:	687b      	ldr	r3, [r7, #4]
 8023a56:	68db      	ldr	r3, [r3, #12]
 8023a58:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8023a5c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8023a60:	d10d      	bne.n	8023a7e <HAL_RCCEx_PeriphCLKConfig+0x18a>
 8023a62:	4b12      	ldr	r3, [pc, #72]	; (8023aac <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8023a64:	689b      	ldr	r3, [r3, #8]
 8023a66:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8023a6a:	687b      	ldr	r3, [r7, #4]
 8023a6c:	68db      	ldr	r3, [r3, #12]
 8023a6e:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8023a72:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8023a76:	490d      	ldr	r1, [pc, #52]	; (8023aac <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8023a78:	4313      	orrs	r3, r2
 8023a7a:	608b      	str	r3, [r1, #8]
 8023a7c:	e005      	b.n	8023a8a <HAL_RCCEx_PeriphCLKConfig+0x196>
 8023a7e:	4b0b      	ldr	r3, [pc, #44]	; (8023aac <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8023a80:	689b      	ldr	r3, [r3, #8]
 8023a82:	4a0a      	ldr	r2, [pc, #40]	; (8023aac <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8023a84:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8023a88:	6093      	str	r3, [r2, #8]
 8023a8a:	4b08      	ldr	r3, [pc, #32]	; (8023aac <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8023a8c:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8023a8e:	687b      	ldr	r3, [r7, #4]
 8023a90:	68db      	ldr	r3, [r3, #12]
 8023a92:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8023a96:	4905      	ldr	r1, [pc, #20]	; (8023aac <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8023a98:	4313      	orrs	r3, r2
 8023a9a:	670b      	str	r3, [r1, #112]	; 0x70
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8023a9c:	2300      	movs	r3, #0
}
 8023a9e:	4618      	mov	r0, r3
 8023aa0:	3718      	adds	r7, #24
 8023aa2:	46bd      	mov	sp, r7
 8023aa4:	bd80      	pop	{r7, pc}
 8023aa6:	bf00      	nop
 8023aa8:	42470068 	.word	0x42470068
 8023aac:	40023800 	.word	0x40023800
 8023ab0:	40007000 	.word	0x40007000
 8023ab4:	42470e40 	.word	0x42470e40

08023ab8 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8023ab8:	b580      	push	{r7, lr}
 8023aba:	b084      	sub	sp, #16
 8023abc:	af00      	add	r7, sp, #0
 8023abe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8023ac0:	2301      	movs	r3, #1
 8023ac2:	73fb      	strb	r3, [r7, #15]

  /* Check RTC handler validity */
  if (hrtc == NULL)
 8023ac4:	687b      	ldr	r3, [r7, #4]
 8023ac6:	2b00      	cmp	r3, #0
 8023ac8:	d101      	bne.n	8023ace <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 8023aca:	2301      	movs	r3, #1
 8023acc:	e066      	b.n	8023b9c <HAL_RTC_Init+0xe4>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else /* USE_HAL_RTC_REGISTER_CALLBACKS */
  if (hrtc->State == HAL_RTC_STATE_RESET)
 8023ace:	687b      	ldr	r3, [r7, #4]
 8023ad0:	7f5b      	ldrb	r3, [r3, #29]
 8023ad2:	b2db      	uxtb	r3, r3
 8023ad4:	2b00      	cmp	r3, #0
 8023ad6:	d105      	bne.n	8023ae4 <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8023ad8:	687b      	ldr	r3, [r7, #4]
 8023ada:	2200      	movs	r2, #0
 8023adc:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8023ade:	6878      	ldr	r0, [r7, #4]
 8023ae0:	f7fc ff40 	bl	8020964 <HAL_RTC_MspInit>
  }
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8023ae4:	687b      	ldr	r3, [r7, #4]
 8023ae6:	2202      	movs	r2, #2
 8023ae8:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8023aea:	687b      	ldr	r3, [r7, #4]
 8023aec:	681b      	ldr	r3, [r3, #0]
 8023aee:	22ca      	movs	r2, #202	; 0xca
 8023af0:	625a      	str	r2, [r3, #36]	; 0x24
 8023af2:	687b      	ldr	r3, [r7, #4]
 8023af4:	681b      	ldr	r3, [r3, #0]
 8023af6:	2253      	movs	r2, #83	; 0x53
 8023af8:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8023afa:	6878      	ldr	r0, [r7, #4]
 8023afc:	f000 f87a 	bl	8023bf4 <RTC_EnterInitMode>
 8023b00:	4603      	mov	r3, r0
 8023b02:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 8023b04:	7bfb      	ldrb	r3, [r7, #15]
 8023b06:	2b00      	cmp	r3, #0
 8023b08:	d12c      	bne.n	8023b64 <HAL_RTC_Init+0xac>
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8023b0a:	687b      	ldr	r3, [r7, #4]
 8023b0c:	681b      	ldr	r3, [r3, #0]
 8023b0e:	689b      	ldr	r3, [r3, #8]
 8023b10:	687a      	ldr	r2, [r7, #4]
 8023b12:	6812      	ldr	r2, [r2, #0]
 8023b14:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8023b18:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8023b1c:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8023b1e:	687b      	ldr	r3, [r7, #4]
 8023b20:	681b      	ldr	r3, [r3, #0]
 8023b22:	6899      	ldr	r1, [r3, #8]
 8023b24:	687b      	ldr	r3, [r7, #4]
 8023b26:	685a      	ldr	r2, [r3, #4]
 8023b28:	687b      	ldr	r3, [r7, #4]
 8023b2a:	691b      	ldr	r3, [r3, #16]
 8023b2c:	431a      	orrs	r2, r3
 8023b2e:	687b      	ldr	r3, [r7, #4]
 8023b30:	695b      	ldr	r3, [r3, #20]
 8023b32:	431a      	orrs	r2, r3
 8023b34:	687b      	ldr	r3, [r7, #4]
 8023b36:	681b      	ldr	r3, [r3, #0]
 8023b38:	430a      	orrs	r2, r1
 8023b3a:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8023b3c:	687b      	ldr	r3, [r7, #4]
 8023b3e:	681b      	ldr	r3, [r3, #0]
 8023b40:	687a      	ldr	r2, [r7, #4]
 8023b42:	68d2      	ldr	r2, [r2, #12]
 8023b44:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 8023b46:	687b      	ldr	r3, [r7, #4]
 8023b48:	681b      	ldr	r3, [r3, #0]
 8023b4a:	6919      	ldr	r1, [r3, #16]
 8023b4c:	687b      	ldr	r3, [r7, #4]
 8023b4e:	689b      	ldr	r3, [r3, #8]
 8023b50:	041a      	lsls	r2, r3, #16
 8023b52:	687b      	ldr	r3, [r7, #4]
 8023b54:	681b      	ldr	r3, [r3, #0]
 8023b56:	430a      	orrs	r2, r1
 8023b58:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8023b5a:	6878      	ldr	r0, [r7, #4]
 8023b5c:	f000 f881 	bl	8023c62 <RTC_ExitInitMode>
 8023b60:	4603      	mov	r3, r0
 8023b62:	73fb      	strb	r3, [r7, #15]
  }

  if (status == HAL_OK)
 8023b64:	7bfb      	ldrb	r3, [r7, #15]
 8023b66:	2b00      	cmp	r3, #0
 8023b68:	d113      	bne.n	8023b92 <HAL_RTC_Init+0xda>
  {
    hrtc->Instance->TAFCR &= (uint32_t)~RTC_OUTPUT_TYPE_PUSHPULL;
 8023b6a:	687b      	ldr	r3, [r7, #4]
 8023b6c:	681b      	ldr	r3, [r3, #0]
 8023b6e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8023b70:	687b      	ldr	r3, [r7, #4]
 8023b72:	681b      	ldr	r3, [r3, #0]
 8023b74:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8023b78:	641a      	str	r2, [r3, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 8023b7a:	687b      	ldr	r3, [r7, #4]
 8023b7c:	681b      	ldr	r3, [r3, #0]
 8023b7e:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8023b80:	687b      	ldr	r3, [r7, #4]
 8023b82:	699a      	ldr	r2, [r3, #24]
 8023b84:	687b      	ldr	r3, [r7, #4]
 8023b86:	681b      	ldr	r3, [r3, #0]
 8023b88:	430a      	orrs	r2, r1
 8023b8a:	641a      	str	r2, [r3, #64]	; 0x40

    hrtc->State = HAL_RTC_STATE_READY;
 8023b8c:	687b      	ldr	r3, [r7, #4]
 8023b8e:	2201      	movs	r2, #1
 8023b90:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8023b92:	687b      	ldr	r3, [r7, #4]
 8023b94:	681b      	ldr	r3, [r3, #0]
 8023b96:	22ff      	movs	r2, #255	; 0xff
 8023b98:	625a      	str	r2, [r3, #36]	; 0x24

  return status;
 8023b9a:	7bfb      	ldrb	r3, [r7, #15]
}
 8023b9c:	4618      	mov	r0, r3
 8023b9e:	3710      	adds	r7, #16
 8023ba0:	46bd      	mov	sp, r7
 8023ba2:	bd80      	pop	{r7, pc}

08023ba4 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8023ba4:	b580      	push	{r7, lr}
 8023ba6:	b084      	sub	sp, #16
 8023ba8:	af00      	add	r7, sp, #0
 8023baa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8023bac:	2300      	movs	r3, #0
 8023bae:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8023bb0:	687b      	ldr	r3, [r7, #4]
 8023bb2:	681b      	ldr	r3, [r3, #0]
 8023bb4:	68da      	ldr	r2, [r3, #12]
 8023bb6:	687b      	ldr	r3, [r7, #4]
 8023bb8:	681b      	ldr	r3, [r3, #0]
 8023bba:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8023bbe:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 8023bc0:	f7fd fcc8 	bl	8021554 <HAL_GetTick>
 8023bc4:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8023bc6:	e009      	b.n	8023bdc <HAL_RTC_WaitForSynchro+0x38>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8023bc8:	f7fd fcc4 	bl	8021554 <HAL_GetTick>
 8023bcc:	4602      	mov	r2, r0
 8023bce:	68fb      	ldr	r3, [r7, #12]
 8023bd0:	1ad3      	subs	r3, r2, r3
 8023bd2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8023bd6:	d901      	bls.n	8023bdc <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 8023bd8:	2303      	movs	r3, #3
 8023bda:	e007      	b.n	8023bec <HAL_RTC_WaitForSynchro+0x48>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8023bdc:	687b      	ldr	r3, [r7, #4]
 8023bde:	681b      	ldr	r3, [r3, #0]
 8023be0:	68db      	ldr	r3, [r3, #12]
 8023be2:	f003 0320 	and.w	r3, r3, #32
 8023be6:	2b00      	cmp	r3, #0
 8023be8:	d0ee      	beq.n	8023bc8 <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 8023bea:	2300      	movs	r3, #0
}
 8023bec:	4618      	mov	r0, r3
 8023bee:	3710      	adds	r7, #16
 8023bf0:	46bd      	mov	sp, r7
 8023bf2:	bd80      	pop	{r7, pc}

08023bf4 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8023bf4:	b580      	push	{r7, lr}
 8023bf6:	b084      	sub	sp, #16
 8023bf8:	af00      	add	r7, sp, #0
 8023bfa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8023bfc:	2300      	movs	r3, #0
 8023bfe:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8023c00:	2300      	movs	r3, #0
 8023c02:	73fb      	strb	r3, [r7, #15]

  /* Check that Initialization mode is not already set */
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 8023c04:	687b      	ldr	r3, [r7, #4]
 8023c06:	681b      	ldr	r3, [r3, #0]
 8023c08:	68db      	ldr	r3, [r3, #12]
 8023c0a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8023c0e:	2b00      	cmp	r3, #0
 8023c10:	d122      	bne.n	8023c58 <RTC_EnterInitMode+0x64>
  {
    /* Set INIT bit to enter Initialization mode */
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8023c12:	687b      	ldr	r3, [r7, #4]
 8023c14:	681b      	ldr	r3, [r3, #0]
 8023c16:	68da      	ldr	r2, [r3, #12]
 8023c18:	687b      	ldr	r3, [r7, #4]
 8023c1a:	681b      	ldr	r3, [r3, #0]
 8023c1c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8023c20:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8023c22:	f7fd fc97 	bl	8021554 <HAL_GetTick>
 8023c26:	60b8      	str	r0, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8023c28:	e00c      	b.n	8023c44 <RTC_EnterInitMode+0x50>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8023c2a:	f7fd fc93 	bl	8021554 <HAL_GetTick>
 8023c2e:	4602      	mov	r2, r0
 8023c30:	68bb      	ldr	r3, [r7, #8]
 8023c32:	1ad3      	subs	r3, r2, r3
 8023c34:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8023c38:	d904      	bls.n	8023c44 <RTC_EnterInitMode+0x50>
      {
        /* Set RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 8023c3a:	687b      	ldr	r3, [r7, #4]
 8023c3c:	2204      	movs	r2, #4
 8023c3e:	775a      	strb	r2, [r3, #29]
        status = HAL_ERROR;
 8023c40:	2301      	movs	r3, #1
 8023c42:	73fb      	strb	r3, [r7, #15]
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8023c44:	687b      	ldr	r3, [r7, #4]
 8023c46:	681b      	ldr	r3, [r3, #0]
 8023c48:	68db      	ldr	r3, [r3, #12]
 8023c4a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8023c4e:	2b00      	cmp	r3, #0
 8023c50:	d102      	bne.n	8023c58 <RTC_EnterInitMode+0x64>
 8023c52:	7bfb      	ldrb	r3, [r7, #15]
 8023c54:	2b01      	cmp	r3, #1
 8023c56:	d1e8      	bne.n	8023c2a <RTC_EnterInitMode+0x36>
      }
    }
  }

  return status;
 8023c58:	7bfb      	ldrb	r3, [r7, #15]
}
 8023c5a:	4618      	mov	r0, r3
 8023c5c:	3710      	adds	r7, #16
 8023c5e:	46bd      	mov	sp, r7
 8023c60:	bd80      	pop	{r7, pc}

08023c62 <RTC_ExitInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8023c62:	b580      	push	{r7, lr}
 8023c64:	b084      	sub	sp, #16
 8023c66:	af00      	add	r7, sp, #0
 8023c68:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8023c6a:	2300      	movs	r3, #0
 8023c6c:	73fb      	strb	r3, [r7, #15]

  /* Clear INIT bit to exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8023c6e:	687b      	ldr	r3, [r7, #4]
 8023c70:	681b      	ldr	r3, [r3, #0]
 8023c72:	68da      	ldr	r2, [r3, #12]
 8023c74:	687b      	ldr	r3, [r7, #4]
 8023c76:	681b      	ldr	r3, [r3, #0]
 8023c78:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8023c7c:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 8023c7e:	687b      	ldr	r3, [r7, #4]
 8023c80:	681b      	ldr	r3, [r3, #0]
 8023c82:	689b      	ldr	r3, [r3, #8]
 8023c84:	f003 0320 	and.w	r3, r3, #32
 8023c88:	2b00      	cmp	r3, #0
 8023c8a:	d10a      	bne.n	8023ca2 <RTC_ExitInitMode+0x40>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8023c8c:	6878      	ldr	r0, [r7, #4]
 8023c8e:	f7ff ff89 	bl	8023ba4 <HAL_RTC_WaitForSynchro>
 8023c92:	4603      	mov	r3, r0
 8023c94:	2b00      	cmp	r3, #0
 8023c96:	d004      	beq.n	8023ca2 <RTC_ExitInitMode+0x40>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 8023c98:	687b      	ldr	r3, [r7, #4]
 8023c9a:	2204      	movs	r2, #4
 8023c9c:	775a      	strb	r2, [r3, #29]
      status = HAL_ERROR;
 8023c9e:	2301      	movs	r3, #1
 8023ca0:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 8023ca2:	7bfb      	ldrb	r3, [r7, #15]
}
 8023ca4:	4618      	mov	r0, r3
 8023ca6:	3710      	adds	r7, #16
 8023ca8:	46bd      	mov	sp, r7
 8023caa:	bd80      	pop	{r7, pc}

08023cac <HAL_RTCEx_BKUPWrite>:
  *                                 to specify the register.
  * @param  Data Data to be written in the specified RTC Backup data register.
  * @retval None
  */
void HAL_RTCEx_BKUPWrite(RTC_HandleTypeDef *hrtc, uint32_t BackupRegister, uint32_t Data)
{
 8023cac:	b480      	push	{r7}
 8023cae:	b087      	sub	sp, #28
 8023cb0:	af00      	add	r7, sp, #0
 8023cb2:	60f8      	str	r0, [r7, #12]
 8023cb4:	60b9      	str	r1, [r7, #8]
 8023cb6:	607a      	str	r2, [r7, #4]
  uint32_t tmp = 0U;
 8023cb8:	2300      	movs	r3, #0
 8023cba:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t) & (hrtc->Instance->BKP0R);
 8023cbc:	68fb      	ldr	r3, [r7, #12]
 8023cbe:	681b      	ldr	r3, [r3, #0]
 8023cc0:	3350      	adds	r3, #80	; 0x50
 8023cc2:	617b      	str	r3, [r7, #20]
  tmp += (BackupRegister * 4U);
 8023cc4:	68bb      	ldr	r3, [r7, #8]
 8023cc6:	009b      	lsls	r3, r3, #2
 8023cc8:	697a      	ldr	r2, [r7, #20]
 8023cca:	4413      	add	r3, r2
 8023ccc:	617b      	str	r3, [r7, #20]

  /* Write the specified register */
  *(__IO uint32_t *)tmp = (uint32_t)Data;
 8023cce:	697b      	ldr	r3, [r7, #20]
 8023cd0:	687a      	ldr	r2, [r7, #4]
 8023cd2:	601a      	str	r2, [r3, #0]
}
 8023cd4:	bf00      	nop
 8023cd6:	371c      	adds	r7, #28
 8023cd8:	46bd      	mov	sp, r7
 8023cda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8023cde:	4770      	bx	lr

08023ce0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8023ce0:	b580      	push	{r7, lr}
 8023ce2:	b082      	sub	sp, #8
 8023ce4:	af00      	add	r7, sp, #0
 8023ce6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8023ce8:	687b      	ldr	r3, [r7, #4]
 8023cea:	2b00      	cmp	r3, #0
 8023cec:	d101      	bne.n	8023cf2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8023cee:	2301      	movs	r3, #1
 8023cf0:	e041      	b.n	8023d76 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8023cf2:	687b      	ldr	r3, [r7, #4]
 8023cf4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8023cf8:	b2db      	uxtb	r3, r3
 8023cfa:	2b00      	cmp	r3, #0
 8023cfc:	d106      	bne.n	8023d0c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8023cfe:	687b      	ldr	r3, [r7, #4]
 8023d00:	2200      	movs	r2, #0
 8023d02:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8023d06:	6878      	ldr	r0, [r7, #4]
 8023d08:	f000 f839 	bl	8023d7e <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8023d0c:	687b      	ldr	r3, [r7, #4]
 8023d0e:	2202      	movs	r2, #2
 8023d10:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8023d14:	687b      	ldr	r3, [r7, #4]
 8023d16:	681a      	ldr	r2, [r3, #0]
 8023d18:	687b      	ldr	r3, [r7, #4]
 8023d1a:	3304      	adds	r3, #4
 8023d1c:	4619      	mov	r1, r3
 8023d1e:	4610      	mov	r0, r2
 8023d20:	f000 f9d8 	bl	80240d4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8023d24:	687b      	ldr	r3, [r7, #4]
 8023d26:	2201      	movs	r2, #1
 8023d28:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8023d2c:	687b      	ldr	r3, [r7, #4]
 8023d2e:	2201      	movs	r2, #1
 8023d30:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8023d34:	687b      	ldr	r3, [r7, #4]
 8023d36:	2201      	movs	r2, #1
 8023d38:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8023d3c:	687b      	ldr	r3, [r7, #4]
 8023d3e:	2201      	movs	r2, #1
 8023d40:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8023d44:	687b      	ldr	r3, [r7, #4]
 8023d46:	2201      	movs	r2, #1
 8023d48:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8023d4c:	687b      	ldr	r3, [r7, #4]
 8023d4e:	2201      	movs	r2, #1
 8023d50:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8023d54:	687b      	ldr	r3, [r7, #4]
 8023d56:	2201      	movs	r2, #1
 8023d58:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8023d5c:	687b      	ldr	r3, [r7, #4]
 8023d5e:	2201      	movs	r2, #1
 8023d60:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8023d64:	687b      	ldr	r3, [r7, #4]
 8023d66:	2201      	movs	r2, #1
 8023d68:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8023d6c:	687b      	ldr	r3, [r7, #4]
 8023d6e:	2201      	movs	r2, #1
 8023d70:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8023d74:	2300      	movs	r3, #0
}
 8023d76:	4618      	mov	r0, r3
 8023d78:	3708      	adds	r7, #8
 8023d7a:	46bd      	mov	sp, r7
 8023d7c:	bd80      	pop	{r7, pc}

08023d7e <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8023d7e:	b480      	push	{r7}
 8023d80:	b083      	sub	sp, #12
 8023d82:	af00      	add	r7, sp, #0
 8023d84:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8023d86:	bf00      	nop
 8023d88:	370c      	adds	r7, #12
 8023d8a:	46bd      	mov	sp, r7
 8023d8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8023d90:	4770      	bx	lr
	...

08023d94 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8023d94:	b480      	push	{r7}
 8023d96:	b085      	sub	sp, #20
 8023d98:	af00      	add	r7, sp, #0
 8023d9a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8023d9c:	687b      	ldr	r3, [r7, #4]
 8023d9e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8023da2:	b2db      	uxtb	r3, r3
 8023da4:	2b01      	cmp	r3, #1
 8023da6:	d001      	beq.n	8023dac <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8023da8:	2301      	movs	r3, #1
 8023daa:	e04e      	b.n	8023e4a <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8023dac:	687b      	ldr	r3, [r7, #4]
 8023dae:	2202      	movs	r2, #2
 8023db0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8023db4:	687b      	ldr	r3, [r7, #4]
 8023db6:	681b      	ldr	r3, [r3, #0]
 8023db8:	68da      	ldr	r2, [r3, #12]
 8023dba:	687b      	ldr	r3, [r7, #4]
 8023dbc:	681b      	ldr	r3, [r3, #0]
 8023dbe:	f042 0201 	orr.w	r2, r2, #1
 8023dc2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8023dc4:	687b      	ldr	r3, [r7, #4]
 8023dc6:	681b      	ldr	r3, [r3, #0]
 8023dc8:	4a23      	ldr	r2, [pc, #140]	; (8023e58 <HAL_TIM_Base_Start_IT+0xc4>)
 8023dca:	4293      	cmp	r3, r2
 8023dcc:	d022      	beq.n	8023e14 <HAL_TIM_Base_Start_IT+0x80>
 8023dce:	687b      	ldr	r3, [r7, #4]
 8023dd0:	681b      	ldr	r3, [r3, #0]
 8023dd2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8023dd6:	d01d      	beq.n	8023e14 <HAL_TIM_Base_Start_IT+0x80>
 8023dd8:	687b      	ldr	r3, [r7, #4]
 8023dda:	681b      	ldr	r3, [r3, #0]
 8023ddc:	4a1f      	ldr	r2, [pc, #124]	; (8023e5c <HAL_TIM_Base_Start_IT+0xc8>)
 8023dde:	4293      	cmp	r3, r2
 8023de0:	d018      	beq.n	8023e14 <HAL_TIM_Base_Start_IT+0x80>
 8023de2:	687b      	ldr	r3, [r7, #4]
 8023de4:	681b      	ldr	r3, [r3, #0]
 8023de6:	4a1e      	ldr	r2, [pc, #120]	; (8023e60 <HAL_TIM_Base_Start_IT+0xcc>)
 8023de8:	4293      	cmp	r3, r2
 8023dea:	d013      	beq.n	8023e14 <HAL_TIM_Base_Start_IT+0x80>
 8023dec:	687b      	ldr	r3, [r7, #4]
 8023dee:	681b      	ldr	r3, [r3, #0]
 8023df0:	4a1c      	ldr	r2, [pc, #112]	; (8023e64 <HAL_TIM_Base_Start_IT+0xd0>)
 8023df2:	4293      	cmp	r3, r2
 8023df4:	d00e      	beq.n	8023e14 <HAL_TIM_Base_Start_IT+0x80>
 8023df6:	687b      	ldr	r3, [r7, #4]
 8023df8:	681b      	ldr	r3, [r3, #0]
 8023dfa:	4a1b      	ldr	r2, [pc, #108]	; (8023e68 <HAL_TIM_Base_Start_IT+0xd4>)
 8023dfc:	4293      	cmp	r3, r2
 8023dfe:	d009      	beq.n	8023e14 <HAL_TIM_Base_Start_IT+0x80>
 8023e00:	687b      	ldr	r3, [r7, #4]
 8023e02:	681b      	ldr	r3, [r3, #0]
 8023e04:	4a19      	ldr	r2, [pc, #100]	; (8023e6c <HAL_TIM_Base_Start_IT+0xd8>)
 8023e06:	4293      	cmp	r3, r2
 8023e08:	d004      	beq.n	8023e14 <HAL_TIM_Base_Start_IT+0x80>
 8023e0a:	687b      	ldr	r3, [r7, #4]
 8023e0c:	681b      	ldr	r3, [r3, #0]
 8023e0e:	4a18      	ldr	r2, [pc, #96]	; (8023e70 <HAL_TIM_Base_Start_IT+0xdc>)
 8023e10:	4293      	cmp	r3, r2
 8023e12:	d111      	bne.n	8023e38 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8023e14:	687b      	ldr	r3, [r7, #4]
 8023e16:	681b      	ldr	r3, [r3, #0]
 8023e18:	689b      	ldr	r3, [r3, #8]
 8023e1a:	f003 0307 	and.w	r3, r3, #7
 8023e1e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8023e20:	68fb      	ldr	r3, [r7, #12]
 8023e22:	2b06      	cmp	r3, #6
 8023e24:	d010      	beq.n	8023e48 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8023e26:	687b      	ldr	r3, [r7, #4]
 8023e28:	681b      	ldr	r3, [r3, #0]
 8023e2a:	681a      	ldr	r2, [r3, #0]
 8023e2c:	687b      	ldr	r3, [r7, #4]
 8023e2e:	681b      	ldr	r3, [r3, #0]
 8023e30:	f042 0201 	orr.w	r2, r2, #1
 8023e34:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8023e36:	e007      	b.n	8023e48 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8023e38:	687b      	ldr	r3, [r7, #4]
 8023e3a:	681b      	ldr	r3, [r3, #0]
 8023e3c:	681a      	ldr	r2, [r3, #0]
 8023e3e:	687b      	ldr	r3, [r7, #4]
 8023e40:	681b      	ldr	r3, [r3, #0]
 8023e42:	f042 0201 	orr.w	r2, r2, #1
 8023e46:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8023e48:	2300      	movs	r3, #0
}
 8023e4a:	4618      	mov	r0, r3
 8023e4c:	3714      	adds	r7, #20
 8023e4e:	46bd      	mov	sp, r7
 8023e50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8023e54:	4770      	bx	lr
 8023e56:	bf00      	nop
 8023e58:	40010000 	.word	0x40010000
 8023e5c:	40000400 	.word	0x40000400
 8023e60:	40000800 	.word	0x40000800
 8023e64:	40000c00 	.word	0x40000c00
 8023e68:	40010400 	.word	0x40010400
 8023e6c:	40014000 	.word	0x40014000
 8023e70:	40001800 	.word	0x40001800

08023e74 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8023e74:	b580      	push	{r7, lr}
 8023e76:	b082      	sub	sp, #8
 8023e78:	af00      	add	r7, sp, #0
 8023e7a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8023e7c:	687b      	ldr	r3, [r7, #4]
 8023e7e:	681b      	ldr	r3, [r3, #0]
 8023e80:	691b      	ldr	r3, [r3, #16]
 8023e82:	f003 0302 	and.w	r3, r3, #2
 8023e86:	2b02      	cmp	r3, #2
 8023e88:	d122      	bne.n	8023ed0 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8023e8a:	687b      	ldr	r3, [r7, #4]
 8023e8c:	681b      	ldr	r3, [r3, #0]
 8023e8e:	68db      	ldr	r3, [r3, #12]
 8023e90:	f003 0302 	and.w	r3, r3, #2
 8023e94:	2b02      	cmp	r3, #2
 8023e96:	d11b      	bne.n	8023ed0 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8023e98:	687b      	ldr	r3, [r7, #4]
 8023e9a:	681b      	ldr	r3, [r3, #0]
 8023e9c:	f06f 0202 	mvn.w	r2, #2
 8023ea0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8023ea2:	687b      	ldr	r3, [r7, #4]
 8023ea4:	2201      	movs	r2, #1
 8023ea6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8023ea8:	687b      	ldr	r3, [r7, #4]
 8023eaa:	681b      	ldr	r3, [r3, #0]
 8023eac:	699b      	ldr	r3, [r3, #24]
 8023eae:	f003 0303 	and.w	r3, r3, #3
 8023eb2:	2b00      	cmp	r3, #0
 8023eb4:	d003      	beq.n	8023ebe <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8023eb6:	6878      	ldr	r0, [r7, #4]
 8023eb8:	f000 f8ee 	bl	8024098 <HAL_TIM_IC_CaptureCallback>
 8023ebc:	e005      	b.n	8023eca <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8023ebe:	6878      	ldr	r0, [r7, #4]
 8023ec0:	f000 f8e0 	bl	8024084 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8023ec4:	6878      	ldr	r0, [r7, #4]
 8023ec6:	f000 f8f1 	bl	80240ac <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8023eca:	687b      	ldr	r3, [r7, #4]
 8023ecc:	2200      	movs	r2, #0
 8023ece:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8023ed0:	687b      	ldr	r3, [r7, #4]
 8023ed2:	681b      	ldr	r3, [r3, #0]
 8023ed4:	691b      	ldr	r3, [r3, #16]
 8023ed6:	f003 0304 	and.w	r3, r3, #4
 8023eda:	2b04      	cmp	r3, #4
 8023edc:	d122      	bne.n	8023f24 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8023ede:	687b      	ldr	r3, [r7, #4]
 8023ee0:	681b      	ldr	r3, [r3, #0]
 8023ee2:	68db      	ldr	r3, [r3, #12]
 8023ee4:	f003 0304 	and.w	r3, r3, #4
 8023ee8:	2b04      	cmp	r3, #4
 8023eea:	d11b      	bne.n	8023f24 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8023eec:	687b      	ldr	r3, [r7, #4]
 8023eee:	681b      	ldr	r3, [r3, #0]
 8023ef0:	f06f 0204 	mvn.w	r2, #4
 8023ef4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8023ef6:	687b      	ldr	r3, [r7, #4]
 8023ef8:	2202      	movs	r2, #2
 8023efa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8023efc:	687b      	ldr	r3, [r7, #4]
 8023efe:	681b      	ldr	r3, [r3, #0]
 8023f00:	699b      	ldr	r3, [r3, #24]
 8023f02:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8023f06:	2b00      	cmp	r3, #0
 8023f08:	d003      	beq.n	8023f12 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8023f0a:	6878      	ldr	r0, [r7, #4]
 8023f0c:	f000 f8c4 	bl	8024098 <HAL_TIM_IC_CaptureCallback>
 8023f10:	e005      	b.n	8023f1e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8023f12:	6878      	ldr	r0, [r7, #4]
 8023f14:	f000 f8b6 	bl	8024084 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8023f18:	6878      	ldr	r0, [r7, #4]
 8023f1a:	f000 f8c7 	bl	80240ac <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8023f1e:	687b      	ldr	r3, [r7, #4]
 8023f20:	2200      	movs	r2, #0
 8023f22:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8023f24:	687b      	ldr	r3, [r7, #4]
 8023f26:	681b      	ldr	r3, [r3, #0]
 8023f28:	691b      	ldr	r3, [r3, #16]
 8023f2a:	f003 0308 	and.w	r3, r3, #8
 8023f2e:	2b08      	cmp	r3, #8
 8023f30:	d122      	bne.n	8023f78 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8023f32:	687b      	ldr	r3, [r7, #4]
 8023f34:	681b      	ldr	r3, [r3, #0]
 8023f36:	68db      	ldr	r3, [r3, #12]
 8023f38:	f003 0308 	and.w	r3, r3, #8
 8023f3c:	2b08      	cmp	r3, #8
 8023f3e:	d11b      	bne.n	8023f78 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8023f40:	687b      	ldr	r3, [r7, #4]
 8023f42:	681b      	ldr	r3, [r3, #0]
 8023f44:	f06f 0208 	mvn.w	r2, #8
 8023f48:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8023f4a:	687b      	ldr	r3, [r7, #4]
 8023f4c:	2204      	movs	r2, #4
 8023f4e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8023f50:	687b      	ldr	r3, [r7, #4]
 8023f52:	681b      	ldr	r3, [r3, #0]
 8023f54:	69db      	ldr	r3, [r3, #28]
 8023f56:	f003 0303 	and.w	r3, r3, #3
 8023f5a:	2b00      	cmp	r3, #0
 8023f5c:	d003      	beq.n	8023f66 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8023f5e:	6878      	ldr	r0, [r7, #4]
 8023f60:	f000 f89a 	bl	8024098 <HAL_TIM_IC_CaptureCallback>
 8023f64:	e005      	b.n	8023f72 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8023f66:	6878      	ldr	r0, [r7, #4]
 8023f68:	f000 f88c 	bl	8024084 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8023f6c:	6878      	ldr	r0, [r7, #4]
 8023f6e:	f000 f89d 	bl	80240ac <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8023f72:	687b      	ldr	r3, [r7, #4]
 8023f74:	2200      	movs	r2, #0
 8023f76:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8023f78:	687b      	ldr	r3, [r7, #4]
 8023f7a:	681b      	ldr	r3, [r3, #0]
 8023f7c:	691b      	ldr	r3, [r3, #16]
 8023f7e:	f003 0310 	and.w	r3, r3, #16
 8023f82:	2b10      	cmp	r3, #16
 8023f84:	d122      	bne.n	8023fcc <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8023f86:	687b      	ldr	r3, [r7, #4]
 8023f88:	681b      	ldr	r3, [r3, #0]
 8023f8a:	68db      	ldr	r3, [r3, #12]
 8023f8c:	f003 0310 	and.w	r3, r3, #16
 8023f90:	2b10      	cmp	r3, #16
 8023f92:	d11b      	bne.n	8023fcc <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8023f94:	687b      	ldr	r3, [r7, #4]
 8023f96:	681b      	ldr	r3, [r3, #0]
 8023f98:	f06f 0210 	mvn.w	r2, #16
 8023f9c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8023f9e:	687b      	ldr	r3, [r7, #4]
 8023fa0:	2208      	movs	r2, #8
 8023fa2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8023fa4:	687b      	ldr	r3, [r7, #4]
 8023fa6:	681b      	ldr	r3, [r3, #0]
 8023fa8:	69db      	ldr	r3, [r3, #28]
 8023faa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8023fae:	2b00      	cmp	r3, #0
 8023fb0:	d003      	beq.n	8023fba <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8023fb2:	6878      	ldr	r0, [r7, #4]
 8023fb4:	f000 f870 	bl	8024098 <HAL_TIM_IC_CaptureCallback>
 8023fb8:	e005      	b.n	8023fc6 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8023fba:	6878      	ldr	r0, [r7, #4]
 8023fbc:	f000 f862 	bl	8024084 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8023fc0:	6878      	ldr	r0, [r7, #4]
 8023fc2:	f000 f873 	bl	80240ac <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8023fc6:	687b      	ldr	r3, [r7, #4]
 8023fc8:	2200      	movs	r2, #0
 8023fca:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8023fcc:	687b      	ldr	r3, [r7, #4]
 8023fce:	681b      	ldr	r3, [r3, #0]
 8023fd0:	691b      	ldr	r3, [r3, #16]
 8023fd2:	f003 0301 	and.w	r3, r3, #1
 8023fd6:	2b01      	cmp	r3, #1
 8023fd8:	d10e      	bne.n	8023ff8 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8023fda:	687b      	ldr	r3, [r7, #4]
 8023fdc:	681b      	ldr	r3, [r3, #0]
 8023fde:	68db      	ldr	r3, [r3, #12]
 8023fe0:	f003 0301 	and.w	r3, r3, #1
 8023fe4:	2b01      	cmp	r3, #1
 8023fe6:	d107      	bne.n	8023ff8 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8023fe8:	687b      	ldr	r3, [r7, #4]
 8023fea:	681b      	ldr	r3, [r3, #0]
 8023fec:	f06f 0201 	mvn.w	r2, #1
 8023ff0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8023ff2:	6878      	ldr	r0, [r7, #4]
 8023ff4:	f7fc fc72 	bl	80208dc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8023ff8:	687b      	ldr	r3, [r7, #4]
 8023ffa:	681b      	ldr	r3, [r3, #0]
 8023ffc:	691b      	ldr	r3, [r3, #16]
 8023ffe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8024002:	2b80      	cmp	r3, #128	; 0x80
 8024004:	d10e      	bne.n	8024024 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8024006:	687b      	ldr	r3, [r7, #4]
 8024008:	681b      	ldr	r3, [r3, #0]
 802400a:	68db      	ldr	r3, [r3, #12]
 802400c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8024010:	2b80      	cmp	r3, #128	; 0x80
 8024012:	d107      	bne.n	8024024 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8024014:	687b      	ldr	r3, [r7, #4]
 8024016:	681b      	ldr	r3, [r3, #0]
 8024018:	f06f 0280 	mvn.w	r2, #128	; 0x80
 802401c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 802401e:	6878      	ldr	r0, [r7, #4]
 8024020:	f000 f902 	bl	8024228 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8024024:	687b      	ldr	r3, [r7, #4]
 8024026:	681b      	ldr	r3, [r3, #0]
 8024028:	691b      	ldr	r3, [r3, #16]
 802402a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 802402e:	2b40      	cmp	r3, #64	; 0x40
 8024030:	d10e      	bne.n	8024050 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8024032:	687b      	ldr	r3, [r7, #4]
 8024034:	681b      	ldr	r3, [r3, #0]
 8024036:	68db      	ldr	r3, [r3, #12]
 8024038:	f003 0340 	and.w	r3, r3, #64	; 0x40
 802403c:	2b40      	cmp	r3, #64	; 0x40
 802403e:	d107      	bne.n	8024050 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8024040:	687b      	ldr	r3, [r7, #4]
 8024042:	681b      	ldr	r3, [r3, #0]
 8024044:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8024048:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 802404a:	6878      	ldr	r0, [r7, #4]
 802404c:	f000 f838 	bl	80240c0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8024050:	687b      	ldr	r3, [r7, #4]
 8024052:	681b      	ldr	r3, [r3, #0]
 8024054:	691b      	ldr	r3, [r3, #16]
 8024056:	f003 0320 	and.w	r3, r3, #32
 802405a:	2b20      	cmp	r3, #32
 802405c:	d10e      	bne.n	802407c <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 802405e:	687b      	ldr	r3, [r7, #4]
 8024060:	681b      	ldr	r3, [r3, #0]
 8024062:	68db      	ldr	r3, [r3, #12]
 8024064:	f003 0320 	and.w	r3, r3, #32
 8024068:	2b20      	cmp	r3, #32
 802406a:	d107      	bne.n	802407c <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 802406c:	687b      	ldr	r3, [r7, #4]
 802406e:	681b      	ldr	r3, [r3, #0]
 8024070:	f06f 0220 	mvn.w	r2, #32
 8024074:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8024076:	6878      	ldr	r0, [r7, #4]
 8024078:	f000 f8cc 	bl	8024214 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 802407c:	bf00      	nop
 802407e:	3708      	adds	r7, #8
 8024080:	46bd      	mov	sp, r7
 8024082:	bd80      	pop	{r7, pc}

08024084 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8024084:	b480      	push	{r7}
 8024086:	b083      	sub	sp, #12
 8024088:	af00      	add	r7, sp, #0
 802408a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 802408c:	bf00      	nop
 802408e:	370c      	adds	r7, #12
 8024090:	46bd      	mov	sp, r7
 8024092:	f85d 7b04 	ldr.w	r7, [sp], #4
 8024096:	4770      	bx	lr

08024098 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8024098:	b480      	push	{r7}
 802409a:	b083      	sub	sp, #12
 802409c:	af00      	add	r7, sp, #0
 802409e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80240a0:	bf00      	nop
 80240a2:	370c      	adds	r7, #12
 80240a4:	46bd      	mov	sp, r7
 80240a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80240aa:	4770      	bx	lr

080240ac <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80240ac:	b480      	push	{r7}
 80240ae:	b083      	sub	sp, #12
 80240b0:	af00      	add	r7, sp, #0
 80240b2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80240b4:	bf00      	nop
 80240b6:	370c      	adds	r7, #12
 80240b8:	46bd      	mov	sp, r7
 80240ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80240be:	4770      	bx	lr

080240c0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80240c0:	b480      	push	{r7}
 80240c2:	b083      	sub	sp, #12
 80240c4:	af00      	add	r7, sp, #0
 80240c6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80240c8:	bf00      	nop
 80240ca:	370c      	adds	r7, #12
 80240cc:	46bd      	mov	sp, r7
 80240ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80240d2:	4770      	bx	lr

080240d4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80240d4:	b480      	push	{r7}
 80240d6:	b085      	sub	sp, #20
 80240d8:	af00      	add	r7, sp, #0
 80240da:	6078      	str	r0, [r7, #4]
 80240dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80240de:	687b      	ldr	r3, [r7, #4]
 80240e0:	681b      	ldr	r3, [r3, #0]
 80240e2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80240e4:	687b      	ldr	r3, [r7, #4]
 80240e6:	4a40      	ldr	r2, [pc, #256]	; (80241e8 <TIM_Base_SetConfig+0x114>)
 80240e8:	4293      	cmp	r3, r2
 80240ea:	d013      	beq.n	8024114 <TIM_Base_SetConfig+0x40>
 80240ec:	687b      	ldr	r3, [r7, #4]
 80240ee:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80240f2:	d00f      	beq.n	8024114 <TIM_Base_SetConfig+0x40>
 80240f4:	687b      	ldr	r3, [r7, #4]
 80240f6:	4a3d      	ldr	r2, [pc, #244]	; (80241ec <TIM_Base_SetConfig+0x118>)
 80240f8:	4293      	cmp	r3, r2
 80240fa:	d00b      	beq.n	8024114 <TIM_Base_SetConfig+0x40>
 80240fc:	687b      	ldr	r3, [r7, #4]
 80240fe:	4a3c      	ldr	r2, [pc, #240]	; (80241f0 <TIM_Base_SetConfig+0x11c>)
 8024100:	4293      	cmp	r3, r2
 8024102:	d007      	beq.n	8024114 <TIM_Base_SetConfig+0x40>
 8024104:	687b      	ldr	r3, [r7, #4]
 8024106:	4a3b      	ldr	r2, [pc, #236]	; (80241f4 <TIM_Base_SetConfig+0x120>)
 8024108:	4293      	cmp	r3, r2
 802410a:	d003      	beq.n	8024114 <TIM_Base_SetConfig+0x40>
 802410c:	687b      	ldr	r3, [r7, #4]
 802410e:	4a3a      	ldr	r2, [pc, #232]	; (80241f8 <TIM_Base_SetConfig+0x124>)
 8024110:	4293      	cmp	r3, r2
 8024112:	d108      	bne.n	8024126 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8024114:	68fb      	ldr	r3, [r7, #12]
 8024116:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 802411a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 802411c:	683b      	ldr	r3, [r7, #0]
 802411e:	685b      	ldr	r3, [r3, #4]
 8024120:	68fa      	ldr	r2, [r7, #12]
 8024122:	4313      	orrs	r3, r2
 8024124:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8024126:	687b      	ldr	r3, [r7, #4]
 8024128:	4a2f      	ldr	r2, [pc, #188]	; (80241e8 <TIM_Base_SetConfig+0x114>)
 802412a:	4293      	cmp	r3, r2
 802412c:	d02b      	beq.n	8024186 <TIM_Base_SetConfig+0xb2>
 802412e:	687b      	ldr	r3, [r7, #4]
 8024130:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8024134:	d027      	beq.n	8024186 <TIM_Base_SetConfig+0xb2>
 8024136:	687b      	ldr	r3, [r7, #4]
 8024138:	4a2c      	ldr	r2, [pc, #176]	; (80241ec <TIM_Base_SetConfig+0x118>)
 802413a:	4293      	cmp	r3, r2
 802413c:	d023      	beq.n	8024186 <TIM_Base_SetConfig+0xb2>
 802413e:	687b      	ldr	r3, [r7, #4]
 8024140:	4a2b      	ldr	r2, [pc, #172]	; (80241f0 <TIM_Base_SetConfig+0x11c>)
 8024142:	4293      	cmp	r3, r2
 8024144:	d01f      	beq.n	8024186 <TIM_Base_SetConfig+0xb2>
 8024146:	687b      	ldr	r3, [r7, #4]
 8024148:	4a2a      	ldr	r2, [pc, #168]	; (80241f4 <TIM_Base_SetConfig+0x120>)
 802414a:	4293      	cmp	r3, r2
 802414c:	d01b      	beq.n	8024186 <TIM_Base_SetConfig+0xb2>
 802414e:	687b      	ldr	r3, [r7, #4]
 8024150:	4a29      	ldr	r2, [pc, #164]	; (80241f8 <TIM_Base_SetConfig+0x124>)
 8024152:	4293      	cmp	r3, r2
 8024154:	d017      	beq.n	8024186 <TIM_Base_SetConfig+0xb2>
 8024156:	687b      	ldr	r3, [r7, #4]
 8024158:	4a28      	ldr	r2, [pc, #160]	; (80241fc <TIM_Base_SetConfig+0x128>)
 802415a:	4293      	cmp	r3, r2
 802415c:	d013      	beq.n	8024186 <TIM_Base_SetConfig+0xb2>
 802415e:	687b      	ldr	r3, [r7, #4]
 8024160:	4a27      	ldr	r2, [pc, #156]	; (8024200 <TIM_Base_SetConfig+0x12c>)
 8024162:	4293      	cmp	r3, r2
 8024164:	d00f      	beq.n	8024186 <TIM_Base_SetConfig+0xb2>
 8024166:	687b      	ldr	r3, [r7, #4]
 8024168:	4a26      	ldr	r2, [pc, #152]	; (8024204 <TIM_Base_SetConfig+0x130>)
 802416a:	4293      	cmp	r3, r2
 802416c:	d00b      	beq.n	8024186 <TIM_Base_SetConfig+0xb2>
 802416e:	687b      	ldr	r3, [r7, #4]
 8024170:	4a25      	ldr	r2, [pc, #148]	; (8024208 <TIM_Base_SetConfig+0x134>)
 8024172:	4293      	cmp	r3, r2
 8024174:	d007      	beq.n	8024186 <TIM_Base_SetConfig+0xb2>
 8024176:	687b      	ldr	r3, [r7, #4]
 8024178:	4a24      	ldr	r2, [pc, #144]	; (802420c <TIM_Base_SetConfig+0x138>)
 802417a:	4293      	cmp	r3, r2
 802417c:	d003      	beq.n	8024186 <TIM_Base_SetConfig+0xb2>
 802417e:	687b      	ldr	r3, [r7, #4]
 8024180:	4a23      	ldr	r2, [pc, #140]	; (8024210 <TIM_Base_SetConfig+0x13c>)
 8024182:	4293      	cmp	r3, r2
 8024184:	d108      	bne.n	8024198 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8024186:	68fb      	ldr	r3, [r7, #12]
 8024188:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 802418c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 802418e:	683b      	ldr	r3, [r7, #0]
 8024190:	68db      	ldr	r3, [r3, #12]
 8024192:	68fa      	ldr	r2, [r7, #12]
 8024194:	4313      	orrs	r3, r2
 8024196:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8024198:	68fb      	ldr	r3, [r7, #12]
 802419a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 802419e:	683b      	ldr	r3, [r7, #0]
 80241a0:	695b      	ldr	r3, [r3, #20]
 80241a2:	4313      	orrs	r3, r2
 80241a4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80241a6:	687b      	ldr	r3, [r7, #4]
 80241a8:	68fa      	ldr	r2, [r7, #12]
 80241aa:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80241ac:	683b      	ldr	r3, [r7, #0]
 80241ae:	689a      	ldr	r2, [r3, #8]
 80241b0:	687b      	ldr	r3, [r7, #4]
 80241b2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80241b4:	683b      	ldr	r3, [r7, #0]
 80241b6:	681a      	ldr	r2, [r3, #0]
 80241b8:	687b      	ldr	r3, [r7, #4]
 80241ba:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80241bc:	687b      	ldr	r3, [r7, #4]
 80241be:	4a0a      	ldr	r2, [pc, #40]	; (80241e8 <TIM_Base_SetConfig+0x114>)
 80241c0:	4293      	cmp	r3, r2
 80241c2:	d003      	beq.n	80241cc <TIM_Base_SetConfig+0xf8>
 80241c4:	687b      	ldr	r3, [r7, #4]
 80241c6:	4a0c      	ldr	r2, [pc, #48]	; (80241f8 <TIM_Base_SetConfig+0x124>)
 80241c8:	4293      	cmp	r3, r2
 80241ca:	d103      	bne.n	80241d4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80241cc:	683b      	ldr	r3, [r7, #0]
 80241ce:	691a      	ldr	r2, [r3, #16]
 80241d0:	687b      	ldr	r3, [r7, #4]
 80241d2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80241d4:	687b      	ldr	r3, [r7, #4]
 80241d6:	2201      	movs	r2, #1
 80241d8:	615a      	str	r2, [r3, #20]
}
 80241da:	bf00      	nop
 80241dc:	3714      	adds	r7, #20
 80241de:	46bd      	mov	sp, r7
 80241e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80241e4:	4770      	bx	lr
 80241e6:	bf00      	nop
 80241e8:	40010000 	.word	0x40010000
 80241ec:	40000400 	.word	0x40000400
 80241f0:	40000800 	.word	0x40000800
 80241f4:	40000c00 	.word	0x40000c00
 80241f8:	40010400 	.word	0x40010400
 80241fc:	40014000 	.word	0x40014000
 8024200:	40014400 	.word	0x40014400
 8024204:	40014800 	.word	0x40014800
 8024208:	40001800 	.word	0x40001800
 802420c:	40001c00 	.word	0x40001c00
 8024210:	40002000 	.word	0x40002000

08024214 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8024214:	b480      	push	{r7}
 8024216:	b083      	sub	sp, #12
 8024218:	af00      	add	r7, sp, #0
 802421a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 802421c:	bf00      	nop
 802421e:	370c      	adds	r7, #12
 8024220:	46bd      	mov	sp, r7
 8024222:	f85d 7b04 	ldr.w	r7, [sp], #4
 8024226:	4770      	bx	lr

08024228 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8024228:	b480      	push	{r7}
 802422a:	b083      	sub	sp, #12
 802422c:	af00      	add	r7, sp, #0
 802422e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8024230:	bf00      	nop
 8024232:	370c      	adds	r7, #12
 8024234:	46bd      	mov	sp, r7
 8024236:	f85d 7b04 	ldr.w	r7, [sp], #4
 802423a:	4770      	bx	lr

0802423c <MX_LWIP_Init>:

/**
  * LwIP initialization function
  */
void MX_LWIP_Init(void)
{
 802423c:	b5b0      	push	{r4, r5, r7, lr}
 802423e:	b08c      	sub	sp, #48	; 0x30
 8024240:	af04      	add	r7, sp, #16
  /* IP addresses initialization */
  IP_ADDRESS[0] = 192;
 8024242:	4b96      	ldr	r3, [pc, #600]	; (802449c <MX_LWIP_Init+0x260>)
 8024244:	22c0      	movs	r2, #192	; 0xc0
 8024246:	701a      	strb	r2, [r3, #0]
  IP_ADDRESS[1] = 168;
 8024248:	4b94      	ldr	r3, [pc, #592]	; (802449c <MX_LWIP_Init+0x260>)
 802424a:	22a8      	movs	r2, #168	; 0xa8
 802424c:	705a      	strb	r2, [r3, #1]
  IP_ADDRESS[2] = 50;
 802424e:	4b93      	ldr	r3, [pc, #588]	; (802449c <MX_LWIP_Init+0x260>)
 8024250:	2232      	movs	r2, #50	; 0x32
 8024252:	709a      	strb	r2, [r3, #2]
  IP_ADDRESS[3] = 10;
 8024254:	4b91      	ldr	r3, [pc, #580]	; (802449c <MX_LWIP_Init+0x260>)
 8024256:	220a      	movs	r2, #10
 8024258:	70da      	strb	r2, [r3, #3]
  NETMASK_ADDRESS[0] = 255;
 802425a:	4b91      	ldr	r3, [pc, #580]	; (80244a0 <MX_LWIP_Init+0x264>)
 802425c:	22ff      	movs	r2, #255	; 0xff
 802425e:	701a      	strb	r2, [r3, #0]
  NETMASK_ADDRESS[1] = 255;
 8024260:	4b8f      	ldr	r3, [pc, #572]	; (80244a0 <MX_LWIP_Init+0x264>)
 8024262:	22ff      	movs	r2, #255	; 0xff
 8024264:	705a      	strb	r2, [r3, #1]
  NETMASK_ADDRESS[2] = 255;
 8024266:	4b8e      	ldr	r3, [pc, #568]	; (80244a0 <MX_LWIP_Init+0x264>)
 8024268:	22ff      	movs	r2, #255	; 0xff
 802426a:	709a      	strb	r2, [r3, #2]
  NETMASK_ADDRESS[3] = 0;
 802426c:	4b8c      	ldr	r3, [pc, #560]	; (80244a0 <MX_LWIP_Init+0x264>)
 802426e:	2200      	movs	r2, #0
 8024270:	70da      	strb	r2, [r3, #3]
  GATEWAY_ADDRESS[0] = 192;
 8024272:	4b8c      	ldr	r3, [pc, #560]	; (80244a4 <MX_LWIP_Init+0x268>)
 8024274:	22c0      	movs	r2, #192	; 0xc0
 8024276:	701a      	strb	r2, [r3, #0]
  GATEWAY_ADDRESS[1] = 168;
 8024278:	4b8a      	ldr	r3, [pc, #552]	; (80244a4 <MX_LWIP_Init+0x268>)
 802427a:	22a8      	movs	r2, #168	; 0xa8
 802427c:	705a      	strb	r2, [r3, #1]
  GATEWAY_ADDRESS[2] = 50;
 802427e:	4b89      	ldr	r3, [pc, #548]	; (80244a4 <MX_LWIP_Init+0x268>)
 8024280:	2232      	movs	r2, #50	; 0x32
 8024282:	709a      	strb	r2, [r3, #2]
  GATEWAY_ADDRESS[3] = 1;
 8024284:	4b87      	ldr	r3, [pc, #540]	; (80244a4 <MX_LWIP_Init+0x268>)
 8024286:	2201      	movs	r2, #1
 8024288:	70da      	strb	r2, [r3, #3]

/* USER CODE BEGIN IP_ADDRESSES */
/* USER CODE END IP_ADDRESSES */

  /* Initilialize the LwIP stack with RTOS */
  tcpip_init( NULL, NULL );
 802428a:	2100      	movs	r1, #0
 802428c:	2000      	movs	r0, #0
 802428e:	f006 f8f9 	bl	802a484 <tcpip_init>

  /* IP addresses initialization without DHCP (IPv4) */
  IP4_ADDR(&ipaddr, IP_ADDRESS[0], IP_ADDRESS[1], IP_ADDRESS[2], IP_ADDRESS[3]);
 8024292:	4b82      	ldr	r3, [pc, #520]	; (802449c <MX_LWIP_Init+0x260>)
 8024294:	781b      	ldrb	r3, [r3, #0]
 8024296:	061a      	lsls	r2, r3, #24
 8024298:	4b80      	ldr	r3, [pc, #512]	; (802449c <MX_LWIP_Init+0x260>)
 802429a:	785b      	ldrb	r3, [r3, #1]
 802429c:	041b      	lsls	r3, r3, #16
 802429e:	431a      	orrs	r2, r3
 80242a0:	4b7e      	ldr	r3, [pc, #504]	; (802449c <MX_LWIP_Init+0x260>)
 80242a2:	789b      	ldrb	r3, [r3, #2]
 80242a4:	021b      	lsls	r3, r3, #8
 80242a6:	4313      	orrs	r3, r2
 80242a8:	4a7c      	ldr	r2, [pc, #496]	; (802449c <MX_LWIP_Init+0x260>)
 80242aa:	78d2      	ldrb	r2, [r2, #3]
 80242ac:	4313      	orrs	r3, r2
 80242ae:	061a      	lsls	r2, r3, #24
 80242b0:	4b7a      	ldr	r3, [pc, #488]	; (802449c <MX_LWIP_Init+0x260>)
 80242b2:	781b      	ldrb	r3, [r3, #0]
 80242b4:	0619      	lsls	r1, r3, #24
 80242b6:	4b79      	ldr	r3, [pc, #484]	; (802449c <MX_LWIP_Init+0x260>)
 80242b8:	785b      	ldrb	r3, [r3, #1]
 80242ba:	041b      	lsls	r3, r3, #16
 80242bc:	4319      	orrs	r1, r3
 80242be:	4b77      	ldr	r3, [pc, #476]	; (802449c <MX_LWIP_Init+0x260>)
 80242c0:	789b      	ldrb	r3, [r3, #2]
 80242c2:	021b      	lsls	r3, r3, #8
 80242c4:	430b      	orrs	r3, r1
 80242c6:	4975      	ldr	r1, [pc, #468]	; (802449c <MX_LWIP_Init+0x260>)
 80242c8:	78c9      	ldrb	r1, [r1, #3]
 80242ca:	430b      	orrs	r3, r1
 80242cc:	021b      	lsls	r3, r3, #8
 80242ce:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80242d2:	431a      	orrs	r2, r3
 80242d4:	4b71      	ldr	r3, [pc, #452]	; (802449c <MX_LWIP_Init+0x260>)
 80242d6:	781b      	ldrb	r3, [r3, #0]
 80242d8:	0619      	lsls	r1, r3, #24
 80242da:	4b70      	ldr	r3, [pc, #448]	; (802449c <MX_LWIP_Init+0x260>)
 80242dc:	785b      	ldrb	r3, [r3, #1]
 80242de:	041b      	lsls	r3, r3, #16
 80242e0:	4319      	orrs	r1, r3
 80242e2:	4b6e      	ldr	r3, [pc, #440]	; (802449c <MX_LWIP_Init+0x260>)
 80242e4:	789b      	ldrb	r3, [r3, #2]
 80242e6:	021b      	lsls	r3, r3, #8
 80242e8:	430b      	orrs	r3, r1
 80242ea:	496c      	ldr	r1, [pc, #432]	; (802449c <MX_LWIP_Init+0x260>)
 80242ec:	78c9      	ldrb	r1, [r1, #3]
 80242ee:	430b      	orrs	r3, r1
 80242f0:	0a1b      	lsrs	r3, r3, #8
 80242f2:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80242f6:	431a      	orrs	r2, r3
 80242f8:	4b68      	ldr	r3, [pc, #416]	; (802449c <MX_LWIP_Init+0x260>)
 80242fa:	781b      	ldrb	r3, [r3, #0]
 80242fc:	0619      	lsls	r1, r3, #24
 80242fe:	4b67      	ldr	r3, [pc, #412]	; (802449c <MX_LWIP_Init+0x260>)
 8024300:	785b      	ldrb	r3, [r3, #1]
 8024302:	041b      	lsls	r3, r3, #16
 8024304:	4319      	orrs	r1, r3
 8024306:	4b65      	ldr	r3, [pc, #404]	; (802449c <MX_LWIP_Init+0x260>)
 8024308:	789b      	ldrb	r3, [r3, #2]
 802430a:	021b      	lsls	r3, r3, #8
 802430c:	430b      	orrs	r3, r1
 802430e:	4963      	ldr	r1, [pc, #396]	; (802449c <MX_LWIP_Init+0x260>)
 8024310:	78c9      	ldrb	r1, [r1, #3]
 8024312:	430b      	orrs	r3, r1
 8024314:	0e1b      	lsrs	r3, r3, #24
 8024316:	4313      	orrs	r3, r2
 8024318:	4a63      	ldr	r2, [pc, #396]	; (80244a8 <MX_LWIP_Init+0x26c>)
 802431a:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&netmask, NETMASK_ADDRESS[0], NETMASK_ADDRESS[1] , NETMASK_ADDRESS[2], NETMASK_ADDRESS[3]);
 802431c:	4b60      	ldr	r3, [pc, #384]	; (80244a0 <MX_LWIP_Init+0x264>)
 802431e:	781b      	ldrb	r3, [r3, #0]
 8024320:	061a      	lsls	r2, r3, #24
 8024322:	4b5f      	ldr	r3, [pc, #380]	; (80244a0 <MX_LWIP_Init+0x264>)
 8024324:	785b      	ldrb	r3, [r3, #1]
 8024326:	041b      	lsls	r3, r3, #16
 8024328:	431a      	orrs	r2, r3
 802432a:	4b5d      	ldr	r3, [pc, #372]	; (80244a0 <MX_LWIP_Init+0x264>)
 802432c:	789b      	ldrb	r3, [r3, #2]
 802432e:	021b      	lsls	r3, r3, #8
 8024330:	4313      	orrs	r3, r2
 8024332:	4a5b      	ldr	r2, [pc, #364]	; (80244a0 <MX_LWIP_Init+0x264>)
 8024334:	78d2      	ldrb	r2, [r2, #3]
 8024336:	4313      	orrs	r3, r2
 8024338:	061a      	lsls	r2, r3, #24
 802433a:	4b59      	ldr	r3, [pc, #356]	; (80244a0 <MX_LWIP_Init+0x264>)
 802433c:	781b      	ldrb	r3, [r3, #0]
 802433e:	0619      	lsls	r1, r3, #24
 8024340:	4b57      	ldr	r3, [pc, #348]	; (80244a0 <MX_LWIP_Init+0x264>)
 8024342:	785b      	ldrb	r3, [r3, #1]
 8024344:	041b      	lsls	r3, r3, #16
 8024346:	4319      	orrs	r1, r3
 8024348:	4b55      	ldr	r3, [pc, #340]	; (80244a0 <MX_LWIP_Init+0x264>)
 802434a:	789b      	ldrb	r3, [r3, #2]
 802434c:	021b      	lsls	r3, r3, #8
 802434e:	430b      	orrs	r3, r1
 8024350:	4953      	ldr	r1, [pc, #332]	; (80244a0 <MX_LWIP_Init+0x264>)
 8024352:	78c9      	ldrb	r1, [r1, #3]
 8024354:	430b      	orrs	r3, r1
 8024356:	021b      	lsls	r3, r3, #8
 8024358:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 802435c:	431a      	orrs	r2, r3
 802435e:	4b50      	ldr	r3, [pc, #320]	; (80244a0 <MX_LWIP_Init+0x264>)
 8024360:	781b      	ldrb	r3, [r3, #0]
 8024362:	0619      	lsls	r1, r3, #24
 8024364:	4b4e      	ldr	r3, [pc, #312]	; (80244a0 <MX_LWIP_Init+0x264>)
 8024366:	785b      	ldrb	r3, [r3, #1]
 8024368:	041b      	lsls	r3, r3, #16
 802436a:	4319      	orrs	r1, r3
 802436c:	4b4c      	ldr	r3, [pc, #304]	; (80244a0 <MX_LWIP_Init+0x264>)
 802436e:	789b      	ldrb	r3, [r3, #2]
 8024370:	021b      	lsls	r3, r3, #8
 8024372:	430b      	orrs	r3, r1
 8024374:	494a      	ldr	r1, [pc, #296]	; (80244a0 <MX_LWIP_Init+0x264>)
 8024376:	78c9      	ldrb	r1, [r1, #3]
 8024378:	430b      	orrs	r3, r1
 802437a:	0a1b      	lsrs	r3, r3, #8
 802437c:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8024380:	431a      	orrs	r2, r3
 8024382:	4b47      	ldr	r3, [pc, #284]	; (80244a0 <MX_LWIP_Init+0x264>)
 8024384:	781b      	ldrb	r3, [r3, #0]
 8024386:	0619      	lsls	r1, r3, #24
 8024388:	4b45      	ldr	r3, [pc, #276]	; (80244a0 <MX_LWIP_Init+0x264>)
 802438a:	785b      	ldrb	r3, [r3, #1]
 802438c:	041b      	lsls	r3, r3, #16
 802438e:	4319      	orrs	r1, r3
 8024390:	4b43      	ldr	r3, [pc, #268]	; (80244a0 <MX_LWIP_Init+0x264>)
 8024392:	789b      	ldrb	r3, [r3, #2]
 8024394:	021b      	lsls	r3, r3, #8
 8024396:	430b      	orrs	r3, r1
 8024398:	4941      	ldr	r1, [pc, #260]	; (80244a0 <MX_LWIP_Init+0x264>)
 802439a:	78c9      	ldrb	r1, [r1, #3]
 802439c:	430b      	orrs	r3, r1
 802439e:	0e1b      	lsrs	r3, r3, #24
 80243a0:	4313      	orrs	r3, r2
 80243a2:	4a42      	ldr	r2, [pc, #264]	; (80244ac <MX_LWIP_Init+0x270>)
 80243a4:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&gw, GATEWAY_ADDRESS[0], GATEWAY_ADDRESS[1], GATEWAY_ADDRESS[2], GATEWAY_ADDRESS[3]);
 80243a6:	4b3f      	ldr	r3, [pc, #252]	; (80244a4 <MX_LWIP_Init+0x268>)
 80243a8:	781b      	ldrb	r3, [r3, #0]
 80243aa:	061a      	lsls	r2, r3, #24
 80243ac:	4b3d      	ldr	r3, [pc, #244]	; (80244a4 <MX_LWIP_Init+0x268>)
 80243ae:	785b      	ldrb	r3, [r3, #1]
 80243b0:	041b      	lsls	r3, r3, #16
 80243b2:	431a      	orrs	r2, r3
 80243b4:	4b3b      	ldr	r3, [pc, #236]	; (80244a4 <MX_LWIP_Init+0x268>)
 80243b6:	789b      	ldrb	r3, [r3, #2]
 80243b8:	021b      	lsls	r3, r3, #8
 80243ba:	4313      	orrs	r3, r2
 80243bc:	4a39      	ldr	r2, [pc, #228]	; (80244a4 <MX_LWIP_Init+0x268>)
 80243be:	78d2      	ldrb	r2, [r2, #3]
 80243c0:	4313      	orrs	r3, r2
 80243c2:	061a      	lsls	r2, r3, #24
 80243c4:	4b37      	ldr	r3, [pc, #220]	; (80244a4 <MX_LWIP_Init+0x268>)
 80243c6:	781b      	ldrb	r3, [r3, #0]
 80243c8:	0619      	lsls	r1, r3, #24
 80243ca:	4b36      	ldr	r3, [pc, #216]	; (80244a4 <MX_LWIP_Init+0x268>)
 80243cc:	785b      	ldrb	r3, [r3, #1]
 80243ce:	041b      	lsls	r3, r3, #16
 80243d0:	4319      	orrs	r1, r3
 80243d2:	4b34      	ldr	r3, [pc, #208]	; (80244a4 <MX_LWIP_Init+0x268>)
 80243d4:	789b      	ldrb	r3, [r3, #2]
 80243d6:	021b      	lsls	r3, r3, #8
 80243d8:	430b      	orrs	r3, r1
 80243da:	4932      	ldr	r1, [pc, #200]	; (80244a4 <MX_LWIP_Init+0x268>)
 80243dc:	78c9      	ldrb	r1, [r1, #3]
 80243de:	430b      	orrs	r3, r1
 80243e0:	021b      	lsls	r3, r3, #8
 80243e2:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80243e6:	431a      	orrs	r2, r3
 80243e8:	4b2e      	ldr	r3, [pc, #184]	; (80244a4 <MX_LWIP_Init+0x268>)
 80243ea:	781b      	ldrb	r3, [r3, #0]
 80243ec:	0619      	lsls	r1, r3, #24
 80243ee:	4b2d      	ldr	r3, [pc, #180]	; (80244a4 <MX_LWIP_Init+0x268>)
 80243f0:	785b      	ldrb	r3, [r3, #1]
 80243f2:	041b      	lsls	r3, r3, #16
 80243f4:	4319      	orrs	r1, r3
 80243f6:	4b2b      	ldr	r3, [pc, #172]	; (80244a4 <MX_LWIP_Init+0x268>)
 80243f8:	789b      	ldrb	r3, [r3, #2]
 80243fa:	021b      	lsls	r3, r3, #8
 80243fc:	430b      	orrs	r3, r1
 80243fe:	4929      	ldr	r1, [pc, #164]	; (80244a4 <MX_LWIP_Init+0x268>)
 8024400:	78c9      	ldrb	r1, [r1, #3]
 8024402:	430b      	orrs	r3, r1
 8024404:	0a1b      	lsrs	r3, r3, #8
 8024406:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 802440a:	431a      	orrs	r2, r3
 802440c:	4b25      	ldr	r3, [pc, #148]	; (80244a4 <MX_LWIP_Init+0x268>)
 802440e:	781b      	ldrb	r3, [r3, #0]
 8024410:	0619      	lsls	r1, r3, #24
 8024412:	4b24      	ldr	r3, [pc, #144]	; (80244a4 <MX_LWIP_Init+0x268>)
 8024414:	785b      	ldrb	r3, [r3, #1]
 8024416:	041b      	lsls	r3, r3, #16
 8024418:	4319      	orrs	r1, r3
 802441a:	4b22      	ldr	r3, [pc, #136]	; (80244a4 <MX_LWIP_Init+0x268>)
 802441c:	789b      	ldrb	r3, [r3, #2]
 802441e:	021b      	lsls	r3, r3, #8
 8024420:	430b      	orrs	r3, r1
 8024422:	4920      	ldr	r1, [pc, #128]	; (80244a4 <MX_LWIP_Init+0x268>)
 8024424:	78c9      	ldrb	r1, [r1, #3]
 8024426:	430b      	orrs	r3, r1
 8024428:	0e1b      	lsrs	r3, r3, #24
 802442a:	4313      	orrs	r3, r2
 802442c:	4a20      	ldr	r2, [pc, #128]	; (80244b0 <MX_LWIP_Init+0x274>)
 802442e:	6013      	str	r3, [r2, #0]

  /* add the network interface (IPv4/IPv6) with RTOS */
  netif_add(&gnetif, &ipaddr, &netmask, &gw, NULL, &ethernetif_init, &tcpip_input);
 8024430:	4b20      	ldr	r3, [pc, #128]	; (80244b4 <MX_LWIP_Init+0x278>)
 8024432:	9302      	str	r3, [sp, #8]
 8024434:	4b20      	ldr	r3, [pc, #128]	; (80244b8 <MX_LWIP_Init+0x27c>)
 8024436:	9301      	str	r3, [sp, #4]
 8024438:	2300      	movs	r3, #0
 802443a:	9300      	str	r3, [sp, #0]
 802443c:	4b1c      	ldr	r3, [pc, #112]	; (80244b0 <MX_LWIP_Init+0x274>)
 802443e:	4a1b      	ldr	r2, [pc, #108]	; (80244ac <MX_LWIP_Init+0x270>)
 8024440:	4919      	ldr	r1, [pc, #100]	; (80244a8 <MX_LWIP_Init+0x26c>)
 8024442:	481e      	ldr	r0, [pc, #120]	; (80244bc <MX_LWIP_Init+0x280>)
 8024444:	f006 feb8 	bl	802b1b8 <netif_add>

  /* Registers the default network interface */
  netif_set_default(&gnetif);
 8024448:	481c      	ldr	r0, [pc, #112]	; (80244bc <MX_LWIP_Init+0x280>)
 802444a:	f007 f867 	bl	802b51c <netif_set_default>

  if (netif_is_link_up(&gnetif))
 802444e:	4b1b      	ldr	r3, [pc, #108]	; (80244bc <MX_LWIP_Init+0x280>)
 8024450:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8024454:	089b      	lsrs	r3, r3, #2
 8024456:	f003 0301 	and.w	r3, r3, #1
 802445a:	b2db      	uxtb	r3, r3
 802445c:	2b00      	cmp	r3, #0
 802445e:	d003      	beq.n	8024468 <MX_LWIP_Init+0x22c>
  {
    /* When the netif is fully configured this function must be called */
    netif_set_up(&gnetif);
 8024460:	4816      	ldr	r0, [pc, #88]	; (80244bc <MX_LWIP_Init+0x280>)
 8024462:	f007 f86b 	bl	802b53c <netif_set_up>
 8024466:	e002      	b.n	802446e <MX_LWIP_Init+0x232>
  }
  else
  {
    /* When the netif link is down this function must be called */
    netif_set_down(&gnetif);
 8024468:	4814      	ldr	r0, [pc, #80]	; (80244bc <MX_LWIP_Init+0x280>)
 802446a:	f007 f8d3 	bl	802b614 <netif_set_down>
  }

  /* Set the link callback function, this function is called on change of link status*/
  netif_set_link_callback(&gnetif, ethernet_link_status_updated);
 802446e:	4914      	ldr	r1, [pc, #80]	; (80244c0 <MX_LWIP_Init+0x284>)
 8024470:	4812      	ldr	r0, [pc, #72]	; (80244bc <MX_LWIP_Init+0x280>)
 8024472:	f007 f965 	bl	802b740 <netif_set_link_callback>

  /* Create the Ethernet link handler thread */
/* USER CODE BEGIN H7_OS_THREAD_DEF_CREATE_CMSIS_RTOS_V1 */
  osThreadDef(EthLink, ethernet_link_thread, osPriorityBelowNormal, 0, configMINIMAL_STACK_SIZE *2);
 8024476:	4b13      	ldr	r3, [pc, #76]	; (80244c4 <MX_LWIP_Init+0x288>)
 8024478:	1d3c      	adds	r4, r7, #4
 802447a:	461d      	mov	r5, r3
 802447c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 802447e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8024480:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8024484:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  osThreadCreate (osThread(EthLink), &gnetif);
 8024488:	1d3b      	adds	r3, r7, #4
 802448a:	490c      	ldr	r1, [pc, #48]	; (80244bc <MX_LWIP_Init+0x280>)
 802448c:	4618      	mov	r0, r3
 802448e:	f000 fd07 	bl	8024ea0 <osThreadCreate>
/* USER CODE END H7_OS_THREAD_DEF_CREATE_CMSIS_RTOS_V1 */

/* USER CODE BEGIN 3 */

/* USER CODE END 3 */
}
 8024492:	bf00      	nop
 8024494:	3720      	adds	r7, #32
 8024496:	46bd      	mov	sp, r7
 8024498:	bdb0      	pop	{r4, r5, r7, pc}
 802449a:	bf00      	nop
 802449c:	20000440 	.word	0x20000440
 80244a0:	20000444 	.word	0x20000444
 80244a4:	20000448 	.word	0x20000448
 80244a8:	20000434 	.word	0x20000434
 80244ac:	20000438 	.word	0x20000438
 80244b0:	2000043c 	.word	0x2000043c
 80244b4:	0802a395 	.word	0x0802a395
 80244b8:	08024969 	.word	0x08024969
 80244bc:	20000400 	.word	0x20000400
 80244c0:	080244c9 	.word	0x080244c9
 80244c4:	080374e8 	.word	0x080374e8

080244c8 <ethernet_link_status_updated>:
  * @brief  Notify the User about the network interface config status
  * @param  netif: the network interface
  * @retval None
  */
static void ethernet_link_status_updated(struct netif *netif)
{
 80244c8:	b480      	push	{r7}
 80244ca:	b083      	sub	sp, #12
 80244cc:	af00      	add	r7, sp, #0
 80244ce:	6078      	str	r0, [r7, #4]
  else /* netif is down */
  {
/* USER CODE BEGIN 6 */
/* USER CODE END 6 */
  }
}
 80244d0:	bf00      	nop
 80244d2:	370c      	adds	r7, #12
 80244d4:	46bd      	mov	sp, r7
 80244d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80244da:	4770      	bx	lr

080244dc <HAL_ETH_RxCpltCallback>:
  * @brief  Ethernet Rx Transfer completed callback
  * @param  handlerEth: ETH handler
  * @retval None
  */
void HAL_ETH_RxCpltCallback(ETH_HandleTypeDef *handlerEth)
{
 80244dc:	b580      	push	{r7, lr}
 80244de:	b082      	sub	sp, #8
 80244e0:	af00      	add	r7, sp, #0
 80244e2:	6078      	str	r0, [r7, #4]
  osSemaphoreRelease(RxPktSemaphore);
 80244e4:	4b04      	ldr	r3, [pc, #16]	; (80244f8 <HAL_ETH_RxCpltCallback+0x1c>)
 80244e6:	681b      	ldr	r3, [r3, #0]
 80244e8:	4618      	mov	r0, r3
 80244ea:	f000 fe55 	bl	8025198 <osSemaphoreRelease>
}
 80244ee:	bf00      	nop
 80244f0:	3708      	adds	r7, #8
 80244f2:	46bd      	mov	sp, r7
 80244f4:	bd80      	pop	{r7, pc}
 80244f6:	bf00      	nop
 80244f8:	20004f24 	.word	0x20004f24

080244fc <HAL_ETH_TxCpltCallback>:
  * @brief  Ethernet Tx Transfer completed callback
  * @param  handlerEth: ETH handler
  * @retval None
  */
void HAL_ETH_TxCpltCallback(ETH_HandleTypeDef *handlerEth)
{
 80244fc:	b580      	push	{r7, lr}
 80244fe:	b082      	sub	sp, #8
 8024500:	af00      	add	r7, sp, #0
 8024502:	6078      	str	r0, [r7, #4]
  osSemaphoreRelease(TxPktSemaphore);
 8024504:	4b04      	ldr	r3, [pc, #16]	; (8024518 <HAL_ETH_TxCpltCallback+0x1c>)
 8024506:	681b      	ldr	r3, [r3, #0]
 8024508:	4618      	mov	r0, r3
 802450a:	f000 fe45 	bl	8025198 <osSemaphoreRelease>
}
 802450e:	bf00      	nop
 8024510:	3708      	adds	r7, #8
 8024512:	46bd      	mov	sp, r7
 8024514:	bd80      	pop	{r7, pc}
 8024516:	bf00      	nop
 8024518:	20004f28 	.word	0x20004f28

0802451c <HAL_ETH_ErrorCallback>:
  * @brief  Ethernet DMA transfer error callback
  * @param  handlerEth: ETH handler
  * @retval None
  */
void HAL_ETH_ErrorCallback(ETH_HandleTypeDef *handlerEth)
{
 802451c:	b580      	push	{r7, lr}
 802451e:	b082      	sub	sp, #8
 8024520:	af00      	add	r7, sp, #0
 8024522:	6078      	str	r0, [r7, #4]
  if((HAL_ETH_GetDMAError(handlerEth) & ETH_DMASR_RBUS) == ETH_DMASR_RBUS)
 8024524:	6878      	ldr	r0, [r7, #4]
 8024526:	f7fd ff65 	bl	80223f4 <HAL_ETH_GetDMAError>
 802452a:	4603      	mov	r3, r0
 802452c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8024530:	2b80      	cmp	r3, #128	; 0x80
 8024532:	d104      	bne.n	802453e <HAL_ETH_ErrorCallback+0x22>
  {
     osSemaphoreRelease(RxPktSemaphore);
 8024534:	4b04      	ldr	r3, [pc, #16]	; (8024548 <HAL_ETH_ErrorCallback+0x2c>)
 8024536:	681b      	ldr	r3, [r3, #0]
 8024538:	4618      	mov	r0, r3
 802453a:	f000 fe2d 	bl	8025198 <osSemaphoreRelease>
  }
}
 802453e:	bf00      	nop
 8024540:	3708      	adds	r7, #8
 8024542:	46bd      	mov	sp, r7
 8024544:	bd80      	pop	{r7, pc}
 8024546:	bf00      	nop
 8024548:	20004f24 	.word	0x20004f24

0802454c <low_level_init>:
 *
 * @param netif the already initialized lwip network interface structure
 *        for this ethernetif
 */
static void low_level_init(struct netif *netif)
{
 802454c:	b5b0      	push	{r4, r5, r7, lr}
 802454e:	b0a8      	sub	sp, #160	; 0xa0
 8024550:	af00      	add	r7, sp, #0
 8024552:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_eth_init_status = HAL_OK;
 8024554:	2300      	movs	r3, #0
 8024556:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
  uint32_t duplex, speed = 0;
 802455a:	2300      	movs	r3, #0
 802455c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  int32_t PHYLinkState = 0;
 8024560:	2300      	movs	r3, #0
 8024562:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  ETH_MACConfigTypeDef MACConf = {0};
 8024566:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 802456a:	2264      	movs	r2, #100	; 0x64
 802456c:	2100      	movs	r1, #0
 802456e:	4618      	mov	r0, r3
 8024570:	f011 fd2a 	bl	8035fc8 <memset>
  /* Start ETH HAL Init */

   uint8_t MACAddr[6] ;
  heth.Instance = ETH;
 8024574:	4b85      	ldr	r3, [pc, #532]	; (802478c <low_level_init+0x240>)
 8024576:	4a86      	ldr	r2, [pc, #536]	; (8024790 <low_level_init+0x244>)
 8024578:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 802457a:	2300      	movs	r3, #0
 802457c:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  MACAddr[1] = 0x80;
 8024580:	2380      	movs	r3, #128	; 0x80
 8024582:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  MACAddr[2] = 0xE1;
 8024586:	23e1      	movs	r3, #225	; 0xe1
 8024588:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  MACAddr[3] = 0x00;
 802458c:	2300      	movs	r3, #0
 802458e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  MACAddr[4] = 0x00;
 8024592:	2300      	movs	r3, #0
 8024594:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
  MACAddr[5] = 0x00;
 8024598:	2300      	movs	r3, #0
 802459a:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
  heth.Init.MACAddr = &MACAddr[0];
 802459e:	4a7b      	ldr	r2, [pc, #492]	; (802478c <low_level_init+0x240>)
 80245a0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80245a4:	6053      	str	r3, [r2, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 80245a6:	4b79      	ldr	r3, [pc, #484]	; (802478c <low_level_init+0x240>)
 80245a8:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 80245ac:	609a      	str	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 80245ae:	4b77      	ldr	r3, [pc, #476]	; (802478c <low_level_init+0x240>)
 80245b0:	4a78      	ldr	r2, [pc, #480]	; (8024794 <low_level_init+0x248>)
 80245b2:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 80245b4:	4b75      	ldr	r3, [pc, #468]	; (802478c <low_level_init+0x240>)
 80245b6:	4a78      	ldr	r2, [pc, #480]	; (8024798 <low_level_init+0x24c>)
 80245b8:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1536;
 80245ba:	4b74      	ldr	r3, [pc, #464]	; (802478c <low_level_init+0x240>)
 80245bc:	f44f 62c0 	mov.w	r2, #1536	; 0x600
 80245c0:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  hal_eth_init_status = HAL_ETH_Init(&heth);
 80245c2:	4872      	ldr	r0, [pc, #456]	; (802478c <low_level_init+0x240>)
 80245c4:	f7fd f8d8 	bl	8021778 <HAL_ETH_Init>
 80245c8:	4603      	mov	r3, r0
 80245ca:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 80245ce:	2238      	movs	r2, #56	; 0x38
 80245d0:	2100      	movs	r1, #0
 80245d2:	4872      	ldr	r0, [pc, #456]	; (802479c <low_level_init+0x250>)
 80245d4:	f011 fcf8 	bl	8035fc8 <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 80245d8:	4b70      	ldr	r3, [pc, #448]	; (802479c <low_level_init+0x250>)
 80245da:	2221      	movs	r2, #33	; 0x21
 80245dc:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 80245de:	4b6f      	ldr	r3, [pc, #444]	; (802479c <low_level_init+0x250>)
 80245e0:	f44f 0240 	mov.w	r2, #12582912	; 0xc00000
 80245e4:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 80245e6:	4b6d      	ldr	r3, [pc, #436]	; (802479c <low_level_init+0x250>)
 80245e8:	2200      	movs	r2, #0
 80245ea:	611a      	str	r2, [r3, #16]

  /* End ETH HAL Init */

  /* Initialize the RX POOL */
  LWIP_MEMPOOL_INIT(RX_POOL);
 80245ec:	486c      	ldr	r0, [pc, #432]	; (80247a0 <low_level_init+0x254>)
 80245ee:	f006 fc6b 	bl	802aec8 <memp_init_pool>

#if LWIP_ARP || LWIP_ETHERNET

  /* set MAC hardware address length */
  netif->hwaddr_len = ETH_HWADDR_LEN;
 80245f2:	687b      	ldr	r3, [r7, #4]
 80245f4:	2206      	movs	r2, #6
 80245f6:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  /* set MAC hardware address */
  netif->hwaddr[0] =  heth.Init.MACAddr[0];
 80245fa:	4b64      	ldr	r3, [pc, #400]	; (802478c <low_level_init+0x240>)
 80245fc:	685b      	ldr	r3, [r3, #4]
 80245fe:	781a      	ldrb	r2, [r3, #0]
 8024600:	687b      	ldr	r3, [r7, #4]
 8024602:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
  netif->hwaddr[1] =  heth.Init.MACAddr[1];
 8024606:	4b61      	ldr	r3, [pc, #388]	; (802478c <low_level_init+0x240>)
 8024608:	685b      	ldr	r3, [r3, #4]
 802460a:	785a      	ldrb	r2, [r3, #1]
 802460c:	687b      	ldr	r3, [r7, #4]
 802460e:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
  netif->hwaddr[2] =  heth.Init.MACAddr[2];
 8024612:	4b5e      	ldr	r3, [pc, #376]	; (802478c <low_level_init+0x240>)
 8024614:	685b      	ldr	r3, [r3, #4]
 8024616:	789a      	ldrb	r2, [r3, #2]
 8024618:	687b      	ldr	r3, [r7, #4]
 802461a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
  netif->hwaddr[3] =  heth.Init.MACAddr[3];
 802461e:	4b5b      	ldr	r3, [pc, #364]	; (802478c <low_level_init+0x240>)
 8024620:	685b      	ldr	r3, [r3, #4]
 8024622:	78da      	ldrb	r2, [r3, #3]
 8024624:	687b      	ldr	r3, [r7, #4]
 8024626:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
  netif->hwaddr[4] =  heth.Init.MACAddr[4];
 802462a:	4b58      	ldr	r3, [pc, #352]	; (802478c <low_level_init+0x240>)
 802462c:	685b      	ldr	r3, [r3, #4]
 802462e:	791a      	ldrb	r2, [r3, #4]
 8024630:	687b      	ldr	r3, [r7, #4]
 8024632:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
  netif->hwaddr[5] =  heth.Init.MACAddr[5];
 8024636:	4b55      	ldr	r3, [pc, #340]	; (802478c <low_level_init+0x240>)
 8024638:	685b      	ldr	r3, [r3, #4]
 802463a:	795a      	ldrb	r2, [r3, #5]
 802463c:	687b      	ldr	r3, [r7, #4]
 802463e:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b

  /* maximum transfer unit */
  netif->mtu = ETH_MAX_PAYLOAD;
 8024642:	687b      	ldr	r3, [r7, #4]
 8024644:	f240 52dc 	movw	r2, #1500	; 0x5dc
 8024648:	849a      	strh	r2, [r3, #36]	; 0x24

  /* Accept broadcast address and ARP traffic */
  /* don't set NETIF_FLAG_ETHARP if this device is not an ethernet one */
  #if LWIP_ARP
    netif->flags |= NETIF_FLAG_BROADCAST | NETIF_FLAG_ETHARP;
 802464a:	687b      	ldr	r3, [r7, #4]
 802464c:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8024650:	f043 030a 	orr.w	r3, r3, #10
 8024654:	b2da      	uxtb	r2, r3
 8024656:	687b      	ldr	r3, [r7, #4]
 8024658:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
  #else
    netif->flags |= NETIF_FLAG_BROADCAST;
  #endif /* LWIP_ARP */

  /* create a binary semaphore used for informing ethernetif of frame reception */
  RxPktSemaphore = xSemaphoreCreateBinary();
 802465c:	2203      	movs	r2, #3
 802465e:	2100      	movs	r1, #0
 8024660:	2001      	movs	r0, #1
 8024662:	f001 f87d 	bl	8025760 <xQueueGenericCreate>
 8024666:	4603      	mov	r3, r0
 8024668:	4a4e      	ldr	r2, [pc, #312]	; (80247a4 <low_level_init+0x258>)
 802466a:	6013      	str	r3, [r2, #0]

  /* create a binary semaphore used for informing ethernetif of frame transmission */
  TxPktSemaphore = xSemaphoreCreateBinary();
 802466c:	2203      	movs	r2, #3
 802466e:	2100      	movs	r1, #0
 8024670:	2001      	movs	r0, #1
 8024672:	f001 f875 	bl	8025760 <xQueueGenericCreate>
 8024676:	4603      	mov	r3, r0
 8024678:	4a4b      	ldr	r2, [pc, #300]	; (80247a8 <low_level_init+0x25c>)
 802467a:	6013      	str	r3, [r2, #0]

  /* create the task that handles the ETH_MAC */
/* USER CODE BEGIN OS_THREAD_DEF_CREATE_CMSIS_RTOS_V1 */
  osThreadDef(EthIf, ethernetif_input, osPriorityRealtime, 0, INTERFACE_THREAD_STACK_SIZE);
 802467c:	4b4b      	ldr	r3, [pc, #300]	; (80247ac <low_level_init+0x260>)
 802467e:	f107 0408 	add.w	r4, r7, #8
 8024682:	461d      	mov	r5, r3
 8024684:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8024686:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8024688:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 802468c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  osThreadCreate (osThread(EthIf), netif);
 8024690:	f107 0308 	add.w	r3, r7, #8
 8024694:	6879      	ldr	r1, [r7, #4]
 8024696:	4618      	mov	r0, r3
 8024698:	f000 fc02 	bl	8024ea0 <osThreadCreate>

/* USER CODE BEGIN PHY_PRE_CONFIG */

/* USER CODE END PHY_PRE_CONFIG */
  /* Set PHY IO functions */
  LAN8742_RegisterBusIO(&LAN8742, &LAN8742_IOCtx);
 802469c:	4944      	ldr	r1, [pc, #272]	; (80247b0 <low_level_init+0x264>)
 802469e:	4845      	ldr	r0, [pc, #276]	; (80247b4 <low_level_init+0x268>)
 80246a0:	f7fc fdc1 	bl	8021226 <LAN8742_RegisterBusIO>

  /* Initialize the LAN8742 ETH PHY */
  LAN8742_Init(&LAN8742);
 80246a4:	4843      	ldr	r0, [pc, #268]	; (80247b4 <low_level_init+0x268>)
 80246a6:	f7fc fdf0 	bl	802128a <LAN8742_Init>

  if (hal_eth_init_status == HAL_OK)
 80246aa:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 80246ae:	2b00      	cmp	r3, #0
 80246b0:	d165      	bne.n	802477e <low_level_init+0x232>
  {
    PHYLinkState = LAN8742_GetLinkState(&LAN8742);
 80246b2:	4840      	ldr	r0, [pc, #256]	; (80247b4 <low_level_init+0x268>)
 80246b4:	f7fc fe91 	bl	80213da <LAN8742_GetLinkState>
 80246b8:	f8c7 0090 	str.w	r0, [r7, #144]	; 0x90

    /* Get link state */
    if(PHYLinkState <= LAN8742_STATUS_LINK_DOWN)
 80246bc:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80246c0:	2b01      	cmp	r3, #1
 80246c2:	dc06      	bgt.n	80246d2 <low_level_init+0x186>
    {
      netif_set_link_down(netif);
 80246c4:	6878      	ldr	r0, [r7, #4]
 80246c6:	f007 f80b 	bl	802b6e0 <netif_set_link_down>
      netif_set_down(netif);
 80246ca:	6878      	ldr	r0, [r7, #4]
 80246cc:	f006 ffa2 	bl	802b614 <netif_set_down>
#endif /* LWIP_ARP || LWIP_ETHERNET */

/* USER CODE BEGIN LOW_LEVEL_INIT */

/* USER CODE END LOW_LEVEL_INIT */
}
 80246d0:	e057      	b.n	8024782 <low_level_init+0x236>
      switch (PHYLinkState)
 80246d2:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80246d6:	3b02      	subs	r3, #2
 80246d8:	2b03      	cmp	r3, #3
 80246da:	d82b      	bhi.n	8024734 <low_level_init+0x1e8>
 80246dc:	a201      	add	r2, pc, #4	; (adr r2, 80246e4 <low_level_init+0x198>)
 80246de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80246e2:	bf00      	nop
 80246e4:	080246f5 	.word	0x080246f5
 80246e8:	08024707 	.word	0x08024707
 80246ec:	08024717 	.word	0x08024717
 80246f0:	08024727 	.word	0x08024727
        duplex = ETH_FULLDUPLEX_MODE;
 80246f4:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80246f8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
        speed = ETH_SPEED_100M;
 80246fc:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8024700:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
        break;
 8024704:	e01f      	b.n	8024746 <low_level_init+0x1fa>
        duplex = ETH_HALFDUPLEX_MODE;
 8024706:	2300      	movs	r3, #0
 8024708:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
        speed = ETH_SPEED_100M;
 802470c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8024710:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
        break;
 8024714:	e017      	b.n	8024746 <low_level_init+0x1fa>
        duplex = ETH_FULLDUPLEX_MODE;
 8024716:	f44f 6300 	mov.w	r3, #2048	; 0x800
 802471a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
        speed = ETH_SPEED_10M;
 802471e:	2300      	movs	r3, #0
 8024720:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
        break;
 8024724:	e00f      	b.n	8024746 <low_level_init+0x1fa>
        duplex = ETH_HALFDUPLEX_MODE;
 8024726:	2300      	movs	r3, #0
 8024728:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
        speed = ETH_SPEED_10M;
 802472c:	2300      	movs	r3, #0
 802472e:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
        break;
 8024732:	e008      	b.n	8024746 <low_level_init+0x1fa>
        duplex = ETH_FULLDUPLEX_MODE;
 8024734:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8024738:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
        speed = ETH_SPEED_100M;
 802473c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8024740:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
        break;
 8024744:	bf00      	nop
    HAL_ETH_GetMACConfig(&heth, &MACConf);
 8024746:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 802474a:	4619      	mov	r1, r3
 802474c:	480f      	ldr	r0, [pc, #60]	; (802478c <low_level_init+0x240>)
 802474e:	f7fd fcf7 	bl	8022140 <HAL_ETH_GetMACConfig>
    MACConf.DuplexMode = duplex;
 8024752:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8024756:	647b      	str	r3, [r7, #68]	; 0x44
    MACConf.Speed = speed;
 8024758:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 802475c:	643b      	str	r3, [r7, #64]	; 0x40
    HAL_ETH_SetMACConfig(&heth, &MACConf);
 802475e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8024762:	4619      	mov	r1, r3
 8024764:	4809      	ldr	r0, [pc, #36]	; (802478c <low_level_init+0x240>)
 8024766:	f7fd fdd5 	bl	8022314 <HAL_ETH_SetMACConfig>
    HAL_ETH_Start_IT(&heth);
 802476a:	4808      	ldr	r0, [pc, #32]	; (802478c <low_level_init+0x240>)
 802476c:	f7fd f882 	bl	8021874 <HAL_ETH_Start_IT>
    netif_set_up(netif);
 8024770:	6878      	ldr	r0, [r7, #4]
 8024772:	f006 fee3 	bl	802b53c <netif_set_up>
    netif_set_link_up(netif);
 8024776:	6878      	ldr	r0, [r7, #4]
 8024778:	f006 ff7e 	bl	802b678 <netif_set_link_up>
}
 802477c:	e001      	b.n	8024782 <low_level_init+0x236>
    Error_Handler();
 802477e:	f7fc f8bf 	bl	8020900 <Error_Handler>
}
 8024782:	bf00      	nop
 8024784:	37a0      	adds	r7, #160	; 0xa0
 8024786:	46bd      	mov	sp, r7
 8024788:	bdb0      	pop	{r4, r5, r7, pc}
 802478a:	bf00      	nop
 802478c:	20004f2c 	.word	0x20004f2c
 8024790:	40028000 	.word	0x40028000
 8024794:	20004e84 	.word	0x20004e84
 8024798:	20004de4 	.word	0x20004de4
 802479c:	20004fdc 	.word	0x20004fdc
 80247a0:	0803aa6c 	.word	0x0803aa6c
 80247a4:	20004f24 	.word	0x20004f24
 80247a8:	20004f28 	.word	0x20004f28
 80247ac:	0803750c 	.word	0x0803750c
 80247b0:	20000010 	.word	0x20000010
 80247b4:	20005014 	.word	0x20005014

080247b8 <low_level_output>:
 *       to become available since the stack doesn't retry to send a packet
 *       dropped because of memory failure (except for the TCP timers).
 */

static err_t low_level_output(struct netif *netif, struct pbuf *p)
{
 80247b8:	b580      	push	{r7, lr}
 80247ba:	b092      	sub	sp, #72	; 0x48
 80247bc:	af00      	add	r7, sp, #0
 80247be:	6078      	str	r0, [r7, #4]
 80247c0:	6039      	str	r1, [r7, #0]
  uint32_t i = 0U;
 80247c2:	2300      	movs	r3, #0
 80247c4:	647b      	str	r3, [r7, #68]	; 0x44
  struct pbuf *q = NULL;
 80247c6:	2300      	movs	r3, #0
 80247c8:	643b      	str	r3, [r7, #64]	; 0x40
  err_t errval = ERR_OK;
 80247ca:	2300      	movs	r3, #0
 80247cc:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  ETH_BufferTypeDef Txbuffer[ETH_TX_DESC_CNT] = {0};
 80247d0:	f107 030c 	add.w	r3, r7, #12
 80247d4:	2230      	movs	r2, #48	; 0x30
 80247d6:	2100      	movs	r1, #0
 80247d8:	4618      	mov	r0, r3
 80247da:	f011 fbf5 	bl	8035fc8 <memset>

  memset(Txbuffer, 0 , ETH_TX_DESC_CNT*sizeof(ETH_BufferTypeDef));
 80247de:	f107 030c 	add.w	r3, r7, #12
 80247e2:	2230      	movs	r2, #48	; 0x30
 80247e4:	2100      	movs	r1, #0
 80247e6:	4618      	mov	r0, r3
 80247e8:	f011 fbee 	bl	8035fc8 <memset>

  for(q = p; q != NULL; q = q->next)
 80247ec:	683b      	ldr	r3, [r7, #0]
 80247ee:	643b      	str	r3, [r7, #64]	; 0x40
 80247f0:	e045      	b.n	802487e <low_level_output+0xc6>
  {
    if(i >= ETH_TX_DESC_CNT)
 80247f2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80247f4:	2b03      	cmp	r3, #3
 80247f6:	d902      	bls.n	80247fe <low_level_output+0x46>
      return ERR_IF;
 80247f8:	f06f 030b 	mvn.w	r3, #11
 80247fc:	e065      	b.n	80248ca <low_level_output+0x112>

    Txbuffer[i].buffer = q->payload;
 80247fe:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8024800:	6859      	ldr	r1, [r3, #4]
 8024802:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8024804:	4613      	mov	r3, r2
 8024806:	005b      	lsls	r3, r3, #1
 8024808:	4413      	add	r3, r2
 802480a:	009b      	lsls	r3, r3, #2
 802480c:	3348      	adds	r3, #72	; 0x48
 802480e:	443b      	add	r3, r7
 8024810:	3b3c      	subs	r3, #60	; 0x3c
 8024812:	6019      	str	r1, [r3, #0]
    Txbuffer[i].len = q->len;
 8024814:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8024816:	895b      	ldrh	r3, [r3, #10]
 8024818:	4619      	mov	r1, r3
 802481a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 802481c:	4613      	mov	r3, r2
 802481e:	005b      	lsls	r3, r3, #1
 8024820:	4413      	add	r3, r2
 8024822:	009b      	lsls	r3, r3, #2
 8024824:	3348      	adds	r3, #72	; 0x48
 8024826:	443b      	add	r3, r7
 8024828:	3b38      	subs	r3, #56	; 0x38
 802482a:	6019      	str	r1, [r3, #0]

    if(i>0)
 802482c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 802482e:	2b00      	cmp	r3, #0
 8024830:	d011      	beq.n	8024856 <low_level_output+0x9e>
    {
      Txbuffer[i-1].next = &Txbuffer[i];
 8024832:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8024834:	1e5a      	subs	r2, r3, #1
 8024836:	f107 000c 	add.w	r0, r7, #12
 802483a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 802483c:	460b      	mov	r3, r1
 802483e:	005b      	lsls	r3, r3, #1
 8024840:	440b      	add	r3, r1
 8024842:	009b      	lsls	r3, r3, #2
 8024844:	18c1      	adds	r1, r0, r3
 8024846:	4613      	mov	r3, r2
 8024848:	005b      	lsls	r3, r3, #1
 802484a:	4413      	add	r3, r2
 802484c:	009b      	lsls	r3, r3, #2
 802484e:	3348      	adds	r3, #72	; 0x48
 8024850:	443b      	add	r3, r7
 8024852:	3b34      	subs	r3, #52	; 0x34
 8024854:	6019      	str	r1, [r3, #0]
    }

    if(q->next == NULL)
 8024856:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8024858:	681b      	ldr	r3, [r3, #0]
 802485a:	2b00      	cmp	r3, #0
 802485c:	d109      	bne.n	8024872 <low_level_output+0xba>
    {
      Txbuffer[i].next = NULL;
 802485e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8024860:	4613      	mov	r3, r2
 8024862:	005b      	lsls	r3, r3, #1
 8024864:	4413      	add	r3, r2
 8024866:	009b      	lsls	r3, r3, #2
 8024868:	3348      	adds	r3, #72	; 0x48
 802486a:	443b      	add	r3, r7
 802486c:	3b34      	subs	r3, #52	; 0x34
 802486e:	2200      	movs	r2, #0
 8024870:	601a      	str	r2, [r3, #0]
    }

    i++;
 8024872:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8024874:	3301      	adds	r3, #1
 8024876:	647b      	str	r3, [r7, #68]	; 0x44
  for(q = p; q != NULL; q = q->next)
 8024878:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 802487a:	681b      	ldr	r3, [r3, #0]
 802487c:	643b      	str	r3, [r7, #64]	; 0x40
 802487e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8024880:	2b00      	cmp	r3, #0
 8024882:	d1b6      	bne.n	80247f2 <low_level_output+0x3a>
  }

  TxConfig.Length = p->tot_len;
 8024884:	683b      	ldr	r3, [r7, #0]
 8024886:	891b      	ldrh	r3, [r3, #8]
 8024888:	461a      	mov	r2, r3
 802488a:	4b12      	ldr	r3, [pc, #72]	; (80248d4 <low_level_output+0x11c>)
 802488c:	605a      	str	r2, [r3, #4]
  TxConfig.TxBuffer = Txbuffer;
 802488e:	4a11      	ldr	r2, [pc, #68]	; (80248d4 <low_level_output+0x11c>)
 8024890:	f107 030c 	add.w	r3, r7, #12
 8024894:	6093      	str	r3, [r2, #8]
  TxConfig.pData = p;
 8024896:	4a0f      	ldr	r2, [pc, #60]	; (80248d4 <low_level_output+0x11c>)
 8024898:	683b      	ldr	r3, [r7, #0]
 802489a:	6353      	str	r3, [r2, #52]	; 0x34

  pbuf_ref(p);
 802489c:	6838      	ldr	r0, [r7, #0]
 802489e:	f007 fba3 	bl	802bfe8 <pbuf_ref>

  HAL_ETH_Transmit_IT(&heth, &TxConfig);
 80248a2:	490c      	ldr	r1, [pc, #48]	; (80248d4 <low_level_output+0x11c>)
 80248a4:	480c      	ldr	r0, [pc, #48]	; (80248d8 <low_level_output+0x120>)
 80248a6:	f7fd f8f2 	bl	8021a8e <HAL_ETH_Transmit_IT>
  while(osSemaphoreWait(TxPktSemaphore, TIME_WAITING_FOR_INPUT)!=osOK)
 80248aa:	bf00      	nop
 80248ac:	4b0b      	ldr	r3, [pc, #44]	; (80248dc <low_level_output+0x124>)
 80248ae:	681b      	ldr	r3, [r3, #0]
 80248b0:	f04f 31ff 	mov.w	r1, #4294967295
 80248b4:	4618      	mov	r0, r3
 80248b6:	f000 fc21 	bl	80250fc <osSemaphoreWait>
 80248ba:	4603      	mov	r3, r0
 80248bc:	2b00      	cmp	r3, #0
 80248be:	d1f5      	bne.n	80248ac <low_level_output+0xf4>

  {
  }

  HAL_ETH_ReleaseTxPacket(&heth);
 80248c0:	4805      	ldr	r0, [pc, #20]	; (80248d8 <low_level_output+0x120>)
 80248c2:	f7fd fa77 	bl	8021db4 <HAL_ETH_ReleaseTxPacket>

  return errval;
 80248c6:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
}
 80248ca:	4618      	mov	r0, r3
 80248cc:	3748      	adds	r7, #72	; 0x48
 80248ce:	46bd      	mov	sp, r7
 80248d0:	bd80      	pop	{r7, pc}
 80248d2:	bf00      	nop
 80248d4:	20004fdc 	.word	0x20004fdc
 80248d8:	20004f2c 	.word	0x20004f2c
 80248dc:	20004f28 	.word	0x20004f28

080248e0 <low_level_input>:
 * @param netif the lwip network interface structure for this ethernetif
 * @return a pbuf filled with the received packet (including MAC header)
 *         NULL on memory error
   */
static struct pbuf * low_level_input(struct netif *netif)
{
 80248e0:	b580      	push	{r7, lr}
 80248e2:	b084      	sub	sp, #16
 80248e4:	af00      	add	r7, sp, #0
 80248e6:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 80248e8:	2300      	movs	r3, #0
 80248ea:	60fb      	str	r3, [r7, #12]

  if(RxAllocStatus == RX_ALLOC_OK)
 80248ec:	4b07      	ldr	r3, [pc, #28]	; (802490c <low_level_input+0x2c>)
 80248ee:	781b      	ldrb	r3, [r3, #0]
 80248f0:	2b00      	cmp	r3, #0
 80248f2:	d105      	bne.n	8024900 <low_level_input+0x20>
  {
    HAL_ETH_ReadData(&heth, (void **)&p);
 80248f4:	f107 030c 	add.w	r3, r7, #12
 80248f8:	4619      	mov	r1, r3
 80248fa:	4805      	ldr	r0, [pc, #20]	; (8024910 <low_level_input+0x30>)
 80248fc:	f7fd f923 	bl	8021b46 <HAL_ETH_ReadData>
  }

  return p;
 8024900:	68fb      	ldr	r3, [r7, #12]
}
 8024902:	4618      	mov	r0, r3
 8024904:	3710      	adds	r7, #16
 8024906:	46bd      	mov	sp, r7
 8024908:	bd80      	pop	{r7, pc}
 802490a:	bf00      	nop
 802490c:	20004de0 	.word	0x20004de0
 8024910:	20004f2c 	.word	0x20004f2c

08024914 <ethernetif_input>:
 * the appropriate input function is called.
 *
 * @param netif the lwip network interface structure for this ethernetif
 */
static void ethernetif_input(void const * argument)
{
 8024914:	b580      	push	{r7, lr}
 8024916:	b084      	sub	sp, #16
 8024918:	af00      	add	r7, sp, #0
 802491a:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 802491c:	2300      	movs	r3, #0
 802491e:	60fb      	str	r3, [r7, #12]
  struct netif *netif = (struct netif *) argument;
 8024920:	687b      	ldr	r3, [r7, #4]
 8024922:	60bb      	str	r3, [r7, #8]

  for( ;; )
  {
    if (osSemaphoreWait(RxPktSemaphore, TIME_WAITING_FOR_INPUT) == osOK)
 8024924:	4b0f      	ldr	r3, [pc, #60]	; (8024964 <ethernetif_input+0x50>)
 8024926:	681b      	ldr	r3, [r3, #0]
 8024928:	f04f 31ff 	mov.w	r1, #4294967295
 802492c:	4618      	mov	r0, r3
 802492e:	f000 fbe5 	bl	80250fc <osSemaphoreWait>
 8024932:	4603      	mov	r3, r0
 8024934:	2b00      	cmp	r3, #0
 8024936:	d1f5      	bne.n	8024924 <ethernetif_input+0x10>
    {
      do
      {
        p = low_level_input( netif );
 8024938:	68b8      	ldr	r0, [r7, #8]
 802493a:	f7ff ffd1 	bl	80248e0 <low_level_input>
 802493e:	60f8      	str	r0, [r7, #12]
        if (p != NULL)
 8024940:	68fb      	ldr	r3, [r7, #12]
 8024942:	2b00      	cmp	r3, #0
 8024944:	d00a      	beq.n	802495c <ethernetif_input+0x48>
        {
          if (netif->input( p, netif) != ERR_OK )
 8024946:	68bb      	ldr	r3, [r7, #8]
 8024948:	691b      	ldr	r3, [r3, #16]
 802494a:	68b9      	ldr	r1, [r7, #8]
 802494c:	68f8      	ldr	r0, [r7, #12]
 802494e:	4798      	blx	r3
 8024950:	4603      	mov	r3, r0
 8024952:	2b00      	cmp	r3, #0
 8024954:	d002      	beq.n	802495c <ethernetif_input+0x48>
          {
            pbuf_free(p);
 8024956:	68f8      	ldr	r0, [r7, #12]
 8024958:	f007 faa0 	bl	802be9c <pbuf_free>
          }
        }
      } while(p!=NULL);
 802495c:	68fb      	ldr	r3, [r7, #12]
 802495e:	2b00      	cmp	r3, #0
 8024960:	d1ea      	bne.n	8024938 <ethernetif_input+0x24>
    if (osSemaphoreWait(RxPktSemaphore, TIME_WAITING_FOR_INPUT) == osOK)
 8024962:	e7df      	b.n	8024924 <ethernetif_input+0x10>
 8024964:	20004f24 	.word	0x20004f24

08024968 <ethernetif_init>:
 * @return ERR_OK if the loopif is initialized
 *         ERR_MEM if private data couldn't be allocated
 *         any other err_t on error
 */
err_t ethernetif_init(struct netif *netif)
{
 8024968:	b580      	push	{r7, lr}
 802496a:	b082      	sub	sp, #8
 802496c:	af00      	add	r7, sp, #0
 802496e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("netif != NULL", (netif != NULL));
 8024970:	687b      	ldr	r3, [r7, #4]
 8024972:	2b00      	cmp	r3, #0
 8024974:	d106      	bne.n	8024984 <ethernetif_init+0x1c>
 8024976:	4b0e      	ldr	r3, [pc, #56]	; (80249b0 <ethernetif_init+0x48>)
 8024978:	f240 12df 	movw	r2, #479	; 0x1df
 802497c:	490d      	ldr	r1, [pc, #52]	; (80249b4 <ethernetif_init+0x4c>)
 802497e:	480e      	ldr	r0, [pc, #56]	; (80249b8 <ethernetif_init+0x50>)
 8024980:	f011 fc0a 	bl	8036198 <iprintf>
   * The last argument should be replaced with your link speed, in units
   * of bits per second.
   */
  // MIB2_INIT_NETIF(netif, snmp_ifType_ethernet_csmacd, LINK_SPEED_OF_YOUR_NETIF_IN_BPS);

  netif->name[0] = IFNAME0;
 8024984:	687b      	ldr	r3, [r7, #4]
 8024986:	2273      	movs	r2, #115	; 0x73
 8024988:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
  netif->name[1] = IFNAME1;
 802498c:	687b      	ldr	r3, [r7, #4]
 802498e:	2274      	movs	r2, #116	; 0x74
 8024990:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
   * is available...) */

#if LWIP_IPV4
#if LWIP_ARP || LWIP_ETHERNET
#if LWIP_ARP
  netif->output = etharp_output;
 8024994:	687b      	ldr	r3, [r7, #4]
 8024996:	4a09      	ldr	r2, [pc, #36]	; (80249bc <ethernetif_init+0x54>)
 8024998:	615a      	str	r2, [r3, #20]

#if LWIP_IPV6
  netif->output_ip6 = ethip6_output;
#endif /* LWIP_IPV6 */

  netif->linkoutput = low_level_output;
 802499a:	687b      	ldr	r3, [r7, #4]
 802499c:	4a08      	ldr	r2, [pc, #32]	; (80249c0 <ethernetif_init+0x58>)
 802499e:	619a      	str	r2, [r3, #24]

  /* initialize the hardware */
  low_level_init(netif);
 80249a0:	6878      	ldr	r0, [r7, #4]
 80249a2:	f7ff fdd3 	bl	802454c <low_level_init>

  return ERR_OK;
 80249a6:	2300      	movs	r3, #0
}
 80249a8:	4618      	mov	r0, r3
 80249aa:	3708      	adds	r7, #8
 80249ac:	46bd      	mov	sp, r7
 80249ae:	bd80      	pop	{r7, pc}
 80249b0:	08037528 	.word	0x08037528
 80249b4:	08037544 	.word	0x08037544
 80249b8:	08037554 	.word	0x08037554
 80249bc:	080338dd 	.word	0x080338dd
 80249c0:	080247b9 	.word	0x080247b9

080249c4 <pbuf_free_custom>:
  * @brief  Custom Rx pbuf free callback
  * @param  pbuf: pbuf to be freed
  * @retval None
  */
void pbuf_free_custom(struct pbuf *p)
{
 80249c4:	b580      	push	{r7, lr}
 80249c6:	b084      	sub	sp, #16
 80249c8:	af00      	add	r7, sp, #0
 80249ca:	6078      	str	r0, [r7, #4]
  struct pbuf_custom* custom_pbuf = (struct pbuf_custom*)p;
 80249cc:	687b      	ldr	r3, [r7, #4]
 80249ce:	60fb      	str	r3, [r7, #12]
  LWIP_MEMPOOL_FREE(RX_POOL, custom_pbuf);
 80249d0:	68f9      	ldr	r1, [r7, #12]
 80249d2:	4809      	ldr	r0, [pc, #36]	; (80249f8 <pbuf_free_custom+0x34>)
 80249d4:	f006 fb9a 	bl	802b10c <memp_free_pool>

  /* If the Rx Buffer Pool was exhausted, signal the ethernetif_input task to
   * call HAL_ETH_GetRxDataBuffer to rebuild the Rx descriptors. */

  if (RxAllocStatus == RX_ALLOC_ERROR)
 80249d8:	4b08      	ldr	r3, [pc, #32]	; (80249fc <pbuf_free_custom+0x38>)
 80249da:	781b      	ldrb	r3, [r3, #0]
 80249dc:	2b01      	cmp	r3, #1
 80249de:	d107      	bne.n	80249f0 <pbuf_free_custom+0x2c>
  {
    RxAllocStatus = RX_ALLOC_OK;
 80249e0:	4b06      	ldr	r3, [pc, #24]	; (80249fc <pbuf_free_custom+0x38>)
 80249e2:	2200      	movs	r2, #0
 80249e4:	701a      	strb	r2, [r3, #0]
    osSemaphoreRelease(RxPktSemaphore);
 80249e6:	4b06      	ldr	r3, [pc, #24]	; (8024a00 <pbuf_free_custom+0x3c>)
 80249e8:	681b      	ldr	r3, [r3, #0]
 80249ea:	4618      	mov	r0, r3
 80249ec:	f000 fbd4 	bl	8025198 <osSemaphoreRelease>
  }
}
 80249f0:	bf00      	nop
 80249f2:	3710      	adds	r7, #16
 80249f4:	46bd      	mov	sp, r7
 80249f6:	bd80      	pop	{r7, pc}
 80249f8:	0803aa6c 	.word	0x0803aa6c
 80249fc:	20004de0 	.word	0x20004de0
 8024a00:	20004f24 	.word	0x20004f24

08024a04 <sys_now>:
*         when LWIP_TIMERS == 1 and NO_SYS == 1
* @param  None
* @retval Time
*/
u32_t sys_now(void)
{
 8024a04:	b580      	push	{r7, lr}
 8024a06:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 8024a08:	f7fc fda4 	bl	8021554 <HAL_GetTick>
 8024a0c:	4603      	mov	r3, r0
}
 8024a0e:	4618      	mov	r0, r3
 8024a10:	bd80      	pop	{r7, pc}
	...

08024a14 <HAL_ETH_MspInit>:
  * @param  ethHandle: ETH handle
  * @retval None
  */

void HAL_ETH_MspInit(ETH_HandleTypeDef* ethHandle)
{
 8024a14:	b580      	push	{r7, lr}
 8024a16:	b08e      	sub	sp, #56	; 0x38
 8024a18:	af00      	add	r7, sp, #0
 8024a1a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8024a1c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8024a20:	2200      	movs	r2, #0
 8024a22:	601a      	str	r2, [r3, #0]
 8024a24:	605a      	str	r2, [r3, #4]
 8024a26:	609a      	str	r2, [r3, #8]
 8024a28:	60da      	str	r2, [r3, #12]
 8024a2a:	611a      	str	r2, [r3, #16]
  if(ethHandle->Instance==ETH)
 8024a2c:	687b      	ldr	r3, [r7, #4]
 8024a2e:	681b      	ldr	r3, [r3, #0]
 8024a30:	4a4a      	ldr	r2, [pc, #296]	; (8024b5c <HAL_ETH_MspInit+0x148>)
 8024a32:	4293      	cmp	r3, r2
 8024a34:	f040 808d 	bne.w	8024b52 <HAL_ETH_MspInit+0x13e>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Enable Peripheral clock */
    __HAL_RCC_ETH_CLK_ENABLE();
 8024a38:	2300      	movs	r3, #0
 8024a3a:	623b      	str	r3, [r7, #32]
 8024a3c:	4b48      	ldr	r3, [pc, #288]	; (8024b60 <HAL_ETH_MspInit+0x14c>)
 8024a3e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8024a40:	4a47      	ldr	r2, [pc, #284]	; (8024b60 <HAL_ETH_MspInit+0x14c>)
 8024a42:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8024a46:	6313      	str	r3, [r2, #48]	; 0x30
 8024a48:	4b45      	ldr	r3, [pc, #276]	; (8024b60 <HAL_ETH_MspInit+0x14c>)
 8024a4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8024a4c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8024a50:	623b      	str	r3, [r7, #32]
 8024a52:	6a3b      	ldr	r3, [r7, #32]
 8024a54:	2300      	movs	r3, #0
 8024a56:	61fb      	str	r3, [r7, #28]
 8024a58:	4b41      	ldr	r3, [pc, #260]	; (8024b60 <HAL_ETH_MspInit+0x14c>)
 8024a5a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8024a5c:	4a40      	ldr	r2, [pc, #256]	; (8024b60 <HAL_ETH_MspInit+0x14c>)
 8024a5e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8024a62:	6313      	str	r3, [r2, #48]	; 0x30
 8024a64:	4b3e      	ldr	r3, [pc, #248]	; (8024b60 <HAL_ETH_MspInit+0x14c>)
 8024a66:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8024a68:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8024a6c:	61fb      	str	r3, [r7, #28]
 8024a6e:	69fb      	ldr	r3, [r7, #28]
 8024a70:	2300      	movs	r3, #0
 8024a72:	61bb      	str	r3, [r7, #24]
 8024a74:	4b3a      	ldr	r3, [pc, #232]	; (8024b60 <HAL_ETH_MspInit+0x14c>)
 8024a76:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8024a78:	4a39      	ldr	r2, [pc, #228]	; (8024b60 <HAL_ETH_MspInit+0x14c>)
 8024a7a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8024a7e:	6313      	str	r3, [r2, #48]	; 0x30
 8024a80:	4b37      	ldr	r3, [pc, #220]	; (8024b60 <HAL_ETH_MspInit+0x14c>)
 8024a82:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8024a84:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8024a88:	61bb      	str	r3, [r7, #24]
 8024a8a:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8024a8c:	2300      	movs	r3, #0
 8024a8e:	617b      	str	r3, [r7, #20]
 8024a90:	4b33      	ldr	r3, [pc, #204]	; (8024b60 <HAL_ETH_MspInit+0x14c>)
 8024a92:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8024a94:	4a32      	ldr	r2, [pc, #200]	; (8024b60 <HAL_ETH_MspInit+0x14c>)
 8024a96:	f043 0304 	orr.w	r3, r3, #4
 8024a9a:	6313      	str	r3, [r2, #48]	; 0x30
 8024a9c:	4b30      	ldr	r3, [pc, #192]	; (8024b60 <HAL_ETH_MspInit+0x14c>)
 8024a9e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8024aa0:	f003 0304 	and.w	r3, r3, #4
 8024aa4:	617b      	str	r3, [r7, #20]
 8024aa6:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8024aa8:	2300      	movs	r3, #0
 8024aaa:	613b      	str	r3, [r7, #16]
 8024aac:	4b2c      	ldr	r3, [pc, #176]	; (8024b60 <HAL_ETH_MspInit+0x14c>)
 8024aae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8024ab0:	4a2b      	ldr	r2, [pc, #172]	; (8024b60 <HAL_ETH_MspInit+0x14c>)
 8024ab2:	f043 0301 	orr.w	r3, r3, #1
 8024ab6:	6313      	str	r3, [r2, #48]	; 0x30
 8024ab8:	4b29      	ldr	r3, [pc, #164]	; (8024b60 <HAL_ETH_MspInit+0x14c>)
 8024aba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8024abc:	f003 0301 	and.w	r3, r3, #1
 8024ac0:	613b      	str	r3, [r7, #16]
 8024ac2:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8024ac4:	2300      	movs	r3, #0
 8024ac6:	60fb      	str	r3, [r7, #12]
 8024ac8:	4b25      	ldr	r3, [pc, #148]	; (8024b60 <HAL_ETH_MspInit+0x14c>)
 8024aca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8024acc:	4a24      	ldr	r2, [pc, #144]	; (8024b60 <HAL_ETH_MspInit+0x14c>)
 8024ace:	f043 0302 	orr.w	r3, r3, #2
 8024ad2:	6313      	str	r3, [r2, #48]	; 0x30
 8024ad4:	4b22      	ldr	r3, [pc, #136]	; (8024b60 <HAL_ETH_MspInit+0x14c>)
 8024ad6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8024ad8:	f003 0302 	and.w	r3, r3, #2
 8024adc:	60fb      	str	r3, [r7, #12]
 8024ade:	68fb      	ldr	r3, [r7, #12]
    PC5     ------> ETH_RXD1
    PB11     ------> ETH_TX_EN
    PB12     ------> ETH_TXD0
    PB13     ------> ETH_TXD1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 8024ae0:	2332      	movs	r3, #50	; 0x32
 8024ae2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8024ae4:	2302      	movs	r3, #2
 8024ae6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8024ae8:	2300      	movs	r3, #0
 8024aea:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8024aec:	2303      	movs	r3, #3
 8024aee:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8024af0:	230b      	movs	r3, #11
 8024af2:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8024af4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8024af8:	4619      	mov	r1, r3
 8024afa:	481a      	ldr	r0, [pc, #104]	; (8024b64 <HAL_ETH_MspInit+0x150>)
 8024afc:	f7fe f88c 	bl	8022c18 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_7;
 8024b00:	2386      	movs	r3, #134	; 0x86
 8024b02:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8024b04:	2302      	movs	r3, #2
 8024b06:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8024b08:	2300      	movs	r3, #0
 8024b0a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8024b0c:	2303      	movs	r3, #3
 8024b0e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8024b10:	230b      	movs	r3, #11
 8024b12:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8024b14:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8024b18:	4619      	mov	r1, r3
 8024b1a:	4813      	ldr	r0, [pc, #76]	; (8024b68 <HAL_ETH_MspInit+0x154>)
 8024b1c:	f7fe f87c 	bl	8022c18 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13;
 8024b20:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8024b24:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8024b26:	2302      	movs	r3, #2
 8024b28:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8024b2a:	2300      	movs	r3, #0
 8024b2c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8024b2e:	2303      	movs	r3, #3
 8024b30:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8024b32:	230b      	movs	r3, #11
 8024b34:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8024b36:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8024b3a:	4619      	mov	r1, r3
 8024b3c:	480b      	ldr	r0, [pc, #44]	; (8024b6c <HAL_ETH_MspInit+0x158>)
 8024b3e:	f7fe f86b 	bl	8022c18 <HAL_GPIO_Init>

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(ETH_IRQn, 5, 0);
 8024b42:	2200      	movs	r2, #0
 8024b44:	2105      	movs	r1, #5
 8024b46:	203d      	movs	r0, #61	; 0x3d
 8024b48:	f7fc fdec 	bl	8021724 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ETH_IRQn);
 8024b4c:	203d      	movs	r0, #61	; 0x3d
 8024b4e:	f7fc fe05 	bl	802175c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }
}
 8024b52:	bf00      	nop
 8024b54:	3738      	adds	r7, #56	; 0x38
 8024b56:	46bd      	mov	sp, r7
 8024b58:	bd80      	pop	{r7, pc}
 8024b5a:	bf00      	nop
 8024b5c:	40028000 	.word	0x40028000
 8024b60:	40023800 	.word	0x40023800
 8024b64:	40020800 	.word	0x40020800
 8024b68:	40020000 	.word	0x40020000
 8024b6c:	40020400 	.word	0x40020400

08024b70 <ETH_PHY_IO_Init>:
  * @brief  Initializes the MDIO interface GPIO and clocks.
  * @param  None
  * @retval 0 if OK, -1 if ERROR
  */
int32_t ETH_PHY_IO_Init(void)
{
 8024b70:	b580      	push	{r7, lr}
 8024b72:	af00      	add	r7, sp, #0
  /* We assume that MDIO GPIO configuration is already done
     in the ETH_MspInit() else it should be done here
  */

  /* Configure the MDIO Clock */
  HAL_ETH_SetMDIOClockRange(&heth);
 8024b74:	4802      	ldr	r0, [pc, #8]	; (8024b80 <ETH_PHY_IO_Init+0x10>)
 8024b76:	f7fd fbe7 	bl	8022348 <HAL_ETH_SetMDIOClockRange>

  return 0;
 8024b7a:	2300      	movs	r3, #0
}
 8024b7c:	4618      	mov	r0, r3
 8024b7e:	bd80      	pop	{r7, pc}
 8024b80:	20004f2c 	.word	0x20004f2c

08024b84 <ETH_PHY_IO_DeInit>:
  * @brief  De-Initializes the MDIO interface .
  * @param  None
  * @retval 0 if OK, -1 if ERROR
  */
int32_t ETH_PHY_IO_DeInit (void)
{
 8024b84:	b480      	push	{r7}
 8024b86:	af00      	add	r7, sp, #0
  return 0;
 8024b88:	2300      	movs	r3, #0
}
 8024b8a:	4618      	mov	r0, r3
 8024b8c:	46bd      	mov	sp, r7
 8024b8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8024b92:	4770      	bx	lr

08024b94 <ETH_PHY_IO_ReadReg>:
  * @param  RegAddr: PHY register address
  * @param  pRegVal: pointer to hold the register value
  * @retval 0 if OK -1 if Error
  */
int32_t ETH_PHY_IO_ReadReg(uint32_t DevAddr, uint32_t RegAddr, uint32_t *pRegVal)
{
 8024b94:	b580      	push	{r7, lr}
 8024b96:	b084      	sub	sp, #16
 8024b98:	af00      	add	r7, sp, #0
 8024b9a:	60f8      	str	r0, [r7, #12]
 8024b9c:	60b9      	str	r1, [r7, #8]
 8024b9e:	607a      	str	r2, [r7, #4]
  if(HAL_ETH_ReadPHYRegister(&heth, DevAddr, RegAddr, pRegVal) != HAL_OK)
 8024ba0:	687b      	ldr	r3, [r7, #4]
 8024ba2:	68ba      	ldr	r2, [r7, #8]
 8024ba4:	68f9      	ldr	r1, [r7, #12]
 8024ba6:	4807      	ldr	r0, [pc, #28]	; (8024bc4 <ETH_PHY_IO_ReadReg+0x30>)
 8024ba8:	f7fd fa36 	bl	8022018 <HAL_ETH_ReadPHYRegister>
 8024bac:	4603      	mov	r3, r0
 8024bae:	2b00      	cmp	r3, #0
 8024bb0:	d002      	beq.n	8024bb8 <ETH_PHY_IO_ReadReg+0x24>
  {
    return -1;
 8024bb2:	f04f 33ff 	mov.w	r3, #4294967295
 8024bb6:	e000      	b.n	8024bba <ETH_PHY_IO_ReadReg+0x26>
  }

  return 0;
 8024bb8:	2300      	movs	r3, #0
}
 8024bba:	4618      	mov	r0, r3
 8024bbc:	3710      	adds	r7, #16
 8024bbe:	46bd      	mov	sp, r7
 8024bc0:	bd80      	pop	{r7, pc}
 8024bc2:	bf00      	nop
 8024bc4:	20004f2c 	.word	0x20004f2c

08024bc8 <ETH_PHY_IO_WriteReg>:
  * @param  RegAddr: PHY register address
  * @param  RegVal: Value to be written
  * @retval 0 if OK -1 if Error
  */
int32_t ETH_PHY_IO_WriteReg(uint32_t DevAddr, uint32_t RegAddr, uint32_t RegVal)
{
 8024bc8:	b580      	push	{r7, lr}
 8024bca:	b084      	sub	sp, #16
 8024bcc:	af00      	add	r7, sp, #0
 8024bce:	60f8      	str	r0, [r7, #12]
 8024bd0:	60b9      	str	r1, [r7, #8]
 8024bd2:	607a      	str	r2, [r7, #4]
  if(HAL_ETH_WritePHYRegister(&heth, DevAddr, RegAddr, RegVal) != HAL_OK)
 8024bd4:	687b      	ldr	r3, [r7, #4]
 8024bd6:	68ba      	ldr	r2, [r7, #8]
 8024bd8:	68f9      	ldr	r1, [r7, #12]
 8024bda:	4807      	ldr	r0, [pc, #28]	; (8024bf8 <ETH_PHY_IO_WriteReg+0x30>)
 8024bdc:	f7fd fa67 	bl	80220ae <HAL_ETH_WritePHYRegister>
 8024be0:	4603      	mov	r3, r0
 8024be2:	2b00      	cmp	r3, #0
 8024be4:	d002      	beq.n	8024bec <ETH_PHY_IO_WriteReg+0x24>
  {
    return -1;
 8024be6:	f04f 33ff 	mov.w	r3, #4294967295
 8024bea:	e000      	b.n	8024bee <ETH_PHY_IO_WriteReg+0x26>
  }

  return 0;
 8024bec:	2300      	movs	r3, #0
}
 8024bee:	4618      	mov	r0, r3
 8024bf0:	3710      	adds	r7, #16
 8024bf2:	46bd      	mov	sp, r7
 8024bf4:	bd80      	pop	{r7, pc}
 8024bf6:	bf00      	nop
 8024bf8:	20004f2c 	.word	0x20004f2c

08024bfc <ETH_PHY_IO_GetTick>:
/**
  * @brief  Get the time in millisecons used for internal PHY driver process.
  * @retval Time value
  */
int32_t ETH_PHY_IO_GetTick(void)
{
 8024bfc:	b580      	push	{r7, lr}
 8024bfe:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 8024c00:	f7fc fca8 	bl	8021554 <HAL_GetTick>
 8024c04:	4603      	mov	r3, r0
}
 8024c06:	4618      	mov	r0, r3
 8024c08:	bd80      	pop	{r7, pc}
	...

08024c0c <ethernet_link_thread>:
  * @brief  Check the ETH link state then update ETH driver and netif link accordingly.
  * @retval None
  */

void ethernet_link_thread(void const * argument)
{
 8024c0c:	b580      	push	{r7, lr}
 8024c0e:	b0a0      	sub	sp, #128	; 0x80
 8024c10:	af00      	add	r7, sp, #0
 8024c12:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef MACConf = {0};
 8024c14:	f107 0308 	add.w	r3, r7, #8
 8024c18:	2264      	movs	r2, #100	; 0x64
 8024c1a:	2100      	movs	r1, #0
 8024c1c:	4618      	mov	r0, r3
 8024c1e:	f011 f9d3 	bl	8035fc8 <memset>
  int32_t PHYLinkState = 0;
 8024c22:	2300      	movs	r3, #0
 8024c24:	673b      	str	r3, [r7, #112]	; 0x70
  uint32_t linkchanged = 0U, speed = 0U, duplex = 0U;
 8024c26:	2300      	movs	r3, #0
 8024c28:	67fb      	str	r3, [r7, #124]	; 0x7c
 8024c2a:	2300      	movs	r3, #0
 8024c2c:	67bb      	str	r3, [r7, #120]	; 0x78
 8024c2e:	2300      	movs	r3, #0
 8024c30:	677b      	str	r3, [r7, #116]	; 0x74

  struct netif *netif = (struct netif *) argument;
 8024c32:	687b      	ldr	r3, [r7, #4]
 8024c34:	66fb      	str	r3, [r7, #108]	; 0x6c

/* USER CODE END ETH link init */

  for(;;)
  {
  PHYLinkState = LAN8742_GetLinkState(&LAN8742);
 8024c36:	483a      	ldr	r0, [pc, #232]	; (8024d20 <ethernet_link_thread+0x114>)
 8024c38:	f7fc fbcf 	bl	80213da <LAN8742_GetLinkState>
 8024c3c:	6738      	str	r0, [r7, #112]	; 0x70

  if(netif_is_link_up(netif) && (PHYLinkState <= LAN8742_STATUS_LINK_DOWN))
 8024c3e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8024c40:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8024c44:	089b      	lsrs	r3, r3, #2
 8024c46:	f003 0301 	and.w	r3, r3, #1
 8024c4a:	b2db      	uxtb	r3, r3
 8024c4c:	2b00      	cmp	r3, #0
 8024c4e:	d00c      	beq.n	8024c6a <ethernet_link_thread+0x5e>
 8024c50:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8024c52:	2b01      	cmp	r3, #1
 8024c54:	dc09      	bgt.n	8024c6a <ethernet_link_thread+0x5e>
  {
    HAL_ETH_Stop_IT(&heth);
 8024c56:	4833      	ldr	r0, [pc, #204]	; (8024d24 <ethernet_link_thread+0x118>)
 8024c58:	f7fc fe9a 	bl	8021990 <HAL_ETH_Stop_IT>
    netif_set_down(netif);
 8024c5c:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8024c5e:	f006 fcd9 	bl	802b614 <netif_set_down>
    netif_set_link_down(netif);
 8024c62:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8024c64:	f006 fd3c 	bl	802b6e0 <netif_set_link_down>
 8024c68:	e055      	b.n	8024d16 <ethernet_link_thread+0x10a>
  }
  else if(!netif_is_link_up(netif) && (PHYLinkState > LAN8742_STATUS_LINK_DOWN))
 8024c6a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8024c6c:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8024c70:	f003 0304 	and.w	r3, r3, #4
 8024c74:	2b00      	cmp	r3, #0
 8024c76:	d14e      	bne.n	8024d16 <ethernet_link_thread+0x10a>
 8024c78:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8024c7a:	2b01      	cmp	r3, #1
 8024c7c:	dd4b      	ble.n	8024d16 <ethernet_link_thread+0x10a>
  {
    switch (PHYLinkState)
 8024c7e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8024c80:	3b02      	subs	r3, #2
 8024c82:	2b03      	cmp	r3, #3
 8024c84:	d82a      	bhi.n	8024cdc <ethernet_link_thread+0xd0>
 8024c86:	a201      	add	r2, pc, #4	; (adr r2, 8024c8c <ethernet_link_thread+0x80>)
 8024c88:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8024c8c:	08024c9d 	.word	0x08024c9d
 8024c90:	08024caf 	.word	0x08024caf
 8024c94:	08024cbf 	.word	0x08024cbf
 8024c98:	08024ccf 	.word	0x08024ccf
    {
    case LAN8742_STATUS_100MBITS_FULLDUPLEX:
      duplex = ETH_FULLDUPLEX_MODE;
 8024c9c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8024ca0:	677b      	str	r3, [r7, #116]	; 0x74
      speed = ETH_SPEED_100M;
 8024ca2:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8024ca6:	67bb      	str	r3, [r7, #120]	; 0x78
      linkchanged = 1;
 8024ca8:	2301      	movs	r3, #1
 8024caa:	67fb      	str	r3, [r7, #124]	; 0x7c
      break;
 8024cac:	e017      	b.n	8024cde <ethernet_link_thread+0xd2>
    case LAN8742_STATUS_100MBITS_HALFDUPLEX:
      duplex = ETH_HALFDUPLEX_MODE;
 8024cae:	2300      	movs	r3, #0
 8024cb0:	677b      	str	r3, [r7, #116]	; 0x74
      speed = ETH_SPEED_100M;
 8024cb2:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8024cb6:	67bb      	str	r3, [r7, #120]	; 0x78
      linkchanged = 1;
 8024cb8:	2301      	movs	r3, #1
 8024cba:	67fb      	str	r3, [r7, #124]	; 0x7c
      break;
 8024cbc:	e00f      	b.n	8024cde <ethernet_link_thread+0xd2>
    case LAN8742_STATUS_10MBITS_FULLDUPLEX:
      duplex = ETH_FULLDUPLEX_MODE;
 8024cbe:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8024cc2:	677b      	str	r3, [r7, #116]	; 0x74
      speed = ETH_SPEED_10M;
 8024cc4:	2300      	movs	r3, #0
 8024cc6:	67bb      	str	r3, [r7, #120]	; 0x78
      linkchanged = 1;
 8024cc8:	2301      	movs	r3, #1
 8024cca:	67fb      	str	r3, [r7, #124]	; 0x7c
      break;
 8024ccc:	e007      	b.n	8024cde <ethernet_link_thread+0xd2>
    case LAN8742_STATUS_10MBITS_HALFDUPLEX:
      duplex = ETH_HALFDUPLEX_MODE;
 8024cce:	2300      	movs	r3, #0
 8024cd0:	677b      	str	r3, [r7, #116]	; 0x74
      speed = ETH_SPEED_10M;
 8024cd2:	2300      	movs	r3, #0
 8024cd4:	67bb      	str	r3, [r7, #120]	; 0x78
      linkchanged = 1;
 8024cd6:	2301      	movs	r3, #1
 8024cd8:	67fb      	str	r3, [r7, #124]	; 0x7c
      break;
 8024cda:	e000      	b.n	8024cde <ethernet_link_thread+0xd2>
    default:
      break;
 8024cdc:	bf00      	nop
    }

    if(linkchanged)
 8024cde:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8024ce0:	2b00      	cmp	r3, #0
 8024ce2:	d018      	beq.n	8024d16 <ethernet_link_thread+0x10a>
    {
      /* Get MAC Config MAC */
      HAL_ETH_GetMACConfig(&heth, &MACConf);
 8024ce4:	f107 0308 	add.w	r3, r7, #8
 8024ce8:	4619      	mov	r1, r3
 8024cea:	480e      	ldr	r0, [pc, #56]	; (8024d24 <ethernet_link_thread+0x118>)
 8024cec:	f7fd fa28 	bl	8022140 <HAL_ETH_GetMACConfig>
      MACConf.DuplexMode = duplex;
 8024cf0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8024cf2:	623b      	str	r3, [r7, #32]
      MACConf.Speed = speed;
 8024cf4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8024cf6:	61fb      	str	r3, [r7, #28]
      HAL_ETH_SetMACConfig(&heth, &MACConf);
 8024cf8:	f107 0308 	add.w	r3, r7, #8
 8024cfc:	4619      	mov	r1, r3
 8024cfe:	4809      	ldr	r0, [pc, #36]	; (8024d24 <ethernet_link_thread+0x118>)
 8024d00:	f7fd fb08 	bl	8022314 <HAL_ETH_SetMACConfig>
      HAL_ETH_Start_IT(&heth);
 8024d04:	4807      	ldr	r0, [pc, #28]	; (8024d24 <ethernet_link_thread+0x118>)
 8024d06:	f7fc fdb5 	bl	8021874 <HAL_ETH_Start_IT>
      netif_set_up(netif);
 8024d0a:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8024d0c:	f006 fc16 	bl	802b53c <netif_set_up>
      netif_set_link_up(netif);
 8024d10:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8024d12:	f006 fcb1 	bl	802b678 <netif_set_link_up>

/* USER CODE BEGIN ETH link Thread core code for User BSP */

/* USER CODE END ETH link Thread core code for User BSP */

    osDelay(100);
 8024d16:	2064      	movs	r0, #100	; 0x64
 8024d18:	f000 f90e 	bl	8024f38 <osDelay>
  PHYLinkState = LAN8742_GetLinkState(&LAN8742);
 8024d1c:	e78b      	b.n	8024c36 <ethernet_link_thread+0x2a>
 8024d1e:	bf00      	nop
 8024d20:	20005014 	.word	0x20005014
 8024d24:	20004f2c 	.word	0x20004f2c

08024d28 <HAL_ETH_RxAllocateCallback>:
  }
}

void HAL_ETH_RxAllocateCallback(uint8_t **buff)
{
 8024d28:	b580      	push	{r7, lr}
 8024d2a:	b086      	sub	sp, #24
 8024d2c:	af02      	add	r7, sp, #8
 8024d2e:	6078      	str	r0, [r7, #4]
/* USER CODE BEGIN HAL ETH RxAllocateCallback */
  struct pbuf_custom *p = LWIP_MEMPOOL_ALLOC(RX_POOL);
 8024d30:	4812      	ldr	r0, [pc, #72]	; (8024d7c <HAL_ETH_RxAllocateCallback+0x54>)
 8024d32:	f006 f971 	bl	802b018 <memp_malloc_pool>
 8024d36:	60f8      	str	r0, [r7, #12]
  if (p)
 8024d38:	68fb      	ldr	r3, [r7, #12]
 8024d3a:	2b00      	cmp	r3, #0
 8024d3c:	d014      	beq.n	8024d68 <HAL_ETH_RxAllocateCallback+0x40>
  {
    /* Get the buff from the struct pbuf address. */
    *buff = (uint8_t *)p + offsetof(RxBuff_t, buff);
 8024d3e:	68fb      	ldr	r3, [r7, #12]
 8024d40:	f103 0220 	add.w	r2, r3, #32
 8024d44:	687b      	ldr	r3, [r7, #4]
 8024d46:	601a      	str	r2, [r3, #0]
    p->custom_free_function = pbuf_free_custom;
 8024d48:	68fb      	ldr	r3, [r7, #12]
 8024d4a:	4a0d      	ldr	r2, [pc, #52]	; (8024d80 <HAL_ETH_RxAllocateCallback+0x58>)
 8024d4c:	611a      	str	r2, [r3, #16]
    /* Initialize the struct pbuf.
    * This must be performed whenever a buffer's allocated because it may be
    * changed by lwIP or the app, e.g., pbuf_free decrements ref. */
    pbuf_alloced_custom(PBUF_RAW, 0, PBUF_REF, p, *buff, ETH_RX_BUF_SIZE);
 8024d4e:	687b      	ldr	r3, [r7, #4]
 8024d50:	681b      	ldr	r3, [r3, #0]
 8024d52:	f44f 62c0 	mov.w	r2, #1536	; 0x600
 8024d56:	9201      	str	r2, [sp, #4]
 8024d58:	9300      	str	r3, [sp, #0]
 8024d5a:	68fb      	ldr	r3, [r7, #12]
 8024d5c:	2241      	movs	r2, #65	; 0x41
 8024d5e:	2100      	movs	r1, #0
 8024d60:	2000      	movs	r0, #0
 8024d62:	f006 fee1 	bl	802bb28 <pbuf_alloced_custom>
  {
    RxAllocStatus = RX_ALLOC_ERROR;
    *buff = NULL;
  }
/* USER CODE END HAL ETH RxAllocateCallback */
}
 8024d66:	e005      	b.n	8024d74 <HAL_ETH_RxAllocateCallback+0x4c>
    RxAllocStatus = RX_ALLOC_ERROR;
 8024d68:	4b06      	ldr	r3, [pc, #24]	; (8024d84 <HAL_ETH_RxAllocateCallback+0x5c>)
 8024d6a:	2201      	movs	r2, #1
 8024d6c:	701a      	strb	r2, [r3, #0]
    *buff = NULL;
 8024d6e:	687b      	ldr	r3, [r7, #4]
 8024d70:	2200      	movs	r2, #0
 8024d72:	601a      	str	r2, [r3, #0]
}
 8024d74:	bf00      	nop
 8024d76:	3710      	adds	r7, #16
 8024d78:	46bd      	mov	sp, r7
 8024d7a:	bd80      	pop	{r7, pc}
 8024d7c:	0803aa6c 	.word	0x0803aa6c
 8024d80:	080249c5 	.word	0x080249c5
 8024d84:	20004de0 	.word	0x20004de0

08024d88 <HAL_ETH_RxLinkCallback>:

void HAL_ETH_RxLinkCallback(void **pStart, void **pEnd, uint8_t *buff, uint16_t Length)
{
 8024d88:	b480      	push	{r7}
 8024d8a:	b089      	sub	sp, #36	; 0x24
 8024d8c:	af00      	add	r7, sp, #0
 8024d8e:	60f8      	str	r0, [r7, #12]
 8024d90:	60b9      	str	r1, [r7, #8]
 8024d92:	607a      	str	r2, [r7, #4]
 8024d94:	807b      	strh	r3, [r7, #2]
/* USER CODE BEGIN HAL ETH RxLinkCallback */

  struct pbuf **ppStart = (struct pbuf **)pStart;
 8024d96:	68fb      	ldr	r3, [r7, #12]
 8024d98:	61bb      	str	r3, [r7, #24]
  struct pbuf **ppEnd = (struct pbuf **)pEnd;
 8024d9a:	68bb      	ldr	r3, [r7, #8]
 8024d9c:	617b      	str	r3, [r7, #20]
  struct pbuf *p = NULL;
 8024d9e:	2300      	movs	r3, #0
 8024da0:	61fb      	str	r3, [r7, #28]

  /* Get the struct pbuf from the buff address. */
  p = (struct pbuf *)(buff - offsetof(RxBuff_t, buff));
 8024da2:	687b      	ldr	r3, [r7, #4]
 8024da4:	3b20      	subs	r3, #32
 8024da6:	61fb      	str	r3, [r7, #28]
  p->next = NULL;
 8024da8:	69fb      	ldr	r3, [r7, #28]
 8024daa:	2200      	movs	r2, #0
 8024dac:	601a      	str	r2, [r3, #0]
  p->tot_len = 0;
 8024dae:	69fb      	ldr	r3, [r7, #28]
 8024db0:	2200      	movs	r2, #0
 8024db2:	811a      	strh	r2, [r3, #8]
  p->len = Length;
 8024db4:	69fb      	ldr	r3, [r7, #28]
 8024db6:	887a      	ldrh	r2, [r7, #2]
 8024db8:	815a      	strh	r2, [r3, #10]

  /* Chain the buffer. */
  if (!*ppStart)
 8024dba:	69bb      	ldr	r3, [r7, #24]
 8024dbc:	681b      	ldr	r3, [r3, #0]
 8024dbe:	2b00      	cmp	r3, #0
 8024dc0:	d103      	bne.n	8024dca <HAL_ETH_RxLinkCallback+0x42>
  {
    /* The first buffer of the packet. */
    *ppStart = p;
 8024dc2:	69bb      	ldr	r3, [r7, #24]
 8024dc4:	69fa      	ldr	r2, [r7, #28]
 8024dc6:	601a      	str	r2, [r3, #0]
 8024dc8:	e003      	b.n	8024dd2 <HAL_ETH_RxLinkCallback+0x4a>
  }
  else
  {
    /* Chain the buffer to the end of the packet. */
    (*ppEnd)->next = p;
 8024dca:	697b      	ldr	r3, [r7, #20]
 8024dcc:	681b      	ldr	r3, [r3, #0]
 8024dce:	69fa      	ldr	r2, [r7, #28]
 8024dd0:	601a      	str	r2, [r3, #0]
  }
  *ppEnd  = p;
 8024dd2:	697b      	ldr	r3, [r7, #20]
 8024dd4:	69fa      	ldr	r2, [r7, #28]
 8024dd6:	601a      	str	r2, [r3, #0]

  /* Update the total length of all the buffers of the chain. Each pbuf in the chain should have its tot_len
   * set to its own length, plus the length of all the following pbufs in the chain. */
  for (p = *ppStart; p != NULL; p = p->next)
 8024dd8:	69bb      	ldr	r3, [r7, #24]
 8024dda:	681b      	ldr	r3, [r3, #0]
 8024ddc:	61fb      	str	r3, [r7, #28]
 8024dde:	e009      	b.n	8024df4 <HAL_ETH_RxLinkCallback+0x6c>
  {
    p->tot_len += Length;
 8024de0:	69fb      	ldr	r3, [r7, #28]
 8024de2:	891a      	ldrh	r2, [r3, #8]
 8024de4:	887b      	ldrh	r3, [r7, #2]
 8024de6:	4413      	add	r3, r2
 8024de8:	b29a      	uxth	r2, r3
 8024dea:	69fb      	ldr	r3, [r7, #28]
 8024dec:	811a      	strh	r2, [r3, #8]
  for (p = *ppStart; p != NULL; p = p->next)
 8024dee:	69fb      	ldr	r3, [r7, #28]
 8024df0:	681b      	ldr	r3, [r3, #0]
 8024df2:	61fb      	str	r3, [r7, #28]
 8024df4:	69fb      	ldr	r3, [r7, #28]
 8024df6:	2b00      	cmp	r3, #0
 8024df8:	d1f2      	bne.n	8024de0 <HAL_ETH_RxLinkCallback+0x58>
  }

/* USER CODE END HAL ETH RxLinkCallback */
}
 8024dfa:	bf00      	nop
 8024dfc:	bf00      	nop
 8024dfe:	3724      	adds	r7, #36	; 0x24
 8024e00:	46bd      	mov	sp, r7
 8024e02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8024e06:	4770      	bx	lr

08024e08 <HAL_ETH_TxFreeCallback>:

void HAL_ETH_TxFreeCallback(uint32_t * buff)
{
 8024e08:	b580      	push	{r7, lr}
 8024e0a:	b082      	sub	sp, #8
 8024e0c:	af00      	add	r7, sp, #0
 8024e0e:	6078      	str	r0, [r7, #4]
/* USER CODE BEGIN HAL ETH TxFreeCallback */

  pbuf_free((struct pbuf *)buff);
 8024e10:	6878      	ldr	r0, [r7, #4]
 8024e12:	f007 f843 	bl	802be9c <pbuf_free>

/* USER CODE END HAL ETH TxFreeCallback */
}
 8024e16:	bf00      	nop
 8024e18:	3708      	adds	r7, #8
 8024e1a:	46bd      	mov	sp, r7
 8024e1c:	bd80      	pop	{r7, pc}

08024e1e <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8024e1e:	b480      	push	{r7}
 8024e20:	b085      	sub	sp, #20
 8024e22:	af00      	add	r7, sp, #0
 8024e24:	4603      	mov	r3, r0
 8024e26:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8024e28:	2300      	movs	r3, #0
 8024e2a:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8024e2c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8024e30:	2b84      	cmp	r3, #132	; 0x84
 8024e32:	d005      	beq.n	8024e40 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8024e34:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8024e38:	68fb      	ldr	r3, [r7, #12]
 8024e3a:	4413      	add	r3, r2
 8024e3c:	3303      	adds	r3, #3
 8024e3e:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8024e40:	68fb      	ldr	r3, [r7, #12]
}
 8024e42:	4618      	mov	r0, r3
 8024e44:	3714      	adds	r7, #20
 8024e46:	46bd      	mov	sp, r7
 8024e48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8024e4c:	4770      	bx	lr

08024e4e <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 8024e4e:	b480      	push	{r7}
 8024e50:	b083      	sub	sp, #12
 8024e52:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8024e54:	f3ef 8305 	mrs	r3, IPSR
 8024e58:	607b      	str	r3, [r7, #4]
  return(result);
 8024e5a:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 8024e5c:	2b00      	cmp	r3, #0
 8024e5e:	bf14      	ite	ne
 8024e60:	2301      	movne	r3, #1
 8024e62:	2300      	moveq	r3, #0
 8024e64:	b2db      	uxtb	r3, r3
}
 8024e66:	4618      	mov	r0, r3
 8024e68:	370c      	adds	r7, #12
 8024e6a:	46bd      	mov	sp, r7
 8024e6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8024e70:	4770      	bx	lr

08024e72 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8024e72:	b580      	push	{r7, lr}
 8024e74:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8024e76:	f001 fdcb 	bl	8026a10 <vTaskStartScheduler>
  
  return osOK;
 8024e7a:	2300      	movs	r3, #0
}
 8024e7c:	4618      	mov	r0, r3
 8024e7e:	bd80      	pop	{r7, pc}

08024e80 <osKernelSysTick>:
* @param  None
* @retval None
* @note   MUST REMAIN UNCHANGED: \b osKernelSysTick shall be consistent in every CMSIS-RTOS.
*/
uint32_t osKernelSysTick(void)
{
 8024e80:	b580      	push	{r7, lr}
 8024e82:	af00      	add	r7, sp, #0
  if (inHandlerMode()) {
 8024e84:	f7ff ffe3 	bl	8024e4e <inHandlerMode>
 8024e88:	4603      	mov	r3, r0
 8024e8a:	2b00      	cmp	r3, #0
 8024e8c:	d003      	beq.n	8024e96 <osKernelSysTick+0x16>
    return xTaskGetTickCountFromISR();
 8024e8e:	f001 fee3 	bl	8026c58 <xTaskGetTickCountFromISR>
 8024e92:	4603      	mov	r3, r0
 8024e94:	e002      	b.n	8024e9c <osKernelSysTick+0x1c>
  }
  else {
    return xTaskGetTickCount();
 8024e96:	f001 fecf 	bl	8026c38 <xTaskGetTickCount>
 8024e9a:	4603      	mov	r3, r0
  }
}
 8024e9c:	4618      	mov	r0, r3
 8024e9e:	bd80      	pop	{r7, pc}

08024ea0 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8024ea0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8024ea2:	b089      	sub	sp, #36	; 0x24
 8024ea4:	af04      	add	r7, sp, #16
 8024ea6:	6078      	str	r0, [r7, #4]
 8024ea8:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8024eaa:	687b      	ldr	r3, [r7, #4]
 8024eac:	695b      	ldr	r3, [r3, #20]
 8024eae:	2b00      	cmp	r3, #0
 8024eb0:	d020      	beq.n	8024ef4 <osThreadCreate+0x54>
 8024eb2:	687b      	ldr	r3, [r7, #4]
 8024eb4:	699b      	ldr	r3, [r3, #24]
 8024eb6:	2b00      	cmp	r3, #0
 8024eb8:	d01c      	beq.n	8024ef4 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8024eba:	687b      	ldr	r3, [r7, #4]
 8024ebc:	685c      	ldr	r4, [r3, #4]
 8024ebe:	687b      	ldr	r3, [r7, #4]
 8024ec0:	681d      	ldr	r5, [r3, #0]
 8024ec2:	687b      	ldr	r3, [r7, #4]
 8024ec4:	691e      	ldr	r6, [r3, #16]
 8024ec6:	687b      	ldr	r3, [r7, #4]
 8024ec8:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8024ecc:	4618      	mov	r0, r3
 8024ece:	f7ff ffa6 	bl	8024e1e <makeFreeRtosPriority>
 8024ed2:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 8024ed4:	687b      	ldr	r3, [r7, #4]
 8024ed6:	695b      	ldr	r3, [r3, #20]
 8024ed8:	687a      	ldr	r2, [r7, #4]
 8024eda:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8024edc:	9202      	str	r2, [sp, #8]
 8024ede:	9301      	str	r3, [sp, #4]
 8024ee0:	9100      	str	r1, [sp, #0]
 8024ee2:	683b      	ldr	r3, [r7, #0]
 8024ee4:	4632      	mov	r2, r6
 8024ee6:	4629      	mov	r1, r5
 8024ee8:	4620      	mov	r0, r4
 8024eea:	f001 fb23 	bl	8026534 <xTaskCreateStatic>
 8024eee:	4603      	mov	r3, r0
 8024ef0:	60fb      	str	r3, [r7, #12]
 8024ef2:	e01c      	b.n	8024f2e <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8024ef4:	687b      	ldr	r3, [r7, #4]
 8024ef6:	685c      	ldr	r4, [r3, #4]
 8024ef8:	687b      	ldr	r3, [r7, #4]
 8024efa:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8024efc:	687b      	ldr	r3, [r7, #4]
 8024efe:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8024f00:	b29e      	uxth	r6, r3
 8024f02:	687b      	ldr	r3, [r7, #4]
 8024f04:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8024f08:	4618      	mov	r0, r3
 8024f0a:	f7ff ff88 	bl	8024e1e <makeFreeRtosPriority>
 8024f0e:	4602      	mov	r2, r0
 8024f10:	f107 030c 	add.w	r3, r7, #12
 8024f14:	9301      	str	r3, [sp, #4]
 8024f16:	9200      	str	r2, [sp, #0]
 8024f18:	683b      	ldr	r3, [r7, #0]
 8024f1a:	4632      	mov	r2, r6
 8024f1c:	4629      	mov	r1, r5
 8024f1e:	4620      	mov	r0, r4
 8024f20:	f001 fb65 	bl	80265ee <xTaskCreate>
 8024f24:	4603      	mov	r3, r0
 8024f26:	2b01      	cmp	r3, #1
 8024f28:	d001      	beq.n	8024f2e <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8024f2a:	2300      	movs	r3, #0
 8024f2c:	e000      	b.n	8024f30 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8024f2e:	68fb      	ldr	r3, [r7, #12]
}
 8024f30:	4618      	mov	r0, r3
 8024f32:	3714      	adds	r7, #20
 8024f34:	46bd      	mov	sp, r7
 8024f36:	bdf0      	pop	{r4, r5, r6, r7, pc}

08024f38 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8024f38:	b580      	push	{r7, lr}
 8024f3a:	b084      	sub	sp, #16
 8024f3c:	af00      	add	r7, sp, #0
 8024f3e:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8024f40:	687b      	ldr	r3, [r7, #4]
 8024f42:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8024f44:	68fb      	ldr	r3, [r7, #12]
 8024f46:	2b00      	cmp	r3, #0
 8024f48:	d001      	beq.n	8024f4e <osDelay+0x16>
 8024f4a:	68fb      	ldr	r3, [r7, #12]
 8024f4c:	e000      	b.n	8024f50 <osDelay+0x18>
 8024f4e:	2301      	movs	r3, #1
 8024f50:	4618      	mov	r0, r3
 8024f52:	f001 fd29 	bl	80269a8 <vTaskDelay>
  
  return osOK;
 8024f56:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8024f58:	4618      	mov	r0, r3
 8024f5a:	3710      	adds	r7, #16
 8024f5c:	46bd      	mov	sp, r7
 8024f5e:	bd80      	pop	{r7, pc}

08024f60 <osMutexCreate>:
* @param  mutex_def     mutex definition referenced with \ref osMutex.
* @retval  mutex ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMutexCreate shall be consistent in every CMSIS-RTOS.
*/
osMutexId osMutexCreate (const osMutexDef_t *mutex_def)
{
 8024f60:	b580      	push	{r7, lr}
 8024f62:	b082      	sub	sp, #8
 8024f64:	af00      	add	r7, sp, #0
 8024f66:	6078      	str	r0, [r7, #4]
#if ( configUSE_MUTEXES == 1)

#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if (mutex_def->controlblock != NULL) {
 8024f68:	687b      	ldr	r3, [r7, #4]
 8024f6a:	685b      	ldr	r3, [r3, #4]
 8024f6c:	2b00      	cmp	r3, #0
 8024f6e:	d007      	beq.n	8024f80 <osMutexCreate+0x20>
    return xSemaphoreCreateMutexStatic( mutex_def->controlblock );
 8024f70:	687b      	ldr	r3, [r7, #4]
 8024f72:	685b      	ldr	r3, [r3, #4]
 8024f74:	4619      	mov	r1, r3
 8024f76:	2001      	movs	r0, #1
 8024f78:	f000 fc7d 	bl	8025876 <xQueueCreateMutexStatic>
 8024f7c:	4603      	mov	r3, r0
 8024f7e:	e003      	b.n	8024f88 <osMutexCreate+0x28>
     }
  else {
    return xSemaphoreCreateMutex(); 
 8024f80:	2001      	movs	r0, #1
 8024f82:	f000 fc60 	bl	8025846 <xQueueCreateMutex>
 8024f86:	4603      	mov	r3, r0
    return xSemaphoreCreateMutex(); 
#endif
#else
  return NULL;
#endif
}
 8024f88:	4618      	mov	r0, r3
 8024f8a:	3708      	adds	r7, #8
 8024f8c:	46bd      	mov	sp, r7
 8024f8e:	bd80      	pop	{r7, pc}

08024f90 <osMutexWait>:
* @param millisec      timeout value or 0 in case of no time-out.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMutexWait shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexWait (osMutexId mutex_id, uint32_t millisec)
{
 8024f90:	b580      	push	{r7, lr}
 8024f92:	b084      	sub	sp, #16
 8024f94:	af00      	add	r7, sp, #0
 8024f96:	6078      	str	r0, [r7, #4]
 8024f98:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 8024f9a:	2300      	movs	r3, #0
 8024f9c:	60bb      	str	r3, [r7, #8]
  
  
  if (mutex_id == NULL) {
 8024f9e:	687b      	ldr	r3, [r7, #4]
 8024fa0:	2b00      	cmp	r3, #0
 8024fa2:	d101      	bne.n	8024fa8 <osMutexWait+0x18>
    return osErrorParameter;
 8024fa4:	2380      	movs	r3, #128	; 0x80
 8024fa6:	e03a      	b.n	802501e <osMutexWait+0x8e>
  }
  
  ticks = 0;
 8024fa8:	2300      	movs	r3, #0
 8024faa:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 8024fac:	683b      	ldr	r3, [r7, #0]
 8024fae:	f1b3 3fff 	cmp.w	r3, #4294967295
 8024fb2:	d103      	bne.n	8024fbc <osMutexWait+0x2c>
    ticks = portMAX_DELAY;
 8024fb4:	f04f 33ff 	mov.w	r3, #4294967295
 8024fb8:	60fb      	str	r3, [r7, #12]
 8024fba:	e009      	b.n	8024fd0 <osMutexWait+0x40>
  }
  else if (millisec != 0) {
 8024fbc:	683b      	ldr	r3, [r7, #0]
 8024fbe:	2b00      	cmp	r3, #0
 8024fc0:	d006      	beq.n	8024fd0 <osMutexWait+0x40>
    ticks = millisec / portTICK_PERIOD_MS;
 8024fc2:	683b      	ldr	r3, [r7, #0]
 8024fc4:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 8024fc6:	68fb      	ldr	r3, [r7, #12]
 8024fc8:	2b00      	cmp	r3, #0
 8024fca:	d101      	bne.n	8024fd0 <osMutexWait+0x40>
      ticks = 1;
 8024fcc:	2301      	movs	r3, #1
 8024fce:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 8024fd0:	f7ff ff3d 	bl	8024e4e <inHandlerMode>
 8024fd4:	4603      	mov	r3, r0
 8024fd6:	2b00      	cmp	r3, #0
 8024fd8:	d017      	beq.n	802500a <osMutexWait+0x7a>
    if (xSemaphoreTakeFromISR(mutex_id, &taskWoken) != pdTRUE) {
 8024fda:	f107 0308 	add.w	r3, r7, #8
 8024fde:	461a      	mov	r2, r3
 8024fe0:	2100      	movs	r1, #0
 8024fe2:	6878      	ldr	r0, [r7, #4]
 8024fe4:	f001 f874 	bl	80260d0 <xQueueReceiveFromISR>
 8024fe8:	4603      	mov	r3, r0
 8024fea:	2b01      	cmp	r3, #1
 8024fec:	d001      	beq.n	8024ff2 <osMutexWait+0x62>
      return osErrorOS;
 8024fee:	23ff      	movs	r3, #255	; 0xff
 8024ff0:	e015      	b.n	802501e <osMutexWait+0x8e>
    }
	portEND_SWITCHING_ISR(taskWoken);
 8024ff2:	68bb      	ldr	r3, [r7, #8]
 8024ff4:	2b00      	cmp	r3, #0
 8024ff6:	d011      	beq.n	802501c <osMutexWait+0x8c>
 8024ff8:	4b0b      	ldr	r3, [pc, #44]	; (8025028 <osMutexWait+0x98>)
 8024ffa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8024ffe:	601a      	str	r2, [r3, #0]
 8025000:	f3bf 8f4f 	dsb	sy
 8025004:	f3bf 8f6f 	isb	sy
 8025008:	e008      	b.n	802501c <osMutexWait+0x8c>
  } 
  else if (xSemaphoreTake(mutex_id, ticks) != pdTRUE) {
 802500a:	68f9      	ldr	r1, [r7, #12]
 802500c:	6878      	ldr	r0, [r7, #4]
 802500e:	f000 ff53 	bl	8025eb8 <xQueueSemaphoreTake>
 8025012:	4603      	mov	r3, r0
 8025014:	2b01      	cmp	r3, #1
 8025016:	d001      	beq.n	802501c <osMutexWait+0x8c>
    return osErrorOS;
 8025018:	23ff      	movs	r3, #255	; 0xff
 802501a:	e000      	b.n	802501e <osMutexWait+0x8e>
  }
  
  return osOK;
 802501c:	2300      	movs	r3, #0
}
 802501e:	4618      	mov	r0, r3
 8025020:	3710      	adds	r7, #16
 8025022:	46bd      	mov	sp, r7
 8025024:	bd80      	pop	{r7, pc}
 8025026:	bf00      	nop
 8025028:	e000ed04 	.word	0xe000ed04

0802502c <osMutexRelease>:
* @param mutex_id      mutex ID obtained by \ref osMutexCreate.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMutexRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexRelease (osMutexId mutex_id)
{
 802502c:	b580      	push	{r7, lr}
 802502e:	b084      	sub	sp, #16
 8025030:	af00      	add	r7, sp, #0
 8025032:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 8025034:	2300      	movs	r3, #0
 8025036:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 8025038:	2300      	movs	r3, #0
 802503a:	60bb      	str	r3, [r7, #8]
  
  if (inHandlerMode()) {
 802503c:	f7ff ff07 	bl	8024e4e <inHandlerMode>
 8025040:	4603      	mov	r3, r0
 8025042:	2b00      	cmp	r3, #0
 8025044:	d016      	beq.n	8025074 <osMutexRelease+0x48>
    if (xSemaphoreGiveFromISR(mutex_id, &taskWoken) != pdTRUE) {
 8025046:	f107 0308 	add.w	r3, r7, #8
 802504a:	4619      	mov	r1, r3
 802504c:	6878      	ldr	r0, [r7, #4]
 802504e:	f000 fdc6 	bl	8025bde <xQueueGiveFromISR>
 8025052:	4603      	mov	r3, r0
 8025054:	2b01      	cmp	r3, #1
 8025056:	d001      	beq.n	802505c <osMutexRelease+0x30>
      return osErrorOS;
 8025058:	23ff      	movs	r3, #255	; 0xff
 802505a:	e017      	b.n	802508c <osMutexRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 802505c:	68bb      	ldr	r3, [r7, #8]
 802505e:	2b00      	cmp	r3, #0
 8025060:	d013      	beq.n	802508a <osMutexRelease+0x5e>
 8025062:	4b0c      	ldr	r3, [pc, #48]	; (8025094 <osMutexRelease+0x68>)
 8025064:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8025068:	601a      	str	r2, [r3, #0]
 802506a:	f3bf 8f4f 	dsb	sy
 802506e:	f3bf 8f6f 	isb	sy
 8025072:	e00a      	b.n	802508a <osMutexRelease+0x5e>
  }
  else if (xSemaphoreGive(mutex_id) != pdTRUE) 
 8025074:	2300      	movs	r3, #0
 8025076:	2200      	movs	r2, #0
 8025078:	2100      	movs	r1, #0
 802507a:	6878      	ldr	r0, [r7, #4]
 802507c:	f000 fc16 	bl	80258ac <xQueueGenericSend>
 8025080:	4603      	mov	r3, r0
 8025082:	2b01      	cmp	r3, #1
 8025084:	d001      	beq.n	802508a <osMutexRelease+0x5e>
  {
    result = osErrorOS;
 8025086:	23ff      	movs	r3, #255	; 0xff
 8025088:	60fb      	str	r3, [r7, #12]
  }
  return result;
 802508a:	68fb      	ldr	r3, [r7, #12]
}
 802508c:	4618      	mov	r0, r3
 802508e:	3710      	adds	r7, #16
 8025090:	46bd      	mov	sp, r7
 8025092:	bd80      	pop	{r7, pc}
 8025094:	e000ed04 	.word	0xe000ed04

08025098 <osSemaphoreCreate>:
* @param count         number of available resources.
* @retval  semaphore ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreCreate shall be consistent in every CMSIS-RTOS.
*/
osSemaphoreId osSemaphoreCreate (const osSemaphoreDef_t *semaphore_def, int32_t count)
{ 
 8025098:	b580      	push	{r7, lr}
 802509a:	b086      	sub	sp, #24
 802509c:	af02      	add	r7, sp, #8
 802509e:	6078      	str	r0, [r7, #4]
 80250a0:	6039      	str	r1, [r7, #0]
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  osSemaphoreId sema;
  
  if (semaphore_def->controlblock != NULL){
 80250a2:	687b      	ldr	r3, [r7, #4]
 80250a4:	685b      	ldr	r3, [r3, #4]
 80250a6:	2b00      	cmp	r3, #0
 80250a8:	d00f      	beq.n	80250ca <osSemaphoreCreate+0x32>
    if (count == 1) {
 80250aa:	683b      	ldr	r3, [r7, #0]
 80250ac:	2b01      	cmp	r3, #1
 80250ae:	d10a      	bne.n	80250c6 <osSemaphoreCreate+0x2e>
      return xSemaphoreCreateBinaryStatic( semaphore_def->controlblock );
 80250b0:	687b      	ldr	r3, [r7, #4]
 80250b2:	685b      	ldr	r3, [r3, #4]
 80250b4:	2203      	movs	r2, #3
 80250b6:	9200      	str	r2, [sp, #0]
 80250b8:	2200      	movs	r2, #0
 80250ba:	2100      	movs	r1, #0
 80250bc:	2001      	movs	r0, #1
 80250be:	f000 fad7 	bl	8025670 <xQueueGenericCreateStatic>
 80250c2:	4603      	mov	r3, r0
 80250c4:	e016      	b.n	80250f4 <osSemaphoreCreate+0x5c>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )
      return xSemaphoreCreateCountingStatic( count, count, semaphore_def->controlblock );
#else
      return NULL;
 80250c6:	2300      	movs	r3, #0
 80250c8:	e014      	b.n	80250f4 <osSemaphoreCreate+0x5c>
#endif
    }
  }
  else {
    if (count == 1) {
 80250ca:	683b      	ldr	r3, [r7, #0]
 80250cc:	2b01      	cmp	r3, #1
 80250ce:	d110      	bne.n	80250f2 <osSemaphoreCreate+0x5a>
      vSemaphoreCreateBinary(sema);
 80250d0:	2203      	movs	r2, #3
 80250d2:	2100      	movs	r1, #0
 80250d4:	2001      	movs	r0, #1
 80250d6:	f000 fb43 	bl	8025760 <xQueueGenericCreate>
 80250da:	60f8      	str	r0, [r7, #12]
 80250dc:	68fb      	ldr	r3, [r7, #12]
 80250de:	2b00      	cmp	r3, #0
 80250e0:	d005      	beq.n	80250ee <osSemaphoreCreate+0x56>
 80250e2:	2300      	movs	r3, #0
 80250e4:	2200      	movs	r2, #0
 80250e6:	2100      	movs	r1, #0
 80250e8:	68f8      	ldr	r0, [r7, #12]
 80250ea:	f000 fbdf 	bl	80258ac <xQueueGenericSend>
      return sema;
 80250ee:	68fb      	ldr	r3, [r7, #12]
 80250f0:	e000      	b.n	80250f4 <osSemaphoreCreate+0x5c>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )	
      return xSemaphoreCreateCounting(count, count);
#else
      return NULL;
 80250f2:	2300      	movs	r3, #0
#else
    return NULL;
#endif
  }
#endif
}
 80250f4:	4618      	mov	r0, r3
 80250f6:	3710      	adds	r7, #16
 80250f8:	46bd      	mov	sp, r7
 80250fa:	bd80      	pop	{r7, pc}

080250fc <osSemaphoreWait>:
* @param  millisec      timeout value or 0 in case of no time-out.
* @retval  number of available tokens, or -1 in case of incorrect parameters.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreWait shall be consistent in every CMSIS-RTOS.
*/
int32_t osSemaphoreWait (osSemaphoreId semaphore_id, uint32_t millisec)
{
 80250fc:	b580      	push	{r7, lr}
 80250fe:	b084      	sub	sp, #16
 8025100:	af00      	add	r7, sp, #0
 8025102:	6078      	str	r0, [r7, #4]
 8025104:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 8025106:	2300      	movs	r3, #0
 8025108:	60bb      	str	r3, [r7, #8]
  
  
  if (semaphore_id == NULL) {
 802510a:	687b      	ldr	r3, [r7, #4]
 802510c:	2b00      	cmp	r3, #0
 802510e:	d101      	bne.n	8025114 <osSemaphoreWait+0x18>
    return osErrorParameter;
 8025110:	2380      	movs	r3, #128	; 0x80
 8025112:	e03a      	b.n	802518a <osSemaphoreWait+0x8e>
  }
  
  ticks = 0;
 8025114:	2300      	movs	r3, #0
 8025116:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 8025118:	683b      	ldr	r3, [r7, #0]
 802511a:	f1b3 3fff 	cmp.w	r3, #4294967295
 802511e:	d103      	bne.n	8025128 <osSemaphoreWait+0x2c>
    ticks = portMAX_DELAY;
 8025120:	f04f 33ff 	mov.w	r3, #4294967295
 8025124:	60fb      	str	r3, [r7, #12]
 8025126:	e009      	b.n	802513c <osSemaphoreWait+0x40>
  }
  else if (millisec != 0) {
 8025128:	683b      	ldr	r3, [r7, #0]
 802512a:	2b00      	cmp	r3, #0
 802512c:	d006      	beq.n	802513c <osSemaphoreWait+0x40>
    ticks = millisec / portTICK_PERIOD_MS;
 802512e:	683b      	ldr	r3, [r7, #0]
 8025130:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 8025132:	68fb      	ldr	r3, [r7, #12]
 8025134:	2b00      	cmp	r3, #0
 8025136:	d101      	bne.n	802513c <osSemaphoreWait+0x40>
      ticks = 1;
 8025138:	2301      	movs	r3, #1
 802513a:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 802513c:	f7ff fe87 	bl	8024e4e <inHandlerMode>
 8025140:	4603      	mov	r3, r0
 8025142:	2b00      	cmp	r3, #0
 8025144:	d017      	beq.n	8025176 <osSemaphoreWait+0x7a>
    if (xSemaphoreTakeFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 8025146:	f107 0308 	add.w	r3, r7, #8
 802514a:	461a      	mov	r2, r3
 802514c:	2100      	movs	r1, #0
 802514e:	6878      	ldr	r0, [r7, #4]
 8025150:	f000 ffbe 	bl	80260d0 <xQueueReceiveFromISR>
 8025154:	4603      	mov	r3, r0
 8025156:	2b01      	cmp	r3, #1
 8025158:	d001      	beq.n	802515e <osSemaphoreWait+0x62>
      return osErrorOS;
 802515a:	23ff      	movs	r3, #255	; 0xff
 802515c:	e015      	b.n	802518a <osSemaphoreWait+0x8e>
    }
	portEND_SWITCHING_ISR(taskWoken);
 802515e:	68bb      	ldr	r3, [r7, #8]
 8025160:	2b00      	cmp	r3, #0
 8025162:	d011      	beq.n	8025188 <osSemaphoreWait+0x8c>
 8025164:	4b0b      	ldr	r3, [pc, #44]	; (8025194 <osSemaphoreWait+0x98>)
 8025166:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 802516a:	601a      	str	r2, [r3, #0]
 802516c:	f3bf 8f4f 	dsb	sy
 8025170:	f3bf 8f6f 	isb	sy
 8025174:	e008      	b.n	8025188 <osSemaphoreWait+0x8c>
  }  
  else if (xSemaphoreTake(semaphore_id, ticks) != pdTRUE) {
 8025176:	68f9      	ldr	r1, [r7, #12]
 8025178:	6878      	ldr	r0, [r7, #4]
 802517a:	f000 fe9d 	bl	8025eb8 <xQueueSemaphoreTake>
 802517e:	4603      	mov	r3, r0
 8025180:	2b01      	cmp	r3, #1
 8025182:	d001      	beq.n	8025188 <osSemaphoreWait+0x8c>
    return osErrorOS;
 8025184:	23ff      	movs	r3, #255	; 0xff
 8025186:	e000      	b.n	802518a <osSemaphoreWait+0x8e>
  }
  
  return osOK;
 8025188:	2300      	movs	r3, #0
}
 802518a:	4618      	mov	r0, r3
 802518c:	3710      	adds	r7, #16
 802518e:	46bd      	mov	sp, r7
 8025190:	bd80      	pop	{r7, pc}
 8025192:	bf00      	nop
 8025194:	e000ed04 	.word	0xe000ed04

08025198 <osSemaphoreRelease>:
* @param  semaphore_id  semaphore object referenced with \ref osSemaphore.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osSemaphoreRelease (osSemaphoreId semaphore_id)
{
 8025198:	b580      	push	{r7, lr}
 802519a:	b084      	sub	sp, #16
 802519c:	af00      	add	r7, sp, #0
 802519e:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 80251a0:	2300      	movs	r3, #0
 80251a2:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 80251a4:	2300      	movs	r3, #0
 80251a6:	60bb      	str	r3, [r7, #8]
  
  
  if (inHandlerMode()) {
 80251a8:	f7ff fe51 	bl	8024e4e <inHandlerMode>
 80251ac:	4603      	mov	r3, r0
 80251ae:	2b00      	cmp	r3, #0
 80251b0:	d016      	beq.n	80251e0 <osSemaphoreRelease+0x48>
    if (xSemaphoreGiveFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 80251b2:	f107 0308 	add.w	r3, r7, #8
 80251b6:	4619      	mov	r1, r3
 80251b8:	6878      	ldr	r0, [r7, #4]
 80251ba:	f000 fd10 	bl	8025bde <xQueueGiveFromISR>
 80251be:	4603      	mov	r3, r0
 80251c0:	2b01      	cmp	r3, #1
 80251c2:	d001      	beq.n	80251c8 <osSemaphoreRelease+0x30>
      return osErrorOS;
 80251c4:	23ff      	movs	r3, #255	; 0xff
 80251c6:	e017      	b.n	80251f8 <osSemaphoreRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 80251c8:	68bb      	ldr	r3, [r7, #8]
 80251ca:	2b00      	cmp	r3, #0
 80251cc:	d013      	beq.n	80251f6 <osSemaphoreRelease+0x5e>
 80251ce:	4b0c      	ldr	r3, [pc, #48]	; (8025200 <osSemaphoreRelease+0x68>)
 80251d0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80251d4:	601a      	str	r2, [r3, #0]
 80251d6:	f3bf 8f4f 	dsb	sy
 80251da:	f3bf 8f6f 	isb	sy
 80251de:	e00a      	b.n	80251f6 <osSemaphoreRelease+0x5e>
  }
  else {
    if (xSemaphoreGive(semaphore_id) != pdTRUE) {
 80251e0:	2300      	movs	r3, #0
 80251e2:	2200      	movs	r2, #0
 80251e4:	2100      	movs	r1, #0
 80251e6:	6878      	ldr	r0, [r7, #4]
 80251e8:	f000 fb60 	bl	80258ac <xQueueGenericSend>
 80251ec:	4603      	mov	r3, r0
 80251ee:	2b01      	cmp	r3, #1
 80251f0:	d001      	beq.n	80251f6 <osSemaphoreRelease+0x5e>
      result = osErrorOS;
 80251f2:	23ff      	movs	r3, #255	; 0xff
 80251f4:	60fb      	str	r3, [r7, #12]
    }
  }
  
  return result;
 80251f6:	68fb      	ldr	r3, [r7, #12]
}
 80251f8:	4618      	mov	r0, r3
 80251fa:	3710      	adds	r7, #16
 80251fc:	46bd      	mov	sp, r7
 80251fe:	bd80      	pop	{r7, pc}
 8025200:	e000ed04 	.word	0xe000ed04

08025204 <osSemaphoreDelete>:
* @param  semaphore_id  semaphore object referenced with \ref osSemaphore.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreDelete shall be consistent in every CMSIS-RTOS.
*/
osStatus osSemaphoreDelete (osSemaphoreId semaphore_id)
{
 8025204:	b580      	push	{r7, lr}
 8025206:	b082      	sub	sp, #8
 8025208:	af00      	add	r7, sp, #0
 802520a:	6078      	str	r0, [r7, #4]
  if (inHandlerMode()) {
 802520c:	f7ff fe1f 	bl	8024e4e <inHandlerMode>
 8025210:	4603      	mov	r3, r0
 8025212:	2b00      	cmp	r3, #0
 8025214:	d001      	beq.n	802521a <osSemaphoreDelete+0x16>
    return osErrorISR;
 8025216:	2382      	movs	r3, #130	; 0x82
 8025218:	e003      	b.n	8025222 <osSemaphoreDelete+0x1e>
  }

  vSemaphoreDelete(semaphore_id);
 802521a:	6878      	ldr	r0, [r7, #4]
 802521c:	f001 f814 	bl	8026248 <vQueueDelete>

  return osOK; 
 8025220:	2300      	movs	r3, #0
}
 8025222:	4618      	mov	r0, r3
 8025224:	3708      	adds	r7, #8
 8025226:	46bd      	mov	sp, r7
 8025228:	bd80      	pop	{r7, pc}

0802522a <osMessageCreate>:
* @param  thread_id     thread ID (obtained by \ref osThreadCreate or \ref osThreadGetId) or NULL.
* @retval  message queue ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMessageCreate shall be consistent in every CMSIS-RTOS.
*/
osMessageQId osMessageCreate (const osMessageQDef_t *queue_def, osThreadId thread_id)
{
 802522a:	b590      	push	{r4, r7, lr}
 802522c:	b085      	sub	sp, #20
 802522e:	af02      	add	r7, sp, #8
 8025230:	6078      	str	r0, [r7, #4]
 8025232:	6039      	str	r1, [r7, #0]
  (void) thread_id;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if ((queue_def->buffer != NULL) && (queue_def->controlblock != NULL)) {
 8025234:	687b      	ldr	r3, [r7, #4]
 8025236:	689b      	ldr	r3, [r3, #8]
 8025238:	2b00      	cmp	r3, #0
 802523a:	d011      	beq.n	8025260 <osMessageCreate+0x36>
 802523c:	687b      	ldr	r3, [r7, #4]
 802523e:	68db      	ldr	r3, [r3, #12]
 8025240:	2b00      	cmp	r3, #0
 8025242:	d00d      	beq.n	8025260 <osMessageCreate+0x36>
    return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
 8025244:	687b      	ldr	r3, [r7, #4]
 8025246:	6818      	ldr	r0, [r3, #0]
 8025248:	687b      	ldr	r3, [r7, #4]
 802524a:	6859      	ldr	r1, [r3, #4]
 802524c:	687b      	ldr	r3, [r7, #4]
 802524e:	689a      	ldr	r2, [r3, #8]
 8025250:	687b      	ldr	r3, [r7, #4]
 8025252:	68db      	ldr	r3, [r3, #12]
 8025254:	2400      	movs	r4, #0
 8025256:	9400      	str	r4, [sp, #0]
 8025258:	f000 fa0a 	bl	8025670 <xQueueGenericCreateStatic>
 802525c:	4603      	mov	r3, r0
 802525e:	e008      	b.n	8025272 <osMessageCreate+0x48>
  }
  else {
    return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
 8025260:	687b      	ldr	r3, [r7, #4]
 8025262:	6818      	ldr	r0, [r3, #0]
 8025264:	687b      	ldr	r3, [r7, #4]
 8025266:	685b      	ldr	r3, [r3, #4]
 8025268:	2200      	movs	r2, #0
 802526a:	4619      	mov	r1, r3
 802526c:	f000 fa78 	bl	8025760 <xQueueGenericCreate>
 8025270:	4603      	mov	r3, r0
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
#else  
  return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
#endif
}
 8025272:	4618      	mov	r0, r3
 8025274:	370c      	adds	r7, #12
 8025276:	46bd      	mov	sp, r7
 8025278:	bd90      	pop	{r4, r7, pc}
	...

0802527c <osMessagePut>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMessagePut shall be consistent in every CMSIS-RTOS.
*/
osStatus osMessagePut (osMessageQId queue_id, uint32_t info, uint32_t millisec)
{
 802527c:	b580      	push	{r7, lr}
 802527e:	b086      	sub	sp, #24
 8025280:	af00      	add	r7, sp, #0
 8025282:	60f8      	str	r0, [r7, #12]
 8025284:	60b9      	str	r1, [r7, #8]
 8025286:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken = pdFALSE;
 8025288:	2300      	movs	r3, #0
 802528a:	613b      	str	r3, [r7, #16]
  TickType_t ticks;
  
  ticks = millisec / portTICK_PERIOD_MS;
 802528c:	687b      	ldr	r3, [r7, #4]
 802528e:	617b      	str	r3, [r7, #20]
  if (ticks == 0) {
 8025290:	697b      	ldr	r3, [r7, #20]
 8025292:	2b00      	cmp	r3, #0
 8025294:	d101      	bne.n	802529a <osMessagePut+0x1e>
    ticks = 1;
 8025296:	2301      	movs	r3, #1
 8025298:	617b      	str	r3, [r7, #20]
  }
  
  if (inHandlerMode()) {
 802529a:	f7ff fdd8 	bl	8024e4e <inHandlerMode>
 802529e:	4603      	mov	r3, r0
 80252a0:	2b00      	cmp	r3, #0
 80252a2:	d018      	beq.n	80252d6 <osMessagePut+0x5a>
    if (xQueueSendFromISR(queue_id, &info, &taskWoken) != pdTRUE) {
 80252a4:	f107 0210 	add.w	r2, r7, #16
 80252a8:	f107 0108 	add.w	r1, r7, #8
 80252ac:	2300      	movs	r3, #0
 80252ae:	68f8      	ldr	r0, [r7, #12]
 80252b0:	f000 fbfa 	bl	8025aa8 <xQueueGenericSendFromISR>
 80252b4:	4603      	mov	r3, r0
 80252b6:	2b01      	cmp	r3, #1
 80252b8:	d001      	beq.n	80252be <osMessagePut+0x42>
      return osErrorOS;
 80252ba:	23ff      	movs	r3, #255	; 0xff
 80252bc:	e018      	b.n	80252f0 <osMessagePut+0x74>
    }
    portEND_SWITCHING_ISR(taskWoken);
 80252be:	693b      	ldr	r3, [r7, #16]
 80252c0:	2b00      	cmp	r3, #0
 80252c2:	d014      	beq.n	80252ee <osMessagePut+0x72>
 80252c4:	4b0c      	ldr	r3, [pc, #48]	; (80252f8 <osMessagePut+0x7c>)
 80252c6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80252ca:	601a      	str	r2, [r3, #0]
 80252cc:	f3bf 8f4f 	dsb	sy
 80252d0:	f3bf 8f6f 	isb	sy
 80252d4:	e00b      	b.n	80252ee <osMessagePut+0x72>
  }
  else {
    if (xQueueSend(queue_id, &info, ticks) != pdTRUE) {
 80252d6:	f107 0108 	add.w	r1, r7, #8
 80252da:	2300      	movs	r3, #0
 80252dc:	697a      	ldr	r2, [r7, #20]
 80252de:	68f8      	ldr	r0, [r7, #12]
 80252e0:	f000 fae4 	bl	80258ac <xQueueGenericSend>
 80252e4:	4603      	mov	r3, r0
 80252e6:	2b01      	cmp	r3, #1
 80252e8:	d001      	beq.n	80252ee <osMessagePut+0x72>
      return osErrorOS;
 80252ea:	23ff      	movs	r3, #255	; 0xff
 80252ec:	e000      	b.n	80252f0 <osMessagePut+0x74>
    }
  }
  
  return osOK;
 80252ee:	2300      	movs	r3, #0
}
 80252f0:	4618      	mov	r0, r3
 80252f2:	3718      	adds	r7, #24
 80252f4:	46bd      	mov	sp, r7
 80252f6:	bd80      	pop	{r7, pc}
 80252f8:	e000ed04 	.word	0xe000ed04

080252fc <osMessageGet>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval event information that includes status code.
* @note   MUST REMAIN UNCHANGED: \b osMessageGet shall be consistent in every CMSIS-RTOS.
*/
osEvent osMessageGet (osMessageQId queue_id, uint32_t millisec)
{
 80252fc:	b590      	push	{r4, r7, lr}
 80252fe:	b08b      	sub	sp, #44	; 0x2c
 8025300:	af00      	add	r7, sp, #0
 8025302:	60f8      	str	r0, [r7, #12]
 8025304:	60b9      	str	r1, [r7, #8]
 8025306:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken;
  TickType_t ticks;
  osEvent event;
  
  event.def.message_id = queue_id;
 8025308:	68bb      	ldr	r3, [r7, #8]
 802530a:	61fb      	str	r3, [r7, #28]
  event.value.v = 0;
 802530c:	2300      	movs	r3, #0
 802530e:	61bb      	str	r3, [r7, #24]
  
  if (queue_id == NULL) {
 8025310:	68bb      	ldr	r3, [r7, #8]
 8025312:	2b00      	cmp	r3, #0
 8025314:	d10a      	bne.n	802532c <osMessageGet+0x30>
    event.status = osErrorParameter;
 8025316:	2380      	movs	r3, #128	; 0x80
 8025318:	617b      	str	r3, [r7, #20]
    return event;
 802531a:	68fb      	ldr	r3, [r7, #12]
 802531c:	461c      	mov	r4, r3
 802531e:	f107 0314 	add.w	r3, r7, #20
 8025322:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8025326:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 802532a:	e054      	b.n	80253d6 <osMessageGet+0xda>
  }
  
  taskWoken = pdFALSE;
 802532c:	2300      	movs	r3, #0
 802532e:	623b      	str	r3, [r7, #32]
  
  ticks = 0;
 8025330:	2300      	movs	r3, #0
 8025332:	627b      	str	r3, [r7, #36]	; 0x24
  if (millisec == osWaitForever) {
 8025334:	687b      	ldr	r3, [r7, #4]
 8025336:	f1b3 3fff 	cmp.w	r3, #4294967295
 802533a:	d103      	bne.n	8025344 <osMessageGet+0x48>
    ticks = portMAX_DELAY;
 802533c:	f04f 33ff 	mov.w	r3, #4294967295
 8025340:	627b      	str	r3, [r7, #36]	; 0x24
 8025342:	e009      	b.n	8025358 <osMessageGet+0x5c>
  }
  else if (millisec != 0) {
 8025344:	687b      	ldr	r3, [r7, #4]
 8025346:	2b00      	cmp	r3, #0
 8025348:	d006      	beq.n	8025358 <osMessageGet+0x5c>
    ticks = millisec / portTICK_PERIOD_MS;
 802534a:	687b      	ldr	r3, [r7, #4]
 802534c:	627b      	str	r3, [r7, #36]	; 0x24
    if (ticks == 0) {
 802534e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8025350:	2b00      	cmp	r3, #0
 8025352:	d101      	bne.n	8025358 <osMessageGet+0x5c>
      ticks = 1;
 8025354:	2301      	movs	r3, #1
 8025356:	627b      	str	r3, [r7, #36]	; 0x24
    }
  }
  
  if (inHandlerMode()) {
 8025358:	f7ff fd79 	bl	8024e4e <inHandlerMode>
 802535c:	4603      	mov	r3, r0
 802535e:	2b00      	cmp	r3, #0
 8025360:	d01c      	beq.n	802539c <osMessageGet+0xa0>
    if (xQueueReceiveFromISR(queue_id, &event.value.v, &taskWoken) == pdTRUE) {
 8025362:	f107 0220 	add.w	r2, r7, #32
 8025366:	f107 0314 	add.w	r3, r7, #20
 802536a:	3304      	adds	r3, #4
 802536c:	4619      	mov	r1, r3
 802536e:	68b8      	ldr	r0, [r7, #8]
 8025370:	f000 feae 	bl	80260d0 <xQueueReceiveFromISR>
 8025374:	4603      	mov	r3, r0
 8025376:	2b01      	cmp	r3, #1
 8025378:	d102      	bne.n	8025380 <osMessageGet+0x84>
      /* We have mail */
      event.status = osEventMessage;
 802537a:	2310      	movs	r3, #16
 802537c:	617b      	str	r3, [r7, #20]
 802537e:	e001      	b.n	8025384 <osMessageGet+0x88>
    }
    else {
      event.status = osOK;
 8025380:	2300      	movs	r3, #0
 8025382:	617b      	str	r3, [r7, #20]
    }
    portEND_SWITCHING_ISR(taskWoken);
 8025384:	6a3b      	ldr	r3, [r7, #32]
 8025386:	2b00      	cmp	r3, #0
 8025388:	d01d      	beq.n	80253c6 <osMessageGet+0xca>
 802538a:	4b15      	ldr	r3, [pc, #84]	; (80253e0 <osMessageGet+0xe4>)
 802538c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8025390:	601a      	str	r2, [r3, #0]
 8025392:	f3bf 8f4f 	dsb	sy
 8025396:	f3bf 8f6f 	isb	sy
 802539a:	e014      	b.n	80253c6 <osMessageGet+0xca>
  }
  else {
    if (xQueueReceive(queue_id, &event.value.v, ticks) == pdTRUE) {
 802539c:	f107 0314 	add.w	r3, r7, #20
 80253a0:	3304      	adds	r3, #4
 80253a2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80253a4:	4619      	mov	r1, r3
 80253a6:	68b8      	ldr	r0, [r7, #8]
 80253a8:	f000 fca6 	bl	8025cf8 <xQueueReceive>
 80253ac:	4603      	mov	r3, r0
 80253ae:	2b01      	cmp	r3, #1
 80253b0:	d102      	bne.n	80253b8 <osMessageGet+0xbc>
      /* We have mail */
      event.status = osEventMessage;
 80253b2:	2310      	movs	r3, #16
 80253b4:	617b      	str	r3, [r7, #20]
 80253b6:	e006      	b.n	80253c6 <osMessageGet+0xca>
    }
    else {
      event.status = (ticks == 0) ? osOK : osEventTimeout;
 80253b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80253ba:	2b00      	cmp	r3, #0
 80253bc:	d101      	bne.n	80253c2 <osMessageGet+0xc6>
 80253be:	2300      	movs	r3, #0
 80253c0:	e000      	b.n	80253c4 <osMessageGet+0xc8>
 80253c2:	2340      	movs	r3, #64	; 0x40
 80253c4:	617b      	str	r3, [r7, #20]
    }
  }
  
  return event;
 80253c6:	68fb      	ldr	r3, [r7, #12]
 80253c8:	461c      	mov	r4, r3
 80253ca:	f107 0314 	add.w	r3, r7, #20
 80253ce:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80253d2:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 80253d6:	68f8      	ldr	r0, [r7, #12]
 80253d8:	372c      	adds	r7, #44	; 0x2c
 80253da:	46bd      	mov	sp, r7
 80253dc:	bd90      	pop	{r4, r7, pc}
 80253de:	bf00      	nop
 80253e0:	e000ed04 	.word	0xe000ed04

080253e4 <osMessageWaiting>:
* @brief  Get the number of messaged stored in a queue.
* @param  queue_id  message queue ID obtained with \ref osMessageCreate.
* @retval number of messages stored in a queue.
*/
uint32_t osMessageWaiting(osMessageQId queue_id)
{
 80253e4:	b580      	push	{r7, lr}
 80253e6:	b082      	sub	sp, #8
 80253e8:	af00      	add	r7, sp, #0
 80253ea:	6078      	str	r0, [r7, #4]
  if (inHandlerMode()) {
 80253ec:	f7ff fd2f 	bl	8024e4e <inHandlerMode>
 80253f0:	4603      	mov	r3, r0
 80253f2:	2b00      	cmp	r3, #0
 80253f4:	d004      	beq.n	8025400 <osMessageWaiting+0x1c>
    return uxQueueMessagesWaitingFromISR(queue_id);
 80253f6:	6878      	ldr	r0, [r7, #4]
 80253f8:	f000 ff08 	bl	802620c <uxQueueMessagesWaitingFromISR>
 80253fc:	4603      	mov	r3, r0
 80253fe:	e003      	b.n	8025408 <osMessageWaiting+0x24>
  }
  else
  {
    return uxQueueMessagesWaiting(queue_id);
 8025400:	6878      	ldr	r0, [r7, #4]
 8025402:	f000 fee5 	bl	80261d0 <uxQueueMessagesWaiting>
 8025406:	4603      	mov	r3, r0
  }
}
 8025408:	4618      	mov	r0, r3
 802540a:	3708      	adds	r7, #8
 802540c:	46bd      	mov	sp, r7
 802540e:	bd80      	pop	{r7, pc}

08025410 <osMessageDelete>:
* @brief Delete a Message Queue
* @param  queue_id  message queue ID obtained with \ref osMessageCreate.
* @retval  status code that indicates the execution status of the function.
*/
osStatus osMessageDelete (osMessageQId queue_id)
{
 8025410:	b580      	push	{r7, lr}
 8025412:	b082      	sub	sp, #8
 8025414:	af00      	add	r7, sp, #0
 8025416:	6078      	str	r0, [r7, #4]
  if (inHandlerMode()) {
 8025418:	f7ff fd19 	bl	8024e4e <inHandlerMode>
 802541c:	4603      	mov	r3, r0
 802541e:	2b00      	cmp	r3, #0
 8025420:	d001      	beq.n	8025426 <osMessageDelete+0x16>
    return osErrorISR;
 8025422:	2382      	movs	r3, #130	; 0x82
 8025424:	e003      	b.n	802542e <osMessageDelete+0x1e>
  }

  vQueueDelete(queue_id);
 8025426:	6878      	ldr	r0, [r7, #4]
 8025428:	f000 ff0e 	bl	8026248 <vQueueDelete>

  return osOK; 
 802542c:	2300      	movs	r3, #0
}
 802542e:	4618      	mov	r0, r3
 8025430:	3708      	adds	r7, #8
 8025432:	46bd      	mov	sp, r7
 8025434:	bd80      	pop	{r7, pc}

08025436 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8025436:	b480      	push	{r7}
 8025438:	b083      	sub	sp, #12
 802543a:	af00      	add	r7, sp, #0
 802543c:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 802543e:	687b      	ldr	r3, [r7, #4]
 8025440:	f103 0208 	add.w	r2, r3, #8
 8025444:	687b      	ldr	r3, [r7, #4]
 8025446:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8025448:	687b      	ldr	r3, [r7, #4]
 802544a:	f04f 32ff 	mov.w	r2, #4294967295
 802544e:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8025450:	687b      	ldr	r3, [r7, #4]
 8025452:	f103 0208 	add.w	r2, r3, #8
 8025456:	687b      	ldr	r3, [r7, #4]
 8025458:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 802545a:	687b      	ldr	r3, [r7, #4]
 802545c:	f103 0208 	add.w	r2, r3, #8
 8025460:	687b      	ldr	r3, [r7, #4]
 8025462:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8025464:	687b      	ldr	r3, [r7, #4]
 8025466:	2200      	movs	r2, #0
 8025468:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 802546a:	bf00      	nop
 802546c:	370c      	adds	r7, #12
 802546e:	46bd      	mov	sp, r7
 8025470:	f85d 7b04 	ldr.w	r7, [sp], #4
 8025474:	4770      	bx	lr

08025476 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8025476:	b480      	push	{r7}
 8025478:	b083      	sub	sp, #12
 802547a:	af00      	add	r7, sp, #0
 802547c:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 802547e:	687b      	ldr	r3, [r7, #4]
 8025480:	2200      	movs	r2, #0
 8025482:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8025484:	bf00      	nop
 8025486:	370c      	adds	r7, #12
 8025488:	46bd      	mov	sp, r7
 802548a:	f85d 7b04 	ldr.w	r7, [sp], #4
 802548e:	4770      	bx	lr

08025490 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8025490:	b480      	push	{r7}
 8025492:	b085      	sub	sp, #20
 8025494:	af00      	add	r7, sp, #0
 8025496:	6078      	str	r0, [r7, #4]
 8025498:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 802549a:	687b      	ldr	r3, [r7, #4]
 802549c:	685b      	ldr	r3, [r3, #4]
 802549e:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80254a0:	683b      	ldr	r3, [r7, #0]
 80254a2:	68fa      	ldr	r2, [r7, #12]
 80254a4:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80254a6:	68fb      	ldr	r3, [r7, #12]
 80254a8:	689a      	ldr	r2, [r3, #8]
 80254aa:	683b      	ldr	r3, [r7, #0]
 80254ac:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80254ae:	68fb      	ldr	r3, [r7, #12]
 80254b0:	689b      	ldr	r3, [r3, #8]
 80254b2:	683a      	ldr	r2, [r7, #0]
 80254b4:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80254b6:	68fb      	ldr	r3, [r7, #12]
 80254b8:	683a      	ldr	r2, [r7, #0]
 80254ba:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80254bc:	683b      	ldr	r3, [r7, #0]
 80254be:	687a      	ldr	r2, [r7, #4]
 80254c0:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80254c2:	687b      	ldr	r3, [r7, #4]
 80254c4:	681b      	ldr	r3, [r3, #0]
 80254c6:	1c5a      	adds	r2, r3, #1
 80254c8:	687b      	ldr	r3, [r7, #4]
 80254ca:	601a      	str	r2, [r3, #0]
}
 80254cc:	bf00      	nop
 80254ce:	3714      	adds	r7, #20
 80254d0:	46bd      	mov	sp, r7
 80254d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80254d6:	4770      	bx	lr

080254d8 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80254d8:	b480      	push	{r7}
 80254da:	b085      	sub	sp, #20
 80254dc:	af00      	add	r7, sp, #0
 80254de:	6078      	str	r0, [r7, #4]
 80254e0:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80254e2:	683b      	ldr	r3, [r7, #0]
 80254e4:	681b      	ldr	r3, [r3, #0]
 80254e6:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80254e8:	68bb      	ldr	r3, [r7, #8]
 80254ea:	f1b3 3fff 	cmp.w	r3, #4294967295
 80254ee:	d103      	bne.n	80254f8 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80254f0:	687b      	ldr	r3, [r7, #4]
 80254f2:	691b      	ldr	r3, [r3, #16]
 80254f4:	60fb      	str	r3, [r7, #12]
 80254f6:	e00c      	b.n	8025512 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80254f8:	687b      	ldr	r3, [r7, #4]
 80254fa:	3308      	adds	r3, #8
 80254fc:	60fb      	str	r3, [r7, #12]
 80254fe:	e002      	b.n	8025506 <vListInsert+0x2e>
 8025500:	68fb      	ldr	r3, [r7, #12]
 8025502:	685b      	ldr	r3, [r3, #4]
 8025504:	60fb      	str	r3, [r7, #12]
 8025506:	68fb      	ldr	r3, [r7, #12]
 8025508:	685b      	ldr	r3, [r3, #4]
 802550a:	681b      	ldr	r3, [r3, #0]
 802550c:	68ba      	ldr	r2, [r7, #8]
 802550e:	429a      	cmp	r2, r3
 8025510:	d2f6      	bcs.n	8025500 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8025512:	68fb      	ldr	r3, [r7, #12]
 8025514:	685a      	ldr	r2, [r3, #4]
 8025516:	683b      	ldr	r3, [r7, #0]
 8025518:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 802551a:	683b      	ldr	r3, [r7, #0]
 802551c:	685b      	ldr	r3, [r3, #4]
 802551e:	683a      	ldr	r2, [r7, #0]
 8025520:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8025522:	683b      	ldr	r3, [r7, #0]
 8025524:	68fa      	ldr	r2, [r7, #12]
 8025526:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8025528:	68fb      	ldr	r3, [r7, #12]
 802552a:	683a      	ldr	r2, [r7, #0]
 802552c:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 802552e:	683b      	ldr	r3, [r7, #0]
 8025530:	687a      	ldr	r2, [r7, #4]
 8025532:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8025534:	687b      	ldr	r3, [r7, #4]
 8025536:	681b      	ldr	r3, [r3, #0]
 8025538:	1c5a      	adds	r2, r3, #1
 802553a:	687b      	ldr	r3, [r7, #4]
 802553c:	601a      	str	r2, [r3, #0]
}
 802553e:	bf00      	nop
 8025540:	3714      	adds	r7, #20
 8025542:	46bd      	mov	sp, r7
 8025544:	f85d 7b04 	ldr.w	r7, [sp], #4
 8025548:	4770      	bx	lr

0802554a <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 802554a:	b480      	push	{r7}
 802554c:	b085      	sub	sp, #20
 802554e:	af00      	add	r7, sp, #0
 8025550:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8025552:	687b      	ldr	r3, [r7, #4]
 8025554:	691b      	ldr	r3, [r3, #16]
 8025556:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8025558:	687b      	ldr	r3, [r7, #4]
 802555a:	685b      	ldr	r3, [r3, #4]
 802555c:	687a      	ldr	r2, [r7, #4]
 802555e:	6892      	ldr	r2, [r2, #8]
 8025560:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8025562:	687b      	ldr	r3, [r7, #4]
 8025564:	689b      	ldr	r3, [r3, #8]
 8025566:	687a      	ldr	r2, [r7, #4]
 8025568:	6852      	ldr	r2, [r2, #4]
 802556a:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 802556c:	68fb      	ldr	r3, [r7, #12]
 802556e:	685b      	ldr	r3, [r3, #4]
 8025570:	687a      	ldr	r2, [r7, #4]
 8025572:	429a      	cmp	r2, r3
 8025574:	d103      	bne.n	802557e <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8025576:	687b      	ldr	r3, [r7, #4]
 8025578:	689a      	ldr	r2, [r3, #8]
 802557a:	68fb      	ldr	r3, [r7, #12]
 802557c:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 802557e:	687b      	ldr	r3, [r7, #4]
 8025580:	2200      	movs	r2, #0
 8025582:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8025584:	68fb      	ldr	r3, [r7, #12]
 8025586:	681b      	ldr	r3, [r3, #0]
 8025588:	1e5a      	subs	r2, r3, #1
 802558a:	68fb      	ldr	r3, [r7, #12]
 802558c:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 802558e:	68fb      	ldr	r3, [r7, #12]
 8025590:	681b      	ldr	r3, [r3, #0]
}
 8025592:	4618      	mov	r0, r3
 8025594:	3714      	adds	r7, #20
 8025596:	46bd      	mov	sp, r7
 8025598:	f85d 7b04 	ldr.w	r7, [sp], #4
 802559c:	4770      	bx	lr
	...

080255a0 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80255a0:	b580      	push	{r7, lr}
 80255a2:	b084      	sub	sp, #16
 80255a4:	af00      	add	r7, sp, #0
 80255a6:	6078      	str	r0, [r7, #4]
 80255a8:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 80255aa:	687b      	ldr	r3, [r7, #4]
 80255ac:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80255ae:	68fb      	ldr	r3, [r7, #12]
 80255b0:	2b00      	cmp	r3, #0
 80255b2:	d10a      	bne.n	80255ca <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80255b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80255b8:	f383 8811 	msr	BASEPRI, r3
 80255bc:	f3bf 8f6f 	isb	sy
 80255c0:	f3bf 8f4f 	dsb	sy
 80255c4:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80255c6:	bf00      	nop
 80255c8:	e7fe      	b.n	80255c8 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 80255ca:	f002 f9a3 	bl	8027914 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80255ce:	68fb      	ldr	r3, [r7, #12]
 80255d0:	681a      	ldr	r2, [r3, #0]
 80255d2:	68fb      	ldr	r3, [r7, #12]
 80255d4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80255d6:	68f9      	ldr	r1, [r7, #12]
 80255d8:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80255da:	fb01 f303 	mul.w	r3, r1, r3
 80255de:	441a      	add	r2, r3
 80255e0:	68fb      	ldr	r3, [r7, #12]
 80255e2:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80255e4:	68fb      	ldr	r3, [r7, #12]
 80255e6:	2200      	movs	r2, #0
 80255e8:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80255ea:	68fb      	ldr	r3, [r7, #12]
 80255ec:	681a      	ldr	r2, [r3, #0]
 80255ee:	68fb      	ldr	r3, [r7, #12]
 80255f0:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80255f2:	68fb      	ldr	r3, [r7, #12]
 80255f4:	681a      	ldr	r2, [r3, #0]
 80255f6:	68fb      	ldr	r3, [r7, #12]
 80255f8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80255fa:	3b01      	subs	r3, #1
 80255fc:	68f9      	ldr	r1, [r7, #12]
 80255fe:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8025600:	fb01 f303 	mul.w	r3, r1, r3
 8025604:	441a      	add	r2, r3
 8025606:	68fb      	ldr	r3, [r7, #12]
 8025608:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 802560a:	68fb      	ldr	r3, [r7, #12]
 802560c:	22ff      	movs	r2, #255	; 0xff
 802560e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8025612:	68fb      	ldr	r3, [r7, #12]
 8025614:	22ff      	movs	r2, #255	; 0xff
 8025616:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 802561a:	683b      	ldr	r3, [r7, #0]
 802561c:	2b00      	cmp	r3, #0
 802561e:	d114      	bne.n	802564a <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8025620:	68fb      	ldr	r3, [r7, #12]
 8025622:	691b      	ldr	r3, [r3, #16]
 8025624:	2b00      	cmp	r3, #0
 8025626:	d01a      	beq.n	802565e <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8025628:	68fb      	ldr	r3, [r7, #12]
 802562a:	3310      	adds	r3, #16
 802562c:	4618      	mov	r0, r3
 802562e:	f001 fc63 	bl	8026ef8 <xTaskRemoveFromEventList>
 8025632:	4603      	mov	r3, r0
 8025634:	2b00      	cmp	r3, #0
 8025636:	d012      	beq.n	802565e <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8025638:	4b0c      	ldr	r3, [pc, #48]	; (802566c <xQueueGenericReset+0xcc>)
 802563a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 802563e:	601a      	str	r2, [r3, #0]
 8025640:	f3bf 8f4f 	dsb	sy
 8025644:	f3bf 8f6f 	isb	sy
 8025648:	e009      	b.n	802565e <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 802564a:	68fb      	ldr	r3, [r7, #12]
 802564c:	3310      	adds	r3, #16
 802564e:	4618      	mov	r0, r3
 8025650:	f7ff fef1 	bl	8025436 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8025654:	68fb      	ldr	r3, [r7, #12]
 8025656:	3324      	adds	r3, #36	; 0x24
 8025658:	4618      	mov	r0, r3
 802565a:	f7ff feec 	bl	8025436 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 802565e:	f002 f989 	bl	8027974 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8025662:	2301      	movs	r3, #1
}
 8025664:	4618      	mov	r0, r3
 8025666:	3710      	adds	r7, #16
 8025668:	46bd      	mov	sp, r7
 802566a:	bd80      	pop	{r7, pc}
 802566c:	e000ed04 	.word	0xe000ed04

08025670 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8025670:	b580      	push	{r7, lr}
 8025672:	b08e      	sub	sp, #56	; 0x38
 8025674:	af02      	add	r7, sp, #8
 8025676:	60f8      	str	r0, [r7, #12]
 8025678:	60b9      	str	r1, [r7, #8]
 802567a:	607a      	str	r2, [r7, #4]
 802567c:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 802567e:	68fb      	ldr	r3, [r7, #12]
 8025680:	2b00      	cmp	r3, #0
 8025682:	d10a      	bne.n	802569a <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8025684:	f04f 0350 	mov.w	r3, #80	; 0x50
 8025688:	f383 8811 	msr	BASEPRI, r3
 802568c:	f3bf 8f6f 	isb	sy
 8025690:	f3bf 8f4f 	dsb	sy
 8025694:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8025696:	bf00      	nop
 8025698:	e7fe      	b.n	8025698 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 802569a:	683b      	ldr	r3, [r7, #0]
 802569c:	2b00      	cmp	r3, #0
 802569e:	d10a      	bne.n	80256b6 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 80256a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80256a4:	f383 8811 	msr	BASEPRI, r3
 80256a8:	f3bf 8f6f 	isb	sy
 80256ac:	f3bf 8f4f 	dsb	sy
 80256b0:	627b      	str	r3, [r7, #36]	; 0x24
}
 80256b2:	bf00      	nop
 80256b4:	e7fe      	b.n	80256b4 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80256b6:	687b      	ldr	r3, [r7, #4]
 80256b8:	2b00      	cmp	r3, #0
 80256ba:	d002      	beq.n	80256c2 <xQueueGenericCreateStatic+0x52>
 80256bc:	68bb      	ldr	r3, [r7, #8]
 80256be:	2b00      	cmp	r3, #0
 80256c0:	d001      	beq.n	80256c6 <xQueueGenericCreateStatic+0x56>
 80256c2:	2301      	movs	r3, #1
 80256c4:	e000      	b.n	80256c8 <xQueueGenericCreateStatic+0x58>
 80256c6:	2300      	movs	r3, #0
 80256c8:	2b00      	cmp	r3, #0
 80256ca:	d10a      	bne.n	80256e2 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 80256cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80256d0:	f383 8811 	msr	BASEPRI, r3
 80256d4:	f3bf 8f6f 	isb	sy
 80256d8:	f3bf 8f4f 	dsb	sy
 80256dc:	623b      	str	r3, [r7, #32]
}
 80256de:	bf00      	nop
 80256e0:	e7fe      	b.n	80256e0 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80256e2:	687b      	ldr	r3, [r7, #4]
 80256e4:	2b00      	cmp	r3, #0
 80256e6:	d102      	bne.n	80256ee <xQueueGenericCreateStatic+0x7e>
 80256e8:	68bb      	ldr	r3, [r7, #8]
 80256ea:	2b00      	cmp	r3, #0
 80256ec:	d101      	bne.n	80256f2 <xQueueGenericCreateStatic+0x82>
 80256ee:	2301      	movs	r3, #1
 80256f0:	e000      	b.n	80256f4 <xQueueGenericCreateStatic+0x84>
 80256f2:	2300      	movs	r3, #0
 80256f4:	2b00      	cmp	r3, #0
 80256f6:	d10a      	bne.n	802570e <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 80256f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80256fc:	f383 8811 	msr	BASEPRI, r3
 8025700:	f3bf 8f6f 	isb	sy
 8025704:	f3bf 8f4f 	dsb	sy
 8025708:	61fb      	str	r3, [r7, #28]
}
 802570a:	bf00      	nop
 802570c:	e7fe      	b.n	802570c <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 802570e:	2348      	movs	r3, #72	; 0x48
 8025710:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8025712:	697b      	ldr	r3, [r7, #20]
 8025714:	2b48      	cmp	r3, #72	; 0x48
 8025716:	d00a      	beq.n	802572e <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8025718:	f04f 0350 	mov.w	r3, #80	; 0x50
 802571c:	f383 8811 	msr	BASEPRI, r3
 8025720:	f3bf 8f6f 	isb	sy
 8025724:	f3bf 8f4f 	dsb	sy
 8025728:	61bb      	str	r3, [r7, #24]
}
 802572a:	bf00      	nop
 802572c:	e7fe      	b.n	802572c <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 802572e:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8025730:	683b      	ldr	r3, [r7, #0]
 8025732:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8025734:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8025736:	2b00      	cmp	r3, #0
 8025738:	d00d      	beq.n	8025756 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 802573a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 802573c:	2201      	movs	r2, #1
 802573e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8025742:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8025746:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8025748:	9300      	str	r3, [sp, #0]
 802574a:	4613      	mov	r3, r2
 802574c:	687a      	ldr	r2, [r7, #4]
 802574e:	68b9      	ldr	r1, [r7, #8]
 8025750:	68f8      	ldr	r0, [r7, #12]
 8025752:	f000 f83f 	bl	80257d4 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8025756:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8025758:	4618      	mov	r0, r3
 802575a:	3730      	adds	r7, #48	; 0x30
 802575c:	46bd      	mov	sp, r7
 802575e:	bd80      	pop	{r7, pc}

08025760 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8025760:	b580      	push	{r7, lr}
 8025762:	b08a      	sub	sp, #40	; 0x28
 8025764:	af02      	add	r7, sp, #8
 8025766:	60f8      	str	r0, [r7, #12]
 8025768:	60b9      	str	r1, [r7, #8]
 802576a:	4613      	mov	r3, r2
 802576c:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 802576e:	68fb      	ldr	r3, [r7, #12]
 8025770:	2b00      	cmp	r3, #0
 8025772:	d10a      	bne.n	802578a <xQueueGenericCreate+0x2a>
	__asm volatile
 8025774:	f04f 0350 	mov.w	r3, #80	; 0x50
 8025778:	f383 8811 	msr	BASEPRI, r3
 802577c:	f3bf 8f6f 	isb	sy
 8025780:	f3bf 8f4f 	dsb	sy
 8025784:	613b      	str	r3, [r7, #16]
}
 8025786:	bf00      	nop
 8025788:	e7fe      	b.n	8025788 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 802578a:	68fb      	ldr	r3, [r7, #12]
 802578c:	68ba      	ldr	r2, [r7, #8]
 802578e:	fb02 f303 	mul.w	r3, r2, r3
 8025792:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8025794:	69fb      	ldr	r3, [r7, #28]
 8025796:	3348      	adds	r3, #72	; 0x48
 8025798:	4618      	mov	r0, r3
 802579a:	f002 f9dd 	bl	8027b58 <pvPortMalloc>
 802579e:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 80257a0:	69bb      	ldr	r3, [r7, #24]
 80257a2:	2b00      	cmp	r3, #0
 80257a4:	d011      	beq.n	80257ca <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 80257a6:	69bb      	ldr	r3, [r7, #24]
 80257a8:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80257aa:	697b      	ldr	r3, [r7, #20]
 80257ac:	3348      	adds	r3, #72	; 0x48
 80257ae:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 80257b0:	69bb      	ldr	r3, [r7, #24]
 80257b2:	2200      	movs	r2, #0
 80257b4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80257b8:	79fa      	ldrb	r2, [r7, #7]
 80257ba:	69bb      	ldr	r3, [r7, #24]
 80257bc:	9300      	str	r3, [sp, #0]
 80257be:	4613      	mov	r3, r2
 80257c0:	697a      	ldr	r2, [r7, #20]
 80257c2:	68b9      	ldr	r1, [r7, #8]
 80257c4:	68f8      	ldr	r0, [r7, #12]
 80257c6:	f000 f805 	bl	80257d4 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80257ca:	69bb      	ldr	r3, [r7, #24]
	}
 80257cc:	4618      	mov	r0, r3
 80257ce:	3720      	adds	r7, #32
 80257d0:	46bd      	mov	sp, r7
 80257d2:	bd80      	pop	{r7, pc}

080257d4 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80257d4:	b580      	push	{r7, lr}
 80257d6:	b084      	sub	sp, #16
 80257d8:	af00      	add	r7, sp, #0
 80257da:	60f8      	str	r0, [r7, #12]
 80257dc:	60b9      	str	r1, [r7, #8]
 80257de:	607a      	str	r2, [r7, #4]
 80257e0:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80257e2:	68bb      	ldr	r3, [r7, #8]
 80257e4:	2b00      	cmp	r3, #0
 80257e6:	d103      	bne.n	80257f0 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80257e8:	69bb      	ldr	r3, [r7, #24]
 80257ea:	69ba      	ldr	r2, [r7, #24]
 80257ec:	601a      	str	r2, [r3, #0]
 80257ee:	e002      	b.n	80257f6 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80257f0:	69bb      	ldr	r3, [r7, #24]
 80257f2:	687a      	ldr	r2, [r7, #4]
 80257f4:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80257f6:	69bb      	ldr	r3, [r7, #24]
 80257f8:	68fa      	ldr	r2, [r7, #12]
 80257fa:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80257fc:	69bb      	ldr	r3, [r7, #24]
 80257fe:	68ba      	ldr	r2, [r7, #8]
 8025800:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8025802:	2101      	movs	r1, #1
 8025804:	69b8      	ldr	r0, [r7, #24]
 8025806:	f7ff fecb 	bl	80255a0 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 802580a:	bf00      	nop
 802580c:	3710      	adds	r7, #16
 802580e:	46bd      	mov	sp, r7
 8025810:	bd80      	pop	{r7, pc}

08025812 <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 8025812:	b580      	push	{r7, lr}
 8025814:	b082      	sub	sp, #8
 8025816:	af00      	add	r7, sp, #0
 8025818:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 802581a:	687b      	ldr	r3, [r7, #4]
 802581c:	2b00      	cmp	r3, #0
 802581e:	d00e      	beq.n	802583e <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 8025820:	687b      	ldr	r3, [r7, #4]
 8025822:	2200      	movs	r2, #0
 8025824:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 8025826:	687b      	ldr	r3, [r7, #4]
 8025828:	2200      	movs	r2, #0
 802582a:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 802582c:	687b      	ldr	r3, [r7, #4]
 802582e:	2200      	movs	r2, #0
 8025830:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8025832:	2300      	movs	r3, #0
 8025834:	2200      	movs	r2, #0
 8025836:	2100      	movs	r1, #0
 8025838:	6878      	ldr	r0, [r7, #4]
 802583a:	f000 f837 	bl	80258ac <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 802583e:	bf00      	nop
 8025840:	3708      	adds	r7, #8
 8025842:	46bd      	mov	sp, r7
 8025844:	bd80      	pop	{r7, pc}

08025846 <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 8025846:	b580      	push	{r7, lr}
 8025848:	b086      	sub	sp, #24
 802584a:	af00      	add	r7, sp, #0
 802584c:	4603      	mov	r3, r0
 802584e:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8025850:	2301      	movs	r3, #1
 8025852:	617b      	str	r3, [r7, #20]
 8025854:	2300      	movs	r3, #0
 8025856:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 8025858:	79fb      	ldrb	r3, [r7, #7]
 802585a:	461a      	mov	r2, r3
 802585c:	6939      	ldr	r1, [r7, #16]
 802585e:	6978      	ldr	r0, [r7, #20]
 8025860:	f7ff ff7e 	bl	8025760 <xQueueGenericCreate>
 8025864:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8025866:	68f8      	ldr	r0, [r7, #12]
 8025868:	f7ff ffd3 	bl	8025812 <prvInitialiseMutex>

		return xNewQueue;
 802586c:	68fb      	ldr	r3, [r7, #12]
	}
 802586e:	4618      	mov	r0, r3
 8025870:	3718      	adds	r7, #24
 8025872:	46bd      	mov	sp, r7
 8025874:	bd80      	pop	{r7, pc}

08025876 <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 8025876:	b580      	push	{r7, lr}
 8025878:	b088      	sub	sp, #32
 802587a:	af02      	add	r7, sp, #8
 802587c:	4603      	mov	r3, r0
 802587e:	6039      	str	r1, [r7, #0]
 8025880:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8025882:	2301      	movs	r3, #1
 8025884:	617b      	str	r3, [r7, #20]
 8025886:	2300      	movs	r3, #0
 8025888:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 802588a:	79fb      	ldrb	r3, [r7, #7]
 802588c:	9300      	str	r3, [sp, #0]
 802588e:	683b      	ldr	r3, [r7, #0]
 8025890:	2200      	movs	r2, #0
 8025892:	6939      	ldr	r1, [r7, #16]
 8025894:	6978      	ldr	r0, [r7, #20]
 8025896:	f7ff feeb 	bl	8025670 <xQueueGenericCreateStatic>
 802589a:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 802589c:	68f8      	ldr	r0, [r7, #12]
 802589e:	f7ff ffb8 	bl	8025812 <prvInitialiseMutex>

		return xNewQueue;
 80258a2:	68fb      	ldr	r3, [r7, #12]
	}
 80258a4:	4618      	mov	r0, r3
 80258a6:	3718      	adds	r7, #24
 80258a8:	46bd      	mov	sp, r7
 80258aa:	bd80      	pop	{r7, pc}

080258ac <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80258ac:	b580      	push	{r7, lr}
 80258ae:	b08e      	sub	sp, #56	; 0x38
 80258b0:	af00      	add	r7, sp, #0
 80258b2:	60f8      	str	r0, [r7, #12]
 80258b4:	60b9      	str	r1, [r7, #8]
 80258b6:	607a      	str	r2, [r7, #4]
 80258b8:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80258ba:	2300      	movs	r3, #0
 80258bc:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80258be:	68fb      	ldr	r3, [r7, #12]
 80258c0:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80258c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80258c4:	2b00      	cmp	r3, #0
 80258c6:	d10a      	bne.n	80258de <xQueueGenericSend+0x32>
	__asm volatile
 80258c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80258cc:	f383 8811 	msr	BASEPRI, r3
 80258d0:	f3bf 8f6f 	isb	sy
 80258d4:	f3bf 8f4f 	dsb	sy
 80258d8:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80258da:	bf00      	nop
 80258dc:	e7fe      	b.n	80258dc <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80258de:	68bb      	ldr	r3, [r7, #8]
 80258e0:	2b00      	cmp	r3, #0
 80258e2:	d103      	bne.n	80258ec <xQueueGenericSend+0x40>
 80258e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80258e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80258e8:	2b00      	cmp	r3, #0
 80258ea:	d101      	bne.n	80258f0 <xQueueGenericSend+0x44>
 80258ec:	2301      	movs	r3, #1
 80258ee:	e000      	b.n	80258f2 <xQueueGenericSend+0x46>
 80258f0:	2300      	movs	r3, #0
 80258f2:	2b00      	cmp	r3, #0
 80258f4:	d10a      	bne.n	802590c <xQueueGenericSend+0x60>
	__asm volatile
 80258f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80258fa:	f383 8811 	msr	BASEPRI, r3
 80258fe:	f3bf 8f6f 	isb	sy
 8025902:	f3bf 8f4f 	dsb	sy
 8025906:	627b      	str	r3, [r7, #36]	; 0x24
}
 8025908:	bf00      	nop
 802590a:	e7fe      	b.n	802590a <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 802590c:	683b      	ldr	r3, [r7, #0]
 802590e:	2b02      	cmp	r3, #2
 8025910:	d103      	bne.n	802591a <xQueueGenericSend+0x6e>
 8025912:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8025914:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8025916:	2b01      	cmp	r3, #1
 8025918:	d101      	bne.n	802591e <xQueueGenericSend+0x72>
 802591a:	2301      	movs	r3, #1
 802591c:	e000      	b.n	8025920 <xQueueGenericSend+0x74>
 802591e:	2300      	movs	r3, #0
 8025920:	2b00      	cmp	r3, #0
 8025922:	d10a      	bne.n	802593a <xQueueGenericSend+0x8e>
	__asm volatile
 8025924:	f04f 0350 	mov.w	r3, #80	; 0x50
 8025928:	f383 8811 	msr	BASEPRI, r3
 802592c:	f3bf 8f6f 	isb	sy
 8025930:	f3bf 8f4f 	dsb	sy
 8025934:	623b      	str	r3, [r7, #32]
}
 8025936:	bf00      	nop
 8025938:	e7fe      	b.n	8025938 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 802593a:	f001 fc9d 	bl	8027278 <xTaskGetSchedulerState>
 802593e:	4603      	mov	r3, r0
 8025940:	2b00      	cmp	r3, #0
 8025942:	d102      	bne.n	802594a <xQueueGenericSend+0x9e>
 8025944:	687b      	ldr	r3, [r7, #4]
 8025946:	2b00      	cmp	r3, #0
 8025948:	d101      	bne.n	802594e <xQueueGenericSend+0xa2>
 802594a:	2301      	movs	r3, #1
 802594c:	e000      	b.n	8025950 <xQueueGenericSend+0xa4>
 802594e:	2300      	movs	r3, #0
 8025950:	2b00      	cmp	r3, #0
 8025952:	d10a      	bne.n	802596a <xQueueGenericSend+0xbe>
	__asm volatile
 8025954:	f04f 0350 	mov.w	r3, #80	; 0x50
 8025958:	f383 8811 	msr	BASEPRI, r3
 802595c:	f3bf 8f6f 	isb	sy
 8025960:	f3bf 8f4f 	dsb	sy
 8025964:	61fb      	str	r3, [r7, #28]
}
 8025966:	bf00      	nop
 8025968:	e7fe      	b.n	8025968 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 802596a:	f001 ffd3 	bl	8027914 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 802596e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8025970:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8025972:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8025974:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8025976:	429a      	cmp	r2, r3
 8025978:	d302      	bcc.n	8025980 <xQueueGenericSend+0xd4>
 802597a:	683b      	ldr	r3, [r7, #0]
 802597c:	2b02      	cmp	r3, #2
 802597e:	d129      	bne.n	80259d4 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8025980:	683a      	ldr	r2, [r7, #0]
 8025982:	68b9      	ldr	r1, [r7, #8]
 8025984:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8025986:	f000 fc9a 	bl	80262be <prvCopyDataToQueue>
 802598a:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 802598c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 802598e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8025990:	2b00      	cmp	r3, #0
 8025992:	d010      	beq.n	80259b6 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8025994:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8025996:	3324      	adds	r3, #36	; 0x24
 8025998:	4618      	mov	r0, r3
 802599a:	f001 faad 	bl	8026ef8 <xTaskRemoveFromEventList>
 802599e:	4603      	mov	r3, r0
 80259a0:	2b00      	cmp	r3, #0
 80259a2:	d013      	beq.n	80259cc <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80259a4:	4b3f      	ldr	r3, [pc, #252]	; (8025aa4 <xQueueGenericSend+0x1f8>)
 80259a6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80259aa:	601a      	str	r2, [r3, #0]
 80259ac:	f3bf 8f4f 	dsb	sy
 80259b0:	f3bf 8f6f 	isb	sy
 80259b4:	e00a      	b.n	80259cc <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80259b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80259b8:	2b00      	cmp	r3, #0
 80259ba:	d007      	beq.n	80259cc <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80259bc:	4b39      	ldr	r3, [pc, #228]	; (8025aa4 <xQueueGenericSend+0x1f8>)
 80259be:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80259c2:	601a      	str	r2, [r3, #0]
 80259c4:	f3bf 8f4f 	dsb	sy
 80259c8:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80259cc:	f001 ffd2 	bl	8027974 <vPortExitCritical>
				return pdPASS;
 80259d0:	2301      	movs	r3, #1
 80259d2:	e063      	b.n	8025a9c <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80259d4:	687b      	ldr	r3, [r7, #4]
 80259d6:	2b00      	cmp	r3, #0
 80259d8:	d103      	bne.n	80259e2 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80259da:	f001 ffcb 	bl	8027974 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80259de:	2300      	movs	r3, #0
 80259e0:	e05c      	b.n	8025a9c <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 80259e2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80259e4:	2b00      	cmp	r3, #0
 80259e6:	d106      	bne.n	80259f6 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80259e8:	f107 0314 	add.w	r3, r7, #20
 80259ec:	4618      	mov	r0, r3
 80259ee:	f001 fae5 	bl	8026fbc <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80259f2:	2301      	movs	r3, #1
 80259f4:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80259f6:	f001 ffbd 	bl	8027974 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80259fa:	f001 f873 	bl	8026ae4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80259fe:	f001 ff89 	bl	8027914 <vPortEnterCritical>
 8025a02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8025a04:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8025a08:	b25b      	sxtb	r3, r3
 8025a0a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8025a0e:	d103      	bne.n	8025a18 <xQueueGenericSend+0x16c>
 8025a10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8025a12:	2200      	movs	r2, #0
 8025a14:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8025a18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8025a1a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8025a1e:	b25b      	sxtb	r3, r3
 8025a20:	f1b3 3fff 	cmp.w	r3, #4294967295
 8025a24:	d103      	bne.n	8025a2e <xQueueGenericSend+0x182>
 8025a26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8025a28:	2200      	movs	r2, #0
 8025a2a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8025a2e:	f001 ffa1 	bl	8027974 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8025a32:	1d3a      	adds	r2, r7, #4
 8025a34:	f107 0314 	add.w	r3, r7, #20
 8025a38:	4611      	mov	r1, r2
 8025a3a:	4618      	mov	r0, r3
 8025a3c:	f001 fad4 	bl	8026fe8 <xTaskCheckForTimeOut>
 8025a40:	4603      	mov	r3, r0
 8025a42:	2b00      	cmp	r3, #0
 8025a44:	d124      	bne.n	8025a90 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8025a46:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8025a48:	f000 fd31 	bl	80264ae <prvIsQueueFull>
 8025a4c:	4603      	mov	r3, r0
 8025a4e:	2b00      	cmp	r3, #0
 8025a50:	d018      	beq.n	8025a84 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8025a52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8025a54:	3310      	adds	r3, #16
 8025a56:	687a      	ldr	r2, [r7, #4]
 8025a58:	4611      	mov	r1, r2
 8025a5a:	4618      	mov	r0, r3
 8025a5c:	f001 fa28 	bl	8026eb0 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8025a60:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8025a62:	f000 fcbc 	bl	80263de <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8025a66:	f001 f84b 	bl	8026b00 <xTaskResumeAll>
 8025a6a:	4603      	mov	r3, r0
 8025a6c:	2b00      	cmp	r3, #0
 8025a6e:	f47f af7c 	bne.w	802596a <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8025a72:	4b0c      	ldr	r3, [pc, #48]	; (8025aa4 <xQueueGenericSend+0x1f8>)
 8025a74:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8025a78:	601a      	str	r2, [r3, #0]
 8025a7a:	f3bf 8f4f 	dsb	sy
 8025a7e:	f3bf 8f6f 	isb	sy
 8025a82:	e772      	b.n	802596a <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8025a84:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8025a86:	f000 fcaa 	bl	80263de <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8025a8a:	f001 f839 	bl	8026b00 <xTaskResumeAll>
 8025a8e:	e76c      	b.n	802596a <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8025a90:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8025a92:	f000 fca4 	bl	80263de <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8025a96:	f001 f833 	bl	8026b00 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8025a9a:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8025a9c:	4618      	mov	r0, r3
 8025a9e:	3738      	adds	r7, #56	; 0x38
 8025aa0:	46bd      	mov	sp, r7
 8025aa2:	bd80      	pop	{r7, pc}
 8025aa4:	e000ed04 	.word	0xe000ed04

08025aa8 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8025aa8:	b580      	push	{r7, lr}
 8025aaa:	b090      	sub	sp, #64	; 0x40
 8025aac:	af00      	add	r7, sp, #0
 8025aae:	60f8      	str	r0, [r7, #12]
 8025ab0:	60b9      	str	r1, [r7, #8]
 8025ab2:	607a      	str	r2, [r7, #4]
 8025ab4:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8025ab6:	68fb      	ldr	r3, [r7, #12]
 8025ab8:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 8025aba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8025abc:	2b00      	cmp	r3, #0
 8025abe:	d10a      	bne.n	8025ad6 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8025ac0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8025ac4:	f383 8811 	msr	BASEPRI, r3
 8025ac8:	f3bf 8f6f 	isb	sy
 8025acc:	f3bf 8f4f 	dsb	sy
 8025ad0:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8025ad2:	bf00      	nop
 8025ad4:	e7fe      	b.n	8025ad4 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8025ad6:	68bb      	ldr	r3, [r7, #8]
 8025ad8:	2b00      	cmp	r3, #0
 8025ada:	d103      	bne.n	8025ae4 <xQueueGenericSendFromISR+0x3c>
 8025adc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8025ade:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8025ae0:	2b00      	cmp	r3, #0
 8025ae2:	d101      	bne.n	8025ae8 <xQueueGenericSendFromISR+0x40>
 8025ae4:	2301      	movs	r3, #1
 8025ae6:	e000      	b.n	8025aea <xQueueGenericSendFromISR+0x42>
 8025ae8:	2300      	movs	r3, #0
 8025aea:	2b00      	cmp	r3, #0
 8025aec:	d10a      	bne.n	8025b04 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8025aee:	f04f 0350 	mov.w	r3, #80	; 0x50
 8025af2:	f383 8811 	msr	BASEPRI, r3
 8025af6:	f3bf 8f6f 	isb	sy
 8025afa:	f3bf 8f4f 	dsb	sy
 8025afe:	627b      	str	r3, [r7, #36]	; 0x24
}
 8025b00:	bf00      	nop
 8025b02:	e7fe      	b.n	8025b02 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8025b04:	683b      	ldr	r3, [r7, #0]
 8025b06:	2b02      	cmp	r3, #2
 8025b08:	d103      	bne.n	8025b12 <xQueueGenericSendFromISR+0x6a>
 8025b0a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8025b0c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8025b0e:	2b01      	cmp	r3, #1
 8025b10:	d101      	bne.n	8025b16 <xQueueGenericSendFromISR+0x6e>
 8025b12:	2301      	movs	r3, #1
 8025b14:	e000      	b.n	8025b18 <xQueueGenericSendFromISR+0x70>
 8025b16:	2300      	movs	r3, #0
 8025b18:	2b00      	cmp	r3, #0
 8025b1a:	d10a      	bne.n	8025b32 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8025b1c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8025b20:	f383 8811 	msr	BASEPRI, r3
 8025b24:	f3bf 8f6f 	isb	sy
 8025b28:	f3bf 8f4f 	dsb	sy
 8025b2c:	623b      	str	r3, [r7, #32]
}
 8025b2e:	bf00      	nop
 8025b30:	e7fe      	b.n	8025b30 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8025b32:	f001 ffd1 	bl	8027ad8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8025b36:	f3ef 8211 	mrs	r2, BASEPRI
 8025b3a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8025b3e:	f383 8811 	msr	BASEPRI, r3
 8025b42:	f3bf 8f6f 	isb	sy
 8025b46:	f3bf 8f4f 	dsb	sy
 8025b4a:	61fa      	str	r2, [r7, #28]
 8025b4c:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8025b4e:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8025b50:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8025b52:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8025b54:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8025b56:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8025b58:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8025b5a:	429a      	cmp	r2, r3
 8025b5c:	d302      	bcc.n	8025b64 <xQueueGenericSendFromISR+0xbc>
 8025b5e:	683b      	ldr	r3, [r7, #0]
 8025b60:	2b02      	cmp	r3, #2
 8025b62:	d12f      	bne.n	8025bc4 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8025b64:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8025b66:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8025b6a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8025b6e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8025b70:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8025b72:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8025b74:	683a      	ldr	r2, [r7, #0]
 8025b76:	68b9      	ldr	r1, [r7, #8]
 8025b78:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8025b7a:	f000 fba0 	bl	80262be <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8025b7e:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8025b82:	f1b3 3fff 	cmp.w	r3, #4294967295
 8025b86:	d112      	bne.n	8025bae <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8025b88:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8025b8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8025b8c:	2b00      	cmp	r3, #0
 8025b8e:	d016      	beq.n	8025bbe <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8025b90:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8025b92:	3324      	adds	r3, #36	; 0x24
 8025b94:	4618      	mov	r0, r3
 8025b96:	f001 f9af 	bl	8026ef8 <xTaskRemoveFromEventList>
 8025b9a:	4603      	mov	r3, r0
 8025b9c:	2b00      	cmp	r3, #0
 8025b9e:	d00e      	beq.n	8025bbe <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8025ba0:	687b      	ldr	r3, [r7, #4]
 8025ba2:	2b00      	cmp	r3, #0
 8025ba4:	d00b      	beq.n	8025bbe <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8025ba6:	687b      	ldr	r3, [r7, #4]
 8025ba8:	2201      	movs	r2, #1
 8025baa:	601a      	str	r2, [r3, #0]
 8025bac:	e007      	b.n	8025bbe <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8025bae:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8025bb2:	3301      	adds	r3, #1
 8025bb4:	b2db      	uxtb	r3, r3
 8025bb6:	b25a      	sxtb	r2, r3
 8025bb8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8025bba:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8025bbe:	2301      	movs	r3, #1
 8025bc0:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 8025bc2:	e001      	b.n	8025bc8 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8025bc4:	2300      	movs	r3, #0
 8025bc6:	63fb      	str	r3, [r7, #60]	; 0x3c
 8025bc8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8025bca:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8025bcc:	697b      	ldr	r3, [r7, #20]
 8025bce:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8025bd2:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8025bd4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8025bd6:	4618      	mov	r0, r3
 8025bd8:	3740      	adds	r7, #64	; 0x40
 8025bda:	46bd      	mov	sp, r7
 8025bdc:	bd80      	pop	{r7, pc}

08025bde <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8025bde:	b580      	push	{r7, lr}
 8025be0:	b08e      	sub	sp, #56	; 0x38
 8025be2:	af00      	add	r7, sp, #0
 8025be4:	6078      	str	r0, [r7, #4]
 8025be6:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8025be8:	687b      	ldr	r3, [r7, #4]
 8025bea:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 8025bec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8025bee:	2b00      	cmp	r3, #0
 8025bf0:	d10a      	bne.n	8025c08 <xQueueGiveFromISR+0x2a>
	__asm volatile
 8025bf2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8025bf6:	f383 8811 	msr	BASEPRI, r3
 8025bfa:	f3bf 8f6f 	isb	sy
 8025bfe:	f3bf 8f4f 	dsb	sy
 8025c02:	623b      	str	r3, [r7, #32]
}
 8025c04:	bf00      	nop
 8025c06:	e7fe      	b.n	8025c06 <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8025c08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8025c0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8025c0c:	2b00      	cmp	r3, #0
 8025c0e:	d00a      	beq.n	8025c26 <xQueueGiveFromISR+0x48>
	__asm volatile
 8025c10:	f04f 0350 	mov.w	r3, #80	; 0x50
 8025c14:	f383 8811 	msr	BASEPRI, r3
 8025c18:	f3bf 8f6f 	isb	sy
 8025c1c:	f3bf 8f4f 	dsb	sy
 8025c20:	61fb      	str	r3, [r7, #28]
}
 8025c22:	bf00      	nop
 8025c24:	e7fe      	b.n	8025c24 <xQueueGiveFromISR+0x46>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 8025c26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8025c28:	681b      	ldr	r3, [r3, #0]
 8025c2a:	2b00      	cmp	r3, #0
 8025c2c:	d103      	bne.n	8025c36 <xQueueGiveFromISR+0x58>
 8025c2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8025c30:	689b      	ldr	r3, [r3, #8]
 8025c32:	2b00      	cmp	r3, #0
 8025c34:	d101      	bne.n	8025c3a <xQueueGiveFromISR+0x5c>
 8025c36:	2301      	movs	r3, #1
 8025c38:	e000      	b.n	8025c3c <xQueueGiveFromISR+0x5e>
 8025c3a:	2300      	movs	r3, #0
 8025c3c:	2b00      	cmp	r3, #0
 8025c3e:	d10a      	bne.n	8025c56 <xQueueGiveFromISR+0x78>
	__asm volatile
 8025c40:	f04f 0350 	mov.w	r3, #80	; 0x50
 8025c44:	f383 8811 	msr	BASEPRI, r3
 8025c48:	f3bf 8f6f 	isb	sy
 8025c4c:	f3bf 8f4f 	dsb	sy
 8025c50:	61bb      	str	r3, [r7, #24]
}
 8025c52:	bf00      	nop
 8025c54:	e7fe      	b.n	8025c54 <xQueueGiveFromISR+0x76>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8025c56:	f001 ff3f 	bl	8027ad8 <vPortValidateInterruptPriority>
	__asm volatile
 8025c5a:	f3ef 8211 	mrs	r2, BASEPRI
 8025c5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8025c62:	f383 8811 	msr	BASEPRI, r3
 8025c66:	f3bf 8f6f 	isb	sy
 8025c6a:	f3bf 8f4f 	dsb	sy
 8025c6e:	617a      	str	r2, [r7, #20]
 8025c70:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 8025c72:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8025c74:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8025c76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8025c78:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8025c7a:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 8025c7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8025c7e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8025c80:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8025c82:	429a      	cmp	r2, r3
 8025c84:	d22b      	bcs.n	8025cde <xQueueGiveFromISR+0x100>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8025c86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8025c88:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8025c8c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8025c90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8025c92:	1c5a      	adds	r2, r3, #1
 8025c94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8025c96:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8025c98:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8025c9c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8025ca0:	d112      	bne.n	8025cc8 <xQueueGiveFromISR+0xea>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8025ca2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8025ca4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8025ca6:	2b00      	cmp	r3, #0
 8025ca8:	d016      	beq.n	8025cd8 <xQueueGiveFromISR+0xfa>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8025caa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8025cac:	3324      	adds	r3, #36	; 0x24
 8025cae:	4618      	mov	r0, r3
 8025cb0:	f001 f922 	bl	8026ef8 <xTaskRemoveFromEventList>
 8025cb4:	4603      	mov	r3, r0
 8025cb6:	2b00      	cmp	r3, #0
 8025cb8:	d00e      	beq.n	8025cd8 <xQueueGiveFromISR+0xfa>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8025cba:	683b      	ldr	r3, [r7, #0]
 8025cbc:	2b00      	cmp	r3, #0
 8025cbe:	d00b      	beq.n	8025cd8 <xQueueGiveFromISR+0xfa>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8025cc0:	683b      	ldr	r3, [r7, #0]
 8025cc2:	2201      	movs	r2, #1
 8025cc4:	601a      	str	r2, [r3, #0]
 8025cc6:	e007      	b.n	8025cd8 <xQueueGiveFromISR+0xfa>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8025cc8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8025ccc:	3301      	adds	r3, #1
 8025cce:	b2db      	uxtb	r3, r3
 8025cd0:	b25a      	sxtb	r2, r3
 8025cd2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8025cd4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8025cd8:	2301      	movs	r3, #1
 8025cda:	637b      	str	r3, [r7, #52]	; 0x34
 8025cdc:	e001      	b.n	8025ce2 <xQueueGiveFromISR+0x104>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8025cde:	2300      	movs	r3, #0
 8025ce0:	637b      	str	r3, [r7, #52]	; 0x34
 8025ce2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8025ce4:	60fb      	str	r3, [r7, #12]
	__asm volatile
 8025ce6:	68fb      	ldr	r3, [r7, #12]
 8025ce8:	f383 8811 	msr	BASEPRI, r3
}
 8025cec:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8025cee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8025cf0:	4618      	mov	r0, r3
 8025cf2:	3738      	adds	r7, #56	; 0x38
 8025cf4:	46bd      	mov	sp, r7
 8025cf6:	bd80      	pop	{r7, pc}

08025cf8 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8025cf8:	b580      	push	{r7, lr}
 8025cfa:	b08c      	sub	sp, #48	; 0x30
 8025cfc:	af00      	add	r7, sp, #0
 8025cfe:	60f8      	str	r0, [r7, #12]
 8025d00:	60b9      	str	r1, [r7, #8]
 8025d02:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8025d04:	2300      	movs	r3, #0
 8025d06:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8025d08:	68fb      	ldr	r3, [r7, #12]
 8025d0a:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8025d0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8025d0e:	2b00      	cmp	r3, #0
 8025d10:	d10a      	bne.n	8025d28 <xQueueReceive+0x30>
	__asm volatile
 8025d12:	f04f 0350 	mov.w	r3, #80	; 0x50
 8025d16:	f383 8811 	msr	BASEPRI, r3
 8025d1a:	f3bf 8f6f 	isb	sy
 8025d1e:	f3bf 8f4f 	dsb	sy
 8025d22:	623b      	str	r3, [r7, #32]
}
 8025d24:	bf00      	nop
 8025d26:	e7fe      	b.n	8025d26 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8025d28:	68bb      	ldr	r3, [r7, #8]
 8025d2a:	2b00      	cmp	r3, #0
 8025d2c:	d103      	bne.n	8025d36 <xQueueReceive+0x3e>
 8025d2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8025d30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8025d32:	2b00      	cmp	r3, #0
 8025d34:	d101      	bne.n	8025d3a <xQueueReceive+0x42>
 8025d36:	2301      	movs	r3, #1
 8025d38:	e000      	b.n	8025d3c <xQueueReceive+0x44>
 8025d3a:	2300      	movs	r3, #0
 8025d3c:	2b00      	cmp	r3, #0
 8025d3e:	d10a      	bne.n	8025d56 <xQueueReceive+0x5e>
	__asm volatile
 8025d40:	f04f 0350 	mov.w	r3, #80	; 0x50
 8025d44:	f383 8811 	msr	BASEPRI, r3
 8025d48:	f3bf 8f6f 	isb	sy
 8025d4c:	f3bf 8f4f 	dsb	sy
 8025d50:	61fb      	str	r3, [r7, #28]
}
 8025d52:	bf00      	nop
 8025d54:	e7fe      	b.n	8025d54 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8025d56:	f001 fa8f 	bl	8027278 <xTaskGetSchedulerState>
 8025d5a:	4603      	mov	r3, r0
 8025d5c:	2b00      	cmp	r3, #0
 8025d5e:	d102      	bne.n	8025d66 <xQueueReceive+0x6e>
 8025d60:	687b      	ldr	r3, [r7, #4]
 8025d62:	2b00      	cmp	r3, #0
 8025d64:	d101      	bne.n	8025d6a <xQueueReceive+0x72>
 8025d66:	2301      	movs	r3, #1
 8025d68:	e000      	b.n	8025d6c <xQueueReceive+0x74>
 8025d6a:	2300      	movs	r3, #0
 8025d6c:	2b00      	cmp	r3, #0
 8025d6e:	d10a      	bne.n	8025d86 <xQueueReceive+0x8e>
	__asm volatile
 8025d70:	f04f 0350 	mov.w	r3, #80	; 0x50
 8025d74:	f383 8811 	msr	BASEPRI, r3
 8025d78:	f3bf 8f6f 	isb	sy
 8025d7c:	f3bf 8f4f 	dsb	sy
 8025d80:	61bb      	str	r3, [r7, #24]
}
 8025d82:	bf00      	nop
 8025d84:	e7fe      	b.n	8025d84 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8025d86:	f001 fdc5 	bl	8027914 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8025d8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8025d8c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8025d8e:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8025d90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8025d92:	2b00      	cmp	r3, #0
 8025d94:	d01f      	beq.n	8025dd6 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8025d96:	68b9      	ldr	r1, [r7, #8]
 8025d98:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8025d9a:	f000 fafa 	bl	8026392 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8025d9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8025da0:	1e5a      	subs	r2, r3, #1
 8025da2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8025da4:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8025da6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8025da8:	691b      	ldr	r3, [r3, #16]
 8025daa:	2b00      	cmp	r3, #0
 8025dac:	d00f      	beq.n	8025dce <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8025dae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8025db0:	3310      	adds	r3, #16
 8025db2:	4618      	mov	r0, r3
 8025db4:	f001 f8a0 	bl	8026ef8 <xTaskRemoveFromEventList>
 8025db8:	4603      	mov	r3, r0
 8025dba:	2b00      	cmp	r3, #0
 8025dbc:	d007      	beq.n	8025dce <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8025dbe:	4b3d      	ldr	r3, [pc, #244]	; (8025eb4 <xQueueReceive+0x1bc>)
 8025dc0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8025dc4:	601a      	str	r2, [r3, #0]
 8025dc6:	f3bf 8f4f 	dsb	sy
 8025dca:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8025dce:	f001 fdd1 	bl	8027974 <vPortExitCritical>
				return pdPASS;
 8025dd2:	2301      	movs	r3, #1
 8025dd4:	e069      	b.n	8025eaa <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8025dd6:	687b      	ldr	r3, [r7, #4]
 8025dd8:	2b00      	cmp	r3, #0
 8025dda:	d103      	bne.n	8025de4 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8025ddc:	f001 fdca 	bl	8027974 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8025de0:	2300      	movs	r3, #0
 8025de2:	e062      	b.n	8025eaa <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8025de4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8025de6:	2b00      	cmp	r3, #0
 8025de8:	d106      	bne.n	8025df8 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8025dea:	f107 0310 	add.w	r3, r7, #16
 8025dee:	4618      	mov	r0, r3
 8025df0:	f001 f8e4 	bl	8026fbc <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8025df4:	2301      	movs	r3, #1
 8025df6:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8025df8:	f001 fdbc 	bl	8027974 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8025dfc:	f000 fe72 	bl	8026ae4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8025e00:	f001 fd88 	bl	8027914 <vPortEnterCritical>
 8025e04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8025e06:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8025e0a:	b25b      	sxtb	r3, r3
 8025e0c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8025e10:	d103      	bne.n	8025e1a <xQueueReceive+0x122>
 8025e12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8025e14:	2200      	movs	r2, #0
 8025e16:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8025e1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8025e1c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8025e20:	b25b      	sxtb	r3, r3
 8025e22:	f1b3 3fff 	cmp.w	r3, #4294967295
 8025e26:	d103      	bne.n	8025e30 <xQueueReceive+0x138>
 8025e28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8025e2a:	2200      	movs	r2, #0
 8025e2c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8025e30:	f001 fda0 	bl	8027974 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8025e34:	1d3a      	adds	r2, r7, #4
 8025e36:	f107 0310 	add.w	r3, r7, #16
 8025e3a:	4611      	mov	r1, r2
 8025e3c:	4618      	mov	r0, r3
 8025e3e:	f001 f8d3 	bl	8026fe8 <xTaskCheckForTimeOut>
 8025e42:	4603      	mov	r3, r0
 8025e44:	2b00      	cmp	r3, #0
 8025e46:	d123      	bne.n	8025e90 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8025e48:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8025e4a:	f000 fb1a 	bl	8026482 <prvIsQueueEmpty>
 8025e4e:	4603      	mov	r3, r0
 8025e50:	2b00      	cmp	r3, #0
 8025e52:	d017      	beq.n	8025e84 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8025e54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8025e56:	3324      	adds	r3, #36	; 0x24
 8025e58:	687a      	ldr	r2, [r7, #4]
 8025e5a:	4611      	mov	r1, r2
 8025e5c:	4618      	mov	r0, r3
 8025e5e:	f001 f827 	bl	8026eb0 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8025e62:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8025e64:	f000 fabb 	bl	80263de <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8025e68:	f000 fe4a 	bl	8026b00 <xTaskResumeAll>
 8025e6c:	4603      	mov	r3, r0
 8025e6e:	2b00      	cmp	r3, #0
 8025e70:	d189      	bne.n	8025d86 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8025e72:	4b10      	ldr	r3, [pc, #64]	; (8025eb4 <xQueueReceive+0x1bc>)
 8025e74:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8025e78:	601a      	str	r2, [r3, #0]
 8025e7a:	f3bf 8f4f 	dsb	sy
 8025e7e:	f3bf 8f6f 	isb	sy
 8025e82:	e780      	b.n	8025d86 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8025e84:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8025e86:	f000 faaa 	bl	80263de <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8025e8a:	f000 fe39 	bl	8026b00 <xTaskResumeAll>
 8025e8e:	e77a      	b.n	8025d86 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8025e90:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8025e92:	f000 faa4 	bl	80263de <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8025e96:	f000 fe33 	bl	8026b00 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8025e9a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8025e9c:	f000 faf1 	bl	8026482 <prvIsQueueEmpty>
 8025ea0:	4603      	mov	r3, r0
 8025ea2:	2b00      	cmp	r3, #0
 8025ea4:	f43f af6f 	beq.w	8025d86 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8025ea8:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8025eaa:	4618      	mov	r0, r3
 8025eac:	3730      	adds	r7, #48	; 0x30
 8025eae:	46bd      	mov	sp, r7
 8025eb0:	bd80      	pop	{r7, pc}
 8025eb2:	bf00      	nop
 8025eb4:	e000ed04 	.word	0xe000ed04

08025eb8 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8025eb8:	b580      	push	{r7, lr}
 8025eba:	b08e      	sub	sp, #56	; 0x38
 8025ebc:	af00      	add	r7, sp, #0
 8025ebe:	6078      	str	r0, [r7, #4]
 8025ec0:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8025ec2:	2300      	movs	r3, #0
 8025ec4:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8025ec6:	687b      	ldr	r3, [r7, #4]
 8025ec8:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8025eca:	2300      	movs	r3, #0
 8025ecc:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8025ece:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8025ed0:	2b00      	cmp	r3, #0
 8025ed2:	d10a      	bne.n	8025eea <xQueueSemaphoreTake+0x32>
	__asm volatile
 8025ed4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8025ed8:	f383 8811 	msr	BASEPRI, r3
 8025edc:	f3bf 8f6f 	isb	sy
 8025ee0:	f3bf 8f4f 	dsb	sy
 8025ee4:	623b      	str	r3, [r7, #32]
}
 8025ee6:	bf00      	nop
 8025ee8:	e7fe      	b.n	8025ee8 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8025eea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8025eec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8025eee:	2b00      	cmp	r3, #0
 8025ef0:	d00a      	beq.n	8025f08 <xQueueSemaphoreTake+0x50>
	__asm volatile
 8025ef2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8025ef6:	f383 8811 	msr	BASEPRI, r3
 8025efa:	f3bf 8f6f 	isb	sy
 8025efe:	f3bf 8f4f 	dsb	sy
 8025f02:	61fb      	str	r3, [r7, #28]
}
 8025f04:	bf00      	nop
 8025f06:	e7fe      	b.n	8025f06 <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8025f08:	f001 f9b6 	bl	8027278 <xTaskGetSchedulerState>
 8025f0c:	4603      	mov	r3, r0
 8025f0e:	2b00      	cmp	r3, #0
 8025f10:	d102      	bne.n	8025f18 <xQueueSemaphoreTake+0x60>
 8025f12:	683b      	ldr	r3, [r7, #0]
 8025f14:	2b00      	cmp	r3, #0
 8025f16:	d101      	bne.n	8025f1c <xQueueSemaphoreTake+0x64>
 8025f18:	2301      	movs	r3, #1
 8025f1a:	e000      	b.n	8025f1e <xQueueSemaphoreTake+0x66>
 8025f1c:	2300      	movs	r3, #0
 8025f1e:	2b00      	cmp	r3, #0
 8025f20:	d10a      	bne.n	8025f38 <xQueueSemaphoreTake+0x80>
	__asm volatile
 8025f22:	f04f 0350 	mov.w	r3, #80	; 0x50
 8025f26:	f383 8811 	msr	BASEPRI, r3
 8025f2a:	f3bf 8f6f 	isb	sy
 8025f2e:	f3bf 8f4f 	dsb	sy
 8025f32:	61bb      	str	r3, [r7, #24]
}
 8025f34:	bf00      	nop
 8025f36:	e7fe      	b.n	8025f36 <xQueueSemaphoreTake+0x7e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8025f38:	f001 fcec 	bl	8027914 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8025f3c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8025f3e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8025f40:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8025f42:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8025f44:	2b00      	cmp	r3, #0
 8025f46:	d024      	beq.n	8025f92 <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8025f48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8025f4a:	1e5a      	subs	r2, r3, #1
 8025f4c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8025f4e:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8025f50:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8025f52:	681b      	ldr	r3, [r3, #0]
 8025f54:	2b00      	cmp	r3, #0
 8025f56:	d104      	bne.n	8025f62 <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8025f58:	f001 fb36 	bl	80275c8 <pvTaskIncrementMutexHeldCount>
 8025f5c:	4602      	mov	r2, r0
 8025f5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8025f60:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8025f62:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8025f64:	691b      	ldr	r3, [r3, #16]
 8025f66:	2b00      	cmp	r3, #0
 8025f68:	d00f      	beq.n	8025f8a <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8025f6a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8025f6c:	3310      	adds	r3, #16
 8025f6e:	4618      	mov	r0, r3
 8025f70:	f000 ffc2 	bl	8026ef8 <xTaskRemoveFromEventList>
 8025f74:	4603      	mov	r3, r0
 8025f76:	2b00      	cmp	r3, #0
 8025f78:	d007      	beq.n	8025f8a <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8025f7a:	4b54      	ldr	r3, [pc, #336]	; (80260cc <xQueueSemaphoreTake+0x214>)
 8025f7c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8025f80:	601a      	str	r2, [r3, #0]
 8025f82:	f3bf 8f4f 	dsb	sy
 8025f86:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8025f8a:	f001 fcf3 	bl	8027974 <vPortExitCritical>
				return pdPASS;
 8025f8e:	2301      	movs	r3, #1
 8025f90:	e097      	b.n	80260c2 <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8025f92:	683b      	ldr	r3, [r7, #0]
 8025f94:	2b00      	cmp	r3, #0
 8025f96:	d111      	bne.n	8025fbc <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8025f98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8025f9a:	2b00      	cmp	r3, #0
 8025f9c:	d00a      	beq.n	8025fb4 <xQueueSemaphoreTake+0xfc>
	__asm volatile
 8025f9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8025fa2:	f383 8811 	msr	BASEPRI, r3
 8025fa6:	f3bf 8f6f 	isb	sy
 8025faa:	f3bf 8f4f 	dsb	sy
 8025fae:	617b      	str	r3, [r7, #20]
}
 8025fb0:	bf00      	nop
 8025fb2:	e7fe      	b.n	8025fb2 <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8025fb4:	f001 fcde 	bl	8027974 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8025fb8:	2300      	movs	r3, #0
 8025fba:	e082      	b.n	80260c2 <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 8025fbc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8025fbe:	2b00      	cmp	r3, #0
 8025fc0:	d106      	bne.n	8025fd0 <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8025fc2:	f107 030c 	add.w	r3, r7, #12
 8025fc6:	4618      	mov	r0, r3
 8025fc8:	f000 fff8 	bl	8026fbc <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8025fcc:	2301      	movs	r3, #1
 8025fce:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8025fd0:	f001 fcd0 	bl	8027974 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8025fd4:	f000 fd86 	bl	8026ae4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8025fd8:	f001 fc9c 	bl	8027914 <vPortEnterCritical>
 8025fdc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8025fde:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8025fe2:	b25b      	sxtb	r3, r3
 8025fe4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8025fe8:	d103      	bne.n	8025ff2 <xQueueSemaphoreTake+0x13a>
 8025fea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8025fec:	2200      	movs	r2, #0
 8025fee:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8025ff2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8025ff4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8025ff8:	b25b      	sxtb	r3, r3
 8025ffa:	f1b3 3fff 	cmp.w	r3, #4294967295
 8025ffe:	d103      	bne.n	8026008 <xQueueSemaphoreTake+0x150>
 8026000:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8026002:	2200      	movs	r2, #0
 8026004:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8026008:	f001 fcb4 	bl	8027974 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 802600c:	463a      	mov	r2, r7
 802600e:	f107 030c 	add.w	r3, r7, #12
 8026012:	4611      	mov	r1, r2
 8026014:	4618      	mov	r0, r3
 8026016:	f000 ffe7 	bl	8026fe8 <xTaskCheckForTimeOut>
 802601a:	4603      	mov	r3, r0
 802601c:	2b00      	cmp	r3, #0
 802601e:	d132      	bne.n	8026086 <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8026020:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8026022:	f000 fa2e 	bl	8026482 <prvIsQueueEmpty>
 8026026:	4603      	mov	r3, r0
 8026028:	2b00      	cmp	r3, #0
 802602a:	d026      	beq.n	802607a <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 802602c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 802602e:	681b      	ldr	r3, [r3, #0]
 8026030:	2b00      	cmp	r3, #0
 8026032:	d109      	bne.n	8026048 <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 8026034:	f001 fc6e 	bl	8027914 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8026038:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 802603a:	689b      	ldr	r3, [r3, #8]
 802603c:	4618      	mov	r0, r3
 802603e:	f001 f939 	bl	80272b4 <xTaskPriorityInherit>
 8026042:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 8026044:	f001 fc96 	bl	8027974 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8026048:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 802604a:	3324      	adds	r3, #36	; 0x24
 802604c:	683a      	ldr	r2, [r7, #0]
 802604e:	4611      	mov	r1, r2
 8026050:	4618      	mov	r0, r3
 8026052:	f000 ff2d 	bl	8026eb0 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8026056:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8026058:	f000 f9c1 	bl	80263de <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 802605c:	f000 fd50 	bl	8026b00 <xTaskResumeAll>
 8026060:	4603      	mov	r3, r0
 8026062:	2b00      	cmp	r3, #0
 8026064:	f47f af68 	bne.w	8025f38 <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 8026068:	4b18      	ldr	r3, [pc, #96]	; (80260cc <xQueueSemaphoreTake+0x214>)
 802606a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 802606e:	601a      	str	r2, [r3, #0]
 8026070:	f3bf 8f4f 	dsb	sy
 8026074:	f3bf 8f6f 	isb	sy
 8026078:	e75e      	b.n	8025f38 <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 802607a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 802607c:	f000 f9af 	bl	80263de <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8026080:	f000 fd3e 	bl	8026b00 <xTaskResumeAll>
 8026084:	e758      	b.n	8025f38 <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8026086:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8026088:	f000 f9a9 	bl	80263de <prvUnlockQueue>
			( void ) xTaskResumeAll();
 802608c:	f000 fd38 	bl	8026b00 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8026090:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8026092:	f000 f9f6 	bl	8026482 <prvIsQueueEmpty>
 8026096:	4603      	mov	r3, r0
 8026098:	2b00      	cmp	r3, #0
 802609a:	f43f af4d 	beq.w	8025f38 <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 802609e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80260a0:	2b00      	cmp	r3, #0
 80260a2:	d00d      	beq.n	80260c0 <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 80260a4:	f001 fc36 	bl	8027914 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 80260a8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80260aa:	f000 f8f0 	bl	802628e <prvGetDisinheritPriorityAfterTimeout>
 80260ae:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 80260b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80260b2:	689b      	ldr	r3, [r3, #8]
 80260b4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80260b6:	4618      	mov	r0, r3
 80260b8:	f001 f9f8 	bl	80274ac <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 80260bc:	f001 fc5a 	bl	8027974 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80260c0:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80260c2:	4618      	mov	r0, r3
 80260c4:	3738      	adds	r7, #56	; 0x38
 80260c6:	46bd      	mov	sp, r7
 80260c8:	bd80      	pop	{r7, pc}
 80260ca:	bf00      	nop
 80260cc:	e000ed04 	.word	0xe000ed04

080260d0 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 80260d0:	b580      	push	{r7, lr}
 80260d2:	b08e      	sub	sp, #56	; 0x38
 80260d4:	af00      	add	r7, sp, #0
 80260d6:	60f8      	str	r0, [r7, #12]
 80260d8:	60b9      	str	r1, [r7, #8]
 80260da:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80260dc:	68fb      	ldr	r3, [r7, #12]
 80260de:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80260e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80260e2:	2b00      	cmp	r3, #0
 80260e4:	d10a      	bne.n	80260fc <xQueueReceiveFromISR+0x2c>
	__asm volatile
 80260e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80260ea:	f383 8811 	msr	BASEPRI, r3
 80260ee:	f3bf 8f6f 	isb	sy
 80260f2:	f3bf 8f4f 	dsb	sy
 80260f6:	623b      	str	r3, [r7, #32]
}
 80260f8:	bf00      	nop
 80260fa:	e7fe      	b.n	80260fa <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80260fc:	68bb      	ldr	r3, [r7, #8]
 80260fe:	2b00      	cmp	r3, #0
 8026100:	d103      	bne.n	802610a <xQueueReceiveFromISR+0x3a>
 8026102:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8026104:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8026106:	2b00      	cmp	r3, #0
 8026108:	d101      	bne.n	802610e <xQueueReceiveFromISR+0x3e>
 802610a:	2301      	movs	r3, #1
 802610c:	e000      	b.n	8026110 <xQueueReceiveFromISR+0x40>
 802610e:	2300      	movs	r3, #0
 8026110:	2b00      	cmp	r3, #0
 8026112:	d10a      	bne.n	802612a <xQueueReceiveFromISR+0x5a>
	__asm volatile
 8026114:	f04f 0350 	mov.w	r3, #80	; 0x50
 8026118:	f383 8811 	msr	BASEPRI, r3
 802611c:	f3bf 8f6f 	isb	sy
 8026120:	f3bf 8f4f 	dsb	sy
 8026124:	61fb      	str	r3, [r7, #28]
}
 8026126:	bf00      	nop
 8026128:	e7fe      	b.n	8026128 <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 802612a:	f001 fcd5 	bl	8027ad8 <vPortValidateInterruptPriority>
	__asm volatile
 802612e:	f3ef 8211 	mrs	r2, BASEPRI
 8026132:	f04f 0350 	mov.w	r3, #80	; 0x50
 8026136:	f383 8811 	msr	BASEPRI, r3
 802613a:	f3bf 8f6f 	isb	sy
 802613e:	f3bf 8f4f 	dsb	sy
 8026142:	61ba      	str	r2, [r7, #24]
 8026144:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8026146:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8026148:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 802614a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 802614c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 802614e:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8026150:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8026152:	2b00      	cmp	r3, #0
 8026154:	d02f      	beq.n	80261b6 <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8026156:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8026158:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 802615c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8026160:	68b9      	ldr	r1, [r7, #8]
 8026162:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8026164:	f000 f915 	bl	8026392 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8026168:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802616a:	1e5a      	subs	r2, r3, #1
 802616c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 802616e:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8026170:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8026174:	f1b3 3fff 	cmp.w	r3, #4294967295
 8026178:	d112      	bne.n	80261a0 <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 802617a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 802617c:	691b      	ldr	r3, [r3, #16]
 802617e:	2b00      	cmp	r3, #0
 8026180:	d016      	beq.n	80261b0 <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8026182:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8026184:	3310      	adds	r3, #16
 8026186:	4618      	mov	r0, r3
 8026188:	f000 feb6 	bl	8026ef8 <xTaskRemoveFromEventList>
 802618c:	4603      	mov	r3, r0
 802618e:	2b00      	cmp	r3, #0
 8026190:	d00e      	beq.n	80261b0 <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8026192:	687b      	ldr	r3, [r7, #4]
 8026194:	2b00      	cmp	r3, #0
 8026196:	d00b      	beq.n	80261b0 <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8026198:	687b      	ldr	r3, [r7, #4]
 802619a:	2201      	movs	r2, #1
 802619c:	601a      	str	r2, [r3, #0]
 802619e:	e007      	b.n	80261b0 <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 80261a0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80261a4:	3301      	adds	r3, #1
 80261a6:	b2db      	uxtb	r3, r3
 80261a8:	b25a      	sxtb	r2, r3
 80261aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80261ac:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 80261b0:	2301      	movs	r3, #1
 80261b2:	637b      	str	r3, [r7, #52]	; 0x34
 80261b4:	e001      	b.n	80261ba <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 80261b6:	2300      	movs	r3, #0
 80261b8:	637b      	str	r3, [r7, #52]	; 0x34
 80261ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80261bc:	613b      	str	r3, [r7, #16]
	__asm volatile
 80261be:	693b      	ldr	r3, [r7, #16]
 80261c0:	f383 8811 	msr	BASEPRI, r3
}
 80261c4:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80261c6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 80261c8:	4618      	mov	r0, r3
 80261ca:	3738      	adds	r7, #56	; 0x38
 80261cc:	46bd      	mov	sp, r7
 80261ce:	bd80      	pop	{r7, pc}

080261d0 <uxQueueMessagesWaiting>:
	return xReturn;
}
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaiting( const QueueHandle_t xQueue )
{
 80261d0:	b580      	push	{r7, lr}
 80261d2:	b084      	sub	sp, #16
 80261d4:	af00      	add	r7, sp, #0
 80261d6:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;

	configASSERT( xQueue );
 80261d8:	687b      	ldr	r3, [r7, #4]
 80261da:	2b00      	cmp	r3, #0
 80261dc:	d10a      	bne.n	80261f4 <uxQueueMessagesWaiting+0x24>
	__asm volatile
 80261de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80261e2:	f383 8811 	msr	BASEPRI, r3
 80261e6:	f3bf 8f6f 	isb	sy
 80261ea:	f3bf 8f4f 	dsb	sy
 80261ee:	60bb      	str	r3, [r7, #8]
}
 80261f0:	bf00      	nop
 80261f2:	e7fe      	b.n	80261f2 <uxQueueMessagesWaiting+0x22>

	taskENTER_CRITICAL();
 80261f4:	f001 fb8e 	bl	8027914 <vPortEnterCritical>
	{
		uxReturn = ( ( Queue_t * ) xQueue )->uxMessagesWaiting;
 80261f8:	687b      	ldr	r3, [r7, #4]
 80261fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80261fc:	60fb      	str	r3, [r7, #12]
	}
	taskEXIT_CRITICAL();
 80261fe:	f001 fbb9 	bl	8027974 <vPortExitCritical>

	return uxReturn;
 8026202:	68fb      	ldr	r3, [r7, #12]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 8026204:	4618      	mov	r0, r3
 8026206:	3710      	adds	r7, #16
 8026208:	46bd      	mov	sp, r7
 802620a:	bd80      	pop	{r7, pc}

0802620c <uxQueueMessagesWaitingFromISR>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaitingFromISR( const QueueHandle_t xQueue )
{
 802620c:	b480      	push	{r7}
 802620e:	b087      	sub	sp, #28
 8026210:	af00      	add	r7, sp, #0
 8026212:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;
Queue_t * const pxQueue = xQueue;
 8026214:	687b      	ldr	r3, [r7, #4]
 8026216:	617b      	str	r3, [r7, #20]

	configASSERT( pxQueue );
 8026218:	697b      	ldr	r3, [r7, #20]
 802621a:	2b00      	cmp	r3, #0
 802621c:	d10a      	bne.n	8026234 <uxQueueMessagesWaitingFromISR+0x28>
	__asm volatile
 802621e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8026222:	f383 8811 	msr	BASEPRI, r3
 8026226:	f3bf 8f6f 	isb	sy
 802622a:	f3bf 8f4f 	dsb	sy
 802622e:	60fb      	str	r3, [r7, #12]
}
 8026230:	bf00      	nop
 8026232:	e7fe      	b.n	8026232 <uxQueueMessagesWaitingFromISR+0x26>
	uxReturn = pxQueue->uxMessagesWaiting;
 8026234:	697b      	ldr	r3, [r7, #20]
 8026236:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8026238:	613b      	str	r3, [r7, #16]

	return uxReturn;
 802623a:	693b      	ldr	r3, [r7, #16]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 802623c:	4618      	mov	r0, r3
 802623e:	371c      	adds	r7, #28
 8026240:	46bd      	mov	sp, r7
 8026242:	f85d 7b04 	ldr.w	r7, [sp], #4
 8026246:	4770      	bx	lr

08026248 <vQueueDelete>:
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 8026248:	b580      	push	{r7, lr}
 802624a:	b084      	sub	sp, #16
 802624c:	af00      	add	r7, sp, #0
 802624e:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 8026250:	687b      	ldr	r3, [r7, #4]
 8026252:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8026254:	68fb      	ldr	r3, [r7, #12]
 8026256:	2b00      	cmp	r3, #0
 8026258:	d10a      	bne.n	8026270 <vQueueDelete+0x28>
	__asm volatile
 802625a:	f04f 0350 	mov.w	r3, #80	; 0x50
 802625e:	f383 8811 	msr	BASEPRI, r3
 8026262:	f3bf 8f6f 	isb	sy
 8026266:	f3bf 8f4f 	dsb	sy
 802626a:	60bb      	str	r3, [r7, #8]
}
 802626c:	bf00      	nop
 802626e:	e7fe      	b.n	802626e <vQueueDelete+0x26>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 8026270:	68f8      	ldr	r0, [r7, #12]
 8026272:	f000 f935 	bl	80264e0 <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8026276:	68fb      	ldr	r3, [r7, #12]
 8026278:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 802627c:	2b00      	cmp	r3, #0
 802627e:	d102      	bne.n	8026286 <vQueueDelete+0x3e>
		{
			vPortFree( pxQueue );
 8026280:	68f8      	ldr	r0, [r7, #12]
 8026282:	f001 fd35 	bl	8027cf0 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 8026286:	bf00      	nop
 8026288:	3710      	adds	r7, #16
 802628a:	46bd      	mov	sp, r7
 802628c:	bd80      	pop	{r7, pc}

0802628e <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 802628e:	b480      	push	{r7}
 8026290:	b085      	sub	sp, #20
 8026292:	af00      	add	r7, sp, #0
 8026294:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8026296:	687b      	ldr	r3, [r7, #4]
 8026298:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 802629a:	2b00      	cmp	r3, #0
 802629c:	d006      	beq.n	80262ac <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 802629e:	687b      	ldr	r3, [r7, #4]
 80262a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80262a2:	681b      	ldr	r3, [r3, #0]
 80262a4:	f1c3 0310 	rsb	r3, r3, #16
 80262a8:	60fb      	str	r3, [r7, #12]
 80262aa:	e001      	b.n	80262b0 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 80262ac:	2300      	movs	r3, #0
 80262ae:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 80262b0:	68fb      	ldr	r3, [r7, #12]
	}
 80262b2:	4618      	mov	r0, r3
 80262b4:	3714      	adds	r7, #20
 80262b6:	46bd      	mov	sp, r7
 80262b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80262bc:	4770      	bx	lr

080262be <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80262be:	b580      	push	{r7, lr}
 80262c0:	b086      	sub	sp, #24
 80262c2:	af00      	add	r7, sp, #0
 80262c4:	60f8      	str	r0, [r7, #12]
 80262c6:	60b9      	str	r1, [r7, #8]
 80262c8:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80262ca:	2300      	movs	r3, #0
 80262cc:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80262ce:	68fb      	ldr	r3, [r7, #12]
 80262d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80262d2:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80262d4:	68fb      	ldr	r3, [r7, #12]
 80262d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80262d8:	2b00      	cmp	r3, #0
 80262da:	d10d      	bne.n	80262f8 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80262dc:	68fb      	ldr	r3, [r7, #12]
 80262de:	681b      	ldr	r3, [r3, #0]
 80262e0:	2b00      	cmp	r3, #0
 80262e2:	d14d      	bne.n	8026380 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80262e4:	68fb      	ldr	r3, [r7, #12]
 80262e6:	689b      	ldr	r3, [r3, #8]
 80262e8:	4618      	mov	r0, r3
 80262ea:	f001 f859 	bl	80273a0 <xTaskPriorityDisinherit>
 80262ee:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80262f0:	68fb      	ldr	r3, [r7, #12]
 80262f2:	2200      	movs	r2, #0
 80262f4:	609a      	str	r2, [r3, #8]
 80262f6:	e043      	b.n	8026380 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80262f8:	687b      	ldr	r3, [r7, #4]
 80262fa:	2b00      	cmp	r3, #0
 80262fc:	d119      	bne.n	8026332 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80262fe:	68fb      	ldr	r3, [r7, #12]
 8026300:	6858      	ldr	r0, [r3, #4]
 8026302:	68fb      	ldr	r3, [r7, #12]
 8026304:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8026306:	461a      	mov	r2, r3
 8026308:	68b9      	ldr	r1, [r7, #8]
 802630a:	f00f fe35 	bl	8035f78 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 802630e:	68fb      	ldr	r3, [r7, #12]
 8026310:	685a      	ldr	r2, [r3, #4]
 8026312:	68fb      	ldr	r3, [r7, #12]
 8026314:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8026316:	441a      	add	r2, r3
 8026318:	68fb      	ldr	r3, [r7, #12]
 802631a:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 802631c:	68fb      	ldr	r3, [r7, #12]
 802631e:	685a      	ldr	r2, [r3, #4]
 8026320:	68fb      	ldr	r3, [r7, #12]
 8026322:	689b      	ldr	r3, [r3, #8]
 8026324:	429a      	cmp	r2, r3
 8026326:	d32b      	bcc.n	8026380 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8026328:	68fb      	ldr	r3, [r7, #12]
 802632a:	681a      	ldr	r2, [r3, #0]
 802632c:	68fb      	ldr	r3, [r7, #12]
 802632e:	605a      	str	r2, [r3, #4]
 8026330:	e026      	b.n	8026380 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8026332:	68fb      	ldr	r3, [r7, #12]
 8026334:	68d8      	ldr	r0, [r3, #12]
 8026336:	68fb      	ldr	r3, [r7, #12]
 8026338:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 802633a:	461a      	mov	r2, r3
 802633c:	68b9      	ldr	r1, [r7, #8]
 802633e:	f00f fe1b 	bl	8035f78 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8026342:	68fb      	ldr	r3, [r7, #12]
 8026344:	68da      	ldr	r2, [r3, #12]
 8026346:	68fb      	ldr	r3, [r7, #12]
 8026348:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 802634a:	425b      	negs	r3, r3
 802634c:	441a      	add	r2, r3
 802634e:	68fb      	ldr	r3, [r7, #12]
 8026350:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8026352:	68fb      	ldr	r3, [r7, #12]
 8026354:	68da      	ldr	r2, [r3, #12]
 8026356:	68fb      	ldr	r3, [r7, #12]
 8026358:	681b      	ldr	r3, [r3, #0]
 802635a:	429a      	cmp	r2, r3
 802635c:	d207      	bcs.n	802636e <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 802635e:	68fb      	ldr	r3, [r7, #12]
 8026360:	689a      	ldr	r2, [r3, #8]
 8026362:	68fb      	ldr	r3, [r7, #12]
 8026364:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8026366:	425b      	negs	r3, r3
 8026368:	441a      	add	r2, r3
 802636a:	68fb      	ldr	r3, [r7, #12]
 802636c:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 802636e:	687b      	ldr	r3, [r7, #4]
 8026370:	2b02      	cmp	r3, #2
 8026372:	d105      	bne.n	8026380 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8026374:	693b      	ldr	r3, [r7, #16]
 8026376:	2b00      	cmp	r3, #0
 8026378:	d002      	beq.n	8026380 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 802637a:	693b      	ldr	r3, [r7, #16]
 802637c:	3b01      	subs	r3, #1
 802637e:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8026380:	693b      	ldr	r3, [r7, #16]
 8026382:	1c5a      	adds	r2, r3, #1
 8026384:	68fb      	ldr	r3, [r7, #12]
 8026386:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8026388:	697b      	ldr	r3, [r7, #20]
}
 802638a:	4618      	mov	r0, r3
 802638c:	3718      	adds	r7, #24
 802638e:	46bd      	mov	sp, r7
 8026390:	bd80      	pop	{r7, pc}

08026392 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8026392:	b580      	push	{r7, lr}
 8026394:	b082      	sub	sp, #8
 8026396:	af00      	add	r7, sp, #0
 8026398:	6078      	str	r0, [r7, #4]
 802639a:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 802639c:	687b      	ldr	r3, [r7, #4]
 802639e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80263a0:	2b00      	cmp	r3, #0
 80263a2:	d018      	beq.n	80263d6 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80263a4:	687b      	ldr	r3, [r7, #4]
 80263a6:	68da      	ldr	r2, [r3, #12]
 80263a8:	687b      	ldr	r3, [r7, #4]
 80263aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80263ac:	441a      	add	r2, r3
 80263ae:	687b      	ldr	r3, [r7, #4]
 80263b0:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80263b2:	687b      	ldr	r3, [r7, #4]
 80263b4:	68da      	ldr	r2, [r3, #12]
 80263b6:	687b      	ldr	r3, [r7, #4]
 80263b8:	689b      	ldr	r3, [r3, #8]
 80263ba:	429a      	cmp	r2, r3
 80263bc:	d303      	bcc.n	80263c6 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80263be:	687b      	ldr	r3, [r7, #4]
 80263c0:	681a      	ldr	r2, [r3, #0]
 80263c2:	687b      	ldr	r3, [r7, #4]
 80263c4:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80263c6:	687b      	ldr	r3, [r7, #4]
 80263c8:	68d9      	ldr	r1, [r3, #12]
 80263ca:	687b      	ldr	r3, [r7, #4]
 80263cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80263ce:	461a      	mov	r2, r3
 80263d0:	6838      	ldr	r0, [r7, #0]
 80263d2:	f00f fdd1 	bl	8035f78 <memcpy>
	}
}
 80263d6:	bf00      	nop
 80263d8:	3708      	adds	r7, #8
 80263da:	46bd      	mov	sp, r7
 80263dc:	bd80      	pop	{r7, pc}

080263de <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80263de:	b580      	push	{r7, lr}
 80263e0:	b084      	sub	sp, #16
 80263e2:	af00      	add	r7, sp, #0
 80263e4:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80263e6:	f001 fa95 	bl	8027914 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80263ea:	687b      	ldr	r3, [r7, #4]
 80263ec:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80263f0:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80263f2:	e011      	b.n	8026418 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80263f4:	687b      	ldr	r3, [r7, #4]
 80263f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80263f8:	2b00      	cmp	r3, #0
 80263fa:	d012      	beq.n	8026422 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80263fc:	687b      	ldr	r3, [r7, #4]
 80263fe:	3324      	adds	r3, #36	; 0x24
 8026400:	4618      	mov	r0, r3
 8026402:	f000 fd79 	bl	8026ef8 <xTaskRemoveFromEventList>
 8026406:	4603      	mov	r3, r0
 8026408:	2b00      	cmp	r3, #0
 802640a:	d001      	beq.n	8026410 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 802640c:	f000 fe4e 	bl	80270ac <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8026410:	7bfb      	ldrb	r3, [r7, #15]
 8026412:	3b01      	subs	r3, #1
 8026414:	b2db      	uxtb	r3, r3
 8026416:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8026418:	f997 300f 	ldrsb.w	r3, [r7, #15]
 802641c:	2b00      	cmp	r3, #0
 802641e:	dce9      	bgt.n	80263f4 <prvUnlockQueue+0x16>
 8026420:	e000      	b.n	8026424 <prvUnlockQueue+0x46>
					break;
 8026422:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8026424:	687b      	ldr	r3, [r7, #4]
 8026426:	22ff      	movs	r2, #255	; 0xff
 8026428:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 802642c:	f001 faa2 	bl	8027974 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8026430:	f001 fa70 	bl	8027914 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8026434:	687b      	ldr	r3, [r7, #4]
 8026436:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 802643a:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 802643c:	e011      	b.n	8026462 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 802643e:	687b      	ldr	r3, [r7, #4]
 8026440:	691b      	ldr	r3, [r3, #16]
 8026442:	2b00      	cmp	r3, #0
 8026444:	d012      	beq.n	802646c <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8026446:	687b      	ldr	r3, [r7, #4]
 8026448:	3310      	adds	r3, #16
 802644a:	4618      	mov	r0, r3
 802644c:	f000 fd54 	bl	8026ef8 <xTaskRemoveFromEventList>
 8026450:	4603      	mov	r3, r0
 8026452:	2b00      	cmp	r3, #0
 8026454:	d001      	beq.n	802645a <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8026456:	f000 fe29 	bl	80270ac <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 802645a:	7bbb      	ldrb	r3, [r7, #14]
 802645c:	3b01      	subs	r3, #1
 802645e:	b2db      	uxtb	r3, r3
 8026460:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8026462:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8026466:	2b00      	cmp	r3, #0
 8026468:	dce9      	bgt.n	802643e <prvUnlockQueue+0x60>
 802646a:	e000      	b.n	802646e <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 802646c:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 802646e:	687b      	ldr	r3, [r7, #4]
 8026470:	22ff      	movs	r2, #255	; 0xff
 8026472:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8026476:	f001 fa7d 	bl	8027974 <vPortExitCritical>
}
 802647a:	bf00      	nop
 802647c:	3710      	adds	r7, #16
 802647e:	46bd      	mov	sp, r7
 8026480:	bd80      	pop	{r7, pc}

08026482 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8026482:	b580      	push	{r7, lr}
 8026484:	b084      	sub	sp, #16
 8026486:	af00      	add	r7, sp, #0
 8026488:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 802648a:	f001 fa43 	bl	8027914 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 802648e:	687b      	ldr	r3, [r7, #4]
 8026490:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8026492:	2b00      	cmp	r3, #0
 8026494:	d102      	bne.n	802649c <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8026496:	2301      	movs	r3, #1
 8026498:	60fb      	str	r3, [r7, #12]
 802649a:	e001      	b.n	80264a0 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 802649c:	2300      	movs	r3, #0
 802649e:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80264a0:	f001 fa68 	bl	8027974 <vPortExitCritical>

	return xReturn;
 80264a4:	68fb      	ldr	r3, [r7, #12]
}
 80264a6:	4618      	mov	r0, r3
 80264a8:	3710      	adds	r7, #16
 80264aa:	46bd      	mov	sp, r7
 80264ac:	bd80      	pop	{r7, pc}

080264ae <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80264ae:	b580      	push	{r7, lr}
 80264b0:	b084      	sub	sp, #16
 80264b2:	af00      	add	r7, sp, #0
 80264b4:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80264b6:	f001 fa2d 	bl	8027914 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80264ba:	687b      	ldr	r3, [r7, #4]
 80264bc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80264be:	687b      	ldr	r3, [r7, #4]
 80264c0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80264c2:	429a      	cmp	r2, r3
 80264c4:	d102      	bne.n	80264cc <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80264c6:	2301      	movs	r3, #1
 80264c8:	60fb      	str	r3, [r7, #12]
 80264ca:	e001      	b.n	80264d0 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80264cc:	2300      	movs	r3, #0
 80264ce:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80264d0:	f001 fa50 	bl	8027974 <vPortExitCritical>

	return xReturn;
 80264d4:	68fb      	ldr	r3, [r7, #12]
}
 80264d6:	4618      	mov	r0, r3
 80264d8:	3710      	adds	r7, #16
 80264da:	46bd      	mov	sp, r7
 80264dc:	bd80      	pop	{r7, pc}
	...

080264e0 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 80264e0:	b480      	push	{r7}
 80264e2:	b085      	sub	sp, #20
 80264e4:	af00      	add	r7, sp, #0
 80264e6:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80264e8:	2300      	movs	r3, #0
 80264ea:	60fb      	str	r3, [r7, #12]
 80264ec:	e016      	b.n	802651c <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 80264ee:	4a10      	ldr	r2, [pc, #64]	; (8026530 <vQueueUnregisterQueue+0x50>)
 80264f0:	68fb      	ldr	r3, [r7, #12]
 80264f2:	00db      	lsls	r3, r3, #3
 80264f4:	4413      	add	r3, r2
 80264f6:	685b      	ldr	r3, [r3, #4]
 80264f8:	687a      	ldr	r2, [r7, #4]
 80264fa:	429a      	cmp	r2, r3
 80264fc:	d10b      	bne.n	8026516 <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 80264fe:	4a0c      	ldr	r2, [pc, #48]	; (8026530 <vQueueUnregisterQueue+0x50>)
 8026500:	68fb      	ldr	r3, [r7, #12]
 8026502:	2100      	movs	r1, #0
 8026504:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 8026508:	4a09      	ldr	r2, [pc, #36]	; (8026530 <vQueueUnregisterQueue+0x50>)
 802650a:	68fb      	ldr	r3, [r7, #12]
 802650c:	00db      	lsls	r3, r3, #3
 802650e:	4413      	add	r3, r2
 8026510:	2200      	movs	r2, #0
 8026512:	605a      	str	r2, [r3, #4]
				break;
 8026514:	e006      	b.n	8026524 <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8026516:	68fb      	ldr	r3, [r7, #12]
 8026518:	3301      	adds	r3, #1
 802651a:	60fb      	str	r3, [r7, #12]
 802651c:	68fb      	ldr	r3, [r7, #12]
 802651e:	2b07      	cmp	r3, #7
 8026520:	d9e5      	bls.n	80264ee <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 8026522:	bf00      	nop
 8026524:	bf00      	nop
 8026526:	3714      	adds	r7, #20
 8026528:	46bd      	mov	sp, r7
 802652a:	f85d 7b04 	ldr.w	r7, [sp], #4
 802652e:	4770      	bx	lr
 8026530:	20005034 	.word	0x20005034

08026534 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8026534:	b580      	push	{r7, lr}
 8026536:	b08e      	sub	sp, #56	; 0x38
 8026538:	af04      	add	r7, sp, #16
 802653a:	60f8      	str	r0, [r7, #12]
 802653c:	60b9      	str	r1, [r7, #8]
 802653e:	607a      	str	r2, [r7, #4]
 8026540:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8026542:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8026544:	2b00      	cmp	r3, #0
 8026546:	d10a      	bne.n	802655e <xTaskCreateStatic+0x2a>
	__asm volatile
 8026548:	f04f 0350 	mov.w	r3, #80	; 0x50
 802654c:	f383 8811 	msr	BASEPRI, r3
 8026550:	f3bf 8f6f 	isb	sy
 8026554:	f3bf 8f4f 	dsb	sy
 8026558:	623b      	str	r3, [r7, #32]
}
 802655a:	bf00      	nop
 802655c:	e7fe      	b.n	802655c <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 802655e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8026560:	2b00      	cmp	r3, #0
 8026562:	d10a      	bne.n	802657a <xTaskCreateStatic+0x46>
	__asm volatile
 8026564:	f04f 0350 	mov.w	r3, #80	; 0x50
 8026568:	f383 8811 	msr	BASEPRI, r3
 802656c:	f3bf 8f6f 	isb	sy
 8026570:	f3bf 8f4f 	dsb	sy
 8026574:	61fb      	str	r3, [r7, #28]
}
 8026576:	bf00      	nop
 8026578:	e7fe      	b.n	8026578 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 802657a:	23b4      	movs	r3, #180	; 0xb4
 802657c:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 802657e:	693b      	ldr	r3, [r7, #16]
 8026580:	2bb4      	cmp	r3, #180	; 0xb4
 8026582:	d00a      	beq.n	802659a <xTaskCreateStatic+0x66>
	__asm volatile
 8026584:	f04f 0350 	mov.w	r3, #80	; 0x50
 8026588:	f383 8811 	msr	BASEPRI, r3
 802658c:	f3bf 8f6f 	isb	sy
 8026590:	f3bf 8f4f 	dsb	sy
 8026594:	61bb      	str	r3, [r7, #24]
}
 8026596:	bf00      	nop
 8026598:	e7fe      	b.n	8026598 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 802659a:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 802659c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 802659e:	2b00      	cmp	r3, #0
 80265a0:	d01e      	beq.n	80265e0 <xTaskCreateStatic+0xac>
 80265a2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80265a4:	2b00      	cmp	r3, #0
 80265a6:	d01b      	beq.n	80265e0 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80265a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80265aa:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80265ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80265ae:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80265b0:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80265b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80265b4:	2202      	movs	r2, #2
 80265b6:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80265ba:	2300      	movs	r3, #0
 80265bc:	9303      	str	r3, [sp, #12]
 80265be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80265c0:	9302      	str	r3, [sp, #8]
 80265c2:	f107 0314 	add.w	r3, r7, #20
 80265c6:	9301      	str	r3, [sp, #4]
 80265c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80265ca:	9300      	str	r3, [sp, #0]
 80265cc:	683b      	ldr	r3, [r7, #0]
 80265ce:	687a      	ldr	r2, [r7, #4]
 80265d0:	68b9      	ldr	r1, [r7, #8]
 80265d2:	68f8      	ldr	r0, [r7, #12]
 80265d4:	f000 f850 	bl	8026678 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80265d8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80265da:	f000 f8eb 	bl	80267b4 <prvAddNewTaskToReadyList>
 80265de:	e001      	b.n	80265e4 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 80265e0:	2300      	movs	r3, #0
 80265e2:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80265e4:	697b      	ldr	r3, [r7, #20]
	}
 80265e6:	4618      	mov	r0, r3
 80265e8:	3728      	adds	r7, #40	; 0x28
 80265ea:	46bd      	mov	sp, r7
 80265ec:	bd80      	pop	{r7, pc}

080265ee <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80265ee:	b580      	push	{r7, lr}
 80265f0:	b08c      	sub	sp, #48	; 0x30
 80265f2:	af04      	add	r7, sp, #16
 80265f4:	60f8      	str	r0, [r7, #12]
 80265f6:	60b9      	str	r1, [r7, #8]
 80265f8:	603b      	str	r3, [r7, #0]
 80265fa:	4613      	mov	r3, r2
 80265fc:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80265fe:	88fb      	ldrh	r3, [r7, #6]
 8026600:	009b      	lsls	r3, r3, #2
 8026602:	4618      	mov	r0, r3
 8026604:	f001 faa8 	bl	8027b58 <pvPortMalloc>
 8026608:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 802660a:	697b      	ldr	r3, [r7, #20]
 802660c:	2b00      	cmp	r3, #0
 802660e:	d00e      	beq.n	802662e <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8026610:	20b4      	movs	r0, #180	; 0xb4
 8026612:	f001 faa1 	bl	8027b58 <pvPortMalloc>
 8026616:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8026618:	69fb      	ldr	r3, [r7, #28]
 802661a:	2b00      	cmp	r3, #0
 802661c:	d003      	beq.n	8026626 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 802661e:	69fb      	ldr	r3, [r7, #28]
 8026620:	697a      	ldr	r2, [r7, #20]
 8026622:	631a      	str	r2, [r3, #48]	; 0x30
 8026624:	e005      	b.n	8026632 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8026626:	6978      	ldr	r0, [r7, #20]
 8026628:	f001 fb62 	bl	8027cf0 <vPortFree>
 802662c:	e001      	b.n	8026632 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 802662e:	2300      	movs	r3, #0
 8026630:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8026632:	69fb      	ldr	r3, [r7, #28]
 8026634:	2b00      	cmp	r3, #0
 8026636:	d017      	beq.n	8026668 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8026638:	69fb      	ldr	r3, [r7, #28]
 802663a:	2200      	movs	r2, #0
 802663c:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8026640:	88fa      	ldrh	r2, [r7, #6]
 8026642:	2300      	movs	r3, #0
 8026644:	9303      	str	r3, [sp, #12]
 8026646:	69fb      	ldr	r3, [r7, #28]
 8026648:	9302      	str	r3, [sp, #8]
 802664a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 802664c:	9301      	str	r3, [sp, #4]
 802664e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8026650:	9300      	str	r3, [sp, #0]
 8026652:	683b      	ldr	r3, [r7, #0]
 8026654:	68b9      	ldr	r1, [r7, #8]
 8026656:	68f8      	ldr	r0, [r7, #12]
 8026658:	f000 f80e 	bl	8026678 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 802665c:	69f8      	ldr	r0, [r7, #28]
 802665e:	f000 f8a9 	bl	80267b4 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8026662:	2301      	movs	r3, #1
 8026664:	61bb      	str	r3, [r7, #24]
 8026666:	e002      	b.n	802666e <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8026668:	f04f 33ff 	mov.w	r3, #4294967295
 802666c:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 802666e:	69bb      	ldr	r3, [r7, #24]
	}
 8026670:	4618      	mov	r0, r3
 8026672:	3720      	adds	r7, #32
 8026674:	46bd      	mov	sp, r7
 8026676:	bd80      	pop	{r7, pc}

08026678 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8026678:	b580      	push	{r7, lr}
 802667a:	b088      	sub	sp, #32
 802667c:	af00      	add	r7, sp, #0
 802667e:	60f8      	str	r0, [r7, #12]
 8026680:	60b9      	str	r1, [r7, #8]
 8026682:	607a      	str	r2, [r7, #4]
 8026684:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8026686:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8026688:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 802668a:	687b      	ldr	r3, [r7, #4]
 802668c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8026690:	3b01      	subs	r3, #1
 8026692:	009b      	lsls	r3, r3, #2
 8026694:	4413      	add	r3, r2
 8026696:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8026698:	69bb      	ldr	r3, [r7, #24]
 802669a:	f023 0307 	bic.w	r3, r3, #7
 802669e:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80266a0:	69bb      	ldr	r3, [r7, #24]
 80266a2:	f003 0307 	and.w	r3, r3, #7
 80266a6:	2b00      	cmp	r3, #0
 80266a8:	d00a      	beq.n	80266c0 <prvInitialiseNewTask+0x48>
	__asm volatile
 80266aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80266ae:	f383 8811 	msr	BASEPRI, r3
 80266b2:	f3bf 8f6f 	isb	sy
 80266b6:	f3bf 8f4f 	dsb	sy
 80266ba:	617b      	str	r3, [r7, #20]
}
 80266bc:	bf00      	nop
 80266be:	e7fe      	b.n	80266be <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80266c0:	68bb      	ldr	r3, [r7, #8]
 80266c2:	2b00      	cmp	r3, #0
 80266c4:	d01f      	beq.n	8026706 <prvInitialiseNewTask+0x8e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80266c6:	2300      	movs	r3, #0
 80266c8:	61fb      	str	r3, [r7, #28]
 80266ca:	e012      	b.n	80266f2 <prvInitialiseNewTask+0x7a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80266cc:	68ba      	ldr	r2, [r7, #8]
 80266ce:	69fb      	ldr	r3, [r7, #28]
 80266d0:	4413      	add	r3, r2
 80266d2:	7819      	ldrb	r1, [r3, #0]
 80266d4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80266d6:	69fb      	ldr	r3, [r7, #28]
 80266d8:	4413      	add	r3, r2
 80266da:	3334      	adds	r3, #52	; 0x34
 80266dc:	460a      	mov	r2, r1
 80266de:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80266e0:	68ba      	ldr	r2, [r7, #8]
 80266e2:	69fb      	ldr	r3, [r7, #28]
 80266e4:	4413      	add	r3, r2
 80266e6:	781b      	ldrb	r3, [r3, #0]
 80266e8:	2b00      	cmp	r3, #0
 80266ea:	d006      	beq.n	80266fa <prvInitialiseNewTask+0x82>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80266ec:	69fb      	ldr	r3, [r7, #28]
 80266ee:	3301      	adds	r3, #1
 80266f0:	61fb      	str	r3, [r7, #28]
 80266f2:	69fb      	ldr	r3, [r7, #28]
 80266f4:	2b0f      	cmp	r3, #15
 80266f6:	d9e9      	bls.n	80266cc <prvInitialiseNewTask+0x54>
 80266f8:	e000      	b.n	80266fc <prvInitialiseNewTask+0x84>
			{
				break;
 80266fa:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80266fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80266fe:	2200      	movs	r2, #0
 8026700:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8026704:	e003      	b.n	802670e <prvInitialiseNewTask+0x96>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8026706:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8026708:	2200      	movs	r2, #0
 802670a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 802670e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8026710:	2b0f      	cmp	r3, #15
 8026712:	d901      	bls.n	8026718 <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8026714:	230f      	movs	r3, #15
 8026716:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8026718:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 802671a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 802671c:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 802671e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8026720:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8026722:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8026724:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8026726:	2200      	movs	r2, #0
 8026728:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 802672a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 802672c:	3304      	adds	r3, #4
 802672e:	4618      	mov	r0, r3
 8026730:	f7fe fea1 	bl	8025476 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8026734:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8026736:	3318      	adds	r3, #24
 8026738:	4618      	mov	r0, r3
 802673a:	f7fe fe9c 	bl	8025476 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 802673e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8026740:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8026742:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8026744:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8026746:	f1c3 0210 	rsb	r2, r3, #16
 802674a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 802674c:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 802674e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8026750:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8026752:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8026754:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8026756:	2200      	movs	r2, #0
 8026758:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 802675c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 802675e:	2200      	movs	r2, #0
 8026760:	f883 20b0 	strb.w	r2, [r3, #176]	; 0xb0
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8026764:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8026766:	334c      	adds	r3, #76	; 0x4c
 8026768:	2260      	movs	r2, #96	; 0x60
 802676a:	2100      	movs	r1, #0
 802676c:	4618      	mov	r0, r3
 802676e:	f00f fc2b 	bl	8035fc8 <memset>
 8026772:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8026774:	4a0c      	ldr	r2, [pc, #48]	; (80267a8 <prvInitialiseNewTask+0x130>)
 8026776:	651a      	str	r2, [r3, #80]	; 0x50
 8026778:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 802677a:	4a0c      	ldr	r2, [pc, #48]	; (80267ac <prvInitialiseNewTask+0x134>)
 802677c:	655a      	str	r2, [r3, #84]	; 0x54
 802677e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8026780:	4a0b      	ldr	r2, [pc, #44]	; (80267b0 <prvInitialiseNewTask+0x138>)
 8026782:	659a      	str	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8026784:	683a      	ldr	r2, [r7, #0]
 8026786:	68f9      	ldr	r1, [r7, #12]
 8026788:	69b8      	ldr	r0, [r7, #24]
 802678a:	f000 ff97 	bl	80276bc <pxPortInitialiseStack>
 802678e:	4602      	mov	r2, r0
 8026790:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8026792:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8026794:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8026796:	2b00      	cmp	r3, #0
 8026798:	d002      	beq.n	80267a0 <prvInitialiseNewTask+0x128>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 802679a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 802679c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 802679e:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80267a0:	bf00      	nop
 80267a2:	3720      	adds	r7, #32
 80267a4:	46bd      	mov	sp, r7
 80267a6:	bd80      	pop	{r7, pc}
 80267a8:	0803ac00 	.word	0x0803ac00
 80267ac:	0803ac20 	.word	0x0803ac20
 80267b0:	0803abe0 	.word	0x0803abe0

080267b4 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80267b4:	b580      	push	{r7, lr}
 80267b6:	b082      	sub	sp, #8
 80267b8:	af00      	add	r7, sp, #0
 80267ba:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80267bc:	f001 f8aa 	bl	8027914 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80267c0:	4b2a      	ldr	r3, [pc, #168]	; (802686c <prvAddNewTaskToReadyList+0xb8>)
 80267c2:	681b      	ldr	r3, [r3, #0]
 80267c4:	3301      	adds	r3, #1
 80267c6:	4a29      	ldr	r2, [pc, #164]	; (802686c <prvAddNewTaskToReadyList+0xb8>)
 80267c8:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80267ca:	4b29      	ldr	r3, [pc, #164]	; (8026870 <prvAddNewTaskToReadyList+0xbc>)
 80267cc:	681b      	ldr	r3, [r3, #0]
 80267ce:	2b00      	cmp	r3, #0
 80267d0:	d109      	bne.n	80267e6 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80267d2:	4a27      	ldr	r2, [pc, #156]	; (8026870 <prvAddNewTaskToReadyList+0xbc>)
 80267d4:	687b      	ldr	r3, [r7, #4]
 80267d6:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80267d8:	4b24      	ldr	r3, [pc, #144]	; (802686c <prvAddNewTaskToReadyList+0xb8>)
 80267da:	681b      	ldr	r3, [r3, #0]
 80267dc:	2b01      	cmp	r3, #1
 80267de:	d110      	bne.n	8026802 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80267e0:	f000 fc88 	bl	80270f4 <prvInitialiseTaskLists>
 80267e4:	e00d      	b.n	8026802 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80267e6:	4b23      	ldr	r3, [pc, #140]	; (8026874 <prvAddNewTaskToReadyList+0xc0>)
 80267e8:	681b      	ldr	r3, [r3, #0]
 80267ea:	2b00      	cmp	r3, #0
 80267ec:	d109      	bne.n	8026802 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80267ee:	4b20      	ldr	r3, [pc, #128]	; (8026870 <prvAddNewTaskToReadyList+0xbc>)
 80267f0:	681b      	ldr	r3, [r3, #0]
 80267f2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80267f4:	687b      	ldr	r3, [r7, #4]
 80267f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80267f8:	429a      	cmp	r2, r3
 80267fa:	d802      	bhi.n	8026802 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80267fc:	4a1c      	ldr	r2, [pc, #112]	; (8026870 <prvAddNewTaskToReadyList+0xbc>)
 80267fe:	687b      	ldr	r3, [r7, #4]
 8026800:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8026802:	4b1d      	ldr	r3, [pc, #116]	; (8026878 <prvAddNewTaskToReadyList+0xc4>)
 8026804:	681b      	ldr	r3, [r3, #0]
 8026806:	3301      	adds	r3, #1
 8026808:	4a1b      	ldr	r2, [pc, #108]	; (8026878 <prvAddNewTaskToReadyList+0xc4>)
 802680a:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 802680c:	687b      	ldr	r3, [r7, #4]
 802680e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8026810:	2201      	movs	r2, #1
 8026812:	409a      	lsls	r2, r3
 8026814:	4b19      	ldr	r3, [pc, #100]	; (802687c <prvAddNewTaskToReadyList+0xc8>)
 8026816:	681b      	ldr	r3, [r3, #0]
 8026818:	4313      	orrs	r3, r2
 802681a:	4a18      	ldr	r2, [pc, #96]	; (802687c <prvAddNewTaskToReadyList+0xc8>)
 802681c:	6013      	str	r3, [r2, #0]
 802681e:	687b      	ldr	r3, [r7, #4]
 8026820:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8026822:	4613      	mov	r3, r2
 8026824:	009b      	lsls	r3, r3, #2
 8026826:	4413      	add	r3, r2
 8026828:	009b      	lsls	r3, r3, #2
 802682a:	4a15      	ldr	r2, [pc, #84]	; (8026880 <prvAddNewTaskToReadyList+0xcc>)
 802682c:	441a      	add	r2, r3
 802682e:	687b      	ldr	r3, [r7, #4]
 8026830:	3304      	adds	r3, #4
 8026832:	4619      	mov	r1, r3
 8026834:	4610      	mov	r0, r2
 8026836:	f7fe fe2b 	bl	8025490 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 802683a:	f001 f89b 	bl	8027974 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 802683e:	4b0d      	ldr	r3, [pc, #52]	; (8026874 <prvAddNewTaskToReadyList+0xc0>)
 8026840:	681b      	ldr	r3, [r3, #0]
 8026842:	2b00      	cmp	r3, #0
 8026844:	d00e      	beq.n	8026864 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8026846:	4b0a      	ldr	r3, [pc, #40]	; (8026870 <prvAddNewTaskToReadyList+0xbc>)
 8026848:	681b      	ldr	r3, [r3, #0]
 802684a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 802684c:	687b      	ldr	r3, [r7, #4]
 802684e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8026850:	429a      	cmp	r2, r3
 8026852:	d207      	bcs.n	8026864 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8026854:	4b0b      	ldr	r3, [pc, #44]	; (8026884 <prvAddNewTaskToReadyList+0xd0>)
 8026856:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 802685a:	601a      	str	r2, [r3, #0]
 802685c:	f3bf 8f4f 	dsb	sy
 8026860:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8026864:	bf00      	nop
 8026866:	3708      	adds	r7, #8
 8026868:	46bd      	mov	sp, r7
 802686a:	bd80      	pop	{r7, pc}
 802686c:	20005228 	.word	0x20005228
 8026870:	20005074 	.word	0x20005074
 8026874:	20005234 	.word	0x20005234
 8026878:	20005244 	.word	0x20005244
 802687c:	20005230 	.word	0x20005230
 8026880:	20005078 	.word	0x20005078
 8026884:	e000ed04 	.word	0xe000ed04

08026888 <vTaskDelete>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	void vTaskDelete( TaskHandle_t xTaskToDelete )
	{
 8026888:	b580      	push	{r7, lr}
 802688a:	b084      	sub	sp, #16
 802688c:	af00      	add	r7, sp, #0
 802688e:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 8026890:	f001 f840 	bl	8027914 <vPortEnterCritical>
		{
			/* If null is passed in here then it is the calling task that is
			being deleted. */
			pxTCB = prvGetTCBFromHandle( xTaskToDelete );
 8026894:	687b      	ldr	r3, [r7, #4]
 8026896:	2b00      	cmp	r3, #0
 8026898:	d102      	bne.n	80268a0 <vTaskDelete+0x18>
 802689a:	4b39      	ldr	r3, [pc, #228]	; (8026980 <vTaskDelete+0xf8>)
 802689c:	681b      	ldr	r3, [r3, #0]
 802689e:	e000      	b.n	80268a2 <vTaskDelete+0x1a>
 80268a0:	687b      	ldr	r3, [r7, #4]
 80268a2:	60fb      	str	r3, [r7, #12]

			/* Remove task from the ready/delayed list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80268a4:	68fb      	ldr	r3, [r7, #12]
 80268a6:	3304      	adds	r3, #4
 80268a8:	4618      	mov	r0, r3
 80268aa:	f7fe fe4e 	bl	802554a <uxListRemove>
 80268ae:	4603      	mov	r3, r0
 80268b0:	2b00      	cmp	r3, #0
 80268b2:	d115      	bne.n	80268e0 <vTaskDelete+0x58>
			{
				taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 80268b4:	68fb      	ldr	r3, [r7, #12]
 80268b6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80268b8:	4932      	ldr	r1, [pc, #200]	; (8026984 <vTaskDelete+0xfc>)
 80268ba:	4613      	mov	r3, r2
 80268bc:	009b      	lsls	r3, r3, #2
 80268be:	4413      	add	r3, r2
 80268c0:	009b      	lsls	r3, r3, #2
 80268c2:	440b      	add	r3, r1
 80268c4:	681b      	ldr	r3, [r3, #0]
 80268c6:	2b00      	cmp	r3, #0
 80268c8:	d10a      	bne.n	80268e0 <vTaskDelete+0x58>
 80268ca:	68fb      	ldr	r3, [r7, #12]
 80268cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80268ce:	2201      	movs	r2, #1
 80268d0:	fa02 f303 	lsl.w	r3, r2, r3
 80268d4:	43da      	mvns	r2, r3
 80268d6:	4b2c      	ldr	r3, [pc, #176]	; (8026988 <vTaskDelete+0x100>)
 80268d8:	681b      	ldr	r3, [r3, #0]
 80268da:	4013      	ands	r3, r2
 80268dc:	4a2a      	ldr	r2, [pc, #168]	; (8026988 <vTaskDelete+0x100>)
 80268de:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80268e0:	68fb      	ldr	r3, [r7, #12]
 80268e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80268e4:	2b00      	cmp	r3, #0
 80268e6:	d004      	beq.n	80268f2 <vTaskDelete+0x6a>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80268e8:	68fb      	ldr	r3, [r7, #12]
 80268ea:	3318      	adds	r3, #24
 80268ec:	4618      	mov	r0, r3
 80268ee:	f7fe fe2c 	bl	802554a <uxListRemove>

			/* Increment the uxTaskNumber also so kernel aware debuggers can
			detect that the task lists need re-generating.  This is done before
			portPRE_TASK_DELETE_HOOK() as in the Windows port that macro will
			not return. */
			uxTaskNumber++;
 80268f2:	4b26      	ldr	r3, [pc, #152]	; (802698c <vTaskDelete+0x104>)
 80268f4:	681b      	ldr	r3, [r3, #0]
 80268f6:	3301      	adds	r3, #1
 80268f8:	4a24      	ldr	r2, [pc, #144]	; (802698c <vTaskDelete+0x104>)
 80268fa:	6013      	str	r3, [r2, #0]

			if( pxTCB == pxCurrentTCB )
 80268fc:	4b20      	ldr	r3, [pc, #128]	; (8026980 <vTaskDelete+0xf8>)
 80268fe:	681b      	ldr	r3, [r3, #0]
 8026900:	68fa      	ldr	r2, [r7, #12]
 8026902:	429a      	cmp	r2, r3
 8026904:	d10b      	bne.n	802691e <vTaskDelete+0x96>
				/* A task is deleting itself.  This cannot complete within the
				task itself, as a context switch to another task is required.
				Place the task in the termination list.  The idle task will
				check the termination list and free up any memory allocated by
				the scheduler for the TCB and stack of the deleted task. */
				vListInsertEnd( &xTasksWaitingTermination, &( pxTCB->xStateListItem ) );
 8026906:	68fb      	ldr	r3, [r7, #12]
 8026908:	3304      	adds	r3, #4
 802690a:	4619      	mov	r1, r3
 802690c:	4820      	ldr	r0, [pc, #128]	; (8026990 <vTaskDelete+0x108>)
 802690e:	f7fe fdbf 	bl	8025490 <vListInsertEnd>

				/* Increment the ucTasksDeleted variable so the idle task knows
				there is a task that has been deleted and that it should therefore
				check the xTasksWaitingTermination list. */
				++uxDeletedTasksWaitingCleanUp;
 8026912:	4b20      	ldr	r3, [pc, #128]	; (8026994 <vTaskDelete+0x10c>)
 8026914:	681b      	ldr	r3, [r3, #0]
 8026916:	3301      	adds	r3, #1
 8026918:	4a1e      	ldr	r2, [pc, #120]	; (8026994 <vTaskDelete+0x10c>)
 802691a:	6013      	str	r3, [r2, #0]
 802691c:	e009      	b.n	8026932 <vTaskDelete+0xaa>
				required. */
				portPRE_TASK_DELETE_HOOK( pxTCB, &xYieldPending );
			}
			else
			{
				--uxCurrentNumberOfTasks;
 802691e:	4b1e      	ldr	r3, [pc, #120]	; (8026998 <vTaskDelete+0x110>)
 8026920:	681b      	ldr	r3, [r3, #0]
 8026922:	3b01      	subs	r3, #1
 8026924:	4a1c      	ldr	r2, [pc, #112]	; (8026998 <vTaskDelete+0x110>)
 8026926:	6013      	str	r3, [r2, #0]
				traceTASK_DELETE( pxTCB );
				prvDeleteTCB( pxTCB );
 8026928:	68f8      	ldr	r0, [r7, #12]
 802692a:	f000 fc51 	bl	80271d0 <prvDeleteTCB>

				/* Reset the next expected unblock time in case it referred to
				the task that has just been deleted. */
				prvResetNextTaskUnblockTime();
 802692e:	f000 fc83 	bl	8027238 <prvResetNextTaskUnblockTime>
			}
		}
		taskEXIT_CRITICAL();
 8026932:	f001 f81f 	bl	8027974 <vPortExitCritical>

		/* Force a reschedule if it is the currently running task that has just
		been deleted. */
		if( xSchedulerRunning != pdFALSE )
 8026936:	4b19      	ldr	r3, [pc, #100]	; (802699c <vTaskDelete+0x114>)
 8026938:	681b      	ldr	r3, [r3, #0]
 802693a:	2b00      	cmp	r3, #0
 802693c:	d01b      	beq.n	8026976 <vTaskDelete+0xee>
		{
			if( pxTCB == pxCurrentTCB )
 802693e:	4b10      	ldr	r3, [pc, #64]	; (8026980 <vTaskDelete+0xf8>)
 8026940:	681b      	ldr	r3, [r3, #0]
 8026942:	68fa      	ldr	r2, [r7, #12]
 8026944:	429a      	cmp	r2, r3
 8026946:	d116      	bne.n	8026976 <vTaskDelete+0xee>
			{
				configASSERT( uxSchedulerSuspended == 0 );
 8026948:	4b15      	ldr	r3, [pc, #84]	; (80269a0 <vTaskDelete+0x118>)
 802694a:	681b      	ldr	r3, [r3, #0]
 802694c:	2b00      	cmp	r3, #0
 802694e:	d00a      	beq.n	8026966 <vTaskDelete+0xde>
	__asm volatile
 8026950:	f04f 0350 	mov.w	r3, #80	; 0x50
 8026954:	f383 8811 	msr	BASEPRI, r3
 8026958:	f3bf 8f6f 	isb	sy
 802695c:	f3bf 8f4f 	dsb	sy
 8026960:	60bb      	str	r3, [r7, #8]
}
 8026962:	bf00      	nop
 8026964:	e7fe      	b.n	8026964 <vTaskDelete+0xdc>
				portYIELD_WITHIN_API();
 8026966:	4b0f      	ldr	r3, [pc, #60]	; (80269a4 <vTaskDelete+0x11c>)
 8026968:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 802696c:	601a      	str	r2, [r3, #0]
 802696e:	f3bf 8f4f 	dsb	sy
 8026972:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8026976:	bf00      	nop
 8026978:	3710      	adds	r7, #16
 802697a:	46bd      	mov	sp, r7
 802697c:	bd80      	pop	{r7, pc}
 802697e:	bf00      	nop
 8026980:	20005074 	.word	0x20005074
 8026984:	20005078 	.word	0x20005078
 8026988:	20005230 	.word	0x20005230
 802698c:	20005244 	.word	0x20005244
 8026990:	200051fc 	.word	0x200051fc
 8026994:	20005210 	.word	0x20005210
 8026998:	20005228 	.word	0x20005228
 802699c:	20005234 	.word	0x20005234
 80269a0:	20005250 	.word	0x20005250
 80269a4:	e000ed04 	.word	0xe000ed04

080269a8 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80269a8:	b580      	push	{r7, lr}
 80269aa:	b084      	sub	sp, #16
 80269ac:	af00      	add	r7, sp, #0
 80269ae:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80269b0:	2300      	movs	r3, #0
 80269b2:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80269b4:	687b      	ldr	r3, [r7, #4]
 80269b6:	2b00      	cmp	r3, #0
 80269b8:	d017      	beq.n	80269ea <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80269ba:	4b13      	ldr	r3, [pc, #76]	; (8026a08 <vTaskDelay+0x60>)
 80269bc:	681b      	ldr	r3, [r3, #0]
 80269be:	2b00      	cmp	r3, #0
 80269c0:	d00a      	beq.n	80269d8 <vTaskDelay+0x30>
	__asm volatile
 80269c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80269c6:	f383 8811 	msr	BASEPRI, r3
 80269ca:	f3bf 8f6f 	isb	sy
 80269ce:	f3bf 8f4f 	dsb	sy
 80269d2:	60bb      	str	r3, [r7, #8]
}
 80269d4:	bf00      	nop
 80269d6:	e7fe      	b.n	80269d6 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 80269d8:	f000 f884 	bl	8026ae4 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80269dc:	2100      	movs	r1, #0
 80269de:	6878      	ldr	r0, [r7, #4]
 80269e0:	f000 fe06 	bl	80275f0 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80269e4:	f000 f88c 	bl	8026b00 <xTaskResumeAll>
 80269e8:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80269ea:	68fb      	ldr	r3, [r7, #12]
 80269ec:	2b00      	cmp	r3, #0
 80269ee:	d107      	bne.n	8026a00 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 80269f0:	4b06      	ldr	r3, [pc, #24]	; (8026a0c <vTaskDelay+0x64>)
 80269f2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80269f6:	601a      	str	r2, [r3, #0]
 80269f8:	f3bf 8f4f 	dsb	sy
 80269fc:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8026a00:	bf00      	nop
 8026a02:	3710      	adds	r7, #16
 8026a04:	46bd      	mov	sp, r7
 8026a06:	bd80      	pop	{r7, pc}
 8026a08:	20005250 	.word	0x20005250
 8026a0c:	e000ed04 	.word	0xe000ed04

08026a10 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8026a10:	b580      	push	{r7, lr}
 8026a12:	b08a      	sub	sp, #40	; 0x28
 8026a14:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8026a16:	2300      	movs	r3, #0
 8026a18:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8026a1a:	2300      	movs	r3, #0
 8026a1c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8026a1e:	463a      	mov	r2, r7
 8026a20:	1d39      	adds	r1, r7, #4
 8026a22:	f107 0308 	add.w	r3, r7, #8
 8026a26:	4618      	mov	r0, r3
 8026a28:	f7f9 fdac 	bl	8020584 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8026a2c:	6839      	ldr	r1, [r7, #0]
 8026a2e:	687b      	ldr	r3, [r7, #4]
 8026a30:	68ba      	ldr	r2, [r7, #8]
 8026a32:	9202      	str	r2, [sp, #8]
 8026a34:	9301      	str	r3, [sp, #4]
 8026a36:	2300      	movs	r3, #0
 8026a38:	9300      	str	r3, [sp, #0]
 8026a3a:	2300      	movs	r3, #0
 8026a3c:	460a      	mov	r2, r1
 8026a3e:	4921      	ldr	r1, [pc, #132]	; (8026ac4 <vTaskStartScheduler+0xb4>)
 8026a40:	4821      	ldr	r0, [pc, #132]	; (8026ac8 <vTaskStartScheduler+0xb8>)
 8026a42:	f7ff fd77 	bl	8026534 <xTaskCreateStatic>
 8026a46:	4603      	mov	r3, r0
 8026a48:	4a20      	ldr	r2, [pc, #128]	; (8026acc <vTaskStartScheduler+0xbc>)
 8026a4a:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8026a4c:	4b1f      	ldr	r3, [pc, #124]	; (8026acc <vTaskStartScheduler+0xbc>)
 8026a4e:	681b      	ldr	r3, [r3, #0]
 8026a50:	2b00      	cmp	r3, #0
 8026a52:	d002      	beq.n	8026a5a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8026a54:	2301      	movs	r3, #1
 8026a56:	617b      	str	r3, [r7, #20]
 8026a58:	e001      	b.n	8026a5e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8026a5a:	2300      	movs	r3, #0
 8026a5c:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8026a5e:	697b      	ldr	r3, [r7, #20]
 8026a60:	2b01      	cmp	r3, #1
 8026a62:	d11b      	bne.n	8026a9c <vTaskStartScheduler+0x8c>
	__asm volatile
 8026a64:	f04f 0350 	mov.w	r3, #80	; 0x50
 8026a68:	f383 8811 	msr	BASEPRI, r3
 8026a6c:	f3bf 8f6f 	isb	sy
 8026a70:	f3bf 8f4f 	dsb	sy
 8026a74:	613b      	str	r3, [r7, #16]
}
 8026a76:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8026a78:	4b15      	ldr	r3, [pc, #84]	; (8026ad0 <vTaskStartScheduler+0xc0>)
 8026a7a:	681b      	ldr	r3, [r3, #0]
 8026a7c:	334c      	adds	r3, #76	; 0x4c
 8026a7e:	4a15      	ldr	r2, [pc, #84]	; (8026ad4 <vTaskStartScheduler+0xc4>)
 8026a80:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8026a82:	4b15      	ldr	r3, [pc, #84]	; (8026ad8 <vTaskStartScheduler+0xc8>)
 8026a84:	f04f 32ff 	mov.w	r2, #4294967295
 8026a88:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8026a8a:	4b14      	ldr	r3, [pc, #80]	; (8026adc <vTaskStartScheduler+0xcc>)
 8026a8c:	2201      	movs	r2, #1
 8026a8e:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8026a90:	4b13      	ldr	r3, [pc, #76]	; (8026ae0 <vTaskStartScheduler+0xd0>)
 8026a92:	2200      	movs	r2, #0
 8026a94:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8026a96:	f000 fe9b 	bl	80277d0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8026a9a:	e00e      	b.n	8026aba <vTaskStartScheduler+0xaa>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8026a9c:	697b      	ldr	r3, [r7, #20]
 8026a9e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8026aa2:	d10a      	bne.n	8026aba <vTaskStartScheduler+0xaa>
	__asm volatile
 8026aa4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8026aa8:	f383 8811 	msr	BASEPRI, r3
 8026aac:	f3bf 8f6f 	isb	sy
 8026ab0:	f3bf 8f4f 	dsb	sy
 8026ab4:	60fb      	str	r3, [r7, #12]
}
 8026ab6:	bf00      	nop
 8026ab8:	e7fe      	b.n	8026ab8 <vTaskStartScheduler+0xa8>
}
 8026aba:	bf00      	nop
 8026abc:	3718      	adds	r7, #24
 8026abe:	46bd      	mov	sp, r7
 8026ac0:	bd80      	pop	{r7, pc}
 8026ac2:	bf00      	nop
 8026ac4:	0803757c 	.word	0x0803757c
 8026ac8:	080270c5 	.word	0x080270c5
 8026acc:	2000524c 	.word	0x2000524c
 8026ad0:	20005074 	.word	0x20005074
 8026ad4:	20000034 	.word	0x20000034
 8026ad8:	20005248 	.word	0x20005248
 8026adc:	20005234 	.word	0x20005234
 8026ae0:	2000522c 	.word	0x2000522c

08026ae4 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8026ae4:	b480      	push	{r7}
 8026ae6:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8026ae8:	4b04      	ldr	r3, [pc, #16]	; (8026afc <vTaskSuspendAll+0x18>)
 8026aea:	681b      	ldr	r3, [r3, #0]
 8026aec:	3301      	adds	r3, #1
 8026aee:	4a03      	ldr	r2, [pc, #12]	; (8026afc <vTaskSuspendAll+0x18>)
 8026af0:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8026af2:	bf00      	nop
 8026af4:	46bd      	mov	sp, r7
 8026af6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8026afa:	4770      	bx	lr
 8026afc:	20005250 	.word	0x20005250

08026b00 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8026b00:	b580      	push	{r7, lr}
 8026b02:	b084      	sub	sp, #16
 8026b04:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8026b06:	2300      	movs	r3, #0
 8026b08:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8026b0a:	2300      	movs	r3, #0
 8026b0c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8026b0e:	4b41      	ldr	r3, [pc, #260]	; (8026c14 <xTaskResumeAll+0x114>)
 8026b10:	681b      	ldr	r3, [r3, #0]
 8026b12:	2b00      	cmp	r3, #0
 8026b14:	d10a      	bne.n	8026b2c <xTaskResumeAll+0x2c>
	__asm volatile
 8026b16:	f04f 0350 	mov.w	r3, #80	; 0x50
 8026b1a:	f383 8811 	msr	BASEPRI, r3
 8026b1e:	f3bf 8f6f 	isb	sy
 8026b22:	f3bf 8f4f 	dsb	sy
 8026b26:	603b      	str	r3, [r7, #0]
}
 8026b28:	bf00      	nop
 8026b2a:	e7fe      	b.n	8026b2a <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8026b2c:	f000 fef2 	bl	8027914 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8026b30:	4b38      	ldr	r3, [pc, #224]	; (8026c14 <xTaskResumeAll+0x114>)
 8026b32:	681b      	ldr	r3, [r3, #0]
 8026b34:	3b01      	subs	r3, #1
 8026b36:	4a37      	ldr	r2, [pc, #220]	; (8026c14 <xTaskResumeAll+0x114>)
 8026b38:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8026b3a:	4b36      	ldr	r3, [pc, #216]	; (8026c14 <xTaskResumeAll+0x114>)
 8026b3c:	681b      	ldr	r3, [r3, #0]
 8026b3e:	2b00      	cmp	r3, #0
 8026b40:	d161      	bne.n	8026c06 <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8026b42:	4b35      	ldr	r3, [pc, #212]	; (8026c18 <xTaskResumeAll+0x118>)
 8026b44:	681b      	ldr	r3, [r3, #0]
 8026b46:	2b00      	cmp	r3, #0
 8026b48:	d05d      	beq.n	8026c06 <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8026b4a:	e02e      	b.n	8026baa <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8026b4c:	4b33      	ldr	r3, [pc, #204]	; (8026c1c <xTaskResumeAll+0x11c>)
 8026b4e:	68db      	ldr	r3, [r3, #12]
 8026b50:	68db      	ldr	r3, [r3, #12]
 8026b52:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8026b54:	68fb      	ldr	r3, [r7, #12]
 8026b56:	3318      	adds	r3, #24
 8026b58:	4618      	mov	r0, r3
 8026b5a:	f7fe fcf6 	bl	802554a <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8026b5e:	68fb      	ldr	r3, [r7, #12]
 8026b60:	3304      	adds	r3, #4
 8026b62:	4618      	mov	r0, r3
 8026b64:	f7fe fcf1 	bl	802554a <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8026b68:	68fb      	ldr	r3, [r7, #12]
 8026b6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8026b6c:	2201      	movs	r2, #1
 8026b6e:	409a      	lsls	r2, r3
 8026b70:	4b2b      	ldr	r3, [pc, #172]	; (8026c20 <xTaskResumeAll+0x120>)
 8026b72:	681b      	ldr	r3, [r3, #0]
 8026b74:	4313      	orrs	r3, r2
 8026b76:	4a2a      	ldr	r2, [pc, #168]	; (8026c20 <xTaskResumeAll+0x120>)
 8026b78:	6013      	str	r3, [r2, #0]
 8026b7a:	68fb      	ldr	r3, [r7, #12]
 8026b7c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8026b7e:	4613      	mov	r3, r2
 8026b80:	009b      	lsls	r3, r3, #2
 8026b82:	4413      	add	r3, r2
 8026b84:	009b      	lsls	r3, r3, #2
 8026b86:	4a27      	ldr	r2, [pc, #156]	; (8026c24 <xTaskResumeAll+0x124>)
 8026b88:	441a      	add	r2, r3
 8026b8a:	68fb      	ldr	r3, [r7, #12]
 8026b8c:	3304      	adds	r3, #4
 8026b8e:	4619      	mov	r1, r3
 8026b90:	4610      	mov	r0, r2
 8026b92:	f7fe fc7d 	bl	8025490 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8026b96:	68fb      	ldr	r3, [r7, #12]
 8026b98:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8026b9a:	4b23      	ldr	r3, [pc, #140]	; (8026c28 <xTaskResumeAll+0x128>)
 8026b9c:	681b      	ldr	r3, [r3, #0]
 8026b9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8026ba0:	429a      	cmp	r2, r3
 8026ba2:	d302      	bcc.n	8026baa <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 8026ba4:	4b21      	ldr	r3, [pc, #132]	; (8026c2c <xTaskResumeAll+0x12c>)
 8026ba6:	2201      	movs	r2, #1
 8026ba8:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8026baa:	4b1c      	ldr	r3, [pc, #112]	; (8026c1c <xTaskResumeAll+0x11c>)
 8026bac:	681b      	ldr	r3, [r3, #0]
 8026bae:	2b00      	cmp	r3, #0
 8026bb0:	d1cc      	bne.n	8026b4c <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8026bb2:	68fb      	ldr	r3, [r7, #12]
 8026bb4:	2b00      	cmp	r3, #0
 8026bb6:	d001      	beq.n	8026bbc <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8026bb8:	f000 fb3e 	bl	8027238 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8026bbc:	4b1c      	ldr	r3, [pc, #112]	; (8026c30 <xTaskResumeAll+0x130>)
 8026bbe:	681b      	ldr	r3, [r3, #0]
 8026bc0:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8026bc2:	687b      	ldr	r3, [r7, #4]
 8026bc4:	2b00      	cmp	r3, #0
 8026bc6:	d010      	beq.n	8026bea <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8026bc8:	f000 f858 	bl	8026c7c <xTaskIncrementTick>
 8026bcc:	4603      	mov	r3, r0
 8026bce:	2b00      	cmp	r3, #0
 8026bd0:	d002      	beq.n	8026bd8 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 8026bd2:	4b16      	ldr	r3, [pc, #88]	; (8026c2c <xTaskResumeAll+0x12c>)
 8026bd4:	2201      	movs	r2, #1
 8026bd6:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8026bd8:	687b      	ldr	r3, [r7, #4]
 8026bda:	3b01      	subs	r3, #1
 8026bdc:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8026bde:	687b      	ldr	r3, [r7, #4]
 8026be0:	2b00      	cmp	r3, #0
 8026be2:	d1f1      	bne.n	8026bc8 <xTaskResumeAll+0xc8>

						xPendedTicks = 0;
 8026be4:	4b12      	ldr	r3, [pc, #72]	; (8026c30 <xTaskResumeAll+0x130>)
 8026be6:	2200      	movs	r2, #0
 8026be8:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8026bea:	4b10      	ldr	r3, [pc, #64]	; (8026c2c <xTaskResumeAll+0x12c>)
 8026bec:	681b      	ldr	r3, [r3, #0]
 8026bee:	2b00      	cmp	r3, #0
 8026bf0:	d009      	beq.n	8026c06 <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8026bf2:	2301      	movs	r3, #1
 8026bf4:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8026bf6:	4b0f      	ldr	r3, [pc, #60]	; (8026c34 <xTaskResumeAll+0x134>)
 8026bf8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8026bfc:	601a      	str	r2, [r3, #0]
 8026bfe:	f3bf 8f4f 	dsb	sy
 8026c02:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8026c06:	f000 feb5 	bl	8027974 <vPortExitCritical>

	return xAlreadyYielded;
 8026c0a:	68bb      	ldr	r3, [r7, #8]
}
 8026c0c:	4618      	mov	r0, r3
 8026c0e:	3710      	adds	r7, #16
 8026c10:	46bd      	mov	sp, r7
 8026c12:	bd80      	pop	{r7, pc}
 8026c14:	20005250 	.word	0x20005250
 8026c18:	20005228 	.word	0x20005228
 8026c1c:	200051e8 	.word	0x200051e8
 8026c20:	20005230 	.word	0x20005230
 8026c24:	20005078 	.word	0x20005078
 8026c28:	20005074 	.word	0x20005074
 8026c2c:	2000523c 	.word	0x2000523c
 8026c30:	20005238 	.word	0x20005238
 8026c34:	e000ed04 	.word	0xe000ed04

08026c38 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8026c38:	b480      	push	{r7}
 8026c3a:	b083      	sub	sp, #12
 8026c3c:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8026c3e:	4b05      	ldr	r3, [pc, #20]	; (8026c54 <xTaskGetTickCount+0x1c>)
 8026c40:	681b      	ldr	r3, [r3, #0]
 8026c42:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8026c44:	687b      	ldr	r3, [r7, #4]
}
 8026c46:	4618      	mov	r0, r3
 8026c48:	370c      	adds	r7, #12
 8026c4a:	46bd      	mov	sp, r7
 8026c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8026c50:	4770      	bx	lr
 8026c52:	bf00      	nop
 8026c54:	2000522c 	.word	0x2000522c

08026c58 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 8026c58:	b580      	push	{r7, lr}
 8026c5a:	b082      	sub	sp, #8
 8026c5c:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8026c5e:	f000 ff3b 	bl	8027ad8 <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 8026c62:	2300      	movs	r3, #0
 8026c64:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 8026c66:	4b04      	ldr	r3, [pc, #16]	; (8026c78 <xTaskGetTickCountFromISR+0x20>)
 8026c68:	681b      	ldr	r3, [r3, #0]
 8026c6a:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8026c6c:	683b      	ldr	r3, [r7, #0]
}
 8026c6e:	4618      	mov	r0, r3
 8026c70:	3708      	adds	r7, #8
 8026c72:	46bd      	mov	sp, r7
 8026c74:	bd80      	pop	{r7, pc}
 8026c76:	bf00      	nop
 8026c78:	2000522c 	.word	0x2000522c

08026c7c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8026c7c:	b580      	push	{r7, lr}
 8026c7e:	b086      	sub	sp, #24
 8026c80:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8026c82:	2300      	movs	r3, #0
 8026c84:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8026c86:	4b4e      	ldr	r3, [pc, #312]	; (8026dc0 <xTaskIncrementTick+0x144>)
 8026c88:	681b      	ldr	r3, [r3, #0]
 8026c8a:	2b00      	cmp	r3, #0
 8026c8c:	f040 808e 	bne.w	8026dac <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8026c90:	4b4c      	ldr	r3, [pc, #304]	; (8026dc4 <xTaskIncrementTick+0x148>)
 8026c92:	681b      	ldr	r3, [r3, #0]
 8026c94:	3301      	adds	r3, #1
 8026c96:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8026c98:	4a4a      	ldr	r2, [pc, #296]	; (8026dc4 <xTaskIncrementTick+0x148>)
 8026c9a:	693b      	ldr	r3, [r7, #16]
 8026c9c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8026c9e:	693b      	ldr	r3, [r7, #16]
 8026ca0:	2b00      	cmp	r3, #0
 8026ca2:	d120      	bne.n	8026ce6 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8026ca4:	4b48      	ldr	r3, [pc, #288]	; (8026dc8 <xTaskIncrementTick+0x14c>)
 8026ca6:	681b      	ldr	r3, [r3, #0]
 8026ca8:	681b      	ldr	r3, [r3, #0]
 8026caa:	2b00      	cmp	r3, #0
 8026cac:	d00a      	beq.n	8026cc4 <xTaskIncrementTick+0x48>
	__asm volatile
 8026cae:	f04f 0350 	mov.w	r3, #80	; 0x50
 8026cb2:	f383 8811 	msr	BASEPRI, r3
 8026cb6:	f3bf 8f6f 	isb	sy
 8026cba:	f3bf 8f4f 	dsb	sy
 8026cbe:	603b      	str	r3, [r7, #0]
}
 8026cc0:	bf00      	nop
 8026cc2:	e7fe      	b.n	8026cc2 <xTaskIncrementTick+0x46>
 8026cc4:	4b40      	ldr	r3, [pc, #256]	; (8026dc8 <xTaskIncrementTick+0x14c>)
 8026cc6:	681b      	ldr	r3, [r3, #0]
 8026cc8:	60fb      	str	r3, [r7, #12]
 8026cca:	4b40      	ldr	r3, [pc, #256]	; (8026dcc <xTaskIncrementTick+0x150>)
 8026ccc:	681b      	ldr	r3, [r3, #0]
 8026cce:	4a3e      	ldr	r2, [pc, #248]	; (8026dc8 <xTaskIncrementTick+0x14c>)
 8026cd0:	6013      	str	r3, [r2, #0]
 8026cd2:	4a3e      	ldr	r2, [pc, #248]	; (8026dcc <xTaskIncrementTick+0x150>)
 8026cd4:	68fb      	ldr	r3, [r7, #12]
 8026cd6:	6013      	str	r3, [r2, #0]
 8026cd8:	4b3d      	ldr	r3, [pc, #244]	; (8026dd0 <xTaskIncrementTick+0x154>)
 8026cda:	681b      	ldr	r3, [r3, #0]
 8026cdc:	3301      	adds	r3, #1
 8026cde:	4a3c      	ldr	r2, [pc, #240]	; (8026dd0 <xTaskIncrementTick+0x154>)
 8026ce0:	6013      	str	r3, [r2, #0]
 8026ce2:	f000 faa9 	bl	8027238 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8026ce6:	4b3b      	ldr	r3, [pc, #236]	; (8026dd4 <xTaskIncrementTick+0x158>)
 8026ce8:	681b      	ldr	r3, [r3, #0]
 8026cea:	693a      	ldr	r2, [r7, #16]
 8026cec:	429a      	cmp	r2, r3
 8026cee:	d348      	bcc.n	8026d82 <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8026cf0:	4b35      	ldr	r3, [pc, #212]	; (8026dc8 <xTaskIncrementTick+0x14c>)
 8026cf2:	681b      	ldr	r3, [r3, #0]
 8026cf4:	681b      	ldr	r3, [r3, #0]
 8026cf6:	2b00      	cmp	r3, #0
 8026cf8:	d104      	bne.n	8026d04 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8026cfa:	4b36      	ldr	r3, [pc, #216]	; (8026dd4 <xTaskIncrementTick+0x158>)
 8026cfc:	f04f 32ff 	mov.w	r2, #4294967295
 8026d00:	601a      	str	r2, [r3, #0]
					break;
 8026d02:	e03e      	b.n	8026d82 <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8026d04:	4b30      	ldr	r3, [pc, #192]	; (8026dc8 <xTaskIncrementTick+0x14c>)
 8026d06:	681b      	ldr	r3, [r3, #0]
 8026d08:	68db      	ldr	r3, [r3, #12]
 8026d0a:	68db      	ldr	r3, [r3, #12]
 8026d0c:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8026d0e:	68bb      	ldr	r3, [r7, #8]
 8026d10:	685b      	ldr	r3, [r3, #4]
 8026d12:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8026d14:	693a      	ldr	r2, [r7, #16]
 8026d16:	687b      	ldr	r3, [r7, #4]
 8026d18:	429a      	cmp	r2, r3
 8026d1a:	d203      	bcs.n	8026d24 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8026d1c:	4a2d      	ldr	r2, [pc, #180]	; (8026dd4 <xTaskIncrementTick+0x158>)
 8026d1e:	687b      	ldr	r3, [r7, #4]
 8026d20:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8026d22:	e02e      	b.n	8026d82 <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8026d24:	68bb      	ldr	r3, [r7, #8]
 8026d26:	3304      	adds	r3, #4
 8026d28:	4618      	mov	r0, r3
 8026d2a:	f7fe fc0e 	bl	802554a <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8026d2e:	68bb      	ldr	r3, [r7, #8]
 8026d30:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8026d32:	2b00      	cmp	r3, #0
 8026d34:	d004      	beq.n	8026d40 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8026d36:	68bb      	ldr	r3, [r7, #8]
 8026d38:	3318      	adds	r3, #24
 8026d3a:	4618      	mov	r0, r3
 8026d3c:	f7fe fc05 	bl	802554a <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8026d40:	68bb      	ldr	r3, [r7, #8]
 8026d42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8026d44:	2201      	movs	r2, #1
 8026d46:	409a      	lsls	r2, r3
 8026d48:	4b23      	ldr	r3, [pc, #140]	; (8026dd8 <xTaskIncrementTick+0x15c>)
 8026d4a:	681b      	ldr	r3, [r3, #0]
 8026d4c:	4313      	orrs	r3, r2
 8026d4e:	4a22      	ldr	r2, [pc, #136]	; (8026dd8 <xTaskIncrementTick+0x15c>)
 8026d50:	6013      	str	r3, [r2, #0]
 8026d52:	68bb      	ldr	r3, [r7, #8]
 8026d54:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8026d56:	4613      	mov	r3, r2
 8026d58:	009b      	lsls	r3, r3, #2
 8026d5a:	4413      	add	r3, r2
 8026d5c:	009b      	lsls	r3, r3, #2
 8026d5e:	4a1f      	ldr	r2, [pc, #124]	; (8026ddc <xTaskIncrementTick+0x160>)
 8026d60:	441a      	add	r2, r3
 8026d62:	68bb      	ldr	r3, [r7, #8]
 8026d64:	3304      	adds	r3, #4
 8026d66:	4619      	mov	r1, r3
 8026d68:	4610      	mov	r0, r2
 8026d6a:	f7fe fb91 	bl	8025490 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8026d6e:	68bb      	ldr	r3, [r7, #8]
 8026d70:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8026d72:	4b1b      	ldr	r3, [pc, #108]	; (8026de0 <xTaskIncrementTick+0x164>)
 8026d74:	681b      	ldr	r3, [r3, #0]
 8026d76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8026d78:	429a      	cmp	r2, r3
 8026d7a:	d3b9      	bcc.n	8026cf0 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8026d7c:	2301      	movs	r3, #1
 8026d7e:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8026d80:	e7b6      	b.n	8026cf0 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8026d82:	4b17      	ldr	r3, [pc, #92]	; (8026de0 <xTaskIncrementTick+0x164>)
 8026d84:	681b      	ldr	r3, [r3, #0]
 8026d86:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8026d88:	4914      	ldr	r1, [pc, #80]	; (8026ddc <xTaskIncrementTick+0x160>)
 8026d8a:	4613      	mov	r3, r2
 8026d8c:	009b      	lsls	r3, r3, #2
 8026d8e:	4413      	add	r3, r2
 8026d90:	009b      	lsls	r3, r3, #2
 8026d92:	440b      	add	r3, r1
 8026d94:	681b      	ldr	r3, [r3, #0]
 8026d96:	2b01      	cmp	r3, #1
 8026d98:	d901      	bls.n	8026d9e <xTaskIncrementTick+0x122>
			{
				xSwitchRequired = pdTRUE;
 8026d9a:	2301      	movs	r3, #1
 8026d9c:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8026d9e:	4b11      	ldr	r3, [pc, #68]	; (8026de4 <xTaskIncrementTick+0x168>)
 8026da0:	681b      	ldr	r3, [r3, #0]
 8026da2:	2b00      	cmp	r3, #0
 8026da4:	d007      	beq.n	8026db6 <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 8026da6:	2301      	movs	r3, #1
 8026da8:	617b      	str	r3, [r7, #20]
 8026daa:	e004      	b.n	8026db6 <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8026dac:	4b0e      	ldr	r3, [pc, #56]	; (8026de8 <xTaskIncrementTick+0x16c>)
 8026dae:	681b      	ldr	r3, [r3, #0]
 8026db0:	3301      	adds	r3, #1
 8026db2:	4a0d      	ldr	r2, [pc, #52]	; (8026de8 <xTaskIncrementTick+0x16c>)
 8026db4:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8026db6:	697b      	ldr	r3, [r7, #20]
}
 8026db8:	4618      	mov	r0, r3
 8026dba:	3718      	adds	r7, #24
 8026dbc:	46bd      	mov	sp, r7
 8026dbe:	bd80      	pop	{r7, pc}
 8026dc0:	20005250 	.word	0x20005250
 8026dc4:	2000522c 	.word	0x2000522c
 8026dc8:	200051e0 	.word	0x200051e0
 8026dcc:	200051e4 	.word	0x200051e4
 8026dd0:	20005240 	.word	0x20005240
 8026dd4:	20005248 	.word	0x20005248
 8026dd8:	20005230 	.word	0x20005230
 8026ddc:	20005078 	.word	0x20005078
 8026de0:	20005074 	.word	0x20005074
 8026de4:	2000523c 	.word	0x2000523c
 8026de8:	20005238 	.word	0x20005238

08026dec <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8026dec:	b480      	push	{r7}
 8026dee:	b087      	sub	sp, #28
 8026df0:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8026df2:	4b29      	ldr	r3, [pc, #164]	; (8026e98 <vTaskSwitchContext+0xac>)
 8026df4:	681b      	ldr	r3, [r3, #0]
 8026df6:	2b00      	cmp	r3, #0
 8026df8:	d003      	beq.n	8026e02 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8026dfa:	4b28      	ldr	r3, [pc, #160]	; (8026e9c <vTaskSwitchContext+0xb0>)
 8026dfc:	2201      	movs	r2, #1
 8026dfe:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8026e00:	e044      	b.n	8026e8c <vTaskSwitchContext+0xa0>
		xYieldPending = pdFALSE;
 8026e02:	4b26      	ldr	r3, [pc, #152]	; (8026e9c <vTaskSwitchContext+0xb0>)
 8026e04:	2200      	movs	r2, #0
 8026e06:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8026e08:	4b25      	ldr	r3, [pc, #148]	; (8026ea0 <vTaskSwitchContext+0xb4>)
 8026e0a:	681b      	ldr	r3, [r3, #0]
 8026e0c:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8026e0e:	68fb      	ldr	r3, [r7, #12]
 8026e10:	fab3 f383 	clz	r3, r3
 8026e14:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8026e16:	7afb      	ldrb	r3, [r7, #11]
 8026e18:	f1c3 031f 	rsb	r3, r3, #31
 8026e1c:	617b      	str	r3, [r7, #20]
 8026e1e:	4921      	ldr	r1, [pc, #132]	; (8026ea4 <vTaskSwitchContext+0xb8>)
 8026e20:	697a      	ldr	r2, [r7, #20]
 8026e22:	4613      	mov	r3, r2
 8026e24:	009b      	lsls	r3, r3, #2
 8026e26:	4413      	add	r3, r2
 8026e28:	009b      	lsls	r3, r3, #2
 8026e2a:	440b      	add	r3, r1
 8026e2c:	681b      	ldr	r3, [r3, #0]
 8026e2e:	2b00      	cmp	r3, #0
 8026e30:	d10a      	bne.n	8026e48 <vTaskSwitchContext+0x5c>
	__asm volatile
 8026e32:	f04f 0350 	mov.w	r3, #80	; 0x50
 8026e36:	f383 8811 	msr	BASEPRI, r3
 8026e3a:	f3bf 8f6f 	isb	sy
 8026e3e:	f3bf 8f4f 	dsb	sy
 8026e42:	607b      	str	r3, [r7, #4]
}
 8026e44:	bf00      	nop
 8026e46:	e7fe      	b.n	8026e46 <vTaskSwitchContext+0x5a>
 8026e48:	697a      	ldr	r2, [r7, #20]
 8026e4a:	4613      	mov	r3, r2
 8026e4c:	009b      	lsls	r3, r3, #2
 8026e4e:	4413      	add	r3, r2
 8026e50:	009b      	lsls	r3, r3, #2
 8026e52:	4a14      	ldr	r2, [pc, #80]	; (8026ea4 <vTaskSwitchContext+0xb8>)
 8026e54:	4413      	add	r3, r2
 8026e56:	613b      	str	r3, [r7, #16]
 8026e58:	693b      	ldr	r3, [r7, #16]
 8026e5a:	685b      	ldr	r3, [r3, #4]
 8026e5c:	685a      	ldr	r2, [r3, #4]
 8026e5e:	693b      	ldr	r3, [r7, #16]
 8026e60:	605a      	str	r2, [r3, #4]
 8026e62:	693b      	ldr	r3, [r7, #16]
 8026e64:	685a      	ldr	r2, [r3, #4]
 8026e66:	693b      	ldr	r3, [r7, #16]
 8026e68:	3308      	adds	r3, #8
 8026e6a:	429a      	cmp	r2, r3
 8026e6c:	d104      	bne.n	8026e78 <vTaskSwitchContext+0x8c>
 8026e6e:	693b      	ldr	r3, [r7, #16]
 8026e70:	685b      	ldr	r3, [r3, #4]
 8026e72:	685a      	ldr	r2, [r3, #4]
 8026e74:	693b      	ldr	r3, [r7, #16]
 8026e76:	605a      	str	r2, [r3, #4]
 8026e78:	693b      	ldr	r3, [r7, #16]
 8026e7a:	685b      	ldr	r3, [r3, #4]
 8026e7c:	68db      	ldr	r3, [r3, #12]
 8026e7e:	4a0a      	ldr	r2, [pc, #40]	; (8026ea8 <vTaskSwitchContext+0xbc>)
 8026e80:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8026e82:	4b09      	ldr	r3, [pc, #36]	; (8026ea8 <vTaskSwitchContext+0xbc>)
 8026e84:	681b      	ldr	r3, [r3, #0]
 8026e86:	334c      	adds	r3, #76	; 0x4c
 8026e88:	4a08      	ldr	r2, [pc, #32]	; (8026eac <vTaskSwitchContext+0xc0>)
 8026e8a:	6013      	str	r3, [r2, #0]
}
 8026e8c:	bf00      	nop
 8026e8e:	371c      	adds	r7, #28
 8026e90:	46bd      	mov	sp, r7
 8026e92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8026e96:	4770      	bx	lr
 8026e98:	20005250 	.word	0x20005250
 8026e9c:	2000523c 	.word	0x2000523c
 8026ea0:	20005230 	.word	0x20005230
 8026ea4:	20005078 	.word	0x20005078
 8026ea8:	20005074 	.word	0x20005074
 8026eac:	20000034 	.word	0x20000034

08026eb0 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8026eb0:	b580      	push	{r7, lr}
 8026eb2:	b084      	sub	sp, #16
 8026eb4:	af00      	add	r7, sp, #0
 8026eb6:	6078      	str	r0, [r7, #4]
 8026eb8:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8026eba:	687b      	ldr	r3, [r7, #4]
 8026ebc:	2b00      	cmp	r3, #0
 8026ebe:	d10a      	bne.n	8026ed6 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8026ec0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8026ec4:	f383 8811 	msr	BASEPRI, r3
 8026ec8:	f3bf 8f6f 	isb	sy
 8026ecc:	f3bf 8f4f 	dsb	sy
 8026ed0:	60fb      	str	r3, [r7, #12]
}
 8026ed2:	bf00      	nop
 8026ed4:	e7fe      	b.n	8026ed4 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8026ed6:	4b07      	ldr	r3, [pc, #28]	; (8026ef4 <vTaskPlaceOnEventList+0x44>)
 8026ed8:	681b      	ldr	r3, [r3, #0]
 8026eda:	3318      	adds	r3, #24
 8026edc:	4619      	mov	r1, r3
 8026ede:	6878      	ldr	r0, [r7, #4]
 8026ee0:	f7fe fafa 	bl	80254d8 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8026ee4:	2101      	movs	r1, #1
 8026ee6:	6838      	ldr	r0, [r7, #0]
 8026ee8:	f000 fb82 	bl	80275f0 <prvAddCurrentTaskToDelayedList>
}
 8026eec:	bf00      	nop
 8026eee:	3710      	adds	r7, #16
 8026ef0:	46bd      	mov	sp, r7
 8026ef2:	bd80      	pop	{r7, pc}
 8026ef4:	20005074 	.word	0x20005074

08026ef8 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8026ef8:	b580      	push	{r7, lr}
 8026efa:	b086      	sub	sp, #24
 8026efc:	af00      	add	r7, sp, #0
 8026efe:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8026f00:	687b      	ldr	r3, [r7, #4]
 8026f02:	68db      	ldr	r3, [r3, #12]
 8026f04:	68db      	ldr	r3, [r3, #12]
 8026f06:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8026f08:	693b      	ldr	r3, [r7, #16]
 8026f0a:	2b00      	cmp	r3, #0
 8026f0c:	d10a      	bne.n	8026f24 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8026f0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8026f12:	f383 8811 	msr	BASEPRI, r3
 8026f16:	f3bf 8f6f 	isb	sy
 8026f1a:	f3bf 8f4f 	dsb	sy
 8026f1e:	60fb      	str	r3, [r7, #12]
}
 8026f20:	bf00      	nop
 8026f22:	e7fe      	b.n	8026f22 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8026f24:	693b      	ldr	r3, [r7, #16]
 8026f26:	3318      	adds	r3, #24
 8026f28:	4618      	mov	r0, r3
 8026f2a:	f7fe fb0e 	bl	802554a <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8026f2e:	4b1d      	ldr	r3, [pc, #116]	; (8026fa4 <xTaskRemoveFromEventList+0xac>)
 8026f30:	681b      	ldr	r3, [r3, #0]
 8026f32:	2b00      	cmp	r3, #0
 8026f34:	d11c      	bne.n	8026f70 <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8026f36:	693b      	ldr	r3, [r7, #16]
 8026f38:	3304      	adds	r3, #4
 8026f3a:	4618      	mov	r0, r3
 8026f3c:	f7fe fb05 	bl	802554a <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8026f40:	693b      	ldr	r3, [r7, #16]
 8026f42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8026f44:	2201      	movs	r2, #1
 8026f46:	409a      	lsls	r2, r3
 8026f48:	4b17      	ldr	r3, [pc, #92]	; (8026fa8 <xTaskRemoveFromEventList+0xb0>)
 8026f4a:	681b      	ldr	r3, [r3, #0]
 8026f4c:	4313      	orrs	r3, r2
 8026f4e:	4a16      	ldr	r2, [pc, #88]	; (8026fa8 <xTaskRemoveFromEventList+0xb0>)
 8026f50:	6013      	str	r3, [r2, #0]
 8026f52:	693b      	ldr	r3, [r7, #16]
 8026f54:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8026f56:	4613      	mov	r3, r2
 8026f58:	009b      	lsls	r3, r3, #2
 8026f5a:	4413      	add	r3, r2
 8026f5c:	009b      	lsls	r3, r3, #2
 8026f5e:	4a13      	ldr	r2, [pc, #76]	; (8026fac <xTaskRemoveFromEventList+0xb4>)
 8026f60:	441a      	add	r2, r3
 8026f62:	693b      	ldr	r3, [r7, #16]
 8026f64:	3304      	adds	r3, #4
 8026f66:	4619      	mov	r1, r3
 8026f68:	4610      	mov	r0, r2
 8026f6a:	f7fe fa91 	bl	8025490 <vListInsertEnd>
 8026f6e:	e005      	b.n	8026f7c <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8026f70:	693b      	ldr	r3, [r7, #16]
 8026f72:	3318      	adds	r3, #24
 8026f74:	4619      	mov	r1, r3
 8026f76:	480e      	ldr	r0, [pc, #56]	; (8026fb0 <xTaskRemoveFromEventList+0xb8>)
 8026f78:	f7fe fa8a 	bl	8025490 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8026f7c:	693b      	ldr	r3, [r7, #16]
 8026f7e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8026f80:	4b0c      	ldr	r3, [pc, #48]	; (8026fb4 <xTaskRemoveFromEventList+0xbc>)
 8026f82:	681b      	ldr	r3, [r3, #0]
 8026f84:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8026f86:	429a      	cmp	r2, r3
 8026f88:	d905      	bls.n	8026f96 <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8026f8a:	2301      	movs	r3, #1
 8026f8c:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8026f8e:	4b0a      	ldr	r3, [pc, #40]	; (8026fb8 <xTaskRemoveFromEventList+0xc0>)
 8026f90:	2201      	movs	r2, #1
 8026f92:	601a      	str	r2, [r3, #0]
 8026f94:	e001      	b.n	8026f9a <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 8026f96:	2300      	movs	r3, #0
 8026f98:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8026f9a:	697b      	ldr	r3, [r7, #20]
}
 8026f9c:	4618      	mov	r0, r3
 8026f9e:	3718      	adds	r7, #24
 8026fa0:	46bd      	mov	sp, r7
 8026fa2:	bd80      	pop	{r7, pc}
 8026fa4:	20005250 	.word	0x20005250
 8026fa8:	20005230 	.word	0x20005230
 8026fac:	20005078 	.word	0x20005078
 8026fb0:	200051e8 	.word	0x200051e8
 8026fb4:	20005074 	.word	0x20005074
 8026fb8:	2000523c 	.word	0x2000523c

08026fbc <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8026fbc:	b480      	push	{r7}
 8026fbe:	b083      	sub	sp, #12
 8026fc0:	af00      	add	r7, sp, #0
 8026fc2:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8026fc4:	4b06      	ldr	r3, [pc, #24]	; (8026fe0 <vTaskInternalSetTimeOutState+0x24>)
 8026fc6:	681a      	ldr	r2, [r3, #0]
 8026fc8:	687b      	ldr	r3, [r7, #4]
 8026fca:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8026fcc:	4b05      	ldr	r3, [pc, #20]	; (8026fe4 <vTaskInternalSetTimeOutState+0x28>)
 8026fce:	681a      	ldr	r2, [r3, #0]
 8026fd0:	687b      	ldr	r3, [r7, #4]
 8026fd2:	605a      	str	r2, [r3, #4]
}
 8026fd4:	bf00      	nop
 8026fd6:	370c      	adds	r7, #12
 8026fd8:	46bd      	mov	sp, r7
 8026fda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8026fde:	4770      	bx	lr
 8026fe0:	20005240 	.word	0x20005240
 8026fe4:	2000522c 	.word	0x2000522c

08026fe8 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8026fe8:	b580      	push	{r7, lr}
 8026fea:	b088      	sub	sp, #32
 8026fec:	af00      	add	r7, sp, #0
 8026fee:	6078      	str	r0, [r7, #4]
 8026ff0:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8026ff2:	687b      	ldr	r3, [r7, #4]
 8026ff4:	2b00      	cmp	r3, #0
 8026ff6:	d10a      	bne.n	802700e <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8026ff8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8026ffc:	f383 8811 	msr	BASEPRI, r3
 8027000:	f3bf 8f6f 	isb	sy
 8027004:	f3bf 8f4f 	dsb	sy
 8027008:	613b      	str	r3, [r7, #16]
}
 802700a:	bf00      	nop
 802700c:	e7fe      	b.n	802700c <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 802700e:	683b      	ldr	r3, [r7, #0]
 8027010:	2b00      	cmp	r3, #0
 8027012:	d10a      	bne.n	802702a <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8027014:	f04f 0350 	mov.w	r3, #80	; 0x50
 8027018:	f383 8811 	msr	BASEPRI, r3
 802701c:	f3bf 8f6f 	isb	sy
 8027020:	f3bf 8f4f 	dsb	sy
 8027024:	60fb      	str	r3, [r7, #12]
}
 8027026:	bf00      	nop
 8027028:	e7fe      	b.n	8027028 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 802702a:	f000 fc73 	bl	8027914 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 802702e:	4b1d      	ldr	r3, [pc, #116]	; (80270a4 <xTaskCheckForTimeOut+0xbc>)
 8027030:	681b      	ldr	r3, [r3, #0]
 8027032:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8027034:	687b      	ldr	r3, [r7, #4]
 8027036:	685b      	ldr	r3, [r3, #4]
 8027038:	69ba      	ldr	r2, [r7, #24]
 802703a:	1ad3      	subs	r3, r2, r3
 802703c:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 802703e:	683b      	ldr	r3, [r7, #0]
 8027040:	681b      	ldr	r3, [r3, #0]
 8027042:	f1b3 3fff 	cmp.w	r3, #4294967295
 8027046:	d102      	bne.n	802704e <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8027048:	2300      	movs	r3, #0
 802704a:	61fb      	str	r3, [r7, #28]
 802704c:	e023      	b.n	8027096 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 802704e:	687b      	ldr	r3, [r7, #4]
 8027050:	681a      	ldr	r2, [r3, #0]
 8027052:	4b15      	ldr	r3, [pc, #84]	; (80270a8 <xTaskCheckForTimeOut+0xc0>)
 8027054:	681b      	ldr	r3, [r3, #0]
 8027056:	429a      	cmp	r2, r3
 8027058:	d007      	beq.n	802706a <xTaskCheckForTimeOut+0x82>
 802705a:	687b      	ldr	r3, [r7, #4]
 802705c:	685b      	ldr	r3, [r3, #4]
 802705e:	69ba      	ldr	r2, [r7, #24]
 8027060:	429a      	cmp	r2, r3
 8027062:	d302      	bcc.n	802706a <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8027064:	2301      	movs	r3, #1
 8027066:	61fb      	str	r3, [r7, #28]
 8027068:	e015      	b.n	8027096 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 802706a:	683b      	ldr	r3, [r7, #0]
 802706c:	681b      	ldr	r3, [r3, #0]
 802706e:	697a      	ldr	r2, [r7, #20]
 8027070:	429a      	cmp	r2, r3
 8027072:	d20b      	bcs.n	802708c <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8027074:	683b      	ldr	r3, [r7, #0]
 8027076:	681a      	ldr	r2, [r3, #0]
 8027078:	697b      	ldr	r3, [r7, #20]
 802707a:	1ad2      	subs	r2, r2, r3
 802707c:	683b      	ldr	r3, [r7, #0]
 802707e:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8027080:	6878      	ldr	r0, [r7, #4]
 8027082:	f7ff ff9b 	bl	8026fbc <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8027086:	2300      	movs	r3, #0
 8027088:	61fb      	str	r3, [r7, #28]
 802708a:	e004      	b.n	8027096 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 802708c:	683b      	ldr	r3, [r7, #0]
 802708e:	2200      	movs	r2, #0
 8027090:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8027092:	2301      	movs	r3, #1
 8027094:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8027096:	f000 fc6d 	bl	8027974 <vPortExitCritical>

	return xReturn;
 802709a:	69fb      	ldr	r3, [r7, #28]
}
 802709c:	4618      	mov	r0, r3
 802709e:	3720      	adds	r7, #32
 80270a0:	46bd      	mov	sp, r7
 80270a2:	bd80      	pop	{r7, pc}
 80270a4:	2000522c 	.word	0x2000522c
 80270a8:	20005240 	.word	0x20005240

080270ac <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80270ac:	b480      	push	{r7}
 80270ae:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80270b0:	4b03      	ldr	r3, [pc, #12]	; (80270c0 <vTaskMissedYield+0x14>)
 80270b2:	2201      	movs	r2, #1
 80270b4:	601a      	str	r2, [r3, #0]
}
 80270b6:	bf00      	nop
 80270b8:	46bd      	mov	sp, r7
 80270ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80270be:	4770      	bx	lr
 80270c0:	2000523c 	.word	0x2000523c

080270c4 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80270c4:	b580      	push	{r7, lr}
 80270c6:	b082      	sub	sp, #8
 80270c8:	af00      	add	r7, sp, #0
 80270ca:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80270cc:	f000 f852 	bl	8027174 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80270d0:	4b06      	ldr	r3, [pc, #24]	; (80270ec <prvIdleTask+0x28>)
 80270d2:	681b      	ldr	r3, [r3, #0]
 80270d4:	2b01      	cmp	r3, #1
 80270d6:	d9f9      	bls.n	80270cc <prvIdleTask+0x8>
			{
				taskYIELD();
 80270d8:	4b05      	ldr	r3, [pc, #20]	; (80270f0 <prvIdleTask+0x2c>)
 80270da:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80270de:	601a      	str	r2, [r3, #0]
 80270e0:	f3bf 8f4f 	dsb	sy
 80270e4:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80270e8:	e7f0      	b.n	80270cc <prvIdleTask+0x8>
 80270ea:	bf00      	nop
 80270ec:	20005078 	.word	0x20005078
 80270f0:	e000ed04 	.word	0xe000ed04

080270f4 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80270f4:	b580      	push	{r7, lr}
 80270f6:	b082      	sub	sp, #8
 80270f8:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80270fa:	2300      	movs	r3, #0
 80270fc:	607b      	str	r3, [r7, #4]
 80270fe:	e00c      	b.n	802711a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8027100:	687a      	ldr	r2, [r7, #4]
 8027102:	4613      	mov	r3, r2
 8027104:	009b      	lsls	r3, r3, #2
 8027106:	4413      	add	r3, r2
 8027108:	009b      	lsls	r3, r3, #2
 802710a:	4a12      	ldr	r2, [pc, #72]	; (8027154 <prvInitialiseTaskLists+0x60>)
 802710c:	4413      	add	r3, r2
 802710e:	4618      	mov	r0, r3
 8027110:	f7fe f991 	bl	8025436 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8027114:	687b      	ldr	r3, [r7, #4]
 8027116:	3301      	adds	r3, #1
 8027118:	607b      	str	r3, [r7, #4]
 802711a:	687b      	ldr	r3, [r7, #4]
 802711c:	2b0f      	cmp	r3, #15
 802711e:	d9ef      	bls.n	8027100 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8027120:	480d      	ldr	r0, [pc, #52]	; (8027158 <prvInitialiseTaskLists+0x64>)
 8027122:	f7fe f988 	bl	8025436 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8027126:	480d      	ldr	r0, [pc, #52]	; (802715c <prvInitialiseTaskLists+0x68>)
 8027128:	f7fe f985 	bl	8025436 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 802712c:	480c      	ldr	r0, [pc, #48]	; (8027160 <prvInitialiseTaskLists+0x6c>)
 802712e:	f7fe f982 	bl	8025436 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8027132:	480c      	ldr	r0, [pc, #48]	; (8027164 <prvInitialiseTaskLists+0x70>)
 8027134:	f7fe f97f 	bl	8025436 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8027138:	480b      	ldr	r0, [pc, #44]	; (8027168 <prvInitialiseTaskLists+0x74>)
 802713a:	f7fe f97c 	bl	8025436 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 802713e:	4b0b      	ldr	r3, [pc, #44]	; (802716c <prvInitialiseTaskLists+0x78>)
 8027140:	4a05      	ldr	r2, [pc, #20]	; (8027158 <prvInitialiseTaskLists+0x64>)
 8027142:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8027144:	4b0a      	ldr	r3, [pc, #40]	; (8027170 <prvInitialiseTaskLists+0x7c>)
 8027146:	4a05      	ldr	r2, [pc, #20]	; (802715c <prvInitialiseTaskLists+0x68>)
 8027148:	601a      	str	r2, [r3, #0]
}
 802714a:	bf00      	nop
 802714c:	3708      	adds	r7, #8
 802714e:	46bd      	mov	sp, r7
 8027150:	bd80      	pop	{r7, pc}
 8027152:	bf00      	nop
 8027154:	20005078 	.word	0x20005078
 8027158:	200051b8 	.word	0x200051b8
 802715c:	200051cc 	.word	0x200051cc
 8027160:	200051e8 	.word	0x200051e8
 8027164:	200051fc 	.word	0x200051fc
 8027168:	20005214 	.word	0x20005214
 802716c:	200051e0 	.word	0x200051e0
 8027170:	200051e4 	.word	0x200051e4

08027174 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8027174:	b580      	push	{r7, lr}
 8027176:	b082      	sub	sp, #8
 8027178:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 802717a:	e019      	b.n	80271b0 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 802717c:	f000 fbca 	bl	8027914 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8027180:	4b10      	ldr	r3, [pc, #64]	; (80271c4 <prvCheckTasksWaitingTermination+0x50>)
 8027182:	68db      	ldr	r3, [r3, #12]
 8027184:	68db      	ldr	r3, [r3, #12]
 8027186:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8027188:	687b      	ldr	r3, [r7, #4]
 802718a:	3304      	adds	r3, #4
 802718c:	4618      	mov	r0, r3
 802718e:	f7fe f9dc 	bl	802554a <uxListRemove>
				--uxCurrentNumberOfTasks;
 8027192:	4b0d      	ldr	r3, [pc, #52]	; (80271c8 <prvCheckTasksWaitingTermination+0x54>)
 8027194:	681b      	ldr	r3, [r3, #0]
 8027196:	3b01      	subs	r3, #1
 8027198:	4a0b      	ldr	r2, [pc, #44]	; (80271c8 <prvCheckTasksWaitingTermination+0x54>)
 802719a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 802719c:	4b0b      	ldr	r3, [pc, #44]	; (80271cc <prvCheckTasksWaitingTermination+0x58>)
 802719e:	681b      	ldr	r3, [r3, #0]
 80271a0:	3b01      	subs	r3, #1
 80271a2:	4a0a      	ldr	r2, [pc, #40]	; (80271cc <prvCheckTasksWaitingTermination+0x58>)
 80271a4:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80271a6:	f000 fbe5 	bl	8027974 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80271aa:	6878      	ldr	r0, [r7, #4]
 80271ac:	f000 f810 	bl	80271d0 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80271b0:	4b06      	ldr	r3, [pc, #24]	; (80271cc <prvCheckTasksWaitingTermination+0x58>)
 80271b2:	681b      	ldr	r3, [r3, #0]
 80271b4:	2b00      	cmp	r3, #0
 80271b6:	d1e1      	bne.n	802717c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80271b8:	bf00      	nop
 80271ba:	bf00      	nop
 80271bc:	3708      	adds	r7, #8
 80271be:	46bd      	mov	sp, r7
 80271c0:	bd80      	pop	{r7, pc}
 80271c2:	bf00      	nop
 80271c4:	200051fc 	.word	0x200051fc
 80271c8:	20005228 	.word	0x20005228
 80271cc:	20005210 	.word	0x20005210

080271d0 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80271d0:	b580      	push	{r7, lr}
 80271d2:	b084      	sub	sp, #16
 80271d4:	af00      	add	r7, sp, #0
 80271d6:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 80271d8:	687b      	ldr	r3, [r7, #4]
 80271da:	334c      	adds	r3, #76	; 0x4c
 80271dc:	4618      	mov	r0, r3
 80271de:	f00f f83f 	bl	8036260 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80271e2:	687b      	ldr	r3, [r7, #4]
 80271e4:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 80271e8:	2b00      	cmp	r3, #0
 80271ea:	d108      	bne.n	80271fe <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80271ec:	687b      	ldr	r3, [r7, #4]
 80271ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80271f0:	4618      	mov	r0, r3
 80271f2:	f000 fd7d 	bl	8027cf0 <vPortFree>
				vPortFree( pxTCB );
 80271f6:	6878      	ldr	r0, [r7, #4]
 80271f8:	f000 fd7a 	bl	8027cf0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80271fc:	e018      	b.n	8027230 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80271fe:	687b      	ldr	r3, [r7, #4]
 8027200:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 8027204:	2b01      	cmp	r3, #1
 8027206:	d103      	bne.n	8027210 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8027208:	6878      	ldr	r0, [r7, #4]
 802720a:	f000 fd71 	bl	8027cf0 <vPortFree>
	}
 802720e:	e00f      	b.n	8027230 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8027210:	687b      	ldr	r3, [r7, #4]
 8027212:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 8027216:	2b02      	cmp	r3, #2
 8027218:	d00a      	beq.n	8027230 <prvDeleteTCB+0x60>
	__asm volatile
 802721a:	f04f 0350 	mov.w	r3, #80	; 0x50
 802721e:	f383 8811 	msr	BASEPRI, r3
 8027222:	f3bf 8f6f 	isb	sy
 8027226:	f3bf 8f4f 	dsb	sy
 802722a:	60fb      	str	r3, [r7, #12]
}
 802722c:	bf00      	nop
 802722e:	e7fe      	b.n	802722e <prvDeleteTCB+0x5e>
	}
 8027230:	bf00      	nop
 8027232:	3710      	adds	r7, #16
 8027234:	46bd      	mov	sp, r7
 8027236:	bd80      	pop	{r7, pc}

08027238 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8027238:	b480      	push	{r7}
 802723a:	b083      	sub	sp, #12
 802723c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 802723e:	4b0c      	ldr	r3, [pc, #48]	; (8027270 <prvResetNextTaskUnblockTime+0x38>)
 8027240:	681b      	ldr	r3, [r3, #0]
 8027242:	681b      	ldr	r3, [r3, #0]
 8027244:	2b00      	cmp	r3, #0
 8027246:	d104      	bne.n	8027252 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8027248:	4b0a      	ldr	r3, [pc, #40]	; (8027274 <prvResetNextTaskUnblockTime+0x3c>)
 802724a:	f04f 32ff 	mov.w	r2, #4294967295
 802724e:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8027250:	e008      	b.n	8027264 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8027252:	4b07      	ldr	r3, [pc, #28]	; (8027270 <prvResetNextTaskUnblockTime+0x38>)
 8027254:	681b      	ldr	r3, [r3, #0]
 8027256:	68db      	ldr	r3, [r3, #12]
 8027258:	68db      	ldr	r3, [r3, #12]
 802725a:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 802725c:	687b      	ldr	r3, [r7, #4]
 802725e:	685b      	ldr	r3, [r3, #4]
 8027260:	4a04      	ldr	r2, [pc, #16]	; (8027274 <prvResetNextTaskUnblockTime+0x3c>)
 8027262:	6013      	str	r3, [r2, #0]
}
 8027264:	bf00      	nop
 8027266:	370c      	adds	r7, #12
 8027268:	46bd      	mov	sp, r7
 802726a:	f85d 7b04 	ldr.w	r7, [sp], #4
 802726e:	4770      	bx	lr
 8027270:	200051e0 	.word	0x200051e0
 8027274:	20005248 	.word	0x20005248

08027278 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8027278:	b480      	push	{r7}
 802727a:	b083      	sub	sp, #12
 802727c:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 802727e:	4b0b      	ldr	r3, [pc, #44]	; (80272ac <xTaskGetSchedulerState+0x34>)
 8027280:	681b      	ldr	r3, [r3, #0]
 8027282:	2b00      	cmp	r3, #0
 8027284:	d102      	bne.n	802728c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8027286:	2301      	movs	r3, #1
 8027288:	607b      	str	r3, [r7, #4]
 802728a:	e008      	b.n	802729e <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 802728c:	4b08      	ldr	r3, [pc, #32]	; (80272b0 <xTaskGetSchedulerState+0x38>)
 802728e:	681b      	ldr	r3, [r3, #0]
 8027290:	2b00      	cmp	r3, #0
 8027292:	d102      	bne.n	802729a <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8027294:	2302      	movs	r3, #2
 8027296:	607b      	str	r3, [r7, #4]
 8027298:	e001      	b.n	802729e <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 802729a:	2300      	movs	r3, #0
 802729c:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 802729e:	687b      	ldr	r3, [r7, #4]
	}
 80272a0:	4618      	mov	r0, r3
 80272a2:	370c      	adds	r7, #12
 80272a4:	46bd      	mov	sp, r7
 80272a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80272aa:	4770      	bx	lr
 80272ac:	20005234 	.word	0x20005234
 80272b0:	20005250 	.word	0x20005250

080272b4 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 80272b4:	b580      	push	{r7, lr}
 80272b6:	b084      	sub	sp, #16
 80272b8:	af00      	add	r7, sp, #0
 80272ba:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 80272bc:	687b      	ldr	r3, [r7, #4]
 80272be:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 80272c0:	2300      	movs	r3, #0
 80272c2:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 80272c4:	687b      	ldr	r3, [r7, #4]
 80272c6:	2b00      	cmp	r3, #0
 80272c8:	d05e      	beq.n	8027388 <xTaskPriorityInherit+0xd4>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 80272ca:	68bb      	ldr	r3, [r7, #8]
 80272cc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80272ce:	4b31      	ldr	r3, [pc, #196]	; (8027394 <xTaskPriorityInherit+0xe0>)
 80272d0:	681b      	ldr	r3, [r3, #0]
 80272d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80272d4:	429a      	cmp	r2, r3
 80272d6:	d24e      	bcs.n	8027376 <xTaskPriorityInherit+0xc2>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80272d8:	68bb      	ldr	r3, [r7, #8]
 80272da:	699b      	ldr	r3, [r3, #24]
 80272dc:	2b00      	cmp	r3, #0
 80272de:	db06      	blt.n	80272ee <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80272e0:	4b2c      	ldr	r3, [pc, #176]	; (8027394 <xTaskPriorityInherit+0xe0>)
 80272e2:	681b      	ldr	r3, [r3, #0]
 80272e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80272e6:	f1c3 0210 	rsb	r2, r3, #16
 80272ea:	68bb      	ldr	r3, [r7, #8]
 80272ec:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 80272ee:	68bb      	ldr	r3, [r7, #8]
 80272f0:	6959      	ldr	r1, [r3, #20]
 80272f2:	68bb      	ldr	r3, [r7, #8]
 80272f4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80272f6:	4613      	mov	r3, r2
 80272f8:	009b      	lsls	r3, r3, #2
 80272fa:	4413      	add	r3, r2
 80272fc:	009b      	lsls	r3, r3, #2
 80272fe:	4a26      	ldr	r2, [pc, #152]	; (8027398 <xTaskPriorityInherit+0xe4>)
 8027300:	4413      	add	r3, r2
 8027302:	4299      	cmp	r1, r3
 8027304:	d12f      	bne.n	8027366 <xTaskPriorityInherit+0xb2>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8027306:	68bb      	ldr	r3, [r7, #8]
 8027308:	3304      	adds	r3, #4
 802730a:	4618      	mov	r0, r3
 802730c:	f7fe f91d 	bl	802554a <uxListRemove>
 8027310:	4603      	mov	r3, r0
 8027312:	2b00      	cmp	r3, #0
 8027314:	d10a      	bne.n	802732c <xTaskPriorityInherit+0x78>
					{
						/* It is known that the task is in its ready list so
						there is no need to check again and the port level
						reset macro can be called directly. */
						portRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority, uxTopReadyPriority );
 8027316:	68bb      	ldr	r3, [r7, #8]
 8027318:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 802731a:	2201      	movs	r2, #1
 802731c:	fa02 f303 	lsl.w	r3, r2, r3
 8027320:	43da      	mvns	r2, r3
 8027322:	4b1e      	ldr	r3, [pc, #120]	; (802739c <xTaskPriorityInherit+0xe8>)
 8027324:	681b      	ldr	r3, [r3, #0]
 8027326:	4013      	ands	r3, r2
 8027328:	4a1c      	ldr	r2, [pc, #112]	; (802739c <xTaskPriorityInherit+0xe8>)
 802732a:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 802732c:	4b19      	ldr	r3, [pc, #100]	; (8027394 <xTaskPriorityInherit+0xe0>)
 802732e:	681b      	ldr	r3, [r3, #0]
 8027330:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8027332:	68bb      	ldr	r3, [r7, #8]
 8027334:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8027336:	68bb      	ldr	r3, [r7, #8]
 8027338:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 802733a:	2201      	movs	r2, #1
 802733c:	409a      	lsls	r2, r3
 802733e:	4b17      	ldr	r3, [pc, #92]	; (802739c <xTaskPriorityInherit+0xe8>)
 8027340:	681b      	ldr	r3, [r3, #0]
 8027342:	4313      	orrs	r3, r2
 8027344:	4a15      	ldr	r2, [pc, #84]	; (802739c <xTaskPriorityInherit+0xe8>)
 8027346:	6013      	str	r3, [r2, #0]
 8027348:	68bb      	ldr	r3, [r7, #8]
 802734a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 802734c:	4613      	mov	r3, r2
 802734e:	009b      	lsls	r3, r3, #2
 8027350:	4413      	add	r3, r2
 8027352:	009b      	lsls	r3, r3, #2
 8027354:	4a10      	ldr	r2, [pc, #64]	; (8027398 <xTaskPriorityInherit+0xe4>)
 8027356:	441a      	add	r2, r3
 8027358:	68bb      	ldr	r3, [r7, #8]
 802735a:	3304      	adds	r3, #4
 802735c:	4619      	mov	r1, r3
 802735e:	4610      	mov	r0, r2
 8027360:	f7fe f896 	bl	8025490 <vListInsertEnd>
 8027364:	e004      	b.n	8027370 <xTaskPriorityInherit+0xbc>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8027366:	4b0b      	ldr	r3, [pc, #44]	; (8027394 <xTaskPriorityInherit+0xe0>)
 8027368:	681b      	ldr	r3, [r3, #0]
 802736a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 802736c:	68bb      	ldr	r3, [r7, #8]
 802736e:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8027370:	2301      	movs	r3, #1
 8027372:	60fb      	str	r3, [r7, #12]
 8027374:	e008      	b.n	8027388 <xTaskPriorityInherit+0xd4>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8027376:	68bb      	ldr	r3, [r7, #8]
 8027378:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 802737a:	4b06      	ldr	r3, [pc, #24]	; (8027394 <xTaskPriorityInherit+0xe0>)
 802737c:	681b      	ldr	r3, [r3, #0]
 802737e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8027380:	429a      	cmp	r2, r3
 8027382:	d201      	bcs.n	8027388 <xTaskPriorityInherit+0xd4>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8027384:	2301      	movs	r3, #1
 8027386:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8027388:	68fb      	ldr	r3, [r7, #12]
	}
 802738a:	4618      	mov	r0, r3
 802738c:	3710      	adds	r7, #16
 802738e:	46bd      	mov	sp, r7
 8027390:	bd80      	pop	{r7, pc}
 8027392:	bf00      	nop
 8027394:	20005074 	.word	0x20005074
 8027398:	20005078 	.word	0x20005078
 802739c:	20005230 	.word	0x20005230

080273a0 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80273a0:	b580      	push	{r7, lr}
 80273a2:	b086      	sub	sp, #24
 80273a4:	af00      	add	r7, sp, #0
 80273a6:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 80273a8:	687b      	ldr	r3, [r7, #4]
 80273aa:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 80273ac:	2300      	movs	r3, #0
 80273ae:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80273b0:	687b      	ldr	r3, [r7, #4]
 80273b2:	2b00      	cmp	r3, #0
 80273b4:	d06e      	beq.n	8027494 <xTaskPriorityDisinherit+0xf4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80273b6:	4b3a      	ldr	r3, [pc, #232]	; (80274a0 <xTaskPriorityDisinherit+0x100>)
 80273b8:	681b      	ldr	r3, [r3, #0]
 80273ba:	693a      	ldr	r2, [r7, #16]
 80273bc:	429a      	cmp	r2, r3
 80273be:	d00a      	beq.n	80273d6 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 80273c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80273c4:	f383 8811 	msr	BASEPRI, r3
 80273c8:	f3bf 8f6f 	isb	sy
 80273cc:	f3bf 8f4f 	dsb	sy
 80273d0:	60fb      	str	r3, [r7, #12]
}
 80273d2:	bf00      	nop
 80273d4:	e7fe      	b.n	80273d4 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 80273d6:	693b      	ldr	r3, [r7, #16]
 80273d8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80273da:	2b00      	cmp	r3, #0
 80273dc:	d10a      	bne.n	80273f4 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 80273de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80273e2:	f383 8811 	msr	BASEPRI, r3
 80273e6:	f3bf 8f6f 	isb	sy
 80273ea:	f3bf 8f4f 	dsb	sy
 80273ee:	60bb      	str	r3, [r7, #8]
}
 80273f0:	bf00      	nop
 80273f2:	e7fe      	b.n	80273f2 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 80273f4:	693b      	ldr	r3, [r7, #16]
 80273f6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80273f8:	1e5a      	subs	r2, r3, #1
 80273fa:	693b      	ldr	r3, [r7, #16]
 80273fc:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80273fe:	693b      	ldr	r3, [r7, #16]
 8027400:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8027402:	693b      	ldr	r3, [r7, #16]
 8027404:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8027406:	429a      	cmp	r2, r3
 8027408:	d044      	beq.n	8027494 <xTaskPriorityDisinherit+0xf4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 802740a:	693b      	ldr	r3, [r7, #16]
 802740c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 802740e:	2b00      	cmp	r3, #0
 8027410:	d140      	bne.n	8027494 <xTaskPriorityDisinherit+0xf4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8027412:	693b      	ldr	r3, [r7, #16]
 8027414:	3304      	adds	r3, #4
 8027416:	4618      	mov	r0, r3
 8027418:	f7fe f897 	bl	802554a <uxListRemove>
 802741c:	4603      	mov	r3, r0
 802741e:	2b00      	cmp	r3, #0
 8027420:	d115      	bne.n	802744e <xTaskPriorityDisinherit+0xae>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8027422:	693b      	ldr	r3, [r7, #16]
 8027424:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8027426:	491f      	ldr	r1, [pc, #124]	; (80274a4 <xTaskPriorityDisinherit+0x104>)
 8027428:	4613      	mov	r3, r2
 802742a:	009b      	lsls	r3, r3, #2
 802742c:	4413      	add	r3, r2
 802742e:	009b      	lsls	r3, r3, #2
 8027430:	440b      	add	r3, r1
 8027432:	681b      	ldr	r3, [r3, #0]
 8027434:	2b00      	cmp	r3, #0
 8027436:	d10a      	bne.n	802744e <xTaskPriorityDisinherit+0xae>
 8027438:	693b      	ldr	r3, [r7, #16]
 802743a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 802743c:	2201      	movs	r2, #1
 802743e:	fa02 f303 	lsl.w	r3, r2, r3
 8027442:	43da      	mvns	r2, r3
 8027444:	4b18      	ldr	r3, [pc, #96]	; (80274a8 <xTaskPriorityDisinherit+0x108>)
 8027446:	681b      	ldr	r3, [r3, #0]
 8027448:	4013      	ands	r3, r2
 802744a:	4a17      	ldr	r2, [pc, #92]	; (80274a8 <xTaskPriorityDisinherit+0x108>)
 802744c:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 802744e:	693b      	ldr	r3, [r7, #16]
 8027450:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8027452:	693b      	ldr	r3, [r7, #16]
 8027454:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8027456:	693b      	ldr	r3, [r7, #16]
 8027458:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 802745a:	f1c3 0210 	rsb	r2, r3, #16
 802745e:	693b      	ldr	r3, [r7, #16]
 8027460:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8027462:	693b      	ldr	r3, [r7, #16]
 8027464:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8027466:	2201      	movs	r2, #1
 8027468:	409a      	lsls	r2, r3
 802746a:	4b0f      	ldr	r3, [pc, #60]	; (80274a8 <xTaskPriorityDisinherit+0x108>)
 802746c:	681b      	ldr	r3, [r3, #0]
 802746e:	4313      	orrs	r3, r2
 8027470:	4a0d      	ldr	r2, [pc, #52]	; (80274a8 <xTaskPriorityDisinherit+0x108>)
 8027472:	6013      	str	r3, [r2, #0]
 8027474:	693b      	ldr	r3, [r7, #16]
 8027476:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8027478:	4613      	mov	r3, r2
 802747a:	009b      	lsls	r3, r3, #2
 802747c:	4413      	add	r3, r2
 802747e:	009b      	lsls	r3, r3, #2
 8027480:	4a08      	ldr	r2, [pc, #32]	; (80274a4 <xTaskPriorityDisinherit+0x104>)
 8027482:	441a      	add	r2, r3
 8027484:	693b      	ldr	r3, [r7, #16]
 8027486:	3304      	adds	r3, #4
 8027488:	4619      	mov	r1, r3
 802748a:	4610      	mov	r0, r2
 802748c:	f7fe f800 	bl	8025490 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8027490:	2301      	movs	r3, #1
 8027492:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8027494:	697b      	ldr	r3, [r7, #20]
	}
 8027496:	4618      	mov	r0, r3
 8027498:	3718      	adds	r7, #24
 802749a:	46bd      	mov	sp, r7
 802749c:	bd80      	pop	{r7, pc}
 802749e:	bf00      	nop
 80274a0:	20005074 	.word	0x20005074
 80274a4:	20005078 	.word	0x20005078
 80274a8:	20005230 	.word	0x20005230

080274ac <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 80274ac:	b580      	push	{r7, lr}
 80274ae:	b088      	sub	sp, #32
 80274b0:	af00      	add	r7, sp, #0
 80274b2:	6078      	str	r0, [r7, #4]
 80274b4:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 80274b6:	687b      	ldr	r3, [r7, #4]
 80274b8:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 80274ba:	2301      	movs	r3, #1
 80274bc:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80274be:	687b      	ldr	r3, [r7, #4]
 80274c0:	2b00      	cmp	r3, #0
 80274c2:	d077      	beq.n	80275b4 <vTaskPriorityDisinheritAfterTimeout+0x108>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 80274c4:	69bb      	ldr	r3, [r7, #24]
 80274c6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80274c8:	2b00      	cmp	r3, #0
 80274ca:	d10a      	bne.n	80274e2 <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 80274cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80274d0:	f383 8811 	msr	BASEPRI, r3
 80274d4:	f3bf 8f6f 	isb	sy
 80274d8:	f3bf 8f4f 	dsb	sy
 80274dc:	60fb      	str	r3, [r7, #12]
}
 80274de:	bf00      	nop
 80274e0:	e7fe      	b.n	80274e0 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 80274e2:	69bb      	ldr	r3, [r7, #24]
 80274e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80274e6:	683a      	ldr	r2, [r7, #0]
 80274e8:	429a      	cmp	r2, r3
 80274ea:	d902      	bls.n	80274f2 <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 80274ec:	683b      	ldr	r3, [r7, #0]
 80274ee:	61fb      	str	r3, [r7, #28]
 80274f0:	e002      	b.n	80274f8 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 80274f2:	69bb      	ldr	r3, [r7, #24]
 80274f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80274f6:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 80274f8:	69bb      	ldr	r3, [r7, #24]
 80274fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80274fc:	69fa      	ldr	r2, [r7, #28]
 80274fe:	429a      	cmp	r2, r3
 8027500:	d058      	beq.n	80275b4 <vTaskPriorityDisinheritAfterTimeout+0x108>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8027502:	69bb      	ldr	r3, [r7, #24]
 8027504:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8027506:	697a      	ldr	r2, [r7, #20]
 8027508:	429a      	cmp	r2, r3
 802750a:	d153      	bne.n	80275b4 <vTaskPriorityDisinheritAfterTimeout+0x108>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 802750c:	4b2b      	ldr	r3, [pc, #172]	; (80275bc <vTaskPriorityDisinheritAfterTimeout+0x110>)
 802750e:	681b      	ldr	r3, [r3, #0]
 8027510:	69ba      	ldr	r2, [r7, #24]
 8027512:	429a      	cmp	r2, r3
 8027514:	d10a      	bne.n	802752c <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 8027516:	f04f 0350 	mov.w	r3, #80	; 0x50
 802751a:	f383 8811 	msr	BASEPRI, r3
 802751e:	f3bf 8f6f 	isb	sy
 8027522:	f3bf 8f4f 	dsb	sy
 8027526:	60bb      	str	r3, [r7, #8]
}
 8027528:	bf00      	nop
 802752a:	e7fe      	b.n	802752a <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 802752c:	69bb      	ldr	r3, [r7, #24]
 802752e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8027530:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8027532:	69bb      	ldr	r3, [r7, #24]
 8027534:	69fa      	ldr	r2, [r7, #28]
 8027536:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8027538:	69bb      	ldr	r3, [r7, #24]
 802753a:	699b      	ldr	r3, [r3, #24]
 802753c:	2b00      	cmp	r3, #0
 802753e:	db04      	blt.n	802754a <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8027540:	69fb      	ldr	r3, [r7, #28]
 8027542:	f1c3 0210 	rsb	r2, r3, #16
 8027546:	69bb      	ldr	r3, [r7, #24]
 8027548:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 802754a:	69bb      	ldr	r3, [r7, #24]
 802754c:	6959      	ldr	r1, [r3, #20]
 802754e:	693a      	ldr	r2, [r7, #16]
 8027550:	4613      	mov	r3, r2
 8027552:	009b      	lsls	r3, r3, #2
 8027554:	4413      	add	r3, r2
 8027556:	009b      	lsls	r3, r3, #2
 8027558:	4a19      	ldr	r2, [pc, #100]	; (80275c0 <vTaskPriorityDisinheritAfterTimeout+0x114>)
 802755a:	4413      	add	r3, r2
 802755c:	4299      	cmp	r1, r3
 802755e:	d129      	bne.n	80275b4 <vTaskPriorityDisinheritAfterTimeout+0x108>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8027560:	69bb      	ldr	r3, [r7, #24]
 8027562:	3304      	adds	r3, #4
 8027564:	4618      	mov	r0, r3
 8027566:	f7fd fff0 	bl	802554a <uxListRemove>
 802756a:	4603      	mov	r3, r0
 802756c:	2b00      	cmp	r3, #0
 802756e:	d10a      	bne.n	8027586 <vTaskPriorityDisinheritAfterTimeout+0xda>
						{
							/* It is known that the task is in its ready list so
							there is no need to check again and the port level
							reset macro can be called directly. */
							portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 8027570:	69bb      	ldr	r3, [r7, #24]
 8027572:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8027574:	2201      	movs	r2, #1
 8027576:	fa02 f303 	lsl.w	r3, r2, r3
 802757a:	43da      	mvns	r2, r3
 802757c:	4b11      	ldr	r3, [pc, #68]	; (80275c4 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 802757e:	681b      	ldr	r3, [r3, #0]
 8027580:	4013      	ands	r3, r2
 8027582:	4a10      	ldr	r2, [pc, #64]	; (80275c4 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 8027584:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8027586:	69bb      	ldr	r3, [r7, #24]
 8027588:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 802758a:	2201      	movs	r2, #1
 802758c:	409a      	lsls	r2, r3
 802758e:	4b0d      	ldr	r3, [pc, #52]	; (80275c4 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 8027590:	681b      	ldr	r3, [r3, #0]
 8027592:	4313      	orrs	r3, r2
 8027594:	4a0b      	ldr	r2, [pc, #44]	; (80275c4 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 8027596:	6013      	str	r3, [r2, #0]
 8027598:	69bb      	ldr	r3, [r7, #24]
 802759a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 802759c:	4613      	mov	r3, r2
 802759e:	009b      	lsls	r3, r3, #2
 80275a0:	4413      	add	r3, r2
 80275a2:	009b      	lsls	r3, r3, #2
 80275a4:	4a06      	ldr	r2, [pc, #24]	; (80275c0 <vTaskPriorityDisinheritAfterTimeout+0x114>)
 80275a6:	441a      	add	r2, r3
 80275a8:	69bb      	ldr	r3, [r7, #24]
 80275aa:	3304      	adds	r3, #4
 80275ac:	4619      	mov	r1, r3
 80275ae:	4610      	mov	r0, r2
 80275b0:	f7fd ff6e 	bl	8025490 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80275b4:	bf00      	nop
 80275b6:	3720      	adds	r7, #32
 80275b8:	46bd      	mov	sp, r7
 80275ba:	bd80      	pop	{r7, pc}
 80275bc:	20005074 	.word	0x20005074
 80275c0:	20005078 	.word	0x20005078
 80275c4:	20005230 	.word	0x20005230

080275c8 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 80275c8:	b480      	push	{r7}
 80275ca:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 80275cc:	4b07      	ldr	r3, [pc, #28]	; (80275ec <pvTaskIncrementMutexHeldCount+0x24>)
 80275ce:	681b      	ldr	r3, [r3, #0]
 80275d0:	2b00      	cmp	r3, #0
 80275d2:	d004      	beq.n	80275de <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 80275d4:	4b05      	ldr	r3, [pc, #20]	; (80275ec <pvTaskIncrementMutexHeldCount+0x24>)
 80275d6:	681b      	ldr	r3, [r3, #0]
 80275d8:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80275da:	3201      	adds	r2, #1
 80275dc:	649a      	str	r2, [r3, #72]	; 0x48
		}

		return pxCurrentTCB;
 80275de:	4b03      	ldr	r3, [pc, #12]	; (80275ec <pvTaskIncrementMutexHeldCount+0x24>)
 80275e0:	681b      	ldr	r3, [r3, #0]
	}
 80275e2:	4618      	mov	r0, r3
 80275e4:	46bd      	mov	sp, r7
 80275e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80275ea:	4770      	bx	lr
 80275ec:	20005074 	.word	0x20005074

080275f0 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80275f0:	b580      	push	{r7, lr}
 80275f2:	b084      	sub	sp, #16
 80275f4:	af00      	add	r7, sp, #0
 80275f6:	6078      	str	r0, [r7, #4]
 80275f8:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80275fa:	4b29      	ldr	r3, [pc, #164]	; (80276a0 <prvAddCurrentTaskToDelayedList+0xb0>)
 80275fc:	681b      	ldr	r3, [r3, #0]
 80275fe:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8027600:	4b28      	ldr	r3, [pc, #160]	; (80276a4 <prvAddCurrentTaskToDelayedList+0xb4>)
 8027602:	681b      	ldr	r3, [r3, #0]
 8027604:	3304      	adds	r3, #4
 8027606:	4618      	mov	r0, r3
 8027608:	f7fd ff9f 	bl	802554a <uxListRemove>
 802760c:	4603      	mov	r3, r0
 802760e:	2b00      	cmp	r3, #0
 8027610:	d10b      	bne.n	802762a <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8027612:	4b24      	ldr	r3, [pc, #144]	; (80276a4 <prvAddCurrentTaskToDelayedList+0xb4>)
 8027614:	681b      	ldr	r3, [r3, #0]
 8027616:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8027618:	2201      	movs	r2, #1
 802761a:	fa02 f303 	lsl.w	r3, r2, r3
 802761e:	43da      	mvns	r2, r3
 8027620:	4b21      	ldr	r3, [pc, #132]	; (80276a8 <prvAddCurrentTaskToDelayedList+0xb8>)
 8027622:	681b      	ldr	r3, [r3, #0]
 8027624:	4013      	ands	r3, r2
 8027626:	4a20      	ldr	r2, [pc, #128]	; (80276a8 <prvAddCurrentTaskToDelayedList+0xb8>)
 8027628:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 802762a:	687b      	ldr	r3, [r7, #4]
 802762c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8027630:	d10a      	bne.n	8027648 <prvAddCurrentTaskToDelayedList+0x58>
 8027632:	683b      	ldr	r3, [r7, #0]
 8027634:	2b00      	cmp	r3, #0
 8027636:	d007      	beq.n	8027648 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8027638:	4b1a      	ldr	r3, [pc, #104]	; (80276a4 <prvAddCurrentTaskToDelayedList+0xb4>)
 802763a:	681b      	ldr	r3, [r3, #0]
 802763c:	3304      	adds	r3, #4
 802763e:	4619      	mov	r1, r3
 8027640:	481a      	ldr	r0, [pc, #104]	; (80276ac <prvAddCurrentTaskToDelayedList+0xbc>)
 8027642:	f7fd ff25 	bl	8025490 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8027646:	e026      	b.n	8027696 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8027648:	68fa      	ldr	r2, [r7, #12]
 802764a:	687b      	ldr	r3, [r7, #4]
 802764c:	4413      	add	r3, r2
 802764e:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8027650:	4b14      	ldr	r3, [pc, #80]	; (80276a4 <prvAddCurrentTaskToDelayedList+0xb4>)
 8027652:	681b      	ldr	r3, [r3, #0]
 8027654:	68ba      	ldr	r2, [r7, #8]
 8027656:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8027658:	68ba      	ldr	r2, [r7, #8]
 802765a:	68fb      	ldr	r3, [r7, #12]
 802765c:	429a      	cmp	r2, r3
 802765e:	d209      	bcs.n	8027674 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8027660:	4b13      	ldr	r3, [pc, #76]	; (80276b0 <prvAddCurrentTaskToDelayedList+0xc0>)
 8027662:	681a      	ldr	r2, [r3, #0]
 8027664:	4b0f      	ldr	r3, [pc, #60]	; (80276a4 <prvAddCurrentTaskToDelayedList+0xb4>)
 8027666:	681b      	ldr	r3, [r3, #0]
 8027668:	3304      	adds	r3, #4
 802766a:	4619      	mov	r1, r3
 802766c:	4610      	mov	r0, r2
 802766e:	f7fd ff33 	bl	80254d8 <vListInsert>
}
 8027672:	e010      	b.n	8027696 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8027674:	4b0f      	ldr	r3, [pc, #60]	; (80276b4 <prvAddCurrentTaskToDelayedList+0xc4>)
 8027676:	681a      	ldr	r2, [r3, #0]
 8027678:	4b0a      	ldr	r3, [pc, #40]	; (80276a4 <prvAddCurrentTaskToDelayedList+0xb4>)
 802767a:	681b      	ldr	r3, [r3, #0]
 802767c:	3304      	adds	r3, #4
 802767e:	4619      	mov	r1, r3
 8027680:	4610      	mov	r0, r2
 8027682:	f7fd ff29 	bl	80254d8 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8027686:	4b0c      	ldr	r3, [pc, #48]	; (80276b8 <prvAddCurrentTaskToDelayedList+0xc8>)
 8027688:	681b      	ldr	r3, [r3, #0]
 802768a:	68ba      	ldr	r2, [r7, #8]
 802768c:	429a      	cmp	r2, r3
 802768e:	d202      	bcs.n	8027696 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8027690:	4a09      	ldr	r2, [pc, #36]	; (80276b8 <prvAddCurrentTaskToDelayedList+0xc8>)
 8027692:	68bb      	ldr	r3, [r7, #8]
 8027694:	6013      	str	r3, [r2, #0]
}
 8027696:	bf00      	nop
 8027698:	3710      	adds	r7, #16
 802769a:	46bd      	mov	sp, r7
 802769c:	bd80      	pop	{r7, pc}
 802769e:	bf00      	nop
 80276a0:	2000522c 	.word	0x2000522c
 80276a4:	20005074 	.word	0x20005074
 80276a8:	20005230 	.word	0x20005230
 80276ac:	20005214 	.word	0x20005214
 80276b0:	200051e4 	.word	0x200051e4
 80276b4:	200051e0 	.word	0x200051e0
 80276b8:	20005248 	.word	0x20005248

080276bc <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80276bc:	b480      	push	{r7}
 80276be:	b085      	sub	sp, #20
 80276c0:	af00      	add	r7, sp, #0
 80276c2:	60f8      	str	r0, [r7, #12]
 80276c4:	60b9      	str	r1, [r7, #8]
 80276c6:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 80276c8:	68fb      	ldr	r3, [r7, #12]
 80276ca:	3b04      	subs	r3, #4
 80276cc:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80276ce:	68fb      	ldr	r3, [r7, #12]
 80276d0:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80276d4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80276d6:	68fb      	ldr	r3, [r7, #12]
 80276d8:	3b04      	subs	r3, #4
 80276da:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80276dc:	68bb      	ldr	r3, [r7, #8]
 80276de:	f023 0201 	bic.w	r2, r3, #1
 80276e2:	68fb      	ldr	r3, [r7, #12]
 80276e4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80276e6:	68fb      	ldr	r3, [r7, #12]
 80276e8:	3b04      	subs	r3, #4
 80276ea:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80276ec:	4a0c      	ldr	r2, [pc, #48]	; (8027720 <pxPortInitialiseStack+0x64>)
 80276ee:	68fb      	ldr	r3, [r7, #12]
 80276f0:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80276f2:	68fb      	ldr	r3, [r7, #12]
 80276f4:	3b14      	subs	r3, #20
 80276f6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80276f8:	687a      	ldr	r2, [r7, #4]
 80276fa:	68fb      	ldr	r3, [r7, #12]
 80276fc:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80276fe:	68fb      	ldr	r3, [r7, #12]
 8027700:	3b04      	subs	r3, #4
 8027702:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8027704:	68fb      	ldr	r3, [r7, #12]
 8027706:	f06f 0202 	mvn.w	r2, #2
 802770a:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 802770c:	68fb      	ldr	r3, [r7, #12]
 802770e:	3b20      	subs	r3, #32
 8027710:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8027712:	68fb      	ldr	r3, [r7, #12]
}
 8027714:	4618      	mov	r0, r3
 8027716:	3714      	adds	r7, #20
 8027718:	46bd      	mov	sp, r7
 802771a:	f85d 7b04 	ldr.w	r7, [sp], #4
 802771e:	4770      	bx	lr
 8027720:	08027725 	.word	0x08027725

08027724 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8027724:	b480      	push	{r7}
 8027726:	b085      	sub	sp, #20
 8027728:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 802772a:	2300      	movs	r3, #0
 802772c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 802772e:	4b12      	ldr	r3, [pc, #72]	; (8027778 <prvTaskExitError+0x54>)
 8027730:	681b      	ldr	r3, [r3, #0]
 8027732:	f1b3 3fff 	cmp.w	r3, #4294967295
 8027736:	d00a      	beq.n	802774e <prvTaskExitError+0x2a>
	__asm volatile
 8027738:	f04f 0350 	mov.w	r3, #80	; 0x50
 802773c:	f383 8811 	msr	BASEPRI, r3
 8027740:	f3bf 8f6f 	isb	sy
 8027744:	f3bf 8f4f 	dsb	sy
 8027748:	60fb      	str	r3, [r7, #12]
}
 802774a:	bf00      	nop
 802774c:	e7fe      	b.n	802774c <prvTaskExitError+0x28>
	__asm volatile
 802774e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8027752:	f383 8811 	msr	BASEPRI, r3
 8027756:	f3bf 8f6f 	isb	sy
 802775a:	f3bf 8f4f 	dsb	sy
 802775e:	60bb      	str	r3, [r7, #8]
}
 8027760:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8027762:	bf00      	nop
 8027764:	687b      	ldr	r3, [r7, #4]
 8027766:	2b00      	cmp	r3, #0
 8027768:	d0fc      	beq.n	8027764 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 802776a:	bf00      	nop
 802776c:	bf00      	nop
 802776e:	3714      	adds	r7, #20
 8027770:	46bd      	mov	sp, r7
 8027772:	f85d 7b04 	ldr.w	r7, [sp], #4
 8027776:	4770      	bx	lr
 8027778:	20000024 	.word	0x20000024
 802777c:	00000000 	.word	0x00000000

08027780 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8027780:	4b07      	ldr	r3, [pc, #28]	; (80277a0 <pxCurrentTCBConst2>)
 8027782:	6819      	ldr	r1, [r3, #0]
 8027784:	6808      	ldr	r0, [r1, #0]
 8027786:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802778a:	f380 8809 	msr	PSP, r0
 802778e:	f3bf 8f6f 	isb	sy
 8027792:	f04f 0000 	mov.w	r0, #0
 8027796:	f380 8811 	msr	BASEPRI, r0
 802779a:	4770      	bx	lr
 802779c:	f3af 8000 	nop.w

080277a0 <pxCurrentTCBConst2>:
 80277a0:	20005074 	.word	0x20005074
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80277a4:	bf00      	nop
 80277a6:	bf00      	nop

080277a8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80277a8:	4808      	ldr	r0, [pc, #32]	; (80277cc <prvPortStartFirstTask+0x24>)
 80277aa:	6800      	ldr	r0, [r0, #0]
 80277ac:	6800      	ldr	r0, [r0, #0]
 80277ae:	f380 8808 	msr	MSP, r0
 80277b2:	f04f 0000 	mov.w	r0, #0
 80277b6:	f380 8814 	msr	CONTROL, r0
 80277ba:	b662      	cpsie	i
 80277bc:	b661      	cpsie	f
 80277be:	f3bf 8f4f 	dsb	sy
 80277c2:	f3bf 8f6f 	isb	sy
 80277c6:	df00      	svc	0
 80277c8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80277ca:	bf00      	nop
 80277cc:	e000ed08 	.word	0xe000ed08

080277d0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80277d0:	b580      	push	{r7, lr}
 80277d2:	b086      	sub	sp, #24
 80277d4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80277d6:	4b46      	ldr	r3, [pc, #280]	; (80278f0 <xPortStartScheduler+0x120>)
 80277d8:	681b      	ldr	r3, [r3, #0]
 80277da:	4a46      	ldr	r2, [pc, #280]	; (80278f4 <xPortStartScheduler+0x124>)
 80277dc:	4293      	cmp	r3, r2
 80277de:	d10a      	bne.n	80277f6 <xPortStartScheduler+0x26>
	__asm volatile
 80277e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80277e4:	f383 8811 	msr	BASEPRI, r3
 80277e8:	f3bf 8f6f 	isb	sy
 80277ec:	f3bf 8f4f 	dsb	sy
 80277f0:	613b      	str	r3, [r7, #16]
}
 80277f2:	bf00      	nop
 80277f4:	e7fe      	b.n	80277f4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80277f6:	4b3e      	ldr	r3, [pc, #248]	; (80278f0 <xPortStartScheduler+0x120>)
 80277f8:	681b      	ldr	r3, [r3, #0]
 80277fa:	4a3f      	ldr	r2, [pc, #252]	; (80278f8 <xPortStartScheduler+0x128>)
 80277fc:	4293      	cmp	r3, r2
 80277fe:	d10a      	bne.n	8027816 <xPortStartScheduler+0x46>
	__asm volatile
 8027800:	f04f 0350 	mov.w	r3, #80	; 0x50
 8027804:	f383 8811 	msr	BASEPRI, r3
 8027808:	f3bf 8f6f 	isb	sy
 802780c:	f3bf 8f4f 	dsb	sy
 8027810:	60fb      	str	r3, [r7, #12]
}
 8027812:	bf00      	nop
 8027814:	e7fe      	b.n	8027814 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8027816:	4b39      	ldr	r3, [pc, #228]	; (80278fc <xPortStartScheduler+0x12c>)
 8027818:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 802781a:	697b      	ldr	r3, [r7, #20]
 802781c:	781b      	ldrb	r3, [r3, #0]
 802781e:	b2db      	uxtb	r3, r3
 8027820:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8027822:	697b      	ldr	r3, [r7, #20]
 8027824:	22ff      	movs	r2, #255	; 0xff
 8027826:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8027828:	697b      	ldr	r3, [r7, #20]
 802782a:	781b      	ldrb	r3, [r3, #0]
 802782c:	b2db      	uxtb	r3, r3
 802782e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8027830:	78fb      	ldrb	r3, [r7, #3]
 8027832:	b2db      	uxtb	r3, r3
 8027834:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8027838:	b2da      	uxtb	r2, r3
 802783a:	4b31      	ldr	r3, [pc, #196]	; (8027900 <xPortStartScheduler+0x130>)
 802783c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 802783e:	4b31      	ldr	r3, [pc, #196]	; (8027904 <xPortStartScheduler+0x134>)
 8027840:	2207      	movs	r2, #7
 8027842:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8027844:	e009      	b.n	802785a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8027846:	4b2f      	ldr	r3, [pc, #188]	; (8027904 <xPortStartScheduler+0x134>)
 8027848:	681b      	ldr	r3, [r3, #0]
 802784a:	3b01      	subs	r3, #1
 802784c:	4a2d      	ldr	r2, [pc, #180]	; (8027904 <xPortStartScheduler+0x134>)
 802784e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8027850:	78fb      	ldrb	r3, [r7, #3]
 8027852:	b2db      	uxtb	r3, r3
 8027854:	005b      	lsls	r3, r3, #1
 8027856:	b2db      	uxtb	r3, r3
 8027858:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 802785a:	78fb      	ldrb	r3, [r7, #3]
 802785c:	b2db      	uxtb	r3, r3
 802785e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8027862:	2b80      	cmp	r3, #128	; 0x80
 8027864:	d0ef      	beq.n	8027846 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8027866:	4b27      	ldr	r3, [pc, #156]	; (8027904 <xPortStartScheduler+0x134>)
 8027868:	681b      	ldr	r3, [r3, #0]
 802786a:	f1c3 0307 	rsb	r3, r3, #7
 802786e:	2b04      	cmp	r3, #4
 8027870:	d00a      	beq.n	8027888 <xPortStartScheduler+0xb8>
	__asm volatile
 8027872:	f04f 0350 	mov.w	r3, #80	; 0x50
 8027876:	f383 8811 	msr	BASEPRI, r3
 802787a:	f3bf 8f6f 	isb	sy
 802787e:	f3bf 8f4f 	dsb	sy
 8027882:	60bb      	str	r3, [r7, #8]
}
 8027884:	bf00      	nop
 8027886:	e7fe      	b.n	8027886 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8027888:	4b1e      	ldr	r3, [pc, #120]	; (8027904 <xPortStartScheduler+0x134>)
 802788a:	681b      	ldr	r3, [r3, #0]
 802788c:	021b      	lsls	r3, r3, #8
 802788e:	4a1d      	ldr	r2, [pc, #116]	; (8027904 <xPortStartScheduler+0x134>)
 8027890:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8027892:	4b1c      	ldr	r3, [pc, #112]	; (8027904 <xPortStartScheduler+0x134>)
 8027894:	681b      	ldr	r3, [r3, #0]
 8027896:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 802789a:	4a1a      	ldr	r2, [pc, #104]	; (8027904 <xPortStartScheduler+0x134>)
 802789c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 802789e:	687b      	ldr	r3, [r7, #4]
 80278a0:	b2da      	uxtb	r2, r3
 80278a2:	697b      	ldr	r3, [r7, #20]
 80278a4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80278a6:	4b18      	ldr	r3, [pc, #96]	; (8027908 <xPortStartScheduler+0x138>)
 80278a8:	681b      	ldr	r3, [r3, #0]
 80278aa:	4a17      	ldr	r2, [pc, #92]	; (8027908 <xPortStartScheduler+0x138>)
 80278ac:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80278b0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80278b2:	4b15      	ldr	r3, [pc, #84]	; (8027908 <xPortStartScheduler+0x138>)
 80278b4:	681b      	ldr	r3, [r3, #0]
 80278b6:	4a14      	ldr	r2, [pc, #80]	; (8027908 <xPortStartScheduler+0x138>)
 80278b8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80278bc:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80278be:	f000 f8dd 	bl	8027a7c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80278c2:	4b12      	ldr	r3, [pc, #72]	; (802790c <xPortStartScheduler+0x13c>)
 80278c4:	2200      	movs	r2, #0
 80278c6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80278c8:	f000 f8fc 	bl	8027ac4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80278cc:	4b10      	ldr	r3, [pc, #64]	; (8027910 <xPortStartScheduler+0x140>)
 80278ce:	681b      	ldr	r3, [r3, #0]
 80278d0:	4a0f      	ldr	r2, [pc, #60]	; (8027910 <xPortStartScheduler+0x140>)
 80278d2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 80278d6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80278d8:	f7ff ff66 	bl	80277a8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80278dc:	f7ff fa86 	bl	8026dec <vTaskSwitchContext>
	prvTaskExitError();
 80278e0:	f7ff ff20 	bl	8027724 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80278e4:	2300      	movs	r3, #0
}
 80278e6:	4618      	mov	r0, r3
 80278e8:	3718      	adds	r7, #24
 80278ea:	46bd      	mov	sp, r7
 80278ec:	bd80      	pop	{r7, pc}
 80278ee:	bf00      	nop
 80278f0:	e000ed00 	.word	0xe000ed00
 80278f4:	410fc271 	.word	0x410fc271
 80278f8:	410fc270 	.word	0x410fc270
 80278fc:	e000e400 	.word	0xe000e400
 8027900:	20005254 	.word	0x20005254
 8027904:	20005258 	.word	0x20005258
 8027908:	e000ed20 	.word	0xe000ed20
 802790c:	20000024 	.word	0x20000024
 8027910:	e000ef34 	.word	0xe000ef34

08027914 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8027914:	b480      	push	{r7}
 8027916:	b083      	sub	sp, #12
 8027918:	af00      	add	r7, sp, #0
	__asm volatile
 802791a:	f04f 0350 	mov.w	r3, #80	; 0x50
 802791e:	f383 8811 	msr	BASEPRI, r3
 8027922:	f3bf 8f6f 	isb	sy
 8027926:	f3bf 8f4f 	dsb	sy
 802792a:	607b      	str	r3, [r7, #4]
}
 802792c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 802792e:	4b0f      	ldr	r3, [pc, #60]	; (802796c <vPortEnterCritical+0x58>)
 8027930:	681b      	ldr	r3, [r3, #0]
 8027932:	3301      	adds	r3, #1
 8027934:	4a0d      	ldr	r2, [pc, #52]	; (802796c <vPortEnterCritical+0x58>)
 8027936:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8027938:	4b0c      	ldr	r3, [pc, #48]	; (802796c <vPortEnterCritical+0x58>)
 802793a:	681b      	ldr	r3, [r3, #0]
 802793c:	2b01      	cmp	r3, #1
 802793e:	d10f      	bne.n	8027960 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8027940:	4b0b      	ldr	r3, [pc, #44]	; (8027970 <vPortEnterCritical+0x5c>)
 8027942:	681b      	ldr	r3, [r3, #0]
 8027944:	b2db      	uxtb	r3, r3
 8027946:	2b00      	cmp	r3, #0
 8027948:	d00a      	beq.n	8027960 <vPortEnterCritical+0x4c>
	__asm volatile
 802794a:	f04f 0350 	mov.w	r3, #80	; 0x50
 802794e:	f383 8811 	msr	BASEPRI, r3
 8027952:	f3bf 8f6f 	isb	sy
 8027956:	f3bf 8f4f 	dsb	sy
 802795a:	603b      	str	r3, [r7, #0]
}
 802795c:	bf00      	nop
 802795e:	e7fe      	b.n	802795e <vPortEnterCritical+0x4a>
	}
}
 8027960:	bf00      	nop
 8027962:	370c      	adds	r7, #12
 8027964:	46bd      	mov	sp, r7
 8027966:	f85d 7b04 	ldr.w	r7, [sp], #4
 802796a:	4770      	bx	lr
 802796c:	20000024 	.word	0x20000024
 8027970:	e000ed04 	.word	0xe000ed04

08027974 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8027974:	b480      	push	{r7}
 8027976:	b083      	sub	sp, #12
 8027978:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 802797a:	4b12      	ldr	r3, [pc, #72]	; (80279c4 <vPortExitCritical+0x50>)
 802797c:	681b      	ldr	r3, [r3, #0]
 802797e:	2b00      	cmp	r3, #0
 8027980:	d10a      	bne.n	8027998 <vPortExitCritical+0x24>
	__asm volatile
 8027982:	f04f 0350 	mov.w	r3, #80	; 0x50
 8027986:	f383 8811 	msr	BASEPRI, r3
 802798a:	f3bf 8f6f 	isb	sy
 802798e:	f3bf 8f4f 	dsb	sy
 8027992:	607b      	str	r3, [r7, #4]
}
 8027994:	bf00      	nop
 8027996:	e7fe      	b.n	8027996 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8027998:	4b0a      	ldr	r3, [pc, #40]	; (80279c4 <vPortExitCritical+0x50>)
 802799a:	681b      	ldr	r3, [r3, #0]
 802799c:	3b01      	subs	r3, #1
 802799e:	4a09      	ldr	r2, [pc, #36]	; (80279c4 <vPortExitCritical+0x50>)
 80279a0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80279a2:	4b08      	ldr	r3, [pc, #32]	; (80279c4 <vPortExitCritical+0x50>)
 80279a4:	681b      	ldr	r3, [r3, #0]
 80279a6:	2b00      	cmp	r3, #0
 80279a8:	d105      	bne.n	80279b6 <vPortExitCritical+0x42>
 80279aa:	2300      	movs	r3, #0
 80279ac:	603b      	str	r3, [r7, #0]
	__asm volatile
 80279ae:	683b      	ldr	r3, [r7, #0]
 80279b0:	f383 8811 	msr	BASEPRI, r3
}
 80279b4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 80279b6:	bf00      	nop
 80279b8:	370c      	adds	r7, #12
 80279ba:	46bd      	mov	sp, r7
 80279bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80279c0:	4770      	bx	lr
 80279c2:	bf00      	nop
 80279c4:	20000024 	.word	0x20000024
	...

080279d0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80279d0:	f3ef 8009 	mrs	r0, PSP
 80279d4:	f3bf 8f6f 	isb	sy
 80279d8:	4b15      	ldr	r3, [pc, #84]	; (8027a30 <pxCurrentTCBConst>)
 80279da:	681a      	ldr	r2, [r3, #0]
 80279dc:	f01e 0f10 	tst.w	lr, #16
 80279e0:	bf08      	it	eq
 80279e2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80279e6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80279ea:	6010      	str	r0, [r2, #0]
 80279ec:	e92d 0009 	stmdb	sp!, {r0, r3}
 80279f0:	f04f 0050 	mov.w	r0, #80	; 0x50
 80279f4:	f380 8811 	msr	BASEPRI, r0
 80279f8:	f3bf 8f4f 	dsb	sy
 80279fc:	f3bf 8f6f 	isb	sy
 8027a00:	f7ff f9f4 	bl	8026dec <vTaskSwitchContext>
 8027a04:	f04f 0000 	mov.w	r0, #0
 8027a08:	f380 8811 	msr	BASEPRI, r0
 8027a0c:	bc09      	pop	{r0, r3}
 8027a0e:	6819      	ldr	r1, [r3, #0]
 8027a10:	6808      	ldr	r0, [r1, #0]
 8027a12:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8027a16:	f01e 0f10 	tst.w	lr, #16
 8027a1a:	bf08      	it	eq
 8027a1c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8027a20:	f380 8809 	msr	PSP, r0
 8027a24:	f3bf 8f6f 	isb	sy
 8027a28:	4770      	bx	lr
 8027a2a:	bf00      	nop
 8027a2c:	f3af 8000 	nop.w

08027a30 <pxCurrentTCBConst>:
 8027a30:	20005074 	.word	0x20005074
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8027a34:	bf00      	nop
 8027a36:	bf00      	nop

08027a38 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8027a38:	b580      	push	{r7, lr}
 8027a3a:	b082      	sub	sp, #8
 8027a3c:	af00      	add	r7, sp, #0
	__asm volatile
 8027a3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8027a42:	f383 8811 	msr	BASEPRI, r3
 8027a46:	f3bf 8f6f 	isb	sy
 8027a4a:	f3bf 8f4f 	dsb	sy
 8027a4e:	607b      	str	r3, [r7, #4]
}
 8027a50:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8027a52:	f7ff f913 	bl	8026c7c <xTaskIncrementTick>
 8027a56:	4603      	mov	r3, r0
 8027a58:	2b00      	cmp	r3, #0
 8027a5a:	d003      	beq.n	8027a64 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8027a5c:	4b06      	ldr	r3, [pc, #24]	; (8027a78 <SysTick_Handler+0x40>)
 8027a5e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8027a62:	601a      	str	r2, [r3, #0]
 8027a64:	2300      	movs	r3, #0
 8027a66:	603b      	str	r3, [r7, #0]
	__asm volatile
 8027a68:	683b      	ldr	r3, [r7, #0]
 8027a6a:	f383 8811 	msr	BASEPRI, r3
}
 8027a6e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8027a70:	bf00      	nop
 8027a72:	3708      	adds	r7, #8
 8027a74:	46bd      	mov	sp, r7
 8027a76:	bd80      	pop	{r7, pc}
 8027a78:	e000ed04 	.word	0xe000ed04

08027a7c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8027a7c:	b480      	push	{r7}
 8027a7e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8027a80:	4b0b      	ldr	r3, [pc, #44]	; (8027ab0 <vPortSetupTimerInterrupt+0x34>)
 8027a82:	2200      	movs	r2, #0
 8027a84:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8027a86:	4b0b      	ldr	r3, [pc, #44]	; (8027ab4 <vPortSetupTimerInterrupt+0x38>)
 8027a88:	2200      	movs	r2, #0
 8027a8a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8027a8c:	4b0a      	ldr	r3, [pc, #40]	; (8027ab8 <vPortSetupTimerInterrupt+0x3c>)
 8027a8e:	681b      	ldr	r3, [r3, #0]
 8027a90:	4a0a      	ldr	r2, [pc, #40]	; (8027abc <vPortSetupTimerInterrupt+0x40>)
 8027a92:	fba2 2303 	umull	r2, r3, r2, r3
 8027a96:	099b      	lsrs	r3, r3, #6
 8027a98:	4a09      	ldr	r2, [pc, #36]	; (8027ac0 <vPortSetupTimerInterrupt+0x44>)
 8027a9a:	3b01      	subs	r3, #1
 8027a9c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8027a9e:	4b04      	ldr	r3, [pc, #16]	; (8027ab0 <vPortSetupTimerInterrupt+0x34>)
 8027aa0:	2207      	movs	r2, #7
 8027aa2:	601a      	str	r2, [r3, #0]
}
 8027aa4:	bf00      	nop
 8027aa6:	46bd      	mov	sp, r7
 8027aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8027aac:	4770      	bx	lr
 8027aae:	bf00      	nop
 8027ab0:	e000e010 	.word	0xe000e010
 8027ab4:	e000e018 	.word	0xe000e018
 8027ab8:	20000000 	.word	0x20000000
 8027abc:	10624dd3 	.word	0x10624dd3
 8027ac0:	e000e014 	.word	0xe000e014

08027ac4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8027ac4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8027ad4 <vPortEnableVFP+0x10>
 8027ac8:	6801      	ldr	r1, [r0, #0]
 8027aca:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8027ace:	6001      	str	r1, [r0, #0]
 8027ad0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8027ad2:	bf00      	nop
 8027ad4:	e000ed88 	.word	0xe000ed88

08027ad8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8027ad8:	b480      	push	{r7}
 8027ada:	b085      	sub	sp, #20
 8027adc:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8027ade:	f3ef 8305 	mrs	r3, IPSR
 8027ae2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8027ae4:	68fb      	ldr	r3, [r7, #12]
 8027ae6:	2b0f      	cmp	r3, #15
 8027ae8:	d914      	bls.n	8027b14 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8027aea:	4a17      	ldr	r2, [pc, #92]	; (8027b48 <vPortValidateInterruptPriority+0x70>)
 8027aec:	68fb      	ldr	r3, [r7, #12]
 8027aee:	4413      	add	r3, r2
 8027af0:	781b      	ldrb	r3, [r3, #0]
 8027af2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8027af4:	4b15      	ldr	r3, [pc, #84]	; (8027b4c <vPortValidateInterruptPriority+0x74>)
 8027af6:	781b      	ldrb	r3, [r3, #0]
 8027af8:	7afa      	ldrb	r2, [r7, #11]
 8027afa:	429a      	cmp	r2, r3
 8027afc:	d20a      	bcs.n	8027b14 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 8027afe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8027b02:	f383 8811 	msr	BASEPRI, r3
 8027b06:	f3bf 8f6f 	isb	sy
 8027b0a:	f3bf 8f4f 	dsb	sy
 8027b0e:	607b      	str	r3, [r7, #4]
}
 8027b10:	bf00      	nop
 8027b12:	e7fe      	b.n	8027b12 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8027b14:	4b0e      	ldr	r3, [pc, #56]	; (8027b50 <vPortValidateInterruptPriority+0x78>)
 8027b16:	681b      	ldr	r3, [r3, #0]
 8027b18:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8027b1c:	4b0d      	ldr	r3, [pc, #52]	; (8027b54 <vPortValidateInterruptPriority+0x7c>)
 8027b1e:	681b      	ldr	r3, [r3, #0]
 8027b20:	429a      	cmp	r2, r3
 8027b22:	d90a      	bls.n	8027b3a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8027b24:	f04f 0350 	mov.w	r3, #80	; 0x50
 8027b28:	f383 8811 	msr	BASEPRI, r3
 8027b2c:	f3bf 8f6f 	isb	sy
 8027b30:	f3bf 8f4f 	dsb	sy
 8027b34:	603b      	str	r3, [r7, #0]
}
 8027b36:	bf00      	nop
 8027b38:	e7fe      	b.n	8027b38 <vPortValidateInterruptPriority+0x60>
	}
 8027b3a:	bf00      	nop
 8027b3c:	3714      	adds	r7, #20
 8027b3e:	46bd      	mov	sp, r7
 8027b40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8027b44:	4770      	bx	lr
 8027b46:	bf00      	nop
 8027b48:	e000e3f0 	.word	0xe000e3f0
 8027b4c:	20005254 	.word	0x20005254
 8027b50:	e000ed0c 	.word	0xe000ed0c
 8027b54:	20005258 	.word	0x20005258

08027b58 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8027b58:	b580      	push	{r7, lr}
 8027b5a:	b08a      	sub	sp, #40	; 0x28
 8027b5c:	af00      	add	r7, sp, #0
 8027b5e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8027b60:	2300      	movs	r3, #0
 8027b62:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8027b64:	f7fe ffbe 	bl	8026ae4 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8027b68:	4b5b      	ldr	r3, [pc, #364]	; (8027cd8 <pvPortMalloc+0x180>)
 8027b6a:	681b      	ldr	r3, [r3, #0]
 8027b6c:	2b00      	cmp	r3, #0
 8027b6e:	d101      	bne.n	8027b74 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8027b70:	f000 f920 	bl	8027db4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8027b74:	4b59      	ldr	r3, [pc, #356]	; (8027cdc <pvPortMalloc+0x184>)
 8027b76:	681a      	ldr	r2, [r3, #0]
 8027b78:	687b      	ldr	r3, [r7, #4]
 8027b7a:	4013      	ands	r3, r2
 8027b7c:	2b00      	cmp	r3, #0
 8027b7e:	f040 8093 	bne.w	8027ca8 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8027b82:	687b      	ldr	r3, [r7, #4]
 8027b84:	2b00      	cmp	r3, #0
 8027b86:	d01d      	beq.n	8027bc4 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8027b88:	2208      	movs	r2, #8
 8027b8a:	687b      	ldr	r3, [r7, #4]
 8027b8c:	4413      	add	r3, r2
 8027b8e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8027b90:	687b      	ldr	r3, [r7, #4]
 8027b92:	f003 0307 	and.w	r3, r3, #7
 8027b96:	2b00      	cmp	r3, #0
 8027b98:	d014      	beq.n	8027bc4 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8027b9a:	687b      	ldr	r3, [r7, #4]
 8027b9c:	f023 0307 	bic.w	r3, r3, #7
 8027ba0:	3308      	adds	r3, #8
 8027ba2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8027ba4:	687b      	ldr	r3, [r7, #4]
 8027ba6:	f003 0307 	and.w	r3, r3, #7
 8027baa:	2b00      	cmp	r3, #0
 8027bac:	d00a      	beq.n	8027bc4 <pvPortMalloc+0x6c>
	__asm volatile
 8027bae:	f04f 0350 	mov.w	r3, #80	; 0x50
 8027bb2:	f383 8811 	msr	BASEPRI, r3
 8027bb6:	f3bf 8f6f 	isb	sy
 8027bba:	f3bf 8f4f 	dsb	sy
 8027bbe:	617b      	str	r3, [r7, #20]
}
 8027bc0:	bf00      	nop
 8027bc2:	e7fe      	b.n	8027bc2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8027bc4:	687b      	ldr	r3, [r7, #4]
 8027bc6:	2b00      	cmp	r3, #0
 8027bc8:	d06e      	beq.n	8027ca8 <pvPortMalloc+0x150>
 8027bca:	4b45      	ldr	r3, [pc, #276]	; (8027ce0 <pvPortMalloc+0x188>)
 8027bcc:	681b      	ldr	r3, [r3, #0]
 8027bce:	687a      	ldr	r2, [r7, #4]
 8027bd0:	429a      	cmp	r2, r3
 8027bd2:	d869      	bhi.n	8027ca8 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8027bd4:	4b43      	ldr	r3, [pc, #268]	; (8027ce4 <pvPortMalloc+0x18c>)
 8027bd6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8027bd8:	4b42      	ldr	r3, [pc, #264]	; (8027ce4 <pvPortMalloc+0x18c>)
 8027bda:	681b      	ldr	r3, [r3, #0]
 8027bdc:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8027bde:	e004      	b.n	8027bea <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8027be0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8027be2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8027be4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8027be6:	681b      	ldr	r3, [r3, #0]
 8027be8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8027bea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8027bec:	685b      	ldr	r3, [r3, #4]
 8027bee:	687a      	ldr	r2, [r7, #4]
 8027bf0:	429a      	cmp	r2, r3
 8027bf2:	d903      	bls.n	8027bfc <pvPortMalloc+0xa4>
 8027bf4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8027bf6:	681b      	ldr	r3, [r3, #0]
 8027bf8:	2b00      	cmp	r3, #0
 8027bfa:	d1f1      	bne.n	8027be0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8027bfc:	4b36      	ldr	r3, [pc, #216]	; (8027cd8 <pvPortMalloc+0x180>)
 8027bfe:	681b      	ldr	r3, [r3, #0]
 8027c00:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8027c02:	429a      	cmp	r2, r3
 8027c04:	d050      	beq.n	8027ca8 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8027c06:	6a3b      	ldr	r3, [r7, #32]
 8027c08:	681b      	ldr	r3, [r3, #0]
 8027c0a:	2208      	movs	r2, #8
 8027c0c:	4413      	add	r3, r2
 8027c0e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8027c10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8027c12:	681a      	ldr	r2, [r3, #0]
 8027c14:	6a3b      	ldr	r3, [r7, #32]
 8027c16:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8027c18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8027c1a:	685a      	ldr	r2, [r3, #4]
 8027c1c:	687b      	ldr	r3, [r7, #4]
 8027c1e:	1ad2      	subs	r2, r2, r3
 8027c20:	2308      	movs	r3, #8
 8027c22:	005b      	lsls	r3, r3, #1
 8027c24:	429a      	cmp	r2, r3
 8027c26:	d91f      	bls.n	8027c68 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8027c28:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8027c2a:	687b      	ldr	r3, [r7, #4]
 8027c2c:	4413      	add	r3, r2
 8027c2e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8027c30:	69bb      	ldr	r3, [r7, #24]
 8027c32:	f003 0307 	and.w	r3, r3, #7
 8027c36:	2b00      	cmp	r3, #0
 8027c38:	d00a      	beq.n	8027c50 <pvPortMalloc+0xf8>
	__asm volatile
 8027c3a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8027c3e:	f383 8811 	msr	BASEPRI, r3
 8027c42:	f3bf 8f6f 	isb	sy
 8027c46:	f3bf 8f4f 	dsb	sy
 8027c4a:	613b      	str	r3, [r7, #16]
}
 8027c4c:	bf00      	nop
 8027c4e:	e7fe      	b.n	8027c4e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8027c50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8027c52:	685a      	ldr	r2, [r3, #4]
 8027c54:	687b      	ldr	r3, [r7, #4]
 8027c56:	1ad2      	subs	r2, r2, r3
 8027c58:	69bb      	ldr	r3, [r7, #24]
 8027c5a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8027c5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8027c5e:	687a      	ldr	r2, [r7, #4]
 8027c60:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8027c62:	69b8      	ldr	r0, [r7, #24]
 8027c64:	f000 f908 	bl	8027e78 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8027c68:	4b1d      	ldr	r3, [pc, #116]	; (8027ce0 <pvPortMalloc+0x188>)
 8027c6a:	681a      	ldr	r2, [r3, #0]
 8027c6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8027c6e:	685b      	ldr	r3, [r3, #4]
 8027c70:	1ad3      	subs	r3, r2, r3
 8027c72:	4a1b      	ldr	r2, [pc, #108]	; (8027ce0 <pvPortMalloc+0x188>)
 8027c74:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8027c76:	4b1a      	ldr	r3, [pc, #104]	; (8027ce0 <pvPortMalloc+0x188>)
 8027c78:	681a      	ldr	r2, [r3, #0]
 8027c7a:	4b1b      	ldr	r3, [pc, #108]	; (8027ce8 <pvPortMalloc+0x190>)
 8027c7c:	681b      	ldr	r3, [r3, #0]
 8027c7e:	429a      	cmp	r2, r3
 8027c80:	d203      	bcs.n	8027c8a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8027c82:	4b17      	ldr	r3, [pc, #92]	; (8027ce0 <pvPortMalloc+0x188>)
 8027c84:	681b      	ldr	r3, [r3, #0]
 8027c86:	4a18      	ldr	r2, [pc, #96]	; (8027ce8 <pvPortMalloc+0x190>)
 8027c88:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8027c8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8027c8c:	685a      	ldr	r2, [r3, #4]
 8027c8e:	4b13      	ldr	r3, [pc, #76]	; (8027cdc <pvPortMalloc+0x184>)
 8027c90:	681b      	ldr	r3, [r3, #0]
 8027c92:	431a      	orrs	r2, r3
 8027c94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8027c96:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8027c98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8027c9a:	2200      	movs	r2, #0
 8027c9c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8027c9e:	4b13      	ldr	r3, [pc, #76]	; (8027cec <pvPortMalloc+0x194>)
 8027ca0:	681b      	ldr	r3, [r3, #0]
 8027ca2:	3301      	adds	r3, #1
 8027ca4:	4a11      	ldr	r2, [pc, #68]	; (8027cec <pvPortMalloc+0x194>)
 8027ca6:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8027ca8:	f7fe ff2a 	bl	8026b00 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8027cac:	69fb      	ldr	r3, [r7, #28]
 8027cae:	f003 0307 	and.w	r3, r3, #7
 8027cb2:	2b00      	cmp	r3, #0
 8027cb4:	d00a      	beq.n	8027ccc <pvPortMalloc+0x174>
	__asm volatile
 8027cb6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8027cba:	f383 8811 	msr	BASEPRI, r3
 8027cbe:	f3bf 8f6f 	isb	sy
 8027cc2:	f3bf 8f4f 	dsb	sy
 8027cc6:	60fb      	str	r3, [r7, #12]
}
 8027cc8:	bf00      	nop
 8027cca:	e7fe      	b.n	8027cca <pvPortMalloc+0x172>
	return pvReturn;
 8027ccc:	69fb      	ldr	r3, [r7, #28]
}
 8027cce:	4618      	mov	r0, r3
 8027cd0:	3728      	adds	r7, #40	; 0x28
 8027cd2:	46bd      	mov	sp, r7
 8027cd4:	bd80      	pop	{r7, pc}
 8027cd6:	bf00      	nop
 8027cd8:	2000b264 	.word	0x2000b264
 8027cdc:	2000b278 	.word	0x2000b278
 8027ce0:	2000b268 	.word	0x2000b268
 8027ce4:	2000b25c 	.word	0x2000b25c
 8027ce8:	2000b26c 	.word	0x2000b26c
 8027cec:	2000b270 	.word	0x2000b270

08027cf0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8027cf0:	b580      	push	{r7, lr}
 8027cf2:	b086      	sub	sp, #24
 8027cf4:	af00      	add	r7, sp, #0
 8027cf6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8027cf8:	687b      	ldr	r3, [r7, #4]
 8027cfa:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8027cfc:	687b      	ldr	r3, [r7, #4]
 8027cfe:	2b00      	cmp	r3, #0
 8027d00:	d04d      	beq.n	8027d9e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8027d02:	2308      	movs	r3, #8
 8027d04:	425b      	negs	r3, r3
 8027d06:	697a      	ldr	r2, [r7, #20]
 8027d08:	4413      	add	r3, r2
 8027d0a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8027d0c:	697b      	ldr	r3, [r7, #20]
 8027d0e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8027d10:	693b      	ldr	r3, [r7, #16]
 8027d12:	685a      	ldr	r2, [r3, #4]
 8027d14:	4b24      	ldr	r3, [pc, #144]	; (8027da8 <vPortFree+0xb8>)
 8027d16:	681b      	ldr	r3, [r3, #0]
 8027d18:	4013      	ands	r3, r2
 8027d1a:	2b00      	cmp	r3, #0
 8027d1c:	d10a      	bne.n	8027d34 <vPortFree+0x44>
	__asm volatile
 8027d1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8027d22:	f383 8811 	msr	BASEPRI, r3
 8027d26:	f3bf 8f6f 	isb	sy
 8027d2a:	f3bf 8f4f 	dsb	sy
 8027d2e:	60fb      	str	r3, [r7, #12]
}
 8027d30:	bf00      	nop
 8027d32:	e7fe      	b.n	8027d32 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8027d34:	693b      	ldr	r3, [r7, #16]
 8027d36:	681b      	ldr	r3, [r3, #0]
 8027d38:	2b00      	cmp	r3, #0
 8027d3a:	d00a      	beq.n	8027d52 <vPortFree+0x62>
	__asm volatile
 8027d3c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8027d40:	f383 8811 	msr	BASEPRI, r3
 8027d44:	f3bf 8f6f 	isb	sy
 8027d48:	f3bf 8f4f 	dsb	sy
 8027d4c:	60bb      	str	r3, [r7, #8]
}
 8027d4e:	bf00      	nop
 8027d50:	e7fe      	b.n	8027d50 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8027d52:	693b      	ldr	r3, [r7, #16]
 8027d54:	685a      	ldr	r2, [r3, #4]
 8027d56:	4b14      	ldr	r3, [pc, #80]	; (8027da8 <vPortFree+0xb8>)
 8027d58:	681b      	ldr	r3, [r3, #0]
 8027d5a:	4013      	ands	r3, r2
 8027d5c:	2b00      	cmp	r3, #0
 8027d5e:	d01e      	beq.n	8027d9e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8027d60:	693b      	ldr	r3, [r7, #16]
 8027d62:	681b      	ldr	r3, [r3, #0]
 8027d64:	2b00      	cmp	r3, #0
 8027d66:	d11a      	bne.n	8027d9e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8027d68:	693b      	ldr	r3, [r7, #16]
 8027d6a:	685a      	ldr	r2, [r3, #4]
 8027d6c:	4b0e      	ldr	r3, [pc, #56]	; (8027da8 <vPortFree+0xb8>)
 8027d6e:	681b      	ldr	r3, [r3, #0]
 8027d70:	43db      	mvns	r3, r3
 8027d72:	401a      	ands	r2, r3
 8027d74:	693b      	ldr	r3, [r7, #16]
 8027d76:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8027d78:	f7fe feb4 	bl	8026ae4 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8027d7c:	693b      	ldr	r3, [r7, #16]
 8027d7e:	685a      	ldr	r2, [r3, #4]
 8027d80:	4b0a      	ldr	r3, [pc, #40]	; (8027dac <vPortFree+0xbc>)
 8027d82:	681b      	ldr	r3, [r3, #0]
 8027d84:	4413      	add	r3, r2
 8027d86:	4a09      	ldr	r2, [pc, #36]	; (8027dac <vPortFree+0xbc>)
 8027d88:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8027d8a:	6938      	ldr	r0, [r7, #16]
 8027d8c:	f000 f874 	bl	8027e78 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8027d90:	4b07      	ldr	r3, [pc, #28]	; (8027db0 <vPortFree+0xc0>)
 8027d92:	681b      	ldr	r3, [r3, #0]
 8027d94:	3301      	adds	r3, #1
 8027d96:	4a06      	ldr	r2, [pc, #24]	; (8027db0 <vPortFree+0xc0>)
 8027d98:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8027d9a:	f7fe feb1 	bl	8026b00 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8027d9e:	bf00      	nop
 8027da0:	3718      	adds	r7, #24
 8027da2:	46bd      	mov	sp, r7
 8027da4:	bd80      	pop	{r7, pc}
 8027da6:	bf00      	nop
 8027da8:	2000b278 	.word	0x2000b278
 8027dac:	2000b268 	.word	0x2000b268
 8027db0:	2000b274 	.word	0x2000b274

08027db4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8027db4:	b480      	push	{r7}
 8027db6:	b085      	sub	sp, #20
 8027db8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8027dba:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 8027dbe:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8027dc0:	4b27      	ldr	r3, [pc, #156]	; (8027e60 <prvHeapInit+0xac>)
 8027dc2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8027dc4:	68fb      	ldr	r3, [r7, #12]
 8027dc6:	f003 0307 	and.w	r3, r3, #7
 8027dca:	2b00      	cmp	r3, #0
 8027dcc:	d00c      	beq.n	8027de8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8027dce:	68fb      	ldr	r3, [r7, #12]
 8027dd0:	3307      	adds	r3, #7
 8027dd2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8027dd4:	68fb      	ldr	r3, [r7, #12]
 8027dd6:	f023 0307 	bic.w	r3, r3, #7
 8027dda:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8027ddc:	68ba      	ldr	r2, [r7, #8]
 8027dde:	68fb      	ldr	r3, [r7, #12]
 8027de0:	1ad3      	subs	r3, r2, r3
 8027de2:	4a1f      	ldr	r2, [pc, #124]	; (8027e60 <prvHeapInit+0xac>)
 8027de4:	4413      	add	r3, r2
 8027de6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8027de8:	68fb      	ldr	r3, [r7, #12]
 8027dea:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8027dec:	4a1d      	ldr	r2, [pc, #116]	; (8027e64 <prvHeapInit+0xb0>)
 8027dee:	687b      	ldr	r3, [r7, #4]
 8027df0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8027df2:	4b1c      	ldr	r3, [pc, #112]	; (8027e64 <prvHeapInit+0xb0>)
 8027df4:	2200      	movs	r2, #0
 8027df6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8027df8:	687b      	ldr	r3, [r7, #4]
 8027dfa:	68ba      	ldr	r2, [r7, #8]
 8027dfc:	4413      	add	r3, r2
 8027dfe:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8027e00:	2208      	movs	r2, #8
 8027e02:	68fb      	ldr	r3, [r7, #12]
 8027e04:	1a9b      	subs	r3, r3, r2
 8027e06:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8027e08:	68fb      	ldr	r3, [r7, #12]
 8027e0a:	f023 0307 	bic.w	r3, r3, #7
 8027e0e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8027e10:	68fb      	ldr	r3, [r7, #12]
 8027e12:	4a15      	ldr	r2, [pc, #84]	; (8027e68 <prvHeapInit+0xb4>)
 8027e14:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8027e16:	4b14      	ldr	r3, [pc, #80]	; (8027e68 <prvHeapInit+0xb4>)
 8027e18:	681b      	ldr	r3, [r3, #0]
 8027e1a:	2200      	movs	r2, #0
 8027e1c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8027e1e:	4b12      	ldr	r3, [pc, #72]	; (8027e68 <prvHeapInit+0xb4>)
 8027e20:	681b      	ldr	r3, [r3, #0]
 8027e22:	2200      	movs	r2, #0
 8027e24:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8027e26:	687b      	ldr	r3, [r7, #4]
 8027e28:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8027e2a:	683b      	ldr	r3, [r7, #0]
 8027e2c:	68fa      	ldr	r2, [r7, #12]
 8027e2e:	1ad2      	subs	r2, r2, r3
 8027e30:	683b      	ldr	r3, [r7, #0]
 8027e32:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8027e34:	4b0c      	ldr	r3, [pc, #48]	; (8027e68 <prvHeapInit+0xb4>)
 8027e36:	681a      	ldr	r2, [r3, #0]
 8027e38:	683b      	ldr	r3, [r7, #0]
 8027e3a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8027e3c:	683b      	ldr	r3, [r7, #0]
 8027e3e:	685b      	ldr	r3, [r3, #4]
 8027e40:	4a0a      	ldr	r2, [pc, #40]	; (8027e6c <prvHeapInit+0xb8>)
 8027e42:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8027e44:	683b      	ldr	r3, [r7, #0]
 8027e46:	685b      	ldr	r3, [r3, #4]
 8027e48:	4a09      	ldr	r2, [pc, #36]	; (8027e70 <prvHeapInit+0xbc>)
 8027e4a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8027e4c:	4b09      	ldr	r3, [pc, #36]	; (8027e74 <prvHeapInit+0xc0>)
 8027e4e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8027e52:	601a      	str	r2, [r3, #0]
}
 8027e54:	bf00      	nop
 8027e56:	3714      	adds	r7, #20
 8027e58:	46bd      	mov	sp, r7
 8027e5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8027e5e:	4770      	bx	lr
 8027e60:	2000525c 	.word	0x2000525c
 8027e64:	2000b25c 	.word	0x2000b25c
 8027e68:	2000b264 	.word	0x2000b264
 8027e6c:	2000b26c 	.word	0x2000b26c
 8027e70:	2000b268 	.word	0x2000b268
 8027e74:	2000b278 	.word	0x2000b278

08027e78 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8027e78:	b480      	push	{r7}
 8027e7a:	b085      	sub	sp, #20
 8027e7c:	af00      	add	r7, sp, #0
 8027e7e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8027e80:	4b28      	ldr	r3, [pc, #160]	; (8027f24 <prvInsertBlockIntoFreeList+0xac>)
 8027e82:	60fb      	str	r3, [r7, #12]
 8027e84:	e002      	b.n	8027e8c <prvInsertBlockIntoFreeList+0x14>
 8027e86:	68fb      	ldr	r3, [r7, #12]
 8027e88:	681b      	ldr	r3, [r3, #0]
 8027e8a:	60fb      	str	r3, [r7, #12]
 8027e8c:	68fb      	ldr	r3, [r7, #12]
 8027e8e:	681b      	ldr	r3, [r3, #0]
 8027e90:	687a      	ldr	r2, [r7, #4]
 8027e92:	429a      	cmp	r2, r3
 8027e94:	d8f7      	bhi.n	8027e86 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8027e96:	68fb      	ldr	r3, [r7, #12]
 8027e98:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8027e9a:	68fb      	ldr	r3, [r7, #12]
 8027e9c:	685b      	ldr	r3, [r3, #4]
 8027e9e:	68ba      	ldr	r2, [r7, #8]
 8027ea0:	4413      	add	r3, r2
 8027ea2:	687a      	ldr	r2, [r7, #4]
 8027ea4:	429a      	cmp	r2, r3
 8027ea6:	d108      	bne.n	8027eba <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8027ea8:	68fb      	ldr	r3, [r7, #12]
 8027eaa:	685a      	ldr	r2, [r3, #4]
 8027eac:	687b      	ldr	r3, [r7, #4]
 8027eae:	685b      	ldr	r3, [r3, #4]
 8027eb0:	441a      	add	r2, r3
 8027eb2:	68fb      	ldr	r3, [r7, #12]
 8027eb4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8027eb6:	68fb      	ldr	r3, [r7, #12]
 8027eb8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8027eba:	687b      	ldr	r3, [r7, #4]
 8027ebc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8027ebe:	687b      	ldr	r3, [r7, #4]
 8027ec0:	685b      	ldr	r3, [r3, #4]
 8027ec2:	68ba      	ldr	r2, [r7, #8]
 8027ec4:	441a      	add	r2, r3
 8027ec6:	68fb      	ldr	r3, [r7, #12]
 8027ec8:	681b      	ldr	r3, [r3, #0]
 8027eca:	429a      	cmp	r2, r3
 8027ecc:	d118      	bne.n	8027f00 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8027ece:	68fb      	ldr	r3, [r7, #12]
 8027ed0:	681a      	ldr	r2, [r3, #0]
 8027ed2:	4b15      	ldr	r3, [pc, #84]	; (8027f28 <prvInsertBlockIntoFreeList+0xb0>)
 8027ed4:	681b      	ldr	r3, [r3, #0]
 8027ed6:	429a      	cmp	r2, r3
 8027ed8:	d00d      	beq.n	8027ef6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8027eda:	687b      	ldr	r3, [r7, #4]
 8027edc:	685a      	ldr	r2, [r3, #4]
 8027ede:	68fb      	ldr	r3, [r7, #12]
 8027ee0:	681b      	ldr	r3, [r3, #0]
 8027ee2:	685b      	ldr	r3, [r3, #4]
 8027ee4:	441a      	add	r2, r3
 8027ee6:	687b      	ldr	r3, [r7, #4]
 8027ee8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8027eea:	68fb      	ldr	r3, [r7, #12]
 8027eec:	681b      	ldr	r3, [r3, #0]
 8027eee:	681a      	ldr	r2, [r3, #0]
 8027ef0:	687b      	ldr	r3, [r7, #4]
 8027ef2:	601a      	str	r2, [r3, #0]
 8027ef4:	e008      	b.n	8027f08 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8027ef6:	4b0c      	ldr	r3, [pc, #48]	; (8027f28 <prvInsertBlockIntoFreeList+0xb0>)
 8027ef8:	681a      	ldr	r2, [r3, #0]
 8027efa:	687b      	ldr	r3, [r7, #4]
 8027efc:	601a      	str	r2, [r3, #0]
 8027efe:	e003      	b.n	8027f08 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8027f00:	68fb      	ldr	r3, [r7, #12]
 8027f02:	681a      	ldr	r2, [r3, #0]
 8027f04:	687b      	ldr	r3, [r7, #4]
 8027f06:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8027f08:	68fa      	ldr	r2, [r7, #12]
 8027f0a:	687b      	ldr	r3, [r7, #4]
 8027f0c:	429a      	cmp	r2, r3
 8027f0e:	d002      	beq.n	8027f16 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8027f10:	68fb      	ldr	r3, [r7, #12]
 8027f12:	687a      	ldr	r2, [r7, #4]
 8027f14:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8027f16:	bf00      	nop
 8027f18:	3714      	adds	r7, #20
 8027f1a:	46bd      	mov	sp, r7
 8027f1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8027f20:	4770      	bx	lr
 8027f22:	bf00      	nop
 8027f24:	2000b25c 	.word	0x2000b25c
 8027f28:	2000b264 	.word	0x2000b264

08027f2c <netconn_apimsg>:
 * @param apimsg a struct containing the function to call and its parameters
 * @return ERR_OK if the function was called, another err_t if not
 */
static err_t
netconn_apimsg(tcpip_callback_fn fn, struct api_msg *apimsg)
{
 8027f2c:	b580      	push	{r7, lr}
 8027f2e:	b084      	sub	sp, #16
 8027f30:	af00      	add	r7, sp, #0
 8027f32:	6078      	str	r0, [r7, #4]
 8027f34:	6039      	str	r1, [r7, #0]

#if LWIP_NETCONN_SEM_PER_THREAD
  apimsg->op_completed_sem = LWIP_NETCONN_THREAD_SEM_GET();
#endif /* LWIP_NETCONN_SEM_PER_THREAD */

  err = tcpip_send_msg_wait_sem(fn, apimsg, LWIP_API_MSG_SEM(apimsg));
 8027f36:	683b      	ldr	r3, [r7, #0]
 8027f38:	681b      	ldr	r3, [r3, #0]
 8027f3a:	330c      	adds	r3, #12
 8027f3c:	461a      	mov	r2, r3
 8027f3e:	6839      	ldr	r1, [r7, #0]
 8027f40:	6878      	ldr	r0, [r7, #4]
 8027f42:	f002 fa89 	bl	802a458 <tcpip_send_msg_wait_sem>
 8027f46:	4603      	mov	r3, r0
 8027f48:	73fb      	strb	r3, [r7, #15]
  if (err == ERR_OK) {
 8027f4a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8027f4e:	2b00      	cmp	r3, #0
 8027f50:	d103      	bne.n	8027f5a <netconn_apimsg+0x2e>
    return apimsg->err;
 8027f52:	683b      	ldr	r3, [r7, #0]
 8027f54:	f993 3004 	ldrsb.w	r3, [r3, #4]
 8027f58:	e001      	b.n	8027f5e <netconn_apimsg+0x32>
  }
  return err;
 8027f5a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8027f5e:	4618      	mov	r0, r3
 8027f60:	3710      	adds	r7, #16
 8027f62:	46bd      	mov	sp, r7
 8027f64:	bd80      	pop	{r7, pc}
	...

08027f68 <netconn_new_with_proto_and_callback>:
 * @return a newly allocated struct netconn or
 *         NULL on memory error
 */
struct netconn *
netconn_new_with_proto_and_callback(enum netconn_type t, u8_t proto, netconn_callback callback)
{
 8027f68:	b580      	push	{r7, lr}
 8027f6a:	b08c      	sub	sp, #48	; 0x30
 8027f6c:	af00      	add	r7, sp, #0
 8027f6e:	4603      	mov	r3, r0
 8027f70:	603a      	str	r2, [r7, #0]
 8027f72:	71fb      	strb	r3, [r7, #7]
 8027f74:	460b      	mov	r3, r1
 8027f76:	71bb      	strb	r3, [r7, #6]
  struct netconn *conn;
  API_MSG_VAR_DECLARE(msg);
  API_MSG_VAR_ALLOC_RETURN_NULL(msg);

  conn = netconn_alloc(t, callback);
 8027f78:	79fb      	ldrb	r3, [r7, #7]
 8027f7a:	6839      	ldr	r1, [r7, #0]
 8027f7c:	4618      	mov	r0, r3
 8027f7e:	f001 f949 	bl	8029214 <netconn_alloc>
 8027f82:	62f8      	str	r0, [r7, #44]	; 0x2c
  if (conn != NULL) {
 8027f84:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8027f86:	2b00      	cmp	r3, #0
 8027f88:	d054      	beq.n	8028034 <netconn_new_with_proto_and_callback+0xcc>
    err_t err;

    API_MSG_VAR_REF(msg).msg.n.proto = proto;
 8027f8a:	79bb      	ldrb	r3, [r7, #6]
 8027f8c:	743b      	strb	r3, [r7, #16]
    API_MSG_VAR_REF(msg).conn = conn;
 8027f8e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8027f90:	60bb      	str	r3, [r7, #8]
    err = netconn_apimsg(lwip_netconn_do_newconn, &API_MSG_VAR_REF(msg));
 8027f92:	f107 0308 	add.w	r3, r7, #8
 8027f96:	4619      	mov	r1, r3
 8027f98:	4829      	ldr	r0, [pc, #164]	; (8028040 <netconn_new_with_proto_and_callback+0xd8>)
 8027f9a:	f7ff ffc7 	bl	8027f2c <netconn_apimsg>
 8027f9e:	4603      	mov	r3, r0
 8027fa0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    if (err != ERR_OK) {
 8027fa4:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 8027fa8:	2b00      	cmp	r3, #0
 8027faa:	d043      	beq.n	8028034 <netconn_new_with_proto_and_callback+0xcc>
      LWIP_ASSERT("freeing conn without freeing pcb", conn->pcb.tcp == NULL);
 8027fac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8027fae:	685b      	ldr	r3, [r3, #4]
 8027fb0:	2b00      	cmp	r3, #0
 8027fb2:	d005      	beq.n	8027fc0 <netconn_new_with_proto_and_callback+0x58>
 8027fb4:	4b23      	ldr	r3, [pc, #140]	; (8028044 <netconn_new_with_proto_and_callback+0xdc>)
 8027fb6:	22a3      	movs	r2, #163	; 0xa3
 8027fb8:	4923      	ldr	r1, [pc, #140]	; (8028048 <netconn_new_with_proto_and_callback+0xe0>)
 8027fba:	4824      	ldr	r0, [pc, #144]	; (802804c <netconn_new_with_proto_and_callback+0xe4>)
 8027fbc:	f00e f8ec 	bl	8036198 <iprintf>
      LWIP_ASSERT("conn has no recvmbox", sys_mbox_valid(&conn->recvmbox));
 8027fc0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8027fc2:	3310      	adds	r3, #16
 8027fc4:	4618      	mov	r0, r3
 8027fc6:	f00d fd14 	bl	80359f2 <sys_mbox_valid>
 8027fca:	4603      	mov	r3, r0
 8027fcc:	2b00      	cmp	r3, #0
 8027fce:	d105      	bne.n	8027fdc <netconn_new_with_proto_and_callback+0x74>
 8027fd0:	4b1c      	ldr	r3, [pc, #112]	; (8028044 <netconn_new_with_proto_and_callback+0xdc>)
 8027fd2:	22a4      	movs	r2, #164	; 0xa4
 8027fd4:	491e      	ldr	r1, [pc, #120]	; (8028050 <netconn_new_with_proto_and_callback+0xe8>)
 8027fd6:	481d      	ldr	r0, [pc, #116]	; (802804c <netconn_new_with_proto_and_callback+0xe4>)
 8027fd8:	f00e f8de 	bl	8036198 <iprintf>
#if LWIP_TCP
      LWIP_ASSERT("conn->acceptmbox shouldn't exist", !sys_mbox_valid(&conn->acceptmbox));
 8027fdc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8027fde:	3314      	adds	r3, #20
 8027fe0:	4618      	mov	r0, r3
 8027fe2:	f00d fd06 	bl	80359f2 <sys_mbox_valid>
 8027fe6:	4603      	mov	r3, r0
 8027fe8:	2b00      	cmp	r3, #0
 8027fea:	d005      	beq.n	8027ff8 <netconn_new_with_proto_and_callback+0x90>
 8027fec:	4b15      	ldr	r3, [pc, #84]	; (8028044 <netconn_new_with_proto_and_callback+0xdc>)
 8027fee:	22a6      	movs	r2, #166	; 0xa6
 8027ff0:	4918      	ldr	r1, [pc, #96]	; (8028054 <netconn_new_with_proto_and_callback+0xec>)
 8027ff2:	4816      	ldr	r0, [pc, #88]	; (802804c <netconn_new_with_proto_and_callback+0xe4>)
 8027ff4:	f00e f8d0 	bl	8036198 <iprintf>
#endif /* LWIP_TCP */
#if !LWIP_NETCONN_SEM_PER_THREAD
      LWIP_ASSERT("conn has no op_completed", sys_sem_valid(&conn->op_completed));
 8027ff8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8027ffa:	330c      	adds	r3, #12
 8027ffc:	4618      	mov	r0, r3
 8027ffe:	f00d fdb5 	bl	8035b6c <sys_sem_valid>
 8028002:	4603      	mov	r3, r0
 8028004:	2b00      	cmp	r3, #0
 8028006:	d105      	bne.n	8028014 <netconn_new_with_proto_and_callback+0xac>
 8028008:	4b0e      	ldr	r3, [pc, #56]	; (8028044 <netconn_new_with_proto_and_callback+0xdc>)
 802800a:	22a9      	movs	r2, #169	; 0xa9
 802800c:	4912      	ldr	r1, [pc, #72]	; (8028058 <netconn_new_with_proto_and_callback+0xf0>)
 802800e:	480f      	ldr	r0, [pc, #60]	; (802804c <netconn_new_with_proto_and_callback+0xe4>)
 8028010:	f00e f8c2 	bl	8036198 <iprintf>
      sys_sem_free(&conn->op_completed);
 8028014:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8028016:	330c      	adds	r3, #12
 8028018:	4618      	mov	r0, r3
 802801a:	f00d fd8f 	bl	8035b3c <sys_sem_free>
#endif /* !LWIP_NETCONN_SEM_PER_THREAD */
      sys_mbox_free(&conn->recvmbox);
 802801e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8028020:	3310      	adds	r3, #16
 8028022:	4618      	mov	r0, r3
 8028024:	f00d fc3e 	bl	80358a4 <sys_mbox_free>
      memp_free(MEMP_NETCONN, conn);
 8028028:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 802802a:	2007      	movs	r0, #7
 802802c:	f003 f892 	bl	802b154 <memp_free>
      API_MSG_VAR_FREE(msg);
      return NULL;
 8028030:	2300      	movs	r3, #0
 8028032:	e000      	b.n	8028036 <netconn_new_with_proto_and_callback+0xce>
    }
  }
  API_MSG_VAR_FREE(msg);
  return conn;
 8028034:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 8028036:	4618      	mov	r0, r3
 8028038:	3730      	adds	r7, #48	; 0x30
 802803a:	46bd      	mov	sp, r7
 802803c:	bd80      	pop	{r7, pc}
 802803e:	bf00      	nop
 8028040:	080291e9 	.word	0x080291e9
 8028044:	08037584 	.word	0x08037584
 8028048:	080375b8 	.word	0x080375b8
 802804c:	080375dc 	.word	0x080375dc
 8028050:	08037604 	.word	0x08037604
 8028054:	0803761c 	.word	0x0803761c
 8028058:	08037640 	.word	0x08037640

0802805c <netconn_prepare_delete>:
 * @param conn the netconn to delete
 * @return ERR_OK if the connection was deleted
 */
err_t
netconn_prepare_delete(struct netconn *conn)
{
 802805c:	b580      	push	{r7, lr}
 802805e:	b08c      	sub	sp, #48	; 0x30
 8028060:	af00      	add	r7, sp, #0
 8028062:	6078      	str	r0, [r7, #4]
  err_t err;
  API_MSG_VAR_DECLARE(msg);

  /* No ASSERT here because possible to get a (conn == NULL) if we got an accept error */
  if (conn == NULL) {
 8028064:	687b      	ldr	r3, [r7, #4]
 8028066:	2b00      	cmp	r3, #0
 8028068:	d101      	bne.n	802806e <netconn_prepare_delete+0x12>
    return ERR_OK;
 802806a:	2300      	movs	r3, #0
 802806c:	e014      	b.n	8028098 <netconn_prepare_delete+0x3c>
  }

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
 802806e:	687b      	ldr	r3, [r7, #4]
 8028070:	60fb      	str	r3, [r7, #12]
  /* get the time we started, which is later compared to
     sys_now() + conn->send_timeout */
  API_MSG_VAR_REF(msg).msg.sd.time_started = sys_now();
#else /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
#if LWIP_TCP
  API_MSG_VAR_REF(msg).msg.sd.polls_left =
 8028072:	2329      	movs	r3, #41	; 0x29
 8028074:	757b      	strb	r3, [r7, #21]
    ((LWIP_TCP_CLOSE_TIMEOUT_MS_DEFAULT + TCP_SLOW_INTERVAL - 1) / TCP_SLOW_INTERVAL) + 1;
#endif /* LWIP_TCP */
#endif /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
  err = netconn_apimsg(lwip_netconn_do_delconn, &API_MSG_VAR_REF(msg));
 8028076:	f107 030c 	add.w	r3, r7, #12
 802807a:	4619      	mov	r1, r3
 802807c:	4808      	ldr	r0, [pc, #32]	; (80280a0 <netconn_prepare_delete+0x44>)
 802807e:	f7ff ff55 	bl	8027f2c <netconn_apimsg>
 8028082:	4603      	mov	r3, r0
 8028084:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  API_MSG_VAR_FREE(msg);

  if (err != ERR_OK) {
 8028088:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 802808c:	2b00      	cmp	r3, #0
 802808e:	d002      	beq.n	8028096 <netconn_prepare_delete+0x3a>
    return err;
 8028090:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8028094:	e000      	b.n	8028098 <netconn_prepare_delete+0x3c>
  }
  return ERR_OK;
 8028096:	2300      	movs	r3, #0
}
 8028098:	4618      	mov	r0, r3
 802809a:	3730      	adds	r7, #48	; 0x30
 802809c:	46bd      	mov	sp, r7
 802809e:	bd80      	pop	{r7, pc}
 80280a0:	0802975d 	.word	0x0802975d

080280a4 <netconn_delete>:
 * @param conn the netconn to delete
 * @return ERR_OK if the connection was deleted
 */
err_t
netconn_delete(struct netconn *conn)
{
 80280a4:	b580      	push	{r7, lr}
 80280a6:	b084      	sub	sp, #16
 80280a8:	af00      	add	r7, sp, #0
 80280aa:	6078      	str	r0, [r7, #4]
  err_t err;

  /* No ASSERT here because possible to get a (conn == NULL) if we got an accept error */
  if (conn == NULL) {
 80280ac:	687b      	ldr	r3, [r7, #4]
 80280ae:	2b00      	cmp	r3, #0
 80280b0:	d101      	bne.n	80280b6 <netconn_delete+0x12>
    return ERR_OK;
 80280b2:	2300      	movs	r3, #0
 80280b4:	e00d      	b.n	80280d2 <netconn_delete+0x2e>
    /* Already called netconn_prepare_delete() before */
    err = ERR_OK;
  } else
#endif /* LWIP_NETCONN_FULLDUPLEX */
  {
    err = netconn_prepare_delete(conn);
 80280b6:	6878      	ldr	r0, [r7, #4]
 80280b8:	f7ff ffd0 	bl	802805c <netconn_prepare_delete>
 80280bc:	4603      	mov	r3, r0
 80280be:	73fb      	strb	r3, [r7, #15]
  }
  if (err == ERR_OK) {
 80280c0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80280c4:	2b00      	cmp	r3, #0
 80280c6:	d102      	bne.n	80280ce <netconn_delete+0x2a>
    netconn_free(conn);
 80280c8:	6878      	ldr	r0, [r7, #4]
 80280ca:	f001 f915 	bl	80292f8 <netconn_free>
  }
  return err;
 80280ce:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80280d2:	4618      	mov	r0, r3
 80280d4:	3710      	adds	r7, #16
 80280d6:	46bd      	mov	sp, r7
 80280d8:	bd80      	pop	{r7, pc}
	...

080280dc <netconn_bind>:
 * @param port the local port to bind the netconn to (not used for RAW)
 * @return ERR_OK if bound, any other err_t on failure
 */
err_t
netconn_bind(struct netconn *conn, const ip_addr_t *addr, u16_t port)
{
 80280dc:	b580      	push	{r7, lr}
 80280de:	b08e      	sub	sp, #56	; 0x38
 80280e0:	af00      	add	r7, sp, #0
 80280e2:	60f8      	str	r0, [r7, #12]
 80280e4:	60b9      	str	r1, [r7, #8]
 80280e6:	4613      	mov	r3, r2
 80280e8:	80fb      	strh	r3, [r7, #6]
  API_MSG_VAR_DECLARE(msg);
  err_t err;

  LWIP_ERROR("netconn_bind: invalid conn", (conn != NULL), return ERR_ARG;);
 80280ea:	68fb      	ldr	r3, [r7, #12]
 80280ec:	2b00      	cmp	r3, #0
 80280ee:	d109      	bne.n	8028104 <netconn_bind+0x28>
 80280f0:	4b11      	ldr	r3, [pc, #68]	; (8028138 <netconn_bind+0x5c>)
 80280f2:	f44f 729c 	mov.w	r2, #312	; 0x138
 80280f6:	4911      	ldr	r1, [pc, #68]	; (802813c <netconn_bind+0x60>)
 80280f8:	4811      	ldr	r0, [pc, #68]	; (8028140 <netconn_bind+0x64>)
 80280fa:	f00e f84d 	bl	8036198 <iprintf>
 80280fe:	f06f 030f 	mvn.w	r3, #15
 8028102:	e015      	b.n	8028130 <netconn_bind+0x54>

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IP_ADDR_ANY alias) to subsequent functions */
  if (addr == NULL) {
 8028104:	68bb      	ldr	r3, [r7, #8]
 8028106:	2b00      	cmp	r3, #0
 8028108:	d101      	bne.n	802810e <netconn_bind+0x32>
    addr = IP4_ADDR_ANY;
 802810a:	4b0e      	ldr	r3, [pc, #56]	; (8028144 <netconn_bind+0x68>)
 802810c:	60bb      	str	r3, [r7, #8]
    addr = IP_ANY_TYPE;
  }
#endif /* LWIP_IPV4 && LWIP_IPV6 */

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
 802810e:	68fb      	ldr	r3, [r7, #12]
 8028110:	617b      	str	r3, [r7, #20]
  API_MSG_VAR_REF(msg).msg.bc.ipaddr = API_MSG_VAR_REF(addr);
 8028112:	68bb      	ldr	r3, [r7, #8]
 8028114:	61fb      	str	r3, [r7, #28]
  API_MSG_VAR_REF(msg).msg.bc.port = port;
 8028116:	88fb      	ldrh	r3, [r7, #6]
 8028118:	843b      	strh	r3, [r7, #32]
  err = netconn_apimsg(lwip_netconn_do_bind, &API_MSG_VAR_REF(msg));
 802811a:	f107 0314 	add.w	r3, r7, #20
 802811e:	4619      	mov	r1, r3
 8028120:	4809      	ldr	r0, [pc, #36]	; (8028148 <netconn_bind+0x6c>)
 8028122:	f7ff ff03 	bl	8027f2c <netconn_apimsg>
 8028126:	4603      	mov	r3, r0
 8028128:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
  API_MSG_VAR_FREE(msg);

  return err;
 802812c:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
}
 8028130:	4618      	mov	r0, r3
 8028132:	3738      	adds	r7, #56	; 0x38
 8028134:	46bd      	mov	sp, r7
 8028136:	bd80      	pop	{r7, pc}
 8028138:	08037584 	.word	0x08037584
 802813c:	080376bc 	.word	0x080376bc
 8028140:	080375dc 	.word	0x080375dc
 8028144:	0803abc4 	.word	0x0803abc4
 8028148:	08029929 	.word	0x08029929

0802814c <netconn_listen_with_backlog>:
 * @return ERR_OK if the netconn was set to listen (UDP and RAW netconns
 *         don't return any error (yet?))
 */
err_t
netconn_listen_with_backlog(struct netconn *conn, u8_t backlog)
{
 802814c:	b580      	push	{r7, lr}
 802814e:	b08c      	sub	sp, #48	; 0x30
 8028150:	af00      	add	r7, sp, #0
 8028152:	6078      	str	r0, [r7, #4]
 8028154:	460b      	mov	r3, r1
 8028156:	70fb      	strb	r3, [r7, #3]
  err_t err;

  /* This does no harm. If TCP_LISTEN_BACKLOG is off, backlog is unused. */
  LWIP_UNUSED_ARG(backlog);

  LWIP_ERROR("netconn_listen: invalid conn", (conn != NULL), return ERR_ARG;);
 8028158:	687b      	ldr	r3, [r7, #4]
 802815a:	2b00      	cmp	r3, #0
 802815c:	d109      	bne.n	8028172 <netconn_listen_with_backlog+0x26>
 802815e:	4b0d      	ldr	r3, [pc, #52]	; (8028194 <netconn_listen_with_backlog+0x48>)
 8028160:	f240 12bb 	movw	r2, #443	; 0x1bb
 8028164:	490c      	ldr	r1, [pc, #48]	; (8028198 <netconn_listen_with_backlog+0x4c>)
 8028166:	480d      	ldr	r0, [pc, #52]	; (802819c <netconn_listen_with_backlog+0x50>)
 8028168:	f00e f816 	bl	8036198 <iprintf>
 802816c:	f06f 030f 	mvn.w	r3, #15
 8028170:	e00c      	b.n	802818c <netconn_listen_with_backlog+0x40>

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
 8028172:	687b      	ldr	r3, [r7, #4]
 8028174:	60fb      	str	r3, [r7, #12]
#if TCP_LISTEN_BACKLOG
  API_MSG_VAR_REF(msg).msg.lb.backlog = backlog;
#endif /* TCP_LISTEN_BACKLOG */
  err = netconn_apimsg(lwip_netconn_do_listen, &API_MSG_VAR_REF(msg));
 8028176:	f107 030c 	add.w	r3, r7, #12
 802817a:	4619      	mov	r1, r3
 802817c:	4808      	ldr	r0, [pc, #32]	; (80281a0 <netconn_listen_with_backlog+0x54>)
 802817e:	f7ff fed5 	bl	8027f2c <netconn_apimsg>
 8028182:	4603      	mov	r3, r0
 8028184:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  API_MSG_VAR_FREE(msg);

  return err;
 8028188:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
#else /* LWIP_TCP */
  LWIP_UNUSED_ARG(conn);
  LWIP_UNUSED_ARG(backlog);
  return ERR_ARG;
#endif /* LWIP_TCP */
}
 802818c:	4618      	mov	r0, r3
 802818e:	3730      	adds	r7, #48	; 0x30
 8028190:	46bd      	mov	sp, r7
 8028192:	bd80      	pop	{r7, pc}
 8028194:	08037584 	.word	0x08037584
 8028198:	0803773c 	.word	0x0803773c
 802819c:	080375dc 	.word	0x080375dc
 80281a0:	0802999d 	.word	0x0802999d

080281a4 <netconn_accept>:
 * @return ERR_OK if a new connection has been received or an error
 *                code otherwise
 */
err_t
netconn_accept(struct netconn *conn, struct netconn **new_conn)
{
 80281a4:	b580      	push	{r7, lr}
 80281a6:	b086      	sub	sp, #24
 80281a8:	af00      	add	r7, sp, #0
 80281aa:	6078      	str	r0, [r7, #4]
 80281ac:	6039      	str	r1, [r7, #0]
  struct netconn *newconn;
#if TCP_LISTEN_BACKLOG
  API_MSG_VAR_DECLARE(msg);
#endif /* TCP_LISTEN_BACKLOG */

  LWIP_ERROR("netconn_accept: invalid pointer",    (new_conn != NULL),                  return ERR_ARG;);
 80281ae:	683b      	ldr	r3, [r7, #0]
 80281b0:	2b00      	cmp	r3, #0
 80281b2:	d109      	bne.n	80281c8 <netconn_accept+0x24>
 80281b4:	4b42      	ldr	r3, [pc, #264]	; (80282c0 <netconn_accept+0x11c>)
 80281b6:	f240 12e1 	movw	r2, #481	; 0x1e1
 80281ba:	4942      	ldr	r1, [pc, #264]	; (80282c4 <netconn_accept+0x120>)
 80281bc:	4842      	ldr	r0, [pc, #264]	; (80282c8 <netconn_accept+0x124>)
 80281be:	f00d ffeb 	bl	8036198 <iprintf>
 80281c2:	f06f 030f 	mvn.w	r3, #15
 80281c6:	e077      	b.n	80282b8 <netconn_accept+0x114>
  *new_conn = NULL;
 80281c8:	683b      	ldr	r3, [r7, #0]
 80281ca:	2200      	movs	r2, #0
 80281cc:	601a      	str	r2, [r3, #0]
  LWIP_ERROR("netconn_accept: invalid conn",       (conn != NULL),                      return ERR_ARG;);
 80281ce:	687b      	ldr	r3, [r7, #4]
 80281d0:	2b00      	cmp	r3, #0
 80281d2:	d109      	bne.n	80281e8 <netconn_accept+0x44>
 80281d4:	4b3a      	ldr	r3, [pc, #232]	; (80282c0 <netconn_accept+0x11c>)
 80281d6:	f240 12e3 	movw	r2, #483	; 0x1e3
 80281da:	493c      	ldr	r1, [pc, #240]	; (80282cc <netconn_accept+0x128>)
 80281dc:	483a      	ldr	r0, [pc, #232]	; (80282c8 <netconn_accept+0x124>)
 80281de:	f00d ffdb 	bl	8036198 <iprintf>
 80281e2:	f06f 030f 	mvn.w	r3, #15
 80281e6:	e067      	b.n	80282b8 <netconn_accept+0x114>

  /* NOTE: Although the opengroup spec says a pending error shall be returned to
           send/recv/getsockopt(SO_ERROR) only, we return it for listening
           connections also, to handle embedded-system errors */
  err = netconn_err(conn);
 80281e8:	6878      	ldr	r0, [r7, #4]
 80281ea:	f000 fb88 	bl	80288fe <netconn_err>
 80281ee:	4603      	mov	r3, r0
 80281f0:	74fb      	strb	r3, [r7, #19]
  if (err != ERR_OK) {
 80281f2:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80281f6:	2b00      	cmp	r3, #0
 80281f8:	d002      	beq.n	8028200 <netconn_accept+0x5c>
    /* return pending error */
    return err;
 80281fa:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80281fe:	e05b      	b.n	80282b8 <netconn_accept+0x114>
  }
  if (!NETCONN_ACCEPTMBOX_WAITABLE(conn)) {
 8028200:	687b      	ldr	r3, [r7, #4]
 8028202:	3314      	adds	r3, #20
 8028204:	4618      	mov	r0, r3
 8028206:	f00d fbf4 	bl	80359f2 <sys_mbox_valid>
 802820a:	4603      	mov	r3, r0
 802820c:	2b00      	cmp	r3, #0
 802820e:	d006      	beq.n	802821e <netconn_accept+0x7a>
 8028210:	687b      	ldr	r3, [r7, #4]
 8028212:	f893 3020 	ldrb.w	r3, [r3, #32]
 8028216:	f003 0301 	and.w	r3, r3, #1
 802821a:	2b00      	cmp	r3, #0
 802821c:	d002      	beq.n	8028224 <netconn_accept+0x80>
    /* don't accept if closed: this might block the application task
       waiting on acceptmbox forever! */
    return ERR_CLSD;
 802821e:	f06f 030e 	mvn.w	r3, #14
 8028222:	e049      	b.n	80282b8 <netconn_accept+0x114>
  }

  API_MSG_VAR_ALLOC_ACCEPT(msg);

  NETCONN_MBOX_WAITING_INC(conn);
  if (netconn_is_nonblocking(conn)) {
 8028224:	687b      	ldr	r3, [r7, #4]
 8028226:	f893 3020 	ldrb.w	r3, [r3, #32]
 802822a:	f003 0302 	and.w	r3, r3, #2
 802822e:	2b00      	cmp	r3, #0
 8028230:	d00e      	beq.n	8028250 <netconn_accept+0xac>
    if (sys_arch_mbox_tryfetch(&conn->acceptmbox, &accept_ptr) == SYS_ARCH_TIMEOUT) {
 8028232:	687b      	ldr	r3, [r7, #4]
 8028234:	3314      	adds	r3, #20
 8028236:	f107 020c 	add.w	r2, r7, #12
 802823a:	4611      	mov	r1, r2
 802823c:	4618      	mov	r0, r3
 802823e:	f00d fbbc 	bl	80359ba <sys_arch_mbox_tryfetch>
 8028242:	4603      	mov	r3, r0
 8028244:	f1b3 3fff 	cmp.w	r3, #4294967295
 8028248:	d113      	bne.n	8028272 <netconn_accept+0xce>
      API_MSG_VAR_FREE_ACCEPT(msg);
      NETCONN_MBOX_WAITING_DEC(conn);
      return ERR_WOULDBLOCK;
 802824a:	f06f 0306 	mvn.w	r3, #6
 802824e:	e033      	b.n	80282b8 <netconn_accept+0x114>
    }
  } else {
#if LWIP_SO_RCVTIMEO
    if (sys_arch_mbox_fetch(&conn->acceptmbox, &accept_ptr, conn->recv_timeout) == SYS_ARCH_TIMEOUT) {
 8028250:	687b      	ldr	r3, [r7, #4]
 8028252:	f103 0014 	add.w	r0, r3, #20
 8028256:	687b      	ldr	r3, [r7, #4]
 8028258:	69da      	ldr	r2, [r3, #28]
 802825a:	f107 030c 	add.w	r3, r7, #12
 802825e:	4619      	mov	r1, r3
 8028260:	f00d fb6c 	bl	803593c <sys_arch_mbox_fetch>
 8028264:	4603      	mov	r3, r0
 8028266:	f1b3 3fff 	cmp.w	r3, #4294967295
 802826a:	d102      	bne.n	8028272 <netconn_accept+0xce>
      API_MSG_VAR_FREE_ACCEPT(msg);
      NETCONN_MBOX_WAITING_DEC(conn);
      return ERR_TIMEOUT;
 802826c:	f06f 0302 	mvn.w	r3, #2
 8028270:	e022      	b.n	80282b8 <netconn_accept+0x114>
    }
  }
#endif

  /* Register event with callback */
  API_EVENT(conn, NETCONN_EVT_RCVMINUS, 0);
 8028272:	687b      	ldr	r3, [r7, #4]
 8028274:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8028276:	2b00      	cmp	r3, #0
 8028278:	d005      	beq.n	8028286 <netconn_accept+0xe2>
 802827a:	687b      	ldr	r3, [r7, #4]
 802827c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 802827e:	2200      	movs	r2, #0
 8028280:	2101      	movs	r1, #1
 8028282:	6878      	ldr	r0, [r7, #4]
 8028284:	4798      	blx	r3

  if (lwip_netconn_is_err_msg(accept_ptr, &err)) {
 8028286:	68fb      	ldr	r3, [r7, #12]
 8028288:	f107 0213 	add.w	r2, r7, #19
 802828c:	4611      	mov	r1, r2
 802828e:	4618      	mov	r0, r3
 8028290:	f000 fb86 	bl	80289a0 <lwip_netconn_is_err_msg>
 8028294:	4603      	mov	r3, r0
 8028296:	2b00      	cmp	r3, #0
 8028298:	d002      	beq.n	80282a0 <netconn_accept+0xfc>
    /* a connection has been aborted: e.g. out of pcbs or out of netconns during accept */
    API_MSG_VAR_FREE_ACCEPT(msg);
    return err;
 802829a:	f997 3013 	ldrsb.w	r3, [r7, #19]
 802829e:	e00b      	b.n	80282b8 <netconn_accept+0x114>
  }
  if (accept_ptr == NULL) {
 80282a0:	68fb      	ldr	r3, [r7, #12]
 80282a2:	2b00      	cmp	r3, #0
 80282a4:	d102      	bne.n	80282ac <netconn_accept+0x108>
    /* connection has been aborted */
    API_MSG_VAR_FREE_ACCEPT(msg);
    return ERR_CLSD;
 80282a6:	f06f 030e 	mvn.w	r3, #14
 80282aa:	e005      	b.n	80282b8 <netconn_accept+0x114>
  }
  newconn = (struct netconn *)accept_ptr;
 80282ac:	68fb      	ldr	r3, [r7, #12]
 80282ae:	617b      	str	r3, [r7, #20]
  /* don't care for the return value of lwip_netconn_do_recv */
  netconn_apimsg(lwip_netconn_do_accepted, &API_MSG_VAR_REF(msg));
  API_MSG_VAR_FREE(msg);
#endif /* TCP_LISTEN_BACKLOG */

  *new_conn = newconn;
 80282b0:	683b      	ldr	r3, [r7, #0]
 80282b2:	697a      	ldr	r2, [r7, #20]
 80282b4:	601a      	str	r2, [r3, #0]
  /* don't set conn->last_err: it's only ERR_OK, anyway */
  return ERR_OK;
 80282b6:	2300      	movs	r3, #0
#else /* LWIP_TCP */
  LWIP_UNUSED_ARG(conn);
  LWIP_UNUSED_ARG(new_conn);
  return ERR_ARG;
#endif /* LWIP_TCP */
}
 80282b8:	4618      	mov	r0, r3
 80282ba:	3718      	adds	r7, #24
 80282bc:	46bd      	mov	sp, r7
 80282be:	bd80      	pop	{r7, pc}
 80282c0:	08037584 	.word	0x08037584
 80282c4:	0803775c 	.word	0x0803775c
 80282c8:	080375dc 	.word	0x080375dc
 80282cc:	0803777c 	.word	0x0803777c

080282d0 <netconn_recv_data>:
 *         ERR_WOULDBLOCK if the netconn is nonblocking but would block to wait for data
 *         ERR_TIMEOUT if the netconn has a receive timeout and no data was received
 */
static err_t
netconn_recv_data(struct netconn *conn, void **new_buf, u8_t apiflags)
{
 80282d0:	b580      	push	{r7, lr}
 80282d2:	b088      	sub	sp, #32
 80282d4:	af00      	add	r7, sp, #0
 80282d6:	60f8      	str	r0, [r7, #12]
 80282d8:	60b9      	str	r1, [r7, #8]
 80282da:	4613      	mov	r3, r2
 80282dc:	71fb      	strb	r3, [r7, #7]
  void *buf = NULL;
 80282de:	2300      	movs	r3, #0
 80282e0:	61bb      	str	r3, [r7, #24]
  u16_t len;

  LWIP_ERROR("netconn_recv: invalid pointer", (new_buf != NULL), return ERR_ARG;);
 80282e2:	68bb      	ldr	r3, [r7, #8]
 80282e4:	2b00      	cmp	r3, #0
 80282e6:	d109      	bne.n	80282fc <netconn_recv_data+0x2c>
 80282e8:	4b5e      	ldr	r3, [pc, #376]	; (8028464 <netconn_recv_data+0x194>)
 80282ea:	f44f 7212 	mov.w	r2, #584	; 0x248
 80282ee:	495e      	ldr	r1, [pc, #376]	; (8028468 <netconn_recv_data+0x198>)
 80282f0:	485e      	ldr	r0, [pc, #376]	; (802846c <netconn_recv_data+0x19c>)
 80282f2:	f00d ff51 	bl	8036198 <iprintf>
 80282f6:	f06f 030f 	mvn.w	r3, #15
 80282fa:	e0ae      	b.n	802845a <netconn_recv_data+0x18a>
  *new_buf = NULL;
 80282fc:	68bb      	ldr	r3, [r7, #8]
 80282fe:	2200      	movs	r2, #0
 8028300:	601a      	str	r2, [r3, #0]
  LWIP_ERROR("netconn_recv: invalid conn",    (conn != NULL),    return ERR_ARG;);
 8028302:	68fb      	ldr	r3, [r7, #12]
 8028304:	2b00      	cmp	r3, #0
 8028306:	d109      	bne.n	802831c <netconn_recv_data+0x4c>
 8028308:	4b56      	ldr	r3, [pc, #344]	; (8028464 <netconn_recv_data+0x194>)
 802830a:	f240 224a 	movw	r2, #586	; 0x24a
 802830e:	4958      	ldr	r1, [pc, #352]	; (8028470 <netconn_recv_data+0x1a0>)
 8028310:	4856      	ldr	r0, [pc, #344]	; (802846c <netconn_recv_data+0x19c>)
 8028312:	f00d ff41 	bl	8036198 <iprintf>
 8028316:	f06f 030f 	mvn.w	r3, #15
 802831a:	e09e      	b.n	802845a <netconn_recv_data+0x18a>

  if (!NETCONN_RECVMBOX_WAITABLE(conn)) {
 802831c:	68fb      	ldr	r3, [r7, #12]
 802831e:	3310      	adds	r3, #16
 8028320:	4618      	mov	r0, r3
 8028322:	f00d fb66 	bl	80359f2 <sys_mbox_valid>
 8028326:	4603      	mov	r3, r0
 8028328:	2b00      	cmp	r3, #0
 802832a:	d10e      	bne.n	802834a <netconn_recv_data+0x7a>
    err_t err = netconn_err(conn);
 802832c:	68f8      	ldr	r0, [r7, #12]
 802832e:	f000 fae6 	bl	80288fe <netconn_err>
 8028332:	4603      	mov	r3, r0
 8028334:	773b      	strb	r3, [r7, #28]
    if (err != ERR_OK) {
 8028336:	f997 301c 	ldrsb.w	r3, [r7, #28]
 802833a:	2b00      	cmp	r3, #0
 802833c:	d002      	beq.n	8028344 <netconn_recv_data+0x74>
      /* return pending error */
      return err;
 802833e:	f997 301c 	ldrsb.w	r3, [r7, #28]
 8028342:	e08a      	b.n	802845a <netconn_recv_data+0x18a>
    }
    return ERR_CONN;
 8028344:	f06f 030a 	mvn.w	r3, #10
 8028348:	e087      	b.n	802845a <netconn_recv_data+0x18a>
  }

  NETCONN_MBOX_WAITING_INC(conn);
  if (netconn_is_nonblocking(conn) || (apiflags & NETCONN_DONTBLOCK) ||
 802834a:	68fb      	ldr	r3, [r7, #12]
 802834c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8028350:	f003 0302 	and.w	r3, r3, #2
 8028354:	2b00      	cmp	r3, #0
 8028356:	d110      	bne.n	802837a <netconn_recv_data+0xaa>
 8028358:	79fb      	ldrb	r3, [r7, #7]
 802835a:	f003 0304 	and.w	r3, r3, #4
 802835e:	2b00      	cmp	r3, #0
 8028360:	d10b      	bne.n	802837a <netconn_recv_data+0xaa>
      (conn->flags & NETCONN_FLAG_MBOXCLOSED) || (conn->pending_err != ERR_OK)) {
 8028362:	68fb      	ldr	r3, [r7, #12]
 8028364:	f893 3020 	ldrb.w	r3, [r3, #32]
 8028368:	f003 0301 	and.w	r3, r3, #1
  if (netconn_is_nonblocking(conn) || (apiflags & NETCONN_DONTBLOCK) ||
 802836c:	2b00      	cmp	r3, #0
 802836e:	d104      	bne.n	802837a <netconn_recv_data+0xaa>
      (conn->flags & NETCONN_FLAG_MBOXCLOSED) || (conn->pending_err != ERR_OK)) {
 8028370:	68fb      	ldr	r3, [r7, #12]
 8028372:	f993 3008 	ldrsb.w	r3, [r3, #8]
 8028376:	2b00      	cmp	r3, #0
 8028378:	d024      	beq.n	80283c4 <netconn_recv_data+0xf4>
    if (sys_arch_mbox_tryfetch(&conn->recvmbox, &buf) == SYS_ARCH_TIMEOUT) {
 802837a:	68fb      	ldr	r3, [r7, #12]
 802837c:	3310      	adds	r3, #16
 802837e:	f107 0218 	add.w	r2, r7, #24
 8028382:	4611      	mov	r1, r2
 8028384:	4618      	mov	r0, r3
 8028386:	f00d fb18 	bl	80359ba <sys_arch_mbox_tryfetch>
 802838a:	4603      	mov	r3, r0
 802838c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8028390:	d129      	bne.n	80283e6 <netconn_recv_data+0x116>
      err_t err;
      NETCONN_MBOX_WAITING_DEC(conn);
      err = netconn_err(conn);
 8028392:	68f8      	ldr	r0, [r7, #12]
 8028394:	f000 fab3 	bl	80288fe <netconn_err>
 8028398:	4603      	mov	r3, r0
 802839a:	777b      	strb	r3, [r7, #29]
      if (err != ERR_OK) {
 802839c:	f997 301d 	ldrsb.w	r3, [r7, #29]
 80283a0:	2b00      	cmp	r3, #0
 80283a2:	d002      	beq.n	80283aa <netconn_recv_data+0xda>
        /* return pending error */
        return err;
 80283a4:	f997 301d 	ldrsb.w	r3, [r7, #29]
 80283a8:	e057      	b.n	802845a <netconn_recv_data+0x18a>
      }
      if (conn->flags & NETCONN_FLAG_MBOXCLOSED) {
 80283aa:	68fb      	ldr	r3, [r7, #12]
 80283ac:	f893 3020 	ldrb.w	r3, [r3, #32]
 80283b0:	f003 0301 	and.w	r3, r3, #1
 80283b4:	2b00      	cmp	r3, #0
 80283b6:	d002      	beq.n	80283be <netconn_recv_data+0xee>
        return ERR_CONN;
 80283b8:	f06f 030a 	mvn.w	r3, #10
 80283bc:	e04d      	b.n	802845a <netconn_recv_data+0x18a>
      }
      return ERR_WOULDBLOCK;
 80283be:	f06f 0306 	mvn.w	r3, #6
 80283c2:	e04a      	b.n	802845a <netconn_recv_data+0x18a>
    }
  } else {
#if LWIP_SO_RCVTIMEO
    if (sys_arch_mbox_fetch(&conn->recvmbox, &buf, conn->recv_timeout) == SYS_ARCH_TIMEOUT) {
 80283c4:	68fb      	ldr	r3, [r7, #12]
 80283c6:	f103 0010 	add.w	r0, r3, #16
 80283ca:	68fb      	ldr	r3, [r7, #12]
 80283cc:	69da      	ldr	r2, [r3, #28]
 80283ce:	f107 0318 	add.w	r3, r7, #24
 80283d2:	4619      	mov	r1, r3
 80283d4:	f00d fab2 	bl	803593c <sys_arch_mbox_fetch>
 80283d8:	4603      	mov	r3, r0
 80283da:	f1b3 3fff 	cmp.w	r3, #4294967295
 80283de:	d102      	bne.n	80283e6 <netconn_recv_data+0x116>
      NETCONN_MBOX_WAITING_DEC(conn);
      return ERR_TIMEOUT;
 80283e0:	f06f 0302 	mvn.w	r3, #2
 80283e4:	e039      	b.n	802845a <netconn_recv_data+0x18a>
  }
#endif

#if LWIP_TCP
#if (LWIP_UDP || LWIP_RAW)
  if (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP)
 80283e6:	68fb      	ldr	r3, [r7, #12]
 80283e8:	781b      	ldrb	r3, [r3, #0]
 80283ea:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80283ee:	2b10      	cmp	r3, #16
 80283f0:	d117      	bne.n	8028422 <netconn_recv_data+0x152>
#endif /* (LWIP_UDP || LWIP_RAW) */
  {
    err_t err;
    /* Check if this is an error message or a pbuf */
    if (lwip_netconn_is_err_msg(buf, &err)) {
 80283f2:	69bb      	ldr	r3, [r7, #24]
 80283f4:	f107 0217 	add.w	r2, r7, #23
 80283f8:	4611      	mov	r1, r2
 80283fa:	4618      	mov	r0, r3
 80283fc:	f000 fad0 	bl	80289a0 <lwip_netconn_is_err_msg>
 8028400:	4603      	mov	r3, r0
 8028402:	2b00      	cmp	r3, #0
 8028404:	d009      	beq.n	802841a <netconn_recv_data+0x14a>
      /* new_buf has been zeroed above already */
      if (err == ERR_CLSD) {
 8028406:	f997 3017 	ldrsb.w	r3, [r7, #23]
 802840a:	f113 0f0f 	cmn.w	r3, #15
 802840e:	d101      	bne.n	8028414 <netconn_recv_data+0x144>
        /* connection closed translates to ERR_OK with *new_buf == NULL */
        return ERR_OK;
 8028410:	2300      	movs	r3, #0
 8028412:	e022      	b.n	802845a <netconn_recv_data+0x18a>
      }
      return err;
 8028414:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8028418:	e01f      	b.n	802845a <netconn_recv_data+0x18a>
    }
    len = ((struct pbuf *)buf)->tot_len;
 802841a:	69bb      	ldr	r3, [r7, #24]
 802841c:	891b      	ldrh	r3, [r3, #8]
 802841e:	83fb      	strh	r3, [r7, #30]
 8028420:	e00d      	b.n	802843e <netconn_recv_data+0x16e>
#if LWIP_TCP && (LWIP_UDP || LWIP_RAW)
  else
#endif /* LWIP_TCP && (LWIP_UDP || LWIP_RAW) */
#if (LWIP_UDP || LWIP_RAW)
  {
    LWIP_ASSERT("buf != NULL", buf != NULL);
 8028422:	69bb      	ldr	r3, [r7, #24]
 8028424:	2b00      	cmp	r3, #0
 8028426:	d106      	bne.n	8028436 <netconn_recv_data+0x166>
 8028428:	4b0e      	ldr	r3, [pc, #56]	; (8028464 <netconn_recv_data+0x194>)
 802842a:	f240 2291 	movw	r2, #657	; 0x291
 802842e:	4911      	ldr	r1, [pc, #68]	; (8028474 <netconn_recv_data+0x1a4>)
 8028430:	480e      	ldr	r0, [pc, #56]	; (802846c <netconn_recv_data+0x19c>)
 8028432:	f00d feb1 	bl	8036198 <iprintf>
    len = netbuf_len((struct netbuf *)buf);
 8028436:	69bb      	ldr	r3, [r7, #24]
 8028438:	681b      	ldr	r3, [r3, #0]
 802843a:	891b      	ldrh	r3, [r3, #8]
 802843c:	83fb      	strh	r3, [r7, #30]

#if LWIP_SO_RCVBUF
  SYS_ARCH_DEC(conn->recv_avail, len);
#endif /* LWIP_SO_RCVBUF */
  /* Register event with callback */
  API_EVENT(conn, NETCONN_EVT_RCVMINUS, len);
 802843e:	68fb      	ldr	r3, [r7, #12]
 8028440:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8028442:	2b00      	cmp	r3, #0
 8028444:	d005      	beq.n	8028452 <netconn_recv_data+0x182>
 8028446:	68fb      	ldr	r3, [r7, #12]
 8028448:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 802844a:	8bfa      	ldrh	r2, [r7, #30]
 802844c:	2101      	movs	r1, #1
 802844e:	68f8      	ldr	r0, [r7, #12]
 8028450:	4798      	blx	r3

  LWIP_DEBUGF(API_LIB_DEBUG, ("netconn_recv_data: received %p, len=%"U16_F"\n", buf, len));

  *new_buf = buf;
 8028452:	69ba      	ldr	r2, [r7, #24]
 8028454:	68bb      	ldr	r3, [r7, #8]
 8028456:	601a      	str	r2, [r3, #0]
  /* don't set conn->last_err: it's only ERR_OK, anyway */
  return ERR_OK;
 8028458:	2300      	movs	r3, #0
}
 802845a:	4618      	mov	r0, r3
 802845c:	3720      	adds	r7, #32
 802845e:	46bd      	mov	sp, r7
 8028460:	bd80      	pop	{r7, pc}
 8028462:	bf00      	nop
 8028464:	08037584 	.word	0x08037584
 8028468:	0803779c 	.word	0x0803779c
 802846c:	080375dc 	.word	0x080375dc
 8028470:	080377bc 	.word	0x080377bc
 8028474:	080377d8 	.word	0x080377d8

08028478 <netconn_tcp_recvd_msg>:

#if LWIP_TCP
static err_t
netconn_tcp_recvd_msg(struct netconn *conn, size_t len, struct api_msg *msg)
{
 8028478:	b580      	push	{r7, lr}
 802847a:	b084      	sub	sp, #16
 802847c:	af00      	add	r7, sp, #0
 802847e:	60f8      	str	r0, [r7, #12]
 8028480:	60b9      	str	r1, [r7, #8]
 8028482:	607a      	str	r2, [r7, #4]
  LWIP_ERROR("netconn_recv_tcp_pbuf: invalid conn", (conn != NULL) &&
 8028484:	68fb      	ldr	r3, [r7, #12]
 8028486:	2b00      	cmp	r3, #0
 8028488:	d005      	beq.n	8028496 <netconn_tcp_recvd_msg+0x1e>
 802848a:	68fb      	ldr	r3, [r7, #12]
 802848c:	781b      	ldrb	r3, [r3, #0]
 802848e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8028492:	2b10      	cmp	r3, #16
 8028494:	d009      	beq.n	80284aa <netconn_tcp_recvd_msg+0x32>
 8028496:	4b0c      	ldr	r3, [pc, #48]	; (80284c8 <netconn_tcp_recvd_msg+0x50>)
 8028498:	f240 22a7 	movw	r2, #679	; 0x2a7
 802849c:	490b      	ldr	r1, [pc, #44]	; (80284cc <netconn_tcp_recvd_msg+0x54>)
 802849e:	480c      	ldr	r0, [pc, #48]	; (80284d0 <netconn_tcp_recvd_msg+0x58>)
 80284a0:	f00d fe7a 	bl	8036198 <iprintf>
 80284a4:	f06f 030f 	mvn.w	r3, #15
 80284a8:	e00a      	b.n	80284c0 <netconn_tcp_recvd_msg+0x48>
             NETCONNTYPE_GROUP(netconn_type(conn)) == NETCONN_TCP, return ERR_ARG;);

  msg->conn = conn;
 80284aa:	687b      	ldr	r3, [r7, #4]
 80284ac:	68fa      	ldr	r2, [r7, #12]
 80284ae:	601a      	str	r2, [r3, #0]
  msg->msg.r.len = len;
 80284b0:	687b      	ldr	r3, [r7, #4]
 80284b2:	68ba      	ldr	r2, [r7, #8]
 80284b4:	609a      	str	r2, [r3, #8]

  return netconn_apimsg(lwip_netconn_do_recv, msg);
 80284b6:	6879      	ldr	r1, [r7, #4]
 80284b8:	4806      	ldr	r0, [pc, #24]	; (80284d4 <netconn_tcp_recvd_msg+0x5c>)
 80284ba:	f7ff fd37 	bl	8027f2c <netconn_apimsg>
 80284be:	4603      	mov	r3, r0
}
 80284c0:	4618      	mov	r0, r3
 80284c2:	3710      	adds	r7, #16
 80284c4:	46bd      	mov	sp, r7
 80284c6:	bd80      	pop	{r7, pc}
 80284c8:	08037584 	.word	0x08037584
 80284cc:	080377e4 	.word	0x080377e4
 80284d0:	080375dc 	.word	0x080375dc
 80284d4:	08029acd 	.word	0x08029acd

080284d8 <netconn_recv_data_tcp>:
  return err;
}

static err_t
netconn_recv_data_tcp(struct netconn *conn, struct pbuf **new_buf, u8_t apiflags)
{
 80284d8:	b580      	push	{r7, lr}
 80284da:	b090      	sub	sp, #64	; 0x40
 80284dc:	af00      	add	r7, sp, #0
 80284de:	60f8      	str	r0, [r7, #12]
 80284e0:	60b9      	str	r1, [r7, #8]
 80284e2:	4613      	mov	r3, r2
 80284e4:	71fb      	strb	r3, [r7, #7]
  API_MSG_VAR_DECLARE(msg);
#if LWIP_MPU_COMPATIBLE
  msg = NULL;
#endif

  if (!NETCONN_RECVMBOX_WAITABLE(conn)) {
 80284e6:	68fb      	ldr	r3, [r7, #12]
 80284e8:	3310      	adds	r3, #16
 80284ea:	4618      	mov	r0, r3
 80284ec:	f00d fa81 	bl	80359f2 <sys_mbox_valid>
 80284f0:	4603      	mov	r3, r0
 80284f2:	2b00      	cmp	r3, #0
 80284f4:	d102      	bne.n	80284fc <netconn_recv_data_tcp+0x24>
    /* This only happens when calling this function more than once *after* receiving FIN */
    return ERR_CONN;
 80284f6:	f06f 030a 	mvn.w	r3, #10
 80284fa:	e072      	b.n	80285e2 <netconn_recv_data_tcp+0x10a>
  }
  if (netconn_is_flag_set(conn, NETCONN_FIN_RX_PENDING)) {
 80284fc:	68fb      	ldr	r3, [r7, #12]
 80284fe:	f893 3020 	ldrb.w	r3, [r3, #32]
 8028502:	b25b      	sxtb	r3, r3
 8028504:	2b00      	cmp	r3, #0
 8028506:	da09      	bge.n	802851c <netconn_recv_data_tcp+0x44>
    netconn_clear_flags(conn, NETCONN_FIN_RX_PENDING);
 8028508:	68fb      	ldr	r3, [r7, #12]
 802850a:	f893 3020 	ldrb.w	r3, [r3, #32]
 802850e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8028512:	b2da      	uxtb	r2, r3
 8028514:	68fb      	ldr	r3, [r7, #12]
 8028516:	f883 2020 	strb.w	r2, [r3, #32]
    goto handle_fin;
 802851a:	e03b      	b.n	8028594 <netconn_recv_data_tcp+0xbc>
    /* need to allocate API message here so empty message pool does not result in event loss
      * see bug #47512: MPU_COMPATIBLE may fail on empty pool */
    API_MSG_VAR_ALLOC(msg);
  }

  err = netconn_recv_data(conn, (void **)new_buf, apiflags);
 802851c:	79fb      	ldrb	r3, [r7, #7]
 802851e:	461a      	mov	r2, r3
 8028520:	68b9      	ldr	r1, [r7, #8]
 8028522:	68f8      	ldr	r0, [r7, #12]
 8028524:	f7ff fed4 	bl	80282d0 <netconn_recv_data>
 8028528:	4603      	mov	r3, r0
 802852a:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  if (err != ERR_OK) {
 802852e:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8028532:	2b00      	cmp	r3, #0
 8028534:	d002      	beq.n	802853c <netconn_recv_data_tcp+0x64>
    if (!(apiflags & NETCONN_NOAUTORCVD)) {
      API_MSG_VAR_FREE(msg);
    }
    return err;
 8028536:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 802853a:	e052      	b.n	80285e2 <netconn_recv_data_tcp+0x10a>
  }
  buf = *new_buf;
 802853c:	68bb      	ldr	r3, [r7, #8]
 802853e:	681b      	ldr	r3, [r3, #0]
 8028540:	63bb      	str	r3, [r7, #56]	; 0x38
  if (!(apiflags & NETCONN_NOAUTORCVD)) {
 8028542:	79fb      	ldrb	r3, [r7, #7]
 8028544:	f003 0308 	and.w	r3, r3, #8
 8028548:	2b00      	cmp	r3, #0
 802854a:	d10e      	bne.n	802856a <netconn_recv_data_tcp+0x92>
    /* Let the stack know that we have taken the data. */
    u16_t len = buf ? buf->tot_len : 1;
 802854c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 802854e:	2b00      	cmp	r3, #0
 8028550:	d002      	beq.n	8028558 <netconn_recv_data_tcp+0x80>
 8028552:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8028554:	891b      	ldrh	r3, [r3, #8]
 8028556:	e000      	b.n	802855a <netconn_recv_data_tcp+0x82>
 8028558:	2301      	movs	r3, #1
 802855a:	86fb      	strh	r3, [r7, #54]	; 0x36
    /* don't care for the return value of lwip_netconn_do_recv */
    /* @todo: this should really be fixed, e.g. by retrying in poll on error */
    netconn_tcp_recvd_msg(conn, len,  &API_VAR_REF(msg));
 802855c:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 802855e:	f107 0214 	add.w	r2, r7, #20
 8028562:	4619      	mov	r1, r3
 8028564:	68f8      	ldr	r0, [r7, #12]
 8028566:	f7ff ff87 	bl	8028478 <netconn_tcp_recvd_msg>
    API_MSG_VAR_FREE(msg);
  }

  /* If we are closed, we indicate that we no longer wish to use the socket */
  if (buf == NULL) {
 802856a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 802856c:	2b00      	cmp	r3, #0
 802856e:	d136      	bne.n	80285de <netconn_recv_data_tcp+0x106>
    if (apiflags & NETCONN_NOFIN) {
 8028570:	79fb      	ldrb	r3, [r7, #7]
 8028572:	f003 0310 	and.w	r3, r3, #16
 8028576:	2b00      	cmp	r3, #0
 8028578:	d00b      	beq.n	8028592 <netconn_recv_data_tcp+0xba>
      /* received a FIN but the caller cannot handle it right now:
         re-enqueue it and return "no data" */
      netconn_set_flags(conn, NETCONN_FIN_RX_PENDING);
 802857a:	68fb      	ldr	r3, [r7, #12]
 802857c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8028580:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8028584:	b2da      	uxtb	r2, r3
 8028586:	68fb      	ldr	r3, [r7, #12]
 8028588:	f883 2020 	strb.w	r2, [r3, #32]
      return ERR_WOULDBLOCK;
 802858c:	f06f 0306 	mvn.w	r3, #6
 8028590:	e027      	b.n	80285e2 <netconn_recv_data_tcp+0x10a>
    } else {
handle_fin:
 8028592:	bf00      	nop
      API_EVENT(conn, NETCONN_EVT_RCVMINUS, 0);
 8028594:	68fb      	ldr	r3, [r7, #12]
 8028596:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8028598:	2b00      	cmp	r3, #0
 802859a:	d005      	beq.n	80285a8 <netconn_recv_data_tcp+0xd0>
 802859c:	68fb      	ldr	r3, [r7, #12]
 802859e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80285a0:	2200      	movs	r2, #0
 80285a2:	2101      	movs	r1, #1
 80285a4:	68f8      	ldr	r0, [r7, #12]
 80285a6:	4798      	blx	r3
      if (conn->pcb.ip == NULL) {
 80285a8:	68fb      	ldr	r3, [r7, #12]
 80285aa:	685b      	ldr	r3, [r3, #4]
 80285ac:	2b00      	cmp	r3, #0
 80285ae:	d10f      	bne.n	80285d0 <netconn_recv_data_tcp+0xf8>
        /* race condition: RST during recv */
        err = netconn_err(conn);
 80285b0:	68f8      	ldr	r0, [r7, #12]
 80285b2:	f000 f9a4 	bl	80288fe <netconn_err>
 80285b6:	4603      	mov	r3, r0
 80285b8:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
        if (err != ERR_OK) {
 80285bc:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 80285c0:	2b00      	cmp	r3, #0
 80285c2:	d002      	beq.n	80285ca <netconn_recv_data_tcp+0xf2>
          return err;
 80285c4:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 80285c8:	e00b      	b.n	80285e2 <netconn_recv_data_tcp+0x10a>
        }
        return ERR_RST;
 80285ca:	f06f 030d 	mvn.w	r3, #13
 80285ce:	e008      	b.n	80285e2 <netconn_recv_data_tcp+0x10a>
      }
      /* RX side is closed, so deallocate the recvmbox */
      netconn_close_shutdown(conn, NETCONN_SHUT_RD);
 80285d0:	2101      	movs	r1, #1
 80285d2:	68f8      	ldr	r0, [r7, #12]
 80285d4:	f000 f956 	bl	8028884 <netconn_close_shutdown>
      /* Don' store ERR_CLSD as conn->err since we are only half-closed */
      return ERR_CLSD;
 80285d8:	f06f 030e 	mvn.w	r3, #14
 80285dc:	e001      	b.n	80285e2 <netconn_recv_data_tcp+0x10a>
    }
  }
  return err;
 80285de:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
}
 80285e2:	4618      	mov	r0, r3
 80285e4:	3740      	adds	r7, #64	; 0x40
 80285e6:	46bd      	mov	sp, r7
 80285e8:	bd80      	pop	{r7, pc}
	...

080285ec <netconn_recv>:
 * @return ERR_OK if data has been received, an error code otherwise (timeout,
 *                memory error or another error)
 */
err_t
netconn_recv(struct netconn *conn, struct netbuf **new_buf)
{
 80285ec:	b580      	push	{r7, lr}
 80285ee:	b086      	sub	sp, #24
 80285f0:	af00      	add	r7, sp, #0
 80285f2:	6078      	str	r0, [r7, #4]
 80285f4:	6039      	str	r1, [r7, #0]
#if LWIP_TCP
  struct netbuf *buf = NULL;
 80285f6:	2300      	movs	r3, #0
 80285f8:	617b      	str	r3, [r7, #20]
  err_t err;
#endif /* LWIP_TCP */

  LWIP_ERROR("netconn_recv: invalid pointer", (new_buf != NULL), return ERR_ARG;);
 80285fa:	683b      	ldr	r3, [r7, #0]
 80285fc:	2b00      	cmp	r3, #0
 80285fe:	d109      	bne.n	8028614 <netconn_recv+0x28>
 8028600:	4b32      	ldr	r3, [pc, #200]	; (80286cc <netconn_recv+0xe0>)
 8028602:	f240 3263 	movw	r2, #867	; 0x363
 8028606:	4932      	ldr	r1, [pc, #200]	; (80286d0 <netconn_recv+0xe4>)
 8028608:	4832      	ldr	r0, [pc, #200]	; (80286d4 <netconn_recv+0xe8>)
 802860a:	f00d fdc5 	bl	8036198 <iprintf>
 802860e:	f06f 030f 	mvn.w	r3, #15
 8028612:	e056      	b.n	80286c2 <netconn_recv+0xd6>
  *new_buf = NULL;
 8028614:	683b      	ldr	r3, [r7, #0]
 8028616:	2200      	movs	r2, #0
 8028618:	601a      	str	r2, [r3, #0]
  LWIP_ERROR("netconn_recv: invalid conn",    (conn != NULL),    return ERR_ARG;);
 802861a:	687b      	ldr	r3, [r7, #4]
 802861c:	2b00      	cmp	r3, #0
 802861e:	d109      	bne.n	8028634 <netconn_recv+0x48>
 8028620:	4b2a      	ldr	r3, [pc, #168]	; (80286cc <netconn_recv+0xe0>)
 8028622:	f240 3265 	movw	r2, #869	; 0x365
 8028626:	492c      	ldr	r1, [pc, #176]	; (80286d8 <netconn_recv+0xec>)
 8028628:	482a      	ldr	r0, [pc, #168]	; (80286d4 <netconn_recv+0xe8>)
 802862a:	f00d fdb5 	bl	8036198 <iprintf>
 802862e:	f06f 030f 	mvn.w	r3, #15
 8028632:	e046      	b.n	80286c2 <netconn_recv+0xd6>

#if LWIP_TCP
#if (LWIP_UDP || LWIP_RAW)
  if (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP)
 8028634:	687b      	ldr	r3, [r7, #4]
 8028636:	781b      	ldrb	r3, [r3, #0]
 8028638:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 802863c:	2b10      	cmp	r3, #16
 802863e:	d13a      	bne.n	80286b6 <netconn_recv+0xca>
#endif /* (LWIP_UDP || LWIP_RAW) */
  {
    struct pbuf *p = NULL;
 8028640:	2300      	movs	r3, #0
 8028642:	60fb      	str	r3, [r7, #12]
    /* This is not a listening netconn, since recvmbox is set */

    buf = (struct netbuf *)memp_malloc(MEMP_NETBUF);
 8028644:	2006      	movs	r0, #6
 8028646:	f002 fd09 	bl	802b05c <memp_malloc>
 802864a:	6178      	str	r0, [r7, #20]
    if (buf == NULL) {
 802864c:	697b      	ldr	r3, [r7, #20]
 802864e:	2b00      	cmp	r3, #0
 8028650:	d102      	bne.n	8028658 <netconn_recv+0x6c>
      return ERR_MEM;
 8028652:	f04f 33ff 	mov.w	r3, #4294967295
 8028656:	e034      	b.n	80286c2 <netconn_recv+0xd6>
    }

    err = netconn_recv_data_tcp(conn, &p, 0);
 8028658:	f107 030c 	add.w	r3, r7, #12
 802865c:	2200      	movs	r2, #0
 802865e:	4619      	mov	r1, r3
 8028660:	6878      	ldr	r0, [r7, #4]
 8028662:	f7ff ff39 	bl	80284d8 <netconn_recv_data_tcp>
 8028666:	4603      	mov	r3, r0
 8028668:	74fb      	strb	r3, [r7, #19]
    if (err != ERR_OK) {
 802866a:	f997 3013 	ldrsb.w	r3, [r7, #19]
 802866e:	2b00      	cmp	r3, #0
 8028670:	d006      	beq.n	8028680 <netconn_recv+0x94>
      memp_free(MEMP_NETBUF, buf);
 8028672:	6979      	ldr	r1, [r7, #20]
 8028674:	2006      	movs	r0, #6
 8028676:	f002 fd6d 	bl	802b154 <memp_free>
      return err;
 802867a:	f997 3013 	ldrsb.w	r3, [r7, #19]
 802867e:	e020      	b.n	80286c2 <netconn_recv+0xd6>
    }
    LWIP_ASSERT("p != NULL", p != NULL);
 8028680:	68fb      	ldr	r3, [r7, #12]
 8028682:	2b00      	cmp	r3, #0
 8028684:	d106      	bne.n	8028694 <netconn_recv+0xa8>
 8028686:	4b11      	ldr	r3, [pc, #68]	; (80286cc <netconn_recv+0xe0>)
 8028688:	f240 3279 	movw	r2, #889	; 0x379
 802868c:	4913      	ldr	r1, [pc, #76]	; (80286dc <netconn_recv+0xf0>)
 802868e:	4811      	ldr	r0, [pc, #68]	; (80286d4 <netconn_recv+0xe8>)
 8028690:	f00d fd82 	bl	8036198 <iprintf>

    buf->p = p;
 8028694:	68fa      	ldr	r2, [r7, #12]
 8028696:	697b      	ldr	r3, [r7, #20]
 8028698:	601a      	str	r2, [r3, #0]
    buf->ptr = p;
 802869a:	68fa      	ldr	r2, [r7, #12]
 802869c:	697b      	ldr	r3, [r7, #20]
 802869e:	605a      	str	r2, [r3, #4]
    buf->port = 0;
 80286a0:	697b      	ldr	r3, [r7, #20]
 80286a2:	2200      	movs	r2, #0
 80286a4:	819a      	strh	r2, [r3, #12]
    ip_addr_set_zero(&buf->addr);
 80286a6:	697b      	ldr	r3, [r7, #20]
 80286a8:	2200      	movs	r2, #0
 80286aa:	609a      	str	r2, [r3, #8]
    *new_buf = buf;
 80286ac:	683b      	ldr	r3, [r7, #0]
 80286ae:	697a      	ldr	r2, [r7, #20]
 80286b0:	601a      	str	r2, [r3, #0]
    /* don't set conn->last_err: it's only ERR_OK, anyway */
    return ERR_OK;
 80286b2:	2300      	movs	r3, #0
 80286b4:	e005      	b.n	80286c2 <netconn_recv+0xd6>
#if LWIP_TCP && (LWIP_UDP || LWIP_RAW)
  else
#endif /* LWIP_TCP && (LWIP_UDP || LWIP_RAW) */
  {
#if (LWIP_UDP || LWIP_RAW)
    return netconn_recv_data(conn, (void **)new_buf, 0);
 80286b6:	2200      	movs	r2, #0
 80286b8:	6839      	ldr	r1, [r7, #0]
 80286ba:	6878      	ldr	r0, [r7, #4]
 80286bc:	f7ff fe08 	bl	80282d0 <netconn_recv_data>
 80286c0:	4603      	mov	r3, r0
#endif /* (LWIP_UDP || LWIP_RAW) */
  }
}
 80286c2:	4618      	mov	r0, r3
 80286c4:	3718      	adds	r7, #24
 80286c6:	46bd      	mov	sp, r7
 80286c8:	bd80      	pop	{r7, pc}
 80286ca:	bf00      	nop
 80286cc:	08037584 	.word	0x08037584
 80286d0:	0803779c 	.word	0x0803779c
 80286d4:	080375dc 	.word	0x080375dc
 80286d8:	080377bc 	.word	0x080377bc
 80286dc:	08037834 	.word	0x08037834

080286e0 <netconn_write_partly>:
 * @return ERR_OK if data was sent, any other err_t on error
 */
err_t
netconn_write_partly(struct netconn *conn, const void *dataptr, size_t size,
                     u8_t apiflags, size_t *bytes_written)
{
 80286e0:	b580      	push	{r7, lr}
 80286e2:	b088      	sub	sp, #32
 80286e4:	af02      	add	r7, sp, #8
 80286e6:	60f8      	str	r0, [r7, #12]
 80286e8:	60b9      	str	r1, [r7, #8]
 80286ea:	607a      	str	r2, [r7, #4]
 80286ec:	70fb      	strb	r3, [r7, #3]
  struct netvector vector;
  vector.ptr = dataptr;
 80286ee:	68bb      	ldr	r3, [r7, #8]
 80286f0:	613b      	str	r3, [r7, #16]
  vector.len = size;
 80286f2:	687b      	ldr	r3, [r7, #4]
 80286f4:	617b      	str	r3, [r7, #20]
  return netconn_write_vectors_partly(conn, &vector, 1, apiflags, bytes_written);
 80286f6:	78fa      	ldrb	r2, [r7, #3]
 80286f8:	f107 0110 	add.w	r1, r7, #16
 80286fc:	6a3b      	ldr	r3, [r7, #32]
 80286fe:	9300      	str	r3, [sp, #0]
 8028700:	4613      	mov	r3, r2
 8028702:	2201      	movs	r2, #1
 8028704:	68f8      	ldr	r0, [r7, #12]
 8028706:	f000 f805 	bl	8028714 <netconn_write_vectors_partly>
 802870a:	4603      	mov	r3, r0
}
 802870c:	4618      	mov	r0, r3
 802870e:	3718      	adds	r7, #24
 8028710:	46bd      	mov	sp, r7
 8028712:	bd80      	pop	{r7, pc}

08028714 <netconn_write_vectors_partly>:
 * @return ERR_OK if data was sent, any other err_t on error
 */
err_t
netconn_write_vectors_partly(struct netconn *conn, struct netvector *vectors, u16_t vectorcnt,
                             u8_t apiflags, size_t *bytes_written)
{
 8028714:	b580      	push	{r7, lr}
 8028716:	b092      	sub	sp, #72	; 0x48
 8028718:	af00      	add	r7, sp, #0
 802871a:	60f8      	str	r0, [r7, #12]
 802871c:	60b9      	str	r1, [r7, #8]
 802871e:	4611      	mov	r1, r2
 8028720:	461a      	mov	r2, r3
 8028722:	460b      	mov	r3, r1
 8028724:	80fb      	strh	r3, [r7, #6]
 8028726:	4613      	mov	r3, r2
 8028728:	717b      	strb	r3, [r7, #5]
  err_t err;
  u8_t dontblock;
  size_t size;
  int i;

  LWIP_ERROR("netconn_write: invalid conn",  (conn != NULL), return ERR_ARG;);
 802872a:	68fb      	ldr	r3, [r7, #12]
 802872c:	2b00      	cmp	r3, #0
 802872e:	d109      	bne.n	8028744 <netconn_write_vectors_partly+0x30>
 8028730:	4b4e      	ldr	r3, [pc, #312]	; (802886c <netconn_write_vectors_partly+0x158>)
 8028732:	f240 32ee 	movw	r2, #1006	; 0x3ee
 8028736:	494e      	ldr	r1, [pc, #312]	; (8028870 <netconn_write_vectors_partly+0x15c>)
 8028738:	484e      	ldr	r0, [pc, #312]	; (8028874 <netconn_write_vectors_partly+0x160>)
 802873a:	f00d fd2d 	bl	8036198 <iprintf>
 802873e:	f06f 030f 	mvn.w	r3, #15
 8028742:	e08f      	b.n	8028864 <netconn_write_vectors_partly+0x150>
  LWIP_ERROR("netconn_write: invalid conn->type",  (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP), return ERR_VAL;);
 8028744:	68fb      	ldr	r3, [r7, #12]
 8028746:	781b      	ldrb	r3, [r3, #0]
 8028748:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 802874c:	2b10      	cmp	r3, #16
 802874e:	d009      	beq.n	8028764 <netconn_write_vectors_partly+0x50>
 8028750:	4b46      	ldr	r3, [pc, #280]	; (802886c <netconn_write_vectors_partly+0x158>)
 8028752:	f240 32ef 	movw	r2, #1007	; 0x3ef
 8028756:	4948      	ldr	r1, [pc, #288]	; (8028878 <netconn_write_vectors_partly+0x164>)
 8028758:	4846      	ldr	r0, [pc, #280]	; (8028874 <netconn_write_vectors_partly+0x160>)
 802875a:	f00d fd1d 	bl	8036198 <iprintf>
 802875e:	f06f 0305 	mvn.w	r3, #5
 8028762:	e07f      	b.n	8028864 <netconn_write_vectors_partly+0x150>
  dontblock = netconn_is_nonblocking(conn) || (apiflags & NETCONN_DONTBLOCK);
 8028764:	68fb      	ldr	r3, [r7, #12]
 8028766:	f893 3020 	ldrb.w	r3, [r3, #32]
 802876a:	f003 0302 	and.w	r3, r3, #2
 802876e:	2b00      	cmp	r3, #0
 8028770:	d104      	bne.n	802877c <netconn_write_vectors_partly+0x68>
 8028772:	797b      	ldrb	r3, [r7, #5]
 8028774:	f003 0304 	and.w	r3, r3, #4
 8028778:	2b00      	cmp	r3, #0
 802877a:	d001      	beq.n	8028780 <netconn_write_vectors_partly+0x6c>
 802877c:	2301      	movs	r3, #1
 802877e:	e000      	b.n	8028782 <netconn_write_vectors_partly+0x6e>
 8028780:	2300      	movs	r3, #0
 8028782:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
#if LWIP_SO_SNDTIMEO
  if (conn->send_timeout != 0) {
    dontblock = 1;
  }
#endif /* LWIP_SO_SNDTIMEO */
  if (dontblock && !bytes_written) {
 8028786:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 802878a:	2b00      	cmp	r3, #0
 802878c:	d005      	beq.n	802879a <netconn_write_vectors_partly+0x86>
 802878e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8028790:	2b00      	cmp	r3, #0
 8028792:	d102      	bne.n	802879a <netconn_write_vectors_partly+0x86>
    /* This implies netconn_write() cannot be used for non-blocking send, since
       it has no way to return the number of bytes written. */
    return ERR_VAL;
 8028794:	f06f 0305 	mvn.w	r3, #5
 8028798:	e064      	b.n	8028864 <netconn_write_vectors_partly+0x150>
  }

  /* sum up the total size */
  size = 0;
 802879a:	2300      	movs	r3, #0
 802879c:	647b      	str	r3, [r7, #68]	; 0x44
  for (i = 0; i < vectorcnt; i++) {
 802879e:	2300      	movs	r3, #0
 80287a0:	643b      	str	r3, [r7, #64]	; 0x40
 80287a2:	e015      	b.n	80287d0 <netconn_write_vectors_partly+0xbc>
    size += vectors[i].len;
 80287a4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80287a6:	00db      	lsls	r3, r3, #3
 80287a8:	68ba      	ldr	r2, [r7, #8]
 80287aa:	4413      	add	r3, r2
 80287ac:	685b      	ldr	r3, [r3, #4]
 80287ae:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80287b0:	4413      	add	r3, r2
 80287b2:	647b      	str	r3, [r7, #68]	; 0x44
    if (size < vectors[i].len) {
 80287b4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80287b6:	00db      	lsls	r3, r3, #3
 80287b8:	68ba      	ldr	r2, [r7, #8]
 80287ba:	4413      	add	r3, r2
 80287bc:	685b      	ldr	r3, [r3, #4]
 80287be:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80287c0:	429a      	cmp	r2, r3
 80287c2:	d202      	bcs.n	80287ca <netconn_write_vectors_partly+0xb6>
      /* overflow */
      return ERR_VAL;
 80287c4:	f06f 0305 	mvn.w	r3, #5
 80287c8:	e04c      	b.n	8028864 <netconn_write_vectors_partly+0x150>
  for (i = 0; i < vectorcnt; i++) {
 80287ca:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80287cc:	3301      	adds	r3, #1
 80287ce:	643b      	str	r3, [r7, #64]	; 0x40
 80287d0:	88fb      	ldrh	r3, [r7, #6]
 80287d2:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80287d4:	429a      	cmp	r2, r3
 80287d6:	dbe5      	blt.n	80287a4 <netconn_write_vectors_partly+0x90>
    }
  }
  if (size == 0) {
 80287d8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80287da:	2b00      	cmp	r3, #0
 80287dc:	d101      	bne.n	80287e2 <netconn_write_vectors_partly+0xce>
    return ERR_OK;
 80287de:	2300      	movs	r3, #0
 80287e0:	e040      	b.n	8028864 <netconn_write_vectors_partly+0x150>
  } else if (size > SSIZE_MAX) {
 80287e2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80287e4:	2b00      	cmp	r3, #0
 80287e6:	da0a      	bge.n	80287fe <netconn_write_vectors_partly+0xea>
    ssize_t limited;
    /* this is required by the socket layer (cannot send full size_t range) */
    if (!bytes_written) {
 80287e8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80287ea:	2b00      	cmp	r3, #0
 80287ec:	d102      	bne.n	80287f4 <netconn_write_vectors_partly+0xe0>
      return ERR_VAL;
 80287ee:	f06f 0305 	mvn.w	r3, #5
 80287f2:	e037      	b.n	8028864 <netconn_write_vectors_partly+0x150>
    }
    /* limit the amount of data to send */
    limited = SSIZE_MAX;
 80287f4:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 80287f8:	63bb      	str	r3, [r7, #56]	; 0x38
    size = (size_t)limited;
 80287fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80287fc:	647b      	str	r3, [r7, #68]	; 0x44
  }

  API_MSG_VAR_ALLOC(msg);
  /* non-blocking write sends as much  */
  API_MSG_VAR_REF(msg).conn = conn;
 80287fe:	68fb      	ldr	r3, [r7, #12]
 8028800:	617b      	str	r3, [r7, #20]
  API_MSG_VAR_REF(msg).msg.w.vector = vectors;
 8028802:	68bb      	ldr	r3, [r7, #8]
 8028804:	61fb      	str	r3, [r7, #28]
  API_MSG_VAR_REF(msg).msg.w.vector_cnt = vectorcnt;
 8028806:	88fb      	ldrh	r3, [r7, #6]
 8028808:	843b      	strh	r3, [r7, #32]
  API_MSG_VAR_REF(msg).msg.w.vector_off = 0;
 802880a:	2300      	movs	r3, #0
 802880c:	627b      	str	r3, [r7, #36]	; 0x24
  API_MSG_VAR_REF(msg).msg.w.apiflags = apiflags;
 802880e:	797b      	ldrb	r3, [r7, #5]
 8028810:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  API_MSG_VAR_REF(msg).msg.w.len = size;
 8028814:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8028816:	62bb      	str	r3, [r7, #40]	; 0x28
  API_MSG_VAR_REF(msg).msg.w.offset = 0;
 8028818:	2300      	movs	r3, #0
 802881a:	62fb      	str	r3, [r7, #44]	; 0x2c
#endif /* LWIP_SO_SNDTIMEO */

  /* For locking the core: this _can_ be delayed on low memory/low send buffer,
     but if it is, this is done inside api_msg.c:do_write(), so we can use the
     non-blocking version here. */
  err = netconn_apimsg(lwip_netconn_do_write, &API_MSG_VAR_REF(msg));
 802881c:	f107 0314 	add.w	r3, r7, #20
 8028820:	4619      	mov	r1, r3
 8028822:	4816      	ldr	r0, [pc, #88]	; (802887c <netconn_write_vectors_partly+0x168>)
 8028824:	f7ff fb82 	bl	8027f2c <netconn_apimsg>
 8028828:	4603      	mov	r3, r0
 802882a:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
  if (err == ERR_OK) {
 802882e:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 8028832:	2b00      	cmp	r3, #0
 8028834:	d114      	bne.n	8028860 <netconn_write_vectors_partly+0x14c>
    if (bytes_written != NULL) {
 8028836:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8028838:	2b00      	cmp	r3, #0
 802883a:	d002      	beq.n	8028842 <netconn_write_vectors_partly+0x12e>
      *bytes_written = API_MSG_VAR_REF(msg).msg.w.offset;
 802883c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 802883e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8028840:	601a      	str	r2, [r3, #0]
    }
    /* for blocking, check all requested bytes were written, NOTE: send_timeout is
       treated as dontblock (see dontblock assignment above) */
    if (!dontblock) {
 8028842:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8028846:	2b00      	cmp	r3, #0
 8028848:	d10a      	bne.n	8028860 <netconn_write_vectors_partly+0x14c>
      LWIP_ASSERT("do_write failed to write all bytes", API_MSG_VAR_REF(msg).msg.w.offset == size);
 802884a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 802884c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 802884e:	429a      	cmp	r2, r3
 8028850:	d006      	beq.n	8028860 <netconn_write_vectors_partly+0x14c>
 8028852:	4b06      	ldr	r3, [pc, #24]	; (802886c <netconn_write_vectors_partly+0x158>)
 8028854:	f44f 6286 	mov.w	r2, #1072	; 0x430
 8028858:	4909      	ldr	r1, [pc, #36]	; (8028880 <netconn_write_vectors_partly+0x16c>)
 802885a:	4806      	ldr	r0, [pc, #24]	; (8028874 <netconn_write_vectors_partly+0x160>)
 802885c:	f00d fc9c 	bl	8036198 <iprintf>
    }
  }
  API_MSG_VAR_FREE(msg);

  return err;
 8028860:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
}
 8028864:	4618      	mov	r0, r3
 8028866:	3748      	adds	r7, #72	; 0x48
 8028868:	46bd      	mov	sp, r7
 802886a:	bd80      	pop	{r7, pc}
 802886c:	08037584 	.word	0x08037584
 8028870:	0803785c 	.word	0x0803785c
 8028874:	080375dc 	.word	0x080375dc
 8028878:	08037878 	.word	0x08037878
 802887c:	08029ed9 	.word	0x08029ed9
 8028880:	0803789c 	.word	0x0803789c

08028884 <netconn_close_shutdown>:
 * @param how fully close or only shutdown one side?
 * @return ERR_OK if the netconn was closed, any other err_t on error
 */
static err_t
netconn_close_shutdown(struct netconn *conn, u8_t how)
{
 8028884:	b580      	push	{r7, lr}
 8028886:	b08c      	sub	sp, #48	; 0x30
 8028888:	af00      	add	r7, sp, #0
 802888a:	6078      	str	r0, [r7, #4]
 802888c:	460b      	mov	r3, r1
 802888e:	70fb      	strb	r3, [r7, #3]
  API_MSG_VAR_DECLARE(msg);
  err_t err;
  LWIP_UNUSED_ARG(how);

  LWIP_ERROR("netconn_close: invalid conn",  (conn != NULL), return ERR_ARG;);
 8028890:	687b      	ldr	r3, [r7, #4]
 8028892:	2b00      	cmp	r3, #0
 8028894:	d109      	bne.n	80288aa <netconn_close_shutdown+0x26>
 8028896:	4b0f      	ldr	r3, [pc, #60]	; (80288d4 <netconn_close_shutdown+0x50>)
 8028898:	f240 4247 	movw	r2, #1095	; 0x447
 802889c:	490e      	ldr	r1, [pc, #56]	; (80288d8 <netconn_close_shutdown+0x54>)
 802889e:	480f      	ldr	r0, [pc, #60]	; (80288dc <netconn_close_shutdown+0x58>)
 80288a0:	f00d fc7a 	bl	8036198 <iprintf>
 80288a4:	f06f 030f 	mvn.w	r3, #15
 80288a8:	e010      	b.n	80288cc <netconn_close_shutdown+0x48>

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
 80288aa:	687b      	ldr	r3, [r7, #4]
 80288ac:	60fb      	str	r3, [r7, #12]
#if LWIP_TCP
  /* shutting down both ends is the same as closing */
  API_MSG_VAR_REF(msg).msg.sd.shut = how;
 80288ae:	78fb      	ldrb	r3, [r7, #3]
 80288b0:	753b      	strb	r3, [r7, #20]
#if LWIP_SO_SNDTIMEO || LWIP_SO_LINGER
  /* get the time we started, which is later compared to
     sys_now() + conn->send_timeout */
  API_MSG_VAR_REF(msg).msg.sd.time_started = sys_now();
#else /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
  API_MSG_VAR_REF(msg).msg.sd.polls_left =
 80288b2:	2329      	movs	r3, #41	; 0x29
 80288b4:	757b      	strb	r3, [r7, #21]
    ((LWIP_TCP_CLOSE_TIMEOUT_MS_DEFAULT + TCP_SLOW_INTERVAL - 1) / TCP_SLOW_INTERVAL) + 1;
#endif /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
#endif /* LWIP_TCP */
  err = netconn_apimsg(lwip_netconn_do_close, &API_MSG_VAR_REF(msg));
 80288b6:	f107 030c 	add.w	r3, r7, #12
 80288ba:	4619      	mov	r1, r3
 80288bc:	4808      	ldr	r0, [pc, #32]	; (80288e0 <netconn_close_shutdown+0x5c>)
 80288be:	f7ff fb35 	bl	8027f2c <netconn_apimsg>
 80288c2:	4603      	mov	r3, r0
 80288c4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  API_MSG_VAR_FREE(msg);

  return err;
 80288c8:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
}
 80288cc:	4618      	mov	r0, r3
 80288ce:	3730      	adds	r7, #48	; 0x30
 80288d0:	46bd      	mov	sp, r7
 80288d2:	bd80      	pop	{r7, pc}
 80288d4:	08037584 	.word	0x08037584
 80288d8:	080378c0 	.word	0x080378c0
 80288dc:	080375dc 	.word	0x080375dc
 80288e0:	08029ff1 	.word	0x08029ff1

080288e4 <netconn_close>:
 * @param conn the TCP netconn to close
 * @return ERR_OK if the netconn was closed, any other err_t on error
 */
err_t
netconn_close(struct netconn *conn)
{
 80288e4:	b580      	push	{r7, lr}
 80288e6:	b082      	sub	sp, #8
 80288e8:	af00      	add	r7, sp, #0
 80288ea:	6078      	str	r0, [r7, #4]
  /* shutting down both ends is the same as closing */
  return netconn_close_shutdown(conn, NETCONN_SHUT_RDWR);
 80288ec:	2103      	movs	r1, #3
 80288ee:	6878      	ldr	r0, [r7, #4]
 80288f0:	f7ff ffc8 	bl	8028884 <netconn_close_shutdown>
 80288f4:	4603      	mov	r3, r0
}
 80288f6:	4618      	mov	r0, r3
 80288f8:	3708      	adds	r7, #8
 80288fa:	46bd      	mov	sp, r7
 80288fc:	bd80      	pop	{r7, pc}

080288fe <netconn_err>:
 * @param conn the netconn to get the error from
 * @return and pending error or ERR_OK if no error was pending
 */
err_t
netconn_err(struct netconn *conn)
{
 80288fe:	b580      	push	{r7, lr}
 8028900:	b084      	sub	sp, #16
 8028902:	af00      	add	r7, sp, #0
 8028904:	6078      	str	r0, [r7, #4]
  err_t err;
  SYS_ARCH_DECL_PROTECT(lev);
  if (conn == NULL) {
 8028906:	687b      	ldr	r3, [r7, #4]
 8028908:	2b00      	cmp	r3, #0
 802890a:	d101      	bne.n	8028910 <netconn_err+0x12>
    return ERR_OK;
 802890c:	2300      	movs	r3, #0
 802890e:	e00d      	b.n	802892c <netconn_err+0x2e>
  }
  SYS_ARCH_PROTECT(lev);
 8028910:	f00d f9d6 	bl	8035cc0 <sys_arch_protect>
 8028914:	60f8      	str	r0, [r7, #12]
  err = conn->pending_err;
 8028916:	687b      	ldr	r3, [r7, #4]
 8028918:	7a1b      	ldrb	r3, [r3, #8]
 802891a:	72fb      	strb	r3, [r7, #11]
  conn->pending_err = ERR_OK;
 802891c:	687b      	ldr	r3, [r7, #4]
 802891e:	2200      	movs	r2, #0
 8028920:	721a      	strb	r2, [r3, #8]
  SYS_ARCH_UNPROTECT(lev);
 8028922:	68f8      	ldr	r0, [r7, #12]
 8028924:	f00d f9da 	bl	8035cdc <sys_arch_unprotect>
  return err;
 8028928:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 802892c:	4618      	mov	r0, r3
 802892e:	3710      	adds	r7, #16
 8028930:	46bd      	mov	sp, r7
 8028932:	bd80      	pop	{r7, pc}

08028934 <lwip_netconn_err_to_msg>:
const u8_t netconn_closed = 0;

/** Translate an error to a unique void* passed via an mbox */
static void *
lwip_netconn_err_to_msg(err_t err)
{
 8028934:	b580      	push	{r7, lr}
 8028936:	b082      	sub	sp, #8
 8028938:	af00      	add	r7, sp, #0
 802893a:	4603      	mov	r3, r0
 802893c:	71fb      	strb	r3, [r7, #7]
  switch (err) {
 802893e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8028942:	f113 0f0d 	cmn.w	r3, #13
 8028946:	d009      	beq.n	802895c <lwip_netconn_err_to_msg+0x28>
 8028948:	f113 0f0d 	cmn.w	r3, #13
 802894c:	dc0c      	bgt.n	8028968 <lwip_netconn_err_to_msg+0x34>
 802894e:	f113 0f0f 	cmn.w	r3, #15
 8028952:	d007      	beq.n	8028964 <lwip_netconn_err_to_msg+0x30>
 8028954:	f113 0f0e 	cmn.w	r3, #14
 8028958:	d002      	beq.n	8028960 <lwip_netconn_err_to_msg+0x2c>
 802895a:	e005      	b.n	8028968 <lwip_netconn_err_to_msg+0x34>
    case ERR_ABRT:
      return LWIP_CONST_CAST(void *, &netconn_aborted);
 802895c:	4b0a      	ldr	r3, [pc, #40]	; (8028988 <lwip_netconn_err_to_msg+0x54>)
 802895e:	e00e      	b.n	802897e <lwip_netconn_err_to_msg+0x4a>
    case ERR_RST:
      return LWIP_CONST_CAST(void *, &netconn_reset);
 8028960:	4b0a      	ldr	r3, [pc, #40]	; (802898c <lwip_netconn_err_to_msg+0x58>)
 8028962:	e00c      	b.n	802897e <lwip_netconn_err_to_msg+0x4a>
    case ERR_CLSD:
      return LWIP_CONST_CAST(void *, &netconn_closed);
 8028964:	4b0a      	ldr	r3, [pc, #40]	; (8028990 <lwip_netconn_err_to_msg+0x5c>)
 8028966:	e00a      	b.n	802897e <lwip_netconn_err_to_msg+0x4a>
    default:
      LWIP_ASSERT("unhandled error", err == ERR_OK);
 8028968:	f997 3007 	ldrsb.w	r3, [r7, #7]
 802896c:	2b00      	cmp	r3, #0
 802896e:	d005      	beq.n	802897c <lwip_netconn_err_to_msg+0x48>
 8028970:	4b08      	ldr	r3, [pc, #32]	; (8028994 <lwip_netconn_err_to_msg+0x60>)
 8028972:	227d      	movs	r2, #125	; 0x7d
 8028974:	4908      	ldr	r1, [pc, #32]	; (8028998 <lwip_netconn_err_to_msg+0x64>)
 8028976:	4809      	ldr	r0, [pc, #36]	; (802899c <lwip_netconn_err_to_msg+0x68>)
 8028978:	f00d fc0e 	bl	8036198 <iprintf>
      return NULL;
 802897c:	2300      	movs	r3, #0
  }
}
 802897e:	4618      	mov	r0, r3
 8028980:	3708      	adds	r7, #8
 8028982:	46bd      	mov	sp, r7
 8028984:	bd80      	pop	{r7, pc}
 8028986:	bf00      	nop
 8028988:	0803aa7c 	.word	0x0803aa7c
 802898c:	0803aa7d 	.word	0x0803aa7d
 8028990:	0803aa7e 	.word	0x0803aa7e
 8028994:	080378dc 	.word	0x080378dc
 8028998:	08037910 	.word	0x08037910
 802899c:	08037920 	.word	0x08037920

080289a0 <lwip_netconn_is_err_msg>:

int
lwip_netconn_is_err_msg(void *msg, err_t *err)
{
 80289a0:	b580      	push	{r7, lr}
 80289a2:	b082      	sub	sp, #8
 80289a4:	af00      	add	r7, sp, #0
 80289a6:	6078      	str	r0, [r7, #4]
 80289a8:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("err != NULL", err != NULL);
 80289aa:	683b      	ldr	r3, [r7, #0]
 80289ac:	2b00      	cmp	r3, #0
 80289ae:	d105      	bne.n	80289bc <lwip_netconn_is_err_msg+0x1c>
 80289b0:	4b12      	ldr	r3, [pc, #72]	; (80289fc <lwip_netconn_is_err_msg+0x5c>)
 80289b2:	2285      	movs	r2, #133	; 0x85
 80289b4:	4912      	ldr	r1, [pc, #72]	; (8028a00 <lwip_netconn_is_err_msg+0x60>)
 80289b6:	4813      	ldr	r0, [pc, #76]	; (8028a04 <lwip_netconn_is_err_msg+0x64>)
 80289b8:	f00d fbee 	bl	8036198 <iprintf>

  if (msg == &netconn_aborted) {
 80289bc:	687b      	ldr	r3, [r7, #4]
 80289be:	4a12      	ldr	r2, [pc, #72]	; (8028a08 <lwip_netconn_is_err_msg+0x68>)
 80289c0:	4293      	cmp	r3, r2
 80289c2:	d104      	bne.n	80289ce <lwip_netconn_is_err_msg+0x2e>
    *err = ERR_ABRT;
 80289c4:	683b      	ldr	r3, [r7, #0]
 80289c6:	22f3      	movs	r2, #243	; 0xf3
 80289c8:	701a      	strb	r2, [r3, #0]
    return 1;
 80289ca:	2301      	movs	r3, #1
 80289cc:	e012      	b.n	80289f4 <lwip_netconn_is_err_msg+0x54>
  } else if (msg == &netconn_reset) {
 80289ce:	687b      	ldr	r3, [r7, #4]
 80289d0:	4a0e      	ldr	r2, [pc, #56]	; (8028a0c <lwip_netconn_is_err_msg+0x6c>)
 80289d2:	4293      	cmp	r3, r2
 80289d4:	d104      	bne.n	80289e0 <lwip_netconn_is_err_msg+0x40>
    *err = ERR_RST;
 80289d6:	683b      	ldr	r3, [r7, #0]
 80289d8:	22f2      	movs	r2, #242	; 0xf2
 80289da:	701a      	strb	r2, [r3, #0]
    return 1;
 80289dc:	2301      	movs	r3, #1
 80289de:	e009      	b.n	80289f4 <lwip_netconn_is_err_msg+0x54>
  } else if (msg == &netconn_closed) {
 80289e0:	687b      	ldr	r3, [r7, #4]
 80289e2:	4a0b      	ldr	r2, [pc, #44]	; (8028a10 <lwip_netconn_is_err_msg+0x70>)
 80289e4:	4293      	cmp	r3, r2
 80289e6:	d104      	bne.n	80289f2 <lwip_netconn_is_err_msg+0x52>
    *err = ERR_CLSD;
 80289e8:	683b      	ldr	r3, [r7, #0]
 80289ea:	22f1      	movs	r2, #241	; 0xf1
 80289ec:	701a      	strb	r2, [r3, #0]
    return 1;
 80289ee:	2301      	movs	r3, #1
 80289f0:	e000      	b.n	80289f4 <lwip_netconn_is_err_msg+0x54>
  }
  return 0;
 80289f2:	2300      	movs	r3, #0
}
 80289f4:	4618      	mov	r0, r3
 80289f6:	3708      	adds	r7, #8
 80289f8:	46bd      	mov	sp, r7
 80289fa:	bd80      	pop	{r7, pc}
 80289fc:	080378dc 	.word	0x080378dc
 8028a00:	08037948 	.word	0x08037948
 8028a04:	08037920 	.word	0x08037920
 8028a08:	0803aa7c 	.word	0x0803aa7c
 8028a0c:	0803aa7d 	.word	0x0803aa7d
 8028a10:	0803aa7e 	.word	0x0803aa7e

08028a14 <recv_udp>:
 * @see udp.h (struct udp_pcb.recv) for parameters
 */
static void
recv_udp(void *arg, struct udp_pcb *pcb, struct pbuf *p,
         const ip_addr_t *addr, u16_t port)
{
 8028a14:	b580      	push	{r7, lr}
 8028a16:	b088      	sub	sp, #32
 8028a18:	af00      	add	r7, sp, #0
 8028a1a:	60f8      	str	r0, [r7, #12]
 8028a1c:	60b9      	str	r1, [r7, #8]
 8028a1e:	607a      	str	r2, [r7, #4]
 8028a20:	603b      	str	r3, [r7, #0]
#if LWIP_SO_RCVBUF
  int recv_avail;
#endif /* LWIP_SO_RCVBUF */

  LWIP_UNUSED_ARG(pcb); /* only used for asserts... */
  LWIP_ASSERT("recv_udp must have a pcb argument", pcb != NULL);
 8028a22:	68bb      	ldr	r3, [r7, #8]
 8028a24:	2b00      	cmp	r3, #0
 8028a26:	d105      	bne.n	8028a34 <recv_udp+0x20>
 8028a28:	4b34      	ldr	r3, [pc, #208]	; (8028afc <recv_udp+0xe8>)
 8028a2a:	22e5      	movs	r2, #229	; 0xe5
 8028a2c:	4934      	ldr	r1, [pc, #208]	; (8028b00 <recv_udp+0xec>)
 8028a2e:	4835      	ldr	r0, [pc, #212]	; (8028b04 <recv_udp+0xf0>)
 8028a30:	f00d fbb2 	bl	8036198 <iprintf>
  LWIP_ASSERT("recv_udp must have an argument", arg != NULL);
 8028a34:	68fb      	ldr	r3, [r7, #12]
 8028a36:	2b00      	cmp	r3, #0
 8028a38:	d105      	bne.n	8028a46 <recv_udp+0x32>
 8028a3a:	4b30      	ldr	r3, [pc, #192]	; (8028afc <recv_udp+0xe8>)
 8028a3c:	22e6      	movs	r2, #230	; 0xe6
 8028a3e:	4932      	ldr	r1, [pc, #200]	; (8028b08 <recv_udp+0xf4>)
 8028a40:	4830      	ldr	r0, [pc, #192]	; (8028b04 <recv_udp+0xf0>)
 8028a42:	f00d fba9 	bl	8036198 <iprintf>
  conn = (struct netconn *)arg;
 8028a46:	68fb      	ldr	r3, [r7, #12]
 8028a48:	61fb      	str	r3, [r7, #28]

  if (conn == NULL) {
 8028a4a:	69fb      	ldr	r3, [r7, #28]
 8028a4c:	2b00      	cmp	r3, #0
 8028a4e:	d103      	bne.n	8028a58 <recv_udp+0x44>
    pbuf_free(p);
 8028a50:	6878      	ldr	r0, [r7, #4]
 8028a52:	f003 fa23 	bl	802be9c <pbuf_free>
    return;
 8028a56:	e04d      	b.n	8028af4 <recv_udp+0xe0>
  }

  LWIP_ASSERT("recv_udp: recv for wrong pcb!", conn->pcb.udp == pcb);
 8028a58:	69fb      	ldr	r3, [r7, #28]
 8028a5a:	685b      	ldr	r3, [r3, #4]
 8028a5c:	68ba      	ldr	r2, [r7, #8]
 8028a5e:	429a      	cmp	r2, r3
 8028a60:	d005      	beq.n	8028a6e <recv_udp+0x5a>
 8028a62:	4b26      	ldr	r3, [pc, #152]	; (8028afc <recv_udp+0xe8>)
 8028a64:	22ee      	movs	r2, #238	; 0xee
 8028a66:	4929      	ldr	r1, [pc, #164]	; (8028b0c <recv_udp+0xf8>)
 8028a68:	4826      	ldr	r0, [pc, #152]	; (8028b04 <recv_udp+0xf0>)
 8028a6a:	f00d fb95 	bl	8036198 <iprintf>
#if LWIP_SO_RCVBUF
  SYS_ARCH_GET(conn->recv_avail, recv_avail);
  if (!NETCONN_MBOX_VALID(conn, &conn->recvmbox) ||
      ((recv_avail + (int)(p->tot_len)) > conn->recv_bufsize)) {
#else  /* LWIP_SO_RCVBUF */
  if (!NETCONN_MBOX_VALID(conn, &conn->recvmbox)) {
 8028a6e:	69fb      	ldr	r3, [r7, #28]
 8028a70:	3310      	adds	r3, #16
 8028a72:	4618      	mov	r0, r3
 8028a74:	f00c ffbd 	bl	80359f2 <sys_mbox_valid>
 8028a78:	4603      	mov	r3, r0
 8028a7a:	2b00      	cmp	r3, #0
 8028a7c:	d103      	bne.n	8028a86 <recv_udp+0x72>
#endif /* LWIP_SO_RCVBUF */
    pbuf_free(p);
 8028a7e:	6878      	ldr	r0, [r7, #4]
 8028a80:	f003 fa0c 	bl	802be9c <pbuf_free>
    return;
 8028a84:	e036      	b.n	8028af4 <recv_udp+0xe0>
  }

  buf = (struct netbuf *)memp_malloc(MEMP_NETBUF);
 8028a86:	2006      	movs	r0, #6
 8028a88:	f002 fae8 	bl	802b05c <memp_malloc>
 8028a8c:	61b8      	str	r0, [r7, #24]
  if (buf == NULL) {
 8028a8e:	69bb      	ldr	r3, [r7, #24]
 8028a90:	2b00      	cmp	r3, #0
 8028a92:	d103      	bne.n	8028a9c <recv_udp+0x88>
    pbuf_free(p);
 8028a94:	6878      	ldr	r0, [r7, #4]
 8028a96:	f003 fa01 	bl	802be9c <pbuf_free>
    return;
 8028a9a:	e02b      	b.n	8028af4 <recv_udp+0xe0>
  } else {
    buf->p = p;
 8028a9c:	69bb      	ldr	r3, [r7, #24]
 8028a9e:	687a      	ldr	r2, [r7, #4]
 8028aa0:	601a      	str	r2, [r3, #0]
    buf->ptr = p;
 8028aa2:	69bb      	ldr	r3, [r7, #24]
 8028aa4:	687a      	ldr	r2, [r7, #4]
 8028aa6:	605a      	str	r2, [r3, #4]
    ip_addr_set(&buf->addr, addr);
 8028aa8:	683b      	ldr	r3, [r7, #0]
 8028aaa:	2b00      	cmp	r3, #0
 8028aac:	d002      	beq.n	8028ab4 <recv_udp+0xa0>
 8028aae:	683b      	ldr	r3, [r7, #0]
 8028ab0:	681b      	ldr	r3, [r3, #0]
 8028ab2:	e000      	b.n	8028ab6 <recv_udp+0xa2>
 8028ab4:	2300      	movs	r3, #0
 8028ab6:	69ba      	ldr	r2, [r7, #24]
 8028ab8:	6093      	str	r3, [r2, #8]
    buf->port = port;
 8028aba:	69bb      	ldr	r3, [r7, #24]
 8028abc:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8028abe:	819a      	strh	r2, [r3, #12]
      buf->toport_chksum = udphdr->dest;
    }
#endif /* LWIP_NETBUF_RECVINFO */
  }

  len = p->tot_len;
 8028ac0:	687b      	ldr	r3, [r7, #4]
 8028ac2:	891b      	ldrh	r3, [r3, #8]
 8028ac4:	82fb      	strh	r3, [r7, #22]
  if (sys_mbox_trypost(&conn->recvmbox, buf) != ERR_OK) {
 8028ac6:	69fb      	ldr	r3, [r7, #28]
 8028ac8:	3310      	adds	r3, #16
 8028aca:	69b9      	ldr	r1, [r7, #24]
 8028acc:	4618      	mov	r0, r3
 8028ace:	f00c ff11 	bl	80358f4 <sys_mbox_trypost>
 8028ad2:	4603      	mov	r3, r0
 8028ad4:	2b00      	cmp	r3, #0
 8028ad6:	d003      	beq.n	8028ae0 <recv_udp+0xcc>
    netbuf_delete(buf);
 8028ad8:	69b8      	ldr	r0, [r7, #24]
 8028ada:	f001 fb15 	bl	802a108 <netbuf_delete>
    return;
 8028ade:	e009      	b.n	8028af4 <recv_udp+0xe0>
  } else {
#if LWIP_SO_RCVBUF
    SYS_ARCH_INC(conn->recv_avail, len);
#endif /* LWIP_SO_RCVBUF */
    /* Register event with callback */
    API_EVENT(conn, NETCONN_EVT_RCVPLUS, len);
 8028ae0:	69fb      	ldr	r3, [r7, #28]
 8028ae2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8028ae4:	2b00      	cmp	r3, #0
 8028ae6:	d005      	beq.n	8028af4 <recv_udp+0xe0>
 8028ae8:	69fb      	ldr	r3, [r7, #28]
 8028aea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8028aec:	8afa      	ldrh	r2, [r7, #22]
 8028aee:	2100      	movs	r1, #0
 8028af0:	69f8      	ldr	r0, [r7, #28]
 8028af2:	4798      	blx	r3
  }
}
 8028af4:	3720      	adds	r7, #32
 8028af6:	46bd      	mov	sp, r7
 8028af8:	bd80      	pop	{r7, pc}
 8028afa:	bf00      	nop
 8028afc:	080378dc 	.word	0x080378dc
 8028b00:	08037954 	.word	0x08037954
 8028b04:	08037920 	.word	0x08037920
 8028b08:	08037978 	.word	0x08037978
 8028b0c:	08037998 	.word	0x08037998

08028b10 <recv_tcp>:
 *
 * @see tcp.h (struct tcp_pcb.recv) for parameters and return value
 */
static err_t
recv_tcp(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
 8028b10:	b580      	push	{r7, lr}
 8028b12:	b088      	sub	sp, #32
 8028b14:	af00      	add	r7, sp, #0
 8028b16:	60f8      	str	r0, [r7, #12]
 8028b18:	60b9      	str	r1, [r7, #8]
 8028b1a:	607a      	str	r2, [r7, #4]
 8028b1c:	70fb      	strb	r3, [r7, #3]
  struct netconn *conn;
  u16_t len;
  void *msg;

  LWIP_UNUSED_ARG(pcb);
  LWIP_ASSERT("recv_tcp must have a pcb argument", pcb != NULL);
 8028b1e:	68bb      	ldr	r3, [r7, #8]
 8028b20:	2b00      	cmp	r3, #0
 8028b22:	d106      	bne.n	8028b32 <recv_tcp+0x22>
 8028b24:	4b36      	ldr	r3, [pc, #216]	; (8028c00 <recv_tcp+0xf0>)
 8028b26:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8028b2a:	4936      	ldr	r1, [pc, #216]	; (8028c04 <recv_tcp+0xf4>)
 8028b2c:	4836      	ldr	r0, [pc, #216]	; (8028c08 <recv_tcp+0xf8>)
 8028b2e:	f00d fb33 	bl	8036198 <iprintf>
  LWIP_ASSERT("recv_tcp must have an argument", arg != NULL);
 8028b32:	68fb      	ldr	r3, [r7, #12]
 8028b34:	2b00      	cmp	r3, #0
 8028b36:	d106      	bne.n	8028b46 <recv_tcp+0x36>
 8028b38:	4b31      	ldr	r3, [pc, #196]	; (8028c00 <recv_tcp+0xf0>)
 8028b3a:	f240 122d 	movw	r2, #301	; 0x12d
 8028b3e:	4933      	ldr	r1, [pc, #204]	; (8028c0c <recv_tcp+0xfc>)
 8028b40:	4831      	ldr	r0, [pc, #196]	; (8028c08 <recv_tcp+0xf8>)
 8028b42:	f00d fb29 	bl	8036198 <iprintf>
  LWIP_ASSERT("err != ERR_OK unhandled", err == ERR_OK);
 8028b46:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8028b4a:	2b00      	cmp	r3, #0
 8028b4c:	d006      	beq.n	8028b5c <recv_tcp+0x4c>
 8028b4e:	4b2c      	ldr	r3, [pc, #176]	; (8028c00 <recv_tcp+0xf0>)
 8028b50:	f44f 7297 	mov.w	r2, #302	; 0x12e
 8028b54:	492e      	ldr	r1, [pc, #184]	; (8028c10 <recv_tcp+0x100>)
 8028b56:	482c      	ldr	r0, [pc, #176]	; (8028c08 <recv_tcp+0xf8>)
 8028b58:	f00d fb1e 	bl	8036198 <iprintf>
  LWIP_UNUSED_ARG(err); /* for LWIP_NOASSERT */
  conn = (struct netconn *)arg;
 8028b5c:	68fb      	ldr	r3, [r7, #12]
 8028b5e:	617b      	str	r3, [r7, #20]

  if (conn == NULL) {
 8028b60:	697b      	ldr	r3, [r7, #20]
 8028b62:	2b00      	cmp	r3, #0
 8028b64:	d102      	bne.n	8028b6c <recv_tcp+0x5c>
    return ERR_VAL;
 8028b66:	f06f 0305 	mvn.w	r3, #5
 8028b6a:	e045      	b.n	8028bf8 <recv_tcp+0xe8>
  }
  LWIP_ASSERT("recv_tcp: recv for wrong pcb!", conn->pcb.tcp == pcb);
 8028b6c:	697b      	ldr	r3, [r7, #20]
 8028b6e:	685b      	ldr	r3, [r3, #4]
 8028b70:	68ba      	ldr	r2, [r7, #8]
 8028b72:	429a      	cmp	r2, r3
 8028b74:	d006      	beq.n	8028b84 <recv_tcp+0x74>
 8028b76:	4b22      	ldr	r3, [pc, #136]	; (8028c00 <recv_tcp+0xf0>)
 8028b78:	f240 1235 	movw	r2, #309	; 0x135
 8028b7c:	4925      	ldr	r1, [pc, #148]	; (8028c14 <recv_tcp+0x104>)
 8028b7e:	4822      	ldr	r0, [pc, #136]	; (8028c08 <recv_tcp+0xf8>)
 8028b80:	f00d fb0a 	bl	8036198 <iprintf>

  if (!NETCONN_MBOX_VALID(conn, &conn->recvmbox)) {
 8028b84:	697b      	ldr	r3, [r7, #20]
 8028b86:	3310      	adds	r3, #16
 8028b88:	4618      	mov	r0, r3
 8028b8a:	f00c ff32 	bl	80359f2 <sys_mbox_valid>
 8028b8e:	4603      	mov	r3, r0
 8028b90:	2b00      	cmp	r3, #0
 8028b92:	d10d      	bne.n	8028bb0 <recv_tcp+0xa0>
    /* recvmbox already deleted */
    if (p != NULL) {
 8028b94:	687b      	ldr	r3, [r7, #4]
 8028b96:	2b00      	cmp	r3, #0
 8028b98:	d008      	beq.n	8028bac <recv_tcp+0x9c>
      tcp_recved(pcb, p->tot_len);
 8028b9a:	687b      	ldr	r3, [r7, #4]
 8028b9c:	891b      	ldrh	r3, [r3, #8]
 8028b9e:	4619      	mov	r1, r3
 8028ba0:	68b8      	ldr	r0, [r7, #8]
 8028ba2:	f004 f93b 	bl	802ce1c <tcp_recved>
      pbuf_free(p);
 8028ba6:	6878      	ldr	r0, [r7, #4]
 8028ba8:	f003 f978 	bl	802be9c <pbuf_free>
    }
    return ERR_OK;
 8028bac:	2300      	movs	r3, #0
 8028bae:	e023      	b.n	8028bf8 <recv_tcp+0xe8>
  }
  /* Unlike for UDP or RAW pcbs, don't check for available space
     using recv_avail since that could break the connection
     (data is already ACKed) */

  if (p != NULL) {
 8028bb0:	687b      	ldr	r3, [r7, #4]
 8028bb2:	2b00      	cmp	r3, #0
 8028bb4:	d005      	beq.n	8028bc2 <recv_tcp+0xb2>
    msg = p;
 8028bb6:	687b      	ldr	r3, [r7, #4]
 8028bb8:	61bb      	str	r3, [r7, #24]
    len = p->tot_len;
 8028bba:	687b      	ldr	r3, [r7, #4]
 8028bbc:	891b      	ldrh	r3, [r3, #8]
 8028bbe:	83fb      	strh	r3, [r7, #30]
 8028bc0:	e003      	b.n	8028bca <recv_tcp+0xba>
  } else {
    msg = LWIP_CONST_CAST(void *, &netconn_closed);
 8028bc2:	4b15      	ldr	r3, [pc, #84]	; (8028c18 <recv_tcp+0x108>)
 8028bc4:	61bb      	str	r3, [r7, #24]
    len = 0;
 8028bc6:	2300      	movs	r3, #0
 8028bc8:	83fb      	strh	r3, [r7, #30]
  }

  if (sys_mbox_trypost(&conn->recvmbox, msg) != ERR_OK) {
 8028bca:	697b      	ldr	r3, [r7, #20]
 8028bcc:	3310      	adds	r3, #16
 8028bce:	69b9      	ldr	r1, [r7, #24]
 8028bd0:	4618      	mov	r0, r3
 8028bd2:	f00c fe8f 	bl	80358f4 <sys_mbox_trypost>
 8028bd6:	4603      	mov	r3, r0
 8028bd8:	2b00      	cmp	r3, #0
 8028bda:	d002      	beq.n	8028be2 <recv_tcp+0xd2>
    /* don't deallocate p: it is presented to us later again from tcp_fasttmr! */
    return ERR_MEM;
 8028bdc:	f04f 33ff 	mov.w	r3, #4294967295
 8028be0:	e00a      	b.n	8028bf8 <recv_tcp+0xe8>
  } else {
#if LWIP_SO_RCVBUF
    SYS_ARCH_INC(conn->recv_avail, len);
#endif /* LWIP_SO_RCVBUF */
    /* Register event with callback */
    API_EVENT(conn, NETCONN_EVT_RCVPLUS, len);
 8028be2:	697b      	ldr	r3, [r7, #20]
 8028be4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8028be6:	2b00      	cmp	r3, #0
 8028be8:	d005      	beq.n	8028bf6 <recv_tcp+0xe6>
 8028bea:	697b      	ldr	r3, [r7, #20]
 8028bec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8028bee:	8bfa      	ldrh	r2, [r7, #30]
 8028bf0:	2100      	movs	r1, #0
 8028bf2:	6978      	ldr	r0, [r7, #20]
 8028bf4:	4798      	blx	r3
  }

  return ERR_OK;
 8028bf6:	2300      	movs	r3, #0
}
 8028bf8:	4618      	mov	r0, r3
 8028bfa:	3720      	adds	r7, #32
 8028bfc:	46bd      	mov	sp, r7
 8028bfe:	bd80      	pop	{r7, pc}
 8028c00:	080378dc 	.word	0x080378dc
 8028c04:	080379b8 	.word	0x080379b8
 8028c08:	08037920 	.word	0x08037920
 8028c0c:	080379dc 	.word	0x080379dc
 8028c10:	080379fc 	.word	0x080379fc
 8028c14:	08037a14 	.word	0x08037a14
 8028c18:	0803aa7e 	.word	0x0803aa7e

08028c1c <poll_tcp>:
 *
 * @see tcp.h (struct tcp_pcb.poll) for parameters and return value
 */
static err_t
poll_tcp(void *arg, struct tcp_pcb *pcb)
{
 8028c1c:	b580      	push	{r7, lr}
 8028c1e:	b084      	sub	sp, #16
 8028c20:	af00      	add	r7, sp, #0
 8028c22:	6078      	str	r0, [r7, #4]
 8028c24:	6039      	str	r1, [r7, #0]
  struct netconn *conn = (struct netconn *)arg;
 8028c26:	687b      	ldr	r3, [r7, #4]
 8028c28:	60fb      	str	r3, [r7, #12]

  LWIP_UNUSED_ARG(pcb);
  LWIP_ASSERT("conn != NULL", (conn != NULL));
 8028c2a:	68fb      	ldr	r3, [r7, #12]
 8028c2c:	2b00      	cmp	r3, #0
 8028c2e:	d106      	bne.n	8028c3e <poll_tcp+0x22>
 8028c30:	4b2b      	ldr	r3, [pc, #172]	; (8028ce0 <poll_tcp+0xc4>)
 8028c32:	f44f 72b5 	mov.w	r2, #362	; 0x16a
 8028c36:	492b      	ldr	r1, [pc, #172]	; (8028ce4 <poll_tcp+0xc8>)
 8028c38:	482b      	ldr	r0, [pc, #172]	; (8028ce8 <poll_tcp+0xcc>)
 8028c3a:	f00d faad 	bl	8036198 <iprintf>

  if (conn->state == NETCONN_WRITE) {
 8028c3e:	68fb      	ldr	r3, [r7, #12]
 8028c40:	785b      	ldrb	r3, [r3, #1]
 8028c42:	2b01      	cmp	r3, #1
 8028c44:	d104      	bne.n	8028c50 <poll_tcp+0x34>
    lwip_netconn_do_writemore(conn  WRITE_DELAYED);
 8028c46:	2101      	movs	r1, #1
 8028c48:	68f8      	ldr	r0, [r7, #12]
 8028c4a:	f000 ff75 	bl	8029b38 <lwip_netconn_do_writemore>
 8028c4e:	e016      	b.n	8028c7e <poll_tcp+0x62>
  } else if (conn->state == NETCONN_CLOSE) {
 8028c50:	68fb      	ldr	r3, [r7, #12]
 8028c52:	785b      	ldrb	r3, [r3, #1]
 8028c54:	2b04      	cmp	r3, #4
 8028c56:	d112      	bne.n	8028c7e <poll_tcp+0x62>
#if !LWIP_SO_SNDTIMEO && !LWIP_SO_LINGER
    if (conn->current_msg && conn->current_msg->msg.sd.polls_left) {
 8028c58:	68fb      	ldr	r3, [r7, #12]
 8028c5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8028c5c:	2b00      	cmp	r3, #0
 8028c5e:	d00a      	beq.n	8028c76 <poll_tcp+0x5a>
 8028c60:	68fb      	ldr	r3, [r7, #12]
 8028c62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8028c64:	7a5b      	ldrb	r3, [r3, #9]
 8028c66:	2b00      	cmp	r3, #0
 8028c68:	d005      	beq.n	8028c76 <poll_tcp+0x5a>
      conn->current_msg->msg.sd.polls_left--;
 8028c6a:	68fb      	ldr	r3, [r7, #12]
 8028c6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8028c6e:	7a5a      	ldrb	r2, [r3, #9]
 8028c70:	3a01      	subs	r2, #1
 8028c72:	b2d2      	uxtb	r2, r2
 8028c74:	725a      	strb	r2, [r3, #9]
    }
#endif /* !LWIP_SO_SNDTIMEO && !LWIP_SO_LINGER */
    lwip_netconn_do_close_internal(conn  WRITE_DELAYED);
 8028c76:	2101      	movs	r1, #1
 8028c78:	68f8      	ldr	r0, [r7, #12]
 8028c7a:	f000 fc05 	bl	8029488 <lwip_netconn_do_close_internal>
  }
  /* @todo: implement connect timeout here? */

  /* Did a nonblocking write fail before? Then check available write-space. */
  if (conn->flags & NETCONN_FLAG_CHECK_WRITESPACE) {
 8028c7e:	68fb      	ldr	r3, [r7, #12]
 8028c80:	f893 3020 	ldrb.w	r3, [r3, #32]
 8028c84:	f003 0310 	and.w	r3, r3, #16
 8028c88:	2b00      	cmp	r3, #0
 8028c8a:	d023      	beq.n	8028cd4 <poll_tcp+0xb8>
    /* If the queued byte- or pbuf-count drops below the configured low-water limit,
       let select mark this pcb as writable again. */
    if ((conn->pcb.tcp != NULL) && (tcp_sndbuf(conn->pcb.tcp) > TCP_SNDLOWAT) &&
 8028c8c:	68fb      	ldr	r3, [r7, #12]
 8028c8e:	685b      	ldr	r3, [r3, #4]
 8028c90:	2b00      	cmp	r3, #0
 8028c92:	d01f      	beq.n	8028cd4 <poll_tcp+0xb8>
 8028c94:	68fb      	ldr	r3, [r7, #12]
 8028c96:	685b      	ldr	r3, [r3, #4]
 8028c98:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 8028c9c:	f5b3 6f86 	cmp.w	r3, #1072	; 0x430
 8028ca0:	d318      	bcc.n	8028cd4 <poll_tcp+0xb8>
        (tcp_sndqueuelen(conn->pcb.tcp) < TCP_SNDQUEUELOWAT)) {
 8028ca2:	68fb      	ldr	r3, [r7, #12]
 8028ca4:	685b      	ldr	r3, [r3, #4]
 8028ca6:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
    if ((conn->pcb.tcp != NULL) && (tcp_sndbuf(conn->pcb.tcp) > TCP_SNDLOWAT) &&
 8028caa:	2b04      	cmp	r3, #4
 8028cac:	d812      	bhi.n	8028cd4 <poll_tcp+0xb8>
      netconn_clear_flags(conn, NETCONN_FLAG_CHECK_WRITESPACE);
 8028cae:	68fb      	ldr	r3, [r7, #12]
 8028cb0:	f893 3020 	ldrb.w	r3, [r3, #32]
 8028cb4:	f023 0310 	bic.w	r3, r3, #16
 8028cb8:	b2da      	uxtb	r2, r3
 8028cba:	68fb      	ldr	r3, [r7, #12]
 8028cbc:	f883 2020 	strb.w	r2, [r3, #32]
      API_EVENT(conn, NETCONN_EVT_SENDPLUS, 0);
 8028cc0:	68fb      	ldr	r3, [r7, #12]
 8028cc2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8028cc4:	2b00      	cmp	r3, #0
 8028cc6:	d005      	beq.n	8028cd4 <poll_tcp+0xb8>
 8028cc8:	68fb      	ldr	r3, [r7, #12]
 8028cca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8028ccc:	2200      	movs	r2, #0
 8028cce:	2102      	movs	r1, #2
 8028cd0:	68f8      	ldr	r0, [r7, #12]
 8028cd2:	4798      	blx	r3
    }
  }

  return ERR_OK;
 8028cd4:	2300      	movs	r3, #0
}
 8028cd6:	4618      	mov	r0, r3
 8028cd8:	3710      	adds	r7, #16
 8028cda:	46bd      	mov	sp, r7
 8028cdc:	bd80      	pop	{r7, pc}
 8028cde:	bf00      	nop
 8028ce0:	080378dc 	.word	0x080378dc
 8028ce4:	08037a34 	.word	0x08037a34
 8028ce8:	08037920 	.word	0x08037920

08028cec <sent_tcp>:
 *
 * @see tcp.h (struct tcp_pcb.sent) for parameters and return value
 */
static err_t
sent_tcp(void *arg, struct tcp_pcb *pcb, u16_t len)
{
 8028cec:	b580      	push	{r7, lr}
 8028cee:	b086      	sub	sp, #24
 8028cf0:	af00      	add	r7, sp, #0
 8028cf2:	60f8      	str	r0, [r7, #12]
 8028cf4:	60b9      	str	r1, [r7, #8]
 8028cf6:	4613      	mov	r3, r2
 8028cf8:	80fb      	strh	r3, [r7, #6]
  struct netconn *conn = (struct netconn *)arg;
 8028cfa:	68fb      	ldr	r3, [r7, #12]
 8028cfc:	617b      	str	r3, [r7, #20]

  LWIP_UNUSED_ARG(pcb);
  LWIP_ASSERT("conn != NULL", (conn != NULL));
 8028cfe:	697b      	ldr	r3, [r7, #20]
 8028d00:	2b00      	cmp	r3, #0
 8028d02:	d106      	bne.n	8028d12 <sent_tcp+0x26>
 8028d04:	4b21      	ldr	r3, [pc, #132]	; (8028d8c <sent_tcp+0xa0>)
 8028d06:	f240 1293 	movw	r2, #403	; 0x193
 8028d0a:	4921      	ldr	r1, [pc, #132]	; (8028d90 <sent_tcp+0xa4>)
 8028d0c:	4821      	ldr	r0, [pc, #132]	; (8028d94 <sent_tcp+0xa8>)
 8028d0e:	f00d fa43 	bl	8036198 <iprintf>

  if (conn) {
 8028d12:	697b      	ldr	r3, [r7, #20]
 8028d14:	2b00      	cmp	r3, #0
 8028d16:	d034      	beq.n	8028d82 <sent_tcp+0x96>
    if (conn->state == NETCONN_WRITE) {
 8028d18:	697b      	ldr	r3, [r7, #20]
 8028d1a:	785b      	ldrb	r3, [r3, #1]
 8028d1c:	2b01      	cmp	r3, #1
 8028d1e:	d104      	bne.n	8028d2a <sent_tcp+0x3e>
      lwip_netconn_do_writemore(conn  WRITE_DELAYED);
 8028d20:	2101      	movs	r1, #1
 8028d22:	6978      	ldr	r0, [r7, #20]
 8028d24:	f000 ff08 	bl	8029b38 <lwip_netconn_do_writemore>
 8028d28:	e007      	b.n	8028d3a <sent_tcp+0x4e>
    } else if (conn->state == NETCONN_CLOSE) {
 8028d2a:	697b      	ldr	r3, [r7, #20]
 8028d2c:	785b      	ldrb	r3, [r3, #1]
 8028d2e:	2b04      	cmp	r3, #4
 8028d30:	d103      	bne.n	8028d3a <sent_tcp+0x4e>
      lwip_netconn_do_close_internal(conn  WRITE_DELAYED);
 8028d32:	2101      	movs	r1, #1
 8028d34:	6978      	ldr	r0, [r7, #20]
 8028d36:	f000 fba7 	bl	8029488 <lwip_netconn_do_close_internal>
    }

    /* If the queued byte- or pbuf-count drops below the configured low-water limit,
       let select mark this pcb as writable again. */
    if ((conn->pcb.tcp != NULL) && (tcp_sndbuf(conn->pcb.tcp) > TCP_SNDLOWAT) &&
 8028d3a:	697b      	ldr	r3, [r7, #20]
 8028d3c:	685b      	ldr	r3, [r3, #4]
 8028d3e:	2b00      	cmp	r3, #0
 8028d40:	d01f      	beq.n	8028d82 <sent_tcp+0x96>
 8028d42:	697b      	ldr	r3, [r7, #20]
 8028d44:	685b      	ldr	r3, [r3, #4]
 8028d46:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 8028d4a:	f5b3 6f86 	cmp.w	r3, #1072	; 0x430
 8028d4e:	d318      	bcc.n	8028d82 <sent_tcp+0x96>
        (tcp_sndqueuelen(conn->pcb.tcp) < TCP_SNDQUEUELOWAT)) {
 8028d50:	697b      	ldr	r3, [r7, #20]
 8028d52:	685b      	ldr	r3, [r3, #4]
 8028d54:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
    if ((conn->pcb.tcp != NULL) && (tcp_sndbuf(conn->pcb.tcp) > TCP_SNDLOWAT) &&
 8028d58:	2b04      	cmp	r3, #4
 8028d5a:	d812      	bhi.n	8028d82 <sent_tcp+0x96>
      netconn_clear_flags(conn, NETCONN_FLAG_CHECK_WRITESPACE);
 8028d5c:	697b      	ldr	r3, [r7, #20]
 8028d5e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8028d62:	f023 0310 	bic.w	r3, r3, #16
 8028d66:	b2da      	uxtb	r2, r3
 8028d68:	697b      	ldr	r3, [r7, #20]
 8028d6a:	f883 2020 	strb.w	r2, [r3, #32]
      API_EVENT(conn, NETCONN_EVT_SENDPLUS, len);
 8028d6e:	697b      	ldr	r3, [r7, #20]
 8028d70:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8028d72:	2b00      	cmp	r3, #0
 8028d74:	d005      	beq.n	8028d82 <sent_tcp+0x96>
 8028d76:	697b      	ldr	r3, [r7, #20]
 8028d78:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8028d7a:	88fa      	ldrh	r2, [r7, #6]
 8028d7c:	2102      	movs	r1, #2
 8028d7e:	6978      	ldr	r0, [r7, #20]
 8028d80:	4798      	blx	r3
    }
  }

  return ERR_OK;
 8028d82:	2300      	movs	r3, #0
}
 8028d84:	4618      	mov	r0, r3
 8028d86:	3718      	adds	r7, #24
 8028d88:	46bd      	mov	sp, r7
 8028d8a:	bd80      	pop	{r7, pc}
 8028d8c:	080378dc 	.word	0x080378dc
 8028d90:	08037a34 	.word	0x08037a34
 8028d94:	08037920 	.word	0x08037920

08028d98 <err_tcp>:
 *
 * @see tcp.h (struct tcp_pcb.err) for parameters
 */
static void
err_tcp(void *arg, err_t err)
{
 8028d98:	b580      	push	{r7, lr}
 8028d9a:	b088      	sub	sp, #32
 8028d9c:	af00      	add	r7, sp, #0
 8028d9e:	6078      	str	r0, [r7, #4]
 8028da0:	460b      	mov	r3, r1
 8028da2:	70fb      	strb	r3, [r7, #3]
  struct netconn *conn;
  enum netconn_state old_state;
  void *mbox_msg;
  SYS_ARCH_DECL_PROTECT(lev);

  conn = (struct netconn *)arg;
 8028da4:	687b      	ldr	r3, [r7, #4]
 8028da6:	61fb      	str	r3, [r7, #28]
  LWIP_ASSERT("conn != NULL", (conn != NULL));
 8028da8:	69fb      	ldr	r3, [r7, #28]
 8028daa:	2b00      	cmp	r3, #0
 8028dac:	d106      	bne.n	8028dbc <err_tcp+0x24>
 8028dae:	4b61      	ldr	r3, [pc, #388]	; (8028f34 <err_tcp+0x19c>)
 8028db0:	f44f 72dc 	mov.w	r2, #440	; 0x1b8
 8028db4:	4960      	ldr	r1, [pc, #384]	; (8028f38 <err_tcp+0x1a0>)
 8028db6:	4861      	ldr	r0, [pc, #388]	; (8028f3c <err_tcp+0x1a4>)
 8028db8:	f00d f9ee 	bl	8036198 <iprintf>

  SYS_ARCH_PROTECT(lev);
 8028dbc:	f00c ff80 	bl	8035cc0 <sys_arch_protect>
 8028dc0:	61b8      	str	r0, [r7, #24]

  /* when err is called, the pcb is deallocated, so delete the reference */
  conn->pcb.tcp = NULL;
 8028dc2:	69fb      	ldr	r3, [r7, #28]
 8028dc4:	2200      	movs	r2, #0
 8028dc6:	605a      	str	r2, [r3, #4]
  /* store pending error */
  conn->pending_err = err;
 8028dc8:	69fb      	ldr	r3, [r7, #28]
 8028dca:	78fa      	ldrb	r2, [r7, #3]
 8028dcc:	721a      	strb	r2, [r3, #8]
  /* prevent application threads from blocking on 'recvmbox'/'acceptmbox' */
  conn->flags |= NETCONN_FLAG_MBOXCLOSED;
 8028dce:	69fb      	ldr	r3, [r7, #28]
 8028dd0:	f893 3020 	ldrb.w	r3, [r3, #32]
 8028dd4:	f043 0301 	orr.w	r3, r3, #1
 8028dd8:	b2da      	uxtb	r2, r3
 8028dda:	69fb      	ldr	r3, [r7, #28]
 8028ddc:	f883 2020 	strb.w	r2, [r3, #32]

  /* reset conn->state now before waking up other threads */
  old_state = conn->state;
 8028de0:	69fb      	ldr	r3, [r7, #28]
 8028de2:	785b      	ldrb	r3, [r3, #1]
 8028de4:	75fb      	strb	r3, [r7, #23]
  conn->state = NETCONN_NONE;
 8028de6:	69fb      	ldr	r3, [r7, #28]
 8028de8:	2200      	movs	r2, #0
 8028dea:	705a      	strb	r2, [r3, #1]

  SYS_ARCH_UNPROTECT(lev);
 8028dec:	69b8      	ldr	r0, [r7, #24]
 8028dee:	f00c ff75 	bl	8035cdc <sys_arch_unprotect>

  /* Notify the user layer about a connection error. Used to signal select. */
  API_EVENT(conn, NETCONN_EVT_ERROR, 0);
 8028df2:	69fb      	ldr	r3, [r7, #28]
 8028df4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8028df6:	2b00      	cmp	r3, #0
 8028df8:	d005      	beq.n	8028e06 <err_tcp+0x6e>
 8028dfa:	69fb      	ldr	r3, [r7, #28]
 8028dfc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8028dfe:	2200      	movs	r2, #0
 8028e00:	2104      	movs	r1, #4
 8028e02:	69f8      	ldr	r0, [r7, #28]
 8028e04:	4798      	blx	r3
  /* Try to release selects pending on 'read' or 'write', too.
     They will get an error if they actually try to read or write. */
  API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
 8028e06:	69fb      	ldr	r3, [r7, #28]
 8028e08:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8028e0a:	2b00      	cmp	r3, #0
 8028e0c:	d005      	beq.n	8028e1a <err_tcp+0x82>
 8028e0e:	69fb      	ldr	r3, [r7, #28]
 8028e10:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8028e12:	2200      	movs	r2, #0
 8028e14:	2100      	movs	r1, #0
 8028e16:	69f8      	ldr	r0, [r7, #28]
 8028e18:	4798      	blx	r3
  API_EVENT(conn, NETCONN_EVT_SENDPLUS, 0);
 8028e1a:	69fb      	ldr	r3, [r7, #28]
 8028e1c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8028e1e:	2b00      	cmp	r3, #0
 8028e20:	d005      	beq.n	8028e2e <err_tcp+0x96>
 8028e22:	69fb      	ldr	r3, [r7, #28]
 8028e24:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8028e26:	2200      	movs	r2, #0
 8028e28:	2102      	movs	r1, #2
 8028e2a:	69f8      	ldr	r0, [r7, #28]
 8028e2c:	4798      	blx	r3

  mbox_msg = lwip_netconn_err_to_msg(err);
 8028e2e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8028e32:	4618      	mov	r0, r3
 8028e34:	f7ff fd7e 	bl	8028934 <lwip_netconn_err_to_msg>
 8028e38:	6138      	str	r0, [r7, #16]
  /* pass error message to recvmbox to wake up pending recv */
  if (NETCONN_MBOX_VALID(conn, &conn->recvmbox)) {
 8028e3a:	69fb      	ldr	r3, [r7, #28]
 8028e3c:	3310      	adds	r3, #16
 8028e3e:	4618      	mov	r0, r3
 8028e40:	f00c fdd7 	bl	80359f2 <sys_mbox_valid>
 8028e44:	4603      	mov	r3, r0
 8028e46:	2b00      	cmp	r3, #0
 8028e48:	d005      	beq.n	8028e56 <err_tcp+0xbe>
    /* use trypost to prevent deadlock */
    sys_mbox_trypost(&conn->recvmbox, mbox_msg);
 8028e4a:	69fb      	ldr	r3, [r7, #28]
 8028e4c:	3310      	adds	r3, #16
 8028e4e:	6939      	ldr	r1, [r7, #16]
 8028e50:	4618      	mov	r0, r3
 8028e52:	f00c fd4f 	bl	80358f4 <sys_mbox_trypost>
  }
  /* pass error message to acceptmbox to wake up pending accept */
  if (NETCONN_MBOX_VALID(conn, &conn->acceptmbox)) {
 8028e56:	69fb      	ldr	r3, [r7, #28]
 8028e58:	3314      	adds	r3, #20
 8028e5a:	4618      	mov	r0, r3
 8028e5c:	f00c fdc9 	bl	80359f2 <sys_mbox_valid>
 8028e60:	4603      	mov	r3, r0
 8028e62:	2b00      	cmp	r3, #0
 8028e64:	d005      	beq.n	8028e72 <err_tcp+0xda>
    /* use trypost to preven deadlock */
    sys_mbox_trypost(&conn->acceptmbox, mbox_msg);
 8028e66:	69fb      	ldr	r3, [r7, #28]
 8028e68:	3314      	adds	r3, #20
 8028e6a:	6939      	ldr	r1, [r7, #16]
 8028e6c:	4618      	mov	r0, r3
 8028e6e:	f00c fd41 	bl	80358f4 <sys_mbox_trypost>
  }

  if ((old_state == NETCONN_WRITE) || (old_state == NETCONN_CLOSE) ||
 8028e72:	7dfb      	ldrb	r3, [r7, #23]
 8028e74:	2b01      	cmp	r3, #1
 8028e76:	d005      	beq.n	8028e84 <err_tcp+0xec>
 8028e78:	7dfb      	ldrb	r3, [r7, #23]
 8028e7a:	2b04      	cmp	r3, #4
 8028e7c:	d002      	beq.n	8028e84 <err_tcp+0xec>
 8028e7e:	7dfb      	ldrb	r3, [r7, #23]
 8028e80:	2b03      	cmp	r3, #3
 8028e82:	d146      	bne.n	8028f12 <err_tcp+0x17a>
      (old_state == NETCONN_CONNECT)) {
    /* calling lwip_netconn_do_writemore/lwip_netconn_do_close_internal is not necessary
       since the pcb has already been deleted! */
    int was_nonblocking_connect = IN_NONBLOCKING_CONNECT(conn);
 8028e84:	69fb      	ldr	r3, [r7, #28]
 8028e86:	f893 3020 	ldrb.w	r3, [r3, #32]
 8028e8a:	f003 0304 	and.w	r3, r3, #4
 8028e8e:	2b00      	cmp	r3, #0
 8028e90:	bf14      	ite	ne
 8028e92:	2301      	movne	r3, #1
 8028e94:	2300      	moveq	r3, #0
 8028e96:	b2db      	uxtb	r3, r3
 8028e98:	60fb      	str	r3, [r7, #12]
    SET_NONBLOCKING_CONNECT(conn, 0);
 8028e9a:	69fb      	ldr	r3, [r7, #28]
 8028e9c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8028ea0:	f023 0304 	bic.w	r3, r3, #4
 8028ea4:	b2da      	uxtb	r2, r3
 8028ea6:	69fb      	ldr	r3, [r7, #28]
 8028ea8:	f883 2020 	strb.w	r2, [r3, #32]

    if (!was_nonblocking_connect) {
 8028eac:	68fb      	ldr	r3, [r7, #12]
 8028eae:	2b00      	cmp	r3, #0
 8028eb0:	d13b      	bne.n	8028f2a <err_tcp+0x192>
      sys_sem_t *op_completed_sem;
      /* set error return code */
      LWIP_ASSERT("conn->current_msg != NULL", conn->current_msg != NULL);
 8028eb2:	69fb      	ldr	r3, [r7, #28]
 8028eb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8028eb6:	2b00      	cmp	r3, #0
 8028eb8:	d106      	bne.n	8028ec8 <err_tcp+0x130>
 8028eba:	4b1e      	ldr	r3, [pc, #120]	; (8028f34 <err_tcp+0x19c>)
 8028ebc:	f44f 72f3 	mov.w	r2, #486	; 0x1e6
 8028ec0:	491f      	ldr	r1, [pc, #124]	; (8028f40 <err_tcp+0x1a8>)
 8028ec2:	481e      	ldr	r0, [pc, #120]	; (8028f3c <err_tcp+0x1a4>)
 8028ec4:	f00d f968 	bl	8036198 <iprintf>
      if (old_state == NETCONN_CLOSE) {
 8028ec8:	7dfb      	ldrb	r3, [r7, #23]
 8028eca:	2b04      	cmp	r3, #4
 8028ecc:	d104      	bne.n	8028ed8 <err_tcp+0x140>
        /* let close succeed: the connection is closed after all... */
        conn->current_msg->err = ERR_OK;
 8028ece:	69fb      	ldr	r3, [r7, #28]
 8028ed0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8028ed2:	2200      	movs	r2, #0
 8028ed4:	711a      	strb	r2, [r3, #4]
 8028ed6:	e003      	b.n	8028ee0 <err_tcp+0x148>
      } else {
        /* Write and connect fail */
        conn->current_msg->err = err;
 8028ed8:	69fb      	ldr	r3, [r7, #28]
 8028eda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8028edc:	78fa      	ldrb	r2, [r7, #3]
 8028ede:	711a      	strb	r2, [r3, #4]
      }
      op_completed_sem = LWIP_API_MSG_SEM(conn->current_msg);
 8028ee0:	69fb      	ldr	r3, [r7, #28]
 8028ee2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8028ee4:	681b      	ldr	r3, [r3, #0]
 8028ee6:	330c      	adds	r3, #12
 8028ee8:	60bb      	str	r3, [r7, #8]
      LWIP_ASSERT("inavlid op_completed_sem", sys_sem_valid(op_completed_sem));
 8028eea:	68b8      	ldr	r0, [r7, #8]
 8028eec:	f00c fe3e 	bl	8035b6c <sys_sem_valid>
 8028ef0:	4603      	mov	r3, r0
 8028ef2:	2b00      	cmp	r3, #0
 8028ef4:	d106      	bne.n	8028f04 <err_tcp+0x16c>
 8028ef6:	4b0f      	ldr	r3, [pc, #60]	; (8028f34 <err_tcp+0x19c>)
 8028ef8:	f240 12ef 	movw	r2, #495	; 0x1ef
 8028efc:	4911      	ldr	r1, [pc, #68]	; (8028f44 <err_tcp+0x1ac>)
 8028efe:	480f      	ldr	r0, [pc, #60]	; (8028f3c <err_tcp+0x1a4>)
 8028f00:	f00d f94a 	bl	8036198 <iprintf>
      conn->current_msg = NULL;
 8028f04:	69fb      	ldr	r3, [r7, #28]
 8028f06:	2200      	movs	r2, #0
 8028f08:	625a      	str	r2, [r3, #36]	; 0x24
      /* wake up the waiting task */
      sys_sem_signal(op_completed_sem);
 8028f0a:	68b8      	ldr	r0, [r7, #8]
 8028f0c:	f00c fe09 	bl	8035b22 <sys_sem_signal>
      (old_state == NETCONN_CONNECT)) {
 8028f10:	e00b      	b.n	8028f2a <err_tcp+0x192>
    } else {
      /* @todo: test what happens for error on nonblocking connect */
    }
  } else {
    LWIP_ASSERT("conn->current_msg == NULL", conn->current_msg == NULL);
 8028f12:	69fb      	ldr	r3, [r7, #28]
 8028f14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8028f16:	2b00      	cmp	r3, #0
 8028f18:	d008      	beq.n	8028f2c <err_tcp+0x194>
 8028f1a:	4b06      	ldr	r3, [pc, #24]	; (8028f34 <err_tcp+0x19c>)
 8028f1c:	f240 12f7 	movw	r2, #503	; 0x1f7
 8028f20:	4909      	ldr	r1, [pc, #36]	; (8028f48 <err_tcp+0x1b0>)
 8028f22:	4806      	ldr	r0, [pc, #24]	; (8028f3c <err_tcp+0x1a4>)
 8028f24:	f00d f938 	bl	8036198 <iprintf>
  }
}
 8028f28:	e000      	b.n	8028f2c <err_tcp+0x194>
      (old_state == NETCONN_CONNECT)) {
 8028f2a:	bf00      	nop
}
 8028f2c:	bf00      	nop
 8028f2e:	3720      	adds	r7, #32
 8028f30:	46bd      	mov	sp, r7
 8028f32:	bd80      	pop	{r7, pc}
 8028f34:	080378dc 	.word	0x080378dc
 8028f38:	08037a34 	.word	0x08037a34
 8028f3c:	08037920 	.word	0x08037920
 8028f40:	08037a44 	.word	0x08037a44
 8028f44:	08037a60 	.word	0x08037a60
 8028f48:	08037a7c 	.word	0x08037a7c

08028f4c <setup_tcp>:
 *
 * @param conn the TCP netconn to setup
 */
static void
setup_tcp(struct netconn *conn)
{
 8028f4c:	b580      	push	{r7, lr}
 8028f4e:	b084      	sub	sp, #16
 8028f50:	af00      	add	r7, sp, #0
 8028f52:	6078      	str	r0, [r7, #4]
  struct tcp_pcb *pcb;

  pcb = conn->pcb.tcp;
 8028f54:	687b      	ldr	r3, [r7, #4]
 8028f56:	685b      	ldr	r3, [r3, #4]
 8028f58:	60fb      	str	r3, [r7, #12]
  tcp_arg(pcb, conn);
 8028f5a:	6879      	ldr	r1, [r7, #4]
 8028f5c:	68f8      	ldr	r0, [r7, #12]
 8028f5e:	f004 fe4d 	bl	802dbfc <tcp_arg>
  tcp_recv(pcb, recv_tcp);
 8028f62:	490a      	ldr	r1, [pc, #40]	; (8028f8c <setup_tcp+0x40>)
 8028f64:	68f8      	ldr	r0, [r7, #12]
 8028f66:	f004 fe5b 	bl	802dc20 <tcp_recv>
  tcp_sent(pcb, sent_tcp);
 8028f6a:	4909      	ldr	r1, [pc, #36]	; (8028f90 <setup_tcp+0x44>)
 8028f6c:	68f8      	ldr	r0, [r7, #12]
 8028f6e:	f004 fe79 	bl	802dc64 <tcp_sent>
  tcp_poll(pcb, poll_tcp, NETCONN_TCP_POLL_INTERVAL);
 8028f72:	2202      	movs	r2, #2
 8028f74:	4907      	ldr	r1, [pc, #28]	; (8028f94 <setup_tcp+0x48>)
 8028f76:	68f8      	ldr	r0, [r7, #12]
 8028f78:	f004 fed0 	bl	802dd1c <tcp_poll>
  tcp_err(pcb, err_tcp);
 8028f7c:	4906      	ldr	r1, [pc, #24]	; (8028f98 <setup_tcp+0x4c>)
 8028f7e:	68f8      	ldr	r0, [r7, #12]
 8028f80:	f004 fe92 	bl	802dca8 <tcp_err>
}
 8028f84:	bf00      	nop
 8028f86:	3710      	adds	r7, #16
 8028f88:	46bd      	mov	sp, r7
 8028f8a:	bd80      	pop	{r7, pc}
 8028f8c:	08028b11 	.word	0x08028b11
 8028f90:	08028ced 	.word	0x08028ced
 8028f94:	08028c1d 	.word	0x08028c1d
 8028f98:	08028d99 	.word	0x08028d99

08028f9c <accept_function>:
 *
 * @see tcp.h (struct tcp_pcb_listen.accept) for parameters and return value
 */
static err_t
accept_function(void *arg, struct tcp_pcb *newpcb, err_t err)
{
 8028f9c:	b590      	push	{r4, r7, lr}
 8028f9e:	b089      	sub	sp, #36	; 0x24
 8028fa0:	af00      	add	r7, sp, #0
 8028fa2:	60f8      	str	r0, [r7, #12]
 8028fa4:	60b9      	str	r1, [r7, #8]
 8028fa6:	4613      	mov	r3, r2
 8028fa8:	71fb      	strb	r3, [r7, #7]
  struct netconn *newconn;
  struct netconn *conn = (struct netconn *)arg;
 8028faa:	68fb      	ldr	r3, [r7, #12]
 8028fac:	61fb      	str	r3, [r7, #28]

  if (conn == NULL) {
 8028fae:	69fb      	ldr	r3, [r7, #28]
 8028fb0:	2b00      	cmp	r3, #0
 8028fb2:	d102      	bne.n	8028fba <accept_function+0x1e>
    return ERR_VAL;
 8028fb4:	f06f 0305 	mvn.w	r3, #5
 8028fb8:	e0a1      	b.n	80290fe <accept_function+0x162>
  }
  if (!NETCONN_MBOX_VALID(conn, &conn->acceptmbox)) {
 8028fba:	69fb      	ldr	r3, [r7, #28]
 8028fbc:	3314      	adds	r3, #20
 8028fbe:	4618      	mov	r0, r3
 8028fc0:	f00c fd17 	bl	80359f2 <sys_mbox_valid>
 8028fc4:	4603      	mov	r3, r0
 8028fc6:	2b00      	cmp	r3, #0
 8028fc8:	d102      	bne.n	8028fd0 <accept_function+0x34>
    LWIP_DEBUGF(API_MSG_DEBUG, ("accept_function: acceptmbox already deleted\n"));
    return ERR_VAL;
 8028fca:	f06f 0305 	mvn.w	r3, #5
 8028fce:	e096      	b.n	80290fe <accept_function+0x162>
  }

  if (newpcb == NULL) {
 8028fd0:	68bb      	ldr	r3, [r7, #8]
 8028fd2:	2b00      	cmp	r3, #0
 8028fd4:	d11b      	bne.n	802900e <accept_function+0x72>
    /* out-of-pcbs during connect: pass on this error to the application */
    if (sys_mbox_trypost(&conn->acceptmbox, lwip_netconn_err_to_msg(ERR_ABRT)) == ERR_OK) {
 8028fd6:	69fb      	ldr	r3, [r7, #28]
 8028fd8:	f103 0414 	add.w	r4, r3, #20
 8028fdc:	f06f 000c 	mvn.w	r0, #12
 8028fe0:	f7ff fca8 	bl	8028934 <lwip_netconn_err_to_msg>
 8028fe4:	4603      	mov	r3, r0
 8028fe6:	4619      	mov	r1, r3
 8028fe8:	4620      	mov	r0, r4
 8028fea:	f00c fc83 	bl	80358f4 <sys_mbox_trypost>
 8028fee:	4603      	mov	r3, r0
 8028ff0:	2b00      	cmp	r3, #0
 8028ff2:	d109      	bne.n	8029008 <accept_function+0x6c>
      /* Register event with callback */
      API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
 8028ff4:	69fb      	ldr	r3, [r7, #28]
 8028ff6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8028ff8:	2b00      	cmp	r3, #0
 8028ffa:	d005      	beq.n	8029008 <accept_function+0x6c>
 8028ffc:	69fb      	ldr	r3, [r7, #28]
 8028ffe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8029000:	2200      	movs	r2, #0
 8029002:	2100      	movs	r1, #0
 8029004:	69f8      	ldr	r0, [r7, #28]
 8029006:	4798      	blx	r3
    }
    return ERR_VAL;
 8029008:	f06f 0305 	mvn.w	r3, #5
 802900c:	e077      	b.n	80290fe <accept_function+0x162>
  }
  LWIP_ASSERT("expect newpcb == NULL or err == ERR_OK", err == ERR_OK);
 802900e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8029012:	2b00      	cmp	r3, #0
 8029014:	d006      	beq.n	8029024 <accept_function+0x88>
 8029016:	4b3c      	ldr	r3, [pc, #240]	; (8029108 <accept_function+0x16c>)
 8029018:	f240 222a 	movw	r2, #554	; 0x22a
 802901c:	493b      	ldr	r1, [pc, #236]	; (802910c <accept_function+0x170>)
 802901e:	483c      	ldr	r0, [pc, #240]	; (8029110 <accept_function+0x174>)
 8029020:	f00d f8ba 	bl	8036198 <iprintf>

  LWIP_DEBUGF(API_MSG_DEBUG, ("accept_function: newpcb->state: %s\n", tcp_debug_state_str(newpcb->state)));

  /* We have to set the callback here even though
   * the new socket is unknown. newconn->socket is marked as -1. */
  newconn = netconn_alloc(conn->type, conn->callback);
 8029024:	69fb      	ldr	r3, [r7, #28]
 8029026:	781a      	ldrb	r2, [r3, #0]
 8029028:	69fb      	ldr	r3, [r7, #28]
 802902a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 802902c:	4619      	mov	r1, r3
 802902e:	4610      	mov	r0, r2
 8029030:	f000 f8f0 	bl	8029214 <netconn_alloc>
 8029034:	61b8      	str	r0, [r7, #24]
  if (newconn == NULL) {
 8029036:	69bb      	ldr	r3, [r7, #24]
 8029038:	2b00      	cmp	r3, #0
 802903a:	d11b      	bne.n	8029074 <accept_function+0xd8>
    /* outof netconns: pass on this error to the application */
    if (sys_mbox_trypost(&conn->acceptmbox, lwip_netconn_err_to_msg(ERR_ABRT)) == ERR_OK) {
 802903c:	69fb      	ldr	r3, [r7, #28]
 802903e:	f103 0414 	add.w	r4, r3, #20
 8029042:	f06f 000c 	mvn.w	r0, #12
 8029046:	f7ff fc75 	bl	8028934 <lwip_netconn_err_to_msg>
 802904a:	4603      	mov	r3, r0
 802904c:	4619      	mov	r1, r3
 802904e:	4620      	mov	r0, r4
 8029050:	f00c fc50 	bl	80358f4 <sys_mbox_trypost>
 8029054:	4603      	mov	r3, r0
 8029056:	2b00      	cmp	r3, #0
 8029058:	d109      	bne.n	802906e <accept_function+0xd2>
      /* Register event with callback */
      API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
 802905a:	69fb      	ldr	r3, [r7, #28]
 802905c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 802905e:	2b00      	cmp	r3, #0
 8029060:	d005      	beq.n	802906e <accept_function+0xd2>
 8029062:	69fb      	ldr	r3, [r7, #28]
 8029064:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8029066:	2200      	movs	r2, #0
 8029068:	2100      	movs	r1, #0
 802906a:	69f8      	ldr	r0, [r7, #28]
 802906c:	4798      	blx	r3
    }
    return ERR_MEM;
 802906e:	f04f 33ff 	mov.w	r3, #4294967295
 8029072:	e044      	b.n	80290fe <accept_function+0x162>
  }
  newconn->pcb.tcp = newpcb;
 8029074:	69bb      	ldr	r3, [r7, #24]
 8029076:	68ba      	ldr	r2, [r7, #8]
 8029078:	605a      	str	r2, [r3, #4]
  setup_tcp(newconn);
 802907a:	69b8      	ldr	r0, [r7, #24]
 802907c:	f7ff ff66 	bl	8028f4c <setup_tcp>

  /* handle backlog counter */
  tcp_backlog_delayed(newpcb);

  if (sys_mbox_trypost(&conn->acceptmbox, newconn) != ERR_OK) {
 8029080:	69fb      	ldr	r3, [r7, #28]
 8029082:	3314      	adds	r3, #20
 8029084:	69b9      	ldr	r1, [r7, #24]
 8029086:	4618      	mov	r0, r3
 8029088:	f00c fc34 	bl	80358f4 <sys_mbox_trypost>
 802908c:	4603      	mov	r3, r0
 802908e:	2b00      	cmp	r3, #0
 8029090:	d02a      	beq.n	80290e8 <accept_function+0x14c>
    /* When returning != ERR_OK, the pcb is aborted in tcp_process(),
       so do nothing here! */
    /* remove all references to this netconn from the pcb */
    struct tcp_pcb *pcb = newconn->pcb.tcp;
 8029092:	69bb      	ldr	r3, [r7, #24]
 8029094:	685b      	ldr	r3, [r3, #4]
 8029096:	617b      	str	r3, [r7, #20]
    tcp_arg(pcb, NULL);
 8029098:	2100      	movs	r1, #0
 802909a:	6978      	ldr	r0, [r7, #20]
 802909c:	f004 fdae 	bl	802dbfc <tcp_arg>
    tcp_recv(pcb, NULL);
 80290a0:	2100      	movs	r1, #0
 80290a2:	6978      	ldr	r0, [r7, #20]
 80290a4:	f004 fdbc 	bl	802dc20 <tcp_recv>
    tcp_sent(pcb, NULL);
 80290a8:	2100      	movs	r1, #0
 80290aa:	6978      	ldr	r0, [r7, #20]
 80290ac:	f004 fdda 	bl	802dc64 <tcp_sent>
    tcp_poll(pcb, NULL, 0);
 80290b0:	2200      	movs	r2, #0
 80290b2:	2100      	movs	r1, #0
 80290b4:	6978      	ldr	r0, [r7, #20]
 80290b6:	f004 fe31 	bl	802dd1c <tcp_poll>
    tcp_err(pcb, NULL);
 80290ba:	2100      	movs	r1, #0
 80290bc:	6978      	ldr	r0, [r7, #20]
 80290be:	f004 fdf3 	bl	802dca8 <tcp_err>
    /* remove reference from to the pcb from this netconn */
    newconn->pcb.tcp = NULL;
 80290c2:	69bb      	ldr	r3, [r7, #24]
 80290c4:	2200      	movs	r2, #0
 80290c6:	605a      	str	r2, [r3, #4]
    /* no need to drain since we know the recvmbox is empty. */
    sys_mbox_free(&newconn->recvmbox);
 80290c8:	69bb      	ldr	r3, [r7, #24]
 80290ca:	3310      	adds	r3, #16
 80290cc:	4618      	mov	r0, r3
 80290ce:	f00c fbe9 	bl	80358a4 <sys_mbox_free>
    sys_mbox_set_invalid(&newconn->recvmbox);
 80290d2:	69bb      	ldr	r3, [r7, #24]
 80290d4:	3310      	adds	r3, #16
 80290d6:	4618      	mov	r0, r3
 80290d8:	f00c fc9c 	bl	8035a14 <sys_mbox_set_invalid>
    netconn_free(newconn);
 80290dc:	69b8      	ldr	r0, [r7, #24]
 80290de:	f000 f90b 	bl	80292f8 <netconn_free>
    return ERR_MEM;
 80290e2:	f04f 33ff 	mov.w	r3, #4294967295
 80290e6:	e00a      	b.n	80290fe <accept_function+0x162>
  } else {
    /* Register event with callback */
    API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
 80290e8:	69fb      	ldr	r3, [r7, #28]
 80290ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80290ec:	2b00      	cmp	r3, #0
 80290ee:	d005      	beq.n	80290fc <accept_function+0x160>
 80290f0:	69fb      	ldr	r3, [r7, #28]
 80290f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80290f4:	2200      	movs	r2, #0
 80290f6:	2100      	movs	r1, #0
 80290f8:	69f8      	ldr	r0, [r7, #28]
 80290fa:	4798      	blx	r3
  }

  return ERR_OK;
 80290fc:	2300      	movs	r3, #0
}
 80290fe:	4618      	mov	r0, r3
 8029100:	3724      	adds	r7, #36	; 0x24
 8029102:	46bd      	mov	sp, r7
 8029104:	bd90      	pop	{r4, r7, pc}
 8029106:	bf00      	nop
 8029108:	080378dc 	.word	0x080378dc
 802910c:	08037a98 	.word	0x08037a98
 8029110:	08037920 	.word	0x08037920

08029114 <pcb_new>:
 *
 * @param msg the api_msg describing the connection type
 */
static void
pcb_new(struct api_msg *msg)
{
 8029114:	b590      	push	{r4, r7, lr}
 8029116:	b085      	sub	sp, #20
 8029118:	af00      	add	r7, sp, #0
 802911a:	6078      	str	r0, [r7, #4]
  enum lwip_ip_addr_type iptype = IPADDR_TYPE_V4;
 802911c:	2300      	movs	r3, #0
 802911e:	73fb      	strb	r3, [r7, #15]

  LWIP_ASSERT("pcb_new: pcb already allocated", msg->conn->pcb.tcp == NULL);
 8029120:	687b      	ldr	r3, [r7, #4]
 8029122:	681b      	ldr	r3, [r3, #0]
 8029124:	685b      	ldr	r3, [r3, #4]
 8029126:	2b00      	cmp	r3, #0
 8029128:	d006      	beq.n	8029138 <pcb_new+0x24>
 802912a:	4b2b      	ldr	r3, [pc, #172]	; (80291d8 <pcb_new+0xc4>)
 802912c:	f240 2265 	movw	r2, #613	; 0x265
 8029130:	492a      	ldr	r1, [pc, #168]	; (80291dc <pcb_new+0xc8>)
 8029132:	482b      	ldr	r0, [pc, #172]	; (80291e0 <pcb_new+0xcc>)
 8029134:	f00d f830 	bl	8036198 <iprintf>
    iptype = IPADDR_TYPE_ANY;
  }
#endif

  /* Allocate a PCB for this connection */
  switch (NETCONNTYPE_GROUP(msg->conn->type)) {
 8029138:	687b      	ldr	r3, [r7, #4]
 802913a:	681b      	ldr	r3, [r3, #0]
 802913c:	781b      	ldrb	r3, [r3, #0]
 802913e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8029142:	2b10      	cmp	r3, #16
 8029144:	d022      	beq.n	802918c <pcb_new+0x78>
 8029146:	2b20      	cmp	r3, #32
 8029148:	d133      	bne.n	80291b2 <pcb_new+0x9e>
      }
      break;
#endif /* LWIP_RAW */
#if LWIP_UDP
    case NETCONN_UDP:
      msg->conn->pcb.udp = udp_new_ip_type(iptype);
 802914a:	687b      	ldr	r3, [r7, #4]
 802914c:	681c      	ldr	r4, [r3, #0]
 802914e:	7bfb      	ldrb	r3, [r7, #15]
 8029150:	4618      	mov	r0, r3
 8029152:	f009 ff20 	bl	8032f96 <udp_new_ip_type>
 8029156:	4603      	mov	r3, r0
 8029158:	6063      	str	r3, [r4, #4]
      if (msg->conn->pcb.udp != NULL) {
 802915a:	687b      	ldr	r3, [r7, #4]
 802915c:	681b      	ldr	r3, [r3, #0]
 802915e:	685b      	ldr	r3, [r3, #4]
 8029160:	2b00      	cmp	r3, #0
 8029162:	d02a      	beq.n	80291ba <pcb_new+0xa6>
#if LWIP_UDPLITE
        if (NETCONNTYPE_ISUDPLITE(msg->conn->type)) {
          udp_setflags(msg->conn->pcb.udp, UDP_FLAGS_UDPLITE);
        }
#endif /* LWIP_UDPLITE */
        if (NETCONNTYPE_ISUDPNOCHKSUM(msg->conn->type)) {
 8029164:	687b      	ldr	r3, [r7, #4]
 8029166:	681b      	ldr	r3, [r3, #0]
 8029168:	781b      	ldrb	r3, [r3, #0]
 802916a:	2b22      	cmp	r3, #34	; 0x22
 802916c:	d104      	bne.n	8029178 <pcb_new+0x64>
          udp_setflags(msg->conn->pcb.udp, UDP_FLAGS_NOCHKSUM);
 802916e:	687b      	ldr	r3, [r7, #4]
 8029170:	681b      	ldr	r3, [r3, #0]
 8029172:	685b      	ldr	r3, [r3, #4]
 8029174:	2201      	movs	r2, #1
 8029176:	741a      	strb	r2, [r3, #16]
        }
        udp_recv(msg->conn->pcb.udp, recv_udp, msg->conn);
 8029178:	687b      	ldr	r3, [r7, #4]
 802917a:	681b      	ldr	r3, [r3, #0]
 802917c:	6858      	ldr	r0, [r3, #4]
 802917e:	687b      	ldr	r3, [r7, #4]
 8029180:	681b      	ldr	r3, [r3, #0]
 8029182:	461a      	mov	r2, r3
 8029184:	4917      	ldr	r1, [pc, #92]	; (80291e4 <pcb_new+0xd0>)
 8029186:	f009 fe8d 	bl	8032ea4 <udp_recv>
      }
      break;
 802918a:	e016      	b.n	80291ba <pcb_new+0xa6>
#endif /* LWIP_UDP */
#if LWIP_TCP
    case NETCONN_TCP:
      msg->conn->pcb.tcp = tcp_new_ip_type(iptype);
 802918c:	687b      	ldr	r3, [r7, #4]
 802918e:	681c      	ldr	r4, [r3, #0]
 8029190:	7bfb      	ldrb	r3, [r7, #15]
 8029192:	4618      	mov	r0, r3
 8029194:	f004 fd24 	bl	802dbe0 <tcp_new_ip_type>
 8029198:	4603      	mov	r3, r0
 802919a:	6063      	str	r3, [r4, #4]
      if (msg->conn->pcb.tcp != NULL) {
 802919c:	687b      	ldr	r3, [r7, #4]
 802919e:	681b      	ldr	r3, [r3, #0]
 80291a0:	685b      	ldr	r3, [r3, #4]
 80291a2:	2b00      	cmp	r3, #0
 80291a4:	d00b      	beq.n	80291be <pcb_new+0xaa>
        setup_tcp(msg->conn);
 80291a6:	687b      	ldr	r3, [r7, #4]
 80291a8:	681b      	ldr	r3, [r3, #0]
 80291aa:	4618      	mov	r0, r3
 80291ac:	f7ff fece 	bl	8028f4c <setup_tcp>
      }
      break;
 80291b0:	e005      	b.n	80291be <pcb_new+0xaa>
#endif /* LWIP_TCP */
    default:
      /* Unsupported netconn type, e.g. protocol disabled */
      msg->err = ERR_VAL;
 80291b2:	687b      	ldr	r3, [r7, #4]
 80291b4:	22fa      	movs	r2, #250	; 0xfa
 80291b6:	711a      	strb	r2, [r3, #4]
      return;
 80291b8:	e00a      	b.n	80291d0 <pcb_new+0xbc>
      break;
 80291ba:	bf00      	nop
 80291bc:	e000      	b.n	80291c0 <pcb_new+0xac>
      break;
 80291be:	bf00      	nop
  }
  if (msg->conn->pcb.ip == NULL) {
 80291c0:	687b      	ldr	r3, [r7, #4]
 80291c2:	681b      	ldr	r3, [r3, #0]
 80291c4:	685b      	ldr	r3, [r3, #4]
 80291c6:	2b00      	cmp	r3, #0
 80291c8:	d102      	bne.n	80291d0 <pcb_new+0xbc>
    msg->err = ERR_MEM;
 80291ca:	687b      	ldr	r3, [r7, #4]
 80291cc:	22ff      	movs	r2, #255	; 0xff
 80291ce:	711a      	strb	r2, [r3, #4]
  }
}
 80291d0:	3714      	adds	r7, #20
 80291d2:	46bd      	mov	sp, r7
 80291d4:	bd90      	pop	{r4, r7, pc}
 80291d6:	bf00      	nop
 80291d8:	080378dc 	.word	0x080378dc
 80291dc:	08037ac0 	.word	0x08037ac0
 80291e0:	08037920 	.word	0x08037920
 80291e4:	08028a15 	.word	0x08028a15

080291e8 <lwip_netconn_do_newconn>:
 *
 * @param m the api_msg describing the connection type
 */
void
lwip_netconn_do_newconn(void *m)
{
 80291e8:	b580      	push	{r7, lr}
 80291ea:	b084      	sub	sp, #16
 80291ec:	af00      	add	r7, sp, #0
 80291ee:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 80291f0:	687b      	ldr	r3, [r7, #4]
 80291f2:	60fb      	str	r3, [r7, #12]

  msg->err = ERR_OK;
 80291f4:	68fb      	ldr	r3, [r7, #12]
 80291f6:	2200      	movs	r2, #0
 80291f8:	711a      	strb	r2, [r3, #4]
  if (msg->conn->pcb.tcp == NULL) {
 80291fa:	68fb      	ldr	r3, [r7, #12]
 80291fc:	681b      	ldr	r3, [r3, #0]
 80291fe:	685b      	ldr	r3, [r3, #4]
 8029200:	2b00      	cmp	r3, #0
 8029202:	d102      	bne.n	802920a <lwip_netconn_do_newconn+0x22>
    pcb_new(msg);
 8029204:	68f8      	ldr	r0, [r7, #12]
 8029206:	f7ff ff85 	bl	8029114 <pcb_new>
  /* Else? This "new" connection already has a PCB allocated. */
  /* Is this an error condition? Should it be deleted? */
  /* We currently just are happy and return. */

  TCPIP_APIMSG_ACK(msg);
}
 802920a:	bf00      	nop
 802920c:	3710      	adds	r7, #16
 802920e:	46bd      	mov	sp, r7
 8029210:	bd80      	pop	{r7, pc}
	...

08029214 <netconn_alloc>:
 * @return a newly allocated struct netconn or
 *         NULL on memory error
 */
struct netconn *
netconn_alloc(enum netconn_type t, netconn_callback callback)
{
 8029214:	b580      	push	{r7, lr}
 8029216:	b086      	sub	sp, #24
 8029218:	af00      	add	r7, sp, #0
 802921a:	4603      	mov	r3, r0
 802921c:	6039      	str	r1, [r7, #0]
 802921e:	71fb      	strb	r3, [r7, #7]
  struct netconn *conn;
  int size;
  u8_t init_flags = 0;
 8029220:	2300      	movs	r3, #0
 8029222:	74fb      	strb	r3, [r7, #19]

  conn = (struct netconn *)memp_malloc(MEMP_NETCONN);
 8029224:	2007      	movs	r0, #7
 8029226:	f001 ff19 	bl	802b05c <memp_malloc>
 802922a:	60f8      	str	r0, [r7, #12]
  if (conn == NULL) {
 802922c:	68fb      	ldr	r3, [r7, #12]
 802922e:	2b00      	cmp	r3, #0
 8029230:	d101      	bne.n	8029236 <netconn_alloc+0x22>
    return NULL;
 8029232:	2300      	movs	r3, #0
 8029234:	e056      	b.n	80292e4 <netconn_alloc+0xd0>
  }

  conn->pending_err = ERR_OK;
 8029236:	68fb      	ldr	r3, [r7, #12]
 8029238:	2200      	movs	r2, #0
 802923a:	721a      	strb	r2, [r3, #8]
  conn->type = t;
 802923c:	68fb      	ldr	r3, [r7, #12]
 802923e:	79fa      	ldrb	r2, [r7, #7]
 8029240:	701a      	strb	r2, [r3, #0]
  conn->pcb.tcp = NULL;
 8029242:	68fb      	ldr	r3, [r7, #12]
 8029244:	2200      	movs	r2, #0
 8029246:	605a      	str	r2, [r3, #4]

  /* If all sizes are the same, every compiler should optimize this switch to nothing */
  switch (NETCONNTYPE_GROUP(t)) {
 8029248:	79fb      	ldrb	r3, [r7, #7]
 802924a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 802924e:	2b10      	cmp	r3, #16
 8029250:	d004      	beq.n	802925c <netconn_alloc+0x48>
 8029252:	2b20      	cmp	r3, #32
 8029254:	d105      	bne.n	8029262 <netconn_alloc+0x4e>
      size = DEFAULT_RAW_RECVMBOX_SIZE;
      break;
#endif /* LWIP_RAW */
#if LWIP_UDP
    case NETCONN_UDP:
      size = DEFAULT_UDP_RECVMBOX_SIZE;
 8029256:	2306      	movs	r3, #6
 8029258:	617b      	str	r3, [r7, #20]
#if LWIP_NETBUF_RECVINFO
      init_flags |= NETCONN_FLAG_PKTINFO;
#endif /* LWIP_NETBUF_RECVINFO */
      break;
 802925a:	e00a      	b.n	8029272 <netconn_alloc+0x5e>
#endif /* LWIP_UDP */
#if LWIP_TCP
    case NETCONN_TCP:
      size = DEFAULT_TCP_RECVMBOX_SIZE;
 802925c:	2306      	movs	r3, #6
 802925e:	617b      	str	r3, [r7, #20]
      break;
 8029260:	e007      	b.n	8029272 <netconn_alloc+0x5e>
#endif /* LWIP_TCP */
    default:
      LWIP_ASSERT("netconn_alloc: undefined netconn_type", 0);
 8029262:	4b22      	ldr	r3, [pc, #136]	; (80292ec <netconn_alloc+0xd8>)
 8029264:	f240 22e5 	movw	r2, #741	; 0x2e5
 8029268:	4921      	ldr	r1, [pc, #132]	; (80292f0 <netconn_alloc+0xdc>)
 802926a:	4822      	ldr	r0, [pc, #136]	; (80292f4 <netconn_alloc+0xe0>)
 802926c:	f00c ff94 	bl	8036198 <iprintf>
      goto free_and_return;
 8029270:	e033      	b.n	80292da <netconn_alloc+0xc6>
  }

  if (sys_mbox_new(&conn->recvmbox, size) != ERR_OK) {
 8029272:	68fb      	ldr	r3, [r7, #12]
 8029274:	3310      	adds	r3, #16
 8029276:	6979      	ldr	r1, [r7, #20]
 8029278:	4618      	mov	r0, r3
 802927a:	f00c fad9 	bl	8035830 <sys_mbox_new>
 802927e:	4603      	mov	r3, r0
 8029280:	2b00      	cmp	r3, #0
 8029282:	d129      	bne.n	80292d8 <netconn_alloc+0xc4>
    goto free_and_return;
  }
#if !LWIP_NETCONN_SEM_PER_THREAD
  if (sys_sem_new(&conn->op_completed, 0) != ERR_OK) {
 8029284:	68fb      	ldr	r3, [r7, #12]
 8029286:	330c      	adds	r3, #12
 8029288:	2100      	movs	r1, #0
 802928a:	4618      	mov	r0, r3
 802928c:	f00c fbd0 	bl	8035a30 <sys_sem_new>
 8029290:	4603      	mov	r3, r0
 8029292:	2b00      	cmp	r3, #0
 8029294:	d005      	beq.n	80292a2 <netconn_alloc+0x8e>
    sys_mbox_free(&conn->recvmbox);
 8029296:	68fb      	ldr	r3, [r7, #12]
 8029298:	3310      	adds	r3, #16
 802929a:	4618      	mov	r0, r3
 802929c:	f00c fb02 	bl	80358a4 <sys_mbox_free>
    goto free_and_return;
 80292a0:	e01b      	b.n	80292da <netconn_alloc+0xc6>
  }
#endif

#if LWIP_TCP
  sys_mbox_set_invalid(&conn->acceptmbox);
 80292a2:	68fb      	ldr	r3, [r7, #12]
 80292a4:	3314      	adds	r3, #20
 80292a6:	4618      	mov	r0, r3
 80292a8:	f00c fbb4 	bl	8035a14 <sys_mbox_set_invalid>
#endif
  conn->state        = NETCONN_NONE;
 80292ac:	68fb      	ldr	r3, [r7, #12]
 80292ae:	2200      	movs	r2, #0
 80292b0:	705a      	strb	r2, [r3, #1]
#if LWIP_SOCKET
  /* initialize socket to -1 since 0 is a valid socket */
  conn->socket       = -1;
 80292b2:	68fb      	ldr	r3, [r7, #12]
 80292b4:	f04f 32ff 	mov.w	r2, #4294967295
 80292b8:	619a      	str	r2, [r3, #24]
#endif /* LWIP_SOCKET */
  conn->callback     = callback;
 80292ba:	68fb      	ldr	r3, [r7, #12]
 80292bc:	683a      	ldr	r2, [r7, #0]
 80292be:	629a      	str	r2, [r3, #40]	; 0x28
#if LWIP_TCP
  conn->current_msg  = NULL;
 80292c0:	68fb      	ldr	r3, [r7, #12]
 80292c2:	2200      	movs	r2, #0
 80292c4:	625a      	str	r2, [r3, #36]	; 0x24
#endif /* LWIP_TCP */
#if LWIP_SO_SNDTIMEO
  conn->send_timeout = 0;
#endif /* LWIP_SO_SNDTIMEO */
#if LWIP_SO_RCVTIMEO
  conn->recv_timeout = 0;
 80292c6:	68fb      	ldr	r3, [r7, #12]
 80292c8:	2200      	movs	r2, #0
 80292ca:	61da      	str	r2, [r3, #28]
  conn->recv_avail   = 0;
#endif /* LWIP_SO_RCVBUF */
#if LWIP_SO_LINGER
  conn->linger = -1;
#endif /* LWIP_SO_LINGER */
  conn->flags = init_flags;
 80292cc:	68fb      	ldr	r3, [r7, #12]
 80292ce:	7cfa      	ldrb	r2, [r7, #19]
 80292d0:	f883 2020 	strb.w	r2, [r3, #32]
  return conn;
 80292d4:	68fb      	ldr	r3, [r7, #12]
 80292d6:	e005      	b.n	80292e4 <netconn_alloc+0xd0>
    goto free_and_return;
 80292d8:	bf00      	nop
free_and_return:
  memp_free(MEMP_NETCONN, conn);
 80292da:	68f9      	ldr	r1, [r7, #12]
 80292dc:	2007      	movs	r0, #7
 80292de:	f001 ff39 	bl	802b154 <memp_free>
  return NULL;
 80292e2:	2300      	movs	r3, #0
}
 80292e4:	4618      	mov	r0, r3
 80292e6:	3718      	adds	r7, #24
 80292e8:	46bd      	mov	sp, r7
 80292ea:	bd80      	pop	{r7, pc}
 80292ec:	080378dc 	.word	0x080378dc
 80292f0:	08037ae0 	.word	0x08037ae0
 80292f4:	08037920 	.word	0x08037920

080292f8 <netconn_free>:
 *
 * @param conn the netconn to free
 */
void
netconn_free(struct netconn *conn)
{
 80292f8:	b580      	push	{r7, lr}
 80292fa:	b082      	sub	sp, #8
 80292fc:	af00      	add	r7, sp, #0
 80292fe:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("PCB must be deallocated outside this function", conn->pcb.tcp == NULL);
 8029300:	687b      	ldr	r3, [r7, #4]
 8029302:	685b      	ldr	r3, [r3, #4]
 8029304:	2b00      	cmp	r3, #0
 8029306:	d006      	beq.n	8029316 <netconn_free+0x1e>
 8029308:	4b1b      	ldr	r3, [pc, #108]	; (8029378 <netconn_free+0x80>)
 802930a:	f44f 7247 	mov.w	r2, #796	; 0x31c
 802930e:	491b      	ldr	r1, [pc, #108]	; (802937c <netconn_free+0x84>)
 8029310:	481b      	ldr	r0, [pc, #108]	; (8029380 <netconn_free+0x88>)
 8029312:	f00c ff41 	bl	8036198 <iprintf>
#if LWIP_NETCONN_FULLDUPLEX
  /* in fullduplex, netconn is drained here */
  netconn_drain(conn);
#endif /* LWIP_NETCONN_FULLDUPLEX */

  LWIP_ASSERT("recvmbox must be deallocated before calling this function",
 8029316:	687b      	ldr	r3, [r7, #4]
 8029318:	3310      	adds	r3, #16
 802931a:	4618      	mov	r0, r3
 802931c:	f00c fb69 	bl	80359f2 <sys_mbox_valid>
 8029320:	4603      	mov	r3, r0
 8029322:	2b00      	cmp	r3, #0
 8029324:	d006      	beq.n	8029334 <netconn_free+0x3c>
 8029326:	4b14      	ldr	r3, [pc, #80]	; (8029378 <netconn_free+0x80>)
 8029328:	f240 3223 	movw	r2, #803	; 0x323
 802932c:	4915      	ldr	r1, [pc, #84]	; (8029384 <netconn_free+0x8c>)
 802932e:	4814      	ldr	r0, [pc, #80]	; (8029380 <netconn_free+0x88>)
 8029330:	f00c ff32 	bl	8036198 <iprintf>
              !sys_mbox_valid(&conn->recvmbox));
#if LWIP_TCP
  LWIP_ASSERT("acceptmbox must be deallocated before calling this function",
 8029334:	687b      	ldr	r3, [r7, #4]
 8029336:	3314      	adds	r3, #20
 8029338:	4618      	mov	r0, r3
 802933a:	f00c fb5a 	bl	80359f2 <sys_mbox_valid>
 802933e:	4603      	mov	r3, r0
 8029340:	2b00      	cmp	r3, #0
 8029342:	d006      	beq.n	8029352 <netconn_free+0x5a>
 8029344:	4b0c      	ldr	r3, [pc, #48]	; (8029378 <netconn_free+0x80>)
 8029346:	f240 3226 	movw	r2, #806	; 0x326
 802934a:	490f      	ldr	r1, [pc, #60]	; (8029388 <netconn_free+0x90>)
 802934c:	480c      	ldr	r0, [pc, #48]	; (8029380 <netconn_free+0x88>)
 802934e:	f00c ff23 	bl	8036198 <iprintf>
              !sys_mbox_valid(&conn->acceptmbox));
#endif /* LWIP_TCP */

#if !LWIP_NETCONN_SEM_PER_THREAD
  sys_sem_free(&conn->op_completed);
 8029352:	687b      	ldr	r3, [r7, #4]
 8029354:	330c      	adds	r3, #12
 8029356:	4618      	mov	r0, r3
 8029358:	f00c fbf0 	bl	8035b3c <sys_sem_free>
  sys_sem_set_invalid(&conn->op_completed);
 802935c:	687b      	ldr	r3, [r7, #4]
 802935e:	330c      	adds	r3, #12
 8029360:	4618      	mov	r0, r3
 8029362:	f00c fc14 	bl	8035b8e <sys_sem_set_invalid>
#endif

  memp_free(MEMP_NETCONN, conn);
 8029366:	6879      	ldr	r1, [r7, #4]
 8029368:	2007      	movs	r0, #7
 802936a:	f001 fef3 	bl	802b154 <memp_free>
}
 802936e:	bf00      	nop
 8029370:	3708      	adds	r7, #8
 8029372:	46bd      	mov	sp, r7
 8029374:	bd80      	pop	{r7, pc}
 8029376:	bf00      	nop
 8029378:	080378dc 	.word	0x080378dc
 802937c:	08037b08 	.word	0x08037b08
 8029380:	08037920 	.word	0x08037920
 8029384:	08037b38 	.word	0x08037b38
 8029388:	08037b74 	.word	0x08037b74

0802938c <netconn_drain>:
 * @bytes_drained bytes drained from recvmbox
 * @accepts_drained pending connections drained from acceptmbox
 */
static void
netconn_drain(struct netconn *conn)
{
 802938c:	b580      	push	{r7, lr}
 802938e:	b086      	sub	sp, #24
 8029390:	af00      	add	r7, sp, #0
 8029392:	6078      	str	r0, [r7, #4]
#if LWIP_NETCONN_FULLDUPLEX
  LWIP_ASSERT("netconn marked closed", conn->flags & NETCONN_FLAG_MBOXINVALID);
#endif /* LWIP_NETCONN_FULLDUPLEX */

  /* Delete and drain the recvmbox. */
  if (sys_mbox_valid(&conn->recvmbox)) {
 8029394:	687b      	ldr	r3, [r7, #4]
 8029396:	3310      	adds	r3, #16
 8029398:	4618      	mov	r0, r3
 802939a:	f00c fb2a 	bl	80359f2 <sys_mbox_valid>
 802939e:	4603      	mov	r3, r0
 80293a0:	2b00      	cmp	r3, #0
 80293a2:	d02f      	beq.n	8029404 <netconn_drain+0x78>
    while (sys_mbox_tryfetch(&conn->recvmbox, &mem) != SYS_MBOX_EMPTY) {
 80293a4:	e018      	b.n	80293d8 <netconn_drain+0x4c>
#if LWIP_NETCONN_FULLDUPLEX
      if (!lwip_netconn_is_deallocated_msg(mem))
#endif /* LWIP_NETCONN_FULLDUPLEX */
      {
#if LWIP_TCP
        if (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP) {
 80293a6:	687b      	ldr	r3, [r7, #4]
 80293a8:	781b      	ldrb	r3, [r3, #0]
 80293aa:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80293ae:	2b10      	cmp	r3, #16
 80293b0:	d10e      	bne.n	80293d0 <netconn_drain+0x44>
          err_t err;
          if (!lwip_netconn_is_err_msg(mem, &err)) {
 80293b2:	693b      	ldr	r3, [r7, #16]
 80293b4:	f107 020f 	add.w	r2, r7, #15
 80293b8:	4611      	mov	r1, r2
 80293ba:	4618      	mov	r0, r3
 80293bc:	f7ff faf0 	bl	80289a0 <lwip_netconn_is_err_msg>
 80293c0:	4603      	mov	r3, r0
 80293c2:	2b00      	cmp	r3, #0
 80293c4:	d108      	bne.n	80293d8 <netconn_drain+0x4c>
            pbuf_free((struct pbuf *)mem);
 80293c6:	693b      	ldr	r3, [r7, #16]
 80293c8:	4618      	mov	r0, r3
 80293ca:	f002 fd67 	bl	802be9c <pbuf_free>
 80293ce:	e003      	b.n	80293d8 <netconn_drain+0x4c>
          }
        } else
#endif /* LWIP_TCP */
        {
          netbuf_delete((struct netbuf *)mem);
 80293d0:	693b      	ldr	r3, [r7, #16]
 80293d2:	4618      	mov	r0, r3
 80293d4:	f000 fe98 	bl	802a108 <netbuf_delete>
    while (sys_mbox_tryfetch(&conn->recvmbox, &mem) != SYS_MBOX_EMPTY) {
 80293d8:	687b      	ldr	r3, [r7, #4]
 80293da:	3310      	adds	r3, #16
 80293dc:	f107 0210 	add.w	r2, r7, #16
 80293e0:	4611      	mov	r1, r2
 80293e2:	4618      	mov	r0, r3
 80293e4:	f00c fae9 	bl	80359ba <sys_arch_mbox_tryfetch>
 80293e8:	4603      	mov	r3, r0
 80293ea:	f1b3 3fff 	cmp.w	r3, #4294967295
 80293ee:	d1da      	bne.n	80293a6 <netconn_drain+0x1a>
        }
      }
    }
    sys_mbox_free(&conn->recvmbox);
 80293f0:	687b      	ldr	r3, [r7, #4]
 80293f2:	3310      	adds	r3, #16
 80293f4:	4618      	mov	r0, r3
 80293f6:	f00c fa55 	bl	80358a4 <sys_mbox_free>
    sys_mbox_set_invalid(&conn->recvmbox);
 80293fa:	687b      	ldr	r3, [r7, #4]
 80293fc:	3310      	adds	r3, #16
 80293fe:	4618      	mov	r0, r3
 8029400:	f00c fb08 	bl	8035a14 <sys_mbox_set_invalid>
  }

  /* Delete and drain the acceptmbox. */
#if LWIP_TCP
  if (sys_mbox_valid(&conn->acceptmbox)) {
 8029404:	687b      	ldr	r3, [r7, #4]
 8029406:	3314      	adds	r3, #20
 8029408:	4618      	mov	r0, r3
 802940a:	f00c faf2 	bl	80359f2 <sys_mbox_valid>
 802940e:	4603      	mov	r3, r0
 8029410:	2b00      	cmp	r3, #0
 8029412:	d034      	beq.n	802947e <netconn_drain+0xf2>
    while (sys_mbox_tryfetch(&conn->acceptmbox, &mem) != SYS_MBOX_EMPTY) {
 8029414:	e01d      	b.n	8029452 <netconn_drain+0xc6>
#if LWIP_NETCONN_FULLDUPLEX
      if (!lwip_netconn_is_deallocated_msg(mem))
#endif /* LWIP_NETCONN_FULLDUPLEX */
      {
        err_t err;
        if (!lwip_netconn_is_err_msg(mem, &err)) {
 8029416:	693b      	ldr	r3, [r7, #16]
 8029418:	f107 020e 	add.w	r2, r7, #14
 802941c:	4611      	mov	r1, r2
 802941e:	4618      	mov	r0, r3
 8029420:	f7ff fabe 	bl	80289a0 <lwip_netconn_is_err_msg>
 8029424:	4603      	mov	r3, r0
 8029426:	2b00      	cmp	r3, #0
 8029428:	d113      	bne.n	8029452 <netconn_drain+0xc6>
          struct netconn *newconn = (struct netconn *)mem;
 802942a:	693b      	ldr	r3, [r7, #16]
 802942c:	617b      	str	r3, [r7, #20]
          /* Only tcp pcbs have an acceptmbox, so no need to check conn->type */
          /* pcb might be set to NULL already by err_tcp() */
          /* drain recvmbox */
          netconn_drain(newconn);
 802942e:	6978      	ldr	r0, [r7, #20]
 8029430:	f7ff ffac 	bl	802938c <netconn_drain>
          if (newconn->pcb.tcp != NULL) {
 8029434:	697b      	ldr	r3, [r7, #20]
 8029436:	685b      	ldr	r3, [r3, #4]
 8029438:	2b00      	cmp	r3, #0
 802943a:	d007      	beq.n	802944c <netconn_drain+0xc0>
            tcp_abort(newconn->pcb.tcp);
 802943c:	697b      	ldr	r3, [r7, #20]
 802943e:	685b      	ldr	r3, [r3, #4]
 8029440:	4618      	mov	r0, r3
 8029442:	f003 fb23 	bl	802ca8c <tcp_abort>
            newconn->pcb.tcp = NULL;
 8029446:	697b      	ldr	r3, [r7, #20]
 8029448:	2200      	movs	r2, #0
 802944a:	605a      	str	r2, [r3, #4]
          }
          netconn_free(newconn);
 802944c:	6978      	ldr	r0, [r7, #20]
 802944e:	f7ff ff53 	bl	80292f8 <netconn_free>
    while (sys_mbox_tryfetch(&conn->acceptmbox, &mem) != SYS_MBOX_EMPTY) {
 8029452:	687b      	ldr	r3, [r7, #4]
 8029454:	3314      	adds	r3, #20
 8029456:	f107 0210 	add.w	r2, r7, #16
 802945a:	4611      	mov	r1, r2
 802945c:	4618      	mov	r0, r3
 802945e:	f00c faac 	bl	80359ba <sys_arch_mbox_tryfetch>
 8029462:	4603      	mov	r3, r0
 8029464:	f1b3 3fff 	cmp.w	r3, #4294967295
 8029468:	d1d5      	bne.n	8029416 <netconn_drain+0x8a>
        }
      }
    }
    sys_mbox_free(&conn->acceptmbox);
 802946a:	687b      	ldr	r3, [r7, #4]
 802946c:	3314      	adds	r3, #20
 802946e:	4618      	mov	r0, r3
 8029470:	f00c fa18 	bl	80358a4 <sys_mbox_free>
    sys_mbox_set_invalid(&conn->acceptmbox);
 8029474:	687b      	ldr	r3, [r7, #4]
 8029476:	3314      	adds	r3, #20
 8029478:	4618      	mov	r0, r3
 802947a:	f00c facb 	bl	8035a14 <sys_mbox_set_invalid>
  }
#endif /* LWIP_TCP */
}
 802947e:	bf00      	nop
 8029480:	3718      	adds	r7, #24
 8029482:	46bd      	mov	sp, r7
 8029484:	bd80      	pop	{r7, pc}
	...

08029488 <lwip_netconn_do_close_internal>:
 *
 * @param conn the TCP netconn to close
 */
static err_t
lwip_netconn_do_close_internal(struct netconn *conn  WRITE_DELAYED_PARAM)
{
 8029488:	b580      	push	{r7, lr}
 802948a:	b086      	sub	sp, #24
 802948c:	af00      	add	r7, sp, #0
 802948e:	6078      	str	r0, [r7, #4]
 8029490:	460b      	mov	r3, r1
 8029492:	70fb      	strb	r3, [r7, #3]
  err_t err;
  u8_t shut, shut_rx, shut_tx, shut_close;
  u8_t close_finished = 0;
 8029494:	2300      	movs	r3, #0
 8029496:	757b      	strb	r3, [r7, #21]
  struct tcp_pcb *tpcb;
#if LWIP_SO_LINGER
  u8_t linger_wait_required = 0;
#endif /* LWIP_SO_LINGER */

  LWIP_ASSERT("invalid conn", (conn != NULL));
 8029498:	687b      	ldr	r3, [r7, #4]
 802949a:	2b00      	cmp	r3, #0
 802949c:	d106      	bne.n	80294ac <lwip_netconn_do_close_internal+0x24>
 802949e:	4b87      	ldr	r3, [pc, #540]	; (80296bc <lwip_netconn_do_close_internal+0x234>)
 80294a0:	f240 32a2 	movw	r2, #930	; 0x3a2
 80294a4:	4986      	ldr	r1, [pc, #536]	; (80296c0 <lwip_netconn_do_close_internal+0x238>)
 80294a6:	4887      	ldr	r0, [pc, #540]	; (80296c4 <lwip_netconn_do_close_internal+0x23c>)
 80294a8:	f00c fe76 	bl	8036198 <iprintf>
  LWIP_ASSERT("this is for tcp netconns only", (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP));
 80294ac:	687b      	ldr	r3, [r7, #4]
 80294ae:	781b      	ldrb	r3, [r3, #0]
 80294b0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80294b4:	2b10      	cmp	r3, #16
 80294b6:	d006      	beq.n	80294c6 <lwip_netconn_do_close_internal+0x3e>
 80294b8:	4b80      	ldr	r3, [pc, #512]	; (80296bc <lwip_netconn_do_close_internal+0x234>)
 80294ba:	f240 32a3 	movw	r2, #931	; 0x3a3
 80294be:	4982      	ldr	r1, [pc, #520]	; (80296c8 <lwip_netconn_do_close_internal+0x240>)
 80294c0:	4880      	ldr	r0, [pc, #512]	; (80296c4 <lwip_netconn_do_close_internal+0x23c>)
 80294c2:	f00c fe69 	bl	8036198 <iprintf>
  LWIP_ASSERT("conn must be in state NETCONN_CLOSE", (conn->state == NETCONN_CLOSE));
 80294c6:	687b      	ldr	r3, [r7, #4]
 80294c8:	785b      	ldrb	r3, [r3, #1]
 80294ca:	2b04      	cmp	r3, #4
 80294cc:	d006      	beq.n	80294dc <lwip_netconn_do_close_internal+0x54>
 80294ce:	4b7b      	ldr	r3, [pc, #492]	; (80296bc <lwip_netconn_do_close_internal+0x234>)
 80294d0:	f44f 7269 	mov.w	r2, #932	; 0x3a4
 80294d4:	497d      	ldr	r1, [pc, #500]	; (80296cc <lwip_netconn_do_close_internal+0x244>)
 80294d6:	487b      	ldr	r0, [pc, #492]	; (80296c4 <lwip_netconn_do_close_internal+0x23c>)
 80294d8:	f00c fe5e 	bl	8036198 <iprintf>
  LWIP_ASSERT("pcb already closed", (conn->pcb.tcp != NULL));
 80294dc:	687b      	ldr	r3, [r7, #4]
 80294de:	685b      	ldr	r3, [r3, #4]
 80294e0:	2b00      	cmp	r3, #0
 80294e2:	d106      	bne.n	80294f2 <lwip_netconn_do_close_internal+0x6a>
 80294e4:	4b75      	ldr	r3, [pc, #468]	; (80296bc <lwip_netconn_do_close_internal+0x234>)
 80294e6:	f240 32a5 	movw	r2, #933	; 0x3a5
 80294ea:	4979      	ldr	r1, [pc, #484]	; (80296d0 <lwip_netconn_do_close_internal+0x248>)
 80294ec:	4875      	ldr	r0, [pc, #468]	; (80296c4 <lwip_netconn_do_close_internal+0x23c>)
 80294ee:	f00c fe53 	bl	8036198 <iprintf>
  LWIP_ASSERT("conn->current_msg != NULL", conn->current_msg != NULL);
 80294f2:	687b      	ldr	r3, [r7, #4]
 80294f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80294f6:	2b00      	cmp	r3, #0
 80294f8:	d106      	bne.n	8029508 <lwip_netconn_do_close_internal+0x80>
 80294fa:	4b70      	ldr	r3, [pc, #448]	; (80296bc <lwip_netconn_do_close_internal+0x234>)
 80294fc:	f240 32a6 	movw	r2, #934	; 0x3a6
 8029500:	4974      	ldr	r1, [pc, #464]	; (80296d4 <lwip_netconn_do_close_internal+0x24c>)
 8029502:	4870      	ldr	r0, [pc, #448]	; (80296c4 <lwip_netconn_do_close_internal+0x23c>)
 8029504:	f00c fe48 	bl	8036198 <iprintf>

  tpcb = conn->pcb.tcp;
 8029508:	687b      	ldr	r3, [r7, #4]
 802950a:	685b      	ldr	r3, [r3, #4]
 802950c:	613b      	str	r3, [r7, #16]
  shut = conn->current_msg->msg.sd.shut;
 802950e:	687b      	ldr	r3, [r7, #4]
 8029510:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8029512:	7a1b      	ldrb	r3, [r3, #8]
 8029514:	73fb      	strb	r3, [r7, #15]
  shut_rx = shut & NETCONN_SHUT_RD;
 8029516:	7bfb      	ldrb	r3, [r7, #15]
 8029518:	f003 0301 	and.w	r3, r3, #1
 802951c:	73bb      	strb	r3, [r7, #14]
  shut_tx = shut & NETCONN_SHUT_WR;
 802951e:	7bfb      	ldrb	r3, [r7, #15]
 8029520:	f003 0302 	and.w	r3, r3, #2
 8029524:	737b      	strb	r3, [r7, #13]
  /* shutting down both ends is the same as closing
     (also if RD or WR side was shut down before already) */
  if (shut == NETCONN_SHUT_RDWR) {
 8029526:	7bfb      	ldrb	r3, [r7, #15]
 8029528:	2b03      	cmp	r3, #3
 802952a:	d102      	bne.n	8029532 <lwip_netconn_do_close_internal+0xaa>
    shut_close = 1;
 802952c:	2301      	movs	r3, #1
 802952e:	75bb      	strb	r3, [r7, #22]
 8029530:	e01f      	b.n	8029572 <lwip_netconn_do_close_internal+0xea>
  } else if (shut_rx &&
 8029532:	7bbb      	ldrb	r3, [r7, #14]
 8029534:	2b00      	cmp	r3, #0
 8029536:	d00e      	beq.n	8029556 <lwip_netconn_do_close_internal+0xce>
             ((tpcb->state == FIN_WAIT_1) ||
 8029538:	693b      	ldr	r3, [r7, #16]
 802953a:	7d1b      	ldrb	r3, [r3, #20]
  } else if (shut_rx &&
 802953c:	2b05      	cmp	r3, #5
 802953e:	d007      	beq.n	8029550 <lwip_netconn_do_close_internal+0xc8>
              (tpcb->state == FIN_WAIT_2) ||
 8029540:	693b      	ldr	r3, [r7, #16]
 8029542:	7d1b      	ldrb	r3, [r3, #20]
             ((tpcb->state == FIN_WAIT_1) ||
 8029544:	2b06      	cmp	r3, #6
 8029546:	d003      	beq.n	8029550 <lwip_netconn_do_close_internal+0xc8>
              (tpcb->state == CLOSING))) {
 8029548:	693b      	ldr	r3, [r7, #16]
 802954a:	7d1b      	ldrb	r3, [r3, #20]
              (tpcb->state == FIN_WAIT_2) ||
 802954c:	2b08      	cmp	r3, #8
 802954e:	d102      	bne.n	8029556 <lwip_netconn_do_close_internal+0xce>
    shut_close = 1;
 8029550:	2301      	movs	r3, #1
 8029552:	75bb      	strb	r3, [r7, #22]
 8029554:	e00d      	b.n	8029572 <lwip_netconn_do_close_internal+0xea>
  } else if (shut_tx && ((tpcb->flags & TF_RXCLOSED) != 0)) {
 8029556:	7b7b      	ldrb	r3, [r7, #13]
 8029558:	2b00      	cmp	r3, #0
 802955a:	d008      	beq.n	802956e <lwip_netconn_do_close_internal+0xe6>
 802955c:	693b      	ldr	r3, [r7, #16]
 802955e:	8b5b      	ldrh	r3, [r3, #26]
 8029560:	f003 0310 	and.w	r3, r3, #16
 8029564:	2b00      	cmp	r3, #0
 8029566:	d002      	beq.n	802956e <lwip_netconn_do_close_internal+0xe6>
    shut_close = 1;
 8029568:	2301      	movs	r3, #1
 802956a:	75bb      	strb	r3, [r7, #22]
 802956c:	e001      	b.n	8029572 <lwip_netconn_do_close_internal+0xea>
  } else {
    shut_close = 0;
 802956e:	2300      	movs	r3, #0
 8029570:	75bb      	strb	r3, [r7, #22]
  }

  /* Set back some callback pointers */
  if (shut_close) {
 8029572:	7dbb      	ldrb	r3, [r7, #22]
 8029574:	2b00      	cmp	r3, #0
 8029576:	d003      	beq.n	8029580 <lwip_netconn_do_close_internal+0xf8>
    tcp_arg(tpcb, NULL);
 8029578:	2100      	movs	r1, #0
 802957a:	6938      	ldr	r0, [r7, #16]
 802957c:	f004 fb3e 	bl	802dbfc <tcp_arg>
  }
  if (tpcb->state == LISTEN) {
 8029580:	693b      	ldr	r3, [r7, #16]
 8029582:	7d1b      	ldrb	r3, [r3, #20]
 8029584:	2b01      	cmp	r3, #1
 8029586:	d104      	bne.n	8029592 <lwip_netconn_do_close_internal+0x10a>
    tcp_accept(tpcb, NULL);
 8029588:	2100      	movs	r1, #0
 802958a:	6938      	ldr	r0, [r7, #16]
 802958c:	f004 fbae 	bl	802dcec <tcp_accept>
 8029590:	e01d      	b.n	80295ce <lwip_netconn_do_close_internal+0x146>
  } else {
    /* some callbacks have to be reset if tcp_close is not successful */
    if (shut_rx) {
 8029592:	7bbb      	ldrb	r3, [r7, #14]
 8029594:	2b00      	cmp	r3, #0
 8029596:	d007      	beq.n	80295a8 <lwip_netconn_do_close_internal+0x120>
      tcp_recv(tpcb, NULL);
 8029598:	2100      	movs	r1, #0
 802959a:	6938      	ldr	r0, [r7, #16]
 802959c:	f004 fb40 	bl	802dc20 <tcp_recv>
      tcp_accept(tpcb, NULL);
 80295a0:	2100      	movs	r1, #0
 80295a2:	6938      	ldr	r0, [r7, #16]
 80295a4:	f004 fba2 	bl	802dcec <tcp_accept>
    }
    if (shut_tx) {
 80295a8:	7b7b      	ldrb	r3, [r7, #13]
 80295aa:	2b00      	cmp	r3, #0
 80295ac:	d003      	beq.n	80295b6 <lwip_netconn_do_close_internal+0x12e>
      tcp_sent(tpcb, NULL);
 80295ae:	2100      	movs	r1, #0
 80295b0:	6938      	ldr	r0, [r7, #16]
 80295b2:	f004 fb57 	bl	802dc64 <tcp_sent>
    }
    if (shut_close) {
 80295b6:	7dbb      	ldrb	r3, [r7, #22]
 80295b8:	2b00      	cmp	r3, #0
 80295ba:	d008      	beq.n	80295ce <lwip_netconn_do_close_internal+0x146>
      tcp_poll(tpcb, NULL, 0);
 80295bc:	2200      	movs	r2, #0
 80295be:	2100      	movs	r1, #0
 80295c0:	6938      	ldr	r0, [r7, #16]
 80295c2:	f004 fbab 	bl	802dd1c <tcp_poll>
      tcp_err(tpcb, NULL);
 80295c6:	2100      	movs	r1, #0
 80295c8:	6938      	ldr	r0, [r7, #16]
 80295ca:	f004 fb6d 	bl	802dca8 <tcp_err>
    }
  }
  /* Try to close the connection */
  if (shut_close) {
 80295ce:	7dbb      	ldrb	r3, [r7, #22]
 80295d0:	2b00      	cmp	r3, #0
 80295d2:	d005      	beq.n	80295e0 <lwip_netconn_do_close_internal+0x158>
      }
    }
    if ((err == ERR_OK) && (tpcb != NULL))
#endif /* LWIP_SO_LINGER */
    {
      err = tcp_close(tpcb);
 80295d4:	6938      	ldr	r0, [r7, #16]
 80295d6:	f003 f913 	bl	802c800 <tcp_close>
 80295da:	4603      	mov	r3, r0
 80295dc:	75fb      	strb	r3, [r7, #23]
 80295de:	e007      	b.n	80295f0 <lwip_netconn_do_close_internal+0x168>
    }
  } else {
    err = tcp_shutdown(tpcb, shut_rx, shut_tx);
 80295e0:	7bbb      	ldrb	r3, [r7, #14]
 80295e2:	7b7a      	ldrb	r2, [r7, #13]
 80295e4:	4619      	mov	r1, r3
 80295e6:	6938      	ldr	r0, [r7, #16]
 80295e8:	f003 f936 	bl	802c858 <tcp_shutdown>
 80295ec:	4603      	mov	r3, r0
 80295ee:	75fb      	strb	r3, [r7, #23]
  }
  if (err == ERR_OK) {
 80295f0:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80295f4:	2b00      	cmp	r3, #0
 80295f6:	d102      	bne.n	80295fe <lwip_netconn_do_close_internal+0x176>
    close_finished = 1;
 80295f8:	2301      	movs	r3, #1
 80295fa:	757b      	strb	r3, [r7, #21]
 80295fc:	e016      	b.n	802962c <lwip_netconn_do_close_internal+0x1a4>
      close_finished = 0;
      err = ERR_INPROGRESS;
    }
#endif /* LWIP_SO_LINGER */
  } else {
    if (err == ERR_MEM) {
 80295fe:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8029602:	f1b3 3fff 	cmp.w	r3, #4294967295
 8029606:	d10f      	bne.n	8029628 <lwip_netconn_do_close_internal+0x1a0>
        close_timeout = conn->linger * 1000U;
      }
#endif
      if ((s32_t)(sys_now() - conn->current_msg->msg.sd.time_started) >= close_timeout) {
#else /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
      if (conn->current_msg->msg.sd.polls_left == 0) {
 8029608:	687b      	ldr	r3, [r7, #4]
 802960a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 802960c:	7a5b      	ldrb	r3, [r3, #9]
 802960e:	2b00      	cmp	r3, #0
 8029610:	d10c      	bne.n	802962c <lwip_netconn_do_close_internal+0x1a4>
#endif /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
        close_finished = 1;
 8029612:	2301      	movs	r3, #1
 8029614:	757b      	strb	r3, [r7, #21]
        if (shut_close) {
 8029616:	7dbb      	ldrb	r3, [r7, #22]
 8029618:	2b00      	cmp	r3, #0
 802961a:	d007      	beq.n	802962c <lwip_netconn_do_close_internal+0x1a4>
          /* in this case, we want to RST the connection */
          tcp_abort(tpcb);
 802961c:	6938      	ldr	r0, [r7, #16]
 802961e:	f003 fa35 	bl	802ca8c <tcp_abort>
          err = ERR_OK;
 8029622:	2300      	movs	r3, #0
 8029624:	75fb      	strb	r3, [r7, #23]
 8029626:	e001      	b.n	802962c <lwip_netconn_do_close_internal+0x1a4>
        }
      }
    } else {
      /* Closing failed for a non-memory error: give up */
      close_finished = 1;
 8029628:	2301      	movs	r3, #1
 802962a:	757b      	strb	r3, [r7, #21]
    }
  }
  if (close_finished) {
 802962c:	7d7b      	ldrb	r3, [r7, #21]
 802962e:	2b00      	cmp	r3, #0
 8029630:	d052      	beq.n	80296d8 <lwip_netconn_do_close_internal+0x250>
    /* Closing done (succeeded, non-memory error, nonblocking error or timeout) */
    sys_sem_t *op_completed_sem = LWIP_API_MSG_SEM(conn->current_msg);
 8029632:	687b      	ldr	r3, [r7, #4]
 8029634:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8029636:	681b      	ldr	r3, [r3, #0]
 8029638:	330c      	adds	r3, #12
 802963a:	60bb      	str	r3, [r7, #8]
    conn->current_msg->err = err;
 802963c:	687b      	ldr	r3, [r7, #4]
 802963e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8029640:	7dfa      	ldrb	r2, [r7, #23]
 8029642:	711a      	strb	r2, [r3, #4]
    conn->current_msg = NULL;
 8029644:	687b      	ldr	r3, [r7, #4]
 8029646:	2200      	movs	r2, #0
 8029648:	625a      	str	r2, [r3, #36]	; 0x24
    conn->state = NETCONN_NONE;
 802964a:	687b      	ldr	r3, [r7, #4]
 802964c:	2200      	movs	r2, #0
 802964e:	705a      	strb	r2, [r3, #1]
    if (err == ERR_OK) {
 8029650:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8029654:	2b00      	cmp	r3, #0
 8029656:	d129      	bne.n	80296ac <lwip_netconn_do_close_internal+0x224>
      if (shut_close) {
 8029658:	7dbb      	ldrb	r3, [r7, #22]
 802965a:	2b00      	cmp	r3, #0
 802965c:	d00c      	beq.n	8029678 <lwip_netconn_do_close_internal+0x1f0>
        /* Set back some callback pointers as conn is going away */
        conn->pcb.tcp = NULL;
 802965e:	687b      	ldr	r3, [r7, #4]
 8029660:	2200      	movs	r2, #0
 8029662:	605a      	str	r2, [r3, #4]
        /* Trigger select() in socket layer. Make sure everybody notices activity
         on the connection, error first! */
        API_EVENT(conn, NETCONN_EVT_ERROR, 0);
 8029664:	687b      	ldr	r3, [r7, #4]
 8029666:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8029668:	2b00      	cmp	r3, #0
 802966a:	d005      	beq.n	8029678 <lwip_netconn_do_close_internal+0x1f0>
 802966c:	687b      	ldr	r3, [r7, #4]
 802966e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8029670:	2200      	movs	r2, #0
 8029672:	2104      	movs	r1, #4
 8029674:	6878      	ldr	r0, [r7, #4]
 8029676:	4798      	blx	r3
      }
      if (shut_rx) {
 8029678:	7bbb      	ldrb	r3, [r7, #14]
 802967a:	2b00      	cmp	r3, #0
 802967c:	d009      	beq.n	8029692 <lwip_netconn_do_close_internal+0x20a>
        API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
 802967e:	687b      	ldr	r3, [r7, #4]
 8029680:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8029682:	2b00      	cmp	r3, #0
 8029684:	d005      	beq.n	8029692 <lwip_netconn_do_close_internal+0x20a>
 8029686:	687b      	ldr	r3, [r7, #4]
 8029688:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 802968a:	2200      	movs	r2, #0
 802968c:	2100      	movs	r1, #0
 802968e:	6878      	ldr	r0, [r7, #4]
 8029690:	4798      	blx	r3
      }
      if (shut_tx) {
 8029692:	7b7b      	ldrb	r3, [r7, #13]
 8029694:	2b00      	cmp	r3, #0
 8029696:	d009      	beq.n	80296ac <lwip_netconn_do_close_internal+0x224>
        API_EVENT(conn, NETCONN_EVT_SENDPLUS, 0);
 8029698:	687b      	ldr	r3, [r7, #4]
 802969a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 802969c:	2b00      	cmp	r3, #0
 802969e:	d005      	beq.n	80296ac <lwip_netconn_do_close_internal+0x224>
 80296a0:	687b      	ldr	r3, [r7, #4]
 80296a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80296a4:	2200      	movs	r2, #0
 80296a6:	2102      	movs	r1, #2
 80296a8:	6878      	ldr	r0, [r7, #4]
 80296aa:	4798      	blx	r3
      }
    }
#if LWIP_TCPIP_CORE_LOCKING
    if (delayed)
 80296ac:	78fb      	ldrb	r3, [r7, #3]
 80296ae:	2b00      	cmp	r3, #0
 80296b0:	d002      	beq.n	80296b8 <lwip_netconn_do_close_internal+0x230>
#endif
    {
      /* wake up the application task */
      sys_sem_signal(op_completed_sem);
 80296b2:	68b8      	ldr	r0, [r7, #8]
 80296b4:	f00c fa35 	bl	8035b22 <sys_sem_signal>
    }
    return ERR_OK;
 80296b8:	2300      	movs	r3, #0
 80296ba:	e03c      	b.n	8029736 <lwip_netconn_do_close_internal+0x2ae>
 80296bc:	080378dc 	.word	0x080378dc
 80296c0:	08037bb0 	.word	0x08037bb0
 80296c4:	08037920 	.word	0x08037920
 80296c8:	08037bc0 	.word	0x08037bc0
 80296cc:	08037be0 	.word	0x08037be0
 80296d0:	08037c04 	.word	0x08037c04
 80296d4:	08037a44 	.word	0x08037a44
  }
  if (!close_finished) {
 80296d8:	7d7b      	ldrb	r3, [r7, #21]
 80296da:	2b00      	cmp	r3, #0
 80296dc:	d11e      	bne.n	802971c <lwip_netconn_do_close_internal+0x294>
    /* Closing failed and we want to wait: restore some of the callbacks */
    /* Closing of listen pcb will never fail! */
    LWIP_ASSERT("Closing a listen pcb may not fail!", (tpcb->state != LISTEN));
 80296de:	693b      	ldr	r3, [r7, #16]
 80296e0:	7d1b      	ldrb	r3, [r3, #20]
 80296e2:	2b01      	cmp	r3, #1
 80296e4:	d106      	bne.n	80296f4 <lwip_netconn_do_close_internal+0x26c>
 80296e6:	4b16      	ldr	r3, [pc, #88]	; (8029740 <lwip_netconn_do_close_internal+0x2b8>)
 80296e8:	f240 4241 	movw	r2, #1089	; 0x441
 80296ec:	4915      	ldr	r1, [pc, #84]	; (8029744 <lwip_netconn_do_close_internal+0x2bc>)
 80296ee:	4816      	ldr	r0, [pc, #88]	; (8029748 <lwip_netconn_do_close_internal+0x2c0>)
 80296f0:	f00c fd52 	bl	8036198 <iprintf>
    if (shut_tx) {
 80296f4:	7b7b      	ldrb	r3, [r7, #13]
 80296f6:	2b00      	cmp	r3, #0
 80296f8:	d003      	beq.n	8029702 <lwip_netconn_do_close_internal+0x27a>
      tcp_sent(tpcb, sent_tcp);
 80296fa:	4914      	ldr	r1, [pc, #80]	; (802974c <lwip_netconn_do_close_internal+0x2c4>)
 80296fc:	6938      	ldr	r0, [r7, #16]
 80296fe:	f004 fab1 	bl	802dc64 <tcp_sent>
    }
    /* when waiting for close, set up poll interval to 500ms */
    tcp_poll(tpcb, poll_tcp, 1);
 8029702:	2201      	movs	r2, #1
 8029704:	4912      	ldr	r1, [pc, #72]	; (8029750 <lwip_netconn_do_close_internal+0x2c8>)
 8029706:	6938      	ldr	r0, [r7, #16]
 8029708:	f004 fb08 	bl	802dd1c <tcp_poll>
    tcp_err(tpcb, err_tcp);
 802970c:	4911      	ldr	r1, [pc, #68]	; (8029754 <lwip_netconn_do_close_internal+0x2cc>)
 802970e:	6938      	ldr	r0, [r7, #16]
 8029710:	f004 faca 	bl	802dca8 <tcp_err>
    tcp_arg(tpcb, conn);
 8029714:	6879      	ldr	r1, [r7, #4]
 8029716:	6938      	ldr	r0, [r7, #16]
 8029718:	f004 fa70 	bl	802dbfc <tcp_arg>
    /* don't restore recv callback: we don't want to receive any more data */
  }
  /* If closing didn't succeed, we get called again either
     from poll_tcp or from sent_tcp */
  LWIP_ASSERT("err != ERR_OK", err != ERR_OK);
 802971c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8029720:	2b00      	cmp	r3, #0
 8029722:	d106      	bne.n	8029732 <lwip_netconn_do_close_internal+0x2aa>
 8029724:	4b06      	ldr	r3, [pc, #24]	; (8029740 <lwip_netconn_do_close_internal+0x2b8>)
 8029726:	f240 424d 	movw	r2, #1101	; 0x44d
 802972a:	490b      	ldr	r1, [pc, #44]	; (8029758 <lwip_netconn_do_close_internal+0x2d0>)
 802972c:	4806      	ldr	r0, [pc, #24]	; (8029748 <lwip_netconn_do_close_internal+0x2c0>)
 802972e:	f00c fd33 	bl	8036198 <iprintf>
  return err;
 8029732:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8029736:	4618      	mov	r0, r3
 8029738:	3718      	adds	r7, #24
 802973a:	46bd      	mov	sp, r7
 802973c:	bd80      	pop	{r7, pc}
 802973e:	bf00      	nop
 8029740:	080378dc 	.word	0x080378dc
 8029744:	08037c18 	.word	0x08037c18
 8029748:	08037920 	.word	0x08037920
 802974c:	08028ced 	.word	0x08028ced
 8029750:	08028c1d 	.word	0x08028c1d
 8029754:	08028d99 	.word	0x08028d99
 8029758:	08037c3c 	.word	0x08037c3c

0802975c <lwip_netconn_do_delconn>:
 *
 * @param m the api_msg pointing to the connection
 */
void
lwip_netconn_do_delconn(void *m)
{
 802975c:	b580      	push	{r7, lr}
 802975e:	b084      	sub	sp, #16
 8029760:	af00      	add	r7, sp, #0
 8029762:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 8029764:	687b      	ldr	r3, [r7, #4]
 8029766:	60fb      	str	r3, [r7, #12]

  enum netconn_state state = msg->conn->state;
 8029768:	68fb      	ldr	r3, [r7, #12]
 802976a:	681b      	ldr	r3, [r3, #0]
 802976c:	785b      	ldrb	r3, [r3, #1]
 802976e:	72fb      	strb	r3, [r7, #11]
  LWIP_ASSERT("netconn state error", /* this only happens for TCP netconns */
 8029770:	7afb      	ldrb	r3, [r7, #11]
 8029772:	2b00      	cmp	r3, #0
 8029774:	d00d      	beq.n	8029792 <lwip_netconn_do_delconn+0x36>
 8029776:	68fb      	ldr	r3, [r7, #12]
 8029778:	681b      	ldr	r3, [r3, #0]
 802977a:	781b      	ldrb	r3, [r3, #0]
 802977c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8029780:	2b10      	cmp	r3, #16
 8029782:	d006      	beq.n	8029792 <lwip_netconn_do_delconn+0x36>
 8029784:	4b61      	ldr	r3, [pc, #388]	; (802990c <lwip_netconn_do_delconn+0x1b0>)
 8029786:	f240 425e 	movw	r2, #1118	; 0x45e
 802978a:	4961      	ldr	r1, [pc, #388]	; (8029910 <lwip_netconn_do_delconn+0x1b4>)
 802978c:	4861      	ldr	r0, [pc, #388]	; (8029914 <lwip_netconn_do_delconn+0x1b8>)
 802978e:	f00c fd03 	bl	8036198 <iprintf>
      msg->conn->state = NETCONN_NONE;
      sys_sem_signal(op_completed_sem);
    }
  }
#else /* LWIP_NETCONN_FULLDUPLEX */
  if (((state != NETCONN_NONE) &&
 8029792:	7afb      	ldrb	r3, [r7, #11]
 8029794:	2b00      	cmp	r3, #0
 8029796:	d005      	beq.n	80297a4 <lwip_netconn_do_delconn+0x48>
 8029798:	7afb      	ldrb	r3, [r7, #11]
 802979a:	2b02      	cmp	r3, #2
 802979c:	d002      	beq.n	80297a4 <lwip_netconn_do_delconn+0x48>
       (state != NETCONN_LISTEN) &&
 802979e:	7afb      	ldrb	r3, [r7, #11]
 80297a0:	2b03      	cmp	r3, #3
 80297a2:	d10a      	bne.n	80297ba <lwip_netconn_do_delconn+0x5e>
       (state != NETCONN_CONNECT)) ||
 80297a4:	7afb      	ldrb	r3, [r7, #11]
 80297a6:	2b03      	cmp	r3, #3
 80297a8:	d10b      	bne.n	80297c2 <lwip_netconn_do_delconn+0x66>
      ((state == NETCONN_CONNECT) && !IN_NONBLOCKING_CONNECT(msg->conn))) {
 80297aa:	68fb      	ldr	r3, [r7, #12]
 80297ac:	681b      	ldr	r3, [r3, #0]
 80297ae:	f893 3020 	ldrb.w	r3, [r3, #32]
 80297b2:	f003 0304 	and.w	r3, r3, #4
 80297b6:	2b00      	cmp	r3, #0
 80297b8:	d103      	bne.n	80297c2 <lwip_netconn_do_delconn+0x66>
    /* This means either a blocking write or blocking connect is running
       (nonblocking write returns and sets state to NONE) */
    msg->err = ERR_INPROGRESS;
 80297ba:	68fb      	ldr	r3, [r7, #12]
 80297bc:	22fb      	movs	r2, #251	; 0xfb
 80297be:	711a      	strb	r2, [r3, #4]
 80297c0:	e098      	b.n	80298f4 <lwip_netconn_do_delconn+0x198>
  } else
#endif /* LWIP_NETCONN_FULLDUPLEX */
  {
    LWIP_ASSERT("blocking connect in progress",
 80297c2:	7afb      	ldrb	r3, [r7, #11]
 80297c4:	2b03      	cmp	r3, #3
 80297c6:	d10e      	bne.n	80297e6 <lwip_netconn_do_delconn+0x8a>
 80297c8:	68fb      	ldr	r3, [r7, #12]
 80297ca:	681b      	ldr	r3, [r3, #0]
 80297cc:	f893 3020 	ldrb.w	r3, [r3, #32]
 80297d0:	f003 0304 	and.w	r3, r3, #4
 80297d4:	2b00      	cmp	r3, #0
 80297d6:	d106      	bne.n	80297e6 <lwip_netconn_do_delconn+0x8a>
 80297d8:	4b4c      	ldr	r3, [pc, #304]	; (802990c <lwip_netconn_do_delconn+0x1b0>)
 80297da:	f240 427a 	movw	r2, #1146	; 0x47a
 80297de:	494e      	ldr	r1, [pc, #312]	; (8029918 <lwip_netconn_do_delconn+0x1bc>)
 80297e0:	484c      	ldr	r0, [pc, #304]	; (8029914 <lwip_netconn_do_delconn+0x1b8>)
 80297e2:	f00c fcd9 	bl	8036198 <iprintf>
                (state != NETCONN_CONNECT) || IN_NONBLOCKING_CONNECT(msg->conn));
    msg->err = ERR_OK;
 80297e6:	68fb      	ldr	r3, [r7, #12]
 80297e8:	2200      	movs	r2, #0
 80297ea:	711a      	strb	r2, [r3, #4]
#if LWIP_NETCONN_FULLDUPLEX
    /* Mark mboxes invalid */
    netconn_mark_mbox_invalid(msg->conn);
#else /* LWIP_NETCONN_FULLDUPLEX */
    netconn_drain(msg->conn);
 80297ec:	68fb      	ldr	r3, [r7, #12]
 80297ee:	681b      	ldr	r3, [r3, #0]
 80297f0:	4618      	mov	r0, r3
 80297f2:	f7ff fdcb 	bl	802938c <netconn_drain>
#endif /* LWIP_NETCONN_FULLDUPLEX */

    if (msg->conn->pcb.tcp != NULL) {
 80297f6:	68fb      	ldr	r3, [r7, #12]
 80297f8:	681b      	ldr	r3, [r3, #0]
 80297fa:	685b      	ldr	r3, [r3, #4]
 80297fc:	2b00      	cmp	r3, #0
 80297fe:	d05f      	beq.n	80298c0 <lwip_netconn_do_delconn+0x164>

      switch (NETCONNTYPE_GROUP(msg->conn->type)) {
 8029800:	68fb      	ldr	r3, [r7, #12]
 8029802:	681b      	ldr	r3, [r3, #0]
 8029804:	781b      	ldrb	r3, [r3, #0]
 8029806:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 802980a:	2b10      	cmp	r3, #16
 802980c:	d00d      	beq.n	802982a <lwip_netconn_do_delconn+0xce>
 802980e:	2b20      	cmp	r3, #32
 8029810:	d151      	bne.n	80298b6 <lwip_netconn_do_delconn+0x15a>
          raw_remove(msg->conn->pcb.raw);
          break;
#endif /* LWIP_RAW */
#if LWIP_UDP
        case NETCONN_UDP:
          msg->conn->pcb.udp->recv_arg = NULL;
 8029812:	68fb      	ldr	r3, [r7, #12]
 8029814:	681b      	ldr	r3, [r3, #0]
 8029816:	685b      	ldr	r3, [r3, #4]
 8029818:	2200      	movs	r2, #0
 802981a:	61da      	str	r2, [r3, #28]
          udp_remove(msg->conn->pcb.udp);
 802981c:	68fb      	ldr	r3, [r7, #12]
 802981e:	681b      	ldr	r3, [r3, #0]
 8029820:	685b      	ldr	r3, [r3, #4]
 8029822:	4618      	mov	r0, r3
 8029824:	f009 fb5e 	bl	8032ee4 <udp_remove>
          break;
 8029828:	e046      	b.n	80298b8 <lwip_netconn_do_delconn+0x15c>
#endif /* LWIP_UDP */
#if LWIP_TCP
        case NETCONN_TCP:
          LWIP_ASSERT("already writing or closing", msg->conn->current_msg == NULL);
 802982a:	68fb      	ldr	r3, [r7, #12]
 802982c:	681b      	ldr	r3, [r3, #0]
 802982e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8029830:	2b00      	cmp	r3, #0
 8029832:	d006      	beq.n	8029842 <lwip_netconn_do_delconn+0xe6>
 8029834:	4b35      	ldr	r3, [pc, #212]	; (802990c <lwip_netconn_do_delconn+0x1b0>)
 8029836:	f240 4294 	movw	r2, #1172	; 0x494
 802983a:	4938      	ldr	r1, [pc, #224]	; (802991c <lwip_netconn_do_delconn+0x1c0>)
 802983c:	4835      	ldr	r0, [pc, #212]	; (8029914 <lwip_netconn_do_delconn+0x1b8>)
 802983e:	f00c fcab 	bl	8036198 <iprintf>
          msg->conn->state = NETCONN_CLOSE;
 8029842:	68fb      	ldr	r3, [r7, #12]
 8029844:	681b      	ldr	r3, [r3, #0]
 8029846:	2204      	movs	r2, #4
 8029848:	705a      	strb	r2, [r3, #1]
          msg->msg.sd.shut = NETCONN_SHUT_RDWR;
 802984a:	68fb      	ldr	r3, [r7, #12]
 802984c:	2203      	movs	r2, #3
 802984e:	721a      	strb	r2, [r3, #8]
          msg->conn->current_msg = msg;
 8029850:	68fb      	ldr	r3, [r7, #12]
 8029852:	681b      	ldr	r3, [r3, #0]
 8029854:	68fa      	ldr	r2, [r7, #12]
 8029856:	625a      	str	r2, [r3, #36]	; 0x24
#if LWIP_TCPIP_CORE_LOCKING
          if (lwip_netconn_do_close_internal(msg->conn, 0) != ERR_OK) {
 8029858:	68fb      	ldr	r3, [r7, #12]
 802985a:	681b      	ldr	r3, [r3, #0]
 802985c:	2100      	movs	r1, #0
 802985e:	4618      	mov	r0, r3
 8029860:	f7ff fe12 	bl	8029488 <lwip_netconn_do_close_internal>
 8029864:	4603      	mov	r3, r0
 8029866:	2b00      	cmp	r3, #0
 8029868:	d04b      	beq.n	8029902 <lwip_netconn_do_delconn+0x1a6>
            LWIP_ASSERT("state!", msg->conn->state == NETCONN_CLOSE);
 802986a:	68fb      	ldr	r3, [r7, #12]
 802986c:	681b      	ldr	r3, [r3, #0]
 802986e:	785b      	ldrb	r3, [r3, #1]
 8029870:	2b04      	cmp	r3, #4
 8029872:	d006      	beq.n	8029882 <lwip_netconn_do_delconn+0x126>
 8029874:	4b25      	ldr	r3, [pc, #148]	; (802990c <lwip_netconn_do_delconn+0x1b0>)
 8029876:	f240 429a 	movw	r2, #1178	; 0x49a
 802987a:	4929      	ldr	r1, [pc, #164]	; (8029920 <lwip_netconn_do_delconn+0x1c4>)
 802987c:	4825      	ldr	r0, [pc, #148]	; (8029914 <lwip_netconn_do_delconn+0x1b8>)
 802987e:	f00c fc8b 	bl	8036198 <iprintf>
            UNLOCK_TCPIP_CORE();
 8029882:	4828      	ldr	r0, [pc, #160]	; (8029924 <lwip_netconn_do_delconn+0x1c8>)
 8029884:	f00c f9e9 	bl	8035c5a <sys_mutex_unlock>
            sys_arch_sem_wait(LWIP_API_MSG_SEM(msg), 0);
 8029888:	68fb      	ldr	r3, [r7, #12]
 802988a:	681b      	ldr	r3, [r3, #0]
 802988c:	330c      	adds	r3, #12
 802988e:	2100      	movs	r1, #0
 8029890:	4618      	mov	r0, r3
 8029892:	f00c f915 	bl	8035ac0 <sys_arch_sem_wait>
            LOCK_TCPIP_CORE();
 8029896:	4823      	ldr	r0, [pc, #140]	; (8029924 <lwip_netconn_do_delconn+0x1c8>)
 8029898:	f00c f9d0 	bl	8035c3c <sys_mutex_lock>
            LWIP_ASSERT("state!", msg->conn->state == NETCONN_NONE);
 802989c:	68fb      	ldr	r3, [r7, #12]
 802989e:	681b      	ldr	r3, [r3, #0]
 80298a0:	785b      	ldrb	r3, [r3, #1]
 80298a2:	2b00      	cmp	r3, #0
 80298a4:	d02d      	beq.n	8029902 <lwip_netconn_do_delconn+0x1a6>
 80298a6:	4b19      	ldr	r3, [pc, #100]	; (802990c <lwip_netconn_do_delconn+0x1b0>)
 80298a8:	f240 429e 	movw	r2, #1182	; 0x49e
 80298ac:	491c      	ldr	r1, [pc, #112]	; (8029920 <lwip_netconn_do_delconn+0x1c4>)
 80298ae:	4819      	ldr	r0, [pc, #100]	; (8029914 <lwip_netconn_do_delconn+0x1b8>)
 80298b0:	f00c fc72 	bl	8036198 <iprintf>
#else /* LWIP_TCPIP_CORE_LOCKING */
          lwip_netconn_do_close_internal(msg->conn);
#endif /* LWIP_TCPIP_CORE_LOCKING */
          /* API_EVENT is called inside lwip_netconn_do_close_internal, before releasing
             the application thread, so we can return at this point! */
          return;
 80298b4:	e025      	b.n	8029902 <lwip_netconn_do_delconn+0x1a6>
#endif /* LWIP_TCP */
        default:
          break;
 80298b6:	bf00      	nop
      }
      msg->conn->pcb.tcp = NULL;
 80298b8:	68fb      	ldr	r3, [r7, #12]
 80298ba:	681b      	ldr	r3, [r3, #0]
 80298bc:	2200      	movs	r2, #0
 80298be:	605a      	str	r2, [r3, #4]
    }
    /* tcp netconns don't come here! */

    /* @todo: this lets select make the socket readable and writable,
       which is wrong! errfd instead? */
    API_EVENT(msg->conn, NETCONN_EVT_RCVPLUS, 0);
 80298c0:	68fb      	ldr	r3, [r7, #12]
 80298c2:	681b      	ldr	r3, [r3, #0]
 80298c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80298c6:	2b00      	cmp	r3, #0
 80298c8:	d007      	beq.n	80298da <lwip_netconn_do_delconn+0x17e>
 80298ca:	68fb      	ldr	r3, [r7, #12]
 80298cc:	681b      	ldr	r3, [r3, #0]
 80298ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80298d0:	68fa      	ldr	r2, [r7, #12]
 80298d2:	6810      	ldr	r0, [r2, #0]
 80298d4:	2200      	movs	r2, #0
 80298d6:	2100      	movs	r1, #0
 80298d8:	4798      	blx	r3
    API_EVENT(msg->conn, NETCONN_EVT_SENDPLUS, 0);
 80298da:	68fb      	ldr	r3, [r7, #12]
 80298dc:	681b      	ldr	r3, [r3, #0]
 80298de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80298e0:	2b00      	cmp	r3, #0
 80298e2:	d007      	beq.n	80298f4 <lwip_netconn_do_delconn+0x198>
 80298e4:	68fb      	ldr	r3, [r7, #12]
 80298e6:	681b      	ldr	r3, [r3, #0]
 80298e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80298ea:	68fa      	ldr	r2, [r7, #12]
 80298ec:	6810      	ldr	r0, [r2, #0]
 80298ee:	2200      	movs	r2, #0
 80298f0:	2102      	movs	r1, #2
 80298f2:	4798      	blx	r3
  }
  if (sys_sem_valid(LWIP_API_MSG_SEM(msg))) {
 80298f4:	68fb      	ldr	r3, [r7, #12]
 80298f6:	681b      	ldr	r3, [r3, #0]
 80298f8:	330c      	adds	r3, #12
 80298fa:	4618      	mov	r0, r3
 80298fc:	f00c f936 	bl	8035b6c <sys_sem_valid>
 8029900:	e000      	b.n	8029904 <lwip_netconn_do_delconn+0x1a8>
          return;
 8029902:	bf00      	nop
    TCPIP_APIMSG_ACK(msg);
  }
}
 8029904:	3710      	adds	r7, #16
 8029906:	46bd      	mov	sp, r7
 8029908:	bd80      	pop	{r7, pc}
 802990a:	bf00      	nop
 802990c:	080378dc 	.word	0x080378dc
 8029910:	08037c4c 	.word	0x08037c4c
 8029914:	08037920 	.word	0x08037920
 8029918:	08037c60 	.word	0x08037c60
 802991c:	08037c80 	.word	0x08037c80
 8029920:	08037c9c 	.word	0x08037c9c
 8029924:	2000b288 	.word	0x2000b288

08029928 <lwip_netconn_do_bind>:
 * @param m the api_msg pointing to the connection and containing
 *          the IP address and port to bind to
 */
void
lwip_netconn_do_bind(void *m)
{
 8029928:	b580      	push	{r7, lr}
 802992a:	b084      	sub	sp, #16
 802992c:	af00      	add	r7, sp, #0
 802992e:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 8029930:	687b      	ldr	r3, [r7, #4]
 8029932:	60bb      	str	r3, [r7, #8]
  err_t err;

  if (msg->conn->pcb.tcp != NULL) {
 8029934:	68bb      	ldr	r3, [r7, #8]
 8029936:	681b      	ldr	r3, [r3, #0]
 8029938:	685b      	ldr	r3, [r3, #4]
 802993a:	2b00      	cmp	r3, #0
 802993c:	d025      	beq.n	802998a <lwip_netconn_do_bind+0x62>
    switch (NETCONNTYPE_GROUP(msg->conn->type)) {
 802993e:	68bb      	ldr	r3, [r7, #8]
 8029940:	681b      	ldr	r3, [r3, #0]
 8029942:	781b      	ldrb	r3, [r3, #0]
 8029944:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8029948:	2b10      	cmp	r3, #16
 802994a:	d00e      	beq.n	802996a <lwip_netconn_do_bind+0x42>
 802994c:	2b20      	cmp	r3, #32
 802994e:	d119      	bne.n	8029984 <lwip_netconn_do_bind+0x5c>
        err = raw_bind(msg->conn->pcb.raw, API_EXPR_REF(msg->msg.bc.ipaddr));
        break;
#endif /* LWIP_RAW */
#if LWIP_UDP
      case NETCONN_UDP:
        err = udp_bind(msg->conn->pcb.udp, API_EXPR_REF(msg->msg.bc.ipaddr), msg->msg.bc.port);
 8029950:	68bb      	ldr	r3, [r7, #8]
 8029952:	681b      	ldr	r3, [r3, #0]
 8029954:	6858      	ldr	r0, [r3, #4]
 8029956:	68bb      	ldr	r3, [r7, #8]
 8029958:	6899      	ldr	r1, [r3, #8]
 802995a:	68bb      	ldr	r3, [r7, #8]
 802995c:	899b      	ldrh	r3, [r3, #12]
 802995e:	461a      	mov	r2, r3
 8029960:	f009 fa18 	bl	8032d94 <udp_bind>
 8029964:	4603      	mov	r3, r0
 8029966:	73fb      	strb	r3, [r7, #15]
        break;
 8029968:	e011      	b.n	802998e <lwip_netconn_do_bind+0x66>
#endif /* LWIP_UDP */
#if LWIP_TCP
      case NETCONN_TCP:
        err = tcp_bind(msg->conn->pcb.tcp, API_EXPR_REF(msg->msg.bc.ipaddr), msg->msg.bc.port);
 802996a:	68bb      	ldr	r3, [r7, #8]
 802996c:	681b      	ldr	r3, [r3, #0]
 802996e:	6858      	ldr	r0, [r3, #4]
 8029970:	68bb      	ldr	r3, [r7, #8]
 8029972:	6899      	ldr	r1, [r3, #8]
 8029974:	68bb      	ldr	r3, [r7, #8]
 8029976:	899b      	ldrh	r3, [r3, #12]
 8029978:	461a      	mov	r2, r3
 802997a:	f003 f893 	bl	802caa4 <tcp_bind>
 802997e:	4603      	mov	r3, r0
 8029980:	73fb      	strb	r3, [r7, #15]
        break;
 8029982:	e004      	b.n	802998e <lwip_netconn_do_bind+0x66>
#endif /* LWIP_TCP */
      default:
        err = ERR_VAL;
 8029984:	23fa      	movs	r3, #250	; 0xfa
 8029986:	73fb      	strb	r3, [r7, #15]
        break;
 8029988:	e001      	b.n	802998e <lwip_netconn_do_bind+0x66>
    }
  } else {
    err = ERR_VAL;
 802998a:	23fa      	movs	r3, #250	; 0xfa
 802998c:	73fb      	strb	r3, [r7, #15]
  }
  msg->err = err;
 802998e:	68bb      	ldr	r3, [r7, #8]
 8029990:	7bfa      	ldrb	r2, [r7, #15]
 8029992:	711a      	strb	r2, [r3, #4]
  TCPIP_APIMSG_ACK(msg);
}
 8029994:	bf00      	nop
 8029996:	3710      	adds	r7, #16
 8029998:	46bd      	mov	sp, r7
 802999a:	bd80      	pop	{r7, pc}

0802999c <lwip_netconn_do_listen>:
 *
 * @param m the api_msg pointing to the connection
 */
void
lwip_netconn_do_listen(void *m)
{
 802999c:	b580      	push	{r7, lr}
 802999e:	b086      	sub	sp, #24
 80299a0:	af00      	add	r7, sp, #0
 80299a2:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 80299a4:	687b      	ldr	r3, [r7, #4]
 80299a6:	617b      	str	r3, [r7, #20]
  err_t err;

  if (msg->conn->pcb.tcp != NULL) {
 80299a8:	697b      	ldr	r3, [r7, #20]
 80299aa:	681b      	ldr	r3, [r3, #0]
 80299ac:	685b      	ldr	r3, [r3, #4]
 80299ae:	2b00      	cmp	r3, #0
 80299b0:	d07f      	beq.n	8029ab2 <lwip_netconn_do_listen+0x116>
    if (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) {
 80299b2:	697b      	ldr	r3, [r7, #20]
 80299b4:	681b      	ldr	r3, [r3, #0]
 80299b6:	781b      	ldrb	r3, [r3, #0]
 80299b8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80299bc:	2b10      	cmp	r3, #16
 80299be:	d175      	bne.n	8029aac <lwip_netconn_do_listen+0x110>
      if (msg->conn->state == NETCONN_NONE) {
 80299c0:	697b      	ldr	r3, [r7, #20]
 80299c2:	681b      	ldr	r3, [r3, #0]
 80299c4:	785b      	ldrb	r3, [r3, #1]
 80299c6:	2b00      	cmp	r3, #0
 80299c8:	d165      	bne.n	8029a96 <lwip_netconn_do_listen+0xfa>
        struct tcp_pcb *lpcb;
        if (msg->conn->pcb.tcp->state != CLOSED) {
 80299ca:	697b      	ldr	r3, [r7, #20]
 80299cc:	681b      	ldr	r3, [r3, #0]
 80299ce:	685b      	ldr	r3, [r3, #4]
 80299d0:	7d1b      	ldrb	r3, [r3, #20]
 80299d2:	2b00      	cmp	r3, #0
 80299d4:	d002      	beq.n	80299dc <lwip_netconn_do_listen+0x40>
          /* connection is not closed, cannot listen */
          err = ERR_VAL;
 80299d6:	23fa      	movs	r3, #250	; 0xfa
 80299d8:	72fb      	strb	r3, [r7, #11]
 80299da:	e06c      	b.n	8029ab6 <lwip_netconn_do_listen+0x11a>
        } else {
          u8_t backlog;
#if TCP_LISTEN_BACKLOG
          backlog = msg->msg.lb.backlog;
#else  /* TCP_LISTEN_BACKLOG */
          backlog = TCP_DEFAULT_LISTEN_BACKLOG;
 80299dc:	23ff      	movs	r3, #255	; 0xff
 80299de:	74fb      	strb	r3, [r7, #19]
            IP_SET_TYPE_VAL(msg->conn->pcb.tcp->local_ip,  IPADDR_TYPE_ANY);
            IP_SET_TYPE_VAL(msg->conn->pcb.tcp->remote_ip, IPADDR_TYPE_ANY);
          }
#endif /* LWIP_IPV4 && LWIP_IPV6 */

          lpcb = tcp_listen_with_backlog_and_err(msg->conn->pcb.tcp, backlog, &err);
 80299e0:	697b      	ldr	r3, [r7, #20]
 80299e2:	681b      	ldr	r3, [r3, #0]
 80299e4:	685b      	ldr	r3, [r3, #4]
 80299e6:	f107 020b 	add.w	r2, r7, #11
 80299ea:	7cf9      	ldrb	r1, [r7, #19]
 80299ec:	4618      	mov	r0, r3
 80299ee:	f003 f911 	bl	802cc14 <tcp_listen_with_backlog_and_err>
 80299f2:	60f8      	str	r0, [r7, #12]

          if (lpcb == NULL) {
 80299f4:	68fb      	ldr	r3, [r7, #12]
 80299f6:	2b00      	cmp	r3, #0
 80299f8:	d05d      	beq.n	8029ab6 <lwip_netconn_do_listen+0x11a>
            /* in this case, the old pcb is still allocated */
          } else {
            /* delete the recvmbox and allocate the acceptmbox */
            if (sys_mbox_valid(&msg->conn->recvmbox)) {
 80299fa:	697b      	ldr	r3, [r7, #20]
 80299fc:	681b      	ldr	r3, [r3, #0]
 80299fe:	3310      	adds	r3, #16
 8029a00:	4618      	mov	r0, r3
 8029a02:	f00b fff6 	bl	80359f2 <sys_mbox_valid>
 8029a06:	4603      	mov	r3, r0
 8029a08:	2b00      	cmp	r3, #0
 8029a0a:	d00b      	beq.n	8029a24 <lwip_netconn_do_listen+0x88>
              /** @todo: should we drain the recvmbox here? */
              sys_mbox_free(&msg->conn->recvmbox);
 8029a0c:	697b      	ldr	r3, [r7, #20]
 8029a0e:	681b      	ldr	r3, [r3, #0]
 8029a10:	3310      	adds	r3, #16
 8029a12:	4618      	mov	r0, r3
 8029a14:	f00b ff46 	bl	80358a4 <sys_mbox_free>
              sys_mbox_set_invalid(&msg->conn->recvmbox);
 8029a18:	697b      	ldr	r3, [r7, #20]
 8029a1a:	681b      	ldr	r3, [r3, #0]
 8029a1c:	3310      	adds	r3, #16
 8029a1e:	4618      	mov	r0, r3
 8029a20:	f00b fff8 	bl	8035a14 <sys_mbox_set_invalid>
            }
            err = ERR_OK;
 8029a24:	2300      	movs	r3, #0
 8029a26:	72fb      	strb	r3, [r7, #11]
            if (!sys_mbox_valid(&msg->conn->acceptmbox)) {
 8029a28:	697b      	ldr	r3, [r7, #20]
 8029a2a:	681b      	ldr	r3, [r3, #0]
 8029a2c:	3314      	adds	r3, #20
 8029a2e:	4618      	mov	r0, r3
 8029a30:	f00b ffdf 	bl	80359f2 <sys_mbox_valid>
 8029a34:	4603      	mov	r3, r0
 8029a36:	2b00      	cmp	r3, #0
 8029a38:	d108      	bne.n	8029a4c <lwip_netconn_do_listen+0xb0>
              err = sys_mbox_new(&msg->conn->acceptmbox, DEFAULT_ACCEPTMBOX_SIZE);
 8029a3a:	697b      	ldr	r3, [r7, #20]
 8029a3c:	681b      	ldr	r3, [r3, #0]
 8029a3e:	3314      	adds	r3, #20
 8029a40:	2106      	movs	r1, #6
 8029a42:	4618      	mov	r0, r3
 8029a44:	f00b fef4 	bl	8035830 <sys_mbox_new>
 8029a48:	4603      	mov	r3, r0
 8029a4a:	72fb      	strb	r3, [r7, #11]
            }
            if (err == ERR_OK) {
 8029a4c:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8029a50:	2b00      	cmp	r3, #0
 8029a52:	d118      	bne.n	8029a86 <lwip_netconn_do_listen+0xea>
              msg->conn->state = NETCONN_LISTEN;
 8029a54:	697b      	ldr	r3, [r7, #20]
 8029a56:	681b      	ldr	r3, [r3, #0]
 8029a58:	2202      	movs	r2, #2
 8029a5a:	705a      	strb	r2, [r3, #1]
              msg->conn->pcb.tcp = lpcb;
 8029a5c:	697b      	ldr	r3, [r7, #20]
 8029a5e:	681b      	ldr	r3, [r3, #0]
 8029a60:	68fa      	ldr	r2, [r7, #12]
 8029a62:	605a      	str	r2, [r3, #4]
              tcp_arg(msg->conn->pcb.tcp, msg->conn);
 8029a64:	697b      	ldr	r3, [r7, #20]
 8029a66:	681b      	ldr	r3, [r3, #0]
 8029a68:	685a      	ldr	r2, [r3, #4]
 8029a6a:	697b      	ldr	r3, [r7, #20]
 8029a6c:	681b      	ldr	r3, [r3, #0]
 8029a6e:	4619      	mov	r1, r3
 8029a70:	4610      	mov	r0, r2
 8029a72:	f004 f8c3 	bl	802dbfc <tcp_arg>
              tcp_accept(msg->conn->pcb.tcp, accept_function);
 8029a76:	697b      	ldr	r3, [r7, #20]
 8029a78:	681b      	ldr	r3, [r3, #0]
 8029a7a:	685b      	ldr	r3, [r3, #4]
 8029a7c:	4912      	ldr	r1, [pc, #72]	; (8029ac8 <lwip_netconn_do_listen+0x12c>)
 8029a7e:	4618      	mov	r0, r3
 8029a80:	f004 f934 	bl	802dcec <tcp_accept>
 8029a84:	e017      	b.n	8029ab6 <lwip_netconn_do_listen+0x11a>
            } else {
              /* since the old pcb is already deallocated, free lpcb now */
              tcp_close(lpcb);
 8029a86:	68f8      	ldr	r0, [r7, #12]
 8029a88:	f002 feba 	bl	802c800 <tcp_close>
              msg->conn->pcb.tcp = NULL;
 8029a8c:	697b      	ldr	r3, [r7, #20]
 8029a8e:	681b      	ldr	r3, [r3, #0]
 8029a90:	2200      	movs	r2, #0
 8029a92:	605a      	str	r2, [r3, #4]
 8029a94:	e00f      	b.n	8029ab6 <lwip_netconn_do_listen+0x11a>
            }
          }
        }
      } else if (msg->conn->state == NETCONN_LISTEN) {
 8029a96:	697b      	ldr	r3, [r7, #20]
 8029a98:	681b      	ldr	r3, [r3, #0]
 8029a9a:	785b      	ldrb	r3, [r3, #1]
 8029a9c:	2b02      	cmp	r3, #2
 8029a9e:	d102      	bne.n	8029aa6 <lwip_netconn_do_listen+0x10a>
        /* already listening, allow updating of the backlog */
        err = ERR_OK;
 8029aa0:	2300      	movs	r3, #0
 8029aa2:	72fb      	strb	r3, [r7, #11]
 8029aa4:	e007      	b.n	8029ab6 <lwip_netconn_do_listen+0x11a>
        tcp_backlog_set(msg->conn->pcb.tcp, msg->msg.lb.backlog);
      } else {
        err = ERR_CONN;
 8029aa6:	23f5      	movs	r3, #245	; 0xf5
 8029aa8:	72fb      	strb	r3, [r7, #11]
 8029aaa:	e004      	b.n	8029ab6 <lwip_netconn_do_listen+0x11a>
      }
    } else {
      err = ERR_ARG;
 8029aac:	23f0      	movs	r3, #240	; 0xf0
 8029aae:	72fb      	strb	r3, [r7, #11]
 8029ab0:	e001      	b.n	8029ab6 <lwip_netconn_do_listen+0x11a>
    }
  } else {
    err = ERR_CONN;
 8029ab2:	23f5      	movs	r3, #245	; 0xf5
 8029ab4:	72fb      	strb	r3, [r7, #11]
  }
  msg->err = err;
 8029ab6:	f997 200b 	ldrsb.w	r2, [r7, #11]
 8029aba:	697b      	ldr	r3, [r7, #20]
 8029abc:	711a      	strb	r2, [r3, #4]
  TCPIP_APIMSG_ACK(msg);
}
 8029abe:	bf00      	nop
 8029ac0:	3718      	adds	r7, #24
 8029ac2:	46bd      	mov	sp, r7
 8029ac4:	bd80      	pop	{r7, pc}
 8029ac6:	bf00      	nop
 8029ac8:	08028f9d 	.word	0x08028f9d

08029acc <lwip_netconn_do_recv>:
 *
 * @param m the api_msg pointing to the connection
 */
void
lwip_netconn_do_recv(void *m)
{
 8029acc:	b580      	push	{r7, lr}
 8029ace:	b086      	sub	sp, #24
 8029ad0:	af00      	add	r7, sp, #0
 8029ad2:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 8029ad4:	687b      	ldr	r3, [r7, #4]
 8029ad6:	613b      	str	r3, [r7, #16]

  msg->err = ERR_OK;
 8029ad8:	693b      	ldr	r3, [r7, #16]
 8029ada:	2200      	movs	r2, #0
 8029adc:	711a      	strb	r2, [r3, #4]
  if (msg->conn->pcb.tcp != NULL) {
 8029ade:	693b      	ldr	r3, [r7, #16]
 8029ae0:	681b      	ldr	r3, [r3, #0]
 8029ae2:	685b      	ldr	r3, [r3, #4]
 8029ae4:	2b00      	cmp	r3, #0
 8029ae6:	d022      	beq.n	8029b2e <lwip_netconn_do_recv+0x62>
    if (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) {
 8029ae8:	693b      	ldr	r3, [r7, #16]
 8029aea:	681b      	ldr	r3, [r3, #0]
 8029aec:	781b      	ldrb	r3, [r3, #0]
 8029aee:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8029af2:	2b10      	cmp	r3, #16
 8029af4:	d11b      	bne.n	8029b2e <lwip_netconn_do_recv+0x62>
      size_t remaining = msg->msg.r.len;
 8029af6:	693b      	ldr	r3, [r7, #16]
 8029af8:	689b      	ldr	r3, [r3, #8]
 8029afa:	617b      	str	r3, [r7, #20]
      do {
        u16_t recved = (u16_t)((remaining > 0xffff) ? 0xffff : remaining);
 8029afc:	697b      	ldr	r3, [r7, #20]
 8029afe:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8029b02:	d202      	bcs.n	8029b0a <lwip_netconn_do_recv+0x3e>
 8029b04:	697b      	ldr	r3, [r7, #20]
 8029b06:	b29b      	uxth	r3, r3
 8029b08:	e001      	b.n	8029b0e <lwip_netconn_do_recv+0x42>
 8029b0a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8029b0e:	81fb      	strh	r3, [r7, #14]
        tcp_recved(msg->conn->pcb.tcp, recved);
 8029b10:	693b      	ldr	r3, [r7, #16]
 8029b12:	681b      	ldr	r3, [r3, #0]
 8029b14:	685b      	ldr	r3, [r3, #4]
 8029b16:	89fa      	ldrh	r2, [r7, #14]
 8029b18:	4611      	mov	r1, r2
 8029b1a:	4618      	mov	r0, r3
 8029b1c:	f003 f97e 	bl	802ce1c <tcp_recved>
        remaining -= recved;
 8029b20:	89fb      	ldrh	r3, [r7, #14]
 8029b22:	697a      	ldr	r2, [r7, #20]
 8029b24:	1ad3      	subs	r3, r2, r3
 8029b26:	617b      	str	r3, [r7, #20]
      } while (remaining != 0);
 8029b28:	697b      	ldr	r3, [r7, #20]
 8029b2a:	2b00      	cmp	r3, #0
 8029b2c:	d1e6      	bne.n	8029afc <lwip_netconn_do_recv+0x30>
    }
  }
  TCPIP_APIMSG_ACK(msg);
}
 8029b2e:	bf00      	nop
 8029b30:	3718      	adds	r7, #24
 8029b32:	46bd      	mov	sp, r7
 8029b34:	bd80      	pop	{r7, pc}
	...

08029b38 <lwip_netconn_do_writemore>:
 * @return ERR_OK
 *         ERR_MEM if LWIP_TCPIP_CORE_LOCKING=1 and sending hasn't yet finished
 */
static err_t
lwip_netconn_do_writemore(struct netconn *conn  WRITE_DELAYED_PARAM)
{
 8029b38:	b580      	push	{r7, lr}
 8029b3a:	b088      	sub	sp, #32
 8029b3c:	af00      	add	r7, sp, #0
 8029b3e:	6078      	str	r0, [r7, #4]
 8029b40:	460b      	mov	r3, r1
 8029b42:	70fb      	strb	r3, [r7, #3]
  err_t err;
  const void *dataptr;
  u16_t len, available;
  u8_t write_finished = 0;
 8029b44:	2300      	movs	r3, #0
 8029b46:	76fb      	strb	r3, [r7, #27]
  size_t diff;
  u8_t dontblock;
  u8_t apiflags;
  u8_t write_more;

  LWIP_ASSERT("conn != NULL", conn != NULL);
 8029b48:	687b      	ldr	r3, [r7, #4]
 8029b4a:	2b00      	cmp	r3, #0
 8029b4c:	d106      	bne.n	8029b5c <lwip_netconn_do_writemore+0x24>
 8029b4e:	4b61      	ldr	r3, [pc, #388]	; (8029cd4 <lwip_netconn_do_writemore+0x19c>)
 8029b50:	f240 6273 	movw	r2, #1651	; 0x673
 8029b54:	4960      	ldr	r1, [pc, #384]	; (8029cd8 <lwip_netconn_do_writemore+0x1a0>)
 8029b56:	4861      	ldr	r0, [pc, #388]	; (8029cdc <lwip_netconn_do_writemore+0x1a4>)
 8029b58:	f00c fb1e 	bl	8036198 <iprintf>
  LWIP_ASSERT("conn->state == NETCONN_WRITE", (conn->state == NETCONN_WRITE));
 8029b5c:	687b      	ldr	r3, [r7, #4]
 8029b5e:	785b      	ldrb	r3, [r3, #1]
 8029b60:	2b01      	cmp	r3, #1
 8029b62:	d006      	beq.n	8029b72 <lwip_netconn_do_writemore+0x3a>
 8029b64:	4b5b      	ldr	r3, [pc, #364]	; (8029cd4 <lwip_netconn_do_writemore+0x19c>)
 8029b66:	f240 6274 	movw	r2, #1652	; 0x674
 8029b6a:	495d      	ldr	r1, [pc, #372]	; (8029ce0 <lwip_netconn_do_writemore+0x1a8>)
 8029b6c:	485b      	ldr	r0, [pc, #364]	; (8029cdc <lwip_netconn_do_writemore+0x1a4>)
 8029b6e:	f00c fb13 	bl	8036198 <iprintf>
  LWIP_ASSERT("conn->current_msg != NULL", conn->current_msg != NULL);
 8029b72:	687b      	ldr	r3, [r7, #4]
 8029b74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8029b76:	2b00      	cmp	r3, #0
 8029b78:	d106      	bne.n	8029b88 <lwip_netconn_do_writemore+0x50>
 8029b7a:	4b56      	ldr	r3, [pc, #344]	; (8029cd4 <lwip_netconn_do_writemore+0x19c>)
 8029b7c:	f240 6275 	movw	r2, #1653	; 0x675
 8029b80:	4958      	ldr	r1, [pc, #352]	; (8029ce4 <lwip_netconn_do_writemore+0x1ac>)
 8029b82:	4856      	ldr	r0, [pc, #344]	; (8029cdc <lwip_netconn_do_writemore+0x1a4>)
 8029b84:	f00c fb08 	bl	8036198 <iprintf>
  LWIP_ASSERT("conn->pcb.tcp != NULL", conn->pcb.tcp != NULL);
 8029b88:	687b      	ldr	r3, [r7, #4]
 8029b8a:	685b      	ldr	r3, [r3, #4]
 8029b8c:	2b00      	cmp	r3, #0
 8029b8e:	d106      	bne.n	8029b9e <lwip_netconn_do_writemore+0x66>
 8029b90:	4b50      	ldr	r3, [pc, #320]	; (8029cd4 <lwip_netconn_do_writemore+0x19c>)
 8029b92:	f240 6276 	movw	r2, #1654	; 0x676
 8029b96:	4954      	ldr	r1, [pc, #336]	; (8029ce8 <lwip_netconn_do_writemore+0x1b0>)
 8029b98:	4850      	ldr	r0, [pc, #320]	; (8029cdc <lwip_netconn_do_writemore+0x1a4>)
 8029b9a:	f00c fafd 	bl	8036198 <iprintf>
  LWIP_ASSERT("conn->current_msg->msg.w.offset < conn->current_msg->msg.w.len",
 8029b9e:	687b      	ldr	r3, [r7, #4]
 8029ba0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8029ba2:	699a      	ldr	r2, [r3, #24]
 8029ba4:	687b      	ldr	r3, [r7, #4]
 8029ba6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8029ba8:	695b      	ldr	r3, [r3, #20]
 8029baa:	429a      	cmp	r2, r3
 8029bac:	d306      	bcc.n	8029bbc <lwip_netconn_do_writemore+0x84>
 8029bae:	4b49      	ldr	r3, [pc, #292]	; (8029cd4 <lwip_netconn_do_writemore+0x19c>)
 8029bb0:	f240 6277 	movw	r2, #1655	; 0x677
 8029bb4:	494d      	ldr	r1, [pc, #308]	; (8029cec <lwip_netconn_do_writemore+0x1b4>)
 8029bb6:	4849      	ldr	r0, [pc, #292]	; (8029cdc <lwip_netconn_do_writemore+0x1a4>)
 8029bb8:	f00c faee 	bl	8036198 <iprintf>
              conn->current_msg->msg.w.offset < conn->current_msg->msg.w.len);
  LWIP_ASSERT("conn->current_msg->msg.w.vector_cnt > 0", conn->current_msg->msg.w.vector_cnt > 0);
 8029bbc:	687b      	ldr	r3, [r7, #4]
 8029bbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8029bc0:	899b      	ldrh	r3, [r3, #12]
 8029bc2:	2b00      	cmp	r3, #0
 8029bc4:	d106      	bne.n	8029bd4 <lwip_netconn_do_writemore+0x9c>
 8029bc6:	4b43      	ldr	r3, [pc, #268]	; (8029cd4 <lwip_netconn_do_writemore+0x19c>)
 8029bc8:	f240 6279 	movw	r2, #1657	; 0x679
 8029bcc:	4948      	ldr	r1, [pc, #288]	; (8029cf0 <lwip_netconn_do_writemore+0x1b8>)
 8029bce:	4843      	ldr	r0, [pc, #268]	; (8029cdc <lwip_netconn_do_writemore+0x1a4>)
 8029bd0:	f00c fae2 	bl	8036198 <iprintf>

  apiflags = conn->current_msg->msg.w.apiflags;
 8029bd4:	687b      	ldr	r3, [r7, #4]
 8029bd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8029bd8:	7f1b      	ldrb	r3, [r3, #28]
 8029bda:	76bb      	strb	r3, [r7, #26]
  dontblock = netconn_is_nonblocking(conn) || (apiflags & NETCONN_DONTBLOCK);
 8029bdc:	687b      	ldr	r3, [r7, #4]
 8029bde:	f893 3020 	ldrb.w	r3, [r3, #32]
 8029be2:	f003 0302 	and.w	r3, r3, #2
 8029be6:	2b00      	cmp	r3, #0
 8029be8:	d104      	bne.n	8029bf4 <lwip_netconn_do_writemore+0xbc>
 8029bea:	7ebb      	ldrb	r3, [r7, #26]
 8029bec:	f003 0304 	and.w	r3, r3, #4
 8029bf0:	2b00      	cmp	r3, #0
 8029bf2:	d001      	beq.n	8029bf8 <lwip_netconn_do_writemore+0xc0>
 8029bf4:	2301      	movs	r3, #1
 8029bf6:	e000      	b.n	8029bfa <lwip_netconn_do_writemore+0xc2>
 8029bf8:	2300      	movs	r3, #0
 8029bfa:	763b      	strb	r3, [r7, #24]
    }
  } else
#endif /* LWIP_SO_SNDTIMEO */
  {
    do {
      dataptr = (const u8_t *)conn->current_msg->msg.w.vector->ptr + conn->current_msg->msg.w.vector_off;
 8029bfc:	687b      	ldr	r3, [r7, #4]
 8029bfe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8029c00:	689b      	ldr	r3, [r3, #8]
 8029c02:	681a      	ldr	r2, [r3, #0]
 8029c04:	687b      	ldr	r3, [r7, #4]
 8029c06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8029c08:	691b      	ldr	r3, [r3, #16]
 8029c0a:	4413      	add	r3, r2
 8029c0c:	617b      	str	r3, [r7, #20]
      diff = conn->current_msg->msg.w.vector->len - conn->current_msg->msg.w.vector_off;
 8029c0e:	687b      	ldr	r3, [r7, #4]
 8029c10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8029c12:	689b      	ldr	r3, [r3, #8]
 8029c14:	685a      	ldr	r2, [r3, #4]
 8029c16:	687b      	ldr	r3, [r7, #4]
 8029c18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8029c1a:	691b      	ldr	r3, [r3, #16]
 8029c1c:	1ad3      	subs	r3, r2, r3
 8029c1e:	613b      	str	r3, [r7, #16]
      if (diff > 0xffffUL) { /* max_u16_t */
 8029c20:	693b      	ldr	r3, [r7, #16]
 8029c22:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8029c26:	d307      	bcc.n	8029c38 <lwip_netconn_do_writemore+0x100>
        len = 0xffff;
 8029c28:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8029c2c:	83bb      	strh	r3, [r7, #28]
        apiflags |= TCP_WRITE_FLAG_MORE;
 8029c2e:	7ebb      	ldrb	r3, [r7, #26]
 8029c30:	f043 0302 	orr.w	r3, r3, #2
 8029c34:	76bb      	strb	r3, [r7, #26]
 8029c36:	e001      	b.n	8029c3c <lwip_netconn_do_writemore+0x104>
      } else {
        len = (u16_t)diff;
 8029c38:	693b      	ldr	r3, [r7, #16]
 8029c3a:	83bb      	strh	r3, [r7, #28]
      }
      available = tcp_sndbuf(conn->pcb.tcp);
 8029c3c:	687b      	ldr	r3, [r7, #4]
 8029c3e:	685b      	ldr	r3, [r3, #4]
 8029c40:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 8029c44:	81fb      	strh	r3, [r7, #14]
      if (available < len) {
 8029c46:	89fa      	ldrh	r2, [r7, #14]
 8029c48:	8bbb      	ldrh	r3, [r7, #28]
 8029c4a:	429a      	cmp	r2, r3
 8029c4c:	d216      	bcs.n	8029c7c <lwip_netconn_do_writemore+0x144>
        /* don't try to write more than sendbuf */
        len = available;
 8029c4e:	89fb      	ldrh	r3, [r7, #14]
 8029c50:	83bb      	strh	r3, [r7, #28]
        if (dontblock) {
 8029c52:	7e3b      	ldrb	r3, [r7, #24]
 8029c54:	2b00      	cmp	r3, #0
 8029c56:	d00d      	beq.n	8029c74 <lwip_netconn_do_writemore+0x13c>
          if (!len) {
 8029c58:	8bbb      	ldrh	r3, [r7, #28]
 8029c5a:	2b00      	cmp	r3, #0
 8029c5c:	d10e      	bne.n	8029c7c <lwip_netconn_do_writemore+0x144>
            /* set error according to partial write or not */
            err = (conn->current_msg->msg.w.offset == 0) ? ERR_WOULDBLOCK : ERR_OK;
 8029c5e:	687b      	ldr	r3, [r7, #4]
 8029c60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8029c62:	699b      	ldr	r3, [r3, #24]
 8029c64:	2b00      	cmp	r3, #0
 8029c66:	d102      	bne.n	8029c6e <lwip_netconn_do_writemore+0x136>
 8029c68:	f06f 0306 	mvn.w	r3, #6
 8029c6c:	e000      	b.n	8029c70 <lwip_netconn_do_writemore+0x138>
 8029c6e:	2300      	movs	r3, #0
 8029c70:	77fb      	strb	r3, [r7, #31]
            goto err_mem;
 8029c72:	e08f      	b.n	8029d94 <lwip_netconn_do_writemore+0x25c>
          }
        } else {
          apiflags |= TCP_WRITE_FLAG_MORE;
 8029c74:	7ebb      	ldrb	r3, [r7, #26]
 8029c76:	f043 0302 	orr.w	r3, r3, #2
 8029c7a:	76bb      	strb	r3, [r7, #26]
        }
      }
      LWIP_ASSERT("lwip_netconn_do_writemore: invalid length!",
 8029c7c:	687b      	ldr	r3, [r7, #4]
 8029c7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8029c80:	691a      	ldr	r2, [r3, #16]
 8029c82:	8bbb      	ldrh	r3, [r7, #28]
 8029c84:	441a      	add	r2, r3
 8029c86:	687b      	ldr	r3, [r7, #4]
 8029c88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8029c8a:	689b      	ldr	r3, [r3, #8]
 8029c8c:	685b      	ldr	r3, [r3, #4]
 8029c8e:	429a      	cmp	r2, r3
 8029c90:	d906      	bls.n	8029ca0 <lwip_netconn_do_writemore+0x168>
 8029c92:	4b10      	ldr	r3, [pc, #64]	; (8029cd4 <lwip_netconn_do_writemore+0x19c>)
 8029c94:	f240 62a3 	movw	r2, #1699	; 0x6a3
 8029c98:	4916      	ldr	r1, [pc, #88]	; (8029cf4 <lwip_netconn_do_writemore+0x1bc>)
 8029c9a:	4810      	ldr	r0, [pc, #64]	; (8029cdc <lwip_netconn_do_writemore+0x1a4>)
 8029c9c:	f00c fa7c 	bl	8036198 <iprintf>
                  ((conn->current_msg->msg.w.vector_off + len) <= conn->current_msg->msg.w.vector->len));
      /* we should loop around for more sending in the following cases:
           1) We couldn't finish the current vector because of 16-bit size limitations.
              tcp_write() and tcp_sndbuf() both are limited to 16-bit sizes
           2) We are sending the remainder of the current vector and have more */
      if ((len == 0xffff && diff > 0xffffUL) ||
 8029ca0:	8bbb      	ldrh	r3, [r7, #28]
 8029ca2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8029ca6:	4293      	cmp	r3, r2
 8029ca8:	d103      	bne.n	8029cb2 <lwip_netconn_do_writemore+0x17a>
 8029caa:	693b      	ldr	r3, [r7, #16]
 8029cac:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8029cb0:	d209      	bcs.n	8029cc6 <lwip_netconn_do_writemore+0x18e>
          (len == (u16_t)diff && conn->current_msg->msg.w.vector_cnt > 1)) {
 8029cb2:	693b      	ldr	r3, [r7, #16]
 8029cb4:	b29b      	uxth	r3, r3
      if ((len == 0xffff && diff > 0xffffUL) ||
 8029cb6:	8bba      	ldrh	r2, [r7, #28]
 8029cb8:	429a      	cmp	r2, r3
 8029cba:	d11d      	bne.n	8029cf8 <lwip_netconn_do_writemore+0x1c0>
          (len == (u16_t)diff && conn->current_msg->msg.w.vector_cnt > 1)) {
 8029cbc:	687b      	ldr	r3, [r7, #4]
 8029cbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8029cc0:	899b      	ldrh	r3, [r3, #12]
 8029cc2:	2b01      	cmp	r3, #1
 8029cc4:	d918      	bls.n	8029cf8 <lwip_netconn_do_writemore+0x1c0>
        write_more = 1;
 8029cc6:	2301      	movs	r3, #1
 8029cc8:	767b      	strb	r3, [r7, #25]
        apiflags |= TCP_WRITE_FLAG_MORE;
 8029cca:	7ebb      	ldrb	r3, [r7, #26]
 8029ccc:	f043 0302 	orr.w	r3, r3, #2
 8029cd0:	76bb      	strb	r3, [r7, #26]
 8029cd2:	e013      	b.n	8029cfc <lwip_netconn_do_writemore+0x1c4>
 8029cd4:	080378dc 	.word	0x080378dc
 8029cd8:	08037a34 	.word	0x08037a34
 8029cdc:	08037920 	.word	0x08037920
 8029ce0:	08037d3c 	.word	0x08037d3c
 8029ce4:	08037a44 	.word	0x08037a44
 8029ce8:	08037d5c 	.word	0x08037d5c
 8029cec:	08037d74 	.word	0x08037d74
 8029cf0:	08037db4 	.word	0x08037db4
 8029cf4:	08037ddc 	.word	0x08037ddc
      } else {
        write_more = 0;
 8029cf8:	2300      	movs	r3, #0
 8029cfa:	767b      	strb	r3, [r7, #25]
      }
      err = tcp_write(conn->pcb.tcp, dataptr, len, apiflags);
 8029cfc:	687b      	ldr	r3, [r7, #4]
 8029cfe:	6858      	ldr	r0, [r3, #4]
 8029d00:	7ebb      	ldrb	r3, [r7, #26]
 8029d02:	8bba      	ldrh	r2, [r7, #28]
 8029d04:	6979      	ldr	r1, [r7, #20]
 8029d06:	f006 ff35 	bl	8030b74 <tcp_write>
 8029d0a:	4603      	mov	r3, r0
 8029d0c:	77fb      	strb	r3, [r7, #31]
      if (err == ERR_OK) {
 8029d0e:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8029d12:	2b00      	cmp	r3, #0
 8029d14:	d12c      	bne.n	8029d70 <lwip_netconn_do_writemore+0x238>
        conn->current_msg->msg.w.offset += len;
 8029d16:	687b      	ldr	r3, [r7, #4]
 8029d18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8029d1a:	6999      	ldr	r1, [r3, #24]
 8029d1c:	8bba      	ldrh	r2, [r7, #28]
 8029d1e:	687b      	ldr	r3, [r7, #4]
 8029d20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8029d22:	440a      	add	r2, r1
 8029d24:	619a      	str	r2, [r3, #24]
        conn->current_msg->msg.w.vector_off += len;
 8029d26:	687b      	ldr	r3, [r7, #4]
 8029d28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8029d2a:	6919      	ldr	r1, [r3, #16]
 8029d2c:	8bba      	ldrh	r2, [r7, #28]
 8029d2e:	687b      	ldr	r3, [r7, #4]
 8029d30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8029d32:	440a      	add	r2, r1
 8029d34:	611a      	str	r2, [r3, #16]
        /* check if current vector is finished */
        if (conn->current_msg->msg.w.vector_off == conn->current_msg->msg.w.vector->len) {
 8029d36:	687b      	ldr	r3, [r7, #4]
 8029d38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8029d3a:	691a      	ldr	r2, [r3, #16]
 8029d3c:	687b      	ldr	r3, [r7, #4]
 8029d3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8029d40:	689b      	ldr	r3, [r3, #8]
 8029d42:	685b      	ldr	r3, [r3, #4]
 8029d44:	429a      	cmp	r2, r3
 8029d46:	d113      	bne.n	8029d70 <lwip_netconn_do_writemore+0x238>
          conn->current_msg->msg.w.vector_cnt--;
 8029d48:	687b      	ldr	r3, [r7, #4]
 8029d4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8029d4c:	899a      	ldrh	r2, [r3, #12]
 8029d4e:	3a01      	subs	r2, #1
 8029d50:	b292      	uxth	r2, r2
 8029d52:	819a      	strh	r2, [r3, #12]
          /* if we have additional vectors, move on to them */
          if (conn->current_msg->msg.w.vector_cnt > 0) {
 8029d54:	687b      	ldr	r3, [r7, #4]
 8029d56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8029d58:	899b      	ldrh	r3, [r3, #12]
 8029d5a:	2b00      	cmp	r3, #0
 8029d5c:	d008      	beq.n	8029d70 <lwip_netconn_do_writemore+0x238>
            conn->current_msg->msg.w.vector++;
 8029d5e:	687b      	ldr	r3, [r7, #4]
 8029d60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8029d62:	689a      	ldr	r2, [r3, #8]
 8029d64:	3208      	adds	r2, #8
 8029d66:	609a      	str	r2, [r3, #8]
            conn->current_msg->msg.w.vector_off = 0;
 8029d68:	687b      	ldr	r3, [r7, #4]
 8029d6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8029d6c:	2200      	movs	r2, #0
 8029d6e:	611a      	str	r2, [r3, #16]
          }
        }
      }
    } while (write_more && err == ERR_OK);
 8029d70:	7e7b      	ldrb	r3, [r7, #25]
 8029d72:	2b00      	cmp	r3, #0
 8029d74:	d004      	beq.n	8029d80 <lwip_netconn_do_writemore+0x248>
 8029d76:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8029d7a:	2b00      	cmp	r3, #0
 8029d7c:	f43f af3e 	beq.w	8029bfc <lwip_netconn_do_writemore+0xc4>
    /* if OK or memory error, check available space */
    if ((err == ERR_OK) || (err == ERR_MEM)) {
 8029d80:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8029d84:	2b00      	cmp	r3, #0
 8029d86:	d004      	beq.n	8029d92 <lwip_netconn_do_writemore+0x25a>
 8029d88:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8029d8c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8029d90:	d136      	bne.n	8029e00 <lwip_netconn_do_writemore+0x2c8>
err_mem:
 8029d92:	bf00      	nop
      if (dontblock && (conn->current_msg->msg.w.offset < conn->current_msg->msg.w.len)) {
 8029d94:	7e3b      	ldrb	r3, [r7, #24]
 8029d96:	2b00      	cmp	r3, #0
 8029d98:	d01b      	beq.n	8029dd2 <lwip_netconn_do_writemore+0x29a>
 8029d9a:	687b      	ldr	r3, [r7, #4]
 8029d9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8029d9e:	699a      	ldr	r2, [r3, #24]
 8029da0:	687b      	ldr	r3, [r7, #4]
 8029da2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8029da4:	695b      	ldr	r3, [r3, #20]
 8029da6:	429a      	cmp	r2, r3
 8029da8:	d213      	bcs.n	8029dd2 <lwip_netconn_do_writemore+0x29a>
        /* non-blocking write did not write everything: mark the pcb non-writable
           and let poll_tcp check writable space to mark the pcb writable again */
        API_EVENT(conn, NETCONN_EVT_SENDMINUS, 0);
 8029daa:	687b      	ldr	r3, [r7, #4]
 8029dac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8029dae:	2b00      	cmp	r3, #0
 8029db0:	d005      	beq.n	8029dbe <lwip_netconn_do_writemore+0x286>
 8029db2:	687b      	ldr	r3, [r7, #4]
 8029db4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8029db6:	2200      	movs	r2, #0
 8029db8:	2103      	movs	r1, #3
 8029dba:	6878      	ldr	r0, [r7, #4]
 8029dbc:	4798      	blx	r3
        conn->flags |= NETCONN_FLAG_CHECK_WRITESPACE;
 8029dbe:	687b      	ldr	r3, [r7, #4]
 8029dc0:	f893 3020 	ldrb.w	r3, [r3, #32]
 8029dc4:	f043 0310 	orr.w	r3, r3, #16
 8029dc8:	b2da      	uxtb	r2, r3
 8029dca:	687b      	ldr	r3, [r7, #4]
 8029dcc:	f883 2020 	strb.w	r2, [r3, #32]
 8029dd0:	e016      	b.n	8029e00 <lwip_netconn_do_writemore+0x2c8>
      } else if ((tcp_sndbuf(conn->pcb.tcp) <= TCP_SNDLOWAT) ||
 8029dd2:	687b      	ldr	r3, [r7, #4]
 8029dd4:	685b      	ldr	r3, [r3, #4]
 8029dd6:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 8029dda:	f5b3 6f86 	cmp.w	r3, #1072	; 0x430
 8029dde:	d305      	bcc.n	8029dec <lwip_netconn_do_writemore+0x2b4>
                 (tcp_sndqueuelen(conn->pcb.tcp) >= TCP_SNDQUEUELOWAT)) {
 8029de0:	687b      	ldr	r3, [r7, #4]
 8029de2:	685b      	ldr	r3, [r3, #4]
 8029de4:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
      } else if ((tcp_sndbuf(conn->pcb.tcp) <= TCP_SNDLOWAT) ||
 8029de8:	2b04      	cmp	r3, #4
 8029dea:	d909      	bls.n	8029e00 <lwip_netconn_do_writemore+0x2c8>
        /* The queued byte- or pbuf-count exceeds the configured low-water limit,
           let select mark this pcb as non-writable. */
        API_EVENT(conn, NETCONN_EVT_SENDMINUS, 0);
 8029dec:	687b      	ldr	r3, [r7, #4]
 8029dee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8029df0:	2b00      	cmp	r3, #0
 8029df2:	d005      	beq.n	8029e00 <lwip_netconn_do_writemore+0x2c8>
 8029df4:	687b      	ldr	r3, [r7, #4]
 8029df6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8029df8:	2200      	movs	r2, #0
 8029dfa:	2103      	movs	r1, #3
 8029dfc:	6878      	ldr	r0, [r7, #4]
 8029dfe:	4798      	blx	r3
      }
    }

    if (err == ERR_OK) {
 8029e00:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8029e04:	2b00      	cmp	r3, #0
 8029e06:	d11d      	bne.n	8029e44 <lwip_netconn_do_writemore+0x30c>
      err_t out_err;
      if ((conn->current_msg->msg.w.offset == conn->current_msg->msg.w.len) || dontblock) {
 8029e08:	687b      	ldr	r3, [r7, #4]
 8029e0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8029e0c:	699a      	ldr	r2, [r3, #24]
 8029e0e:	687b      	ldr	r3, [r7, #4]
 8029e10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8029e12:	695b      	ldr	r3, [r3, #20]
 8029e14:	429a      	cmp	r2, r3
 8029e16:	d002      	beq.n	8029e1e <lwip_netconn_do_writemore+0x2e6>
 8029e18:	7e3b      	ldrb	r3, [r7, #24]
 8029e1a:	2b00      	cmp	r3, #0
 8029e1c:	d001      	beq.n	8029e22 <lwip_netconn_do_writemore+0x2ea>
        /* return sent length (caller reads length from msg.w.offset) */
        write_finished = 1;
 8029e1e:	2301      	movs	r3, #1
 8029e20:	76fb      	strb	r3, [r7, #27]
      }
      out_err = tcp_output(conn->pcb.tcp);
 8029e22:	687b      	ldr	r3, [r7, #4]
 8029e24:	685b      	ldr	r3, [r3, #4]
 8029e26:	4618      	mov	r0, r3
 8029e28:	f007 fcb4 	bl	8031794 <tcp_output>
 8029e2c:	4603      	mov	r3, r0
 8029e2e:	733b      	strb	r3, [r7, #12]
      if (out_err == ERR_RTE) {
 8029e30:	f997 300c 	ldrsb.w	r3, [r7, #12]
 8029e34:	f113 0f04 	cmn.w	r3, #4
 8029e38:	d12c      	bne.n	8029e94 <lwip_netconn_do_writemore+0x35c>
        /* If tcp_output fails because no route is found,
           don't try writing any more but return the error
           to the application thread. */
        err = out_err;
 8029e3a:	7b3b      	ldrb	r3, [r7, #12]
 8029e3c:	77fb      	strb	r3, [r7, #31]
        write_finished = 1;
 8029e3e:	2301      	movs	r3, #1
 8029e40:	76fb      	strb	r3, [r7, #27]
 8029e42:	e027      	b.n	8029e94 <lwip_netconn_do_writemore+0x35c>
      }
    } else if (err == ERR_MEM) {
 8029e44:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8029e48:	f1b3 3fff 	cmp.w	r3, #4294967295
 8029e4c:	d120      	bne.n	8029e90 <lwip_netconn_do_writemore+0x358>
         For blocking sockets, we do NOT return to the application
         thread, since ERR_MEM is only a temporary error! Non-blocking
         will remain non-writable until sent_tcp/poll_tcp is called */

      /* tcp_write returned ERR_MEM, try tcp_output anyway */
      err_t out_err = tcp_output(conn->pcb.tcp);
 8029e4e:	687b      	ldr	r3, [r7, #4]
 8029e50:	685b      	ldr	r3, [r3, #4]
 8029e52:	4618      	mov	r0, r3
 8029e54:	f007 fc9e 	bl	8031794 <tcp_output>
 8029e58:	4603      	mov	r3, r0
 8029e5a:	737b      	strb	r3, [r7, #13]
      if (out_err == ERR_RTE) {
 8029e5c:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8029e60:	f113 0f04 	cmn.w	r3, #4
 8029e64:	d104      	bne.n	8029e70 <lwip_netconn_do_writemore+0x338>
        /* If tcp_output fails because no route is found,
           don't try writing any more but return the error
           to the application thread. */
        err = out_err;
 8029e66:	7b7b      	ldrb	r3, [r7, #13]
 8029e68:	77fb      	strb	r3, [r7, #31]
        write_finished = 1;
 8029e6a:	2301      	movs	r3, #1
 8029e6c:	76fb      	strb	r3, [r7, #27]
 8029e6e:	e011      	b.n	8029e94 <lwip_netconn_do_writemore+0x35c>
      } else if (dontblock) {
 8029e70:	7e3b      	ldrb	r3, [r7, #24]
 8029e72:	2b00      	cmp	r3, #0
 8029e74:	d00e      	beq.n	8029e94 <lwip_netconn_do_writemore+0x35c>
        /* non-blocking write is done on ERR_MEM, set error according
           to partial write or not */
        err = (conn->current_msg->msg.w.offset == 0) ? ERR_WOULDBLOCK : ERR_OK;
 8029e76:	687b      	ldr	r3, [r7, #4]
 8029e78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8029e7a:	699b      	ldr	r3, [r3, #24]
 8029e7c:	2b00      	cmp	r3, #0
 8029e7e:	d102      	bne.n	8029e86 <lwip_netconn_do_writemore+0x34e>
 8029e80:	f06f 0306 	mvn.w	r3, #6
 8029e84:	e000      	b.n	8029e88 <lwip_netconn_do_writemore+0x350>
 8029e86:	2300      	movs	r3, #0
 8029e88:	77fb      	strb	r3, [r7, #31]
        write_finished = 1;
 8029e8a:	2301      	movs	r3, #1
 8029e8c:	76fb      	strb	r3, [r7, #27]
 8029e8e:	e001      	b.n	8029e94 <lwip_netconn_do_writemore+0x35c>
      }
    } else {
      /* On errors != ERR_MEM, we don't try writing any more but return
         the error to the application thread. */
      write_finished = 1;
 8029e90:	2301      	movs	r3, #1
 8029e92:	76fb      	strb	r3, [r7, #27]
    }
  }
  if (write_finished) {
 8029e94:	7efb      	ldrb	r3, [r7, #27]
 8029e96:	2b00      	cmp	r3, #0
 8029e98:	d015      	beq.n	8029ec6 <lwip_netconn_do_writemore+0x38e>
    /* everything was written: set back connection state
       and back to application task */
    sys_sem_t *op_completed_sem = LWIP_API_MSG_SEM(conn->current_msg);
 8029e9a:	687b      	ldr	r3, [r7, #4]
 8029e9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8029e9e:	681b      	ldr	r3, [r3, #0]
 8029ea0:	330c      	adds	r3, #12
 8029ea2:	60bb      	str	r3, [r7, #8]
    conn->current_msg->err = err;
 8029ea4:	687b      	ldr	r3, [r7, #4]
 8029ea6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8029ea8:	7ffa      	ldrb	r2, [r7, #31]
 8029eaa:	711a      	strb	r2, [r3, #4]
    conn->current_msg = NULL;
 8029eac:	687b      	ldr	r3, [r7, #4]
 8029eae:	2200      	movs	r2, #0
 8029eb0:	625a      	str	r2, [r3, #36]	; 0x24
    conn->state = NETCONN_NONE;
 8029eb2:	687b      	ldr	r3, [r7, #4]
 8029eb4:	2200      	movs	r2, #0
 8029eb6:	705a      	strb	r2, [r3, #1]
#if LWIP_TCPIP_CORE_LOCKING
    if (delayed)
 8029eb8:	78fb      	ldrb	r3, [r7, #3]
 8029eba:	2b00      	cmp	r3, #0
 8029ebc:	d006      	beq.n	8029ecc <lwip_netconn_do_writemore+0x394>
#endif
    {
      sys_sem_signal(op_completed_sem);
 8029ebe:	68b8      	ldr	r0, [r7, #8]
 8029ec0:	f00b fe2f 	bl	8035b22 <sys_sem_signal>
 8029ec4:	e002      	b.n	8029ecc <lwip_netconn_do_writemore+0x394>
    }
  }
#if LWIP_TCPIP_CORE_LOCKING
  else {
    return ERR_MEM;
 8029ec6:	f04f 33ff 	mov.w	r3, #4294967295
 8029eca:	e000      	b.n	8029ece <lwip_netconn_do_writemore+0x396>
  }
#endif
  return ERR_OK;
 8029ecc:	2300      	movs	r3, #0
}
 8029ece:	4618      	mov	r0, r3
 8029ed0:	3720      	adds	r7, #32
 8029ed2:	46bd      	mov	sp, r7
 8029ed4:	bd80      	pop	{r7, pc}
 8029ed6:	bf00      	nop

08029ed8 <lwip_netconn_do_write>:
 *
 * @param m the api_msg pointing to the connection
 */
void
lwip_netconn_do_write(void *m)
{
 8029ed8:	b580      	push	{r7, lr}
 8029eda:	b084      	sub	sp, #16
 8029edc:	af00      	add	r7, sp, #0
 8029ede:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 8029ee0:	687b      	ldr	r3, [r7, #4]
 8029ee2:	60bb      	str	r3, [r7, #8]

  err_t err = netconn_err(msg->conn);
 8029ee4:	68bb      	ldr	r3, [r7, #8]
 8029ee6:	681b      	ldr	r3, [r3, #0]
 8029ee8:	4618      	mov	r0, r3
 8029eea:	f7fe fd08 	bl	80288fe <netconn_err>
 8029eee:	4603      	mov	r3, r0
 8029ef0:	73fb      	strb	r3, [r7, #15]
  if (err == ERR_OK) {
 8029ef2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8029ef6:	2b00      	cmp	r3, #0
 8029ef8:	d166      	bne.n	8029fc8 <lwip_netconn_do_write+0xf0>
    if (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) {
 8029efa:	68bb      	ldr	r3, [r7, #8]
 8029efc:	681b      	ldr	r3, [r3, #0]
 8029efe:	781b      	ldrb	r3, [r3, #0]
 8029f00:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8029f04:	2b10      	cmp	r3, #16
 8029f06:	d15d      	bne.n	8029fc4 <lwip_netconn_do_write+0xec>
#if LWIP_TCP
      if (msg->conn->state != NETCONN_NONE) {
 8029f08:	68bb      	ldr	r3, [r7, #8]
 8029f0a:	681b      	ldr	r3, [r3, #0]
 8029f0c:	785b      	ldrb	r3, [r3, #1]
 8029f0e:	2b00      	cmp	r3, #0
 8029f10:	d002      	beq.n	8029f18 <lwip_netconn_do_write+0x40>
        /* netconn is connecting, closing or in blocking write */
        err = ERR_INPROGRESS;
 8029f12:	23fb      	movs	r3, #251	; 0xfb
 8029f14:	73fb      	strb	r3, [r7, #15]
 8029f16:	e057      	b.n	8029fc8 <lwip_netconn_do_write+0xf0>
      } else if (msg->conn->pcb.tcp != NULL) {
 8029f18:	68bb      	ldr	r3, [r7, #8]
 8029f1a:	681b      	ldr	r3, [r3, #0]
 8029f1c:	685b      	ldr	r3, [r3, #4]
 8029f1e:	2b00      	cmp	r3, #0
 8029f20:	d04d      	beq.n	8029fbe <lwip_netconn_do_write+0xe6>
        msg->conn->state = NETCONN_WRITE;
 8029f22:	68bb      	ldr	r3, [r7, #8]
 8029f24:	681b      	ldr	r3, [r3, #0]
 8029f26:	2201      	movs	r2, #1
 8029f28:	705a      	strb	r2, [r3, #1]
        /* set all the variables used by lwip_netconn_do_writemore */
        LWIP_ASSERT("already writing or closing", msg->conn->current_msg == NULL);
 8029f2a:	68bb      	ldr	r3, [r7, #8]
 8029f2c:	681b      	ldr	r3, [r3, #0]
 8029f2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8029f30:	2b00      	cmp	r3, #0
 8029f32:	d006      	beq.n	8029f42 <lwip_netconn_do_write+0x6a>
 8029f34:	4b28      	ldr	r3, [pc, #160]	; (8029fd8 <lwip_netconn_do_write+0x100>)
 8029f36:	f240 7223 	movw	r2, #1827	; 0x723
 8029f3a:	4928      	ldr	r1, [pc, #160]	; (8029fdc <lwip_netconn_do_write+0x104>)
 8029f3c:	4828      	ldr	r0, [pc, #160]	; (8029fe0 <lwip_netconn_do_write+0x108>)
 8029f3e:	f00c f92b 	bl	8036198 <iprintf>
        LWIP_ASSERT("msg->msg.w.len != 0", msg->msg.w.len != 0);
 8029f42:	68bb      	ldr	r3, [r7, #8]
 8029f44:	695b      	ldr	r3, [r3, #20]
 8029f46:	2b00      	cmp	r3, #0
 8029f48:	d106      	bne.n	8029f58 <lwip_netconn_do_write+0x80>
 8029f4a:	4b23      	ldr	r3, [pc, #140]	; (8029fd8 <lwip_netconn_do_write+0x100>)
 8029f4c:	f240 7224 	movw	r2, #1828	; 0x724
 8029f50:	4924      	ldr	r1, [pc, #144]	; (8029fe4 <lwip_netconn_do_write+0x10c>)
 8029f52:	4823      	ldr	r0, [pc, #140]	; (8029fe0 <lwip_netconn_do_write+0x108>)
 8029f54:	f00c f920 	bl	8036198 <iprintf>
        msg->conn->current_msg = msg;
 8029f58:	68bb      	ldr	r3, [r7, #8]
 8029f5a:	681b      	ldr	r3, [r3, #0]
 8029f5c:	68ba      	ldr	r2, [r7, #8]
 8029f5e:	625a      	str	r2, [r3, #36]	; 0x24
#if LWIP_TCPIP_CORE_LOCKING
        if (lwip_netconn_do_writemore(msg->conn, 0) != ERR_OK) {
 8029f60:	68bb      	ldr	r3, [r7, #8]
 8029f62:	681b      	ldr	r3, [r3, #0]
 8029f64:	2100      	movs	r1, #0
 8029f66:	4618      	mov	r0, r3
 8029f68:	f7ff fde6 	bl	8029b38 <lwip_netconn_do_writemore>
 8029f6c:	4603      	mov	r3, r0
 8029f6e:	2b00      	cmp	r3, #0
 8029f70:	d02e      	beq.n	8029fd0 <lwip_netconn_do_write+0xf8>
          LWIP_ASSERT("state!", msg->conn->state == NETCONN_WRITE);
 8029f72:	68bb      	ldr	r3, [r7, #8]
 8029f74:	681b      	ldr	r3, [r3, #0]
 8029f76:	785b      	ldrb	r3, [r3, #1]
 8029f78:	2b01      	cmp	r3, #1
 8029f7a:	d006      	beq.n	8029f8a <lwip_netconn_do_write+0xb2>
 8029f7c:	4b16      	ldr	r3, [pc, #88]	; (8029fd8 <lwip_netconn_do_write+0x100>)
 8029f7e:	f44f 62e5 	mov.w	r2, #1832	; 0x728
 8029f82:	4919      	ldr	r1, [pc, #100]	; (8029fe8 <lwip_netconn_do_write+0x110>)
 8029f84:	4816      	ldr	r0, [pc, #88]	; (8029fe0 <lwip_netconn_do_write+0x108>)
 8029f86:	f00c f907 	bl	8036198 <iprintf>
          UNLOCK_TCPIP_CORE();
 8029f8a:	4818      	ldr	r0, [pc, #96]	; (8029fec <lwip_netconn_do_write+0x114>)
 8029f8c:	f00b fe65 	bl	8035c5a <sys_mutex_unlock>
          sys_arch_sem_wait(LWIP_API_MSG_SEM(msg), 0);
 8029f90:	68bb      	ldr	r3, [r7, #8]
 8029f92:	681b      	ldr	r3, [r3, #0]
 8029f94:	330c      	adds	r3, #12
 8029f96:	2100      	movs	r1, #0
 8029f98:	4618      	mov	r0, r3
 8029f9a:	f00b fd91 	bl	8035ac0 <sys_arch_sem_wait>
          LOCK_TCPIP_CORE();
 8029f9e:	4813      	ldr	r0, [pc, #76]	; (8029fec <lwip_netconn_do_write+0x114>)
 8029fa0:	f00b fe4c 	bl	8035c3c <sys_mutex_lock>
          LWIP_ASSERT("state!", msg->conn->state != NETCONN_WRITE);
 8029fa4:	68bb      	ldr	r3, [r7, #8]
 8029fa6:	681b      	ldr	r3, [r3, #0]
 8029fa8:	785b      	ldrb	r3, [r3, #1]
 8029faa:	2b01      	cmp	r3, #1
 8029fac:	d110      	bne.n	8029fd0 <lwip_netconn_do_write+0xf8>
 8029fae:	4b0a      	ldr	r3, [pc, #40]	; (8029fd8 <lwip_netconn_do_write+0x100>)
 8029fb0:	f240 722c 	movw	r2, #1836	; 0x72c
 8029fb4:	490c      	ldr	r1, [pc, #48]	; (8029fe8 <lwip_netconn_do_write+0x110>)
 8029fb6:	480a      	ldr	r0, [pc, #40]	; (8029fe0 <lwip_netconn_do_write+0x108>)
 8029fb8:	f00c f8ee 	bl	8036198 <iprintf>
#else /* LWIP_TCPIP_CORE_LOCKING */
        lwip_netconn_do_writemore(msg->conn);
#endif /* LWIP_TCPIP_CORE_LOCKING */
        /* for both cases: if lwip_netconn_do_writemore was called, don't ACK the APIMSG
           since lwip_netconn_do_writemore ACKs it! */
        return;
 8029fbc:	e008      	b.n	8029fd0 <lwip_netconn_do_write+0xf8>
      } else {
        err = ERR_CONN;
 8029fbe:	23f5      	movs	r3, #245	; 0xf5
 8029fc0:	73fb      	strb	r3, [r7, #15]
 8029fc2:	e001      	b.n	8029fc8 <lwip_netconn_do_write+0xf0>
#else /* LWIP_TCP */
      err = ERR_VAL;
#endif /* LWIP_TCP */
#if (LWIP_UDP || LWIP_RAW)
    } else {
      err = ERR_VAL;
 8029fc4:	23fa      	movs	r3, #250	; 0xfa
 8029fc6:	73fb      	strb	r3, [r7, #15]
#endif /* (LWIP_UDP || LWIP_RAW) */
    }
  }
  msg->err = err;
 8029fc8:	68bb      	ldr	r3, [r7, #8]
 8029fca:	7bfa      	ldrb	r2, [r7, #15]
 8029fcc:	711a      	strb	r2, [r3, #4]
 8029fce:	e000      	b.n	8029fd2 <lwip_netconn_do_write+0xfa>
        return;
 8029fd0:	bf00      	nop
  TCPIP_APIMSG_ACK(msg);
}
 8029fd2:	3710      	adds	r7, #16
 8029fd4:	46bd      	mov	sp, r7
 8029fd6:	bd80      	pop	{r7, pc}
 8029fd8:	080378dc 	.word	0x080378dc
 8029fdc:	08037c80 	.word	0x08037c80
 8029fe0:	08037920 	.word	0x08037920
 8029fe4:	08037e08 	.word	0x08037e08
 8029fe8:	08037c9c 	.word	0x08037c9c
 8029fec:	2000b288 	.word	0x2000b288

08029ff0 <lwip_netconn_do_close>:
 *
 * @param m the api_msg pointing to the connection
 */
void
lwip_netconn_do_close(void *m)
{
 8029ff0:	b580      	push	{r7, lr}
 8029ff2:	b084      	sub	sp, #16
 8029ff4:	af00      	add	r7, sp, #0
 8029ff6:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 8029ff8:	687b      	ldr	r3, [r7, #4]
 8029ffa:	60fb      	str	r3, [r7, #12]

#if LWIP_TCP
  enum netconn_state state = msg->conn->state;
 8029ffc:	68fb      	ldr	r3, [r7, #12]
 8029ffe:	681b      	ldr	r3, [r3, #0]
 802a000:	785b      	ldrb	r3, [r3, #1]
 802a002:	72fb      	strb	r3, [r7, #11]
  /* First check if this is a TCP netconn and if it is in a correct state
      (LISTEN doesn't support half shutdown) */
  if ((msg->conn->pcb.tcp != NULL) &&
 802a004:	68fb      	ldr	r3, [r7, #12]
 802a006:	681b      	ldr	r3, [r3, #0]
 802a008:	685b      	ldr	r3, [r3, #4]
 802a00a:	2b00      	cmp	r3, #0
 802a00c:	d069      	beq.n	802a0e2 <lwip_netconn_do_close+0xf2>
      (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) &&
 802a00e:	68fb      	ldr	r3, [r7, #12]
 802a010:	681b      	ldr	r3, [r3, #0]
 802a012:	781b      	ldrb	r3, [r3, #0]
 802a014:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if ((msg->conn->pcb.tcp != NULL) &&
 802a018:	2b10      	cmp	r3, #16
 802a01a:	d162      	bne.n	802a0e2 <lwip_netconn_do_close+0xf2>
      ((msg->msg.sd.shut == NETCONN_SHUT_RDWR) || (state != NETCONN_LISTEN))) {
 802a01c:	68fb      	ldr	r3, [r7, #12]
 802a01e:	7a1b      	ldrb	r3, [r3, #8]
      (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) &&
 802a020:	2b03      	cmp	r3, #3
 802a022:	d002      	beq.n	802a02a <lwip_netconn_do_close+0x3a>
      ((msg->msg.sd.shut == NETCONN_SHUT_RDWR) || (state != NETCONN_LISTEN))) {
 802a024:	7afb      	ldrb	r3, [r7, #11]
 802a026:	2b02      	cmp	r3, #2
 802a028:	d05b      	beq.n	802a0e2 <lwip_netconn_do_close+0xf2>
    /* Check if we are in a connected state */
    if (state == NETCONN_CONNECT) {
 802a02a:	7afb      	ldrb	r3, [r7, #11]
 802a02c:	2b03      	cmp	r3, #3
 802a02e:	d103      	bne.n	802a038 <lwip_netconn_do_close+0x48>
      /* TCP connect in progress: cannot shutdown */
      msg->err = ERR_CONN;
 802a030:	68fb      	ldr	r3, [r7, #12]
 802a032:	22f5      	movs	r2, #245	; 0xf5
 802a034:	711a      	strb	r2, [r3, #4]
    if (state == NETCONN_CONNECT) {
 802a036:	e059      	b.n	802a0ec <lwip_netconn_do_close+0xfc>
    } else if (state == NETCONN_WRITE) {
 802a038:	7afb      	ldrb	r3, [r7, #11]
 802a03a:	2b01      	cmp	r3, #1
 802a03c:	d103      	bne.n	802a046 <lwip_netconn_do_close+0x56>
        msg->err = tcp_shutdown(msg->conn->pcb.tcp, 1, 0);
      }
    }
    if (state == NETCONN_NONE) {
#else /* LWIP_NETCONN_FULLDUPLEX */
      msg->err = ERR_INPROGRESS;
 802a03e:	68fb      	ldr	r3, [r7, #12]
 802a040:	22fb      	movs	r2, #251	; 0xfb
 802a042:	711a      	strb	r2, [r3, #4]
    if (state == NETCONN_CONNECT) {
 802a044:	e052      	b.n	802a0ec <lwip_netconn_do_close+0xfc>
    } else {
#endif /* LWIP_NETCONN_FULLDUPLEX */
      if (msg->msg.sd.shut & NETCONN_SHUT_RD) {
 802a046:	68fb      	ldr	r3, [r7, #12]
 802a048:	7a1b      	ldrb	r3, [r3, #8]
 802a04a:	f003 0301 	and.w	r3, r3, #1
 802a04e:	2b00      	cmp	r3, #0
 802a050:	d004      	beq.n	802a05c <lwip_netconn_do_close+0x6c>
#if LWIP_NETCONN_FULLDUPLEX
        /* Mark mboxes invalid */
        netconn_mark_mbox_invalid(msg->conn);
#else /* LWIP_NETCONN_FULLDUPLEX */
        netconn_drain(msg->conn);
 802a052:	68fb      	ldr	r3, [r7, #12]
 802a054:	681b      	ldr	r3, [r3, #0]
 802a056:	4618      	mov	r0, r3
 802a058:	f7ff f998 	bl	802938c <netconn_drain>
#endif /* LWIP_NETCONN_FULLDUPLEX */
      }
      LWIP_ASSERT("already writing or closing", msg->conn->current_msg == NULL);
 802a05c:	68fb      	ldr	r3, [r7, #12]
 802a05e:	681b      	ldr	r3, [r3, #0]
 802a060:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 802a062:	2b00      	cmp	r3, #0
 802a064:	d006      	beq.n	802a074 <lwip_netconn_do_close+0x84>
 802a066:	4b23      	ldr	r3, [pc, #140]	; (802a0f4 <lwip_netconn_do_close+0x104>)
 802a068:	f240 72bd 	movw	r2, #1981	; 0x7bd
 802a06c:	4922      	ldr	r1, [pc, #136]	; (802a0f8 <lwip_netconn_do_close+0x108>)
 802a06e:	4823      	ldr	r0, [pc, #140]	; (802a0fc <lwip_netconn_do_close+0x10c>)
 802a070:	f00c f892 	bl	8036198 <iprintf>
      msg->conn->state = NETCONN_CLOSE;
 802a074:	68fb      	ldr	r3, [r7, #12]
 802a076:	681b      	ldr	r3, [r3, #0]
 802a078:	2204      	movs	r2, #4
 802a07a:	705a      	strb	r2, [r3, #1]
      msg->conn->current_msg = msg;
 802a07c:	68fb      	ldr	r3, [r7, #12]
 802a07e:	681b      	ldr	r3, [r3, #0]
 802a080:	68fa      	ldr	r2, [r7, #12]
 802a082:	625a      	str	r2, [r3, #36]	; 0x24
#if LWIP_TCPIP_CORE_LOCKING
      if (lwip_netconn_do_close_internal(msg->conn, 0) != ERR_OK) {
 802a084:	68fb      	ldr	r3, [r7, #12]
 802a086:	681b      	ldr	r3, [r3, #0]
 802a088:	2100      	movs	r1, #0
 802a08a:	4618      	mov	r0, r3
 802a08c:	f7ff f9fc 	bl	8029488 <lwip_netconn_do_close_internal>
 802a090:	4603      	mov	r3, r0
 802a092:	2b00      	cmp	r3, #0
 802a094:	d029      	beq.n	802a0ea <lwip_netconn_do_close+0xfa>
        LWIP_ASSERT("state!", msg->conn->state == NETCONN_CLOSE);
 802a096:	68fb      	ldr	r3, [r7, #12]
 802a098:	681b      	ldr	r3, [r3, #0]
 802a09a:	785b      	ldrb	r3, [r3, #1]
 802a09c:	2b04      	cmp	r3, #4
 802a09e:	d006      	beq.n	802a0ae <lwip_netconn_do_close+0xbe>
 802a0a0:	4b14      	ldr	r3, [pc, #80]	; (802a0f4 <lwip_netconn_do_close+0x104>)
 802a0a2:	f240 72c2 	movw	r2, #1986	; 0x7c2
 802a0a6:	4916      	ldr	r1, [pc, #88]	; (802a100 <lwip_netconn_do_close+0x110>)
 802a0a8:	4814      	ldr	r0, [pc, #80]	; (802a0fc <lwip_netconn_do_close+0x10c>)
 802a0aa:	f00c f875 	bl	8036198 <iprintf>
        UNLOCK_TCPIP_CORE();
 802a0ae:	4815      	ldr	r0, [pc, #84]	; (802a104 <lwip_netconn_do_close+0x114>)
 802a0b0:	f00b fdd3 	bl	8035c5a <sys_mutex_unlock>
        sys_arch_sem_wait(LWIP_API_MSG_SEM(msg), 0);
 802a0b4:	68fb      	ldr	r3, [r7, #12]
 802a0b6:	681b      	ldr	r3, [r3, #0]
 802a0b8:	330c      	adds	r3, #12
 802a0ba:	2100      	movs	r1, #0
 802a0bc:	4618      	mov	r0, r3
 802a0be:	f00b fcff 	bl	8035ac0 <sys_arch_sem_wait>
        LOCK_TCPIP_CORE();
 802a0c2:	4810      	ldr	r0, [pc, #64]	; (802a104 <lwip_netconn_do_close+0x114>)
 802a0c4:	f00b fdba 	bl	8035c3c <sys_mutex_lock>
        LWIP_ASSERT("state!", msg->conn->state == NETCONN_NONE);
 802a0c8:	68fb      	ldr	r3, [r7, #12]
 802a0ca:	681b      	ldr	r3, [r3, #0]
 802a0cc:	785b      	ldrb	r3, [r3, #1]
 802a0ce:	2b00      	cmp	r3, #0
 802a0d0:	d00b      	beq.n	802a0ea <lwip_netconn_do_close+0xfa>
 802a0d2:	4b08      	ldr	r3, [pc, #32]	; (802a0f4 <lwip_netconn_do_close+0x104>)
 802a0d4:	f240 72c6 	movw	r2, #1990	; 0x7c6
 802a0d8:	4909      	ldr	r1, [pc, #36]	; (802a100 <lwip_netconn_do_close+0x110>)
 802a0da:	4808      	ldr	r0, [pc, #32]	; (802a0fc <lwip_netconn_do_close+0x10c>)
 802a0dc:	f00c f85c 	bl	8036198 <iprintf>
      }
#else /* LWIP_TCPIP_CORE_LOCKING */
      lwip_netconn_do_close_internal(msg->conn);
#endif /* LWIP_TCPIP_CORE_LOCKING */
      /* for tcp netconns, lwip_netconn_do_close_internal ACKs the message */
      return;
 802a0e0:	e003      	b.n	802a0ea <lwip_netconn_do_close+0xfa>
    }
  } else
#endif /* LWIP_TCP */
  {
    msg->err = ERR_CONN;
 802a0e2:	68fb      	ldr	r3, [r7, #12]
 802a0e4:	22f5      	movs	r2, #245	; 0xf5
 802a0e6:	711a      	strb	r2, [r3, #4]
 802a0e8:	e000      	b.n	802a0ec <lwip_netconn_do_close+0xfc>
      return;
 802a0ea:	bf00      	nop
  }
  TCPIP_APIMSG_ACK(msg);
}
 802a0ec:	3710      	adds	r7, #16
 802a0ee:	46bd      	mov	sp, r7
 802a0f0:	bd80      	pop	{r7, pc}
 802a0f2:	bf00      	nop
 802a0f4:	080378dc 	.word	0x080378dc
 802a0f8:	08037c80 	.word	0x08037c80
 802a0fc:	08037920 	.word	0x08037920
 802a100:	08037c9c 	.word	0x08037c9c
 802a104:	2000b288 	.word	0x2000b288

0802a108 <netbuf_delete>:
 *
 * @param buf pointer to a netbuf allocated by netbuf_new()
 */
void
netbuf_delete(struct netbuf *buf)
{
 802a108:	b580      	push	{r7, lr}
 802a10a:	b082      	sub	sp, #8
 802a10c:	af00      	add	r7, sp, #0
 802a10e:	6078      	str	r0, [r7, #4]
  if (buf != NULL) {
 802a110:	687b      	ldr	r3, [r7, #4]
 802a112:	2b00      	cmp	r3, #0
 802a114:	d013      	beq.n	802a13e <netbuf_delete+0x36>
    if (buf->p != NULL) {
 802a116:	687b      	ldr	r3, [r7, #4]
 802a118:	681b      	ldr	r3, [r3, #0]
 802a11a:	2b00      	cmp	r3, #0
 802a11c:	d00b      	beq.n	802a136 <netbuf_delete+0x2e>
      pbuf_free(buf->p);
 802a11e:	687b      	ldr	r3, [r7, #4]
 802a120:	681b      	ldr	r3, [r3, #0]
 802a122:	4618      	mov	r0, r3
 802a124:	f001 feba 	bl	802be9c <pbuf_free>
      buf->p = buf->ptr = NULL;
 802a128:	687b      	ldr	r3, [r7, #4]
 802a12a:	2200      	movs	r2, #0
 802a12c:	605a      	str	r2, [r3, #4]
 802a12e:	687b      	ldr	r3, [r7, #4]
 802a130:	685a      	ldr	r2, [r3, #4]
 802a132:	687b      	ldr	r3, [r7, #4]
 802a134:	601a      	str	r2, [r3, #0]
    }
    memp_free(MEMP_NETBUF, buf);
 802a136:	6879      	ldr	r1, [r7, #4]
 802a138:	2006      	movs	r0, #6
 802a13a:	f001 f80b 	bl	802b154 <memp_free>
  }
}
 802a13e:	bf00      	nop
 802a140:	3708      	adds	r7, #8
 802a142:	46bd      	mov	sp, r7
 802a144:	bd80      	pop	{r7, pc}
	...

0802a148 <netbuf_next>:
 *         1  if moved to the next part but now there is no next part
 *         0  if moved to the next part and there are still more parts
 */
s8_t
netbuf_next(struct netbuf *buf)
{
 802a148:	b580      	push	{r7, lr}
 802a14a:	b082      	sub	sp, #8
 802a14c:	af00      	add	r7, sp, #0
 802a14e:	6078      	str	r0, [r7, #4]
  LWIP_ERROR("netbuf_next: invalid buf", (buf != NULL), return -1;);
 802a150:	687b      	ldr	r3, [r7, #4]
 802a152:	2b00      	cmp	r3, #0
 802a154:	d108      	bne.n	802a168 <netbuf_next+0x20>
 802a156:	4b11      	ldr	r3, [pc, #68]	; (802a19c <netbuf_next+0x54>)
 802a158:	22e0      	movs	r2, #224	; 0xe0
 802a15a:	4911      	ldr	r1, [pc, #68]	; (802a1a0 <netbuf_next+0x58>)
 802a15c:	4811      	ldr	r0, [pc, #68]	; (802a1a4 <netbuf_next+0x5c>)
 802a15e:	f00c f81b 	bl	8036198 <iprintf>
 802a162:	f04f 33ff 	mov.w	r3, #4294967295
 802a166:	e014      	b.n	802a192 <netbuf_next+0x4a>
  if (buf->ptr->next == NULL) {
 802a168:	687b      	ldr	r3, [r7, #4]
 802a16a:	685b      	ldr	r3, [r3, #4]
 802a16c:	681b      	ldr	r3, [r3, #0]
 802a16e:	2b00      	cmp	r3, #0
 802a170:	d102      	bne.n	802a178 <netbuf_next+0x30>
    return -1;
 802a172:	f04f 33ff 	mov.w	r3, #4294967295
 802a176:	e00c      	b.n	802a192 <netbuf_next+0x4a>
  }
  buf->ptr = buf->ptr->next;
 802a178:	687b      	ldr	r3, [r7, #4]
 802a17a:	685b      	ldr	r3, [r3, #4]
 802a17c:	681a      	ldr	r2, [r3, #0]
 802a17e:	687b      	ldr	r3, [r7, #4]
 802a180:	605a      	str	r2, [r3, #4]
  if (buf->ptr->next == NULL) {
 802a182:	687b      	ldr	r3, [r7, #4]
 802a184:	685b      	ldr	r3, [r3, #4]
 802a186:	681b      	ldr	r3, [r3, #0]
 802a188:	2b00      	cmp	r3, #0
 802a18a:	d101      	bne.n	802a190 <netbuf_next+0x48>
    return 1;
 802a18c:	2301      	movs	r3, #1
 802a18e:	e000      	b.n	802a192 <netbuf_next+0x4a>
  }
  return 0;
 802a190:	2300      	movs	r3, #0
}
 802a192:	4618      	mov	r0, r3
 802a194:	3708      	adds	r7, #8
 802a196:	46bd      	mov	sp, r7
 802a198:	bd80      	pop	{r7, pc}
 802a19a:	bf00      	nop
 802a19c:	08037e34 	.word	0x08037e34
 802a1a0:	08037f94 	.word	0x08037f94
 802a1a4:	08037e84 	.word	0x08037e84

0802a1a8 <tcpip_timeouts_mbox_fetch>:
 * @param mbox the mbox to fetch the message from
 * @param msg the place to store the message
 */
static void
tcpip_timeouts_mbox_fetch(sys_mbox_t *mbox, void **msg)
{
 802a1a8:	b580      	push	{r7, lr}
 802a1aa:	b084      	sub	sp, #16
 802a1ac:	af00      	add	r7, sp, #0
 802a1ae:	6078      	str	r0, [r7, #4]
 802a1b0:	6039      	str	r1, [r7, #0]
  u32_t sleeptime, res;

again:
  LWIP_ASSERT_CORE_LOCKED();

  sleeptime = sys_timeouts_sleeptime();
 802a1b2:	f008 fbbb 	bl	803292c <sys_timeouts_sleeptime>
 802a1b6:	60f8      	str	r0, [r7, #12]
  if (sleeptime == SYS_TIMEOUTS_SLEEPTIME_INFINITE) {
 802a1b8:	68fb      	ldr	r3, [r7, #12]
 802a1ba:	f1b3 3fff 	cmp.w	r3, #4294967295
 802a1be:	d10b      	bne.n	802a1d8 <tcpip_timeouts_mbox_fetch+0x30>
    UNLOCK_TCPIP_CORE();
 802a1c0:	4813      	ldr	r0, [pc, #76]	; (802a210 <tcpip_timeouts_mbox_fetch+0x68>)
 802a1c2:	f00b fd4a 	bl	8035c5a <sys_mutex_unlock>
    sys_arch_mbox_fetch(mbox, msg, 0);
 802a1c6:	2200      	movs	r2, #0
 802a1c8:	6839      	ldr	r1, [r7, #0]
 802a1ca:	6878      	ldr	r0, [r7, #4]
 802a1cc:	f00b fbb6 	bl	803593c <sys_arch_mbox_fetch>
    LOCK_TCPIP_CORE();
 802a1d0:	480f      	ldr	r0, [pc, #60]	; (802a210 <tcpip_timeouts_mbox_fetch+0x68>)
 802a1d2:	f00b fd33 	bl	8035c3c <sys_mutex_lock>
    return;
 802a1d6:	e018      	b.n	802a20a <tcpip_timeouts_mbox_fetch+0x62>
  } else if (sleeptime == 0) {
 802a1d8:	68fb      	ldr	r3, [r7, #12]
 802a1da:	2b00      	cmp	r3, #0
 802a1dc:	d102      	bne.n	802a1e4 <tcpip_timeouts_mbox_fetch+0x3c>
    sys_check_timeouts();
 802a1de:	f008 fb6b 	bl	80328b8 <sys_check_timeouts>
    /* We try again to fetch a message from the mbox. */
    goto again;
 802a1e2:	e7e6      	b.n	802a1b2 <tcpip_timeouts_mbox_fetch+0xa>
  }

  UNLOCK_TCPIP_CORE();
 802a1e4:	480a      	ldr	r0, [pc, #40]	; (802a210 <tcpip_timeouts_mbox_fetch+0x68>)
 802a1e6:	f00b fd38 	bl	8035c5a <sys_mutex_unlock>
  res = sys_arch_mbox_fetch(mbox, msg, sleeptime);
 802a1ea:	68fa      	ldr	r2, [r7, #12]
 802a1ec:	6839      	ldr	r1, [r7, #0]
 802a1ee:	6878      	ldr	r0, [r7, #4]
 802a1f0:	f00b fba4 	bl	803593c <sys_arch_mbox_fetch>
 802a1f4:	60b8      	str	r0, [r7, #8]
  LOCK_TCPIP_CORE();
 802a1f6:	4806      	ldr	r0, [pc, #24]	; (802a210 <tcpip_timeouts_mbox_fetch+0x68>)
 802a1f8:	f00b fd20 	bl	8035c3c <sys_mutex_lock>
  if (res == SYS_ARCH_TIMEOUT) {
 802a1fc:	68bb      	ldr	r3, [r7, #8]
 802a1fe:	f1b3 3fff 	cmp.w	r3, #4294967295
 802a202:	d102      	bne.n	802a20a <tcpip_timeouts_mbox_fetch+0x62>
    /* If a SYS_ARCH_TIMEOUT value is returned, a timeout occurred
       before a message could be fetched. */
    sys_check_timeouts();
 802a204:	f008 fb58 	bl	80328b8 <sys_check_timeouts>
    /* We try again to fetch a message from the mbox. */
    goto again;
 802a208:	e7d3      	b.n	802a1b2 <tcpip_timeouts_mbox_fetch+0xa>
  }
}
 802a20a:	3710      	adds	r7, #16
 802a20c:	46bd      	mov	sp, r7
 802a20e:	bd80      	pop	{r7, pc}
 802a210:	2000b288 	.word	0x2000b288

0802a214 <tcpip_thread>:
 *
 * @param arg unused argument
 */
static void
tcpip_thread(void *arg)
{
 802a214:	b580      	push	{r7, lr}
 802a216:	b084      	sub	sp, #16
 802a218:	af00      	add	r7, sp, #0
 802a21a:	6078      	str	r0, [r7, #4]
  struct tcpip_msg *msg;
  LWIP_UNUSED_ARG(arg);

  LWIP_MARK_TCPIP_THREAD();

  LOCK_TCPIP_CORE();
 802a21c:	4810      	ldr	r0, [pc, #64]	; (802a260 <tcpip_thread+0x4c>)
 802a21e:	f00b fd0d 	bl	8035c3c <sys_mutex_lock>
  if (tcpip_init_done != NULL) {
 802a222:	4b10      	ldr	r3, [pc, #64]	; (802a264 <tcpip_thread+0x50>)
 802a224:	681b      	ldr	r3, [r3, #0]
 802a226:	2b00      	cmp	r3, #0
 802a228:	d005      	beq.n	802a236 <tcpip_thread+0x22>
    tcpip_init_done(tcpip_init_done_arg);
 802a22a:	4b0e      	ldr	r3, [pc, #56]	; (802a264 <tcpip_thread+0x50>)
 802a22c:	681b      	ldr	r3, [r3, #0]
 802a22e:	4a0e      	ldr	r2, [pc, #56]	; (802a268 <tcpip_thread+0x54>)
 802a230:	6812      	ldr	r2, [r2, #0]
 802a232:	4610      	mov	r0, r2
 802a234:	4798      	blx	r3
  }

  while (1) {                          /* MAIN Loop */
    LWIP_TCPIP_THREAD_ALIVE();
    /* wait for a message, timeouts are processed while waiting */
    TCPIP_MBOX_FETCH(&tcpip_mbox, (void **)&msg);
 802a236:	f107 030c 	add.w	r3, r7, #12
 802a23a:	4619      	mov	r1, r3
 802a23c:	480b      	ldr	r0, [pc, #44]	; (802a26c <tcpip_thread+0x58>)
 802a23e:	f7ff ffb3 	bl	802a1a8 <tcpip_timeouts_mbox_fetch>
    if (msg == NULL) {
 802a242:	68fb      	ldr	r3, [r7, #12]
 802a244:	2b00      	cmp	r3, #0
 802a246:	d106      	bne.n	802a256 <tcpip_thread+0x42>
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: invalid message: NULL\n"));
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 802a248:	4b09      	ldr	r3, [pc, #36]	; (802a270 <tcpip_thread+0x5c>)
 802a24a:	2291      	movs	r2, #145	; 0x91
 802a24c:	4909      	ldr	r1, [pc, #36]	; (802a274 <tcpip_thread+0x60>)
 802a24e:	480a      	ldr	r0, [pc, #40]	; (802a278 <tcpip_thread+0x64>)
 802a250:	f00b ffa2 	bl	8036198 <iprintf>
      continue;
 802a254:	e003      	b.n	802a25e <tcpip_thread+0x4a>
    }
    tcpip_thread_handle_msg(msg);
 802a256:	68fb      	ldr	r3, [r7, #12]
 802a258:	4618      	mov	r0, r3
 802a25a:	f000 f80f 	bl	802a27c <tcpip_thread_handle_msg>
    TCPIP_MBOX_FETCH(&tcpip_mbox, (void **)&msg);
 802a25e:	e7ea      	b.n	802a236 <tcpip_thread+0x22>
 802a260:	2000b288 	.word	0x2000b288
 802a264:	2000b27c 	.word	0x2000b27c
 802a268:	2000b280 	.word	0x2000b280
 802a26c:	2000b284 	.word	0x2000b284
 802a270:	08037fcc 	.word	0x08037fcc
 802a274:	08037ffc 	.word	0x08037ffc
 802a278:	0803801c 	.word	0x0803801c

0802a27c <tcpip_thread_handle_msg>:
/* Handle a single tcpip_msg
 * This is in its own function for access by tests only.
 */
static void
tcpip_thread_handle_msg(struct tcpip_msg *msg)
{
 802a27c:	b580      	push	{r7, lr}
 802a27e:	b082      	sub	sp, #8
 802a280:	af00      	add	r7, sp, #0
 802a282:	6078      	str	r0, [r7, #4]
  switch (msg->type) {
 802a284:	687b      	ldr	r3, [r7, #4]
 802a286:	781b      	ldrb	r3, [r3, #0]
 802a288:	2b02      	cmp	r3, #2
 802a28a:	d026      	beq.n	802a2da <tcpip_thread_handle_msg+0x5e>
 802a28c:	2b02      	cmp	r3, #2
 802a28e:	dc2b      	bgt.n	802a2e8 <tcpip_thread_handle_msg+0x6c>
 802a290:	2b00      	cmp	r3, #0
 802a292:	d002      	beq.n	802a29a <tcpip_thread_handle_msg+0x1e>
 802a294:	2b01      	cmp	r3, #1
 802a296:	d015      	beq.n	802a2c4 <tcpip_thread_handle_msg+0x48>
 802a298:	e026      	b.n	802a2e8 <tcpip_thread_handle_msg+0x6c>
#endif /* !LWIP_TCPIP_CORE_LOCKING */

#if !LWIP_TCPIP_CORE_LOCKING_INPUT
    case TCPIP_MSG_INPKT:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: PACKET %p\n", (void *)msg));
      if (msg->msg.inp.input_fn(msg->msg.inp.p, msg->msg.inp.netif) != ERR_OK) {
 802a29a:	687b      	ldr	r3, [r7, #4]
 802a29c:	68db      	ldr	r3, [r3, #12]
 802a29e:	687a      	ldr	r2, [r7, #4]
 802a2a0:	6850      	ldr	r0, [r2, #4]
 802a2a2:	687a      	ldr	r2, [r7, #4]
 802a2a4:	6892      	ldr	r2, [r2, #8]
 802a2a6:	4611      	mov	r1, r2
 802a2a8:	4798      	blx	r3
 802a2aa:	4603      	mov	r3, r0
 802a2ac:	2b00      	cmp	r3, #0
 802a2ae:	d004      	beq.n	802a2ba <tcpip_thread_handle_msg+0x3e>
        pbuf_free(msg->msg.inp.p);
 802a2b0:	687b      	ldr	r3, [r7, #4]
 802a2b2:	685b      	ldr	r3, [r3, #4]
 802a2b4:	4618      	mov	r0, r3
 802a2b6:	f001 fdf1 	bl	802be9c <pbuf_free>
      }
      memp_free(MEMP_TCPIP_MSG_INPKT, msg);
 802a2ba:	6879      	ldr	r1, [r7, #4]
 802a2bc:	2009      	movs	r0, #9
 802a2be:	f000 ff49 	bl	802b154 <memp_free>
      break;
 802a2c2:	e018      	b.n	802a2f6 <tcpip_thread_handle_msg+0x7a>
      break;
#endif /* LWIP_TCPIP_TIMEOUT && LWIP_TIMERS */

    case TCPIP_MSG_CALLBACK:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: CALLBACK %p\n", (void *)msg));
      msg->msg.cb.function(msg->msg.cb.ctx);
 802a2c4:	687b      	ldr	r3, [r7, #4]
 802a2c6:	685b      	ldr	r3, [r3, #4]
 802a2c8:	687a      	ldr	r2, [r7, #4]
 802a2ca:	6892      	ldr	r2, [r2, #8]
 802a2cc:	4610      	mov	r0, r2
 802a2ce:	4798      	blx	r3
      memp_free(MEMP_TCPIP_MSG_API, msg);
 802a2d0:	6879      	ldr	r1, [r7, #4]
 802a2d2:	2008      	movs	r0, #8
 802a2d4:	f000 ff3e 	bl	802b154 <memp_free>
      break;
 802a2d8:	e00d      	b.n	802a2f6 <tcpip_thread_handle_msg+0x7a>

    case TCPIP_MSG_CALLBACK_STATIC:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: CALLBACK_STATIC %p\n", (void *)msg));
      msg->msg.cb.function(msg->msg.cb.ctx);
 802a2da:	687b      	ldr	r3, [r7, #4]
 802a2dc:	685b      	ldr	r3, [r3, #4]
 802a2de:	687a      	ldr	r2, [r7, #4]
 802a2e0:	6892      	ldr	r2, [r2, #8]
 802a2e2:	4610      	mov	r0, r2
 802a2e4:	4798      	blx	r3
      break;
 802a2e6:	e006      	b.n	802a2f6 <tcpip_thread_handle_msg+0x7a>

    default:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: invalid message: %d\n", msg->type));
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 802a2e8:	4b05      	ldr	r3, [pc, #20]	; (802a300 <tcpip_thread_handle_msg+0x84>)
 802a2ea:	22cf      	movs	r2, #207	; 0xcf
 802a2ec:	4905      	ldr	r1, [pc, #20]	; (802a304 <tcpip_thread_handle_msg+0x88>)
 802a2ee:	4806      	ldr	r0, [pc, #24]	; (802a308 <tcpip_thread_handle_msg+0x8c>)
 802a2f0:	f00b ff52 	bl	8036198 <iprintf>
      break;
 802a2f4:	bf00      	nop
  }
}
 802a2f6:	bf00      	nop
 802a2f8:	3708      	adds	r7, #8
 802a2fa:	46bd      	mov	sp, r7
 802a2fc:	bd80      	pop	{r7, pc}
 802a2fe:	bf00      	nop
 802a300:	08037fcc 	.word	0x08037fcc
 802a304:	08037ffc 	.word	0x08037ffc
 802a308:	0803801c 	.word	0x0803801c

0802a30c <tcpip_inpkt>:
 * @param inp the network interface on which the packet was received
 * @param input_fn input function to call
 */
err_t
tcpip_inpkt(struct pbuf *p, struct netif *inp, netif_input_fn input_fn)
{
 802a30c:	b580      	push	{r7, lr}
 802a30e:	b086      	sub	sp, #24
 802a310:	af00      	add	r7, sp, #0
 802a312:	60f8      	str	r0, [r7, #12]
 802a314:	60b9      	str	r1, [r7, #8]
 802a316:	607a      	str	r2, [r7, #4]
  UNLOCK_TCPIP_CORE();
  return ret;
#else /* LWIP_TCPIP_CORE_LOCKING_INPUT */
  struct tcpip_msg *msg;

  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(tcpip_mbox));
 802a318:	481a      	ldr	r0, [pc, #104]	; (802a384 <tcpip_inpkt+0x78>)
 802a31a:	f00b fb6a 	bl	80359f2 <sys_mbox_valid>
 802a31e:	4603      	mov	r3, r0
 802a320:	2b00      	cmp	r3, #0
 802a322:	d105      	bne.n	802a330 <tcpip_inpkt+0x24>
 802a324:	4b18      	ldr	r3, [pc, #96]	; (802a388 <tcpip_inpkt+0x7c>)
 802a326:	22fc      	movs	r2, #252	; 0xfc
 802a328:	4918      	ldr	r1, [pc, #96]	; (802a38c <tcpip_inpkt+0x80>)
 802a32a:	4819      	ldr	r0, [pc, #100]	; (802a390 <tcpip_inpkt+0x84>)
 802a32c:	f00b ff34 	bl	8036198 <iprintf>

  msg = (struct tcpip_msg *)memp_malloc(MEMP_TCPIP_MSG_INPKT);
 802a330:	2009      	movs	r0, #9
 802a332:	f000 fe93 	bl	802b05c <memp_malloc>
 802a336:	6178      	str	r0, [r7, #20]
  if (msg == NULL) {
 802a338:	697b      	ldr	r3, [r7, #20]
 802a33a:	2b00      	cmp	r3, #0
 802a33c:	d102      	bne.n	802a344 <tcpip_inpkt+0x38>
    return ERR_MEM;
 802a33e:	f04f 33ff 	mov.w	r3, #4294967295
 802a342:	e01a      	b.n	802a37a <tcpip_inpkt+0x6e>
  }

  msg->type = TCPIP_MSG_INPKT;
 802a344:	697b      	ldr	r3, [r7, #20]
 802a346:	2200      	movs	r2, #0
 802a348:	701a      	strb	r2, [r3, #0]
  msg->msg.inp.p = p;
 802a34a:	697b      	ldr	r3, [r7, #20]
 802a34c:	68fa      	ldr	r2, [r7, #12]
 802a34e:	605a      	str	r2, [r3, #4]
  msg->msg.inp.netif = inp;
 802a350:	697b      	ldr	r3, [r7, #20]
 802a352:	68ba      	ldr	r2, [r7, #8]
 802a354:	609a      	str	r2, [r3, #8]
  msg->msg.inp.input_fn = input_fn;
 802a356:	697b      	ldr	r3, [r7, #20]
 802a358:	687a      	ldr	r2, [r7, #4]
 802a35a:	60da      	str	r2, [r3, #12]
  if (sys_mbox_trypost(&tcpip_mbox, msg) != ERR_OK) {
 802a35c:	6979      	ldr	r1, [r7, #20]
 802a35e:	4809      	ldr	r0, [pc, #36]	; (802a384 <tcpip_inpkt+0x78>)
 802a360:	f00b fac8 	bl	80358f4 <sys_mbox_trypost>
 802a364:	4603      	mov	r3, r0
 802a366:	2b00      	cmp	r3, #0
 802a368:	d006      	beq.n	802a378 <tcpip_inpkt+0x6c>
    memp_free(MEMP_TCPIP_MSG_INPKT, msg);
 802a36a:	6979      	ldr	r1, [r7, #20]
 802a36c:	2009      	movs	r0, #9
 802a36e:	f000 fef1 	bl	802b154 <memp_free>
    return ERR_MEM;
 802a372:	f04f 33ff 	mov.w	r3, #4294967295
 802a376:	e000      	b.n	802a37a <tcpip_inpkt+0x6e>
  }
  return ERR_OK;
 802a378:	2300      	movs	r3, #0
#endif /* LWIP_TCPIP_CORE_LOCKING_INPUT */
}
 802a37a:	4618      	mov	r0, r3
 802a37c:	3718      	adds	r7, #24
 802a37e:	46bd      	mov	sp, r7
 802a380:	bd80      	pop	{r7, pc}
 802a382:	bf00      	nop
 802a384:	2000b284 	.word	0x2000b284
 802a388:	08037fcc 	.word	0x08037fcc
 802a38c:	08038044 	.word	0x08038044
 802a390:	0803801c 	.word	0x0803801c

0802a394 <tcpip_input>:
 *          NETIF_FLAG_ETHERNET flags)
 * @param inp the network interface on which the packet was received
 */
err_t
tcpip_input(struct pbuf *p, struct netif *inp)
{
 802a394:	b580      	push	{r7, lr}
 802a396:	b082      	sub	sp, #8
 802a398:	af00      	add	r7, sp, #0
 802a39a:	6078      	str	r0, [r7, #4]
 802a39c:	6039      	str	r1, [r7, #0]
#if LWIP_ETHERNET
  if (inp->flags & (NETIF_FLAG_ETHARP | NETIF_FLAG_ETHERNET)) {
 802a39e:	683b      	ldr	r3, [r7, #0]
 802a3a0:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 802a3a4:	f003 0318 	and.w	r3, r3, #24
 802a3a8:	2b00      	cmp	r3, #0
 802a3aa:	d006      	beq.n	802a3ba <tcpip_input+0x26>
    return tcpip_inpkt(p, inp, ethernet_input);
 802a3ac:	4a08      	ldr	r2, [pc, #32]	; (802a3d0 <tcpip_input+0x3c>)
 802a3ae:	6839      	ldr	r1, [r7, #0]
 802a3b0:	6878      	ldr	r0, [r7, #4]
 802a3b2:	f7ff ffab 	bl	802a30c <tcpip_inpkt>
 802a3b6:	4603      	mov	r3, r0
 802a3b8:	e005      	b.n	802a3c6 <tcpip_input+0x32>
  } else
#endif /* LWIP_ETHERNET */
    return tcpip_inpkt(p, inp, ip_input);
 802a3ba:	4a06      	ldr	r2, [pc, #24]	; (802a3d4 <tcpip_input+0x40>)
 802a3bc:	6839      	ldr	r1, [r7, #0]
 802a3be:	6878      	ldr	r0, [r7, #4]
 802a3c0:	f7ff ffa4 	bl	802a30c <tcpip_inpkt>
 802a3c4:	4603      	mov	r3, r0
}
 802a3c6:	4618      	mov	r0, r3
 802a3c8:	3708      	adds	r7, #8
 802a3ca:	46bd      	mov	sp, r7
 802a3cc:	bd80      	pop	{r7, pc}
 802a3ce:	bf00      	nop
 802a3d0:	0803562d 	.word	0x0803562d
 802a3d4:	08034409 	.word	0x08034409

0802a3d8 <tcpip_try_callback>:
 *
 * @see tcpip_callback
 */
err_t
tcpip_try_callback(tcpip_callback_fn function, void *ctx)
{
 802a3d8:	b580      	push	{r7, lr}
 802a3da:	b084      	sub	sp, #16
 802a3dc:	af00      	add	r7, sp, #0
 802a3de:	6078      	str	r0, [r7, #4]
 802a3e0:	6039      	str	r1, [r7, #0]
  struct tcpip_msg *msg;

  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(tcpip_mbox));
 802a3e2:	4819      	ldr	r0, [pc, #100]	; (802a448 <tcpip_try_callback+0x70>)
 802a3e4:	f00b fb05 	bl	80359f2 <sys_mbox_valid>
 802a3e8:	4603      	mov	r3, r0
 802a3ea:	2b00      	cmp	r3, #0
 802a3ec:	d106      	bne.n	802a3fc <tcpip_try_callback+0x24>
 802a3ee:	4b17      	ldr	r3, [pc, #92]	; (802a44c <tcpip_try_callback+0x74>)
 802a3f0:	f240 125d 	movw	r2, #349	; 0x15d
 802a3f4:	4916      	ldr	r1, [pc, #88]	; (802a450 <tcpip_try_callback+0x78>)
 802a3f6:	4817      	ldr	r0, [pc, #92]	; (802a454 <tcpip_try_callback+0x7c>)
 802a3f8:	f00b fece 	bl	8036198 <iprintf>

  msg = (struct tcpip_msg *)memp_malloc(MEMP_TCPIP_MSG_API);
 802a3fc:	2008      	movs	r0, #8
 802a3fe:	f000 fe2d 	bl	802b05c <memp_malloc>
 802a402:	60f8      	str	r0, [r7, #12]
  if (msg == NULL) {
 802a404:	68fb      	ldr	r3, [r7, #12]
 802a406:	2b00      	cmp	r3, #0
 802a408:	d102      	bne.n	802a410 <tcpip_try_callback+0x38>
    return ERR_MEM;
 802a40a:	f04f 33ff 	mov.w	r3, #4294967295
 802a40e:	e017      	b.n	802a440 <tcpip_try_callback+0x68>
  }

  msg->type = TCPIP_MSG_CALLBACK;
 802a410:	68fb      	ldr	r3, [r7, #12]
 802a412:	2201      	movs	r2, #1
 802a414:	701a      	strb	r2, [r3, #0]
  msg->msg.cb.function = function;
 802a416:	68fb      	ldr	r3, [r7, #12]
 802a418:	687a      	ldr	r2, [r7, #4]
 802a41a:	605a      	str	r2, [r3, #4]
  msg->msg.cb.ctx = ctx;
 802a41c:	68fb      	ldr	r3, [r7, #12]
 802a41e:	683a      	ldr	r2, [r7, #0]
 802a420:	609a      	str	r2, [r3, #8]

  if (sys_mbox_trypost(&tcpip_mbox, msg) != ERR_OK) {
 802a422:	68f9      	ldr	r1, [r7, #12]
 802a424:	4808      	ldr	r0, [pc, #32]	; (802a448 <tcpip_try_callback+0x70>)
 802a426:	f00b fa65 	bl	80358f4 <sys_mbox_trypost>
 802a42a:	4603      	mov	r3, r0
 802a42c:	2b00      	cmp	r3, #0
 802a42e:	d006      	beq.n	802a43e <tcpip_try_callback+0x66>
    memp_free(MEMP_TCPIP_MSG_API, msg);
 802a430:	68f9      	ldr	r1, [r7, #12]
 802a432:	2008      	movs	r0, #8
 802a434:	f000 fe8e 	bl	802b154 <memp_free>
    return ERR_MEM;
 802a438:	f04f 33ff 	mov.w	r3, #4294967295
 802a43c:	e000      	b.n	802a440 <tcpip_try_callback+0x68>
  }
  return ERR_OK;
 802a43e:	2300      	movs	r3, #0
}
 802a440:	4618      	mov	r0, r3
 802a442:	3710      	adds	r7, #16
 802a444:	46bd      	mov	sp, r7
 802a446:	bd80      	pop	{r7, pc}
 802a448:	2000b284 	.word	0x2000b284
 802a44c:	08037fcc 	.word	0x08037fcc
 802a450:	08038044 	.word	0x08038044
 802a454:	0803801c 	.word	0x0803801c

0802a458 <tcpip_send_msg_wait_sem>:
 * @param sem semaphore to wait on
 * @return ERR_OK if the function was called, another err_t if not
 */
err_t
tcpip_send_msg_wait_sem(tcpip_callback_fn fn, void *apimsg, sys_sem_t *sem)
{
 802a458:	b580      	push	{r7, lr}
 802a45a:	b084      	sub	sp, #16
 802a45c:	af00      	add	r7, sp, #0
 802a45e:	60f8      	str	r0, [r7, #12]
 802a460:	60b9      	str	r1, [r7, #8]
 802a462:	607a      	str	r2, [r7, #4]
#if LWIP_TCPIP_CORE_LOCKING
  LWIP_UNUSED_ARG(sem);
  LOCK_TCPIP_CORE();
 802a464:	4806      	ldr	r0, [pc, #24]	; (802a480 <tcpip_send_msg_wait_sem+0x28>)
 802a466:	f00b fbe9 	bl	8035c3c <sys_mutex_lock>
  fn(apimsg);
 802a46a:	68fb      	ldr	r3, [r7, #12]
 802a46c:	68b8      	ldr	r0, [r7, #8]
 802a46e:	4798      	blx	r3
  UNLOCK_TCPIP_CORE();
 802a470:	4803      	ldr	r0, [pc, #12]	; (802a480 <tcpip_send_msg_wait_sem+0x28>)
 802a472:	f00b fbf2 	bl	8035c5a <sys_mutex_unlock>
  return ERR_OK;
 802a476:	2300      	movs	r3, #0
  sys_mbox_post(&tcpip_mbox, &TCPIP_MSG_VAR_REF(msg));
  sys_arch_sem_wait(sem, 0);
  TCPIP_MSG_VAR_FREE(msg);
  return ERR_OK;
#endif /* LWIP_TCPIP_CORE_LOCKING */
}
 802a478:	4618      	mov	r0, r3
 802a47a:	3710      	adds	r7, #16
 802a47c:	46bd      	mov	sp, r7
 802a47e:	bd80      	pop	{r7, pc}
 802a480:	2000b288 	.word	0x2000b288

0802a484 <tcpip_init>:
 * @param initfunc a function to call when tcpip_thread is running and finished initializing
 * @param arg argument to pass to initfunc
 */
void
tcpip_init(tcpip_init_done_fn initfunc, void *arg)
{
 802a484:	b580      	push	{r7, lr}
 802a486:	b084      	sub	sp, #16
 802a488:	af02      	add	r7, sp, #8
 802a48a:	6078      	str	r0, [r7, #4]
 802a48c:	6039      	str	r1, [r7, #0]
  lwip_init();
 802a48e:	f000 f871 	bl	802a574 <lwip_init>

  tcpip_init_done = initfunc;
 802a492:	4a17      	ldr	r2, [pc, #92]	; (802a4f0 <tcpip_init+0x6c>)
 802a494:	687b      	ldr	r3, [r7, #4]
 802a496:	6013      	str	r3, [r2, #0]
  tcpip_init_done_arg = arg;
 802a498:	4a16      	ldr	r2, [pc, #88]	; (802a4f4 <tcpip_init+0x70>)
 802a49a:	683b      	ldr	r3, [r7, #0]
 802a49c:	6013      	str	r3, [r2, #0]
  if (sys_mbox_new(&tcpip_mbox, TCPIP_MBOX_SIZE) != ERR_OK) {
 802a49e:	2106      	movs	r1, #6
 802a4a0:	4815      	ldr	r0, [pc, #84]	; (802a4f8 <tcpip_init+0x74>)
 802a4a2:	f00b f9c5 	bl	8035830 <sys_mbox_new>
 802a4a6:	4603      	mov	r3, r0
 802a4a8:	2b00      	cmp	r3, #0
 802a4aa:	d006      	beq.n	802a4ba <tcpip_init+0x36>
    LWIP_ASSERT("failed to create tcpip_thread mbox", 0);
 802a4ac:	4b13      	ldr	r3, [pc, #76]	; (802a4fc <tcpip_init+0x78>)
 802a4ae:	f240 2261 	movw	r2, #609	; 0x261
 802a4b2:	4913      	ldr	r1, [pc, #76]	; (802a500 <tcpip_init+0x7c>)
 802a4b4:	4813      	ldr	r0, [pc, #76]	; (802a504 <tcpip_init+0x80>)
 802a4b6:	f00b fe6f 	bl	8036198 <iprintf>
  }
#if LWIP_TCPIP_CORE_LOCKING
  if (sys_mutex_new(&lock_tcpip_core) != ERR_OK) {
 802a4ba:	4813      	ldr	r0, [pc, #76]	; (802a508 <tcpip_init+0x84>)
 802a4bc:	f00b fb82 	bl	8035bc4 <sys_mutex_new>
 802a4c0:	4603      	mov	r3, r0
 802a4c2:	2b00      	cmp	r3, #0
 802a4c4:	d006      	beq.n	802a4d4 <tcpip_init+0x50>
    LWIP_ASSERT("failed to create lock_tcpip_core", 0);
 802a4c6:	4b0d      	ldr	r3, [pc, #52]	; (802a4fc <tcpip_init+0x78>)
 802a4c8:	f240 2265 	movw	r2, #613	; 0x265
 802a4cc:	490f      	ldr	r1, [pc, #60]	; (802a50c <tcpip_init+0x88>)
 802a4ce:	480d      	ldr	r0, [pc, #52]	; (802a504 <tcpip_init+0x80>)
 802a4d0:	f00b fe62 	bl	8036198 <iprintf>
  }
#endif /* LWIP_TCPIP_CORE_LOCKING */

  sys_thread_new(TCPIP_THREAD_NAME, tcpip_thread, NULL, TCPIP_THREAD_STACKSIZE, TCPIP_THREAD_PRIO);
 802a4d4:	2300      	movs	r3, #0
 802a4d6:	9300      	str	r3, [sp, #0]
 802a4d8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 802a4dc:	2200      	movs	r2, #0
 802a4de:	490c      	ldr	r1, [pc, #48]	; (802a510 <tcpip_init+0x8c>)
 802a4e0:	480c      	ldr	r0, [pc, #48]	; (802a514 <tcpip_init+0x90>)
 802a4e2:	f00b fbc7 	bl	8035c74 <sys_thread_new>
}
 802a4e6:	bf00      	nop
 802a4e8:	3708      	adds	r7, #8
 802a4ea:	46bd      	mov	sp, r7
 802a4ec:	bd80      	pop	{r7, pc}
 802a4ee:	bf00      	nop
 802a4f0:	2000b27c 	.word	0x2000b27c
 802a4f4:	2000b280 	.word	0x2000b280
 802a4f8:	2000b284 	.word	0x2000b284
 802a4fc:	08037fcc 	.word	0x08037fcc
 802a500:	08038054 	.word	0x08038054
 802a504:	0803801c 	.word	0x0803801c
 802a508:	2000b288 	.word	0x2000b288
 802a50c:	08038078 	.word	0x08038078
 802a510:	0802a215 	.word	0x0802a215
 802a514:	0803809c 	.word	0x0803809c

0802a518 <lwip_htons>:
 * @param n u16_t in host byte order
 * @return n in network byte order
 */
u16_t
lwip_htons(u16_t n)
{
 802a518:	b480      	push	{r7}
 802a51a:	b083      	sub	sp, #12
 802a51c:	af00      	add	r7, sp, #0
 802a51e:	4603      	mov	r3, r0
 802a520:	80fb      	strh	r3, [r7, #6]
  return PP_HTONS(n);
 802a522:	88fb      	ldrh	r3, [r7, #6]
 802a524:	021b      	lsls	r3, r3, #8
 802a526:	b21a      	sxth	r2, r3
 802a528:	88fb      	ldrh	r3, [r7, #6]
 802a52a:	0a1b      	lsrs	r3, r3, #8
 802a52c:	b29b      	uxth	r3, r3
 802a52e:	b21b      	sxth	r3, r3
 802a530:	4313      	orrs	r3, r2
 802a532:	b21b      	sxth	r3, r3
 802a534:	b29b      	uxth	r3, r3
}
 802a536:	4618      	mov	r0, r3
 802a538:	370c      	adds	r7, #12
 802a53a:	46bd      	mov	sp, r7
 802a53c:	f85d 7b04 	ldr.w	r7, [sp], #4
 802a540:	4770      	bx	lr

0802a542 <lwip_htonl>:
 * @param n u32_t in host byte order
 * @return n in network byte order
 */
u32_t
lwip_htonl(u32_t n)
{
 802a542:	b480      	push	{r7}
 802a544:	b083      	sub	sp, #12
 802a546:	af00      	add	r7, sp, #0
 802a548:	6078      	str	r0, [r7, #4]
  return PP_HTONL(n);
 802a54a:	687b      	ldr	r3, [r7, #4]
 802a54c:	061a      	lsls	r2, r3, #24
 802a54e:	687b      	ldr	r3, [r7, #4]
 802a550:	021b      	lsls	r3, r3, #8
 802a552:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 802a556:	431a      	orrs	r2, r3
 802a558:	687b      	ldr	r3, [r7, #4]
 802a55a:	0a1b      	lsrs	r3, r3, #8
 802a55c:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 802a560:	431a      	orrs	r2, r3
 802a562:	687b      	ldr	r3, [r7, #4]
 802a564:	0e1b      	lsrs	r3, r3, #24
 802a566:	4313      	orrs	r3, r2
}
 802a568:	4618      	mov	r0, r3
 802a56a:	370c      	adds	r7, #12
 802a56c:	46bd      	mov	sp, r7
 802a56e:	f85d 7b04 	ldr.w	r7, [sp], #4
 802a572:	4770      	bx	lr

0802a574 <lwip_init>:
 * Initialize all modules.
 * Use this in NO_SYS mode. Use tcpip_init() otherwise.
 */
void
lwip_init(void)
{
 802a574:	b580      	push	{r7, lr}
 802a576:	b082      	sub	sp, #8
 802a578:	af00      	add	r7, sp, #0
#ifndef LWIP_SKIP_CONST_CHECK
  int a = 0;
 802a57a:	2300      	movs	r3, #0
 802a57c:	607b      	str	r3, [r7, #4]
#ifndef LWIP_SKIP_PACKING_CHECK
  LWIP_ASSERT("Struct packing not implemented correctly. Check your lwIP port.", sizeof(struct packed_struct_test) == PACKED_STRUCT_TEST_EXPECTED_SIZE);
#endif

  /* Modules initialization */
  stats_init();
 802a57e:	f001 ff27 	bl	802c3d0 <stats_init>
#if !NO_SYS
  sys_init();
 802a582:	f00b fb11 	bl	8035ba8 <sys_init>
#endif /* !NO_SYS */
  mem_init();
 802a586:	f000 f8d5 	bl	802a734 <mem_init>
  memp_init();
 802a58a:	f000 fcd1 	bl	802af30 <memp_init>
  pbuf_init();
  netif_init();
 802a58e:	f000 fe0b 	bl	802b1a8 <netif_init>
#endif /* LWIP_IPV4 */
#if LWIP_RAW
  raw_init();
#endif /* LWIP_RAW */
#if LWIP_UDP
  udp_init();
 802a592:	f008 fa03 	bl	803299c <udp_init>
#endif /* LWIP_UDP */
#if LWIP_TCP
  tcp_init();
 802a596:	f001 ff23 	bl	802c3e0 <tcp_init>
#if PPP_SUPPORT
  ppp_init();
#endif

#if LWIP_TIMERS
  sys_timeouts_init();
 802a59a:	f008 f945 	bl	8032828 <sys_timeouts_init>
#endif /* LWIP_TIMERS */
}
 802a59e:	bf00      	nop
 802a5a0:	3708      	adds	r7, #8
 802a5a2:	46bd      	mov	sp, r7
 802a5a4:	bd80      	pop	{r7, pc}
	...

0802a5a8 <ptr_to_mem>:
#define mem_overflow_check_element(mem)
#endif /* MEM_OVERFLOW_CHECK */

static struct mem *
ptr_to_mem(mem_size_t ptr)
{
 802a5a8:	b480      	push	{r7}
 802a5aa:	b083      	sub	sp, #12
 802a5ac:	af00      	add	r7, sp, #0
 802a5ae:	4603      	mov	r3, r0
 802a5b0:	80fb      	strh	r3, [r7, #6]
  return (struct mem *)(void *)&ram[ptr];
 802a5b2:	4b05      	ldr	r3, [pc, #20]	; (802a5c8 <ptr_to_mem+0x20>)
 802a5b4:	681a      	ldr	r2, [r3, #0]
 802a5b6:	88fb      	ldrh	r3, [r7, #6]
 802a5b8:	4413      	add	r3, r2
}
 802a5ba:	4618      	mov	r0, r3
 802a5bc:	370c      	adds	r7, #12
 802a5be:	46bd      	mov	sp, r7
 802a5c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 802a5c4:	4770      	bx	lr
 802a5c6:	bf00      	nop
 802a5c8:	2000b8f8 	.word	0x2000b8f8

0802a5cc <mem_to_ptr>:

static mem_size_t
mem_to_ptr(void *mem)
{
 802a5cc:	b480      	push	{r7}
 802a5ce:	b083      	sub	sp, #12
 802a5d0:	af00      	add	r7, sp, #0
 802a5d2:	6078      	str	r0, [r7, #4]
  return (mem_size_t)((u8_t *)mem - ram);
 802a5d4:	4b05      	ldr	r3, [pc, #20]	; (802a5ec <mem_to_ptr+0x20>)
 802a5d6:	681b      	ldr	r3, [r3, #0]
 802a5d8:	687a      	ldr	r2, [r7, #4]
 802a5da:	1ad3      	subs	r3, r2, r3
 802a5dc:	b29b      	uxth	r3, r3
}
 802a5de:	4618      	mov	r0, r3
 802a5e0:	370c      	adds	r7, #12
 802a5e2:	46bd      	mov	sp, r7
 802a5e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 802a5e8:	4770      	bx	lr
 802a5ea:	bf00      	nop
 802a5ec:	2000b8f8 	.word	0x2000b8f8

0802a5f0 <plug_holes>:
 * This assumes access to the heap is protected by the calling function
 * already.
 */
static void
plug_holes(struct mem *mem)
{
 802a5f0:	b590      	push	{r4, r7, lr}
 802a5f2:	b085      	sub	sp, #20
 802a5f4:	af00      	add	r7, sp, #0
 802a5f6:	6078      	str	r0, [r7, #4]
  struct mem *nmem;
  struct mem *pmem;

  LWIP_ASSERT("plug_holes: mem >= ram", (u8_t *)mem >= ram);
 802a5f8:	4b45      	ldr	r3, [pc, #276]	; (802a710 <plug_holes+0x120>)
 802a5fa:	681b      	ldr	r3, [r3, #0]
 802a5fc:	687a      	ldr	r2, [r7, #4]
 802a5fe:	429a      	cmp	r2, r3
 802a600:	d206      	bcs.n	802a610 <plug_holes+0x20>
 802a602:	4b44      	ldr	r3, [pc, #272]	; (802a714 <plug_holes+0x124>)
 802a604:	f240 12df 	movw	r2, #479	; 0x1df
 802a608:	4943      	ldr	r1, [pc, #268]	; (802a718 <plug_holes+0x128>)
 802a60a:	4844      	ldr	r0, [pc, #272]	; (802a71c <plug_holes+0x12c>)
 802a60c:	f00b fdc4 	bl	8036198 <iprintf>
  LWIP_ASSERT("plug_holes: mem < ram_end", (u8_t *)mem < (u8_t *)ram_end);
 802a610:	4b43      	ldr	r3, [pc, #268]	; (802a720 <plug_holes+0x130>)
 802a612:	681b      	ldr	r3, [r3, #0]
 802a614:	687a      	ldr	r2, [r7, #4]
 802a616:	429a      	cmp	r2, r3
 802a618:	d306      	bcc.n	802a628 <plug_holes+0x38>
 802a61a:	4b3e      	ldr	r3, [pc, #248]	; (802a714 <plug_holes+0x124>)
 802a61c:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 802a620:	4940      	ldr	r1, [pc, #256]	; (802a724 <plug_holes+0x134>)
 802a622:	483e      	ldr	r0, [pc, #248]	; (802a71c <plug_holes+0x12c>)
 802a624:	f00b fdb8 	bl	8036198 <iprintf>
  LWIP_ASSERT("plug_holes: mem->used == 0", mem->used == 0);
 802a628:	687b      	ldr	r3, [r7, #4]
 802a62a:	791b      	ldrb	r3, [r3, #4]
 802a62c:	2b00      	cmp	r3, #0
 802a62e:	d006      	beq.n	802a63e <plug_holes+0x4e>
 802a630:	4b38      	ldr	r3, [pc, #224]	; (802a714 <plug_holes+0x124>)
 802a632:	f240 12e1 	movw	r2, #481	; 0x1e1
 802a636:	493c      	ldr	r1, [pc, #240]	; (802a728 <plug_holes+0x138>)
 802a638:	4838      	ldr	r0, [pc, #224]	; (802a71c <plug_holes+0x12c>)
 802a63a:	f00b fdad 	bl	8036198 <iprintf>

  /* plug hole forward */
  LWIP_ASSERT("plug_holes: mem->next <= MEM_SIZE_ALIGNED", mem->next <= MEM_SIZE_ALIGNED);
 802a63e:	687b      	ldr	r3, [r7, #4]
 802a640:	881b      	ldrh	r3, [r3, #0]
 802a642:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 802a646:	d906      	bls.n	802a656 <plug_holes+0x66>
 802a648:	4b32      	ldr	r3, [pc, #200]	; (802a714 <plug_holes+0x124>)
 802a64a:	f44f 72f2 	mov.w	r2, #484	; 0x1e4
 802a64e:	4937      	ldr	r1, [pc, #220]	; (802a72c <plug_holes+0x13c>)
 802a650:	4832      	ldr	r0, [pc, #200]	; (802a71c <plug_holes+0x12c>)
 802a652:	f00b fda1 	bl	8036198 <iprintf>

  nmem = ptr_to_mem(mem->next);
 802a656:	687b      	ldr	r3, [r7, #4]
 802a658:	881b      	ldrh	r3, [r3, #0]
 802a65a:	4618      	mov	r0, r3
 802a65c:	f7ff ffa4 	bl	802a5a8 <ptr_to_mem>
 802a660:	60f8      	str	r0, [r7, #12]
  if (mem != nmem && nmem->used == 0 && (u8_t *)nmem != (u8_t *)ram_end) {
 802a662:	687a      	ldr	r2, [r7, #4]
 802a664:	68fb      	ldr	r3, [r7, #12]
 802a666:	429a      	cmp	r2, r3
 802a668:	d024      	beq.n	802a6b4 <plug_holes+0xc4>
 802a66a:	68fb      	ldr	r3, [r7, #12]
 802a66c:	791b      	ldrb	r3, [r3, #4]
 802a66e:	2b00      	cmp	r3, #0
 802a670:	d120      	bne.n	802a6b4 <plug_holes+0xc4>
 802a672:	4b2b      	ldr	r3, [pc, #172]	; (802a720 <plug_holes+0x130>)
 802a674:	681b      	ldr	r3, [r3, #0]
 802a676:	68fa      	ldr	r2, [r7, #12]
 802a678:	429a      	cmp	r2, r3
 802a67a:	d01b      	beq.n	802a6b4 <plug_holes+0xc4>
    /* if mem->next is unused and not end of ram, combine mem and mem->next */
    if (lfree == nmem) {
 802a67c:	4b2c      	ldr	r3, [pc, #176]	; (802a730 <plug_holes+0x140>)
 802a67e:	681b      	ldr	r3, [r3, #0]
 802a680:	68fa      	ldr	r2, [r7, #12]
 802a682:	429a      	cmp	r2, r3
 802a684:	d102      	bne.n	802a68c <plug_holes+0x9c>
      lfree = mem;
 802a686:	4a2a      	ldr	r2, [pc, #168]	; (802a730 <plug_holes+0x140>)
 802a688:	687b      	ldr	r3, [r7, #4]
 802a68a:	6013      	str	r3, [r2, #0]
    }
    mem->next = nmem->next;
 802a68c:	68fb      	ldr	r3, [r7, #12]
 802a68e:	881a      	ldrh	r2, [r3, #0]
 802a690:	687b      	ldr	r3, [r7, #4]
 802a692:	801a      	strh	r2, [r3, #0]
    if (nmem->next != MEM_SIZE_ALIGNED) {
 802a694:	68fb      	ldr	r3, [r7, #12]
 802a696:	881b      	ldrh	r3, [r3, #0]
 802a698:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 802a69c:	d00a      	beq.n	802a6b4 <plug_holes+0xc4>
      ptr_to_mem(nmem->next)->prev = mem_to_ptr(mem);
 802a69e:	68fb      	ldr	r3, [r7, #12]
 802a6a0:	881b      	ldrh	r3, [r3, #0]
 802a6a2:	4618      	mov	r0, r3
 802a6a4:	f7ff ff80 	bl	802a5a8 <ptr_to_mem>
 802a6a8:	4604      	mov	r4, r0
 802a6aa:	6878      	ldr	r0, [r7, #4]
 802a6ac:	f7ff ff8e 	bl	802a5cc <mem_to_ptr>
 802a6b0:	4603      	mov	r3, r0
 802a6b2:	8063      	strh	r3, [r4, #2]
    }
  }

  /* plug hole backward */
  pmem = ptr_to_mem(mem->prev);
 802a6b4:	687b      	ldr	r3, [r7, #4]
 802a6b6:	885b      	ldrh	r3, [r3, #2]
 802a6b8:	4618      	mov	r0, r3
 802a6ba:	f7ff ff75 	bl	802a5a8 <ptr_to_mem>
 802a6be:	60b8      	str	r0, [r7, #8]
  if (pmem != mem && pmem->used == 0) {
 802a6c0:	68ba      	ldr	r2, [r7, #8]
 802a6c2:	687b      	ldr	r3, [r7, #4]
 802a6c4:	429a      	cmp	r2, r3
 802a6c6:	d01f      	beq.n	802a708 <plug_holes+0x118>
 802a6c8:	68bb      	ldr	r3, [r7, #8]
 802a6ca:	791b      	ldrb	r3, [r3, #4]
 802a6cc:	2b00      	cmp	r3, #0
 802a6ce:	d11b      	bne.n	802a708 <plug_holes+0x118>
    /* if mem->prev is unused, combine mem and mem->prev */
    if (lfree == mem) {
 802a6d0:	4b17      	ldr	r3, [pc, #92]	; (802a730 <plug_holes+0x140>)
 802a6d2:	681b      	ldr	r3, [r3, #0]
 802a6d4:	687a      	ldr	r2, [r7, #4]
 802a6d6:	429a      	cmp	r2, r3
 802a6d8:	d102      	bne.n	802a6e0 <plug_holes+0xf0>
      lfree = pmem;
 802a6da:	4a15      	ldr	r2, [pc, #84]	; (802a730 <plug_holes+0x140>)
 802a6dc:	68bb      	ldr	r3, [r7, #8]
 802a6de:	6013      	str	r3, [r2, #0]
    }
    pmem->next = mem->next;
 802a6e0:	687b      	ldr	r3, [r7, #4]
 802a6e2:	881a      	ldrh	r2, [r3, #0]
 802a6e4:	68bb      	ldr	r3, [r7, #8]
 802a6e6:	801a      	strh	r2, [r3, #0]
    if (mem->next != MEM_SIZE_ALIGNED) {
 802a6e8:	687b      	ldr	r3, [r7, #4]
 802a6ea:	881b      	ldrh	r3, [r3, #0]
 802a6ec:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 802a6f0:	d00a      	beq.n	802a708 <plug_holes+0x118>
      ptr_to_mem(mem->next)->prev = mem_to_ptr(pmem);
 802a6f2:	687b      	ldr	r3, [r7, #4]
 802a6f4:	881b      	ldrh	r3, [r3, #0]
 802a6f6:	4618      	mov	r0, r3
 802a6f8:	f7ff ff56 	bl	802a5a8 <ptr_to_mem>
 802a6fc:	4604      	mov	r4, r0
 802a6fe:	68b8      	ldr	r0, [r7, #8]
 802a700:	f7ff ff64 	bl	802a5cc <mem_to_ptr>
 802a704:	4603      	mov	r3, r0
 802a706:	8063      	strh	r3, [r4, #2]
    }
  }
}
 802a708:	bf00      	nop
 802a70a:	3714      	adds	r7, #20
 802a70c:	46bd      	mov	sp, r7
 802a70e:	bd90      	pop	{r4, r7, pc}
 802a710:	2000b8f8 	.word	0x2000b8f8
 802a714:	080380ac 	.word	0x080380ac
 802a718:	080380dc 	.word	0x080380dc
 802a71c:	080380f4 	.word	0x080380f4
 802a720:	2000b8fc 	.word	0x2000b8fc
 802a724:	0803811c 	.word	0x0803811c
 802a728:	08038138 	.word	0x08038138
 802a72c:	08038154 	.word	0x08038154
 802a730:	2000b904 	.word	0x2000b904

0802a734 <mem_init>:
/**
 * Zero the heap and initialize start, end and lowest-free
 */
void
mem_init(void)
{
 802a734:	b580      	push	{r7, lr}
 802a736:	b082      	sub	sp, #8
 802a738:	af00      	add	r7, sp, #0

  LWIP_ASSERT("Sanity check alignment",
              (SIZEOF_STRUCT_MEM & (MEM_ALIGNMENT - 1)) == 0);

  /* align the heap */
  ram = (u8_t *)LWIP_MEM_ALIGN(LWIP_RAM_HEAP_POINTER);
 802a73a:	4b21      	ldr	r3, [pc, #132]	; (802a7c0 <mem_init+0x8c>)
 802a73c:	3303      	adds	r3, #3
 802a73e:	f023 0303 	bic.w	r3, r3, #3
 802a742:	461a      	mov	r2, r3
 802a744:	4b1f      	ldr	r3, [pc, #124]	; (802a7c4 <mem_init+0x90>)
 802a746:	601a      	str	r2, [r3, #0]
  /* initialize the start of the heap */
  mem = (struct mem *)(void *)ram;
 802a748:	4b1e      	ldr	r3, [pc, #120]	; (802a7c4 <mem_init+0x90>)
 802a74a:	681b      	ldr	r3, [r3, #0]
 802a74c:	607b      	str	r3, [r7, #4]
  mem->next = MEM_SIZE_ALIGNED;
 802a74e:	687b      	ldr	r3, [r7, #4]
 802a750:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 802a754:	801a      	strh	r2, [r3, #0]
  mem->prev = 0;
 802a756:	687b      	ldr	r3, [r7, #4]
 802a758:	2200      	movs	r2, #0
 802a75a:	805a      	strh	r2, [r3, #2]
  mem->used = 0;
 802a75c:	687b      	ldr	r3, [r7, #4]
 802a75e:	2200      	movs	r2, #0
 802a760:	711a      	strb	r2, [r3, #4]
  /* initialize the end of the heap */
  ram_end = ptr_to_mem(MEM_SIZE_ALIGNED);
 802a762:	f44f 60c8 	mov.w	r0, #1600	; 0x640
 802a766:	f7ff ff1f 	bl	802a5a8 <ptr_to_mem>
 802a76a:	4603      	mov	r3, r0
 802a76c:	4a16      	ldr	r2, [pc, #88]	; (802a7c8 <mem_init+0x94>)
 802a76e:	6013      	str	r3, [r2, #0]
  ram_end->used = 1;
 802a770:	4b15      	ldr	r3, [pc, #84]	; (802a7c8 <mem_init+0x94>)
 802a772:	681b      	ldr	r3, [r3, #0]
 802a774:	2201      	movs	r2, #1
 802a776:	711a      	strb	r2, [r3, #4]
  ram_end->next = MEM_SIZE_ALIGNED;
 802a778:	4b13      	ldr	r3, [pc, #76]	; (802a7c8 <mem_init+0x94>)
 802a77a:	681b      	ldr	r3, [r3, #0]
 802a77c:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 802a780:	801a      	strh	r2, [r3, #0]
  ram_end->prev = MEM_SIZE_ALIGNED;
 802a782:	4b11      	ldr	r3, [pc, #68]	; (802a7c8 <mem_init+0x94>)
 802a784:	681b      	ldr	r3, [r3, #0]
 802a786:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 802a78a:	805a      	strh	r2, [r3, #2]
  MEM_SANITY();

  /* initialize the lowest-free pointer to the start of the heap */
  lfree = (struct mem *)(void *)ram;
 802a78c:	4b0d      	ldr	r3, [pc, #52]	; (802a7c4 <mem_init+0x90>)
 802a78e:	681b      	ldr	r3, [r3, #0]
 802a790:	4a0e      	ldr	r2, [pc, #56]	; (802a7cc <mem_init+0x98>)
 802a792:	6013      	str	r3, [r2, #0]

  MEM_STATS_AVAIL(avail, MEM_SIZE_ALIGNED);
 802a794:	4b0e      	ldr	r3, [pc, #56]	; (802a7d0 <mem_init+0x9c>)
 802a796:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 802a79a:	f8a3 20aa 	strh.w	r2, [r3, #170]	; 0xaa

  if (sys_mutex_new(&mem_mutex) != ERR_OK) {
 802a79e:	480d      	ldr	r0, [pc, #52]	; (802a7d4 <mem_init+0xa0>)
 802a7a0:	f00b fa10 	bl	8035bc4 <sys_mutex_new>
 802a7a4:	4603      	mov	r3, r0
 802a7a6:	2b00      	cmp	r3, #0
 802a7a8:	d006      	beq.n	802a7b8 <mem_init+0x84>
    LWIP_ASSERT("failed to create mem_mutex", 0);
 802a7aa:	4b0b      	ldr	r3, [pc, #44]	; (802a7d8 <mem_init+0xa4>)
 802a7ac:	f240 221f 	movw	r2, #543	; 0x21f
 802a7b0:	490a      	ldr	r1, [pc, #40]	; (802a7dc <mem_init+0xa8>)
 802a7b2:	480b      	ldr	r0, [pc, #44]	; (802a7e0 <mem_init+0xac>)
 802a7b4:	f00b fcf0 	bl	8036198 <iprintf>
  }
}
 802a7b8:	bf00      	nop
 802a7ba:	3708      	adds	r7, #8
 802a7bc:	46bd      	mov	sp, r7
 802a7be:	bd80      	pop	{r7, pc}
 802a7c0:	2000b2a4 	.word	0x2000b2a4
 802a7c4:	2000b8f8 	.word	0x2000b8f8
 802a7c8:	2000b8fc 	.word	0x2000b8fc
 802a7cc:	2000b904 	.word	0x2000b904
 802a7d0:	2000ed10 	.word	0x2000ed10
 802a7d4:	2000b900 	.word	0x2000b900
 802a7d8:	080380ac 	.word	0x080380ac
 802a7dc:	08038180 	.word	0x08038180
 802a7e0:	080380f4 	.word	0x080380f4

0802a7e4 <mem_link_valid>:
/* Check if a struct mem is correctly linked.
 * If not, double-free is a possible reason.
 */
static int
mem_link_valid(struct mem *mem)
{
 802a7e4:	b580      	push	{r7, lr}
 802a7e6:	b086      	sub	sp, #24
 802a7e8:	af00      	add	r7, sp, #0
 802a7ea:	6078      	str	r0, [r7, #4]
  struct mem *nmem, *pmem;
  mem_size_t rmem_idx;
  rmem_idx = mem_to_ptr(mem);
 802a7ec:	6878      	ldr	r0, [r7, #4]
 802a7ee:	f7ff feed 	bl	802a5cc <mem_to_ptr>
 802a7f2:	4603      	mov	r3, r0
 802a7f4:	82fb      	strh	r3, [r7, #22]
  nmem = ptr_to_mem(mem->next);
 802a7f6:	687b      	ldr	r3, [r7, #4]
 802a7f8:	881b      	ldrh	r3, [r3, #0]
 802a7fa:	4618      	mov	r0, r3
 802a7fc:	f7ff fed4 	bl	802a5a8 <ptr_to_mem>
 802a800:	6138      	str	r0, [r7, #16]
  pmem = ptr_to_mem(mem->prev);
 802a802:	687b      	ldr	r3, [r7, #4]
 802a804:	885b      	ldrh	r3, [r3, #2]
 802a806:	4618      	mov	r0, r3
 802a808:	f7ff fece 	bl	802a5a8 <ptr_to_mem>
 802a80c:	60f8      	str	r0, [r7, #12]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 802a80e:	687b      	ldr	r3, [r7, #4]
 802a810:	881b      	ldrh	r3, [r3, #0]
 802a812:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 802a816:	d818      	bhi.n	802a84a <mem_link_valid+0x66>
 802a818:	687b      	ldr	r3, [r7, #4]
 802a81a:	885b      	ldrh	r3, [r3, #2]
 802a81c:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 802a820:	d813      	bhi.n	802a84a <mem_link_valid+0x66>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 802a822:	687b      	ldr	r3, [r7, #4]
 802a824:	885b      	ldrh	r3, [r3, #2]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 802a826:	8afa      	ldrh	r2, [r7, #22]
 802a828:	429a      	cmp	r2, r3
 802a82a:	d004      	beq.n	802a836 <mem_link_valid+0x52>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 802a82c:	68fb      	ldr	r3, [r7, #12]
 802a82e:	881b      	ldrh	r3, [r3, #0]
 802a830:	8afa      	ldrh	r2, [r7, #22]
 802a832:	429a      	cmp	r2, r3
 802a834:	d109      	bne.n	802a84a <mem_link_valid+0x66>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 802a836:	4b08      	ldr	r3, [pc, #32]	; (802a858 <mem_link_valid+0x74>)
 802a838:	681b      	ldr	r3, [r3, #0]
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 802a83a:	693a      	ldr	r2, [r7, #16]
 802a83c:	429a      	cmp	r2, r3
 802a83e:	d006      	beq.n	802a84e <mem_link_valid+0x6a>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 802a840:	693b      	ldr	r3, [r7, #16]
 802a842:	885b      	ldrh	r3, [r3, #2]
 802a844:	8afa      	ldrh	r2, [r7, #22]
 802a846:	429a      	cmp	r2, r3
 802a848:	d001      	beq.n	802a84e <mem_link_valid+0x6a>
    return 0;
 802a84a:	2300      	movs	r3, #0
 802a84c:	e000      	b.n	802a850 <mem_link_valid+0x6c>
  }
  return 1;
 802a84e:	2301      	movs	r3, #1
}
 802a850:	4618      	mov	r0, r3
 802a852:	3718      	adds	r7, #24
 802a854:	46bd      	mov	sp, r7
 802a856:	bd80      	pop	{r7, pc}
 802a858:	2000b8fc 	.word	0x2000b8fc

0802a85c <mem_free>:
 * @param rmem is the data portion of a struct mem as returned by a previous
 *             call to mem_malloc()
 */
void
mem_free(void *rmem)
{
 802a85c:	b580      	push	{r7, lr}
 802a85e:	b088      	sub	sp, #32
 802a860:	af00      	add	r7, sp, #0
 802a862:	6078      	str	r0, [r7, #4]
  struct mem *mem;
  LWIP_MEM_FREE_DECL_PROTECT();

  if (rmem == NULL) {
 802a864:	687b      	ldr	r3, [r7, #4]
 802a866:	2b00      	cmp	r3, #0
 802a868:	f000 80a2 	beq.w	802a9b0 <mem_free+0x154>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("mem_free(p == NULL) was called.\n"));
    return;
  }
  if ((((mem_ptr_t)rmem) & (MEM_ALIGNMENT - 1)) != 0) {
 802a86c:	687b      	ldr	r3, [r7, #4]
 802a86e:	f003 0303 	and.w	r3, r3, #3
 802a872:	2b00      	cmp	r3, #0
 802a874:	d015      	beq.n	802a8a2 <mem_free+0x46>
    LWIP_MEM_ILLEGAL_FREE("mem_free: sanity check alignment");
 802a876:	4b50      	ldr	r3, [pc, #320]	; (802a9b8 <mem_free+0x15c>)
 802a878:	f240 2273 	movw	r2, #627	; 0x273
 802a87c:	494f      	ldr	r1, [pc, #316]	; (802a9bc <mem_free+0x160>)
 802a87e:	4850      	ldr	r0, [pc, #320]	; (802a9c0 <mem_free+0x164>)
 802a880:	f00b fc8a 	bl	8036198 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: sanity check alignment\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 802a884:	f00b fa1c 	bl	8035cc0 <sys_arch_protect>
 802a888:	60f8      	str	r0, [r7, #12]
 802a88a:	4b4e      	ldr	r3, [pc, #312]	; (802a9c4 <mem_free+0x168>)
 802a88c:	f8b3 30b0 	ldrh.w	r3, [r3, #176]	; 0xb0
 802a890:	3301      	adds	r3, #1
 802a892:	b29a      	uxth	r2, r3
 802a894:	4b4b      	ldr	r3, [pc, #300]	; (802a9c4 <mem_free+0x168>)
 802a896:	f8a3 20b0 	strh.w	r2, [r3, #176]	; 0xb0
 802a89a:	68f8      	ldr	r0, [r7, #12]
 802a89c:	f00b fa1e 	bl	8035cdc <sys_arch_unprotect>
    return;
 802a8a0:	e087      	b.n	802a9b2 <mem_free+0x156>
  }

  /* Get the corresponding struct mem: */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 802a8a2:	687b      	ldr	r3, [r7, #4]
 802a8a4:	3b08      	subs	r3, #8
 802a8a6:	61fb      	str	r3, [r7, #28]

  if ((u8_t *)mem < ram || (u8_t *)rmem + MIN_SIZE_ALIGNED > (u8_t *)ram_end) {
 802a8a8:	4b47      	ldr	r3, [pc, #284]	; (802a9c8 <mem_free+0x16c>)
 802a8aa:	681b      	ldr	r3, [r3, #0]
 802a8ac:	69fa      	ldr	r2, [r7, #28]
 802a8ae:	429a      	cmp	r2, r3
 802a8b0:	d306      	bcc.n	802a8c0 <mem_free+0x64>
 802a8b2:	687b      	ldr	r3, [r7, #4]
 802a8b4:	f103 020c 	add.w	r2, r3, #12
 802a8b8:	4b44      	ldr	r3, [pc, #272]	; (802a9cc <mem_free+0x170>)
 802a8ba:	681b      	ldr	r3, [r3, #0]
 802a8bc:	429a      	cmp	r2, r3
 802a8be:	d915      	bls.n	802a8ec <mem_free+0x90>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory");
 802a8c0:	4b3d      	ldr	r3, [pc, #244]	; (802a9b8 <mem_free+0x15c>)
 802a8c2:	f240 227f 	movw	r2, #639	; 0x27f
 802a8c6:	4942      	ldr	r1, [pc, #264]	; (802a9d0 <mem_free+0x174>)
 802a8c8:	483d      	ldr	r0, [pc, #244]	; (802a9c0 <mem_free+0x164>)
 802a8ca:	f00b fc65 	bl	8036198 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 802a8ce:	f00b f9f7 	bl	8035cc0 <sys_arch_protect>
 802a8d2:	6138      	str	r0, [r7, #16]
 802a8d4:	4b3b      	ldr	r3, [pc, #236]	; (802a9c4 <mem_free+0x168>)
 802a8d6:	f8b3 30b0 	ldrh.w	r3, [r3, #176]	; 0xb0
 802a8da:	3301      	adds	r3, #1
 802a8dc:	b29a      	uxth	r2, r3
 802a8de:	4b39      	ldr	r3, [pc, #228]	; (802a9c4 <mem_free+0x168>)
 802a8e0:	f8a3 20b0 	strh.w	r2, [r3, #176]	; 0xb0
 802a8e4:	6938      	ldr	r0, [r7, #16]
 802a8e6:	f00b f9f9 	bl	8035cdc <sys_arch_unprotect>
    return;
 802a8ea:	e062      	b.n	802a9b2 <mem_free+0x156>
  }
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
 802a8ec:	4839      	ldr	r0, [pc, #228]	; (802a9d4 <mem_free+0x178>)
 802a8ee:	f00b f9a5 	bl	8035c3c <sys_mutex_lock>
  /* mem has to be in a used state */
  if (!mem->used) {
 802a8f2:	69fb      	ldr	r3, [r7, #28]
 802a8f4:	791b      	ldrb	r3, [r3, #4]
 802a8f6:	2b00      	cmp	r3, #0
 802a8f8:	d118      	bne.n	802a92c <mem_free+0xd0>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: double free");
 802a8fa:	4b2f      	ldr	r3, [pc, #188]	; (802a9b8 <mem_free+0x15c>)
 802a8fc:	f44f 7223 	mov.w	r2, #652	; 0x28c
 802a900:	4935      	ldr	r1, [pc, #212]	; (802a9d8 <mem_free+0x17c>)
 802a902:	482f      	ldr	r0, [pc, #188]	; (802a9c0 <mem_free+0x164>)
 802a904:	f00b fc48 	bl	8036198 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
 802a908:	4832      	ldr	r0, [pc, #200]	; (802a9d4 <mem_free+0x178>)
 802a90a:	f00b f9a6 	bl	8035c5a <sys_mutex_unlock>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 802a90e:	f00b f9d7 	bl	8035cc0 <sys_arch_protect>
 802a912:	6178      	str	r0, [r7, #20]
 802a914:	4b2b      	ldr	r3, [pc, #172]	; (802a9c4 <mem_free+0x168>)
 802a916:	f8b3 30b0 	ldrh.w	r3, [r3, #176]	; 0xb0
 802a91a:	3301      	adds	r3, #1
 802a91c:	b29a      	uxth	r2, r3
 802a91e:	4b29      	ldr	r3, [pc, #164]	; (802a9c4 <mem_free+0x168>)
 802a920:	f8a3 20b0 	strh.w	r2, [r3, #176]	; 0xb0
 802a924:	6978      	ldr	r0, [r7, #20]
 802a926:	f00b f9d9 	bl	8035cdc <sys_arch_unprotect>
    return;
 802a92a:	e042      	b.n	802a9b2 <mem_free+0x156>
  }

  if (!mem_link_valid(mem)) {
 802a92c:	69f8      	ldr	r0, [r7, #28]
 802a92e:	f7ff ff59 	bl	802a7e4 <mem_link_valid>
 802a932:	4603      	mov	r3, r0
 802a934:	2b00      	cmp	r3, #0
 802a936:	d118      	bne.n	802a96a <mem_free+0x10e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: non-linked: double free");
 802a938:	4b1f      	ldr	r3, [pc, #124]	; (802a9b8 <mem_free+0x15c>)
 802a93a:	f240 2295 	movw	r2, #661	; 0x295
 802a93e:	4927      	ldr	r1, [pc, #156]	; (802a9dc <mem_free+0x180>)
 802a940:	481f      	ldr	r0, [pc, #124]	; (802a9c0 <mem_free+0x164>)
 802a942:	f00b fc29 	bl	8036198 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
 802a946:	4823      	ldr	r0, [pc, #140]	; (802a9d4 <mem_free+0x178>)
 802a948:	f00b f987 	bl	8035c5a <sys_mutex_unlock>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: non-linked: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 802a94c:	f00b f9b8 	bl	8035cc0 <sys_arch_protect>
 802a950:	61b8      	str	r0, [r7, #24]
 802a952:	4b1c      	ldr	r3, [pc, #112]	; (802a9c4 <mem_free+0x168>)
 802a954:	f8b3 30b0 	ldrh.w	r3, [r3, #176]	; 0xb0
 802a958:	3301      	adds	r3, #1
 802a95a:	b29a      	uxth	r2, r3
 802a95c:	4b19      	ldr	r3, [pc, #100]	; (802a9c4 <mem_free+0x168>)
 802a95e:	f8a3 20b0 	strh.w	r2, [r3, #176]	; 0xb0
 802a962:	69b8      	ldr	r0, [r7, #24]
 802a964:	f00b f9ba 	bl	8035cdc <sys_arch_unprotect>
    return;
 802a968:	e023      	b.n	802a9b2 <mem_free+0x156>
  }

  /* mem is now unused. */
  mem->used = 0;
 802a96a:	69fb      	ldr	r3, [r7, #28]
 802a96c:	2200      	movs	r2, #0
 802a96e:	711a      	strb	r2, [r3, #4]

  if (mem < lfree) {
 802a970:	4b1b      	ldr	r3, [pc, #108]	; (802a9e0 <mem_free+0x184>)
 802a972:	681b      	ldr	r3, [r3, #0]
 802a974:	69fa      	ldr	r2, [r7, #28]
 802a976:	429a      	cmp	r2, r3
 802a978:	d202      	bcs.n	802a980 <mem_free+0x124>
    /* the newly freed struct is now the lowest */
    lfree = mem;
 802a97a:	4a19      	ldr	r2, [pc, #100]	; (802a9e0 <mem_free+0x184>)
 802a97c:	69fb      	ldr	r3, [r7, #28]
 802a97e:	6013      	str	r3, [r2, #0]
  }

  MEM_STATS_DEC_USED(used, mem->next - (mem_size_t)(((u8_t *)mem - ram)));
 802a980:	4b10      	ldr	r3, [pc, #64]	; (802a9c4 <mem_free+0x168>)
 802a982:	f8b3 20ac 	ldrh.w	r2, [r3, #172]	; 0xac
 802a986:	4b10      	ldr	r3, [pc, #64]	; (802a9c8 <mem_free+0x16c>)
 802a988:	681b      	ldr	r3, [r3, #0]
 802a98a:	69f9      	ldr	r1, [r7, #28]
 802a98c:	1acb      	subs	r3, r1, r3
 802a98e:	b299      	uxth	r1, r3
 802a990:	69fb      	ldr	r3, [r7, #28]
 802a992:	881b      	ldrh	r3, [r3, #0]
 802a994:	1acb      	subs	r3, r1, r3
 802a996:	b29b      	uxth	r3, r3
 802a998:	4413      	add	r3, r2
 802a99a:	b29a      	uxth	r2, r3
 802a99c:	4b09      	ldr	r3, [pc, #36]	; (802a9c4 <mem_free+0x168>)
 802a99e:	f8a3 20ac 	strh.w	r2, [r3, #172]	; 0xac

  /* finally, see if prev or next are free also */
  plug_holes(mem);
 802a9a2:	69f8      	ldr	r0, [r7, #28]
 802a9a4:	f7ff fe24 	bl	802a5f0 <plug_holes>
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
 802a9a8:	480a      	ldr	r0, [pc, #40]	; (802a9d4 <mem_free+0x178>)
 802a9aa:	f00b f956 	bl	8035c5a <sys_mutex_unlock>
 802a9ae:	e000      	b.n	802a9b2 <mem_free+0x156>
    return;
 802a9b0:	bf00      	nop
}
 802a9b2:	3720      	adds	r7, #32
 802a9b4:	46bd      	mov	sp, r7
 802a9b6:	bd80      	pop	{r7, pc}
 802a9b8:	080380ac 	.word	0x080380ac
 802a9bc:	0803819c 	.word	0x0803819c
 802a9c0:	080380f4 	.word	0x080380f4
 802a9c4:	2000ed10 	.word	0x2000ed10
 802a9c8:	2000b8f8 	.word	0x2000b8f8
 802a9cc:	2000b8fc 	.word	0x2000b8fc
 802a9d0:	080381c0 	.word	0x080381c0
 802a9d4:	2000b900 	.word	0x2000b900
 802a9d8:	080381dc 	.word	0x080381dc
 802a9dc:	08038204 	.word	0x08038204
 802a9e0:	2000b904 	.word	0x2000b904

0802a9e4 <mem_trim>:
 *         or NULL if newsize is > old size, in which case rmem is NOT touched
 *         or freed!
 */
void *
mem_trim(void *rmem, mem_size_t new_size)
{
 802a9e4:	b580      	push	{r7, lr}
 802a9e6:	b088      	sub	sp, #32
 802a9e8:	af00      	add	r7, sp, #0
 802a9ea:	6078      	str	r0, [r7, #4]
 802a9ec:	460b      	mov	r3, r1
 802a9ee:	807b      	strh	r3, [r7, #2]
  /* use the FREE_PROTECT here: it protects with sem OR SYS_ARCH_PROTECT */
  LWIP_MEM_FREE_DECL_PROTECT();

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  newsize = (mem_size_t)LWIP_MEM_ALIGN_SIZE(new_size);
 802a9f0:	887b      	ldrh	r3, [r7, #2]
 802a9f2:	3303      	adds	r3, #3
 802a9f4:	b29b      	uxth	r3, r3
 802a9f6:	f023 0303 	bic.w	r3, r3, #3
 802a9fa:	83fb      	strh	r3, [r7, #30]
  if (newsize < MIN_SIZE_ALIGNED) {
 802a9fc:	8bfb      	ldrh	r3, [r7, #30]
 802a9fe:	2b0b      	cmp	r3, #11
 802aa00:	d801      	bhi.n	802aa06 <mem_trim+0x22>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    newsize = MIN_SIZE_ALIGNED;
 802aa02:	230c      	movs	r3, #12
 802aa04:	83fb      	strh	r3, [r7, #30]
  }
#if MEM_OVERFLOW_CHECK
  newsize += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((newsize > MEM_SIZE_ALIGNED) || (newsize < new_size)) {
 802aa06:	8bfb      	ldrh	r3, [r7, #30]
 802aa08:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 802aa0c:	d803      	bhi.n	802aa16 <mem_trim+0x32>
 802aa0e:	8bfa      	ldrh	r2, [r7, #30]
 802aa10:	887b      	ldrh	r3, [r7, #2]
 802aa12:	429a      	cmp	r2, r3
 802aa14:	d201      	bcs.n	802aa1a <mem_trim+0x36>
    return NULL;
 802aa16:	2300      	movs	r3, #0
 802aa18:	e0f8      	b.n	802ac0c <mem_trim+0x228>
  }

  LWIP_ASSERT("mem_trim: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
 802aa1a:	4b7e      	ldr	r3, [pc, #504]	; (802ac14 <mem_trim+0x230>)
 802aa1c:	681b      	ldr	r3, [r3, #0]
 802aa1e:	687a      	ldr	r2, [r7, #4]
 802aa20:	429a      	cmp	r2, r3
 802aa22:	d304      	bcc.n	802aa2e <mem_trim+0x4a>
 802aa24:	4b7c      	ldr	r3, [pc, #496]	; (802ac18 <mem_trim+0x234>)
 802aa26:	681b      	ldr	r3, [r3, #0]
 802aa28:	687a      	ldr	r2, [r7, #4]
 802aa2a:	429a      	cmp	r2, r3
 802aa2c:	d306      	bcc.n	802aa3c <mem_trim+0x58>
 802aa2e:	4b7b      	ldr	r3, [pc, #492]	; (802ac1c <mem_trim+0x238>)
 802aa30:	f240 22d1 	movw	r2, #721	; 0x2d1
 802aa34:	497a      	ldr	r1, [pc, #488]	; (802ac20 <mem_trim+0x23c>)
 802aa36:	487b      	ldr	r0, [pc, #492]	; (802ac24 <mem_trim+0x240>)
 802aa38:	f00b fbae 	bl	8036198 <iprintf>
              (u8_t *)rmem < (u8_t *)ram_end);

  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
 802aa3c:	4b75      	ldr	r3, [pc, #468]	; (802ac14 <mem_trim+0x230>)
 802aa3e:	681b      	ldr	r3, [r3, #0]
 802aa40:	687a      	ldr	r2, [r7, #4]
 802aa42:	429a      	cmp	r2, r3
 802aa44:	d304      	bcc.n	802aa50 <mem_trim+0x6c>
 802aa46:	4b74      	ldr	r3, [pc, #464]	; (802ac18 <mem_trim+0x234>)
 802aa48:	681b      	ldr	r3, [r3, #0]
 802aa4a:	687a      	ldr	r2, [r7, #4]
 802aa4c:	429a      	cmp	r2, r3
 802aa4e:	d30f      	bcc.n	802aa70 <mem_trim+0x8c>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_trim: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 802aa50:	f00b f936 	bl	8035cc0 <sys_arch_protect>
 802aa54:	60b8      	str	r0, [r7, #8]
 802aa56:	4b74      	ldr	r3, [pc, #464]	; (802ac28 <mem_trim+0x244>)
 802aa58:	f8b3 30b0 	ldrh.w	r3, [r3, #176]	; 0xb0
 802aa5c:	3301      	adds	r3, #1
 802aa5e:	b29a      	uxth	r2, r3
 802aa60:	4b71      	ldr	r3, [pc, #452]	; (802ac28 <mem_trim+0x244>)
 802aa62:	f8a3 20b0 	strh.w	r2, [r3, #176]	; 0xb0
 802aa66:	68b8      	ldr	r0, [r7, #8]
 802aa68:	f00b f938 	bl	8035cdc <sys_arch_unprotect>
    return rmem;
 802aa6c:	687b      	ldr	r3, [r7, #4]
 802aa6e:	e0cd      	b.n	802ac0c <mem_trim+0x228>
  }
  /* Get the corresponding struct mem ... */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 802aa70:	687b      	ldr	r3, [r7, #4]
 802aa72:	3b08      	subs	r3, #8
 802aa74:	61bb      	str	r3, [r7, #24]
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* ... and its offset pointer */
  ptr = mem_to_ptr(mem);
 802aa76:	69b8      	ldr	r0, [r7, #24]
 802aa78:	f7ff fda8 	bl	802a5cc <mem_to_ptr>
 802aa7c:	4603      	mov	r3, r0
 802aa7e:	82fb      	strh	r3, [r7, #22]

  size = (mem_size_t)((mem_size_t)(mem->next - ptr) - (SIZEOF_STRUCT_MEM + MEM_SANITY_OVERHEAD));
 802aa80:	69bb      	ldr	r3, [r7, #24]
 802aa82:	881a      	ldrh	r2, [r3, #0]
 802aa84:	8afb      	ldrh	r3, [r7, #22]
 802aa86:	1ad3      	subs	r3, r2, r3
 802aa88:	b29b      	uxth	r3, r3
 802aa8a:	3b08      	subs	r3, #8
 802aa8c:	82bb      	strh	r3, [r7, #20]
  LWIP_ASSERT("mem_trim can only shrink memory", newsize <= size);
 802aa8e:	8bfa      	ldrh	r2, [r7, #30]
 802aa90:	8abb      	ldrh	r3, [r7, #20]
 802aa92:	429a      	cmp	r2, r3
 802aa94:	d906      	bls.n	802aaa4 <mem_trim+0xc0>
 802aa96:	4b61      	ldr	r3, [pc, #388]	; (802ac1c <mem_trim+0x238>)
 802aa98:	f44f 7239 	mov.w	r2, #740	; 0x2e4
 802aa9c:	4963      	ldr	r1, [pc, #396]	; (802ac2c <mem_trim+0x248>)
 802aa9e:	4861      	ldr	r0, [pc, #388]	; (802ac24 <mem_trim+0x240>)
 802aaa0:	f00b fb7a 	bl	8036198 <iprintf>
  if (newsize > size) {
 802aaa4:	8bfa      	ldrh	r2, [r7, #30]
 802aaa6:	8abb      	ldrh	r3, [r7, #20]
 802aaa8:	429a      	cmp	r2, r3
 802aaaa:	d901      	bls.n	802aab0 <mem_trim+0xcc>
    /* not supported */
    return NULL;
 802aaac:	2300      	movs	r3, #0
 802aaae:	e0ad      	b.n	802ac0c <mem_trim+0x228>
  }
  if (newsize == size) {
 802aab0:	8bfa      	ldrh	r2, [r7, #30]
 802aab2:	8abb      	ldrh	r3, [r7, #20]
 802aab4:	429a      	cmp	r2, r3
 802aab6:	d101      	bne.n	802aabc <mem_trim+0xd8>
    /* No change in size, simply return */
    return rmem;
 802aab8:	687b      	ldr	r3, [r7, #4]
 802aaba:	e0a7      	b.n	802ac0c <mem_trim+0x228>
  }

  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
 802aabc:	485c      	ldr	r0, [pc, #368]	; (802ac30 <mem_trim+0x24c>)
 802aabe:	f00b f8bd 	bl	8035c3c <sys_mutex_lock>

  mem2 = ptr_to_mem(mem->next);
 802aac2:	69bb      	ldr	r3, [r7, #24]
 802aac4:	881b      	ldrh	r3, [r3, #0]
 802aac6:	4618      	mov	r0, r3
 802aac8:	f7ff fd6e 	bl	802a5a8 <ptr_to_mem>
 802aacc:	6138      	str	r0, [r7, #16]
  if (mem2->used == 0) {
 802aace:	693b      	ldr	r3, [r7, #16]
 802aad0:	791b      	ldrb	r3, [r3, #4]
 802aad2:	2b00      	cmp	r3, #0
 802aad4:	d14b      	bne.n	802ab6e <mem_trim+0x18a>
    /* The next struct is unused, we can simply move it at little */
    mem_size_t next;
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 802aad6:	69bb      	ldr	r3, [r7, #24]
 802aad8:	881b      	ldrh	r3, [r3, #0]
 802aada:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 802aade:	d106      	bne.n	802aaee <mem_trim+0x10a>
 802aae0:	4b4e      	ldr	r3, [pc, #312]	; (802ac1c <mem_trim+0x238>)
 802aae2:	f240 22f5 	movw	r2, #757	; 0x2f5
 802aae6:	4953      	ldr	r1, [pc, #332]	; (802ac34 <mem_trim+0x250>)
 802aae8:	484e      	ldr	r0, [pc, #312]	; (802ac24 <mem_trim+0x240>)
 802aaea:	f00b fb55 	bl	8036198 <iprintf>
    /* remember the old next pointer */
    next = mem2->next;
 802aaee:	693b      	ldr	r3, [r7, #16]
 802aaf0:	881b      	ldrh	r3, [r3, #0]
 802aaf2:	81bb      	strh	r3, [r7, #12]
    /* create new struct mem which is moved directly after the shrinked mem */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 802aaf4:	8afa      	ldrh	r2, [r7, #22]
 802aaf6:	8bfb      	ldrh	r3, [r7, #30]
 802aaf8:	4413      	add	r3, r2
 802aafa:	b29b      	uxth	r3, r3
 802aafc:	3308      	adds	r3, #8
 802aafe:	81fb      	strh	r3, [r7, #14]
    if (lfree == mem2) {
 802ab00:	4b4d      	ldr	r3, [pc, #308]	; (802ac38 <mem_trim+0x254>)
 802ab02:	681b      	ldr	r3, [r3, #0]
 802ab04:	693a      	ldr	r2, [r7, #16]
 802ab06:	429a      	cmp	r2, r3
 802ab08:	d106      	bne.n	802ab18 <mem_trim+0x134>
      lfree = ptr_to_mem(ptr2);
 802ab0a:	89fb      	ldrh	r3, [r7, #14]
 802ab0c:	4618      	mov	r0, r3
 802ab0e:	f7ff fd4b 	bl	802a5a8 <ptr_to_mem>
 802ab12:	4603      	mov	r3, r0
 802ab14:	4a48      	ldr	r2, [pc, #288]	; (802ac38 <mem_trim+0x254>)
 802ab16:	6013      	str	r3, [r2, #0]
    }
    mem2 = ptr_to_mem(ptr2);
 802ab18:	89fb      	ldrh	r3, [r7, #14]
 802ab1a:	4618      	mov	r0, r3
 802ab1c:	f7ff fd44 	bl	802a5a8 <ptr_to_mem>
 802ab20:	6138      	str	r0, [r7, #16]
    mem2->used = 0;
 802ab22:	693b      	ldr	r3, [r7, #16]
 802ab24:	2200      	movs	r2, #0
 802ab26:	711a      	strb	r2, [r3, #4]
    /* restore the next pointer */
    mem2->next = next;
 802ab28:	693b      	ldr	r3, [r7, #16]
 802ab2a:	89ba      	ldrh	r2, [r7, #12]
 802ab2c:	801a      	strh	r2, [r3, #0]
    /* link it back to mem */
    mem2->prev = ptr;
 802ab2e:	693b      	ldr	r3, [r7, #16]
 802ab30:	8afa      	ldrh	r2, [r7, #22]
 802ab32:	805a      	strh	r2, [r3, #2]
    /* link mem to it */
    mem->next = ptr2;
 802ab34:	69bb      	ldr	r3, [r7, #24]
 802ab36:	89fa      	ldrh	r2, [r7, #14]
 802ab38:	801a      	strh	r2, [r3, #0]
    /* last thing to restore linked list: as we have moved mem2,
     * let 'mem2->next->prev' point to mem2 again. but only if mem2->next is not
     * the end of the heap */
    if (mem2->next != MEM_SIZE_ALIGNED) {
 802ab3a:	693b      	ldr	r3, [r7, #16]
 802ab3c:	881b      	ldrh	r3, [r3, #0]
 802ab3e:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 802ab42:	d007      	beq.n	802ab54 <mem_trim+0x170>
      ptr_to_mem(mem2->next)->prev = ptr2;
 802ab44:	693b      	ldr	r3, [r7, #16]
 802ab46:	881b      	ldrh	r3, [r3, #0]
 802ab48:	4618      	mov	r0, r3
 802ab4a:	f7ff fd2d 	bl	802a5a8 <ptr_to_mem>
 802ab4e:	4602      	mov	r2, r0
 802ab50:	89fb      	ldrh	r3, [r7, #14]
 802ab52:	8053      	strh	r3, [r2, #2]
    }
    MEM_STATS_DEC_USED(used, (size - newsize));
 802ab54:	4b34      	ldr	r3, [pc, #208]	; (802ac28 <mem_trim+0x244>)
 802ab56:	f8b3 20ac 	ldrh.w	r2, [r3, #172]	; 0xac
 802ab5a:	8bf9      	ldrh	r1, [r7, #30]
 802ab5c:	8abb      	ldrh	r3, [r7, #20]
 802ab5e:	1acb      	subs	r3, r1, r3
 802ab60:	b29b      	uxth	r3, r3
 802ab62:	4413      	add	r3, r2
 802ab64:	b29a      	uxth	r2, r3
 802ab66:	4b30      	ldr	r3, [pc, #192]	; (802ac28 <mem_trim+0x244>)
 802ab68:	f8a3 20ac 	strh.w	r2, [r3, #172]	; 0xac
 802ab6c:	e04a      	b.n	802ac04 <mem_trim+0x220>
    /* no need to plug holes, we've already done that */
  } else if (newsize + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED <= size) {
 802ab6e:	8bfb      	ldrh	r3, [r7, #30]
 802ab70:	f103 0214 	add.w	r2, r3, #20
 802ab74:	8abb      	ldrh	r3, [r7, #20]
 802ab76:	429a      	cmp	r2, r3
 802ab78:	d844      	bhi.n	802ac04 <mem_trim+0x220>
     * Old size ('size') must be big enough to contain at least 'newsize' plus a struct mem
     * ('SIZEOF_STRUCT_MEM') with some data ('MIN_SIZE_ALIGNED').
     * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
     *       region that couldn't hold data, but when mem->next gets freed,
     *       the 2 regions would be combined, resulting in more free memory */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 802ab7a:	8afa      	ldrh	r2, [r7, #22]
 802ab7c:	8bfb      	ldrh	r3, [r7, #30]
 802ab7e:	4413      	add	r3, r2
 802ab80:	b29b      	uxth	r3, r3
 802ab82:	3308      	adds	r3, #8
 802ab84:	81fb      	strh	r3, [r7, #14]
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 802ab86:	69bb      	ldr	r3, [r7, #24]
 802ab88:	881b      	ldrh	r3, [r3, #0]
 802ab8a:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 802ab8e:	d106      	bne.n	802ab9e <mem_trim+0x1ba>
 802ab90:	4b22      	ldr	r3, [pc, #136]	; (802ac1c <mem_trim+0x238>)
 802ab92:	f240 3216 	movw	r2, #790	; 0x316
 802ab96:	4927      	ldr	r1, [pc, #156]	; (802ac34 <mem_trim+0x250>)
 802ab98:	4822      	ldr	r0, [pc, #136]	; (802ac24 <mem_trim+0x240>)
 802ab9a:	f00b fafd 	bl	8036198 <iprintf>
    mem2 = ptr_to_mem(ptr2);
 802ab9e:	89fb      	ldrh	r3, [r7, #14]
 802aba0:	4618      	mov	r0, r3
 802aba2:	f7ff fd01 	bl	802a5a8 <ptr_to_mem>
 802aba6:	6138      	str	r0, [r7, #16]
    if (mem2 < lfree) {
 802aba8:	4b23      	ldr	r3, [pc, #140]	; (802ac38 <mem_trim+0x254>)
 802abaa:	681b      	ldr	r3, [r3, #0]
 802abac:	693a      	ldr	r2, [r7, #16]
 802abae:	429a      	cmp	r2, r3
 802abb0:	d202      	bcs.n	802abb8 <mem_trim+0x1d4>
      lfree = mem2;
 802abb2:	4a21      	ldr	r2, [pc, #132]	; (802ac38 <mem_trim+0x254>)
 802abb4:	693b      	ldr	r3, [r7, #16]
 802abb6:	6013      	str	r3, [r2, #0]
    }
    mem2->used = 0;
 802abb8:	693b      	ldr	r3, [r7, #16]
 802abba:	2200      	movs	r2, #0
 802abbc:	711a      	strb	r2, [r3, #4]
    mem2->next = mem->next;
 802abbe:	69bb      	ldr	r3, [r7, #24]
 802abc0:	881a      	ldrh	r2, [r3, #0]
 802abc2:	693b      	ldr	r3, [r7, #16]
 802abc4:	801a      	strh	r2, [r3, #0]
    mem2->prev = ptr;
 802abc6:	693b      	ldr	r3, [r7, #16]
 802abc8:	8afa      	ldrh	r2, [r7, #22]
 802abca:	805a      	strh	r2, [r3, #2]
    mem->next = ptr2;
 802abcc:	69bb      	ldr	r3, [r7, #24]
 802abce:	89fa      	ldrh	r2, [r7, #14]
 802abd0:	801a      	strh	r2, [r3, #0]
    if (mem2->next != MEM_SIZE_ALIGNED) {
 802abd2:	693b      	ldr	r3, [r7, #16]
 802abd4:	881b      	ldrh	r3, [r3, #0]
 802abd6:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 802abda:	d007      	beq.n	802abec <mem_trim+0x208>
      ptr_to_mem(mem2->next)->prev = ptr2;
 802abdc:	693b      	ldr	r3, [r7, #16]
 802abde:	881b      	ldrh	r3, [r3, #0]
 802abe0:	4618      	mov	r0, r3
 802abe2:	f7ff fce1 	bl	802a5a8 <ptr_to_mem>
 802abe6:	4602      	mov	r2, r0
 802abe8:	89fb      	ldrh	r3, [r7, #14]
 802abea:	8053      	strh	r3, [r2, #2]
    }
    MEM_STATS_DEC_USED(used, (size - newsize));
 802abec:	4b0e      	ldr	r3, [pc, #56]	; (802ac28 <mem_trim+0x244>)
 802abee:	f8b3 20ac 	ldrh.w	r2, [r3, #172]	; 0xac
 802abf2:	8bf9      	ldrh	r1, [r7, #30]
 802abf4:	8abb      	ldrh	r3, [r7, #20]
 802abf6:	1acb      	subs	r3, r1, r3
 802abf8:	b29b      	uxth	r3, r3
 802abfa:	4413      	add	r3, r2
 802abfc:	b29a      	uxth	r2, r3
 802abfe:	4b0a      	ldr	r3, [pc, #40]	; (802ac28 <mem_trim+0x244>)
 802ac00:	f8a3 20ac 	strh.w	r2, [r3, #172]	; 0xac
#endif
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
 802ac04:	480a      	ldr	r0, [pc, #40]	; (802ac30 <mem_trim+0x24c>)
 802ac06:	f00b f828 	bl	8035c5a <sys_mutex_unlock>
  return rmem;
 802ac0a:	687b      	ldr	r3, [r7, #4]
}
 802ac0c:	4618      	mov	r0, r3
 802ac0e:	3720      	adds	r7, #32
 802ac10:	46bd      	mov	sp, r7
 802ac12:	bd80      	pop	{r7, pc}
 802ac14:	2000b8f8 	.word	0x2000b8f8
 802ac18:	2000b8fc 	.word	0x2000b8fc
 802ac1c:	080380ac 	.word	0x080380ac
 802ac20:	08038238 	.word	0x08038238
 802ac24:	080380f4 	.word	0x080380f4
 802ac28:	2000ed10 	.word	0x2000ed10
 802ac2c:	08038250 	.word	0x08038250
 802ac30:	2000b900 	.word	0x2000b900
 802ac34:	08038270 	.word	0x08038270
 802ac38:	2000b904 	.word	0x2000b904

0802ac3c <mem_malloc>:
 *
 * Note that the returned value will always be aligned (as defined by MEM_ALIGNMENT).
 */
void *
mem_malloc(mem_size_t size_in)
{
 802ac3c:	b590      	push	{r4, r7, lr}
 802ac3e:	b089      	sub	sp, #36	; 0x24
 802ac40:	af00      	add	r7, sp, #0
 802ac42:	4603      	mov	r3, r0
 802ac44:	80fb      	strh	r3, [r7, #6]
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  u8_t local_mem_free_count = 0;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_ALLOC_DECL_PROTECT();

  if (size_in == 0) {
 802ac46:	88fb      	ldrh	r3, [r7, #6]
 802ac48:	2b00      	cmp	r3, #0
 802ac4a:	d101      	bne.n	802ac50 <mem_malloc+0x14>
    return NULL;
 802ac4c:	2300      	movs	r3, #0
 802ac4e:	e121      	b.n	802ae94 <mem_malloc+0x258>
  }

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  size = (mem_size_t)LWIP_MEM_ALIGN_SIZE(size_in);
 802ac50:	88fb      	ldrh	r3, [r7, #6]
 802ac52:	3303      	adds	r3, #3
 802ac54:	b29b      	uxth	r3, r3
 802ac56:	f023 0303 	bic.w	r3, r3, #3
 802ac5a:	83bb      	strh	r3, [r7, #28]
  if (size < MIN_SIZE_ALIGNED) {
 802ac5c:	8bbb      	ldrh	r3, [r7, #28]
 802ac5e:	2b0b      	cmp	r3, #11
 802ac60:	d801      	bhi.n	802ac66 <mem_malloc+0x2a>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    size = MIN_SIZE_ALIGNED;
 802ac62:	230c      	movs	r3, #12
 802ac64:	83bb      	strh	r3, [r7, #28]
  }
#if MEM_OVERFLOW_CHECK
  size += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((size > MEM_SIZE_ALIGNED) || (size < size_in)) {
 802ac66:	8bbb      	ldrh	r3, [r7, #28]
 802ac68:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 802ac6c:	d803      	bhi.n	802ac76 <mem_malloc+0x3a>
 802ac6e:	8bba      	ldrh	r2, [r7, #28]
 802ac70:	88fb      	ldrh	r3, [r7, #6]
 802ac72:	429a      	cmp	r2, r3
 802ac74:	d201      	bcs.n	802ac7a <mem_malloc+0x3e>
    return NULL;
 802ac76:	2300      	movs	r3, #0
 802ac78:	e10c      	b.n	802ae94 <mem_malloc+0x258>
  }

  /* protect the heap from concurrent access */
  sys_mutex_lock(&mem_mutex);
 802ac7a:	4888      	ldr	r0, [pc, #544]	; (802ae9c <mem_malloc+0x260>)
 802ac7c:	f00a ffde 	bl	8035c3c <sys_mutex_lock>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

    /* Scan through the heap searching for a free block that is big enough,
     * beginning with the lowest free block.
     */
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 802ac80:	4b87      	ldr	r3, [pc, #540]	; (802aea0 <mem_malloc+0x264>)
 802ac82:	681b      	ldr	r3, [r3, #0]
 802ac84:	4618      	mov	r0, r3
 802ac86:	f7ff fca1 	bl	802a5cc <mem_to_ptr>
 802ac8a:	4603      	mov	r3, r0
 802ac8c:	83fb      	strh	r3, [r7, #30]
 802ac8e:	e0ee      	b.n	802ae6e <mem_malloc+0x232>
         ptr = ptr_to_mem(ptr)->next) {
      mem = ptr_to_mem(ptr);
 802ac90:	8bfb      	ldrh	r3, [r7, #30]
 802ac92:	4618      	mov	r0, r3
 802ac94:	f7ff fc88 	bl	802a5a8 <ptr_to_mem>
 802ac98:	6178      	str	r0, [r7, #20]
        local_mem_free_count = 1;
        break;
      }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

      if ((!mem->used) &&
 802ac9a:	697b      	ldr	r3, [r7, #20]
 802ac9c:	791b      	ldrb	r3, [r3, #4]
 802ac9e:	2b00      	cmp	r3, #0
 802aca0:	f040 80de 	bne.w	802ae60 <mem_malloc+0x224>
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
 802aca4:	697b      	ldr	r3, [r7, #20]
 802aca6:	881b      	ldrh	r3, [r3, #0]
 802aca8:	461a      	mov	r2, r3
 802acaa:	8bfb      	ldrh	r3, [r7, #30]
 802acac:	1ad3      	subs	r3, r2, r3
 802acae:	f1a3 0208 	sub.w	r2, r3, #8
 802acb2:	8bbb      	ldrh	r3, [r7, #28]
      if ((!mem->used) &&
 802acb4:	429a      	cmp	r2, r3
 802acb6:	f0c0 80d3 	bcc.w	802ae60 <mem_malloc+0x224>
        /* mem is not used and at least perfect fit is possible:
         * mem->next - (ptr + SIZEOF_STRUCT_MEM) gives us the 'user data size' of mem */

        if (mem->next - (ptr + SIZEOF_STRUCT_MEM) >= (size + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED)) {
 802acba:	697b      	ldr	r3, [r7, #20]
 802acbc:	881b      	ldrh	r3, [r3, #0]
 802acbe:	461a      	mov	r2, r3
 802acc0:	8bfb      	ldrh	r3, [r7, #30]
 802acc2:	1ad3      	subs	r3, r2, r3
 802acc4:	f1a3 0208 	sub.w	r2, r3, #8
 802acc8:	8bbb      	ldrh	r3, [r7, #28]
 802acca:	3314      	adds	r3, #20
 802accc:	429a      	cmp	r2, r3
 802acce:	d34c      	bcc.n	802ad6a <mem_malloc+0x12e>
           * struct mem would fit in but no data between mem2 and mem2->next
           * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
           *       region that couldn't hold data, but when mem->next gets freed,
           *       the 2 regions would be combined, resulting in more free memory
           */
          ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + size);
 802acd0:	8bfa      	ldrh	r2, [r7, #30]
 802acd2:	8bbb      	ldrh	r3, [r7, #28]
 802acd4:	4413      	add	r3, r2
 802acd6:	b29b      	uxth	r3, r3
 802acd8:	3308      	adds	r3, #8
 802acda:	827b      	strh	r3, [r7, #18]
          LWIP_ASSERT("invalid next ptr",ptr2 != MEM_SIZE_ALIGNED);
 802acdc:	8a7b      	ldrh	r3, [r7, #18]
 802acde:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 802ace2:	d106      	bne.n	802acf2 <mem_malloc+0xb6>
 802ace4:	4b6f      	ldr	r3, [pc, #444]	; (802aea4 <mem_malloc+0x268>)
 802ace6:	f240 3287 	movw	r2, #903	; 0x387
 802acea:	496f      	ldr	r1, [pc, #444]	; (802aea8 <mem_malloc+0x26c>)
 802acec:	486f      	ldr	r0, [pc, #444]	; (802aeac <mem_malloc+0x270>)
 802acee:	f00b fa53 	bl	8036198 <iprintf>
          /* create mem2 struct */
          mem2 = ptr_to_mem(ptr2);
 802acf2:	8a7b      	ldrh	r3, [r7, #18]
 802acf4:	4618      	mov	r0, r3
 802acf6:	f7ff fc57 	bl	802a5a8 <ptr_to_mem>
 802acfa:	60f8      	str	r0, [r7, #12]
          mem2->used = 0;
 802acfc:	68fb      	ldr	r3, [r7, #12]
 802acfe:	2200      	movs	r2, #0
 802ad00:	711a      	strb	r2, [r3, #4]
          mem2->next = mem->next;
 802ad02:	697b      	ldr	r3, [r7, #20]
 802ad04:	881a      	ldrh	r2, [r3, #0]
 802ad06:	68fb      	ldr	r3, [r7, #12]
 802ad08:	801a      	strh	r2, [r3, #0]
          mem2->prev = ptr;
 802ad0a:	68fb      	ldr	r3, [r7, #12]
 802ad0c:	8bfa      	ldrh	r2, [r7, #30]
 802ad0e:	805a      	strh	r2, [r3, #2]
          /* and insert it between mem and mem->next */
          mem->next = ptr2;
 802ad10:	697b      	ldr	r3, [r7, #20]
 802ad12:	8a7a      	ldrh	r2, [r7, #18]
 802ad14:	801a      	strh	r2, [r3, #0]
          mem->used = 1;
 802ad16:	697b      	ldr	r3, [r7, #20]
 802ad18:	2201      	movs	r2, #1
 802ad1a:	711a      	strb	r2, [r3, #4]

          if (mem2->next != MEM_SIZE_ALIGNED) {
 802ad1c:	68fb      	ldr	r3, [r7, #12]
 802ad1e:	881b      	ldrh	r3, [r3, #0]
 802ad20:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 802ad24:	d007      	beq.n	802ad36 <mem_malloc+0xfa>
            ptr_to_mem(mem2->next)->prev = ptr2;
 802ad26:	68fb      	ldr	r3, [r7, #12]
 802ad28:	881b      	ldrh	r3, [r3, #0]
 802ad2a:	4618      	mov	r0, r3
 802ad2c:	f7ff fc3c 	bl	802a5a8 <ptr_to_mem>
 802ad30:	4602      	mov	r2, r0
 802ad32:	8a7b      	ldrh	r3, [r7, #18]
 802ad34:	8053      	strh	r3, [r2, #2]
          }
          MEM_STATS_INC_USED(used, (size + SIZEOF_STRUCT_MEM));
 802ad36:	4b5e      	ldr	r3, [pc, #376]	; (802aeb0 <mem_malloc+0x274>)
 802ad38:	f8b3 20ac 	ldrh.w	r2, [r3, #172]	; 0xac
 802ad3c:	8bbb      	ldrh	r3, [r7, #28]
 802ad3e:	4413      	add	r3, r2
 802ad40:	b29b      	uxth	r3, r3
 802ad42:	3308      	adds	r3, #8
 802ad44:	b29a      	uxth	r2, r3
 802ad46:	4b5a      	ldr	r3, [pc, #360]	; (802aeb0 <mem_malloc+0x274>)
 802ad48:	f8a3 20ac 	strh.w	r2, [r3, #172]	; 0xac
 802ad4c:	4b58      	ldr	r3, [pc, #352]	; (802aeb0 <mem_malloc+0x274>)
 802ad4e:	f8b3 20ae 	ldrh.w	r2, [r3, #174]	; 0xae
 802ad52:	4b57      	ldr	r3, [pc, #348]	; (802aeb0 <mem_malloc+0x274>)
 802ad54:	f8b3 30ac 	ldrh.w	r3, [r3, #172]	; 0xac
 802ad58:	429a      	cmp	r2, r3
 802ad5a:	d227      	bcs.n	802adac <mem_malloc+0x170>
 802ad5c:	4b54      	ldr	r3, [pc, #336]	; (802aeb0 <mem_malloc+0x274>)
 802ad5e:	f8b3 20ac 	ldrh.w	r2, [r3, #172]	; 0xac
 802ad62:	4b53      	ldr	r3, [pc, #332]	; (802aeb0 <mem_malloc+0x274>)
 802ad64:	f8a3 20ae 	strh.w	r2, [r3, #174]	; 0xae
 802ad68:	e020      	b.n	802adac <mem_malloc+0x170>
           * take care of this).
           * -> near fit or exact fit: do not split, no mem2 creation
           * also can't move mem->next directly behind mem, since mem->next
           * will always be used at this point!
           */
          mem->used = 1;
 802ad6a:	697b      	ldr	r3, [r7, #20]
 802ad6c:	2201      	movs	r2, #1
 802ad6e:	711a      	strb	r2, [r3, #4]
          MEM_STATS_INC_USED(used, mem->next - mem_to_ptr(mem));
 802ad70:	4b4f      	ldr	r3, [pc, #316]	; (802aeb0 <mem_malloc+0x274>)
 802ad72:	f8b3 20ac 	ldrh.w	r2, [r3, #172]	; 0xac
 802ad76:	697b      	ldr	r3, [r7, #20]
 802ad78:	881b      	ldrh	r3, [r3, #0]
 802ad7a:	4413      	add	r3, r2
 802ad7c:	b29c      	uxth	r4, r3
 802ad7e:	6978      	ldr	r0, [r7, #20]
 802ad80:	f7ff fc24 	bl	802a5cc <mem_to_ptr>
 802ad84:	4603      	mov	r3, r0
 802ad86:	1ae3      	subs	r3, r4, r3
 802ad88:	b29a      	uxth	r2, r3
 802ad8a:	4b49      	ldr	r3, [pc, #292]	; (802aeb0 <mem_malloc+0x274>)
 802ad8c:	f8a3 20ac 	strh.w	r2, [r3, #172]	; 0xac
 802ad90:	4b47      	ldr	r3, [pc, #284]	; (802aeb0 <mem_malloc+0x274>)
 802ad92:	f8b3 20ae 	ldrh.w	r2, [r3, #174]	; 0xae
 802ad96:	4b46      	ldr	r3, [pc, #280]	; (802aeb0 <mem_malloc+0x274>)
 802ad98:	f8b3 30ac 	ldrh.w	r3, [r3, #172]	; 0xac
 802ad9c:	429a      	cmp	r2, r3
 802ad9e:	d205      	bcs.n	802adac <mem_malloc+0x170>
 802ada0:	4b43      	ldr	r3, [pc, #268]	; (802aeb0 <mem_malloc+0x274>)
 802ada2:	f8b3 20ac 	ldrh.w	r2, [r3, #172]	; 0xac
 802ada6:	4b42      	ldr	r3, [pc, #264]	; (802aeb0 <mem_malloc+0x274>)
 802ada8:	f8a3 20ae 	strh.w	r2, [r3, #174]	; 0xae
        }
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
mem_malloc_adjust_lfree:
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
        if (mem == lfree) {
 802adac:	4b3c      	ldr	r3, [pc, #240]	; (802aea0 <mem_malloc+0x264>)
 802adae:	681b      	ldr	r3, [r3, #0]
 802adb0:	697a      	ldr	r2, [r7, #20]
 802adb2:	429a      	cmp	r2, r3
 802adb4:	d127      	bne.n	802ae06 <mem_malloc+0x1ca>
          struct mem *cur = lfree;
 802adb6:	4b3a      	ldr	r3, [pc, #232]	; (802aea0 <mem_malloc+0x264>)
 802adb8:	681b      	ldr	r3, [r3, #0]
 802adba:	61bb      	str	r3, [r7, #24]
          /* Find next free block after mem and update lowest free pointer */
          while (cur->used && cur != ram_end) {
 802adbc:	e005      	b.n	802adca <mem_malloc+0x18e>
              /* If mem_free or mem_trim have run, we have to restart since they
                 could have altered our current struct mem or lfree. */
              goto mem_malloc_adjust_lfree;
            }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
            cur = ptr_to_mem(cur->next);
 802adbe:	69bb      	ldr	r3, [r7, #24]
 802adc0:	881b      	ldrh	r3, [r3, #0]
 802adc2:	4618      	mov	r0, r3
 802adc4:	f7ff fbf0 	bl	802a5a8 <ptr_to_mem>
 802adc8:	61b8      	str	r0, [r7, #24]
          while (cur->used && cur != ram_end) {
 802adca:	69bb      	ldr	r3, [r7, #24]
 802adcc:	791b      	ldrb	r3, [r3, #4]
 802adce:	2b00      	cmp	r3, #0
 802add0:	d004      	beq.n	802addc <mem_malloc+0x1a0>
 802add2:	4b38      	ldr	r3, [pc, #224]	; (802aeb4 <mem_malloc+0x278>)
 802add4:	681b      	ldr	r3, [r3, #0]
 802add6:	69ba      	ldr	r2, [r7, #24]
 802add8:	429a      	cmp	r2, r3
 802adda:	d1f0      	bne.n	802adbe <mem_malloc+0x182>
          }
          lfree = cur;
 802addc:	4a30      	ldr	r2, [pc, #192]	; (802aea0 <mem_malloc+0x264>)
 802adde:	69bb      	ldr	r3, [r7, #24]
 802ade0:	6013      	str	r3, [r2, #0]
          LWIP_ASSERT("mem_malloc: !lfree->used", ((lfree == ram_end) || (!lfree->used)));
 802ade2:	4b2f      	ldr	r3, [pc, #188]	; (802aea0 <mem_malloc+0x264>)
 802ade4:	681a      	ldr	r2, [r3, #0]
 802ade6:	4b33      	ldr	r3, [pc, #204]	; (802aeb4 <mem_malloc+0x278>)
 802ade8:	681b      	ldr	r3, [r3, #0]
 802adea:	429a      	cmp	r2, r3
 802adec:	d00b      	beq.n	802ae06 <mem_malloc+0x1ca>
 802adee:	4b2c      	ldr	r3, [pc, #176]	; (802aea0 <mem_malloc+0x264>)
 802adf0:	681b      	ldr	r3, [r3, #0]
 802adf2:	791b      	ldrb	r3, [r3, #4]
 802adf4:	2b00      	cmp	r3, #0
 802adf6:	d006      	beq.n	802ae06 <mem_malloc+0x1ca>
 802adf8:	4b2a      	ldr	r3, [pc, #168]	; (802aea4 <mem_malloc+0x268>)
 802adfa:	f240 32b5 	movw	r2, #949	; 0x3b5
 802adfe:	492e      	ldr	r1, [pc, #184]	; (802aeb8 <mem_malloc+0x27c>)
 802ae00:	482a      	ldr	r0, [pc, #168]	; (802aeac <mem_malloc+0x270>)
 802ae02:	f00b f9c9 	bl	8036198 <iprintf>
        }
        LWIP_MEM_ALLOC_UNPROTECT();
        sys_mutex_unlock(&mem_mutex);
 802ae06:	4825      	ldr	r0, [pc, #148]	; (802ae9c <mem_malloc+0x260>)
 802ae08:	f00a ff27 	bl	8035c5a <sys_mutex_unlock>
        LWIP_ASSERT("mem_malloc: allocated memory not above ram_end.",
 802ae0c:	8bba      	ldrh	r2, [r7, #28]
 802ae0e:	697b      	ldr	r3, [r7, #20]
 802ae10:	4413      	add	r3, r2
 802ae12:	3308      	adds	r3, #8
 802ae14:	4a27      	ldr	r2, [pc, #156]	; (802aeb4 <mem_malloc+0x278>)
 802ae16:	6812      	ldr	r2, [r2, #0]
 802ae18:	4293      	cmp	r3, r2
 802ae1a:	d906      	bls.n	802ae2a <mem_malloc+0x1ee>
 802ae1c:	4b21      	ldr	r3, [pc, #132]	; (802aea4 <mem_malloc+0x268>)
 802ae1e:	f240 32b9 	movw	r2, #953	; 0x3b9
 802ae22:	4926      	ldr	r1, [pc, #152]	; (802aebc <mem_malloc+0x280>)
 802ae24:	4821      	ldr	r0, [pc, #132]	; (802aeac <mem_malloc+0x270>)
 802ae26:	f00b f9b7 	bl	8036198 <iprintf>
                    (mem_ptr_t)mem + SIZEOF_STRUCT_MEM + size <= (mem_ptr_t)ram_end);
        LWIP_ASSERT("mem_malloc: allocated memory properly aligned.",
 802ae2a:	697b      	ldr	r3, [r7, #20]
 802ae2c:	f003 0303 	and.w	r3, r3, #3
 802ae30:	2b00      	cmp	r3, #0
 802ae32:	d006      	beq.n	802ae42 <mem_malloc+0x206>
 802ae34:	4b1b      	ldr	r3, [pc, #108]	; (802aea4 <mem_malloc+0x268>)
 802ae36:	f240 32bb 	movw	r2, #955	; 0x3bb
 802ae3a:	4921      	ldr	r1, [pc, #132]	; (802aec0 <mem_malloc+0x284>)
 802ae3c:	481b      	ldr	r0, [pc, #108]	; (802aeac <mem_malloc+0x270>)
 802ae3e:	f00b f9ab 	bl	8036198 <iprintf>
                    ((mem_ptr_t)mem + SIZEOF_STRUCT_MEM) % MEM_ALIGNMENT == 0);
        LWIP_ASSERT("mem_malloc: sanity check alignment",
 802ae42:	697b      	ldr	r3, [r7, #20]
 802ae44:	f003 0303 	and.w	r3, r3, #3
 802ae48:	2b00      	cmp	r3, #0
 802ae4a:	d006      	beq.n	802ae5a <mem_malloc+0x21e>
 802ae4c:	4b15      	ldr	r3, [pc, #84]	; (802aea4 <mem_malloc+0x268>)
 802ae4e:	f240 32bd 	movw	r2, #957	; 0x3bd
 802ae52:	491c      	ldr	r1, [pc, #112]	; (802aec4 <mem_malloc+0x288>)
 802ae54:	4815      	ldr	r0, [pc, #84]	; (802aeac <mem_malloc+0x270>)
 802ae56:	f00b f99f 	bl	8036198 <iprintf>

#if MEM_OVERFLOW_CHECK
        mem_overflow_init_element(mem, size_in);
#endif
        MEM_SANITY();
        return (u8_t *)mem + SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET;
 802ae5a:	697b      	ldr	r3, [r7, #20]
 802ae5c:	3308      	adds	r3, #8
 802ae5e:	e019      	b.n	802ae94 <mem_malloc+0x258>
         ptr = ptr_to_mem(ptr)->next) {
 802ae60:	8bfb      	ldrh	r3, [r7, #30]
 802ae62:	4618      	mov	r0, r3
 802ae64:	f7ff fba0 	bl	802a5a8 <ptr_to_mem>
 802ae68:	4603      	mov	r3, r0
 802ae6a:	881b      	ldrh	r3, [r3, #0]
 802ae6c:	83fb      	strh	r3, [r7, #30]
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 802ae6e:	8bfa      	ldrh	r2, [r7, #30]
 802ae70:	8bbb      	ldrh	r3, [r7, #28]
 802ae72:	f5c3 63c8 	rsb	r3, r3, #1600	; 0x640
 802ae76:	429a      	cmp	r2, r3
 802ae78:	f4ff af0a 	bcc.w	802ac90 <mem_malloc+0x54>
    }
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
    /* if we got interrupted by a mem_free, try again */
  } while (local_mem_free_count != 0);
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  MEM_STATS_INC(err);
 802ae7c:	4b0c      	ldr	r3, [pc, #48]	; (802aeb0 <mem_malloc+0x274>)
 802ae7e:	f8b3 30a8 	ldrh.w	r3, [r3, #168]	; 0xa8
 802ae82:	3301      	adds	r3, #1
 802ae84:	b29a      	uxth	r2, r3
 802ae86:	4b0a      	ldr	r3, [pc, #40]	; (802aeb0 <mem_malloc+0x274>)
 802ae88:	f8a3 20a8 	strh.w	r2, [r3, #168]	; 0xa8
  LWIP_MEM_ALLOC_UNPROTECT();
  sys_mutex_unlock(&mem_mutex);
 802ae8c:	4803      	ldr	r0, [pc, #12]	; (802ae9c <mem_malloc+0x260>)
 802ae8e:	f00a fee4 	bl	8035c5a <sys_mutex_unlock>
  LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("mem_malloc: could not allocate %"S16_F" bytes\n", (s16_t)size));
  return NULL;
 802ae92:	2300      	movs	r3, #0
}
 802ae94:	4618      	mov	r0, r3
 802ae96:	3724      	adds	r7, #36	; 0x24
 802ae98:	46bd      	mov	sp, r7
 802ae9a:	bd90      	pop	{r4, r7, pc}
 802ae9c:	2000b900 	.word	0x2000b900
 802aea0:	2000b904 	.word	0x2000b904
 802aea4:	080380ac 	.word	0x080380ac
 802aea8:	08038270 	.word	0x08038270
 802aeac:	080380f4 	.word	0x080380f4
 802aeb0:	2000ed10 	.word	0x2000ed10
 802aeb4:	2000b8fc 	.word	0x2000b8fc
 802aeb8:	08038284 	.word	0x08038284
 802aebc:	080382a0 	.word	0x080382a0
 802aec0:	080382d0 	.word	0x080382d0
 802aec4:	08038300 	.word	0x08038300

0802aec8 <memp_init_pool>:
 *
 * @param desc pool to initialize
 */
void
memp_init_pool(const struct memp_desc *desc)
{
 802aec8:	b480      	push	{r7}
 802aeca:	b085      	sub	sp, #20
 802aecc:	af00      	add	r7, sp, #0
 802aece:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(desc);
#else
  int i;
  struct memp *memp;

  *desc->tab = NULL;
 802aed0:	687b      	ldr	r3, [r7, #4]
 802aed2:	68db      	ldr	r3, [r3, #12]
 802aed4:	2200      	movs	r2, #0
 802aed6:	601a      	str	r2, [r3, #0]
  memp = (struct memp *)LWIP_MEM_ALIGN(desc->base);
 802aed8:	687b      	ldr	r3, [r7, #4]
 802aeda:	689b      	ldr	r3, [r3, #8]
 802aedc:	3303      	adds	r3, #3
 802aede:	f023 0303 	bic.w	r3, r3, #3
 802aee2:	60bb      	str	r3, [r7, #8]
                                       + MEM_SANITY_REGION_AFTER_ALIGNED
#endif
                                      ));
#endif
  /* create a linked list of memp elements */
  for (i = 0; i < desc->num; ++i) {
 802aee4:	2300      	movs	r3, #0
 802aee6:	60fb      	str	r3, [r7, #12]
 802aee8:	e011      	b.n	802af0e <memp_init_pool+0x46>
    memp->next = *desc->tab;
 802aeea:	687b      	ldr	r3, [r7, #4]
 802aeec:	68db      	ldr	r3, [r3, #12]
 802aeee:	681a      	ldr	r2, [r3, #0]
 802aef0:	68bb      	ldr	r3, [r7, #8]
 802aef2:	601a      	str	r2, [r3, #0]
    *desc->tab = memp;
 802aef4:	687b      	ldr	r3, [r7, #4]
 802aef6:	68db      	ldr	r3, [r3, #12]
 802aef8:	68ba      	ldr	r2, [r7, #8]
 802aefa:	601a      	str	r2, [r3, #0]
#if MEMP_OVERFLOW_CHECK
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */
    /* cast through void* to get rid of alignment warnings */
    memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + desc->size
 802aefc:	687b      	ldr	r3, [r7, #4]
 802aefe:	889b      	ldrh	r3, [r3, #4]
 802af00:	461a      	mov	r2, r3
 802af02:	68bb      	ldr	r3, [r7, #8]
 802af04:	4413      	add	r3, r2
 802af06:	60bb      	str	r3, [r7, #8]
  for (i = 0; i < desc->num; ++i) {
 802af08:	68fb      	ldr	r3, [r7, #12]
 802af0a:	3301      	adds	r3, #1
 802af0c:	60fb      	str	r3, [r7, #12]
 802af0e:	687b      	ldr	r3, [r7, #4]
 802af10:	88db      	ldrh	r3, [r3, #6]
 802af12:	461a      	mov	r2, r3
 802af14:	68fb      	ldr	r3, [r7, #12]
 802af16:	4293      	cmp	r3, r2
 802af18:	dbe7      	blt.n	802aeea <memp_init_pool+0x22>
                                   + MEM_SANITY_REGION_AFTER_ALIGNED
#endif
                                  );
  }
#if MEMP_STATS
  desc->stats->avail = desc->num;
 802af1a:	687b      	ldr	r3, [r7, #4]
 802af1c:	681b      	ldr	r3, [r3, #0]
 802af1e:	687a      	ldr	r2, [r7, #4]
 802af20:	88d2      	ldrh	r2, [r2, #6]
 802af22:	805a      	strh	r2, [r3, #2]
#endif /* !MEMP_MEM_MALLOC */

#if MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY)
  desc->stats->name  = desc->desc;
#endif /* MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY) */
}
 802af24:	bf00      	nop
 802af26:	3714      	adds	r7, #20
 802af28:	46bd      	mov	sp, r7
 802af2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 802af2e:	4770      	bx	lr

0802af30 <memp_init>:
 *
 * Carves out memp_memory into linked lists for each pool-type.
 */
void
memp_init(void)
{
 802af30:	b580      	push	{r7, lr}
 802af32:	b082      	sub	sp, #8
 802af34:	af00      	add	r7, sp, #0
  u16_t i;

  /* for every pool: */
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 802af36:	2300      	movs	r3, #0
 802af38:	80fb      	strh	r3, [r7, #6]
 802af3a:	e014      	b.n	802af66 <memp_init+0x36>
    memp_init_pool(memp_pools[i]);
 802af3c:	88fb      	ldrh	r3, [r7, #6]
 802af3e:	4a0e      	ldr	r2, [pc, #56]	; (802af78 <memp_init+0x48>)
 802af40:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 802af44:	4618      	mov	r0, r3
 802af46:	f7ff ffbf 	bl	802aec8 <memp_init_pool>

#if LWIP_STATS && MEMP_STATS
    lwip_stats.memp[i] = memp_pools[i]->stats;
 802af4a:	88fb      	ldrh	r3, [r7, #6]
 802af4c:	4a0a      	ldr	r2, [pc, #40]	; (802af78 <memp_init+0x48>)
 802af4e:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 802af52:	88fb      	ldrh	r3, [r7, #6]
 802af54:	6812      	ldr	r2, [r2, #0]
 802af56:	4909      	ldr	r1, [pc, #36]	; (802af7c <memp_init+0x4c>)
 802af58:	332c      	adds	r3, #44	; 0x2c
 802af5a:	009b      	lsls	r3, r3, #2
 802af5c:	440b      	add	r3, r1
 802af5e:	605a      	str	r2, [r3, #4]
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 802af60:	88fb      	ldrh	r3, [r7, #6]
 802af62:	3301      	adds	r3, #1
 802af64:	80fb      	strh	r3, [r7, #6]
 802af66:	88fb      	ldrh	r3, [r7, #6]
 802af68:	2b0c      	cmp	r3, #12
 802af6a:	d9e7      	bls.n	802af3c <memp_init+0xc>

#if MEMP_OVERFLOW_CHECK >= 2
  /* check everything a first time to see if it worked */
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */
}
 802af6c:	bf00      	nop
 802af6e:	bf00      	nop
 802af70:	3708      	adds	r7, #8
 802af72:	46bd      	mov	sp, r7
 802af74:	bd80      	pop	{r7, pc}
 802af76:	bf00      	nop
 802af78:	0803ab50 	.word	0x0803ab50
 802af7c:	2000ed10 	.word	0x2000ed10

0802af80 <do_memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
do_memp_malloc_pool(const struct memp_desc *desc)
#else
do_memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 802af80:	b580      	push	{r7, lr}
 802af82:	b084      	sub	sp, #16
 802af84:	af00      	add	r7, sp, #0
 802af86:	6078      	str	r0, [r7, #4]

#if MEMP_MEM_MALLOC
  memp = (struct memp *)mem_malloc(MEMP_SIZE + MEMP_ALIGN_SIZE(desc->size));
  SYS_ARCH_PROTECT(old_level);
#else /* MEMP_MEM_MALLOC */
  SYS_ARCH_PROTECT(old_level);
 802af88:	f00a fe9a 	bl	8035cc0 <sys_arch_protect>
 802af8c:	60f8      	str	r0, [r7, #12]

  memp = *desc->tab;
 802af8e:	687b      	ldr	r3, [r7, #4]
 802af90:	68db      	ldr	r3, [r3, #12]
 802af92:	681b      	ldr	r3, [r3, #0]
 802af94:	60bb      	str	r3, [r7, #8]
#endif /* MEMP_MEM_MALLOC */

  if (memp != NULL) {
 802af96:	68bb      	ldr	r3, [r7, #8]
 802af98:	2b00      	cmp	r3, #0
 802af9a:	d029      	beq.n	802aff0 <do_memp_malloc_pool+0x70>
#if !MEMP_MEM_MALLOC
#if MEMP_OVERFLOW_CHECK == 1
    memp_overflow_check_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */

    *desc->tab = memp->next;
 802af9c:	687b      	ldr	r3, [r7, #4]
 802af9e:	68db      	ldr	r3, [r3, #12]
 802afa0:	68ba      	ldr	r2, [r7, #8]
 802afa2:	6812      	ldr	r2, [r2, #0]
 802afa4:	601a      	str	r2, [r3, #0]
    memp->line = line;
#if MEMP_MEM_MALLOC
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_MEM_MALLOC */
#endif /* MEMP_OVERFLOW_CHECK */
    LWIP_ASSERT("memp_malloc: memp properly aligned",
 802afa6:	68bb      	ldr	r3, [r7, #8]
 802afa8:	f003 0303 	and.w	r3, r3, #3
 802afac:	2b00      	cmp	r3, #0
 802afae:	d006      	beq.n	802afbe <do_memp_malloc_pool+0x3e>
 802afb0:	4b16      	ldr	r3, [pc, #88]	; (802b00c <do_memp_malloc_pool+0x8c>)
 802afb2:	f44f 728c 	mov.w	r2, #280	; 0x118
 802afb6:	4916      	ldr	r1, [pc, #88]	; (802b010 <do_memp_malloc_pool+0x90>)
 802afb8:	4816      	ldr	r0, [pc, #88]	; (802b014 <do_memp_malloc_pool+0x94>)
 802afba:	f00b f8ed 	bl	8036198 <iprintf>
                ((mem_ptr_t)memp % MEM_ALIGNMENT) == 0);
#if MEMP_STATS
    desc->stats->used++;
 802afbe:	687b      	ldr	r3, [r7, #4]
 802afc0:	681b      	ldr	r3, [r3, #0]
 802afc2:	889a      	ldrh	r2, [r3, #4]
 802afc4:	3201      	adds	r2, #1
 802afc6:	b292      	uxth	r2, r2
 802afc8:	809a      	strh	r2, [r3, #4]
    if (desc->stats->used > desc->stats->max) {
 802afca:	687b      	ldr	r3, [r7, #4]
 802afcc:	681b      	ldr	r3, [r3, #0]
 802afce:	889a      	ldrh	r2, [r3, #4]
 802afd0:	687b      	ldr	r3, [r7, #4]
 802afd2:	681b      	ldr	r3, [r3, #0]
 802afd4:	88db      	ldrh	r3, [r3, #6]
 802afd6:	429a      	cmp	r2, r3
 802afd8:	d905      	bls.n	802afe6 <do_memp_malloc_pool+0x66>
      desc->stats->max = desc->stats->used;
 802afda:	687b      	ldr	r3, [r7, #4]
 802afdc:	681a      	ldr	r2, [r3, #0]
 802afde:	687b      	ldr	r3, [r7, #4]
 802afe0:	681b      	ldr	r3, [r3, #0]
 802afe2:	8892      	ldrh	r2, [r2, #4]
 802afe4:	80da      	strh	r2, [r3, #6]
    }
#endif
    SYS_ARCH_UNPROTECT(old_level);
 802afe6:	68f8      	ldr	r0, [r7, #12]
 802afe8:	f00a fe78 	bl	8035cdc <sys_arch_unprotect>
    /* cast through u8_t* to get rid of alignment warnings */
    return ((u8_t *)memp + MEMP_SIZE);
 802afec:	68bb      	ldr	r3, [r7, #8]
 802afee:	e009      	b.n	802b004 <do_memp_malloc_pool+0x84>
  } else {
#if MEMP_STATS
    desc->stats->err++;
 802aff0:	687b      	ldr	r3, [r7, #4]
 802aff2:	681b      	ldr	r3, [r3, #0]
 802aff4:	881a      	ldrh	r2, [r3, #0]
 802aff6:	3201      	adds	r2, #1
 802aff8:	b292      	uxth	r2, r2
 802affa:	801a      	strh	r2, [r3, #0]
#endif
    SYS_ARCH_UNPROTECT(old_level);
 802affc:	68f8      	ldr	r0, [r7, #12]
 802affe:	f00a fe6d 	bl	8035cdc <sys_arch_unprotect>
    LWIP_DEBUGF(MEMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("memp_malloc: out of memory in pool %s\n", desc->desc));
  }

  return NULL;
 802b002:	2300      	movs	r3, #0
}
 802b004:	4618      	mov	r0, r3
 802b006:	3710      	adds	r7, #16
 802b008:	46bd      	mov	sp, r7
 802b00a:	bd80      	pop	{r7, pc}
 802b00c:	08038324 	.word	0x08038324
 802b010:	08038354 	.word	0x08038354
 802b014:	08038378 	.word	0x08038378

0802b018 <memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc_pool(const struct memp_desc *desc)
#else
memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 802b018:	b580      	push	{r7, lr}
 802b01a:	b082      	sub	sp, #8
 802b01c:	af00      	add	r7, sp, #0
 802b01e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("invalid pool desc", desc != NULL);
 802b020:	687b      	ldr	r3, [r7, #4]
 802b022:	2b00      	cmp	r3, #0
 802b024:	d106      	bne.n	802b034 <memp_malloc_pool+0x1c>
 802b026:	4b0a      	ldr	r3, [pc, #40]	; (802b050 <memp_malloc_pool+0x38>)
 802b028:	f44f 729e 	mov.w	r2, #316	; 0x13c
 802b02c:	4909      	ldr	r1, [pc, #36]	; (802b054 <memp_malloc_pool+0x3c>)
 802b02e:	480a      	ldr	r0, [pc, #40]	; (802b058 <memp_malloc_pool+0x40>)
 802b030:	f00b f8b2 	bl	8036198 <iprintf>
  if (desc == NULL) {
 802b034:	687b      	ldr	r3, [r7, #4]
 802b036:	2b00      	cmp	r3, #0
 802b038:	d101      	bne.n	802b03e <memp_malloc_pool+0x26>
    return NULL;
 802b03a:	2300      	movs	r3, #0
 802b03c:	e003      	b.n	802b046 <memp_malloc_pool+0x2e>
  }

#if !MEMP_OVERFLOW_CHECK
  return do_memp_malloc_pool(desc);
 802b03e:	6878      	ldr	r0, [r7, #4]
 802b040:	f7ff ff9e 	bl	802af80 <do_memp_malloc_pool>
 802b044:	4603      	mov	r3, r0
#else
  return do_memp_malloc_pool_fn(desc, file, line);
#endif
}
 802b046:	4618      	mov	r0, r3
 802b048:	3708      	adds	r7, #8
 802b04a:	46bd      	mov	sp, r7
 802b04c:	bd80      	pop	{r7, pc}
 802b04e:	bf00      	nop
 802b050:	08038324 	.word	0x08038324
 802b054:	080383a0 	.word	0x080383a0
 802b058:	08038378 	.word	0x08038378

0802b05c <memp_malloc>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc(memp_t type)
#else
memp_malloc_fn(memp_t type, const char *file, const int line)
#endif
{
 802b05c:	b580      	push	{r7, lr}
 802b05e:	b084      	sub	sp, #16
 802b060:	af00      	add	r7, sp, #0
 802b062:	4603      	mov	r3, r0
 802b064:	71fb      	strb	r3, [r7, #7]
  void *memp;
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 802b066:	79fb      	ldrb	r3, [r7, #7]
 802b068:	2b0c      	cmp	r3, #12
 802b06a:	d908      	bls.n	802b07e <memp_malloc+0x22>
 802b06c:	4b0a      	ldr	r3, [pc, #40]	; (802b098 <memp_malloc+0x3c>)
 802b06e:	f240 1257 	movw	r2, #343	; 0x157
 802b072:	490a      	ldr	r1, [pc, #40]	; (802b09c <memp_malloc+0x40>)
 802b074:	480a      	ldr	r0, [pc, #40]	; (802b0a0 <memp_malloc+0x44>)
 802b076:	f00b f88f 	bl	8036198 <iprintf>
 802b07a:	2300      	movs	r3, #0
 802b07c:	e008      	b.n	802b090 <memp_malloc+0x34>
#if MEMP_OVERFLOW_CHECK >= 2
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */

#if !MEMP_OVERFLOW_CHECK
  memp = do_memp_malloc_pool(memp_pools[type]);
 802b07e:	79fb      	ldrb	r3, [r7, #7]
 802b080:	4a08      	ldr	r2, [pc, #32]	; (802b0a4 <memp_malloc+0x48>)
 802b082:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 802b086:	4618      	mov	r0, r3
 802b088:	f7ff ff7a 	bl	802af80 <do_memp_malloc_pool>
 802b08c:	60f8      	str	r0, [r7, #12]
#else
  memp = do_memp_malloc_pool_fn(memp_pools[type], file, line);
#endif

  return memp;
 802b08e:	68fb      	ldr	r3, [r7, #12]
}
 802b090:	4618      	mov	r0, r3
 802b092:	3710      	adds	r7, #16
 802b094:	46bd      	mov	sp, r7
 802b096:	bd80      	pop	{r7, pc}
 802b098:	08038324 	.word	0x08038324
 802b09c:	080383b4 	.word	0x080383b4
 802b0a0:	08038378 	.word	0x08038378
 802b0a4:	0803ab50 	.word	0x0803ab50

0802b0a8 <do_memp_free_pool>:

static void
do_memp_free_pool(const struct memp_desc *desc, void *mem)
{
 802b0a8:	b580      	push	{r7, lr}
 802b0aa:	b084      	sub	sp, #16
 802b0ac:	af00      	add	r7, sp, #0
 802b0ae:	6078      	str	r0, [r7, #4]
 802b0b0:	6039      	str	r1, [r7, #0]
  struct memp *memp;
  SYS_ARCH_DECL_PROTECT(old_level);

  LWIP_ASSERT("memp_free: mem properly aligned",
 802b0b2:	683b      	ldr	r3, [r7, #0]
 802b0b4:	f003 0303 	and.w	r3, r3, #3
 802b0b8:	2b00      	cmp	r3, #0
 802b0ba:	d006      	beq.n	802b0ca <do_memp_free_pool+0x22>
 802b0bc:	4b10      	ldr	r3, [pc, #64]	; (802b100 <do_memp_free_pool+0x58>)
 802b0be:	f44f 72b6 	mov.w	r2, #364	; 0x16c
 802b0c2:	4910      	ldr	r1, [pc, #64]	; (802b104 <do_memp_free_pool+0x5c>)
 802b0c4:	4810      	ldr	r0, [pc, #64]	; (802b108 <do_memp_free_pool+0x60>)
 802b0c6:	f00b f867 	bl	8036198 <iprintf>
              ((mem_ptr_t)mem % MEM_ALIGNMENT) == 0);

  /* cast through void* to get rid of alignment warnings */
  memp = (struct memp *)(void *)((u8_t *)mem - MEMP_SIZE);
 802b0ca:	683b      	ldr	r3, [r7, #0]
 802b0cc:	60fb      	str	r3, [r7, #12]

  SYS_ARCH_PROTECT(old_level);
 802b0ce:	f00a fdf7 	bl	8035cc0 <sys_arch_protect>
 802b0d2:	60b8      	str	r0, [r7, #8]
#if MEMP_OVERFLOW_CHECK == 1
  memp_overflow_check_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */

#if MEMP_STATS
  desc->stats->used--;
 802b0d4:	687b      	ldr	r3, [r7, #4]
 802b0d6:	681b      	ldr	r3, [r3, #0]
 802b0d8:	889a      	ldrh	r2, [r3, #4]
 802b0da:	3a01      	subs	r2, #1
 802b0dc:	b292      	uxth	r2, r2
 802b0de:	809a      	strh	r2, [r3, #4]
#if MEMP_MEM_MALLOC
  LWIP_UNUSED_ARG(desc);
  SYS_ARCH_UNPROTECT(old_level);
  mem_free(memp);
#else /* MEMP_MEM_MALLOC */
  memp->next = *desc->tab;
 802b0e0:	687b      	ldr	r3, [r7, #4]
 802b0e2:	68db      	ldr	r3, [r3, #12]
 802b0e4:	681a      	ldr	r2, [r3, #0]
 802b0e6:	68fb      	ldr	r3, [r7, #12]
 802b0e8:	601a      	str	r2, [r3, #0]
  *desc->tab = memp;
 802b0ea:	687b      	ldr	r3, [r7, #4]
 802b0ec:	68db      	ldr	r3, [r3, #12]
 802b0ee:	68fa      	ldr	r2, [r7, #12]
 802b0f0:	601a      	str	r2, [r3, #0]

#if MEMP_SANITY_CHECK
  LWIP_ASSERT("memp sanity", memp_sanity(desc));
#endif /* MEMP_SANITY_CHECK */

  SYS_ARCH_UNPROTECT(old_level);
 802b0f2:	68b8      	ldr	r0, [r7, #8]
 802b0f4:	f00a fdf2 	bl	8035cdc <sys_arch_unprotect>
#endif /* !MEMP_MEM_MALLOC */
}
 802b0f8:	bf00      	nop
 802b0fa:	3710      	adds	r7, #16
 802b0fc:	46bd      	mov	sp, r7
 802b0fe:	bd80      	pop	{r7, pc}
 802b100:	08038324 	.word	0x08038324
 802b104:	080383d4 	.word	0x080383d4
 802b108:	08038378 	.word	0x08038378

0802b10c <memp_free_pool>:
 * @param desc the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free_pool(const struct memp_desc *desc, void *mem)
{
 802b10c:	b580      	push	{r7, lr}
 802b10e:	b082      	sub	sp, #8
 802b110:	af00      	add	r7, sp, #0
 802b112:	6078      	str	r0, [r7, #4]
 802b114:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("invalid pool desc", desc != NULL);
 802b116:	687b      	ldr	r3, [r7, #4]
 802b118:	2b00      	cmp	r3, #0
 802b11a:	d106      	bne.n	802b12a <memp_free_pool+0x1e>
 802b11c:	4b0a      	ldr	r3, [pc, #40]	; (802b148 <memp_free_pool+0x3c>)
 802b11e:	f240 1295 	movw	r2, #405	; 0x195
 802b122:	490a      	ldr	r1, [pc, #40]	; (802b14c <memp_free_pool+0x40>)
 802b124:	480a      	ldr	r0, [pc, #40]	; (802b150 <memp_free_pool+0x44>)
 802b126:	f00b f837 	bl	8036198 <iprintf>
  if ((desc == NULL) || (mem == NULL)) {
 802b12a:	687b      	ldr	r3, [r7, #4]
 802b12c:	2b00      	cmp	r3, #0
 802b12e:	d007      	beq.n	802b140 <memp_free_pool+0x34>
 802b130:	683b      	ldr	r3, [r7, #0]
 802b132:	2b00      	cmp	r3, #0
 802b134:	d004      	beq.n	802b140 <memp_free_pool+0x34>
    return;
  }

  do_memp_free_pool(desc, mem);
 802b136:	6839      	ldr	r1, [r7, #0]
 802b138:	6878      	ldr	r0, [r7, #4]
 802b13a:	f7ff ffb5 	bl	802b0a8 <do_memp_free_pool>
 802b13e:	e000      	b.n	802b142 <memp_free_pool+0x36>
    return;
 802b140:	bf00      	nop
}
 802b142:	3708      	adds	r7, #8
 802b144:	46bd      	mov	sp, r7
 802b146:	bd80      	pop	{r7, pc}
 802b148:	08038324 	.word	0x08038324
 802b14c:	080383a0 	.word	0x080383a0
 802b150:	08038378 	.word	0x08038378

0802b154 <memp_free>:
 * @param type the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free(memp_t type, void *mem)
{
 802b154:	b580      	push	{r7, lr}
 802b156:	b082      	sub	sp, #8
 802b158:	af00      	add	r7, sp, #0
 802b15a:	4603      	mov	r3, r0
 802b15c:	6039      	str	r1, [r7, #0]
 802b15e:	71fb      	strb	r3, [r7, #7]
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  struct memp *old_first;
#endif

  LWIP_ERROR("memp_free: type < MEMP_MAX", (type < MEMP_MAX), return;);
 802b160:	79fb      	ldrb	r3, [r7, #7]
 802b162:	2b0c      	cmp	r3, #12
 802b164:	d907      	bls.n	802b176 <memp_free+0x22>
 802b166:	4b0c      	ldr	r3, [pc, #48]	; (802b198 <memp_free+0x44>)
 802b168:	f44f 72d5 	mov.w	r2, #426	; 0x1aa
 802b16c:	490b      	ldr	r1, [pc, #44]	; (802b19c <memp_free+0x48>)
 802b16e:	480c      	ldr	r0, [pc, #48]	; (802b1a0 <memp_free+0x4c>)
 802b170:	f00b f812 	bl	8036198 <iprintf>
 802b174:	e00c      	b.n	802b190 <memp_free+0x3c>

  if (mem == NULL) {
 802b176:	683b      	ldr	r3, [r7, #0]
 802b178:	2b00      	cmp	r3, #0
 802b17a:	d008      	beq.n	802b18e <memp_free+0x3a>

#ifdef LWIP_HOOK_MEMP_AVAILABLE
  old_first = *memp_pools[type]->tab;
#endif

  do_memp_free_pool(memp_pools[type], mem);
 802b17c:	79fb      	ldrb	r3, [r7, #7]
 802b17e:	4a09      	ldr	r2, [pc, #36]	; (802b1a4 <memp_free+0x50>)
 802b180:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 802b184:	6839      	ldr	r1, [r7, #0]
 802b186:	4618      	mov	r0, r3
 802b188:	f7ff ff8e 	bl	802b0a8 <do_memp_free_pool>
 802b18c:	e000      	b.n	802b190 <memp_free+0x3c>
    return;
 802b18e:	bf00      	nop
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  if (old_first == NULL) {
    LWIP_HOOK_MEMP_AVAILABLE(type);
  }
#endif
}
 802b190:	3708      	adds	r7, #8
 802b192:	46bd      	mov	sp, r7
 802b194:	bd80      	pop	{r7, pc}
 802b196:	bf00      	nop
 802b198:	08038324 	.word	0x08038324
 802b19c:	080383f4 	.word	0x080383f4
 802b1a0:	08038378 	.word	0x08038378
 802b1a4:	0803ab50 	.word	0x0803ab50

0802b1a8 <netif_init>:
}
#endif /* LWIP_HAVE_LOOPIF */

void
netif_init(void)
{
 802b1a8:	b480      	push	{r7}
 802b1aa:	af00      	add	r7, sp, #0

  netif_set_link_up(&loop_netif);
  netif_set_up(&loop_netif);

#endif /* LWIP_HAVE_LOOPIF */
}
 802b1ac:	bf00      	nop
 802b1ae:	46bd      	mov	sp, r7
 802b1b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 802b1b4:	4770      	bx	lr
	...

0802b1b8 <netif_add>:
netif_add(struct netif *netif,
#if LWIP_IPV4
          const ip4_addr_t *ipaddr, const ip4_addr_t *netmask, const ip4_addr_t *gw,
#endif /* LWIP_IPV4 */
          void *state, netif_init_fn init, netif_input_fn input)
{
 802b1b8:	b580      	push	{r7, lr}
 802b1ba:	b086      	sub	sp, #24
 802b1bc:	af00      	add	r7, sp, #0
 802b1be:	60f8      	str	r0, [r7, #12]
 802b1c0:	60b9      	str	r1, [r7, #8]
 802b1c2:	607a      	str	r2, [r7, #4]
 802b1c4:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("single netif already set", 0);
    return NULL;
  }
#endif

  LWIP_ERROR("netif_add: invalid netif", netif != NULL, return NULL);
 802b1c6:	68fb      	ldr	r3, [r7, #12]
 802b1c8:	2b00      	cmp	r3, #0
 802b1ca:	d108      	bne.n	802b1de <netif_add+0x26>
 802b1cc:	4b57      	ldr	r3, [pc, #348]	; (802b32c <netif_add+0x174>)
 802b1ce:	f240 1227 	movw	r2, #295	; 0x127
 802b1d2:	4957      	ldr	r1, [pc, #348]	; (802b330 <netif_add+0x178>)
 802b1d4:	4857      	ldr	r0, [pc, #348]	; (802b334 <netif_add+0x17c>)
 802b1d6:	f00a ffdf 	bl	8036198 <iprintf>
 802b1da:	2300      	movs	r3, #0
 802b1dc:	e0a2      	b.n	802b324 <netif_add+0x16c>
  LWIP_ERROR("netif_add: No init function given", init != NULL, return NULL);
 802b1de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802b1e0:	2b00      	cmp	r3, #0
 802b1e2:	d108      	bne.n	802b1f6 <netif_add+0x3e>
 802b1e4:	4b51      	ldr	r3, [pc, #324]	; (802b32c <netif_add+0x174>)
 802b1e6:	f44f 7294 	mov.w	r2, #296	; 0x128
 802b1ea:	4953      	ldr	r1, [pc, #332]	; (802b338 <netif_add+0x180>)
 802b1ec:	4851      	ldr	r0, [pc, #324]	; (802b334 <netif_add+0x17c>)
 802b1ee:	f00a ffd3 	bl	8036198 <iprintf>
 802b1f2:	2300      	movs	r3, #0
 802b1f4:	e096      	b.n	802b324 <netif_add+0x16c>

#if LWIP_IPV4
  if (ipaddr == NULL) {
 802b1f6:	68bb      	ldr	r3, [r7, #8]
 802b1f8:	2b00      	cmp	r3, #0
 802b1fa:	d101      	bne.n	802b200 <netif_add+0x48>
    ipaddr = ip_2_ip4(IP4_ADDR_ANY);
 802b1fc:	4b4f      	ldr	r3, [pc, #316]	; (802b33c <netif_add+0x184>)
 802b1fe:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 802b200:	687b      	ldr	r3, [r7, #4]
 802b202:	2b00      	cmp	r3, #0
 802b204:	d101      	bne.n	802b20a <netif_add+0x52>
    netmask = ip_2_ip4(IP4_ADDR_ANY);
 802b206:	4b4d      	ldr	r3, [pc, #308]	; (802b33c <netif_add+0x184>)
 802b208:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 802b20a:	683b      	ldr	r3, [r7, #0]
 802b20c:	2b00      	cmp	r3, #0
 802b20e:	d101      	bne.n	802b214 <netif_add+0x5c>
    gw = ip_2_ip4(IP4_ADDR_ANY);
 802b210:	4b4a      	ldr	r3, [pc, #296]	; (802b33c <netif_add+0x184>)
 802b212:	603b      	str	r3, [r7, #0]
  }

  /* reset new interface configuration state */
  ip_addr_set_zero_ip4(&netif->ip_addr);
 802b214:	68fb      	ldr	r3, [r7, #12]
 802b216:	2200      	movs	r2, #0
 802b218:	605a      	str	r2, [r3, #4]
  ip_addr_set_zero_ip4(&netif->netmask);
 802b21a:	68fb      	ldr	r3, [r7, #12]
 802b21c:	2200      	movs	r2, #0
 802b21e:	609a      	str	r2, [r3, #8]
  ip_addr_set_zero_ip4(&netif->gw);
 802b220:	68fb      	ldr	r3, [r7, #12]
 802b222:	2200      	movs	r2, #0
 802b224:	60da      	str	r2, [r3, #12]
  netif->output = netif_null_output_ip4;
 802b226:	68fb      	ldr	r3, [r7, #12]
 802b228:	4a45      	ldr	r2, [pc, #276]	; (802b340 <netif_add+0x188>)
 802b22a:	615a      	str	r2, [r3, #20]
#endif /* LWIP_IPV6_ADDRESS_LIFETIMES */
  }
  netif->output_ip6 = netif_null_output_ip6;
#endif /* LWIP_IPV6 */
  NETIF_SET_CHECKSUM_CTRL(netif, NETIF_CHECKSUM_ENABLE_ALL);
  netif->mtu = 0;
 802b22c:	68fb      	ldr	r3, [r7, #12]
 802b22e:	2200      	movs	r2, #0
 802b230:	849a      	strh	r2, [r3, #36]	; 0x24
  netif->flags = 0;
 802b232:	68fb      	ldr	r3, [r7, #12]
 802b234:	2200      	movs	r2, #0
 802b236:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
#endif /* LWIP_IPV6 */
#if LWIP_NETIF_STATUS_CALLBACK
  netif->status_callback = NULL;
#endif /* LWIP_NETIF_STATUS_CALLBACK */
#if LWIP_NETIF_LINK_CALLBACK
  netif->link_callback = NULL;
 802b23a:	68fb      	ldr	r3, [r7, #12]
 802b23c:	2200      	movs	r2, #0
 802b23e:	61da      	str	r2, [r3, #28]
  netif->loop_first = NULL;
  netif->loop_last = NULL;
#endif /* ENABLE_LOOPBACK */

  /* remember netif specific state information data */
  netif->state = state;
 802b240:	68fb      	ldr	r3, [r7, #12]
 802b242:	6a3a      	ldr	r2, [r7, #32]
 802b244:	621a      	str	r2, [r3, #32]
  netif->num = netif_num;
 802b246:	4b3f      	ldr	r3, [pc, #252]	; (802b344 <netif_add+0x18c>)
 802b248:	781a      	ldrb	r2, [r3, #0]
 802b24a:	68fb      	ldr	r3, [r7, #12]
 802b24c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  netif->input = input;
 802b250:	68fb      	ldr	r3, [r7, #12]
 802b252:	6aba      	ldr	r2, [r7, #40]	; 0x28
 802b254:	611a      	str	r2, [r3, #16]
#if ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS
  netif->loop_cnt_current = 0;
#endif /* ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS */

#if LWIP_IPV4
  netif_set_addr(netif, ipaddr, netmask, gw);
 802b256:	683b      	ldr	r3, [r7, #0]
 802b258:	687a      	ldr	r2, [r7, #4]
 802b25a:	68b9      	ldr	r1, [r7, #8]
 802b25c:	68f8      	ldr	r0, [r7, #12]
 802b25e:	f000 f913 	bl	802b488 <netif_set_addr>
#endif /* LWIP_IPV4 */

  /* call user specified initialization function for netif */
  if (init(netif) != ERR_OK) {
 802b262:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802b264:	68f8      	ldr	r0, [r7, #12]
 802b266:	4798      	blx	r3
 802b268:	4603      	mov	r3, r0
 802b26a:	2b00      	cmp	r3, #0
 802b26c:	d001      	beq.n	802b272 <netif_add+0xba>
    return NULL;
 802b26e:	2300      	movs	r3, #0
 802b270:	e058      	b.n	802b324 <netif_add+0x16c>
     */
  {
    struct netif *netif2;
    int num_netifs;
    do {
      if (netif->num == 255) {
 802b272:	68fb      	ldr	r3, [r7, #12]
 802b274:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 802b278:	2bff      	cmp	r3, #255	; 0xff
 802b27a:	d103      	bne.n	802b284 <netif_add+0xcc>
        netif->num = 0;
 802b27c:	68fb      	ldr	r3, [r7, #12]
 802b27e:	2200      	movs	r2, #0
 802b280:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      }
      num_netifs = 0;
 802b284:	2300      	movs	r3, #0
 802b286:	613b      	str	r3, [r7, #16]
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 802b288:	4b2f      	ldr	r3, [pc, #188]	; (802b348 <netif_add+0x190>)
 802b28a:	681b      	ldr	r3, [r3, #0]
 802b28c:	617b      	str	r3, [r7, #20]
 802b28e:	e02b      	b.n	802b2e8 <netif_add+0x130>
        LWIP_ASSERT("netif already added", netif2 != netif);
 802b290:	697a      	ldr	r2, [r7, #20]
 802b292:	68fb      	ldr	r3, [r7, #12]
 802b294:	429a      	cmp	r2, r3
 802b296:	d106      	bne.n	802b2a6 <netif_add+0xee>
 802b298:	4b24      	ldr	r3, [pc, #144]	; (802b32c <netif_add+0x174>)
 802b29a:	f240 128b 	movw	r2, #395	; 0x18b
 802b29e:	492b      	ldr	r1, [pc, #172]	; (802b34c <netif_add+0x194>)
 802b2a0:	4824      	ldr	r0, [pc, #144]	; (802b334 <netif_add+0x17c>)
 802b2a2:	f00a ff79 	bl	8036198 <iprintf>
        num_netifs++;
 802b2a6:	693b      	ldr	r3, [r7, #16]
 802b2a8:	3301      	adds	r3, #1
 802b2aa:	613b      	str	r3, [r7, #16]
        LWIP_ASSERT("too many netifs, max. supported number is 255", num_netifs <= 255);
 802b2ac:	693b      	ldr	r3, [r7, #16]
 802b2ae:	2bff      	cmp	r3, #255	; 0xff
 802b2b0:	dd06      	ble.n	802b2c0 <netif_add+0x108>
 802b2b2:	4b1e      	ldr	r3, [pc, #120]	; (802b32c <netif_add+0x174>)
 802b2b4:	f240 128d 	movw	r2, #397	; 0x18d
 802b2b8:	4925      	ldr	r1, [pc, #148]	; (802b350 <netif_add+0x198>)
 802b2ba:	481e      	ldr	r0, [pc, #120]	; (802b334 <netif_add+0x17c>)
 802b2bc:	f00a ff6c 	bl	8036198 <iprintf>
        if (netif2->num == netif->num) {
 802b2c0:	697b      	ldr	r3, [r7, #20]
 802b2c2:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
 802b2c6:	68fb      	ldr	r3, [r7, #12]
 802b2c8:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 802b2cc:	429a      	cmp	r2, r3
 802b2ce:	d108      	bne.n	802b2e2 <netif_add+0x12a>
          netif->num++;
 802b2d0:	68fb      	ldr	r3, [r7, #12]
 802b2d2:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 802b2d6:	3301      	adds	r3, #1
 802b2d8:	b2da      	uxtb	r2, r3
 802b2da:	68fb      	ldr	r3, [r7, #12]
 802b2dc:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
          break;
 802b2e0:	e005      	b.n	802b2ee <netif_add+0x136>
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 802b2e2:	697b      	ldr	r3, [r7, #20]
 802b2e4:	681b      	ldr	r3, [r3, #0]
 802b2e6:	617b      	str	r3, [r7, #20]
 802b2e8:	697b      	ldr	r3, [r7, #20]
 802b2ea:	2b00      	cmp	r3, #0
 802b2ec:	d1d0      	bne.n	802b290 <netif_add+0xd8>
        }
      }
    } while (netif2 != NULL);
 802b2ee:	697b      	ldr	r3, [r7, #20]
 802b2f0:	2b00      	cmp	r3, #0
 802b2f2:	d1be      	bne.n	802b272 <netif_add+0xba>
  }
  if (netif->num == 254) {
 802b2f4:	68fb      	ldr	r3, [r7, #12]
 802b2f6:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 802b2fa:	2bfe      	cmp	r3, #254	; 0xfe
 802b2fc:	d103      	bne.n	802b306 <netif_add+0x14e>
    netif_num = 0;
 802b2fe:	4b11      	ldr	r3, [pc, #68]	; (802b344 <netif_add+0x18c>)
 802b300:	2200      	movs	r2, #0
 802b302:	701a      	strb	r2, [r3, #0]
 802b304:	e006      	b.n	802b314 <netif_add+0x15c>
  } else {
    netif_num = (u8_t)(netif->num + 1);
 802b306:	68fb      	ldr	r3, [r7, #12]
 802b308:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 802b30c:	3301      	adds	r3, #1
 802b30e:	b2da      	uxtb	r2, r3
 802b310:	4b0c      	ldr	r3, [pc, #48]	; (802b344 <netif_add+0x18c>)
 802b312:	701a      	strb	r2, [r3, #0]
  }

  /* add this netif to the list */
  netif->next = netif_list;
 802b314:	4b0c      	ldr	r3, [pc, #48]	; (802b348 <netif_add+0x190>)
 802b316:	681a      	ldr	r2, [r3, #0]
 802b318:	68fb      	ldr	r3, [r7, #12]
 802b31a:	601a      	str	r2, [r3, #0]
  netif_list = netif;
 802b31c:	4a0a      	ldr	r2, [pc, #40]	; (802b348 <netif_add+0x190>)
 802b31e:	68fb      	ldr	r3, [r7, #12]
 802b320:	6013      	str	r3, [r2, #0]
#endif /* LWIP_IPV4 */
  LWIP_DEBUGF(NETIF_DEBUG, ("\n"));

  netif_invoke_ext_callback(netif, LWIP_NSC_NETIF_ADDED, NULL);

  return netif;
 802b322:	68fb      	ldr	r3, [r7, #12]
}
 802b324:	4618      	mov	r0, r3
 802b326:	3718      	adds	r7, #24
 802b328:	46bd      	mov	sp, r7
 802b32a:	bd80      	pop	{r7, pc}
 802b32c:	08038410 	.word	0x08038410
 802b330:	080384a4 	.word	0x080384a4
 802b334:	08038460 	.word	0x08038460
 802b338:	080384c0 	.word	0x080384c0
 802b33c:	0803abc4 	.word	0x0803abc4
 802b340:	0802b763 	.word	0x0802b763
 802b344:	2000ed0c 	.word	0x2000ed0c
 802b348:	2000ed04 	.word	0x2000ed04
 802b34c:	080384e4 	.word	0x080384e4
 802b350:	080384f8 	.word	0x080384f8

0802b354 <netif_do_ip_addr_changed>:

static void
netif_do_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 802b354:	b580      	push	{r7, lr}
 802b356:	b082      	sub	sp, #8
 802b358:	af00      	add	r7, sp, #0
 802b35a:	6078      	str	r0, [r7, #4]
 802b35c:	6039      	str	r1, [r7, #0]
#if LWIP_TCP
  tcp_netif_ip_addr_changed(old_addr, new_addr);
 802b35e:	6839      	ldr	r1, [r7, #0]
 802b360:	6878      	ldr	r0, [r7, #4]
 802b362:	f002 fe81 	bl	802e068 <tcp_netif_ip_addr_changed>
#endif /* LWIP_TCP */
#if LWIP_UDP
  udp_netif_ip_addr_changed(old_addr, new_addr);
 802b366:	6839      	ldr	r1, [r7, #0]
 802b368:	6878      	ldr	r0, [r7, #4]
 802b36a:	f007 fe21 	bl	8032fb0 <udp_netif_ip_addr_changed>
#endif /* LWIP_UDP */
#if LWIP_RAW
  raw_netif_ip_addr_changed(old_addr, new_addr);
#endif /* LWIP_RAW */
}
 802b36e:	bf00      	nop
 802b370:	3708      	adds	r7, #8
 802b372:	46bd      	mov	sp, r7
 802b374:	bd80      	pop	{r7, pc}
	...

0802b378 <netif_do_set_ipaddr>:

#if LWIP_IPV4
static int
netif_do_set_ipaddr(struct netif *netif, const ip4_addr_t *ipaddr, ip_addr_t *old_addr)
{
 802b378:	b580      	push	{r7, lr}
 802b37a:	b086      	sub	sp, #24
 802b37c:	af00      	add	r7, sp, #0
 802b37e:	60f8      	str	r0, [r7, #12]
 802b380:	60b9      	str	r1, [r7, #8]
 802b382:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT("invalid pointer", ipaddr != NULL);
 802b384:	68bb      	ldr	r3, [r7, #8]
 802b386:	2b00      	cmp	r3, #0
 802b388:	d106      	bne.n	802b398 <netif_do_set_ipaddr+0x20>
 802b38a:	4b1d      	ldr	r3, [pc, #116]	; (802b400 <netif_do_set_ipaddr+0x88>)
 802b38c:	f240 12cb 	movw	r2, #459	; 0x1cb
 802b390:	491c      	ldr	r1, [pc, #112]	; (802b404 <netif_do_set_ipaddr+0x8c>)
 802b392:	481d      	ldr	r0, [pc, #116]	; (802b408 <netif_do_set_ipaddr+0x90>)
 802b394:	f00a ff00 	bl	8036198 <iprintf>
  LWIP_ASSERT("invalid pointer", old_addr != NULL);
 802b398:	687b      	ldr	r3, [r7, #4]
 802b39a:	2b00      	cmp	r3, #0
 802b39c:	d106      	bne.n	802b3ac <netif_do_set_ipaddr+0x34>
 802b39e:	4b18      	ldr	r3, [pc, #96]	; (802b400 <netif_do_set_ipaddr+0x88>)
 802b3a0:	f44f 72e6 	mov.w	r2, #460	; 0x1cc
 802b3a4:	4917      	ldr	r1, [pc, #92]	; (802b404 <netif_do_set_ipaddr+0x8c>)
 802b3a6:	4818      	ldr	r0, [pc, #96]	; (802b408 <netif_do_set_ipaddr+0x90>)
 802b3a8:	f00a fef6 	bl	8036198 <iprintf>

  /* address is actually being changed? */
  if (ip4_addr_cmp(ipaddr, netif_ip4_addr(netif)) == 0) {
 802b3ac:	68bb      	ldr	r3, [r7, #8]
 802b3ae:	681a      	ldr	r2, [r3, #0]
 802b3b0:	68fb      	ldr	r3, [r7, #12]
 802b3b2:	3304      	adds	r3, #4
 802b3b4:	681b      	ldr	r3, [r3, #0]
 802b3b6:	429a      	cmp	r2, r3
 802b3b8:	d01c      	beq.n	802b3f4 <netif_do_set_ipaddr+0x7c>
    ip_addr_t new_addr;
    *ip_2_ip4(&new_addr) = *ipaddr;
 802b3ba:	68bb      	ldr	r3, [r7, #8]
 802b3bc:	681b      	ldr	r3, [r3, #0]
 802b3be:	617b      	str	r3, [r7, #20]
    IP_SET_TYPE_VAL(new_addr, IPADDR_TYPE_V4);

    ip_addr_copy(*old_addr, *netif_ip_addr4(netif));
 802b3c0:	68fb      	ldr	r3, [r7, #12]
 802b3c2:	3304      	adds	r3, #4
 802b3c4:	681a      	ldr	r2, [r3, #0]
 802b3c6:	687b      	ldr	r3, [r7, #4]
 802b3c8:	601a      	str	r2, [r3, #0]

    LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: netif address being changed\n"));
    netif_do_ip_addr_changed(old_addr, &new_addr);
 802b3ca:	f107 0314 	add.w	r3, r7, #20
 802b3ce:	4619      	mov	r1, r3
 802b3d0:	6878      	ldr	r0, [r7, #4]
 802b3d2:	f7ff ffbf 	bl	802b354 <netif_do_ip_addr_changed>

    mib2_remove_ip4(netif);
    mib2_remove_route_ip4(0, netif);
    /* set new IP address to netif */
    ip4_addr_set(ip_2_ip4(&netif->ip_addr), ipaddr);
 802b3d6:	68bb      	ldr	r3, [r7, #8]
 802b3d8:	2b00      	cmp	r3, #0
 802b3da:	d002      	beq.n	802b3e2 <netif_do_set_ipaddr+0x6a>
 802b3dc:	68bb      	ldr	r3, [r7, #8]
 802b3de:	681b      	ldr	r3, [r3, #0]
 802b3e0:	e000      	b.n	802b3e4 <netif_do_set_ipaddr+0x6c>
 802b3e2:	2300      	movs	r3, #0
 802b3e4:	68fa      	ldr	r2, [r7, #12]
 802b3e6:	6053      	str	r3, [r2, #4]
    IP_SET_TYPE_VAL(netif->ip_addr, IPADDR_TYPE_V4);
    mib2_add_ip4(netif);
    mib2_add_route_ip4(0, netif);

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4);
 802b3e8:	2101      	movs	r1, #1
 802b3ea:	68f8      	ldr	r0, [r7, #12]
 802b3ec:	f000 f8d2 	bl	802b594 <netif_issue_reports>

    NETIF_STATUS_CALLBACK(netif);
    return 1; /* address changed */
 802b3f0:	2301      	movs	r3, #1
 802b3f2:	e000      	b.n	802b3f6 <netif_do_set_ipaddr+0x7e>
  }
  return 0; /* address unchanged */
 802b3f4:	2300      	movs	r3, #0
}
 802b3f6:	4618      	mov	r0, r3
 802b3f8:	3718      	adds	r7, #24
 802b3fa:	46bd      	mov	sp, r7
 802b3fc:	bd80      	pop	{r7, pc}
 802b3fe:	bf00      	nop
 802b400:	08038410 	.word	0x08038410
 802b404:	08038528 	.word	0x08038528
 802b408:	08038460 	.word	0x08038460

0802b40c <netif_do_set_netmask>:
  }
}

static int
netif_do_set_netmask(struct netif *netif, const ip4_addr_t *netmask, ip_addr_t *old_nm)
{
 802b40c:	b480      	push	{r7}
 802b40e:	b085      	sub	sp, #20
 802b410:	af00      	add	r7, sp, #0
 802b412:	60f8      	str	r0, [r7, #12]
 802b414:	60b9      	str	r1, [r7, #8]
 802b416:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(netmask, netif_ip4_netmask(netif)) == 0) {
 802b418:	68bb      	ldr	r3, [r7, #8]
 802b41a:	681a      	ldr	r2, [r3, #0]
 802b41c:	68fb      	ldr	r3, [r7, #12]
 802b41e:	3308      	adds	r3, #8
 802b420:	681b      	ldr	r3, [r3, #0]
 802b422:	429a      	cmp	r2, r3
 802b424:	d00a      	beq.n	802b43c <netif_do_set_netmask+0x30>
#else
    LWIP_UNUSED_ARG(old_nm);
#endif
    mib2_remove_route_ip4(0, netif);
    /* set new netmask to netif */
    ip4_addr_set(ip_2_ip4(&netif->netmask), netmask);
 802b426:	68bb      	ldr	r3, [r7, #8]
 802b428:	2b00      	cmp	r3, #0
 802b42a:	d002      	beq.n	802b432 <netif_do_set_netmask+0x26>
 802b42c:	68bb      	ldr	r3, [r7, #8]
 802b42e:	681b      	ldr	r3, [r3, #0]
 802b430:	e000      	b.n	802b434 <netif_do_set_netmask+0x28>
 802b432:	2300      	movs	r3, #0
 802b434:	68fa      	ldr	r2, [r7, #12]
 802b436:	6093      	str	r3, [r2, #8]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_netmask(netif)),
                ip4_addr2_16(netif_ip4_netmask(netif)),
                ip4_addr3_16(netif_ip4_netmask(netif)),
                ip4_addr4_16(netif_ip4_netmask(netif))));
    return 1; /* netmask changed */
 802b438:	2301      	movs	r3, #1
 802b43a:	e000      	b.n	802b43e <netif_do_set_netmask+0x32>
  }
  return 0; /* netmask unchanged */
 802b43c:	2300      	movs	r3, #0
}
 802b43e:	4618      	mov	r0, r3
 802b440:	3714      	adds	r7, #20
 802b442:	46bd      	mov	sp, r7
 802b444:	f85d 7b04 	ldr.w	r7, [sp], #4
 802b448:	4770      	bx	lr

0802b44a <netif_do_set_gw>:
  }
}

static int
netif_do_set_gw(struct netif *netif, const ip4_addr_t *gw, ip_addr_t *old_gw)
{
 802b44a:	b480      	push	{r7}
 802b44c:	b085      	sub	sp, #20
 802b44e:	af00      	add	r7, sp, #0
 802b450:	60f8      	str	r0, [r7, #12]
 802b452:	60b9      	str	r1, [r7, #8]
 802b454:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(gw, netif_ip4_gw(netif)) == 0) {
 802b456:	68bb      	ldr	r3, [r7, #8]
 802b458:	681a      	ldr	r2, [r3, #0]
 802b45a:	68fb      	ldr	r3, [r7, #12]
 802b45c:	330c      	adds	r3, #12
 802b45e:	681b      	ldr	r3, [r3, #0]
 802b460:	429a      	cmp	r2, r3
 802b462:	d00a      	beq.n	802b47a <netif_do_set_gw+0x30>
    ip_addr_copy(*old_gw, *netif_ip_gw4(netif));
#else
    LWIP_UNUSED_ARG(old_gw);
#endif

    ip4_addr_set(ip_2_ip4(&netif->gw), gw);
 802b464:	68bb      	ldr	r3, [r7, #8]
 802b466:	2b00      	cmp	r3, #0
 802b468:	d002      	beq.n	802b470 <netif_do_set_gw+0x26>
 802b46a:	68bb      	ldr	r3, [r7, #8]
 802b46c:	681b      	ldr	r3, [r3, #0]
 802b46e:	e000      	b.n	802b472 <netif_do_set_gw+0x28>
 802b470:	2300      	movs	r3, #0
 802b472:	68fa      	ldr	r2, [r7, #12]
 802b474:	60d3      	str	r3, [r2, #12]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_gw(netif)),
                ip4_addr2_16(netif_ip4_gw(netif)),
                ip4_addr3_16(netif_ip4_gw(netif)),
                ip4_addr4_16(netif_ip4_gw(netif))));
    return 1; /* gateway changed */
 802b476:	2301      	movs	r3, #1
 802b478:	e000      	b.n	802b47c <netif_do_set_gw+0x32>
  }
  return 0; /* gateway unchanged */
 802b47a:	2300      	movs	r3, #0
}
 802b47c:	4618      	mov	r0, r3
 802b47e:	3714      	adds	r7, #20
 802b480:	46bd      	mov	sp, r7
 802b482:	f85d 7b04 	ldr.w	r7, [sp], #4
 802b486:	4770      	bx	lr

0802b488 <netif_set_addr>:
 * @param gw the new default gateway
 */
void
netif_set_addr(struct netif *netif, const ip4_addr_t *ipaddr, const ip4_addr_t *netmask,
               const ip4_addr_t *gw)
{
 802b488:	b580      	push	{r7, lr}
 802b48a:	b088      	sub	sp, #32
 802b48c:	af00      	add	r7, sp, #0
 802b48e:	60f8      	str	r0, [r7, #12]
 802b490:	60b9      	str	r1, [r7, #8]
 802b492:	607a      	str	r2, [r7, #4]
 802b494:	603b      	str	r3, [r7, #0]
  ip_addr_t old_nm_val;
  ip_addr_t old_gw_val;
  ip_addr_t *old_nm = &old_nm_val;
  ip_addr_t *old_gw = &old_gw_val;
#else
  ip_addr_t *old_nm = NULL;
 802b496:	2300      	movs	r3, #0
 802b498:	61fb      	str	r3, [r7, #28]
  ip_addr_t *old_gw = NULL;
 802b49a:	2300      	movs	r3, #0
 802b49c:	61bb      	str	r3, [r7, #24]
  int remove;

  LWIP_ASSERT_CORE_LOCKED();

  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 802b49e:	68bb      	ldr	r3, [r7, #8]
 802b4a0:	2b00      	cmp	r3, #0
 802b4a2:	d101      	bne.n	802b4a8 <netif_set_addr+0x20>
    ipaddr = IP4_ADDR_ANY4;
 802b4a4:	4b1c      	ldr	r3, [pc, #112]	; (802b518 <netif_set_addr+0x90>)
 802b4a6:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 802b4a8:	687b      	ldr	r3, [r7, #4]
 802b4aa:	2b00      	cmp	r3, #0
 802b4ac:	d101      	bne.n	802b4b2 <netif_set_addr+0x2a>
    netmask = IP4_ADDR_ANY4;
 802b4ae:	4b1a      	ldr	r3, [pc, #104]	; (802b518 <netif_set_addr+0x90>)
 802b4b0:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 802b4b2:	683b      	ldr	r3, [r7, #0]
 802b4b4:	2b00      	cmp	r3, #0
 802b4b6:	d101      	bne.n	802b4bc <netif_set_addr+0x34>
    gw = IP4_ADDR_ANY4;
 802b4b8:	4b17      	ldr	r3, [pc, #92]	; (802b518 <netif_set_addr+0x90>)
 802b4ba:	603b      	str	r3, [r7, #0]
  }

  remove = ip4_addr_isany(ipaddr);
 802b4bc:	68bb      	ldr	r3, [r7, #8]
 802b4be:	2b00      	cmp	r3, #0
 802b4c0:	d003      	beq.n	802b4ca <netif_set_addr+0x42>
 802b4c2:	68bb      	ldr	r3, [r7, #8]
 802b4c4:	681b      	ldr	r3, [r3, #0]
 802b4c6:	2b00      	cmp	r3, #0
 802b4c8:	d101      	bne.n	802b4ce <netif_set_addr+0x46>
 802b4ca:	2301      	movs	r3, #1
 802b4cc:	e000      	b.n	802b4d0 <netif_set_addr+0x48>
 802b4ce:	2300      	movs	r3, #0
 802b4d0:	617b      	str	r3, [r7, #20]
  if (remove) {
 802b4d2:	697b      	ldr	r3, [r7, #20]
 802b4d4:	2b00      	cmp	r3, #0
 802b4d6:	d006      	beq.n	802b4e6 <netif_set_addr+0x5e>
    /* when removing an address, we have to remove it *before* changing netmask/gw
       to ensure that tcp RST segment can be sent correctly */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 802b4d8:	f107 0310 	add.w	r3, r7, #16
 802b4dc:	461a      	mov	r2, r3
 802b4de:	68b9      	ldr	r1, [r7, #8]
 802b4e0:	68f8      	ldr	r0, [r7, #12]
 802b4e2:	f7ff ff49 	bl	802b378 <netif_do_set_ipaddr>
      change_reason |= LWIP_NSC_IPV4_ADDRESS_CHANGED;
      cb_args.ipv4_changed.old_address = &old_addr;
#endif
    }
  }
  if (netif_do_set_netmask(netif, netmask, old_nm)) {
 802b4e6:	69fa      	ldr	r2, [r7, #28]
 802b4e8:	6879      	ldr	r1, [r7, #4]
 802b4ea:	68f8      	ldr	r0, [r7, #12]
 802b4ec:	f7ff ff8e 	bl	802b40c <netif_do_set_netmask>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_NETMASK_CHANGED;
    cb_args.ipv4_changed.old_netmask = old_nm;
#endif
  }
  if (netif_do_set_gw(netif, gw, old_gw)) {
 802b4f0:	69ba      	ldr	r2, [r7, #24]
 802b4f2:	6839      	ldr	r1, [r7, #0]
 802b4f4:	68f8      	ldr	r0, [r7, #12]
 802b4f6:	f7ff ffa8 	bl	802b44a <netif_do_set_gw>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_GATEWAY_CHANGED;
    cb_args.ipv4_changed.old_gw = old_gw;
#endif
  }
  if (!remove) {
 802b4fa:	697b      	ldr	r3, [r7, #20]
 802b4fc:	2b00      	cmp	r3, #0
 802b4fe:	d106      	bne.n	802b50e <netif_set_addr+0x86>
    /* set ipaddr last to ensure netmask/gw have been set when status callback is called */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 802b500:	f107 0310 	add.w	r3, r7, #16
 802b504:	461a      	mov	r2, r3
 802b506:	68b9      	ldr	r1, [r7, #8]
 802b508:	68f8      	ldr	r0, [r7, #12]
 802b50a:	f7ff ff35 	bl	802b378 <netif_do_set_ipaddr>
  if (change_reason != LWIP_NSC_NONE) {
    change_reason |= LWIP_NSC_IPV4_SETTINGS_CHANGED;
    netif_invoke_ext_callback(netif, change_reason, &cb_args);
  }
#endif
}
 802b50e:	bf00      	nop
 802b510:	3720      	adds	r7, #32
 802b512:	46bd      	mov	sp, r7
 802b514:	bd80      	pop	{r7, pc}
 802b516:	bf00      	nop
 802b518:	0803abc4 	.word	0x0803abc4

0802b51c <netif_set_default>:
 *
 * @param netif the default network interface
 */
void
netif_set_default(struct netif *netif)
{
 802b51c:	b480      	push	{r7}
 802b51e:	b083      	sub	sp, #12
 802b520:	af00      	add	r7, sp, #0
 802b522:	6078      	str	r0, [r7, #4]
    mib2_remove_route_ip4(1, netif);
  } else {
    /* install default route */
    mib2_add_route_ip4(1, netif);
  }
  netif_default = netif;
 802b524:	4a04      	ldr	r2, [pc, #16]	; (802b538 <netif_set_default+0x1c>)
 802b526:	687b      	ldr	r3, [r7, #4]
 802b528:	6013      	str	r3, [r2, #0]
  LWIP_DEBUGF(NETIF_DEBUG, ("netif: setting default interface %c%c\n",
                            netif ? netif->name[0] : '\'', netif ? netif->name[1] : '\''));
}
 802b52a:	bf00      	nop
 802b52c:	370c      	adds	r7, #12
 802b52e:	46bd      	mov	sp, r7
 802b530:	f85d 7b04 	ldr.w	r7, [sp], #4
 802b534:	4770      	bx	lr
 802b536:	bf00      	nop
 802b538:	2000ed08 	.word	0x2000ed08

0802b53c <netif_set_up>:
 * Bring an interface up, available for processing
 * traffic.
 */
void
netif_set_up(struct netif *netif)
{
 802b53c:	b580      	push	{r7, lr}
 802b53e:	b082      	sub	sp, #8
 802b540:	af00      	add	r7, sp, #0
 802b542:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_up: invalid netif", netif != NULL, return);
 802b544:	687b      	ldr	r3, [r7, #4]
 802b546:	2b00      	cmp	r3, #0
 802b548:	d107      	bne.n	802b55a <netif_set_up+0x1e>
 802b54a:	4b0f      	ldr	r3, [pc, #60]	; (802b588 <netif_set_up+0x4c>)
 802b54c:	f44f 7254 	mov.w	r2, #848	; 0x350
 802b550:	490e      	ldr	r1, [pc, #56]	; (802b58c <netif_set_up+0x50>)
 802b552:	480f      	ldr	r0, [pc, #60]	; (802b590 <netif_set_up+0x54>)
 802b554:	f00a fe20 	bl	8036198 <iprintf>
 802b558:	e013      	b.n	802b582 <netif_set_up+0x46>

  if (!(netif->flags & NETIF_FLAG_UP)) {
 802b55a:	687b      	ldr	r3, [r7, #4]
 802b55c:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 802b560:	f003 0301 	and.w	r3, r3, #1
 802b564:	2b00      	cmp	r3, #0
 802b566:	d10c      	bne.n	802b582 <netif_set_up+0x46>
    netif_set_flags(netif, NETIF_FLAG_UP);
 802b568:	687b      	ldr	r3, [r7, #4]
 802b56a:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 802b56e:	f043 0301 	orr.w	r3, r3, #1
 802b572:	b2da      	uxtb	r2, r3
 802b574:	687b      	ldr	r3, [r7, #4]
 802b576:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
      args.status_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 802b57a:	2103      	movs	r1, #3
 802b57c:	6878      	ldr	r0, [r7, #4]
 802b57e:	f000 f809 	bl	802b594 <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */
  }
}
 802b582:	3708      	adds	r7, #8
 802b584:	46bd      	mov	sp, r7
 802b586:	bd80      	pop	{r7, pc}
 802b588:	08038410 	.word	0x08038410
 802b58c:	08038598 	.word	0x08038598
 802b590:	08038460 	.word	0x08038460

0802b594 <netif_issue_reports>:

/** Send ARP/IGMP/MLD/RS events, e.g. on link-up/netif-up or addr-change
 */
static void
netif_issue_reports(struct netif *netif, u8_t report_type)
{
 802b594:	b580      	push	{r7, lr}
 802b596:	b082      	sub	sp, #8
 802b598:	af00      	add	r7, sp, #0
 802b59a:	6078      	str	r0, [r7, #4]
 802b59c:	460b      	mov	r3, r1
 802b59e:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("netif_issue_reports: invalid netif", netif != NULL);
 802b5a0:	687b      	ldr	r3, [r7, #4]
 802b5a2:	2b00      	cmp	r3, #0
 802b5a4:	d106      	bne.n	802b5b4 <netif_issue_reports+0x20>
 802b5a6:	4b18      	ldr	r3, [pc, #96]	; (802b608 <netif_issue_reports+0x74>)
 802b5a8:	f240 326d 	movw	r2, #877	; 0x36d
 802b5ac:	4917      	ldr	r1, [pc, #92]	; (802b60c <netif_issue_reports+0x78>)
 802b5ae:	4818      	ldr	r0, [pc, #96]	; (802b610 <netif_issue_reports+0x7c>)
 802b5b0:	f00a fdf2 	bl	8036198 <iprintf>

  /* Only send reports when both link and admin states are up */
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 802b5b4:	687b      	ldr	r3, [r7, #4]
 802b5b6:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 802b5ba:	f003 0304 	and.w	r3, r3, #4
 802b5be:	2b00      	cmp	r3, #0
 802b5c0:	d01e      	beq.n	802b600 <netif_issue_reports+0x6c>
      !(netif->flags & NETIF_FLAG_UP)) {
 802b5c2:	687b      	ldr	r3, [r7, #4]
 802b5c4:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 802b5c8:	f003 0301 	and.w	r3, r3, #1
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 802b5cc:	2b00      	cmp	r3, #0
 802b5ce:	d017      	beq.n	802b600 <netif_issue_reports+0x6c>
    return;
  }

#if LWIP_IPV4
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 802b5d0:	78fb      	ldrb	r3, [r7, #3]
 802b5d2:	f003 0301 	and.w	r3, r3, #1
 802b5d6:	2b00      	cmp	r3, #0
 802b5d8:	d013      	beq.n	802b602 <netif_issue_reports+0x6e>
      !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 802b5da:	687b      	ldr	r3, [r7, #4]
 802b5dc:	3304      	adds	r3, #4
 802b5de:	681b      	ldr	r3, [r3, #0]
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 802b5e0:	2b00      	cmp	r3, #0
 802b5e2:	d00e      	beq.n	802b602 <netif_issue_reports+0x6e>
#if LWIP_ARP
    /* For Ethernet network interfaces, we would like to send a "gratuitous ARP" */
    if (netif->flags & (NETIF_FLAG_ETHARP)) {
 802b5e4:	687b      	ldr	r3, [r7, #4]
 802b5e6:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 802b5ea:	f003 0308 	and.w	r3, r3, #8
 802b5ee:	2b00      	cmp	r3, #0
 802b5f0:	d007      	beq.n	802b602 <netif_issue_reports+0x6e>
      etharp_gratuitous(netif);
 802b5f2:	687b      	ldr	r3, [r7, #4]
 802b5f4:	3304      	adds	r3, #4
 802b5f6:	4619      	mov	r1, r3
 802b5f8:	6878      	ldr	r0, [r7, #4]
 802b5fa:	f008 fc83 	bl	8033f04 <etharp_request>
 802b5fe:	e000      	b.n	802b602 <netif_issue_reports+0x6e>
    return;
 802b600:	bf00      	nop
    /* send mld memberships */
    mld6_report_groups(netif);
#endif /* LWIP_IPV6_MLD */
  }
#endif /* LWIP_IPV6 */
}
 802b602:	3708      	adds	r7, #8
 802b604:	46bd      	mov	sp, r7
 802b606:	bd80      	pop	{r7, pc}
 802b608:	08038410 	.word	0x08038410
 802b60c:	080385b4 	.word	0x080385b4
 802b610:	08038460 	.word	0x08038460

0802b614 <netif_set_down>:
 * @ingroup netif
 * Bring an interface down, disabling any traffic processing.
 */
void
netif_set_down(struct netif *netif)
{
 802b614:	b580      	push	{r7, lr}
 802b616:	b082      	sub	sp, #8
 802b618:	af00      	add	r7, sp, #0
 802b61a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_down: invalid netif", netif != NULL, return);
 802b61c:	687b      	ldr	r3, [r7, #4]
 802b61e:	2b00      	cmp	r3, #0
 802b620:	d107      	bne.n	802b632 <netif_set_down+0x1e>
 802b622:	4b12      	ldr	r3, [pc, #72]	; (802b66c <netif_set_down+0x58>)
 802b624:	f240 329b 	movw	r2, #923	; 0x39b
 802b628:	4911      	ldr	r1, [pc, #68]	; (802b670 <netif_set_down+0x5c>)
 802b62a:	4812      	ldr	r0, [pc, #72]	; (802b674 <netif_set_down+0x60>)
 802b62c:	f00a fdb4 	bl	8036198 <iprintf>
 802b630:	e019      	b.n	802b666 <netif_set_down+0x52>

  if (netif->flags & NETIF_FLAG_UP) {
 802b632:	687b      	ldr	r3, [r7, #4]
 802b634:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 802b638:	f003 0301 	and.w	r3, r3, #1
 802b63c:	2b00      	cmp	r3, #0
 802b63e:	d012      	beq.n	802b666 <netif_set_down+0x52>
      args.status_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_clear_flags(netif, NETIF_FLAG_UP);
 802b640:	687b      	ldr	r3, [r7, #4]
 802b642:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 802b646:	f023 0301 	bic.w	r3, r3, #1
 802b64a:	b2da      	uxtb	r2, r3
 802b64c:	687b      	ldr	r3, [r7, #4]
 802b64e:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    MIB2_COPY_SYSUPTIME_TO(&netif->ts);

#if LWIP_IPV4 && LWIP_ARP
    if (netif->flags & NETIF_FLAG_ETHARP) {
 802b652:	687b      	ldr	r3, [r7, #4]
 802b654:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 802b658:	f003 0308 	and.w	r3, r3, #8
 802b65c:	2b00      	cmp	r3, #0
 802b65e:	d002      	beq.n	802b666 <netif_set_down+0x52>
      etharp_cleanup_netif(netif);
 802b660:	6878      	ldr	r0, [r7, #4]
 802b662:	f007 ffcd 	bl	8033600 <etharp_cleanup_netif>
    nd6_cleanup_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_STATUS_CALLBACK(netif);
  }
}
 802b666:	3708      	adds	r7, #8
 802b668:	46bd      	mov	sp, r7
 802b66a:	bd80      	pop	{r7, pc}
 802b66c:	08038410 	.word	0x08038410
 802b670:	080385d8 	.word	0x080385d8
 802b674:	08038460 	.word	0x08038460

0802b678 <netif_set_link_up>:
 * @ingroup netif
 * Called by a driver when its link goes up
 */
void
netif_set_link_up(struct netif *netif)
{
 802b678:	b580      	push	{r7, lr}
 802b67a:	b082      	sub	sp, #8
 802b67c:	af00      	add	r7, sp, #0
 802b67e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_up: invalid netif", netif != NULL, return);
 802b680:	687b      	ldr	r3, [r7, #4]
 802b682:	2b00      	cmp	r3, #0
 802b684:	d107      	bne.n	802b696 <netif_set_link_up+0x1e>
 802b686:	4b13      	ldr	r3, [pc, #76]	; (802b6d4 <netif_set_link_up+0x5c>)
 802b688:	f44f 7278 	mov.w	r2, #992	; 0x3e0
 802b68c:	4912      	ldr	r1, [pc, #72]	; (802b6d8 <netif_set_link_up+0x60>)
 802b68e:	4813      	ldr	r0, [pc, #76]	; (802b6dc <netif_set_link_up+0x64>)
 802b690:	f00a fd82 	bl	8036198 <iprintf>
 802b694:	e01b      	b.n	802b6ce <netif_set_link_up+0x56>

  if (!(netif->flags & NETIF_FLAG_LINK_UP)) {
 802b696:	687b      	ldr	r3, [r7, #4]
 802b698:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 802b69c:	f003 0304 	and.w	r3, r3, #4
 802b6a0:	2b00      	cmp	r3, #0
 802b6a2:	d114      	bne.n	802b6ce <netif_set_link_up+0x56>
    netif_set_flags(netif, NETIF_FLAG_LINK_UP);
 802b6a4:	687b      	ldr	r3, [r7, #4]
 802b6a6:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 802b6aa:	f043 0304 	orr.w	r3, r3, #4
 802b6ae:	b2da      	uxtb	r2, r3
 802b6b0:	687b      	ldr	r3, [r7, #4]
 802b6b2:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

#if LWIP_AUTOIP
    autoip_network_changed(netif);
#endif /* LWIP_AUTOIP */

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 802b6b6:	2103      	movs	r1, #3
 802b6b8:	6878      	ldr	r0, [r7, #4]
 802b6ba:	f7ff ff6b 	bl	802b594 <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_LINK_CALLBACK(netif);
 802b6be:	687b      	ldr	r3, [r7, #4]
 802b6c0:	69db      	ldr	r3, [r3, #28]
 802b6c2:	2b00      	cmp	r3, #0
 802b6c4:	d003      	beq.n	802b6ce <netif_set_link_up+0x56>
 802b6c6:	687b      	ldr	r3, [r7, #4]
 802b6c8:	69db      	ldr	r3, [r3, #28]
 802b6ca:	6878      	ldr	r0, [r7, #4]
 802b6cc:	4798      	blx	r3
      args.link_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 802b6ce:	3708      	adds	r7, #8
 802b6d0:	46bd      	mov	sp, r7
 802b6d2:	bd80      	pop	{r7, pc}
 802b6d4:	08038410 	.word	0x08038410
 802b6d8:	080385f8 	.word	0x080385f8
 802b6dc:	08038460 	.word	0x08038460

0802b6e0 <netif_set_link_down>:
 * @ingroup netif
 * Called by a driver when its link goes down
 */
void
netif_set_link_down(struct netif *netif)
{
 802b6e0:	b580      	push	{r7, lr}
 802b6e2:	b082      	sub	sp, #8
 802b6e4:	af00      	add	r7, sp, #0
 802b6e6:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_down: invalid netif", netif != NULL, return);
 802b6e8:	687b      	ldr	r3, [r7, #4]
 802b6ea:	2b00      	cmp	r3, #0
 802b6ec:	d107      	bne.n	802b6fe <netif_set_link_down+0x1e>
 802b6ee:	4b11      	ldr	r3, [pc, #68]	; (802b734 <netif_set_link_down+0x54>)
 802b6f0:	f240 4206 	movw	r2, #1030	; 0x406
 802b6f4:	4910      	ldr	r1, [pc, #64]	; (802b738 <netif_set_link_down+0x58>)
 802b6f6:	4811      	ldr	r0, [pc, #68]	; (802b73c <netif_set_link_down+0x5c>)
 802b6f8:	f00a fd4e 	bl	8036198 <iprintf>
 802b6fc:	e017      	b.n	802b72e <netif_set_link_down+0x4e>

  if (netif->flags & NETIF_FLAG_LINK_UP) {
 802b6fe:	687b      	ldr	r3, [r7, #4]
 802b700:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 802b704:	f003 0304 	and.w	r3, r3, #4
 802b708:	2b00      	cmp	r3, #0
 802b70a:	d010      	beq.n	802b72e <netif_set_link_down+0x4e>
    netif_clear_flags(netif, NETIF_FLAG_LINK_UP);
 802b70c:	687b      	ldr	r3, [r7, #4]
 802b70e:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 802b712:	f023 0304 	bic.w	r3, r3, #4
 802b716:	b2da      	uxtb	r2, r3
 802b718:	687b      	ldr	r3, [r7, #4]
 802b71a:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    NETIF_LINK_CALLBACK(netif);
 802b71e:	687b      	ldr	r3, [r7, #4]
 802b720:	69db      	ldr	r3, [r3, #28]
 802b722:	2b00      	cmp	r3, #0
 802b724:	d003      	beq.n	802b72e <netif_set_link_down+0x4e>
 802b726:	687b      	ldr	r3, [r7, #4]
 802b728:	69db      	ldr	r3, [r3, #28]
 802b72a:	6878      	ldr	r0, [r7, #4]
 802b72c:	4798      	blx	r3
      args.link_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 802b72e:	3708      	adds	r7, #8
 802b730:	46bd      	mov	sp, r7
 802b732:	bd80      	pop	{r7, pc}
 802b734:	08038410 	.word	0x08038410
 802b738:	0803861c 	.word	0x0803861c
 802b73c:	08038460 	.word	0x08038460

0802b740 <netif_set_link_callback>:
 * @ingroup netif
 * Set callback to be called when link is brought up/down
 */
void
netif_set_link_callback(struct netif *netif, netif_status_callback_fn link_callback)
{
 802b740:	b480      	push	{r7}
 802b742:	b083      	sub	sp, #12
 802b744:	af00      	add	r7, sp, #0
 802b746:	6078      	str	r0, [r7, #4]
 802b748:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();

  if (netif) {
 802b74a:	687b      	ldr	r3, [r7, #4]
 802b74c:	2b00      	cmp	r3, #0
 802b74e:	d002      	beq.n	802b756 <netif_set_link_callback+0x16>
    netif->link_callback = link_callback;
 802b750:	687b      	ldr	r3, [r7, #4]
 802b752:	683a      	ldr	r2, [r7, #0]
 802b754:	61da      	str	r2, [r3, #28]
  }
}
 802b756:	bf00      	nop
 802b758:	370c      	adds	r7, #12
 802b75a:	46bd      	mov	sp, r7
 802b75c:	f85d 7b04 	ldr.w	r7, [sp], #4
 802b760:	4770      	bx	lr

0802b762 <netif_null_output_ip4>:
#if LWIP_IPV4
/** Dummy IPv4 output function for netifs not supporting IPv4
 */
static err_t
netif_null_output_ip4(struct netif *netif, struct pbuf *p, const ip4_addr_t *ipaddr)
{
 802b762:	b480      	push	{r7}
 802b764:	b085      	sub	sp, #20
 802b766:	af00      	add	r7, sp, #0
 802b768:	60f8      	str	r0, [r7, #12]
 802b76a:	60b9      	str	r1, [r7, #8]
 802b76c:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(netif);
  LWIP_UNUSED_ARG(p);
  LWIP_UNUSED_ARG(ipaddr);

  return ERR_IF;
 802b76e:	f06f 030b 	mvn.w	r3, #11
}
 802b772:	4618      	mov	r0, r3
 802b774:	3714      	adds	r7, #20
 802b776:	46bd      	mov	sp, r7
 802b778:	f85d 7b04 	ldr.w	r7, [sp], #4
 802b77c:	4770      	bx	lr
	...

0802b780 <netif_get_by_index>:
*
* @param idx index of netif to find
*/
struct netif *
netif_get_by_index(u8_t idx)
{
 802b780:	b480      	push	{r7}
 802b782:	b085      	sub	sp, #20
 802b784:	af00      	add	r7, sp, #0
 802b786:	4603      	mov	r3, r0
 802b788:	71fb      	strb	r3, [r7, #7]
  struct netif *netif;

  LWIP_ASSERT_CORE_LOCKED();

  if (idx != NETIF_NO_INDEX) {
 802b78a:	79fb      	ldrb	r3, [r7, #7]
 802b78c:	2b00      	cmp	r3, #0
 802b78e:	d013      	beq.n	802b7b8 <netif_get_by_index+0x38>
    NETIF_FOREACH(netif) {
 802b790:	4b0d      	ldr	r3, [pc, #52]	; (802b7c8 <netif_get_by_index+0x48>)
 802b792:	681b      	ldr	r3, [r3, #0]
 802b794:	60fb      	str	r3, [r7, #12]
 802b796:	e00c      	b.n	802b7b2 <netif_get_by_index+0x32>
      if (idx == netif_get_index(netif)) {
 802b798:	68fb      	ldr	r3, [r7, #12]
 802b79a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 802b79e:	3301      	adds	r3, #1
 802b7a0:	b2db      	uxtb	r3, r3
 802b7a2:	79fa      	ldrb	r2, [r7, #7]
 802b7a4:	429a      	cmp	r2, r3
 802b7a6:	d101      	bne.n	802b7ac <netif_get_by_index+0x2c>
        return netif; /* found! */
 802b7a8:	68fb      	ldr	r3, [r7, #12]
 802b7aa:	e006      	b.n	802b7ba <netif_get_by_index+0x3a>
    NETIF_FOREACH(netif) {
 802b7ac:	68fb      	ldr	r3, [r7, #12]
 802b7ae:	681b      	ldr	r3, [r3, #0]
 802b7b0:	60fb      	str	r3, [r7, #12]
 802b7b2:	68fb      	ldr	r3, [r7, #12]
 802b7b4:	2b00      	cmp	r3, #0
 802b7b6:	d1ef      	bne.n	802b798 <netif_get_by_index+0x18>
      }
    }
  }

  return NULL;
 802b7b8:	2300      	movs	r3, #0
}
 802b7ba:	4618      	mov	r0, r3
 802b7bc:	3714      	adds	r7, #20
 802b7be:	46bd      	mov	sp, r7
 802b7c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 802b7c4:	4770      	bx	lr
 802b7c6:	bf00      	nop
 802b7c8:	2000ed04 	.word	0x2000ed04

0802b7cc <pbuf_free_ooseq>:
#if !NO_SYS
static
#endif /* !NO_SYS */
void
pbuf_free_ooseq(void)
{
 802b7cc:	b580      	push	{r7, lr}
 802b7ce:	b082      	sub	sp, #8
 802b7d0:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 0);
 802b7d2:	f00a fa75 	bl	8035cc0 <sys_arch_protect>
 802b7d6:	6038      	str	r0, [r7, #0]
 802b7d8:	4b0d      	ldr	r3, [pc, #52]	; (802b810 <pbuf_free_ooseq+0x44>)
 802b7da:	2200      	movs	r2, #0
 802b7dc:	701a      	strb	r2, [r3, #0]
 802b7de:	6838      	ldr	r0, [r7, #0]
 802b7e0:	f00a fa7c 	bl	8035cdc <sys_arch_unprotect>

  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 802b7e4:	4b0b      	ldr	r3, [pc, #44]	; (802b814 <pbuf_free_ooseq+0x48>)
 802b7e6:	681b      	ldr	r3, [r3, #0]
 802b7e8:	607b      	str	r3, [r7, #4]
 802b7ea:	e00a      	b.n	802b802 <pbuf_free_ooseq+0x36>
    if (pcb->ooseq != NULL) {
 802b7ec:	687b      	ldr	r3, [r7, #4]
 802b7ee:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 802b7f0:	2b00      	cmp	r3, #0
 802b7f2:	d003      	beq.n	802b7fc <pbuf_free_ooseq+0x30>
      /** Free the ooseq pbufs of one PCB only */
      LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free_ooseq: freeing out-of-sequence pbufs\n"));
      tcp_free_ooseq(pcb);
 802b7f4:	6878      	ldr	r0, [r7, #4]
 802b7f6:	f002 fc75 	bl	802e0e4 <tcp_free_ooseq>
      return;
 802b7fa:	e005      	b.n	802b808 <pbuf_free_ooseq+0x3c>
  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 802b7fc:	687b      	ldr	r3, [r7, #4]
 802b7fe:	68db      	ldr	r3, [r3, #12]
 802b800:	607b      	str	r3, [r7, #4]
 802b802:	687b      	ldr	r3, [r7, #4]
 802b804:	2b00      	cmp	r3, #0
 802b806:	d1f1      	bne.n	802b7ec <pbuf_free_ooseq+0x20>
    }
  }
}
 802b808:	3708      	adds	r7, #8
 802b80a:	46bd      	mov	sp, r7
 802b80c:	bd80      	pop	{r7, pc}
 802b80e:	bf00      	nop
 802b810:	2000ed0d 	.word	0x2000ed0d
 802b814:	2000ee18 	.word	0x2000ee18

0802b818 <pbuf_free_ooseq_callback>:
/**
 * Just a callback function for tcpip_callback() that calls pbuf_free_ooseq().
 */
static void
pbuf_free_ooseq_callback(void *arg)
{
 802b818:	b580      	push	{r7, lr}
 802b81a:	b082      	sub	sp, #8
 802b81c:	af00      	add	r7, sp, #0
 802b81e:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);
  pbuf_free_ooseq();
 802b820:	f7ff ffd4 	bl	802b7cc <pbuf_free_ooseq>
}
 802b824:	bf00      	nop
 802b826:	3708      	adds	r7, #8
 802b828:	46bd      	mov	sp, r7
 802b82a:	bd80      	pop	{r7, pc}

0802b82c <pbuf_pool_is_empty>:
#endif /* !NO_SYS */

/** Queue a call to pbuf_free_ooseq if not already queued. */
static void
pbuf_pool_is_empty(void)
{
 802b82c:	b580      	push	{r7, lr}
 802b82e:	b082      	sub	sp, #8
 802b830:	af00      	add	r7, sp, #0
#ifndef PBUF_POOL_FREE_OOSEQ_QUEUE_CALL
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 1);
#else /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
  u8_t queued;
  SYS_ARCH_DECL_PROTECT(old_level);
  SYS_ARCH_PROTECT(old_level);
 802b832:	f00a fa45 	bl	8035cc0 <sys_arch_protect>
 802b836:	6078      	str	r0, [r7, #4]
  queued = pbuf_free_ooseq_pending;
 802b838:	4b0f      	ldr	r3, [pc, #60]	; (802b878 <pbuf_pool_is_empty+0x4c>)
 802b83a:	781b      	ldrb	r3, [r3, #0]
 802b83c:	70fb      	strb	r3, [r7, #3]
  pbuf_free_ooseq_pending = 1;
 802b83e:	4b0e      	ldr	r3, [pc, #56]	; (802b878 <pbuf_pool_is_empty+0x4c>)
 802b840:	2201      	movs	r2, #1
 802b842:	701a      	strb	r2, [r3, #0]
  SYS_ARCH_UNPROTECT(old_level);
 802b844:	6878      	ldr	r0, [r7, #4]
 802b846:	f00a fa49 	bl	8035cdc <sys_arch_unprotect>

  if (!queued) {
 802b84a:	78fb      	ldrb	r3, [r7, #3]
 802b84c:	2b00      	cmp	r3, #0
 802b84e:	d10f      	bne.n	802b870 <pbuf_pool_is_empty+0x44>
    /* queue a call to pbuf_free_ooseq if not already queued */
    PBUF_POOL_FREE_OOSEQ_QUEUE_CALL();
 802b850:	2100      	movs	r1, #0
 802b852:	480a      	ldr	r0, [pc, #40]	; (802b87c <pbuf_pool_is_empty+0x50>)
 802b854:	f7fe fdc0 	bl	802a3d8 <tcpip_try_callback>
 802b858:	4603      	mov	r3, r0
 802b85a:	2b00      	cmp	r3, #0
 802b85c:	d008      	beq.n	802b870 <pbuf_pool_is_empty+0x44>
 802b85e:	f00a fa2f 	bl	8035cc0 <sys_arch_protect>
 802b862:	6078      	str	r0, [r7, #4]
 802b864:	4b04      	ldr	r3, [pc, #16]	; (802b878 <pbuf_pool_is_empty+0x4c>)
 802b866:	2200      	movs	r2, #0
 802b868:	701a      	strb	r2, [r3, #0]
 802b86a:	6878      	ldr	r0, [r7, #4]
 802b86c:	f00a fa36 	bl	8035cdc <sys_arch_unprotect>
  }
#endif /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
}
 802b870:	bf00      	nop
 802b872:	3708      	adds	r7, #8
 802b874:	46bd      	mov	sp, r7
 802b876:	bd80      	pop	{r7, pc}
 802b878:	2000ed0d 	.word	0x2000ed0d
 802b87c:	0802b819 	.word	0x0802b819

0802b880 <pbuf_init_alloced_pbuf>:
#endif /* !LWIP_TCP || !TCP_QUEUE_OOSEQ || !PBUF_POOL_FREE_OOSEQ */

/* Initialize members of struct pbuf after allocation */
static void
pbuf_init_alloced_pbuf(struct pbuf *p, void *payload, u16_t tot_len, u16_t len, pbuf_type type, u8_t flags)
{
 802b880:	b480      	push	{r7}
 802b882:	b085      	sub	sp, #20
 802b884:	af00      	add	r7, sp, #0
 802b886:	60f8      	str	r0, [r7, #12]
 802b888:	60b9      	str	r1, [r7, #8]
 802b88a:	4611      	mov	r1, r2
 802b88c:	461a      	mov	r2, r3
 802b88e:	460b      	mov	r3, r1
 802b890:	80fb      	strh	r3, [r7, #6]
 802b892:	4613      	mov	r3, r2
 802b894:	80bb      	strh	r3, [r7, #4]
  p->next = NULL;
 802b896:	68fb      	ldr	r3, [r7, #12]
 802b898:	2200      	movs	r2, #0
 802b89a:	601a      	str	r2, [r3, #0]
  p->payload = payload;
 802b89c:	68fb      	ldr	r3, [r7, #12]
 802b89e:	68ba      	ldr	r2, [r7, #8]
 802b8a0:	605a      	str	r2, [r3, #4]
  p->tot_len = tot_len;
 802b8a2:	68fb      	ldr	r3, [r7, #12]
 802b8a4:	88fa      	ldrh	r2, [r7, #6]
 802b8a6:	811a      	strh	r2, [r3, #8]
  p->len = len;
 802b8a8:	68fb      	ldr	r3, [r7, #12]
 802b8aa:	88ba      	ldrh	r2, [r7, #4]
 802b8ac:	815a      	strh	r2, [r3, #10]
  p->type_internal = (u8_t)type;
 802b8ae:	8b3b      	ldrh	r3, [r7, #24]
 802b8b0:	b2da      	uxtb	r2, r3
 802b8b2:	68fb      	ldr	r3, [r7, #12]
 802b8b4:	731a      	strb	r2, [r3, #12]
  p->flags = flags;
 802b8b6:	68fb      	ldr	r3, [r7, #12]
 802b8b8:	7f3a      	ldrb	r2, [r7, #28]
 802b8ba:	735a      	strb	r2, [r3, #13]
  p->ref = 1;
 802b8bc:	68fb      	ldr	r3, [r7, #12]
 802b8be:	2201      	movs	r2, #1
 802b8c0:	739a      	strb	r2, [r3, #14]
  p->if_idx = NETIF_NO_INDEX;
 802b8c2:	68fb      	ldr	r3, [r7, #12]
 802b8c4:	2200      	movs	r2, #0
 802b8c6:	73da      	strb	r2, [r3, #15]
}
 802b8c8:	bf00      	nop
 802b8ca:	3714      	adds	r7, #20
 802b8cc:	46bd      	mov	sp, r7
 802b8ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 802b8d2:	4770      	bx	lr

0802b8d4 <pbuf_alloc>:
 * @return the allocated pbuf. If multiple pbufs where allocated, this
 * is the first pbuf of a pbuf chain.
 */
struct pbuf *
pbuf_alloc(pbuf_layer layer, u16_t length, pbuf_type type)
{
 802b8d4:	b580      	push	{r7, lr}
 802b8d6:	b08c      	sub	sp, #48	; 0x30
 802b8d8:	af02      	add	r7, sp, #8
 802b8da:	4603      	mov	r3, r0
 802b8dc:	71fb      	strb	r3, [r7, #7]
 802b8de:	460b      	mov	r3, r1
 802b8e0:	80bb      	strh	r3, [r7, #4]
 802b8e2:	4613      	mov	r3, r2
 802b8e4:	807b      	strh	r3, [r7, #2]
  struct pbuf *p;
  u16_t offset = (u16_t)layer;
 802b8e6:	79fb      	ldrb	r3, [r7, #7]
 802b8e8:	847b      	strh	r3, [r7, #34]	; 0x22
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F")\n", length));

  switch (type) {
 802b8ea:	887b      	ldrh	r3, [r7, #2]
 802b8ec:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 802b8f0:	d07f      	beq.n	802b9f2 <pbuf_alloc+0x11e>
 802b8f2:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 802b8f6:	f300 80c8 	bgt.w	802ba8a <pbuf_alloc+0x1b6>
 802b8fa:	f5b3 7fc1 	cmp.w	r3, #386	; 0x182
 802b8fe:	d010      	beq.n	802b922 <pbuf_alloc+0x4e>
 802b900:	f5b3 7fc1 	cmp.w	r3, #386	; 0x182
 802b904:	f300 80c1 	bgt.w	802ba8a <pbuf_alloc+0x1b6>
 802b908:	2b01      	cmp	r3, #1
 802b90a:	d002      	beq.n	802b912 <pbuf_alloc+0x3e>
 802b90c:	2b41      	cmp	r3, #65	; 0x41
 802b90e:	f040 80bc 	bne.w	802ba8a <pbuf_alloc+0x1b6>
    case PBUF_REF: /* fall through */
    case PBUF_ROM:
      p = pbuf_alloc_reference(NULL, length, type);
 802b912:	887a      	ldrh	r2, [r7, #2]
 802b914:	88bb      	ldrh	r3, [r7, #4]
 802b916:	4619      	mov	r1, r3
 802b918:	2000      	movs	r0, #0
 802b91a:	f000 f8d1 	bl	802bac0 <pbuf_alloc_reference>
 802b91e:	6278      	str	r0, [r7, #36]	; 0x24
      break;
 802b920:	e0bd      	b.n	802ba9e <pbuf_alloc+0x1ca>
    case PBUF_POOL: {
      struct pbuf *q, *last;
      u16_t rem_len; /* remaining length */
      p = NULL;
 802b922:	2300      	movs	r3, #0
 802b924:	627b      	str	r3, [r7, #36]	; 0x24
      last = NULL;
 802b926:	2300      	movs	r3, #0
 802b928:	61fb      	str	r3, [r7, #28]
      rem_len = length;
 802b92a:	88bb      	ldrh	r3, [r7, #4]
 802b92c:	837b      	strh	r3, [r7, #26]
      do {
        u16_t qlen;
        q = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
 802b92e:	200c      	movs	r0, #12
 802b930:	f7ff fb94 	bl	802b05c <memp_malloc>
 802b934:	6138      	str	r0, [r7, #16]
        if (q == NULL) {
 802b936:	693b      	ldr	r3, [r7, #16]
 802b938:	2b00      	cmp	r3, #0
 802b93a:	d109      	bne.n	802b950 <pbuf_alloc+0x7c>
          PBUF_POOL_IS_EMPTY();
 802b93c:	f7ff ff76 	bl	802b82c <pbuf_pool_is_empty>
          /* free chain so far allocated */
          if (p) {
 802b940:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802b942:	2b00      	cmp	r3, #0
 802b944:	d002      	beq.n	802b94c <pbuf_alloc+0x78>
            pbuf_free(p);
 802b946:	6a78      	ldr	r0, [r7, #36]	; 0x24
 802b948:	f000 faa8 	bl	802be9c <pbuf_free>
          }
          /* bail out unsuccessfully */
          return NULL;
 802b94c:	2300      	movs	r3, #0
 802b94e:	e0a7      	b.n	802baa0 <pbuf_alloc+0x1cc>
        }
        qlen = LWIP_MIN(rem_len, (u16_t)(PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)));
 802b950:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 802b952:	3303      	adds	r3, #3
 802b954:	b29b      	uxth	r3, r3
 802b956:	f023 0303 	bic.w	r3, r3, #3
 802b95a:	b29b      	uxth	r3, r3
 802b95c:	f5c3 7314 	rsb	r3, r3, #592	; 0x250
 802b960:	b29b      	uxth	r3, r3
 802b962:	8b7a      	ldrh	r2, [r7, #26]
 802b964:	4293      	cmp	r3, r2
 802b966:	bf28      	it	cs
 802b968:	4613      	movcs	r3, r2
 802b96a:	81fb      	strh	r3, [r7, #14]
        pbuf_init_alloced_pbuf(q, LWIP_MEM_ALIGN((void *)((u8_t *)q + SIZEOF_STRUCT_PBUF + offset)),
 802b96c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 802b96e:	3310      	adds	r3, #16
 802b970:	693a      	ldr	r2, [r7, #16]
 802b972:	4413      	add	r3, r2
 802b974:	3303      	adds	r3, #3
 802b976:	f023 0303 	bic.w	r3, r3, #3
 802b97a:	4618      	mov	r0, r3
 802b97c:	89f9      	ldrh	r1, [r7, #14]
 802b97e:	8b7a      	ldrh	r2, [r7, #26]
 802b980:	2300      	movs	r3, #0
 802b982:	9301      	str	r3, [sp, #4]
 802b984:	887b      	ldrh	r3, [r7, #2]
 802b986:	9300      	str	r3, [sp, #0]
 802b988:	460b      	mov	r3, r1
 802b98a:	4601      	mov	r1, r0
 802b98c:	6938      	ldr	r0, [r7, #16]
 802b98e:	f7ff ff77 	bl	802b880 <pbuf_init_alloced_pbuf>
                               rem_len, qlen, type, 0);
        LWIP_ASSERT("pbuf_alloc: pbuf q->payload properly aligned",
 802b992:	693b      	ldr	r3, [r7, #16]
 802b994:	685b      	ldr	r3, [r3, #4]
 802b996:	f003 0303 	and.w	r3, r3, #3
 802b99a:	2b00      	cmp	r3, #0
 802b99c:	d006      	beq.n	802b9ac <pbuf_alloc+0xd8>
 802b99e:	4b42      	ldr	r3, [pc, #264]	; (802baa8 <pbuf_alloc+0x1d4>)
 802b9a0:	f44f 7280 	mov.w	r2, #256	; 0x100
 802b9a4:	4941      	ldr	r1, [pc, #260]	; (802baac <pbuf_alloc+0x1d8>)
 802b9a6:	4842      	ldr	r0, [pc, #264]	; (802bab0 <pbuf_alloc+0x1dc>)
 802b9a8:	f00a fbf6 	bl	8036198 <iprintf>
                    ((mem_ptr_t)q->payload % MEM_ALIGNMENT) == 0);
        LWIP_ASSERT("PBUF_POOL_BUFSIZE must be bigger than MEM_ALIGNMENT",
 802b9ac:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 802b9ae:	3303      	adds	r3, #3
 802b9b0:	f023 0303 	bic.w	r3, r3, #3
 802b9b4:	f5b3 7f14 	cmp.w	r3, #592	; 0x250
 802b9b8:	d106      	bne.n	802b9c8 <pbuf_alloc+0xf4>
 802b9ba:	4b3b      	ldr	r3, [pc, #236]	; (802baa8 <pbuf_alloc+0x1d4>)
 802b9bc:	f44f 7281 	mov.w	r2, #258	; 0x102
 802b9c0:	493c      	ldr	r1, [pc, #240]	; (802bab4 <pbuf_alloc+0x1e0>)
 802b9c2:	483b      	ldr	r0, [pc, #236]	; (802bab0 <pbuf_alloc+0x1dc>)
 802b9c4:	f00a fbe8 	bl	8036198 <iprintf>
                    (PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)) > 0 );
        if (p == NULL) {
 802b9c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802b9ca:	2b00      	cmp	r3, #0
 802b9cc:	d102      	bne.n	802b9d4 <pbuf_alloc+0x100>
          /* allocated head of pbuf chain (into p) */
          p = q;
 802b9ce:	693b      	ldr	r3, [r7, #16]
 802b9d0:	627b      	str	r3, [r7, #36]	; 0x24
 802b9d2:	e002      	b.n	802b9da <pbuf_alloc+0x106>
        } else {
          /* make previous pbuf point to this pbuf */
          last->next = q;
 802b9d4:	69fb      	ldr	r3, [r7, #28]
 802b9d6:	693a      	ldr	r2, [r7, #16]
 802b9d8:	601a      	str	r2, [r3, #0]
        }
        last = q;
 802b9da:	693b      	ldr	r3, [r7, #16]
 802b9dc:	61fb      	str	r3, [r7, #28]
        rem_len = (u16_t)(rem_len - qlen);
 802b9de:	8b7a      	ldrh	r2, [r7, #26]
 802b9e0:	89fb      	ldrh	r3, [r7, #14]
 802b9e2:	1ad3      	subs	r3, r2, r3
 802b9e4:	837b      	strh	r3, [r7, #26]
        offset = 0;
 802b9e6:	2300      	movs	r3, #0
 802b9e8:	847b      	strh	r3, [r7, #34]	; 0x22
      } while (rem_len > 0);
 802b9ea:	8b7b      	ldrh	r3, [r7, #26]
 802b9ec:	2b00      	cmp	r3, #0
 802b9ee:	d19e      	bne.n	802b92e <pbuf_alloc+0x5a>
      break;
 802b9f0:	e055      	b.n	802ba9e <pbuf_alloc+0x1ca>
    }
    case PBUF_RAM: {
      u16_t payload_len = (u16_t)(LWIP_MEM_ALIGN_SIZE(offset) + LWIP_MEM_ALIGN_SIZE(length));
 802b9f2:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 802b9f4:	3303      	adds	r3, #3
 802b9f6:	b29b      	uxth	r3, r3
 802b9f8:	f023 0303 	bic.w	r3, r3, #3
 802b9fc:	b29a      	uxth	r2, r3
 802b9fe:	88bb      	ldrh	r3, [r7, #4]
 802ba00:	3303      	adds	r3, #3
 802ba02:	b29b      	uxth	r3, r3
 802ba04:	f023 0303 	bic.w	r3, r3, #3
 802ba08:	b29b      	uxth	r3, r3
 802ba0a:	4413      	add	r3, r2
 802ba0c:	833b      	strh	r3, [r7, #24]
      mem_size_t alloc_len = (mem_size_t)(LWIP_MEM_ALIGN_SIZE(SIZEOF_STRUCT_PBUF) + payload_len);
 802ba0e:	8b3b      	ldrh	r3, [r7, #24]
 802ba10:	3310      	adds	r3, #16
 802ba12:	82fb      	strh	r3, [r7, #22]

      /* bug #50040: Check for integer overflow when calculating alloc_len */
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 802ba14:	8b3a      	ldrh	r2, [r7, #24]
 802ba16:	88bb      	ldrh	r3, [r7, #4]
 802ba18:	3303      	adds	r3, #3
 802ba1a:	f023 0303 	bic.w	r3, r3, #3
 802ba1e:	429a      	cmp	r2, r3
 802ba20:	d306      	bcc.n	802ba30 <pbuf_alloc+0x15c>
          (alloc_len < LWIP_MEM_ALIGN_SIZE(length))) {
 802ba22:	8afa      	ldrh	r2, [r7, #22]
 802ba24:	88bb      	ldrh	r3, [r7, #4]
 802ba26:	3303      	adds	r3, #3
 802ba28:	f023 0303 	bic.w	r3, r3, #3
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 802ba2c:	429a      	cmp	r2, r3
 802ba2e:	d201      	bcs.n	802ba34 <pbuf_alloc+0x160>
        return NULL;
 802ba30:	2300      	movs	r3, #0
 802ba32:	e035      	b.n	802baa0 <pbuf_alloc+0x1cc>
      }

      /* If pbuf is to be allocated in RAM, allocate memory for it. */
      p = (struct pbuf *)mem_malloc(alloc_len);
 802ba34:	8afb      	ldrh	r3, [r7, #22]
 802ba36:	4618      	mov	r0, r3
 802ba38:	f7ff f900 	bl	802ac3c <mem_malloc>
 802ba3c:	6278      	str	r0, [r7, #36]	; 0x24
      if (p == NULL) {
 802ba3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802ba40:	2b00      	cmp	r3, #0
 802ba42:	d101      	bne.n	802ba48 <pbuf_alloc+0x174>
        return NULL;
 802ba44:	2300      	movs	r3, #0
 802ba46:	e02b      	b.n	802baa0 <pbuf_alloc+0x1cc>
      }
      pbuf_init_alloced_pbuf(p, LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset)),
 802ba48:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 802ba4a:	3310      	adds	r3, #16
 802ba4c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 802ba4e:	4413      	add	r3, r2
 802ba50:	3303      	adds	r3, #3
 802ba52:	f023 0303 	bic.w	r3, r3, #3
 802ba56:	4618      	mov	r0, r3
 802ba58:	88b9      	ldrh	r1, [r7, #4]
 802ba5a:	88ba      	ldrh	r2, [r7, #4]
 802ba5c:	2300      	movs	r3, #0
 802ba5e:	9301      	str	r3, [sp, #4]
 802ba60:	887b      	ldrh	r3, [r7, #2]
 802ba62:	9300      	str	r3, [sp, #0]
 802ba64:	460b      	mov	r3, r1
 802ba66:	4601      	mov	r1, r0
 802ba68:	6a78      	ldr	r0, [r7, #36]	; 0x24
 802ba6a:	f7ff ff09 	bl	802b880 <pbuf_init_alloced_pbuf>
                             length, length, type, 0);
      LWIP_ASSERT("pbuf_alloc: pbuf->payload properly aligned",
 802ba6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802ba70:	685b      	ldr	r3, [r3, #4]
 802ba72:	f003 0303 	and.w	r3, r3, #3
 802ba76:	2b00      	cmp	r3, #0
 802ba78:	d010      	beq.n	802ba9c <pbuf_alloc+0x1c8>
 802ba7a:	4b0b      	ldr	r3, [pc, #44]	; (802baa8 <pbuf_alloc+0x1d4>)
 802ba7c:	f44f 7291 	mov.w	r2, #290	; 0x122
 802ba80:	490d      	ldr	r1, [pc, #52]	; (802bab8 <pbuf_alloc+0x1e4>)
 802ba82:	480b      	ldr	r0, [pc, #44]	; (802bab0 <pbuf_alloc+0x1dc>)
 802ba84:	f00a fb88 	bl	8036198 <iprintf>
                  ((mem_ptr_t)p->payload % MEM_ALIGNMENT) == 0);
      break;
 802ba88:	e008      	b.n	802ba9c <pbuf_alloc+0x1c8>
    }
    default:
      LWIP_ASSERT("pbuf_alloc: erroneous type", 0);
 802ba8a:	4b07      	ldr	r3, [pc, #28]	; (802baa8 <pbuf_alloc+0x1d4>)
 802ba8c:	f240 1227 	movw	r2, #295	; 0x127
 802ba90:	490a      	ldr	r1, [pc, #40]	; (802babc <pbuf_alloc+0x1e8>)
 802ba92:	4807      	ldr	r0, [pc, #28]	; (802bab0 <pbuf_alloc+0x1dc>)
 802ba94:	f00a fb80 	bl	8036198 <iprintf>
      return NULL;
 802ba98:	2300      	movs	r3, #0
 802ba9a:	e001      	b.n	802baa0 <pbuf_alloc+0x1cc>
      break;
 802ba9c:	bf00      	nop
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F") == %p\n", length, (void *)p));
  return p;
 802ba9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 802baa0:	4618      	mov	r0, r3
 802baa2:	3728      	adds	r7, #40	; 0x28
 802baa4:	46bd      	mov	sp, r7
 802baa6:	bd80      	pop	{r7, pc}
 802baa8:	08038640 	.word	0x08038640
 802baac:	08038670 	.word	0x08038670
 802bab0:	080386a0 	.word	0x080386a0
 802bab4:	080386c8 	.word	0x080386c8
 802bab8:	080386fc 	.word	0x080386fc
 802babc:	08038728 	.word	0x08038728

0802bac0 <pbuf_alloc_reference>:
 *
 * @return the allocated pbuf.
 */
struct pbuf *
pbuf_alloc_reference(void *payload, u16_t length, pbuf_type type)
{
 802bac0:	b580      	push	{r7, lr}
 802bac2:	b086      	sub	sp, #24
 802bac4:	af02      	add	r7, sp, #8
 802bac6:	6078      	str	r0, [r7, #4]
 802bac8:	460b      	mov	r3, r1
 802baca:	807b      	strh	r3, [r7, #2]
 802bacc:	4613      	mov	r3, r2
 802bace:	803b      	strh	r3, [r7, #0]
  struct pbuf *p;
  LWIP_ASSERT("invalid pbuf_type", (type == PBUF_REF) || (type == PBUF_ROM));
 802bad0:	883b      	ldrh	r3, [r7, #0]
 802bad2:	2b41      	cmp	r3, #65	; 0x41
 802bad4:	d009      	beq.n	802baea <pbuf_alloc_reference+0x2a>
 802bad6:	883b      	ldrh	r3, [r7, #0]
 802bad8:	2b01      	cmp	r3, #1
 802bada:	d006      	beq.n	802baea <pbuf_alloc_reference+0x2a>
 802badc:	4b0f      	ldr	r3, [pc, #60]	; (802bb1c <pbuf_alloc_reference+0x5c>)
 802bade:	f44f 72a5 	mov.w	r2, #330	; 0x14a
 802bae2:	490f      	ldr	r1, [pc, #60]	; (802bb20 <pbuf_alloc_reference+0x60>)
 802bae4:	480f      	ldr	r0, [pc, #60]	; (802bb24 <pbuf_alloc_reference+0x64>)
 802bae6:	f00a fb57 	bl	8036198 <iprintf>
  /* only allocate memory for the pbuf structure */
  p = (struct pbuf *)memp_malloc(MEMP_PBUF);
 802baea:	200b      	movs	r0, #11
 802baec:	f7ff fab6 	bl	802b05c <memp_malloc>
 802baf0:	60f8      	str	r0, [r7, #12]
  if (p == NULL) {
 802baf2:	68fb      	ldr	r3, [r7, #12]
 802baf4:	2b00      	cmp	r3, #0
 802baf6:	d101      	bne.n	802bafc <pbuf_alloc_reference+0x3c>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_alloc_reference: Could not allocate MEMP_PBUF for PBUF_%s.\n",
                 (type == PBUF_ROM) ? "ROM" : "REF"));
    return NULL;
 802baf8:	2300      	movs	r3, #0
 802bafa:	e00b      	b.n	802bb14 <pbuf_alloc_reference+0x54>
  }
  pbuf_init_alloced_pbuf(p, payload, length, length, type, 0);
 802bafc:	8879      	ldrh	r1, [r7, #2]
 802bafe:	887a      	ldrh	r2, [r7, #2]
 802bb00:	2300      	movs	r3, #0
 802bb02:	9301      	str	r3, [sp, #4]
 802bb04:	883b      	ldrh	r3, [r7, #0]
 802bb06:	9300      	str	r3, [sp, #0]
 802bb08:	460b      	mov	r3, r1
 802bb0a:	6879      	ldr	r1, [r7, #4]
 802bb0c:	68f8      	ldr	r0, [r7, #12]
 802bb0e:	f7ff feb7 	bl	802b880 <pbuf_init_alloced_pbuf>
  return p;
 802bb12:	68fb      	ldr	r3, [r7, #12]
}
 802bb14:	4618      	mov	r0, r3
 802bb16:	3710      	adds	r7, #16
 802bb18:	46bd      	mov	sp, r7
 802bb1a:	bd80      	pop	{r7, pc}
 802bb1c:	08038640 	.word	0x08038640
 802bb20:	08038744 	.word	0x08038744
 802bb24:	080386a0 	.word	0x080386a0

0802bb28 <pbuf_alloced_custom>:
 *        big enough to hold 'length' plus the header size
 */
struct pbuf *
pbuf_alloced_custom(pbuf_layer l, u16_t length, pbuf_type type, struct pbuf_custom *p,
                    void *payload_mem, u16_t payload_mem_len)
{
 802bb28:	b580      	push	{r7, lr}
 802bb2a:	b088      	sub	sp, #32
 802bb2c:	af02      	add	r7, sp, #8
 802bb2e:	607b      	str	r3, [r7, #4]
 802bb30:	4603      	mov	r3, r0
 802bb32:	73fb      	strb	r3, [r7, #15]
 802bb34:	460b      	mov	r3, r1
 802bb36:	81bb      	strh	r3, [r7, #12]
 802bb38:	4613      	mov	r3, r2
 802bb3a:	817b      	strh	r3, [r7, #10]
  u16_t offset = (u16_t)l;
 802bb3c:	7bfb      	ldrb	r3, [r7, #15]
 802bb3e:	827b      	strh	r3, [r7, #18]
  void *payload;
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloced_custom(length=%"U16_F")\n", length));

  if (LWIP_MEM_ALIGN_SIZE(offset) + length > payload_mem_len) {
 802bb40:	8a7b      	ldrh	r3, [r7, #18]
 802bb42:	3303      	adds	r3, #3
 802bb44:	f023 0203 	bic.w	r2, r3, #3
 802bb48:	89bb      	ldrh	r3, [r7, #12]
 802bb4a:	441a      	add	r2, r3
 802bb4c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 802bb4e:	429a      	cmp	r2, r3
 802bb50:	d901      	bls.n	802bb56 <pbuf_alloced_custom+0x2e>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_WARNING, ("pbuf_alloced_custom(length=%"U16_F") buffer too short\n", length));
    return NULL;
 802bb52:	2300      	movs	r3, #0
 802bb54:	e018      	b.n	802bb88 <pbuf_alloced_custom+0x60>
  }

  if (payload_mem != NULL) {
 802bb56:	6a3b      	ldr	r3, [r7, #32]
 802bb58:	2b00      	cmp	r3, #0
 802bb5a:	d007      	beq.n	802bb6c <pbuf_alloced_custom+0x44>
    payload = (u8_t *)payload_mem + LWIP_MEM_ALIGN_SIZE(offset);
 802bb5c:	8a7b      	ldrh	r3, [r7, #18]
 802bb5e:	3303      	adds	r3, #3
 802bb60:	f023 0303 	bic.w	r3, r3, #3
 802bb64:	6a3a      	ldr	r2, [r7, #32]
 802bb66:	4413      	add	r3, r2
 802bb68:	617b      	str	r3, [r7, #20]
 802bb6a:	e001      	b.n	802bb70 <pbuf_alloced_custom+0x48>
  } else {
    payload = NULL;
 802bb6c:	2300      	movs	r3, #0
 802bb6e:	617b      	str	r3, [r7, #20]
  }
  pbuf_init_alloced_pbuf(&p->pbuf, payload, length, length, type, PBUF_FLAG_IS_CUSTOM);
 802bb70:	6878      	ldr	r0, [r7, #4]
 802bb72:	89b9      	ldrh	r1, [r7, #12]
 802bb74:	89ba      	ldrh	r2, [r7, #12]
 802bb76:	2302      	movs	r3, #2
 802bb78:	9301      	str	r3, [sp, #4]
 802bb7a:	897b      	ldrh	r3, [r7, #10]
 802bb7c:	9300      	str	r3, [sp, #0]
 802bb7e:	460b      	mov	r3, r1
 802bb80:	6979      	ldr	r1, [r7, #20]
 802bb82:	f7ff fe7d 	bl	802b880 <pbuf_init_alloced_pbuf>
  return &p->pbuf;
 802bb86:	687b      	ldr	r3, [r7, #4]
}
 802bb88:	4618      	mov	r0, r3
 802bb8a:	3718      	adds	r7, #24
 802bb8c:	46bd      	mov	sp, r7
 802bb8e:	bd80      	pop	{r7, pc}

0802bb90 <pbuf_realloc>:
 *
 * @note Despite its name, pbuf_realloc cannot grow the size of a pbuf (chain).
 */
void
pbuf_realloc(struct pbuf *p, u16_t new_len)
{
 802bb90:	b580      	push	{r7, lr}
 802bb92:	b084      	sub	sp, #16
 802bb94:	af00      	add	r7, sp, #0
 802bb96:	6078      	str	r0, [r7, #4]
 802bb98:	460b      	mov	r3, r1
 802bb9a:	807b      	strh	r3, [r7, #2]
  struct pbuf *q;
  u16_t rem_len; /* remaining length */
  u16_t shrink;

  LWIP_ASSERT("pbuf_realloc: p != NULL", p != NULL);
 802bb9c:	687b      	ldr	r3, [r7, #4]
 802bb9e:	2b00      	cmp	r3, #0
 802bba0:	d106      	bne.n	802bbb0 <pbuf_realloc+0x20>
 802bba2:	4b3a      	ldr	r3, [pc, #232]	; (802bc8c <pbuf_realloc+0xfc>)
 802bba4:	f44f 72cc 	mov.w	r2, #408	; 0x198
 802bba8:	4939      	ldr	r1, [pc, #228]	; (802bc90 <pbuf_realloc+0x100>)
 802bbaa:	483a      	ldr	r0, [pc, #232]	; (802bc94 <pbuf_realloc+0x104>)
 802bbac:	f00a faf4 	bl	8036198 <iprintf>

  /* desired length larger than current length? */
  if (new_len >= p->tot_len) {
 802bbb0:	687b      	ldr	r3, [r7, #4]
 802bbb2:	891b      	ldrh	r3, [r3, #8]
 802bbb4:	887a      	ldrh	r2, [r7, #2]
 802bbb6:	429a      	cmp	r2, r3
 802bbb8:	d263      	bcs.n	802bc82 <pbuf_realloc+0xf2>
    return;
  }

  /* the pbuf chain grows by (new_len - p->tot_len) bytes
   * (which may be negative in case of shrinking) */
  shrink = (u16_t)(p->tot_len - new_len);
 802bbba:	687b      	ldr	r3, [r7, #4]
 802bbbc:	891a      	ldrh	r2, [r3, #8]
 802bbbe:	887b      	ldrh	r3, [r7, #2]
 802bbc0:	1ad3      	subs	r3, r2, r3
 802bbc2:	813b      	strh	r3, [r7, #8]

  /* first, step over any pbufs that should remain in the chain */
  rem_len = new_len;
 802bbc4:	887b      	ldrh	r3, [r7, #2]
 802bbc6:	817b      	strh	r3, [r7, #10]
  q = p;
 802bbc8:	687b      	ldr	r3, [r7, #4]
 802bbca:	60fb      	str	r3, [r7, #12]
  /* should this pbuf be kept? */
  while (rem_len > q->len) {
 802bbcc:	e018      	b.n	802bc00 <pbuf_realloc+0x70>
    /* decrease remaining length by pbuf length */
    rem_len = (u16_t)(rem_len - q->len);
 802bbce:	68fb      	ldr	r3, [r7, #12]
 802bbd0:	895b      	ldrh	r3, [r3, #10]
 802bbd2:	897a      	ldrh	r2, [r7, #10]
 802bbd4:	1ad3      	subs	r3, r2, r3
 802bbd6:	817b      	strh	r3, [r7, #10]
    /* decrease total length indicator */
    q->tot_len = (u16_t)(q->tot_len - shrink);
 802bbd8:	68fb      	ldr	r3, [r7, #12]
 802bbda:	891a      	ldrh	r2, [r3, #8]
 802bbdc:	893b      	ldrh	r3, [r7, #8]
 802bbde:	1ad3      	subs	r3, r2, r3
 802bbe0:	b29a      	uxth	r2, r3
 802bbe2:	68fb      	ldr	r3, [r7, #12]
 802bbe4:	811a      	strh	r2, [r3, #8]
    /* proceed to next pbuf in chain */
    q = q->next;
 802bbe6:	68fb      	ldr	r3, [r7, #12]
 802bbe8:	681b      	ldr	r3, [r3, #0]
 802bbea:	60fb      	str	r3, [r7, #12]
    LWIP_ASSERT("pbuf_realloc: q != NULL", q != NULL);
 802bbec:	68fb      	ldr	r3, [r7, #12]
 802bbee:	2b00      	cmp	r3, #0
 802bbf0:	d106      	bne.n	802bc00 <pbuf_realloc+0x70>
 802bbf2:	4b26      	ldr	r3, [pc, #152]	; (802bc8c <pbuf_realloc+0xfc>)
 802bbf4:	f240 12af 	movw	r2, #431	; 0x1af
 802bbf8:	4927      	ldr	r1, [pc, #156]	; (802bc98 <pbuf_realloc+0x108>)
 802bbfa:	4826      	ldr	r0, [pc, #152]	; (802bc94 <pbuf_realloc+0x104>)
 802bbfc:	f00a facc 	bl	8036198 <iprintf>
  while (rem_len > q->len) {
 802bc00:	68fb      	ldr	r3, [r7, #12]
 802bc02:	895b      	ldrh	r3, [r3, #10]
 802bc04:	897a      	ldrh	r2, [r7, #10]
 802bc06:	429a      	cmp	r2, r3
 802bc08:	d8e1      	bhi.n	802bbce <pbuf_realloc+0x3e>
  /* we have now reached the new last pbuf (in q) */
  /* rem_len == desired length for pbuf q */

  /* shrink allocated memory for PBUF_RAM */
  /* (other types merely adjust their length fields */
  if (pbuf_match_allocsrc(q, PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) && (rem_len != q->len)
 802bc0a:	68fb      	ldr	r3, [r7, #12]
 802bc0c:	7b1b      	ldrb	r3, [r3, #12]
 802bc0e:	f003 030f 	and.w	r3, r3, #15
 802bc12:	2b00      	cmp	r3, #0
 802bc14:	d121      	bne.n	802bc5a <pbuf_realloc+0xca>
 802bc16:	68fb      	ldr	r3, [r7, #12]
 802bc18:	895b      	ldrh	r3, [r3, #10]
 802bc1a:	897a      	ldrh	r2, [r7, #10]
 802bc1c:	429a      	cmp	r2, r3
 802bc1e:	d01c      	beq.n	802bc5a <pbuf_realloc+0xca>
#if LWIP_SUPPORT_CUSTOM_PBUF
      && ((q->flags & PBUF_FLAG_IS_CUSTOM) == 0)
 802bc20:	68fb      	ldr	r3, [r7, #12]
 802bc22:	7b5b      	ldrb	r3, [r3, #13]
 802bc24:	f003 0302 	and.w	r3, r3, #2
 802bc28:	2b00      	cmp	r3, #0
 802bc2a:	d116      	bne.n	802bc5a <pbuf_realloc+0xca>
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
     ) {
    /* reallocate and adjust the length of the pbuf that will be split */
    q = (struct pbuf *)mem_trim(q, (mem_size_t)(((u8_t *)q->payload - (u8_t *)q) + rem_len));
 802bc2c:	68fb      	ldr	r3, [r7, #12]
 802bc2e:	685a      	ldr	r2, [r3, #4]
 802bc30:	68fb      	ldr	r3, [r7, #12]
 802bc32:	1ad3      	subs	r3, r2, r3
 802bc34:	b29a      	uxth	r2, r3
 802bc36:	897b      	ldrh	r3, [r7, #10]
 802bc38:	4413      	add	r3, r2
 802bc3a:	b29b      	uxth	r3, r3
 802bc3c:	4619      	mov	r1, r3
 802bc3e:	68f8      	ldr	r0, [r7, #12]
 802bc40:	f7fe fed0 	bl	802a9e4 <mem_trim>
 802bc44:	60f8      	str	r0, [r7, #12]
    LWIP_ASSERT("mem_trim returned q == NULL", q != NULL);
 802bc46:	68fb      	ldr	r3, [r7, #12]
 802bc48:	2b00      	cmp	r3, #0
 802bc4a:	d106      	bne.n	802bc5a <pbuf_realloc+0xca>
 802bc4c:	4b0f      	ldr	r3, [pc, #60]	; (802bc8c <pbuf_realloc+0xfc>)
 802bc4e:	f240 12bd 	movw	r2, #445	; 0x1bd
 802bc52:	4912      	ldr	r1, [pc, #72]	; (802bc9c <pbuf_realloc+0x10c>)
 802bc54:	480f      	ldr	r0, [pc, #60]	; (802bc94 <pbuf_realloc+0x104>)
 802bc56:	f00a fa9f 	bl	8036198 <iprintf>
  }
  /* adjust length fields for new last pbuf */
  q->len = rem_len;
 802bc5a:	68fb      	ldr	r3, [r7, #12]
 802bc5c:	897a      	ldrh	r2, [r7, #10]
 802bc5e:	815a      	strh	r2, [r3, #10]
  q->tot_len = q->len;
 802bc60:	68fb      	ldr	r3, [r7, #12]
 802bc62:	895a      	ldrh	r2, [r3, #10]
 802bc64:	68fb      	ldr	r3, [r7, #12]
 802bc66:	811a      	strh	r2, [r3, #8]

  /* any remaining pbufs in chain? */
  if (q->next != NULL) {
 802bc68:	68fb      	ldr	r3, [r7, #12]
 802bc6a:	681b      	ldr	r3, [r3, #0]
 802bc6c:	2b00      	cmp	r3, #0
 802bc6e:	d004      	beq.n	802bc7a <pbuf_realloc+0xea>
    /* free remaining pbufs in chain */
    pbuf_free(q->next);
 802bc70:	68fb      	ldr	r3, [r7, #12]
 802bc72:	681b      	ldr	r3, [r3, #0]
 802bc74:	4618      	mov	r0, r3
 802bc76:	f000 f911 	bl	802be9c <pbuf_free>
  }
  /* q is last packet in chain */
  q->next = NULL;
 802bc7a:	68fb      	ldr	r3, [r7, #12]
 802bc7c:	2200      	movs	r2, #0
 802bc7e:	601a      	str	r2, [r3, #0]
 802bc80:	e000      	b.n	802bc84 <pbuf_realloc+0xf4>
    return;
 802bc82:	bf00      	nop

}
 802bc84:	3710      	adds	r7, #16
 802bc86:	46bd      	mov	sp, r7
 802bc88:	bd80      	pop	{r7, pc}
 802bc8a:	bf00      	nop
 802bc8c:	08038640 	.word	0x08038640
 802bc90:	08038758 	.word	0x08038758
 802bc94:	080386a0 	.word	0x080386a0
 802bc98:	08038770 	.word	0x08038770
 802bc9c:	08038788 	.word	0x08038788

0802bca0 <pbuf_add_header_impl>:
 * @return non-zero on failure, zero on success.
 *
 */
static u8_t
pbuf_add_header_impl(struct pbuf *p, size_t header_size_increment, u8_t force)
{
 802bca0:	b580      	push	{r7, lr}
 802bca2:	b086      	sub	sp, #24
 802bca4:	af00      	add	r7, sp, #0
 802bca6:	60f8      	str	r0, [r7, #12]
 802bca8:	60b9      	str	r1, [r7, #8]
 802bcaa:	4613      	mov	r3, r2
 802bcac:	71fb      	strb	r3, [r7, #7]
  u16_t type_internal;
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 802bcae:	68fb      	ldr	r3, [r7, #12]
 802bcb0:	2b00      	cmp	r3, #0
 802bcb2:	d106      	bne.n	802bcc2 <pbuf_add_header_impl+0x22>
 802bcb4:	4b2b      	ldr	r3, [pc, #172]	; (802bd64 <pbuf_add_header_impl+0xc4>)
 802bcb6:	f240 12df 	movw	r2, #479	; 0x1df
 802bcba:	492b      	ldr	r1, [pc, #172]	; (802bd68 <pbuf_add_header_impl+0xc8>)
 802bcbc:	482b      	ldr	r0, [pc, #172]	; (802bd6c <pbuf_add_header_impl+0xcc>)
 802bcbe:	f00a fa6b 	bl	8036198 <iprintf>
  if ((p == NULL) || (header_size_increment > 0xFFFF)) {
 802bcc2:	68fb      	ldr	r3, [r7, #12]
 802bcc4:	2b00      	cmp	r3, #0
 802bcc6:	d003      	beq.n	802bcd0 <pbuf_add_header_impl+0x30>
 802bcc8:	68bb      	ldr	r3, [r7, #8]
 802bcca:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 802bcce:	d301      	bcc.n	802bcd4 <pbuf_add_header_impl+0x34>
    return 1;
 802bcd0:	2301      	movs	r3, #1
 802bcd2:	e043      	b.n	802bd5c <pbuf_add_header_impl+0xbc>
  }
  if (header_size_increment == 0) {
 802bcd4:	68bb      	ldr	r3, [r7, #8]
 802bcd6:	2b00      	cmp	r3, #0
 802bcd8:	d101      	bne.n	802bcde <pbuf_add_header_impl+0x3e>
    return 0;
 802bcda:	2300      	movs	r3, #0
 802bcdc:	e03e      	b.n	802bd5c <pbuf_add_header_impl+0xbc>
  }

  increment_magnitude = (u16_t)header_size_increment;
 802bcde:	68bb      	ldr	r3, [r7, #8]
 802bce0:	827b      	strh	r3, [r7, #18]
  /* Do not allow tot_len to wrap as a result. */
  if ((u16_t)(increment_magnitude + p->tot_len) < increment_magnitude) {
 802bce2:	68fb      	ldr	r3, [r7, #12]
 802bce4:	891a      	ldrh	r2, [r3, #8]
 802bce6:	8a7b      	ldrh	r3, [r7, #18]
 802bce8:	4413      	add	r3, r2
 802bcea:	b29b      	uxth	r3, r3
 802bcec:	8a7a      	ldrh	r2, [r7, #18]
 802bcee:	429a      	cmp	r2, r3
 802bcf0:	d901      	bls.n	802bcf6 <pbuf_add_header_impl+0x56>
    return 1;
 802bcf2:	2301      	movs	r3, #1
 802bcf4:	e032      	b.n	802bd5c <pbuf_add_header_impl+0xbc>
  }

  type_internal = p->type_internal;
 802bcf6:	68fb      	ldr	r3, [r7, #12]
 802bcf8:	7b1b      	ldrb	r3, [r3, #12]
 802bcfa:	823b      	strh	r3, [r7, #16]

  /* pbuf types containing payloads? */
  if (type_internal & PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS) {
 802bcfc:	8a3b      	ldrh	r3, [r7, #16]
 802bcfe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 802bd02:	2b00      	cmp	r3, #0
 802bd04:	d00c      	beq.n	802bd20 <pbuf_add_header_impl+0x80>
    /* set new payload pointer */
    payload = (u8_t *)p->payload - header_size_increment;
 802bd06:	68fb      	ldr	r3, [r7, #12]
 802bd08:	685a      	ldr	r2, [r3, #4]
 802bd0a:	68bb      	ldr	r3, [r7, #8]
 802bd0c:	425b      	negs	r3, r3
 802bd0e:	4413      	add	r3, r2
 802bd10:	617b      	str	r3, [r7, #20]
    /* boundary check fails? */
    if ((u8_t *)payload < (u8_t *)p + SIZEOF_STRUCT_PBUF) {
 802bd12:	68fb      	ldr	r3, [r7, #12]
 802bd14:	3310      	adds	r3, #16
 802bd16:	697a      	ldr	r2, [r7, #20]
 802bd18:	429a      	cmp	r2, r3
 802bd1a:	d20d      	bcs.n	802bd38 <pbuf_add_header_impl+0x98>
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE,
                   ("pbuf_add_header: failed as %p < %p (not enough space for new header size)\n",
                    (void *)payload, (void *)((u8_t *)p + SIZEOF_STRUCT_PBUF)));
      /* bail out unsuccessfully */
      return 1;
 802bd1c:	2301      	movs	r3, #1
 802bd1e:	e01d      	b.n	802bd5c <pbuf_add_header_impl+0xbc>
    }
    /* pbuf types referring to external payloads? */
  } else {
    /* hide a header in the payload? */
    if (force) {
 802bd20:	79fb      	ldrb	r3, [r7, #7]
 802bd22:	2b00      	cmp	r3, #0
 802bd24:	d006      	beq.n	802bd34 <pbuf_add_header_impl+0x94>
      payload = (u8_t *)p->payload - header_size_increment;
 802bd26:	68fb      	ldr	r3, [r7, #12]
 802bd28:	685a      	ldr	r2, [r3, #4]
 802bd2a:	68bb      	ldr	r3, [r7, #8]
 802bd2c:	425b      	negs	r3, r3
 802bd2e:	4413      	add	r3, r2
 802bd30:	617b      	str	r3, [r7, #20]
 802bd32:	e001      	b.n	802bd38 <pbuf_add_header_impl+0x98>
    } else {
      /* cannot expand payload to front (yet!)
       * bail out unsuccessfully */
      return 1;
 802bd34:	2301      	movs	r3, #1
 802bd36:	e011      	b.n	802bd5c <pbuf_add_header_impl+0xbc>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_add_header: old %p new %p (%"U16_F")\n",
              (void *)p->payload, (void *)payload, increment_magnitude));

  /* modify pbuf fields */
  p->payload = payload;
 802bd38:	68fb      	ldr	r3, [r7, #12]
 802bd3a:	697a      	ldr	r2, [r7, #20]
 802bd3c:	605a      	str	r2, [r3, #4]
  p->len = (u16_t)(p->len + increment_magnitude);
 802bd3e:	68fb      	ldr	r3, [r7, #12]
 802bd40:	895a      	ldrh	r2, [r3, #10]
 802bd42:	8a7b      	ldrh	r3, [r7, #18]
 802bd44:	4413      	add	r3, r2
 802bd46:	b29a      	uxth	r2, r3
 802bd48:	68fb      	ldr	r3, [r7, #12]
 802bd4a:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len + increment_magnitude);
 802bd4c:	68fb      	ldr	r3, [r7, #12]
 802bd4e:	891a      	ldrh	r2, [r3, #8]
 802bd50:	8a7b      	ldrh	r3, [r7, #18]
 802bd52:	4413      	add	r3, r2
 802bd54:	b29a      	uxth	r2, r3
 802bd56:	68fb      	ldr	r3, [r7, #12]
 802bd58:	811a      	strh	r2, [r3, #8]


  return 0;
 802bd5a:	2300      	movs	r3, #0
}
 802bd5c:	4618      	mov	r0, r3
 802bd5e:	3718      	adds	r7, #24
 802bd60:	46bd      	mov	sp, r7
 802bd62:	bd80      	pop	{r7, pc}
 802bd64:	08038640 	.word	0x08038640
 802bd68:	080387a4 	.word	0x080387a4
 802bd6c:	080386a0 	.word	0x080386a0

0802bd70 <pbuf_add_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_add_header(struct pbuf *p, size_t header_size_increment)
{
 802bd70:	b580      	push	{r7, lr}
 802bd72:	b082      	sub	sp, #8
 802bd74:	af00      	add	r7, sp, #0
 802bd76:	6078      	str	r0, [r7, #4]
 802bd78:	6039      	str	r1, [r7, #0]
  return pbuf_add_header_impl(p, header_size_increment, 0);
 802bd7a:	2200      	movs	r2, #0
 802bd7c:	6839      	ldr	r1, [r7, #0]
 802bd7e:	6878      	ldr	r0, [r7, #4]
 802bd80:	f7ff ff8e 	bl	802bca0 <pbuf_add_header_impl>
 802bd84:	4603      	mov	r3, r0
}
 802bd86:	4618      	mov	r0, r3
 802bd88:	3708      	adds	r7, #8
 802bd8a:	46bd      	mov	sp, r7
 802bd8c:	bd80      	pop	{r7, pc}
	...

0802bd90 <pbuf_remove_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_remove_header(struct pbuf *p, size_t header_size_decrement)
{
 802bd90:	b580      	push	{r7, lr}
 802bd92:	b084      	sub	sp, #16
 802bd94:	af00      	add	r7, sp, #0
 802bd96:	6078      	str	r0, [r7, #4]
 802bd98:	6039      	str	r1, [r7, #0]
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 802bd9a:	687b      	ldr	r3, [r7, #4]
 802bd9c:	2b00      	cmp	r3, #0
 802bd9e:	d106      	bne.n	802bdae <pbuf_remove_header+0x1e>
 802bda0:	4b20      	ldr	r3, [pc, #128]	; (802be24 <pbuf_remove_header+0x94>)
 802bda2:	f240 224b 	movw	r2, #587	; 0x24b
 802bda6:	4920      	ldr	r1, [pc, #128]	; (802be28 <pbuf_remove_header+0x98>)
 802bda8:	4820      	ldr	r0, [pc, #128]	; (802be2c <pbuf_remove_header+0x9c>)
 802bdaa:	f00a f9f5 	bl	8036198 <iprintf>
  if ((p == NULL) || (header_size_decrement > 0xFFFF)) {
 802bdae:	687b      	ldr	r3, [r7, #4]
 802bdb0:	2b00      	cmp	r3, #0
 802bdb2:	d003      	beq.n	802bdbc <pbuf_remove_header+0x2c>
 802bdb4:	683b      	ldr	r3, [r7, #0]
 802bdb6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 802bdba:	d301      	bcc.n	802bdc0 <pbuf_remove_header+0x30>
    return 1;
 802bdbc:	2301      	movs	r3, #1
 802bdbe:	e02c      	b.n	802be1a <pbuf_remove_header+0x8a>
  }
  if (header_size_decrement == 0) {
 802bdc0:	683b      	ldr	r3, [r7, #0]
 802bdc2:	2b00      	cmp	r3, #0
 802bdc4:	d101      	bne.n	802bdca <pbuf_remove_header+0x3a>
    return 0;
 802bdc6:	2300      	movs	r3, #0
 802bdc8:	e027      	b.n	802be1a <pbuf_remove_header+0x8a>
  }

  increment_magnitude = (u16_t)header_size_decrement;
 802bdca:	683b      	ldr	r3, [r7, #0]
 802bdcc:	81fb      	strh	r3, [r7, #14]
  /* Check that we aren't going to move off the end of the pbuf */
  LWIP_ERROR("increment_magnitude <= p->len", (increment_magnitude <= p->len), return 1;);
 802bdce:	687b      	ldr	r3, [r7, #4]
 802bdd0:	895b      	ldrh	r3, [r3, #10]
 802bdd2:	89fa      	ldrh	r2, [r7, #14]
 802bdd4:	429a      	cmp	r2, r3
 802bdd6:	d908      	bls.n	802bdea <pbuf_remove_header+0x5a>
 802bdd8:	4b12      	ldr	r3, [pc, #72]	; (802be24 <pbuf_remove_header+0x94>)
 802bdda:	f240 2255 	movw	r2, #597	; 0x255
 802bdde:	4914      	ldr	r1, [pc, #80]	; (802be30 <pbuf_remove_header+0xa0>)
 802bde0:	4812      	ldr	r0, [pc, #72]	; (802be2c <pbuf_remove_header+0x9c>)
 802bde2:	f00a f9d9 	bl	8036198 <iprintf>
 802bde6:	2301      	movs	r3, #1
 802bde8:	e017      	b.n	802be1a <pbuf_remove_header+0x8a>

  /* remember current payload pointer */
  payload = p->payload;
 802bdea:	687b      	ldr	r3, [r7, #4]
 802bdec:	685b      	ldr	r3, [r3, #4]
 802bdee:	60bb      	str	r3, [r7, #8]
  LWIP_UNUSED_ARG(payload); /* only used in LWIP_DEBUGF below */

  /* increase payload pointer (guarded by length check above) */
  p->payload = (u8_t *)p->payload + header_size_decrement;
 802bdf0:	687b      	ldr	r3, [r7, #4]
 802bdf2:	685a      	ldr	r2, [r3, #4]
 802bdf4:	683b      	ldr	r3, [r7, #0]
 802bdf6:	441a      	add	r2, r3
 802bdf8:	687b      	ldr	r3, [r7, #4]
 802bdfa:	605a      	str	r2, [r3, #4]
  /* modify pbuf length fields */
  p->len = (u16_t)(p->len - increment_magnitude);
 802bdfc:	687b      	ldr	r3, [r7, #4]
 802bdfe:	895a      	ldrh	r2, [r3, #10]
 802be00:	89fb      	ldrh	r3, [r7, #14]
 802be02:	1ad3      	subs	r3, r2, r3
 802be04:	b29a      	uxth	r2, r3
 802be06:	687b      	ldr	r3, [r7, #4]
 802be08:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len - increment_magnitude);
 802be0a:	687b      	ldr	r3, [r7, #4]
 802be0c:	891a      	ldrh	r2, [r3, #8]
 802be0e:	89fb      	ldrh	r3, [r7, #14]
 802be10:	1ad3      	subs	r3, r2, r3
 802be12:	b29a      	uxth	r2, r3
 802be14:	687b      	ldr	r3, [r7, #4]
 802be16:	811a      	strh	r2, [r3, #8]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_remove_header: old %p new %p (%"U16_F")\n",
              (void *)payload, (void *)p->payload, increment_magnitude));

  return 0;
 802be18:	2300      	movs	r3, #0
}
 802be1a:	4618      	mov	r0, r3
 802be1c:	3710      	adds	r7, #16
 802be1e:	46bd      	mov	sp, r7
 802be20:	bd80      	pop	{r7, pc}
 802be22:	bf00      	nop
 802be24:	08038640 	.word	0x08038640
 802be28:	080387a4 	.word	0x080387a4
 802be2c:	080386a0 	.word	0x080386a0
 802be30:	080387b0 	.word	0x080387b0

0802be34 <pbuf_header_impl>:

static u8_t
pbuf_header_impl(struct pbuf *p, s16_t header_size_increment, u8_t force)
{
 802be34:	b580      	push	{r7, lr}
 802be36:	b082      	sub	sp, #8
 802be38:	af00      	add	r7, sp, #0
 802be3a:	6078      	str	r0, [r7, #4]
 802be3c:	460b      	mov	r3, r1
 802be3e:	807b      	strh	r3, [r7, #2]
 802be40:	4613      	mov	r3, r2
 802be42:	707b      	strb	r3, [r7, #1]
  if (header_size_increment < 0) {
 802be44:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 802be48:	2b00      	cmp	r3, #0
 802be4a:	da08      	bge.n	802be5e <pbuf_header_impl+0x2a>
    return pbuf_remove_header(p, (size_t) - header_size_increment);
 802be4c:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 802be50:	425b      	negs	r3, r3
 802be52:	4619      	mov	r1, r3
 802be54:	6878      	ldr	r0, [r7, #4]
 802be56:	f7ff ff9b 	bl	802bd90 <pbuf_remove_header>
 802be5a:	4603      	mov	r3, r0
 802be5c:	e007      	b.n	802be6e <pbuf_header_impl+0x3a>
  } else {
    return pbuf_add_header_impl(p, (size_t)header_size_increment, force);
 802be5e:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 802be62:	787a      	ldrb	r2, [r7, #1]
 802be64:	4619      	mov	r1, r3
 802be66:	6878      	ldr	r0, [r7, #4]
 802be68:	f7ff ff1a 	bl	802bca0 <pbuf_add_header_impl>
 802be6c:	4603      	mov	r3, r0
  }
}
 802be6e:	4618      	mov	r0, r3
 802be70:	3708      	adds	r7, #8
 802be72:	46bd      	mov	sp, r7
 802be74:	bd80      	pop	{r7, pc}

0802be76 <pbuf_header_force>:
 * Same as pbuf_header but does not check if 'header_size > 0' is allowed.
 * This is used internally only, to allow PBUF_REF for RX.
 */
u8_t
pbuf_header_force(struct pbuf *p, s16_t header_size_increment)
{
 802be76:	b580      	push	{r7, lr}
 802be78:	b082      	sub	sp, #8
 802be7a:	af00      	add	r7, sp, #0
 802be7c:	6078      	str	r0, [r7, #4]
 802be7e:	460b      	mov	r3, r1
 802be80:	807b      	strh	r3, [r7, #2]
  return pbuf_header_impl(p, header_size_increment, 1);
 802be82:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 802be86:	2201      	movs	r2, #1
 802be88:	4619      	mov	r1, r3
 802be8a:	6878      	ldr	r0, [r7, #4]
 802be8c:	f7ff ffd2 	bl	802be34 <pbuf_header_impl>
 802be90:	4603      	mov	r3, r0
}
 802be92:	4618      	mov	r0, r3
 802be94:	3708      	adds	r7, #8
 802be96:	46bd      	mov	sp, r7
 802be98:	bd80      	pop	{r7, pc}
	...

0802be9c <pbuf_free>:
 * 1->1->1 becomes .......
 *
 */
u8_t
pbuf_free(struct pbuf *p)
{
 802be9c:	b580      	push	{r7, lr}
 802be9e:	b088      	sub	sp, #32
 802bea0:	af00      	add	r7, sp, #0
 802bea2:	6078      	str	r0, [r7, #4]
  u8_t alloc_src;
  struct pbuf *q;
  u8_t count;

  if (p == NULL) {
 802bea4:	687b      	ldr	r3, [r7, #4]
 802bea6:	2b00      	cmp	r3, #0
 802bea8:	d10b      	bne.n	802bec2 <pbuf_free+0x26>
    LWIP_ASSERT("p != NULL", p != NULL);
 802beaa:	687b      	ldr	r3, [r7, #4]
 802beac:	2b00      	cmp	r3, #0
 802beae:	d106      	bne.n	802bebe <pbuf_free+0x22>
 802beb0:	4b3b      	ldr	r3, [pc, #236]	; (802bfa0 <pbuf_free+0x104>)
 802beb2:	f44f 7237 	mov.w	r2, #732	; 0x2dc
 802beb6:	493b      	ldr	r1, [pc, #236]	; (802bfa4 <pbuf_free+0x108>)
 802beb8:	483b      	ldr	r0, [pc, #236]	; (802bfa8 <pbuf_free+0x10c>)
 802beba:	f00a f96d 	bl	8036198 <iprintf>
    /* if assertions are disabled, proceed with debug output */
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_free(p == NULL) was called.\n"));
    return 0;
 802bebe:	2300      	movs	r3, #0
 802bec0:	e069      	b.n	802bf96 <pbuf_free+0xfa>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free(%p)\n", (void *)p));

  PERF_START;

  count = 0;
 802bec2:	2300      	movs	r3, #0
 802bec4:	77fb      	strb	r3, [r7, #31]
  /* de-allocate all consecutive pbufs from the head of the chain that
   * obtain a zero reference count after decrementing*/
  while (p != NULL) {
 802bec6:	e062      	b.n	802bf8e <pbuf_free+0xf2>
    LWIP_PBUF_REF_T ref;
    SYS_ARCH_DECL_PROTECT(old_level);
    /* Since decrementing ref cannot be guaranteed to be a single machine operation
     * we must protect it. We put the new ref into a local variable to prevent
     * further protection. */
    SYS_ARCH_PROTECT(old_level);
 802bec8:	f009 fefa 	bl	8035cc0 <sys_arch_protect>
 802becc:	61b8      	str	r0, [r7, #24]
    /* all pbufs in a chain are referenced at least once */
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
 802bece:	687b      	ldr	r3, [r7, #4]
 802bed0:	7b9b      	ldrb	r3, [r3, #14]
 802bed2:	2b00      	cmp	r3, #0
 802bed4:	d106      	bne.n	802bee4 <pbuf_free+0x48>
 802bed6:	4b32      	ldr	r3, [pc, #200]	; (802bfa0 <pbuf_free+0x104>)
 802bed8:	f240 22f1 	movw	r2, #753	; 0x2f1
 802bedc:	4933      	ldr	r1, [pc, #204]	; (802bfac <pbuf_free+0x110>)
 802bede:	4832      	ldr	r0, [pc, #200]	; (802bfa8 <pbuf_free+0x10c>)
 802bee0:	f00a f95a 	bl	8036198 <iprintf>
    /* decrease reference count (number of pointers to pbuf) */
    ref = --(p->ref);
 802bee4:	687b      	ldr	r3, [r7, #4]
 802bee6:	7b9b      	ldrb	r3, [r3, #14]
 802bee8:	3b01      	subs	r3, #1
 802beea:	b2da      	uxtb	r2, r3
 802beec:	687b      	ldr	r3, [r7, #4]
 802beee:	739a      	strb	r2, [r3, #14]
 802bef0:	687b      	ldr	r3, [r7, #4]
 802bef2:	7b9b      	ldrb	r3, [r3, #14]
 802bef4:	75fb      	strb	r3, [r7, #23]
    SYS_ARCH_UNPROTECT(old_level);
 802bef6:	69b8      	ldr	r0, [r7, #24]
 802bef8:	f009 fef0 	bl	8035cdc <sys_arch_unprotect>
    /* this pbuf is no longer referenced to? */
    if (ref == 0) {
 802befc:	7dfb      	ldrb	r3, [r7, #23]
 802befe:	2b00      	cmp	r3, #0
 802bf00:	d143      	bne.n	802bf8a <pbuf_free+0xee>
      /* remember next pbuf in chain for next iteration */
      q = p->next;
 802bf02:	687b      	ldr	r3, [r7, #4]
 802bf04:	681b      	ldr	r3, [r3, #0]
 802bf06:	613b      	str	r3, [r7, #16]
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: deallocating %p\n", (void *)p));
      alloc_src = pbuf_get_allocsrc(p);
 802bf08:	687b      	ldr	r3, [r7, #4]
 802bf0a:	7b1b      	ldrb	r3, [r3, #12]
 802bf0c:	f003 030f 	and.w	r3, r3, #15
 802bf10:	73fb      	strb	r3, [r7, #15]
#if LWIP_SUPPORT_CUSTOM_PBUF
      /* is this a custom pbuf? */
      if ((p->flags & PBUF_FLAG_IS_CUSTOM) != 0) {
 802bf12:	687b      	ldr	r3, [r7, #4]
 802bf14:	7b5b      	ldrb	r3, [r3, #13]
 802bf16:	f003 0302 	and.w	r3, r3, #2
 802bf1a:	2b00      	cmp	r3, #0
 802bf1c:	d011      	beq.n	802bf42 <pbuf_free+0xa6>
        struct pbuf_custom *pc = (struct pbuf_custom *)p;
 802bf1e:	687b      	ldr	r3, [r7, #4]
 802bf20:	60bb      	str	r3, [r7, #8]
        LWIP_ASSERT("pc->custom_free_function != NULL", pc->custom_free_function != NULL);
 802bf22:	68bb      	ldr	r3, [r7, #8]
 802bf24:	691b      	ldr	r3, [r3, #16]
 802bf26:	2b00      	cmp	r3, #0
 802bf28:	d106      	bne.n	802bf38 <pbuf_free+0x9c>
 802bf2a:	4b1d      	ldr	r3, [pc, #116]	; (802bfa0 <pbuf_free+0x104>)
 802bf2c:	f240 22ff 	movw	r2, #767	; 0x2ff
 802bf30:	491f      	ldr	r1, [pc, #124]	; (802bfb0 <pbuf_free+0x114>)
 802bf32:	481d      	ldr	r0, [pc, #116]	; (802bfa8 <pbuf_free+0x10c>)
 802bf34:	f00a f930 	bl	8036198 <iprintf>
        pc->custom_free_function(p);
 802bf38:	68bb      	ldr	r3, [r7, #8]
 802bf3a:	691b      	ldr	r3, [r3, #16]
 802bf3c:	6878      	ldr	r0, [r7, #4]
 802bf3e:	4798      	blx	r3
 802bf40:	e01d      	b.n	802bf7e <pbuf_free+0xe2>
      } else
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
      {
        /* is this a pbuf from the pool? */
        if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF_POOL) {
 802bf42:	7bfb      	ldrb	r3, [r7, #15]
 802bf44:	2b02      	cmp	r3, #2
 802bf46:	d104      	bne.n	802bf52 <pbuf_free+0xb6>
          memp_free(MEMP_PBUF_POOL, p);
 802bf48:	6879      	ldr	r1, [r7, #4]
 802bf4a:	200c      	movs	r0, #12
 802bf4c:	f7ff f902 	bl	802b154 <memp_free>
 802bf50:	e015      	b.n	802bf7e <pbuf_free+0xe2>
          /* is this a ROM or RAM referencing pbuf? */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF) {
 802bf52:	7bfb      	ldrb	r3, [r7, #15]
 802bf54:	2b01      	cmp	r3, #1
 802bf56:	d104      	bne.n	802bf62 <pbuf_free+0xc6>
          memp_free(MEMP_PBUF, p);
 802bf58:	6879      	ldr	r1, [r7, #4]
 802bf5a:	200b      	movs	r0, #11
 802bf5c:	f7ff f8fa 	bl	802b154 <memp_free>
 802bf60:	e00d      	b.n	802bf7e <pbuf_free+0xe2>
          /* type == PBUF_RAM */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) {
 802bf62:	7bfb      	ldrb	r3, [r7, #15]
 802bf64:	2b00      	cmp	r3, #0
 802bf66:	d103      	bne.n	802bf70 <pbuf_free+0xd4>
          mem_free(p);
 802bf68:	6878      	ldr	r0, [r7, #4]
 802bf6a:	f7fe fc77 	bl	802a85c <mem_free>
 802bf6e:	e006      	b.n	802bf7e <pbuf_free+0xe2>
        } else {
          /* @todo: support freeing other types */
          LWIP_ASSERT("invalid pbuf type", 0);
 802bf70:	4b0b      	ldr	r3, [pc, #44]	; (802bfa0 <pbuf_free+0x104>)
 802bf72:	f240 320f 	movw	r2, #783	; 0x30f
 802bf76:	490f      	ldr	r1, [pc, #60]	; (802bfb4 <pbuf_free+0x118>)
 802bf78:	480b      	ldr	r0, [pc, #44]	; (802bfa8 <pbuf_free+0x10c>)
 802bf7a:	f00a f90d 	bl	8036198 <iprintf>
        }
      }
      count++;
 802bf7e:	7ffb      	ldrb	r3, [r7, #31]
 802bf80:	3301      	adds	r3, #1
 802bf82:	77fb      	strb	r3, [r7, #31]
      /* proceed to next pbuf */
      p = q;
 802bf84:	693b      	ldr	r3, [r7, #16]
 802bf86:	607b      	str	r3, [r7, #4]
 802bf88:	e001      	b.n	802bf8e <pbuf_free+0xf2>
      /* p->ref > 0, this pbuf is still referenced to */
      /* (and so the remaining pbufs in chain as well) */
    } else {
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: %p has ref %"U16_F", ending here.\n", (void *)p, (u16_t)ref));
      /* stop walking through the chain */
      p = NULL;
 802bf8a:	2300      	movs	r3, #0
 802bf8c:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 802bf8e:	687b      	ldr	r3, [r7, #4]
 802bf90:	2b00      	cmp	r3, #0
 802bf92:	d199      	bne.n	802bec8 <pbuf_free+0x2c>
    }
  }
  PERF_STOP("pbuf_free");
  /* return number of de-allocated pbufs */
  return count;
 802bf94:	7ffb      	ldrb	r3, [r7, #31]
}
 802bf96:	4618      	mov	r0, r3
 802bf98:	3720      	adds	r7, #32
 802bf9a:	46bd      	mov	sp, r7
 802bf9c:	bd80      	pop	{r7, pc}
 802bf9e:	bf00      	nop
 802bfa0:	08038640 	.word	0x08038640
 802bfa4:	080387a4 	.word	0x080387a4
 802bfa8:	080386a0 	.word	0x080386a0
 802bfac:	080387d0 	.word	0x080387d0
 802bfb0:	080387e8 	.word	0x080387e8
 802bfb4:	0803880c 	.word	0x0803880c

0802bfb8 <pbuf_clen>:
 * @param p first pbuf of chain
 * @return the number of pbufs in a chain
 */
u16_t
pbuf_clen(const struct pbuf *p)
{
 802bfb8:	b480      	push	{r7}
 802bfba:	b085      	sub	sp, #20
 802bfbc:	af00      	add	r7, sp, #0
 802bfbe:	6078      	str	r0, [r7, #4]
  u16_t len;

  len = 0;
 802bfc0:	2300      	movs	r3, #0
 802bfc2:	81fb      	strh	r3, [r7, #14]
  while (p != NULL) {
 802bfc4:	e005      	b.n	802bfd2 <pbuf_clen+0x1a>
    ++len;
 802bfc6:	89fb      	ldrh	r3, [r7, #14]
 802bfc8:	3301      	adds	r3, #1
 802bfca:	81fb      	strh	r3, [r7, #14]
    p = p->next;
 802bfcc:	687b      	ldr	r3, [r7, #4]
 802bfce:	681b      	ldr	r3, [r3, #0]
 802bfd0:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 802bfd2:	687b      	ldr	r3, [r7, #4]
 802bfd4:	2b00      	cmp	r3, #0
 802bfd6:	d1f6      	bne.n	802bfc6 <pbuf_clen+0xe>
  }
  return len;
 802bfd8:	89fb      	ldrh	r3, [r7, #14]
}
 802bfda:	4618      	mov	r0, r3
 802bfdc:	3714      	adds	r7, #20
 802bfde:	46bd      	mov	sp, r7
 802bfe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 802bfe4:	4770      	bx	lr
	...

0802bfe8 <pbuf_ref>:
 * @param p pbuf to increase reference counter of
 *
 */
void
pbuf_ref(struct pbuf *p)
{
 802bfe8:	b580      	push	{r7, lr}
 802bfea:	b084      	sub	sp, #16
 802bfec:	af00      	add	r7, sp, #0
 802bfee:	6078      	str	r0, [r7, #4]
  /* pbuf given? */
  if (p != NULL) {
 802bff0:	687b      	ldr	r3, [r7, #4]
 802bff2:	2b00      	cmp	r3, #0
 802bff4:	d016      	beq.n	802c024 <pbuf_ref+0x3c>
    SYS_ARCH_SET(p->ref, (LWIP_PBUF_REF_T)(p->ref + 1));
 802bff6:	f009 fe63 	bl	8035cc0 <sys_arch_protect>
 802bffa:	60f8      	str	r0, [r7, #12]
 802bffc:	687b      	ldr	r3, [r7, #4]
 802bffe:	7b9b      	ldrb	r3, [r3, #14]
 802c000:	3301      	adds	r3, #1
 802c002:	b2da      	uxtb	r2, r3
 802c004:	687b      	ldr	r3, [r7, #4]
 802c006:	739a      	strb	r2, [r3, #14]
 802c008:	68f8      	ldr	r0, [r7, #12]
 802c00a:	f009 fe67 	bl	8035cdc <sys_arch_unprotect>
    LWIP_ASSERT("pbuf ref overflow", p->ref > 0);
 802c00e:	687b      	ldr	r3, [r7, #4]
 802c010:	7b9b      	ldrb	r3, [r3, #14]
 802c012:	2b00      	cmp	r3, #0
 802c014:	d106      	bne.n	802c024 <pbuf_ref+0x3c>
 802c016:	4b05      	ldr	r3, [pc, #20]	; (802c02c <pbuf_ref+0x44>)
 802c018:	f240 3242 	movw	r2, #834	; 0x342
 802c01c:	4904      	ldr	r1, [pc, #16]	; (802c030 <pbuf_ref+0x48>)
 802c01e:	4805      	ldr	r0, [pc, #20]	; (802c034 <pbuf_ref+0x4c>)
 802c020:	f00a f8ba 	bl	8036198 <iprintf>
  }
}
 802c024:	bf00      	nop
 802c026:	3710      	adds	r7, #16
 802c028:	46bd      	mov	sp, r7
 802c02a:	bd80      	pop	{r7, pc}
 802c02c:	08038640 	.word	0x08038640
 802c030:	08038820 	.word	0x08038820
 802c034:	080386a0 	.word	0x080386a0

0802c038 <pbuf_cat>:
 *
 * @see pbuf_chain()
 */
void
pbuf_cat(struct pbuf *h, struct pbuf *t)
{
 802c038:	b580      	push	{r7, lr}
 802c03a:	b084      	sub	sp, #16
 802c03c:	af00      	add	r7, sp, #0
 802c03e:	6078      	str	r0, [r7, #4]
 802c040:	6039      	str	r1, [r7, #0]
  struct pbuf *p;

  LWIP_ERROR("(h != NULL) && (t != NULL) (programmer violates API)",
 802c042:	687b      	ldr	r3, [r7, #4]
 802c044:	2b00      	cmp	r3, #0
 802c046:	d002      	beq.n	802c04e <pbuf_cat+0x16>
 802c048:	683b      	ldr	r3, [r7, #0]
 802c04a:	2b00      	cmp	r3, #0
 802c04c:	d107      	bne.n	802c05e <pbuf_cat+0x26>
 802c04e:	4b20      	ldr	r3, [pc, #128]	; (802c0d0 <pbuf_cat+0x98>)
 802c050:	f240 3259 	movw	r2, #857	; 0x359
 802c054:	491f      	ldr	r1, [pc, #124]	; (802c0d4 <pbuf_cat+0x9c>)
 802c056:	4820      	ldr	r0, [pc, #128]	; (802c0d8 <pbuf_cat+0xa0>)
 802c058:	f00a f89e 	bl	8036198 <iprintf>
 802c05c:	e034      	b.n	802c0c8 <pbuf_cat+0x90>
             ((h != NULL) && (t != NULL)), return;);

  /* proceed to last pbuf of chain */
  for (p = h; p->next != NULL; p = p->next) {
 802c05e:	687b      	ldr	r3, [r7, #4]
 802c060:	60fb      	str	r3, [r7, #12]
 802c062:	e00a      	b.n	802c07a <pbuf_cat+0x42>
    /* add total length of second chain to all totals of first chain */
    p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 802c064:	68fb      	ldr	r3, [r7, #12]
 802c066:	891a      	ldrh	r2, [r3, #8]
 802c068:	683b      	ldr	r3, [r7, #0]
 802c06a:	891b      	ldrh	r3, [r3, #8]
 802c06c:	4413      	add	r3, r2
 802c06e:	b29a      	uxth	r2, r3
 802c070:	68fb      	ldr	r3, [r7, #12]
 802c072:	811a      	strh	r2, [r3, #8]
  for (p = h; p->next != NULL; p = p->next) {
 802c074:	68fb      	ldr	r3, [r7, #12]
 802c076:	681b      	ldr	r3, [r3, #0]
 802c078:	60fb      	str	r3, [r7, #12]
 802c07a:	68fb      	ldr	r3, [r7, #12]
 802c07c:	681b      	ldr	r3, [r3, #0]
 802c07e:	2b00      	cmp	r3, #0
 802c080:	d1f0      	bne.n	802c064 <pbuf_cat+0x2c>
  }
  /* { p is last pbuf of first h chain, p->next == NULL } */
  LWIP_ASSERT("p->tot_len == p->len (of last pbuf in chain)", p->tot_len == p->len);
 802c082:	68fb      	ldr	r3, [r7, #12]
 802c084:	891a      	ldrh	r2, [r3, #8]
 802c086:	68fb      	ldr	r3, [r7, #12]
 802c088:	895b      	ldrh	r3, [r3, #10]
 802c08a:	429a      	cmp	r2, r3
 802c08c:	d006      	beq.n	802c09c <pbuf_cat+0x64>
 802c08e:	4b10      	ldr	r3, [pc, #64]	; (802c0d0 <pbuf_cat+0x98>)
 802c090:	f240 3262 	movw	r2, #866	; 0x362
 802c094:	4911      	ldr	r1, [pc, #68]	; (802c0dc <pbuf_cat+0xa4>)
 802c096:	4810      	ldr	r0, [pc, #64]	; (802c0d8 <pbuf_cat+0xa0>)
 802c098:	f00a f87e 	bl	8036198 <iprintf>
  LWIP_ASSERT("p->next == NULL", p->next == NULL);
 802c09c:	68fb      	ldr	r3, [r7, #12]
 802c09e:	681b      	ldr	r3, [r3, #0]
 802c0a0:	2b00      	cmp	r3, #0
 802c0a2:	d006      	beq.n	802c0b2 <pbuf_cat+0x7a>
 802c0a4:	4b0a      	ldr	r3, [pc, #40]	; (802c0d0 <pbuf_cat+0x98>)
 802c0a6:	f240 3263 	movw	r2, #867	; 0x363
 802c0aa:	490d      	ldr	r1, [pc, #52]	; (802c0e0 <pbuf_cat+0xa8>)
 802c0ac:	480a      	ldr	r0, [pc, #40]	; (802c0d8 <pbuf_cat+0xa0>)
 802c0ae:	f00a f873 	bl	8036198 <iprintf>
  /* add total length of second chain to last pbuf total of first chain */
  p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 802c0b2:	68fb      	ldr	r3, [r7, #12]
 802c0b4:	891a      	ldrh	r2, [r3, #8]
 802c0b6:	683b      	ldr	r3, [r7, #0]
 802c0b8:	891b      	ldrh	r3, [r3, #8]
 802c0ba:	4413      	add	r3, r2
 802c0bc:	b29a      	uxth	r2, r3
 802c0be:	68fb      	ldr	r3, [r7, #12]
 802c0c0:	811a      	strh	r2, [r3, #8]
  /* chain last pbuf of head (p) with first of tail (t) */
  p->next = t;
 802c0c2:	68fb      	ldr	r3, [r7, #12]
 802c0c4:	683a      	ldr	r2, [r7, #0]
 802c0c6:	601a      	str	r2, [r3, #0]
  /* p->next now references t, but the caller will drop its reference to t,
   * so netto there is no change to the reference count of t.
   */
}
 802c0c8:	3710      	adds	r7, #16
 802c0ca:	46bd      	mov	sp, r7
 802c0cc:	bd80      	pop	{r7, pc}
 802c0ce:	bf00      	nop
 802c0d0:	08038640 	.word	0x08038640
 802c0d4:	08038834 	.word	0x08038834
 802c0d8:	080386a0 	.word	0x080386a0
 802c0dc:	0803886c 	.word	0x0803886c
 802c0e0:	0803889c 	.word	0x0803889c

0802c0e4 <pbuf_copy>:
 *         ERR_ARG if one of the pbufs is NULL or p_to is not big
 *                 enough to hold p_from
 */
err_t
pbuf_copy(struct pbuf *p_to, const struct pbuf *p_from)
{
 802c0e4:	b580      	push	{r7, lr}
 802c0e6:	b086      	sub	sp, #24
 802c0e8:	af00      	add	r7, sp, #0
 802c0ea:	6078      	str	r0, [r7, #4]
 802c0ec:	6039      	str	r1, [r7, #0]
  size_t offset_to = 0, offset_from = 0, len;
 802c0ee:	2300      	movs	r3, #0
 802c0f0:	617b      	str	r3, [r7, #20]
 802c0f2:	2300      	movs	r3, #0
 802c0f4:	613b      	str	r3, [r7, #16]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy(%p, %p)\n",
              (const void *)p_to, (const void *)p_from));

  /* is the target big enough to hold the source? */
  LWIP_ERROR("pbuf_copy: target not big enough to hold source", ((p_to != NULL) &&
 802c0f6:	687b      	ldr	r3, [r7, #4]
 802c0f8:	2b00      	cmp	r3, #0
 802c0fa:	d008      	beq.n	802c10e <pbuf_copy+0x2a>
 802c0fc:	683b      	ldr	r3, [r7, #0]
 802c0fe:	2b00      	cmp	r3, #0
 802c100:	d005      	beq.n	802c10e <pbuf_copy+0x2a>
 802c102:	687b      	ldr	r3, [r7, #4]
 802c104:	891a      	ldrh	r2, [r3, #8]
 802c106:	683b      	ldr	r3, [r7, #0]
 802c108:	891b      	ldrh	r3, [r3, #8]
 802c10a:	429a      	cmp	r2, r3
 802c10c:	d209      	bcs.n	802c122 <pbuf_copy+0x3e>
 802c10e:	4b57      	ldr	r3, [pc, #348]	; (802c26c <pbuf_copy+0x188>)
 802c110:	f240 32c9 	movw	r2, #969	; 0x3c9
 802c114:	4956      	ldr	r1, [pc, #344]	; (802c270 <pbuf_copy+0x18c>)
 802c116:	4857      	ldr	r0, [pc, #348]	; (802c274 <pbuf_copy+0x190>)
 802c118:	f00a f83e 	bl	8036198 <iprintf>
 802c11c:	f06f 030f 	mvn.w	r3, #15
 802c120:	e09f      	b.n	802c262 <pbuf_copy+0x17e>
             (p_from != NULL) && (p_to->tot_len >= p_from->tot_len)), return ERR_ARG;);

  /* iterate through pbuf chain */
  do {
    /* copy one part of the original chain */
    if ((p_to->len - offset_to) >= (p_from->len - offset_from)) {
 802c122:	687b      	ldr	r3, [r7, #4]
 802c124:	895b      	ldrh	r3, [r3, #10]
 802c126:	461a      	mov	r2, r3
 802c128:	697b      	ldr	r3, [r7, #20]
 802c12a:	1ad2      	subs	r2, r2, r3
 802c12c:	683b      	ldr	r3, [r7, #0]
 802c12e:	895b      	ldrh	r3, [r3, #10]
 802c130:	4619      	mov	r1, r3
 802c132:	693b      	ldr	r3, [r7, #16]
 802c134:	1acb      	subs	r3, r1, r3
 802c136:	429a      	cmp	r2, r3
 802c138:	d306      	bcc.n	802c148 <pbuf_copy+0x64>
      /* complete current p_from fits into current p_to */
      len = p_from->len - offset_from;
 802c13a:	683b      	ldr	r3, [r7, #0]
 802c13c:	895b      	ldrh	r3, [r3, #10]
 802c13e:	461a      	mov	r2, r3
 802c140:	693b      	ldr	r3, [r7, #16]
 802c142:	1ad3      	subs	r3, r2, r3
 802c144:	60fb      	str	r3, [r7, #12]
 802c146:	e005      	b.n	802c154 <pbuf_copy+0x70>
    } else {
      /* current p_from does not fit into current p_to */
      len = p_to->len - offset_to;
 802c148:	687b      	ldr	r3, [r7, #4]
 802c14a:	895b      	ldrh	r3, [r3, #10]
 802c14c:	461a      	mov	r2, r3
 802c14e:	697b      	ldr	r3, [r7, #20]
 802c150:	1ad3      	subs	r3, r2, r3
 802c152:	60fb      	str	r3, [r7, #12]
    }
    MEMCPY((u8_t *)p_to->payload + offset_to, (u8_t *)p_from->payload + offset_from, len);
 802c154:	687b      	ldr	r3, [r7, #4]
 802c156:	685a      	ldr	r2, [r3, #4]
 802c158:	697b      	ldr	r3, [r7, #20]
 802c15a:	18d0      	adds	r0, r2, r3
 802c15c:	683b      	ldr	r3, [r7, #0]
 802c15e:	685a      	ldr	r2, [r3, #4]
 802c160:	693b      	ldr	r3, [r7, #16]
 802c162:	4413      	add	r3, r2
 802c164:	68fa      	ldr	r2, [r7, #12]
 802c166:	4619      	mov	r1, r3
 802c168:	f009 ff06 	bl	8035f78 <memcpy>
    offset_to += len;
 802c16c:	697a      	ldr	r2, [r7, #20]
 802c16e:	68fb      	ldr	r3, [r7, #12]
 802c170:	4413      	add	r3, r2
 802c172:	617b      	str	r3, [r7, #20]
    offset_from += len;
 802c174:	693a      	ldr	r2, [r7, #16]
 802c176:	68fb      	ldr	r3, [r7, #12]
 802c178:	4413      	add	r3, r2
 802c17a:	613b      	str	r3, [r7, #16]
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 802c17c:	687b      	ldr	r3, [r7, #4]
 802c17e:	895b      	ldrh	r3, [r3, #10]
 802c180:	461a      	mov	r2, r3
 802c182:	697b      	ldr	r3, [r7, #20]
 802c184:	4293      	cmp	r3, r2
 802c186:	d906      	bls.n	802c196 <pbuf_copy+0xb2>
 802c188:	4b38      	ldr	r3, [pc, #224]	; (802c26c <pbuf_copy+0x188>)
 802c18a:	f240 32d9 	movw	r2, #985	; 0x3d9
 802c18e:	493a      	ldr	r1, [pc, #232]	; (802c278 <pbuf_copy+0x194>)
 802c190:	4838      	ldr	r0, [pc, #224]	; (802c274 <pbuf_copy+0x190>)
 802c192:	f00a f801 	bl	8036198 <iprintf>
    LWIP_ASSERT("offset_from <= p_from->len", offset_from <= p_from->len);
 802c196:	683b      	ldr	r3, [r7, #0]
 802c198:	895b      	ldrh	r3, [r3, #10]
 802c19a:	461a      	mov	r2, r3
 802c19c:	693b      	ldr	r3, [r7, #16]
 802c19e:	4293      	cmp	r3, r2
 802c1a0:	d906      	bls.n	802c1b0 <pbuf_copy+0xcc>
 802c1a2:	4b32      	ldr	r3, [pc, #200]	; (802c26c <pbuf_copy+0x188>)
 802c1a4:	f240 32da 	movw	r2, #986	; 0x3da
 802c1a8:	4934      	ldr	r1, [pc, #208]	; (802c27c <pbuf_copy+0x198>)
 802c1aa:	4832      	ldr	r0, [pc, #200]	; (802c274 <pbuf_copy+0x190>)
 802c1ac:	f009 fff4 	bl	8036198 <iprintf>
    if (offset_from >= p_from->len) {
 802c1b0:	683b      	ldr	r3, [r7, #0]
 802c1b2:	895b      	ldrh	r3, [r3, #10]
 802c1b4:	461a      	mov	r2, r3
 802c1b6:	693b      	ldr	r3, [r7, #16]
 802c1b8:	4293      	cmp	r3, r2
 802c1ba:	d304      	bcc.n	802c1c6 <pbuf_copy+0xe2>
      /* on to next p_from (if any) */
      offset_from = 0;
 802c1bc:	2300      	movs	r3, #0
 802c1be:	613b      	str	r3, [r7, #16]
      p_from = p_from->next;
 802c1c0:	683b      	ldr	r3, [r7, #0]
 802c1c2:	681b      	ldr	r3, [r3, #0]
 802c1c4:	603b      	str	r3, [r7, #0]
    }
    if (offset_to == p_to->len) {
 802c1c6:	687b      	ldr	r3, [r7, #4]
 802c1c8:	895b      	ldrh	r3, [r3, #10]
 802c1ca:	461a      	mov	r2, r3
 802c1cc:	697b      	ldr	r3, [r7, #20]
 802c1ce:	4293      	cmp	r3, r2
 802c1d0:	d114      	bne.n	802c1fc <pbuf_copy+0x118>
      /* on to next p_to (if any) */
      offset_to = 0;
 802c1d2:	2300      	movs	r3, #0
 802c1d4:	617b      	str	r3, [r7, #20]
      p_to = p_to->next;
 802c1d6:	687b      	ldr	r3, [r7, #4]
 802c1d8:	681b      	ldr	r3, [r3, #0]
 802c1da:	607b      	str	r3, [r7, #4]
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL), return ERR_ARG;);
 802c1dc:	687b      	ldr	r3, [r7, #4]
 802c1de:	2b00      	cmp	r3, #0
 802c1e0:	d10c      	bne.n	802c1fc <pbuf_copy+0x118>
 802c1e2:	683b      	ldr	r3, [r7, #0]
 802c1e4:	2b00      	cmp	r3, #0
 802c1e6:	d009      	beq.n	802c1fc <pbuf_copy+0x118>
 802c1e8:	4b20      	ldr	r3, [pc, #128]	; (802c26c <pbuf_copy+0x188>)
 802c1ea:	f44f 7279 	mov.w	r2, #996	; 0x3e4
 802c1ee:	4924      	ldr	r1, [pc, #144]	; (802c280 <pbuf_copy+0x19c>)
 802c1f0:	4820      	ldr	r0, [pc, #128]	; (802c274 <pbuf_copy+0x190>)
 802c1f2:	f009 ffd1 	bl	8036198 <iprintf>
 802c1f6:	f06f 030f 	mvn.w	r3, #15
 802c1fa:	e032      	b.n	802c262 <pbuf_copy+0x17e>
    }

    if ((p_from != NULL) && (p_from->len == p_from->tot_len)) {
 802c1fc:	683b      	ldr	r3, [r7, #0]
 802c1fe:	2b00      	cmp	r3, #0
 802c200:	d013      	beq.n	802c22a <pbuf_copy+0x146>
 802c202:	683b      	ldr	r3, [r7, #0]
 802c204:	895a      	ldrh	r2, [r3, #10]
 802c206:	683b      	ldr	r3, [r7, #0]
 802c208:	891b      	ldrh	r3, [r3, #8]
 802c20a:	429a      	cmp	r2, r3
 802c20c:	d10d      	bne.n	802c22a <pbuf_copy+0x146>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 802c20e:	683b      	ldr	r3, [r7, #0]
 802c210:	681b      	ldr	r3, [r3, #0]
 802c212:	2b00      	cmp	r3, #0
 802c214:	d009      	beq.n	802c22a <pbuf_copy+0x146>
 802c216:	4b15      	ldr	r3, [pc, #84]	; (802c26c <pbuf_copy+0x188>)
 802c218:	f240 32e9 	movw	r2, #1001	; 0x3e9
 802c21c:	4919      	ldr	r1, [pc, #100]	; (802c284 <pbuf_copy+0x1a0>)
 802c21e:	4815      	ldr	r0, [pc, #84]	; (802c274 <pbuf_copy+0x190>)
 802c220:	f009 ffba 	bl	8036198 <iprintf>
 802c224:	f06f 0305 	mvn.w	r3, #5
 802c228:	e01b      	b.n	802c262 <pbuf_copy+0x17e>
                 (p_from->next == NULL), return ERR_VAL;);
    }
    if ((p_to != NULL) && (p_to->len == p_to->tot_len)) {
 802c22a:	687b      	ldr	r3, [r7, #4]
 802c22c:	2b00      	cmp	r3, #0
 802c22e:	d013      	beq.n	802c258 <pbuf_copy+0x174>
 802c230:	687b      	ldr	r3, [r7, #4]
 802c232:	895a      	ldrh	r2, [r3, #10]
 802c234:	687b      	ldr	r3, [r7, #4]
 802c236:	891b      	ldrh	r3, [r3, #8]
 802c238:	429a      	cmp	r2, r3
 802c23a:	d10d      	bne.n	802c258 <pbuf_copy+0x174>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 802c23c:	687b      	ldr	r3, [r7, #4]
 802c23e:	681b      	ldr	r3, [r3, #0]
 802c240:	2b00      	cmp	r3, #0
 802c242:	d009      	beq.n	802c258 <pbuf_copy+0x174>
 802c244:	4b09      	ldr	r3, [pc, #36]	; (802c26c <pbuf_copy+0x188>)
 802c246:	f240 32ee 	movw	r2, #1006	; 0x3ee
 802c24a:	490e      	ldr	r1, [pc, #56]	; (802c284 <pbuf_copy+0x1a0>)
 802c24c:	4809      	ldr	r0, [pc, #36]	; (802c274 <pbuf_copy+0x190>)
 802c24e:	f009 ffa3 	bl	8036198 <iprintf>
 802c252:	f06f 0305 	mvn.w	r3, #5
 802c256:	e004      	b.n	802c262 <pbuf_copy+0x17e>
                 (p_to->next == NULL), return ERR_VAL;);
    }
  } while (p_from);
 802c258:	683b      	ldr	r3, [r7, #0]
 802c25a:	2b00      	cmp	r3, #0
 802c25c:	f47f af61 	bne.w	802c122 <pbuf_copy+0x3e>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy: end of chain reached.\n"));
  return ERR_OK;
 802c260:	2300      	movs	r3, #0
}
 802c262:	4618      	mov	r0, r3
 802c264:	3718      	adds	r7, #24
 802c266:	46bd      	mov	sp, r7
 802c268:	bd80      	pop	{r7, pc}
 802c26a:	bf00      	nop
 802c26c:	08038640 	.word	0x08038640
 802c270:	080388e8 	.word	0x080388e8
 802c274:	080386a0 	.word	0x080386a0
 802c278:	08038918 	.word	0x08038918
 802c27c:	08038930 	.word	0x08038930
 802c280:	0803894c 	.word	0x0803894c
 802c284:	0803895c 	.word	0x0803895c

0802c288 <pbuf_copy_partial>:
 * @param offset offset into the packet buffer from where to begin copying len bytes
 * @return the number of bytes copied, or 0 on failure
 */
u16_t
pbuf_copy_partial(const struct pbuf *buf, void *dataptr, u16_t len, u16_t offset)
{
 802c288:	b580      	push	{r7, lr}
 802c28a:	b088      	sub	sp, #32
 802c28c:	af00      	add	r7, sp, #0
 802c28e:	60f8      	str	r0, [r7, #12]
 802c290:	60b9      	str	r1, [r7, #8]
 802c292:	4611      	mov	r1, r2
 802c294:	461a      	mov	r2, r3
 802c296:	460b      	mov	r3, r1
 802c298:	80fb      	strh	r3, [r7, #6]
 802c29a:	4613      	mov	r3, r2
 802c29c:	80bb      	strh	r3, [r7, #4]
  const struct pbuf *p;
  u16_t left = 0;
 802c29e:	2300      	movs	r3, #0
 802c2a0:	837b      	strh	r3, [r7, #26]
  u16_t buf_copy_len;
  u16_t copied_total = 0;
 802c2a2:	2300      	movs	r3, #0
 802c2a4:	82fb      	strh	r3, [r7, #22]

  LWIP_ERROR("pbuf_copy_partial: invalid buf", (buf != NULL), return 0;);
 802c2a6:	68fb      	ldr	r3, [r7, #12]
 802c2a8:	2b00      	cmp	r3, #0
 802c2aa:	d108      	bne.n	802c2be <pbuf_copy_partial+0x36>
 802c2ac:	4b2b      	ldr	r3, [pc, #172]	; (802c35c <pbuf_copy_partial+0xd4>)
 802c2ae:	f240 420a 	movw	r2, #1034	; 0x40a
 802c2b2:	492b      	ldr	r1, [pc, #172]	; (802c360 <pbuf_copy_partial+0xd8>)
 802c2b4:	482b      	ldr	r0, [pc, #172]	; (802c364 <pbuf_copy_partial+0xdc>)
 802c2b6:	f009 ff6f 	bl	8036198 <iprintf>
 802c2ba:	2300      	movs	r3, #0
 802c2bc:	e04a      	b.n	802c354 <pbuf_copy_partial+0xcc>
  LWIP_ERROR("pbuf_copy_partial: invalid dataptr", (dataptr != NULL), return 0;);
 802c2be:	68bb      	ldr	r3, [r7, #8]
 802c2c0:	2b00      	cmp	r3, #0
 802c2c2:	d108      	bne.n	802c2d6 <pbuf_copy_partial+0x4e>
 802c2c4:	4b25      	ldr	r3, [pc, #148]	; (802c35c <pbuf_copy_partial+0xd4>)
 802c2c6:	f240 420b 	movw	r2, #1035	; 0x40b
 802c2ca:	4927      	ldr	r1, [pc, #156]	; (802c368 <pbuf_copy_partial+0xe0>)
 802c2cc:	4825      	ldr	r0, [pc, #148]	; (802c364 <pbuf_copy_partial+0xdc>)
 802c2ce:	f009 ff63 	bl	8036198 <iprintf>
 802c2d2:	2300      	movs	r3, #0
 802c2d4:	e03e      	b.n	802c354 <pbuf_copy_partial+0xcc>

  /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. */
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 802c2d6:	68fb      	ldr	r3, [r7, #12]
 802c2d8:	61fb      	str	r3, [r7, #28]
 802c2da:	e034      	b.n	802c346 <pbuf_copy_partial+0xbe>
    if ((offset != 0) && (offset >= p->len)) {
 802c2dc:	88bb      	ldrh	r3, [r7, #4]
 802c2de:	2b00      	cmp	r3, #0
 802c2e0:	d00a      	beq.n	802c2f8 <pbuf_copy_partial+0x70>
 802c2e2:	69fb      	ldr	r3, [r7, #28]
 802c2e4:	895b      	ldrh	r3, [r3, #10]
 802c2e6:	88ba      	ldrh	r2, [r7, #4]
 802c2e8:	429a      	cmp	r2, r3
 802c2ea:	d305      	bcc.n	802c2f8 <pbuf_copy_partial+0x70>
      /* don't copy from this buffer -> on to the next */
      offset = (u16_t)(offset - p->len);
 802c2ec:	69fb      	ldr	r3, [r7, #28]
 802c2ee:	895b      	ldrh	r3, [r3, #10]
 802c2f0:	88ba      	ldrh	r2, [r7, #4]
 802c2f2:	1ad3      	subs	r3, r2, r3
 802c2f4:	80bb      	strh	r3, [r7, #4]
 802c2f6:	e023      	b.n	802c340 <pbuf_copy_partial+0xb8>
    } else {
      /* copy from this buffer. maybe only partially. */
      buf_copy_len = (u16_t)(p->len - offset);
 802c2f8:	69fb      	ldr	r3, [r7, #28]
 802c2fa:	895a      	ldrh	r2, [r3, #10]
 802c2fc:	88bb      	ldrh	r3, [r7, #4]
 802c2fe:	1ad3      	subs	r3, r2, r3
 802c300:	833b      	strh	r3, [r7, #24]
      if (buf_copy_len > len) {
 802c302:	8b3a      	ldrh	r2, [r7, #24]
 802c304:	88fb      	ldrh	r3, [r7, #6]
 802c306:	429a      	cmp	r2, r3
 802c308:	d901      	bls.n	802c30e <pbuf_copy_partial+0x86>
        buf_copy_len = len;
 802c30a:	88fb      	ldrh	r3, [r7, #6]
 802c30c:	833b      	strh	r3, [r7, #24]
      }
      /* copy the necessary parts of the buffer */
      MEMCPY(&((char *)dataptr)[left], &((char *)p->payload)[offset], buf_copy_len);
 802c30e:	8b7b      	ldrh	r3, [r7, #26]
 802c310:	68ba      	ldr	r2, [r7, #8]
 802c312:	18d0      	adds	r0, r2, r3
 802c314:	69fb      	ldr	r3, [r7, #28]
 802c316:	685a      	ldr	r2, [r3, #4]
 802c318:	88bb      	ldrh	r3, [r7, #4]
 802c31a:	4413      	add	r3, r2
 802c31c:	8b3a      	ldrh	r2, [r7, #24]
 802c31e:	4619      	mov	r1, r3
 802c320:	f009 fe2a 	bl	8035f78 <memcpy>
      copied_total = (u16_t)(copied_total + buf_copy_len);
 802c324:	8afa      	ldrh	r2, [r7, #22]
 802c326:	8b3b      	ldrh	r3, [r7, #24]
 802c328:	4413      	add	r3, r2
 802c32a:	82fb      	strh	r3, [r7, #22]
      left = (u16_t)(left + buf_copy_len);
 802c32c:	8b7a      	ldrh	r2, [r7, #26]
 802c32e:	8b3b      	ldrh	r3, [r7, #24]
 802c330:	4413      	add	r3, r2
 802c332:	837b      	strh	r3, [r7, #26]
      len = (u16_t)(len - buf_copy_len);
 802c334:	88fa      	ldrh	r2, [r7, #6]
 802c336:	8b3b      	ldrh	r3, [r7, #24]
 802c338:	1ad3      	subs	r3, r2, r3
 802c33a:	80fb      	strh	r3, [r7, #6]
      offset = 0;
 802c33c:	2300      	movs	r3, #0
 802c33e:	80bb      	strh	r3, [r7, #4]
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 802c340:	69fb      	ldr	r3, [r7, #28]
 802c342:	681b      	ldr	r3, [r3, #0]
 802c344:	61fb      	str	r3, [r7, #28]
 802c346:	88fb      	ldrh	r3, [r7, #6]
 802c348:	2b00      	cmp	r3, #0
 802c34a:	d002      	beq.n	802c352 <pbuf_copy_partial+0xca>
 802c34c:	69fb      	ldr	r3, [r7, #28]
 802c34e:	2b00      	cmp	r3, #0
 802c350:	d1c4      	bne.n	802c2dc <pbuf_copy_partial+0x54>
    }
  }
  return copied_total;
 802c352:	8afb      	ldrh	r3, [r7, #22]
}
 802c354:	4618      	mov	r0, r3
 802c356:	3720      	adds	r7, #32
 802c358:	46bd      	mov	sp, r7
 802c35a:	bd80      	pop	{r7, pc}
 802c35c:	08038640 	.word	0x08038640
 802c360:	08038988 	.word	0x08038988
 802c364:	080386a0 	.word	0x080386a0
 802c368:	080389a8 	.word	0x080389a8

0802c36c <pbuf_clone>:
 *
 * @return a new pbuf or NULL if allocation fails
 */
struct pbuf *
pbuf_clone(pbuf_layer layer, pbuf_type type, struct pbuf *p)
{
 802c36c:	b580      	push	{r7, lr}
 802c36e:	b084      	sub	sp, #16
 802c370:	af00      	add	r7, sp, #0
 802c372:	4603      	mov	r3, r0
 802c374:	603a      	str	r2, [r7, #0]
 802c376:	71fb      	strb	r3, [r7, #7]
 802c378:	460b      	mov	r3, r1
 802c37a:	80bb      	strh	r3, [r7, #4]
  struct pbuf *q;
  err_t err;
  q = pbuf_alloc(layer, p->tot_len, type);
 802c37c:	683b      	ldr	r3, [r7, #0]
 802c37e:	8919      	ldrh	r1, [r3, #8]
 802c380:	88ba      	ldrh	r2, [r7, #4]
 802c382:	79fb      	ldrb	r3, [r7, #7]
 802c384:	4618      	mov	r0, r3
 802c386:	f7ff faa5 	bl	802b8d4 <pbuf_alloc>
 802c38a:	60f8      	str	r0, [r7, #12]
  if (q == NULL) {
 802c38c:	68fb      	ldr	r3, [r7, #12]
 802c38e:	2b00      	cmp	r3, #0
 802c390:	d101      	bne.n	802c396 <pbuf_clone+0x2a>
    return NULL;
 802c392:	2300      	movs	r3, #0
 802c394:	e011      	b.n	802c3ba <pbuf_clone+0x4e>
  }
  err = pbuf_copy(q, p);
 802c396:	6839      	ldr	r1, [r7, #0]
 802c398:	68f8      	ldr	r0, [r7, #12]
 802c39a:	f7ff fea3 	bl	802c0e4 <pbuf_copy>
 802c39e:	4603      	mov	r3, r0
 802c3a0:	72fb      	strb	r3, [r7, #11]
  LWIP_UNUSED_ARG(err); /* in case of LWIP_NOASSERT */
  LWIP_ASSERT("pbuf_copy failed", err == ERR_OK);
 802c3a2:	f997 300b 	ldrsb.w	r3, [r7, #11]
 802c3a6:	2b00      	cmp	r3, #0
 802c3a8:	d006      	beq.n	802c3b8 <pbuf_clone+0x4c>
 802c3aa:	4b06      	ldr	r3, [pc, #24]	; (802c3c4 <pbuf_clone+0x58>)
 802c3ac:	f240 5224 	movw	r2, #1316	; 0x524
 802c3b0:	4905      	ldr	r1, [pc, #20]	; (802c3c8 <pbuf_clone+0x5c>)
 802c3b2:	4806      	ldr	r0, [pc, #24]	; (802c3cc <pbuf_clone+0x60>)
 802c3b4:	f009 fef0 	bl	8036198 <iprintf>
  return q;
 802c3b8:	68fb      	ldr	r3, [r7, #12]
}
 802c3ba:	4618      	mov	r0, r3
 802c3bc:	3710      	adds	r7, #16
 802c3be:	46bd      	mov	sp, r7
 802c3c0:	bd80      	pop	{r7, pc}
 802c3c2:	bf00      	nop
 802c3c4:	08038640 	.word	0x08038640
 802c3c8:	08038ab4 	.word	0x08038ab4
 802c3cc:	080386a0 	.word	0x080386a0

0802c3d0 <stats_init>:

struct stats_ lwip_stats;

void
stats_init(void)
{
 802c3d0:	b480      	push	{r7}
 802c3d2:	af00      	add	r7, sp, #0
#ifdef LWIP_DEBUG
#if MEM_STATS
  lwip_stats.mem.name = "MEM";
#endif /* MEM_STATS */
#endif /* LWIP_DEBUG */
}
 802c3d4:	bf00      	nop
 802c3d6:	46bd      	mov	sp, r7
 802c3d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 802c3dc:	4770      	bx	lr
	...

0802c3e0 <tcp_init>:
/**
 * Initialize this module.
 */
void
tcp_init(void)
{
 802c3e0:	b580      	push	{r7, lr}
 802c3e2:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  tcp_port = TCP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 802c3e4:	f009 fef0 	bl	80361c8 <rand>
 802c3e8:	4603      	mov	r3, r0
 802c3ea:	b29b      	uxth	r3, r3
 802c3ec:	f3c3 030d 	ubfx	r3, r3, #0, #14
 802c3f0:	b29b      	uxth	r3, r3
 802c3f2:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 802c3f6:	b29a      	uxth	r2, r3
 802c3f8:	4b01      	ldr	r3, [pc, #4]	; (802c400 <tcp_init+0x20>)
 802c3fa:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 802c3fc:	bf00      	nop
 802c3fe:	bd80      	pop	{r7, pc}
 802c400:	20000028 	.word	0x20000028

0802c404 <tcp_free>:

/** Free a tcp pcb */
void
tcp_free(struct tcp_pcb *pcb)
{
 802c404:	b580      	push	{r7, lr}
 802c406:	b082      	sub	sp, #8
 802c408:	af00      	add	r7, sp, #0
 802c40a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 802c40c:	687b      	ldr	r3, [r7, #4]
 802c40e:	7d1b      	ldrb	r3, [r3, #20]
 802c410:	2b01      	cmp	r3, #1
 802c412:	d105      	bne.n	802c420 <tcp_free+0x1c>
 802c414:	4b06      	ldr	r3, [pc, #24]	; (802c430 <tcp_free+0x2c>)
 802c416:	22d4      	movs	r2, #212	; 0xd4
 802c418:	4906      	ldr	r1, [pc, #24]	; (802c434 <tcp_free+0x30>)
 802c41a:	4807      	ldr	r0, [pc, #28]	; (802c438 <tcp_free+0x34>)
 802c41c:	f009 febc 	bl	8036198 <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB, pcb);
 802c420:	6879      	ldr	r1, [r7, #4]
 802c422:	2001      	movs	r0, #1
 802c424:	f7fe fe96 	bl	802b154 <memp_free>
}
 802c428:	bf00      	nop
 802c42a:	3708      	adds	r7, #8
 802c42c:	46bd      	mov	sp, r7
 802c42e:	bd80      	pop	{r7, pc}
 802c430:	08038b40 	.word	0x08038b40
 802c434:	08038b70 	.word	0x08038b70
 802c438:	08038b84 	.word	0x08038b84

0802c43c <tcp_free_listen>:

/** Free a tcp listen pcb */
static void
tcp_free_listen(struct tcp_pcb *pcb)
{
 802c43c:	b580      	push	{r7, lr}
 802c43e:	b082      	sub	sp, #8
 802c440:	af00      	add	r7, sp, #0
 802c442:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free_listen: !LISTEN", pcb->state != LISTEN);
 802c444:	687b      	ldr	r3, [r7, #4]
 802c446:	7d1b      	ldrb	r3, [r3, #20]
 802c448:	2b01      	cmp	r3, #1
 802c44a:	d105      	bne.n	802c458 <tcp_free_listen+0x1c>
 802c44c:	4b06      	ldr	r3, [pc, #24]	; (802c468 <tcp_free_listen+0x2c>)
 802c44e:	22df      	movs	r2, #223	; 0xdf
 802c450:	4906      	ldr	r1, [pc, #24]	; (802c46c <tcp_free_listen+0x30>)
 802c452:	4807      	ldr	r0, [pc, #28]	; (802c470 <tcp_free_listen+0x34>)
 802c454:	f009 fea0 	bl	8036198 <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB_LISTEN, pcb);
 802c458:	6879      	ldr	r1, [r7, #4]
 802c45a:	2002      	movs	r0, #2
 802c45c:	f7fe fe7a 	bl	802b154 <memp_free>
}
 802c460:	bf00      	nop
 802c462:	3708      	adds	r7, #8
 802c464:	46bd      	mov	sp, r7
 802c466:	bd80      	pop	{r7, pc}
 802c468:	08038b40 	.word	0x08038b40
 802c46c:	08038bac 	.word	0x08038bac
 802c470:	08038b84 	.word	0x08038b84

0802c474 <tcp_tmr>:
/**
 * Called periodically to dispatch TCP timers.
 */
void
tcp_tmr(void)
{
 802c474:	b580      	push	{r7, lr}
 802c476:	af00      	add	r7, sp, #0
  /* Call tcp_fasttmr() every 250 ms */
  tcp_fasttmr();
 802c478:	f001 f8a6 	bl	802d5c8 <tcp_fasttmr>

  if (++tcp_timer & 1) {
 802c47c:	4b07      	ldr	r3, [pc, #28]	; (802c49c <tcp_tmr+0x28>)
 802c47e:	781b      	ldrb	r3, [r3, #0]
 802c480:	3301      	adds	r3, #1
 802c482:	b2da      	uxtb	r2, r3
 802c484:	4b05      	ldr	r3, [pc, #20]	; (802c49c <tcp_tmr+0x28>)
 802c486:	701a      	strb	r2, [r3, #0]
 802c488:	4b04      	ldr	r3, [pc, #16]	; (802c49c <tcp_tmr+0x28>)
 802c48a:	781b      	ldrb	r3, [r3, #0]
 802c48c:	f003 0301 	and.w	r3, r3, #1
 802c490:	2b00      	cmp	r3, #0
 802c492:	d001      	beq.n	802c498 <tcp_tmr+0x24>
    /* Call tcp_slowtmr() every 500 ms, i.e., every other timer
       tcp_tmr() is called. */
    tcp_slowtmr();
 802c494:	f000 fd58 	bl	802cf48 <tcp_slowtmr>
  }
}
 802c498:	bf00      	nop
 802c49a:	bd80      	pop	{r7, pc}
 802c49c:	2000ee21 	.word	0x2000ee21

0802c4a0 <tcp_remove_listener>:
/** Called when a listen pcb is closed. Iterates one pcb list and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_remove_listener(struct tcp_pcb *list, struct tcp_pcb_listen *lpcb)
{
 802c4a0:	b580      	push	{r7, lr}
 802c4a2:	b084      	sub	sp, #16
 802c4a4:	af00      	add	r7, sp, #0
 802c4a6:	6078      	str	r0, [r7, #4]
 802c4a8:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;

  LWIP_ASSERT("tcp_remove_listener: invalid listener", lpcb != NULL);
 802c4aa:	683b      	ldr	r3, [r7, #0]
 802c4ac:	2b00      	cmp	r3, #0
 802c4ae:	d105      	bne.n	802c4bc <tcp_remove_listener+0x1c>
 802c4b0:	4b0d      	ldr	r3, [pc, #52]	; (802c4e8 <tcp_remove_listener+0x48>)
 802c4b2:	22ff      	movs	r2, #255	; 0xff
 802c4b4:	490d      	ldr	r1, [pc, #52]	; (802c4ec <tcp_remove_listener+0x4c>)
 802c4b6:	480e      	ldr	r0, [pc, #56]	; (802c4f0 <tcp_remove_listener+0x50>)
 802c4b8:	f009 fe6e 	bl	8036198 <iprintf>

  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 802c4bc:	687b      	ldr	r3, [r7, #4]
 802c4be:	60fb      	str	r3, [r7, #12]
 802c4c0:	e00a      	b.n	802c4d8 <tcp_remove_listener+0x38>
    if (pcb->listener == lpcb) {
 802c4c2:	68fb      	ldr	r3, [r7, #12]
 802c4c4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 802c4c6:	683a      	ldr	r2, [r7, #0]
 802c4c8:	429a      	cmp	r2, r3
 802c4ca:	d102      	bne.n	802c4d2 <tcp_remove_listener+0x32>
      pcb->listener = NULL;
 802c4cc:	68fb      	ldr	r3, [r7, #12]
 802c4ce:	2200      	movs	r2, #0
 802c4d0:	67da      	str	r2, [r3, #124]	; 0x7c
  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 802c4d2:	68fb      	ldr	r3, [r7, #12]
 802c4d4:	68db      	ldr	r3, [r3, #12]
 802c4d6:	60fb      	str	r3, [r7, #12]
 802c4d8:	68fb      	ldr	r3, [r7, #12]
 802c4da:	2b00      	cmp	r3, #0
 802c4dc:	d1f1      	bne.n	802c4c2 <tcp_remove_listener+0x22>
    }
  }
}
 802c4de:	bf00      	nop
 802c4e0:	bf00      	nop
 802c4e2:	3710      	adds	r7, #16
 802c4e4:	46bd      	mov	sp, r7
 802c4e6:	bd80      	pop	{r7, pc}
 802c4e8:	08038b40 	.word	0x08038b40
 802c4ec:	08038bc8 	.word	0x08038bc8
 802c4f0:	08038b84 	.word	0x08038b84

0802c4f4 <tcp_listen_closed>:
/** Called when a listen pcb is closed. Iterates all pcb lists and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_listen_closed(struct tcp_pcb *pcb)
{
 802c4f4:	b580      	push	{r7, lr}
 802c4f6:	b084      	sub	sp, #16
 802c4f8:	af00      	add	r7, sp, #0
 802c4fa:	6078      	str	r0, [r7, #4]
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
  size_t i;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 802c4fc:	687b      	ldr	r3, [r7, #4]
 802c4fe:	2b00      	cmp	r3, #0
 802c500:	d106      	bne.n	802c510 <tcp_listen_closed+0x1c>
 802c502:	4b14      	ldr	r3, [pc, #80]	; (802c554 <tcp_listen_closed+0x60>)
 802c504:	f240 1211 	movw	r2, #273	; 0x111
 802c508:	4913      	ldr	r1, [pc, #76]	; (802c558 <tcp_listen_closed+0x64>)
 802c50a:	4814      	ldr	r0, [pc, #80]	; (802c55c <tcp_listen_closed+0x68>)
 802c50c:	f009 fe44 	bl	8036198 <iprintf>
  LWIP_ASSERT("pcb->state == LISTEN", pcb->state == LISTEN);
 802c510:	687b      	ldr	r3, [r7, #4]
 802c512:	7d1b      	ldrb	r3, [r3, #20]
 802c514:	2b01      	cmp	r3, #1
 802c516:	d006      	beq.n	802c526 <tcp_listen_closed+0x32>
 802c518:	4b0e      	ldr	r3, [pc, #56]	; (802c554 <tcp_listen_closed+0x60>)
 802c51a:	f44f 7289 	mov.w	r2, #274	; 0x112
 802c51e:	4910      	ldr	r1, [pc, #64]	; (802c560 <tcp_listen_closed+0x6c>)
 802c520:	480e      	ldr	r0, [pc, #56]	; (802c55c <tcp_listen_closed+0x68>)
 802c522:	f009 fe39 	bl	8036198 <iprintf>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 802c526:	2301      	movs	r3, #1
 802c528:	60fb      	str	r3, [r7, #12]
 802c52a:	e00b      	b.n	802c544 <tcp_listen_closed+0x50>
    tcp_remove_listener(*tcp_pcb_lists[i], (struct tcp_pcb_listen *)pcb);
 802c52c:	4a0d      	ldr	r2, [pc, #52]	; (802c564 <tcp_listen_closed+0x70>)
 802c52e:	68fb      	ldr	r3, [r7, #12]
 802c530:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 802c534:	681b      	ldr	r3, [r3, #0]
 802c536:	6879      	ldr	r1, [r7, #4]
 802c538:	4618      	mov	r0, r3
 802c53a:	f7ff ffb1 	bl	802c4a0 <tcp_remove_listener>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 802c53e:	68fb      	ldr	r3, [r7, #12]
 802c540:	3301      	adds	r3, #1
 802c542:	60fb      	str	r3, [r7, #12]
 802c544:	68fb      	ldr	r3, [r7, #12]
 802c546:	2b03      	cmp	r3, #3
 802c548:	d9f0      	bls.n	802c52c <tcp_listen_closed+0x38>
  }
#endif
  LWIP_UNUSED_ARG(pcb);
}
 802c54a:	bf00      	nop
 802c54c:	bf00      	nop
 802c54e:	3710      	adds	r7, #16
 802c550:	46bd      	mov	sp, r7
 802c552:	bd80      	pop	{r7, pc}
 802c554:	08038b40 	.word	0x08038b40
 802c558:	08038bf0 	.word	0x08038bf0
 802c55c:	08038b84 	.word	0x08038b84
 802c560:	08038bfc 	.word	0x08038bfc
 802c564:	0803ab9c 	.word	0x0803ab9c

0802c568 <tcp_close_shutdown>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
static err_t
tcp_close_shutdown(struct tcp_pcb *pcb, u8_t rst_on_unacked_data)
{
 802c568:	b5b0      	push	{r4, r5, r7, lr}
 802c56a:	b088      	sub	sp, #32
 802c56c:	af04      	add	r7, sp, #16
 802c56e:	6078      	str	r0, [r7, #4]
 802c570:	460b      	mov	r3, r1
 802c572:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("tcp_close_shutdown: invalid pcb", pcb != NULL);
 802c574:	687b      	ldr	r3, [r7, #4]
 802c576:	2b00      	cmp	r3, #0
 802c578:	d106      	bne.n	802c588 <tcp_close_shutdown+0x20>
 802c57a:	4b63      	ldr	r3, [pc, #396]	; (802c708 <tcp_close_shutdown+0x1a0>)
 802c57c:	f44f 72af 	mov.w	r2, #350	; 0x15e
 802c580:	4962      	ldr	r1, [pc, #392]	; (802c70c <tcp_close_shutdown+0x1a4>)
 802c582:	4863      	ldr	r0, [pc, #396]	; (802c710 <tcp_close_shutdown+0x1a8>)
 802c584:	f009 fe08 	bl	8036198 <iprintf>

  if (rst_on_unacked_data && ((pcb->state == ESTABLISHED) || (pcb->state == CLOSE_WAIT))) {
 802c588:	78fb      	ldrb	r3, [r7, #3]
 802c58a:	2b00      	cmp	r3, #0
 802c58c:	d066      	beq.n	802c65c <tcp_close_shutdown+0xf4>
 802c58e:	687b      	ldr	r3, [r7, #4]
 802c590:	7d1b      	ldrb	r3, [r3, #20]
 802c592:	2b04      	cmp	r3, #4
 802c594:	d003      	beq.n	802c59e <tcp_close_shutdown+0x36>
 802c596:	687b      	ldr	r3, [r7, #4]
 802c598:	7d1b      	ldrb	r3, [r3, #20]
 802c59a:	2b07      	cmp	r3, #7
 802c59c:	d15e      	bne.n	802c65c <tcp_close_shutdown+0xf4>
    if ((pcb->refused_data != NULL) || (pcb->rcv_wnd != TCP_WND_MAX(pcb))) {
 802c59e:	687b      	ldr	r3, [r7, #4]
 802c5a0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 802c5a2:	2b00      	cmp	r3, #0
 802c5a4:	d104      	bne.n	802c5b0 <tcp_close_shutdown+0x48>
 802c5a6:	687b      	ldr	r3, [r7, #4]
 802c5a8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 802c5aa:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 802c5ae:	d055      	beq.n	802c65c <tcp_close_shutdown+0xf4>
      /* Not all data received by application, send RST to tell the remote
         side about this. */
      LWIP_ASSERT("pcb->flags & TF_RXCLOSED", pcb->flags & TF_RXCLOSED);
 802c5b0:	687b      	ldr	r3, [r7, #4]
 802c5b2:	8b5b      	ldrh	r3, [r3, #26]
 802c5b4:	f003 0310 	and.w	r3, r3, #16
 802c5b8:	2b00      	cmp	r3, #0
 802c5ba:	d106      	bne.n	802c5ca <tcp_close_shutdown+0x62>
 802c5bc:	4b52      	ldr	r3, [pc, #328]	; (802c708 <tcp_close_shutdown+0x1a0>)
 802c5be:	f44f 72b2 	mov.w	r2, #356	; 0x164
 802c5c2:	4954      	ldr	r1, [pc, #336]	; (802c714 <tcp_close_shutdown+0x1ac>)
 802c5c4:	4852      	ldr	r0, [pc, #328]	; (802c710 <tcp_close_shutdown+0x1a8>)
 802c5c6:	f009 fde7 	bl	8036198 <iprintf>

      /* don't call tcp_abort here: we must not deallocate the pcb since
         that might not be expected when calling tcp_close */
      tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 802c5ca:	687b      	ldr	r3, [r7, #4]
 802c5cc:	6d18      	ldr	r0, [r3, #80]	; 0x50
 802c5ce:	687b      	ldr	r3, [r7, #4]
 802c5d0:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 802c5d2:	687d      	ldr	r5, [r7, #4]
 802c5d4:	687b      	ldr	r3, [r7, #4]
 802c5d6:	3304      	adds	r3, #4
 802c5d8:	687a      	ldr	r2, [r7, #4]
 802c5da:	8ad2      	ldrh	r2, [r2, #22]
 802c5dc:	6879      	ldr	r1, [r7, #4]
 802c5de:	8b09      	ldrh	r1, [r1, #24]
 802c5e0:	9102      	str	r1, [sp, #8]
 802c5e2:	9201      	str	r2, [sp, #4]
 802c5e4:	9300      	str	r3, [sp, #0]
 802c5e6:	462b      	mov	r3, r5
 802c5e8:	4622      	mov	r2, r4
 802c5ea:	4601      	mov	r1, r0
 802c5ec:	6878      	ldr	r0, [r7, #4]
 802c5ee:	f005 fe99 	bl	8032324 <tcp_rst>
              pcb->local_port, pcb->remote_port);

      tcp_pcb_purge(pcb);
 802c5f2:	6878      	ldr	r0, [r7, #4]
 802c5f4:	f001 fbc2 	bl	802dd7c <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 802c5f8:	4b47      	ldr	r3, [pc, #284]	; (802c718 <tcp_close_shutdown+0x1b0>)
 802c5fa:	681b      	ldr	r3, [r3, #0]
 802c5fc:	687a      	ldr	r2, [r7, #4]
 802c5fe:	429a      	cmp	r2, r3
 802c600:	d105      	bne.n	802c60e <tcp_close_shutdown+0xa6>
 802c602:	4b45      	ldr	r3, [pc, #276]	; (802c718 <tcp_close_shutdown+0x1b0>)
 802c604:	681b      	ldr	r3, [r3, #0]
 802c606:	68db      	ldr	r3, [r3, #12]
 802c608:	4a43      	ldr	r2, [pc, #268]	; (802c718 <tcp_close_shutdown+0x1b0>)
 802c60a:	6013      	str	r3, [r2, #0]
 802c60c:	e013      	b.n	802c636 <tcp_close_shutdown+0xce>
 802c60e:	4b42      	ldr	r3, [pc, #264]	; (802c718 <tcp_close_shutdown+0x1b0>)
 802c610:	681b      	ldr	r3, [r3, #0]
 802c612:	60fb      	str	r3, [r7, #12]
 802c614:	e00c      	b.n	802c630 <tcp_close_shutdown+0xc8>
 802c616:	68fb      	ldr	r3, [r7, #12]
 802c618:	68db      	ldr	r3, [r3, #12]
 802c61a:	687a      	ldr	r2, [r7, #4]
 802c61c:	429a      	cmp	r2, r3
 802c61e:	d104      	bne.n	802c62a <tcp_close_shutdown+0xc2>
 802c620:	687b      	ldr	r3, [r7, #4]
 802c622:	68da      	ldr	r2, [r3, #12]
 802c624:	68fb      	ldr	r3, [r7, #12]
 802c626:	60da      	str	r2, [r3, #12]
 802c628:	e005      	b.n	802c636 <tcp_close_shutdown+0xce>
 802c62a:	68fb      	ldr	r3, [r7, #12]
 802c62c:	68db      	ldr	r3, [r3, #12]
 802c62e:	60fb      	str	r3, [r7, #12]
 802c630:	68fb      	ldr	r3, [r7, #12]
 802c632:	2b00      	cmp	r3, #0
 802c634:	d1ef      	bne.n	802c616 <tcp_close_shutdown+0xae>
 802c636:	687b      	ldr	r3, [r7, #4]
 802c638:	2200      	movs	r2, #0
 802c63a:	60da      	str	r2, [r3, #12]
 802c63c:	4b37      	ldr	r3, [pc, #220]	; (802c71c <tcp_close_shutdown+0x1b4>)
 802c63e:	2201      	movs	r2, #1
 802c640:	701a      	strb	r2, [r3, #0]
      /* Deallocate the pcb since we already sent a RST for it */
      if (tcp_input_pcb == pcb) {
 802c642:	4b37      	ldr	r3, [pc, #220]	; (802c720 <tcp_close_shutdown+0x1b8>)
 802c644:	681b      	ldr	r3, [r3, #0]
 802c646:	687a      	ldr	r2, [r7, #4]
 802c648:	429a      	cmp	r2, r3
 802c64a:	d102      	bne.n	802c652 <tcp_close_shutdown+0xea>
        /* prevent using a deallocated pcb: free it from tcp_input later */
        tcp_trigger_input_pcb_close();
 802c64c:	f004 f8c0 	bl	80307d0 <tcp_trigger_input_pcb_close>
 802c650:	e002      	b.n	802c658 <tcp_close_shutdown+0xf0>
      } else {
        tcp_free(pcb);
 802c652:	6878      	ldr	r0, [r7, #4]
 802c654:	f7ff fed6 	bl	802c404 <tcp_free>
      }
      return ERR_OK;
 802c658:	2300      	movs	r3, #0
 802c65a:	e050      	b.n	802c6fe <tcp_close_shutdown+0x196>
    }
  }

  /* - states which free the pcb are handled here,
     - states which send FIN and change state are handled in tcp_close_shutdown_fin() */
  switch (pcb->state) {
 802c65c:	687b      	ldr	r3, [r7, #4]
 802c65e:	7d1b      	ldrb	r3, [r3, #20]
 802c660:	2b02      	cmp	r3, #2
 802c662:	d03b      	beq.n	802c6dc <tcp_close_shutdown+0x174>
 802c664:	2b02      	cmp	r3, #2
 802c666:	dc44      	bgt.n	802c6f2 <tcp_close_shutdown+0x18a>
 802c668:	2b00      	cmp	r3, #0
 802c66a:	d002      	beq.n	802c672 <tcp_close_shutdown+0x10a>
 802c66c:	2b01      	cmp	r3, #1
 802c66e:	d02a      	beq.n	802c6c6 <tcp_close_shutdown+0x15e>
 802c670:	e03f      	b.n	802c6f2 <tcp_close_shutdown+0x18a>
       * and the user needs some way to free it should the need arise.
       * Calling tcp_close() with a pcb that has already been closed, (i.e. twice)
       * or for a pcb that has been used and then entered the CLOSED state
       * is erroneous, but this should never happen as the pcb has in those cases
       * been freed, and so any remaining handles are bogus. */
      if (pcb->local_port != 0) {
 802c672:	687b      	ldr	r3, [r7, #4]
 802c674:	8adb      	ldrh	r3, [r3, #22]
 802c676:	2b00      	cmp	r3, #0
 802c678:	d021      	beq.n	802c6be <tcp_close_shutdown+0x156>
        TCP_RMV(&tcp_bound_pcbs, pcb);
 802c67a:	4b2a      	ldr	r3, [pc, #168]	; (802c724 <tcp_close_shutdown+0x1bc>)
 802c67c:	681b      	ldr	r3, [r3, #0]
 802c67e:	687a      	ldr	r2, [r7, #4]
 802c680:	429a      	cmp	r2, r3
 802c682:	d105      	bne.n	802c690 <tcp_close_shutdown+0x128>
 802c684:	4b27      	ldr	r3, [pc, #156]	; (802c724 <tcp_close_shutdown+0x1bc>)
 802c686:	681b      	ldr	r3, [r3, #0]
 802c688:	68db      	ldr	r3, [r3, #12]
 802c68a:	4a26      	ldr	r2, [pc, #152]	; (802c724 <tcp_close_shutdown+0x1bc>)
 802c68c:	6013      	str	r3, [r2, #0]
 802c68e:	e013      	b.n	802c6b8 <tcp_close_shutdown+0x150>
 802c690:	4b24      	ldr	r3, [pc, #144]	; (802c724 <tcp_close_shutdown+0x1bc>)
 802c692:	681b      	ldr	r3, [r3, #0]
 802c694:	60bb      	str	r3, [r7, #8]
 802c696:	e00c      	b.n	802c6b2 <tcp_close_shutdown+0x14a>
 802c698:	68bb      	ldr	r3, [r7, #8]
 802c69a:	68db      	ldr	r3, [r3, #12]
 802c69c:	687a      	ldr	r2, [r7, #4]
 802c69e:	429a      	cmp	r2, r3
 802c6a0:	d104      	bne.n	802c6ac <tcp_close_shutdown+0x144>
 802c6a2:	687b      	ldr	r3, [r7, #4]
 802c6a4:	68da      	ldr	r2, [r3, #12]
 802c6a6:	68bb      	ldr	r3, [r7, #8]
 802c6a8:	60da      	str	r2, [r3, #12]
 802c6aa:	e005      	b.n	802c6b8 <tcp_close_shutdown+0x150>
 802c6ac:	68bb      	ldr	r3, [r7, #8]
 802c6ae:	68db      	ldr	r3, [r3, #12]
 802c6b0:	60bb      	str	r3, [r7, #8]
 802c6b2:	68bb      	ldr	r3, [r7, #8]
 802c6b4:	2b00      	cmp	r3, #0
 802c6b6:	d1ef      	bne.n	802c698 <tcp_close_shutdown+0x130>
 802c6b8:	687b      	ldr	r3, [r7, #4]
 802c6ba:	2200      	movs	r2, #0
 802c6bc:	60da      	str	r2, [r3, #12]
      }
      tcp_free(pcb);
 802c6be:	6878      	ldr	r0, [r7, #4]
 802c6c0:	f7ff fea0 	bl	802c404 <tcp_free>
      break;
 802c6c4:	e01a      	b.n	802c6fc <tcp_close_shutdown+0x194>
    case LISTEN:
      tcp_listen_closed(pcb);
 802c6c6:	6878      	ldr	r0, [r7, #4]
 802c6c8:	f7ff ff14 	bl	802c4f4 <tcp_listen_closed>
      tcp_pcb_remove(&tcp_listen_pcbs.pcbs, pcb);
 802c6cc:	6879      	ldr	r1, [r7, #4]
 802c6ce:	4816      	ldr	r0, [pc, #88]	; (802c728 <tcp_close_shutdown+0x1c0>)
 802c6d0:	f001 fba4 	bl	802de1c <tcp_pcb_remove>
      tcp_free_listen(pcb);
 802c6d4:	6878      	ldr	r0, [r7, #4]
 802c6d6:	f7ff feb1 	bl	802c43c <tcp_free_listen>
      break;
 802c6da:	e00f      	b.n	802c6fc <tcp_close_shutdown+0x194>
    case SYN_SENT:
      TCP_PCB_REMOVE_ACTIVE(pcb);
 802c6dc:	6879      	ldr	r1, [r7, #4]
 802c6de:	480e      	ldr	r0, [pc, #56]	; (802c718 <tcp_close_shutdown+0x1b0>)
 802c6e0:	f001 fb9c 	bl	802de1c <tcp_pcb_remove>
 802c6e4:	4b0d      	ldr	r3, [pc, #52]	; (802c71c <tcp_close_shutdown+0x1b4>)
 802c6e6:	2201      	movs	r2, #1
 802c6e8:	701a      	strb	r2, [r3, #0]
      tcp_free(pcb);
 802c6ea:	6878      	ldr	r0, [r7, #4]
 802c6ec:	f7ff fe8a 	bl	802c404 <tcp_free>
      MIB2_STATS_INC(mib2.tcpattemptfails);
      break;
 802c6f0:	e004      	b.n	802c6fc <tcp_close_shutdown+0x194>
    default:
      return tcp_close_shutdown_fin(pcb);
 802c6f2:	6878      	ldr	r0, [r7, #4]
 802c6f4:	f000 f81a 	bl	802c72c <tcp_close_shutdown_fin>
 802c6f8:	4603      	mov	r3, r0
 802c6fa:	e000      	b.n	802c6fe <tcp_close_shutdown+0x196>
  }
  return ERR_OK;
 802c6fc:	2300      	movs	r3, #0
}
 802c6fe:	4618      	mov	r0, r3
 802c700:	3710      	adds	r7, #16
 802c702:	46bd      	mov	sp, r7
 802c704:	bdb0      	pop	{r4, r5, r7, pc}
 802c706:	bf00      	nop
 802c708:	08038b40 	.word	0x08038b40
 802c70c:	08038c14 	.word	0x08038c14
 802c710:	08038b84 	.word	0x08038b84
 802c714:	08038c34 	.word	0x08038c34
 802c718:	2000ee18 	.word	0x2000ee18
 802c71c:	2000ee20 	.word	0x2000ee20
 802c720:	2000ee58 	.word	0x2000ee58
 802c724:	2000ee10 	.word	0x2000ee10
 802c728:	2000ee14 	.word	0x2000ee14

0802c72c <tcp_close_shutdown_fin>:

static err_t
tcp_close_shutdown_fin(struct tcp_pcb *pcb)
{
 802c72c:	b580      	push	{r7, lr}
 802c72e:	b084      	sub	sp, #16
 802c730:	af00      	add	r7, sp, #0
 802c732:	6078      	str	r0, [r7, #4]
  err_t err;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 802c734:	687b      	ldr	r3, [r7, #4]
 802c736:	2b00      	cmp	r3, #0
 802c738:	d106      	bne.n	802c748 <tcp_close_shutdown_fin+0x1c>
 802c73a:	4b2e      	ldr	r3, [pc, #184]	; (802c7f4 <tcp_close_shutdown_fin+0xc8>)
 802c73c:	f44f 72ce 	mov.w	r2, #412	; 0x19c
 802c740:	492d      	ldr	r1, [pc, #180]	; (802c7f8 <tcp_close_shutdown_fin+0xcc>)
 802c742:	482e      	ldr	r0, [pc, #184]	; (802c7fc <tcp_close_shutdown_fin+0xd0>)
 802c744:	f009 fd28 	bl	8036198 <iprintf>

  switch (pcb->state) {
 802c748:	687b      	ldr	r3, [r7, #4]
 802c74a:	7d1b      	ldrb	r3, [r3, #20]
 802c74c:	2b07      	cmp	r3, #7
 802c74e:	d020      	beq.n	802c792 <tcp_close_shutdown_fin+0x66>
 802c750:	2b07      	cmp	r3, #7
 802c752:	dc2b      	bgt.n	802c7ac <tcp_close_shutdown_fin+0x80>
 802c754:	2b03      	cmp	r3, #3
 802c756:	d002      	beq.n	802c75e <tcp_close_shutdown_fin+0x32>
 802c758:	2b04      	cmp	r3, #4
 802c75a:	d00d      	beq.n	802c778 <tcp_close_shutdown_fin+0x4c>
 802c75c:	e026      	b.n	802c7ac <tcp_close_shutdown_fin+0x80>
    case SYN_RCVD:
      err = tcp_send_fin(pcb);
 802c75e:	6878      	ldr	r0, [r7, #4]
 802c760:	f004 fec8 	bl	80314f4 <tcp_send_fin>
 802c764:	4603      	mov	r3, r0
 802c766:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 802c768:	f997 300f 	ldrsb.w	r3, [r7, #15]
 802c76c:	2b00      	cmp	r3, #0
 802c76e:	d11f      	bne.n	802c7b0 <tcp_close_shutdown_fin+0x84>
        tcp_backlog_accepted(pcb);
        MIB2_STATS_INC(mib2.tcpattemptfails);
        pcb->state = FIN_WAIT_1;
 802c770:	687b      	ldr	r3, [r7, #4]
 802c772:	2205      	movs	r2, #5
 802c774:	751a      	strb	r2, [r3, #20]
      }
      break;
 802c776:	e01b      	b.n	802c7b0 <tcp_close_shutdown_fin+0x84>
    case ESTABLISHED:
      err = tcp_send_fin(pcb);
 802c778:	6878      	ldr	r0, [r7, #4]
 802c77a:	f004 febb 	bl	80314f4 <tcp_send_fin>
 802c77e:	4603      	mov	r3, r0
 802c780:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 802c782:	f997 300f 	ldrsb.w	r3, [r7, #15]
 802c786:	2b00      	cmp	r3, #0
 802c788:	d114      	bne.n	802c7b4 <tcp_close_shutdown_fin+0x88>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = FIN_WAIT_1;
 802c78a:	687b      	ldr	r3, [r7, #4]
 802c78c:	2205      	movs	r2, #5
 802c78e:	751a      	strb	r2, [r3, #20]
      }
      break;
 802c790:	e010      	b.n	802c7b4 <tcp_close_shutdown_fin+0x88>
    case CLOSE_WAIT:
      err = tcp_send_fin(pcb);
 802c792:	6878      	ldr	r0, [r7, #4]
 802c794:	f004 feae 	bl	80314f4 <tcp_send_fin>
 802c798:	4603      	mov	r3, r0
 802c79a:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 802c79c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 802c7a0:	2b00      	cmp	r3, #0
 802c7a2:	d109      	bne.n	802c7b8 <tcp_close_shutdown_fin+0x8c>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = LAST_ACK;
 802c7a4:	687b      	ldr	r3, [r7, #4]
 802c7a6:	2209      	movs	r2, #9
 802c7a8:	751a      	strb	r2, [r3, #20]
      }
      break;
 802c7aa:	e005      	b.n	802c7b8 <tcp_close_shutdown_fin+0x8c>
    default:
      /* Has already been closed, do nothing. */
      return ERR_OK;
 802c7ac:	2300      	movs	r3, #0
 802c7ae:	e01c      	b.n	802c7ea <tcp_close_shutdown_fin+0xbe>
      break;
 802c7b0:	bf00      	nop
 802c7b2:	e002      	b.n	802c7ba <tcp_close_shutdown_fin+0x8e>
      break;
 802c7b4:	bf00      	nop
 802c7b6:	e000      	b.n	802c7ba <tcp_close_shutdown_fin+0x8e>
      break;
 802c7b8:	bf00      	nop
  }

  if (err == ERR_OK) {
 802c7ba:	f997 300f 	ldrsb.w	r3, [r7, #15]
 802c7be:	2b00      	cmp	r3, #0
 802c7c0:	d103      	bne.n	802c7ca <tcp_close_shutdown_fin+0x9e>
    /* To ensure all data has been sent when tcp_close returns, we have
       to make sure tcp_output doesn't fail.
       Since we don't really have to ensure all data has been sent when tcp_close
       returns (unsent data is sent from tcp timer functions, also), we don't care
       for the return value of tcp_output for now. */
    tcp_output(pcb);
 802c7c2:	6878      	ldr	r0, [r7, #4]
 802c7c4:	f004 ffe6 	bl	8031794 <tcp_output>
 802c7c8:	e00d      	b.n	802c7e6 <tcp_close_shutdown_fin+0xba>
  } else if (err == ERR_MEM) {
 802c7ca:	f997 300f 	ldrsb.w	r3, [r7, #15]
 802c7ce:	f1b3 3fff 	cmp.w	r3, #4294967295
 802c7d2:	d108      	bne.n	802c7e6 <tcp_close_shutdown_fin+0xba>
    /* Mark this pcb for closing. Closing is retried from tcp_tmr. */
    tcp_set_flags(pcb, TF_CLOSEPEND);
 802c7d4:	687b      	ldr	r3, [r7, #4]
 802c7d6:	8b5b      	ldrh	r3, [r3, #26]
 802c7d8:	f043 0308 	orr.w	r3, r3, #8
 802c7dc:	b29a      	uxth	r2, r3
 802c7de:	687b      	ldr	r3, [r7, #4]
 802c7e0:	835a      	strh	r2, [r3, #26]
    /* We have to return ERR_OK from here to indicate to the callers that this
       pcb should not be used any more as it will be freed soon via tcp_tmr.
       This is OK here since sending FIN does not guarantee a time frime for
       actually freeing the pcb, either (it is left in closure states for
       remote ACK or timeout) */
    return ERR_OK;
 802c7e2:	2300      	movs	r3, #0
 802c7e4:	e001      	b.n	802c7ea <tcp_close_shutdown_fin+0xbe>
  }
  return err;
 802c7e6:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 802c7ea:	4618      	mov	r0, r3
 802c7ec:	3710      	adds	r7, #16
 802c7ee:	46bd      	mov	sp, r7
 802c7f0:	bd80      	pop	{r7, pc}
 802c7f2:	bf00      	nop
 802c7f4:	08038b40 	.word	0x08038b40
 802c7f8:	08038bf0 	.word	0x08038bf0
 802c7fc:	08038b84 	.word	0x08038b84

0802c800 <tcp_close>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
err_t
tcp_close(struct tcp_pcb *pcb)
{
 802c800:	b580      	push	{r7, lr}
 802c802:	b082      	sub	sp, #8
 802c804:	af00      	add	r7, sp, #0
 802c806:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_close: invalid pcb", pcb != NULL, return ERR_ARG);
 802c808:	687b      	ldr	r3, [r7, #4]
 802c80a:	2b00      	cmp	r3, #0
 802c80c:	d109      	bne.n	802c822 <tcp_close+0x22>
 802c80e:	4b0f      	ldr	r3, [pc, #60]	; (802c84c <tcp_close+0x4c>)
 802c810:	f44f 72f4 	mov.w	r2, #488	; 0x1e8
 802c814:	490e      	ldr	r1, [pc, #56]	; (802c850 <tcp_close+0x50>)
 802c816:	480f      	ldr	r0, [pc, #60]	; (802c854 <tcp_close+0x54>)
 802c818:	f009 fcbe 	bl	8036198 <iprintf>
 802c81c:	f06f 030f 	mvn.w	r3, #15
 802c820:	e00f      	b.n	802c842 <tcp_close+0x42>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_close: closing in "));

  tcp_debug_print_state(pcb->state);

  if (pcb->state != LISTEN) {
 802c822:	687b      	ldr	r3, [r7, #4]
 802c824:	7d1b      	ldrb	r3, [r3, #20]
 802c826:	2b01      	cmp	r3, #1
 802c828:	d006      	beq.n	802c838 <tcp_close+0x38>
    /* Set a flag not to receive any more data... */
    tcp_set_flags(pcb, TF_RXCLOSED);
 802c82a:	687b      	ldr	r3, [r7, #4]
 802c82c:	8b5b      	ldrh	r3, [r3, #26]
 802c82e:	f043 0310 	orr.w	r3, r3, #16
 802c832:	b29a      	uxth	r2, r3
 802c834:	687b      	ldr	r3, [r7, #4]
 802c836:	835a      	strh	r2, [r3, #26]
  }
  /* ... and close */
  return tcp_close_shutdown(pcb, 1);
 802c838:	2101      	movs	r1, #1
 802c83a:	6878      	ldr	r0, [r7, #4]
 802c83c:	f7ff fe94 	bl	802c568 <tcp_close_shutdown>
 802c840:	4603      	mov	r3, r0
}
 802c842:	4618      	mov	r0, r3
 802c844:	3708      	adds	r7, #8
 802c846:	46bd      	mov	sp, r7
 802c848:	bd80      	pop	{r7, pc}
 802c84a:	bf00      	nop
 802c84c:	08038b40 	.word	0x08038b40
 802c850:	08038c50 	.word	0x08038c50
 802c854:	08038b84 	.word	0x08038b84

0802c858 <tcp_shutdown>:
 * @return ERR_OK if shutdown succeeded (or the PCB has already been shut down)
 *         another err_t on error.
 */
err_t
tcp_shutdown(struct tcp_pcb *pcb, int shut_rx, int shut_tx)
{
 802c858:	b580      	push	{r7, lr}
 802c85a:	b084      	sub	sp, #16
 802c85c:	af00      	add	r7, sp, #0
 802c85e:	60f8      	str	r0, [r7, #12]
 802c860:	60b9      	str	r1, [r7, #8]
 802c862:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_shutdown: invalid pcb", pcb != NULL, return ERR_ARG);
 802c864:	68fb      	ldr	r3, [r7, #12]
 802c866:	2b00      	cmp	r3, #0
 802c868:	d109      	bne.n	802c87e <tcp_shutdown+0x26>
 802c86a:	4b26      	ldr	r3, [pc, #152]	; (802c904 <tcp_shutdown+0xac>)
 802c86c:	f240 2207 	movw	r2, #519	; 0x207
 802c870:	4925      	ldr	r1, [pc, #148]	; (802c908 <tcp_shutdown+0xb0>)
 802c872:	4826      	ldr	r0, [pc, #152]	; (802c90c <tcp_shutdown+0xb4>)
 802c874:	f009 fc90 	bl	8036198 <iprintf>
 802c878:	f06f 030f 	mvn.w	r3, #15
 802c87c:	e03d      	b.n	802c8fa <tcp_shutdown+0xa2>

  if (pcb->state == LISTEN) {
 802c87e:	68fb      	ldr	r3, [r7, #12]
 802c880:	7d1b      	ldrb	r3, [r3, #20]
 802c882:	2b01      	cmp	r3, #1
 802c884:	d102      	bne.n	802c88c <tcp_shutdown+0x34>
    return ERR_CONN;
 802c886:	f06f 030a 	mvn.w	r3, #10
 802c88a:	e036      	b.n	802c8fa <tcp_shutdown+0xa2>
  }
  if (shut_rx) {
 802c88c:	68bb      	ldr	r3, [r7, #8]
 802c88e:	2b00      	cmp	r3, #0
 802c890:	d01b      	beq.n	802c8ca <tcp_shutdown+0x72>
    /* shut down the receive side: set a flag not to receive any more data... */
    tcp_set_flags(pcb, TF_RXCLOSED);
 802c892:	68fb      	ldr	r3, [r7, #12]
 802c894:	8b5b      	ldrh	r3, [r3, #26]
 802c896:	f043 0310 	orr.w	r3, r3, #16
 802c89a:	b29a      	uxth	r2, r3
 802c89c:	68fb      	ldr	r3, [r7, #12]
 802c89e:	835a      	strh	r2, [r3, #26]
    if (shut_tx) {
 802c8a0:	687b      	ldr	r3, [r7, #4]
 802c8a2:	2b00      	cmp	r3, #0
 802c8a4:	d005      	beq.n	802c8b2 <tcp_shutdown+0x5a>
      /* shutting down the tx AND rx side is the same as closing for the raw API */
      return tcp_close_shutdown(pcb, 1);
 802c8a6:	2101      	movs	r1, #1
 802c8a8:	68f8      	ldr	r0, [r7, #12]
 802c8aa:	f7ff fe5d 	bl	802c568 <tcp_close_shutdown>
 802c8ae:	4603      	mov	r3, r0
 802c8b0:	e023      	b.n	802c8fa <tcp_shutdown+0xa2>
    }
    /* ... and free buffered data */
    if (pcb->refused_data != NULL) {
 802c8b2:	68fb      	ldr	r3, [r7, #12]
 802c8b4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 802c8b6:	2b00      	cmp	r3, #0
 802c8b8:	d007      	beq.n	802c8ca <tcp_shutdown+0x72>
      pbuf_free(pcb->refused_data);
 802c8ba:	68fb      	ldr	r3, [r7, #12]
 802c8bc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 802c8be:	4618      	mov	r0, r3
 802c8c0:	f7ff faec 	bl	802be9c <pbuf_free>
      pcb->refused_data = NULL;
 802c8c4:	68fb      	ldr	r3, [r7, #12]
 802c8c6:	2200      	movs	r2, #0
 802c8c8:	679a      	str	r2, [r3, #120]	; 0x78
    }
  }
  if (shut_tx) {
 802c8ca:	687b      	ldr	r3, [r7, #4]
 802c8cc:	2b00      	cmp	r3, #0
 802c8ce:	d013      	beq.n	802c8f8 <tcp_shutdown+0xa0>
    /* This can't happen twice since if it succeeds, the pcb's state is changed.
       Only close in these states as the others directly deallocate the PCB */
    switch (pcb->state) {
 802c8d0:	68fb      	ldr	r3, [r7, #12]
 802c8d2:	7d1b      	ldrb	r3, [r3, #20]
 802c8d4:	2b04      	cmp	r3, #4
 802c8d6:	dc02      	bgt.n	802c8de <tcp_shutdown+0x86>
 802c8d8:	2b03      	cmp	r3, #3
 802c8da:	da02      	bge.n	802c8e2 <tcp_shutdown+0x8a>
 802c8dc:	e009      	b.n	802c8f2 <tcp_shutdown+0x9a>
 802c8de:	2b07      	cmp	r3, #7
 802c8e0:	d107      	bne.n	802c8f2 <tcp_shutdown+0x9a>
      case SYN_RCVD:
      case ESTABLISHED:
      case CLOSE_WAIT:
        return tcp_close_shutdown(pcb, (u8_t)shut_rx);
 802c8e2:	68bb      	ldr	r3, [r7, #8]
 802c8e4:	b2db      	uxtb	r3, r3
 802c8e6:	4619      	mov	r1, r3
 802c8e8:	68f8      	ldr	r0, [r7, #12]
 802c8ea:	f7ff fe3d 	bl	802c568 <tcp_close_shutdown>
 802c8ee:	4603      	mov	r3, r0
 802c8f0:	e003      	b.n	802c8fa <tcp_shutdown+0xa2>
      default:
        /* Not (yet?) connected, cannot shutdown the TX side as that would bring us
          into CLOSED state, where the PCB is deallocated. */
        return ERR_CONN;
 802c8f2:	f06f 030a 	mvn.w	r3, #10
 802c8f6:	e000      	b.n	802c8fa <tcp_shutdown+0xa2>
    }
  }
  return ERR_OK;
 802c8f8:	2300      	movs	r3, #0
}
 802c8fa:	4618      	mov	r0, r3
 802c8fc:	3710      	adds	r7, #16
 802c8fe:	46bd      	mov	sp, r7
 802c900:	bd80      	pop	{r7, pc}
 802c902:	bf00      	nop
 802c904:	08038b40 	.word	0x08038b40
 802c908:	08038c68 	.word	0x08038c68
 802c90c:	08038b84 	.word	0x08038b84

0802c910 <tcp_abandon>:
 * @param pcb the tcp_pcb to abort
 * @param reset boolean to indicate whether a reset should be sent
 */
void
tcp_abandon(struct tcp_pcb *pcb, int reset)
{
 802c910:	b580      	push	{r7, lr}
 802c912:	b08e      	sub	sp, #56	; 0x38
 802c914:	af04      	add	r7, sp, #16
 802c916:	6078      	str	r0, [r7, #4]
 802c918:	6039      	str	r1, [r7, #0]
#endif /* LWIP_CALLBACK_API */
  void *errf_arg;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_abandon: invalid pcb", pcb != NULL, return);
 802c91a:	687b      	ldr	r3, [r7, #4]
 802c91c:	2b00      	cmp	r3, #0
 802c91e:	d107      	bne.n	802c930 <tcp_abandon+0x20>
 802c920:	4b52      	ldr	r3, [pc, #328]	; (802ca6c <tcp_abandon+0x15c>)
 802c922:	f240 223d 	movw	r2, #573	; 0x23d
 802c926:	4952      	ldr	r1, [pc, #328]	; (802ca70 <tcp_abandon+0x160>)
 802c928:	4852      	ldr	r0, [pc, #328]	; (802ca74 <tcp_abandon+0x164>)
 802c92a:	f009 fc35 	bl	8036198 <iprintf>
 802c92e:	e099      	b.n	802ca64 <tcp_abandon+0x154>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_abort/tcp_abandon for listen-pcbs",
 802c930:	687b      	ldr	r3, [r7, #4]
 802c932:	7d1b      	ldrb	r3, [r3, #20]
 802c934:	2b01      	cmp	r3, #1
 802c936:	d106      	bne.n	802c946 <tcp_abandon+0x36>
 802c938:	4b4c      	ldr	r3, [pc, #304]	; (802ca6c <tcp_abandon+0x15c>)
 802c93a:	f44f 7210 	mov.w	r2, #576	; 0x240
 802c93e:	494e      	ldr	r1, [pc, #312]	; (802ca78 <tcp_abandon+0x168>)
 802c940:	484c      	ldr	r0, [pc, #304]	; (802ca74 <tcp_abandon+0x164>)
 802c942:	f009 fc29 	bl	8036198 <iprintf>
              pcb->state != LISTEN);
  /* Figure out on which TCP PCB list we are, and remove us. If we
     are in an active state, call the receive function associated with
     the PCB with a NULL argument, and send an RST to the remote end. */
  if (pcb->state == TIME_WAIT) {
 802c946:	687b      	ldr	r3, [r7, #4]
 802c948:	7d1b      	ldrb	r3, [r3, #20]
 802c94a:	2b0a      	cmp	r3, #10
 802c94c:	d107      	bne.n	802c95e <tcp_abandon+0x4e>
    tcp_pcb_remove(&tcp_tw_pcbs, pcb);
 802c94e:	6879      	ldr	r1, [r7, #4]
 802c950:	484a      	ldr	r0, [pc, #296]	; (802ca7c <tcp_abandon+0x16c>)
 802c952:	f001 fa63 	bl	802de1c <tcp_pcb_remove>
    tcp_free(pcb);
 802c956:	6878      	ldr	r0, [r7, #4]
 802c958:	f7ff fd54 	bl	802c404 <tcp_free>
 802c95c:	e082      	b.n	802ca64 <tcp_abandon+0x154>
  } else {
    int send_rst = 0;
 802c95e:	2300      	movs	r3, #0
 802c960:	627b      	str	r3, [r7, #36]	; 0x24
    u16_t local_port = 0;
 802c962:	2300      	movs	r3, #0
 802c964:	847b      	strh	r3, [r7, #34]	; 0x22
    enum tcp_state last_state;
    seqno = pcb->snd_nxt;
 802c966:	687b      	ldr	r3, [r7, #4]
 802c968:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 802c96a:	61bb      	str	r3, [r7, #24]
    ackno = pcb->rcv_nxt;
 802c96c:	687b      	ldr	r3, [r7, #4]
 802c96e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 802c970:	617b      	str	r3, [r7, #20]
#if LWIP_CALLBACK_API
    errf = pcb->errf;
 802c972:	687b      	ldr	r3, [r7, #4]
 802c974:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 802c978:	613b      	str	r3, [r7, #16]
#endif /* LWIP_CALLBACK_API */
    errf_arg = pcb->callback_arg;
 802c97a:	687b      	ldr	r3, [r7, #4]
 802c97c:	691b      	ldr	r3, [r3, #16]
 802c97e:	60fb      	str	r3, [r7, #12]
    if (pcb->state == CLOSED) {
 802c980:	687b      	ldr	r3, [r7, #4]
 802c982:	7d1b      	ldrb	r3, [r3, #20]
 802c984:	2b00      	cmp	r3, #0
 802c986:	d126      	bne.n	802c9d6 <tcp_abandon+0xc6>
      if (pcb->local_port != 0) {
 802c988:	687b      	ldr	r3, [r7, #4]
 802c98a:	8adb      	ldrh	r3, [r3, #22]
 802c98c:	2b00      	cmp	r3, #0
 802c98e:	d02e      	beq.n	802c9ee <tcp_abandon+0xde>
        /* bound, not yet opened */
        TCP_RMV(&tcp_bound_pcbs, pcb);
 802c990:	4b3b      	ldr	r3, [pc, #236]	; (802ca80 <tcp_abandon+0x170>)
 802c992:	681b      	ldr	r3, [r3, #0]
 802c994:	687a      	ldr	r2, [r7, #4]
 802c996:	429a      	cmp	r2, r3
 802c998:	d105      	bne.n	802c9a6 <tcp_abandon+0x96>
 802c99a:	4b39      	ldr	r3, [pc, #228]	; (802ca80 <tcp_abandon+0x170>)
 802c99c:	681b      	ldr	r3, [r3, #0]
 802c99e:	68db      	ldr	r3, [r3, #12]
 802c9a0:	4a37      	ldr	r2, [pc, #220]	; (802ca80 <tcp_abandon+0x170>)
 802c9a2:	6013      	str	r3, [r2, #0]
 802c9a4:	e013      	b.n	802c9ce <tcp_abandon+0xbe>
 802c9a6:	4b36      	ldr	r3, [pc, #216]	; (802ca80 <tcp_abandon+0x170>)
 802c9a8:	681b      	ldr	r3, [r3, #0]
 802c9aa:	61fb      	str	r3, [r7, #28]
 802c9ac:	e00c      	b.n	802c9c8 <tcp_abandon+0xb8>
 802c9ae:	69fb      	ldr	r3, [r7, #28]
 802c9b0:	68db      	ldr	r3, [r3, #12]
 802c9b2:	687a      	ldr	r2, [r7, #4]
 802c9b4:	429a      	cmp	r2, r3
 802c9b6:	d104      	bne.n	802c9c2 <tcp_abandon+0xb2>
 802c9b8:	687b      	ldr	r3, [r7, #4]
 802c9ba:	68da      	ldr	r2, [r3, #12]
 802c9bc:	69fb      	ldr	r3, [r7, #28]
 802c9be:	60da      	str	r2, [r3, #12]
 802c9c0:	e005      	b.n	802c9ce <tcp_abandon+0xbe>
 802c9c2:	69fb      	ldr	r3, [r7, #28]
 802c9c4:	68db      	ldr	r3, [r3, #12]
 802c9c6:	61fb      	str	r3, [r7, #28]
 802c9c8:	69fb      	ldr	r3, [r7, #28]
 802c9ca:	2b00      	cmp	r3, #0
 802c9cc:	d1ef      	bne.n	802c9ae <tcp_abandon+0x9e>
 802c9ce:	687b      	ldr	r3, [r7, #4]
 802c9d0:	2200      	movs	r2, #0
 802c9d2:	60da      	str	r2, [r3, #12]
 802c9d4:	e00b      	b.n	802c9ee <tcp_abandon+0xde>
      }
    } else {
      send_rst = reset;
 802c9d6:	683b      	ldr	r3, [r7, #0]
 802c9d8:	627b      	str	r3, [r7, #36]	; 0x24
      local_port = pcb->local_port;
 802c9da:	687b      	ldr	r3, [r7, #4]
 802c9dc:	8adb      	ldrh	r3, [r3, #22]
 802c9de:	847b      	strh	r3, [r7, #34]	; 0x22
      TCP_PCB_REMOVE_ACTIVE(pcb);
 802c9e0:	6879      	ldr	r1, [r7, #4]
 802c9e2:	4828      	ldr	r0, [pc, #160]	; (802ca84 <tcp_abandon+0x174>)
 802c9e4:	f001 fa1a 	bl	802de1c <tcp_pcb_remove>
 802c9e8:	4b27      	ldr	r3, [pc, #156]	; (802ca88 <tcp_abandon+0x178>)
 802c9ea:	2201      	movs	r2, #1
 802c9ec:	701a      	strb	r2, [r3, #0]
    }
    if (pcb->unacked != NULL) {
 802c9ee:	687b      	ldr	r3, [r7, #4]
 802c9f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 802c9f2:	2b00      	cmp	r3, #0
 802c9f4:	d004      	beq.n	802ca00 <tcp_abandon+0xf0>
      tcp_segs_free(pcb->unacked);
 802c9f6:	687b      	ldr	r3, [r7, #4]
 802c9f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 802c9fa:	4618      	mov	r0, r3
 802c9fc:	f000 fec4 	bl	802d788 <tcp_segs_free>
    }
    if (pcb->unsent != NULL) {
 802ca00:	687b      	ldr	r3, [r7, #4]
 802ca02:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 802ca04:	2b00      	cmp	r3, #0
 802ca06:	d004      	beq.n	802ca12 <tcp_abandon+0x102>
      tcp_segs_free(pcb->unsent);
 802ca08:	687b      	ldr	r3, [r7, #4]
 802ca0a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 802ca0c:	4618      	mov	r0, r3
 802ca0e:	f000 febb 	bl	802d788 <tcp_segs_free>
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 802ca12:	687b      	ldr	r3, [r7, #4]
 802ca14:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 802ca16:	2b00      	cmp	r3, #0
 802ca18:	d004      	beq.n	802ca24 <tcp_abandon+0x114>
      tcp_segs_free(pcb->ooseq);
 802ca1a:	687b      	ldr	r3, [r7, #4]
 802ca1c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 802ca1e:	4618      	mov	r0, r3
 802ca20:	f000 feb2 	bl	802d788 <tcp_segs_free>
    }
#endif /* TCP_QUEUE_OOSEQ */
    tcp_backlog_accepted(pcb);
    if (send_rst) {
 802ca24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802ca26:	2b00      	cmp	r3, #0
 802ca28:	d00e      	beq.n	802ca48 <tcp_abandon+0x138>
      LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_abandon: sending RST\n"));
      tcp_rst(pcb, seqno, ackno, &pcb->local_ip, &pcb->remote_ip, local_port, pcb->remote_port);
 802ca2a:	6879      	ldr	r1, [r7, #4]
 802ca2c:	687b      	ldr	r3, [r7, #4]
 802ca2e:	3304      	adds	r3, #4
 802ca30:	687a      	ldr	r2, [r7, #4]
 802ca32:	8b12      	ldrh	r2, [r2, #24]
 802ca34:	9202      	str	r2, [sp, #8]
 802ca36:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 802ca38:	9201      	str	r2, [sp, #4]
 802ca3a:	9300      	str	r3, [sp, #0]
 802ca3c:	460b      	mov	r3, r1
 802ca3e:	697a      	ldr	r2, [r7, #20]
 802ca40:	69b9      	ldr	r1, [r7, #24]
 802ca42:	6878      	ldr	r0, [r7, #4]
 802ca44:	f005 fc6e 	bl	8032324 <tcp_rst>
    }
    last_state = pcb->state;
 802ca48:	687b      	ldr	r3, [r7, #4]
 802ca4a:	7d1b      	ldrb	r3, [r3, #20]
 802ca4c:	72fb      	strb	r3, [r7, #11]
    tcp_free(pcb);
 802ca4e:	6878      	ldr	r0, [r7, #4]
 802ca50:	f7ff fcd8 	bl	802c404 <tcp_free>
    TCP_EVENT_ERR(last_state, errf, errf_arg, ERR_ABRT);
 802ca54:	693b      	ldr	r3, [r7, #16]
 802ca56:	2b00      	cmp	r3, #0
 802ca58:	d004      	beq.n	802ca64 <tcp_abandon+0x154>
 802ca5a:	693b      	ldr	r3, [r7, #16]
 802ca5c:	f06f 010c 	mvn.w	r1, #12
 802ca60:	68f8      	ldr	r0, [r7, #12]
 802ca62:	4798      	blx	r3
  }
}
 802ca64:	3728      	adds	r7, #40	; 0x28
 802ca66:	46bd      	mov	sp, r7
 802ca68:	bd80      	pop	{r7, pc}
 802ca6a:	bf00      	nop
 802ca6c:	08038b40 	.word	0x08038b40
 802ca70:	08038c84 	.word	0x08038c84
 802ca74:	08038b84 	.word	0x08038b84
 802ca78:	08038ca0 	.word	0x08038ca0
 802ca7c:	2000ee1c 	.word	0x2000ee1c
 802ca80:	2000ee10 	.word	0x2000ee10
 802ca84:	2000ee18 	.word	0x2000ee18
 802ca88:	2000ee20 	.word	0x2000ee20

0802ca8c <tcp_abort>:
 *
 * @param pcb the tcp pcb to abort
 */
void
tcp_abort(struct tcp_pcb *pcb)
{
 802ca8c:	b580      	push	{r7, lr}
 802ca8e:	b082      	sub	sp, #8
 802ca90:	af00      	add	r7, sp, #0
 802ca92:	6078      	str	r0, [r7, #4]
  tcp_abandon(pcb, 1);
 802ca94:	2101      	movs	r1, #1
 802ca96:	6878      	ldr	r0, [r7, #4]
 802ca98:	f7ff ff3a 	bl	802c910 <tcp_abandon>
}
 802ca9c:	bf00      	nop
 802ca9e:	3708      	adds	r7, #8
 802caa0:	46bd      	mov	sp, r7
 802caa2:	bd80      	pop	{r7, pc}

0802caa4 <tcp_bind>:
 *         ERR_VAL if bind failed because the PCB is not in a valid state
 *         ERR_OK if bound
 */
err_t
tcp_bind(struct tcp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 802caa4:	b580      	push	{r7, lr}
 802caa6:	b088      	sub	sp, #32
 802caa8:	af00      	add	r7, sp, #0
 802caaa:	60f8      	str	r0, [r7, #12]
 802caac:	60b9      	str	r1, [r7, #8]
 802caae:	4613      	mov	r3, r2
 802cab0:	80fb      	strh	r3, [r7, #6]
  int i;
  int max_pcb_list = NUM_TCP_PCB_LISTS;
 802cab2:	2304      	movs	r3, #4
 802cab4:	617b      	str	r3, [r7, #20]

  LWIP_ASSERT_CORE_LOCKED();

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 802cab6:	68bb      	ldr	r3, [r7, #8]
 802cab8:	2b00      	cmp	r3, #0
 802caba:	d101      	bne.n	802cac0 <tcp_bind+0x1c>
    ipaddr = IP4_ADDR_ANY;
 802cabc:	4b3e      	ldr	r3, [pc, #248]	; (802cbb8 <tcp_bind+0x114>)
 802cabe:	60bb      	str	r3, [r7, #8]
  }
#else /* LWIP_IPV4 */
  LWIP_ERROR("tcp_bind: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
#endif /* LWIP_IPV4 */

  LWIP_ERROR("tcp_bind: invalid pcb", pcb != NULL, return ERR_ARG);
 802cac0:	68fb      	ldr	r3, [r7, #12]
 802cac2:	2b00      	cmp	r3, #0
 802cac4:	d109      	bne.n	802cada <tcp_bind+0x36>
 802cac6:	4b3d      	ldr	r3, [pc, #244]	; (802cbbc <tcp_bind+0x118>)
 802cac8:	f240 22a9 	movw	r2, #681	; 0x2a9
 802cacc:	493c      	ldr	r1, [pc, #240]	; (802cbc0 <tcp_bind+0x11c>)
 802cace:	483d      	ldr	r0, [pc, #244]	; (802cbc4 <tcp_bind+0x120>)
 802cad0:	f009 fb62 	bl	8036198 <iprintf>
 802cad4:	f06f 030f 	mvn.w	r3, #15
 802cad8:	e06a      	b.n	802cbb0 <tcp_bind+0x10c>

  LWIP_ERROR("tcp_bind: can only bind in state CLOSED", pcb->state == CLOSED, return ERR_VAL);
 802cada:	68fb      	ldr	r3, [r7, #12]
 802cadc:	7d1b      	ldrb	r3, [r3, #20]
 802cade:	2b00      	cmp	r3, #0
 802cae0:	d009      	beq.n	802caf6 <tcp_bind+0x52>
 802cae2:	4b36      	ldr	r3, [pc, #216]	; (802cbbc <tcp_bind+0x118>)
 802cae4:	f240 22ab 	movw	r2, #683	; 0x2ab
 802cae8:	4937      	ldr	r1, [pc, #220]	; (802cbc8 <tcp_bind+0x124>)
 802caea:	4836      	ldr	r0, [pc, #216]	; (802cbc4 <tcp_bind+0x120>)
 802caec:	f009 fb54 	bl	8036198 <iprintf>
 802caf0:	f06f 0305 	mvn.w	r3, #5
 802caf4:	e05c      	b.n	802cbb0 <tcp_bind+0x10c>
    ip6_addr_select_zone(ip_2_ip6(&zoned_ipaddr), ip_2_ip6(&zoned_ipaddr));
    ipaddr = &zoned_ipaddr;
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  if (port == 0) {
 802caf6:	88fb      	ldrh	r3, [r7, #6]
 802caf8:	2b00      	cmp	r3, #0
 802cafa:	d109      	bne.n	802cb10 <tcp_bind+0x6c>
    port = tcp_new_port();
 802cafc:	f000 f9de 	bl	802cebc <tcp_new_port>
 802cb00:	4603      	mov	r3, r0
 802cb02:	80fb      	strh	r3, [r7, #6]
    if (port == 0) {
 802cb04:	88fb      	ldrh	r3, [r7, #6]
 802cb06:	2b00      	cmp	r3, #0
 802cb08:	d135      	bne.n	802cb76 <tcp_bind+0xd2>
      return ERR_BUF;
 802cb0a:	f06f 0301 	mvn.w	r3, #1
 802cb0e:	e04f      	b.n	802cbb0 <tcp_bind+0x10c>
    }
  } else {
    /* Check if the address already is in use (on all lists) */
    for (i = 0; i < max_pcb_list; i++) {
 802cb10:	2300      	movs	r3, #0
 802cb12:	61fb      	str	r3, [r7, #28]
 802cb14:	e02b      	b.n	802cb6e <tcp_bind+0xca>
      for (cpcb = *tcp_pcb_lists[i]; cpcb != NULL; cpcb = cpcb->next) {
 802cb16:	4a2d      	ldr	r2, [pc, #180]	; (802cbcc <tcp_bind+0x128>)
 802cb18:	69fb      	ldr	r3, [r7, #28]
 802cb1a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 802cb1e:	681b      	ldr	r3, [r3, #0]
 802cb20:	61bb      	str	r3, [r7, #24]
 802cb22:	e01e      	b.n	802cb62 <tcp_bind+0xbe>
        if (cpcb->local_port == port) {
 802cb24:	69bb      	ldr	r3, [r7, #24]
 802cb26:	8adb      	ldrh	r3, [r3, #22]
 802cb28:	88fa      	ldrh	r2, [r7, #6]
 802cb2a:	429a      	cmp	r2, r3
 802cb2c:	d116      	bne.n	802cb5c <tcp_bind+0xb8>
              !ip_get_option(cpcb, SOF_REUSEADDR))
#endif /* SO_REUSE */
          {
            /* @todo: check accept_any_ip_version */
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
                (ip_addr_isany(&cpcb->local_ip) ||
 802cb2e:	69bb      	ldr	r3, [r7, #24]
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
 802cb30:	2b00      	cmp	r3, #0
 802cb32:	d010      	beq.n	802cb56 <tcp_bind+0xb2>
                (ip_addr_isany(&cpcb->local_ip) ||
 802cb34:	69bb      	ldr	r3, [r7, #24]
 802cb36:	681b      	ldr	r3, [r3, #0]
 802cb38:	2b00      	cmp	r3, #0
 802cb3a:	d00c      	beq.n	802cb56 <tcp_bind+0xb2>
 802cb3c:	68bb      	ldr	r3, [r7, #8]
 802cb3e:	2b00      	cmp	r3, #0
 802cb40:	d009      	beq.n	802cb56 <tcp_bind+0xb2>
                 ip_addr_isany(ipaddr) ||
 802cb42:	68bb      	ldr	r3, [r7, #8]
 802cb44:	681b      	ldr	r3, [r3, #0]
 802cb46:	2b00      	cmp	r3, #0
 802cb48:	d005      	beq.n	802cb56 <tcp_bind+0xb2>
                 ip_addr_cmp(&cpcb->local_ip, ipaddr))) {
 802cb4a:	69bb      	ldr	r3, [r7, #24]
 802cb4c:	681a      	ldr	r2, [r3, #0]
 802cb4e:	68bb      	ldr	r3, [r7, #8]
 802cb50:	681b      	ldr	r3, [r3, #0]
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
 802cb52:	429a      	cmp	r2, r3
 802cb54:	d102      	bne.n	802cb5c <tcp_bind+0xb8>
              return ERR_USE;
 802cb56:	f06f 0307 	mvn.w	r3, #7
 802cb5a:	e029      	b.n	802cbb0 <tcp_bind+0x10c>
      for (cpcb = *tcp_pcb_lists[i]; cpcb != NULL; cpcb = cpcb->next) {
 802cb5c:	69bb      	ldr	r3, [r7, #24]
 802cb5e:	68db      	ldr	r3, [r3, #12]
 802cb60:	61bb      	str	r3, [r7, #24]
 802cb62:	69bb      	ldr	r3, [r7, #24]
 802cb64:	2b00      	cmp	r3, #0
 802cb66:	d1dd      	bne.n	802cb24 <tcp_bind+0x80>
    for (i = 0; i < max_pcb_list; i++) {
 802cb68:	69fb      	ldr	r3, [r7, #28]
 802cb6a:	3301      	adds	r3, #1
 802cb6c:	61fb      	str	r3, [r7, #28]
 802cb6e:	69fa      	ldr	r2, [r7, #28]
 802cb70:	697b      	ldr	r3, [r7, #20]
 802cb72:	429a      	cmp	r2, r3
 802cb74:	dbcf      	blt.n	802cb16 <tcp_bind+0x72>
        }
      }
    }
  }

  if (!ip_addr_isany(ipaddr)
 802cb76:	68bb      	ldr	r3, [r7, #8]
 802cb78:	2b00      	cmp	r3, #0
 802cb7a:	d00c      	beq.n	802cb96 <tcp_bind+0xf2>
 802cb7c:	68bb      	ldr	r3, [r7, #8]
 802cb7e:	681b      	ldr	r3, [r3, #0]
 802cb80:	2b00      	cmp	r3, #0
 802cb82:	d008      	beq.n	802cb96 <tcp_bind+0xf2>
#if LWIP_IPV4 && LWIP_IPV6
      || (IP_GET_TYPE(ipaddr) != IP_GET_TYPE(&pcb->local_ip))
#endif /* LWIP_IPV4 && LWIP_IPV6 */
     ) {
    ip_addr_set(&pcb->local_ip, ipaddr);
 802cb84:	68bb      	ldr	r3, [r7, #8]
 802cb86:	2b00      	cmp	r3, #0
 802cb88:	d002      	beq.n	802cb90 <tcp_bind+0xec>
 802cb8a:	68bb      	ldr	r3, [r7, #8]
 802cb8c:	681b      	ldr	r3, [r3, #0]
 802cb8e:	e000      	b.n	802cb92 <tcp_bind+0xee>
 802cb90:	2300      	movs	r3, #0
 802cb92:	68fa      	ldr	r2, [r7, #12]
 802cb94:	6013      	str	r3, [r2, #0]
  }
  pcb->local_port = port;
 802cb96:	68fb      	ldr	r3, [r7, #12]
 802cb98:	88fa      	ldrh	r2, [r7, #6]
 802cb9a:	82da      	strh	r2, [r3, #22]
  TCP_REG(&tcp_bound_pcbs, pcb);
 802cb9c:	4b0c      	ldr	r3, [pc, #48]	; (802cbd0 <tcp_bind+0x12c>)
 802cb9e:	681a      	ldr	r2, [r3, #0]
 802cba0:	68fb      	ldr	r3, [r7, #12]
 802cba2:	60da      	str	r2, [r3, #12]
 802cba4:	4a0a      	ldr	r2, [pc, #40]	; (802cbd0 <tcp_bind+0x12c>)
 802cba6:	68fb      	ldr	r3, [r7, #12]
 802cba8:	6013      	str	r3, [r2, #0]
 802cbaa:	f005 fd7d 	bl	80326a8 <tcp_timer_needed>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_bind: bind to port %"U16_F"\n", port));
  return ERR_OK;
 802cbae:	2300      	movs	r3, #0
}
 802cbb0:	4618      	mov	r0, r3
 802cbb2:	3720      	adds	r7, #32
 802cbb4:	46bd      	mov	sp, r7
 802cbb6:	bd80      	pop	{r7, pc}
 802cbb8:	0803abc4 	.word	0x0803abc4
 802cbbc:	08038b40 	.word	0x08038b40
 802cbc0:	08038cd4 	.word	0x08038cd4
 802cbc4:	08038b84 	.word	0x08038b84
 802cbc8:	08038cec 	.word	0x08038cec
 802cbcc:	0803ab9c 	.word	0x0803ab9c
 802cbd0:	2000ee10 	.word	0x2000ee10

0802cbd4 <tcp_accept_null>:
/**
 * Default accept callback if no accept callback is specified by the user.
 */
static err_t
tcp_accept_null(void *arg, struct tcp_pcb *pcb, err_t err)
{
 802cbd4:	b580      	push	{r7, lr}
 802cbd6:	b084      	sub	sp, #16
 802cbd8:	af00      	add	r7, sp, #0
 802cbda:	60f8      	str	r0, [r7, #12]
 802cbdc:	60b9      	str	r1, [r7, #8]
 802cbde:	4613      	mov	r3, r2
 802cbe0:	71fb      	strb	r3, [r7, #7]
  LWIP_UNUSED_ARG(arg);
  LWIP_UNUSED_ARG(err);

  LWIP_ASSERT("tcp_accept_null: invalid pcb", pcb != NULL);
 802cbe2:	68bb      	ldr	r3, [r7, #8]
 802cbe4:	2b00      	cmp	r3, #0
 802cbe6:	d106      	bne.n	802cbf6 <tcp_accept_null+0x22>
 802cbe8:	4b07      	ldr	r3, [pc, #28]	; (802cc08 <tcp_accept_null+0x34>)
 802cbea:	f240 320f 	movw	r2, #783	; 0x30f
 802cbee:	4907      	ldr	r1, [pc, #28]	; (802cc0c <tcp_accept_null+0x38>)
 802cbf0:	4807      	ldr	r0, [pc, #28]	; (802cc10 <tcp_accept_null+0x3c>)
 802cbf2:	f009 fad1 	bl	8036198 <iprintf>

  tcp_abort(pcb);
 802cbf6:	68b8      	ldr	r0, [r7, #8]
 802cbf8:	f7ff ff48 	bl	802ca8c <tcp_abort>

  return ERR_ABRT;
 802cbfc:	f06f 030c 	mvn.w	r3, #12
}
 802cc00:	4618      	mov	r0, r3
 802cc02:	3710      	adds	r7, #16
 802cc04:	46bd      	mov	sp, r7
 802cc06:	bd80      	pop	{r7, pc}
 802cc08:	08038b40 	.word	0x08038b40
 802cc0c:	08038d14 	.word	0x08038d14
 802cc10:	08038b84 	.word	0x08038b84

0802cc14 <tcp_listen_with_backlog_and_err>:
 *       called like this:
 *             tpcb = tcp_listen_with_backlog_and_err(tpcb, backlog, &err);
 */
struct tcp_pcb *
tcp_listen_with_backlog_and_err(struct tcp_pcb *pcb, u8_t backlog, err_t *err)
{
 802cc14:	b580      	push	{r7, lr}
 802cc16:	b088      	sub	sp, #32
 802cc18:	af00      	add	r7, sp, #0
 802cc1a:	60f8      	str	r0, [r7, #12]
 802cc1c:	460b      	mov	r3, r1
 802cc1e:	607a      	str	r2, [r7, #4]
 802cc20:	72fb      	strb	r3, [r7, #11]
  struct tcp_pcb_listen *lpcb = NULL;
 802cc22:	2300      	movs	r3, #0
 802cc24:	61fb      	str	r3, [r7, #28]

  LWIP_UNUSED_ARG(backlog);

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_listen_with_backlog_and_err: invalid pcb", pcb != NULL, res = ERR_ARG; goto done);
 802cc26:	68fb      	ldr	r3, [r7, #12]
 802cc28:	2b00      	cmp	r3, #0
 802cc2a:	d109      	bne.n	802cc40 <tcp_listen_with_backlog_and_err+0x2c>
 802cc2c:	4b47      	ldr	r3, [pc, #284]	; (802cd4c <tcp_listen_with_backlog_and_err+0x138>)
 802cc2e:	f240 3259 	movw	r2, #857	; 0x359
 802cc32:	4947      	ldr	r1, [pc, #284]	; (802cd50 <tcp_listen_with_backlog_and_err+0x13c>)
 802cc34:	4847      	ldr	r0, [pc, #284]	; (802cd54 <tcp_listen_with_backlog_and_err+0x140>)
 802cc36:	f009 faaf 	bl	8036198 <iprintf>
 802cc3a:	23f0      	movs	r3, #240	; 0xf0
 802cc3c:	76fb      	strb	r3, [r7, #27]
 802cc3e:	e079      	b.n	802cd34 <tcp_listen_with_backlog_and_err+0x120>
  LWIP_ERROR("tcp_listen_with_backlog_and_err: pcb already connected", pcb->state == CLOSED, res = ERR_CLSD; goto done);
 802cc40:	68fb      	ldr	r3, [r7, #12]
 802cc42:	7d1b      	ldrb	r3, [r3, #20]
 802cc44:	2b00      	cmp	r3, #0
 802cc46:	d009      	beq.n	802cc5c <tcp_listen_with_backlog_and_err+0x48>
 802cc48:	4b40      	ldr	r3, [pc, #256]	; (802cd4c <tcp_listen_with_backlog_and_err+0x138>)
 802cc4a:	f240 325a 	movw	r2, #858	; 0x35a
 802cc4e:	4942      	ldr	r1, [pc, #264]	; (802cd58 <tcp_listen_with_backlog_and_err+0x144>)
 802cc50:	4840      	ldr	r0, [pc, #256]	; (802cd54 <tcp_listen_with_backlog_and_err+0x140>)
 802cc52:	f009 faa1 	bl	8036198 <iprintf>
 802cc56:	23f1      	movs	r3, #241	; 0xf1
 802cc58:	76fb      	strb	r3, [r7, #27]
 802cc5a:	e06b      	b.n	802cd34 <tcp_listen_with_backlog_and_err+0x120>

  /* already listening? */
  if (pcb->state == LISTEN) {
 802cc5c:	68fb      	ldr	r3, [r7, #12]
 802cc5e:	7d1b      	ldrb	r3, [r3, #20]
 802cc60:	2b01      	cmp	r3, #1
 802cc62:	d104      	bne.n	802cc6e <tcp_listen_with_backlog_and_err+0x5a>
    lpcb = (struct tcp_pcb_listen *)pcb;
 802cc64:	68fb      	ldr	r3, [r7, #12]
 802cc66:	61fb      	str	r3, [r7, #28]
    res = ERR_ALREADY;
 802cc68:	23f7      	movs	r3, #247	; 0xf7
 802cc6a:	76fb      	strb	r3, [r7, #27]
    goto done;
 802cc6c:	e062      	b.n	802cd34 <tcp_listen_with_backlog_and_err+0x120>
        goto done;
      }
    }
  }
#endif /* SO_REUSE */
  lpcb = (struct tcp_pcb_listen *)memp_malloc(MEMP_TCP_PCB_LISTEN);
 802cc6e:	2002      	movs	r0, #2
 802cc70:	f7fe f9f4 	bl	802b05c <memp_malloc>
 802cc74:	61f8      	str	r0, [r7, #28]
  if (lpcb == NULL) {
 802cc76:	69fb      	ldr	r3, [r7, #28]
 802cc78:	2b00      	cmp	r3, #0
 802cc7a:	d102      	bne.n	802cc82 <tcp_listen_with_backlog_and_err+0x6e>
    res = ERR_MEM;
 802cc7c:	23ff      	movs	r3, #255	; 0xff
 802cc7e:	76fb      	strb	r3, [r7, #27]
    goto done;
 802cc80:	e058      	b.n	802cd34 <tcp_listen_with_backlog_and_err+0x120>
  }
  lpcb->callback_arg = pcb->callback_arg;
 802cc82:	68fb      	ldr	r3, [r7, #12]
 802cc84:	691a      	ldr	r2, [r3, #16]
 802cc86:	69fb      	ldr	r3, [r7, #28]
 802cc88:	611a      	str	r2, [r3, #16]
  lpcb->local_port = pcb->local_port;
 802cc8a:	68fb      	ldr	r3, [r7, #12]
 802cc8c:	8ada      	ldrh	r2, [r3, #22]
 802cc8e:	69fb      	ldr	r3, [r7, #28]
 802cc90:	82da      	strh	r2, [r3, #22]
  lpcb->state = LISTEN;
 802cc92:	69fb      	ldr	r3, [r7, #28]
 802cc94:	2201      	movs	r2, #1
 802cc96:	751a      	strb	r2, [r3, #20]
  lpcb->prio = pcb->prio;
 802cc98:	68fb      	ldr	r3, [r7, #12]
 802cc9a:	7d5a      	ldrb	r2, [r3, #21]
 802cc9c:	69fb      	ldr	r3, [r7, #28]
 802cc9e:	755a      	strb	r2, [r3, #21]
  lpcb->so_options = pcb->so_options;
 802cca0:	68fb      	ldr	r3, [r7, #12]
 802cca2:	7a5a      	ldrb	r2, [r3, #9]
 802cca4:	69fb      	ldr	r3, [r7, #28]
 802cca6:	725a      	strb	r2, [r3, #9]
  lpcb->netif_idx = NETIF_NO_INDEX;
 802cca8:	69fb      	ldr	r3, [r7, #28]
 802ccaa:	2200      	movs	r2, #0
 802ccac:	721a      	strb	r2, [r3, #8]
  lpcb->ttl = pcb->ttl;
 802ccae:	68fb      	ldr	r3, [r7, #12]
 802ccb0:	7ada      	ldrb	r2, [r3, #11]
 802ccb2:	69fb      	ldr	r3, [r7, #28]
 802ccb4:	72da      	strb	r2, [r3, #11]
  lpcb->tos = pcb->tos;
 802ccb6:	68fb      	ldr	r3, [r7, #12]
 802ccb8:	7a9a      	ldrb	r2, [r3, #10]
 802ccba:	69fb      	ldr	r3, [r7, #28]
 802ccbc:	729a      	strb	r2, [r3, #10]
#if LWIP_IPV4 && LWIP_IPV6
  IP_SET_TYPE_VAL(lpcb->remote_ip, pcb->local_ip.type);
#endif /* LWIP_IPV4 && LWIP_IPV6 */
  ip_addr_copy(lpcb->local_ip, pcb->local_ip);
 802ccbe:	68fb      	ldr	r3, [r7, #12]
 802ccc0:	681a      	ldr	r2, [r3, #0]
 802ccc2:	69fb      	ldr	r3, [r7, #28]
 802ccc4:	601a      	str	r2, [r3, #0]
  if (pcb->local_port != 0) {
 802ccc6:	68fb      	ldr	r3, [r7, #12]
 802ccc8:	8adb      	ldrh	r3, [r3, #22]
 802ccca:	2b00      	cmp	r3, #0
 802cccc:	d021      	beq.n	802cd12 <tcp_listen_with_backlog_and_err+0xfe>
    TCP_RMV(&tcp_bound_pcbs, pcb);
 802ccce:	4b23      	ldr	r3, [pc, #140]	; (802cd5c <tcp_listen_with_backlog_and_err+0x148>)
 802ccd0:	681b      	ldr	r3, [r3, #0]
 802ccd2:	68fa      	ldr	r2, [r7, #12]
 802ccd4:	429a      	cmp	r2, r3
 802ccd6:	d105      	bne.n	802cce4 <tcp_listen_with_backlog_and_err+0xd0>
 802ccd8:	4b20      	ldr	r3, [pc, #128]	; (802cd5c <tcp_listen_with_backlog_and_err+0x148>)
 802ccda:	681b      	ldr	r3, [r3, #0]
 802ccdc:	68db      	ldr	r3, [r3, #12]
 802ccde:	4a1f      	ldr	r2, [pc, #124]	; (802cd5c <tcp_listen_with_backlog_and_err+0x148>)
 802cce0:	6013      	str	r3, [r2, #0]
 802cce2:	e013      	b.n	802cd0c <tcp_listen_with_backlog_and_err+0xf8>
 802cce4:	4b1d      	ldr	r3, [pc, #116]	; (802cd5c <tcp_listen_with_backlog_and_err+0x148>)
 802cce6:	681b      	ldr	r3, [r3, #0]
 802cce8:	617b      	str	r3, [r7, #20]
 802ccea:	e00c      	b.n	802cd06 <tcp_listen_with_backlog_and_err+0xf2>
 802ccec:	697b      	ldr	r3, [r7, #20]
 802ccee:	68db      	ldr	r3, [r3, #12]
 802ccf0:	68fa      	ldr	r2, [r7, #12]
 802ccf2:	429a      	cmp	r2, r3
 802ccf4:	d104      	bne.n	802cd00 <tcp_listen_with_backlog_and_err+0xec>
 802ccf6:	68fb      	ldr	r3, [r7, #12]
 802ccf8:	68da      	ldr	r2, [r3, #12]
 802ccfa:	697b      	ldr	r3, [r7, #20]
 802ccfc:	60da      	str	r2, [r3, #12]
 802ccfe:	e005      	b.n	802cd0c <tcp_listen_with_backlog_and_err+0xf8>
 802cd00:	697b      	ldr	r3, [r7, #20]
 802cd02:	68db      	ldr	r3, [r3, #12]
 802cd04:	617b      	str	r3, [r7, #20]
 802cd06:	697b      	ldr	r3, [r7, #20]
 802cd08:	2b00      	cmp	r3, #0
 802cd0a:	d1ef      	bne.n	802ccec <tcp_listen_with_backlog_and_err+0xd8>
 802cd0c:	68fb      	ldr	r3, [r7, #12]
 802cd0e:	2200      	movs	r2, #0
 802cd10:	60da      	str	r2, [r3, #12]
  }
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  /* copy over ext_args to listening pcb  */
  memcpy(&lpcb->ext_args, &pcb->ext_args, sizeof(pcb->ext_args));
#endif
  tcp_free(pcb);
 802cd12:	68f8      	ldr	r0, [r7, #12]
 802cd14:	f7ff fb76 	bl	802c404 <tcp_free>
#if LWIP_CALLBACK_API
  lpcb->accept = tcp_accept_null;
 802cd18:	69fb      	ldr	r3, [r7, #28]
 802cd1a:	4a11      	ldr	r2, [pc, #68]	; (802cd60 <tcp_listen_with_backlog_and_err+0x14c>)
 802cd1c:	619a      	str	r2, [r3, #24]
#endif /* LWIP_CALLBACK_API */
#if TCP_LISTEN_BACKLOG
  lpcb->accepts_pending = 0;
  tcp_backlog_set(lpcb, backlog);
#endif /* TCP_LISTEN_BACKLOG */
  TCP_REG(&tcp_listen_pcbs.pcbs, (struct tcp_pcb *)lpcb);
 802cd1e:	4b11      	ldr	r3, [pc, #68]	; (802cd64 <tcp_listen_with_backlog_and_err+0x150>)
 802cd20:	681a      	ldr	r2, [r3, #0]
 802cd22:	69fb      	ldr	r3, [r7, #28]
 802cd24:	60da      	str	r2, [r3, #12]
 802cd26:	4a0f      	ldr	r2, [pc, #60]	; (802cd64 <tcp_listen_with_backlog_and_err+0x150>)
 802cd28:	69fb      	ldr	r3, [r7, #28]
 802cd2a:	6013      	str	r3, [r2, #0]
 802cd2c:	f005 fcbc 	bl	80326a8 <tcp_timer_needed>
  res = ERR_OK;
 802cd30:	2300      	movs	r3, #0
 802cd32:	76fb      	strb	r3, [r7, #27]
done:
  if (err != NULL) {
 802cd34:	687b      	ldr	r3, [r7, #4]
 802cd36:	2b00      	cmp	r3, #0
 802cd38:	d002      	beq.n	802cd40 <tcp_listen_with_backlog_and_err+0x12c>
    *err = res;
 802cd3a:	687b      	ldr	r3, [r7, #4]
 802cd3c:	7efa      	ldrb	r2, [r7, #27]
 802cd3e:	701a      	strb	r2, [r3, #0]
  }
  return (struct tcp_pcb *)lpcb;
 802cd40:	69fb      	ldr	r3, [r7, #28]
}
 802cd42:	4618      	mov	r0, r3
 802cd44:	3720      	adds	r7, #32
 802cd46:	46bd      	mov	sp, r7
 802cd48:	bd80      	pop	{r7, pc}
 802cd4a:	bf00      	nop
 802cd4c:	08038b40 	.word	0x08038b40
 802cd50:	08038d34 	.word	0x08038d34
 802cd54:	08038b84 	.word	0x08038b84
 802cd58:	08038d64 	.word	0x08038d64
 802cd5c:	2000ee10 	.word	0x2000ee10
 802cd60:	0802cbd5 	.word	0x0802cbd5
 802cd64:	2000ee14 	.word	0x2000ee14

0802cd68 <tcp_update_rcv_ann_wnd>:
 * Returns how much extra window would be advertised if we sent an
 * update now.
 */
u32_t
tcp_update_rcv_ann_wnd(struct tcp_pcb *pcb)
{
 802cd68:	b580      	push	{r7, lr}
 802cd6a:	b084      	sub	sp, #16
 802cd6c:	af00      	add	r7, sp, #0
 802cd6e:	6078      	str	r0, [r7, #4]
  u32_t new_right_edge;

  LWIP_ASSERT("tcp_update_rcv_ann_wnd: invalid pcb", pcb != NULL);
 802cd70:	687b      	ldr	r3, [r7, #4]
 802cd72:	2b00      	cmp	r3, #0
 802cd74:	d106      	bne.n	802cd84 <tcp_update_rcv_ann_wnd+0x1c>
 802cd76:	4b25      	ldr	r3, [pc, #148]	; (802ce0c <tcp_update_rcv_ann_wnd+0xa4>)
 802cd78:	f240 32a6 	movw	r2, #934	; 0x3a6
 802cd7c:	4924      	ldr	r1, [pc, #144]	; (802ce10 <tcp_update_rcv_ann_wnd+0xa8>)
 802cd7e:	4825      	ldr	r0, [pc, #148]	; (802ce14 <tcp_update_rcv_ann_wnd+0xac>)
 802cd80:	f009 fa0a 	bl	8036198 <iprintf>
  new_right_edge = pcb->rcv_nxt + pcb->rcv_wnd;
 802cd84:	687b      	ldr	r3, [r7, #4]
 802cd86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 802cd88:	687a      	ldr	r2, [r7, #4]
 802cd8a:	8d12      	ldrh	r2, [r2, #40]	; 0x28
 802cd8c:	4413      	add	r3, r2
 802cd8e:	60fb      	str	r3, [r7, #12]

  if (TCP_SEQ_GEQ(new_right_edge, pcb->rcv_ann_right_edge + LWIP_MIN((TCP_WND / 2), pcb->mss))) {
 802cd90:	687b      	ldr	r3, [r7, #4]
 802cd92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 802cd94:	687a      	ldr	r2, [r7, #4]
 802cd96:	8e52      	ldrh	r2, [r2, #50]	; 0x32
 802cd98:	f5b2 6f86 	cmp.w	r2, #1072	; 0x430
 802cd9c:	bf28      	it	cs
 802cd9e:	f44f 6286 	movcs.w	r2, #1072	; 0x430
 802cda2:	b292      	uxth	r2, r2
 802cda4:	4413      	add	r3, r2
 802cda6:	68fa      	ldr	r2, [r7, #12]
 802cda8:	1ad3      	subs	r3, r2, r3
 802cdaa:	2b00      	cmp	r3, #0
 802cdac:	db08      	blt.n	802cdc0 <tcp_update_rcv_ann_wnd+0x58>
    /* we can advertise more window */
    pcb->rcv_ann_wnd = pcb->rcv_wnd;
 802cdae:	687b      	ldr	r3, [r7, #4]
 802cdb0:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 802cdb2:	687b      	ldr	r3, [r7, #4]
 802cdb4:	855a      	strh	r2, [r3, #42]	; 0x2a
    return new_right_edge - pcb->rcv_ann_right_edge;
 802cdb6:	687b      	ldr	r3, [r7, #4]
 802cdb8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 802cdba:	68fa      	ldr	r2, [r7, #12]
 802cdbc:	1ad3      	subs	r3, r2, r3
 802cdbe:	e020      	b.n	802ce02 <tcp_update_rcv_ann_wnd+0x9a>
  } else {
    if (TCP_SEQ_GT(pcb->rcv_nxt, pcb->rcv_ann_right_edge)) {
 802cdc0:	687b      	ldr	r3, [r7, #4]
 802cdc2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 802cdc4:	687b      	ldr	r3, [r7, #4]
 802cdc6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 802cdc8:	1ad3      	subs	r3, r2, r3
 802cdca:	2b00      	cmp	r3, #0
 802cdcc:	dd03      	ble.n	802cdd6 <tcp_update_rcv_ann_wnd+0x6e>
      /* Can happen due to other end sending out of advertised window,
       * but within actual available (but not yet advertised) window */
      pcb->rcv_ann_wnd = 0;
 802cdce:	687b      	ldr	r3, [r7, #4]
 802cdd0:	2200      	movs	r2, #0
 802cdd2:	855a      	strh	r2, [r3, #42]	; 0x2a
 802cdd4:	e014      	b.n	802ce00 <tcp_update_rcv_ann_wnd+0x98>
    } else {
      /* keep the right edge of window constant */
      u32_t new_rcv_ann_wnd = pcb->rcv_ann_right_edge - pcb->rcv_nxt;
 802cdd6:	687b      	ldr	r3, [r7, #4]
 802cdd8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 802cdda:	687b      	ldr	r3, [r7, #4]
 802cddc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 802cdde:	1ad3      	subs	r3, r2, r3
 802cde0:	60bb      	str	r3, [r7, #8]
#if !LWIP_WND_SCALE
      LWIP_ASSERT("new_rcv_ann_wnd <= 0xffff", new_rcv_ann_wnd <= 0xffff);
 802cde2:	68bb      	ldr	r3, [r7, #8]
 802cde4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 802cde8:	d306      	bcc.n	802cdf8 <tcp_update_rcv_ann_wnd+0x90>
 802cdea:	4b08      	ldr	r3, [pc, #32]	; (802ce0c <tcp_update_rcv_ann_wnd+0xa4>)
 802cdec:	f240 32b6 	movw	r2, #950	; 0x3b6
 802cdf0:	4909      	ldr	r1, [pc, #36]	; (802ce18 <tcp_update_rcv_ann_wnd+0xb0>)
 802cdf2:	4808      	ldr	r0, [pc, #32]	; (802ce14 <tcp_update_rcv_ann_wnd+0xac>)
 802cdf4:	f009 f9d0 	bl	8036198 <iprintf>
#endif
      pcb->rcv_ann_wnd = (tcpwnd_size_t)new_rcv_ann_wnd;
 802cdf8:	68bb      	ldr	r3, [r7, #8]
 802cdfa:	b29a      	uxth	r2, r3
 802cdfc:	687b      	ldr	r3, [r7, #4]
 802cdfe:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
    return 0;
 802ce00:	2300      	movs	r3, #0
  }
}
 802ce02:	4618      	mov	r0, r3
 802ce04:	3710      	adds	r7, #16
 802ce06:	46bd      	mov	sp, r7
 802ce08:	bd80      	pop	{r7, pc}
 802ce0a:	bf00      	nop
 802ce0c:	08038b40 	.word	0x08038b40
 802ce10:	08038d9c 	.word	0x08038d9c
 802ce14:	08038b84 	.word	0x08038b84
 802ce18:	08038dc0 	.word	0x08038dc0

0802ce1c <tcp_recved>:
 * @param pcb the tcp_pcb for which data is read
 * @param len the amount of bytes that have been read by the application
 */
void
tcp_recved(struct tcp_pcb *pcb, u16_t len)
{
 802ce1c:	b580      	push	{r7, lr}
 802ce1e:	b084      	sub	sp, #16
 802ce20:	af00      	add	r7, sp, #0
 802ce22:	6078      	str	r0, [r7, #4]
 802ce24:	460b      	mov	r3, r1
 802ce26:	807b      	strh	r3, [r7, #2]
  u32_t wnd_inflation;
  tcpwnd_size_t rcv_wnd;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_recved: invalid pcb", pcb != NULL, return);
 802ce28:	687b      	ldr	r3, [r7, #4]
 802ce2a:	2b00      	cmp	r3, #0
 802ce2c:	d107      	bne.n	802ce3e <tcp_recved+0x22>
 802ce2e:	4b1f      	ldr	r3, [pc, #124]	; (802ceac <tcp_recved+0x90>)
 802ce30:	f240 32cf 	movw	r2, #975	; 0x3cf
 802ce34:	491e      	ldr	r1, [pc, #120]	; (802ceb0 <tcp_recved+0x94>)
 802ce36:	481f      	ldr	r0, [pc, #124]	; (802ceb4 <tcp_recved+0x98>)
 802ce38:	f009 f9ae 	bl	8036198 <iprintf>
 802ce3c:	e032      	b.n	802cea4 <tcp_recved+0x88>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_recved for listen-pcbs",
 802ce3e:	687b      	ldr	r3, [r7, #4]
 802ce40:	7d1b      	ldrb	r3, [r3, #20]
 802ce42:	2b01      	cmp	r3, #1
 802ce44:	d106      	bne.n	802ce54 <tcp_recved+0x38>
 802ce46:	4b19      	ldr	r3, [pc, #100]	; (802ceac <tcp_recved+0x90>)
 802ce48:	f240 32d2 	movw	r2, #978	; 0x3d2
 802ce4c:	491a      	ldr	r1, [pc, #104]	; (802ceb8 <tcp_recved+0x9c>)
 802ce4e:	4819      	ldr	r0, [pc, #100]	; (802ceb4 <tcp_recved+0x98>)
 802ce50:	f009 f9a2 	bl	8036198 <iprintf>
              pcb->state != LISTEN);

  rcv_wnd = (tcpwnd_size_t)(pcb->rcv_wnd + len);
 802ce54:	687b      	ldr	r3, [r7, #4]
 802ce56:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 802ce58:	887b      	ldrh	r3, [r7, #2]
 802ce5a:	4413      	add	r3, r2
 802ce5c:	81fb      	strh	r3, [r7, #14]
  if ((rcv_wnd > TCP_WND_MAX(pcb)) || (rcv_wnd < pcb->rcv_wnd)) {
 802ce5e:	89fb      	ldrh	r3, [r7, #14]
 802ce60:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 802ce64:	d804      	bhi.n	802ce70 <tcp_recved+0x54>
 802ce66:	687b      	ldr	r3, [r7, #4]
 802ce68:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 802ce6a:	89fa      	ldrh	r2, [r7, #14]
 802ce6c:	429a      	cmp	r2, r3
 802ce6e:	d204      	bcs.n	802ce7a <tcp_recved+0x5e>
    /* window got too big or tcpwnd_size_t overflow */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: window got too big or tcpwnd_size_t overflow\n"));
    pcb->rcv_wnd = TCP_WND_MAX(pcb);
 802ce70:	687b      	ldr	r3, [r7, #4]
 802ce72:	f44f 6206 	mov.w	r2, #2144	; 0x860
 802ce76:	851a      	strh	r2, [r3, #40]	; 0x28
 802ce78:	e002      	b.n	802ce80 <tcp_recved+0x64>
  } else  {
    pcb->rcv_wnd = rcv_wnd;
 802ce7a:	687b      	ldr	r3, [r7, #4]
 802ce7c:	89fa      	ldrh	r2, [r7, #14]
 802ce7e:	851a      	strh	r2, [r3, #40]	; 0x28
  }

  wnd_inflation = tcp_update_rcv_ann_wnd(pcb);
 802ce80:	6878      	ldr	r0, [r7, #4]
 802ce82:	f7ff ff71 	bl	802cd68 <tcp_update_rcv_ann_wnd>
 802ce86:	60b8      	str	r0, [r7, #8]

  /* If the change in the right edge of window is significant (default
   * watermark is TCP_WND/4), then send an explicit update now.
   * Otherwise wait for a packet to be sent in the normal course of
   * events (or more window to be available later) */
  if (wnd_inflation >= TCP_WND_UPDATE_THRESHOLD) {
 802ce88:	68bb      	ldr	r3, [r7, #8]
 802ce8a:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 802ce8e:	d309      	bcc.n	802cea4 <tcp_recved+0x88>
    tcp_ack_now(pcb);
 802ce90:	687b      	ldr	r3, [r7, #4]
 802ce92:	8b5b      	ldrh	r3, [r3, #26]
 802ce94:	f043 0302 	orr.w	r3, r3, #2
 802ce98:	b29a      	uxth	r2, r3
 802ce9a:	687b      	ldr	r3, [r7, #4]
 802ce9c:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 802ce9e:	6878      	ldr	r0, [r7, #4]
 802cea0:	f004 fc78 	bl	8031794 <tcp_output>
  }

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: received %"U16_F" bytes, wnd %"TCPWNDSIZE_F" (%"TCPWNDSIZE_F").\n",
                          len, pcb->rcv_wnd, (u16_t)(TCP_WND_MAX(pcb) - pcb->rcv_wnd)));
}
 802cea4:	3710      	adds	r7, #16
 802cea6:	46bd      	mov	sp, r7
 802cea8:	bd80      	pop	{r7, pc}
 802ceaa:	bf00      	nop
 802ceac:	08038b40 	.word	0x08038b40
 802ceb0:	08038ddc 	.word	0x08038ddc
 802ceb4:	08038b84 	.word	0x08038b84
 802ceb8:	08038df4 	.word	0x08038df4

0802cebc <tcp_new_port>:
 *
 * @return a new (free) local TCP port number
 */
static u16_t
tcp_new_port(void)
{
 802cebc:	b480      	push	{r7}
 802cebe:	b083      	sub	sp, #12
 802cec0:	af00      	add	r7, sp, #0
  u8_t i;
  u16_t n = 0;
 802cec2:	2300      	movs	r3, #0
 802cec4:	80bb      	strh	r3, [r7, #4]
  struct tcp_pcb *pcb;

again:
  tcp_port++;
 802cec6:	4b1e      	ldr	r3, [pc, #120]	; (802cf40 <tcp_new_port+0x84>)
 802cec8:	881b      	ldrh	r3, [r3, #0]
 802ceca:	3301      	adds	r3, #1
 802cecc:	b29a      	uxth	r2, r3
 802cece:	4b1c      	ldr	r3, [pc, #112]	; (802cf40 <tcp_new_port+0x84>)
 802ced0:	801a      	strh	r2, [r3, #0]
  if (tcp_port == TCP_LOCAL_PORT_RANGE_END) {
 802ced2:	4b1b      	ldr	r3, [pc, #108]	; (802cf40 <tcp_new_port+0x84>)
 802ced4:	881b      	ldrh	r3, [r3, #0]
 802ced6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 802ceda:	4293      	cmp	r3, r2
 802cedc:	d103      	bne.n	802cee6 <tcp_new_port+0x2a>
    tcp_port = TCP_LOCAL_PORT_RANGE_START;
 802cede:	4b18      	ldr	r3, [pc, #96]	; (802cf40 <tcp_new_port+0x84>)
 802cee0:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 802cee4:	801a      	strh	r2, [r3, #0]
  }
  /* Check all PCB lists. */
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
 802cee6:	2300      	movs	r3, #0
 802cee8:	71fb      	strb	r3, [r7, #7]
 802ceea:	e01e      	b.n	802cf2a <tcp_new_port+0x6e>
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
 802ceec:	79fb      	ldrb	r3, [r7, #7]
 802ceee:	4a15      	ldr	r2, [pc, #84]	; (802cf44 <tcp_new_port+0x88>)
 802cef0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 802cef4:	681b      	ldr	r3, [r3, #0]
 802cef6:	603b      	str	r3, [r7, #0]
 802cef8:	e011      	b.n	802cf1e <tcp_new_port+0x62>
      if (pcb->local_port == tcp_port) {
 802cefa:	683b      	ldr	r3, [r7, #0]
 802cefc:	8ada      	ldrh	r2, [r3, #22]
 802cefe:	4b10      	ldr	r3, [pc, #64]	; (802cf40 <tcp_new_port+0x84>)
 802cf00:	881b      	ldrh	r3, [r3, #0]
 802cf02:	429a      	cmp	r2, r3
 802cf04:	d108      	bne.n	802cf18 <tcp_new_port+0x5c>
        n++;
 802cf06:	88bb      	ldrh	r3, [r7, #4]
 802cf08:	3301      	adds	r3, #1
 802cf0a:	80bb      	strh	r3, [r7, #4]
        if (n > (TCP_LOCAL_PORT_RANGE_END - TCP_LOCAL_PORT_RANGE_START)) {
 802cf0c:	88bb      	ldrh	r3, [r7, #4]
 802cf0e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 802cf12:	d3d8      	bcc.n	802cec6 <tcp_new_port+0xa>
          return 0;
 802cf14:	2300      	movs	r3, #0
 802cf16:	e00d      	b.n	802cf34 <tcp_new_port+0x78>
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
 802cf18:	683b      	ldr	r3, [r7, #0]
 802cf1a:	68db      	ldr	r3, [r3, #12]
 802cf1c:	603b      	str	r3, [r7, #0]
 802cf1e:	683b      	ldr	r3, [r7, #0]
 802cf20:	2b00      	cmp	r3, #0
 802cf22:	d1ea      	bne.n	802cefa <tcp_new_port+0x3e>
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
 802cf24:	79fb      	ldrb	r3, [r7, #7]
 802cf26:	3301      	adds	r3, #1
 802cf28:	71fb      	strb	r3, [r7, #7]
 802cf2a:	79fb      	ldrb	r3, [r7, #7]
 802cf2c:	2b03      	cmp	r3, #3
 802cf2e:	d9dd      	bls.n	802ceec <tcp_new_port+0x30>
        }
        goto again;
      }
    }
  }
  return tcp_port;
 802cf30:	4b03      	ldr	r3, [pc, #12]	; (802cf40 <tcp_new_port+0x84>)
 802cf32:	881b      	ldrh	r3, [r3, #0]
}
 802cf34:	4618      	mov	r0, r3
 802cf36:	370c      	adds	r7, #12
 802cf38:	46bd      	mov	sp, r7
 802cf3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 802cf3e:	4770      	bx	lr
 802cf40:	20000028 	.word	0x20000028
 802cf44:	0803ab9c 	.word	0x0803ab9c

0802cf48 <tcp_slowtmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_slowtmr(void)
{
 802cf48:	b5b0      	push	{r4, r5, r7, lr}
 802cf4a:	b090      	sub	sp, #64	; 0x40
 802cf4c:	af04      	add	r7, sp, #16
  tcpwnd_size_t eff_wnd;
  u8_t pcb_remove;      /* flag if a PCB should be removed */
  u8_t pcb_reset;       /* flag if a RST should be sent when removing */
  err_t err;

  err = ERR_OK;
 802cf4e:	2300      	movs	r3, #0
 802cf50:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25

  ++tcp_ticks;
 802cf54:	4b94      	ldr	r3, [pc, #592]	; (802d1a8 <tcp_slowtmr+0x260>)
 802cf56:	681b      	ldr	r3, [r3, #0]
 802cf58:	3301      	adds	r3, #1
 802cf5a:	4a93      	ldr	r2, [pc, #588]	; (802d1a8 <tcp_slowtmr+0x260>)
 802cf5c:	6013      	str	r3, [r2, #0]
  ++tcp_timer_ctr;
 802cf5e:	4b93      	ldr	r3, [pc, #588]	; (802d1ac <tcp_slowtmr+0x264>)
 802cf60:	781b      	ldrb	r3, [r3, #0]
 802cf62:	3301      	adds	r3, #1
 802cf64:	b2da      	uxtb	r2, r3
 802cf66:	4b91      	ldr	r3, [pc, #580]	; (802d1ac <tcp_slowtmr+0x264>)
 802cf68:	701a      	strb	r2, [r3, #0]

tcp_slowtmr_start:
  /* Steps through all of the active PCBs. */
  prev = NULL;
 802cf6a:	2300      	movs	r3, #0
 802cf6c:	62bb      	str	r3, [r7, #40]	; 0x28
  pcb = tcp_active_pcbs;
 802cf6e:	4b90      	ldr	r3, [pc, #576]	; (802d1b0 <tcp_slowtmr+0x268>)
 802cf70:	681b      	ldr	r3, [r3, #0]
 802cf72:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (pcb == NULL) {
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: no active pcbs\n"));
  }
  while (pcb != NULL) {
 802cf74:	e29f      	b.n	802d4b6 <tcp_slowtmr+0x56e>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: processing active pcb\n"));
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != CLOSED\n", pcb->state != CLOSED);
 802cf76:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 802cf78:	7d1b      	ldrb	r3, [r3, #20]
 802cf7a:	2b00      	cmp	r3, #0
 802cf7c:	d106      	bne.n	802cf8c <tcp_slowtmr+0x44>
 802cf7e:	4b8d      	ldr	r3, [pc, #564]	; (802d1b4 <tcp_slowtmr+0x26c>)
 802cf80:	f240 42be 	movw	r2, #1214	; 0x4be
 802cf84:	498c      	ldr	r1, [pc, #560]	; (802d1b8 <tcp_slowtmr+0x270>)
 802cf86:	488d      	ldr	r0, [pc, #564]	; (802d1bc <tcp_slowtmr+0x274>)
 802cf88:	f009 f906 	bl	8036198 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != LISTEN\n", pcb->state != LISTEN);
 802cf8c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 802cf8e:	7d1b      	ldrb	r3, [r3, #20]
 802cf90:	2b01      	cmp	r3, #1
 802cf92:	d106      	bne.n	802cfa2 <tcp_slowtmr+0x5a>
 802cf94:	4b87      	ldr	r3, [pc, #540]	; (802d1b4 <tcp_slowtmr+0x26c>)
 802cf96:	f240 42bf 	movw	r2, #1215	; 0x4bf
 802cf9a:	4989      	ldr	r1, [pc, #548]	; (802d1c0 <tcp_slowtmr+0x278>)
 802cf9c:	4887      	ldr	r0, [pc, #540]	; (802d1bc <tcp_slowtmr+0x274>)
 802cf9e:	f009 f8fb 	bl	8036198 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != TIME-WAIT\n", pcb->state != TIME_WAIT);
 802cfa2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 802cfa4:	7d1b      	ldrb	r3, [r3, #20]
 802cfa6:	2b0a      	cmp	r3, #10
 802cfa8:	d106      	bne.n	802cfb8 <tcp_slowtmr+0x70>
 802cfaa:	4b82      	ldr	r3, [pc, #520]	; (802d1b4 <tcp_slowtmr+0x26c>)
 802cfac:	f44f 6298 	mov.w	r2, #1216	; 0x4c0
 802cfb0:	4984      	ldr	r1, [pc, #528]	; (802d1c4 <tcp_slowtmr+0x27c>)
 802cfb2:	4882      	ldr	r0, [pc, #520]	; (802d1bc <tcp_slowtmr+0x274>)
 802cfb4:	f009 f8f0 	bl	8036198 <iprintf>
    if (pcb->last_timer == tcp_timer_ctr) {
 802cfb8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 802cfba:	7f9a      	ldrb	r2, [r3, #30]
 802cfbc:	4b7b      	ldr	r3, [pc, #492]	; (802d1ac <tcp_slowtmr+0x264>)
 802cfbe:	781b      	ldrb	r3, [r3, #0]
 802cfc0:	429a      	cmp	r2, r3
 802cfc2:	d105      	bne.n	802cfd0 <tcp_slowtmr+0x88>
      /* skip this pcb, we have already processed it */
      prev = pcb;
 802cfc4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 802cfc6:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 802cfc8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 802cfca:	68db      	ldr	r3, [r3, #12]
 802cfcc:	62fb      	str	r3, [r7, #44]	; 0x2c
      continue;
 802cfce:	e272      	b.n	802d4b6 <tcp_slowtmr+0x56e>
    }
    pcb->last_timer = tcp_timer_ctr;
 802cfd0:	4b76      	ldr	r3, [pc, #472]	; (802d1ac <tcp_slowtmr+0x264>)
 802cfd2:	781a      	ldrb	r2, [r3, #0]
 802cfd4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 802cfd6:	779a      	strb	r2, [r3, #30]

    pcb_remove = 0;
 802cfd8:	2300      	movs	r3, #0
 802cfda:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    pcb_reset = 0;
 802cfde:	2300      	movs	r3, #0
 802cfe0:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

    if (pcb->state == SYN_SENT && pcb->nrtx >= TCP_SYNMAXRTX) {
 802cfe4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 802cfe6:	7d1b      	ldrb	r3, [r3, #20]
 802cfe8:	2b02      	cmp	r3, #2
 802cfea:	d10a      	bne.n	802d002 <tcp_slowtmr+0xba>
 802cfec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 802cfee:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 802cff2:	2b05      	cmp	r3, #5
 802cff4:	d905      	bls.n	802d002 <tcp_slowtmr+0xba>
      ++pcb_remove;
 802cff6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 802cffa:	3301      	adds	r3, #1
 802cffc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 802d000:	e11e      	b.n	802d240 <tcp_slowtmr+0x2f8>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max SYN retries reached\n"));
    } else if (pcb->nrtx >= TCP_MAXRTX) {
 802d002:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 802d004:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 802d008:	2b0b      	cmp	r3, #11
 802d00a:	d905      	bls.n	802d018 <tcp_slowtmr+0xd0>
      ++pcb_remove;
 802d00c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 802d010:	3301      	adds	r3, #1
 802d012:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 802d016:	e113      	b.n	802d240 <tcp_slowtmr+0x2f8>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max DATA retries reached\n"));
    } else {
      if (pcb->persist_backoff > 0) {
 802d018:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 802d01a:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 802d01e:	2b00      	cmp	r3, #0
 802d020:	d075      	beq.n	802d10e <tcp_slowtmr+0x1c6>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with in-flight data", pcb->unacked == NULL);
 802d022:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 802d024:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 802d026:	2b00      	cmp	r3, #0
 802d028:	d006      	beq.n	802d038 <tcp_slowtmr+0xf0>
 802d02a:	4b62      	ldr	r3, [pc, #392]	; (802d1b4 <tcp_slowtmr+0x26c>)
 802d02c:	f240 42d4 	movw	r2, #1236	; 0x4d4
 802d030:	4965      	ldr	r1, [pc, #404]	; (802d1c8 <tcp_slowtmr+0x280>)
 802d032:	4862      	ldr	r0, [pc, #392]	; (802d1bc <tcp_slowtmr+0x274>)
 802d034:	f009 f8b0 	bl	8036198 <iprintf>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with empty send buffer", pcb->unsent != NULL);
 802d038:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 802d03a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 802d03c:	2b00      	cmp	r3, #0
 802d03e:	d106      	bne.n	802d04e <tcp_slowtmr+0x106>
 802d040:	4b5c      	ldr	r3, [pc, #368]	; (802d1b4 <tcp_slowtmr+0x26c>)
 802d042:	f240 42d5 	movw	r2, #1237	; 0x4d5
 802d046:	4961      	ldr	r1, [pc, #388]	; (802d1cc <tcp_slowtmr+0x284>)
 802d048:	485c      	ldr	r0, [pc, #368]	; (802d1bc <tcp_slowtmr+0x274>)
 802d04a:	f009 f8a5 	bl	8036198 <iprintf>
        if (pcb->persist_probe >= TCP_MAXRTX) {
 802d04e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 802d050:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 802d054:	2b0b      	cmp	r3, #11
 802d056:	d905      	bls.n	802d064 <tcp_slowtmr+0x11c>
          ++pcb_remove; /* max probes reached */
 802d058:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 802d05c:	3301      	adds	r3, #1
 802d05e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 802d062:	e0ed      	b.n	802d240 <tcp_slowtmr+0x2f8>
        } else {
          u8_t backoff_cnt = tcp_persist_backoff[pcb->persist_backoff - 1];
 802d064:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 802d066:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 802d06a:	3b01      	subs	r3, #1
 802d06c:	4a58      	ldr	r2, [pc, #352]	; (802d1d0 <tcp_slowtmr+0x288>)
 802d06e:	5cd3      	ldrb	r3, [r2, r3]
 802d070:	747b      	strb	r3, [r7, #17]
          if (pcb->persist_cnt < backoff_cnt) {
 802d072:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 802d074:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 802d078:	7c7a      	ldrb	r2, [r7, #17]
 802d07a:	429a      	cmp	r2, r3
 802d07c:	d907      	bls.n	802d08e <tcp_slowtmr+0x146>
            pcb->persist_cnt++;
 802d07e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 802d080:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 802d084:	3301      	adds	r3, #1
 802d086:	b2da      	uxtb	r2, r3
 802d088:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 802d08a:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
          }
          if (pcb->persist_cnt >= backoff_cnt) {
 802d08e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 802d090:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 802d094:	7c7a      	ldrb	r2, [r7, #17]
 802d096:	429a      	cmp	r2, r3
 802d098:	f200 80d2 	bhi.w	802d240 <tcp_slowtmr+0x2f8>
            int next_slot = 1; /* increment timer to next slot */
 802d09c:	2301      	movs	r3, #1
 802d09e:	623b      	str	r3, [r7, #32]
            /* If snd_wnd is zero, send 1 byte probes */
            if (pcb->snd_wnd == 0) {
 802d0a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 802d0a2:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 802d0a6:	2b00      	cmp	r3, #0
 802d0a8:	d108      	bne.n	802d0bc <tcp_slowtmr+0x174>
              if (tcp_zero_window_probe(pcb) != ERR_OK) {
 802d0aa:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 802d0ac:	f005 fa2e 	bl	803250c <tcp_zero_window_probe>
 802d0b0:	4603      	mov	r3, r0
 802d0b2:	2b00      	cmp	r3, #0
 802d0b4:	d014      	beq.n	802d0e0 <tcp_slowtmr+0x198>
                next_slot = 0; /* try probe again with current slot */
 802d0b6:	2300      	movs	r3, #0
 802d0b8:	623b      	str	r3, [r7, #32]
 802d0ba:	e011      	b.n	802d0e0 <tcp_slowtmr+0x198>
              }
              /* snd_wnd not fully closed, split unsent head and fill window */
            } else {
              if (tcp_split_unsent_seg(pcb, (u16_t)pcb->snd_wnd) == ERR_OK) {
 802d0bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 802d0be:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 802d0c2:	4619      	mov	r1, r3
 802d0c4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 802d0c6:	f004 f8c3 	bl	8031250 <tcp_split_unsent_seg>
 802d0ca:	4603      	mov	r3, r0
 802d0cc:	2b00      	cmp	r3, #0
 802d0ce:	d107      	bne.n	802d0e0 <tcp_slowtmr+0x198>
                if (tcp_output(pcb) == ERR_OK) {
 802d0d0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 802d0d2:	f004 fb5f 	bl	8031794 <tcp_output>
 802d0d6:	4603      	mov	r3, r0
 802d0d8:	2b00      	cmp	r3, #0
 802d0da:	d101      	bne.n	802d0e0 <tcp_slowtmr+0x198>
                  /* sending will cancel persist timer, else retry with current slot */
                  next_slot = 0;
 802d0dc:	2300      	movs	r3, #0
 802d0de:	623b      	str	r3, [r7, #32]
                }
              }
            }
            if (next_slot) {
 802d0e0:	6a3b      	ldr	r3, [r7, #32]
 802d0e2:	2b00      	cmp	r3, #0
 802d0e4:	f000 80ac 	beq.w	802d240 <tcp_slowtmr+0x2f8>
              pcb->persist_cnt = 0;
 802d0e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 802d0ea:	2200      	movs	r2, #0
 802d0ec:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
              if (pcb->persist_backoff < sizeof(tcp_persist_backoff)) {
 802d0f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 802d0f2:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 802d0f6:	2b06      	cmp	r3, #6
 802d0f8:	f200 80a2 	bhi.w	802d240 <tcp_slowtmr+0x2f8>
                pcb->persist_backoff++;
 802d0fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 802d0fe:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 802d102:	3301      	adds	r3, #1
 802d104:	b2da      	uxtb	r2, r3
 802d106:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 802d108:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
 802d10c:	e098      	b.n	802d240 <tcp_slowtmr+0x2f8>
            }
          }
        }
      } else {
        /* Increase the retransmission timer if it is running */
        if ((pcb->rtime >= 0) && (pcb->rtime < 0x7FFF)) {
 802d10e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 802d110:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 802d114:	2b00      	cmp	r3, #0
 802d116:	db0f      	blt.n	802d138 <tcp_slowtmr+0x1f0>
 802d118:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 802d11a:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 802d11e:	f647 72ff 	movw	r2, #32767	; 0x7fff
 802d122:	4293      	cmp	r3, r2
 802d124:	d008      	beq.n	802d138 <tcp_slowtmr+0x1f0>
          ++pcb->rtime;
 802d126:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 802d128:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 802d12c:	b29b      	uxth	r3, r3
 802d12e:	3301      	adds	r3, #1
 802d130:	b29b      	uxth	r3, r3
 802d132:	b21a      	sxth	r2, r3
 802d134:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 802d136:	861a      	strh	r2, [r3, #48]	; 0x30
        }

        if (pcb->rtime >= pcb->rto) {
 802d138:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 802d13a:	f9b3 2030 	ldrsh.w	r2, [r3, #48]	; 0x30
 802d13e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 802d140:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 802d144:	429a      	cmp	r2, r3
 802d146:	db7b      	blt.n	802d240 <tcp_slowtmr+0x2f8>
                                      " pcb->rto %"S16_F"\n",
                                      pcb->rtime, pcb->rto));
          /* If prepare phase fails but we have unsent data but no unacked data,
             still execute the backoff calculations below, as this means we somehow
             failed to send segment. */
          if ((tcp_rexmit_rto_prepare(pcb) == ERR_OK) || ((pcb->unacked == NULL) && (pcb->unsent != NULL))) {
 802d148:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 802d14a:	f004 fe1f 	bl	8031d8c <tcp_rexmit_rto_prepare>
 802d14e:	4603      	mov	r3, r0
 802d150:	2b00      	cmp	r3, #0
 802d152:	d007      	beq.n	802d164 <tcp_slowtmr+0x21c>
 802d154:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 802d156:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 802d158:	2b00      	cmp	r3, #0
 802d15a:	d171      	bne.n	802d240 <tcp_slowtmr+0x2f8>
 802d15c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 802d15e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 802d160:	2b00      	cmp	r3, #0
 802d162:	d06d      	beq.n	802d240 <tcp_slowtmr+0x2f8>
            /* Double retransmission time-out unless we are trying to
             * connect to somebody (i.e., we are in SYN_SENT). */
            if (pcb->state != SYN_SENT) {
 802d164:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 802d166:	7d1b      	ldrb	r3, [r3, #20]
 802d168:	2b02      	cmp	r3, #2
 802d16a:	d03a      	beq.n	802d1e2 <tcp_slowtmr+0x29a>
              u8_t backoff_idx = LWIP_MIN(pcb->nrtx, sizeof(tcp_backoff) - 1);
 802d16c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 802d16e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 802d172:	2b0c      	cmp	r3, #12
 802d174:	bf28      	it	cs
 802d176:	230c      	movcs	r3, #12
 802d178:	76fb      	strb	r3, [r7, #27]
              int calc_rto = ((pcb->sa >> 3) + pcb->sv) << tcp_backoff[backoff_idx];
 802d17a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 802d17c:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 802d180:	10db      	asrs	r3, r3, #3
 802d182:	b21b      	sxth	r3, r3
 802d184:	461a      	mov	r2, r3
 802d186:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 802d188:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 802d18c:	4413      	add	r3, r2
 802d18e:	7efa      	ldrb	r2, [r7, #27]
 802d190:	4910      	ldr	r1, [pc, #64]	; (802d1d4 <tcp_slowtmr+0x28c>)
 802d192:	5c8a      	ldrb	r2, [r1, r2]
 802d194:	4093      	lsls	r3, r2
 802d196:	617b      	str	r3, [r7, #20]
              pcb->rto = (s16_t)LWIP_MIN(calc_rto, 0x7FFF);
 802d198:	697b      	ldr	r3, [r7, #20]
 802d19a:	f647 72fe 	movw	r2, #32766	; 0x7ffe
 802d19e:	4293      	cmp	r3, r2
 802d1a0:	dc1a      	bgt.n	802d1d8 <tcp_slowtmr+0x290>
 802d1a2:	697b      	ldr	r3, [r7, #20]
 802d1a4:	b21a      	sxth	r2, r3
 802d1a6:	e019      	b.n	802d1dc <tcp_slowtmr+0x294>
 802d1a8:	2000ee0c 	.word	0x2000ee0c
 802d1ac:	2000ee22 	.word	0x2000ee22
 802d1b0:	2000ee18 	.word	0x2000ee18
 802d1b4:	08038b40 	.word	0x08038b40
 802d1b8:	08038e84 	.word	0x08038e84
 802d1bc:	08038b84 	.word	0x08038b84
 802d1c0:	08038eb0 	.word	0x08038eb0
 802d1c4:	08038edc 	.word	0x08038edc
 802d1c8:	08038f0c 	.word	0x08038f0c
 802d1cc:	08038f40 	.word	0x08038f40
 802d1d0:	0803ab94 	.word	0x0803ab94
 802d1d4:	0803ab84 	.word	0x0803ab84
 802d1d8:	f647 72ff 	movw	r2, #32767	; 0x7fff
 802d1dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 802d1de:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
            }

            /* Reset the retransmission timer. */
            pcb->rtime = 0;
 802d1e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 802d1e4:	2200      	movs	r2, #0
 802d1e6:	861a      	strh	r2, [r3, #48]	; 0x30

            /* Reduce congestion window and ssthresh. */
            eff_wnd = LWIP_MIN(pcb->cwnd, pcb->snd_wnd);
 802d1e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 802d1ea:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 802d1ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 802d1f0:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 802d1f4:	4293      	cmp	r3, r2
 802d1f6:	bf28      	it	cs
 802d1f8:	4613      	movcs	r3, r2
 802d1fa:	827b      	strh	r3, [r7, #18]
            pcb->ssthresh = eff_wnd >> 1;
 802d1fc:	8a7b      	ldrh	r3, [r7, #18]
 802d1fe:	085b      	lsrs	r3, r3, #1
 802d200:	b29a      	uxth	r2, r3
 802d202:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 802d204:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
            if (pcb->ssthresh < (tcpwnd_size_t)(pcb->mss << 1)) {
 802d208:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 802d20a:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 802d20e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 802d210:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 802d212:	005b      	lsls	r3, r3, #1
 802d214:	b29b      	uxth	r3, r3
 802d216:	429a      	cmp	r2, r3
 802d218:	d206      	bcs.n	802d228 <tcp_slowtmr+0x2e0>
              pcb->ssthresh = (tcpwnd_size_t)(pcb->mss << 1);
 802d21a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 802d21c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 802d21e:	005b      	lsls	r3, r3, #1
 802d220:	b29a      	uxth	r2, r3
 802d222:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 802d224:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
            }
            pcb->cwnd = pcb->mss;
 802d228:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 802d22a:	8e5a      	ldrh	r2, [r3, #50]	; 0x32
 802d22c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 802d22e:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
            LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: cwnd %"TCPWNDSIZE_F
                                         " ssthresh %"TCPWNDSIZE_F"\n",
                                         pcb->cwnd, pcb->ssthresh));
            pcb->bytes_acked = 0;
 802d232:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 802d234:	2200      	movs	r2, #0
 802d236:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

            /* The following needs to be called AFTER cwnd is set to one
               mss - STJ */
            tcp_rexmit_rto_commit(pcb);
 802d23a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 802d23c:	f004 fe16 	bl	8031e6c <tcp_rexmit_rto_commit>
          }
        }
      }
    }
    /* Check if this PCB has stayed too long in FIN-WAIT-2 */
    if (pcb->state == FIN_WAIT_2) {
 802d240:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 802d242:	7d1b      	ldrb	r3, [r3, #20]
 802d244:	2b06      	cmp	r3, #6
 802d246:	d111      	bne.n	802d26c <tcp_slowtmr+0x324>
      /* If this PCB is in FIN_WAIT_2 because of SHUT_WR don't let it time out. */
      if (pcb->flags & TF_RXCLOSED) {
 802d248:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 802d24a:	8b5b      	ldrh	r3, [r3, #26]
 802d24c:	f003 0310 	and.w	r3, r3, #16
 802d250:	2b00      	cmp	r3, #0
 802d252:	d00b      	beq.n	802d26c <tcp_slowtmr+0x324>
        /* PCB was fully closed (either through close() or SHUT_RDWR):
           normal FIN-WAIT timeout handling. */
        if ((u32_t)(tcp_ticks - pcb->tmr) >
 802d254:	4b9d      	ldr	r3, [pc, #628]	; (802d4cc <tcp_slowtmr+0x584>)
 802d256:	681a      	ldr	r2, [r3, #0]
 802d258:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 802d25a:	6a1b      	ldr	r3, [r3, #32]
 802d25c:	1ad3      	subs	r3, r2, r3
 802d25e:	2b28      	cmp	r3, #40	; 0x28
 802d260:	d904      	bls.n	802d26c <tcp_slowtmr+0x324>
            TCP_FIN_WAIT_TIMEOUT / TCP_SLOW_INTERVAL) {
          ++pcb_remove;
 802d262:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 802d266:	3301      	adds	r3, #1
 802d268:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        }
      }
    }

    /* Check if KEEPALIVE should be sent */
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 802d26c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 802d26e:	7a5b      	ldrb	r3, [r3, #9]
 802d270:	f003 0308 	and.w	r3, r3, #8
 802d274:	2b00      	cmp	r3, #0
 802d276:	d04c      	beq.n	802d312 <tcp_slowtmr+0x3ca>
        ((pcb->state == ESTABLISHED) ||
 802d278:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 802d27a:	7d1b      	ldrb	r3, [r3, #20]
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 802d27c:	2b04      	cmp	r3, #4
 802d27e:	d003      	beq.n	802d288 <tcp_slowtmr+0x340>
         (pcb->state == CLOSE_WAIT))) {
 802d280:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 802d282:	7d1b      	ldrb	r3, [r3, #20]
        ((pcb->state == ESTABLISHED) ||
 802d284:	2b07      	cmp	r3, #7
 802d286:	d144      	bne.n	802d312 <tcp_slowtmr+0x3ca>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 802d288:	4b90      	ldr	r3, [pc, #576]	; (802d4cc <tcp_slowtmr+0x584>)
 802d28a:	681a      	ldr	r2, [r3, #0]
 802d28c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 802d28e:	6a1b      	ldr	r3, [r3, #32]
 802d290:	1ad2      	subs	r2, r2, r3
          (pcb->keep_idle + TCP_KEEP_DUR(pcb)) / TCP_SLOW_INTERVAL) {
 802d292:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 802d294:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 802d298:	f503 2324 	add.w	r3, r3, #671744	; 0xa4000
 802d29c:	f603 43b8 	addw	r3, r3, #3256	; 0xcb8
 802d2a0:	498b      	ldr	r1, [pc, #556]	; (802d4d0 <tcp_slowtmr+0x588>)
 802d2a2:	fba1 1303 	umull	r1, r3, r1, r3
 802d2a6:	095b      	lsrs	r3, r3, #5
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 802d2a8:	429a      	cmp	r2, r3
 802d2aa:	d90a      	bls.n	802d2c2 <tcp_slowtmr+0x37a>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: KEEPALIVE timeout. Aborting connection to "));
        ip_addr_debug_print_val(TCP_DEBUG, pcb->remote_ip);
        LWIP_DEBUGF(TCP_DEBUG, ("\n"));

        ++pcb_remove;
 802d2ac:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 802d2b0:	3301      	adds	r3, #1
 802d2b2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        ++pcb_reset;
 802d2b6:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 802d2ba:	3301      	adds	r3, #1
 802d2bc:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 802d2c0:	e027      	b.n	802d312 <tcp_slowtmr+0x3ca>
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 802d2c2:	4b82      	ldr	r3, [pc, #520]	; (802d4cc <tcp_slowtmr+0x584>)
 802d2c4:	681a      	ldr	r2, [r3, #0]
 802d2c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 802d2c8:	6a1b      	ldr	r3, [r3, #32]
 802d2ca:	1ad2      	subs	r2, r2, r3
                 (pcb->keep_idle + pcb->keep_cnt_sent * TCP_KEEP_INTVL(pcb))
 802d2cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 802d2ce:	f8d3 1094 	ldr.w	r1, [r3, #148]	; 0x94
 802d2d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 802d2d4:	f893 309b 	ldrb.w	r3, [r3, #155]	; 0x9b
 802d2d8:	4618      	mov	r0, r3
 802d2da:	4b7e      	ldr	r3, [pc, #504]	; (802d4d4 <tcp_slowtmr+0x58c>)
 802d2dc:	fb00 f303 	mul.w	r3, r0, r3
 802d2e0:	440b      	add	r3, r1
                 / TCP_SLOW_INTERVAL) {
 802d2e2:	497b      	ldr	r1, [pc, #492]	; (802d4d0 <tcp_slowtmr+0x588>)
 802d2e4:	fba1 1303 	umull	r1, r3, r1, r3
 802d2e8:	095b      	lsrs	r3, r3, #5
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 802d2ea:	429a      	cmp	r2, r3
 802d2ec:	d911      	bls.n	802d312 <tcp_slowtmr+0x3ca>
        err = tcp_keepalive(pcb);
 802d2ee:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 802d2f0:	f005 f8cc 	bl	803248c <tcp_keepalive>
 802d2f4:	4603      	mov	r3, r0
 802d2f6:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        if (err == ERR_OK) {
 802d2fa:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 802d2fe:	2b00      	cmp	r3, #0
 802d300:	d107      	bne.n	802d312 <tcp_slowtmr+0x3ca>
          pcb->keep_cnt_sent++;
 802d302:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 802d304:	f893 309b 	ldrb.w	r3, [r3, #155]	; 0x9b
 802d308:	3301      	adds	r3, #1
 802d30a:	b2da      	uxtb	r2, r3
 802d30c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 802d30e:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b

    /* If this PCB has queued out of sequence data, but has been
       inactive for too long, will drop the data (it will eventually
       be retransmitted). */
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL &&
 802d312:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 802d314:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 802d316:	2b00      	cmp	r3, #0
 802d318:	d011      	beq.n	802d33e <tcp_slowtmr+0x3f6>
        (tcp_ticks - pcb->tmr >= (u32_t)pcb->rto * TCP_OOSEQ_TIMEOUT)) {
 802d31a:	4b6c      	ldr	r3, [pc, #432]	; (802d4cc <tcp_slowtmr+0x584>)
 802d31c:	681a      	ldr	r2, [r3, #0]
 802d31e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 802d320:	6a1b      	ldr	r3, [r3, #32]
 802d322:	1ad2      	subs	r2, r2, r3
 802d324:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 802d326:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 802d32a:	4619      	mov	r1, r3
 802d32c:	460b      	mov	r3, r1
 802d32e:	005b      	lsls	r3, r3, #1
 802d330:	440b      	add	r3, r1
 802d332:	005b      	lsls	r3, r3, #1
    if (pcb->ooseq != NULL &&
 802d334:	429a      	cmp	r2, r3
 802d336:	d302      	bcc.n	802d33e <tcp_slowtmr+0x3f6>
      LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: dropping OOSEQ queued data\n"));
      tcp_free_ooseq(pcb);
 802d338:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 802d33a:	f000 fed3 	bl	802e0e4 <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Check if this PCB has stayed too long in SYN-RCVD */
    if (pcb->state == SYN_RCVD) {
 802d33e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 802d340:	7d1b      	ldrb	r3, [r3, #20]
 802d342:	2b03      	cmp	r3, #3
 802d344:	d10b      	bne.n	802d35e <tcp_slowtmr+0x416>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 802d346:	4b61      	ldr	r3, [pc, #388]	; (802d4cc <tcp_slowtmr+0x584>)
 802d348:	681a      	ldr	r2, [r3, #0]
 802d34a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 802d34c:	6a1b      	ldr	r3, [r3, #32]
 802d34e:	1ad3      	subs	r3, r2, r3
 802d350:	2b28      	cmp	r3, #40	; 0x28
 802d352:	d904      	bls.n	802d35e <tcp_slowtmr+0x416>
          TCP_SYN_RCVD_TIMEOUT / TCP_SLOW_INTERVAL) {
        ++pcb_remove;
 802d354:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 802d358:	3301      	adds	r3, #1
 802d35a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in SYN-RCVD\n"));
      }
    }

    /* Check if this PCB has stayed too long in LAST-ACK */
    if (pcb->state == LAST_ACK) {
 802d35e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 802d360:	7d1b      	ldrb	r3, [r3, #20]
 802d362:	2b09      	cmp	r3, #9
 802d364:	d10b      	bne.n	802d37e <tcp_slowtmr+0x436>
      if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 802d366:	4b59      	ldr	r3, [pc, #356]	; (802d4cc <tcp_slowtmr+0x584>)
 802d368:	681a      	ldr	r2, [r3, #0]
 802d36a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 802d36c:	6a1b      	ldr	r3, [r3, #32]
 802d36e:	1ad3      	subs	r3, r2, r3
 802d370:	2bf0      	cmp	r3, #240	; 0xf0
 802d372:	d904      	bls.n	802d37e <tcp_slowtmr+0x436>
        ++pcb_remove;
 802d374:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 802d378:	3301      	adds	r3, #1
 802d37a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in LAST-ACK\n"));
      }
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 802d37e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 802d382:	2b00      	cmp	r3, #0
 802d384:	d060      	beq.n	802d448 <tcp_slowtmr+0x500>
      struct tcp_pcb *pcb2;
#if LWIP_CALLBACK_API
      tcp_err_fn err_fn = pcb->errf;
 802d386:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 802d388:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 802d38c:	60fb      	str	r3, [r7, #12]
#endif /* LWIP_CALLBACK_API */
      void *err_arg;
      enum tcp_state last_state;
      tcp_pcb_purge(pcb);
 802d38e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 802d390:	f000 fcf4 	bl	802dd7c <tcp_pcb_purge>
      /* Remove PCB from tcp_active_pcbs list. */
      if (prev != NULL) {
 802d394:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802d396:	2b00      	cmp	r3, #0
 802d398:	d010      	beq.n	802d3bc <tcp_slowtmr+0x474>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_active_pcbs", pcb != tcp_active_pcbs);
 802d39a:	4b4f      	ldr	r3, [pc, #316]	; (802d4d8 <tcp_slowtmr+0x590>)
 802d39c:	681b      	ldr	r3, [r3, #0]
 802d39e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 802d3a0:	429a      	cmp	r2, r3
 802d3a2:	d106      	bne.n	802d3b2 <tcp_slowtmr+0x46a>
 802d3a4:	4b4d      	ldr	r3, [pc, #308]	; (802d4dc <tcp_slowtmr+0x594>)
 802d3a6:	f240 526d 	movw	r2, #1389	; 0x56d
 802d3aa:	494d      	ldr	r1, [pc, #308]	; (802d4e0 <tcp_slowtmr+0x598>)
 802d3ac:	484d      	ldr	r0, [pc, #308]	; (802d4e4 <tcp_slowtmr+0x59c>)
 802d3ae:	f008 fef3 	bl	8036198 <iprintf>
        prev->next = pcb->next;
 802d3b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 802d3b4:	68da      	ldr	r2, [r3, #12]
 802d3b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802d3b8:	60da      	str	r2, [r3, #12]
 802d3ba:	e00f      	b.n	802d3dc <tcp_slowtmr+0x494>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_active_pcbs", tcp_active_pcbs == pcb);
 802d3bc:	4b46      	ldr	r3, [pc, #280]	; (802d4d8 <tcp_slowtmr+0x590>)
 802d3be:	681b      	ldr	r3, [r3, #0]
 802d3c0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 802d3c2:	429a      	cmp	r2, r3
 802d3c4:	d006      	beq.n	802d3d4 <tcp_slowtmr+0x48c>
 802d3c6:	4b45      	ldr	r3, [pc, #276]	; (802d4dc <tcp_slowtmr+0x594>)
 802d3c8:	f240 5271 	movw	r2, #1393	; 0x571
 802d3cc:	4946      	ldr	r1, [pc, #280]	; (802d4e8 <tcp_slowtmr+0x5a0>)
 802d3ce:	4845      	ldr	r0, [pc, #276]	; (802d4e4 <tcp_slowtmr+0x59c>)
 802d3d0:	f008 fee2 	bl	8036198 <iprintf>
        tcp_active_pcbs = pcb->next;
 802d3d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 802d3d6:	68db      	ldr	r3, [r3, #12]
 802d3d8:	4a3f      	ldr	r2, [pc, #252]	; (802d4d8 <tcp_slowtmr+0x590>)
 802d3da:	6013      	str	r3, [r2, #0]
      }

      if (pcb_reset) {
 802d3dc:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 802d3e0:	2b00      	cmp	r3, #0
 802d3e2:	d013      	beq.n	802d40c <tcp_slowtmr+0x4c4>
        tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 802d3e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 802d3e6:	6d18      	ldr	r0, [r3, #80]	; 0x50
 802d3e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 802d3ea:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 802d3ec:	6afd      	ldr	r5, [r7, #44]	; 0x2c
 802d3ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 802d3f0:	3304      	adds	r3, #4
 802d3f2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 802d3f4:	8ad2      	ldrh	r2, [r2, #22]
 802d3f6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 802d3f8:	8b09      	ldrh	r1, [r1, #24]
 802d3fa:	9102      	str	r1, [sp, #8]
 802d3fc:	9201      	str	r2, [sp, #4]
 802d3fe:	9300      	str	r3, [sp, #0]
 802d400:	462b      	mov	r3, r5
 802d402:	4622      	mov	r2, r4
 802d404:	4601      	mov	r1, r0
 802d406:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 802d408:	f004 ff8c 	bl	8032324 <tcp_rst>
                pcb->local_port, pcb->remote_port);
      }

      err_arg = pcb->callback_arg;
 802d40c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 802d40e:	691b      	ldr	r3, [r3, #16]
 802d410:	60bb      	str	r3, [r7, #8]
      last_state = pcb->state;
 802d412:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 802d414:	7d1b      	ldrb	r3, [r3, #20]
 802d416:	71fb      	strb	r3, [r7, #7]
      pcb2 = pcb;
 802d418:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 802d41a:	603b      	str	r3, [r7, #0]
      pcb = pcb->next;
 802d41c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 802d41e:	68db      	ldr	r3, [r3, #12]
 802d420:	62fb      	str	r3, [r7, #44]	; 0x2c
      tcp_free(pcb2);
 802d422:	6838      	ldr	r0, [r7, #0]
 802d424:	f7fe ffee 	bl	802c404 <tcp_free>

      tcp_active_pcbs_changed = 0;
 802d428:	4b30      	ldr	r3, [pc, #192]	; (802d4ec <tcp_slowtmr+0x5a4>)
 802d42a:	2200      	movs	r2, #0
 802d42c:	701a      	strb	r2, [r3, #0]
      TCP_EVENT_ERR(last_state, err_fn, err_arg, ERR_ABRT);
 802d42e:	68fb      	ldr	r3, [r7, #12]
 802d430:	2b00      	cmp	r3, #0
 802d432:	d004      	beq.n	802d43e <tcp_slowtmr+0x4f6>
 802d434:	68fb      	ldr	r3, [r7, #12]
 802d436:	f06f 010c 	mvn.w	r1, #12
 802d43a:	68b8      	ldr	r0, [r7, #8]
 802d43c:	4798      	blx	r3
      if (tcp_active_pcbs_changed) {
 802d43e:	4b2b      	ldr	r3, [pc, #172]	; (802d4ec <tcp_slowtmr+0x5a4>)
 802d440:	781b      	ldrb	r3, [r3, #0]
 802d442:	2b00      	cmp	r3, #0
 802d444:	d037      	beq.n	802d4b6 <tcp_slowtmr+0x56e>
        goto tcp_slowtmr_start;
 802d446:	e590      	b.n	802cf6a <tcp_slowtmr+0x22>
      }
    } else {
      /* get the 'next' element now and work with 'prev' below (in case of abort) */
      prev = pcb;
 802d448:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 802d44a:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 802d44c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 802d44e:	68db      	ldr	r3, [r3, #12]
 802d450:	62fb      	str	r3, [r7, #44]	; 0x2c

      /* We check if we should poll the connection. */
      ++prev->polltmr;
 802d452:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802d454:	7f1b      	ldrb	r3, [r3, #28]
 802d456:	3301      	adds	r3, #1
 802d458:	b2da      	uxtb	r2, r3
 802d45a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802d45c:	771a      	strb	r2, [r3, #28]
      if (prev->polltmr >= prev->pollinterval) {
 802d45e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802d460:	7f1a      	ldrb	r2, [r3, #28]
 802d462:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802d464:	7f5b      	ldrb	r3, [r3, #29]
 802d466:	429a      	cmp	r2, r3
 802d468:	d325      	bcc.n	802d4b6 <tcp_slowtmr+0x56e>
        prev->polltmr = 0;
 802d46a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802d46c:	2200      	movs	r2, #0
 802d46e:	771a      	strb	r2, [r3, #28]
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: polling application\n"));
        tcp_active_pcbs_changed = 0;
 802d470:	4b1e      	ldr	r3, [pc, #120]	; (802d4ec <tcp_slowtmr+0x5a4>)
 802d472:	2200      	movs	r2, #0
 802d474:	701a      	strb	r2, [r3, #0]
        TCP_EVENT_POLL(prev, err);
 802d476:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802d478:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 802d47c:	2b00      	cmp	r3, #0
 802d47e:	d00b      	beq.n	802d498 <tcp_slowtmr+0x550>
 802d480:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802d482:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 802d486:	6aba      	ldr	r2, [r7, #40]	; 0x28
 802d488:	6912      	ldr	r2, [r2, #16]
 802d48a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 802d48c:	4610      	mov	r0, r2
 802d48e:	4798      	blx	r3
 802d490:	4603      	mov	r3, r0
 802d492:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 802d496:	e002      	b.n	802d49e <tcp_slowtmr+0x556>
 802d498:	2300      	movs	r3, #0
 802d49a:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        if (tcp_active_pcbs_changed) {
 802d49e:	4b13      	ldr	r3, [pc, #76]	; (802d4ec <tcp_slowtmr+0x5a4>)
 802d4a0:	781b      	ldrb	r3, [r3, #0]
 802d4a2:	2b00      	cmp	r3, #0
 802d4a4:	d000      	beq.n	802d4a8 <tcp_slowtmr+0x560>
          goto tcp_slowtmr_start;
 802d4a6:	e560      	b.n	802cf6a <tcp_slowtmr+0x22>
        }
        /* if err == ERR_ABRT, 'prev' is already deallocated */
        if (err == ERR_OK) {
 802d4a8:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 802d4ac:	2b00      	cmp	r3, #0
 802d4ae:	d102      	bne.n	802d4b6 <tcp_slowtmr+0x56e>
          tcp_output(prev);
 802d4b0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 802d4b2:	f004 f96f 	bl	8031794 <tcp_output>
  while (pcb != NULL) {
 802d4b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 802d4b8:	2b00      	cmp	r3, #0
 802d4ba:	f47f ad5c 	bne.w	802cf76 <tcp_slowtmr+0x2e>
    }
  }


  /* Steps through all of the TIME-WAIT PCBs. */
  prev = NULL;
 802d4be:	2300      	movs	r3, #0
 802d4c0:	62bb      	str	r3, [r7, #40]	; 0x28
  pcb = tcp_tw_pcbs;
 802d4c2:	4b0b      	ldr	r3, [pc, #44]	; (802d4f0 <tcp_slowtmr+0x5a8>)
 802d4c4:	681b      	ldr	r3, [r3, #0]
 802d4c6:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (pcb != NULL) {
 802d4c8:	e067      	b.n	802d59a <tcp_slowtmr+0x652>
 802d4ca:	bf00      	nop
 802d4cc:	2000ee0c 	.word	0x2000ee0c
 802d4d0:	10624dd3 	.word	0x10624dd3
 802d4d4:	000124f8 	.word	0x000124f8
 802d4d8:	2000ee18 	.word	0x2000ee18
 802d4dc:	08038b40 	.word	0x08038b40
 802d4e0:	08038f78 	.word	0x08038f78
 802d4e4:	08038b84 	.word	0x08038b84
 802d4e8:	08038fa4 	.word	0x08038fa4
 802d4ec:	2000ee20 	.word	0x2000ee20
 802d4f0:	2000ee1c 	.word	0x2000ee1c
    LWIP_ASSERT("tcp_slowtmr: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 802d4f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 802d4f6:	7d1b      	ldrb	r3, [r3, #20]
 802d4f8:	2b0a      	cmp	r3, #10
 802d4fa:	d006      	beq.n	802d50a <tcp_slowtmr+0x5c2>
 802d4fc:	4b2b      	ldr	r3, [pc, #172]	; (802d5ac <tcp_slowtmr+0x664>)
 802d4fe:	f240 52a1 	movw	r2, #1441	; 0x5a1
 802d502:	492b      	ldr	r1, [pc, #172]	; (802d5b0 <tcp_slowtmr+0x668>)
 802d504:	482b      	ldr	r0, [pc, #172]	; (802d5b4 <tcp_slowtmr+0x66c>)
 802d506:	f008 fe47 	bl	8036198 <iprintf>
    pcb_remove = 0;
 802d50a:	2300      	movs	r3, #0
 802d50c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

    /* Check if this PCB has stayed long enough in TIME-WAIT */
    if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 802d510:	4b29      	ldr	r3, [pc, #164]	; (802d5b8 <tcp_slowtmr+0x670>)
 802d512:	681a      	ldr	r2, [r3, #0]
 802d514:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 802d516:	6a1b      	ldr	r3, [r3, #32]
 802d518:	1ad3      	subs	r3, r2, r3
 802d51a:	2bf0      	cmp	r3, #240	; 0xf0
 802d51c:	d904      	bls.n	802d528 <tcp_slowtmr+0x5e0>
      ++pcb_remove;
 802d51e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 802d522:	3301      	adds	r3, #1
 802d524:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 802d528:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 802d52c:	2b00      	cmp	r3, #0
 802d52e:	d02f      	beq.n	802d590 <tcp_slowtmr+0x648>
      struct tcp_pcb *pcb2;
      tcp_pcb_purge(pcb);
 802d530:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 802d532:	f000 fc23 	bl	802dd7c <tcp_pcb_purge>
      /* Remove PCB from tcp_tw_pcbs list. */
      if (prev != NULL) {
 802d536:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802d538:	2b00      	cmp	r3, #0
 802d53a:	d010      	beq.n	802d55e <tcp_slowtmr+0x616>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_tw_pcbs", pcb != tcp_tw_pcbs);
 802d53c:	4b1f      	ldr	r3, [pc, #124]	; (802d5bc <tcp_slowtmr+0x674>)
 802d53e:	681b      	ldr	r3, [r3, #0]
 802d540:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 802d542:	429a      	cmp	r2, r3
 802d544:	d106      	bne.n	802d554 <tcp_slowtmr+0x60c>
 802d546:	4b19      	ldr	r3, [pc, #100]	; (802d5ac <tcp_slowtmr+0x664>)
 802d548:	f240 52af 	movw	r2, #1455	; 0x5af
 802d54c:	491c      	ldr	r1, [pc, #112]	; (802d5c0 <tcp_slowtmr+0x678>)
 802d54e:	4819      	ldr	r0, [pc, #100]	; (802d5b4 <tcp_slowtmr+0x66c>)
 802d550:	f008 fe22 	bl	8036198 <iprintf>
        prev->next = pcb->next;
 802d554:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 802d556:	68da      	ldr	r2, [r3, #12]
 802d558:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802d55a:	60da      	str	r2, [r3, #12]
 802d55c:	e00f      	b.n	802d57e <tcp_slowtmr+0x636>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_tw_pcbs", tcp_tw_pcbs == pcb);
 802d55e:	4b17      	ldr	r3, [pc, #92]	; (802d5bc <tcp_slowtmr+0x674>)
 802d560:	681b      	ldr	r3, [r3, #0]
 802d562:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 802d564:	429a      	cmp	r2, r3
 802d566:	d006      	beq.n	802d576 <tcp_slowtmr+0x62e>
 802d568:	4b10      	ldr	r3, [pc, #64]	; (802d5ac <tcp_slowtmr+0x664>)
 802d56a:	f240 52b3 	movw	r2, #1459	; 0x5b3
 802d56e:	4915      	ldr	r1, [pc, #84]	; (802d5c4 <tcp_slowtmr+0x67c>)
 802d570:	4810      	ldr	r0, [pc, #64]	; (802d5b4 <tcp_slowtmr+0x66c>)
 802d572:	f008 fe11 	bl	8036198 <iprintf>
        tcp_tw_pcbs = pcb->next;
 802d576:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 802d578:	68db      	ldr	r3, [r3, #12]
 802d57a:	4a10      	ldr	r2, [pc, #64]	; (802d5bc <tcp_slowtmr+0x674>)
 802d57c:	6013      	str	r3, [r2, #0]
      }
      pcb2 = pcb;
 802d57e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 802d580:	61fb      	str	r3, [r7, #28]
      pcb = pcb->next;
 802d582:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 802d584:	68db      	ldr	r3, [r3, #12]
 802d586:	62fb      	str	r3, [r7, #44]	; 0x2c
      tcp_free(pcb2);
 802d588:	69f8      	ldr	r0, [r7, #28]
 802d58a:	f7fe ff3b 	bl	802c404 <tcp_free>
 802d58e:	e004      	b.n	802d59a <tcp_slowtmr+0x652>
    } else {
      prev = pcb;
 802d590:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 802d592:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 802d594:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 802d596:	68db      	ldr	r3, [r3, #12]
 802d598:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (pcb != NULL) {
 802d59a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 802d59c:	2b00      	cmp	r3, #0
 802d59e:	d1a9      	bne.n	802d4f4 <tcp_slowtmr+0x5ac>
    }
  }
}
 802d5a0:	bf00      	nop
 802d5a2:	bf00      	nop
 802d5a4:	3730      	adds	r7, #48	; 0x30
 802d5a6:	46bd      	mov	sp, r7
 802d5a8:	bdb0      	pop	{r4, r5, r7, pc}
 802d5aa:	bf00      	nop
 802d5ac:	08038b40 	.word	0x08038b40
 802d5b0:	08038fd0 	.word	0x08038fd0
 802d5b4:	08038b84 	.word	0x08038b84
 802d5b8:	2000ee0c 	.word	0x2000ee0c
 802d5bc:	2000ee1c 	.word	0x2000ee1c
 802d5c0:	08039000 	.word	0x08039000
 802d5c4:	08039028 	.word	0x08039028

0802d5c8 <tcp_fasttmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_fasttmr(void)
{
 802d5c8:	b580      	push	{r7, lr}
 802d5ca:	b082      	sub	sp, #8
 802d5cc:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;

  ++tcp_timer_ctr;
 802d5ce:	4b2d      	ldr	r3, [pc, #180]	; (802d684 <tcp_fasttmr+0xbc>)
 802d5d0:	781b      	ldrb	r3, [r3, #0]
 802d5d2:	3301      	adds	r3, #1
 802d5d4:	b2da      	uxtb	r2, r3
 802d5d6:	4b2b      	ldr	r3, [pc, #172]	; (802d684 <tcp_fasttmr+0xbc>)
 802d5d8:	701a      	strb	r2, [r3, #0]

tcp_fasttmr_start:
  pcb = tcp_active_pcbs;
 802d5da:	4b2b      	ldr	r3, [pc, #172]	; (802d688 <tcp_fasttmr+0xc0>)
 802d5dc:	681b      	ldr	r3, [r3, #0]
 802d5de:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 802d5e0:	e048      	b.n	802d674 <tcp_fasttmr+0xac>
    if (pcb->last_timer != tcp_timer_ctr) {
 802d5e2:	687b      	ldr	r3, [r7, #4]
 802d5e4:	7f9a      	ldrb	r2, [r3, #30]
 802d5e6:	4b27      	ldr	r3, [pc, #156]	; (802d684 <tcp_fasttmr+0xbc>)
 802d5e8:	781b      	ldrb	r3, [r3, #0]
 802d5ea:	429a      	cmp	r2, r3
 802d5ec:	d03f      	beq.n	802d66e <tcp_fasttmr+0xa6>
      struct tcp_pcb *next;
      pcb->last_timer = tcp_timer_ctr;
 802d5ee:	4b25      	ldr	r3, [pc, #148]	; (802d684 <tcp_fasttmr+0xbc>)
 802d5f0:	781a      	ldrb	r2, [r3, #0]
 802d5f2:	687b      	ldr	r3, [r7, #4]
 802d5f4:	779a      	strb	r2, [r3, #30]
      /* send delayed ACKs */
      if (pcb->flags & TF_ACK_DELAY) {
 802d5f6:	687b      	ldr	r3, [r7, #4]
 802d5f8:	8b5b      	ldrh	r3, [r3, #26]
 802d5fa:	f003 0301 	and.w	r3, r3, #1
 802d5fe:	2b00      	cmp	r3, #0
 802d600:	d010      	beq.n	802d624 <tcp_fasttmr+0x5c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: delayed ACK\n"));
        tcp_ack_now(pcb);
 802d602:	687b      	ldr	r3, [r7, #4]
 802d604:	8b5b      	ldrh	r3, [r3, #26]
 802d606:	f043 0302 	orr.w	r3, r3, #2
 802d60a:	b29a      	uxth	r2, r3
 802d60c:	687b      	ldr	r3, [r7, #4]
 802d60e:	835a      	strh	r2, [r3, #26]
        tcp_output(pcb);
 802d610:	6878      	ldr	r0, [r7, #4]
 802d612:	f004 f8bf 	bl	8031794 <tcp_output>
        tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 802d616:	687b      	ldr	r3, [r7, #4]
 802d618:	8b5b      	ldrh	r3, [r3, #26]
 802d61a:	f023 0303 	bic.w	r3, r3, #3
 802d61e:	b29a      	uxth	r2, r3
 802d620:	687b      	ldr	r3, [r7, #4]
 802d622:	835a      	strh	r2, [r3, #26]
      }
      /* send pending FIN */
      if (pcb->flags & TF_CLOSEPEND) {
 802d624:	687b      	ldr	r3, [r7, #4]
 802d626:	8b5b      	ldrh	r3, [r3, #26]
 802d628:	f003 0308 	and.w	r3, r3, #8
 802d62c:	2b00      	cmp	r3, #0
 802d62e:	d009      	beq.n	802d644 <tcp_fasttmr+0x7c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: pending FIN\n"));
        tcp_clear_flags(pcb, TF_CLOSEPEND);
 802d630:	687b      	ldr	r3, [r7, #4]
 802d632:	8b5b      	ldrh	r3, [r3, #26]
 802d634:	f023 0308 	bic.w	r3, r3, #8
 802d638:	b29a      	uxth	r2, r3
 802d63a:	687b      	ldr	r3, [r7, #4]
 802d63c:	835a      	strh	r2, [r3, #26]
        tcp_close_shutdown_fin(pcb);
 802d63e:	6878      	ldr	r0, [r7, #4]
 802d640:	f7ff f874 	bl	802c72c <tcp_close_shutdown_fin>
      }

      next = pcb->next;
 802d644:	687b      	ldr	r3, [r7, #4]
 802d646:	68db      	ldr	r3, [r3, #12]
 802d648:	603b      	str	r3, [r7, #0]

      /* If there is data which was previously "refused" by upper layer */
      if (pcb->refused_data != NULL) {
 802d64a:	687b      	ldr	r3, [r7, #4]
 802d64c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 802d64e:	2b00      	cmp	r3, #0
 802d650:	d00a      	beq.n	802d668 <tcp_fasttmr+0xa0>
        tcp_active_pcbs_changed = 0;
 802d652:	4b0e      	ldr	r3, [pc, #56]	; (802d68c <tcp_fasttmr+0xc4>)
 802d654:	2200      	movs	r2, #0
 802d656:	701a      	strb	r2, [r3, #0]
        tcp_process_refused_data(pcb);
 802d658:	6878      	ldr	r0, [r7, #4]
 802d65a:	f000 f819 	bl	802d690 <tcp_process_refused_data>
        if (tcp_active_pcbs_changed) {
 802d65e:	4b0b      	ldr	r3, [pc, #44]	; (802d68c <tcp_fasttmr+0xc4>)
 802d660:	781b      	ldrb	r3, [r3, #0]
 802d662:	2b00      	cmp	r3, #0
 802d664:	d000      	beq.n	802d668 <tcp_fasttmr+0xa0>
          /* application callback has changed the pcb list: restart the loop */
          goto tcp_fasttmr_start;
 802d666:	e7b8      	b.n	802d5da <tcp_fasttmr+0x12>
        }
      }
      pcb = next;
 802d668:	683b      	ldr	r3, [r7, #0]
 802d66a:	607b      	str	r3, [r7, #4]
 802d66c:	e002      	b.n	802d674 <tcp_fasttmr+0xac>
    } else {
      pcb = pcb->next;
 802d66e:	687b      	ldr	r3, [r7, #4]
 802d670:	68db      	ldr	r3, [r3, #12]
 802d672:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 802d674:	687b      	ldr	r3, [r7, #4]
 802d676:	2b00      	cmp	r3, #0
 802d678:	d1b3      	bne.n	802d5e2 <tcp_fasttmr+0x1a>
    }
  }
}
 802d67a:	bf00      	nop
 802d67c:	bf00      	nop
 802d67e:	3708      	adds	r7, #8
 802d680:	46bd      	mov	sp, r7
 802d682:	bd80      	pop	{r7, pc}
 802d684:	2000ee22 	.word	0x2000ee22
 802d688:	2000ee18 	.word	0x2000ee18
 802d68c:	2000ee20 	.word	0x2000ee20

0802d690 <tcp_process_refused_data>:
}

/** Pass pcb->refused_data to the recv callback */
err_t
tcp_process_refused_data(struct tcp_pcb *pcb)
{
 802d690:	b590      	push	{r4, r7, lr}
 802d692:	b085      	sub	sp, #20
 802d694:	af00      	add	r7, sp, #0
 802d696:	6078      	str	r0, [r7, #4]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  struct pbuf *rest;
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

  LWIP_ERROR("tcp_process_refused_data: invalid pcb", pcb != NULL, return ERR_ARG);
 802d698:	687b      	ldr	r3, [r7, #4]
 802d69a:	2b00      	cmp	r3, #0
 802d69c:	d109      	bne.n	802d6b2 <tcp_process_refused_data+0x22>
 802d69e:	4b37      	ldr	r3, [pc, #220]	; (802d77c <tcp_process_refused_data+0xec>)
 802d6a0:	f240 6209 	movw	r2, #1545	; 0x609
 802d6a4:	4936      	ldr	r1, [pc, #216]	; (802d780 <tcp_process_refused_data+0xf0>)
 802d6a6:	4837      	ldr	r0, [pc, #220]	; (802d784 <tcp_process_refused_data+0xf4>)
 802d6a8:	f008 fd76 	bl	8036198 <iprintf>
 802d6ac:	f06f 030f 	mvn.w	r3, #15
 802d6b0:	e060      	b.n	802d774 <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  while (pcb->refused_data != NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
  {
    err_t err;
    u8_t refused_flags = pcb->refused_data->flags;
 802d6b2:	687b      	ldr	r3, [r7, #4]
 802d6b4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 802d6b6:	7b5b      	ldrb	r3, [r3, #13]
 802d6b8:	73bb      	strb	r3, [r7, #14]
    /* set pcb->refused_data to NULL in case the callback frees it and then
       closes the pcb */
    struct pbuf *refused_data = pcb->refused_data;
 802d6ba:	687b      	ldr	r3, [r7, #4]
 802d6bc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 802d6be:	60bb      	str	r3, [r7, #8]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
    pbuf_split_64k(refused_data, &rest);
    pcb->refused_data = rest;
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    pcb->refused_data = NULL;
 802d6c0:	687b      	ldr	r3, [r7, #4]
 802d6c2:	2200      	movs	r2, #0
 802d6c4:	679a      	str	r2, [r3, #120]	; 0x78
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    /* Notify again application with data previously received. */
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: notify kept packet\n"));
    TCP_EVENT_RECV(pcb, refused_data, ERR_OK, err);
 802d6c6:	687b      	ldr	r3, [r7, #4]
 802d6c8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 802d6cc:	2b00      	cmp	r3, #0
 802d6ce:	d00b      	beq.n	802d6e8 <tcp_process_refused_data+0x58>
 802d6d0:	687b      	ldr	r3, [r7, #4]
 802d6d2:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 802d6d6:	687b      	ldr	r3, [r7, #4]
 802d6d8:	6918      	ldr	r0, [r3, #16]
 802d6da:	2300      	movs	r3, #0
 802d6dc:	68ba      	ldr	r2, [r7, #8]
 802d6de:	6879      	ldr	r1, [r7, #4]
 802d6e0:	47a0      	blx	r4
 802d6e2:	4603      	mov	r3, r0
 802d6e4:	73fb      	strb	r3, [r7, #15]
 802d6e6:	e007      	b.n	802d6f8 <tcp_process_refused_data+0x68>
 802d6e8:	2300      	movs	r3, #0
 802d6ea:	68ba      	ldr	r2, [r7, #8]
 802d6ec:	6879      	ldr	r1, [r7, #4]
 802d6ee:	2000      	movs	r0, #0
 802d6f0:	f000 f8a4 	bl	802d83c <tcp_recv_null>
 802d6f4:	4603      	mov	r3, r0
 802d6f6:	73fb      	strb	r3, [r7, #15]
    if (err == ERR_OK) {
 802d6f8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 802d6fc:	2b00      	cmp	r3, #0
 802d6fe:	d12a      	bne.n	802d756 <tcp_process_refused_data+0xc6>
      /* did refused_data include a FIN? */
      if ((refused_flags & PBUF_FLAG_TCP_FIN)
 802d700:	7bbb      	ldrb	r3, [r7, #14]
 802d702:	f003 0320 	and.w	r3, r3, #32
 802d706:	2b00      	cmp	r3, #0
 802d708:	d033      	beq.n	802d772 <tcp_process_refused_data+0xe2>
          && (rest == NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
         ) {
        /* correct rcv_wnd as the application won't call tcp_recved()
           for the FIN's seqno */
        if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 802d70a:	687b      	ldr	r3, [r7, #4]
 802d70c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 802d70e:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 802d712:	d005      	beq.n	802d720 <tcp_process_refused_data+0x90>
          pcb->rcv_wnd++;
 802d714:	687b      	ldr	r3, [r7, #4]
 802d716:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 802d718:	3301      	adds	r3, #1
 802d71a:	b29a      	uxth	r2, r3
 802d71c:	687b      	ldr	r3, [r7, #4]
 802d71e:	851a      	strh	r2, [r3, #40]	; 0x28
        }
        TCP_EVENT_CLOSED(pcb, err);
 802d720:	687b      	ldr	r3, [r7, #4]
 802d722:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 802d726:	2b00      	cmp	r3, #0
 802d728:	d00b      	beq.n	802d742 <tcp_process_refused_data+0xb2>
 802d72a:	687b      	ldr	r3, [r7, #4]
 802d72c:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 802d730:	687b      	ldr	r3, [r7, #4]
 802d732:	6918      	ldr	r0, [r3, #16]
 802d734:	2300      	movs	r3, #0
 802d736:	2200      	movs	r2, #0
 802d738:	6879      	ldr	r1, [r7, #4]
 802d73a:	47a0      	blx	r4
 802d73c:	4603      	mov	r3, r0
 802d73e:	73fb      	strb	r3, [r7, #15]
 802d740:	e001      	b.n	802d746 <tcp_process_refused_data+0xb6>
 802d742:	2300      	movs	r3, #0
 802d744:	73fb      	strb	r3, [r7, #15]
        if (err == ERR_ABRT) {
 802d746:	f997 300f 	ldrsb.w	r3, [r7, #15]
 802d74a:	f113 0f0d 	cmn.w	r3, #13
 802d74e:	d110      	bne.n	802d772 <tcp_process_refused_data+0xe2>
          return ERR_ABRT;
 802d750:	f06f 030c 	mvn.w	r3, #12
 802d754:	e00e      	b.n	802d774 <tcp_process_refused_data+0xe4>
        }
      }
    } else if (err == ERR_ABRT) {
 802d756:	f997 300f 	ldrsb.w	r3, [r7, #15]
 802d75a:	f113 0f0d 	cmn.w	r3, #13
 802d75e:	d102      	bne.n	802d766 <tcp_process_refused_data+0xd6>
      /* if err == ERR_ABRT, 'pcb' is already deallocated */
      /* Drop incoming packets because pcb is "full" (only if the incoming
         segment contains data). */
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: drop incoming packets, because pcb is \"full\"\n"));
      return ERR_ABRT;
 802d760:	f06f 030c 	mvn.w	r3, #12
 802d764:	e006      	b.n	802d774 <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
      if (rest != NULL) {
        pbuf_cat(refused_data, rest);
      }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
      pcb->refused_data = refused_data;
 802d766:	687b      	ldr	r3, [r7, #4]
 802d768:	68ba      	ldr	r2, [r7, #8]
 802d76a:	679a      	str	r2, [r3, #120]	; 0x78
      return ERR_INPROGRESS;
 802d76c:	f06f 0304 	mvn.w	r3, #4
 802d770:	e000      	b.n	802d774 <tcp_process_refused_data+0xe4>
    }
  }
  return ERR_OK;
 802d772:	2300      	movs	r3, #0
}
 802d774:	4618      	mov	r0, r3
 802d776:	3714      	adds	r7, #20
 802d778:	46bd      	mov	sp, r7
 802d77a:	bd90      	pop	{r4, r7, pc}
 802d77c:	08038b40 	.word	0x08038b40
 802d780:	08039050 	.word	0x08039050
 802d784:	08038b84 	.word	0x08038b84

0802d788 <tcp_segs_free>:
 *
 * @param seg tcp_seg list of TCP segments to free
 */
void
tcp_segs_free(struct tcp_seg *seg)
{
 802d788:	b580      	push	{r7, lr}
 802d78a:	b084      	sub	sp, #16
 802d78c:	af00      	add	r7, sp, #0
 802d78e:	6078      	str	r0, [r7, #4]
  while (seg != NULL) {
 802d790:	e007      	b.n	802d7a2 <tcp_segs_free+0x1a>
    struct tcp_seg *next = seg->next;
 802d792:	687b      	ldr	r3, [r7, #4]
 802d794:	681b      	ldr	r3, [r3, #0]
 802d796:	60fb      	str	r3, [r7, #12]
    tcp_seg_free(seg);
 802d798:	6878      	ldr	r0, [r7, #4]
 802d79a:	f000 f80a 	bl	802d7b2 <tcp_seg_free>
    seg = next;
 802d79e:	68fb      	ldr	r3, [r7, #12]
 802d7a0:	607b      	str	r3, [r7, #4]
  while (seg != NULL) {
 802d7a2:	687b      	ldr	r3, [r7, #4]
 802d7a4:	2b00      	cmp	r3, #0
 802d7a6:	d1f4      	bne.n	802d792 <tcp_segs_free+0xa>
  }
}
 802d7a8:	bf00      	nop
 802d7aa:	bf00      	nop
 802d7ac:	3710      	adds	r7, #16
 802d7ae:	46bd      	mov	sp, r7
 802d7b0:	bd80      	pop	{r7, pc}

0802d7b2 <tcp_seg_free>:
 *
 * @param seg single tcp_seg to free
 */
void
tcp_seg_free(struct tcp_seg *seg)
{
 802d7b2:	b580      	push	{r7, lr}
 802d7b4:	b082      	sub	sp, #8
 802d7b6:	af00      	add	r7, sp, #0
 802d7b8:	6078      	str	r0, [r7, #4]
  if (seg != NULL) {
 802d7ba:	687b      	ldr	r3, [r7, #4]
 802d7bc:	2b00      	cmp	r3, #0
 802d7be:	d00c      	beq.n	802d7da <tcp_seg_free+0x28>
    if (seg->p != NULL) {
 802d7c0:	687b      	ldr	r3, [r7, #4]
 802d7c2:	685b      	ldr	r3, [r3, #4]
 802d7c4:	2b00      	cmp	r3, #0
 802d7c6:	d004      	beq.n	802d7d2 <tcp_seg_free+0x20>
      pbuf_free(seg->p);
 802d7c8:	687b      	ldr	r3, [r7, #4]
 802d7ca:	685b      	ldr	r3, [r3, #4]
 802d7cc:	4618      	mov	r0, r3
 802d7ce:	f7fe fb65 	bl	802be9c <pbuf_free>
#if TCP_DEBUG
      seg->p = NULL;
#endif /* TCP_DEBUG */
    }
    memp_free(MEMP_TCP_SEG, seg);
 802d7d2:	6879      	ldr	r1, [r7, #4]
 802d7d4:	2003      	movs	r0, #3
 802d7d6:	f7fd fcbd 	bl	802b154 <memp_free>
  }
}
 802d7da:	bf00      	nop
 802d7dc:	3708      	adds	r7, #8
 802d7de:	46bd      	mov	sp, r7
 802d7e0:	bd80      	pop	{r7, pc}
	...

0802d7e4 <tcp_seg_copy>:
 * @param seg the old tcp_seg
 * @return a copy of seg
 */
struct tcp_seg *
tcp_seg_copy(struct tcp_seg *seg)
{
 802d7e4:	b580      	push	{r7, lr}
 802d7e6:	b084      	sub	sp, #16
 802d7e8:	af00      	add	r7, sp, #0
 802d7ea:	6078      	str	r0, [r7, #4]
  struct tcp_seg *cseg;

  LWIP_ASSERT("tcp_seg_copy: invalid seg", seg != NULL);
 802d7ec:	687b      	ldr	r3, [r7, #4]
 802d7ee:	2b00      	cmp	r3, #0
 802d7f0:	d106      	bne.n	802d800 <tcp_seg_copy+0x1c>
 802d7f2:	4b0f      	ldr	r3, [pc, #60]	; (802d830 <tcp_seg_copy+0x4c>)
 802d7f4:	f240 6282 	movw	r2, #1666	; 0x682
 802d7f8:	490e      	ldr	r1, [pc, #56]	; (802d834 <tcp_seg_copy+0x50>)
 802d7fa:	480f      	ldr	r0, [pc, #60]	; (802d838 <tcp_seg_copy+0x54>)
 802d7fc:	f008 fccc 	bl	8036198 <iprintf>

  cseg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG);
 802d800:	2003      	movs	r0, #3
 802d802:	f7fd fc2b 	bl	802b05c <memp_malloc>
 802d806:	60f8      	str	r0, [r7, #12]
  if (cseg == NULL) {
 802d808:	68fb      	ldr	r3, [r7, #12]
 802d80a:	2b00      	cmp	r3, #0
 802d80c:	d101      	bne.n	802d812 <tcp_seg_copy+0x2e>
    return NULL;
 802d80e:	2300      	movs	r3, #0
 802d810:	e00a      	b.n	802d828 <tcp_seg_copy+0x44>
  }
  SMEMCPY((u8_t *)cseg, (const u8_t *)seg, sizeof(struct tcp_seg));
 802d812:	2210      	movs	r2, #16
 802d814:	6879      	ldr	r1, [r7, #4]
 802d816:	68f8      	ldr	r0, [r7, #12]
 802d818:	f008 fbae 	bl	8035f78 <memcpy>
  pbuf_ref(cseg->p);
 802d81c:	68fb      	ldr	r3, [r7, #12]
 802d81e:	685b      	ldr	r3, [r3, #4]
 802d820:	4618      	mov	r0, r3
 802d822:	f7fe fbe1 	bl	802bfe8 <pbuf_ref>
  return cseg;
 802d826:	68fb      	ldr	r3, [r7, #12]
}
 802d828:	4618      	mov	r0, r3
 802d82a:	3710      	adds	r7, #16
 802d82c:	46bd      	mov	sp, r7
 802d82e:	bd80      	pop	{r7, pc}
 802d830:	08038b40 	.word	0x08038b40
 802d834:	08039094 	.word	0x08039094
 802d838:	08038b84 	.word	0x08038b84

0802d83c <tcp_recv_null>:
 * Default receive callback that is called if the user didn't register
 * a recv callback for the pcb.
 */
err_t
tcp_recv_null(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
 802d83c:	b580      	push	{r7, lr}
 802d83e:	b084      	sub	sp, #16
 802d840:	af00      	add	r7, sp, #0
 802d842:	60f8      	str	r0, [r7, #12]
 802d844:	60b9      	str	r1, [r7, #8]
 802d846:	607a      	str	r2, [r7, #4]
 802d848:	70fb      	strb	r3, [r7, #3]
  LWIP_UNUSED_ARG(arg);

  LWIP_ERROR("tcp_recv_null: invalid pcb", pcb != NULL, return ERR_ARG);
 802d84a:	68bb      	ldr	r3, [r7, #8]
 802d84c:	2b00      	cmp	r3, #0
 802d84e:	d109      	bne.n	802d864 <tcp_recv_null+0x28>
 802d850:	4b12      	ldr	r3, [pc, #72]	; (802d89c <tcp_recv_null+0x60>)
 802d852:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 802d856:	4912      	ldr	r1, [pc, #72]	; (802d8a0 <tcp_recv_null+0x64>)
 802d858:	4812      	ldr	r0, [pc, #72]	; (802d8a4 <tcp_recv_null+0x68>)
 802d85a:	f008 fc9d 	bl	8036198 <iprintf>
 802d85e:	f06f 030f 	mvn.w	r3, #15
 802d862:	e016      	b.n	802d892 <tcp_recv_null+0x56>

  if (p != NULL) {
 802d864:	687b      	ldr	r3, [r7, #4]
 802d866:	2b00      	cmp	r3, #0
 802d868:	d009      	beq.n	802d87e <tcp_recv_null+0x42>
    tcp_recved(pcb, p->tot_len);
 802d86a:	687b      	ldr	r3, [r7, #4]
 802d86c:	891b      	ldrh	r3, [r3, #8]
 802d86e:	4619      	mov	r1, r3
 802d870:	68b8      	ldr	r0, [r7, #8]
 802d872:	f7ff fad3 	bl	802ce1c <tcp_recved>
    pbuf_free(p);
 802d876:	6878      	ldr	r0, [r7, #4]
 802d878:	f7fe fb10 	bl	802be9c <pbuf_free>
 802d87c:	e008      	b.n	802d890 <tcp_recv_null+0x54>
  } else if (err == ERR_OK) {
 802d87e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 802d882:	2b00      	cmp	r3, #0
 802d884:	d104      	bne.n	802d890 <tcp_recv_null+0x54>
    return tcp_close(pcb);
 802d886:	68b8      	ldr	r0, [r7, #8]
 802d888:	f7fe ffba 	bl	802c800 <tcp_close>
 802d88c:	4603      	mov	r3, r0
 802d88e:	e000      	b.n	802d892 <tcp_recv_null+0x56>
  }
  return ERR_OK;
 802d890:	2300      	movs	r3, #0
}
 802d892:	4618      	mov	r0, r3
 802d894:	3710      	adds	r7, #16
 802d896:	46bd      	mov	sp, r7
 802d898:	bd80      	pop	{r7, pc}
 802d89a:	bf00      	nop
 802d89c:	08038b40 	.word	0x08038b40
 802d8a0:	080390b0 	.word	0x080390b0
 802d8a4:	08038b84 	.word	0x08038b84

0802d8a8 <tcp_kill_prio>:
 *
 * @param prio minimum priority
 */
static void
tcp_kill_prio(u8_t prio)
{
 802d8a8:	b580      	push	{r7, lr}
 802d8aa:	b086      	sub	sp, #24
 802d8ac:	af00      	add	r7, sp, #0
 802d8ae:	4603      	mov	r3, r0
 802d8b0:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;
  u8_t mprio;

  mprio = LWIP_MIN(TCP_PRIO_MAX, prio);
 802d8b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 802d8b6:	2b00      	cmp	r3, #0
 802d8b8:	db01      	blt.n	802d8be <tcp_kill_prio+0x16>
 802d8ba:	79fb      	ldrb	r3, [r7, #7]
 802d8bc:	e000      	b.n	802d8c0 <tcp_kill_prio+0x18>
 802d8be:	237f      	movs	r3, #127	; 0x7f
 802d8c0:	72fb      	strb	r3, [r7, #11]

  /* We want to kill connections with a lower prio, so bail out if 
   * supplied prio is 0 - there can never be a lower prio
   */
  if (mprio == 0) {
 802d8c2:	7afb      	ldrb	r3, [r7, #11]
 802d8c4:	2b00      	cmp	r3, #0
 802d8c6:	d034      	beq.n	802d932 <tcp_kill_prio+0x8a>
  /* We only want kill connections with a lower prio, so decrement prio by one 
   * and start searching for oldest connection with same or lower priority than mprio.
   * We want to find the connections with the lowest possible prio, and among
   * these the one with the longest inactivity time.
   */
  mprio--;
 802d8c8:	7afb      	ldrb	r3, [r7, #11]
 802d8ca:	3b01      	subs	r3, #1
 802d8cc:	72fb      	strb	r3, [r7, #11]

  inactivity = 0;
 802d8ce:	2300      	movs	r3, #0
 802d8d0:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 802d8d2:	2300      	movs	r3, #0
 802d8d4:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 802d8d6:	4b19      	ldr	r3, [pc, #100]	; (802d93c <tcp_kill_prio+0x94>)
 802d8d8:	681b      	ldr	r3, [r3, #0]
 802d8da:	617b      	str	r3, [r7, #20]
 802d8dc:	e01f      	b.n	802d91e <tcp_kill_prio+0x76>
        /* lower prio is always a kill candidate */
    if ((pcb->prio < mprio) ||
 802d8de:	697b      	ldr	r3, [r7, #20]
 802d8e0:	7d5b      	ldrb	r3, [r3, #21]
 802d8e2:	7afa      	ldrb	r2, [r7, #11]
 802d8e4:	429a      	cmp	r2, r3
 802d8e6:	d80c      	bhi.n	802d902 <tcp_kill_prio+0x5a>
        /* longer inactivity is also a kill candidate */
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 802d8e8:	697b      	ldr	r3, [r7, #20]
 802d8ea:	7d5b      	ldrb	r3, [r3, #21]
    if ((pcb->prio < mprio) ||
 802d8ec:	7afa      	ldrb	r2, [r7, #11]
 802d8ee:	429a      	cmp	r2, r3
 802d8f0:	d112      	bne.n	802d918 <tcp_kill_prio+0x70>
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 802d8f2:	4b13      	ldr	r3, [pc, #76]	; (802d940 <tcp_kill_prio+0x98>)
 802d8f4:	681a      	ldr	r2, [r3, #0]
 802d8f6:	697b      	ldr	r3, [r7, #20]
 802d8f8:	6a1b      	ldr	r3, [r3, #32]
 802d8fa:	1ad3      	subs	r3, r2, r3
 802d8fc:	68fa      	ldr	r2, [r7, #12]
 802d8fe:	429a      	cmp	r2, r3
 802d900:	d80a      	bhi.n	802d918 <tcp_kill_prio+0x70>
      inactivity = tcp_ticks - pcb->tmr;
 802d902:	4b0f      	ldr	r3, [pc, #60]	; (802d940 <tcp_kill_prio+0x98>)
 802d904:	681a      	ldr	r2, [r3, #0]
 802d906:	697b      	ldr	r3, [r7, #20]
 802d908:	6a1b      	ldr	r3, [r3, #32]
 802d90a:	1ad3      	subs	r3, r2, r3
 802d90c:	60fb      	str	r3, [r7, #12]
      inactive   = pcb;
 802d90e:	697b      	ldr	r3, [r7, #20]
 802d910:	613b      	str	r3, [r7, #16]
      mprio      = pcb->prio;
 802d912:	697b      	ldr	r3, [r7, #20]
 802d914:	7d5b      	ldrb	r3, [r3, #21]
 802d916:	72fb      	strb	r3, [r7, #11]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 802d918:	697b      	ldr	r3, [r7, #20]
 802d91a:	68db      	ldr	r3, [r3, #12]
 802d91c:	617b      	str	r3, [r7, #20]
 802d91e:	697b      	ldr	r3, [r7, #20]
 802d920:	2b00      	cmp	r3, #0
 802d922:	d1dc      	bne.n	802d8de <tcp_kill_prio+0x36>
    }
  }
  if (inactive != NULL) {
 802d924:	693b      	ldr	r3, [r7, #16]
 802d926:	2b00      	cmp	r3, #0
 802d928:	d004      	beq.n	802d934 <tcp_kill_prio+0x8c>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_prio: killing oldest PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 802d92a:	6938      	ldr	r0, [r7, #16]
 802d92c:	f7ff f8ae 	bl	802ca8c <tcp_abort>
 802d930:	e000      	b.n	802d934 <tcp_kill_prio+0x8c>
    return;
 802d932:	bf00      	nop
  }
}
 802d934:	3718      	adds	r7, #24
 802d936:	46bd      	mov	sp, r7
 802d938:	bd80      	pop	{r7, pc}
 802d93a:	bf00      	nop
 802d93c:	2000ee18 	.word	0x2000ee18
 802d940:	2000ee0c 	.word	0x2000ee0c

0802d944 <tcp_kill_state>:
 * Kills the oldest connection that is in specific state.
 * Called from tcp_alloc() for LAST_ACK and CLOSING if no more connections are available.
 */
static void
tcp_kill_state(enum tcp_state state)
{
 802d944:	b580      	push	{r7, lr}
 802d946:	b086      	sub	sp, #24
 802d948:	af00      	add	r7, sp, #0
 802d94a:	4603      	mov	r3, r0
 802d94c:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  LWIP_ASSERT("invalid state", (state == CLOSING) || (state == LAST_ACK));
 802d94e:	79fb      	ldrb	r3, [r7, #7]
 802d950:	2b08      	cmp	r3, #8
 802d952:	d009      	beq.n	802d968 <tcp_kill_state+0x24>
 802d954:	79fb      	ldrb	r3, [r7, #7]
 802d956:	2b09      	cmp	r3, #9
 802d958:	d006      	beq.n	802d968 <tcp_kill_state+0x24>
 802d95a:	4b1a      	ldr	r3, [pc, #104]	; (802d9c4 <tcp_kill_state+0x80>)
 802d95c:	f240 62dd 	movw	r2, #1757	; 0x6dd
 802d960:	4919      	ldr	r1, [pc, #100]	; (802d9c8 <tcp_kill_state+0x84>)
 802d962:	481a      	ldr	r0, [pc, #104]	; (802d9cc <tcp_kill_state+0x88>)
 802d964:	f008 fc18 	bl	8036198 <iprintf>

  inactivity = 0;
 802d968:	2300      	movs	r3, #0
 802d96a:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 802d96c:	2300      	movs	r3, #0
 802d96e:	613b      	str	r3, [r7, #16]
  /* Go through the list of active pcbs and get the oldest pcb that is in state
     CLOSING/LAST_ACK. */
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 802d970:	4b17      	ldr	r3, [pc, #92]	; (802d9d0 <tcp_kill_state+0x8c>)
 802d972:	681b      	ldr	r3, [r3, #0]
 802d974:	617b      	str	r3, [r7, #20]
 802d976:	e017      	b.n	802d9a8 <tcp_kill_state+0x64>
    if (pcb->state == state) {
 802d978:	697b      	ldr	r3, [r7, #20]
 802d97a:	7d1b      	ldrb	r3, [r3, #20]
 802d97c:	79fa      	ldrb	r2, [r7, #7]
 802d97e:	429a      	cmp	r2, r3
 802d980:	d10f      	bne.n	802d9a2 <tcp_kill_state+0x5e>
      if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 802d982:	4b14      	ldr	r3, [pc, #80]	; (802d9d4 <tcp_kill_state+0x90>)
 802d984:	681a      	ldr	r2, [r3, #0]
 802d986:	697b      	ldr	r3, [r7, #20]
 802d988:	6a1b      	ldr	r3, [r3, #32]
 802d98a:	1ad3      	subs	r3, r2, r3
 802d98c:	68fa      	ldr	r2, [r7, #12]
 802d98e:	429a      	cmp	r2, r3
 802d990:	d807      	bhi.n	802d9a2 <tcp_kill_state+0x5e>
        inactivity = tcp_ticks - pcb->tmr;
 802d992:	4b10      	ldr	r3, [pc, #64]	; (802d9d4 <tcp_kill_state+0x90>)
 802d994:	681a      	ldr	r2, [r3, #0]
 802d996:	697b      	ldr	r3, [r7, #20]
 802d998:	6a1b      	ldr	r3, [r3, #32]
 802d99a:	1ad3      	subs	r3, r2, r3
 802d99c:	60fb      	str	r3, [r7, #12]
        inactive = pcb;
 802d99e:	697b      	ldr	r3, [r7, #20]
 802d9a0:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 802d9a2:	697b      	ldr	r3, [r7, #20]
 802d9a4:	68db      	ldr	r3, [r3, #12]
 802d9a6:	617b      	str	r3, [r7, #20]
 802d9a8:	697b      	ldr	r3, [r7, #20]
 802d9aa:	2b00      	cmp	r3, #0
 802d9ac:	d1e4      	bne.n	802d978 <tcp_kill_state+0x34>
      }
    }
  }
  if (inactive != NULL) {
 802d9ae:	693b      	ldr	r3, [r7, #16]
 802d9b0:	2b00      	cmp	r3, #0
 802d9b2:	d003      	beq.n	802d9bc <tcp_kill_state+0x78>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_closing: killing oldest %s PCB %p (%"S32_F")\n",
                            tcp_state_str[state], (void *)inactive, inactivity));
    /* Don't send a RST, since no data is lost. */
    tcp_abandon(inactive, 0);
 802d9b4:	2100      	movs	r1, #0
 802d9b6:	6938      	ldr	r0, [r7, #16]
 802d9b8:	f7fe ffaa 	bl	802c910 <tcp_abandon>
  }
}
 802d9bc:	bf00      	nop
 802d9be:	3718      	adds	r7, #24
 802d9c0:	46bd      	mov	sp, r7
 802d9c2:	bd80      	pop	{r7, pc}
 802d9c4:	08038b40 	.word	0x08038b40
 802d9c8:	080390cc 	.word	0x080390cc
 802d9cc:	08038b84 	.word	0x08038b84
 802d9d0:	2000ee18 	.word	0x2000ee18
 802d9d4:	2000ee0c 	.word	0x2000ee0c

0802d9d8 <tcp_kill_timewait>:
 * Kills the oldest connection that is in TIME_WAIT state.
 * Called from tcp_alloc() if no more connections are available.
 */
static void
tcp_kill_timewait(void)
{
 802d9d8:	b580      	push	{r7, lr}
 802d9da:	b084      	sub	sp, #16
 802d9dc:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  inactivity = 0;
 802d9de:	2300      	movs	r3, #0
 802d9e0:	607b      	str	r3, [r7, #4]
  inactive = NULL;
 802d9e2:	2300      	movs	r3, #0
 802d9e4:	60bb      	str	r3, [r7, #8]
  /* Go through the list of TIME_WAIT pcbs and get the oldest pcb. */
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 802d9e6:	4b12      	ldr	r3, [pc, #72]	; (802da30 <tcp_kill_timewait+0x58>)
 802d9e8:	681b      	ldr	r3, [r3, #0]
 802d9ea:	60fb      	str	r3, [r7, #12]
 802d9ec:	e012      	b.n	802da14 <tcp_kill_timewait+0x3c>
    if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 802d9ee:	4b11      	ldr	r3, [pc, #68]	; (802da34 <tcp_kill_timewait+0x5c>)
 802d9f0:	681a      	ldr	r2, [r3, #0]
 802d9f2:	68fb      	ldr	r3, [r7, #12]
 802d9f4:	6a1b      	ldr	r3, [r3, #32]
 802d9f6:	1ad3      	subs	r3, r2, r3
 802d9f8:	687a      	ldr	r2, [r7, #4]
 802d9fa:	429a      	cmp	r2, r3
 802d9fc:	d807      	bhi.n	802da0e <tcp_kill_timewait+0x36>
      inactivity = tcp_ticks - pcb->tmr;
 802d9fe:	4b0d      	ldr	r3, [pc, #52]	; (802da34 <tcp_kill_timewait+0x5c>)
 802da00:	681a      	ldr	r2, [r3, #0]
 802da02:	68fb      	ldr	r3, [r7, #12]
 802da04:	6a1b      	ldr	r3, [r3, #32]
 802da06:	1ad3      	subs	r3, r2, r3
 802da08:	607b      	str	r3, [r7, #4]
      inactive = pcb;
 802da0a:	68fb      	ldr	r3, [r7, #12]
 802da0c:	60bb      	str	r3, [r7, #8]
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 802da0e:	68fb      	ldr	r3, [r7, #12]
 802da10:	68db      	ldr	r3, [r3, #12]
 802da12:	60fb      	str	r3, [r7, #12]
 802da14:	68fb      	ldr	r3, [r7, #12]
 802da16:	2b00      	cmp	r3, #0
 802da18:	d1e9      	bne.n	802d9ee <tcp_kill_timewait+0x16>
    }
  }
  if (inactive != NULL) {
 802da1a:	68bb      	ldr	r3, [r7, #8]
 802da1c:	2b00      	cmp	r3, #0
 802da1e:	d002      	beq.n	802da26 <tcp_kill_timewait+0x4e>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_timewait: killing oldest TIME-WAIT PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 802da20:	68b8      	ldr	r0, [r7, #8]
 802da22:	f7ff f833 	bl	802ca8c <tcp_abort>
  }
}
 802da26:	bf00      	nop
 802da28:	3710      	adds	r7, #16
 802da2a:	46bd      	mov	sp, r7
 802da2c:	bd80      	pop	{r7, pc}
 802da2e:	bf00      	nop
 802da30:	2000ee1c 	.word	0x2000ee1c
 802da34:	2000ee0c 	.word	0x2000ee0c

0802da38 <tcp_handle_closepend>:
 * now send the FIN (which failed before), the pcb might be in a state that is
 * OK for us to now free it.
 */
static void
tcp_handle_closepend(void)
{
 802da38:	b580      	push	{r7, lr}
 802da3a:	b082      	sub	sp, #8
 802da3c:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb = tcp_active_pcbs;
 802da3e:	4b10      	ldr	r3, [pc, #64]	; (802da80 <tcp_handle_closepend+0x48>)
 802da40:	681b      	ldr	r3, [r3, #0]
 802da42:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 802da44:	e014      	b.n	802da70 <tcp_handle_closepend+0x38>
    struct tcp_pcb *next = pcb->next;
 802da46:	687b      	ldr	r3, [r7, #4]
 802da48:	68db      	ldr	r3, [r3, #12]
 802da4a:	603b      	str	r3, [r7, #0]
    /* send pending FIN */
    if (pcb->flags & TF_CLOSEPEND) {
 802da4c:	687b      	ldr	r3, [r7, #4]
 802da4e:	8b5b      	ldrh	r3, [r3, #26]
 802da50:	f003 0308 	and.w	r3, r3, #8
 802da54:	2b00      	cmp	r3, #0
 802da56:	d009      	beq.n	802da6c <tcp_handle_closepend+0x34>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_handle_closepend: pending FIN\n"));
      tcp_clear_flags(pcb, TF_CLOSEPEND);
 802da58:	687b      	ldr	r3, [r7, #4]
 802da5a:	8b5b      	ldrh	r3, [r3, #26]
 802da5c:	f023 0308 	bic.w	r3, r3, #8
 802da60:	b29a      	uxth	r2, r3
 802da62:	687b      	ldr	r3, [r7, #4]
 802da64:	835a      	strh	r2, [r3, #26]
      tcp_close_shutdown_fin(pcb);
 802da66:	6878      	ldr	r0, [r7, #4]
 802da68:	f7fe fe60 	bl	802c72c <tcp_close_shutdown_fin>
    }
    pcb = next;
 802da6c:	683b      	ldr	r3, [r7, #0]
 802da6e:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 802da70:	687b      	ldr	r3, [r7, #4]
 802da72:	2b00      	cmp	r3, #0
 802da74:	d1e7      	bne.n	802da46 <tcp_handle_closepend+0xe>
  }
}
 802da76:	bf00      	nop
 802da78:	bf00      	nop
 802da7a:	3708      	adds	r7, #8
 802da7c:	46bd      	mov	sp, r7
 802da7e:	bd80      	pop	{r7, pc}
 802da80:	2000ee18 	.word	0x2000ee18

0802da84 <tcp_alloc>:
 * @param prio priority for the new pcb
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_alloc(u8_t prio)
{
 802da84:	b580      	push	{r7, lr}
 802da86:	b084      	sub	sp, #16
 802da88:	af00      	add	r7, sp, #0
 802da8a:	4603      	mov	r3, r0
 802da8c:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 802da8e:	2001      	movs	r0, #1
 802da90:	f7fd fae4 	bl	802b05c <memp_malloc>
 802da94:	60f8      	str	r0, [r7, #12]
  if (pcb == NULL) {
 802da96:	68fb      	ldr	r3, [r7, #12]
 802da98:	2b00      	cmp	r3, #0
 802da9a:	d14e      	bne.n	802db3a <tcp_alloc+0xb6>
    /* Try to send FIN for all pcbs stuck in TF_CLOSEPEND first */
    tcp_handle_closepend();
 802da9c:	f7ff ffcc 	bl	802da38 <tcp_handle_closepend>

    /* Try killing oldest connection in TIME-WAIT. */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest TIME-WAIT connection\n"));
    tcp_kill_timewait();
 802daa0:	f7ff ff9a 	bl	802d9d8 <tcp_kill_timewait>
    /* Try to allocate a tcp_pcb again. */
    pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 802daa4:	2001      	movs	r0, #1
 802daa6:	f7fd fad9 	bl	802b05c <memp_malloc>
 802daaa:	60f8      	str	r0, [r7, #12]
    if (pcb == NULL) {
 802daac:	68fb      	ldr	r3, [r7, #12]
 802daae:	2b00      	cmp	r3, #0
 802dab0:	d139      	bne.n	802db26 <tcp_alloc+0xa2>
      /* Try killing oldest connection in LAST-ACK (these wouldn't go to TIME-WAIT). */
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest LAST-ACK connection\n"));
      tcp_kill_state(LAST_ACK);
 802dab2:	2009      	movs	r0, #9
 802dab4:	f7ff ff46 	bl	802d944 <tcp_kill_state>
      /* Try to allocate a tcp_pcb again. */
      pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 802dab8:	2001      	movs	r0, #1
 802daba:	f7fd facf 	bl	802b05c <memp_malloc>
 802dabe:	60f8      	str	r0, [r7, #12]
      if (pcb == NULL) {
 802dac0:	68fb      	ldr	r3, [r7, #12]
 802dac2:	2b00      	cmp	r3, #0
 802dac4:	d125      	bne.n	802db12 <tcp_alloc+0x8e>
        /* Try killing oldest connection in CLOSING. */
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest CLOSING connection\n"));
        tcp_kill_state(CLOSING);
 802dac6:	2008      	movs	r0, #8
 802dac8:	f7ff ff3c 	bl	802d944 <tcp_kill_state>
        /* Try to allocate a tcp_pcb again. */
        pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 802dacc:	2001      	movs	r0, #1
 802dace:	f7fd fac5 	bl	802b05c <memp_malloc>
 802dad2:	60f8      	str	r0, [r7, #12]
        if (pcb == NULL) {
 802dad4:	68fb      	ldr	r3, [r7, #12]
 802dad6:	2b00      	cmp	r3, #0
 802dad8:	d111      	bne.n	802dafe <tcp_alloc+0x7a>
          /* Try killing oldest active connection with lower priority than the new one. */
          LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing oldest connection with prio lower than %d\n", prio));
          tcp_kill_prio(prio);
 802dada:	79fb      	ldrb	r3, [r7, #7]
 802dadc:	4618      	mov	r0, r3
 802dade:	f7ff fee3 	bl	802d8a8 <tcp_kill_prio>
          /* Try to allocate a tcp_pcb again. */
          pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 802dae2:	2001      	movs	r0, #1
 802dae4:	f7fd faba 	bl	802b05c <memp_malloc>
 802dae8:	60f8      	str	r0, [r7, #12]
          if (pcb != NULL) {
 802daea:	68fb      	ldr	r3, [r7, #12]
 802daec:	2b00      	cmp	r3, #0
 802daee:	d006      	beq.n	802dafe <tcp_alloc+0x7a>
            /* adjust err stats: memp_malloc failed multiple times before */
            MEMP_STATS_DEC(err, MEMP_TCP_PCB);
 802daf0:	4b36      	ldr	r3, [pc, #216]	; (802dbcc <tcp_alloc+0x148>)
 802daf2:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 802daf6:	881a      	ldrh	r2, [r3, #0]
 802daf8:	3a01      	subs	r2, #1
 802dafa:	b292      	uxth	r2, r2
 802dafc:	801a      	strh	r2, [r3, #0]
          }
        }
        if (pcb != NULL) {
 802dafe:	68fb      	ldr	r3, [r7, #12]
 802db00:	2b00      	cmp	r3, #0
 802db02:	d006      	beq.n	802db12 <tcp_alloc+0x8e>
          /* adjust err stats: memp_malloc failed multiple times before */
          MEMP_STATS_DEC(err, MEMP_TCP_PCB);
 802db04:	4b31      	ldr	r3, [pc, #196]	; (802dbcc <tcp_alloc+0x148>)
 802db06:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 802db0a:	881a      	ldrh	r2, [r3, #0]
 802db0c:	3a01      	subs	r2, #1
 802db0e:	b292      	uxth	r2, r2
 802db10:	801a      	strh	r2, [r3, #0]
        }
      }
      if (pcb != NULL) {
 802db12:	68fb      	ldr	r3, [r7, #12]
 802db14:	2b00      	cmp	r3, #0
 802db16:	d006      	beq.n	802db26 <tcp_alloc+0xa2>
        /* adjust err stats: memp_malloc failed multiple times before */
        MEMP_STATS_DEC(err, MEMP_TCP_PCB);
 802db18:	4b2c      	ldr	r3, [pc, #176]	; (802dbcc <tcp_alloc+0x148>)
 802db1a:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 802db1e:	881a      	ldrh	r2, [r3, #0]
 802db20:	3a01      	subs	r2, #1
 802db22:	b292      	uxth	r2, r2
 802db24:	801a      	strh	r2, [r3, #0]
      }
    }
    if (pcb != NULL) {
 802db26:	68fb      	ldr	r3, [r7, #12]
 802db28:	2b00      	cmp	r3, #0
 802db2a:	d006      	beq.n	802db3a <tcp_alloc+0xb6>
      /* adjust err stats: memp_malloc failed above */
      MEMP_STATS_DEC(err, MEMP_TCP_PCB);
 802db2c:	4b27      	ldr	r3, [pc, #156]	; (802dbcc <tcp_alloc+0x148>)
 802db2e:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 802db32:	881a      	ldrh	r2, [r3, #0]
 802db34:	3a01      	subs	r2, #1
 802db36:	b292      	uxth	r2, r2
 802db38:	801a      	strh	r2, [r3, #0]
    }
  }
  if (pcb != NULL) {
 802db3a:	68fb      	ldr	r3, [r7, #12]
 802db3c:	2b00      	cmp	r3, #0
 802db3e:	d03f      	beq.n	802dbc0 <tcp_alloc+0x13c>
    /* zero out the whole pcb, so there is no need to initialize members to zero */
    memset(pcb, 0, sizeof(struct tcp_pcb));
 802db40:	229c      	movs	r2, #156	; 0x9c
 802db42:	2100      	movs	r1, #0
 802db44:	68f8      	ldr	r0, [r7, #12]
 802db46:	f008 fa3f 	bl	8035fc8 <memset>
    pcb->prio = prio;
 802db4a:	68fb      	ldr	r3, [r7, #12]
 802db4c:	79fa      	ldrb	r2, [r7, #7]
 802db4e:	755a      	strb	r2, [r3, #21]
    pcb->snd_buf = TCP_SND_BUF;
 802db50:	68fb      	ldr	r3, [r7, #12]
 802db52:	f44f 6286 	mov.w	r2, #1072	; 0x430
 802db56:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
    /* Start with a window that does not need scaling. When window scaling is
       enabled and used, the window is enlarged when both sides agree on scaling. */
    pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 802db5a:	68fb      	ldr	r3, [r7, #12]
 802db5c:	f44f 6206 	mov.w	r2, #2144	; 0x860
 802db60:	855a      	strh	r2, [r3, #42]	; 0x2a
 802db62:	68fb      	ldr	r3, [r7, #12]
 802db64:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 802db66:	68fb      	ldr	r3, [r7, #12]
 802db68:	851a      	strh	r2, [r3, #40]	; 0x28
    pcb->ttl = TCP_TTL;
 802db6a:	68fb      	ldr	r3, [r7, #12]
 802db6c:	22ff      	movs	r2, #255	; 0xff
 802db6e:	72da      	strb	r2, [r3, #11]
    /* As initial send MSS, we use TCP_MSS but limit it to 536.
       The send MSS is updated when an MSS option is received. */
    pcb->mss = INITIAL_MSS;
 802db70:	68fb      	ldr	r3, [r7, #12]
 802db72:	f44f 7206 	mov.w	r2, #536	; 0x218
 802db76:	865a      	strh	r2, [r3, #50]	; 0x32
    pcb->rto = 3000 / TCP_SLOW_INTERVAL;
 802db78:	68fb      	ldr	r3, [r7, #12]
 802db7a:	2206      	movs	r2, #6
 802db7c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    pcb->sv = 3000 / TCP_SLOW_INTERVAL;
 802db80:	68fb      	ldr	r3, [r7, #12]
 802db82:	2206      	movs	r2, #6
 802db84:	87da      	strh	r2, [r3, #62]	; 0x3e
    pcb->rtime = -1;
 802db86:	68fb      	ldr	r3, [r7, #12]
 802db88:	f64f 72ff 	movw	r2, #65535	; 0xffff
 802db8c:	861a      	strh	r2, [r3, #48]	; 0x30
    pcb->cwnd = 1;
 802db8e:	68fb      	ldr	r3, [r7, #12]
 802db90:	2201      	movs	r2, #1
 802db92:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
    pcb->tmr = tcp_ticks;
 802db96:	4b0e      	ldr	r3, [pc, #56]	; (802dbd0 <tcp_alloc+0x14c>)
 802db98:	681a      	ldr	r2, [r3, #0]
 802db9a:	68fb      	ldr	r3, [r7, #12]
 802db9c:	621a      	str	r2, [r3, #32]
    pcb->last_timer = tcp_timer_ctr;
 802db9e:	4b0d      	ldr	r3, [pc, #52]	; (802dbd4 <tcp_alloc+0x150>)
 802dba0:	781a      	ldrb	r2, [r3, #0]
 802dba2:	68fb      	ldr	r3, [r7, #12]
 802dba4:	779a      	strb	r2, [r3, #30]
    of using the largest advertised receive window.  We've seen complications with
    receiving TCPs that use window scaling and/or window auto-tuning where the
    initial advertised window is very small and then grows rapidly once the
    connection is established. To avoid these complications, we set ssthresh to the
    largest effective cwnd (amount of in-flight data) that the sender can have. */
    pcb->ssthresh = TCP_SND_BUF;
 802dba6:	68fb      	ldr	r3, [r7, #12]
 802dba8:	f44f 6286 	mov.w	r2, #1072	; 0x430
 802dbac:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

#if LWIP_CALLBACK_API
    pcb->recv = tcp_recv_null;
 802dbb0:	68fb      	ldr	r3, [r7, #12]
 802dbb2:	4a09      	ldr	r2, [pc, #36]	; (802dbd8 <tcp_alloc+0x154>)
 802dbb4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#endif /* LWIP_CALLBACK_API */

    /* Init KEEPALIVE timer */
    pcb->keep_idle  = TCP_KEEPIDLE_DEFAULT;
 802dbb8:	68fb      	ldr	r3, [r7, #12]
 802dbba:	4a08      	ldr	r2, [pc, #32]	; (802dbdc <tcp_alloc+0x158>)
 802dbbc:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
#if LWIP_TCP_KEEPALIVE
    pcb->keep_intvl = TCP_KEEPINTVL_DEFAULT;
    pcb->keep_cnt   = TCP_KEEPCNT_DEFAULT;
#endif /* LWIP_TCP_KEEPALIVE */
  }
  return pcb;
 802dbc0:	68fb      	ldr	r3, [r7, #12]
}
 802dbc2:	4618      	mov	r0, r3
 802dbc4:	3710      	adds	r7, #16
 802dbc6:	46bd      	mov	sp, r7
 802dbc8:	bd80      	pop	{r7, pc}
 802dbca:	bf00      	nop
 802dbcc:	2000ed10 	.word	0x2000ed10
 802dbd0:	2000ee0c 	.word	0x2000ee0c
 802dbd4:	2000ee22 	.word	0x2000ee22
 802dbd8:	0802d83d 	.word	0x0802d83d
 802dbdc:	006ddd00 	.word	0x006ddd00

0802dbe0 <tcp_new_ip_type>:
 * supply @ref IPADDR_TYPE_ANY as argument and bind to @ref IP_ANY_TYPE.
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_new_ip_type(u8_t type)
{
 802dbe0:	b580      	push	{r7, lr}
 802dbe2:	b084      	sub	sp, #16
 802dbe4:	af00      	add	r7, sp, #0
 802dbe6:	4603      	mov	r3, r0
 802dbe8:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;
  pcb = tcp_alloc(TCP_PRIO_NORMAL);
 802dbea:	2040      	movs	r0, #64	; 0x40
 802dbec:	f7ff ff4a 	bl	802da84 <tcp_alloc>
 802dbf0:	60f8      	str	r0, [r7, #12]
    IP_SET_TYPE_VAL(pcb->remote_ip, type);
  }
#else
  LWIP_UNUSED_ARG(type);
#endif /* LWIP_IPV4 && LWIP_IPV6 */
  return pcb;
 802dbf2:	68fb      	ldr	r3, [r7, #12]
}
 802dbf4:	4618      	mov	r0, r3
 802dbf6:	3710      	adds	r7, #16
 802dbf8:	46bd      	mov	sp, r7
 802dbfa:	bd80      	pop	{r7, pc}

0802dbfc <tcp_arg>:
 * @param pcb tcp_pcb to set the callback argument
 * @param arg void pointer argument to pass to callback functions
 */
void
tcp_arg(struct tcp_pcb *pcb, void *arg)
{
 802dbfc:	b480      	push	{r7}
 802dbfe:	b083      	sub	sp, #12
 802dc00:	af00      	add	r7, sp, #0
 802dc02:	6078      	str	r0, [r7, #4]
 802dc04:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  /* This function is allowed to be called for both listen pcbs and
     connection pcbs. */
  if (pcb != NULL) {
 802dc06:	687b      	ldr	r3, [r7, #4]
 802dc08:	2b00      	cmp	r3, #0
 802dc0a:	d002      	beq.n	802dc12 <tcp_arg+0x16>
    pcb->callback_arg = arg;
 802dc0c:	687b      	ldr	r3, [r7, #4]
 802dc0e:	683a      	ldr	r2, [r7, #0]
 802dc10:	611a      	str	r2, [r3, #16]
  }
}
 802dc12:	bf00      	nop
 802dc14:	370c      	adds	r7, #12
 802dc16:	46bd      	mov	sp, r7
 802dc18:	f85d 7b04 	ldr.w	r7, [sp], #4
 802dc1c:	4770      	bx	lr
	...

0802dc20 <tcp_recv>:
 * @param pcb tcp_pcb to set the recv callback
 * @param recv callback function to call for this pcb when data is received
 */
void
tcp_recv(struct tcp_pcb *pcb, tcp_recv_fn recv)
{
 802dc20:	b580      	push	{r7, lr}
 802dc22:	b082      	sub	sp, #8
 802dc24:	af00      	add	r7, sp, #0
 802dc26:	6078      	str	r0, [r7, #4]
 802dc28:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 802dc2a:	687b      	ldr	r3, [r7, #4]
 802dc2c:	2b00      	cmp	r3, #0
 802dc2e:	d00e      	beq.n	802dc4e <tcp_recv+0x2e>
    LWIP_ASSERT("invalid socket state for recv callback", pcb->state != LISTEN);
 802dc30:	687b      	ldr	r3, [r7, #4]
 802dc32:	7d1b      	ldrb	r3, [r3, #20]
 802dc34:	2b01      	cmp	r3, #1
 802dc36:	d106      	bne.n	802dc46 <tcp_recv+0x26>
 802dc38:	4b07      	ldr	r3, [pc, #28]	; (802dc58 <tcp_recv+0x38>)
 802dc3a:	f240 72df 	movw	r2, #2015	; 0x7df
 802dc3e:	4907      	ldr	r1, [pc, #28]	; (802dc5c <tcp_recv+0x3c>)
 802dc40:	4807      	ldr	r0, [pc, #28]	; (802dc60 <tcp_recv+0x40>)
 802dc42:	f008 faa9 	bl	8036198 <iprintf>
    pcb->recv = recv;
 802dc46:	687b      	ldr	r3, [r7, #4]
 802dc48:	683a      	ldr	r2, [r7, #0]
 802dc4a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  }
}
 802dc4e:	bf00      	nop
 802dc50:	3708      	adds	r7, #8
 802dc52:	46bd      	mov	sp, r7
 802dc54:	bd80      	pop	{r7, pc}
 802dc56:	bf00      	nop
 802dc58:	08038b40 	.word	0x08038b40
 802dc5c:	080390dc 	.word	0x080390dc
 802dc60:	08038b84 	.word	0x08038b84

0802dc64 <tcp_sent>:
 * @param pcb tcp_pcb to set the sent callback
 * @param sent callback function to call for this pcb when data is successfully sent
 */
void
tcp_sent(struct tcp_pcb *pcb, tcp_sent_fn sent)
{
 802dc64:	b580      	push	{r7, lr}
 802dc66:	b082      	sub	sp, #8
 802dc68:	af00      	add	r7, sp, #0
 802dc6a:	6078      	str	r0, [r7, #4]
 802dc6c:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 802dc6e:	687b      	ldr	r3, [r7, #4]
 802dc70:	2b00      	cmp	r3, #0
 802dc72:	d00e      	beq.n	802dc92 <tcp_sent+0x2e>
    LWIP_ASSERT("invalid socket state for sent callback", pcb->state != LISTEN);
 802dc74:	687b      	ldr	r3, [r7, #4]
 802dc76:	7d1b      	ldrb	r3, [r3, #20]
 802dc78:	2b01      	cmp	r3, #1
 802dc7a:	d106      	bne.n	802dc8a <tcp_sent+0x26>
 802dc7c:	4b07      	ldr	r3, [pc, #28]	; (802dc9c <tcp_sent+0x38>)
 802dc7e:	f240 72f3 	movw	r2, #2035	; 0x7f3
 802dc82:	4907      	ldr	r1, [pc, #28]	; (802dca0 <tcp_sent+0x3c>)
 802dc84:	4807      	ldr	r0, [pc, #28]	; (802dca4 <tcp_sent+0x40>)
 802dc86:	f008 fa87 	bl	8036198 <iprintf>
    pcb->sent = sent;
 802dc8a:	687b      	ldr	r3, [r7, #4]
 802dc8c:	683a      	ldr	r2, [r7, #0]
 802dc8e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  }
}
 802dc92:	bf00      	nop
 802dc94:	3708      	adds	r7, #8
 802dc96:	46bd      	mov	sp, r7
 802dc98:	bd80      	pop	{r7, pc}
 802dc9a:	bf00      	nop
 802dc9c:	08038b40 	.word	0x08038b40
 802dca0:	08039104 	.word	0x08039104
 802dca4:	08038b84 	.word	0x08038b84

0802dca8 <tcp_err>:
 * @param err callback function to call for this pcb when a fatal error
 *        has occurred on the connection
 */
void
tcp_err(struct tcp_pcb *pcb, tcp_err_fn err)
{
 802dca8:	b580      	push	{r7, lr}
 802dcaa:	b082      	sub	sp, #8
 802dcac:	af00      	add	r7, sp, #0
 802dcae:	6078      	str	r0, [r7, #4]
 802dcb0:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 802dcb2:	687b      	ldr	r3, [r7, #4]
 802dcb4:	2b00      	cmp	r3, #0
 802dcb6:	d00e      	beq.n	802dcd6 <tcp_err+0x2e>
    LWIP_ASSERT("invalid socket state for err callback", pcb->state != LISTEN);
 802dcb8:	687b      	ldr	r3, [r7, #4]
 802dcba:	7d1b      	ldrb	r3, [r3, #20]
 802dcbc:	2b01      	cmp	r3, #1
 802dcbe:	d106      	bne.n	802dcce <tcp_err+0x26>
 802dcc0:	4b07      	ldr	r3, [pc, #28]	; (802dce0 <tcp_err+0x38>)
 802dcc2:	f640 020d 	movw	r2, #2061	; 0x80d
 802dcc6:	4907      	ldr	r1, [pc, #28]	; (802dce4 <tcp_err+0x3c>)
 802dcc8:	4807      	ldr	r0, [pc, #28]	; (802dce8 <tcp_err+0x40>)
 802dcca:	f008 fa65 	bl	8036198 <iprintf>
    pcb->errf = err;
 802dcce:	687b      	ldr	r3, [r7, #4]
 802dcd0:	683a      	ldr	r2, [r7, #0]
 802dcd2:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  }
}
 802dcd6:	bf00      	nop
 802dcd8:	3708      	adds	r7, #8
 802dcda:	46bd      	mov	sp, r7
 802dcdc:	bd80      	pop	{r7, pc}
 802dcde:	bf00      	nop
 802dce0:	08038b40 	.word	0x08038b40
 802dce4:	0803912c 	.word	0x0803912c
 802dce8:	08038b84 	.word	0x08038b84

0802dcec <tcp_accept>:
 * @param accept callback function to call for this pcb when LISTENing
 *        connection has been connected to another host
 */
void
tcp_accept(struct tcp_pcb *pcb, tcp_accept_fn accept)
{
 802dcec:	b480      	push	{r7}
 802dcee:	b085      	sub	sp, #20
 802dcf0:	af00      	add	r7, sp, #0
 802dcf2:	6078      	str	r0, [r7, #4]
 802dcf4:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if ((pcb != NULL) && (pcb->state == LISTEN)) {
 802dcf6:	687b      	ldr	r3, [r7, #4]
 802dcf8:	2b00      	cmp	r3, #0
 802dcfa:	d008      	beq.n	802dd0e <tcp_accept+0x22>
 802dcfc:	687b      	ldr	r3, [r7, #4]
 802dcfe:	7d1b      	ldrb	r3, [r3, #20]
 802dd00:	2b01      	cmp	r3, #1
 802dd02:	d104      	bne.n	802dd0e <tcp_accept+0x22>
    struct tcp_pcb_listen *lpcb = (struct tcp_pcb_listen *)pcb;
 802dd04:	687b      	ldr	r3, [r7, #4]
 802dd06:	60fb      	str	r3, [r7, #12]
    lpcb->accept = accept;
 802dd08:	68fb      	ldr	r3, [r7, #12]
 802dd0a:	683a      	ldr	r2, [r7, #0]
 802dd0c:	619a      	str	r2, [r3, #24]
  }
}
 802dd0e:	bf00      	nop
 802dd10:	3714      	adds	r7, #20
 802dd12:	46bd      	mov	sp, r7
 802dd14:	f85d 7b04 	ldr.w	r7, [sp], #4
 802dd18:	4770      	bx	lr
	...

0802dd1c <tcp_poll>:
 * the application may use the polling functionality to call tcp_write()
 * again when the connection has been idle for a while.
 */
void
tcp_poll(struct tcp_pcb *pcb, tcp_poll_fn poll, u8_t interval)
{
 802dd1c:	b580      	push	{r7, lr}
 802dd1e:	b084      	sub	sp, #16
 802dd20:	af00      	add	r7, sp, #0
 802dd22:	60f8      	str	r0, [r7, #12]
 802dd24:	60b9      	str	r1, [r7, #8]
 802dd26:	4613      	mov	r3, r2
 802dd28:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_poll: invalid pcb", pcb != NULL, return);
 802dd2a:	68fb      	ldr	r3, [r7, #12]
 802dd2c:	2b00      	cmp	r3, #0
 802dd2e:	d107      	bne.n	802dd40 <tcp_poll+0x24>
 802dd30:	4b0e      	ldr	r3, [pc, #56]	; (802dd6c <tcp_poll+0x50>)
 802dd32:	f640 023d 	movw	r2, #2109	; 0x83d
 802dd36:	490e      	ldr	r1, [pc, #56]	; (802dd70 <tcp_poll+0x54>)
 802dd38:	480e      	ldr	r0, [pc, #56]	; (802dd74 <tcp_poll+0x58>)
 802dd3a:	f008 fa2d 	bl	8036198 <iprintf>
 802dd3e:	e011      	b.n	802dd64 <tcp_poll+0x48>
  LWIP_ASSERT("invalid socket state for poll", pcb->state != LISTEN);
 802dd40:	68fb      	ldr	r3, [r7, #12]
 802dd42:	7d1b      	ldrb	r3, [r3, #20]
 802dd44:	2b01      	cmp	r3, #1
 802dd46:	d106      	bne.n	802dd56 <tcp_poll+0x3a>
 802dd48:	4b08      	ldr	r3, [pc, #32]	; (802dd6c <tcp_poll+0x50>)
 802dd4a:	f640 023e 	movw	r2, #2110	; 0x83e
 802dd4e:	490a      	ldr	r1, [pc, #40]	; (802dd78 <tcp_poll+0x5c>)
 802dd50:	4808      	ldr	r0, [pc, #32]	; (802dd74 <tcp_poll+0x58>)
 802dd52:	f008 fa21 	bl	8036198 <iprintf>

#if LWIP_CALLBACK_API
  pcb->poll = poll;
 802dd56:	68fb      	ldr	r3, [r7, #12]
 802dd58:	68ba      	ldr	r2, [r7, #8]
 802dd5a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
#else /* LWIP_CALLBACK_API */
  LWIP_UNUSED_ARG(poll);
#endif /* LWIP_CALLBACK_API */
  pcb->pollinterval = interval;
 802dd5e:	68fb      	ldr	r3, [r7, #12]
 802dd60:	79fa      	ldrb	r2, [r7, #7]
 802dd62:	775a      	strb	r2, [r3, #29]
}
 802dd64:	3710      	adds	r7, #16
 802dd66:	46bd      	mov	sp, r7
 802dd68:	bd80      	pop	{r7, pc}
 802dd6a:	bf00      	nop
 802dd6c:	08038b40 	.word	0x08038b40
 802dd70:	08039154 	.word	0x08039154
 802dd74:	08038b84 	.word	0x08038b84
 802dd78:	0803916c 	.word	0x0803916c

0802dd7c <tcp_pcb_purge>:
 *
 * @param pcb tcp_pcb to purge. The pcb itself is not deallocated!
 */
void
tcp_pcb_purge(struct tcp_pcb *pcb)
{
 802dd7c:	b580      	push	{r7, lr}
 802dd7e:	b082      	sub	sp, #8
 802dd80:	af00      	add	r7, sp, #0
 802dd82:	6078      	str	r0, [r7, #4]
  LWIP_ERROR("tcp_pcb_purge: invalid pcb", pcb != NULL, return);
 802dd84:	687b      	ldr	r3, [r7, #4]
 802dd86:	2b00      	cmp	r3, #0
 802dd88:	d107      	bne.n	802dd9a <tcp_pcb_purge+0x1e>
 802dd8a:	4b21      	ldr	r3, [pc, #132]	; (802de10 <tcp_pcb_purge+0x94>)
 802dd8c:	f640 0251 	movw	r2, #2129	; 0x851
 802dd90:	4920      	ldr	r1, [pc, #128]	; (802de14 <tcp_pcb_purge+0x98>)
 802dd92:	4821      	ldr	r0, [pc, #132]	; (802de18 <tcp_pcb_purge+0x9c>)
 802dd94:	f008 fa00 	bl	8036198 <iprintf>
 802dd98:	e037      	b.n	802de0a <tcp_pcb_purge+0x8e>

  if (pcb->state != CLOSED &&
 802dd9a:	687b      	ldr	r3, [r7, #4]
 802dd9c:	7d1b      	ldrb	r3, [r3, #20]
 802dd9e:	2b00      	cmp	r3, #0
 802dda0:	d033      	beq.n	802de0a <tcp_pcb_purge+0x8e>
      pcb->state != TIME_WAIT &&
 802dda2:	687b      	ldr	r3, [r7, #4]
 802dda4:	7d1b      	ldrb	r3, [r3, #20]
  if (pcb->state != CLOSED &&
 802dda6:	2b0a      	cmp	r3, #10
 802dda8:	d02f      	beq.n	802de0a <tcp_pcb_purge+0x8e>
      pcb->state != LISTEN) {
 802ddaa:	687b      	ldr	r3, [r7, #4]
 802ddac:	7d1b      	ldrb	r3, [r3, #20]
      pcb->state != TIME_WAIT &&
 802ddae:	2b01      	cmp	r3, #1
 802ddb0:	d02b      	beq.n	802de0a <tcp_pcb_purge+0x8e>

    LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge\n"));

    tcp_backlog_accepted(pcb);

    if (pcb->refused_data != NULL) {
 802ddb2:	687b      	ldr	r3, [r7, #4]
 802ddb4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 802ddb6:	2b00      	cmp	r3, #0
 802ddb8:	d007      	beq.n	802ddca <tcp_pcb_purge+0x4e>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->refused_data\n"));
      pbuf_free(pcb->refused_data);
 802ddba:	687b      	ldr	r3, [r7, #4]
 802ddbc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 802ddbe:	4618      	mov	r0, r3
 802ddc0:	f7fe f86c 	bl	802be9c <pbuf_free>
      pcb->refused_data = NULL;
 802ddc4:	687b      	ldr	r3, [r7, #4]
 802ddc6:	2200      	movs	r2, #0
 802ddc8:	679a      	str	r2, [r3, #120]	; 0x78
    }
    if (pcb->unacked != NULL) {
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->unacked\n"));
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 802ddca:	687b      	ldr	r3, [r7, #4]
 802ddcc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 802ddce:	2b00      	cmp	r3, #0
 802ddd0:	d002      	beq.n	802ddd8 <tcp_pcb_purge+0x5c>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->ooseq\n"));
      tcp_free_ooseq(pcb);
 802ddd2:	6878      	ldr	r0, [r7, #4]
 802ddd4:	f000 f986 	bl	802e0e4 <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Stop the retransmission timer as it will expect data on unacked
       queue if it fires */
    pcb->rtime = -1;
 802ddd8:	687b      	ldr	r3, [r7, #4]
 802ddda:	f64f 72ff 	movw	r2, #65535	; 0xffff
 802ddde:	861a      	strh	r2, [r3, #48]	; 0x30

    tcp_segs_free(pcb->unsent);
 802dde0:	687b      	ldr	r3, [r7, #4]
 802dde2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 802dde4:	4618      	mov	r0, r3
 802dde6:	f7ff fccf 	bl	802d788 <tcp_segs_free>
    tcp_segs_free(pcb->unacked);
 802ddea:	687b      	ldr	r3, [r7, #4]
 802ddec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 802ddee:	4618      	mov	r0, r3
 802ddf0:	f7ff fcca 	bl	802d788 <tcp_segs_free>
    pcb->unacked = pcb->unsent = NULL;
 802ddf4:	687b      	ldr	r3, [r7, #4]
 802ddf6:	2200      	movs	r2, #0
 802ddf8:	66da      	str	r2, [r3, #108]	; 0x6c
 802ddfa:	687b      	ldr	r3, [r7, #4]
 802ddfc:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 802ddfe:	687b      	ldr	r3, [r7, #4]
 802de00:	671a      	str	r2, [r3, #112]	; 0x70
#if TCP_OVERSIZE
    pcb->unsent_oversize = 0;
 802de02:	687b      	ldr	r3, [r7, #4]
 802de04:	2200      	movs	r2, #0
 802de06:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* TCP_OVERSIZE */
  }
}
 802de0a:	3708      	adds	r7, #8
 802de0c:	46bd      	mov	sp, r7
 802de0e:	bd80      	pop	{r7, pc}
 802de10:	08038b40 	.word	0x08038b40
 802de14:	0803918c 	.word	0x0803918c
 802de18:	08038b84 	.word	0x08038b84

0802de1c <tcp_pcb_remove>:
 * @param pcblist PCB list to purge.
 * @param pcb tcp_pcb to purge. The pcb itself is NOT deallocated!
 */
void
tcp_pcb_remove(struct tcp_pcb **pcblist, struct tcp_pcb *pcb)
{
 802de1c:	b580      	push	{r7, lr}
 802de1e:	b084      	sub	sp, #16
 802de20:	af00      	add	r7, sp, #0
 802de22:	6078      	str	r0, [r7, #4]
 802de24:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("tcp_pcb_remove: invalid pcb", pcb != NULL);
 802de26:	683b      	ldr	r3, [r7, #0]
 802de28:	2b00      	cmp	r3, #0
 802de2a:	d106      	bne.n	802de3a <tcp_pcb_remove+0x1e>
 802de2c:	4b3e      	ldr	r3, [pc, #248]	; (802df28 <tcp_pcb_remove+0x10c>)
 802de2e:	f640 0283 	movw	r2, #2179	; 0x883
 802de32:	493e      	ldr	r1, [pc, #248]	; (802df2c <tcp_pcb_remove+0x110>)
 802de34:	483e      	ldr	r0, [pc, #248]	; (802df30 <tcp_pcb_remove+0x114>)
 802de36:	f008 f9af 	bl	8036198 <iprintf>
  LWIP_ASSERT("tcp_pcb_remove: invalid pcblist", pcblist != NULL);
 802de3a:	687b      	ldr	r3, [r7, #4]
 802de3c:	2b00      	cmp	r3, #0
 802de3e:	d106      	bne.n	802de4e <tcp_pcb_remove+0x32>
 802de40:	4b39      	ldr	r3, [pc, #228]	; (802df28 <tcp_pcb_remove+0x10c>)
 802de42:	f640 0284 	movw	r2, #2180	; 0x884
 802de46:	493b      	ldr	r1, [pc, #236]	; (802df34 <tcp_pcb_remove+0x118>)
 802de48:	4839      	ldr	r0, [pc, #228]	; (802df30 <tcp_pcb_remove+0x114>)
 802de4a:	f008 f9a5 	bl	8036198 <iprintf>

  TCP_RMV(pcblist, pcb);
 802de4e:	687b      	ldr	r3, [r7, #4]
 802de50:	681b      	ldr	r3, [r3, #0]
 802de52:	683a      	ldr	r2, [r7, #0]
 802de54:	429a      	cmp	r2, r3
 802de56:	d105      	bne.n	802de64 <tcp_pcb_remove+0x48>
 802de58:	687b      	ldr	r3, [r7, #4]
 802de5a:	681b      	ldr	r3, [r3, #0]
 802de5c:	68da      	ldr	r2, [r3, #12]
 802de5e:	687b      	ldr	r3, [r7, #4]
 802de60:	601a      	str	r2, [r3, #0]
 802de62:	e013      	b.n	802de8c <tcp_pcb_remove+0x70>
 802de64:	687b      	ldr	r3, [r7, #4]
 802de66:	681b      	ldr	r3, [r3, #0]
 802de68:	60fb      	str	r3, [r7, #12]
 802de6a:	e00c      	b.n	802de86 <tcp_pcb_remove+0x6a>
 802de6c:	68fb      	ldr	r3, [r7, #12]
 802de6e:	68db      	ldr	r3, [r3, #12]
 802de70:	683a      	ldr	r2, [r7, #0]
 802de72:	429a      	cmp	r2, r3
 802de74:	d104      	bne.n	802de80 <tcp_pcb_remove+0x64>
 802de76:	683b      	ldr	r3, [r7, #0]
 802de78:	68da      	ldr	r2, [r3, #12]
 802de7a:	68fb      	ldr	r3, [r7, #12]
 802de7c:	60da      	str	r2, [r3, #12]
 802de7e:	e005      	b.n	802de8c <tcp_pcb_remove+0x70>
 802de80:	68fb      	ldr	r3, [r7, #12]
 802de82:	68db      	ldr	r3, [r3, #12]
 802de84:	60fb      	str	r3, [r7, #12]
 802de86:	68fb      	ldr	r3, [r7, #12]
 802de88:	2b00      	cmp	r3, #0
 802de8a:	d1ef      	bne.n	802de6c <tcp_pcb_remove+0x50>
 802de8c:	683b      	ldr	r3, [r7, #0]
 802de8e:	2200      	movs	r2, #0
 802de90:	60da      	str	r2, [r3, #12]

  tcp_pcb_purge(pcb);
 802de92:	6838      	ldr	r0, [r7, #0]
 802de94:	f7ff ff72 	bl	802dd7c <tcp_pcb_purge>

  /* if there is an outstanding delayed ACKs, send it */
  if ((pcb->state != TIME_WAIT) &&
 802de98:	683b      	ldr	r3, [r7, #0]
 802de9a:	7d1b      	ldrb	r3, [r3, #20]
 802de9c:	2b0a      	cmp	r3, #10
 802de9e:	d013      	beq.n	802dec8 <tcp_pcb_remove+0xac>
      (pcb->state != LISTEN) &&
 802dea0:	683b      	ldr	r3, [r7, #0]
 802dea2:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != TIME_WAIT) &&
 802dea4:	2b01      	cmp	r3, #1
 802dea6:	d00f      	beq.n	802dec8 <tcp_pcb_remove+0xac>
      (pcb->flags & TF_ACK_DELAY)) {
 802dea8:	683b      	ldr	r3, [r7, #0]
 802deaa:	8b5b      	ldrh	r3, [r3, #26]
 802deac:	f003 0301 	and.w	r3, r3, #1
      (pcb->state != LISTEN) &&
 802deb0:	2b00      	cmp	r3, #0
 802deb2:	d009      	beq.n	802dec8 <tcp_pcb_remove+0xac>
    tcp_ack_now(pcb);
 802deb4:	683b      	ldr	r3, [r7, #0]
 802deb6:	8b5b      	ldrh	r3, [r3, #26]
 802deb8:	f043 0302 	orr.w	r3, r3, #2
 802debc:	b29a      	uxth	r2, r3
 802debe:	683b      	ldr	r3, [r7, #0]
 802dec0:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 802dec2:	6838      	ldr	r0, [r7, #0]
 802dec4:	f003 fc66 	bl	8031794 <tcp_output>
  }

  if (pcb->state != LISTEN) {
 802dec8:	683b      	ldr	r3, [r7, #0]
 802deca:	7d1b      	ldrb	r3, [r3, #20]
 802decc:	2b01      	cmp	r3, #1
 802dece:	d020      	beq.n	802df12 <tcp_pcb_remove+0xf6>
    LWIP_ASSERT("unsent segments leaking", pcb->unsent == NULL);
 802ded0:	683b      	ldr	r3, [r7, #0]
 802ded2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 802ded4:	2b00      	cmp	r3, #0
 802ded6:	d006      	beq.n	802dee6 <tcp_pcb_remove+0xca>
 802ded8:	4b13      	ldr	r3, [pc, #76]	; (802df28 <tcp_pcb_remove+0x10c>)
 802deda:	f640 0293 	movw	r2, #2195	; 0x893
 802dede:	4916      	ldr	r1, [pc, #88]	; (802df38 <tcp_pcb_remove+0x11c>)
 802dee0:	4813      	ldr	r0, [pc, #76]	; (802df30 <tcp_pcb_remove+0x114>)
 802dee2:	f008 f959 	bl	8036198 <iprintf>
    LWIP_ASSERT("unacked segments leaking", pcb->unacked == NULL);
 802dee6:	683b      	ldr	r3, [r7, #0]
 802dee8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 802deea:	2b00      	cmp	r3, #0
 802deec:	d006      	beq.n	802defc <tcp_pcb_remove+0xe0>
 802deee:	4b0e      	ldr	r3, [pc, #56]	; (802df28 <tcp_pcb_remove+0x10c>)
 802def0:	f640 0294 	movw	r2, #2196	; 0x894
 802def4:	4911      	ldr	r1, [pc, #68]	; (802df3c <tcp_pcb_remove+0x120>)
 802def6:	480e      	ldr	r0, [pc, #56]	; (802df30 <tcp_pcb_remove+0x114>)
 802def8:	f008 f94e 	bl	8036198 <iprintf>
#if TCP_QUEUE_OOSEQ
    LWIP_ASSERT("ooseq segments leaking", pcb->ooseq == NULL);
 802defc:	683b      	ldr	r3, [r7, #0]
 802defe:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 802df00:	2b00      	cmp	r3, #0
 802df02:	d006      	beq.n	802df12 <tcp_pcb_remove+0xf6>
 802df04:	4b08      	ldr	r3, [pc, #32]	; (802df28 <tcp_pcb_remove+0x10c>)
 802df06:	f640 0296 	movw	r2, #2198	; 0x896
 802df0a:	490d      	ldr	r1, [pc, #52]	; (802df40 <tcp_pcb_remove+0x124>)
 802df0c:	4808      	ldr	r0, [pc, #32]	; (802df30 <tcp_pcb_remove+0x114>)
 802df0e:	f008 f943 	bl	8036198 <iprintf>
#endif /* TCP_QUEUE_OOSEQ */
  }

  pcb->state = CLOSED;
 802df12:	683b      	ldr	r3, [r7, #0]
 802df14:	2200      	movs	r2, #0
 802df16:	751a      	strb	r2, [r3, #20]
  /* reset the local port to prevent the pcb from being 'bound' */
  pcb->local_port = 0;
 802df18:	683b      	ldr	r3, [r7, #0]
 802df1a:	2200      	movs	r2, #0
 802df1c:	82da      	strh	r2, [r3, #22]

  LWIP_ASSERT("tcp_pcb_remove: tcp_pcbs_sane()", tcp_pcbs_sane());
}
 802df1e:	bf00      	nop
 802df20:	3710      	adds	r7, #16
 802df22:	46bd      	mov	sp, r7
 802df24:	bd80      	pop	{r7, pc}
 802df26:	bf00      	nop
 802df28:	08038b40 	.word	0x08038b40
 802df2c:	080391a8 	.word	0x080391a8
 802df30:	08038b84 	.word	0x08038b84
 802df34:	080391c4 	.word	0x080391c4
 802df38:	080391e4 	.word	0x080391e4
 802df3c:	080391fc 	.word	0x080391fc
 802df40:	08039218 	.word	0x08039218

0802df44 <tcp_next_iss>:
 *
 * @return u32_t pseudo random sequence number
 */
u32_t
tcp_next_iss(struct tcp_pcb *pcb)
{
 802df44:	b580      	push	{r7, lr}
 802df46:	b082      	sub	sp, #8
 802df48:	af00      	add	r7, sp, #0
 802df4a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
  return LWIP_HOOK_TCP_ISN(&pcb->local_ip, pcb->local_port, &pcb->remote_ip, pcb->remote_port);
#else /* LWIP_HOOK_TCP_ISN */
  static u32_t iss = 6510;

  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
 802df4c:	687b      	ldr	r3, [r7, #4]
 802df4e:	2b00      	cmp	r3, #0
 802df50:	d106      	bne.n	802df60 <tcp_next_iss+0x1c>
 802df52:	4b0a      	ldr	r3, [pc, #40]	; (802df7c <tcp_next_iss+0x38>)
 802df54:	f640 02af 	movw	r2, #2223	; 0x8af
 802df58:	4909      	ldr	r1, [pc, #36]	; (802df80 <tcp_next_iss+0x3c>)
 802df5a:	480a      	ldr	r0, [pc, #40]	; (802df84 <tcp_next_iss+0x40>)
 802df5c:	f008 f91c 	bl	8036198 <iprintf>
  LWIP_UNUSED_ARG(pcb);

  iss += tcp_ticks;       /* XXX */
 802df60:	4b09      	ldr	r3, [pc, #36]	; (802df88 <tcp_next_iss+0x44>)
 802df62:	681a      	ldr	r2, [r3, #0]
 802df64:	4b09      	ldr	r3, [pc, #36]	; (802df8c <tcp_next_iss+0x48>)
 802df66:	681b      	ldr	r3, [r3, #0]
 802df68:	4413      	add	r3, r2
 802df6a:	4a07      	ldr	r2, [pc, #28]	; (802df88 <tcp_next_iss+0x44>)
 802df6c:	6013      	str	r3, [r2, #0]
  return iss;
 802df6e:	4b06      	ldr	r3, [pc, #24]	; (802df88 <tcp_next_iss+0x44>)
 802df70:	681b      	ldr	r3, [r3, #0]
#endif /* LWIP_HOOK_TCP_ISN */
}
 802df72:	4618      	mov	r0, r3
 802df74:	3708      	adds	r7, #8
 802df76:	46bd      	mov	sp, r7
 802df78:	bd80      	pop	{r7, pc}
 802df7a:	bf00      	nop
 802df7c:	08038b40 	.word	0x08038b40
 802df80:	08039230 	.word	0x08039230
 802df84:	08038b84 	.word	0x08038b84
 802df88:	2000002c 	.word	0x2000002c
 802df8c:	2000ee0c 	.word	0x2000ee0c

0802df90 <tcp_eff_send_mss_netif>:
 * by calculating the minimum of TCP_MSS and the mtu (if set) of the target
 * netif (if not NULL).
 */
u16_t
tcp_eff_send_mss_netif(u16_t sendmss, struct netif *outif, const ip_addr_t *dest)
{
 802df90:	b580      	push	{r7, lr}
 802df92:	b086      	sub	sp, #24
 802df94:	af00      	add	r7, sp, #0
 802df96:	4603      	mov	r3, r0
 802df98:	60b9      	str	r1, [r7, #8]
 802df9a:	607a      	str	r2, [r7, #4]
 802df9c:	81fb      	strh	r3, [r7, #14]
  u16_t mss_s;
  u16_t mtu;

  LWIP_UNUSED_ARG(dest); /* in case IPv6 is disabled */

  LWIP_ASSERT("tcp_eff_send_mss_netif: invalid dst_ip", dest != NULL);
 802df9e:	687b      	ldr	r3, [r7, #4]
 802dfa0:	2b00      	cmp	r3, #0
 802dfa2:	d106      	bne.n	802dfb2 <tcp_eff_send_mss_netif+0x22>
 802dfa4:	4b14      	ldr	r3, [pc, #80]	; (802dff8 <tcp_eff_send_mss_netif+0x68>)
 802dfa6:	f640 02c5 	movw	r2, #2245	; 0x8c5
 802dfaa:	4914      	ldr	r1, [pc, #80]	; (802dffc <tcp_eff_send_mss_netif+0x6c>)
 802dfac:	4814      	ldr	r0, [pc, #80]	; (802e000 <tcp_eff_send_mss_netif+0x70>)
 802dfae:	f008 f8f3 	bl	8036198 <iprintf>
  else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
  {
    if (outif == NULL) {
 802dfb2:	68bb      	ldr	r3, [r7, #8]
 802dfb4:	2b00      	cmp	r3, #0
 802dfb6:	d101      	bne.n	802dfbc <tcp_eff_send_mss_netif+0x2c>
      return sendmss;
 802dfb8:	89fb      	ldrh	r3, [r7, #14]
 802dfba:	e019      	b.n	802dff0 <tcp_eff_send_mss_netif+0x60>
    }
    mtu = outif->mtu;
 802dfbc:	68bb      	ldr	r3, [r7, #8]
 802dfbe:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 802dfc0:	82fb      	strh	r3, [r7, #22]
  }
#endif /* LWIP_IPV4 */

  if (mtu != 0) {
 802dfc2:	8afb      	ldrh	r3, [r7, #22]
 802dfc4:	2b00      	cmp	r3, #0
 802dfc6:	d012      	beq.n	802dfee <tcp_eff_send_mss_netif+0x5e>
    else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    {
      offset = IP_HLEN + TCP_HLEN;
 802dfc8:	2328      	movs	r3, #40	; 0x28
 802dfca:	82bb      	strh	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
    mss_s = (mtu > offset) ? (u16_t)(mtu - offset) : 0;
 802dfcc:	8afa      	ldrh	r2, [r7, #22]
 802dfce:	8abb      	ldrh	r3, [r7, #20]
 802dfd0:	429a      	cmp	r2, r3
 802dfd2:	d904      	bls.n	802dfde <tcp_eff_send_mss_netif+0x4e>
 802dfd4:	8afa      	ldrh	r2, [r7, #22]
 802dfd6:	8abb      	ldrh	r3, [r7, #20]
 802dfd8:	1ad3      	subs	r3, r2, r3
 802dfda:	b29b      	uxth	r3, r3
 802dfdc:	e000      	b.n	802dfe0 <tcp_eff_send_mss_netif+0x50>
 802dfde:	2300      	movs	r3, #0
 802dfe0:	827b      	strh	r3, [r7, #18]
    /* RFC 1122, chap 4.2.2.6:
     * Eff.snd.MSS = min(SendMSS+20, MMS_S) - TCPhdrsize - IPoptionsize
     * We correct for TCP options in tcp_write(), and don't support IP options.
     */
    sendmss = LWIP_MIN(sendmss, mss_s);
 802dfe2:	8a7a      	ldrh	r2, [r7, #18]
 802dfe4:	89fb      	ldrh	r3, [r7, #14]
 802dfe6:	4293      	cmp	r3, r2
 802dfe8:	bf28      	it	cs
 802dfea:	4613      	movcs	r3, r2
 802dfec:	81fb      	strh	r3, [r7, #14]
  }
  return sendmss;
 802dfee:	89fb      	ldrh	r3, [r7, #14]
}
 802dff0:	4618      	mov	r0, r3
 802dff2:	3718      	adds	r7, #24
 802dff4:	46bd      	mov	sp, r7
 802dff6:	bd80      	pop	{r7, pc}
 802dff8:	08038b40 	.word	0x08038b40
 802dffc:	0803924c 	.word	0x0803924c
 802e000:	08038b84 	.word	0x08038b84

0802e004 <tcp_netif_ip_addr_changed_pcblist>:
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

/** Helper function for tcp_netif_ip_addr_changed() that iterates a pcb list */
static void
tcp_netif_ip_addr_changed_pcblist(const ip_addr_t *old_addr, struct tcp_pcb *pcb_list)
{
 802e004:	b580      	push	{r7, lr}
 802e006:	b084      	sub	sp, #16
 802e008:	af00      	add	r7, sp, #0
 802e00a:	6078      	str	r0, [r7, #4]
 802e00c:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;
  pcb = pcb_list;
 802e00e:	683b      	ldr	r3, [r7, #0]
 802e010:	60fb      	str	r3, [r7, #12]

  LWIP_ASSERT("tcp_netif_ip_addr_changed_pcblist: invalid old_addr", old_addr != NULL);
 802e012:	687b      	ldr	r3, [r7, #4]
 802e014:	2b00      	cmp	r3, #0
 802e016:	d119      	bne.n	802e04c <tcp_netif_ip_addr_changed_pcblist+0x48>
 802e018:	4b10      	ldr	r3, [pc, #64]	; (802e05c <tcp_netif_ip_addr_changed_pcblist+0x58>)
 802e01a:	f44f 6210 	mov.w	r2, #2304	; 0x900
 802e01e:	4910      	ldr	r1, [pc, #64]	; (802e060 <tcp_netif_ip_addr_changed_pcblist+0x5c>)
 802e020:	4810      	ldr	r0, [pc, #64]	; (802e064 <tcp_netif_ip_addr_changed_pcblist+0x60>)
 802e022:	f008 f8b9 	bl	8036198 <iprintf>

  while (pcb != NULL) {
 802e026:	e011      	b.n	802e04c <tcp_netif_ip_addr_changed_pcblist+0x48>
    /* PCB bound to current local interface address? */
    if (ip_addr_cmp(&pcb->local_ip, old_addr)
 802e028:	68fb      	ldr	r3, [r7, #12]
 802e02a:	681a      	ldr	r2, [r3, #0]
 802e02c:	687b      	ldr	r3, [r7, #4]
 802e02e:	681b      	ldr	r3, [r3, #0]
 802e030:	429a      	cmp	r2, r3
 802e032:	d108      	bne.n	802e046 <tcp_netif_ip_addr_changed_pcblist+0x42>
        /* connections to link-local addresses must persist (RFC3927 ch. 1.9) */
        && (!IP_IS_V4_VAL(pcb->local_ip) || !ip4_addr_islinklocal(ip_2_ip4(&pcb->local_ip)))
#endif /* LWIP_AUTOIP */
       ) {
      /* this connection must be aborted */
      struct tcp_pcb *next = pcb->next;
 802e034:	68fb      	ldr	r3, [r7, #12]
 802e036:	68db      	ldr	r3, [r3, #12]
 802e038:	60bb      	str	r3, [r7, #8]
      LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: aborting TCP pcb %p\n", (void *)pcb));
      tcp_abort(pcb);
 802e03a:	68f8      	ldr	r0, [r7, #12]
 802e03c:	f7fe fd26 	bl	802ca8c <tcp_abort>
      pcb = next;
 802e040:	68bb      	ldr	r3, [r7, #8]
 802e042:	60fb      	str	r3, [r7, #12]
 802e044:	e002      	b.n	802e04c <tcp_netif_ip_addr_changed_pcblist+0x48>
    } else {
      pcb = pcb->next;
 802e046:	68fb      	ldr	r3, [r7, #12]
 802e048:	68db      	ldr	r3, [r3, #12]
 802e04a:	60fb      	str	r3, [r7, #12]
  while (pcb != NULL) {
 802e04c:	68fb      	ldr	r3, [r7, #12]
 802e04e:	2b00      	cmp	r3, #0
 802e050:	d1ea      	bne.n	802e028 <tcp_netif_ip_addr_changed_pcblist+0x24>
    }
  }
}
 802e052:	bf00      	nop
 802e054:	bf00      	nop
 802e056:	3710      	adds	r7, #16
 802e058:	46bd      	mov	sp, r7
 802e05a:	bd80      	pop	{r7, pc}
 802e05c:	08038b40 	.word	0x08038b40
 802e060:	08039274 	.word	0x08039274
 802e064:	08038b84 	.word	0x08038b84

0802e068 <tcp_netif_ip_addr_changed>:
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change or NULL if netif has been removed
 */
void
tcp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 802e068:	b580      	push	{r7, lr}
 802e06a:	b084      	sub	sp, #16
 802e06c:	af00      	add	r7, sp, #0
 802e06e:	6078      	str	r0, [r7, #4]
 802e070:	6039      	str	r1, [r7, #0]
  struct tcp_pcb_listen *lpcb;

  if (!ip_addr_isany(old_addr)) {
 802e072:	687b      	ldr	r3, [r7, #4]
 802e074:	2b00      	cmp	r3, #0
 802e076:	d02a      	beq.n	802e0ce <tcp_netif_ip_addr_changed+0x66>
 802e078:	687b      	ldr	r3, [r7, #4]
 802e07a:	681b      	ldr	r3, [r3, #0]
 802e07c:	2b00      	cmp	r3, #0
 802e07e:	d026      	beq.n	802e0ce <tcp_netif_ip_addr_changed+0x66>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_active_pcbs);
 802e080:	4b15      	ldr	r3, [pc, #84]	; (802e0d8 <tcp_netif_ip_addr_changed+0x70>)
 802e082:	681b      	ldr	r3, [r3, #0]
 802e084:	4619      	mov	r1, r3
 802e086:	6878      	ldr	r0, [r7, #4]
 802e088:	f7ff ffbc 	bl	802e004 <tcp_netif_ip_addr_changed_pcblist>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_bound_pcbs);
 802e08c:	4b13      	ldr	r3, [pc, #76]	; (802e0dc <tcp_netif_ip_addr_changed+0x74>)
 802e08e:	681b      	ldr	r3, [r3, #0]
 802e090:	4619      	mov	r1, r3
 802e092:	6878      	ldr	r0, [r7, #4]
 802e094:	f7ff ffb6 	bl	802e004 <tcp_netif_ip_addr_changed_pcblist>

    if (!ip_addr_isany(new_addr)) {
 802e098:	683b      	ldr	r3, [r7, #0]
 802e09a:	2b00      	cmp	r3, #0
 802e09c:	d017      	beq.n	802e0ce <tcp_netif_ip_addr_changed+0x66>
 802e09e:	683b      	ldr	r3, [r7, #0]
 802e0a0:	681b      	ldr	r3, [r3, #0]
 802e0a2:	2b00      	cmp	r3, #0
 802e0a4:	d013      	beq.n	802e0ce <tcp_netif_ip_addr_changed+0x66>
      /* PCB bound to current local interface address? */
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 802e0a6:	4b0e      	ldr	r3, [pc, #56]	; (802e0e0 <tcp_netif_ip_addr_changed+0x78>)
 802e0a8:	681b      	ldr	r3, [r3, #0]
 802e0aa:	60fb      	str	r3, [r7, #12]
 802e0ac:	e00c      	b.n	802e0c8 <tcp_netif_ip_addr_changed+0x60>
        /* PCB bound to current local interface address? */
        if (ip_addr_cmp(&lpcb->local_ip, old_addr)) {
 802e0ae:	68fb      	ldr	r3, [r7, #12]
 802e0b0:	681a      	ldr	r2, [r3, #0]
 802e0b2:	687b      	ldr	r3, [r7, #4]
 802e0b4:	681b      	ldr	r3, [r3, #0]
 802e0b6:	429a      	cmp	r2, r3
 802e0b8:	d103      	bne.n	802e0c2 <tcp_netif_ip_addr_changed+0x5a>
          /* The PCB is listening to the old ipaddr and
            * is set to listen to the new one instead */
          ip_addr_copy(lpcb->local_ip, *new_addr);
 802e0ba:	683b      	ldr	r3, [r7, #0]
 802e0bc:	681a      	ldr	r2, [r3, #0]
 802e0be:	68fb      	ldr	r3, [r7, #12]
 802e0c0:	601a      	str	r2, [r3, #0]
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 802e0c2:	68fb      	ldr	r3, [r7, #12]
 802e0c4:	68db      	ldr	r3, [r3, #12]
 802e0c6:	60fb      	str	r3, [r7, #12]
 802e0c8:	68fb      	ldr	r3, [r7, #12]
 802e0ca:	2b00      	cmp	r3, #0
 802e0cc:	d1ef      	bne.n	802e0ae <tcp_netif_ip_addr_changed+0x46>
        }
      }
    }
  }
}
 802e0ce:	bf00      	nop
 802e0d0:	3710      	adds	r7, #16
 802e0d2:	46bd      	mov	sp, r7
 802e0d4:	bd80      	pop	{r7, pc}
 802e0d6:	bf00      	nop
 802e0d8:	2000ee18 	.word	0x2000ee18
 802e0dc:	2000ee10 	.word	0x2000ee10
 802e0e0:	2000ee14 	.word	0x2000ee14

0802e0e4 <tcp_free_ooseq>:

#if TCP_QUEUE_OOSEQ
/* Free all ooseq pbufs (and possibly reset SACK state) */
void
tcp_free_ooseq(struct tcp_pcb *pcb)
{
 802e0e4:	b580      	push	{r7, lr}
 802e0e6:	b082      	sub	sp, #8
 802e0e8:	af00      	add	r7, sp, #0
 802e0ea:	6078      	str	r0, [r7, #4]
  if (pcb->ooseq) {
 802e0ec:	687b      	ldr	r3, [r7, #4]
 802e0ee:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 802e0f0:	2b00      	cmp	r3, #0
 802e0f2:	d007      	beq.n	802e104 <tcp_free_ooseq+0x20>
    tcp_segs_free(pcb->ooseq);
 802e0f4:	687b      	ldr	r3, [r7, #4]
 802e0f6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 802e0f8:	4618      	mov	r0, r3
 802e0fa:	f7ff fb45 	bl	802d788 <tcp_segs_free>
    pcb->ooseq = NULL;
 802e0fe:	687b      	ldr	r3, [r7, #4]
 802e100:	2200      	movs	r2, #0
 802e102:	675a      	str	r2, [r3, #116]	; 0x74
#if LWIP_TCP_SACK_OUT
    memset(pcb->rcv_sacks, 0, sizeof(pcb->rcv_sacks));
#endif /* LWIP_TCP_SACK_OUT */
  }
}
 802e104:	bf00      	nop
 802e106:	3708      	adds	r7, #8
 802e108:	46bd      	mov	sp, r7
 802e10a:	bd80      	pop	{r7, pc}

0802e10c <tcp_input>:
 * @param p received TCP segment to process (p->payload pointing to the TCP header)
 * @param inp network interface on which this segment was received
 */
void
tcp_input(struct pbuf *p, struct netif *inp)
{
 802e10c:	b590      	push	{r4, r7, lr}
 802e10e:	b08d      	sub	sp, #52	; 0x34
 802e110:	af04      	add	r7, sp, #16
 802e112:	6078      	str	r0, [r7, #4]
 802e114:	6039      	str	r1, [r7, #0]
  u8_t hdrlen_bytes;
  err_t err;

  LWIP_UNUSED_ARG(inp);
  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("tcp_input: invalid pbuf", p != NULL);
 802e116:	687b      	ldr	r3, [r7, #4]
 802e118:	2b00      	cmp	r3, #0
 802e11a:	d105      	bne.n	802e128 <tcp_input+0x1c>
 802e11c:	4b9b      	ldr	r3, [pc, #620]	; (802e38c <tcp_input+0x280>)
 802e11e:	2283      	movs	r2, #131	; 0x83
 802e120:	499b      	ldr	r1, [pc, #620]	; (802e390 <tcp_input+0x284>)
 802e122:	489c      	ldr	r0, [pc, #624]	; (802e394 <tcp_input+0x288>)
 802e124:	f008 f838 	bl	8036198 <iprintf>

  PERF_START;

  TCP_STATS_INC(tcp.recv);
 802e128:	4b9b      	ldr	r3, [pc, #620]	; (802e398 <tcp_input+0x28c>)
 802e12a:	f8b3 3092 	ldrh.w	r3, [r3, #146]	; 0x92
 802e12e:	3301      	adds	r3, #1
 802e130:	b29a      	uxth	r2, r3
 802e132:	4b99      	ldr	r3, [pc, #612]	; (802e398 <tcp_input+0x28c>)
 802e134:	f8a3 2092 	strh.w	r2, [r3, #146]	; 0x92
  MIB2_STATS_INC(mib2.tcpinsegs);

  tcphdr = (struct tcp_hdr *)p->payload;
 802e138:	687b      	ldr	r3, [r7, #4]
 802e13a:	685b      	ldr	r3, [r3, #4]
 802e13c:	4a97      	ldr	r2, [pc, #604]	; (802e39c <tcp_input+0x290>)
 802e13e:	6013      	str	r3, [r2, #0]
#if TCP_INPUT_DEBUG
  tcp_debug_print(tcphdr);
#endif

  /* Check that TCP header fits in payload */
  if (p->len < TCP_HLEN) {
 802e140:	687b      	ldr	r3, [r7, #4]
 802e142:	895b      	ldrh	r3, [r3, #10]
 802e144:	2b13      	cmp	r3, #19
 802e146:	d809      	bhi.n	802e15c <tcp_input+0x50>
    /* drop short packets */
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: short packet (%"U16_F" bytes) discarded\n", p->tot_len));
    TCP_STATS_INC(tcp.lenerr);
 802e148:	4b93      	ldr	r3, [pc, #588]	; (802e398 <tcp_input+0x28c>)
 802e14a:	f8b3 309a 	ldrh.w	r3, [r3, #154]	; 0x9a
 802e14e:	3301      	adds	r3, #1
 802e150:	b29a      	uxth	r2, r3
 802e152:	4b91      	ldr	r3, [pc, #580]	; (802e398 <tcp_input+0x28c>)
 802e154:	f8a3 209a 	strh.w	r2, [r3, #154]	; 0x9a
    goto dropped;
 802e158:	f000 bc1c 	b.w	802e994 <tcp_input+0x888>
  }

  /* Don't even process incoming broadcasts/multicasts. */
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 802e15c:	4b90      	ldr	r3, [pc, #576]	; (802e3a0 <tcp_input+0x294>)
 802e15e:	695b      	ldr	r3, [r3, #20]
 802e160:	4a8f      	ldr	r2, [pc, #572]	; (802e3a0 <tcp_input+0x294>)
 802e162:	6812      	ldr	r2, [r2, #0]
 802e164:	4611      	mov	r1, r2
 802e166:	4618      	mov	r0, r3
 802e168:	f006 fbb2 	bl	80348d0 <ip4_addr_isbroadcast_u32>
 802e16c:	4603      	mov	r3, r0
 802e16e:	2b00      	cmp	r3, #0
 802e170:	d105      	bne.n	802e17e <tcp_input+0x72>
      ip_addr_ismulticast(ip_current_dest_addr())) {
 802e172:	4b8b      	ldr	r3, [pc, #556]	; (802e3a0 <tcp_input+0x294>)
 802e174:	695b      	ldr	r3, [r3, #20]
 802e176:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 802e17a:	2be0      	cmp	r3, #224	; 0xe0
 802e17c:	d109      	bne.n	802e192 <tcp_input+0x86>
    TCP_STATS_INC(tcp.proterr);
 802e17e:	4b86      	ldr	r3, [pc, #536]	; (802e398 <tcp_input+0x28c>)
 802e180:	f8b3 30a0 	ldrh.w	r3, [r3, #160]	; 0xa0
 802e184:	3301      	adds	r3, #1
 802e186:	b29a      	uxth	r2, r3
 802e188:	4b83      	ldr	r3, [pc, #524]	; (802e398 <tcp_input+0x28c>)
 802e18a:	f8a3 20a0 	strh.w	r2, [r3, #160]	; 0xa0
    goto dropped;
 802e18e:	f000 bc01 	b.w	802e994 <tcp_input+0x888>
    }
  }
#endif /* CHECKSUM_CHECK_TCP */

  /* sanity-check header length */
  hdrlen_bytes = TCPH_HDRLEN_BYTES(tcphdr);
 802e192:	4b82      	ldr	r3, [pc, #520]	; (802e39c <tcp_input+0x290>)
 802e194:	681b      	ldr	r3, [r3, #0]
 802e196:	899b      	ldrh	r3, [r3, #12]
 802e198:	b29b      	uxth	r3, r3
 802e19a:	4618      	mov	r0, r3
 802e19c:	f7fc f9bc 	bl	802a518 <lwip_htons>
 802e1a0:	4603      	mov	r3, r0
 802e1a2:	0b1b      	lsrs	r3, r3, #12
 802e1a4:	b29b      	uxth	r3, r3
 802e1a6:	b2db      	uxtb	r3, r3
 802e1a8:	009b      	lsls	r3, r3, #2
 802e1aa:	74bb      	strb	r3, [r7, #18]
  if ((hdrlen_bytes < TCP_HLEN) || (hdrlen_bytes > p->tot_len)) {
 802e1ac:	7cbb      	ldrb	r3, [r7, #18]
 802e1ae:	2b13      	cmp	r3, #19
 802e1b0:	d905      	bls.n	802e1be <tcp_input+0xb2>
 802e1b2:	7cbb      	ldrb	r3, [r7, #18]
 802e1b4:	b29a      	uxth	r2, r3
 802e1b6:	687b      	ldr	r3, [r7, #4]
 802e1b8:	891b      	ldrh	r3, [r3, #8]
 802e1ba:	429a      	cmp	r2, r3
 802e1bc:	d908      	bls.n	802e1d0 <tcp_input+0xc4>
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: invalid header length (%"U16_F")\n", (u16_t)hdrlen_bytes));
    TCP_STATS_INC(tcp.lenerr);
 802e1be:	4b76      	ldr	r3, [pc, #472]	; (802e398 <tcp_input+0x28c>)
 802e1c0:	f8b3 309a 	ldrh.w	r3, [r3, #154]	; 0x9a
 802e1c4:	3301      	adds	r3, #1
 802e1c6:	b29a      	uxth	r2, r3
 802e1c8:	4b73      	ldr	r3, [pc, #460]	; (802e398 <tcp_input+0x28c>)
 802e1ca:	f8a3 209a 	strh.w	r2, [r3, #154]	; 0x9a
    goto dropped;
 802e1ce:	e3e1      	b.n	802e994 <tcp_input+0x888>
  }

  /* Move the payload pointer in the pbuf so that it points to the
     TCP data instead of the TCP header. */
  tcphdr_optlen = (u16_t)(hdrlen_bytes - TCP_HLEN);
 802e1d0:	7cbb      	ldrb	r3, [r7, #18]
 802e1d2:	b29b      	uxth	r3, r3
 802e1d4:	3b14      	subs	r3, #20
 802e1d6:	b29a      	uxth	r2, r3
 802e1d8:	4b72      	ldr	r3, [pc, #456]	; (802e3a4 <tcp_input+0x298>)
 802e1da:	801a      	strh	r2, [r3, #0]
  tcphdr_opt2 = NULL;
 802e1dc:	4b72      	ldr	r3, [pc, #456]	; (802e3a8 <tcp_input+0x29c>)
 802e1de:	2200      	movs	r2, #0
 802e1e0:	601a      	str	r2, [r3, #0]
  if (p->len >= hdrlen_bytes) {
 802e1e2:	687b      	ldr	r3, [r7, #4]
 802e1e4:	895a      	ldrh	r2, [r3, #10]
 802e1e6:	7cbb      	ldrb	r3, [r7, #18]
 802e1e8:	b29b      	uxth	r3, r3
 802e1ea:	429a      	cmp	r2, r3
 802e1ec:	d309      	bcc.n	802e202 <tcp_input+0xf6>
    /* all options are in the first pbuf */
    tcphdr_opt1len = tcphdr_optlen;
 802e1ee:	4b6d      	ldr	r3, [pc, #436]	; (802e3a4 <tcp_input+0x298>)
 802e1f0:	881a      	ldrh	r2, [r3, #0]
 802e1f2:	4b6e      	ldr	r3, [pc, #440]	; (802e3ac <tcp_input+0x2a0>)
 802e1f4:	801a      	strh	r2, [r3, #0]
    pbuf_remove_header(p, hdrlen_bytes); /* cannot fail */
 802e1f6:	7cbb      	ldrb	r3, [r7, #18]
 802e1f8:	4619      	mov	r1, r3
 802e1fa:	6878      	ldr	r0, [r7, #4]
 802e1fc:	f7fd fdc8 	bl	802bd90 <pbuf_remove_header>
 802e200:	e056      	b.n	802e2b0 <tcp_input+0x1a4>
  } else {
    u16_t opt2len;
    /* TCP header fits into first pbuf, options don't - data is in the next pbuf */
    /* there must be a next pbuf, due to hdrlen_bytes sanity check above */
    LWIP_ASSERT("p->next != NULL", p->next != NULL);
 802e202:	687b      	ldr	r3, [r7, #4]
 802e204:	681b      	ldr	r3, [r3, #0]
 802e206:	2b00      	cmp	r3, #0
 802e208:	d105      	bne.n	802e216 <tcp_input+0x10a>
 802e20a:	4b60      	ldr	r3, [pc, #384]	; (802e38c <tcp_input+0x280>)
 802e20c:	22c2      	movs	r2, #194	; 0xc2
 802e20e:	4968      	ldr	r1, [pc, #416]	; (802e3b0 <tcp_input+0x2a4>)
 802e210:	4860      	ldr	r0, [pc, #384]	; (802e394 <tcp_input+0x288>)
 802e212:	f007 ffc1 	bl	8036198 <iprintf>

    /* advance over the TCP header (cannot fail) */
    pbuf_remove_header(p, TCP_HLEN);
 802e216:	2114      	movs	r1, #20
 802e218:	6878      	ldr	r0, [r7, #4]
 802e21a:	f7fd fdb9 	bl	802bd90 <pbuf_remove_header>

    /* determine how long the first and second parts of the options are */
    tcphdr_opt1len = p->len;
 802e21e:	687b      	ldr	r3, [r7, #4]
 802e220:	895a      	ldrh	r2, [r3, #10]
 802e222:	4b62      	ldr	r3, [pc, #392]	; (802e3ac <tcp_input+0x2a0>)
 802e224:	801a      	strh	r2, [r3, #0]
    opt2len = (u16_t)(tcphdr_optlen - tcphdr_opt1len);
 802e226:	4b5f      	ldr	r3, [pc, #380]	; (802e3a4 <tcp_input+0x298>)
 802e228:	881a      	ldrh	r2, [r3, #0]
 802e22a:	4b60      	ldr	r3, [pc, #384]	; (802e3ac <tcp_input+0x2a0>)
 802e22c:	881b      	ldrh	r3, [r3, #0]
 802e22e:	1ad3      	subs	r3, r2, r3
 802e230:	823b      	strh	r3, [r7, #16]

    /* options continue in the next pbuf: set p to zero length and hide the
        options in the next pbuf (adjusting p->tot_len) */
    pbuf_remove_header(p, tcphdr_opt1len);
 802e232:	4b5e      	ldr	r3, [pc, #376]	; (802e3ac <tcp_input+0x2a0>)
 802e234:	881b      	ldrh	r3, [r3, #0]
 802e236:	4619      	mov	r1, r3
 802e238:	6878      	ldr	r0, [r7, #4]
 802e23a:	f7fd fda9 	bl	802bd90 <pbuf_remove_header>

    /* check that the options fit in the second pbuf */
    if (opt2len > p->next->len) {
 802e23e:	687b      	ldr	r3, [r7, #4]
 802e240:	681b      	ldr	r3, [r3, #0]
 802e242:	895b      	ldrh	r3, [r3, #10]
 802e244:	8a3a      	ldrh	r2, [r7, #16]
 802e246:	429a      	cmp	r2, r3
 802e248:	d908      	bls.n	802e25c <tcp_input+0x150>
      /* drop short packets */
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: options overflow second pbuf (%"U16_F" bytes)\n", p->next->len));
      TCP_STATS_INC(tcp.lenerr);
 802e24a:	4b53      	ldr	r3, [pc, #332]	; (802e398 <tcp_input+0x28c>)
 802e24c:	f8b3 309a 	ldrh.w	r3, [r3, #154]	; 0x9a
 802e250:	3301      	adds	r3, #1
 802e252:	b29a      	uxth	r2, r3
 802e254:	4b50      	ldr	r3, [pc, #320]	; (802e398 <tcp_input+0x28c>)
 802e256:	f8a3 209a 	strh.w	r2, [r3, #154]	; 0x9a
      goto dropped;
 802e25a:	e39b      	b.n	802e994 <tcp_input+0x888>
    }

    /* remember the pointer to the second part of the options */
    tcphdr_opt2 = (u8_t *)p->next->payload;
 802e25c:	687b      	ldr	r3, [r7, #4]
 802e25e:	681b      	ldr	r3, [r3, #0]
 802e260:	685b      	ldr	r3, [r3, #4]
 802e262:	4a51      	ldr	r2, [pc, #324]	; (802e3a8 <tcp_input+0x29c>)
 802e264:	6013      	str	r3, [r2, #0]

    /* advance p->next to point after the options, and manually
        adjust p->tot_len to keep it consistent with the changed p->next */
    pbuf_remove_header(p->next, opt2len);
 802e266:	687b      	ldr	r3, [r7, #4]
 802e268:	681b      	ldr	r3, [r3, #0]
 802e26a:	8a3a      	ldrh	r2, [r7, #16]
 802e26c:	4611      	mov	r1, r2
 802e26e:	4618      	mov	r0, r3
 802e270:	f7fd fd8e 	bl	802bd90 <pbuf_remove_header>
    p->tot_len = (u16_t)(p->tot_len - opt2len);
 802e274:	687b      	ldr	r3, [r7, #4]
 802e276:	891a      	ldrh	r2, [r3, #8]
 802e278:	8a3b      	ldrh	r3, [r7, #16]
 802e27a:	1ad3      	subs	r3, r2, r3
 802e27c:	b29a      	uxth	r2, r3
 802e27e:	687b      	ldr	r3, [r7, #4]
 802e280:	811a      	strh	r2, [r3, #8]

    LWIP_ASSERT("p->len == 0", p->len == 0);
 802e282:	687b      	ldr	r3, [r7, #4]
 802e284:	895b      	ldrh	r3, [r3, #10]
 802e286:	2b00      	cmp	r3, #0
 802e288:	d005      	beq.n	802e296 <tcp_input+0x18a>
 802e28a:	4b40      	ldr	r3, [pc, #256]	; (802e38c <tcp_input+0x280>)
 802e28c:	22df      	movs	r2, #223	; 0xdf
 802e28e:	4949      	ldr	r1, [pc, #292]	; (802e3b4 <tcp_input+0x2a8>)
 802e290:	4840      	ldr	r0, [pc, #256]	; (802e394 <tcp_input+0x288>)
 802e292:	f007 ff81 	bl	8036198 <iprintf>
    LWIP_ASSERT("p->tot_len == p->next->tot_len", p->tot_len == p->next->tot_len);
 802e296:	687b      	ldr	r3, [r7, #4]
 802e298:	891a      	ldrh	r2, [r3, #8]
 802e29a:	687b      	ldr	r3, [r7, #4]
 802e29c:	681b      	ldr	r3, [r3, #0]
 802e29e:	891b      	ldrh	r3, [r3, #8]
 802e2a0:	429a      	cmp	r2, r3
 802e2a2:	d005      	beq.n	802e2b0 <tcp_input+0x1a4>
 802e2a4:	4b39      	ldr	r3, [pc, #228]	; (802e38c <tcp_input+0x280>)
 802e2a6:	22e0      	movs	r2, #224	; 0xe0
 802e2a8:	4943      	ldr	r1, [pc, #268]	; (802e3b8 <tcp_input+0x2ac>)
 802e2aa:	483a      	ldr	r0, [pc, #232]	; (802e394 <tcp_input+0x288>)
 802e2ac:	f007 ff74 	bl	8036198 <iprintf>
  }

  /* Convert fields in TCP header to host byte order. */
  tcphdr->src = lwip_ntohs(tcphdr->src);
 802e2b0:	4b3a      	ldr	r3, [pc, #232]	; (802e39c <tcp_input+0x290>)
 802e2b2:	681b      	ldr	r3, [r3, #0]
 802e2b4:	881b      	ldrh	r3, [r3, #0]
 802e2b6:	b29b      	uxth	r3, r3
 802e2b8:	4a38      	ldr	r2, [pc, #224]	; (802e39c <tcp_input+0x290>)
 802e2ba:	6814      	ldr	r4, [r2, #0]
 802e2bc:	4618      	mov	r0, r3
 802e2be:	f7fc f92b 	bl	802a518 <lwip_htons>
 802e2c2:	4603      	mov	r3, r0
 802e2c4:	8023      	strh	r3, [r4, #0]
  tcphdr->dest = lwip_ntohs(tcphdr->dest);
 802e2c6:	4b35      	ldr	r3, [pc, #212]	; (802e39c <tcp_input+0x290>)
 802e2c8:	681b      	ldr	r3, [r3, #0]
 802e2ca:	885b      	ldrh	r3, [r3, #2]
 802e2cc:	b29b      	uxth	r3, r3
 802e2ce:	4a33      	ldr	r2, [pc, #204]	; (802e39c <tcp_input+0x290>)
 802e2d0:	6814      	ldr	r4, [r2, #0]
 802e2d2:	4618      	mov	r0, r3
 802e2d4:	f7fc f920 	bl	802a518 <lwip_htons>
 802e2d8:	4603      	mov	r3, r0
 802e2da:	8063      	strh	r3, [r4, #2]
  seqno = tcphdr->seqno = lwip_ntohl(tcphdr->seqno);
 802e2dc:	4b2f      	ldr	r3, [pc, #188]	; (802e39c <tcp_input+0x290>)
 802e2de:	681b      	ldr	r3, [r3, #0]
 802e2e0:	685b      	ldr	r3, [r3, #4]
 802e2e2:	4a2e      	ldr	r2, [pc, #184]	; (802e39c <tcp_input+0x290>)
 802e2e4:	6814      	ldr	r4, [r2, #0]
 802e2e6:	4618      	mov	r0, r3
 802e2e8:	f7fc f92b 	bl	802a542 <lwip_htonl>
 802e2ec:	4603      	mov	r3, r0
 802e2ee:	6063      	str	r3, [r4, #4]
 802e2f0:	6863      	ldr	r3, [r4, #4]
 802e2f2:	4a32      	ldr	r2, [pc, #200]	; (802e3bc <tcp_input+0x2b0>)
 802e2f4:	6013      	str	r3, [r2, #0]
  ackno = tcphdr->ackno = lwip_ntohl(tcphdr->ackno);
 802e2f6:	4b29      	ldr	r3, [pc, #164]	; (802e39c <tcp_input+0x290>)
 802e2f8:	681b      	ldr	r3, [r3, #0]
 802e2fa:	689b      	ldr	r3, [r3, #8]
 802e2fc:	4a27      	ldr	r2, [pc, #156]	; (802e39c <tcp_input+0x290>)
 802e2fe:	6814      	ldr	r4, [r2, #0]
 802e300:	4618      	mov	r0, r3
 802e302:	f7fc f91e 	bl	802a542 <lwip_htonl>
 802e306:	4603      	mov	r3, r0
 802e308:	60a3      	str	r3, [r4, #8]
 802e30a:	68a3      	ldr	r3, [r4, #8]
 802e30c:	4a2c      	ldr	r2, [pc, #176]	; (802e3c0 <tcp_input+0x2b4>)
 802e30e:	6013      	str	r3, [r2, #0]
  tcphdr->wnd = lwip_ntohs(tcphdr->wnd);
 802e310:	4b22      	ldr	r3, [pc, #136]	; (802e39c <tcp_input+0x290>)
 802e312:	681b      	ldr	r3, [r3, #0]
 802e314:	89db      	ldrh	r3, [r3, #14]
 802e316:	b29b      	uxth	r3, r3
 802e318:	4a20      	ldr	r2, [pc, #128]	; (802e39c <tcp_input+0x290>)
 802e31a:	6814      	ldr	r4, [r2, #0]
 802e31c:	4618      	mov	r0, r3
 802e31e:	f7fc f8fb 	bl	802a518 <lwip_htons>
 802e322:	4603      	mov	r3, r0
 802e324:	81e3      	strh	r3, [r4, #14]

  flags = TCPH_FLAGS(tcphdr);
 802e326:	4b1d      	ldr	r3, [pc, #116]	; (802e39c <tcp_input+0x290>)
 802e328:	681b      	ldr	r3, [r3, #0]
 802e32a:	899b      	ldrh	r3, [r3, #12]
 802e32c:	b29b      	uxth	r3, r3
 802e32e:	4618      	mov	r0, r3
 802e330:	f7fc f8f2 	bl	802a518 <lwip_htons>
 802e334:	4603      	mov	r3, r0
 802e336:	b2db      	uxtb	r3, r3
 802e338:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 802e33c:	b2da      	uxtb	r2, r3
 802e33e:	4b21      	ldr	r3, [pc, #132]	; (802e3c4 <tcp_input+0x2b8>)
 802e340:	701a      	strb	r2, [r3, #0]
  tcplen = p->tot_len;
 802e342:	687b      	ldr	r3, [r7, #4]
 802e344:	891a      	ldrh	r2, [r3, #8]
 802e346:	4b20      	ldr	r3, [pc, #128]	; (802e3c8 <tcp_input+0x2bc>)
 802e348:	801a      	strh	r2, [r3, #0]
  if (flags & (TCP_FIN | TCP_SYN)) {
 802e34a:	4b1e      	ldr	r3, [pc, #120]	; (802e3c4 <tcp_input+0x2b8>)
 802e34c:	781b      	ldrb	r3, [r3, #0]
 802e34e:	f003 0303 	and.w	r3, r3, #3
 802e352:	2b00      	cmp	r3, #0
 802e354:	d014      	beq.n	802e380 <tcp_input+0x274>
    tcplen++;
 802e356:	4b1c      	ldr	r3, [pc, #112]	; (802e3c8 <tcp_input+0x2bc>)
 802e358:	881b      	ldrh	r3, [r3, #0]
 802e35a:	3301      	adds	r3, #1
 802e35c:	b29a      	uxth	r2, r3
 802e35e:	4b1a      	ldr	r3, [pc, #104]	; (802e3c8 <tcp_input+0x2bc>)
 802e360:	801a      	strh	r2, [r3, #0]
    if (tcplen < p->tot_len) {
 802e362:	687b      	ldr	r3, [r7, #4]
 802e364:	891a      	ldrh	r2, [r3, #8]
 802e366:	4b18      	ldr	r3, [pc, #96]	; (802e3c8 <tcp_input+0x2bc>)
 802e368:	881b      	ldrh	r3, [r3, #0]
 802e36a:	429a      	cmp	r2, r3
 802e36c:	d908      	bls.n	802e380 <tcp_input+0x274>
      /* u16_t overflow, cannot handle this */
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: length u16_t overflow, cannot handle this\n"));
      TCP_STATS_INC(tcp.lenerr);
 802e36e:	4b0a      	ldr	r3, [pc, #40]	; (802e398 <tcp_input+0x28c>)
 802e370:	f8b3 309a 	ldrh.w	r3, [r3, #154]	; 0x9a
 802e374:	3301      	adds	r3, #1
 802e376:	b29a      	uxth	r2, r3
 802e378:	4b07      	ldr	r3, [pc, #28]	; (802e398 <tcp_input+0x28c>)
 802e37a:	f8a3 209a 	strh.w	r2, [r3, #154]	; 0x9a
      goto dropped;
 802e37e:	e309      	b.n	802e994 <tcp_input+0x888>
    }
  }

  /* Demultiplex an incoming segment. First, we check if it is destined
     for an active connection. */
  prev = NULL;
 802e380:	2300      	movs	r3, #0
 802e382:	61bb      	str	r3, [r7, #24]

  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 802e384:	4b11      	ldr	r3, [pc, #68]	; (802e3cc <tcp_input+0x2c0>)
 802e386:	681b      	ldr	r3, [r3, #0]
 802e388:	61fb      	str	r3, [r7, #28]
 802e38a:	e0a1      	b.n	802e4d0 <tcp_input+0x3c4>
 802e38c:	080392a8 	.word	0x080392a8
 802e390:	080392dc 	.word	0x080392dc
 802e394:	080392f4 	.word	0x080392f4
 802e398:	2000ed10 	.word	0x2000ed10
 802e39c:	2000ee34 	.word	0x2000ee34
 802e3a0:	2000b28c 	.word	0x2000b28c
 802e3a4:	2000ee38 	.word	0x2000ee38
 802e3a8:	2000ee3c 	.word	0x2000ee3c
 802e3ac:	2000ee3a 	.word	0x2000ee3a
 802e3b0:	0803931c 	.word	0x0803931c
 802e3b4:	0803932c 	.word	0x0803932c
 802e3b8:	08039338 	.word	0x08039338
 802e3bc:	2000ee44 	.word	0x2000ee44
 802e3c0:	2000ee48 	.word	0x2000ee48
 802e3c4:	2000ee50 	.word	0x2000ee50
 802e3c8:	2000ee4e 	.word	0x2000ee4e
 802e3cc:	2000ee18 	.word	0x2000ee18
    LWIP_ASSERT("tcp_input: active pcb->state != CLOSED", pcb->state != CLOSED);
 802e3d0:	69fb      	ldr	r3, [r7, #28]
 802e3d2:	7d1b      	ldrb	r3, [r3, #20]
 802e3d4:	2b00      	cmp	r3, #0
 802e3d6:	d105      	bne.n	802e3e4 <tcp_input+0x2d8>
 802e3d8:	4b8a      	ldr	r3, [pc, #552]	; (802e604 <tcp_input+0x4f8>)
 802e3da:	22fb      	movs	r2, #251	; 0xfb
 802e3dc:	498a      	ldr	r1, [pc, #552]	; (802e608 <tcp_input+0x4fc>)
 802e3de:	488b      	ldr	r0, [pc, #556]	; (802e60c <tcp_input+0x500>)
 802e3e0:	f007 feda 	bl	8036198 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != TIME-WAIT", pcb->state != TIME_WAIT);
 802e3e4:	69fb      	ldr	r3, [r7, #28]
 802e3e6:	7d1b      	ldrb	r3, [r3, #20]
 802e3e8:	2b0a      	cmp	r3, #10
 802e3ea:	d105      	bne.n	802e3f8 <tcp_input+0x2ec>
 802e3ec:	4b85      	ldr	r3, [pc, #532]	; (802e604 <tcp_input+0x4f8>)
 802e3ee:	22fc      	movs	r2, #252	; 0xfc
 802e3f0:	4987      	ldr	r1, [pc, #540]	; (802e610 <tcp_input+0x504>)
 802e3f2:	4886      	ldr	r0, [pc, #536]	; (802e60c <tcp_input+0x500>)
 802e3f4:	f007 fed0 	bl	8036198 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != LISTEN", pcb->state != LISTEN);
 802e3f8:	69fb      	ldr	r3, [r7, #28]
 802e3fa:	7d1b      	ldrb	r3, [r3, #20]
 802e3fc:	2b01      	cmp	r3, #1
 802e3fe:	d105      	bne.n	802e40c <tcp_input+0x300>
 802e400:	4b80      	ldr	r3, [pc, #512]	; (802e604 <tcp_input+0x4f8>)
 802e402:	22fd      	movs	r2, #253	; 0xfd
 802e404:	4983      	ldr	r1, [pc, #524]	; (802e614 <tcp_input+0x508>)
 802e406:	4881      	ldr	r0, [pc, #516]	; (802e60c <tcp_input+0x500>)
 802e408:	f007 fec6 	bl	8036198 <iprintf>

    /* check if PCB is bound to specific netif */
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 802e40c:	69fb      	ldr	r3, [r7, #28]
 802e40e:	7a1b      	ldrb	r3, [r3, #8]
 802e410:	2b00      	cmp	r3, #0
 802e412:	d00c      	beq.n	802e42e <tcp_input+0x322>
        (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 802e414:	69fb      	ldr	r3, [r7, #28]
 802e416:	7a1a      	ldrb	r2, [r3, #8]
 802e418:	4b7f      	ldr	r3, [pc, #508]	; (802e618 <tcp_input+0x50c>)
 802e41a:	685b      	ldr	r3, [r3, #4]
 802e41c:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 802e420:	3301      	adds	r3, #1
 802e422:	b2db      	uxtb	r3, r3
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 802e424:	429a      	cmp	r2, r3
 802e426:	d002      	beq.n	802e42e <tcp_input+0x322>
      prev = pcb;
 802e428:	69fb      	ldr	r3, [r7, #28]
 802e42a:	61bb      	str	r3, [r7, #24]
      continue;
 802e42c:	e04d      	b.n	802e4ca <tcp_input+0x3be>
    }

    if (pcb->remote_port == tcphdr->src &&
 802e42e:	69fb      	ldr	r3, [r7, #28]
 802e430:	8b1a      	ldrh	r2, [r3, #24]
 802e432:	4b7a      	ldr	r3, [pc, #488]	; (802e61c <tcp_input+0x510>)
 802e434:	681b      	ldr	r3, [r3, #0]
 802e436:	881b      	ldrh	r3, [r3, #0]
 802e438:	b29b      	uxth	r3, r3
 802e43a:	429a      	cmp	r2, r3
 802e43c:	d143      	bne.n	802e4c6 <tcp_input+0x3ba>
        pcb->local_port == tcphdr->dest &&
 802e43e:	69fb      	ldr	r3, [r7, #28]
 802e440:	8ada      	ldrh	r2, [r3, #22]
 802e442:	4b76      	ldr	r3, [pc, #472]	; (802e61c <tcp_input+0x510>)
 802e444:	681b      	ldr	r3, [r3, #0]
 802e446:	885b      	ldrh	r3, [r3, #2]
 802e448:	b29b      	uxth	r3, r3
    if (pcb->remote_port == tcphdr->src &&
 802e44a:	429a      	cmp	r2, r3
 802e44c:	d13b      	bne.n	802e4c6 <tcp_input+0x3ba>
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 802e44e:	69fb      	ldr	r3, [r7, #28]
 802e450:	685a      	ldr	r2, [r3, #4]
 802e452:	4b71      	ldr	r3, [pc, #452]	; (802e618 <tcp_input+0x50c>)
 802e454:	691b      	ldr	r3, [r3, #16]
        pcb->local_port == tcphdr->dest &&
 802e456:	429a      	cmp	r2, r3
 802e458:	d135      	bne.n	802e4c6 <tcp_input+0x3ba>
        ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 802e45a:	69fb      	ldr	r3, [r7, #28]
 802e45c:	681a      	ldr	r2, [r3, #0]
 802e45e:	4b6e      	ldr	r3, [pc, #440]	; (802e618 <tcp_input+0x50c>)
 802e460:	695b      	ldr	r3, [r3, #20]
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 802e462:	429a      	cmp	r2, r3
 802e464:	d12f      	bne.n	802e4c6 <tcp_input+0x3ba>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      LWIP_ASSERT("tcp_input: pcb->next != pcb (before cache)", pcb->next != pcb);
 802e466:	69fb      	ldr	r3, [r7, #28]
 802e468:	68db      	ldr	r3, [r3, #12]
 802e46a:	69fa      	ldr	r2, [r7, #28]
 802e46c:	429a      	cmp	r2, r3
 802e46e:	d106      	bne.n	802e47e <tcp_input+0x372>
 802e470:	4b64      	ldr	r3, [pc, #400]	; (802e604 <tcp_input+0x4f8>)
 802e472:	f240 120d 	movw	r2, #269	; 0x10d
 802e476:	496a      	ldr	r1, [pc, #424]	; (802e620 <tcp_input+0x514>)
 802e478:	4864      	ldr	r0, [pc, #400]	; (802e60c <tcp_input+0x500>)
 802e47a:	f007 fe8d 	bl	8036198 <iprintf>
      if (prev != NULL) {
 802e47e:	69bb      	ldr	r3, [r7, #24]
 802e480:	2b00      	cmp	r3, #0
 802e482:	d00b      	beq.n	802e49c <tcp_input+0x390>
        prev->next = pcb->next;
 802e484:	69fb      	ldr	r3, [r7, #28]
 802e486:	68da      	ldr	r2, [r3, #12]
 802e488:	69bb      	ldr	r3, [r7, #24]
 802e48a:	60da      	str	r2, [r3, #12]
        pcb->next = tcp_active_pcbs;
 802e48c:	4b65      	ldr	r3, [pc, #404]	; (802e624 <tcp_input+0x518>)
 802e48e:	681a      	ldr	r2, [r3, #0]
 802e490:	69fb      	ldr	r3, [r7, #28]
 802e492:	60da      	str	r2, [r3, #12]
        tcp_active_pcbs = pcb;
 802e494:	4a63      	ldr	r2, [pc, #396]	; (802e624 <tcp_input+0x518>)
 802e496:	69fb      	ldr	r3, [r7, #28]
 802e498:	6013      	str	r3, [r2, #0]
 802e49a:	e007      	b.n	802e4ac <tcp_input+0x3a0>
      } else {
        TCP_STATS_INC(tcp.cachehit);
 802e49c:	4b62      	ldr	r3, [pc, #392]	; (802e628 <tcp_input+0x51c>)
 802e49e:	f8b3 30a6 	ldrh.w	r3, [r3, #166]	; 0xa6
 802e4a2:	3301      	adds	r3, #1
 802e4a4:	b29a      	uxth	r2, r3
 802e4a6:	4b60      	ldr	r3, [pc, #384]	; (802e628 <tcp_input+0x51c>)
 802e4a8:	f8a3 20a6 	strh.w	r2, [r3, #166]	; 0xa6
      }
      LWIP_ASSERT("tcp_input: pcb->next != pcb (after cache)", pcb->next != pcb);
 802e4ac:	69fb      	ldr	r3, [r7, #28]
 802e4ae:	68db      	ldr	r3, [r3, #12]
 802e4b0:	69fa      	ldr	r2, [r7, #28]
 802e4b2:	429a      	cmp	r2, r3
 802e4b4:	d111      	bne.n	802e4da <tcp_input+0x3ce>
 802e4b6:	4b53      	ldr	r3, [pc, #332]	; (802e604 <tcp_input+0x4f8>)
 802e4b8:	f240 1215 	movw	r2, #277	; 0x115
 802e4bc:	495b      	ldr	r1, [pc, #364]	; (802e62c <tcp_input+0x520>)
 802e4be:	4853      	ldr	r0, [pc, #332]	; (802e60c <tcp_input+0x500>)
 802e4c0:	f007 fe6a 	bl	8036198 <iprintf>
      break;
 802e4c4:	e009      	b.n	802e4da <tcp_input+0x3ce>
    }
    prev = pcb;
 802e4c6:	69fb      	ldr	r3, [r7, #28]
 802e4c8:	61bb      	str	r3, [r7, #24]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 802e4ca:	69fb      	ldr	r3, [r7, #28]
 802e4cc:	68db      	ldr	r3, [r3, #12]
 802e4ce:	61fb      	str	r3, [r7, #28]
 802e4d0:	69fb      	ldr	r3, [r7, #28]
 802e4d2:	2b00      	cmp	r3, #0
 802e4d4:	f47f af7c 	bne.w	802e3d0 <tcp_input+0x2c4>
 802e4d8:	e000      	b.n	802e4dc <tcp_input+0x3d0>
      break;
 802e4da:	bf00      	nop
  }

  if (pcb == NULL) {
 802e4dc:	69fb      	ldr	r3, [r7, #28]
 802e4de:	2b00      	cmp	r3, #0
 802e4e0:	f040 80bb 	bne.w	802e65a <tcp_input+0x54e>
    /* If it did not go to an active connection, we check the connections
       in the TIME-WAIT state. */
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 802e4e4:	4b52      	ldr	r3, [pc, #328]	; (802e630 <tcp_input+0x524>)
 802e4e6:	681b      	ldr	r3, [r3, #0]
 802e4e8:	61fb      	str	r3, [r7, #28]
 802e4ea:	e03f      	b.n	802e56c <tcp_input+0x460>
      LWIP_ASSERT("tcp_input: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 802e4ec:	69fb      	ldr	r3, [r7, #28]
 802e4ee:	7d1b      	ldrb	r3, [r3, #20]
 802e4f0:	2b0a      	cmp	r3, #10
 802e4f2:	d006      	beq.n	802e502 <tcp_input+0x3f6>
 802e4f4:	4b43      	ldr	r3, [pc, #268]	; (802e604 <tcp_input+0x4f8>)
 802e4f6:	f240 121f 	movw	r2, #287	; 0x11f
 802e4fa:	494e      	ldr	r1, [pc, #312]	; (802e634 <tcp_input+0x528>)
 802e4fc:	4843      	ldr	r0, [pc, #268]	; (802e60c <tcp_input+0x500>)
 802e4fe:	f007 fe4b 	bl	8036198 <iprintf>

      /* check if PCB is bound to specific netif */
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 802e502:	69fb      	ldr	r3, [r7, #28]
 802e504:	7a1b      	ldrb	r3, [r3, #8]
 802e506:	2b00      	cmp	r3, #0
 802e508:	d009      	beq.n	802e51e <tcp_input+0x412>
          (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 802e50a:	69fb      	ldr	r3, [r7, #28]
 802e50c:	7a1a      	ldrb	r2, [r3, #8]
 802e50e:	4b42      	ldr	r3, [pc, #264]	; (802e618 <tcp_input+0x50c>)
 802e510:	685b      	ldr	r3, [r3, #4]
 802e512:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 802e516:	3301      	adds	r3, #1
 802e518:	b2db      	uxtb	r3, r3
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 802e51a:	429a      	cmp	r2, r3
 802e51c:	d122      	bne.n	802e564 <tcp_input+0x458>
        continue;
      }

      if (pcb->remote_port == tcphdr->src &&
 802e51e:	69fb      	ldr	r3, [r7, #28]
 802e520:	8b1a      	ldrh	r2, [r3, #24]
 802e522:	4b3e      	ldr	r3, [pc, #248]	; (802e61c <tcp_input+0x510>)
 802e524:	681b      	ldr	r3, [r3, #0]
 802e526:	881b      	ldrh	r3, [r3, #0]
 802e528:	b29b      	uxth	r3, r3
 802e52a:	429a      	cmp	r2, r3
 802e52c:	d11b      	bne.n	802e566 <tcp_input+0x45a>
          pcb->local_port == tcphdr->dest &&
 802e52e:	69fb      	ldr	r3, [r7, #28]
 802e530:	8ada      	ldrh	r2, [r3, #22]
 802e532:	4b3a      	ldr	r3, [pc, #232]	; (802e61c <tcp_input+0x510>)
 802e534:	681b      	ldr	r3, [r3, #0]
 802e536:	885b      	ldrh	r3, [r3, #2]
 802e538:	b29b      	uxth	r3, r3
      if (pcb->remote_port == tcphdr->src &&
 802e53a:	429a      	cmp	r2, r3
 802e53c:	d113      	bne.n	802e566 <tcp_input+0x45a>
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 802e53e:	69fb      	ldr	r3, [r7, #28]
 802e540:	685a      	ldr	r2, [r3, #4]
 802e542:	4b35      	ldr	r3, [pc, #212]	; (802e618 <tcp_input+0x50c>)
 802e544:	691b      	ldr	r3, [r3, #16]
          pcb->local_port == tcphdr->dest &&
 802e546:	429a      	cmp	r2, r3
 802e548:	d10d      	bne.n	802e566 <tcp_input+0x45a>
          ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 802e54a:	69fb      	ldr	r3, [r7, #28]
 802e54c:	681a      	ldr	r2, [r3, #0]
 802e54e:	4b32      	ldr	r3, [pc, #200]	; (802e618 <tcp_input+0x50c>)
 802e550:	695b      	ldr	r3, [r3, #20]
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 802e552:	429a      	cmp	r2, r3
 802e554:	d107      	bne.n	802e566 <tcp_input+0x45a>
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
        if (LWIP_HOOK_TCP_INPACKET_PCB(pcb, tcphdr, tcphdr_optlen, tcphdr_opt1len,
                                       tcphdr_opt2, p) == ERR_OK)
#endif
        {
          tcp_timewait_input(pcb);
 802e556:	69f8      	ldr	r0, [r7, #28]
 802e558:	f000 fb88 	bl	802ec6c <tcp_timewait_input>
        }
        pbuf_free(p);
 802e55c:	6878      	ldr	r0, [r7, #4]
 802e55e:	f7fd fc9d 	bl	802be9c <pbuf_free>
        return;
 802e562:	e224      	b.n	802e9ae <tcp_input+0x8a2>
        continue;
 802e564:	bf00      	nop
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 802e566:	69fb      	ldr	r3, [r7, #28]
 802e568:	68db      	ldr	r3, [r3, #12]
 802e56a:	61fb      	str	r3, [r7, #28]
 802e56c:	69fb      	ldr	r3, [r7, #28]
 802e56e:	2b00      	cmp	r3, #0
 802e570:	d1bc      	bne.n	802e4ec <tcp_input+0x3e0>
      }
    }

    /* Finally, if we still did not get a match, we check all PCBs that
       are LISTENing for incoming connections. */
    prev = NULL;
 802e572:	2300      	movs	r3, #0
 802e574:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 802e576:	4b30      	ldr	r3, [pc, #192]	; (802e638 <tcp_input+0x52c>)
 802e578:	681b      	ldr	r3, [r3, #0]
 802e57a:	617b      	str	r3, [r7, #20]
 802e57c:	e02a      	b.n	802e5d4 <tcp_input+0x4c8>
      /* check if PCB is bound to specific netif */
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 802e57e:	697b      	ldr	r3, [r7, #20]
 802e580:	7a1b      	ldrb	r3, [r3, #8]
 802e582:	2b00      	cmp	r3, #0
 802e584:	d00c      	beq.n	802e5a0 <tcp_input+0x494>
          (lpcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 802e586:	697b      	ldr	r3, [r7, #20]
 802e588:	7a1a      	ldrb	r2, [r3, #8]
 802e58a:	4b23      	ldr	r3, [pc, #140]	; (802e618 <tcp_input+0x50c>)
 802e58c:	685b      	ldr	r3, [r3, #4]
 802e58e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 802e592:	3301      	adds	r3, #1
 802e594:	b2db      	uxtb	r3, r3
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 802e596:	429a      	cmp	r2, r3
 802e598:	d002      	beq.n	802e5a0 <tcp_input+0x494>
        prev = (struct tcp_pcb *)lpcb;
 802e59a:	697b      	ldr	r3, [r7, #20]
 802e59c:	61bb      	str	r3, [r7, #24]
        continue;
 802e59e:	e016      	b.n	802e5ce <tcp_input+0x4c2>
      }

      if (lpcb->local_port == tcphdr->dest) {
 802e5a0:	697b      	ldr	r3, [r7, #20]
 802e5a2:	8ada      	ldrh	r2, [r3, #22]
 802e5a4:	4b1d      	ldr	r3, [pc, #116]	; (802e61c <tcp_input+0x510>)
 802e5a6:	681b      	ldr	r3, [r3, #0]
 802e5a8:	885b      	ldrh	r3, [r3, #2]
 802e5aa:	b29b      	uxth	r3, r3
 802e5ac:	429a      	cmp	r2, r3
 802e5ae:	d10c      	bne.n	802e5ca <tcp_input+0x4be>
          lpcb_prev = prev;
#else /* SO_REUSE */
          break;
#endif /* SO_REUSE */
        } else if (IP_ADDR_PCB_VERSION_MATCH_EXACT(lpcb, ip_current_dest_addr())) {
          if (ip_addr_cmp(&lpcb->local_ip, ip_current_dest_addr())) {
 802e5b0:	697b      	ldr	r3, [r7, #20]
 802e5b2:	681a      	ldr	r2, [r3, #0]
 802e5b4:	4b18      	ldr	r3, [pc, #96]	; (802e618 <tcp_input+0x50c>)
 802e5b6:	695b      	ldr	r3, [r3, #20]
 802e5b8:	429a      	cmp	r2, r3
 802e5ba:	d00f      	beq.n	802e5dc <tcp_input+0x4d0>
            /* found an exact match */
            break;
          } else if (ip_addr_isany(&lpcb->local_ip)) {
 802e5bc:	697b      	ldr	r3, [r7, #20]
 802e5be:	2b00      	cmp	r3, #0
 802e5c0:	d00d      	beq.n	802e5de <tcp_input+0x4d2>
 802e5c2:	697b      	ldr	r3, [r7, #20]
 802e5c4:	681b      	ldr	r3, [r3, #0]
 802e5c6:	2b00      	cmp	r3, #0
 802e5c8:	d009      	beq.n	802e5de <tcp_input+0x4d2>
            break;
#endif /* SO_REUSE */
          }
        }
      }
      prev = (struct tcp_pcb *)lpcb;
 802e5ca:	697b      	ldr	r3, [r7, #20]
 802e5cc:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 802e5ce:	697b      	ldr	r3, [r7, #20]
 802e5d0:	68db      	ldr	r3, [r3, #12]
 802e5d2:	617b      	str	r3, [r7, #20]
 802e5d4:	697b      	ldr	r3, [r7, #20]
 802e5d6:	2b00      	cmp	r3, #0
 802e5d8:	d1d1      	bne.n	802e57e <tcp_input+0x472>
 802e5da:	e000      	b.n	802e5de <tcp_input+0x4d2>
            break;
 802e5dc:	bf00      	nop
      /* only pass to ANY if no specific local IP has been found */
      lpcb = lpcb_any;
      prev = lpcb_prev;
    }
#endif /* SO_REUSE */
    if (lpcb != NULL) {
 802e5de:	697b      	ldr	r3, [r7, #20]
 802e5e0:	2b00      	cmp	r3, #0
 802e5e2:	d03a      	beq.n	802e65a <tcp_input+0x54e>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      if (prev != NULL) {
 802e5e4:	69bb      	ldr	r3, [r7, #24]
 802e5e6:	2b00      	cmp	r3, #0
 802e5e8:	d028      	beq.n	802e63c <tcp_input+0x530>
        ((struct tcp_pcb_listen *)prev)->next = lpcb->next;
 802e5ea:	697b      	ldr	r3, [r7, #20]
 802e5ec:	68da      	ldr	r2, [r3, #12]
 802e5ee:	69bb      	ldr	r3, [r7, #24]
 802e5f0:	60da      	str	r2, [r3, #12]
        /* our successor is the remainder of the listening list */
        lpcb->next = tcp_listen_pcbs.listen_pcbs;
 802e5f2:	4b11      	ldr	r3, [pc, #68]	; (802e638 <tcp_input+0x52c>)
 802e5f4:	681a      	ldr	r2, [r3, #0]
 802e5f6:	697b      	ldr	r3, [r7, #20]
 802e5f8:	60da      	str	r2, [r3, #12]
        /* put this listening pcb at the head of the listening list */
        tcp_listen_pcbs.listen_pcbs = lpcb;
 802e5fa:	4a0f      	ldr	r2, [pc, #60]	; (802e638 <tcp_input+0x52c>)
 802e5fc:	697b      	ldr	r3, [r7, #20]
 802e5fe:	6013      	str	r3, [r2, #0]
 802e600:	e024      	b.n	802e64c <tcp_input+0x540>
 802e602:	bf00      	nop
 802e604:	080392a8 	.word	0x080392a8
 802e608:	08039358 	.word	0x08039358
 802e60c:	080392f4 	.word	0x080392f4
 802e610:	08039380 	.word	0x08039380
 802e614:	080393ac 	.word	0x080393ac
 802e618:	2000b28c 	.word	0x2000b28c
 802e61c:	2000ee34 	.word	0x2000ee34
 802e620:	080393d4 	.word	0x080393d4
 802e624:	2000ee18 	.word	0x2000ee18
 802e628:	2000ed10 	.word	0x2000ed10
 802e62c:	08039400 	.word	0x08039400
 802e630:	2000ee1c 	.word	0x2000ee1c
 802e634:	0803942c 	.word	0x0803942c
 802e638:	2000ee14 	.word	0x2000ee14
      } else {
        TCP_STATS_INC(tcp.cachehit);
 802e63c:	4ba0      	ldr	r3, [pc, #640]	; (802e8c0 <tcp_input+0x7b4>)
 802e63e:	f8b3 30a6 	ldrh.w	r3, [r3, #166]	; 0xa6
 802e642:	3301      	adds	r3, #1
 802e644:	b29a      	uxth	r2, r3
 802e646:	4b9e      	ldr	r3, [pc, #632]	; (802e8c0 <tcp_input+0x7b4>)
 802e648:	f8a3 20a6 	strh.w	r2, [r3, #166]	; 0xa6
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
      if (LWIP_HOOK_TCP_INPACKET_PCB((struct tcp_pcb *)lpcb, tcphdr, tcphdr_optlen,
                                     tcphdr_opt1len, tcphdr_opt2, p) == ERR_OK)
#endif
      {
        tcp_listen_input(lpcb);
 802e64c:	6978      	ldr	r0, [r7, #20]
 802e64e:	f000 fa05 	bl	802ea5c <tcp_listen_input>
      }
      pbuf_free(p);
 802e652:	6878      	ldr	r0, [r7, #4]
 802e654:	f7fd fc22 	bl	802be9c <pbuf_free>
      return;
 802e658:	e1a9      	b.n	802e9ae <tcp_input+0x8a2>
      tcphdr_opt1len, tcphdr_opt2, p) != ERR_OK) {
    pbuf_free(p);
    return;
  }
#endif
  if (pcb != NULL) {
 802e65a:	69fb      	ldr	r3, [r7, #28]
 802e65c:	2b00      	cmp	r3, #0
 802e65e:	f000 815f 	beq.w	802e920 <tcp_input+0x814>
#if TCP_INPUT_DEBUG
    tcp_debug_print_state(pcb->state);
#endif /* TCP_INPUT_DEBUG */

    /* Set up a tcp_seg structure. */
    inseg.next = NULL;
 802e662:	4b98      	ldr	r3, [pc, #608]	; (802e8c4 <tcp_input+0x7b8>)
 802e664:	2200      	movs	r2, #0
 802e666:	601a      	str	r2, [r3, #0]
    inseg.len = p->tot_len;
 802e668:	687b      	ldr	r3, [r7, #4]
 802e66a:	891a      	ldrh	r2, [r3, #8]
 802e66c:	4b95      	ldr	r3, [pc, #596]	; (802e8c4 <tcp_input+0x7b8>)
 802e66e:	811a      	strh	r2, [r3, #8]
    inseg.p = p;
 802e670:	4a94      	ldr	r2, [pc, #592]	; (802e8c4 <tcp_input+0x7b8>)
 802e672:	687b      	ldr	r3, [r7, #4]
 802e674:	6053      	str	r3, [r2, #4]
    inseg.tcphdr = tcphdr;
 802e676:	4b94      	ldr	r3, [pc, #592]	; (802e8c8 <tcp_input+0x7bc>)
 802e678:	681b      	ldr	r3, [r3, #0]
 802e67a:	4a92      	ldr	r2, [pc, #584]	; (802e8c4 <tcp_input+0x7b8>)
 802e67c:	60d3      	str	r3, [r2, #12]

    recv_data = NULL;
 802e67e:	4b93      	ldr	r3, [pc, #588]	; (802e8cc <tcp_input+0x7c0>)
 802e680:	2200      	movs	r2, #0
 802e682:	601a      	str	r2, [r3, #0]
    recv_flags = 0;
 802e684:	4b92      	ldr	r3, [pc, #584]	; (802e8d0 <tcp_input+0x7c4>)
 802e686:	2200      	movs	r2, #0
 802e688:	701a      	strb	r2, [r3, #0]
    recv_acked = 0;
 802e68a:	4b92      	ldr	r3, [pc, #584]	; (802e8d4 <tcp_input+0x7c8>)
 802e68c:	2200      	movs	r2, #0
 802e68e:	801a      	strh	r2, [r3, #0]

    if (flags & TCP_PSH) {
 802e690:	4b91      	ldr	r3, [pc, #580]	; (802e8d8 <tcp_input+0x7cc>)
 802e692:	781b      	ldrb	r3, [r3, #0]
 802e694:	f003 0308 	and.w	r3, r3, #8
 802e698:	2b00      	cmp	r3, #0
 802e69a:	d006      	beq.n	802e6aa <tcp_input+0x59e>
      p->flags |= PBUF_FLAG_PUSH;
 802e69c:	687b      	ldr	r3, [r7, #4]
 802e69e:	7b5b      	ldrb	r3, [r3, #13]
 802e6a0:	f043 0301 	orr.w	r3, r3, #1
 802e6a4:	b2da      	uxtb	r2, r3
 802e6a6:	687b      	ldr	r3, [r7, #4]
 802e6a8:	735a      	strb	r2, [r3, #13]
    }

    /* If there is data which was previously "refused" by upper layer */
    if (pcb->refused_data != NULL) {
 802e6aa:	69fb      	ldr	r3, [r7, #28]
 802e6ac:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 802e6ae:	2b00      	cmp	r3, #0
 802e6b0:	d01e      	beq.n	802e6f0 <tcp_input+0x5e4>
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 802e6b2:	69f8      	ldr	r0, [r7, #28]
 802e6b4:	f7fe ffec 	bl	802d690 <tcp_process_refused_data>
 802e6b8:	4603      	mov	r3, r0
 802e6ba:	f113 0f0d 	cmn.w	r3, #13
 802e6be:	d007      	beq.n	802e6d0 <tcp_input+0x5c4>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 802e6c0:	69fb      	ldr	r3, [r7, #28]
 802e6c2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 802e6c4:	2b00      	cmp	r3, #0
 802e6c6:	d013      	beq.n	802e6f0 <tcp_input+0x5e4>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 802e6c8:	4b84      	ldr	r3, [pc, #528]	; (802e8dc <tcp_input+0x7d0>)
 802e6ca:	881b      	ldrh	r3, [r3, #0]
 802e6cc:	2b00      	cmp	r3, #0
 802e6ce:	d00f      	beq.n	802e6f0 <tcp_input+0x5e4>
        /* pcb has been aborted or refused data is still refused and the new
           segment contains data */
        if (pcb->rcv_ann_wnd == 0) {
 802e6d0:	69fb      	ldr	r3, [r7, #28]
 802e6d2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 802e6d4:	2b00      	cmp	r3, #0
 802e6d6:	d102      	bne.n	802e6de <tcp_input+0x5d2>
          /* this is a zero-window probe, we respond to it with current RCV.NXT
          and drop the data segment */
          tcp_send_empty_ack(pcb);
 802e6d8:	69f8      	ldr	r0, [r7, #28]
 802e6da:	f003 fe75 	bl	80323c8 <tcp_send_empty_ack>
        }
        TCP_STATS_INC(tcp.drop);
 802e6de:	4b78      	ldr	r3, [pc, #480]	; (802e8c0 <tcp_input+0x7b4>)
 802e6e0:	f8b3 3096 	ldrh.w	r3, [r3, #150]	; 0x96
 802e6e4:	3301      	adds	r3, #1
 802e6e6:	b29a      	uxth	r2, r3
 802e6e8:	4b75      	ldr	r3, [pc, #468]	; (802e8c0 <tcp_input+0x7b4>)
 802e6ea:	f8a3 2096 	strh.w	r2, [r3, #150]	; 0x96
        MIB2_STATS_INC(mib2.tcpinerrs);
        goto aborted;
 802e6ee:	e104      	b.n	802e8fa <tcp_input+0x7ee>
      }
    }
    tcp_input_pcb = pcb;
 802e6f0:	4a7b      	ldr	r2, [pc, #492]	; (802e8e0 <tcp_input+0x7d4>)
 802e6f2:	69fb      	ldr	r3, [r7, #28]
 802e6f4:	6013      	str	r3, [r2, #0]
    err = tcp_process(pcb);
 802e6f6:	69f8      	ldr	r0, [r7, #28]
 802e6f8:	f000 fb32 	bl	802ed60 <tcp_process>
 802e6fc:	4603      	mov	r3, r0
 802e6fe:	74fb      	strb	r3, [r7, #19]
    /* A return value of ERR_ABRT means that tcp_abort() was called
       and that the pcb has been freed. If so, we don't do anything. */
    if (err != ERR_ABRT) {
 802e700:	f997 3013 	ldrsb.w	r3, [r7, #19]
 802e704:	f113 0f0d 	cmn.w	r3, #13
 802e708:	f000 80d1 	beq.w	802e8ae <tcp_input+0x7a2>
      if (recv_flags & TF_RESET) {
 802e70c:	4b70      	ldr	r3, [pc, #448]	; (802e8d0 <tcp_input+0x7c4>)
 802e70e:	781b      	ldrb	r3, [r3, #0]
 802e710:	f003 0308 	and.w	r3, r3, #8
 802e714:	2b00      	cmp	r3, #0
 802e716:	d015      	beq.n	802e744 <tcp_input+0x638>
        /* TF_RESET means that the connection was reset by the other
           end. We then call the error callback to inform the
           application that the connection is dead before we
           deallocate the PCB. */
        TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_RST);
 802e718:	69fb      	ldr	r3, [r7, #28]
 802e71a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 802e71e:	2b00      	cmp	r3, #0
 802e720:	d008      	beq.n	802e734 <tcp_input+0x628>
 802e722:	69fb      	ldr	r3, [r7, #28]
 802e724:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 802e728:	69fa      	ldr	r2, [r7, #28]
 802e72a:	6912      	ldr	r2, [r2, #16]
 802e72c:	f06f 010d 	mvn.w	r1, #13
 802e730:	4610      	mov	r0, r2
 802e732:	4798      	blx	r3
        tcp_pcb_remove(&tcp_active_pcbs, pcb);
 802e734:	69f9      	ldr	r1, [r7, #28]
 802e736:	486b      	ldr	r0, [pc, #428]	; (802e8e4 <tcp_input+0x7d8>)
 802e738:	f7ff fb70 	bl	802de1c <tcp_pcb_remove>
        tcp_free(pcb);
 802e73c:	69f8      	ldr	r0, [r7, #28]
 802e73e:	f7fd fe61 	bl	802c404 <tcp_free>
 802e742:	e0da      	b.n	802e8fa <tcp_input+0x7ee>
      } else {
        err = ERR_OK;
 802e744:	2300      	movs	r3, #0
 802e746:	74fb      	strb	r3, [r7, #19]
        /* If the application has registered a "sent" function to be
           called when new send buffer space is available, we call it
           now. */
        if (recv_acked > 0) {
 802e748:	4b62      	ldr	r3, [pc, #392]	; (802e8d4 <tcp_input+0x7c8>)
 802e74a:	881b      	ldrh	r3, [r3, #0]
 802e74c:	2b00      	cmp	r3, #0
 802e74e:	d01d      	beq.n	802e78c <tcp_input+0x680>
          while (acked > 0) {
            acked16 = (u16_t)LWIP_MIN(acked, 0xffffu);
            acked -= acked16;
#else
          {
            acked16 = recv_acked;
 802e750:	4b60      	ldr	r3, [pc, #384]	; (802e8d4 <tcp_input+0x7c8>)
 802e752:	881b      	ldrh	r3, [r3, #0]
 802e754:	81fb      	strh	r3, [r7, #14]
#endif
            TCP_EVENT_SENT(pcb, (u16_t)acked16, err);
 802e756:	69fb      	ldr	r3, [r7, #28]
 802e758:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 802e75c:	2b00      	cmp	r3, #0
 802e75e:	d00a      	beq.n	802e776 <tcp_input+0x66a>
 802e760:	69fb      	ldr	r3, [r7, #28]
 802e762:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 802e766:	69fa      	ldr	r2, [r7, #28]
 802e768:	6910      	ldr	r0, [r2, #16]
 802e76a:	89fa      	ldrh	r2, [r7, #14]
 802e76c:	69f9      	ldr	r1, [r7, #28]
 802e76e:	4798      	blx	r3
 802e770:	4603      	mov	r3, r0
 802e772:	74fb      	strb	r3, [r7, #19]
 802e774:	e001      	b.n	802e77a <tcp_input+0x66e>
 802e776:	2300      	movs	r3, #0
 802e778:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 802e77a:	f997 3013 	ldrsb.w	r3, [r7, #19]
 802e77e:	f113 0f0d 	cmn.w	r3, #13
 802e782:	f000 8096 	beq.w	802e8b2 <tcp_input+0x7a6>
              goto aborted;
            }
          }
          recv_acked = 0;
 802e786:	4b53      	ldr	r3, [pc, #332]	; (802e8d4 <tcp_input+0x7c8>)
 802e788:	2200      	movs	r2, #0
 802e78a:	801a      	strh	r2, [r3, #0]
        }
        if (tcp_input_delayed_close(pcb)) {
 802e78c:	69f8      	ldr	r0, [r7, #28]
 802e78e:	f000 f925 	bl	802e9dc <tcp_input_delayed_close>
 802e792:	4603      	mov	r3, r0
 802e794:	2b00      	cmp	r3, #0
 802e796:	f040 808e 	bne.w	802e8b6 <tcp_input+0x7aa>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
        while (recv_data != NULL) {
          struct pbuf *rest = NULL;
          pbuf_split_64k(recv_data, &rest);
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
        if (recv_data != NULL) {
 802e79a:	4b4c      	ldr	r3, [pc, #304]	; (802e8cc <tcp_input+0x7c0>)
 802e79c:	681b      	ldr	r3, [r3, #0]
 802e79e:	2b00      	cmp	r3, #0
 802e7a0:	d041      	beq.n	802e826 <tcp_input+0x71a>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

          LWIP_ASSERT("pcb->refused_data == NULL", pcb->refused_data == NULL);
 802e7a2:	69fb      	ldr	r3, [r7, #28]
 802e7a4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 802e7a6:	2b00      	cmp	r3, #0
 802e7a8:	d006      	beq.n	802e7b8 <tcp_input+0x6ac>
 802e7aa:	4b4f      	ldr	r3, [pc, #316]	; (802e8e8 <tcp_input+0x7dc>)
 802e7ac:	f44f 72f3 	mov.w	r2, #486	; 0x1e6
 802e7b0:	494e      	ldr	r1, [pc, #312]	; (802e8ec <tcp_input+0x7e0>)
 802e7b2:	484f      	ldr	r0, [pc, #316]	; (802e8f0 <tcp_input+0x7e4>)
 802e7b4:	f007 fcf0 	bl	8036198 <iprintf>
          if (pcb->flags & TF_RXCLOSED) {
 802e7b8:	69fb      	ldr	r3, [r7, #28]
 802e7ba:	8b5b      	ldrh	r3, [r3, #26]
 802e7bc:	f003 0310 	and.w	r3, r3, #16
 802e7c0:	2b00      	cmp	r3, #0
 802e7c2:	d008      	beq.n	802e7d6 <tcp_input+0x6ca>
            /* received data although already closed -> abort (send RST) to
               notify the remote host that not all data has been processed */
            pbuf_free(recv_data);
 802e7c4:	4b41      	ldr	r3, [pc, #260]	; (802e8cc <tcp_input+0x7c0>)
 802e7c6:	681b      	ldr	r3, [r3, #0]
 802e7c8:	4618      	mov	r0, r3
 802e7ca:	f7fd fb67 	bl	802be9c <pbuf_free>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_free(rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            tcp_abort(pcb);
 802e7ce:	69f8      	ldr	r0, [r7, #28]
 802e7d0:	f7fe f95c 	bl	802ca8c <tcp_abort>
            goto aborted;
 802e7d4:	e091      	b.n	802e8fa <tcp_input+0x7ee>
          }

          /* Notify application that data has been received. */
          TCP_EVENT_RECV(pcb, recv_data, ERR_OK, err);
 802e7d6:	69fb      	ldr	r3, [r7, #28]
 802e7d8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 802e7dc:	2b00      	cmp	r3, #0
 802e7de:	d00c      	beq.n	802e7fa <tcp_input+0x6ee>
 802e7e0:	69fb      	ldr	r3, [r7, #28]
 802e7e2:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 802e7e6:	69fb      	ldr	r3, [r7, #28]
 802e7e8:	6918      	ldr	r0, [r3, #16]
 802e7ea:	4b38      	ldr	r3, [pc, #224]	; (802e8cc <tcp_input+0x7c0>)
 802e7ec:	681a      	ldr	r2, [r3, #0]
 802e7ee:	2300      	movs	r3, #0
 802e7f0:	69f9      	ldr	r1, [r7, #28]
 802e7f2:	47a0      	blx	r4
 802e7f4:	4603      	mov	r3, r0
 802e7f6:	74fb      	strb	r3, [r7, #19]
 802e7f8:	e008      	b.n	802e80c <tcp_input+0x700>
 802e7fa:	4b34      	ldr	r3, [pc, #208]	; (802e8cc <tcp_input+0x7c0>)
 802e7fc:	681a      	ldr	r2, [r3, #0]
 802e7fe:	2300      	movs	r3, #0
 802e800:	69f9      	ldr	r1, [r7, #28]
 802e802:	2000      	movs	r0, #0
 802e804:	f7ff f81a 	bl	802d83c <tcp_recv_null>
 802e808:	4603      	mov	r3, r0
 802e80a:	74fb      	strb	r3, [r7, #19]
          if (err == ERR_ABRT) {
 802e80c:	f997 3013 	ldrsb.w	r3, [r7, #19]
 802e810:	f113 0f0d 	cmn.w	r3, #13
 802e814:	d051      	beq.n	802e8ba <tcp_input+0x7ae>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            goto aborted;
          }

          /* If the upper layer can't receive this data, store it */
          if (err != ERR_OK) {
 802e816:	f997 3013 	ldrsb.w	r3, [r7, #19]
 802e81a:	2b00      	cmp	r3, #0
 802e81c:	d003      	beq.n	802e826 <tcp_input+0x71a>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_cat(recv_data, rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            pcb->refused_data = recv_data;
 802e81e:	4b2b      	ldr	r3, [pc, #172]	; (802e8cc <tcp_input+0x7c0>)
 802e820:	681a      	ldr	r2, [r3, #0]
 802e822:	69fb      	ldr	r3, [r7, #28]
 802e824:	679a      	str	r2, [r3, #120]	; 0x78
          }
        }

        /* If a FIN segment was received, we call the callback
           function with a NULL buffer to indicate EOF. */
        if (recv_flags & TF_GOT_FIN) {
 802e826:	4b2a      	ldr	r3, [pc, #168]	; (802e8d0 <tcp_input+0x7c4>)
 802e828:	781b      	ldrb	r3, [r3, #0]
 802e82a:	f003 0320 	and.w	r3, r3, #32
 802e82e:	2b00      	cmp	r3, #0
 802e830:	d030      	beq.n	802e894 <tcp_input+0x788>
          if (pcb->refused_data != NULL) {
 802e832:	69fb      	ldr	r3, [r7, #28]
 802e834:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 802e836:	2b00      	cmp	r3, #0
 802e838:	d009      	beq.n	802e84e <tcp_input+0x742>
            /* Delay this if we have refused data. */
            pcb->refused_data->flags |= PBUF_FLAG_TCP_FIN;
 802e83a:	69fb      	ldr	r3, [r7, #28]
 802e83c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 802e83e:	7b5a      	ldrb	r2, [r3, #13]
 802e840:	69fb      	ldr	r3, [r7, #28]
 802e842:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 802e844:	f042 0220 	orr.w	r2, r2, #32
 802e848:	b2d2      	uxtb	r2, r2
 802e84a:	735a      	strb	r2, [r3, #13]
 802e84c:	e022      	b.n	802e894 <tcp_input+0x788>
          } else {
            /* correct rcv_wnd as the application won't call tcp_recved()
               for the FIN's seqno */
            if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 802e84e:	69fb      	ldr	r3, [r7, #28]
 802e850:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 802e852:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 802e856:	d005      	beq.n	802e864 <tcp_input+0x758>
              pcb->rcv_wnd++;
 802e858:	69fb      	ldr	r3, [r7, #28]
 802e85a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 802e85c:	3301      	adds	r3, #1
 802e85e:	b29a      	uxth	r2, r3
 802e860:	69fb      	ldr	r3, [r7, #28]
 802e862:	851a      	strh	r2, [r3, #40]	; 0x28
            }
            TCP_EVENT_CLOSED(pcb, err);
 802e864:	69fb      	ldr	r3, [r7, #28]
 802e866:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 802e86a:	2b00      	cmp	r3, #0
 802e86c:	d00b      	beq.n	802e886 <tcp_input+0x77a>
 802e86e:	69fb      	ldr	r3, [r7, #28]
 802e870:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 802e874:	69fb      	ldr	r3, [r7, #28]
 802e876:	6918      	ldr	r0, [r3, #16]
 802e878:	2300      	movs	r3, #0
 802e87a:	2200      	movs	r2, #0
 802e87c:	69f9      	ldr	r1, [r7, #28]
 802e87e:	47a0      	blx	r4
 802e880:	4603      	mov	r3, r0
 802e882:	74fb      	strb	r3, [r7, #19]
 802e884:	e001      	b.n	802e88a <tcp_input+0x77e>
 802e886:	2300      	movs	r3, #0
 802e888:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 802e88a:	f997 3013 	ldrsb.w	r3, [r7, #19]
 802e88e:	f113 0f0d 	cmn.w	r3, #13
 802e892:	d02f      	beq.n	802e8f4 <tcp_input+0x7e8>
              goto aborted;
            }
          }
        }

        tcp_input_pcb = NULL;
 802e894:	4b12      	ldr	r3, [pc, #72]	; (802e8e0 <tcp_input+0x7d4>)
 802e896:	2200      	movs	r2, #0
 802e898:	601a      	str	r2, [r3, #0]
        if (tcp_input_delayed_close(pcb)) {
 802e89a:	69f8      	ldr	r0, [r7, #28]
 802e89c:	f000 f89e 	bl	802e9dc <tcp_input_delayed_close>
 802e8a0:	4603      	mov	r3, r0
 802e8a2:	2b00      	cmp	r3, #0
 802e8a4:	d128      	bne.n	802e8f8 <tcp_input+0x7ec>
          goto aborted;
        }
        /* Try to send something out. */
        tcp_output(pcb);
 802e8a6:	69f8      	ldr	r0, [r7, #28]
 802e8a8:	f002 ff74 	bl	8031794 <tcp_output>
 802e8ac:	e025      	b.n	802e8fa <tcp_input+0x7ee>
#endif /* TCP_INPUT_DEBUG */
      }
    }
    /* Jump target if pcb has been aborted in a callback (by calling tcp_abort()).
       Below this line, 'pcb' may not be dereferenced! */
aborted:
 802e8ae:	bf00      	nop
 802e8b0:	e023      	b.n	802e8fa <tcp_input+0x7ee>
              goto aborted;
 802e8b2:	bf00      	nop
 802e8b4:	e021      	b.n	802e8fa <tcp_input+0x7ee>
          goto aborted;
 802e8b6:	bf00      	nop
 802e8b8:	e01f      	b.n	802e8fa <tcp_input+0x7ee>
            goto aborted;
 802e8ba:	bf00      	nop
 802e8bc:	e01d      	b.n	802e8fa <tcp_input+0x7ee>
 802e8be:	bf00      	nop
 802e8c0:	2000ed10 	.word	0x2000ed10
 802e8c4:	2000ee24 	.word	0x2000ee24
 802e8c8:	2000ee34 	.word	0x2000ee34
 802e8cc:	2000ee54 	.word	0x2000ee54
 802e8d0:	2000ee51 	.word	0x2000ee51
 802e8d4:	2000ee4c 	.word	0x2000ee4c
 802e8d8:	2000ee50 	.word	0x2000ee50
 802e8dc:	2000ee4e 	.word	0x2000ee4e
 802e8e0:	2000ee58 	.word	0x2000ee58
 802e8e4:	2000ee18 	.word	0x2000ee18
 802e8e8:	080392a8 	.word	0x080392a8
 802e8ec:	0803945c 	.word	0x0803945c
 802e8f0:	080392f4 	.word	0x080392f4
              goto aborted;
 802e8f4:	bf00      	nop
 802e8f6:	e000      	b.n	802e8fa <tcp_input+0x7ee>
          goto aborted;
 802e8f8:	bf00      	nop
    tcp_input_pcb = NULL;
 802e8fa:	4b2e      	ldr	r3, [pc, #184]	; (802e9b4 <tcp_input+0x8a8>)
 802e8fc:	2200      	movs	r2, #0
 802e8fe:	601a      	str	r2, [r3, #0]
    recv_data = NULL;
 802e900:	4b2d      	ldr	r3, [pc, #180]	; (802e9b8 <tcp_input+0x8ac>)
 802e902:	2200      	movs	r2, #0
 802e904:	601a      	str	r2, [r3, #0]

    /* give up our reference to inseg.p */
    if (inseg.p != NULL) {
 802e906:	4b2d      	ldr	r3, [pc, #180]	; (802e9bc <tcp_input+0x8b0>)
 802e908:	685b      	ldr	r3, [r3, #4]
 802e90a:	2b00      	cmp	r3, #0
 802e90c:	d04e      	beq.n	802e9ac <tcp_input+0x8a0>
      pbuf_free(inseg.p);
 802e90e:	4b2b      	ldr	r3, [pc, #172]	; (802e9bc <tcp_input+0x8b0>)
 802e910:	685b      	ldr	r3, [r3, #4]
 802e912:	4618      	mov	r0, r3
 802e914:	f7fd fac2 	bl	802be9c <pbuf_free>
      inseg.p = NULL;
 802e918:	4b28      	ldr	r3, [pc, #160]	; (802e9bc <tcp_input+0x8b0>)
 802e91a:	2200      	movs	r2, #0
 802e91c:	605a      	str	r2, [r3, #4]
    pbuf_free(p);
  }

  LWIP_ASSERT("tcp_input: tcp_pcbs_sane()", tcp_pcbs_sane());
  PERF_STOP("tcp_input");
  return;
 802e91e:	e045      	b.n	802e9ac <tcp_input+0x8a0>
    if (!(TCPH_FLAGS(tcphdr) & TCP_RST)) {
 802e920:	4b27      	ldr	r3, [pc, #156]	; (802e9c0 <tcp_input+0x8b4>)
 802e922:	681b      	ldr	r3, [r3, #0]
 802e924:	899b      	ldrh	r3, [r3, #12]
 802e926:	b29b      	uxth	r3, r3
 802e928:	4618      	mov	r0, r3
 802e92a:	f7fb fdf5 	bl	802a518 <lwip_htons>
 802e92e:	4603      	mov	r3, r0
 802e930:	b2db      	uxtb	r3, r3
 802e932:	f003 0304 	and.w	r3, r3, #4
 802e936:	2b00      	cmp	r3, #0
 802e938:	d128      	bne.n	802e98c <tcp_input+0x880>
      TCP_STATS_INC(tcp.proterr);
 802e93a:	4b22      	ldr	r3, [pc, #136]	; (802e9c4 <tcp_input+0x8b8>)
 802e93c:	f8b3 30a0 	ldrh.w	r3, [r3, #160]	; 0xa0
 802e940:	3301      	adds	r3, #1
 802e942:	b29a      	uxth	r2, r3
 802e944:	4b1f      	ldr	r3, [pc, #124]	; (802e9c4 <tcp_input+0x8b8>)
 802e946:	f8a3 20a0 	strh.w	r2, [r3, #160]	; 0xa0
      TCP_STATS_INC(tcp.drop);
 802e94a:	4b1e      	ldr	r3, [pc, #120]	; (802e9c4 <tcp_input+0x8b8>)
 802e94c:	f8b3 3096 	ldrh.w	r3, [r3, #150]	; 0x96
 802e950:	3301      	adds	r3, #1
 802e952:	b29a      	uxth	r2, r3
 802e954:	4b1b      	ldr	r3, [pc, #108]	; (802e9c4 <tcp_input+0x8b8>)
 802e956:	f8a3 2096 	strh.w	r2, [r3, #150]	; 0x96
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 802e95a:	4b1b      	ldr	r3, [pc, #108]	; (802e9c8 <tcp_input+0x8bc>)
 802e95c:	6819      	ldr	r1, [r3, #0]
 802e95e:	4b1b      	ldr	r3, [pc, #108]	; (802e9cc <tcp_input+0x8c0>)
 802e960:	881b      	ldrh	r3, [r3, #0]
 802e962:	461a      	mov	r2, r3
 802e964:	4b1a      	ldr	r3, [pc, #104]	; (802e9d0 <tcp_input+0x8c4>)
 802e966:	681b      	ldr	r3, [r3, #0]
 802e968:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 802e96a:	4b15      	ldr	r3, [pc, #84]	; (802e9c0 <tcp_input+0x8b4>)
 802e96c:	681b      	ldr	r3, [r3, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 802e96e:	885b      	ldrh	r3, [r3, #2]
 802e970:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 802e972:	4a13      	ldr	r2, [pc, #76]	; (802e9c0 <tcp_input+0x8b4>)
 802e974:	6812      	ldr	r2, [r2, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 802e976:	8812      	ldrh	r2, [r2, #0]
 802e978:	b292      	uxth	r2, r2
 802e97a:	9202      	str	r2, [sp, #8]
 802e97c:	9301      	str	r3, [sp, #4]
 802e97e:	4b15      	ldr	r3, [pc, #84]	; (802e9d4 <tcp_input+0x8c8>)
 802e980:	9300      	str	r3, [sp, #0]
 802e982:	4b15      	ldr	r3, [pc, #84]	; (802e9d8 <tcp_input+0x8cc>)
 802e984:	4602      	mov	r2, r0
 802e986:	2000      	movs	r0, #0
 802e988:	f003 fccc 	bl	8032324 <tcp_rst>
    pbuf_free(p);
 802e98c:	6878      	ldr	r0, [r7, #4]
 802e98e:	f7fd fa85 	bl	802be9c <pbuf_free>
  return;
 802e992:	e00b      	b.n	802e9ac <tcp_input+0x8a0>
dropped:
  TCP_STATS_INC(tcp.drop);
 802e994:	4b0b      	ldr	r3, [pc, #44]	; (802e9c4 <tcp_input+0x8b8>)
 802e996:	f8b3 3096 	ldrh.w	r3, [r3, #150]	; 0x96
 802e99a:	3301      	adds	r3, #1
 802e99c:	b29a      	uxth	r2, r3
 802e99e:	4b09      	ldr	r3, [pc, #36]	; (802e9c4 <tcp_input+0x8b8>)
 802e9a0:	f8a3 2096 	strh.w	r2, [r3, #150]	; 0x96
  MIB2_STATS_INC(mib2.tcpinerrs);
  pbuf_free(p);
 802e9a4:	6878      	ldr	r0, [r7, #4]
 802e9a6:	f7fd fa79 	bl	802be9c <pbuf_free>
 802e9aa:	e000      	b.n	802e9ae <tcp_input+0x8a2>
  return;
 802e9ac:	bf00      	nop
}
 802e9ae:	3724      	adds	r7, #36	; 0x24
 802e9b0:	46bd      	mov	sp, r7
 802e9b2:	bd90      	pop	{r4, r7, pc}
 802e9b4:	2000ee58 	.word	0x2000ee58
 802e9b8:	2000ee54 	.word	0x2000ee54
 802e9bc:	2000ee24 	.word	0x2000ee24
 802e9c0:	2000ee34 	.word	0x2000ee34
 802e9c4:	2000ed10 	.word	0x2000ed10
 802e9c8:	2000ee48 	.word	0x2000ee48
 802e9cc:	2000ee4e 	.word	0x2000ee4e
 802e9d0:	2000ee44 	.word	0x2000ee44
 802e9d4:	2000b29c 	.word	0x2000b29c
 802e9d8:	2000b2a0 	.word	0x2000b2a0

0802e9dc <tcp_input_delayed_close>:
 * any more.
 * @returns 1 if the pcb has been closed and deallocated, 0 otherwise
 */
static int
tcp_input_delayed_close(struct tcp_pcb *pcb)
{
 802e9dc:	b580      	push	{r7, lr}
 802e9de:	b082      	sub	sp, #8
 802e9e0:	af00      	add	r7, sp, #0
 802e9e2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_input_delayed_close: invalid pcb", pcb != NULL);
 802e9e4:	687b      	ldr	r3, [r7, #4]
 802e9e6:	2b00      	cmp	r3, #0
 802e9e8:	d106      	bne.n	802e9f8 <tcp_input_delayed_close+0x1c>
 802e9ea:	4b17      	ldr	r3, [pc, #92]	; (802ea48 <tcp_input_delayed_close+0x6c>)
 802e9ec:	f240 225a 	movw	r2, #602	; 0x25a
 802e9f0:	4916      	ldr	r1, [pc, #88]	; (802ea4c <tcp_input_delayed_close+0x70>)
 802e9f2:	4817      	ldr	r0, [pc, #92]	; (802ea50 <tcp_input_delayed_close+0x74>)
 802e9f4:	f007 fbd0 	bl	8036198 <iprintf>

  if (recv_flags & TF_CLOSED) {
 802e9f8:	4b16      	ldr	r3, [pc, #88]	; (802ea54 <tcp_input_delayed_close+0x78>)
 802e9fa:	781b      	ldrb	r3, [r3, #0]
 802e9fc:	f003 0310 	and.w	r3, r3, #16
 802ea00:	2b00      	cmp	r3, #0
 802ea02:	d01c      	beq.n	802ea3e <tcp_input_delayed_close+0x62>
    /* The connection has been closed and we will deallocate the
        PCB. */
    if (!(pcb->flags & TF_RXCLOSED)) {
 802ea04:	687b      	ldr	r3, [r7, #4]
 802ea06:	8b5b      	ldrh	r3, [r3, #26]
 802ea08:	f003 0310 	and.w	r3, r3, #16
 802ea0c:	2b00      	cmp	r3, #0
 802ea0e:	d10d      	bne.n	802ea2c <tcp_input_delayed_close+0x50>
      /* Connection closed although the application has only shut down the
          tx side: call the PCB's err callback and indicate the closure to
          ensure the application doesn't continue using the PCB. */
      TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_CLSD);
 802ea10:	687b      	ldr	r3, [r7, #4]
 802ea12:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 802ea16:	2b00      	cmp	r3, #0
 802ea18:	d008      	beq.n	802ea2c <tcp_input_delayed_close+0x50>
 802ea1a:	687b      	ldr	r3, [r7, #4]
 802ea1c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 802ea20:	687a      	ldr	r2, [r7, #4]
 802ea22:	6912      	ldr	r2, [r2, #16]
 802ea24:	f06f 010e 	mvn.w	r1, #14
 802ea28:	4610      	mov	r0, r2
 802ea2a:	4798      	blx	r3
    }
    tcp_pcb_remove(&tcp_active_pcbs, pcb);
 802ea2c:	6879      	ldr	r1, [r7, #4]
 802ea2e:	480a      	ldr	r0, [pc, #40]	; (802ea58 <tcp_input_delayed_close+0x7c>)
 802ea30:	f7ff f9f4 	bl	802de1c <tcp_pcb_remove>
    tcp_free(pcb);
 802ea34:	6878      	ldr	r0, [r7, #4]
 802ea36:	f7fd fce5 	bl	802c404 <tcp_free>
    return 1;
 802ea3a:	2301      	movs	r3, #1
 802ea3c:	e000      	b.n	802ea40 <tcp_input_delayed_close+0x64>
  }
  return 0;
 802ea3e:	2300      	movs	r3, #0
}
 802ea40:	4618      	mov	r0, r3
 802ea42:	3708      	adds	r7, #8
 802ea44:	46bd      	mov	sp, r7
 802ea46:	bd80      	pop	{r7, pc}
 802ea48:	080392a8 	.word	0x080392a8
 802ea4c:	08039478 	.word	0x08039478
 802ea50:	080392f4 	.word	0x080392f4
 802ea54:	2000ee51 	.word	0x2000ee51
 802ea58:	2000ee18 	.word	0x2000ee18

0802ea5c <tcp_listen_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_listen_input(struct tcp_pcb_listen *pcb)
{
 802ea5c:	b590      	push	{r4, r7, lr}
 802ea5e:	b08b      	sub	sp, #44	; 0x2c
 802ea60:	af04      	add	r7, sp, #16
 802ea62:	6078      	str	r0, [r7, #4]
  struct tcp_pcb *npcb;
  u32_t iss;
  err_t rc;

  if (flags & TCP_RST) {
 802ea64:	4b73      	ldr	r3, [pc, #460]	; (802ec34 <tcp_listen_input+0x1d8>)
 802ea66:	781b      	ldrb	r3, [r3, #0]
 802ea68:	f003 0304 	and.w	r3, r3, #4
 802ea6c:	2b00      	cmp	r3, #0
 802ea6e:	f040 80da 	bne.w	802ec26 <tcp_listen_input+0x1ca>
    /* An incoming RST should be ignored. Return. */
    return;
  }

  LWIP_ASSERT("tcp_listen_input: invalid pcb", pcb != NULL);
 802ea72:	687b      	ldr	r3, [r7, #4]
 802ea74:	2b00      	cmp	r3, #0
 802ea76:	d106      	bne.n	802ea86 <tcp_listen_input+0x2a>
 802ea78:	4b6f      	ldr	r3, [pc, #444]	; (802ec38 <tcp_listen_input+0x1dc>)
 802ea7a:	f240 2281 	movw	r2, #641	; 0x281
 802ea7e:	496f      	ldr	r1, [pc, #444]	; (802ec3c <tcp_listen_input+0x1e0>)
 802ea80:	486f      	ldr	r0, [pc, #444]	; (802ec40 <tcp_listen_input+0x1e4>)
 802ea82:	f007 fb89 	bl	8036198 <iprintf>

  /* In the LISTEN state, we check for incoming SYN segments,
     creates a new PCB, and responds with a SYN|ACK. */
  if (flags & TCP_ACK) {
 802ea86:	4b6b      	ldr	r3, [pc, #428]	; (802ec34 <tcp_listen_input+0x1d8>)
 802ea88:	781b      	ldrb	r3, [r3, #0]
 802ea8a:	f003 0310 	and.w	r3, r3, #16
 802ea8e:	2b00      	cmp	r3, #0
 802ea90:	d019      	beq.n	802eac6 <tcp_listen_input+0x6a>
    /* For incoming segments with the ACK flag set, respond with a
       RST. */
    LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_listen_input: ACK in LISTEN, sending reset\n"));
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 802ea92:	4b6c      	ldr	r3, [pc, #432]	; (802ec44 <tcp_listen_input+0x1e8>)
 802ea94:	6819      	ldr	r1, [r3, #0]
 802ea96:	4b6c      	ldr	r3, [pc, #432]	; (802ec48 <tcp_listen_input+0x1ec>)
 802ea98:	881b      	ldrh	r3, [r3, #0]
 802ea9a:	461a      	mov	r2, r3
 802ea9c:	4b6b      	ldr	r3, [pc, #428]	; (802ec4c <tcp_listen_input+0x1f0>)
 802ea9e:	681b      	ldr	r3, [r3, #0]
 802eaa0:	18d0      	adds	r0, r2, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 802eaa2:	4b6b      	ldr	r3, [pc, #428]	; (802ec50 <tcp_listen_input+0x1f4>)
 802eaa4:	681b      	ldr	r3, [r3, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 802eaa6:	885b      	ldrh	r3, [r3, #2]
 802eaa8:	b29b      	uxth	r3, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 802eaaa:	4a69      	ldr	r2, [pc, #420]	; (802ec50 <tcp_listen_input+0x1f4>)
 802eaac:	6812      	ldr	r2, [r2, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 802eaae:	8812      	ldrh	r2, [r2, #0]
 802eab0:	b292      	uxth	r2, r2
 802eab2:	9202      	str	r2, [sp, #8]
 802eab4:	9301      	str	r3, [sp, #4]
 802eab6:	4b67      	ldr	r3, [pc, #412]	; (802ec54 <tcp_listen_input+0x1f8>)
 802eab8:	9300      	str	r3, [sp, #0]
 802eaba:	4b67      	ldr	r3, [pc, #412]	; (802ec58 <tcp_listen_input+0x1fc>)
 802eabc:	4602      	mov	r2, r0
 802eabe:	6878      	ldr	r0, [r7, #4]
 802eac0:	f003 fc30 	bl	8032324 <tcp_rst>
      tcp_abandon(npcb, 0);
      return;
    }
    tcp_output(npcb);
  }
  return;
 802eac4:	e0b1      	b.n	802ec2a <tcp_listen_input+0x1ce>
  } else if (flags & TCP_SYN) {
 802eac6:	4b5b      	ldr	r3, [pc, #364]	; (802ec34 <tcp_listen_input+0x1d8>)
 802eac8:	781b      	ldrb	r3, [r3, #0]
 802eaca:	f003 0302 	and.w	r3, r3, #2
 802eace:	2b00      	cmp	r3, #0
 802ead0:	f000 80ab 	beq.w	802ec2a <tcp_listen_input+0x1ce>
    npcb = tcp_alloc(pcb->prio);
 802ead4:	687b      	ldr	r3, [r7, #4]
 802ead6:	7d5b      	ldrb	r3, [r3, #21]
 802ead8:	4618      	mov	r0, r3
 802eada:	f7fe ffd3 	bl	802da84 <tcp_alloc>
 802eade:	6178      	str	r0, [r7, #20]
    if (npcb == NULL) {
 802eae0:	697b      	ldr	r3, [r7, #20]
 802eae2:	2b00      	cmp	r3, #0
 802eae4:	d119      	bne.n	802eb1a <tcp_listen_input+0xbe>
      TCP_STATS_INC(tcp.memerr);
 802eae6:	4b5d      	ldr	r3, [pc, #372]	; (802ec5c <tcp_listen_input+0x200>)
 802eae8:	f8b3 309c 	ldrh.w	r3, [r3, #156]	; 0x9c
 802eaec:	3301      	adds	r3, #1
 802eaee:	b29a      	uxth	r2, r3
 802eaf0:	4b5a      	ldr	r3, [pc, #360]	; (802ec5c <tcp_listen_input+0x200>)
 802eaf2:	f8a3 209c 	strh.w	r2, [r3, #156]	; 0x9c
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 802eaf6:	687b      	ldr	r3, [r7, #4]
 802eaf8:	699b      	ldr	r3, [r3, #24]
 802eafa:	2b00      	cmp	r3, #0
 802eafc:	d00a      	beq.n	802eb14 <tcp_listen_input+0xb8>
 802eafe:	687b      	ldr	r3, [r7, #4]
 802eb00:	699b      	ldr	r3, [r3, #24]
 802eb02:	687a      	ldr	r2, [r7, #4]
 802eb04:	6910      	ldr	r0, [r2, #16]
 802eb06:	f04f 32ff 	mov.w	r2, #4294967295
 802eb0a:	2100      	movs	r1, #0
 802eb0c:	4798      	blx	r3
 802eb0e:	4603      	mov	r3, r0
 802eb10:	73bb      	strb	r3, [r7, #14]
      return;
 802eb12:	e08b      	b.n	802ec2c <tcp_listen_input+0x1d0>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 802eb14:	23f0      	movs	r3, #240	; 0xf0
 802eb16:	73bb      	strb	r3, [r7, #14]
      return;
 802eb18:	e088      	b.n	802ec2c <tcp_listen_input+0x1d0>
    ip_addr_copy(npcb->local_ip, *ip_current_dest_addr());
 802eb1a:	4b51      	ldr	r3, [pc, #324]	; (802ec60 <tcp_listen_input+0x204>)
 802eb1c:	695a      	ldr	r2, [r3, #20]
 802eb1e:	697b      	ldr	r3, [r7, #20]
 802eb20:	601a      	str	r2, [r3, #0]
    ip_addr_copy(npcb->remote_ip, *ip_current_src_addr());
 802eb22:	4b4f      	ldr	r3, [pc, #316]	; (802ec60 <tcp_listen_input+0x204>)
 802eb24:	691a      	ldr	r2, [r3, #16]
 802eb26:	697b      	ldr	r3, [r7, #20]
 802eb28:	605a      	str	r2, [r3, #4]
    npcb->local_port = pcb->local_port;
 802eb2a:	687b      	ldr	r3, [r7, #4]
 802eb2c:	8ada      	ldrh	r2, [r3, #22]
 802eb2e:	697b      	ldr	r3, [r7, #20]
 802eb30:	82da      	strh	r2, [r3, #22]
    npcb->remote_port = tcphdr->src;
 802eb32:	4b47      	ldr	r3, [pc, #284]	; (802ec50 <tcp_listen_input+0x1f4>)
 802eb34:	681b      	ldr	r3, [r3, #0]
 802eb36:	881b      	ldrh	r3, [r3, #0]
 802eb38:	b29a      	uxth	r2, r3
 802eb3a:	697b      	ldr	r3, [r7, #20]
 802eb3c:	831a      	strh	r2, [r3, #24]
    npcb->state = SYN_RCVD;
 802eb3e:	697b      	ldr	r3, [r7, #20]
 802eb40:	2203      	movs	r2, #3
 802eb42:	751a      	strb	r2, [r3, #20]
    npcb->rcv_nxt = seqno + 1;
 802eb44:	4b41      	ldr	r3, [pc, #260]	; (802ec4c <tcp_listen_input+0x1f0>)
 802eb46:	681b      	ldr	r3, [r3, #0]
 802eb48:	1c5a      	adds	r2, r3, #1
 802eb4a:	697b      	ldr	r3, [r7, #20]
 802eb4c:	625a      	str	r2, [r3, #36]	; 0x24
    npcb->rcv_ann_right_edge = npcb->rcv_nxt;
 802eb4e:	697b      	ldr	r3, [r7, #20]
 802eb50:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 802eb52:	697b      	ldr	r3, [r7, #20]
 802eb54:	62da      	str	r2, [r3, #44]	; 0x2c
    iss = tcp_next_iss(npcb);
 802eb56:	6978      	ldr	r0, [r7, #20]
 802eb58:	f7ff f9f4 	bl	802df44 <tcp_next_iss>
 802eb5c:	6138      	str	r0, [r7, #16]
    npcb->snd_wl2 = iss;
 802eb5e:	697b      	ldr	r3, [r7, #20]
 802eb60:	693a      	ldr	r2, [r7, #16]
 802eb62:	659a      	str	r2, [r3, #88]	; 0x58
    npcb->snd_nxt = iss;
 802eb64:	697b      	ldr	r3, [r7, #20]
 802eb66:	693a      	ldr	r2, [r7, #16]
 802eb68:	651a      	str	r2, [r3, #80]	; 0x50
    npcb->lastack = iss;
 802eb6a:	697b      	ldr	r3, [r7, #20]
 802eb6c:	693a      	ldr	r2, [r7, #16]
 802eb6e:	645a      	str	r2, [r3, #68]	; 0x44
    npcb->snd_lbb = iss;
 802eb70:	697b      	ldr	r3, [r7, #20]
 802eb72:	693a      	ldr	r2, [r7, #16]
 802eb74:	65da      	str	r2, [r3, #92]	; 0x5c
    npcb->snd_wl1 = seqno - 1;/* initialise to seqno-1 to force window update */
 802eb76:	4b35      	ldr	r3, [pc, #212]	; (802ec4c <tcp_listen_input+0x1f0>)
 802eb78:	681b      	ldr	r3, [r3, #0]
 802eb7a:	1e5a      	subs	r2, r3, #1
 802eb7c:	697b      	ldr	r3, [r7, #20]
 802eb7e:	655a      	str	r2, [r3, #84]	; 0x54
    npcb->callback_arg = pcb->callback_arg;
 802eb80:	687b      	ldr	r3, [r7, #4]
 802eb82:	691a      	ldr	r2, [r3, #16]
 802eb84:	697b      	ldr	r3, [r7, #20]
 802eb86:	611a      	str	r2, [r3, #16]
    npcb->listener = pcb;
 802eb88:	697b      	ldr	r3, [r7, #20]
 802eb8a:	687a      	ldr	r2, [r7, #4]
 802eb8c:	67da      	str	r2, [r3, #124]	; 0x7c
    npcb->so_options = pcb->so_options & SOF_INHERITED;
 802eb8e:	687b      	ldr	r3, [r7, #4]
 802eb90:	7a5b      	ldrb	r3, [r3, #9]
 802eb92:	f003 030c 	and.w	r3, r3, #12
 802eb96:	b2da      	uxtb	r2, r3
 802eb98:	697b      	ldr	r3, [r7, #20]
 802eb9a:	725a      	strb	r2, [r3, #9]
    npcb->netif_idx = pcb->netif_idx;
 802eb9c:	687b      	ldr	r3, [r7, #4]
 802eb9e:	7a1a      	ldrb	r2, [r3, #8]
 802eba0:	697b      	ldr	r3, [r7, #20]
 802eba2:	721a      	strb	r2, [r3, #8]
    TCP_REG_ACTIVE(npcb);
 802eba4:	4b2f      	ldr	r3, [pc, #188]	; (802ec64 <tcp_listen_input+0x208>)
 802eba6:	681a      	ldr	r2, [r3, #0]
 802eba8:	697b      	ldr	r3, [r7, #20]
 802ebaa:	60da      	str	r2, [r3, #12]
 802ebac:	4a2d      	ldr	r2, [pc, #180]	; (802ec64 <tcp_listen_input+0x208>)
 802ebae:	697b      	ldr	r3, [r7, #20]
 802ebb0:	6013      	str	r3, [r2, #0]
 802ebb2:	f003 fd79 	bl	80326a8 <tcp_timer_needed>
 802ebb6:	4b2c      	ldr	r3, [pc, #176]	; (802ec68 <tcp_listen_input+0x20c>)
 802ebb8:	2201      	movs	r2, #1
 802ebba:	701a      	strb	r2, [r3, #0]
    tcp_parseopt(npcb);
 802ebbc:	6978      	ldr	r0, [r7, #20]
 802ebbe:	f001 fd91 	bl	80306e4 <tcp_parseopt>
    npcb->snd_wnd = tcphdr->wnd;
 802ebc2:	4b23      	ldr	r3, [pc, #140]	; (802ec50 <tcp_listen_input+0x1f4>)
 802ebc4:	681b      	ldr	r3, [r3, #0]
 802ebc6:	89db      	ldrh	r3, [r3, #14]
 802ebc8:	b29a      	uxth	r2, r3
 802ebca:	697b      	ldr	r3, [r7, #20]
 802ebcc:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
    npcb->snd_wnd_max = npcb->snd_wnd;
 802ebd0:	697b      	ldr	r3, [r7, #20]
 802ebd2:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 802ebd6:	697b      	ldr	r3, [r7, #20]
 802ebd8:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
 802ebdc:	697b      	ldr	r3, [r7, #20]
 802ebde:	8e5c      	ldrh	r4, [r3, #50]	; 0x32
 802ebe0:	697b      	ldr	r3, [r7, #20]
 802ebe2:	3304      	adds	r3, #4
 802ebe4:	4618      	mov	r0, r3
 802ebe6:	f005 fb6b 	bl	80342c0 <ip4_route>
 802ebea:	4601      	mov	r1, r0
 802ebec:	697b      	ldr	r3, [r7, #20]
 802ebee:	3304      	adds	r3, #4
 802ebf0:	461a      	mov	r2, r3
 802ebf2:	4620      	mov	r0, r4
 802ebf4:	f7ff f9cc 	bl	802df90 <tcp_eff_send_mss_netif>
 802ebf8:	4603      	mov	r3, r0
 802ebfa:	461a      	mov	r2, r3
 802ebfc:	697b      	ldr	r3, [r7, #20]
 802ebfe:	865a      	strh	r2, [r3, #50]	; 0x32
    rc = tcp_enqueue_flags(npcb, TCP_SYN | TCP_ACK);
 802ec00:	2112      	movs	r1, #18
 802ec02:	6978      	ldr	r0, [r7, #20]
 802ec04:	f002 fcc6 	bl	8031594 <tcp_enqueue_flags>
 802ec08:	4603      	mov	r3, r0
 802ec0a:	73fb      	strb	r3, [r7, #15]
    if (rc != ERR_OK) {
 802ec0c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 802ec10:	2b00      	cmp	r3, #0
 802ec12:	d004      	beq.n	802ec1e <tcp_listen_input+0x1c2>
      tcp_abandon(npcb, 0);
 802ec14:	2100      	movs	r1, #0
 802ec16:	6978      	ldr	r0, [r7, #20]
 802ec18:	f7fd fe7a 	bl	802c910 <tcp_abandon>
      return;
 802ec1c:	e006      	b.n	802ec2c <tcp_listen_input+0x1d0>
    tcp_output(npcb);
 802ec1e:	6978      	ldr	r0, [r7, #20]
 802ec20:	f002 fdb8 	bl	8031794 <tcp_output>
  return;
 802ec24:	e001      	b.n	802ec2a <tcp_listen_input+0x1ce>
    return;
 802ec26:	bf00      	nop
 802ec28:	e000      	b.n	802ec2c <tcp_listen_input+0x1d0>
  return;
 802ec2a:	bf00      	nop
}
 802ec2c:	371c      	adds	r7, #28
 802ec2e:	46bd      	mov	sp, r7
 802ec30:	bd90      	pop	{r4, r7, pc}
 802ec32:	bf00      	nop
 802ec34:	2000ee50 	.word	0x2000ee50
 802ec38:	080392a8 	.word	0x080392a8
 802ec3c:	080394a0 	.word	0x080394a0
 802ec40:	080392f4 	.word	0x080392f4
 802ec44:	2000ee48 	.word	0x2000ee48
 802ec48:	2000ee4e 	.word	0x2000ee4e
 802ec4c:	2000ee44 	.word	0x2000ee44
 802ec50:	2000ee34 	.word	0x2000ee34
 802ec54:	2000b29c 	.word	0x2000b29c
 802ec58:	2000b2a0 	.word	0x2000b2a0
 802ec5c:	2000ed10 	.word	0x2000ed10
 802ec60:	2000b28c 	.word	0x2000b28c
 802ec64:	2000ee18 	.word	0x2000ee18
 802ec68:	2000ee20 	.word	0x2000ee20

0802ec6c <tcp_timewait_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_timewait_input(struct tcp_pcb *pcb)
{
 802ec6c:	b580      	push	{r7, lr}
 802ec6e:	b086      	sub	sp, #24
 802ec70:	af04      	add	r7, sp, #16
 802ec72:	6078      	str	r0, [r7, #4]
  /* RFC 1337: in TIME_WAIT, ignore RST and ACK FINs + any 'acceptable' segments */
  /* RFC 793 3.9 Event Processing - Segment Arrives:
   * - first check sequence number - we skip that one in TIME_WAIT (always
   *   acceptable since we only send ACKs)
   * - second check the RST bit (... return) */
  if (flags & TCP_RST) {
 802ec74:	4b2f      	ldr	r3, [pc, #188]	; (802ed34 <tcp_timewait_input+0xc8>)
 802ec76:	781b      	ldrb	r3, [r3, #0]
 802ec78:	f003 0304 	and.w	r3, r3, #4
 802ec7c:	2b00      	cmp	r3, #0
 802ec7e:	d153      	bne.n	802ed28 <tcp_timewait_input+0xbc>
    return;
  }

  LWIP_ASSERT("tcp_timewait_input: invalid pcb", pcb != NULL);
 802ec80:	687b      	ldr	r3, [r7, #4]
 802ec82:	2b00      	cmp	r3, #0
 802ec84:	d106      	bne.n	802ec94 <tcp_timewait_input+0x28>
 802ec86:	4b2c      	ldr	r3, [pc, #176]	; (802ed38 <tcp_timewait_input+0xcc>)
 802ec88:	f240 22ee 	movw	r2, #750	; 0x2ee
 802ec8c:	492b      	ldr	r1, [pc, #172]	; (802ed3c <tcp_timewait_input+0xd0>)
 802ec8e:	482c      	ldr	r0, [pc, #176]	; (802ed40 <tcp_timewait_input+0xd4>)
 802ec90:	f007 fa82 	bl	8036198 <iprintf>

  /* - fourth, check the SYN bit, */
  if (flags & TCP_SYN) {
 802ec94:	4b27      	ldr	r3, [pc, #156]	; (802ed34 <tcp_timewait_input+0xc8>)
 802ec96:	781b      	ldrb	r3, [r3, #0]
 802ec98:	f003 0302 	and.w	r3, r3, #2
 802ec9c:	2b00      	cmp	r3, #0
 802ec9e:	d02a      	beq.n	802ecf6 <tcp_timewait_input+0x8a>
    /* If an incoming segment is not acceptable, an acknowledgment
       should be sent in reply */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd)) {
 802eca0:	4b28      	ldr	r3, [pc, #160]	; (802ed44 <tcp_timewait_input+0xd8>)
 802eca2:	681a      	ldr	r2, [r3, #0]
 802eca4:	687b      	ldr	r3, [r7, #4]
 802eca6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 802eca8:	1ad3      	subs	r3, r2, r3
 802ecaa:	2b00      	cmp	r3, #0
 802ecac:	db2d      	blt.n	802ed0a <tcp_timewait_input+0x9e>
 802ecae:	4b25      	ldr	r3, [pc, #148]	; (802ed44 <tcp_timewait_input+0xd8>)
 802ecb0:	681a      	ldr	r2, [r3, #0]
 802ecb2:	687b      	ldr	r3, [r7, #4]
 802ecb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 802ecb6:	6879      	ldr	r1, [r7, #4]
 802ecb8:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 802ecba:	440b      	add	r3, r1
 802ecbc:	1ad3      	subs	r3, r2, r3
 802ecbe:	2b00      	cmp	r3, #0
 802ecc0:	dc23      	bgt.n	802ed0a <tcp_timewait_input+0x9e>
      /* If the SYN is in the window it is an error, send a reset */
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 802ecc2:	4b21      	ldr	r3, [pc, #132]	; (802ed48 <tcp_timewait_input+0xdc>)
 802ecc4:	6819      	ldr	r1, [r3, #0]
 802ecc6:	4b21      	ldr	r3, [pc, #132]	; (802ed4c <tcp_timewait_input+0xe0>)
 802ecc8:	881b      	ldrh	r3, [r3, #0]
 802ecca:	461a      	mov	r2, r3
 802eccc:	4b1d      	ldr	r3, [pc, #116]	; (802ed44 <tcp_timewait_input+0xd8>)
 802ecce:	681b      	ldr	r3, [r3, #0]
 802ecd0:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 802ecd2:	4b1f      	ldr	r3, [pc, #124]	; (802ed50 <tcp_timewait_input+0xe4>)
 802ecd4:	681b      	ldr	r3, [r3, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 802ecd6:	885b      	ldrh	r3, [r3, #2]
 802ecd8:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 802ecda:	4a1d      	ldr	r2, [pc, #116]	; (802ed50 <tcp_timewait_input+0xe4>)
 802ecdc:	6812      	ldr	r2, [r2, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 802ecde:	8812      	ldrh	r2, [r2, #0]
 802ece0:	b292      	uxth	r2, r2
 802ece2:	9202      	str	r2, [sp, #8]
 802ece4:	9301      	str	r3, [sp, #4]
 802ece6:	4b1b      	ldr	r3, [pc, #108]	; (802ed54 <tcp_timewait_input+0xe8>)
 802ece8:	9300      	str	r3, [sp, #0]
 802ecea:	4b1b      	ldr	r3, [pc, #108]	; (802ed58 <tcp_timewait_input+0xec>)
 802ecec:	4602      	mov	r2, r0
 802ecee:	6878      	ldr	r0, [r7, #4]
 802ecf0:	f003 fb18 	bl	8032324 <tcp_rst>
      return;
 802ecf4:	e01b      	b.n	802ed2e <tcp_timewait_input+0xc2>
    }
  } else if (flags & TCP_FIN) {
 802ecf6:	4b0f      	ldr	r3, [pc, #60]	; (802ed34 <tcp_timewait_input+0xc8>)
 802ecf8:	781b      	ldrb	r3, [r3, #0]
 802ecfa:	f003 0301 	and.w	r3, r3, #1
 802ecfe:	2b00      	cmp	r3, #0
 802ed00:	d003      	beq.n	802ed0a <tcp_timewait_input+0x9e>
    /* - eighth, check the FIN bit: Remain in the TIME-WAIT state.
         Restart the 2 MSL time-wait timeout.*/
    pcb->tmr = tcp_ticks;
 802ed02:	4b16      	ldr	r3, [pc, #88]	; (802ed5c <tcp_timewait_input+0xf0>)
 802ed04:	681a      	ldr	r2, [r3, #0]
 802ed06:	687b      	ldr	r3, [r7, #4]
 802ed08:	621a      	str	r2, [r3, #32]
  }

  if ((tcplen > 0)) {
 802ed0a:	4b10      	ldr	r3, [pc, #64]	; (802ed4c <tcp_timewait_input+0xe0>)
 802ed0c:	881b      	ldrh	r3, [r3, #0]
 802ed0e:	2b00      	cmp	r3, #0
 802ed10:	d00c      	beq.n	802ed2c <tcp_timewait_input+0xc0>
    /* Acknowledge data, FIN or out-of-window SYN */
    tcp_ack_now(pcb);
 802ed12:	687b      	ldr	r3, [r7, #4]
 802ed14:	8b5b      	ldrh	r3, [r3, #26]
 802ed16:	f043 0302 	orr.w	r3, r3, #2
 802ed1a:	b29a      	uxth	r2, r3
 802ed1c:	687b      	ldr	r3, [r7, #4]
 802ed1e:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 802ed20:	6878      	ldr	r0, [r7, #4]
 802ed22:	f002 fd37 	bl	8031794 <tcp_output>
  }
  return;
 802ed26:	e001      	b.n	802ed2c <tcp_timewait_input+0xc0>
    return;
 802ed28:	bf00      	nop
 802ed2a:	e000      	b.n	802ed2e <tcp_timewait_input+0xc2>
  return;
 802ed2c:	bf00      	nop
}
 802ed2e:	3708      	adds	r7, #8
 802ed30:	46bd      	mov	sp, r7
 802ed32:	bd80      	pop	{r7, pc}
 802ed34:	2000ee50 	.word	0x2000ee50
 802ed38:	080392a8 	.word	0x080392a8
 802ed3c:	080394c0 	.word	0x080394c0
 802ed40:	080392f4 	.word	0x080392f4
 802ed44:	2000ee44 	.word	0x2000ee44
 802ed48:	2000ee48 	.word	0x2000ee48
 802ed4c:	2000ee4e 	.word	0x2000ee4e
 802ed50:	2000ee34 	.word	0x2000ee34
 802ed54:	2000b29c 	.word	0x2000b29c
 802ed58:	2000b2a0 	.word	0x2000b2a0
 802ed5c:	2000ee0c 	.word	0x2000ee0c

0802ed60 <tcp_process>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static err_t
tcp_process(struct tcp_pcb *pcb)
{
 802ed60:	b590      	push	{r4, r7, lr}
 802ed62:	b08d      	sub	sp, #52	; 0x34
 802ed64:	af04      	add	r7, sp, #16
 802ed66:	6078      	str	r0, [r7, #4]
  struct tcp_seg *rseg;
  u8_t acceptable = 0;
 802ed68:	2300      	movs	r3, #0
 802ed6a:	76fb      	strb	r3, [r7, #27]
  err_t err;

  err = ERR_OK;
 802ed6c:	2300      	movs	r3, #0
 802ed6e:	76bb      	strb	r3, [r7, #26]

  LWIP_ASSERT("tcp_process: invalid pcb", pcb != NULL);
 802ed70:	687b      	ldr	r3, [r7, #4]
 802ed72:	2b00      	cmp	r3, #0
 802ed74:	d106      	bne.n	802ed84 <tcp_process+0x24>
 802ed76:	4b9d      	ldr	r3, [pc, #628]	; (802efec <tcp_process+0x28c>)
 802ed78:	f44f 7247 	mov.w	r2, #796	; 0x31c
 802ed7c:	499c      	ldr	r1, [pc, #624]	; (802eff0 <tcp_process+0x290>)
 802ed7e:	489d      	ldr	r0, [pc, #628]	; (802eff4 <tcp_process+0x294>)
 802ed80:	f007 fa0a 	bl	8036198 <iprintf>

  /* Process incoming RST segments. */
  if (flags & TCP_RST) {
 802ed84:	4b9c      	ldr	r3, [pc, #624]	; (802eff8 <tcp_process+0x298>)
 802ed86:	781b      	ldrb	r3, [r3, #0]
 802ed88:	f003 0304 	and.w	r3, r3, #4
 802ed8c:	2b00      	cmp	r3, #0
 802ed8e:	d04e      	beq.n	802ee2e <tcp_process+0xce>
    /* First, determine if the reset is acceptable. */
    if (pcb->state == SYN_SENT) {
 802ed90:	687b      	ldr	r3, [r7, #4]
 802ed92:	7d1b      	ldrb	r3, [r3, #20]
 802ed94:	2b02      	cmp	r3, #2
 802ed96:	d108      	bne.n	802edaa <tcp_process+0x4a>
      /* "In the SYN-SENT state (a RST received in response to an initial SYN),
          the RST is acceptable if the ACK field acknowledges the SYN." */
      if (ackno == pcb->snd_nxt) {
 802ed98:	687b      	ldr	r3, [r7, #4]
 802ed9a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 802ed9c:	4b97      	ldr	r3, [pc, #604]	; (802effc <tcp_process+0x29c>)
 802ed9e:	681b      	ldr	r3, [r3, #0]
 802eda0:	429a      	cmp	r2, r3
 802eda2:	d123      	bne.n	802edec <tcp_process+0x8c>
        acceptable = 1;
 802eda4:	2301      	movs	r3, #1
 802eda6:	76fb      	strb	r3, [r7, #27]
 802eda8:	e020      	b.n	802edec <tcp_process+0x8c>
      }
    } else {
      /* "In all states except SYN-SENT, all reset (RST) segments are validated
          by checking their SEQ-fields." */
      if (seqno == pcb->rcv_nxt) {
 802edaa:	687b      	ldr	r3, [r7, #4]
 802edac:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 802edae:	4b94      	ldr	r3, [pc, #592]	; (802f000 <tcp_process+0x2a0>)
 802edb0:	681b      	ldr	r3, [r3, #0]
 802edb2:	429a      	cmp	r2, r3
 802edb4:	d102      	bne.n	802edbc <tcp_process+0x5c>
        acceptable = 1;
 802edb6:	2301      	movs	r3, #1
 802edb8:	76fb      	strb	r3, [r7, #27]
 802edba:	e017      	b.n	802edec <tcp_process+0x8c>
      } else  if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 802edbc:	4b90      	ldr	r3, [pc, #576]	; (802f000 <tcp_process+0x2a0>)
 802edbe:	681a      	ldr	r2, [r3, #0]
 802edc0:	687b      	ldr	r3, [r7, #4]
 802edc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 802edc4:	1ad3      	subs	r3, r2, r3
 802edc6:	2b00      	cmp	r3, #0
 802edc8:	db10      	blt.n	802edec <tcp_process+0x8c>
 802edca:	4b8d      	ldr	r3, [pc, #564]	; (802f000 <tcp_process+0x2a0>)
 802edcc:	681a      	ldr	r2, [r3, #0]
 802edce:	687b      	ldr	r3, [r7, #4]
 802edd0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 802edd2:	6879      	ldr	r1, [r7, #4]
 802edd4:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 802edd6:	440b      	add	r3, r1
 802edd8:	1ad3      	subs	r3, r2, r3
 802edda:	2b00      	cmp	r3, #0
 802eddc:	dc06      	bgt.n	802edec <tcp_process+0x8c>
                                  pcb->rcv_nxt + pcb->rcv_wnd)) {
        /* If the sequence number is inside the window, we send a challenge ACK
           and wait for a re-send with matching sequence number.
           This follows RFC 5961 section 3.2 and addresses CVE-2004-0230
           (RST spoofing attack), which is present in RFC 793 RST handling. */
        tcp_ack_now(pcb);
 802edde:	687b      	ldr	r3, [r7, #4]
 802ede0:	8b5b      	ldrh	r3, [r3, #26]
 802ede2:	f043 0302 	orr.w	r3, r3, #2
 802ede6:	b29a      	uxth	r2, r3
 802ede8:	687b      	ldr	r3, [r7, #4]
 802edea:	835a      	strh	r2, [r3, #26]
      }
    }

    if (acceptable) {
 802edec:	7efb      	ldrb	r3, [r7, #27]
 802edee:	2b00      	cmp	r3, #0
 802edf0:	d01b      	beq.n	802ee2a <tcp_process+0xca>
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: Connection RESET\n"));
      LWIP_ASSERT("tcp_input: pcb->state != CLOSED", pcb->state != CLOSED);
 802edf2:	687b      	ldr	r3, [r7, #4]
 802edf4:	7d1b      	ldrb	r3, [r3, #20]
 802edf6:	2b00      	cmp	r3, #0
 802edf8:	d106      	bne.n	802ee08 <tcp_process+0xa8>
 802edfa:	4b7c      	ldr	r3, [pc, #496]	; (802efec <tcp_process+0x28c>)
 802edfc:	f44f 724e 	mov.w	r2, #824	; 0x338
 802ee00:	4980      	ldr	r1, [pc, #512]	; (802f004 <tcp_process+0x2a4>)
 802ee02:	487c      	ldr	r0, [pc, #496]	; (802eff4 <tcp_process+0x294>)
 802ee04:	f007 f9c8 	bl	8036198 <iprintf>
      recv_flags |= TF_RESET;
 802ee08:	4b7f      	ldr	r3, [pc, #508]	; (802f008 <tcp_process+0x2a8>)
 802ee0a:	781b      	ldrb	r3, [r3, #0]
 802ee0c:	f043 0308 	orr.w	r3, r3, #8
 802ee10:	b2da      	uxtb	r2, r3
 802ee12:	4b7d      	ldr	r3, [pc, #500]	; (802f008 <tcp_process+0x2a8>)
 802ee14:	701a      	strb	r2, [r3, #0]
      tcp_clear_flags(pcb, TF_ACK_DELAY);
 802ee16:	687b      	ldr	r3, [r7, #4]
 802ee18:	8b5b      	ldrh	r3, [r3, #26]
 802ee1a:	f023 0301 	bic.w	r3, r3, #1
 802ee1e:	b29a      	uxth	r2, r3
 802ee20:	687b      	ldr	r3, [r7, #4]
 802ee22:	835a      	strh	r2, [r3, #26]
      return ERR_RST;
 802ee24:	f06f 030d 	mvn.w	r3, #13
 802ee28:	e37a      	b.n	802f520 <tcp_process+0x7c0>
    } else {
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                                    seqno, pcb->rcv_nxt));
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                              seqno, pcb->rcv_nxt));
      return ERR_OK;
 802ee2a:	2300      	movs	r3, #0
 802ee2c:	e378      	b.n	802f520 <tcp_process+0x7c0>
    }
  }

  if ((flags & TCP_SYN) && (pcb->state != SYN_SENT && pcb->state != SYN_RCVD)) {
 802ee2e:	4b72      	ldr	r3, [pc, #456]	; (802eff8 <tcp_process+0x298>)
 802ee30:	781b      	ldrb	r3, [r3, #0]
 802ee32:	f003 0302 	and.w	r3, r3, #2
 802ee36:	2b00      	cmp	r3, #0
 802ee38:	d010      	beq.n	802ee5c <tcp_process+0xfc>
 802ee3a:	687b      	ldr	r3, [r7, #4]
 802ee3c:	7d1b      	ldrb	r3, [r3, #20]
 802ee3e:	2b02      	cmp	r3, #2
 802ee40:	d00c      	beq.n	802ee5c <tcp_process+0xfc>
 802ee42:	687b      	ldr	r3, [r7, #4]
 802ee44:	7d1b      	ldrb	r3, [r3, #20]
 802ee46:	2b03      	cmp	r3, #3
 802ee48:	d008      	beq.n	802ee5c <tcp_process+0xfc>
    /* Cope with new connection attempt after remote end crashed */
    tcp_ack_now(pcb);
 802ee4a:	687b      	ldr	r3, [r7, #4]
 802ee4c:	8b5b      	ldrh	r3, [r3, #26]
 802ee4e:	f043 0302 	orr.w	r3, r3, #2
 802ee52:	b29a      	uxth	r2, r3
 802ee54:	687b      	ldr	r3, [r7, #4]
 802ee56:	835a      	strh	r2, [r3, #26]
    return ERR_OK;
 802ee58:	2300      	movs	r3, #0
 802ee5a:	e361      	b.n	802f520 <tcp_process+0x7c0>
  }

  if ((pcb->flags & TF_RXCLOSED) == 0) {
 802ee5c:	687b      	ldr	r3, [r7, #4]
 802ee5e:	8b5b      	ldrh	r3, [r3, #26]
 802ee60:	f003 0310 	and.w	r3, r3, #16
 802ee64:	2b00      	cmp	r3, #0
 802ee66:	d103      	bne.n	802ee70 <tcp_process+0x110>
    /* Update the PCB (in)activity timer unless rx is closed (see tcp_shutdown) */
    pcb->tmr = tcp_ticks;
 802ee68:	4b68      	ldr	r3, [pc, #416]	; (802f00c <tcp_process+0x2ac>)
 802ee6a:	681a      	ldr	r2, [r3, #0]
 802ee6c:	687b      	ldr	r3, [r7, #4]
 802ee6e:	621a      	str	r2, [r3, #32]
  }
  pcb->keep_cnt_sent = 0;
 802ee70:	687b      	ldr	r3, [r7, #4]
 802ee72:	2200      	movs	r2, #0
 802ee74:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b
  pcb->persist_probe = 0;
 802ee78:	687b      	ldr	r3, [r7, #4]
 802ee7a:	2200      	movs	r2, #0
 802ee7c:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a

  tcp_parseopt(pcb);
 802ee80:	6878      	ldr	r0, [r7, #4]
 802ee82:	f001 fc2f 	bl	80306e4 <tcp_parseopt>

  /* Do different things depending on the TCP state. */
  switch (pcb->state) {
 802ee86:	687b      	ldr	r3, [r7, #4]
 802ee88:	7d1b      	ldrb	r3, [r3, #20]
 802ee8a:	3b02      	subs	r3, #2
 802ee8c:	2b07      	cmp	r3, #7
 802ee8e:	f200 8337 	bhi.w	802f500 <tcp_process+0x7a0>
 802ee92:	a201      	add	r2, pc, #4	; (adr r2, 802ee98 <tcp_process+0x138>)
 802ee94:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 802ee98:	0802eeb9 	.word	0x0802eeb9
 802ee9c:	0802f0e9 	.word	0x0802f0e9
 802eea0:	0802f261 	.word	0x0802f261
 802eea4:	0802f28b 	.word	0x0802f28b
 802eea8:	0802f3af 	.word	0x0802f3af
 802eeac:	0802f261 	.word	0x0802f261
 802eeb0:	0802f43b 	.word	0x0802f43b
 802eeb4:	0802f4cb 	.word	0x0802f4cb
    case SYN_SENT:
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("SYN-SENT: ackno %"U32_F" pcb->snd_nxt %"U32_F" unacked %"U32_F"\n", ackno,
                                    pcb->snd_nxt, lwip_ntohl(pcb->unacked->tcphdr->seqno)));
      /* received SYN ACK with expected sequence number? */
      if ((flags & TCP_ACK) && (flags & TCP_SYN)
 802eeb8:	4b4f      	ldr	r3, [pc, #316]	; (802eff8 <tcp_process+0x298>)
 802eeba:	781b      	ldrb	r3, [r3, #0]
 802eebc:	f003 0310 	and.w	r3, r3, #16
 802eec0:	2b00      	cmp	r3, #0
 802eec2:	f000 80e4 	beq.w	802f08e <tcp_process+0x32e>
 802eec6:	4b4c      	ldr	r3, [pc, #304]	; (802eff8 <tcp_process+0x298>)
 802eec8:	781b      	ldrb	r3, [r3, #0]
 802eeca:	f003 0302 	and.w	r3, r3, #2
 802eece:	2b00      	cmp	r3, #0
 802eed0:	f000 80dd 	beq.w	802f08e <tcp_process+0x32e>
          && (ackno == pcb->lastack + 1)) {
 802eed4:	687b      	ldr	r3, [r7, #4]
 802eed6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 802eed8:	1c5a      	adds	r2, r3, #1
 802eeda:	4b48      	ldr	r3, [pc, #288]	; (802effc <tcp_process+0x29c>)
 802eedc:	681b      	ldr	r3, [r3, #0]
 802eede:	429a      	cmp	r2, r3
 802eee0:	f040 80d5 	bne.w	802f08e <tcp_process+0x32e>
        pcb->rcv_nxt = seqno + 1;
 802eee4:	4b46      	ldr	r3, [pc, #280]	; (802f000 <tcp_process+0x2a0>)
 802eee6:	681b      	ldr	r3, [r3, #0]
 802eee8:	1c5a      	adds	r2, r3, #1
 802eeea:	687b      	ldr	r3, [r7, #4]
 802eeec:	625a      	str	r2, [r3, #36]	; 0x24
        pcb->rcv_ann_right_edge = pcb->rcv_nxt;
 802eeee:	687b      	ldr	r3, [r7, #4]
 802eef0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 802eef2:	687b      	ldr	r3, [r7, #4]
 802eef4:	62da      	str	r2, [r3, #44]	; 0x2c
        pcb->lastack = ackno;
 802eef6:	4b41      	ldr	r3, [pc, #260]	; (802effc <tcp_process+0x29c>)
 802eef8:	681a      	ldr	r2, [r3, #0]
 802eefa:	687b      	ldr	r3, [r7, #4]
 802eefc:	645a      	str	r2, [r3, #68]	; 0x44
        pcb->snd_wnd = tcphdr->wnd;
 802eefe:	4b44      	ldr	r3, [pc, #272]	; (802f010 <tcp_process+0x2b0>)
 802ef00:	681b      	ldr	r3, [r3, #0]
 802ef02:	89db      	ldrh	r3, [r3, #14]
 802ef04:	b29a      	uxth	r2, r3
 802ef06:	687b      	ldr	r3, [r7, #4]
 802ef08:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
        pcb->snd_wnd_max = pcb->snd_wnd;
 802ef0c:	687b      	ldr	r3, [r7, #4]
 802ef0e:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 802ef12:	687b      	ldr	r3, [r7, #4]
 802ef14:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
        pcb->snd_wl1 = seqno - 1; /* initialise to seqno - 1 to force window update */
 802ef18:	4b39      	ldr	r3, [pc, #228]	; (802f000 <tcp_process+0x2a0>)
 802ef1a:	681b      	ldr	r3, [r3, #0]
 802ef1c:	1e5a      	subs	r2, r3, #1
 802ef1e:	687b      	ldr	r3, [r7, #4]
 802ef20:	655a      	str	r2, [r3, #84]	; 0x54
        pcb->state = ESTABLISHED;
 802ef22:	687b      	ldr	r3, [r7, #4]
 802ef24:	2204      	movs	r2, #4
 802ef26:	751a      	strb	r2, [r3, #20]

#if TCP_CALCULATE_EFF_SEND_MSS
        pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 802ef28:	687b      	ldr	r3, [r7, #4]
 802ef2a:	8e5c      	ldrh	r4, [r3, #50]	; 0x32
 802ef2c:	687b      	ldr	r3, [r7, #4]
 802ef2e:	3304      	adds	r3, #4
 802ef30:	4618      	mov	r0, r3
 802ef32:	f005 f9c5 	bl	80342c0 <ip4_route>
 802ef36:	4601      	mov	r1, r0
 802ef38:	687b      	ldr	r3, [r7, #4]
 802ef3a:	3304      	adds	r3, #4
 802ef3c:	461a      	mov	r2, r3
 802ef3e:	4620      	mov	r0, r4
 802ef40:	f7ff f826 	bl	802df90 <tcp_eff_send_mss_netif>
 802ef44:	4603      	mov	r3, r0
 802ef46:	461a      	mov	r2, r3
 802ef48:	687b      	ldr	r3, [r7, #4]
 802ef4a:	865a      	strh	r2, [r3, #50]	; 0x32
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

        pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 802ef4c:	687b      	ldr	r3, [r7, #4]
 802ef4e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 802ef50:	009a      	lsls	r2, r3, #2
 802ef52:	687b      	ldr	r3, [r7, #4]
 802ef54:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 802ef56:	005b      	lsls	r3, r3, #1
 802ef58:	f241 111c 	movw	r1, #4380	; 0x111c
 802ef5c:	428b      	cmp	r3, r1
 802ef5e:	bf38      	it	cc
 802ef60:	460b      	movcc	r3, r1
 802ef62:	429a      	cmp	r2, r3
 802ef64:	d204      	bcs.n	802ef70 <tcp_process+0x210>
 802ef66:	687b      	ldr	r3, [r7, #4]
 802ef68:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 802ef6a:	009b      	lsls	r3, r3, #2
 802ef6c:	b29b      	uxth	r3, r3
 802ef6e:	e00d      	b.n	802ef8c <tcp_process+0x22c>
 802ef70:	687b      	ldr	r3, [r7, #4]
 802ef72:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 802ef74:	005b      	lsls	r3, r3, #1
 802ef76:	f241 121c 	movw	r2, #4380	; 0x111c
 802ef7a:	4293      	cmp	r3, r2
 802ef7c:	d904      	bls.n	802ef88 <tcp_process+0x228>
 802ef7e:	687b      	ldr	r3, [r7, #4]
 802ef80:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 802ef82:	005b      	lsls	r3, r3, #1
 802ef84:	b29b      	uxth	r3, r3
 802ef86:	e001      	b.n	802ef8c <tcp_process+0x22c>
 802ef88:	f241 131c 	movw	r3, #4380	; 0x111c
 802ef8c:	687a      	ldr	r2, [r7, #4]
 802ef8e:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
        LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SENT): cwnd %"TCPWNDSIZE_F
                                     " ssthresh %"TCPWNDSIZE_F"\n",
                                     pcb->cwnd, pcb->ssthresh));
        LWIP_ASSERT("pcb->snd_queuelen > 0", (pcb->snd_queuelen > 0));
 802ef92:	687b      	ldr	r3, [r7, #4]
 802ef94:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 802ef98:	2b00      	cmp	r3, #0
 802ef9a:	d106      	bne.n	802efaa <tcp_process+0x24a>
 802ef9c:	4b13      	ldr	r3, [pc, #76]	; (802efec <tcp_process+0x28c>)
 802ef9e:	f44f 725b 	mov.w	r2, #876	; 0x36c
 802efa2:	491c      	ldr	r1, [pc, #112]	; (802f014 <tcp_process+0x2b4>)
 802efa4:	4813      	ldr	r0, [pc, #76]	; (802eff4 <tcp_process+0x294>)
 802efa6:	f007 f8f7 	bl	8036198 <iprintf>
        --pcb->snd_queuelen;
 802efaa:	687b      	ldr	r3, [r7, #4]
 802efac:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 802efb0:	3b01      	subs	r3, #1
 802efb2:	b29a      	uxth	r2, r3
 802efb4:	687b      	ldr	r3, [r7, #4]
 802efb6:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
        LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_process: SYN-SENT --queuelen %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));
        rseg = pcb->unacked;
 802efba:	687b      	ldr	r3, [r7, #4]
 802efbc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 802efbe:	61fb      	str	r3, [r7, #28]
        if (rseg == NULL) {
 802efc0:	69fb      	ldr	r3, [r7, #28]
 802efc2:	2b00      	cmp	r3, #0
 802efc4:	d12a      	bne.n	802f01c <tcp_process+0x2bc>
          /* might happen if tcp_output fails in tcp_rexmit_rto()
             in which case the segment is on the unsent list */
          rseg = pcb->unsent;
 802efc6:	687b      	ldr	r3, [r7, #4]
 802efc8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 802efca:	61fb      	str	r3, [r7, #28]
          LWIP_ASSERT("no segment to free", rseg != NULL);
 802efcc:	69fb      	ldr	r3, [r7, #28]
 802efce:	2b00      	cmp	r3, #0
 802efd0:	d106      	bne.n	802efe0 <tcp_process+0x280>
 802efd2:	4b06      	ldr	r3, [pc, #24]	; (802efec <tcp_process+0x28c>)
 802efd4:	f44f 725d 	mov.w	r2, #884	; 0x374
 802efd8:	490f      	ldr	r1, [pc, #60]	; (802f018 <tcp_process+0x2b8>)
 802efda:	4806      	ldr	r0, [pc, #24]	; (802eff4 <tcp_process+0x294>)
 802efdc:	f007 f8dc 	bl	8036198 <iprintf>
          pcb->unsent = rseg->next;
 802efe0:	69fb      	ldr	r3, [r7, #28]
 802efe2:	681a      	ldr	r2, [r3, #0]
 802efe4:	687b      	ldr	r3, [r7, #4]
 802efe6:	66da      	str	r2, [r3, #108]	; 0x6c
 802efe8:	e01c      	b.n	802f024 <tcp_process+0x2c4>
 802efea:	bf00      	nop
 802efec:	080392a8 	.word	0x080392a8
 802eff0:	080394e0 	.word	0x080394e0
 802eff4:	080392f4 	.word	0x080392f4
 802eff8:	2000ee50 	.word	0x2000ee50
 802effc:	2000ee48 	.word	0x2000ee48
 802f000:	2000ee44 	.word	0x2000ee44
 802f004:	080394fc 	.word	0x080394fc
 802f008:	2000ee51 	.word	0x2000ee51
 802f00c:	2000ee0c 	.word	0x2000ee0c
 802f010:	2000ee34 	.word	0x2000ee34
 802f014:	0803951c 	.word	0x0803951c
 802f018:	08039534 	.word	0x08039534
        } else {
          pcb->unacked = rseg->next;
 802f01c:	69fb      	ldr	r3, [r7, #28]
 802f01e:	681a      	ldr	r2, [r3, #0]
 802f020:	687b      	ldr	r3, [r7, #4]
 802f022:	671a      	str	r2, [r3, #112]	; 0x70
        }
        tcp_seg_free(rseg);
 802f024:	69f8      	ldr	r0, [r7, #28]
 802f026:	f7fe fbc4 	bl	802d7b2 <tcp_seg_free>

        /* If there's nothing left to acknowledge, stop the retransmit
           timer, otherwise reset it to start again */
        if (pcb->unacked == NULL) {
 802f02a:	687b      	ldr	r3, [r7, #4]
 802f02c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 802f02e:	2b00      	cmp	r3, #0
 802f030:	d104      	bne.n	802f03c <tcp_process+0x2dc>
          pcb->rtime = -1;
 802f032:	687b      	ldr	r3, [r7, #4]
 802f034:	f64f 72ff 	movw	r2, #65535	; 0xffff
 802f038:	861a      	strh	r2, [r3, #48]	; 0x30
 802f03a:	e006      	b.n	802f04a <tcp_process+0x2ea>
        } else {
          pcb->rtime = 0;
 802f03c:	687b      	ldr	r3, [r7, #4]
 802f03e:	2200      	movs	r2, #0
 802f040:	861a      	strh	r2, [r3, #48]	; 0x30
          pcb->nrtx = 0;
 802f042:	687b      	ldr	r3, [r7, #4]
 802f044:	2200      	movs	r2, #0
 802f046:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        }

        /* Call the user specified function to call when successfully
         * connected. */
        TCP_EVENT_CONNECTED(pcb, ERR_OK, err);
 802f04a:	687b      	ldr	r3, [r7, #4]
 802f04c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 802f050:	2b00      	cmp	r3, #0
 802f052:	d00a      	beq.n	802f06a <tcp_process+0x30a>
 802f054:	687b      	ldr	r3, [r7, #4]
 802f056:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 802f05a:	687a      	ldr	r2, [r7, #4]
 802f05c:	6910      	ldr	r0, [r2, #16]
 802f05e:	2200      	movs	r2, #0
 802f060:	6879      	ldr	r1, [r7, #4]
 802f062:	4798      	blx	r3
 802f064:	4603      	mov	r3, r0
 802f066:	76bb      	strb	r3, [r7, #26]
 802f068:	e001      	b.n	802f06e <tcp_process+0x30e>
 802f06a:	2300      	movs	r3, #0
 802f06c:	76bb      	strb	r3, [r7, #26]
        if (err == ERR_ABRT) {
 802f06e:	f997 301a 	ldrsb.w	r3, [r7, #26]
 802f072:	f113 0f0d 	cmn.w	r3, #13
 802f076:	d102      	bne.n	802f07e <tcp_process+0x31e>
          return ERR_ABRT;
 802f078:	f06f 030c 	mvn.w	r3, #12
 802f07c:	e250      	b.n	802f520 <tcp_process+0x7c0>
        }
        tcp_ack_now(pcb);
 802f07e:	687b      	ldr	r3, [r7, #4]
 802f080:	8b5b      	ldrh	r3, [r3, #26]
 802f082:	f043 0302 	orr.w	r3, r3, #2
 802f086:	b29a      	uxth	r2, r3
 802f088:	687b      	ldr	r3, [r7, #4]
 802f08a:	835a      	strh	r2, [r3, #26]
        if (pcb->nrtx < TCP_SYNMAXRTX) {
          pcb->rtime = 0;
          tcp_rexmit_rto(pcb);
        }
      }
      break;
 802f08c:	e23a      	b.n	802f504 <tcp_process+0x7a4>
      else if (flags & TCP_ACK) {
 802f08e:	4b98      	ldr	r3, [pc, #608]	; (802f2f0 <tcp_process+0x590>)
 802f090:	781b      	ldrb	r3, [r3, #0]
 802f092:	f003 0310 	and.w	r3, r3, #16
 802f096:	2b00      	cmp	r3, #0
 802f098:	f000 8234 	beq.w	802f504 <tcp_process+0x7a4>
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 802f09c:	4b95      	ldr	r3, [pc, #596]	; (802f2f4 <tcp_process+0x594>)
 802f09e:	6819      	ldr	r1, [r3, #0]
 802f0a0:	4b95      	ldr	r3, [pc, #596]	; (802f2f8 <tcp_process+0x598>)
 802f0a2:	881b      	ldrh	r3, [r3, #0]
 802f0a4:	461a      	mov	r2, r3
 802f0a6:	4b95      	ldr	r3, [pc, #596]	; (802f2fc <tcp_process+0x59c>)
 802f0a8:	681b      	ldr	r3, [r3, #0]
 802f0aa:	18d0      	adds	r0, r2, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 802f0ac:	4b94      	ldr	r3, [pc, #592]	; (802f300 <tcp_process+0x5a0>)
 802f0ae:	681b      	ldr	r3, [r3, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 802f0b0:	885b      	ldrh	r3, [r3, #2]
 802f0b2:	b29b      	uxth	r3, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 802f0b4:	4a92      	ldr	r2, [pc, #584]	; (802f300 <tcp_process+0x5a0>)
 802f0b6:	6812      	ldr	r2, [r2, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 802f0b8:	8812      	ldrh	r2, [r2, #0]
 802f0ba:	b292      	uxth	r2, r2
 802f0bc:	9202      	str	r2, [sp, #8]
 802f0be:	9301      	str	r3, [sp, #4]
 802f0c0:	4b90      	ldr	r3, [pc, #576]	; (802f304 <tcp_process+0x5a4>)
 802f0c2:	9300      	str	r3, [sp, #0]
 802f0c4:	4b90      	ldr	r3, [pc, #576]	; (802f308 <tcp_process+0x5a8>)
 802f0c6:	4602      	mov	r2, r0
 802f0c8:	6878      	ldr	r0, [r7, #4]
 802f0ca:	f003 f92b 	bl	8032324 <tcp_rst>
        if (pcb->nrtx < TCP_SYNMAXRTX) {
 802f0ce:	687b      	ldr	r3, [r7, #4]
 802f0d0:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 802f0d4:	2b05      	cmp	r3, #5
 802f0d6:	f200 8215 	bhi.w	802f504 <tcp_process+0x7a4>
          pcb->rtime = 0;
 802f0da:	687b      	ldr	r3, [r7, #4]
 802f0dc:	2200      	movs	r2, #0
 802f0de:	861a      	strh	r2, [r3, #48]	; 0x30
          tcp_rexmit_rto(pcb);
 802f0e0:	6878      	ldr	r0, [r7, #4]
 802f0e2:	f002 feeb 	bl	8031ebc <tcp_rexmit_rto>
      break;
 802f0e6:	e20d      	b.n	802f504 <tcp_process+0x7a4>
    case SYN_RCVD:
      if (flags & TCP_ACK) {
 802f0e8:	4b81      	ldr	r3, [pc, #516]	; (802f2f0 <tcp_process+0x590>)
 802f0ea:	781b      	ldrb	r3, [r3, #0]
 802f0ec:	f003 0310 	and.w	r3, r3, #16
 802f0f0:	2b00      	cmp	r3, #0
 802f0f2:	f000 80a1 	beq.w	802f238 <tcp_process+0x4d8>
        /* expected ACK number? */
        if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 802f0f6:	4b7f      	ldr	r3, [pc, #508]	; (802f2f4 <tcp_process+0x594>)
 802f0f8:	681a      	ldr	r2, [r3, #0]
 802f0fa:	687b      	ldr	r3, [r7, #4]
 802f0fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 802f0fe:	1ad3      	subs	r3, r2, r3
 802f100:	3b01      	subs	r3, #1
 802f102:	2b00      	cmp	r3, #0
 802f104:	db7e      	blt.n	802f204 <tcp_process+0x4a4>
 802f106:	4b7b      	ldr	r3, [pc, #492]	; (802f2f4 <tcp_process+0x594>)
 802f108:	681a      	ldr	r2, [r3, #0]
 802f10a:	687b      	ldr	r3, [r7, #4]
 802f10c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 802f10e:	1ad3      	subs	r3, r2, r3
 802f110:	2b00      	cmp	r3, #0
 802f112:	dc77      	bgt.n	802f204 <tcp_process+0x4a4>
          pcb->state = ESTABLISHED;
 802f114:	687b      	ldr	r3, [r7, #4]
 802f116:	2204      	movs	r2, #4
 802f118:	751a      	strb	r2, [r3, #20]
          LWIP_DEBUGF(TCP_DEBUG, ("TCP connection established %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
          if (pcb->listener == NULL) {
 802f11a:	687b      	ldr	r3, [r7, #4]
 802f11c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 802f11e:	2b00      	cmp	r3, #0
 802f120:	d102      	bne.n	802f128 <tcp_process+0x3c8>
            /* listen pcb might be closed by now */
            err = ERR_VAL;
 802f122:	23fa      	movs	r3, #250	; 0xfa
 802f124:	76bb      	strb	r3, [r7, #26]
 802f126:	e01d      	b.n	802f164 <tcp_process+0x404>
          } else
#endif /* LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG */
          {
#if LWIP_CALLBACK_API
            LWIP_ASSERT("pcb->listener->accept != NULL", pcb->listener->accept != NULL);
 802f128:	687b      	ldr	r3, [r7, #4]
 802f12a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 802f12c:	699b      	ldr	r3, [r3, #24]
 802f12e:	2b00      	cmp	r3, #0
 802f130:	d106      	bne.n	802f140 <tcp_process+0x3e0>
 802f132:	4b76      	ldr	r3, [pc, #472]	; (802f30c <tcp_process+0x5ac>)
 802f134:	f44f 726a 	mov.w	r2, #936	; 0x3a8
 802f138:	4975      	ldr	r1, [pc, #468]	; (802f310 <tcp_process+0x5b0>)
 802f13a:	4876      	ldr	r0, [pc, #472]	; (802f314 <tcp_process+0x5b4>)
 802f13c:	f007 f82c 	bl	8036198 <iprintf>
#endif
            tcp_backlog_accepted(pcb);
            /* Call the accept function. */
            TCP_EVENT_ACCEPT(pcb->listener, pcb, pcb->callback_arg, ERR_OK, err);
 802f140:	687b      	ldr	r3, [r7, #4]
 802f142:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 802f144:	699b      	ldr	r3, [r3, #24]
 802f146:	2b00      	cmp	r3, #0
 802f148:	d00a      	beq.n	802f160 <tcp_process+0x400>
 802f14a:	687b      	ldr	r3, [r7, #4]
 802f14c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 802f14e:	699b      	ldr	r3, [r3, #24]
 802f150:	687a      	ldr	r2, [r7, #4]
 802f152:	6910      	ldr	r0, [r2, #16]
 802f154:	2200      	movs	r2, #0
 802f156:	6879      	ldr	r1, [r7, #4]
 802f158:	4798      	blx	r3
 802f15a:	4603      	mov	r3, r0
 802f15c:	76bb      	strb	r3, [r7, #26]
 802f15e:	e001      	b.n	802f164 <tcp_process+0x404>
 802f160:	23f0      	movs	r3, #240	; 0xf0
 802f162:	76bb      	strb	r3, [r7, #26]
          }
          if (err != ERR_OK) {
 802f164:	f997 301a 	ldrsb.w	r3, [r7, #26]
 802f168:	2b00      	cmp	r3, #0
 802f16a:	d00a      	beq.n	802f182 <tcp_process+0x422>
            /* If the accept function returns with an error, we abort
             * the connection. */
            /* Already aborted? */
            if (err != ERR_ABRT) {
 802f16c:	f997 301a 	ldrsb.w	r3, [r7, #26]
 802f170:	f113 0f0d 	cmn.w	r3, #13
 802f174:	d002      	beq.n	802f17c <tcp_process+0x41c>
              tcp_abort(pcb);
 802f176:	6878      	ldr	r0, [r7, #4]
 802f178:	f7fd fc88 	bl	802ca8c <tcp_abort>
            }
            return ERR_ABRT;
 802f17c:	f06f 030c 	mvn.w	r3, #12
 802f180:	e1ce      	b.n	802f520 <tcp_process+0x7c0>
          }
          /* If there was any data contained within this ACK,
           * we'd better pass it on to the application as well. */
          tcp_receive(pcb);
 802f182:	6878      	ldr	r0, [r7, #4]
 802f184:	f000 fae0 	bl	802f748 <tcp_receive>

          /* Prevent ACK for SYN to generate a sent event */
          if (recv_acked != 0) {
 802f188:	4b63      	ldr	r3, [pc, #396]	; (802f318 <tcp_process+0x5b8>)
 802f18a:	881b      	ldrh	r3, [r3, #0]
 802f18c:	2b00      	cmp	r3, #0
 802f18e:	d005      	beq.n	802f19c <tcp_process+0x43c>
            recv_acked--;
 802f190:	4b61      	ldr	r3, [pc, #388]	; (802f318 <tcp_process+0x5b8>)
 802f192:	881b      	ldrh	r3, [r3, #0]
 802f194:	3b01      	subs	r3, #1
 802f196:	b29a      	uxth	r2, r3
 802f198:	4b5f      	ldr	r3, [pc, #380]	; (802f318 <tcp_process+0x5b8>)
 802f19a:	801a      	strh	r2, [r3, #0]
          }

          pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 802f19c:	687b      	ldr	r3, [r7, #4]
 802f19e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 802f1a0:	009a      	lsls	r2, r3, #2
 802f1a2:	687b      	ldr	r3, [r7, #4]
 802f1a4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 802f1a6:	005b      	lsls	r3, r3, #1
 802f1a8:	f241 111c 	movw	r1, #4380	; 0x111c
 802f1ac:	428b      	cmp	r3, r1
 802f1ae:	bf38      	it	cc
 802f1b0:	460b      	movcc	r3, r1
 802f1b2:	429a      	cmp	r2, r3
 802f1b4:	d204      	bcs.n	802f1c0 <tcp_process+0x460>
 802f1b6:	687b      	ldr	r3, [r7, #4]
 802f1b8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 802f1ba:	009b      	lsls	r3, r3, #2
 802f1bc:	b29b      	uxth	r3, r3
 802f1be:	e00d      	b.n	802f1dc <tcp_process+0x47c>
 802f1c0:	687b      	ldr	r3, [r7, #4]
 802f1c2:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 802f1c4:	005b      	lsls	r3, r3, #1
 802f1c6:	f241 121c 	movw	r2, #4380	; 0x111c
 802f1ca:	4293      	cmp	r3, r2
 802f1cc:	d904      	bls.n	802f1d8 <tcp_process+0x478>
 802f1ce:	687b      	ldr	r3, [r7, #4]
 802f1d0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 802f1d2:	005b      	lsls	r3, r3, #1
 802f1d4:	b29b      	uxth	r3, r3
 802f1d6:	e001      	b.n	802f1dc <tcp_process+0x47c>
 802f1d8:	f241 131c 	movw	r3, #4380	; 0x111c
 802f1dc:	687a      	ldr	r2, [r7, #4]
 802f1de:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SYN_RCVD): cwnd %"TCPWNDSIZE_F
                                       " ssthresh %"TCPWNDSIZE_F"\n",
                                       pcb->cwnd, pcb->ssthresh));

          if (recv_flags & TF_GOT_FIN) {
 802f1e2:	4b4e      	ldr	r3, [pc, #312]	; (802f31c <tcp_process+0x5bc>)
 802f1e4:	781b      	ldrb	r3, [r3, #0]
 802f1e6:	f003 0320 	and.w	r3, r3, #32
 802f1ea:	2b00      	cmp	r3, #0
 802f1ec:	d037      	beq.n	802f25e <tcp_process+0x4fe>
            tcp_ack_now(pcb);
 802f1ee:	687b      	ldr	r3, [r7, #4]
 802f1f0:	8b5b      	ldrh	r3, [r3, #26]
 802f1f2:	f043 0302 	orr.w	r3, r3, #2
 802f1f6:	b29a      	uxth	r2, r3
 802f1f8:	687b      	ldr	r3, [r7, #4]
 802f1fa:	835a      	strh	r2, [r3, #26]
            pcb->state = CLOSE_WAIT;
 802f1fc:	687b      	ldr	r3, [r7, #4]
 802f1fe:	2207      	movs	r2, #7
 802f200:	751a      	strb	r2, [r3, #20]
          if (recv_flags & TF_GOT_FIN) {
 802f202:	e02c      	b.n	802f25e <tcp_process+0x4fe>
          }
        } else {
          /* incorrect ACK number, send RST */
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 802f204:	4b3b      	ldr	r3, [pc, #236]	; (802f2f4 <tcp_process+0x594>)
 802f206:	6819      	ldr	r1, [r3, #0]
 802f208:	4b3b      	ldr	r3, [pc, #236]	; (802f2f8 <tcp_process+0x598>)
 802f20a:	881b      	ldrh	r3, [r3, #0]
 802f20c:	461a      	mov	r2, r3
 802f20e:	4b3b      	ldr	r3, [pc, #236]	; (802f2fc <tcp_process+0x59c>)
 802f210:	681b      	ldr	r3, [r3, #0]
 802f212:	18d0      	adds	r0, r2, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 802f214:	4b3a      	ldr	r3, [pc, #232]	; (802f300 <tcp_process+0x5a0>)
 802f216:	681b      	ldr	r3, [r3, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 802f218:	885b      	ldrh	r3, [r3, #2]
 802f21a:	b29b      	uxth	r3, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 802f21c:	4a38      	ldr	r2, [pc, #224]	; (802f300 <tcp_process+0x5a0>)
 802f21e:	6812      	ldr	r2, [r2, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 802f220:	8812      	ldrh	r2, [r2, #0]
 802f222:	b292      	uxth	r2, r2
 802f224:	9202      	str	r2, [sp, #8]
 802f226:	9301      	str	r3, [sp, #4]
 802f228:	4b36      	ldr	r3, [pc, #216]	; (802f304 <tcp_process+0x5a4>)
 802f22a:	9300      	str	r3, [sp, #0]
 802f22c:	4b36      	ldr	r3, [pc, #216]	; (802f308 <tcp_process+0x5a8>)
 802f22e:	4602      	mov	r2, r0
 802f230:	6878      	ldr	r0, [r7, #4]
 802f232:	f003 f877 	bl	8032324 <tcp_rst>
        }
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
        /* Looks like another copy of the SYN - retransmit our SYN-ACK */
        tcp_rexmit(pcb);
      }
      break;
 802f236:	e167      	b.n	802f508 <tcp_process+0x7a8>
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
 802f238:	4b2d      	ldr	r3, [pc, #180]	; (802f2f0 <tcp_process+0x590>)
 802f23a:	781b      	ldrb	r3, [r3, #0]
 802f23c:	f003 0302 	and.w	r3, r3, #2
 802f240:	2b00      	cmp	r3, #0
 802f242:	f000 8161 	beq.w	802f508 <tcp_process+0x7a8>
 802f246:	687b      	ldr	r3, [r7, #4]
 802f248:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 802f24a:	1e5a      	subs	r2, r3, #1
 802f24c:	4b2b      	ldr	r3, [pc, #172]	; (802f2fc <tcp_process+0x59c>)
 802f24e:	681b      	ldr	r3, [r3, #0]
 802f250:	429a      	cmp	r2, r3
 802f252:	f040 8159 	bne.w	802f508 <tcp_process+0x7a8>
        tcp_rexmit(pcb);
 802f256:	6878      	ldr	r0, [r7, #4]
 802f258:	f002 fe52 	bl	8031f00 <tcp_rexmit>
      break;
 802f25c:	e154      	b.n	802f508 <tcp_process+0x7a8>
 802f25e:	e153      	b.n	802f508 <tcp_process+0x7a8>
    case CLOSE_WAIT:
    /* FALLTHROUGH */
    case ESTABLISHED:
      tcp_receive(pcb);
 802f260:	6878      	ldr	r0, [r7, #4]
 802f262:	f000 fa71 	bl	802f748 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) { /* passive close */
 802f266:	4b2d      	ldr	r3, [pc, #180]	; (802f31c <tcp_process+0x5bc>)
 802f268:	781b      	ldrb	r3, [r3, #0]
 802f26a:	f003 0320 	and.w	r3, r3, #32
 802f26e:	2b00      	cmp	r3, #0
 802f270:	f000 814c 	beq.w	802f50c <tcp_process+0x7ac>
        tcp_ack_now(pcb);
 802f274:	687b      	ldr	r3, [r7, #4]
 802f276:	8b5b      	ldrh	r3, [r3, #26]
 802f278:	f043 0302 	orr.w	r3, r3, #2
 802f27c:	b29a      	uxth	r2, r3
 802f27e:	687b      	ldr	r3, [r7, #4]
 802f280:	835a      	strh	r2, [r3, #26]
        pcb->state = CLOSE_WAIT;
 802f282:	687b      	ldr	r3, [r7, #4]
 802f284:	2207      	movs	r2, #7
 802f286:	751a      	strb	r2, [r3, #20]
      }
      break;
 802f288:	e140      	b.n	802f50c <tcp_process+0x7ac>
    case FIN_WAIT_1:
      tcp_receive(pcb);
 802f28a:	6878      	ldr	r0, [r7, #4]
 802f28c:	f000 fa5c 	bl	802f748 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 802f290:	4b22      	ldr	r3, [pc, #136]	; (802f31c <tcp_process+0x5bc>)
 802f292:	781b      	ldrb	r3, [r3, #0]
 802f294:	f003 0320 	and.w	r3, r3, #32
 802f298:	2b00      	cmp	r3, #0
 802f29a:	d071      	beq.n	802f380 <tcp_process+0x620>
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 802f29c:	4b14      	ldr	r3, [pc, #80]	; (802f2f0 <tcp_process+0x590>)
 802f29e:	781b      	ldrb	r3, [r3, #0]
 802f2a0:	f003 0310 	and.w	r3, r3, #16
 802f2a4:	2b00      	cmp	r3, #0
 802f2a6:	d060      	beq.n	802f36a <tcp_process+0x60a>
 802f2a8:	687b      	ldr	r3, [r7, #4]
 802f2aa:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 802f2ac:	4b11      	ldr	r3, [pc, #68]	; (802f2f4 <tcp_process+0x594>)
 802f2ae:	681b      	ldr	r3, [r3, #0]
 802f2b0:	429a      	cmp	r2, r3
 802f2b2:	d15a      	bne.n	802f36a <tcp_process+0x60a>
            pcb->unsent == NULL) {
 802f2b4:	687b      	ldr	r3, [r7, #4]
 802f2b6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 802f2b8:	2b00      	cmp	r3, #0
 802f2ba:	d156      	bne.n	802f36a <tcp_process+0x60a>
          LWIP_DEBUGF(TCP_DEBUG,
                      ("TCP connection closed: FIN_WAIT_1 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
          tcp_ack_now(pcb);
 802f2bc:	687b      	ldr	r3, [r7, #4]
 802f2be:	8b5b      	ldrh	r3, [r3, #26]
 802f2c0:	f043 0302 	orr.w	r3, r3, #2
 802f2c4:	b29a      	uxth	r2, r3
 802f2c6:	687b      	ldr	r3, [r7, #4]
 802f2c8:	835a      	strh	r2, [r3, #26]
          tcp_pcb_purge(pcb);
 802f2ca:	6878      	ldr	r0, [r7, #4]
 802f2cc:	f7fe fd56 	bl	802dd7c <tcp_pcb_purge>
          TCP_RMV_ACTIVE(pcb);
 802f2d0:	4b13      	ldr	r3, [pc, #76]	; (802f320 <tcp_process+0x5c0>)
 802f2d2:	681b      	ldr	r3, [r3, #0]
 802f2d4:	687a      	ldr	r2, [r7, #4]
 802f2d6:	429a      	cmp	r2, r3
 802f2d8:	d105      	bne.n	802f2e6 <tcp_process+0x586>
 802f2da:	4b11      	ldr	r3, [pc, #68]	; (802f320 <tcp_process+0x5c0>)
 802f2dc:	681b      	ldr	r3, [r3, #0]
 802f2de:	68db      	ldr	r3, [r3, #12]
 802f2e0:	4a0f      	ldr	r2, [pc, #60]	; (802f320 <tcp_process+0x5c0>)
 802f2e2:	6013      	str	r3, [r2, #0]
 802f2e4:	e02e      	b.n	802f344 <tcp_process+0x5e4>
 802f2e6:	4b0e      	ldr	r3, [pc, #56]	; (802f320 <tcp_process+0x5c0>)
 802f2e8:	681b      	ldr	r3, [r3, #0]
 802f2ea:	617b      	str	r3, [r7, #20]
 802f2ec:	e027      	b.n	802f33e <tcp_process+0x5de>
 802f2ee:	bf00      	nop
 802f2f0:	2000ee50 	.word	0x2000ee50
 802f2f4:	2000ee48 	.word	0x2000ee48
 802f2f8:	2000ee4e 	.word	0x2000ee4e
 802f2fc:	2000ee44 	.word	0x2000ee44
 802f300:	2000ee34 	.word	0x2000ee34
 802f304:	2000b29c 	.word	0x2000b29c
 802f308:	2000b2a0 	.word	0x2000b2a0
 802f30c:	080392a8 	.word	0x080392a8
 802f310:	08039548 	.word	0x08039548
 802f314:	080392f4 	.word	0x080392f4
 802f318:	2000ee4c 	.word	0x2000ee4c
 802f31c:	2000ee51 	.word	0x2000ee51
 802f320:	2000ee18 	.word	0x2000ee18
 802f324:	697b      	ldr	r3, [r7, #20]
 802f326:	68db      	ldr	r3, [r3, #12]
 802f328:	687a      	ldr	r2, [r7, #4]
 802f32a:	429a      	cmp	r2, r3
 802f32c:	d104      	bne.n	802f338 <tcp_process+0x5d8>
 802f32e:	687b      	ldr	r3, [r7, #4]
 802f330:	68da      	ldr	r2, [r3, #12]
 802f332:	697b      	ldr	r3, [r7, #20]
 802f334:	60da      	str	r2, [r3, #12]
 802f336:	e005      	b.n	802f344 <tcp_process+0x5e4>
 802f338:	697b      	ldr	r3, [r7, #20]
 802f33a:	68db      	ldr	r3, [r3, #12]
 802f33c:	617b      	str	r3, [r7, #20]
 802f33e:	697b      	ldr	r3, [r7, #20]
 802f340:	2b00      	cmp	r3, #0
 802f342:	d1ef      	bne.n	802f324 <tcp_process+0x5c4>
 802f344:	687b      	ldr	r3, [r7, #4]
 802f346:	2200      	movs	r2, #0
 802f348:	60da      	str	r2, [r3, #12]
 802f34a:	4b77      	ldr	r3, [pc, #476]	; (802f528 <tcp_process+0x7c8>)
 802f34c:	2201      	movs	r2, #1
 802f34e:	701a      	strb	r2, [r3, #0]
          pcb->state = TIME_WAIT;
 802f350:	687b      	ldr	r3, [r7, #4]
 802f352:	220a      	movs	r2, #10
 802f354:	751a      	strb	r2, [r3, #20]
          TCP_REG(&tcp_tw_pcbs, pcb);
 802f356:	4b75      	ldr	r3, [pc, #468]	; (802f52c <tcp_process+0x7cc>)
 802f358:	681a      	ldr	r2, [r3, #0]
 802f35a:	687b      	ldr	r3, [r7, #4]
 802f35c:	60da      	str	r2, [r3, #12]
 802f35e:	4a73      	ldr	r2, [pc, #460]	; (802f52c <tcp_process+0x7cc>)
 802f360:	687b      	ldr	r3, [r7, #4]
 802f362:	6013      	str	r3, [r2, #0]
 802f364:	f003 f9a0 	bl	80326a8 <tcp_timer_needed>
        }
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
                 pcb->unsent == NULL) {
        pcb->state = FIN_WAIT_2;
      }
      break;
 802f368:	e0d2      	b.n	802f510 <tcp_process+0x7b0>
          tcp_ack_now(pcb);
 802f36a:	687b      	ldr	r3, [r7, #4]
 802f36c:	8b5b      	ldrh	r3, [r3, #26]
 802f36e:	f043 0302 	orr.w	r3, r3, #2
 802f372:	b29a      	uxth	r2, r3
 802f374:	687b      	ldr	r3, [r7, #4]
 802f376:	835a      	strh	r2, [r3, #26]
          pcb->state = CLOSING;
 802f378:	687b      	ldr	r3, [r7, #4]
 802f37a:	2208      	movs	r2, #8
 802f37c:	751a      	strb	r2, [r3, #20]
      break;
 802f37e:	e0c7      	b.n	802f510 <tcp_process+0x7b0>
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 802f380:	4b6b      	ldr	r3, [pc, #428]	; (802f530 <tcp_process+0x7d0>)
 802f382:	781b      	ldrb	r3, [r3, #0]
 802f384:	f003 0310 	and.w	r3, r3, #16
 802f388:	2b00      	cmp	r3, #0
 802f38a:	f000 80c1 	beq.w	802f510 <tcp_process+0x7b0>
 802f38e:	687b      	ldr	r3, [r7, #4]
 802f390:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 802f392:	4b68      	ldr	r3, [pc, #416]	; (802f534 <tcp_process+0x7d4>)
 802f394:	681b      	ldr	r3, [r3, #0]
 802f396:	429a      	cmp	r2, r3
 802f398:	f040 80ba 	bne.w	802f510 <tcp_process+0x7b0>
                 pcb->unsent == NULL) {
 802f39c:	687b      	ldr	r3, [r7, #4]
 802f39e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 802f3a0:	2b00      	cmp	r3, #0
 802f3a2:	f040 80b5 	bne.w	802f510 <tcp_process+0x7b0>
        pcb->state = FIN_WAIT_2;
 802f3a6:	687b      	ldr	r3, [r7, #4]
 802f3a8:	2206      	movs	r2, #6
 802f3aa:	751a      	strb	r2, [r3, #20]
      break;
 802f3ac:	e0b0      	b.n	802f510 <tcp_process+0x7b0>
    case FIN_WAIT_2:
      tcp_receive(pcb);
 802f3ae:	6878      	ldr	r0, [r7, #4]
 802f3b0:	f000 f9ca 	bl	802f748 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 802f3b4:	4b60      	ldr	r3, [pc, #384]	; (802f538 <tcp_process+0x7d8>)
 802f3b6:	781b      	ldrb	r3, [r3, #0]
 802f3b8:	f003 0320 	and.w	r3, r3, #32
 802f3bc:	2b00      	cmp	r3, #0
 802f3be:	f000 80a9 	beq.w	802f514 <tcp_process+0x7b4>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: FIN_WAIT_2 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_ack_now(pcb);
 802f3c2:	687b      	ldr	r3, [r7, #4]
 802f3c4:	8b5b      	ldrh	r3, [r3, #26]
 802f3c6:	f043 0302 	orr.w	r3, r3, #2
 802f3ca:	b29a      	uxth	r2, r3
 802f3cc:	687b      	ldr	r3, [r7, #4]
 802f3ce:	835a      	strh	r2, [r3, #26]
        tcp_pcb_purge(pcb);
 802f3d0:	6878      	ldr	r0, [r7, #4]
 802f3d2:	f7fe fcd3 	bl	802dd7c <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 802f3d6:	4b59      	ldr	r3, [pc, #356]	; (802f53c <tcp_process+0x7dc>)
 802f3d8:	681b      	ldr	r3, [r3, #0]
 802f3da:	687a      	ldr	r2, [r7, #4]
 802f3dc:	429a      	cmp	r2, r3
 802f3de:	d105      	bne.n	802f3ec <tcp_process+0x68c>
 802f3e0:	4b56      	ldr	r3, [pc, #344]	; (802f53c <tcp_process+0x7dc>)
 802f3e2:	681b      	ldr	r3, [r3, #0]
 802f3e4:	68db      	ldr	r3, [r3, #12]
 802f3e6:	4a55      	ldr	r2, [pc, #340]	; (802f53c <tcp_process+0x7dc>)
 802f3e8:	6013      	str	r3, [r2, #0]
 802f3ea:	e013      	b.n	802f414 <tcp_process+0x6b4>
 802f3ec:	4b53      	ldr	r3, [pc, #332]	; (802f53c <tcp_process+0x7dc>)
 802f3ee:	681b      	ldr	r3, [r3, #0]
 802f3f0:	613b      	str	r3, [r7, #16]
 802f3f2:	e00c      	b.n	802f40e <tcp_process+0x6ae>
 802f3f4:	693b      	ldr	r3, [r7, #16]
 802f3f6:	68db      	ldr	r3, [r3, #12]
 802f3f8:	687a      	ldr	r2, [r7, #4]
 802f3fa:	429a      	cmp	r2, r3
 802f3fc:	d104      	bne.n	802f408 <tcp_process+0x6a8>
 802f3fe:	687b      	ldr	r3, [r7, #4]
 802f400:	68da      	ldr	r2, [r3, #12]
 802f402:	693b      	ldr	r3, [r7, #16]
 802f404:	60da      	str	r2, [r3, #12]
 802f406:	e005      	b.n	802f414 <tcp_process+0x6b4>
 802f408:	693b      	ldr	r3, [r7, #16]
 802f40a:	68db      	ldr	r3, [r3, #12]
 802f40c:	613b      	str	r3, [r7, #16]
 802f40e:	693b      	ldr	r3, [r7, #16]
 802f410:	2b00      	cmp	r3, #0
 802f412:	d1ef      	bne.n	802f3f4 <tcp_process+0x694>
 802f414:	687b      	ldr	r3, [r7, #4]
 802f416:	2200      	movs	r2, #0
 802f418:	60da      	str	r2, [r3, #12]
 802f41a:	4b43      	ldr	r3, [pc, #268]	; (802f528 <tcp_process+0x7c8>)
 802f41c:	2201      	movs	r2, #1
 802f41e:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 802f420:	687b      	ldr	r3, [r7, #4]
 802f422:	220a      	movs	r2, #10
 802f424:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 802f426:	4b41      	ldr	r3, [pc, #260]	; (802f52c <tcp_process+0x7cc>)
 802f428:	681a      	ldr	r2, [r3, #0]
 802f42a:	687b      	ldr	r3, [r7, #4]
 802f42c:	60da      	str	r2, [r3, #12]
 802f42e:	4a3f      	ldr	r2, [pc, #252]	; (802f52c <tcp_process+0x7cc>)
 802f430:	687b      	ldr	r3, [r7, #4]
 802f432:	6013      	str	r3, [r2, #0]
 802f434:	f003 f938 	bl	80326a8 <tcp_timer_needed>
      }
      break;
 802f438:	e06c      	b.n	802f514 <tcp_process+0x7b4>
    case CLOSING:
      tcp_receive(pcb);
 802f43a:	6878      	ldr	r0, [r7, #4]
 802f43c:	f000 f984 	bl	802f748 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 802f440:	4b3b      	ldr	r3, [pc, #236]	; (802f530 <tcp_process+0x7d0>)
 802f442:	781b      	ldrb	r3, [r3, #0]
 802f444:	f003 0310 	and.w	r3, r3, #16
 802f448:	2b00      	cmp	r3, #0
 802f44a:	d065      	beq.n	802f518 <tcp_process+0x7b8>
 802f44c:	687b      	ldr	r3, [r7, #4]
 802f44e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 802f450:	4b38      	ldr	r3, [pc, #224]	; (802f534 <tcp_process+0x7d4>)
 802f452:	681b      	ldr	r3, [r3, #0]
 802f454:	429a      	cmp	r2, r3
 802f456:	d15f      	bne.n	802f518 <tcp_process+0x7b8>
 802f458:	687b      	ldr	r3, [r7, #4]
 802f45a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 802f45c:	2b00      	cmp	r3, #0
 802f45e:	d15b      	bne.n	802f518 <tcp_process+0x7b8>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: CLOSING %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_pcb_purge(pcb);
 802f460:	6878      	ldr	r0, [r7, #4]
 802f462:	f7fe fc8b 	bl	802dd7c <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 802f466:	4b35      	ldr	r3, [pc, #212]	; (802f53c <tcp_process+0x7dc>)
 802f468:	681b      	ldr	r3, [r3, #0]
 802f46a:	687a      	ldr	r2, [r7, #4]
 802f46c:	429a      	cmp	r2, r3
 802f46e:	d105      	bne.n	802f47c <tcp_process+0x71c>
 802f470:	4b32      	ldr	r3, [pc, #200]	; (802f53c <tcp_process+0x7dc>)
 802f472:	681b      	ldr	r3, [r3, #0]
 802f474:	68db      	ldr	r3, [r3, #12]
 802f476:	4a31      	ldr	r2, [pc, #196]	; (802f53c <tcp_process+0x7dc>)
 802f478:	6013      	str	r3, [r2, #0]
 802f47a:	e013      	b.n	802f4a4 <tcp_process+0x744>
 802f47c:	4b2f      	ldr	r3, [pc, #188]	; (802f53c <tcp_process+0x7dc>)
 802f47e:	681b      	ldr	r3, [r3, #0]
 802f480:	60fb      	str	r3, [r7, #12]
 802f482:	e00c      	b.n	802f49e <tcp_process+0x73e>
 802f484:	68fb      	ldr	r3, [r7, #12]
 802f486:	68db      	ldr	r3, [r3, #12]
 802f488:	687a      	ldr	r2, [r7, #4]
 802f48a:	429a      	cmp	r2, r3
 802f48c:	d104      	bne.n	802f498 <tcp_process+0x738>
 802f48e:	687b      	ldr	r3, [r7, #4]
 802f490:	68da      	ldr	r2, [r3, #12]
 802f492:	68fb      	ldr	r3, [r7, #12]
 802f494:	60da      	str	r2, [r3, #12]
 802f496:	e005      	b.n	802f4a4 <tcp_process+0x744>
 802f498:	68fb      	ldr	r3, [r7, #12]
 802f49a:	68db      	ldr	r3, [r3, #12]
 802f49c:	60fb      	str	r3, [r7, #12]
 802f49e:	68fb      	ldr	r3, [r7, #12]
 802f4a0:	2b00      	cmp	r3, #0
 802f4a2:	d1ef      	bne.n	802f484 <tcp_process+0x724>
 802f4a4:	687b      	ldr	r3, [r7, #4]
 802f4a6:	2200      	movs	r2, #0
 802f4a8:	60da      	str	r2, [r3, #12]
 802f4aa:	4b1f      	ldr	r3, [pc, #124]	; (802f528 <tcp_process+0x7c8>)
 802f4ac:	2201      	movs	r2, #1
 802f4ae:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 802f4b0:	687b      	ldr	r3, [r7, #4]
 802f4b2:	220a      	movs	r2, #10
 802f4b4:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 802f4b6:	4b1d      	ldr	r3, [pc, #116]	; (802f52c <tcp_process+0x7cc>)
 802f4b8:	681a      	ldr	r2, [r3, #0]
 802f4ba:	687b      	ldr	r3, [r7, #4]
 802f4bc:	60da      	str	r2, [r3, #12]
 802f4be:	4a1b      	ldr	r2, [pc, #108]	; (802f52c <tcp_process+0x7cc>)
 802f4c0:	687b      	ldr	r3, [r7, #4]
 802f4c2:	6013      	str	r3, [r2, #0]
 802f4c4:	f003 f8f0 	bl	80326a8 <tcp_timer_needed>
      }
      break;
 802f4c8:	e026      	b.n	802f518 <tcp_process+0x7b8>
    case LAST_ACK:
      tcp_receive(pcb);
 802f4ca:	6878      	ldr	r0, [r7, #4]
 802f4cc:	f000 f93c 	bl	802f748 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 802f4d0:	4b17      	ldr	r3, [pc, #92]	; (802f530 <tcp_process+0x7d0>)
 802f4d2:	781b      	ldrb	r3, [r3, #0]
 802f4d4:	f003 0310 	and.w	r3, r3, #16
 802f4d8:	2b00      	cmp	r3, #0
 802f4da:	d01f      	beq.n	802f51c <tcp_process+0x7bc>
 802f4dc:	687b      	ldr	r3, [r7, #4]
 802f4de:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 802f4e0:	4b14      	ldr	r3, [pc, #80]	; (802f534 <tcp_process+0x7d4>)
 802f4e2:	681b      	ldr	r3, [r3, #0]
 802f4e4:	429a      	cmp	r2, r3
 802f4e6:	d119      	bne.n	802f51c <tcp_process+0x7bc>
 802f4e8:	687b      	ldr	r3, [r7, #4]
 802f4ea:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 802f4ec:	2b00      	cmp	r3, #0
 802f4ee:	d115      	bne.n	802f51c <tcp_process+0x7bc>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: LAST_ACK %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        /* bugfix #21699: don't set pcb->state to CLOSED here or we risk leaking segments */
        recv_flags |= TF_CLOSED;
 802f4f0:	4b11      	ldr	r3, [pc, #68]	; (802f538 <tcp_process+0x7d8>)
 802f4f2:	781b      	ldrb	r3, [r3, #0]
 802f4f4:	f043 0310 	orr.w	r3, r3, #16
 802f4f8:	b2da      	uxtb	r2, r3
 802f4fa:	4b0f      	ldr	r3, [pc, #60]	; (802f538 <tcp_process+0x7d8>)
 802f4fc:	701a      	strb	r2, [r3, #0]
      }
      break;
 802f4fe:	e00d      	b.n	802f51c <tcp_process+0x7bc>
    default:
      break;
 802f500:	bf00      	nop
 802f502:	e00c      	b.n	802f51e <tcp_process+0x7be>
      break;
 802f504:	bf00      	nop
 802f506:	e00a      	b.n	802f51e <tcp_process+0x7be>
      break;
 802f508:	bf00      	nop
 802f50a:	e008      	b.n	802f51e <tcp_process+0x7be>
      break;
 802f50c:	bf00      	nop
 802f50e:	e006      	b.n	802f51e <tcp_process+0x7be>
      break;
 802f510:	bf00      	nop
 802f512:	e004      	b.n	802f51e <tcp_process+0x7be>
      break;
 802f514:	bf00      	nop
 802f516:	e002      	b.n	802f51e <tcp_process+0x7be>
      break;
 802f518:	bf00      	nop
 802f51a:	e000      	b.n	802f51e <tcp_process+0x7be>
      break;
 802f51c:	bf00      	nop
  }
  return ERR_OK;
 802f51e:	2300      	movs	r3, #0
}
 802f520:	4618      	mov	r0, r3
 802f522:	3724      	adds	r7, #36	; 0x24
 802f524:	46bd      	mov	sp, r7
 802f526:	bd90      	pop	{r4, r7, pc}
 802f528:	2000ee20 	.word	0x2000ee20
 802f52c:	2000ee1c 	.word	0x2000ee1c
 802f530:	2000ee50 	.word	0x2000ee50
 802f534:	2000ee48 	.word	0x2000ee48
 802f538:	2000ee51 	.word	0x2000ee51
 802f53c:	2000ee18 	.word	0x2000ee18

0802f540 <tcp_oos_insert_segment>:
 *
 * Called from tcp_receive()
 */
static void
tcp_oos_insert_segment(struct tcp_seg *cseg, struct tcp_seg *next)
{
 802f540:	b590      	push	{r4, r7, lr}
 802f542:	b085      	sub	sp, #20
 802f544:	af00      	add	r7, sp, #0
 802f546:	6078      	str	r0, [r7, #4]
 802f548:	6039      	str	r1, [r7, #0]
  struct tcp_seg *old_seg;

  LWIP_ASSERT("tcp_oos_insert_segment: invalid cseg", cseg != NULL);
 802f54a:	687b      	ldr	r3, [r7, #4]
 802f54c:	2b00      	cmp	r3, #0
 802f54e:	d106      	bne.n	802f55e <tcp_oos_insert_segment+0x1e>
 802f550:	4b3b      	ldr	r3, [pc, #236]	; (802f640 <tcp_oos_insert_segment+0x100>)
 802f552:	f240 421f 	movw	r2, #1055	; 0x41f
 802f556:	493b      	ldr	r1, [pc, #236]	; (802f644 <tcp_oos_insert_segment+0x104>)
 802f558:	483b      	ldr	r0, [pc, #236]	; (802f648 <tcp_oos_insert_segment+0x108>)
 802f55a:	f006 fe1d 	bl	8036198 <iprintf>

  if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 802f55e:	687b      	ldr	r3, [r7, #4]
 802f560:	68db      	ldr	r3, [r3, #12]
 802f562:	899b      	ldrh	r3, [r3, #12]
 802f564:	b29b      	uxth	r3, r3
 802f566:	4618      	mov	r0, r3
 802f568:	f7fa ffd6 	bl	802a518 <lwip_htons>
 802f56c:	4603      	mov	r3, r0
 802f56e:	b2db      	uxtb	r3, r3
 802f570:	f003 0301 	and.w	r3, r3, #1
 802f574:	2b00      	cmp	r3, #0
 802f576:	d028      	beq.n	802f5ca <tcp_oos_insert_segment+0x8a>
    /* received segment overlaps all following segments */
    tcp_segs_free(next);
 802f578:	6838      	ldr	r0, [r7, #0]
 802f57a:	f7fe f905 	bl	802d788 <tcp_segs_free>
    next = NULL;
 802f57e:	2300      	movs	r3, #0
 802f580:	603b      	str	r3, [r7, #0]
 802f582:	e056      	b.n	802f632 <tcp_oos_insert_segment+0xf2>
       oos queue may have segments with FIN flag */
    while (next &&
           TCP_SEQ_GEQ((seqno + cseg->len),
                       (next->tcphdr->seqno + next->len))) {
      /* cseg with FIN already processed */
      if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 802f584:	683b      	ldr	r3, [r7, #0]
 802f586:	68db      	ldr	r3, [r3, #12]
 802f588:	899b      	ldrh	r3, [r3, #12]
 802f58a:	b29b      	uxth	r3, r3
 802f58c:	4618      	mov	r0, r3
 802f58e:	f7fa ffc3 	bl	802a518 <lwip_htons>
 802f592:	4603      	mov	r3, r0
 802f594:	b2db      	uxtb	r3, r3
 802f596:	f003 0301 	and.w	r3, r3, #1
 802f59a:	2b00      	cmp	r3, #0
 802f59c:	d00d      	beq.n	802f5ba <tcp_oos_insert_segment+0x7a>
        TCPH_SET_FLAG(cseg->tcphdr, TCP_FIN);
 802f59e:	687b      	ldr	r3, [r7, #4]
 802f5a0:	68db      	ldr	r3, [r3, #12]
 802f5a2:	899b      	ldrh	r3, [r3, #12]
 802f5a4:	b29c      	uxth	r4, r3
 802f5a6:	2001      	movs	r0, #1
 802f5a8:	f7fa ffb6 	bl	802a518 <lwip_htons>
 802f5ac:	4603      	mov	r3, r0
 802f5ae:	461a      	mov	r2, r3
 802f5b0:	687b      	ldr	r3, [r7, #4]
 802f5b2:	68db      	ldr	r3, [r3, #12]
 802f5b4:	4322      	orrs	r2, r4
 802f5b6:	b292      	uxth	r2, r2
 802f5b8:	819a      	strh	r2, [r3, #12]
      }
      old_seg = next;
 802f5ba:	683b      	ldr	r3, [r7, #0]
 802f5bc:	60fb      	str	r3, [r7, #12]
      next = next->next;
 802f5be:	683b      	ldr	r3, [r7, #0]
 802f5c0:	681b      	ldr	r3, [r3, #0]
 802f5c2:	603b      	str	r3, [r7, #0]
      tcp_seg_free(old_seg);
 802f5c4:	68f8      	ldr	r0, [r7, #12]
 802f5c6:	f7fe f8f4 	bl	802d7b2 <tcp_seg_free>
    while (next &&
 802f5ca:	683b      	ldr	r3, [r7, #0]
 802f5cc:	2b00      	cmp	r3, #0
 802f5ce:	d00e      	beq.n	802f5ee <tcp_oos_insert_segment+0xae>
           TCP_SEQ_GEQ((seqno + cseg->len),
 802f5d0:	687b      	ldr	r3, [r7, #4]
 802f5d2:	891b      	ldrh	r3, [r3, #8]
 802f5d4:	461a      	mov	r2, r3
 802f5d6:	4b1d      	ldr	r3, [pc, #116]	; (802f64c <tcp_oos_insert_segment+0x10c>)
 802f5d8:	681b      	ldr	r3, [r3, #0]
 802f5da:	441a      	add	r2, r3
 802f5dc:	683b      	ldr	r3, [r7, #0]
 802f5de:	68db      	ldr	r3, [r3, #12]
 802f5e0:	685b      	ldr	r3, [r3, #4]
 802f5e2:	6839      	ldr	r1, [r7, #0]
 802f5e4:	8909      	ldrh	r1, [r1, #8]
 802f5e6:	440b      	add	r3, r1
 802f5e8:	1ad3      	subs	r3, r2, r3
    while (next &&
 802f5ea:	2b00      	cmp	r3, #0
 802f5ec:	daca      	bge.n	802f584 <tcp_oos_insert_segment+0x44>
    }
    if (next &&
 802f5ee:	683b      	ldr	r3, [r7, #0]
 802f5f0:	2b00      	cmp	r3, #0
 802f5f2:	d01e      	beq.n	802f632 <tcp_oos_insert_segment+0xf2>
        TCP_SEQ_GT(seqno + cseg->len, next->tcphdr->seqno)) {
 802f5f4:	687b      	ldr	r3, [r7, #4]
 802f5f6:	891b      	ldrh	r3, [r3, #8]
 802f5f8:	461a      	mov	r2, r3
 802f5fa:	4b14      	ldr	r3, [pc, #80]	; (802f64c <tcp_oos_insert_segment+0x10c>)
 802f5fc:	681b      	ldr	r3, [r3, #0]
 802f5fe:	441a      	add	r2, r3
 802f600:	683b      	ldr	r3, [r7, #0]
 802f602:	68db      	ldr	r3, [r3, #12]
 802f604:	685b      	ldr	r3, [r3, #4]
 802f606:	1ad3      	subs	r3, r2, r3
    if (next &&
 802f608:	2b00      	cmp	r3, #0
 802f60a:	dd12      	ble.n	802f632 <tcp_oos_insert_segment+0xf2>
      /* We need to trim the incoming segment. */
      cseg->len = (u16_t)(next->tcphdr->seqno - seqno);
 802f60c:	683b      	ldr	r3, [r7, #0]
 802f60e:	68db      	ldr	r3, [r3, #12]
 802f610:	685b      	ldr	r3, [r3, #4]
 802f612:	b29a      	uxth	r2, r3
 802f614:	4b0d      	ldr	r3, [pc, #52]	; (802f64c <tcp_oos_insert_segment+0x10c>)
 802f616:	681b      	ldr	r3, [r3, #0]
 802f618:	b29b      	uxth	r3, r3
 802f61a:	1ad3      	subs	r3, r2, r3
 802f61c:	b29a      	uxth	r2, r3
 802f61e:	687b      	ldr	r3, [r7, #4]
 802f620:	811a      	strh	r2, [r3, #8]
      pbuf_realloc(cseg->p, cseg->len);
 802f622:	687b      	ldr	r3, [r7, #4]
 802f624:	685a      	ldr	r2, [r3, #4]
 802f626:	687b      	ldr	r3, [r7, #4]
 802f628:	891b      	ldrh	r3, [r3, #8]
 802f62a:	4619      	mov	r1, r3
 802f62c:	4610      	mov	r0, r2
 802f62e:	f7fc faaf 	bl	802bb90 <pbuf_realloc>
    }
  }
  cseg->next = next;
 802f632:	687b      	ldr	r3, [r7, #4]
 802f634:	683a      	ldr	r2, [r7, #0]
 802f636:	601a      	str	r2, [r3, #0]
}
 802f638:	bf00      	nop
 802f63a:	3714      	adds	r7, #20
 802f63c:	46bd      	mov	sp, r7
 802f63e:	bd90      	pop	{r4, r7, pc}
 802f640:	080392a8 	.word	0x080392a8
 802f644:	08039568 	.word	0x08039568
 802f648:	080392f4 	.word	0x080392f4
 802f64c:	2000ee44 	.word	0x2000ee44

0802f650 <tcp_free_acked_segments>:

/** Remove segments from a list if the incoming ACK acknowledges them */
static struct tcp_seg *
tcp_free_acked_segments(struct tcp_pcb *pcb, struct tcp_seg *seg_list, const char *dbg_list_name,
                        struct tcp_seg *dbg_other_seg_list)
{
 802f650:	b5b0      	push	{r4, r5, r7, lr}
 802f652:	b086      	sub	sp, #24
 802f654:	af00      	add	r7, sp, #0
 802f656:	60f8      	str	r0, [r7, #12]
 802f658:	60b9      	str	r1, [r7, #8]
 802f65a:	607a      	str	r2, [r7, #4]
 802f65c:	603b      	str	r3, [r7, #0]
  u16_t clen;

  LWIP_UNUSED_ARG(dbg_list_name);
  LWIP_UNUSED_ARG(dbg_other_seg_list);

  while (seg_list != NULL &&
 802f65e:	e03e      	b.n	802f6de <tcp_free_acked_segments+0x8e>
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: removing %"U32_F":%"U32_F" from pcb->%s\n",
                                  lwip_ntohl(seg_list->tcphdr->seqno),
                                  lwip_ntohl(seg_list->tcphdr->seqno) + TCP_TCPLEN(seg_list),
                                  dbg_list_name));

    next = seg_list;
 802f660:	68bb      	ldr	r3, [r7, #8]
 802f662:	617b      	str	r3, [r7, #20]
    seg_list = seg_list->next;
 802f664:	68bb      	ldr	r3, [r7, #8]
 802f666:	681b      	ldr	r3, [r3, #0]
 802f668:	60bb      	str	r3, [r7, #8]

    clen = pbuf_clen(next->p);
 802f66a:	697b      	ldr	r3, [r7, #20]
 802f66c:	685b      	ldr	r3, [r3, #4]
 802f66e:	4618      	mov	r0, r3
 802f670:	f7fc fca2 	bl	802bfb8 <pbuf_clen>
 802f674:	4603      	mov	r3, r0
 802f676:	827b      	strh	r3, [r7, #18]
    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_receive: queuelen %"TCPWNDSIZE_F" ... ",
                                 (tcpwnd_size_t)pcb->snd_queuelen));
    LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= clen));
 802f678:	68fb      	ldr	r3, [r7, #12]
 802f67a:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 802f67e:	8a7a      	ldrh	r2, [r7, #18]
 802f680:	429a      	cmp	r2, r3
 802f682:	d906      	bls.n	802f692 <tcp_free_acked_segments+0x42>
 802f684:	4b2a      	ldr	r3, [pc, #168]	; (802f730 <tcp_free_acked_segments+0xe0>)
 802f686:	f240 4257 	movw	r2, #1111	; 0x457
 802f68a:	492a      	ldr	r1, [pc, #168]	; (802f734 <tcp_free_acked_segments+0xe4>)
 802f68c:	482a      	ldr	r0, [pc, #168]	; (802f738 <tcp_free_acked_segments+0xe8>)
 802f68e:	f006 fd83 	bl	8036198 <iprintf>

    pcb->snd_queuelen = (u16_t)(pcb->snd_queuelen - clen);
 802f692:	68fb      	ldr	r3, [r7, #12]
 802f694:	f8b3 2066 	ldrh.w	r2, [r3, #102]	; 0x66
 802f698:	8a7b      	ldrh	r3, [r7, #18]
 802f69a:	1ad3      	subs	r3, r2, r3
 802f69c:	b29a      	uxth	r2, r3
 802f69e:	68fb      	ldr	r3, [r7, #12]
 802f6a0:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
    recv_acked = (tcpwnd_size_t)(recv_acked + next->len);
 802f6a4:	697b      	ldr	r3, [r7, #20]
 802f6a6:	891a      	ldrh	r2, [r3, #8]
 802f6a8:	4b24      	ldr	r3, [pc, #144]	; (802f73c <tcp_free_acked_segments+0xec>)
 802f6aa:	881b      	ldrh	r3, [r3, #0]
 802f6ac:	4413      	add	r3, r2
 802f6ae:	b29a      	uxth	r2, r3
 802f6b0:	4b22      	ldr	r3, [pc, #136]	; (802f73c <tcp_free_acked_segments+0xec>)
 802f6b2:	801a      	strh	r2, [r3, #0]
    tcp_seg_free(next);
 802f6b4:	6978      	ldr	r0, [r7, #20]
 802f6b6:	f7fe f87c 	bl	802d7b2 <tcp_seg_free>

    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("%"TCPWNDSIZE_F" (after freeing %s)\n",
                                 (tcpwnd_size_t)pcb->snd_queuelen,
                                 dbg_list_name));
    if (pcb->snd_queuelen != 0) {
 802f6ba:	68fb      	ldr	r3, [r7, #12]
 802f6bc:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 802f6c0:	2b00      	cmp	r3, #0
 802f6c2:	d00c      	beq.n	802f6de <tcp_free_acked_segments+0x8e>
      LWIP_ASSERT("tcp_receive: valid queue length",
 802f6c4:	68bb      	ldr	r3, [r7, #8]
 802f6c6:	2b00      	cmp	r3, #0
 802f6c8:	d109      	bne.n	802f6de <tcp_free_acked_segments+0x8e>
 802f6ca:	683b      	ldr	r3, [r7, #0]
 802f6cc:	2b00      	cmp	r3, #0
 802f6ce:	d106      	bne.n	802f6de <tcp_free_acked_segments+0x8e>
 802f6d0:	4b17      	ldr	r3, [pc, #92]	; (802f730 <tcp_free_acked_segments+0xe0>)
 802f6d2:	f240 4261 	movw	r2, #1121	; 0x461
 802f6d6:	491a      	ldr	r1, [pc, #104]	; (802f740 <tcp_free_acked_segments+0xf0>)
 802f6d8:	4817      	ldr	r0, [pc, #92]	; (802f738 <tcp_free_acked_segments+0xe8>)
 802f6da:	f006 fd5d 	bl	8036198 <iprintf>
  while (seg_list != NULL &&
 802f6de:	68bb      	ldr	r3, [r7, #8]
 802f6e0:	2b00      	cmp	r3, #0
 802f6e2:	d020      	beq.n	802f726 <tcp_free_acked_segments+0xd6>
         TCP_SEQ_LEQ(lwip_ntohl(seg_list->tcphdr->seqno) +
 802f6e4:	68bb      	ldr	r3, [r7, #8]
 802f6e6:	68db      	ldr	r3, [r3, #12]
 802f6e8:	685b      	ldr	r3, [r3, #4]
 802f6ea:	4618      	mov	r0, r3
 802f6ec:	f7fa ff29 	bl	802a542 <lwip_htonl>
 802f6f0:	4604      	mov	r4, r0
 802f6f2:	68bb      	ldr	r3, [r7, #8]
 802f6f4:	891b      	ldrh	r3, [r3, #8]
 802f6f6:	461d      	mov	r5, r3
 802f6f8:	68bb      	ldr	r3, [r7, #8]
 802f6fa:	68db      	ldr	r3, [r3, #12]
 802f6fc:	899b      	ldrh	r3, [r3, #12]
 802f6fe:	b29b      	uxth	r3, r3
 802f700:	4618      	mov	r0, r3
 802f702:	f7fa ff09 	bl	802a518 <lwip_htons>
 802f706:	4603      	mov	r3, r0
 802f708:	b2db      	uxtb	r3, r3
 802f70a:	f003 0303 	and.w	r3, r3, #3
 802f70e:	2b00      	cmp	r3, #0
 802f710:	d001      	beq.n	802f716 <tcp_free_acked_segments+0xc6>
 802f712:	2301      	movs	r3, #1
 802f714:	e000      	b.n	802f718 <tcp_free_acked_segments+0xc8>
 802f716:	2300      	movs	r3, #0
 802f718:	442b      	add	r3, r5
 802f71a:	18e2      	adds	r2, r4, r3
 802f71c:	4b09      	ldr	r3, [pc, #36]	; (802f744 <tcp_free_acked_segments+0xf4>)
 802f71e:	681b      	ldr	r3, [r3, #0]
 802f720:	1ad3      	subs	r3, r2, r3
  while (seg_list != NULL &&
 802f722:	2b00      	cmp	r3, #0
 802f724:	dd9c      	ble.n	802f660 <tcp_free_acked_segments+0x10>
                  seg_list != NULL || dbg_other_seg_list != NULL);
    }
  }
  return seg_list;
 802f726:	68bb      	ldr	r3, [r7, #8]
}
 802f728:	4618      	mov	r0, r3
 802f72a:	3718      	adds	r7, #24
 802f72c:	46bd      	mov	sp, r7
 802f72e:	bdb0      	pop	{r4, r5, r7, pc}
 802f730:	080392a8 	.word	0x080392a8
 802f734:	08039590 	.word	0x08039590
 802f738:	080392f4 	.word	0x080392f4
 802f73c:	2000ee4c 	.word	0x2000ee4c
 802f740:	080395b8 	.word	0x080395b8
 802f744:	2000ee48 	.word	0x2000ee48

0802f748 <tcp_receive>:
 *
 * Called from tcp_process().
 */
static void
tcp_receive(struct tcp_pcb *pcb)
{
 802f748:	b5b0      	push	{r4, r5, r7, lr}
 802f74a:	b094      	sub	sp, #80	; 0x50
 802f74c:	af00      	add	r7, sp, #0
 802f74e:	6078      	str	r0, [r7, #4]
  s16_t m;
  u32_t right_wnd_edge;
  int found_dupack = 0;
 802f750:	2300      	movs	r3, #0
 802f752:	64bb      	str	r3, [r7, #72]	; 0x48

  LWIP_ASSERT("tcp_receive: invalid pcb", pcb != NULL);
 802f754:	687b      	ldr	r3, [r7, #4]
 802f756:	2b00      	cmp	r3, #0
 802f758:	d106      	bne.n	802f768 <tcp_receive+0x20>
 802f75a:	4b91      	ldr	r3, [pc, #580]	; (802f9a0 <tcp_receive+0x258>)
 802f75c:	f240 427b 	movw	r2, #1147	; 0x47b
 802f760:	4990      	ldr	r1, [pc, #576]	; (802f9a4 <tcp_receive+0x25c>)
 802f762:	4891      	ldr	r0, [pc, #580]	; (802f9a8 <tcp_receive+0x260>)
 802f764:	f006 fd18 	bl	8036198 <iprintf>
  LWIP_ASSERT("tcp_receive: wrong state", pcb->state >= ESTABLISHED);
 802f768:	687b      	ldr	r3, [r7, #4]
 802f76a:	7d1b      	ldrb	r3, [r3, #20]
 802f76c:	2b03      	cmp	r3, #3
 802f76e:	d806      	bhi.n	802f77e <tcp_receive+0x36>
 802f770:	4b8b      	ldr	r3, [pc, #556]	; (802f9a0 <tcp_receive+0x258>)
 802f772:	f240 427c 	movw	r2, #1148	; 0x47c
 802f776:	498d      	ldr	r1, [pc, #564]	; (802f9ac <tcp_receive+0x264>)
 802f778:	488b      	ldr	r0, [pc, #556]	; (802f9a8 <tcp_receive+0x260>)
 802f77a:	f006 fd0d 	bl	8036198 <iprintf>

  if (flags & TCP_ACK) {
 802f77e:	4b8c      	ldr	r3, [pc, #560]	; (802f9b0 <tcp_receive+0x268>)
 802f780:	781b      	ldrb	r3, [r3, #0]
 802f782:	f003 0310 	and.w	r3, r3, #16
 802f786:	2b00      	cmp	r3, #0
 802f788:	f000 8264 	beq.w	802fc54 <tcp_receive+0x50c>
    right_wnd_edge = pcb->snd_wnd + pcb->snd_wl2;
 802f78c:	687b      	ldr	r3, [r7, #4]
 802f78e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 802f792:	461a      	mov	r2, r3
 802f794:	687b      	ldr	r3, [r7, #4]
 802f796:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 802f798:	4413      	add	r3, r2
 802f79a:	633b      	str	r3, [r7, #48]	; 0x30

    /* Update window. */
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 802f79c:	687b      	ldr	r3, [r7, #4]
 802f79e:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 802f7a0:	4b84      	ldr	r3, [pc, #528]	; (802f9b4 <tcp_receive+0x26c>)
 802f7a2:	681b      	ldr	r3, [r3, #0]
 802f7a4:	1ad3      	subs	r3, r2, r3
 802f7a6:	2b00      	cmp	r3, #0
 802f7a8:	db1b      	blt.n	802f7e2 <tcp_receive+0x9a>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 802f7aa:	687b      	ldr	r3, [r7, #4]
 802f7ac:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 802f7ae:	4b81      	ldr	r3, [pc, #516]	; (802f9b4 <tcp_receive+0x26c>)
 802f7b0:	681b      	ldr	r3, [r3, #0]
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 802f7b2:	429a      	cmp	r2, r3
 802f7b4:	d106      	bne.n	802f7c4 <tcp_receive+0x7c>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 802f7b6:	687b      	ldr	r3, [r7, #4]
 802f7b8:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 802f7ba:	4b7f      	ldr	r3, [pc, #508]	; (802f9b8 <tcp_receive+0x270>)
 802f7bc:	681b      	ldr	r3, [r3, #0]
 802f7be:	1ad3      	subs	r3, r2, r3
 802f7c0:	2b00      	cmp	r3, #0
 802f7c2:	db0e      	blt.n	802f7e2 <tcp_receive+0x9a>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 802f7c4:	687b      	ldr	r3, [r7, #4]
 802f7c6:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 802f7c8:	4b7b      	ldr	r3, [pc, #492]	; (802f9b8 <tcp_receive+0x270>)
 802f7ca:	681b      	ldr	r3, [r3, #0]
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 802f7cc:	429a      	cmp	r2, r3
 802f7ce:	d125      	bne.n	802f81c <tcp_receive+0xd4>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 802f7d0:	4b7a      	ldr	r3, [pc, #488]	; (802f9bc <tcp_receive+0x274>)
 802f7d2:	681b      	ldr	r3, [r3, #0]
 802f7d4:	89db      	ldrh	r3, [r3, #14]
 802f7d6:	b29a      	uxth	r2, r3
 802f7d8:	687b      	ldr	r3, [r7, #4]
 802f7da:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 802f7de:	429a      	cmp	r2, r3
 802f7e0:	d91c      	bls.n	802f81c <tcp_receive+0xd4>
      pcb->snd_wnd = SND_WND_SCALE(pcb, tcphdr->wnd);
 802f7e2:	4b76      	ldr	r3, [pc, #472]	; (802f9bc <tcp_receive+0x274>)
 802f7e4:	681b      	ldr	r3, [r3, #0]
 802f7e6:	89db      	ldrh	r3, [r3, #14]
 802f7e8:	b29a      	uxth	r2, r3
 802f7ea:	687b      	ldr	r3, [r7, #4]
 802f7ec:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
      /* keep track of the biggest window announced by the remote host to calculate
         the maximum segment size */
      if (pcb->snd_wnd_max < pcb->snd_wnd) {
 802f7f0:	687b      	ldr	r3, [r7, #4]
 802f7f2:	f8b3 2062 	ldrh.w	r2, [r3, #98]	; 0x62
 802f7f6:	687b      	ldr	r3, [r7, #4]
 802f7f8:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 802f7fc:	429a      	cmp	r2, r3
 802f7fe:	d205      	bcs.n	802f80c <tcp_receive+0xc4>
        pcb->snd_wnd_max = pcb->snd_wnd;
 802f800:	687b      	ldr	r3, [r7, #4]
 802f802:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 802f806:	687b      	ldr	r3, [r7, #4]
 802f808:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
      }
      pcb->snd_wl1 = seqno;
 802f80c:	4b69      	ldr	r3, [pc, #420]	; (802f9b4 <tcp_receive+0x26c>)
 802f80e:	681a      	ldr	r2, [r3, #0]
 802f810:	687b      	ldr	r3, [r7, #4]
 802f812:	655a      	str	r2, [r3, #84]	; 0x54
      pcb->snd_wl2 = ackno;
 802f814:	4b68      	ldr	r3, [pc, #416]	; (802f9b8 <tcp_receive+0x270>)
 802f816:	681a      	ldr	r2, [r3, #0]
 802f818:	687b      	ldr	r3, [r7, #4]
 802f81a:	659a      	str	r2, [r3, #88]	; 0x58
     * If it only passes 1, should reset dupack counter
     *
     */

    /* Clause 1 */
    if (TCP_SEQ_LEQ(ackno, pcb->lastack)) {
 802f81c:	4b66      	ldr	r3, [pc, #408]	; (802f9b8 <tcp_receive+0x270>)
 802f81e:	681a      	ldr	r2, [r3, #0]
 802f820:	687b      	ldr	r3, [r7, #4]
 802f822:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 802f824:	1ad3      	subs	r3, r2, r3
 802f826:	2b00      	cmp	r3, #0
 802f828:	dc58      	bgt.n	802f8dc <tcp_receive+0x194>
      /* Clause 2 */
      if (tcplen == 0) {
 802f82a:	4b65      	ldr	r3, [pc, #404]	; (802f9c0 <tcp_receive+0x278>)
 802f82c:	881b      	ldrh	r3, [r3, #0]
 802f82e:	2b00      	cmp	r3, #0
 802f830:	d14b      	bne.n	802f8ca <tcp_receive+0x182>
        /* Clause 3 */
        if (pcb->snd_wl2 + pcb->snd_wnd == right_wnd_edge) {
 802f832:	687b      	ldr	r3, [r7, #4]
 802f834:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 802f836:	687a      	ldr	r2, [r7, #4]
 802f838:	f8b2 2060 	ldrh.w	r2, [r2, #96]	; 0x60
 802f83c:	4413      	add	r3, r2
 802f83e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 802f840:	429a      	cmp	r2, r3
 802f842:	d142      	bne.n	802f8ca <tcp_receive+0x182>
          /* Clause 4 */
          if (pcb->rtime >= 0) {
 802f844:	687b      	ldr	r3, [r7, #4]
 802f846:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 802f84a:	2b00      	cmp	r3, #0
 802f84c:	db3d      	blt.n	802f8ca <tcp_receive+0x182>
            /* Clause 5 */
            if (pcb->lastack == ackno) {
 802f84e:	687b      	ldr	r3, [r7, #4]
 802f850:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 802f852:	4b59      	ldr	r3, [pc, #356]	; (802f9b8 <tcp_receive+0x270>)
 802f854:	681b      	ldr	r3, [r3, #0]
 802f856:	429a      	cmp	r2, r3
 802f858:	d137      	bne.n	802f8ca <tcp_receive+0x182>
              found_dupack = 1;
 802f85a:	2301      	movs	r3, #1
 802f85c:	64bb      	str	r3, [r7, #72]	; 0x48
              if ((u8_t)(pcb->dupacks + 1) > pcb->dupacks) {
 802f85e:	687b      	ldr	r3, [r7, #4]
 802f860:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 802f864:	2bff      	cmp	r3, #255	; 0xff
 802f866:	d007      	beq.n	802f878 <tcp_receive+0x130>
                ++pcb->dupacks;
 802f868:	687b      	ldr	r3, [r7, #4]
 802f86a:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 802f86e:	3301      	adds	r3, #1
 802f870:	b2da      	uxtb	r2, r3
 802f872:	687b      	ldr	r3, [r7, #4]
 802f874:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
              }
              if (pcb->dupacks > 3) {
 802f878:	687b      	ldr	r3, [r7, #4]
 802f87a:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 802f87e:	2b03      	cmp	r3, #3
 802f880:	d91b      	bls.n	802f8ba <tcp_receive+0x172>
                /* Inflate the congestion window */
                TCP_WND_INC(pcb->cwnd, pcb->mss);
 802f882:	687b      	ldr	r3, [r7, #4]
 802f884:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 802f888:	687b      	ldr	r3, [r7, #4]
 802f88a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 802f88c:	4413      	add	r3, r2
 802f88e:	b29a      	uxth	r2, r3
 802f890:	687b      	ldr	r3, [r7, #4]
 802f892:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 802f896:	429a      	cmp	r2, r3
 802f898:	d30a      	bcc.n	802f8b0 <tcp_receive+0x168>
 802f89a:	687b      	ldr	r3, [r7, #4]
 802f89c:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 802f8a0:	687b      	ldr	r3, [r7, #4]
 802f8a2:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 802f8a4:	4413      	add	r3, r2
 802f8a6:	b29a      	uxth	r2, r3
 802f8a8:	687b      	ldr	r3, [r7, #4]
 802f8aa:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 802f8ae:	e004      	b.n	802f8ba <tcp_receive+0x172>
 802f8b0:	687b      	ldr	r3, [r7, #4]
 802f8b2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 802f8b6:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
              }
              if (pcb->dupacks >= 3) {
 802f8ba:	687b      	ldr	r3, [r7, #4]
 802f8bc:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 802f8c0:	2b02      	cmp	r3, #2
 802f8c2:	d902      	bls.n	802f8ca <tcp_receive+0x182>
                /* Do fast retransmit (checked via TF_INFR, not via dupacks count) */
                tcp_rexmit_fast(pcb);
 802f8c4:	6878      	ldr	r0, [r7, #4]
 802f8c6:	f002 fb87 	bl	8031fd8 <tcp_rexmit_fast>
          }
        }
      }
      /* If Clause (1) or more is true, but not a duplicate ack, reset
       * count of consecutive duplicate acks */
      if (!found_dupack) {
 802f8ca:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 802f8cc:	2b00      	cmp	r3, #0
 802f8ce:	f040 8161 	bne.w	802fb94 <tcp_receive+0x44c>
        pcb->dupacks = 0;
 802f8d2:	687b      	ldr	r3, [r7, #4]
 802f8d4:	2200      	movs	r2, #0
 802f8d6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 802f8da:	e15b      	b.n	802fb94 <tcp_receive+0x44c>
      }
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 802f8dc:	4b36      	ldr	r3, [pc, #216]	; (802f9b8 <tcp_receive+0x270>)
 802f8de:	681a      	ldr	r2, [r3, #0]
 802f8e0:	687b      	ldr	r3, [r7, #4]
 802f8e2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 802f8e4:	1ad3      	subs	r3, r2, r3
 802f8e6:	3b01      	subs	r3, #1
 802f8e8:	2b00      	cmp	r3, #0
 802f8ea:	f2c0 814e 	blt.w	802fb8a <tcp_receive+0x442>
 802f8ee:	4b32      	ldr	r3, [pc, #200]	; (802f9b8 <tcp_receive+0x270>)
 802f8f0:	681a      	ldr	r2, [r3, #0]
 802f8f2:	687b      	ldr	r3, [r7, #4]
 802f8f4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 802f8f6:	1ad3      	subs	r3, r2, r3
 802f8f8:	2b00      	cmp	r3, #0
 802f8fa:	f300 8146 	bgt.w	802fb8a <tcp_receive+0x442>
      tcpwnd_size_t acked;

      /* Reset the "IN Fast Retransmit" flag, since we are no longer
         in fast retransmit. Also reset the congestion window to the
         slow start threshold. */
      if (pcb->flags & TF_INFR) {
 802f8fe:	687b      	ldr	r3, [r7, #4]
 802f900:	8b5b      	ldrh	r3, [r3, #26]
 802f902:	f003 0304 	and.w	r3, r3, #4
 802f906:	2b00      	cmp	r3, #0
 802f908:	d010      	beq.n	802f92c <tcp_receive+0x1e4>
        tcp_clear_flags(pcb, TF_INFR);
 802f90a:	687b      	ldr	r3, [r7, #4]
 802f90c:	8b5b      	ldrh	r3, [r3, #26]
 802f90e:	f023 0304 	bic.w	r3, r3, #4
 802f912:	b29a      	uxth	r2, r3
 802f914:	687b      	ldr	r3, [r7, #4]
 802f916:	835a      	strh	r2, [r3, #26]
        pcb->cwnd = pcb->ssthresh;
 802f918:	687b      	ldr	r3, [r7, #4]
 802f91a:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 802f91e:	687b      	ldr	r3, [r7, #4]
 802f920:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
        pcb->bytes_acked = 0;
 802f924:	687b      	ldr	r3, [r7, #4]
 802f926:	2200      	movs	r2, #0
 802f928:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
      }

      /* Reset the number of retransmissions. */
      pcb->nrtx = 0;
 802f92c:	687b      	ldr	r3, [r7, #4]
 802f92e:	2200      	movs	r2, #0
 802f930:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Reset the retransmission time-out. */
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 802f934:	687b      	ldr	r3, [r7, #4]
 802f936:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 802f93a:	10db      	asrs	r3, r3, #3
 802f93c:	b21b      	sxth	r3, r3
 802f93e:	b29a      	uxth	r2, r3
 802f940:	687b      	ldr	r3, [r7, #4]
 802f942:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 802f946:	b29b      	uxth	r3, r3
 802f948:	4413      	add	r3, r2
 802f94a:	b29b      	uxth	r3, r3
 802f94c:	b21a      	sxth	r2, r3
 802f94e:	687b      	ldr	r3, [r7, #4]
 802f950:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      /* Record how much data this ACK acks */
      acked = (tcpwnd_size_t)(ackno - pcb->lastack);
 802f954:	4b18      	ldr	r3, [pc, #96]	; (802f9b8 <tcp_receive+0x270>)
 802f956:	681b      	ldr	r3, [r3, #0]
 802f958:	b29a      	uxth	r2, r3
 802f95a:	687b      	ldr	r3, [r7, #4]
 802f95c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 802f95e:	b29b      	uxth	r3, r3
 802f960:	1ad3      	subs	r3, r2, r3
 802f962:	85fb      	strh	r3, [r7, #46]	; 0x2e

      /* Reset the fast retransmit variables. */
      pcb->dupacks = 0;
 802f964:	687b      	ldr	r3, [r7, #4]
 802f966:	2200      	movs	r2, #0
 802f968:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
      pcb->lastack = ackno;
 802f96c:	4b12      	ldr	r3, [pc, #72]	; (802f9b8 <tcp_receive+0x270>)
 802f96e:	681a      	ldr	r2, [r3, #0]
 802f970:	687b      	ldr	r3, [r7, #4]
 802f972:	645a      	str	r2, [r3, #68]	; 0x44

      /* Update the congestion control variables (cwnd and
         ssthresh). */
      if (pcb->state >= ESTABLISHED) {
 802f974:	687b      	ldr	r3, [r7, #4]
 802f976:	7d1b      	ldrb	r3, [r3, #20]
 802f978:	2b03      	cmp	r3, #3
 802f97a:	f240 8097 	bls.w	802faac <tcp_receive+0x364>
        if (pcb->cwnd < pcb->ssthresh) {
 802f97e:	687b      	ldr	r3, [r7, #4]
 802f980:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 802f984:	687b      	ldr	r3, [r7, #4]
 802f986:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 802f98a:	429a      	cmp	r2, r3
 802f98c:	d245      	bcs.n	802fa1a <tcp_receive+0x2d2>
          tcpwnd_size_t increase;
          /* limit to 1 SMSS segment during period following RTO */
          u8_t num_seg = (pcb->flags & TF_RTO) ? 1 : 2;
 802f98e:	687b      	ldr	r3, [r7, #4]
 802f990:	8b5b      	ldrh	r3, [r3, #26]
 802f992:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 802f996:	2b00      	cmp	r3, #0
 802f998:	d014      	beq.n	802f9c4 <tcp_receive+0x27c>
 802f99a:	2301      	movs	r3, #1
 802f99c:	e013      	b.n	802f9c6 <tcp_receive+0x27e>
 802f99e:	bf00      	nop
 802f9a0:	080392a8 	.word	0x080392a8
 802f9a4:	080395d8 	.word	0x080395d8
 802f9a8:	080392f4 	.word	0x080392f4
 802f9ac:	080395f4 	.word	0x080395f4
 802f9b0:	2000ee50 	.word	0x2000ee50
 802f9b4:	2000ee44 	.word	0x2000ee44
 802f9b8:	2000ee48 	.word	0x2000ee48
 802f9bc:	2000ee34 	.word	0x2000ee34
 802f9c0:	2000ee4e 	.word	0x2000ee4e
 802f9c4:	2302      	movs	r3, #2
 802f9c6:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
          /* RFC 3465, section 2.2 Slow Start */
          increase = LWIP_MIN(acked, (tcpwnd_size_t)(num_seg * pcb->mss));
 802f9ca:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 802f9ce:	b29a      	uxth	r2, r3
 802f9d0:	687b      	ldr	r3, [r7, #4]
 802f9d2:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 802f9d4:	fb12 f303 	smulbb	r3, r2, r3
 802f9d8:	b29b      	uxth	r3, r3
 802f9da:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 802f9dc:	4293      	cmp	r3, r2
 802f9de:	bf28      	it	cs
 802f9e0:	4613      	movcs	r3, r2
 802f9e2:	857b      	strh	r3, [r7, #42]	; 0x2a
          TCP_WND_INC(pcb->cwnd, increase);
 802f9e4:	687b      	ldr	r3, [r7, #4]
 802f9e6:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 802f9ea:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 802f9ec:	4413      	add	r3, r2
 802f9ee:	b29a      	uxth	r2, r3
 802f9f0:	687b      	ldr	r3, [r7, #4]
 802f9f2:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 802f9f6:	429a      	cmp	r2, r3
 802f9f8:	d309      	bcc.n	802fa0e <tcp_receive+0x2c6>
 802f9fa:	687b      	ldr	r3, [r7, #4]
 802f9fc:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 802fa00:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 802fa02:	4413      	add	r3, r2
 802fa04:	b29a      	uxth	r2, r3
 802fa06:	687b      	ldr	r3, [r7, #4]
 802fa08:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 802fa0c:	e04e      	b.n	802faac <tcp_receive+0x364>
 802fa0e:	687b      	ldr	r3, [r7, #4]
 802fa10:	f64f 72ff 	movw	r2, #65535	; 0xffff
 802fa14:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 802fa18:	e048      	b.n	802faac <tcp_receive+0x364>
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_receive: slow start cwnd %"TCPWNDSIZE_F"\n", pcb->cwnd));
        } else {
          /* RFC 3465, section 2.1 Congestion Avoidance */
          TCP_WND_INC(pcb->bytes_acked, acked);
 802fa1a:	687b      	ldr	r3, [r7, #4]
 802fa1c:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 802fa20:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 802fa22:	4413      	add	r3, r2
 802fa24:	b29a      	uxth	r2, r3
 802fa26:	687b      	ldr	r3, [r7, #4]
 802fa28:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 802fa2c:	429a      	cmp	r2, r3
 802fa2e:	d309      	bcc.n	802fa44 <tcp_receive+0x2fc>
 802fa30:	687b      	ldr	r3, [r7, #4]
 802fa32:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 802fa36:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 802fa38:	4413      	add	r3, r2
 802fa3a:	b29a      	uxth	r2, r3
 802fa3c:	687b      	ldr	r3, [r7, #4]
 802fa3e:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 802fa42:	e004      	b.n	802fa4e <tcp_receive+0x306>
 802fa44:	687b      	ldr	r3, [r7, #4]
 802fa46:	f64f 72ff 	movw	r2, #65535	; 0xffff
 802fa4a:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          if (pcb->bytes_acked >= pcb->cwnd) {
 802fa4e:	687b      	ldr	r3, [r7, #4]
 802fa50:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 802fa54:	687b      	ldr	r3, [r7, #4]
 802fa56:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 802fa5a:	429a      	cmp	r2, r3
 802fa5c:	d326      	bcc.n	802faac <tcp_receive+0x364>
            pcb->bytes_acked = (tcpwnd_size_t)(pcb->bytes_acked - pcb->cwnd);
 802fa5e:	687b      	ldr	r3, [r7, #4]
 802fa60:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 802fa64:	687b      	ldr	r3, [r7, #4]
 802fa66:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 802fa6a:	1ad3      	subs	r3, r2, r3
 802fa6c:	b29a      	uxth	r2, r3
 802fa6e:	687b      	ldr	r3, [r7, #4]
 802fa70:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
            TCP_WND_INC(pcb->cwnd, pcb->mss);
 802fa74:	687b      	ldr	r3, [r7, #4]
 802fa76:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 802fa7a:	687b      	ldr	r3, [r7, #4]
 802fa7c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 802fa7e:	4413      	add	r3, r2
 802fa80:	b29a      	uxth	r2, r3
 802fa82:	687b      	ldr	r3, [r7, #4]
 802fa84:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 802fa88:	429a      	cmp	r2, r3
 802fa8a:	d30a      	bcc.n	802faa2 <tcp_receive+0x35a>
 802fa8c:	687b      	ldr	r3, [r7, #4]
 802fa8e:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 802fa92:	687b      	ldr	r3, [r7, #4]
 802fa94:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 802fa96:	4413      	add	r3, r2
 802fa98:	b29a      	uxth	r2, r3
 802fa9a:	687b      	ldr	r3, [r7, #4]
 802fa9c:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 802faa0:	e004      	b.n	802faac <tcp_receive+0x364>
 802faa2:	687b      	ldr	r3, [r7, #4]
 802faa4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 802faa8:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
                                    pcb->unacked != NULL ?
                                    lwip_ntohl(pcb->unacked->tcphdr->seqno) + TCP_TCPLEN(pcb->unacked) : 0));

      /* Remove segment from the unacknowledged list if the incoming
         ACK acknowledges them. */
      pcb->unacked = tcp_free_acked_segments(pcb, pcb->unacked, "unacked", pcb->unsent);
 802faac:	687b      	ldr	r3, [r7, #4]
 802faae:	6f19      	ldr	r1, [r3, #112]	; 0x70
 802fab0:	687b      	ldr	r3, [r7, #4]
 802fab2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 802fab4:	4a98      	ldr	r2, [pc, #608]	; (802fd18 <tcp_receive+0x5d0>)
 802fab6:	6878      	ldr	r0, [r7, #4]
 802fab8:	f7ff fdca 	bl	802f650 <tcp_free_acked_segments>
 802fabc:	4602      	mov	r2, r0
 802fabe:	687b      	ldr	r3, [r7, #4]
 802fac0:	671a      	str	r2, [r3, #112]	; 0x70
         on the list are acknowledged by the ACK. This may seem
         strange since an "unsent" segment shouldn't be acked. The
         rationale is that lwIP puts all outstanding segments on the
         ->unsent list after a retransmission, so these segments may
         in fact have been sent once. */
      pcb->unsent = tcp_free_acked_segments(pcb, pcb->unsent, "unsent", pcb->unacked);
 802fac2:	687b      	ldr	r3, [r7, #4]
 802fac4:	6ed9      	ldr	r1, [r3, #108]	; 0x6c
 802fac6:	687b      	ldr	r3, [r7, #4]
 802fac8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 802faca:	4a94      	ldr	r2, [pc, #592]	; (802fd1c <tcp_receive+0x5d4>)
 802facc:	6878      	ldr	r0, [r7, #4]
 802face:	f7ff fdbf 	bl	802f650 <tcp_free_acked_segments>
 802fad2:	4602      	mov	r2, r0
 802fad4:	687b      	ldr	r3, [r7, #4]
 802fad6:	66da      	str	r2, [r3, #108]	; 0x6c

      /* If there's nothing left to acknowledge, stop the retransmit
         timer, otherwise reset it to start again */
      if (pcb->unacked == NULL) {
 802fad8:	687b      	ldr	r3, [r7, #4]
 802fada:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 802fadc:	2b00      	cmp	r3, #0
 802fade:	d104      	bne.n	802faea <tcp_receive+0x3a2>
        pcb->rtime = -1;
 802fae0:	687b      	ldr	r3, [r7, #4]
 802fae2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 802fae6:	861a      	strh	r2, [r3, #48]	; 0x30
 802fae8:	e002      	b.n	802faf0 <tcp_receive+0x3a8>
      } else {
        pcb->rtime = 0;
 802faea:	687b      	ldr	r3, [r7, #4]
 802faec:	2200      	movs	r2, #0
 802faee:	861a      	strh	r2, [r3, #48]	; 0x30
      }

      pcb->polltmr = 0;
 802faf0:	687b      	ldr	r3, [r7, #4]
 802faf2:	2200      	movs	r2, #0
 802faf4:	771a      	strb	r2, [r3, #28]

#if TCP_OVERSIZE
      if (pcb->unsent == NULL) {
 802faf6:	687b      	ldr	r3, [r7, #4]
 802faf8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 802fafa:	2b00      	cmp	r3, #0
 802fafc:	d103      	bne.n	802fb06 <tcp_receive+0x3be>
        pcb->unsent_oversize = 0;
 802fafe:	687b      	ldr	r3, [r7, #4]
 802fb00:	2200      	movs	r2, #0
 802fb02:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
        /* Inform neighbor reachability of forward progress. */
        nd6_reachability_hint(ip6_current_src_addr());
      }
#endif /* LWIP_IPV6 && LWIP_ND6_TCP_REACHABILITY_HINTS*/

      pcb->snd_buf = (tcpwnd_size_t)(pcb->snd_buf + recv_acked);
 802fb06:	687b      	ldr	r3, [r7, #4]
 802fb08:	f8b3 2064 	ldrh.w	r2, [r3, #100]	; 0x64
 802fb0c:	4b84      	ldr	r3, [pc, #528]	; (802fd20 <tcp_receive+0x5d8>)
 802fb0e:	881b      	ldrh	r3, [r3, #0]
 802fb10:	4413      	add	r3, r2
 802fb12:	b29a      	uxth	r2, r3
 802fb14:	687b      	ldr	r3, [r7, #4]
 802fb16:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
      /* check if this ACK ends our retransmission of in-flight data */
      if (pcb->flags & TF_RTO) {
 802fb1a:	687b      	ldr	r3, [r7, #4]
 802fb1c:	8b5b      	ldrh	r3, [r3, #26]
 802fb1e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 802fb22:	2b00      	cmp	r3, #0
 802fb24:	d035      	beq.n	802fb92 <tcp_receive+0x44a>
        /* RTO is done if
            1) both queues are empty or
            2) unacked is empty and unsent head contains data not part of RTO or
            3) unacked head contains data not part of RTO */
        if (pcb->unacked == NULL) {
 802fb26:	687b      	ldr	r3, [r7, #4]
 802fb28:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 802fb2a:	2b00      	cmp	r3, #0
 802fb2c:	d118      	bne.n	802fb60 <tcp_receive+0x418>
          if ((pcb->unsent == NULL) ||
 802fb2e:	687b      	ldr	r3, [r7, #4]
 802fb30:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 802fb32:	2b00      	cmp	r3, #0
 802fb34:	d00c      	beq.n	802fb50 <tcp_receive+0x408>
              (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unsent->tcphdr->seqno)))) {
 802fb36:	687b      	ldr	r3, [r7, #4]
 802fb38:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 802fb3a:	687b      	ldr	r3, [r7, #4]
 802fb3c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 802fb3e:	68db      	ldr	r3, [r3, #12]
 802fb40:	685b      	ldr	r3, [r3, #4]
 802fb42:	4618      	mov	r0, r3
 802fb44:	f7fa fcfd 	bl	802a542 <lwip_htonl>
 802fb48:	4603      	mov	r3, r0
 802fb4a:	1ae3      	subs	r3, r4, r3
          if ((pcb->unsent == NULL) ||
 802fb4c:	2b00      	cmp	r3, #0
 802fb4e:	dc20      	bgt.n	802fb92 <tcp_receive+0x44a>
            tcp_clear_flags(pcb, TF_RTO);
 802fb50:	687b      	ldr	r3, [r7, #4]
 802fb52:	8b5b      	ldrh	r3, [r3, #26]
 802fb54:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 802fb58:	b29a      	uxth	r2, r3
 802fb5a:	687b      	ldr	r3, [r7, #4]
 802fb5c:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 802fb5e:	e018      	b.n	802fb92 <tcp_receive+0x44a>
          }
        } else if (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unacked->tcphdr->seqno))) {
 802fb60:	687b      	ldr	r3, [r7, #4]
 802fb62:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 802fb64:	687b      	ldr	r3, [r7, #4]
 802fb66:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 802fb68:	68db      	ldr	r3, [r3, #12]
 802fb6a:	685b      	ldr	r3, [r3, #4]
 802fb6c:	4618      	mov	r0, r3
 802fb6e:	f7fa fce8 	bl	802a542 <lwip_htonl>
 802fb72:	4603      	mov	r3, r0
 802fb74:	1ae3      	subs	r3, r4, r3
 802fb76:	2b00      	cmp	r3, #0
 802fb78:	dc0b      	bgt.n	802fb92 <tcp_receive+0x44a>
          tcp_clear_flags(pcb, TF_RTO);
 802fb7a:	687b      	ldr	r3, [r7, #4]
 802fb7c:	8b5b      	ldrh	r3, [r3, #26]
 802fb7e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 802fb82:	b29a      	uxth	r2, r3
 802fb84:	687b      	ldr	r3, [r7, #4]
 802fb86:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 802fb88:	e003      	b.n	802fb92 <tcp_receive+0x44a>
        }
      }
      /* End of ACK for new data processing. */
    } else {
      /* Out of sequence ACK, didn't really ack anything */
      tcp_send_empty_ack(pcb);
 802fb8a:	6878      	ldr	r0, [r7, #4]
 802fb8c:	f002 fc1c 	bl	80323c8 <tcp_send_empty_ack>
 802fb90:	e000      	b.n	802fb94 <tcp_receive+0x44c>
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 802fb92:	bf00      	nop
                                pcb->rttest, pcb->rtseq, ackno));

    /* RTT estimation calculations. This is done by checking if the
       incoming segment acknowledges the segment we use to take a
       round-trip time measurement. */
    if (pcb->rttest && TCP_SEQ_LT(pcb->rtseq, ackno)) {
 802fb94:	687b      	ldr	r3, [r7, #4]
 802fb96:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 802fb98:	2b00      	cmp	r3, #0
 802fb9a:	d05b      	beq.n	802fc54 <tcp_receive+0x50c>
 802fb9c:	687b      	ldr	r3, [r7, #4]
 802fb9e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 802fba0:	4b60      	ldr	r3, [pc, #384]	; (802fd24 <tcp_receive+0x5dc>)
 802fba2:	681b      	ldr	r3, [r3, #0]
 802fba4:	1ad3      	subs	r3, r2, r3
 802fba6:	2b00      	cmp	r3, #0
 802fba8:	da54      	bge.n	802fc54 <tcp_receive+0x50c>
      /* diff between this shouldn't exceed 32K since this are tcp timer ticks
         and a round-trip shouldn't be that long... */
      m = (s16_t)(tcp_ticks - pcb->rttest);
 802fbaa:	4b5f      	ldr	r3, [pc, #380]	; (802fd28 <tcp_receive+0x5e0>)
 802fbac:	681b      	ldr	r3, [r3, #0]
 802fbae:	b29a      	uxth	r2, r3
 802fbb0:	687b      	ldr	r3, [r7, #4]
 802fbb2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 802fbb4:	b29b      	uxth	r3, r3
 802fbb6:	1ad3      	subs	r3, r2, r3
 802fbb8:	b29b      	uxth	r3, r3
 802fbba:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: experienced rtt %"U16_F" ticks (%"U16_F" msec).\n",
                                  m, (u16_t)(m * TCP_SLOW_INTERVAL)));

      /* This is taken directly from VJs original code in his paper */
      m = (s16_t)(m - (pcb->sa >> 3));
 802fbbe:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 802fbc2:	687b      	ldr	r3, [r7, #4]
 802fbc4:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 802fbc8:	10db      	asrs	r3, r3, #3
 802fbca:	b21b      	sxth	r3, r3
 802fbcc:	b29b      	uxth	r3, r3
 802fbce:	1ad3      	subs	r3, r2, r3
 802fbd0:	b29b      	uxth	r3, r3
 802fbd2:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      pcb->sa = (s16_t)(pcb->sa + m);
 802fbd6:	687b      	ldr	r3, [r7, #4]
 802fbd8:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 802fbdc:	b29a      	uxth	r2, r3
 802fbde:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 802fbe2:	4413      	add	r3, r2
 802fbe4:	b29b      	uxth	r3, r3
 802fbe6:	b21a      	sxth	r2, r3
 802fbe8:	687b      	ldr	r3, [r7, #4]
 802fbea:	879a      	strh	r2, [r3, #60]	; 0x3c
      if (m < 0) {
 802fbec:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 802fbf0:	2b00      	cmp	r3, #0
 802fbf2:	da05      	bge.n	802fc00 <tcp_receive+0x4b8>
        m = (s16_t) - m;
 802fbf4:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 802fbf8:	425b      	negs	r3, r3
 802fbfa:	b29b      	uxth	r3, r3
 802fbfc:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      }
      m = (s16_t)(m - (pcb->sv >> 2));
 802fc00:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 802fc04:	687b      	ldr	r3, [r7, #4]
 802fc06:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 802fc0a:	109b      	asrs	r3, r3, #2
 802fc0c:	b21b      	sxth	r3, r3
 802fc0e:	b29b      	uxth	r3, r3
 802fc10:	1ad3      	subs	r3, r2, r3
 802fc12:	b29b      	uxth	r3, r3
 802fc14:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      pcb->sv = (s16_t)(pcb->sv + m);
 802fc18:	687b      	ldr	r3, [r7, #4]
 802fc1a:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 802fc1e:	b29a      	uxth	r2, r3
 802fc20:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 802fc24:	4413      	add	r3, r2
 802fc26:	b29b      	uxth	r3, r3
 802fc28:	b21a      	sxth	r2, r3
 802fc2a:	687b      	ldr	r3, [r7, #4]
 802fc2c:	87da      	strh	r2, [r3, #62]	; 0x3e
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 802fc2e:	687b      	ldr	r3, [r7, #4]
 802fc30:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 802fc34:	10db      	asrs	r3, r3, #3
 802fc36:	b21b      	sxth	r3, r3
 802fc38:	b29a      	uxth	r2, r3
 802fc3a:	687b      	ldr	r3, [r7, #4]
 802fc3c:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 802fc40:	b29b      	uxth	r3, r3
 802fc42:	4413      	add	r3, r2
 802fc44:	b29b      	uxth	r3, r3
 802fc46:	b21a      	sxth	r2, r3
 802fc48:	687b      	ldr	r3, [r7, #4]
 802fc4a:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: RTO %"U16_F" (%"U16_F" milliseconds)\n",
                                  pcb->rto, (u16_t)(pcb->rto * TCP_SLOW_INTERVAL)));

      pcb->rttest = 0;
 802fc4e:	687b      	ldr	r3, [r7, #4]
 802fc50:	2200      	movs	r2, #0
 802fc52:	635a      	str	r2, [r3, #52]	; 0x34

  /* If the incoming segment contains data, we must process it
     further unless the pcb already received a FIN.
     (RFC 793, chapter 3.9, "SEGMENT ARRIVES" in states CLOSE-WAIT, CLOSING,
     LAST-ACK and TIME-WAIT: "Ignore the segment text.") */
  if ((tcplen > 0) && (pcb->state < CLOSE_WAIT)) {
 802fc54:	4b35      	ldr	r3, [pc, #212]	; (802fd2c <tcp_receive+0x5e4>)
 802fc56:	881b      	ldrh	r3, [r3, #0]
 802fc58:	2b00      	cmp	r3, #0
 802fc5a:	f000 84e2 	beq.w	8030622 <tcp_receive+0xeda>
 802fc5e:	687b      	ldr	r3, [r7, #4]
 802fc60:	7d1b      	ldrb	r3, [r3, #20]
 802fc62:	2b06      	cmp	r3, #6
 802fc64:	f200 84dd 	bhi.w	8030622 <tcp_receive+0xeda>
       this if the sequence number of the incoming segment is less
       than rcv_nxt, and the sequence number plus the length of the
       segment is larger than rcv_nxt. */
    /*    if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
          if (TCP_SEQ_LT(pcb->rcv_nxt, seqno + tcplen)) {*/
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 802fc68:	687b      	ldr	r3, [r7, #4]
 802fc6a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 802fc6c:	4b30      	ldr	r3, [pc, #192]	; (802fd30 <tcp_receive+0x5e8>)
 802fc6e:	681b      	ldr	r3, [r3, #0]
 802fc70:	1ad3      	subs	r3, r2, r3
 802fc72:	3b01      	subs	r3, #1
 802fc74:	2b00      	cmp	r3, #0
 802fc76:	f2c0 808f 	blt.w	802fd98 <tcp_receive+0x650>
 802fc7a:	687b      	ldr	r3, [r7, #4]
 802fc7c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 802fc7e:	4b2b      	ldr	r3, [pc, #172]	; (802fd2c <tcp_receive+0x5e4>)
 802fc80:	881b      	ldrh	r3, [r3, #0]
 802fc82:	4619      	mov	r1, r3
 802fc84:	4b2a      	ldr	r3, [pc, #168]	; (802fd30 <tcp_receive+0x5e8>)
 802fc86:	681b      	ldr	r3, [r3, #0]
 802fc88:	440b      	add	r3, r1
 802fc8a:	1ad3      	subs	r3, r2, r3
 802fc8c:	3301      	adds	r3, #1
 802fc8e:	2b00      	cmp	r3, #0
 802fc90:	f300 8082 	bgt.w	802fd98 <tcp_receive+0x650>

         After we are done with adjusting the pbuf pointers we must
         adjust the ->data pointer in the seg and the segment
         length.*/

      struct pbuf *p = inseg.p;
 802fc94:	4b27      	ldr	r3, [pc, #156]	; (802fd34 <tcp_receive+0x5ec>)
 802fc96:	685b      	ldr	r3, [r3, #4]
 802fc98:	647b      	str	r3, [r7, #68]	; 0x44
      u32_t off32 = pcb->rcv_nxt - seqno;
 802fc9a:	687b      	ldr	r3, [r7, #4]
 802fc9c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 802fc9e:	4b24      	ldr	r3, [pc, #144]	; (802fd30 <tcp_receive+0x5e8>)
 802fca0:	681b      	ldr	r3, [r3, #0]
 802fca2:	1ad3      	subs	r3, r2, r3
 802fca4:	627b      	str	r3, [r7, #36]	; 0x24
      u16_t new_tot_len, off;
      LWIP_ASSERT("inseg.p != NULL", inseg.p);
 802fca6:	4b23      	ldr	r3, [pc, #140]	; (802fd34 <tcp_receive+0x5ec>)
 802fca8:	685b      	ldr	r3, [r3, #4]
 802fcaa:	2b00      	cmp	r3, #0
 802fcac:	d106      	bne.n	802fcbc <tcp_receive+0x574>
 802fcae:	4b22      	ldr	r3, [pc, #136]	; (802fd38 <tcp_receive+0x5f0>)
 802fcb0:	f240 5294 	movw	r2, #1428	; 0x594
 802fcb4:	4921      	ldr	r1, [pc, #132]	; (802fd3c <tcp_receive+0x5f4>)
 802fcb6:	4822      	ldr	r0, [pc, #136]	; (802fd40 <tcp_receive+0x5f8>)
 802fcb8:	f006 fa6e 	bl	8036198 <iprintf>
      LWIP_ASSERT("insane offset!", (off32 < 0xffff));
 802fcbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802fcbe:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 802fcc2:	4293      	cmp	r3, r2
 802fcc4:	d906      	bls.n	802fcd4 <tcp_receive+0x58c>
 802fcc6:	4b1c      	ldr	r3, [pc, #112]	; (802fd38 <tcp_receive+0x5f0>)
 802fcc8:	f240 5295 	movw	r2, #1429	; 0x595
 802fccc:	491d      	ldr	r1, [pc, #116]	; (802fd44 <tcp_receive+0x5fc>)
 802fcce:	481c      	ldr	r0, [pc, #112]	; (802fd40 <tcp_receive+0x5f8>)
 802fcd0:	f006 fa62 	bl	8036198 <iprintf>
      off = (u16_t)off32;
 802fcd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802fcd6:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
      LWIP_ASSERT("pbuf too short!", (((s32_t)inseg.p->tot_len) >= off));
 802fcda:	4b16      	ldr	r3, [pc, #88]	; (802fd34 <tcp_receive+0x5ec>)
 802fcdc:	685b      	ldr	r3, [r3, #4]
 802fcde:	891b      	ldrh	r3, [r3, #8]
 802fce0:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 802fce4:	429a      	cmp	r2, r3
 802fce6:	d906      	bls.n	802fcf6 <tcp_receive+0x5ae>
 802fce8:	4b13      	ldr	r3, [pc, #76]	; (802fd38 <tcp_receive+0x5f0>)
 802fcea:	f240 5297 	movw	r2, #1431	; 0x597
 802fcee:	4916      	ldr	r1, [pc, #88]	; (802fd48 <tcp_receive+0x600>)
 802fcf0:	4813      	ldr	r0, [pc, #76]	; (802fd40 <tcp_receive+0x5f8>)
 802fcf2:	f006 fa51 	bl	8036198 <iprintf>
      inseg.len -= off;
 802fcf6:	4b0f      	ldr	r3, [pc, #60]	; (802fd34 <tcp_receive+0x5ec>)
 802fcf8:	891a      	ldrh	r2, [r3, #8]
 802fcfa:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 802fcfe:	1ad3      	subs	r3, r2, r3
 802fd00:	b29a      	uxth	r2, r3
 802fd02:	4b0c      	ldr	r3, [pc, #48]	; (802fd34 <tcp_receive+0x5ec>)
 802fd04:	811a      	strh	r2, [r3, #8]
      new_tot_len = (u16_t)(inseg.p->tot_len - off);
 802fd06:	4b0b      	ldr	r3, [pc, #44]	; (802fd34 <tcp_receive+0x5ec>)
 802fd08:	685b      	ldr	r3, [r3, #4]
 802fd0a:	891a      	ldrh	r2, [r3, #8]
 802fd0c:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 802fd10:	1ad3      	subs	r3, r2, r3
 802fd12:	847b      	strh	r3, [r7, #34]	; 0x22
      while (p->len < off) {
 802fd14:	e02a      	b.n	802fd6c <tcp_receive+0x624>
 802fd16:	bf00      	nop
 802fd18:	08039610 	.word	0x08039610
 802fd1c:	08039618 	.word	0x08039618
 802fd20:	2000ee4c 	.word	0x2000ee4c
 802fd24:	2000ee48 	.word	0x2000ee48
 802fd28:	2000ee0c 	.word	0x2000ee0c
 802fd2c:	2000ee4e 	.word	0x2000ee4e
 802fd30:	2000ee44 	.word	0x2000ee44
 802fd34:	2000ee24 	.word	0x2000ee24
 802fd38:	080392a8 	.word	0x080392a8
 802fd3c:	08039620 	.word	0x08039620
 802fd40:	080392f4 	.word	0x080392f4
 802fd44:	08039630 	.word	0x08039630
 802fd48:	08039640 	.word	0x08039640
        off -= p->len;
 802fd4c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 802fd4e:	895b      	ldrh	r3, [r3, #10]
 802fd50:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 802fd54:	1ad3      	subs	r3, r2, r3
 802fd56:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
        /* all pbufs up to and including this one have len==0, so tot_len is equal */
        p->tot_len = new_tot_len;
 802fd5a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 802fd5c:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 802fd5e:	811a      	strh	r2, [r3, #8]
        p->len = 0;
 802fd60:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 802fd62:	2200      	movs	r2, #0
 802fd64:	815a      	strh	r2, [r3, #10]
        p = p->next;
 802fd66:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 802fd68:	681b      	ldr	r3, [r3, #0]
 802fd6a:	647b      	str	r3, [r7, #68]	; 0x44
      while (p->len < off) {
 802fd6c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 802fd6e:	895b      	ldrh	r3, [r3, #10]
 802fd70:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 802fd74:	429a      	cmp	r2, r3
 802fd76:	d8e9      	bhi.n	802fd4c <tcp_receive+0x604>
      }
      /* cannot fail... */
      pbuf_remove_header(p, off);
 802fd78:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 802fd7c:	4619      	mov	r1, r3
 802fd7e:	6c78      	ldr	r0, [r7, #68]	; 0x44
 802fd80:	f7fc f806 	bl	802bd90 <pbuf_remove_header>
      inseg.tcphdr->seqno = seqno = pcb->rcv_nxt;
 802fd84:	687b      	ldr	r3, [r7, #4]
 802fd86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 802fd88:	4a91      	ldr	r2, [pc, #580]	; (802ffd0 <tcp_receive+0x888>)
 802fd8a:	6013      	str	r3, [r2, #0]
 802fd8c:	4b91      	ldr	r3, [pc, #580]	; (802ffd4 <tcp_receive+0x88c>)
 802fd8e:	68db      	ldr	r3, [r3, #12]
 802fd90:	4a8f      	ldr	r2, [pc, #572]	; (802ffd0 <tcp_receive+0x888>)
 802fd92:	6812      	ldr	r2, [r2, #0]
 802fd94:	605a      	str	r2, [r3, #4]
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 802fd96:	e00d      	b.n	802fdb4 <tcp_receive+0x66c>
    } else {
      if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
 802fd98:	4b8d      	ldr	r3, [pc, #564]	; (802ffd0 <tcp_receive+0x888>)
 802fd9a:	681a      	ldr	r2, [r3, #0]
 802fd9c:	687b      	ldr	r3, [r7, #4]
 802fd9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 802fda0:	1ad3      	subs	r3, r2, r3
 802fda2:	2b00      	cmp	r3, #0
 802fda4:	da06      	bge.n	802fdb4 <tcp_receive+0x66c>
        /* the whole segment is < rcv_nxt */
        /* must be a duplicate of a packet that has already been correctly handled */

        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: duplicate seqno %"U32_F"\n", seqno));
        tcp_ack_now(pcb);
 802fda6:	687b      	ldr	r3, [r7, #4]
 802fda8:	8b5b      	ldrh	r3, [r3, #26]
 802fdaa:	f043 0302 	orr.w	r3, r3, #2
 802fdae:	b29a      	uxth	r2, r3
 802fdb0:	687b      	ldr	r3, [r7, #4]
 802fdb2:	835a      	strh	r2, [r3, #26]
    }

    /* The sequence number must be within the window (above rcv_nxt
       and below rcv_nxt + rcv_wnd) in order to be further
       processed. */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 802fdb4:	4b86      	ldr	r3, [pc, #536]	; (802ffd0 <tcp_receive+0x888>)
 802fdb6:	681a      	ldr	r2, [r3, #0]
 802fdb8:	687b      	ldr	r3, [r7, #4]
 802fdba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 802fdbc:	1ad3      	subs	r3, r2, r3
 802fdbe:	2b00      	cmp	r3, #0
 802fdc0:	f2c0 842a 	blt.w	8030618 <tcp_receive+0xed0>
 802fdc4:	4b82      	ldr	r3, [pc, #520]	; (802ffd0 <tcp_receive+0x888>)
 802fdc6:	681a      	ldr	r2, [r3, #0]
 802fdc8:	687b      	ldr	r3, [r7, #4]
 802fdca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 802fdcc:	6879      	ldr	r1, [r7, #4]
 802fdce:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 802fdd0:	440b      	add	r3, r1
 802fdd2:	1ad3      	subs	r3, r2, r3
 802fdd4:	3301      	adds	r3, #1
 802fdd6:	2b00      	cmp	r3, #0
 802fdd8:	f300 841e 	bgt.w	8030618 <tcp_receive+0xed0>
                        pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
      if (pcb->rcv_nxt == seqno) {
 802fddc:	687b      	ldr	r3, [r7, #4]
 802fdde:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 802fde0:	4b7b      	ldr	r3, [pc, #492]	; (802ffd0 <tcp_receive+0x888>)
 802fde2:	681b      	ldr	r3, [r3, #0]
 802fde4:	429a      	cmp	r2, r3
 802fde6:	f040 829a 	bne.w	803031e <tcp_receive+0xbd6>
        /* The incoming segment is the next in sequence. We check if
           we have to trim the end of the segment and update rcv_nxt
           and pass the data to the application. */
        tcplen = TCP_TCPLEN(&inseg);
 802fdea:	4b7a      	ldr	r3, [pc, #488]	; (802ffd4 <tcp_receive+0x88c>)
 802fdec:	891c      	ldrh	r4, [r3, #8]
 802fdee:	4b79      	ldr	r3, [pc, #484]	; (802ffd4 <tcp_receive+0x88c>)
 802fdf0:	68db      	ldr	r3, [r3, #12]
 802fdf2:	899b      	ldrh	r3, [r3, #12]
 802fdf4:	b29b      	uxth	r3, r3
 802fdf6:	4618      	mov	r0, r3
 802fdf8:	f7fa fb8e 	bl	802a518 <lwip_htons>
 802fdfc:	4603      	mov	r3, r0
 802fdfe:	b2db      	uxtb	r3, r3
 802fe00:	f003 0303 	and.w	r3, r3, #3
 802fe04:	2b00      	cmp	r3, #0
 802fe06:	d001      	beq.n	802fe0c <tcp_receive+0x6c4>
 802fe08:	2301      	movs	r3, #1
 802fe0a:	e000      	b.n	802fe0e <tcp_receive+0x6c6>
 802fe0c:	2300      	movs	r3, #0
 802fe0e:	4423      	add	r3, r4
 802fe10:	b29a      	uxth	r2, r3
 802fe12:	4b71      	ldr	r3, [pc, #452]	; (802ffd8 <tcp_receive+0x890>)
 802fe14:	801a      	strh	r2, [r3, #0]

        if (tcplen > pcb->rcv_wnd) {
 802fe16:	687b      	ldr	r3, [r7, #4]
 802fe18:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 802fe1a:	4b6f      	ldr	r3, [pc, #444]	; (802ffd8 <tcp_receive+0x890>)
 802fe1c:	881b      	ldrh	r3, [r3, #0]
 802fe1e:	429a      	cmp	r2, r3
 802fe20:	d275      	bcs.n	802ff0e <tcp_receive+0x7c6>
          LWIP_DEBUGF(TCP_INPUT_DEBUG,
                      ("tcp_receive: other end overran receive window"
                       "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                       seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 802fe22:	4b6c      	ldr	r3, [pc, #432]	; (802ffd4 <tcp_receive+0x88c>)
 802fe24:	68db      	ldr	r3, [r3, #12]
 802fe26:	899b      	ldrh	r3, [r3, #12]
 802fe28:	b29b      	uxth	r3, r3
 802fe2a:	4618      	mov	r0, r3
 802fe2c:	f7fa fb74 	bl	802a518 <lwip_htons>
 802fe30:	4603      	mov	r3, r0
 802fe32:	b2db      	uxtb	r3, r3
 802fe34:	f003 0301 	and.w	r3, r3, #1
 802fe38:	2b00      	cmp	r3, #0
 802fe3a:	d01f      	beq.n	802fe7c <tcp_receive+0x734>
            /* Must remove the FIN from the header as we're trimming
             * that byte of sequence-space from the packet */
            TCPH_FLAGS_SET(inseg.tcphdr, TCPH_FLAGS(inseg.tcphdr) & ~(unsigned int)TCP_FIN);
 802fe3c:	4b65      	ldr	r3, [pc, #404]	; (802ffd4 <tcp_receive+0x88c>)
 802fe3e:	68db      	ldr	r3, [r3, #12]
 802fe40:	899b      	ldrh	r3, [r3, #12]
 802fe42:	b29b      	uxth	r3, r3
 802fe44:	b21b      	sxth	r3, r3
 802fe46:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 802fe4a:	b21c      	sxth	r4, r3
 802fe4c:	4b61      	ldr	r3, [pc, #388]	; (802ffd4 <tcp_receive+0x88c>)
 802fe4e:	68db      	ldr	r3, [r3, #12]
 802fe50:	899b      	ldrh	r3, [r3, #12]
 802fe52:	b29b      	uxth	r3, r3
 802fe54:	4618      	mov	r0, r3
 802fe56:	f7fa fb5f 	bl	802a518 <lwip_htons>
 802fe5a:	4603      	mov	r3, r0
 802fe5c:	b2db      	uxtb	r3, r3
 802fe5e:	b29b      	uxth	r3, r3
 802fe60:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 802fe64:	b29b      	uxth	r3, r3
 802fe66:	4618      	mov	r0, r3
 802fe68:	f7fa fb56 	bl	802a518 <lwip_htons>
 802fe6c:	4603      	mov	r3, r0
 802fe6e:	b21b      	sxth	r3, r3
 802fe70:	4323      	orrs	r3, r4
 802fe72:	b21a      	sxth	r2, r3
 802fe74:	4b57      	ldr	r3, [pc, #348]	; (802ffd4 <tcp_receive+0x88c>)
 802fe76:	68db      	ldr	r3, [r3, #12]
 802fe78:	b292      	uxth	r2, r2
 802fe7a:	819a      	strh	r2, [r3, #12]
          }
          /* Adjust length of segment to fit in the window. */
          TCPWND_CHECK16(pcb->rcv_wnd);
          inseg.len = (u16_t)pcb->rcv_wnd;
 802fe7c:	687b      	ldr	r3, [r7, #4]
 802fe7e:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 802fe80:	4b54      	ldr	r3, [pc, #336]	; (802ffd4 <tcp_receive+0x88c>)
 802fe82:	811a      	strh	r2, [r3, #8]
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 802fe84:	4b53      	ldr	r3, [pc, #332]	; (802ffd4 <tcp_receive+0x88c>)
 802fe86:	68db      	ldr	r3, [r3, #12]
 802fe88:	899b      	ldrh	r3, [r3, #12]
 802fe8a:	b29b      	uxth	r3, r3
 802fe8c:	4618      	mov	r0, r3
 802fe8e:	f7fa fb43 	bl	802a518 <lwip_htons>
 802fe92:	4603      	mov	r3, r0
 802fe94:	b2db      	uxtb	r3, r3
 802fe96:	f003 0302 	and.w	r3, r3, #2
 802fe9a:	2b00      	cmp	r3, #0
 802fe9c:	d005      	beq.n	802feaa <tcp_receive+0x762>
            inseg.len -= 1;
 802fe9e:	4b4d      	ldr	r3, [pc, #308]	; (802ffd4 <tcp_receive+0x88c>)
 802fea0:	891b      	ldrh	r3, [r3, #8]
 802fea2:	3b01      	subs	r3, #1
 802fea4:	b29a      	uxth	r2, r3
 802fea6:	4b4b      	ldr	r3, [pc, #300]	; (802ffd4 <tcp_receive+0x88c>)
 802fea8:	811a      	strh	r2, [r3, #8]
          }
          pbuf_realloc(inseg.p, inseg.len);
 802feaa:	4b4a      	ldr	r3, [pc, #296]	; (802ffd4 <tcp_receive+0x88c>)
 802feac:	685b      	ldr	r3, [r3, #4]
 802feae:	4a49      	ldr	r2, [pc, #292]	; (802ffd4 <tcp_receive+0x88c>)
 802feb0:	8912      	ldrh	r2, [r2, #8]
 802feb2:	4611      	mov	r1, r2
 802feb4:	4618      	mov	r0, r3
 802feb6:	f7fb fe6b 	bl	802bb90 <pbuf_realloc>
          tcplen = TCP_TCPLEN(&inseg);
 802feba:	4b46      	ldr	r3, [pc, #280]	; (802ffd4 <tcp_receive+0x88c>)
 802febc:	891c      	ldrh	r4, [r3, #8]
 802febe:	4b45      	ldr	r3, [pc, #276]	; (802ffd4 <tcp_receive+0x88c>)
 802fec0:	68db      	ldr	r3, [r3, #12]
 802fec2:	899b      	ldrh	r3, [r3, #12]
 802fec4:	b29b      	uxth	r3, r3
 802fec6:	4618      	mov	r0, r3
 802fec8:	f7fa fb26 	bl	802a518 <lwip_htons>
 802fecc:	4603      	mov	r3, r0
 802fece:	b2db      	uxtb	r3, r3
 802fed0:	f003 0303 	and.w	r3, r3, #3
 802fed4:	2b00      	cmp	r3, #0
 802fed6:	d001      	beq.n	802fedc <tcp_receive+0x794>
 802fed8:	2301      	movs	r3, #1
 802feda:	e000      	b.n	802fede <tcp_receive+0x796>
 802fedc:	2300      	movs	r3, #0
 802fede:	4423      	add	r3, r4
 802fee0:	b29a      	uxth	r2, r3
 802fee2:	4b3d      	ldr	r3, [pc, #244]	; (802ffd8 <tcp_receive+0x890>)
 802fee4:	801a      	strh	r2, [r3, #0]
          LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 802fee6:	4b3c      	ldr	r3, [pc, #240]	; (802ffd8 <tcp_receive+0x890>)
 802fee8:	881b      	ldrh	r3, [r3, #0]
 802feea:	461a      	mov	r2, r3
 802feec:	4b38      	ldr	r3, [pc, #224]	; (802ffd0 <tcp_receive+0x888>)
 802feee:	681b      	ldr	r3, [r3, #0]
 802fef0:	441a      	add	r2, r3
 802fef2:	687b      	ldr	r3, [r7, #4]
 802fef4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 802fef6:	6879      	ldr	r1, [r7, #4]
 802fef8:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 802fefa:	440b      	add	r3, r1
 802fefc:	429a      	cmp	r2, r3
 802fefe:	d006      	beq.n	802ff0e <tcp_receive+0x7c6>
 802ff00:	4b36      	ldr	r3, [pc, #216]	; (802ffdc <tcp_receive+0x894>)
 802ff02:	f240 52cb 	movw	r2, #1483	; 0x5cb
 802ff06:	4936      	ldr	r1, [pc, #216]	; (802ffe0 <tcp_receive+0x898>)
 802ff08:	4836      	ldr	r0, [pc, #216]	; (802ffe4 <tcp_receive+0x89c>)
 802ff0a:	f006 f945 	bl	8036198 <iprintf>
        }
#if TCP_QUEUE_OOSEQ
        /* Received in-sequence data, adjust ooseq data if:
           - FIN has been received or
           - inseq overlaps with ooseq */
        if (pcb->ooseq != NULL) {
 802ff0e:	687b      	ldr	r3, [r7, #4]
 802ff10:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 802ff12:	2b00      	cmp	r3, #0
 802ff14:	f000 80e7 	beq.w	80300e6 <tcp_receive+0x99e>
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 802ff18:	4b2e      	ldr	r3, [pc, #184]	; (802ffd4 <tcp_receive+0x88c>)
 802ff1a:	68db      	ldr	r3, [r3, #12]
 802ff1c:	899b      	ldrh	r3, [r3, #12]
 802ff1e:	b29b      	uxth	r3, r3
 802ff20:	4618      	mov	r0, r3
 802ff22:	f7fa faf9 	bl	802a518 <lwip_htons>
 802ff26:	4603      	mov	r3, r0
 802ff28:	b2db      	uxtb	r3, r3
 802ff2a:	f003 0301 	and.w	r3, r3, #1
 802ff2e:	2b00      	cmp	r3, #0
 802ff30:	d010      	beq.n	802ff54 <tcp_receive+0x80c>
            LWIP_DEBUGF(TCP_INPUT_DEBUG,
                        ("tcp_receive: received in-order FIN, binning ooseq queue\n"));
            /* Received in-order FIN means anything that was received
             * out of order must now have been received in-order, so
             * bin the ooseq queue */
            while (pcb->ooseq != NULL) {
 802ff32:	e00a      	b.n	802ff4a <tcp_receive+0x802>
              struct tcp_seg *old_ooseq = pcb->ooseq;
 802ff34:	687b      	ldr	r3, [r7, #4]
 802ff36:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 802ff38:	60fb      	str	r3, [r7, #12]
              pcb->ooseq = pcb->ooseq->next;
 802ff3a:	687b      	ldr	r3, [r7, #4]
 802ff3c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 802ff3e:	681a      	ldr	r2, [r3, #0]
 802ff40:	687b      	ldr	r3, [r7, #4]
 802ff42:	675a      	str	r2, [r3, #116]	; 0x74
              tcp_seg_free(old_ooseq);
 802ff44:	68f8      	ldr	r0, [r7, #12]
 802ff46:	f7fd fc34 	bl	802d7b2 <tcp_seg_free>
            while (pcb->ooseq != NULL) {
 802ff4a:	687b      	ldr	r3, [r7, #4]
 802ff4c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 802ff4e:	2b00      	cmp	r3, #0
 802ff50:	d1f0      	bne.n	802ff34 <tcp_receive+0x7ec>
 802ff52:	e0c8      	b.n	80300e6 <tcp_receive+0x99e>
            }
          } else {
            struct tcp_seg *next = pcb->ooseq;
 802ff54:	687b      	ldr	r3, [r7, #4]
 802ff56:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 802ff58:	63fb      	str	r3, [r7, #60]	; 0x3c
            /* Remove all segments on ooseq that are covered by inseg already.
             * FIN is copied from ooseq to inseg if present. */
            while (next &&
 802ff5a:	e052      	b.n	8030002 <tcp_receive+0x8ba>
                   TCP_SEQ_GEQ(seqno + tcplen,
                               next->tcphdr->seqno + next->len)) {
              struct tcp_seg *tmp;
              /* inseg cannot have FIN here (already processed above) */
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 802ff5c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 802ff5e:	68db      	ldr	r3, [r3, #12]
 802ff60:	899b      	ldrh	r3, [r3, #12]
 802ff62:	b29b      	uxth	r3, r3
 802ff64:	4618      	mov	r0, r3
 802ff66:	f7fa fad7 	bl	802a518 <lwip_htons>
 802ff6a:	4603      	mov	r3, r0
 802ff6c:	b2db      	uxtb	r3, r3
 802ff6e:	f003 0301 	and.w	r3, r3, #1
 802ff72:	2b00      	cmp	r3, #0
 802ff74:	d03d      	beq.n	802fff2 <tcp_receive+0x8aa>
                  (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) == 0) {
 802ff76:	4b17      	ldr	r3, [pc, #92]	; (802ffd4 <tcp_receive+0x88c>)
 802ff78:	68db      	ldr	r3, [r3, #12]
 802ff7a:	899b      	ldrh	r3, [r3, #12]
 802ff7c:	b29b      	uxth	r3, r3
 802ff7e:	4618      	mov	r0, r3
 802ff80:	f7fa faca 	bl	802a518 <lwip_htons>
 802ff84:	4603      	mov	r3, r0
 802ff86:	b2db      	uxtb	r3, r3
 802ff88:	f003 0302 	and.w	r3, r3, #2
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 802ff8c:	2b00      	cmp	r3, #0
 802ff8e:	d130      	bne.n	802fff2 <tcp_receive+0x8aa>
                TCPH_SET_FLAG(inseg.tcphdr, TCP_FIN);
 802ff90:	4b10      	ldr	r3, [pc, #64]	; (802ffd4 <tcp_receive+0x88c>)
 802ff92:	68db      	ldr	r3, [r3, #12]
 802ff94:	899b      	ldrh	r3, [r3, #12]
 802ff96:	b29c      	uxth	r4, r3
 802ff98:	2001      	movs	r0, #1
 802ff9a:	f7fa fabd 	bl	802a518 <lwip_htons>
 802ff9e:	4603      	mov	r3, r0
 802ffa0:	461a      	mov	r2, r3
 802ffa2:	4b0c      	ldr	r3, [pc, #48]	; (802ffd4 <tcp_receive+0x88c>)
 802ffa4:	68db      	ldr	r3, [r3, #12]
 802ffa6:	4322      	orrs	r2, r4
 802ffa8:	b292      	uxth	r2, r2
 802ffaa:	819a      	strh	r2, [r3, #12]
                tcplen = TCP_TCPLEN(&inseg);
 802ffac:	4b09      	ldr	r3, [pc, #36]	; (802ffd4 <tcp_receive+0x88c>)
 802ffae:	891c      	ldrh	r4, [r3, #8]
 802ffb0:	4b08      	ldr	r3, [pc, #32]	; (802ffd4 <tcp_receive+0x88c>)
 802ffb2:	68db      	ldr	r3, [r3, #12]
 802ffb4:	899b      	ldrh	r3, [r3, #12]
 802ffb6:	b29b      	uxth	r3, r3
 802ffb8:	4618      	mov	r0, r3
 802ffba:	f7fa faad 	bl	802a518 <lwip_htons>
 802ffbe:	4603      	mov	r3, r0
 802ffc0:	b2db      	uxtb	r3, r3
 802ffc2:	f003 0303 	and.w	r3, r3, #3
 802ffc6:	2b00      	cmp	r3, #0
 802ffc8:	d00e      	beq.n	802ffe8 <tcp_receive+0x8a0>
 802ffca:	2301      	movs	r3, #1
 802ffcc:	e00d      	b.n	802ffea <tcp_receive+0x8a2>
 802ffce:	bf00      	nop
 802ffd0:	2000ee44 	.word	0x2000ee44
 802ffd4:	2000ee24 	.word	0x2000ee24
 802ffd8:	2000ee4e 	.word	0x2000ee4e
 802ffdc:	080392a8 	.word	0x080392a8
 802ffe0:	08039650 	.word	0x08039650
 802ffe4:	080392f4 	.word	0x080392f4
 802ffe8:	2300      	movs	r3, #0
 802ffea:	4423      	add	r3, r4
 802ffec:	b29a      	uxth	r2, r3
 802ffee:	4b98      	ldr	r3, [pc, #608]	; (8030250 <tcp_receive+0xb08>)
 802fff0:	801a      	strh	r2, [r3, #0]
              }
              tmp = next;
 802fff2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 802fff4:	613b      	str	r3, [r7, #16]
              next = next->next;
 802fff6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 802fff8:	681b      	ldr	r3, [r3, #0]
 802fffa:	63fb      	str	r3, [r7, #60]	; 0x3c
              tcp_seg_free(tmp);
 802fffc:	6938      	ldr	r0, [r7, #16]
 802fffe:	f7fd fbd8 	bl	802d7b2 <tcp_seg_free>
            while (next &&
 8030002:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8030004:	2b00      	cmp	r3, #0
 8030006:	d00e      	beq.n	8030026 <tcp_receive+0x8de>
                   TCP_SEQ_GEQ(seqno + tcplen,
 8030008:	4b91      	ldr	r3, [pc, #580]	; (8030250 <tcp_receive+0xb08>)
 803000a:	881b      	ldrh	r3, [r3, #0]
 803000c:	461a      	mov	r2, r3
 803000e:	4b91      	ldr	r3, [pc, #580]	; (8030254 <tcp_receive+0xb0c>)
 8030010:	681b      	ldr	r3, [r3, #0]
 8030012:	441a      	add	r2, r3
 8030014:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8030016:	68db      	ldr	r3, [r3, #12]
 8030018:	685b      	ldr	r3, [r3, #4]
 803001a:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 803001c:	8909      	ldrh	r1, [r1, #8]
 803001e:	440b      	add	r3, r1
 8030020:	1ad3      	subs	r3, r2, r3
            while (next &&
 8030022:	2b00      	cmp	r3, #0
 8030024:	da9a      	bge.n	802ff5c <tcp_receive+0x814>
            }
            /* Now trim right side of inseg if it overlaps with the first
             * segment on ooseq */
            if (next &&
 8030026:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8030028:	2b00      	cmp	r3, #0
 803002a:	d059      	beq.n	80300e0 <tcp_receive+0x998>
                TCP_SEQ_GT(seqno + tcplen,
 803002c:	4b88      	ldr	r3, [pc, #544]	; (8030250 <tcp_receive+0xb08>)
 803002e:	881b      	ldrh	r3, [r3, #0]
 8030030:	461a      	mov	r2, r3
 8030032:	4b88      	ldr	r3, [pc, #544]	; (8030254 <tcp_receive+0xb0c>)
 8030034:	681b      	ldr	r3, [r3, #0]
 8030036:	441a      	add	r2, r3
 8030038:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 803003a:	68db      	ldr	r3, [r3, #12]
 803003c:	685b      	ldr	r3, [r3, #4]
 803003e:	1ad3      	subs	r3, r2, r3
            if (next &&
 8030040:	2b00      	cmp	r3, #0
 8030042:	dd4d      	ble.n	80300e0 <tcp_receive+0x998>
                           next->tcphdr->seqno)) {
              /* inseg cannot have FIN here (already processed above) */
              inseg.len = (u16_t)(next->tcphdr->seqno - seqno);
 8030044:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8030046:	68db      	ldr	r3, [r3, #12]
 8030048:	685b      	ldr	r3, [r3, #4]
 803004a:	b29a      	uxth	r2, r3
 803004c:	4b81      	ldr	r3, [pc, #516]	; (8030254 <tcp_receive+0xb0c>)
 803004e:	681b      	ldr	r3, [r3, #0]
 8030050:	b29b      	uxth	r3, r3
 8030052:	1ad3      	subs	r3, r2, r3
 8030054:	b29a      	uxth	r2, r3
 8030056:	4b80      	ldr	r3, [pc, #512]	; (8030258 <tcp_receive+0xb10>)
 8030058:	811a      	strh	r2, [r3, #8]
              if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 803005a:	4b7f      	ldr	r3, [pc, #508]	; (8030258 <tcp_receive+0xb10>)
 803005c:	68db      	ldr	r3, [r3, #12]
 803005e:	899b      	ldrh	r3, [r3, #12]
 8030060:	b29b      	uxth	r3, r3
 8030062:	4618      	mov	r0, r3
 8030064:	f7fa fa58 	bl	802a518 <lwip_htons>
 8030068:	4603      	mov	r3, r0
 803006a:	b2db      	uxtb	r3, r3
 803006c:	f003 0302 	and.w	r3, r3, #2
 8030070:	2b00      	cmp	r3, #0
 8030072:	d005      	beq.n	8030080 <tcp_receive+0x938>
                inseg.len -= 1;
 8030074:	4b78      	ldr	r3, [pc, #480]	; (8030258 <tcp_receive+0xb10>)
 8030076:	891b      	ldrh	r3, [r3, #8]
 8030078:	3b01      	subs	r3, #1
 803007a:	b29a      	uxth	r2, r3
 803007c:	4b76      	ldr	r3, [pc, #472]	; (8030258 <tcp_receive+0xb10>)
 803007e:	811a      	strh	r2, [r3, #8]
              }
              pbuf_realloc(inseg.p, inseg.len);
 8030080:	4b75      	ldr	r3, [pc, #468]	; (8030258 <tcp_receive+0xb10>)
 8030082:	685b      	ldr	r3, [r3, #4]
 8030084:	4a74      	ldr	r2, [pc, #464]	; (8030258 <tcp_receive+0xb10>)
 8030086:	8912      	ldrh	r2, [r2, #8]
 8030088:	4611      	mov	r1, r2
 803008a:	4618      	mov	r0, r3
 803008c:	f7fb fd80 	bl	802bb90 <pbuf_realloc>
              tcplen = TCP_TCPLEN(&inseg);
 8030090:	4b71      	ldr	r3, [pc, #452]	; (8030258 <tcp_receive+0xb10>)
 8030092:	891c      	ldrh	r4, [r3, #8]
 8030094:	4b70      	ldr	r3, [pc, #448]	; (8030258 <tcp_receive+0xb10>)
 8030096:	68db      	ldr	r3, [r3, #12]
 8030098:	899b      	ldrh	r3, [r3, #12]
 803009a:	b29b      	uxth	r3, r3
 803009c:	4618      	mov	r0, r3
 803009e:	f7fa fa3b 	bl	802a518 <lwip_htons>
 80300a2:	4603      	mov	r3, r0
 80300a4:	b2db      	uxtb	r3, r3
 80300a6:	f003 0303 	and.w	r3, r3, #3
 80300aa:	2b00      	cmp	r3, #0
 80300ac:	d001      	beq.n	80300b2 <tcp_receive+0x96a>
 80300ae:	2301      	movs	r3, #1
 80300b0:	e000      	b.n	80300b4 <tcp_receive+0x96c>
 80300b2:	2300      	movs	r3, #0
 80300b4:	4423      	add	r3, r4
 80300b6:	b29a      	uxth	r2, r3
 80300b8:	4b65      	ldr	r3, [pc, #404]	; (8030250 <tcp_receive+0xb08>)
 80300ba:	801a      	strh	r2, [r3, #0]
              LWIP_ASSERT("tcp_receive: segment not trimmed correctly to ooseq queue\n",
 80300bc:	4b64      	ldr	r3, [pc, #400]	; (8030250 <tcp_receive+0xb08>)
 80300be:	881b      	ldrh	r3, [r3, #0]
 80300c0:	461a      	mov	r2, r3
 80300c2:	4b64      	ldr	r3, [pc, #400]	; (8030254 <tcp_receive+0xb0c>)
 80300c4:	681b      	ldr	r3, [r3, #0]
 80300c6:	441a      	add	r2, r3
 80300c8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80300ca:	68db      	ldr	r3, [r3, #12]
 80300cc:	685b      	ldr	r3, [r3, #4]
 80300ce:	429a      	cmp	r2, r3
 80300d0:	d006      	beq.n	80300e0 <tcp_receive+0x998>
 80300d2:	4b62      	ldr	r3, [pc, #392]	; (803025c <tcp_receive+0xb14>)
 80300d4:	f240 52fc 	movw	r2, #1532	; 0x5fc
 80300d8:	4961      	ldr	r1, [pc, #388]	; (8030260 <tcp_receive+0xb18>)
 80300da:	4862      	ldr	r0, [pc, #392]	; (8030264 <tcp_receive+0xb1c>)
 80300dc:	f006 f85c 	bl	8036198 <iprintf>
                          (seqno + tcplen) == next->tcphdr->seqno);
            }
            pcb->ooseq = next;
 80300e0:	687b      	ldr	r3, [r7, #4]
 80300e2:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80300e4:	675a      	str	r2, [r3, #116]	; 0x74
          }
        }
#endif /* TCP_QUEUE_OOSEQ */

        pcb->rcv_nxt = seqno + tcplen;
 80300e6:	4b5a      	ldr	r3, [pc, #360]	; (8030250 <tcp_receive+0xb08>)
 80300e8:	881b      	ldrh	r3, [r3, #0]
 80300ea:	461a      	mov	r2, r3
 80300ec:	4b59      	ldr	r3, [pc, #356]	; (8030254 <tcp_receive+0xb0c>)
 80300ee:	681b      	ldr	r3, [r3, #0]
 80300f0:	441a      	add	r2, r3
 80300f2:	687b      	ldr	r3, [r7, #4]
 80300f4:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update the receiver's (our) window. */
        LWIP_ASSERT("tcp_receive: tcplen > rcv_wnd\n", pcb->rcv_wnd >= tcplen);
 80300f6:	687b      	ldr	r3, [r7, #4]
 80300f8:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 80300fa:	4b55      	ldr	r3, [pc, #340]	; (8030250 <tcp_receive+0xb08>)
 80300fc:	881b      	ldrh	r3, [r3, #0]
 80300fe:	429a      	cmp	r2, r3
 8030100:	d206      	bcs.n	8030110 <tcp_receive+0x9c8>
 8030102:	4b56      	ldr	r3, [pc, #344]	; (803025c <tcp_receive+0xb14>)
 8030104:	f240 6207 	movw	r2, #1543	; 0x607
 8030108:	4957      	ldr	r1, [pc, #348]	; (8030268 <tcp_receive+0xb20>)
 803010a:	4856      	ldr	r0, [pc, #344]	; (8030264 <tcp_receive+0xb1c>)
 803010c:	f006 f844 	bl	8036198 <iprintf>
        pcb->rcv_wnd -= tcplen;
 8030110:	687b      	ldr	r3, [r7, #4]
 8030112:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8030114:	4b4e      	ldr	r3, [pc, #312]	; (8030250 <tcp_receive+0xb08>)
 8030116:	881b      	ldrh	r3, [r3, #0]
 8030118:	1ad3      	subs	r3, r2, r3
 803011a:	b29a      	uxth	r2, r3
 803011c:	687b      	ldr	r3, [r7, #4]
 803011e:	851a      	strh	r2, [r3, #40]	; 0x28

        tcp_update_rcv_ann_wnd(pcb);
 8030120:	6878      	ldr	r0, [r7, #4]
 8030122:	f7fc fe21 	bl	802cd68 <tcp_update_rcv_ann_wnd>
           chains its data on this pbuf as well.

           If the segment was a FIN, we set the TF_GOT_FIN flag that will
           be used to indicate to the application that the remote side has
           closed its end of the connection. */
        if (inseg.p->tot_len > 0) {
 8030126:	4b4c      	ldr	r3, [pc, #304]	; (8030258 <tcp_receive+0xb10>)
 8030128:	685b      	ldr	r3, [r3, #4]
 803012a:	891b      	ldrh	r3, [r3, #8]
 803012c:	2b00      	cmp	r3, #0
 803012e:	d006      	beq.n	803013e <tcp_receive+0x9f6>
          recv_data = inseg.p;
 8030130:	4b49      	ldr	r3, [pc, #292]	; (8030258 <tcp_receive+0xb10>)
 8030132:	685b      	ldr	r3, [r3, #4]
 8030134:	4a4d      	ldr	r2, [pc, #308]	; (803026c <tcp_receive+0xb24>)
 8030136:	6013      	str	r3, [r2, #0]
          /* Since this pbuf now is the responsibility of the
             application, we delete our reference to it so that we won't
             (mistakingly) deallocate it. */
          inseg.p = NULL;
 8030138:	4b47      	ldr	r3, [pc, #284]	; (8030258 <tcp_receive+0xb10>)
 803013a:	2200      	movs	r2, #0
 803013c:	605a      	str	r2, [r3, #4]
        }
        if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 803013e:	4b46      	ldr	r3, [pc, #280]	; (8030258 <tcp_receive+0xb10>)
 8030140:	68db      	ldr	r3, [r3, #12]
 8030142:	899b      	ldrh	r3, [r3, #12]
 8030144:	b29b      	uxth	r3, r3
 8030146:	4618      	mov	r0, r3
 8030148:	f7fa f9e6 	bl	802a518 <lwip_htons>
 803014c:	4603      	mov	r3, r0
 803014e:	b2db      	uxtb	r3, r3
 8030150:	f003 0301 	and.w	r3, r3, #1
 8030154:	2b00      	cmp	r3, #0
 8030156:	f000 80b8 	beq.w	80302ca <tcp_receive+0xb82>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: received FIN.\n"));
          recv_flags |= TF_GOT_FIN;
 803015a:	4b45      	ldr	r3, [pc, #276]	; (8030270 <tcp_receive+0xb28>)
 803015c:	781b      	ldrb	r3, [r3, #0]
 803015e:	f043 0320 	orr.w	r3, r3, #32
 8030162:	b2da      	uxtb	r2, r3
 8030164:	4b42      	ldr	r3, [pc, #264]	; (8030270 <tcp_receive+0xb28>)
 8030166:	701a      	strb	r2, [r3, #0]
        }

#if TCP_QUEUE_OOSEQ
        /* We now check if we have segments on the ->ooseq queue that
           are now in sequence. */
        while (pcb->ooseq != NULL &&
 8030168:	e0af      	b.n	80302ca <tcp_receive+0xb82>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {

          struct tcp_seg *cseg = pcb->ooseq;
 803016a:	687b      	ldr	r3, [r7, #4]
 803016c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 803016e:	60bb      	str	r3, [r7, #8]
          seqno = pcb->ooseq->tcphdr->seqno;
 8030170:	687b      	ldr	r3, [r7, #4]
 8030172:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8030174:	68db      	ldr	r3, [r3, #12]
 8030176:	685b      	ldr	r3, [r3, #4]
 8030178:	4a36      	ldr	r2, [pc, #216]	; (8030254 <tcp_receive+0xb0c>)
 803017a:	6013      	str	r3, [r2, #0]

          pcb->rcv_nxt += TCP_TCPLEN(cseg);
 803017c:	68bb      	ldr	r3, [r7, #8]
 803017e:	891b      	ldrh	r3, [r3, #8]
 8030180:	461c      	mov	r4, r3
 8030182:	68bb      	ldr	r3, [r7, #8]
 8030184:	68db      	ldr	r3, [r3, #12]
 8030186:	899b      	ldrh	r3, [r3, #12]
 8030188:	b29b      	uxth	r3, r3
 803018a:	4618      	mov	r0, r3
 803018c:	f7fa f9c4 	bl	802a518 <lwip_htons>
 8030190:	4603      	mov	r3, r0
 8030192:	b2db      	uxtb	r3, r3
 8030194:	f003 0303 	and.w	r3, r3, #3
 8030198:	2b00      	cmp	r3, #0
 803019a:	d001      	beq.n	80301a0 <tcp_receive+0xa58>
 803019c:	2301      	movs	r3, #1
 803019e:	e000      	b.n	80301a2 <tcp_receive+0xa5a>
 80301a0:	2300      	movs	r3, #0
 80301a2:	191a      	adds	r2, r3, r4
 80301a4:	687b      	ldr	r3, [r7, #4]
 80301a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80301a8:	441a      	add	r2, r3
 80301aa:	687b      	ldr	r3, [r7, #4]
 80301ac:	625a      	str	r2, [r3, #36]	; 0x24
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 80301ae:	687b      	ldr	r3, [r7, #4]
 80301b0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80301b2:	461c      	mov	r4, r3
 80301b4:	68bb      	ldr	r3, [r7, #8]
 80301b6:	891b      	ldrh	r3, [r3, #8]
 80301b8:	461d      	mov	r5, r3
 80301ba:	68bb      	ldr	r3, [r7, #8]
 80301bc:	68db      	ldr	r3, [r3, #12]
 80301be:	899b      	ldrh	r3, [r3, #12]
 80301c0:	b29b      	uxth	r3, r3
 80301c2:	4618      	mov	r0, r3
 80301c4:	f7fa f9a8 	bl	802a518 <lwip_htons>
 80301c8:	4603      	mov	r3, r0
 80301ca:	b2db      	uxtb	r3, r3
 80301cc:	f003 0303 	and.w	r3, r3, #3
 80301d0:	2b00      	cmp	r3, #0
 80301d2:	d001      	beq.n	80301d8 <tcp_receive+0xa90>
 80301d4:	2301      	movs	r3, #1
 80301d6:	e000      	b.n	80301da <tcp_receive+0xa92>
 80301d8:	2300      	movs	r3, #0
 80301da:	442b      	add	r3, r5
 80301dc:	429c      	cmp	r4, r3
 80301de:	d206      	bcs.n	80301ee <tcp_receive+0xaa6>
 80301e0:	4b1e      	ldr	r3, [pc, #120]	; (803025c <tcp_receive+0xb14>)
 80301e2:	f240 622b 	movw	r2, #1579	; 0x62b
 80301e6:	4923      	ldr	r1, [pc, #140]	; (8030274 <tcp_receive+0xb2c>)
 80301e8:	481e      	ldr	r0, [pc, #120]	; (8030264 <tcp_receive+0xb1c>)
 80301ea:	f005 ffd5 	bl	8036198 <iprintf>
                      pcb->rcv_wnd >= TCP_TCPLEN(cseg));
          pcb->rcv_wnd -= TCP_TCPLEN(cseg);
 80301ee:	68bb      	ldr	r3, [r7, #8]
 80301f0:	891b      	ldrh	r3, [r3, #8]
 80301f2:	461c      	mov	r4, r3
 80301f4:	68bb      	ldr	r3, [r7, #8]
 80301f6:	68db      	ldr	r3, [r3, #12]
 80301f8:	899b      	ldrh	r3, [r3, #12]
 80301fa:	b29b      	uxth	r3, r3
 80301fc:	4618      	mov	r0, r3
 80301fe:	f7fa f98b 	bl	802a518 <lwip_htons>
 8030202:	4603      	mov	r3, r0
 8030204:	b2db      	uxtb	r3, r3
 8030206:	f003 0303 	and.w	r3, r3, #3
 803020a:	2b00      	cmp	r3, #0
 803020c:	d001      	beq.n	8030212 <tcp_receive+0xaca>
 803020e:	2301      	movs	r3, #1
 8030210:	e000      	b.n	8030214 <tcp_receive+0xacc>
 8030212:	2300      	movs	r3, #0
 8030214:	1919      	adds	r1, r3, r4
 8030216:	687b      	ldr	r3, [r7, #4]
 8030218:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 803021a:	b28b      	uxth	r3, r1
 803021c:	1ad3      	subs	r3, r2, r3
 803021e:	b29a      	uxth	r2, r3
 8030220:	687b      	ldr	r3, [r7, #4]
 8030222:	851a      	strh	r2, [r3, #40]	; 0x28

          tcp_update_rcv_ann_wnd(pcb);
 8030224:	6878      	ldr	r0, [r7, #4]
 8030226:	f7fc fd9f 	bl	802cd68 <tcp_update_rcv_ann_wnd>

          if (cseg->p->tot_len > 0) {
 803022a:	68bb      	ldr	r3, [r7, #8]
 803022c:	685b      	ldr	r3, [r3, #4]
 803022e:	891b      	ldrh	r3, [r3, #8]
 8030230:	2b00      	cmp	r3, #0
 8030232:	d028      	beq.n	8030286 <tcp_receive+0xb3e>
            /* Chain this pbuf onto the pbuf that we will pass to
               the application. */
            /* With window scaling, this can overflow recv_data->tot_len, but
               that's not a problem since we explicitly fix that before passing
               recv_data to the application. */
            if (recv_data) {
 8030234:	4b0d      	ldr	r3, [pc, #52]	; (803026c <tcp_receive+0xb24>)
 8030236:	681b      	ldr	r3, [r3, #0]
 8030238:	2b00      	cmp	r3, #0
 803023a:	d01d      	beq.n	8030278 <tcp_receive+0xb30>
              pbuf_cat(recv_data, cseg->p);
 803023c:	4b0b      	ldr	r3, [pc, #44]	; (803026c <tcp_receive+0xb24>)
 803023e:	681a      	ldr	r2, [r3, #0]
 8030240:	68bb      	ldr	r3, [r7, #8]
 8030242:	685b      	ldr	r3, [r3, #4]
 8030244:	4619      	mov	r1, r3
 8030246:	4610      	mov	r0, r2
 8030248:	f7fb fef6 	bl	802c038 <pbuf_cat>
 803024c:	e018      	b.n	8030280 <tcp_receive+0xb38>
 803024e:	bf00      	nop
 8030250:	2000ee4e 	.word	0x2000ee4e
 8030254:	2000ee44 	.word	0x2000ee44
 8030258:	2000ee24 	.word	0x2000ee24
 803025c:	080392a8 	.word	0x080392a8
 8030260:	08039688 	.word	0x08039688
 8030264:	080392f4 	.word	0x080392f4
 8030268:	080396c4 	.word	0x080396c4
 803026c:	2000ee54 	.word	0x2000ee54
 8030270:	2000ee51 	.word	0x2000ee51
 8030274:	080396e4 	.word	0x080396e4
            } else {
              recv_data = cseg->p;
 8030278:	68bb      	ldr	r3, [r7, #8]
 803027a:	685b      	ldr	r3, [r3, #4]
 803027c:	4a70      	ldr	r2, [pc, #448]	; (8030440 <tcp_receive+0xcf8>)
 803027e:	6013      	str	r3, [r2, #0]
            }
            cseg->p = NULL;
 8030280:	68bb      	ldr	r3, [r7, #8]
 8030282:	2200      	movs	r2, #0
 8030284:	605a      	str	r2, [r3, #4]
          }
          if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 8030286:	68bb      	ldr	r3, [r7, #8]
 8030288:	68db      	ldr	r3, [r3, #12]
 803028a:	899b      	ldrh	r3, [r3, #12]
 803028c:	b29b      	uxth	r3, r3
 803028e:	4618      	mov	r0, r3
 8030290:	f7fa f942 	bl	802a518 <lwip_htons>
 8030294:	4603      	mov	r3, r0
 8030296:	b2db      	uxtb	r3, r3
 8030298:	f003 0301 	and.w	r3, r3, #1
 803029c:	2b00      	cmp	r3, #0
 803029e:	d00d      	beq.n	80302bc <tcp_receive+0xb74>
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: dequeued FIN.\n"));
            recv_flags |= TF_GOT_FIN;
 80302a0:	4b68      	ldr	r3, [pc, #416]	; (8030444 <tcp_receive+0xcfc>)
 80302a2:	781b      	ldrb	r3, [r3, #0]
 80302a4:	f043 0320 	orr.w	r3, r3, #32
 80302a8:	b2da      	uxtb	r2, r3
 80302aa:	4b66      	ldr	r3, [pc, #408]	; (8030444 <tcp_receive+0xcfc>)
 80302ac:	701a      	strb	r2, [r3, #0]
            if (pcb->state == ESTABLISHED) { /* force passive close or we can move to active close */
 80302ae:	687b      	ldr	r3, [r7, #4]
 80302b0:	7d1b      	ldrb	r3, [r3, #20]
 80302b2:	2b04      	cmp	r3, #4
 80302b4:	d102      	bne.n	80302bc <tcp_receive+0xb74>
              pcb->state = CLOSE_WAIT;
 80302b6:	687b      	ldr	r3, [r7, #4]
 80302b8:	2207      	movs	r2, #7
 80302ba:	751a      	strb	r2, [r3, #20]
            }
          }

          pcb->ooseq = cseg->next;
 80302bc:	68bb      	ldr	r3, [r7, #8]
 80302be:	681a      	ldr	r2, [r3, #0]
 80302c0:	687b      	ldr	r3, [r7, #4]
 80302c2:	675a      	str	r2, [r3, #116]	; 0x74
          tcp_seg_free(cseg);
 80302c4:	68b8      	ldr	r0, [r7, #8]
 80302c6:	f7fd fa74 	bl	802d7b2 <tcp_seg_free>
        while (pcb->ooseq != NULL &&
 80302ca:	687b      	ldr	r3, [r7, #4]
 80302cc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80302ce:	2b00      	cmp	r3, #0
 80302d0:	d008      	beq.n	80302e4 <tcp_receive+0xb9c>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {
 80302d2:	687b      	ldr	r3, [r7, #4]
 80302d4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80302d6:	68db      	ldr	r3, [r3, #12]
 80302d8:	685a      	ldr	r2, [r3, #4]
 80302da:	687b      	ldr	r3, [r7, #4]
 80302dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        while (pcb->ooseq != NULL &&
 80302de:	429a      	cmp	r2, r3
 80302e0:	f43f af43 	beq.w	803016a <tcp_receive+0xa22>
#endif /* LWIP_TCP_SACK_OUT */
#endif /* TCP_QUEUE_OOSEQ */


        /* Acknowledge the segment(s). */
        tcp_ack(pcb);
 80302e4:	687b      	ldr	r3, [r7, #4]
 80302e6:	8b5b      	ldrh	r3, [r3, #26]
 80302e8:	f003 0301 	and.w	r3, r3, #1
 80302ec:	2b00      	cmp	r3, #0
 80302ee:	d00e      	beq.n	803030e <tcp_receive+0xbc6>
 80302f0:	687b      	ldr	r3, [r7, #4]
 80302f2:	8b5b      	ldrh	r3, [r3, #26]
 80302f4:	f023 0301 	bic.w	r3, r3, #1
 80302f8:	b29a      	uxth	r2, r3
 80302fa:	687b      	ldr	r3, [r7, #4]
 80302fc:	835a      	strh	r2, [r3, #26]
 80302fe:	687b      	ldr	r3, [r7, #4]
 8030300:	8b5b      	ldrh	r3, [r3, #26]
 8030302:	f043 0302 	orr.w	r3, r3, #2
 8030306:	b29a      	uxth	r2, r3
 8030308:	687b      	ldr	r3, [r7, #4]
 803030a:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 803030c:	e188      	b.n	8030620 <tcp_receive+0xed8>
        tcp_ack(pcb);
 803030e:	687b      	ldr	r3, [r7, #4]
 8030310:	8b5b      	ldrh	r3, [r3, #26]
 8030312:	f043 0301 	orr.w	r3, r3, #1
 8030316:	b29a      	uxth	r2, r3
 8030318:	687b      	ldr	r3, [r7, #4]
 803031a:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 803031c:	e180      	b.n	8030620 <tcp_receive+0xed8>
      } else {
        /* We get here if the incoming segment is out-of-sequence. */

#if TCP_QUEUE_OOSEQ
        /* We queue the segment on the ->ooseq queue. */
        if (pcb->ooseq == NULL) {
 803031e:	687b      	ldr	r3, [r7, #4]
 8030320:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8030322:	2b00      	cmp	r3, #0
 8030324:	d106      	bne.n	8030334 <tcp_receive+0xbec>
          pcb->ooseq = tcp_seg_copy(&inseg);
 8030326:	4848      	ldr	r0, [pc, #288]	; (8030448 <tcp_receive+0xd00>)
 8030328:	f7fd fa5c 	bl	802d7e4 <tcp_seg_copy>
 803032c:	4602      	mov	r2, r0
 803032e:	687b      	ldr	r3, [r7, #4]
 8030330:	675a      	str	r2, [r3, #116]	; 0x74
 8030332:	e16d      	b.n	8030610 <tcp_receive+0xec8>
#if LWIP_TCP_SACK_OUT
          /* This is the left edge of the lowest possible SACK range.
             It may start before the newly received segment (possibly adjusted below). */
          u32_t sackbeg = TCP_SEQ_LT(seqno, pcb->ooseq->tcphdr->seqno) ? seqno : pcb->ooseq->tcphdr->seqno;
#endif /* LWIP_TCP_SACK_OUT */
          struct tcp_seg *next, *prev = NULL;
 8030334:	2300      	movs	r3, #0
 8030336:	637b      	str	r3, [r7, #52]	; 0x34
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 8030338:	687b      	ldr	r3, [r7, #4]
 803033a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 803033c:	63bb      	str	r3, [r7, #56]	; 0x38
 803033e:	e157      	b.n	80305f0 <tcp_receive+0xea8>
            if (seqno == next->tcphdr->seqno) {
 8030340:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8030342:	68db      	ldr	r3, [r3, #12]
 8030344:	685a      	ldr	r2, [r3, #4]
 8030346:	4b41      	ldr	r3, [pc, #260]	; (803044c <tcp_receive+0xd04>)
 8030348:	681b      	ldr	r3, [r3, #0]
 803034a:	429a      	cmp	r2, r3
 803034c:	d11d      	bne.n	803038a <tcp_receive+0xc42>
              /* The sequence number of the incoming segment is the
                 same as the sequence number of the segment on
                 ->ooseq. We check the lengths to see which one to
                 discard. */
              if (inseg.len > next->len) {
 803034e:	4b3e      	ldr	r3, [pc, #248]	; (8030448 <tcp_receive+0xd00>)
 8030350:	891a      	ldrh	r2, [r3, #8]
 8030352:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8030354:	891b      	ldrh	r3, [r3, #8]
 8030356:	429a      	cmp	r2, r3
 8030358:	f240 814f 	bls.w	80305fa <tcp_receive+0xeb2>
                /* The incoming segment is larger than the old
                   segment. We replace some segments with the new
                   one. */
                struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 803035c:	483a      	ldr	r0, [pc, #232]	; (8030448 <tcp_receive+0xd00>)
 803035e:	f7fd fa41 	bl	802d7e4 <tcp_seg_copy>
 8030362:	6178      	str	r0, [r7, #20]
                if (cseg != NULL) {
 8030364:	697b      	ldr	r3, [r7, #20]
 8030366:	2b00      	cmp	r3, #0
 8030368:	f000 8149 	beq.w	80305fe <tcp_receive+0xeb6>
                  if (prev != NULL) {
 803036c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 803036e:	2b00      	cmp	r3, #0
 8030370:	d003      	beq.n	803037a <tcp_receive+0xc32>
                    prev->next = cseg;
 8030372:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8030374:	697a      	ldr	r2, [r7, #20]
 8030376:	601a      	str	r2, [r3, #0]
 8030378:	e002      	b.n	8030380 <tcp_receive+0xc38>
                  } else {
                    pcb->ooseq = cseg;
 803037a:	687b      	ldr	r3, [r7, #4]
 803037c:	697a      	ldr	r2, [r7, #20]
 803037e:	675a      	str	r2, [r3, #116]	; 0x74
                  }
                  tcp_oos_insert_segment(cseg, next);
 8030380:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8030382:	6978      	ldr	r0, [r7, #20]
 8030384:	f7ff f8dc 	bl	802f540 <tcp_oos_insert_segment>
                }
                break;
 8030388:	e139      	b.n	80305fe <tcp_receive+0xeb6>
                   segment was smaller than the old one; in either
                   case, we ditch the incoming segment. */
                break;
              }
            } else {
              if (prev == NULL) {
 803038a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 803038c:	2b00      	cmp	r3, #0
 803038e:	d117      	bne.n	80303c0 <tcp_receive+0xc78>
                if (TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {
 8030390:	4b2e      	ldr	r3, [pc, #184]	; (803044c <tcp_receive+0xd04>)
 8030392:	681a      	ldr	r2, [r3, #0]
 8030394:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8030396:	68db      	ldr	r3, [r3, #12]
 8030398:	685b      	ldr	r3, [r3, #4]
 803039a:	1ad3      	subs	r3, r2, r3
 803039c:	2b00      	cmp	r3, #0
 803039e:	da57      	bge.n	8030450 <tcp_receive+0xd08>
                  /* The sequence number of the incoming segment is lower
                     than the sequence number of the first segment on the
                     queue. We put the incoming segment first on the
                     queue. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 80303a0:	4829      	ldr	r0, [pc, #164]	; (8030448 <tcp_receive+0xd00>)
 80303a2:	f7fd fa1f 	bl	802d7e4 <tcp_seg_copy>
 80303a6:	61b8      	str	r0, [r7, #24]
                  if (cseg != NULL) {
 80303a8:	69bb      	ldr	r3, [r7, #24]
 80303aa:	2b00      	cmp	r3, #0
 80303ac:	f000 8129 	beq.w	8030602 <tcp_receive+0xeba>
                    pcb->ooseq = cseg;
 80303b0:	687b      	ldr	r3, [r7, #4]
 80303b2:	69ba      	ldr	r2, [r7, #24]
 80303b4:	675a      	str	r2, [r3, #116]	; 0x74
                    tcp_oos_insert_segment(cseg, next);
 80303b6:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80303b8:	69b8      	ldr	r0, [r7, #24]
 80303ba:	f7ff f8c1 	bl	802f540 <tcp_oos_insert_segment>
                  }
                  break;
 80303be:	e120      	b.n	8030602 <tcp_receive+0xeba>
                }
              } else {
                /*if (TCP_SEQ_LT(prev->tcphdr->seqno, seqno) &&
                  TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {*/
                if (TCP_SEQ_BETWEEN(seqno, prev->tcphdr->seqno + 1, next->tcphdr->seqno - 1)) {
 80303c0:	4b22      	ldr	r3, [pc, #136]	; (803044c <tcp_receive+0xd04>)
 80303c2:	681a      	ldr	r2, [r3, #0]
 80303c4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80303c6:	68db      	ldr	r3, [r3, #12]
 80303c8:	685b      	ldr	r3, [r3, #4]
 80303ca:	1ad3      	subs	r3, r2, r3
 80303cc:	3b01      	subs	r3, #1
 80303ce:	2b00      	cmp	r3, #0
 80303d0:	db3e      	blt.n	8030450 <tcp_receive+0xd08>
 80303d2:	4b1e      	ldr	r3, [pc, #120]	; (803044c <tcp_receive+0xd04>)
 80303d4:	681a      	ldr	r2, [r3, #0]
 80303d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80303d8:	68db      	ldr	r3, [r3, #12]
 80303da:	685b      	ldr	r3, [r3, #4]
 80303dc:	1ad3      	subs	r3, r2, r3
 80303de:	3301      	adds	r3, #1
 80303e0:	2b00      	cmp	r3, #0
 80303e2:	dc35      	bgt.n	8030450 <tcp_receive+0xd08>
                  /* The sequence number of the incoming segment is in
                     between the sequence numbers of the previous and
                     the next segment on ->ooseq. We trim trim the previous
                     segment, delete next segments that included in received segment
                     and trim received, if needed. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 80303e4:	4818      	ldr	r0, [pc, #96]	; (8030448 <tcp_receive+0xd00>)
 80303e6:	f7fd f9fd 	bl	802d7e4 <tcp_seg_copy>
 80303ea:	61f8      	str	r0, [r7, #28]
                  if (cseg != NULL) {
 80303ec:	69fb      	ldr	r3, [r7, #28]
 80303ee:	2b00      	cmp	r3, #0
 80303f0:	f000 8109 	beq.w	8030606 <tcp_receive+0xebe>
                    if (TCP_SEQ_GT(prev->tcphdr->seqno + prev->len, seqno)) {
 80303f4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80303f6:	68db      	ldr	r3, [r3, #12]
 80303f8:	685b      	ldr	r3, [r3, #4]
 80303fa:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80303fc:	8912      	ldrh	r2, [r2, #8]
 80303fe:	441a      	add	r2, r3
 8030400:	4b12      	ldr	r3, [pc, #72]	; (803044c <tcp_receive+0xd04>)
 8030402:	681b      	ldr	r3, [r3, #0]
 8030404:	1ad3      	subs	r3, r2, r3
 8030406:	2b00      	cmp	r3, #0
 8030408:	dd12      	ble.n	8030430 <tcp_receive+0xce8>
                      /* We need to trim the prev segment. */
                      prev->len = (u16_t)(seqno - prev->tcphdr->seqno);
 803040a:	4b10      	ldr	r3, [pc, #64]	; (803044c <tcp_receive+0xd04>)
 803040c:	681b      	ldr	r3, [r3, #0]
 803040e:	b29a      	uxth	r2, r3
 8030410:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8030412:	68db      	ldr	r3, [r3, #12]
 8030414:	685b      	ldr	r3, [r3, #4]
 8030416:	b29b      	uxth	r3, r3
 8030418:	1ad3      	subs	r3, r2, r3
 803041a:	b29a      	uxth	r2, r3
 803041c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 803041e:	811a      	strh	r2, [r3, #8]
                      pbuf_realloc(prev->p, prev->len);
 8030420:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8030422:	685a      	ldr	r2, [r3, #4]
 8030424:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8030426:	891b      	ldrh	r3, [r3, #8]
 8030428:	4619      	mov	r1, r3
 803042a:	4610      	mov	r0, r2
 803042c:	f7fb fbb0 	bl	802bb90 <pbuf_realloc>
                    }
                    prev->next = cseg;
 8030430:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8030432:	69fa      	ldr	r2, [r7, #28]
 8030434:	601a      	str	r2, [r3, #0]
                    tcp_oos_insert_segment(cseg, next);
 8030436:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8030438:	69f8      	ldr	r0, [r7, #28]
 803043a:	f7ff f881 	bl	802f540 <tcp_oos_insert_segment>
                  }
                  break;
 803043e:	e0e2      	b.n	8030606 <tcp_receive+0xebe>
 8030440:	2000ee54 	.word	0x2000ee54
 8030444:	2000ee51 	.word	0x2000ee51
 8030448:	2000ee24 	.word	0x2000ee24
 803044c:	2000ee44 	.word	0x2000ee44
#endif /* LWIP_TCP_SACK_OUT */

              /* We don't use 'prev' below, so let's set it to current 'next'.
                 This way even if we break the loop below, 'prev' will be pointing
                 at the segment right in front of the newly added one. */
              prev = next;
 8030450:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8030452:	637b      	str	r3, [r7, #52]	; 0x34

              /* If the "next" segment is the last segment on the
                 ooseq queue, we add the incoming segment to the end
                 of the list. */
              if (next->next == NULL &&
 8030454:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8030456:	681b      	ldr	r3, [r3, #0]
 8030458:	2b00      	cmp	r3, #0
 803045a:	f040 80c6 	bne.w	80305ea <tcp_receive+0xea2>
                  TCP_SEQ_GT(seqno, next->tcphdr->seqno)) {
 803045e:	4b80      	ldr	r3, [pc, #512]	; (8030660 <tcp_receive+0xf18>)
 8030460:	681a      	ldr	r2, [r3, #0]
 8030462:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8030464:	68db      	ldr	r3, [r3, #12]
 8030466:	685b      	ldr	r3, [r3, #4]
 8030468:	1ad3      	subs	r3, r2, r3
              if (next->next == NULL &&
 803046a:	2b00      	cmp	r3, #0
 803046c:	f340 80bd 	ble.w	80305ea <tcp_receive+0xea2>
                if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 8030470:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8030472:	68db      	ldr	r3, [r3, #12]
 8030474:	899b      	ldrh	r3, [r3, #12]
 8030476:	b29b      	uxth	r3, r3
 8030478:	4618      	mov	r0, r3
 803047a:	f7fa f84d 	bl	802a518 <lwip_htons>
 803047e:	4603      	mov	r3, r0
 8030480:	b2db      	uxtb	r3, r3
 8030482:	f003 0301 	and.w	r3, r3, #1
 8030486:	2b00      	cmp	r3, #0
 8030488:	f040 80bf 	bne.w	803060a <tcp_receive+0xec2>
                  /* segment "next" already contains all data */
                  break;
                }
                next->next = tcp_seg_copy(&inseg);
 803048c:	4875      	ldr	r0, [pc, #468]	; (8030664 <tcp_receive+0xf1c>)
 803048e:	f7fd f9a9 	bl	802d7e4 <tcp_seg_copy>
 8030492:	4602      	mov	r2, r0
 8030494:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8030496:	601a      	str	r2, [r3, #0]
                if (next->next != NULL) {
 8030498:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 803049a:	681b      	ldr	r3, [r3, #0]
 803049c:	2b00      	cmp	r3, #0
 803049e:	f000 80b6 	beq.w	803060e <tcp_receive+0xec6>
                  if (TCP_SEQ_GT(next->tcphdr->seqno + next->len, seqno)) {
 80304a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80304a4:	68db      	ldr	r3, [r3, #12]
 80304a6:	685b      	ldr	r3, [r3, #4]
 80304a8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80304aa:	8912      	ldrh	r2, [r2, #8]
 80304ac:	441a      	add	r2, r3
 80304ae:	4b6c      	ldr	r3, [pc, #432]	; (8030660 <tcp_receive+0xf18>)
 80304b0:	681b      	ldr	r3, [r3, #0]
 80304b2:	1ad3      	subs	r3, r2, r3
 80304b4:	2b00      	cmp	r3, #0
 80304b6:	dd12      	ble.n	80304de <tcp_receive+0xd96>
                    /* We need to trim the last segment. */
                    next->len = (u16_t)(seqno - next->tcphdr->seqno);
 80304b8:	4b69      	ldr	r3, [pc, #420]	; (8030660 <tcp_receive+0xf18>)
 80304ba:	681b      	ldr	r3, [r3, #0]
 80304bc:	b29a      	uxth	r2, r3
 80304be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80304c0:	68db      	ldr	r3, [r3, #12]
 80304c2:	685b      	ldr	r3, [r3, #4]
 80304c4:	b29b      	uxth	r3, r3
 80304c6:	1ad3      	subs	r3, r2, r3
 80304c8:	b29a      	uxth	r2, r3
 80304ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80304cc:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->p, next->len);
 80304ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80304d0:	685a      	ldr	r2, [r3, #4]
 80304d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80304d4:	891b      	ldrh	r3, [r3, #8]
 80304d6:	4619      	mov	r1, r3
 80304d8:	4610      	mov	r0, r2
 80304da:	f7fb fb59 	bl	802bb90 <pbuf_realloc>
                  }
                  /* check if the remote side overruns our receive window */
                  if (TCP_SEQ_GT((u32_t)tcplen + seqno, pcb->rcv_nxt + (u32_t)pcb->rcv_wnd)) {
 80304de:	4b62      	ldr	r3, [pc, #392]	; (8030668 <tcp_receive+0xf20>)
 80304e0:	881b      	ldrh	r3, [r3, #0]
 80304e2:	461a      	mov	r2, r3
 80304e4:	4b5e      	ldr	r3, [pc, #376]	; (8030660 <tcp_receive+0xf18>)
 80304e6:	681b      	ldr	r3, [r3, #0]
 80304e8:	441a      	add	r2, r3
 80304ea:	687b      	ldr	r3, [r7, #4]
 80304ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80304ee:	6879      	ldr	r1, [r7, #4]
 80304f0:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 80304f2:	440b      	add	r3, r1
 80304f4:	1ad3      	subs	r3, r2, r3
 80304f6:	2b00      	cmp	r3, #0
 80304f8:	f340 8089 	ble.w	803060e <tcp_receive+0xec6>
                    LWIP_DEBUGF(TCP_INPUT_DEBUG,
                                ("tcp_receive: other end overran receive window"
                                 "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                                 seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
                    if (TCPH_FLAGS(next->next->tcphdr) & TCP_FIN) {
 80304fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80304fe:	681b      	ldr	r3, [r3, #0]
 8030500:	68db      	ldr	r3, [r3, #12]
 8030502:	899b      	ldrh	r3, [r3, #12]
 8030504:	b29b      	uxth	r3, r3
 8030506:	4618      	mov	r0, r3
 8030508:	f7fa f806 	bl	802a518 <lwip_htons>
 803050c:	4603      	mov	r3, r0
 803050e:	b2db      	uxtb	r3, r3
 8030510:	f003 0301 	and.w	r3, r3, #1
 8030514:	2b00      	cmp	r3, #0
 8030516:	d022      	beq.n	803055e <tcp_receive+0xe16>
                      /* Must remove the FIN from the header as we're trimming
                       * that byte of sequence-space from the packet */
                      TCPH_FLAGS_SET(next->next->tcphdr, TCPH_FLAGS(next->next->tcphdr) & ~TCP_FIN);
 8030518:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 803051a:	681b      	ldr	r3, [r3, #0]
 803051c:	68db      	ldr	r3, [r3, #12]
 803051e:	899b      	ldrh	r3, [r3, #12]
 8030520:	b29b      	uxth	r3, r3
 8030522:	b21b      	sxth	r3, r3
 8030524:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8030528:	b21c      	sxth	r4, r3
 803052a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 803052c:	681b      	ldr	r3, [r3, #0]
 803052e:	68db      	ldr	r3, [r3, #12]
 8030530:	899b      	ldrh	r3, [r3, #12]
 8030532:	b29b      	uxth	r3, r3
 8030534:	4618      	mov	r0, r3
 8030536:	f7f9 ffef 	bl	802a518 <lwip_htons>
 803053a:	4603      	mov	r3, r0
 803053c:	b2db      	uxtb	r3, r3
 803053e:	b29b      	uxth	r3, r3
 8030540:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 8030544:	b29b      	uxth	r3, r3
 8030546:	4618      	mov	r0, r3
 8030548:	f7f9 ffe6 	bl	802a518 <lwip_htons>
 803054c:	4603      	mov	r3, r0
 803054e:	b21b      	sxth	r3, r3
 8030550:	4323      	orrs	r3, r4
 8030552:	b21a      	sxth	r2, r3
 8030554:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8030556:	681b      	ldr	r3, [r3, #0]
 8030558:	68db      	ldr	r3, [r3, #12]
 803055a:	b292      	uxth	r2, r2
 803055c:	819a      	strh	r2, [r3, #12]
                    }
                    /* Adjust length of segment to fit in the window. */
                    next->next->len = (u16_t)(pcb->rcv_nxt + pcb->rcv_wnd - seqno);
 803055e:	687b      	ldr	r3, [r7, #4]
 8030560:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8030562:	b29a      	uxth	r2, r3
 8030564:	687b      	ldr	r3, [r7, #4]
 8030566:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8030568:	4413      	add	r3, r2
 803056a:	b299      	uxth	r1, r3
 803056c:	4b3c      	ldr	r3, [pc, #240]	; (8030660 <tcp_receive+0xf18>)
 803056e:	681b      	ldr	r3, [r3, #0]
 8030570:	b29a      	uxth	r2, r3
 8030572:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8030574:	681b      	ldr	r3, [r3, #0]
 8030576:	1a8a      	subs	r2, r1, r2
 8030578:	b292      	uxth	r2, r2
 803057a:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->next->p, next->next->len);
 803057c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 803057e:	681b      	ldr	r3, [r3, #0]
 8030580:	685a      	ldr	r2, [r3, #4]
 8030582:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8030584:	681b      	ldr	r3, [r3, #0]
 8030586:	891b      	ldrh	r3, [r3, #8]
 8030588:	4619      	mov	r1, r3
 803058a:	4610      	mov	r0, r2
 803058c:	f7fb fb00 	bl	802bb90 <pbuf_realloc>
                    tcplen = TCP_TCPLEN(next->next);
 8030590:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8030592:	681b      	ldr	r3, [r3, #0]
 8030594:	891c      	ldrh	r4, [r3, #8]
 8030596:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8030598:	681b      	ldr	r3, [r3, #0]
 803059a:	68db      	ldr	r3, [r3, #12]
 803059c:	899b      	ldrh	r3, [r3, #12]
 803059e:	b29b      	uxth	r3, r3
 80305a0:	4618      	mov	r0, r3
 80305a2:	f7f9 ffb9 	bl	802a518 <lwip_htons>
 80305a6:	4603      	mov	r3, r0
 80305a8:	b2db      	uxtb	r3, r3
 80305aa:	f003 0303 	and.w	r3, r3, #3
 80305ae:	2b00      	cmp	r3, #0
 80305b0:	d001      	beq.n	80305b6 <tcp_receive+0xe6e>
 80305b2:	2301      	movs	r3, #1
 80305b4:	e000      	b.n	80305b8 <tcp_receive+0xe70>
 80305b6:	2300      	movs	r3, #0
 80305b8:	4423      	add	r3, r4
 80305ba:	b29a      	uxth	r2, r3
 80305bc:	4b2a      	ldr	r3, [pc, #168]	; (8030668 <tcp_receive+0xf20>)
 80305be:	801a      	strh	r2, [r3, #0]
                    LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 80305c0:	4b29      	ldr	r3, [pc, #164]	; (8030668 <tcp_receive+0xf20>)
 80305c2:	881b      	ldrh	r3, [r3, #0]
 80305c4:	461a      	mov	r2, r3
 80305c6:	4b26      	ldr	r3, [pc, #152]	; (8030660 <tcp_receive+0xf18>)
 80305c8:	681b      	ldr	r3, [r3, #0]
 80305ca:	441a      	add	r2, r3
 80305cc:	687b      	ldr	r3, [r7, #4]
 80305ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80305d0:	6879      	ldr	r1, [r7, #4]
 80305d2:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 80305d4:	440b      	add	r3, r1
 80305d6:	429a      	cmp	r2, r3
 80305d8:	d019      	beq.n	803060e <tcp_receive+0xec6>
 80305da:	4b24      	ldr	r3, [pc, #144]	; (803066c <tcp_receive+0xf24>)
 80305dc:	f44f 62df 	mov.w	r2, #1784	; 0x6f8
 80305e0:	4923      	ldr	r1, [pc, #140]	; (8030670 <tcp_receive+0xf28>)
 80305e2:	4824      	ldr	r0, [pc, #144]	; (8030674 <tcp_receive+0xf2c>)
 80305e4:	f005 fdd8 	bl	8036198 <iprintf>
                                (seqno + tcplen) == (pcb->rcv_nxt + pcb->rcv_wnd));
                  }
                }
                break;
 80305e8:	e011      	b.n	803060e <tcp_receive+0xec6>
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 80305ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80305ec:	681b      	ldr	r3, [r3, #0]
 80305ee:	63bb      	str	r3, [r7, #56]	; 0x38
 80305f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80305f2:	2b00      	cmp	r3, #0
 80305f4:	f47f aea4 	bne.w	8030340 <tcp_receive+0xbf8>
 80305f8:	e00a      	b.n	8030610 <tcp_receive+0xec8>
                break;
 80305fa:	bf00      	nop
 80305fc:	e008      	b.n	8030610 <tcp_receive+0xec8>
                break;
 80305fe:	bf00      	nop
 8030600:	e006      	b.n	8030610 <tcp_receive+0xec8>
                  break;
 8030602:	bf00      	nop
 8030604:	e004      	b.n	8030610 <tcp_receive+0xec8>
                  break;
 8030606:	bf00      	nop
 8030608:	e002      	b.n	8030610 <tcp_receive+0xec8>
                  break;
 803060a:	bf00      	nop
 803060c:	e000      	b.n	8030610 <tcp_receive+0xec8>
                break;
 803060e:	bf00      	nop
#endif /* TCP_OOSEQ_BYTES_LIMIT || TCP_OOSEQ_PBUFS_LIMIT */
#endif /* TCP_QUEUE_OOSEQ */

        /* We send the ACK packet after we've (potentially) dealt with SACKs,
           so they can be included in the acknowledgment. */
        tcp_send_empty_ack(pcb);
 8030610:	6878      	ldr	r0, [r7, #4]
 8030612:	f001 fed9 	bl	80323c8 <tcp_send_empty_ack>
      if (pcb->rcv_nxt == seqno) {
 8030616:	e003      	b.n	8030620 <tcp_receive+0xed8>
      }
    } else {
      /* The incoming segment is not within the window. */
      tcp_send_empty_ack(pcb);
 8030618:	6878      	ldr	r0, [r7, #4]
 803061a:	f001 fed5 	bl	80323c8 <tcp_send_empty_ack>
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 803061e:	e01a      	b.n	8030656 <tcp_receive+0xf0e>
 8030620:	e019      	b.n	8030656 <tcp_receive+0xf0e>
    }
  } else {
    /* Segments with length 0 is taken care of here. Segments that
       fall out of the window are ACKed. */
    if (!TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
 8030622:	4b0f      	ldr	r3, [pc, #60]	; (8030660 <tcp_receive+0xf18>)
 8030624:	681a      	ldr	r2, [r3, #0]
 8030626:	687b      	ldr	r3, [r7, #4]
 8030628:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 803062a:	1ad3      	subs	r3, r2, r3
 803062c:	2b00      	cmp	r3, #0
 803062e:	db0a      	blt.n	8030646 <tcp_receive+0xefe>
 8030630:	4b0b      	ldr	r3, [pc, #44]	; (8030660 <tcp_receive+0xf18>)
 8030632:	681a      	ldr	r2, [r3, #0]
 8030634:	687b      	ldr	r3, [r7, #4]
 8030636:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8030638:	6879      	ldr	r1, [r7, #4]
 803063a:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 803063c:	440b      	add	r3, r1
 803063e:	1ad3      	subs	r3, r2, r3
 8030640:	3301      	adds	r3, #1
 8030642:	2b00      	cmp	r3, #0
 8030644:	dd07      	ble.n	8030656 <tcp_receive+0xf0e>
      tcp_ack_now(pcb);
 8030646:	687b      	ldr	r3, [r7, #4]
 8030648:	8b5b      	ldrh	r3, [r3, #26]
 803064a:	f043 0302 	orr.w	r3, r3, #2
 803064e:	b29a      	uxth	r2, r3
 8030650:	687b      	ldr	r3, [r7, #4]
 8030652:	835a      	strh	r2, [r3, #26]
    }
  }
}
 8030654:	e7ff      	b.n	8030656 <tcp_receive+0xf0e>
 8030656:	bf00      	nop
 8030658:	3750      	adds	r7, #80	; 0x50
 803065a:	46bd      	mov	sp, r7
 803065c:	bdb0      	pop	{r4, r5, r7, pc}
 803065e:	bf00      	nop
 8030660:	2000ee44 	.word	0x2000ee44
 8030664:	2000ee24 	.word	0x2000ee24
 8030668:	2000ee4e 	.word	0x2000ee4e
 803066c:	080392a8 	.word	0x080392a8
 8030670:	08039650 	.word	0x08039650
 8030674:	080392f4 	.word	0x080392f4

08030678 <tcp_get_next_optbyte>:

static u8_t
tcp_get_next_optbyte(void)
{
 8030678:	b480      	push	{r7}
 803067a:	b083      	sub	sp, #12
 803067c:	af00      	add	r7, sp, #0
  u16_t optidx = tcp_optidx++;
 803067e:	4b15      	ldr	r3, [pc, #84]	; (80306d4 <tcp_get_next_optbyte+0x5c>)
 8030680:	881b      	ldrh	r3, [r3, #0]
 8030682:	1c5a      	adds	r2, r3, #1
 8030684:	b291      	uxth	r1, r2
 8030686:	4a13      	ldr	r2, [pc, #76]	; (80306d4 <tcp_get_next_optbyte+0x5c>)
 8030688:	8011      	strh	r1, [r2, #0]
 803068a:	80fb      	strh	r3, [r7, #6]
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 803068c:	4b12      	ldr	r3, [pc, #72]	; (80306d8 <tcp_get_next_optbyte+0x60>)
 803068e:	681b      	ldr	r3, [r3, #0]
 8030690:	2b00      	cmp	r3, #0
 8030692:	d004      	beq.n	803069e <tcp_get_next_optbyte+0x26>
 8030694:	4b11      	ldr	r3, [pc, #68]	; (80306dc <tcp_get_next_optbyte+0x64>)
 8030696:	881b      	ldrh	r3, [r3, #0]
 8030698:	88fa      	ldrh	r2, [r7, #6]
 803069a:	429a      	cmp	r2, r3
 803069c:	d208      	bcs.n	80306b0 <tcp_get_next_optbyte+0x38>
    u8_t *opts = (u8_t *)tcphdr + TCP_HLEN;
 803069e:	4b10      	ldr	r3, [pc, #64]	; (80306e0 <tcp_get_next_optbyte+0x68>)
 80306a0:	681b      	ldr	r3, [r3, #0]
 80306a2:	3314      	adds	r3, #20
 80306a4:	603b      	str	r3, [r7, #0]
    return opts[optidx];
 80306a6:	88fb      	ldrh	r3, [r7, #6]
 80306a8:	683a      	ldr	r2, [r7, #0]
 80306aa:	4413      	add	r3, r2
 80306ac:	781b      	ldrb	r3, [r3, #0]
 80306ae:	e00b      	b.n	80306c8 <tcp_get_next_optbyte+0x50>
  } else {
    u8_t idx = (u8_t)(optidx - tcphdr_opt1len);
 80306b0:	88fb      	ldrh	r3, [r7, #6]
 80306b2:	b2da      	uxtb	r2, r3
 80306b4:	4b09      	ldr	r3, [pc, #36]	; (80306dc <tcp_get_next_optbyte+0x64>)
 80306b6:	881b      	ldrh	r3, [r3, #0]
 80306b8:	b2db      	uxtb	r3, r3
 80306ba:	1ad3      	subs	r3, r2, r3
 80306bc:	717b      	strb	r3, [r7, #5]
    return tcphdr_opt2[idx];
 80306be:	4b06      	ldr	r3, [pc, #24]	; (80306d8 <tcp_get_next_optbyte+0x60>)
 80306c0:	681a      	ldr	r2, [r3, #0]
 80306c2:	797b      	ldrb	r3, [r7, #5]
 80306c4:	4413      	add	r3, r2
 80306c6:	781b      	ldrb	r3, [r3, #0]
  }
}
 80306c8:	4618      	mov	r0, r3
 80306ca:	370c      	adds	r7, #12
 80306cc:	46bd      	mov	sp, r7
 80306ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80306d2:	4770      	bx	lr
 80306d4:	2000ee40 	.word	0x2000ee40
 80306d8:	2000ee3c 	.word	0x2000ee3c
 80306dc:	2000ee3a 	.word	0x2000ee3a
 80306e0:	2000ee34 	.word	0x2000ee34

080306e4 <tcp_parseopt>:
 *
 * @param pcb the tcp_pcb for which a segment arrived
 */
static void
tcp_parseopt(struct tcp_pcb *pcb)
{
 80306e4:	b580      	push	{r7, lr}
 80306e6:	b084      	sub	sp, #16
 80306e8:	af00      	add	r7, sp, #0
 80306ea:	6078      	str	r0, [r7, #4]
  u16_t mss;
#if LWIP_TCP_TIMESTAMPS
  u32_t tsval;
#endif

  LWIP_ASSERT("tcp_parseopt: invalid pcb", pcb != NULL);
 80306ec:	687b      	ldr	r3, [r7, #4]
 80306ee:	2b00      	cmp	r3, #0
 80306f0:	d106      	bne.n	8030700 <tcp_parseopt+0x1c>
 80306f2:	4b32      	ldr	r3, [pc, #200]	; (80307bc <tcp_parseopt+0xd8>)
 80306f4:	f240 727d 	movw	r2, #1917	; 0x77d
 80306f8:	4931      	ldr	r1, [pc, #196]	; (80307c0 <tcp_parseopt+0xdc>)
 80306fa:	4832      	ldr	r0, [pc, #200]	; (80307c4 <tcp_parseopt+0xe0>)
 80306fc:	f005 fd4c 	bl	8036198 <iprintf>

  /* Parse the TCP MSS option, if present. */
  if (tcphdr_optlen != 0) {
 8030700:	4b31      	ldr	r3, [pc, #196]	; (80307c8 <tcp_parseopt+0xe4>)
 8030702:	881b      	ldrh	r3, [r3, #0]
 8030704:	2b00      	cmp	r3, #0
 8030706:	d055      	beq.n	80307b4 <tcp_parseopt+0xd0>
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 8030708:	4b30      	ldr	r3, [pc, #192]	; (80307cc <tcp_parseopt+0xe8>)
 803070a:	2200      	movs	r2, #0
 803070c:	801a      	strh	r2, [r3, #0]
 803070e:	e045      	b.n	803079c <tcp_parseopt+0xb8>
      u8_t opt = tcp_get_next_optbyte();
 8030710:	f7ff ffb2 	bl	8030678 <tcp_get_next_optbyte>
 8030714:	4603      	mov	r3, r0
 8030716:	73fb      	strb	r3, [r7, #15]
      switch (opt) {
 8030718:	7bfb      	ldrb	r3, [r7, #15]
 803071a:	2b02      	cmp	r3, #2
 803071c:	d006      	beq.n	803072c <tcp_parseopt+0x48>
 803071e:	2b02      	cmp	r3, #2
 8030720:	dc2b      	bgt.n	803077a <tcp_parseopt+0x96>
 8030722:	2b00      	cmp	r3, #0
 8030724:	d041      	beq.n	80307aa <tcp_parseopt+0xc6>
 8030726:	2b01      	cmp	r3, #1
 8030728:	d127      	bne.n	803077a <tcp_parseopt+0x96>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: EOL\n"));
          return;
        case LWIP_TCP_OPT_NOP:
          /* NOP option. */
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: NOP\n"));
          break;
 803072a:	e037      	b.n	803079c <tcp_parseopt+0xb8>
        case LWIP_TCP_OPT_MSS:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: MSS\n"));
          if (tcp_get_next_optbyte() != LWIP_TCP_OPT_LEN_MSS || (tcp_optidx - 2 + LWIP_TCP_OPT_LEN_MSS) > tcphdr_optlen) {
 803072c:	f7ff ffa4 	bl	8030678 <tcp_get_next_optbyte>
 8030730:	4603      	mov	r3, r0
 8030732:	2b04      	cmp	r3, #4
 8030734:	d13b      	bne.n	80307ae <tcp_parseopt+0xca>
 8030736:	4b25      	ldr	r3, [pc, #148]	; (80307cc <tcp_parseopt+0xe8>)
 8030738:	881b      	ldrh	r3, [r3, #0]
 803073a:	3301      	adds	r3, #1
 803073c:	4a22      	ldr	r2, [pc, #136]	; (80307c8 <tcp_parseopt+0xe4>)
 803073e:	8812      	ldrh	r2, [r2, #0]
 8030740:	4293      	cmp	r3, r2
 8030742:	da34      	bge.n	80307ae <tcp_parseopt+0xca>
            /* Bad length */
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: bad length\n"));
            return;
          }
          /* An MSS option with the right option length. */
          mss = (u16_t)(tcp_get_next_optbyte() << 8);
 8030744:	f7ff ff98 	bl	8030678 <tcp_get_next_optbyte>
 8030748:	4603      	mov	r3, r0
 803074a:	b29b      	uxth	r3, r3
 803074c:	021b      	lsls	r3, r3, #8
 803074e:	81bb      	strh	r3, [r7, #12]
          mss |= tcp_get_next_optbyte();
 8030750:	f7ff ff92 	bl	8030678 <tcp_get_next_optbyte>
 8030754:	4603      	mov	r3, r0
 8030756:	b29a      	uxth	r2, r3
 8030758:	89bb      	ldrh	r3, [r7, #12]
 803075a:	4313      	orrs	r3, r2
 803075c:	81bb      	strh	r3, [r7, #12]
          /* Limit the mss to the configured TCP_MSS and prevent division by zero */
          pcb->mss = ((mss > TCP_MSS) || (mss == 0)) ? TCP_MSS : mss;
 803075e:	89bb      	ldrh	r3, [r7, #12]
 8030760:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 8030764:	d804      	bhi.n	8030770 <tcp_parseopt+0x8c>
 8030766:	89bb      	ldrh	r3, [r7, #12]
 8030768:	2b00      	cmp	r3, #0
 803076a:	d001      	beq.n	8030770 <tcp_parseopt+0x8c>
 803076c:	89ba      	ldrh	r2, [r7, #12]
 803076e:	e001      	b.n	8030774 <tcp_parseopt+0x90>
 8030770:	f44f 7206 	mov.w	r2, #536	; 0x218
 8030774:	687b      	ldr	r3, [r7, #4]
 8030776:	865a      	strh	r2, [r3, #50]	; 0x32
          break;
 8030778:	e010      	b.n	803079c <tcp_parseopt+0xb8>
          }
          break;
#endif /* LWIP_TCP_SACK_OUT */
        default:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: other\n"));
          data = tcp_get_next_optbyte();
 803077a:	f7ff ff7d 	bl	8030678 <tcp_get_next_optbyte>
 803077e:	4603      	mov	r3, r0
 8030780:	72fb      	strb	r3, [r7, #11]
          if (data < 2) {
 8030782:	7afb      	ldrb	r3, [r7, #11]
 8030784:	2b01      	cmp	r3, #1
 8030786:	d914      	bls.n	80307b2 <tcp_parseopt+0xce>
               and we don't process them further. */
            return;
          }
          /* All other options have a length field, so that we easily
             can skip past them. */
          tcp_optidx += data - 2;
 8030788:	7afb      	ldrb	r3, [r7, #11]
 803078a:	b29a      	uxth	r2, r3
 803078c:	4b0f      	ldr	r3, [pc, #60]	; (80307cc <tcp_parseopt+0xe8>)
 803078e:	881b      	ldrh	r3, [r3, #0]
 8030790:	4413      	add	r3, r2
 8030792:	b29b      	uxth	r3, r3
 8030794:	3b02      	subs	r3, #2
 8030796:	b29a      	uxth	r2, r3
 8030798:	4b0c      	ldr	r3, [pc, #48]	; (80307cc <tcp_parseopt+0xe8>)
 803079a:	801a      	strh	r2, [r3, #0]
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 803079c:	4b0b      	ldr	r3, [pc, #44]	; (80307cc <tcp_parseopt+0xe8>)
 803079e:	881a      	ldrh	r2, [r3, #0]
 80307a0:	4b09      	ldr	r3, [pc, #36]	; (80307c8 <tcp_parseopt+0xe4>)
 80307a2:	881b      	ldrh	r3, [r3, #0]
 80307a4:	429a      	cmp	r2, r3
 80307a6:	d3b3      	bcc.n	8030710 <tcp_parseopt+0x2c>
 80307a8:	e004      	b.n	80307b4 <tcp_parseopt+0xd0>
          return;
 80307aa:	bf00      	nop
 80307ac:	e002      	b.n	80307b4 <tcp_parseopt+0xd0>
            return;
 80307ae:	bf00      	nop
 80307b0:	e000      	b.n	80307b4 <tcp_parseopt+0xd0>
            return;
 80307b2:	bf00      	nop
      }
    }
  }
}
 80307b4:	3710      	adds	r7, #16
 80307b6:	46bd      	mov	sp, r7
 80307b8:	bd80      	pop	{r7, pc}
 80307ba:	bf00      	nop
 80307bc:	080392a8 	.word	0x080392a8
 80307c0:	0803970c 	.word	0x0803970c
 80307c4:	080392f4 	.word	0x080392f4
 80307c8:	2000ee38 	.word	0x2000ee38
 80307cc:	2000ee40 	.word	0x2000ee40

080307d0 <tcp_trigger_input_pcb_close>:

void
tcp_trigger_input_pcb_close(void)
{
 80307d0:	b480      	push	{r7}
 80307d2:	af00      	add	r7, sp, #0
  recv_flags |= TF_CLOSED;
 80307d4:	4b05      	ldr	r3, [pc, #20]	; (80307ec <tcp_trigger_input_pcb_close+0x1c>)
 80307d6:	781b      	ldrb	r3, [r3, #0]
 80307d8:	f043 0310 	orr.w	r3, r3, #16
 80307dc:	b2da      	uxtb	r2, r3
 80307de:	4b03      	ldr	r3, [pc, #12]	; (80307ec <tcp_trigger_input_pcb_close+0x1c>)
 80307e0:	701a      	strb	r2, [r3, #0]
}
 80307e2:	bf00      	nop
 80307e4:	46bd      	mov	sp, r7
 80307e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80307ea:	4770      	bx	lr
 80307ec:	2000ee51 	.word	0x2000ee51

080307f0 <tcp_route>:
static err_t tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif);

/* tcp_route: common code that returns a fixed bound netif or calls ip_route */
static struct netif *
tcp_route(const struct tcp_pcb *pcb, const ip_addr_t *src, const ip_addr_t *dst)
{
 80307f0:	b580      	push	{r7, lr}
 80307f2:	b084      	sub	sp, #16
 80307f4:	af00      	add	r7, sp, #0
 80307f6:	60f8      	str	r0, [r7, #12]
 80307f8:	60b9      	str	r1, [r7, #8]
 80307fa:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(src); /* in case IPv4-only and source-based routing is disabled */

  if ((pcb != NULL) && (pcb->netif_idx != NETIF_NO_INDEX)) {
 80307fc:	68fb      	ldr	r3, [r7, #12]
 80307fe:	2b00      	cmp	r3, #0
 8030800:	d00a      	beq.n	8030818 <tcp_route+0x28>
 8030802:	68fb      	ldr	r3, [r7, #12]
 8030804:	7a1b      	ldrb	r3, [r3, #8]
 8030806:	2b00      	cmp	r3, #0
 8030808:	d006      	beq.n	8030818 <tcp_route+0x28>
    return netif_get_by_index(pcb->netif_idx);
 803080a:	68fb      	ldr	r3, [r7, #12]
 803080c:	7a1b      	ldrb	r3, [r3, #8]
 803080e:	4618      	mov	r0, r3
 8030810:	f7fa ffb6 	bl	802b780 <netif_get_by_index>
 8030814:	4603      	mov	r3, r0
 8030816:	e003      	b.n	8030820 <tcp_route+0x30>
  } else {
    return ip_route(src, dst);
 8030818:	6878      	ldr	r0, [r7, #4]
 803081a:	f003 fd51 	bl	80342c0 <ip4_route>
 803081e:	4603      	mov	r3, r0
  }
}
 8030820:	4618      	mov	r0, r3
 8030822:	3710      	adds	r7, #16
 8030824:	46bd      	mov	sp, r7
 8030826:	bd80      	pop	{r7, pc}

08030828 <tcp_create_segment>:
 * The TCP header is filled in except ackno and wnd.
 * p is freed on failure.
 */
static struct tcp_seg *
tcp_create_segment(const struct tcp_pcb *pcb, struct pbuf *p, u8_t hdrflags, u32_t seqno, u8_t optflags)
{
 8030828:	b590      	push	{r4, r7, lr}
 803082a:	b087      	sub	sp, #28
 803082c:	af00      	add	r7, sp, #0
 803082e:	60f8      	str	r0, [r7, #12]
 8030830:	60b9      	str	r1, [r7, #8]
 8030832:	603b      	str	r3, [r7, #0]
 8030834:	4613      	mov	r3, r2
 8030836:	71fb      	strb	r3, [r7, #7]
  struct tcp_seg *seg;
  u8_t optlen;

  LWIP_ASSERT("tcp_create_segment: invalid pcb", pcb != NULL);
 8030838:	68fb      	ldr	r3, [r7, #12]
 803083a:	2b00      	cmp	r3, #0
 803083c:	d105      	bne.n	803084a <tcp_create_segment+0x22>
 803083e:	4b48      	ldr	r3, [pc, #288]	; (8030960 <tcp_create_segment+0x138>)
 8030840:	22a3      	movs	r2, #163	; 0xa3
 8030842:	4948      	ldr	r1, [pc, #288]	; (8030964 <tcp_create_segment+0x13c>)
 8030844:	4848      	ldr	r0, [pc, #288]	; (8030968 <tcp_create_segment+0x140>)
 8030846:	f005 fca7 	bl	8036198 <iprintf>
  LWIP_ASSERT("tcp_create_segment: invalid pbuf", p != NULL);
 803084a:	68bb      	ldr	r3, [r7, #8]
 803084c:	2b00      	cmp	r3, #0
 803084e:	d105      	bne.n	803085c <tcp_create_segment+0x34>
 8030850:	4b43      	ldr	r3, [pc, #268]	; (8030960 <tcp_create_segment+0x138>)
 8030852:	22a4      	movs	r2, #164	; 0xa4
 8030854:	4945      	ldr	r1, [pc, #276]	; (803096c <tcp_create_segment+0x144>)
 8030856:	4844      	ldr	r0, [pc, #272]	; (8030968 <tcp_create_segment+0x140>)
 8030858:	f005 fc9e 	bl	8036198 <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 803085c:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8030860:	009b      	lsls	r3, r3, #2
 8030862:	b2db      	uxtb	r3, r3
 8030864:	f003 0304 	and.w	r3, r3, #4
 8030868:	75fb      	strb	r3, [r7, #23]

  if ((seg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG)) == NULL) {
 803086a:	2003      	movs	r0, #3
 803086c:	f7fa fbf6 	bl	802b05c <memp_malloc>
 8030870:	6138      	str	r0, [r7, #16]
 8030872:	693b      	ldr	r3, [r7, #16]
 8030874:	2b00      	cmp	r3, #0
 8030876:	d104      	bne.n	8030882 <tcp_create_segment+0x5a>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no memory.\n"));
    pbuf_free(p);
 8030878:	68b8      	ldr	r0, [r7, #8]
 803087a:	f7fb fb0f 	bl	802be9c <pbuf_free>
    return NULL;
 803087e:	2300      	movs	r3, #0
 8030880:	e069      	b.n	8030956 <tcp_create_segment+0x12e>
  }
  seg->flags = optflags;
 8030882:	693b      	ldr	r3, [r7, #16]
 8030884:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 8030888:	729a      	strb	r2, [r3, #10]
  seg->next = NULL;
 803088a:	693b      	ldr	r3, [r7, #16]
 803088c:	2200      	movs	r2, #0
 803088e:	601a      	str	r2, [r3, #0]
  seg->p = p;
 8030890:	693b      	ldr	r3, [r7, #16]
 8030892:	68ba      	ldr	r2, [r7, #8]
 8030894:	605a      	str	r2, [r3, #4]
  LWIP_ASSERT("p->tot_len >= optlen", p->tot_len >= optlen);
 8030896:	68bb      	ldr	r3, [r7, #8]
 8030898:	891a      	ldrh	r2, [r3, #8]
 803089a:	7dfb      	ldrb	r3, [r7, #23]
 803089c:	b29b      	uxth	r3, r3
 803089e:	429a      	cmp	r2, r3
 80308a0:	d205      	bcs.n	80308ae <tcp_create_segment+0x86>
 80308a2:	4b2f      	ldr	r3, [pc, #188]	; (8030960 <tcp_create_segment+0x138>)
 80308a4:	22b0      	movs	r2, #176	; 0xb0
 80308a6:	4932      	ldr	r1, [pc, #200]	; (8030970 <tcp_create_segment+0x148>)
 80308a8:	482f      	ldr	r0, [pc, #188]	; (8030968 <tcp_create_segment+0x140>)
 80308aa:	f005 fc75 	bl	8036198 <iprintf>
  seg->len = p->tot_len - optlen;
 80308ae:	68bb      	ldr	r3, [r7, #8]
 80308b0:	891a      	ldrh	r2, [r3, #8]
 80308b2:	7dfb      	ldrb	r3, [r7, #23]
 80308b4:	b29b      	uxth	r3, r3
 80308b6:	1ad3      	subs	r3, r2, r3
 80308b8:	b29a      	uxth	r2, r3
 80308ba:	693b      	ldr	r3, [r7, #16]
 80308bc:	811a      	strh	r2, [r3, #8]
  LWIP_ASSERT("invalid optflags passed: TF_SEG_DATA_CHECKSUMMED",
              (optflags & TF_SEG_DATA_CHECKSUMMED) == 0);
#endif /* TCP_CHECKSUM_ON_COPY */

  /* build TCP header */
  if (pbuf_add_header(p, TCP_HLEN)) {
 80308be:	2114      	movs	r1, #20
 80308c0:	68b8      	ldr	r0, [r7, #8]
 80308c2:	f7fb fa55 	bl	802bd70 <pbuf_add_header>
 80308c6:	4603      	mov	r3, r0
 80308c8:	2b00      	cmp	r3, #0
 80308ca:	d00c      	beq.n	80308e6 <tcp_create_segment+0xbe>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no room for TCP header in pbuf.\n"));
    TCP_STATS_INC(tcp.err);
 80308cc:	4b29      	ldr	r3, [pc, #164]	; (8030974 <tcp_create_segment+0x14c>)
 80308ce:	f8b3 30a4 	ldrh.w	r3, [r3, #164]	; 0xa4
 80308d2:	3301      	adds	r3, #1
 80308d4:	b29a      	uxth	r2, r3
 80308d6:	4b27      	ldr	r3, [pc, #156]	; (8030974 <tcp_create_segment+0x14c>)
 80308d8:	f8a3 20a4 	strh.w	r2, [r3, #164]	; 0xa4
    tcp_seg_free(seg);
 80308dc:	6938      	ldr	r0, [r7, #16]
 80308de:	f7fc ff68 	bl	802d7b2 <tcp_seg_free>
    return NULL;
 80308e2:	2300      	movs	r3, #0
 80308e4:	e037      	b.n	8030956 <tcp_create_segment+0x12e>
  }
  seg->tcphdr = (struct tcp_hdr *)seg->p->payload;
 80308e6:	693b      	ldr	r3, [r7, #16]
 80308e8:	685b      	ldr	r3, [r3, #4]
 80308ea:	685a      	ldr	r2, [r3, #4]
 80308ec:	693b      	ldr	r3, [r7, #16]
 80308ee:	60da      	str	r2, [r3, #12]
  seg->tcphdr->src = lwip_htons(pcb->local_port);
 80308f0:	68fb      	ldr	r3, [r7, #12]
 80308f2:	8ada      	ldrh	r2, [r3, #22]
 80308f4:	693b      	ldr	r3, [r7, #16]
 80308f6:	68dc      	ldr	r4, [r3, #12]
 80308f8:	4610      	mov	r0, r2
 80308fa:	f7f9 fe0d 	bl	802a518 <lwip_htons>
 80308fe:	4603      	mov	r3, r0
 8030900:	8023      	strh	r3, [r4, #0]
  seg->tcphdr->dest = lwip_htons(pcb->remote_port);
 8030902:	68fb      	ldr	r3, [r7, #12]
 8030904:	8b1a      	ldrh	r2, [r3, #24]
 8030906:	693b      	ldr	r3, [r7, #16]
 8030908:	68dc      	ldr	r4, [r3, #12]
 803090a:	4610      	mov	r0, r2
 803090c:	f7f9 fe04 	bl	802a518 <lwip_htons>
 8030910:	4603      	mov	r3, r0
 8030912:	8063      	strh	r3, [r4, #2]
  seg->tcphdr->seqno = lwip_htonl(seqno);
 8030914:	693b      	ldr	r3, [r7, #16]
 8030916:	68dc      	ldr	r4, [r3, #12]
 8030918:	6838      	ldr	r0, [r7, #0]
 803091a:	f7f9 fe12 	bl	802a542 <lwip_htonl>
 803091e:	4603      	mov	r3, r0
 8030920:	6063      	str	r3, [r4, #4]
  /* ackno is set in tcp_output */
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), hdrflags);
 8030922:	7dfb      	ldrb	r3, [r7, #23]
 8030924:	089b      	lsrs	r3, r3, #2
 8030926:	b2db      	uxtb	r3, r3
 8030928:	b29b      	uxth	r3, r3
 803092a:	3305      	adds	r3, #5
 803092c:	b29b      	uxth	r3, r3
 803092e:	031b      	lsls	r3, r3, #12
 8030930:	b29a      	uxth	r2, r3
 8030932:	79fb      	ldrb	r3, [r7, #7]
 8030934:	b29b      	uxth	r3, r3
 8030936:	4313      	orrs	r3, r2
 8030938:	b29a      	uxth	r2, r3
 803093a:	693b      	ldr	r3, [r7, #16]
 803093c:	68dc      	ldr	r4, [r3, #12]
 803093e:	4610      	mov	r0, r2
 8030940:	f7f9 fdea 	bl	802a518 <lwip_htons>
 8030944:	4603      	mov	r3, r0
 8030946:	81a3      	strh	r3, [r4, #12]
  /* wnd and chksum are set in tcp_output */
  seg->tcphdr->urgp = 0;
 8030948:	693b      	ldr	r3, [r7, #16]
 803094a:	68db      	ldr	r3, [r3, #12]
 803094c:	2200      	movs	r2, #0
 803094e:	749a      	strb	r2, [r3, #18]
 8030950:	2200      	movs	r2, #0
 8030952:	74da      	strb	r2, [r3, #19]
  return seg;
 8030954:	693b      	ldr	r3, [r7, #16]
}
 8030956:	4618      	mov	r0, r3
 8030958:	371c      	adds	r7, #28
 803095a:	46bd      	mov	sp, r7
 803095c:	bd90      	pop	{r4, r7, pc}
 803095e:	bf00      	nop
 8030960:	08039728 	.word	0x08039728
 8030964:	0803975c 	.word	0x0803975c
 8030968:	0803977c 	.word	0x0803977c
 803096c:	080397a4 	.word	0x080397a4
 8030970:	080397c8 	.word	0x080397c8
 8030974:	2000ed10 	.word	0x2000ed10

08030978 <tcp_pbuf_prealloc>:
#if TCP_OVERSIZE
static struct pbuf *
tcp_pbuf_prealloc(pbuf_layer layer, u16_t length, u16_t max_length,
                  u16_t *oversize, const struct tcp_pcb *pcb, u8_t apiflags,
                  u8_t first_seg)
{
 8030978:	b580      	push	{r7, lr}
 803097a:	b086      	sub	sp, #24
 803097c:	af00      	add	r7, sp, #0
 803097e:	607b      	str	r3, [r7, #4]
 8030980:	4603      	mov	r3, r0
 8030982:	73fb      	strb	r3, [r7, #15]
 8030984:	460b      	mov	r3, r1
 8030986:	81bb      	strh	r3, [r7, #12]
 8030988:	4613      	mov	r3, r2
 803098a:	817b      	strh	r3, [r7, #10]
  struct pbuf *p;
  u16_t alloc = length;
 803098c:	89bb      	ldrh	r3, [r7, #12]
 803098e:	82fb      	strh	r3, [r7, #22]

  LWIP_ASSERT("tcp_pbuf_prealloc: invalid oversize", oversize != NULL);
 8030990:	687b      	ldr	r3, [r7, #4]
 8030992:	2b00      	cmp	r3, #0
 8030994:	d105      	bne.n	80309a2 <tcp_pbuf_prealloc+0x2a>
 8030996:	4b30      	ldr	r3, [pc, #192]	; (8030a58 <tcp_pbuf_prealloc+0xe0>)
 8030998:	22e8      	movs	r2, #232	; 0xe8
 803099a:	4930      	ldr	r1, [pc, #192]	; (8030a5c <tcp_pbuf_prealloc+0xe4>)
 803099c:	4830      	ldr	r0, [pc, #192]	; (8030a60 <tcp_pbuf_prealloc+0xe8>)
 803099e:	f005 fbfb 	bl	8036198 <iprintf>
  LWIP_ASSERT("tcp_pbuf_prealloc: invalid pcb", pcb != NULL);
 80309a2:	6a3b      	ldr	r3, [r7, #32]
 80309a4:	2b00      	cmp	r3, #0
 80309a6:	d105      	bne.n	80309b4 <tcp_pbuf_prealloc+0x3c>
 80309a8:	4b2b      	ldr	r3, [pc, #172]	; (8030a58 <tcp_pbuf_prealloc+0xe0>)
 80309aa:	22e9      	movs	r2, #233	; 0xe9
 80309ac:	492d      	ldr	r1, [pc, #180]	; (8030a64 <tcp_pbuf_prealloc+0xec>)
 80309ae:	482c      	ldr	r0, [pc, #176]	; (8030a60 <tcp_pbuf_prealloc+0xe8>)
 80309b0:	f005 fbf2 	bl	8036198 <iprintf>
  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(apiflags);
  LWIP_UNUSED_ARG(first_seg);
  alloc = max_length;
#else /* LWIP_NETIF_TX_SINGLE_PBUF */
  if (length < max_length) {
 80309b4:	89ba      	ldrh	r2, [r7, #12]
 80309b6:	897b      	ldrh	r3, [r7, #10]
 80309b8:	429a      	cmp	r2, r3
 80309ba:	d221      	bcs.n	8030a00 <tcp_pbuf_prealloc+0x88>
     *
     * Did the user set TCP_WRITE_FLAG_MORE?
     *
     * Will the Nagle algorithm defer transmission of this segment?
     */
    if ((apiflags & TCP_WRITE_FLAG_MORE) ||
 80309bc:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80309c0:	f003 0302 	and.w	r3, r3, #2
 80309c4:	2b00      	cmp	r3, #0
 80309c6:	d111      	bne.n	80309ec <tcp_pbuf_prealloc+0x74>
        (!(pcb->flags & TF_NODELAY) &&
 80309c8:	6a3b      	ldr	r3, [r7, #32]
 80309ca:	8b5b      	ldrh	r3, [r3, #26]
 80309cc:	f003 0340 	and.w	r3, r3, #64	; 0x40
    if ((apiflags & TCP_WRITE_FLAG_MORE) ||
 80309d0:	2b00      	cmp	r3, #0
 80309d2:	d115      	bne.n	8030a00 <tcp_pbuf_prealloc+0x88>
        (!(pcb->flags & TF_NODELAY) &&
 80309d4:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80309d8:	2b00      	cmp	r3, #0
 80309da:	d007      	beq.n	80309ec <tcp_pbuf_prealloc+0x74>
         (!first_seg ||
          pcb->unsent != NULL ||
 80309dc:	6a3b      	ldr	r3, [r7, #32]
 80309de:	6edb      	ldr	r3, [r3, #108]	; 0x6c
         (!first_seg ||
 80309e0:	2b00      	cmp	r3, #0
 80309e2:	d103      	bne.n	80309ec <tcp_pbuf_prealloc+0x74>
          pcb->unacked != NULL))) {
 80309e4:	6a3b      	ldr	r3, [r7, #32]
 80309e6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
          pcb->unsent != NULL ||
 80309e8:	2b00      	cmp	r3, #0
 80309ea:	d009      	beq.n	8030a00 <tcp_pbuf_prealloc+0x88>
      alloc = LWIP_MIN(max_length, LWIP_MEM_ALIGN_SIZE(TCP_OVERSIZE_CALC_LENGTH(length)));
 80309ec:	89bb      	ldrh	r3, [r7, #12]
 80309ee:	f203 231b 	addw	r3, r3, #539	; 0x21b
 80309f2:	f023 0203 	bic.w	r2, r3, #3
 80309f6:	897b      	ldrh	r3, [r7, #10]
 80309f8:	4293      	cmp	r3, r2
 80309fa:	bf28      	it	cs
 80309fc:	4613      	movcs	r3, r2
 80309fe:	82fb      	strh	r3, [r7, #22]
    }
  }
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */
  p = pbuf_alloc(layer, alloc, PBUF_RAM);
 8030a00:	8af9      	ldrh	r1, [r7, #22]
 8030a02:	7bfb      	ldrb	r3, [r7, #15]
 8030a04:	f44f 7220 	mov.w	r2, #640	; 0x280
 8030a08:	4618      	mov	r0, r3
 8030a0a:	f7fa ff63 	bl	802b8d4 <pbuf_alloc>
 8030a0e:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 8030a10:	693b      	ldr	r3, [r7, #16]
 8030a12:	2b00      	cmp	r3, #0
 8030a14:	d101      	bne.n	8030a1a <tcp_pbuf_prealloc+0xa2>
    return NULL;
 8030a16:	2300      	movs	r3, #0
 8030a18:	e019      	b.n	8030a4e <tcp_pbuf_prealloc+0xd6>
  }
  LWIP_ASSERT("need unchained pbuf", p->next == NULL);
 8030a1a:	693b      	ldr	r3, [r7, #16]
 8030a1c:	681b      	ldr	r3, [r3, #0]
 8030a1e:	2b00      	cmp	r3, #0
 8030a20:	d006      	beq.n	8030a30 <tcp_pbuf_prealloc+0xb8>
 8030a22:	4b0d      	ldr	r3, [pc, #52]	; (8030a58 <tcp_pbuf_prealloc+0xe0>)
 8030a24:	f240 120b 	movw	r2, #267	; 0x10b
 8030a28:	490f      	ldr	r1, [pc, #60]	; (8030a68 <tcp_pbuf_prealloc+0xf0>)
 8030a2a:	480d      	ldr	r0, [pc, #52]	; (8030a60 <tcp_pbuf_prealloc+0xe8>)
 8030a2c:	f005 fbb4 	bl	8036198 <iprintf>
  *oversize = p->len - length;
 8030a30:	693b      	ldr	r3, [r7, #16]
 8030a32:	895a      	ldrh	r2, [r3, #10]
 8030a34:	89bb      	ldrh	r3, [r7, #12]
 8030a36:	1ad3      	subs	r3, r2, r3
 8030a38:	b29a      	uxth	r2, r3
 8030a3a:	687b      	ldr	r3, [r7, #4]
 8030a3c:	801a      	strh	r2, [r3, #0]
  /* trim p->len to the currently used size */
  p->len = p->tot_len = length;
 8030a3e:	693b      	ldr	r3, [r7, #16]
 8030a40:	89ba      	ldrh	r2, [r7, #12]
 8030a42:	811a      	strh	r2, [r3, #8]
 8030a44:	693b      	ldr	r3, [r7, #16]
 8030a46:	891a      	ldrh	r2, [r3, #8]
 8030a48:	693b      	ldr	r3, [r7, #16]
 8030a4a:	815a      	strh	r2, [r3, #10]
  return p;
 8030a4c:	693b      	ldr	r3, [r7, #16]
}
 8030a4e:	4618      	mov	r0, r3
 8030a50:	3718      	adds	r7, #24
 8030a52:	46bd      	mov	sp, r7
 8030a54:	bd80      	pop	{r7, pc}
 8030a56:	bf00      	nop
 8030a58:	08039728 	.word	0x08039728
 8030a5c:	080397e0 	.word	0x080397e0
 8030a60:	0803977c 	.word	0x0803977c
 8030a64:	08039804 	.word	0x08039804
 8030a68:	08039824 	.word	0x08039824

08030a6c <tcp_write_checks>:
 * @param len length of data to send (checked agains snd_buf)
 * @return ERR_OK if tcp_write is allowed to proceed, another err_t otherwise
 */
static err_t
tcp_write_checks(struct tcp_pcb *pcb, u16_t len)
{
 8030a6c:	b580      	push	{r7, lr}
 8030a6e:	b082      	sub	sp, #8
 8030a70:	af00      	add	r7, sp, #0
 8030a72:	6078      	str	r0, [r7, #4]
 8030a74:	460b      	mov	r3, r1
 8030a76:	807b      	strh	r3, [r7, #2]
  LWIP_ASSERT("tcp_write_checks: invalid pcb", pcb != NULL);
 8030a78:	687b      	ldr	r3, [r7, #4]
 8030a7a:	2b00      	cmp	r3, #0
 8030a7c:	d106      	bne.n	8030a8c <tcp_write_checks+0x20>
 8030a7e:	4b37      	ldr	r3, [pc, #220]	; (8030b5c <tcp_write_checks+0xf0>)
 8030a80:	f240 1233 	movw	r2, #307	; 0x133
 8030a84:	4936      	ldr	r1, [pc, #216]	; (8030b60 <tcp_write_checks+0xf4>)
 8030a86:	4837      	ldr	r0, [pc, #220]	; (8030b64 <tcp_write_checks+0xf8>)
 8030a88:	f005 fb86 	bl	8036198 <iprintf>

  /* connection is in invalid state for data transmission? */
  if ((pcb->state != ESTABLISHED) &&
 8030a8c:	687b      	ldr	r3, [r7, #4]
 8030a8e:	7d1b      	ldrb	r3, [r3, #20]
 8030a90:	2b04      	cmp	r3, #4
 8030a92:	d00e      	beq.n	8030ab2 <tcp_write_checks+0x46>
      (pcb->state != CLOSE_WAIT) &&
 8030a94:	687b      	ldr	r3, [r7, #4]
 8030a96:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != ESTABLISHED) &&
 8030a98:	2b07      	cmp	r3, #7
 8030a9a:	d00a      	beq.n	8030ab2 <tcp_write_checks+0x46>
      (pcb->state != SYN_SENT) &&
 8030a9c:	687b      	ldr	r3, [r7, #4]
 8030a9e:	7d1b      	ldrb	r3, [r3, #20]
      (pcb->state != CLOSE_WAIT) &&
 8030aa0:	2b02      	cmp	r3, #2
 8030aa2:	d006      	beq.n	8030ab2 <tcp_write_checks+0x46>
      (pcb->state != SYN_RCVD)) {
 8030aa4:	687b      	ldr	r3, [r7, #4]
 8030aa6:	7d1b      	ldrb	r3, [r3, #20]
      (pcb->state != SYN_SENT) &&
 8030aa8:	2b03      	cmp	r3, #3
 8030aaa:	d002      	beq.n	8030ab2 <tcp_write_checks+0x46>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_STATE | LWIP_DBG_LEVEL_SEVERE, ("tcp_write() called in invalid state\n"));
    return ERR_CONN;
 8030aac:	f06f 030a 	mvn.w	r3, #10
 8030ab0:	e050      	b.n	8030b54 <tcp_write_checks+0xe8>
  } else if (len == 0) {
 8030ab2:	887b      	ldrh	r3, [r7, #2]
 8030ab4:	2b00      	cmp	r3, #0
 8030ab6:	d101      	bne.n	8030abc <tcp_write_checks+0x50>
    return ERR_OK;
 8030ab8:	2300      	movs	r3, #0
 8030aba:	e04b      	b.n	8030b54 <tcp_write_checks+0xe8>
  }

  /* fail on too much data */
  if (len > pcb->snd_buf) {
 8030abc:	687b      	ldr	r3, [r7, #4]
 8030abe:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 8030ac2:	887a      	ldrh	r2, [r7, #2]
 8030ac4:	429a      	cmp	r2, r3
 8030ac6:	d909      	bls.n	8030adc <tcp_write_checks+0x70>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("tcp_write: too much data (len=%"U16_F" > snd_buf=%"TCPWNDSIZE_F")\n",
                len, pcb->snd_buf));
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8030ac8:	687b      	ldr	r3, [r7, #4]
 8030aca:	8b5b      	ldrh	r3, [r3, #26]
 8030acc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8030ad0:	b29a      	uxth	r2, r3
 8030ad2:	687b      	ldr	r3, [r7, #4]
 8030ad4:	835a      	strh	r2, [r3, #26]
    return ERR_MEM;
 8030ad6:	f04f 33ff 	mov.w	r3, #4294967295
 8030ada:	e03b      	b.n	8030b54 <tcp_write_checks+0xe8>
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_write: queuelen: %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));

  /* If total number of pbufs on the unsent/unacked queues exceeds the
   * configured maximum, return an error */
  /* check for configured max queuelen and possible overflow */
  if (pcb->snd_queuelen >= LWIP_MIN(TCP_SND_QUEUELEN, (TCP_SNDQUEUELEN_OVERFLOW + 1))) {
 8030adc:	687b      	ldr	r3, [r7, #4]
 8030ade:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8030ae2:	2b08      	cmp	r3, #8
 8030ae4:	d911      	bls.n	8030b0a <tcp_write_checks+0x9e>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("tcp_write: too long queue %"U16_F" (max %"U16_F")\n",
                pcb->snd_queuelen, (u16_t)TCP_SND_QUEUELEN));
    TCP_STATS_INC(tcp.memerr);
 8030ae6:	4b20      	ldr	r3, [pc, #128]	; (8030b68 <tcp_write_checks+0xfc>)
 8030ae8:	f8b3 309c 	ldrh.w	r3, [r3, #156]	; 0x9c
 8030aec:	3301      	adds	r3, #1
 8030aee:	b29a      	uxth	r2, r3
 8030af0:	4b1d      	ldr	r3, [pc, #116]	; (8030b68 <tcp_write_checks+0xfc>)
 8030af2:	f8a3 209c 	strh.w	r2, [r3, #156]	; 0x9c
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8030af6:	687b      	ldr	r3, [r7, #4]
 8030af8:	8b5b      	ldrh	r3, [r3, #26]
 8030afa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8030afe:	b29a      	uxth	r2, r3
 8030b00:	687b      	ldr	r3, [r7, #4]
 8030b02:	835a      	strh	r2, [r3, #26]
    return ERR_MEM;
 8030b04:	f04f 33ff 	mov.w	r3, #4294967295
 8030b08:	e024      	b.n	8030b54 <tcp_write_checks+0xe8>
  }
  if (pcb->snd_queuelen != 0) {
 8030b0a:	687b      	ldr	r3, [r7, #4]
 8030b0c:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8030b10:	2b00      	cmp	r3, #0
 8030b12:	d00f      	beq.n	8030b34 <tcp_write_checks+0xc8>
    LWIP_ASSERT("tcp_write: pbufs on queue => at least one queue non-empty",
 8030b14:	687b      	ldr	r3, [r7, #4]
 8030b16:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8030b18:	2b00      	cmp	r3, #0
 8030b1a:	d11a      	bne.n	8030b52 <tcp_write_checks+0xe6>
 8030b1c:	687b      	ldr	r3, [r7, #4]
 8030b1e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8030b20:	2b00      	cmp	r3, #0
 8030b22:	d116      	bne.n	8030b52 <tcp_write_checks+0xe6>
 8030b24:	4b0d      	ldr	r3, [pc, #52]	; (8030b5c <tcp_write_checks+0xf0>)
 8030b26:	f240 1255 	movw	r2, #341	; 0x155
 8030b2a:	4910      	ldr	r1, [pc, #64]	; (8030b6c <tcp_write_checks+0x100>)
 8030b2c:	480d      	ldr	r0, [pc, #52]	; (8030b64 <tcp_write_checks+0xf8>)
 8030b2e:	f005 fb33 	bl	8036198 <iprintf>
 8030b32:	e00e      	b.n	8030b52 <tcp_write_checks+0xe6>
                pcb->unacked != NULL || pcb->unsent != NULL);
  } else {
    LWIP_ASSERT("tcp_write: no pbufs on queue => both queues empty",
 8030b34:	687b      	ldr	r3, [r7, #4]
 8030b36:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8030b38:	2b00      	cmp	r3, #0
 8030b3a:	d103      	bne.n	8030b44 <tcp_write_checks+0xd8>
 8030b3c:	687b      	ldr	r3, [r7, #4]
 8030b3e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8030b40:	2b00      	cmp	r3, #0
 8030b42:	d006      	beq.n	8030b52 <tcp_write_checks+0xe6>
 8030b44:	4b05      	ldr	r3, [pc, #20]	; (8030b5c <tcp_write_checks+0xf0>)
 8030b46:	f44f 72ac 	mov.w	r2, #344	; 0x158
 8030b4a:	4909      	ldr	r1, [pc, #36]	; (8030b70 <tcp_write_checks+0x104>)
 8030b4c:	4805      	ldr	r0, [pc, #20]	; (8030b64 <tcp_write_checks+0xf8>)
 8030b4e:	f005 fb23 	bl	8036198 <iprintf>
                pcb->unacked == NULL && pcb->unsent == NULL);
  }
  return ERR_OK;
 8030b52:	2300      	movs	r3, #0
}
 8030b54:	4618      	mov	r0, r3
 8030b56:	3708      	adds	r7, #8
 8030b58:	46bd      	mov	sp, r7
 8030b5a:	bd80      	pop	{r7, pc}
 8030b5c:	08039728 	.word	0x08039728
 8030b60:	08039838 	.word	0x08039838
 8030b64:	0803977c 	.word	0x0803977c
 8030b68:	2000ed10 	.word	0x2000ed10
 8030b6c:	08039858 	.word	0x08039858
 8030b70:	08039894 	.word	0x08039894

08030b74 <tcp_write>:
 * - TCP_WRITE_FLAG_MORE (0x02) for TCP connection, PSH flag will not be set on last segment sent,
 * @return ERR_OK if enqueued, another err_t on error
 */
err_t
tcp_write(struct tcp_pcb *pcb, const void *arg, u16_t len, u8_t apiflags)
{
 8030b74:	b590      	push	{r4, r7, lr}
 8030b76:	b09b      	sub	sp, #108	; 0x6c
 8030b78:	af04      	add	r7, sp, #16
 8030b7a:	60f8      	str	r0, [r7, #12]
 8030b7c:	60b9      	str	r1, [r7, #8]
 8030b7e:	4611      	mov	r1, r2
 8030b80:	461a      	mov	r2, r3
 8030b82:	460b      	mov	r3, r1
 8030b84:	80fb      	strh	r3, [r7, #6]
 8030b86:	4613      	mov	r3, r2
 8030b88:	717b      	strb	r3, [r7, #5]
  struct pbuf *concat_p = NULL;
 8030b8a:	2300      	movs	r3, #0
 8030b8c:	657b      	str	r3, [r7, #84]	; 0x54
  struct tcp_seg *last_unsent = NULL, *seg = NULL, *prev_seg = NULL, *queue = NULL;
 8030b8e:	2300      	movs	r3, #0
 8030b90:	653b      	str	r3, [r7, #80]	; 0x50
 8030b92:	2300      	movs	r3, #0
 8030b94:	64fb      	str	r3, [r7, #76]	; 0x4c
 8030b96:	2300      	movs	r3, #0
 8030b98:	64bb      	str	r3, [r7, #72]	; 0x48
 8030b9a:	2300      	movs	r3, #0
 8030b9c:	647b      	str	r3, [r7, #68]	; 0x44
  u16_t pos = 0; /* position in 'arg' data */
 8030b9e:	2300      	movs	r3, #0
 8030ba0:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
  u16_t queuelen;
  u8_t optlen;
  u8_t optflags = 0;
 8030ba4:	2300      	movs	r3, #0
 8030ba6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
#if TCP_OVERSIZE
  u16_t oversize = 0;
 8030baa:	2300      	movs	r3, #0
 8030bac:	827b      	strh	r3, [r7, #18]
  u16_t oversize_used = 0;
 8030bae:	2300      	movs	r3, #0
 8030bb0:	87fb      	strh	r3, [r7, #62]	; 0x3e
#if TCP_OVERSIZE_DBGCHECK
  u16_t oversize_add = 0;
#endif /* TCP_OVERSIZE_DBGCHECK*/
#endif /* TCP_OVERSIZE */
  u16_t extendlen = 0;
 8030bb2:	2300      	movs	r3, #0
 8030bb4:	87bb      	strh	r3, [r7, #60]	; 0x3c
  u16_t concat_chksummed = 0;
#endif /* TCP_CHECKSUM_ON_COPY */
  err_t err;
  u16_t mss_local;

  LWIP_ERROR("tcp_write: invalid pcb", pcb != NULL, return ERR_ARG);
 8030bb6:	68fb      	ldr	r3, [r7, #12]
 8030bb8:	2b00      	cmp	r3, #0
 8030bba:	d109      	bne.n	8030bd0 <tcp_write+0x5c>
 8030bbc:	4ba4      	ldr	r3, [pc, #656]	; (8030e50 <tcp_write+0x2dc>)
 8030bbe:	f44f 72cf 	mov.w	r2, #414	; 0x19e
 8030bc2:	49a4      	ldr	r1, [pc, #656]	; (8030e54 <tcp_write+0x2e0>)
 8030bc4:	48a4      	ldr	r0, [pc, #656]	; (8030e58 <tcp_write+0x2e4>)
 8030bc6:	f005 fae7 	bl	8036198 <iprintf>
 8030bca:	f06f 030f 	mvn.w	r3, #15
 8030bce:	e332      	b.n	8031236 <tcp_write+0x6c2>

  /* don't allocate segments bigger than half the maximum window we ever received */
  mss_local = LWIP_MIN(pcb->mss, TCPWND_MIN16(pcb->snd_wnd_max / 2));
 8030bd0:	68fb      	ldr	r3, [r7, #12]
 8030bd2:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8030bd6:	085b      	lsrs	r3, r3, #1
 8030bd8:	b29a      	uxth	r2, r3
 8030bda:	68fb      	ldr	r3, [r7, #12]
 8030bdc:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8030bde:	4293      	cmp	r3, r2
 8030be0:	bf28      	it	cs
 8030be2:	4613      	movcs	r3, r2
 8030be4:	84bb      	strh	r3, [r7, #36]	; 0x24
  mss_local = mss_local ? mss_local : pcb->mss;
 8030be6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8030be8:	2b00      	cmp	r3, #0
 8030bea:	d102      	bne.n	8030bf2 <tcp_write+0x7e>
 8030bec:	68fb      	ldr	r3, [r7, #12]
 8030bee:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8030bf0:	e000      	b.n	8030bf4 <tcp_write+0x80>
 8030bf2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8030bf4:	84bb      	strh	r3, [r7, #36]	; 0x24
  apiflags |= TCP_WRITE_FLAG_COPY;
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_write(pcb=%p, data=%p, len=%"U16_F", apiflags=%"U16_F")\n",
                                 (void *)pcb, arg, len, (u16_t)apiflags));
  LWIP_ERROR("tcp_write: arg == NULL (programmer violates API)",
 8030bf6:	68bb      	ldr	r3, [r7, #8]
 8030bf8:	2b00      	cmp	r3, #0
 8030bfa:	d109      	bne.n	8030c10 <tcp_write+0x9c>
 8030bfc:	4b94      	ldr	r3, [pc, #592]	; (8030e50 <tcp_write+0x2dc>)
 8030bfe:	f240 12ad 	movw	r2, #429	; 0x1ad
 8030c02:	4996      	ldr	r1, [pc, #600]	; (8030e5c <tcp_write+0x2e8>)
 8030c04:	4894      	ldr	r0, [pc, #592]	; (8030e58 <tcp_write+0x2e4>)
 8030c06:	f005 fac7 	bl	8036198 <iprintf>
 8030c0a:	f06f 030f 	mvn.w	r3, #15
 8030c0e:	e312      	b.n	8031236 <tcp_write+0x6c2>
             arg != NULL, return ERR_ARG;);

  err = tcp_write_checks(pcb, len);
 8030c10:	88fb      	ldrh	r3, [r7, #6]
 8030c12:	4619      	mov	r1, r3
 8030c14:	68f8      	ldr	r0, [r7, #12]
 8030c16:	f7ff ff29 	bl	8030a6c <tcp_write_checks>
 8030c1a:	4603      	mov	r3, r0
 8030c1c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  if (err != ERR_OK) {
 8030c20:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
 8030c24:	2b00      	cmp	r3, #0
 8030c26:	d002      	beq.n	8030c2e <tcp_write+0xba>
    return err;
 8030c28:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
 8030c2c:	e303      	b.n	8031236 <tcp_write+0x6c2>
  }
  queuelen = pcb->snd_queuelen;
 8030c2e:	68fb      	ldr	r3, [r7, #12]
 8030c30:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8030c34:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
    /* ensure that segments can hold at least one data byte... */
    mss_local = LWIP_MAX(mss_local, LWIP_TCP_OPT_LEN_TS + 1);
  } else
#endif /* LWIP_TCP_TIMESTAMPS */
  {
    optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 8030c38:	2300      	movs	r3, #0
 8030c3a:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
   *
   * pos records progress as data is segmented.
   */

  /* Find the tail of the unsent queue. */
  if (pcb->unsent != NULL) {
 8030c3e:	68fb      	ldr	r3, [r7, #12]
 8030c40:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8030c42:	2b00      	cmp	r3, #0
 8030c44:	f000 80f6 	beq.w	8030e34 <tcp_write+0x2c0>
    u16_t space;
    u16_t unsent_optlen;

    /* @todo: this could be sped up by keeping last_unsent in the pcb */
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 8030c48:	68fb      	ldr	r3, [r7, #12]
 8030c4a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8030c4c:	653b      	str	r3, [r7, #80]	; 0x50
 8030c4e:	e002      	b.n	8030c56 <tcp_write+0xe2>
         last_unsent = last_unsent->next);
 8030c50:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8030c52:	681b      	ldr	r3, [r3, #0]
 8030c54:	653b      	str	r3, [r7, #80]	; 0x50
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 8030c56:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8030c58:	681b      	ldr	r3, [r3, #0]
 8030c5a:	2b00      	cmp	r3, #0
 8030c5c:	d1f8      	bne.n	8030c50 <tcp_write+0xdc>

    /* Usable space at the end of the last unsent segment */
    unsent_optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(last_unsent->flags, pcb);
 8030c5e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8030c60:	7a9b      	ldrb	r3, [r3, #10]
 8030c62:	009b      	lsls	r3, r3, #2
 8030c64:	b29b      	uxth	r3, r3
 8030c66:	f003 0304 	and.w	r3, r3, #4
 8030c6a:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("mss_local is too small", mss_local >= last_unsent->len + unsent_optlen);
 8030c6c:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8030c6e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8030c70:	891b      	ldrh	r3, [r3, #8]
 8030c72:	4619      	mov	r1, r3
 8030c74:	8c3b      	ldrh	r3, [r7, #32]
 8030c76:	440b      	add	r3, r1
 8030c78:	429a      	cmp	r2, r3
 8030c7a:	da06      	bge.n	8030c8a <tcp_write+0x116>
 8030c7c:	4b74      	ldr	r3, [pc, #464]	; (8030e50 <tcp_write+0x2dc>)
 8030c7e:	f44f 72f3 	mov.w	r2, #486	; 0x1e6
 8030c82:	4977      	ldr	r1, [pc, #476]	; (8030e60 <tcp_write+0x2ec>)
 8030c84:	4874      	ldr	r0, [pc, #464]	; (8030e58 <tcp_write+0x2e4>)
 8030c86:	f005 fa87 	bl	8036198 <iprintf>
    space = mss_local - (last_unsent->len + unsent_optlen);
 8030c8a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8030c8c:	891a      	ldrh	r2, [r3, #8]
 8030c8e:	8c3b      	ldrh	r3, [r7, #32]
 8030c90:	4413      	add	r3, r2
 8030c92:	b29b      	uxth	r3, r3
 8030c94:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8030c96:	1ad3      	subs	r3, r2, r3
 8030c98:	877b      	strh	r3, [r7, #58]	; 0x3a
#if TCP_OVERSIZE_DBGCHECK
    /* check that pcb->unsent_oversize matches last_unsent->oversize_left */
    LWIP_ASSERT("unsent_oversize mismatch (pcb vs. last_unsent)",
                pcb->unsent_oversize == last_unsent->oversize_left);
#endif /* TCP_OVERSIZE_DBGCHECK */
    oversize = pcb->unsent_oversize;
 8030c9a:	68fb      	ldr	r3, [r7, #12]
 8030c9c:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8030ca0:	827b      	strh	r3, [r7, #18]
    if (oversize > 0) {
 8030ca2:	8a7b      	ldrh	r3, [r7, #18]
 8030ca4:	2b00      	cmp	r3, #0
 8030ca6:	d026      	beq.n	8030cf6 <tcp_write+0x182>
      LWIP_ASSERT("inconsistent oversize vs. space", oversize <= space);
 8030ca8:	8a7b      	ldrh	r3, [r7, #18]
 8030caa:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8030cac:	429a      	cmp	r2, r3
 8030cae:	d206      	bcs.n	8030cbe <tcp_write+0x14a>
 8030cb0:	4b67      	ldr	r3, [pc, #412]	; (8030e50 <tcp_write+0x2dc>)
 8030cb2:	f44f 72fc 	mov.w	r2, #504	; 0x1f8
 8030cb6:	496b      	ldr	r1, [pc, #428]	; (8030e64 <tcp_write+0x2f0>)
 8030cb8:	4867      	ldr	r0, [pc, #412]	; (8030e58 <tcp_write+0x2e4>)
 8030cba:	f005 fa6d 	bl	8036198 <iprintf>
      seg = last_unsent;
 8030cbe:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8030cc0:	64fb      	str	r3, [r7, #76]	; 0x4c
      oversize_used = LWIP_MIN(space, LWIP_MIN(oversize, len));
 8030cc2:	8a7b      	ldrh	r3, [r7, #18]
 8030cc4:	88fa      	ldrh	r2, [r7, #6]
 8030cc6:	4293      	cmp	r3, r2
 8030cc8:	bf28      	it	cs
 8030cca:	4613      	movcs	r3, r2
 8030ccc:	b29b      	uxth	r3, r3
 8030cce:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8030cd0:	4293      	cmp	r3, r2
 8030cd2:	bf28      	it	cs
 8030cd4:	4613      	movcs	r3, r2
 8030cd6:	87fb      	strh	r3, [r7, #62]	; 0x3e
      pos += oversize_used;
 8030cd8:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8030cdc:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8030cde:	4413      	add	r3, r2
 8030ce0:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
      oversize -= oversize_used;
 8030ce4:	8a7a      	ldrh	r2, [r7, #18]
 8030ce6:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8030ce8:	1ad3      	subs	r3, r2, r3
 8030cea:	b29b      	uxth	r3, r3
 8030cec:	827b      	strh	r3, [r7, #18]
      space -= oversize_used;
 8030cee:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8030cf0:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8030cf2:	1ad3      	subs	r3, r2, r3
 8030cf4:	877b      	strh	r3, [r7, #58]	; 0x3a
    }
    /* now we are either finished or oversize is zero */
    LWIP_ASSERT("inconsistent oversize vs. len", (oversize == 0) || (pos == len));
 8030cf6:	8a7b      	ldrh	r3, [r7, #18]
 8030cf8:	2b00      	cmp	r3, #0
 8030cfa:	d00b      	beq.n	8030d14 <tcp_write+0x1a0>
 8030cfc:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8030d00:	88fb      	ldrh	r3, [r7, #6]
 8030d02:	429a      	cmp	r2, r3
 8030d04:	d006      	beq.n	8030d14 <tcp_write+0x1a0>
 8030d06:	4b52      	ldr	r3, [pc, #328]	; (8030e50 <tcp_write+0x2dc>)
 8030d08:	f44f 7200 	mov.w	r2, #512	; 0x200
 8030d0c:	4956      	ldr	r1, [pc, #344]	; (8030e68 <tcp_write+0x2f4>)
 8030d0e:	4852      	ldr	r0, [pc, #328]	; (8030e58 <tcp_write+0x2e4>)
 8030d10:	f005 fa42 	bl	8036198 <iprintf>
     *
     * This phase is skipped for LWIP_NETIF_TX_SINGLE_PBUF as we could only execute
     * it after rexmit puts a segment from unacked to unsent and at this point,
     * oversize info is lost.
     */
    if ((pos < len) && (space > 0) && (last_unsent->len > 0)) {
 8030d14:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8030d18:	88fb      	ldrh	r3, [r7, #6]
 8030d1a:	429a      	cmp	r2, r3
 8030d1c:	f080 8167 	bcs.w	8030fee <tcp_write+0x47a>
 8030d20:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8030d22:	2b00      	cmp	r3, #0
 8030d24:	f000 8163 	beq.w	8030fee <tcp_write+0x47a>
 8030d28:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8030d2a:	891b      	ldrh	r3, [r3, #8]
 8030d2c:	2b00      	cmp	r3, #0
 8030d2e:	f000 815e 	beq.w	8030fee <tcp_write+0x47a>
      u16_t seglen = LWIP_MIN(space, len - pos);
 8030d32:	88fa      	ldrh	r2, [r7, #6]
 8030d34:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8030d38:	1ad2      	subs	r2, r2, r3
 8030d3a:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8030d3c:	4293      	cmp	r3, r2
 8030d3e:	bfa8      	it	ge
 8030d40:	4613      	movge	r3, r2
 8030d42:	83fb      	strh	r3, [r7, #30]
      seg = last_unsent;
 8030d44:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8030d46:	64fb      	str	r3, [r7, #76]	; 0x4c

      /* Create a pbuf with a copy or reference to seglen bytes. We
       * can use PBUF_RAW here since the data appears in the middle of
       * a segment. A header will never be prepended. */
      if (apiflags & TCP_WRITE_FLAG_COPY) {
 8030d48:	797b      	ldrb	r3, [r7, #5]
 8030d4a:	f003 0301 	and.w	r3, r3, #1
 8030d4e:	2b00      	cmp	r3, #0
 8030d50:	d027      	beq.n	8030da2 <tcp_write+0x22e>
        /* Data is copied */
        if ((concat_p = tcp_pbuf_prealloc(PBUF_RAW, seglen, space, &oversize, pcb, apiflags, 1)) == NULL) {
 8030d52:	f107 0012 	add.w	r0, r7, #18
 8030d56:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8030d58:	8bf9      	ldrh	r1, [r7, #30]
 8030d5a:	2301      	movs	r3, #1
 8030d5c:	9302      	str	r3, [sp, #8]
 8030d5e:	797b      	ldrb	r3, [r7, #5]
 8030d60:	9301      	str	r3, [sp, #4]
 8030d62:	68fb      	ldr	r3, [r7, #12]
 8030d64:	9300      	str	r3, [sp, #0]
 8030d66:	4603      	mov	r3, r0
 8030d68:	2000      	movs	r0, #0
 8030d6a:	f7ff fe05 	bl	8030978 <tcp_pbuf_prealloc>
 8030d6e:	6578      	str	r0, [r7, #84]	; 0x54
 8030d70:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8030d72:	2b00      	cmp	r3, #0
 8030d74:	f000 8225 	beq.w	80311c2 <tcp_write+0x64e>
          goto memerr;
        }
#if TCP_OVERSIZE_DBGCHECK
        oversize_add = oversize;
#endif /* TCP_OVERSIZE_DBGCHECK */
        TCP_DATA_COPY2(concat_p->payload, (const u8_t *)arg + pos, seglen, &concat_chksum, &concat_chksum_swapped);
 8030d78:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8030d7a:	6858      	ldr	r0, [r3, #4]
 8030d7c:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8030d80:	68ba      	ldr	r2, [r7, #8]
 8030d82:	4413      	add	r3, r2
 8030d84:	8bfa      	ldrh	r2, [r7, #30]
 8030d86:	4619      	mov	r1, r3
 8030d88:	f005 f8f6 	bl	8035f78 <memcpy>
#if TCP_CHECKSUM_ON_COPY
        concat_chksummed += seglen;
#endif /* TCP_CHECKSUM_ON_COPY */
        queuelen += pbuf_clen(concat_p);
 8030d8c:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8030d8e:	f7fb f913 	bl	802bfb8 <pbuf_clen>
 8030d92:	4603      	mov	r3, r0
 8030d94:	461a      	mov	r2, r3
 8030d96:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8030d9a:	4413      	add	r3, r2
 8030d9c:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 8030da0:	e041      	b.n	8030e26 <tcp_write+0x2b2>
      } else {
        /* Data is not copied */
        /* If the last unsent pbuf is of type PBUF_ROM, try to extend it. */
        struct pbuf *p;
        for (p = last_unsent->p; p->next != NULL; p = p->next);
 8030da2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8030da4:	685b      	ldr	r3, [r3, #4]
 8030da6:	637b      	str	r3, [r7, #52]	; 0x34
 8030da8:	e002      	b.n	8030db0 <tcp_write+0x23c>
 8030daa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8030dac:	681b      	ldr	r3, [r3, #0]
 8030dae:	637b      	str	r3, [r7, #52]	; 0x34
 8030db0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8030db2:	681b      	ldr	r3, [r3, #0]
 8030db4:	2b00      	cmp	r3, #0
 8030db6:	d1f8      	bne.n	8030daa <tcp_write+0x236>
        if (((p->type_internal & (PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS | PBUF_TYPE_FLAG_DATA_VOLATILE)) == 0) &&
 8030db8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8030dba:	7b1b      	ldrb	r3, [r3, #12]
 8030dbc:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8030dc0:	2b00      	cmp	r3, #0
 8030dc2:	d115      	bne.n	8030df0 <tcp_write+0x27c>
            (const u8_t *)p->payload + p->len == (const u8_t *)arg) {
 8030dc4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8030dc6:	685b      	ldr	r3, [r3, #4]
 8030dc8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8030dca:	8952      	ldrh	r2, [r2, #10]
 8030dcc:	4413      	add	r3, r2
        if (((p->type_internal & (PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS | PBUF_TYPE_FLAG_DATA_VOLATILE)) == 0) &&
 8030dce:	68ba      	ldr	r2, [r7, #8]
 8030dd0:	429a      	cmp	r2, r3
 8030dd2:	d10d      	bne.n	8030df0 <tcp_write+0x27c>
          LWIP_ASSERT("tcp_write: ROM pbufs cannot be oversized", pos == 0);
 8030dd4:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8030dd8:	2b00      	cmp	r3, #0
 8030dda:	d006      	beq.n	8030dea <tcp_write+0x276>
 8030ddc:	4b1c      	ldr	r3, [pc, #112]	; (8030e50 <tcp_write+0x2dc>)
 8030dde:	f240 2231 	movw	r2, #561	; 0x231
 8030de2:	4922      	ldr	r1, [pc, #136]	; (8030e6c <tcp_write+0x2f8>)
 8030de4:	481c      	ldr	r0, [pc, #112]	; (8030e58 <tcp_write+0x2e4>)
 8030de6:	f005 f9d7 	bl	8036198 <iprintf>
          extendlen = seglen;
 8030dea:	8bfb      	ldrh	r3, [r7, #30]
 8030dec:	87bb      	strh	r3, [r7, #60]	; 0x3c
 8030dee:	e01a      	b.n	8030e26 <tcp_write+0x2b2>
        } else {
          if ((concat_p = pbuf_alloc(PBUF_RAW, seglen, PBUF_ROM)) == NULL) {
 8030df0:	8bfb      	ldrh	r3, [r7, #30]
 8030df2:	2201      	movs	r2, #1
 8030df4:	4619      	mov	r1, r3
 8030df6:	2000      	movs	r0, #0
 8030df8:	f7fa fd6c 	bl	802b8d4 <pbuf_alloc>
 8030dfc:	6578      	str	r0, [r7, #84]	; 0x54
 8030dfe:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8030e00:	2b00      	cmp	r3, #0
 8030e02:	f000 81e0 	beq.w	80311c6 <tcp_write+0x652>
            LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                        ("tcp_write: could not allocate memory for zero-copy pbuf\n"));
            goto memerr;
          }
          /* reference the non-volatile payload data */
          ((struct pbuf_rom *)concat_p)->payload = (const u8_t *)arg + pos;
 8030e06:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8030e0a:	68ba      	ldr	r2, [r7, #8]
 8030e0c:	441a      	add	r2, r3
 8030e0e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8030e10:	605a      	str	r2, [r3, #4]
          queuelen += pbuf_clen(concat_p);
 8030e12:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8030e14:	f7fb f8d0 	bl	802bfb8 <pbuf_clen>
 8030e18:	4603      	mov	r3, r0
 8030e1a:	461a      	mov	r2, r3
 8030e1c:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8030e20:	4413      	add	r3, r2
 8030e22:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
                           &concat_chksum, &concat_chksum_swapped);
        concat_chksummed += seglen;
#endif /* TCP_CHECKSUM_ON_COPY */
      }

      pos += seglen;
 8030e26:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8030e2a:	8bfb      	ldrh	r3, [r7, #30]
 8030e2c:	4413      	add	r3, r2
 8030e2e:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 8030e32:	e0dc      	b.n	8030fee <tcp_write+0x47a>
    }
#endif /* !LWIP_NETIF_TX_SINGLE_PBUF */
  } else {
#if TCP_OVERSIZE
    LWIP_ASSERT("unsent_oversize mismatch (pcb->unsent is NULL)",
 8030e34:	68fb      	ldr	r3, [r7, #12]
 8030e36:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8030e3a:	2b00      	cmp	r3, #0
 8030e3c:	f000 80d7 	beq.w	8030fee <tcp_write+0x47a>
 8030e40:	4b03      	ldr	r3, [pc, #12]	; (8030e50 <tcp_write+0x2dc>)
 8030e42:	f240 224a 	movw	r2, #586	; 0x24a
 8030e46:	490a      	ldr	r1, [pc, #40]	; (8030e70 <tcp_write+0x2fc>)
 8030e48:	4803      	ldr	r0, [pc, #12]	; (8030e58 <tcp_write+0x2e4>)
 8030e4a:	f005 f9a5 	bl	8036198 <iprintf>
   * Phase 3: Create new segments.
   *
   * The new segments are chained together in the local 'queue'
   * variable, ready to be appended to pcb->unsent.
   */
  while (pos < len) {
 8030e4e:	e0ce      	b.n	8030fee <tcp_write+0x47a>
 8030e50:	08039728 	.word	0x08039728
 8030e54:	080398c8 	.word	0x080398c8
 8030e58:	0803977c 	.word	0x0803977c
 8030e5c:	080398e0 	.word	0x080398e0
 8030e60:	08039914 	.word	0x08039914
 8030e64:	0803992c 	.word	0x0803992c
 8030e68:	0803994c 	.word	0x0803994c
 8030e6c:	0803996c 	.word	0x0803996c
 8030e70:	08039998 	.word	0x08039998
    struct pbuf *p;
    u16_t left = len - pos;
 8030e74:	88fa      	ldrh	r2, [r7, #6]
 8030e76:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8030e7a:	1ad3      	subs	r3, r2, r3
 8030e7c:	83bb      	strh	r3, [r7, #28]
    u16_t max_len = mss_local - optlen;
 8030e7e:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8030e82:	b29b      	uxth	r3, r3
 8030e84:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8030e86:	1ad3      	subs	r3, r2, r3
 8030e88:	837b      	strh	r3, [r7, #26]
    u16_t seglen = LWIP_MIN(left, max_len);
 8030e8a:	8b7a      	ldrh	r2, [r7, #26]
 8030e8c:	8bbb      	ldrh	r3, [r7, #28]
 8030e8e:	4293      	cmp	r3, r2
 8030e90:	bf28      	it	cs
 8030e92:	4613      	movcs	r3, r2
 8030e94:	833b      	strh	r3, [r7, #24]
#if TCP_CHECKSUM_ON_COPY
    u16_t chksum = 0;
    u8_t chksum_swapped = 0;
#endif /* TCP_CHECKSUM_ON_COPY */

    if (apiflags & TCP_WRITE_FLAG_COPY) {
 8030e96:	797b      	ldrb	r3, [r7, #5]
 8030e98:	f003 0301 	and.w	r3, r3, #1
 8030e9c:	2b00      	cmp	r3, #0
 8030e9e:	d036      	beq.n	8030f0e <tcp_write+0x39a>
      /* If copy is set, memory should be allocated and data copied
       * into pbuf */
      if ((p = tcp_pbuf_prealloc(PBUF_TRANSPORT, seglen + optlen, mss_local, &oversize, pcb, apiflags, queue == NULL)) == NULL) {
 8030ea0:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8030ea4:	b29a      	uxth	r2, r3
 8030ea6:	8b3b      	ldrh	r3, [r7, #24]
 8030ea8:	4413      	add	r3, r2
 8030eaa:	b299      	uxth	r1, r3
 8030eac:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8030eae:	2b00      	cmp	r3, #0
 8030eb0:	bf0c      	ite	eq
 8030eb2:	2301      	moveq	r3, #1
 8030eb4:	2300      	movne	r3, #0
 8030eb6:	b2db      	uxtb	r3, r3
 8030eb8:	f107 0012 	add.w	r0, r7, #18
 8030ebc:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8030ebe:	9302      	str	r3, [sp, #8]
 8030ec0:	797b      	ldrb	r3, [r7, #5]
 8030ec2:	9301      	str	r3, [sp, #4]
 8030ec4:	68fb      	ldr	r3, [r7, #12]
 8030ec6:	9300      	str	r3, [sp, #0]
 8030ec8:	4603      	mov	r3, r0
 8030eca:	2036      	movs	r0, #54	; 0x36
 8030ecc:	f7ff fd54 	bl	8030978 <tcp_pbuf_prealloc>
 8030ed0:	6338      	str	r0, [r7, #48]	; 0x30
 8030ed2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8030ed4:	2b00      	cmp	r3, #0
 8030ed6:	f000 8178 	beq.w	80311ca <tcp_write+0x656>
        LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write : could not allocate memory for pbuf copy size %"U16_F"\n", seglen));
        goto memerr;
      }
      LWIP_ASSERT("tcp_write: check that first pbuf can hold the complete seglen",
 8030eda:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8030edc:	895b      	ldrh	r3, [r3, #10]
 8030ede:	8b3a      	ldrh	r2, [r7, #24]
 8030ee0:	429a      	cmp	r2, r3
 8030ee2:	d906      	bls.n	8030ef2 <tcp_write+0x37e>
 8030ee4:	4b8c      	ldr	r3, [pc, #560]	; (8031118 <tcp_write+0x5a4>)
 8030ee6:	f240 2266 	movw	r2, #614	; 0x266
 8030eea:	498c      	ldr	r1, [pc, #560]	; (803111c <tcp_write+0x5a8>)
 8030eec:	488c      	ldr	r0, [pc, #560]	; (8031120 <tcp_write+0x5ac>)
 8030eee:	f005 f953 	bl	8036198 <iprintf>
                  (p->len >= seglen));
      TCP_DATA_COPY2((char *)p->payload + optlen, (const u8_t *)arg + pos, seglen, &chksum, &chksum_swapped);
 8030ef2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8030ef4:	685a      	ldr	r2, [r3, #4]
 8030ef6:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8030efa:	18d0      	adds	r0, r2, r3
 8030efc:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8030f00:	68ba      	ldr	r2, [r7, #8]
 8030f02:	4413      	add	r3, r2
 8030f04:	8b3a      	ldrh	r2, [r7, #24]
 8030f06:	4619      	mov	r1, r3
 8030f08:	f005 f836 	bl	8035f78 <memcpy>
 8030f0c:	e02f      	b.n	8030f6e <tcp_write+0x3fa>
       * sent out on the link (as it has to be ACKed by the remote
       * party) we can safely use PBUF_ROM instead of PBUF_REF here.
       */
      struct pbuf *p2;
#if TCP_OVERSIZE
      LWIP_ASSERT("oversize == 0", oversize == 0);
 8030f0e:	8a7b      	ldrh	r3, [r7, #18]
 8030f10:	2b00      	cmp	r3, #0
 8030f12:	d006      	beq.n	8030f22 <tcp_write+0x3ae>
 8030f14:	4b80      	ldr	r3, [pc, #512]	; (8031118 <tcp_write+0x5a4>)
 8030f16:	f240 2271 	movw	r2, #625	; 0x271
 8030f1a:	4982      	ldr	r1, [pc, #520]	; (8031124 <tcp_write+0x5b0>)
 8030f1c:	4880      	ldr	r0, [pc, #512]	; (8031120 <tcp_write+0x5ac>)
 8030f1e:	f005 f93b 	bl	8036198 <iprintf>
#endif /* TCP_OVERSIZE */
      if ((p2 = pbuf_alloc(PBUF_TRANSPORT, seglen, PBUF_ROM)) == NULL) {
 8030f22:	8b3b      	ldrh	r3, [r7, #24]
 8030f24:	2201      	movs	r2, #1
 8030f26:	4619      	mov	r1, r3
 8030f28:	2036      	movs	r0, #54	; 0x36
 8030f2a:	f7fa fcd3 	bl	802b8d4 <pbuf_alloc>
 8030f2e:	6178      	str	r0, [r7, #20]
 8030f30:	697b      	ldr	r3, [r7, #20]
 8030f32:	2b00      	cmp	r3, #0
 8030f34:	f000 814b 	beq.w	80311ce <tcp_write+0x65a>
        chksum_swapped = 1;
        chksum = SWAP_BYTES_IN_WORD(chksum);
      }
#endif /* TCP_CHECKSUM_ON_COPY */
      /* reference the non-volatile payload data */
      ((struct pbuf_rom *)p2)->payload = (const u8_t *)arg + pos;
 8030f38:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8030f3c:	68ba      	ldr	r2, [r7, #8]
 8030f3e:	441a      	add	r2, r3
 8030f40:	697b      	ldr	r3, [r7, #20]
 8030f42:	605a      	str	r2, [r3, #4]

      /* Second, allocate a pbuf for the headers. */
      if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 8030f44:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8030f48:	b29b      	uxth	r3, r3
 8030f4a:	f44f 7220 	mov.w	r2, #640	; 0x280
 8030f4e:	4619      	mov	r1, r3
 8030f50:	2036      	movs	r0, #54	; 0x36
 8030f52:	f7fa fcbf 	bl	802b8d4 <pbuf_alloc>
 8030f56:	6338      	str	r0, [r7, #48]	; 0x30
 8030f58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8030f5a:	2b00      	cmp	r3, #0
 8030f5c:	d103      	bne.n	8030f66 <tcp_write+0x3f2>
        /* If allocation fails, we have to deallocate the data pbuf as
         * well. */
        pbuf_free(p2);
 8030f5e:	6978      	ldr	r0, [r7, #20]
 8030f60:	f7fa ff9c 	bl	802be9c <pbuf_free>
        LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write: could not allocate memory for header pbuf\n"));
        goto memerr;
 8030f64:	e136      	b.n	80311d4 <tcp_write+0x660>
      }
      /* Concatenate the headers and data pbufs together. */
      pbuf_cat(p/*header*/, p2/*data*/);
 8030f66:	6979      	ldr	r1, [r7, #20]
 8030f68:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8030f6a:	f7fb f865 	bl	802c038 <pbuf_cat>
    }

    queuelen += pbuf_clen(p);
 8030f6e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8030f70:	f7fb f822 	bl	802bfb8 <pbuf_clen>
 8030f74:	4603      	mov	r3, r0
 8030f76:	461a      	mov	r2, r3
 8030f78:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8030f7c:	4413      	add	r3, r2
 8030f7e:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40

    /* Now that there are more segments queued, we check again if the
     * length of the queue exceeds the configured maximum or
     * overflows. */
    if (queuelen > LWIP_MIN(TCP_SND_QUEUELEN, TCP_SNDQUEUELEN_OVERFLOW)) {
 8030f82:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8030f86:	2b09      	cmp	r3, #9
 8030f88:	d903      	bls.n	8030f92 <tcp_write+0x41e>
      LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write: queue too long %"U16_F" (%d)\n",
                  queuelen, (int)TCP_SND_QUEUELEN));
      pbuf_free(p);
 8030f8a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8030f8c:	f7fa ff86 	bl	802be9c <pbuf_free>
      goto memerr;
 8030f90:	e120      	b.n	80311d4 <tcp_write+0x660>
    }

    if ((seg = tcp_create_segment(pcb, p, 0, pcb->snd_lbb + pos, optflags)) == NULL) {
 8030f92:	68fb      	ldr	r3, [r7, #12]
 8030f94:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8030f96:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8030f9a:	441a      	add	r2, r3
 8030f9c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8030fa0:	9300      	str	r3, [sp, #0]
 8030fa2:	4613      	mov	r3, r2
 8030fa4:	2200      	movs	r2, #0
 8030fa6:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8030fa8:	68f8      	ldr	r0, [r7, #12]
 8030faa:	f7ff fc3d 	bl	8030828 <tcp_create_segment>
 8030fae:	64f8      	str	r0, [r7, #76]	; 0x4c
 8030fb0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8030fb2:	2b00      	cmp	r3, #0
 8030fb4:	f000 810d 	beq.w	80311d2 <tcp_write+0x65e>
    seg->chksum_swapped = chksum_swapped;
    seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

    /* first segment of to-be-queued data? */
    if (queue == NULL) {
 8030fb8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8030fba:	2b00      	cmp	r3, #0
 8030fbc:	d102      	bne.n	8030fc4 <tcp_write+0x450>
      queue = seg;
 8030fbe:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8030fc0:	647b      	str	r3, [r7, #68]	; 0x44
 8030fc2:	e00c      	b.n	8030fde <tcp_write+0x46a>
    } else {
      /* Attach the segment to the end of the queued segments */
      LWIP_ASSERT("prev_seg != NULL", prev_seg != NULL);
 8030fc4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8030fc6:	2b00      	cmp	r3, #0
 8030fc8:	d106      	bne.n	8030fd8 <tcp_write+0x464>
 8030fca:	4b53      	ldr	r3, [pc, #332]	; (8031118 <tcp_write+0x5a4>)
 8030fcc:	f240 22ab 	movw	r2, #683	; 0x2ab
 8030fd0:	4955      	ldr	r1, [pc, #340]	; (8031128 <tcp_write+0x5b4>)
 8030fd2:	4853      	ldr	r0, [pc, #332]	; (8031120 <tcp_write+0x5ac>)
 8030fd4:	f005 f8e0 	bl	8036198 <iprintf>
      prev_seg->next = seg;
 8030fd8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8030fda:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8030fdc:	601a      	str	r2, [r3, #0]
    }
    /* remember last segment of to-be-queued data for next iteration */
    prev_seg = seg;
 8030fde:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8030fe0:	64bb      	str	r3, [r7, #72]	; 0x48

    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_TRACE, ("tcp_write: queueing %"U32_F":%"U32_F"\n",
                lwip_ntohl(seg->tcphdr->seqno),
                lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg)));

    pos += seglen;
 8030fe2:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8030fe6:	8b3b      	ldrh	r3, [r7, #24]
 8030fe8:	4413      	add	r3, r2
 8030fea:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
  while (pos < len) {
 8030fee:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8030ff2:	88fb      	ldrh	r3, [r7, #6]
 8030ff4:	429a      	cmp	r2, r3
 8030ff6:	f4ff af3d 	bcc.w	8030e74 <tcp_write+0x300>
  /*
   * Phase 1: If data has been added to the preallocated tail of
   * last_unsent, we update the length fields of the pbuf chain.
   */
#if TCP_OVERSIZE
  if (oversize_used > 0) {
 8030ffa:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8030ffc:	2b00      	cmp	r3, #0
 8030ffe:	d02c      	beq.n	803105a <tcp_write+0x4e6>
    struct pbuf *p;
    /* Bump tot_len of whole chain, len of tail */
    for (p = last_unsent->p; p; p = p->next) {
 8031000:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8031002:	685b      	ldr	r3, [r3, #4]
 8031004:	62fb      	str	r3, [r7, #44]	; 0x2c
 8031006:	e01e      	b.n	8031046 <tcp_write+0x4d2>
      p->tot_len += oversize_used;
 8031008:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 803100a:	891a      	ldrh	r2, [r3, #8]
 803100c:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 803100e:	4413      	add	r3, r2
 8031010:	b29a      	uxth	r2, r3
 8031012:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8031014:	811a      	strh	r2, [r3, #8]
      if (p->next == NULL) {
 8031016:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8031018:	681b      	ldr	r3, [r3, #0]
 803101a:	2b00      	cmp	r3, #0
 803101c:	d110      	bne.n	8031040 <tcp_write+0x4cc>
        TCP_DATA_COPY((char *)p->payload + p->len, arg, oversize_used, last_unsent);
 803101e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8031020:	685b      	ldr	r3, [r3, #4]
 8031022:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8031024:	8952      	ldrh	r2, [r2, #10]
 8031026:	4413      	add	r3, r2
 8031028:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 803102a:	68b9      	ldr	r1, [r7, #8]
 803102c:	4618      	mov	r0, r3
 803102e:	f004 ffa3 	bl	8035f78 <memcpy>
        p->len += oversize_used;
 8031032:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8031034:	895a      	ldrh	r2, [r3, #10]
 8031036:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8031038:	4413      	add	r3, r2
 803103a:	b29a      	uxth	r2, r3
 803103c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 803103e:	815a      	strh	r2, [r3, #10]
    for (p = last_unsent->p; p; p = p->next) {
 8031040:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8031042:	681b      	ldr	r3, [r3, #0]
 8031044:	62fb      	str	r3, [r7, #44]	; 0x2c
 8031046:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8031048:	2b00      	cmp	r3, #0
 803104a:	d1dd      	bne.n	8031008 <tcp_write+0x494>
      }
    }
    last_unsent->len += oversize_used;
 803104c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 803104e:	891a      	ldrh	r2, [r3, #8]
 8031050:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8031052:	4413      	add	r3, r2
 8031054:	b29a      	uxth	r2, r3
 8031056:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8031058:	811a      	strh	r2, [r3, #8]
    LWIP_ASSERT("last_unsent->oversize_left >= oversize_used",
                last_unsent->oversize_left >= oversize_used);
    last_unsent->oversize_left -= oversize_used;
#endif /* TCP_OVERSIZE_DBGCHECK */
  }
  pcb->unsent_oversize = oversize;
 803105a:	8a7a      	ldrh	r2, [r7, #18]
 803105c:	68fb      	ldr	r3, [r7, #12]
 803105e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /*
   * Phase 2: concat_p can be concatenated onto last_unsent->p, unless we
   * determined that the last ROM pbuf can be extended to include the new data.
   */
  if (concat_p != NULL) {
 8031062:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8031064:	2b00      	cmp	r3, #0
 8031066:	d018      	beq.n	803109a <tcp_write+0x526>
    LWIP_ASSERT("tcp_write: cannot concatenate when pcb->unsent is empty",
 8031068:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 803106a:	2b00      	cmp	r3, #0
 803106c:	d106      	bne.n	803107c <tcp_write+0x508>
 803106e:	4b2a      	ldr	r3, [pc, #168]	; (8031118 <tcp_write+0x5a4>)
 8031070:	f44f 7238 	mov.w	r2, #736	; 0x2e0
 8031074:	492d      	ldr	r1, [pc, #180]	; (803112c <tcp_write+0x5b8>)
 8031076:	482a      	ldr	r0, [pc, #168]	; (8031120 <tcp_write+0x5ac>)
 8031078:	f005 f88e 	bl	8036198 <iprintf>
                (last_unsent != NULL));
    pbuf_cat(last_unsent->p, concat_p);
 803107c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 803107e:	685b      	ldr	r3, [r3, #4]
 8031080:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8031082:	4618      	mov	r0, r3
 8031084:	f7fa ffd8 	bl	802c038 <pbuf_cat>
    last_unsent->len += concat_p->tot_len;
 8031088:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 803108a:	891a      	ldrh	r2, [r3, #8]
 803108c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 803108e:	891b      	ldrh	r3, [r3, #8]
 8031090:	4413      	add	r3, r2
 8031092:	b29a      	uxth	r2, r3
 8031094:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8031096:	811a      	strh	r2, [r3, #8]
 8031098:	e037      	b.n	803110a <tcp_write+0x596>
  } else if (extendlen > 0) {
 803109a:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 803109c:	2b00      	cmp	r3, #0
 803109e:	d034      	beq.n	803110a <tcp_write+0x596>
    struct pbuf *p;
    LWIP_ASSERT("tcp_write: extension of reference requires reference",
 80310a0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80310a2:	2b00      	cmp	r3, #0
 80310a4:	d003      	beq.n	80310ae <tcp_write+0x53a>
 80310a6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80310a8:	685b      	ldr	r3, [r3, #4]
 80310aa:	2b00      	cmp	r3, #0
 80310ac:	d106      	bne.n	80310bc <tcp_write+0x548>
 80310ae:	4b1a      	ldr	r3, [pc, #104]	; (8031118 <tcp_write+0x5a4>)
 80310b0:	f240 22e6 	movw	r2, #742	; 0x2e6
 80310b4:	491e      	ldr	r1, [pc, #120]	; (8031130 <tcp_write+0x5bc>)
 80310b6:	481a      	ldr	r0, [pc, #104]	; (8031120 <tcp_write+0x5ac>)
 80310b8:	f005 f86e 	bl	8036198 <iprintf>
                last_unsent != NULL && last_unsent->p != NULL);
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 80310bc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80310be:	685b      	ldr	r3, [r3, #4]
 80310c0:	62bb      	str	r3, [r7, #40]	; 0x28
 80310c2:	e009      	b.n	80310d8 <tcp_write+0x564>
      p->tot_len += extendlen;
 80310c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80310c6:	891a      	ldrh	r2, [r3, #8]
 80310c8:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80310ca:	4413      	add	r3, r2
 80310cc:	b29a      	uxth	r2, r3
 80310ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80310d0:	811a      	strh	r2, [r3, #8]
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 80310d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80310d4:	681b      	ldr	r3, [r3, #0]
 80310d6:	62bb      	str	r3, [r7, #40]	; 0x28
 80310d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80310da:	681b      	ldr	r3, [r3, #0]
 80310dc:	2b00      	cmp	r3, #0
 80310de:	d1f1      	bne.n	80310c4 <tcp_write+0x550>
    }
    p->tot_len += extendlen;
 80310e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80310e2:	891a      	ldrh	r2, [r3, #8]
 80310e4:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80310e6:	4413      	add	r3, r2
 80310e8:	b29a      	uxth	r2, r3
 80310ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80310ec:	811a      	strh	r2, [r3, #8]
    p->len += extendlen;
 80310ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80310f0:	895a      	ldrh	r2, [r3, #10]
 80310f2:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80310f4:	4413      	add	r3, r2
 80310f6:	b29a      	uxth	r2, r3
 80310f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80310fa:	815a      	strh	r2, [r3, #10]
    last_unsent->len += extendlen;
 80310fc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80310fe:	891a      	ldrh	r2, [r3, #8]
 8031100:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8031102:	4413      	add	r3, r2
 8031104:	b29a      	uxth	r2, r3
 8031106:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8031108:	811a      	strh	r2, [r3, #8]

  /*
   * Phase 3: Append queue to pcb->unsent. Queue may be NULL, but that
   * is harmless
   */
  if (last_unsent == NULL) {
 803110a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 803110c:	2b00      	cmp	r3, #0
 803110e:	d111      	bne.n	8031134 <tcp_write+0x5c0>
    pcb->unsent = queue;
 8031110:	68fb      	ldr	r3, [r7, #12]
 8031112:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8031114:	66da      	str	r2, [r3, #108]	; 0x6c
 8031116:	e010      	b.n	803113a <tcp_write+0x5c6>
 8031118:	08039728 	.word	0x08039728
 803111c:	080399c8 	.word	0x080399c8
 8031120:	0803977c 	.word	0x0803977c
 8031124:	08039a08 	.word	0x08039a08
 8031128:	08039a18 	.word	0x08039a18
 803112c:	08039a2c 	.word	0x08039a2c
 8031130:	08039a64 	.word	0x08039a64
  } else {
    last_unsent->next = queue;
 8031134:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8031136:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8031138:	601a      	str	r2, [r3, #0]
  }

  /*
   * Finally update the pcb state.
   */
  pcb->snd_lbb += len;
 803113a:	68fb      	ldr	r3, [r7, #12]
 803113c:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 803113e:	88fb      	ldrh	r3, [r7, #6]
 8031140:	441a      	add	r2, r3
 8031142:	68fb      	ldr	r3, [r7, #12]
 8031144:	65da      	str	r2, [r3, #92]	; 0x5c
  pcb->snd_buf -= len;
 8031146:	68fb      	ldr	r3, [r7, #12]
 8031148:	f8b3 2064 	ldrh.w	r2, [r3, #100]	; 0x64
 803114c:	88fb      	ldrh	r3, [r7, #6]
 803114e:	1ad3      	subs	r3, r2, r3
 8031150:	b29a      	uxth	r2, r3
 8031152:	68fb      	ldr	r3, [r7, #12]
 8031154:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
  pcb->snd_queuelen = queuelen;
 8031158:	68fb      	ldr	r3, [r7, #12]
 803115a:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 803115e:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_write: %"S16_F" (after enqueued)\n",
                               pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 8031162:	68fb      	ldr	r3, [r7, #12]
 8031164:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8031168:	2b00      	cmp	r3, #0
 803116a:	d00e      	beq.n	803118a <tcp_write+0x616>
    LWIP_ASSERT("tcp_write: valid queue length",
 803116c:	68fb      	ldr	r3, [r7, #12]
 803116e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8031170:	2b00      	cmp	r3, #0
 8031172:	d10a      	bne.n	803118a <tcp_write+0x616>
 8031174:	68fb      	ldr	r3, [r7, #12]
 8031176:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8031178:	2b00      	cmp	r3, #0
 803117a:	d106      	bne.n	803118a <tcp_write+0x616>
 803117c:	4b30      	ldr	r3, [pc, #192]	; (8031240 <tcp_write+0x6cc>)
 803117e:	f240 3212 	movw	r2, #786	; 0x312
 8031182:	4930      	ldr	r1, [pc, #192]	; (8031244 <tcp_write+0x6d0>)
 8031184:	4830      	ldr	r0, [pc, #192]	; (8031248 <tcp_write+0x6d4>)
 8031186:	f005 f807 	bl	8036198 <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  /* Set the PSH flag in the last segment that we enqueued. */
  if (seg != NULL && seg->tcphdr != NULL && ((apiflags & TCP_WRITE_FLAG_MORE) == 0)) {
 803118a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 803118c:	2b00      	cmp	r3, #0
 803118e:	d016      	beq.n	80311be <tcp_write+0x64a>
 8031190:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8031192:	68db      	ldr	r3, [r3, #12]
 8031194:	2b00      	cmp	r3, #0
 8031196:	d012      	beq.n	80311be <tcp_write+0x64a>
 8031198:	797b      	ldrb	r3, [r7, #5]
 803119a:	f003 0302 	and.w	r3, r3, #2
 803119e:	2b00      	cmp	r3, #0
 80311a0:	d10d      	bne.n	80311be <tcp_write+0x64a>
    TCPH_SET_FLAG(seg->tcphdr, TCP_PSH);
 80311a2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80311a4:	68db      	ldr	r3, [r3, #12]
 80311a6:	899b      	ldrh	r3, [r3, #12]
 80311a8:	b29c      	uxth	r4, r3
 80311aa:	2008      	movs	r0, #8
 80311ac:	f7f9 f9b4 	bl	802a518 <lwip_htons>
 80311b0:	4603      	mov	r3, r0
 80311b2:	461a      	mov	r2, r3
 80311b4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80311b6:	68db      	ldr	r3, [r3, #12]
 80311b8:	4322      	orrs	r2, r4
 80311ba:	b292      	uxth	r2, r2
 80311bc:	819a      	strh	r2, [r3, #12]
  }

  return ERR_OK;
 80311be:	2300      	movs	r3, #0
 80311c0:	e039      	b.n	8031236 <tcp_write+0x6c2>
          goto memerr;
 80311c2:	bf00      	nop
 80311c4:	e006      	b.n	80311d4 <tcp_write+0x660>
            goto memerr;
 80311c6:	bf00      	nop
 80311c8:	e004      	b.n	80311d4 <tcp_write+0x660>
        goto memerr;
 80311ca:	bf00      	nop
 80311cc:	e002      	b.n	80311d4 <tcp_write+0x660>
        goto memerr;
 80311ce:	bf00      	nop
 80311d0:	e000      	b.n	80311d4 <tcp_write+0x660>
      goto memerr;
 80311d2:	bf00      	nop
memerr:
  tcp_set_flags(pcb, TF_NAGLEMEMERR);
 80311d4:	68fb      	ldr	r3, [r7, #12]
 80311d6:	8b5b      	ldrh	r3, [r3, #26]
 80311d8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80311dc:	b29a      	uxth	r2, r3
 80311de:	68fb      	ldr	r3, [r7, #12]
 80311e0:	835a      	strh	r2, [r3, #26]
  TCP_STATS_INC(tcp.memerr);
 80311e2:	4b1a      	ldr	r3, [pc, #104]	; (803124c <tcp_write+0x6d8>)
 80311e4:	f8b3 309c 	ldrh.w	r3, [r3, #156]	; 0x9c
 80311e8:	3301      	adds	r3, #1
 80311ea:	b29a      	uxth	r2, r3
 80311ec:	4b17      	ldr	r3, [pc, #92]	; (803124c <tcp_write+0x6d8>)
 80311ee:	f8a3 209c 	strh.w	r2, [r3, #156]	; 0x9c

  if (concat_p != NULL) {
 80311f2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80311f4:	2b00      	cmp	r3, #0
 80311f6:	d002      	beq.n	80311fe <tcp_write+0x68a>
    pbuf_free(concat_p);
 80311f8:	6d78      	ldr	r0, [r7, #84]	; 0x54
 80311fa:	f7fa fe4f 	bl	802be9c <pbuf_free>
  }
  if (queue != NULL) {
 80311fe:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8031200:	2b00      	cmp	r3, #0
 8031202:	d002      	beq.n	803120a <tcp_write+0x696>
    tcp_segs_free(queue);
 8031204:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8031206:	f7fc fabf 	bl	802d788 <tcp_segs_free>
  }
  if (pcb->snd_queuelen != 0) {
 803120a:	68fb      	ldr	r3, [r7, #12]
 803120c:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8031210:	2b00      	cmp	r3, #0
 8031212:	d00e      	beq.n	8031232 <tcp_write+0x6be>
    LWIP_ASSERT("tcp_write: valid queue length", pcb->unacked != NULL ||
 8031214:	68fb      	ldr	r3, [r7, #12]
 8031216:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8031218:	2b00      	cmp	r3, #0
 803121a:	d10a      	bne.n	8031232 <tcp_write+0x6be>
 803121c:	68fb      	ldr	r3, [r7, #12]
 803121e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8031220:	2b00      	cmp	r3, #0
 8031222:	d106      	bne.n	8031232 <tcp_write+0x6be>
 8031224:	4b06      	ldr	r3, [pc, #24]	; (8031240 <tcp_write+0x6cc>)
 8031226:	f240 3227 	movw	r2, #807	; 0x327
 803122a:	4906      	ldr	r1, [pc, #24]	; (8031244 <tcp_write+0x6d0>)
 803122c:	4806      	ldr	r0, [pc, #24]	; (8031248 <tcp_write+0x6d4>)
 803122e:	f004 ffb3 	bl	8036198 <iprintf>
                pcb->unsent != NULL);
  }
  LWIP_DEBUGF(TCP_QLEN_DEBUG | LWIP_DBG_STATE, ("tcp_write: %"S16_F" (with mem err)\n", pcb->snd_queuelen));
  return ERR_MEM;
 8031232:	f04f 33ff 	mov.w	r3, #4294967295
}
 8031236:	4618      	mov	r0, r3
 8031238:	375c      	adds	r7, #92	; 0x5c
 803123a:	46bd      	mov	sp, r7
 803123c:	bd90      	pop	{r4, r7, pc}
 803123e:	bf00      	nop
 8031240:	08039728 	.word	0x08039728
 8031244:	08039a9c 	.word	0x08039a9c
 8031248:	0803977c 	.word	0x0803977c
 803124c:	2000ed10 	.word	0x2000ed10

08031250 <tcp_split_unsent_seg>:
 * @param pcb the tcp_pcb for which to split the unsent head
 * @param split the amount of payload to remain in the head
 */
err_t
tcp_split_unsent_seg(struct tcp_pcb *pcb, u16_t split)
{
 8031250:	b590      	push	{r4, r7, lr}
 8031252:	b08b      	sub	sp, #44	; 0x2c
 8031254:	af02      	add	r7, sp, #8
 8031256:	6078      	str	r0, [r7, #4]
 8031258:	460b      	mov	r3, r1
 803125a:	807b      	strh	r3, [r7, #2]
  struct tcp_seg *seg = NULL, *useg = NULL;
 803125c:	2300      	movs	r3, #0
 803125e:	61fb      	str	r3, [r7, #28]
 8031260:	2300      	movs	r3, #0
 8031262:	617b      	str	r3, [r7, #20]
  struct pbuf *p = NULL;
 8031264:	2300      	movs	r3, #0
 8031266:	613b      	str	r3, [r7, #16]
  u16_t chksum = 0;
  u8_t chksum_swapped = 0;
  struct pbuf *q;
#endif /* TCP_CHECKSUM_ON_COPY */

  LWIP_ASSERT("tcp_split_unsent_seg: invalid pcb", pcb != NULL);
 8031268:	687b      	ldr	r3, [r7, #4]
 803126a:	2b00      	cmp	r3, #0
 803126c:	d106      	bne.n	803127c <tcp_split_unsent_seg+0x2c>
 803126e:	4b99      	ldr	r3, [pc, #612]	; (80314d4 <tcp_split_unsent_seg+0x284>)
 8031270:	f240 324b 	movw	r2, #843	; 0x34b
 8031274:	4998      	ldr	r1, [pc, #608]	; (80314d8 <tcp_split_unsent_seg+0x288>)
 8031276:	4899      	ldr	r0, [pc, #612]	; (80314dc <tcp_split_unsent_seg+0x28c>)
 8031278:	f004 ff8e 	bl	8036198 <iprintf>

  useg = pcb->unsent;
 803127c:	687b      	ldr	r3, [r7, #4]
 803127e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8031280:	617b      	str	r3, [r7, #20]
  if (useg == NULL) {
 8031282:	697b      	ldr	r3, [r7, #20]
 8031284:	2b00      	cmp	r3, #0
 8031286:	d102      	bne.n	803128e <tcp_split_unsent_seg+0x3e>
    return ERR_MEM;
 8031288:	f04f 33ff 	mov.w	r3, #4294967295
 803128c:	e11e      	b.n	80314cc <tcp_split_unsent_seg+0x27c>
  }

  if (split == 0) {
 803128e:	887b      	ldrh	r3, [r7, #2]
 8031290:	2b00      	cmp	r3, #0
 8031292:	d109      	bne.n	80312a8 <tcp_split_unsent_seg+0x58>
    LWIP_ASSERT("Can't split segment into length 0", 0);
 8031294:	4b8f      	ldr	r3, [pc, #572]	; (80314d4 <tcp_split_unsent_seg+0x284>)
 8031296:	f240 3253 	movw	r2, #851	; 0x353
 803129a:	4991      	ldr	r1, [pc, #580]	; (80314e0 <tcp_split_unsent_seg+0x290>)
 803129c:	488f      	ldr	r0, [pc, #572]	; (80314dc <tcp_split_unsent_seg+0x28c>)
 803129e:	f004 ff7b 	bl	8036198 <iprintf>
    return ERR_VAL;
 80312a2:	f06f 0305 	mvn.w	r3, #5
 80312a6:	e111      	b.n	80314cc <tcp_split_unsent_seg+0x27c>
  }

  if (useg->len <= split) {
 80312a8:	697b      	ldr	r3, [r7, #20]
 80312aa:	891b      	ldrh	r3, [r3, #8]
 80312ac:	887a      	ldrh	r2, [r7, #2]
 80312ae:	429a      	cmp	r2, r3
 80312b0:	d301      	bcc.n	80312b6 <tcp_split_unsent_seg+0x66>
    return ERR_OK;
 80312b2:	2300      	movs	r3, #0
 80312b4:	e10a      	b.n	80314cc <tcp_split_unsent_seg+0x27c>
  }

  LWIP_ASSERT("split <= mss", split <= pcb->mss);
 80312b6:	687b      	ldr	r3, [r7, #4]
 80312b8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80312ba:	887a      	ldrh	r2, [r7, #2]
 80312bc:	429a      	cmp	r2, r3
 80312be:	d906      	bls.n	80312ce <tcp_split_unsent_seg+0x7e>
 80312c0:	4b84      	ldr	r3, [pc, #528]	; (80314d4 <tcp_split_unsent_seg+0x284>)
 80312c2:	f240 325b 	movw	r2, #859	; 0x35b
 80312c6:	4987      	ldr	r1, [pc, #540]	; (80314e4 <tcp_split_unsent_seg+0x294>)
 80312c8:	4884      	ldr	r0, [pc, #528]	; (80314dc <tcp_split_unsent_seg+0x28c>)
 80312ca:	f004 ff65 	bl	8036198 <iprintf>
  LWIP_ASSERT("useg->len > 0", useg->len > 0);
 80312ce:	697b      	ldr	r3, [r7, #20]
 80312d0:	891b      	ldrh	r3, [r3, #8]
 80312d2:	2b00      	cmp	r3, #0
 80312d4:	d106      	bne.n	80312e4 <tcp_split_unsent_seg+0x94>
 80312d6:	4b7f      	ldr	r3, [pc, #508]	; (80314d4 <tcp_split_unsent_seg+0x284>)
 80312d8:	f44f 7257 	mov.w	r2, #860	; 0x35c
 80312dc:	4982      	ldr	r1, [pc, #520]	; (80314e8 <tcp_split_unsent_seg+0x298>)
 80312de:	487f      	ldr	r0, [pc, #508]	; (80314dc <tcp_split_unsent_seg+0x28c>)
 80312e0:	f004 ff5a 	bl	8036198 <iprintf>
   * to split this packet so we may actually exceed the max value by
   * one!
   */
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue: split_unsent_seg: %u\n", (unsigned int)pcb->snd_queuelen));

  optflags = useg->flags;
 80312e4:	697b      	ldr	r3, [r7, #20]
 80312e6:	7a9b      	ldrb	r3, [r3, #10]
 80312e8:	73fb      	strb	r3, [r7, #15]
#if TCP_CHECKSUM_ON_COPY
  /* Remove since checksum is not stored until after tcp_create_segment() */
  optflags &= ~TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */
  optlen = LWIP_TCP_OPT_LENGTH(optflags);
 80312ea:	7bfb      	ldrb	r3, [r7, #15]
 80312ec:	009b      	lsls	r3, r3, #2
 80312ee:	b2db      	uxtb	r3, r3
 80312f0:	f003 0304 	and.w	r3, r3, #4
 80312f4:	73bb      	strb	r3, [r7, #14]
  remainder = useg->len - split;
 80312f6:	697b      	ldr	r3, [r7, #20]
 80312f8:	891a      	ldrh	r2, [r3, #8]
 80312fa:	887b      	ldrh	r3, [r7, #2]
 80312fc:	1ad3      	subs	r3, r2, r3
 80312fe:	81bb      	strh	r3, [r7, #12]

  /* Create new pbuf for the remainder of the split */
  p = pbuf_alloc(PBUF_TRANSPORT, remainder + optlen, PBUF_RAM);
 8031300:	7bbb      	ldrb	r3, [r7, #14]
 8031302:	b29a      	uxth	r2, r3
 8031304:	89bb      	ldrh	r3, [r7, #12]
 8031306:	4413      	add	r3, r2
 8031308:	b29b      	uxth	r3, r3
 803130a:	f44f 7220 	mov.w	r2, #640	; 0x280
 803130e:	4619      	mov	r1, r3
 8031310:	2036      	movs	r0, #54	; 0x36
 8031312:	f7fa fadf 	bl	802b8d4 <pbuf_alloc>
 8031316:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 8031318:	693b      	ldr	r3, [r7, #16]
 803131a:	2b00      	cmp	r3, #0
 803131c:	f000 80b7 	beq.w	803148e <tcp_split_unsent_seg+0x23e>
                ("tcp_split_unsent_seg: could not allocate memory for pbuf remainder %u\n", remainder));
    goto memerr;
  }

  /* Offset into the original pbuf is past TCP/IP headers, options, and split amount */
  offset = useg->p->tot_len - useg->len + split;
 8031320:	697b      	ldr	r3, [r7, #20]
 8031322:	685b      	ldr	r3, [r3, #4]
 8031324:	891a      	ldrh	r2, [r3, #8]
 8031326:	697b      	ldr	r3, [r7, #20]
 8031328:	891b      	ldrh	r3, [r3, #8]
 803132a:	1ad3      	subs	r3, r2, r3
 803132c:	b29a      	uxth	r2, r3
 803132e:	887b      	ldrh	r3, [r7, #2]
 8031330:	4413      	add	r3, r2
 8031332:	817b      	strh	r3, [r7, #10]
  /* Copy remainder into new pbuf, headers and options will not be filled out */
  if (pbuf_copy_partial(useg->p, (u8_t *)p->payload + optlen, remainder, offset ) != remainder) {
 8031334:	697b      	ldr	r3, [r7, #20]
 8031336:	6858      	ldr	r0, [r3, #4]
 8031338:	693b      	ldr	r3, [r7, #16]
 803133a:	685a      	ldr	r2, [r3, #4]
 803133c:	7bbb      	ldrb	r3, [r7, #14]
 803133e:	18d1      	adds	r1, r2, r3
 8031340:	897b      	ldrh	r3, [r7, #10]
 8031342:	89ba      	ldrh	r2, [r7, #12]
 8031344:	f7fa ffa0 	bl	802c288 <pbuf_copy_partial>
 8031348:	4603      	mov	r3, r0
 803134a:	461a      	mov	r2, r3
 803134c:	89bb      	ldrh	r3, [r7, #12]
 803134e:	4293      	cmp	r3, r2
 8031350:	f040 809f 	bne.w	8031492 <tcp_split_unsent_seg+0x242>
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Options are created when calling tcp_output() */

  /* Migrate flags from original segment */
  split_flags = TCPH_FLAGS(useg->tcphdr);
 8031354:	697b      	ldr	r3, [r7, #20]
 8031356:	68db      	ldr	r3, [r3, #12]
 8031358:	899b      	ldrh	r3, [r3, #12]
 803135a:	b29b      	uxth	r3, r3
 803135c:	4618      	mov	r0, r3
 803135e:	f7f9 f8db 	bl	802a518 <lwip_htons>
 8031362:	4603      	mov	r3, r0
 8031364:	b2db      	uxtb	r3, r3
 8031366:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 803136a:	76fb      	strb	r3, [r7, #27]
  remainder_flags = 0; /* ACK added in tcp_output() */
 803136c:	2300      	movs	r3, #0
 803136e:	76bb      	strb	r3, [r7, #26]

  if (split_flags & TCP_PSH) {
 8031370:	7efb      	ldrb	r3, [r7, #27]
 8031372:	f003 0308 	and.w	r3, r3, #8
 8031376:	2b00      	cmp	r3, #0
 8031378:	d007      	beq.n	803138a <tcp_split_unsent_seg+0x13a>
    split_flags &= ~TCP_PSH;
 803137a:	7efb      	ldrb	r3, [r7, #27]
 803137c:	f023 0308 	bic.w	r3, r3, #8
 8031380:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_PSH;
 8031382:	7ebb      	ldrb	r3, [r7, #26]
 8031384:	f043 0308 	orr.w	r3, r3, #8
 8031388:	76bb      	strb	r3, [r7, #26]
  }
  if (split_flags & TCP_FIN) {
 803138a:	7efb      	ldrb	r3, [r7, #27]
 803138c:	f003 0301 	and.w	r3, r3, #1
 8031390:	2b00      	cmp	r3, #0
 8031392:	d007      	beq.n	80313a4 <tcp_split_unsent_seg+0x154>
    split_flags &= ~TCP_FIN;
 8031394:	7efb      	ldrb	r3, [r7, #27]
 8031396:	f023 0301 	bic.w	r3, r3, #1
 803139a:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_FIN;
 803139c:	7ebb      	ldrb	r3, [r7, #26]
 803139e:	f043 0301 	orr.w	r3, r3, #1
 80313a2:	76bb      	strb	r3, [r7, #26]
  }
  /* SYN should be left on split, RST should not be present with data */

  seg = tcp_create_segment(pcb, p, remainder_flags, lwip_ntohl(useg->tcphdr->seqno) + split, optflags);
 80313a4:	697b      	ldr	r3, [r7, #20]
 80313a6:	68db      	ldr	r3, [r3, #12]
 80313a8:	685b      	ldr	r3, [r3, #4]
 80313aa:	4618      	mov	r0, r3
 80313ac:	f7f9 f8c9 	bl	802a542 <lwip_htonl>
 80313b0:	4602      	mov	r2, r0
 80313b2:	887b      	ldrh	r3, [r7, #2]
 80313b4:	18d1      	adds	r1, r2, r3
 80313b6:	7eba      	ldrb	r2, [r7, #26]
 80313b8:	7bfb      	ldrb	r3, [r7, #15]
 80313ba:	9300      	str	r3, [sp, #0]
 80313bc:	460b      	mov	r3, r1
 80313be:	6939      	ldr	r1, [r7, #16]
 80313c0:	6878      	ldr	r0, [r7, #4]
 80313c2:	f7ff fa31 	bl	8030828 <tcp_create_segment>
 80313c6:	61f8      	str	r0, [r7, #28]
  if (seg == NULL) {
 80313c8:	69fb      	ldr	r3, [r7, #28]
 80313ca:	2b00      	cmp	r3, #0
 80313cc:	d063      	beq.n	8031496 <tcp_split_unsent_seg+0x246>
  seg->chksum_swapped = chksum_swapped;
  seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Remove this segment from the queue since trimming it may free pbufs */
  pcb->snd_queuelen -= pbuf_clen(useg->p);
 80313ce:	697b      	ldr	r3, [r7, #20]
 80313d0:	685b      	ldr	r3, [r3, #4]
 80313d2:	4618      	mov	r0, r3
 80313d4:	f7fa fdf0 	bl	802bfb8 <pbuf_clen>
 80313d8:	4603      	mov	r3, r0
 80313da:	461a      	mov	r2, r3
 80313dc:	687b      	ldr	r3, [r7, #4]
 80313de:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 80313e2:	1a9b      	subs	r3, r3, r2
 80313e4:	b29a      	uxth	r2, r3
 80313e6:	687b      	ldr	r3, [r7, #4]
 80313e8:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  /* Trim the original pbuf into our split size.  At this point our remainder segment must be setup
  successfully because we are modifying the original segment */
  pbuf_realloc(useg->p, useg->p->tot_len - remainder);
 80313ec:	697b      	ldr	r3, [r7, #20]
 80313ee:	6858      	ldr	r0, [r3, #4]
 80313f0:	697b      	ldr	r3, [r7, #20]
 80313f2:	685b      	ldr	r3, [r3, #4]
 80313f4:	891a      	ldrh	r2, [r3, #8]
 80313f6:	89bb      	ldrh	r3, [r7, #12]
 80313f8:	1ad3      	subs	r3, r2, r3
 80313fa:	b29b      	uxth	r3, r3
 80313fc:	4619      	mov	r1, r3
 80313fe:	f7fa fbc7 	bl	802bb90 <pbuf_realloc>
  useg->len -= remainder;
 8031402:	697b      	ldr	r3, [r7, #20]
 8031404:	891a      	ldrh	r2, [r3, #8]
 8031406:	89bb      	ldrh	r3, [r7, #12]
 8031408:	1ad3      	subs	r3, r2, r3
 803140a:	b29a      	uxth	r2, r3
 803140c:	697b      	ldr	r3, [r7, #20]
 803140e:	811a      	strh	r2, [r3, #8]
  TCPH_SET_FLAG(useg->tcphdr, split_flags);
 8031410:	697b      	ldr	r3, [r7, #20]
 8031412:	68db      	ldr	r3, [r3, #12]
 8031414:	899b      	ldrh	r3, [r3, #12]
 8031416:	b29c      	uxth	r4, r3
 8031418:	7efb      	ldrb	r3, [r7, #27]
 803141a:	b29b      	uxth	r3, r3
 803141c:	4618      	mov	r0, r3
 803141e:	f7f9 f87b 	bl	802a518 <lwip_htons>
 8031422:	4603      	mov	r3, r0
 8031424:	461a      	mov	r2, r3
 8031426:	697b      	ldr	r3, [r7, #20]
 8031428:	68db      	ldr	r3, [r3, #12]
 803142a:	4322      	orrs	r2, r4
 803142c:	b292      	uxth	r2, r2
 803142e:	819a      	strh	r2, [r3, #12]
  /* By trimming, realloc may have actually shrunk the pbuf, so clear oversize_left */
  useg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */

  /* Add back to the queue with new trimmed pbuf */
  pcb->snd_queuelen += pbuf_clen(useg->p);
 8031430:	697b      	ldr	r3, [r7, #20]
 8031432:	685b      	ldr	r3, [r3, #4]
 8031434:	4618      	mov	r0, r3
 8031436:	f7fa fdbf 	bl	802bfb8 <pbuf_clen>
 803143a:	4603      	mov	r3, r0
 803143c:	461a      	mov	r2, r3
 803143e:	687b      	ldr	r3, [r7, #4]
 8031440:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8031444:	4413      	add	r3, r2
 8031446:	b29a      	uxth	r2, r3
 8031448:	687b      	ldr	r3, [r7, #4]
 803144a:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Update number of segments on the queues. Note that length now may
   * exceed TCP_SND_QUEUELEN! We don't have to touch pcb->snd_buf
   * because the total amount of data is constant when packet is split */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 803144e:	69fb      	ldr	r3, [r7, #28]
 8031450:	685b      	ldr	r3, [r3, #4]
 8031452:	4618      	mov	r0, r3
 8031454:	f7fa fdb0 	bl	802bfb8 <pbuf_clen>
 8031458:	4603      	mov	r3, r0
 803145a:	461a      	mov	r2, r3
 803145c:	687b      	ldr	r3, [r7, #4]
 803145e:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8031462:	4413      	add	r3, r2
 8031464:	b29a      	uxth	r2, r3
 8031466:	687b      	ldr	r3, [r7, #4]
 8031468:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  /* Finally insert remainder into queue after split (which stays head) */
  seg->next = useg->next;
 803146c:	697b      	ldr	r3, [r7, #20]
 803146e:	681a      	ldr	r2, [r3, #0]
 8031470:	69fb      	ldr	r3, [r7, #28]
 8031472:	601a      	str	r2, [r3, #0]
  useg->next = seg;
 8031474:	697b      	ldr	r3, [r7, #20]
 8031476:	69fa      	ldr	r2, [r7, #28]
 8031478:	601a      	str	r2, [r3, #0]

#if TCP_OVERSIZE
  /* If remainder is last segment on the unsent, ensure we clear the oversize amount
   * because the remainder is always sized to the exact remaining amount */
  if (seg->next == NULL) {
 803147a:	69fb      	ldr	r3, [r7, #28]
 803147c:	681b      	ldr	r3, [r3, #0]
 803147e:	2b00      	cmp	r3, #0
 8031480:	d103      	bne.n	803148a <tcp_split_unsent_seg+0x23a>
    pcb->unsent_oversize = 0;
 8031482:	687b      	ldr	r3, [r7, #4]
 8031484:	2200      	movs	r2, #0
 8031486:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  }
#endif /* TCP_OVERSIZE */

  return ERR_OK;
 803148a:	2300      	movs	r3, #0
 803148c:	e01e      	b.n	80314cc <tcp_split_unsent_seg+0x27c>
    goto memerr;
 803148e:	bf00      	nop
 8031490:	e002      	b.n	8031498 <tcp_split_unsent_seg+0x248>
    goto memerr;
 8031492:	bf00      	nop
 8031494:	e000      	b.n	8031498 <tcp_split_unsent_seg+0x248>
    goto memerr;
 8031496:	bf00      	nop
memerr:
  TCP_STATS_INC(tcp.memerr);
 8031498:	4b14      	ldr	r3, [pc, #80]	; (80314ec <tcp_split_unsent_seg+0x29c>)
 803149a:	f8b3 309c 	ldrh.w	r3, [r3, #156]	; 0x9c
 803149e:	3301      	adds	r3, #1
 80314a0:	b29a      	uxth	r2, r3
 80314a2:	4b12      	ldr	r3, [pc, #72]	; (80314ec <tcp_split_unsent_seg+0x29c>)
 80314a4:	f8a3 209c 	strh.w	r2, [r3, #156]	; 0x9c

  LWIP_ASSERT("seg == NULL", seg == NULL);
 80314a8:	69fb      	ldr	r3, [r7, #28]
 80314aa:	2b00      	cmp	r3, #0
 80314ac:	d006      	beq.n	80314bc <tcp_split_unsent_seg+0x26c>
 80314ae:	4b09      	ldr	r3, [pc, #36]	; (80314d4 <tcp_split_unsent_seg+0x284>)
 80314b0:	f44f 7276 	mov.w	r2, #984	; 0x3d8
 80314b4:	490e      	ldr	r1, [pc, #56]	; (80314f0 <tcp_split_unsent_seg+0x2a0>)
 80314b6:	4809      	ldr	r0, [pc, #36]	; (80314dc <tcp_split_unsent_seg+0x28c>)
 80314b8:	f004 fe6e 	bl	8036198 <iprintf>
  if (p != NULL) {
 80314bc:	693b      	ldr	r3, [r7, #16]
 80314be:	2b00      	cmp	r3, #0
 80314c0:	d002      	beq.n	80314c8 <tcp_split_unsent_seg+0x278>
    pbuf_free(p);
 80314c2:	6938      	ldr	r0, [r7, #16]
 80314c4:	f7fa fcea 	bl	802be9c <pbuf_free>
  }

  return ERR_MEM;
 80314c8:	f04f 33ff 	mov.w	r3, #4294967295
}
 80314cc:	4618      	mov	r0, r3
 80314ce:	3724      	adds	r7, #36	; 0x24
 80314d0:	46bd      	mov	sp, r7
 80314d2:	bd90      	pop	{r4, r7, pc}
 80314d4:	08039728 	.word	0x08039728
 80314d8:	08039abc 	.word	0x08039abc
 80314dc:	0803977c 	.word	0x0803977c
 80314e0:	08039ae0 	.word	0x08039ae0
 80314e4:	08039b04 	.word	0x08039b04
 80314e8:	08039b14 	.word	0x08039b14
 80314ec:	2000ed10 	.word	0x2000ed10
 80314f0:	08039b24 	.word	0x08039b24

080314f4 <tcp_send_fin>:
 * @param pcb the tcp_pcb over which to send a segment
 * @return ERR_OK if sent, another err_t otherwise
 */
err_t
tcp_send_fin(struct tcp_pcb *pcb)
{
 80314f4:	b590      	push	{r4, r7, lr}
 80314f6:	b085      	sub	sp, #20
 80314f8:	af00      	add	r7, sp, #0
 80314fa:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_send_fin: invalid pcb", pcb != NULL);
 80314fc:	687b      	ldr	r3, [r7, #4]
 80314fe:	2b00      	cmp	r3, #0
 8031500:	d106      	bne.n	8031510 <tcp_send_fin+0x1c>
 8031502:	4b21      	ldr	r3, [pc, #132]	; (8031588 <tcp_send_fin+0x94>)
 8031504:	f240 32eb 	movw	r2, #1003	; 0x3eb
 8031508:	4920      	ldr	r1, [pc, #128]	; (803158c <tcp_send_fin+0x98>)
 803150a:	4821      	ldr	r0, [pc, #132]	; (8031590 <tcp_send_fin+0x9c>)
 803150c:	f004 fe44 	bl	8036198 <iprintf>

  /* first, try to add the fin to the last unsent segment */
  if (pcb->unsent != NULL) {
 8031510:	687b      	ldr	r3, [r7, #4]
 8031512:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8031514:	2b00      	cmp	r3, #0
 8031516:	d02e      	beq.n	8031576 <tcp_send_fin+0x82>
    struct tcp_seg *last_unsent;
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 8031518:	687b      	ldr	r3, [r7, #4]
 803151a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 803151c:	60fb      	str	r3, [r7, #12]
 803151e:	e002      	b.n	8031526 <tcp_send_fin+0x32>
         last_unsent = last_unsent->next);
 8031520:	68fb      	ldr	r3, [r7, #12]
 8031522:	681b      	ldr	r3, [r3, #0]
 8031524:	60fb      	str	r3, [r7, #12]
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 8031526:	68fb      	ldr	r3, [r7, #12]
 8031528:	681b      	ldr	r3, [r3, #0]
 803152a:	2b00      	cmp	r3, #0
 803152c:	d1f8      	bne.n	8031520 <tcp_send_fin+0x2c>

    if ((TCPH_FLAGS(last_unsent->tcphdr) & (TCP_SYN | TCP_FIN | TCP_RST)) == 0) {
 803152e:	68fb      	ldr	r3, [r7, #12]
 8031530:	68db      	ldr	r3, [r3, #12]
 8031532:	899b      	ldrh	r3, [r3, #12]
 8031534:	b29b      	uxth	r3, r3
 8031536:	4618      	mov	r0, r3
 8031538:	f7f8 ffee 	bl	802a518 <lwip_htons>
 803153c:	4603      	mov	r3, r0
 803153e:	b2db      	uxtb	r3, r3
 8031540:	f003 0307 	and.w	r3, r3, #7
 8031544:	2b00      	cmp	r3, #0
 8031546:	d116      	bne.n	8031576 <tcp_send_fin+0x82>
      /* no SYN/FIN/RST flag in the header, we can add the FIN flag */
      TCPH_SET_FLAG(last_unsent->tcphdr, TCP_FIN);
 8031548:	68fb      	ldr	r3, [r7, #12]
 803154a:	68db      	ldr	r3, [r3, #12]
 803154c:	899b      	ldrh	r3, [r3, #12]
 803154e:	b29c      	uxth	r4, r3
 8031550:	2001      	movs	r0, #1
 8031552:	f7f8 ffe1 	bl	802a518 <lwip_htons>
 8031556:	4603      	mov	r3, r0
 8031558:	461a      	mov	r2, r3
 803155a:	68fb      	ldr	r3, [r7, #12]
 803155c:	68db      	ldr	r3, [r3, #12]
 803155e:	4322      	orrs	r2, r4
 8031560:	b292      	uxth	r2, r2
 8031562:	819a      	strh	r2, [r3, #12]
      tcp_set_flags(pcb, TF_FIN);
 8031564:	687b      	ldr	r3, [r7, #4]
 8031566:	8b5b      	ldrh	r3, [r3, #26]
 8031568:	f043 0320 	orr.w	r3, r3, #32
 803156c:	b29a      	uxth	r2, r3
 803156e:	687b      	ldr	r3, [r7, #4]
 8031570:	835a      	strh	r2, [r3, #26]
      return ERR_OK;
 8031572:	2300      	movs	r3, #0
 8031574:	e004      	b.n	8031580 <tcp_send_fin+0x8c>
    }
  }
  /* no data, no length, flags, copy=1, no optdata */
  return tcp_enqueue_flags(pcb, TCP_FIN);
 8031576:	2101      	movs	r1, #1
 8031578:	6878      	ldr	r0, [r7, #4]
 803157a:	f000 f80b 	bl	8031594 <tcp_enqueue_flags>
 803157e:	4603      	mov	r3, r0
}
 8031580:	4618      	mov	r0, r3
 8031582:	3714      	adds	r7, #20
 8031584:	46bd      	mov	sp, r7
 8031586:	bd90      	pop	{r4, r7, pc}
 8031588:	08039728 	.word	0x08039728
 803158c:	08039b30 	.word	0x08039b30
 8031590:	0803977c 	.word	0x0803977c

08031594 <tcp_enqueue_flags>:
 * @param pcb Protocol control block for the TCP connection.
 * @param flags TCP header flags to set in the outgoing segment.
 */
err_t
tcp_enqueue_flags(struct tcp_pcb *pcb, u8_t flags)
{
 8031594:	b580      	push	{r7, lr}
 8031596:	b08a      	sub	sp, #40	; 0x28
 8031598:	af02      	add	r7, sp, #8
 803159a:	6078      	str	r0, [r7, #4]
 803159c:	460b      	mov	r3, r1
 803159e:	70fb      	strb	r3, [r7, #3]
  struct pbuf *p;
  struct tcp_seg *seg;
  u8_t optflags = 0;
 80315a0:	2300      	movs	r3, #0
 80315a2:	77fb      	strb	r3, [r7, #31]
  u8_t optlen = 0;
 80315a4:	2300      	movs	r3, #0
 80315a6:	75fb      	strb	r3, [r7, #23]

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: queuelen: %"U16_F"\n", (u16_t)pcb->snd_queuelen));

  LWIP_ASSERT("tcp_enqueue_flags: need either TCP_SYN or TCP_FIN in flags (programmer violates API)",
 80315a8:	78fb      	ldrb	r3, [r7, #3]
 80315aa:	f003 0303 	and.w	r3, r3, #3
 80315ae:	2b00      	cmp	r3, #0
 80315b0:	d106      	bne.n	80315c0 <tcp_enqueue_flags+0x2c>
 80315b2:	4b6f      	ldr	r3, [pc, #444]	; (8031770 <tcp_enqueue_flags+0x1dc>)
 80315b4:	f240 4211 	movw	r2, #1041	; 0x411
 80315b8:	496e      	ldr	r1, [pc, #440]	; (8031774 <tcp_enqueue_flags+0x1e0>)
 80315ba:	486f      	ldr	r0, [pc, #444]	; (8031778 <tcp_enqueue_flags+0x1e4>)
 80315bc:	f004 fdec 	bl	8036198 <iprintf>
              (flags & (TCP_SYN | TCP_FIN)) != 0);
  LWIP_ASSERT("tcp_enqueue_flags: invalid pcb", pcb != NULL);
 80315c0:	687b      	ldr	r3, [r7, #4]
 80315c2:	2b00      	cmp	r3, #0
 80315c4:	d106      	bne.n	80315d4 <tcp_enqueue_flags+0x40>
 80315c6:	4b6a      	ldr	r3, [pc, #424]	; (8031770 <tcp_enqueue_flags+0x1dc>)
 80315c8:	f240 4213 	movw	r2, #1043	; 0x413
 80315cc:	496b      	ldr	r1, [pc, #428]	; (803177c <tcp_enqueue_flags+0x1e8>)
 80315ce:	486a      	ldr	r0, [pc, #424]	; (8031778 <tcp_enqueue_flags+0x1e4>)
 80315d0:	f004 fde2 	bl	8036198 <iprintf>

  /* No need to check pcb->snd_queuelen if only SYN or FIN are allowed! */

  /* Get options for this segment. This is a special case since this is the
     only place where a SYN can be sent. */
  if (flags & TCP_SYN) {
 80315d4:	78fb      	ldrb	r3, [r7, #3]
 80315d6:	f003 0302 	and.w	r3, r3, #2
 80315da:	2b00      	cmp	r3, #0
 80315dc:	d001      	beq.n	80315e2 <tcp_enqueue_flags+0x4e>
    optflags = TF_SEG_OPTS_MSS;
 80315de:	2301      	movs	r3, #1
 80315e0:	77fb      	strb	r3, [r7, #31]
    /* Make sure the timestamp option is only included in data segments if we
       agreed about it with the remote host (and in active open SYN segments). */
    optflags |= TF_SEG_OPTS_TS;
  }
#endif /* LWIP_TCP_TIMESTAMPS */
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 80315e2:	7ffb      	ldrb	r3, [r7, #31]
 80315e4:	009b      	lsls	r3, r3, #2
 80315e6:	b2db      	uxtb	r3, r3
 80315e8:	f003 0304 	and.w	r3, r3, #4
 80315ec:	75fb      	strb	r3, [r7, #23]

  /* Allocate pbuf with room for TCP header + options */
  if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 80315ee:	7dfb      	ldrb	r3, [r7, #23]
 80315f0:	b29b      	uxth	r3, r3
 80315f2:	f44f 7220 	mov.w	r2, #640	; 0x280
 80315f6:	4619      	mov	r1, r3
 80315f8:	2036      	movs	r0, #54	; 0x36
 80315fa:	f7fa f96b 	bl	802b8d4 <pbuf_alloc>
 80315fe:	6138      	str	r0, [r7, #16]
 8031600:	693b      	ldr	r3, [r7, #16]
 8031602:	2b00      	cmp	r3, #0
 8031604:	d111      	bne.n	803162a <tcp_enqueue_flags+0x96>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8031606:	687b      	ldr	r3, [r7, #4]
 8031608:	8b5b      	ldrh	r3, [r3, #26]
 803160a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 803160e:	b29a      	uxth	r2, r3
 8031610:	687b      	ldr	r3, [r7, #4]
 8031612:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
 8031614:	4b5a      	ldr	r3, [pc, #360]	; (8031780 <tcp_enqueue_flags+0x1ec>)
 8031616:	f8b3 309c 	ldrh.w	r3, [r3, #156]	; 0x9c
 803161a:	3301      	adds	r3, #1
 803161c:	b29a      	uxth	r2, r3
 803161e:	4b58      	ldr	r3, [pc, #352]	; (8031780 <tcp_enqueue_flags+0x1ec>)
 8031620:	f8a3 209c 	strh.w	r2, [r3, #156]	; 0x9c
    return ERR_MEM;
 8031624:	f04f 33ff 	mov.w	r3, #4294967295
 8031628:	e09d      	b.n	8031766 <tcp_enqueue_flags+0x1d2>
  }
  LWIP_ASSERT("tcp_enqueue_flags: check that first pbuf can hold optlen",
 803162a:	693b      	ldr	r3, [r7, #16]
 803162c:	895a      	ldrh	r2, [r3, #10]
 803162e:	7dfb      	ldrb	r3, [r7, #23]
 8031630:	b29b      	uxth	r3, r3
 8031632:	429a      	cmp	r2, r3
 8031634:	d206      	bcs.n	8031644 <tcp_enqueue_flags+0xb0>
 8031636:	4b4e      	ldr	r3, [pc, #312]	; (8031770 <tcp_enqueue_flags+0x1dc>)
 8031638:	f240 4239 	movw	r2, #1081	; 0x439
 803163c:	4951      	ldr	r1, [pc, #324]	; (8031784 <tcp_enqueue_flags+0x1f0>)
 803163e:	484e      	ldr	r0, [pc, #312]	; (8031778 <tcp_enqueue_flags+0x1e4>)
 8031640:	f004 fdaa 	bl	8036198 <iprintf>
              (p->len >= optlen));

  /* Allocate memory for tcp_seg, and fill in fields. */
  if ((seg = tcp_create_segment(pcb, p, flags, pcb->snd_lbb, optflags)) == NULL) {
 8031644:	687b      	ldr	r3, [r7, #4]
 8031646:	6dd9      	ldr	r1, [r3, #92]	; 0x5c
 8031648:	78fa      	ldrb	r2, [r7, #3]
 803164a:	7ffb      	ldrb	r3, [r7, #31]
 803164c:	9300      	str	r3, [sp, #0]
 803164e:	460b      	mov	r3, r1
 8031650:	6939      	ldr	r1, [r7, #16]
 8031652:	6878      	ldr	r0, [r7, #4]
 8031654:	f7ff f8e8 	bl	8030828 <tcp_create_segment>
 8031658:	60f8      	str	r0, [r7, #12]
 803165a:	68fb      	ldr	r3, [r7, #12]
 803165c:	2b00      	cmp	r3, #0
 803165e:	d111      	bne.n	8031684 <tcp_enqueue_flags+0xf0>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8031660:	687b      	ldr	r3, [r7, #4]
 8031662:	8b5b      	ldrh	r3, [r3, #26]
 8031664:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8031668:	b29a      	uxth	r2, r3
 803166a:	687b      	ldr	r3, [r7, #4]
 803166c:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
 803166e:	4b44      	ldr	r3, [pc, #272]	; (8031780 <tcp_enqueue_flags+0x1ec>)
 8031670:	f8b3 309c 	ldrh.w	r3, [r3, #156]	; 0x9c
 8031674:	3301      	adds	r3, #1
 8031676:	b29a      	uxth	r2, r3
 8031678:	4b41      	ldr	r3, [pc, #260]	; (8031780 <tcp_enqueue_flags+0x1ec>)
 803167a:	f8a3 209c 	strh.w	r2, [r3, #156]	; 0x9c
    return ERR_MEM;
 803167e:	f04f 33ff 	mov.w	r3, #4294967295
 8031682:	e070      	b.n	8031766 <tcp_enqueue_flags+0x1d2>
  }
  LWIP_ASSERT("seg->tcphdr not aligned", ((mem_ptr_t)seg->tcphdr % LWIP_MIN(MEM_ALIGNMENT, 4)) == 0);
 8031684:	68fb      	ldr	r3, [r7, #12]
 8031686:	68db      	ldr	r3, [r3, #12]
 8031688:	f003 0303 	and.w	r3, r3, #3
 803168c:	2b00      	cmp	r3, #0
 803168e:	d006      	beq.n	803169e <tcp_enqueue_flags+0x10a>
 8031690:	4b37      	ldr	r3, [pc, #220]	; (8031770 <tcp_enqueue_flags+0x1dc>)
 8031692:	f240 4242 	movw	r2, #1090	; 0x442
 8031696:	493c      	ldr	r1, [pc, #240]	; (8031788 <tcp_enqueue_flags+0x1f4>)
 8031698:	4837      	ldr	r0, [pc, #220]	; (8031778 <tcp_enqueue_flags+0x1e4>)
 803169a:	f004 fd7d 	bl	8036198 <iprintf>
  LWIP_ASSERT("tcp_enqueue_flags: invalid segment length", seg->len == 0);
 803169e:	68fb      	ldr	r3, [r7, #12]
 80316a0:	891b      	ldrh	r3, [r3, #8]
 80316a2:	2b00      	cmp	r3, #0
 80316a4:	d006      	beq.n	80316b4 <tcp_enqueue_flags+0x120>
 80316a6:	4b32      	ldr	r3, [pc, #200]	; (8031770 <tcp_enqueue_flags+0x1dc>)
 80316a8:	f240 4243 	movw	r2, #1091	; 0x443
 80316ac:	4937      	ldr	r1, [pc, #220]	; (803178c <tcp_enqueue_flags+0x1f8>)
 80316ae:	4832      	ldr	r0, [pc, #200]	; (8031778 <tcp_enqueue_flags+0x1e4>)
 80316b0:	f004 fd72 	bl	8036198 <iprintf>
               lwip_ntohl(seg->tcphdr->seqno),
               lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg),
               (u16_t)flags));

  /* Now append seg to pcb->unsent queue */
  if (pcb->unsent == NULL) {
 80316b4:	687b      	ldr	r3, [r7, #4]
 80316b6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80316b8:	2b00      	cmp	r3, #0
 80316ba:	d103      	bne.n	80316c4 <tcp_enqueue_flags+0x130>
    pcb->unsent = seg;
 80316bc:	687b      	ldr	r3, [r7, #4]
 80316be:	68fa      	ldr	r2, [r7, #12]
 80316c0:	66da      	str	r2, [r3, #108]	; 0x6c
 80316c2:	e00d      	b.n	80316e0 <tcp_enqueue_flags+0x14c>
  } else {
    struct tcp_seg *useg;
    for (useg = pcb->unsent; useg->next != NULL; useg = useg->next);
 80316c4:	687b      	ldr	r3, [r7, #4]
 80316c6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80316c8:	61bb      	str	r3, [r7, #24]
 80316ca:	e002      	b.n	80316d2 <tcp_enqueue_flags+0x13e>
 80316cc:	69bb      	ldr	r3, [r7, #24]
 80316ce:	681b      	ldr	r3, [r3, #0]
 80316d0:	61bb      	str	r3, [r7, #24]
 80316d2:	69bb      	ldr	r3, [r7, #24]
 80316d4:	681b      	ldr	r3, [r3, #0]
 80316d6:	2b00      	cmp	r3, #0
 80316d8:	d1f8      	bne.n	80316cc <tcp_enqueue_flags+0x138>
    useg->next = seg;
 80316da:	69bb      	ldr	r3, [r7, #24]
 80316dc:	68fa      	ldr	r2, [r7, #12]
 80316de:	601a      	str	r2, [r3, #0]
  }
#if TCP_OVERSIZE
  /* The new unsent tail has no space */
  pcb->unsent_oversize = 0;
 80316e0:	687b      	ldr	r3, [r7, #4]
 80316e2:	2200      	movs	r2, #0
 80316e4:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* TCP_OVERSIZE */

  /* SYN and FIN bump the sequence number */
  if ((flags & TCP_SYN) || (flags & TCP_FIN)) {
 80316e8:	78fb      	ldrb	r3, [r7, #3]
 80316ea:	f003 0302 	and.w	r3, r3, #2
 80316ee:	2b00      	cmp	r3, #0
 80316f0:	d104      	bne.n	80316fc <tcp_enqueue_flags+0x168>
 80316f2:	78fb      	ldrb	r3, [r7, #3]
 80316f4:	f003 0301 	and.w	r3, r3, #1
 80316f8:	2b00      	cmp	r3, #0
 80316fa:	d004      	beq.n	8031706 <tcp_enqueue_flags+0x172>
    pcb->snd_lbb++;
 80316fc:	687b      	ldr	r3, [r7, #4]
 80316fe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8031700:	1c5a      	adds	r2, r3, #1
 8031702:	687b      	ldr	r3, [r7, #4]
 8031704:	65da      	str	r2, [r3, #92]	; 0x5c
    /* optlen does not influence snd_buf */
  }
  if (flags & TCP_FIN) {
 8031706:	78fb      	ldrb	r3, [r7, #3]
 8031708:	f003 0301 	and.w	r3, r3, #1
 803170c:	2b00      	cmp	r3, #0
 803170e:	d006      	beq.n	803171e <tcp_enqueue_flags+0x18a>
    tcp_set_flags(pcb, TF_FIN);
 8031710:	687b      	ldr	r3, [r7, #4]
 8031712:	8b5b      	ldrh	r3, [r3, #26]
 8031714:	f043 0320 	orr.w	r3, r3, #32
 8031718:	b29a      	uxth	r2, r3
 803171a:	687b      	ldr	r3, [r7, #4]
 803171c:	835a      	strh	r2, [r3, #26]
  }

  /* update number of segments on the queues */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 803171e:	68fb      	ldr	r3, [r7, #12]
 8031720:	685b      	ldr	r3, [r3, #4]
 8031722:	4618      	mov	r0, r3
 8031724:	f7fa fc48 	bl	802bfb8 <pbuf_clen>
 8031728:	4603      	mov	r3, r0
 803172a:	461a      	mov	r2, r3
 803172c:	687b      	ldr	r3, [r7, #4]
 803172e:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8031732:	4413      	add	r3, r2
 8031734:	b29a      	uxth	r2, r3
 8031736:	687b      	ldr	r3, [r7, #4]
 8031738:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: %"S16_F" (after enqueued)\n", pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 803173c:	687b      	ldr	r3, [r7, #4]
 803173e:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8031742:	2b00      	cmp	r3, #0
 8031744:	d00e      	beq.n	8031764 <tcp_enqueue_flags+0x1d0>
    LWIP_ASSERT("tcp_enqueue_flags: invalid queue length",
 8031746:	687b      	ldr	r3, [r7, #4]
 8031748:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 803174a:	2b00      	cmp	r3, #0
 803174c:	d10a      	bne.n	8031764 <tcp_enqueue_flags+0x1d0>
 803174e:	687b      	ldr	r3, [r7, #4]
 8031750:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8031752:	2b00      	cmp	r3, #0
 8031754:	d106      	bne.n	8031764 <tcp_enqueue_flags+0x1d0>
 8031756:	4b06      	ldr	r3, [pc, #24]	; (8031770 <tcp_enqueue_flags+0x1dc>)
 8031758:	f240 4265 	movw	r2, #1125	; 0x465
 803175c:	490c      	ldr	r1, [pc, #48]	; (8031790 <tcp_enqueue_flags+0x1fc>)
 803175e:	4806      	ldr	r0, [pc, #24]	; (8031778 <tcp_enqueue_flags+0x1e4>)
 8031760:	f004 fd1a 	bl	8036198 <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  return ERR_OK;
 8031764:	2300      	movs	r3, #0
}
 8031766:	4618      	mov	r0, r3
 8031768:	3720      	adds	r7, #32
 803176a:	46bd      	mov	sp, r7
 803176c:	bd80      	pop	{r7, pc}
 803176e:	bf00      	nop
 8031770:	08039728 	.word	0x08039728
 8031774:	08039b4c 	.word	0x08039b4c
 8031778:	0803977c 	.word	0x0803977c
 803177c:	08039ba4 	.word	0x08039ba4
 8031780:	2000ed10 	.word	0x2000ed10
 8031784:	08039bc4 	.word	0x08039bc4
 8031788:	08039c00 	.word	0x08039c00
 803178c:	08039c18 	.word	0x08039c18
 8031790:	08039c44 	.word	0x08039c44

08031794 <tcp_output>:
 * @return ERR_OK if data has been sent or nothing to send
 *         another err_t on error
 */
err_t
tcp_output(struct tcp_pcb *pcb)
{
 8031794:	b5b0      	push	{r4, r5, r7, lr}
 8031796:	b08a      	sub	sp, #40	; 0x28
 8031798:	af00      	add	r7, sp, #0
 803179a:	6078      	str	r0, [r7, #4]
  s16_t i = 0;
#endif /* TCP_CWND_DEBUG */

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("tcp_output: invalid pcb", pcb != NULL);
 803179c:	687b      	ldr	r3, [r7, #4]
 803179e:	2b00      	cmp	r3, #0
 80317a0:	d106      	bne.n	80317b0 <tcp_output+0x1c>
 80317a2:	4b8a      	ldr	r3, [pc, #552]	; (80319cc <tcp_output+0x238>)
 80317a4:	f240 42e1 	movw	r2, #1249	; 0x4e1
 80317a8:	4989      	ldr	r1, [pc, #548]	; (80319d0 <tcp_output+0x23c>)
 80317aa:	488a      	ldr	r0, [pc, #552]	; (80319d4 <tcp_output+0x240>)
 80317ac:	f004 fcf4 	bl	8036198 <iprintf>
  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_output for listen-pcbs",
 80317b0:	687b      	ldr	r3, [r7, #4]
 80317b2:	7d1b      	ldrb	r3, [r3, #20]
 80317b4:	2b01      	cmp	r3, #1
 80317b6:	d106      	bne.n	80317c6 <tcp_output+0x32>
 80317b8:	4b84      	ldr	r3, [pc, #528]	; (80319cc <tcp_output+0x238>)
 80317ba:	f240 42e3 	movw	r2, #1251	; 0x4e3
 80317be:	4986      	ldr	r1, [pc, #536]	; (80319d8 <tcp_output+0x244>)
 80317c0:	4884      	ldr	r0, [pc, #528]	; (80319d4 <tcp_output+0x240>)
 80317c2:	f004 fce9 	bl	8036198 <iprintf>

  /* First, check if we are invoked by the TCP input processing
     code. If so, we do not output anything. Instead, we rely on the
     input processing code to call us when input processing is done
     with. */
  if (tcp_input_pcb == pcb) {
 80317c6:	4b85      	ldr	r3, [pc, #532]	; (80319dc <tcp_output+0x248>)
 80317c8:	681b      	ldr	r3, [r3, #0]
 80317ca:	687a      	ldr	r2, [r7, #4]
 80317cc:	429a      	cmp	r2, r3
 80317ce:	d101      	bne.n	80317d4 <tcp_output+0x40>
    return ERR_OK;
 80317d0:	2300      	movs	r3, #0
 80317d2:	e1ce      	b.n	8031b72 <tcp_output+0x3de>
  }

  wnd = LWIP_MIN(pcb->snd_wnd, pcb->cwnd);
 80317d4:	687b      	ldr	r3, [r7, #4]
 80317d6:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 80317da:	687b      	ldr	r3, [r7, #4]
 80317dc:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80317e0:	4293      	cmp	r3, r2
 80317e2:	bf28      	it	cs
 80317e4:	4613      	movcs	r3, r2
 80317e6:	b29b      	uxth	r3, r3
 80317e8:	61bb      	str	r3, [r7, #24]

  seg = pcb->unsent;
 80317ea:	687b      	ldr	r3, [r7, #4]
 80317ec:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80317ee:	627b      	str	r3, [r7, #36]	; 0x24

  if (seg == NULL) {
 80317f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80317f2:	2b00      	cmp	r3, #0
 80317f4:	d10b      	bne.n	803180e <tcp_output+0x7a>
                                 ", seg == NULL, ack %"U32_F"\n",
                                 pcb->snd_wnd, pcb->cwnd, wnd, pcb->lastack));

    /* If the TF_ACK_NOW flag is set and the ->unsent queue is empty, construct
     * an empty ACK segment and send it. */
    if (pcb->flags & TF_ACK_NOW) {
 80317f6:	687b      	ldr	r3, [r7, #4]
 80317f8:	8b5b      	ldrh	r3, [r3, #26]
 80317fa:	f003 0302 	and.w	r3, r3, #2
 80317fe:	2b00      	cmp	r3, #0
 8031800:	f000 81aa 	beq.w	8031b58 <tcp_output+0x3c4>
      return tcp_send_empty_ack(pcb);
 8031804:	6878      	ldr	r0, [r7, #4]
 8031806:	f000 fddf 	bl	80323c8 <tcp_send_empty_ack>
 803180a:	4603      	mov	r3, r0
 803180c:	e1b1      	b.n	8031b72 <tcp_output+0x3de>
                 pcb->snd_wnd, pcb->cwnd, wnd,
                 lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len,
                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack));
  }

  netif = tcp_route(pcb, &pcb->local_ip, &pcb->remote_ip);
 803180e:	6879      	ldr	r1, [r7, #4]
 8031810:	687b      	ldr	r3, [r7, #4]
 8031812:	3304      	adds	r3, #4
 8031814:	461a      	mov	r2, r3
 8031816:	6878      	ldr	r0, [r7, #4]
 8031818:	f7fe ffea 	bl	80307f0 <tcp_route>
 803181c:	6178      	str	r0, [r7, #20]
  if (netif == NULL) {
 803181e:	697b      	ldr	r3, [r7, #20]
 8031820:	2b00      	cmp	r3, #0
 8031822:	d102      	bne.n	803182a <tcp_output+0x96>
    return ERR_RTE;
 8031824:	f06f 0303 	mvn.w	r3, #3
 8031828:	e1a3      	b.n	8031b72 <tcp_output+0x3de>
  }

  /* If we don't have a local IP address, we get one from netif */
  if (ip_addr_isany(&pcb->local_ip)) {
 803182a:	687b      	ldr	r3, [r7, #4]
 803182c:	2b00      	cmp	r3, #0
 803182e:	d003      	beq.n	8031838 <tcp_output+0xa4>
 8031830:	687b      	ldr	r3, [r7, #4]
 8031832:	681b      	ldr	r3, [r3, #0]
 8031834:	2b00      	cmp	r3, #0
 8031836:	d111      	bne.n	803185c <tcp_output+0xc8>
    const ip_addr_t *local_ip = ip_netif_get_local_ip(netif, &pcb->remote_ip);
 8031838:	697b      	ldr	r3, [r7, #20]
 803183a:	2b00      	cmp	r3, #0
 803183c:	d002      	beq.n	8031844 <tcp_output+0xb0>
 803183e:	697b      	ldr	r3, [r7, #20]
 8031840:	3304      	adds	r3, #4
 8031842:	e000      	b.n	8031846 <tcp_output+0xb2>
 8031844:	2300      	movs	r3, #0
 8031846:	613b      	str	r3, [r7, #16]
    if (local_ip == NULL) {
 8031848:	693b      	ldr	r3, [r7, #16]
 803184a:	2b00      	cmp	r3, #0
 803184c:	d102      	bne.n	8031854 <tcp_output+0xc0>
      return ERR_RTE;
 803184e:	f06f 0303 	mvn.w	r3, #3
 8031852:	e18e      	b.n	8031b72 <tcp_output+0x3de>
    }
    ip_addr_copy(pcb->local_ip, *local_ip);
 8031854:	693b      	ldr	r3, [r7, #16]
 8031856:	681a      	ldr	r2, [r3, #0]
 8031858:	687b      	ldr	r3, [r7, #4]
 803185a:	601a      	str	r2, [r3, #0]
  }

  /* Handle the current segment not fitting within the window */
  if (lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd) {
 803185c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 803185e:	68db      	ldr	r3, [r3, #12]
 8031860:	685b      	ldr	r3, [r3, #4]
 8031862:	4618      	mov	r0, r3
 8031864:	f7f8 fe6d 	bl	802a542 <lwip_htonl>
 8031868:	4602      	mov	r2, r0
 803186a:	687b      	ldr	r3, [r7, #4]
 803186c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 803186e:	1ad3      	subs	r3, r2, r3
 8031870:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8031872:	8912      	ldrh	r2, [r2, #8]
 8031874:	4413      	add	r3, r2
 8031876:	69ba      	ldr	r2, [r7, #24]
 8031878:	429a      	cmp	r2, r3
 803187a:	d227      	bcs.n	80318cc <tcp_output+0x138>
     * within the remaining (could be 0) send window and RTO timer is not running (we
     * have no in-flight data). If window is still too small after persist timer fires,
     * then we split the segment. We don't consider the congestion window since a cwnd
     * smaller than 1 SMSS implies in-flight data
     */
    if (wnd == pcb->snd_wnd && pcb->unacked == NULL && pcb->persist_backoff == 0) {
 803187c:	687b      	ldr	r3, [r7, #4]
 803187e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8031882:	461a      	mov	r2, r3
 8031884:	69bb      	ldr	r3, [r7, #24]
 8031886:	4293      	cmp	r3, r2
 8031888:	d114      	bne.n	80318b4 <tcp_output+0x120>
 803188a:	687b      	ldr	r3, [r7, #4]
 803188c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 803188e:	2b00      	cmp	r3, #0
 8031890:	d110      	bne.n	80318b4 <tcp_output+0x120>
 8031892:	687b      	ldr	r3, [r7, #4]
 8031894:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 8031898:	2b00      	cmp	r3, #0
 803189a:	d10b      	bne.n	80318b4 <tcp_output+0x120>
      pcb->persist_cnt = 0;
 803189c:	687b      	ldr	r3, [r7, #4]
 803189e:	2200      	movs	r2, #0
 80318a0:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
      pcb->persist_backoff = 1;
 80318a4:	687b      	ldr	r3, [r7, #4]
 80318a6:	2201      	movs	r2, #1
 80318a8:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
      pcb->persist_probe = 0;
 80318ac:	687b      	ldr	r3, [r7, #4]
 80318ae:	2200      	movs	r2, #0
 80318b0:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
    }
    /* We need an ACK, but can't send data now, so send an empty ACK */
    if (pcb->flags & TF_ACK_NOW) {
 80318b4:	687b      	ldr	r3, [r7, #4]
 80318b6:	8b5b      	ldrh	r3, [r3, #26]
 80318b8:	f003 0302 	and.w	r3, r3, #2
 80318bc:	2b00      	cmp	r3, #0
 80318be:	f000 814d 	beq.w	8031b5c <tcp_output+0x3c8>
      return tcp_send_empty_ack(pcb);
 80318c2:	6878      	ldr	r0, [r7, #4]
 80318c4:	f000 fd80 	bl	80323c8 <tcp_send_empty_ack>
 80318c8:	4603      	mov	r3, r0
 80318ca:	e152      	b.n	8031b72 <tcp_output+0x3de>
    }
    goto output_done;
  }
  /* Stop persist timer, above conditions are not active */
  pcb->persist_backoff = 0;
 80318cc:	687b      	ldr	r3, [r7, #4]
 80318ce:	2200      	movs	r2, #0
 80318d0:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99

  /* useg should point to last segment on unacked queue */
  useg = pcb->unacked;
 80318d4:	687b      	ldr	r3, [r7, #4]
 80318d6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80318d8:	623b      	str	r3, [r7, #32]
  if (useg != NULL) {
 80318da:	6a3b      	ldr	r3, [r7, #32]
 80318dc:	2b00      	cmp	r3, #0
 80318de:	f000 811c 	beq.w	8031b1a <tcp_output+0x386>
    for (; useg->next != NULL; useg = useg->next);
 80318e2:	e002      	b.n	80318ea <tcp_output+0x156>
 80318e4:	6a3b      	ldr	r3, [r7, #32]
 80318e6:	681b      	ldr	r3, [r3, #0]
 80318e8:	623b      	str	r3, [r7, #32]
 80318ea:	6a3b      	ldr	r3, [r7, #32]
 80318ec:	681b      	ldr	r3, [r3, #0]
 80318ee:	2b00      	cmp	r3, #0
 80318f0:	d1f8      	bne.n	80318e4 <tcp_output+0x150>
  }
  /* data available and window allows it to be sent? */
  while (seg != NULL &&
 80318f2:	e112      	b.n	8031b1a <tcp_output+0x386>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
    LWIP_ASSERT("RST not expected here!",
 80318f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80318f6:	68db      	ldr	r3, [r3, #12]
 80318f8:	899b      	ldrh	r3, [r3, #12]
 80318fa:	b29b      	uxth	r3, r3
 80318fc:	4618      	mov	r0, r3
 80318fe:	f7f8 fe0b 	bl	802a518 <lwip_htons>
 8031902:	4603      	mov	r3, r0
 8031904:	b2db      	uxtb	r3, r3
 8031906:	f003 0304 	and.w	r3, r3, #4
 803190a:	2b00      	cmp	r3, #0
 803190c:	d006      	beq.n	803191c <tcp_output+0x188>
 803190e:	4b2f      	ldr	r3, [pc, #188]	; (80319cc <tcp_output+0x238>)
 8031910:	f240 5236 	movw	r2, #1334	; 0x536
 8031914:	4932      	ldr	r1, [pc, #200]	; (80319e0 <tcp_output+0x24c>)
 8031916:	482f      	ldr	r0, [pc, #188]	; (80319d4 <tcp_output+0x240>)
 8031918:	f004 fc3e 	bl	8036198 <iprintf>
     * - if tcp_write had a memory error before (prevent delayed ACK timeout) or
     * - if FIN was already enqueued for this PCB (SYN is always alone in a segment -
     *   either seg->next != NULL or pcb->unacked == NULL;
     *   RST is no sent using tcp_write/tcp_output.
     */
    if ((tcp_do_output_nagle(pcb) == 0) &&
 803191c:	687b      	ldr	r3, [r7, #4]
 803191e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8031920:	2b00      	cmp	r3, #0
 8031922:	d01f      	beq.n	8031964 <tcp_output+0x1d0>
 8031924:	687b      	ldr	r3, [r7, #4]
 8031926:	8b5b      	ldrh	r3, [r3, #26]
 8031928:	f003 0344 	and.w	r3, r3, #68	; 0x44
 803192c:	2b00      	cmp	r3, #0
 803192e:	d119      	bne.n	8031964 <tcp_output+0x1d0>
 8031930:	687b      	ldr	r3, [r7, #4]
 8031932:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8031934:	2b00      	cmp	r3, #0
 8031936:	d00b      	beq.n	8031950 <tcp_output+0x1bc>
 8031938:	687b      	ldr	r3, [r7, #4]
 803193a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 803193c:	681b      	ldr	r3, [r3, #0]
 803193e:	2b00      	cmp	r3, #0
 8031940:	d110      	bne.n	8031964 <tcp_output+0x1d0>
 8031942:	687b      	ldr	r3, [r7, #4]
 8031944:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8031946:	891a      	ldrh	r2, [r3, #8]
 8031948:	687b      	ldr	r3, [r7, #4]
 803194a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 803194c:	429a      	cmp	r2, r3
 803194e:	d209      	bcs.n	8031964 <tcp_output+0x1d0>
 8031950:	687b      	ldr	r3, [r7, #4]
 8031952:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 8031956:	2b00      	cmp	r3, #0
 8031958:	d004      	beq.n	8031964 <tcp_output+0x1d0>
 803195a:	687b      	ldr	r3, [r7, #4]
 803195c:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8031960:	2b08      	cmp	r3, #8
 8031962:	d901      	bls.n	8031968 <tcp_output+0x1d4>
 8031964:	2301      	movs	r3, #1
 8031966:	e000      	b.n	803196a <tcp_output+0x1d6>
 8031968:	2300      	movs	r3, #0
 803196a:	2b00      	cmp	r3, #0
 803196c:	d106      	bne.n	803197c <tcp_output+0x1e8>
        ((pcb->flags & (TF_NAGLEMEMERR | TF_FIN)) == 0)) {
 803196e:	687b      	ldr	r3, [r7, #4]
 8031970:	8b5b      	ldrh	r3, [r3, #26]
 8031972:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
    if ((tcp_do_output_nagle(pcb) == 0) &&
 8031976:	2b00      	cmp	r3, #0
 8031978:	f000 80e4 	beq.w	8031b44 <tcp_output+0x3b0>
                                 pcb->lastack,
                                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack, i));
    ++i;
#endif /* TCP_CWND_DEBUG */

    if (pcb->state != SYN_SENT) {
 803197c:	687b      	ldr	r3, [r7, #4]
 803197e:	7d1b      	ldrb	r3, [r3, #20]
 8031980:	2b02      	cmp	r3, #2
 8031982:	d00d      	beq.n	80319a0 <tcp_output+0x20c>
      TCPH_SET_FLAG(seg->tcphdr, TCP_ACK);
 8031984:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8031986:	68db      	ldr	r3, [r3, #12]
 8031988:	899b      	ldrh	r3, [r3, #12]
 803198a:	b29c      	uxth	r4, r3
 803198c:	2010      	movs	r0, #16
 803198e:	f7f8 fdc3 	bl	802a518 <lwip_htons>
 8031992:	4603      	mov	r3, r0
 8031994:	461a      	mov	r2, r3
 8031996:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8031998:	68db      	ldr	r3, [r3, #12]
 803199a:	4322      	orrs	r2, r4
 803199c:	b292      	uxth	r2, r2
 803199e:	819a      	strh	r2, [r3, #12]
    }

    err = tcp_output_segment(seg, pcb, netif);
 80319a0:	697a      	ldr	r2, [r7, #20]
 80319a2:	6879      	ldr	r1, [r7, #4]
 80319a4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80319a6:	f000 f909 	bl	8031bbc <tcp_output_segment>
 80319aa:	4603      	mov	r3, r0
 80319ac:	73fb      	strb	r3, [r7, #15]
    if (err != ERR_OK) {
 80319ae:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80319b2:	2b00      	cmp	r3, #0
 80319b4:	d016      	beq.n	80319e4 <tcp_output+0x250>
      /* segment could not be sent, for whatever reason */
      tcp_set_flags(pcb, TF_NAGLEMEMERR);
 80319b6:	687b      	ldr	r3, [r7, #4]
 80319b8:	8b5b      	ldrh	r3, [r3, #26]
 80319ba:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80319be:	b29a      	uxth	r2, r3
 80319c0:	687b      	ldr	r3, [r7, #4]
 80319c2:	835a      	strh	r2, [r3, #26]
      return err;
 80319c4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80319c8:	e0d3      	b.n	8031b72 <tcp_output+0x3de>
 80319ca:	bf00      	nop
 80319cc:	08039728 	.word	0x08039728
 80319d0:	08039c6c 	.word	0x08039c6c
 80319d4:	0803977c 	.word	0x0803977c
 80319d8:	08039c84 	.word	0x08039c84
 80319dc:	2000ee58 	.word	0x2000ee58
 80319e0:	08039cac 	.word	0x08039cac
    }
#if TCP_OVERSIZE_DBGCHECK
    seg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */
    pcb->unsent = seg->next;
 80319e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80319e6:	681a      	ldr	r2, [r3, #0]
 80319e8:	687b      	ldr	r3, [r7, #4]
 80319ea:	66da      	str	r2, [r3, #108]	; 0x6c
    if (pcb->state != SYN_SENT) {
 80319ec:	687b      	ldr	r3, [r7, #4]
 80319ee:	7d1b      	ldrb	r3, [r3, #20]
 80319f0:	2b02      	cmp	r3, #2
 80319f2:	d006      	beq.n	8031a02 <tcp_output+0x26e>
      tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 80319f4:	687b      	ldr	r3, [r7, #4]
 80319f6:	8b5b      	ldrh	r3, [r3, #26]
 80319f8:	f023 0303 	bic.w	r3, r3, #3
 80319fc:	b29a      	uxth	r2, r3
 80319fe:	687b      	ldr	r3, [r7, #4]
 8031a00:	835a      	strh	r2, [r3, #26]
    }
    snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 8031a02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8031a04:	68db      	ldr	r3, [r3, #12]
 8031a06:	685b      	ldr	r3, [r3, #4]
 8031a08:	4618      	mov	r0, r3
 8031a0a:	f7f8 fd9a 	bl	802a542 <lwip_htonl>
 8031a0e:	4604      	mov	r4, r0
 8031a10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8031a12:	891b      	ldrh	r3, [r3, #8]
 8031a14:	461d      	mov	r5, r3
 8031a16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8031a18:	68db      	ldr	r3, [r3, #12]
 8031a1a:	899b      	ldrh	r3, [r3, #12]
 8031a1c:	b29b      	uxth	r3, r3
 8031a1e:	4618      	mov	r0, r3
 8031a20:	f7f8 fd7a 	bl	802a518 <lwip_htons>
 8031a24:	4603      	mov	r3, r0
 8031a26:	b2db      	uxtb	r3, r3
 8031a28:	f003 0303 	and.w	r3, r3, #3
 8031a2c:	2b00      	cmp	r3, #0
 8031a2e:	d001      	beq.n	8031a34 <tcp_output+0x2a0>
 8031a30:	2301      	movs	r3, #1
 8031a32:	e000      	b.n	8031a36 <tcp_output+0x2a2>
 8031a34:	2300      	movs	r3, #0
 8031a36:	442b      	add	r3, r5
 8031a38:	4423      	add	r3, r4
 8031a3a:	60bb      	str	r3, [r7, #8]
    if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 8031a3c:	687b      	ldr	r3, [r7, #4]
 8031a3e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8031a40:	68bb      	ldr	r3, [r7, #8]
 8031a42:	1ad3      	subs	r3, r2, r3
 8031a44:	2b00      	cmp	r3, #0
 8031a46:	da02      	bge.n	8031a4e <tcp_output+0x2ba>
      pcb->snd_nxt = snd_nxt;
 8031a48:	687b      	ldr	r3, [r7, #4]
 8031a4a:	68ba      	ldr	r2, [r7, #8]
 8031a4c:	651a      	str	r2, [r3, #80]	; 0x50
    }
    /* put segment on unacknowledged list if length > 0 */
    if (TCP_TCPLEN(seg) > 0) {
 8031a4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8031a50:	891b      	ldrh	r3, [r3, #8]
 8031a52:	461c      	mov	r4, r3
 8031a54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8031a56:	68db      	ldr	r3, [r3, #12]
 8031a58:	899b      	ldrh	r3, [r3, #12]
 8031a5a:	b29b      	uxth	r3, r3
 8031a5c:	4618      	mov	r0, r3
 8031a5e:	f7f8 fd5b 	bl	802a518 <lwip_htons>
 8031a62:	4603      	mov	r3, r0
 8031a64:	b2db      	uxtb	r3, r3
 8031a66:	f003 0303 	and.w	r3, r3, #3
 8031a6a:	2b00      	cmp	r3, #0
 8031a6c:	d001      	beq.n	8031a72 <tcp_output+0x2de>
 8031a6e:	2301      	movs	r3, #1
 8031a70:	e000      	b.n	8031a74 <tcp_output+0x2e0>
 8031a72:	2300      	movs	r3, #0
 8031a74:	4423      	add	r3, r4
 8031a76:	2b00      	cmp	r3, #0
 8031a78:	d049      	beq.n	8031b0e <tcp_output+0x37a>
      seg->next = NULL;
 8031a7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8031a7c:	2200      	movs	r2, #0
 8031a7e:	601a      	str	r2, [r3, #0]
      /* unacked list is empty? */
      if (pcb->unacked == NULL) {
 8031a80:	687b      	ldr	r3, [r7, #4]
 8031a82:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8031a84:	2b00      	cmp	r3, #0
 8031a86:	d105      	bne.n	8031a94 <tcp_output+0x300>
        pcb->unacked = seg;
 8031a88:	687b      	ldr	r3, [r7, #4]
 8031a8a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8031a8c:	671a      	str	r2, [r3, #112]	; 0x70
        useg = seg;
 8031a8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8031a90:	623b      	str	r3, [r7, #32]
 8031a92:	e03f      	b.n	8031b14 <tcp_output+0x380>
        /* unacked list is not empty? */
      } else {
        /* In the case of fast retransmit, the packet should not go to the tail
         * of the unacked queue, but rather somewhere before it. We need to check for
         * this case. -STJ Jul 27, 2004 */
        if (TCP_SEQ_LT(lwip_ntohl(seg->tcphdr->seqno), lwip_ntohl(useg->tcphdr->seqno))) {
 8031a94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8031a96:	68db      	ldr	r3, [r3, #12]
 8031a98:	685b      	ldr	r3, [r3, #4]
 8031a9a:	4618      	mov	r0, r3
 8031a9c:	f7f8 fd51 	bl	802a542 <lwip_htonl>
 8031aa0:	4604      	mov	r4, r0
 8031aa2:	6a3b      	ldr	r3, [r7, #32]
 8031aa4:	68db      	ldr	r3, [r3, #12]
 8031aa6:	685b      	ldr	r3, [r3, #4]
 8031aa8:	4618      	mov	r0, r3
 8031aaa:	f7f8 fd4a 	bl	802a542 <lwip_htonl>
 8031aae:	4603      	mov	r3, r0
 8031ab0:	1ae3      	subs	r3, r4, r3
 8031ab2:	2b00      	cmp	r3, #0
 8031ab4:	da24      	bge.n	8031b00 <tcp_output+0x36c>
          /* add segment to before tail of unacked list, keeping the list sorted */
          struct tcp_seg **cur_seg = &(pcb->unacked);
 8031ab6:	687b      	ldr	r3, [r7, #4]
 8031ab8:	3370      	adds	r3, #112	; 0x70
 8031aba:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 8031abc:	e002      	b.n	8031ac4 <tcp_output+0x330>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
            cur_seg = &((*cur_seg)->next );
 8031abe:	69fb      	ldr	r3, [r7, #28]
 8031ac0:	681b      	ldr	r3, [r3, #0]
 8031ac2:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 8031ac4:	69fb      	ldr	r3, [r7, #28]
 8031ac6:	681b      	ldr	r3, [r3, #0]
 8031ac8:	2b00      	cmp	r3, #0
 8031aca:	d011      	beq.n	8031af0 <tcp_output+0x35c>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 8031acc:	69fb      	ldr	r3, [r7, #28]
 8031ace:	681b      	ldr	r3, [r3, #0]
 8031ad0:	68db      	ldr	r3, [r3, #12]
 8031ad2:	685b      	ldr	r3, [r3, #4]
 8031ad4:	4618      	mov	r0, r3
 8031ad6:	f7f8 fd34 	bl	802a542 <lwip_htonl>
 8031ada:	4604      	mov	r4, r0
 8031adc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8031ade:	68db      	ldr	r3, [r3, #12]
 8031ae0:	685b      	ldr	r3, [r3, #4]
 8031ae2:	4618      	mov	r0, r3
 8031ae4:	f7f8 fd2d 	bl	802a542 <lwip_htonl>
 8031ae8:	4603      	mov	r3, r0
 8031aea:	1ae3      	subs	r3, r4, r3
          while (*cur_seg &&
 8031aec:	2b00      	cmp	r3, #0
 8031aee:	dbe6      	blt.n	8031abe <tcp_output+0x32a>
          }
          seg->next = (*cur_seg);
 8031af0:	69fb      	ldr	r3, [r7, #28]
 8031af2:	681a      	ldr	r2, [r3, #0]
 8031af4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8031af6:	601a      	str	r2, [r3, #0]
          (*cur_seg) = seg;
 8031af8:	69fb      	ldr	r3, [r7, #28]
 8031afa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8031afc:	601a      	str	r2, [r3, #0]
 8031afe:	e009      	b.n	8031b14 <tcp_output+0x380>
        } else {
          /* add segment to tail of unacked list */
          useg->next = seg;
 8031b00:	6a3b      	ldr	r3, [r7, #32]
 8031b02:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8031b04:	601a      	str	r2, [r3, #0]
          useg = useg->next;
 8031b06:	6a3b      	ldr	r3, [r7, #32]
 8031b08:	681b      	ldr	r3, [r3, #0]
 8031b0a:	623b      	str	r3, [r7, #32]
 8031b0c:	e002      	b.n	8031b14 <tcp_output+0x380>
        }
      }
      /* do not queue empty segments on the unacked list */
    } else {
      tcp_seg_free(seg);
 8031b0e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8031b10:	f7fb fe4f 	bl	802d7b2 <tcp_seg_free>
    }
    seg = pcb->unsent;
 8031b14:	687b      	ldr	r3, [r7, #4]
 8031b16:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8031b18:	627b      	str	r3, [r7, #36]	; 0x24
  while (seg != NULL &&
 8031b1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8031b1c:	2b00      	cmp	r3, #0
 8031b1e:	d012      	beq.n	8031b46 <tcp_output+0x3b2>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
 8031b20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8031b22:	68db      	ldr	r3, [r3, #12]
 8031b24:	685b      	ldr	r3, [r3, #4]
 8031b26:	4618      	mov	r0, r3
 8031b28:	f7f8 fd0b 	bl	802a542 <lwip_htonl>
 8031b2c:	4602      	mov	r2, r0
 8031b2e:	687b      	ldr	r3, [r7, #4]
 8031b30:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8031b32:	1ad3      	subs	r3, r2, r3
 8031b34:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8031b36:	8912      	ldrh	r2, [r2, #8]
 8031b38:	4413      	add	r3, r2
  while (seg != NULL &&
 8031b3a:	69ba      	ldr	r2, [r7, #24]
 8031b3c:	429a      	cmp	r2, r3
 8031b3e:	f4bf aed9 	bcs.w	80318f4 <tcp_output+0x160>
 8031b42:	e000      	b.n	8031b46 <tcp_output+0x3b2>
      break;
 8031b44:	bf00      	nop
  }
#if TCP_OVERSIZE
  if (pcb->unsent == NULL) {
 8031b46:	687b      	ldr	r3, [r7, #4]
 8031b48:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8031b4a:	2b00      	cmp	r3, #0
 8031b4c:	d108      	bne.n	8031b60 <tcp_output+0x3cc>
    /* last unsent has been removed, reset unsent_oversize */
    pcb->unsent_oversize = 0;
 8031b4e:	687b      	ldr	r3, [r7, #4]
 8031b50:	2200      	movs	r2, #0
 8031b52:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
 8031b56:	e004      	b.n	8031b62 <tcp_output+0x3ce>
    goto output_done;
 8031b58:	bf00      	nop
 8031b5a:	e002      	b.n	8031b62 <tcp_output+0x3ce>
    goto output_done;
 8031b5c:	bf00      	nop
 8031b5e:	e000      	b.n	8031b62 <tcp_output+0x3ce>
  }
#endif /* TCP_OVERSIZE */

output_done:
 8031b60:	bf00      	nop
  tcp_clear_flags(pcb, TF_NAGLEMEMERR);
 8031b62:	687b      	ldr	r3, [r7, #4]
 8031b64:	8b5b      	ldrh	r3, [r3, #26]
 8031b66:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8031b6a:	b29a      	uxth	r2, r3
 8031b6c:	687b      	ldr	r3, [r7, #4]
 8031b6e:	835a      	strh	r2, [r3, #26]
  return ERR_OK;
 8031b70:	2300      	movs	r3, #0
}
 8031b72:	4618      	mov	r0, r3
 8031b74:	3728      	adds	r7, #40	; 0x28
 8031b76:	46bd      	mov	sp, r7
 8031b78:	bdb0      	pop	{r4, r5, r7, pc}
 8031b7a:	bf00      	nop

08031b7c <tcp_output_segment_busy>:
 * @arg seg the tcp segment to check
 * @return 1 if ref != 1, 0 if ref == 1
 */
static int
tcp_output_segment_busy(const struct tcp_seg *seg)
{
 8031b7c:	b580      	push	{r7, lr}
 8031b7e:	b082      	sub	sp, #8
 8031b80:	af00      	add	r7, sp, #0
 8031b82:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_output_segment_busy: invalid seg", seg != NULL);
 8031b84:	687b      	ldr	r3, [r7, #4]
 8031b86:	2b00      	cmp	r3, #0
 8031b88:	d106      	bne.n	8031b98 <tcp_output_segment_busy+0x1c>
 8031b8a:	4b09      	ldr	r3, [pc, #36]	; (8031bb0 <tcp_output_segment_busy+0x34>)
 8031b8c:	f240 529a 	movw	r2, #1434	; 0x59a
 8031b90:	4908      	ldr	r1, [pc, #32]	; (8031bb4 <tcp_output_segment_busy+0x38>)
 8031b92:	4809      	ldr	r0, [pc, #36]	; (8031bb8 <tcp_output_segment_busy+0x3c>)
 8031b94:	f004 fb00 	bl	8036198 <iprintf>

  /* We only need to check the first pbuf here:
     If a pbuf is queued for transmission, a driver calls pbuf_ref(),
     which only changes the ref count of the first pbuf */
  if (seg->p->ref != 1) {
 8031b98:	687b      	ldr	r3, [r7, #4]
 8031b9a:	685b      	ldr	r3, [r3, #4]
 8031b9c:	7b9b      	ldrb	r3, [r3, #14]
 8031b9e:	2b01      	cmp	r3, #1
 8031ba0:	d001      	beq.n	8031ba6 <tcp_output_segment_busy+0x2a>
    /* other reference found */
    return 1;
 8031ba2:	2301      	movs	r3, #1
 8031ba4:	e000      	b.n	8031ba8 <tcp_output_segment_busy+0x2c>
  }
  /* no other references found */
  return 0;
 8031ba6:	2300      	movs	r3, #0
}
 8031ba8:	4618      	mov	r0, r3
 8031baa:	3708      	adds	r7, #8
 8031bac:	46bd      	mov	sp, r7
 8031bae:	bd80      	pop	{r7, pc}
 8031bb0:	08039728 	.word	0x08039728
 8031bb4:	08039cc4 	.word	0x08039cc4
 8031bb8:	0803977c 	.word	0x0803977c

08031bbc <tcp_output_segment>:
 * @param pcb the tcp_pcb for the TCP connection used to send the segment
 * @param netif the netif used to send the segment
 */
static err_t
tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif)
{
 8031bbc:	b5b0      	push	{r4, r5, r7, lr}
 8031bbe:	b08c      	sub	sp, #48	; 0x30
 8031bc0:	af04      	add	r7, sp, #16
 8031bc2:	60f8      	str	r0, [r7, #12]
 8031bc4:	60b9      	str	r1, [r7, #8]
 8031bc6:	607a      	str	r2, [r7, #4]
  u32_t *opts;
#if TCP_CHECKSUM_ON_COPY
  int seg_chksum_was_swapped = 0;
#endif

  LWIP_ASSERT("tcp_output_segment: invalid seg", seg != NULL);
 8031bc8:	68fb      	ldr	r3, [r7, #12]
 8031bca:	2b00      	cmp	r3, #0
 8031bcc:	d106      	bne.n	8031bdc <tcp_output_segment+0x20>
 8031bce:	4b67      	ldr	r3, [pc, #412]	; (8031d6c <tcp_output_segment+0x1b0>)
 8031bd0:	f44f 62b7 	mov.w	r2, #1464	; 0x5b8
 8031bd4:	4966      	ldr	r1, [pc, #408]	; (8031d70 <tcp_output_segment+0x1b4>)
 8031bd6:	4867      	ldr	r0, [pc, #412]	; (8031d74 <tcp_output_segment+0x1b8>)
 8031bd8:	f004 fade 	bl	8036198 <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid pcb", pcb != NULL);
 8031bdc:	68bb      	ldr	r3, [r7, #8]
 8031bde:	2b00      	cmp	r3, #0
 8031be0:	d106      	bne.n	8031bf0 <tcp_output_segment+0x34>
 8031be2:	4b62      	ldr	r3, [pc, #392]	; (8031d6c <tcp_output_segment+0x1b0>)
 8031be4:	f240 52b9 	movw	r2, #1465	; 0x5b9
 8031be8:	4963      	ldr	r1, [pc, #396]	; (8031d78 <tcp_output_segment+0x1bc>)
 8031bea:	4862      	ldr	r0, [pc, #392]	; (8031d74 <tcp_output_segment+0x1b8>)
 8031bec:	f004 fad4 	bl	8036198 <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid netif", netif != NULL);
 8031bf0:	687b      	ldr	r3, [r7, #4]
 8031bf2:	2b00      	cmp	r3, #0
 8031bf4:	d106      	bne.n	8031c04 <tcp_output_segment+0x48>
 8031bf6:	4b5d      	ldr	r3, [pc, #372]	; (8031d6c <tcp_output_segment+0x1b0>)
 8031bf8:	f240 52ba 	movw	r2, #1466	; 0x5ba
 8031bfc:	495f      	ldr	r1, [pc, #380]	; (8031d7c <tcp_output_segment+0x1c0>)
 8031bfe:	485d      	ldr	r0, [pc, #372]	; (8031d74 <tcp_output_segment+0x1b8>)
 8031c00:	f004 faca 	bl	8036198 <iprintf>

  if (tcp_output_segment_busy(seg)) {
 8031c04:	68f8      	ldr	r0, [r7, #12]
 8031c06:	f7ff ffb9 	bl	8031b7c <tcp_output_segment_busy>
 8031c0a:	4603      	mov	r3, r0
 8031c0c:	2b00      	cmp	r3, #0
 8031c0e:	d001      	beq.n	8031c14 <tcp_output_segment+0x58>
    /* This should not happen: rexmit functions should have checked this.
       However, since this function modifies p->len, we must not continue in this case. */
    LWIP_DEBUGF(TCP_RTO_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_output_segment: segment busy\n"));
    return ERR_OK;
 8031c10:	2300      	movs	r3, #0
 8031c12:	e0a7      	b.n	8031d64 <tcp_output_segment+0x1a8>
  }

  /* The TCP header has already been constructed, but the ackno and
   wnd fields remain. */
  seg->tcphdr->ackno = lwip_htonl(pcb->rcv_nxt);
 8031c14:	68bb      	ldr	r3, [r7, #8]
 8031c16:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8031c18:	68fb      	ldr	r3, [r7, #12]
 8031c1a:	68dc      	ldr	r4, [r3, #12]
 8031c1c:	4610      	mov	r0, r2
 8031c1e:	f7f8 fc90 	bl	802a542 <lwip_htonl>
 8031c22:	4603      	mov	r3, r0
 8031c24:	60a3      	str	r3, [r4, #8]
       the window scale option) is never scaled. */
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(pcb->rcv_ann_wnd));
  } else
#endif /* LWIP_WND_SCALE */
  {
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 8031c26:	68bb      	ldr	r3, [r7, #8]
 8031c28:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 8031c2a:	68fb      	ldr	r3, [r7, #12]
 8031c2c:	68dc      	ldr	r4, [r3, #12]
 8031c2e:	4610      	mov	r0, r2
 8031c30:	f7f8 fc72 	bl	802a518 <lwip_htons>
 8031c34:	4603      	mov	r3, r0
 8031c36:	81e3      	strh	r3, [r4, #14]
  }

  pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 8031c38:	68bb      	ldr	r3, [r7, #8]
 8031c3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8031c3c:	68ba      	ldr	r2, [r7, #8]
 8031c3e:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 8031c40:	441a      	add	r2, r3
 8031c42:	68bb      	ldr	r3, [r7, #8]
 8031c44:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Add any requested options.  NB MSS option is only set on SYN
     packets, so ignore it here */
  /* cast through void* to get rid of alignment warnings */
  opts = (u32_t *)(void *)(seg->tcphdr + 1);
 8031c46:	68fb      	ldr	r3, [r7, #12]
 8031c48:	68db      	ldr	r3, [r3, #12]
 8031c4a:	3314      	adds	r3, #20
 8031c4c:	61fb      	str	r3, [r7, #28]
  if (seg->flags & TF_SEG_OPTS_MSS) {
 8031c4e:	68fb      	ldr	r3, [r7, #12]
 8031c50:	7a9b      	ldrb	r3, [r3, #10]
 8031c52:	f003 0301 	and.w	r3, r3, #1
 8031c56:	2b00      	cmp	r3, #0
 8031c58:	d015      	beq.n	8031c86 <tcp_output_segment+0xca>
    u16_t mss;
#if TCP_CALCULATE_EFF_SEND_MSS
    mss = tcp_eff_send_mss_netif(TCP_MSS, netif, &pcb->remote_ip);
 8031c5a:	68bb      	ldr	r3, [r7, #8]
 8031c5c:	3304      	adds	r3, #4
 8031c5e:	461a      	mov	r2, r3
 8031c60:	6879      	ldr	r1, [r7, #4]
 8031c62:	f44f 7006 	mov.w	r0, #536	; 0x218
 8031c66:	f7fc f993 	bl	802df90 <tcp_eff_send_mss_netif>
 8031c6a:	4603      	mov	r3, r0
 8031c6c:	837b      	strh	r3, [r7, #26]
#else /* TCP_CALCULATE_EFF_SEND_MSS */
    mss = TCP_MSS;
#endif /* TCP_CALCULATE_EFF_SEND_MSS */
    *opts = TCP_BUILD_MSS_OPTION(mss);
 8031c6e:	8b7b      	ldrh	r3, [r7, #26]
 8031c70:	f043 7301 	orr.w	r3, r3, #33816576	; 0x2040000
 8031c74:	4618      	mov	r0, r3
 8031c76:	f7f8 fc64 	bl	802a542 <lwip_htonl>
 8031c7a:	4602      	mov	r2, r0
 8031c7c:	69fb      	ldr	r3, [r7, #28]
 8031c7e:	601a      	str	r2, [r3, #0]
    opts += 1;
 8031c80:	69fb      	ldr	r3, [r7, #28]
 8031c82:	3304      	adds	r3, #4
 8031c84:	61fb      	str	r3, [r7, #28]
  }
#endif

  /* Set retransmission timer running if it is not currently enabled
     This must be set before checking the route. */
  if (pcb->rtime < 0) {
 8031c86:	68bb      	ldr	r3, [r7, #8]
 8031c88:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 8031c8c:	2b00      	cmp	r3, #0
 8031c8e:	da02      	bge.n	8031c96 <tcp_output_segment+0xda>
    pcb->rtime = 0;
 8031c90:	68bb      	ldr	r3, [r7, #8]
 8031c92:	2200      	movs	r2, #0
 8031c94:	861a      	strh	r2, [r3, #48]	; 0x30
  }

  if (pcb->rttest == 0) {
 8031c96:	68bb      	ldr	r3, [r7, #8]
 8031c98:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8031c9a:	2b00      	cmp	r3, #0
 8031c9c:	d10c      	bne.n	8031cb8 <tcp_output_segment+0xfc>
    pcb->rttest = tcp_ticks;
 8031c9e:	4b38      	ldr	r3, [pc, #224]	; (8031d80 <tcp_output_segment+0x1c4>)
 8031ca0:	681a      	ldr	r2, [r3, #0]
 8031ca2:	68bb      	ldr	r3, [r7, #8]
 8031ca4:	635a      	str	r2, [r3, #52]	; 0x34
    pcb->rtseq = lwip_ntohl(seg->tcphdr->seqno);
 8031ca6:	68fb      	ldr	r3, [r7, #12]
 8031ca8:	68db      	ldr	r3, [r3, #12]
 8031caa:	685b      	ldr	r3, [r3, #4]
 8031cac:	4618      	mov	r0, r3
 8031cae:	f7f8 fc48 	bl	802a542 <lwip_htonl>
 8031cb2:	4602      	mov	r2, r0
 8031cb4:	68bb      	ldr	r3, [r7, #8]
 8031cb6:	639a      	str	r2, [r3, #56]	; 0x38
  }
  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output_segment: %"U32_F":%"U32_F"\n",
                                 lwip_htonl(seg->tcphdr->seqno), lwip_htonl(seg->tcphdr->seqno) +
                                 seg->len));

  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
 8031cb8:	68fb      	ldr	r3, [r7, #12]
 8031cba:	68da      	ldr	r2, [r3, #12]
 8031cbc:	68fb      	ldr	r3, [r7, #12]
 8031cbe:	685b      	ldr	r3, [r3, #4]
 8031cc0:	685b      	ldr	r3, [r3, #4]
 8031cc2:	1ad3      	subs	r3, r2, r3
 8031cc4:	833b      	strh	r3, [r7, #24]
  if (len == 0) {
    /** Exclude retransmitted segments from this count. */
    MIB2_STATS_INC(mib2.tcpoutsegs);
  }

  seg->p->len -= len;
 8031cc6:	68fb      	ldr	r3, [r7, #12]
 8031cc8:	685b      	ldr	r3, [r3, #4]
 8031cca:	8959      	ldrh	r1, [r3, #10]
 8031ccc:	68fb      	ldr	r3, [r7, #12]
 8031cce:	685b      	ldr	r3, [r3, #4]
 8031cd0:	8b3a      	ldrh	r2, [r7, #24]
 8031cd2:	1a8a      	subs	r2, r1, r2
 8031cd4:	b292      	uxth	r2, r2
 8031cd6:	815a      	strh	r2, [r3, #10]
  seg->p->tot_len -= len;
 8031cd8:	68fb      	ldr	r3, [r7, #12]
 8031cda:	685b      	ldr	r3, [r3, #4]
 8031cdc:	8919      	ldrh	r1, [r3, #8]
 8031cde:	68fb      	ldr	r3, [r7, #12]
 8031ce0:	685b      	ldr	r3, [r3, #4]
 8031ce2:	8b3a      	ldrh	r2, [r7, #24]
 8031ce4:	1a8a      	subs	r2, r1, r2
 8031ce6:	b292      	uxth	r2, r2
 8031ce8:	811a      	strh	r2, [r3, #8]

  seg->p->payload = seg->tcphdr;
 8031cea:	68fb      	ldr	r3, [r7, #12]
 8031cec:	685b      	ldr	r3, [r3, #4]
 8031cee:	68fa      	ldr	r2, [r7, #12]
 8031cf0:	68d2      	ldr	r2, [r2, #12]
 8031cf2:	605a      	str	r2, [r3, #4]

  seg->tcphdr->chksum = 0;
 8031cf4:	68fb      	ldr	r3, [r7, #12]
 8031cf6:	68db      	ldr	r3, [r3, #12]
 8031cf8:	2200      	movs	r2, #0
 8031cfa:	741a      	strb	r2, [r3, #16]
 8031cfc:	2200      	movs	r2, #0
 8031cfe:	745a      	strb	r2, [r3, #17]

#ifdef LWIP_HOOK_TCP_OUT_ADD_TCPOPTS
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(seg->p, seg->tcphdr, pcb, opts);
#endif
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(seg->tcphdr + 1)) + LWIP_TCP_OPT_LENGTH_SEGMENT(seg->flags, pcb));
 8031d00:	68fb      	ldr	r3, [r7, #12]
 8031d02:	68db      	ldr	r3, [r3, #12]
 8031d04:	f103 0214 	add.w	r2, r3, #20
 8031d08:	68fb      	ldr	r3, [r7, #12]
 8031d0a:	7a9b      	ldrb	r3, [r3, #10]
 8031d0c:	009b      	lsls	r3, r3, #2
 8031d0e:	f003 0304 	and.w	r3, r3, #4
 8031d12:	4413      	add	r3, r2
 8031d14:	69fa      	ldr	r2, [r7, #28]
 8031d16:	429a      	cmp	r2, r3
 8031d18:	d006      	beq.n	8031d28 <tcp_output_segment+0x16c>
 8031d1a:	4b14      	ldr	r3, [pc, #80]	; (8031d6c <tcp_output_segment+0x1b0>)
 8031d1c:	f240 621c 	movw	r2, #1564	; 0x61c
 8031d20:	4918      	ldr	r1, [pc, #96]	; (8031d84 <tcp_output_segment+0x1c8>)
 8031d22:	4814      	ldr	r0, [pc, #80]	; (8031d74 <tcp_output_segment+0x1b8>)
 8031d24:	f004 fa38 	bl	8036198 <iprintf>
    seg->tcphdr->chksum = ip_chksum_pseudo(seg->p, IP_PROTO_TCP,
                                           seg->p->tot_len, &pcb->local_ip, &pcb->remote_ip);
#endif /* TCP_CHECKSUM_ON_COPY */
  }
#endif /* CHECKSUM_GEN_TCP */
  TCP_STATS_INC(tcp.xmit);
 8031d28:	4b17      	ldr	r3, [pc, #92]	; (8031d88 <tcp_output_segment+0x1cc>)
 8031d2a:	f8b3 3090 	ldrh.w	r3, [r3, #144]	; 0x90
 8031d2e:	3301      	adds	r3, #1
 8031d30:	b29a      	uxth	r2, r3
 8031d32:	4b15      	ldr	r3, [pc, #84]	; (8031d88 <tcp_output_segment+0x1cc>)
 8031d34:	f8a3 2090 	strh.w	r2, [r3, #144]	; 0x90

  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if(seg->p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl,
 8031d38:	68fb      	ldr	r3, [r7, #12]
 8031d3a:	6858      	ldr	r0, [r3, #4]
 8031d3c:	68b9      	ldr	r1, [r7, #8]
 8031d3e:	68bb      	ldr	r3, [r7, #8]
 8031d40:	1d1c      	adds	r4, r3, #4
 8031d42:	68bb      	ldr	r3, [r7, #8]
 8031d44:	7add      	ldrb	r5, [r3, #11]
 8031d46:	68bb      	ldr	r3, [r7, #8]
 8031d48:	7a9b      	ldrb	r3, [r3, #10]
 8031d4a:	687a      	ldr	r2, [r7, #4]
 8031d4c:	9202      	str	r2, [sp, #8]
 8031d4e:	2206      	movs	r2, #6
 8031d50:	9201      	str	r2, [sp, #4]
 8031d52:	9300      	str	r3, [sp, #0]
 8031d54:	462b      	mov	r3, r5
 8031d56:	4622      	mov	r2, r4
 8031d58:	f002 fcc8 	bl	80346ec <ip4_output_if>
 8031d5c:	4603      	mov	r3, r0
 8031d5e:	75fb      	strb	r3, [r7, #23]
    seg->chksum = SWAP_BYTES_IN_WORD(seg->chksum);
    seg->chksum_swapped = 1;
  }
#endif

  return err;
 8031d60:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8031d64:	4618      	mov	r0, r3
 8031d66:	3720      	adds	r7, #32
 8031d68:	46bd      	mov	sp, r7
 8031d6a:	bdb0      	pop	{r4, r5, r7, pc}
 8031d6c:	08039728 	.word	0x08039728
 8031d70:	08039cec 	.word	0x08039cec
 8031d74:	0803977c 	.word	0x0803977c
 8031d78:	08039d0c 	.word	0x08039d0c
 8031d7c:	08039d2c 	.word	0x08039d2c
 8031d80:	2000ee0c 	.word	0x2000ee0c
 8031d84:	08039d50 	.word	0x08039d50
 8031d88:	2000ed10 	.word	0x2000ed10

08031d8c <tcp_rexmit_rto_prepare>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
err_t
tcp_rexmit_rto_prepare(struct tcp_pcb *pcb)
{
 8031d8c:	b5b0      	push	{r4, r5, r7, lr}
 8031d8e:	b084      	sub	sp, #16
 8031d90:	af00      	add	r7, sp, #0
 8031d92:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;

  LWIP_ASSERT("tcp_rexmit_rto_prepare: invalid pcb", pcb != NULL);
 8031d94:	687b      	ldr	r3, [r7, #4]
 8031d96:	2b00      	cmp	r3, #0
 8031d98:	d106      	bne.n	8031da8 <tcp_rexmit_rto_prepare+0x1c>
 8031d9a:	4b31      	ldr	r3, [pc, #196]	; (8031e60 <tcp_rexmit_rto_prepare+0xd4>)
 8031d9c:	f240 6263 	movw	r2, #1635	; 0x663
 8031da0:	4930      	ldr	r1, [pc, #192]	; (8031e64 <tcp_rexmit_rto_prepare+0xd8>)
 8031da2:	4831      	ldr	r0, [pc, #196]	; (8031e68 <tcp_rexmit_rto_prepare+0xdc>)
 8031da4:	f004 f9f8 	bl	8036198 <iprintf>

  if (pcb->unacked == NULL) {
 8031da8:	687b      	ldr	r3, [r7, #4]
 8031daa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8031dac:	2b00      	cmp	r3, #0
 8031dae:	d102      	bne.n	8031db6 <tcp_rexmit_rto_prepare+0x2a>
    return ERR_VAL;
 8031db0:	f06f 0305 	mvn.w	r3, #5
 8031db4:	e050      	b.n	8031e58 <tcp_rexmit_rto_prepare+0xcc>

  /* Move all unacked segments to the head of the unsent queue.
     However, give up if any of the unsent pbufs are still referenced by the
     netif driver due to deferred transmission. No point loading the link further
     if it is struggling to flush its buffered writes. */
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 8031db6:	687b      	ldr	r3, [r7, #4]
 8031db8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8031dba:	60fb      	str	r3, [r7, #12]
 8031dbc:	e00b      	b.n	8031dd6 <tcp_rexmit_rto_prepare+0x4a>
    if (tcp_output_segment_busy(seg)) {
 8031dbe:	68f8      	ldr	r0, [r7, #12]
 8031dc0:	f7ff fedc 	bl	8031b7c <tcp_output_segment_busy>
 8031dc4:	4603      	mov	r3, r0
 8031dc6:	2b00      	cmp	r3, #0
 8031dc8:	d002      	beq.n	8031dd0 <tcp_rexmit_rto_prepare+0x44>
      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
      return ERR_VAL;
 8031dca:	f06f 0305 	mvn.w	r3, #5
 8031dce:	e043      	b.n	8031e58 <tcp_rexmit_rto_prepare+0xcc>
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 8031dd0:	68fb      	ldr	r3, [r7, #12]
 8031dd2:	681b      	ldr	r3, [r3, #0]
 8031dd4:	60fb      	str	r3, [r7, #12]
 8031dd6:	68fb      	ldr	r3, [r7, #12]
 8031dd8:	681b      	ldr	r3, [r3, #0]
 8031dda:	2b00      	cmp	r3, #0
 8031ddc:	d1ef      	bne.n	8031dbe <tcp_rexmit_rto_prepare+0x32>
    }
  }
  if (tcp_output_segment_busy(seg)) {
 8031dde:	68f8      	ldr	r0, [r7, #12]
 8031de0:	f7ff fecc 	bl	8031b7c <tcp_output_segment_busy>
 8031de4:	4603      	mov	r3, r0
 8031de6:	2b00      	cmp	r3, #0
 8031de8:	d002      	beq.n	8031df0 <tcp_rexmit_rto_prepare+0x64>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
    return ERR_VAL;
 8031dea:	f06f 0305 	mvn.w	r3, #5
 8031dee:	e033      	b.n	8031e58 <tcp_rexmit_rto_prepare+0xcc>
  }
  /* concatenate unsent queue after unacked queue */
  seg->next = pcb->unsent;
 8031df0:	687b      	ldr	r3, [r7, #4]
 8031df2:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8031df4:	68fb      	ldr	r3, [r7, #12]
 8031df6:	601a      	str	r2, [r3, #0]
  if (pcb->unsent == NULL) {
    pcb->unsent_oversize = seg->oversize_left;
  }
#endif /* TCP_OVERSIZE_DBGCHECK */
  /* unsent queue is the concatenated queue (of unacked, unsent) */
  pcb->unsent = pcb->unacked;
 8031df8:	687b      	ldr	r3, [r7, #4]
 8031dfa:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8031dfc:	687b      	ldr	r3, [r7, #4]
 8031dfe:	66da      	str	r2, [r3, #108]	; 0x6c
  /* unacked queue is now empty */
  pcb->unacked = NULL;
 8031e00:	687b      	ldr	r3, [r7, #4]
 8031e02:	2200      	movs	r2, #0
 8031e04:	671a      	str	r2, [r3, #112]	; 0x70

  /* Mark RTO in-progress */
  tcp_set_flags(pcb, TF_RTO);
 8031e06:	687b      	ldr	r3, [r7, #4]
 8031e08:	8b5b      	ldrh	r3, [r3, #26]
 8031e0a:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8031e0e:	b29a      	uxth	r2, r3
 8031e10:	687b      	ldr	r3, [r7, #4]
 8031e12:	835a      	strh	r2, [r3, #26]
  /* Record the next byte following retransmit */
  pcb->rto_end = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 8031e14:	68fb      	ldr	r3, [r7, #12]
 8031e16:	68db      	ldr	r3, [r3, #12]
 8031e18:	685b      	ldr	r3, [r3, #4]
 8031e1a:	4618      	mov	r0, r3
 8031e1c:	f7f8 fb91 	bl	802a542 <lwip_htonl>
 8031e20:	4604      	mov	r4, r0
 8031e22:	68fb      	ldr	r3, [r7, #12]
 8031e24:	891b      	ldrh	r3, [r3, #8]
 8031e26:	461d      	mov	r5, r3
 8031e28:	68fb      	ldr	r3, [r7, #12]
 8031e2a:	68db      	ldr	r3, [r3, #12]
 8031e2c:	899b      	ldrh	r3, [r3, #12]
 8031e2e:	b29b      	uxth	r3, r3
 8031e30:	4618      	mov	r0, r3
 8031e32:	f7f8 fb71 	bl	802a518 <lwip_htons>
 8031e36:	4603      	mov	r3, r0
 8031e38:	b2db      	uxtb	r3, r3
 8031e3a:	f003 0303 	and.w	r3, r3, #3
 8031e3e:	2b00      	cmp	r3, #0
 8031e40:	d001      	beq.n	8031e46 <tcp_rexmit_rto_prepare+0xba>
 8031e42:	2301      	movs	r3, #1
 8031e44:	e000      	b.n	8031e48 <tcp_rexmit_rto_prepare+0xbc>
 8031e46:	2300      	movs	r3, #0
 8031e48:	442b      	add	r3, r5
 8031e4a:	18e2      	adds	r2, r4, r3
 8031e4c:	687b      	ldr	r3, [r7, #4]
 8031e4e:	64da      	str	r2, [r3, #76]	; 0x4c
  /* Don't take any RTT measurements after retransmitting. */
  pcb->rttest = 0;
 8031e50:	687b      	ldr	r3, [r7, #4]
 8031e52:	2200      	movs	r2, #0
 8031e54:	635a      	str	r2, [r3, #52]	; 0x34

  return ERR_OK;
 8031e56:	2300      	movs	r3, #0
}
 8031e58:	4618      	mov	r0, r3
 8031e5a:	3710      	adds	r7, #16
 8031e5c:	46bd      	mov	sp, r7
 8031e5e:	bdb0      	pop	{r4, r5, r7, pc}
 8031e60:	08039728 	.word	0x08039728
 8031e64:	08039d64 	.word	0x08039d64
 8031e68:	0803977c 	.word	0x0803977c

08031e6c <tcp_rexmit_rto_commit>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto_commit(struct tcp_pcb *pcb)
{
 8031e6c:	b580      	push	{r7, lr}
 8031e6e:	b082      	sub	sp, #8
 8031e70:	af00      	add	r7, sp, #0
 8031e72:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto_commit: invalid pcb", pcb != NULL);
 8031e74:	687b      	ldr	r3, [r7, #4]
 8031e76:	2b00      	cmp	r3, #0
 8031e78:	d106      	bne.n	8031e88 <tcp_rexmit_rto_commit+0x1c>
 8031e7a:	4b0d      	ldr	r3, [pc, #52]	; (8031eb0 <tcp_rexmit_rto_commit+0x44>)
 8031e7c:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 8031e80:	490c      	ldr	r1, [pc, #48]	; (8031eb4 <tcp_rexmit_rto_commit+0x48>)
 8031e82:	480d      	ldr	r0, [pc, #52]	; (8031eb8 <tcp_rexmit_rto_commit+0x4c>)
 8031e84:	f004 f988 	bl	8036198 <iprintf>

  /* increment number of retransmissions */
  if (pcb->nrtx < 0xFF) {
 8031e88:	687b      	ldr	r3, [r7, #4]
 8031e8a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8031e8e:	2bff      	cmp	r3, #255	; 0xff
 8031e90:	d007      	beq.n	8031ea2 <tcp_rexmit_rto_commit+0x36>
    ++pcb->nrtx;
 8031e92:	687b      	ldr	r3, [r7, #4]
 8031e94:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8031e98:	3301      	adds	r3, #1
 8031e9a:	b2da      	uxtb	r2, r3
 8031e9c:	687b      	ldr	r3, [r7, #4]
 8031e9e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }
  /* Do the actual retransmission */
  tcp_output(pcb);
 8031ea2:	6878      	ldr	r0, [r7, #4]
 8031ea4:	f7ff fc76 	bl	8031794 <tcp_output>
}
 8031ea8:	bf00      	nop
 8031eaa:	3708      	adds	r7, #8
 8031eac:	46bd      	mov	sp, r7
 8031eae:	bd80      	pop	{r7, pc}
 8031eb0:	08039728 	.word	0x08039728
 8031eb4:	08039d88 	.word	0x08039d88
 8031eb8:	0803977c 	.word	0x0803977c

08031ebc <tcp_rexmit_rto>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto(struct tcp_pcb *pcb)
{
 8031ebc:	b580      	push	{r7, lr}
 8031ebe:	b082      	sub	sp, #8
 8031ec0:	af00      	add	r7, sp, #0
 8031ec2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto: invalid pcb", pcb != NULL);
 8031ec4:	687b      	ldr	r3, [r7, #4]
 8031ec6:	2b00      	cmp	r3, #0
 8031ec8:	d106      	bne.n	8031ed8 <tcp_rexmit_rto+0x1c>
 8031eca:	4b0a      	ldr	r3, [pc, #40]	; (8031ef4 <tcp_rexmit_rto+0x38>)
 8031ecc:	f240 62ad 	movw	r2, #1709	; 0x6ad
 8031ed0:	4909      	ldr	r1, [pc, #36]	; (8031ef8 <tcp_rexmit_rto+0x3c>)
 8031ed2:	480a      	ldr	r0, [pc, #40]	; (8031efc <tcp_rexmit_rto+0x40>)
 8031ed4:	f004 f960 	bl	8036198 <iprintf>

  if (tcp_rexmit_rto_prepare(pcb) == ERR_OK) {
 8031ed8:	6878      	ldr	r0, [r7, #4]
 8031eda:	f7ff ff57 	bl	8031d8c <tcp_rexmit_rto_prepare>
 8031ede:	4603      	mov	r3, r0
 8031ee0:	2b00      	cmp	r3, #0
 8031ee2:	d102      	bne.n	8031eea <tcp_rexmit_rto+0x2e>
    tcp_rexmit_rto_commit(pcb);
 8031ee4:	6878      	ldr	r0, [r7, #4]
 8031ee6:	f7ff ffc1 	bl	8031e6c <tcp_rexmit_rto_commit>
  }
}
 8031eea:	bf00      	nop
 8031eec:	3708      	adds	r7, #8
 8031eee:	46bd      	mov	sp, r7
 8031ef0:	bd80      	pop	{r7, pc}
 8031ef2:	bf00      	nop
 8031ef4:	08039728 	.word	0x08039728
 8031ef8:	08039dac 	.word	0x08039dac
 8031efc:	0803977c 	.word	0x0803977c

08031f00 <tcp_rexmit>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
err_t
tcp_rexmit(struct tcp_pcb *pcb)
{
 8031f00:	b590      	push	{r4, r7, lr}
 8031f02:	b085      	sub	sp, #20
 8031f04:	af00      	add	r7, sp, #0
 8031f06:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;
  struct tcp_seg **cur_seg;

  LWIP_ASSERT("tcp_rexmit: invalid pcb", pcb != NULL);
 8031f08:	687b      	ldr	r3, [r7, #4]
 8031f0a:	2b00      	cmp	r3, #0
 8031f0c:	d106      	bne.n	8031f1c <tcp_rexmit+0x1c>
 8031f0e:	4b2f      	ldr	r3, [pc, #188]	; (8031fcc <tcp_rexmit+0xcc>)
 8031f10:	f240 62c1 	movw	r2, #1729	; 0x6c1
 8031f14:	492e      	ldr	r1, [pc, #184]	; (8031fd0 <tcp_rexmit+0xd0>)
 8031f16:	482f      	ldr	r0, [pc, #188]	; (8031fd4 <tcp_rexmit+0xd4>)
 8031f18:	f004 f93e 	bl	8036198 <iprintf>

  if (pcb->unacked == NULL) {
 8031f1c:	687b      	ldr	r3, [r7, #4]
 8031f1e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8031f20:	2b00      	cmp	r3, #0
 8031f22:	d102      	bne.n	8031f2a <tcp_rexmit+0x2a>
    return ERR_VAL;
 8031f24:	f06f 0305 	mvn.w	r3, #5
 8031f28:	e04c      	b.n	8031fc4 <tcp_rexmit+0xc4>
  }

  seg = pcb->unacked;
 8031f2a:	687b      	ldr	r3, [r7, #4]
 8031f2c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8031f2e:	60bb      	str	r3, [r7, #8]

  /* Give up if the segment is still referenced by the netif driver
     due to deferred transmission. */
  if (tcp_output_segment_busy(seg)) {
 8031f30:	68b8      	ldr	r0, [r7, #8]
 8031f32:	f7ff fe23 	bl	8031b7c <tcp_output_segment_busy>
 8031f36:	4603      	mov	r3, r0
 8031f38:	2b00      	cmp	r3, #0
 8031f3a:	d002      	beq.n	8031f42 <tcp_rexmit+0x42>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit busy\n"));
    return ERR_VAL;
 8031f3c:	f06f 0305 	mvn.w	r3, #5
 8031f40:	e040      	b.n	8031fc4 <tcp_rexmit+0xc4>
  }

  /* Move the first unacked segment to the unsent queue */
  /* Keep the unsent queue sorted. */
  pcb->unacked = seg->next;
 8031f42:	68bb      	ldr	r3, [r7, #8]
 8031f44:	681a      	ldr	r2, [r3, #0]
 8031f46:	687b      	ldr	r3, [r7, #4]
 8031f48:	671a      	str	r2, [r3, #112]	; 0x70

  cur_seg = &(pcb->unsent);
 8031f4a:	687b      	ldr	r3, [r7, #4]
 8031f4c:	336c      	adds	r3, #108	; 0x6c
 8031f4e:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 8031f50:	e002      	b.n	8031f58 <tcp_rexmit+0x58>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
    cur_seg = &((*cur_seg)->next );
 8031f52:	68fb      	ldr	r3, [r7, #12]
 8031f54:	681b      	ldr	r3, [r3, #0]
 8031f56:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 8031f58:	68fb      	ldr	r3, [r7, #12]
 8031f5a:	681b      	ldr	r3, [r3, #0]
 8031f5c:	2b00      	cmp	r3, #0
 8031f5e:	d011      	beq.n	8031f84 <tcp_rexmit+0x84>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 8031f60:	68fb      	ldr	r3, [r7, #12]
 8031f62:	681b      	ldr	r3, [r3, #0]
 8031f64:	68db      	ldr	r3, [r3, #12]
 8031f66:	685b      	ldr	r3, [r3, #4]
 8031f68:	4618      	mov	r0, r3
 8031f6a:	f7f8 faea 	bl	802a542 <lwip_htonl>
 8031f6e:	4604      	mov	r4, r0
 8031f70:	68bb      	ldr	r3, [r7, #8]
 8031f72:	68db      	ldr	r3, [r3, #12]
 8031f74:	685b      	ldr	r3, [r3, #4]
 8031f76:	4618      	mov	r0, r3
 8031f78:	f7f8 fae3 	bl	802a542 <lwip_htonl>
 8031f7c:	4603      	mov	r3, r0
 8031f7e:	1ae3      	subs	r3, r4, r3
  while (*cur_seg &&
 8031f80:	2b00      	cmp	r3, #0
 8031f82:	dbe6      	blt.n	8031f52 <tcp_rexmit+0x52>
  }
  seg->next = *cur_seg;
 8031f84:	68fb      	ldr	r3, [r7, #12]
 8031f86:	681a      	ldr	r2, [r3, #0]
 8031f88:	68bb      	ldr	r3, [r7, #8]
 8031f8a:	601a      	str	r2, [r3, #0]
  *cur_seg = seg;
 8031f8c:	68fb      	ldr	r3, [r7, #12]
 8031f8e:	68ba      	ldr	r2, [r7, #8]
 8031f90:	601a      	str	r2, [r3, #0]
#if TCP_OVERSIZE
  if (seg->next == NULL) {
 8031f92:	68bb      	ldr	r3, [r7, #8]
 8031f94:	681b      	ldr	r3, [r3, #0]
 8031f96:	2b00      	cmp	r3, #0
 8031f98:	d103      	bne.n	8031fa2 <tcp_rexmit+0xa2>
    /* the retransmitted segment is last in unsent, so reset unsent_oversize */
    pcb->unsent_oversize = 0;
 8031f9a:	687b      	ldr	r3, [r7, #4]
 8031f9c:	2200      	movs	r2, #0
 8031f9e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  }
#endif /* TCP_OVERSIZE */

  if (pcb->nrtx < 0xFF) {
 8031fa2:	687b      	ldr	r3, [r7, #4]
 8031fa4:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8031fa8:	2bff      	cmp	r3, #255	; 0xff
 8031faa:	d007      	beq.n	8031fbc <tcp_rexmit+0xbc>
    ++pcb->nrtx;
 8031fac:	687b      	ldr	r3, [r7, #4]
 8031fae:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8031fb2:	3301      	adds	r3, #1
 8031fb4:	b2da      	uxtb	r2, r3
 8031fb6:	687b      	ldr	r3, [r7, #4]
 8031fb8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }

  /* Don't take any rtt measurements after retransmitting. */
  pcb->rttest = 0;
 8031fbc:	687b      	ldr	r3, [r7, #4]
 8031fbe:	2200      	movs	r2, #0
 8031fc0:	635a      	str	r2, [r3, #52]	; 0x34

  /* Do the actual retransmission. */
  MIB2_STATS_INC(mib2.tcpretranssegs);
  /* No need to call tcp_output: we are always called from tcp_input()
     and thus tcp_output directly returns. */
  return ERR_OK;
 8031fc2:	2300      	movs	r3, #0
}
 8031fc4:	4618      	mov	r0, r3
 8031fc6:	3714      	adds	r7, #20
 8031fc8:	46bd      	mov	sp, r7
 8031fca:	bd90      	pop	{r4, r7, pc}
 8031fcc:	08039728 	.word	0x08039728
 8031fd0:	08039dc8 	.word	0x08039dc8
 8031fd4:	0803977c 	.word	0x0803977c

08031fd8 <tcp_rexmit_fast>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
void
tcp_rexmit_fast(struct tcp_pcb *pcb)
{
 8031fd8:	b580      	push	{r7, lr}
 8031fda:	b082      	sub	sp, #8
 8031fdc:	af00      	add	r7, sp, #0
 8031fde:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_fast: invalid pcb", pcb != NULL);
 8031fe0:	687b      	ldr	r3, [r7, #4]
 8031fe2:	2b00      	cmp	r3, #0
 8031fe4:	d106      	bne.n	8031ff4 <tcp_rexmit_fast+0x1c>
 8031fe6:	4b2a      	ldr	r3, [pc, #168]	; (8032090 <tcp_rexmit_fast+0xb8>)
 8031fe8:	f240 62f9 	movw	r2, #1785	; 0x6f9
 8031fec:	4929      	ldr	r1, [pc, #164]	; (8032094 <tcp_rexmit_fast+0xbc>)
 8031fee:	482a      	ldr	r0, [pc, #168]	; (8032098 <tcp_rexmit_fast+0xc0>)
 8031ff0:	f004 f8d2 	bl	8036198 <iprintf>

  if (pcb->unacked != NULL && !(pcb->flags & TF_INFR)) {
 8031ff4:	687b      	ldr	r3, [r7, #4]
 8031ff6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8031ff8:	2b00      	cmp	r3, #0
 8031ffa:	d044      	beq.n	8032086 <tcp_rexmit_fast+0xae>
 8031ffc:	687b      	ldr	r3, [r7, #4]
 8031ffe:	8b5b      	ldrh	r3, [r3, #26]
 8032000:	f003 0304 	and.w	r3, r3, #4
 8032004:	2b00      	cmp	r3, #0
 8032006:	d13e      	bne.n	8032086 <tcp_rexmit_fast+0xae>
    LWIP_DEBUGF(TCP_FR_DEBUG,
                ("tcp_receive: dupacks %"U16_F" (%"U32_F
                 "), fast retransmit %"U32_F"\n",
                 (u16_t)pcb->dupacks, pcb->lastack,
                 lwip_ntohl(pcb->unacked->tcphdr->seqno)));
    if (tcp_rexmit(pcb) == ERR_OK) {
 8032008:	6878      	ldr	r0, [r7, #4]
 803200a:	f7ff ff79 	bl	8031f00 <tcp_rexmit>
 803200e:	4603      	mov	r3, r0
 8032010:	2b00      	cmp	r3, #0
 8032012:	d138      	bne.n	8032086 <tcp_rexmit_fast+0xae>
      /* Set ssthresh to half of the minimum of the current
       * cwnd and the advertised window */
      pcb->ssthresh = LWIP_MIN(pcb->cwnd, pcb->snd_wnd) / 2;
 8032014:	687b      	ldr	r3, [r7, #4]
 8032016:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 803201a:	687b      	ldr	r3, [r7, #4]
 803201c:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8032020:	4293      	cmp	r3, r2
 8032022:	bf28      	it	cs
 8032024:	4613      	movcs	r3, r2
 8032026:	b29b      	uxth	r3, r3
 8032028:	0fda      	lsrs	r2, r3, #31
 803202a:	4413      	add	r3, r2
 803202c:	105b      	asrs	r3, r3, #1
 803202e:	b29a      	uxth	r2, r3
 8032030:	687b      	ldr	r3, [r7, #4]
 8032032:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

      /* The minimum value for ssthresh should be 2 MSS */
      if (pcb->ssthresh < (2U * pcb->mss)) {
 8032036:	687b      	ldr	r3, [r7, #4]
 8032038:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 803203c:	461a      	mov	r2, r3
 803203e:	687b      	ldr	r3, [r7, #4]
 8032040:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8032042:	005b      	lsls	r3, r3, #1
 8032044:	429a      	cmp	r2, r3
 8032046:	d206      	bcs.n	8032056 <tcp_rexmit_fast+0x7e>
        LWIP_DEBUGF(TCP_FR_DEBUG,
                    ("tcp_receive: The minimum value for ssthresh %"TCPWNDSIZE_F
                     " should be min 2 mss %"U16_F"...\n",
                     pcb->ssthresh, (u16_t)(2 * pcb->mss)));
        pcb->ssthresh = 2 * pcb->mss;
 8032048:	687b      	ldr	r3, [r7, #4]
 803204a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 803204c:	005b      	lsls	r3, r3, #1
 803204e:	b29a      	uxth	r2, r3
 8032050:	687b      	ldr	r3, [r7, #4]
 8032052:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
      }

      pcb->cwnd = pcb->ssthresh + 3 * pcb->mss;
 8032056:	687b      	ldr	r3, [r7, #4]
 8032058:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 803205c:	687b      	ldr	r3, [r7, #4]
 803205e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8032060:	4619      	mov	r1, r3
 8032062:	0049      	lsls	r1, r1, #1
 8032064:	440b      	add	r3, r1
 8032066:	b29b      	uxth	r3, r3
 8032068:	4413      	add	r3, r2
 803206a:	b29a      	uxth	r2, r3
 803206c:	687b      	ldr	r3, [r7, #4]
 803206e:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
      tcp_set_flags(pcb, TF_INFR);
 8032072:	687b      	ldr	r3, [r7, #4]
 8032074:	8b5b      	ldrh	r3, [r3, #26]
 8032076:	f043 0304 	orr.w	r3, r3, #4
 803207a:	b29a      	uxth	r2, r3
 803207c:	687b      	ldr	r3, [r7, #4]
 803207e:	835a      	strh	r2, [r3, #26]

      /* Reset the retransmission timer to prevent immediate rto retransmissions */
      pcb->rtime = 0;
 8032080:	687b      	ldr	r3, [r7, #4]
 8032082:	2200      	movs	r2, #0
 8032084:	861a      	strh	r2, [r3, #48]	; 0x30
    }
  }
}
 8032086:	bf00      	nop
 8032088:	3708      	adds	r7, #8
 803208a:	46bd      	mov	sp, r7
 803208c:	bd80      	pop	{r7, pc}
 803208e:	bf00      	nop
 8032090:	08039728 	.word	0x08039728
 8032094:	08039de0 	.word	0x08039de0
 8032098:	0803977c 	.word	0x0803977c

0803209c <tcp_output_alloc_header_common>:

static struct pbuf *
tcp_output_alloc_header_common(u32_t ackno, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */,
                        u16_t src_port, u16_t dst_port, u8_t flags, u16_t wnd)
{
 803209c:	b580      	push	{r7, lr}
 803209e:	b086      	sub	sp, #24
 80320a0:	af00      	add	r7, sp, #0
 80320a2:	60f8      	str	r0, [r7, #12]
 80320a4:	607b      	str	r3, [r7, #4]
 80320a6:	460b      	mov	r3, r1
 80320a8:	817b      	strh	r3, [r7, #10]
 80320aa:	4613      	mov	r3, r2
 80320ac:	813b      	strh	r3, [r7, #8]
  struct tcp_hdr *tcphdr;
  struct pbuf *p;

  p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
 80320ae:	897a      	ldrh	r2, [r7, #10]
 80320b0:	893b      	ldrh	r3, [r7, #8]
 80320b2:	4413      	add	r3, r2
 80320b4:	b29b      	uxth	r3, r3
 80320b6:	3314      	adds	r3, #20
 80320b8:	b29b      	uxth	r3, r3
 80320ba:	f44f 7220 	mov.w	r2, #640	; 0x280
 80320be:	4619      	mov	r1, r3
 80320c0:	2022      	movs	r0, #34	; 0x22
 80320c2:	f7f9 fc07 	bl	802b8d4 <pbuf_alloc>
 80320c6:	6178      	str	r0, [r7, #20]
  if (p != NULL) {
 80320c8:	697b      	ldr	r3, [r7, #20]
 80320ca:	2b00      	cmp	r3, #0
 80320cc:	d04d      	beq.n	803216a <tcp_output_alloc_header_common+0xce>
    LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
 80320ce:	897b      	ldrh	r3, [r7, #10]
 80320d0:	3313      	adds	r3, #19
 80320d2:	697a      	ldr	r2, [r7, #20]
 80320d4:	8952      	ldrh	r2, [r2, #10]
 80320d6:	4293      	cmp	r3, r2
 80320d8:	db06      	blt.n	80320e8 <tcp_output_alloc_header_common+0x4c>
 80320da:	4b26      	ldr	r3, [pc, #152]	; (8032174 <tcp_output_alloc_header_common+0xd8>)
 80320dc:	f240 7223 	movw	r2, #1827	; 0x723
 80320e0:	4925      	ldr	r1, [pc, #148]	; (8032178 <tcp_output_alloc_header_common+0xdc>)
 80320e2:	4826      	ldr	r0, [pc, #152]	; (803217c <tcp_output_alloc_header_common+0xe0>)
 80320e4:	f004 f858 	bl	8036198 <iprintf>
                (p->len >= TCP_HLEN + optlen));
    tcphdr = (struct tcp_hdr *)p->payload;
 80320e8:	697b      	ldr	r3, [r7, #20]
 80320ea:	685b      	ldr	r3, [r3, #4]
 80320ec:	613b      	str	r3, [r7, #16]
    tcphdr->src = lwip_htons(src_port);
 80320ee:	8c3b      	ldrh	r3, [r7, #32]
 80320f0:	4618      	mov	r0, r3
 80320f2:	f7f8 fa11 	bl	802a518 <lwip_htons>
 80320f6:	4603      	mov	r3, r0
 80320f8:	461a      	mov	r2, r3
 80320fa:	693b      	ldr	r3, [r7, #16]
 80320fc:	801a      	strh	r2, [r3, #0]
    tcphdr->dest = lwip_htons(dst_port);
 80320fe:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8032100:	4618      	mov	r0, r3
 8032102:	f7f8 fa09 	bl	802a518 <lwip_htons>
 8032106:	4603      	mov	r3, r0
 8032108:	461a      	mov	r2, r3
 803210a:	693b      	ldr	r3, [r7, #16]
 803210c:	805a      	strh	r2, [r3, #2]
    tcphdr->seqno = seqno_be;
 803210e:	693b      	ldr	r3, [r7, #16]
 8032110:	687a      	ldr	r2, [r7, #4]
 8032112:	605a      	str	r2, [r3, #4]
    tcphdr->ackno = lwip_htonl(ackno);
 8032114:	68f8      	ldr	r0, [r7, #12]
 8032116:	f7f8 fa14 	bl	802a542 <lwip_htonl>
 803211a:	4602      	mov	r2, r0
 803211c:	693b      	ldr	r3, [r7, #16]
 803211e:	609a      	str	r2, [r3, #8]
    TCPH_HDRLEN_FLAGS_SET(tcphdr, (5 + optlen / 4), flags);
 8032120:	897b      	ldrh	r3, [r7, #10]
 8032122:	089b      	lsrs	r3, r3, #2
 8032124:	b29b      	uxth	r3, r3
 8032126:	3305      	adds	r3, #5
 8032128:	b29b      	uxth	r3, r3
 803212a:	031b      	lsls	r3, r3, #12
 803212c:	b29a      	uxth	r2, r3
 803212e:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8032132:	b29b      	uxth	r3, r3
 8032134:	4313      	orrs	r3, r2
 8032136:	b29b      	uxth	r3, r3
 8032138:	4618      	mov	r0, r3
 803213a:	f7f8 f9ed 	bl	802a518 <lwip_htons>
 803213e:	4603      	mov	r3, r0
 8032140:	461a      	mov	r2, r3
 8032142:	693b      	ldr	r3, [r7, #16]
 8032144:	819a      	strh	r2, [r3, #12]
    tcphdr->wnd = lwip_htons(wnd);
 8032146:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8032148:	4618      	mov	r0, r3
 803214a:	f7f8 f9e5 	bl	802a518 <lwip_htons>
 803214e:	4603      	mov	r3, r0
 8032150:	461a      	mov	r2, r3
 8032152:	693b      	ldr	r3, [r7, #16]
 8032154:	81da      	strh	r2, [r3, #14]
    tcphdr->chksum = 0;
 8032156:	693b      	ldr	r3, [r7, #16]
 8032158:	2200      	movs	r2, #0
 803215a:	741a      	strb	r2, [r3, #16]
 803215c:	2200      	movs	r2, #0
 803215e:	745a      	strb	r2, [r3, #17]
    tcphdr->urgp = 0;
 8032160:	693b      	ldr	r3, [r7, #16]
 8032162:	2200      	movs	r2, #0
 8032164:	749a      	strb	r2, [r3, #18]
 8032166:	2200      	movs	r2, #0
 8032168:	74da      	strb	r2, [r3, #19]
  }
  return p;
 803216a:	697b      	ldr	r3, [r7, #20]
}
 803216c:	4618      	mov	r0, r3
 803216e:	3718      	adds	r7, #24
 8032170:	46bd      	mov	sp, r7
 8032172:	bd80      	pop	{r7, pc}
 8032174:	08039728 	.word	0x08039728
 8032178:	08039e00 	.word	0x08039e00
 803217c:	0803977c 	.word	0x0803977c

08032180 <tcp_output_alloc_header>:
 * @return pbuf with p->payload being the tcp_hdr
 */
static struct pbuf *
tcp_output_alloc_header(struct tcp_pcb *pcb, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */)
{
 8032180:	b5b0      	push	{r4, r5, r7, lr}
 8032182:	b08a      	sub	sp, #40	; 0x28
 8032184:	af04      	add	r7, sp, #16
 8032186:	60f8      	str	r0, [r7, #12]
 8032188:	607b      	str	r3, [r7, #4]
 803218a:	460b      	mov	r3, r1
 803218c:	817b      	strh	r3, [r7, #10]
 803218e:	4613      	mov	r3, r2
 8032190:	813b      	strh	r3, [r7, #8]
  struct pbuf *p;

  LWIP_ASSERT("tcp_output_alloc_header: invalid pcb", pcb != NULL);
 8032192:	68fb      	ldr	r3, [r7, #12]
 8032194:	2b00      	cmp	r3, #0
 8032196:	d106      	bne.n	80321a6 <tcp_output_alloc_header+0x26>
 8032198:	4b15      	ldr	r3, [pc, #84]	; (80321f0 <tcp_output_alloc_header+0x70>)
 803219a:	f240 7242 	movw	r2, #1858	; 0x742
 803219e:	4915      	ldr	r1, [pc, #84]	; (80321f4 <tcp_output_alloc_header+0x74>)
 80321a0:	4815      	ldr	r0, [pc, #84]	; (80321f8 <tcp_output_alloc_header+0x78>)
 80321a2:	f003 fff9 	bl	8036198 <iprintf>

  p = tcp_output_alloc_header_common(pcb->rcv_nxt, optlen, datalen,
 80321a6:	68fb      	ldr	r3, [r7, #12]
 80321a8:	6a58      	ldr	r0, [r3, #36]	; 0x24
 80321aa:	68fb      	ldr	r3, [r7, #12]
 80321ac:	8adb      	ldrh	r3, [r3, #22]
 80321ae:	68fa      	ldr	r2, [r7, #12]
 80321b0:	8b12      	ldrh	r2, [r2, #24]
 80321b2:	68f9      	ldr	r1, [r7, #12]
 80321b4:	8d49      	ldrh	r1, [r1, #42]	; 0x2a
 80321b6:	893d      	ldrh	r5, [r7, #8]
 80321b8:	897c      	ldrh	r4, [r7, #10]
 80321ba:	9103      	str	r1, [sp, #12]
 80321bc:	2110      	movs	r1, #16
 80321be:	9102      	str	r1, [sp, #8]
 80321c0:	9201      	str	r2, [sp, #4]
 80321c2:	9300      	str	r3, [sp, #0]
 80321c4:	687b      	ldr	r3, [r7, #4]
 80321c6:	462a      	mov	r2, r5
 80321c8:	4621      	mov	r1, r4
 80321ca:	f7ff ff67 	bl	803209c <tcp_output_alloc_header_common>
 80321ce:	6178      	str	r0, [r7, #20]
    seqno_be, pcb->local_port, pcb->remote_port, TCP_ACK,
    TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
  if (p != NULL) {
 80321d0:	697b      	ldr	r3, [r7, #20]
 80321d2:	2b00      	cmp	r3, #0
 80321d4:	d006      	beq.n	80321e4 <tcp_output_alloc_header+0x64>
    /* If we're sending a packet, update the announced right window edge */
    pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 80321d6:	68fb      	ldr	r3, [r7, #12]
 80321d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80321da:	68fa      	ldr	r2, [r7, #12]
 80321dc:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 80321de:	441a      	add	r2, r3
 80321e0:	68fb      	ldr	r3, [r7, #12]
 80321e2:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  return p;
 80321e4:	697b      	ldr	r3, [r7, #20]
}
 80321e6:	4618      	mov	r0, r3
 80321e8:	3718      	adds	r7, #24
 80321ea:	46bd      	mov	sp, r7
 80321ec:	bdb0      	pop	{r4, r5, r7, pc}
 80321ee:	bf00      	nop
 80321f0:	08039728 	.word	0x08039728
 80321f4:	08039e30 	.word	0x08039e30
 80321f8:	0803977c 	.word	0x0803977c

080321fc <tcp_output_fill_options>:

/* Fill in options for control segments */
static void
tcp_output_fill_options(const struct tcp_pcb *pcb, struct pbuf *p, u8_t optflags, u8_t num_sacks)
{
 80321fc:	b580      	push	{r7, lr}
 80321fe:	b088      	sub	sp, #32
 8032200:	af00      	add	r7, sp, #0
 8032202:	60f8      	str	r0, [r7, #12]
 8032204:	60b9      	str	r1, [r7, #8]
 8032206:	4611      	mov	r1, r2
 8032208:	461a      	mov	r2, r3
 803220a:	460b      	mov	r3, r1
 803220c:	71fb      	strb	r3, [r7, #7]
 803220e:	4613      	mov	r3, r2
 8032210:	71bb      	strb	r3, [r7, #6]
  struct tcp_hdr *tcphdr;
  u32_t *opts;
  u16_t sacks_len = 0;
 8032212:	2300      	movs	r3, #0
 8032214:	83fb      	strh	r3, [r7, #30]

  LWIP_ASSERT("tcp_output_fill_options: invalid pbuf", p != NULL);
 8032216:	68bb      	ldr	r3, [r7, #8]
 8032218:	2b00      	cmp	r3, #0
 803221a:	d106      	bne.n	803222a <tcp_output_fill_options+0x2e>
 803221c:	4b13      	ldr	r3, [pc, #76]	; (803226c <tcp_output_fill_options+0x70>)
 803221e:	f240 7256 	movw	r2, #1878	; 0x756
 8032222:	4913      	ldr	r1, [pc, #76]	; (8032270 <tcp_output_fill_options+0x74>)
 8032224:	4813      	ldr	r0, [pc, #76]	; (8032274 <tcp_output_fill_options+0x78>)
 8032226:	f003 ffb7 	bl	8036198 <iprintf>

  tcphdr = (struct tcp_hdr *)p->payload;
 803222a:	68bb      	ldr	r3, [r7, #8]
 803222c:	685b      	ldr	r3, [r3, #4]
 803222e:	61bb      	str	r3, [r7, #24]
  opts = (u32_t *)(void *)(tcphdr + 1);
 8032230:	69bb      	ldr	r3, [r7, #24]
 8032232:	3314      	adds	r3, #20
 8032234:	617b      	str	r3, [r7, #20]
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(p, tcphdr, pcb, opts);
#endif

  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(sacks_len);
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(tcphdr + 1)) + sacks_len * 4 + LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb));
 8032236:	69bb      	ldr	r3, [r7, #24]
 8032238:	f103 0214 	add.w	r2, r3, #20
 803223c:	8bfb      	ldrh	r3, [r7, #30]
 803223e:	009b      	lsls	r3, r3, #2
 8032240:	4619      	mov	r1, r3
 8032242:	79fb      	ldrb	r3, [r7, #7]
 8032244:	009b      	lsls	r3, r3, #2
 8032246:	f003 0304 	and.w	r3, r3, #4
 803224a:	440b      	add	r3, r1
 803224c:	4413      	add	r3, r2
 803224e:	697a      	ldr	r2, [r7, #20]
 8032250:	429a      	cmp	r2, r3
 8032252:	d006      	beq.n	8032262 <tcp_output_fill_options+0x66>
 8032254:	4b05      	ldr	r3, [pc, #20]	; (803226c <tcp_output_fill_options+0x70>)
 8032256:	f240 7275 	movw	r2, #1909	; 0x775
 803225a:	4907      	ldr	r1, [pc, #28]	; (8032278 <tcp_output_fill_options+0x7c>)
 803225c:	4805      	ldr	r0, [pc, #20]	; (8032274 <tcp_output_fill_options+0x78>)
 803225e:	f003 ff9b 	bl	8036198 <iprintf>
  LWIP_UNUSED_ARG(optflags); /* for LWIP_NOASSERT */
  LWIP_UNUSED_ARG(opts); /* for LWIP_NOASSERT */
}
 8032262:	bf00      	nop
 8032264:	3720      	adds	r7, #32
 8032266:	46bd      	mov	sp, r7
 8032268:	bd80      	pop	{r7, pc}
 803226a:	bf00      	nop
 803226c:	08039728 	.word	0x08039728
 8032270:	08039e58 	.word	0x08039e58
 8032274:	0803977c 	.word	0x0803977c
 8032278:	08039d50 	.word	0x08039d50

0803227c <tcp_output_control_segment>:
 * header checksum and calling ip_output_if while handling netif hints and stats.
 */
static err_t
tcp_output_control_segment(const struct tcp_pcb *pcb, struct pbuf *p,
                           const ip_addr_t *src, const ip_addr_t *dst)
{
 803227c:	b580      	push	{r7, lr}
 803227e:	b08a      	sub	sp, #40	; 0x28
 8032280:	af04      	add	r7, sp, #16
 8032282:	60f8      	str	r0, [r7, #12]
 8032284:	60b9      	str	r1, [r7, #8]
 8032286:	607a      	str	r2, [r7, #4]
 8032288:	603b      	str	r3, [r7, #0]
  err_t err;
  struct netif *netif;

  LWIP_ASSERT("tcp_output_control_segment: invalid pbuf", p != NULL);
 803228a:	68bb      	ldr	r3, [r7, #8]
 803228c:	2b00      	cmp	r3, #0
 803228e:	d106      	bne.n	803229e <tcp_output_control_segment+0x22>
 8032290:	4b20      	ldr	r3, [pc, #128]	; (8032314 <tcp_output_control_segment+0x98>)
 8032292:	f240 7287 	movw	r2, #1927	; 0x787
 8032296:	4920      	ldr	r1, [pc, #128]	; (8032318 <tcp_output_control_segment+0x9c>)
 8032298:	4820      	ldr	r0, [pc, #128]	; (803231c <tcp_output_control_segment+0xa0>)
 803229a:	f003 ff7d 	bl	8036198 <iprintf>

  netif = tcp_route(pcb, src, dst);
 803229e:	683a      	ldr	r2, [r7, #0]
 80322a0:	6879      	ldr	r1, [r7, #4]
 80322a2:	68f8      	ldr	r0, [r7, #12]
 80322a4:	f7fe faa4 	bl	80307f0 <tcp_route>
 80322a8:	6138      	str	r0, [r7, #16]
  if (netif == NULL) {
 80322aa:	693b      	ldr	r3, [r7, #16]
 80322ac:	2b00      	cmp	r3, #0
 80322ae:	d102      	bne.n	80322b6 <tcp_output_control_segment+0x3a>
    err = ERR_RTE;
 80322b0:	23fc      	movs	r3, #252	; 0xfc
 80322b2:	75fb      	strb	r3, [r7, #23]
 80322b4:	e024      	b.n	8032300 <tcp_output_control_segment+0x84>
      struct tcp_hdr *tcphdr = (struct tcp_hdr *)p->payload;
      tcphdr->chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
                                        src, dst);
    }
#endif
    if (pcb != NULL) {
 80322b6:	68fb      	ldr	r3, [r7, #12]
 80322b8:	2b00      	cmp	r3, #0
 80322ba:	d006      	beq.n	80322ca <tcp_output_control_segment+0x4e>
      NETIF_SET_HINTS(netif, LWIP_CONST_CAST(struct netif_hint*, &(pcb->netif_hints)));
      ttl = pcb->ttl;
 80322bc:	68fb      	ldr	r3, [r7, #12]
 80322be:	7adb      	ldrb	r3, [r3, #11]
 80322c0:	75bb      	strb	r3, [r7, #22]
      tos = pcb->tos;
 80322c2:	68fb      	ldr	r3, [r7, #12]
 80322c4:	7a9b      	ldrb	r3, [r3, #10]
 80322c6:	757b      	strb	r3, [r7, #21]
 80322c8:	e003      	b.n	80322d2 <tcp_output_control_segment+0x56>
    } else {
      /* Send output with hardcoded TTL/HL since we have no access to the pcb */
      ttl = TCP_TTL;
 80322ca:	23ff      	movs	r3, #255	; 0xff
 80322cc:	75bb      	strb	r3, [r7, #22]
      tos = 0;
 80322ce:	2300      	movs	r3, #0
 80322d0:	757b      	strb	r3, [r7, #21]
    }
    TCP_STATS_INC(tcp.xmit);
 80322d2:	4b13      	ldr	r3, [pc, #76]	; (8032320 <tcp_output_control_segment+0xa4>)
 80322d4:	f8b3 3090 	ldrh.w	r3, [r3, #144]	; 0x90
 80322d8:	3301      	adds	r3, #1
 80322da:	b29a      	uxth	r2, r3
 80322dc:	4b10      	ldr	r3, [pc, #64]	; (8032320 <tcp_output_control_segment+0xa4>)
 80322de:	f8a3 2090 	strh.w	r2, [r3, #144]	; 0x90
    err = ip_output_if(p, src, dst, ttl, tos, IP_PROTO_TCP, netif);
 80322e2:	7dba      	ldrb	r2, [r7, #22]
 80322e4:	693b      	ldr	r3, [r7, #16]
 80322e6:	9302      	str	r3, [sp, #8]
 80322e8:	2306      	movs	r3, #6
 80322ea:	9301      	str	r3, [sp, #4]
 80322ec:	7d7b      	ldrb	r3, [r7, #21]
 80322ee:	9300      	str	r3, [sp, #0]
 80322f0:	4613      	mov	r3, r2
 80322f2:	683a      	ldr	r2, [r7, #0]
 80322f4:	6879      	ldr	r1, [r7, #4]
 80322f6:	68b8      	ldr	r0, [r7, #8]
 80322f8:	f002 f9f8 	bl	80346ec <ip4_output_if>
 80322fc:	4603      	mov	r3, r0
 80322fe:	75fb      	strb	r3, [r7, #23]
    NETIF_RESET_HINTS(netif);
  }
  pbuf_free(p);
 8032300:	68b8      	ldr	r0, [r7, #8]
 8032302:	f7f9 fdcb 	bl	802be9c <pbuf_free>
  return err;
 8032306:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 803230a:	4618      	mov	r0, r3
 803230c:	3718      	adds	r7, #24
 803230e:	46bd      	mov	sp, r7
 8032310:	bd80      	pop	{r7, pc}
 8032312:	bf00      	nop
 8032314:	08039728 	.word	0x08039728
 8032318:	08039e80 	.word	0x08039e80
 803231c:	0803977c 	.word	0x0803977c
 8032320:	2000ed10 	.word	0x2000ed10

08032324 <tcp_rst>:
 */
void
tcp_rst(const struct tcp_pcb *pcb, u32_t seqno, u32_t ackno,
        const ip_addr_t *local_ip, const ip_addr_t *remote_ip,
        u16_t local_port, u16_t remote_port)
{
 8032324:	b590      	push	{r4, r7, lr}
 8032326:	b08b      	sub	sp, #44	; 0x2c
 8032328:	af04      	add	r7, sp, #16
 803232a:	60f8      	str	r0, [r7, #12]
 803232c:	60b9      	str	r1, [r7, #8]
 803232e:	607a      	str	r2, [r7, #4]
 8032330:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  u16_t wnd;
  u8_t optlen;

  LWIP_ASSERT("tcp_rst: invalid local_ip", local_ip != NULL);
 8032332:	683b      	ldr	r3, [r7, #0]
 8032334:	2b00      	cmp	r3, #0
 8032336:	d106      	bne.n	8032346 <tcp_rst+0x22>
 8032338:	4b1f      	ldr	r3, [pc, #124]	; (80323b8 <tcp_rst+0x94>)
 803233a:	f240 72c4 	movw	r2, #1988	; 0x7c4
 803233e:	491f      	ldr	r1, [pc, #124]	; (80323bc <tcp_rst+0x98>)
 8032340:	481f      	ldr	r0, [pc, #124]	; (80323c0 <tcp_rst+0x9c>)
 8032342:	f003 ff29 	bl	8036198 <iprintf>
  LWIP_ASSERT("tcp_rst: invalid remote_ip", remote_ip != NULL);
 8032346:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8032348:	2b00      	cmp	r3, #0
 803234a:	d106      	bne.n	803235a <tcp_rst+0x36>
 803234c:	4b1a      	ldr	r3, [pc, #104]	; (80323b8 <tcp_rst+0x94>)
 803234e:	f240 72c5 	movw	r2, #1989	; 0x7c5
 8032352:	491c      	ldr	r1, [pc, #112]	; (80323c4 <tcp_rst+0xa0>)
 8032354:	481a      	ldr	r0, [pc, #104]	; (80323c0 <tcp_rst+0x9c>)
 8032356:	f003 ff1f 	bl	8036198 <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 803235a:	2300      	movs	r3, #0
 803235c:	75fb      	strb	r3, [r7, #23]

#if LWIP_WND_SCALE
  wnd = PP_HTONS(((TCP_WND >> TCP_RCV_SCALE) & 0xFFFF));
#else
  wnd = PP_HTONS(TCP_WND);
 803235e:	f246 0308 	movw	r3, #24584	; 0x6008
 8032362:	82bb      	strh	r3, [r7, #20]
#endif

  p = tcp_output_alloc_header_common(ackno, optlen, 0, lwip_htonl(seqno), local_port,
 8032364:	7dfb      	ldrb	r3, [r7, #23]
 8032366:	b29c      	uxth	r4, r3
 8032368:	68b8      	ldr	r0, [r7, #8]
 803236a:	f7f8 f8ea 	bl	802a542 <lwip_htonl>
 803236e:	4602      	mov	r2, r0
 8032370:	8abb      	ldrh	r3, [r7, #20]
 8032372:	9303      	str	r3, [sp, #12]
 8032374:	2314      	movs	r3, #20
 8032376:	9302      	str	r3, [sp, #8]
 8032378:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 803237a:	9301      	str	r3, [sp, #4]
 803237c:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 803237e:	9300      	str	r3, [sp, #0]
 8032380:	4613      	mov	r3, r2
 8032382:	2200      	movs	r2, #0
 8032384:	4621      	mov	r1, r4
 8032386:	6878      	ldr	r0, [r7, #4]
 8032388:	f7ff fe88 	bl	803209c <tcp_output_alloc_header_common>
 803238c:	6138      	str	r0, [r7, #16]
    remote_port, TCP_RST | TCP_ACK, wnd);
  if (p == NULL) {
 803238e:	693b      	ldr	r3, [r7, #16]
 8032390:	2b00      	cmp	r3, #0
 8032392:	d00c      	beq.n	80323ae <tcp_rst+0x8a>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_rst: could not allocate memory for pbuf\n"));
    return;
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 8032394:	7dfb      	ldrb	r3, [r7, #23]
 8032396:	2200      	movs	r2, #0
 8032398:	6939      	ldr	r1, [r7, #16]
 803239a:	68f8      	ldr	r0, [r7, #12]
 803239c:	f7ff ff2e 	bl	80321fc <tcp_output_fill_options>

  MIB2_STATS_INC(mib2.tcpoutrsts);

  tcp_output_control_segment(pcb, p, local_ip, remote_ip);
 80323a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80323a2:	683a      	ldr	r2, [r7, #0]
 80323a4:	6939      	ldr	r1, [r7, #16]
 80323a6:	68f8      	ldr	r0, [r7, #12]
 80323a8:	f7ff ff68 	bl	803227c <tcp_output_control_segment>
 80323ac:	e000      	b.n	80323b0 <tcp_rst+0x8c>
    return;
 80323ae:	bf00      	nop
  LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_rst: seqno %"U32_F" ackno %"U32_F".\n", seqno, ackno));
}
 80323b0:	371c      	adds	r7, #28
 80323b2:	46bd      	mov	sp, r7
 80323b4:	bd90      	pop	{r4, r7, pc}
 80323b6:	bf00      	nop
 80323b8:	08039728 	.word	0x08039728
 80323bc:	08039eac 	.word	0x08039eac
 80323c0:	0803977c 	.word	0x0803977c
 80323c4:	08039ec8 	.word	0x08039ec8

080323c8 <tcp_send_empty_ack>:
 *
 * @param pcb Protocol control block for the TCP connection to send the ACK
 */
err_t
tcp_send_empty_ack(struct tcp_pcb *pcb)
{
 80323c8:	b590      	push	{r4, r7, lr}
 80323ca:	b087      	sub	sp, #28
 80323cc:	af00      	add	r7, sp, #0
 80323ce:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen, optflags = 0;
 80323d0:	2300      	movs	r3, #0
 80323d2:	75fb      	strb	r3, [r7, #23]
  u8_t num_sacks = 0;
 80323d4:	2300      	movs	r3, #0
 80323d6:	75bb      	strb	r3, [r7, #22]

  LWIP_ASSERT("tcp_send_empty_ack: invalid pcb", pcb != NULL);
 80323d8:	687b      	ldr	r3, [r7, #4]
 80323da:	2b00      	cmp	r3, #0
 80323dc:	d106      	bne.n	80323ec <tcp_send_empty_ack+0x24>
 80323de:	4b28      	ldr	r3, [pc, #160]	; (8032480 <tcp_send_empty_ack+0xb8>)
 80323e0:	f240 72ea 	movw	r2, #2026	; 0x7ea
 80323e4:	4927      	ldr	r1, [pc, #156]	; (8032484 <tcp_send_empty_ack+0xbc>)
 80323e6:	4828      	ldr	r0, [pc, #160]	; (8032488 <tcp_send_empty_ack+0xc0>)
 80323e8:	f003 fed6 	bl	8036198 <iprintf>
#if LWIP_TCP_TIMESTAMPS
  if (pcb->flags & TF_TIMESTAMP) {
    optflags = TF_SEG_OPTS_TS;
  }
#endif
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 80323ec:	7dfb      	ldrb	r3, [r7, #23]
 80323ee:	009b      	lsls	r3, r3, #2
 80323f0:	b2db      	uxtb	r3, r3
 80323f2:	f003 0304 	and.w	r3, r3, #4
 80323f6:	757b      	strb	r3, [r7, #21]
  if ((num_sacks = tcp_get_num_sacks(pcb, optlen)) > 0) {
    optlen += 4 + num_sacks * 8; /* 4 bytes for header (including 2*NOP), plus 8B for each SACK */
  }
#endif

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt));
 80323f8:	7d7b      	ldrb	r3, [r7, #21]
 80323fa:	b29c      	uxth	r4, r3
 80323fc:	687b      	ldr	r3, [r7, #4]
 80323fe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8032400:	4618      	mov	r0, r3
 8032402:	f7f8 f89e 	bl	802a542 <lwip_htonl>
 8032406:	4603      	mov	r3, r0
 8032408:	2200      	movs	r2, #0
 803240a:	4621      	mov	r1, r4
 803240c:	6878      	ldr	r0, [r7, #4]
 803240e:	f7ff feb7 	bl	8032180 <tcp_output_alloc_header>
 8032412:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 8032414:	693b      	ldr	r3, [r7, #16]
 8032416:	2b00      	cmp	r3, #0
 8032418:	d109      	bne.n	803242e <tcp_send_empty_ack+0x66>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 803241a:	687b      	ldr	r3, [r7, #4]
 803241c:	8b5b      	ldrh	r3, [r3, #26]
 803241e:	f043 0303 	orr.w	r3, r3, #3
 8032422:	b29a      	uxth	r2, r3
 8032424:	687b      	ldr	r3, [r7, #4]
 8032426:	835a      	strh	r2, [r3, #26]
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output: (ACK) could not allocate pbuf\n"));
    return ERR_BUF;
 8032428:	f06f 0301 	mvn.w	r3, #1
 803242c:	e023      	b.n	8032476 <tcp_send_empty_ack+0xae>
  }
  tcp_output_fill_options(pcb, p, optflags, num_sacks);
 803242e:	7dbb      	ldrb	r3, [r7, #22]
 8032430:	7dfa      	ldrb	r2, [r7, #23]
 8032432:	6939      	ldr	r1, [r7, #16]
 8032434:	6878      	ldr	r0, [r7, #4]
 8032436:	f7ff fee1 	bl	80321fc <tcp_output_fill_options>
  pcb->ts_lastacksent = pcb->rcv_nxt;
#endif

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG,
              ("tcp_output: sending ACK for %"U32_F"\n", pcb->rcv_nxt));
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 803243a:	687a      	ldr	r2, [r7, #4]
 803243c:	687b      	ldr	r3, [r7, #4]
 803243e:	3304      	adds	r3, #4
 8032440:	6939      	ldr	r1, [r7, #16]
 8032442:	6878      	ldr	r0, [r7, #4]
 8032444:	f7ff ff1a 	bl	803227c <tcp_output_control_segment>
 8032448:	4603      	mov	r3, r0
 803244a:	73fb      	strb	r3, [r7, #15]
  if (err != ERR_OK) {
 803244c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8032450:	2b00      	cmp	r3, #0
 8032452:	d007      	beq.n	8032464 <tcp_send_empty_ack+0x9c>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8032454:	687b      	ldr	r3, [r7, #4]
 8032456:	8b5b      	ldrh	r3, [r3, #26]
 8032458:	f043 0303 	orr.w	r3, r3, #3
 803245c:	b29a      	uxth	r2, r3
 803245e:	687b      	ldr	r3, [r7, #4]
 8032460:	835a      	strh	r2, [r3, #26]
 8032462:	e006      	b.n	8032472 <tcp_send_empty_ack+0xaa>
  } else {
    /* remove ACK flags from the PCB, as we sent an empty ACK now */
    tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8032464:	687b      	ldr	r3, [r7, #4]
 8032466:	8b5b      	ldrh	r3, [r3, #26]
 8032468:	f023 0303 	bic.w	r3, r3, #3
 803246c:	b29a      	uxth	r2, r3
 803246e:	687b      	ldr	r3, [r7, #4]
 8032470:	835a      	strh	r2, [r3, #26]
  }

  return err;
 8032472:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8032476:	4618      	mov	r0, r3
 8032478:	371c      	adds	r7, #28
 803247a:	46bd      	mov	sp, r7
 803247c:	bd90      	pop	{r4, r7, pc}
 803247e:	bf00      	nop
 8032480:	08039728 	.word	0x08039728
 8032484:	08039ee4 	.word	0x08039ee4
 8032488:	0803977c 	.word	0x0803977c

0803248c <tcp_keepalive>:
 *
 * @param pcb the tcp_pcb for which to send a keepalive packet
 */
err_t
tcp_keepalive(struct tcp_pcb *pcb)
{
 803248c:	b590      	push	{r4, r7, lr}
 803248e:	b087      	sub	sp, #28
 8032490:	af00      	add	r7, sp, #0
 8032492:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 8032494:	2300      	movs	r3, #0
 8032496:	75fb      	strb	r3, [r7, #23]

  LWIP_ASSERT("tcp_keepalive: invalid pcb", pcb != NULL);
 8032498:	687b      	ldr	r3, [r7, #4]
 803249a:	2b00      	cmp	r3, #0
 803249c:	d106      	bne.n	80324ac <tcp_keepalive+0x20>
 803249e:	4b18      	ldr	r3, [pc, #96]	; (8032500 <tcp_keepalive+0x74>)
 80324a0:	f640 0224 	movw	r2, #2084	; 0x824
 80324a4:	4917      	ldr	r1, [pc, #92]	; (8032504 <tcp_keepalive+0x78>)
 80324a6:	4818      	ldr	r0, [pc, #96]	; (8032508 <tcp_keepalive+0x7c>)
 80324a8:	f003 fe76 	bl	8036198 <iprintf>
  LWIP_DEBUGF(TCP_DEBUG, ("\n"));

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: tcp_ticks %"U32_F"   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
                          tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt - 1));
 80324ac:	7dfb      	ldrb	r3, [r7, #23]
 80324ae:	b29c      	uxth	r4, r3
 80324b0:	687b      	ldr	r3, [r7, #4]
 80324b2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80324b4:	3b01      	subs	r3, #1
 80324b6:	4618      	mov	r0, r3
 80324b8:	f7f8 f843 	bl	802a542 <lwip_htonl>
 80324bc:	4603      	mov	r3, r0
 80324be:	2200      	movs	r2, #0
 80324c0:	4621      	mov	r1, r4
 80324c2:	6878      	ldr	r0, [r7, #4]
 80324c4:	f7ff fe5c 	bl	8032180 <tcp_output_alloc_header>
 80324c8:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 80324ca:	693b      	ldr	r3, [r7, #16]
 80324cc:	2b00      	cmp	r3, #0
 80324ce:	d102      	bne.n	80324d6 <tcp_keepalive+0x4a>
    LWIP_DEBUGF(TCP_DEBUG,
                ("tcp_keepalive: could not allocate memory for pbuf\n"));
    return ERR_MEM;
 80324d0:	f04f 33ff 	mov.w	r3, #4294967295
 80324d4:	e010      	b.n	80324f8 <tcp_keepalive+0x6c>
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 80324d6:	7dfb      	ldrb	r3, [r7, #23]
 80324d8:	2200      	movs	r2, #0
 80324da:	6939      	ldr	r1, [r7, #16]
 80324dc:	6878      	ldr	r0, [r7, #4]
 80324de:	f7ff fe8d 	bl	80321fc <tcp_output_fill_options>
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 80324e2:	687a      	ldr	r2, [r7, #4]
 80324e4:	687b      	ldr	r3, [r7, #4]
 80324e6:	3304      	adds	r3, #4
 80324e8:	6939      	ldr	r1, [r7, #16]
 80324ea:	6878      	ldr	r0, [r7, #4]
 80324ec:	f7ff fec6 	bl	803227c <tcp_output_control_segment>
 80324f0:	4603      	mov	r3, r0
 80324f2:	73fb      	strb	r3, [r7, #15]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: seqno %"U32_F" ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 80324f4:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80324f8:	4618      	mov	r0, r3
 80324fa:	371c      	adds	r7, #28
 80324fc:	46bd      	mov	sp, r7
 80324fe:	bd90      	pop	{r4, r7, pc}
 8032500:	08039728 	.word	0x08039728
 8032504:	08039f04 	.word	0x08039f04
 8032508:	0803977c 	.word	0x0803977c

0803250c <tcp_zero_window_probe>:
 *
 * @param pcb the tcp_pcb for which to send a zero-window probe packet
 */
err_t
tcp_zero_window_probe(struct tcp_pcb *pcb)
{
 803250c:	b590      	push	{r4, r7, lr}
 803250e:	b08b      	sub	sp, #44	; 0x2c
 8032510:	af00      	add	r7, sp, #0
 8032512:	6078      	str	r0, [r7, #4]
  struct tcp_hdr *tcphdr;
  struct tcp_seg *seg;
  u16_t len;
  u8_t is_fin;
  u32_t snd_nxt;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 8032514:	2300      	movs	r3, #0
 8032516:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  LWIP_ASSERT("tcp_zero_window_probe: invalid pcb", pcb != NULL);
 803251a:	687b      	ldr	r3, [r7, #4]
 803251c:	2b00      	cmp	r3, #0
 803251e:	d106      	bne.n	803252e <tcp_zero_window_probe+0x22>
 8032520:	4b4c      	ldr	r3, [pc, #304]	; (8032654 <tcp_zero_window_probe+0x148>)
 8032522:	f640 024f 	movw	r2, #2127	; 0x84f
 8032526:	494c      	ldr	r1, [pc, #304]	; (8032658 <tcp_zero_window_probe+0x14c>)
 8032528:	484c      	ldr	r0, [pc, #304]	; (803265c <tcp_zero_window_probe+0x150>)
 803252a:	f003 fe35 	bl	8036198 <iprintf>
              ("tcp_zero_window_probe: tcp_ticks %"U32_F
               "   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
               tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  /* Only consider unsent, persist timer should be off when there is data in-flight */
  seg = pcb->unsent;
 803252e:	687b      	ldr	r3, [r7, #4]
 8032530:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8032532:	623b      	str	r3, [r7, #32]
  if (seg == NULL) {
 8032534:	6a3b      	ldr	r3, [r7, #32]
 8032536:	2b00      	cmp	r3, #0
 8032538:	d101      	bne.n	803253e <tcp_zero_window_probe+0x32>
    /* Not expected, persist timer should be off when the send buffer is empty */
    return ERR_OK;
 803253a:	2300      	movs	r3, #0
 803253c:	e086      	b.n	803264c <tcp_zero_window_probe+0x140>

  /* increment probe count. NOTE: we record probe even if it fails
     to actually transmit due to an error. This ensures memory exhaustion/
     routing problem doesn't leave a zero-window pcb as an indefinite zombie.
     RTO mechanism has similar behavior, see pcb->nrtx */
  if (pcb->persist_probe < 0xFF) {
 803253e:	687b      	ldr	r3, [r7, #4]
 8032540:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 8032544:	2bff      	cmp	r3, #255	; 0xff
 8032546:	d007      	beq.n	8032558 <tcp_zero_window_probe+0x4c>
    ++pcb->persist_probe;
 8032548:	687b      	ldr	r3, [r7, #4]
 803254a:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 803254e:	3301      	adds	r3, #1
 8032550:	b2da      	uxtb	r2, r3
 8032552:	687b      	ldr	r3, [r7, #4]
 8032554:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
  }

  is_fin = ((TCPH_FLAGS(seg->tcphdr) & TCP_FIN) != 0) && (seg->len == 0);
 8032558:	6a3b      	ldr	r3, [r7, #32]
 803255a:	68db      	ldr	r3, [r3, #12]
 803255c:	899b      	ldrh	r3, [r3, #12]
 803255e:	b29b      	uxth	r3, r3
 8032560:	4618      	mov	r0, r3
 8032562:	f7f7 ffd9 	bl	802a518 <lwip_htons>
 8032566:	4603      	mov	r3, r0
 8032568:	b2db      	uxtb	r3, r3
 803256a:	f003 0301 	and.w	r3, r3, #1
 803256e:	2b00      	cmp	r3, #0
 8032570:	d005      	beq.n	803257e <tcp_zero_window_probe+0x72>
 8032572:	6a3b      	ldr	r3, [r7, #32]
 8032574:	891b      	ldrh	r3, [r3, #8]
 8032576:	2b00      	cmp	r3, #0
 8032578:	d101      	bne.n	803257e <tcp_zero_window_probe+0x72>
 803257a:	2301      	movs	r3, #1
 803257c:	e000      	b.n	8032580 <tcp_zero_window_probe+0x74>
 803257e:	2300      	movs	r3, #0
 8032580:	77fb      	strb	r3, [r7, #31]
  /* we want to send one seqno: either FIN or data (no options) */
  len = is_fin ? 0 : 1;
 8032582:	7ffb      	ldrb	r3, [r7, #31]
 8032584:	2b00      	cmp	r3, #0
 8032586:	bf0c      	ite	eq
 8032588:	2301      	moveq	r3, #1
 803258a:	2300      	movne	r3, #0
 803258c:	b2db      	uxtb	r3, r3
 803258e:	83bb      	strh	r3, [r7, #28]

  p = tcp_output_alloc_header(pcb, optlen, len, seg->tcphdr->seqno);
 8032590:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8032594:	b299      	uxth	r1, r3
 8032596:	6a3b      	ldr	r3, [r7, #32]
 8032598:	68db      	ldr	r3, [r3, #12]
 803259a:	685b      	ldr	r3, [r3, #4]
 803259c:	8bba      	ldrh	r2, [r7, #28]
 803259e:	6878      	ldr	r0, [r7, #4]
 80325a0:	f7ff fdee 	bl	8032180 <tcp_output_alloc_header>
 80325a4:	61b8      	str	r0, [r7, #24]
  if (p == NULL) {
 80325a6:	69bb      	ldr	r3, [r7, #24]
 80325a8:	2b00      	cmp	r3, #0
 80325aa:	d102      	bne.n	80325b2 <tcp_zero_window_probe+0xa6>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: no memory for pbuf\n"));
    return ERR_MEM;
 80325ac:	f04f 33ff 	mov.w	r3, #4294967295
 80325b0:	e04c      	b.n	803264c <tcp_zero_window_probe+0x140>
  }
  tcphdr = (struct tcp_hdr *)p->payload;
 80325b2:	69bb      	ldr	r3, [r7, #24]
 80325b4:	685b      	ldr	r3, [r3, #4]
 80325b6:	617b      	str	r3, [r7, #20]

  if (is_fin) {
 80325b8:	7ffb      	ldrb	r3, [r7, #31]
 80325ba:	2b00      	cmp	r3, #0
 80325bc:	d011      	beq.n	80325e2 <tcp_zero_window_probe+0xd6>
    /* FIN segment, no data */
    TCPH_FLAGS_SET(tcphdr, TCP_ACK | TCP_FIN);
 80325be:	697b      	ldr	r3, [r7, #20]
 80325c0:	899b      	ldrh	r3, [r3, #12]
 80325c2:	b29b      	uxth	r3, r3
 80325c4:	b21b      	sxth	r3, r3
 80325c6:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 80325ca:	b21c      	sxth	r4, r3
 80325cc:	2011      	movs	r0, #17
 80325ce:	f7f7 ffa3 	bl	802a518 <lwip_htons>
 80325d2:	4603      	mov	r3, r0
 80325d4:	b21b      	sxth	r3, r3
 80325d6:	4323      	orrs	r3, r4
 80325d8:	b21b      	sxth	r3, r3
 80325da:	b29a      	uxth	r2, r3
 80325dc:	697b      	ldr	r3, [r7, #20]
 80325de:	819a      	strh	r2, [r3, #12]
 80325e0:	e010      	b.n	8032604 <tcp_zero_window_probe+0xf8>
  } else {
    /* Data segment, copy in one byte from the head of the unacked queue */
    char *d = ((char *)p->payload + TCP_HLEN);
 80325e2:	69bb      	ldr	r3, [r7, #24]
 80325e4:	685b      	ldr	r3, [r3, #4]
 80325e6:	3314      	adds	r3, #20
 80325e8:	613b      	str	r3, [r7, #16]
    /* Depending on whether the segment has already been sent (unacked) or not
       (unsent), seg->p->payload points to the IP header or TCP header.
       Ensure we copy the first TCP data byte: */
    pbuf_copy_partial(seg->p, d, 1, seg->p->tot_len - seg->len);
 80325ea:	6a3b      	ldr	r3, [r7, #32]
 80325ec:	6858      	ldr	r0, [r3, #4]
 80325ee:	6a3b      	ldr	r3, [r7, #32]
 80325f0:	685b      	ldr	r3, [r3, #4]
 80325f2:	891a      	ldrh	r2, [r3, #8]
 80325f4:	6a3b      	ldr	r3, [r7, #32]
 80325f6:	891b      	ldrh	r3, [r3, #8]
 80325f8:	1ad3      	subs	r3, r2, r3
 80325fa:	b29b      	uxth	r3, r3
 80325fc:	2201      	movs	r2, #1
 80325fe:	6939      	ldr	r1, [r7, #16]
 8032600:	f7f9 fe42 	bl	802c288 <pbuf_copy_partial>
  }

  /* The byte may be acknowledged without the window being opened. */
  snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + 1;
 8032604:	6a3b      	ldr	r3, [r7, #32]
 8032606:	68db      	ldr	r3, [r3, #12]
 8032608:	685b      	ldr	r3, [r3, #4]
 803260a:	4618      	mov	r0, r3
 803260c:	f7f7 ff99 	bl	802a542 <lwip_htonl>
 8032610:	4603      	mov	r3, r0
 8032612:	3301      	adds	r3, #1
 8032614:	60fb      	str	r3, [r7, #12]
  if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 8032616:	687b      	ldr	r3, [r7, #4]
 8032618:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 803261a:	68fb      	ldr	r3, [r7, #12]
 803261c:	1ad3      	subs	r3, r2, r3
 803261e:	2b00      	cmp	r3, #0
 8032620:	da02      	bge.n	8032628 <tcp_zero_window_probe+0x11c>
    pcb->snd_nxt = snd_nxt;
 8032622:	687b      	ldr	r3, [r7, #4]
 8032624:	68fa      	ldr	r2, [r7, #12]
 8032626:	651a      	str	r2, [r3, #80]	; 0x50
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 8032628:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 803262c:	2200      	movs	r2, #0
 803262e:	69b9      	ldr	r1, [r7, #24]
 8032630:	6878      	ldr	r0, [r7, #4]
 8032632:	f7ff fde3 	bl	80321fc <tcp_output_fill_options>

  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 8032636:	687a      	ldr	r2, [r7, #4]
 8032638:	687b      	ldr	r3, [r7, #4]
 803263a:	3304      	adds	r3, #4
 803263c:	69b9      	ldr	r1, [r7, #24]
 803263e:	6878      	ldr	r0, [r7, #4]
 8032640:	f7ff fe1c 	bl	803227c <tcp_output_control_segment>
 8032644:	4603      	mov	r3, r0
 8032646:	72fb      	strb	r3, [r7, #11]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: seqno %"U32_F
                          " ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 8032648:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 803264c:	4618      	mov	r0, r3
 803264e:	372c      	adds	r7, #44	; 0x2c
 8032650:	46bd      	mov	sp, r7
 8032652:	bd90      	pop	{r4, r7, pc}
 8032654:	08039728 	.word	0x08039728
 8032658:	08039f20 	.word	0x08039f20
 803265c:	0803977c 	.word	0x0803977c

08032660 <tcpip_tcp_timer>:
 *
 * @param arg unused argument
 */
static void
tcpip_tcp_timer(void *arg)
{
 8032660:	b580      	push	{r7, lr}
 8032662:	b082      	sub	sp, #8
 8032664:	af00      	add	r7, sp, #0
 8032666:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);

  /* call TCP timer handler */
  tcp_tmr();
 8032668:	f7f9 ff04 	bl	802c474 <tcp_tmr>
  /* timer still needed? */
  if (tcp_active_pcbs || tcp_tw_pcbs) {
 803266c:	4b0a      	ldr	r3, [pc, #40]	; (8032698 <tcpip_tcp_timer+0x38>)
 803266e:	681b      	ldr	r3, [r3, #0]
 8032670:	2b00      	cmp	r3, #0
 8032672:	d103      	bne.n	803267c <tcpip_tcp_timer+0x1c>
 8032674:	4b09      	ldr	r3, [pc, #36]	; (803269c <tcpip_tcp_timer+0x3c>)
 8032676:	681b      	ldr	r3, [r3, #0]
 8032678:	2b00      	cmp	r3, #0
 803267a:	d005      	beq.n	8032688 <tcpip_tcp_timer+0x28>
    /* restart timer */
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 803267c:	2200      	movs	r2, #0
 803267e:	4908      	ldr	r1, [pc, #32]	; (80326a0 <tcpip_tcp_timer+0x40>)
 8032680:	20fa      	movs	r0, #250	; 0xfa
 8032682:	f000 f8f3 	bl	803286c <sys_timeout>
 8032686:	e003      	b.n	8032690 <tcpip_tcp_timer+0x30>
  } else {
    /* disable timer */
    tcpip_tcp_timer_active = 0;
 8032688:	4b06      	ldr	r3, [pc, #24]	; (80326a4 <tcpip_tcp_timer+0x44>)
 803268a:	2200      	movs	r2, #0
 803268c:	601a      	str	r2, [r3, #0]
  }
}
 803268e:	bf00      	nop
 8032690:	bf00      	nop
 8032692:	3708      	adds	r7, #8
 8032694:	46bd      	mov	sp, r7
 8032696:	bd80      	pop	{r7, pc}
 8032698:	2000ee18 	.word	0x2000ee18
 803269c:	2000ee1c 	.word	0x2000ee1c
 80326a0:	08032661 	.word	0x08032661
 80326a4:	2000ee64 	.word	0x2000ee64

080326a8 <tcp_timer_needed>:
 * the reason is to have the TCP timer only running when
 * there are active (or time-wait) PCBs.
 */
void
tcp_timer_needed(void)
{
 80326a8:	b580      	push	{r7, lr}
 80326aa:	af00      	add	r7, sp, #0
  LWIP_ASSERT_CORE_LOCKED();

  /* timer is off but needed again? */
  if (!tcpip_tcp_timer_active && (tcp_active_pcbs || tcp_tw_pcbs)) {
 80326ac:	4b0a      	ldr	r3, [pc, #40]	; (80326d8 <tcp_timer_needed+0x30>)
 80326ae:	681b      	ldr	r3, [r3, #0]
 80326b0:	2b00      	cmp	r3, #0
 80326b2:	d10f      	bne.n	80326d4 <tcp_timer_needed+0x2c>
 80326b4:	4b09      	ldr	r3, [pc, #36]	; (80326dc <tcp_timer_needed+0x34>)
 80326b6:	681b      	ldr	r3, [r3, #0]
 80326b8:	2b00      	cmp	r3, #0
 80326ba:	d103      	bne.n	80326c4 <tcp_timer_needed+0x1c>
 80326bc:	4b08      	ldr	r3, [pc, #32]	; (80326e0 <tcp_timer_needed+0x38>)
 80326be:	681b      	ldr	r3, [r3, #0]
 80326c0:	2b00      	cmp	r3, #0
 80326c2:	d007      	beq.n	80326d4 <tcp_timer_needed+0x2c>
    /* enable and start timer */
    tcpip_tcp_timer_active = 1;
 80326c4:	4b04      	ldr	r3, [pc, #16]	; (80326d8 <tcp_timer_needed+0x30>)
 80326c6:	2201      	movs	r2, #1
 80326c8:	601a      	str	r2, [r3, #0]
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 80326ca:	2200      	movs	r2, #0
 80326cc:	4905      	ldr	r1, [pc, #20]	; (80326e4 <tcp_timer_needed+0x3c>)
 80326ce:	20fa      	movs	r0, #250	; 0xfa
 80326d0:	f000 f8cc 	bl	803286c <sys_timeout>
  }
}
 80326d4:	bf00      	nop
 80326d6:	bd80      	pop	{r7, pc}
 80326d8:	2000ee64 	.word	0x2000ee64
 80326dc:	2000ee18 	.word	0x2000ee18
 80326e0:	2000ee1c 	.word	0x2000ee1c
 80326e4:	08032661 	.word	0x08032661

080326e8 <sys_timeout_abs>:
#if LWIP_DEBUG_TIMERNAMES
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg)
#endif
{
 80326e8:	b580      	push	{r7, lr}
 80326ea:	b086      	sub	sp, #24
 80326ec:	af00      	add	r7, sp, #0
 80326ee:	60f8      	str	r0, [r7, #12]
 80326f0:	60b9      	str	r1, [r7, #8]
 80326f2:	607a      	str	r2, [r7, #4]
  struct sys_timeo *timeout, *t;

  timeout = (struct sys_timeo *)memp_malloc(MEMP_SYS_TIMEOUT);
 80326f4:	200a      	movs	r0, #10
 80326f6:	f7f8 fcb1 	bl	802b05c <memp_malloc>
 80326fa:	6138      	str	r0, [r7, #16]
  if (timeout == NULL) {
 80326fc:	693b      	ldr	r3, [r7, #16]
 80326fe:	2b00      	cmp	r3, #0
 8032700:	d109      	bne.n	8032716 <sys_timeout_abs+0x2e>
    LWIP_ASSERT("sys_timeout: timeout != NULL, pool MEMP_SYS_TIMEOUT is empty", timeout != NULL);
 8032702:	693b      	ldr	r3, [r7, #16]
 8032704:	2b00      	cmp	r3, #0
 8032706:	d151      	bne.n	80327ac <sys_timeout_abs+0xc4>
 8032708:	4b2a      	ldr	r3, [pc, #168]	; (80327b4 <sys_timeout_abs+0xcc>)
 803270a:	22be      	movs	r2, #190	; 0xbe
 803270c:	492a      	ldr	r1, [pc, #168]	; (80327b8 <sys_timeout_abs+0xd0>)
 803270e:	482b      	ldr	r0, [pc, #172]	; (80327bc <sys_timeout_abs+0xd4>)
 8032710:	f003 fd42 	bl	8036198 <iprintf>
    return;
 8032714:	e04a      	b.n	80327ac <sys_timeout_abs+0xc4>
  }

  timeout->next = NULL;
 8032716:	693b      	ldr	r3, [r7, #16]
 8032718:	2200      	movs	r2, #0
 803271a:	601a      	str	r2, [r3, #0]
  timeout->h = handler;
 803271c:	693b      	ldr	r3, [r7, #16]
 803271e:	68ba      	ldr	r2, [r7, #8]
 8032720:	609a      	str	r2, [r3, #8]
  timeout->arg = arg;
 8032722:	693b      	ldr	r3, [r7, #16]
 8032724:	687a      	ldr	r2, [r7, #4]
 8032726:	60da      	str	r2, [r3, #12]
  timeout->time = abs_time;
 8032728:	693b      	ldr	r3, [r7, #16]
 803272a:	68fa      	ldr	r2, [r7, #12]
 803272c:	605a      	str	r2, [r3, #4]
  timeout->handler_name = handler_name;
  LWIP_DEBUGF(TIMERS_DEBUG, ("sys_timeout: %p abs_time=%"U32_F" handler=%s arg=%p\n",
                             (void *)timeout, abs_time, handler_name, (void *)arg));
#endif /* LWIP_DEBUG_TIMERNAMES */

  if (next_timeout == NULL) {
 803272e:	4b24      	ldr	r3, [pc, #144]	; (80327c0 <sys_timeout_abs+0xd8>)
 8032730:	681b      	ldr	r3, [r3, #0]
 8032732:	2b00      	cmp	r3, #0
 8032734:	d103      	bne.n	803273e <sys_timeout_abs+0x56>
    next_timeout = timeout;
 8032736:	4a22      	ldr	r2, [pc, #136]	; (80327c0 <sys_timeout_abs+0xd8>)
 8032738:	693b      	ldr	r3, [r7, #16]
 803273a:	6013      	str	r3, [r2, #0]
    return;
 803273c:	e037      	b.n	80327ae <sys_timeout_abs+0xc6>
  }
  if (TIME_LESS_THAN(timeout->time, next_timeout->time)) {
 803273e:	693b      	ldr	r3, [r7, #16]
 8032740:	685a      	ldr	r2, [r3, #4]
 8032742:	4b1f      	ldr	r3, [pc, #124]	; (80327c0 <sys_timeout_abs+0xd8>)
 8032744:	681b      	ldr	r3, [r3, #0]
 8032746:	685b      	ldr	r3, [r3, #4]
 8032748:	1ad3      	subs	r3, r2, r3
 803274a:	0fdb      	lsrs	r3, r3, #31
 803274c:	f003 0301 	and.w	r3, r3, #1
 8032750:	b2db      	uxtb	r3, r3
 8032752:	2b00      	cmp	r3, #0
 8032754:	d007      	beq.n	8032766 <sys_timeout_abs+0x7e>
    timeout->next = next_timeout;
 8032756:	4b1a      	ldr	r3, [pc, #104]	; (80327c0 <sys_timeout_abs+0xd8>)
 8032758:	681a      	ldr	r2, [r3, #0]
 803275a:	693b      	ldr	r3, [r7, #16]
 803275c:	601a      	str	r2, [r3, #0]
    next_timeout = timeout;
 803275e:	4a18      	ldr	r2, [pc, #96]	; (80327c0 <sys_timeout_abs+0xd8>)
 8032760:	693b      	ldr	r3, [r7, #16]
 8032762:	6013      	str	r3, [r2, #0]
 8032764:	e023      	b.n	80327ae <sys_timeout_abs+0xc6>
  } else {
    for (t = next_timeout; t != NULL; t = t->next) {
 8032766:	4b16      	ldr	r3, [pc, #88]	; (80327c0 <sys_timeout_abs+0xd8>)
 8032768:	681b      	ldr	r3, [r3, #0]
 803276a:	617b      	str	r3, [r7, #20]
 803276c:	e01a      	b.n	80327a4 <sys_timeout_abs+0xbc>
      if ((t->next == NULL) || TIME_LESS_THAN(timeout->time, t->next->time)) {
 803276e:	697b      	ldr	r3, [r7, #20]
 8032770:	681b      	ldr	r3, [r3, #0]
 8032772:	2b00      	cmp	r3, #0
 8032774:	d00b      	beq.n	803278e <sys_timeout_abs+0xa6>
 8032776:	693b      	ldr	r3, [r7, #16]
 8032778:	685a      	ldr	r2, [r3, #4]
 803277a:	697b      	ldr	r3, [r7, #20]
 803277c:	681b      	ldr	r3, [r3, #0]
 803277e:	685b      	ldr	r3, [r3, #4]
 8032780:	1ad3      	subs	r3, r2, r3
 8032782:	0fdb      	lsrs	r3, r3, #31
 8032784:	f003 0301 	and.w	r3, r3, #1
 8032788:	b2db      	uxtb	r3, r3
 803278a:	2b00      	cmp	r3, #0
 803278c:	d007      	beq.n	803279e <sys_timeout_abs+0xb6>
        timeout->next = t->next;
 803278e:	697b      	ldr	r3, [r7, #20]
 8032790:	681a      	ldr	r2, [r3, #0]
 8032792:	693b      	ldr	r3, [r7, #16]
 8032794:	601a      	str	r2, [r3, #0]
        t->next = timeout;
 8032796:	697b      	ldr	r3, [r7, #20]
 8032798:	693a      	ldr	r2, [r7, #16]
 803279a:	601a      	str	r2, [r3, #0]
        break;
 803279c:	e007      	b.n	80327ae <sys_timeout_abs+0xc6>
    for (t = next_timeout; t != NULL; t = t->next) {
 803279e:	697b      	ldr	r3, [r7, #20]
 80327a0:	681b      	ldr	r3, [r3, #0]
 80327a2:	617b      	str	r3, [r7, #20]
 80327a4:	697b      	ldr	r3, [r7, #20]
 80327a6:	2b00      	cmp	r3, #0
 80327a8:	d1e1      	bne.n	803276e <sys_timeout_abs+0x86>
 80327aa:	e000      	b.n	80327ae <sys_timeout_abs+0xc6>
    return;
 80327ac:	bf00      	nop
      }
    }
  }
}
 80327ae:	3718      	adds	r7, #24
 80327b0:	46bd      	mov	sp, r7
 80327b2:	bd80      	pop	{r7, pc}
 80327b4:	08039f44 	.word	0x08039f44
 80327b8:	08039f78 	.word	0x08039f78
 80327bc:	08039fb8 	.word	0x08039fb8
 80327c0:	2000ee5c 	.word	0x2000ee5c

080327c4 <lwip_cyclic_timer>:
#if !LWIP_TESTMODE
static
#endif
void
lwip_cyclic_timer(void *arg)
{
 80327c4:	b580      	push	{r7, lr}
 80327c6:	b086      	sub	sp, #24
 80327c8:	af00      	add	r7, sp, #0
 80327ca:	6078      	str	r0, [r7, #4]
  u32_t now;
  u32_t next_timeout_time;
  const struct lwip_cyclic_timer *cyclic = (const struct lwip_cyclic_timer *)arg;
 80327cc:	687b      	ldr	r3, [r7, #4]
 80327ce:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  LWIP_DEBUGF(TIMERS_DEBUG, ("tcpip: %s()\n", cyclic->handler_name));
#endif
  cyclic->handler();
 80327d0:	697b      	ldr	r3, [r7, #20]
 80327d2:	685b      	ldr	r3, [r3, #4]
 80327d4:	4798      	blx	r3

  now = sys_now();
 80327d6:	f7f2 f915 	bl	8024a04 <sys_now>
 80327da:	6138      	str	r0, [r7, #16]
  next_timeout_time = (u32_t)(current_timeout_due_time + cyclic->interval_ms);  /* overflow handled by TIME_LESS_THAN macro */ 
 80327dc:	697b      	ldr	r3, [r7, #20]
 80327de:	681a      	ldr	r2, [r3, #0]
 80327e0:	4b0f      	ldr	r3, [pc, #60]	; (8032820 <lwip_cyclic_timer+0x5c>)
 80327e2:	681b      	ldr	r3, [r3, #0]
 80327e4:	4413      	add	r3, r2
 80327e6:	60fb      	str	r3, [r7, #12]
  if (TIME_LESS_THAN(next_timeout_time, now)) {
 80327e8:	68fa      	ldr	r2, [r7, #12]
 80327ea:	693b      	ldr	r3, [r7, #16]
 80327ec:	1ad3      	subs	r3, r2, r3
 80327ee:	0fdb      	lsrs	r3, r3, #31
 80327f0:	f003 0301 	and.w	r3, r3, #1
 80327f4:	b2db      	uxtb	r3, r3
 80327f6:	2b00      	cmp	r3, #0
 80327f8:	d009      	beq.n	803280e <lwip_cyclic_timer+0x4a>
    /* timer would immediately expire again -> "overload" -> restart without any correction */
#if LWIP_DEBUG_TIMERNAMES
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg);
 80327fa:	697b      	ldr	r3, [r7, #20]
 80327fc:	681a      	ldr	r2, [r3, #0]
 80327fe:	693b      	ldr	r3, [r7, #16]
 8032800:	4413      	add	r3, r2
 8032802:	687a      	ldr	r2, [r7, #4]
 8032804:	4907      	ldr	r1, [pc, #28]	; (8032824 <lwip_cyclic_timer+0x60>)
 8032806:	4618      	mov	r0, r3
 8032808:	f7ff ff6e 	bl	80326e8 <sys_timeout_abs>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
#endif
  }
}
 803280c:	e004      	b.n	8032818 <lwip_cyclic_timer+0x54>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
 803280e:	687a      	ldr	r2, [r7, #4]
 8032810:	4904      	ldr	r1, [pc, #16]	; (8032824 <lwip_cyclic_timer+0x60>)
 8032812:	68f8      	ldr	r0, [r7, #12]
 8032814:	f7ff ff68 	bl	80326e8 <sys_timeout_abs>
}
 8032818:	bf00      	nop
 803281a:	3718      	adds	r7, #24
 803281c:	46bd      	mov	sp, r7
 803281e:	bd80      	pop	{r7, pc}
 8032820:	2000ee60 	.word	0x2000ee60
 8032824:	080327c5 	.word	0x080327c5

08032828 <sys_timeouts_init>:

/** Initialize this module */
void sys_timeouts_init(void)
{
 8032828:	b580      	push	{r7, lr}
 803282a:	b082      	sub	sp, #8
 803282c:	af00      	add	r7, sp, #0
  size_t i;
  /* tcp_tmr() at index 0 is started on demand */
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 803282e:	2301      	movs	r3, #1
 8032830:	607b      	str	r3, [r7, #4]
 8032832:	e00e      	b.n	8032852 <sys_timeouts_init+0x2a>
    /* we have to cast via size_t to get rid of const warning
      (this is OK as cyclic_timer() casts back to const* */
    sys_timeout(lwip_cyclic_timers[i].interval_ms, lwip_cyclic_timer, LWIP_CONST_CAST(void *, &lwip_cyclic_timers[i]));
 8032834:	4a0b      	ldr	r2, [pc, #44]	; (8032864 <sys_timeouts_init+0x3c>)
 8032836:	687b      	ldr	r3, [r7, #4]
 8032838:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 803283c:	687b      	ldr	r3, [r7, #4]
 803283e:	00db      	lsls	r3, r3, #3
 8032840:	4a08      	ldr	r2, [pc, #32]	; (8032864 <sys_timeouts_init+0x3c>)
 8032842:	4413      	add	r3, r2
 8032844:	461a      	mov	r2, r3
 8032846:	4908      	ldr	r1, [pc, #32]	; (8032868 <sys_timeouts_init+0x40>)
 8032848:	f000 f810 	bl	803286c <sys_timeout>
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 803284c:	687b      	ldr	r3, [r7, #4]
 803284e:	3301      	adds	r3, #1
 8032850:	607b      	str	r3, [r7, #4]
 8032852:	687b      	ldr	r3, [r7, #4]
 8032854:	2b02      	cmp	r3, #2
 8032856:	d9ed      	bls.n	8032834 <sys_timeouts_init+0xc>
  }
}
 8032858:	bf00      	nop
 803285a:	bf00      	nop
 803285c:	3708      	adds	r7, #8
 803285e:	46bd      	mov	sp, r7
 8032860:	bd80      	pop	{r7, pc}
 8032862:	bf00      	nop
 8032864:	0803abac 	.word	0x0803abac
 8032868:	080327c5 	.word	0x080327c5

0803286c <sys_timeout>:
sys_timeout_debug(u32_t msecs, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
void
sys_timeout(u32_t msecs, sys_timeout_handler handler, void *arg)
#endif /* LWIP_DEBUG_TIMERNAMES */
{
 803286c:	b580      	push	{r7, lr}
 803286e:	b086      	sub	sp, #24
 8032870:	af00      	add	r7, sp, #0
 8032872:	60f8      	str	r0, [r7, #12]
 8032874:	60b9      	str	r1, [r7, #8]
 8032876:	607a      	str	r2, [r7, #4]
  u32_t next_timeout_time;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("Timeout time too long, max is LWIP_UINT32_MAX/4 msecs", msecs <= (LWIP_UINT32_MAX / 4));
 8032878:	68fb      	ldr	r3, [r7, #12]
 803287a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 803287e:	d306      	bcc.n	803288e <sys_timeout+0x22>
 8032880:	4b0a      	ldr	r3, [pc, #40]	; (80328ac <sys_timeout+0x40>)
 8032882:	f240 1229 	movw	r2, #297	; 0x129
 8032886:	490a      	ldr	r1, [pc, #40]	; (80328b0 <sys_timeout+0x44>)
 8032888:	480a      	ldr	r0, [pc, #40]	; (80328b4 <sys_timeout+0x48>)
 803288a:	f003 fc85 	bl	8036198 <iprintf>

  next_timeout_time = (u32_t)(sys_now() + msecs); /* overflow handled by TIME_LESS_THAN macro */ 
 803288e:	f7f2 f8b9 	bl	8024a04 <sys_now>
 8032892:	4602      	mov	r2, r0
 8032894:	68fb      	ldr	r3, [r7, #12]
 8032896:	4413      	add	r3, r2
 8032898:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  sys_timeout_abs(next_timeout_time, handler, arg, handler_name);
#else
  sys_timeout_abs(next_timeout_time, handler, arg);
 803289a:	687a      	ldr	r2, [r7, #4]
 803289c:	68b9      	ldr	r1, [r7, #8]
 803289e:	6978      	ldr	r0, [r7, #20]
 80328a0:	f7ff ff22 	bl	80326e8 <sys_timeout_abs>
#endif
}
 80328a4:	bf00      	nop
 80328a6:	3718      	adds	r7, #24
 80328a8:	46bd      	mov	sp, r7
 80328aa:	bd80      	pop	{r7, pc}
 80328ac:	08039f44 	.word	0x08039f44
 80328b0:	08039fe0 	.word	0x08039fe0
 80328b4:	08039fb8 	.word	0x08039fb8

080328b8 <sys_check_timeouts>:
 *
 * Must be called periodically from your main loop.
 */
void
sys_check_timeouts(void)
{
 80328b8:	b580      	push	{r7, lr}
 80328ba:	b084      	sub	sp, #16
 80328bc:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  /* Process only timers expired at the start of the function. */
  now = sys_now();
 80328be:	f7f2 f8a1 	bl	8024a04 <sys_now>
 80328c2:	60f8      	str	r0, [r7, #12]
    sys_timeout_handler handler;
    void *arg;

    PBUF_CHECK_FREE_OOSEQ();

    tmptimeout = next_timeout;
 80328c4:	4b17      	ldr	r3, [pc, #92]	; (8032924 <sys_check_timeouts+0x6c>)
 80328c6:	681b      	ldr	r3, [r3, #0]
 80328c8:	60bb      	str	r3, [r7, #8]
    if (tmptimeout == NULL) {
 80328ca:	68bb      	ldr	r3, [r7, #8]
 80328cc:	2b00      	cmp	r3, #0
 80328ce:	d022      	beq.n	8032916 <sys_check_timeouts+0x5e>
      return;
    }

    if (TIME_LESS_THAN(now, tmptimeout->time)) {
 80328d0:	68bb      	ldr	r3, [r7, #8]
 80328d2:	685b      	ldr	r3, [r3, #4]
 80328d4:	68fa      	ldr	r2, [r7, #12]
 80328d6:	1ad3      	subs	r3, r2, r3
 80328d8:	0fdb      	lsrs	r3, r3, #31
 80328da:	f003 0301 	and.w	r3, r3, #1
 80328de:	b2db      	uxtb	r3, r3
 80328e0:	2b00      	cmp	r3, #0
 80328e2:	d11a      	bne.n	803291a <sys_check_timeouts+0x62>
      return;
    }

    /* Timeout has expired */
    next_timeout = tmptimeout->next;
 80328e4:	68bb      	ldr	r3, [r7, #8]
 80328e6:	681b      	ldr	r3, [r3, #0]
 80328e8:	4a0e      	ldr	r2, [pc, #56]	; (8032924 <sys_check_timeouts+0x6c>)
 80328ea:	6013      	str	r3, [r2, #0]
    handler = tmptimeout->h;
 80328ec:	68bb      	ldr	r3, [r7, #8]
 80328ee:	689b      	ldr	r3, [r3, #8]
 80328f0:	607b      	str	r3, [r7, #4]
    arg = tmptimeout->arg;
 80328f2:	68bb      	ldr	r3, [r7, #8]
 80328f4:	68db      	ldr	r3, [r3, #12]
 80328f6:	603b      	str	r3, [r7, #0]
    current_timeout_due_time = tmptimeout->time;
 80328f8:	68bb      	ldr	r3, [r7, #8]
 80328fa:	685b      	ldr	r3, [r3, #4]
 80328fc:	4a0a      	ldr	r2, [pc, #40]	; (8032928 <sys_check_timeouts+0x70>)
 80328fe:	6013      	str	r3, [r2, #0]
    if (handler != NULL) {
      LWIP_DEBUGF(TIMERS_DEBUG, ("sct calling h=%s t=%"U32_F" arg=%p\n",
                                 tmptimeout->handler_name, sys_now() - tmptimeout->time, arg));
    }
#endif /* LWIP_DEBUG_TIMERNAMES */
    memp_free(MEMP_SYS_TIMEOUT, tmptimeout);
 8032900:	68b9      	ldr	r1, [r7, #8]
 8032902:	200a      	movs	r0, #10
 8032904:	f7f8 fc26 	bl	802b154 <memp_free>
    if (handler != NULL) {
 8032908:	687b      	ldr	r3, [r7, #4]
 803290a:	2b00      	cmp	r3, #0
 803290c:	d0da      	beq.n	80328c4 <sys_check_timeouts+0xc>
      handler(arg);
 803290e:	687b      	ldr	r3, [r7, #4]
 8032910:	6838      	ldr	r0, [r7, #0]
 8032912:	4798      	blx	r3
  do {
 8032914:	e7d6      	b.n	80328c4 <sys_check_timeouts+0xc>
      return;
 8032916:	bf00      	nop
 8032918:	e000      	b.n	803291c <sys_check_timeouts+0x64>
      return;
 803291a:	bf00      	nop
    }
    LWIP_TCPIP_THREAD_ALIVE();

    /* Repeat until all expired timers have been called */
  } while (1);
}
 803291c:	3710      	adds	r7, #16
 803291e:	46bd      	mov	sp, r7
 8032920:	bd80      	pop	{r7, pc}
 8032922:	bf00      	nop
 8032924:	2000ee5c 	.word	0x2000ee5c
 8032928:	2000ee60 	.word	0x2000ee60

0803292c <sys_timeouts_sleeptime>:
/** Return the time left before the next timeout is due. If no timeouts are
 * enqueued, returns 0xffffffff
 */
u32_t
sys_timeouts_sleeptime(void)
{
 803292c:	b580      	push	{r7, lr}
 803292e:	b082      	sub	sp, #8
 8032930:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  if (next_timeout == NULL) {
 8032932:	4b16      	ldr	r3, [pc, #88]	; (803298c <sys_timeouts_sleeptime+0x60>)
 8032934:	681b      	ldr	r3, [r3, #0]
 8032936:	2b00      	cmp	r3, #0
 8032938:	d102      	bne.n	8032940 <sys_timeouts_sleeptime+0x14>
    return SYS_TIMEOUTS_SLEEPTIME_INFINITE;
 803293a:	f04f 33ff 	mov.w	r3, #4294967295
 803293e:	e020      	b.n	8032982 <sys_timeouts_sleeptime+0x56>
  }
  now = sys_now();
 8032940:	f7f2 f860 	bl	8024a04 <sys_now>
 8032944:	6078      	str	r0, [r7, #4]
  if (TIME_LESS_THAN(next_timeout->time, now)) {
 8032946:	4b11      	ldr	r3, [pc, #68]	; (803298c <sys_timeouts_sleeptime+0x60>)
 8032948:	681b      	ldr	r3, [r3, #0]
 803294a:	685a      	ldr	r2, [r3, #4]
 803294c:	687b      	ldr	r3, [r7, #4]
 803294e:	1ad3      	subs	r3, r2, r3
 8032950:	0fdb      	lsrs	r3, r3, #31
 8032952:	f003 0301 	and.w	r3, r3, #1
 8032956:	b2db      	uxtb	r3, r3
 8032958:	2b00      	cmp	r3, #0
 803295a:	d001      	beq.n	8032960 <sys_timeouts_sleeptime+0x34>
    return 0;
 803295c:	2300      	movs	r3, #0
 803295e:	e010      	b.n	8032982 <sys_timeouts_sleeptime+0x56>
  } else {
    u32_t ret = (u32_t)(next_timeout->time - now);
 8032960:	4b0a      	ldr	r3, [pc, #40]	; (803298c <sys_timeouts_sleeptime+0x60>)
 8032962:	681b      	ldr	r3, [r3, #0]
 8032964:	685a      	ldr	r2, [r3, #4]
 8032966:	687b      	ldr	r3, [r7, #4]
 8032968:	1ad3      	subs	r3, r2, r3
 803296a:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("invalid sleeptime", ret <= LWIP_MAX_TIMEOUT);
 803296c:	683b      	ldr	r3, [r7, #0]
 803296e:	2b00      	cmp	r3, #0
 8032970:	da06      	bge.n	8032980 <sys_timeouts_sleeptime+0x54>
 8032972:	4b07      	ldr	r3, [pc, #28]	; (8032990 <sys_timeouts_sleeptime+0x64>)
 8032974:	f44f 72dc 	mov.w	r2, #440	; 0x1b8
 8032978:	4906      	ldr	r1, [pc, #24]	; (8032994 <sys_timeouts_sleeptime+0x68>)
 803297a:	4807      	ldr	r0, [pc, #28]	; (8032998 <sys_timeouts_sleeptime+0x6c>)
 803297c:	f003 fc0c 	bl	8036198 <iprintf>
    return ret;
 8032980:	683b      	ldr	r3, [r7, #0]
  }
}
 8032982:	4618      	mov	r0, r3
 8032984:	3708      	adds	r7, #8
 8032986:	46bd      	mov	sp, r7
 8032988:	bd80      	pop	{r7, pc}
 803298a:	bf00      	nop
 803298c:	2000ee5c 	.word	0x2000ee5c
 8032990:	08039f44 	.word	0x08039f44
 8032994:	0803a018 	.word	0x0803a018
 8032998:	08039fb8 	.word	0x08039fb8

0803299c <udp_init>:
/**
 * Initialize this module.
 */
void
udp_init(void)
{
 803299c:	b580      	push	{r7, lr}
 803299e:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  udp_port = UDP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 80329a0:	f003 fc12 	bl	80361c8 <rand>
 80329a4:	4603      	mov	r3, r0
 80329a6:	b29b      	uxth	r3, r3
 80329a8:	f3c3 030d 	ubfx	r3, r3, #0, #14
 80329ac:	b29b      	uxth	r3, r3
 80329ae:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 80329b2:	b29a      	uxth	r2, r3
 80329b4:	4b01      	ldr	r3, [pc, #4]	; (80329bc <udp_init+0x20>)
 80329b6:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 80329b8:	bf00      	nop
 80329ba:	bd80      	pop	{r7, pc}
 80329bc:	20000030 	.word	0x20000030

080329c0 <udp_new_port>:
 *
 * @return a new (free) local UDP port number
 */
static u16_t
udp_new_port(void)
{
 80329c0:	b480      	push	{r7}
 80329c2:	b083      	sub	sp, #12
 80329c4:	af00      	add	r7, sp, #0
  u16_t n = 0;
 80329c6:	2300      	movs	r3, #0
 80329c8:	80fb      	strh	r3, [r7, #6]
  struct udp_pcb *pcb;

again:
  if (udp_port++ == UDP_LOCAL_PORT_RANGE_END) {
 80329ca:	4b17      	ldr	r3, [pc, #92]	; (8032a28 <udp_new_port+0x68>)
 80329cc:	881b      	ldrh	r3, [r3, #0]
 80329ce:	1c5a      	adds	r2, r3, #1
 80329d0:	b291      	uxth	r1, r2
 80329d2:	4a15      	ldr	r2, [pc, #84]	; (8032a28 <udp_new_port+0x68>)
 80329d4:	8011      	strh	r1, [r2, #0]
 80329d6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80329da:	4293      	cmp	r3, r2
 80329dc:	d103      	bne.n	80329e6 <udp_new_port+0x26>
    udp_port = UDP_LOCAL_PORT_RANGE_START;
 80329de:	4b12      	ldr	r3, [pc, #72]	; (8032a28 <udp_new_port+0x68>)
 80329e0:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 80329e4:	801a      	strh	r2, [r3, #0]
  }
  /* Check all PCBs. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 80329e6:	4b11      	ldr	r3, [pc, #68]	; (8032a2c <udp_new_port+0x6c>)
 80329e8:	681b      	ldr	r3, [r3, #0]
 80329ea:	603b      	str	r3, [r7, #0]
 80329ec:	e011      	b.n	8032a12 <udp_new_port+0x52>
    if (pcb->local_port == udp_port) {
 80329ee:	683b      	ldr	r3, [r7, #0]
 80329f0:	8a5a      	ldrh	r2, [r3, #18]
 80329f2:	4b0d      	ldr	r3, [pc, #52]	; (8032a28 <udp_new_port+0x68>)
 80329f4:	881b      	ldrh	r3, [r3, #0]
 80329f6:	429a      	cmp	r2, r3
 80329f8:	d108      	bne.n	8032a0c <udp_new_port+0x4c>
      if (++n > (UDP_LOCAL_PORT_RANGE_END - UDP_LOCAL_PORT_RANGE_START)) {
 80329fa:	88fb      	ldrh	r3, [r7, #6]
 80329fc:	3301      	adds	r3, #1
 80329fe:	80fb      	strh	r3, [r7, #6]
 8032a00:	88fb      	ldrh	r3, [r7, #6]
 8032a02:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8032a06:	d3e0      	bcc.n	80329ca <udp_new_port+0xa>
        return 0;
 8032a08:	2300      	movs	r3, #0
 8032a0a:	e007      	b.n	8032a1c <udp_new_port+0x5c>
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8032a0c:	683b      	ldr	r3, [r7, #0]
 8032a0e:	68db      	ldr	r3, [r3, #12]
 8032a10:	603b      	str	r3, [r7, #0]
 8032a12:	683b      	ldr	r3, [r7, #0]
 8032a14:	2b00      	cmp	r3, #0
 8032a16:	d1ea      	bne.n	80329ee <udp_new_port+0x2e>
      }
      goto again;
    }
  }
  return udp_port;
 8032a18:	4b03      	ldr	r3, [pc, #12]	; (8032a28 <udp_new_port+0x68>)
 8032a1a:	881b      	ldrh	r3, [r3, #0]
}
 8032a1c:	4618      	mov	r0, r3
 8032a1e:	370c      	adds	r7, #12
 8032a20:	46bd      	mov	sp, r7
 8032a22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8032a26:	4770      	bx	lr
 8032a28:	20000030 	.word	0x20000030
 8032a2c:	2000ee68 	.word	0x2000ee68

08032a30 <udp_input_local_match>:
 * @param broadcast 1 if his is an IPv4 broadcast (global or subnet-only), 0 otherwise (only used for IPv4)
 * @return 1 on match, 0 otherwise
 */
static u8_t
udp_input_local_match(struct udp_pcb *pcb, struct netif *inp, u8_t broadcast)
{
 8032a30:	b580      	push	{r7, lr}
 8032a32:	b084      	sub	sp, #16
 8032a34:	af00      	add	r7, sp, #0
 8032a36:	60f8      	str	r0, [r7, #12]
 8032a38:	60b9      	str	r1, [r7, #8]
 8032a3a:	4613      	mov	r3, r2
 8032a3c:	71fb      	strb	r3, [r7, #7]
  LWIP_UNUSED_ARG(inp);       /* in IPv6 only case */
  LWIP_UNUSED_ARG(broadcast); /* in IPv6 only case */

  LWIP_ASSERT("udp_input_local_match: invalid pcb", pcb != NULL);
 8032a3e:	68fb      	ldr	r3, [r7, #12]
 8032a40:	2b00      	cmp	r3, #0
 8032a42:	d105      	bne.n	8032a50 <udp_input_local_match+0x20>
 8032a44:	4b27      	ldr	r3, [pc, #156]	; (8032ae4 <udp_input_local_match+0xb4>)
 8032a46:	2287      	movs	r2, #135	; 0x87
 8032a48:	4927      	ldr	r1, [pc, #156]	; (8032ae8 <udp_input_local_match+0xb8>)
 8032a4a:	4828      	ldr	r0, [pc, #160]	; (8032aec <udp_input_local_match+0xbc>)
 8032a4c:	f003 fba4 	bl	8036198 <iprintf>
  LWIP_ASSERT("udp_input_local_match: invalid netif", inp != NULL);
 8032a50:	68bb      	ldr	r3, [r7, #8]
 8032a52:	2b00      	cmp	r3, #0
 8032a54:	d105      	bne.n	8032a62 <udp_input_local_match+0x32>
 8032a56:	4b23      	ldr	r3, [pc, #140]	; (8032ae4 <udp_input_local_match+0xb4>)
 8032a58:	2288      	movs	r2, #136	; 0x88
 8032a5a:	4925      	ldr	r1, [pc, #148]	; (8032af0 <udp_input_local_match+0xc0>)
 8032a5c:	4823      	ldr	r0, [pc, #140]	; (8032aec <udp_input_local_match+0xbc>)
 8032a5e:	f003 fb9b 	bl	8036198 <iprintf>

  /* check if PCB is bound to specific netif */
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8032a62:	68fb      	ldr	r3, [r7, #12]
 8032a64:	7a1b      	ldrb	r3, [r3, #8]
 8032a66:	2b00      	cmp	r3, #0
 8032a68:	d00b      	beq.n	8032a82 <udp_input_local_match+0x52>
      (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 8032a6a:	68fb      	ldr	r3, [r7, #12]
 8032a6c:	7a1a      	ldrb	r2, [r3, #8]
 8032a6e:	4b21      	ldr	r3, [pc, #132]	; (8032af4 <udp_input_local_match+0xc4>)
 8032a70:	685b      	ldr	r3, [r3, #4]
 8032a72:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8032a76:	3301      	adds	r3, #1
 8032a78:	b2db      	uxtb	r3, r3
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8032a7a:	429a      	cmp	r2, r3
 8032a7c:	d001      	beq.n	8032a82 <udp_input_local_match+0x52>
    return 0;
 8032a7e:	2300      	movs	r3, #0
 8032a80:	e02b      	b.n	8032ada <udp_input_local_match+0xaa>
  /* Only need to check PCB if incoming IP version matches PCB IP version */
  if (IP_ADDR_PCB_VERSION_MATCH_EXACT(pcb, ip_current_dest_addr())) {
#if LWIP_IPV4
    /* Special case: IPv4 broadcast: all or broadcasts in my subnet
     * Note: broadcast variable can only be 1 if it is an IPv4 broadcast */
    if (broadcast != 0) {
 8032a82:	79fb      	ldrb	r3, [r7, #7]
 8032a84:	2b00      	cmp	r3, #0
 8032a86:	d018      	beq.n	8032aba <udp_input_local_match+0x8a>
#if IP_SOF_BROADCAST_RECV
      if (ip_get_option(pcb, SOF_BROADCAST))
#endif /* IP_SOF_BROADCAST_RECV */
      {
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 8032a88:	68fb      	ldr	r3, [r7, #12]
 8032a8a:	2b00      	cmp	r3, #0
 8032a8c:	d013      	beq.n	8032ab6 <udp_input_local_match+0x86>
 8032a8e:	68fb      	ldr	r3, [r7, #12]
 8032a90:	681b      	ldr	r3, [r3, #0]
 8032a92:	2b00      	cmp	r3, #0
 8032a94:	d00f      	beq.n	8032ab6 <udp_input_local_match+0x86>
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 8032a96:	4b17      	ldr	r3, [pc, #92]	; (8032af4 <udp_input_local_match+0xc4>)
 8032a98:	695b      	ldr	r3, [r3, #20]
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 8032a9a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8032a9e:	d00a      	beq.n	8032ab6 <udp_input_local_match+0x86>
            ip4_addr_netcmp(ip_2_ip4(&pcb->local_ip), ip4_current_dest_addr(), netif_ip4_netmask(inp))) {
 8032aa0:	68fb      	ldr	r3, [r7, #12]
 8032aa2:	681a      	ldr	r2, [r3, #0]
 8032aa4:	4b13      	ldr	r3, [pc, #76]	; (8032af4 <udp_input_local_match+0xc4>)
 8032aa6:	695b      	ldr	r3, [r3, #20]
 8032aa8:	405a      	eors	r2, r3
 8032aaa:	68bb      	ldr	r3, [r7, #8]
 8032aac:	3308      	adds	r3, #8
 8032aae:	681b      	ldr	r3, [r3, #0]
 8032ab0:	4013      	ands	r3, r2
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 8032ab2:	2b00      	cmp	r3, #0
 8032ab4:	d110      	bne.n	8032ad8 <udp_input_local_match+0xa8>
          return 1;
 8032ab6:	2301      	movs	r3, #1
 8032ab8:	e00f      	b.n	8032ada <udp_input_local_match+0xaa>
        }
      }
    } else
#endif /* LWIP_IPV4 */
      /* Handle IPv4 and IPv6: all or exact match */
      if (ip_addr_isany(&pcb->local_ip) || ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 8032aba:	68fb      	ldr	r3, [r7, #12]
 8032abc:	2b00      	cmp	r3, #0
 8032abe:	d009      	beq.n	8032ad4 <udp_input_local_match+0xa4>
 8032ac0:	68fb      	ldr	r3, [r7, #12]
 8032ac2:	681b      	ldr	r3, [r3, #0]
 8032ac4:	2b00      	cmp	r3, #0
 8032ac6:	d005      	beq.n	8032ad4 <udp_input_local_match+0xa4>
 8032ac8:	68fb      	ldr	r3, [r7, #12]
 8032aca:	681a      	ldr	r2, [r3, #0]
 8032acc:	4b09      	ldr	r3, [pc, #36]	; (8032af4 <udp_input_local_match+0xc4>)
 8032ace:	695b      	ldr	r3, [r3, #20]
 8032ad0:	429a      	cmp	r2, r3
 8032ad2:	d101      	bne.n	8032ad8 <udp_input_local_match+0xa8>
        return 1;
 8032ad4:	2301      	movs	r3, #1
 8032ad6:	e000      	b.n	8032ada <udp_input_local_match+0xaa>
      }
  }

  return 0;
 8032ad8:	2300      	movs	r3, #0
}
 8032ada:	4618      	mov	r0, r3
 8032adc:	3710      	adds	r7, #16
 8032ade:	46bd      	mov	sp, r7
 8032ae0:	bd80      	pop	{r7, pc}
 8032ae2:	bf00      	nop
 8032ae4:	0803a02c 	.word	0x0803a02c
 8032ae8:	0803a05c 	.word	0x0803a05c
 8032aec:	0803a080 	.word	0x0803a080
 8032af0:	0803a0a8 	.word	0x0803a0a8
 8032af4:	2000b28c 	.word	0x2000b28c

08032af8 <udp_input>:
 * @param inp network interface on which the datagram was received.
 *
 */
void
udp_input(struct pbuf *p, struct netif *inp)
{
 8032af8:	b590      	push	{r4, r7, lr}
 8032afa:	b08d      	sub	sp, #52	; 0x34
 8032afc:	af02      	add	r7, sp, #8
 8032afe:	6078      	str	r0, [r7, #4]
 8032b00:	6039      	str	r1, [r7, #0]
  struct udp_hdr *udphdr;
  struct udp_pcb *pcb, *prev;
  struct udp_pcb *uncon_pcb;
  u16_t src, dest;
  u8_t broadcast;
  u8_t for_us = 0;
 8032b02:	2300      	movs	r3, #0
 8032b04:	76fb      	strb	r3, [r7, #27]

  LWIP_UNUSED_ARG(inp);

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("udp_input: invalid pbuf", p != NULL);
 8032b06:	687b      	ldr	r3, [r7, #4]
 8032b08:	2b00      	cmp	r3, #0
 8032b0a:	d105      	bne.n	8032b18 <udp_input+0x20>
 8032b0c:	4b98      	ldr	r3, [pc, #608]	; (8032d70 <udp_input+0x278>)
 8032b0e:	22cf      	movs	r2, #207	; 0xcf
 8032b10:	4998      	ldr	r1, [pc, #608]	; (8032d74 <udp_input+0x27c>)
 8032b12:	4899      	ldr	r0, [pc, #612]	; (8032d78 <udp_input+0x280>)
 8032b14:	f003 fb40 	bl	8036198 <iprintf>
  LWIP_ASSERT("udp_input: invalid netif", inp != NULL);
 8032b18:	683b      	ldr	r3, [r7, #0]
 8032b1a:	2b00      	cmp	r3, #0
 8032b1c:	d105      	bne.n	8032b2a <udp_input+0x32>
 8032b1e:	4b94      	ldr	r3, [pc, #592]	; (8032d70 <udp_input+0x278>)
 8032b20:	22d0      	movs	r2, #208	; 0xd0
 8032b22:	4996      	ldr	r1, [pc, #600]	; (8032d7c <udp_input+0x284>)
 8032b24:	4894      	ldr	r0, [pc, #592]	; (8032d78 <udp_input+0x280>)
 8032b26:	f003 fb37 	bl	8036198 <iprintf>

  PERF_START;

  UDP_STATS_INC(udp.recv);
 8032b2a:	4b95      	ldr	r3, [pc, #596]	; (8032d80 <udp_input+0x288>)
 8032b2c:	f8b3 307a 	ldrh.w	r3, [r3, #122]	; 0x7a
 8032b30:	3301      	adds	r3, #1
 8032b32:	b29a      	uxth	r2, r3
 8032b34:	4b92      	ldr	r3, [pc, #584]	; (8032d80 <udp_input+0x288>)
 8032b36:	f8a3 207a 	strh.w	r2, [r3, #122]	; 0x7a

  /* Check minimum length (UDP header) */
  if (p->len < UDP_HLEN) {
 8032b3a:	687b      	ldr	r3, [r7, #4]
 8032b3c:	895b      	ldrh	r3, [r3, #10]
 8032b3e:	2b07      	cmp	r3, #7
 8032b40:	d813      	bhi.n	8032b6a <udp_input+0x72>
    /* drop short packets */
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_input: short UDP datagram (%"U16_F" bytes) discarded\n", p->tot_len));
    UDP_STATS_INC(udp.lenerr);
 8032b42:	4b8f      	ldr	r3, [pc, #572]	; (8032d80 <udp_input+0x288>)
 8032b44:	f8b3 3082 	ldrh.w	r3, [r3, #130]	; 0x82
 8032b48:	3301      	adds	r3, #1
 8032b4a:	b29a      	uxth	r2, r3
 8032b4c:	4b8c      	ldr	r3, [pc, #560]	; (8032d80 <udp_input+0x288>)
 8032b4e:	f8a3 2082 	strh.w	r2, [r3, #130]	; 0x82
    UDP_STATS_INC(udp.drop);
 8032b52:	4b8b      	ldr	r3, [pc, #556]	; (8032d80 <udp_input+0x288>)
 8032b54:	f8b3 307e 	ldrh.w	r3, [r3, #126]	; 0x7e
 8032b58:	3301      	adds	r3, #1
 8032b5a:	b29a      	uxth	r2, r3
 8032b5c:	4b88      	ldr	r3, [pc, #544]	; (8032d80 <udp_input+0x288>)
 8032b5e:	f8a3 207e 	strh.w	r2, [r3, #126]	; 0x7e
    MIB2_STATS_INC(mib2.udpinerrors);
    pbuf_free(p);
 8032b62:	6878      	ldr	r0, [r7, #4]
 8032b64:	f7f9 f99a 	bl	802be9c <pbuf_free>
    goto end;
 8032b68:	e0fd      	b.n	8032d66 <udp_input+0x26e>
  }

  udphdr = (struct udp_hdr *)p->payload;
 8032b6a:	687b      	ldr	r3, [r7, #4]
 8032b6c:	685b      	ldr	r3, [r3, #4]
 8032b6e:	617b      	str	r3, [r7, #20]

  /* is broadcast packet ? */
  broadcast = ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif());
 8032b70:	4b84      	ldr	r3, [pc, #528]	; (8032d84 <udp_input+0x28c>)
 8032b72:	695b      	ldr	r3, [r3, #20]
 8032b74:	4a83      	ldr	r2, [pc, #524]	; (8032d84 <udp_input+0x28c>)
 8032b76:	6812      	ldr	r2, [r2, #0]
 8032b78:	4611      	mov	r1, r2
 8032b7a:	4618      	mov	r0, r3
 8032b7c:	f001 fea8 	bl	80348d0 <ip4_addr_isbroadcast_u32>
 8032b80:	4603      	mov	r3, r0
 8032b82:	74fb      	strb	r3, [r7, #19]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_input: received datagram of length %"U16_F"\n", p->tot_len));

  /* convert src and dest ports to host byte order */
  src = lwip_ntohs(udphdr->src);
 8032b84:	697b      	ldr	r3, [r7, #20]
 8032b86:	881b      	ldrh	r3, [r3, #0]
 8032b88:	b29b      	uxth	r3, r3
 8032b8a:	4618      	mov	r0, r3
 8032b8c:	f7f7 fcc4 	bl	802a518 <lwip_htons>
 8032b90:	4603      	mov	r3, r0
 8032b92:	823b      	strh	r3, [r7, #16]
  dest = lwip_ntohs(udphdr->dest);
 8032b94:	697b      	ldr	r3, [r7, #20]
 8032b96:	885b      	ldrh	r3, [r3, #2]
 8032b98:	b29b      	uxth	r3, r3
 8032b9a:	4618      	mov	r0, r3
 8032b9c:	f7f7 fcbc 	bl	802a518 <lwip_htons>
 8032ba0:	4603      	mov	r3, r0
 8032ba2:	81fb      	strh	r3, [r7, #14]
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_dest_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", lwip_ntohs(udphdr->dest)));
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_src_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", lwip_ntohs(udphdr->src)));

  pcb = NULL;
 8032ba4:	2300      	movs	r3, #0
 8032ba6:	627b      	str	r3, [r7, #36]	; 0x24
  prev = NULL;
 8032ba8:	2300      	movs	r3, #0
 8032baa:	623b      	str	r3, [r7, #32]
  uncon_pcb = NULL;
 8032bac:	2300      	movs	r3, #0
 8032bae:	61fb      	str	r3, [r7, #28]
  /* Iterate through the UDP pcb list for a matching pcb.
   * 'Perfect match' pcbs (connected to the remote port & ip address) are
   * preferred. If no perfect match is found, the first unconnected pcb that
   * matches the local port and ip address gets the datagram. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8032bb0:	4b75      	ldr	r3, [pc, #468]	; (8032d88 <udp_input+0x290>)
 8032bb2:	681b      	ldr	r3, [r3, #0]
 8032bb4:	627b      	str	r3, [r7, #36]	; 0x24
 8032bb6:	e05d      	b.n	8032c74 <udp_input+0x17c>
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", pcb->local_port));
    ip_addr_debug_print_val(UDP_DEBUG, pcb->remote_ip);
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", pcb->remote_port));

    /* compare PCB local addr+port to UDP destination addr+port */
    if ((pcb->local_port == dest) &&
 8032bb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8032bba:	8a5b      	ldrh	r3, [r3, #18]
 8032bbc:	89fa      	ldrh	r2, [r7, #14]
 8032bbe:	429a      	cmp	r2, r3
 8032bc0:	d153      	bne.n	8032c6a <udp_input+0x172>
        (udp_input_local_match(pcb, inp, broadcast) != 0)) {
 8032bc2:	7cfb      	ldrb	r3, [r7, #19]
 8032bc4:	461a      	mov	r2, r3
 8032bc6:	6839      	ldr	r1, [r7, #0]
 8032bc8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8032bca:	f7ff ff31 	bl	8032a30 <udp_input_local_match>
 8032bce:	4603      	mov	r3, r0
    if ((pcb->local_port == dest) &&
 8032bd0:	2b00      	cmp	r3, #0
 8032bd2:	d04a      	beq.n	8032c6a <udp_input+0x172>
      if ((pcb->flags & UDP_FLAGS_CONNECTED) == 0) {
 8032bd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8032bd6:	7c1b      	ldrb	r3, [r3, #16]
 8032bd8:	f003 0304 	and.w	r3, r3, #4
 8032bdc:	2b00      	cmp	r3, #0
 8032bde:	d11d      	bne.n	8032c1c <udp_input+0x124>
        if (uncon_pcb == NULL) {
 8032be0:	69fb      	ldr	r3, [r7, #28]
 8032be2:	2b00      	cmp	r3, #0
 8032be4:	d102      	bne.n	8032bec <udp_input+0xf4>
          /* the first unconnected matching PCB */
          uncon_pcb = pcb;
 8032be6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8032be8:	61fb      	str	r3, [r7, #28]
 8032bea:	e017      	b.n	8032c1c <udp_input+0x124>
#if LWIP_IPV4
        } else if (broadcast && ip4_current_dest_addr()->addr == IPADDR_BROADCAST) {
 8032bec:	7cfb      	ldrb	r3, [r7, #19]
 8032bee:	2b00      	cmp	r3, #0
 8032bf0:	d014      	beq.n	8032c1c <udp_input+0x124>
 8032bf2:	4b64      	ldr	r3, [pc, #400]	; (8032d84 <udp_input+0x28c>)
 8032bf4:	695b      	ldr	r3, [r3, #20]
 8032bf6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8032bfa:	d10f      	bne.n	8032c1c <udp_input+0x124>
          /* global broadcast address (only valid for IPv4; match was checked before) */
          if (!IP_IS_V4_VAL(uncon_pcb->local_ip) || !ip4_addr_cmp(ip_2_ip4(&uncon_pcb->local_ip), netif_ip4_addr(inp))) {
 8032bfc:	69fb      	ldr	r3, [r7, #28]
 8032bfe:	681a      	ldr	r2, [r3, #0]
 8032c00:	683b      	ldr	r3, [r7, #0]
 8032c02:	3304      	adds	r3, #4
 8032c04:	681b      	ldr	r3, [r3, #0]
 8032c06:	429a      	cmp	r2, r3
 8032c08:	d008      	beq.n	8032c1c <udp_input+0x124>
            /* uncon_pcb does not match the input netif, check this pcb */
            if (IP_IS_V4_VAL(pcb->local_ip) && ip4_addr_cmp(ip_2_ip4(&pcb->local_ip), netif_ip4_addr(inp))) {
 8032c0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8032c0c:	681a      	ldr	r2, [r3, #0]
 8032c0e:	683b      	ldr	r3, [r7, #0]
 8032c10:	3304      	adds	r3, #4
 8032c12:	681b      	ldr	r3, [r3, #0]
 8032c14:	429a      	cmp	r2, r3
 8032c16:	d101      	bne.n	8032c1c <udp_input+0x124>
              /* better match */
              uncon_pcb = pcb;
 8032c18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8032c1a:	61fb      	str	r3, [r7, #28]
        }
#endif /* SO_REUSE */
      }

      /* compare PCB remote addr+port to UDP source addr+port */
      if ((pcb->remote_port == src) &&
 8032c1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8032c1e:	8a9b      	ldrh	r3, [r3, #20]
 8032c20:	8a3a      	ldrh	r2, [r7, #16]
 8032c22:	429a      	cmp	r2, r3
 8032c24:	d121      	bne.n	8032c6a <udp_input+0x172>
          (ip_addr_isany_val(pcb->remote_ip) ||
 8032c26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8032c28:	685b      	ldr	r3, [r3, #4]
      if ((pcb->remote_port == src) &&
 8032c2a:	2b00      	cmp	r3, #0
 8032c2c:	d005      	beq.n	8032c3a <udp_input+0x142>
           ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()))) {
 8032c2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8032c30:	685a      	ldr	r2, [r3, #4]
 8032c32:	4b54      	ldr	r3, [pc, #336]	; (8032d84 <udp_input+0x28c>)
 8032c34:	691b      	ldr	r3, [r3, #16]
          (ip_addr_isany_val(pcb->remote_ip) ||
 8032c36:	429a      	cmp	r2, r3
 8032c38:	d117      	bne.n	8032c6a <udp_input+0x172>
        /* the first fully matching PCB */
        if (prev != NULL) {
 8032c3a:	6a3b      	ldr	r3, [r7, #32]
 8032c3c:	2b00      	cmp	r3, #0
 8032c3e:	d00b      	beq.n	8032c58 <udp_input+0x160>
          /* move the pcb to the front of udp_pcbs so that is
             found faster next time */
          prev->next = pcb->next;
 8032c40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8032c42:	68da      	ldr	r2, [r3, #12]
 8032c44:	6a3b      	ldr	r3, [r7, #32]
 8032c46:	60da      	str	r2, [r3, #12]
          pcb->next = udp_pcbs;
 8032c48:	4b4f      	ldr	r3, [pc, #316]	; (8032d88 <udp_input+0x290>)
 8032c4a:	681a      	ldr	r2, [r3, #0]
 8032c4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8032c4e:	60da      	str	r2, [r3, #12]
          udp_pcbs = pcb;
 8032c50:	4a4d      	ldr	r2, [pc, #308]	; (8032d88 <udp_input+0x290>)
 8032c52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8032c54:	6013      	str	r3, [r2, #0]
        } else {
          UDP_STATS_INC(udp.cachehit);
        }
        break;
 8032c56:	e010      	b.n	8032c7a <udp_input+0x182>
          UDP_STATS_INC(udp.cachehit);
 8032c58:	4b49      	ldr	r3, [pc, #292]	; (8032d80 <udp_input+0x288>)
 8032c5a:	f8b3 308e 	ldrh.w	r3, [r3, #142]	; 0x8e
 8032c5e:	3301      	adds	r3, #1
 8032c60:	b29a      	uxth	r2, r3
 8032c62:	4b47      	ldr	r3, [pc, #284]	; (8032d80 <udp_input+0x288>)
 8032c64:	f8a3 208e 	strh.w	r2, [r3, #142]	; 0x8e
        break;
 8032c68:	e007      	b.n	8032c7a <udp_input+0x182>
      }
    }

    prev = pcb;
 8032c6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8032c6c:	623b      	str	r3, [r7, #32]
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8032c6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8032c70:	68db      	ldr	r3, [r3, #12]
 8032c72:	627b      	str	r3, [r7, #36]	; 0x24
 8032c74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8032c76:	2b00      	cmp	r3, #0
 8032c78:	d19e      	bne.n	8032bb8 <udp_input+0xc0>
  }
  /* no fully matching pcb found? then look for an unconnected pcb */
  if (pcb == NULL) {
 8032c7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8032c7c:	2b00      	cmp	r3, #0
 8032c7e:	d101      	bne.n	8032c84 <udp_input+0x18c>
    pcb = uncon_pcb;
 8032c80:	69fb      	ldr	r3, [r7, #28]
 8032c82:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* Check checksum if this is a match or if it was directed at us. */
  if (pcb != NULL) {
 8032c84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8032c86:	2b00      	cmp	r3, #0
 8032c88:	d002      	beq.n	8032c90 <udp_input+0x198>
    for_us = 1;
 8032c8a:	2301      	movs	r3, #1
 8032c8c:	76fb      	strb	r3, [r7, #27]
 8032c8e:	e00a      	b.n	8032ca6 <udp_input+0x1ae>
      for_us = netif_get_ip6_addr_match(inp, ip6_current_dest_addr()) >= 0;
    }
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    if (!ip_current_is_v6()) {
      for_us = ip4_addr_cmp(netif_ip4_addr(inp), ip4_current_dest_addr());
 8032c90:	683b      	ldr	r3, [r7, #0]
 8032c92:	3304      	adds	r3, #4
 8032c94:	681a      	ldr	r2, [r3, #0]
 8032c96:	4b3b      	ldr	r3, [pc, #236]	; (8032d84 <udp_input+0x28c>)
 8032c98:	695b      	ldr	r3, [r3, #20]
 8032c9a:	429a      	cmp	r2, r3
 8032c9c:	bf0c      	ite	eq
 8032c9e:	2301      	moveq	r3, #1
 8032ca0:	2300      	movne	r3, #0
 8032ca2:	b2db      	uxtb	r3, r3
 8032ca4:	76fb      	strb	r3, [r7, #27]
    }
#endif /* LWIP_IPV4 */
  }

  if (for_us) {
 8032ca6:	7efb      	ldrb	r3, [r7, #27]
 8032ca8:	2b00      	cmp	r3, #0
 8032caa:	d059      	beq.n	8032d60 <udp_input+0x268>
          }
        }
      }
    }
#endif /* CHECKSUM_CHECK_UDP */
    if (pbuf_remove_header(p, UDP_HLEN)) {
 8032cac:	2108      	movs	r1, #8
 8032cae:	6878      	ldr	r0, [r7, #4]
 8032cb0:	f7f9 f86e 	bl	802bd90 <pbuf_remove_header>
 8032cb4:	4603      	mov	r3, r0
 8032cb6:	2b00      	cmp	r3, #0
 8032cb8:	d012      	beq.n	8032ce0 <udp_input+0x1e8>
      /* Can we cope with this failing? Just assert for now */
      LWIP_ASSERT("pbuf_remove_header failed\n", 0);
 8032cba:	4b2d      	ldr	r3, [pc, #180]	; (8032d70 <udp_input+0x278>)
 8032cbc:	f44f 72b8 	mov.w	r2, #368	; 0x170
 8032cc0:	4932      	ldr	r1, [pc, #200]	; (8032d8c <udp_input+0x294>)
 8032cc2:	482d      	ldr	r0, [pc, #180]	; (8032d78 <udp_input+0x280>)
 8032cc4:	f003 fa68 	bl	8036198 <iprintf>
      UDP_STATS_INC(udp.drop);
 8032cc8:	4b2d      	ldr	r3, [pc, #180]	; (8032d80 <udp_input+0x288>)
 8032cca:	f8b3 307e 	ldrh.w	r3, [r3, #126]	; 0x7e
 8032cce:	3301      	adds	r3, #1
 8032cd0:	b29a      	uxth	r2, r3
 8032cd2:	4b2b      	ldr	r3, [pc, #172]	; (8032d80 <udp_input+0x288>)
 8032cd4:	f8a3 207e 	strh.w	r2, [r3, #126]	; 0x7e
      MIB2_STATS_INC(mib2.udpinerrors);
      pbuf_free(p);
 8032cd8:	6878      	ldr	r0, [r7, #4]
 8032cda:	f7f9 f8df 	bl	802be9c <pbuf_free>
      goto end;
 8032cde:	e042      	b.n	8032d66 <udp_input+0x26e>
    }

    if (pcb != NULL) {
 8032ce0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8032ce2:	2b00      	cmp	r3, #0
 8032ce4:	d012      	beq.n	8032d0c <udp_input+0x214>
          }
        }
      }
#endif /* SO_REUSE && SO_REUSE_RXTOALL */
      /* callback */
      if (pcb->recv != NULL) {
 8032ce6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8032ce8:	699b      	ldr	r3, [r3, #24]
 8032cea:	2b00      	cmp	r3, #0
 8032cec:	d00a      	beq.n	8032d04 <udp_input+0x20c>
        /* now the recv function is responsible for freeing p */
        pcb->recv(pcb->recv_arg, pcb, p, ip_current_src_addr(), src);
 8032cee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8032cf0:	699c      	ldr	r4, [r3, #24]
 8032cf2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8032cf4:	69d8      	ldr	r0, [r3, #28]
 8032cf6:	8a3b      	ldrh	r3, [r7, #16]
 8032cf8:	9300      	str	r3, [sp, #0]
 8032cfa:	4b25      	ldr	r3, [pc, #148]	; (8032d90 <udp_input+0x298>)
 8032cfc:	687a      	ldr	r2, [r7, #4]
 8032cfe:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8032d00:	47a0      	blx	r4
  } else {
    pbuf_free(p);
  }
end:
  PERF_STOP("udp_input");
  return;
 8032d02:	e031      	b.n	8032d68 <udp_input+0x270>
        pbuf_free(p);
 8032d04:	6878      	ldr	r0, [r7, #4]
 8032d06:	f7f9 f8c9 	bl	802be9c <pbuf_free>
        goto end;
 8032d0a:	e02c      	b.n	8032d66 <udp_input+0x26e>
      if (!broadcast && !ip_addr_ismulticast(ip_current_dest_addr())) {
 8032d0c:	7cfb      	ldrb	r3, [r7, #19]
 8032d0e:	2b00      	cmp	r3, #0
 8032d10:	d112      	bne.n	8032d38 <udp_input+0x240>
 8032d12:	4b1c      	ldr	r3, [pc, #112]	; (8032d84 <udp_input+0x28c>)
 8032d14:	695b      	ldr	r3, [r3, #20]
 8032d16:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8032d1a:	2be0      	cmp	r3, #224	; 0xe0
 8032d1c:	d00c      	beq.n	8032d38 <udp_input+0x240>
        pbuf_header_force(p, (s16_t)(ip_current_header_tot_len() + UDP_HLEN));
 8032d1e:	4b19      	ldr	r3, [pc, #100]	; (8032d84 <udp_input+0x28c>)
 8032d20:	899b      	ldrh	r3, [r3, #12]
 8032d22:	3308      	adds	r3, #8
 8032d24:	b29b      	uxth	r3, r3
 8032d26:	b21b      	sxth	r3, r3
 8032d28:	4619      	mov	r1, r3
 8032d2a:	6878      	ldr	r0, [r7, #4]
 8032d2c:	f7f9 f8a3 	bl	802be76 <pbuf_header_force>
        icmp_port_unreach(ip_current_is_v6(), p);
 8032d30:	2103      	movs	r1, #3
 8032d32:	6878      	ldr	r0, [r7, #4]
 8032d34:	f001 fa30 	bl	8034198 <icmp_dest_unreach>
      UDP_STATS_INC(udp.proterr);
 8032d38:	4b11      	ldr	r3, [pc, #68]	; (8032d80 <udp_input+0x288>)
 8032d3a:	f8b3 3088 	ldrh.w	r3, [r3, #136]	; 0x88
 8032d3e:	3301      	adds	r3, #1
 8032d40:	b29a      	uxth	r2, r3
 8032d42:	4b0f      	ldr	r3, [pc, #60]	; (8032d80 <udp_input+0x288>)
 8032d44:	f8a3 2088 	strh.w	r2, [r3, #136]	; 0x88
      UDP_STATS_INC(udp.drop);
 8032d48:	4b0d      	ldr	r3, [pc, #52]	; (8032d80 <udp_input+0x288>)
 8032d4a:	f8b3 307e 	ldrh.w	r3, [r3, #126]	; 0x7e
 8032d4e:	3301      	adds	r3, #1
 8032d50:	b29a      	uxth	r2, r3
 8032d52:	4b0b      	ldr	r3, [pc, #44]	; (8032d80 <udp_input+0x288>)
 8032d54:	f8a3 207e 	strh.w	r2, [r3, #126]	; 0x7e
      pbuf_free(p);
 8032d58:	6878      	ldr	r0, [r7, #4]
 8032d5a:	f7f9 f89f 	bl	802be9c <pbuf_free>
  return;
 8032d5e:	e003      	b.n	8032d68 <udp_input+0x270>
    pbuf_free(p);
 8032d60:	6878      	ldr	r0, [r7, #4]
 8032d62:	f7f9 f89b 	bl	802be9c <pbuf_free>
  return;
 8032d66:	bf00      	nop
  UDP_STATS_INC(udp.drop);
  MIB2_STATS_INC(mib2.udpinerrors);
  pbuf_free(p);
  PERF_STOP("udp_input");
#endif /* CHECKSUM_CHECK_UDP */
}
 8032d68:	372c      	adds	r7, #44	; 0x2c
 8032d6a:	46bd      	mov	sp, r7
 8032d6c:	bd90      	pop	{r4, r7, pc}
 8032d6e:	bf00      	nop
 8032d70:	0803a02c 	.word	0x0803a02c
 8032d74:	0803a0d0 	.word	0x0803a0d0
 8032d78:	0803a080 	.word	0x0803a080
 8032d7c:	0803a0e8 	.word	0x0803a0e8
 8032d80:	2000ed10 	.word	0x2000ed10
 8032d84:	2000b28c 	.word	0x2000b28c
 8032d88:	2000ee68 	.word	0x2000ee68
 8032d8c:	0803a104 	.word	0x0803a104
 8032d90:	2000b29c 	.word	0x2000b29c

08032d94 <udp_bind>:
 *
 * @see udp_disconnect()
 */
err_t
udp_bind(struct udp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 8032d94:	b580      	push	{r7, lr}
 8032d96:	b086      	sub	sp, #24
 8032d98:	af00      	add	r7, sp, #0
 8032d9a:	60f8      	str	r0, [r7, #12]
 8032d9c:	60b9      	str	r1, [r7, #8]
 8032d9e:	4613      	mov	r3, r2
 8032da0:	80fb      	strh	r3, [r7, #6]

  LWIP_ASSERT_CORE_LOCKED();

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 8032da2:	68bb      	ldr	r3, [r7, #8]
 8032da4:	2b00      	cmp	r3, #0
 8032da6:	d101      	bne.n	8032dac <udp_bind+0x18>
    ipaddr = IP4_ADDR_ANY;
 8032da8:	4b39      	ldr	r3, [pc, #228]	; (8032e90 <udp_bind+0xfc>)
 8032daa:	60bb      	str	r3, [r7, #8]
  }
#else /* LWIP_IPV4 */
  LWIP_ERROR("udp_bind: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
#endif /* LWIP_IPV4 */

  LWIP_ERROR("udp_bind: invalid pcb", pcb != NULL, return ERR_ARG);
 8032dac:	68fb      	ldr	r3, [r7, #12]
 8032dae:	2b00      	cmp	r3, #0
 8032db0:	d109      	bne.n	8032dc6 <udp_bind+0x32>
 8032db2:	4b38      	ldr	r3, [pc, #224]	; (8032e94 <udp_bind+0x100>)
 8032db4:	f240 32b7 	movw	r2, #951	; 0x3b7
 8032db8:	4937      	ldr	r1, [pc, #220]	; (8032e98 <udp_bind+0x104>)
 8032dba:	4838      	ldr	r0, [pc, #224]	; (8032e9c <udp_bind+0x108>)
 8032dbc:	f003 f9ec 	bl	8036198 <iprintf>
 8032dc0:	f06f 030f 	mvn.w	r3, #15
 8032dc4:	e060      	b.n	8032e88 <udp_bind+0xf4>

  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_bind(ipaddr = "));
  ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_TRACE, ipaddr);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, (", port = %"U16_F")\n", port));

  rebind = 0;
 8032dc6:	2300      	movs	r3, #0
 8032dc8:	74fb      	strb	r3, [r7, #19]
  /* Check for double bind and rebind of the same pcb */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8032dca:	4b35      	ldr	r3, [pc, #212]	; (8032ea0 <udp_bind+0x10c>)
 8032dcc:	681b      	ldr	r3, [r3, #0]
 8032dce:	617b      	str	r3, [r7, #20]
 8032dd0:	e009      	b.n	8032de6 <udp_bind+0x52>
    /* is this UDP PCB already on active list? */
    if (pcb == ipcb) {
 8032dd2:	68fa      	ldr	r2, [r7, #12]
 8032dd4:	697b      	ldr	r3, [r7, #20]
 8032dd6:	429a      	cmp	r2, r3
 8032dd8:	d102      	bne.n	8032de0 <udp_bind+0x4c>
      rebind = 1;
 8032dda:	2301      	movs	r3, #1
 8032ddc:	74fb      	strb	r3, [r7, #19]
      break;
 8032dde:	e005      	b.n	8032dec <udp_bind+0x58>
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8032de0:	697b      	ldr	r3, [r7, #20]
 8032de2:	68db      	ldr	r3, [r3, #12]
 8032de4:	617b      	str	r3, [r7, #20]
 8032de6:	697b      	ldr	r3, [r7, #20]
 8032de8:	2b00      	cmp	r3, #0
 8032dea:	d1f2      	bne.n	8032dd2 <udp_bind+0x3e>
    ipaddr = &zoned_ipaddr;
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  /* no port specified? */
  if (port == 0) {
 8032dec:	88fb      	ldrh	r3, [r7, #6]
 8032dee:	2b00      	cmp	r3, #0
 8032df0:	d109      	bne.n	8032e06 <udp_bind+0x72>
    port = udp_new_port();
 8032df2:	f7ff fde5 	bl	80329c0 <udp_new_port>
 8032df6:	4603      	mov	r3, r0
 8032df8:	80fb      	strh	r3, [r7, #6]
    if (port == 0) {
 8032dfa:	88fb      	ldrh	r3, [r7, #6]
 8032dfc:	2b00      	cmp	r3, #0
 8032dfe:	d12c      	bne.n	8032e5a <udp_bind+0xc6>
      /* no more ports available in local range */
      LWIP_DEBUGF(UDP_DEBUG, ("udp_bind: out of free UDP ports\n"));
      return ERR_USE;
 8032e00:	f06f 0307 	mvn.w	r3, #7
 8032e04:	e040      	b.n	8032e88 <udp_bind+0xf4>
    }
  } else {
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8032e06:	4b26      	ldr	r3, [pc, #152]	; (8032ea0 <udp_bind+0x10c>)
 8032e08:	681b      	ldr	r3, [r3, #0]
 8032e0a:	617b      	str	r3, [r7, #20]
 8032e0c:	e022      	b.n	8032e54 <udp_bind+0xc0>
      if (pcb != ipcb) {
 8032e0e:	68fa      	ldr	r2, [r7, #12]
 8032e10:	697b      	ldr	r3, [r7, #20]
 8032e12:	429a      	cmp	r2, r3
 8032e14:	d01b      	beq.n	8032e4e <udp_bind+0xba>
        if (!ip_get_option(pcb, SOF_REUSEADDR) ||
            !ip_get_option(ipcb, SOF_REUSEADDR))
#endif /* SO_REUSE */
        {
          /* port matches that of PCB in list and REUSEADDR not set -> reject */
          if ((ipcb->local_port == port) &&
 8032e16:	697b      	ldr	r3, [r7, #20]
 8032e18:	8a5b      	ldrh	r3, [r3, #18]
 8032e1a:	88fa      	ldrh	r2, [r7, #6]
 8032e1c:	429a      	cmp	r2, r3
 8032e1e:	d116      	bne.n	8032e4e <udp_bind+0xba>
              /* IP address matches or any IP used? */
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 8032e20:	697b      	ldr	r3, [r7, #20]
 8032e22:	681a      	ldr	r2, [r3, #0]
 8032e24:	68bb      	ldr	r3, [r7, #8]
 8032e26:	681b      	ldr	r3, [r3, #0]
          if ((ipcb->local_port == port) &&
 8032e28:	429a      	cmp	r2, r3
 8032e2a:	d00d      	beq.n	8032e48 <udp_bind+0xb4>
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 8032e2c:	68bb      	ldr	r3, [r7, #8]
 8032e2e:	2b00      	cmp	r3, #0
 8032e30:	d00a      	beq.n	8032e48 <udp_bind+0xb4>
 8032e32:	68bb      	ldr	r3, [r7, #8]
 8032e34:	681b      	ldr	r3, [r3, #0]
 8032e36:	2b00      	cmp	r3, #0
 8032e38:	d006      	beq.n	8032e48 <udp_bind+0xb4>
              ip_addr_isany(&ipcb->local_ip))) {
 8032e3a:	697b      	ldr	r3, [r7, #20]
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 8032e3c:	2b00      	cmp	r3, #0
 8032e3e:	d003      	beq.n	8032e48 <udp_bind+0xb4>
              ip_addr_isany(&ipcb->local_ip))) {
 8032e40:	697b      	ldr	r3, [r7, #20]
 8032e42:	681b      	ldr	r3, [r3, #0]
 8032e44:	2b00      	cmp	r3, #0
 8032e46:	d102      	bne.n	8032e4e <udp_bind+0xba>
            /* other PCB already binds to this local IP and port */
            LWIP_DEBUGF(UDP_DEBUG,
                        ("udp_bind: local port %"U16_F" already bound by another pcb\n", port));
            return ERR_USE;
 8032e48:	f06f 0307 	mvn.w	r3, #7
 8032e4c:	e01c      	b.n	8032e88 <udp_bind+0xf4>
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8032e4e:	697b      	ldr	r3, [r7, #20]
 8032e50:	68db      	ldr	r3, [r3, #12]
 8032e52:	617b      	str	r3, [r7, #20]
 8032e54:	697b      	ldr	r3, [r7, #20]
 8032e56:	2b00      	cmp	r3, #0
 8032e58:	d1d9      	bne.n	8032e0e <udp_bind+0x7a>
        }
      }
    }
  }

  ip_addr_set_ipaddr(&pcb->local_ip, ipaddr);
 8032e5a:	68bb      	ldr	r3, [r7, #8]
 8032e5c:	2b00      	cmp	r3, #0
 8032e5e:	d002      	beq.n	8032e66 <udp_bind+0xd2>
 8032e60:	68bb      	ldr	r3, [r7, #8]
 8032e62:	681b      	ldr	r3, [r3, #0]
 8032e64:	e000      	b.n	8032e68 <udp_bind+0xd4>
 8032e66:	2300      	movs	r3, #0
 8032e68:	68fa      	ldr	r2, [r7, #12]
 8032e6a:	6013      	str	r3, [r2, #0]

  pcb->local_port = port;
 8032e6c:	68fb      	ldr	r3, [r7, #12]
 8032e6e:	88fa      	ldrh	r2, [r7, #6]
 8032e70:	825a      	strh	r2, [r3, #18]
  mib2_udp_bind(pcb);
  /* pcb not active yet? */
  if (rebind == 0) {
 8032e72:	7cfb      	ldrb	r3, [r7, #19]
 8032e74:	2b00      	cmp	r3, #0
 8032e76:	d106      	bne.n	8032e86 <udp_bind+0xf2>
    /* place the PCB on the active list if not already there */
    pcb->next = udp_pcbs;
 8032e78:	4b09      	ldr	r3, [pc, #36]	; (8032ea0 <udp_bind+0x10c>)
 8032e7a:	681a      	ldr	r2, [r3, #0]
 8032e7c:	68fb      	ldr	r3, [r7, #12]
 8032e7e:	60da      	str	r2, [r3, #12]
    udp_pcbs = pcb;
 8032e80:	4a07      	ldr	r2, [pc, #28]	; (8032ea0 <udp_bind+0x10c>)
 8032e82:	68fb      	ldr	r3, [r7, #12]
 8032e84:	6013      	str	r3, [r2, #0]
  }
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("udp_bind: bound to "));
  ip_addr_debug_print_val(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, pcb->local_ip);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, (", port %"U16_F")\n", pcb->local_port));
  return ERR_OK;
 8032e86:	2300      	movs	r3, #0
}
 8032e88:	4618      	mov	r0, r3
 8032e8a:	3718      	adds	r7, #24
 8032e8c:	46bd      	mov	sp, r7
 8032e8e:	bd80      	pop	{r7, pc}
 8032e90:	0803abc4 	.word	0x0803abc4
 8032e94:	0803a02c 	.word	0x0803a02c
 8032e98:	0803a2f4 	.word	0x0803a2f4
 8032e9c:	0803a080 	.word	0x0803a080
 8032ea0:	2000ee68 	.word	0x2000ee68

08032ea4 <udp_recv>:
 * @param recv function pointer of the callback function
 * @param recv_arg additional argument to pass to the callback function
 */
void
udp_recv(struct udp_pcb *pcb, udp_recv_fn recv, void *recv_arg)
{
 8032ea4:	b580      	push	{r7, lr}
 8032ea6:	b084      	sub	sp, #16
 8032ea8:	af00      	add	r7, sp, #0
 8032eaa:	60f8      	str	r0, [r7, #12]
 8032eac:	60b9      	str	r1, [r7, #8]
 8032eae:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_recv: invalid pcb", pcb != NULL, return);
 8032eb0:	68fb      	ldr	r3, [r7, #12]
 8032eb2:	2b00      	cmp	r3, #0
 8032eb4:	d107      	bne.n	8032ec6 <udp_recv+0x22>
 8032eb6:	4b08      	ldr	r3, [pc, #32]	; (8032ed8 <udp_recv+0x34>)
 8032eb8:	f240 428a 	movw	r2, #1162	; 0x48a
 8032ebc:	4907      	ldr	r1, [pc, #28]	; (8032edc <udp_recv+0x38>)
 8032ebe:	4808      	ldr	r0, [pc, #32]	; (8032ee0 <udp_recv+0x3c>)
 8032ec0:	f003 f96a 	bl	8036198 <iprintf>
 8032ec4:	e005      	b.n	8032ed2 <udp_recv+0x2e>

  /* remember recv() callback and user data */
  pcb->recv = recv;
 8032ec6:	68fb      	ldr	r3, [r7, #12]
 8032ec8:	68ba      	ldr	r2, [r7, #8]
 8032eca:	619a      	str	r2, [r3, #24]
  pcb->recv_arg = recv_arg;
 8032ecc:	68fb      	ldr	r3, [r7, #12]
 8032ece:	687a      	ldr	r2, [r7, #4]
 8032ed0:	61da      	str	r2, [r3, #28]
}
 8032ed2:	3710      	adds	r7, #16
 8032ed4:	46bd      	mov	sp, r7
 8032ed6:	bd80      	pop	{r7, pc}
 8032ed8:	0803a02c 	.word	0x0803a02c
 8032edc:	0803a360 	.word	0x0803a360
 8032ee0:	0803a080 	.word	0x0803a080

08032ee4 <udp_remove>:
 *
 * @see udp_new()
 */
void
udp_remove(struct udp_pcb *pcb)
{
 8032ee4:	b580      	push	{r7, lr}
 8032ee6:	b084      	sub	sp, #16
 8032ee8:	af00      	add	r7, sp, #0
 8032eea:	6078      	str	r0, [r7, #4]
  struct udp_pcb *pcb2;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_remove: invalid pcb", pcb != NULL, return);
 8032eec:	687b      	ldr	r3, [r7, #4]
 8032eee:	2b00      	cmp	r3, #0
 8032ef0:	d107      	bne.n	8032f02 <udp_remove+0x1e>
 8032ef2:	4b19      	ldr	r3, [pc, #100]	; (8032f58 <udp_remove+0x74>)
 8032ef4:	f240 42a1 	movw	r2, #1185	; 0x4a1
 8032ef8:	4918      	ldr	r1, [pc, #96]	; (8032f5c <udp_remove+0x78>)
 8032efa:	4819      	ldr	r0, [pc, #100]	; (8032f60 <udp_remove+0x7c>)
 8032efc:	f003 f94c 	bl	8036198 <iprintf>
 8032f00:	e026      	b.n	8032f50 <udp_remove+0x6c>

  mib2_udp_unbind(pcb);
  /* pcb to be removed is first in list? */
  if (udp_pcbs == pcb) {
 8032f02:	4b18      	ldr	r3, [pc, #96]	; (8032f64 <udp_remove+0x80>)
 8032f04:	681b      	ldr	r3, [r3, #0]
 8032f06:	687a      	ldr	r2, [r7, #4]
 8032f08:	429a      	cmp	r2, r3
 8032f0a:	d105      	bne.n	8032f18 <udp_remove+0x34>
    /* make list start at 2nd pcb */
    udp_pcbs = udp_pcbs->next;
 8032f0c:	4b15      	ldr	r3, [pc, #84]	; (8032f64 <udp_remove+0x80>)
 8032f0e:	681b      	ldr	r3, [r3, #0]
 8032f10:	68db      	ldr	r3, [r3, #12]
 8032f12:	4a14      	ldr	r2, [pc, #80]	; (8032f64 <udp_remove+0x80>)
 8032f14:	6013      	str	r3, [r2, #0]
 8032f16:	e017      	b.n	8032f48 <udp_remove+0x64>
    /* pcb not 1st in list */
  } else {
    for (pcb2 = udp_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
 8032f18:	4b12      	ldr	r3, [pc, #72]	; (8032f64 <udp_remove+0x80>)
 8032f1a:	681b      	ldr	r3, [r3, #0]
 8032f1c:	60fb      	str	r3, [r7, #12]
 8032f1e:	e010      	b.n	8032f42 <udp_remove+0x5e>
      /* find pcb in udp_pcbs list */
      if (pcb2->next != NULL && pcb2->next == pcb) {
 8032f20:	68fb      	ldr	r3, [r7, #12]
 8032f22:	68db      	ldr	r3, [r3, #12]
 8032f24:	2b00      	cmp	r3, #0
 8032f26:	d009      	beq.n	8032f3c <udp_remove+0x58>
 8032f28:	68fb      	ldr	r3, [r7, #12]
 8032f2a:	68db      	ldr	r3, [r3, #12]
 8032f2c:	687a      	ldr	r2, [r7, #4]
 8032f2e:	429a      	cmp	r2, r3
 8032f30:	d104      	bne.n	8032f3c <udp_remove+0x58>
        /* remove pcb from list */
        pcb2->next = pcb->next;
 8032f32:	687b      	ldr	r3, [r7, #4]
 8032f34:	68da      	ldr	r2, [r3, #12]
 8032f36:	68fb      	ldr	r3, [r7, #12]
 8032f38:	60da      	str	r2, [r3, #12]
        break;
 8032f3a:	e005      	b.n	8032f48 <udp_remove+0x64>
    for (pcb2 = udp_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
 8032f3c:	68fb      	ldr	r3, [r7, #12]
 8032f3e:	68db      	ldr	r3, [r3, #12]
 8032f40:	60fb      	str	r3, [r7, #12]
 8032f42:	68fb      	ldr	r3, [r7, #12]
 8032f44:	2b00      	cmp	r3, #0
 8032f46:	d1eb      	bne.n	8032f20 <udp_remove+0x3c>
      }
    }
  }
  memp_free(MEMP_UDP_PCB, pcb);
 8032f48:	6879      	ldr	r1, [r7, #4]
 8032f4a:	2000      	movs	r0, #0
 8032f4c:	f7f8 f902 	bl	802b154 <memp_free>
}
 8032f50:	3710      	adds	r7, #16
 8032f52:	46bd      	mov	sp, r7
 8032f54:	bd80      	pop	{r7, pc}
 8032f56:	bf00      	nop
 8032f58:	0803a02c 	.word	0x0803a02c
 8032f5c:	0803a378 	.word	0x0803a378
 8032f60:	0803a080 	.word	0x0803a080
 8032f64:	2000ee68 	.word	0x2000ee68

08032f68 <udp_new>:
 *
 * @see udp_remove()
 */
struct udp_pcb *
udp_new(void)
{
 8032f68:	b580      	push	{r7, lr}
 8032f6a:	b082      	sub	sp, #8
 8032f6c:	af00      	add	r7, sp, #0
  struct udp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct udp_pcb *)memp_malloc(MEMP_UDP_PCB);
 8032f6e:	2000      	movs	r0, #0
 8032f70:	f7f8 f874 	bl	802b05c <memp_malloc>
 8032f74:	6078      	str	r0, [r7, #4]
  /* could allocate UDP PCB? */
  if (pcb != NULL) {
 8032f76:	687b      	ldr	r3, [r7, #4]
 8032f78:	2b00      	cmp	r3, #0
 8032f7a:	d007      	beq.n	8032f8c <udp_new+0x24>
    /* UDP Lite: by initializing to all zeroes, chksum_len is set to 0
     * which means checksum is generated over the whole datagram per default
     * (recommended as default by RFC 3828). */
    /* initialize PCB to all zeroes */
    memset(pcb, 0, sizeof(struct udp_pcb));
 8032f7c:	2220      	movs	r2, #32
 8032f7e:	2100      	movs	r1, #0
 8032f80:	6878      	ldr	r0, [r7, #4]
 8032f82:	f003 f821 	bl	8035fc8 <memset>
    pcb->ttl = UDP_TTL;
 8032f86:	687b      	ldr	r3, [r7, #4]
 8032f88:	22ff      	movs	r2, #255	; 0xff
 8032f8a:	72da      	strb	r2, [r3, #11]
#if LWIP_MULTICAST_TX_OPTIONS
    udp_set_multicast_ttl(pcb, UDP_TTL);
#endif /* LWIP_MULTICAST_TX_OPTIONS */
  }
  return pcb;
 8032f8c:	687b      	ldr	r3, [r7, #4]
}
 8032f8e:	4618      	mov	r0, r3
 8032f90:	3708      	adds	r7, #8
 8032f92:	46bd      	mov	sp, r7
 8032f94:	bd80      	pop	{r7, pc}

08032f96 <udp_new_ip_type>:
 *
 * @see udp_remove()
 */
struct udp_pcb *
udp_new_ip_type(u8_t type)
{
 8032f96:	b580      	push	{r7, lr}
 8032f98:	b084      	sub	sp, #16
 8032f9a:	af00      	add	r7, sp, #0
 8032f9c:	4603      	mov	r3, r0
 8032f9e:	71fb      	strb	r3, [r7, #7]
  struct udp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = udp_new();
 8032fa0:	f7ff ffe2 	bl	8032f68 <udp_new>
 8032fa4:	60f8      	str	r0, [r7, #12]
    IP_SET_TYPE_VAL(pcb->remote_ip, type);
  }
#else
  LWIP_UNUSED_ARG(type);
#endif /* LWIP_IPV4 && LWIP_IPV6 */
  return pcb;
 8032fa6:	68fb      	ldr	r3, [r7, #12]
}
 8032fa8:	4618      	mov	r0, r3
 8032faa:	3710      	adds	r7, #16
 8032fac:	46bd      	mov	sp, r7
 8032fae:	bd80      	pop	{r7, pc}

08032fb0 <udp_netif_ip_addr_changed>:
 *
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change
 */
void udp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 8032fb0:	b480      	push	{r7}
 8032fb2:	b085      	sub	sp, #20
 8032fb4:	af00      	add	r7, sp, #0
 8032fb6:	6078      	str	r0, [r7, #4]
 8032fb8:	6039      	str	r1, [r7, #0]
  struct udp_pcb *upcb;

  if (!ip_addr_isany(old_addr) && !ip_addr_isany(new_addr)) {
 8032fba:	687b      	ldr	r3, [r7, #4]
 8032fbc:	2b00      	cmp	r3, #0
 8032fbe:	d01e      	beq.n	8032ffe <udp_netif_ip_addr_changed+0x4e>
 8032fc0:	687b      	ldr	r3, [r7, #4]
 8032fc2:	681b      	ldr	r3, [r3, #0]
 8032fc4:	2b00      	cmp	r3, #0
 8032fc6:	d01a      	beq.n	8032ffe <udp_netif_ip_addr_changed+0x4e>
 8032fc8:	683b      	ldr	r3, [r7, #0]
 8032fca:	2b00      	cmp	r3, #0
 8032fcc:	d017      	beq.n	8032ffe <udp_netif_ip_addr_changed+0x4e>
 8032fce:	683b      	ldr	r3, [r7, #0]
 8032fd0:	681b      	ldr	r3, [r3, #0]
 8032fd2:	2b00      	cmp	r3, #0
 8032fd4:	d013      	beq.n	8032ffe <udp_netif_ip_addr_changed+0x4e>
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 8032fd6:	4b0d      	ldr	r3, [pc, #52]	; (803300c <udp_netif_ip_addr_changed+0x5c>)
 8032fd8:	681b      	ldr	r3, [r3, #0]
 8032fda:	60fb      	str	r3, [r7, #12]
 8032fdc:	e00c      	b.n	8032ff8 <udp_netif_ip_addr_changed+0x48>
      /* PCB bound to current local interface address? */
      if (ip_addr_cmp(&upcb->local_ip, old_addr)) {
 8032fde:	68fb      	ldr	r3, [r7, #12]
 8032fe0:	681a      	ldr	r2, [r3, #0]
 8032fe2:	687b      	ldr	r3, [r7, #4]
 8032fe4:	681b      	ldr	r3, [r3, #0]
 8032fe6:	429a      	cmp	r2, r3
 8032fe8:	d103      	bne.n	8032ff2 <udp_netif_ip_addr_changed+0x42>
        /* The PCB is bound to the old ipaddr and
         * is set to bound to the new one instead */
        ip_addr_copy(upcb->local_ip, *new_addr);
 8032fea:	683b      	ldr	r3, [r7, #0]
 8032fec:	681a      	ldr	r2, [r3, #0]
 8032fee:	68fb      	ldr	r3, [r7, #12]
 8032ff0:	601a      	str	r2, [r3, #0]
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 8032ff2:	68fb      	ldr	r3, [r7, #12]
 8032ff4:	68db      	ldr	r3, [r3, #12]
 8032ff6:	60fb      	str	r3, [r7, #12]
 8032ff8:	68fb      	ldr	r3, [r7, #12]
 8032ffa:	2b00      	cmp	r3, #0
 8032ffc:	d1ef      	bne.n	8032fde <udp_netif_ip_addr_changed+0x2e>
      }
    }
  }
}
 8032ffe:	bf00      	nop
 8033000:	3714      	adds	r7, #20
 8033002:	46bd      	mov	sp, r7
 8033004:	f85d 7b04 	ldr.w	r7, [sp], #4
 8033008:	4770      	bx	lr
 803300a:	bf00      	nop
 803300c:	2000ee68 	.word	0x2000ee68

08033010 <etharp_free_entry>:
#endif /* ARP_QUEUEING */

/** Clean up ARP table entries */
static void
etharp_free_entry(int i)
{
 8033010:	b580      	push	{r7, lr}
 8033012:	b082      	sub	sp, #8
 8033014:	af00      	add	r7, sp, #0
 8033016:	6078      	str	r0, [r7, #4]
  /* remove from SNMP ARP index tree */
  mib2_remove_arp_entry(arp_table[i].netif, &arp_table[i].ipaddr);
  /* and empty packet queue */
  if (arp_table[i].q != NULL) {
 8033018:	4915      	ldr	r1, [pc, #84]	; (8033070 <etharp_free_entry+0x60>)
 803301a:	687a      	ldr	r2, [r7, #4]
 803301c:	4613      	mov	r3, r2
 803301e:	005b      	lsls	r3, r3, #1
 8033020:	4413      	add	r3, r2
 8033022:	00db      	lsls	r3, r3, #3
 8033024:	440b      	add	r3, r1
 8033026:	681b      	ldr	r3, [r3, #0]
 8033028:	2b00      	cmp	r3, #0
 803302a:	d013      	beq.n	8033054 <etharp_free_entry+0x44>
    /* remove all queued packets */
    LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_free_entry: freeing entry %"U16_F", packet queue %p.\n", (u16_t)i, (void *)(arp_table[i].q)));
    free_etharp_q(arp_table[i].q);
 803302c:	4910      	ldr	r1, [pc, #64]	; (8033070 <etharp_free_entry+0x60>)
 803302e:	687a      	ldr	r2, [r7, #4]
 8033030:	4613      	mov	r3, r2
 8033032:	005b      	lsls	r3, r3, #1
 8033034:	4413      	add	r3, r2
 8033036:	00db      	lsls	r3, r3, #3
 8033038:	440b      	add	r3, r1
 803303a:	681b      	ldr	r3, [r3, #0]
 803303c:	4618      	mov	r0, r3
 803303e:	f7f8 ff2d 	bl	802be9c <pbuf_free>
    arp_table[i].q = NULL;
 8033042:	490b      	ldr	r1, [pc, #44]	; (8033070 <etharp_free_entry+0x60>)
 8033044:	687a      	ldr	r2, [r7, #4]
 8033046:	4613      	mov	r3, r2
 8033048:	005b      	lsls	r3, r3, #1
 803304a:	4413      	add	r3, r2
 803304c:	00db      	lsls	r3, r3, #3
 803304e:	440b      	add	r3, r1
 8033050:	2200      	movs	r2, #0
 8033052:	601a      	str	r2, [r3, #0]
  }
  /* recycle entry for re-use */
  arp_table[i].state = ETHARP_STATE_EMPTY;
 8033054:	4906      	ldr	r1, [pc, #24]	; (8033070 <etharp_free_entry+0x60>)
 8033056:	687a      	ldr	r2, [r7, #4]
 8033058:	4613      	mov	r3, r2
 803305a:	005b      	lsls	r3, r3, #1
 803305c:	4413      	add	r3, r2
 803305e:	00db      	lsls	r3, r3, #3
 8033060:	440b      	add	r3, r1
 8033062:	3314      	adds	r3, #20
 8033064:	2200      	movs	r2, #0
 8033066:	701a      	strb	r2, [r3, #0]
  arp_table[i].ctime = 0;
  arp_table[i].netif = NULL;
  ip4_addr_set_zero(&arp_table[i].ipaddr);
  arp_table[i].ethaddr = ethzero;
#endif /* LWIP_DEBUG */
}
 8033068:	bf00      	nop
 803306a:	3708      	adds	r7, #8
 803306c:	46bd      	mov	sp, r7
 803306e:	bd80      	pop	{r7, pc}
 8033070:	2000ee6c 	.word	0x2000ee6c

08033074 <etharp_tmr>:
 * This function should be called every ARP_TMR_INTERVAL milliseconds (1 second),
 * in order to expire entries in the ARP table.
 */
void
etharp_tmr(void)
{
 8033074:	b580      	push	{r7, lr}
 8033076:	b082      	sub	sp, #8
 8033078:	af00      	add	r7, sp, #0
  int i;

  LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer\n"));
  /* remove expired entries from the ARP table */
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 803307a:	2300      	movs	r3, #0
 803307c:	607b      	str	r3, [r7, #4]
 803307e:	e096      	b.n	80331ae <etharp_tmr+0x13a>
    u8_t state = arp_table[i].state;
 8033080:	494f      	ldr	r1, [pc, #316]	; (80331c0 <etharp_tmr+0x14c>)
 8033082:	687a      	ldr	r2, [r7, #4]
 8033084:	4613      	mov	r3, r2
 8033086:	005b      	lsls	r3, r3, #1
 8033088:	4413      	add	r3, r2
 803308a:	00db      	lsls	r3, r3, #3
 803308c:	440b      	add	r3, r1
 803308e:	3314      	adds	r3, #20
 8033090:	781b      	ldrb	r3, [r3, #0]
 8033092:	70fb      	strb	r3, [r7, #3]
    if (state != ETHARP_STATE_EMPTY
 8033094:	78fb      	ldrb	r3, [r7, #3]
 8033096:	2b00      	cmp	r3, #0
 8033098:	f000 8086 	beq.w	80331a8 <etharp_tmr+0x134>
#if ETHARP_SUPPORT_STATIC_ENTRIES
        && (state != ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
       ) {
      arp_table[i].ctime++;
 803309c:	4948      	ldr	r1, [pc, #288]	; (80331c0 <etharp_tmr+0x14c>)
 803309e:	687a      	ldr	r2, [r7, #4]
 80330a0:	4613      	mov	r3, r2
 80330a2:	005b      	lsls	r3, r3, #1
 80330a4:	4413      	add	r3, r2
 80330a6:	00db      	lsls	r3, r3, #3
 80330a8:	440b      	add	r3, r1
 80330aa:	3312      	adds	r3, #18
 80330ac:	881b      	ldrh	r3, [r3, #0]
 80330ae:	3301      	adds	r3, #1
 80330b0:	b298      	uxth	r0, r3
 80330b2:	4943      	ldr	r1, [pc, #268]	; (80331c0 <etharp_tmr+0x14c>)
 80330b4:	687a      	ldr	r2, [r7, #4]
 80330b6:	4613      	mov	r3, r2
 80330b8:	005b      	lsls	r3, r3, #1
 80330ba:	4413      	add	r3, r2
 80330bc:	00db      	lsls	r3, r3, #3
 80330be:	440b      	add	r3, r1
 80330c0:	3312      	adds	r3, #18
 80330c2:	4602      	mov	r2, r0
 80330c4:	801a      	strh	r2, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 80330c6:	493e      	ldr	r1, [pc, #248]	; (80331c0 <etharp_tmr+0x14c>)
 80330c8:	687a      	ldr	r2, [r7, #4]
 80330ca:	4613      	mov	r3, r2
 80330cc:	005b      	lsls	r3, r3, #1
 80330ce:	4413      	add	r3, r2
 80330d0:	00db      	lsls	r3, r3, #3
 80330d2:	440b      	add	r3, r1
 80330d4:	3312      	adds	r3, #18
 80330d6:	881b      	ldrh	r3, [r3, #0]
 80330d8:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 80330dc:	d215      	bcs.n	803310a <etharp_tmr+0x96>
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 80330de:	4938      	ldr	r1, [pc, #224]	; (80331c0 <etharp_tmr+0x14c>)
 80330e0:	687a      	ldr	r2, [r7, #4]
 80330e2:	4613      	mov	r3, r2
 80330e4:	005b      	lsls	r3, r3, #1
 80330e6:	4413      	add	r3, r2
 80330e8:	00db      	lsls	r3, r3, #3
 80330ea:	440b      	add	r3, r1
 80330ec:	3314      	adds	r3, #20
 80330ee:	781b      	ldrb	r3, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 80330f0:	2b01      	cmp	r3, #1
 80330f2:	d10e      	bne.n	8033112 <etharp_tmr+0x9e>
           (arp_table[i].ctime >= ARP_MAXPENDING))) {
 80330f4:	4932      	ldr	r1, [pc, #200]	; (80331c0 <etharp_tmr+0x14c>)
 80330f6:	687a      	ldr	r2, [r7, #4]
 80330f8:	4613      	mov	r3, r2
 80330fa:	005b      	lsls	r3, r3, #1
 80330fc:	4413      	add	r3, r2
 80330fe:	00db      	lsls	r3, r3, #3
 8033100:	440b      	add	r3, r1
 8033102:	3312      	adds	r3, #18
 8033104:	881b      	ldrh	r3, [r3, #0]
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 8033106:	2b04      	cmp	r3, #4
 8033108:	d903      	bls.n	8033112 <etharp_tmr+0x9e>
        /* pending or stable entry has become old! */
        LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer: expired %s entry %d.\n",
                                   arp_table[i].state >= ETHARP_STATE_STABLE ? "stable" : "pending", i));
        /* clean up entries that have just been expired */
        etharp_free_entry(i);
 803310a:	6878      	ldr	r0, [r7, #4]
 803310c:	f7ff ff80 	bl	8033010 <etharp_free_entry>
 8033110:	e04a      	b.n	80331a8 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_1) {
 8033112:	492b      	ldr	r1, [pc, #172]	; (80331c0 <etharp_tmr+0x14c>)
 8033114:	687a      	ldr	r2, [r7, #4]
 8033116:	4613      	mov	r3, r2
 8033118:	005b      	lsls	r3, r3, #1
 803311a:	4413      	add	r3, r2
 803311c:	00db      	lsls	r3, r3, #3
 803311e:	440b      	add	r3, r1
 8033120:	3314      	adds	r3, #20
 8033122:	781b      	ldrb	r3, [r3, #0]
 8033124:	2b03      	cmp	r3, #3
 8033126:	d10a      	bne.n	803313e <etharp_tmr+0xca>
        /* Don't send more than one request every 2 seconds. */
        arp_table[i].state = ETHARP_STATE_STABLE_REREQUESTING_2;
 8033128:	4925      	ldr	r1, [pc, #148]	; (80331c0 <etharp_tmr+0x14c>)
 803312a:	687a      	ldr	r2, [r7, #4]
 803312c:	4613      	mov	r3, r2
 803312e:	005b      	lsls	r3, r3, #1
 8033130:	4413      	add	r3, r2
 8033132:	00db      	lsls	r3, r3, #3
 8033134:	440b      	add	r3, r1
 8033136:	3314      	adds	r3, #20
 8033138:	2204      	movs	r2, #4
 803313a:	701a      	strb	r2, [r3, #0]
 803313c:	e034      	b.n	80331a8 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_2) {
 803313e:	4920      	ldr	r1, [pc, #128]	; (80331c0 <etharp_tmr+0x14c>)
 8033140:	687a      	ldr	r2, [r7, #4]
 8033142:	4613      	mov	r3, r2
 8033144:	005b      	lsls	r3, r3, #1
 8033146:	4413      	add	r3, r2
 8033148:	00db      	lsls	r3, r3, #3
 803314a:	440b      	add	r3, r1
 803314c:	3314      	adds	r3, #20
 803314e:	781b      	ldrb	r3, [r3, #0]
 8033150:	2b04      	cmp	r3, #4
 8033152:	d10a      	bne.n	803316a <etharp_tmr+0xf6>
        /* Reset state to stable, so that the next transmitted packet will
           re-send an ARP request. */
        arp_table[i].state = ETHARP_STATE_STABLE;
 8033154:	491a      	ldr	r1, [pc, #104]	; (80331c0 <etharp_tmr+0x14c>)
 8033156:	687a      	ldr	r2, [r7, #4]
 8033158:	4613      	mov	r3, r2
 803315a:	005b      	lsls	r3, r3, #1
 803315c:	4413      	add	r3, r2
 803315e:	00db      	lsls	r3, r3, #3
 8033160:	440b      	add	r3, r1
 8033162:	3314      	adds	r3, #20
 8033164:	2202      	movs	r2, #2
 8033166:	701a      	strb	r2, [r3, #0]
 8033168:	e01e      	b.n	80331a8 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 803316a:	4915      	ldr	r1, [pc, #84]	; (80331c0 <etharp_tmr+0x14c>)
 803316c:	687a      	ldr	r2, [r7, #4]
 803316e:	4613      	mov	r3, r2
 8033170:	005b      	lsls	r3, r3, #1
 8033172:	4413      	add	r3, r2
 8033174:	00db      	lsls	r3, r3, #3
 8033176:	440b      	add	r3, r1
 8033178:	3314      	adds	r3, #20
 803317a:	781b      	ldrb	r3, [r3, #0]
 803317c:	2b01      	cmp	r3, #1
 803317e:	d113      	bne.n	80331a8 <etharp_tmr+0x134>
        /* still pending, resend an ARP query */
        etharp_request(arp_table[i].netif, &arp_table[i].ipaddr);
 8033180:	490f      	ldr	r1, [pc, #60]	; (80331c0 <etharp_tmr+0x14c>)
 8033182:	687a      	ldr	r2, [r7, #4]
 8033184:	4613      	mov	r3, r2
 8033186:	005b      	lsls	r3, r3, #1
 8033188:	4413      	add	r3, r2
 803318a:	00db      	lsls	r3, r3, #3
 803318c:	440b      	add	r3, r1
 803318e:	3308      	adds	r3, #8
 8033190:	6818      	ldr	r0, [r3, #0]
 8033192:	687a      	ldr	r2, [r7, #4]
 8033194:	4613      	mov	r3, r2
 8033196:	005b      	lsls	r3, r3, #1
 8033198:	4413      	add	r3, r2
 803319a:	00db      	lsls	r3, r3, #3
 803319c:	4a08      	ldr	r2, [pc, #32]	; (80331c0 <etharp_tmr+0x14c>)
 803319e:	4413      	add	r3, r2
 80331a0:	3304      	adds	r3, #4
 80331a2:	4619      	mov	r1, r3
 80331a4:	f000 feae 	bl	8033f04 <etharp_request>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 80331a8:	687b      	ldr	r3, [r7, #4]
 80331aa:	3301      	adds	r3, #1
 80331ac:	607b      	str	r3, [r7, #4]
 80331ae:	687b      	ldr	r3, [r7, #4]
 80331b0:	2b09      	cmp	r3, #9
 80331b2:	f77f af65 	ble.w	8033080 <etharp_tmr+0xc>
      }
    }
  }
}
 80331b6:	bf00      	nop
 80331b8:	bf00      	nop
 80331ba:	3708      	adds	r7, #8
 80331bc:	46bd      	mov	sp, r7
 80331be:	bd80      	pop	{r7, pc}
 80331c0:	2000ee6c 	.word	0x2000ee6c

080331c4 <etharp_find_entry>:
 * @return The ARP entry index that matched or is created, ERR_MEM if no
 * entry is found or could be recycled.
 */
static s16_t
etharp_find_entry(const ip4_addr_t *ipaddr, u8_t flags, struct netif *netif)
{
 80331c4:	b580      	push	{r7, lr}
 80331c6:	b08a      	sub	sp, #40	; 0x28
 80331c8:	af00      	add	r7, sp, #0
 80331ca:	60f8      	str	r0, [r7, #12]
 80331cc:	460b      	mov	r3, r1
 80331ce:	607a      	str	r2, [r7, #4]
 80331d0:	72fb      	strb	r3, [r7, #11]
  s16_t old_pending = ARP_TABLE_SIZE, old_stable = ARP_TABLE_SIZE;
 80331d2:	230a      	movs	r3, #10
 80331d4:	84fb      	strh	r3, [r7, #38]	; 0x26
 80331d6:	230a      	movs	r3, #10
 80331d8:	84bb      	strh	r3, [r7, #36]	; 0x24
  s16_t empty = ARP_TABLE_SIZE;
 80331da:	230a      	movs	r3, #10
 80331dc:	847b      	strh	r3, [r7, #34]	; 0x22
  s16_t i = 0;
 80331de:	2300      	movs	r3, #0
 80331e0:	843b      	strh	r3, [r7, #32]
  /* oldest entry with packets on queue */
  s16_t old_queue = ARP_TABLE_SIZE;
 80331e2:	230a      	movs	r3, #10
 80331e4:	83fb      	strh	r3, [r7, #30]
  /* its age */
  u16_t age_queue = 0, age_pending = 0, age_stable = 0;
 80331e6:	2300      	movs	r3, #0
 80331e8:	83bb      	strh	r3, [r7, #28]
 80331ea:	2300      	movs	r3, #0
 80331ec:	837b      	strh	r3, [r7, #26]
 80331ee:	2300      	movs	r3, #0
 80331f0:	833b      	strh	r3, [r7, #24]
   * 4) remember the oldest pending entry with queued packets (if any)
   * 5) search for a matching IP entry, either pending or stable
   *    until 5 matches, or all entries are searched for.
   */

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 80331f2:	2300      	movs	r3, #0
 80331f4:	843b      	strh	r3, [r7, #32]
 80331f6:	e0ae      	b.n	8033356 <etharp_find_entry+0x192>
    u8_t state = arp_table[i].state;
 80331f8:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80331fc:	49a6      	ldr	r1, [pc, #664]	; (8033498 <etharp_find_entry+0x2d4>)
 80331fe:	4613      	mov	r3, r2
 8033200:	005b      	lsls	r3, r3, #1
 8033202:	4413      	add	r3, r2
 8033204:	00db      	lsls	r3, r3, #3
 8033206:	440b      	add	r3, r1
 8033208:	3314      	adds	r3, #20
 803320a:	781b      	ldrb	r3, [r3, #0]
 803320c:	75fb      	strb	r3, [r7, #23]
    /* no empty entry found yet and now we do find one? */
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
 803320e:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 8033212:	2b0a      	cmp	r3, #10
 8033214:	d105      	bne.n	8033222 <etharp_find_entry+0x5e>
 8033216:	7dfb      	ldrb	r3, [r7, #23]
 8033218:	2b00      	cmp	r3, #0
 803321a:	d102      	bne.n	8033222 <etharp_find_entry+0x5e>
      LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_find_entry: found empty entry %d\n", (int)i));
      /* remember first empty entry */
      empty = i;
 803321c:	8c3b      	ldrh	r3, [r7, #32]
 803321e:	847b      	strh	r3, [r7, #34]	; 0x22
 8033220:	e095      	b.n	803334e <etharp_find_entry+0x18a>
    } else if (state != ETHARP_STATE_EMPTY) {
 8033222:	7dfb      	ldrb	r3, [r7, #23]
 8033224:	2b00      	cmp	r3, #0
 8033226:	f000 8092 	beq.w	803334e <etharp_find_entry+0x18a>
      LWIP_ASSERT("state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE",
 803322a:	7dfb      	ldrb	r3, [r7, #23]
 803322c:	2b01      	cmp	r3, #1
 803322e:	d009      	beq.n	8033244 <etharp_find_entry+0x80>
 8033230:	7dfb      	ldrb	r3, [r7, #23]
 8033232:	2b01      	cmp	r3, #1
 8033234:	d806      	bhi.n	8033244 <etharp_find_entry+0x80>
 8033236:	4b99      	ldr	r3, [pc, #612]	; (803349c <etharp_find_entry+0x2d8>)
 8033238:	f240 1223 	movw	r2, #291	; 0x123
 803323c:	4998      	ldr	r1, [pc, #608]	; (80334a0 <etharp_find_entry+0x2dc>)
 803323e:	4899      	ldr	r0, [pc, #612]	; (80334a4 <etharp_find_entry+0x2e0>)
 8033240:	f002 ffaa 	bl	8036198 <iprintf>
                  state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE);
      /* if given, does IP address match IP address in ARP entry? */
      if (ipaddr && ip4_addr_cmp(ipaddr, &arp_table[i].ipaddr)
 8033244:	68fb      	ldr	r3, [r7, #12]
 8033246:	2b00      	cmp	r3, #0
 8033248:	d020      	beq.n	803328c <etharp_find_entry+0xc8>
 803324a:	68fb      	ldr	r3, [r7, #12]
 803324c:	6819      	ldr	r1, [r3, #0]
 803324e:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8033252:	4891      	ldr	r0, [pc, #580]	; (8033498 <etharp_find_entry+0x2d4>)
 8033254:	4613      	mov	r3, r2
 8033256:	005b      	lsls	r3, r3, #1
 8033258:	4413      	add	r3, r2
 803325a:	00db      	lsls	r3, r3, #3
 803325c:	4403      	add	r3, r0
 803325e:	3304      	adds	r3, #4
 8033260:	681b      	ldr	r3, [r3, #0]
 8033262:	4299      	cmp	r1, r3
 8033264:	d112      	bne.n	803328c <etharp_find_entry+0xc8>
#if ETHARP_TABLE_MATCH_NETIF
          && ((netif == NULL) || (netif == arp_table[i].netif))
 8033266:	687b      	ldr	r3, [r7, #4]
 8033268:	2b00      	cmp	r3, #0
 803326a:	d00c      	beq.n	8033286 <etharp_find_entry+0xc2>
 803326c:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8033270:	4989      	ldr	r1, [pc, #548]	; (8033498 <etharp_find_entry+0x2d4>)
 8033272:	4613      	mov	r3, r2
 8033274:	005b      	lsls	r3, r3, #1
 8033276:	4413      	add	r3, r2
 8033278:	00db      	lsls	r3, r3, #3
 803327a:	440b      	add	r3, r1
 803327c:	3308      	adds	r3, #8
 803327e:	681b      	ldr	r3, [r3, #0]
 8033280:	687a      	ldr	r2, [r7, #4]
 8033282:	429a      	cmp	r2, r3
 8033284:	d102      	bne.n	803328c <etharp_find_entry+0xc8>
#endif /* ETHARP_TABLE_MATCH_NETIF */
         ) {
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: found matching entry %d\n", (int)i));
        /* found exact IP address match, simply bail out */
        return i;
 8033286:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 803328a:	e100      	b.n	803348e <etharp_find_entry+0x2ca>
      }
      /* pending entry? */
      if (state == ETHARP_STATE_PENDING) {
 803328c:	7dfb      	ldrb	r3, [r7, #23]
 803328e:	2b01      	cmp	r3, #1
 8033290:	d140      	bne.n	8033314 <etharp_find_entry+0x150>
        /* pending with queued packets? */
        if (arp_table[i].q != NULL) {
 8033292:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8033296:	4980      	ldr	r1, [pc, #512]	; (8033498 <etharp_find_entry+0x2d4>)
 8033298:	4613      	mov	r3, r2
 803329a:	005b      	lsls	r3, r3, #1
 803329c:	4413      	add	r3, r2
 803329e:	00db      	lsls	r3, r3, #3
 80332a0:	440b      	add	r3, r1
 80332a2:	681b      	ldr	r3, [r3, #0]
 80332a4:	2b00      	cmp	r3, #0
 80332a6:	d01a      	beq.n	80332de <etharp_find_entry+0x11a>
          if (arp_table[i].ctime >= age_queue) {
 80332a8:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80332ac:	497a      	ldr	r1, [pc, #488]	; (8033498 <etharp_find_entry+0x2d4>)
 80332ae:	4613      	mov	r3, r2
 80332b0:	005b      	lsls	r3, r3, #1
 80332b2:	4413      	add	r3, r2
 80332b4:	00db      	lsls	r3, r3, #3
 80332b6:	440b      	add	r3, r1
 80332b8:	3312      	adds	r3, #18
 80332ba:	881b      	ldrh	r3, [r3, #0]
 80332bc:	8bba      	ldrh	r2, [r7, #28]
 80332be:	429a      	cmp	r2, r3
 80332c0:	d845      	bhi.n	803334e <etharp_find_entry+0x18a>
            old_queue = i;
 80332c2:	8c3b      	ldrh	r3, [r7, #32]
 80332c4:	83fb      	strh	r3, [r7, #30]
            age_queue = arp_table[i].ctime;
 80332c6:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80332ca:	4973      	ldr	r1, [pc, #460]	; (8033498 <etharp_find_entry+0x2d4>)
 80332cc:	4613      	mov	r3, r2
 80332ce:	005b      	lsls	r3, r3, #1
 80332d0:	4413      	add	r3, r2
 80332d2:	00db      	lsls	r3, r3, #3
 80332d4:	440b      	add	r3, r1
 80332d6:	3312      	adds	r3, #18
 80332d8:	881b      	ldrh	r3, [r3, #0]
 80332da:	83bb      	strh	r3, [r7, #28]
 80332dc:	e037      	b.n	803334e <etharp_find_entry+0x18a>
          }
        } else
          /* pending without queued packets? */
        {
          if (arp_table[i].ctime >= age_pending) {
 80332de:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80332e2:	496d      	ldr	r1, [pc, #436]	; (8033498 <etharp_find_entry+0x2d4>)
 80332e4:	4613      	mov	r3, r2
 80332e6:	005b      	lsls	r3, r3, #1
 80332e8:	4413      	add	r3, r2
 80332ea:	00db      	lsls	r3, r3, #3
 80332ec:	440b      	add	r3, r1
 80332ee:	3312      	adds	r3, #18
 80332f0:	881b      	ldrh	r3, [r3, #0]
 80332f2:	8b7a      	ldrh	r2, [r7, #26]
 80332f4:	429a      	cmp	r2, r3
 80332f6:	d82a      	bhi.n	803334e <etharp_find_entry+0x18a>
            old_pending = i;
 80332f8:	8c3b      	ldrh	r3, [r7, #32]
 80332fa:	84fb      	strh	r3, [r7, #38]	; 0x26
            age_pending = arp_table[i].ctime;
 80332fc:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8033300:	4965      	ldr	r1, [pc, #404]	; (8033498 <etharp_find_entry+0x2d4>)
 8033302:	4613      	mov	r3, r2
 8033304:	005b      	lsls	r3, r3, #1
 8033306:	4413      	add	r3, r2
 8033308:	00db      	lsls	r3, r3, #3
 803330a:	440b      	add	r3, r1
 803330c:	3312      	adds	r3, #18
 803330e:	881b      	ldrh	r3, [r3, #0]
 8033310:	837b      	strh	r3, [r7, #26]
 8033312:	e01c      	b.n	803334e <etharp_find_entry+0x18a>
          }
        }
        /* stable entry? */
      } else if (state >= ETHARP_STATE_STABLE) {
 8033314:	7dfb      	ldrb	r3, [r7, #23]
 8033316:	2b01      	cmp	r3, #1
 8033318:	d919      	bls.n	803334e <etharp_find_entry+0x18a>
        /* don't record old_stable for static entries since they never expire */
        if (state < ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
        {
          /* remember entry with oldest stable entry in oldest, its age in maxtime */
          if (arp_table[i].ctime >= age_stable) {
 803331a:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 803331e:	495e      	ldr	r1, [pc, #376]	; (8033498 <etharp_find_entry+0x2d4>)
 8033320:	4613      	mov	r3, r2
 8033322:	005b      	lsls	r3, r3, #1
 8033324:	4413      	add	r3, r2
 8033326:	00db      	lsls	r3, r3, #3
 8033328:	440b      	add	r3, r1
 803332a:	3312      	adds	r3, #18
 803332c:	881b      	ldrh	r3, [r3, #0]
 803332e:	8b3a      	ldrh	r2, [r7, #24]
 8033330:	429a      	cmp	r2, r3
 8033332:	d80c      	bhi.n	803334e <etharp_find_entry+0x18a>
            old_stable = i;
 8033334:	8c3b      	ldrh	r3, [r7, #32]
 8033336:	84bb      	strh	r3, [r7, #36]	; 0x24
            age_stable = arp_table[i].ctime;
 8033338:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 803333c:	4956      	ldr	r1, [pc, #344]	; (8033498 <etharp_find_entry+0x2d4>)
 803333e:	4613      	mov	r3, r2
 8033340:	005b      	lsls	r3, r3, #1
 8033342:	4413      	add	r3, r2
 8033344:	00db      	lsls	r3, r3, #3
 8033346:	440b      	add	r3, r1
 8033348:	3312      	adds	r3, #18
 803334a:	881b      	ldrh	r3, [r3, #0]
 803334c:	833b      	strh	r3, [r7, #24]
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 803334e:	8c3b      	ldrh	r3, [r7, #32]
 8033350:	3301      	adds	r3, #1
 8033352:	b29b      	uxth	r3, r3
 8033354:	843b      	strh	r3, [r7, #32]
 8033356:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 803335a:	2b09      	cmp	r3, #9
 803335c:	f77f af4c 	ble.w	80331f8 <etharp_find_entry+0x34>
    }
  }
  /* { we have no match } => try to create a new entry */

  /* don't create new entry, only search? */
  if (((flags & ETHARP_FLAG_FIND_ONLY) != 0) ||
 8033360:	7afb      	ldrb	r3, [r7, #11]
 8033362:	f003 0302 	and.w	r3, r3, #2
 8033366:	2b00      	cmp	r3, #0
 8033368:	d108      	bne.n	803337c <etharp_find_entry+0x1b8>
 803336a:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 803336e:	2b0a      	cmp	r3, #10
 8033370:	d107      	bne.n	8033382 <etharp_find_entry+0x1be>
      /* or no empty entry found and not allowed to recycle? */
      ((empty == ARP_TABLE_SIZE) && ((flags & ETHARP_FLAG_TRY_HARD) == 0))) {
 8033372:	7afb      	ldrb	r3, [r7, #11]
 8033374:	f003 0301 	and.w	r3, r3, #1
 8033378:	2b00      	cmp	r3, #0
 803337a:	d102      	bne.n	8033382 <etharp_find_entry+0x1be>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty entry found and not allowed to recycle\n"));
    return (s16_t)ERR_MEM;
 803337c:	f04f 33ff 	mov.w	r3, #4294967295
 8033380:	e085      	b.n	803348e <etharp_find_entry+0x2ca>
   *
   * { ETHARP_FLAG_TRY_HARD is set at this point }
   */

  /* 1) empty entry available? */
  if (empty < ARP_TABLE_SIZE) {
 8033382:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 8033386:	2b09      	cmp	r3, #9
 8033388:	dc02      	bgt.n	8033390 <etharp_find_entry+0x1cc>
    i = empty;
 803338a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 803338c:	843b      	strh	r3, [r7, #32]
 803338e:	e039      	b.n	8033404 <etharp_find_entry+0x240>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting empty entry %d\n", (int)i));
  } else {
    /* 2) found recyclable stable entry? */
    if (old_stable < ARP_TABLE_SIZE) {
 8033390:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 8033394:	2b09      	cmp	r3, #9
 8033396:	dc14      	bgt.n	80333c2 <etharp_find_entry+0x1fe>
      /* recycle oldest stable*/
      i = old_stable;
 8033398:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 803339a:	843b      	strh	r3, [r7, #32]
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest stable entry %d\n", (int)i));
      /* no queued packets should exist on stable entries */
      LWIP_ASSERT("arp_table[i].q == NULL", arp_table[i].q == NULL);
 803339c:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80333a0:	493d      	ldr	r1, [pc, #244]	; (8033498 <etharp_find_entry+0x2d4>)
 80333a2:	4613      	mov	r3, r2
 80333a4:	005b      	lsls	r3, r3, #1
 80333a6:	4413      	add	r3, r2
 80333a8:	00db      	lsls	r3, r3, #3
 80333aa:	440b      	add	r3, r1
 80333ac:	681b      	ldr	r3, [r3, #0]
 80333ae:	2b00      	cmp	r3, #0
 80333b0:	d018      	beq.n	80333e4 <etharp_find_entry+0x220>
 80333b2:	4b3a      	ldr	r3, [pc, #232]	; (803349c <etharp_find_entry+0x2d8>)
 80333b4:	f240 126d 	movw	r2, #365	; 0x16d
 80333b8:	493b      	ldr	r1, [pc, #236]	; (80334a8 <etharp_find_entry+0x2e4>)
 80333ba:	483a      	ldr	r0, [pc, #232]	; (80334a4 <etharp_find_entry+0x2e0>)
 80333bc:	f002 feec 	bl	8036198 <iprintf>
 80333c0:	e010      	b.n	80333e4 <etharp_find_entry+0x220>
      /* 3) found recyclable pending entry without queued packets? */
    } else if (old_pending < ARP_TABLE_SIZE) {
 80333c2:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 80333c6:	2b09      	cmp	r3, #9
 80333c8:	dc02      	bgt.n	80333d0 <etharp_find_entry+0x20c>
      /* recycle oldest pending */
      i = old_pending;
 80333ca:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80333cc:	843b      	strh	r3, [r7, #32]
 80333ce:	e009      	b.n	80333e4 <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d (without queue)\n", (int)i));
      /* 4) found recyclable pending entry with queued packets? */
    } else if (old_queue < ARP_TABLE_SIZE) {
 80333d0:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 80333d4:	2b09      	cmp	r3, #9
 80333d6:	dc02      	bgt.n	80333de <etharp_find_entry+0x21a>
      /* recycle oldest pending (queued packets are free in etharp_free_entry) */
      i = old_queue;
 80333d8:	8bfb      	ldrh	r3, [r7, #30]
 80333da:	843b      	strh	r3, [r7, #32]
 80333dc:	e002      	b.n	80333e4 <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d, freeing packet queue %p\n", (int)i, (void *)(arp_table[i].q)));
      /* no empty or recyclable entries found */
    } else {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty or recyclable entries found\n"));
      return (s16_t)ERR_MEM;
 80333de:	f04f 33ff 	mov.w	r3, #4294967295
 80333e2:	e054      	b.n	803348e <etharp_find_entry+0x2ca>
    }

    /* { empty or recyclable entry found } */
    LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 80333e4:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 80333e8:	2b09      	cmp	r3, #9
 80333ea:	dd06      	ble.n	80333fa <etharp_find_entry+0x236>
 80333ec:	4b2b      	ldr	r3, [pc, #172]	; (803349c <etharp_find_entry+0x2d8>)
 80333ee:	f240 127f 	movw	r2, #383	; 0x17f
 80333f2:	492e      	ldr	r1, [pc, #184]	; (80334ac <etharp_find_entry+0x2e8>)
 80333f4:	482b      	ldr	r0, [pc, #172]	; (80334a4 <etharp_find_entry+0x2e0>)
 80333f6:	f002 fecf 	bl	8036198 <iprintf>
    etharp_free_entry(i);
 80333fa:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 80333fe:	4618      	mov	r0, r3
 8033400:	f7ff fe06 	bl	8033010 <etharp_free_entry>
  }

  LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 8033404:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8033408:	2b09      	cmp	r3, #9
 803340a:	dd06      	ble.n	803341a <etharp_find_entry+0x256>
 803340c:	4b23      	ldr	r3, [pc, #140]	; (803349c <etharp_find_entry+0x2d8>)
 803340e:	f240 1283 	movw	r2, #387	; 0x183
 8033412:	4926      	ldr	r1, [pc, #152]	; (80334ac <etharp_find_entry+0x2e8>)
 8033414:	4823      	ldr	r0, [pc, #140]	; (80334a4 <etharp_find_entry+0x2e0>)
 8033416:	f002 febf 	bl	8036198 <iprintf>
  LWIP_ASSERT("arp_table[i].state == ETHARP_STATE_EMPTY",
 803341a:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 803341e:	491e      	ldr	r1, [pc, #120]	; (8033498 <etharp_find_entry+0x2d4>)
 8033420:	4613      	mov	r3, r2
 8033422:	005b      	lsls	r3, r3, #1
 8033424:	4413      	add	r3, r2
 8033426:	00db      	lsls	r3, r3, #3
 8033428:	440b      	add	r3, r1
 803342a:	3314      	adds	r3, #20
 803342c:	781b      	ldrb	r3, [r3, #0]
 803342e:	2b00      	cmp	r3, #0
 8033430:	d006      	beq.n	8033440 <etharp_find_entry+0x27c>
 8033432:	4b1a      	ldr	r3, [pc, #104]	; (803349c <etharp_find_entry+0x2d8>)
 8033434:	f44f 72c2 	mov.w	r2, #388	; 0x184
 8033438:	491d      	ldr	r1, [pc, #116]	; (80334b0 <etharp_find_entry+0x2ec>)
 803343a:	481a      	ldr	r0, [pc, #104]	; (80334a4 <etharp_find_entry+0x2e0>)
 803343c:	f002 feac 	bl	8036198 <iprintf>
              arp_table[i].state == ETHARP_STATE_EMPTY);

  /* IP address given? */
  if (ipaddr != NULL) {
 8033440:	68fb      	ldr	r3, [r7, #12]
 8033442:	2b00      	cmp	r3, #0
 8033444:	d00b      	beq.n	803345e <etharp_find_entry+0x29a>
    /* set IP address */
    ip4_addr_copy(arp_table[i].ipaddr, *ipaddr);
 8033446:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 803344a:	68fb      	ldr	r3, [r7, #12]
 803344c:	6819      	ldr	r1, [r3, #0]
 803344e:	4812      	ldr	r0, [pc, #72]	; (8033498 <etharp_find_entry+0x2d4>)
 8033450:	4613      	mov	r3, r2
 8033452:	005b      	lsls	r3, r3, #1
 8033454:	4413      	add	r3, r2
 8033456:	00db      	lsls	r3, r3, #3
 8033458:	4403      	add	r3, r0
 803345a:	3304      	adds	r3, #4
 803345c:	6019      	str	r1, [r3, #0]
  }
  arp_table[i].ctime = 0;
 803345e:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8033462:	490d      	ldr	r1, [pc, #52]	; (8033498 <etharp_find_entry+0x2d4>)
 8033464:	4613      	mov	r3, r2
 8033466:	005b      	lsls	r3, r3, #1
 8033468:	4413      	add	r3, r2
 803346a:	00db      	lsls	r3, r3, #3
 803346c:	440b      	add	r3, r1
 803346e:	3312      	adds	r3, #18
 8033470:	2200      	movs	r2, #0
 8033472:	801a      	strh	r2, [r3, #0]
#if ETHARP_TABLE_MATCH_NETIF
  arp_table[i].netif = netif;
 8033474:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8033478:	4907      	ldr	r1, [pc, #28]	; (8033498 <etharp_find_entry+0x2d4>)
 803347a:	4613      	mov	r3, r2
 803347c:	005b      	lsls	r3, r3, #1
 803347e:	4413      	add	r3, r2
 8033480:	00db      	lsls	r3, r3, #3
 8033482:	440b      	add	r3, r1
 8033484:	3308      	adds	r3, #8
 8033486:	687a      	ldr	r2, [r7, #4]
 8033488:	601a      	str	r2, [r3, #0]
#endif /* ETHARP_TABLE_MATCH_NETIF */
  return (s16_t)i;
 803348a:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
}
 803348e:	4618      	mov	r0, r3
 8033490:	3728      	adds	r7, #40	; 0x28
 8033492:	46bd      	mov	sp, r7
 8033494:	bd80      	pop	{r7, pc}
 8033496:	bf00      	nop
 8033498:	2000ee6c 	.word	0x2000ee6c
 803349c:	0803a390 	.word	0x0803a390
 80334a0:	0803a3c8 	.word	0x0803a3c8
 80334a4:	0803a408 	.word	0x0803a408
 80334a8:	0803a430 	.word	0x0803a430
 80334ac:	0803a448 	.word	0x0803a448
 80334b0:	0803a45c 	.word	0x0803a45c

080334b4 <etharp_update_arp_entry>:
 *
 * @see pbuf_free()
 */
static err_t
etharp_update_arp_entry(struct netif *netif, const ip4_addr_t *ipaddr, struct eth_addr *ethaddr, u8_t flags)
{
 80334b4:	b580      	push	{r7, lr}
 80334b6:	b088      	sub	sp, #32
 80334b8:	af02      	add	r7, sp, #8
 80334ba:	60f8      	str	r0, [r7, #12]
 80334bc:	60b9      	str	r1, [r7, #8]
 80334be:	607a      	str	r2, [r7, #4]
 80334c0:	70fb      	strb	r3, [r7, #3]
  s16_t i;
  LWIP_ASSERT("netif->hwaddr_len == ETH_HWADDR_LEN", netif->hwaddr_len == ETH_HWADDR_LEN);
 80334c2:	68fb      	ldr	r3, [r7, #12]
 80334c4:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80334c8:	2b06      	cmp	r3, #6
 80334ca:	d006      	beq.n	80334da <etharp_update_arp_entry+0x26>
 80334cc:	4b48      	ldr	r3, [pc, #288]	; (80335f0 <etharp_update_arp_entry+0x13c>)
 80334ce:	f240 12a9 	movw	r2, #425	; 0x1a9
 80334d2:	4948      	ldr	r1, [pc, #288]	; (80335f4 <etharp_update_arp_entry+0x140>)
 80334d4:	4848      	ldr	r0, [pc, #288]	; (80335f8 <etharp_update_arp_entry+0x144>)
 80334d6:	f002 fe5f 	bl	8036198 <iprintf>
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: %"U16_F".%"U16_F".%"U16_F".%"U16_F" - %02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F"\n",
              ip4_addr1_16(ipaddr), ip4_addr2_16(ipaddr), ip4_addr3_16(ipaddr), ip4_addr4_16(ipaddr),
              (u16_t)ethaddr->addr[0], (u16_t)ethaddr->addr[1], (u16_t)ethaddr->addr[2],
              (u16_t)ethaddr->addr[3], (u16_t)ethaddr->addr[4], (u16_t)ethaddr->addr[5]));
  /* non-unicast address? */
  if (ip4_addr_isany(ipaddr) ||
 80334da:	68bb      	ldr	r3, [r7, #8]
 80334dc:	2b00      	cmp	r3, #0
 80334de:	d012      	beq.n	8033506 <etharp_update_arp_entry+0x52>
 80334e0:	68bb      	ldr	r3, [r7, #8]
 80334e2:	681b      	ldr	r3, [r3, #0]
 80334e4:	2b00      	cmp	r3, #0
 80334e6:	d00e      	beq.n	8033506 <etharp_update_arp_entry+0x52>
      ip4_addr_isbroadcast(ipaddr, netif) ||
 80334e8:	68bb      	ldr	r3, [r7, #8]
 80334ea:	681b      	ldr	r3, [r3, #0]
 80334ec:	68f9      	ldr	r1, [r7, #12]
 80334ee:	4618      	mov	r0, r3
 80334f0:	f001 f9ee 	bl	80348d0 <ip4_addr_isbroadcast_u32>
 80334f4:	4603      	mov	r3, r0
  if (ip4_addr_isany(ipaddr) ||
 80334f6:	2b00      	cmp	r3, #0
 80334f8:	d105      	bne.n	8033506 <etharp_update_arp_entry+0x52>
      ip4_addr_ismulticast(ipaddr)) {
 80334fa:	68bb      	ldr	r3, [r7, #8]
 80334fc:	681b      	ldr	r3, [r3, #0]
 80334fe:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
      ip4_addr_isbroadcast(ipaddr, netif) ||
 8033502:	2be0      	cmp	r3, #224	; 0xe0
 8033504:	d102      	bne.n	803350c <etharp_update_arp_entry+0x58>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 8033506:	f06f 030f 	mvn.w	r3, #15
 803350a:	e06c      	b.n	80335e6 <etharp_update_arp_entry+0x132>
  }
  /* find or create ARP entry */
  i = etharp_find_entry(ipaddr, flags, netif);
 803350c:	78fb      	ldrb	r3, [r7, #3]
 803350e:	68fa      	ldr	r2, [r7, #12]
 8033510:	4619      	mov	r1, r3
 8033512:	68b8      	ldr	r0, [r7, #8]
 8033514:	f7ff fe56 	bl	80331c4 <etharp_find_entry>
 8033518:	4603      	mov	r3, r0
 803351a:	82fb      	strh	r3, [r7, #22]
  /* bail out if no entry could be found */
  if (i < 0) {
 803351c:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8033520:	2b00      	cmp	r3, #0
 8033522:	da02      	bge.n	803352a <etharp_update_arp_entry+0x76>
    return (err_t)i;
 8033524:	8afb      	ldrh	r3, [r7, #22]
 8033526:	b25b      	sxtb	r3, r3
 8033528:	e05d      	b.n	80335e6 <etharp_update_arp_entry+0x132>
    return ERR_VAL;
  } else
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
  {
    /* mark it stable */
    arp_table[i].state = ETHARP_STATE_STABLE;
 803352a:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 803352e:	4933      	ldr	r1, [pc, #204]	; (80335fc <etharp_update_arp_entry+0x148>)
 8033530:	4613      	mov	r3, r2
 8033532:	005b      	lsls	r3, r3, #1
 8033534:	4413      	add	r3, r2
 8033536:	00db      	lsls	r3, r3, #3
 8033538:	440b      	add	r3, r1
 803353a:	3314      	adds	r3, #20
 803353c:	2202      	movs	r2, #2
 803353e:	701a      	strb	r2, [r3, #0]
  }

  /* record network interface */
  arp_table[i].netif = netif;
 8033540:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8033544:	492d      	ldr	r1, [pc, #180]	; (80335fc <etharp_update_arp_entry+0x148>)
 8033546:	4613      	mov	r3, r2
 8033548:	005b      	lsls	r3, r3, #1
 803354a:	4413      	add	r3, r2
 803354c:	00db      	lsls	r3, r3, #3
 803354e:	440b      	add	r3, r1
 8033550:	3308      	adds	r3, #8
 8033552:	68fa      	ldr	r2, [r7, #12]
 8033554:	601a      	str	r2, [r3, #0]
  /* insert in SNMP ARP index tree */
  mib2_add_arp_entry(netif, &arp_table[i].ipaddr);

  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: updating stable entry %"S16_F"\n", i));
  /* update address */
  SMEMCPY(&arp_table[i].ethaddr, ethaddr, ETH_HWADDR_LEN);
 8033556:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 803355a:	4613      	mov	r3, r2
 803355c:	005b      	lsls	r3, r3, #1
 803355e:	4413      	add	r3, r2
 8033560:	00db      	lsls	r3, r3, #3
 8033562:	3308      	adds	r3, #8
 8033564:	4a25      	ldr	r2, [pc, #148]	; (80335fc <etharp_update_arp_entry+0x148>)
 8033566:	4413      	add	r3, r2
 8033568:	3304      	adds	r3, #4
 803356a:	2206      	movs	r2, #6
 803356c:	6879      	ldr	r1, [r7, #4]
 803356e:	4618      	mov	r0, r3
 8033570:	f002 fd02 	bl	8035f78 <memcpy>
  /* reset time stamp */
  arp_table[i].ctime = 0;
 8033574:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8033578:	4920      	ldr	r1, [pc, #128]	; (80335fc <etharp_update_arp_entry+0x148>)
 803357a:	4613      	mov	r3, r2
 803357c:	005b      	lsls	r3, r3, #1
 803357e:	4413      	add	r3, r2
 8033580:	00db      	lsls	r3, r3, #3
 8033582:	440b      	add	r3, r1
 8033584:	3312      	adds	r3, #18
 8033586:	2200      	movs	r2, #0
 8033588:	801a      	strh	r2, [r3, #0]
    /* get the packet pointer */
    p = q->p;
    /* now queue entry can be freed */
    memp_free(MEMP_ARP_QUEUE, q);
#else /* ARP_QUEUEING */
  if (arp_table[i].q != NULL) {
 803358a:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 803358e:	491b      	ldr	r1, [pc, #108]	; (80335fc <etharp_update_arp_entry+0x148>)
 8033590:	4613      	mov	r3, r2
 8033592:	005b      	lsls	r3, r3, #1
 8033594:	4413      	add	r3, r2
 8033596:	00db      	lsls	r3, r3, #3
 8033598:	440b      	add	r3, r1
 803359a:	681b      	ldr	r3, [r3, #0]
 803359c:	2b00      	cmp	r3, #0
 803359e:	d021      	beq.n	80335e4 <etharp_update_arp_entry+0x130>
    struct pbuf *p = arp_table[i].q;
 80335a0:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80335a4:	4915      	ldr	r1, [pc, #84]	; (80335fc <etharp_update_arp_entry+0x148>)
 80335a6:	4613      	mov	r3, r2
 80335a8:	005b      	lsls	r3, r3, #1
 80335aa:	4413      	add	r3, r2
 80335ac:	00db      	lsls	r3, r3, #3
 80335ae:	440b      	add	r3, r1
 80335b0:	681b      	ldr	r3, [r3, #0]
 80335b2:	613b      	str	r3, [r7, #16]
    arp_table[i].q = NULL;
 80335b4:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80335b8:	4910      	ldr	r1, [pc, #64]	; (80335fc <etharp_update_arp_entry+0x148>)
 80335ba:	4613      	mov	r3, r2
 80335bc:	005b      	lsls	r3, r3, #1
 80335be:	4413      	add	r3, r2
 80335c0:	00db      	lsls	r3, r3, #3
 80335c2:	440b      	add	r3, r1
 80335c4:	2200      	movs	r2, #0
 80335c6:	601a      	str	r2, [r3, #0]
#endif /* ARP_QUEUEING */
    /* send the queued IP packet */
    ethernet_output(netif, p, (struct eth_addr *)(netif->hwaddr), ethaddr, ETHTYPE_IP);
 80335c8:	68fb      	ldr	r3, [r7, #12]
 80335ca:	f103 0226 	add.w	r2, r3, #38	; 0x26
 80335ce:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80335d2:	9300      	str	r3, [sp, #0]
 80335d4:	687b      	ldr	r3, [r7, #4]
 80335d6:	6939      	ldr	r1, [r7, #16]
 80335d8:	68f8      	ldr	r0, [r7, #12]
 80335da:	f002 f8d9 	bl	8035790 <ethernet_output>
    /* free the queued IP packet */
    pbuf_free(p);
 80335de:	6938      	ldr	r0, [r7, #16]
 80335e0:	f7f8 fc5c 	bl	802be9c <pbuf_free>
  }
  return ERR_OK;
 80335e4:	2300      	movs	r3, #0
}
 80335e6:	4618      	mov	r0, r3
 80335e8:	3718      	adds	r7, #24
 80335ea:	46bd      	mov	sp, r7
 80335ec:	bd80      	pop	{r7, pc}
 80335ee:	bf00      	nop
 80335f0:	0803a390 	.word	0x0803a390
 80335f4:	0803a488 	.word	0x0803a488
 80335f8:	0803a408 	.word	0x0803a408
 80335fc:	2000ee6c 	.word	0x2000ee6c

08033600 <etharp_cleanup_netif>:
 *
 * @param netif points to a network interface
 */
void
etharp_cleanup_netif(struct netif *netif)
{
 8033600:	b580      	push	{r7, lr}
 8033602:	b084      	sub	sp, #16
 8033604:	af00      	add	r7, sp, #0
 8033606:	6078      	str	r0, [r7, #4]
  int i;

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8033608:	2300      	movs	r3, #0
 803360a:	60fb      	str	r3, [r7, #12]
 803360c:	e01e      	b.n	803364c <etharp_cleanup_netif+0x4c>
    u8_t state = arp_table[i].state;
 803360e:	4913      	ldr	r1, [pc, #76]	; (803365c <etharp_cleanup_netif+0x5c>)
 8033610:	68fa      	ldr	r2, [r7, #12]
 8033612:	4613      	mov	r3, r2
 8033614:	005b      	lsls	r3, r3, #1
 8033616:	4413      	add	r3, r2
 8033618:	00db      	lsls	r3, r3, #3
 803361a:	440b      	add	r3, r1
 803361c:	3314      	adds	r3, #20
 803361e:	781b      	ldrb	r3, [r3, #0]
 8033620:	72fb      	strb	r3, [r7, #11]
    if ((state != ETHARP_STATE_EMPTY) && (arp_table[i].netif == netif)) {
 8033622:	7afb      	ldrb	r3, [r7, #11]
 8033624:	2b00      	cmp	r3, #0
 8033626:	d00e      	beq.n	8033646 <etharp_cleanup_netif+0x46>
 8033628:	490c      	ldr	r1, [pc, #48]	; (803365c <etharp_cleanup_netif+0x5c>)
 803362a:	68fa      	ldr	r2, [r7, #12]
 803362c:	4613      	mov	r3, r2
 803362e:	005b      	lsls	r3, r3, #1
 8033630:	4413      	add	r3, r2
 8033632:	00db      	lsls	r3, r3, #3
 8033634:	440b      	add	r3, r1
 8033636:	3308      	adds	r3, #8
 8033638:	681b      	ldr	r3, [r3, #0]
 803363a:	687a      	ldr	r2, [r7, #4]
 803363c:	429a      	cmp	r2, r3
 803363e:	d102      	bne.n	8033646 <etharp_cleanup_netif+0x46>
      etharp_free_entry(i);
 8033640:	68f8      	ldr	r0, [r7, #12]
 8033642:	f7ff fce5 	bl	8033010 <etharp_free_entry>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8033646:	68fb      	ldr	r3, [r7, #12]
 8033648:	3301      	adds	r3, #1
 803364a:	60fb      	str	r3, [r7, #12]
 803364c:	68fb      	ldr	r3, [r7, #12]
 803364e:	2b09      	cmp	r3, #9
 8033650:	dddd      	ble.n	803360e <etharp_cleanup_netif+0xe>
    }
  }
}
 8033652:	bf00      	nop
 8033654:	bf00      	nop
 8033656:	3710      	adds	r7, #16
 8033658:	46bd      	mov	sp, r7
 803365a:	bd80      	pop	{r7, pc}
 803365c:	2000ee6c 	.word	0x2000ee6c

08033660 <etharp_input>:
 *
 * @see pbuf_free()
 */
void
etharp_input(struct pbuf *p, struct netif *netif)
{
 8033660:	b5b0      	push	{r4, r5, r7, lr}
 8033662:	b08a      	sub	sp, #40	; 0x28
 8033664:	af04      	add	r7, sp, #16
 8033666:	6078      	str	r0, [r7, #4]
 8033668:	6039      	str	r1, [r7, #0]
  ip4_addr_t sipaddr, dipaddr;
  u8_t for_us;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 803366a:	683b      	ldr	r3, [r7, #0]
 803366c:	2b00      	cmp	r3, #0
 803366e:	d107      	bne.n	8033680 <etharp_input+0x20>
 8033670:	4b49      	ldr	r3, [pc, #292]	; (8033798 <etharp_input+0x138>)
 8033672:	f240 228a 	movw	r2, #650	; 0x28a
 8033676:	4949      	ldr	r1, [pc, #292]	; (803379c <etharp_input+0x13c>)
 8033678:	4849      	ldr	r0, [pc, #292]	; (80337a0 <etharp_input+0x140>)
 803367a:	f002 fd8d 	bl	8036198 <iprintf>
 803367e:	e088      	b.n	8033792 <etharp_input+0x132>

  hdr = (struct etharp_hdr *)p->payload;
 8033680:	687b      	ldr	r3, [r7, #4]
 8033682:	685b      	ldr	r3, [r3, #4]
 8033684:	613b      	str	r3, [r7, #16]

  /* RFC 826 "Packet Reception": */
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 8033686:	693b      	ldr	r3, [r7, #16]
 8033688:	881b      	ldrh	r3, [r3, #0]
 803368a:	b29b      	uxth	r3, r3
 803368c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8033690:	d10c      	bne.n	80336ac <etharp_input+0x4c>
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 8033692:	693b      	ldr	r3, [r7, #16]
 8033694:	791b      	ldrb	r3, [r3, #4]
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 8033696:	2b06      	cmp	r3, #6
 8033698:	d108      	bne.n	80336ac <etharp_input+0x4c>
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 803369a:	693b      	ldr	r3, [r7, #16]
 803369c:	795b      	ldrb	r3, [r3, #5]
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 803369e:	2b04      	cmp	r3, #4
 80336a0:	d104      	bne.n	80336ac <etharp_input+0x4c>
      (hdr->proto != PP_HTONS(ETHTYPE_IP)))  {
 80336a2:	693b      	ldr	r3, [r7, #16]
 80336a4:	885b      	ldrh	r3, [r3, #2]
 80336a6:	b29b      	uxth	r3, r3
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 80336a8:	2b08      	cmp	r3, #8
 80336aa:	d00f      	beq.n	80336cc <etharp_input+0x6c>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
                ("etharp_input: packet dropped, wrong hw type, hwlen, proto, protolen or ethernet type (%"U16_F"/%"U16_F"/%"U16_F"/%"U16_F")\n",
                 hdr->hwtype, (u16_t)hdr->hwlen, hdr->proto, (u16_t)hdr->protolen));
    ETHARP_STATS_INC(etharp.proterr);
 80336ac:	4b3d      	ldr	r3, [pc, #244]	; (80337a4 <etharp_input+0x144>)
 80336ae:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80336b0:	3301      	adds	r3, #1
 80336b2:	b29a      	uxth	r2, r3
 80336b4:	4b3b      	ldr	r3, [pc, #236]	; (80337a4 <etharp_input+0x144>)
 80336b6:	851a      	strh	r2, [r3, #40]	; 0x28
    ETHARP_STATS_INC(etharp.drop);
 80336b8:	4b3a      	ldr	r3, [pc, #232]	; (80337a4 <etharp_input+0x144>)
 80336ba:	8bdb      	ldrh	r3, [r3, #30]
 80336bc:	3301      	adds	r3, #1
 80336be:	b29a      	uxth	r2, r3
 80336c0:	4b38      	ldr	r3, [pc, #224]	; (80337a4 <etharp_input+0x144>)
 80336c2:	83da      	strh	r2, [r3, #30]
    pbuf_free(p);
 80336c4:	6878      	ldr	r0, [r7, #4]
 80336c6:	f7f8 fbe9 	bl	802be9c <pbuf_free>
    return;
 80336ca:	e062      	b.n	8033792 <etharp_input+0x132>
  }
  ETHARP_STATS_INC(etharp.recv);
 80336cc:	4b35      	ldr	r3, [pc, #212]	; (80337a4 <etharp_input+0x144>)
 80336ce:	8b5b      	ldrh	r3, [r3, #26]
 80336d0:	3301      	adds	r3, #1
 80336d2:	b29a      	uxth	r2, r3
 80336d4:	4b33      	ldr	r3, [pc, #204]	; (80337a4 <etharp_input+0x144>)
 80336d6:	835a      	strh	r2, [r3, #26]
  autoip_arp_reply(netif, hdr);
#endif /* LWIP_AUTOIP */

  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing (not using structure copy which breaks strict-aliasing rules). */
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&sipaddr, &hdr->sipaddr);
 80336d8:	693b      	ldr	r3, [r7, #16]
 80336da:	330e      	adds	r3, #14
 80336dc:	681b      	ldr	r3, [r3, #0]
 80336de:	60fb      	str	r3, [r7, #12]
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&dipaddr, &hdr->dipaddr);
 80336e0:	693b      	ldr	r3, [r7, #16]
 80336e2:	3318      	adds	r3, #24
 80336e4:	681b      	ldr	r3, [r3, #0]
 80336e6:	60bb      	str	r3, [r7, #8]

  /* this interface is not configured? */
  if (ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 80336e8:	683b      	ldr	r3, [r7, #0]
 80336ea:	3304      	adds	r3, #4
 80336ec:	681b      	ldr	r3, [r3, #0]
 80336ee:	2b00      	cmp	r3, #0
 80336f0:	d102      	bne.n	80336f8 <etharp_input+0x98>
    for_us = 0;
 80336f2:	2300      	movs	r3, #0
 80336f4:	75fb      	strb	r3, [r7, #23]
 80336f6:	e009      	b.n	803370c <etharp_input+0xac>
  } else {
    /* ARP packet directed to us? */
    for_us = (u8_t)ip4_addr_cmp(&dipaddr, netif_ip4_addr(netif));
 80336f8:	68ba      	ldr	r2, [r7, #8]
 80336fa:	683b      	ldr	r3, [r7, #0]
 80336fc:	3304      	adds	r3, #4
 80336fe:	681b      	ldr	r3, [r3, #0]
 8033700:	429a      	cmp	r2, r3
 8033702:	bf0c      	ite	eq
 8033704:	2301      	moveq	r3, #1
 8033706:	2300      	movne	r3, #0
 8033708:	b2db      	uxtb	r3, r3
 803370a:	75fb      	strb	r3, [r7, #23]
  /* ARP message directed to us?
      -> add IP address in ARP cache; assume requester wants to talk to us,
         can result in directly sending the queued packets for this host.
     ARP message not directed to us?
      ->  update the source IP address in the cache, if present */
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 803370c:	693b      	ldr	r3, [r7, #16]
 803370e:	f103 0208 	add.w	r2, r3, #8
 8033712:	7dfb      	ldrb	r3, [r7, #23]
 8033714:	2b00      	cmp	r3, #0
 8033716:	d001      	beq.n	803371c <etharp_input+0xbc>
 8033718:	2301      	movs	r3, #1
 803371a:	e000      	b.n	803371e <etharp_input+0xbe>
 803371c:	2302      	movs	r3, #2
 803371e:	f107 010c 	add.w	r1, r7, #12
 8033722:	6838      	ldr	r0, [r7, #0]
 8033724:	f7ff fec6 	bl	80334b4 <etharp_update_arp_entry>
                          for_us ? ETHARP_FLAG_TRY_HARD : ETHARP_FLAG_FIND_ONLY);

  /* now act on the message itself */
  switch (hdr->opcode) {
 8033728:	693b      	ldr	r3, [r7, #16]
 803372a:	88db      	ldrh	r3, [r3, #6]
 803372c:	b29b      	uxth	r3, r3
 803372e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8033732:	d003      	beq.n	803373c <etharp_input+0xdc>
 8033734:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8033738:	d025      	beq.n	8033786 <etharp_input+0x126>
 803373a:	e01d      	b.n	8033778 <etharp_input+0x118>
       * reply. In any case, we time-stamp any existing ARP entry,
       * and possibly send out an IP packet that was queued on it. */

      LWIP_DEBUGF (ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_input: incoming ARP request\n"));
      /* ARP request for our address? */
      if (for_us) {
 803373c:	7dfb      	ldrb	r3, [r7, #23]
 803373e:	2b00      	cmp	r3, #0
 8033740:	d023      	beq.n	803378a <etharp_input+0x12a>
        /* send ARP response */
        etharp_raw(netif,
                   (struct eth_addr *)netif->hwaddr, &hdr->shwaddr,
 8033742:	683b      	ldr	r3, [r7, #0]
 8033744:	f103 0026 	add.w	r0, r3, #38	; 0x26
 8033748:	693b      	ldr	r3, [r7, #16]
 803374a:	f103 0408 	add.w	r4, r3, #8
                   (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif),
 803374e:	683b      	ldr	r3, [r7, #0]
 8033750:	f103 0526 	add.w	r5, r3, #38	; 0x26
 8033754:	683b      	ldr	r3, [r7, #0]
 8033756:	3304      	adds	r3, #4
                   &hdr->shwaddr, &sipaddr,
 8033758:	693a      	ldr	r2, [r7, #16]
 803375a:	3208      	adds	r2, #8
        etharp_raw(netif,
 803375c:	2102      	movs	r1, #2
 803375e:	9103      	str	r1, [sp, #12]
 8033760:	f107 010c 	add.w	r1, r7, #12
 8033764:	9102      	str	r1, [sp, #8]
 8033766:	9201      	str	r2, [sp, #4]
 8033768:	9300      	str	r3, [sp, #0]
 803376a:	462b      	mov	r3, r5
 803376c:	4622      	mov	r2, r4
 803376e:	4601      	mov	r1, r0
 8033770:	6838      	ldr	r0, [r7, #0]
 8033772:	f000 fb0b 	bl	8033d8c <etharp_raw>
        /* request was not directed to us */
      } else {
        /* { for_us == 0 and netif->ip_addr.addr != 0 } */
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_input: ARP request was not for us.\n"));
      }
      break;
 8033776:	e008      	b.n	803378a <etharp_input+0x12a>
      dhcp_arp_reply(netif, &sipaddr);
#endif /* (LWIP_DHCP && DHCP_DOES_ARP_CHECK) */
      break;
    default:
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_input: ARP unknown opcode type %"S16_F"\n", lwip_htons(hdr->opcode)));
      ETHARP_STATS_INC(etharp.err);
 8033778:	4b0a      	ldr	r3, [pc, #40]	; (80337a4 <etharp_input+0x144>)
 803377a:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 803377c:	3301      	adds	r3, #1
 803377e:	b29a      	uxth	r2, r3
 8033780:	4b08      	ldr	r3, [pc, #32]	; (80337a4 <etharp_input+0x144>)
 8033782:	859a      	strh	r2, [r3, #44]	; 0x2c
      break;
 8033784:	e002      	b.n	803378c <etharp_input+0x12c>
      break;
 8033786:	bf00      	nop
 8033788:	e000      	b.n	803378c <etharp_input+0x12c>
      break;
 803378a:	bf00      	nop
  }
  /* free ARP packet */
  pbuf_free(p);
 803378c:	6878      	ldr	r0, [r7, #4]
 803378e:	f7f8 fb85 	bl	802be9c <pbuf_free>
}
 8033792:	3718      	adds	r7, #24
 8033794:	46bd      	mov	sp, r7
 8033796:	bdb0      	pop	{r4, r5, r7, pc}
 8033798:	0803a390 	.word	0x0803a390
 803379c:	0803a4e0 	.word	0x0803a4e0
 80337a0:	0803a408 	.word	0x0803a408
 80337a4:	2000ed10 	.word	0x2000ed10

080337a8 <etharp_output_to_arp_index>:
/** Just a small helper function that sends a pbuf to an ethernet address
 * in the arp_table specified by the index 'arp_idx'.
 */
static err_t
etharp_output_to_arp_index(struct netif *netif, struct pbuf *q, netif_addr_idx_t arp_idx)
{
 80337a8:	b580      	push	{r7, lr}
 80337aa:	b086      	sub	sp, #24
 80337ac:	af02      	add	r7, sp, #8
 80337ae:	60f8      	str	r0, [r7, #12]
 80337b0:	60b9      	str	r1, [r7, #8]
 80337b2:	4613      	mov	r3, r2
 80337b4:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 80337b6:	79fa      	ldrb	r2, [r7, #7]
 80337b8:	4944      	ldr	r1, [pc, #272]	; (80338cc <etharp_output_to_arp_index+0x124>)
 80337ba:	4613      	mov	r3, r2
 80337bc:	005b      	lsls	r3, r3, #1
 80337be:	4413      	add	r3, r2
 80337c0:	00db      	lsls	r3, r3, #3
 80337c2:	440b      	add	r3, r1
 80337c4:	3314      	adds	r3, #20
 80337c6:	781b      	ldrb	r3, [r3, #0]
 80337c8:	2b01      	cmp	r3, #1
 80337ca:	d806      	bhi.n	80337da <etharp_output_to_arp_index+0x32>
 80337cc:	4b40      	ldr	r3, [pc, #256]	; (80338d0 <etharp_output_to_arp_index+0x128>)
 80337ce:	f240 22ee 	movw	r2, #750	; 0x2ee
 80337d2:	4940      	ldr	r1, [pc, #256]	; (80338d4 <etharp_output_to_arp_index+0x12c>)
 80337d4:	4840      	ldr	r0, [pc, #256]	; (80338d8 <etharp_output_to_arp_index+0x130>)
 80337d6:	f002 fcdf 	bl	8036198 <iprintf>
              arp_table[arp_idx].state >= ETHARP_STATE_STABLE);
  /* if arp table entry is about to expire: re-request it,
     but only if its state is ETHARP_STATE_STABLE to prevent flooding the
     network with ARP requests if this address is used frequently. */
  if (arp_table[arp_idx].state == ETHARP_STATE_STABLE) {
 80337da:	79fa      	ldrb	r2, [r7, #7]
 80337dc:	493b      	ldr	r1, [pc, #236]	; (80338cc <etharp_output_to_arp_index+0x124>)
 80337de:	4613      	mov	r3, r2
 80337e0:	005b      	lsls	r3, r3, #1
 80337e2:	4413      	add	r3, r2
 80337e4:	00db      	lsls	r3, r3, #3
 80337e6:	440b      	add	r3, r1
 80337e8:	3314      	adds	r3, #20
 80337ea:	781b      	ldrb	r3, [r3, #0]
 80337ec:	2b02      	cmp	r3, #2
 80337ee:	d153      	bne.n	8033898 <etharp_output_to_arp_index+0xf0>
    if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_BROADCAST) {
 80337f0:	79fa      	ldrb	r2, [r7, #7]
 80337f2:	4936      	ldr	r1, [pc, #216]	; (80338cc <etharp_output_to_arp_index+0x124>)
 80337f4:	4613      	mov	r3, r2
 80337f6:	005b      	lsls	r3, r3, #1
 80337f8:	4413      	add	r3, r2
 80337fa:	00db      	lsls	r3, r3, #3
 80337fc:	440b      	add	r3, r1
 80337fe:	3312      	adds	r3, #18
 8033800:	881b      	ldrh	r3, [r3, #0]
 8033802:	f5b3 7f8e 	cmp.w	r3, #284	; 0x11c
 8033806:	d919      	bls.n	803383c <etharp_output_to_arp_index+0x94>
      /* issue a standard request using broadcast */
      if (etharp_request(netif, &arp_table[arp_idx].ipaddr) == ERR_OK) {
 8033808:	79fa      	ldrb	r2, [r7, #7]
 803380a:	4613      	mov	r3, r2
 803380c:	005b      	lsls	r3, r3, #1
 803380e:	4413      	add	r3, r2
 8033810:	00db      	lsls	r3, r3, #3
 8033812:	4a2e      	ldr	r2, [pc, #184]	; (80338cc <etharp_output_to_arp_index+0x124>)
 8033814:	4413      	add	r3, r2
 8033816:	3304      	adds	r3, #4
 8033818:	4619      	mov	r1, r3
 803381a:	68f8      	ldr	r0, [r7, #12]
 803381c:	f000 fb72 	bl	8033f04 <etharp_request>
 8033820:	4603      	mov	r3, r0
 8033822:	2b00      	cmp	r3, #0
 8033824:	d138      	bne.n	8033898 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 8033826:	79fa      	ldrb	r2, [r7, #7]
 8033828:	4928      	ldr	r1, [pc, #160]	; (80338cc <etharp_output_to_arp_index+0x124>)
 803382a:	4613      	mov	r3, r2
 803382c:	005b      	lsls	r3, r3, #1
 803382e:	4413      	add	r3, r2
 8033830:	00db      	lsls	r3, r3, #3
 8033832:	440b      	add	r3, r1
 8033834:	3314      	adds	r3, #20
 8033836:	2203      	movs	r2, #3
 8033838:	701a      	strb	r2, [r3, #0]
 803383a:	e02d      	b.n	8033898 <etharp_output_to_arp_index+0xf0>
      }
    } else if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_UNICAST) {
 803383c:	79fa      	ldrb	r2, [r7, #7]
 803383e:	4923      	ldr	r1, [pc, #140]	; (80338cc <etharp_output_to_arp_index+0x124>)
 8033840:	4613      	mov	r3, r2
 8033842:	005b      	lsls	r3, r3, #1
 8033844:	4413      	add	r3, r2
 8033846:	00db      	lsls	r3, r3, #3
 8033848:	440b      	add	r3, r1
 803384a:	3312      	adds	r3, #18
 803384c:	881b      	ldrh	r3, [r3, #0]
 803384e:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
 8033852:	d321      	bcc.n	8033898 <etharp_output_to_arp_index+0xf0>
      /* issue a unicast request (for 15 seconds) to prevent unnecessary broadcast */
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 8033854:	79fa      	ldrb	r2, [r7, #7]
 8033856:	4613      	mov	r3, r2
 8033858:	005b      	lsls	r3, r3, #1
 803385a:	4413      	add	r3, r2
 803385c:	00db      	lsls	r3, r3, #3
 803385e:	4a1b      	ldr	r2, [pc, #108]	; (80338cc <etharp_output_to_arp_index+0x124>)
 8033860:	4413      	add	r3, r2
 8033862:	1d19      	adds	r1, r3, #4
 8033864:	79fa      	ldrb	r2, [r7, #7]
 8033866:	4613      	mov	r3, r2
 8033868:	005b      	lsls	r3, r3, #1
 803386a:	4413      	add	r3, r2
 803386c:	00db      	lsls	r3, r3, #3
 803386e:	3308      	adds	r3, #8
 8033870:	4a16      	ldr	r2, [pc, #88]	; (80338cc <etharp_output_to_arp_index+0x124>)
 8033872:	4413      	add	r3, r2
 8033874:	3304      	adds	r3, #4
 8033876:	461a      	mov	r2, r3
 8033878:	68f8      	ldr	r0, [r7, #12]
 803387a:	f000 fb21 	bl	8033ec0 <etharp_request_dst>
 803387e:	4603      	mov	r3, r0
 8033880:	2b00      	cmp	r3, #0
 8033882:	d109      	bne.n	8033898 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 8033884:	79fa      	ldrb	r2, [r7, #7]
 8033886:	4911      	ldr	r1, [pc, #68]	; (80338cc <etharp_output_to_arp_index+0x124>)
 8033888:	4613      	mov	r3, r2
 803388a:	005b      	lsls	r3, r3, #1
 803388c:	4413      	add	r3, r2
 803388e:	00db      	lsls	r3, r3, #3
 8033890:	440b      	add	r3, r1
 8033892:	3314      	adds	r3, #20
 8033894:	2203      	movs	r2, #3
 8033896:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), &arp_table[arp_idx].ethaddr, ETHTYPE_IP);
 8033898:	68fb      	ldr	r3, [r7, #12]
 803389a:	f103 0126 	add.w	r1, r3, #38	; 0x26
 803389e:	79fa      	ldrb	r2, [r7, #7]
 80338a0:	4613      	mov	r3, r2
 80338a2:	005b      	lsls	r3, r3, #1
 80338a4:	4413      	add	r3, r2
 80338a6:	00db      	lsls	r3, r3, #3
 80338a8:	3308      	adds	r3, #8
 80338aa:	4a08      	ldr	r2, [pc, #32]	; (80338cc <etharp_output_to_arp_index+0x124>)
 80338ac:	4413      	add	r3, r2
 80338ae:	3304      	adds	r3, #4
 80338b0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80338b4:	9200      	str	r2, [sp, #0]
 80338b6:	460a      	mov	r2, r1
 80338b8:	68b9      	ldr	r1, [r7, #8]
 80338ba:	68f8      	ldr	r0, [r7, #12]
 80338bc:	f001 ff68 	bl	8035790 <ethernet_output>
 80338c0:	4603      	mov	r3, r0
}
 80338c2:	4618      	mov	r0, r3
 80338c4:	3710      	adds	r7, #16
 80338c6:	46bd      	mov	sp, r7
 80338c8:	bd80      	pop	{r7, pc}
 80338ca:	bf00      	nop
 80338cc:	2000ee6c 	.word	0x2000ee6c
 80338d0:	0803a390 	.word	0x0803a390
 80338d4:	0803a500 	.word	0x0803a500
 80338d8:	0803a408 	.word	0x0803a408

080338dc <etharp_output>:
 * - ERR_RTE No route to destination (no gateway to external networks),
 * or the return type of either etharp_query() or ethernet_output().
 */
err_t
etharp_output(struct netif *netif, struct pbuf *q, const ip4_addr_t *ipaddr)
{
 80338dc:	b580      	push	{r7, lr}
 80338de:	b08a      	sub	sp, #40	; 0x28
 80338e0:	af02      	add	r7, sp, #8
 80338e2:	60f8      	str	r0, [r7, #12]
 80338e4:	60b9      	str	r1, [r7, #8]
 80338e6:	607a      	str	r2, [r7, #4]
  const struct eth_addr *dest;
  struct eth_addr mcastaddr;
  const ip4_addr_t *dst_addr = ipaddr;
 80338e8:	687b      	ldr	r3, [r7, #4]
 80338ea:	61bb      	str	r3, [r7, #24]

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("netif != NULL", netif != NULL);
 80338ec:	68fb      	ldr	r3, [r7, #12]
 80338ee:	2b00      	cmp	r3, #0
 80338f0:	d106      	bne.n	8033900 <etharp_output+0x24>
 80338f2:	4b76      	ldr	r3, [pc, #472]	; (8033acc <etharp_output+0x1f0>)
 80338f4:	f240 321e 	movw	r2, #798	; 0x31e
 80338f8:	4975      	ldr	r1, [pc, #468]	; (8033ad0 <etharp_output+0x1f4>)
 80338fa:	4876      	ldr	r0, [pc, #472]	; (8033ad4 <etharp_output+0x1f8>)
 80338fc:	f002 fc4c 	bl	8036198 <iprintf>
  LWIP_ASSERT("q != NULL", q != NULL);
 8033900:	68bb      	ldr	r3, [r7, #8]
 8033902:	2b00      	cmp	r3, #0
 8033904:	d106      	bne.n	8033914 <etharp_output+0x38>
 8033906:	4b71      	ldr	r3, [pc, #452]	; (8033acc <etharp_output+0x1f0>)
 8033908:	f240 321f 	movw	r2, #799	; 0x31f
 803390c:	4972      	ldr	r1, [pc, #456]	; (8033ad8 <etharp_output+0x1fc>)
 803390e:	4871      	ldr	r0, [pc, #452]	; (8033ad4 <etharp_output+0x1f8>)
 8033910:	f002 fc42 	bl	8036198 <iprintf>
  LWIP_ASSERT("ipaddr != NULL", ipaddr != NULL);
 8033914:	687b      	ldr	r3, [r7, #4]
 8033916:	2b00      	cmp	r3, #0
 8033918:	d106      	bne.n	8033928 <etharp_output+0x4c>
 803391a:	4b6c      	ldr	r3, [pc, #432]	; (8033acc <etharp_output+0x1f0>)
 803391c:	f44f 7248 	mov.w	r2, #800	; 0x320
 8033920:	496e      	ldr	r1, [pc, #440]	; (8033adc <etharp_output+0x200>)
 8033922:	486c      	ldr	r0, [pc, #432]	; (8033ad4 <etharp_output+0x1f8>)
 8033924:	f002 fc38 	bl	8036198 <iprintf>

  /* Determine on destination hardware address. Broadcasts and multicasts
   * are special, other IP addresses are looked up in the ARP table. */

  /* broadcast destination IP address? */
  if (ip4_addr_isbroadcast(ipaddr, netif)) {
 8033928:	687b      	ldr	r3, [r7, #4]
 803392a:	681b      	ldr	r3, [r3, #0]
 803392c:	68f9      	ldr	r1, [r7, #12]
 803392e:	4618      	mov	r0, r3
 8033930:	f000 ffce 	bl	80348d0 <ip4_addr_isbroadcast_u32>
 8033934:	4603      	mov	r3, r0
 8033936:	2b00      	cmp	r3, #0
 8033938:	d002      	beq.n	8033940 <etharp_output+0x64>
    /* broadcast on Ethernet also */
    dest = (const struct eth_addr *)&ethbroadcast;
 803393a:	4b69      	ldr	r3, [pc, #420]	; (8033ae0 <etharp_output+0x204>)
 803393c:	61fb      	str	r3, [r7, #28]
 803393e:	e0b5      	b.n	8033aac <etharp_output+0x1d0>
    /* multicast destination IP address? */
  } else if (ip4_addr_ismulticast(ipaddr)) {
 8033940:	687b      	ldr	r3, [r7, #4]
 8033942:	681b      	ldr	r3, [r3, #0]
 8033944:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8033948:	2be0      	cmp	r3, #224	; 0xe0
 803394a:	d118      	bne.n	803397e <etharp_output+0xa2>
    /* Hash IP multicast address to MAC address.*/
    mcastaddr.addr[0] = LL_IP4_MULTICAST_ADDR_0;
 803394c:	2301      	movs	r3, #1
 803394e:	743b      	strb	r3, [r7, #16]
    mcastaddr.addr[1] = LL_IP4_MULTICAST_ADDR_1;
 8033950:	2300      	movs	r3, #0
 8033952:	747b      	strb	r3, [r7, #17]
    mcastaddr.addr[2] = LL_IP4_MULTICAST_ADDR_2;
 8033954:	235e      	movs	r3, #94	; 0x5e
 8033956:	74bb      	strb	r3, [r7, #18]
    mcastaddr.addr[3] = ip4_addr2(ipaddr) & 0x7f;
 8033958:	687b      	ldr	r3, [r7, #4]
 803395a:	3301      	adds	r3, #1
 803395c:	781b      	ldrb	r3, [r3, #0]
 803395e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8033962:	b2db      	uxtb	r3, r3
 8033964:	74fb      	strb	r3, [r7, #19]
    mcastaddr.addr[4] = ip4_addr3(ipaddr);
 8033966:	687b      	ldr	r3, [r7, #4]
 8033968:	3302      	adds	r3, #2
 803396a:	781b      	ldrb	r3, [r3, #0]
 803396c:	753b      	strb	r3, [r7, #20]
    mcastaddr.addr[5] = ip4_addr4(ipaddr);
 803396e:	687b      	ldr	r3, [r7, #4]
 8033970:	3303      	adds	r3, #3
 8033972:	781b      	ldrb	r3, [r3, #0]
 8033974:	757b      	strb	r3, [r7, #21]
    /* destination Ethernet address is multicast */
    dest = &mcastaddr;
 8033976:	f107 0310 	add.w	r3, r7, #16
 803397a:	61fb      	str	r3, [r7, #28]
 803397c:	e096      	b.n	8033aac <etharp_output+0x1d0>
    /* unicast destination IP address? */
  } else {
    netif_addr_idx_t i;
    /* outside local network? if so, this can neither be a global broadcast nor
       a subnet broadcast. */
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 803397e:	687b      	ldr	r3, [r7, #4]
 8033980:	681a      	ldr	r2, [r3, #0]
 8033982:	68fb      	ldr	r3, [r7, #12]
 8033984:	3304      	adds	r3, #4
 8033986:	681b      	ldr	r3, [r3, #0]
 8033988:	405a      	eors	r2, r3
 803398a:	68fb      	ldr	r3, [r7, #12]
 803398c:	3308      	adds	r3, #8
 803398e:	681b      	ldr	r3, [r3, #0]
 8033990:	4013      	ands	r3, r2
 8033992:	2b00      	cmp	r3, #0
 8033994:	d012      	beq.n	80339bc <etharp_output+0xe0>
        !ip4_addr_islinklocal(ipaddr)) {
 8033996:	687b      	ldr	r3, [r7, #4]
 8033998:	681b      	ldr	r3, [r3, #0]
 803399a:	b29b      	uxth	r3, r3
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 803399c:	f64f 62a9 	movw	r2, #65193	; 0xfea9
 80339a0:	4293      	cmp	r3, r2
 80339a2:	d00b      	beq.n	80339bc <etharp_output+0xe0>
        dst_addr = LWIP_HOOK_ETHARP_GET_GW(netif, ipaddr);
        if (dst_addr == NULL)
#endif /* LWIP_HOOK_ETHARP_GET_GW */
        {
          /* interface has default gateway? */
          if (!ip4_addr_isany_val(*netif_ip4_gw(netif))) {
 80339a4:	68fb      	ldr	r3, [r7, #12]
 80339a6:	330c      	adds	r3, #12
 80339a8:	681b      	ldr	r3, [r3, #0]
 80339aa:	2b00      	cmp	r3, #0
 80339ac:	d003      	beq.n	80339b6 <etharp_output+0xda>
            /* send to hardware address of default gateway IP address */
            dst_addr = netif_ip4_gw(netif);
 80339ae:	68fb      	ldr	r3, [r7, #12]
 80339b0:	330c      	adds	r3, #12
 80339b2:	61bb      	str	r3, [r7, #24]
 80339b4:	e002      	b.n	80339bc <etharp_output+0xe0>
            /* no default gateway available */
          } else {
            /* no route to destination error (default gateway missing) */
            return ERR_RTE;
 80339b6:	f06f 0303 	mvn.w	r3, #3
 80339ba:	e083      	b.n	8033ac4 <etharp_output+0x1e8>
    if (netif->hints != NULL) {
      /* per-pcb cached entry was given */
      netif_addr_idx_t etharp_cached_entry = netif->hints->addr_hint;
      if (etharp_cached_entry < ARP_TABLE_SIZE) {
#endif /* LWIP_NETIF_HWADDRHINT */
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 80339bc:	4b49      	ldr	r3, [pc, #292]	; (8033ae4 <etharp_output+0x208>)
 80339be:	781b      	ldrb	r3, [r3, #0]
 80339c0:	4619      	mov	r1, r3
 80339c2:	4a49      	ldr	r2, [pc, #292]	; (8033ae8 <etharp_output+0x20c>)
 80339c4:	460b      	mov	r3, r1
 80339c6:	005b      	lsls	r3, r3, #1
 80339c8:	440b      	add	r3, r1
 80339ca:	00db      	lsls	r3, r3, #3
 80339cc:	4413      	add	r3, r2
 80339ce:	3314      	adds	r3, #20
 80339d0:	781b      	ldrb	r3, [r3, #0]
 80339d2:	2b01      	cmp	r3, #1
 80339d4:	d92b      	bls.n	8033a2e <etharp_output+0x152>
#if ETHARP_TABLE_MATCH_NETIF
            (arp_table[etharp_cached_entry].netif == netif) &&
 80339d6:	4b43      	ldr	r3, [pc, #268]	; (8033ae4 <etharp_output+0x208>)
 80339d8:	781b      	ldrb	r3, [r3, #0]
 80339da:	4619      	mov	r1, r3
 80339dc:	4a42      	ldr	r2, [pc, #264]	; (8033ae8 <etharp_output+0x20c>)
 80339de:	460b      	mov	r3, r1
 80339e0:	005b      	lsls	r3, r3, #1
 80339e2:	440b      	add	r3, r1
 80339e4:	00db      	lsls	r3, r3, #3
 80339e6:	4413      	add	r3, r2
 80339e8:	3308      	adds	r3, #8
 80339ea:	681b      	ldr	r3, [r3, #0]
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 80339ec:	68fa      	ldr	r2, [r7, #12]
 80339ee:	429a      	cmp	r2, r3
 80339f0:	d11d      	bne.n	8033a2e <etharp_output+0x152>
#endif
            (ip4_addr_cmp(dst_addr, &arp_table[etharp_cached_entry].ipaddr))) {
 80339f2:	69bb      	ldr	r3, [r7, #24]
 80339f4:	681a      	ldr	r2, [r3, #0]
 80339f6:	4b3b      	ldr	r3, [pc, #236]	; (8033ae4 <etharp_output+0x208>)
 80339f8:	781b      	ldrb	r3, [r3, #0]
 80339fa:	4618      	mov	r0, r3
 80339fc:	493a      	ldr	r1, [pc, #232]	; (8033ae8 <etharp_output+0x20c>)
 80339fe:	4603      	mov	r3, r0
 8033a00:	005b      	lsls	r3, r3, #1
 8033a02:	4403      	add	r3, r0
 8033a04:	00db      	lsls	r3, r3, #3
 8033a06:	440b      	add	r3, r1
 8033a08:	3304      	adds	r3, #4
 8033a0a:	681b      	ldr	r3, [r3, #0]
            (arp_table[etharp_cached_entry].netif == netif) &&
 8033a0c:	429a      	cmp	r2, r3
 8033a0e:	d10e      	bne.n	8033a2e <etharp_output+0x152>
          /* the per-pcb-cached entry is stable and the right one! */
          ETHARP_STATS_INC(etharp.cachehit);
 8033a10:	4b36      	ldr	r3, [pc, #216]	; (8033aec <etharp_output+0x210>)
 8033a12:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8033a14:	3301      	adds	r3, #1
 8033a16:	b29a      	uxth	r2, r3
 8033a18:	4b34      	ldr	r3, [pc, #208]	; (8033aec <etharp_output+0x210>)
 8033a1a:	85da      	strh	r2, [r3, #46]	; 0x2e
          return etharp_output_to_arp_index(netif, q, etharp_cached_entry);
 8033a1c:	4b31      	ldr	r3, [pc, #196]	; (8033ae4 <etharp_output+0x208>)
 8033a1e:	781b      	ldrb	r3, [r3, #0]
 8033a20:	461a      	mov	r2, r3
 8033a22:	68b9      	ldr	r1, [r7, #8]
 8033a24:	68f8      	ldr	r0, [r7, #12]
 8033a26:	f7ff febf 	bl	80337a8 <etharp_output_to_arp_index>
 8033a2a:	4603      	mov	r3, r0
 8033a2c:	e04a      	b.n	8033ac4 <etharp_output+0x1e8>
    }
#endif /* LWIP_NETIF_HWADDRHINT */

    /* find stable entry: do this here since this is a critical path for
       throughput and etharp_find_entry() is kind of slow */
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 8033a2e:	2300      	movs	r3, #0
 8033a30:	75fb      	strb	r3, [r7, #23]
 8033a32:	e031      	b.n	8033a98 <etharp_output+0x1bc>
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 8033a34:	7dfa      	ldrb	r2, [r7, #23]
 8033a36:	492c      	ldr	r1, [pc, #176]	; (8033ae8 <etharp_output+0x20c>)
 8033a38:	4613      	mov	r3, r2
 8033a3a:	005b      	lsls	r3, r3, #1
 8033a3c:	4413      	add	r3, r2
 8033a3e:	00db      	lsls	r3, r3, #3
 8033a40:	440b      	add	r3, r1
 8033a42:	3314      	adds	r3, #20
 8033a44:	781b      	ldrb	r3, [r3, #0]
 8033a46:	2b01      	cmp	r3, #1
 8033a48:	d923      	bls.n	8033a92 <etharp_output+0x1b6>
#if ETHARP_TABLE_MATCH_NETIF
          (arp_table[i].netif == netif) &&
 8033a4a:	7dfa      	ldrb	r2, [r7, #23]
 8033a4c:	4926      	ldr	r1, [pc, #152]	; (8033ae8 <etharp_output+0x20c>)
 8033a4e:	4613      	mov	r3, r2
 8033a50:	005b      	lsls	r3, r3, #1
 8033a52:	4413      	add	r3, r2
 8033a54:	00db      	lsls	r3, r3, #3
 8033a56:	440b      	add	r3, r1
 8033a58:	3308      	adds	r3, #8
 8033a5a:	681b      	ldr	r3, [r3, #0]
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 8033a5c:	68fa      	ldr	r2, [r7, #12]
 8033a5e:	429a      	cmp	r2, r3
 8033a60:	d117      	bne.n	8033a92 <etharp_output+0x1b6>
#endif
          (ip4_addr_cmp(dst_addr, &arp_table[i].ipaddr))) {
 8033a62:	69bb      	ldr	r3, [r7, #24]
 8033a64:	6819      	ldr	r1, [r3, #0]
 8033a66:	7dfa      	ldrb	r2, [r7, #23]
 8033a68:	481f      	ldr	r0, [pc, #124]	; (8033ae8 <etharp_output+0x20c>)
 8033a6a:	4613      	mov	r3, r2
 8033a6c:	005b      	lsls	r3, r3, #1
 8033a6e:	4413      	add	r3, r2
 8033a70:	00db      	lsls	r3, r3, #3
 8033a72:	4403      	add	r3, r0
 8033a74:	3304      	adds	r3, #4
 8033a76:	681b      	ldr	r3, [r3, #0]
          (arp_table[i].netif == netif) &&
 8033a78:	4299      	cmp	r1, r3
 8033a7a:	d10a      	bne.n	8033a92 <etharp_output+0x1b6>
        /* found an existing, stable entry */
        ETHARP_SET_ADDRHINT(netif, i);
 8033a7c:	4a19      	ldr	r2, [pc, #100]	; (8033ae4 <etharp_output+0x208>)
 8033a7e:	7dfb      	ldrb	r3, [r7, #23]
 8033a80:	7013      	strb	r3, [r2, #0]
        return etharp_output_to_arp_index(netif, q, i);
 8033a82:	7dfb      	ldrb	r3, [r7, #23]
 8033a84:	461a      	mov	r2, r3
 8033a86:	68b9      	ldr	r1, [r7, #8]
 8033a88:	68f8      	ldr	r0, [r7, #12]
 8033a8a:	f7ff fe8d 	bl	80337a8 <etharp_output_to_arp_index>
 8033a8e:	4603      	mov	r3, r0
 8033a90:	e018      	b.n	8033ac4 <etharp_output+0x1e8>
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 8033a92:	7dfb      	ldrb	r3, [r7, #23]
 8033a94:	3301      	adds	r3, #1
 8033a96:	75fb      	strb	r3, [r7, #23]
 8033a98:	7dfb      	ldrb	r3, [r7, #23]
 8033a9a:	2b09      	cmp	r3, #9
 8033a9c:	d9ca      	bls.n	8033a34 <etharp_output+0x158>
      }
    }
    /* no stable entry found, use the (slower) query function:
       queue on destination Ethernet address belonging to ipaddr */
    return etharp_query(netif, dst_addr, q);
 8033a9e:	68ba      	ldr	r2, [r7, #8]
 8033aa0:	69b9      	ldr	r1, [r7, #24]
 8033aa2:	68f8      	ldr	r0, [r7, #12]
 8033aa4:	f000 f824 	bl	8033af0 <etharp_query>
 8033aa8:	4603      	mov	r3, r0
 8033aaa:	e00b      	b.n	8033ac4 <etharp_output+0x1e8>
  }

  /* continuation for multicast/broadcast destinations */
  /* obtain source Ethernet address of the given interface */
  /* send packet directly on the link */
  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), dest, ETHTYPE_IP);
 8033aac:	68fb      	ldr	r3, [r7, #12]
 8033aae:	f103 0226 	add.w	r2, r3, #38	; 0x26
 8033ab2:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8033ab6:	9300      	str	r3, [sp, #0]
 8033ab8:	69fb      	ldr	r3, [r7, #28]
 8033aba:	68b9      	ldr	r1, [r7, #8]
 8033abc:	68f8      	ldr	r0, [r7, #12]
 8033abe:	f001 fe67 	bl	8035790 <ethernet_output>
 8033ac2:	4603      	mov	r3, r0
}
 8033ac4:	4618      	mov	r0, r3
 8033ac6:	3720      	adds	r7, #32
 8033ac8:	46bd      	mov	sp, r7
 8033aca:	bd80      	pop	{r7, pc}
 8033acc:	0803a390 	.word	0x0803a390
 8033ad0:	0803a4e0 	.word	0x0803a4e0
 8033ad4:	0803a408 	.word	0x0803a408
 8033ad8:	0803a530 	.word	0x0803a530
 8033adc:	0803a4d0 	.word	0x0803a4d0
 8033ae0:	0803abc8 	.word	0x0803abc8
 8033ae4:	2000ef5c 	.word	0x2000ef5c
 8033ae8:	2000ee6c 	.word	0x2000ee6c
 8033aec:	2000ed10 	.word	0x2000ed10

08033af0 <etharp_query>:
 * - ERR_ARG Non-unicast address given, those will not appear in ARP cache.
 *
 */
err_t
etharp_query(struct netif *netif, const ip4_addr_t *ipaddr, struct pbuf *q)
{
 8033af0:	b580      	push	{r7, lr}
 8033af2:	b08c      	sub	sp, #48	; 0x30
 8033af4:	af02      	add	r7, sp, #8
 8033af6:	60f8      	str	r0, [r7, #12]
 8033af8:	60b9      	str	r1, [r7, #8]
 8033afa:	607a      	str	r2, [r7, #4]
  struct eth_addr *srcaddr = (struct eth_addr *)netif->hwaddr;
 8033afc:	68fb      	ldr	r3, [r7, #12]
 8033afe:	3326      	adds	r3, #38	; 0x26
 8033b00:	617b      	str	r3, [r7, #20]
  err_t result = ERR_MEM;
 8033b02:	23ff      	movs	r3, #255	; 0xff
 8033b04:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  int is_new_entry = 0;
 8033b08:	2300      	movs	r3, #0
 8033b0a:	623b      	str	r3, [r7, #32]
  s16_t i_err;
  netif_addr_idx_t i;

  /* non-unicast address? */
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 8033b0c:	68bb      	ldr	r3, [r7, #8]
 8033b0e:	681b      	ldr	r3, [r3, #0]
 8033b10:	68f9      	ldr	r1, [r7, #12]
 8033b12:	4618      	mov	r0, r3
 8033b14:	f000 fedc 	bl	80348d0 <ip4_addr_isbroadcast_u32>
 8033b18:	4603      	mov	r3, r0
 8033b1a:	2b00      	cmp	r3, #0
 8033b1c:	d10c      	bne.n	8033b38 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 8033b1e:	68bb      	ldr	r3, [r7, #8]
 8033b20:	681b      	ldr	r3, [r3, #0]
 8033b22:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 8033b26:	2be0      	cmp	r3, #224	; 0xe0
 8033b28:	d006      	beq.n	8033b38 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 8033b2a:	68bb      	ldr	r3, [r7, #8]
 8033b2c:	2b00      	cmp	r3, #0
 8033b2e:	d003      	beq.n	8033b38 <etharp_query+0x48>
      ip4_addr_isany(ipaddr)) {
 8033b30:	68bb      	ldr	r3, [r7, #8]
 8033b32:	681b      	ldr	r3, [r3, #0]
 8033b34:	2b00      	cmp	r3, #0
 8033b36:	d102      	bne.n	8033b3e <etharp_query+0x4e>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 8033b38:	f06f 030f 	mvn.w	r3, #15
 8033b3c:	e110      	b.n	8033d60 <etharp_query+0x270>
  }

  /* find entry in ARP cache, ask to create entry if queueing packet */
  i_err = etharp_find_entry(ipaddr, ETHARP_FLAG_TRY_HARD, netif);
 8033b3e:	68fa      	ldr	r2, [r7, #12]
 8033b40:	2101      	movs	r1, #1
 8033b42:	68b8      	ldr	r0, [r7, #8]
 8033b44:	f7ff fb3e 	bl	80331c4 <etharp_find_entry>
 8033b48:	4603      	mov	r3, r0
 8033b4a:	827b      	strh	r3, [r7, #18]

  /* could not find or create entry? */
  if (i_err < 0) {
 8033b4c:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8033b50:	2b00      	cmp	r3, #0
 8033b52:	da0b      	bge.n	8033b6c <etharp_query+0x7c>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not create ARP entry\n"));
    if (q) {
 8033b54:	687b      	ldr	r3, [r7, #4]
 8033b56:	2b00      	cmp	r3, #0
 8033b58:	d005      	beq.n	8033b66 <etharp_query+0x76>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: packet dropped\n"));
      ETHARP_STATS_INC(etharp.memerr);
 8033b5a:	4b83      	ldr	r3, [pc, #524]	; (8033d68 <etharp_query+0x278>)
 8033b5c:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8033b5e:	3301      	adds	r3, #1
 8033b60:	b29a      	uxth	r2, r3
 8033b62:	4b81      	ldr	r3, [pc, #516]	; (8033d68 <etharp_query+0x278>)
 8033b64:	849a      	strh	r2, [r3, #36]	; 0x24
    }
    return (err_t)i_err;
 8033b66:	8a7b      	ldrh	r3, [r7, #18]
 8033b68:	b25b      	sxtb	r3, r3
 8033b6a:	e0f9      	b.n	8033d60 <etharp_query+0x270>
  }
  LWIP_ASSERT("type overflow", (size_t)i_err < NETIF_ADDR_IDX_MAX);
 8033b6c:	8a7b      	ldrh	r3, [r7, #18]
 8033b6e:	2b7e      	cmp	r3, #126	; 0x7e
 8033b70:	d906      	bls.n	8033b80 <etharp_query+0x90>
 8033b72:	4b7e      	ldr	r3, [pc, #504]	; (8033d6c <etharp_query+0x27c>)
 8033b74:	f240 32c1 	movw	r2, #961	; 0x3c1
 8033b78:	497d      	ldr	r1, [pc, #500]	; (8033d70 <etharp_query+0x280>)
 8033b7a:	487e      	ldr	r0, [pc, #504]	; (8033d74 <etharp_query+0x284>)
 8033b7c:	f002 fb0c 	bl	8036198 <iprintf>
  i = (netif_addr_idx_t)i_err;
 8033b80:	8a7b      	ldrh	r3, [r7, #18]
 8033b82:	747b      	strb	r3, [r7, #17]

  /* mark a fresh entry as pending (we just sent a request) */
  if (arp_table[i].state == ETHARP_STATE_EMPTY) {
 8033b84:	7c7a      	ldrb	r2, [r7, #17]
 8033b86:	497c      	ldr	r1, [pc, #496]	; (8033d78 <etharp_query+0x288>)
 8033b88:	4613      	mov	r3, r2
 8033b8a:	005b      	lsls	r3, r3, #1
 8033b8c:	4413      	add	r3, r2
 8033b8e:	00db      	lsls	r3, r3, #3
 8033b90:	440b      	add	r3, r1
 8033b92:	3314      	adds	r3, #20
 8033b94:	781b      	ldrb	r3, [r3, #0]
 8033b96:	2b00      	cmp	r3, #0
 8033b98:	d115      	bne.n	8033bc6 <etharp_query+0xd6>
    is_new_entry = 1;
 8033b9a:	2301      	movs	r3, #1
 8033b9c:	623b      	str	r3, [r7, #32]
    arp_table[i].state = ETHARP_STATE_PENDING;
 8033b9e:	7c7a      	ldrb	r2, [r7, #17]
 8033ba0:	4975      	ldr	r1, [pc, #468]	; (8033d78 <etharp_query+0x288>)
 8033ba2:	4613      	mov	r3, r2
 8033ba4:	005b      	lsls	r3, r3, #1
 8033ba6:	4413      	add	r3, r2
 8033ba8:	00db      	lsls	r3, r3, #3
 8033baa:	440b      	add	r3, r1
 8033bac:	3314      	adds	r3, #20
 8033bae:	2201      	movs	r2, #1
 8033bb0:	701a      	strb	r2, [r3, #0]
    /* record network interface for re-sending arp request in etharp_tmr */
    arp_table[i].netif = netif;
 8033bb2:	7c7a      	ldrb	r2, [r7, #17]
 8033bb4:	4970      	ldr	r1, [pc, #448]	; (8033d78 <etharp_query+0x288>)
 8033bb6:	4613      	mov	r3, r2
 8033bb8:	005b      	lsls	r3, r3, #1
 8033bba:	4413      	add	r3, r2
 8033bbc:	00db      	lsls	r3, r3, #3
 8033bbe:	440b      	add	r3, r1
 8033bc0:	3308      	adds	r3, #8
 8033bc2:	68fa      	ldr	r2, [r7, #12]
 8033bc4:	601a      	str	r2, [r3, #0]
  }

  /* { i is either a STABLE or (new or existing) PENDING entry } */
  LWIP_ASSERT("arp_table[i].state == PENDING or STABLE",
 8033bc6:	7c7a      	ldrb	r2, [r7, #17]
 8033bc8:	496b      	ldr	r1, [pc, #428]	; (8033d78 <etharp_query+0x288>)
 8033bca:	4613      	mov	r3, r2
 8033bcc:	005b      	lsls	r3, r3, #1
 8033bce:	4413      	add	r3, r2
 8033bd0:	00db      	lsls	r3, r3, #3
 8033bd2:	440b      	add	r3, r1
 8033bd4:	3314      	adds	r3, #20
 8033bd6:	781b      	ldrb	r3, [r3, #0]
 8033bd8:	2b01      	cmp	r3, #1
 8033bda:	d011      	beq.n	8033c00 <etharp_query+0x110>
 8033bdc:	7c7a      	ldrb	r2, [r7, #17]
 8033bde:	4966      	ldr	r1, [pc, #408]	; (8033d78 <etharp_query+0x288>)
 8033be0:	4613      	mov	r3, r2
 8033be2:	005b      	lsls	r3, r3, #1
 8033be4:	4413      	add	r3, r2
 8033be6:	00db      	lsls	r3, r3, #3
 8033be8:	440b      	add	r3, r1
 8033bea:	3314      	adds	r3, #20
 8033bec:	781b      	ldrb	r3, [r3, #0]
 8033bee:	2b01      	cmp	r3, #1
 8033bf0:	d806      	bhi.n	8033c00 <etharp_query+0x110>
 8033bf2:	4b5e      	ldr	r3, [pc, #376]	; (8033d6c <etharp_query+0x27c>)
 8033bf4:	f240 32cd 	movw	r2, #973	; 0x3cd
 8033bf8:	4960      	ldr	r1, [pc, #384]	; (8033d7c <etharp_query+0x28c>)
 8033bfa:	485e      	ldr	r0, [pc, #376]	; (8033d74 <etharp_query+0x284>)
 8033bfc:	f002 facc 	bl	8036198 <iprintf>
              ((arp_table[i].state == ETHARP_STATE_PENDING) ||
               (arp_table[i].state >= ETHARP_STATE_STABLE)));

  /* do we have a new entry? or an implicit query request? */
  if (is_new_entry || (q == NULL)) {
 8033c00:	6a3b      	ldr	r3, [r7, #32]
 8033c02:	2b00      	cmp	r3, #0
 8033c04:	d102      	bne.n	8033c0c <etharp_query+0x11c>
 8033c06:	687b      	ldr	r3, [r7, #4]
 8033c08:	2b00      	cmp	r3, #0
 8033c0a:	d10c      	bne.n	8033c26 <etharp_query+0x136>
    /* try to resolve it; send out ARP request */
    result = etharp_request(netif, ipaddr);
 8033c0c:	68b9      	ldr	r1, [r7, #8]
 8033c0e:	68f8      	ldr	r0, [r7, #12]
 8033c10:	f000 f978 	bl	8033f04 <etharp_request>
 8033c14:	4603      	mov	r3, r0
 8033c16:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      /* ARP request couldn't be sent */
      /* We don't re-send arp request in etharp_tmr, but we still queue packets,
         since this failure could be temporary, and the next packet calling
         etharp_query again could lead to sending the queued packets. */
    }
    if (q == NULL) {
 8033c1a:	687b      	ldr	r3, [r7, #4]
 8033c1c:	2b00      	cmp	r3, #0
 8033c1e:	d102      	bne.n	8033c26 <etharp_query+0x136>
      return result;
 8033c20:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8033c24:	e09c      	b.n	8033d60 <etharp_query+0x270>
    }
  }

  /* packet given? */
  LWIP_ASSERT("q != NULL", q != NULL);
 8033c26:	687b      	ldr	r3, [r7, #4]
 8033c28:	2b00      	cmp	r3, #0
 8033c2a:	d106      	bne.n	8033c3a <etharp_query+0x14a>
 8033c2c:	4b4f      	ldr	r3, [pc, #316]	; (8033d6c <etharp_query+0x27c>)
 8033c2e:	f240 32e1 	movw	r2, #993	; 0x3e1
 8033c32:	4953      	ldr	r1, [pc, #332]	; (8033d80 <etharp_query+0x290>)
 8033c34:	484f      	ldr	r0, [pc, #316]	; (8033d74 <etharp_query+0x284>)
 8033c36:	f002 faaf 	bl	8036198 <iprintf>
  /* stable entry? */
  if (arp_table[i].state >= ETHARP_STATE_STABLE) {
 8033c3a:	7c7a      	ldrb	r2, [r7, #17]
 8033c3c:	494e      	ldr	r1, [pc, #312]	; (8033d78 <etharp_query+0x288>)
 8033c3e:	4613      	mov	r3, r2
 8033c40:	005b      	lsls	r3, r3, #1
 8033c42:	4413      	add	r3, r2
 8033c44:	00db      	lsls	r3, r3, #3
 8033c46:	440b      	add	r3, r1
 8033c48:	3314      	adds	r3, #20
 8033c4a:	781b      	ldrb	r3, [r3, #0]
 8033c4c:	2b01      	cmp	r3, #1
 8033c4e:	d917      	bls.n	8033c80 <etharp_query+0x190>
    /* we have a valid IP->Ethernet address mapping */
    ETHARP_SET_ADDRHINT(netif, i);
 8033c50:	4a4c      	ldr	r2, [pc, #304]	; (8033d84 <etharp_query+0x294>)
 8033c52:	7c7b      	ldrb	r3, [r7, #17]
 8033c54:	7013      	strb	r3, [r2, #0]
    /* send the packet */
    result = ethernet_output(netif, q, srcaddr, &(arp_table[i].ethaddr), ETHTYPE_IP);
 8033c56:	7c7a      	ldrb	r2, [r7, #17]
 8033c58:	4613      	mov	r3, r2
 8033c5a:	005b      	lsls	r3, r3, #1
 8033c5c:	4413      	add	r3, r2
 8033c5e:	00db      	lsls	r3, r3, #3
 8033c60:	3308      	adds	r3, #8
 8033c62:	4a45      	ldr	r2, [pc, #276]	; (8033d78 <etharp_query+0x288>)
 8033c64:	4413      	add	r3, r2
 8033c66:	3304      	adds	r3, #4
 8033c68:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8033c6c:	9200      	str	r2, [sp, #0]
 8033c6e:	697a      	ldr	r2, [r7, #20]
 8033c70:	6879      	ldr	r1, [r7, #4]
 8033c72:	68f8      	ldr	r0, [r7, #12]
 8033c74:	f001 fd8c 	bl	8035790 <ethernet_output>
 8033c78:	4603      	mov	r3, r0
 8033c7a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8033c7e:	e06d      	b.n	8033d5c <etharp_query+0x26c>
    /* pending entry? (either just created or already pending */
  } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 8033c80:	7c7a      	ldrb	r2, [r7, #17]
 8033c82:	493d      	ldr	r1, [pc, #244]	; (8033d78 <etharp_query+0x288>)
 8033c84:	4613      	mov	r3, r2
 8033c86:	005b      	lsls	r3, r3, #1
 8033c88:	4413      	add	r3, r2
 8033c8a:	00db      	lsls	r3, r3, #3
 8033c8c:	440b      	add	r3, r1
 8033c8e:	3314      	adds	r3, #20
 8033c90:	781b      	ldrb	r3, [r3, #0]
 8033c92:	2b01      	cmp	r3, #1
 8033c94:	d162      	bne.n	8033d5c <etharp_query+0x26c>
    /* entry is still pending, queue the given packet 'q' */
    struct pbuf *p;
    int copy_needed = 0;
 8033c96:	2300      	movs	r3, #0
 8033c98:	61bb      	str	r3, [r7, #24]
    /* IF q includes a pbuf that must be copied, copy the whole chain into a
     * new PBUF_RAM. See the definition of PBUF_NEEDS_COPY for details. */
    p = q;
 8033c9a:	687b      	ldr	r3, [r7, #4]
 8033c9c:	61fb      	str	r3, [r7, #28]
    while (p) {
 8033c9e:	e01c      	b.n	8033cda <etharp_query+0x1ea>
      LWIP_ASSERT("no packet queues allowed!", (p->len != p->tot_len) || (p->next == 0));
 8033ca0:	69fb      	ldr	r3, [r7, #28]
 8033ca2:	895a      	ldrh	r2, [r3, #10]
 8033ca4:	69fb      	ldr	r3, [r7, #28]
 8033ca6:	891b      	ldrh	r3, [r3, #8]
 8033ca8:	429a      	cmp	r2, r3
 8033caa:	d10a      	bne.n	8033cc2 <etharp_query+0x1d2>
 8033cac:	69fb      	ldr	r3, [r7, #28]
 8033cae:	681b      	ldr	r3, [r3, #0]
 8033cb0:	2b00      	cmp	r3, #0
 8033cb2:	d006      	beq.n	8033cc2 <etharp_query+0x1d2>
 8033cb4:	4b2d      	ldr	r3, [pc, #180]	; (8033d6c <etharp_query+0x27c>)
 8033cb6:	f240 32f1 	movw	r2, #1009	; 0x3f1
 8033cba:	4933      	ldr	r1, [pc, #204]	; (8033d88 <etharp_query+0x298>)
 8033cbc:	482d      	ldr	r0, [pc, #180]	; (8033d74 <etharp_query+0x284>)
 8033cbe:	f002 fa6b 	bl	8036198 <iprintf>
      if (PBUF_NEEDS_COPY(p)) {
 8033cc2:	69fb      	ldr	r3, [r7, #28]
 8033cc4:	7b1b      	ldrb	r3, [r3, #12]
 8033cc6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8033cca:	2b00      	cmp	r3, #0
 8033ccc:	d002      	beq.n	8033cd4 <etharp_query+0x1e4>
        copy_needed = 1;
 8033cce:	2301      	movs	r3, #1
 8033cd0:	61bb      	str	r3, [r7, #24]
        break;
 8033cd2:	e005      	b.n	8033ce0 <etharp_query+0x1f0>
      }
      p = p->next;
 8033cd4:	69fb      	ldr	r3, [r7, #28]
 8033cd6:	681b      	ldr	r3, [r3, #0]
 8033cd8:	61fb      	str	r3, [r7, #28]
    while (p) {
 8033cda:	69fb      	ldr	r3, [r7, #28]
 8033cdc:	2b00      	cmp	r3, #0
 8033cde:	d1df      	bne.n	8033ca0 <etharp_query+0x1b0>
    }
    if (copy_needed) {
 8033ce0:	69bb      	ldr	r3, [r7, #24]
 8033ce2:	2b00      	cmp	r3, #0
 8033ce4:	d007      	beq.n	8033cf6 <etharp_query+0x206>
      /* copy the whole packet into new pbufs */
      p = pbuf_clone(PBUF_LINK, PBUF_RAM, q);
 8033ce6:	687a      	ldr	r2, [r7, #4]
 8033ce8:	f44f 7120 	mov.w	r1, #640	; 0x280
 8033cec:	200e      	movs	r0, #14
 8033cee:	f7f8 fb3d 	bl	802c36c <pbuf_clone>
 8033cf2:	61f8      	str	r0, [r7, #28]
 8033cf4:	e004      	b.n	8033d00 <etharp_query+0x210>
    } else {
      /* referencing the old pbuf is enough */
      p = q;
 8033cf6:	687b      	ldr	r3, [r7, #4]
 8033cf8:	61fb      	str	r3, [r7, #28]
      pbuf_ref(p);
 8033cfa:	69f8      	ldr	r0, [r7, #28]
 8033cfc:	f7f8 f974 	bl	802bfe8 <pbuf_ref>
    }
    /* packet could be taken over? */
    if (p != NULL) {
 8033d00:	69fb      	ldr	r3, [r7, #28]
 8033d02:	2b00      	cmp	r3, #0
 8033d04:	d021      	beq.n	8033d4a <etharp_query+0x25a>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
        result = ERR_MEM;
      }
#else /* ARP_QUEUEING */
      /* always queue one packet per ARP request only, freeing a previously queued packet */
      if (arp_table[i].q != NULL) {
 8033d06:	7c7a      	ldrb	r2, [r7, #17]
 8033d08:	491b      	ldr	r1, [pc, #108]	; (8033d78 <etharp_query+0x288>)
 8033d0a:	4613      	mov	r3, r2
 8033d0c:	005b      	lsls	r3, r3, #1
 8033d0e:	4413      	add	r3, r2
 8033d10:	00db      	lsls	r3, r3, #3
 8033d12:	440b      	add	r3, r1
 8033d14:	681b      	ldr	r3, [r3, #0]
 8033d16:	2b00      	cmp	r3, #0
 8033d18:	d00a      	beq.n	8033d30 <etharp_query+0x240>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: dropped previously queued packet %p for ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
        pbuf_free(arp_table[i].q);
 8033d1a:	7c7a      	ldrb	r2, [r7, #17]
 8033d1c:	4916      	ldr	r1, [pc, #88]	; (8033d78 <etharp_query+0x288>)
 8033d1e:	4613      	mov	r3, r2
 8033d20:	005b      	lsls	r3, r3, #1
 8033d22:	4413      	add	r3, r2
 8033d24:	00db      	lsls	r3, r3, #3
 8033d26:	440b      	add	r3, r1
 8033d28:	681b      	ldr	r3, [r3, #0]
 8033d2a:	4618      	mov	r0, r3
 8033d2c:	f7f8 f8b6 	bl	802be9c <pbuf_free>
      }
      arp_table[i].q = p;
 8033d30:	7c7a      	ldrb	r2, [r7, #17]
 8033d32:	4911      	ldr	r1, [pc, #68]	; (8033d78 <etharp_query+0x288>)
 8033d34:	4613      	mov	r3, r2
 8033d36:	005b      	lsls	r3, r3, #1
 8033d38:	4413      	add	r3, r2
 8033d3a:	00db      	lsls	r3, r3, #3
 8033d3c:	440b      	add	r3, r1
 8033d3e:	69fa      	ldr	r2, [r7, #28]
 8033d40:	601a      	str	r2, [r3, #0]
      result = ERR_OK;
 8033d42:	2300      	movs	r3, #0
 8033d44:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8033d48:	e008      	b.n	8033d5c <etharp_query+0x26c>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: queued packet %p on ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
#endif /* ARP_QUEUEING */
    } else {
      ETHARP_STATS_INC(etharp.memerr);
 8033d4a:	4b07      	ldr	r3, [pc, #28]	; (8033d68 <etharp_query+0x278>)
 8033d4c:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8033d4e:	3301      	adds	r3, #1
 8033d50:	b29a      	uxth	r2, r3
 8033d52:	4b05      	ldr	r3, [pc, #20]	; (8033d68 <etharp_query+0x278>)
 8033d54:	849a      	strh	r2, [r3, #36]	; 0x24
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
      result = ERR_MEM;
 8033d56:	23ff      	movs	r3, #255	; 0xff
 8033d58:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }
  }
  return result;
 8033d5c:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 8033d60:	4618      	mov	r0, r3
 8033d62:	3728      	adds	r7, #40	; 0x28
 8033d64:	46bd      	mov	sp, r7
 8033d66:	bd80      	pop	{r7, pc}
 8033d68:	2000ed10 	.word	0x2000ed10
 8033d6c:	0803a390 	.word	0x0803a390
 8033d70:	0803a53c 	.word	0x0803a53c
 8033d74:	0803a408 	.word	0x0803a408
 8033d78:	2000ee6c 	.word	0x2000ee6c
 8033d7c:	0803a54c 	.word	0x0803a54c
 8033d80:	0803a530 	.word	0x0803a530
 8033d84:	2000ef5c 	.word	0x2000ef5c
 8033d88:	0803a574 	.word	0x0803a574

08033d8c <etharp_raw>:
etharp_raw(struct netif *netif, const struct eth_addr *ethsrc_addr,
           const struct eth_addr *ethdst_addr,
           const struct eth_addr *hwsrc_addr, const ip4_addr_t *ipsrc_addr,
           const struct eth_addr *hwdst_addr, const ip4_addr_t *ipdst_addr,
           const u16_t opcode)
{
 8033d8c:	b580      	push	{r7, lr}
 8033d8e:	b08a      	sub	sp, #40	; 0x28
 8033d90:	af02      	add	r7, sp, #8
 8033d92:	60f8      	str	r0, [r7, #12]
 8033d94:	60b9      	str	r1, [r7, #8]
 8033d96:	607a      	str	r2, [r7, #4]
 8033d98:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  err_t result = ERR_OK;
 8033d9a:	2300      	movs	r3, #0
 8033d9c:	77fb      	strb	r3, [r7, #31]
  struct etharp_hdr *hdr;

  LWIP_ASSERT("netif != NULL", netif != NULL);
 8033d9e:	68fb      	ldr	r3, [r7, #12]
 8033da0:	2b00      	cmp	r3, #0
 8033da2:	d106      	bne.n	8033db2 <etharp_raw+0x26>
 8033da4:	4b40      	ldr	r3, [pc, #256]	; (8033ea8 <etharp_raw+0x11c>)
 8033da6:	f240 4257 	movw	r2, #1111	; 0x457
 8033daa:	4940      	ldr	r1, [pc, #256]	; (8033eac <etharp_raw+0x120>)
 8033dac:	4840      	ldr	r0, [pc, #256]	; (8033eb0 <etharp_raw+0x124>)
 8033dae:	f002 f9f3 	bl	8036198 <iprintf>

  /* allocate a pbuf for the outgoing ARP request packet */
  p = pbuf_alloc(PBUF_LINK, SIZEOF_ETHARP_HDR, PBUF_RAM);
 8033db2:	f44f 7220 	mov.w	r2, #640	; 0x280
 8033db6:	211c      	movs	r1, #28
 8033db8:	200e      	movs	r0, #14
 8033dba:	f7f7 fd8b 	bl	802b8d4 <pbuf_alloc>
 8033dbe:	61b8      	str	r0, [r7, #24]
  /* could allocate a pbuf for an ARP request? */
  if (p == NULL) {
 8033dc0:	69bb      	ldr	r3, [r7, #24]
 8033dc2:	2b00      	cmp	r3, #0
 8033dc4:	d108      	bne.n	8033dd8 <etharp_raw+0x4c>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("etharp_raw: could not allocate pbuf for ARP request.\n"));
    ETHARP_STATS_INC(etharp.memerr);
 8033dc6:	4b3b      	ldr	r3, [pc, #236]	; (8033eb4 <etharp_raw+0x128>)
 8033dc8:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8033dca:	3301      	adds	r3, #1
 8033dcc:	b29a      	uxth	r2, r3
 8033dce:	4b39      	ldr	r3, [pc, #228]	; (8033eb4 <etharp_raw+0x128>)
 8033dd0:	849a      	strh	r2, [r3, #36]	; 0x24
    return ERR_MEM;
 8033dd2:	f04f 33ff 	mov.w	r3, #4294967295
 8033dd6:	e063      	b.n	8033ea0 <etharp_raw+0x114>
  }
  LWIP_ASSERT("check that first pbuf can hold struct etharp_hdr",
 8033dd8:	69bb      	ldr	r3, [r7, #24]
 8033dda:	895b      	ldrh	r3, [r3, #10]
 8033ddc:	2b1b      	cmp	r3, #27
 8033dde:	d806      	bhi.n	8033dee <etharp_raw+0x62>
 8033de0:	4b31      	ldr	r3, [pc, #196]	; (8033ea8 <etharp_raw+0x11c>)
 8033de2:	f240 4262 	movw	r2, #1122	; 0x462
 8033de6:	4934      	ldr	r1, [pc, #208]	; (8033eb8 <etharp_raw+0x12c>)
 8033de8:	4831      	ldr	r0, [pc, #196]	; (8033eb0 <etharp_raw+0x124>)
 8033dea:	f002 f9d5 	bl	8036198 <iprintf>
              (p->len >= SIZEOF_ETHARP_HDR));

  hdr = (struct etharp_hdr *)p->payload;
 8033dee:	69bb      	ldr	r3, [r7, #24]
 8033df0:	685b      	ldr	r3, [r3, #4]
 8033df2:	617b      	str	r3, [r7, #20]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_raw: sending raw ARP packet.\n"));
  hdr->opcode = lwip_htons(opcode);
 8033df4:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8033df6:	4618      	mov	r0, r3
 8033df8:	f7f6 fb8e 	bl	802a518 <lwip_htons>
 8033dfc:	4603      	mov	r3, r0
 8033dfe:	461a      	mov	r2, r3
 8033e00:	697b      	ldr	r3, [r7, #20]
 8033e02:	80da      	strh	r2, [r3, #6]

  LWIP_ASSERT("netif->hwaddr_len must be the same as ETH_HWADDR_LEN for etharp!",
 8033e04:	68fb      	ldr	r3, [r7, #12]
 8033e06:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8033e0a:	2b06      	cmp	r3, #6
 8033e0c:	d006      	beq.n	8033e1c <etharp_raw+0x90>
 8033e0e:	4b26      	ldr	r3, [pc, #152]	; (8033ea8 <etharp_raw+0x11c>)
 8033e10:	f240 4269 	movw	r2, #1129	; 0x469
 8033e14:	4929      	ldr	r1, [pc, #164]	; (8033ebc <etharp_raw+0x130>)
 8033e16:	4826      	ldr	r0, [pc, #152]	; (8033eb0 <etharp_raw+0x124>)
 8033e18:	f002 f9be 	bl	8036198 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));

  /* Write the ARP MAC-Addresses */
  SMEMCPY(&hdr->shwaddr, hwsrc_addr, ETH_HWADDR_LEN);
 8033e1c:	697b      	ldr	r3, [r7, #20]
 8033e1e:	3308      	adds	r3, #8
 8033e20:	2206      	movs	r2, #6
 8033e22:	6839      	ldr	r1, [r7, #0]
 8033e24:	4618      	mov	r0, r3
 8033e26:	f002 f8a7 	bl	8035f78 <memcpy>
  SMEMCPY(&hdr->dhwaddr, hwdst_addr, ETH_HWADDR_LEN);
 8033e2a:	697b      	ldr	r3, [r7, #20]
 8033e2c:	3312      	adds	r3, #18
 8033e2e:	2206      	movs	r2, #6
 8033e30:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8033e32:	4618      	mov	r0, r3
 8033e34:	f002 f8a0 	bl	8035f78 <memcpy>
  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing. */
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->sipaddr, ipsrc_addr);
 8033e38:	697b      	ldr	r3, [r7, #20]
 8033e3a:	330e      	adds	r3, #14
 8033e3c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8033e3e:	6812      	ldr	r2, [r2, #0]
 8033e40:	601a      	str	r2, [r3, #0]
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->dipaddr, ipdst_addr);
 8033e42:	697b      	ldr	r3, [r7, #20]
 8033e44:	3318      	adds	r3, #24
 8033e46:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8033e48:	6812      	ldr	r2, [r2, #0]
 8033e4a:	601a      	str	r2, [r3, #0]

  hdr->hwtype = PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET);
 8033e4c:	697b      	ldr	r3, [r7, #20]
 8033e4e:	2200      	movs	r2, #0
 8033e50:	701a      	strb	r2, [r3, #0]
 8033e52:	2200      	movs	r2, #0
 8033e54:	f042 0201 	orr.w	r2, r2, #1
 8033e58:	705a      	strb	r2, [r3, #1]
  hdr->proto = PP_HTONS(ETHTYPE_IP);
 8033e5a:	697b      	ldr	r3, [r7, #20]
 8033e5c:	2200      	movs	r2, #0
 8033e5e:	f042 0208 	orr.w	r2, r2, #8
 8033e62:	709a      	strb	r2, [r3, #2]
 8033e64:	2200      	movs	r2, #0
 8033e66:	70da      	strb	r2, [r3, #3]
  /* set hwlen and protolen */
  hdr->hwlen = ETH_HWADDR_LEN;
 8033e68:	697b      	ldr	r3, [r7, #20]
 8033e6a:	2206      	movs	r2, #6
 8033e6c:	711a      	strb	r2, [r3, #4]
  hdr->protolen = sizeof(ip4_addr_t);
 8033e6e:	697b      	ldr	r3, [r7, #20]
 8033e70:	2204      	movs	r2, #4
 8033e72:	715a      	strb	r2, [r3, #5]
  if (ip4_addr_islinklocal(ipsrc_addr)) {
    ethernet_output(netif, p, ethsrc_addr, &ethbroadcast, ETHTYPE_ARP);
  } else
#endif /* LWIP_AUTOIP */
  {
    ethernet_output(netif, p, ethsrc_addr, ethdst_addr, ETHTYPE_ARP);
 8033e74:	f640 0306 	movw	r3, #2054	; 0x806
 8033e78:	9300      	str	r3, [sp, #0]
 8033e7a:	687b      	ldr	r3, [r7, #4]
 8033e7c:	68ba      	ldr	r2, [r7, #8]
 8033e7e:	69b9      	ldr	r1, [r7, #24]
 8033e80:	68f8      	ldr	r0, [r7, #12]
 8033e82:	f001 fc85 	bl	8035790 <ethernet_output>
  }

  ETHARP_STATS_INC(etharp.xmit);
 8033e86:	4b0b      	ldr	r3, [pc, #44]	; (8033eb4 <etharp_raw+0x128>)
 8033e88:	8b1b      	ldrh	r3, [r3, #24]
 8033e8a:	3301      	adds	r3, #1
 8033e8c:	b29a      	uxth	r2, r3
 8033e8e:	4b09      	ldr	r3, [pc, #36]	; (8033eb4 <etharp_raw+0x128>)
 8033e90:	831a      	strh	r2, [r3, #24]
  /* free ARP query packet */
  pbuf_free(p);
 8033e92:	69b8      	ldr	r0, [r7, #24]
 8033e94:	f7f8 f802 	bl	802be9c <pbuf_free>
  p = NULL;
 8033e98:	2300      	movs	r3, #0
 8033e9a:	61bb      	str	r3, [r7, #24]
  /* could not allocate pbuf for ARP request */

  return result;
 8033e9c:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8033ea0:	4618      	mov	r0, r3
 8033ea2:	3720      	adds	r7, #32
 8033ea4:	46bd      	mov	sp, r7
 8033ea6:	bd80      	pop	{r7, pc}
 8033ea8:	0803a390 	.word	0x0803a390
 8033eac:	0803a4e0 	.word	0x0803a4e0
 8033eb0:	0803a408 	.word	0x0803a408
 8033eb4:	2000ed10 	.word	0x2000ed10
 8033eb8:	0803a590 	.word	0x0803a590
 8033ebc:	0803a5c4 	.word	0x0803a5c4

08033ec0 <etharp_request_dst>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
static err_t
etharp_request_dst(struct netif *netif, const ip4_addr_t *ipaddr, const struct eth_addr *hw_dst_addr)
{
 8033ec0:	b580      	push	{r7, lr}
 8033ec2:	b088      	sub	sp, #32
 8033ec4:	af04      	add	r7, sp, #16
 8033ec6:	60f8      	str	r0, [r7, #12]
 8033ec8:	60b9      	str	r1, [r7, #8]
 8033eca:	607a      	str	r2, [r7, #4]
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 8033ecc:	68fb      	ldr	r3, [r7, #12]
 8033ece:	f103 0126 	add.w	r1, r3, #38	; 0x26
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 8033ed2:	68fb      	ldr	r3, [r7, #12]
 8033ed4:	f103 0026 	add.w	r0, r3, #38	; 0x26
 8033ed8:	68fb      	ldr	r3, [r7, #12]
 8033eda:	3304      	adds	r3, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 8033edc:	2201      	movs	r2, #1
 8033ede:	9203      	str	r2, [sp, #12]
 8033ee0:	68ba      	ldr	r2, [r7, #8]
 8033ee2:	9202      	str	r2, [sp, #8]
 8033ee4:	4a06      	ldr	r2, [pc, #24]	; (8033f00 <etharp_request_dst+0x40>)
 8033ee6:	9201      	str	r2, [sp, #4]
 8033ee8:	9300      	str	r3, [sp, #0]
 8033eea:	4603      	mov	r3, r0
 8033eec:	687a      	ldr	r2, [r7, #4]
 8033eee:	68f8      	ldr	r0, [r7, #12]
 8033ef0:	f7ff ff4c 	bl	8033d8c <etharp_raw>
 8033ef4:	4603      	mov	r3, r0
                    ipaddr, ARP_REQUEST);
}
 8033ef6:	4618      	mov	r0, r3
 8033ef8:	3710      	adds	r7, #16
 8033efa:	46bd      	mov	sp, r7
 8033efc:	bd80      	pop	{r7, pc}
 8033efe:	bf00      	nop
 8033f00:	0803abd0 	.word	0x0803abd0

08033f04 <etharp_request>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
err_t
etharp_request(struct netif *netif, const ip4_addr_t *ipaddr)
{
 8033f04:	b580      	push	{r7, lr}
 8033f06:	b082      	sub	sp, #8
 8033f08:	af00      	add	r7, sp, #0
 8033f0a:	6078      	str	r0, [r7, #4]
 8033f0c:	6039      	str	r1, [r7, #0]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_request: sending ARP request.\n"));
  return etharp_request_dst(netif, ipaddr, &ethbroadcast);
 8033f0e:	4a05      	ldr	r2, [pc, #20]	; (8033f24 <etharp_request+0x20>)
 8033f10:	6839      	ldr	r1, [r7, #0]
 8033f12:	6878      	ldr	r0, [r7, #4]
 8033f14:	f7ff ffd4 	bl	8033ec0 <etharp_request_dst>
 8033f18:	4603      	mov	r3, r0
}
 8033f1a:	4618      	mov	r0, r3
 8033f1c:	3708      	adds	r7, #8
 8033f1e:	46bd      	mov	sp, r7
 8033f20:	bd80      	pop	{r7, pc}
 8033f22:	bf00      	nop
 8033f24:	0803abc8 	.word	0x0803abc8

08033f28 <icmp_input>:
 * @param p the icmp echo request packet, p->payload pointing to the icmp header
 * @param inp the netif on which this packet was received
 */
void
icmp_input(struct pbuf *p, struct netif *inp)
{
 8033f28:	b580      	push	{r7, lr}
 8033f2a:	b08e      	sub	sp, #56	; 0x38
 8033f2c:	af04      	add	r7, sp, #16
 8033f2e:	6078      	str	r0, [r7, #4]
 8033f30:	6039      	str	r1, [r7, #0]
  struct icmp_echo_hdr *iecho;
  const struct ip_hdr *iphdr_in;
  u16_t hlen;
  const ip4_addr_t *src;

  ICMP_STATS_INC(icmp.recv);
 8033f32:	4b92      	ldr	r3, [pc, #584]	; (803417c <icmp_input+0x254>)
 8033f34:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8033f38:	3301      	adds	r3, #1
 8033f3a:	b29a      	uxth	r2, r3
 8033f3c:	4b8f      	ldr	r3, [pc, #572]	; (803417c <icmp_input+0x254>)
 8033f3e:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  MIB2_STATS_INC(mib2.icmpinmsgs);

  iphdr_in = ip4_current_header();
 8033f42:	4b8f      	ldr	r3, [pc, #572]	; (8034180 <icmp_input+0x258>)
 8033f44:	689b      	ldr	r3, [r3, #8]
 8033f46:	627b      	str	r3, [r7, #36]	; 0x24
  hlen = IPH_HL_BYTES(iphdr_in);
 8033f48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8033f4a:	781b      	ldrb	r3, [r3, #0]
 8033f4c:	f003 030f 	and.w	r3, r3, #15
 8033f50:	b2db      	uxtb	r3, r3
 8033f52:	009b      	lsls	r3, r3, #2
 8033f54:	b2db      	uxtb	r3, r3
 8033f56:	847b      	strh	r3, [r7, #34]	; 0x22
  if (hlen < IP_HLEN) {
 8033f58:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8033f5a:	2b13      	cmp	r3, #19
 8033f5c:	f240 80e6 	bls.w	803412c <icmp_input+0x204>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short IP header (%"S16_F" bytes) received\n", hlen));
    goto lenerr;
  }
  if (p->len < sizeof(u16_t) * 2) {
 8033f60:	687b      	ldr	r3, [r7, #4]
 8033f62:	895b      	ldrh	r3, [r3, #10]
 8033f64:	2b03      	cmp	r3, #3
 8033f66:	f240 80e3 	bls.w	8034130 <icmp_input+0x208>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short ICMP (%"U16_F" bytes) received\n", p->tot_len));
    goto lenerr;
  }

  type = *((u8_t *)p->payload);
 8033f6a:	687b      	ldr	r3, [r7, #4]
 8033f6c:	685b      	ldr	r3, [r3, #4]
 8033f6e:	781b      	ldrb	r3, [r3, #0]
 8033f70:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
#ifdef LWIP_DEBUG
  code = *(((u8_t *)p->payload) + 1);
  /* if debug is enabled but debug statement below is somehow disabled: */
  LWIP_UNUSED_ARG(code);
#endif /* LWIP_DEBUG */
  switch (type) {
 8033f74:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8033f78:	2b00      	cmp	r3, #0
 8033f7a:	f000 80d0 	beq.w	803411e <icmp_input+0x1f6>
 8033f7e:	2b08      	cmp	r3, #8
 8033f80:	f040 80bc 	bne.w	80340fc <icmp_input+0x1d4>
         (as obviously, an echo request has been sent, too). */
      MIB2_STATS_INC(mib2.icmpinechoreps);
      break;
    case ICMP_ECHO:
      MIB2_STATS_INC(mib2.icmpinechos);
      src = ip4_current_dest_addr();
 8033f84:	4b7f      	ldr	r3, [pc, #508]	; (8034184 <icmp_input+0x25c>)
 8033f86:	61fb      	str	r3, [r7, #28]
      /* multicast destination address? */
      if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8033f88:	4b7d      	ldr	r3, [pc, #500]	; (8034180 <icmp_input+0x258>)
 8033f8a:	695b      	ldr	r3, [r3, #20]
 8033f8c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8033f90:	2be0      	cmp	r3, #224	; 0xe0
 8033f92:	f000 80dc 	beq.w	803414e <icmp_input+0x226>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to multicast pings\n"));
        goto icmperr;
#endif /* LWIP_MULTICAST_PING */
      }
      /* broadcast destination address? */
      if (ip4_addr_isbroadcast(ip4_current_dest_addr(), ip_current_netif())) {
 8033f96:	4b7a      	ldr	r3, [pc, #488]	; (8034180 <icmp_input+0x258>)
 8033f98:	695b      	ldr	r3, [r3, #20]
 8033f9a:	4a79      	ldr	r2, [pc, #484]	; (8034180 <icmp_input+0x258>)
 8033f9c:	6812      	ldr	r2, [r2, #0]
 8033f9e:	4611      	mov	r1, r2
 8033fa0:	4618      	mov	r0, r3
 8033fa2:	f000 fc95 	bl	80348d0 <ip4_addr_isbroadcast_u32>
 8033fa6:	4603      	mov	r3, r0
 8033fa8:	2b00      	cmp	r3, #0
 8033faa:	f040 80d2 	bne.w	8034152 <icmp_input+0x22a>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to broadcast pings\n"));
        goto icmperr;
#endif /* LWIP_BROADCAST_PING */
      }
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ping\n"));
      if (p->tot_len < sizeof(struct icmp_echo_hdr)) {
 8033fae:	687b      	ldr	r3, [r7, #4]
 8033fb0:	891b      	ldrh	r3, [r3, #8]
 8033fb2:	2b07      	cmp	r3, #7
 8033fb4:	f240 80be 	bls.w	8034134 <icmp_input+0x20c>
          return;
        }
      }
#endif
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN
      if (pbuf_add_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 8033fb8:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8033fba:	330e      	adds	r3, #14
 8033fbc:	4619      	mov	r1, r3
 8033fbe:	6878      	ldr	r0, [r7, #4]
 8033fc0:	f7f7 fed6 	bl	802bd70 <pbuf_add_header>
 8033fc4:	4603      	mov	r3, r0
 8033fc6:	2b00      	cmp	r3, #0
 8033fc8:	d04b      	beq.n	8034062 <icmp_input+0x13a>
        /* p is not big enough to contain link headers
         * allocate a new one and copy p into it
         */
        struct pbuf *r;
        u16_t alloc_len = (u16_t)(p->tot_len + hlen);
 8033fca:	687b      	ldr	r3, [r7, #4]
 8033fcc:	891a      	ldrh	r2, [r3, #8]
 8033fce:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8033fd0:	4413      	add	r3, r2
 8033fd2:	837b      	strh	r3, [r7, #26]
        if (alloc_len < p->tot_len) {
 8033fd4:	687b      	ldr	r3, [r7, #4]
 8033fd6:	891b      	ldrh	r3, [r3, #8]
 8033fd8:	8b7a      	ldrh	r2, [r7, #26]
 8033fda:	429a      	cmp	r2, r3
 8033fdc:	f0c0 80bb 	bcc.w	8034156 <icmp_input+0x22e>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed (tot_len overflow)\n"));
          goto icmperr;
        }
        /* allocate new packet buffer with space for link headers */
        r = pbuf_alloc(PBUF_LINK, alloc_len, PBUF_RAM);
 8033fe0:	8b7b      	ldrh	r3, [r7, #26]
 8033fe2:	f44f 7220 	mov.w	r2, #640	; 0x280
 8033fe6:	4619      	mov	r1, r3
 8033fe8:	200e      	movs	r0, #14
 8033fea:	f7f7 fc73 	bl	802b8d4 <pbuf_alloc>
 8033fee:	6178      	str	r0, [r7, #20]
        if (r == NULL) {
 8033ff0:	697b      	ldr	r3, [r7, #20]
 8033ff2:	2b00      	cmp	r3, #0
 8033ff4:	f000 80b1 	beq.w	803415a <icmp_input+0x232>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed\n"));
          goto icmperr;
        }
        if (r->len < hlen + sizeof(struct icmp_echo_hdr)) {
 8033ff8:	697b      	ldr	r3, [r7, #20]
 8033ffa:	895b      	ldrh	r3, [r3, #10]
 8033ffc:	461a      	mov	r2, r3
 8033ffe:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8034000:	3308      	adds	r3, #8
 8034002:	429a      	cmp	r2, r3
 8034004:	d203      	bcs.n	803400e <icmp_input+0xe6>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("first pbuf cannot hold the ICMP header"));
          pbuf_free(r);
 8034006:	6978      	ldr	r0, [r7, #20]
 8034008:	f7f7 ff48 	bl	802be9c <pbuf_free>
          goto icmperr;
 803400c:	e0a6      	b.n	803415c <icmp_input+0x234>
        }
        /* copy the ip header */
        MEMCPY(r->payload, iphdr_in, hlen);
 803400e:	697b      	ldr	r3, [r7, #20]
 8034010:	685b      	ldr	r3, [r3, #4]
 8034012:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8034014:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8034016:	4618      	mov	r0, r3
 8034018:	f001 ffae 	bl	8035f78 <memcpy>
        /* switch r->payload back to icmp header (cannot fail) */
        if (pbuf_remove_header(r, hlen)) {
 803401c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 803401e:	4619      	mov	r1, r3
 8034020:	6978      	ldr	r0, [r7, #20]
 8034022:	f7f7 feb5 	bl	802bd90 <pbuf_remove_header>
 8034026:	4603      	mov	r3, r0
 8034028:	2b00      	cmp	r3, #0
 803402a:	d009      	beq.n	8034040 <icmp_input+0x118>
          LWIP_ASSERT("icmp_input: moving r->payload to icmp header failed\n", 0);
 803402c:	4b56      	ldr	r3, [pc, #344]	; (8034188 <icmp_input+0x260>)
 803402e:	22b6      	movs	r2, #182	; 0xb6
 8034030:	4956      	ldr	r1, [pc, #344]	; (803418c <icmp_input+0x264>)
 8034032:	4857      	ldr	r0, [pc, #348]	; (8034190 <icmp_input+0x268>)
 8034034:	f002 f8b0 	bl	8036198 <iprintf>
          pbuf_free(r);
 8034038:	6978      	ldr	r0, [r7, #20]
 803403a:	f7f7 ff2f 	bl	802be9c <pbuf_free>
          goto icmperr;
 803403e:	e08d      	b.n	803415c <icmp_input+0x234>
        }
        /* copy the rest of the packet without ip header */
        if (pbuf_copy(r, p) != ERR_OK) {
 8034040:	6879      	ldr	r1, [r7, #4]
 8034042:	6978      	ldr	r0, [r7, #20]
 8034044:	f7f8 f84e 	bl	802c0e4 <pbuf_copy>
 8034048:	4603      	mov	r3, r0
 803404a:	2b00      	cmp	r3, #0
 803404c:	d003      	beq.n	8034056 <icmp_input+0x12e>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("icmp_input: copying to new pbuf failed"));
          pbuf_free(r);
 803404e:	6978      	ldr	r0, [r7, #20]
 8034050:	f7f7 ff24 	bl	802be9c <pbuf_free>
          goto icmperr;
 8034054:	e082      	b.n	803415c <icmp_input+0x234>
        }
        /* free the original p */
        pbuf_free(p);
 8034056:	6878      	ldr	r0, [r7, #4]
 8034058:	f7f7 ff20 	bl	802be9c <pbuf_free>
        /* we now have an identical copy of p that has room for link headers */
        p = r;
 803405c:	697b      	ldr	r3, [r7, #20]
 803405e:	607b      	str	r3, [r7, #4]
 8034060:	e00f      	b.n	8034082 <icmp_input+0x15a>
      } else {
        /* restore p->payload to point to icmp header (cannot fail) */
        if (pbuf_remove_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 8034062:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8034064:	330e      	adds	r3, #14
 8034066:	4619      	mov	r1, r3
 8034068:	6878      	ldr	r0, [r7, #4]
 803406a:	f7f7 fe91 	bl	802bd90 <pbuf_remove_header>
 803406e:	4603      	mov	r3, r0
 8034070:	2b00      	cmp	r3, #0
 8034072:	d006      	beq.n	8034082 <icmp_input+0x15a>
          LWIP_ASSERT("icmp_input: restoring original p->payload failed\n", 0);
 8034074:	4b44      	ldr	r3, [pc, #272]	; (8034188 <icmp_input+0x260>)
 8034076:	22c7      	movs	r2, #199	; 0xc7
 8034078:	4946      	ldr	r1, [pc, #280]	; (8034194 <icmp_input+0x26c>)
 803407a:	4845      	ldr	r0, [pc, #276]	; (8034190 <icmp_input+0x268>)
 803407c:	f002 f88c 	bl	8036198 <iprintf>
          goto icmperr;
 8034080:	e06c      	b.n	803415c <icmp_input+0x234>
      }
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN */
      /* At this point, all checks are OK. */
      /* We generate an answer by switching the dest and src ip addresses,
       * setting the icmp type to ECHO_RESPONSE and updating the checksum. */
      iecho = (struct icmp_echo_hdr *)p->payload;
 8034082:	687b      	ldr	r3, [r7, #4]
 8034084:	685b      	ldr	r3, [r3, #4]
 8034086:	613b      	str	r3, [r7, #16]
      if (pbuf_add_header(p, hlen)) {
 8034088:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 803408a:	4619      	mov	r1, r3
 803408c:	6878      	ldr	r0, [r7, #4]
 803408e:	f7f7 fe6f 	bl	802bd70 <pbuf_add_header>
 8034092:	4603      	mov	r3, r0
 8034094:	2b00      	cmp	r3, #0
 8034096:	d144      	bne.n	8034122 <icmp_input+0x1fa>
        LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("Can't move over header in packet"));
      } else {
        err_t ret;
        struct ip_hdr *iphdr = (struct ip_hdr *)p->payload;
 8034098:	687b      	ldr	r3, [r7, #4]
 803409a:	685b      	ldr	r3, [r3, #4]
 803409c:	60fb      	str	r3, [r7, #12]
        ip4_addr_copy(iphdr->src, *src);
 803409e:	69fb      	ldr	r3, [r7, #28]
 80340a0:	681a      	ldr	r2, [r3, #0]
 80340a2:	68fb      	ldr	r3, [r7, #12]
 80340a4:	60da      	str	r2, [r3, #12]
        ip4_addr_copy(iphdr->dest, *ip4_current_src_addr());
 80340a6:	4b36      	ldr	r3, [pc, #216]	; (8034180 <icmp_input+0x258>)
 80340a8:	691a      	ldr	r2, [r3, #16]
 80340aa:	68fb      	ldr	r3, [r7, #12]
 80340ac:	611a      	str	r2, [r3, #16]
        ICMPH_TYPE_SET(iecho, ICMP_ER);
 80340ae:	693b      	ldr	r3, [r7, #16]
 80340b0:	2200      	movs	r2, #0
 80340b2:	701a      	strb	r2, [r3, #0]
        else {
          iecho->chksum = 0;
        }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF */
#else /* CHECKSUM_GEN_ICMP */
        iecho->chksum = 0;
 80340b4:	693b      	ldr	r3, [r7, #16]
 80340b6:	2200      	movs	r2, #0
 80340b8:	709a      	strb	r2, [r3, #2]
 80340ba:	2200      	movs	r2, #0
 80340bc:	70da      	strb	r2, [r3, #3]
#endif /* CHECKSUM_GEN_ICMP */

        /* Set the correct TTL and recalculate the header checksum. */
        IPH_TTL_SET(iphdr, ICMP_TTL);
 80340be:	68fb      	ldr	r3, [r7, #12]
 80340c0:	22ff      	movs	r2, #255	; 0xff
 80340c2:	721a      	strb	r2, [r3, #8]
        IPH_CHKSUM_SET(iphdr, 0);
 80340c4:	68fb      	ldr	r3, [r7, #12]
 80340c6:	2200      	movs	r2, #0
 80340c8:	729a      	strb	r2, [r3, #10]
 80340ca:	2200      	movs	r2, #0
 80340cc:	72da      	strb	r2, [r3, #11]
        IF__NETIF_CHECKSUM_ENABLED(inp, NETIF_CHECKSUM_GEN_IP) {
          IPH_CHKSUM_SET(iphdr, inet_chksum(iphdr, hlen));
        }
#endif /* CHECKSUM_GEN_IP */

        ICMP_STATS_INC(icmp.xmit);
 80340ce:	4b2b      	ldr	r3, [pc, #172]	; (803417c <icmp_input+0x254>)
 80340d0:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80340d4:	3301      	adds	r3, #1
 80340d6:	b29a      	uxth	r2, r3
 80340d8:	4b28      	ldr	r3, [pc, #160]	; (803417c <icmp_input+0x254>)
 80340da:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
        MIB2_STATS_INC(mib2.icmpoutmsgs);
        /* increase number of echo replies attempted to send */
        MIB2_STATS_INC(mib2.icmpoutechoreps);

        /* send an ICMP packet */
        ret = ip4_output_if(p, src, LWIP_IP_HDRINCL,
 80340de:	683b      	ldr	r3, [r7, #0]
 80340e0:	9302      	str	r3, [sp, #8]
 80340e2:	2301      	movs	r3, #1
 80340e4:	9301      	str	r3, [sp, #4]
 80340e6:	2300      	movs	r3, #0
 80340e8:	9300      	str	r3, [sp, #0]
 80340ea:	23ff      	movs	r3, #255	; 0xff
 80340ec:	2200      	movs	r2, #0
 80340ee:	69f9      	ldr	r1, [r7, #28]
 80340f0:	6878      	ldr	r0, [r7, #4]
 80340f2:	f000 fafb 	bl	80346ec <ip4_output_if>
 80340f6:	4603      	mov	r3, r0
 80340f8:	72fb      	strb	r3, [r7, #11]
                            ICMP_TTL, 0, IP_PROTO_ICMP, inp);
        if (ret != ERR_OK) {
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ip_output_if returned an error: %s\n", lwip_strerr(ret)));
        }
      }
      break;
 80340fa:	e012      	b.n	8034122 <icmp_input+0x1fa>
      } else if (type == ICMP_AMR) {
        MIB2_STATS_INC(mib2.icmpinaddrmaskreps);
      }
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ICMP type %"S16_F" code %"S16_F" not supported.\n",
                               (s16_t)type, (s16_t)code));
      ICMP_STATS_INC(icmp.proterr);
 80340fc:	4b1f      	ldr	r3, [pc, #124]	; (803417c <icmp_input+0x254>)
 80340fe:	f8b3 3070 	ldrh.w	r3, [r3, #112]	; 0x70
 8034102:	3301      	adds	r3, #1
 8034104:	b29a      	uxth	r2, r3
 8034106:	4b1d      	ldr	r3, [pc, #116]	; (803417c <icmp_input+0x254>)
 8034108:	f8a3 2070 	strh.w	r2, [r3, #112]	; 0x70
      ICMP_STATS_INC(icmp.drop);
 803410c:	4b1b      	ldr	r3, [pc, #108]	; (803417c <icmp_input+0x254>)
 803410e:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8034112:	3301      	adds	r3, #1
 8034114:	b29a      	uxth	r2, r3
 8034116:	4b19      	ldr	r3, [pc, #100]	; (803417c <icmp_input+0x254>)
 8034118:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
 803411c:	e002      	b.n	8034124 <icmp_input+0x1fc>
      break;
 803411e:	bf00      	nop
 8034120:	e000      	b.n	8034124 <icmp_input+0x1fc>
      break;
 8034122:	bf00      	nop
  }
  pbuf_free(p);
 8034124:	6878      	ldr	r0, [r7, #4]
 8034126:	f7f7 feb9 	bl	802be9c <pbuf_free>
  return;
 803412a:	e023      	b.n	8034174 <icmp_input+0x24c>
    goto lenerr;
 803412c:	bf00      	nop
 803412e:	e002      	b.n	8034136 <icmp_input+0x20e>
    goto lenerr;
 8034130:	bf00      	nop
 8034132:	e000      	b.n	8034136 <icmp_input+0x20e>
        goto lenerr;
 8034134:	bf00      	nop
lenerr:
  pbuf_free(p);
 8034136:	6878      	ldr	r0, [r7, #4]
 8034138:	f7f7 feb0 	bl	802be9c <pbuf_free>
  ICMP_STATS_INC(icmp.lenerr);
 803413c:	4b0f      	ldr	r3, [pc, #60]	; (803417c <icmp_input+0x254>)
 803413e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8034142:	3301      	adds	r3, #1
 8034144:	b29a      	uxth	r2, r3
 8034146:	4b0d      	ldr	r3, [pc, #52]	; (803417c <icmp_input+0x254>)
 8034148:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 803414c:	e012      	b.n	8034174 <icmp_input+0x24c>
        goto icmperr;
 803414e:	bf00      	nop
 8034150:	e004      	b.n	803415c <icmp_input+0x234>
        goto icmperr;
 8034152:	bf00      	nop
 8034154:	e002      	b.n	803415c <icmp_input+0x234>
          goto icmperr;
 8034156:	bf00      	nop
 8034158:	e000      	b.n	803415c <icmp_input+0x234>
          goto icmperr;
 803415a:	bf00      	nop
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING
icmperr:
  pbuf_free(p);
 803415c:	6878      	ldr	r0, [r7, #4]
 803415e:	f7f7 fe9d 	bl	802be9c <pbuf_free>
  ICMP_STATS_INC(icmp.err);
 8034162:	4b06      	ldr	r3, [pc, #24]	; (803417c <icmp_input+0x254>)
 8034164:	f8b3 3074 	ldrh.w	r3, [r3, #116]	; 0x74
 8034168:	3301      	adds	r3, #1
 803416a:	b29a      	uxth	r2, r3
 803416c:	4b03      	ldr	r3, [pc, #12]	; (803417c <icmp_input+0x254>)
 803416e:	f8a3 2074 	strh.w	r2, [r3, #116]	; 0x74
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 8034172:	bf00      	nop
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING */
}
 8034174:	3728      	adds	r7, #40	; 0x28
 8034176:	46bd      	mov	sp, r7
 8034178:	bd80      	pop	{r7, pc}
 803417a:	bf00      	nop
 803417c:	2000ed10 	.word	0x2000ed10
 8034180:	2000b28c 	.word	0x2000b28c
 8034184:	2000b2a0 	.word	0x2000b2a0
 8034188:	0803a608 	.word	0x0803a608
 803418c:	0803a640 	.word	0x0803a640
 8034190:	0803a678 	.word	0x0803a678
 8034194:	0803a6a0 	.word	0x0803a6a0

08034198 <icmp_dest_unreach>:
 *          p->payload pointing to the IP header
 * @param t type of the 'unreachable' packet
 */
void
icmp_dest_unreach(struct pbuf *p, enum icmp_dur_type t)
{
 8034198:	b580      	push	{r7, lr}
 803419a:	b082      	sub	sp, #8
 803419c:	af00      	add	r7, sp, #0
 803419e:	6078      	str	r0, [r7, #4]
 80341a0:	460b      	mov	r3, r1
 80341a2:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpoutdestunreachs);
  icmp_send_response(p, ICMP_DUR, t);
 80341a4:	78fb      	ldrb	r3, [r7, #3]
 80341a6:	461a      	mov	r2, r3
 80341a8:	2103      	movs	r1, #3
 80341aa:	6878      	ldr	r0, [r7, #4]
 80341ac:	f000 f814 	bl	80341d8 <icmp_send_response>
}
 80341b0:	bf00      	nop
 80341b2:	3708      	adds	r7, #8
 80341b4:	46bd      	mov	sp, r7
 80341b6:	bd80      	pop	{r7, pc}

080341b8 <icmp_time_exceeded>:
 *          p->payload pointing to the IP header
 * @param t type of the 'time exceeded' packet
 */
void
icmp_time_exceeded(struct pbuf *p, enum icmp_te_type t)
{
 80341b8:	b580      	push	{r7, lr}
 80341ba:	b082      	sub	sp, #8
 80341bc:	af00      	add	r7, sp, #0
 80341be:	6078      	str	r0, [r7, #4]
 80341c0:	460b      	mov	r3, r1
 80341c2:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpouttimeexcds);
  icmp_send_response(p, ICMP_TE, t);
 80341c4:	78fb      	ldrb	r3, [r7, #3]
 80341c6:	461a      	mov	r2, r3
 80341c8:	210b      	movs	r1, #11
 80341ca:	6878      	ldr	r0, [r7, #4]
 80341cc:	f000 f804 	bl	80341d8 <icmp_send_response>
}
 80341d0:	bf00      	nop
 80341d2:	3708      	adds	r7, #8
 80341d4:	46bd      	mov	sp, r7
 80341d6:	bd80      	pop	{r7, pc}

080341d8 <icmp_send_response>:
 * @param type Type of the ICMP header
 * @param code Code of the ICMP header
 */
static void
icmp_send_response(struct pbuf *p, u8_t type, u8_t code)
{
 80341d8:	b580      	push	{r7, lr}
 80341da:	b08c      	sub	sp, #48	; 0x30
 80341dc:	af04      	add	r7, sp, #16
 80341de:	6078      	str	r0, [r7, #4]
 80341e0:	460b      	mov	r3, r1
 80341e2:	70fb      	strb	r3, [r7, #3]
 80341e4:	4613      	mov	r3, r2
 80341e6:	70bb      	strb	r3, [r7, #2]

  /* increase number of messages attempted to send */
  MIB2_STATS_INC(mib2.icmpoutmsgs);

  /* ICMP header + IP header + 8 bytes of data */
  q = pbuf_alloc(PBUF_IP, sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE,
 80341e8:	f44f 7220 	mov.w	r2, #640	; 0x280
 80341ec:	2124      	movs	r1, #36	; 0x24
 80341ee:	2022      	movs	r0, #34	; 0x22
 80341f0:	f7f7 fb70 	bl	802b8d4 <pbuf_alloc>
 80341f4:	61f8      	str	r0, [r7, #28]
                 PBUF_RAM);
  if (q == NULL) {
 80341f6:	69fb      	ldr	r3, [r7, #28]
 80341f8:	2b00      	cmp	r3, #0
 80341fa:	d054      	beq.n	80342a6 <icmp_send_response+0xce>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_time_exceeded: failed to allocate pbuf for ICMP packet.\n"));
    MIB2_STATS_INC(mib2.icmpouterrors);
    return;
  }
  LWIP_ASSERT("check that first pbuf can hold icmp message",
 80341fc:	69fb      	ldr	r3, [r7, #28]
 80341fe:	895b      	ldrh	r3, [r3, #10]
 8034200:	2b23      	cmp	r3, #35	; 0x23
 8034202:	d806      	bhi.n	8034212 <icmp_send_response+0x3a>
 8034204:	4b2a      	ldr	r3, [pc, #168]	; (80342b0 <icmp_send_response+0xd8>)
 8034206:	f44f 72b4 	mov.w	r2, #360	; 0x168
 803420a:	492a      	ldr	r1, [pc, #168]	; (80342b4 <icmp_send_response+0xdc>)
 803420c:	482a      	ldr	r0, [pc, #168]	; (80342b8 <icmp_send_response+0xe0>)
 803420e:	f001 ffc3 	bl	8036198 <iprintf>
              (q->len >= (sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE)));

  iphdr = (struct ip_hdr *)p->payload;
 8034212:	687b      	ldr	r3, [r7, #4]
 8034214:	685b      	ldr	r3, [r3, #4]
 8034216:	61bb      	str	r3, [r7, #24]
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->src);
  LWIP_DEBUGF(ICMP_DEBUG, (" to "));
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->dest);
  LWIP_DEBUGF(ICMP_DEBUG, ("\n"));

  icmphdr = (struct icmp_echo_hdr *)q->payload;
 8034218:	69fb      	ldr	r3, [r7, #28]
 803421a:	685b      	ldr	r3, [r3, #4]
 803421c:	617b      	str	r3, [r7, #20]
  icmphdr->type = type;
 803421e:	697b      	ldr	r3, [r7, #20]
 8034220:	78fa      	ldrb	r2, [r7, #3]
 8034222:	701a      	strb	r2, [r3, #0]
  icmphdr->code = code;
 8034224:	697b      	ldr	r3, [r7, #20]
 8034226:	78ba      	ldrb	r2, [r7, #2]
 8034228:	705a      	strb	r2, [r3, #1]
  icmphdr->id = 0;
 803422a:	697b      	ldr	r3, [r7, #20]
 803422c:	2200      	movs	r2, #0
 803422e:	711a      	strb	r2, [r3, #4]
 8034230:	2200      	movs	r2, #0
 8034232:	715a      	strb	r2, [r3, #5]
  icmphdr->seqno = 0;
 8034234:	697b      	ldr	r3, [r7, #20]
 8034236:	2200      	movs	r2, #0
 8034238:	719a      	strb	r2, [r3, #6]
 803423a:	2200      	movs	r2, #0
 803423c:	71da      	strb	r2, [r3, #7]

  /* copy fields from original packet */
  SMEMCPY((u8_t *)q->payload + sizeof(struct icmp_echo_hdr), (u8_t *)p->payload,
 803423e:	69fb      	ldr	r3, [r7, #28]
 8034240:	685b      	ldr	r3, [r3, #4]
 8034242:	f103 0008 	add.w	r0, r3, #8
 8034246:	687b      	ldr	r3, [r7, #4]
 8034248:	685b      	ldr	r3, [r3, #4]
 803424a:	221c      	movs	r2, #28
 803424c:	4619      	mov	r1, r3
 803424e:	f001 fe93 	bl	8035f78 <memcpy>
          IP_HLEN + ICMP_DEST_UNREACH_DATASIZE);

  ip4_addr_copy(iphdr_src, iphdr->src);
 8034252:	69bb      	ldr	r3, [r7, #24]
 8034254:	68db      	ldr	r3, [r3, #12]
 8034256:	60fb      	str	r3, [r7, #12]
    ip4_addr_t iphdr_dst;
    ip4_addr_copy(iphdr_dst, iphdr->dest);
    netif = ip4_route_src(&iphdr_dst, &iphdr_src);
  }
#else
  netif = ip4_route(&iphdr_src);
 8034258:	f107 030c 	add.w	r3, r7, #12
 803425c:	4618      	mov	r0, r3
 803425e:	f000 f82f 	bl	80342c0 <ip4_route>
 8034262:	6138      	str	r0, [r7, #16]
#endif
  if (netif != NULL) {
 8034264:	693b      	ldr	r3, [r7, #16]
 8034266:	2b00      	cmp	r3, #0
 8034268:	d019      	beq.n	803429e <icmp_send_response+0xc6>
    /* calculate checksum */
    icmphdr->chksum = 0;
 803426a:	697b      	ldr	r3, [r7, #20]
 803426c:	2200      	movs	r2, #0
 803426e:	709a      	strb	r2, [r3, #2]
 8034270:	2200      	movs	r2, #0
 8034272:	70da      	strb	r2, [r3, #3]
#if CHECKSUM_GEN_ICMP
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_ICMP) {
      icmphdr->chksum = inet_chksum(icmphdr, q->len);
    }
#endif
    ICMP_STATS_INC(icmp.xmit);
 8034274:	4b11      	ldr	r3, [pc, #68]	; (80342bc <icmp_send_response+0xe4>)
 8034276:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 803427a:	3301      	adds	r3, #1
 803427c:	b29a      	uxth	r2, r3
 803427e:	4b0f      	ldr	r3, [pc, #60]	; (80342bc <icmp_send_response+0xe4>)
 8034280:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
    ip4_output_if(q, NULL, &iphdr_src, ICMP_TTL, 0, IP_PROTO_ICMP, netif);
 8034284:	f107 020c 	add.w	r2, r7, #12
 8034288:	693b      	ldr	r3, [r7, #16]
 803428a:	9302      	str	r3, [sp, #8]
 803428c:	2301      	movs	r3, #1
 803428e:	9301      	str	r3, [sp, #4]
 8034290:	2300      	movs	r3, #0
 8034292:	9300      	str	r3, [sp, #0]
 8034294:	23ff      	movs	r3, #255	; 0xff
 8034296:	2100      	movs	r1, #0
 8034298:	69f8      	ldr	r0, [r7, #28]
 803429a:	f000 fa27 	bl	80346ec <ip4_output_if>
  }
  pbuf_free(q);
 803429e:	69f8      	ldr	r0, [r7, #28]
 80342a0:	f7f7 fdfc 	bl	802be9c <pbuf_free>
 80342a4:	e000      	b.n	80342a8 <icmp_send_response+0xd0>
    return;
 80342a6:	bf00      	nop
}
 80342a8:	3720      	adds	r7, #32
 80342aa:	46bd      	mov	sp, r7
 80342ac:	bd80      	pop	{r7, pc}
 80342ae:	bf00      	nop
 80342b0:	0803a608 	.word	0x0803a608
 80342b4:	0803a6d4 	.word	0x0803a6d4
 80342b8:	0803a678 	.word	0x0803a678
 80342bc:	2000ed10 	.word	0x2000ed10

080342c0 <ip4_route>:
 * @param dest the destination IP address for which to find the route
 * @return the netif on which to send to reach dest
 */
struct netif *
ip4_route(const ip4_addr_t *dest)
{
 80342c0:	b480      	push	{r7}
 80342c2:	b085      	sub	sp, #20
 80342c4:	af00      	add	r7, sp, #0
 80342c6:	6078      	str	r0, [r7, #4]

  /* bug #54569: in case LWIP_SINGLE_NETIF=1 and LWIP_DEBUGF() disabled, the following loop is optimized away */
  LWIP_UNUSED_ARG(dest);

  /* iterate through netifs */
  NETIF_FOREACH(netif) {
 80342c8:	4b37      	ldr	r3, [pc, #220]	; (80343a8 <ip4_route+0xe8>)
 80342ca:	681b      	ldr	r3, [r3, #0]
 80342cc:	60fb      	str	r3, [r7, #12]
 80342ce:	e036      	b.n	803433e <ip4_route+0x7e>
    /* is the netif up, does it have a link and a valid address? */
    if (netif_is_up(netif) && netif_is_link_up(netif) && !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 80342d0:	68fb      	ldr	r3, [r7, #12]
 80342d2:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80342d6:	f003 0301 	and.w	r3, r3, #1
 80342da:	b2db      	uxtb	r3, r3
 80342dc:	2b00      	cmp	r3, #0
 80342de:	d02b      	beq.n	8034338 <ip4_route+0x78>
 80342e0:	68fb      	ldr	r3, [r7, #12]
 80342e2:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80342e6:	089b      	lsrs	r3, r3, #2
 80342e8:	f003 0301 	and.w	r3, r3, #1
 80342ec:	b2db      	uxtb	r3, r3
 80342ee:	2b00      	cmp	r3, #0
 80342f0:	d022      	beq.n	8034338 <ip4_route+0x78>
 80342f2:	68fb      	ldr	r3, [r7, #12]
 80342f4:	3304      	adds	r3, #4
 80342f6:	681b      	ldr	r3, [r3, #0]
 80342f8:	2b00      	cmp	r3, #0
 80342fa:	d01d      	beq.n	8034338 <ip4_route+0x78>
      /* network mask matches? */
      if (ip4_addr_netcmp(dest, netif_ip4_addr(netif), netif_ip4_netmask(netif))) {
 80342fc:	687b      	ldr	r3, [r7, #4]
 80342fe:	681a      	ldr	r2, [r3, #0]
 8034300:	68fb      	ldr	r3, [r7, #12]
 8034302:	3304      	adds	r3, #4
 8034304:	681b      	ldr	r3, [r3, #0]
 8034306:	405a      	eors	r2, r3
 8034308:	68fb      	ldr	r3, [r7, #12]
 803430a:	3308      	adds	r3, #8
 803430c:	681b      	ldr	r3, [r3, #0]
 803430e:	4013      	ands	r3, r2
 8034310:	2b00      	cmp	r3, #0
 8034312:	d101      	bne.n	8034318 <ip4_route+0x58>
        /* return netif on which to forward IP packet */
        return netif;
 8034314:	68fb      	ldr	r3, [r7, #12]
 8034316:	e040      	b.n	803439a <ip4_route+0xda>
      }
      /* gateway matches on a non broadcast interface? (i.e. peer in a point to point interface) */
      if (((netif->flags & NETIF_FLAG_BROADCAST) == 0) && ip4_addr_cmp(dest, netif_ip4_gw(netif))) {
 8034318:	68fb      	ldr	r3, [r7, #12]
 803431a:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 803431e:	f003 0302 	and.w	r3, r3, #2
 8034322:	2b00      	cmp	r3, #0
 8034324:	d108      	bne.n	8034338 <ip4_route+0x78>
 8034326:	687b      	ldr	r3, [r7, #4]
 8034328:	681a      	ldr	r2, [r3, #0]
 803432a:	68fb      	ldr	r3, [r7, #12]
 803432c:	330c      	adds	r3, #12
 803432e:	681b      	ldr	r3, [r3, #0]
 8034330:	429a      	cmp	r2, r3
 8034332:	d101      	bne.n	8034338 <ip4_route+0x78>
        /* return netif on which to forward IP packet */
        return netif;
 8034334:	68fb      	ldr	r3, [r7, #12]
 8034336:	e030      	b.n	803439a <ip4_route+0xda>
  NETIF_FOREACH(netif) {
 8034338:	68fb      	ldr	r3, [r7, #12]
 803433a:	681b      	ldr	r3, [r3, #0]
 803433c:	60fb      	str	r3, [r7, #12]
 803433e:	68fb      	ldr	r3, [r7, #12]
 8034340:	2b00      	cmp	r3, #0
 8034342:	d1c5      	bne.n	80342d0 <ip4_route+0x10>
    return netif;
  }
#endif
#endif /* !LWIP_SINGLE_NETIF */

  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 8034344:	4b19      	ldr	r3, [pc, #100]	; (80343ac <ip4_route+0xec>)
 8034346:	681b      	ldr	r3, [r3, #0]
 8034348:	2b00      	cmp	r3, #0
 803434a:	d01a      	beq.n	8034382 <ip4_route+0xc2>
 803434c:	4b17      	ldr	r3, [pc, #92]	; (80343ac <ip4_route+0xec>)
 803434e:	681b      	ldr	r3, [r3, #0]
 8034350:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8034354:	f003 0301 	and.w	r3, r3, #1
 8034358:	2b00      	cmp	r3, #0
 803435a:	d012      	beq.n	8034382 <ip4_route+0xc2>
 803435c:	4b13      	ldr	r3, [pc, #76]	; (80343ac <ip4_route+0xec>)
 803435e:	681b      	ldr	r3, [r3, #0]
 8034360:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8034364:	f003 0304 	and.w	r3, r3, #4
 8034368:	2b00      	cmp	r3, #0
 803436a:	d00a      	beq.n	8034382 <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 803436c:	4b0f      	ldr	r3, [pc, #60]	; (80343ac <ip4_route+0xec>)
 803436e:	681b      	ldr	r3, [r3, #0]
 8034370:	3304      	adds	r3, #4
 8034372:	681b      	ldr	r3, [r3, #0]
  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 8034374:	2b00      	cmp	r3, #0
 8034376:	d004      	beq.n	8034382 <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 8034378:	687b      	ldr	r3, [r7, #4]
 803437a:	681b      	ldr	r3, [r3, #0]
 803437c:	b2db      	uxtb	r3, r3
 803437e:	2b7f      	cmp	r3, #127	; 0x7f
 8034380:	d109      	bne.n	8034396 <ip4_route+0xd6>
    /* No matching netif found and default netif is not usable.
       If this is not good enough for you, use LWIP_HOOK_IP4_ROUTE() */
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_route: No route to %"U16_F".%"U16_F".%"U16_F".%"U16_F"\n",
                ip4_addr1_16(dest), ip4_addr2_16(dest), ip4_addr3_16(dest), ip4_addr4_16(dest)));
    IP_STATS_INC(ip.rterr);
 8034382:	4b0b      	ldr	r3, [pc, #44]	; (80343b0 <ip4_route+0xf0>)
 8034384:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8034388:	3301      	adds	r3, #1
 803438a:	b29a      	uxth	r2, r3
 803438c:	4b08      	ldr	r3, [pc, #32]	; (80343b0 <ip4_route+0xf0>)
 803438e:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    MIB2_STATS_INC(mib2.ipoutnoroutes);
    return NULL;
 8034392:	2300      	movs	r3, #0
 8034394:	e001      	b.n	803439a <ip4_route+0xda>
  }

  return netif_default;
 8034396:	4b05      	ldr	r3, [pc, #20]	; (80343ac <ip4_route+0xec>)
 8034398:	681b      	ldr	r3, [r3, #0]
}
 803439a:	4618      	mov	r0, r3
 803439c:	3714      	adds	r7, #20
 803439e:	46bd      	mov	sp, r7
 80343a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80343a4:	4770      	bx	lr
 80343a6:	bf00      	nop
 80343a8:	2000ed04 	.word	0x2000ed04
 80343ac:	2000ed08 	.word	0x2000ed08
 80343b0:	2000ed10 	.word	0x2000ed10

080343b4 <ip4_input_accept>:
#endif /* IP_FORWARD */

/** Return true if the current input packet should be accepted on this netif */
static int
ip4_input_accept(struct netif *netif)
{
 80343b4:	b580      	push	{r7, lr}
 80343b6:	b082      	sub	sp, #8
 80343b8:	af00      	add	r7, sp, #0
 80343ba:	6078      	str	r0, [r7, #4]
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(netif_ip4_addr(netif)) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ~ip4_addr_get_u32(netif_ip4_netmask(netif))));

  /* interface is up and configured? */
  if ((netif_is_up(netif)) && (!ip4_addr_isany_val(*netif_ip4_addr(netif)))) {
 80343bc:	687b      	ldr	r3, [r7, #4]
 80343be:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80343c2:	f003 0301 	and.w	r3, r3, #1
 80343c6:	b2db      	uxtb	r3, r3
 80343c8:	2b00      	cmp	r3, #0
 80343ca:	d016      	beq.n	80343fa <ip4_input_accept+0x46>
 80343cc:	687b      	ldr	r3, [r7, #4]
 80343ce:	3304      	adds	r3, #4
 80343d0:	681b      	ldr	r3, [r3, #0]
 80343d2:	2b00      	cmp	r3, #0
 80343d4:	d011      	beq.n	80343fa <ip4_input_accept+0x46>
    /* unicast to this interface address? */
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 80343d6:	4b0b      	ldr	r3, [pc, #44]	; (8034404 <ip4_input_accept+0x50>)
 80343d8:	695a      	ldr	r2, [r3, #20]
 80343da:	687b      	ldr	r3, [r7, #4]
 80343dc:	3304      	adds	r3, #4
 80343de:	681b      	ldr	r3, [r3, #0]
 80343e0:	429a      	cmp	r2, r3
 80343e2:	d008      	beq.n	80343f6 <ip4_input_accept+0x42>
        /* or broadcast on this interface network address? */
        ip4_addr_isbroadcast(ip4_current_dest_addr(), netif)
 80343e4:	4b07      	ldr	r3, [pc, #28]	; (8034404 <ip4_input_accept+0x50>)
 80343e6:	695b      	ldr	r3, [r3, #20]
 80343e8:	6879      	ldr	r1, [r7, #4]
 80343ea:	4618      	mov	r0, r3
 80343ec:	f000 fa70 	bl	80348d0 <ip4_addr_isbroadcast_u32>
 80343f0:	4603      	mov	r3, r0
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 80343f2:	2b00      	cmp	r3, #0
 80343f4:	d001      	beq.n	80343fa <ip4_input_accept+0x46>
#endif /* LWIP_NETIF_LOOPBACK && !LWIP_HAVE_LOOPIF */
       ) {
      LWIP_DEBUGF(IP_DEBUG, ("ip4_input: packet accepted on interface %c%c\n",
                             netif->name[0], netif->name[1]));
      /* accept on this netif */
      return 1;
 80343f6:	2301      	movs	r3, #1
 80343f8:	e000      	b.n	80343fc <ip4_input_accept+0x48>
      /* accept on this netif */
      return 1;
    }
#endif /* LWIP_AUTOIP */
  }
  return 0;
 80343fa:	2300      	movs	r3, #0
}
 80343fc:	4618      	mov	r0, r3
 80343fe:	3708      	adds	r7, #8
 8034400:	46bd      	mov	sp, r7
 8034402:	bd80      	pop	{r7, pc}
 8034404:	2000b28c 	.word	0x2000b28c

08034408 <ip4_input>:
 * @return ERR_OK if the packet was processed (could return ERR_* if it wasn't
 *         processed, but currently always returns ERR_OK)
 */
err_t
ip4_input(struct pbuf *p, struct netif *inp)
{
 8034408:	b580      	push	{r7, lr}
 803440a:	b086      	sub	sp, #24
 803440c:	af00      	add	r7, sp, #0
 803440e:	6078      	str	r0, [r7, #4]
 8034410:	6039      	str	r1, [r7, #0]
  raw_input_state_t raw_status;
#endif /* LWIP_RAW */

  LWIP_ASSERT_CORE_LOCKED();

  IP_STATS_INC(ip.recv);
 8034412:	4b8f      	ldr	r3, [pc, #572]	; (8034650 <ip4_input+0x248>)
 8034414:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 8034418:	3301      	adds	r3, #1
 803441a:	b29a      	uxth	r2, r3
 803441c:	4b8c      	ldr	r3, [pc, #560]	; (8034650 <ip4_input+0x248>)
 803441e:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
  MIB2_STATS_INC(mib2.ipinreceives);

  /* identify the IP header */
  iphdr = (struct ip_hdr *)p->payload;
 8034422:	687b      	ldr	r3, [r7, #4]
 8034424:	685b      	ldr	r3, [r3, #4]
 8034426:	617b      	str	r3, [r7, #20]
  if (IPH_V(iphdr) != 4) {
 8034428:	697b      	ldr	r3, [r7, #20]
 803442a:	781b      	ldrb	r3, [r3, #0]
 803442c:	091b      	lsrs	r3, r3, #4
 803442e:	b2db      	uxtb	r3, r3
 8034430:	2b04      	cmp	r3, #4
 8034432:	d014      	beq.n	803445e <ip4_input+0x56>
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_WARNING, ("IP packet dropped due to bad version number %"U16_F"\n", (u16_t)IPH_V(iphdr)));
    ip4_debug_print(p);
    pbuf_free(p);
 8034434:	6878      	ldr	r0, [r7, #4]
 8034436:	f7f7 fd31 	bl	802be9c <pbuf_free>
    IP_STATS_INC(ip.err);
 803443a:	4b85      	ldr	r3, [pc, #532]	; (8034650 <ip4_input+0x248>)
 803443c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8034440:	3301      	adds	r3, #1
 8034442:	b29a      	uxth	r2, r3
 8034444:	4b82      	ldr	r3, [pc, #520]	; (8034650 <ip4_input+0x248>)
 8034446:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    IP_STATS_INC(ip.drop);
 803444a:	4b81      	ldr	r3, [pc, #516]	; (8034650 <ip4_input+0x248>)
 803444c:	f8b3 304e 	ldrh.w	r3, [r3, #78]	; 0x4e
 8034450:	3301      	adds	r3, #1
 8034452:	b29a      	uxth	r2, r3
 8034454:	4b7e      	ldr	r3, [pc, #504]	; (8034650 <ip4_input+0x248>)
 8034456:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
    MIB2_STATS_INC(mib2.ipinhdrerrors);
    return ERR_OK;
 803445a:	2300      	movs	r3, #0
 803445c:	e13e      	b.n	80346dc <ip4_input+0x2d4>
    return ERR_OK;
  }
#endif

  /* obtain IP header length in bytes */
  iphdr_hlen = IPH_HL_BYTES(iphdr);
 803445e:	697b      	ldr	r3, [r7, #20]
 8034460:	781b      	ldrb	r3, [r3, #0]
 8034462:	f003 030f 	and.w	r3, r3, #15
 8034466:	b2db      	uxtb	r3, r3
 8034468:	009b      	lsls	r3, r3, #2
 803446a:	b2db      	uxtb	r3, r3
 803446c:	81fb      	strh	r3, [r7, #14]
  /* obtain ip length in bytes */
  iphdr_len = lwip_ntohs(IPH_LEN(iphdr));
 803446e:	697b      	ldr	r3, [r7, #20]
 8034470:	885b      	ldrh	r3, [r3, #2]
 8034472:	b29b      	uxth	r3, r3
 8034474:	4618      	mov	r0, r3
 8034476:	f7f6 f84f 	bl	802a518 <lwip_htons>
 803447a:	4603      	mov	r3, r0
 803447c:	81bb      	strh	r3, [r7, #12]

  /* Trim pbuf. This is especially required for packets < 60 bytes. */
  if (iphdr_len < p->tot_len) {
 803447e:	687b      	ldr	r3, [r7, #4]
 8034480:	891b      	ldrh	r3, [r3, #8]
 8034482:	89ba      	ldrh	r2, [r7, #12]
 8034484:	429a      	cmp	r2, r3
 8034486:	d204      	bcs.n	8034492 <ip4_input+0x8a>
    pbuf_realloc(p, iphdr_len);
 8034488:	89bb      	ldrh	r3, [r7, #12]
 803448a:	4619      	mov	r1, r3
 803448c:	6878      	ldr	r0, [r7, #4]
 803448e:	f7f7 fb7f 	bl	802bb90 <pbuf_realloc>
  }

  /* header length exceeds first pbuf length, or ip length exceeds total pbuf length? */
  if ((iphdr_hlen > p->len) || (iphdr_len > p->tot_len) || (iphdr_hlen < IP_HLEN)) {
 8034492:	687b      	ldr	r3, [r7, #4]
 8034494:	895b      	ldrh	r3, [r3, #10]
 8034496:	89fa      	ldrh	r2, [r7, #14]
 8034498:	429a      	cmp	r2, r3
 803449a:	d807      	bhi.n	80344ac <ip4_input+0xa4>
 803449c:	687b      	ldr	r3, [r7, #4]
 803449e:	891b      	ldrh	r3, [r3, #8]
 80344a0:	89ba      	ldrh	r2, [r7, #12]
 80344a2:	429a      	cmp	r2, r3
 80344a4:	d802      	bhi.n	80344ac <ip4_input+0xa4>
 80344a6:	89fb      	ldrh	r3, [r7, #14]
 80344a8:	2b13      	cmp	r3, #19
 80344aa:	d814      	bhi.n	80344d6 <ip4_input+0xce>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                  ("IP (len %"U16_F") is longer than pbuf (len %"U16_F"), IP packet dropped.\n",
                   iphdr_len, p->tot_len));
    }
    /* free (drop) packet pbufs */
    pbuf_free(p);
 80344ac:	6878      	ldr	r0, [r7, #4]
 80344ae:	f7f7 fcf5 	bl	802be9c <pbuf_free>
    IP_STATS_INC(ip.lenerr);
 80344b2:	4b67      	ldr	r3, [pc, #412]	; (8034650 <ip4_input+0x248>)
 80344b4:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80344b8:	3301      	adds	r3, #1
 80344ba:	b29a      	uxth	r2, r3
 80344bc:	4b64      	ldr	r3, [pc, #400]	; (8034650 <ip4_input+0x248>)
 80344be:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    IP_STATS_INC(ip.drop);
 80344c2:	4b63      	ldr	r3, [pc, #396]	; (8034650 <ip4_input+0x248>)
 80344c4:	f8b3 304e 	ldrh.w	r3, [r3, #78]	; 0x4e
 80344c8:	3301      	adds	r3, #1
 80344ca:	b29a      	uxth	r2, r3
 80344cc:	4b60      	ldr	r3, [pc, #384]	; (8034650 <ip4_input+0x248>)
 80344ce:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
    MIB2_STATS_INC(mib2.ipindiscards);
    return ERR_OK;
 80344d2:	2300      	movs	r3, #0
 80344d4:	e102      	b.n	80346dc <ip4_input+0x2d4>
    }
  }
#endif

  /* copy IP addresses to aligned ip_addr_t */
  ip_addr_copy_from_ip4(ip_data.current_iphdr_dest, iphdr->dest);
 80344d6:	697b      	ldr	r3, [r7, #20]
 80344d8:	691b      	ldr	r3, [r3, #16]
 80344da:	4a5e      	ldr	r2, [pc, #376]	; (8034654 <ip4_input+0x24c>)
 80344dc:	6153      	str	r3, [r2, #20]
  ip_addr_copy_from_ip4(ip_data.current_iphdr_src, iphdr->src);
 80344de:	697b      	ldr	r3, [r7, #20]
 80344e0:	68db      	ldr	r3, [r3, #12]
 80344e2:	4a5c      	ldr	r2, [pc, #368]	; (8034654 <ip4_input+0x24c>)
 80344e4:	6113      	str	r3, [r2, #16]

  /* match packet against an interface, i.e. is this packet for us? */
  if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 80344e6:	4b5b      	ldr	r3, [pc, #364]	; (8034654 <ip4_input+0x24c>)
 80344e8:	695b      	ldr	r3, [r3, #20]
 80344ea:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80344ee:	2be0      	cmp	r3, #224	; 0xe0
 80344f0:	d112      	bne.n	8034518 <ip4_input+0x110>
      netif = inp;
    } else {
      netif = NULL;
    }
#else /* LWIP_IGMP */
    if ((netif_is_up(inp)) && (!ip4_addr_isany_val(*netif_ip4_addr(inp)))) {
 80344f2:	683b      	ldr	r3, [r7, #0]
 80344f4:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80344f8:	f003 0301 	and.w	r3, r3, #1
 80344fc:	b2db      	uxtb	r3, r3
 80344fe:	2b00      	cmp	r3, #0
 8034500:	d007      	beq.n	8034512 <ip4_input+0x10a>
 8034502:	683b      	ldr	r3, [r7, #0]
 8034504:	3304      	adds	r3, #4
 8034506:	681b      	ldr	r3, [r3, #0]
 8034508:	2b00      	cmp	r3, #0
 803450a:	d002      	beq.n	8034512 <ip4_input+0x10a>
      netif = inp;
 803450c:	683b      	ldr	r3, [r7, #0]
 803450e:	613b      	str	r3, [r7, #16]
 8034510:	e02a      	b.n	8034568 <ip4_input+0x160>
    } else {
      netif = NULL;
 8034512:	2300      	movs	r3, #0
 8034514:	613b      	str	r3, [r7, #16]
 8034516:	e027      	b.n	8034568 <ip4_input+0x160>
    }
#endif /* LWIP_IGMP */
  } else {
    /* start trying with inp. if that's not acceptable, start walking the
       list of configured netifs. */
    if (ip4_input_accept(inp)) {
 8034518:	6838      	ldr	r0, [r7, #0]
 803451a:	f7ff ff4b 	bl	80343b4 <ip4_input_accept>
 803451e:	4603      	mov	r3, r0
 8034520:	2b00      	cmp	r3, #0
 8034522:	d002      	beq.n	803452a <ip4_input+0x122>
      netif = inp;
 8034524:	683b      	ldr	r3, [r7, #0]
 8034526:	613b      	str	r3, [r7, #16]
 8034528:	e01e      	b.n	8034568 <ip4_input+0x160>
    } else {
      netif = NULL;
 803452a:	2300      	movs	r3, #0
 803452c:	613b      	str	r3, [r7, #16]
#if !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF
      /* Packets sent to the loopback address must not be accepted on an
       * interface that does not have the loopback address assigned to it,
       * unless a non-loopback interface is used for loopback traffic. */
      if (!ip4_addr_isloopback(ip4_current_dest_addr()))
 803452e:	4b49      	ldr	r3, [pc, #292]	; (8034654 <ip4_input+0x24c>)
 8034530:	695b      	ldr	r3, [r3, #20]
 8034532:	b2db      	uxtb	r3, r3
 8034534:	2b7f      	cmp	r3, #127	; 0x7f
 8034536:	d017      	beq.n	8034568 <ip4_input+0x160>
#endif /* !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF */
      {
#if !LWIP_SINGLE_NETIF
        NETIF_FOREACH(netif) {
 8034538:	4b47      	ldr	r3, [pc, #284]	; (8034658 <ip4_input+0x250>)
 803453a:	681b      	ldr	r3, [r3, #0]
 803453c:	613b      	str	r3, [r7, #16]
 803453e:	e00e      	b.n	803455e <ip4_input+0x156>
          if (netif == inp) {
 8034540:	693a      	ldr	r2, [r7, #16]
 8034542:	683b      	ldr	r3, [r7, #0]
 8034544:	429a      	cmp	r2, r3
 8034546:	d006      	beq.n	8034556 <ip4_input+0x14e>
            /* we checked that before already */
            continue;
          }
          if (ip4_input_accept(netif)) {
 8034548:	6938      	ldr	r0, [r7, #16]
 803454a:	f7ff ff33 	bl	80343b4 <ip4_input_accept>
 803454e:	4603      	mov	r3, r0
 8034550:	2b00      	cmp	r3, #0
 8034552:	d108      	bne.n	8034566 <ip4_input+0x15e>
 8034554:	e000      	b.n	8034558 <ip4_input+0x150>
            continue;
 8034556:	bf00      	nop
        NETIF_FOREACH(netif) {
 8034558:	693b      	ldr	r3, [r7, #16]
 803455a:	681b      	ldr	r3, [r3, #0]
 803455c:	613b      	str	r3, [r7, #16]
 803455e:	693b      	ldr	r3, [r7, #16]
 8034560:	2b00      	cmp	r3, #0
 8034562:	d1ed      	bne.n	8034540 <ip4_input+0x138>
 8034564:	e000      	b.n	8034568 <ip4_input+0x160>
            break;
 8034566:	bf00      	nop
      && !ip4_addr_isany_val(*ip4_current_src_addr())
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */
     )
#endif /* LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING */
  {
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 8034568:	4b3a      	ldr	r3, [pc, #232]	; (8034654 <ip4_input+0x24c>)
 803456a:	691b      	ldr	r3, [r3, #16]
 803456c:	6839      	ldr	r1, [r7, #0]
 803456e:	4618      	mov	r0, r3
 8034570:	f000 f9ae 	bl	80348d0 <ip4_addr_isbroadcast_u32>
 8034574:	4603      	mov	r3, r0
 8034576:	2b00      	cmp	r3, #0
 8034578:	d105      	bne.n	8034586 <ip4_input+0x17e>
        (ip4_addr_ismulticast(ip4_current_src_addr()))) {
 803457a:	4b36      	ldr	r3, [pc, #216]	; (8034654 <ip4_input+0x24c>)
 803457c:	691b      	ldr	r3, [r3, #16]
 803457e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 8034582:	2be0      	cmp	r3, #224	; 0xe0
 8034584:	d10c      	bne.n	80345a0 <ip4_input+0x198>
      /* packet source is not valid */
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("ip4_input: packet source is not valid.\n"));
      /* free (drop) packet pbufs */
      pbuf_free(p);
 8034586:	6878      	ldr	r0, [r7, #4]
 8034588:	f7f7 fc88 	bl	802be9c <pbuf_free>
      IP_STATS_INC(ip.drop);
 803458c:	4b30      	ldr	r3, [pc, #192]	; (8034650 <ip4_input+0x248>)
 803458e:	f8b3 304e 	ldrh.w	r3, [r3, #78]	; 0x4e
 8034592:	3301      	adds	r3, #1
 8034594:	b29a      	uxth	r2, r3
 8034596:	4b2e      	ldr	r3, [pc, #184]	; (8034650 <ip4_input+0x248>)
 8034598:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
      return ERR_OK;
 803459c:	2300      	movs	r3, #0
 803459e:	e09d      	b.n	80346dc <ip4_input+0x2d4>
    }
  }

  /* packet not for us? */
  if (netif == NULL) {
 80345a0:	693b      	ldr	r3, [r7, #16]
 80345a2:	2b00      	cmp	r3, #0
 80345a4:	d10c      	bne.n	80345c0 <ip4_input+0x1b8>
      /* try to forward IP packet on (other) interfaces */
      ip4_forward(p, (struct ip_hdr *)p->payload, inp);
    } else
#endif /* IP_FORWARD */
    {
      IP_STATS_INC(ip.drop);
 80345a6:	4b2a      	ldr	r3, [pc, #168]	; (8034650 <ip4_input+0x248>)
 80345a8:	f8b3 304e 	ldrh.w	r3, [r3, #78]	; 0x4e
 80345ac:	3301      	adds	r3, #1
 80345ae:	b29a      	uxth	r2, r3
 80345b0:	4b27      	ldr	r3, [pc, #156]	; (8034650 <ip4_input+0x248>)
 80345b2:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
    }
    pbuf_free(p);
 80345b6:	6878      	ldr	r0, [r7, #4]
 80345b8:	f7f7 fc70 	bl	802be9c <pbuf_free>
    return ERR_OK;
 80345bc:	2300      	movs	r3, #0
 80345be:	e08d      	b.n	80346dc <ip4_input+0x2d4>
  }
  /* packet consists of multiple fragments? */
  if ((IPH_OFFSET(iphdr) & PP_HTONS(IP_OFFMASK | IP_MF)) != 0) {
 80345c0:	697b      	ldr	r3, [r7, #20]
 80345c2:	88db      	ldrh	r3, [r3, #6]
 80345c4:	b29b      	uxth	r3, r3
 80345c6:	461a      	mov	r2, r3
 80345c8:	f64f 733f 	movw	r3, #65343	; 0xff3f
 80345cc:	4013      	ands	r3, r2
 80345ce:	2b00      	cmp	r3, #0
 80345d0:	d00b      	beq.n	80345ea <ip4_input+0x1e2>
#if IP_REASSEMBLY /* packet fragment reassembly code present? */
    LWIP_DEBUGF(IP_DEBUG, ("IP packet is a fragment (id=0x%04"X16_F" tot_len=%"U16_F" len=%"U16_F" MF=%"U16_F" offset=%"U16_F"), calling ip4_reass()\n",
                           lwip_ntohs(IPH_ID(iphdr)), p->tot_len, lwip_ntohs(IPH_LEN(iphdr)), (u16_t)!!(IPH_OFFSET(iphdr) & PP_HTONS(IP_MF)), (u16_t)((lwip_ntohs(IPH_OFFSET(iphdr)) & IP_OFFMASK) * 8)));
    /* reassemble the packet*/
    p = ip4_reass(p);
 80345d2:	6878      	ldr	r0, [r7, #4]
 80345d4:	f000 fcca 	bl	8034f6c <ip4_reass>
 80345d8:	6078      	str	r0, [r7, #4]
    /* packet not fully reassembled yet? */
    if (p == NULL) {
 80345da:	687b      	ldr	r3, [r7, #4]
 80345dc:	2b00      	cmp	r3, #0
 80345de:	d101      	bne.n	80345e4 <ip4_input+0x1dc>
      return ERR_OK;
 80345e0:	2300      	movs	r3, #0
 80345e2:	e07b      	b.n	80346dc <ip4_input+0x2d4>
    }
    iphdr = (const struct ip_hdr *)p->payload;
 80345e4:	687b      	ldr	r3, [r7, #4]
 80345e6:	685b      	ldr	r3, [r3, #4]
 80345e8:	617b      	str	r3, [r7, #20]
  /* send to upper layers */
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: \n"));
  ip4_debug_print(p);
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: p->len %"U16_F" p->tot_len %"U16_F"\n", p->len, p->tot_len));

  ip_data.current_netif = netif;
 80345ea:	4a1a      	ldr	r2, [pc, #104]	; (8034654 <ip4_input+0x24c>)
 80345ec:	693b      	ldr	r3, [r7, #16]
 80345ee:	6013      	str	r3, [r2, #0]
  ip_data.current_input_netif = inp;
 80345f0:	4a18      	ldr	r2, [pc, #96]	; (8034654 <ip4_input+0x24c>)
 80345f2:	683b      	ldr	r3, [r7, #0]
 80345f4:	6053      	str	r3, [r2, #4]
  ip_data.current_ip4_header = iphdr;
 80345f6:	4a17      	ldr	r2, [pc, #92]	; (8034654 <ip4_input+0x24c>)
 80345f8:	697b      	ldr	r3, [r7, #20]
 80345fa:	6093      	str	r3, [r2, #8]
  ip_data.current_ip_header_tot_len = IPH_HL_BYTES(iphdr);
 80345fc:	697b      	ldr	r3, [r7, #20]
 80345fe:	781b      	ldrb	r3, [r3, #0]
 8034600:	f003 030f 	and.w	r3, r3, #15
 8034604:	b2db      	uxtb	r3, r3
 8034606:	009b      	lsls	r3, r3, #2
 8034608:	b2db      	uxtb	r3, r3
 803460a:	b29a      	uxth	r2, r3
 803460c:	4b11      	ldr	r3, [pc, #68]	; (8034654 <ip4_input+0x24c>)
 803460e:	819a      	strh	r2, [r3, #12]
  /* raw input did not eat the packet? */
  raw_status = raw_input(p, inp);
  if (raw_status != RAW_INPUT_EATEN)
#endif /* LWIP_RAW */
  {
    pbuf_remove_header(p, iphdr_hlen); /* Move to payload, no check necessary. */
 8034610:	89fb      	ldrh	r3, [r7, #14]
 8034612:	4619      	mov	r1, r3
 8034614:	6878      	ldr	r0, [r7, #4]
 8034616:	f7f7 fbbb 	bl	802bd90 <pbuf_remove_header>

    switch (IPH_PROTO(iphdr)) {
 803461a:	697b      	ldr	r3, [r7, #20]
 803461c:	7a5b      	ldrb	r3, [r3, #9]
 803461e:	2b11      	cmp	r3, #17
 8034620:	d006      	beq.n	8034630 <ip4_input+0x228>
 8034622:	2b11      	cmp	r3, #17
 8034624:	dc1a      	bgt.n	803465c <ip4_input+0x254>
 8034626:	2b01      	cmp	r3, #1
 8034628:	d00c      	beq.n	8034644 <ip4_input+0x23c>
 803462a:	2b06      	cmp	r3, #6
 803462c:	d005      	beq.n	803463a <ip4_input+0x232>
 803462e:	e015      	b.n	803465c <ip4_input+0x254>
      case IP_PROTO_UDP:
#if LWIP_UDPLITE
      case IP_PROTO_UDPLITE:
#endif /* LWIP_UDPLITE */
        MIB2_STATS_INC(mib2.ipindelivers);
        udp_input(p, inp);
 8034630:	6839      	ldr	r1, [r7, #0]
 8034632:	6878      	ldr	r0, [r7, #4]
 8034634:	f7fe fa60 	bl	8032af8 <udp_input>
        break;
 8034638:	e03d      	b.n	80346b6 <ip4_input+0x2ae>
#endif /* LWIP_UDP */
#if LWIP_TCP
      case IP_PROTO_TCP:
        MIB2_STATS_INC(mib2.ipindelivers);
        tcp_input(p, inp);
 803463a:	6839      	ldr	r1, [r7, #0]
 803463c:	6878      	ldr	r0, [r7, #4]
 803463e:	f7f9 fd65 	bl	802e10c <tcp_input>
        break;
 8034642:	e038      	b.n	80346b6 <ip4_input+0x2ae>
#endif /* LWIP_TCP */
#if LWIP_ICMP
      case IP_PROTO_ICMP:
        MIB2_STATS_INC(mib2.ipindelivers);
        icmp_input(p, inp);
 8034644:	6839      	ldr	r1, [r7, #0]
 8034646:	6878      	ldr	r0, [r7, #4]
 8034648:	f7ff fc6e 	bl	8033f28 <icmp_input>
        break;
 803464c:	e033      	b.n	80346b6 <ip4_input+0x2ae>
 803464e:	bf00      	nop
 8034650:	2000ed10 	.word	0x2000ed10
 8034654:	2000b28c 	.word	0x2000b28c
 8034658:	2000ed04 	.word	0x2000ed04
        } else
#endif /* LWIP_RAW */
        {
#if LWIP_ICMP
          /* send ICMP destination protocol unreachable unless is was a broadcast */
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 803465c:	4b21      	ldr	r3, [pc, #132]	; (80346e4 <ip4_input+0x2dc>)
 803465e:	695b      	ldr	r3, [r3, #20]
 8034660:	6939      	ldr	r1, [r7, #16]
 8034662:	4618      	mov	r0, r3
 8034664:	f000 f934 	bl	80348d0 <ip4_addr_isbroadcast_u32>
 8034668:	4603      	mov	r3, r0
 803466a:	2b00      	cmp	r3, #0
 803466c:	d10f      	bne.n	803468e <ip4_input+0x286>
              !ip4_addr_ismulticast(ip4_current_dest_addr())) {
 803466e:	4b1d      	ldr	r3, [pc, #116]	; (80346e4 <ip4_input+0x2dc>)
 8034670:	695b      	ldr	r3, [r3, #20]
 8034672:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 8034676:	2be0      	cmp	r3, #224	; 0xe0
 8034678:	d009      	beq.n	803468e <ip4_input+0x286>
            pbuf_header_force(p, (s16_t)iphdr_hlen); /* Move to ip header, no check necessary. */
 803467a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 803467e:	4619      	mov	r1, r3
 8034680:	6878      	ldr	r0, [r7, #4]
 8034682:	f7f7 fbf8 	bl	802be76 <pbuf_header_force>
            icmp_dest_unreach(p, ICMP_DUR_PROTO);
 8034686:	2102      	movs	r1, #2
 8034688:	6878      	ldr	r0, [r7, #4]
 803468a:	f7ff fd85 	bl	8034198 <icmp_dest_unreach>
          }
#endif /* LWIP_ICMP */

          LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("Unsupported transport protocol %"U16_F"\n", (u16_t)IPH_PROTO(iphdr)));

          IP_STATS_INC(ip.proterr);
 803468e:	4b16      	ldr	r3, [pc, #88]	; (80346e8 <ip4_input+0x2e0>)
 8034690:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8034694:	3301      	adds	r3, #1
 8034696:	b29a      	uxth	r2, r3
 8034698:	4b13      	ldr	r3, [pc, #76]	; (80346e8 <ip4_input+0x2e0>)
 803469a:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
          IP_STATS_INC(ip.drop);
 803469e:	4b12      	ldr	r3, [pc, #72]	; (80346e8 <ip4_input+0x2e0>)
 80346a0:	f8b3 304e 	ldrh.w	r3, [r3, #78]	; 0x4e
 80346a4:	3301      	adds	r3, #1
 80346a6:	b29a      	uxth	r2, r3
 80346a8:	4b0f      	ldr	r3, [pc, #60]	; (80346e8 <ip4_input+0x2e0>)
 80346aa:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
          MIB2_STATS_INC(mib2.ipinunknownprotos);
        }
        pbuf_free(p);
 80346ae:	6878      	ldr	r0, [r7, #4]
 80346b0:	f7f7 fbf4 	bl	802be9c <pbuf_free>
        break;
 80346b4:	bf00      	nop
    }
  }

  /* @todo: this is not really necessary... */
  ip_data.current_netif = NULL;
 80346b6:	4b0b      	ldr	r3, [pc, #44]	; (80346e4 <ip4_input+0x2dc>)
 80346b8:	2200      	movs	r2, #0
 80346ba:	601a      	str	r2, [r3, #0]
  ip_data.current_input_netif = NULL;
 80346bc:	4b09      	ldr	r3, [pc, #36]	; (80346e4 <ip4_input+0x2dc>)
 80346be:	2200      	movs	r2, #0
 80346c0:	605a      	str	r2, [r3, #4]
  ip_data.current_ip4_header = NULL;
 80346c2:	4b08      	ldr	r3, [pc, #32]	; (80346e4 <ip4_input+0x2dc>)
 80346c4:	2200      	movs	r2, #0
 80346c6:	609a      	str	r2, [r3, #8]
  ip_data.current_ip_header_tot_len = 0;
 80346c8:	4b06      	ldr	r3, [pc, #24]	; (80346e4 <ip4_input+0x2dc>)
 80346ca:	2200      	movs	r2, #0
 80346cc:	819a      	strh	r2, [r3, #12]
  ip4_addr_set_any(ip4_current_src_addr());
 80346ce:	4b05      	ldr	r3, [pc, #20]	; (80346e4 <ip4_input+0x2dc>)
 80346d0:	2200      	movs	r2, #0
 80346d2:	611a      	str	r2, [r3, #16]
  ip4_addr_set_any(ip4_current_dest_addr());
 80346d4:	4b03      	ldr	r3, [pc, #12]	; (80346e4 <ip4_input+0x2dc>)
 80346d6:	2200      	movs	r2, #0
 80346d8:	615a      	str	r2, [r3, #20]

  return ERR_OK;
 80346da:	2300      	movs	r3, #0
}
 80346dc:	4618      	mov	r0, r3
 80346de:	3718      	adds	r7, #24
 80346e0:	46bd      	mov	sp, r7
 80346e2:	bd80      	pop	{r7, pc}
 80346e4:	2000b28c 	.word	0x2000b28c
 80346e8:	2000ed10 	.word	0x2000ed10

080346ec <ip4_output_if>:
 */
err_t
ip4_output_if(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
              u8_t ttl, u8_t tos,
              u8_t proto, struct netif *netif)
{
 80346ec:	b580      	push	{r7, lr}
 80346ee:	b08a      	sub	sp, #40	; 0x28
 80346f0:	af04      	add	r7, sp, #16
 80346f2:	60f8      	str	r0, [r7, #12]
 80346f4:	60b9      	str	r1, [r7, #8]
 80346f6:	607a      	str	r2, [r7, #4]
 80346f8:	70fb      	strb	r3, [r7, #3]
ip4_output_if_opt(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos, u8_t proto, struct netif *netif, void *ip_options,
                  u16_t optlen)
{
#endif /* IP_OPTIONS_SEND */
  const ip4_addr_t *src_used = src;
 80346fa:	68bb      	ldr	r3, [r7, #8]
 80346fc:	617b      	str	r3, [r7, #20]
  if (dest != LWIP_IP_HDRINCL) {
 80346fe:	687b      	ldr	r3, [r7, #4]
 8034700:	2b00      	cmp	r3, #0
 8034702:	d009      	beq.n	8034718 <ip4_output_if+0x2c>
    if (ip4_addr_isany(src)) {
 8034704:	68bb      	ldr	r3, [r7, #8]
 8034706:	2b00      	cmp	r3, #0
 8034708:	d003      	beq.n	8034712 <ip4_output_if+0x26>
 803470a:	68bb      	ldr	r3, [r7, #8]
 803470c:	681b      	ldr	r3, [r3, #0]
 803470e:	2b00      	cmp	r3, #0
 8034710:	d102      	bne.n	8034718 <ip4_output_if+0x2c>
      src_used = netif_ip4_addr(netif);
 8034712:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8034714:	3304      	adds	r3, #4
 8034716:	617b      	str	r3, [r7, #20]

#if IP_OPTIONS_SEND
  return ip4_output_if_opt_src(p, src_used, dest, ttl, tos, proto, netif,
                               ip_options, optlen);
#else /* IP_OPTIONS_SEND */
  return ip4_output_if_src(p, src_used, dest, ttl, tos, proto, netif);
 8034718:	78fa      	ldrb	r2, [r7, #3]
 803471a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 803471c:	9302      	str	r3, [sp, #8]
 803471e:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8034722:	9301      	str	r3, [sp, #4]
 8034724:	f897 3020 	ldrb.w	r3, [r7, #32]
 8034728:	9300      	str	r3, [sp, #0]
 803472a:	4613      	mov	r3, r2
 803472c:	687a      	ldr	r2, [r7, #4]
 803472e:	6979      	ldr	r1, [r7, #20]
 8034730:	68f8      	ldr	r0, [r7, #12]
 8034732:	f000 f805 	bl	8034740 <ip4_output_if_src>
 8034736:	4603      	mov	r3, r0
#endif /* IP_OPTIONS_SEND */
}
 8034738:	4618      	mov	r0, r3
 803473a:	3718      	adds	r7, #24
 803473c:	46bd      	mov	sp, r7
 803473e:	bd80      	pop	{r7, pc}

08034740 <ip4_output_if_src>:
 */
err_t
ip4_output_if_src(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos,
                  u8_t proto, struct netif *netif)
{
 8034740:	b580      	push	{r7, lr}
 8034742:	b088      	sub	sp, #32
 8034744:	af00      	add	r7, sp, #0
 8034746:	60f8      	str	r0, [r7, #12]
 8034748:	60b9      	str	r1, [r7, #8]
 803474a:	607a      	str	r2, [r7, #4]
 803474c:	70fb      	strb	r3, [r7, #3]
#if CHECKSUM_GEN_IP_INLINE
  u32_t chk_sum = 0;
#endif /* CHECKSUM_GEN_IP_INLINE */

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
 803474e:	68fb      	ldr	r3, [r7, #12]
 8034750:	7b9b      	ldrb	r3, [r3, #14]
 8034752:	2b01      	cmp	r3, #1
 8034754:	d006      	beq.n	8034764 <ip4_output_if_src+0x24>
 8034756:	4b57      	ldr	r3, [pc, #348]	; (80348b4 <ip4_output_if_src+0x174>)
 8034758:	f44f 7255 	mov.w	r2, #852	; 0x354
 803475c:	4956      	ldr	r1, [pc, #344]	; (80348b8 <ip4_output_if_src+0x178>)
 803475e:	4857      	ldr	r0, [pc, #348]	; (80348bc <ip4_output_if_src+0x17c>)
 8034760:	f001 fd1a 	bl	8036198 <iprintf>

  MIB2_STATS_INC(mib2.ipoutrequests);

  /* Should the IP header be generated or is it already included in p? */
  if (dest != LWIP_IP_HDRINCL) {
 8034764:	687b      	ldr	r3, [r7, #4]
 8034766:	2b00      	cmp	r3, #0
 8034768:	d068      	beq.n	803483c <ip4_output_if_src+0xfc>
    u16_t ip_hlen = IP_HLEN;
 803476a:	2314      	movs	r3, #20
 803476c:	837b      	strh	r3, [r7, #26]
      }
#endif /* CHECKSUM_GEN_IP_INLINE */
    }
#endif /* IP_OPTIONS_SEND */
    /* generate IP header */
    if (pbuf_add_header(p, IP_HLEN)) {
 803476e:	2114      	movs	r1, #20
 8034770:	68f8      	ldr	r0, [r7, #12]
 8034772:	f7f7 fafd 	bl	802bd70 <pbuf_add_header>
 8034776:	4603      	mov	r3, r0
 8034778:	2b00      	cmp	r3, #0
 803477a:	d00a      	beq.n	8034792 <ip4_output_if_src+0x52>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: not enough room for IP header in pbuf\n"));

      IP_STATS_INC(ip.err);
 803477c:	4b50      	ldr	r3, [pc, #320]	; (80348c0 <ip4_output_if_src+0x180>)
 803477e:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8034782:	3301      	adds	r3, #1
 8034784:	b29a      	uxth	r2, r3
 8034786:	4b4e      	ldr	r3, [pc, #312]	; (80348c0 <ip4_output_if_src+0x180>)
 8034788:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 803478c:	f06f 0301 	mvn.w	r3, #1
 8034790:	e08c      	b.n	80348ac <ip4_output_if_src+0x16c>
    }

    iphdr = (struct ip_hdr *)p->payload;
 8034792:	68fb      	ldr	r3, [r7, #12]
 8034794:	685b      	ldr	r3, [r3, #4]
 8034796:	61fb      	str	r3, [r7, #28]
    LWIP_ASSERT("check that first pbuf can hold struct ip_hdr",
 8034798:	68fb      	ldr	r3, [r7, #12]
 803479a:	895b      	ldrh	r3, [r3, #10]
 803479c:	2b13      	cmp	r3, #19
 803479e:	d806      	bhi.n	80347ae <ip4_output_if_src+0x6e>
 80347a0:	4b44      	ldr	r3, [pc, #272]	; (80348b4 <ip4_output_if_src+0x174>)
 80347a2:	f44f 7262 	mov.w	r2, #904	; 0x388
 80347a6:	4947      	ldr	r1, [pc, #284]	; (80348c4 <ip4_output_if_src+0x184>)
 80347a8:	4844      	ldr	r0, [pc, #272]	; (80348bc <ip4_output_if_src+0x17c>)
 80347aa:	f001 fcf5 	bl	8036198 <iprintf>
                (p->len >= sizeof(struct ip_hdr)));

    IPH_TTL_SET(iphdr, ttl);
 80347ae:	69fb      	ldr	r3, [r7, #28]
 80347b0:	78fa      	ldrb	r2, [r7, #3]
 80347b2:	721a      	strb	r2, [r3, #8]
    IPH_PROTO_SET(iphdr, proto);
 80347b4:	69fb      	ldr	r3, [r7, #28]
 80347b6:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 80347ba:	725a      	strb	r2, [r3, #9]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(proto | (ttl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */

    /* dest cannot be NULL here */
    ip4_addr_copy(iphdr->dest, *dest);
 80347bc:	687b      	ldr	r3, [r7, #4]
 80347be:	681a      	ldr	r2, [r3, #0]
 80347c0:	69fb      	ldr	r3, [r7, #28]
 80347c2:	611a      	str	r2, [r3, #16]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += ip4_addr_get_u32(&iphdr->dest) & 0xFFFF;
    chk_sum += ip4_addr_get_u32(&iphdr->dest) >> 16;
#endif /* CHECKSUM_GEN_IP_INLINE */

    IPH_VHL_SET(iphdr, 4, ip_hlen / 4);
 80347c4:	8b7b      	ldrh	r3, [r7, #26]
 80347c6:	089b      	lsrs	r3, r3, #2
 80347c8:	b29b      	uxth	r3, r3
 80347ca:	b2db      	uxtb	r3, r3
 80347cc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80347d0:	b2da      	uxtb	r2, r3
 80347d2:	69fb      	ldr	r3, [r7, #28]
 80347d4:	701a      	strb	r2, [r3, #0]
    IPH_TOS_SET(iphdr, tos);
 80347d6:	69fb      	ldr	r3, [r7, #28]
 80347d8:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 80347dc:	705a      	strb	r2, [r3, #1]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(tos | (iphdr->_v_hl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_LEN_SET(iphdr, lwip_htons(p->tot_len));
 80347de:	68fb      	ldr	r3, [r7, #12]
 80347e0:	891b      	ldrh	r3, [r3, #8]
 80347e2:	4618      	mov	r0, r3
 80347e4:	f7f5 fe98 	bl	802a518 <lwip_htons>
 80347e8:	4603      	mov	r3, r0
 80347ea:	461a      	mov	r2, r3
 80347ec:	69fb      	ldr	r3, [r7, #28]
 80347ee:	805a      	strh	r2, [r3, #2]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_len;
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_OFFSET_SET(iphdr, 0);
 80347f0:	69fb      	ldr	r3, [r7, #28]
 80347f2:	2200      	movs	r2, #0
 80347f4:	719a      	strb	r2, [r3, #6]
 80347f6:	2200      	movs	r2, #0
 80347f8:	71da      	strb	r2, [r3, #7]
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
 80347fa:	4b33      	ldr	r3, [pc, #204]	; (80348c8 <ip4_output_if_src+0x188>)
 80347fc:	881b      	ldrh	r3, [r3, #0]
 80347fe:	4618      	mov	r0, r3
 8034800:	f7f5 fe8a 	bl	802a518 <lwip_htons>
 8034804:	4603      	mov	r3, r0
 8034806:	461a      	mov	r2, r3
 8034808:	69fb      	ldr	r3, [r7, #28]
 803480a:	809a      	strh	r2, [r3, #4]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_id;
#endif /* CHECKSUM_GEN_IP_INLINE */
    ++ip_id;
 803480c:	4b2e      	ldr	r3, [pc, #184]	; (80348c8 <ip4_output_if_src+0x188>)
 803480e:	881b      	ldrh	r3, [r3, #0]
 8034810:	3301      	adds	r3, #1
 8034812:	b29a      	uxth	r2, r3
 8034814:	4b2c      	ldr	r3, [pc, #176]	; (80348c8 <ip4_output_if_src+0x188>)
 8034816:	801a      	strh	r2, [r3, #0]

    if (src == NULL) {
 8034818:	68bb      	ldr	r3, [r7, #8]
 803481a:	2b00      	cmp	r3, #0
 803481c:	d104      	bne.n	8034828 <ip4_output_if_src+0xe8>
      ip4_addr_copy(iphdr->src, *IP4_ADDR_ANY4);
 803481e:	4b2b      	ldr	r3, [pc, #172]	; (80348cc <ip4_output_if_src+0x18c>)
 8034820:	681a      	ldr	r2, [r3, #0]
 8034822:	69fb      	ldr	r3, [r7, #28]
 8034824:	60da      	str	r2, [r3, #12]
 8034826:	e003      	b.n	8034830 <ip4_output_if_src+0xf0>
    } else {
      /* src cannot be NULL here */
      ip4_addr_copy(iphdr->src, *src);
 8034828:	68bb      	ldr	r3, [r7, #8]
 803482a:	681a      	ldr	r2, [r3, #0]
 803482c:	69fb      	ldr	r3, [r7, #28]
 803482e:	60da      	str	r2, [r3, #12]
    else {
      IPH_CHKSUM_SET(iphdr, 0);
    }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF*/
#else /* CHECKSUM_GEN_IP_INLINE */
    IPH_CHKSUM_SET(iphdr, 0);
 8034830:	69fb      	ldr	r3, [r7, #28]
 8034832:	2200      	movs	r2, #0
 8034834:	729a      	strb	r2, [r3, #10]
 8034836:	2200      	movs	r2, #0
 8034838:	72da      	strb	r2, [r3, #11]
 803483a:	e017      	b.n	803486c <ip4_output_if_src+0x12c>
    }
#endif /* CHECKSUM_GEN_IP */
#endif /* CHECKSUM_GEN_IP_INLINE */
  } else {
    /* IP header already included in p */
    if (p->len < IP_HLEN) {
 803483c:	68fb      	ldr	r3, [r7, #12]
 803483e:	895b      	ldrh	r3, [r3, #10]
 8034840:	2b13      	cmp	r3, #19
 8034842:	d80a      	bhi.n	803485a <ip4_output_if_src+0x11a>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: LWIP_IP_HDRINCL but pbuf is too short\n"));
      IP_STATS_INC(ip.err);
 8034844:	4b1e      	ldr	r3, [pc, #120]	; (80348c0 <ip4_output_if_src+0x180>)
 8034846:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 803484a:	3301      	adds	r3, #1
 803484c:	b29a      	uxth	r2, r3
 803484e:	4b1c      	ldr	r3, [pc, #112]	; (80348c0 <ip4_output_if_src+0x180>)
 8034850:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 8034854:	f06f 0301 	mvn.w	r3, #1
 8034858:	e028      	b.n	80348ac <ip4_output_if_src+0x16c>
    }
    iphdr = (struct ip_hdr *)p->payload;
 803485a:	68fb      	ldr	r3, [r7, #12]
 803485c:	685b      	ldr	r3, [r3, #4]
 803485e:	61fb      	str	r3, [r7, #28]
    ip4_addr_copy(dest_addr, iphdr->dest);
 8034860:	69fb      	ldr	r3, [r7, #28]
 8034862:	691b      	ldr	r3, [r3, #16]
 8034864:	617b      	str	r3, [r7, #20]
    dest = &dest_addr;
 8034866:	f107 0314 	add.w	r3, r7, #20
 803486a:	607b      	str	r3, [r7, #4]
  }

  IP_STATS_INC(ip.xmit);
 803486c:	4b14      	ldr	r3, [pc, #80]	; (80348c0 <ip4_output_if_src+0x180>)
 803486e:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8034872:	3301      	adds	r3, #1
 8034874:	b29a      	uxth	r2, r3
 8034876:	4b12      	ldr	r3, [pc, #72]	; (80348c0 <ip4_output_if_src+0x180>)
 8034878:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
  }
#endif /* LWIP_MULTICAST_TX_OPTIONS */
#endif /* ENABLE_LOOPBACK */
#if IP_FRAG
  /* don't fragment if interface has mtu set to 0 [loopif] */
  if (netif->mtu && (p->tot_len > netif->mtu)) {
 803487c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 803487e:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8034880:	2b00      	cmp	r3, #0
 8034882:	d00c      	beq.n	803489e <ip4_output_if_src+0x15e>
 8034884:	68fb      	ldr	r3, [r7, #12]
 8034886:	891a      	ldrh	r2, [r3, #8]
 8034888:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 803488a:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 803488c:	429a      	cmp	r2, r3
 803488e:	d906      	bls.n	803489e <ip4_output_if_src+0x15e>
    return ip4_frag(p, netif, dest);
 8034890:	687a      	ldr	r2, [r7, #4]
 8034892:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8034894:	68f8      	ldr	r0, [r7, #12]
 8034896:	f000 fd7b 	bl	8035390 <ip4_frag>
 803489a:	4603      	mov	r3, r0
 803489c:	e006      	b.n	80348ac <ip4_output_if_src+0x16c>
  }
#endif /* IP_FRAG */

  LWIP_DEBUGF(IP_DEBUG, ("ip4_output_if: call netif->output()\n"));
  return netif->output(netif, p, dest);
 803489e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80348a0:	695b      	ldr	r3, [r3, #20]
 80348a2:	687a      	ldr	r2, [r7, #4]
 80348a4:	68f9      	ldr	r1, [r7, #12]
 80348a6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80348a8:	4798      	blx	r3
 80348aa:	4603      	mov	r3, r0
}
 80348ac:	4618      	mov	r0, r3
 80348ae:	3720      	adds	r7, #32
 80348b0:	46bd      	mov	sp, r7
 80348b2:	bd80      	pop	{r7, pc}
 80348b4:	0803a700 	.word	0x0803a700
 80348b8:	0803a734 	.word	0x0803a734
 80348bc:	0803a740 	.word	0x0803a740
 80348c0:	2000ed10 	.word	0x2000ed10
 80348c4:	0803a768 	.word	0x0803a768
 80348c8:	2000ef5e 	.word	0x2000ef5e
 80348cc:	0803abc4 	.word	0x0803abc4

080348d0 <ip4_addr_isbroadcast_u32>:
 * @param netif the network interface against which the address is checked
 * @return returns non-zero if the address is a broadcast address
 */
u8_t
ip4_addr_isbroadcast_u32(u32_t addr, const struct netif *netif)
{
 80348d0:	b480      	push	{r7}
 80348d2:	b085      	sub	sp, #20
 80348d4:	af00      	add	r7, sp, #0
 80348d6:	6078      	str	r0, [r7, #4]
 80348d8:	6039      	str	r1, [r7, #0]
  ip4_addr_t ipaddr;
  ip4_addr_set_u32(&ipaddr, addr);
 80348da:	687b      	ldr	r3, [r7, #4]
 80348dc:	60fb      	str	r3, [r7, #12]

  /* all ones (broadcast) or all zeroes (old skool broadcast) */
  if ((~addr == IPADDR_ANY) ||
 80348de:	687b      	ldr	r3, [r7, #4]
 80348e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80348e4:	d002      	beq.n	80348ec <ip4_addr_isbroadcast_u32+0x1c>
 80348e6:	687b      	ldr	r3, [r7, #4]
 80348e8:	2b00      	cmp	r3, #0
 80348ea:	d101      	bne.n	80348f0 <ip4_addr_isbroadcast_u32+0x20>
      (addr == IPADDR_ANY)) {
    return 1;
 80348ec:	2301      	movs	r3, #1
 80348ee:	e02a      	b.n	8034946 <ip4_addr_isbroadcast_u32+0x76>
    /* no broadcast support on this network interface? */
  } else if ((netif->flags & NETIF_FLAG_BROADCAST) == 0) {
 80348f0:	683b      	ldr	r3, [r7, #0]
 80348f2:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80348f6:	f003 0302 	and.w	r3, r3, #2
 80348fa:	2b00      	cmp	r3, #0
 80348fc:	d101      	bne.n	8034902 <ip4_addr_isbroadcast_u32+0x32>
    /* the given address cannot be a broadcast address
     * nor can we check against any broadcast addresses */
    return 0;
 80348fe:	2300      	movs	r3, #0
 8034900:	e021      	b.n	8034946 <ip4_addr_isbroadcast_u32+0x76>
    /* address matches network interface address exactly? => no broadcast */
  } else if (addr == ip4_addr_get_u32(netif_ip4_addr(netif))) {
 8034902:	683b      	ldr	r3, [r7, #0]
 8034904:	3304      	adds	r3, #4
 8034906:	681b      	ldr	r3, [r3, #0]
 8034908:	687a      	ldr	r2, [r7, #4]
 803490a:	429a      	cmp	r2, r3
 803490c:	d101      	bne.n	8034912 <ip4_addr_isbroadcast_u32+0x42>
    return 0;
 803490e:	2300      	movs	r3, #0
 8034910:	e019      	b.n	8034946 <ip4_addr_isbroadcast_u32+0x76>
    /*  on the same (sub) network... */
  } else if (ip4_addr_netcmp(&ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif))
 8034912:	68fa      	ldr	r2, [r7, #12]
 8034914:	683b      	ldr	r3, [r7, #0]
 8034916:	3304      	adds	r3, #4
 8034918:	681b      	ldr	r3, [r3, #0]
 803491a:	405a      	eors	r2, r3
 803491c:	683b      	ldr	r3, [r7, #0]
 803491e:	3308      	adds	r3, #8
 8034920:	681b      	ldr	r3, [r3, #0]
 8034922:	4013      	ands	r3, r2
 8034924:	2b00      	cmp	r3, #0
 8034926:	d10d      	bne.n	8034944 <ip4_addr_isbroadcast_u32+0x74>
             /* ...and host identifier bits are all ones? =>... */
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 8034928:	683b      	ldr	r3, [r7, #0]
 803492a:	3308      	adds	r3, #8
 803492c:	681b      	ldr	r3, [r3, #0]
 803492e:	43da      	mvns	r2, r3
 8034930:	687b      	ldr	r3, [r7, #4]
 8034932:	401a      	ands	r2, r3
                 (IPADDR_BROADCAST & ~ip4_addr_get_u32(netif_ip4_netmask(netif))))) {
 8034934:	683b      	ldr	r3, [r7, #0]
 8034936:	3308      	adds	r3, #8
 8034938:	681b      	ldr	r3, [r3, #0]
 803493a:	43db      	mvns	r3, r3
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 803493c:	429a      	cmp	r2, r3
 803493e:	d101      	bne.n	8034944 <ip4_addr_isbroadcast_u32+0x74>
    /* => network broadcast address */
    return 1;
 8034940:	2301      	movs	r3, #1
 8034942:	e000      	b.n	8034946 <ip4_addr_isbroadcast_u32+0x76>
  } else {
    return 0;
 8034944:	2300      	movs	r3, #0
  }
}
 8034946:	4618      	mov	r0, r3
 8034948:	3714      	adds	r7, #20
 803494a:	46bd      	mov	sp, r7
 803494c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8034950:	4770      	bx	lr
	...

08034954 <ip_reass_tmr>:
 *
 * Should be called every 1000 msec (defined by IP_TMR_INTERVAL).
 */
void
ip_reass_tmr(void)
{
 8034954:	b580      	push	{r7, lr}
 8034956:	b084      	sub	sp, #16
 8034958:	af00      	add	r7, sp, #0
  struct ip_reassdata *r, *prev = NULL;
 803495a:	2300      	movs	r3, #0
 803495c:	60bb      	str	r3, [r7, #8]

  r = reassdatagrams;
 803495e:	4b12      	ldr	r3, [pc, #72]	; (80349a8 <ip_reass_tmr+0x54>)
 8034960:	681b      	ldr	r3, [r3, #0]
 8034962:	60fb      	str	r3, [r7, #12]
  while (r != NULL) {
 8034964:	e018      	b.n	8034998 <ip_reass_tmr+0x44>
    /* Decrement the timer. Once it reaches 0,
     * clean up the incomplete fragment assembly */
    if (r->timer > 0) {
 8034966:	68fb      	ldr	r3, [r7, #12]
 8034968:	7fdb      	ldrb	r3, [r3, #31]
 803496a:	2b00      	cmp	r3, #0
 803496c:	d00b      	beq.n	8034986 <ip_reass_tmr+0x32>
      r->timer--;
 803496e:	68fb      	ldr	r3, [r7, #12]
 8034970:	7fdb      	ldrb	r3, [r3, #31]
 8034972:	3b01      	subs	r3, #1
 8034974:	b2da      	uxtb	r2, r3
 8034976:	68fb      	ldr	r3, [r7, #12]
 8034978:	77da      	strb	r2, [r3, #31]
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer dec %"U16_F"\n", (u16_t)r->timer));
      prev = r;
 803497a:	68fb      	ldr	r3, [r7, #12]
 803497c:	60bb      	str	r3, [r7, #8]
      r = r->next;
 803497e:	68fb      	ldr	r3, [r7, #12]
 8034980:	681b      	ldr	r3, [r3, #0]
 8034982:	60fb      	str	r3, [r7, #12]
 8034984:	e008      	b.n	8034998 <ip_reass_tmr+0x44>
    } else {
      /* reassembly timed out */
      struct ip_reassdata *tmp;
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer timed out\n"));
      tmp = r;
 8034986:	68fb      	ldr	r3, [r7, #12]
 8034988:	607b      	str	r3, [r7, #4]
      /* get the next pointer before freeing */
      r = r->next;
 803498a:	68fb      	ldr	r3, [r7, #12]
 803498c:	681b      	ldr	r3, [r3, #0]
 803498e:	60fb      	str	r3, [r7, #12]
      /* free the helper struct and all enqueued pbufs */
      ip_reass_free_complete_datagram(tmp, prev);
 8034990:	68b9      	ldr	r1, [r7, #8]
 8034992:	6878      	ldr	r0, [r7, #4]
 8034994:	f000 f80a 	bl	80349ac <ip_reass_free_complete_datagram>
  while (r != NULL) {
 8034998:	68fb      	ldr	r3, [r7, #12]
 803499a:	2b00      	cmp	r3, #0
 803499c:	d1e3      	bne.n	8034966 <ip_reass_tmr+0x12>
    }
  }
}
 803499e:	bf00      	nop
 80349a0:	bf00      	nop
 80349a2:	3710      	adds	r7, #16
 80349a4:	46bd      	mov	sp, r7
 80349a6:	bd80      	pop	{r7, pc}
 80349a8:	2000ef60 	.word	0x2000ef60

080349ac <ip_reass_free_complete_datagram>:
 * @param prev the previous datagram in the linked list
 * @return the number of pbufs freed
 */
static int
ip_reass_free_complete_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 80349ac:	b580      	push	{r7, lr}
 80349ae:	b088      	sub	sp, #32
 80349b0:	af00      	add	r7, sp, #0
 80349b2:	6078      	str	r0, [r7, #4]
 80349b4:	6039      	str	r1, [r7, #0]
  u16_t pbufs_freed = 0;
 80349b6:	2300      	movs	r3, #0
 80349b8:	83fb      	strh	r3, [r7, #30]
  u16_t clen;
  struct pbuf *p;
  struct ip_reass_helper *iprh;

  LWIP_ASSERT("prev != ipr", prev != ipr);
 80349ba:	683a      	ldr	r2, [r7, #0]
 80349bc:	687b      	ldr	r3, [r7, #4]
 80349be:	429a      	cmp	r2, r3
 80349c0:	d105      	bne.n	80349ce <ip_reass_free_complete_datagram+0x22>
 80349c2:	4b45      	ldr	r3, [pc, #276]	; (8034ad8 <ip_reass_free_complete_datagram+0x12c>)
 80349c4:	22ab      	movs	r2, #171	; 0xab
 80349c6:	4945      	ldr	r1, [pc, #276]	; (8034adc <ip_reass_free_complete_datagram+0x130>)
 80349c8:	4845      	ldr	r0, [pc, #276]	; (8034ae0 <ip_reass_free_complete_datagram+0x134>)
 80349ca:	f001 fbe5 	bl	8036198 <iprintf>
  if (prev != NULL) {
 80349ce:	683b      	ldr	r3, [r7, #0]
 80349d0:	2b00      	cmp	r3, #0
 80349d2:	d00a      	beq.n	80349ea <ip_reass_free_complete_datagram+0x3e>
    LWIP_ASSERT("prev->next == ipr", prev->next == ipr);
 80349d4:	683b      	ldr	r3, [r7, #0]
 80349d6:	681b      	ldr	r3, [r3, #0]
 80349d8:	687a      	ldr	r2, [r7, #4]
 80349da:	429a      	cmp	r2, r3
 80349dc:	d005      	beq.n	80349ea <ip_reass_free_complete_datagram+0x3e>
 80349de:	4b3e      	ldr	r3, [pc, #248]	; (8034ad8 <ip_reass_free_complete_datagram+0x12c>)
 80349e0:	22ad      	movs	r2, #173	; 0xad
 80349e2:	4940      	ldr	r1, [pc, #256]	; (8034ae4 <ip_reass_free_complete_datagram+0x138>)
 80349e4:	483e      	ldr	r0, [pc, #248]	; (8034ae0 <ip_reass_free_complete_datagram+0x134>)
 80349e6:	f001 fbd7 	bl	8036198 <iprintf>
  }

  MIB2_STATS_INC(mib2.ipreasmfails);
#if LWIP_ICMP
  iprh = (struct ip_reass_helper *)ipr->p->payload;
 80349ea:	687b      	ldr	r3, [r7, #4]
 80349ec:	685b      	ldr	r3, [r3, #4]
 80349ee:	685b      	ldr	r3, [r3, #4]
 80349f0:	617b      	str	r3, [r7, #20]
  if (iprh->start == 0) {
 80349f2:	697b      	ldr	r3, [r7, #20]
 80349f4:	889b      	ldrh	r3, [r3, #4]
 80349f6:	b29b      	uxth	r3, r3
 80349f8:	2b00      	cmp	r3, #0
 80349fa:	d12a      	bne.n	8034a52 <ip_reass_free_complete_datagram+0xa6>
    /* The first fragment was received, send ICMP time exceeded. */
    /* First, de-queue the first pbuf from r->p. */
    p = ipr->p;
 80349fc:	687b      	ldr	r3, [r7, #4]
 80349fe:	685b      	ldr	r3, [r3, #4]
 8034a00:	61bb      	str	r3, [r7, #24]
    ipr->p = iprh->next_pbuf;
 8034a02:	697b      	ldr	r3, [r7, #20]
 8034a04:	681a      	ldr	r2, [r3, #0]
 8034a06:	687b      	ldr	r3, [r7, #4]
 8034a08:	605a      	str	r2, [r3, #4]
    /* Then, copy the original header into it. */
    SMEMCPY(p->payload, &ipr->iphdr, IP_HLEN);
 8034a0a:	69bb      	ldr	r3, [r7, #24]
 8034a0c:	6858      	ldr	r0, [r3, #4]
 8034a0e:	687b      	ldr	r3, [r7, #4]
 8034a10:	3308      	adds	r3, #8
 8034a12:	2214      	movs	r2, #20
 8034a14:	4619      	mov	r1, r3
 8034a16:	f001 faaf 	bl	8035f78 <memcpy>
    icmp_time_exceeded(p, ICMP_TE_FRAG);
 8034a1a:	2101      	movs	r1, #1
 8034a1c:	69b8      	ldr	r0, [r7, #24]
 8034a1e:	f7ff fbcb 	bl	80341b8 <icmp_time_exceeded>
    clen = pbuf_clen(p);
 8034a22:	69b8      	ldr	r0, [r7, #24]
 8034a24:	f7f7 fac8 	bl	802bfb8 <pbuf_clen>
 8034a28:	4603      	mov	r3, r0
 8034a2a:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 8034a2c:	8bfa      	ldrh	r2, [r7, #30]
 8034a2e:	8a7b      	ldrh	r3, [r7, #18]
 8034a30:	4413      	add	r3, r2
 8034a32:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8034a36:	db05      	blt.n	8034a44 <ip_reass_free_complete_datagram+0x98>
 8034a38:	4b27      	ldr	r3, [pc, #156]	; (8034ad8 <ip_reass_free_complete_datagram+0x12c>)
 8034a3a:	22bc      	movs	r2, #188	; 0xbc
 8034a3c:	492a      	ldr	r1, [pc, #168]	; (8034ae8 <ip_reass_free_complete_datagram+0x13c>)
 8034a3e:	4828      	ldr	r0, [pc, #160]	; (8034ae0 <ip_reass_free_complete_datagram+0x134>)
 8034a40:	f001 fbaa 	bl	8036198 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 8034a44:	8bfa      	ldrh	r2, [r7, #30]
 8034a46:	8a7b      	ldrh	r3, [r7, #18]
 8034a48:	4413      	add	r3, r2
 8034a4a:	83fb      	strh	r3, [r7, #30]
    pbuf_free(p);
 8034a4c:	69b8      	ldr	r0, [r7, #24]
 8034a4e:	f7f7 fa25 	bl	802be9c <pbuf_free>
  }
#endif /* LWIP_ICMP */

  /* First, free all received pbufs.  The individual pbufs need to be released
     separately as they have not yet been chained */
  p = ipr->p;
 8034a52:	687b      	ldr	r3, [r7, #4]
 8034a54:	685b      	ldr	r3, [r3, #4]
 8034a56:	61bb      	str	r3, [r7, #24]
  while (p != NULL) {
 8034a58:	e01f      	b.n	8034a9a <ip_reass_free_complete_datagram+0xee>
    struct pbuf *pcur;
    iprh = (struct ip_reass_helper *)p->payload;
 8034a5a:	69bb      	ldr	r3, [r7, #24]
 8034a5c:	685b      	ldr	r3, [r3, #4]
 8034a5e:	617b      	str	r3, [r7, #20]
    pcur = p;
 8034a60:	69bb      	ldr	r3, [r7, #24]
 8034a62:	60fb      	str	r3, [r7, #12]
    /* get the next pointer before freeing */
    p = iprh->next_pbuf;
 8034a64:	697b      	ldr	r3, [r7, #20]
 8034a66:	681b      	ldr	r3, [r3, #0]
 8034a68:	61bb      	str	r3, [r7, #24]
    clen = pbuf_clen(pcur);
 8034a6a:	68f8      	ldr	r0, [r7, #12]
 8034a6c:	f7f7 faa4 	bl	802bfb8 <pbuf_clen>
 8034a70:	4603      	mov	r3, r0
 8034a72:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 8034a74:	8bfa      	ldrh	r2, [r7, #30]
 8034a76:	8a7b      	ldrh	r3, [r7, #18]
 8034a78:	4413      	add	r3, r2
 8034a7a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8034a7e:	db05      	blt.n	8034a8c <ip_reass_free_complete_datagram+0xe0>
 8034a80:	4b15      	ldr	r3, [pc, #84]	; (8034ad8 <ip_reass_free_complete_datagram+0x12c>)
 8034a82:	22cc      	movs	r2, #204	; 0xcc
 8034a84:	4918      	ldr	r1, [pc, #96]	; (8034ae8 <ip_reass_free_complete_datagram+0x13c>)
 8034a86:	4816      	ldr	r0, [pc, #88]	; (8034ae0 <ip_reass_free_complete_datagram+0x134>)
 8034a88:	f001 fb86 	bl	8036198 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 8034a8c:	8bfa      	ldrh	r2, [r7, #30]
 8034a8e:	8a7b      	ldrh	r3, [r7, #18]
 8034a90:	4413      	add	r3, r2
 8034a92:	83fb      	strh	r3, [r7, #30]
    pbuf_free(pcur);
 8034a94:	68f8      	ldr	r0, [r7, #12]
 8034a96:	f7f7 fa01 	bl	802be9c <pbuf_free>
  while (p != NULL) {
 8034a9a:	69bb      	ldr	r3, [r7, #24]
 8034a9c:	2b00      	cmp	r3, #0
 8034a9e:	d1dc      	bne.n	8034a5a <ip_reass_free_complete_datagram+0xae>
  }
  /* Then, unchain the struct ip_reassdata from the list and free it. */
  ip_reass_dequeue_datagram(ipr, prev);
 8034aa0:	6839      	ldr	r1, [r7, #0]
 8034aa2:	6878      	ldr	r0, [r7, #4]
 8034aa4:	f000 f8ca 	bl	8034c3c <ip_reass_dequeue_datagram>
  LWIP_ASSERT("ip_reass_pbufcount >= pbufs_freed", ip_reass_pbufcount >= pbufs_freed);
 8034aa8:	4b10      	ldr	r3, [pc, #64]	; (8034aec <ip_reass_free_complete_datagram+0x140>)
 8034aaa:	881b      	ldrh	r3, [r3, #0]
 8034aac:	8bfa      	ldrh	r2, [r7, #30]
 8034aae:	429a      	cmp	r2, r3
 8034ab0:	d905      	bls.n	8034abe <ip_reass_free_complete_datagram+0x112>
 8034ab2:	4b09      	ldr	r3, [pc, #36]	; (8034ad8 <ip_reass_free_complete_datagram+0x12c>)
 8034ab4:	22d2      	movs	r2, #210	; 0xd2
 8034ab6:	490e      	ldr	r1, [pc, #56]	; (8034af0 <ip_reass_free_complete_datagram+0x144>)
 8034ab8:	4809      	ldr	r0, [pc, #36]	; (8034ae0 <ip_reass_free_complete_datagram+0x134>)
 8034aba:	f001 fb6d 	bl	8036198 <iprintf>
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - pbufs_freed);
 8034abe:	4b0b      	ldr	r3, [pc, #44]	; (8034aec <ip_reass_free_complete_datagram+0x140>)
 8034ac0:	881a      	ldrh	r2, [r3, #0]
 8034ac2:	8bfb      	ldrh	r3, [r7, #30]
 8034ac4:	1ad3      	subs	r3, r2, r3
 8034ac6:	b29a      	uxth	r2, r3
 8034ac8:	4b08      	ldr	r3, [pc, #32]	; (8034aec <ip_reass_free_complete_datagram+0x140>)
 8034aca:	801a      	strh	r2, [r3, #0]

  return pbufs_freed;
 8034acc:	8bfb      	ldrh	r3, [r7, #30]
}
 8034ace:	4618      	mov	r0, r3
 8034ad0:	3720      	adds	r7, #32
 8034ad2:	46bd      	mov	sp, r7
 8034ad4:	bd80      	pop	{r7, pc}
 8034ad6:	bf00      	nop
 8034ad8:	0803a798 	.word	0x0803a798
 8034adc:	0803a7d4 	.word	0x0803a7d4
 8034ae0:	0803a7e0 	.word	0x0803a7e0
 8034ae4:	0803a808 	.word	0x0803a808
 8034ae8:	0803a81c 	.word	0x0803a81c
 8034aec:	2000ef64 	.word	0x2000ef64
 8034af0:	0803a83c 	.word	0x0803a83c

08034af4 <ip_reass_remove_oldest_datagram>:
 *        (used for freeing other datagrams if not enough space)
 * @return the number of pbufs freed
 */
static int
ip_reass_remove_oldest_datagram(struct ip_hdr *fraghdr, int pbufs_needed)
{
 8034af4:	b580      	push	{r7, lr}
 8034af6:	b08a      	sub	sp, #40	; 0x28
 8034af8:	af00      	add	r7, sp, #0
 8034afa:	6078      	str	r0, [r7, #4]
 8034afc:	6039      	str	r1, [r7, #0]
  /* @todo Can't we simply remove the last datagram in the
   *       linked list behind reassdatagrams?
   */
  struct ip_reassdata *r, *oldest, *prev, *oldest_prev;
  int pbufs_freed = 0, pbufs_freed_current;
 8034afe:	2300      	movs	r3, #0
 8034b00:	617b      	str	r3, [r7, #20]
  int other_datagrams;

  /* Free datagrams until being allowed to enqueue 'pbufs_needed' pbufs,
   * but don't free the datagram that 'fraghdr' belongs to! */
  do {
    oldest = NULL;
 8034b02:	2300      	movs	r3, #0
 8034b04:	623b      	str	r3, [r7, #32]
    prev = NULL;
 8034b06:	2300      	movs	r3, #0
 8034b08:	61fb      	str	r3, [r7, #28]
    oldest_prev = NULL;
 8034b0a:	2300      	movs	r3, #0
 8034b0c:	61bb      	str	r3, [r7, #24]
    other_datagrams = 0;
 8034b0e:	2300      	movs	r3, #0
 8034b10:	613b      	str	r3, [r7, #16]
    r = reassdatagrams;
 8034b12:	4b28      	ldr	r3, [pc, #160]	; (8034bb4 <ip_reass_remove_oldest_datagram+0xc0>)
 8034b14:	681b      	ldr	r3, [r3, #0]
 8034b16:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 8034b18:	e030      	b.n	8034b7c <ip_reass_remove_oldest_datagram+0x88>
      if (!IP_ADDRESSES_AND_ID_MATCH(&r->iphdr, fraghdr)) {
 8034b1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8034b1c:	695a      	ldr	r2, [r3, #20]
 8034b1e:	687b      	ldr	r3, [r7, #4]
 8034b20:	68db      	ldr	r3, [r3, #12]
 8034b22:	429a      	cmp	r2, r3
 8034b24:	d10c      	bne.n	8034b40 <ip_reass_remove_oldest_datagram+0x4c>
 8034b26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8034b28:	699a      	ldr	r2, [r3, #24]
 8034b2a:	687b      	ldr	r3, [r7, #4]
 8034b2c:	691b      	ldr	r3, [r3, #16]
 8034b2e:	429a      	cmp	r2, r3
 8034b30:	d106      	bne.n	8034b40 <ip_reass_remove_oldest_datagram+0x4c>
 8034b32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8034b34:	899a      	ldrh	r2, [r3, #12]
 8034b36:	687b      	ldr	r3, [r7, #4]
 8034b38:	889b      	ldrh	r3, [r3, #4]
 8034b3a:	b29b      	uxth	r3, r3
 8034b3c:	429a      	cmp	r2, r3
 8034b3e:	d014      	beq.n	8034b6a <ip_reass_remove_oldest_datagram+0x76>
        /* Not the same datagram as fraghdr */
        other_datagrams++;
 8034b40:	693b      	ldr	r3, [r7, #16]
 8034b42:	3301      	adds	r3, #1
 8034b44:	613b      	str	r3, [r7, #16]
        if (oldest == NULL) {
 8034b46:	6a3b      	ldr	r3, [r7, #32]
 8034b48:	2b00      	cmp	r3, #0
 8034b4a:	d104      	bne.n	8034b56 <ip_reass_remove_oldest_datagram+0x62>
          oldest = r;
 8034b4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8034b4e:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 8034b50:	69fb      	ldr	r3, [r7, #28]
 8034b52:	61bb      	str	r3, [r7, #24]
 8034b54:	e009      	b.n	8034b6a <ip_reass_remove_oldest_datagram+0x76>
        } else if (r->timer <= oldest->timer) {
 8034b56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8034b58:	7fda      	ldrb	r2, [r3, #31]
 8034b5a:	6a3b      	ldr	r3, [r7, #32]
 8034b5c:	7fdb      	ldrb	r3, [r3, #31]
 8034b5e:	429a      	cmp	r2, r3
 8034b60:	d803      	bhi.n	8034b6a <ip_reass_remove_oldest_datagram+0x76>
          /* older than the previous oldest */
          oldest = r;
 8034b62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8034b64:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 8034b66:	69fb      	ldr	r3, [r7, #28]
 8034b68:	61bb      	str	r3, [r7, #24]
        }
      }
      if (r->next != NULL) {
 8034b6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8034b6c:	681b      	ldr	r3, [r3, #0]
 8034b6e:	2b00      	cmp	r3, #0
 8034b70:	d001      	beq.n	8034b76 <ip_reass_remove_oldest_datagram+0x82>
        prev = r;
 8034b72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8034b74:	61fb      	str	r3, [r7, #28]
      }
      r = r->next;
 8034b76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8034b78:	681b      	ldr	r3, [r3, #0]
 8034b7a:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 8034b7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8034b7e:	2b00      	cmp	r3, #0
 8034b80:	d1cb      	bne.n	8034b1a <ip_reass_remove_oldest_datagram+0x26>
    }
    if (oldest != NULL) {
 8034b82:	6a3b      	ldr	r3, [r7, #32]
 8034b84:	2b00      	cmp	r3, #0
 8034b86:	d008      	beq.n	8034b9a <ip_reass_remove_oldest_datagram+0xa6>
      pbufs_freed_current = ip_reass_free_complete_datagram(oldest, oldest_prev);
 8034b88:	69b9      	ldr	r1, [r7, #24]
 8034b8a:	6a38      	ldr	r0, [r7, #32]
 8034b8c:	f7ff ff0e 	bl	80349ac <ip_reass_free_complete_datagram>
 8034b90:	60f8      	str	r0, [r7, #12]
      pbufs_freed += pbufs_freed_current;
 8034b92:	697a      	ldr	r2, [r7, #20]
 8034b94:	68fb      	ldr	r3, [r7, #12]
 8034b96:	4413      	add	r3, r2
 8034b98:	617b      	str	r3, [r7, #20]
    }
  } while ((pbufs_freed < pbufs_needed) && (other_datagrams > 1));
 8034b9a:	697a      	ldr	r2, [r7, #20]
 8034b9c:	683b      	ldr	r3, [r7, #0]
 8034b9e:	429a      	cmp	r2, r3
 8034ba0:	da02      	bge.n	8034ba8 <ip_reass_remove_oldest_datagram+0xb4>
 8034ba2:	693b      	ldr	r3, [r7, #16]
 8034ba4:	2b01      	cmp	r3, #1
 8034ba6:	dcac      	bgt.n	8034b02 <ip_reass_remove_oldest_datagram+0xe>
  return pbufs_freed;
 8034ba8:	697b      	ldr	r3, [r7, #20]
}
 8034baa:	4618      	mov	r0, r3
 8034bac:	3728      	adds	r7, #40	; 0x28
 8034bae:	46bd      	mov	sp, r7
 8034bb0:	bd80      	pop	{r7, pc}
 8034bb2:	bf00      	nop
 8034bb4:	2000ef60 	.word	0x2000ef60

08034bb8 <ip_reass_enqueue_new_datagram>:
 * @param clen number of pbufs needed to enqueue (used for freeing other datagrams if not enough space)
 * @return A pointer to the queue location into which the fragment was enqueued
 */
static struct ip_reassdata *
ip_reass_enqueue_new_datagram(struct ip_hdr *fraghdr, int clen)
{
 8034bb8:	b580      	push	{r7, lr}
 8034bba:	b084      	sub	sp, #16
 8034bbc:	af00      	add	r7, sp, #0
 8034bbe:	6078      	str	r0, [r7, #4]
 8034bc0:	6039      	str	r1, [r7, #0]
#if ! IP_REASS_FREE_OLDEST
  LWIP_UNUSED_ARG(clen);
#endif

  /* No matching previous fragment found, allocate a new reassdata struct */
  ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 8034bc2:	2004      	movs	r0, #4
 8034bc4:	f7f6 fa4a 	bl	802b05c <memp_malloc>
 8034bc8:	60f8      	str	r0, [r7, #12]
  if (ipr == NULL) {
 8034bca:	68fb      	ldr	r3, [r7, #12]
 8034bcc:	2b00      	cmp	r3, #0
 8034bce:	d116      	bne.n	8034bfe <ip_reass_enqueue_new_datagram+0x46>
#if IP_REASS_FREE_OLDEST
    if (ip_reass_remove_oldest_datagram(fraghdr, clen) >= clen) {
 8034bd0:	6839      	ldr	r1, [r7, #0]
 8034bd2:	6878      	ldr	r0, [r7, #4]
 8034bd4:	f7ff ff8e 	bl	8034af4 <ip_reass_remove_oldest_datagram>
 8034bd8:	4602      	mov	r2, r0
 8034bda:	683b      	ldr	r3, [r7, #0]
 8034bdc:	4293      	cmp	r3, r2
 8034bde:	dc03      	bgt.n	8034be8 <ip_reass_enqueue_new_datagram+0x30>
      ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 8034be0:	2004      	movs	r0, #4
 8034be2:	f7f6 fa3b 	bl	802b05c <memp_malloc>
 8034be6:	60f8      	str	r0, [r7, #12]
    }
    if (ipr == NULL)
 8034be8:	68fb      	ldr	r3, [r7, #12]
 8034bea:	2b00      	cmp	r3, #0
 8034bec:	d107      	bne.n	8034bfe <ip_reass_enqueue_new_datagram+0x46>
#endif /* IP_REASS_FREE_OLDEST */
    {
      IPFRAG_STATS_INC(ip_frag.memerr);
 8034bee:	4b11      	ldr	r3, [pc, #68]	; (8034c34 <ip_reass_enqueue_new_datagram+0x7c>)
 8034bf0:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 8034bf2:	3301      	adds	r3, #1
 8034bf4:	b29a      	uxth	r2, r3
 8034bf6:	4b0f      	ldr	r3, [pc, #60]	; (8034c34 <ip_reass_enqueue_new_datagram+0x7c>)
 8034bf8:	879a      	strh	r2, [r3, #60]	; 0x3c
      LWIP_DEBUGF(IP_REASS_DEBUG, ("Failed to alloc reassdata struct\n"));
      return NULL;
 8034bfa:	2300      	movs	r3, #0
 8034bfc:	e016      	b.n	8034c2c <ip_reass_enqueue_new_datagram+0x74>
    }
  }
  memset(ipr, 0, sizeof(struct ip_reassdata));
 8034bfe:	2220      	movs	r2, #32
 8034c00:	2100      	movs	r1, #0
 8034c02:	68f8      	ldr	r0, [r7, #12]
 8034c04:	f001 f9e0 	bl	8035fc8 <memset>
  ipr->timer = IP_REASS_MAXAGE;
 8034c08:	68fb      	ldr	r3, [r7, #12]
 8034c0a:	220f      	movs	r2, #15
 8034c0c:	77da      	strb	r2, [r3, #31]

  /* enqueue the new structure to the front of the list */
  ipr->next = reassdatagrams;
 8034c0e:	4b0a      	ldr	r3, [pc, #40]	; (8034c38 <ip_reass_enqueue_new_datagram+0x80>)
 8034c10:	681a      	ldr	r2, [r3, #0]
 8034c12:	68fb      	ldr	r3, [r7, #12]
 8034c14:	601a      	str	r2, [r3, #0]
  reassdatagrams = ipr;
 8034c16:	4a08      	ldr	r2, [pc, #32]	; (8034c38 <ip_reass_enqueue_new_datagram+0x80>)
 8034c18:	68fb      	ldr	r3, [r7, #12]
 8034c1a:	6013      	str	r3, [r2, #0]
  /* copy the ip header for later tests and input */
  /* @todo: no ip options supported? */
  SMEMCPY(&(ipr->iphdr), fraghdr, IP_HLEN);
 8034c1c:	68fb      	ldr	r3, [r7, #12]
 8034c1e:	3308      	adds	r3, #8
 8034c20:	2214      	movs	r2, #20
 8034c22:	6879      	ldr	r1, [r7, #4]
 8034c24:	4618      	mov	r0, r3
 8034c26:	f001 f9a7 	bl	8035f78 <memcpy>
  return ipr;
 8034c2a:	68fb      	ldr	r3, [r7, #12]
}
 8034c2c:	4618      	mov	r0, r3
 8034c2e:	3710      	adds	r7, #16
 8034c30:	46bd      	mov	sp, r7
 8034c32:	bd80      	pop	{r7, pc}
 8034c34:	2000ed10 	.word	0x2000ed10
 8034c38:	2000ef60 	.word	0x2000ef60

08034c3c <ip_reass_dequeue_datagram>:
 * Dequeues a datagram from the datagram queue. Doesn't deallocate the pbufs.
 * @param ipr points to the queue entry to dequeue
 */
static void
ip_reass_dequeue_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 8034c3c:	b580      	push	{r7, lr}
 8034c3e:	b082      	sub	sp, #8
 8034c40:	af00      	add	r7, sp, #0
 8034c42:	6078      	str	r0, [r7, #4]
 8034c44:	6039      	str	r1, [r7, #0]
  /* dequeue the reass struct  */
  if (reassdatagrams == ipr) {
 8034c46:	4b10      	ldr	r3, [pc, #64]	; (8034c88 <ip_reass_dequeue_datagram+0x4c>)
 8034c48:	681b      	ldr	r3, [r3, #0]
 8034c4a:	687a      	ldr	r2, [r7, #4]
 8034c4c:	429a      	cmp	r2, r3
 8034c4e:	d104      	bne.n	8034c5a <ip_reass_dequeue_datagram+0x1e>
    /* it was the first in the list */
    reassdatagrams = ipr->next;
 8034c50:	687b      	ldr	r3, [r7, #4]
 8034c52:	681b      	ldr	r3, [r3, #0]
 8034c54:	4a0c      	ldr	r2, [pc, #48]	; (8034c88 <ip_reass_dequeue_datagram+0x4c>)
 8034c56:	6013      	str	r3, [r2, #0]
 8034c58:	e00d      	b.n	8034c76 <ip_reass_dequeue_datagram+0x3a>
  } else {
    /* it wasn't the first, so it must have a valid 'prev' */
    LWIP_ASSERT("sanity check linked list", prev != NULL);
 8034c5a:	683b      	ldr	r3, [r7, #0]
 8034c5c:	2b00      	cmp	r3, #0
 8034c5e:	d106      	bne.n	8034c6e <ip_reass_dequeue_datagram+0x32>
 8034c60:	4b0a      	ldr	r3, [pc, #40]	; (8034c8c <ip_reass_dequeue_datagram+0x50>)
 8034c62:	f240 1245 	movw	r2, #325	; 0x145
 8034c66:	490a      	ldr	r1, [pc, #40]	; (8034c90 <ip_reass_dequeue_datagram+0x54>)
 8034c68:	480a      	ldr	r0, [pc, #40]	; (8034c94 <ip_reass_dequeue_datagram+0x58>)
 8034c6a:	f001 fa95 	bl	8036198 <iprintf>
    prev->next = ipr->next;
 8034c6e:	687b      	ldr	r3, [r7, #4]
 8034c70:	681a      	ldr	r2, [r3, #0]
 8034c72:	683b      	ldr	r3, [r7, #0]
 8034c74:	601a      	str	r2, [r3, #0]
  }

  /* now we can free the ip_reassdata struct */
  memp_free(MEMP_REASSDATA, ipr);
 8034c76:	6879      	ldr	r1, [r7, #4]
 8034c78:	2004      	movs	r0, #4
 8034c7a:	f7f6 fa6b 	bl	802b154 <memp_free>
}
 8034c7e:	bf00      	nop
 8034c80:	3708      	adds	r7, #8
 8034c82:	46bd      	mov	sp, r7
 8034c84:	bd80      	pop	{r7, pc}
 8034c86:	bf00      	nop
 8034c88:	2000ef60 	.word	0x2000ef60
 8034c8c:	0803a798 	.word	0x0803a798
 8034c90:	0803a860 	.word	0x0803a860
 8034c94:	0803a7e0 	.word	0x0803a7e0

08034c98 <ip_reass_chain_frag_into_datagram_and_validate>:
 * @param is_last is 1 if this pbuf has MF==0 (ipr->flags not updated yet)
 * @return see IP_REASS_VALIDATE_* defines
 */
static int
ip_reass_chain_frag_into_datagram_and_validate(struct ip_reassdata *ipr, struct pbuf *new_p, int is_last)
{
 8034c98:	b580      	push	{r7, lr}
 8034c9a:	b08c      	sub	sp, #48	; 0x30
 8034c9c:	af00      	add	r7, sp, #0
 8034c9e:	60f8      	str	r0, [r7, #12]
 8034ca0:	60b9      	str	r1, [r7, #8]
 8034ca2:	607a      	str	r2, [r7, #4]
  struct ip_reass_helper *iprh, *iprh_tmp, *iprh_prev = NULL;
 8034ca4:	2300      	movs	r3, #0
 8034ca6:	62bb      	str	r3, [r7, #40]	; 0x28
  struct pbuf *q;
  u16_t offset, len;
  u8_t hlen;
  struct ip_hdr *fraghdr;
  int valid = 1;
 8034ca8:	2301      	movs	r3, #1
 8034caa:	623b      	str	r3, [r7, #32]

  /* Extract length and fragment offset from current fragment */
  fraghdr = (struct ip_hdr *)new_p->payload;
 8034cac:	68bb      	ldr	r3, [r7, #8]
 8034cae:	685b      	ldr	r3, [r3, #4]
 8034cb0:	61fb      	str	r3, [r7, #28]
  len = lwip_ntohs(IPH_LEN(fraghdr));
 8034cb2:	69fb      	ldr	r3, [r7, #28]
 8034cb4:	885b      	ldrh	r3, [r3, #2]
 8034cb6:	b29b      	uxth	r3, r3
 8034cb8:	4618      	mov	r0, r3
 8034cba:	f7f5 fc2d 	bl	802a518 <lwip_htons>
 8034cbe:	4603      	mov	r3, r0
 8034cc0:	837b      	strh	r3, [r7, #26]
  hlen = IPH_HL_BYTES(fraghdr);
 8034cc2:	69fb      	ldr	r3, [r7, #28]
 8034cc4:	781b      	ldrb	r3, [r3, #0]
 8034cc6:	f003 030f 	and.w	r3, r3, #15
 8034cca:	b2db      	uxtb	r3, r3
 8034ccc:	009b      	lsls	r3, r3, #2
 8034cce:	767b      	strb	r3, [r7, #25]
  if (hlen > len) {
 8034cd0:	7e7b      	ldrb	r3, [r7, #25]
 8034cd2:	b29b      	uxth	r3, r3
 8034cd4:	8b7a      	ldrh	r2, [r7, #26]
 8034cd6:	429a      	cmp	r2, r3
 8034cd8:	d202      	bcs.n	8034ce0 <ip_reass_chain_frag_into_datagram_and_validate+0x48>
    /* invalid datagram */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 8034cda:	f04f 33ff 	mov.w	r3, #4294967295
 8034cde:	e135      	b.n	8034f4c <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  len = (u16_t)(len - hlen);
 8034ce0:	7e7b      	ldrb	r3, [r7, #25]
 8034ce2:	b29b      	uxth	r3, r3
 8034ce4:	8b7a      	ldrh	r2, [r7, #26]
 8034ce6:	1ad3      	subs	r3, r2, r3
 8034ce8:	837b      	strh	r3, [r7, #26]
  offset = IPH_OFFSET_BYTES(fraghdr);
 8034cea:	69fb      	ldr	r3, [r7, #28]
 8034cec:	88db      	ldrh	r3, [r3, #6]
 8034cee:	b29b      	uxth	r3, r3
 8034cf0:	4618      	mov	r0, r3
 8034cf2:	f7f5 fc11 	bl	802a518 <lwip_htons>
 8034cf6:	4603      	mov	r3, r0
 8034cf8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8034cfc:	b29b      	uxth	r3, r3
 8034cfe:	00db      	lsls	r3, r3, #3
 8034d00:	82fb      	strh	r3, [r7, #22]
  /* overwrite the fragment's ip header from the pbuf with our helper struct,
   * and setup the embedded helper structure. */
  /* make sure the struct ip_reass_helper fits into the IP header */
  LWIP_ASSERT("sizeof(struct ip_reass_helper) <= IP_HLEN",
              sizeof(struct ip_reass_helper) <= IP_HLEN);
  iprh = (struct ip_reass_helper *)new_p->payload;
 8034d02:	68bb      	ldr	r3, [r7, #8]
 8034d04:	685b      	ldr	r3, [r3, #4]
 8034d06:	62fb      	str	r3, [r7, #44]	; 0x2c
  iprh->next_pbuf = NULL;
 8034d08:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8034d0a:	2200      	movs	r2, #0
 8034d0c:	701a      	strb	r2, [r3, #0]
 8034d0e:	2200      	movs	r2, #0
 8034d10:	705a      	strb	r2, [r3, #1]
 8034d12:	2200      	movs	r2, #0
 8034d14:	709a      	strb	r2, [r3, #2]
 8034d16:	2200      	movs	r2, #0
 8034d18:	70da      	strb	r2, [r3, #3]
  iprh->start = offset;
 8034d1a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8034d1c:	8afa      	ldrh	r2, [r7, #22]
 8034d1e:	809a      	strh	r2, [r3, #4]
  iprh->end = (u16_t)(offset + len);
 8034d20:	8afa      	ldrh	r2, [r7, #22]
 8034d22:	8b7b      	ldrh	r3, [r7, #26]
 8034d24:	4413      	add	r3, r2
 8034d26:	b29a      	uxth	r2, r3
 8034d28:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8034d2a:	80da      	strh	r2, [r3, #6]
  if (iprh->end < offset) {
 8034d2c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8034d2e:	88db      	ldrh	r3, [r3, #6]
 8034d30:	b29b      	uxth	r3, r3
 8034d32:	8afa      	ldrh	r2, [r7, #22]
 8034d34:	429a      	cmp	r2, r3
 8034d36:	d902      	bls.n	8034d3e <ip_reass_chain_frag_into_datagram_and_validate+0xa6>
    /* u16_t overflow, cannot handle this */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 8034d38:	f04f 33ff 	mov.w	r3, #4294967295
 8034d3c:	e106      	b.n	8034f4c <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }

  /* Iterate through until we either get to the end of the list (append),
   * or we find one with a larger offset (insert). */
  for (q = ipr->p; q != NULL;) {
 8034d3e:	68fb      	ldr	r3, [r7, #12]
 8034d40:	685b      	ldr	r3, [r3, #4]
 8034d42:	627b      	str	r3, [r7, #36]	; 0x24
 8034d44:	e068      	b.n	8034e18 <ip_reass_chain_frag_into_datagram_and_validate+0x180>
    iprh_tmp = (struct ip_reass_helper *)q->payload;
 8034d46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8034d48:	685b      	ldr	r3, [r3, #4]
 8034d4a:	613b      	str	r3, [r7, #16]
    if (iprh->start < iprh_tmp->start) {
 8034d4c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8034d4e:	889b      	ldrh	r3, [r3, #4]
 8034d50:	b29a      	uxth	r2, r3
 8034d52:	693b      	ldr	r3, [r7, #16]
 8034d54:	889b      	ldrh	r3, [r3, #4]
 8034d56:	b29b      	uxth	r3, r3
 8034d58:	429a      	cmp	r2, r3
 8034d5a:	d235      	bcs.n	8034dc8 <ip_reass_chain_frag_into_datagram_and_validate+0x130>
      /* the new pbuf should be inserted before this */
      iprh->next_pbuf = q;
 8034d5c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8034d5e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8034d60:	601a      	str	r2, [r3, #0]
      if (iprh_prev != NULL) {
 8034d62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8034d64:	2b00      	cmp	r3, #0
 8034d66:	d020      	beq.n	8034daa <ip_reass_chain_frag_into_datagram_and_validate+0x112>
        /* not the fragment with the lowest offset */
#if IP_REASS_CHECK_OVERLAP
        if ((iprh->start < iprh_prev->end) || (iprh->end > iprh_tmp->start)) {
 8034d68:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8034d6a:	889b      	ldrh	r3, [r3, #4]
 8034d6c:	b29a      	uxth	r2, r3
 8034d6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8034d70:	88db      	ldrh	r3, [r3, #6]
 8034d72:	b29b      	uxth	r3, r3
 8034d74:	429a      	cmp	r2, r3
 8034d76:	d307      	bcc.n	8034d88 <ip_reass_chain_frag_into_datagram_and_validate+0xf0>
 8034d78:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8034d7a:	88db      	ldrh	r3, [r3, #6]
 8034d7c:	b29a      	uxth	r2, r3
 8034d7e:	693b      	ldr	r3, [r7, #16]
 8034d80:	889b      	ldrh	r3, [r3, #4]
 8034d82:	b29b      	uxth	r3, r3
 8034d84:	429a      	cmp	r2, r3
 8034d86:	d902      	bls.n	8034d8e <ip_reass_chain_frag_into_datagram_and_validate+0xf6>
          /* fragment overlaps with previous or following, throw away */
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 8034d88:	f04f 33ff 	mov.w	r3, #4294967295
 8034d8c:	e0de      	b.n	8034f4c <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        iprh_prev->next_pbuf = new_p;
 8034d8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8034d90:	68ba      	ldr	r2, [r7, #8]
 8034d92:	601a      	str	r2, [r3, #0]
        if (iprh_prev->end != iprh->start) {
 8034d94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8034d96:	88db      	ldrh	r3, [r3, #6]
 8034d98:	b29a      	uxth	r2, r3
 8034d9a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8034d9c:	889b      	ldrh	r3, [r3, #4]
 8034d9e:	b29b      	uxth	r3, r3
 8034da0:	429a      	cmp	r2, r3
 8034da2:	d03d      	beq.n	8034e20 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 8034da4:	2300      	movs	r3, #0
 8034da6:	623b      	str	r3, [r7, #32]
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        /* fragment with the lowest offset */
        ipr->p = new_p;
      }
      break;
 8034da8:	e03a      	b.n	8034e20 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
        if (iprh->end > iprh_tmp->start) {
 8034daa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8034dac:	88db      	ldrh	r3, [r3, #6]
 8034dae:	b29a      	uxth	r2, r3
 8034db0:	693b      	ldr	r3, [r7, #16]
 8034db2:	889b      	ldrh	r3, [r3, #4]
 8034db4:	b29b      	uxth	r3, r3
 8034db6:	429a      	cmp	r2, r3
 8034db8:	d902      	bls.n	8034dc0 <ip_reass_chain_frag_into_datagram_and_validate+0x128>
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 8034dba:	f04f 33ff 	mov.w	r3, #4294967295
 8034dbe:	e0c5      	b.n	8034f4c <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        ipr->p = new_p;
 8034dc0:	68fb      	ldr	r3, [r7, #12]
 8034dc2:	68ba      	ldr	r2, [r7, #8]
 8034dc4:	605a      	str	r2, [r3, #4]
      break;
 8034dc6:	e02b      	b.n	8034e20 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
    } else if (iprh->start == iprh_tmp->start) {
 8034dc8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8034dca:	889b      	ldrh	r3, [r3, #4]
 8034dcc:	b29a      	uxth	r2, r3
 8034dce:	693b      	ldr	r3, [r7, #16]
 8034dd0:	889b      	ldrh	r3, [r3, #4]
 8034dd2:	b29b      	uxth	r3, r3
 8034dd4:	429a      	cmp	r2, r3
 8034dd6:	d102      	bne.n	8034dde <ip_reass_chain_frag_into_datagram_and_validate+0x146>
      /* received the same datagram twice: no need to keep the datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 8034dd8:	f04f 33ff 	mov.w	r3, #4294967295
 8034ddc:	e0b6      	b.n	8034f4c <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#if IP_REASS_CHECK_OVERLAP
    } else if (iprh->start < iprh_tmp->end) {
 8034dde:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8034de0:	889b      	ldrh	r3, [r3, #4]
 8034de2:	b29a      	uxth	r2, r3
 8034de4:	693b      	ldr	r3, [r7, #16]
 8034de6:	88db      	ldrh	r3, [r3, #6]
 8034de8:	b29b      	uxth	r3, r3
 8034dea:	429a      	cmp	r2, r3
 8034dec:	d202      	bcs.n	8034df4 <ip_reass_chain_frag_into_datagram_and_validate+0x15c>
      /* overlap: no need to keep the new datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 8034dee:	f04f 33ff 	mov.w	r3, #4294967295
 8034df2:	e0ab      	b.n	8034f4c <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#endif /* IP_REASS_CHECK_OVERLAP */
    } else {
      /* Check if the fragments received so far have no holes. */
      if (iprh_prev != NULL) {
 8034df4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8034df6:	2b00      	cmp	r3, #0
 8034df8:	d009      	beq.n	8034e0e <ip_reass_chain_frag_into_datagram_and_validate+0x176>
        if (iprh_prev->end != iprh_tmp->start) {
 8034dfa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8034dfc:	88db      	ldrh	r3, [r3, #6]
 8034dfe:	b29a      	uxth	r2, r3
 8034e00:	693b      	ldr	r3, [r7, #16]
 8034e02:	889b      	ldrh	r3, [r3, #4]
 8034e04:	b29b      	uxth	r3, r3
 8034e06:	429a      	cmp	r2, r3
 8034e08:	d001      	beq.n	8034e0e <ip_reass_chain_frag_into_datagram_and_validate+0x176>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 8034e0a:	2300      	movs	r3, #0
 8034e0c:	623b      	str	r3, [r7, #32]
        }
      }
    }
    q = iprh_tmp->next_pbuf;
 8034e0e:	693b      	ldr	r3, [r7, #16]
 8034e10:	681b      	ldr	r3, [r3, #0]
 8034e12:	627b      	str	r3, [r7, #36]	; 0x24
    iprh_prev = iprh_tmp;
 8034e14:	693b      	ldr	r3, [r7, #16]
 8034e16:	62bb      	str	r3, [r7, #40]	; 0x28
  for (q = ipr->p; q != NULL;) {
 8034e18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8034e1a:	2b00      	cmp	r3, #0
 8034e1c:	d193      	bne.n	8034d46 <ip_reass_chain_frag_into_datagram_and_validate+0xae>
 8034e1e:	e000      	b.n	8034e22 <ip_reass_chain_frag_into_datagram_and_validate+0x18a>
      break;
 8034e20:	bf00      	nop
  }

  /* If q is NULL, then we made it to the end of the list. Determine what to do now */
  if (q == NULL) {
 8034e22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8034e24:	2b00      	cmp	r3, #0
 8034e26:	d12d      	bne.n	8034e84 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
    if (iprh_prev != NULL) {
 8034e28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8034e2a:	2b00      	cmp	r3, #0
 8034e2c:	d01c      	beq.n	8034e68 <ip_reass_chain_frag_into_datagram_and_validate+0x1d0>
      /* this is (for now), the fragment with the highest offset:
       * chain it to the last fragment */
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("check fragments don't overlap", iprh_prev->end <= iprh->start);
 8034e2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8034e30:	88db      	ldrh	r3, [r3, #6]
 8034e32:	b29a      	uxth	r2, r3
 8034e34:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8034e36:	889b      	ldrh	r3, [r3, #4]
 8034e38:	b29b      	uxth	r3, r3
 8034e3a:	429a      	cmp	r2, r3
 8034e3c:	d906      	bls.n	8034e4c <ip_reass_chain_frag_into_datagram_and_validate+0x1b4>
 8034e3e:	4b45      	ldr	r3, [pc, #276]	; (8034f54 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8034e40:	f44f 72db 	mov.w	r2, #438	; 0x1b6
 8034e44:	4944      	ldr	r1, [pc, #272]	; (8034f58 <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 8034e46:	4845      	ldr	r0, [pc, #276]	; (8034f5c <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8034e48:	f001 f9a6 	bl	8036198 <iprintf>
#endif /* IP_REASS_CHECK_OVERLAP */
      iprh_prev->next_pbuf = new_p;
 8034e4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8034e4e:	68ba      	ldr	r2, [r7, #8]
 8034e50:	601a      	str	r2, [r3, #0]
      if (iprh_prev->end != iprh->start) {
 8034e52:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8034e54:	88db      	ldrh	r3, [r3, #6]
 8034e56:	b29a      	uxth	r2, r3
 8034e58:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8034e5a:	889b      	ldrh	r3, [r3, #4]
 8034e5c:	b29b      	uxth	r3, r3
 8034e5e:	429a      	cmp	r2, r3
 8034e60:	d010      	beq.n	8034e84 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
        valid = 0;
 8034e62:	2300      	movs	r3, #0
 8034e64:	623b      	str	r3, [r7, #32]
 8034e66:	e00d      	b.n	8034e84 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
      }
    } else {
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("no previous fragment, this must be the first fragment!",
 8034e68:	68fb      	ldr	r3, [r7, #12]
 8034e6a:	685b      	ldr	r3, [r3, #4]
 8034e6c:	2b00      	cmp	r3, #0
 8034e6e:	d006      	beq.n	8034e7e <ip_reass_chain_frag_into_datagram_and_validate+0x1e6>
 8034e70:	4b38      	ldr	r3, [pc, #224]	; (8034f54 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8034e72:	f44f 72df 	mov.w	r2, #446	; 0x1be
 8034e76:	493a      	ldr	r1, [pc, #232]	; (8034f60 <ip_reass_chain_frag_into_datagram_and_validate+0x2c8>)
 8034e78:	4838      	ldr	r0, [pc, #224]	; (8034f5c <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8034e7a:	f001 f98d 	bl	8036198 <iprintf>
                  ipr->p == NULL);
#endif /* IP_REASS_CHECK_OVERLAP */
      /* this is the first fragment we ever received for this ip datagram */
      ipr->p = new_p;
 8034e7e:	68fb      	ldr	r3, [r7, #12]
 8034e80:	68ba      	ldr	r2, [r7, #8]
 8034e82:	605a      	str	r2, [r3, #4]
    }
  }

  /* At this point, the validation part begins: */
  /* If we already received the last fragment */
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
 8034e84:	687b      	ldr	r3, [r7, #4]
 8034e86:	2b00      	cmp	r3, #0
 8034e88:	d105      	bne.n	8034e96 <ip_reass_chain_frag_into_datagram_and_validate+0x1fe>
 8034e8a:	68fb      	ldr	r3, [r7, #12]
 8034e8c:	7f9b      	ldrb	r3, [r3, #30]
 8034e8e:	f003 0301 	and.w	r3, r3, #1
 8034e92:	2b00      	cmp	r3, #0
 8034e94:	d059      	beq.n	8034f4a <ip_reass_chain_frag_into_datagram_and_validate+0x2b2>
    /* and had no holes so far */
    if (valid) {
 8034e96:	6a3b      	ldr	r3, [r7, #32]
 8034e98:	2b00      	cmp	r3, #0
 8034e9a:	d04f      	beq.n	8034f3c <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      /* then check if the rest of the fragments is here */
      /* Check if the queue starts with the first datagram */
      if ((ipr->p == NULL) || (((struct ip_reass_helper *)ipr->p->payload)->start != 0)) {
 8034e9c:	68fb      	ldr	r3, [r7, #12]
 8034e9e:	685b      	ldr	r3, [r3, #4]
 8034ea0:	2b00      	cmp	r3, #0
 8034ea2:	d006      	beq.n	8034eb2 <ip_reass_chain_frag_into_datagram_and_validate+0x21a>
 8034ea4:	68fb      	ldr	r3, [r7, #12]
 8034ea6:	685b      	ldr	r3, [r3, #4]
 8034ea8:	685b      	ldr	r3, [r3, #4]
 8034eaa:	889b      	ldrh	r3, [r3, #4]
 8034eac:	b29b      	uxth	r3, r3
 8034eae:	2b00      	cmp	r3, #0
 8034eb0:	d002      	beq.n	8034eb8 <ip_reass_chain_frag_into_datagram_and_validate+0x220>
        valid = 0;
 8034eb2:	2300      	movs	r3, #0
 8034eb4:	623b      	str	r3, [r7, #32]
 8034eb6:	e041      	b.n	8034f3c <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      } else {
        /* and check that there are no holes after this datagram */
        iprh_prev = iprh;
 8034eb8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8034eba:	62bb      	str	r3, [r7, #40]	; 0x28
        q = iprh->next_pbuf;
 8034ebc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8034ebe:	681b      	ldr	r3, [r3, #0]
 8034ec0:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 8034ec2:	e012      	b.n	8034eea <ip_reass_chain_frag_into_datagram_and_validate+0x252>
          iprh = (struct ip_reass_helper *)q->payload;
 8034ec4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8034ec6:	685b      	ldr	r3, [r3, #4]
 8034ec8:	62fb      	str	r3, [r7, #44]	; 0x2c
          if (iprh_prev->end != iprh->start) {
 8034eca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8034ecc:	88db      	ldrh	r3, [r3, #6]
 8034ece:	b29a      	uxth	r2, r3
 8034ed0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8034ed2:	889b      	ldrh	r3, [r3, #4]
 8034ed4:	b29b      	uxth	r3, r3
 8034ed6:	429a      	cmp	r2, r3
 8034ed8:	d002      	beq.n	8034ee0 <ip_reass_chain_frag_into_datagram_and_validate+0x248>
            valid = 0;
 8034eda:	2300      	movs	r3, #0
 8034edc:	623b      	str	r3, [r7, #32]
            break;
 8034ede:	e007      	b.n	8034ef0 <ip_reass_chain_frag_into_datagram_and_validate+0x258>
          }
          iprh_prev = iprh;
 8034ee0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8034ee2:	62bb      	str	r3, [r7, #40]	; 0x28
          q = iprh->next_pbuf;
 8034ee4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8034ee6:	681b      	ldr	r3, [r3, #0]
 8034ee8:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 8034eea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8034eec:	2b00      	cmp	r3, #0
 8034eee:	d1e9      	bne.n	8034ec4 <ip_reass_chain_frag_into_datagram_and_validate+0x22c>
        }
        /* if still valid, all fragments are received
         * (because to the MF==0 already arrived */
        if (valid) {
 8034ef0:	6a3b      	ldr	r3, [r7, #32]
 8034ef2:	2b00      	cmp	r3, #0
 8034ef4:	d022      	beq.n	8034f3c <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
          LWIP_ASSERT("sanity check", ipr->p != NULL);
 8034ef6:	68fb      	ldr	r3, [r7, #12]
 8034ef8:	685b      	ldr	r3, [r3, #4]
 8034efa:	2b00      	cmp	r3, #0
 8034efc:	d106      	bne.n	8034f0c <ip_reass_chain_frag_into_datagram_and_validate+0x274>
 8034efe:	4b15      	ldr	r3, [pc, #84]	; (8034f54 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8034f00:	f240 12df 	movw	r2, #479	; 0x1df
 8034f04:	4917      	ldr	r1, [pc, #92]	; (8034f64 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 8034f06:	4815      	ldr	r0, [pc, #84]	; (8034f5c <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8034f08:	f001 f946 	bl	8036198 <iprintf>
          LWIP_ASSERT("sanity check",
 8034f0c:	68fb      	ldr	r3, [r7, #12]
 8034f0e:	685b      	ldr	r3, [r3, #4]
 8034f10:	685b      	ldr	r3, [r3, #4]
 8034f12:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8034f14:	429a      	cmp	r2, r3
 8034f16:	d106      	bne.n	8034f26 <ip_reass_chain_frag_into_datagram_and_validate+0x28e>
 8034f18:	4b0e      	ldr	r3, [pc, #56]	; (8034f54 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8034f1a:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8034f1e:	4911      	ldr	r1, [pc, #68]	; (8034f64 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 8034f20:	480e      	ldr	r0, [pc, #56]	; (8034f5c <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8034f22:	f001 f939 	bl	8036198 <iprintf>
                      ((struct ip_reass_helper *)ipr->p->payload) != iprh);
          LWIP_ASSERT("validate_datagram:next_pbuf!=NULL",
 8034f26:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8034f28:	681b      	ldr	r3, [r3, #0]
 8034f2a:	2b00      	cmp	r3, #0
 8034f2c:	d006      	beq.n	8034f3c <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
 8034f2e:	4b09      	ldr	r3, [pc, #36]	; (8034f54 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8034f30:	f44f 72f1 	mov.w	r2, #482	; 0x1e2
 8034f34:	490c      	ldr	r1, [pc, #48]	; (8034f68 <ip_reass_chain_frag_into_datagram_and_validate+0x2d0>)
 8034f36:	4809      	ldr	r0, [pc, #36]	; (8034f5c <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8034f38:	f001 f92e 	bl	8036198 <iprintf>
      }
    }
    /* If valid is 0 here, there are some fragments missing in the middle
     * (since MF == 0 has already arrived). Such datagrams simply time out if
     * no more fragments are received... */
    return valid ? IP_REASS_VALIDATE_TELEGRAM_FINISHED : IP_REASS_VALIDATE_PBUF_QUEUED;
 8034f3c:	6a3b      	ldr	r3, [r7, #32]
 8034f3e:	2b00      	cmp	r3, #0
 8034f40:	bf14      	ite	ne
 8034f42:	2301      	movne	r3, #1
 8034f44:	2300      	moveq	r3, #0
 8034f46:	b2db      	uxtb	r3, r3
 8034f48:	e000      	b.n	8034f4c <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  /* If we come here, not all fragments were received, yet! */
  return IP_REASS_VALIDATE_PBUF_QUEUED; /* not yet valid! */
 8034f4a:	2300      	movs	r3, #0
}
 8034f4c:	4618      	mov	r0, r3
 8034f4e:	3730      	adds	r7, #48	; 0x30
 8034f50:	46bd      	mov	sp, r7
 8034f52:	bd80      	pop	{r7, pc}
 8034f54:	0803a798 	.word	0x0803a798
 8034f58:	0803a87c 	.word	0x0803a87c
 8034f5c:	0803a7e0 	.word	0x0803a7e0
 8034f60:	0803a89c 	.word	0x0803a89c
 8034f64:	0803a8d4 	.word	0x0803a8d4
 8034f68:	0803a8e4 	.word	0x0803a8e4

08034f6c <ip4_reass>:
 * @param p points to a pbuf chain of the fragment
 * @return NULL if reassembly is incomplete, ? otherwise
 */
struct pbuf *
ip4_reass(struct pbuf *p)
{
 8034f6c:	b580      	push	{r7, lr}
 8034f6e:	b08e      	sub	sp, #56	; 0x38
 8034f70:	af00      	add	r7, sp, #0
 8034f72:	6078      	str	r0, [r7, #4]
  u16_t offset, len, clen;
  u8_t hlen;
  int valid;
  int is_last;

  IPFRAG_STATS_INC(ip_frag.recv);
 8034f74:	4b9d      	ldr	r3, [pc, #628]	; (80351ec <ip4_reass+0x280>)
 8034f76:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8034f78:	3301      	adds	r3, #1
 8034f7a:	b29a      	uxth	r2, r3
 8034f7c:	4b9b      	ldr	r3, [pc, #620]	; (80351ec <ip4_reass+0x280>)
 8034f7e:	865a      	strh	r2, [r3, #50]	; 0x32
  MIB2_STATS_INC(mib2.ipreasmreqds);

  fraghdr = (struct ip_hdr *)p->payload;
 8034f80:	687b      	ldr	r3, [r7, #4]
 8034f82:	685b      	ldr	r3, [r3, #4]
 8034f84:	62bb      	str	r3, [r7, #40]	; 0x28

  if (IPH_HL_BYTES(fraghdr) != IP_HLEN) {
 8034f86:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8034f88:	781b      	ldrb	r3, [r3, #0]
 8034f8a:	f003 030f 	and.w	r3, r3, #15
 8034f8e:	b2db      	uxtb	r3, r3
 8034f90:	009b      	lsls	r3, r3, #2
 8034f92:	b2db      	uxtb	r3, r3
 8034f94:	2b14      	cmp	r3, #20
 8034f96:	d008      	beq.n	8034faa <ip4_reass+0x3e>
    LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: IP options currently not supported!\n"));
    IPFRAG_STATS_INC(ip_frag.err);
 8034f98:	4b94      	ldr	r3, [pc, #592]	; (80351ec <ip4_reass+0x280>)
 8034f9a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8034f9e:	3301      	adds	r3, #1
 8034fa0:	b29a      	uxth	r2, r3
 8034fa2:	4b92      	ldr	r3, [pc, #584]	; (80351ec <ip4_reass+0x280>)
 8034fa4:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
    goto nullreturn;
 8034fa8:	e17c      	b.n	80352a4 <ip4_reass+0x338>
  }

  offset = IPH_OFFSET_BYTES(fraghdr);
 8034faa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8034fac:	88db      	ldrh	r3, [r3, #6]
 8034fae:	b29b      	uxth	r3, r3
 8034fb0:	4618      	mov	r0, r3
 8034fb2:	f7f5 fab1 	bl	802a518 <lwip_htons>
 8034fb6:	4603      	mov	r3, r0
 8034fb8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8034fbc:	b29b      	uxth	r3, r3
 8034fbe:	00db      	lsls	r3, r3, #3
 8034fc0:	84fb      	strh	r3, [r7, #38]	; 0x26
  len = lwip_ntohs(IPH_LEN(fraghdr));
 8034fc2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8034fc4:	885b      	ldrh	r3, [r3, #2]
 8034fc6:	b29b      	uxth	r3, r3
 8034fc8:	4618      	mov	r0, r3
 8034fca:	f7f5 faa5 	bl	802a518 <lwip_htons>
 8034fce:	4603      	mov	r3, r0
 8034fd0:	84bb      	strh	r3, [r7, #36]	; 0x24
  hlen = IPH_HL_BYTES(fraghdr);
 8034fd2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8034fd4:	781b      	ldrb	r3, [r3, #0]
 8034fd6:	f003 030f 	and.w	r3, r3, #15
 8034fda:	b2db      	uxtb	r3, r3
 8034fdc:	009b      	lsls	r3, r3, #2
 8034fde:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  if (hlen > len) {
 8034fe2:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8034fe6:	b29b      	uxth	r3, r3
 8034fe8:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8034fea:	429a      	cmp	r2, r3
 8034fec:	f0c0 8157 	bcc.w	803529e <ip4_reass+0x332>
    /* invalid datagram */
    goto nullreturn;
  }
  len = (u16_t)(len - hlen);
 8034ff0:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8034ff4:	b29b      	uxth	r3, r3
 8034ff6:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8034ff8:	1ad3      	subs	r3, r2, r3
 8034ffa:	84bb      	strh	r3, [r7, #36]	; 0x24

  /* Check if we are allowed to enqueue more datagrams. */
  clen = pbuf_clen(p);
 8034ffc:	6878      	ldr	r0, [r7, #4]
 8034ffe:	f7f6 ffdb 	bl	802bfb8 <pbuf_clen>
 8035002:	4603      	mov	r3, r0
 8035004:	843b      	strh	r3, [r7, #32]
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
 8035006:	4b7a      	ldr	r3, [pc, #488]	; (80351f0 <ip4_reass+0x284>)
 8035008:	881b      	ldrh	r3, [r3, #0]
 803500a:	461a      	mov	r2, r3
 803500c:	8c3b      	ldrh	r3, [r7, #32]
 803500e:	4413      	add	r3, r2
 8035010:	2b0a      	cmp	r3, #10
 8035012:	dd15      	ble.n	8035040 <ip4_reass+0xd4>
#if IP_REASS_FREE_OLDEST
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 8035014:	8c3b      	ldrh	r3, [r7, #32]
 8035016:	4619      	mov	r1, r3
 8035018:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 803501a:	f7ff fd6b 	bl	8034af4 <ip_reass_remove_oldest_datagram>
 803501e:	4603      	mov	r3, r0
 8035020:	2b00      	cmp	r3, #0
 8035022:	d006      	beq.n	8035032 <ip4_reass+0xc6>
        ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS))
 8035024:	4b72      	ldr	r3, [pc, #456]	; (80351f0 <ip4_reass+0x284>)
 8035026:	881b      	ldrh	r3, [r3, #0]
 8035028:	461a      	mov	r2, r3
 803502a:	8c3b      	ldrh	r3, [r7, #32]
 803502c:	4413      	add	r3, r2
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 803502e:	2b0a      	cmp	r3, #10
 8035030:	dd06      	ble.n	8035040 <ip4_reass+0xd4>
#endif /* IP_REASS_FREE_OLDEST */
    {
      /* No datagram could be freed and still too many pbufs enqueued */
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: Overflow condition: pbufct=%d, clen=%d, MAX=%d\n",
                                   ip_reass_pbufcount, clen, IP_REASS_MAX_PBUFS));
      IPFRAG_STATS_INC(ip_frag.memerr);
 8035032:	4b6e      	ldr	r3, [pc, #440]	; (80351ec <ip4_reass+0x280>)
 8035034:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 8035036:	3301      	adds	r3, #1
 8035038:	b29a      	uxth	r2, r3
 803503a:	4b6c      	ldr	r3, [pc, #432]	; (80351ec <ip4_reass+0x280>)
 803503c:	879a      	strh	r2, [r3, #60]	; 0x3c
      /* @todo: send ICMP time exceeded here? */
      /* drop this pbuf */
      goto nullreturn;
 803503e:	e131      	b.n	80352a4 <ip4_reass+0x338>
    }
  }

  /* Look for the datagram the fragment belongs to in the current datagram queue,
   * remembering the previous in the queue for later dequeueing. */
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 8035040:	4b6c      	ldr	r3, [pc, #432]	; (80351f4 <ip4_reass+0x288>)
 8035042:	681b      	ldr	r3, [r3, #0]
 8035044:	633b      	str	r3, [r7, #48]	; 0x30
 8035046:	e01e      	b.n	8035086 <ip4_reass+0x11a>
    /* Check if the incoming fragment matches the one currently present
       in the reassembly buffer. If so, we proceed with copying the
       fragment into the buffer. */
    if (IP_ADDRESSES_AND_ID_MATCH(&ipr->iphdr, fraghdr)) {
 8035048:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 803504a:	695a      	ldr	r2, [r3, #20]
 803504c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 803504e:	68db      	ldr	r3, [r3, #12]
 8035050:	429a      	cmp	r2, r3
 8035052:	d115      	bne.n	8035080 <ip4_reass+0x114>
 8035054:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8035056:	699a      	ldr	r2, [r3, #24]
 8035058:	6abb      	ldr	r3, [r7, #40]	; 0x28
 803505a:	691b      	ldr	r3, [r3, #16]
 803505c:	429a      	cmp	r2, r3
 803505e:	d10f      	bne.n	8035080 <ip4_reass+0x114>
 8035060:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8035062:	899a      	ldrh	r2, [r3, #12]
 8035064:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8035066:	889b      	ldrh	r3, [r3, #4]
 8035068:	b29b      	uxth	r3, r3
 803506a:	429a      	cmp	r2, r3
 803506c:	d108      	bne.n	8035080 <ip4_reass+0x114>
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: matching previous fragment ID=%"X16_F"\n",
                                   lwip_ntohs(IPH_ID(fraghdr))));
      IPFRAG_STATS_INC(ip_frag.cachehit);
 803506e:	4b5f      	ldr	r3, [pc, #380]	; (80351ec <ip4_reass+0x280>)
 8035070:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8035074:	3301      	adds	r3, #1
 8035076:	b29a      	uxth	r2, r3
 8035078:	4b5c      	ldr	r3, [pc, #368]	; (80351ec <ip4_reass+0x280>)
 803507a:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
      break;
 803507e:	e005      	b.n	803508c <ip4_reass+0x120>
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 8035080:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8035082:	681b      	ldr	r3, [r3, #0]
 8035084:	633b      	str	r3, [r7, #48]	; 0x30
 8035086:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8035088:	2b00      	cmp	r3, #0
 803508a:	d1dd      	bne.n	8035048 <ip4_reass+0xdc>
    }
  }

  if (ipr == NULL) {
 803508c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 803508e:	2b00      	cmp	r3, #0
 8035090:	d109      	bne.n	80350a6 <ip4_reass+0x13a>
    /* Enqueue a new datagram into the datagram queue */
    ipr = ip_reass_enqueue_new_datagram(fraghdr, clen);
 8035092:	8c3b      	ldrh	r3, [r7, #32]
 8035094:	4619      	mov	r1, r3
 8035096:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8035098:	f7ff fd8e 	bl	8034bb8 <ip_reass_enqueue_new_datagram>
 803509c:	6338      	str	r0, [r7, #48]	; 0x30
    /* Bail if unable to enqueue */
    if (ipr == NULL) {
 803509e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80350a0:	2b00      	cmp	r3, #0
 80350a2:	d11c      	bne.n	80350de <ip4_reass+0x172>
      goto nullreturn;
 80350a4:	e0fe      	b.n	80352a4 <ip4_reass+0x338>
    }
  } else {
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 80350a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80350a8:	88db      	ldrh	r3, [r3, #6]
 80350aa:	b29b      	uxth	r3, r3
 80350ac:	4618      	mov	r0, r3
 80350ae:	f7f5 fa33 	bl	802a518 <lwip_htons>
 80350b2:	4603      	mov	r3, r0
 80350b4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80350b8:	2b00      	cmp	r3, #0
 80350ba:	d110      	bne.n	80350de <ip4_reass+0x172>
        ((lwip_ntohs(IPH_OFFSET(&ipr->iphdr)) & IP_OFFMASK) != 0)) {
 80350bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80350be:	89db      	ldrh	r3, [r3, #14]
 80350c0:	4618      	mov	r0, r3
 80350c2:	f7f5 fa29 	bl	802a518 <lwip_htons>
 80350c6:	4603      	mov	r3, r0
 80350c8:	f3c3 030c 	ubfx	r3, r3, #0, #13
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 80350cc:	2b00      	cmp	r3, #0
 80350ce:	d006      	beq.n	80350de <ip4_reass+0x172>
      /* ipr->iphdr is not the header from the first fragment, but fraghdr is
       * -> copy fraghdr into ipr->iphdr since we want to have the header
       * of the first fragment (for ICMP time exceeded and later, for copying
       * all options, if supported)*/
      SMEMCPY(&ipr->iphdr, fraghdr, IP_HLEN);
 80350d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80350d2:	3308      	adds	r3, #8
 80350d4:	2214      	movs	r2, #20
 80350d6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80350d8:	4618      	mov	r0, r3
 80350da:	f000 ff4d 	bl	8035f78 <memcpy>

  /* At this point, we have either created a new entry or pointing
   * to an existing one */

  /* check for 'no more fragments', and update queue entry*/
  is_last = (IPH_OFFSET(fraghdr) & PP_NTOHS(IP_MF)) == 0;
 80350de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80350e0:	88db      	ldrh	r3, [r3, #6]
 80350e2:	b29b      	uxth	r3, r3
 80350e4:	f003 0320 	and.w	r3, r3, #32
 80350e8:	2b00      	cmp	r3, #0
 80350ea:	bf0c      	ite	eq
 80350ec:	2301      	moveq	r3, #1
 80350ee:	2300      	movne	r3, #0
 80350f0:	b2db      	uxtb	r3, r3
 80350f2:	61fb      	str	r3, [r7, #28]
  if (is_last) {
 80350f4:	69fb      	ldr	r3, [r7, #28]
 80350f6:	2b00      	cmp	r3, #0
 80350f8:	d00e      	beq.n	8035118 <ip4_reass+0x1ac>
    u16_t datagram_len = (u16_t)(offset + len);
 80350fa:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 80350fc:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80350fe:	4413      	add	r3, r2
 8035100:	837b      	strh	r3, [r7, #26]
    if ((datagram_len < offset) || (datagram_len > (0xFFFF - IP_HLEN))) {
 8035102:	8b7a      	ldrh	r2, [r7, #26]
 8035104:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8035106:	429a      	cmp	r2, r3
 8035108:	f0c0 80a7 	bcc.w	803525a <ip4_reass+0x2ee>
 803510c:	8b7b      	ldrh	r3, [r7, #26]
 803510e:	f64f 72eb 	movw	r2, #65515	; 0xffeb
 8035112:	4293      	cmp	r3, r2
 8035114:	f200 80a1 	bhi.w	803525a <ip4_reass+0x2ee>
      goto nullreturn_ipr;
    }
  }
  /* find the right place to insert this pbuf */
  /* @todo: trim pbufs if fragments are overlapping */
  valid = ip_reass_chain_frag_into_datagram_and_validate(ipr, p, is_last);
 8035118:	69fa      	ldr	r2, [r7, #28]
 803511a:	6879      	ldr	r1, [r7, #4]
 803511c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 803511e:	f7ff fdbb 	bl	8034c98 <ip_reass_chain_frag_into_datagram_and_validate>
 8035122:	6178      	str	r0, [r7, #20]
  if (valid == IP_REASS_VALIDATE_PBUF_DROPPED) {
 8035124:	697b      	ldr	r3, [r7, #20]
 8035126:	f1b3 3fff 	cmp.w	r3, #4294967295
 803512a:	f000 8098 	beq.w	803525e <ip4_reass+0x2f2>
  /* if we come here, the pbuf has been enqueued */

  /* Track the current number of pbufs current 'in-flight', in order to limit
     the number of fragments that may be enqueued at any one time
     (overflow checked by testing against IP_REASS_MAX_PBUFS) */
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 803512e:	4b30      	ldr	r3, [pc, #192]	; (80351f0 <ip4_reass+0x284>)
 8035130:	881a      	ldrh	r2, [r3, #0]
 8035132:	8c3b      	ldrh	r3, [r7, #32]
 8035134:	4413      	add	r3, r2
 8035136:	b29a      	uxth	r2, r3
 8035138:	4b2d      	ldr	r3, [pc, #180]	; (80351f0 <ip4_reass+0x284>)
 803513a:	801a      	strh	r2, [r3, #0]
  if (is_last) {
 803513c:	69fb      	ldr	r3, [r7, #28]
 803513e:	2b00      	cmp	r3, #0
 8035140:	d00d      	beq.n	803515e <ip4_reass+0x1f2>
    u16_t datagram_len = (u16_t)(offset + len);
 8035142:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8035144:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8035146:	4413      	add	r3, r2
 8035148:	827b      	strh	r3, [r7, #18]
    ipr->datagram_len = datagram_len;
 803514a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 803514c:	8a7a      	ldrh	r2, [r7, #18]
 803514e:	839a      	strh	r2, [r3, #28]
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 8035150:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8035152:	7f9b      	ldrb	r3, [r3, #30]
 8035154:	f043 0301 	orr.w	r3, r3, #1
 8035158:	b2da      	uxtb	r2, r3
 803515a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 803515c:	779a      	strb	r2, [r3, #30]
    LWIP_DEBUGF(IP_REASS_DEBUG,
                ("ip4_reass: last fragment seen, total len %"S16_F"\n",
                 ipr->datagram_len));
  }

  if (valid == IP_REASS_VALIDATE_TELEGRAM_FINISHED) {
 803515e:	697b      	ldr	r3, [r7, #20]
 8035160:	2b01      	cmp	r3, #1
 8035162:	d178      	bne.n	8035256 <ip4_reass+0x2ea>
    struct ip_reassdata *ipr_prev;
    /* the totally last fragment (flag more fragments = 0) was received at least
     * once AND all fragments are received */
    u16_t datagram_len = (u16_t)(ipr->datagram_len + IP_HLEN);
 8035164:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8035166:	8b9b      	ldrh	r3, [r3, #28]
 8035168:	3314      	adds	r3, #20
 803516a:	823b      	strh	r3, [r7, #16]

    /* save the second pbuf before copying the header over the pointer */
    r = ((struct ip_reass_helper *)ipr->p->payload)->next_pbuf;
 803516c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 803516e:	685b      	ldr	r3, [r3, #4]
 8035170:	685b      	ldr	r3, [r3, #4]
 8035172:	681b      	ldr	r3, [r3, #0]
 8035174:	637b      	str	r3, [r7, #52]	; 0x34

    /* copy the original ip header back to the first pbuf */
    fraghdr = (struct ip_hdr *)(ipr->p->payload);
 8035176:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8035178:	685b      	ldr	r3, [r3, #4]
 803517a:	685b      	ldr	r3, [r3, #4]
 803517c:	62bb      	str	r3, [r7, #40]	; 0x28
    SMEMCPY(fraghdr, &ipr->iphdr, IP_HLEN);
 803517e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8035180:	3308      	adds	r3, #8
 8035182:	2214      	movs	r2, #20
 8035184:	4619      	mov	r1, r3
 8035186:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8035188:	f000 fef6 	bl	8035f78 <memcpy>
    IPH_LEN_SET(fraghdr, lwip_htons(datagram_len));
 803518c:	8a3b      	ldrh	r3, [r7, #16]
 803518e:	4618      	mov	r0, r3
 8035190:	f7f5 f9c2 	bl	802a518 <lwip_htons>
 8035194:	4603      	mov	r3, r0
 8035196:	461a      	mov	r2, r3
 8035198:	6abb      	ldr	r3, [r7, #40]	; 0x28
 803519a:	805a      	strh	r2, [r3, #2]
    IPH_OFFSET_SET(fraghdr, 0);
 803519c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 803519e:	2200      	movs	r2, #0
 80351a0:	719a      	strb	r2, [r3, #6]
 80351a2:	2200      	movs	r2, #0
 80351a4:	71da      	strb	r2, [r3, #7]
    IPH_CHKSUM_SET(fraghdr, 0);
 80351a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80351a8:	2200      	movs	r2, #0
 80351aa:	729a      	strb	r2, [r3, #10]
 80351ac:	2200      	movs	r2, #0
 80351ae:	72da      	strb	r2, [r3, #11]
    IF__NETIF_CHECKSUM_ENABLED(ip_current_input_netif(), NETIF_CHECKSUM_GEN_IP) {
      IPH_CHKSUM_SET(fraghdr, inet_chksum(fraghdr, IP_HLEN));
    }
#endif /* CHECKSUM_GEN_IP */

    p = ipr->p;
 80351b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80351b2:	685b      	ldr	r3, [r3, #4]
 80351b4:	607b      	str	r3, [r7, #4]

    /* chain together the pbufs contained within the reass_data list. */
    while (r != NULL) {
 80351b6:	e00d      	b.n	80351d4 <ip4_reass+0x268>
      iprh = (struct ip_reass_helper *)r->payload;
 80351b8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80351ba:	685b      	ldr	r3, [r3, #4]
 80351bc:	60fb      	str	r3, [r7, #12]

      /* hide the ip header for every succeeding fragment */
      pbuf_remove_header(r, IP_HLEN);
 80351be:	2114      	movs	r1, #20
 80351c0:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80351c2:	f7f6 fde5 	bl	802bd90 <pbuf_remove_header>
      pbuf_cat(p, r);
 80351c6:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80351c8:	6878      	ldr	r0, [r7, #4]
 80351ca:	f7f6 ff35 	bl	802c038 <pbuf_cat>
      r = iprh->next_pbuf;
 80351ce:	68fb      	ldr	r3, [r7, #12]
 80351d0:	681b      	ldr	r3, [r3, #0]
 80351d2:	637b      	str	r3, [r7, #52]	; 0x34
    while (r != NULL) {
 80351d4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80351d6:	2b00      	cmp	r3, #0
 80351d8:	d1ee      	bne.n	80351b8 <ip4_reass+0x24c>
    }

    /* find the previous entry in the linked list */
    if (ipr == reassdatagrams) {
 80351da:	4b06      	ldr	r3, [pc, #24]	; (80351f4 <ip4_reass+0x288>)
 80351dc:	681b      	ldr	r3, [r3, #0]
 80351de:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80351e0:	429a      	cmp	r2, r3
 80351e2:	d109      	bne.n	80351f8 <ip4_reass+0x28c>
      ipr_prev = NULL;
 80351e4:	2300      	movs	r3, #0
 80351e6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80351e8:	e017      	b.n	803521a <ip4_reass+0x2ae>
 80351ea:	bf00      	nop
 80351ec:	2000ed10 	.word	0x2000ed10
 80351f0:	2000ef64 	.word	0x2000ef64
 80351f4:	2000ef60 	.word	0x2000ef60
    } else {
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 80351f8:	4b31      	ldr	r3, [pc, #196]	; (80352c0 <ip4_reass+0x354>)
 80351fa:	681b      	ldr	r3, [r3, #0]
 80351fc:	62fb      	str	r3, [r7, #44]	; 0x2c
 80351fe:	e007      	b.n	8035210 <ip4_reass+0x2a4>
        if (ipr_prev->next == ipr) {
 8035200:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8035202:	681b      	ldr	r3, [r3, #0]
 8035204:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8035206:	429a      	cmp	r2, r3
 8035208:	d006      	beq.n	8035218 <ip4_reass+0x2ac>
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 803520a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 803520c:	681b      	ldr	r3, [r3, #0]
 803520e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8035210:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8035212:	2b00      	cmp	r3, #0
 8035214:	d1f4      	bne.n	8035200 <ip4_reass+0x294>
 8035216:	e000      	b.n	803521a <ip4_reass+0x2ae>
          break;
 8035218:	bf00      	nop
        }
      }
    }

    /* release the sources allocate for the fragment queue entry */
    ip_reass_dequeue_datagram(ipr, ipr_prev);
 803521a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 803521c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 803521e:	f7ff fd0d 	bl	8034c3c <ip_reass_dequeue_datagram>

    /* and adjust the number of pbufs currently queued for reassembly. */
    clen = pbuf_clen(p);
 8035222:	6878      	ldr	r0, [r7, #4]
 8035224:	f7f6 fec8 	bl	802bfb8 <pbuf_clen>
 8035228:	4603      	mov	r3, r0
 803522a:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("ip_reass_pbufcount >= clen", ip_reass_pbufcount >= clen);
 803522c:	4b25      	ldr	r3, [pc, #148]	; (80352c4 <ip4_reass+0x358>)
 803522e:	881b      	ldrh	r3, [r3, #0]
 8035230:	8c3a      	ldrh	r2, [r7, #32]
 8035232:	429a      	cmp	r2, r3
 8035234:	d906      	bls.n	8035244 <ip4_reass+0x2d8>
 8035236:	4b24      	ldr	r3, [pc, #144]	; (80352c8 <ip4_reass+0x35c>)
 8035238:	f240 229b 	movw	r2, #667	; 0x29b
 803523c:	4923      	ldr	r1, [pc, #140]	; (80352cc <ip4_reass+0x360>)
 803523e:	4824      	ldr	r0, [pc, #144]	; (80352d0 <ip4_reass+0x364>)
 8035240:	f000 ffaa 	bl	8036198 <iprintf>
    ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - clen);
 8035244:	4b1f      	ldr	r3, [pc, #124]	; (80352c4 <ip4_reass+0x358>)
 8035246:	881a      	ldrh	r2, [r3, #0]
 8035248:	8c3b      	ldrh	r3, [r7, #32]
 803524a:	1ad3      	subs	r3, r2, r3
 803524c:	b29a      	uxth	r2, r3
 803524e:	4b1d      	ldr	r3, [pc, #116]	; (80352c4 <ip4_reass+0x358>)
 8035250:	801a      	strh	r2, [r3, #0]

    MIB2_STATS_INC(mib2.ipreasmoks);

    /* Return the pbuf chain */
    return p;
 8035252:	687b      	ldr	r3, [r7, #4]
 8035254:	e030      	b.n	80352b8 <ip4_reass+0x34c>
  }
  /* the datagram is not (yet?) reassembled completely */
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_pbufcount: %d out\n", ip_reass_pbufcount));
  return NULL;
 8035256:	2300      	movs	r3, #0
 8035258:	e02e      	b.n	80352b8 <ip4_reass+0x34c>
      goto nullreturn_ipr;
 803525a:	bf00      	nop
 803525c:	e000      	b.n	8035260 <ip4_reass+0x2f4>
    goto nullreturn_ipr;
 803525e:	bf00      	nop

nullreturn_ipr:
  LWIP_ASSERT("ipr != NULL", ipr != NULL);
 8035260:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8035262:	2b00      	cmp	r3, #0
 8035264:	d106      	bne.n	8035274 <ip4_reass+0x308>
 8035266:	4b18      	ldr	r3, [pc, #96]	; (80352c8 <ip4_reass+0x35c>)
 8035268:	f44f 722a 	mov.w	r2, #680	; 0x2a8
 803526c:	4919      	ldr	r1, [pc, #100]	; (80352d4 <ip4_reass+0x368>)
 803526e:	4818      	ldr	r0, [pc, #96]	; (80352d0 <ip4_reass+0x364>)
 8035270:	f000 ff92 	bl	8036198 <iprintf>
  if (ipr->p == NULL) {
 8035274:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8035276:	685b      	ldr	r3, [r3, #4]
 8035278:	2b00      	cmp	r3, #0
 803527a:	d112      	bne.n	80352a2 <ip4_reass+0x336>
    /* dropped pbuf after creating a new datagram entry: remove the entry, too */
    LWIP_ASSERT("not firstalthough just enqueued", ipr == reassdatagrams);
 803527c:	4b10      	ldr	r3, [pc, #64]	; (80352c0 <ip4_reass+0x354>)
 803527e:	681b      	ldr	r3, [r3, #0]
 8035280:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8035282:	429a      	cmp	r2, r3
 8035284:	d006      	beq.n	8035294 <ip4_reass+0x328>
 8035286:	4b10      	ldr	r3, [pc, #64]	; (80352c8 <ip4_reass+0x35c>)
 8035288:	f240 22ab 	movw	r2, #683	; 0x2ab
 803528c:	4912      	ldr	r1, [pc, #72]	; (80352d8 <ip4_reass+0x36c>)
 803528e:	4810      	ldr	r0, [pc, #64]	; (80352d0 <ip4_reass+0x364>)
 8035290:	f000 ff82 	bl	8036198 <iprintf>
    ip_reass_dequeue_datagram(ipr, NULL);
 8035294:	2100      	movs	r1, #0
 8035296:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8035298:	f7ff fcd0 	bl	8034c3c <ip_reass_dequeue_datagram>
 803529c:	e002      	b.n	80352a4 <ip4_reass+0x338>
    goto nullreturn;
 803529e:	bf00      	nop
 80352a0:	e000      	b.n	80352a4 <ip4_reass+0x338>
  }

nullreturn:
 80352a2:	bf00      	nop
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: nullreturn\n"));
  IPFRAG_STATS_INC(ip_frag.drop);
 80352a4:	4b0d      	ldr	r3, [pc, #52]	; (80352dc <ip4_reass+0x370>)
 80352a6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80352a8:	3301      	adds	r3, #1
 80352aa:	b29a      	uxth	r2, r3
 80352ac:	4b0b      	ldr	r3, [pc, #44]	; (80352dc <ip4_reass+0x370>)
 80352ae:	86da      	strh	r2, [r3, #54]	; 0x36
  pbuf_free(p);
 80352b0:	6878      	ldr	r0, [r7, #4]
 80352b2:	f7f6 fdf3 	bl	802be9c <pbuf_free>
  return NULL;
 80352b6:	2300      	movs	r3, #0
}
 80352b8:	4618      	mov	r0, r3
 80352ba:	3738      	adds	r7, #56	; 0x38
 80352bc:	46bd      	mov	sp, r7
 80352be:	bd80      	pop	{r7, pc}
 80352c0:	2000ef60 	.word	0x2000ef60
 80352c4:	2000ef64 	.word	0x2000ef64
 80352c8:	0803a798 	.word	0x0803a798
 80352cc:	0803a908 	.word	0x0803a908
 80352d0:	0803a7e0 	.word	0x0803a7e0
 80352d4:	0803a924 	.word	0x0803a924
 80352d8:	0803a930 	.word	0x0803a930
 80352dc:	2000ed10 	.word	0x2000ed10

080352e0 <ip_frag_alloc_pbuf_custom_ref>:
#if IP_FRAG
#if !LWIP_NETIF_TX_SINGLE_PBUF
/** Allocate a new struct pbuf_custom_ref */
static struct pbuf_custom_ref *
ip_frag_alloc_pbuf_custom_ref(void)
{
 80352e0:	b580      	push	{r7, lr}
 80352e2:	af00      	add	r7, sp, #0
  return (struct pbuf_custom_ref *)memp_malloc(MEMP_FRAG_PBUF);
 80352e4:	2005      	movs	r0, #5
 80352e6:	f7f5 feb9 	bl	802b05c <memp_malloc>
 80352ea:	4603      	mov	r3, r0
}
 80352ec:	4618      	mov	r0, r3
 80352ee:	bd80      	pop	{r7, pc}

080352f0 <ip_frag_free_pbuf_custom_ref>:

/** Free a struct pbuf_custom_ref */
static void
ip_frag_free_pbuf_custom_ref(struct pbuf_custom_ref *p)
{
 80352f0:	b580      	push	{r7, lr}
 80352f2:	b082      	sub	sp, #8
 80352f4:	af00      	add	r7, sp, #0
 80352f6:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("p != NULL", p != NULL);
 80352f8:	687b      	ldr	r3, [r7, #4]
 80352fa:	2b00      	cmp	r3, #0
 80352fc:	d106      	bne.n	803530c <ip_frag_free_pbuf_custom_ref+0x1c>
 80352fe:	4b07      	ldr	r3, [pc, #28]	; (803531c <ip_frag_free_pbuf_custom_ref+0x2c>)
 8035300:	f44f 7231 	mov.w	r2, #708	; 0x2c4
 8035304:	4906      	ldr	r1, [pc, #24]	; (8035320 <ip_frag_free_pbuf_custom_ref+0x30>)
 8035306:	4807      	ldr	r0, [pc, #28]	; (8035324 <ip_frag_free_pbuf_custom_ref+0x34>)
 8035308:	f000 ff46 	bl	8036198 <iprintf>
  memp_free(MEMP_FRAG_PBUF, p);
 803530c:	6879      	ldr	r1, [r7, #4]
 803530e:	2005      	movs	r0, #5
 8035310:	f7f5 ff20 	bl	802b154 <memp_free>
}
 8035314:	bf00      	nop
 8035316:	3708      	adds	r7, #8
 8035318:	46bd      	mov	sp, r7
 803531a:	bd80      	pop	{r7, pc}
 803531c:	0803a798 	.word	0x0803a798
 8035320:	0803a950 	.word	0x0803a950
 8035324:	0803a7e0 	.word	0x0803a7e0

08035328 <ipfrag_free_pbuf_custom>:

/** Free-callback function to free a 'struct pbuf_custom_ref', called by
 * pbuf_free. */
static void
ipfrag_free_pbuf_custom(struct pbuf *p)
{
 8035328:	b580      	push	{r7, lr}
 803532a:	b084      	sub	sp, #16
 803532c:	af00      	add	r7, sp, #0
 803532e:	6078      	str	r0, [r7, #4]
  struct pbuf_custom_ref *pcr = (struct pbuf_custom_ref *)p;
 8035330:	687b      	ldr	r3, [r7, #4]
 8035332:	60fb      	str	r3, [r7, #12]
  LWIP_ASSERT("pcr != NULL", pcr != NULL);
 8035334:	68fb      	ldr	r3, [r7, #12]
 8035336:	2b00      	cmp	r3, #0
 8035338:	d106      	bne.n	8035348 <ipfrag_free_pbuf_custom+0x20>
 803533a:	4b11      	ldr	r3, [pc, #68]	; (8035380 <ipfrag_free_pbuf_custom+0x58>)
 803533c:	f240 22ce 	movw	r2, #718	; 0x2ce
 8035340:	4910      	ldr	r1, [pc, #64]	; (8035384 <ipfrag_free_pbuf_custom+0x5c>)
 8035342:	4811      	ldr	r0, [pc, #68]	; (8035388 <ipfrag_free_pbuf_custom+0x60>)
 8035344:	f000 ff28 	bl	8036198 <iprintf>
  LWIP_ASSERT("pcr == p", (void *)pcr == (void *)p);
 8035348:	68fa      	ldr	r2, [r7, #12]
 803534a:	687b      	ldr	r3, [r7, #4]
 803534c:	429a      	cmp	r2, r3
 803534e:	d006      	beq.n	803535e <ipfrag_free_pbuf_custom+0x36>
 8035350:	4b0b      	ldr	r3, [pc, #44]	; (8035380 <ipfrag_free_pbuf_custom+0x58>)
 8035352:	f240 22cf 	movw	r2, #719	; 0x2cf
 8035356:	490d      	ldr	r1, [pc, #52]	; (803538c <ipfrag_free_pbuf_custom+0x64>)
 8035358:	480b      	ldr	r0, [pc, #44]	; (8035388 <ipfrag_free_pbuf_custom+0x60>)
 803535a:	f000 ff1d 	bl	8036198 <iprintf>
  if (pcr->original != NULL) {
 803535e:	68fb      	ldr	r3, [r7, #12]
 8035360:	695b      	ldr	r3, [r3, #20]
 8035362:	2b00      	cmp	r3, #0
 8035364:	d004      	beq.n	8035370 <ipfrag_free_pbuf_custom+0x48>
    pbuf_free(pcr->original);
 8035366:	68fb      	ldr	r3, [r7, #12]
 8035368:	695b      	ldr	r3, [r3, #20]
 803536a:	4618      	mov	r0, r3
 803536c:	f7f6 fd96 	bl	802be9c <pbuf_free>
  }
  ip_frag_free_pbuf_custom_ref(pcr);
 8035370:	68f8      	ldr	r0, [r7, #12]
 8035372:	f7ff ffbd 	bl	80352f0 <ip_frag_free_pbuf_custom_ref>
}
 8035376:	bf00      	nop
 8035378:	3710      	adds	r7, #16
 803537a:	46bd      	mov	sp, r7
 803537c:	bd80      	pop	{r7, pc}
 803537e:	bf00      	nop
 8035380:	0803a798 	.word	0x0803a798
 8035384:	0803a95c 	.word	0x0803a95c
 8035388:	0803a7e0 	.word	0x0803a7e0
 803538c:	0803a968 	.word	0x0803a968

08035390 <ip4_frag>:
 *
 * @return ERR_OK if sent successfully, err_t otherwise
 */
err_t
ip4_frag(struct pbuf *p, struct netif *netif, const ip4_addr_t *dest)
{
 8035390:	b580      	push	{r7, lr}
 8035392:	b094      	sub	sp, #80	; 0x50
 8035394:	af02      	add	r7, sp, #8
 8035396:	60f8      	str	r0, [r7, #12]
 8035398:	60b9      	str	r1, [r7, #8]
 803539a:	607a      	str	r2, [r7, #4]
  struct pbuf *rambuf;
#if !LWIP_NETIF_TX_SINGLE_PBUF
  struct pbuf *newpbuf;
  u16_t newpbuflen = 0;
 803539c:	2300      	movs	r3, #0
 803539e:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
  u16_t left_to_copy;
#endif
  struct ip_hdr *original_iphdr;
  struct ip_hdr *iphdr;
  const u16_t nfb = (u16_t)((netif->mtu - IP_HLEN) / 8);
 80353a2:	68bb      	ldr	r3, [r7, #8]
 80353a4:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80353a6:	3b14      	subs	r3, #20
 80353a8:	2b00      	cmp	r3, #0
 80353aa:	da00      	bge.n	80353ae <ip4_frag+0x1e>
 80353ac:	3307      	adds	r3, #7
 80353ae:	10db      	asrs	r3, r3, #3
 80353b0:	877b      	strh	r3, [r7, #58]	; 0x3a
  u16_t left, fragsize;
  u16_t ofo;
  int last;
  u16_t poff = IP_HLEN;
 80353b2:	2314      	movs	r3, #20
 80353b4:	87fb      	strh	r3, [r7, #62]	; 0x3e
  u16_t tmp;
  int mf_set;

  original_iphdr = (struct ip_hdr *)p->payload;
 80353b6:	68fb      	ldr	r3, [r7, #12]
 80353b8:	685b      	ldr	r3, [r3, #4]
 80353ba:	637b      	str	r3, [r7, #52]	; 0x34
  iphdr = original_iphdr;
 80353bc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80353be:	633b      	str	r3, [r7, #48]	; 0x30
  if (IPH_HL_BYTES(iphdr) != IP_HLEN) {
 80353c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80353c2:	781b      	ldrb	r3, [r3, #0]
 80353c4:	f003 030f 	and.w	r3, r3, #15
 80353c8:	b2db      	uxtb	r3, r3
 80353ca:	009b      	lsls	r3, r3, #2
 80353cc:	b2db      	uxtb	r3, r3
 80353ce:	2b14      	cmp	r3, #20
 80353d0:	d002      	beq.n	80353d8 <ip4_frag+0x48>
    /* ip4_frag() does not support IP options */
    return ERR_VAL;
 80353d2:	f06f 0305 	mvn.w	r3, #5
 80353d6:	e116      	b.n	8035606 <ip4_frag+0x276>
  }
  LWIP_ERROR("ip4_frag(): pbuf too short", p->len >= IP_HLEN, return ERR_VAL);
 80353d8:	68fb      	ldr	r3, [r7, #12]
 80353da:	895b      	ldrh	r3, [r3, #10]
 80353dc:	2b13      	cmp	r3, #19
 80353de:	d809      	bhi.n	80353f4 <ip4_frag+0x64>
 80353e0:	4b8b      	ldr	r3, [pc, #556]	; (8035610 <ip4_frag+0x280>)
 80353e2:	f44f 723f 	mov.w	r2, #764	; 0x2fc
 80353e6:	498b      	ldr	r1, [pc, #556]	; (8035614 <ip4_frag+0x284>)
 80353e8:	488b      	ldr	r0, [pc, #556]	; (8035618 <ip4_frag+0x288>)
 80353ea:	f000 fed5 	bl	8036198 <iprintf>
 80353ee:	f06f 0305 	mvn.w	r3, #5
 80353f2:	e108      	b.n	8035606 <ip4_frag+0x276>

  /* Save original offset */
  tmp = lwip_ntohs(IPH_OFFSET(iphdr));
 80353f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80353f6:	88db      	ldrh	r3, [r3, #6]
 80353f8:	b29b      	uxth	r3, r3
 80353fa:	4618      	mov	r0, r3
 80353fc:	f7f5 f88c 	bl	802a518 <lwip_htons>
 8035400:	4603      	mov	r3, r0
 8035402:	87bb      	strh	r3, [r7, #60]	; 0x3c
  ofo = tmp & IP_OFFMASK;
 8035404:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8035406:	f3c3 030c 	ubfx	r3, r3, #0, #13
 803540a:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  /* already fragmented? if so, the last fragment we create must have MF, too */
  mf_set = tmp & IP_MF;
 803540e:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8035410:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8035414:	62fb      	str	r3, [r7, #44]	; 0x2c

  left = (u16_t)(p->tot_len - IP_HLEN);
 8035416:	68fb      	ldr	r3, [r7, #12]
 8035418:	891b      	ldrh	r3, [r3, #8]
 803541a:	3b14      	subs	r3, #20
 803541c:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42

  while (left) {
 8035420:	e0e7      	b.n	80355f2 <ip4_frag+0x262>
    /* Fill this fragment */
    fragsize = LWIP_MIN(left, (u16_t)(nfb * 8));
 8035422:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8035424:	00db      	lsls	r3, r3, #3
 8035426:	b29b      	uxth	r3, r3
 8035428:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 803542c:	4293      	cmp	r3, r2
 803542e:	bf28      	it	cs
 8035430:	4613      	movcs	r3, r2
 8035432:	857b      	strh	r3, [r7, #42]	; 0x2a
    /* When not using a static buffer, create a chain of pbufs.
     * The first will be a PBUF_RAM holding the link and IP header.
     * The rest will be PBUF_REFs mirroring the pbuf chain to be fragged,
     * but limited to the size of an mtu.
     */
    rambuf = pbuf_alloc(PBUF_LINK, IP_HLEN, PBUF_RAM);
 8035434:	f44f 7220 	mov.w	r2, #640	; 0x280
 8035438:	2114      	movs	r1, #20
 803543a:	200e      	movs	r0, #14
 803543c:	f7f6 fa4a 	bl	802b8d4 <pbuf_alloc>
 8035440:	6278      	str	r0, [r7, #36]	; 0x24
    if (rambuf == NULL) {
 8035442:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8035444:	2b00      	cmp	r3, #0
 8035446:	f000 80db 	beq.w	8035600 <ip4_frag+0x270>
      goto memerr;
    }
    LWIP_ASSERT("this needs a pbuf in one piece!",
 803544a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 803544c:	895b      	ldrh	r3, [r3, #10]
 803544e:	2b13      	cmp	r3, #19
 8035450:	d806      	bhi.n	8035460 <ip4_frag+0xd0>
 8035452:	4b6f      	ldr	r3, [pc, #444]	; (8035610 <ip4_frag+0x280>)
 8035454:	f44f 7249 	mov.w	r2, #804	; 0x324
 8035458:	4970      	ldr	r1, [pc, #448]	; (803561c <ip4_frag+0x28c>)
 803545a:	486f      	ldr	r0, [pc, #444]	; (8035618 <ip4_frag+0x288>)
 803545c:	f000 fe9c 	bl	8036198 <iprintf>
                (rambuf->len >= (IP_HLEN)));
    SMEMCPY(rambuf->payload, original_iphdr, IP_HLEN);
 8035460:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8035462:	685b      	ldr	r3, [r3, #4]
 8035464:	2214      	movs	r2, #20
 8035466:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8035468:	4618      	mov	r0, r3
 803546a:	f000 fd85 	bl	8035f78 <memcpy>
    iphdr = (struct ip_hdr *)rambuf->payload;
 803546e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8035470:	685b      	ldr	r3, [r3, #4]
 8035472:	633b      	str	r3, [r7, #48]	; 0x30

    left_to_copy = fragsize;
 8035474:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8035476:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
    while (left_to_copy) {
 803547a:	e064      	b.n	8035546 <ip4_frag+0x1b6>
      struct pbuf_custom_ref *pcr;
      u16_t plen = (u16_t)(p->len - poff);
 803547c:	68fb      	ldr	r3, [r7, #12]
 803547e:	895a      	ldrh	r2, [r3, #10]
 8035480:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8035482:	1ad3      	subs	r3, r2, r3
 8035484:	83fb      	strh	r3, [r7, #30]
      LWIP_ASSERT("p->len >= poff", p->len >= poff);
 8035486:	68fb      	ldr	r3, [r7, #12]
 8035488:	895b      	ldrh	r3, [r3, #10]
 803548a:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 803548c:	429a      	cmp	r2, r3
 803548e:	d906      	bls.n	803549e <ip4_frag+0x10e>
 8035490:	4b5f      	ldr	r3, [pc, #380]	; (8035610 <ip4_frag+0x280>)
 8035492:	f240 322d 	movw	r2, #813	; 0x32d
 8035496:	4962      	ldr	r1, [pc, #392]	; (8035620 <ip4_frag+0x290>)
 8035498:	485f      	ldr	r0, [pc, #380]	; (8035618 <ip4_frag+0x288>)
 803549a:	f000 fe7d 	bl	8036198 <iprintf>
      newpbuflen = LWIP_MIN(left_to_copy, plen);
 803549e:	8bfa      	ldrh	r2, [r7, #30]
 80354a0:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 80354a4:	4293      	cmp	r3, r2
 80354a6:	bf28      	it	cs
 80354a8:	4613      	movcs	r3, r2
 80354aa:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
      /* Is this pbuf already empty? */
      if (!newpbuflen) {
 80354ae:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 80354b2:	2b00      	cmp	r3, #0
 80354b4:	d105      	bne.n	80354c2 <ip4_frag+0x132>
        poff = 0;
 80354b6:	2300      	movs	r3, #0
 80354b8:	87fb      	strh	r3, [r7, #62]	; 0x3e
        p = p->next;
 80354ba:	68fb      	ldr	r3, [r7, #12]
 80354bc:	681b      	ldr	r3, [r3, #0]
 80354be:	60fb      	str	r3, [r7, #12]
        continue;
 80354c0:	e041      	b.n	8035546 <ip4_frag+0x1b6>
      }
      pcr = ip_frag_alloc_pbuf_custom_ref();
 80354c2:	f7ff ff0d 	bl	80352e0 <ip_frag_alloc_pbuf_custom_ref>
 80354c6:	61b8      	str	r0, [r7, #24]
      if (pcr == NULL) {
 80354c8:	69bb      	ldr	r3, [r7, #24]
 80354ca:	2b00      	cmp	r3, #0
 80354cc:	d103      	bne.n	80354d6 <ip4_frag+0x146>
        pbuf_free(rambuf);
 80354ce:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80354d0:	f7f6 fce4 	bl	802be9c <pbuf_free>
        goto memerr;
 80354d4:	e095      	b.n	8035602 <ip4_frag+0x272>
      }
      /* Mirror this pbuf, although we might not need all of it. */
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 80354d6:	69b8      	ldr	r0, [r7, #24]
                                    (u8_t *)p->payload + poff, newpbuflen);
 80354d8:	68fb      	ldr	r3, [r7, #12]
 80354da:	685a      	ldr	r2, [r3, #4]
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 80354dc:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80354de:	4413      	add	r3, r2
 80354e0:	f8b7 1046 	ldrh.w	r1, [r7, #70]	; 0x46
 80354e4:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 80354e8:	9201      	str	r2, [sp, #4]
 80354ea:	9300      	str	r3, [sp, #0]
 80354ec:	4603      	mov	r3, r0
 80354ee:	2241      	movs	r2, #65	; 0x41
 80354f0:	2000      	movs	r0, #0
 80354f2:	f7f6 fb19 	bl	802bb28 <pbuf_alloced_custom>
 80354f6:	6178      	str	r0, [r7, #20]
      if (newpbuf == NULL) {
 80354f8:	697b      	ldr	r3, [r7, #20]
 80354fa:	2b00      	cmp	r3, #0
 80354fc:	d106      	bne.n	803550c <ip4_frag+0x17c>
        ip_frag_free_pbuf_custom_ref(pcr);
 80354fe:	69b8      	ldr	r0, [r7, #24]
 8035500:	f7ff fef6 	bl	80352f0 <ip_frag_free_pbuf_custom_ref>
        pbuf_free(rambuf);
 8035504:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8035506:	f7f6 fcc9 	bl	802be9c <pbuf_free>
        goto memerr;
 803550a:	e07a      	b.n	8035602 <ip4_frag+0x272>
      }
      pbuf_ref(p);
 803550c:	68f8      	ldr	r0, [r7, #12]
 803550e:	f7f6 fd6b 	bl	802bfe8 <pbuf_ref>
      pcr->original = p;
 8035512:	69bb      	ldr	r3, [r7, #24]
 8035514:	68fa      	ldr	r2, [r7, #12]
 8035516:	615a      	str	r2, [r3, #20]
      pcr->pc.custom_free_function = ipfrag_free_pbuf_custom;
 8035518:	69bb      	ldr	r3, [r7, #24]
 803551a:	4a42      	ldr	r2, [pc, #264]	; (8035624 <ip4_frag+0x294>)
 803551c:	611a      	str	r2, [r3, #16]

      /* Add it to end of rambuf's chain, but using pbuf_cat, not pbuf_chain
       * so that it is removed when pbuf_dechain is later called on rambuf.
       */
      pbuf_cat(rambuf, newpbuf);
 803551e:	6979      	ldr	r1, [r7, #20]
 8035520:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8035522:	f7f6 fd89 	bl	802c038 <pbuf_cat>
      left_to_copy = (u16_t)(left_to_copy - newpbuflen);
 8035526:	f8b7 2044 	ldrh.w	r2, [r7, #68]	; 0x44
 803552a:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 803552e:	1ad3      	subs	r3, r2, r3
 8035530:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
      if (left_to_copy) {
 8035534:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8035538:	2b00      	cmp	r3, #0
 803553a:	d004      	beq.n	8035546 <ip4_frag+0x1b6>
        poff = 0;
 803553c:	2300      	movs	r3, #0
 803553e:	87fb      	strh	r3, [r7, #62]	; 0x3e
        p = p->next;
 8035540:	68fb      	ldr	r3, [r7, #12]
 8035542:	681b      	ldr	r3, [r3, #0]
 8035544:	60fb      	str	r3, [r7, #12]
    while (left_to_copy) {
 8035546:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 803554a:	2b00      	cmp	r3, #0
 803554c:	d196      	bne.n	803547c <ip4_frag+0xec>
      }
    }
    poff = (u16_t)(poff + newpbuflen);
 803554e:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 8035550:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8035554:	4413      	add	r3, r2
 8035556:	87fb      	strh	r3, [r7, #62]	; 0x3e
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

    /* Correct header */
    last = (left <= netif->mtu - IP_HLEN);
 8035558:	68bb      	ldr	r3, [r7, #8]
 803555a:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 803555c:	f1a3 0213 	sub.w	r2, r3, #19
 8035560:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8035564:	429a      	cmp	r2, r3
 8035566:	bfcc      	ite	gt
 8035568:	2301      	movgt	r3, #1
 803556a:	2300      	movle	r3, #0
 803556c:	b2db      	uxtb	r3, r3
 803556e:	623b      	str	r3, [r7, #32]

    /* Set new offset and MF flag */
    tmp = (IP_OFFMASK & (ofo));
 8035570:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8035574:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8035578:	87bb      	strh	r3, [r7, #60]	; 0x3c
    if (!last || mf_set) {
 803557a:	6a3b      	ldr	r3, [r7, #32]
 803557c:	2b00      	cmp	r3, #0
 803557e:	d002      	beq.n	8035586 <ip4_frag+0x1f6>
 8035580:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8035582:	2b00      	cmp	r3, #0
 8035584:	d003      	beq.n	803558e <ip4_frag+0x1fe>
      /* the last fragment has MF set if the input frame had it */
      tmp = tmp | IP_MF;
 8035586:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8035588:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 803558c:	87bb      	strh	r3, [r7, #60]	; 0x3c
    }
    IPH_OFFSET_SET(iphdr, lwip_htons(tmp));
 803558e:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8035590:	4618      	mov	r0, r3
 8035592:	f7f4 ffc1 	bl	802a518 <lwip_htons>
 8035596:	4603      	mov	r3, r0
 8035598:	461a      	mov	r2, r3
 803559a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 803559c:	80da      	strh	r2, [r3, #6]
    IPH_LEN_SET(iphdr, lwip_htons((u16_t)(fragsize + IP_HLEN)));
 803559e:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80355a0:	3314      	adds	r3, #20
 80355a2:	b29b      	uxth	r3, r3
 80355a4:	4618      	mov	r0, r3
 80355a6:	f7f4 ffb7 	bl	802a518 <lwip_htons>
 80355aa:	4603      	mov	r3, r0
 80355ac:	461a      	mov	r2, r3
 80355ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80355b0:	805a      	strh	r2, [r3, #2]
    IPH_CHKSUM_SET(iphdr, 0);
 80355b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80355b4:	2200      	movs	r2, #0
 80355b6:	729a      	strb	r2, [r3, #10]
 80355b8:	2200      	movs	r2, #0
 80355ba:	72da      	strb	r2, [r3, #11]
#endif /* CHECKSUM_GEN_IP */

    /* No need for separate header pbuf - we allowed room for it in rambuf
     * when allocated.
     */
    netif->output(netif, rambuf, dest);
 80355bc:	68bb      	ldr	r3, [r7, #8]
 80355be:	695b      	ldr	r3, [r3, #20]
 80355c0:	687a      	ldr	r2, [r7, #4]
 80355c2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80355c4:	68b8      	ldr	r0, [r7, #8]
 80355c6:	4798      	blx	r3
    IPFRAG_STATS_INC(ip_frag.xmit);
 80355c8:	4b17      	ldr	r3, [pc, #92]	; (8035628 <ip4_frag+0x298>)
 80355ca:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
 80355cc:	3301      	adds	r3, #1
 80355ce:	b29a      	uxth	r2, r3
 80355d0:	4b15      	ldr	r3, [pc, #84]	; (8035628 <ip4_frag+0x298>)
 80355d2:	861a      	strh	r2, [r3, #48]	; 0x30
     * recreate it next time round the loop. If we're lucky the hardware
     * will have already sent the packet, the free will really free, and
     * there will be zero memory penalty.
     */

    pbuf_free(rambuf);
 80355d4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80355d6:	f7f6 fc61 	bl	802be9c <pbuf_free>
    left = (u16_t)(left - fragsize);
 80355da:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 80355de:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80355e0:	1ad3      	subs	r3, r2, r3
 80355e2:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
    ofo = (u16_t)(ofo + nfb);
 80355e6:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 80355ea:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 80355ec:	4413      	add	r3, r2
 80355ee:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  while (left) {
 80355f2:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80355f6:	2b00      	cmp	r3, #0
 80355f8:	f47f af13 	bne.w	8035422 <ip4_frag+0x92>
  }
  MIB2_STATS_INC(mib2.ipfragoks);
  return ERR_OK;
 80355fc:	2300      	movs	r3, #0
 80355fe:	e002      	b.n	8035606 <ip4_frag+0x276>
      goto memerr;
 8035600:	bf00      	nop
memerr:
  MIB2_STATS_INC(mib2.ipfragfails);
  return ERR_MEM;
 8035602:	f04f 33ff 	mov.w	r3, #4294967295
}
 8035606:	4618      	mov	r0, r3
 8035608:	3748      	adds	r7, #72	; 0x48
 803560a:	46bd      	mov	sp, r7
 803560c:	bd80      	pop	{r7, pc}
 803560e:	bf00      	nop
 8035610:	0803a798 	.word	0x0803a798
 8035614:	0803a974 	.word	0x0803a974
 8035618:	0803a7e0 	.word	0x0803a7e0
 803561c:	0803a990 	.word	0x0803a990
 8035620:	0803a9b0 	.word	0x0803a9b0
 8035624:	08035329 	.word	0x08035329
 8035628:	2000ed10 	.word	0x2000ed10

0803562c <ethernet_input>:
 * @see ETHARP_SUPPORT_VLAN
 * @see LWIP_HOOK_VLAN_CHECK
 */
err_t
ethernet_input(struct pbuf *p, struct netif *netif)
{
 803562c:	b580      	push	{r7, lr}
 803562e:	b086      	sub	sp, #24
 8035630:	af00      	add	r7, sp, #0
 8035632:	6078      	str	r0, [r7, #4]
 8035634:	6039      	str	r1, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t type;
#if LWIP_ARP || ETHARP_SUPPORT_VLAN || LWIP_IPV6
  u16_t next_hdr_offset = SIZEOF_ETH_HDR;
 8035636:	230e      	movs	r3, #14
 8035638:	82fb      	strh	r3, [r7, #22]
#endif /* LWIP_ARP || ETHARP_SUPPORT_VLAN */

  LWIP_ASSERT_CORE_LOCKED();

  if (p->len <= SIZEOF_ETH_HDR) {
 803563a:	687b      	ldr	r3, [r7, #4]
 803563c:	895b      	ldrh	r3, [r3, #10]
 803563e:	2b0e      	cmp	r3, #14
 8035640:	d80c      	bhi.n	803565c <ethernet_input+0x30>
    /* a packet with only an ethernet header (or less) is not valid for us */
    ETHARP_STATS_INC(etharp.proterr);
 8035642:	4b51      	ldr	r3, [pc, #324]	; (8035788 <ethernet_input+0x15c>)
 8035644:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8035646:	3301      	adds	r3, #1
 8035648:	b29a      	uxth	r2, r3
 803564a:	4b4f      	ldr	r3, [pc, #316]	; (8035788 <ethernet_input+0x15c>)
 803564c:	851a      	strh	r2, [r3, #40]	; 0x28
    ETHARP_STATS_INC(etharp.drop);
 803564e:	4b4e      	ldr	r3, [pc, #312]	; (8035788 <ethernet_input+0x15c>)
 8035650:	8bdb      	ldrh	r3, [r3, #30]
 8035652:	3301      	adds	r3, #1
 8035654:	b29a      	uxth	r2, r3
 8035656:	4b4c      	ldr	r3, [pc, #304]	; (8035788 <ethernet_input+0x15c>)
 8035658:	83da      	strh	r2, [r3, #30]
    MIB2_STATS_NETIF_INC(netif, ifinerrors);
    goto free_and_return;
 803565a:	e08d      	b.n	8035778 <ethernet_input+0x14c>
  }

  if (p->if_idx == NETIF_NO_INDEX) {
 803565c:	687b      	ldr	r3, [r7, #4]
 803565e:	7bdb      	ldrb	r3, [r3, #15]
 8035660:	2b00      	cmp	r3, #0
 8035662:	d106      	bne.n	8035672 <ethernet_input+0x46>
    p->if_idx = netif_get_index(netif);
 8035664:	683b      	ldr	r3, [r7, #0]
 8035666:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 803566a:	3301      	adds	r3, #1
 803566c:	b2da      	uxtb	r2, r3
 803566e:	687b      	ldr	r3, [r7, #4]
 8035670:	73da      	strb	r2, [r3, #15]
  }

  /* points to packet payload, which starts with an Ethernet header */
  ethhdr = (struct eth_hdr *)p->payload;
 8035672:	687b      	ldr	r3, [r7, #4]
 8035674:	685b      	ldr	r3, [r3, #4]
 8035676:	613b      	str	r3, [r7, #16]
               (unsigned char)ethhdr->dest.addr[3], (unsigned char)ethhdr->dest.addr[4], (unsigned char)ethhdr->dest.addr[5],
               (unsigned char)ethhdr->src.addr[0],  (unsigned char)ethhdr->src.addr[1],  (unsigned char)ethhdr->src.addr[2],
               (unsigned char)ethhdr->src.addr[3],  (unsigned char)ethhdr->src.addr[4],  (unsigned char)ethhdr->src.addr[5],
               lwip_htons(ethhdr->type)));

  type = ethhdr->type;
 8035678:	693b      	ldr	r3, [r7, #16]
 803567a:	7b1a      	ldrb	r2, [r3, #12]
 803567c:	7b5b      	ldrb	r3, [r3, #13]
 803567e:	021b      	lsls	r3, r3, #8
 8035680:	4313      	orrs	r3, r2
 8035682:	81fb      	strh	r3, [r7, #14]

#if LWIP_ARP_FILTER_NETIF
  netif = LWIP_ARP_FILTER_NETIF_FN(p, netif, lwip_htons(type));
#endif /* LWIP_ARP_FILTER_NETIF*/

  if (ethhdr->dest.addr[0] & 1) {
 8035684:	693b      	ldr	r3, [r7, #16]
 8035686:	781b      	ldrb	r3, [r3, #0]
 8035688:	f003 0301 	and.w	r3, r3, #1
 803568c:	2b00      	cmp	r3, #0
 803568e:	d023      	beq.n	80356d8 <ethernet_input+0xac>
    /* this might be a multicast or broadcast packet */
    if (ethhdr->dest.addr[0] == LL_IP4_MULTICAST_ADDR_0) {
 8035690:	693b      	ldr	r3, [r7, #16]
 8035692:	781b      	ldrb	r3, [r3, #0]
 8035694:	2b01      	cmp	r3, #1
 8035696:	d10f      	bne.n	80356b8 <ethernet_input+0x8c>
#if LWIP_IPV4
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 8035698:	693b      	ldr	r3, [r7, #16]
 803569a:	785b      	ldrb	r3, [r3, #1]
 803569c:	2b00      	cmp	r3, #0
 803569e:	d11b      	bne.n	80356d8 <ethernet_input+0xac>
          (ethhdr->dest.addr[2] == LL_IP4_MULTICAST_ADDR_2)) {
 80356a0:	693b      	ldr	r3, [r7, #16]
 80356a2:	789b      	ldrb	r3, [r3, #2]
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 80356a4:	2b5e      	cmp	r3, #94	; 0x5e
 80356a6:	d117      	bne.n	80356d8 <ethernet_input+0xac>
        /* mark the pbuf as link-layer multicast */
        p->flags |= PBUF_FLAG_LLMCAST;
 80356a8:	687b      	ldr	r3, [r7, #4]
 80356aa:	7b5b      	ldrb	r3, [r3, #13]
 80356ac:	f043 0310 	orr.w	r3, r3, #16
 80356b0:	b2da      	uxtb	r2, r3
 80356b2:	687b      	ldr	r3, [r7, #4]
 80356b4:	735a      	strb	r2, [r3, #13]
 80356b6:	e00f      	b.n	80356d8 <ethernet_input+0xac>
             (ethhdr->dest.addr[1] == LL_IP6_MULTICAST_ADDR_1)) {
      /* mark the pbuf as link-layer multicast */
      p->flags |= PBUF_FLAG_LLMCAST;
    }
#endif /* LWIP_IPV6 */
    else if (eth_addr_cmp(&ethhdr->dest, &ethbroadcast)) {
 80356b8:	693b      	ldr	r3, [r7, #16]
 80356ba:	2206      	movs	r2, #6
 80356bc:	4933      	ldr	r1, [pc, #204]	; (803578c <ethernet_input+0x160>)
 80356be:	4618      	mov	r0, r3
 80356c0:	f000 fc4a 	bl	8035f58 <memcmp>
 80356c4:	4603      	mov	r3, r0
 80356c6:	2b00      	cmp	r3, #0
 80356c8:	d106      	bne.n	80356d8 <ethernet_input+0xac>
      /* mark the pbuf as link-layer broadcast */
      p->flags |= PBUF_FLAG_LLBCAST;
 80356ca:	687b      	ldr	r3, [r7, #4]
 80356cc:	7b5b      	ldrb	r3, [r3, #13]
 80356ce:	f043 0308 	orr.w	r3, r3, #8
 80356d2:	b2da      	uxtb	r2, r3
 80356d4:	687b      	ldr	r3, [r7, #4]
 80356d6:	735a      	strb	r2, [r3, #13]
    }
  }

  switch (type) {
 80356d8:	89fb      	ldrh	r3, [r7, #14]
 80356da:	2b08      	cmp	r3, #8
 80356dc:	d003      	beq.n	80356e6 <ethernet_input+0xba>
 80356de:	f5b3 6fc1 	cmp.w	r3, #1544	; 0x608
 80356e2:	d014      	beq.n	803570e <ethernet_input+0xe2>
 80356e4:	e034      	b.n	8035750 <ethernet_input+0x124>
#if LWIP_IPV4 && LWIP_ARP
    /* IP packet? */
    case PP_HTONS(ETHTYPE_IP):
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 80356e6:	683b      	ldr	r3, [r7, #0]
 80356e8:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80356ec:	f003 0308 	and.w	r3, r3, #8
 80356f0:	2b00      	cmp	r3, #0
 80356f2:	d03c      	beq.n	803576e <ethernet_input+0x142>
        goto free_and_return;
      }
      /* skip Ethernet header (min. size checked above) */
      if (pbuf_remove_header(p, next_hdr_offset)) {
 80356f4:	8afb      	ldrh	r3, [r7, #22]
 80356f6:	4619      	mov	r1, r3
 80356f8:	6878      	ldr	r0, [r7, #4]
 80356fa:	f7f6 fb49 	bl	802bd90 <pbuf_remove_header>
 80356fe:	4603      	mov	r3, r0
 8035700:	2b00      	cmp	r3, #0
 8035702:	d136      	bne.n	8035772 <ethernet_input+0x146>
                     p->tot_len, next_hdr_offset));
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("Can't move over header in packet"));
        goto free_and_return;
      } else {
        /* pass to IP layer */
        ip4_input(p, netif);
 8035704:	6839      	ldr	r1, [r7, #0]
 8035706:	6878      	ldr	r0, [r7, #4]
 8035708:	f7fe fe7e 	bl	8034408 <ip4_input>
      }
      break;
 803570c:	e02d      	b.n	803576a <ethernet_input+0x13e>

    case PP_HTONS(ETHTYPE_ARP):
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 803570e:	683b      	ldr	r3, [r7, #0]
 8035710:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8035714:	f003 0308 	and.w	r3, r3, #8
 8035718:	2b00      	cmp	r3, #0
 803571a:	d02c      	beq.n	8035776 <ethernet_input+0x14a>
        goto free_and_return;
      }
      /* skip Ethernet header (min. size checked above) */
      if (pbuf_remove_header(p, next_hdr_offset)) {
 803571c:	8afb      	ldrh	r3, [r7, #22]
 803571e:	4619      	mov	r1, r3
 8035720:	6878      	ldr	r0, [r7, #4]
 8035722:	f7f6 fb35 	bl	802bd90 <pbuf_remove_header>
 8035726:	4603      	mov	r3, r0
 8035728:	2b00      	cmp	r3, #0
 803572a:	d00c      	beq.n	8035746 <ethernet_input+0x11a>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
                    ("ethernet_input: ARP response packet dropped, too short (%"U16_F"/%"U16_F")\n",
                     p->tot_len, next_hdr_offset));
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("Can't move over header in packet"));
        ETHARP_STATS_INC(etharp.lenerr);
 803572c:	4b16      	ldr	r3, [pc, #88]	; (8035788 <ethernet_input+0x15c>)
 803572e:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 8035730:	3301      	adds	r3, #1
 8035732:	b29a      	uxth	r2, r3
 8035734:	4b14      	ldr	r3, [pc, #80]	; (8035788 <ethernet_input+0x15c>)
 8035736:	845a      	strh	r2, [r3, #34]	; 0x22
        ETHARP_STATS_INC(etharp.drop);
 8035738:	4b13      	ldr	r3, [pc, #76]	; (8035788 <ethernet_input+0x15c>)
 803573a:	8bdb      	ldrh	r3, [r3, #30]
 803573c:	3301      	adds	r3, #1
 803573e:	b29a      	uxth	r2, r3
 8035740:	4b11      	ldr	r3, [pc, #68]	; (8035788 <ethernet_input+0x15c>)
 8035742:	83da      	strh	r2, [r3, #30]
        goto free_and_return;
 8035744:	e018      	b.n	8035778 <ethernet_input+0x14c>
      } else {
        /* pass p to ARP module */
        etharp_input(p, netif);
 8035746:	6839      	ldr	r1, [r7, #0]
 8035748:	6878      	ldr	r0, [r7, #4]
 803574a:	f7fd ff89 	bl	8033660 <etharp_input>
      }
      break;
 803574e:	e00c      	b.n	803576a <ethernet_input+0x13e>
#ifdef LWIP_HOOK_UNKNOWN_ETH_PROTOCOL
      if (LWIP_HOOK_UNKNOWN_ETH_PROTOCOL(p, netif) == ERR_OK) {
        break;
      }
#endif
      ETHARP_STATS_INC(etharp.proterr);
 8035750:	4b0d      	ldr	r3, [pc, #52]	; (8035788 <ethernet_input+0x15c>)
 8035752:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8035754:	3301      	adds	r3, #1
 8035756:	b29a      	uxth	r2, r3
 8035758:	4b0b      	ldr	r3, [pc, #44]	; (8035788 <ethernet_input+0x15c>)
 803575a:	851a      	strh	r2, [r3, #40]	; 0x28
      ETHARP_STATS_INC(etharp.drop);
 803575c:	4b0a      	ldr	r3, [pc, #40]	; (8035788 <ethernet_input+0x15c>)
 803575e:	8bdb      	ldrh	r3, [r3, #30]
 8035760:	3301      	adds	r3, #1
 8035762:	b29a      	uxth	r2, r3
 8035764:	4b08      	ldr	r3, [pc, #32]	; (8035788 <ethernet_input+0x15c>)
 8035766:	83da      	strh	r2, [r3, #30]
      MIB2_STATS_NETIF_INC(netif, ifinunknownprotos);
      goto free_and_return;
 8035768:	e006      	b.n	8035778 <ethernet_input+0x14c>
  }

  /* This means the pbuf is freed or consumed,
     so the caller doesn't have to free it again */
  return ERR_OK;
 803576a:	2300      	movs	r3, #0
 803576c:	e008      	b.n	8035780 <ethernet_input+0x154>
        goto free_and_return;
 803576e:	bf00      	nop
 8035770:	e002      	b.n	8035778 <ethernet_input+0x14c>
        goto free_and_return;
 8035772:	bf00      	nop
 8035774:	e000      	b.n	8035778 <ethernet_input+0x14c>
        goto free_and_return;
 8035776:	bf00      	nop

free_and_return:
  pbuf_free(p);
 8035778:	6878      	ldr	r0, [r7, #4]
 803577a:	f7f6 fb8f 	bl	802be9c <pbuf_free>
  return ERR_OK;
 803577e:	2300      	movs	r3, #0
}
 8035780:	4618      	mov	r0, r3
 8035782:	3718      	adds	r7, #24
 8035784:	46bd      	mov	sp, r7
 8035786:	bd80      	pop	{r7, pc}
 8035788:	2000ed10 	.word	0x2000ed10
 803578c:	0803abc8 	.word	0x0803abc8

08035790 <ethernet_output>:
 * @return ERR_OK if the packet was sent, any other err_t on failure
 */
err_t
ethernet_output(struct netif * netif, struct pbuf * p,
                const struct eth_addr * src, const struct eth_addr * dst,
                u16_t eth_type) {
 8035790:	b580      	push	{r7, lr}
 8035792:	b086      	sub	sp, #24
 8035794:	af00      	add	r7, sp, #0
 8035796:	60f8      	str	r0, [r7, #12]
 8035798:	60b9      	str	r1, [r7, #8]
 803579a:	607a      	str	r2, [r7, #4]
 803579c:	603b      	str	r3, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t eth_type_be = lwip_htons(eth_type);
 803579e:	8c3b      	ldrh	r3, [r7, #32]
 80357a0:	4618      	mov	r0, r3
 80357a2:	f7f4 feb9 	bl	802a518 <lwip_htons>
 80357a6:	4603      	mov	r3, r0
 80357a8:	82fb      	strh	r3, [r7, #22]

    eth_type_be = PP_HTONS(ETHTYPE_VLAN);
  } else
#endif /* ETHARP_SUPPORT_VLAN && defined(LWIP_HOOK_VLAN_SET) */
  {
    if (pbuf_add_header(p, SIZEOF_ETH_HDR) != 0) {
 80357aa:	210e      	movs	r1, #14
 80357ac:	68b8      	ldr	r0, [r7, #8]
 80357ae:	f7f6 fadf 	bl	802bd70 <pbuf_add_header>
 80357b2:	4603      	mov	r3, r0
 80357b4:	2b00      	cmp	r3, #0
 80357b6:	d125      	bne.n	8035804 <ethernet_output+0x74>
    }
  }

  LWIP_ASSERT_CORE_LOCKED();

  ethhdr = (struct eth_hdr *)p->payload;
 80357b8:	68bb      	ldr	r3, [r7, #8]
 80357ba:	685b      	ldr	r3, [r3, #4]
 80357bc:	613b      	str	r3, [r7, #16]
  ethhdr->type = eth_type_be;
 80357be:	693b      	ldr	r3, [r7, #16]
 80357c0:	8afa      	ldrh	r2, [r7, #22]
 80357c2:	819a      	strh	r2, [r3, #12]
  SMEMCPY(&ethhdr->dest, dst, ETH_HWADDR_LEN);
 80357c4:	693b      	ldr	r3, [r7, #16]
 80357c6:	2206      	movs	r2, #6
 80357c8:	6839      	ldr	r1, [r7, #0]
 80357ca:	4618      	mov	r0, r3
 80357cc:	f000 fbd4 	bl	8035f78 <memcpy>
  SMEMCPY(&ethhdr->src,  src, ETH_HWADDR_LEN);
 80357d0:	693b      	ldr	r3, [r7, #16]
 80357d2:	3306      	adds	r3, #6
 80357d4:	2206      	movs	r2, #6
 80357d6:	6879      	ldr	r1, [r7, #4]
 80357d8:	4618      	mov	r0, r3
 80357da:	f000 fbcd 	bl	8035f78 <memcpy>

  LWIP_ASSERT("netif->hwaddr_len must be 6 for ethernet_output!",
 80357de:	68fb      	ldr	r3, [r7, #12]
 80357e0:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80357e4:	2b06      	cmp	r3, #6
 80357e6:	d006      	beq.n	80357f6 <ethernet_output+0x66>
 80357e8:	4b0d      	ldr	r3, [pc, #52]	; (8035820 <ethernet_output+0x90>)
 80357ea:	f44f 7299 	mov.w	r2, #306	; 0x132
 80357ee:	490d      	ldr	r1, [pc, #52]	; (8035824 <ethernet_output+0x94>)
 80357f0:	480d      	ldr	r0, [pc, #52]	; (8035828 <ethernet_output+0x98>)
 80357f2:	f000 fcd1 	bl	8036198 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE,
              ("ethernet_output: sending packet %p\n", (void *)p));

  /* send the packet */
  return netif->linkoutput(netif, p);
 80357f6:	68fb      	ldr	r3, [r7, #12]
 80357f8:	699b      	ldr	r3, [r3, #24]
 80357fa:	68b9      	ldr	r1, [r7, #8]
 80357fc:	68f8      	ldr	r0, [r7, #12]
 80357fe:	4798      	blx	r3
 8035800:	4603      	mov	r3, r0
 8035802:	e008      	b.n	8035816 <ethernet_output+0x86>
      goto pbuf_header_failed;
 8035804:	bf00      	nop

pbuf_header_failed:
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
              ("ethernet_output: could not allocate room for header.\n"));
  LINK_STATS_INC(link.lenerr);
 8035806:	4b09      	ldr	r3, [pc, #36]	; (803582c <ethernet_output+0x9c>)
 8035808:	895b      	ldrh	r3, [r3, #10]
 803580a:	3301      	adds	r3, #1
 803580c:	b29a      	uxth	r2, r3
 803580e:	4b07      	ldr	r3, [pc, #28]	; (803582c <ethernet_output+0x9c>)
 8035810:	815a      	strh	r2, [r3, #10]
  return ERR_BUF;
 8035812:	f06f 0301 	mvn.w	r3, #1
}
 8035816:	4618      	mov	r0, r3
 8035818:	3718      	adds	r7, #24
 803581a:	46bd      	mov	sp, r7
 803581c:	bd80      	pop	{r7, pc}
 803581e:	bf00      	nop
 8035820:	0803a9c0 	.word	0x0803a9c0
 8035824:	0803a9f8 	.word	0x0803a9f8
 8035828:	0803aa2c 	.word	0x0803aa2c
 803582c:	2000ed10 	.word	0x2000ed10

08035830 <sys_mbox_new>:
#endif

/*-----------------------------------------------------------------------------------*/
//  Creates an empty mailbox.
err_t sys_mbox_new(sys_mbox_t *mbox, int size)
{
 8035830:	b580      	push	{r7, lr}
 8035832:	b086      	sub	sp, #24
 8035834:	af00      	add	r7, sp, #0
 8035836:	6078      	str	r0, [r7, #4]
 8035838:	6039      	str	r1, [r7, #0]
#if (osCMSIS < 0x20000U)
  osMessageQDef(QUEUE, size, void *);
 803583a:	683b      	ldr	r3, [r7, #0]
 803583c:	60bb      	str	r3, [r7, #8]
 803583e:	2304      	movs	r3, #4
 8035840:	60fb      	str	r3, [r7, #12]
 8035842:	2300      	movs	r3, #0
 8035844:	613b      	str	r3, [r7, #16]
 8035846:	2300      	movs	r3, #0
 8035848:	617b      	str	r3, [r7, #20]
  *mbox = osMessageCreate(osMessageQ(QUEUE), NULL);
 803584a:	f107 0308 	add.w	r3, r7, #8
 803584e:	2100      	movs	r1, #0
 8035850:	4618      	mov	r0, r3
 8035852:	f7ef fcea 	bl	802522a <osMessageCreate>
 8035856:	4602      	mov	r2, r0
 8035858:	687b      	ldr	r3, [r7, #4]
 803585a:	601a      	str	r2, [r3, #0]
#else
  *mbox = osMessageQueueNew(size, sizeof(void *), NULL);
#endif
#if SYS_STATS
  ++lwip_stats.sys.mbox.used;
 803585c:	4b10      	ldr	r3, [pc, #64]	; (80358a0 <sys_mbox_new+0x70>)
 803585e:	f8b3 30f4 	ldrh.w	r3, [r3, #244]	; 0xf4
 8035862:	3301      	adds	r3, #1
 8035864:	b29a      	uxth	r2, r3
 8035866:	4b0e      	ldr	r3, [pc, #56]	; (80358a0 <sys_mbox_new+0x70>)
 8035868:	f8a3 20f4 	strh.w	r2, [r3, #244]	; 0xf4
  if(lwip_stats.sys.mbox.max < lwip_stats.sys.mbox.used)
 803586c:	4b0c      	ldr	r3, [pc, #48]	; (80358a0 <sys_mbox_new+0x70>)
 803586e:	f8b3 20f6 	ldrh.w	r2, [r3, #246]	; 0xf6
 8035872:	4b0b      	ldr	r3, [pc, #44]	; (80358a0 <sys_mbox_new+0x70>)
 8035874:	f8b3 30f4 	ldrh.w	r3, [r3, #244]	; 0xf4
 8035878:	429a      	cmp	r2, r3
 803587a:	d205      	bcs.n	8035888 <sys_mbox_new+0x58>
  {
    lwip_stats.sys.mbox.max = lwip_stats.sys.mbox.used;
 803587c:	4b08      	ldr	r3, [pc, #32]	; (80358a0 <sys_mbox_new+0x70>)
 803587e:	f8b3 20f4 	ldrh.w	r2, [r3, #244]	; 0xf4
 8035882:	4b07      	ldr	r3, [pc, #28]	; (80358a0 <sys_mbox_new+0x70>)
 8035884:	f8a3 20f6 	strh.w	r2, [r3, #246]	; 0xf6
  }
#endif /* SYS_STATS */
  if(*mbox == NULL)
 8035888:	687b      	ldr	r3, [r7, #4]
 803588a:	681b      	ldr	r3, [r3, #0]
 803588c:	2b00      	cmp	r3, #0
 803588e:	d102      	bne.n	8035896 <sys_mbox_new+0x66>
    return ERR_MEM;
 8035890:	f04f 33ff 	mov.w	r3, #4294967295
 8035894:	e000      	b.n	8035898 <sys_mbox_new+0x68>

  return ERR_OK;
 8035896:	2300      	movs	r3, #0
}
 8035898:	4618      	mov	r0, r3
 803589a:	3718      	adds	r7, #24
 803589c:	46bd      	mov	sp, r7
 803589e:	bd80      	pop	{r7, pc}
 80358a0:	2000ed10 	.word	0x2000ed10

080358a4 <sys_mbox_free>:
  Deallocates a mailbox. If there are messages still present in the
  mailbox when the mailbox is deallocated, it is an indication of a
  programming error in lwIP and the developer should be notified.
*/
void sys_mbox_free(sys_mbox_t *mbox)
{
 80358a4:	b580      	push	{r7, lr}
 80358a6:	b082      	sub	sp, #8
 80358a8:	af00      	add	r7, sp, #0
 80358aa:	6078      	str	r0, [r7, #4]
#if (osCMSIS < 0x20000U)
  if(osMessageWaiting(*mbox))
 80358ac:	687b      	ldr	r3, [r7, #4]
 80358ae:	681b      	ldr	r3, [r3, #0]
 80358b0:	4618      	mov	r0, r3
 80358b2:	f7ef fd97 	bl	80253e4 <osMessageWaiting>
 80358b6:	4603      	mov	r3, r0
 80358b8:	2b00      	cmp	r3, #0
 80358ba:	d007      	beq.n	80358cc <sys_mbox_free+0x28>
#endif
  {
    /* Line for breakpoint.  Should never break here! */
    portNOP();
#if SYS_STATS
    lwip_stats.sys.mbox.err++;
 80358bc:	4b0c      	ldr	r3, [pc, #48]	; (80358f0 <sys_mbox_free+0x4c>)
 80358be:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80358c2:	3301      	adds	r3, #1
 80358c4:	b29a      	uxth	r2, r3
 80358c6:	4b0a      	ldr	r3, [pc, #40]	; (80358f0 <sys_mbox_free+0x4c>)
 80358c8:	f8a3 20f8 	strh.w	r2, [r3, #248]	; 0xf8
#endif /* SYS_STATS */

  }
#if (osCMSIS < 0x20000U)
  osMessageDelete(*mbox);
 80358cc:	687b      	ldr	r3, [r7, #4]
 80358ce:	681b      	ldr	r3, [r3, #0]
 80358d0:	4618      	mov	r0, r3
 80358d2:	f7ef fd9d 	bl	8025410 <osMessageDelete>
#else
  osMessageQueueDelete(*mbox);
#endif
#if SYS_STATS
  --lwip_stats.sys.mbox.used;
 80358d6:	4b06      	ldr	r3, [pc, #24]	; (80358f0 <sys_mbox_free+0x4c>)
 80358d8:	f8b3 30f4 	ldrh.w	r3, [r3, #244]	; 0xf4
 80358dc:	3b01      	subs	r3, #1
 80358de:	b29a      	uxth	r2, r3
 80358e0:	4b03      	ldr	r3, [pc, #12]	; (80358f0 <sys_mbox_free+0x4c>)
 80358e2:	f8a3 20f4 	strh.w	r2, [r3, #244]	; 0xf4
#endif /* SYS_STATS */
}
 80358e6:	bf00      	nop
 80358e8:	3708      	adds	r7, #8
 80358ea:	46bd      	mov	sp, r7
 80358ec:	bd80      	pop	{r7, pc}
 80358ee:	bf00      	nop
 80358f0:	2000ed10 	.word	0x2000ed10

080358f4 <sys_mbox_trypost>:


/*-----------------------------------------------------------------------------------*/
//   Try to post the "msg" to the mailbox.
err_t sys_mbox_trypost(sys_mbox_t *mbox, void *msg)
{
 80358f4:	b580      	push	{r7, lr}
 80358f6:	b084      	sub	sp, #16
 80358f8:	af00      	add	r7, sp, #0
 80358fa:	6078      	str	r0, [r7, #4]
 80358fc:	6039      	str	r1, [r7, #0]
  err_t result;
#if (osCMSIS < 0x20000U)
  if(osMessagePut(*mbox, (uint32_t)msg, 0) == osOK)
 80358fe:	687b      	ldr	r3, [r7, #4]
 8035900:	681b      	ldr	r3, [r3, #0]
 8035902:	6839      	ldr	r1, [r7, #0]
 8035904:	2200      	movs	r2, #0
 8035906:	4618      	mov	r0, r3
 8035908:	f7ef fcb8 	bl	802527c <osMessagePut>
 803590c:	4603      	mov	r3, r0
 803590e:	2b00      	cmp	r3, #0
 8035910:	d102      	bne.n	8035918 <sys_mbox_trypost+0x24>
#else
  if(osMessageQueuePut(*mbox, &msg, 0, 0) == osOK)
#endif
  {
    result = ERR_OK;
 8035912:	2300      	movs	r3, #0
 8035914:	73fb      	strb	r3, [r7, #15]
 8035916:	e009      	b.n	803592c <sys_mbox_trypost+0x38>
  }
  else
  {
    // could not post, queue must be full
    result = ERR_MEM;
 8035918:	23ff      	movs	r3, #255	; 0xff
 803591a:	73fb      	strb	r3, [r7, #15]

#if SYS_STATS
    lwip_stats.sys.mbox.err++;
 803591c:	4b06      	ldr	r3, [pc, #24]	; (8035938 <sys_mbox_trypost+0x44>)
 803591e:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8035922:	3301      	adds	r3, #1
 8035924:	b29a      	uxth	r2, r3
 8035926:	4b04      	ldr	r3, [pc, #16]	; (8035938 <sys_mbox_trypost+0x44>)
 8035928:	f8a3 20f8 	strh.w	r2, [r3, #248]	; 0xf8
#endif /* SYS_STATS */
  }

  return result;
 803592c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8035930:	4618      	mov	r0, r3
 8035932:	3710      	adds	r7, #16
 8035934:	46bd      	mov	sp, r7
 8035936:	bd80      	pop	{r7, pc}
 8035938:	2000ed10 	.word	0x2000ed10

0803593c <sys_arch_mbox_fetch>:

  Note that a function with a similar name, sys_mbox_fetch(), is
  implemented by lwIP.
*/
u32_t sys_arch_mbox_fetch(sys_mbox_t *mbox, void **msg, u32_t timeout)
{
 803593c:	b580      	push	{r7, lr}
 803593e:	b08c      	sub	sp, #48	; 0x30
 8035940:	af00      	add	r7, sp, #0
 8035942:	61f8      	str	r0, [r7, #28]
 8035944:	61b9      	str	r1, [r7, #24]
 8035946:	617a      	str	r2, [r7, #20]
#if (osCMSIS < 0x20000U)
  osEvent event;
  uint32_t starttime = osKernelSysTick();
 8035948:	f7ef fa9a 	bl	8024e80 <osKernelSysTick>
 803594c:	62f8      	str	r0, [r7, #44]	; 0x2c
#else
  osStatus_t status;
  uint32_t starttime = osKernelGetTickCount();
#endif
  if(timeout != 0)
 803594e:	697b      	ldr	r3, [r7, #20]
 8035950:	2b00      	cmp	r3, #0
 8035952:	d017      	beq.n	8035984 <sys_arch_mbox_fetch+0x48>
  {
#if (osCMSIS < 0x20000U)
    event = osMessageGet (*mbox, timeout);
 8035954:	69fb      	ldr	r3, [r7, #28]
 8035956:	6819      	ldr	r1, [r3, #0]
 8035958:	f107 0320 	add.w	r3, r7, #32
 803595c:	697a      	ldr	r2, [r7, #20]
 803595e:	4618      	mov	r0, r3
 8035960:	f7ef fccc 	bl	80252fc <osMessageGet>

    if(event.status == osEventMessage)
 8035964:	6a3b      	ldr	r3, [r7, #32]
 8035966:	2b10      	cmp	r3, #16
 8035968:	d109      	bne.n	803597e <sys_arch_mbox_fetch+0x42>
    {
      *msg = (void *)event.value.v;
 803596a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 803596c:	461a      	mov	r2, r3
 803596e:	69bb      	ldr	r3, [r7, #24]
 8035970:	601a      	str	r2, [r3, #0]
      return (osKernelSysTick() - starttime);
 8035972:	f7ef fa85 	bl	8024e80 <osKernelSysTick>
 8035976:	4602      	mov	r2, r0
 8035978:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 803597a:	1ad3      	subs	r3, r2, r3
 803597c:	e019      	b.n	80359b2 <sys_arch_mbox_fetch+0x76>
      return (osKernelGetTickCount() - starttime);
    }
#endif
    else
    {
      return SYS_ARCH_TIMEOUT;
 803597e:	f04f 33ff 	mov.w	r3, #4294967295
 8035982:	e016      	b.n	80359b2 <sys_arch_mbox_fetch+0x76>
    }
  }
  else
  {
#if (osCMSIS < 0x20000U)
    event = osMessageGet (*mbox, osWaitForever);
 8035984:	69fb      	ldr	r3, [r7, #28]
 8035986:	6819      	ldr	r1, [r3, #0]
 8035988:	463b      	mov	r3, r7
 803598a:	f04f 32ff 	mov.w	r2, #4294967295
 803598e:	4618      	mov	r0, r3
 8035990:	f7ef fcb4 	bl	80252fc <osMessageGet>
 8035994:	f107 0320 	add.w	r3, r7, #32
 8035998:	463a      	mov	r2, r7
 803599a:	ca07      	ldmia	r2, {r0, r1, r2}
 803599c:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    *msg = (void *)event.value.v;
 80359a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80359a2:	461a      	mov	r2, r3
 80359a4:	69bb      	ldr	r3, [r7, #24]
 80359a6:	601a      	str	r2, [r3, #0]
    return (osKernelSysTick() - starttime);
 80359a8:	f7ef fa6a 	bl	8024e80 <osKernelSysTick>
 80359ac:	4602      	mov	r2, r0
 80359ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80359b0:	1ad3      	subs	r3, r2, r3
#else
    osMessageQueueGet(*mbox, msg, 0, osWaitForever );
    return (osKernelGetTickCount() - starttime);
#endif
  }
}
 80359b2:	4618      	mov	r0, r3
 80359b4:	3730      	adds	r7, #48	; 0x30
 80359b6:	46bd      	mov	sp, r7
 80359b8:	bd80      	pop	{r7, pc}

080359ba <sys_arch_mbox_tryfetch>:
/*
  Similar to sys_arch_mbox_fetch, but if message is not ready immediately, we'll
  return with SYS_MBOX_EMPTY.  On success, 0 is returned.
*/
u32_t sys_arch_mbox_tryfetch(sys_mbox_t *mbox, void **msg)
{
 80359ba:	b580      	push	{r7, lr}
 80359bc:	b086      	sub	sp, #24
 80359be:	af00      	add	r7, sp, #0
 80359c0:	6078      	str	r0, [r7, #4]
 80359c2:	6039      	str	r1, [r7, #0]
#if (osCMSIS < 0x20000U)
  osEvent event;

  event = osMessageGet (*mbox, 0);
 80359c4:	687b      	ldr	r3, [r7, #4]
 80359c6:	6819      	ldr	r1, [r3, #0]
 80359c8:	f107 030c 	add.w	r3, r7, #12
 80359cc:	2200      	movs	r2, #0
 80359ce:	4618      	mov	r0, r3
 80359d0:	f7ef fc94 	bl	80252fc <osMessageGet>

  if(event.status == osEventMessage)
 80359d4:	68fb      	ldr	r3, [r7, #12]
 80359d6:	2b10      	cmp	r3, #16
 80359d8:	d105      	bne.n	80359e6 <sys_arch_mbox_tryfetch+0x2c>
  {
    *msg = (void *)event.value.v;
 80359da:	693b      	ldr	r3, [r7, #16]
 80359dc:	461a      	mov	r2, r3
 80359de:	683b      	ldr	r3, [r7, #0]
 80359e0:	601a      	str	r2, [r3, #0]
#else
  if (osMessageQueueGet(*mbox, msg, 0, 0) == osOK)
  {
#endif
    return ERR_OK;
 80359e2:	2300      	movs	r3, #0
 80359e4:	e001      	b.n	80359ea <sys_arch_mbox_tryfetch+0x30>
  }
  else
  {
    return SYS_MBOX_EMPTY;
 80359e6:	f04f 33ff 	mov.w	r3, #4294967295
  }
}
 80359ea:	4618      	mov	r0, r3
 80359ec:	3718      	adds	r7, #24
 80359ee:	46bd      	mov	sp, r7
 80359f0:	bd80      	pop	{r7, pc}

080359f2 <sys_mbox_valid>:
/*----------------------------------------------------------------------------------*/
int sys_mbox_valid(sys_mbox_t *mbox)
{
 80359f2:	b480      	push	{r7}
 80359f4:	b083      	sub	sp, #12
 80359f6:	af00      	add	r7, sp, #0
 80359f8:	6078      	str	r0, [r7, #4]
  if (*mbox == SYS_MBOX_NULL)
 80359fa:	687b      	ldr	r3, [r7, #4]
 80359fc:	681b      	ldr	r3, [r3, #0]
 80359fe:	2b00      	cmp	r3, #0
 8035a00:	d101      	bne.n	8035a06 <sys_mbox_valid+0x14>
    return 0;
 8035a02:	2300      	movs	r3, #0
 8035a04:	e000      	b.n	8035a08 <sys_mbox_valid+0x16>
  else
    return 1;
 8035a06:	2301      	movs	r3, #1
}
 8035a08:	4618      	mov	r0, r3
 8035a0a:	370c      	adds	r7, #12
 8035a0c:	46bd      	mov	sp, r7
 8035a0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8035a12:	4770      	bx	lr

08035a14 <sys_mbox_set_invalid>:
/*-----------------------------------------------------------------------------------*/
void sys_mbox_set_invalid(sys_mbox_t *mbox)
{
 8035a14:	b480      	push	{r7}
 8035a16:	b083      	sub	sp, #12
 8035a18:	af00      	add	r7, sp, #0
 8035a1a:	6078      	str	r0, [r7, #4]
  *mbox = SYS_MBOX_NULL;
 8035a1c:	687b      	ldr	r3, [r7, #4]
 8035a1e:	2200      	movs	r2, #0
 8035a20:	601a      	str	r2, [r3, #0]
}
 8035a22:	bf00      	nop
 8035a24:	370c      	adds	r7, #12
 8035a26:	46bd      	mov	sp, r7
 8035a28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8035a2c:	4770      	bx	lr
	...

08035a30 <sys_sem_new>:

/*-----------------------------------------------------------------------------------*/
//  Creates a new semaphore. The "count" argument specifies
//  the initial state of the semaphore.
err_t sys_sem_new(sys_sem_t *sem, u8_t count)
{
 8035a30:	b580      	push	{r7, lr}
 8035a32:	b084      	sub	sp, #16
 8035a34:	af00      	add	r7, sp, #0
 8035a36:	6078      	str	r0, [r7, #4]
 8035a38:	460b      	mov	r3, r1
 8035a3a:	70fb      	strb	r3, [r7, #3]
#if (osCMSIS < 0x20000U)
  osSemaphoreDef(SEM);
 8035a3c:	2300      	movs	r3, #0
 8035a3e:	60bb      	str	r3, [r7, #8]
 8035a40:	2300      	movs	r3, #0
 8035a42:	60fb      	str	r3, [r7, #12]
  *sem = osSemaphoreCreate (osSemaphore(SEM), 1);
 8035a44:	f107 0308 	add.w	r3, r7, #8
 8035a48:	2101      	movs	r1, #1
 8035a4a:	4618      	mov	r0, r3
 8035a4c:	f7ef fb24 	bl	8025098 <osSemaphoreCreate>
 8035a50:	4602      	mov	r2, r0
 8035a52:	687b      	ldr	r3, [r7, #4]
 8035a54:	601a      	str	r2, [r3, #0]
#else
  *sem = osSemaphoreNew(UINT16_MAX, count, NULL);
#endif

  if(*sem == NULL)
 8035a56:	687b      	ldr	r3, [r7, #4]
 8035a58:	681b      	ldr	r3, [r3, #0]
 8035a5a:	2b00      	cmp	r3, #0
 8035a5c:	d10a      	bne.n	8035a74 <sys_sem_new+0x44>
  {
#if SYS_STATS
    ++lwip_stats.sys.sem.err;
 8035a5e:	4b17      	ldr	r3, [pc, #92]	; (8035abc <sys_sem_new+0x8c>)
 8035a60:	f8b3 30ec 	ldrh.w	r3, [r3, #236]	; 0xec
 8035a64:	3301      	adds	r3, #1
 8035a66:	b29a      	uxth	r2, r3
 8035a68:	4b14      	ldr	r3, [pc, #80]	; (8035abc <sys_sem_new+0x8c>)
 8035a6a:	f8a3 20ec 	strh.w	r2, [r3, #236]	; 0xec
#endif /* SYS_STATS */
    return ERR_MEM;
 8035a6e:	f04f 33ff 	mov.w	r3, #4294967295
 8035a72:	e01f      	b.n	8035ab4 <sys_sem_new+0x84>
  }

  if(count == 0)	// Means it can't be taken
 8035a74:	78fb      	ldrb	r3, [r7, #3]
 8035a76:	2b00      	cmp	r3, #0
 8035a78:	d105      	bne.n	8035a86 <sys_sem_new+0x56>
  {
#if (osCMSIS < 0x20000U)
    osSemaphoreWait(*sem, 0);
 8035a7a:	687b      	ldr	r3, [r7, #4]
 8035a7c:	681b      	ldr	r3, [r3, #0]
 8035a7e:	2100      	movs	r1, #0
 8035a80:	4618      	mov	r0, r3
 8035a82:	f7ef fb3b 	bl	80250fc <osSemaphoreWait>
    osSemaphoreAcquire(*sem, 0);
#endif
  }

#if SYS_STATS
  ++lwip_stats.sys.sem.used;
 8035a86:	4b0d      	ldr	r3, [pc, #52]	; (8035abc <sys_sem_new+0x8c>)
 8035a88:	f8b3 30e8 	ldrh.w	r3, [r3, #232]	; 0xe8
 8035a8c:	3301      	adds	r3, #1
 8035a8e:	b29a      	uxth	r2, r3
 8035a90:	4b0a      	ldr	r3, [pc, #40]	; (8035abc <sys_sem_new+0x8c>)
 8035a92:	f8a3 20e8 	strh.w	r2, [r3, #232]	; 0xe8
  if (lwip_stats.sys.sem.max < lwip_stats.sys.sem.used) {
 8035a96:	4b09      	ldr	r3, [pc, #36]	; (8035abc <sys_sem_new+0x8c>)
 8035a98:	f8b3 20ea 	ldrh.w	r2, [r3, #234]	; 0xea
 8035a9c:	4b07      	ldr	r3, [pc, #28]	; (8035abc <sys_sem_new+0x8c>)
 8035a9e:	f8b3 30e8 	ldrh.w	r3, [r3, #232]	; 0xe8
 8035aa2:	429a      	cmp	r2, r3
 8035aa4:	d205      	bcs.n	8035ab2 <sys_sem_new+0x82>
    lwip_stats.sys.sem.max = lwip_stats.sys.sem.used;
 8035aa6:	4b05      	ldr	r3, [pc, #20]	; (8035abc <sys_sem_new+0x8c>)
 8035aa8:	f8b3 20e8 	ldrh.w	r2, [r3, #232]	; 0xe8
 8035aac:	4b03      	ldr	r3, [pc, #12]	; (8035abc <sys_sem_new+0x8c>)
 8035aae:	f8a3 20ea 	strh.w	r2, [r3, #234]	; 0xea
  }
#endif /* SYS_STATS */

  return ERR_OK;
 8035ab2:	2300      	movs	r3, #0
}
 8035ab4:	4618      	mov	r0, r3
 8035ab6:	3710      	adds	r7, #16
 8035ab8:	46bd      	mov	sp, r7
 8035aba:	bd80      	pop	{r7, pc}
 8035abc:	2000ed10 	.word	0x2000ed10

08035ac0 <sys_arch_sem_wait>:

  Notice that lwIP implements a function with a similar name,
  sys_sem_wait(), that uses the sys_arch_sem_wait() function.
*/
u32_t sys_arch_sem_wait(sys_sem_t *sem, u32_t timeout)
{
 8035ac0:	b580      	push	{r7, lr}
 8035ac2:	b084      	sub	sp, #16
 8035ac4:	af00      	add	r7, sp, #0
 8035ac6:	6078      	str	r0, [r7, #4]
 8035ac8:	6039      	str	r1, [r7, #0]
#if (osCMSIS < 0x20000U)
  uint32_t starttime = osKernelSysTick();
 8035aca:	f7ef f9d9 	bl	8024e80 <osKernelSysTick>
 8035ace:	60f8      	str	r0, [r7, #12]
#else
  uint32_t starttime = osKernelGetTickCount();
#endif
  if(timeout != 0)
 8035ad0:	683b      	ldr	r3, [r7, #0]
 8035ad2:	2b00      	cmp	r3, #0
 8035ad4:	d011      	beq.n	8035afa <sys_arch_sem_wait+0x3a>
  {
#if (osCMSIS < 0x20000U)
    if(osSemaphoreWait (*sem, timeout) == osOK)
 8035ad6:	687b      	ldr	r3, [r7, #4]
 8035ad8:	681b      	ldr	r3, [r3, #0]
 8035ada:	6839      	ldr	r1, [r7, #0]
 8035adc:	4618      	mov	r0, r3
 8035ade:	f7ef fb0d 	bl	80250fc <osSemaphoreWait>
 8035ae2:	4603      	mov	r3, r0
 8035ae4:	2b00      	cmp	r3, #0
 8035ae6:	d105      	bne.n	8035af4 <sys_arch_sem_wait+0x34>
    {
      return (osKernelSysTick() - starttime);
 8035ae8:	f7ef f9ca 	bl	8024e80 <osKernelSysTick>
 8035aec:	4602      	mov	r2, r0
 8035aee:	68fb      	ldr	r3, [r7, #12]
 8035af0:	1ad3      	subs	r3, r2, r3
 8035af2:	e012      	b.n	8035b1a <sys_arch_sem_wait+0x5a>
        return (osKernelGetTickCount() - starttime);
#endif
    }
    else
    {
      return SYS_ARCH_TIMEOUT;
 8035af4:	f04f 33ff 	mov.w	r3, #4294967295
 8035af8:	e00f      	b.n	8035b1a <sys_arch_sem_wait+0x5a>
    }
  }
  else
  {
#if (osCMSIS < 0x20000U)
    while(osSemaphoreWait (*sem, osWaitForever) != osOK);
 8035afa:	bf00      	nop
 8035afc:	687b      	ldr	r3, [r7, #4]
 8035afe:	681b      	ldr	r3, [r3, #0]
 8035b00:	f04f 31ff 	mov.w	r1, #4294967295
 8035b04:	4618      	mov	r0, r3
 8035b06:	f7ef faf9 	bl	80250fc <osSemaphoreWait>
 8035b0a:	4603      	mov	r3, r0
 8035b0c:	2b00      	cmp	r3, #0
 8035b0e:	d1f5      	bne.n	8035afc <sys_arch_sem_wait+0x3c>
    return (osKernelSysTick() - starttime);
 8035b10:	f7ef f9b6 	bl	8024e80 <osKernelSysTick>
 8035b14:	4602      	mov	r2, r0
 8035b16:	68fb      	ldr	r3, [r7, #12]
 8035b18:	1ad3      	subs	r3, r2, r3
#else
    while(osSemaphoreAcquire(*sem, osWaitForever) != osOK);
    return (osKernelGetTickCount() - starttime);
#endif
  }
}
 8035b1a:	4618      	mov	r0, r3
 8035b1c:	3710      	adds	r7, #16
 8035b1e:	46bd      	mov	sp, r7
 8035b20:	bd80      	pop	{r7, pc}

08035b22 <sys_sem_signal>:

/*-----------------------------------------------------------------------------------*/
// Signals a semaphore
void sys_sem_signal(sys_sem_t *sem)
{
 8035b22:	b580      	push	{r7, lr}
 8035b24:	b082      	sub	sp, #8
 8035b26:	af00      	add	r7, sp, #0
 8035b28:	6078      	str	r0, [r7, #4]
  osSemaphoreRelease(*sem);
 8035b2a:	687b      	ldr	r3, [r7, #4]
 8035b2c:	681b      	ldr	r3, [r3, #0]
 8035b2e:	4618      	mov	r0, r3
 8035b30:	f7ef fb32 	bl	8025198 <osSemaphoreRelease>
}
 8035b34:	bf00      	nop
 8035b36:	3708      	adds	r7, #8
 8035b38:	46bd      	mov	sp, r7
 8035b3a:	bd80      	pop	{r7, pc}

08035b3c <sys_sem_free>:

/*-----------------------------------------------------------------------------------*/
// Deallocates a semaphore
void sys_sem_free(sys_sem_t *sem)
{
 8035b3c:	b580      	push	{r7, lr}
 8035b3e:	b082      	sub	sp, #8
 8035b40:	af00      	add	r7, sp, #0
 8035b42:	6078      	str	r0, [r7, #4]
#if SYS_STATS
  --lwip_stats.sys.sem.used;
 8035b44:	4b08      	ldr	r3, [pc, #32]	; (8035b68 <sys_sem_free+0x2c>)
 8035b46:	f8b3 30e8 	ldrh.w	r3, [r3, #232]	; 0xe8
 8035b4a:	3b01      	subs	r3, #1
 8035b4c:	b29a      	uxth	r2, r3
 8035b4e:	4b06      	ldr	r3, [pc, #24]	; (8035b68 <sys_sem_free+0x2c>)
 8035b50:	f8a3 20e8 	strh.w	r2, [r3, #232]	; 0xe8
#endif /* SYS_STATS */

  osSemaphoreDelete(*sem);
 8035b54:	687b      	ldr	r3, [r7, #4]
 8035b56:	681b      	ldr	r3, [r3, #0]
 8035b58:	4618      	mov	r0, r3
 8035b5a:	f7ef fb53 	bl	8025204 <osSemaphoreDelete>
}
 8035b5e:	bf00      	nop
 8035b60:	3708      	adds	r7, #8
 8035b62:	46bd      	mov	sp, r7
 8035b64:	bd80      	pop	{r7, pc}
 8035b66:	bf00      	nop
 8035b68:	2000ed10 	.word	0x2000ed10

08035b6c <sys_sem_valid>:
/*-----------------------------------------------------------------------------------*/
int sys_sem_valid(sys_sem_t *sem)
{
 8035b6c:	b480      	push	{r7}
 8035b6e:	b083      	sub	sp, #12
 8035b70:	af00      	add	r7, sp, #0
 8035b72:	6078      	str	r0, [r7, #4]
  if (*sem == SYS_SEM_NULL)
 8035b74:	687b      	ldr	r3, [r7, #4]
 8035b76:	681b      	ldr	r3, [r3, #0]
 8035b78:	2b00      	cmp	r3, #0
 8035b7a:	d101      	bne.n	8035b80 <sys_sem_valid+0x14>
    return 0;
 8035b7c:	2300      	movs	r3, #0
 8035b7e:	e000      	b.n	8035b82 <sys_sem_valid+0x16>
  else
    return 1;
 8035b80:	2301      	movs	r3, #1
}
 8035b82:	4618      	mov	r0, r3
 8035b84:	370c      	adds	r7, #12
 8035b86:	46bd      	mov	sp, r7
 8035b88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8035b8c:	4770      	bx	lr

08035b8e <sys_sem_set_invalid>:

/*-----------------------------------------------------------------------------------*/
void sys_sem_set_invalid(sys_sem_t *sem)
{
 8035b8e:	b480      	push	{r7}
 8035b90:	b083      	sub	sp, #12
 8035b92:	af00      	add	r7, sp, #0
 8035b94:	6078      	str	r0, [r7, #4]
  *sem = SYS_SEM_NULL;
 8035b96:	687b      	ldr	r3, [r7, #4]
 8035b98:	2200      	movs	r2, #0
 8035b9a:	601a      	str	r2, [r3, #0]
}
 8035b9c:	bf00      	nop
 8035b9e:	370c      	adds	r7, #12
 8035ba0:	46bd      	mov	sp, r7
 8035ba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8035ba6:	4770      	bx	lr

08035ba8 <sys_init>:
#else
osMutexId_t lwip_sys_mutex;
#endif
// Initialize sys arch
void sys_init(void)
{
 8035ba8:	b580      	push	{r7, lr}
 8035baa:	af00      	add	r7, sp, #0
#if (osCMSIS < 0x20000U)
  lwip_sys_mutex = osMutexCreate(osMutex(lwip_sys_mutex));
 8035bac:	4803      	ldr	r0, [pc, #12]	; (8035bbc <sys_init+0x14>)
 8035bae:	f7ef f9d7 	bl	8024f60 <osMutexCreate>
 8035bb2:	4603      	mov	r3, r0
 8035bb4:	4a02      	ldr	r2, [pc, #8]	; (8035bc0 <sys_init+0x18>)
 8035bb6:	6013      	str	r3, [r2, #0]
#else
  lwip_sys_mutex = osMutexNew(NULL);
#endif
}
 8035bb8:	bf00      	nop
 8035bba:	bd80      	pop	{r7, pc}
 8035bbc:	0803abd8 	.word	0x0803abd8
 8035bc0:	2000ef68 	.word	0x2000ef68

08035bc4 <sys_mutex_new>:
                                      /* Mutexes*/
/*-----------------------------------------------------------------------------------*/
/*-----------------------------------------------------------------------------------*/
#if LWIP_COMPAT_MUTEX == 0
/* Create a new mutex*/
err_t sys_mutex_new(sys_mutex_t *mutex) {
 8035bc4:	b580      	push	{r7, lr}
 8035bc6:	b084      	sub	sp, #16
 8035bc8:	af00      	add	r7, sp, #0
 8035bca:	6078      	str	r0, [r7, #4]

#if (osCMSIS < 0x20000U)
  osMutexDef(MUTEX);
 8035bcc:	2300      	movs	r3, #0
 8035bce:	60bb      	str	r3, [r7, #8]
 8035bd0:	2300      	movs	r3, #0
 8035bd2:	60fb      	str	r3, [r7, #12]
  *mutex = osMutexCreate(osMutex(MUTEX));
 8035bd4:	f107 0308 	add.w	r3, r7, #8
 8035bd8:	4618      	mov	r0, r3
 8035bda:	f7ef f9c1 	bl	8024f60 <osMutexCreate>
 8035bde:	4602      	mov	r2, r0
 8035be0:	687b      	ldr	r3, [r7, #4]
 8035be2:	601a      	str	r2, [r3, #0]
#else
  *mutex = osMutexNew(NULL);
#endif

  if(*mutex == NULL)
 8035be4:	687b      	ldr	r3, [r7, #4]
 8035be6:	681b      	ldr	r3, [r3, #0]
 8035be8:	2b00      	cmp	r3, #0
 8035bea:	d10a      	bne.n	8035c02 <sys_mutex_new+0x3e>
  {
#if SYS_STATS
    ++lwip_stats.sys.mutex.err;
 8035bec:	4b12      	ldr	r3, [pc, #72]	; (8035c38 <sys_mutex_new+0x74>)
 8035bee:	f8b3 30f2 	ldrh.w	r3, [r3, #242]	; 0xf2
 8035bf2:	3301      	adds	r3, #1
 8035bf4:	b29a      	uxth	r2, r3
 8035bf6:	4b10      	ldr	r3, [pc, #64]	; (8035c38 <sys_mutex_new+0x74>)
 8035bf8:	f8a3 20f2 	strh.w	r2, [r3, #242]	; 0xf2
#endif /* SYS_STATS */
    return ERR_MEM;
 8035bfc:	f04f 33ff 	mov.w	r3, #4294967295
 8035c00:	e016      	b.n	8035c30 <sys_mutex_new+0x6c>
  }

#if SYS_STATS
  ++lwip_stats.sys.mutex.used;
 8035c02:	4b0d      	ldr	r3, [pc, #52]	; (8035c38 <sys_mutex_new+0x74>)
 8035c04:	f8b3 30ee 	ldrh.w	r3, [r3, #238]	; 0xee
 8035c08:	3301      	adds	r3, #1
 8035c0a:	b29a      	uxth	r2, r3
 8035c0c:	4b0a      	ldr	r3, [pc, #40]	; (8035c38 <sys_mutex_new+0x74>)
 8035c0e:	f8a3 20ee 	strh.w	r2, [r3, #238]	; 0xee
  if (lwip_stats.sys.mutex.max < lwip_stats.sys.mutex.used) {
 8035c12:	4b09      	ldr	r3, [pc, #36]	; (8035c38 <sys_mutex_new+0x74>)
 8035c14:	f8b3 20f0 	ldrh.w	r2, [r3, #240]	; 0xf0
 8035c18:	4b07      	ldr	r3, [pc, #28]	; (8035c38 <sys_mutex_new+0x74>)
 8035c1a:	f8b3 30ee 	ldrh.w	r3, [r3, #238]	; 0xee
 8035c1e:	429a      	cmp	r2, r3
 8035c20:	d205      	bcs.n	8035c2e <sys_mutex_new+0x6a>
    lwip_stats.sys.mutex.max = lwip_stats.sys.mutex.used;
 8035c22:	4b05      	ldr	r3, [pc, #20]	; (8035c38 <sys_mutex_new+0x74>)
 8035c24:	f8b3 20ee 	ldrh.w	r2, [r3, #238]	; 0xee
 8035c28:	4b03      	ldr	r3, [pc, #12]	; (8035c38 <sys_mutex_new+0x74>)
 8035c2a:	f8a3 20f0 	strh.w	r2, [r3, #240]	; 0xf0
  }
#endif /* SYS_STATS */
  return ERR_OK;
 8035c2e:	2300      	movs	r3, #0
}
 8035c30:	4618      	mov	r0, r3
 8035c32:	3710      	adds	r7, #16
 8035c34:	46bd      	mov	sp, r7
 8035c36:	bd80      	pop	{r7, pc}
 8035c38:	2000ed10 	.word	0x2000ed10

08035c3c <sys_mutex_lock>:
  osMutexDelete(*mutex);
}
/*-----------------------------------------------------------------------------------*/
/* Lock a mutex*/
void sys_mutex_lock(sys_mutex_t *mutex)
{
 8035c3c:	b580      	push	{r7, lr}
 8035c3e:	b082      	sub	sp, #8
 8035c40:	af00      	add	r7, sp, #0
 8035c42:	6078      	str	r0, [r7, #4]
#if (osCMSIS < 0x20000U)
  osMutexWait(*mutex, osWaitForever);
 8035c44:	687b      	ldr	r3, [r7, #4]
 8035c46:	681b      	ldr	r3, [r3, #0]
 8035c48:	f04f 31ff 	mov.w	r1, #4294967295
 8035c4c:	4618      	mov	r0, r3
 8035c4e:	f7ef f99f 	bl	8024f90 <osMutexWait>
#else
  osMutexAcquire(*mutex, osWaitForever);
#endif
}
 8035c52:	bf00      	nop
 8035c54:	3708      	adds	r7, #8
 8035c56:	46bd      	mov	sp, r7
 8035c58:	bd80      	pop	{r7, pc}

08035c5a <sys_mutex_unlock>:

/*-----------------------------------------------------------------------------------*/
/* Unlock a mutex*/
void sys_mutex_unlock(sys_mutex_t *mutex)
{
 8035c5a:	b580      	push	{r7, lr}
 8035c5c:	b082      	sub	sp, #8
 8035c5e:	af00      	add	r7, sp, #0
 8035c60:	6078      	str	r0, [r7, #4]
  osMutexRelease(*mutex);
 8035c62:	687b      	ldr	r3, [r7, #4]
 8035c64:	681b      	ldr	r3, [r3, #0]
 8035c66:	4618      	mov	r0, r3
 8035c68:	f7ef f9e0 	bl	802502c <osMutexRelease>
}
 8035c6c:	bf00      	nop
 8035c6e:	3708      	adds	r7, #8
 8035c70:	46bd      	mov	sp, r7
 8035c72:	bd80      	pop	{r7, pc}

08035c74 <sys_thread_new>:
  function "thread()". The "arg" argument will be passed as an argument to the
  thread() function. The id of the new thread is returned. Both the id and
  the priority are system dependent.
*/
sys_thread_t sys_thread_new(const char *name, lwip_thread_fn thread , void *arg, int stacksize, int prio)
{
 8035c74:	b580      	push	{r7, lr}
 8035c76:	b08c      	sub	sp, #48	; 0x30
 8035c78:	af00      	add	r7, sp, #0
 8035c7a:	60f8      	str	r0, [r7, #12]
 8035c7c:	60b9      	str	r1, [r7, #8]
 8035c7e:	607a      	str	r2, [r7, #4]
 8035c80:	603b      	str	r3, [r7, #0]
#if (osCMSIS < 0x20000U)
  const osThreadDef_t os_thread_def = { (char *)name, (os_pthread)thread, (osPriority)prio, 0, stacksize};
 8035c82:	f107 0314 	add.w	r3, r7, #20
 8035c86:	2200      	movs	r2, #0
 8035c88:	601a      	str	r2, [r3, #0]
 8035c8a:	605a      	str	r2, [r3, #4]
 8035c8c:	609a      	str	r2, [r3, #8]
 8035c8e:	60da      	str	r2, [r3, #12]
 8035c90:	611a      	str	r2, [r3, #16]
 8035c92:	615a      	str	r2, [r3, #20]
 8035c94:	619a      	str	r2, [r3, #24]
 8035c96:	68fb      	ldr	r3, [r7, #12]
 8035c98:	617b      	str	r3, [r7, #20]
 8035c9a:	68bb      	ldr	r3, [r7, #8]
 8035c9c:	61bb      	str	r3, [r7, #24]
 8035c9e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8035ca0:	b21b      	sxth	r3, r3
 8035ca2:	83bb      	strh	r3, [r7, #28]
 8035ca4:	683b      	ldr	r3, [r7, #0]
 8035ca6:	627b      	str	r3, [r7, #36]	; 0x24
  return osThreadCreate(&os_thread_def, arg);
 8035ca8:	f107 0314 	add.w	r3, r7, #20
 8035cac:	6879      	ldr	r1, [r7, #4]
 8035cae:	4618      	mov	r0, r3
 8035cb0:	f7ef f8f6 	bl	8024ea0 <osThreadCreate>
 8035cb4:	4603      	mov	r3, r0
                        .stack_size = stacksize,
                        .priority = (osPriority_t)prio,
                      };
  return osThreadNew(thread, arg, &attributes);
#endif
}
 8035cb6:	4618      	mov	r0, r3
 8035cb8:	3730      	adds	r7, #48	; 0x30
 8035cba:	46bd      	mov	sp, r7
 8035cbc:	bd80      	pop	{r7, pc}
	...

08035cc0 <sys_arch_protect>:

  Note: This function is based on FreeRTOS API, because no equivalent CMSIS-RTOS
        API is available
*/
sys_prot_t sys_arch_protect(void)
{
 8035cc0:	b580      	push	{r7, lr}
 8035cc2:	af00      	add	r7, sp, #0
#if (osCMSIS < 0x20000U)
  osMutexWait(lwip_sys_mutex, osWaitForever);
 8035cc4:	4b04      	ldr	r3, [pc, #16]	; (8035cd8 <sys_arch_protect+0x18>)
 8035cc6:	681b      	ldr	r3, [r3, #0]
 8035cc8:	f04f 31ff 	mov.w	r1, #4294967295
 8035ccc:	4618      	mov	r0, r3
 8035cce:	f7ef f95f 	bl	8024f90 <osMutexWait>
#else
  osMutexAcquire(lwip_sys_mutex, osWaitForever);
#endif
  return (sys_prot_t)1;
 8035cd2:	2301      	movs	r3, #1
}
 8035cd4:	4618      	mov	r0, r3
 8035cd6:	bd80      	pop	{r7, pc}
 8035cd8:	2000ef68 	.word	0x2000ef68

08035cdc <sys_arch_unprotect>:

  Note: This function is based on FreeRTOS API, because no equivalent CMSIS-RTOS
        API is available
*/
void sys_arch_unprotect(sys_prot_t pval)
{
 8035cdc:	b580      	push	{r7, lr}
 8035cde:	b082      	sub	sp, #8
 8035ce0:	af00      	add	r7, sp, #0
 8035ce2:	6078      	str	r0, [r7, #4]
  ( void ) pval;
  osMutexRelease(lwip_sys_mutex);
 8035ce4:	4b04      	ldr	r3, [pc, #16]	; (8035cf8 <sys_arch_unprotect+0x1c>)
 8035ce6:	681b      	ldr	r3, [r3, #0]
 8035ce8:	4618      	mov	r0, r3
 8035cea:	f7ef f99f 	bl	802502c <osMutexRelease>
}
 8035cee:	bf00      	nop
 8035cf0:	3708      	adds	r7, #8
 8035cf2:	46bd      	mov	sp, r7
 8035cf4:	bd80      	pop	{r7, pc}
 8035cf6:	bf00      	nop
 8035cf8:	2000ef68 	.word	0x2000ef68

08035cfc <std>:
 8035cfc:	2300      	movs	r3, #0
 8035cfe:	b510      	push	{r4, lr}
 8035d00:	4604      	mov	r4, r0
 8035d02:	e9c0 3300 	strd	r3, r3, [r0]
 8035d06:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8035d0a:	6083      	str	r3, [r0, #8]
 8035d0c:	8181      	strh	r1, [r0, #12]
 8035d0e:	6643      	str	r3, [r0, #100]	; 0x64
 8035d10:	81c2      	strh	r2, [r0, #14]
 8035d12:	6183      	str	r3, [r0, #24]
 8035d14:	4619      	mov	r1, r3
 8035d16:	2208      	movs	r2, #8
 8035d18:	305c      	adds	r0, #92	; 0x5c
 8035d1a:	f000 f955 	bl	8035fc8 <memset>
 8035d1e:	4b05      	ldr	r3, [pc, #20]	; (8035d34 <std+0x38>)
 8035d20:	6263      	str	r3, [r4, #36]	; 0x24
 8035d22:	4b05      	ldr	r3, [pc, #20]	; (8035d38 <std+0x3c>)
 8035d24:	62a3      	str	r3, [r4, #40]	; 0x28
 8035d26:	4b05      	ldr	r3, [pc, #20]	; (8035d3c <std+0x40>)
 8035d28:	62e3      	str	r3, [r4, #44]	; 0x2c
 8035d2a:	4b05      	ldr	r3, [pc, #20]	; (8035d40 <std+0x44>)
 8035d2c:	6224      	str	r4, [r4, #32]
 8035d2e:	6323      	str	r3, [r4, #48]	; 0x30
 8035d30:	bd10      	pop	{r4, pc}
 8035d32:	bf00      	nop
 8035d34:	080363a1 	.word	0x080363a1
 8035d38:	080363c3 	.word	0x080363c3
 8035d3c:	080363fb 	.word	0x080363fb
 8035d40:	0803641f 	.word	0x0803641f

08035d44 <_cleanup_r>:
 8035d44:	4901      	ldr	r1, [pc, #4]	; (8035d4c <_cleanup_r+0x8>)
 8035d46:	f000 b8af 	b.w	8035ea8 <_fwalk_reent>
 8035d4a:	bf00      	nop
 8035d4c:	080365e9 	.word	0x080365e9

08035d50 <__sfmoreglue>:
 8035d50:	b570      	push	{r4, r5, r6, lr}
 8035d52:	2268      	movs	r2, #104	; 0x68
 8035d54:	1e4d      	subs	r5, r1, #1
 8035d56:	4355      	muls	r5, r2
 8035d58:	460e      	mov	r6, r1
 8035d5a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8035d5e:	f000 f9a7 	bl	80360b0 <_malloc_r>
 8035d62:	4604      	mov	r4, r0
 8035d64:	b140      	cbz	r0, 8035d78 <__sfmoreglue+0x28>
 8035d66:	2100      	movs	r1, #0
 8035d68:	e9c0 1600 	strd	r1, r6, [r0]
 8035d6c:	300c      	adds	r0, #12
 8035d6e:	60a0      	str	r0, [r4, #8]
 8035d70:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8035d74:	f000 f928 	bl	8035fc8 <memset>
 8035d78:	4620      	mov	r0, r4
 8035d7a:	bd70      	pop	{r4, r5, r6, pc}

08035d7c <__sfp_lock_acquire>:
 8035d7c:	4801      	ldr	r0, [pc, #4]	; (8035d84 <__sfp_lock_acquire+0x8>)
 8035d7e:	f000 b8d8 	b.w	8035f32 <__retarget_lock_acquire_recursive>
 8035d82:	bf00      	nop
 8035d84:	2000ef6d 	.word	0x2000ef6d

08035d88 <__sfp_lock_release>:
 8035d88:	4801      	ldr	r0, [pc, #4]	; (8035d90 <__sfp_lock_release+0x8>)
 8035d8a:	f000 b8d3 	b.w	8035f34 <__retarget_lock_release_recursive>
 8035d8e:	bf00      	nop
 8035d90:	2000ef6d 	.word	0x2000ef6d

08035d94 <__sinit_lock_acquire>:
 8035d94:	4801      	ldr	r0, [pc, #4]	; (8035d9c <__sinit_lock_acquire+0x8>)
 8035d96:	f000 b8cc 	b.w	8035f32 <__retarget_lock_acquire_recursive>
 8035d9a:	bf00      	nop
 8035d9c:	2000ef6e 	.word	0x2000ef6e

08035da0 <__sinit_lock_release>:
 8035da0:	4801      	ldr	r0, [pc, #4]	; (8035da8 <__sinit_lock_release+0x8>)
 8035da2:	f000 b8c7 	b.w	8035f34 <__retarget_lock_release_recursive>
 8035da6:	bf00      	nop
 8035da8:	2000ef6e 	.word	0x2000ef6e

08035dac <__sinit>:
 8035dac:	b510      	push	{r4, lr}
 8035dae:	4604      	mov	r4, r0
 8035db0:	f7ff fff0 	bl	8035d94 <__sinit_lock_acquire>
 8035db4:	69a3      	ldr	r3, [r4, #24]
 8035db6:	b11b      	cbz	r3, 8035dc0 <__sinit+0x14>
 8035db8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8035dbc:	f7ff bff0 	b.w	8035da0 <__sinit_lock_release>
 8035dc0:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8035dc4:	6523      	str	r3, [r4, #80]	; 0x50
 8035dc6:	4b13      	ldr	r3, [pc, #76]	; (8035e14 <__sinit+0x68>)
 8035dc8:	4a13      	ldr	r2, [pc, #76]	; (8035e18 <__sinit+0x6c>)
 8035dca:	681b      	ldr	r3, [r3, #0]
 8035dcc:	62a2      	str	r2, [r4, #40]	; 0x28
 8035dce:	42a3      	cmp	r3, r4
 8035dd0:	bf04      	itt	eq
 8035dd2:	2301      	moveq	r3, #1
 8035dd4:	61a3      	streq	r3, [r4, #24]
 8035dd6:	4620      	mov	r0, r4
 8035dd8:	f000 f820 	bl	8035e1c <__sfp>
 8035ddc:	6060      	str	r0, [r4, #4]
 8035dde:	4620      	mov	r0, r4
 8035de0:	f000 f81c 	bl	8035e1c <__sfp>
 8035de4:	60a0      	str	r0, [r4, #8]
 8035de6:	4620      	mov	r0, r4
 8035de8:	f000 f818 	bl	8035e1c <__sfp>
 8035dec:	2200      	movs	r2, #0
 8035dee:	60e0      	str	r0, [r4, #12]
 8035df0:	2104      	movs	r1, #4
 8035df2:	6860      	ldr	r0, [r4, #4]
 8035df4:	f7ff ff82 	bl	8035cfc <std>
 8035df8:	68a0      	ldr	r0, [r4, #8]
 8035dfa:	2201      	movs	r2, #1
 8035dfc:	2109      	movs	r1, #9
 8035dfe:	f7ff ff7d 	bl	8035cfc <std>
 8035e02:	68e0      	ldr	r0, [r4, #12]
 8035e04:	2202      	movs	r2, #2
 8035e06:	2112      	movs	r1, #18
 8035e08:	f7ff ff78 	bl	8035cfc <std>
 8035e0c:	2301      	movs	r3, #1
 8035e0e:	61a3      	str	r3, [r4, #24]
 8035e10:	e7d2      	b.n	8035db8 <__sinit+0xc>
 8035e12:	bf00      	nop
 8035e14:	0803ac40 	.word	0x0803ac40
 8035e18:	08035d45 	.word	0x08035d45

08035e1c <__sfp>:
 8035e1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8035e1e:	4607      	mov	r7, r0
 8035e20:	f7ff ffac 	bl	8035d7c <__sfp_lock_acquire>
 8035e24:	4b1e      	ldr	r3, [pc, #120]	; (8035ea0 <__sfp+0x84>)
 8035e26:	681e      	ldr	r6, [r3, #0]
 8035e28:	69b3      	ldr	r3, [r6, #24]
 8035e2a:	b913      	cbnz	r3, 8035e32 <__sfp+0x16>
 8035e2c:	4630      	mov	r0, r6
 8035e2e:	f7ff ffbd 	bl	8035dac <__sinit>
 8035e32:	3648      	adds	r6, #72	; 0x48
 8035e34:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8035e38:	3b01      	subs	r3, #1
 8035e3a:	d503      	bpl.n	8035e44 <__sfp+0x28>
 8035e3c:	6833      	ldr	r3, [r6, #0]
 8035e3e:	b30b      	cbz	r3, 8035e84 <__sfp+0x68>
 8035e40:	6836      	ldr	r6, [r6, #0]
 8035e42:	e7f7      	b.n	8035e34 <__sfp+0x18>
 8035e44:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8035e48:	b9d5      	cbnz	r5, 8035e80 <__sfp+0x64>
 8035e4a:	4b16      	ldr	r3, [pc, #88]	; (8035ea4 <__sfp+0x88>)
 8035e4c:	60e3      	str	r3, [r4, #12]
 8035e4e:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8035e52:	6665      	str	r5, [r4, #100]	; 0x64
 8035e54:	f000 f86c 	bl	8035f30 <__retarget_lock_init_recursive>
 8035e58:	f7ff ff96 	bl	8035d88 <__sfp_lock_release>
 8035e5c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8035e60:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8035e64:	6025      	str	r5, [r4, #0]
 8035e66:	61a5      	str	r5, [r4, #24]
 8035e68:	2208      	movs	r2, #8
 8035e6a:	4629      	mov	r1, r5
 8035e6c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8035e70:	f000 f8aa 	bl	8035fc8 <memset>
 8035e74:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8035e78:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8035e7c:	4620      	mov	r0, r4
 8035e7e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8035e80:	3468      	adds	r4, #104	; 0x68
 8035e82:	e7d9      	b.n	8035e38 <__sfp+0x1c>
 8035e84:	2104      	movs	r1, #4
 8035e86:	4638      	mov	r0, r7
 8035e88:	f7ff ff62 	bl	8035d50 <__sfmoreglue>
 8035e8c:	4604      	mov	r4, r0
 8035e8e:	6030      	str	r0, [r6, #0]
 8035e90:	2800      	cmp	r0, #0
 8035e92:	d1d5      	bne.n	8035e40 <__sfp+0x24>
 8035e94:	f7ff ff78 	bl	8035d88 <__sfp_lock_release>
 8035e98:	230c      	movs	r3, #12
 8035e9a:	603b      	str	r3, [r7, #0]
 8035e9c:	e7ee      	b.n	8035e7c <__sfp+0x60>
 8035e9e:	bf00      	nop
 8035ea0:	0803ac40 	.word	0x0803ac40
 8035ea4:	ffff0001 	.word	0xffff0001

08035ea8 <_fwalk_reent>:
 8035ea8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8035eac:	4606      	mov	r6, r0
 8035eae:	4688      	mov	r8, r1
 8035eb0:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8035eb4:	2700      	movs	r7, #0
 8035eb6:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8035eba:	f1b9 0901 	subs.w	r9, r9, #1
 8035ebe:	d505      	bpl.n	8035ecc <_fwalk_reent+0x24>
 8035ec0:	6824      	ldr	r4, [r4, #0]
 8035ec2:	2c00      	cmp	r4, #0
 8035ec4:	d1f7      	bne.n	8035eb6 <_fwalk_reent+0xe>
 8035ec6:	4638      	mov	r0, r7
 8035ec8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8035ecc:	89ab      	ldrh	r3, [r5, #12]
 8035ece:	2b01      	cmp	r3, #1
 8035ed0:	d907      	bls.n	8035ee2 <_fwalk_reent+0x3a>
 8035ed2:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8035ed6:	3301      	adds	r3, #1
 8035ed8:	d003      	beq.n	8035ee2 <_fwalk_reent+0x3a>
 8035eda:	4629      	mov	r1, r5
 8035edc:	4630      	mov	r0, r6
 8035ede:	47c0      	blx	r8
 8035ee0:	4307      	orrs	r7, r0
 8035ee2:	3568      	adds	r5, #104	; 0x68
 8035ee4:	e7e9      	b.n	8035eba <_fwalk_reent+0x12>
	...

08035ee8 <__libc_init_array>:
 8035ee8:	b570      	push	{r4, r5, r6, lr}
 8035eea:	4d0d      	ldr	r5, [pc, #52]	; (8035f20 <__libc_init_array+0x38>)
 8035eec:	4c0d      	ldr	r4, [pc, #52]	; (8035f24 <__libc_init_array+0x3c>)
 8035eee:	1b64      	subs	r4, r4, r5
 8035ef0:	10a4      	asrs	r4, r4, #2
 8035ef2:	2600      	movs	r6, #0
 8035ef4:	42a6      	cmp	r6, r4
 8035ef6:	d109      	bne.n	8035f0c <__libc_init_array+0x24>
 8035ef8:	4d0b      	ldr	r5, [pc, #44]	; (8035f28 <__libc_init_array+0x40>)
 8035efa:	4c0c      	ldr	r4, [pc, #48]	; (8035f2c <__libc_init_array+0x44>)
 8035efc:	f001 fa06 	bl	803730c <_init>
 8035f00:	1b64      	subs	r4, r4, r5
 8035f02:	10a4      	asrs	r4, r4, #2
 8035f04:	2600      	movs	r6, #0
 8035f06:	42a6      	cmp	r6, r4
 8035f08:	d105      	bne.n	8035f16 <__libc_init_array+0x2e>
 8035f0a:	bd70      	pop	{r4, r5, r6, pc}
 8035f0c:	f855 3b04 	ldr.w	r3, [r5], #4
 8035f10:	4798      	blx	r3
 8035f12:	3601      	adds	r6, #1
 8035f14:	e7ee      	b.n	8035ef4 <__libc_init_array+0xc>
 8035f16:	f855 3b04 	ldr.w	r3, [r5], #4
 8035f1a:	4798      	blx	r3
 8035f1c:	3601      	adds	r6, #1
 8035f1e:	e7f2      	b.n	8035f06 <__libc_init_array+0x1e>
 8035f20:	0803ad30 	.word	0x0803ad30
 8035f24:	0803ad30 	.word	0x0803ad30
 8035f28:	0803ad30 	.word	0x0803ad30
 8035f2c:	0803ad34 	.word	0x0803ad34

08035f30 <__retarget_lock_init_recursive>:
 8035f30:	4770      	bx	lr

08035f32 <__retarget_lock_acquire_recursive>:
 8035f32:	4770      	bx	lr

08035f34 <__retarget_lock_release_recursive>:
 8035f34:	4770      	bx	lr
	...

08035f38 <malloc>:
 8035f38:	4b02      	ldr	r3, [pc, #8]	; (8035f44 <malloc+0xc>)
 8035f3a:	4601      	mov	r1, r0
 8035f3c:	6818      	ldr	r0, [r3, #0]
 8035f3e:	f000 b8b7 	b.w	80360b0 <_malloc_r>
 8035f42:	bf00      	nop
 8035f44:	20000034 	.word	0x20000034

08035f48 <free>:
 8035f48:	4b02      	ldr	r3, [pc, #8]	; (8035f54 <free+0xc>)
 8035f4a:	4601      	mov	r1, r0
 8035f4c:	6818      	ldr	r0, [r3, #0]
 8035f4e:	f000 b843 	b.w	8035fd8 <_free_r>
 8035f52:	bf00      	nop
 8035f54:	20000034 	.word	0x20000034

08035f58 <memcmp>:
 8035f58:	b510      	push	{r4, lr}
 8035f5a:	3901      	subs	r1, #1
 8035f5c:	4402      	add	r2, r0
 8035f5e:	4290      	cmp	r0, r2
 8035f60:	d101      	bne.n	8035f66 <memcmp+0xe>
 8035f62:	2000      	movs	r0, #0
 8035f64:	e005      	b.n	8035f72 <memcmp+0x1a>
 8035f66:	7803      	ldrb	r3, [r0, #0]
 8035f68:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8035f6c:	42a3      	cmp	r3, r4
 8035f6e:	d001      	beq.n	8035f74 <memcmp+0x1c>
 8035f70:	1b18      	subs	r0, r3, r4
 8035f72:	bd10      	pop	{r4, pc}
 8035f74:	3001      	adds	r0, #1
 8035f76:	e7f2      	b.n	8035f5e <memcmp+0x6>

08035f78 <memcpy>:
 8035f78:	440a      	add	r2, r1
 8035f7a:	4291      	cmp	r1, r2
 8035f7c:	f100 33ff 	add.w	r3, r0, #4294967295
 8035f80:	d100      	bne.n	8035f84 <memcpy+0xc>
 8035f82:	4770      	bx	lr
 8035f84:	b510      	push	{r4, lr}
 8035f86:	f811 4b01 	ldrb.w	r4, [r1], #1
 8035f8a:	f803 4f01 	strb.w	r4, [r3, #1]!
 8035f8e:	4291      	cmp	r1, r2
 8035f90:	d1f9      	bne.n	8035f86 <memcpy+0xe>
 8035f92:	bd10      	pop	{r4, pc}

08035f94 <memmove>:
 8035f94:	4288      	cmp	r0, r1
 8035f96:	b510      	push	{r4, lr}
 8035f98:	eb01 0402 	add.w	r4, r1, r2
 8035f9c:	d902      	bls.n	8035fa4 <memmove+0x10>
 8035f9e:	4284      	cmp	r4, r0
 8035fa0:	4623      	mov	r3, r4
 8035fa2:	d807      	bhi.n	8035fb4 <memmove+0x20>
 8035fa4:	1e43      	subs	r3, r0, #1
 8035fa6:	42a1      	cmp	r1, r4
 8035fa8:	d008      	beq.n	8035fbc <memmove+0x28>
 8035faa:	f811 2b01 	ldrb.w	r2, [r1], #1
 8035fae:	f803 2f01 	strb.w	r2, [r3, #1]!
 8035fb2:	e7f8      	b.n	8035fa6 <memmove+0x12>
 8035fb4:	4402      	add	r2, r0
 8035fb6:	4601      	mov	r1, r0
 8035fb8:	428a      	cmp	r2, r1
 8035fba:	d100      	bne.n	8035fbe <memmove+0x2a>
 8035fbc:	bd10      	pop	{r4, pc}
 8035fbe:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8035fc2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8035fc6:	e7f7      	b.n	8035fb8 <memmove+0x24>

08035fc8 <memset>:
 8035fc8:	4402      	add	r2, r0
 8035fca:	4603      	mov	r3, r0
 8035fcc:	4293      	cmp	r3, r2
 8035fce:	d100      	bne.n	8035fd2 <memset+0xa>
 8035fd0:	4770      	bx	lr
 8035fd2:	f803 1b01 	strb.w	r1, [r3], #1
 8035fd6:	e7f9      	b.n	8035fcc <memset+0x4>

08035fd8 <_free_r>:
 8035fd8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8035fda:	2900      	cmp	r1, #0
 8035fdc:	d044      	beq.n	8036068 <_free_r+0x90>
 8035fde:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8035fe2:	9001      	str	r0, [sp, #4]
 8035fe4:	2b00      	cmp	r3, #0
 8035fe6:	f1a1 0404 	sub.w	r4, r1, #4
 8035fea:	bfb8      	it	lt
 8035fec:	18e4      	addlt	r4, r4, r3
 8035fee:	f000 fb5b 	bl	80366a8 <__malloc_lock>
 8035ff2:	4a1e      	ldr	r2, [pc, #120]	; (803606c <_free_r+0x94>)
 8035ff4:	9801      	ldr	r0, [sp, #4]
 8035ff6:	6813      	ldr	r3, [r2, #0]
 8035ff8:	b933      	cbnz	r3, 8036008 <_free_r+0x30>
 8035ffa:	6063      	str	r3, [r4, #4]
 8035ffc:	6014      	str	r4, [r2, #0]
 8035ffe:	b003      	add	sp, #12
 8036000:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8036004:	f000 bb56 	b.w	80366b4 <__malloc_unlock>
 8036008:	42a3      	cmp	r3, r4
 803600a:	d908      	bls.n	803601e <_free_r+0x46>
 803600c:	6825      	ldr	r5, [r4, #0]
 803600e:	1961      	adds	r1, r4, r5
 8036010:	428b      	cmp	r3, r1
 8036012:	bf01      	itttt	eq
 8036014:	6819      	ldreq	r1, [r3, #0]
 8036016:	685b      	ldreq	r3, [r3, #4]
 8036018:	1949      	addeq	r1, r1, r5
 803601a:	6021      	streq	r1, [r4, #0]
 803601c:	e7ed      	b.n	8035ffa <_free_r+0x22>
 803601e:	461a      	mov	r2, r3
 8036020:	685b      	ldr	r3, [r3, #4]
 8036022:	b10b      	cbz	r3, 8036028 <_free_r+0x50>
 8036024:	42a3      	cmp	r3, r4
 8036026:	d9fa      	bls.n	803601e <_free_r+0x46>
 8036028:	6811      	ldr	r1, [r2, #0]
 803602a:	1855      	adds	r5, r2, r1
 803602c:	42a5      	cmp	r5, r4
 803602e:	d10b      	bne.n	8036048 <_free_r+0x70>
 8036030:	6824      	ldr	r4, [r4, #0]
 8036032:	4421      	add	r1, r4
 8036034:	1854      	adds	r4, r2, r1
 8036036:	42a3      	cmp	r3, r4
 8036038:	6011      	str	r1, [r2, #0]
 803603a:	d1e0      	bne.n	8035ffe <_free_r+0x26>
 803603c:	681c      	ldr	r4, [r3, #0]
 803603e:	685b      	ldr	r3, [r3, #4]
 8036040:	6053      	str	r3, [r2, #4]
 8036042:	4421      	add	r1, r4
 8036044:	6011      	str	r1, [r2, #0]
 8036046:	e7da      	b.n	8035ffe <_free_r+0x26>
 8036048:	d902      	bls.n	8036050 <_free_r+0x78>
 803604a:	230c      	movs	r3, #12
 803604c:	6003      	str	r3, [r0, #0]
 803604e:	e7d6      	b.n	8035ffe <_free_r+0x26>
 8036050:	6825      	ldr	r5, [r4, #0]
 8036052:	1961      	adds	r1, r4, r5
 8036054:	428b      	cmp	r3, r1
 8036056:	bf04      	itt	eq
 8036058:	6819      	ldreq	r1, [r3, #0]
 803605a:	685b      	ldreq	r3, [r3, #4]
 803605c:	6063      	str	r3, [r4, #4]
 803605e:	bf04      	itt	eq
 8036060:	1949      	addeq	r1, r1, r5
 8036062:	6021      	streq	r1, [r4, #0]
 8036064:	6054      	str	r4, [r2, #4]
 8036066:	e7ca      	b.n	8035ffe <_free_r+0x26>
 8036068:	b003      	add	sp, #12
 803606a:	bd30      	pop	{r4, r5, pc}
 803606c:	2000ef70 	.word	0x2000ef70

08036070 <sbrk_aligned>:
 8036070:	b570      	push	{r4, r5, r6, lr}
 8036072:	4e0e      	ldr	r6, [pc, #56]	; (80360ac <sbrk_aligned+0x3c>)
 8036074:	460c      	mov	r4, r1
 8036076:	6831      	ldr	r1, [r6, #0]
 8036078:	4605      	mov	r5, r0
 803607a:	b911      	cbnz	r1, 8036082 <sbrk_aligned+0x12>
 803607c:	f000 f94c 	bl	8036318 <_sbrk_r>
 8036080:	6030      	str	r0, [r6, #0]
 8036082:	4621      	mov	r1, r4
 8036084:	4628      	mov	r0, r5
 8036086:	f000 f947 	bl	8036318 <_sbrk_r>
 803608a:	1c43      	adds	r3, r0, #1
 803608c:	d00a      	beq.n	80360a4 <sbrk_aligned+0x34>
 803608e:	1cc4      	adds	r4, r0, #3
 8036090:	f024 0403 	bic.w	r4, r4, #3
 8036094:	42a0      	cmp	r0, r4
 8036096:	d007      	beq.n	80360a8 <sbrk_aligned+0x38>
 8036098:	1a21      	subs	r1, r4, r0
 803609a:	4628      	mov	r0, r5
 803609c:	f000 f93c 	bl	8036318 <_sbrk_r>
 80360a0:	3001      	adds	r0, #1
 80360a2:	d101      	bne.n	80360a8 <sbrk_aligned+0x38>
 80360a4:	f04f 34ff 	mov.w	r4, #4294967295
 80360a8:	4620      	mov	r0, r4
 80360aa:	bd70      	pop	{r4, r5, r6, pc}
 80360ac:	2000ef74 	.word	0x2000ef74

080360b0 <_malloc_r>:
 80360b0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80360b4:	1ccd      	adds	r5, r1, #3
 80360b6:	f025 0503 	bic.w	r5, r5, #3
 80360ba:	3508      	adds	r5, #8
 80360bc:	2d0c      	cmp	r5, #12
 80360be:	bf38      	it	cc
 80360c0:	250c      	movcc	r5, #12
 80360c2:	2d00      	cmp	r5, #0
 80360c4:	4607      	mov	r7, r0
 80360c6:	db01      	blt.n	80360cc <_malloc_r+0x1c>
 80360c8:	42a9      	cmp	r1, r5
 80360ca:	d905      	bls.n	80360d8 <_malloc_r+0x28>
 80360cc:	230c      	movs	r3, #12
 80360ce:	603b      	str	r3, [r7, #0]
 80360d0:	2600      	movs	r6, #0
 80360d2:	4630      	mov	r0, r6
 80360d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80360d8:	4e2e      	ldr	r6, [pc, #184]	; (8036194 <_malloc_r+0xe4>)
 80360da:	f000 fae5 	bl	80366a8 <__malloc_lock>
 80360de:	6833      	ldr	r3, [r6, #0]
 80360e0:	461c      	mov	r4, r3
 80360e2:	bb34      	cbnz	r4, 8036132 <_malloc_r+0x82>
 80360e4:	4629      	mov	r1, r5
 80360e6:	4638      	mov	r0, r7
 80360e8:	f7ff ffc2 	bl	8036070 <sbrk_aligned>
 80360ec:	1c43      	adds	r3, r0, #1
 80360ee:	4604      	mov	r4, r0
 80360f0:	d14d      	bne.n	803618e <_malloc_r+0xde>
 80360f2:	6834      	ldr	r4, [r6, #0]
 80360f4:	4626      	mov	r6, r4
 80360f6:	2e00      	cmp	r6, #0
 80360f8:	d140      	bne.n	803617c <_malloc_r+0xcc>
 80360fa:	6823      	ldr	r3, [r4, #0]
 80360fc:	4631      	mov	r1, r6
 80360fe:	4638      	mov	r0, r7
 8036100:	eb04 0803 	add.w	r8, r4, r3
 8036104:	f000 f908 	bl	8036318 <_sbrk_r>
 8036108:	4580      	cmp	r8, r0
 803610a:	d13a      	bne.n	8036182 <_malloc_r+0xd2>
 803610c:	6821      	ldr	r1, [r4, #0]
 803610e:	3503      	adds	r5, #3
 8036110:	1a6d      	subs	r5, r5, r1
 8036112:	f025 0503 	bic.w	r5, r5, #3
 8036116:	3508      	adds	r5, #8
 8036118:	2d0c      	cmp	r5, #12
 803611a:	bf38      	it	cc
 803611c:	250c      	movcc	r5, #12
 803611e:	4629      	mov	r1, r5
 8036120:	4638      	mov	r0, r7
 8036122:	f7ff ffa5 	bl	8036070 <sbrk_aligned>
 8036126:	3001      	adds	r0, #1
 8036128:	d02b      	beq.n	8036182 <_malloc_r+0xd2>
 803612a:	6823      	ldr	r3, [r4, #0]
 803612c:	442b      	add	r3, r5
 803612e:	6023      	str	r3, [r4, #0]
 8036130:	e00e      	b.n	8036150 <_malloc_r+0xa0>
 8036132:	6822      	ldr	r2, [r4, #0]
 8036134:	1b52      	subs	r2, r2, r5
 8036136:	d41e      	bmi.n	8036176 <_malloc_r+0xc6>
 8036138:	2a0b      	cmp	r2, #11
 803613a:	d916      	bls.n	803616a <_malloc_r+0xba>
 803613c:	1961      	adds	r1, r4, r5
 803613e:	42a3      	cmp	r3, r4
 8036140:	6025      	str	r5, [r4, #0]
 8036142:	bf18      	it	ne
 8036144:	6059      	strne	r1, [r3, #4]
 8036146:	6863      	ldr	r3, [r4, #4]
 8036148:	bf08      	it	eq
 803614a:	6031      	streq	r1, [r6, #0]
 803614c:	5162      	str	r2, [r4, r5]
 803614e:	604b      	str	r3, [r1, #4]
 8036150:	4638      	mov	r0, r7
 8036152:	f104 060b 	add.w	r6, r4, #11
 8036156:	f000 faad 	bl	80366b4 <__malloc_unlock>
 803615a:	f026 0607 	bic.w	r6, r6, #7
 803615e:	1d23      	adds	r3, r4, #4
 8036160:	1af2      	subs	r2, r6, r3
 8036162:	d0b6      	beq.n	80360d2 <_malloc_r+0x22>
 8036164:	1b9b      	subs	r3, r3, r6
 8036166:	50a3      	str	r3, [r4, r2]
 8036168:	e7b3      	b.n	80360d2 <_malloc_r+0x22>
 803616a:	6862      	ldr	r2, [r4, #4]
 803616c:	42a3      	cmp	r3, r4
 803616e:	bf0c      	ite	eq
 8036170:	6032      	streq	r2, [r6, #0]
 8036172:	605a      	strne	r2, [r3, #4]
 8036174:	e7ec      	b.n	8036150 <_malloc_r+0xa0>
 8036176:	4623      	mov	r3, r4
 8036178:	6864      	ldr	r4, [r4, #4]
 803617a:	e7b2      	b.n	80360e2 <_malloc_r+0x32>
 803617c:	4634      	mov	r4, r6
 803617e:	6876      	ldr	r6, [r6, #4]
 8036180:	e7b9      	b.n	80360f6 <_malloc_r+0x46>
 8036182:	230c      	movs	r3, #12
 8036184:	603b      	str	r3, [r7, #0]
 8036186:	4638      	mov	r0, r7
 8036188:	f000 fa94 	bl	80366b4 <__malloc_unlock>
 803618c:	e7a1      	b.n	80360d2 <_malloc_r+0x22>
 803618e:	6025      	str	r5, [r4, #0]
 8036190:	e7de      	b.n	8036150 <_malloc_r+0xa0>
 8036192:	bf00      	nop
 8036194:	2000ef70 	.word	0x2000ef70

08036198 <iprintf>:
 8036198:	b40f      	push	{r0, r1, r2, r3}
 803619a:	4b0a      	ldr	r3, [pc, #40]	; (80361c4 <iprintf+0x2c>)
 803619c:	b513      	push	{r0, r1, r4, lr}
 803619e:	681c      	ldr	r4, [r3, #0]
 80361a0:	b124      	cbz	r4, 80361ac <iprintf+0x14>
 80361a2:	69a3      	ldr	r3, [r4, #24]
 80361a4:	b913      	cbnz	r3, 80361ac <iprintf+0x14>
 80361a6:	4620      	mov	r0, r4
 80361a8:	f7ff fe00 	bl	8035dac <__sinit>
 80361ac:	ab05      	add	r3, sp, #20
 80361ae:	9a04      	ldr	r2, [sp, #16]
 80361b0:	68a1      	ldr	r1, [r4, #8]
 80361b2:	9301      	str	r3, [sp, #4]
 80361b4:	4620      	mov	r0, r4
 80361b6:	f000 fc09 	bl	80369cc <_vfiprintf_r>
 80361ba:	b002      	add	sp, #8
 80361bc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80361c0:	b004      	add	sp, #16
 80361c2:	4770      	bx	lr
 80361c4:	20000034 	.word	0x20000034

080361c8 <rand>:
 80361c8:	4b16      	ldr	r3, [pc, #88]	; (8036224 <rand+0x5c>)
 80361ca:	b510      	push	{r4, lr}
 80361cc:	681c      	ldr	r4, [r3, #0]
 80361ce:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80361d0:	b9b3      	cbnz	r3, 8036200 <rand+0x38>
 80361d2:	2018      	movs	r0, #24
 80361d4:	f7ff feb0 	bl	8035f38 <malloc>
 80361d8:	63a0      	str	r0, [r4, #56]	; 0x38
 80361da:	b928      	cbnz	r0, 80361e8 <rand+0x20>
 80361dc:	4602      	mov	r2, r0
 80361de:	4b12      	ldr	r3, [pc, #72]	; (8036228 <rand+0x60>)
 80361e0:	4812      	ldr	r0, [pc, #72]	; (803622c <rand+0x64>)
 80361e2:	214e      	movs	r1, #78	; 0x4e
 80361e4:	f000 f94c 	bl	8036480 <__assert_func>
 80361e8:	4a11      	ldr	r2, [pc, #68]	; (8036230 <rand+0x68>)
 80361ea:	4b12      	ldr	r3, [pc, #72]	; (8036234 <rand+0x6c>)
 80361ec:	e9c0 2300 	strd	r2, r3, [r0]
 80361f0:	4b11      	ldr	r3, [pc, #68]	; (8036238 <rand+0x70>)
 80361f2:	6083      	str	r3, [r0, #8]
 80361f4:	230b      	movs	r3, #11
 80361f6:	8183      	strh	r3, [r0, #12]
 80361f8:	2201      	movs	r2, #1
 80361fa:	2300      	movs	r3, #0
 80361fc:	e9c0 2304 	strd	r2, r3, [r0, #16]
 8036200:	6ba4      	ldr	r4, [r4, #56]	; 0x38
 8036202:	4a0e      	ldr	r2, [pc, #56]	; (803623c <rand+0x74>)
 8036204:	6920      	ldr	r0, [r4, #16]
 8036206:	6963      	ldr	r3, [r4, #20]
 8036208:	490d      	ldr	r1, [pc, #52]	; (8036240 <rand+0x78>)
 803620a:	4342      	muls	r2, r0
 803620c:	fb01 2203 	mla	r2, r1, r3, r2
 8036210:	fba0 0101 	umull	r0, r1, r0, r1
 8036214:	1c43      	adds	r3, r0, #1
 8036216:	eb42 0001 	adc.w	r0, r2, r1
 803621a:	e9c4 3004 	strd	r3, r0, [r4, #16]
 803621e:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 8036222:	bd10      	pop	{r4, pc}
 8036224:	20000034 	.word	0x20000034
 8036228:	0803ac44 	.word	0x0803ac44
 803622c:	0803ac5b 	.word	0x0803ac5b
 8036230:	abcd330e 	.word	0xabcd330e
 8036234:	e66d1234 	.word	0xe66d1234
 8036238:	0005deec 	.word	0x0005deec
 803623c:	5851f42d 	.word	0x5851f42d
 8036240:	4c957f2d 	.word	0x4c957f2d

08036244 <cleanup_glue>:
 8036244:	b538      	push	{r3, r4, r5, lr}
 8036246:	460c      	mov	r4, r1
 8036248:	6809      	ldr	r1, [r1, #0]
 803624a:	4605      	mov	r5, r0
 803624c:	b109      	cbz	r1, 8036252 <cleanup_glue+0xe>
 803624e:	f7ff fff9 	bl	8036244 <cleanup_glue>
 8036252:	4621      	mov	r1, r4
 8036254:	4628      	mov	r0, r5
 8036256:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 803625a:	f7ff bebd 	b.w	8035fd8 <_free_r>
	...

08036260 <_reclaim_reent>:
 8036260:	4b2c      	ldr	r3, [pc, #176]	; (8036314 <_reclaim_reent+0xb4>)
 8036262:	681b      	ldr	r3, [r3, #0]
 8036264:	4283      	cmp	r3, r0
 8036266:	b570      	push	{r4, r5, r6, lr}
 8036268:	4604      	mov	r4, r0
 803626a:	d051      	beq.n	8036310 <_reclaim_reent+0xb0>
 803626c:	6a43      	ldr	r3, [r0, #36]	; 0x24
 803626e:	b143      	cbz	r3, 8036282 <_reclaim_reent+0x22>
 8036270:	68db      	ldr	r3, [r3, #12]
 8036272:	2b00      	cmp	r3, #0
 8036274:	d14a      	bne.n	803630c <_reclaim_reent+0xac>
 8036276:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8036278:	6819      	ldr	r1, [r3, #0]
 803627a:	b111      	cbz	r1, 8036282 <_reclaim_reent+0x22>
 803627c:	4620      	mov	r0, r4
 803627e:	f7ff feab 	bl	8035fd8 <_free_r>
 8036282:	6961      	ldr	r1, [r4, #20]
 8036284:	b111      	cbz	r1, 803628c <_reclaim_reent+0x2c>
 8036286:	4620      	mov	r0, r4
 8036288:	f7ff fea6 	bl	8035fd8 <_free_r>
 803628c:	6a61      	ldr	r1, [r4, #36]	; 0x24
 803628e:	b111      	cbz	r1, 8036296 <_reclaim_reent+0x36>
 8036290:	4620      	mov	r0, r4
 8036292:	f7ff fea1 	bl	8035fd8 <_free_r>
 8036296:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8036298:	b111      	cbz	r1, 80362a0 <_reclaim_reent+0x40>
 803629a:	4620      	mov	r0, r4
 803629c:	f7ff fe9c 	bl	8035fd8 <_free_r>
 80362a0:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 80362a2:	b111      	cbz	r1, 80362aa <_reclaim_reent+0x4a>
 80362a4:	4620      	mov	r0, r4
 80362a6:	f7ff fe97 	bl	8035fd8 <_free_r>
 80362aa:	6c21      	ldr	r1, [r4, #64]	; 0x40
 80362ac:	b111      	cbz	r1, 80362b4 <_reclaim_reent+0x54>
 80362ae:	4620      	mov	r0, r4
 80362b0:	f7ff fe92 	bl	8035fd8 <_free_r>
 80362b4:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 80362b6:	b111      	cbz	r1, 80362be <_reclaim_reent+0x5e>
 80362b8:	4620      	mov	r0, r4
 80362ba:	f7ff fe8d 	bl	8035fd8 <_free_r>
 80362be:	6da1      	ldr	r1, [r4, #88]	; 0x58
 80362c0:	b111      	cbz	r1, 80362c8 <_reclaim_reent+0x68>
 80362c2:	4620      	mov	r0, r4
 80362c4:	f7ff fe88 	bl	8035fd8 <_free_r>
 80362c8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80362ca:	b111      	cbz	r1, 80362d2 <_reclaim_reent+0x72>
 80362cc:	4620      	mov	r0, r4
 80362ce:	f7ff fe83 	bl	8035fd8 <_free_r>
 80362d2:	69a3      	ldr	r3, [r4, #24]
 80362d4:	b1e3      	cbz	r3, 8036310 <_reclaim_reent+0xb0>
 80362d6:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80362d8:	4620      	mov	r0, r4
 80362da:	4798      	blx	r3
 80362dc:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 80362de:	b1b9      	cbz	r1, 8036310 <_reclaim_reent+0xb0>
 80362e0:	4620      	mov	r0, r4
 80362e2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80362e6:	f7ff bfad 	b.w	8036244 <cleanup_glue>
 80362ea:	5949      	ldr	r1, [r1, r5]
 80362ec:	b941      	cbnz	r1, 8036300 <_reclaim_reent+0xa0>
 80362ee:	3504      	adds	r5, #4
 80362f0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80362f2:	2d80      	cmp	r5, #128	; 0x80
 80362f4:	68d9      	ldr	r1, [r3, #12]
 80362f6:	d1f8      	bne.n	80362ea <_reclaim_reent+0x8a>
 80362f8:	4620      	mov	r0, r4
 80362fa:	f7ff fe6d 	bl	8035fd8 <_free_r>
 80362fe:	e7ba      	b.n	8036276 <_reclaim_reent+0x16>
 8036300:	680e      	ldr	r6, [r1, #0]
 8036302:	4620      	mov	r0, r4
 8036304:	f7ff fe68 	bl	8035fd8 <_free_r>
 8036308:	4631      	mov	r1, r6
 803630a:	e7ef      	b.n	80362ec <_reclaim_reent+0x8c>
 803630c:	2500      	movs	r5, #0
 803630e:	e7ef      	b.n	80362f0 <_reclaim_reent+0x90>
 8036310:	bd70      	pop	{r4, r5, r6, pc}
 8036312:	bf00      	nop
 8036314:	20000034 	.word	0x20000034

08036318 <_sbrk_r>:
 8036318:	b538      	push	{r3, r4, r5, lr}
 803631a:	4d06      	ldr	r5, [pc, #24]	; (8036334 <_sbrk_r+0x1c>)
 803631c:	2300      	movs	r3, #0
 803631e:	4604      	mov	r4, r0
 8036320:	4608      	mov	r0, r1
 8036322:	602b      	str	r3, [r5, #0]
 8036324:	f7ea fc80 	bl	8020c28 <_sbrk>
 8036328:	1c43      	adds	r3, r0, #1
 803632a:	d102      	bne.n	8036332 <_sbrk_r+0x1a>
 803632c:	682b      	ldr	r3, [r5, #0]
 803632e:	b103      	cbz	r3, 8036332 <_sbrk_r+0x1a>
 8036330:	6023      	str	r3, [r4, #0]
 8036332:	bd38      	pop	{r3, r4, r5, pc}
 8036334:	2000ef78 	.word	0x2000ef78

08036338 <sniprintf>:
 8036338:	b40c      	push	{r2, r3}
 803633a:	b530      	push	{r4, r5, lr}
 803633c:	4b17      	ldr	r3, [pc, #92]	; (803639c <sniprintf+0x64>)
 803633e:	1e0c      	subs	r4, r1, #0
 8036340:	681d      	ldr	r5, [r3, #0]
 8036342:	b09d      	sub	sp, #116	; 0x74
 8036344:	da08      	bge.n	8036358 <sniprintf+0x20>
 8036346:	238b      	movs	r3, #139	; 0x8b
 8036348:	602b      	str	r3, [r5, #0]
 803634a:	f04f 30ff 	mov.w	r0, #4294967295
 803634e:	b01d      	add	sp, #116	; 0x74
 8036350:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8036354:	b002      	add	sp, #8
 8036356:	4770      	bx	lr
 8036358:	f44f 7302 	mov.w	r3, #520	; 0x208
 803635c:	f8ad 3014 	strh.w	r3, [sp, #20]
 8036360:	bf14      	ite	ne
 8036362:	f104 33ff 	addne.w	r3, r4, #4294967295
 8036366:	4623      	moveq	r3, r4
 8036368:	9304      	str	r3, [sp, #16]
 803636a:	9307      	str	r3, [sp, #28]
 803636c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8036370:	9002      	str	r0, [sp, #8]
 8036372:	9006      	str	r0, [sp, #24]
 8036374:	f8ad 3016 	strh.w	r3, [sp, #22]
 8036378:	9a20      	ldr	r2, [sp, #128]	; 0x80
 803637a:	ab21      	add	r3, sp, #132	; 0x84
 803637c:	a902      	add	r1, sp, #8
 803637e:	4628      	mov	r0, r5
 8036380:	9301      	str	r3, [sp, #4]
 8036382:	f000 f9f9 	bl	8036778 <_svfiprintf_r>
 8036386:	1c43      	adds	r3, r0, #1
 8036388:	bfbc      	itt	lt
 803638a:	238b      	movlt	r3, #139	; 0x8b
 803638c:	602b      	strlt	r3, [r5, #0]
 803638e:	2c00      	cmp	r4, #0
 8036390:	d0dd      	beq.n	803634e <sniprintf+0x16>
 8036392:	9b02      	ldr	r3, [sp, #8]
 8036394:	2200      	movs	r2, #0
 8036396:	701a      	strb	r2, [r3, #0]
 8036398:	e7d9      	b.n	803634e <sniprintf+0x16>
 803639a:	bf00      	nop
 803639c:	20000034 	.word	0x20000034

080363a0 <__sread>:
 80363a0:	b510      	push	{r4, lr}
 80363a2:	460c      	mov	r4, r1
 80363a4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80363a8:	f000 fdd4 	bl	8036f54 <_read_r>
 80363ac:	2800      	cmp	r0, #0
 80363ae:	bfab      	itete	ge
 80363b0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80363b2:	89a3      	ldrhlt	r3, [r4, #12]
 80363b4:	181b      	addge	r3, r3, r0
 80363b6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80363ba:	bfac      	ite	ge
 80363bc:	6563      	strge	r3, [r4, #84]	; 0x54
 80363be:	81a3      	strhlt	r3, [r4, #12]
 80363c0:	bd10      	pop	{r4, pc}

080363c2 <__swrite>:
 80363c2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80363c6:	461f      	mov	r7, r3
 80363c8:	898b      	ldrh	r3, [r1, #12]
 80363ca:	05db      	lsls	r3, r3, #23
 80363cc:	4605      	mov	r5, r0
 80363ce:	460c      	mov	r4, r1
 80363d0:	4616      	mov	r6, r2
 80363d2:	d505      	bpl.n	80363e0 <__swrite+0x1e>
 80363d4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80363d8:	2302      	movs	r3, #2
 80363da:	2200      	movs	r2, #0
 80363dc:	f000 f952 	bl	8036684 <_lseek_r>
 80363e0:	89a3      	ldrh	r3, [r4, #12]
 80363e2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80363e6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80363ea:	81a3      	strh	r3, [r4, #12]
 80363ec:	4632      	mov	r2, r6
 80363ee:	463b      	mov	r3, r7
 80363f0:	4628      	mov	r0, r5
 80363f2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80363f6:	f000 b831 	b.w	803645c <_write_r>

080363fa <__sseek>:
 80363fa:	b510      	push	{r4, lr}
 80363fc:	460c      	mov	r4, r1
 80363fe:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8036402:	f000 f93f 	bl	8036684 <_lseek_r>
 8036406:	1c43      	adds	r3, r0, #1
 8036408:	89a3      	ldrh	r3, [r4, #12]
 803640a:	bf15      	itete	ne
 803640c:	6560      	strne	r0, [r4, #84]	; 0x54
 803640e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8036412:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8036416:	81a3      	strheq	r3, [r4, #12]
 8036418:	bf18      	it	ne
 803641a:	81a3      	strhne	r3, [r4, #12]
 803641c:	bd10      	pop	{r4, pc}

0803641e <__sclose>:
 803641e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8036422:	f000 b84b 	b.w	80364bc <_close_r>

08036426 <strcpy>:
 8036426:	4603      	mov	r3, r0
 8036428:	f811 2b01 	ldrb.w	r2, [r1], #1
 803642c:	f803 2b01 	strb.w	r2, [r3], #1
 8036430:	2a00      	cmp	r2, #0
 8036432:	d1f9      	bne.n	8036428 <strcpy+0x2>
 8036434:	4770      	bx	lr

08036436 <strncpy>:
 8036436:	b510      	push	{r4, lr}
 8036438:	3901      	subs	r1, #1
 803643a:	4603      	mov	r3, r0
 803643c:	b132      	cbz	r2, 803644c <strncpy+0x16>
 803643e:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8036442:	f803 4b01 	strb.w	r4, [r3], #1
 8036446:	3a01      	subs	r2, #1
 8036448:	2c00      	cmp	r4, #0
 803644a:	d1f7      	bne.n	803643c <strncpy+0x6>
 803644c:	441a      	add	r2, r3
 803644e:	2100      	movs	r1, #0
 8036450:	4293      	cmp	r3, r2
 8036452:	d100      	bne.n	8036456 <strncpy+0x20>
 8036454:	bd10      	pop	{r4, pc}
 8036456:	f803 1b01 	strb.w	r1, [r3], #1
 803645a:	e7f9      	b.n	8036450 <strncpy+0x1a>

0803645c <_write_r>:
 803645c:	b538      	push	{r3, r4, r5, lr}
 803645e:	4d07      	ldr	r5, [pc, #28]	; (803647c <_write_r+0x20>)
 8036460:	4604      	mov	r4, r0
 8036462:	4608      	mov	r0, r1
 8036464:	4611      	mov	r1, r2
 8036466:	2200      	movs	r2, #0
 8036468:	602a      	str	r2, [r5, #0]
 803646a:	461a      	mov	r2, r3
 803646c:	f7ea fb8b 	bl	8020b86 <_write>
 8036470:	1c43      	adds	r3, r0, #1
 8036472:	d102      	bne.n	803647a <_write_r+0x1e>
 8036474:	682b      	ldr	r3, [r5, #0]
 8036476:	b103      	cbz	r3, 803647a <_write_r+0x1e>
 8036478:	6023      	str	r3, [r4, #0]
 803647a:	bd38      	pop	{r3, r4, r5, pc}
 803647c:	2000ef78 	.word	0x2000ef78

08036480 <__assert_func>:
 8036480:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8036482:	4614      	mov	r4, r2
 8036484:	461a      	mov	r2, r3
 8036486:	4b09      	ldr	r3, [pc, #36]	; (80364ac <__assert_func+0x2c>)
 8036488:	681b      	ldr	r3, [r3, #0]
 803648a:	4605      	mov	r5, r0
 803648c:	68d8      	ldr	r0, [r3, #12]
 803648e:	b14c      	cbz	r4, 80364a4 <__assert_func+0x24>
 8036490:	4b07      	ldr	r3, [pc, #28]	; (80364b0 <__assert_func+0x30>)
 8036492:	9100      	str	r1, [sp, #0]
 8036494:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8036498:	4906      	ldr	r1, [pc, #24]	; (80364b4 <__assert_func+0x34>)
 803649a:	462b      	mov	r3, r5
 803649c:	f000 f8e0 	bl	8036660 <fiprintf>
 80364a0:	f000 fe2a 	bl	80370f8 <abort>
 80364a4:	4b04      	ldr	r3, [pc, #16]	; (80364b8 <__assert_func+0x38>)
 80364a6:	461c      	mov	r4, r3
 80364a8:	e7f3      	b.n	8036492 <__assert_func+0x12>
 80364aa:	bf00      	nop
 80364ac:	20000034 	.word	0x20000034
 80364b0:	0803acb6 	.word	0x0803acb6
 80364b4:	0803acc3 	.word	0x0803acc3
 80364b8:	0803acf1 	.word	0x0803acf1

080364bc <_close_r>:
 80364bc:	b538      	push	{r3, r4, r5, lr}
 80364be:	4d06      	ldr	r5, [pc, #24]	; (80364d8 <_close_r+0x1c>)
 80364c0:	2300      	movs	r3, #0
 80364c2:	4604      	mov	r4, r0
 80364c4:	4608      	mov	r0, r1
 80364c6:	602b      	str	r3, [r5, #0]
 80364c8:	f7ea fb79 	bl	8020bbe <_close>
 80364cc:	1c43      	adds	r3, r0, #1
 80364ce:	d102      	bne.n	80364d6 <_close_r+0x1a>
 80364d0:	682b      	ldr	r3, [r5, #0]
 80364d2:	b103      	cbz	r3, 80364d6 <_close_r+0x1a>
 80364d4:	6023      	str	r3, [r4, #0]
 80364d6:	bd38      	pop	{r3, r4, r5, pc}
 80364d8:	2000ef78 	.word	0x2000ef78

080364dc <__sflush_r>:
 80364dc:	898a      	ldrh	r2, [r1, #12]
 80364de:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80364e2:	4605      	mov	r5, r0
 80364e4:	0710      	lsls	r0, r2, #28
 80364e6:	460c      	mov	r4, r1
 80364e8:	d458      	bmi.n	803659c <__sflush_r+0xc0>
 80364ea:	684b      	ldr	r3, [r1, #4]
 80364ec:	2b00      	cmp	r3, #0
 80364ee:	dc05      	bgt.n	80364fc <__sflush_r+0x20>
 80364f0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80364f2:	2b00      	cmp	r3, #0
 80364f4:	dc02      	bgt.n	80364fc <__sflush_r+0x20>
 80364f6:	2000      	movs	r0, #0
 80364f8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80364fc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80364fe:	2e00      	cmp	r6, #0
 8036500:	d0f9      	beq.n	80364f6 <__sflush_r+0x1a>
 8036502:	2300      	movs	r3, #0
 8036504:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8036508:	682f      	ldr	r7, [r5, #0]
 803650a:	602b      	str	r3, [r5, #0]
 803650c:	d032      	beq.n	8036574 <__sflush_r+0x98>
 803650e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8036510:	89a3      	ldrh	r3, [r4, #12]
 8036512:	075a      	lsls	r2, r3, #29
 8036514:	d505      	bpl.n	8036522 <__sflush_r+0x46>
 8036516:	6863      	ldr	r3, [r4, #4]
 8036518:	1ac0      	subs	r0, r0, r3
 803651a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 803651c:	b10b      	cbz	r3, 8036522 <__sflush_r+0x46>
 803651e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8036520:	1ac0      	subs	r0, r0, r3
 8036522:	2300      	movs	r3, #0
 8036524:	4602      	mov	r2, r0
 8036526:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8036528:	6a21      	ldr	r1, [r4, #32]
 803652a:	4628      	mov	r0, r5
 803652c:	47b0      	blx	r6
 803652e:	1c43      	adds	r3, r0, #1
 8036530:	89a3      	ldrh	r3, [r4, #12]
 8036532:	d106      	bne.n	8036542 <__sflush_r+0x66>
 8036534:	6829      	ldr	r1, [r5, #0]
 8036536:	291d      	cmp	r1, #29
 8036538:	d82c      	bhi.n	8036594 <__sflush_r+0xb8>
 803653a:	4a2a      	ldr	r2, [pc, #168]	; (80365e4 <__sflush_r+0x108>)
 803653c:	40ca      	lsrs	r2, r1
 803653e:	07d6      	lsls	r6, r2, #31
 8036540:	d528      	bpl.n	8036594 <__sflush_r+0xb8>
 8036542:	2200      	movs	r2, #0
 8036544:	6062      	str	r2, [r4, #4]
 8036546:	04d9      	lsls	r1, r3, #19
 8036548:	6922      	ldr	r2, [r4, #16]
 803654a:	6022      	str	r2, [r4, #0]
 803654c:	d504      	bpl.n	8036558 <__sflush_r+0x7c>
 803654e:	1c42      	adds	r2, r0, #1
 8036550:	d101      	bne.n	8036556 <__sflush_r+0x7a>
 8036552:	682b      	ldr	r3, [r5, #0]
 8036554:	b903      	cbnz	r3, 8036558 <__sflush_r+0x7c>
 8036556:	6560      	str	r0, [r4, #84]	; 0x54
 8036558:	6b61      	ldr	r1, [r4, #52]	; 0x34
 803655a:	602f      	str	r7, [r5, #0]
 803655c:	2900      	cmp	r1, #0
 803655e:	d0ca      	beq.n	80364f6 <__sflush_r+0x1a>
 8036560:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8036564:	4299      	cmp	r1, r3
 8036566:	d002      	beq.n	803656e <__sflush_r+0x92>
 8036568:	4628      	mov	r0, r5
 803656a:	f7ff fd35 	bl	8035fd8 <_free_r>
 803656e:	2000      	movs	r0, #0
 8036570:	6360      	str	r0, [r4, #52]	; 0x34
 8036572:	e7c1      	b.n	80364f8 <__sflush_r+0x1c>
 8036574:	6a21      	ldr	r1, [r4, #32]
 8036576:	2301      	movs	r3, #1
 8036578:	4628      	mov	r0, r5
 803657a:	47b0      	blx	r6
 803657c:	1c41      	adds	r1, r0, #1
 803657e:	d1c7      	bne.n	8036510 <__sflush_r+0x34>
 8036580:	682b      	ldr	r3, [r5, #0]
 8036582:	2b00      	cmp	r3, #0
 8036584:	d0c4      	beq.n	8036510 <__sflush_r+0x34>
 8036586:	2b1d      	cmp	r3, #29
 8036588:	d001      	beq.n	803658e <__sflush_r+0xb2>
 803658a:	2b16      	cmp	r3, #22
 803658c:	d101      	bne.n	8036592 <__sflush_r+0xb6>
 803658e:	602f      	str	r7, [r5, #0]
 8036590:	e7b1      	b.n	80364f6 <__sflush_r+0x1a>
 8036592:	89a3      	ldrh	r3, [r4, #12]
 8036594:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8036598:	81a3      	strh	r3, [r4, #12]
 803659a:	e7ad      	b.n	80364f8 <__sflush_r+0x1c>
 803659c:	690f      	ldr	r7, [r1, #16]
 803659e:	2f00      	cmp	r7, #0
 80365a0:	d0a9      	beq.n	80364f6 <__sflush_r+0x1a>
 80365a2:	0793      	lsls	r3, r2, #30
 80365a4:	680e      	ldr	r6, [r1, #0]
 80365a6:	bf08      	it	eq
 80365a8:	694b      	ldreq	r3, [r1, #20]
 80365aa:	600f      	str	r7, [r1, #0]
 80365ac:	bf18      	it	ne
 80365ae:	2300      	movne	r3, #0
 80365b0:	eba6 0807 	sub.w	r8, r6, r7
 80365b4:	608b      	str	r3, [r1, #8]
 80365b6:	f1b8 0f00 	cmp.w	r8, #0
 80365ba:	dd9c      	ble.n	80364f6 <__sflush_r+0x1a>
 80365bc:	6a21      	ldr	r1, [r4, #32]
 80365be:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80365c0:	4643      	mov	r3, r8
 80365c2:	463a      	mov	r2, r7
 80365c4:	4628      	mov	r0, r5
 80365c6:	47b0      	blx	r6
 80365c8:	2800      	cmp	r0, #0
 80365ca:	dc06      	bgt.n	80365da <__sflush_r+0xfe>
 80365cc:	89a3      	ldrh	r3, [r4, #12]
 80365ce:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80365d2:	81a3      	strh	r3, [r4, #12]
 80365d4:	f04f 30ff 	mov.w	r0, #4294967295
 80365d8:	e78e      	b.n	80364f8 <__sflush_r+0x1c>
 80365da:	4407      	add	r7, r0
 80365dc:	eba8 0800 	sub.w	r8, r8, r0
 80365e0:	e7e9      	b.n	80365b6 <__sflush_r+0xda>
 80365e2:	bf00      	nop
 80365e4:	20400001 	.word	0x20400001

080365e8 <_fflush_r>:
 80365e8:	b538      	push	{r3, r4, r5, lr}
 80365ea:	690b      	ldr	r3, [r1, #16]
 80365ec:	4605      	mov	r5, r0
 80365ee:	460c      	mov	r4, r1
 80365f0:	b913      	cbnz	r3, 80365f8 <_fflush_r+0x10>
 80365f2:	2500      	movs	r5, #0
 80365f4:	4628      	mov	r0, r5
 80365f6:	bd38      	pop	{r3, r4, r5, pc}
 80365f8:	b118      	cbz	r0, 8036602 <_fflush_r+0x1a>
 80365fa:	6983      	ldr	r3, [r0, #24]
 80365fc:	b90b      	cbnz	r3, 8036602 <_fflush_r+0x1a>
 80365fe:	f7ff fbd5 	bl	8035dac <__sinit>
 8036602:	4b14      	ldr	r3, [pc, #80]	; (8036654 <_fflush_r+0x6c>)
 8036604:	429c      	cmp	r4, r3
 8036606:	d11b      	bne.n	8036640 <_fflush_r+0x58>
 8036608:	686c      	ldr	r4, [r5, #4]
 803660a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 803660e:	2b00      	cmp	r3, #0
 8036610:	d0ef      	beq.n	80365f2 <_fflush_r+0xa>
 8036612:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8036614:	07d0      	lsls	r0, r2, #31
 8036616:	d404      	bmi.n	8036622 <_fflush_r+0x3a>
 8036618:	0599      	lsls	r1, r3, #22
 803661a:	d402      	bmi.n	8036622 <_fflush_r+0x3a>
 803661c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 803661e:	f7ff fc88 	bl	8035f32 <__retarget_lock_acquire_recursive>
 8036622:	4628      	mov	r0, r5
 8036624:	4621      	mov	r1, r4
 8036626:	f7ff ff59 	bl	80364dc <__sflush_r>
 803662a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 803662c:	07da      	lsls	r2, r3, #31
 803662e:	4605      	mov	r5, r0
 8036630:	d4e0      	bmi.n	80365f4 <_fflush_r+0xc>
 8036632:	89a3      	ldrh	r3, [r4, #12]
 8036634:	059b      	lsls	r3, r3, #22
 8036636:	d4dd      	bmi.n	80365f4 <_fflush_r+0xc>
 8036638:	6da0      	ldr	r0, [r4, #88]	; 0x58
 803663a:	f7ff fc7b 	bl	8035f34 <__retarget_lock_release_recursive>
 803663e:	e7d9      	b.n	80365f4 <_fflush_r+0xc>
 8036640:	4b05      	ldr	r3, [pc, #20]	; (8036658 <_fflush_r+0x70>)
 8036642:	429c      	cmp	r4, r3
 8036644:	d101      	bne.n	803664a <_fflush_r+0x62>
 8036646:	68ac      	ldr	r4, [r5, #8]
 8036648:	e7df      	b.n	803660a <_fflush_r+0x22>
 803664a:	4b04      	ldr	r3, [pc, #16]	; (803665c <_fflush_r+0x74>)
 803664c:	429c      	cmp	r4, r3
 803664e:	bf08      	it	eq
 8036650:	68ec      	ldreq	r4, [r5, #12]
 8036652:	e7da      	b.n	803660a <_fflush_r+0x22>
 8036654:	0803ac00 	.word	0x0803ac00
 8036658:	0803ac20 	.word	0x0803ac20
 803665c:	0803abe0 	.word	0x0803abe0

08036660 <fiprintf>:
 8036660:	b40e      	push	{r1, r2, r3}
 8036662:	b503      	push	{r0, r1, lr}
 8036664:	4601      	mov	r1, r0
 8036666:	ab03      	add	r3, sp, #12
 8036668:	4805      	ldr	r0, [pc, #20]	; (8036680 <fiprintf+0x20>)
 803666a:	f853 2b04 	ldr.w	r2, [r3], #4
 803666e:	6800      	ldr	r0, [r0, #0]
 8036670:	9301      	str	r3, [sp, #4]
 8036672:	f000 f9ab 	bl	80369cc <_vfiprintf_r>
 8036676:	b002      	add	sp, #8
 8036678:	f85d eb04 	ldr.w	lr, [sp], #4
 803667c:	b003      	add	sp, #12
 803667e:	4770      	bx	lr
 8036680:	20000034 	.word	0x20000034

08036684 <_lseek_r>:
 8036684:	b538      	push	{r3, r4, r5, lr}
 8036686:	4d07      	ldr	r5, [pc, #28]	; (80366a4 <_lseek_r+0x20>)
 8036688:	4604      	mov	r4, r0
 803668a:	4608      	mov	r0, r1
 803668c:	4611      	mov	r1, r2
 803668e:	2200      	movs	r2, #0
 8036690:	602a      	str	r2, [r5, #0]
 8036692:	461a      	mov	r2, r3
 8036694:	f7ea faba 	bl	8020c0c <_lseek>
 8036698:	1c43      	adds	r3, r0, #1
 803669a:	d102      	bne.n	80366a2 <_lseek_r+0x1e>
 803669c:	682b      	ldr	r3, [r5, #0]
 803669e:	b103      	cbz	r3, 80366a2 <_lseek_r+0x1e>
 80366a0:	6023      	str	r3, [r4, #0]
 80366a2:	bd38      	pop	{r3, r4, r5, pc}
 80366a4:	2000ef78 	.word	0x2000ef78

080366a8 <__malloc_lock>:
 80366a8:	4801      	ldr	r0, [pc, #4]	; (80366b0 <__malloc_lock+0x8>)
 80366aa:	f7ff bc42 	b.w	8035f32 <__retarget_lock_acquire_recursive>
 80366ae:	bf00      	nop
 80366b0:	2000ef6c 	.word	0x2000ef6c

080366b4 <__malloc_unlock>:
 80366b4:	4801      	ldr	r0, [pc, #4]	; (80366bc <__malloc_unlock+0x8>)
 80366b6:	f7ff bc3d 	b.w	8035f34 <__retarget_lock_release_recursive>
 80366ba:	bf00      	nop
 80366bc:	2000ef6c 	.word	0x2000ef6c

080366c0 <__ssputs_r>:
 80366c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80366c4:	688e      	ldr	r6, [r1, #8]
 80366c6:	429e      	cmp	r6, r3
 80366c8:	4682      	mov	sl, r0
 80366ca:	460c      	mov	r4, r1
 80366cc:	4690      	mov	r8, r2
 80366ce:	461f      	mov	r7, r3
 80366d0:	d838      	bhi.n	8036744 <__ssputs_r+0x84>
 80366d2:	898a      	ldrh	r2, [r1, #12]
 80366d4:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80366d8:	d032      	beq.n	8036740 <__ssputs_r+0x80>
 80366da:	6825      	ldr	r5, [r4, #0]
 80366dc:	6909      	ldr	r1, [r1, #16]
 80366de:	eba5 0901 	sub.w	r9, r5, r1
 80366e2:	6965      	ldr	r5, [r4, #20]
 80366e4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80366e8:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80366ec:	3301      	adds	r3, #1
 80366ee:	444b      	add	r3, r9
 80366f0:	106d      	asrs	r5, r5, #1
 80366f2:	429d      	cmp	r5, r3
 80366f4:	bf38      	it	cc
 80366f6:	461d      	movcc	r5, r3
 80366f8:	0553      	lsls	r3, r2, #21
 80366fa:	d531      	bpl.n	8036760 <__ssputs_r+0xa0>
 80366fc:	4629      	mov	r1, r5
 80366fe:	f7ff fcd7 	bl	80360b0 <_malloc_r>
 8036702:	4606      	mov	r6, r0
 8036704:	b950      	cbnz	r0, 803671c <__ssputs_r+0x5c>
 8036706:	230c      	movs	r3, #12
 8036708:	f8ca 3000 	str.w	r3, [sl]
 803670c:	89a3      	ldrh	r3, [r4, #12]
 803670e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8036712:	81a3      	strh	r3, [r4, #12]
 8036714:	f04f 30ff 	mov.w	r0, #4294967295
 8036718:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 803671c:	6921      	ldr	r1, [r4, #16]
 803671e:	464a      	mov	r2, r9
 8036720:	f7ff fc2a 	bl	8035f78 <memcpy>
 8036724:	89a3      	ldrh	r3, [r4, #12]
 8036726:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 803672a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 803672e:	81a3      	strh	r3, [r4, #12]
 8036730:	6126      	str	r6, [r4, #16]
 8036732:	6165      	str	r5, [r4, #20]
 8036734:	444e      	add	r6, r9
 8036736:	eba5 0509 	sub.w	r5, r5, r9
 803673a:	6026      	str	r6, [r4, #0]
 803673c:	60a5      	str	r5, [r4, #8]
 803673e:	463e      	mov	r6, r7
 8036740:	42be      	cmp	r6, r7
 8036742:	d900      	bls.n	8036746 <__ssputs_r+0x86>
 8036744:	463e      	mov	r6, r7
 8036746:	6820      	ldr	r0, [r4, #0]
 8036748:	4632      	mov	r2, r6
 803674a:	4641      	mov	r1, r8
 803674c:	f7ff fc22 	bl	8035f94 <memmove>
 8036750:	68a3      	ldr	r3, [r4, #8]
 8036752:	1b9b      	subs	r3, r3, r6
 8036754:	60a3      	str	r3, [r4, #8]
 8036756:	6823      	ldr	r3, [r4, #0]
 8036758:	4433      	add	r3, r6
 803675a:	6023      	str	r3, [r4, #0]
 803675c:	2000      	movs	r0, #0
 803675e:	e7db      	b.n	8036718 <__ssputs_r+0x58>
 8036760:	462a      	mov	r2, r5
 8036762:	f000 fd35 	bl	80371d0 <_realloc_r>
 8036766:	4606      	mov	r6, r0
 8036768:	2800      	cmp	r0, #0
 803676a:	d1e1      	bne.n	8036730 <__ssputs_r+0x70>
 803676c:	6921      	ldr	r1, [r4, #16]
 803676e:	4650      	mov	r0, sl
 8036770:	f7ff fc32 	bl	8035fd8 <_free_r>
 8036774:	e7c7      	b.n	8036706 <__ssputs_r+0x46>
	...

08036778 <_svfiprintf_r>:
 8036778:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 803677c:	4698      	mov	r8, r3
 803677e:	898b      	ldrh	r3, [r1, #12]
 8036780:	061b      	lsls	r3, r3, #24
 8036782:	b09d      	sub	sp, #116	; 0x74
 8036784:	4607      	mov	r7, r0
 8036786:	460d      	mov	r5, r1
 8036788:	4614      	mov	r4, r2
 803678a:	d50e      	bpl.n	80367aa <_svfiprintf_r+0x32>
 803678c:	690b      	ldr	r3, [r1, #16]
 803678e:	b963      	cbnz	r3, 80367aa <_svfiprintf_r+0x32>
 8036790:	2140      	movs	r1, #64	; 0x40
 8036792:	f7ff fc8d 	bl	80360b0 <_malloc_r>
 8036796:	6028      	str	r0, [r5, #0]
 8036798:	6128      	str	r0, [r5, #16]
 803679a:	b920      	cbnz	r0, 80367a6 <_svfiprintf_r+0x2e>
 803679c:	230c      	movs	r3, #12
 803679e:	603b      	str	r3, [r7, #0]
 80367a0:	f04f 30ff 	mov.w	r0, #4294967295
 80367a4:	e0d1      	b.n	803694a <_svfiprintf_r+0x1d2>
 80367a6:	2340      	movs	r3, #64	; 0x40
 80367a8:	616b      	str	r3, [r5, #20]
 80367aa:	2300      	movs	r3, #0
 80367ac:	9309      	str	r3, [sp, #36]	; 0x24
 80367ae:	2320      	movs	r3, #32
 80367b0:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80367b4:	f8cd 800c 	str.w	r8, [sp, #12]
 80367b8:	2330      	movs	r3, #48	; 0x30
 80367ba:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8036964 <_svfiprintf_r+0x1ec>
 80367be:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80367c2:	f04f 0901 	mov.w	r9, #1
 80367c6:	4623      	mov	r3, r4
 80367c8:	469a      	mov	sl, r3
 80367ca:	f813 2b01 	ldrb.w	r2, [r3], #1
 80367ce:	b10a      	cbz	r2, 80367d4 <_svfiprintf_r+0x5c>
 80367d0:	2a25      	cmp	r2, #37	; 0x25
 80367d2:	d1f9      	bne.n	80367c8 <_svfiprintf_r+0x50>
 80367d4:	ebba 0b04 	subs.w	fp, sl, r4
 80367d8:	d00b      	beq.n	80367f2 <_svfiprintf_r+0x7a>
 80367da:	465b      	mov	r3, fp
 80367dc:	4622      	mov	r2, r4
 80367de:	4629      	mov	r1, r5
 80367e0:	4638      	mov	r0, r7
 80367e2:	f7ff ff6d 	bl	80366c0 <__ssputs_r>
 80367e6:	3001      	adds	r0, #1
 80367e8:	f000 80aa 	beq.w	8036940 <_svfiprintf_r+0x1c8>
 80367ec:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80367ee:	445a      	add	r2, fp
 80367f0:	9209      	str	r2, [sp, #36]	; 0x24
 80367f2:	f89a 3000 	ldrb.w	r3, [sl]
 80367f6:	2b00      	cmp	r3, #0
 80367f8:	f000 80a2 	beq.w	8036940 <_svfiprintf_r+0x1c8>
 80367fc:	2300      	movs	r3, #0
 80367fe:	f04f 32ff 	mov.w	r2, #4294967295
 8036802:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8036806:	f10a 0a01 	add.w	sl, sl, #1
 803680a:	9304      	str	r3, [sp, #16]
 803680c:	9307      	str	r3, [sp, #28]
 803680e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8036812:	931a      	str	r3, [sp, #104]	; 0x68
 8036814:	4654      	mov	r4, sl
 8036816:	2205      	movs	r2, #5
 8036818:	f814 1b01 	ldrb.w	r1, [r4], #1
 803681c:	4851      	ldr	r0, [pc, #324]	; (8036964 <_svfiprintf_r+0x1ec>)
 803681e:	f7e9 fcdf 	bl	80201e0 <memchr>
 8036822:	9a04      	ldr	r2, [sp, #16]
 8036824:	b9d8      	cbnz	r0, 803685e <_svfiprintf_r+0xe6>
 8036826:	06d0      	lsls	r0, r2, #27
 8036828:	bf44      	itt	mi
 803682a:	2320      	movmi	r3, #32
 803682c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8036830:	0711      	lsls	r1, r2, #28
 8036832:	bf44      	itt	mi
 8036834:	232b      	movmi	r3, #43	; 0x2b
 8036836:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 803683a:	f89a 3000 	ldrb.w	r3, [sl]
 803683e:	2b2a      	cmp	r3, #42	; 0x2a
 8036840:	d015      	beq.n	803686e <_svfiprintf_r+0xf6>
 8036842:	9a07      	ldr	r2, [sp, #28]
 8036844:	4654      	mov	r4, sl
 8036846:	2000      	movs	r0, #0
 8036848:	f04f 0c0a 	mov.w	ip, #10
 803684c:	4621      	mov	r1, r4
 803684e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8036852:	3b30      	subs	r3, #48	; 0x30
 8036854:	2b09      	cmp	r3, #9
 8036856:	d94e      	bls.n	80368f6 <_svfiprintf_r+0x17e>
 8036858:	b1b0      	cbz	r0, 8036888 <_svfiprintf_r+0x110>
 803685a:	9207      	str	r2, [sp, #28]
 803685c:	e014      	b.n	8036888 <_svfiprintf_r+0x110>
 803685e:	eba0 0308 	sub.w	r3, r0, r8
 8036862:	fa09 f303 	lsl.w	r3, r9, r3
 8036866:	4313      	orrs	r3, r2
 8036868:	9304      	str	r3, [sp, #16]
 803686a:	46a2      	mov	sl, r4
 803686c:	e7d2      	b.n	8036814 <_svfiprintf_r+0x9c>
 803686e:	9b03      	ldr	r3, [sp, #12]
 8036870:	1d19      	adds	r1, r3, #4
 8036872:	681b      	ldr	r3, [r3, #0]
 8036874:	9103      	str	r1, [sp, #12]
 8036876:	2b00      	cmp	r3, #0
 8036878:	bfbb      	ittet	lt
 803687a:	425b      	neglt	r3, r3
 803687c:	f042 0202 	orrlt.w	r2, r2, #2
 8036880:	9307      	strge	r3, [sp, #28]
 8036882:	9307      	strlt	r3, [sp, #28]
 8036884:	bfb8      	it	lt
 8036886:	9204      	strlt	r2, [sp, #16]
 8036888:	7823      	ldrb	r3, [r4, #0]
 803688a:	2b2e      	cmp	r3, #46	; 0x2e
 803688c:	d10c      	bne.n	80368a8 <_svfiprintf_r+0x130>
 803688e:	7863      	ldrb	r3, [r4, #1]
 8036890:	2b2a      	cmp	r3, #42	; 0x2a
 8036892:	d135      	bne.n	8036900 <_svfiprintf_r+0x188>
 8036894:	9b03      	ldr	r3, [sp, #12]
 8036896:	1d1a      	adds	r2, r3, #4
 8036898:	681b      	ldr	r3, [r3, #0]
 803689a:	9203      	str	r2, [sp, #12]
 803689c:	2b00      	cmp	r3, #0
 803689e:	bfb8      	it	lt
 80368a0:	f04f 33ff 	movlt.w	r3, #4294967295
 80368a4:	3402      	adds	r4, #2
 80368a6:	9305      	str	r3, [sp, #20]
 80368a8:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8036974 <_svfiprintf_r+0x1fc>
 80368ac:	7821      	ldrb	r1, [r4, #0]
 80368ae:	2203      	movs	r2, #3
 80368b0:	4650      	mov	r0, sl
 80368b2:	f7e9 fc95 	bl	80201e0 <memchr>
 80368b6:	b140      	cbz	r0, 80368ca <_svfiprintf_r+0x152>
 80368b8:	2340      	movs	r3, #64	; 0x40
 80368ba:	eba0 000a 	sub.w	r0, r0, sl
 80368be:	fa03 f000 	lsl.w	r0, r3, r0
 80368c2:	9b04      	ldr	r3, [sp, #16]
 80368c4:	4303      	orrs	r3, r0
 80368c6:	3401      	adds	r4, #1
 80368c8:	9304      	str	r3, [sp, #16]
 80368ca:	f814 1b01 	ldrb.w	r1, [r4], #1
 80368ce:	4826      	ldr	r0, [pc, #152]	; (8036968 <_svfiprintf_r+0x1f0>)
 80368d0:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80368d4:	2206      	movs	r2, #6
 80368d6:	f7e9 fc83 	bl	80201e0 <memchr>
 80368da:	2800      	cmp	r0, #0
 80368dc:	d038      	beq.n	8036950 <_svfiprintf_r+0x1d8>
 80368de:	4b23      	ldr	r3, [pc, #140]	; (803696c <_svfiprintf_r+0x1f4>)
 80368e0:	bb1b      	cbnz	r3, 803692a <_svfiprintf_r+0x1b2>
 80368e2:	9b03      	ldr	r3, [sp, #12]
 80368e4:	3307      	adds	r3, #7
 80368e6:	f023 0307 	bic.w	r3, r3, #7
 80368ea:	3308      	adds	r3, #8
 80368ec:	9303      	str	r3, [sp, #12]
 80368ee:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80368f0:	4433      	add	r3, r6
 80368f2:	9309      	str	r3, [sp, #36]	; 0x24
 80368f4:	e767      	b.n	80367c6 <_svfiprintf_r+0x4e>
 80368f6:	fb0c 3202 	mla	r2, ip, r2, r3
 80368fa:	460c      	mov	r4, r1
 80368fc:	2001      	movs	r0, #1
 80368fe:	e7a5      	b.n	803684c <_svfiprintf_r+0xd4>
 8036900:	2300      	movs	r3, #0
 8036902:	3401      	adds	r4, #1
 8036904:	9305      	str	r3, [sp, #20]
 8036906:	4619      	mov	r1, r3
 8036908:	f04f 0c0a 	mov.w	ip, #10
 803690c:	4620      	mov	r0, r4
 803690e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8036912:	3a30      	subs	r2, #48	; 0x30
 8036914:	2a09      	cmp	r2, #9
 8036916:	d903      	bls.n	8036920 <_svfiprintf_r+0x1a8>
 8036918:	2b00      	cmp	r3, #0
 803691a:	d0c5      	beq.n	80368a8 <_svfiprintf_r+0x130>
 803691c:	9105      	str	r1, [sp, #20]
 803691e:	e7c3      	b.n	80368a8 <_svfiprintf_r+0x130>
 8036920:	fb0c 2101 	mla	r1, ip, r1, r2
 8036924:	4604      	mov	r4, r0
 8036926:	2301      	movs	r3, #1
 8036928:	e7f0      	b.n	803690c <_svfiprintf_r+0x194>
 803692a:	ab03      	add	r3, sp, #12
 803692c:	9300      	str	r3, [sp, #0]
 803692e:	462a      	mov	r2, r5
 8036930:	4b0f      	ldr	r3, [pc, #60]	; (8036970 <_svfiprintf_r+0x1f8>)
 8036932:	a904      	add	r1, sp, #16
 8036934:	4638      	mov	r0, r7
 8036936:	f3af 8000 	nop.w
 803693a:	1c42      	adds	r2, r0, #1
 803693c:	4606      	mov	r6, r0
 803693e:	d1d6      	bne.n	80368ee <_svfiprintf_r+0x176>
 8036940:	89ab      	ldrh	r3, [r5, #12]
 8036942:	065b      	lsls	r3, r3, #25
 8036944:	f53f af2c 	bmi.w	80367a0 <_svfiprintf_r+0x28>
 8036948:	9809      	ldr	r0, [sp, #36]	; 0x24
 803694a:	b01d      	add	sp, #116	; 0x74
 803694c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8036950:	ab03      	add	r3, sp, #12
 8036952:	9300      	str	r3, [sp, #0]
 8036954:	462a      	mov	r2, r5
 8036956:	4b06      	ldr	r3, [pc, #24]	; (8036970 <_svfiprintf_r+0x1f8>)
 8036958:	a904      	add	r1, sp, #16
 803695a:	4638      	mov	r0, r7
 803695c:	f000 f9d4 	bl	8036d08 <_printf_i>
 8036960:	e7eb      	b.n	803693a <_svfiprintf_r+0x1c2>
 8036962:	bf00      	nop
 8036964:	0803acf2 	.word	0x0803acf2
 8036968:	0803acfc 	.word	0x0803acfc
 803696c:	00000000 	.word	0x00000000
 8036970:	080366c1 	.word	0x080366c1
 8036974:	0803acf8 	.word	0x0803acf8

08036978 <__sfputc_r>:
 8036978:	6893      	ldr	r3, [r2, #8]
 803697a:	3b01      	subs	r3, #1
 803697c:	2b00      	cmp	r3, #0
 803697e:	b410      	push	{r4}
 8036980:	6093      	str	r3, [r2, #8]
 8036982:	da08      	bge.n	8036996 <__sfputc_r+0x1e>
 8036984:	6994      	ldr	r4, [r2, #24]
 8036986:	42a3      	cmp	r3, r4
 8036988:	db01      	blt.n	803698e <__sfputc_r+0x16>
 803698a:	290a      	cmp	r1, #10
 803698c:	d103      	bne.n	8036996 <__sfputc_r+0x1e>
 803698e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8036992:	f000 baf1 	b.w	8036f78 <__swbuf_r>
 8036996:	6813      	ldr	r3, [r2, #0]
 8036998:	1c58      	adds	r0, r3, #1
 803699a:	6010      	str	r0, [r2, #0]
 803699c:	7019      	strb	r1, [r3, #0]
 803699e:	4608      	mov	r0, r1
 80369a0:	f85d 4b04 	ldr.w	r4, [sp], #4
 80369a4:	4770      	bx	lr

080369a6 <__sfputs_r>:
 80369a6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80369a8:	4606      	mov	r6, r0
 80369aa:	460f      	mov	r7, r1
 80369ac:	4614      	mov	r4, r2
 80369ae:	18d5      	adds	r5, r2, r3
 80369b0:	42ac      	cmp	r4, r5
 80369b2:	d101      	bne.n	80369b8 <__sfputs_r+0x12>
 80369b4:	2000      	movs	r0, #0
 80369b6:	e007      	b.n	80369c8 <__sfputs_r+0x22>
 80369b8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80369bc:	463a      	mov	r2, r7
 80369be:	4630      	mov	r0, r6
 80369c0:	f7ff ffda 	bl	8036978 <__sfputc_r>
 80369c4:	1c43      	adds	r3, r0, #1
 80369c6:	d1f3      	bne.n	80369b0 <__sfputs_r+0xa>
 80369c8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080369cc <_vfiprintf_r>:
 80369cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80369d0:	460d      	mov	r5, r1
 80369d2:	b09d      	sub	sp, #116	; 0x74
 80369d4:	4614      	mov	r4, r2
 80369d6:	4698      	mov	r8, r3
 80369d8:	4606      	mov	r6, r0
 80369da:	b118      	cbz	r0, 80369e4 <_vfiprintf_r+0x18>
 80369dc:	6983      	ldr	r3, [r0, #24]
 80369de:	b90b      	cbnz	r3, 80369e4 <_vfiprintf_r+0x18>
 80369e0:	f7ff f9e4 	bl	8035dac <__sinit>
 80369e4:	4b89      	ldr	r3, [pc, #548]	; (8036c0c <_vfiprintf_r+0x240>)
 80369e6:	429d      	cmp	r5, r3
 80369e8:	d11b      	bne.n	8036a22 <_vfiprintf_r+0x56>
 80369ea:	6875      	ldr	r5, [r6, #4]
 80369ec:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80369ee:	07d9      	lsls	r1, r3, #31
 80369f0:	d405      	bmi.n	80369fe <_vfiprintf_r+0x32>
 80369f2:	89ab      	ldrh	r3, [r5, #12]
 80369f4:	059a      	lsls	r2, r3, #22
 80369f6:	d402      	bmi.n	80369fe <_vfiprintf_r+0x32>
 80369f8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80369fa:	f7ff fa9a 	bl	8035f32 <__retarget_lock_acquire_recursive>
 80369fe:	89ab      	ldrh	r3, [r5, #12]
 8036a00:	071b      	lsls	r3, r3, #28
 8036a02:	d501      	bpl.n	8036a08 <_vfiprintf_r+0x3c>
 8036a04:	692b      	ldr	r3, [r5, #16]
 8036a06:	b9eb      	cbnz	r3, 8036a44 <_vfiprintf_r+0x78>
 8036a08:	4629      	mov	r1, r5
 8036a0a:	4630      	mov	r0, r6
 8036a0c:	f000 fb06 	bl	803701c <__swsetup_r>
 8036a10:	b1c0      	cbz	r0, 8036a44 <_vfiprintf_r+0x78>
 8036a12:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8036a14:	07dc      	lsls	r4, r3, #31
 8036a16:	d50e      	bpl.n	8036a36 <_vfiprintf_r+0x6a>
 8036a18:	f04f 30ff 	mov.w	r0, #4294967295
 8036a1c:	b01d      	add	sp, #116	; 0x74
 8036a1e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8036a22:	4b7b      	ldr	r3, [pc, #492]	; (8036c10 <_vfiprintf_r+0x244>)
 8036a24:	429d      	cmp	r5, r3
 8036a26:	d101      	bne.n	8036a2c <_vfiprintf_r+0x60>
 8036a28:	68b5      	ldr	r5, [r6, #8]
 8036a2a:	e7df      	b.n	80369ec <_vfiprintf_r+0x20>
 8036a2c:	4b79      	ldr	r3, [pc, #484]	; (8036c14 <_vfiprintf_r+0x248>)
 8036a2e:	429d      	cmp	r5, r3
 8036a30:	bf08      	it	eq
 8036a32:	68f5      	ldreq	r5, [r6, #12]
 8036a34:	e7da      	b.n	80369ec <_vfiprintf_r+0x20>
 8036a36:	89ab      	ldrh	r3, [r5, #12]
 8036a38:	0598      	lsls	r0, r3, #22
 8036a3a:	d4ed      	bmi.n	8036a18 <_vfiprintf_r+0x4c>
 8036a3c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8036a3e:	f7ff fa79 	bl	8035f34 <__retarget_lock_release_recursive>
 8036a42:	e7e9      	b.n	8036a18 <_vfiprintf_r+0x4c>
 8036a44:	2300      	movs	r3, #0
 8036a46:	9309      	str	r3, [sp, #36]	; 0x24
 8036a48:	2320      	movs	r3, #32
 8036a4a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8036a4e:	f8cd 800c 	str.w	r8, [sp, #12]
 8036a52:	2330      	movs	r3, #48	; 0x30
 8036a54:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8036c18 <_vfiprintf_r+0x24c>
 8036a58:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8036a5c:	f04f 0901 	mov.w	r9, #1
 8036a60:	4623      	mov	r3, r4
 8036a62:	469a      	mov	sl, r3
 8036a64:	f813 2b01 	ldrb.w	r2, [r3], #1
 8036a68:	b10a      	cbz	r2, 8036a6e <_vfiprintf_r+0xa2>
 8036a6a:	2a25      	cmp	r2, #37	; 0x25
 8036a6c:	d1f9      	bne.n	8036a62 <_vfiprintf_r+0x96>
 8036a6e:	ebba 0b04 	subs.w	fp, sl, r4
 8036a72:	d00b      	beq.n	8036a8c <_vfiprintf_r+0xc0>
 8036a74:	465b      	mov	r3, fp
 8036a76:	4622      	mov	r2, r4
 8036a78:	4629      	mov	r1, r5
 8036a7a:	4630      	mov	r0, r6
 8036a7c:	f7ff ff93 	bl	80369a6 <__sfputs_r>
 8036a80:	3001      	adds	r0, #1
 8036a82:	f000 80aa 	beq.w	8036bda <_vfiprintf_r+0x20e>
 8036a86:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8036a88:	445a      	add	r2, fp
 8036a8a:	9209      	str	r2, [sp, #36]	; 0x24
 8036a8c:	f89a 3000 	ldrb.w	r3, [sl]
 8036a90:	2b00      	cmp	r3, #0
 8036a92:	f000 80a2 	beq.w	8036bda <_vfiprintf_r+0x20e>
 8036a96:	2300      	movs	r3, #0
 8036a98:	f04f 32ff 	mov.w	r2, #4294967295
 8036a9c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8036aa0:	f10a 0a01 	add.w	sl, sl, #1
 8036aa4:	9304      	str	r3, [sp, #16]
 8036aa6:	9307      	str	r3, [sp, #28]
 8036aa8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8036aac:	931a      	str	r3, [sp, #104]	; 0x68
 8036aae:	4654      	mov	r4, sl
 8036ab0:	2205      	movs	r2, #5
 8036ab2:	f814 1b01 	ldrb.w	r1, [r4], #1
 8036ab6:	4858      	ldr	r0, [pc, #352]	; (8036c18 <_vfiprintf_r+0x24c>)
 8036ab8:	f7e9 fb92 	bl	80201e0 <memchr>
 8036abc:	9a04      	ldr	r2, [sp, #16]
 8036abe:	b9d8      	cbnz	r0, 8036af8 <_vfiprintf_r+0x12c>
 8036ac0:	06d1      	lsls	r1, r2, #27
 8036ac2:	bf44      	itt	mi
 8036ac4:	2320      	movmi	r3, #32
 8036ac6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8036aca:	0713      	lsls	r3, r2, #28
 8036acc:	bf44      	itt	mi
 8036ace:	232b      	movmi	r3, #43	; 0x2b
 8036ad0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8036ad4:	f89a 3000 	ldrb.w	r3, [sl]
 8036ad8:	2b2a      	cmp	r3, #42	; 0x2a
 8036ada:	d015      	beq.n	8036b08 <_vfiprintf_r+0x13c>
 8036adc:	9a07      	ldr	r2, [sp, #28]
 8036ade:	4654      	mov	r4, sl
 8036ae0:	2000      	movs	r0, #0
 8036ae2:	f04f 0c0a 	mov.w	ip, #10
 8036ae6:	4621      	mov	r1, r4
 8036ae8:	f811 3b01 	ldrb.w	r3, [r1], #1
 8036aec:	3b30      	subs	r3, #48	; 0x30
 8036aee:	2b09      	cmp	r3, #9
 8036af0:	d94e      	bls.n	8036b90 <_vfiprintf_r+0x1c4>
 8036af2:	b1b0      	cbz	r0, 8036b22 <_vfiprintf_r+0x156>
 8036af4:	9207      	str	r2, [sp, #28]
 8036af6:	e014      	b.n	8036b22 <_vfiprintf_r+0x156>
 8036af8:	eba0 0308 	sub.w	r3, r0, r8
 8036afc:	fa09 f303 	lsl.w	r3, r9, r3
 8036b00:	4313      	orrs	r3, r2
 8036b02:	9304      	str	r3, [sp, #16]
 8036b04:	46a2      	mov	sl, r4
 8036b06:	e7d2      	b.n	8036aae <_vfiprintf_r+0xe2>
 8036b08:	9b03      	ldr	r3, [sp, #12]
 8036b0a:	1d19      	adds	r1, r3, #4
 8036b0c:	681b      	ldr	r3, [r3, #0]
 8036b0e:	9103      	str	r1, [sp, #12]
 8036b10:	2b00      	cmp	r3, #0
 8036b12:	bfbb      	ittet	lt
 8036b14:	425b      	neglt	r3, r3
 8036b16:	f042 0202 	orrlt.w	r2, r2, #2
 8036b1a:	9307      	strge	r3, [sp, #28]
 8036b1c:	9307      	strlt	r3, [sp, #28]
 8036b1e:	bfb8      	it	lt
 8036b20:	9204      	strlt	r2, [sp, #16]
 8036b22:	7823      	ldrb	r3, [r4, #0]
 8036b24:	2b2e      	cmp	r3, #46	; 0x2e
 8036b26:	d10c      	bne.n	8036b42 <_vfiprintf_r+0x176>
 8036b28:	7863      	ldrb	r3, [r4, #1]
 8036b2a:	2b2a      	cmp	r3, #42	; 0x2a
 8036b2c:	d135      	bne.n	8036b9a <_vfiprintf_r+0x1ce>
 8036b2e:	9b03      	ldr	r3, [sp, #12]
 8036b30:	1d1a      	adds	r2, r3, #4
 8036b32:	681b      	ldr	r3, [r3, #0]
 8036b34:	9203      	str	r2, [sp, #12]
 8036b36:	2b00      	cmp	r3, #0
 8036b38:	bfb8      	it	lt
 8036b3a:	f04f 33ff 	movlt.w	r3, #4294967295
 8036b3e:	3402      	adds	r4, #2
 8036b40:	9305      	str	r3, [sp, #20]
 8036b42:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8036c28 <_vfiprintf_r+0x25c>
 8036b46:	7821      	ldrb	r1, [r4, #0]
 8036b48:	2203      	movs	r2, #3
 8036b4a:	4650      	mov	r0, sl
 8036b4c:	f7e9 fb48 	bl	80201e0 <memchr>
 8036b50:	b140      	cbz	r0, 8036b64 <_vfiprintf_r+0x198>
 8036b52:	2340      	movs	r3, #64	; 0x40
 8036b54:	eba0 000a 	sub.w	r0, r0, sl
 8036b58:	fa03 f000 	lsl.w	r0, r3, r0
 8036b5c:	9b04      	ldr	r3, [sp, #16]
 8036b5e:	4303      	orrs	r3, r0
 8036b60:	3401      	adds	r4, #1
 8036b62:	9304      	str	r3, [sp, #16]
 8036b64:	f814 1b01 	ldrb.w	r1, [r4], #1
 8036b68:	482c      	ldr	r0, [pc, #176]	; (8036c1c <_vfiprintf_r+0x250>)
 8036b6a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8036b6e:	2206      	movs	r2, #6
 8036b70:	f7e9 fb36 	bl	80201e0 <memchr>
 8036b74:	2800      	cmp	r0, #0
 8036b76:	d03f      	beq.n	8036bf8 <_vfiprintf_r+0x22c>
 8036b78:	4b29      	ldr	r3, [pc, #164]	; (8036c20 <_vfiprintf_r+0x254>)
 8036b7a:	bb1b      	cbnz	r3, 8036bc4 <_vfiprintf_r+0x1f8>
 8036b7c:	9b03      	ldr	r3, [sp, #12]
 8036b7e:	3307      	adds	r3, #7
 8036b80:	f023 0307 	bic.w	r3, r3, #7
 8036b84:	3308      	adds	r3, #8
 8036b86:	9303      	str	r3, [sp, #12]
 8036b88:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8036b8a:	443b      	add	r3, r7
 8036b8c:	9309      	str	r3, [sp, #36]	; 0x24
 8036b8e:	e767      	b.n	8036a60 <_vfiprintf_r+0x94>
 8036b90:	fb0c 3202 	mla	r2, ip, r2, r3
 8036b94:	460c      	mov	r4, r1
 8036b96:	2001      	movs	r0, #1
 8036b98:	e7a5      	b.n	8036ae6 <_vfiprintf_r+0x11a>
 8036b9a:	2300      	movs	r3, #0
 8036b9c:	3401      	adds	r4, #1
 8036b9e:	9305      	str	r3, [sp, #20]
 8036ba0:	4619      	mov	r1, r3
 8036ba2:	f04f 0c0a 	mov.w	ip, #10
 8036ba6:	4620      	mov	r0, r4
 8036ba8:	f810 2b01 	ldrb.w	r2, [r0], #1
 8036bac:	3a30      	subs	r2, #48	; 0x30
 8036bae:	2a09      	cmp	r2, #9
 8036bb0:	d903      	bls.n	8036bba <_vfiprintf_r+0x1ee>
 8036bb2:	2b00      	cmp	r3, #0
 8036bb4:	d0c5      	beq.n	8036b42 <_vfiprintf_r+0x176>
 8036bb6:	9105      	str	r1, [sp, #20]
 8036bb8:	e7c3      	b.n	8036b42 <_vfiprintf_r+0x176>
 8036bba:	fb0c 2101 	mla	r1, ip, r1, r2
 8036bbe:	4604      	mov	r4, r0
 8036bc0:	2301      	movs	r3, #1
 8036bc2:	e7f0      	b.n	8036ba6 <_vfiprintf_r+0x1da>
 8036bc4:	ab03      	add	r3, sp, #12
 8036bc6:	9300      	str	r3, [sp, #0]
 8036bc8:	462a      	mov	r2, r5
 8036bca:	4b16      	ldr	r3, [pc, #88]	; (8036c24 <_vfiprintf_r+0x258>)
 8036bcc:	a904      	add	r1, sp, #16
 8036bce:	4630      	mov	r0, r6
 8036bd0:	f3af 8000 	nop.w
 8036bd4:	4607      	mov	r7, r0
 8036bd6:	1c78      	adds	r0, r7, #1
 8036bd8:	d1d6      	bne.n	8036b88 <_vfiprintf_r+0x1bc>
 8036bda:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8036bdc:	07d9      	lsls	r1, r3, #31
 8036bde:	d405      	bmi.n	8036bec <_vfiprintf_r+0x220>
 8036be0:	89ab      	ldrh	r3, [r5, #12]
 8036be2:	059a      	lsls	r2, r3, #22
 8036be4:	d402      	bmi.n	8036bec <_vfiprintf_r+0x220>
 8036be6:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8036be8:	f7ff f9a4 	bl	8035f34 <__retarget_lock_release_recursive>
 8036bec:	89ab      	ldrh	r3, [r5, #12]
 8036bee:	065b      	lsls	r3, r3, #25
 8036bf0:	f53f af12 	bmi.w	8036a18 <_vfiprintf_r+0x4c>
 8036bf4:	9809      	ldr	r0, [sp, #36]	; 0x24
 8036bf6:	e711      	b.n	8036a1c <_vfiprintf_r+0x50>
 8036bf8:	ab03      	add	r3, sp, #12
 8036bfa:	9300      	str	r3, [sp, #0]
 8036bfc:	462a      	mov	r2, r5
 8036bfe:	4b09      	ldr	r3, [pc, #36]	; (8036c24 <_vfiprintf_r+0x258>)
 8036c00:	a904      	add	r1, sp, #16
 8036c02:	4630      	mov	r0, r6
 8036c04:	f000 f880 	bl	8036d08 <_printf_i>
 8036c08:	e7e4      	b.n	8036bd4 <_vfiprintf_r+0x208>
 8036c0a:	bf00      	nop
 8036c0c:	0803ac00 	.word	0x0803ac00
 8036c10:	0803ac20 	.word	0x0803ac20
 8036c14:	0803abe0 	.word	0x0803abe0
 8036c18:	0803acf2 	.word	0x0803acf2
 8036c1c:	0803acfc 	.word	0x0803acfc
 8036c20:	00000000 	.word	0x00000000
 8036c24:	080369a7 	.word	0x080369a7
 8036c28:	0803acf8 	.word	0x0803acf8

08036c2c <_printf_common>:
 8036c2c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8036c30:	4616      	mov	r6, r2
 8036c32:	4699      	mov	r9, r3
 8036c34:	688a      	ldr	r2, [r1, #8]
 8036c36:	690b      	ldr	r3, [r1, #16]
 8036c38:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8036c3c:	4293      	cmp	r3, r2
 8036c3e:	bfb8      	it	lt
 8036c40:	4613      	movlt	r3, r2
 8036c42:	6033      	str	r3, [r6, #0]
 8036c44:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8036c48:	4607      	mov	r7, r0
 8036c4a:	460c      	mov	r4, r1
 8036c4c:	b10a      	cbz	r2, 8036c52 <_printf_common+0x26>
 8036c4e:	3301      	adds	r3, #1
 8036c50:	6033      	str	r3, [r6, #0]
 8036c52:	6823      	ldr	r3, [r4, #0]
 8036c54:	0699      	lsls	r1, r3, #26
 8036c56:	bf42      	ittt	mi
 8036c58:	6833      	ldrmi	r3, [r6, #0]
 8036c5a:	3302      	addmi	r3, #2
 8036c5c:	6033      	strmi	r3, [r6, #0]
 8036c5e:	6825      	ldr	r5, [r4, #0]
 8036c60:	f015 0506 	ands.w	r5, r5, #6
 8036c64:	d106      	bne.n	8036c74 <_printf_common+0x48>
 8036c66:	f104 0a19 	add.w	sl, r4, #25
 8036c6a:	68e3      	ldr	r3, [r4, #12]
 8036c6c:	6832      	ldr	r2, [r6, #0]
 8036c6e:	1a9b      	subs	r3, r3, r2
 8036c70:	42ab      	cmp	r3, r5
 8036c72:	dc26      	bgt.n	8036cc2 <_printf_common+0x96>
 8036c74:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8036c78:	1e13      	subs	r3, r2, #0
 8036c7a:	6822      	ldr	r2, [r4, #0]
 8036c7c:	bf18      	it	ne
 8036c7e:	2301      	movne	r3, #1
 8036c80:	0692      	lsls	r2, r2, #26
 8036c82:	d42b      	bmi.n	8036cdc <_printf_common+0xb0>
 8036c84:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8036c88:	4649      	mov	r1, r9
 8036c8a:	4638      	mov	r0, r7
 8036c8c:	47c0      	blx	r8
 8036c8e:	3001      	adds	r0, #1
 8036c90:	d01e      	beq.n	8036cd0 <_printf_common+0xa4>
 8036c92:	6823      	ldr	r3, [r4, #0]
 8036c94:	68e5      	ldr	r5, [r4, #12]
 8036c96:	6832      	ldr	r2, [r6, #0]
 8036c98:	f003 0306 	and.w	r3, r3, #6
 8036c9c:	2b04      	cmp	r3, #4
 8036c9e:	bf08      	it	eq
 8036ca0:	1aad      	subeq	r5, r5, r2
 8036ca2:	68a3      	ldr	r3, [r4, #8]
 8036ca4:	6922      	ldr	r2, [r4, #16]
 8036ca6:	bf0c      	ite	eq
 8036ca8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8036cac:	2500      	movne	r5, #0
 8036cae:	4293      	cmp	r3, r2
 8036cb0:	bfc4      	itt	gt
 8036cb2:	1a9b      	subgt	r3, r3, r2
 8036cb4:	18ed      	addgt	r5, r5, r3
 8036cb6:	2600      	movs	r6, #0
 8036cb8:	341a      	adds	r4, #26
 8036cba:	42b5      	cmp	r5, r6
 8036cbc:	d11a      	bne.n	8036cf4 <_printf_common+0xc8>
 8036cbe:	2000      	movs	r0, #0
 8036cc0:	e008      	b.n	8036cd4 <_printf_common+0xa8>
 8036cc2:	2301      	movs	r3, #1
 8036cc4:	4652      	mov	r2, sl
 8036cc6:	4649      	mov	r1, r9
 8036cc8:	4638      	mov	r0, r7
 8036cca:	47c0      	blx	r8
 8036ccc:	3001      	adds	r0, #1
 8036cce:	d103      	bne.n	8036cd8 <_printf_common+0xac>
 8036cd0:	f04f 30ff 	mov.w	r0, #4294967295
 8036cd4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8036cd8:	3501      	adds	r5, #1
 8036cda:	e7c6      	b.n	8036c6a <_printf_common+0x3e>
 8036cdc:	18e1      	adds	r1, r4, r3
 8036cde:	1c5a      	adds	r2, r3, #1
 8036ce0:	2030      	movs	r0, #48	; 0x30
 8036ce2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8036ce6:	4422      	add	r2, r4
 8036ce8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8036cec:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8036cf0:	3302      	adds	r3, #2
 8036cf2:	e7c7      	b.n	8036c84 <_printf_common+0x58>
 8036cf4:	2301      	movs	r3, #1
 8036cf6:	4622      	mov	r2, r4
 8036cf8:	4649      	mov	r1, r9
 8036cfa:	4638      	mov	r0, r7
 8036cfc:	47c0      	blx	r8
 8036cfe:	3001      	adds	r0, #1
 8036d00:	d0e6      	beq.n	8036cd0 <_printf_common+0xa4>
 8036d02:	3601      	adds	r6, #1
 8036d04:	e7d9      	b.n	8036cba <_printf_common+0x8e>
	...

08036d08 <_printf_i>:
 8036d08:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8036d0c:	7e0f      	ldrb	r7, [r1, #24]
 8036d0e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8036d10:	2f78      	cmp	r7, #120	; 0x78
 8036d12:	4691      	mov	r9, r2
 8036d14:	4680      	mov	r8, r0
 8036d16:	460c      	mov	r4, r1
 8036d18:	469a      	mov	sl, r3
 8036d1a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8036d1e:	d807      	bhi.n	8036d30 <_printf_i+0x28>
 8036d20:	2f62      	cmp	r7, #98	; 0x62
 8036d22:	d80a      	bhi.n	8036d3a <_printf_i+0x32>
 8036d24:	2f00      	cmp	r7, #0
 8036d26:	f000 80d8 	beq.w	8036eda <_printf_i+0x1d2>
 8036d2a:	2f58      	cmp	r7, #88	; 0x58
 8036d2c:	f000 80a3 	beq.w	8036e76 <_printf_i+0x16e>
 8036d30:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8036d34:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8036d38:	e03a      	b.n	8036db0 <_printf_i+0xa8>
 8036d3a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8036d3e:	2b15      	cmp	r3, #21
 8036d40:	d8f6      	bhi.n	8036d30 <_printf_i+0x28>
 8036d42:	a101      	add	r1, pc, #4	; (adr r1, 8036d48 <_printf_i+0x40>)
 8036d44:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8036d48:	08036da1 	.word	0x08036da1
 8036d4c:	08036db5 	.word	0x08036db5
 8036d50:	08036d31 	.word	0x08036d31
 8036d54:	08036d31 	.word	0x08036d31
 8036d58:	08036d31 	.word	0x08036d31
 8036d5c:	08036d31 	.word	0x08036d31
 8036d60:	08036db5 	.word	0x08036db5
 8036d64:	08036d31 	.word	0x08036d31
 8036d68:	08036d31 	.word	0x08036d31
 8036d6c:	08036d31 	.word	0x08036d31
 8036d70:	08036d31 	.word	0x08036d31
 8036d74:	08036ec1 	.word	0x08036ec1
 8036d78:	08036de5 	.word	0x08036de5
 8036d7c:	08036ea3 	.word	0x08036ea3
 8036d80:	08036d31 	.word	0x08036d31
 8036d84:	08036d31 	.word	0x08036d31
 8036d88:	08036ee3 	.word	0x08036ee3
 8036d8c:	08036d31 	.word	0x08036d31
 8036d90:	08036de5 	.word	0x08036de5
 8036d94:	08036d31 	.word	0x08036d31
 8036d98:	08036d31 	.word	0x08036d31
 8036d9c:	08036eab 	.word	0x08036eab
 8036da0:	682b      	ldr	r3, [r5, #0]
 8036da2:	1d1a      	adds	r2, r3, #4
 8036da4:	681b      	ldr	r3, [r3, #0]
 8036da6:	602a      	str	r2, [r5, #0]
 8036da8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8036dac:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8036db0:	2301      	movs	r3, #1
 8036db2:	e0a3      	b.n	8036efc <_printf_i+0x1f4>
 8036db4:	6820      	ldr	r0, [r4, #0]
 8036db6:	6829      	ldr	r1, [r5, #0]
 8036db8:	0606      	lsls	r6, r0, #24
 8036dba:	f101 0304 	add.w	r3, r1, #4
 8036dbe:	d50a      	bpl.n	8036dd6 <_printf_i+0xce>
 8036dc0:	680e      	ldr	r6, [r1, #0]
 8036dc2:	602b      	str	r3, [r5, #0]
 8036dc4:	2e00      	cmp	r6, #0
 8036dc6:	da03      	bge.n	8036dd0 <_printf_i+0xc8>
 8036dc8:	232d      	movs	r3, #45	; 0x2d
 8036dca:	4276      	negs	r6, r6
 8036dcc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8036dd0:	485e      	ldr	r0, [pc, #376]	; (8036f4c <_printf_i+0x244>)
 8036dd2:	230a      	movs	r3, #10
 8036dd4:	e019      	b.n	8036e0a <_printf_i+0x102>
 8036dd6:	680e      	ldr	r6, [r1, #0]
 8036dd8:	602b      	str	r3, [r5, #0]
 8036dda:	f010 0f40 	tst.w	r0, #64	; 0x40
 8036dde:	bf18      	it	ne
 8036de0:	b236      	sxthne	r6, r6
 8036de2:	e7ef      	b.n	8036dc4 <_printf_i+0xbc>
 8036de4:	682b      	ldr	r3, [r5, #0]
 8036de6:	6820      	ldr	r0, [r4, #0]
 8036de8:	1d19      	adds	r1, r3, #4
 8036dea:	6029      	str	r1, [r5, #0]
 8036dec:	0601      	lsls	r1, r0, #24
 8036dee:	d501      	bpl.n	8036df4 <_printf_i+0xec>
 8036df0:	681e      	ldr	r6, [r3, #0]
 8036df2:	e002      	b.n	8036dfa <_printf_i+0xf2>
 8036df4:	0646      	lsls	r6, r0, #25
 8036df6:	d5fb      	bpl.n	8036df0 <_printf_i+0xe8>
 8036df8:	881e      	ldrh	r6, [r3, #0]
 8036dfa:	4854      	ldr	r0, [pc, #336]	; (8036f4c <_printf_i+0x244>)
 8036dfc:	2f6f      	cmp	r7, #111	; 0x6f
 8036dfe:	bf0c      	ite	eq
 8036e00:	2308      	moveq	r3, #8
 8036e02:	230a      	movne	r3, #10
 8036e04:	2100      	movs	r1, #0
 8036e06:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8036e0a:	6865      	ldr	r5, [r4, #4]
 8036e0c:	60a5      	str	r5, [r4, #8]
 8036e0e:	2d00      	cmp	r5, #0
 8036e10:	bfa2      	ittt	ge
 8036e12:	6821      	ldrge	r1, [r4, #0]
 8036e14:	f021 0104 	bicge.w	r1, r1, #4
 8036e18:	6021      	strge	r1, [r4, #0]
 8036e1a:	b90e      	cbnz	r6, 8036e20 <_printf_i+0x118>
 8036e1c:	2d00      	cmp	r5, #0
 8036e1e:	d04d      	beq.n	8036ebc <_printf_i+0x1b4>
 8036e20:	4615      	mov	r5, r2
 8036e22:	fbb6 f1f3 	udiv	r1, r6, r3
 8036e26:	fb03 6711 	mls	r7, r3, r1, r6
 8036e2a:	5dc7      	ldrb	r7, [r0, r7]
 8036e2c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8036e30:	4637      	mov	r7, r6
 8036e32:	42bb      	cmp	r3, r7
 8036e34:	460e      	mov	r6, r1
 8036e36:	d9f4      	bls.n	8036e22 <_printf_i+0x11a>
 8036e38:	2b08      	cmp	r3, #8
 8036e3a:	d10b      	bne.n	8036e54 <_printf_i+0x14c>
 8036e3c:	6823      	ldr	r3, [r4, #0]
 8036e3e:	07de      	lsls	r6, r3, #31
 8036e40:	d508      	bpl.n	8036e54 <_printf_i+0x14c>
 8036e42:	6923      	ldr	r3, [r4, #16]
 8036e44:	6861      	ldr	r1, [r4, #4]
 8036e46:	4299      	cmp	r1, r3
 8036e48:	bfde      	ittt	le
 8036e4a:	2330      	movle	r3, #48	; 0x30
 8036e4c:	f805 3c01 	strble.w	r3, [r5, #-1]
 8036e50:	f105 35ff 	addle.w	r5, r5, #4294967295
 8036e54:	1b52      	subs	r2, r2, r5
 8036e56:	6122      	str	r2, [r4, #16]
 8036e58:	f8cd a000 	str.w	sl, [sp]
 8036e5c:	464b      	mov	r3, r9
 8036e5e:	aa03      	add	r2, sp, #12
 8036e60:	4621      	mov	r1, r4
 8036e62:	4640      	mov	r0, r8
 8036e64:	f7ff fee2 	bl	8036c2c <_printf_common>
 8036e68:	3001      	adds	r0, #1
 8036e6a:	d14c      	bne.n	8036f06 <_printf_i+0x1fe>
 8036e6c:	f04f 30ff 	mov.w	r0, #4294967295
 8036e70:	b004      	add	sp, #16
 8036e72:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8036e76:	4835      	ldr	r0, [pc, #212]	; (8036f4c <_printf_i+0x244>)
 8036e78:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8036e7c:	6829      	ldr	r1, [r5, #0]
 8036e7e:	6823      	ldr	r3, [r4, #0]
 8036e80:	f851 6b04 	ldr.w	r6, [r1], #4
 8036e84:	6029      	str	r1, [r5, #0]
 8036e86:	061d      	lsls	r5, r3, #24
 8036e88:	d514      	bpl.n	8036eb4 <_printf_i+0x1ac>
 8036e8a:	07df      	lsls	r7, r3, #31
 8036e8c:	bf44      	itt	mi
 8036e8e:	f043 0320 	orrmi.w	r3, r3, #32
 8036e92:	6023      	strmi	r3, [r4, #0]
 8036e94:	b91e      	cbnz	r6, 8036e9e <_printf_i+0x196>
 8036e96:	6823      	ldr	r3, [r4, #0]
 8036e98:	f023 0320 	bic.w	r3, r3, #32
 8036e9c:	6023      	str	r3, [r4, #0]
 8036e9e:	2310      	movs	r3, #16
 8036ea0:	e7b0      	b.n	8036e04 <_printf_i+0xfc>
 8036ea2:	6823      	ldr	r3, [r4, #0]
 8036ea4:	f043 0320 	orr.w	r3, r3, #32
 8036ea8:	6023      	str	r3, [r4, #0]
 8036eaa:	2378      	movs	r3, #120	; 0x78
 8036eac:	4828      	ldr	r0, [pc, #160]	; (8036f50 <_printf_i+0x248>)
 8036eae:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8036eb2:	e7e3      	b.n	8036e7c <_printf_i+0x174>
 8036eb4:	0659      	lsls	r1, r3, #25
 8036eb6:	bf48      	it	mi
 8036eb8:	b2b6      	uxthmi	r6, r6
 8036eba:	e7e6      	b.n	8036e8a <_printf_i+0x182>
 8036ebc:	4615      	mov	r5, r2
 8036ebe:	e7bb      	b.n	8036e38 <_printf_i+0x130>
 8036ec0:	682b      	ldr	r3, [r5, #0]
 8036ec2:	6826      	ldr	r6, [r4, #0]
 8036ec4:	6961      	ldr	r1, [r4, #20]
 8036ec6:	1d18      	adds	r0, r3, #4
 8036ec8:	6028      	str	r0, [r5, #0]
 8036eca:	0635      	lsls	r5, r6, #24
 8036ecc:	681b      	ldr	r3, [r3, #0]
 8036ece:	d501      	bpl.n	8036ed4 <_printf_i+0x1cc>
 8036ed0:	6019      	str	r1, [r3, #0]
 8036ed2:	e002      	b.n	8036eda <_printf_i+0x1d2>
 8036ed4:	0670      	lsls	r0, r6, #25
 8036ed6:	d5fb      	bpl.n	8036ed0 <_printf_i+0x1c8>
 8036ed8:	8019      	strh	r1, [r3, #0]
 8036eda:	2300      	movs	r3, #0
 8036edc:	6123      	str	r3, [r4, #16]
 8036ede:	4615      	mov	r5, r2
 8036ee0:	e7ba      	b.n	8036e58 <_printf_i+0x150>
 8036ee2:	682b      	ldr	r3, [r5, #0]
 8036ee4:	1d1a      	adds	r2, r3, #4
 8036ee6:	602a      	str	r2, [r5, #0]
 8036ee8:	681d      	ldr	r5, [r3, #0]
 8036eea:	6862      	ldr	r2, [r4, #4]
 8036eec:	2100      	movs	r1, #0
 8036eee:	4628      	mov	r0, r5
 8036ef0:	f7e9 f976 	bl	80201e0 <memchr>
 8036ef4:	b108      	cbz	r0, 8036efa <_printf_i+0x1f2>
 8036ef6:	1b40      	subs	r0, r0, r5
 8036ef8:	6060      	str	r0, [r4, #4]
 8036efa:	6863      	ldr	r3, [r4, #4]
 8036efc:	6123      	str	r3, [r4, #16]
 8036efe:	2300      	movs	r3, #0
 8036f00:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8036f04:	e7a8      	b.n	8036e58 <_printf_i+0x150>
 8036f06:	6923      	ldr	r3, [r4, #16]
 8036f08:	462a      	mov	r2, r5
 8036f0a:	4649      	mov	r1, r9
 8036f0c:	4640      	mov	r0, r8
 8036f0e:	47d0      	blx	sl
 8036f10:	3001      	adds	r0, #1
 8036f12:	d0ab      	beq.n	8036e6c <_printf_i+0x164>
 8036f14:	6823      	ldr	r3, [r4, #0]
 8036f16:	079b      	lsls	r3, r3, #30
 8036f18:	d413      	bmi.n	8036f42 <_printf_i+0x23a>
 8036f1a:	68e0      	ldr	r0, [r4, #12]
 8036f1c:	9b03      	ldr	r3, [sp, #12]
 8036f1e:	4298      	cmp	r0, r3
 8036f20:	bfb8      	it	lt
 8036f22:	4618      	movlt	r0, r3
 8036f24:	e7a4      	b.n	8036e70 <_printf_i+0x168>
 8036f26:	2301      	movs	r3, #1
 8036f28:	4632      	mov	r2, r6
 8036f2a:	4649      	mov	r1, r9
 8036f2c:	4640      	mov	r0, r8
 8036f2e:	47d0      	blx	sl
 8036f30:	3001      	adds	r0, #1
 8036f32:	d09b      	beq.n	8036e6c <_printf_i+0x164>
 8036f34:	3501      	adds	r5, #1
 8036f36:	68e3      	ldr	r3, [r4, #12]
 8036f38:	9903      	ldr	r1, [sp, #12]
 8036f3a:	1a5b      	subs	r3, r3, r1
 8036f3c:	42ab      	cmp	r3, r5
 8036f3e:	dcf2      	bgt.n	8036f26 <_printf_i+0x21e>
 8036f40:	e7eb      	b.n	8036f1a <_printf_i+0x212>
 8036f42:	2500      	movs	r5, #0
 8036f44:	f104 0619 	add.w	r6, r4, #25
 8036f48:	e7f5      	b.n	8036f36 <_printf_i+0x22e>
 8036f4a:	bf00      	nop
 8036f4c:	0803ad03 	.word	0x0803ad03
 8036f50:	0803ad14 	.word	0x0803ad14

08036f54 <_read_r>:
 8036f54:	b538      	push	{r3, r4, r5, lr}
 8036f56:	4d07      	ldr	r5, [pc, #28]	; (8036f74 <_read_r+0x20>)
 8036f58:	4604      	mov	r4, r0
 8036f5a:	4608      	mov	r0, r1
 8036f5c:	4611      	mov	r1, r2
 8036f5e:	2200      	movs	r2, #0
 8036f60:	602a      	str	r2, [r5, #0]
 8036f62:	461a      	mov	r2, r3
 8036f64:	f7e9 fdf2 	bl	8020b4c <_read>
 8036f68:	1c43      	adds	r3, r0, #1
 8036f6a:	d102      	bne.n	8036f72 <_read_r+0x1e>
 8036f6c:	682b      	ldr	r3, [r5, #0]
 8036f6e:	b103      	cbz	r3, 8036f72 <_read_r+0x1e>
 8036f70:	6023      	str	r3, [r4, #0]
 8036f72:	bd38      	pop	{r3, r4, r5, pc}
 8036f74:	2000ef78 	.word	0x2000ef78

08036f78 <__swbuf_r>:
 8036f78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8036f7a:	460e      	mov	r6, r1
 8036f7c:	4614      	mov	r4, r2
 8036f7e:	4605      	mov	r5, r0
 8036f80:	b118      	cbz	r0, 8036f8a <__swbuf_r+0x12>
 8036f82:	6983      	ldr	r3, [r0, #24]
 8036f84:	b90b      	cbnz	r3, 8036f8a <__swbuf_r+0x12>
 8036f86:	f7fe ff11 	bl	8035dac <__sinit>
 8036f8a:	4b21      	ldr	r3, [pc, #132]	; (8037010 <__swbuf_r+0x98>)
 8036f8c:	429c      	cmp	r4, r3
 8036f8e:	d12b      	bne.n	8036fe8 <__swbuf_r+0x70>
 8036f90:	686c      	ldr	r4, [r5, #4]
 8036f92:	69a3      	ldr	r3, [r4, #24]
 8036f94:	60a3      	str	r3, [r4, #8]
 8036f96:	89a3      	ldrh	r3, [r4, #12]
 8036f98:	071a      	lsls	r2, r3, #28
 8036f9a:	d52f      	bpl.n	8036ffc <__swbuf_r+0x84>
 8036f9c:	6923      	ldr	r3, [r4, #16]
 8036f9e:	b36b      	cbz	r3, 8036ffc <__swbuf_r+0x84>
 8036fa0:	6923      	ldr	r3, [r4, #16]
 8036fa2:	6820      	ldr	r0, [r4, #0]
 8036fa4:	1ac0      	subs	r0, r0, r3
 8036fa6:	6963      	ldr	r3, [r4, #20]
 8036fa8:	b2f6      	uxtb	r6, r6
 8036faa:	4283      	cmp	r3, r0
 8036fac:	4637      	mov	r7, r6
 8036fae:	dc04      	bgt.n	8036fba <__swbuf_r+0x42>
 8036fb0:	4621      	mov	r1, r4
 8036fb2:	4628      	mov	r0, r5
 8036fb4:	f7ff fb18 	bl	80365e8 <_fflush_r>
 8036fb8:	bb30      	cbnz	r0, 8037008 <__swbuf_r+0x90>
 8036fba:	68a3      	ldr	r3, [r4, #8]
 8036fbc:	3b01      	subs	r3, #1
 8036fbe:	60a3      	str	r3, [r4, #8]
 8036fc0:	6823      	ldr	r3, [r4, #0]
 8036fc2:	1c5a      	adds	r2, r3, #1
 8036fc4:	6022      	str	r2, [r4, #0]
 8036fc6:	701e      	strb	r6, [r3, #0]
 8036fc8:	6963      	ldr	r3, [r4, #20]
 8036fca:	3001      	adds	r0, #1
 8036fcc:	4283      	cmp	r3, r0
 8036fce:	d004      	beq.n	8036fda <__swbuf_r+0x62>
 8036fd0:	89a3      	ldrh	r3, [r4, #12]
 8036fd2:	07db      	lsls	r3, r3, #31
 8036fd4:	d506      	bpl.n	8036fe4 <__swbuf_r+0x6c>
 8036fd6:	2e0a      	cmp	r6, #10
 8036fd8:	d104      	bne.n	8036fe4 <__swbuf_r+0x6c>
 8036fda:	4621      	mov	r1, r4
 8036fdc:	4628      	mov	r0, r5
 8036fde:	f7ff fb03 	bl	80365e8 <_fflush_r>
 8036fe2:	b988      	cbnz	r0, 8037008 <__swbuf_r+0x90>
 8036fe4:	4638      	mov	r0, r7
 8036fe6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8036fe8:	4b0a      	ldr	r3, [pc, #40]	; (8037014 <__swbuf_r+0x9c>)
 8036fea:	429c      	cmp	r4, r3
 8036fec:	d101      	bne.n	8036ff2 <__swbuf_r+0x7a>
 8036fee:	68ac      	ldr	r4, [r5, #8]
 8036ff0:	e7cf      	b.n	8036f92 <__swbuf_r+0x1a>
 8036ff2:	4b09      	ldr	r3, [pc, #36]	; (8037018 <__swbuf_r+0xa0>)
 8036ff4:	429c      	cmp	r4, r3
 8036ff6:	bf08      	it	eq
 8036ff8:	68ec      	ldreq	r4, [r5, #12]
 8036ffa:	e7ca      	b.n	8036f92 <__swbuf_r+0x1a>
 8036ffc:	4621      	mov	r1, r4
 8036ffe:	4628      	mov	r0, r5
 8037000:	f000 f80c 	bl	803701c <__swsetup_r>
 8037004:	2800      	cmp	r0, #0
 8037006:	d0cb      	beq.n	8036fa0 <__swbuf_r+0x28>
 8037008:	f04f 37ff 	mov.w	r7, #4294967295
 803700c:	e7ea      	b.n	8036fe4 <__swbuf_r+0x6c>
 803700e:	bf00      	nop
 8037010:	0803ac00 	.word	0x0803ac00
 8037014:	0803ac20 	.word	0x0803ac20
 8037018:	0803abe0 	.word	0x0803abe0

0803701c <__swsetup_r>:
 803701c:	4b32      	ldr	r3, [pc, #200]	; (80370e8 <__swsetup_r+0xcc>)
 803701e:	b570      	push	{r4, r5, r6, lr}
 8037020:	681d      	ldr	r5, [r3, #0]
 8037022:	4606      	mov	r6, r0
 8037024:	460c      	mov	r4, r1
 8037026:	b125      	cbz	r5, 8037032 <__swsetup_r+0x16>
 8037028:	69ab      	ldr	r3, [r5, #24]
 803702a:	b913      	cbnz	r3, 8037032 <__swsetup_r+0x16>
 803702c:	4628      	mov	r0, r5
 803702e:	f7fe febd 	bl	8035dac <__sinit>
 8037032:	4b2e      	ldr	r3, [pc, #184]	; (80370ec <__swsetup_r+0xd0>)
 8037034:	429c      	cmp	r4, r3
 8037036:	d10f      	bne.n	8037058 <__swsetup_r+0x3c>
 8037038:	686c      	ldr	r4, [r5, #4]
 803703a:	89a3      	ldrh	r3, [r4, #12]
 803703c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8037040:	0719      	lsls	r1, r3, #28
 8037042:	d42c      	bmi.n	803709e <__swsetup_r+0x82>
 8037044:	06dd      	lsls	r5, r3, #27
 8037046:	d411      	bmi.n	803706c <__swsetup_r+0x50>
 8037048:	2309      	movs	r3, #9
 803704a:	6033      	str	r3, [r6, #0]
 803704c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8037050:	81a3      	strh	r3, [r4, #12]
 8037052:	f04f 30ff 	mov.w	r0, #4294967295
 8037056:	e03e      	b.n	80370d6 <__swsetup_r+0xba>
 8037058:	4b25      	ldr	r3, [pc, #148]	; (80370f0 <__swsetup_r+0xd4>)
 803705a:	429c      	cmp	r4, r3
 803705c:	d101      	bne.n	8037062 <__swsetup_r+0x46>
 803705e:	68ac      	ldr	r4, [r5, #8]
 8037060:	e7eb      	b.n	803703a <__swsetup_r+0x1e>
 8037062:	4b24      	ldr	r3, [pc, #144]	; (80370f4 <__swsetup_r+0xd8>)
 8037064:	429c      	cmp	r4, r3
 8037066:	bf08      	it	eq
 8037068:	68ec      	ldreq	r4, [r5, #12]
 803706a:	e7e6      	b.n	803703a <__swsetup_r+0x1e>
 803706c:	0758      	lsls	r0, r3, #29
 803706e:	d512      	bpl.n	8037096 <__swsetup_r+0x7a>
 8037070:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8037072:	b141      	cbz	r1, 8037086 <__swsetup_r+0x6a>
 8037074:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8037078:	4299      	cmp	r1, r3
 803707a:	d002      	beq.n	8037082 <__swsetup_r+0x66>
 803707c:	4630      	mov	r0, r6
 803707e:	f7fe ffab 	bl	8035fd8 <_free_r>
 8037082:	2300      	movs	r3, #0
 8037084:	6363      	str	r3, [r4, #52]	; 0x34
 8037086:	89a3      	ldrh	r3, [r4, #12]
 8037088:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 803708c:	81a3      	strh	r3, [r4, #12]
 803708e:	2300      	movs	r3, #0
 8037090:	6063      	str	r3, [r4, #4]
 8037092:	6923      	ldr	r3, [r4, #16]
 8037094:	6023      	str	r3, [r4, #0]
 8037096:	89a3      	ldrh	r3, [r4, #12]
 8037098:	f043 0308 	orr.w	r3, r3, #8
 803709c:	81a3      	strh	r3, [r4, #12]
 803709e:	6923      	ldr	r3, [r4, #16]
 80370a0:	b94b      	cbnz	r3, 80370b6 <__swsetup_r+0x9a>
 80370a2:	89a3      	ldrh	r3, [r4, #12]
 80370a4:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80370a8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80370ac:	d003      	beq.n	80370b6 <__swsetup_r+0x9a>
 80370ae:	4621      	mov	r1, r4
 80370b0:	4630      	mov	r0, r6
 80370b2:	f000 f84d 	bl	8037150 <__smakebuf_r>
 80370b6:	89a0      	ldrh	r0, [r4, #12]
 80370b8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80370bc:	f010 0301 	ands.w	r3, r0, #1
 80370c0:	d00a      	beq.n	80370d8 <__swsetup_r+0xbc>
 80370c2:	2300      	movs	r3, #0
 80370c4:	60a3      	str	r3, [r4, #8]
 80370c6:	6963      	ldr	r3, [r4, #20]
 80370c8:	425b      	negs	r3, r3
 80370ca:	61a3      	str	r3, [r4, #24]
 80370cc:	6923      	ldr	r3, [r4, #16]
 80370ce:	b943      	cbnz	r3, 80370e2 <__swsetup_r+0xc6>
 80370d0:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80370d4:	d1ba      	bne.n	803704c <__swsetup_r+0x30>
 80370d6:	bd70      	pop	{r4, r5, r6, pc}
 80370d8:	0781      	lsls	r1, r0, #30
 80370da:	bf58      	it	pl
 80370dc:	6963      	ldrpl	r3, [r4, #20]
 80370de:	60a3      	str	r3, [r4, #8]
 80370e0:	e7f4      	b.n	80370cc <__swsetup_r+0xb0>
 80370e2:	2000      	movs	r0, #0
 80370e4:	e7f7      	b.n	80370d6 <__swsetup_r+0xba>
 80370e6:	bf00      	nop
 80370e8:	20000034 	.word	0x20000034
 80370ec:	0803ac00 	.word	0x0803ac00
 80370f0:	0803ac20 	.word	0x0803ac20
 80370f4:	0803abe0 	.word	0x0803abe0

080370f8 <abort>:
 80370f8:	b508      	push	{r3, lr}
 80370fa:	2006      	movs	r0, #6
 80370fc:	f000 f8c0 	bl	8037280 <raise>
 8037100:	2001      	movs	r0, #1
 8037102:	f7e9 fd19 	bl	8020b38 <_exit>

08037106 <__swhatbuf_r>:
 8037106:	b570      	push	{r4, r5, r6, lr}
 8037108:	460e      	mov	r6, r1
 803710a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 803710e:	2900      	cmp	r1, #0
 8037110:	b096      	sub	sp, #88	; 0x58
 8037112:	4614      	mov	r4, r2
 8037114:	461d      	mov	r5, r3
 8037116:	da08      	bge.n	803712a <__swhatbuf_r+0x24>
 8037118:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 803711c:	2200      	movs	r2, #0
 803711e:	602a      	str	r2, [r5, #0]
 8037120:	061a      	lsls	r2, r3, #24
 8037122:	d410      	bmi.n	8037146 <__swhatbuf_r+0x40>
 8037124:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8037128:	e00e      	b.n	8037148 <__swhatbuf_r+0x42>
 803712a:	466a      	mov	r2, sp
 803712c:	f000 f8c4 	bl	80372b8 <_fstat_r>
 8037130:	2800      	cmp	r0, #0
 8037132:	dbf1      	blt.n	8037118 <__swhatbuf_r+0x12>
 8037134:	9a01      	ldr	r2, [sp, #4]
 8037136:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 803713a:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 803713e:	425a      	negs	r2, r3
 8037140:	415a      	adcs	r2, r3
 8037142:	602a      	str	r2, [r5, #0]
 8037144:	e7ee      	b.n	8037124 <__swhatbuf_r+0x1e>
 8037146:	2340      	movs	r3, #64	; 0x40
 8037148:	2000      	movs	r0, #0
 803714a:	6023      	str	r3, [r4, #0]
 803714c:	b016      	add	sp, #88	; 0x58
 803714e:	bd70      	pop	{r4, r5, r6, pc}

08037150 <__smakebuf_r>:
 8037150:	898b      	ldrh	r3, [r1, #12]
 8037152:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8037154:	079d      	lsls	r5, r3, #30
 8037156:	4606      	mov	r6, r0
 8037158:	460c      	mov	r4, r1
 803715a:	d507      	bpl.n	803716c <__smakebuf_r+0x1c>
 803715c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8037160:	6023      	str	r3, [r4, #0]
 8037162:	6123      	str	r3, [r4, #16]
 8037164:	2301      	movs	r3, #1
 8037166:	6163      	str	r3, [r4, #20]
 8037168:	b002      	add	sp, #8
 803716a:	bd70      	pop	{r4, r5, r6, pc}
 803716c:	ab01      	add	r3, sp, #4
 803716e:	466a      	mov	r2, sp
 8037170:	f7ff ffc9 	bl	8037106 <__swhatbuf_r>
 8037174:	9900      	ldr	r1, [sp, #0]
 8037176:	4605      	mov	r5, r0
 8037178:	4630      	mov	r0, r6
 803717a:	f7fe ff99 	bl	80360b0 <_malloc_r>
 803717e:	b948      	cbnz	r0, 8037194 <__smakebuf_r+0x44>
 8037180:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8037184:	059a      	lsls	r2, r3, #22
 8037186:	d4ef      	bmi.n	8037168 <__smakebuf_r+0x18>
 8037188:	f023 0303 	bic.w	r3, r3, #3
 803718c:	f043 0302 	orr.w	r3, r3, #2
 8037190:	81a3      	strh	r3, [r4, #12]
 8037192:	e7e3      	b.n	803715c <__smakebuf_r+0xc>
 8037194:	4b0d      	ldr	r3, [pc, #52]	; (80371cc <__smakebuf_r+0x7c>)
 8037196:	62b3      	str	r3, [r6, #40]	; 0x28
 8037198:	89a3      	ldrh	r3, [r4, #12]
 803719a:	6020      	str	r0, [r4, #0]
 803719c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80371a0:	81a3      	strh	r3, [r4, #12]
 80371a2:	9b00      	ldr	r3, [sp, #0]
 80371a4:	6163      	str	r3, [r4, #20]
 80371a6:	9b01      	ldr	r3, [sp, #4]
 80371a8:	6120      	str	r0, [r4, #16]
 80371aa:	b15b      	cbz	r3, 80371c4 <__smakebuf_r+0x74>
 80371ac:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80371b0:	4630      	mov	r0, r6
 80371b2:	f000 f893 	bl	80372dc <_isatty_r>
 80371b6:	b128      	cbz	r0, 80371c4 <__smakebuf_r+0x74>
 80371b8:	89a3      	ldrh	r3, [r4, #12]
 80371ba:	f023 0303 	bic.w	r3, r3, #3
 80371be:	f043 0301 	orr.w	r3, r3, #1
 80371c2:	81a3      	strh	r3, [r4, #12]
 80371c4:	89a0      	ldrh	r0, [r4, #12]
 80371c6:	4305      	orrs	r5, r0
 80371c8:	81a5      	strh	r5, [r4, #12]
 80371ca:	e7cd      	b.n	8037168 <__smakebuf_r+0x18>
 80371cc:	08035d45 	.word	0x08035d45

080371d0 <_realloc_r>:
 80371d0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80371d4:	4680      	mov	r8, r0
 80371d6:	4614      	mov	r4, r2
 80371d8:	460e      	mov	r6, r1
 80371da:	b921      	cbnz	r1, 80371e6 <_realloc_r+0x16>
 80371dc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80371e0:	4611      	mov	r1, r2
 80371e2:	f7fe bf65 	b.w	80360b0 <_malloc_r>
 80371e6:	b92a      	cbnz	r2, 80371f4 <_realloc_r+0x24>
 80371e8:	f7fe fef6 	bl	8035fd8 <_free_r>
 80371ec:	4625      	mov	r5, r4
 80371ee:	4628      	mov	r0, r5
 80371f0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80371f4:	f000 f882 	bl	80372fc <_malloc_usable_size_r>
 80371f8:	4284      	cmp	r4, r0
 80371fa:	4607      	mov	r7, r0
 80371fc:	d802      	bhi.n	8037204 <_realloc_r+0x34>
 80371fe:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8037202:	d812      	bhi.n	803722a <_realloc_r+0x5a>
 8037204:	4621      	mov	r1, r4
 8037206:	4640      	mov	r0, r8
 8037208:	f7fe ff52 	bl	80360b0 <_malloc_r>
 803720c:	4605      	mov	r5, r0
 803720e:	2800      	cmp	r0, #0
 8037210:	d0ed      	beq.n	80371ee <_realloc_r+0x1e>
 8037212:	42bc      	cmp	r4, r7
 8037214:	4622      	mov	r2, r4
 8037216:	4631      	mov	r1, r6
 8037218:	bf28      	it	cs
 803721a:	463a      	movcs	r2, r7
 803721c:	f7fe feac 	bl	8035f78 <memcpy>
 8037220:	4631      	mov	r1, r6
 8037222:	4640      	mov	r0, r8
 8037224:	f7fe fed8 	bl	8035fd8 <_free_r>
 8037228:	e7e1      	b.n	80371ee <_realloc_r+0x1e>
 803722a:	4635      	mov	r5, r6
 803722c:	e7df      	b.n	80371ee <_realloc_r+0x1e>

0803722e <_raise_r>:
 803722e:	291f      	cmp	r1, #31
 8037230:	b538      	push	{r3, r4, r5, lr}
 8037232:	4604      	mov	r4, r0
 8037234:	460d      	mov	r5, r1
 8037236:	d904      	bls.n	8037242 <_raise_r+0x14>
 8037238:	2316      	movs	r3, #22
 803723a:	6003      	str	r3, [r0, #0]
 803723c:	f04f 30ff 	mov.w	r0, #4294967295
 8037240:	bd38      	pop	{r3, r4, r5, pc}
 8037242:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8037244:	b112      	cbz	r2, 803724c <_raise_r+0x1e>
 8037246:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 803724a:	b94b      	cbnz	r3, 8037260 <_raise_r+0x32>
 803724c:	4620      	mov	r0, r4
 803724e:	f000 f831 	bl	80372b4 <_getpid_r>
 8037252:	462a      	mov	r2, r5
 8037254:	4601      	mov	r1, r0
 8037256:	4620      	mov	r0, r4
 8037258:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 803725c:	f000 b818 	b.w	8037290 <_kill_r>
 8037260:	2b01      	cmp	r3, #1
 8037262:	d00a      	beq.n	803727a <_raise_r+0x4c>
 8037264:	1c59      	adds	r1, r3, #1
 8037266:	d103      	bne.n	8037270 <_raise_r+0x42>
 8037268:	2316      	movs	r3, #22
 803726a:	6003      	str	r3, [r0, #0]
 803726c:	2001      	movs	r0, #1
 803726e:	e7e7      	b.n	8037240 <_raise_r+0x12>
 8037270:	2400      	movs	r4, #0
 8037272:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8037276:	4628      	mov	r0, r5
 8037278:	4798      	blx	r3
 803727a:	2000      	movs	r0, #0
 803727c:	e7e0      	b.n	8037240 <_raise_r+0x12>
	...

08037280 <raise>:
 8037280:	4b02      	ldr	r3, [pc, #8]	; (803728c <raise+0xc>)
 8037282:	4601      	mov	r1, r0
 8037284:	6818      	ldr	r0, [r3, #0]
 8037286:	f7ff bfd2 	b.w	803722e <_raise_r>
 803728a:	bf00      	nop
 803728c:	20000034 	.word	0x20000034

08037290 <_kill_r>:
 8037290:	b538      	push	{r3, r4, r5, lr}
 8037292:	4d07      	ldr	r5, [pc, #28]	; (80372b0 <_kill_r+0x20>)
 8037294:	2300      	movs	r3, #0
 8037296:	4604      	mov	r4, r0
 8037298:	4608      	mov	r0, r1
 803729a:	4611      	mov	r1, r2
 803729c:	602b      	str	r3, [r5, #0]
 803729e:	f7e9 fc39 	bl	8020b14 <_kill>
 80372a2:	1c43      	adds	r3, r0, #1
 80372a4:	d102      	bne.n	80372ac <_kill_r+0x1c>
 80372a6:	682b      	ldr	r3, [r5, #0]
 80372a8:	b103      	cbz	r3, 80372ac <_kill_r+0x1c>
 80372aa:	6023      	str	r3, [r4, #0]
 80372ac:	bd38      	pop	{r3, r4, r5, pc}
 80372ae:	bf00      	nop
 80372b0:	2000ef78 	.word	0x2000ef78

080372b4 <_getpid_r>:
 80372b4:	f7e9 bc26 	b.w	8020b04 <_getpid>

080372b8 <_fstat_r>:
 80372b8:	b538      	push	{r3, r4, r5, lr}
 80372ba:	4d07      	ldr	r5, [pc, #28]	; (80372d8 <_fstat_r+0x20>)
 80372bc:	2300      	movs	r3, #0
 80372be:	4604      	mov	r4, r0
 80372c0:	4608      	mov	r0, r1
 80372c2:	4611      	mov	r1, r2
 80372c4:	602b      	str	r3, [r5, #0]
 80372c6:	f7e9 fc86 	bl	8020bd6 <_fstat>
 80372ca:	1c43      	adds	r3, r0, #1
 80372cc:	d102      	bne.n	80372d4 <_fstat_r+0x1c>
 80372ce:	682b      	ldr	r3, [r5, #0]
 80372d0:	b103      	cbz	r3, 80372d4 <_fstat_r+0x1c>
 80372d2:	6023      	str	r3, [r4, #0]
 80372d4:	bd38      	pop	{r3, r4, r5, pc}
 80372d6:	bf00      	nop
 80372d8:	2000ef78 	.word	0x2000ef78

080372dc <_isatty_r>:
 80372dc:	b538      	push	{r3, r4, r5, lr}
 80372de:	4d06      	ldr	r5, [pc, #24]	; (80372f8 <_isatty_r+0x1c>)
 80372e0:	2300      	movs	r3, #0
 80372e2:	4604      	mov	r4, r0
 80372e4:	4608      	mov	r0, r1
 80372e6:	602b      	str	r3, [r5, #0]
 80372e8:	f7e9 fc85 	bl	8020bf6 <_isatty>
 80372ec:	1c43      	adds	r3, r0, #1
 80372ee:	d102      	bne.n	80372f6 <_isatty_r+0x1a>
 80372f0:	682b      	ldr	r3, [r5, #0]
 80372f2:	b103      	cbz	r3, 80372f6 <_isatty_r+0x1a>
 80372f4:	6023      	str	r3, [r4, #0]
 80372f6:	bd38      	pop	{r3, r4, r5, pc}
 80372f8:	2000ef78 	.word	0x2000ef78

080372fc <_malloc_usable_size_r>:
 80372fc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8037300:	1f18      	subs	r0, r3, #4
 8037302:	2b00      	cmp	r3, #0
 8037304:	bfbc      	itt	lt
 8037306:	580b      	ldrlt	r3, [r1, r0]
 8037308:	18c0      	addlt	r0, r0, r3
 803730a:	4770      	bx	lr

0803730c <_init>:
 803730c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 803730e:	bf00      	nop
 8037310:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8037312:	bc08      	pop	{r3}
 8037314:	469e      	mov	lr, r3
 8037316:	4770      	bx	lr

08037318 <_fini>:
 8037318:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 803731a:	bf00      	nop
 803731c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 803731e:	bc08      	pop	{r3}
 8037320:	469e      	mov	lr, r3
 8037322:	4770      	bx	lr
